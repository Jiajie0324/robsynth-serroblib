% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RPRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRPRR11_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RPRPRR11_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR11_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR11_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR11_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RPRPRR11_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:15:36
% EndTime: 2019-03-09 04:15:55
% DurationCPUTime: 13.34s
% Computational Cost: add. (15236->574), mult. (50659->820), div. (0->0), fcn. (44615->14), ass. (0->237)
t596 = sin(qJ(3));
t588 = sin(pkin(12));
t590 = sin(pkin(6));
t677 = qJD(1) * t590;
t663 = t588 * t677;
t599 = cos(qJ(3));
t589 = sin(pkin(7));
t709 = cos(pkin(6));
t654 = t709 * t589;
t633 = t599 * t654;
t592 = cos(pkin(12));
t593 = cos(pkin(7));
t689 = t593 * t599;
t668 = t592 * t689;
t725 = t590 * t668 + t633;
t721 = qJD(1) * t725 - t596 * t663;
t512 = t721 * qJD(3);
t587 = sin(pkin(13));
t591 = cos(pkin(13));
t595 = sin(qJ(5));
t598 = cos(qJ(5));
t563 = t587 * t598 + t591 * t595;
t720 = t512 * t563;
t690 = t593 * t596;
t538 = t590 * (t588 * t599 + t592 * t690) + t596 * t654;
t532 = t538 * qJD(1);
t652 = qJD(1) * t709;
t662 = t592 * t677;
t549 = t589 * t662 - t593 * t652 - qJD(3);
t487 = t532 * t591 - t549 * t587;
t515 = t587 * t532;
t646 = t549 * t591 + t515;
t724 = t598 * t487 - t595 * t646;
t421 = qJD(5) * t724 + t720;
t597 = cos(qJ(6));
t419 = t597 * t421;
t594 = sin(qJ(6));
t484 = t598 * t646;
t451 = t487 * t595 + t484;
t447 = qJD(6) + t451;
t727 = t447 ^ 2;
t728 = -t727 * t594 + t419;
t522 = qJD(5) - t721;
t726 = t451 * t522;
t687 = t598 * t591;
t562 = t587 * t595 - t687;
t681 = t522 * t562;
t680 = t522 * t563;
t719 = (t588 ^ 2 + t592 ^ 2) * MDP(6) * t590 ^ 2;
t664 = pkin(1) * t709;
t580 = t592 * t664;
t697 = t588 * t590;
t601 = t709 * pkin(2) + (-pkin(9) * t593 - qJ(2)) * t697;
t539 = t580 + t601;
t548 = (-pkin(9) * t588 * t589 - pkin(2) * t592 - pkin(1)) * t590;
t488 = -t539 * t589 + t593 * t548;
t696 = t588 * t596;
t537 = t590 * t696 - t725;
t459 = pkin(3) * t537 - qJ(4) * t538 + t488;
t693 = t590 * t592;
t604 = (t593 * t693 + t654) * pkin(9);
t679 = qJ(2) * t693 + t588 * t664;
t535 = t604 + t679;
t553 = t589 * t693 - t593 * t709;
t618 = t539 * t593 + t548 * t589;
t464 = -qJ(4) * t553 + t535 * t599 + t596 * t618;
t414 = t591 * t459 - t464 * t587;
t491 = t538 * t591 - t553 * t587;
t399 = pkin(4) * t537 - pkin(10) * t491 + t414;
t415 = t587 * t459 + t591 * t464;
t490 = t538 * t587 + t553 * t591;
t404 = -pkin(10) * t490 + t415;
t718 = t595 * t399 + t598 * t404;
t638 = pkin(1) * t652;
t552 = qJ(2) * t662 + t588 * t638;
t514 = qJD(1) * t604 + t552;
t576 = t592 * t638;
t523 = qJD(1) * t601 + t576;
t542 = qJD(1) * t548 + qJD(2);
t468 = -t596 * t514 + t599 * (t523 * t593 + t542 * t589);
t479 = pkin(3) * t532 - qJ(4) * t721;
t425 = -t468 * t587 + t591 * t479;
t711 = pkin(10) * t591;
t410 = pkin(4) * t532 - t711 * t721 + t425;
t426 = t591 * t468 + t587 * t479;
t702 = t721 * t587;
t417 = -pkin(10) * t702 + t426;
t710 = pkin(10) + qJ(4);
t571 = t710 * t587;
t572 = t710 * t591;
t615 = -t571 * t598 - t572 * t595;
t717 = qJD(4) * t562 - qJD(5) * t615 + t595 * t410 + t598 * t417;
t544 = -t571 * t595 + t572 * t598;
t716 = -qJD(4) * t563 - qJD(5) * t544 - t410 * t598 + t417 * t595;
t531 = t538 * qJD(3);
t513 = qJD(1) * t531;
t480 = -t523 * t589 + t593 * t542;
t444 = -pkin(3) * t721 - qJ(4) * t532 + t480;
t695 = t589 * t596;
t469 = t599 * t514 + t523 * t690 + t542 * t695;
t446 = -qJ(4) * t549 + t469;
t407 = t591 * t444 - t446 * t587;
t390 = -pkin(4) * t721 - pkin(10) * t487 + t407;
t408 = t587 * t444 + t591 * t446;
t392 = -pkin(10) * t646 + t408;
t373 = t390 * t595 + t392 * t598;
t669 = qJD(1) * qJD(2);
t655 = t590 * t669;
t637 = t588 * t655;
t614 = t593 * t637;
t636 = t592 * t655;
t674 = qJD(3) * t599;
t656 = t593 * t674;
t658 = t589 * t674;
t666 = t523 * t656 + t542 * t658 + t599 * t636;
t714 = -t596 * (qJD(3) * t514 + t614) + t666;
t433 = -qJD(4) * t549 + t714;
t455 = pkin(3) * t513 - qJ(4) * t512 - qJD(4) * t532 + t589 * t637;
t405 = -t433 * t587 + t591 * t455;
t692 = t591 * t512;
t391 = pkin(4) * t513 - pkin(10) * t692 + t405;
t406 = t591 * t433 + t587 * t455;
t703 = t512 * t587;
t394 = -pkin(10) * t703 + t406;
t650 = -t598 * t391 + t394 * t595;
t713 = -t373 * qJD(5) - t650;
t365 = -pkin(5) * t513 - t713;
t715 = t447 * (pkin(5) * t724 + t447 * pkin(11)) + t365;
t712 = t588 * MDP(4) + t592 * MDP(5);
t420 = -qJD(5) * t484 + t512 * t687 + (-qJD(5) * t487 - t703) * t595;
t670 = qJD(6) * t597;
t667 = t597 * t420 + t594 * t513 + t522 * t670;
t671 = qJD(6) * t594;
t382 = -t671 * t724 + t667;
t707 = t382 * t594;
t704 = t724 * t594;
t429 = -t597 * t522 + t704;
t706 = t429 * t447;
t431 = t522 * t594 + t597 * t724;
t705 = t431 * t447;
t530 = (t633 + (t668 - t696) * t590) * qJD(3);
t701 = t530 * t587;
t699 = t563 * t597;
t698 = t587 * t599;
t694 = t589 * t599;
t691 = t591 * t599;
t688 = t594 * t421;
t676 = qJD(2) * t590;
t661 = t588 * t676;
t639 = t593 * t661;
t660 = t592 * t676;
t665 = t539 * t656 + t548 * t658 + t599 * t660;
t440 = -qJD(4) * t553 + (-qJD(3) * t535 - t639) * t596 + t665;
t640 = t589 * t661;
t472 = pkin(3) * t531 - qJ(4) * t530 - qJD(4) * t538 + t640;
t412 = t591 * t440 + t587 * t472;
t547 = (-t588 * t690 + t592 * t599) * t677;
t642 = t589 * t663;
t499 = -t547 * t587 + t591 * t642;
t500 = t547 * t591 + t587 * t642;
t554 = -t587 * t695 + t591 * t593;
t555 = t587 * t593 + t591 * t695;
t616 = t554 * t598 - t555 * t595;
t684 = -qJD(5) * t616 + t499 * t595 + t500 * t598 + t562 * t658;
t508 = t554 * t595 + t555 * t598;
t683 = qJD(5) * t508 + t499 * t598 - t500 * t595 + t563 * t658;
t682 = pkin(5) * t532 - t716;
t675 = qJD(3) * t596;
t673 = qJD(5) * t595;
t672 = qJD(5) * t598;
t583 = -pkin(4) * t591 - pkin(3);
t659 = t589 * t675;
t657 = t593 * t675;
t610 = t390 * t672 + t595 * t391 - t392 * t673 + t598 * t394;
t364 = pkin(11) * t513 + t610;
t439 = t514 * t674 + t523 * t657 + t542 * t659 + t596 * t636 + t599 * t614;
t427 = pkin(4) * t703 + t439;
t377 = pkin(5) * t421 - pkin(11) * t420 + t427;
t651 = -t364 * t594 + t597 * t377;
t649 = t420 * t594 - t597 * t513;
t411 = -t440 * t587 + t591 * t472;
t648 = -t597 * t532 + t681 * t594;
t647 = t532 * t594 + t681 * t597;
t644 = t447 * t597;
t435 = pkin(4) * t702 + t469;
t546 = (t588 * t689 + t592 * t596) * t677;
t632 = -t546 + t659;
t527 = pkin(5) * t562 - pkin(11) * t563 + t583;
t631 = pkin(11) * t532 - qJD(6) * t527 + t717;
t630 = -t680 * pkin(5) - t681 * pkin(11) + qJD(6) * t544 + t435;
t456 = t535 * t674 + t539 * t657 + t548 * t659 + t596 * t660 + t599 * t639;
t629 = t364 * t597 + t377 * t594;
t371 = pkin(11) * t522 + t373;
t445 = t549 * pkin(3) + qJD(4) - t468;
t422 = pkin(4) * t646 + t445;
t381 = t451 * pkin(5) - pkin(11) * t724 + t422;
t369 = t371 * t597 + t381 * t594;
t628 = t371 * t594 - t381 * t597;
t375 = pkin(11) * t537 + t718;
t467 = pkin(3) * t553 + t596 * t535 - t599 * t618;
t428 = pkin(4) * t490 + t467;
t470 = t598 * t490 + t491 * t595;
t471 = -t490 * t595 + t491 * t598;
t384 = pkin(5) * t470 - pkin(11) * t471 + t428;
t627 = t375 * t597 + t384 * t594;
t626 = -t375 * t594 + t384 * t597;
t372 = t390 * t598 - t392 * t595;
t396 = pkin(4) * t531 - t530 * t711 + t411;
t403 = -pkin(10) * t701 + t412;
t625 = t396 * t598 - t403 * t595;
t624 = t399 * t598 - t404 * t595;
t622 = -t407 * t587 + t408 * t591;
t620 = t445 * t530 + t467 * t512;
t437 = t471 * t597 + t537 * t594;
t436 = t471 * t594 - t537 * t597;
t617 = (-qJ(2) * t663 + t576) * t588 - t552 * t592;
t613 = qJD(6) * t694 + t684;
t434 = pkin(4) * t701 + t456;
t609 = t595 * t396 + t399 * t672 + t598 * t403 - t404 * t673;
t608 = t563 * t670 - t648;
t607 = -t563 * t671 - t647;
t606 = -qJD(6) * t508 + t632;
t603 = -pkin(3) * t512 - qJ(4) * t513 - (-qJD(4) + t445) * t721;
t370 = -pkin(5) * t522 - t372;
t602 = -pkin(11) * t421 + (t370 + t372) * t447;
t424 = qJD(5) * t471 + t530 * t563;
t423 = -qJD(5) * t470 - t530 * t562;
t386 = qJD(6) * t437 + t423 * t594 - t531 * t597;
t385 = -qJD(6) * t436 + t423 * t597 + t531 * t594;
t383 = qJD(6) * t431 + t649;
t378 = pkin(5) * t424 - pkin(11) * t423 + t434;
t374 = -pkin(5) * t537 - t624;
t367 = -pkin(5) * t531 + qJD(5) * t718 - t625;
t366 = pkin(11) * t531 + t609;
t363 = -qJD(6) * t369 + t651;
t362 = -qJD(6) * t628 + t629;
t1 = [(-t373 * t531 + t428 * t420 + t422 * t423 + t427 * t471 + t434 * t724 - t513 * t718 - t522 * t609 - t537 * t610) * MDP(25) + (t420 * t537 + t423 * t522 + t471 * t513 + t531 * t724) * MDP(21) + (-t420 * t470 - t421 * t471 - t423 * t451 - t424 * t724) * MDP(20) + (t420 * t471 + t423 * t724) * MDP(19) + (-t406 * t537 - t408 * t531 + t412 * t721 - t415 * t513 + t439 * t491 + t456 * t487 + t591 * t620) * MDP(16) + (-t512 * t537 - t513 * t538 + t530 * t721 - t531 * t532) * MDP(9) + (t439 * t553 + t456 * t549 + t480 * t531 + t488 * t513 + (qJD(1) * t537 - t721) * t640) * MDP(13) + (t405 * t537 + t407 * t531 - t411 * t721 + t414 * t513 + t439 * t490 + t456 * t646 + t587 * t620) * MDP(15) + (-0.2e1 * t712 * t652 + ((t592 * t679 + (qJ(2) * t697 - t580) * t588) * qJD(1) - t617) * MDP(7)) * t676 + (-(qJD(6) * t626 + t366 * t597 + t378 * t594) * t447 - t627 * t421 - t362 * t470 - t369 * t424 + t367 * t431 + t374 * t382 + t365 * t437 + t370 * t385) * MDP(32) + ((-qJD(6) * t627 - t366 * t594 + t378 * t597) * t447 + t626 * t421 + t363 * t470 - t628 * t424 + t367 * t429 + t374 * t383 + t365 * t436 + t370 * t386) * MDP(31) + (t625 * t522 + t624 * t513 - t650 * t537 + t372 * t531 + t434 * t451 + t428 * t421 + t427 * t470 + t422 * t424 + (-t373 * t537 - t522 * t718) * qJD(5)) * MDP(24) + 0.2e1 * t669 * t719 + (t513 * t553 + t531 * t549) * MDP(11) + (-t512 * t553 - t530 * t549) * MDP(10) + (t513 * t537 + t522 * t531) * MDP(23) + (-t421 * t537 - t424 * t522 - t451 * t531 - t470 * t513) * MDP(22) + (t512 * t538 + t530 * t532) * MDP(8) + (t405 * t414 + t406 * t415 + t407 * t411 + t408 * t412 + t439 * t467 + t445 * t456) * MDP(18) + (-t383 * t470 - t386 * t447 - t421 * t436 - t424 * t429) * MDP(29) + (t382 * t470 + t385 * t447 + t421 * t437 + t424 * t431) * MDP(28) + (t421 * t470 + t424 * t447) * MDP(30) + (-t382 * t436 - t383 * t437 - t385 * t429 - t386 * t431) * MDP(27) + (t382 * t437 + t385 * t431) * MDP(26) + (-t412 * t646 - t406 * t490 - t411 * t487 - t405 * t491 + (-t407 * t591 - t408 * t587) * t530 + (-t414 * t591 - t415 * t587) * t512) * MDP(17) + ((-t535 * t675 + t665) * t549 + (-t514 * t675 + t666) * t553 + t488 * t512 + t480 * t530 + (-t549 * t690 + t532 * t589 + (t538 * t589 - t553 * t690) * qJD(1)) * t661) * MDP(14); t617 * MDP(7) * t677 + (t513 * t593 + t549 * t632 + t642 * t721) * MDP(13) + (-t532 * t642 + t512 * t593 + (-t547 + t658) * t549) * MDP(14) + (t554 * t513 + t499 * t721 - t546 * t646 + (-t512 * t698 + (t596 * t646 + t698 * t721) * qJD(3)) * t589) * MDP(15) + (-t487 * t546 - t500 * t721 - t513 * t555 + (-t512 * t691 + (t487 * t596 + t691 * t721) * qJD(3)) * t589) * MDP(16) + (t500 * t646 + t499 * t487 + (-t554 * t591 - t555 * t587) * t512 + (t587 * t487 - t591 * t646) * t658) * MDP(17) + (t405 * t554 + t406 * t555 - t407 * t499 - t408 * t500 - t445 * t546 + (-t439 * t599 + (t445 * t596 + t599 * t622) * qJD(3)) * t589) * MDP(18) + (-t421 * t694 + t451 * t632 + t513 * t616 - t522 * t683) * MDP(24) + (-t420 * t694 - t508 * t513 + t522 * t684 + t632 * t724) * MDP(25) + ((-t508 * t594 - t597 * t694) * t421 - t616 * t383 + (t594 * t613 + t597 * t606) * t447 + t683 * t429) * MDP(31) + (-(t508 * t597 - t594 * t694) * t421 - t616 * t382 + (-t594 * t606 + t597 * t613) * t447 + t683 * t431) * MDP(32) + (t590 * t709 * t712 - t719) * qJD(1) ^ 2; -t721 ^ 2 * MDP(9) + (t549 * t721 + t512) * MDP(10) - t513 * MDP(11) + (-t469 * t549 - t439) * MDP(13) + (-t468 * t549 - t480 * t721 - t714) * MDP(14) + (t425 * t721 - t439 * t591 - t469 * t646 + t587 * t603) * MDP(15) + (-t426 * t721 + t439 * t587 - t469 * t487 + t591 * t603) * MDP(16) + (t425 * t487 + t426 * t515 + (-qJD(4) * t646 + t407 * t721 + t426 * t549 + t406) * t591 + (qJD(4) * t487 + t408 * t721 - t405) * t587) * MDP(17) + (-pkin(3) * t439 - t407 * t425 - t408 * t426 - t445 * t469 + t622 * qJD(4) + (-t405 * t587 + t406 * t591) * qJ(4)) * MDP(18) + (t420 * t563 - t681 * t724) * MDP(19) + (-t420 * t562 - t421 * t563 + t451 * t681 - t680 * t724) * MDP(20) + (t513 * t563 - t522 * t681) * MDP(21) + (-t513 * t562 - t522 * t680) * MDP(22) + (t583 * t421 + t680 * t422 + t427 * t562 - t435 * t451 + t513 * t615 + t522 * t716) * MDP(24) + (t583 * t420 - t681 * t422 + t427 * t563 - t435 * t724 - t544 * t513 + t522 * t717) * MDP(25) + (t382 * t699 + t431 * t607) * MDP(26) + (t648 * t431 + t647 * t429 + (-t707 - t383 * t597 + (t429 * t594 - t431 * t597) * qJD(6)) * t563) * MDP(27) + (t382 * t562 + t419 * t563 + t431 * t680 + t447 * t607) * MDP(28) + (-t383 * t562 - t429 * t680 - t447 * t608 - t563 * t688) * MDP(29) + (t421 * t562 + t447 * t680) * MDP(30) + ((t527 * t597 - t544 * t594) * t421 + t363 * t562 - t615 * t383 + t365 * t594 * t563 + (t594 * t631 - t597 * t630) * t447 + t682 * t429 - t680 * t628 + t608 * t370) * MDP(31) + (-(t527 * t594 + t544 * t597) * t421 - t362 * t562 - t615 * t382 + t365 * t699 + (t594 * t630 + t597 * t631) * t447 + t682 * t431 - t680 * t369 + t607 * t370) * MDP(32) + (-t549 * MDP(11) - t480 * MDP(13) - t407 * MDP(15) + t408 * MDP(16) - MDP(21) * t724 + t451 * MDP(22) - t522 * MDP(23) - t372 * MDP(24) + t373 * MDP(25) - MDP(8) * t721 + t532 * MDP(9)) * t532; (-t487 * t721 + t703) * MDP(15) + (t646 * t721 + t692) * MDP(16) + (-t487 ^ 2 - t646 ^ 2) * MDP(17) + (t407 * t487 + t408 * t646 + t439) * MDP(18) + (t522 * t724 + t421) * MDP(24) + (t420 - t726) * MDP(25) + (-t429 * t724 + t728) * MDP(31) + (-t431 * t724 - t597 * t727 - t688) * MDP(32); -t451 ^ 2 * MDP(20) + (t420 + t726) * MDP(21) - MDP(22) * t720 + t513 * MDP(23) + (t373 * t522 + t713) * MDP(24) + (t372 * t522 + t422 * t451 - t610) * MDP(25) + (t431 * t644 + t707) * MDP(26) + ((t382 - t706) * t597 + (-t383 - t705) * t594) * MDP(27) + (t447 * t644 + t688) * MDP(28) + t728 * MDP(29) + (-pkin(5) * t383 - t373 * t429 + t602 * t594 - t597 * t715) * MDP(31) + (-pkin(5) * t382 - t373 * t431 + t594 * t715 + t602 * t597) * MDP(32) + (t451 * MDP(19) + (-qJD(5) + t522) * MDP(22) - t422 * MDP(24) - t431 * MDP(28) + t429 * MDP(29) - t447 * MDP(30) + t628 * MDP(31) + t369 * MDP(32) + MDP(20) * t724) * t724; t431 * t429 * MDP(26) + (-t429 ^ 2 + t431 ^ 2) * MDP(27) + (t667 + t706) * MDP(28) + (-t649 + t705) * MDP(29) + t421 * MDP(30) + (t369 * t447 - t370 * t431 + t651) * MDP(31) + (t370 * t429 - t447 * t628 - t629) * MDP(32) + (-MDP(28) * t704 - MDP(29) * t431 - MDP(31) * t369 + MDP(32) * t628) * qJD(6);];
tauc  = t1;
