% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6PRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6PRRRPR5_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 22:54
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRRRPR5_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR5_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR5_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRRRPR5_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR5_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:07
	% EndTime: 2019-10-09 22:54:07
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:07
	% EndTime: 2019-10-09 22:54:07
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:07
	% EndTime: 2019-10-09 22:54:08
	% DurationCPUTime: 0.09s
	% Computational Cost: add. (46->7), mult. (159->21), div. (18->4), fcn. (175->5), ass. (0->15)
	t39 = cos(pkin(12));
	t41 = sin(qJ(2));
	t42 = cos(qJ(2));
	t45 = sin(pkin(12)) * cos(pkin(6));
	t37 = t39 * t42 - t41 * t45;
	t34 = 0.1e1 / t37 ^ 2;
	t49 = qJD(2) * t34;
	t36 = t39 * t41 + t42 * t45;
	t33 = t36 ^ 2;
	t30 = t33 * t34 + 0.1e1;
	t46 = t37 * t49;
	t47 = t36 / t37 * t49;
	t48 = (t33 * t47 + t36 * t46) / t30 ^ 2;
	t28 = 0.1e1 / t30;
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, -0.2e1 * t48 + 0.2e1 * (t28 * t46 + (t28 * t47 - t34 * t48) * t36) * t36, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:08
	% EndTime: 2019-10-09 22:54:08
	% DurationCPUTime: 0.69s
	% Computational Cost: add. (1326->63), mult. (4214->161), div. (275->12), fcn. (5416->13), ass. (0->79)
	t164 = sin(pkin(7));
	t162 = t164 ^ 2;
	t206 = 0.2e1 * t162;
	t166 = cos(pkin(12));
	t163 = sin(pkin(12));
	t170 = sin(qJ(2));
	t168 = cos(pkin(6));
	t172 = cos(qJ(2));
	t190 = t168 * t172;
	t182 = -t163 * t170 + t166 * t190;
	t165 = sin(pkin(6));
	t167 = cos(pkin(7));
	t195 = t165 * t167;
	t146 = t182 * t164 + t166 * t195;
	t196 = t164 * t172;
	t156 = -t165 * t196 + t168 * t167;
	t141 = atan2(t146, t156);
	t136 = sin(t141);
	t137 = cos(t141);
	t123 = t136 * t146 + t137 * t156;
	t120 = 0.1e1 / t123;
	t169 = sin(qJ(3));
	t171 = cos(qJ(3));
	t191 = t168 * t170;
	t180 = t163 * t191 - t166 * t172;
	t181 = t163 * t190 + t166 * t170;
	t187 = t163 * t164 * t165;
	t183 = -t167 * t181 + t187;
	t135 = t183 * t169 - t171 * t180;
	t131 = 0.1e1 / t135;
	t153 = 0.1e1 / t156;
	t121 = 0.1e1 / t123 ^ 2;
	t132 = 0.1e1 / t135 ^ 2;
	t154 = 0.1e1 / t156 ^ 2;
	t147 = t163 * t195 + t164 * t181;
	t145 = t147 ^ 2;
	t119 = t121 * t145 + 0.1e1;
	t152 = t180 * qJD(2);
	t157 = -t163 * t172 - t166 * t191;
	t150 = t157 * qJD(2);
	t194 = t165 * t170;
	t198 = t146 * t154;
	t185 = t194 * t198;
	t144 = t146 ^ 2;
	t140 = t144 * t154 + 0.1e1;
	t138 = 0.1e1 / t140;
	t199 = t138 * t164;
	t115 = (-qJD(2) * t185 + t150 * t153) * t199;
	t184 = -t136 * t156 + t137 * t146;
	t189 = qJD(2) * t165;
	t186 = t170 * t189;
	t112 = (t136 * t150 + t137 * t186) * t164 + t184 * t115;
	t204 = t112 * t120 * t121;
	t205 = (-t121 * t147 * t152 * t164 - t145 * t204) / t119 ^ 2;
	t192 = t167 * t171;
	t197 = t180 * t169;
	t134 = -t171 * t187 + t181 * t192 - t197;
	t130 = t134 ^ 2;
	t127 = t130 * t132 + 0.1e1;
	t151 = t181 * qJD(2);
	t193 = t167 * t169;
	t129 = t152 * t193 - t151 * t171 + (t183 * t171 + t197) * qJD(3);
	t201 = t129 * t131 * t132;
	t128 = t135 * qJD(3) - t151 * t169 - t152 * t192;
	t202 = t128 * t132;
	t203 = (-t130 * t201 + t134 * t202) / t127 ^ 2;
	t143 = -t171 * t181 + t180 * t193;
	t200 = t134 * t143;
	t188 = t154 * t162 * t170;
	t142 = -t169 * t181 - t180 * t192;
	t179 = -t153 * t157 + t185;
	t155 = t153 * t154;
	t149 = t182 * qJD(2);
	t125 = 0.1e1 / t127;
	t117 = 0.1e1 / t119;
	t116 = t179 * t199;
	t113 = (t136 * t157 + t137 * t194) * t164 - t184 * t116;
	t111 = t179 / t140 ^ 2 * (-t144 * t155 * t186 + t150 * t198) * t206 + (-t149 * t153 * t164 + (-t150 * t188 + (-t157 * t188 + (t155 * t165 * t170 ^ 2 * t206 - t154 * t196) * t146) * qJD(2)) * t165) * t138;
	t1 = [0, t111, 0, 0, 0, 0; 0, (-(t123 * t116 * t115 + t184 * t111) * t121 * t117 + 0.2e1 * (t117 * t204 + t121 * t205) * t113) * t147 + (0.2e1 * t180 * t120 * t205 + (-t151 * t120 + (t180 * t112 + t113 * t152 + (-(t115 * t157 - t116 * t150 + t172 * t189) * t137 - (-t149 + (qJD(2) * t116 - t115) * t194) * t136) * t147) * t121) * t117) * t164, 0, 0, 0, 0; 0, 0.2e1 * (-t131 * t142 + t132 * t200) * t203 + ((t143 * qJD(3) - t151 * t192 + t152 * t169) * t131 + 0.2e1 * t200 * t201 + (-t142 * t129 - (-t142 * qJD(3) + t151 * t193 + t152 * t171) * t134 - t143 * t128) * t132) * t125, -0.2e1 * t203 + 0.2e1 * (t125 * t202 + (-t125 * t201 - t132 * t203) * t134) * t134, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:08
	% EndTime: 2019-10-09 22:54:10
	% DurationCPUTime: 1.72s
	% Computational Cost: add. (5341->130), mult. (16984->252), div. (538->12), fcn. (21480->15), ass. (0->122)
	t287 = sin(qJ(2));
	t290 = cos(qJ(2));
	t354 = cos(pkin(12));
	t355 = cos(pkin(6));
	t320 = t355 * t354;
	t353 = sin(pkin(12));
	t306 = -t353 * t287 + t290 * t320;
	t271 = t306 * qJD(2);
	t282 = sin(pkin(7));
	t283 = sin(pkin(6));
	t323 = t354 * t283 * t282;
	t358 = -qJD(3) * t323 + t271;
	t286 = sin(qJ(3));
	t305 = -t287 * t320 - t353 * t290;
	t300 = t305 * qJD(2);
	t289 = cos(qJ(3));
	t301 = t306 * t289;
	t357 = qJD(3) * t301 + t286 * t300;
	t284 = cos(pkin(7));
	t302 = t306 * t286;
	t297 = t284 * t302 - t289 * t305;
	t338 = t284 * t289;
	t225 = t297 * qJD(3) + t358 * t286 - t300 * t338;
	t343 = t305 * t286;
	t249 = -t284 * t301 + t289 * t323 - t343;
	t247 = t249 ^ 2;
	t334 = t289 * t290;
	t337 = t286 * t287;
	t311 = t284 * t334 - t337;
	t327 = t355 * t282;
	t262 = -t311 * t283 - t289 * t327;
	t260 = 0.1e1 / t262 ^ 2;
	t241 = t247 * t260 + 0.1e1;
	t344 = t249 * t260;
	t335 = t287 * t289;
	t336 = t286 * t290;
	t309 = t284 * t336 + t335;
	t310 = t284 * t335 + t336;
	t321 = qJD(3) * t327;
	t245 = t286 * t321 + (t310 * qJD(2) + t309 * qJD(3)) * t283;
	t259 = 0.1e1 / t262;
	t345 = t245 * t259 * t260;
	t356 = -0.2e1 * (t225 * t344 - t247 * t345) / t241 ^ 2;
	t242 = atan2(-t249, t262);
	t237 = sin(t242);
	t238 = cos(t242);
	t219 = -t237 * t249 + t238 * t262;
	t216 = 0.1e1 / t219;
	t319 = t355 * t353;
	t304 = t287 * t319 - t354 * t290;
	t303 = t354 * t287 + t290 * t319;
	t328 = t283 * t353;
	t322 = t282 * t328;
	t307 = -t284 * t303 + t322;
	t253 = t307 * t286 - t289 * t304;
	t264 = t282 * t303 + t284 * t328;
	t285 = sin(qJ(4));
	t288 = cos(qJ(4));
	t236 = t253 * t288 + t264 * t285;
	t232 = 0.1e1 / t236;
	t217 = 0.1e1 / t219 ^ 2;
	t233 = 0.1e1 / t236 ^ 2;
	t239 = 0.1e1 / t241;
	t209 = (-t225 * t259 + t245 * t344) * t239;
	t318 = -t237 * t262 - t238 * t249;
	t205 = t318 * t209 - t237 * t225 + t238 * t245;
	t352 = t205 * t216 * t217;
	t272 = t303 * qJD(2);
	t273 = t304 * qJD(2);
	t339 = t284 * t286;
	t342 = t304 * t286;
	t228 = t273 * t339 - t272 * t289 + (t307 * t289 + t342) * qJD(3);
	t340 = t282 * t288;
	t220 = t236 * qJD(4) + t228 * t285 + t273 * t340;
	t235 = t253 * t285 - t264 * t288;
	t231 = t235 ^ 2;
	t224 = t231 * t233 + 0.1e1;
	t348 = t233 * t235;
	t333 = qJD(4) * t235;
	t341 = t282 * t285;
	t221 = t228 * t288 - t273 * t341 - t333;
	t349 = t221 * t232 * t233;
	t351 = (t220 * t348 - t231 * t349) / t224 ^ 2;
	t252 = -t289 * t322 + t303 * t338 - t342;
	t350 = t217 * t252;
	t347 = t237 * t252;
	t346 = t238 * t252;
	t248 = t252 ^ 2;
	t215 = t248 * t217 + 0.1e1;
	t227 = t253 * qJD(3) - t272 * t286 - t273 * t338;
	t332 = 0.2e1 * (t227 * t350 - t248 * t352) / t215 ^ 2;
	t331 = -0.2e1 * t351;
	t330 = t235 * t349;
	t329 = qJD(3) * t343;
	t325 = -0.2e1 * t249 * t345;
	t324 = 0.2e1 * t252 * t352;
	t315 = -t285 * t232 + t288 * t348;
	t251 = -t286 * t323 + t297;
	t263 = t309 * t283 + t286 * t327;
	t314 = -t251 * t259 + t263 * t344;
	t255 = -t305 * t338 + t302;
	t270 = t310 * t283;
	t313 = -t255 * t259 + t270 * t344;
	t257 = -t289 * t303 + t304 * t339;
	t312 = -t257 * t285 - t304 * t340;
	t244 = t257 * t288 - t304 * t341;
	t256 = -t286 * t303 - t304 * t338;
	t308 = -t284 * t337 + t334;
	t254 = (t311 * qJD(2) + t308 * qJD(3)) * t283;
	t246 = t289 * t321 + (t308 * qJD(2) + t311 * qJD(3)) * t283;
	t230 = -t256 * qJD(3) + t272 * t339 + t273 * t289;
	t229 = t271 * t338 + t284 * t329 + t357;
	t226 = t357 * t284 + t358 * t289 + t329;
	t222 = 0.1e1 / t224;
	t213 = 0.1e1 / t215;
	t211 = t313 * t239;
	t210 = t314 * t239;
	t207 = t318 * t211 - t237 * t255 + t238 * t270;
	t206 = t318 * t210 - t237 * t251 + t238 * t263;
	t204 = t313 * t356 + (t270 * t325 - t229 * t259 + (t225 * t270 + t245 * t255 + t249 * t254) * t260) * t239;
	t203 = t314 * t356 + (t263 * t325 - t226 * t259 + (t225 * t263 + t245 * t251 + t246 * t249) * t260) * t239;
	t1 = [0, t204, t203, 0, 0, 0; 0, (t207 * t350 - t216 * t256) * t332 + ((t257 * qJD(3) - t272 * t338 + t273 * t286) * t216 + t207 * t324 + (-t256 * t205 - t207 * t227 - (-t204 * t249 - t211 * t225 + t254 + (-t211 * t262 - t255) * t209) * t346 - (-t204 * t262 - t211 * t245 - t229 + (t211 * t249 - t270) * t209) * t347) * t217) * t213, (t206 * t350 - t216 * t253) * t332 + (t206 * t324 + t228 * t216 + (-t253 * t205 - t206 * t227 - (-t203 * t249 - t210 * t225 + t246 + (-t210 * t262 - t251) * t209) * t346 - (-t203 * t262 - t210 * t245 - t226 + (t210 * t249 - t263) * t209) * t347) * t217) * t213, 0, 0, 0; 0, 0.2e1 * (t232 * t312 + t244 * t348) * t351 + ((t244 * qJD(4) + t230 * t285 + t272 * t340) * t232 + 0.2e1 * t244 * t330 + (t312 * t221 - (t312 * qJD(4) + t230 * t288 - t272 * t341) * t235 - t244 * t220) * t233) * t222, t315 * t252 * t331 + (t315 * t227 + ((-qJD(4) * t232 - 0.2e1 * t330) * t288 + (t220 * t288 + (t221 - t333) * t285) * t233) * t252) * t222, t331 + 0.2e1 * (t220 * t233 * t222 + (-t222 * t349 - t233 * t351) * t235) * t235, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:08
	% EndTime: 2019-10-09 22:54:10
	% DurationCPUTime: 1.71s
	% Computational Cost: add. (5650->131), mult. (16984->252), div. (538->12), fcn. (21480->15), ass. (0->123)
	t300 = sin(qJ(2));
	t302 = cos(qJ(2));
	t366 = cos(pkin(12));
	t367 = cos(pkin(6));
	t332 = t367 * t366;
	t365 = sin(pkin(12));
	t318 = -t365 * t300 + t302 * t332;
	t282 = t318 * qJD(2);
	t296 = sin(pkin(7));
	t297 = sin(pkin(6));
	t335 = t366 * t297 * t296;
	t370 = -qJD(3) * t335 + t282;
	t299 = sin(qJ(3));
	t317 = -t300 * t332 - t365 * t302;
	t312 = t317 * qJD(2);
	t301 = cos(qJ(3));
	t313 = t318 * t301;
	t369 = qJD(3) * t313 + t299 * t312;
	t298 = cos(pkin(7));
	t314 = t318 * t299;
	t309 = t298 * t314 - t301 * t317;
	t350 = t298 * t301;
	t236 = t309 * qJD(3) + t370 * t299 - t312 * t350;
	t355 = t317 * t299;
	t260 = -t298 * t313 + t301 * t335 - t355;
	t258 = t260 ^ 2;
	t346 = t301 * t302;
	t349 = t299 * t300;
	t323 = t298 * t346 - t349;
	t339 = t367 * t296;
	t273 = -t323 * t297 - t301 * t339;
	t271 = 0.1e1 / t273 ^ 2;
	t252 = t258 * t271 + 0.1e1;
	t356 = t260 * t271;
	t347 = t300 * t301;
	t348 = t299 * t302;
	t321 = t298 * t348 + t347;
	t322 = t298 * t347 + t348;
	t333 = qJD(3) * t339;
	t256 = t299 * t333 + (t322 * qJD(2) + t321 * qJD(3)) * t297;
	t270 = 0.1e1 / t273;
	t357 = t256 * t270 * t271;
	t368 = -0.2e1 * (t236 * t356 - t258 * t357) / t252 ^ 2;
	t253 = atan2(-t260, t273);
	t248 = sin(t253);
	t249 = cos(t253);
	t230 = -t248 * t260 + t249 * t273;
	t227 = 0.1e1 / t230;
	t331 = t367 * t365;
	t316 = t300 * t331 - t366 * t302;
	t315 = t366 * t300 + t302 * t331;
	t340 = t297 * t365;
	t334 = t296 * t340;
	t319 = -t298 * t315 + t334;
	t264 = t319 * t299 - t301 * t316;
	t275 = t296 * t315 + t298 * t340;
	t295 = qJ(4) + pkin(13);
	t293 = sin(t295);
	t294 = cos(t295);
	t245 = t264 * t294 + t275 * t293;
	t241 = 0.1e1 / t245;
	t228 = 0.1e1 / t230 ^ 2;
	t242 = 0.1e1 / t245 ^ 2;
	t250 = 0.1e1 / t252;
	t220 = (-t236 * t270 + t256 * t356) * t250;
	t330 = -t248 * t273 - t249 * t260;
	t216 = t220 * t330 - t248 * t236 + t249 * t256;
	t364 = t216 * t227 * t228;
	t283 = t315 * qJD(2);
	t284 = t316 * qJD(2);
	t351 = t298 * t299;
	t354 = t316 * t299;
	t239 = t284 * t351 - t283 * t301 + (t319 * t301 + t354) * qJD(3);
	t352 = t294 * t296;
	t231 = qJD(4) * t245 + t239 * t293 + t284 * t352;
	t244 = t264 * t293 - t275 * t294;
	t240 = t244 ^ 2;
	t235 = t240 * t242 + 0.1e1;
	t360 = t242 * t244;
	t345 = qJD(4) * t244;
	t353 = t293 * t296;
	t232 = t239 * t294 - t284 * t353 - t345;
	t361 = t232 * t241 * t242;
	t363 = (t231 * t360 - t240 * t361) / t235 ^ 2;
	t263 = -t301 * t334 + t315 * t350 - t354;
	t362 = t228 * t263;
	t359 = t248 * t263;
	t358 = t249 * t263;
	t259 = t263 ^ 2;
	t226 = t259 * t228 + 0.1e1;
	t238 = t264 * qJD(3) - t283 * t299 - t284 * t350;
	t344 = 0.2e1 * (t238 * t362 - t259 * t364) / t226 ^ 2;
	t343 = -0.2e1 * t363;
	t342 = t244 * t361;
	t341 = qJD(3) * t355;
	t337 = -0.2e1 * t260 * t357;
	t336 = 0.2e1 * t263 * t364;
	t327 = -t293 * t241 + t294 * t360;
	t262 = -t299 * t335 + t309;
	t274 = t321 * t297 + t299 * t339;
	t326 = -t262 * t270 + t274 * t356;
	t266 = -t317 * t350 + t314;
	t281 = t322 * t297;
	t325 = -t266 * t270 + t281 * t356;
	t268 = -t301 * t315 + t316 * t351;
	t324 = -t268 * t293 - t316 * t352;
	t255 = t268 * t294 - t316 * t353;
	t267 = -t299 * t315 - t316 * t350;
	t320 = -t298 * t349 + t346;
	t265 = (t323 * qJD(2) + t320 * qJD(3)) * t297;
	t257 = t301 * t333 + (t320 * qJD(2) + t323 * qJD(3)) * t297;
	t247 = -t267 * qJD(3) + t283 * t351 + t284 * t301;
	t246 = t282 * t350 + t298 * t341 + t369;
	t237 = t369 * t298 + t370 * t301 + t341;
	t233 = 0.1e1 / t235;
	t224 = 0.1e1 / t226;
	t222 = t325 * t250;
	t221 = t326 * t250;
	t218 = t222 * t330 - t248 * t266 + t249 * t281;
	t217 = t221 * t330 - t248 * t262 + t249 * t274;
	t215 = t325 * t368 + (t281 * t337 - t246 * t270 + (t236 * t281 + t256 * t266 + t260 * t265) * t271) * t250;
	t214 = t326 * t368 + (t274 * t337 - t237 * t270 + (t236 * t274 + t256 * t262 + t257 * t260) * t271) * t250;
	t1 = [0, t215, t214, 0, 0, 0; 0, (t218 * t362 - t227 * t267) * t344 + ((qJD(3) * t268 - t283 * t350 + t284 * t299) * t227 + t218 * t336 + (-t267 * t216 - t218 * t238 - (-t215 * t260 - t222 * t236 + t265 + (-t222 * t273 - t266) * t220) * t358 - (-t215 * t273 - t222 * t256 - t246 + (t222 * t260 - t281) * t220) * t359) * t228) * t224, (t217 * t362 - t227 * t264) * t344 + (t217 * t336 + t239 * t227 + (-t264 * t216 - t217 * t238 - (-t214 * t260 - t221 * t236 + t257 + (-t221 * t273 - t262) * t220) * t358 - (-t214 * t273 - t221 * t256 - t237 + (t221 * t260 - t274) * t220) * t359) * t228) * t224, 0, 0, 0; 0, 0.2e1 * (t241 * t324 + t255 * t360) * t363 + ((qJD(4) * t255 + t247 * t293 + t283 * t352) * t241 + 0.2e1 * t255 * t342 + (t324 * t232 - (qJD(4) * t324 + t247 * t294 - t283 * t353) * t244 - t255 * t231) * t242) * t233, t327 * t263 * t343 + (t327 * t238 + ((-qJD(4) * t241 - 0.2e1 * t342) * t294 + (t231 * t294 + (t232 - t345) * t293) * t242) * t263) * t233, t343 + 0.2e1 * (t231 * t242 * t233 + (-t233 * t361 - t242 * t363) * t244) * t244, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:54:09
	% EndTime: 2019-10-09 22:54:13
	% DurationCPUTime: 4.35s
	% Computational Cost: add. (19059->203), mult. (44088->383), div. (816->12), fcn. (56595->17), ass. (0->162)
	t405 = sin(qJ(3));
	t408 = cos(qJ(3));
	t401 = sin(pkin(7));
	t403 = cos(pkin(7));
	t406 = sin(qJ(2));
	t409 = cos(qJ(2));
	t485 = cos(pkin(12));
	t486 = cos(pkin(6));
	t438 = t486 * t485;
	t484 = sin(pkin(12));
	t424 = t484 * t406 - t409 * t438;
	t402 = sin(pkin(6));
	t449 = t402 * t485;
	t416 = -t401 * t449 - t424 * t403;
	t423 = -t406 * t438 - t484 * t409;
	t373 = t405 * t423 + t416 * t408;
	t388 = t424 * qJD(2);
	t389 = t423 * qJD(2);
	t466 = t403 * t405;
	t350 = t373 * qJD(3) - t388 * t408 + t389 * t466;
	t374 = t416 * t405 - t408 * t423;
	t400 = qJ(4) + pkin(13);
	t398 = sin(t400);
	t399 = cos(t400);
	t417 = t424 * t401 - t403 * t449;
	t357 = t374 * t399 + t417 * t398;
	t468 = t401 * t399;
	t324 = t357 * qJD(4) + t350 * t398 + t389 * t468;
	t355 = t374 * t398 - t417 * t399;
	t353 = t355 ^ 2;
	t461 = t406 * t408;
	t462 = t405 * t409;
	t427 = t403 * t462 + t461;
	t447 = t486 * t401;
	t384 = t427 * t402 + t405 * t447;
	t467 = t401 * t409;
	t392 = -t402 * t467 + t486 * t403;
	t368 = t384 * t398 - t392 * t399;
	t366 = 0.1e1 / t368 ^ 2;
	t340 = t353 * t366 + 0.1e1;
	t338 = 0.1e1 / t340;
	t369 = t384 * t399 + t392 * t398;
	t459 = t408 * t409;
	t463 = t405 * t406;
	t426 = -t403 * t463 + t459;
	t429 = t403 * t459 - t463;
	t440 = qJD(3) * t447;
	t371 = t408 * t440 + (t426 * qJD(2) + t429 * qJD(3)) * t402;
	t450 = t401 * t402 * t406;
	t442 = qJD(2) * t450;
	t342 = t369 * qJD(4) + t371 * t398 - t399 * t442;
	t365 = 0.1e1 / t368;
	t475 = t355 * t366;
	t307 = (-t324 * t365 + t342 * t475) * t338;
	t341 = atan2(-t355, t368);
	t334 = sin(t341);
	t335 = cos(t341);
	t436 = -t334 * t368 - t335 * t355;
	t302 = t436 * t307 - t334 * t324 + t335 * t342;
	t320 = -t334 * t355 + t335 * t368;
	t317 = 0.1e1 / t320;
	t318 = 0.1e1 / t320 ^ 2;
	t489 = t302 * t317 * t318;
	t437 = t486 * t484;
	t421 = t485 * t406 + t409 * t437;
	t448 = t402 * t484;
	t441 = t401 * t448;
	t418 = -t421 * t403 + t441;
	t422 = t406 * t437 - t485 * t409;
	t376 = t418 * t405 - t408 * t422;
	t419 = t421 * t401 + t403 * t448;
	t358 = t376 * t398 - t419 * t399;
	t445 = 0.2e1 * t358 * t489;
	t383 = t429 * t402 + t408 * t447;
	t431 = -t365 * t373 + t383 * t475;
	t488 = t398 * t431;
	t476 = t342 * t365 * t366;
	t487 = -0.2e1 * (t324 * t475 - t353 * t476) / t340 ^ 2;
	t359 = t376 * t399 + t419 * t398;
	t407 = cos(qJ(6));
	t420 = t421 * t408;
	t470 = t422 * t405;
	t375 = t403 * t420 - t408 * t441 - t470;
	t404 = sin(qJ(6));
	t473 = t375 * t404;
	t337 = t359 * t407 + t473;
	t331 = 0.1e1 / t337;
	t332 = 0.1e1 / t337 ^ 2;
	t390 = t421 * qJD(2);
	t391 = t422 * qJD(2);
	t352 = t391 * t466 - t390 * t408 + (t418 * t408 + t470) * qJD(3);
	t469 = t398 * t401;
	t327 = -t358 * qJD(4) + t352 * t399 - t391 * t469;
	t465 = t403 * t408;
	t351 = t376 * qJD(3) - t390 * t405 - t391 * t465;
	t315 = t337 * qJD(6) + t327 * t404 - t351 * t407;
	t472 = t375 * t407;
	t336 = t359 * t404 - t472;
	t330 = t336 ^ 2;
	t323 = t330 * t332 + 0.1e1;
	t479 = t332 * t336;
	t456 = qJD(6) * t336;
	t316 = t327 * t407 + t351 * t404 - t456;
	t482 = t316 * t331 * t332;
	t483 = (t315 * t479 - t330 * t482) / t323 ^ 2;
	t481 = t318 * t358;
	t326 = t359 * qJD(4) + t352 * t398 + t391 * t468;
	t480 = t326 * t318;
	t478 = t334 * t358;
	t477 = t335 * t358;
	t474 = t375 * t398;
	t464 = t404 * t331;
	t460 = t407 * t336;
	t458 = qJD(4) * t399;
	t457 = qJD(4) * t401;
	t354 = t358 ^ 2;
	t314 = t354 * t318 + 0.1e1;
	t455 = 0.2e1 * (-t354 * t489 + t358 * t480) / t314 ^ 2;
	t454 = -0.2e1 * t483;
	t453 = 0.2e1 * t483;
	t451 = t336 * t482;
	t444 = 0.2e1 * t451;
	t443 = -0.2e1 * t355 * t476;
	t439 = qJD(6) * t375 * t399 + t352;
	t379 = t422 * t466 - t420;
	t364 = t379 * t399 - t422 * t469;
	t378 = -t421 * t405 - t422 * t465;
	t345 = t364 * t407 + t378 * t404;
	t344 = t364 * t404 - t378 * t407;
	t434 = t332 * t460 - t464;
	t433 = -t357 * t365 + t369 * t475;
	t377 = -t424 * t408 + t423 * t466;
	t362 = t377 * t398 + t423 * t468;
	t387 = t426 * t402;
	t380 = t387 * t398 - t399 * t450;
	t432 = -t362 * t365 + t380 * t475;
	t430 = -t379 * t398 - t422 * t468;
	t428 = -t403 * t461 - t462;
	t425 = qJD(4) * t474 + qJD(6) * t376 - t351 * t399;
	t370 = -t405 * t440 + (t428 * qJD(2) - t427 * qJD(3)) * t402;
	t361 = -t378 * qJD(3) + t390 * t466 + t391 * t408;
	t360 = t379 * qJD(3) - t390 * t465 + t391 * t405;
	t349 = -t374 * qJD(3) + t388 * t405 + t389 * t465;
	t348 = t387 * t458 + ((t428 * qJD(3) + t406 * t457) * t398 + (-t427 * t398 - t399 * t467) * qJD(2)) * t402;
	t347 = t376 * t404 - t399 * t472;
	t346 = -t376 * t407 - t399 * t473;
	t343 = -t368 * qJD(4) + t371 * t399 + t398 * t442;
	t329 = t430 * qJD(4) + t361 * t399 - t390 * t469;
	t328 = t377 * t458 + t388 * t468 + (t388 * t466 + t389 * t408 + (t424 * t405 + t423 * t465) * qJD(3) - t423 * t457) * t398;
	t325 = -t355 * qJD(4) + t350 * t399 - t389 * t469;
	t321 = 0.1e1 / t323;
	t312 = 0.1e1 / t314;
	t311 = t338 * t488;
	t310 = t432 * t338;
	t309 = t433 * t338;
	t305 = (-t334 * t373 + t335 * t383) * t398 + t436 * t311;
	t304 = t436 * t310 - t334 * t362 + t335 * t380;
	t303 = t436 * t309 - t334 * t357 + t335 * t369;
	t301 = t432 * t487 + (t380 * t443 - t328 * t365 + (t324 * t380 + t342 * t362 + t348 * t355) * t366) * t338;
	t299 = t433 * t487 + (t369 * t443 - t325 * t365 + (t324 * t369 + t342 * t357 + t343 * t355) * t366) * t338;
	t298 = t487 * t488 + (t431 * t458 + (t383 * t443 - t349 * t365 + (t324 * t383 + t342 * t373 + t355 * t370) * t366) * t398) * t338;
	t1 = [0, t301, t298, t299, 0, 0; 0, (t304 * t481 + t317 * t430) * t455 + ((t364 * qJD(4) + t361 * t398 + t390 * t468) * t317 + t304 * t445 + (t430 * t302 - t304 * t326 - (-t301 * t355 - t310 * t324 + t348 + (-t310 * t368 - t362) * t307) * t477 - (-t301 * t368 - t310 * t342 - t328 + (t310 * t355 - t380) * t307) * t478) * t318) * t312, (t305 * t481 + t317 * t474) * t455 + ((-t351 * t398 - t375 * t458) * t317 + (-t480 + t445) * t305 + (t474 * t302 - (t383 * t458 - t298 * t355 - t311 * t324 + t370 * t398 + (-t311 * t368 - t373 * t398) * t307) * t477 - (-t373 * t458 - t298 * t368 - t311 * t342 - t349 * t398 + (t311 * t355 - t383 * t398) * t307) * t478) * t318) * t312, (t303 * t481 - t317 * t359) * t455 + (t303 * t445 + t327 * t317 + (-t359 * t302 - t303 * t326 - (-t299 * t355 - t309 * t324 + t343 + (-t309 * t368 - t357) * t307) * t477 - (-t299 * t368 - t309 * t342 - t325 + (t309 * t355 - t369) * t307) * t478) * t318) * t312, 0, 0; 0, (-t331 * t344 + t345 * t479) * t453 + ((t345 * qJD(6) + t329 * t404 - t360 * t407) * t331 + t345 * t444 + (-t344 * t316 - (-t344 * qJD(6) + t329 * t407 + t360 * t404) * t336 - t345 * t315) * t332) * t321, (-t331 * t346 + t347 * t479) * t453 + (t347 * t444 - t439 * t331 * t407 + t425 * t464 + (-t439 * t336 * t404 - t347 * t315 - t346 * t316 - t425 * t460) * t332) * t321, t434 * t358 * t454 + (t434 * t326 + ((-qJD(6) * t331 - 0.2e1 * t451) * t407 + (t315 * t407 + (t316 - t456) * t404) * t332) * t358) * t321, 0, t454 + 0.2e1 * (t315 * t332 * t321 + (-t321 * t482 - t332 * t483) * t336) * t336;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end