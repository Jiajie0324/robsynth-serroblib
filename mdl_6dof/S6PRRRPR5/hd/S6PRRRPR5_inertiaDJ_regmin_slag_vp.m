% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6PRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x27]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRPR5_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR5_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR5_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR5_inertiaDJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:28:19
% EndTime: 2019-03-08 23:28:25
% DurationCPUTime: 2.16s
% Computational Cost: add. (3694->303), mult. (10750->581), div. (0->0), fcn. (10907->14), ass. (0->161)
t111 = sin(pkin(7));
t193 = 0.2e1 * t111;
t192 = 2 * qJD(6);
t117 = sin(qJ(3));
t191 = pkin(2) * t117;
t190 = pkin(10) * t111;
t189 = -qJ(5) - pkin(10);
t110 = sin(pkin(13));
t186 = cos(pkin(13));
t173 = qJD(3) * t117;
t156 = t111 * t173;
t116 = sin(qJ(4));
t120 = cos(qJ(4));
t113 = cos(pkin(7));
t121 = cos(qJ(3));
t181 = t111 * t121;
t165 = pkin(9) * t181;
t80 = t165 + (pkin(10) + t191) * t113;
t81 = (-pkin(3) * t121 - pkin(10) * t117 - pkin(2)) * t111;
t188 = t116 * t81 + t120 * t80;
t83 = (pkin(3) * t117 - pkin(10) * t121) * t111 * qJD(3);
t172 = qJD(3) * t121;
t84 = -t113 * pkin(2) * t172 + pkin(9) * t156;
t37 = -t188 * qJD(4) + t116 * t84 + t120 * t83;
t155 = t111 * t172;
t182 = t111 * t117;
t90 = -t120 * t113 + t116 * t182;
t67 = -t90 * qJD(4) + t120 * t155;
t91 = t116 * t113 + t120 * t182;
t22 = pkin(4) * t156 - t67 * qJ(5) - t91 * qJD(5) + t37;
t170 = qJD(4) * t120;
t171 = qJD(4) * t116;
t36 = -t116 * t83 + t120 * t84 - t81 * t170 + t80 * t171;
t68 = t91 * qJD(4) + t116 * t155;
t26 = -t68 * qJ(5) - t90 * qJD(5) - t36;
t8 = t110 * t22 + t186 * t26;
t152 = -t116 * t80 + t120 * t81;
t39 = -pkin(4) * t181 - t91 * qJ(5) + t152;
t45 = -t90 * qJ(5) + t188;
t25 = t110 * t39 + t186 * t45;
t115 = sin(qJ(6));
t119 = cos(qJ(6));
t44 = -t110 * t68 + t186 * t67;
t60 = -t110 * t90 + t186 * t91;
t51 = t115 * t60 + t119 * t181;
t28 = -t51 * qJD(6) + t115 * t156 + t119 * t44;
t187 = t28 * t115;
t103 = t110 * pkin(4) + pkin(11);
t185 = t103 * t115;
t184 = t103 * t119;
t183 = t110 * t116;
t180 = t115 * t119;
t118 = sin(qJ(2));
t179 = t117 * t118;
t122 = cos(qJ(2));
t178 = t117 * t122;
t177 = t118 * t121;
t176 = t121 * t122;
t109 = t119 ^ 2;
t175 = t115 ^ 2 - t109;
t112 = sin(pkin(6));
t174 = qJD(2) * t112;
t169 = qJD(4) * t121;
t168 = qJD(6) * t115;
t167 = qJD(6) * t119;
t166 = -0.2e1 * pkin(3) * qJD(4);
t104 = -t186 * pkin(4) - pkin(5);
t164 = t104 * t192;
t106 = pkin(4) * t171;
t150 = t186 * t116;
t94 = t110 * t120 + t150;
t163 = t94 * t168;
t162 = t94 * t167;
t161 = t115 * t181;
t114 = cos(pkin(6));
t131 = t113 * t178 + t177;
t126 = t131 * t112 + t114 * t182;
t87 = -t112 * t122 * t111 + t114 * t113;
t124 = -t126 * t116 + t87 * t120;
t50 = t87 * t116 + t126 * t120;
t33 = t110 * t50 - t186 * t124;
t160 = t33 * t168;
t159 = t33 * t167;
t132 = t113 * t176 - t179;
t66 = -t132 * t112 - t114 * t181;
t158 = t66 * t171;
t105 = -t120 * pkin(4) - pkin(3);
t107 = t111 ^ 2;
t157 = t107 * t172;
t154 = t118 * t174;
t153 = t115 * t167;
t151 = qJD(4) * t189;
t149 = t186 * t120;
t148 = -0.4e1 * t94 * t180;
t147 = t175 * qJD(6);
t146 = t107 * t154;
t145 = t117 * t157;
t144 = t111 * t154;
t24 = -t110 * t45 + t186 * t39;
t20 = pkin(5) * t181 - t24;
t7 = -t110 * t26 + t186 * t22;
t6 = -pkin(5) * t156 - t7;
t89 = qJD(4) * t149 - t110 * t171;
t143 = t20 * t89 + t6 * t94;
t48 = t114 * t155 + (t132 * qJD(3) + (-t113 * t179 + t176) * qJD(2)) * t112;
t123 = -t50 * qJD(4) - t48 * t116 + t120 * t144;
t30 = t124 * qJD(4) + t116 * t144 + t48 * t120;
t12 = t110 * t30 - t186 * t123;
t142 = t12 * t94 + t33 * t89;
t43 = t110 * t67 + t186 * t68;
t59 = t110 * t91 + t186 * t90;
t141 = t43 * t94 + t59 * t89;
t127 = -t116 * qJD(5) + t120 * t151;
t86 = t120 * qJD(5) + t116 * t151;
t56 = t110 * t86 - t186 * t127;
t98 = t189 * t120;
t69 = -t110 * t98 - t189 * t150;
t140 = t56 * t94 + t69 * t89;
t88 = t94 * qJD(4);
t93 = -t149 + t183;
t139 = t88 * t94 + t89 * t93;
t138 = -t103 * t88 + t104 * t89;
t137 = t103 * t93 - t104 * t94;
t21 = -pkin(11) * t181 + t25;
t79 = pkin(9) * t182 + (-pkin(2) * t121 - pkin(3)) * t113;
t62 = t90 * pkin(4) + t79;
t32 = t59 * pkin(5) - t60 * pkin(11) + t62;
t10 = t115 * t32 + t119 * t21;
t34 = t110 * t124 + t186 * t50;
t18 = t66 * t115 + t119 * t34;
t52 = t119 * t60 - t161;
t136 = -t115 * t52 - t119 * t51;
t63 = t93 * pkin(5) - t94 * pkin(11) + t105;
t70 = t189 * t183 - t186 * t98;
t41 = t115 * t63 + t119 * t70;
t135 = t88 * pkin(5) - t89 * pkin(11) + t106;
t134 = t115 * t43 + t59 * t167;
t133 = t115 * t88 + t93 * t167;
t130 = pkin(11) * t156 + t8;
t129 = t116 * t169 + t120 * t173;
t128 = t116 * t173 - t120 * t169;
t85 = (t113 * t191 + t165) * qJD(3);
t53 = t68 * pkin(4) + t85;
t125 = t43 * pkin(5) - t44 * pkin(11) + t53;
t92 = t94 ^ 2;
t61 = t119 * t88 - t93 * t168;
t57 = t110 * t127 + t186 * t86;
t47 = t114 * t156 + (t131 * qJD(3) + (t113 * t177 + t178) * qJD(2)) * t112;
t40 = -t115 * t70 + t119 * t63;
t35 = t119 * t43 - t59 * t168;
t29 = -qJD(6) * t161 + t115 * t44 - t119 * t156 + t60 * t167;
t17 = -t115 * t34 + t66 * t119;
t16 = -t41 * qJD(6) - t115 * t57 + t119 * t135;
t15 = -t115 * t135 - t119 * t57 - t63 * t167 + t70 * t168;
t13 = t110 * t123 + t186 * t30;
t9 = -t115 * t21 + t119 * t32;
t4 = -t18 * qJD(6) - t115 * t13 + t47 * t119;
t3 = -t47 * t115 - t119 * t13 - t66 * t167 + t34 * t168;
t2 = -t10 * qJD(6) - t115 * t130 + t119 * t125;
t1 = -t115 * t125 - t119 * t130 - t32 * t167 + t21 * t168;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t33 * t12 + 0.2e1 * t34 * t13 + 0.2e1 * t66 * t47, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t154, -t122 * t174, 0, 0, 0, 0, 0, -t47 * t113 - t121 * t146 + t87 * t156, -t48 * t113 + t117 * t146 + t87 * t155, 0, 0, 0, 0, 0, -t123 * t181 + t124 * t156 + t47 * t90 + t66 * t68, t47 * t91 + t66 * t67 + (t121 * t30 - t173 * t50) * t111, t12 * t60 - t13 * t59 + t33 * t44 - t34 * t43, -t12 * t24 + t13 * t25 - t33 * t7 + t34 * t8 + t47 * t62 + t66 * t53, 0, 0, 0, 0, 0, t12 * t51 + t17 * t43 + t33 * t29 + t4 * t59, t12 * t52 - t18 * t43 + t33 * t28 + t3 * t59; 0, 0, 0, 0, 0.2e1 * t145, 0.2e1 * (-t117 ^ 2 + t121 ^ 2) * t107 * qJD(3), 0.2e1 * t113 * t155, -0.2e1 * t113 * t156, 0, -0.2e1 * t107 * pkin(2) * t173 - 0.2e1 * t85 * t113, -0.2e1 * pkin(2) * t157 + 0.2e1 * t84 * t113, 0.2e1 * t91 * t67, -0.2e1 * t67 * t90 - 0.2e1 * t91 * t68 (-t121 * t67 + t91 * t173) * t193 (t121 * t68 - t90 * t173) * t193, -0.2e1 * t145, 0.2e1 * t79 * t68 + 0.2e1 * t85 * t90 + 0.2e1 * (-t37 * t121 + t152 * t173) * t111, 0.2e1 * t79 * t67 + 0.2e1 * t85 * t91 + 0.2e1 * (-t36 * t121 - t173 * t188) * t111, -0.2e1 * t24 * t44 - 0.2e1 * t25 * t43 - 0.2e1 * t8 * t59 - 0.2e1 * t7 * t60, 0.2e1 * t24 * t7 + 0.2e1 * t25 * t8 + 0.2e1 * t62 * t53, 0.2e1 * t52 * t28, -0.2e1 * t28 * t51 - 0.2e1 * t52 * t29, 0.2e1 * t28 * t59 + 0.2e1 * t52 * t43, -0.2e1 * t29 * t59 - 0.2e1 * t51 * t43, 0.2e1 * t59 * t43, 0.2e1 * t2 * t59 + 0.2e1 * t20 * t29 + 0.2e1 * t9 * t43 + 0.2e1 * t6 * t51, 0.2e1 * t1 * t59 - 0.2e1 * t10 * t43 + 0.2e1 * t20 * t28 + 0.2e1 * t6 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t48, 0, 0, 0, 0, 0, -t47 * t120 + t158, t47 * t116 + t170 * t66, -t13 * t93 - t34 * t88 + t142, pkin(4) * t158 + t47 * t105 + t12 * t69 + t13 * t70 + t33 * t56 + t34 * t57, 0, 0, 0, 0, 0, t115 * t142 + t159 * t94 + t17 * t88 + t4 * t93, t119 * t142 - t160 * t94 - t18 * t88 + t3 * t93; 0, 0, 0, 0, 0, 0, t155, -t156, 0, -t85, t84, t67 * t116 + t91 * t170, -t116 * t68 + t67 * t120 + (-t116 * t91 - t120 * t90) * qJD(4), t128 * t111, t129 * t111, 0, -pkin(3) * t68 - t85 * t120 - t128 * t190 + t79 * t171, -pkin(3) * t67 + t85 * t116 - t129 * t190 + t170 * t79, -t24 * t89 - t25 * t88 - t70 * t43 + t69 * t44 + t56 * t60 - t57 * t59 - t7 * t94 - t8 * t93, t53 * t105 + t106 * t62 - t24 * t56 + t25 * t57 - t7 * t69 + t8 * t70, -t52 * t163 + (t28 * t94 + t52 * t89) * t119, t136 * t89 + (-t187 - t119 * t29 + (t115 * t51 - t119 * t52) * qJD(6)) * t94, t119 * t141 - t163 * t59 + t28 * t93 + t52 * t88, -t115 * t141 - t162 * t59 - t29 * t93 - t51 * t88, t43 * t93 + t59 * t88, t115 * t143 + t16 * t59 + t162 * t20 + t2 * t93 + t69 * t29 + t40 * t43 + t56 * t51 + t9 * t88, t1 * t93 - t10 * t88 + t119 * t143 + t15 * t59 - t163 * t20 + t69 * t28 - t41 * t43 + t56 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t116 * t170, 0.2e1 * (-t116 ^ 2 + t120 ^ 2) * qJD(4), 0, 0, 0, t116 * t166, t120 * t166, -0.2e1 * t57 * t93 - 0.2e1 * t70 * t88 + 0.2e1 * t140, 0.2e1 * t105 * t106 + 0.2e1 * t69 * t56 + 0.2e1 * t70 * t57, 0.2e1 * t109 * t94 * t89 - 0.2e1 * t153 * t92, t175 * t92 * t192 + t148 * t89, 0.2e1 * t119 * t139 - 0.2e1 * t163 * t93, -0.2e1 * t115 * t139 - 0.2e1 * t162 * t93, 0.2e1 * t93 * t88, 0.2e1 * t115 * t140 + 0.2e1 * t16 * t93 + 0.2e1 * t162 * t69 + 0.2e1 * t40 * t88, 0.2e1 * t119 * t140 + 0.2e1 * t15 * t93 - 0.2e1 * t163 * t69 - 0.2e1 * t41 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, -t30, 0 (t110 * t13 - t12 * t186) * pkin(4), 0, 0, 0, 0, 0, -t12 * t119 + t160, t12 * t115 + t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t68, t156, t37, t36 (-t110 * t43 - t186 * t44) * pkin(4) (t110 * t8 + t186 * t7) * pkin(4), t167 * t52 + t187, qJD(6) * t136 - t115 * t29 + t28 * t119, t134, t35, 0, -t43 * t185 + t104 * t29 - t6 * t119 + (t115 * t20 - t184 * t59) * qJD(6), -t43 * t184 + t104 * t28 + t6 * t115 + (t119 * t20 + t185 * t59) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, -t171, 0, -pkin(10) * t170, pkin(10) * t171 (-t110 * t88 - t186 * t89) * pkin(4) (t110 * t57 - t186 * t56) * pkin(4), -t147 * t94 + t180 * t89, qJD(6) * t148 - t175 * t89, t133, t61, 0, -t56 * t119 + t138 * t115 + (t115 * t69 - t119 * t137) * qJD(6), t56 * t115 + t138 * t119 + (t115 * t137 + t119 * t69) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t153, -0.2e1 * t147, 0, 0, 0, t115 * t164, t119 * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, 0, 0, 0, 0, t35, -t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, 0, 0, 0, 0, t61, -t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t29, t43, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119 * t89 - t163, -t115 * t89 - t162, t88, t16, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t167, -t168, 0, -t103 * t167, t103 * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
