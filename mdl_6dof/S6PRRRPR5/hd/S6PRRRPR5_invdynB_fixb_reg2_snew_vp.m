% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 08:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 08:06:05
% EndTime: 2019-05-05 08:07:30
% DurationCPUTime: 81.16s
% Computational Cost: add. (775960->1159), mult. (1654350->1952), div. (0->0), fcn. (1362053->16), ass. (0->854)
t1149 = cos(qJ(3));
t1137 = sin(pkin(7));
t1145 = sin(qJ(3));
t1314 = t1137 * t1145;
t1297 = qJD(2) * t1314;
t1302 = qJDD(2) * t1137;
t1099 = -qJD(3) * t1297 + t1149 * t1302;
t1141 = cos(pkin(7));
t1128 = qJD(2) * t1141 + qJD(3);
t1109 = t1128 * t1297;
t1071 = t1099 - t1109;
t1369 = t1141 * t1071;
t1143 = sin(qJ(6));
t1144 = sin(qJ(4));
t1148 = cos(qJ(4));
t1090 = t1128 * t1144 + t1148 * t1297;
t1300 = qJDD(2) * t1145;
t1334 = qJD(2) * t1149;
t1098 = (qJD(3) * t1334 + t1300) * t1137;
t1127 = qJDD(2) * t1141 + qJDD(3);
t1281 = t1144 * t1098 - t1148 * t1127;
t1031 = -qJD(4) * t1090 - t1281;
t1089 = t1128 * t1148 - t1144 * t1297;
t1032 = t1089 * qJD(4) + t1148 * t1098 + t1144 * t1127;
t1135 = sin(pkin(13));
t1139 = cos(pkin(13));
t1282 = -t1139 * t1031 + t1032 * t1135;
t1275 = qJDD(6) + t1282;
t1047 = t1135 * t1089 + t1139 * t1090;
t1313 = t1137 * t1149;
t1296 = qJD(2) * t1313;
t1122 = -qJD(4) + t1296;
t1147 = cos(qJ(6));
t1016 = t1047 * t1143 + t1147 * t1122;
t1018 = t1047 * t1147 - t1122 * t1143;
t945 = t1018 * t1016;
t1364 = t1275 - t945;
t1368 = t1143 * t1364;
t1367 = t1147 * t1364;
t1146 = sin(qJ(2));
t1150 = cos(qJ(2));
t1142 = cos(pkin(6));
t1138 = sin(pkin(6));
t1348 = g(3) - qJDD(1);
t1286 = t1138 * t1348;
t1140 = cos(pkin(12));
t1130 = t1140 * g(2);
t1136 = sin(pkin(12));
t1287 = g(1) * t1136 - t1130;
t1160 = t1142 * t1287 - t1286;
t1279 = g(1) * t1140 + g(2) * t1136;
t1056 = -t1146 * t1279 - t1150 * t1160;
t1151 = qJD(2) ^ 2;
t1349 = pkin(9) * t1137;
t1159 = qJDD(2) * pkin(2) + t1151 * t1349 - t1056;
t1111 = t1138 * t1287;
t1274 = t1142 * t1348 + t1111;
t1366 = -t1137 * t1274 + t1141 * t1159;
t1328 = t1047 * t1122;
t924 = t1282 - t1328;
t1094 = -qJDD(4) + t1099;
t964 = t1031 * t1135 + t1032 * t1139;
t901 = -t1016 * qJD(6) - t1143 * t1094 + t1147 * t964;
t1045 = -t1139 * t1089 + t1090 * t1135;
t1042 = qJD(6) + t1045;
t962 = t1042 * t1016;
t854 = -t962 + t901;
t1057 = t1146 * t1160 - t1150 * t1279;
t999 = t1056 * t1146 + t1057 * t1150;
t1365 = t999 * t1138;
t1027 = t1045 * t1122;
t1284 = -t964 - t1027;
t1329 = t1045 * t1047;
t1162 = -t1094 - t1329;
t1363 = t1135 * t1162;
t1362 = t1136 * t1348;
t1361 = t1139 * t1162;
t1360 = t1140 * t1348;
t1326 = t1089 * t1090;
t1161 = -t1094 + t1326;
t1359 = t1144 * t1161;
t1193 = t1146 * t1274;
t1358 = t1148 * t1161;
t1192 = t1150 * t1274;
t1072 = t1089 * t1122;
t997 = -t1072 - t1032;
t995 = -t1072 + t1032;
t1110 = t1128 * t1296;
t1068 = t1110 + t1098;
t1283 = t1147 * t1094 + t1143 * t964;
t851 = (qJD(6) - t1042) * t1018 + t1283;
t992 = (qJD(4) + t1122) * t1090 + t1281;
t1075 = -t1136 * t1287 - t1140 * t1279;
t1049 = -t1151 * pkin(2) + pkin(9) * t1302 + t1057;
t947 = t1149 * t1049 + t1145 * t1366;
t1013 = t1016 ^ 2;
t1014 = t1018 ^ 2;
t1041 = t1042 ^ 2;
t1043 = t1045 ^ 2;
t1044 = t1047 ^ 2;
t1357 = t1089 ^ 2;
t1088 = t1090 ^ 2;
t1356 = t1122 ^ 2;
t1355 = t1128 ^ 2;
t1354 = 2 * qJD(5);
t1353 = pkin(3) * t1145;
t1352 = pkin(3) * t1149;
t1351 = pkin(5) * t1135;
t1350 = pkin(8) * t1142;
t1280 = -pkin(10) * t1145 - t1352;
t1335 = qJD(2) * t1137;
t1097 = t1280 * t1335;
t1155 = t1127 * pkin(10) + t1097 * t1296 + t947;
t1154 = -pkin(3) * t1355 + t1155;
t1006 = t1137 * t1159 + t1141 * t1274;
t1157 = -pkin(10) * t1068 - t1006;
t1156 = -pkin(3) * t1071 + t1157;
t858 = t1144 * t1154 - t1148 * t1156;
t1153 = pkin(4) * t1161 + qJ(5) * t997 - t858;
t1060 = -pkin(4) * t1122 - qJ(5) * t1090;
t859 = t1144 * t1156 + t1148 * t1154;
t798 = -pkin(4) * t1357 + qJ(5) * t1031 + t1060 * t1122 + t859;
t708 = -0.2e1 * qJD(5) * t1045 + t1135 * t1153 + t1139 * t798;
t970 = pkin(5) * t1045 - pkin(11) * t1047;
t692 = -pkin(5) * t1356 - pkin(11) * t1094 - t1045 * t970 + t708;
t1304 = t1366 * t1149;
t931 = -t1127 * pkin(3) - t1355 * pkin(10) + (t1097 * t1335 + t1049) * t1145 - t1304;
t862 = -t1031 * pkin(4) - t1357 * qJ(5) + t1060 * t1090 + qJDD(5) + t931;
t758 = pkin(5) * t924 + t1284 * pkin(11) + t862;
t635 = t1143 * t758 + t1147 * t692;
t1347 = t1135 * t862;
t958 = t1094 - t1329;
t1346 = t1135 * t958;
t1345 = t1139 * t862;
t1344 = t1139 * t958;
t1285 = t1135 * t798 - t1139 * t1153;
t691 = t1094 * pkin(5) - t1356 * pkin(11) + (t1354 + t970) * t1047 + t1285;
t1343 = t1143 * t691;
t879 = t1275 + t945;
t1342 = t1143 * t879;
t707 = t1047 * t1354 + t1285;
t628 = t1135 * t708 - t1139 * t707;
t1341 = t1144 * t628;
t1340 = t1144 * t931;
t1339 = t1147 * t691;
t1338 = t1147 * t879;
t1337 = t1148 * t628;
t1336 = t1148 * t931;
t1022 = t1094 + t1326;
t1333 = t1022 * t1144;
t1332 = t1022 * t1148;
t1331 = t1042 * t1143;
t1330 = t1042 * t1147;
t1298 = t1128 * t1335;
t1133 = t1145 ^ 2;
t1134 = t1149 ^ 2;
t1303 = t1133 + t1134;
t1073 = t1303 * t1298;
t1327 = t1073 * t1146;
t1325 = t1094 * t1145;
t1307 = t1149 * t1151;
t1132 = t1137 ^ 2;
t1316 = t1132 * t1145;
t1121 = t1307 * t1316;
t1095 = -t1121 + t1127;
t1324 = t1095 * t1145;
t1323 = t1095 * t1149;
t1096 = t1121 + t1127;
t1322 = t1096 * t1145;
t1321 = t1096 * t1149;
t1320 = t1122 * t1135;
t1319 = t1122 * t1139;
t1318 = t1122 * t1144;
t1317 = t1122 * t1148;
t1315 = t1132 * t1151;
t1312 = t1137 * t1150;
t1311 = t1141 * t1145;
t1310 = t1145 * t1006;
t1309 = t1149 * t1006;
t1301 = qJDD(2) * t1138;
t1299 = -pkin(5) * t1139 - pkin(4);
t1295 = t1135 * t945;
t1294 = t1139 * t945;
t1293 = t1145 * t1329;
t1292 = t1149 * t1329;
t1291 = t1145 * t1326;
t1290 = t1149 * t1326;
t1289 = t1133 * t1315;
t1288 = t1134 * t1315;
t629 = t1135 * t707 + t1139 * t708;
t634 = t1143 * t692 - t1147 * t758;
t766 = t1144 * t858 + t1148 * t859;
t1084 = -t1289 - t1355;
t1048 = -t1084 * t1145 - t1323;
t1278 = pkin(9) * t1048 - t1310;
t1102 = -t1288 - t1355;
t1055 = t1102 * t1149 - t1322;
t1277 = pkin(9) * t1055 + t1309;
t1276 = g(2) * t1136 ^ 2 + t1130 * t1140;
t587 = t1143 * t635 - t1147 * t634;
t588 = t1143 * t634 + t1147 * t635;
t765 = t1144 * t859 - t1148 * t858;
t559 = t1135 * t588 - t1139 * t691;
t560 = t1135 * t691 + t1139 * t588;
t517 = -t1144 * t559 + t1148 * t560;
t1273 = t1145 * t517 - t1149 * t587;
t582 = t1148 * t629 - t1341;
t1272 = t1145 * t582 - t1149 * t862;
t855 = -t962 - t901;
t762 = -t1143 * t855 - t1147 * t851;
t906 = t1013 + t1014;
t721 = t1135 * t762 + t1139 * t906;
t722 = -t1135 * t906 + t1139 * t762;
t643 = -t1144 * t721 + t1148 * t722;
t760 = -t1143 * t851 + t1147 * t855;
t1271 = t1145 * t643 - t1149 * t760;
t853 = (-qJD(6) - t1042) * t1018 - t1283;
t763 = -t1143 * t854 + t1147 * t853;
t944 = -t1014 + t1013;
t736 = t1135 * t763 + t1139 * t944;
t737 = -t1135 * t944 + t1139 * t763;
t656 = -t1144 * t736 + t1148 * t737;
t761 = -t1143 * t853 - t1147 * t854;
t1270 = t1145 * t656 + t1149 * t761;
t915 = -t1041 - t1013;
t803 = t1147 * t915 - t1368;
t738 = t1135 * t803 + t1139 * t853;
t739 = -t1135 * t853 + t1139 * t803;
t665 = -t1144 * t738 + t1148 * t739;
t802 = t1143 * t915 + t1367;
t1269 = t1145 * t665 - t1149 * t802;
t936 = -t1014 - t1041;
t808 = -t1143 * t936 - t1338;
t740 = t1135 * t808 - t1139 * t854;
t741 = t1135 * t854 + t1139 * t808;
t667 = -t1144 * t740 + t1148 * t741;
t807 = t1147 * t936 - t1342;
t1268 = t1145 * t667 - t1149 * t807;
t957 = -t1014 + t1041;
t824 = -t1143 * t957 + t1367;
t750 = t1135 * t824 + t1139 * t855;
t752 = -t1135 * t855 + t1139 * t824;
t678 = -t1144 * t750 + t1148 * t752;
t822 = -t1147 * t957 - t1368;
t1267 = t1145 * t678 + t1149 * t822;
t956 = t1013 - t1041;
t825 = t1147 * t956 - t1342;
t751 = t1135 * t825 + t1139 * t851;
t753 = -t1135 * t851 + t1139 * t825;
t679 = -t1144 * t751 + t1148 * t753;
t823 = -t1143 * t956 - t1338;
t1266 = t1145 * t679 + t1149 * t823;
t900 = -qJD(6) * t1018 - t1283;
t848 = t1016 * t1330 - t1143 * t900;
t789 = t1135 * t848 + t1294;
t791 = t1139 * t848 - t1295;
t711 = -t1144 * t789 + t1148 * t791;
t847 = -t1016 * t1331 - t1147 * t900;
t1265 = t1145 * t711 + t1149 * t847;
t850 = -t1018 * t1331 + t1147 * t901;
t790 = t1135 * t850 - t1294;
t792 = t1139 * t850 + t1295;
t712 = -t1144 * t790 + t1148 * t792;
t849 = -t1018 * t1330 - t1143 * t901;
t1264 = t1145 * t712 + t1149 * t849;
t888 = (-t1016 * t1147 + t1018 * t1143) * t1042;
t831 = t1135 * t888 - t1139 * t1275;
t832 = t1135 * t1275 + t1139 * t888;
t743 = -t1144 * t831 + t1148 * t832;
t887 = (t1016 * t1143 + t1018 * t1147) * t1042;
t1263 = t1145 * t743 + t1149 * t887;
t925 = t1282 + t1328;
t929 = t1027 - t964;
t833 = -t1135 * t925 + t1139 * t929;
t835 = -t1135 * t929 - t1139 * t925;
t747 = -t1144 * t833 + t1148 * t835;
t939 = -t1043 - t1044;
t1262 = t1145 * t747 - t1149 * t939;
t834 = -t1135 * t924 - t1139 * t1284;
t836 = t1135 * t1284 - t1139 * t924;
t748 = -t1144 * t834 + t1148 * t836;
t971 = -t1044 + t1043;
t1261 = t1145 * t748 + t1149 * t971;
t1260 = t1145 * t766 - t1149 * t931;
t967 = -t1356 - t1043;
t891 = t1135 * t967 + t1361;
t892 = t1139 * t967 - t1363;
t784 = -t1144 * t891 + t1148 * t892;
t1259 = t1145 * t784 - t1149 * t924;
t1007 = -t1044 - t1356;
t907 = t1007 * t1139 + t1346;
t908 = -t1007 * t1135 + t1344;
t812 = -t1144 * t907 + t1148 * t908;
t1258 = t1145 * t812 + t1149 * t1284;
t1026 = -t1044 + t1356;
t911 = t1026 * t1139 + t1363;
t913 = -t1026 * t1135 + t1361;
t820 = -t1144 * t911 + t1148 * t913;
t1257 = t1145 * t820 + t1149 * t929;
t1025 = t1043 - t1356;
t912 = t1025 * t1135 - t1344;
t914 = t1025 * t1139 + t1346;
t821 = -t1144 * t912 + t1148 * t914;
t1256 = t1145 * t821 + t1149 * t925;
t946 = t1049 * t1145 - t1304;
t1255 = t1145 * t947 - t1149 * t946;
t874 = t1145 * t946 + t1149 * t947;
t1037 = -t1356 - t1357;
t954 = t1037 * t1148 - t1359;
t993 = (-qJD(4) + t1122) * t1090 - t1281;
t1254 = t1145 * t954 + t1149 * t993;
t1052 = -t1088 - t1356;
t969 = -t1052 * t1144 + t1332;
t1253 = t1145 * t969 - t1149 * t995;
t1066 = -t1088 + t1356;
t976 = -t1066 * t1144 + t1358;
t1252 = t1145 * t976 + t1149 * t997;
t1065 = -t1356 + t1357;
t977 = t1065 * t1148 + t1333;
t1251 = t1145 * t977 + t1149 * t992;
t516 = t1144 * t560 + t1148 * t559;
t483 = -t1137 * t516 + t1141 * t1273;
t505 = t1145 * t587 + t1149 * t517;
t1250 = t1146 * t505 + t1150 * t483;
t581 = t1144 * t629 + t1337;
t527 = -t1137 * t581 + t1141 * t1272;
t572 = t1145 * t862 + t1149 * t582;
t1249 = t1146 * t572 + t1150 * t527;
t642 = t1144 * t722 + t1148 * t721;
t575 = -t1137 * t642 + t1141 * t1271;
t612 = t1145 * t760 + t1149 * t643;
t1248 = t1146 * t612 + t1150 * t575;
t655 = t1144 * t737 + t1148 * t736;
t584 = -t1137 * t655 + t1141 * t1270;
t616 = -t1145 * t761 + t1149 * t656;
t1247 = t1146 * t616 + t1150 * t584;
t664 = t1144 * t739 + t1148 * t738;
t591 = -t1137 * t664 + t1141 * t1269;
t626 = t1145 * t802 + t1149 * t665;
t1246 = t1146 * t626 + t1150 * t591;
t666 = t1144 * t741 + t1148 * t740;
t595 = -t1137 * t666 + t1141 * t1268;
t627 = t1145 * t807 + t1149 * t667;
t1245 = t1146 * t627 + t1150 * t595;
t676 = t1144 * t752 + t1148 * t750;
t599 = -t1137 * t676 + t1141 * t1267;
t638 = -t1145 * t822 + t1149 * t678;
t1244 = t1146 * t638 + t1150 * t599;
t677 = t1144 * t753 + t1148 * t751;
t600 = -t1137 * t677 + t1141 * t1266;
t639 = -t1145 * t823 + t1149 * t679;
t1243 = t1146 * t639 + t1150 * t600;
t709 = t1144 * t791 + t1148 * t789;
t622 = -t1137 * t709 + t1141 * t1265;
t688 = -t1145 * t847 + t1149 * t711;
t1242 = t1146 * t688 + t1150 * t622;
t710 = t1144 * t792 + t1148 * t790;
t623 = -t1137 * t710 + t1141 * t1264;
t689 = -t1145 * t849 + t1149 * t712;
t1241 = t1146 * t689 + t1150 * t623;
t742 = t1144 * t832 + t1148 * t831;
t645 = -t1137 * t742 + t1141 * t1263;
t703 = -t1145 * t887 + t1149 * t743;
t1240 = t1146 * t703 + t1150 * t645;
t745 = t1144 * t835 + t1148 * t833;
t654 = -t1137 * t745 + t1141 * t1262;
t720 = t1145 * t939 + t1149 * t747;
t1239 = t1146 * t720 + t1150 * t654;
t746 = t1144 * t836 + t1148 * t834;
t663 = -t1137 * t746 + t1141 * t1261;
t730 = -t1145 * t971 + t1149 * t748;
t1238 = t1146 * t730 + t1150 * t663;
t673 = -t1137 * t765 + t1141 * t1260;
t732 = t1145 * t931 + t1149 * t766;
t1237 = t1146 * t732 + t1150 * t673;
t783 = t1144 * t892 + t1148 * t891;
t694 = -t1137 * t783 + t1141 * t1259;
t759 = t1145 * t924 + t1149 * t784;
t1236 = t1146 * t759 + t1150 * t694;
t811 = t1144 * t908 + t1148 * t907;
t702 = -t1137 * t811 + t1141 * t1258;
t772 = -t1145 * t1284 + t1149 * t812;
t1235 = t1146 * t772 + t1150 * t702;
t818 = t1144 * t913 + t1148 * t911;
t715 = -t1137 * t818 + t1141 * t1257;
t774 = -t1145 * t929 + t1149 * t820;
t1234 = t1146 * t774 + t1150 * t715;
t819 = t1144 * t914 + t1148 * t912;
t716 = -t1137 * t819 + t1141 * t1256;
t775 = -t1145 * t925 + t1149 * t821;
t1233 = t1146 * t775 + t1150 * t716;
t916 = -t1045 * t1320 - t1139 * t1282;
t917 = -t1045 * t1319 + t1135 * t1282;
t829 = -t1144 * t916 + t1148 * t917;
t1198 = t1145 * t829 + t1292;
t827 = t1144 * t917 + t1148 * t916;
t725 = -t1137 * t827 + t1141 * t1198;
t785 = t1149 * t829 - t1293;
t1232 = t1146 * t785 + t1150 * t725;
t918 = -t1047 * t1319 + t1135 * t964;
t919 = t1047 * t1320 + t1139 * t964;
t830 = -t1144 * t918 + t1148 * t919;
t1197 = t1145 * t830 - t1292;
t828 = t1144 * t919 + t1148 * t918;
t726 = -t1137 * t828 + t1141 * t1197;
t786 = t1149 * t830 + t1293;
t1231 = t1146 * t786 + t1150 * t726;
t1078 = t1141 * t1149 * t1094;
t951 = (t1045 * t1135 + t1047 * t1139) * t1122;
t952 = (t1045 * t1139 - t1047 * t1135) * t1122;
t876 = t1144 * t952 + t1148 * t951;
t877 = -t1144 * t951 + t1148 * t952;
t777 = -t1137 * t876 + t1311 * t877 + t1078;
t869 = t1149 * t877 - t1325;
t1230 = t1146 * t869 + t1150 * t777;
t1021 = t1088 + t1357;
t923 = -t1144 * t997 - t1148 * t992;
t1217 = t1021 * t1149 + t1145 * t923;
t921 = -t1144 * t992 + t1148 * t997;
t805 = -t1137 * t921 + t1141 * t1217;
t882 = -t1021 * t1145 + t1149 * t923;
t1229 = t1146 * t882 + t1150 * t805;
t1051 = -t1088 + t1357;
t922 = -t1144 * t995 + t1148 * t993;
t1215 = t1051 * t1149 + t1145 * t922;
t920 = t1144 * t993 + t1148 * t995;
t810 = -t1137 * t920 + t1141 * t1215;
t894 = -t1051 * t1145 + t1149 * t922;
t1228 = t1146 * t894 + t1150 * t810;
t842 = t1137 * t1006 + t1141 * t1255;
t1227 = t1146 * t874 + t1150 * t842;
t953 = t1037 * t1144 + t1358;
t844 = -t1137 * t953 + t1141 * t1254;
t899 = -t1145 * t993 + t1149 * t954;
t1226 = t1146 * t899 + t1150 * t844;
t968 = t1052 * t1148 + t1333;
t861 = -t1137 * t968 + t1141 * t1253;
t905 = t1145 * t995 + t1149 * t969;
t1225 = t1146 * t905 + t1150 * t861;
t974 = t1066 * t1148 + t1359;
t865 = -t1137 * t974 + t1141 * t1252;
t909 = -t1145 * t997 + t1149 * t976;
t1224 = t1146 * t909 + t1150 * t865;
t975 = t1065 * t1144 - t1332;
t866 = -t1137 * t975 + t1141 * t1251;
t910 = -t1145 * t992 + t1149 * t977;
t1223 = t1146 * t910 + t1150 * t866;
t986 = -t1031 * t1144 + t1089 * t1317;
t1196 = t1145 * t986 - t1290;
t985 = t1031 * t1148 + t1089 * t1318;
t885 = -t1137 * t985 + t1141 * t1196;
t942 = t1149 * t986 + t1291;
t1222 = t1146 * t942 + t1150 * t885;
t988 = t1032 * t1148 + t1090 * t1318;
t1195 = t1145 * t988 + t1290;
t987 = t1032 * t1144 - t1090 * t1317;
t886 = -t1137 * t987 + t1141 * t1195;
t943 = t1149 * t988 - t1291;
t1221 = t1146 * t943 + t1150 * t886;
t1011 = (-t1089 * t1144 + t1090 * t1148) * t1122;
t1012 = (-t1089 * t1148 - t1090 * t1144) * t1122;
t935 = -t1011 * t1137 + t1012 * t1311 + t1078;
t984 = t1012 * t1149 - t1325;
t1220 = t1146 * t984 + t1150 * t935;
t1069 = -t1110 + t1098;
t1070 = t1099 + t1109;
t1008 = t1069 * t1145 + t1070 * t1149;
t1108 = t1303 * t1315;
t1207 = -t1069 * t1149 + t1070 * t1145;
t982 = t1137 * t1108 + t1141 * t1207;
t1219 = t1008 * t1146 + t1150 * t982;
t1009 = -t1068 * t1145 + t1071 * t1149;
t1107 = (t1133 - t1134) * t1315;
t1208 = t1068 * t1149 + t1071 * t1145;
t983 = -t1137 * t1107 + t1141 * t1208;
t1218 = t1009 * t1146 + t1150 * t983;
t1067 = (t1300 + (qJD(3) + t1128) * t1334) * t1137;
t1206 = t1084 * t1149 - t1324;
t991 = -t1137 * t1067 + t1141 * t1206;
t1216 = t1048 * t1146 + t1150 * t991;
t1214 = qJD(2) * t1128 - t1141 * t1151;
t1100 = -t1289 + t1355;
t1204 = t1100 * t1149 + t1322;
t1003 = -t1137 * t1069 + t1141 * t1204;
t1053 = -t1100 * t1145 + t1321;
t1213 = t1003 * t1150 + t1053 * t1146;
t1101 = t1288 - t1355;
t1205 = t1101 * t1145 + t1323;
t1004 = -t1137 * t1070 + t1141 * t1205;
t1054 = t1101 * t1149 - t1324;
t1212 = t1004 * t1150 + t1054 * t1146;
t1203 = t1102 * t1145 + t1321;
t1005 = t1137 * t1071 + t1141 * t1203;
t1211 = t1005 * t1150 + t1055 * t1146;
t1131 = t1137 * t1132;
t1033 = (-t1131 * t1145 * t1151 + t1369) * t1149;
t1058 = -t1099 * t1145 - t1134 * t1298;
t1210 = t1033 * t1150 + t1058 * t1146;
t1036 = (t1068 * t1141 + t1131 * t1307) * t1145;
t1059 = t1098 * t1149 - t1133 * t1298;
t1209 = t1036 * t1150 + t1059 * t1146;
t998 = t1150 * t1056 - t1146 * t1057;
t1201 = qJDD(2) * t1146 + t1150 * t1151;
t1105 = t1201 * t1142;
t1118 = qJDD(2) * t1150 - t1146 * t1151;
t1202 = t1105 * t1140 + t1118 * t1136;
t1063 = t1105 * t1136 - t1118 * t1140;
t496 = qJ(5) * t560 + (-pkin(11) * t1135 + t1299) * t587;
t507 = -qJ(5) * t559 + (-pkin(11) * t1139 + t1351) * t587;
t468 = -pkin(10) * t516 - t1144 * t496 + t1148 * t507;
t490 = -pkin(3) * t516 - pkin(4) * t559 + pkin(5) * t691 - pkin(11) * t588;
t1175 = pkin(9) * t505 + t1145 * t468 + t1149 * t490;
t467 = -pkin(3) * t587 + pkin(10) * t517 + t1144 * t507 + t1148 * t496;
t482 = t1137 * t1273 + t1141 * t516;
t450 = -pkin(2) * t482 - t1137 * t467 + t1141 * t1175;
t455 = -t1145 * t490 + t1149 * t468 + (-t1137 * t482 - t1141 * t483) * pkin(9);
t469 = -t1146 * t483 + t1150 * t505;
t1191 = pkin(8) * t469 + t1146 * t455 + t1150 * t450;
t569 = -pkin(11) * t760 - t587;
t538 = qJ(5) * t722 + t1135 * t569 + t1299 * t760;
t545 = -qJ(5) * t721 + t1139 * t569 + t1351 * t760;
t504 = -pkin(10) * t642 - t1144 * t538 + t1148 * t545;
t531 = -pkin(3) * t642 - pkin(4) * t721 - pkin(5) * t906 - pkin(11) * t762 - t588;
t1174 = pkin(9) * t612 + t1145 * t504 + t1149 * t531;
t497 = -pkin(3) * t760 + pkin(10) * t643 + t1144 * t545 + t1148 * t538;
t574 = t1137 * t1271 + t1141 * t642;
t466 = -pkin(2) * t574 - t1137 * t497 + t1141 * t1174;
t480 = -t1145 * t531 + t1149 * t504 + (-t1137 * t574 - t1141 * t575) * pkin(9);
t535 = -t1146 * t575 + t1150 * t612;
t1190 = pkin(8) * t535 + t1146 * t480 + t1150 * t466;
t618 = -pkin(4) * t862 + qJ(5) * t629;
t528 = -pkin(10) * t581 - qJ(5) * t1337 - t1144 * t618;
t544 = -pkin(3) * t581 - pkin(4) * t628;
t1171 = pkin(9) * t572 + t1145 * t528 + t1149 * t544;
t523 = -pkin(3) * t862 + pkin(10) * t582 - qJ(5) * t1341 + t1148 * t618;
t526 = t1137 * t1272 + t1141 * t581;
t471 = -pkin(2) * t526 - t1137 * t523 + t1141 * t1171;
t479 = -t1145 * t544 + t1149 * t528 + (-t1137 * t526 - t1141 * t527) * pkin(9);
t506 = -t1146 * t527 + t1150 * t572;
t1189 = pkin(8) * t506 + t1146 * t479 + t1150 * t471;
t617 = -pkin(5) * t802 + t634;
t657 = -pkin(11) * t802 + t1343;
t554 = -pkin(4) * t802 + qJ(5) * t739 + t1135 * t657 + t1139 * t617;
t564 = -qJ(5) * t738 - t1135 * t617 + t1139 * t657;
t510 = -pkin(10) * t664 - t1144 * t554 + t1148 * t564;
t571 = -pkin(3) * t664 - pkin(4) * t738 - pkin(5) * t853 - pkin(11) * t803 + t1339;
t1173 = pkin(9) * t626 + t1145 * t510 + t1149 * t571;
t508 = -pkin(3) * t802 + pkin(10) * t665 + t1144 * t564 + t1148 * t554;
t590 = t1137 * t1269 + t1141 * t664;
t475 = -pkin(2) * t590 - t1137 * t508 + t1141 * t1173;
t484 = -t1145 * t571 + t1149 * t510 + (-t1137 * t590 - t1141 * t591) * pkin(9);
t550 = -t1146 * t591 + t1150 * t626;
t1188 = pkin(8) * t550 + t1146 * t484 + t1150 * t475;
t619 = -pkin(5) * t807 + t635;
t659 = -pkin(11) * t807 + t1339;
t557 = -pkin(4) * t807 + qJ(5) * t741 + t1135 * t659 + t1139 * t619;
t565 = -qJ(5) * t740 - t1135 * t619 + t1139 * t659;
t511 = -pkin(10) * t666 - t1144 * t557 + t1148 * t565;
t573 = -pkin(3) * t666 - pkin(4) * t740 + pkin(5) * t854 - pkin(11) * t808 - t1343;
t1172 = pkin(9) * t627 + t1145 * t511 + t1149 * t573;
t509 = -pkin(3) * t807 + pkin(10) * t667 + t1144 * t565 + t1148 * t557;
t594 = t1137 * t1268 + t1141 * t666;
t478 = -pkin(2) * t594 - t1137 * t509 + t1141 * t1172;
t486 = -t1145 * t573 + t1149 * t511 + (-t1137 * t594 - t1141 * t595) * pkin(9);
t552 = -t1146 * t595 + t1150 * t627;
t1187 = pkin(8) * t552 + t1146 * t486 + t1150 * t478;
t611 = -pkin(4) * t939 + qJ(5) * t835 + t629;
t615 = -qJ(5) * t833 - t628;
t551 = -pkin(10) * t745 - t1144 * t611 + t1148 * t615;
t698 = -pkin(3) * t745 - pkin(4) * t833;
t1170 = pkin(9) * t720 + t1145 * t551 + t1149 * t698;
t549 = -pkin(3) * t939 + pkin(10) * t747 + t1144 * t615 + t1148 * t611;
t653 = t1137 * t1262 + t1141 * t745;
t499 = -pkin(2) * t653 - t1137 * t549 + t1141 * t1170;
t515 = -t1145 * t698 + t1149 * t551 + (-t1137 * t653 - t1141 * t654) * pkin(9);
t608 = -t1146 * t654 + t1150 * t720;
t1186 = pkin(8) * t608 + t1146 * t515 + t1150 * t499;
t744 = -pkin(4) * t924 + qJ(5) * t892 - t1345;
t778 = -qJ(5) * t891 + t1347;
t641 = -pkin(10) * t783 - t1144 * t744 + t1148 * t778;
t648 = -pkin(3) * t783 - pkin(4) * t891 + t707;
t1169 = pkin(9) * t759 + t1145 * t641 + t1149 * t648;
t630 = -pkin(3) * t924 + pkin(10) * t784 + t1144 * t778 + t1148 * t744;
t693 = t1137 * t1259 + t1141 * t783;
t530 = -pkin(2) * t693 - t1137 * t630 + t1141 * t1169;
t548 = -t1145 * t648 + t1149 * t641 + (-t1137 * t693 - t1141 * t694) * pkin(9);
t637 = -t1146 * t694 + t1150 * t759;
t1185 = pkin(8) * t637 + t1146 * t548 + t1150 * t530;
t755 = pkin(4) * t1284 + qJ(5) * t908 + t1347;
t780 = -qJ(5) * t907 + t1345;
t658 = -pkin(10) * t811 - t1144 * t755 + t1148 * t780;
t661 = -pkin(3) * t811 - pkin(4) * t907 + t708;
t1168 = pkin(9) * t772 + t1145 * t658 + t1149 * t661;
t640 = pkin(3) * t1284 + pkin(10) * t812 + t1144 * t780 + t1148 * t755;
t701 = t1137 * t1258 + t1141 * t811;
t537 = -pkin(2) * t701 - t1137 * t640 + t1141 * t1168;
t553 = -t1145 * t661 + t1149 * t658 + (-t1137 * t701 - t1141 * t702) * pkin(9);
t660 = -t1146 * t702 + t1150 * t772;
t1184 = pkin(8) * t660 + t1146 * t553 + t1150 * t537;
t1163 = pkin(9) * t732 + t1280 * t765;
t672 = t1137 * t1260 + t1141 * t765;
t733 = -pkin(3) * t931 + pkin(10) * t766;
t568 = -pkin(2) * t672 - t1137 * t733 + t1141 * t1163;
t570 = (-pkin(10) * t1149 + t1353) * t765 + (-t1137 * t672 - t1141 * t673) * pkin(9);
t614 = -t1146 * t673 + t1150 * t732;
t1183 = pkin(8) * t614 + t1146 * t570 + t1150 * t568;
t731 = -pkin(10) * t921 - t765;
t1164 = pkin(9) * t882 + t1145 * t731 - t1352 * t921;
t719 = pkin(3) * t1021 + pkin(10) * t923 + t766;
t804 = t1137 * t1217 + t1141 * t921;
t605 = -pkin(2) * t804 - t1137 * t719 + t1141 * t1164;
t631 = t921 * t1353 + t1149 * t731 + (-t1137 * t804 - t1141 * t805) * pkin(9);
t754 = -t1146 * t805 + t1150 * t882;
t1182 = pkin(8) * t754 + t1146 * t631 + t1150 * t605;
t799 = t1144 * t1155 - t1148 * t1157 + (t1071 * t1148 - t1144 * t1355 - t953) * pkin(3);
t867 = -pkin(10) * t953 + t1340;
t1167 = pkin(9) * t899 + t1145 * t867 + t1149 * t799;
t817 = pkin(3) * t993 + pkin(10) * t954 - t1336;
t843 = t1137 * t1254 + t1141 * t953;
t647 = -pkin(2) * t843 - t1137 * t817 + t1141 * t1167;
t675 = -t1145 * t799 + t1149 * t867 + (-t1137 * t843 - t1141 * t844) * pkin(9);
t773 = -t1146 * t844 + t1150 * t899;
t1181 = pkin(8) * t773 + t1146 * t675 + t1150 * t647;
t806 = -pkin(3) * t968 + t859;
t868 = -pkin(10) * t968 + t1336;
t1166 = pkin(9) * t905 + t1145 * t868 + t1149 * t806;
t826 = -pkin(3) * t995 + pkin(10) * t969 + t1340;
t860 = t1137 * t1253 + t1141 * t968;
t650 = -pkin(2) * t860 - t1137 * t826 + t1141 * t1166;
t684 = -t1145 * t806 + t1149 * t868 + (-t1137 * t860 - t1141 * t861) * pkin(9);
t779 = -t1146 * t861 + t1150 * t905;
t1180 = pkin(8) * t779 + t1146 * t684 + t1150 * t650;
t841 = -t1141 * t1006 + t1137 * t1255;
t749 = (-t1137 * t841 - t1141 * t842) * pkin(9);
t769 = -t1146 * t842 + t1150 * t874;
t770 = pkin(9) * t1141 * t874 - pkin(2) * t841;
t1179 = pkin(8) * t769 + t1146 * t749 + t1150 * t770;
t980 = -t1141 * t1108 + t1137 * t1207;
t793 = (-t1137 * t980 - t1141 * t982) * pkin(9) - t1255;
t1165 = pkin(9) * t1008 + t874;
t801 = -pkin(2) * t980 + t1141 * t1165;
t932 = t1008 * t1150 - t1146 * t982;
t1178 = pkin(8) * t932 + t1146 * t793 + t1150 * t801;
t990 = t1141 * t1067 + t1137 * t1206;
t838 = -pkin(2) * t990 + t1137 * t947 + t1141 * t1278;
t875 = -t1309 + (-t1137 * t990 - t1141 * t991) * pkin(9);
t941 = t1048 * t1150 - t1146 * t991;
t1177 = pkin(8) * t941 + t1146 * t875 + t1150 * t838;
t1002 = t1137 * t1203 - t1369;
t846 = -pkin(2) * t1002 + t1137 * t946 + t1141 * t1277;
t881 = -t1310 + (-t1002 * t1137 - t1005 * t1141) * pkin(9);
t950 = -t1005 * t1146 + t1055 * t1150;
t1176 = pkin(8) * t950 + t1146 * t881 + t1150 * t846;
t1106 = t1118 * t1142;
t1104 = t1118 * t1138;
t1103 = t1201 * t1138;
t1077 = t1094 * t1313;
t1064 = -t1106 * t1136 - t1140 * t1201;
t1062 = t1106 * t1140 - t1136 * t1201;
t1050 = t1127 * t1137 * t1146 + t1073 * t1150;
t1035 = (t1132 * t1149 * t1214 + t1098 * t1137) * t1145;
t1034 = (t1099 * t1137 - t1214 * t1316) * t1149;
t1020 = -t1192 + (t1103 * t1138 + t1105 * t1142) * pkin(8);
t1019 = -t1193 + (-t1104 * t1138 - t1106 * t1142) * pkin(8);
t1015 = t1142 * t1327 + (-t1138 * t1141 - t1142 * t1312) * t1127;
t1001 = t1141 * t1070 + t1137 * t1205;
t1000 = t1141 * t1069 + t1137 * t1204;
t989 = t999 * t1142;
t981 = t1141 * t1107 + t1137 * t1208;
t979 = -t1036 * t1146 + t1059 * t1150;
t978 = -t1033 * t1146 + t1058 * t1150;
t973 = -pkin(1) * t1104 + t1138 * t1056 + t1142 * t1192 - t1201 * t1350;
t972 = pkin(1) * t1103 + t1138 * t1057 - t1118 * t1350 - t1142 * t1193;
t966 = t1138 * t1111 + (t1286 - t998) * t1142;
t965 = -t1138 * t998 - t1142 * t1274;
t949 = -t1004 * t1146 + t1054 * t1150;
t948 = -t1003 * t1146 + t1053 * t1150;
t938 = -t1138 * t1035 + t1142 * t1209;
t937 = -t1138 * t1034 + t1142 * t1210;
t934 = t1011 * t1141 + t1012 * t1314 + t1077;
t933 = t1009 * t1150 - t1146 * t983;
t904 = -pkin(1) * t965 + t1350 * t999;
t903 = -t1136 * t966 + t1140 * t999;
t902 = t1136 * t999 + t1140 * t966;
t898 = -t1138 * t1002 + t1142 * t1211;
t897 = -t1138 * t1001 + t1142 * t1212;
t896 = -t1138 * t1000 + t1142 * t1213;
t895 = t1142 * t1002 + t1138 * t1211;
t893 = (-t1138 * t965 - t1142 * t966) * pkin(8);
t890 = -t1138 * t990 + t1142 * t1216;
t889 = t1138 * t1216 + t1142 * t990;
t884 = t1137 * t1195 + t1141 * t987;
t883 = t1137 * t1196 + t1141 * t985;
t873 = -t1146 * t935 + t1150 * t984;
t872 = -t1138 * t981 + t1142 * t1218;
t871 = -t1138 * t980 + t1142 * t1219;
t870 = t1138 * t1219 + t1142 * t980;
t864 = t1137 * t1251 + t1141 * t975;
t863 = t1137 * t1252 + t1141 * t974;
t845 = pkin(2) * t1005 + t1137 * t1277 - t1141 * t946;
t840 = -t1136 * t898 + t1140 * t950;
t839 = t1136 * t950 + t1140 * t898;
t837 = pkin(2) * t991 + t1137 * t1278 - t1141 * t947;
t816 = -t1136 * t890 + t1140 * t941;
t815 = t1136 * t941 + t1140 * t890;
t814 = -t1146 * t886 + t1150 * t943;
t813 = -t1146 * t885 + t1150 * t942;
t809 = t1137 * t1215 + t1141 * t920;
t800 = pkin(2) * t982 + t1137 * t1165;
t796 = -t1138 * t934 + t1142 * t1220;
t795 = -t1136 * t871 + t1140 * t932;
t794 = t1136 * t932 + t1140 * t871;
t782 = -t1146 * t866 + t1150 * t910;
t781 = -t1146 * t865 + t1150 * t909;
t776 = t1141 * t876 + t1314 * t877 + t1077;
t771 = pkin(2) * t842 + t1349 * t874;
t768 = -t1138 * t884 + t1142 * t1221;
t767 = -t1138 * t883 + t1142 * t1222;
t764 = -t1146 * t810 + t1150 * t894;
t735 = -t1138 * t864 + t1142 * t1223;
t734 = -t1138 * t863 + t1142 * t1224;
t729 = -t1146 * t777 + t1150 * t869;
t728 = -t1138 * t860 + t1142 * t1225;
t727 = t1138 * t1225 + t1142 * t860;
t724 = t1137 * t1197 + t1141 * t828;
t723 = t1137 * t1198 + t1141 * t827;
t718 = -t1138 * t843 + t1142 * t1226;
t717 = t1138 * t1226 + t1142 * t843;
t714 = t1137 * t1256 + t1141 * t819;
t713 = t1137 * t1257 + t1141 * t818;
t705 = -t1138 * t841 + t1142 * t1227;
t704 = t1138 * t1227 + t1142 * t841;
t700 = -t1146 * t846 + t1150 * t881 + (-t1138 * t895 - t1142 * t898) * pkin(8);
t699 = -t1138 * t809 + t1142 * t1228;
t697 = -t1146 * t838 + t1150 * t875 + (-t1138 * t889 - t1142 * t890) * pkin(8);
t696 = -t1138 * t804 + t1142 * t1229;
t695 = t1138 * t1229 + t1142 * t804;
t687 = -pkin(1) * t895 - t1138 * t845 + t1142 * t1176;
t686 = -t1146 * t726 + t1150 * t786;
t685 = -t1146 * t725 + t1150 * t785;
t683 = -pkin(1) * t889 - t1138 * t837 + t1142 * t1177;
t682 = -t1136 * t728 + t1140 * t779;
t681 = t1136 * t779 + t1140 * t728;
t680 = -t1138 * t776 + t1142 * t1230;
t674 = -t1146 * t801 + t1150 * t793 + (-t1138 * t870 - t1142 * t871) * pkin(8);
t671 = -t1136 * t718 + t1140 * t773;
t670 = t1136 * t773 + t1140 * t718;
t669 = -t1146 * t716 + t1150 * t775;
t668 = -t1146 * t715 + t1150 * t774;
t662 = t1137 * t1261 + t1141 * t746;
t652 = -t1136 * t705 + t1140 * t769;
t651 = t1136 * t769 + t1140 * t705;
t649 = pkin(2) * t861 + t1137 * t1166 + t1141 * t826;
t646 = pkin(2) * t844 + t1137 * t1167 + t1141 * t817;
t644 = t1137 * t1263 + t1141 * t742;
t636 = -pkin(1) * t870 - t1138 * t800 + t1142 * t1178;
t633 = -t1136 * t696 + t1140 * t754;
t632 = t1136 * t754 + t1140 * t696;
t625 = -t1138 * t724 + t1142 * t1231;
t624 = -t1138 * t723 + t1142 * t1232;
t621 = t1137 * t1264 + t1141 * t710;
t620 = t1137 * t1265 + t1141 * t709;
t613 = -t1146 * t663 + t1150 * t730;
t610 = -t1138 * t714 + t1142 * t1233;
t609 = -t1138 * t713 + t1142 * t1234;
t607 = -t1138 * t701 + t1142 * t1235;
t606 = t1138 * t1235 + t1142 * t701;
t604 = pkin(2) * t805 + t1137 * t1164 + t1141 * t719;
t603 = -t1146 * t645 + t1150 * t703;
t602 = -t1138 * t693 + t1142 * t1236;
t601 = t1138 * t1236 + t1142 * t693;
t598 = t1137 * t1266 + t1141 * t677;
t597 = t1137 * t1267 + t1141 * t676;
t596 = -t1146 * t770 + t1150 * t749 + (-t1138 * t704 - t1142 * t705) * pkin(8);
t593 = -t1146 * t623 + t1150 * t689;
t592 = -t1146 * t622 + t1150 * t688;
t589 = -pkin(1) * t704 - t1138 * t771 + t1142 * t1179;
t586 = -t1138 * t672 + t1142 * t1237;
t585 = t1138 * t1237 + t1142 * t672;
t583 = t1137 * t1270 + t1141 * t655;
t580 = -t1138 * t662 + t1142 * t1238;
t579 = -t1138 * t653 + t1142 * t1239;
t578 = t1138 * t1239 + t1142 * t653;
t577 = -t1136 * t607 + t1140 * t660;
t576 = t1136 * t660 + t1140 * t607;
t567 = pkin(2) * t673 + t1137 * t1163 + t1141 * t733;
t566 = -t1138 * t644 + t1142 * t1240;
t563 = -t1146 * t650 + t1150 * t684 + (-t1138 * t727 - t1142 * t728) * pkin(8);
t562 = -t1136 * t602 + t1140 * t637;
t561 = t1136 * t637 + t1140 * t602;
t558 = -t1146 * t647 + t1150 * t675 + (-t1138 * t717 - t1142 * t718) * pkin(8);
t556 = -t1146 * t600 + t1150 * t639;
t555 = -t1146 * t599 + t1150 * t638;
t547 = -t1138 * t621 + t1142 * t1241;
t546 = -t1138 * t620 + t1142 * t1242;
t543 = -pkin(1) * t727 - t1138 * t649 + t1142 * t1180;
t542 = -t1136 * t586 + t1140 * t614;
t541 = t1136 * t614 + t1140 * t586;
t540 = -t1146 * t584 + t1150 * t616;
t539 = -pkin(1) * t717 - t1138 * t646 + t1142 * t1181;
t536 = pkin(2) * t702 + t1137 * t1168 + t1141 * t640;
t534 = -t1136 * t579 + t1140 * t608;
t533 = t1136 * t608 + t1140 * t579;
t532 = -t1146 * t605 + t1150 * t631 + (-t1138 * t695 - t1142 * t696) * pkin(8);
t529 = pkin(2) * t694 + t1137 * t1169 + t1141 * t630;
t525 = -t1138 * t598 + t1142 * t1243;
t524 = -t1138 * t597 + t1142 * t1244;
t522 = -pkin(1) * t695 - t1138 * t604 + t1142 * t1182;
t521 = -t1138 * t594 + t1142 * t1245;
t520 = t1138 * t1245 + t1142 * t594;
t519 = -t1138 * t590 + t1142 * t1246;
t518 = t1138 * t1246 + t1142 * t590;
t514 = -t1138 * t583 + t1142 * t1247;
t513 = -t1138 * t574 + t1142 * t1248;
t512 = t1138 * t1248 + t1142 * t574;
t503 = -t1136 * t521 + t1140 * t552;
t502 = t1136 * t552 + t1140 * t521;
t501 = -t1136 * t519 + t1140 * t550;
t500 = t1136 * t550 + t1140 * t519;
t498 = pkin(2) * t654 + t1137 * t1170 + t1141 * t549;
t495 = -t1146 * t568 + t1150 * t570 + (-t1138 * t585 - t1142 * t586) * pkin(8);
t494 = -t1146 * t537 + t1150 * t553 + (-t1138 * t606 - t1142 * t607) * pkin(8);
t493 = -t1136 * t513 + t1140 * t535;
t492 = t1136 * t535 + t1140 * t513;
t491 = -t1146 * t530 + t1150 * t548 + (-t1138 * t601 - t1142 * t602) * pkin(8);
t489 = -pkin(1) * t585 - t1138 * t567 + t1142 * t1183;
t488 = -t1138 * t526 + t1142 * t1249;
t487 = t1138 * t1249 + t1142 * t526;
t485 = -pkin(1) * t606 - t1138 * t536 + t1142 * t1184;
t481 = -pkin(1) * t601 - t1138 * t529 + t1142 * t1185;
t477 = pkin(2) * t595 + t1137 * t1172 + t1141 * t509;
t476 = -t1146 * t499 + t1150 * t515 + (-t1138 * t578 - t1142 * t579) * pkin(8);
t474 = pkin(2) * t591 + t1137 * t1173 + t1141 * t508;
t473 = -t1136 * t488 + t1140 * t506;
t472 = t1136 * t506 + t1140 * t488;
t470 = pkin(2) * t527 + t1137 * t1171 + t1141 * t523;
t465 = pkin(2) * t575 + t1137 * t1174 + t1141 * t497;
t464 = -pkin(1) * t578 - t1138 * t498 + t1142 * t1186;
t463 = -t1138 * t482 + t1142 * t1250;
t462 = t1138 * t1250 + t1142 * t482;
t461 = -t1146 * t478 + t1150 * t486 + (-t1138 * t520 - t1142 * t521) * pkin(8);
t460 = -t1146 * t475 + t1150 * t484 + (-t1138 * t518 - t1142 * t519) * pkin(8);
t459 = -t1146 * t466 + t1150 * t480 + (-t1138 * t512 - t1142 * t513) * pkin(8);
t458 = -t1136 * t463 + t1140 * t469;
t457 = t1136 * t469 + t1140 * t463;
t456 = -pkin(1) * t520 - t1138 * t477 + t1142 * t1187;
t454 = -pkin(1) * t518 - t1138 * t474 + t1142 * t1188;
t453 = -t1146 * t471 + t1150 * t479 + (-t1138 * t487 - t1142 * t488) * pkin(8);
t452 = -pkin(1) * t512 - t1138 * t465 + t1142 * t1190;
t451 = -pkin(1) * t487 - t1138 * t470 + t1142 * t1189;
t449 = pkin(2) * t483 + t1137 * t1175 + t1141 * t467;
t448 = -t1146 * t450 + t1150 * t455 + (-t1138 * t462 - t1142 * t463) * pkin(8);
t447 = -pkin(1) * t462 - t1138 * t449 + t1142 * t1191;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1075, 0, 0, 0, 0, 0, 0, t1064, t1063, 0, t903, 0, 0, 0, 0, 0, 0, t840, t816, t795, t652, 0, 0, 0, 0, 0, 0, t671, t682, t633, t542, 0, 0, 0, 0, 0, 0, t562, t577, t534, t473, 0, 0, 0, 0, 0, 0, t501, t503, t493, t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1276, 0, 0, 0, 0, 0, 0, t1062, -t1202, 0, t902, 0, 0, 0, 0, 0, 0, t839, t815, t794, t651, 0, 0, 0, 0, 0, 0, t670, t681, t632, t541, 0, 0, 0, 0, 0, 0, t561, t576, t533, t472, 0, 0, 0, 0, 0, 0, t500, t502, t492, t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1348, 0, 0, 0, 0, 0, 0, t1104, -t1103, 0, t965, 0, 0, 0, 0, 0, 0, t895, t889, t870, t704, 0, 0, 0, 0, 0, 0, t717, t727, t695, t585, 0, 0, 0, 0, 0, 0, t601, t606, t578, t487, 0, 0, 0, 0, 0, 0, t518, t520, t512, t462; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1362, -t1360, t1276, qJ(1) * t1276, 0, 0, -t1063, 0, t1064, t1136 * t1301, -qJ(1) * t1062 + t1019 * t1140 - t1136 * t973, qJ(1) * t1202 + t1020 * t1140 - t1136 * t972, -t1136 * t989 + t1140 * t998, -qJ(1) * t902 - t1136 * t904 + t1140 * t893, -t1136 * t938 + t1140 * t979, -t1136 * t872 + t1140 * t933, -t1136 * t896 + t1140 * t948, -t1136 * t937 + t1140 * t978, -t1136 * t897 + t1140 * t949, -t1015 * t1136 + t1050 * t1140, -qJ(1) * t839 - t1136 * t687 + t1140 * t700, -qJ(1) * t815 - t1136 * t683 + t1140 * t697, -qJ(1) * t794 - t1136 * t636 + t1140 * t674, -qJ(1) * t651 - t1136 * t589 + t1140 * t596, -t1136 * t768 + t1140 * t814, -t1136 * t699 + t1140 * t764, -t1136 * t734 + t1140 * t781, -t1136 * t767 + t1140 * t813, -t1136 * t735 + t1140 * t782, -t1136 * t796 + t1140 * t873, -qJ(1) * t670 - t1136 * t539 + t1140 * t558, -qJ(1) * t681 - t1136 * t543 + t1140 * t563, -qJ(1) * t632 - t1136 * t522 + t1140 * t532, -qJ(1) * t541 - t1136 * t489 + t1140 * t495, -t1136 * t625 + t1140 * t686, -t1136 * t580 + t1140 * t613, -t1136 * t609 + t1140 * t668, -t1136 * t624 + t1140 * t685, -t1136 * t610 + t1140 * t669, -t1136 * t680 + t1140 * t729, -qJ(1) * t561 - t1136 * t481 + t1140 * t491, -qJ(1) * t576 - t1136 * t485 + t1140 * t494, -qJ(1) * t533 - t1136 * t464 + t1140 * t476, -qJ(1) * t472 - t1136 * t451 + t1140 * t453, -t1136 * t547 + t1140 * t593, -t1136 * t514 + t1140 * t540, -t1136 * t524 + t1140 * t555, -t1136 * t546 + t1140 * t592, -t1136 * t525 + t1140 * t556, -t1136 * t566 + t1140 * t603, -qJ(1) * t500 - t1136 * t454 + t1140 * t460, -qJ(1) * t502 - t1136 * t456 + t1140 * t461, -qJ(1) * t492 - t1136 * t452 + t1140 * t459, -qJ(1) * t457 - t1136 * t447 + t1140 * t448; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1360, -t1362, t1075, qJ(1) * t1075, 0, 0, t1202, 0, t1062, -t1140 * t1301, qJ(1) * t1064 + t1019 * t1136 + t1140 * t973, qJ(1) * t1063 + t1020 * t1136 + t1140 * t972, t1136 * t998 + t1140 * t989, qJ(1) * t903 + t1136 * t893 + t1140 * t904, t1136 * t979 + t1140 * t938, t1136 * t933 + t1140 * t872, t1136 * t948 + t1140 * t896, t1136 * t978 + t1140 * t937, t1136 * t949 + t1140 * t897, t1015 * t1140 + t1050 * t1136, qJ(1) * t840 + t1136 * t700 + t1140 * t687, qJ(1) * t816 + t1136 * t697 + t1140 * t683, qJ(1) * t795 + t1136 * t674 + t1140 * t636, qJ(1) * t652 + t1136 * t596 + t1140 * t589, t1136 * t814 + t1140 * t768, t1136 * t764 + t1140 * t699, t1136 * t781 + t1140 * t734, t1136 * t813 + t1140 * t767, t1136 * t782 + t1140 * t735, t1136 * t873 + t1140 * t796, qJ(1) * t671 + t1136 * t558 + t1140 * t539, qJ(1) * t682 + t1136 * t563 + t1140 * t543, qJ(1) * t633 + t1136 * t532 + t1140 * t522, qJ(1) * t542 + t1136 * t495 + t1140 * t489, t1136 * t686 + t1140 * t625, t1136 * t613 + t1140 * t580, t1136 * t668 + t1140 * t609, t1136 * t685 + t1140 * t624, t1136 * t669 + t1140 * t610, t1136 * t729 + t1140 * t680, qJ(1) * t562 + t1136 * t491 + t1140 * t481, qJ(1) * t577 + t1136 * t494 + t1140 * t485, qJ(1) * t534 + t1136 * t476 + t1140 * t464, qJ(1) * t473 + t1136 * t453 + t1140 * t451, t1136 * t593 + t1140 * t547, t1136 * t540 + t1140 * t514, t1136 * t555 + t1140 * t524, t1136 * t592 + t1140 * t546, t1136 * t556 + t1140 * t525, t1136 * t603 + t1140 * t566, qJ(1) * t501 + t1136 * t460 + t1140 * t454, qJ(1) * t503 + t1136 * t461 + t1140 * t456, qJ(1) * t493 + t1136 * t459 + t1140 * t452, qJ(1) * t458 + t1136 * t448 + t1140 * t447; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1287, t1279, 0, 0, 0, 0, t1103, 0, t1104, t1142 * qJDD(2), pkin(1) * t1106 - t1142 * t1056 + (-pkin(8) * t1201 + t1192) * t1138, -pkin(1) * t1105 - t1142 * t1057 + (-pkin(8) * t1118 - t1193) * t1138, t1365, pkin(1) * t966 + pkin(8) * t1365, t1142 * t1035 + t1138 * t1209, t1138 * t1218 + t1142 * t981, t1142 * t1000 + t1138 * t1213, t1142 * t1034 + t1138 * t1210, t1142 * t1001 + t1138 * t1212, t1138 * t1327 + (-t1138 * t1312 + t1141 * t1142) * t1127, pkin(1) * t898 + t1138 * t1176 + t1142 * t845, pkin(1) * t890 + t1138 * t1177 + t1142 * t837, pkin(1) * t871 + t1138 * t1178 + t1142 * t800, pkin(1) * t705 + t1138 * t1179 + t1142 * t771, t1138 * t1221 + t1142 * t884, t1138 * t1228 + t1142 * t809, t1138 * t1224 + t1142 * t863, t1138 * t1222 + t1142 * t883, t1138 * t1223 + t1142 * t864, t1138 * t1220 + t1142 * t934, pkin(1) * t718 + t1138 * t1181 + t1142 * t646, pkin(1) * t728 + t1138 * t1180 + t1142 * t649, pkin(1) * t696 + t1138 * t1182 + t1142 * t604, pkin(1) * t586 + t1138 * t1183 + t1142 * t567, t1138 * t1231 + t1142 * t724, t1138 * t1238 + t1142 * t662, t1138 * t1234 + t1142 * t713, t1138 * t1232 + t1142 * t723, t1138 * t1233 + t1142 * t714, t1138 * t1230 + t1142 * t776, pkin(1) * t602 + t1138 * t1185 + t1142 * t529, pkin(1) * t607 + t1138 * t1184 + t1142 * t536, pkin(1) * t579 + t1138 * t1186 + t1142 * t498, pkin(1) * t488 + t1138 * t1189 + t1142 * t470, t1138 * t1241 + t1142 * t621, t1138 * t1247 + t1142 * t583, t1138 * t1244 + t1142 * t597, t1138 * t1242 + t1142 * t620, t1138 * t1243 + t1142 * t598, t1138 * t1240 + t1142 * t644, pkin(1) * t519 + t1138 * t1188 + t1142 * t474, pkin(1) * t521 + t1138 * t1187 + t1142 * t477, pkin(1) * t513 + t1138 * t1190 + t1142 * t465, pkin(1) * t463 + t1138 * t1191 + t1142 * t449;];
tauB_reg  = t1;
