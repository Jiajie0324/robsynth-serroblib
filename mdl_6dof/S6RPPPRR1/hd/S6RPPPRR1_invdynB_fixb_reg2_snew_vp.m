% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:32:27
% EndTime: 2019-05-05 13:32:37
% DurationCPUTime: 6.25s
% Computational Cost: add. (16245->461), mult. (29689->642), div. (0->0), fcn. (16524->8), ass. (0->308)
t451 = sin(pkin(9));
t448 = g(3) - qJDD(2);
t461 = qJD(1) ^ 2;
t476 = -pkin(3) * t461 + t448;
t452 = cos(pkin(9));
t495 = t452 * qJDD(1);
t412 = t451 * t461 - t495;
t534 = qJ(2) * t412;
t347 = -pkin(3) * t495 - t451 * t476 + t534;
t456 = sin(qJ(1));
t459 = cos(qJ(1));
t498 = qJDD(1) * t451;
t411 = t452 * t461 + t498;
t398 = qJ(2) * t411;
t546 = -pkin(3) * t498 + t452 * t476 - t398;
t484 = t459 * t411 - t412 * t456;
t568 = pkin(6) * t484;
t571 = t347 * t456 + t459 * t546 - t568;
t378 = -t448 * t451 + t534;
t544 = t452 * t448 - t398;
t570 = t378 * t456 + t459 * t544 - t568;
t482 = t411 * t456 + t459 * t412;
t554 = pkin(6) * t482;
t569 = -t378 * t459 + t456 * t544 - t554;
t423 = g(1) * t459 + g(2) * t456;
t405 = -pkin(1) * t461 - t423;
t422 = g(1) * t456 - t459 * g(2);
t468 = qJDD(1) * pkin(1) + t422;
t341 = t451 * t405 - t452 * t468;
t342 = t452 * t405 + t451 * t468;
t485 = t341 * t451 + t452 * t342;
t284 = t341 * t452 - t342 * t451;
t532 = t284 * t459;
t565 = -t456 * t485 + t532;
t533 = t284 * t456;
t237 = t459 * t485 + t533;
t454 = sin(qJ(6));
t457 = cos(qJ(6));
t458 = cos(qJ(5));
t503 = qJD(1) * t458;
t399 = -t457 * qJD(5) + t454 * t503;
t401 = qJD(5) * t454 + t457 * t503;
t361 = t401 * t399;
t501 = qJD(1) * qJD(5);
t489 = t458 * t501;
t455 = sin(qJ(5));
t497 = qJDD(1) * t455;
t408 = -t489 - t497;
t464 = qJDD(6) - t408;
t547 = -t361 + t464;
t561 = t454 * t547;
t560 = t457 * t547;
t450 = qJDD(1) * pkin(2);
t469 = qJDD(3) + t341;
t324 = -t461 * qJ(3) - t450 + t469;
t444 = qJDD(1) * qJ(4);
t465 = -t324 + t444;
t500 = qJD(4) * qJD(1);
t314 = -t465 - 0.2e1 * t500;
t470 = 0.2e1 * qJD(3) * qJD(1) + t342;
t536 = pkin(2) + qJ(4);
t463 = -t461 * t536 + qJDD(4) + t470;
t499 = qJDD(1) * qJ(3);
t315 = t463 + t499;
t259 = t314 * t452 - t315 * t451;
t487 = t314 * t451 + t452 * t315;
t213 = t259 * t456 + t459 * t487;
t559 = t259 * t459 - t456 * t487;
t323 = -t461 * pkin(2) + t470 + t499;
t271 = t323 * t451 - t324 * t452;
t486 = t452 * t323 + t324 * t451;
t219 = -t271 * t456 + t459 * t486;
t218 = t271 * t459 + t456 * t486;
t555 = -t347 * t459 + t456 * t546 - t554;
t403 = pkin(1) * t412;
t545 = -0.2e1 * t450 + t469 + t403;
t504 = qJD(1) * t455;
t429 = qJD(6) + t504;
t383 = t429 * t399;
t490 = t455 * t501;
t496 = qJDD(1) * t458;
t409 = -t490 + t496;
t491 = t399 * qJD(6) - t454 * qJDD(5) - t457 * t409;
t305 = t491 + t383;
t480 = -t457 * qJDD(5) + t454 * t409;
t301 = (qJD(6) - t429) * t401 + t480;
t394 = t399 ^ 2;
t395 = t401 ^ 2;
t428 = t429 ^ 2;
t542 = pkin(3) + pkin(4);
t402 = pkin(1) * t411;
t541 = pkin(1) * t448;
t540 = pkin(5) * t455;
t537 = t461 * pkin(7);
t535 = pkin(7) - qJ(3);
t327 = t361 + t464;
t531 = t327 * t454;
t530 = t327 * t457;
t492 = t455 * t458 * t461;
t420 = qJDD(5) + t492;
t521 = t420 * t455;
t520 = t420 * t458;
t421 = qJDD(5) - t492;
t519 = t421 * t455;
t518 = t421 * t458;
t517 = t429 * t454;
t516 = t429 * t457;
t446 = t455 ^ 2;
t515 = t446 * t461;
t447 = t458 ^ 2;
t514 = t447 * t461;
t474 = -pkin(8) * t458 + t540;
t406 = t474 * qJD(1);
t460 = qJD(5) ^ 2;
t462 = -qJDD(1) * t535 + t463;
t488 = t455 * t448 + t458 * t462;
t275 = -qJDD(5) * pkin(5) - t460 * pkin(8) + t406 * t503 - t488;
t512 = t454 * t275;
t311 = t314 + t537;
t511 = t455 * t311;
t510 = t457 * t275;
t509 = t458 * t311;
t442 = 0.2e1 * t500;
t471 = -t409 + t490;
t472 = -t408 + t489;
t269 = pkin(5) * t472 + pkin(8) * t471 + t442 + t465 - t537;
t506 = t458 * t448 - t455 * t462;
t276 = -pkin(5) * t460 + qJDD(5) * pkin(8) - t406 * t504 - t506;
t224 = t454 * t269 + t457 * t276;
t505 = t446 + t447;
t494 = t455 * t361;
t493 = t458 * t361;
t223 = -t457 * t269 + t276 * t454;
t194 = t454 * t223 + t457 * t224;
t248 = -t455 * t488 - t458 * t506;
t363 = -t422 * t456 - t459 * t423;
t479 = -pkin(5) * t458 - t542;
t478 = t451 * t492;
t477 = t452 * t492;
t415 = qJDD(1) * t459 - t456 * t461;
t473 = -pkin(6) * t415 - g(3) * t456;
t193 = -t223 * t457 + t224 * t454;
t247 = -t455 * t506 + t458 * t488;
t362 = t422 * t459 - t423 * t456;
t466 = t402 + 0.2e1 * t499 + t470;
t427 = -t460 - t514;
t426 = t460 - t514;
t425 = -t460 - t515;
t424 = -t460 + t515;
t417 = (-t446 + t447) * t461;
t416 = t505 * t461;
t414 = qJDD(1) * t456 + t459 * t461;
t413 = t505 * qJDD(1);
t410 = -0.2e1 * t490 + t496;
t407 = 0.2e1 * t489 + t497;
t397 = t505 * t501;
t384 = -pkin(6) * t414 + g(3) * t459;
t376 = -t395 + t428;
t375 = t394 - t428;
t374 = t408 * t458 + t446 * t501;
t373 = t409 * t455 + t447 * t501;
t372 = -qJDD(5) * t451 - t397 * t452;
t371 = qJDD(5) * t452 - t397 * t451;
t370 = -t427 * t455 - t520;
t369 = t424 * t455 + t520;
t368 = t426 * t458 + t519;
t367 = t425 * t458 - t519;
t366 = t427 * t458 - t521;
t365 = t425 * t455 + t518;
t364 = t542 * t413;
t360 = -t395 + t394;
t359 = -t395 - t428;
t358 = -t413 * t452 + t416 * t451;
t357 = -t413 * t451 - t416 * t452;
t345 = -t407 * t455 + t410 * t458;
t340 = -t428 - t394;
t338 = -qJD(6) * t401 - t480;
t336 = t374 * t452 + t478;
t335 = t373 * t452 - t478;
t334 = t374 * t451 - t477;
t333 = t373 * t451 + t477;
t332 = t369 * t452 + t451 * t497;
t331 = t368 * t452 - t451 * t496;
t330 = t369 * t451 - t455 * t495;
t329 = t368 * t451 + t458 * t495;
t325 = t394 + t395;
t322 = t366 * t452 - t410 * t451;
t321 = t365 * t452 - t407 * t451;
t320 = t366 * t451 + t410 * t452;
t319 = t365 * t451 + t407 * t452;
t317 = (-t399 * t457 + t401 * t454) * t429;
t316 = (-t399 * t454 - t401 * t457) * t429;
t313 = t345 * t452 - t417 * t451;
t312 = t345 * t451 + t417 * t452;
t307 = pkin(3) * t314 + qJ(3) * t448;
t306 = -t383 + t491;
t302 = (-qJD(6) - t429) * t401 - t480;
t300 = pkin(3) * t315 + t448 * t536;
t297 = -t401 * t517 - t457 * t491;
t296 = t401 * t516 - t454 * t491;
t295 = -t338 * t454 + t399 * t516;
t294 = t338 * t457 + t399 * t517;
t292 = -t357 * t456 + t358 * t459;
t291 = t357 * t459 + t358 * t456;
t290 = t317 * t455 - t458 * t464;
t289 = t375 * t457 - t531;
t288 = -t376 * t454 + t560;
t287 = t375 * t454 + t530;
t286 = t376 * t457 + t561;
t281 = -t359 * t454 - t530;
t280 = t359 * t457 - t531;
t279 = qJ(2) * t485 + t541;
t278 = t340 * t457 - t561;
t277 = t340 * t454 + t560;
t266 = t295 * t455 + t493;
t265 = t297 * t455 - t493;
t264 = -t320 * t456 + t322 * t459;
t263 = -t319 * t456 + t321 * t459;
t262 = t320 * t459 + t322 * t456;
t261 = t319 * t459 + t321 * t456;
t256 = -qJ(2) * t271 + (-pkin(2) * t451 + qJ(3) * t452) * t448;
t255 = qJ(2) * t486 + (pkin(2) * t452 + qJ(3) * t451 + pkin(1)) * t448;
t254 = -t301 * t457 - t306 * t454;
t253 = t302 * t457 + t305 * t454;
t252 = -t301 * t454 + t306 * t457;
t251 = t302 * t454 - t305 * t457;
t250 = t290 * t452 - t316 * t451;
t249 = t290 * t451 + t316 * t452;
t246 = t288 * t455 + t306 * t458;
t245 = t289 * t455 + t301 * t458;
t244 = t370 * t535 - t410 * t542 - t511;
t243 = t367 * t535 - t407 * t542 + t509;
t242 = t281 * t458 - t305 * t455;
t241 = t281 * t455 + t305 * t458;
t240 = t278 * t458 - t302 * t455;
t239 = t278 * t455 + t302 * t458;
t238 = t416 * t542 + t248;
t235 = t253 * t455 + t360 * t458;
t234 = -pkin(8) * t280 + t510;
t233 = t366 * t542 - t370 * t536 + t506;
t232 = t365 * t542 - t367 * t536 + t488;
t231 = t266 * t452 - t294 * t451;
t230 = t265 * t452 - t296 * t451;
t229 = t266 * t451 + t294 * t452;
t228 = t265 * t451 + t296 * t452;
t227 = t254 * t458 - t325 * t455;
t226 = t254 * t455 + t325 * t458;
t225 = -pkin(8) * t277 + t512;
t221 = t247 * t452 + t311 * t451;
t220 = t247 * t451 - t311 * t452;
t217 = t246 * t452 - t286 * t451;
t216 = t245 * t452 - t287 * t451;
t215 = t246 * t451 + t286 * t452;
t214 = t245 * t451 + t287 * t452;
t211 = -qJ(2) * t357 + t238 * t452 + t364 * t451;
t210 = qJ(2) * t358 + t238 * t451 - t364 * t452;
t209 = t241 * t452 - t280 * t451;
t208 = t241 * t451 + t280 * t452;
t207 = qJ(2) * t259 - t300 * t451 + t307 * t452;
t206 = qJ(2) * t487 + t300 * t452 + t307 * t451 + t541;
t205 = t239 * t452 - t277 * t451;
t204 = t239 * t451 + t277 * t452;
t203 = -pkin(5) * t280 + t224;
t202 = -pkin(5) * t277 + t223;
t201 = t235 * t452 - t251 * t451;
t200 = t235 * t451 + t251 * t452;
t199 = t226 * t452 - t252 * t451;
t198 = t226 * t451 + t252 * t452;
t197 = -qJ(2) * t320 - t233 * t451 + t244 * t452;
t196 = -qJ(2) * t319 - t232 * t451 + t243 * t452;
t195 = t248 * t535 + t311 * t542;
t192 = -pkin(1) * t370 + qJ(2) * t322 + t233 * t452 + t244 * t451;
t191 = -pkin(1) * t367 + qJ(2) * t321 + t232 * t452 + t243 * t451;
t190 = -t220 * t456 + t221 * t459;
t189 = t220 * t459 + t221 * t456;
t188 = -t208 * t456 + t209 * t459;
t187 = t208 * t459 + t209 * t456;
t186 = t194 * t458 + t275 * t455;
t185 = t194 * t455 - t275 * t458;
t184 = -t204 * t456 + t205 * t459;
t183 = t204 * t459 + t205 * t456;
t182 = -pkin(8) * t252 - t193;
t181 = t247 * t542 - t248 * t536;
t180 = -t198 * t456 + t199 * t459;
t179 = t198 * t459 + t199 * t456;
t178 = pkin(5) * t305 + pkin(8) * t281 + t241 * t542 - t242 * t536 + t512;
t177 = pkin(5) * t302 + pkin(8) * t278 + t239 * t542 - t240 * t536 - t510;
t176 = t185 * t452 - t193 * t451;
t175 = t185 * t451 + t193 * t452;
t174 = t458 * t203 + t455 * t234 + t242 * t535 - t280 * t542;
t173 = t458 * t202 + t455 * t225 + t240 * t535 - t277 * t542;
t172 = -qJ(2) * t220 - t181 * t451 + t195 * t452;
t171 = t455 * t182 + t227 * t535 + t252 * t479;
t170 = pkin(5) * t325 + pkin(8) * t254 + t226 * t542 - t227 * t536 + t194;
t169 = -pkin(1) * t248 + qJ(2) * t221 + t181 * t452 + t195 * t451;
t168 = -t175 * t456 + t176 * t459;
t167 = t175 * t459 + t176 * t456;
t166 = -qJ(2) * t208 + t174 * t452 - t178 * t451;
t165 = -qJ(2) * t204 + t173 * t452 - t177 * t451;
t164 = -pkin(1) * t242 + qJ(2) * t209 + t174 * t451 + t178 * t452;
t163 = -pkin(1) * t240 + qJ(2) * t205 + t173 * t451 + t177 * t452;
t162 = -pkin(5) * t275 + pkin(8) * t194 + t185 * t542 - t186 * t536;
t161 = t535 * t186 + (-pkin(8) * t455 + t479) * t193;
t160 = -qJ(2) * t198 - t170 * t451 + t171 * t452;
t159 = -pkin(1) * t227 + qJ(2) * t199 + t170 * t452 + t171 * t451;
t158 = -qJ(2) * t175 + t161 * t452 - t162 * t451;
t157 = -pkin(1) * t186 + qJ(2) * t176 + t161 * t451 + t162 * t452;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t414, -t415, 0, t363, 0, 0, 0, 0, 0, 0, -t484, t482, 0, t237, 0, 0, 0, 0, 0, 0, 0, t484, -t482, t219, 0, 0, 0, 0, 0, 0, 0, -t482, -t484, t213, 0, 0, 0, 0, 0, 0, t263, t264, t292, t190, 0, 0, 0, 0, 0, 0, t184, t188, t180, t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t415, -t414, 0, t362, 0, 0, 0, 0, 0, 0, -t482, -t484, 0, -t565, 0, 0, 0, 0, 0, 0, 0, t482, t484, t218, 0, 0, 0, 0, 0, 0, 0, t484, -t482, -t559, 0, 0, 0, 0, 0, 0, t261, t262, t291, t189, 0, 0, 0, 0, 0, 0, t183, t187, t179, t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, 0, 0, 0, 0, 0, 0, t367, t370, 0, t248, 0, 0, 0, 0, 0, 0, t240, t242, t227, t186; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t415, 0, -t414, 0, t473, -t384, -t362, -pkin(6) * t362, 0, 0, -t482, 0, -t484, 0, -t569, -t570, t565, pkin(6) * t565 + qJ(2) * t532 - t279 * t456, 0, t482, t484, 0, 0, 0, -t218, t569, t570, -pkin(6) * t218 - t255 * t456 + t256 * t459, 0, t484, -t482, 0, 0, 0, t559, t571, -t555, pkin(6) * t559 - t206 * t456 + t207 * t459, -t333 * t456 + t335 * t459, -t312 * t456 + t313 * t459, -t329 * t456 + t331 * t459, -t334 * t456 + t336 * t459, -t330 * t456 + t332 * t459, -t371 * t456 + t372 * t459, -pkin(6) * t261 - t191 * t456 + t196 * t459, -pkin(6) * t262 - t192 * t456 + t197 * t459, -pkin(6) * t291 - t210 * t456 + t211 * t459, -pkin(6) * t189 - t169 * t456 + t172 * t459, -t228 * t456 + t230 * t459, -t200 * t456 + t201 * t459, -t215 * t456 + t217 * t459, -t229 * t456 + t231 * t459, -t214 * t456 + t216 * t459, -t249 * t456 + t250 * t459, -pkin(6) * t183 - t163 * t456 + t165 * t459, -pkin(6) * t187 - t164 * t456 + t166 * t459, -pkin(6) * t179 - t159 * t456 + t160 * t459, -pkin(6) * t167 - t157 * t456 + t158 * t459; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t414, 0, t415, 0, t384, t473, t363, pkin(6) * t363, 0, 0, t484, 0, -t482, 0, t570, -t569, t237, pkin(6) * t237 + qJ(2) * t533 + t279 * t459, 0, -t484, t482, 0, 0, 0, t219, -t570, t569, pkin(6) * t219 + t255 * t459 + t256 * t456, 0, t482, t484, 0, 0, 0, t213, t555, t571, pkin(6) * t213 + t206 * t459 + t207 * t456, t333 * t459 + t335 * t456, t312 * t459 + t313 * t456, t329 * t459 + t331 * t456, t334 * t459 + t336 * t456, t330 * t459 + t332 * t456, t371 * t459 + t372 * t456, pkin(6) * t263 + t191 * t459 + t196 * t456, pkin(6) * t264 + t192 * t459 + t197 * t456, pkin(6) * t292 + t210 * t459 + t211 * t456, pkin(6) * t190 + t169 * t459 + t172 * t456, t228 * t459 + t230 * t456, t200 * t459 + t201 * t456, t215 * t459 + t217 * t456, t229 * t459 + t231 * t456, t214 * t459 + t216 * t456, t249 * t459 + t250 * t456, pkin(6) * t184 + t163 * t459 + t165 * t456, pkin(6) * t188 + t164 * t459 + t166 * t456, pkin(6) * t180 + t159 * t459 + t160 * t456, pkin(6) * t168 + t157 * t459 + t158 * t456; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t422, t423, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t341 - t403, -t342 - t402, 0, -pkin(1) * t284, qJDD(1), 0, 0, 0, 0, 0, 0, t545, t466, pkin(1) * t271 - pkin(2) * t324 + qJ(3) * t323, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(4) + t466, t442 + 0.2e1 * t444 - t545, -pkin(1) * t259 + qJ(3) * t315 - t314 * t536, -t471 * t458, -t407 * t458 - t410 * t455, -t426 * t455 + t518, t472 * t455, t424 * t458 - t521, 0, pkin(1) * t319 - t365 * t535 + t407 * t536 - t511, pkin(1) * t320 - t366 * t535 + t410 * t536 - t509, pkin(1) * t357 + t413 * t535 - t416 * t536 - t247, pkin(1) * t220 - t247 * t535 - t311 * t536, t297 * t458 + t494, t253 * t458 - t360 * t455, t288 * t458 - t306 * t455, t295 * t458 - t494, t289 * t458 - t301 * t455, t317 * t458 + t455 * t464, pkin(1) * t204 - t455 * t202 + t458 * t225 - t239 * t535 + t277 * t536, pkin(1) * t208 - t455 * t203 + t458 * t234 - t241 * t535 + t280 * t536, pkin(1) * t198 + t458 * t182 - t535 * t226 + (t536 + t540) * t252, pkin(1) * t175 - t535 * t185 + (t474 + t536) * t193;];
tauB_reg  = t1;
