% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPPRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR1_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:30:24
% EndTime: 2019-03-09 01:30:25
% DurationCPUTime: 0.80s
% Computational Cost: add. (573->89), mult. (1058->177), div. (0->0), fcn. (766->6), ass. (0->73)
t30 = sin(qJ(6));
t25 = t30 ^ 2;
t32 = cos(qJ(6));
t27 = t32 ^ 2;
t72 = t25 + t27;
t19 = cos(pkin(9)) * pkin(1) + pkin(2) + qJ(4);
t33 = cos(qJ(5));
t31 = sin(qJ(5));
t75 = t31 * pkin(5);
t45 = -pkin(8) * t33 + t75;
t39 = t19 + t45;
t21 = sin(pkin(9)) * pkin(1) + qJ(3);
t18 = -pkin(7) + t21;
t62 = t33 * qJD(5);
t52 = t18 * t62;
t63 = t31 * qJD(3);
t42 = -t52 - t63;
t80 = -qJD(6) * t39 + t42;
t76 = pkin(5) * t33;
t46 = pkin(8) * t31 + t76;
t68 = qJD(6) * t31;
t79 = qJD(5) * t46 - t18 * t68 + qJD(4);
t26 = t31 ^ 2;
t28 = t33 ^ 2;
t71 = t26 - t28;
t78 = qJD(5) * t71;
t73 = t25 - t27;
t49 = qJD(6) * t73;
t22 = t31 * qJD(5);
t41 = t33 * qJD(3) - t18 * t22;
t77 = qJD(6) * t46 - t41;
t74 = t18 * t31;
t70 = t26 + t28;
t69 = qJD(6) * t30;
t23 = qJD(6) * t32;
t67 = qJD(6) * t33;
t66 = t19 * qJD(4);
t65 = t21 * qJD(3);
t64 = t28 * qJD(3);
t61 = -0.2e1 * qJD(6) * pkin(5);
t60 = t30 * t74;
t59 = t32 * t74;
t58 = t30 * t67;
t56 = t32 * t67;
t55 = t30 * t23;
t54 = t32 * t22;
t53 = t31 * t62;
t51 = t72 * t31;
t50 = t72 * t33;
t48 = t30 * t54;
t47 = t28 * t55;
t3 = t32 * t39 - t60;
t4 = t30 * t39 + t59;
t44 = t3 * t32 + t30 * t4;
t43 = t3 * t30 - t32 * t4;
t38 = qJD(5) * t45 - t18 * t67;
t1 = -t30 * t79 + t32 * t80;
t2 = t30 * t80 + t32 * t79;
t37 = qJD(6) * t43 + t1 * t30 - t2 * t32;
t36 = -qJD(6) * t44 - t1 * t32 - t2 * t30;
t34 = 0.2e1 * qJD(3);
t24 = qJD(5) * t26;
t17 = 0.2e1 * t53;
t16 = t70 * qJD(3);
t15 = t18 * t64;
t13 = t22 * t30 - t56;
t12 = t23 * t31 + t30 * t62;
t11 = t54 + t58;
t10 = t30 * t68 - t32 * t62;
t9 = qJD(5) * t51;
t6 = t33 * t49 + t48;
t5 = (-0.1e1 + t72) * t53;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0.2e1 * t65, 0, 0, 0, 0, 0, 0, 0, t34, 0.2e1 * qJD(4), 0.2e1 * t65 + 0.2e1 * t66, -0.2e1 * t53, -0.2e1 * t28 * qJD(5) + 0.2e1 * t24, 0, t17, 0, 0, 0.2e1 * qJD(4) * t31 + 0.2e1 * t19 * t62, 0.2e1 * qJD(4) * t33 - 0.2e1 * t19 * t22, -0.2e1 * t16, 0.2e1 * qJD(3) * t18 * t26 + 0.2e1 * t15 + 0.2e1 * t66, -0.2e1 * t27 * t53 - 0.2e1 * t47, 0.2e1 * t28 * t49 + 0.4e1 * t33 * t48, -0.2e1 * t31 * t58 - 0.2e1 * t32 * t78, -0.2e1 * t25 * t53 + 0.2e1 * t47, 0.2e1 * t30 * t78 - 0.2e1 * t31 * t56, t17, 0.2e1 * t2 * t31 + 0.2e1 * (-qJD(3) * t30 - t18 * t23) * t28 + 0.2e1 * (t3 + 0.2e1 * t60) * t62, 0.2e1 * t1 * t31 + 0.2e1 * (-qJD(3) * t32 + t18 * t69) * t28 + 0.2e1 * (-t4 + 0.2e1 * t59) * t62, 0.2e1 * t22 * t44 + 0.2e1 * t33 * t37, -0.2e1 * t18 ^ 2 * t53 - 0.2e1 * t1 * t4 + 0.2e1 * t2 * t3 + 0.2e1 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t18 * t71 + t31 * t43) * qJD(5) + (t36 - t63) * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4), 0, 0, 0, 0, 0, 0, -t62, t22, 0, -qJD(4), 0, 0, 0, 0, 0, 0, t10, t12, -t9, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, -t70 * t23, t70 * t69, 0, t64 - t43 * t62 + (t36 - 0.2e1 * t52) * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 + (-t71 * t72 - t28) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t62, 0, t41, t42, 0, 0, -t6, t22 * t73 - 0.4e1 * t33 * t55, t12, t6, -t10, 0, t30 * t38 - t32 * t77, t30 * t77 + t32 * t38, t36, pkin(5) * t41 + pkin(8) * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, t22, 0, 0, 0, 0, 0, 0, 0, 0, t10, t12, -t9 (-pkin(8) * t51 - t76) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t62, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t13, qJD(5) * t50 (pkin(8) * t50 - t75) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t55, -0.2e1 * t49, 0, -0.2e1 * t55, 0, 0, t30 * t61, t32 * t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, t13, t62, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, t11, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t69, 0, -pkin(8) * t23, pkin(8) * t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
