% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPPPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPPPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:32:48
% EndTime: 2019-05-05 13:32:51
% DurationCPUTime: 2.46s
% Computational Cost: add. (4571->210), mult. (8395->223), div. (0->0), fcn. (4722->8), ass. (0->126)
t1253 = sin(qJ(5));
t1280 = t1253 * qJD(1);
t1232 = qJD(6) + t1280;
t1291 = qJD(6) + t1232;
t1259 = qJD(1) ^ 2;
t1285 = 0.2e1 * qJD(1);
t1290 = -t1259 * pkin(2) + qJD(3) * t1285;
t1248 = sin(pkin(9));
t1249 = cos(pkin(9));
t1220 = t1248 * qJDD(1) + t1249 * t1259;
t1221 = -t1249 * qJDD(1) + t1248 * t1259;
t1254 = sin(qJ(1));
t1257 = cos(qJ(1));
t1267 = t1254 * t1220 + t1257 * t1221;
t1196 = t1257 * t1220 - t1254 * t1221;
t1289 = -t1259 * qJ(4) + qJDD(4);
t1252 = sin(qJ(6));
t1255 = cos(qJ(6));
t1256 = cos(qJ(5));
t1283 = qJD(1) * t1256;
t1212 = -t1255 * qJD(5) + t1252 * t1283;
t1288 = t1212 ^ 2;
t1214 = t1252 * qJD(5) + t1255 * t1283;
t1287 = t1214 ^ 2;
t1286 = t1232 ^ 2;
t1282 = t1214 * t1212;
t1229 = -t1257 * g(1) - t1254 * g(2);
t1215 = -t1259 * pkin(1) + t1229;
t1281 = t1249 * t1215;
t1275 = qJD(6) - t1232;
t1245 = -g(3) + qJDD(2);
t1228 = t1254 * g(1) - t1257 * g(2);
t1260 = t1281 + t1248 * t1228 + (t1248 * pkin(1) - pkin(7) + qJ(3)) * qJDD(1) + t1289 + t1290;
t1173 = t1256 * t1245 + t1253 * t1260;
t1243 = t1253 ^ 2;
t1244 = t1256 ^ 2;
t1274 = t1243 + t1244;
t1273 = t1253 * qJDD(1);
t1272 = t1256 * qJDD(1);
t1270 = qJD(5) * t1280;
t1269 = t1253 * t1259 * t1256;
t1268 = qJD(5) * t1283;
t1172 = -t1253 * t1245 + t1256 * t1260;
t1263 = qJDD(1) * pkin(1) + t1228;
t1193 = -t1248 * t1215 + t1249 * t1263;
t1218 = -t1270 + t1272;
t1265 = t1255 * qJDD(5) - t1252 * t1218;
t1264 = -t1252 * qJDD(5) - t1255 * t1218;
t1217 = 0.2e1 * t1268 + t1273;
t1188 = -qJDD(1) * pkin(2) - t1259 * qJ(3) + qJDD(3) - t1193;
t1262 = -qJDD(6) - t1268 - t1273;
t1261 = qJDD(1) * qJ(4) + qJD(4) * t1285 - t1188;
t1194 = t1248 * t1263 + t1281;
t1180 = t1259 * pkin(7) - t1261;
t1187 = qJDD(1) * qJ(3) + t1194 + t1290;
t1258 = qJD(5) ^ 2;
t1231 = -t1244 * t1259 - t1258;
t1230 = -t1243 * t1259 - t1258;
t1227 = -qJDD(5) - t1269;
t1226 = qJDD(5) - t1269;
t1225 = t1274 * t1259;
t1224 = -t1254 * qJDD(1) - t1257 * t1259;
t1223 = t1257 * qJDD(1) - t1254 * t1259;
t1222 = t1274 * qJDD(1);
t1219 = -0.2e1 * t1270 + t1272;
t1216 = (pkin(5) * t1253 - pkin(8) * t1256) * qJD(1);
t1205 = t1256 * t1227 - t1253 * t1231;
t1204 = -t1253 * t1226 + t1256 * t1230;
t1203 = t1253 * t1227 + t1256 * t1231;
t1202 = t1256 * t1226 + t1253 * t1230;
t1201 = -t1286 - t1287;
t1200 = -t1249 * t1222 + t1248 * t1225;
t1199 = -t1248 * t1222 - t1249 * t1225;
t1192 = -t1286 - t1288;
t1191 = t1262 - t1282;
t1190 = -t1262 - t1282;
t1189 = -t1287 - t1288;
t1186 = t1249 * t1203 - t1248 * t1219;
t1185 = t1249 * t1202 - t1248 * t1217;
t1184 = t1248 * t1203 + t1249 * t1219;
t1183 = t1248 * t1202 + t1249 * t1217;
t1182 = t1187 + t1289;
t1177 = t1275 * t1212 + t1264;
t1176 = -t1212 * t1291 - t1264;
t1175 = -t1275 * t1214 + t1265;
t1174 = t1214 * t1291 - t1265;
t1171 = -t1248 * t1193 + t1249 * t1194;
t1170 = t1249 * t1193 + t1248 * t1194;
t1169 = t1255 * t1191 - t1252 * t1201;
t1168 = t1252 * t1191 + t1255 * t1201;
t1167 = -t1252 * t1190 + t1255 * t1192;
t1166 = t1255 * t1190 + t1252 * t1192;
t1165 = -t1258 * pkin(5) + qJDD(5) * pkin(8) - t1216 * t1280 + t1173;
t1164 = -qJDD(5) * pkin(5) - t1258 * pkin(8) + t1216 * t1283 - t1172;
t1163 = t1249 * t1187 + t1248 * t1188;
t1162 = t1248 * t1187 - t1249 * t1188;
t1161 = (-t1218 + t1270) * pkin(8) + t1217 * pkin(5) - t1180;
t1160 = t1249 * t1182 - t1248 * t1261;
t1159 = t1248 * t1182 + t1249 * t1261;
t1158 = t1255 * t1175 - t1252 * t1177;
t1157 = t1252 * t1175 + t1255 * t1177;
t1156 = -t1253 * t1172 + t1256 * t1173;
t1155 = t1256 * t1172 + t1253 * t1173;
t1154 = t1256 * t1169 + t1253 * t1176;
t1153 = t1253 * t1169 - t1256 * t1176;
t1152 = t1256 * t1167 + t1253 * t1174;
t1151 = t1253 * t1167 - t1256 * t1174;
t1150 = t1256 * t1158 + t1253 * t1189;
t1149 = t1253 * t1158 - t1256 * t1189;
t1148 = t1252 * t1161 + t1255 * t1165;
t1147 = t1255 * t1161 - t1252 * t1165;
t1146 = t1249 * t1155 + t1248 * t1180;
t1145 = t1248 * t1155 - t1249 * t1180;
t1144 = t1249 * t1153 - t1248 * t1168;
t1143 = t1248 * t1153 + t1249 * t1168;
t1142 = t1249 * t1151 - t1248 * t1166;
t1141 = t1248 * t1151 + t1249 * t1166;
t1140 = t1249 * t1149 - t1248 * t1157;
t1139 = t1248 * t1149 + t1249 * t1157;
t1138 = -t1252 * t1147 + t1255 * t1148;
t1137 = t1255 * t1147 + t1252 * t1148;
t1136 = t1256 * t1138 + t1253 * t1164;
t1135 = t1253 * t1138 - t1256 * t1164;
t1134 = t1249 * t1135 - t1248 * t1137;
t1133 = t1248 * t1135 + t1249 * t1137;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1224, -t1223, 0, -t1254 * t1228 + t1257 * t1229, 0, 0, 0, 0, 0, 0, -t1196, t1267, 0, -t1254 * t1170 + t1257 * t1171, 0, 0, 0, 0, 0, 0, 0, t1196, -t1267, -t1254 * t1162 + t1257 * t1163, 0, 0, 0, 0, 0, 0, 0, -t1267, -t1196, -t1254 * t1159 + t1257 * t1160, 0, 0, 0, 0, 0, 0, -t1254 * t1183 + t1257 * t1185, -t1254 * t1184 + t1257 * t1186, -t1254 * t1199 + t1257 * t1200, -t1254 * t1145 + t1257 * t1146, 0, 0, 0, 0, 0, 0, -t1254 * t1141 + t1257 * t1142, -t1254 * t1143 + t1257 * t1144, -t1254 * t1139 + t1257 * t1140, -t1254 * t1133 + t1257 * t1134; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1223, t1224, 0, t1257 * t1228 + t1254 * t1229, 0, 0, 0, 0, 0, 0, -t1267, -t1196, 0, t1257 * t1170 + t1254 * t1171, 0, 0, 0, 0, 0, 0, 0, t1267, t1196, t1257 * t1162 + t1254 * t1163, 0, 0, 0, 0, 0, 0, 0, t1196, -t1267, t1257 * t1159 + t1254 * t1160, 0, 0, 0, 0, 0, 0, t1257 * t1183 + t1254 * t1185, t1257 * t1184 + t1254 * t1186, t1257 * t1199 + t1254 * t1200, t1257 * t1145 + t1254 * t1146, 0, 0, 0, 0, 0, 0, t1257 * t1141 + t1254 * t1142, t1257 * t1143 + t1254 * t1144, t1257 * t1139 + t1254 * t1140, t1257 * t1133 + t1254 * t1134; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1156, 0, 0, 0, 0, 0, 0, t1152, t1154, t1150, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -qJDD(1), 0, t1229, 0, 0, 0, 0, 0, 0, -t1220, t1221, 0, t1171, 0, 0, 0, 0, 0, 0, 0, t1220, -t1221, t1163, 0, 0, 0, 0, 0, 0, 0, -t1221, -t1220, t1160, 0, 0, 0, 0, 0, 0, t1185, t1186, t1200, t1146, 0, 0, 0, 0, 0, 0, t1142, t1144, t1140, t1134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1259, 0, t1228, 0, 0, 0, 0, 0, 0, -t1221, -t1220, 0, t1170, 0, 0, 0, 0, 0, 0, 0, t1221, t1220, t1162, 0, 0, 0, 0, 0, 0, 0, t1220, -t1221, t1159, 0, 0, 0, 0, 0, 0, t1183, t1184, t1199, t1145, 0, 0, 0, 0, 0, 0, t1141, t1143, t1139, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1156, 0, 0, 0, 0, 0, 0, t1152, t1154, t1150, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -qJDD(1), 0, t1194, 0, 0, 0, 0, 0, 0, 0, t1259, qJDD(1), t1187, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1259, t1182, 0, 0, 0, 0, 0, 0, t1202, t1203, -t1222, t1155, 0, 0, 0, 0, 0, 0, t1151, t1153, t1149, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1259, 0, t1193, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1259, -t1188, 0, 0, 0, 0, 0, 0, 0, t1259, qJDD(1), t1261, 0, 0, 0, 0, 0, 0, t1217, t1219, -t1225, -t1180, 0, 0, 0, 0, 0, 0, t1166, t1168, t1157, t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1156, 0, 0, 0, 0, 0, 0, t1152, t1154, t1150, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1156, 0, 0, 0, 0, 0, 0, t1152, t1154, t1150, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -qJDD(1), -t1187, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1259, -t1182, 0, 0, 0, 0, 0, 0, -t1202, -t1203, t1222, -t1155, 0, 0, 0, 0, 0, 0, -t1151, -t1153, -t1149, -t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1259, t1188, 0, 0, 0, 0, 0, 0, 0, -t1259, -qJDD(1), -t1261, 0, 0, 0, 0, 0, 0, -t1217, -t1219, t1225, t1180, 0, 0, 0, 0, 0, 0, -t1166, -t1168, -t1157, -t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1156, 0, 0, 0, 0, 0, 0, t1152, t1154, t1150, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -qJDD(1), -t1261, 0, 0, 0, 0, 0, 0, -t1217, -t1219, t1225, t1180, 0, 0, 0, 0, 0, 0, -t1166, -t1168, -t1157, -t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1259, t1182, 0, 0, 0, 0, 0, 0, t1202, t1203, -t1222, t1155, 0, 0, 0, 0, 0, 0, t1151, t1153, t1149, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1230, t1227, -t1273, t1173, 0, 0, 0, 0, 0, 0, t1167, t1169, t1158, t1138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1226, t1231, -t1272, t1172, 0, 0, 0, 0, 0, 0, -t1174, -t1176, -t1189, -t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1217, t1219, -t1225, -t1180, 0, 0, 0, 0, 0, 0, t1166, t1168, t1157, t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1192, t1191, t1175, t1148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1190, t1201, t1177, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1174, t1176, t1189, t1164;];
f_new_reg  = t1;
