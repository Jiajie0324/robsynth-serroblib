% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPPPRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:46:51
% EndTime: 2019-05-05 13:46:54
% DurationCPUTime: 2.45s
% Computational Cost: add. (5695->239), mult. (10019->224), div. (0->0), fcn. (5006->8), ass. (0->128)
t1159 = sin(pkin(9));
t1160 = cos(pkin(9));
t1169 = qJD(1) ^ 2;
t1130 = -t1159 * qJDD(1) + t1160 * t1169;
t1131 = qJDD(1) * t1160 + t1159 * t1169;
t1164 = sin(qJ(1));
t1167 = cos(qJ(1));
t1182 = -t1130 * t1164 + t1167 * t1131;
t1183 = t1167 * t1130 + t1131 * t1164;
t1162 = sin(qJ(6));
t1165 = cos(qJ(6));
t1166 = cos(qJ(5));
t1197 = qJD(1) * t1166;
t1123 = qJD(5) * t1165 + t1162 * t1197;
t1204 = t1123 ^ 2;
t1124 = -t1162 * qJD(5) + t1165 * t1197;
t1203 = t1124 ^ 2;
t1163 = sin(qJ(5));
t1198 = qJD(1) * t1163;
t1141 = -qJD(6) + t1198;
t1202 = t1141 ^ 2;
t1201 = -2 * qJD(4);
t1200 = -pkin(1) - pkin(2);
t1199 = t1169 * pkin(7);
t1196 = t1123 * t1124;
t1191 = qJD(6) - t1141;
t1190 = qJD(6) + t1141;
t1139 = -t1167 * g(1) - t1164 * g(2);
t1171 = qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t1139;
t1114 = t1169 * t1200 + t1171;
t1138 = t1164 * g(1) - t1167 * g(2);
t1170 = -t1169 * qJ(2) + qJDD(2) - t1138;
t1115 = qJDD(1) * t1200 + t1170;
t1094 = t1160 * t1114 + t1159 * t1115;
t1093 = -t1159 * t1114 + t1160 * t1115;
t1172 = -t1169 * qJ(4) + qJDD(4) - t1093;
t1084 = (pkin(3) + pkin(7)) * qJDD(1) + t1172;
t1158 = g(3) + qJDD(3);
t1080 = t1163 * t1084 + t1166 * t1158;
t1156 = t1163 ^ 2;
t1157 = t1166 ^ 2;
t1189 = t1156 + t1157;
t1188 = t1163 * qJDD(1);
t1187 = t1166 * qJDD(1);
t1186 = qJD(5) * t1198;
t1185 = t1163 * t1166 * t1169;
t1184 = t1166 * t1084 - t1158 * t1163;
t1129 = t1186 - t1187;
t1179 = t1165 * qJDD(5) - t1162 * t1129;
t1168 = qJD(5) ^ 2;
t1178 = -t1157 * t1169 - t1168;
t1146 = qJD(5) * t1197;
t1177 = t1146 + t1188;
t1176 = -t1169 * pkin(3) - qJDD(1) * qJ(4) + t1094;
t1175 = qJDD(5) - t1185;
t1174 = qJDD(6) - t1177;
t1173 = -t1162 * qJDD(5) - t1165 * t1129;
t1085 = qJD(1) * t1201 + t1176;
t1140 = -t1156 * t1169 - t1168;
t1137 = -qJDD(5) - t1185;
t1136 = t1189 * t1169;
t1135 = qJDD(1) * t1167 - t1164 * t1169;
t1134 = qJDD(1) * t1164 + t1167 * t1169;
t1133 = t1189 * qJDD(1);
t1128 = -0.2e1 * t1186 + t1187;
t1127 = 0.2e1 * t1146 + t1188;
t1126 = (-pkin(5) * t1163 + pkin(8) * t1166) * qJD(1);
t1117 = qJDD(1) * pkin(1) - t1170;
t1116 = -pkin(1) * t1169 + t1171;
t1111 = t1166 * t1137 - t1163 * t1178;
t1110 = t1166 * t1140 - t1163 * t1175;
t1109 = t1163 * t1137 + t1166 * t1178;
t1108 = t1163 * t1140 + t1166 * t1175;
t1106 = -t1202 - t1203;
t1105 = t1133 * t1159 - t1136 * t1160;
t1104 = -t1133 * t1160 - t1136 * t1159;
t1103 = -t1202 - t1204;
t1102 = t1174 - t1196;
t1101 = -t1174 - t1196;
t1100 = -t1203 - t1204;
t1098 = t1109 * t1159 - t1128 * t1160;
t1097 = t1108 * t1159 - t1127 * t1160;
t1096 = -t1109 * t1160 - t1128 * t1159;
t1095 = -t1108 * t1160 - t1127 * t1159;
t1092 = -t1123 * t1190 + t1173;
t1091 = t1123 * t1191 - t1173;
t1090 = t1124 * t1190 + t1179;
t1089 = -t1124 * t1191 - t1179;
t1088 = qJDD(1) * pkin(3) + t1172;
t1083 = t1085 - t1199;
t1078 = t1101 * t1165 - t1106 * t1162;
t1077 = t1101 * t1162 + t1106 * t1165;
t1076 = -t1102 * t1162 + t1103 * t1165;
t1075 = t1102 * t1165 + t1103 * t1162;
t1074 = -pkin(5) * t1168 + qJDD(5) * pkin(8) + t1126 * t1198 + t1080;
t1073 = -qJDD(5) * pkin(5) - pkin(8) * t1168 - t1126 * t1197 - t1184;
t1071 = -t1199 - t1129 * pkin(8) - t1177 * pkin(5) + (t1201 + (-pkin(5) * t1166 - pkin(8) * t1163) * qJD(5)) * qJD(1) + t1176;
t1070 = -t1093 * t1159 + t1094 * t1160;
t1069 = t1093 * t1160 + t1094 * t1159;
t1068 = t1090 * t1165 - t1092 * t1162;
t1067 = t1090 * t1162 + t1092 * t1165;
t1066 = t1085 * t1160 + t1088 * t1159;
t1065 = t1085 * t1159 - t1088 * t1160;
t1064 = t1078 * t1166 + t1163 * t1091;
t1063 = t1078 * t1163 - t1091 * t1166;
t1062 = t1076 * t1166 + t1163 * t1089;
t1061 = t1076 * t1163 - t1089 * t1166;
t1060 = t1166 * t1080 - t1163 * t1184;
t1059 = t1163 * t1080 + t1166 * t1184;
t1058 = t1068 * t1166 + t1163 * t1100;
t1057 = t1068 * t1163 - t1100 * t1166;
t1056 = t1071 * t1162 + t1074 * t1165;
t1055 = t1071 * t1165 - t1074 * t1162;
t1054 = t1063 * t1159 + t1077 * t1160;
t1053 = -t1063 * t1160 + t1077 * t1159;
t1052 = t1059 * t1159 + t1083 * t1160;
t1051 = -t1059 * t1160 + t1083 * t1159;
t1050 = t1061 * t1159 + t1075 * t1160;
t1049 = -t1061 * t1160 + t1075 * t1159;
t1048 = t1057 * t1159 + t1067 * t1160;
t1047 = -t1057 * t1160 + t1067 * t1159;
t1046 = -t1055 * t1162 + t1056 * t1165;
t1045 = t1055 * t1165 + t1056 * t1162;
t1044 = t1046 * t1166 + t1163 * t1073;
t1043 = t1046 * t1163 - t1073 * t1166;
t1042 = t1043 * t1159 + t1045 * t1160;
t1041 = -t1043 * t1160 + t1045 * t1159;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1134, -t1135, 0, -t1138 * t1164 + t1139 * t1167, 0, 0, 0, 0, 0, 0, -t1134, 0, t1135, t1116 * t1167 - t1117 * t1164, 0, 0, 0, 0, 0, 0, -t1183, t1182, 0, t1069 * t1164 + t1070 * t1167, 0, 0, 0, 0, 0, 0, 0, t1183, -t1182, t1065 * t1164 + t1066 * t1167, 0, 0, 0, 0, 0, 0, t1095 * t1164 + t1097 * t1167, t1096 * t1164 + t1098 * t1167, t1104 * t1164 + t1105 * t1167, t1051 * t1164 + t1052 * t1167, 0, 0, 0, 0, 0, 0, t1049 * t1164 + t1050 * t1167, t1053 * t1164 + t1054 * t1167, t1047 * t1164 + t1048 * t1167, t1041 * t1164 + t1042 * t1167; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1135, -t1134, 0, t1138 * t1167 + t1139 * t1164, 0, 0, 0, 0, 0, 0, t1135, 0, t1134, t1116 * t1164 + t1117 * t1167, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, -t1069 * t1167 + t1070 * t1164, 0, 0, 0, 0, 0, 0, 0, -t1182, -t1183, -t1065 * t1167 + t1066 * t1164, 0, 0, 0, 0, 0, 0, -t1095 * t1167 + t1097 * t1164, -t1096 * t1167 + t1098 * t1164, -t1104 * t1167 + t1105 * t1164, -t1051 * t1167 + t1052 * t1164, 0, 0, 0, 0, 0, 0, -t1049 * t1167 + t1050 * t1164, -t1053 * t1167 + t1054 * t1164, -t1047 * t1167 + t1048 * t1164, -t1041 * t1167 + t1042 * t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, -t1110, -t1111, 0, -t1060, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1058, -t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, -qJDD(1), 0, t1139, 0, 0, 0, 0, 0, 0, -t1169, 0, qJDD(1), t1116, 0, 0, 0, 0, 0, 0, -t1130, t1131, 0, t1070, 0, 0, 0, 0, 0, 0, 0, t1130, -t1131, t1066, 0, 0, 0, 0, 0, 0, t1097, t1098, t1105, t1052, 0, 0, 0, 0, 0, 0, t1050, t1054, t1048, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1169, 0, t1138, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t1169, t1117, 0, 0, 0, 0, 0, 0, t1131, t1130, 0, -t1069, 0, 0, 0, 0, 0, 0, 0, -t1131, -t1130, -t1065, 0, 0, 0, 0, 0, 0, -t1095, -t1096, -t1104, -t1051, 0, 0, 0, 0, 0, 0, -t1049, -t1053, -t1047, -t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, -t1110, -t1111, 0, -t1060, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1058, -t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, 0, qJDD(1), t1116, 0, 0, 0, 0, 0, 0, -t1130, t1131, 0, t1070, 0, 0, 0, 0, 0, 0, 0, t1130, -t1131, t1066, 0, 0, 0, 0, 0, 0, t1097, t1098, t1105, t1052, 0, 0, 0, 0, 0, 0, t1050, t1054, t1048, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, 0, 0, 0, 0, -t1110, -t1111, 0, -t1060, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1058, -t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t1169, -t1117, 0, 0, 0, 0, 0, 0, -t1131, -t1130, 0, t1069, 0, 0, 0, 0, 0, 0, 0, t1131, t1130, t1065, 0, 0, 0, 0, 0, 0, t1095, t1096, t1104, t1051, 0, 0, 0, 0, 0, 0, t1049, t1053, t1047, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, qJDD(1), 0, t1094, 0, 0, 0, 0, 0, 0, 0, t1169, -qJDD(1), t1085, 0, 0, 0, 0, 0, 0, -t1127, -t1128, -t1136, t1083, 0, 0, 0, 0, 0, 0, t1075, t1077, t1067, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t1169, 0, t1093, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1169, -t1088, 0, 0, 0, 0, 0, 0, -t1108, -t1109, -t1133, -t1059, 0, 0, 0, 0, 0, 0, -t1061, -t1063, -t1057, -t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, t1110, t1111, 0, t1060, 0, 0, 0, 0, 0, 0, t1062, t1064, t1058, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, t1110, t1111, 0, t1060, 0, 0, 0, 0, 0, 0, t1062, t1064, t1058, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, qJDD(1), -t1085, 0, 0, 0, 0, 0, 0, t1127, t1128, t1136, -t1083, 0, 0, 0, 0, 0, 0, -t1075, -t1077, -t1067, -t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t1169, t1088, 0, 0, 0, 0, 0, 0, t1108, t1109, t1133, t1059, 0, 0, 0, 0, 0, 0, t1061, t1063, t1057, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1140, t1137, t1188, t1080, 0, 0, 0, 0, 0, 0, t1076, t1078, t1068, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, t1178, t1187, t1184, 0, 0, 0, 0, 0, 0, -t1089, -t1091, -t1100, -t1073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1127, -t1128, -t1136, t1083, 0, 0, 0, 0, 0, 0, t1075, t1077, t1067, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, t1101, t1090, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, t1106, t1092, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1089, t1091, t1100, t1073;];
f_new_reg  = t1;
