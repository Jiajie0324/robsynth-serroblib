% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPPRR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:35:52
% EndTime: 2019-03-09 01:35:55
% DurationCPUTime: 1.16s
% Computational Cost: add. (896->123), mult. (1598->248), div. (0->0), fcn. (1302->6), ass. (0->93)
t39 = cos(qJ(5));
t101 = 0.4e1 * t39;
t36 = sin(qJ(6));
t30 = t36 ^ 2;
t38 = cos(qJ(6));
t32 = t38 ^ 2;
t89 = t30 + t32;
t34 = sin(pkin(9));
t35 = cos(pkin(9));
t40 = -pkin(1) - pkin(2);
t21 = t35 * qJ(2) + t34 * t40 - qJ(4);
t37 = sin(qJ(5));
t94 = t37 * pkin(5);
t54 = t39 * pkin(8) - t94;
t45 = t21 + t54;
t27 = t34 * qJ(2);
t56 = -t35 * t40 + pkin(3) + t27;
t20 = pkin(7) + t56;
t80 = t39 * qJD(5);
t63 = t20 * t80;
t82 = t34 * qJD(2);
t67 = t37 * t82;
t47 = -t63 - t67;
t100 = -qJD(6) * t45 + t47;
t81 = t35 * qJD(2);
t26 = -qJD(4) + t81;
t95 = pkin(5) * t39;
t55 = pkin(8) * t37 + t95;
t85 = qJD(6) * t37;
t99 = -t55 * qJD(5) - t20 * t85 + t26;
t31 = t37 ^ 2;
t33 = t39 ^ 2;
t88 = t31 - t33;
t98 = qJD(5) * t88;
t90 = t30 - t32;
t59 = qJD(6) * t90;
t28 = t37 * qJD(5);
t48 = -t20 * t28 + t39 * t82;
t97 = t55 * qJD(6) + t48;
t96 = t35 ^ 2;
t93 = t21 * t26;
t92 = t36 * t37;
t91 = t37 * t38;
t87 = t31 + t33;
t86 = qJD(6) * t36;
t84 = qJD(6) * t38;
t83 = qJD(6) * t39;
t79 = qJ(2) * qJD(2);
t78 = -0.2e1 * pkin(5) * qJD(6);
t77 = t20 * t92;
t76 = t35 * t92;
t75 = t20 * t91;
t74 = t35 * t91;
t73 = qJD(6) * t33 * t35;
t72 = t36 * t83;
t70 = t38 * t83;
t69 = t31 * t82;
t24 = t33 * t82;
t68 = t36 * t84;
t66 = t35 * t28;
t65 = t38 * t28;
t64 = t37 * t80;
t62 = t35 * t80;
t61 = t89 * t37;
t60 = t89 * t39;
t23 = 0.2e1 * t64;
t58 = t36 * t65;
t57 = t33 * t68;
t3 = t38 * t45 - t77;
t4 = t36 * t45 + t75;
t53 = -t3 * t38 - t36 * t4;
t52 = t3 * t36 - t38 * t4;
t14 = t38 * t34 + t76;
t49 = -t36 * t34 + t74;
t51 = -t14 * t38 + t36 * t49;
t50 = t14 * t36 + t38 * t49;
t17 = t65 + t72;
t19 = -t36 * t28 + t70;
t46 = t54 * qJD(5) - t20 * t83;
t1 = t100 * t38 - t99 * t36;
t2 = t100 * t36 + t99 * t38;
t43 = t53 * qJD(6) - t1 * t38 - t2 * t36;
t5 = t14 * qJD(6) - t38 * t62;
t6 = t49 * qJD(6) + t36 * t62;
t42 = t51 * qJD(6) - t6 * t36 + t5 * t38;
t29 = qJD(5) * t31;
t18 = t36 * t80 + t37 * t84;
t16 = t36 * t85 - t38 * t80;
t13 = t24 + t69;
t11 = t20 * t24;
t9 = t39 * t59 + t58;
t7 = (-0.1e1 + t89) * t64;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * qJD(2), 0.2e1 * t79, 0, 0, 0, 0, 0, 0, 0.2e1 * t82, 0.2e1 * t81, 0, 0.2e1 * t27 * t82 + 0.2e1 * t96 * t79, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t82, -0.2e1 * t26, 0.2e1 * t56 * t82 + 0.2e1 * t93, -0.2e1 * t64, -0.2e1 * t33 * qJD(5) + 0.2e1 * t29, 0, t23, 0, 0, -0.2e1 * t21 * t80 - 0.2e1 * t26 * t37, 0.2e1 * t21 * t28 - 0.2e1 * t26 * t39, 0.2e1 * t13, 0.2e1 * t20 * t69 + 0.2e1 * t11 + 0.2e1 * t93, -0.2e1 * t32 * t64 - 0.2e1 * t57, t58 * t101 + 0.2e1 * t33 * t59, -0.2e1 * t37 * t72 - 0.2e1 * t38 * t98, -0.2e1 * t30 * t64 + 0.2e1 * t57, 0.2e1 * t36 * t98 - 0.2e1 * t37 * t70, t23, -0.2e1 * t2 * t37 + 0.2e1 * (t20 * t84 + t36 * t82) * t33 + 0.2e1 * (-t3 - 0.2e1 * t77) * t80, -0.2e1 * t1 * t37 + 0.2e1 * (-t20 * t86 + t38 * t82) * t33 + 0.2e1 * (t4 - 0.2e1 * t75) * t80, 0.2e1 * t53 * t28 + 0.2e1 * (-t52 * qJD(6) - t1 * t36 + t2 * t38) * t39, -0.2e1 * t20 ^ 2 * t64 - 0.2e1 * t4 * t1 + 0.2e1 * t3 * t2 + 0.2e1 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t26 - t81) * t34, 0, 0, 0, 0, 0, 0, -t34 * t80, t34 * t28, 0 (-t87 * t81 + t26) * t34, 0, 0, 0, 0, 0, 0, -t38 * t73 - t6 * t37 + (-t14 + 0.2e1 * t76) * t80, t36 * t73 + t5 * t37 + (-t49 + 0.2e1 * t74) * t80, t51 * t28 + (-t50 * qJD(6) + t36 * t5 + t38 * t6) * t39, t1 * t49 + t2 * t14 + t3 * t6 + t4 * t5 + (t20 * t23 - t24) * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t14 * t6 - 0.2e1 * t49 * t5 - 0.2e1 * t96 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t88 * t20 + t52 * t37) * qJD(5) + (t43 - t67) * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42 * t39 + (-t88 * t35 + t50 * t37) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, 0, 0, 0, t87 * t84, -t87 * t86, 0, t24 - t52 * t80 + (t43 - 0.2e1 * t63) * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50 * t80 + (t42 + 0.2e1 * t62) * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 + (-t89 * t88 - t33) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, t80, 0, t48, t47, 0, 0, t9, t68 * t101 - t90 * t28, -t18, -t9, t16, 0, t46 * t36 + t97 * t38, -t97 * t36 + t46 * t38, t43, pkin(5) * t48 + pkin(8) * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t62, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t35, t19 * t35, t42, pkin(5) * t66 + pkin(8) * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t28, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18, -qJD(5) * t61 (-pkin(8) * t61 - t95) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, -t80, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, qJD(5) * t60 (pkin(8) * t60 - t94) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t68, -0.2e1 * t59, 0, -0.2e1 * t68, 0, 0, t36 * t78, t38 * t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, t19, -t80, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, -t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t86, 0, -pkin(8) * t84, pkin(8) * t86, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
