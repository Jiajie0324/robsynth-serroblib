% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RPPPRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:46:38
% EndTime: 2019-05-05 13:46:51
% DurationCPUTime: 13.72s
% Computational Cost: add. (38181->648), mult. (66898->697), div. (0->0), fcn. (33050->8), ass. (0->366)
t873 = sin(pkin(9));
t874 = cos(pkin(9));
t884 = qJD(1) ^ 2;
t833 = qJDD(1) * t874 + t873 * t884;
t871 = g(3) + qJDD(3);
t984 = t871 * t873;
t795 = qJ(3) * t833 + t984;
t880 = sin(qJ(1));
t883 = cos(qJ(1));
t832 = -t873 * qJDD(1) + t874 * t884;
t983 = t871 * t874;
t931 = qJ(3) * t832 + t983;
t951 = -t832 * t880 + t883 * t833;
t1040 = pkin(6) * t951 - t883 * t795 + t880 * t931;
t952 = t883 * t832 + t833 * t880;
t1012 = pkin(6) * t952 - t795 * t880 - t883 * t931;
t879 = sin(qJ(5));
t1005 = pkin(5) * t879;
t882 = cos(qJ(5));
t1034 = pkin(8) * t882 - t1005;
t866 = qJDD(1) * qJ(4);
t1017 = -t884 * pkin(3) - t866;
t1010 = pkin(1) + pkin(2);
t971 = (qJD(2) * qJD(1));
t863 = 2 * t971;
t844 = t883 * g(1) + t880 * g(2);
t867 = qJDD(1) * qJ(2);
t922 = -t844 + t867;
t790 = -t1010 * t884 + t863 + t922;
t843 = t880 * g(1) - t883 * g(2);
t938 = -qJDD(2) + t843;
t904 = -t884 * qJ(2) - t938;
t801 = -qJDD(1) * t1010 + t904;
t731 = t874 * t790 + t873 * t801;
t970 = (qJD(4) * qJD(1));
t888 = t731 - (2 * t970);
t717 = t888 + t1017;
t1000 = qJDD(1) * pkin(3);
t730 = t873 * t790 - t874 * t801;
t932 = qJDD(4) + t730;
t918 = -t884 * qJ(4) + t932;
t722 = t918 + t1000;
t656 = t717 * t873 - t722 * t874;
t930 = t717 * t874 + t722 * t873;
t1031 = t656 * t880 + t883 * t930;
t673 = t730 * t874 - t731 * t873;
t929 = t730 * t873 + t731 * t874;
t1030 = t673 * t880 - t883 * t929;
t1029 = -t656 * t883 + t880 * t930;
t1028 = t673 * t883 + t880 * t929;
t972 = qJD(1) * qJD(5);
t957 = t882 * t972;
t969 = t879 * qJDD(1);
t829 = t957 + t969;
t855 = t879 * t972;
t968 = t882 * qJDD(1);
t831 = t855 - t968;
t876 = t884 * pkin(7);
t1004 = pkin(5) * t882;
t939 = -pkin(8) * t879 - t1004;
t676 = -t829 * pkin(5) - t831 * pkin(8) - t876 + (qJD(5) * t939 - (2 * qJD(4))) * qJD(1) + t731 + t1017;
t1011 = qJD(5) ^ 2;
t1009 = pkin(3) + pkin(7);
t716 = qJDD(1) * t1009 + t918;
t700 = t879 * t716 + t882 * t871;
t909 = t884 * t1034;
t687 = -pkin(5) * t1011 + qJDD(5) * pkin(8) + t879 * t909 + t700;
t878 = sin(qJ(6));
t881 = cos(qJ(6));
t620 = -t881 * t676 + t687 * t878;
t621 = t676 * t878 + t687 * t881;
t585 = -t620 * t881 + t621 * t878;
t1025 = t585 * (pkin(4) - t939);
t819 = -qJDD(6) + t829;
t973 = qJD(1) * t882;
t823 = qJD(5) * t881 + t878 * t973;
t824 = -t878 * qJD(5) + t881 * t973;
t995 = t823 * t824;
t885 = -t819 - t995;
t1024 = t878 * t885;
t1021 = t881 * t885;
t586 = t878 * t620 + t881 * t621;
t699 = -t882 * t716 + t871 * t879;
t638 = -t882 * t699 + t879 * t700;
t1018 = 0.2e1 * t866 + (2 * t970);
t1016 = -0.2e1 * t1000 - qJDD(4);
t850 = qJD(1) * t879 - qJD(6);
t947 = t881 * qJDD(5) - t878 * t831;
t726 = (qJD(6) + t850) * t824 + t947;
t923 = -t878 * qJDD(5) - t881 * t831;
t755 = qJD(6) * t823 - t923;
t802 = t823 * t850;
t729 = t755 + t802;
t666 = t726 * t878 - t729 * t881;
t573 = -pkin(8) * t666 - t585;
t1014 = -t666 * (pkin(4) + t1004) + t879 * t573;
t689 = qJ(2) * t833 + t1010 * t832 + t731;
t690 = -qJ(2) * t832 + t1010 * t833 + t730;
t817 = t823 ^ 2;
t818 = t824 ^ 2;
t848 = t850 ^ 2;
t1008 = pkin(4) * t638;
t711 = t717 - t876;
t1007 = pkin(4) * t711;
t869 = t879 ^ 2;
t870 = t882 ^ 2;
t974 = t869 + t870;
t836 = t974 * qJDD(1);
t1006 = pkin(4) * t836;
t1002 = qJ(3) * t673;
t1001 = qJDD(1) * pkin(1);
t743 = t819 - t995;
t999 = t743 * t878;
t998 = t743 * t881;
t992 = t836 * t873;
t991 = t836 * t874;
t849 = t879 * t884 * t882;
t841 = qJDD(5) + t849;
t990 = t841 * t882;
t842 = qJDD(5) - t849;
t989 = t842 * t882;
t988 = t850 * t878;
t987 = t850 * t881;
t986 = t869 * t884;
t985 = t870 * t884;
t686 = -qJDD(5) * pkin(5) - pkin(8) * t1011 - t882 * t909 + t699;
t677 = t878 * t686;
t707 = t879 * t711;
t980 = t879 * t841;
t679 = t881 * t686;
t708 = t882 * t711;
t977 = -pkin(5) * t686 + pkin(8) * t586;
t847 = -t986 - t1011;
t776 = t847 * t879 + t989;
t976 = -pkin(7) * t776 + t707;
t943 = -t985 - t1011;
t778 = t882 * t943 - t980;
t975 = -pkin(7) * t778 + t708;
t967 = t817 + t818;
t966 = t879 * t995;
t965 = t882 * t995;
t668 = t726 * t881 + t729 * t878;
t627 = t879 * t668 + t882 * t967;
t964 = -pkin(7) * t627 + t666 * t1005 + t882 * t573;
t577 = t586 * t879 - t686 * t882;
t963 = -pkin(7) * t577 - t1034 * t585;
t756 = -t848 - t817;
t692 = t756 * t878 + t1021;
t598 = -pkin(5) * t692 + t620;
t623 = -pkin(8) * t692 + t677;
t693 = t756 * t881 - t1024;
t803 = t850 * t824;
t908 = qJD(6) * t824 + t947;
t727 = -t803 + t908;
t642 = t693 * t879 + t727 * t882;
t962 = -pkin(7) * t642 - t879 * t598 + t882 * t623;
t770 = -t818 - t848;
t695 = t770 * t881 + t999;
t600 = -pkin(5) * t695 + t621;
t625 = -pkin(8) * t695 + t679;
t696 = -t770 * t878 + t998;
t886 = (-qJD(6) + t850) * t823 + t923;
t645 = t879 * t696 + t882 * t886;
t961 = -pkin(7) * t645 - t879 * t600 + t882 * t625;
t960 = pkin(5) * t886 + pkin(8) * t696 + t677;
t959 = pkin(5) * t727 + pkin(8) * t693 - t679;
t956 = pkin(3) * t984 - qJ(3) * t656;
t860 = pkin(2) * t871;
t955 = -qJ(3) * t930 + t860;
t954 = qJ(3) * t929 - t860;
t804 = pkin(1) * t884 - t922 - (2 * t971);
t805 = -t904 + t1001;
t953 = -t883 * t804 - t805 * t880;
t948 = -t843 * t880 - t883 * t844;
t946 = t873 * t849;
t945 = t874 * t849;
t944 = pkin(5) * t967 + pkin(8) * t668 + t586;
t942 = -t985 + t1011;
t941 = -pkin(4) * t577 - t977;
t940 = -pkin(4) * t778 + t700;
t837 = qJDD(1) * t880 + t883 * t884;
t807 = -pkin(6) * t837 + g(3) * t883;
t838 = qJDD(1) * t883 - t880 * t884;
t806 = pkin(6) * t838 + g(3) * t880;
t937 = pkin(7) * t836 + t638;
t936 = pkin(3) * t722 - qJ(4) * t717;
t935 = -pkin(3) * t874 - qJ(4) * t873;
t828 = 0.2e1 * t957 + t969;
t934 = -pkin(4) * t828 + t708;
t830 = -0.2e1 * t855 + t968;
t933 = -pkin(4) * t830 - t707;
t639 = t879 * t699 + t700 * t882;
t928 = t804 * t880 - t805 * t883;
t927 = t843 * t883 - t844 * t880;
t925 = -pkin(4) * t642 - t959;
t924 = -pkin(4) * t645 - t960;
t921 = pkin(2) * t833 + t730;
t637 = pkin(7) * t638;
t920 = pkin(3) * t638 - qJ(4) * t711 + t637;
t919 = -pkin(4) * t776 + t699;
t578 = t586 * t882 + t879 * t686;
t552 = -t1009 * t578 + t1025;
t559 = -qJ(4) * t578 - t941;
t566 = -t577 * t874 + t585 * t873;
t916 = -qJ(3) * t566 - t552 * t873 + t874 * t559;
t628 = t668 * t882 - t879 * t967;
t563 = -t1009 * t628 - t1014;
t907 = -pkin(4) * t627 - t944;
t569 = -qJ(4) * t628 - t907;
t595 = -t627 * t874 + t666 * t873;
t915 = -qJ(3) * t595 - t563 * t873 + t874 * t569;
t643 = t693 * t882 - t879 * t727;
t902 = pkin(4) * t692 - t882 * t598 - t879 * t623;
t570 = -t1009 * t643 + t902;
t575 = -qJ(4) * t643 - t925;
t606 = -t642 * t874 + t692 * t873;
t914 = -qJ(3) * t606 - t570 * t873 + t874 * t575;
t646 = t696 * t882 - t879 * t886;
t901 = pkin(4) * t695 - t882 * t600 - t879 * t625;
t571 = -t1009 * t646 + t901;
t580 = -qJ(4) * t646 - t924;
t610 = -t645 * t874 + t695 * t873;
t913 = -qJ(3) * t610 - t571 * t873 + t874 * t580;
t587 = -t1009 * t639 + t1007;
t594 = -qJ(4) * t639 + t1008;
t608 = -t638 * t874 + t711 * t873;
t912 = -qJ(3) * t608 - t587 * t873 + t874 * t594;
t783 = -t879 * t943 - t990;
t647 = -t1009 * t783 + t933;
t660 = -qJ(4) * t783 - t940;
t737 = -t778 * t874 - t830 * t873;
t911 = -qJ(3) * t737 - t647 * t873 + t874 * t660;
t822 = t879 * t842;
t780 = t847 * t882 - t822;
t648 = -t1009 * t780 + t934;
t659 = -qJ(4) * t780 - t919;
t736 = -t776 * t874 - t828 * t873;
t910 = -qJ(3) * t736 - t648 * t873 + t874 * t659;
t906 = pkin(3) * t776 + qJ(4) * t828 - t976;
t905 = pkin(3) * t778 + qJ(4) * t830 - t975;
t903 = pkin(2) * t832 + t731;
t567 = t577 * t873 + t585 * t874;
t899 = -qJ(3) * t567 - t874 * t552 - t873 * t559;
t596 = t627 * t873 + t666 * t874;
t898 = -qJ(3) * t596 - t874 * t563 - t873 * t569;
t607 = t642 * t873 + t692 * t874;
t897 = -qJ(3) * t607 - t874 * t570 - t873 * t575;
t611 = t645 * t873 + t695 * t874;
t896 = -qJ(3) * t611 - t874 * t571 - t873 * t580;
t609 = t638 * t873 + t711 * t874;
t895 = -qJ(3) * t609 - t874 * t587 - t873 * t594;
t739 = t778 * t873 - t830 * t874;
t894 = -qJ(3) * t739 - t874 * t647 - t873 * t660;
t738 = t776 * t873 - t828 * t874;
t893 = -qJ(3) * t738 - t874 * t648 - t873 * t659;
t892 = pkin(3) * t627 - qJ(4) * t666 - t964;
t891 = pkin(3) * t577 - qJ(4) * t585 - t963;
t890 = pkin(3) * t642 - qJ(4) * t692 - t962;
t889 = pkin(3) * t645 - qJ(4) * t695 - t961;
t839 = t974 * t884;
t887 = pkin(3) * t836 + qJ(4) * t839 + t937;
t846 = t986 - t1011;
t840 = (-t869 + t870) * t884;
t820 = t974 * t972;
t816 = t938 + 0.2e1 * t1001;
t810 = -t844 + t863 + 0.2e1 * t867;
t794 = -t818 + t848;
t793 = t817 - t848;
t792 = t831 * t879 - t870 * t972;
t791 = -t829 * t882 + t869 * t972;
t788 = qJDD(5) * t874 + t820 * t873;
t787 = qJDD(5) * t873 - t820 * t874;
t782 = -t879 * t942 + t989;
t781 = (t831 + t855) * t882;
t779 = t846 * t882 - t980;
t777 = t882 * t942 + t822;
t775 = t846 * t879 + t990;
t774 = (t829 + t957) * t879;
t771 = t818 - t817;
t769 = -t839 * t874 + t992;
t768 = -t839 * t873 - t991;
t759 = t828 * t882 + t879 * t830;
t758 = t828 * t879 - t830 * t882;
t754 = -t791 * t873 - t945;
t753 = t792 * t873 + t945;
t752 = -t792 * t874 + t946;
t751 = -t791 * t874 + t946;
t750 = t777 * t873 - t874 * t968;
t749 = t775 * t873 + t874 * t969;
t748 = t777 * t874 + t873 * t968;
t747 = -t775 * t874 + t873 * t969;
t742 = pkin(1) * t805 - qJ(2) * t804;
t735 = (-t823 * t881 + t824 * t878) * t850;
t734 = (-t823 * t878 - t824 * t881) * t850;
t733 = t758 * t873 + t840 * t874;
t732 = -t758 * t874 + t840 * t873;
t728 = t755 - t802;
t725 = -t803 - t908;
t715 = t755 * t881 - t824 * t988;
t714 = t755 * t878 + t824 * t987;
t713 = t823 * t987 - t878 * t908;
t712 = -t823 * t988 - t881 * t908;
t706 = t735 * t882 - t879 * t819;
t705 = t735 * t879 + t819 * t882;
t704 = t793 * t881 + t999;
t703 = -t794 * t878 + t1021;
t702 = t793 * t878 - t998;
t701 = t794 * t881 + t1024;
t688 = -t690 + t1016;
t685 = t715 * t882 + t966;
t684 = t713 * t882 - t966;
t683 = t715 * t879 - t965;
t682 = t713 * t879 + t965;
t681 = -t689 + t1018;
t670 = qJ(2) * t871 + t1002;
t669 = t727 * t881 - t728 * t878;
t667 = t727 * t878 + t728 * t881;
t664 = pkin(1) * t871 - t954;
t663 = t705 * t873 + t734 * t874;
t662 = -t705 * t874 + t734 * t873;
t652 = t704 * t882 - t879 * t725;
t651 = t703 * t882 + t879 * t729;
t650 = t704 * t879 + t725 * t882;
t649 = t703 * t879 - t729 * t882;
t640 = (-qJ(4) * t874 + qJ(2)) * t871 + t956;
t636 = t669 * t882 + t879 * t771;
t635 = t669 * t879 - t771 * t882;
t634 = (pkin(1) - t935) * t871 + t955;
t633 = pkin(4) * t839 + t639;
t632 = t683 * t873 + t714 * t874;
t631 = t682 * t873 - t712 * t874;
t630 = -t683 * t874 + t714 * t873;
t629 = -t682 * t874 - t712 * t873;
t619 = t650 * t873 + t702 * t874;
t618 = t649 * t873 + t701 * t874;
t617 = -t650 * t874 + t702 * t873;
t616 = -t649 * t874 + t701 * t873;
t613 = pkin(4) * t991 - qJ(3) * t768 + t633 * t873;
t612 = pkin(4) * t992 + qJ(3) * t769 - t633 * t874;
t605 = qJ(2) * t739 - t1010 * t737 + t905;
t604 = qJ(2) * t738 - t1010 * t736 + t906;
t603 = qJ(2) * t769 - t1010 * t768 + t887;
t602 = t635 * t873 + t667 * t874;
t601 = -t635 * t874 + t667 * t873;
t592 = qJ(2) * t929 + t1010 * t673;
t591 = qJ(2) * t783 + t911;
t590 = qJ(2) * t780 + t910;
t589 = t1010 * t783 + t894;
t588 = t1010 * t780 + t893;
t581 = qJ(2) * t930 - t1010 * t656 + t936;
t565 = qJ(2) * t609 - t1010 * t608 + t920;
t564 = qJ(2) * t639 + t912;
t562 = t1010 * t639 + t895;
t561 = qJ(2) * t611 - t1010 * t610 + t889;
t560 = qJ(2) * t607 - t1010 * t606 + t890;
t557 = qJ(2) * t646 + t913;
t556 = qJ(2) * t643 + t914;
t555 = t1010 * t646 + t896;
t554 = t1010 * t643 + t897;
t553 = qJ(2) * t596 - t1010 * t595 + t892;
t551 = qJ(2) * t628 + t915;
t550 = t1010 * t628 + t898;
t549 = qJ(2) * t567 - t1010 * t566 + t891;
t548 = qJ(2) * t578 + t916;
t547 = t1010 * t578 + t899;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t838, 0, -t837, 0, -t806, -t807, -t927, -pkin(6) * t927, 0, t838, 0, 0, t837, 0, -t806, t928, t807, pkin(6) * t928 + (-pkin(1) * t880 + qJ(2) * t883) * g(3), 0, 0, -t951, 0, -t952, 0, -t1040, -t1012, t1028, -pkin(6) * t1028 - t880 * t664 + t883 * t670, 0, t951, t952, 0, 0, 0, t1029, t1040, t1012, -pkin(6) * t1029 - t880 * t634 + t883 * t640, t752 * t880 + t753 * t883, t732 * t880 + t733 * t883, -t748 * t880 + t750 * t883, -t751 * t880 + t754 * t883, t747 * t880 + t749 * t883, t787 * t880 + t788 * t883, t883 * t590 - t880 * t588 - pkin(6) * (-t736 * t883 + t738 * t880), t883 * t591 - t880 * t589 - pkin(6) * (-t737 * t883 + t739 * t880), t883 * t613 + t880 * t612 - pkin(6) * (-t768 * t883 + t769 * t880), t883 * t564 - t880 * t562 - pkin(6) * (-t608 * t883 + t609 * t880), t630 * t880 + t632 * t883, t601 * t880 + t602 * t883, t616 * t880 + t618 * t883, t629 * t880 + t631 * t883, t617 * t880 + t619 * t883, t662 * t880 + t663 * t883, t883 * t556 - t880 * t554 - pkin(6) * (-t606 * t883 + t607 * t880), t883 * t557 - t880 * t555 - pkin(6) * (-t610 * t883 + t611 * t880), t883 * t551 - t880 * t550 - pkin(6) * (-t595 * t883 + t596 * t880), t883 * t548 - t880 * t547 - pkin(6) * (-t566 * t883 + t567 * t880); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t837, 0, t838, 0, t807, -t806, t948, pkin(6) * t948, 0, t837, 0, 0, -t838, 0, t807, t953, t806, pkin(6) * t953 + (pkin(1) * t883 + qJ(2) * t880) * g(3), 0, 0, -t952, 0, t951, 0, -t1012, t1040, t1030, -pkin(6) * t1030 + t883 * t664 + t880 * t670, 0, t952, -t951, 0, 0, 0, -t1031, t1012, -t1040, pkin(6) * t1031 + t883 * t634 + t880 * t640, -t752 * t883 + t753 * t880, -t732 * t883 + t733 * t880, t748 * t883 + t750 * t880, t751 * t883 + t754 * t880, -t747 * t883 + t749 * t880, -t787 * t883 + t788 * t880, t880 * t590 + t883 * t588 + pkin(6) * (t736 * t880 + t738 * t883), t880 * t591 + t883 * t589 + pkin(6) * (t737 * t880 + t739 * t883), t880 * t613 - t883 * t612 + pkin(6) * (t768 * t880 + t769 * t883), t880 * t564 + t883 * t562 + pkin(6) * (t608 * t880 + t609 * t883), -t630 * t883 + t632 * t880, -t601 * t883 + t602 * t880, -t616 * t883 + t618 * t880, -t629 * t883 + t631 * t880, -t617 * t883 + t619 * t880, -t662 * t883 + t663 * t880, t880 * t556 + t883 * t554 + pkin(6) * (t606 * t880 + t607 * t883), t880 * t557 + t883 * t555 + pkin(6) * (t610 * t880 + t611 * t883), t880 * t551 + t883 * t550 + pkin(6) * (t595 * t880 + t596 * t883), t880 * t548 + t883 * t547 + pkin(6) * (t566 * t880 + t567 * t883); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t843, t844, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t816, 0, t810, t742, 0, 0, 0, 0, 0, qJDD(1), t690, t689, 0, t592, qJDD(1), 0, 0, 0, 0, 0, 0, t688, t681, t581, -t781, -t759, -t782, t774, -t779, 0, t604, t605, t603, t565, -t685, -t636, -t651, -t684, -t652, -t706, t560, t561, t553, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t884, 0, 0, -g(3), -t843, 0, 0, qJDD(1), 0, 0, t884, 0, 0, -t805, g(3), qJ(2) * g(3), 0, 0, -t833, 0, -t832, 0, t795, t931, t673, t670, 0, t833, t832, 0, 0, 0, -t656, -t795, -t931, t640, t753, t733, t750, t754, t749, t788, t590, t591, t613, t564, t632, t602, t618, t631, t619, t663, t556, t557, t551, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, 0, qJDD(1), 0, g(3), 0, -t844, 0, 0, t884, 0, 0, -qJDD(1), 0, g(3), -t804, 0, pkin(1) * g(3), 0, 0, -t832, 0, t833, 0, t931, -t795, -t929, t664, 0, t832, -t833, 0, 0, 0, -t930, -t931, t795, t634, -t752, -t732, t748, t751, -t747, -t787, t588, t589, -t612, t562, -t630, -t601, -t616, -t629, -t617, -t662, t554, t555, t550, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t843, t844, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t816, 0, t810, t742, 0, 0, 0, 0, 0, qJDD(1), t690, t689, 0, t592, qJDD(1), 0, 0, 0, 0, 0, 0, t688, t681, t581, -t781, -t759, -t782, t774, -t779, 0, t604, t605, t603, t565, -t685, -t636, -t651, -t684, -t652, -t706, t560, t561, t553, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t884, 0, 0, -t805, g(3), 0, 0, 0, -t833, 0, -t832, 0, t795, t931, t673, t1002, 0, t833, t832, 0, 0, 0, -t656, -t795, -t931, -qJ(4) * t983 + t956, t753, t733, t750, t754, t749, t788, t910, t911, t613, t912, t632, t602, t618, t631, t619, t663, t914, t913, t915, t916; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t805, 0, -t804, 0, 0, 0, 0, 0, 0, qJDD(1), t921, t903, 0, pkin(2) * t673, qJDD(1), 0, 0, 0, 0, 0, 0, -t921 + t1016, -t903 + t1018, -pkin(2) * t656 + t936, -t781, -t759, -t782, t774, -t779, 0, -pkin(2) * t736 + t906, -pkin(2) * t737 + t905, -pkin(2) * t768 + t887, -pkin(2) * t608 + t920, -t685, -t636, -t651, -t684, -t652, -t706, -pkin(2) * t606 + t890, -pkin(2) * t610 + t889, -pkin(2) * t595 + t892, -pkin(2) * t566 + t891; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t884, 0, 0, qJDD(1), 0, -g(3), t804, 0, 0, 0, 0, t832, 0, -t833, 0, -t931, t795, t929, t954, 0, -t832, t833, 0, 0, 0, t930, t931, -t795, t871 * t935 - t955, t752, t732, -t748, -t751, t747, t787, -pkin(2) * t780 - t893, -pkin(2) * t783 - t894, t612, -pkin(2) * t639 - t895, t630, t601, t616, t629, t617, t662, -pkin(2) * t643 - t897, -pkin(2) * t646 - t896, -pkin(2) * t628 - t898, -pkin(2) * t578 - t899; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t884, 0, 0, t871, t730, 0, 0, qJDD(1), t884, 0, 0, 0, t722, 0, -t871, -qJ(4) * t871, t849, t840, -t968, -t849, t969, qJDD(5), t659, t660, t1006, t594, t714, t667, t701, -t712, t702, t734, t575, t580, t569, t559; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, 0, -qJDD(1), 0, -t871, 0, t731, 0, 0, -t884, qJDD(1), 0, 0, 0, t717, t871, 0, -pkin(3) * t871, -t792, -t758, -t777, t791, -t775, -t820, t648, t647, -t633, t587, -t683, -t635, -t649, -t682, -t650, -t705, t570, t571, t563, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t730, -t731, 0, 0, -qJDD(1), 0, 0, 0, 0, 0, 0, t932 + 0.2e1 * t1000, -0.2e1 * t866 + t888, -t936, t781, t759, t782, -t774, t779, 0, -t906, -t905, -t887, -t920, t685, t636, t651, t684, t652, t706, -t890, -t889, -t892, -t891; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, 0, 0, 0, 0, 0, t722, t717, 0, t781, t759, t782, -t774, t779, 0, t976, t975, -t937, -t637, t685, t636, t651, t684, t652, t706, t962, t961, t964, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t884, 0, 0, 0, -t722, 0, t871, 0, -t849, -t840, t968, t849, -t969, -qJDD(5), t919, t940, -t1006, -t1008, -t714, -t667, -t701, t712, -t702, -t734, t925, t924, t907, t941; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, -qJDD(1), 0, 0, 0, -t717, -t871, 0, 0, t792, t758, t777, -t791, t775, t820, pkin(7) * t780 - t934, pkin(7) * t783 - t933, t633, pkin(7) * t639 - t1007, t683, t635, t649, t682, t650, t705, pkin(7) * t643 - t902, pkin(7) * t646 - t901, pkin(7) * t628 + t1014, pkin(7) * t578 - t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, t828, t842, -t855, t846, t855, 0, t711, t699, 0, t715, t669, t703, t713, t704, t735, t623, t625, t573, -pkin(8) * t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t957, -t830, t942, t829, t841, t957, -t711, 0, t700, 0, -t995, -t771, -t729, t995, t725, t819, t598, t600, -pkin(5) * t666, -pkin(5) * t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t849, t840, -t968, -t849, t969, qJDD(5), -t699, -t700, 0, 0, t714, t667, t701, -t712, t702, t734, t959, t960, t944, t977; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t755, t727, t885, t802, t793, -t802, 0, t686, t620, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, t728, t794, t908, -t743, -t803, -t686, 0, t621, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t995, t771, t729, -t995, -t725, -t819, -t620, -t621, 0, 0;];
m_new_reg  = t1;
