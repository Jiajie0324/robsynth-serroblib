% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:46:26
% EndTime: 2019-05-05 13:46:38
% DurationCPUTime: 7.02s
% Computational Cost: add. (17707->470), mult. (31069->644), div. (0->0), fcn. (15512->8), ass. (0->289)
t443 = sin(pkin(9));
t444 = cos(pkin(9));
t455 = qJD(1) ^ 2;
t409 = qJDD(1) * t444 + t443 * t455;
t441 = g(3) + qJDD(3);
t377 = qJ(3) * t409 + t441 * t443;
t450 = sin(qJ(1));
t453 = cos(qJ(1));
t486 = t443 * qJDD(1);
t408 = t444 * t455 - t486;
t465 = qJ(3) * t408 + t441 * t444;
t477 = -t408 * t450 + t453 * t409;
t546 = -pkin(6) * t477 + t453 * t377 - t450 * t465;
t478 = t453 * t408 + t409 * t450;
t545 = pkin(6) * t478 - t377 * t450 - t453 * t465;
t437 = qJDD(1) * qJ(2);
t418 = t453 * g(1) + t450 * g(2);
t523 = 2 * qJD(1);
t464 = (qJD(2) * t523) - t418;
t458 = t437 + t464;
t522 = pkin(1) + pkin(2);
t371 = -t455 * t522 + t458;
t417 = t450 * g(1) - t453 * g(2);
t468 = -qJDD(2) + t417;
t457 = -t455 * qJ(2) - t468;
t382 = -qJDD(1) * t522 + t457;
t316 = t444 * t371 + t443 * t382;
t466 = (qJD(4) * t523) - t316;
t436 = qJDD(1) * qJ(4);
t529 = -t455 * pkin(3) - t436;
t306 = -t466 + t529;
t315 = t443 * t371 - t444 * t382;
t462 = -t455 * qJ(4) + qJDD(4) + t315;
t516 = qJDD(1) * pkin(3);
t309 = t462 + t516;
t255 = t306 * t443 - t309 * t444;
t257 = t306 * t444 + t309 * t443;
t213 = -t255 * t453 + t257 * t450;
t214 = t255 * t450 + t257 * t453;
t270 = t315 * t444 - t316 * t443;
t271 = t315 * t443 + t316 * t444;
t217 = t270 * t453 + t271 * t450;
t534 = t270 * t450 - t271 * t453;
t448 = sin(qJ(6));
t452 = cos(qJ(5));
t489 = qJD(1) * qJD(5);
t480 = t452 * t489;
t449 = sin(qJ(5));
t488 = qJDD(1) * t449;
t405 = t480 + t488;
t397 = -qJDD(6) + t405;
t451 = cos(qJ(6));
t491 = qJD(1) * t452;
t400 = qJD(5) * t451 + t448 * t491;
t401 = -t448 * qJD(5) + t451 * t491;
t510 = t400 * t401;
t456 = -t397 - t510;
t532 = t448 * t456;
t531 = t451 * t456;
t481 = t449 * t489;
t487 = qJDD(1) * t452;
t407 = t481 - t487;
t340 = t400 * qJD(6) + t448 * qJDD(5) + t451 * t407;
t423 = qJD(1) * t449 - qJD(6);
t383 = t400 * t423;
t313 = -t383 + t340;
t474 = -t451 * qJDD(5) + t448 * t407;
t311 = (qJD(6) + t423) * t401 - t474;
t526 = qJ(2) * t409 + t408 * t522;
t525 = -qJ(2) * t408 + t409 * t522 + t315;
t521 = pkin(3) + pkin(7);
t305 = qJDD(1) * t521 + t462;
t290 = t449 * t305 + t452 * t441;
t479 = -t452 * t305 + t449 * t441;
t244 = t452 * t290 + t449 * t479;
t243 = t449 * t290 - t452 * t479;
t395 = t400 ^ 2;
t396 = t401 ^ 2;
t422 = t423 ^ 2;
t520 = pkin(5) * t449;
t519 = pkin(5) * t452;
t517 = qJDD(1) * pkin(1);
t454 = qJD(5) ^ 2;
t469 = pkin(8) * t452 - t520;
t460 = t455 * t469;
t283 = -qJDD(5) * pkin(5) - t454 * pkin(8) - t452 * t460 + t479;
t515 = t283 * t451;
t328 = t397 - t510;
t514 = t328 * t448;
t513 = t328 * t451;
t439 = t449 ^ 2;
t440 = t452 ^ 2;
t492 = t439 + t440;
t411 = t492 * qJDD(1);
t507 = t411 * t443;
t506 = t411 * t444;
t482 = t449 * t452 * t455;
t416 = qJDD(5) + t482;
t505 = t416 * t452;
t504 = t423 * t448;
t503 = t423 * t451;
t502 = t439 * t455;
t501 = t440 * t455;
t500 = t448 * t283;
t446 = t455 * pkin(7);
t300 = t306 - t446;
t498 = t449 * t300;
t497 = t449 * t416;
t495 = t452 * t300;
t470 = -pkin(8) * t449 - t519;
t274 = -t405 * pkin(5) - t407 * pkin(8) - t446 + (qJD(5) * t470 - (2 * qJD(4))) * qJD(1) + t316 + t529;
t284 = -t454 * pkin(5) + qJDD(5) * pkin(8) + t449 * t460 + t290;
t231 = t448 * t274 + t451 * t284;
t485 = t395 + t396;
t484 = t449 * t510;
t483 = t452 * t510;
t230 = -t451 * t274 + t284 * t448;
t200 = t448 * t230 + t451 * t231;
t384 = -pkin(1) * t455 + t458;
t385 = -t457 + t517;
t327 = t453 * t384 - t385 * t450;
t357 = -t417 * t450 - t453 * t418;
t473 = -t454 - t501;
t472 = t443 * t482;
t471 = t444 * t482;
t412 = qJDD(1) * t450 + t453 * t455;
t387 = -pkin(6) * t412 + g(3) * t453;
t413 = qJDD(1) * t453 - t450 * t455;
t386 = pkin(6) * t413 + g(3) * t450;
t467 = qJDD(5) - t482;
t199 = -t230 * t451 + t231 * t448;
t326 = t384 * t450 + t385 * t453;
t356 = t417 * t453 - t418 * t450;
t459 = t452 * t467;
t421 = t454 - t501;
t420 = -t454 - t502;
t419 = -t454 + t502;
t415 = (-t439 + t440) * t455;
t414 = t492 * t455;
t406 = -0.2e1 * t481 + t487;
t404 = 0.2e1 * t480 + t488;
t399 = t449 * t467;
t398 = t492 * t489;
t375 = -t396 + t422;
t374 = t395 - t422;
t373 = -t407 * t449 + t440 * t489;
t372 = -t405 * t452 + t439 * t489;
t369 = qJDD(5) * t444 + t398 * t443;
t368 = -qJDD(5) * t443 + t398 * t444;
t363 = -t449 * t473 - t505;
t362 = t420 * t452 - t399;
t361 = t452 * t473 - t497;
t360 = -t421 * t452 - t399;
t359 = t449 * t420 + t459;
t358 = -t419 * t449 - t505;
t354 = -t396 + t395;
t353 = -t396 - t422;
t352 = -t414 * t444 + t507;
t351 = -t414 * t443 - t506;
t342 = -t404 * t449 + t406 * t452;
t341 = -t422 - t395;
t339 = qJD(6) * t401 - t474;
t338 = -t372 * t443 - t471;
t337 = -t373 * t443 + t471;
t336 = -t373 * t444 - t472;
t335 = -t372 * t444 + t472;
t334 = -t360 * t443 - t444 * t487;
t333 = -t358 * t443 + t444 * t488;
t332 = -t360 * t444 + t452 * t486;
t331 = -t358 * t444 - t449 * t486;
t324 = t361 * t443 - t406 * t444;
t323 = t359 * t443 - t404 * t444;
t322 = -t361 * t444 - t406 * t443;
t321 = -t359 * t444 - t404 * t443;
t320 = (-t400 * t451 + t401 * t448) * t423;
t319 = (-t400 * t448 - t401 * t451) * t423;
t318 = -t342 * t443 + t415 * t444;
t317 = -t342 * t444 - t415 * t443;
t314 = -t383 - t340;
t312 = (qJD(6) - t423) * t401 - t474;
t304 = t340 * t451 - t401 * t504;
t303 = t340 * t448 + t401 * t503;
t302 = -t339 * t448 + t400 * t503;
t301 = t339 * t451 + t400 * t504;
t299 = t351 * t450 + t352 * t453;
t298 = -t351 * t453 + t352 * t450;
t295 = -t320 * t449 - t397 * t452;
t294 = t374 * t451 + t514;
t293 = -t375 * t448 + t531;
t292 = t374 * t448 - t513;
t291 = t375 * t451 + t532;
t288 = -t353 * t448 + t513;
t287 = t353 * t451 + t514;
t286 = t341 * t451 - t532;
t285 = t341 * t448 + t531;
t282 = -t304 * t449 + t483;
t281 = -t302 * t449 - t483;
t280 = t322 * t450 + t324 * t453;
t279 = t321 * t450 + t323 * t453;
t278 = -t322 * t453 + t324 * t450;
t277 = -t321 * t453 + t323 * t450;
t267 = qJ(2) * t441 + qJ(3) * t270;
t266 = t312 * t451 - t313 * t448;
t265 = t311 * t451 - t314 * t448;
t264 = t312 * t448 + t313 * t451;
t263 = t311 * t448 + t314 * t451;
t262 = -qJ(3) * t271 + t441 * t522;
t261 = -t295 * t443 + t319 * t444;
t260 = -t295 * t444 - t319 * t443;
t259 = pkin(4) * t361 - qJ(4) * t363 - t290;
t258 = pkin(4) * t359 - qJ(4) * t362 - t479;
t253 = -t294 * t449 + t311 * t452;
t252 = -t293 * t449 - t314 * t452;
t251 = -pkin(4) * t404 - t362 * t521 + t495;
t250 = -pkin(4) * t406 - t363 * t521 - t498;
t249 = t288 * t452 + t313 * t449;
t248 = t449 * t288 - t313 * t452;
t247 = t286 * t452 - t449 * t312;
t246 = t286 * t449 + t312 * t452;
t245 = -qJ(3) * t255 + (pkin(3) * t443 - qJ(4) * t444 + qJ(2)) * t441;
t242 = -t266 * t449 - t354 * t452;
t241 = -qJ(3) * t257 + (pkin(3) * t444 + qJ(4) * t443 + t522) * t441;
t240 = -pkin(4) * t414 - t244;
t239 = -t282 * t443 + t303 * t444;
t238 = -t281 * t443 + t301 * t444;
t237 = -t282 * t444 - t303 * t443;
t236 = -t281 * t444 - t301 * t443;
t235 = t265 * t452 - t449 * t485;
t234 = t449 * t265 + t452 * t485;
t233 = -pkin(8) * t287 + t515;
t232 = -pkin(8) * t285 + t500;
t229 = -t253 * t443 + t292 * t444;
t228 = -t252 * t443 + t291 * t444;
t227 = -t253 * t444 - t292 * t443;
t226 = -t252 * t444 - t291 * t443;
t224 = pkin(4) * t506 - qJ(3) * t351 - t240 * t443;
t223 = -pkin(4) * t507 - qJ(3) * t352 - t240 * t444;
t222 = t248 * t443 + t287 * t444;
t221 = -t248 * t444 + t287 * t443;
t220 = t243 * t443 + t300 * t444;
t219 = -t243 * t444 + t300 * t443;
t216 = t246 * t443 + t285 * t444;
t215 = -t246 * t444 + t285 * t443;
t212 = -t242 * t443 + t264 * t444;
t211 = -t242 * t444 - t264 * t443;
t210 = -pkin(5) * t287 + t231;
t209 = -pkin(5) * t285 + t230;
t208 = t234 * t443 + t263 * t444;
t207 = -t234 * t444 + t263 * t443;
t206 = pkin(4) * t243 - qJ(4) * t244;
t205 = qJ(2) * t363 - qJ(3) * t322 - t250 * t443 + t259 * t444;
t204 = qJ(2) * t362 - qJ(3) * t321 - t251 * t443 + t258 * t444;
t203 = -qJ(3) * t324 - t444 * t250 - t443 * t259 + t363 * t522;
t202 = -qJ(3) * t323 - t444 * t251 - t443 * t258 + t362 * t522;
t201 = pkin(4) * t300 - t244 * t521;
t198 = t221 * t450 + t222 * t453;
t197 = -t221 * t453 + t222 * t450;
t196 = t219 * t450 + t220 * t453;
t195 = -t219 * t453 + t220 * t450;
t194 = t215 * t450 + t216 * t453;
t193 = -t215 * t453 + t216 * t450;
t192 = pkin(4) * t248 - pkin(5) * t313 + pkin(8) * t288 - qJ(4) * t249 + t500;
t191 = t200 * t452 + t449 * t283;
t190 = t200 * t449 - t283 * t452;
t189 = pkin(4) * t246 + pkin(5) * t312 + pkin(8) * t286 - qJ(4) * t247 - t515;
t188 = -pkin(8) * t263 - t199;
t187 = t207 * t450 + t208 * t453;
t186 = -t207 * t453 + t208 * t450;
t185 = pkin(4) * t287 - t452 * t210 - t449 * t233 - t249 * t521;
t184 = pkin(4) * t285 - t452 * t209 - t449 * t232 - t247 * t521;
t183 = pkin(4) * t234 + pkin(5) * t485 + pkin(8) * t265 - qJ(4) * t235 + t200;
t182 = t190 * t443 + t199 * t444;
t181 = -t190 * t444 + t199 * t443;
t180 = qJ(2) * t244 - qJ(3) * t219 - t201 * t443 + t206 * t444;
t179 = -t449 * t188 + (pkin(4) + t519) * t263 - t521 * t235;
t178 = -qJ(3) * t220 - t444 * t201 - t443 * t206 + t244 * t522;
t177 = pkin(4) * t190 - pkin(5) * t283 + pkin(8) * t200 - qJ(4) * t191;
t176 = qJ(2) * t249 - qJ(3) * t221 - t185 * t443 + t192 * t444;
t175 = qJ(2) * t247 - qJ(3) * t215 - t184 * t443 + t189 * t444;
t174 = -qJ(3) * t222 - t444 * t185 - t443 * t192 + t249 * t522;
t173 = t181 * t450 + t182 * t453;
t172 = -t181 * t453 + t182 * t450;
t171 = -qJ(3) * t216 - t444 * t184 - t443 * t189 + t247 * t522;
t170 = -t521 * t191 + (pkin(4) - t470) * t199;
t169 = qJ(2) * t235 - qJ(3) * t207 - t179 * t443 + t183 * t444;
t168 = -qJ(3) * t208 - t444 * t179 - t443 * t183 + t235 * t522;
t167 = qJ(2) * t191 - qJ(3) * t181 - t170 * t443 + t177 * t444;
t166 = -qJ(3) * t182 - t444 * t170 - t443 * t177 + t191 * t522;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t412, -t413, 0, t357, 0, 0, 0, 0, 0, 0, -t412, 0, t413, t327, 0, 0, 0, 0, 0, 0, -t478, t477, 0, -t534, 0, 0, 0, 0, 0, 0, 0, t478, -t477, t214, 0, 0, 0, 0, 0, 0, t279, t280, t299, t196, 0, 0, 0, 0, 0, 0, t194, t198, t187, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t413, -t412, 0, t356, 0, 0, 0, 0, 0, 0, t413, 0, t412, t326, 0, 0, 0, 0, 0, 0, t477, t478, 0, t217, 0, 0, 0, 0, 0, 0, 0, -t477, -t478, t213, 0, 0, 0, 0, 0, 0, t277, t278, t298, t195, 0, 0, 0, 0, 0, 0, t193, t197, t186, t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, 0, 0, 0, 0, 0, 0, -t362, -t363, 0, -t244, 0, 0, 0, 0, 0, 0, -t247, -t249, -t235, -t191; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t413, 0, -t412, 0, -t386, -t387, -t356, -pkin(6) * t356, 0, t413, 0, 0, t412, 0, -t386, -t326, t387, -pkin(6) * t326 + (-pkin(1) * t450 + qJ(2) * t453) * g(3), 0, 0, -t477, 0, -t478, 0, t546, -t545, t217, -pkin(6) * t217 - t262 * t450 + t267 * t453, 0, t477, t478, 0, 0, 0, t213, -t546, t545, -pkin(6) * t213 - t241 * t450 + t245 * t453, -t336 * t450 + t337 * t453, -t317 * t450 + t318 * t453, -t332 * t450 + t334 * t453, -t335 * t450 + t338 * t453, -t331 * t450 + t333 * t453, -t368 * t450 + t369 * t453, -pkin(6) * t277 - t202 * t450 + t204 * t453, -pkin(6) * t278 - t203 * t450 + t205 * t453, -pkin(6) * t298 - t223 * t450 + t224 * t453, -pkin(6) * t195 - t178 * t450 + t180 * t453, -t237 * t450 + t239 * t453, -t211 * t450 + t212 * t453, -t226 * t450 + t228 * t453, -t236 * t450 + t238 * t453, -t227 * t450 + t229 * t453, -t260 * t450 + t261 * t453, -pkin(6) * t193 - t171 * t450 + t175 * t453, -pkin(6) * t197 - t174 * t450 + t176 * t453, -pkin(6) * t186 - t168 * t450 + t169 * t453, -pkin(6) * t172 - t166 * t450 + t167 * t453; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t412, 0, t413, 0, t387, -t386, t357, pkin(6) * t357, 0, t412, 0, 0, -t413, 0, t387, t327, t386, pkin(6) * t327 + (pkin(1) * t453 + qJ(2) * t450) * g(3), 0, 0, -t478, 0, t477, 0, -t545, -t546, t534, -pkin(6) * t534 + t262 * t453 + t267 * t450, 0, t478, -t477, 0, 0, 0, -t214, t545, t546, pkin(6) * t214 + t241 * t453 + t245 * t450, t336 * t453 + t337 * t450, t317 * t453 + t318 * t450, t332 * t453 + t334 * t450, t335 * t453 + t338 * t450, t331 * t453 + t333 * t450, t368 * t453 + t369 * t450, pkin(6) * t279 + t202 * t453 + t204 * t450, pkin(6) * t280 + t203 * t453 + t205 * t450, pkin(6) * t299 + t223 * t453 + t224 * t450, pkin(6) * t196 + t178 * t453 + t180 * t450, t237 * t453 + t239 * t450, t211 * t453 + t212 * t450, t226 * t453 + t228 * t450, t236 * t453 + t238 * t450, t227 * t453 + t229 * t450, t260 * t453 + t261 * t450, pkin(6) * t194 + t171 * t453 + t175 * t450, pkin(6) * t198 + t174 * t453 + t176 * t450, pkin(6) * t187 + t168 * t453 + t169 * t450, pkin(6) * t173 + t166 * t453 + t167 * t450; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t417, t418, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t468 + 0.2e1 * t517, 0, 0.2e1 * t437 + t464, pkin(1) * t385 + qJ(2) * t384, 0, 0, 0, 0, 0, qJDD(1), t525, t316 + t526, 0, qJ(2) * t271 + t270 * t522, qJDD(1), 0, 0, 0, 0, 0, 0, -qJDD(4) - 0.2e1 * t516 - t525, 0.2e1 * t436 + t466 - t526, pkin(3) * t309 + qJ(2) * t257 - qJ(4) * t306 - t255 * t522, (-t407 - t481) * t452, -t404 * t452 - t406 * t449, t449 * t421 - t459, (t405 + t480) * t449, -t419 * t452 + t497, 0, qJ(2) * t323 + qJ(4) * t404 - t321 * t522 + t359 * t521 - t498, qJ(2) * t324 + qJ(4) * t406 - t322 * t522 + t361 * t521 - t495, qJ(2) * t352 + qJ(4) * t414 - t351 * t522 + t411 * t521 + t243, qJ(2) * t220 - qJ(4) * t300 - t219 * t522 + t243 * t521, -t304 * t452 - t484, -t266 * t452 + t354 * t449, -t293 * t452 + t314 * t449, -t302 * t452 + t484, -t294 * t452 - t311 * t449, -t320 * t452 + t397 * t449, qJ(2) * t216 - qJ(4) * t285 + t449 * t209 - t215 * t522 - t452 * t232 + t246 * t521, qJ(2) * t222 - qJ(4) * t287 + t449 * t210 - t221 * t522 - t452 * t233 + t248 * t521, qJ(2) * t208 - t452 * t188 + (-qJ(4) - t520) * t263 + t521 * t234 - t522 * t207, qJ(2) * t182 + t521 * t190 - t522 * t181 + (-qJ(4) + t469) * t199;];
tauB_reg  = t1;
