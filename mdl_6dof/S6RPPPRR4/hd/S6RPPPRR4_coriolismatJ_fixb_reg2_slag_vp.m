% Calculate inertial parameters regressor of coriolis matrix for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
% 
% Output:
% cmat_reg [(6*6)x(6*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPPRR4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:35:58
% EndTime: 2019-03-09 01:36:04
% DurationCPUTime: 4.37s
% Computational Cost: add. (3393->326), mult. (5680->462), div. (0->0), fcn. (5166->6), ass. (0->251)
t230 = cos(qJ(5));
t224 = t230 ^ 2;
t297 = 0.1e1 / 0.2e1 + t224 / 0.2e1;
t228 = sin(qJ(5));
t222 = t228 ^ 2;
t380 = t222 / 0.2e1;
t263 = t380 + t297;
t227 = sin(qJ(6));
t384 = 0.2e1 * t227;
t225 = sin(pkin(9));
t212 = t225 * qJD(2);
t226 = cos(pkin(9));
t383 = -pkin(1) - pkin(2);
t158 = t226 * qJ(2) + t225 * t383 - qJ(4);
t308 = t158 * qJD(1);
t254 = t212 + t308;
t221 = t227 ^ 2;
t229 = cos(qJ(6));
t223 = t229 ^ 2;
t321 = t221 + t223;
t190 = t222 - t224;
t191 = t223 - t221;
t341 = t229 * t230;
t267 = t341 * t384;
t243 = qJD(1) * t267 + t191 * qJD(5);
t343 = t229 * t225;
t348 = t227 * t228;
t145 = t226 * t348 + t343;
t382 = -t145 / 0.2e1;
t381 = -t222 / 0.2e1;
t379 = t225 / 0.2e1;
t378 = t227 / 0.2e1;
t377 = -t228 / 0.2e1;
t376 = t228 / 0.2e1;
t375 = -t229 / 0.2e1;
t374 = t229 / 0.2e1;
t246 = t225 * qJ(2) - t226 * t383 + pkin(3);
t155 = pkin(7) + t246;
t339 = t230 * t228;
t372 = t228 * pkin(5);
t261 = t230 * pkin(8) - t372;
t233 = t158 + t261;
t346 = t229 * t155;
t293 = t228 * t346;
t71 = t227 * t233 + t293;
t364 = t71 * t230;
t70 = t155 * t348 - t229 * t233;
t366 = t70 * t230;
t347 = t227 * t230;
t292 = t155 * t347;
t370 = t230 * pkin(5);
t371 = t228 * pkin(8);
t176 = -t370 - t371;
t345 = t229 * t176;
t88 = -t292 + t345;
t291 = t155 * t341;
t351 = t227 * t176;
t89 = t291 + t351;
t8 = -t155 * t339 + (t89 * t376 + t364 / 0.2e1) * t229 + (t88 * t377 + t366 / 0.2e1) * t227;
t373 = t8 * qJD(5);
t342 = t229 * t226;
t350 = t227 * t225;
t249 = t228 * t342 - t350;
t239 = t249 * t229;
t294 = t226 * t339;
t30 = -t294 + (t239 / 0.2e1 + t145 * t378 + t321 * t226 * t376) * t230;
t369 = t30 * qJD(5);
t237 = -t239 / 0.2e1;
t262 = t223 / 0.2e1 + t221 / 0.2e1 - 0.1e1 / 0.2e1;
t274 = -t348 / 0.2e1;
t354 = t224 * t226;
t31 = t145 * t274 + t226 * t380 + t228 * t237 + t262 * t354;
t368 = t31 * qJD(5);
t367 = t70 * t228;
t365 = t71 * t228;
t363 = t88 * t230;
t362 = t89 * t230;
t10 = (t363 + t367) * t229 + (t362 - t365) * t227;
t361 = t10 * qJD(1);
t13 = -t366 + (t88 + 0.2e1 * t292) * t228;
t360 = t13 * qJD(1);
t14 = t364 + (t89 - 0.2e1 * t291) * t228;
t359 = t14 * qJD(1);
t295 = t225 * t348;
t144 = -t295 + t342;
t358 = t144 * t227;
t357 = t145 * t228;
t356 = t158 * t226;
t355 = t224 * t225;
t353 = t224 * t227;
t210 = t224 * t229;
t352 = t226 * t230;
t349 = t227 * t226;
t344 = t229 * t222;
t23 = t71 * t227 - t70 * t229;
t340 = t23 * qJD(1);
t188 = t355 / 0.2e1;
t238 = t249 * t378;
t273 = t145 * t375;
t232 = t238 + t273;
t146 = t228 * t343 + t349;
t278 = t146 * t374;
t24 = t144 * t274 + t228 * t278 + t188 - t232;
t338 = t24 * qJD(1);
t112 = t228 * t238;
t27 = t112 + t358 / 0.2e1 + (-t357 / 0.2e1 - t146 / 0.2e1) * t229;
t337 = t27 * qJD(1);
t32 = -t155 * t353 - t367;
t336 = t32 * qJD(1);
t33 = -t224 * t346 - t365;
t335 = t33 * qJD(1);
t320 = t222 + t224;
t157 = t320 * t225;
t40 = t155 * t157 + t356;
t334 = t40 * qJD(1);
t248 = t278 - t358 / 0.2e1;
t41 = (t225 * t377 + t248) * t230;
t333 = t41 * qJD(1);
t63 = t263 * t342 - t295;
t332 = t63 * qJD(1);
t272 = -t343 / 0.2e1;
t64 = (t272 + t382) * t228 - t297 * t349;
t331 = t64 * qJD(1);
t270 = t341 / 0.2e1;
t69 = t230 * t237 + t249 * t270;
t330 = t69 * qJD(1);
t329 = t69 * qJD(2);
t72 = (t144 * t229 + t146 * t227) * t230;
t328 = t72 * qJD(1);
t275 = t349 / 0.2e1;
t252 = t228 * t275 + t382;
t76 = (t272 + t252) * t230;
t327 = t76 * qJD(1);
t77 = t225 * t347;
t326 = t77 * qJD(1);
t87 = -t246 * t225 - t356;
t325 = t87 * qJD(1);
t90 = (t225 ^ 2 + t226 ^ 2) * qJ(2);
t324 = t90 * qJD(1);
t93 = t144 * t228 - t224 * t350;
t323 = t93 * qJD(1);
t94 = t146 * t228 + t224 * t343;
t322 = t94 * qJD(1);
t319 = qJ(2) * qJD(1);
t318 = qJD(5) * t227;
t317 = qJD(5) * t229;
t316 = qJD(6) * t227;
t315 = qJD(6) * t229;
t268 = t321 * t230;
t101 = t228 * t268 - t339;
t314 = t101 * qJD(5);
t134 = t263 * t225;
t313 = t134 * qJD(1);
t137 = t263 * t227;
t312 = t137 * qJD(1);
t138 = -t210 / 0.2e1 + (-0.1e1 / 0.2e1 + t381) * t229;
t311 = t138 * qJD(1);
t208 = t221 * t230;
t209 = t223 * t230;
t152 = t208 / 0.2e1 - t209 / 0.2e1;
t310 = t152 * qJD(6);
t309 = t157 * qJD(1);
t164 = -t208 - t209;
t307 = t164 * qJD(1);
t165 = t190 * t227;
t306 = t165 * qJD(1);
t166 = -t210 + t344;
t305 = t166 * qJD(1);
t304 = t190 * qJD(1);
t303 = t226 * qJD(2);
t302 = t228 * qJD(1);
t301 = t228 * qJD(4);
t217 = t228 * qJD(5);
t300 = t230 * qJD(1);
t299 = t230 * qJD(5);
t298 = t230 * qJD(6);
t296 = t370 / 0.2e1;
t290 = t227 * t298;
t289 = t228 * t315;
t288 = t229 * t298;
t287 = t225 * t302;
t286 = t227 * t299;
t285 = t227 * t315;
t284 = t227 * t317;
t283 = t226 * t302;
t282 = t229 * t299;
t205 = t228 * t299;
t281 = t225 * t300;
t280 = t226 * t300;
t279 = t226 * t299;
t204 = t228 * t300;
t276 = -t349 / 0.2e1;
t271 = -t342 / 0.2e1;
t269 = pkin(8) * t321;
t266 = qJD(5) * t321;
t265 = qJD(4) - t303;
t264 = t224 * t285;
t259 = qJD(5) * t267;
t206 = t228 * t316;
t258 = t206 - t282;
t257 = -t88 * t227 + t89 * t229;
t12 = -t70 * t144 + t71 * t146 + t155 * t355;
t256 = t12 * qJD(1) + t41 * qJD(3);
t255 = (qJD(6) - t302) * t230;
t253 = t371 / 0.2e1 + t296;
t245 = -t176 / 0.2e1 + t253;
t92 = t245 * t229;
t251 = pkin(5) * t318 - t92 * qJD(1);
t91 = t245 * t227;
t250 = pkin(5) * t317 + t91 * qJD(1);
t247 = t229 * t255;
t99 = t152 * qJD(1) + t284;
t95 = t227 * qJD(1) * t210 - t152 * qJD(5);
t163 = t191 * t224;
t244 = -t163 * qJD(1) + t259;
t147 = t229 * t217 + t290;
t242 = t286 + t289;
t148 = t227 * t217 - t288;
t11 = -t155 ^ 2 * t339 - t70 * t88 + t71 * t89;
t6 = (t362 / 0.2e1 - t365 / 0.2e1) * t229 + (-t363 / 0.2e1 - t367 / 0.2e1) * t227 + (t380 - t224 / 0.2e1) * t155;
t241 = t11 * qJD(1) + t6 * qJD(3) + t8 * qJD(4);
t240 = t248 * pkin(8);
t231 = t89 * t249 / 0.2e1 + t88 * t382 - t155 * t294;
t2 = t240 + (pkin(5) * t379 + (t71 * t374 + t70 * t378) * t226) * t230 + t231;
t39 = -t145 * t226 * t347 + (t227 * t343 + (-t223 + 0.1e1) * t226 * t228) * t352;
t236 = -t2 * qJD(1) - t39 * qJD(2) - t31 * qJD(3) - t30 * qJD(4);
t86 = t190 * t262;
t235 = t8 * qJD(1) - t30 * qJD(2) - t86 * qJD(3) + t101 * qJD(4);
t234 = t6 * qJD(1) - t31 * qJD(2) - t101 * qJD(3) - t86 * qJD(4);
t214 = t226 * qJD(1);
t213 = t225 * qJD(1);
t207 = -t299 / 0.2e1;
t203 = t229 * t302;
t202 = t227 * t302;
t156 = t204 - t298 / 0.2e1;
t150 = t158 * qJD(4);
t140 = t344 / 0.2e1 + t210 / 0.2e1 + t375;
t139 = t227 * t381 - t353 / 0.2e1 + t378;
t133 = -t225 / 0.2e1 + t222 * t379 + t188;
t85 = t86 * qJD(5);
t75 = t225 * t270 + t252 * t230;
t66 = t249 * t377 + t224 * t271 + t225 * t274 + t342 / 0.2e1;
t65 = t357 / 0.2e1 + t224 * t275 + t228 * t272 + t276;
t62 = t69 * qJD(6);
t59 = -t292 + t345 / 0.2e1 + t253 * t229;
t58 = -t291 - t351 / 0.2e1 - t253 * t227;
t26 = t228 * t273 + t112 + t248;
t25 = t248 * t228 + t188 + t232;
t3 = t225 * t296 + t271 * t364 + t276 * t366 - t231 + t240;
t1 = t41 * qJD(2) + t6 * qJD(5);
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), qJ(2) * qJD(2), 0, 0, 0, 0, 0, 0, t212, t303, 0, t90 * qJD(2), 0, 0, 0, 0, 0, 0, 0, -t212, t265, -t87 * qJD(2) - t150, -t205, t190 * qJD(5), 0, t205, 0, 0, -t158 * t299 + t228 * t265, t158 * t217 + t230 * t265, t157 * qJD(2), t40 * qJD(2) - t150, -t205 * t223 - t264, -t163 * qJD(6) + t228 * t259, -t166 * qJD(5) - t228 * t290, -t205 * t221 + t264, t165 * qJD(5) - t228 * t288, t205, -t93 * qJD(2) - t13 * qJD(5) - t33 * qJD(6) + t229 * t301, t94 * qJD(2) + t14 * qJD(5) + t32 * qJD(6) - t227 * t301, t72 * qJD(2) + t164 * qJD(4) + t10 * qJD(5), t12 * qJD(2) - t23 * qJD(4) + t11 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t319, 0, 0, 0, 0, 0, 0, t213, t214, 0, t324, 0, 0, 0, 0, 0, 0, 0, -t213, -t214, -t325, 0, 0, 0, 0, 0, 0, -t283, -t280, t309, t334 + t133 * qJD(4) + (0.1e1 - t320) * t225 * t303, 0, 0, 0, 0, 0, 0, t75 * qJD(5) + t66 * qJD(6) - t323, t65 * qJD(6) + t322, t26 * qJD(5) + t328 + t62 (t144 * t145 - t146 * t249 - t225 * t354) * qJD(2) + t25 * qJD(4) + t3 * qJD(5) + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), -t308, 0, 0, 0, 0, 0, 0, t302, t300, 0, t133 * qJD(2) - t308, 0, 0, 0, 0, 0, 0, t140 * qJD(6) + t203, t139 * qJD(6) - t202, t307, t25 * qJD(2) - t340 + t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t204, t304, t217, t204, t299, 0, -t155 * t217 - t158 * t300, -t155 * t299 + t158 * t302, 0, 0, t310 + (-t223 * t300 + t284) * t228, qJD(6) * t267 + t243 * t228, -t286 - t305, -t310 + (-t221 * t300 - t284) * t228, -t282 + t306, t156, -t360 + t75 * qJD(2) + (t227 * t261 - t293) * qJD(5) + t59 * qJD(6), t359 + (pkin(8) * t341 + (-pkin(5) * t229 + t155 * t227) * t228) * qJD(5) + t58 * qJD(6), t26 * qJD(2) + qJD(5) * t257 + t361, t3 * qJD(2) + (pkin(8) * t257 - t155 * t372) * qJD(5) + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t244, t227 * t255, t95, t247, t207, t66 * qJD(2) + t140 * qJD(4) + t59 * qJD(5) - t71 * qJD(6) - t335, t65 * qJD(2) + t139 * qJD(4) + t58 * qJD(5) + t70 * qJD(6) + t336, t329, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t319, 0, 0, 0, 0, 0, 0, -t213, -t214, 0, -t324, 0, 0, 0, 0, 0, 0, 0, t213, t214, -t225 * qJD(4) + t325, 0, 0, 0, 0, 0, 0, -t225 * t299 + t283, t217 * t225 + t280, -t309, -t134 * qJD(4) - t334, 0, 0, 0, 0, 0, 0, t76 * qJD(5) - t63 * qJD(6) + t323, t77 * qJD(5) - t64 * qJD(6) - t322, t27 * qJD(5) - t328 + t62, -t24 * qJD(4) - t2 * qJD(5) - t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t333 - t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t213, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t338 - t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217 * t226 - t281, t279 + t287, 0, 0, 0, 0, 0, 0, 0, 0, t147 * t226 + t327, -t148 * t226 + t326, -t266 * t352 + t337 (-t230 * t269 + t372) * qJD(5) * t226 + t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(6) * t249 + t227 * t279 - t332, -t145 * qJD(6) + t229 * t279 - t331, t330, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t333 - t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t217, 0, 0, 0, 0, 0, 0, 0, 0, t258, t242, -t228 * t266 (-t228 * t269 - t370) * qJD(5) + t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, t147, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), t254, 0, 0, 0, 0, 0, 0, -t302, -t300, 0, t134 * qJD(2) + t308, 0, 0, 0, 0, 0, 0, -t138 * qJD(6) - t203, -t137 * qJD(6) + t202, -t307, t24 * qJD(2) + t340 + t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, 0, 0, 0, 0, 0, 0, 0, 0, 0, t338 - t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217, -t299, 0, 0, 0, 0, 0, 0, 0, 0, -t147, t148, -t164 * qJD(5) (pkin(8) * t268 - t372) * qJD(5) + t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242 - t311, t258 - t312, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, -t304, 0, -t204, 0, 0, t254 * t230, -t254 * t228, 0, 0, t204 * t223 + t310, t247 * t384, -t289 + t305, t204 * t221 - t310, t206 - t306, -t156, -t76 * qJD(2) + t92 * qJD(6) + t360, -t77 * qJD(2) - t91 * qJD(6) - t359, -t27 * qJD(2) - t361, t2 * qJD(2) - t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, -t287, 0, 0, 0, 0, 0, 0, 0, 0, -t327, -t326, -t337, -t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t285, t191 * qJD(6), 0, -t285, 0, 0, -pkin(5) * t316, -pkin(5) * t315, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t243, -t203 + t315, -t99, t202 - t316, t300 / 0.2e1, -pkin(8) * t315 - t251, pkin(8) * t316 - t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t244 (t227 * t300 + t317) * t228, -t95 (t229 * t300 - t318) * t228, t207, t63 * qJD(2) + t138 * qJD(4) - t92 * qJD(5) + t335, t64 * qJD(2) + t137 * qJD(4) + t91 * qJD(5) - t336, -t329, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, t331, -t330, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t312, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t243, t203, t99, -t202, -t300 / 0.2e1, t251, t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t4;
