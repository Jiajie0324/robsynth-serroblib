% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:00:40
% EndTime: 2019-05-05 03:01:07
% DurationCPUTime: 22.57s
% Computational Cost: add. (37936->710), mult. (78455->1008), div. (0->0), fcn. (47067->10), ass. (0->500)
t665 = qJD(3) ^ 2;
t660 = sin(qJ(3));
t647 = t660 ^ 2;
t666 = qJD(2) ^ 2;
t789 = t647 * t666;
t628 = t665 + t789;
t663 = cos(qJ(3));
t833 = t663 * t666;
t752 = t660 * t833;
t625 = qJDD(3) - t752;
t795 = t625 * t660;
t567 = t628 * t663 + t795;
t653 = sin(pkin(6));
t655 = cos(pkin(6));
t781 = t663 * t625;
t574 = -t628 * t660 + t781;
t765 = qJD(2) * qJD(3);
t746 = t663 * t765;
t762 = qJDD(2) * t660;
t613 = 0.2e1 * t746 + t762;
t661 = sin(qJ(2));
t664 = cos(qJ(2));
t706 = t574 * t661 + t613 * t664;
t459 = -t653 * t567 + t655 * t706;
t516 = t574 * t664 - t613 * t661;
t652 = sin(pkin(10));
t654 = cos(pkin(10));
t404 = t459 * t654 + t516 * t652;
t816 = qJ(1) * t404;
t409 = t459 * t652 - t516 * t654;
t401 = qJ(1) * t409;
t455 = t655 * t567 + t653 * t706;
t698 = (t455 * t653 + t459 * t655) * pkin(7);
t624 = qJDD(3) + t752;
t604 = t663 * t624;
t648 = t663 ^ 2;
t788 = t648 * t666;
t630 = t665 + t788;
t565 = -t630 * t660 + t604;
t796 = t624 * t660;
t569 = t630 * t663 + t796;
t641 = t660 * t765;
t760 = qJDD(2) * t663;
t615 = -0.2e1 * t641 + t760;
t708 = t569 * t661 - t615 * t664;
t457 = t653 * t565 + t655 * t708;
t514 = t569 * t664 + t615 * t661;
t402 = t457 * t654 + t514 * t652;
t817 = qJ(1) * t402;
t407 = t457 * t652 - t514 * t654;
t400 = qJ(1) * t407;
t870 = pkin(1) * t455;
t869 = pkin(1) * t459;
t453 = -t655 * t565 + t653 * t708;
t699 = (t453 * t653 + t457 * t655) * pkin(7);
t867 = pkin(1) * t453;
t866 = pkin(1) * t457;
t802 = t615 * t660;
t805 = t613 * t663;
t545 = t802 + t805;
t561 = t613 * t660;
t800 = t615 * t663;
t548 = -t800 + t561;
t621 = (t647 - t648) * t666;
t709 = t548 * t661 + t621 * t664;
t446 = t653 * t545 + t655 * t709;
t505 = t548 * t664 - t621 * t661;
t389 = t446 * t652 - t505 * t654;
t865 = t446 * t654 + t505 * t652;
t631 = -t665 + t788;
t563 = t631 * t660 + t781;
t571 = -t631 * t663 + t795;
t759 = qJDD(2) * t664;
t695 = t571 * t661 + t663 * t759;
t472 = t653 * t563 + t655 * t695;
t526 = t571 * t664 - t661 * t760;
t420 = t472 * t652 - t526 * t654;
t864 = t472 * t654 + t526 * t652;
t771 = t647 + t648;
t617 = t771 * qJDD(2);
t620 = t771 * t666;
t549 = t617 * t664 - t620 * t661;
t703 = t617 * t661 + t620 * t664;
t831 = t703 * t655;
t478 = t549 * t652 + t654 * t831;
t815 = qJ(1) * t478;
t480 = t549 * t654 - t652 * t831;
t468 = qJ(1) * t480;
t824 = pkin(2) * t565;
t854 = -qJ(4) * t630 + t824;
t853 = -t655 * t563 + t653 * t695;
t852 = -t655 * t545 + t653 * t709;
t821 = pkin(8) * t565;
t832 = t703 * t653;
t697 = (t653 * t832 + t655 * t831) * pkin(7);
t774 = pkin(2) * t613 + pkin(8) * t574;
t847 = pkin(1) * t831;
t846 = pkin(1) * t832;
t845 = pkin(2) * t567;
t820 = pkin(8) * t567;
t659 = sin(qJ(6));
t662 = cos(qJ(6));
t769 = qJD(2) * t663;
t607 = -qJD(3) * t662 + t659 * t769;
t608 = qJD(3) * t659 + t662 * t769;
t556 = t607 * t608;
t692 = t746 + t762;
t599 = qJDD(6) + t692;
t830 = -t556 + t599;
t840 = t659 * t830;
t839 = t662 * t830;
t742 = g(1) * t652 - t654 * g(2);
t779 = g(3) - qJDD(1);
t838 = -t653 * t779 + t655 * t742;
t775 = pkin(2) * t615 - pkin(8) * t569;
t836 = (-t615 + t641) * pkin(3);
t835 = t652 * t779;
t834 = t654 * t779;
t772 = pkin(2) * t620 + pkin(8) * t617;
t770 = qJD(2) * t660;
t623 = -qJD(3) * pkin(4) - qJ(5) * t770;
t829 = -t623 * t770 - qJDD(5);
t642 = pkin(4) * t788;
t756 = 0.2e1 * qJD(5) * qJD(2);
t828 = -qJD(3) * t623 + t663 * t756 + t642;
t614 = -t641 + t760;
t827 = -t614 * pkin(4) + t829;
t622 = g(1) * t654 + g(2) * t652;
t554 = -t654 * t622 - t652 * t742;
t553 = -t652 * t622 + t654 * t742;
t583 = t653 * t742 + t655 * t779;
t577 = t663 * t583;
t737 = qJDD(3) * pkin(3) + t665 * qJ(4) - qJDD(4) - t577;
t523 = -t664 * t622 + t661 * t838;
t513 = -t666 * pkin(2) + qJDD(2) * pkin(8) + t523;
t733 = -pkin(3) * t663 - qJ(4) * t660;
t611 = t733 * qJD(2);
t740 = qJD(2) * t611 + t513;
t672 = t660 * t740 - t737;
t597 = t607 ^ 2;
t598 = t608 ^ 2;
t634 = qJD(6) + t770;
t632 = t634 ^ 2;
t826 = pkin(3) + pkin(4);
t825 = pkin(4) + pkin(9);
t823 = pkin(7) * t653;
t822 = pkin(7) * t655;
t818 = pkin(5) + qJ(4);
t814 = qJ(4) * t620;
t812 = qJ(4) * t663;
t784 = t660 * t513;
t466 = t577 + t784;
t773 = -t663 * t513 + t660 * t583;
t379 = t466 * t663 + t660 * t773;
t811 = t379 * t661;
t735 = t661 * t622 + t664 * t838;
t693 = qJDD(2) * pkin(2) + t666 * pkin(8) + t735;
t810 = t693 * t660;
t809 = t693 * t663;
t521 = t556 + t599;
t808 = t521 * t662;
t807 = t607 * t634;
t803 = t614 * qJ(5);
t791 = t634 * t659;
t790 = t634 * t662;
t751 = t665 * pkin(3) + t773;
t767 = -0.2e1 * qJD(5) + t611;
t667 = ((2 * qJD(4)) + t623) * qJD(3) + t767 * t769 - t642 - t803 - t751;
t736 = pkin(5) * t660 + pkin(9) * t663;
t375 = -t665 * pkin(9) + qJDD(3) * t818 - t736 * t833 + t667;
t786 = t659 * t375;
t785 = t659 * t521;
t783 = t661 * t583;
t782 = t662 * t375;
t780 = t664 * t583;
t778 = -t514 * t823 - t866;
t777 = t516 * t823 + t869;
t776 = t549 * t823 + t847;
t766 = pkin(3) + t825;
t764 = qJD(4) * qJD(3);
t763 = qJDD(2) * t653;
t761 = qJDD(2) * t661;
t758 = qJDD(3) * qJ(4);
t757 = -t598 - t632;
t755 = t660 * t556;
t754 = t663 * t556;
t753 = qJ(5) * t788;
t750 = qJD(3) * t663 * qJ(5);
t749 = qJD(4) * t770;
t745 = -t514 * t822 + t867;
t744 = t516 * t822 - t870;
t743 = t549 * t822 - t846;
t380 = t466 * t660 - t663 * t773;
t739 = t661 * t752;
t738 = t664 * t752;
t732 = pkin(3) * t660 - t812;
t618 = -t661 * t666 + t759;
t731 = -pkin(7) * t618 - t783;
t702 = t664 * t666 + t761;
t730 = -pkin(7) * t702 + t780;
t531 = t607 * qJD(6) - qJDD(3) * t659 - t662 * t614;
t639 = 0.2e1 * t749;
t675 = t614 * pkin(3) + t693 + (t692 + t746) * qJ(4);
t669 = -t675 + t829;
t366 = -t669 + t639 + (0.2e1 * pkin(5) * t663 + (-pkin(3) - pkin(9)) * t660) * t765 - t753 + pkin(5) * t762 + t825 * t614;
t688 = -pkin(4) * t624 - t692 * qJ(5) - t737;
t673 = t688 + t784;
t376 = -t665 * pkin(5) - qJDD(3) * pkin(9) + (t750 + (-qJD(2) * t736 + t767) * t660) * qJD(2) + t673;
t331 = -t662 * t366 + t659 * t376;
t332 = t659 * t366 + t662 * t376;
t284 = t659 * t331 + t662 * t332;
t272 = t284 * t660 + t375 * t663;
t283 = -t662 * t331 + t659 * t332;
t728 = t272 * t661 + t283 * t664;
t394 = t667 + t758;
t395 = (t660 * t767 + t750) * qJD(2) + t673;
t338 = t394 * t663 + t395 * t660;
t440 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t770 - t675;
t410 = t440 + t753 + t827;
t727 = t338 * t661 - t410 * t664;
t691 = -t611 * t769 + t751;
t676 = t691 - t758;
t432 = -t676 + 0.2e1 * t764;
t426 = pkin(3) * t620 + t432;
t427 = t672 + t814;
t349 = -t426 * t660 + t427 * t663;
t610 = t732 * qJDD(2);
t726 = t349 * t661 + t610 * t664;
t670 = t639 + t675;
t428 = -pkin(3) * t641 + qJ(4) * t613 + t670;
t385 = t428 + (t628 - t788) * qJ(5) - t827;
t524 = -qJ(5) * t625 + t613 * t826;
t350 = t385 * t663 - t524 * t660 - t820;
t645 = -0.2e1 * t764;
t668 = t645 + (-qJDD(3) - t625) * qJ(4) - t845 + t691;
t364 = -t628 * t826 + t668 + t803 + t828;
t725 = t350 * t661 + t364 * t664;
t360 = t432 * t663 + t660 * t672;
t724 = t360 * t661 - t440 * t664;
t502 = t531 - t807;
t700 = t662 * qJDD(3) - t659 * t614;
t674 = (qJD(6) - t634) * t608 - t700;
t415 = t659 * t502 + t662 * t674;
t519 = -t597 - t598;
t369 = t415 * t660 + t519 * t663;
t413 = -t502 * t662 + t659 * t674;
t723 = t369 * t661 + t413 * t664;
t722 = t380 * t661 + t664 * t693;
t497 = (-qJD(6) - t634) * t608 + t700;
t678 = t531 + t807;
t414 = t497 * t662 + t659 * t678;
t555 = t598 - t597;
t382 = -t414 * t660 + t555 * t663;
t412 = -t497 * t659 + t662 * t678;
t721 = t382 * t661 + t412 * t664;
t429 = t670 - t836;
t383 = qJ(4) * t800 - t429 * t660 - t821;
t387 = -pkin(3) * t624 + t672 - t854;
t720 = t383 * t661 + t387 * t664;
t384 = -pkin(3) * t561 + t428 * t663 - t820;
t386 = -pkin(3) * t628 + t668;
t719 = t384 * t661 + t386 * t664;
t537 = -t632 - t597;
t450 = t537 * t662 - t840;
t391 = t450 * t660 + t497 * t663;
t449 = t659 * t537 + t839;
t718 = t391 * t661 + t449 * t664;
t465 = -t659 * t757 - t808;
t393 = t465 * t660 + t663 * t678;
t464 = t662 * t757 - t785;
t717 = t393 * t661 + t464 * t664;
t581 = t597 - t632;
t485 = -t581 * t662 + t785;
t398 = -t485 * t660 + t663 * t674;
t483 = t581 * t659 + t808;
t716 = t398 * t661 + t483 * t664;
t582 = -t598 + t632;
t484 = t582 * t659 - t839;
t399 = -t484 * t660 + t502 * t663;
t482 = t582 * t662 + t840;
t715 = t399 * t661 + t482 * t664;
t433 = t466 - t824;
t462 = -t810 - t821;
t714 = t433 * t664 + t462 * t661;
t530 = qJD(6) * t608 - t700;
t491 = t530 * t659 + t607 * t790;
t438 = -t491 * t660 - t754;
t490 = t530 * t662 - t607 * t791;
t713 = t438 * t661 + t490 * t664;
t493 = -t531 * t662 - t608 * t791;
t439 = -t493 * t660 + t754;
t492 = t531 * t659 - t608 * t790;
t712 = t439 * t661 + t492 * t664;
t511 = (-t607 * t662 + t608 * t659) * t634;
t487 = -t511 * t660 + t599 * t663;
t510 = (t607 * t659 + t608 * t662) * t634;
t711 = t487 * t661 + t510 * t664;
t447 = -t523 * t661 - t664 * t735;
t448 = t523 * t664 - t661 * t735;
t588 = t702 * t655;
t704 = t588 * t654 + t618 * t652;
t535 = t588 * t652 - t618 * t654;
t603 = t771 * t765;
t701 = -qJDD(3) * t664 + t603 * t661;
t629 = t665 - t789;
t573 = -t629 * t660 + t604;
t694 = t573 * t661 - t660 * t759;
t578 = -t614 * t660 - t648 * t765;
t690 = t578 * t661 - t738;
t579 = -t647 * t765 + t663 * t692;
t689 = t579 * t661 + t738;
t252 = -qJ(5) * t375 + t283 * t766;
t254 = -qJ(5) * t284 + t283 * t818;
t271 = -t284 * t663 + t375 * t660;
t239 = -pkin(8) * t271 - t252 * t660 + t254 * t663;
t246 = -pkin(2) * t271 + t284 * t766 - t375 * t818;
t258 = t272 * t664 - t283 * t661;
t687 = pkin(7) * t258 + t239 * t661 + t246 * t664;
t268 = -qJ(5) * t519 + t413 * t766 + t283;
t324 = -qJ(5) * t415 + t413 * t818;
t368 = -t415 * t663 + t519 * t660;
t257 = -pkin(8) * t368 - t268 * t660 + t324 * t663;
t259 = -pkin(2) * t368 + t415 * t766 - t519 * t818 + t284;
t336 = t369 * t664 - t413 * t661;
t686 = pkin(7) * t336 + t257 * t661 + t259 * t664;
t297 = -qJ(5) * t450 + t449 * t818 - t331;
t304 = -qJ(5) * t497 + t449 * t766 - t786;
t390 = -t450 * t663 + t497 * t660;
t262 = -pkin(8) * t390 + t297 * t663 - t304 * t660;
t285 = -pkin(2) * t390 + t450 * t766 - t497 * t818 - t782;
t348 = t391 * t664 - t449 * t661;
t685 = pkin(7) * t348 + t262 * t661 + t285 * t664;
t299 = -qJ(5) * t465 + t464 * t818 - t332;
t308 = -qJ(5) * t678 + t464 * t766 - t782;
t392 = -t465 * t663 + t660 * t678;
t263 = -pkin(8) * t392 + t299 * t663 - t308 * t660;
t286 = -pkin(2) * t392 + t465 * t766 - t678 * t818 + t786;
t352 = t393 * t664 - t464 * t661;
t684 = pkin(7) * t352 + t263 * t661 + t286 * t664;
t317 = -qJ(5) * t394 - t410 * t826;
t337 = t394 * t660 - t395 * t663;
t342 = -qJ(4) * t410 - qJ(5) * t395;
t270 = -pkin(8) * t337 - t317 * t660 + t342 * t663;
t282 = -pkin(2) * t337 - qJ(4) * t394 + t395 * t826;
t311 = t338 * t664 + t410 * t661;
t683 = pkin(7) * t311 + t270 * t661 + t282 * t664;
t359 = t432 * t660 - t663 * t672;
t313 = -pkin(2) * t359 + pkin(3) * t672 - qJ(4) * t432;
t316 = -pkin(8) * t359 + t440 * t732;
t335 = t360 * t664 + t440 * t661;
t682 = pkin(7) * t335 + t313 * t664 + t316 * t661;
t367 = t645 - t826 * t620 + (t614 + t760) * qJ(5) + t676 + t828;
t637 = t660 * t756;
t377 = -qJ(5) * t746 - t814 + t637 + (qJ(5) * qJDD(2) - t740) * t660 - t688;
t333 = -t367 * t660 + t377 * t663;
t584 = (-t660 * t826 + t812) * qJDD(2);
t681 = -pkin(7) * t549 + t333 * t661 + t584 * t664;
t374 = (-t630 + t788) * qJ(5) + t669 - 0.2e1 * t749 + t836 + (-t614 - t615) * pkin(4);
t559 = -qJ(4) * t615 - qJ(5) * t624;
t351 = -t374 * t660 + t559 * t663 + t821;
t363 = t637 + t826 * t624 + (-t660 * t611 - t750) * qJD(2) - t673 + t854;
t680 = pkin(7) * t514 + t351 * t661 + t363 * t664;
t434 = -t773 + t845;
t463 = -t809 + t820;
t679 = -pkin(7) * t516 + t434 * t664 + t463 * t661;
t356 = t380 * t664 - t661 * t693;
t677 = pkin(7) * t356 - (-pkin(2) * t664 - pkin(8) * t661) * t379;
t589 = t618 * t655;
t587 = t618 * t653;
t586 = t702 * t653;
t580 = qJDD(3) * t661 + t603 * t664;
t566 = t629 * t663 + t796;
t560 = (t614 - t641) * t663;
t552 = t701 * t655;
t551 = t701 * t653;
t536 = -t589 * t652 - t654 * t702;
t534 = t589 * t654 - t652 * t702;
t529 = t579 * t664 - t739;
t528 = t578 * t664 + t739;
t527 = t573 * t664 + t660 * t761;
t496 = -t552 * t652 + t580 * t654;
t495 = t552 * t654 + t580 * t652;
t489 = -t780 + (t586 * t653 + t588 * t655) * pkin(7);
t488 = -t783 + (-t587 * t653 - t589 * t655) * pkin(7);
t486 = t511 * t663 + t599 * t660;
t477 = -t653 * t561 + t655 * t689;
t476 = -t653 * t560 + t655 * t690;
t475 = t655 * t561 + t653 * t689;
t474 = t655 * t560 + t653 * t690;
t473 = -t653 * t566 + t655 * t694;
t470 = t655 * t566 + t653 * t694;
t443 = t775 + t809;
t442 = -t774 - t810;
t441 = t448 * t655;
t437 = t493 * t663 + t755;
t436 = t491 * t663 - t755;
t431 = -pkin(1) * t587 - t653 * t735 + t655 * t730;
t430 = pkin(1) * t586 + t653 * t523 + t655 * t731;
t425 = -t477 * t652 + t529 * t654;
t424 = -t476 * t652 + t528 * t654;
t423 = t477 * t654 + t529 * t652;
t422 = t476 * t654 + t528 * t652;
t421 = -t473 * t652 + t527 * t654;
t419 = t473 * t654 + t527 * t652;
t417 = -t447 * t655 + t653 * t583;
t416 = -t447 * t653 - t655 * t583;
t411 = t487 * t664 - t510 * t661;
t397 = t484 * t663 + t502 * t660;
t396 = t485 * t663 + t660 * t674;
t381 = t414 * t663 + t555 * t660;
t373 = t439 * t664 - t492 * t661;
t372 = t438 * t664 - t490 * t661;
t371 = pkin(3) * t805 + t428 * t660 + t774;
t370 = qJ(4) * t802 + t429 * t663 + t775;
t365 = t380 + t772;
t362 = -t653 * t486 + t655 * t711;
t361 = pkin(2) * t693 + pkin(8) * t380;
t358 = t399 * t664 - t482 * t661;
t357 = t398 * t664 - t483 * t661;
t355 = -pkin(1) * t416 + t448 * t822;
t354 = -t417 * t652 + t448 * t654;
t353 = t417 * t654 + t448 * t652;
t347 = t664 * t379 - t697;
t346 = t374 * t663 + t559 * t660 - t775;
t345 = t385 * t660 + t524 * t663 + t774;
t344 = (-t416 * t653 - t417 * t655) * pkin(7);
t343 = t426 * t663 + t427 * t660 + t772;
t341 = -t653 * t437 + t655 * t712;
t340 = -t653 * t436 + t655 * t713;
t339 = t382 * t664 - t412 * t661;
t334 = t664 * t349 - t661 * t610 - t697;
t329 = -t661 * t434 + t664 * t463 + t698;
t328 = -t661 * t433 + t664 * t462 + t699;
t327 = -t653 * t397 + t655 * t715;
t326 = -t653 * t396 + t655 * t716;
t325 = t367 * t663 + t377 * t660 - t772;
t323 = -t653 * t392 + t655 * t717;
t322 = t655 * t392 + t653 * t717;
t321 = t379 * t653 + t655 * t722;
t320 = -t379 * t655 + t653 * t722;
t319 = -t653 * t390 + t655 * t718;
t318 = t655 * t390 + t653 * t718;
t315 = -t653 * t442 + t655 * t679 + t870;
t314 = -t653 * t443 + t655 * t714 + t745;
t312 = -t365 * t653 + t655 * t811 + t743;
t310 = t664 * t333 - t661 * t584 + t697;
t309 = -t653 * t381 + t655 * t721;
t307 = -t653 * t368 + t655 * t723;
t306 = t655 * t368 + t653 * t723;
t305 = t664 * t383 - t661 * t387 + t699;
t303 = t664 * t384 - t661 * t386 - t698;
t302 = pkin(8) * t360 + (-pkin(2) + t733) * t440;
t301 = -t653 * t359 + t655 * t724;
t300 = t655 * t359 + t653 * t724;
t298 = -t653 * t343 + t655 * t726 + t743;
t296 = -t321 * t652 + t356 * t654;
t295 = t321 * t654 + t356 * t652;
t294 = t664 * t350 - t661 * t364 - t698;
t293 = t664 * t351 - t661 * t363 - t699;
t292 = -t323 * t652 + t352 * t654;
t291 = t323 * t654 + t352 * t652;
t290 = -t653 * t370 + t655 * t720 + t745;
t289 = -t653 * t371 + t655 * t719 + t744;
t288 = -t319 * t652 + t348 * t654;
t287 = t319 * t654 + t348 * t652;
t281 = -t653 * t337 + t655 * t727;
t280 = t655 * t337 + t653 * t727;
t279 = -t307 * t652 + t336 * t654;
t278 = t307 * t654 + t336 * t652;
t277 = -t653 * t325 + t655 * t681 + t846;
t276 = -t653 * t345 + t655 * t725 + t744;
t275 = -t653 * t346 + t655 * t680 - t867;
t274 = -t301 * t652 + t335 * t654;
t273 = t301 * t654 + t335 * t652;
t269 = -(pkin(2) * t661 - pkin(8) * t664) * t379 + (-t320 * t653 - t321 * t655) * pkin(7);
t267 = -pkin(2) * t410 + pkin(8) * t338 + t317 * t663 + t342 * t660;
t266 = -pkin(1) * t320 - t653 * t361 + t655 * t677;
t265 = -t281 * t652 + t311 * t654;
t264 = t281 * t654 + t311 * t652;
t261 = pkin(2) * t464 + pkin(8) * t393 + t299 * t660 + t308 * t663;
t260 = pkin(2) * t449 + pkin(8) * t391 + t297 * t660 + t304 * t663;
t256 = pkin(2) * t413 + pkin(8) * t369 + t268 * t663 + t324 * t660;
t255 = -t661 * t313 + t664 * t316 + (-t300 * t653 - t301 * t655) * pkin(7);
t253 = -pkin(1) * t300 - t653 * t302 + t655 * t682;
t251 = -t653 * t271 + t655 * t728;
t250 = t655 * t271 + t653 * t728;
t249 = t664 * t263 - t661 * t286 + (-t322 * t653 - t323 * t655) * pkin(7);
t248 = t664 * t262 - t661 * t285 + (-t318 * t653 - t319 * t655) * pkin(7);
t247 = t664 * t270 - t661 * t282 + (-t280 * t653 - t281 * t655) * pkin(7);
t245 = -pkin(1) * t322 - t653 * t261 + t655 * t684;
t244 = -pkin(1) * t318 - t653 * t260 + t655 * t685;
t243 = t664 * t257 - t661 * t259 + (-t306 * t653 - t307 * t655) * pkin(7);
t242 = -pkin(1) * t280 - t653 * t267 + t655 * t683;
t241 = -t251 * t652 + t258 * t654;
t240 = t251 * t654 + t258 * t652;
t238 = -pkin(1) * t306 - t653 * t256 + t655 * t686;
t237 = pkin(2) * t283 + pkin(8) * t272 + t252 * t663 + t254 * t660;
t236 = t664 * t239 - t661 * t246 + (-t250 * t653 - t251 * t655) * pkin(7);
t235 = -pkin(1) * t250 - t653 * t237 + t655 * t687;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, 0, 0, 0, 0, 0, 0, t536, t535, 0, t354, 0, 0, 0, 0, 0, 0, t407, t409, t480, t296, 0, 0, 0, 0, 0, 0, t407, t480, -t409, t274, 0, 0, 0, 0, 0, 0, -t409, -t407, -t480, t265, 0, 0, 0, 0, 0, 0, t288, t292, t279, t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, 0, 0, 0, 0, 0, 0, t534, -t704, 0, t353, 0, 0, 0, 0, 0, 0, -t402, -t404, t478, t295, 0, 0, 0, 0, 0, 0, -t402, t478, t404, t273, 0, 0, 0, 0, 0, 0, t404, t402, -t478, t264, 0, 0, 0, 0, 0, 0, t287, t291, t278, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t779, 0, 0, 0, 0, 0, 0, t587, -t586, 0, t416, 0, 0, 0, 0, 0, 0, -t453, -t455, t832, t320, 0, 0, 0, 0, 0, 0, -t453, t832, t455, t300, 0, 0, 0, 0, 0, 0, t455, t453, -t832, t280, 0, 0, 0, 0, 0, 0, t318, t322, t306, t250; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t835, -t834, -t553, -qJ(1) * t553, 0, 0, -t535, 0, t536, t652 * t763, -qJ(1) * t534 - t431 * t652 + t488 * t654, qJ(1) * t704 - t430 * t652 + t489 * t654, -t441 * t652 + t447 * t654, -qJ(1) * t353 + t344 * t654 - t355 * t652, t425, t389, t421, t424, t420, t496, -t314 * t652 + t328 * t654 + t817, -t315 * t652 + t329 * t654 + t816, -t312 * t652 + t347 * t654 - t815, -qJ(1) * t295 - t266 * t652 + t269 * t654, t425, t421, -t389, t496, -t420, t424, -t290 * t652 + t305 * t654 + t817, -t298 * t652 + t334 * t654 - t815, -t289 * t652 + t303 * t654 - t816, -qJ(1) * t273 - t253 * t652 + t255 * t654, t424, t389, t420, t425, t421, t496, -t276 * t652 + t294 * t654 - t816, -t275 * t652 + t293 * t654 - t817, -t277 * t652 + t310 * t654 + t815, -qJ(1) * t264 - t242 * t652 + t247 * t654, -t341 * t652 + t373 * t654, -t309 * t652 + t339 * t654, -t327 * t652 + t358 * t654, -t340 * t652 + t372 * t654, -t326 * t652 + t357 * t654, -t362 * t652 + t411 * t654, -qJ(1) * t287 - t244 * t652 + t248 * t654, -qJ(1) * t291 - t245 * t652 + t249 * t654, -qJ(1) * t278 - t238 * t652 + t243 * t654, -qJ(1) * t240 - t235 * t652 + t236 * t654; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t834, -t835, t554, qJ(1) * t554, 0, 0, t704, 0, t534, -t654 * t763, qJ(1) * t536 + t431 * t654 + t488 * t652, qJ(1) * t535 + t430 * t654 + t489 * t652, t441 * t654 + t447 * t652, qJ(1) * t354 + t344 * t652 + t355 * t654, t423, -t865, t419, t422, -t864, t495, t314 * t654 + t328 * t652 + t400, t315 * t654 + t329 * t652 + t401, t312 * t654 + t347 * t652 + t468, qJ(1) * t296 + t266 * t654 + t269 * t652, t423, t419, t865, t495, t864, t422, t290 * t654 + t305 * t652 + t400, t298 * t654 + t334 * t652 + t468, t289 * t654 + t303 * t652 - t401, qJ(1) * t274 + t253 * t654 + t255 * t652, t422, -t865, -t864, t423, t419, t495, t276 * t654 + t294 * t652 - t401, t275 * t654 + t293 * t652 - t400, t277 * t654 + t310 * t652 - t468, qJ(1) * t265 + t242 * t654 + t247 * t652, t341 * t654 + t373 * t652, t309 * t654 + t339 * t652, t327 * t654 + t358 * t652, t340 * t654 + t372 * t652, t326 * t654 + t357 * t652, t362 * t654 + t411 * t652, qJ(1) * t288 + t244 * t654 + t248 * t652, qJ(1) * t292 + t245 * t654 + t249 * t652, qJ(1) * t279 + t238 * t654 + t243 * t652, qJ(1) * t241 + t235 * t654 + t236 * t652; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t742, t622, 0, 0, 0, 0, t586, 0, t587, t655 * qJDD(2), pkin(1) * t589 + t653 * t730 + t655 * t735, -pkin(1) * t588 - t655 * t523 + t653 * t731, t448 * t653, pkin(1) * t417 + t448 * t823, t475, -t852, t470, t474, -t853, t551, t655 * t443 + t653 * t714 + t778, t655 * t442 + t653 * t679 - t869, t365 * t655 + t653 * t811 + t776, pkin(1) * t321 + t655 * t361 + t653 * t677, t475, t470, t852, t551, t853, t474, t655 * t370 + t653 * t720 + t778, t655 * t343 + t653 * t726 + t776, t655 * t371 + t653 * t719 + t777, pkin(1) * t301 + t655 * t302 + t653 * t682, t474, -t852, -t853, t475, t470, t551, t655 * t345 + t653 * t725 + t777, t655 * t346 + t653 * t680 + t866, t655 * t325 + t653 * t681 - t847, pkin(1) * t281 + t655 * t267 + t653 * t683, t655 * t437 + t653 * t712, t655 * t381 + t653 * t721, t655 * t397 + t653 * t715, t655 * t436 + t653 * t713, t655 * t396 + t653 * t716, t655 * t486 + t653 * t711, pkin(1) * t319 + t655 * t260 + t653 * t685, pkin(1) * t323 + t655 * t261 + t653 * t684, pkin(1) * t307 + t655 * t256 + t653 * t686, pkin(1) * t251 + t655 * t237 + t653 * t687;];
tauB_reg  = t1;
