% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPPR3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPPR3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:11:00
% EndTime: 2019-03-08 21:11:07
% DurationCPUTime: 2.54s
% Computational Cost: add. (1146->247), mult. (2799->369), div. (0->0), fcn. (2633->8), ass. (0->195)
t150 = sin(qJ(3));
t212 = t150 * qJD(4);
t147 = sin(pkin(6));
t154 = cos(qJ(2));
t249 = t147 * t154;
t151 = sin(qJ(2));
t153 = cos(qJ(3));
t250 = t147 * t151;
t253 = cos(pkin(6));
t78 = t253 * t150 + t153 * t250;
t254 = t78 * t153;
t77 = t150 * t250 - t253 * t153;
t255 = t77 * t150;
t158 = -t147 ^ 2 * t154 * t151 + (t254 + t255) * t249;
t265 = t158 * qJD(1);
t268 = t212 * t249 + t265;
t209 = t153 * qJD(4);
t136 = t150 * qJ(4);
t223 = -t153 * pkin(3) - t136;
t267 = t223 * qJD(3) + t209;
t266 = pkin(8) - qJ(5);
t155 = -pkin(3) - pkin(4);
t236 = t155 * t150;
t144 = t150 ^ 2;
t146 = t153 ^ 2;
t116 = t144 + t146;
t216 = t116 * qJD(2);
t264 = t158 * qJD(2);
t149 = sin(qJ(6));
t143 = t149 ^ 2;
t152 = cos(qJ(6));
t145 = t152 ^ 2;
t117 = t145 - t143;
t239 = t152 * t153;
t202 = t149 * t239;
t182 = 0.2e1 * t202;
t161 = qJD(2) * t182 - t117 * qJD(3);
t148 = qJ(4) + pkin(5);
t140 = -pkin(9) + t155;
t251 = t140 * t150;
t58 = t148 * t153 + t251;
t263 = t58 / 0.2e1;
t262 = -t150 / 0.2e1;
t261 = t153 / 0.2e1;
t260 = t150 * pkin(3);
t259 = t149 * t58;
t243 = t150 * t152;
t111 = t266 * t150;
t248 = t149 * t111;
t104 = -pkin(2) + t223;
t81 = t153 * pkin(4) - t104;
t159 = t150 * pkin(5) + t153 * pkin(9) + t81;
t32 = -t152 * t159 + t248;
t3 = t58 * t243 + (-t32 + t248) * t153;
t258 = t3 * qJD(2);
t113 = t266 * t153;
t240 = t152 * t111;
t252 = t113 * t152;
t33 = t149 * t159 + t240;
t4 = (t252 + t259) * t150 - t113 * t243 + (t33 - t240) * t153;
t257 = t4 * qJD(2);
t256 = t77 * qJ(4);
t247 = t149 * t144;
t128 = t149 * t146;
t246 = t149 * t151;
t245 = t149 * t153;
t244 = t149 * t154;
t242 = t150 * t154;
t241 = t151 * t152;
t238 = t152 * t154;
t237 = t153 * qJ(4);
t83 = t237 + t236;
t34 = t83 * t150 + t81 * t153;
t233 = t34 * qJD(2);
t35 = -t81 * t150 + t83 * t153;
t232 = t35 * qJD(2);
t112 = -t237 + t260;
t47 = t104 * t153 + t112 * t150;
t231 = t47 * qJD(2);
t48 = -t104 * t150 + t112 * t153;
t230 = t48 * qJD(2);
t207 = -pkin(3) / 0.2e1 - pkin(4) / 0.2e1;
t59 = t237 + (t155 / 0.2e1 + t207) * t150;
t229 = t59 * qJD(2);
t228 = t249 * t216;
t95 = t128 + t247;
t227 = t95 * qJD(2);
t96 = -t128 + t247;
t226 = t96 * qJD(2);
t97 = t116 * t152;
t225 = t97 * qJD(2);
t118 = t146 - t144;
t98 = t118 * t152;
t224 = t98 * qJD(2);
t222 = qJD(2) * t147;
t221 = qJD(4) * t149;
t220 = qJD(4) * t152;
t219 = qJD(6) * t149;
t218 = qJD(6) * t150;
t217 = qJD(6) * t152;
t215 = t118 * qJD(2);
t132 = t144 * qJD(2);
t131 = t144 * qJD(4);
t214 = t149 * qJD(3);
t133 = t150 * qJD(2);
t213 = t150 * qJD(3);
t211 = t152 * qJD(3);
t210 = t153 * qJD(2);
t134 = t153 * qJD(3);
t208 = t153 * qJD(5);
t206 = pkin(2) * t133;
t205 = pkin(2) * t210;
t204 = pkin(8) * t213;
t203 = pkin(8) * t134;
t124 = t149 * t218;
t201 = t150 * t217;
t200 = t104 * t133;
t199 = t151 * t222;
t198 = t154 * t222;
t197 = t149 * t134;
t196 = t149 * t217;
t195 = t149 * t132;
t194 = t149 * t133;
t193 = t149 * t211;
t192 = t149 * t210;
t122 = t150 * t134;
t121 = t150 * t210;
t191 = t150 * t209;
t190 = t152 * t134;
t189 = t152 * t210;
t188 = -t249 / 0.2e1;
t187 = t245 / 0.2e1;
t186 = -t242 / 0.2e1;
t185 = t239 / 0.2e1;
t184 = t237 / 0.2e1;
t183 = -0.2e1 * t202;
t181 = qJD(6) + t133;
t179 = qJD(3) * t182;
t167 = t236 / 0.2e1 + t184;
t1 = (-t83 / 0.2e1 + t167) * t249;
t11 = t81 * t83;
t178 = -t1 * qJD(1) + t11 * qJD(2);
t20 = -t113 * t245 - t32 * t150;
t172 = t255 / 0.2e1 + t254 / 0.2e1;
t157 = t250 / 0.2e1 - t172;
t8 = t157 * t149;
t177 = t8 * qJD(1) + t20 * qJD(2);
t21 = -t113 * t239 - t33 * t150;
t7 = t157 * t152;
t176 = -t7 * qJD(1) - t21 * qJD(2);
t51 = t111 * t150 + t113 * t153;
t175 = qJD(1) * t157 - t51 * qJD(2);
t174 = t181 * t153;
t173 = t184 - t260 / 0.2e1;
t171 = t147 * t238 - t77 * t149;
t170 = t147 * t244 + t77 * t152;
t5 = (t112 / 0.2e1 + t173) * t249;
t169 = -t104 * t112 * qJD(2) + t5 * qJD(1);
t168 = t251 / 0.2e1 + t148 * t261;
t160 = t263 + t168;
t27 = t160 * t152;
t166 = t27 * qJD(2) + t148 * t214;
t26 = t160 * t149;
t165 = -t26 * qJD(2) + t148 * t211;
t82 = (t143 / 0.2e1 - t145 / 0.2e1) * t153;
t164 = -t82 * qJD(2) + t193;
t163 = t152 * qJD(2) * t128 + t82 * qJD(3);
t41 = t78 * qJD(3) + t150 * t198;
t40 = -t77 * qJD(3) + t153 * t198;
t94 = t117 * t146;
t162 = t94 * qJD(2) + t179;
t156 = (-t140 * t153 + t148 * t150) * qJD(3) - t209;
t142 = qJ(4) * qJD(4);
t141 = qJD(3) * qJ(4);
t127 = t134 / 0.2e1;
t123 = t152 * t133;
t100 = t113 * qJD(3);
t91 = -t123 - t217;
t90 = t181 * t149;
t85 = qJD(6) * t261 + t121;
t76 = t82 * qJD(6);
t75 = -t236 / 0.2e1 + t207 * t150;
t72 = t78 * qJD(4);
t63 = (t151 * t210 + t154 * t213) * t147;
t62 = -t134 * t249 + t150 * t199;
t25 = -t250 / 0.2e1 - t172;
t23 = -t113 * t149 + (-t168 + t263) * t152;
t22 = -t252 - t259 / 0.2e1 + t168 * t149;
t15 = -t170 * t153 / 0.2e1 + t77 * t185 + t188 * t245;
t14 = t171 * t261 + t185 * t249 + t77 * t187;
t10 = t170 * t262 - t78 * t239 / 0.2e1 + (t149 * t186 - t241 / 0.2e1) * t147;
t9 = t171 * t262 + t78 * t187 + (t152 * t186 + t246 / 0.2e1) * t147;
t6 = t112 * t188 + t173 * t249;
t2 = (t83 / 0.2e1 + t167) * t249;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t264, 0, 0, 0, t264, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t199, -t198, 0, 0, 0, 0, 0, -t63, t62, -t63, t228, -t62, t6 * qJD(3) + (t116 * t154 * pkin(8) + t104 * t151) * t222 + t268, -t62, t63, -t228, t2 * qJD(3) + t25 * qJD(5) + (-t151 * t81 + t154 * t51) * t222 + t268, 0, 0, 0, 0, 0 ((-t149 * t242 - t241) * t150 - t146 * t244) * t222 + t14 * qJD(3) + t10 * qJD(6) (-(t150 * t238 - t246) * t150 - t146 * t238) * t222 + t15 * qJD(3) + t9 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t40, -t41, 0, t40, t6 * qJD(2) + (-t78 * pkin(3) - t256) * qJD(3) + t72, t40, t41, 0, t2 * qJD(2) + (t78 * t155 - t256) * qJD(3) + t72, 0, 0, 0, 0, 0, t14 * qJD(2) - t211 * t77 - t219 * t78, t15 * qJD(2) + t214 * t77 - t217 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, 0, 0, t41, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 * qJD(2), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * qJD(2) - qJD(6) * t170 - t214 * t78, t9 * qJD(2) - qJD(6) * t171 - t211 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5 * qJD(3) - t265, 0, 0, 0, -t1 * qJD(3) + qJD(5) * t157 - t265, 0, 0, 0, 0, 0, t7 * qJD(6), -t8 * qJD(6); 0, 0, 0, 0, t122, t118 * qJD(3), 0, 0, 0, -pkin(2) * t213, -pkin(2) * t134, -t48 * qJD(3) + t191, 0, -t47 * qJD(3) + t131 (qJD(3) * t112 - t212) * t104, t34 * qJD(3) + t131, -t35 * qJD(3) - t191, t116 * qJD(5), t11 * qJD(3) - t51 * qJD(5) + t212 * t81, -t122 * t145 - t146 * t196, -t94 * qJD(6) + t150 * t179, -t98 * qJD(3) + t124 * t153, -t96 * qJD(3) + t153 * t201, t122, t3 * qJD(3) + t95 * qJD(5) + t21 * qJD(6) + t131 * t152, -t4 * qJD(3) + t97 * qJD(5) - t20 * qJD(6) - t131 * t149; 0, 0, 0, 0, t121, t215, t134, -t213, 0, -t203 - t206, t204 - t205, -t203 - t230, t267, -t204 - t231, pkin(8) * t267 - t169, -t111 * qJD(3) + t233, t100 - t232 (-t155 * t153 + t136) * qJD(3) - t209 (-t111 * qJ(4) + t113 * t155) * qJD(3) + t113 * qJD(4) + t75 * qJD(5) + t178, -t76 + (-t145 * t210 - t193) * t150, qJD(6) * t183 + t150 * t161, -t197 - t224, -t190 - t226, t85, t23 * qJD(6) - t111 * t211 + t149 * t156 + t258, t22 * qJD(6) + t111 * t214 + t152 * t156 - t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t134, t132, -t200 + t203, t132, -t121, -t134, t133 * t81 + t100, 0, 0, 0, 0, 0, t132 * t152 - t197, -t190 - t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t216, t75 * qJD(3) + t175, 0, 0, 0, 0, 0, t227, t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t162, t149 * t174, t152 * t174, t127, t23 * qJD(3) - t33 * qJD(6) - t176, t22 * qJD(3) + t32 * qJD(6) - t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 * qJD(2), 0, 0, 0, t1 * qJD(2), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -t121, -t215, 0, 0, 0, t206, t205, t230, 0, t231, t169, -t208 - t233, -t150 * qJD(5) + t232, 0, -t59 * qJD(5) - t178, t121 * t145 - t76, t181 * t183, -t201 + t224, t124 + t226, -t85, -t27 * qJD(6) - t152 * t208 - t258, t26 * qJD(6) + t149 * t208 + t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t142, qJD(4), 0, 0, t142, t196, t117 * qJD(6), 0, 0, 0, -t148 * t219 + t220, -t148 * t217 - t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t141, qJD(3), 0, 0, t141, 0, 0, 0, 0, 0, t211, -t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t210, -t133, 0, -t229, 0, 0, 0, 0, 0, -t189, t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, -t161, t91, t90, -t210 / 0.2e1, -t140 * t217 - t166, t140 * t219 - t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t121, 0, -t132, t200, -t132, t121, 0 (-qJD(2) * t81 - qJD(5)) * t150, 0, 0, 0, 0, 0 (-t132 - t218) * t152, t124 + t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t141, -qJD(3), 0, 0, -t141, 0, 0, 0, 0, 0, -t211, t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157 * qJD(2), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, t213, -t216, t59 * qJD(3) - t175 + t212, 0, 0, 0, 0, 0, -t124 + t190 - t227, -t197 - t201 - t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t210, t133, 0, t229, 0, 0, 0, 0, 0, t189, -t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t7 * qJD(2), t8 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, t162 (-t192 + t211) * t150 (-t189 - t214) * t150, t127, t27 * qJD(3) + (qJD(5) * t149 + t220) * t150 + t176, -t26 * qJD(3) + (qJD(5) * t152 - t221) * t150 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, t161, t123, -t194, t210 / 0.2e1, t166, t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, -t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t12;
