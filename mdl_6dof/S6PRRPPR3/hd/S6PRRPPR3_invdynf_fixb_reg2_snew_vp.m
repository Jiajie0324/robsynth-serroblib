% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:01:37
% EndTime: 2019-05-05 03:01:42
% DurationCPUTime: 5.33s
% Computational Cost: add. (8301->285), mult. (17295->314), div. (0->0), fcn. (10603->10), ass. (0->177)
t1755 = sin(qJ(3));
t1758 = cos(qJ(3));
t1761 = qJD(2) ^ 2;
t1795 = t1755 * t1758 * t1761;
t1723 = qJDD(3) + t1795;
t1760 = qJD(3) ^ 2;
t1744 = t1758 ^ 2;
t1806 = t1744 * t1761;
t1729 = t1760 + t1806;
t1689 = t1723 * t1758 - t1729 * t1755;
t1749 = sin(pkin(6));
t1751 = cos(pkin(6));
t1692 = t1723 * t1755 + t1729 * t1758;
t1814 = qJD(3) * t1755;
t1737 = qJD(2) * t1814;
t1799 = t1758 * qJDD(2);
t1717 = -0.2e1 * t1737 + t1799;
t1756 = sin(qJ(2));
t1759 = cos(qJ(2));
t1776 = t1692 * t1756 - t1717 * t1759;
t1654 = t1749 * t1689 + t1751 * t1776;
t1671 = t1692 * t1759 + t1717 * t1756;
t1748 = sin(pkin(10));
t1750 = cos(pkin(10));
t1637 = t1654 * t1748 - t1671 * t1750;
t1836 = t1654 * t1750 + t1671 * t1748;
t1724 = qJDD(3) - t1795;
t1743 = t1755 ^ 2;
t1728 = t1743 * t1761 + t1760;
t1690 = t1724 * t1755 + t1728 * t1758;
t1694 = t1724 * t1758 - t1728 * t1755;
t1813 = qJD(3) * t1758;
t1794 = qJD(2) * t1813;
t1800 = t1755 * qJDD(2);
t1715 = 0.2e1 * t1794 + t1800;
t1774 = t1694 * t1756 + t1715 * t1759;
t1656 = -t1749 * t1690 + t1751 * t1774;
t1673 = t1694 * t1759 - t1715 * t1756;
t1835 = t1656 * t1748 - t1673 * t1750;
t1636 = t1656 * t1750 + t1673 * t1748;
t1652 = t1751 * t1690 + t1749 * t1774;
t1650 = -t1751 * t1689 + t1749 * t1776;
t1787 = g(1) * t1748 - g(2) * t1750;
t1817 = -g(3) + qJDD(1);
t1826 = t1749 * t1817 + t1751 * t1787;
t1801 = t1743 + t1744;
t1718 = t1801 * qJDD(2);
t1721 = t1801 * t1761;
t1686 = t1718 * t1759 - t1721 * t1756;
t1772 = t1718 * t1756 + t1721 * t1759;
t1824 = t1772 * t1751;
t1663 = t1686 * t1750 - t1748 * t1824;
t1662 = t1686 * t1748 + t1750 * t1824;
t1825 = t1772 * t1749;
t1816 = qJD(2) * t1755;
t1818 = qJD(3) * pkin(4);
t1823 = qJDD(5) + (-qJ(5) * t1816 - t1818) * t1816 - qJ(5) * t1806;
t1754 = sin(qJ(6));
t1757 = cos(qJ(6));
t1815 = qJD(2) * t1758;
t1710 = -t1757 * qJD(3) + t1754 * t1815;
t1822 = t1710 ^ 2;
t1711 = qJD(3) * t1754 + t1757 * t1815;
t1821 = t1711 ^ 2;
t1731 = qJD(6) + t1816;
t1820 = t1731 ^ 2;
t1819 = 2 * qJD(4);
t1812 = qJDD(3) * qJ(4);
t1811 = t1710 * t1711;
t1722 = -g(1) * t1750 - g(2) * t1748;
t1679 = t1759 * t1722 + t1756 * t1826;
t1670 = -pkin(2) * t1761 + qJDD(2) * pkin(8) + t1679;
t1805 = t1755 * t1670;
t1713 = (-pkin(3) * t1758 - qJ(4) * t1755) * qJD(2);
t1804 = -(2 * qJD(5)) + t1713;
t1803 = qJD(6) - t1731;
t1802 = qJD(6) + t1731;
t1698 = -t1749 * t1787 + t1751 * t1817;
t1661 = t1758 * t1670 + t1755 * t1698;
t1798 = qJ(5) * t1813;
t1797 = qJ(5) * t1814;
t1793 = -(pkin(5) * t1755 + pkin(9) * t1758) * qJD(2) + t1804;
t1792 = -t1760 * pkin(3) + t1661;
t1791 = -t1820 - t1821;
t1716 = -t1737 + t1799;
t1789 = -t1754 * qJDD(3) - t1757 * t1716;
t1697 = t1758 * t1698;
t1788 = -qJDD(3) * pkin(3) - t1760 * qJ(4) + qJDD(4) - t1697;
t1786 = t1756 * t1722 - t1759 * t1826;
t1669 = -qJDD(2) * pkin(2) - t1761 * pkin(8) + t1786;
t1768 = t1794 + t1800;
t1765 = -t1716 * pkin(3) + t1669 + (-t1768 - t1794) * qJ(4);
t1622 = pkin(5) * t1800 + t1816 * t1819 + (pkin(4) + pkin(9)) * t1716 + (0.2e1 * pkin(5) * t1758 + (-pkin(3) - pkin(9)) * t1755) * qJD(3) * qJD(2) - t1765 + t1823;
t1764 = -pkin(4) * t1723 - t1768 * qJ(5) + t1788 + t1805;
t1626 = -t1760 * pkin(5) - qJDD(3) * pkin(9) + (t1755 * t1793 + t1798) * qJD(2) + t1764;
t1612 = t1622 * t1754 + t1626 * t1757;
t1782 = t1622 * t1757 - t1626 * t1754;
t1599 = t1612 * t1757 - t1754 * t1782;
t1762 = (t1819 - t1818) * qJD(3) - pkin(4) * t1806 - t1716 * qJ(5) + t1792;
t1625 = -t1760 * pkin(9) + (pkin(5) + qJ(4)) * qJDD(3) + (t1758 * t1793 - t1797) * qJD(2) + t1762;
t1595 = t1599 * t1755 + t1625 * t1758;
t1598 = t1754 * t1612 + t1757 * t1782;
t1785 = t1595 * t1756 + t1598 * t1759;
t1633 = t1812 + (t1758 * t1804 - t1797) * qJD(2) + t1762;
t1634 = (t1755 * t1804 + t1798) * qJD(2) + t1764;
t1616 = t1633 * t1758 + t1634 * t1755;
t1646 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t1816 + t1765;
t1639 = -t1716 * pkin(4) + t1646 - t1823;
t1784 = t1616 * t1756 - t1639 * t1759;
t1644 = qJD(3) * t1819 + t1713 * t1815 + t1792 + t1812;
t1645 = (qJD(2) * t1713 + t1670) * t1755 + t1788;
t1621 = t1644 * t1758 + t1645 * t1755;
t1783 = t1621 * t1756 - t1646 * t1759;
t1770 = -t1757 * qJDD(3) + t1754 * t1716;
t1666 = t1711 * t1803 + t1770;
t1766 = -t1710 * t1803 - t1789;
t1641 = t1666 * t1757 - t1754 * t1766;
t1676 = -t1821 - t1822;
t1624 = t1641 * t1755 + t1676 * t1758;
t1640 = t1754 * t1666 + t1757 * t1766;
t1781 = t1624 * t1756 + t1640 * t1759;
t1660 = t1697 - t1805;
t1628 = -t1660 * t1755 + t1661 * t1758;
t1780 = t1628 * t1756 - t1669 * t1759;
t1680 = -t1820 - t1822;
t1767 = -qJDD(6) - t1768;
t1763 = -t1767 - t1811;
t1649 = t1680 * t1757 - t1754 * t1763;
t1665 = -t1711 * t1802 - t1770;
t1630 = t1649 * t1755 + t1665 * t1758;
t1648 = t1754 * t1680 + t1757 * t1763;
t1779 = t1630 * t1756 + t1648 * t1759;
t1677 = t1767 - t1811;
t1659 = t1677 * t1757 - t1754 * t1791;
t1667 = t1710 * t1802 + t1789;
t1632 = t1659 * t1755 + t1667 * t1758;
t1658 = t1754 * t1677 + t1757 * t1791;
t1778 = t1632 * t1756 + t1658 * t1759;
t1777 = t1679 * t1756 - t1759 * t1786;
t1771 = qJDD(2) * t1759 - t1756 * t1761;
t1720 = -qJDD(2) * t1756 - t1759 * t1761;
t1702 = t1771 * t1751;
t1701 = t1720 * t1751;
t1700 = t1771 * t1749;
t1699 = t1720 * t1749;
t1647 = t1679 * t1759 + t1756 * t1786;
t1643 = -t1749 * t1698 + t1751 * t1777;
t1642 = t1751 * t1698 + t1749 * t1777;
t1631 = -t1659 * t1758 + t1667 * t1755;
t1629 = -t1649 * t1758 + t1665 * t1755;
t1627 = t1660 * t1758 + t1661 * t1755;
t1623 = -t1641 * t1758 + t1676 * t1755;
t1620 = t1644 * t1755 - t1645 * t1758;
t1619 = t1628 * t1759 + t1669 * t1756;
t1618 = t1632 * t1759 - t1658 * t1756;
t1617 = t1630 * t1759 - t1648 * t1756;
t1615 = t1633 * t1755 - t1634 * t1758;
t1614 = t1624 * t1759 - t1640 * t1756;
t1613 = t1621 * t1759 + t1646 * t1756;
t1610 = -t1749 * t1631 + t1751 * t1778;
t1609 = t1751 * t1631 + t1749 * t1778;
t1608 = -t1749 * t1627 + t1751 * t1780;
t1607 = t1751 * t1627 + t1749 * t1780;
t1606 = -t1749 * t1629 + t1751 * t1779;
t1605 = t1751 * t1629 + t1749 * t1779;
t1604 = t1616 * t1759 + t1639 * t1756;
t1603 = -t1749 * t1623 + t1751 * t1781;
t1602 = t1751 * t1623 + t1749 * t1781;
t1601 = -t1749 * t1620 + t1751 * t1783;
t1600 = t1751 * t1620 + t1749 * t1783;
t1597 = -t1749 * t1615 + t1751 * t1784;
t1596 = t1751 * t1615 + t1749 * t1784;
t1594 = -t1599 * t1758 + t1625 * t1755;
t1593 = t1595 * t1759 - t1598 * t1756;
t1592 = -t1749 * t1594 + t1751 * t1785;
t1591 = t1751 * t1594 + t1749 * t1785;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1750 * t1722 - t1748 * t1787, 0, 0, 0, 0, 0, 0, -t1702 * t1748 + t1720 * t1750, -t1701 * t1748 - t1750 * t1771, 0, -t1643 * t1748 + t1647 * t1750, 0, 0, 0, 0, 0, 0, t1637, t1835, t1663, -t1608 * t1748 + t1619 * t1750, 0, 0, 0, 0, 0, 0, t1637, t1663, -t1835, -t1601 * t1748 + t1613 * t1750, 0, 0, 0, 0, 0, 0, -t1835, -t1637, -t1663, -t1597 * t1748 + t1604 * t1750, 0, 0, 0, 0, 0, 0, -t1606 * t1748 + t1617 * t1750, -t1610 * t1748 + t1618 * t1750, -t1603 * t1748 + t1614 * t1750, -t1592 * t1748 + t1593 * t1750; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1748 * t1722 + t1750 * t1787, 0, 0, 0, 0, 0, 0, t1702 * t1750 + t1720 * t1748, t1701 * t1750 - t1748 * t1771, 0, t1643 * t1750 + t1647 * t1748, 0, 0, 0, 0, 0, 0, -t1836, -t1636, t1662, t1608 * t1750 + t1619 * t1748, 0, 0, 0, 0, 0, 0, -t1836, t1662, t1636, t1601 * t1750 + t1613 * t1748, 0, 0, 0, 0, 0, 0, t1636, t1836, -t1662, t1597 * t1750 + t1604 * t1748, 0, 0, 0, 0, 0, 0, t1606 * t1750 + t1617 * t1748, t1610 * t1750 + t1618 * t1748, t1603 * t1750 + t1614 * t1748, t1592 * t1750 + t1593 * t1748; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1817, 0, 0, 0, 0, 0, 0, t1700, t1699, 0, t1642, 0, 0, 0, 0, 0, 0, -t1650, -t1652, t1825, t1607, 0, 0, 0, 0, 0, 0, -t1650, t1825, t1652, t1600, 0, 0, 0, 0, 0, 0, t1652, t1650, -t1825, t1596, 0, 0, 0, 0, 0, 0, t1605, t1609, t1602, t1591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1722, 0, 0, 0, 0, 0, 0, t1720, -t1771, 0, t1647, 0, 0, 0, 0, 0, 0, -t1671, -t1673, t1686, t1619, 0, 0, 0, 0, 0, 0, -t1671, t1686, t1673, t1613, 0, 0, 0, 0, 0, 0, t1673, t1671, -t1686, t1604, 0, 0, 0, 0, 0, 0, t1617, t1618, t1614, t1593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1787, 0, 0, 0, 0, 0, 0, t1702, t1701, 0, t1643, 0, 0, 0, 0, 0, 0, -t1654, -t1656, t1824, t1608, 0, 0, 0, 0, 0, 0, -t1654, t1824, t1656, t1601, 0, 0, 0, 0, 0, 0, t1656, t1654, -t1824, t1597, 0, 0, 0, 0, 0, 0, t1606, t1610, t1603, t1592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1817, 0, 0, 0, 0, 0, 0, t1700, t1699, 0, t1642, 0, 0, 0, 0, 0, 0, -t1650, -t1652, t1825, t1607, 0, 0, 0, 0, 0, 0, -t1650, t1825, t1652, t1600, 0, 0, 0, 0, 0, 0, t1652, t1650, -t1825, t1596, 0, 0, 0, 0, 0, 0, t1605, t1609, t1602, t1591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1761, -qJDD(2), 0, t1679, 0, 0, 0, 0, 0, 0, -t1692, -t1694, t1718, t1628, 0, 0, 0, 0, 0, 0, -t1692, t1718, t1694, t1621, 0, 0, 0, 0, 0, 0, t1694, t1692, -t1718, t1616, 0, 0, 0, 0, 0, 0, t1630, t1632, t1624, t1595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1761, 0, -t1786, 0, 0, 0, 0, 0, 0, t1717, -t1715, t1721, -t1669, 0, 0, 0, 0, 0, 0, t1717, t1721, t1715, -t1646, 0, 0, 0, 0, 0, 0, t1715, -t1717, -t1721, -t1639, 0, 0, 0, 0, 0, 0, t1648, t1658, t1640, t1598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1698, 0, 0, 0, 0, 0, 0, t1689, -t1690, 0, t1627, 0, 0, 0, 0, 0, 0, t1689, 0, t1690, t1620, 0, 0, 0, 0, 0, 0, t1690, -t1689, 0, t1615, 0, 0, 0, 0, 0, 0, t1629, t1631, t1623, t1594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1729, -t1724, t1799, t1661, 0, 0, 0, 0, 0, 0, -t1729, t1799, t1724, t1644, 0, 0, 0, 0, 0, 0, t1724, t1729, -t1799, t1633, 0, 0, 0, 0, 0, 0, t1665, t1667, t1676, t1625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1723, -t1728, -t1800, t1660, 0, 0, 0, 0, 0, 0, t1723, -t1800, t1728, -t1645, 0, 0, 0, 0, 0, 0, t1728, -t1723, t1800, -t1634, 0, 0, 0, 0, 0, 0, -t1649, -t1659, -t1641, -t1599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1717, t1715, -t1721, t1669, 0, 0, 0, 0, 0, 0, -t1717, -t1721, -t1715, t1646, 0, 0, 0, 0, 0, 0, -t1715, t1717, t1721, t1639, 0, 0, 0, 0, 0, 0, -t1648, -t1658, -t1640, -t1598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1729, t1799, t1724, t1644, 0, 0, 0, 0, 0, 0, t1724, t1729, -t1799, t1633, 0, 0, 0, 0, 0, 0, t1665, t1667, t1676, t1625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1717, -t1721, -t1715, t1646, 0, 0, 0, 0, 0, 0, -t1715, t1717, t1721, t1639, 0, 0, 0, 0, 0, 0, -t1648, -t1658, -t1640, -t1598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1723, t1800, -t1728, t1645, 0, 0, 0, 0, 0, 0, -t1728, t1723, -t1800, t1634, 0, 0, 0, 0, 0, 0, t1649, t1659, t1641, t1599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1728, t1723, -t1800, t1634, 0, 0, 0, 0, 0, 0, t1649, t1659, t1641, t1599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1724, -t1729, t1799, -t1633, 0, 0, 0, 0, 0, 0, -t1665, -t1667, -t1676, -t1625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1715, -t1717, -t1721, -t1639, 0, 0, 0, 0, 0, 0, t1648, t1658, t1640, t1598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1680, t1677, t1666, t1612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1763, t1791, t1766, t1782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1665, t1667, t1676, t1625;];
f_new_reg  = t1;
