% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPPR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPPR3_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:10:57
% EndTime: 2019-03-08 21:11:03
% DurationCPUTime: 1.78s
% Computational Cost: add. (972->163), mult. (2362->283), div. (0->0), fcn. (2006->8), ass. (0->107)
t58 = qJ(4) + pkin(5);
t60 = sin(qJ(3));
t123 = pkin(3) + pkin(4);
t101 = pkin(9) + t123;
t63 = cos(qJ(3));
t88 = t101 * t63;
t133 = t58 * t60 + t88;
t64 = cos(qJ(2));
t110 = qJD(2) * t64;
t56 = sin(pkin(6));
t61 = sin(qJ(2));
t120 = t56 * t61;
t57 = cos(pkin(6));
t29 = t120 * t63 + t57 * t60;
t94 = t56 * t110;
t15 = qJD(3) * t29 + t60 * t94;
t99 = t60 * t120;
t28 = -t57 * t63 + t99;
t14 = -qJD(3) * t99 + (qJD(3) * t57 + t94) * t63;
t8 = t29 * t14;
t124 = -0.2e1 * t110 * t56 ^ 2 * t61 + 0.2e1 * t15 * t28 + 0.2e1 * t8;
t71 = t14 * t63 + t15 * t60 + (t28 * t63 - t29 * t60) * qJD(3);
t132 = t123 * t63;
t131 = -t101 * t60 + t58 * t63;
t129 = pkin(8) - qJ(5);
t112 = t60 * qJ(4);
t90 = pkin(2) + t112;
t128 = t60 * pkin(5) + t88 + t90;
t24 = t29 * qJD(4);
t127 = qJ(4) * t14 + t24;
t104 = t60 * qJD(4);
t126 = qJD(3) * t131 + t104;
t59 = sin(qJ(6));
t52 = t59 ^ 2;
t62 = cos(qJ(6));
t54 = t62 ^ 2;
t116 = t52 - t54;
t89 = qJD(6) * t116;
t102 = qJ(5) * qJD(3);
t45 = t60 * qJD(3);
t98 = pkin(8) * t45;
t25 = qJD(5) * t63 - t102 * t60 + t98;
t125 = qJD(6) * t131 + t25;
t66 = 0.2e1 * qJD(4);
t39 = t129 * t63;
t121 = t39 * t25;
t119 = t56 * t64;
t55 = t63 ^ 2;
t115 = t60 ^ 2 - t55;
t114 = qJ(4) * t63;
t111 = qJD(2) * t61;
t109 = qJD(3) * t59;
t108 = qJD(3) * t62;
t47 = qJD(6) * t59;
t107 = qJD(6) * t62;
t106 = qJD(6) * t63;
t105 = t39 * qJD(4);
t46 = t63 * qJD(3);
t103 = t63 * qJD(4);
t100 = -0.2e1 * pkin(2) * qJD(3);
t97 = t59 * t106;
t96 = t62 * t106;
t95 = t56 * t111;
t93 = t59 * t107;
t92 = t60 * t46;
t91 = t62 * t45;
t37 = t115 * qJD(3);
t86 = t59 * t91;
t85 = t55 * t93;
t38 = t129 * t60;
t10 = t128 * t59 + t62 * t38;
t9 = t128 * t62 - t59 * t38;
t84 = -t10 * t59 - t62 * t9;
t83 = -t63 * pkin(3) - t112;
t82 = t14 * t39 - t29 * t25;
t16 = t119 * t62 - t28 * t59;
t17 = t119 * t59 + t28 * t62;
t81 = -t16 * t62 - t17 * t59;
t76 = -t107 * t29 - t14 * t59;
t75 = t14 * t62 - t29 * t47;
t73 = qJD(3) * t83 + t103;
t44 = pkin(8) * t46;
t26 = -qJD(5) * t60 - t102 * t63 + t44;
t3 = t38 * t47 - t59 * t126 - (pkin(2) + t133) * t107 - t62 * t26;
t4 = -t10 * qJD(6) + t126 * t62 - t59 * t26;
t70 = -t3 * t59 + t4 * t62 + (t10 * t62 - t59 * t9) * qJD(6);
t1 = qJD(6) * t84 - t3 * t62 - t4 * t59;
t5 = -qJD(6) * t17 - t15 * t59 - t62 * t95;
t6 = qJD(6) * t16 + t15 * t62 - t59 * t95;
t2 = qJD(6) * t81 - t5 * t59 + t6 * t62;
t69 = t5 * t62 + t6 * t59 + (-t16 * t59 + t17 * t62) * qJD(6);
t68 = t71 * pkin(8);
t67 = qJD(3) * t133 - qJD(6) * t39 - t103;
t49 = qJ(4) * t66;
t41 = -0.2e1 * t92;
t40 = 0.2e1 * t92;
t34 = -pkin(2) + t83;
t33 = -0.2e1 * t37;
t32 = t90 + t132;
t31 = -t107 * t60 - t46 * t59;
t30 = -t46 * t62 + t47 * t60;
t27 = -t104 + (pkin(3) * t60 - t114) * qJD(3);
t22 = (t111 * t63 + t45 * t64) * t56;
t21 = -t119 * t46 + t60 * t95;
t20 = t104 + (-t123 * t60 + t114) * qJD(3);
t19 = t63 * t89 + t86;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t16 * t5 + 0.2e1 * t17 * t6 + 0.2e1 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t94, 0, 0, 0, 0, 0, 0, 0, 0, -t22, t21, t71, -pkin(2) * t95 + t68, 0, 0, 0, 0, 0, 0, -t22, t71, -t21 (t111 * t34 - t27 * t64) * t56 + t68, 0, 0, 0, 0, 0, 0, -t21, t22, -t71, t15 * t38 + t28 * t26 + (-t111 * t32 + t20 * t64) * t56 + t82, 0, 0, 0, 0, 0, 0 (t109 * t29 + t5) * t60 + (qJD(3) * t16 + t76) * t63 (t108 * t29 - t6) * t60 + (-qJD(3) * t17 - t75) * t63, t45 * t81 + t63 * t69, t10 * t6 + t16 * t4 - t17 * t3 + t5 * t9 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t33, 0, t41, 0, 0, t60 * t100, t63 * t100, 0, 0, t40, 0, 0.2e1 * t37, 0, 0, t41, -0.2e1 * t27 * t63 + 0.2e1 * t34 * t45, 0, -0.2e1 * t27 * t60 - 0.2e1 * t34 * t46, 0.2e1 * t34 * t27, t41, t33, 0, t40, 0, 0, 0.2e1 * t20 * t60 + 0.2e1 * t32 * t46, -0.2e1 * t20 * t63 + 0.2e1 * t32 * t45, 0.2e1 * t25 * t63 - 0.2e1 * t26 * t60 + 0.2e1 * (-t38 * t63 + t39 * t60) * qJD(3), 0.2e1 * t20 * t32 + 0.2e1 * t26 * t38 - 0.2e1 * t121, -0.2e1 * t54 * t92 - 0.2e1 * t85, 0.2e1 * t55 * t89 + 0.4e1 * t63 * t86, 0.2e1 * t108 * t115 + 0.2e1 * t60 * t97, -0.2e1 * t52 * t92 + 0.2e1 * t85, -0.2e1 * t37 * t59 + 0.2e1 * t60 * t96, t40, 0.2e1 * (t109 * t39 + t4) * t60 + 0.2e1 * (qJD(3) * t9 - t107 * t39 + t25 * t59) * t63, 0.2e1 * (t108 * t39 + t3) * t60 + 0.2e1 * (-qJD(3) * t10 + t25 * t62 + t39 * t47) * t63, 0.2e1 * t45 * t84 + 0.2e1 * t63 * t70, -0.2e1 * t10 * t3 + 0.2e1 * t4 * t9 - 0.2e1 * t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t14, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, t14, -pkin(3) * t15 + t127, 0, 0, 0, 0, 0, 0, t14, t15, 0, -t123 * t15 + t127, 0, 0, 0, 0, 0, 0, t75, t76, -t2, -t101 * t2 + t14 * t58 + t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t45, 0, -t44, t98, 0, 0, 0, t46, 0, 0, t45, 0, -t44, t73, -t98, t73 * pkin(8), 0, 0, -t45, 0, t46, 0, -t25, t26, -t103 + (t112 + t132) * qJD(3), -qJ(4) * t25 - t123 * t26 + t105, -t19, t116 * t45 - 0.4e1 * t63 * t93, t31, t19, t30, 0, -t125 * t62 + t59 * t67, t125 * t59 + t62 * t67, -t1, -t1 * t101 - t25 * t58 + t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t49, 0, 0, 0, 0, 0, 0, t66, 0, 0, t49, 0.2e1 * t93, -0.2e1 * t89, 0, -0.2e1 * t93, 0, 0, 0.2e1 * qJD(4) * t62 - 0.2e1 * t47 * t58, -0.2e1 * qJD(4) * t59 - 0.2e1 * t107 * t58, 0, t58 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t26, 0, 0, 0, 0, 0, 0, t31, t30, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, t45, 0, t20, 0, 0, 0, 0, 0, 0, -t30, t31 (-t52 - t54) * t45, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91 + t97, 0, -t45 * t59 + t96, t46, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, 0, t47, 0, t101 * t107, -t101 * t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
