% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:11:03
% EndTime: 2019-05-06 01:11:11
% DurationCPUTime: 8.48s
% Computational Cost: add. (24593->283), mult. (48777->364), div. (0->0), fcn. (33924->10), ass. (0->206)
t2301 = sin(qJ(4));
t2302 = sin(qJ(3));
t2305 = cos(qJ(4));
t2306 = cos(qJ(3));
t2260 = (t2301 * t2306 + t2302 * t2305) * qJD(1);
t2341 = qJD(1) * t2306;
t2326 = qJD(3) * t2341;
t2329 = t2302 * qJDD(1);
t2266 = t2326 + t2329;
t2291 = t2306 * qJDD(1);
t2342 = qJD(1) * t2302;
t2327 = qJD(3) * t2342;
t2267 = t2291 - t2327;
t2323 = t2301 * t2266 - t2305 * t2267;
t2317 = qJD(4) * t2260 + qJDD(5) + t2323;
t2292 = qJD(3) + qJD(4);
t2300 = sin(qJ(5));
t2304 = cos(qJ(5));
t2245 = t2260 * t2300 - t2292 * t2304;
t2247 = t2260 * t2304 + t2292 * t2300;
t2336 = t2245 * t2247;
t2190 = t2317 + t2336;
t2244 = t2247 ^ 2;
t2258 = t2301 * t2342 - t2305 * t2341;
t2256 = qJD(5) + t2258;
t2346 = t2256 ^ 2;
t2350 = -t2244 - t2346;
t2165 = t2190 * t2304 + t2300 * t2350;
t2321 = -t2305 * t2266 - t2301 * t2267;
t2221 = -qJD(4) * t2258 - t2321;
t2328 = qJDD(3) + qJDD(4);
t2315 = -t2245 * qJD(5) + t2304 * t2221 + t2300 * t2328;
t2335 = t2245 * t2256;
t2314 = t2315 - t2335;
t2140 = t2165 * t2301 + t2305 * t2314;
t2142 = t2165 * t2305 - t2301 * t2314;
t2125 = t2140 * t2302 - t2142 * t2306;
t2163 = t2190 * t2300 - t2304 * t2350;
t2297 = sin(pkin(10));
t2298 = cos(pkin(10));
t2107 = t2125 * t2297 + t2163 * t2298;
t2109 = t2125 * t2298 - t2163 * t2297;
t2303 = sin(qJ(1));
t2307 = cos(qJ(1));
t2374 = t2107 * t2307 + t2109 * t2303;
t2373 = t2107 * t2303 - t2109 * t2307;
t2119 = t2140 * t2306 + t2142 * t2302;
t2185 = t2315 + t2335;
t2324 = t2300 * t2221 - t2304 * t2328;
t2316 = (-qJD(5) + t2256) * t2247 - t2324;
t2348 = -t2185 * t2304 + t2300 * t2316;
t2217 = t2245 ^ 2;
t2199 = t2244 + t2217;
t2347 = t2185 * t2300 + t2304 * t2316;
t2359 = t2199 * t2305 + t2301 * t2347;
t2360 = -t2199 * t2301 + t2305 * t2347;
t2365 = -t2302 * t2359 + t2306 * t2360;
t2369 = t2297 * t2348 + t2298 * t2365;
t2370 = t2297 * t2365 - t2298 * t2348;
t2372 = -t2303 * t2370 + t2307 * t2369;
t2371 = t2303 * t2369 + t2307 * t2370;
t2366 = t2302 * t2360 + t2306 * t2359;
t2191 = t2317 - t2336;
t2349 = -t2346 - t2217;
t2354 = t2191 * t2304 + t2300 * t2349;
t2364 = t2297 * t2354;
t2363 = t2298 * t2354;
t2353 = -t2191 * t2300 + t2304 * t2349;
t2362 = t2301 * t2353;
t2361 = t2305 * t2353;
t2345 = t2258 ^ 2;
t2344 = t2260 ^ 2;
t2343 = t2292 ^ 2;
t2334 = t2258 * t2260;
t2294 = t2306 ^ 2;
t2309 = qJD(1) ^ 2;
t2333 = t2294 * t2309;
t2332 = t2302 * t2309;
t2331 = qJD(4) - t2292;
t2295 = -g(3) + qJDD(2);
t2279 = -g(1) * t2307 - g(2) * t2303;
t2264 = -pkin(1) * t2309 + t2279;
t2278 = g(1) * t2303 - g(2) * t2307;
t2318 = qJDD(1) * pkin(1) + t2278;
t2240 = t2298 * t2264 + t2297 * t2318;
t2313 = -t2309 * pkin(2) + qJDD(1) * pkin(7) + t2240;
t2220 = t2302 * t2295 + t2306 * t2313;
t2277 = qJD(3) * pkin(3) - pkin(8) * t2342;
t2200 = -pkin(3) * t2333 + pkin(8) * t2267 - qJD(3) * t2277 + t2220;
t2312 = t2302 * t2313;
t2310 = -t2312 - t2266 * pkin(8) + qJDD(3) * pkin(3) + (pkin(8) * qJD(1) * qJD(3) + pkin(3) * t2332 + t2295) * t2306;
t2172 = t2305 * t2200 + t2301 * t2310;
t2237 = pkin(4) * t2258 - pkin(9) * t2260;
t2158 = -pkin(4) * t2343 + pkin(9) * t2328 - t2258 * t2237 + t2172;
t2239 = -t2297 * t2264 + t2298 * t2318;
t2233 = -qJDD(1) * pkin(2) - t2309 * pkin(7) - t2239;
t2205 = -t2267 * pkin(3) - pkin(8) * t2333 + t2277 * t2342 + t2233;
t2208 = (qJD(4) + t2292) * t2260 + t2323;
t2325 = t2292 * t2258 - t2221;
t2311 = pkin(4) * t2208 + pkin(9) * t2325 + t2205;
t2131 = t2304 * t2158 + t2300 * t2311;
t2293 = t2302 ^ 2;
t2330 = t2293 + t2294;
t2130 = -t2158 * t2300 + t2304 * t2311;
t2171 = -t2301 * t2200 + t2305 * t2310;
t2269 = -qJDD(1) * t2297 - t2298 * t2309;
t2270 = qJDD(1) * t2298 - t2297 * t2309;
t2322 = t2307 * t2269 - t2270 * t2303;
t2320 = t2269 * t2303 + t2270 * t2307;
t2319 = -qJD(5) * t2247 - t2324;
t2157 = -t2328 * pkin(4) - t2343 * pkin(9) + t2260 * t2237 - t2171;
t2308 = qJD(3) ^ 2;
t2283 = t2306 * t2332;
t2281 = -t2308 - t2333;
t2280 = -t2293 * t2309 - t2308;
t2276 = -qJDD(3) + t2283;
t2275 = qJDD(3) + t2283;
t2274 = t2330 * t2309;
t2273 = -qJDD(1) * t2303 - t2307 * t2309;
t2272 = qJDD(1) * t2307 - t2303 * t2309;
t2271 = t2330 * qJDD(1);
t2268 = t2291 - 0.2e1 * t2327;
t2265 = 0.2e1 * t2326 + t2329;
t2252 = -t2343 - t2344;
t2251 = t2276 * t2306 - t2280 * t2302;
t2250 = -t2275 * t2302 + t2281 * t2306;
t2249 = t2276 * t2302 + t2280 * t2306;
t2248 = t2275 * t2306 + t2281 * t2302;
t2243 = t2271 * t2298 - t2274 * t2297;
t2242 = t2271 * t2297 + t2274 * t2298;
t2236 = -t2328 - t2334;
t2235 = t2328 - t2334;
t2234 = -t2343 - t2345;
t2227 = t2251 * t2298 + t2265 * t2297;
t2226 = t2250 * t2298 - t2268 * t2297;
t2225 = t2251 * t2297 - t2265 * t2298;
t2224 = t2250 * t2297 + t2268 * t2298;
t2222 = -t2344 - t2345;
t2219 = t2306 * t2295 - t2312;
t2216 = pkin(5) * t2245 - qJ(6) * t2247;
t2213 = t2236 * t2305 - t2252 * t2301;
t2212 = t2236 * t2301 + t2252 * t2305;
t2211 = t2258 * t2331 + t2321;
t2209 = -t2260 * t2331 - t2323;
t2204 = -t2239 * t2297 + t2240 * t2298;
t2203 = t2239 * t2298 + t2240 * t2297;
t2202 = t2234 * t2305 - t2235 * t2301;
t2201 = t2234 * t2301 + t2235 * t2305;
t2189 = -t2219 * t2302 + t2220 * t2306;
t2188 = t2219 * t2306 + t2220 * t2302;
t2182 = t2256 * t2247 - t2319;
t2181 = (qJD(5) + t2256) * t2247 + t2324;
t2180 = -t2212 * t2302 + t2213 * t2306;
t2179 = t2212 * t2306 + t2213 * t2302;
t2178 = t2209 * t2305 - t2211 * t2301;
t2177 = t2209 * t2301 + t2211 * t2305;
t2176 = t2189 * t2298 + t2233 * t2297;
t2175 = t2189 * t2297 - t2233 * t2298;
t2174 = -t2201 * t2302 + t2202 * t2306;
t2173 = t2201 * t2306 + t2202 * t2302;
t2160 = t2180 * t2298 - t2297 * t2325;
t2159 = t2180 * t2297 + t2298 * t2325;
t2155 = t2174 * t2298 + t2208 * t2297;
t2154 = t2174 * t2297 - t2208 * t2298;
t2149 = -t2177 * t2302 + t2178 * t2306;
t2148 = t2177 * t2306 + t2178 * t2302;
t2147 = t2182 * t2301 + t2361;
t2145 = -t2182 * t2305 + t2362;
t2143 = t2181 * t2301 + t2361;
t2141 = -t2181 * t2305 + t2362;
t2139 = -t2171 * t2301 + t2172 * t2305;
t2138 = t2171 * t2305 + t2172 * t2301;
t2137 = t2149 * t2298 + t2222 * t2297;
t2136 = t2149 * t2297 - t2222 * t2298;
t2129 = -t2319 * pkin(5) + (pkin(5) * t2256 - (2 * qJD(6))) * t2247 + t2157 - t2314 * qJ(6);
t2128 = -pkin(5) * t2317 - qJ(6) * t2346 + t2216 * t2247 + qJDD(6) - t2130;
t2127 = -pkin(5) * t2346 + qJ(6) * t2317 + 0.2e1 * qJD(6) * t2256 - t2245 * t2216 + t2131;
t2126 = -t2145 * t2302 + t2147 * t2306;
t2124 = t2145 * t2306 + t2147 * t2302;
t2122 = -t2141 * t2302 + t2143 * t2306;
t2120 = t2141 * t2306 + t2143 * t2302;
t2118 = -t2138 * t2302 + t2139 * t2306;
t2117 = t2138 * t2306 + t2139 * t2302;
t2112 = t2118 * t2298 + t2205 * t2297;
t2111 = t2118 * t2297 - t2205 * t2298;
t2110 = t2126 * t2298 + t2364;
t2108 = t2126 * t2297 - t2363;
t2106 = t2122 * t2298 + t2364;
t2104 = t2122 * t2297 - t2363;
t2102 = -t2130 * t2300 + t2131 * t2304;
t2101 = t2130 * t2304 + t2131 * t2300;
t2096 = t2102 * t2305 + t2157 * t2301;
t2095 = t2102 * t2301 - t2157 * t2305;
t2094 = t2127 * t2304 + t2128 * t2300;
t2093 = t2127 * t2300 - t2128 * t2304;
t2092 = t2094 * t2305 + t2129 * t2301;
t2091 = t2094 * t2301 - t2129 * t2305;
t2090 = -t2095 * t2302 + t2096 * t2306;
t2089 = t2095 * t2306 + t2096 * t2302;
t2088 = t2090 * t2298 + t2101 * t2297;
t2087 = t2090 * t2297 - t2101 * t2298;
t2086 = -t2091 * t2302 + t2092 * t2306;
t2085 = t2091 * t2306 + t2092 * t2302;
t2084 = t2086 * t2298 + t2093 * t2297;
t2083 = t2086 * t2297 - t2093 * t2298;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2273, -t2272, 0, -t2278 * t2303 + t2279 * t2307, 0, 0, 0, 0, 0, 0, t2322, -t2320, 0, -t2203 * t2303 + t2204 * t2307, 0, 0, 0, 0, 0, 0, -t2224 * t2303 + t2226 * t2307, -t2225 * t2303 + t2227 * t2307, -t2242 * t2303 + t2243 * t2307, -t2175 * t2303 + t2176 * t2307, 0, 0, 0, 0, 0, 0, -t2154 * t2303 + t2155 * t2307, -t2159 * t2303 + t2160 * t2307, -t2136 * t2303 + t2137 * t2307, -t2111 * t2303 + t2112 * t2307, 0, 0, 0, 0, 0, 0, -t2104 * t2303 + t2106 * t2307, -t2373, t2372, -t2087 * t2303 + t2088 * t2307, 0, 0, 0, 0, 0, 0, -t2108 * t2303 + t2110 * t2307, t2372, t2373, -t2083 * t2303 + t2084 * t2307; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2272, t2273, 0, t2278 * t2307 + t2279 * t2303, 0, 0, 0, 0, 0, 0, t2320, t2322, 0, t2203 * t2307 + t2204 * t2303, 0, 0, 0, 0, 0, 0, t2224 * t2307 + t2226 * t2303, t2225 * t2307 + t2227 * t2303, t2242 * t2307 + t2243 * t2303, t2175 * t2307 + t2176 * t2303, 0, 0, 0, 0, 0, 0, t2154 * t2307 + t2155 * t2303, t2159 * t2307 + t2160 * t2303, t2136 * t2307 + t2137 * t2303, t2111 * t2307 + t2112 * t2303, 0, 0, 0, 0, 0, 0, t2104 * t2307 + t2106 * t2303, t2374, t2371, t2087 * t2307 + t2088 * t2303, 0, 0, 0, 0, 0, 0, t2108 * t2307 + t2110 * t2303, t2371, -t2374, t2083 * t2307 + t2084 * t2303; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, 0, 0, 0, 0, 0, 0, t2248, t2249, 0, t2188, 0, 0, 0, 0, 0, 0, t2173, t2179, t2148, t2117, 0, 0, 0, 0, 0, 0, t2120, -t2119, t2366, t2089, 0, 0, 0, 0, 0, 0, t2124, t2366, t2119, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2309, -qJDD(1), 0, t2279, 0, 0, 0, 0, 0, 0, t2269, -t2270, 0, t2204, 0, 0, 0, 0, 0, 0, t2226, t2227, t2243, t2176, 0, 0, 0, 0, 0, 0, t2155, t2160, t2137, t2112, 0, 0, 0, 0, 0, 0, t2106, t2109, t2369, t2088, 0, 0, 0, 0, 0, 0, t2110, t2369, -t2109, t2084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2309, 0, t2278, 0, 0, 0, 0, 0, 0, t2270, t2269, 0, t2203, 0, 0, 0, 0, 0, 0, t2224, t2225, t2242, t2175, 0, 0, 0, 0, 0, 0, t2154, t2159, t2136, t2111, 0, 0, 0, 0, 0, 0, t2104, t2107, t2370, t2087, 0, 0, 0, 0, 0, 0, t2108, t2370, -t2107, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, 0, 0, 0, 0, 0, 0, t2248, t2249, 0, t2188, 0, 0, 0, 0, 0, 0, t2173, t2179, t2148, t2117, 0, 0, 0, 0, 0, 0, t2120, -t2119, t2366, t2089, 0, 0, 0, 0, 0, 0, t2124, t2366, t2119, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2309, -qJDD(1), 0, t2240, 0, 0, 0, 0, 0, 0, t2250, t2251, t2271, t2189, 0, 0, 0, 0, 0, 0, t2174, t2180, t2149, t2118, 0, 0, 0, 0, 0, 0, t2122, t2125, t2365, t2090, 0, 0, 0, 0, 0, 0, t2126, t2365, -t2125, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2309, 0, t2239, 0, 0, 0, 0, 0, 0, t2268, -t2265, t2274, -t2233, 0, 0, 0, 0, 0, 0, -t2208, t2325, -t2222, -t2205, 0, 0, 0, 0, 0, 0, -t2354, t2163, -t2348, -t2101, 0, 0, 0, 0, 0, 0, -t2354, -t2348, -t2163, -t2093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, 0, 0, 0, 0, 0, 0, t2248, t2249, 0, t2188, 0, 0, 0, 0, 0, 0, t2173, t2179, t2148, t2117, 0, 0, 0, 0, 0, 0, t2120, -t2119, t2366, t2089, 0, 0, 0, 0, 0, 0, t2124, t2366, t2119, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2281, t2276, t2291, t2220, 0, 0, 0, 0, 0, 0, t2202, t2213, t2178, t2139, 0, 0, 0, 0, 0, 0, t2143, -t2142, t2360, t2096, 0, 0, 0, 0, 0, 0, t2147, t2360, t2142, t2092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2275, t2280, -t2329, t2219, 0, 0, 0, 0, 0, 0, t2201, t2212, t2177, t2138, 0, 0, 0, 0, 0, 0, t2141, -t2140, t2359, t2095, 0, 0, 0, 0, 0, 0, t2145, t2359, t2140, t2091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2268, t2265, -t2274, t2233, 0, 0, 0, 0, 0, 0, t2208, -t2325, t2222, t2205, 0, 0, 0, 0, 0, 0, t2354, -t2163, t2348, t2101, 0, 0, 0, 0, 0, 0, t2354, t2348, t2163, t2093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2234, t2236, t2209, t2172, 0, 0, 0, 0, 0, 0, t2353, -t2165, t2347, t2102, 0, 0, 0, 0, 0, 0, t2353, t2347, t2165, t2094; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2235, t2252, t2211, t2171, 0, 0, 0, 0, 0, 0, -t2181, -t2314, t2199, -t2157, 0, 0, 0, 0, 0, 0, -t2182, t2199, t2314, -t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2208, -t2325, t2222, t2205, 0, 0, 0, 0, 0, 0, t2354, -t2163, t2348, t2101, 0, 0, 0, 0, 0, 0, t2354, t2348, t2163, t2093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2349, -t2190, t2316, t2131, 0, 0, 0, 0, 0, 0, t2349, t2316, t2190, t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2191, t2350, -t2185, t2130, 0, 0, 0, 0, 0, 0, t2191, -t2185, -t2350, -t2128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2181, t2314, -t2199, t2157, 0, 0, 0, 0, 0, 0, t2182, -t2199, -t2314, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2349, t2316, t2190, t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2182, -t2199, -t2314, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2191, t2185, t2350, t2128;];
f_new_reg  = t1;
