% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:09:38
% EndTime: 2019-05-06 01:10:18
% DurationCPUTime: 37.92s
% Computational Cost: add. (99482->774), mult. (196810->1111), div. (0->0), fcn. (136189->10), ass. (0->548)
t1015 = qJD(3) + qJD(4);
t964 = sin(qJ(4));
t965 = sin(qJ(3));
t968 = cos(qJ(4));
t969 = cos(qJ(3));
t913 = (t964 * t969 + t965 * t968) * qJD(1);
t963 = sin(qJ(5));
t967 = cos(qJ(5));
t880 = -t1015 * t967 + t963 * t913;
t1022 = qJD(1) * t965;
t911 = -t968 * t969 * qJD(1) + t1022 * t964;
t906 = qJD(5) + t911;
t1034 = t880 * t906;
t1014 = qJDD(3) + qJDD(4);
t1017 = qJD(1) * qJD(3);
t1004 = t969 * t1017;
t1016 = qJDD(1) * t965;
t923 = t1004 + t1016;
t1005 = t965 * t1017;
t952 = t969 * qJDD(1);
t924 = t952 - t1005;
t831 = -t911 * qJD(4) + t968 * t923 + t964 * t924;
t978 = -t1014 * t963 - t967 * t831;
t977 = -t880 * qJD(5) - t978;
t1101 = t1034 - t977;
t1052 = t1101 * t963;
t1002 = -t967 * t1014 + t963 * t831;
t1018 = qJD(5) + t906;
t882 = t1015 * t963 + t967 * t913;
t744 = t1018 * t882 + t1002;
t655 = -t744 * t967 + t1052;
t1067 = t880 ^ 2;
t879 = t882 ^ 2;
t818 = t879 - t1067;
t625 = t655 * t964 - t818 * t968;
t627 = t655 * t968 + t818 * t964;
t558 = t625 * t965 - t627 * t969;
t658 = -t1101 * t967 - t744 * t963;
t960 = sin(pkin(10));
t961 = cos(pkin(10));
t523 = t558 * t960 + t658 * t961;
t525 = t558 * t961 - t658 * t960;
t966 = sin(qJ(1));
t970 = cos(qJ(1));
t1191 = t523 * t970 + t525 * t966;
t1190 = t523 * t966 - t525 * t970;
t822 = t882 * t880;
t1000 = t964 * t923 - t968 * t924;
t830 = -t913 * qJD(4) - t1000;
t825 = qJDD(5) - t830;
t1084 = t822 + t825;
t1049 = t1084 * t963;
t1066 = t906 ^ 2;
t838 = t1067 - t1066;
t713 = t838 * t967 - t1049;
t745 = (qJD(5) - t906) * t882 + t1002;
t643 = t713 * t964 + t745 * t968;
t647 = t713 * t968 - t745 * t964;
t576 = t643 * t965 - t647 * t969;
t1048 = t1084 * t967;
t711 = t838 * t963 + t1048;
t542 = t576 * t960 + t711 * t961;
t546 = t576 * t961 - t711 * t960;
t1189 = t542 * t970 + t546 * t966;
t1188 = t542 * t966 - t546 * t970;
t1080 = -t1034 - t977;
t1117 = t1080 * t967 - t745 * t963;
t1077 = t879 + t1067;
t1116 = -t1080 * t963 - t745 * t967;
t1137 = -t1077 * t964 + t1116 * t968;
t1138 = t1077 * t968 + t1116 * t964;
t1154 = t1137 * t969 - t1138 * t965;
t1169 = t1117 * t960 + t1154 * t961;
t1170 = -t1117 * t961 + t1154 * t960;
t1179 = t1169 * t966 + t1170 * t970;
t1187 = pkin(6) * t1179;
t1180 = t1169 * t970 - t1170 * t966;
t1186 = pkin(6) * t1180;
t1185 = qJ(2) * t1170;
t1184 = pkin(1) * t1170 - pkin(2) * t1117 + pkin(7) * t1154;
t1153 = t1137 * t965 + t1138 * t969;
t1183 = -pkin(1) * t1153 + qJ(2) * t1169;
t1182 = t625 * t969 + t627 * t965;
t1181 = t643 * t969 + t647 * t965;
t1085 = -t822 + t825;
t1047 = t1085 * t963;
t839 = -t879 + t1066;
t1121 = -t839 * t967 - t1047;
t1046 = t1085 * t967;
t1120 = -t839 * t963 + t1046;
t1139 = -t1080 * t964 + t1120 * t968;
t1140 = t1080 * t968 + t1120 * t964;
t1152 = t1139 * t969 - t1140 * t965;
t1171 = -t1121 * t960 + t1152 * t961;
t1172 = t1121 * t961 + t1152 * t960;
t1178 = t1171 * t970 - t1172 * t966;
t1177 = t1171 * t966 + t1172 * t970;
t1175 = pkin(7) * t1153;
t1174 = -pkin(2) * t1153 - pkin(3) * t1138 - pkin(4) * t1077 - pkin(9) * t1116;
t816 = -t879 - t1066;
t696 = t816 * t967 - t1049;
t1168 = pkin(2) * t696;
t1167 = pkin(3) * t696;
t1166 = pkin(4) * t696;
t694 = t816 * t963 + t1048;
t1165 = pkin(9) * t694;
t1164 = pkin(9) * t696;
t1163 = pkin(8) * t1137;
t1162 = pkin(8) * t1138;
t1161 = t694 * t964;
t1160 = t694 * t968;
t1159 = t696 * t960;
t1158 = t696 * t961;
t1151 = t1139 * t965 + t1140 * t969;
t1149 = pkin(9) * t1117;
t1146 = qJ(6) * t1101;
t1012 = t964 * t822;
t1031 = t906 * t967;
t1009 = t880 * t1031;
t774 = -qJD(5) * t882 - t1002;
t981 = -t774 * t963 + t1009;
t1072 = t968 * t981 - t1012;
t1011 = t968 * t822;
t1073 = t964 * t981 + t1011;
t1092 = t1072 * t969 - t1073 * t965;
t1032 = t906 * t963;
t1010 = t880 * t1032;
t980 = -t774 * t967 - t1010;
t1112 = t1092 * t961 - t960 * t980;
t1114 = t1092 * t960 + t961 * t980;
t1136 = t1112 * t970 - t1114 * t966;
t1135 = t1112 * t966 + t1114 * t970;
t833 = t882 * t1032;
t990 = t833 - t1009;
t1071 = t825 * t964 + t968 * t990;
t1074 = -t968 * t825 + t964 * t990;
t1094 = t1071 * t969 - t1074 * t965;
t834 = t882 * t1031;
t989 = t834 + t1010;
t1113 = t1094 * t961 - t960 * t989;
t1115 = t1094 * t960 + t961 * t989;
t1134 = t1113 * t970 - t1115 * t966;
t1133 = t1113 * t966 + t1115 * t970;
t1075 = -t1066 - t1067;
t1097 = t1075 * t963 + t1046;
t1132 = pkin(2) * t1097;
t1131 = pkin(3) * t1097;
t1130 = pkin(4) * t1097;
t1096 = t1075 * t967 - t1047;
t1129 = pkin(9) * t1096;
t1128 = pkin(9) * t1097;
t1125 = t1096 * t964;
t1124 = t1096 * t968;
t1123 = t1097 * t960;
t1122 = t1097 * t961;
t1065 = qJD(1) ^ 2;
t937 = g(1) * t970 + g(2) * t966;
t921 = -pkin(1) * t1065 - t937;
t936 = g(1) * t966 - t970 * g(2);
t982 = qJDD(1) * pkin(1) + t936;
t866 = t960 * t921 - t961 * t982;
t867 = t961 * t921 + t960 * t982;
t1001 = t866 * t960 + t961 * t867;
t794 = t866 * t961 - t867 * t960;
t1045 = t794 * t966;
t717 = t1001 * t970 + t1045;
t1044 = t794 * t970;
t1119 = -t1001 * t966 + t1044;
t926 = qJDD(1) * t960 + t1065 * t961;
t927 = qJDD(1) * t961 - t1065 * t960;
t870 = -t926 * t966 + t970 * t927;
t958 = g(3) - qJDD(2);
t901 = qJ(2) * t926 - t958 * t961;
t983 = -qJ(2) * t927 - t958 * t960;
t1118 = -pkin(6) * t870 + t901 * t966 + t970 * t983;
t741 = t967 * t977 - t833;
t991 = t968 * t741 + t1012;
t992 = t964 * t741 - t1011;
t1069 = -t965 * t992 + t969 * t991;
t737 = -t963 * t977 - t834;
t1095 = t1069 * t961 - t737 * t960;
t1100 = t1069 * t960 + t961 * t737;
t1111 = t1095 * t970 - t1100 * t966;
t1110 = t1095 * t966 + t1100 * t970;
t1109 = 2 * qJD(6);
t868 = t913 * t911;
t1078 = -t868 + t1014;
t1105 = t1078 * t964;
t1104 = t1078 * t968;
t1076 = t970 * t926 + t927 * t966;
t1099 = pkin(6) * t1076 + t901 * t970 - t966 * t983;
t1093 = t1071 * t965 + t1074 * t969;
t1091 = t1072 * t965 + t1073 * t969;
t1013 = t1015 ^ 2;
t904 = t1015 * t911;
t1083 = t831 - t904;
t974 = qJDD(1) * pkin(7) + t867;
t973 = -pkin(2) * t1065 + t974;
t829 = -t965 * t958 + t969 * t973;
t935 = qJD(3) * pkin(3) - pkin(8) * t1022;
t957 = t969 ^ 2;
t954 = t957 * t1065;
t783 = -pkin(3) * t954 + pkin(8) * t924 - qJD(3) * t935 + t829;
t1025 = t969 * t958;
t972 = -t965 * t974 - t1025 - t923 * pkin(8) + qJDD(3) * pkin(3) + (qJD(3) * t969 * pkin(8) + (pkin(3) * t969 + pkin(2)) * t1022) * qJD(1);
t702 = t968 * t783 + t964 * t972;
t863 = pkin(4) * t911 - pkin(9) * t913;
t664 = -pkin(4) * t1013 + pkin(9) * t1014 - t911 * t863 + t702;
t849 = -qJDD(1) * pkin(2) - t1065 * pkin(7) + t866;
t796 = -t924 * pkin(3) - pkin(8) * t954 + t1022 * t935 + t849;
t998 = t1015 * t913;
t673 = -t1083 * pkin(9) + (-t830 + t998) * pkin(4) + t796;
t596 = t967 * t664 + t963 * t673;
t817 = pkin(5) * t880 - qJ(6) * t882;
t984 = t825 * qJ(6) + t1109 * t906 - t880 * t817 + t596;
t1068 = t965 * t991 + t969 * t992;
t908 = t911 ^ 2;
t909 = t913 ^ 2;
t1064 = pkin(4) * t964;
t1063 = pkin(5) * t967;
t1062 = qJ(6) * t967;
t701 = t964 * t783 - t968 * t972;
t620 = -t701 * t968 + t702 * t964;
t1061 = t620 * t965;
t1060 = t620 * t969;
t663 = -t1014 * pkin(4) - t1013 * pkin(9) + t913 * t863 + t701;
t1059 = t663 * t963;
t1058 = t663 * t967;
t1043 = t796 * t964;
t1042 = t796 * t968;
t1038 = t849 * t965;
t1037 = t849 * t969;
t861 = t868 + t1014;
t1036 = t861 * t964;
t1035 = t861 * t968;
t1033 = t906 * t882;
t943 = t969 * t1065 * t965;
t933 = qJDD(3) + t943;
t1028 = t933 * t965;
t934 = qJDD(3) - t943;
t1027 = t934 * t965;
t1026 = t934 * t969;
t595 = t963 * t664 - t967 * t673;
t1024 = t1077 - t1066;
t956 = t965 ^ 2;
t1023 = t956 + t957;
t1021 = t1065 * t956;
t1008 = t960 * t868;
t1007 = t961 * t868;
t1006 = -pkin(4) * t968 - pkin(3);
t1003 = qJ(6) * t963 + pkin(4);
t621 = t701 * t964 + t968 * t702;
t827 = t965 * t973 + t1025;
t757 = t827 * t965 + t969 * t829;
t884 = -t936 * t966 - t970 * t937;
t996 = t960 * t943;
t995 = t961 * t943;
t994 = t882 * t817 + qJDD(6) + t595;
t930 = qJDD(1) * t970 - t1065 * t966;
t993 = -pkin(6) * t930 - g(3) * t966;
t988 = t964 * t904;
t987 = t964 * t998;
t986 = t968 * t904;
t985 = t968 * t998;
t528 = -t595 * t967 + t596 * t963;
t529 = t595 * t963 + t596 * t967;
t756 = t827 * t969 - t829 * t965;
t883 = t936 * t970 - t937 * t966;
t803 = qJD(3) * t913 - t1000;
t979 = -pkin(5) * t825 + t994;
t976 = -t774 * pkin(5) + t1146 + t663;
t975 = t1109 * t882 - t976;
t971 = qJD(3) ^ 2;
t941 = -t954 - t971;
t940 = t954 - t971;
t939 = -t971 - t1021;
t938 = t971 - t1021;
t932 = t954 - t1021;
t931 = t954 + t1021;
t929 = qJDD(1) * t966 + t1065 * t970;
t928 = t1023 * qJDD(1);
t925 = t952 - 0.2e1 * t1005;
t922 = 0.2e1 * t1004 + t1016;
t919 = t969 * t933;
t918 = t1023 * t1017;
t907 = -pkin(6) * t929 + g(3) * t970;
t897 = -t909 + t1013;
t896 = t908 - t1013;
t895 = -t1017 * t956 + t923 * t969;
t894 = -t1017 * t957 - t924 * t965;
t893 = qJDD(3) * t960 + t918 * t961;
t892 = -qJDD(3) * t961 + t918 * t960;
t891 = -t909 - t1013;
t890 = -t939 * t965 - t1026;
t889 = -t938 * t965 + t919;
t888 = t941 * t969 - t1028;
t887 = t940 * t969 - t1027;
t886 = t939 * t969 - t1027;
t885 = t941 * t965 + t919;
t876 = t928 * t961 - t931 * t960;
t875 = t928 * t960 + t931 * t961;
t869 = -t922 * t965 + t925 * t969;
t865 = -t909 + t908;
t858 = -t1013 - t908;
t857 = t895 * t961 - t996;
t856 = t894 * t961 + t996;
t855 = t895 * t960 + t995;
t854 = t894 * t960 - t995;
t853 = t1016 * t960 + t889 * t961;
t852 = t887 * t961 + t952 * t960;
t851 = -t1016 * t961 + t889 * t960;
t850 = t887 * t960 - t952 * t961;
t844 = t890 * t961 + t922 * t960;
t843 = t888 * t961 - t925 * t960;
t842 = t890 * t960 - t922 * t961;
t841 = t888 * t960 + t925 * t961;
t836 = -t986 + t987;
t835 = -t988 - t985;
t832 = -t908 - t909;
t828 = t869 * t961 - t932 * t960;
t826 = t869 * t960 + t932 * t961;
t814 = t896 * t968 - t1036;
t813 = -t897 * t964 + t1104;
t812 = t896 * t964 + t1035;
t811 = t897 * t968 + t1105;
t810 = -t875 * t966 + t876 * t970;
t809 = t875 * t970 + t876 * t966;
t808 = -t891 * t964 - t1035;
t807 = t891 * t968 - t1036;
t806 = -t831 - t904;
t801 = (0.2e1 * qJD(4) + qJD(3)) * t913 + t1000;
t800 = -pkin(7) * t886 + t1037;
t799 = -pkin(7) * t885 + t1038;
t791 = t968 * t831 - t987;
t790 = t964 * t831 + t985;
t789 = -t964 * t830 + t986;
t788 = t968 * t830 + t988;
t787 = -pkin(2) * t886 + t829;
t786 = -pkin(2) * t885 + t827;
t785 = t858 * t968 - t1105;
t784 = t858 * t964 + t1104;
t782 = pkin(1) * t958 + qJ(2) * t1001;
t767 = -t842 * t966 + t844 * t970;
t766 = -t841 * t966 + t843 * t970;
t765 = t842 * t970 + t844 * t966;
t764 = t841 * t970 + t843 * t966;
t763 = -t835 * t965 + t836 * t969;
t754 = t1014 * t960 + t961 * t763;
t753 = -t1014 * t961 + t960 * t763;
t752 = t1018 * t880 + t978;
t746 = -t774 + t1033;
t743 = -t812 * t965 + t814 * t969;
t742 = -t811 * t965 + t813 * t969;
t735 = -qJ(2) * t875 + t756 * t961;
t734 = qJ(2) * t876 + t756 * t960;
t731 = -t807 * t965 + t808 * t969;
t730 = t807 * t969 + t808 * t965;
t728 = t803 * t968 - t806 * t964;
t727 = -t1083 * t964 - t801 * t968;
t726 = t803 * t964 + t806 * t968;
t725 = t1083 * t968 - t801 * t964;
t724 = -pkin(8) * t807 + t1042;
t719 = t757 * t961 + t849 * t960;
t718 = t757 * t960 - t849 * t961;
t707 = -pkin(8) * t784 + t1043;
t706 = -t790 * t965 + t791 * t969;
t705 = -t788 * t965 + t789 * t969;
t704 = -t784 * t965 + t785 * t969;
t703 = t784 * t969 + t785 * t965;
t691 = t706 * t961 + t1008;
t690 = t705 * t961 - t1008;
t689 = t706 * t960 - t1007;
t688 = t705 * t960 + t1007;
t687 = -qJ(2) * t842 - t787 * t960 + t800 * t961;
t686 = -qJ(2) * t841 - t786 * t960 + t799 * t961;
t677 = t743 * t961 + t803 * t960;
t676 = t742 * t961 - t806 * t960;
t675 = t743 * t960 - t803 * t961;
t674 = t742 * t960 + t806 * t961;
t672 = -pkin(3) * t1083 + pkin(8) * t808 + t1043;
t669 = t1083 * t960 + t731 * t961;
t668 = -t1083 * t961 + t731 * t960;
t667 = -pkin(1) * t886 + qJ(2) * t844 + t787 * t961 + t800 * t960;
t666 = -pkin(1) * t885 + qJ(2) * t843 + t786 * t961 + t799 * t960;
t665 = -pkin(3) * t801 + pkin(8) * t785 - t1042;
t660 = t704 * t961 + t801 * t960;
t659 = t704 * t960 - t801 * t961;
t650 = -t726 * t965 + t728 * t969;
t649 = -t725 * t965 + t727 * t969;
t648 = t726 * t969 + t728 * t965;
t637 = -t718 * t966 + t719 * t970;
t636 = t718 * t970 + t719 * t966;
t635 = t746 * t964 + t1124;
t634 = -t752 * t964 - t1160;
t633 = -t746 * t968 + t1125;
t632 = t752 * t968 - t1161;
t631 = t744 * t964 + t1124;
t630 = t1101 * t964 + t1160;
t629 = -t744 * t968 + t1125;
t628 = -t1101 * t968 + t1161;
t623 = t649 * t961 - t865 * t960;
t622 = t649 * t960 + t865 * t961;
t619 = t650 * t961 + t832 * t960;
t618 = t650 * t960 - t832 * t961;
t613 = -qJ(2) * t718 - (pkin(2) * t960 - pkin(7) * t961) * t756;
t612 = -pkin(2) * t730 - pkin(3) * t807 + t702;
t607 = t1058 - t1164;
t602 = -pkin(2) * t703 - pkin(3) * t784 + t701;
t601 = t1059 - t1128;
t600 = -pkin(3) * t796 + pkin(8) * t621;
t599 = -pkin(2) * t648 - pkin(3) * t726;
t598 = -t668 * t966 + t669 * t970;
t597 = t668 * t970 + t669 * t966;
t594 = qJ(2) * t719 - (-pkin(2) * t961 - pkin(7) * t960 - pkin(1)) * t756;
t593 = -pkin(8) * t726 - t620;
t592 = -t659 * t966 + t660 * t970;
t591 = t659 * t970 + t660 * t966;
t590 = -pkin(7) * t730 - t672 * t965 + t724 * t969;
t589 = (pkin(5) * t906 - (2 * qJD(6))) * t882 + t976;
t588 = -pkin(3) * t832 + pkin(8) * t728 + t621;
t587 = -pkin(4) * t1117 - pkin(5) * t1080 + qJ(6) * t745;
t578 = -pkin(7) * t703 - t665 * t965 + t707 * t969;
t573 = qJ(6) * t1066 - t979;
t572 = -pkin(5) * t1066 + t984;
t571 = t596 - t1166;
t570 = -t633 * t965 + t635 * t969;
t569 = -t632 * t965 + t634 * t969;
t568 = t633 * t969 + t635 * t965;
t567 = t632 * t969 + t634 * t965;
t566 = t595 - t1130;
t565 = -t629 * t965 + t631 * t969;
t564 = -t628 * t965 + t630 * t969;
t563 = t629 * t969 + t631 * t965;
t562 = t628 * t969 + t630 * t965;
t561 = (-t746 - t1033) * pkin(5) + t975;
t560 = -pkin(5) * t1033 - t1146 + t975;
t557 = qJ(6) * t1024 + t979;
t556 = t621 * t969 - t1061;
t555 = t621 * t965 + t1060;
t554 = pkin(5) * t1024 + t984;
t553 = -t618 * t966 + t619 * t970;
t552 = t618 * t970 + t619 * t966;
t539 = t556 * t961 + t796 * t960;
t538 = t556 * t960 - t796 * t961;
t537 = t570 * t961 + t1123;
t536 = t569 * t961 + t1159;
t535 = t570 * t960 - t1122;
t534 = t569 * t960 - t1158;
t533 = t565 * t961 + t1123;
t532 = t564 * t961 - t1159;
t531 = t565 * t960 - t1122;
t530 = t564 * t960 + t1158;
t527 = -t1130 + (-t1075 - t1066) * qJ(6) + (-t1085 - t825) * pkin(5) + t994;
t522 = -t1062 * t746 - t561 * t963 - t1128;
t521 = t1166 - qJ(6) * t1084 + (t816 + t1066) * pkin(5) - t984;
t520 = pkin(5) * t1052 + t560 * t967 + t1164;
t515 = -pkin(2) * t555 - pkin(3) * t620;
t514 = -qJ(2) * t668 + t590 * t961 - t612 * t960;
t513 = t529 * t968 + t663 * t964;
t512 = t529 * t964 - t663 * t968;
t511 = -t528 - t1149;
t510 = -qJ(2) * t659 + t578 * t961 - t602 * t960;
t509 = t572 * t967 - t573 * t963;
t508 = t572 * t963 + t573 * t967;
t507 = -pkin(1) * t730 + qJ(2) * t669 + t590 * t960 + t612 * t961;
t506 = -pkin(7) * t648 - t588 * t965 + t593 * t969;
t505 = -pkin(8) * t632 - t571 * t964 + t607 * t968;
t504 = -pkin(8) * t629 - t566 * t964 + t601 * t968;
t503 = -pkin(1) * t703 + qJ(2) * t660 + t578 * t960 + t602 * t961;
t502 = -pkin(7) * t555 - pkin(8) * t1060 - t600 * t965;
t501 = -pkin(2) * t567 - pkin(3) * t632 - pkin(4) * t752 - t1059 + t1165;
t500 = -pkin(2) * t563 - pkin(3) * t629 + pkin(4) * t744 + t1058 - t1129;
t499 = pkin(8) * t634 + t571 * t968 + t607 * t964 - t1167;
t498 = -t538 * t966 + t539 * t970;
t497 = t538 * t970 + t539 * t966;
t496 = pkin(8) * t631 + t566 * t968 + t601 * t964 - t1131;
t495 = -t535 * t966 + t537 * t970;
t494 = -t534 * t966 + t536 * t970;
t493 = t535 * t970 + t537 * t966;
t492 = t534 * t970 + t536 * t966;
t491 = -t554 * t963 + t557 * t967 - t1149;
t490 = -t531 * t966 + t533 * t970;
t489 = -t530 * t966 + t532 * t970;
t488 = t531 * t970 + t533 * t966;
t487 = t530 * t970 + t532 * t966;
t486 = t509 * t968 + t589 * t964;
t485 = t509 * t964 - t589 * t968;
t484 = t1064 * t1117 + t511 * t968 - t1162;
t479 = -pkin(2) * t568 - pkin(3) * t633 + t1003 * t746 - t967 * t561 - t1129;
t478 = t1006 * t1117 + t964 * t511 + t1163;
t477 = -pkin(2) * t562 - pkin(3) * t628 - t1165 - t963 * t560 - (-pkin(4) - t1063) * t1101;
t476 = -qJ(2) * t618 + t506 * t961 - t599 * t960;
t475 = -pkin(8) * t633 + t522 * t968 - t527 * t964;
t474 = -t512 * t965 + t513 * t969;
t473 = t512 * t969 + t513 * t965;
t472 = -pkin(9) * t508 + (pkin(5) * t963 - t1062) * t589;
t471 = -pkin(8) * t628 + t520 * t968 - t521 * t964;
t470 = t1174 - t529;
t469 = pkin(8) * t635 + t522 * t964 + t527 * t968 - t1131;
t468 = -pkin(1) * t648 + qJ(2) * t619 + t506 * t960 + t599 * t961;
t467 = -pkin(4) * t508 - pkin(5) * t573 - qJ(6) * t572;
t466 = pkin(8) * t630 + t520 * t964 + t521 * t968 + t1167;
t465 = t491 * t968 - t587 * t964 - t1162;
t464 = -t554 * t967 - t557 * t963 + t1174;
t463 = -pkin(3) * t1117 + t491 * t964 + t587 * t968 + t1163;
t462 = -pkin(8) * t512 + (-pkin(9) * t968 + t1064) * t528;
t461 = t474 * t961 + t528 * t960;
t460 = t474 * t960 - t528 * t961;
t459 = -qJ(2) * t538 + t502 * t961 - t515 * t960;
t458 = -pkin(7) * t567 - t499 * t965 + t505 * t969;
t457 = -t485 * t965 + t486 * t969;
t456 = t485 * t969 + t486 * t965;
t455 = -pkin(7) * t563 - t496 * t965 + t504 * t969;
t454 = pkin(8) * t513 + (-pkin(9) * t964 + t1006) * t528;
t453 = -pkin(1) * t555 + qJ(2) * t539 + t502 * t960 + t515 * t961;
t452 = -pkin(2) * t473 - pkin(3) * t512 + pkin(4) * t663 - pkin(9) * t529;
t451 = -t478 * t965 + t484 * t969 - t1175;
t450 = t457 * t961 + t508 * t960;
t449 = t457 * t960 - t508 * t961;
t448 = -pkin(7) * t568 - t469 * t965 + t475 * t969;
t447 = -pkin(7) * t562 - t466 * t965 + t471 * t969;
t446 = -qJ(2) * t534 + t458 * t961 - t501 * t960;
t445 = -qJ(2) * t531 + t455 * t961 - t500 * t960;
t444 = -t463 * t965 + t465 * t969 - t1175;
t443 = -t460 * t966 + t461 * t970;
t442 = t460 * t970 + t461 * t966;
t441 = -pkin(1) * t567 + qJ(2) * t536 + t458 * t960 + t501 * t961;
t440 = -pkin(8) * t485 - t467 * t964 + t472 * t968;
t439 = -pkin(1) * t563 + qJ(2) * t533 + t455 * t960 + t500 * t961;
t438 = -pkin(3) * t508 + pkin(8) * t486 + t467 * t968 + t472 * t964;
t437 = t451 * t961 - t470 * t960 - t1185;
t436 = -pkin(2) * t456 - pkin(3) * t485 - pkin(9) * t509 + (t1003 + t1063) * t589;
t435 = -qJ(2) * t535 + t448 * t961 - t479 * t960;
t434 = -qJ(2) * t530 + t447 * t961 - t477 * t960;
t433 = t451 * t960 + t470 * t961 + t1183;
t432 = -pkin(1) * t568 + qJ(2) * t537 + t448 * t960 + t479 * t961;
t431 = -pkin(1) * t562 + qJ(2) * t532 + t447 * t960 + t477 * t961;
t430 = -pkin(7) * t473 - t454 * t965 + t462 * t969;
t429 = -t449 * t966 + t450 * t970;
t428 = t449 * t970 + t450 * t966;
t427 = t444 * t961 - t464 * t960 - t1185;
t426 = t444 * t960 + t464 * t961 + t1183;
t425 = -qJ(2) * t460 + t430 * t961 - t452 * t960;
t424 = -pkin(7) * t456 - t438 * t965 + t440 * t969;
t423 = -pkin(1) * t473 + qJ(2) * t461 + t430 * t960 + t452 * t961;
t422 = -qJ(2) * t449 + t424 * t961 - t436 * t960;
t421 = -pkin(1) * t456 + qJ(2) * t450 + t424 * t960 + t436 * t961;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t929, -t930, 0, t884, 0, 0, 0, 0, 0, 0, -t1076, -t870, 0, t717, 0, 0, 0, 0, 0, 0, t766, t767, t810, t637, 0, 0, 0, 0, 0, 0, t592, t598, t553, t498, 0, 0, 0, 0, 0, 0, t490, t494, t1180, t443, 0, 0, 0, 0, 0, 0, t495, t1180, t489, t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t930, -t929, 0, t883, 0, 0, 0, 0, 0, 0, t870, -t1076, 0, -t1119, 0, 0, 0, 0, 0, 0, t764, t765, t809, t636, 0, 0, 0, 0, 0, 0, t591, t597, t552, t497, 0, 0, 0, 0, 0, 0, t488, t492, t1179, t442, 0, 0, 0, 0, 0, 0, t493, t1179, t487, t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t958, 0, 0, 0, 0, 0, 0, t885, t886, 0, -t756, 0, 0, 0, 0, 0, 0, t703, t730, t648, t555, 0, 0, 0, 0, 0, 0, t563, t567, t1153, t473, 0, 0, 0, 0, 0, 0, t568, t1153, t562, t456; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t930, 0, -t929, 0, t993, -t907, -t883, -pkin(6) * t883, 0, 0, t870, 0, -t1076, 0, t1118, t1099, t1119, pkin(6) * t1119 + qJ(2) * t1044 - t782 * t966, -t855 * t966 + t857 * t970, -t826 * t966 + t828 * t970, -t851 * t966 + t853 * t970, -t854 * t966 + t856 * t970, -t850 * t966 + t852 * t970, -t892 * t966 + t893 * t970, -pkin(6) * t764 - t666 * t966 + t686 * t970, -pkin(6) * t765 - t667 * t966 + t687 * t970, -pkin(6) * t809 - t734 * t966 + t735 * t970, -pkin(6) * t636 - t594 * t966 + t613 * t970, -t689 * t966 + t691 * t970, -t622 * t966 + t623 * t970, -t674 * t966 + t676 * t970, -t688 * t966 + t690 * t970, -t675 * t966 + t677 * t970, -t753 * t966 + t754 * t970, -pkin(6) * t591 - t503 * t966 + t510 * t970, -pkin(6) * t597 - t507 * t966 + t514 * t970, -pkin(6) * t552 - t468 * t966 + t476 * t970, -pkin(6) * t497 - t453 * t966 + t459 * t970, t1111, t1190, t1178, t1136, t1188, t1134, -pkin(6) * t488 - t439 * t966 + t445 * t970, -pkin(6) * t492 - t441 * t966 + t446 * t970, -t433 * t966 + t437 * t970 - t1187, -pkin(6) * t442 - t423 * t966 + t425 * t970, t1111, t1178, -t1190, t1134, -t1188, t1136, -pkin(6) * t493 - t432 * t966 + t435 * t970, -t426 * t966 + t427 * t970 - t1187, -pkin(6) * t487 - t431 * t966 + t434 * t970, -pkin(6) * t428 - t421 * t966 + t422 * t970; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t929, 0, t930, 0, t907, t993, t884, pkin(6) * t884, 0, 0, t1076, 0, t870, 0, -t1099, t1118, t717, pkin(6) * t717 + qJ(2) * t1045 + t782 * t970, t855 * t970 + t857 * t966, t826 * t970 + t828 * t966, t851 * t970 + t853 * t966, t854 * t970 + t856 * t966, t850 * t970 + t852 * t966, t892 * t970 + t893 * t966, pkin(6) * t766 + t666 * t970 + t686 * t966, pkin(6) * t767 + t667 * t970 + t687 * t966, pkin(6) * t810 + t734 * t970 + t735 * t966, pkin(6) * t637 + t594 * t970 + t613 * t966, t689 * t970 + t691 * t966, t622 * t970 + t623 * t966, t674 * t970 + t676 * t966, t688 * t970 + t690 * t966, t675 * t970 + t677 * t966, t753 * t970 + t754 * t966, pkin(6) * t592 + t503 * t970 + t510 * t966, pkin(6) * t598 + t507 * t970 + t514 * t966, pkin(6) * t553 + t468 * t970 + t476 * t966, pkin(6) * t498 + t453 * t970 + t459 * t966, t1110, -t1191, t1177, t1135, -t1189, t1133, pkin(6) * t490 + t439 * t970 + t445 * t966, pkin(6) * t494 + t441 * t970 + t446 * t966, t433 * t970 + t437 * t966 + t1186, pkin(6) * t443 + t423 * t970 + t425 * t966, t1110, t1177, t1191, t1133, t1189, t1135, pkin(6) * t495 + t432 * t970 + t435 * t966, t426 * t970 + t427 * t966 + t1186, pkin(6) * t489 + t431 * t970 + t434 * t966, pkin(6) * t429 + t421 * t970 + t422 * t966; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t936, t937, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t927 - t866, -pkin(1) * t926 - t867, 0, -pkin(1) * t794, (t923 + t1004) * t965, t922 * t969 + t925 * t965, t938 * t969 + t1028, (t924 - t1005) * t969, t940 * t965 + t1026, 0, pkin(1) * t841 + pkin(2) * t925 + pkin(7) * t888 - t1037, pkin(1) * t842 - pkin(2) * t922 + pkin(7) * t890 + t1038, pkin(1) * t875 + pkin(2) * t931 + pkin(7) * t928 + t757, pkin(1) * t718 - pkin(2) * t849 + pkin(7) * t757, t790 * t969 + t791 * t965, t725 * t969 + t727 * t965, t811 * t969 + t813 * t965, t788 * t969 + t789 * t965, t812 * t969 + t814 * t965, t835 * t969 + t836 * t965, pkin(1) * t659 - pkin(2) * t801 + pkin(7) * t704 + t665 * t969 + t707 * t965, pkin(1) * t668 - pkin(2) * t1083 + pkin(7) * t731 + t672 * t969 + t724 * t965, pkin(1) * t618 - pkin(2) * t832 + pkin(7) * t650 + t588 * t969 + t593 * t965, pkin(1) * t538 - pkin(2) * t796 + pkin(7) * t556 - pkin(8) * t1061 + t600 * t969, t1068, t1182, t1151, t1091, t1181, t1093, pkin(1) * t531 + pkin(7) * t565 + t496 * t969 + t504 * t965 - t1132, pkin(1) * t534 + pkin(7) * t569 + t499 * t969 + t505 * t965 - t1168, t478 * t969 + t484 * t965 + t1184, pkin(1) * t460 - pkin(2) * t528 + pkin(7) * t474 + t454 * t969 + t462 * t965, t1068, t1151, -t1182, t1093, -t1181, t1091, pkin(1) * t535 + pkin(7) * t570 + t469 * t969 + t475 * t965 - t1132, t463 * t969 + t465 * t965 + t1184, pkin(1) * t530 + pkin(7) * t564 + t466 * t969 + t471 * t965 + t1168, pkin(1) * t449 - pkin(2) * t508 + pkin(7) * t457 + t438 * t969 + t440 * t965;];
tauB_reg  = t1;
