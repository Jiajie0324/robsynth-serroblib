% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:57:18
% EndTime: 2019-03-09 05:57:29
% DurationCPUTime: 6.92s
% Computational Cost: add. (10695->601), mult. (22405->700), div. (0->0), fcn. (15440->14), ass. (0->310)
t231 = sin(qJ(4));
t232 = sin(qJ(3));
t235 = cos(qJ(3));
t411 = cos(qJ(4));
t168 = t231 * t235 + t232 * t411;
t345 = qJD(3) + qJD(4);
t128 = t345 * t168;
t157 = t168 * qJD(1);
t330 = t411 * t235;
t167 = t231 * t232 - t330;
t323 = t411 * qJD(4);
t269 = t411 * qJD(3) + t323;
t320 = qJDD(1) * t411;
t350 = qJD(1) * qJD(3);
t322 = t232 * t350;
t356 = qJD(1) * t232;
t329 = t231 * t356;
t244 = -qJD(4) * t329 - t231 * t322 + t232 * t320 + (qJD(1) * t269 + qJDD(1) * t231) * t235;
t432 = -t157 * t128 - t167 * t244;
t234 = cos(qJ(5));
t351 = qJD(5) * t234;
t155 = -qJD(1) * t330 + t329;
t376 = t155 * t234;
t431 = t351 + t376;
t224 = qJ(1) + pkin(10);
t216 = cos(t224);
t227 = qJ(3) + qJ(4);
t220 = sin(t227);
t367 = t216 * t220;
t215 = sin(t224);
t369 = t215 * t220;
t430 = g(1) * t367 + g(2) * t369;
t228 = sin(pkin(10));
t204 = pkin(1) * t228 + pkin(7);
t183 = t204 * qJDD(1);
t429 = qJD(2) * qJD(3) + t183;
t230 = sin(qJ(5));
t136 = t234 * t157 + t230 * t345;
t154 = qJD(5) + t155;
t379 = t136 * t154;
t313 = t234 * t345;
t134 = t157 * t230 - t313;
t382 = t134 * t154;
t344 = qJDD(3) + qJDD(4);
t352 = qJD(5) * t230;
t65 = -qJD(5) * t313 + t157 * t352 - t230 * t344 - t234 * t244;
t66 = qJD(5) * t136 + t230 * t244 - t234 * t344;
t9 = t230 * (t66 + t379) + t234 * (t65 + t382);
t347 = t232 * qJDD(1);
t296 = t231 * t347 - t235 * t320;
t106 = qJD(1) * t128 + t296;
t103 = qJDD(5) + t106;
t387 = qJ(6) * t103;
t229 = cos(pkin(10));
t205 = -t229 * pkin(1) - pkin(2);
t222 = t235 * pkin(3);
t417 = t205 - t222;
t158 = t417 * qJD(1);
t108 = pkin(4) * t155 - pkin(9) * t157 + t158;
t185 = t204 * qJD(1);
t335 = t232 * qJDD(2) + t235 * t429;
t354 = qJD(3) * t232;
t116 = -t185 * t354 + t335;
t346 = t235 * qJDD(1);
t104 = (-t322 + t346) * pkin(8) + t116;
t219 = t235 * qJD(2);
t319 = pkin(8) * qJD(1) + t185;
t138 = -t232 * t319 + t219;
t133 = qJD(3) * pkin(3) + t138;
t355 = qJD(2) * t232;
t139 = t235 * t319 + t355;
t353 = qJD(4) * t231;
t218 = t235 * qJDD(2);
t97 = qJDD(3) * pkin(3) + t218 + (-pkin(8) * qJDD(1) - t183) * t232 - t139 * qJD(3);
t23 = t411 * t104 + t133 * t323 - t139 * t353 + t231 * t97;
t21 = pkin(9) * t344 + t23;
t202 = pkin(3) * t322;
t388 = pkin(1) * qJDD(1);
t338 = t229 * t388;
t41 = -qJDD(1) * pkin(2) - pkin(3) * t346 + t106 * pkin(4) - pkin(9) * t244 + t202 - t338;
t132 = t411 * t139;
t91 = t231 * t133 + t132;
t83 = pkin(9) * t345 + t91;
t6 = t108 * t351 + t234 * t21 + t230 * t41 - t352 * t83;
t2 = qJD(6) * t154 + t387 + t6;
t318 = t108 * t352 + t230 * t21 - t234 * t41 + t83 * t351;
t408 = pkin(5) * t103;
t4 = qJDD(6) + t318 - t408;
t428 = t2 * t234 + t4 * t230;
t385 = t103 * t234;
t427 = pkin(9) * (t154 * t352 - t385);
t315 = t231 * t104 + t133 * t353 + t139 * t323 - t411 * t97;
t22 = -pkin(4) * t344 + t315;
t131 = t231 * t139;
t90 = t133 * t411 - t131;
t82 = -pkin(4) * t345 - t90;
t426 = t22 * t230 + t82 * t351;
t409 = pkin(3) * t231;
t211 = pkin(9) + t409;
t312 = pkin(3) * t323;
t290 = t234 * t312;
t392 = t234 * t66;
t425 = -t134 * t290 - t211 * t392;
t423 = t66 - t379;
t98 = t138 * t231 + t132;
t308 = pkin(3) * t353 - t98;
t421 = t157 * t345;
t119 = pkin(4) * t167 - pkin(9) * t168 + t417;
t400 = pkin(8) + t204;
t160 = t400 * t232;
t161 = t400 * t235;
t122 = -t231 * t160 + t161 * t411;
t420 = t230 * t119 + t234 * t122;
t419 = -t411 * t160 - t231 * t161;
t377 = t155 * t230;
t418 = -qJD(6) * t230 - t431 * qJ(6) + (t352 + t377) * pkin(5);
t221 = cos(t227);
t358 = t221 * pkin(4) + t220 * pkin(9);
t327 = t168 * t351;
t314 = t231 * t345;
t127 = t232 * t314 - t235 * t269;
t384 = t127 * t230;
t277 = t327 - t384;
t373 = t168 * t230;
t253 = -t103 * t373 - t154 * t277;
t399 = t128 * t134 + t167 * t66;
t416 = t253 - t399;
t303 = g(1) * t216 + g(2) * t215;
t321 = qJD(3) * t400;
t152 = t232 * t321;
t306 = t235 * t321;
t70 = qJD(4) * t419 - t411 * t152 - t231 * t306;
t341 = pkin(3) * t354;
t76 = pkin(4) * t128 + pkin(9) * t127 + t341;
t15 = -qJD(5) * t420 - t230 * t70 + t234 * t76;
t414 = t127 * t345 - t168 * t344;
t413 = t136 ^ 2;
t412 = t154 ^ 2;
t233 = sin(qJ(1));
t410 = pkin(1) * t233;
t407 = pkin(5) * t157;
t406 = pkin(9) * t103;
t209 = g(3) * t220;
t403 = g(3) * t221;
t402 = g(3) * t235;
t5 = t6 * t234;
t8 = t66 * pkin(5) + t65 * qJ(6) - t136 * qJD(6) + t22;
t401 = t8 * t230;
t383 = t127 * t234;
t372 = t168 * t234;
t51 = t66 * t372;
t398 = t134 * t383 - t51;
t397 = t136 * t128 - t167 * t65;
t46 = t108 * t230 + t234 * t83;
t396 = t154 * t46;
t47 = t134 * pkin(5) - t136 * qJ(6) + t82;
t395 = t155 * t47;
t394 = t155 * t82;
t393 = t230 * t65;
t391 = -t168 * t106 + t127 * t155;
t390 = t418 + t308;
t389 = -t91 + t418;
t123 = pkin(4) * t157 + pkin(9) * t155;
t58 = t230 * t123 + t234 * t90;
t115 = pkin(3) * t356 + t123;
t99 = t138 * t411 - t131;
t56 = t230 * t115 + t234 * t99;
t386 = t103 * t211;
t381 = t134 * t211;
t380 = t136 * t134;
t378 = t154 * t157;
t316 = t154 * t234;
t374 = t157 * t155;
t371 = t185 * t232;
t370 = t185 * t235;
t368 = t215 * t221;
t366 = t216 * t221;
t365 = t221 * t230;
t364 = t221 * t234;
t363 = t230 * qJ(6);
t45 = t108 * t234 - t230 * t83;
t361 = qJD(6) - t45;
t360 = t430 * t234;
t213 = t222 + pkin(2);
t236 = cos(qJ(1));
t223 = t236 * pkin(1);
t359 = t216 * t213 + t223;
t225 = t232 ^ 2;
t226 = t235 ^ 2;
t357 = t225 - t226;
t186 = qJD(1) * t205;
t184 = qJDD(1) * t205;
t86 = t136 * t384;
t343 = -t136 * t327 + t65 * t373 + t86;
t342 = t411 * pkin(3);
t239 = qJD(1) ^ 2;
t337 = t232 * t239 * t235;
t77 = t103 * t372;
t42 = t47 * t352;
t336 = t47 * t351;
t78 = t82 * t352;
t334 = g(1) * t366 + g(2) * t368 + t209;
t333 = g(3) * t365 - t230 * t430;
t332 = t230 * t411;
t331 = t234 * t411;
t328 = t168 * t352;
t326 = t211 * t351;
t325 = t134 ^ 2 - t413;
t317 = t154 * t230;
t311 = pkin(4) * t366 + pkin(9) * t367 + t359;
t310 = pkin(5) * t364 + t221 * t363 + t358;
t309 = t235 * t322;
t307 = g(1) * t369 - g(2) * t367;
t142 = t215 * t365 + t216 * t234;
t144 = -t215 * t234 + t216 * t365;
t305 = g(1) * t142 - g(2) * t144;
t143 = t215 * t364 - t216 * t230;
t145 = t215 * t230 + t216 * t364;
t304 = g(1) * t143 - g(2) * t145;
t302 = g(1) * t215 - g(2) * t216;
t301 = g(1) * t233 - g(2) * t236;
t237 = -pkin(8) - pkin(7);
t299 = -t216 * t237 - t410;
t298 = t234 * pkin(5) + t363;
t297 = pkin(5) * t230 - qJ(6) * t234;
t33 = -pkin(5) * t154 + t361;
t34 = qJ(6) * t154 + t46;
t295 = t230 * t34 - t234 * t33;
t294 = -t230 * t33 - t234 * t34;
t293 = t230 * t46 + t234 * t45;
t292 = t230 * t45 - t234 * t46;
t289 = -t386 + t394;
t55 = t115 * t234 - t230 * t99;
t57 = t123 * t234 - t230 * t90;
t288 = -t134 * t157 - t385;
t68 = t119 * t234 - t122 * t230;
t286 = t134 * t230 + t136 * t234;
t149 = t355 + t370;
t284 = t33 * t157 + t360 + t42;
t283 = -t45 * t157 + t360 + t78;
t282 = -t45 * t376 - t46 * t377 - t334 + t5;
t281 = pkin(4) + t298;
t280 = -pkin(9) * qJD(5) * t154 - t403;
t279 = t303 * t232;
t276 = t328 + t383;
t275 = t134 * t328 + t398;
t14 = t119 * t351 - t122 * t352 + t230 * t76 + t234 * t70;
t274 = -t127 * t316 - t154 * t328 + t77;
t272 = t46 * t157 + t333 + t426;
t271 = -qJD(1) * t186 + t303;
t270 = t134 * t317 - t392;
t268 = t136 * t312 - t211 * t65;
t267 = -t34 * t157 - t47 * t376 - t333 - t401;
t266 = 0.2e1 * qJD(3) * t186 - qJDD(3) * t204;
t265 = g(1) * t144 + g(2) * t142 + t230 * t209 - t318;
t264 = -t230 * t312 - t326;
t263 = t211 * t352 - t290;
t262 = t158 * t155 - t23 + t334;
t261 = t33 * t431 - t34 * t377 - t334 + t428;
t260 = qJD(5) * t286 - t393;
t259 = -t158 * t157 - t315 - t403 + t430;
t238 = qJD(3) ^ 2;
t258 = -t204 * t238 - 0.2e1 * t184 + t302;
t257 = (-g(1) * (-t213 - t358) + g(2) * t237) * t215;
t256 = -qJD(5) * t295 + t428;
t255 = -qJD(5) * t293 + t230 * t318 + t5;
t254 = t134 * t277 + t373 * t66;
t71 = qJD(4) * t122 - t231 * t152 + t411 * t306;
t170 = pkin(9) * t368;
t172 = pkin(9) * t366;
t252 = -g(1) * (-pkin(4) * t367 + t172) - g(2) * (-pkin(4) * t369 + t170);
t117 = -qJD(3) * t149 - t183 * t232 + t218;
t148 = t219 - t371;
t251 = t116 * t235 - t117 * t232 + (-t148 * t235 - t149 * t232) * qJD(3);
t250 = t136 * t47 + qJDD(6) - t265;
t249 = t253 + t399;
t248 = -g(1) * t145 - g(2) * t143 - t209 * t234 + t6;
t243 = t220 * t281 * t303 - g(1) * t172 - g(2) * t170;
t242 = -t296 - t421;
t212 = -t342 - pkin(4);
t182 = qJDD(3) * t235 - t232 * t238;
t181 = qJDD(3) * t232 + t235 * t238;
t159 = -t342 - t281;
t151 = t157 * qJ(6);
t140 = qJDD(1) * t417 + t202;
t109 = -t155 ^ 2 + t157 ^ 2;
t105 = -t128 * t345 - t167 * t344;
t94 = pkin(5) * t136 + qJ(6) * t134;
t75 = t168 * t297 - t419;
t74 = t242 + t421;
t73 = t155 * t345 + t244;
t64 = pkin(9) * t392;
t62 = -pkin(5) * t167 - t68;
t61 = qJ(6) * t167 + t420;
t50 = t103 * t167 + t128 * t154;
t49 = -t57 - t407;
t48 = t151 + t58;
t44 = -t55 - t407;
t43 = t151 + t56;
t38 = -t65 + t382;
t31 = t103 * t230 - t136 * t157 + t154 * t316;
t30 = -t230 * t412 - t288;
t29 = t154 * t317 + t288;
t25 = t136 * t316 - t393;
t17 = -t297 * t127 + (qJD(5) * t298 - qJD(6) * t234) * t168 + t71;
t16 = -t136 * t276 - t372 * t65;
t13 = -pkin(5) * t128 - t15;
t12 = qJ(6) * t128 + qJD(6) * t167 + t14;
t11 = t274 + t397;
t1 = [0, 0, 0, 0, 0, qJDD(1), t301, g(1) * t236 + g(2) * t233, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t302 + 0.2e1 * t338, -0.2e1 * t228 * t388 + t303, 0 (t301 + (t228 ^ 2 + t229 ^ 2) * t388) * pkin(1), qJDD(1) * t225 + 0.2e1 * t309, 0.2e1 * t232 * t346 - 0.2e1 * t350 * t357, t181, qJDD(1) * t226 - 0.2e1 * t309, t182, 0, t232 * t266 + t235 * t258, -t232 * t258 + t235 * t266 (t225 + t226) * t183 + t251 - t303, t184 * t205 - g(1) * (-pkin(2) * t215 + pkin(7) * t216 - t410) - g(2) * (pkin(2) * t216 + pkin(7) * t215 + t223) + t251 * t204, -t157 * t127 + t168 * t244, t391 + t432, -t414, t106 * t167 + t128 * t155, t105, 0, t106 * t417 + t158 * t128 + t140 * t167 + t155 * t341 + t221 * t302 + t344 * t419 - t345 * t71, -t122 * t344 - t158 * t127 + t140 * t168 + t157 * t341 + t244 * t417 - t345 * t70 - t307, -t122 * t106 + t90 * t127 - t91 * t128 - t70 * t155 + t71 * t157 - t23 * t167 + t168 * t315 - t244 * t419 - t303, t23 * t122 + t91 * t70 - t315 * t419 - t90 * t71 + t140 * t417 + t158 * t341 - g(1) * (-t213 * t215 + t299) - g(2) * (-t215 * t237 + t359) t16, t275 + t343, t11, t254, t416, t50, t103 * t68 + t128 * t45 + t134 * t71 + t15 * t154 - t167 * t318 + t168 * t426 - t82 * t384 - t419 * t66 + t304, -t82 * t383 - t103 * t420 + t419 * t65 - t128 * t46 + t136 * t71 - t14 * t154 - t167 * t6 + (t22 * t234 - t78) * t168 - t305, -t134 * t14 - t136 * t15 + t65 * t68 - t66 * t420 + t293 * t127 + (qJD(5) * t292 - t230 * t6 + t234 * t318) * t168 + t307, -g(1) * t299 - g(2) * t311 + t46 * t14 + t45 * t15 - t22 * t419 - t318 * t68 + t420 * t6 + t82 * t71 + t257, t16, t11, -t134 * t276 - t343 + t51, t50, -t416, t254, -t47 * t384 - t103 * t62 - t128 * t33 - t13 * t154 + t134 * t17 - t167 * t4 + t66 * t75 + (t336 + t401) * t168 + t304, -t12 * t134 + t13 * t136 - t61 * t66 - t62 * t65 + t295 * t127 + (qJD(5) * t294 - t2 * t230 + t234 * t4) * t168 + t307, t47 * t383 + t103 * t61 + t12 * t154 + t128 * t34 - t136 * t17 + t167 * t2 + t65 * t75 + (-t8 * t234 + t42) * t168 + t305, t2 * t61 + t34 * t12 + t8 * t75 + t47 * t17 + t4 * t62 + t33 * t13 - g(1) * (-pkin(5) * t143 - qJ(6) * t142 + t299) - g(2) * (pkin(5) * t145 + qJ(6) * t144 + t311) + t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t182, -t181, 0, t116 * t232 + t117 * t235 - g(3) + (-t148 * t232 + t149 * t235) * qJD(3), 0, 0, 0, 0, 0, 0, t105, t414, t391 - t432, -t127 * t91 - t128 * t90 + t167 * t315 + t168 * t23 - g(3), 0, 0, 0, 0, 0, 0, t249, t154 * t276 + t397 - t77, t168 * t260 + t398 - t86, t127 * t292 + t128 * t82 + t167 * t22 + t168 * t255 - g(3), 0, 0, 0, 0, 0, 0, t249, t275 - t343, t274 - t397, t127 * t294 + t128 * t47 + t167 * t8 + t168 * t256 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t337, t357 * t239, t347, t337, t346, qJDD(3), -t402 + t218 + (t149 - t370) * qJD(3) + (t271 - t429) * t232, g(3) * t232 + (t148 + t371) * qJD(3) + t271 * t235 - t335, 0, 0, t374, t109, t73, -t374, t74, t344, t98 * t345 + (-qJD(4) * t314 - t155 * t356 + t344 * t411) * pkin(3) + t259, t99 * t345 + (-t157 * t356 - t231 * t344 - t323 * t345) * pkin(3) + t262, -t106 * t409 - t244 * t342 + (t91 + t308) * t157 + (-t312 - t90 + t99) * t155, t90 * t98 - t91 * t99 + (-t411 * t315 - t402 + t23 * t231 + (-t231 * t90 + t411 * t91) * qJD(4) + (-qJD(1) * t158 + t303) * t232) * pkin(3), t25, -t9, t31, t270, t30, -t378, t212 * t66 + (-t22 - t403) * t234 + t289 * t230 + t308 * t134 + (-t55 + t264) * t154 + t283, -t212 * t65 + t289 * t234 + t308 * t136 + (t56 + t263) * t154 + t272, t56 * t134 + t55 * t136 + (t136 * t211 - t45) * t351 + (t318 + (-t46 + t381) * qJD(5) + t268) * t230 + t282 + t425, t22 * t212 - t46 * t56 - t45 * t55 - t82 * t98 - g(3) * (t222 + t358) + (t279 + (t231 * t82 + t331 * t46 - t332 * t45) * qJD(4)) * pkin(3) + t255 * t211 + t252, t25, t31, t9, -t378, t29, t270, t159 * t66 + (-t8 - t403) * t234 + (-t386 + t395) * t230 + t390 * t134 + (t44 + t264) * t154 + t284, t43 * t134 + (-t44 + t326) * t136 + ((-t34 + t381) * qJD(5) + t268) * t230 + t261 + t425, t159 * t65 + (-qJD(5) * t47 + t386) * t234 - t390 * t136 + (-t43 - t263) * t154 + t267, t8 * t159 - t34 * t43 - t33 * t44 - g(3) * (t222 + t310) + t390 * t47 + (t279 + (t33 * t332 + t331 * t34) * qJD(4)) * pkin(3) + t256 * t211 + t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t374, t109, t73, -t374, t74, t344, t345 * t91 + t259, t345 * t90 + t262, 0, 0, t25, -t9, t31, t270, t30, -t378, -pkin(4) * t66 - t134 * t91 - t154 * t57 + (t394 - t406) * t230 + (-t22 + t280) * t234 + t283, pkin(4) * t65 - t136 * t91 + t154 * t58 + t376 * t82 + t272 + t427, t134 * t58 + t136 * t57 - t64 + (-pkin(9) * t65 + t318) * t230 + (pkin(9) * t286 - t293) * qJD(5) + t282, -t22 * pkin(4) + pkin(9) * t255 - g(3) * t358 - t45 * t57 - t46 * t58 - t82 * t91 + t252, t25, t31, t9, -t378, t29, t270, t154 * t49 - t281 * t66 + (t395 - t406) * t230 + t389 * t134 + (t280 - t8) * t234 + t284, pkin(9) * t260 + t134 * t48 - t136 * t49 - t34 * t352 + t261 - t64, -t136 * t389 - t154 * t48 - t281 * t65 + t267 - t336 - t427, pkin(9) * t256 - g(3) * t310 - t281 * t8 - t33 * t49 - t34 * t48 + t389 * t47 + t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, -t325, t38, -t380, -t423, t103, -t136 * t82 + t265 + t396, t134 * t82 + t154 * t45 - t248, 0, 0, t380, t38, t325, t103, t423, -t380, -t134 * t94 - t250 + t396 + 0.2e1 * t408, pkin(5) * t65 - qJ(6) * t66 + (t34 - t46) * t136 + (t33 - t361) * t134, 0.2e1 * t387 - t134 * t47 + t136 * t94 + (0.2e1 * qJD(6) - t45) * t154 + t248, t2 * qJ(6) - t4 * pkin(5) - t47 * t94 - t33 * t46 - g(1) * (-pkin(5) * t144 + qJ(6) * t145) - g(2) * (-pkin(5) * t142 + qJ(6) * t143) + t361 * t34 + t297 * t209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) + t242 + t380, t38, -t412 - t413, -t154 * t34 + t250 - t408;];
tau_reg  = t1;
