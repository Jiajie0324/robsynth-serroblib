% Calculate vector of inverse dynamics joint torques for
% S6RRPRRP14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP14_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRP14_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRRP14_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:10:17
% EndTime: 2019-03-09 13:10:39
% DurationCPUTime: 16.20s
% Computational Cost: add. (10302->816), mult. (24428->1009), div. (0->0), fcn. (18488->10), ass. (0->336)
t733 = cos(qJ(2));
t725 = sin(pkin(6));
t729 = sin(qJ(2));
t884 = qJD(1) * t729;
t853 = t725 * t884;
t726 = cos(pkin(6));
t885 = qJD(1) * t726;
t861 = pkin(1) * t885;
t892 = -pkin(8) * t853 + t733 * t861;
t869 = qJD(3) - t892;
t731 = cos(qJ(5));
t728 = sin(qJ(4));
t732 = cos(qJ(4));
t821 = pkin(4) * t732 + pkin(10) * t728;
t963 = (-pkin(3) - t821) * t853 - qJD(4) * t821 - t869;
t966 = t963 * t731;
t867 = qJD(1) * qJD(2);
t844 = t729 * t867;
t823 = t725 * t844;
t864 = qJDD(1) * t733;
t840 = t725 * t864;
t965 = t823 - t840;
t866 = qJDD(1) * t726;
t707 = qJDD(2) + t866;
t875 = qJD(4) * t733;
t848 = t725 * t875;
t791 = -qJD(1) * t848 + t707;
t709 = qJD(2) + t885;
t878 = qJD(4) * t709;
t551 = t791 * t728 + (t878 - t965) * t732;
t549 = qJDD(5) + t551;
t883 = qJD(1) * t733;
t852 = t725 * t883;
t916 = t709 * t728;
t632 = t732 * t852 + t916;
t628 = qJD(5) + t632;
t843 = t733 * t867;
t865 = qJDD(1) * t729;
t772 = t843 + t865;
t756 = t772 * t725;
t750 = qJDD(4) + t756;
t685 = t707 * qJ(3);
t686 = t709 * qJD(3);
t860 = pkin(1) * qJD(2) * t726;
t831 = qJD(1) * t860;
t859 = pkin(1) * t866;
t827 = pkin(8) * t965 - t729 * t859 - t733 * t831;
t552 = -t685 - t686 + t827;
t761 = pkin(3) * t840 - t552;
t535 = -pkin(3) * t823 + t761;
t735 = -pkin(2) - pkin(9);
t914 = t725 * t729;
t862 = g(3) * t914;
t730 = sin(qJ(1));
t904 = t730 * t733;
t734 = cos(qJ(1));
t905 = t729 * t734;
t662 = t726 * t905 + t904;
t902 = t733 * t734;
t907 = t729 * t730;
t664 = -t726 * t907 + t902;
t957 = -g(1) * t664 - g(2) * t662;
t757 = -t957 + t862;
t805 = qJD(4) + t853;
t956 = qJD(4) * t805;
t961 = -t735 * t956 + t535 - t757;
t634 = t709 * t732 - t728 * t852;
t782 = t634 * t805;
t727 = sin(qJ(5));
t578 = t731 * t634 + t727 * t805;
t781 = t805 * t578;
t711 = pkin(8) * t914;
t854 = -pkin(1) * t733 - pkin(2);
t594 = pkin(3) * t914 + t711 + (-pkin(9) + t854) * t726;
t912 = t725 * t733;
t890 = pkin(2) * t912 + qJ(3) * t914;
t945 = pkin(9) * t733;
t614 = (-pkin(1) - t945) * t725 - t890;
t895 = t728 * t594 + t732 * t614;
t539 = pkin(10) * t914 + t895;
t948 = pkin(1) * t729;
t717 = t726 * t948;
t889 = pkin(8) * t912 + t717;
t638 = -t726 * qJ(3) - t889;
t613 = pkin(3) * t912 - t638;
t659 = t726 * t728 + t732 * t912;
t856 = t728 * t912;
t660 = t726 * t732 - t856;
t547 = pkin(4) * t659 - pkin(10) * t660 + t613;
t960 = t731 * t539 + t727 * t547;
t820 = pkin(4) * t728 - pkin(10) * t732;
t672 = qJ(3) + t820;
t908 = t728 * t731;
t891 = t727 * t672 + t735 * t908;
t874 = qJD(5) * t578;
t846 = t732 * t875;
t881 = qJD(2) * t729;
t849 = t728 * t881;
t759 = -t846 + t849;
t877 = qJD(4) * t728;
t903 = t732 * t707;
t786 = t709 * t877 - t903;
t841 = t728 * t864;
t959 = (qJD(1) * t759 - t841) * t725 - t786;
t515 = t727 * t959 - t731 * t750 + t874;
t705 = pkin(2) * t853;
t936 = qJ(3) * t733;
t806 = pkin(9) * t729 - t936;
t886 = qJD(1) * t725;
t617 = t806 * t886 + t705;
t701 = pkin(8) * t852;
t651 = t729 * t861 + t701;
t619 = pkin(3) * t852 + t651;
t894 = t732 * t617 + t728 * t619;
t543 = pkin(10) * t852 + t894;
t876 = qJD(4) * t732;
t847 = t731 * t876;
t872 = qJD(5) * t731;
t958 = t731 * t543 - t672 * t872 + t727 * t963 - t735 * t847;
t870 = pkin(3) * t853 + t869;
t839 = -qJ(3) * t729 - pkin(1);
t796 = -pkin(2) * t733 + t839;
t622 = t796 * t886;
t955 = t622 * t853 + qJDD(3);
t663 = t726 * t904 + t905;
t913 = t725 * t730;
t605 = -t663 * t732 + t728 * t913;
t661 = -t726 * t902 + t907;
t911 = t725 * t734;
t787 = t661 * t732 + t728 * t911;
t764 = g(1) * t605 - g(2) * t787 + g(3) * t659;
t570 = t709 * t735 + t870;
t767 = t733 * t735 + t839;
t590 = t767 * t886;
t525 = t732 * t570 - t728 * t590;
t518 = -pkin(4) * t805 - t525;
t783 = t731 * t805;
t576 = t634 * t727 - t783;
t502 = t576 * pkin(5) - t578 * qJ(6) + t518;
t944 = pkin(10) * t549;
t954 = t502 * t628 - t944;
t788 = -t661 * t728 + t732 * t911;
t557 = t662 * t731 + t727 * t788;
t558 = -t662 * t727 + t731 * t788;
t851 = t725 * t881;
t700 = pkin(2) * t851;
t879 = qJD(3) * t729;
t751 = qJD(2) * t806 - t879;
t589 = t725 * t751 + t700;
t949 = pkin(3) + pkin(8);
t620 = (t912 * t949 + t717) * qJD(2);
t769 = t732 * t589 + t594 * t876 - t614 * t877 + t728 * t620;
t880 = qJD(2) * t733;
t850 = t725 * t880;
t508 = pkin(10) * t850 + t769;
t704 = t733 * t860;
t719 = t726 * qJD(3);
t593 = -t851 * t949 + t704 + t719;
t601 = -qJD(4) * t659 + t725 * t849;
t602 = t726 * t876 - t728 * t848 - t732 * t851;
t521 = pkin(4) * t602 - pkin(10) * t601 + t593;
t952 = -qJD(5) * t960 - t508 * t727 + t521 * t731;
t951 = t578 ^ 2;
t950 = t628 ^ 2;
t947 = pkin(2) * t707;
t946 = pkin(5) * t549;
t938 = pkin(10) * qJD(5);
t937 = MDP(7) * t725;
t935 = qJ(6) * t549;
t526 = t728 * t570 + t732 * t590;
t519 = pkin(10) * t805 + t526;
t687 = t709 * qJ(3);
t587 = t687 + t619;
t527 = pkin(4) * t632 - pkin(10) * t634 + t587;
t501 = t519 * t731 + t527 * t727;
t495 = qJ(6) * t628 + t501;
t934 = t495 * t628;
t933 = t501 * t628;
t873 = qJD(5) * t727;
t514 = -qJD(5) * t783 + t634 * t873 - t727 * t750 - t731 * t959;
t932 = t514 * t727;
t931 = t514 * t732;
t930 = t515 * t731;
t929 = t549 * t727;
t928 = t549 * t731;
t927 = t576 * t578;
t926 = t576 * t628;
t925 = t576 * t727;
t924 = t576 * t731;
t923 = t578 * t628;
t922 = t578 * t727;
t921 = t578 * t731;
t918 = t672 * t731;
t917 = t707 * t726;
t722 = t725 ^ 2;
t915 = t722 * qJD(1) ^ 2;
t910 = t727 * t728;
t909 = t727 * t735;
t906 = t729 * t731;
t569 = pkin(4) * t634 + pkin(10) * t632;
t901 = t731 * t525 + t727 * t569;
t824 = t732 * t853;
t845 = t735 * t873;
t898 = (qJD(6) - t845) * t728 - t958 + (t824 + t876) * qJ(6);
t838 = -pkin(5) + t909;
t897 = -pkin(5) * t824 + qJD(5) * t891 - t543 * t727 + t838 * t876 + t966;
t836 = -t728 * t617 + t619 * t732;
t542 = -pkin(4) * t852 - t836;
t825 = t728 * t853;
t625 = t727 * t825 - t731 * t852;
t636 = (t727 * t733 + t728 * t906) * t725;
t626 = qJD(1) * t636;
t807 = pkin(5) * t727 - qJ(6) * t731;
t790 = -t735 + t807;
t808 = pkin(5) * t731 + qJ(6) * t727;
t896 = -pkin(5) * t625 + qJ(6) * t626 - t542 + (qJD(5) * t808 - qJD(6) * t731) * t732 - t790 * t877;
t893 = -qJD(6) * t727 + t628 * t807 - t526;
t723 = t729 ^ 2;
t888 = -t733 ^ 2 + t723;
t887 = MDP(11) * t725;
t882 = qJD(2) * t728;
t871 = qJD(2) - t709;
t500 = -t519 * t727 + t527 * t731;
t868 = qJD(6) - t500;
t863 = 0.2e1 * t722;
t858 = t733 * t915;
t857 = t727 * t914;
t842 = t725 * t865;
t837 = t594 * t732 - t728 * t614;
t835 = t628 * t731;
t834 = t709 + t885;
t833 = 0.2e1 * t843;
t832 = t707 + t866;
t830 = t729 * t858;
t826 = pkin(8) * t842 + qJD(2) * t701 + t729 * t831 - t733 * t859;
t799 = qJDD(3) + t826;
t531 = pkin(3) * t756 + t707 * t735 + t799;
t679 = pkin(2) * t823;
t540 = t679 + (qJD(1) * t751 + qJDD(1) * t767) * t725;
t770 = -t728 * t531 - t732 * t540 - t570 * t876 + t590 * t877;
t492 = pkin(10) * t750 - t770;
t498 = t786 * pkin(10) + t551 * pkin(4) + (pkin(10) * t841 + (-pkin(3) * t881 - pkin(10) * t759) * qJD(1)) * t725 + t761;
t829 = t727 * t492 - t731 * t498 + t519 * t872 + t527 * t873;
t828 = -t732 * t531 + t728 * t540 + t570 * t877 + t590 * t876;
t606 = t663 * t728 + t732 * t913;
t555 = t606 * t727 - t664 * t731;
t819 = g(1) * t557 + g(2) * t555;
t556 = t606 * t731 + t664 * t727;
t818 = -g(1) * t558 - g(2) * t556;
t817 = g(1) * t787 + g(2) * t605;
t816 = g(1) * t661 - g(2) * t663;
t814 = g(1) * t734 + g(2) * t730;
t811 = t727 * t877 + t625;
t810 = t731 * t877 + t626;
t604 = t660 * t731 + t857;
t789 = -t660 * t727 + t725 * t906;
t809 = pkin(5) * t789 + qJ(6) * t604;
t494 = -pkin(5) * t628 + t868;
t804 = t494 * t731 - t495 * t727;
t803 = t494 * t727 + t495 * t731;
t800 = -t539 * t727 + t547 * t731;
t639 = -pkin(1) * t725 - t890;
t798 = qJD(2) * (-qJD(1) * t639 - t622);
t797 = -pkin(8) * t851 + t704;
t795 = pkin(4) + t808;
t794 = -g(1) * t663 - g(2) * t661 + g(3) * t912;
t793 = t734 * pkin(1) + t664 * pkin(2) + pkin(8) * t913 + qJ(3) * t663;
t792 = -t728 * t589 - t594 * t877 - t614 * t876 + t620 * t732;
t785 = -t628 * t872 - t929;
t784 = -t628 * t873 + t928;
t780 = t805 * t732;
t779 = -qJ(3) * t880 - t879;
t775 = t518 * t628 - t944;
t553 = t679 + (qJD(1) * t779 + qJDD(1) * t796) * t725;
t621 = t725 * t779 + t700;
t773 = qJD(1) * t621 + qJDD(1) * t639 + t553;
t771 = t844 - t864;
t484 = t731 * t492 + t727 * t498 - t519 * t873 + t527 * t872;
t768 = t731 * t508 + t727 * t521 - t539 * t873 + t547 * t872;
t538 = -pkin(4) * t914 - t837;
t572 = t661 * t731 + t662 * t910;
t574 = t663 * t731 + t664 * t910;
t635 = t728 * t857 - t731 * t912;
t766 = g(1) * t574 + g(2) * t572 + g(3) * t635;
t573 = -t661 * t727 + t662 * t908;
t575 = -t663 * t727 + t664 * t908;
t765 = -g(1) * t575 - g(2) * t573 - g(3) * t636;
t763 = -g(1) * t606 + g(2) * t788 - g(3) * t660;
t762 = -pkin(1) * t730 - t662 * pkin(2) + pkin(8) * t911 - qJ(3) * t661;
t652 = t889 * qJD(2);
t760 = -g(1) * t662 + g(2) * t664 + t652 * t709;
t758 = t805 * t886;
t755 = t957 - t827;
t753 = -t794 - t826;
t752 = t725 * (t871 * t883 + t865);
t509 = -pkin(4) * t850 - t792;
t749 = -t628 * t938 + t764;
t748 = g(1) * t555 - g(2) * t557 - g(3) * t789 - t829;
t493 = -pkin(4) * t750 + t828;
t486 = t515 * pkin(5) + t514 * qJ(6) - t578 * qJD(6) + t493;
t747 = -t486 + t749;
t631 = t732 * t750;
t746 = t651 * t709 + t753;
t482 = qJD(6) * t628 + t484 + t935;
t483 = qJDD(6) + t829 - t946;
t745 = qJD(5) * t804 + t482 * t731 + t483 * t727;
t743 = -g(1) * t556 + g(2) * t558 - g(3) * t604 + t484;
t742 = t502 * t578 + qJDD(6) - t748;
t740 = -t729 * t758 - t956;
t738 = t728 * t740 + t631;
t655 = t663 * pkin(2);
t653 = t661 * pkin(2);
t649 = -qJ(3) * t852 + t705;
t640 = t726 * t854 + t711;
t637 = t790 * t732;
t627 = -t719 - t797;
t624 = t709 * t727 - t731 * t824;
t623 = t709 * t731 + t727 * t824;
t616 = t728 * t838 - t918;
t615 = -t687 - t651;
t612 = qJ(6) * t728 + t891;
t611 = -pkin(2) * t709 + t869;
t565 = t799 - t947;
t537 = qJD(5) * t789 + t601 * t731 + t727 * t850;
t536 = qJD(5) * t604 + t601 * t727 - t731 * t850;
t528 = pkin(5) * t578 + qJ(6) * t576;
t513 = t538 - t809;
t506 = -pkin(5) * t659 - t800;
t505 = qJ(6) * t659 + t960;
t504 = -pkin(5) * t634 + t525 * t727 - t569 * t731;
t503 = qJ(6) * t634 + t901;
t499 = -t514 + t926;
t489 = pkin(5) * t536 - qJ(6) * t537 - qJD(6) * t604 + t509;
t488 = -pkin(5) * t602 - t952;
t487 = qJ(6) * t602 + qJD(6) * t659 + t768;
t1 = [(-t493 * t789 + t500 * t602 + t509 * t576 + t538 * t515 + t518 * t536 + t800 * t549 + t628 * t952 - t659 * t829 + t818) * MDP(27) + (t482 * t789 + t483 * t604 - t487 * t576 + t488 * t578 + t494 * t537 - t495 * t536 - t505 * t515 - t506 * t514 - t817) * MDP(30) + (-t483 * t659 - t486 * t789 - t488 * t628 + t489 * t576 - t494 * t602 + t502 * t536 - t506 * t549 + t513 * t515 + t818) * MDP(29) + (-t515 * t659 - t536 * t628 + t549 * t789 - t576 * t602) * MDP(25) + (-t514 * t789 - t515 * t604 - t536 * t578 - t537 * t576) * MDP(23) + (-t484 * t659 + t493 * t604 - t501 * t602 + t509 * t578 - t538 * t514 + t518 * t537 - t549 * t960 - t628 * t768 + t819) * MDP(28) + (t634 * t601 + t660 * t959) * MDP(15) + (-t660 * t551 - t601 * t632 - t634 * t602 - t659 * t959) * MDP(16) + (t601 * qJD(4) + t660 * qJDD(4) + ((qJD(1) * t660 + t634) * t880 + ((t660 - t856) * qJDD(1) + (t725 * t759 + t601) * qJD(1) - t786) * t729) * t725) * MDP(17) + (-t602 * qJD(4) - t659 * qJDD(4) + ((-qJD(1) * t659 - t632) * t880 + (-qJD(1) * t602 - qJDD(1) * t659 - t551) * t729) * t725) * MDP(18) + t814 * MDP(3) + (-t552 * t726 - t627 * t709 - t638 * t707 + (-t729 * t773 + t733 * t798) * t725 + t816) * MDP(13) + (t482 * t659 - t486 * t604 + t487 * t628 - t489 * t578 + t495 * t602 - t502 * t537 + t505 * t549 + t513 * t514 - t819) * MDP(31) + (-pkin(1) * t772 * t863 - t707 * t889 - t709 * t797 + t726 * t827 - t816) * MDP(10) + (-t711 * t707 - t826 * t726 + (t733 * t917 - t771 * t863) * pkin(1) - t760) * MDP(9) + (t593 * t634 + t613 * (t728 * t823 - t786) + t535 * t660 + t587 * t601 - t769 * t805 + t895 * (-qJDD(4) - t842) + t770 * t914 + (t613 * (-qJD(1) * t876 - qJDD(1) * t728) + (-qJD(1) * t895 - t526) * qJD(2)) * t912 + t817) * MDP(21) + (t565 * t726 + t640 * t707 + (t729 * t798 + t733 * t773) * t725 + t760) * MDP(12) + (t733 * t832 - t834 * t881) * t937 + MDP(8) * t917 + ((qJD(2) * t611 - qJDD(1) * t638 - t552 + (qJD(2) * t640 - t627) * qJD(1)) * t733 + (qJD(2) * t615 + qJDD(1) * t640 + t565 + (qJD(2) * t638 + t652) * qJD(1)) * t729 - t814) * t887 + (g(1) * t730 - g(2) * t734) * MDP(2) + (t549 * t659 + t602 * t628) * MDP(26) + (-t514 * t659 + t537 * t628 + t549 * t604 + t578 * t602) * MDP(24) + (-t514 * t604 + t537 * t578) * MDP(22) + (-g(1) * t788 - g(2) * t606 + t525 * t850 + t535 * t659 + t613 * t551 + t587 * t602 + t593 * t632 + t750 * t837 + t792 * t805 - t828 * t914) * MDP(20) + (t482 * t505 + t495 * t487 + t486 * t513 + t502 * t489 + t483 * t506 + t494 * t488 - g(1) * (pkin(3) * t911 + pkin(4) * t788 + pkin(5) * t558 - pkin(9) * t662 + pkin(10) * t787 + qJ(6) * t557 + t762) - g(2) * (pkin(3) * t913 + pkin(4) * t606 + pkin(5) * t556 + pkin(9) * t664 + pkin(10) * t605 + qJ(6) * t555 + t793)) * MDP(32) + ((qJDD(1) * t723 + t729 * t833) * MDP(4) + 0.2e1 * (t729 * t864 - t867 * t888) * MDP(5)) * t722 + (-g(1) * t762 - g(2) * t793 + t552 * t638 + t553 * t639 + t565 * t640 + t611 * t652 + t615 * t627 + t622 * t621) * MDP(14) + (qJD(2) * t875 + (qJDD(4) + (t833 + t865) * t725) * t729) * t725 * MDP(19) + (t729 * t832 + t834 * t880) * t725 * MDP(6) + qJDD(1) * MDP(1); t888 * MDP(5) * t915 + (t549 * t918 - t518 * t625 - t542 * t576 + (-t966 + (-qJD(5) * t672 + t543) * t727) * t628 + (-t518 * t727 * qJD(4) - t829 + (qJD(4) * t576 + t785) * t735) * t728 + (t500 * t853 + t518 * t872 + t493 * t727 - t735 * t515 + (-t628 * t909 + t500) * qJD(4)) * t732 + t765) * MDP(27) + (pkin(1) * t858 + t709 * t892 - t755 + t862) * MDP(10) + (t482 * t612 + t486 * t637 + t483 * t616 - g(1) * (pkin(5) * t575 - pkin(9) * t663 + qJ(6) * t574 - t655) - g(2) * (pkin(5) * t573 - pkin(9) * t661 + qJ(6) * t572 - t653) + t896 * t502 + t898 * t495 + t897 * t494 + t957 * t672 + (-pkin(5) * t636 - qJ(6) * t635 - t890 - (t729 * t820 + t945) * t725) * g(3)) * MDP(32) + (-t891 * t549 - t542 * t578 - t518 * t626 + t958 * t628 + (t628 * t845 - t484 + (-t518 * t731 + t578 * t735) * qJD(4)) * t728 + (t493 * t731 - t501 * t805 + t735 * t514 - t518 * t873) * t732 + t766) * MDP(28) + (-t649 * t852 - t746 - 0.2e1 * t947 + t955) * MDP(12) + (-t728 * qJDD(4) + (t632 * t883 - t728 * t772) * t725 + t740 * t732) * MDP(18) + (-t483 * t728 + t515 * t637 - t549 * t616 - t897 * t628 + t896 * t576 - t811 * t502 + (t486 * t727 - t494 * t805 + t502 * t872) * t732 + t765) * MDP(29) + (t482 * t728 + t514 * t637 + t549 * t612 + t898 * t628 - t896 * t578 + t810 * t502 + (-t486 * t731 + t495 * t805 + t502 * t873) * t732 - t766) * MDP(31) + (-t494 * t626 + t495 * t625 - t514 * t616 - t515 * t612 + t897 * t578 - t898 * t576 - t804 * t877 + (-qJD(5) * t803 - t482 * t727 + t483 * t731 + t757) * t732) * MDP(30) + (t915 * t948 + t746) * MDP(9) + ((-pkin(2) * t729 + t936) * qJDD(1) + ((-qJ(3) * qJD(2) - t615 - t651) * t729 + (-pkin(2) * qJD(2) - t611 + t869) * t733) * qJD(1)) * t887 + (-t731 * t931 + (-t732 * t873 - t810) * t578) * MDP(22) + (t576 * t626 + t578 * t625 + (t922 + t924) * t877 + (t932 - t930 + (-t921 + t925) * qJD(5)) * t732) * MDP(23) + (-t552 * qJ(3) - t565 * pkin(2) - t622 * t649 - t611 * t651 - g(1) * (qJ(3) * t664 - t655) - g(2) * (qJ(3) * t662 - t653) - g(3) * t890 - t869 * t615) * MDP(14) + (t549 * t728 + t628 * t780) * MDP(26) + (0.2e1 * t685 + t686 + t869 * t709 + (-g(3) * t729 + (t622 * t733 + t649 * t729) * qJD(1)) * t725 + t755) * MDP(13) + (-t634 * t852 + t738) * MDP(17) + (t894 * t805 + t526 * t852 + t870 * t634 + (-t735 * qJDD(4) + (-t587 - t687) * qJD(4) + (qJ(3) * t771 - t587 * t884 - t735 * t772) * t725) * t728 + (qJ(3) * t791 + t961) * t732) * MDP(21) + (qJ(3) * t551 - t525 * t852 + t587 * t780 + t735 * t631 + t870 * t632 + t728 * t961 - t836 * t805) * MDP(20) + (-t514 * t728 - t810 * t628 + (t781 + t784) * t732) * MDP(24) + (-t515 * t728 + t811 * t628 + (-t576 * t805 + t785) * t732) * MDP(25) + (t791 * t732 ^ 2 + ((t725 * t771 - t878) * t732 - t782) * t728) * MDP(15) + ((-t551 - t782) * t732 + (-t903 + (t632 + t916) * qJD(4) + (t841 + (t846 + (t632 - t882) * t729) * qJD(1)) * t725) * t728) * MDP(16) + (-t871 * t884 + t864) * t937 - MDP(4) * t830 + t707 * MDP(8) - t733 * MDP(19) * t758 + MDP(6) * t752; MDP(11) * t752 + (t707 + t830) * MDP(12) + (-t709 ^ 2 - t723 * t915) * MDP(13) + (t615 * t709 - t753 - t947 + t955) * MDP(14) + (-t709 * t632 + t738) * MDP(20) + (-t728 * t750 - t709 * t634 + (-t805 * t853 - t956) * t732) * MDP(21) + (t576 * t624 + t578 * t623 + (t922 - t924) * t876 + (-t932 - t930 + (t921 + t925) * qJD(5)) * t728) * MDP(30) + (t494 * t623 - t495 * t624 + (qJD(4) * t803 - t486) * t732 + (t502 * t805 + t745) * t728 + t794) * MDP(32) + (MDP(27) + MDP(29)) * (-t549 * t910 - t515 * t732 + (-t727 * t876 - t728 * t872 - t623) * t628 + (t825 + t877) * t576) + (MDP(28) - MDP(31)) * ((t781 - t784) * t728 - (-t624 + t847) * t628 + t931); -t632 ^ 2 * MDP(16) + (t903 + (t632 - t916) * qJD(4) + (-t841 + (-t846 + (t632 + t882) * t729) * qJD(1)) * t725) * MDP(17) + (-t551 + t782) * MDP(18) + t750 * MDP(19) + (t526 * t805 + t764 - t828) * MDP(20) + (t525 * t805 + t587 * t632 - t763 + t770) * MDP(21) + (t578 * t835 - t932) * MDP(22) + ((-t514 - t926) * t731 + (-t515 - t923) * t727) * MDP(23) + (t628 * t835 + t929) * MDP(24) + (-t727 * t950 + t928) * MDP(25) + (-pkin(4) * t515 - t526 * t576 + (t525 * t628 + t775) * t727 + (-t493 + (-t569 - t938) * t628 + t764) * t731) * MDP(27) + (pkin(4) * t514 + t901 * t628 - t526 * t578 + t775 * t731 + (t493 - t749) * t727) * MDP(28) + (t504 * t628 - t515 * t795 + t893 * t576 + t727 * t954 + t747 * t731) * MDP(29) + (t503 * t576 - t504 * t578 + (t482 + t628 * t494 + (-t515 + t874) * pkin(10)) * t731 + (t483 - t934 + (qJD(5) * t576 - t514) * pkin(10)) * t727 + t763) * MDP(30) + (-t503 * t628 - t514 * t795 - t893 * t578 + t747 * t727 - t731 * t954) * MDP(31) + (-t494 * t504 - t495 * t503 + t893 * t502 + (t745 + t763) * pkin(10) + (-t486 + t764) * t795) * MDP(32) + (MDP(15) * t632 + t634 * MDP(16) - t587 * MDP(20) - t578 * MDP(24) + t576 * MDP(25) - t628 * MDP(26) - t500 * MDP(27) + t501 * MDP(28) + t494 * MDP(29) - t495 * MDP(31)) * t634; MDP(22) * t927 + (-t576 ^ 2 + t951) * MDP(23) + t499 * MDP(24) + (t923 - t515) * MDP(25) + t549 * MDP(26) + (-t518 * t578 + t748 + t933) * MDP(27) + (t500 * t628 + t518 * t576 - t743) * MDP(28) + (-t528 * t576 - t742 + t933 + 0.2e1 * t946) * MDP(29) + (pkin(5) * t514 - qJ(6) * t515 + (t495 - t501) * t578 + (t494 - t868) * t576) * MDP(30) + (0.2e1 * t935 - t502 * t576 + t528 * t578 + (0.2e1 * qJD(6) - t500) * t628 + t743) * MDP(31) + (t482 * qJ(6) - t483 * pkin(5) - t502 * t528 - t494 * t501 - g(1) * (-pkin(5) * t555 + qJ(6) * t556) - g(2) * (pkin(5) * t557 - qJ(6) * t558) - g(3) * t809 + t868 * t495) * MDP(32); (t927 - t549) * MDP(29) + t499 * MDP(30) + (-t950 - t951) * MDP(31) + (t742 - t934 - t946) * MDP(32);];
tau  = t1;
