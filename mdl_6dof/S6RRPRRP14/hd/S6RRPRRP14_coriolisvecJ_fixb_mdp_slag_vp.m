% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRPRRP14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP14_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRPRRP14_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP14_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP14_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP14_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRRP14_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:10:10
% EndTime: 2019-03-09 13:10:25
% DurationCPUTime: 10.37s
% Computational Cost: add. (8119->632), mult. (20392->814), div. (0->0), fcn. (14832->8), ass. (0->250)
t558 = cos(qJ(2));
t551 = sin(pkin(6));
t555 = sin(qJ(2));
t655 = qJD(1) * t555;
t634 = t551 * t655;
t552 = cos(pkin(6));
t656 = qJD(1) * t552;
t640 = pkin(1) * t656;
t660 = -pkin(8) * t634 + t558 * t640;
t643 = qJD(3) - t660;
t554 = sin(qJ(4));
t557 = cos(qJ(4));
t606 = pkin(4) * t557 + pkin(10) * t554;
t715 = (-pkin(3) - t606) * t634 - qJD(4) * t606 - t643;
t657 = qJD(1) * t551;
t633 = t558 * t657;
t540 = qJD(2) + t656;
t678 = t540 * t554;
t488 = t557 * t633 + t678;
t487 = qJD(5) + t488;
t556 = cos(qJ(5));
t712 = t715 * t556;
t641 = qJD(1) * qJD(2);
t623 = t551 * t641;
t609 = t555 * t623;
t639 = pkin(1) * qJD(2) * t552;
t614 = qJD(1) * t639;
t661 = -pkin(8) * t609 + t558 * t614;
t463 = -t540 * qJD(3) - t661;
t433 = -pkin(3) * t609 - t463;
t559 = -pkin(2) - pkin(9);
t598 = qJD(4) + t634;
t705 = qJD(4) * t598;
t711 = -t559 * t705 + t433;
t549 = t555 ^ 2;
t710 = MDP(5) * (-t558 ^ 2 + t549);
t709 = t558 * t559;
t490 = t540 * t557 - t554 * t633;
t553 = sin(qJ(5));
t437 = t556 * t490 + t553 * t598;
t581 = t598 * t437;
t676 = t551 * t555;
t542 = pkin(8) * t676;
t635 = -pkin(1) * t558 - pkin(2);
t456 = pkin(3) * t676 + t542 + (-pkin(9) + t635) * t552;
t695 = qJ(3) * t555;
t622 = -pkin(1) - t695;
t473 = (t622 + t709) * t551;
t663 = t554 * t456 + t557 * t473;
t410 = pkin(10) * t676 + t663;
t698 = pkin(1) * t555;
t545 = t552 * t698;
t675 = t551 * t558;
t707 = pkin(8) * t675 + t545;
t493 = -t552 * qJ(3) - t707;
t472 = pkin(3) * t675 - t493;
t502 = t552 * t554 + t557 * t675;
t503 = t552 * t557 - t554 * t675;
t417 = pkin(4) * t502 - pkin(10) * t503 + t472;
t708 = t556 * t410 + t553 * t417;
t514 = pkin(4) * t554 - pkin(10) * t557 + qJ(3);
t659 = t556 * t554 * t559 + t553 * t514;
t528 = t558 * t623;
t648 = qJD(4) * t558;
t626 = t557 * t648;
t653 = qJD(2) * t555;
t630 = t554 * t653;
t571 = -t626 + t630;
t568 = t571 * t551;
t650 = qJD(4) * t554;
t628 = t540 * t650;
t565 = -qJD(1) * t568 + t628;
t647 = qJD(5) * t437;
t398 = -t556 * t528 - t553 * t565 + t647;
t538 = pkin(2) * t634;
t599 = pkin(9) * t555 - qJ(3) * t558;
t476 = t599 * t657 + t538;
t498 = pkin(8) * t633 + t555 * t640;
t478 = pkin(3) * t633 + t498;
t662 = t557 * t476 + t554 * t478;
t413 = pkin(10) * t633 + t662;
t649 = qJD(4) * t557;
t627 = t556 * t649;
t645 = qJD(5) * t556;
t706 = t556 * t413 - t514 * t645 + t553 * t715 - t559 * t627;
t644 = pkin(3) * t634 + t643;
t428 = t540 * t559 + t644;
t452 = qJD(1) * t473;
t402 = t557 * t428 - t554 * t452;
t393 = -pkin(4) * t598 - t402;
t584 = t556 * t598;
t435 = t490 * t553 - t584;
t373 = t435 * pkin(5) - t437 * qJ(6) + t393;
t629 = t551 * t648;
t608 = qJD(1) * t629;
t442 = t540 * t649 - t554 * t608 - t557 * t609;
t696 = pkin(10) * t442;
t704 = t373 * t487 - t696;
t632 = t551 * t653;
t533 = pkin(2) * t632;
t651 = qJD(3) * t555;
t567 = (qJD(2) * t599 - t651) * t551;
t449 = t533 + t567;
t699 = pkin(3) + pkin(8);
t479 = (t675 * t699 + t545) * qJD(2);
t573 = t557 * t449 + t456 * t649 - t473 * t650 + t554 * t479;
t652 = qJD(2) * t558;
t631 = t551 * t652;
t382 = pkin(10) * t631 + t573;
t537 = t558 * t639;
t546 = t552 * qJD(3);
t455 = -t632 * t699 + t537 + t546;
t466 = -qJD(4) * t502 + t551 * t630;
t467 = t552 * t649 - t554 * t629 - t557 * t632;
t396 = pkin(4) * t467 - pkin(10) * t466 + t455;
t702 = -qJD(5) * t708 - t382 * t553 + t396 * t556;
t701 = t437 ^ 2;
t700 = t487 ^ 2;
t697 = pkin(5) * t442;
t694 = qJ(6) * t442;
t521 = pkin(2) * t609;
t432 = qJD(1) * t567 + t521;
t491 = pkin(8) * t528 + t555 * t614;
t457 = pkin(3) * t528 + t491;
t612 = -t428 * t650 - t554 * t432 - t452 * t649 + t557 * t457;
t375 = -pkin(4) * t528 - t612;
t646 = qJD(5) * t553;
t397 = -qJD(5) * t584 + t490 * t646 - t553 * t528 + t556 * t565;
t365 = pkin(5) * t398 + qJ(6) * t397 - qJD(6) * t437 + t375;
t693 = t365 * t553;
t692 = t365 * t556;
t403 = t554 * t428 + t557 * t452;
t394 = pkin(10) * t598 + t403;
t529 = t540 * qJ(3);
t447 = t529 + t478;
t404 = pkin(4) * t488 - pkin(10) * t490 + t447;
t370 = t394 * t556 + t404 * t553;
t368 = qJ(6) * t487 + t370;
t691 = t368 * t487;
t690 = t370 * t487;
t689 = t375 * t553;
t688 = t397 * t553;
t687 = t397 * t557;
t686 = t398 * t556;
t685 = t435 * t437;
t684 = t435 * t487;
t683 = t435 * t553;
t682 = t435 * t556;
t681 = t437 * t487;
t680 = t437 * t553;
t679 = t437 * t556;
t548 = t551 ^ 2;
t677 = t548 * qJD(1) ^ 2;
t674 = t553 * t442;
t673 = t553 * t559;
t672 = t555 * t556;
t671 = t556 * t442;
t600 = pkin(5) * t553 - qJ(6) * t556;
t670 = qJD(6) * t553 - t487 * t600 + t403;
t610 = t557 * t634;
t625 = t559 * t646;
t669 = -(qJD(6) - t625) * t554 + t706 + (-t610 - t649) * qJ(6);
t621 = -pkin(5) + t673;
t668 = pkin(5) * t610 - qJD(5) * t659 + t413 * t553 - t621 * t649 - t712;
t619 = -t554 * t476 + t478 * t557;
t412 = -pkin(4) * t633 - t619;
t611 = t554 * t634;
t484 = t553 * t611 - t556 * t633;
t485 = (t553 * t558 + t554 * t672) * t657;
t588 = -t559 + t600;
t601 = pkin(5) * t556 + qJ(6) * t553;
t667 = pkin(5) * t484 - qJ(6) * t485 + t412 - (qJD(5) * t601 - qJD(6) * t556) * t557 + t588 * t650;
t427 = pkin(4) * t490 + pkin(10) * t488;
t666 = t556 * t402 + t553 * t427;
t654 = qJD(2) * t554;
t369 = -t394 * t553 + t404 * t556;
t642 = qJD(6) - t369;
t638 = pkin(10) * t646;
t637 = t558 * t677;
t624 = t548 * t641;
t620 = t456 * t557 - t554 * t473;
t618 = t487 * t556;
t616 = t488 - t654;
t613 = t555 * t637;
t574 = -t428 * t649 - t557 * t432 + t452 * t650 - t554 * t457;
t374 = pkin(10) * t528 - t574;
t391 = pkin(10) * t628 + t442 * pkin(4) + (-pkin(3) * t653 - pkin(10) * t571) * t657 - t463;
t362 = -t553 * t374 + t556 * t391 - t394 * t645 - t404 * t646;
t607 = -0.2e1 * pkin(1) * t624;
t605 = t498 * t540 - t491;
t603 = t553 * t650 + t484;
t602 = t556 * t650 + t485;
t367 = -pkin(5) * t487 + t642;
t597 = t367 * t556 - t368 * t553;
t596 = t367 * t553 + t368 * t556;
t593 = -t410 * t553 + t417 * t556;
t499 = t707 * qJD(2);
t592 = t491 * t552 + t499 * t540;
t591 = -pkin(8) * t632 + t537;
t590 = -t554 * t449 - t456 * t650 - t473 * t649 + t479 * t557;
t589 = -t540 * t633 + t528;
t587 = -t503 * t553 + t551 * t672;
t469 = t503 * t556 + t553 * t676;
t586 = -t487 * t645 - t674;
t585 = -t487 * t646 + t671;
t583 = t557 * t598;
t582 = t490 * t598;
t580 = t598 * t551;
t576 = t393 * t487 - t696;
t575 = t373 * t437 - t362;
t361 = t556 * t374 + t553 * t391 - t394 * t646 + t404 * t645;
t572 = t556 * t382 + t553 * t396 - t410 * t646 + t417 * t645;
t409 = -pkin(4) * t676 - t620;
t494 = (-pkin(2) * t558 + t622) * t551;
t570 = qJD(1) * t580;
t569 = (-qJ(3) * t652 - t651) * t551;
t383 = -pkin(4) * t631 - t590;
t359 = qJD(6) * t487 + t361 + t694;
t360 = -t362 - t697;
t566 = qJD(5) * t597 + t359 * t556 + t360 * t553;
t564 = -t555 * t570 - t705;
t561 = t557 * t528 + t554 * t564;
t515 = -pkin(4) - t601;
t496 = -qJ(3) * t633 + t538;
t495 = t552 * t635 + t542;
t492 = t588 * t557;
t486 = -t546 - t591;
t483 = t540 * t553 - t556 * t610;
t482 = t540 * t556 + t553 * t610;
t481 = qJD(1) * t494;
t480 = t533 + t569;
t475 = -t514 * t556 + t554 * t621;
t474 = -t529 - t498;
t471 = qJ(6) * t554 + t659;
t470 = -pkin(2) * t540 + t643;
t460 = qJD(1) * t569 + t521;
t453 = t481 * t634;
t408 = qJD(5) * t587 + t466 * t556 + t553 * t631;
t407 = qJD(5) * t469 + t466 * t553 - t556 * t631;
t405 = pkin(5) * t437 + qJ(6) * t435;
t387 = -pkin(5) * t587 - qJ(6) * t469 + t409;
t380 = -t397 + t684;
t379 = -pkin(5) * t502 - t593;
t378 = qJ(6) * t502 + t708;
t377 = -pkin(5) * t490 + t402 * t553 - t427 * t556;
t376 = qJ(6) * t490 + t666;
t366 = pkin(5) * t407 - qJ(6) * t408 - qJD(6) * t469 + t383;
t364 = -pkin(5) * t467 - t702;
t363 = qJ(6) * t467 + qJD(6) * t502 + t572;
t1 = [(t590 * t598 + t612 * t676 + t455 * t488 + t472 * t442 + t433 * t502 + t447 * t467 + (qJD(1) * t620 + t402) * t631) * MDP(20) + (t455 * t490 + t472 * (-t557 * t608 - t628) + t433 * t503 + t447 * t466 - t573 * t598 + t574 * t676 + (-t403 * t558 + (t472 * t554 * t555 - t558 * t663) * qJD(1)) * t551 * qJD(2)) * MDP(21) + (-t540 * t591 - t552 * t661 + t558 * t607) * MDP(10) + (-t467 * qJD(4) + (-t488 * t652 - t442 * t555 + (-t467 * t555 - t502 * t652) * qJD(1)) * t551) * MDP(18) + (-t463 * t552 - t486 * t540 + (-t481 * t652 - t460 * t555 + (-t480 * t555 - t494 * t652) * qJD(1)) * t551) * MDP(13) + ((-t481 * t653 + t460 * t558 + (t480 * t558 - t494 * t653) * qJD(1)) * t551 + t592) * MDP(12) + (t555 * t607 - t592) * MDP(9) + 0.2e1 * (t555 * t558 * MDP(4) - t710) * t624 + (MDP(6) * t631 - MDP(7) * t632) * (t540 + t656) + (-t397 * t587 - t398 * t469 - t407 * t437 - t408 * t435) * MDP(23) + (t359 * t587 + t360 * t469 - t363 * t435 + t364 * t437 + t367 * t408 - t368 * t407 - t378 * t398 - t379 * t397) * MDP(30) + (-t398 * t502 - t407 * t487 - t435 * t467 + t442 * t587) * MDP(25) + (-t360 * t502 - t364 * t487 - t365 * t587 + t366 * t435 - t367 * t467 + t373 * t407 - t379 * t442 + t387 * t398) * MDP(29) + (t362 * t502 + t369 * t467 - t375 * t587 + t383 * t435 + t393 * t407 + t409 * t398 + t593 * t442 + t487 * t702) * MDP(27) + (-t361 * t502 - t370 * t467 + t375 * t469 + t383 * t437 + t393 * t408 - t409 * t397 - t442 * t708 - t487 * t572) * MDP(28) + (t490 * t466 - t503 * t565) * MDP(15) + (-t503 * t442 - t466 * t488 - t490 * t467 + t502 * t565) * MDP(16) + (t466 * qJD(4) + ((qJD(1) * t503 + t490) * t652 + (-t628 + (t466 + t568) * qJD(1)) * t555) * t551) * MDP(17) + (t548 * t655 + t580) * MDP(19) * t652 + (-t463 * t558 + t491 * t555 + (t470 * t558 + t474 * t555) * qJD(2) + (-t486 * t558 + t499 * t555 + (t493 * t555 + t495 * t558) * qJD(2)) * qJD(1)) * t551 * MDP(11) + (t359 * t378 + t360 * t379 + t363 * t368 + t364 * t367 + t365 * t387 + t366 * t373) * MDP(32) + (-t397 * t469 + t408 * t437) * MDP(22) + (t460 * t494 + t463 * t493 + t470 * t499 + t474 * t486 + t480 * t481 + t491 * t495) * MDP(14) + (t442 * t502 + t467 * t487) * MDP(26) + (-t397 * t502 + t408 * t487 + t437 * t467 + t442 * t469) * MDP(24) + (t359 * t502 + t363 * t487 - t365 * t469 - t366 * t437 + t368 * t467 - t373 * t408 + t378 * t442 + t387 * t397) * MDP(31); (t677 * t698 + t605) * MDP(9) + t677 * t710 + (-t367 * t485 + t368 * t484 - t397 * t475 - t398 * t471 - t668 * t437 + t669 * t435 - t597 * t650 + (-qJD(5) * t596 - t359 * t553 + t360 * t556) * t557) * MDP(30) + (t359 * t471 + t360 * t475 + t365 * t492 - t367 * t668 - t368 * t669 - t373 * t667) * MDP(32) + (t643 * t540 + (t481 * t558 + t496 * t555) * t657 - t463) * MDP(13) - MDP(4) * t613 + (pkin(1) * t637 + t540 * t660 - t661) * MDP(10) + (-pkin(2) * t491 - qJ(3) * t463 - t470 * t498 - t474 * t643 - t481 * t496) * MDP(14) + (-t397 * t554 - t602 * t487 + (t581 + t585) * t557) * MDP(24) + (-t398 * t554 + t603 * t487 + (-t435 * t598 + t586) * t557) * MDP(25) + (t359 * t554 + t397 * t492 + t442 * t471 - t669 * t487 + t667 * t437 + t602 * t373 + (t368 * t598 + t373 * t646 - t692) * t557) * MDP(31) + (-t360 * t554 + t398 * t492 - t442 * t475 + t668 * t487 - t667 * t435 - t603 * t373 + (-t367 * t598 + t373 * t645 + t693) * t557) * MDP(29) + (-t556 * t687 + (-t557 * t646 - t602) * t437) * MDP(22) + (t435 * t485 + t437 * t484 + (t680 + t682) * t650 + (t688 - t686 + (-t679 + t683) * qJD(5)) * t557) * MDP(23) + (-t490 * t633 + t561) * MDP(17) + (-t496 * t633 + t453 - t605) * MDP(12) + (t557 * t564 + t616 * t633) * MDP(18) + (t662 * t598 + t403 * t633 + t644 * t490 + (-qJ(3) * t608 + t711) * t557 + ((-t447 - t529) * qJD(4) + (-t447 * t555 + (t695 - t709) * qJD(2)) * t657) * t554) * MDP(21) + (qJ(3) * t442 - t619 * t598 + (qJD(2) * t557 * t559 - t402) * t633 + t711 * t554 + t644 * t488 + t447 * t583) * MDP(20) + ((-t442 - t582) * t557 + ((t488 + t678) * qJD(4) + (t555 * t616 + t626) * t657) * t554) * MDP(16) + (-t557 ^ 2 * t608 + ((-qJD(4) * t540 + t609) * t557 - t582) * t554) * MDP(15) + t589 * MDP(6) + (t442 * t554 + t487 * t583) * MDP(26) - t558 * MDP(19) * t570 + (-t659 * t442 - t412 * t437 - t393 * t485 + t706 * t487 + (t487 * t625 - t361 + (-t393 * t556 + t437 * t559) * qJD(4)) * t554 + (-t370 * t598 + t375 * t556 - t393 * t646 + t559 * t397) * t557) * MDP(28) + (-qJD(2) + t540) * MDP(7) * t634 + ((-qJ(3) * qJD(2) - t474 - t498) * t555 + (-pkin(2) * qJD(2) - t470 + t643) * t558) * MDP(11) * t657 + (t514 * t671 - t393 * t484 - t412 * t435 + (-t712 + (-qJD(5) * t514 + t413) * t553) * t487 + (-t393 * t553 * qJD(4) + t362 + (qJD(4) * t435 + t586) * t559) * t554 + (t369 * t634 + t393 * t645 + t689 - t559 * t398 + (-t487 * t673 + t369) * qJD(4)) * t557) * MDP(27); t589 * MDP(11) + MDP(12) * t613 + (-t540 ^ 2 - t549 * t677) * MDP(13) + (t474 * t540 + t453 + t491) * MDP(14) + (-t540 * t488 + t561) * MDP(20) + (-t554 * t528 - t540 * t490 + (-t598 * t634 - t705) * t557) * MDP(21) + (t435 * t483 + t437 * t482 + (t680 - t682) * t649 + (-t688 - t686 + (t679 + t683) * qJD(5)) * t554) * MDP(30) + (t367 * t482 - t368 * t483 + (qJD(4) * t596 - t365) * t557 + (t373 * t598 + t566) * t554) * MDP(32) + (MDP(27) + MDP(29)) * (-t554 * t674 - t398 * t557 + (-t553 * t649 - t554 * t645 - t482) * t487 + (t611 + t650) * t435) + (MDP(28) - MDP(31)) * ((t581 - t585) * t554 - (-t483 + t627) * t487 + t687); -t488 ^ 2 * MDP(16) + ((t488 - t678) * qJD(4) + (-t626 + (t488 + t654) * t555) * t657) * MDP(17) - t442 * MDP(18) + MDP(19) * t528 + (t403 * t598 + t612) * MDP(20) + (t402 * t598 + t447 * t488 + t574) * MDP(21) + (t437 * t618 - t688) * MDP(22) + ((-t397 - t684) * t556 + (-t398 - t681) * t553) * MDP(23) + (t487 * t618 + t674) * MDP(24) + (-t553 * t700 + t671) * MDP(25) + (-pkin(4) * t398 - t403 * t435 + (-t375 + (-pkin(10) * qJD(5) - t427) * t487) * t556 + (t402 * t487 + t576) * t553) * MDP(27) + (pkin(4) * t397 + t689 - t403 * t437 + (t638 + t666) * t487 + t576 * t556) * MDP(28) + (-t692 + t398 * t515 + (-pkin(10) * t645 + t377) * t487 - t670 * t435 + t704 * t553) * MDP(29) + (t376 * t435 - t377 * t437 + (t359 + t487 * t367 + (-t398 + t647) * pkin(10)) * t556 + (t360 - t691 + (qJD(5) * t435 - t397) * pkin(10)) * t553) * MDP(30) + (-t693 + t397 * t515 + (-t376 - t638) * t487 + t670 * t437 - t704 * t556) * MDP(31) + (pkin(10) * t566 + t365 * t515 - t367 * t377 - t368 * t376 - t373 * t670) * MDP(32) + (MDP(15) * t488 + MDP(16) * t490 + MDP(18) * t598 - t447 * MDP(20) - t437 * MDP(24) + t435 * MDP(25) - t487 * MDP(26) - t369 * MDP(27) + t370 * MDP(28) + t367 * MDP(29) - t368 * MDP(31)) * t490; MDP(22) * t685 + (-t435 ^ 2 + t701) * MDP(23) + t380 * MDP(24) + (t681 - t398) * MDP(25) + t442 * MDP(26) + (-t393 * t437 + t362 + t690) * MDP(27) + (t369 * t487 + t393 * t435 - t361) * MDP(28) + (-t405 * t435 - t575 + t690 + 0.2e1 * t697) * MDP(29) + (pkin(5) * t397 - qJ(6) * t398 + (t368 - t370) * t437 + (t367 - t642) * t435) * MDP(30) + (0.2e1 * t694 - t373 * t435 + t405 * t437 + (0.2e1 * qJD(6) - t369) * t487 + t361) * MDP(31) + (-pkin(5) * t360 + qJ(6) * t359 - t367 * t370 + t368 * t642 - t373 * t405) * MDP(32); (-t442 + t685) * MDP(29) + t380 * MDP(30) + (-t700 - t701) * MDP(31) + (t575 - t691 - t697) * MDP(32);];
tauc  = t1;
