% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP14_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP14_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP14_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP14_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP14_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP14_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:25:11
% EndTime: 2019-05-06 19:26:20
% DurationCPUTime: 53.31s
% Computational Cost: add. (130213->830), mult. (292729->1201), div. (0->0), fcn. (216585->10), ass. (0->626)
t1052 = sin(qJ(1));
t1056 = cos(qJ(1));
t1047 = sin(pkin(6));
t1048 = cos(pkin(6));
t1051 = sin(qJ(2));
t1055 = cos(qJ(2));
t1050 = sin(qJ(4));
t1054 = cos(qJ(4));
t1053 = cos(qJ(5));
t1049 = sin(qJ(5));
t1171 = t1047 * t1051;
t1156 = qJD(1) * t1171;
t1136 = qJD(4) + t1156;
t1039 = t1048 * qJD(1) + qJD(2);
t1170 = t1047 * t1055;
t1155 = qJD(1) * t1170;
t996 = t1039 * t1054 - t1050 * t1155;
t968 = t1049 * t996 - t1053 * t1136;
t970 = t1049 * t1136 + t1053 * t996;
t917 = t970 * t968;
t1032 = qJD(2) * t1156;
t1166 = qJDD(1) * t1055;
t1008 = t1047 * t1166 - t1032;
t1038 = qJDD(1) * t1048 + qJDD(2);
t1149 = t1054 * t1008 + t1050 * t1038;
t940 = -t996 * qJD(4) - t1149;
t939 = qJDD(5) - t940;
t1263 = t917 + t939;
t1207 = t1049 * t1263;
t994 = t1039 * t1050 + t1054 * t1155;
t990 = qJD(5) + t994;
t1239 = t990 ^ 2;
t1240 = t968 ^ 2;
t929 = t1240 - t1239;
t789 = t1053 * t929 - t1207;
t1007 = (qJD(1) * qJD(2) * t1055 + qJDD(1) * t1051) * t1047;
t1066 = qJDD(4) + t1007;
t941 = -t994 * qJD(4) - t1050 * t1008 + t1054 * t1038;
t1151 = t1049 * t941 - t1053 * t1066;
t807 = (qJD(5) - t990) * t970 + t1151;
t716 = t1050 * t789 + t1054 * t807;
t1194 = t1053 * t1263;
t785 = t1049 * t929 + t1194;
t1121 = -t1051 * t785 + t1055 * t716;
t721 = -t1050 * t807 + t1054 * t789;
t633 = t1047 * t721 + t1048 * t1121;
t668 = t1051 * t716 + t1055 * t785;
t1406 = t1052 * t633 + t1056 * t668;
t1062 = -t1049 * t1066 - t1053 * t941;
t1060 = -t968 * qJD(5) - t1062;
t1225 = t968 * t990;
t1251 = -t1225 + t1060;
t1209 = t1049 * t1251;
t1183 = qJD(5) + t990;
t806 = t1183 * t970 + t1151;
t726 = t1053 * t806 + t1209;
t967 = t970 ^ 2;
t914 = t967 - t1240;
t694 = t1050 * t726 + t1054 * t914;
t724 = -t1049 * t806 + t1053 * t1251;
t1128 = t1051 * t724 + t1055 * t694;
t695 = -t1050 * t914 + t1054 * t726;
t615 = t1047 * t695 + t1048 * t1128;
t643 = t1051 * t694 - t1055 * t724;
t1405 = t1052 * t615 + t1056 * t643;
t1404 = -t1052 * t668 + t1056 * t633;
t1403 = -t1052 * t643 + t1056 * t615;
t1398 = t1047 * t1121 - t1048 * t721;
t1397 = t1047 * t1128 - t1048 * t695;
t1252 = -t1225 - t1060;
t1310 = -t1049 * t807 + t1053 * t1252;
t1260 = t967 + t1240;
t1307 = -t1049 * t1252 - t1053 * t807;
t1340 = t1050 * t1307 + t1054 * t1260;
t1352 = t1051 * t1340 + t1055 * t1310;
t1336 = -t1050 * t1260 + t1054 * t1307;
t1350 = t1051 * t1310 - t1055 * t1340;
t1376 = -t1047 * t1336 + t1048 * t1350;
t1385 = t1052 * t1352 + t1056 * t1376;
t1396 = pkin(7) * t1385;
t1387 = -t1052 * t1376 + t1056 * t1352;
t1395 = pkin(7) * t1387;
t1394 = pkin(1) * t1376;
t1378 = t1047 * t1350 + t1048 * t1336;
t1393 = pkin(1) * t1378;
t1264 = -t917 + t939;
t1206 = t1049 * t1264;
t930 = -t967 + t1239;
t1285 = t1053 * t930 + t1206;
t1193 = t1053 * t1264;
t1311 = -t1049 * t930 + t1193;
t1339 = -t1050 * t1311 - t1054 * t1252;
t1353 = -t1051 * t1339 + t1055 * t1285;
t1335 = -t1050 * t1252 + t1054 * t1311;
t1351 = t1051 * t1285 + t1055 * t1339;
t1375 = -t1047 * t1335 + t1048 * t1351;
t1388 = -t1052 * t1375 + t1056 * t1353;
t1386 = t1052 * t1353 + t1056 * t1375;
t1384 = (-t1047 * t1378 - t1048 * t1376) * pkin(8);
t1383 = pkin(8) * t1352;
t1377 = t1047 * t1351 + t1048 * t1335;
t904 = -t967 - t1239;
t771 = t1053 * t904 - t1207;
t1374 = pkin(3) * t771;
t1373 = pkin(4) * t771;
t1057 = qJD(1) ^ 2;
t1167 = t1055 * t1057;
t1045 = t1047 ^ 2;
t1173 = t1045 * t1051;
t1145 = t1167 * t1173;
t1006 = t1038 - t1145;
t1177 = t1006 * t1051;
t1035 = t1039 ^ 2;
t1172 = t1045 * t1057;
t1238 = t1051 ^ 2;
t1036 = t1238 * t1172;
t989 = -t1036 - t1035;
t1104 = -t1055 * t989 + t1177;
t1017 = t1039 * t1155;
t1253 = t1017 + t1007;
t895 = t1047 * t1253 + t1048 * t1104;
t1176 = t1006 * t1055;
t949 = t1051 * t989 + t1176;
t833 = t1052 * t949 + t1056 * t895;
t1372 = pkin(7) * t833;
t836 = t1052 * t895 - t1056 * t949;
t1371 = pkin(7) * t836;
t1046 = t1055 ^ 2;
t1037 = t1046 * t1172;
t1012 = -t1037 - t1035;
t1005 = t1038 + t1145;
t1178 = t1005 * t1055;
t1100 = t1012 * t1051 + t1178;
t1181 = qJD(1) * t1051;
t1157 = t1039 * t1181;
t975 = -t1032 + (-t1157 + t1166) * t1047;
t911 = t1047 * t975 + t1048 * t1100;
t1179 = t1005 * t1051;
t963 = -t1012 * t1055 + t1179;
t847 = -t1052 * t963 + t1056 * t911;
t1370 = pkin(7) * t847;
t850 = t1052 * t911 + t1056 * t963;
t1369 = pkin(7) * t850;
t767 = t1049 * t904 + t1194;
t1368 = pkin(10) * t767;
t1367 = pkin(10) * t771;
t1366 = qJ(3) * t771;
t1365 = t1050 * t767;
t1364 = t1051 * t771;
t1362 = t1054 * t767;
t1361 = t1055 * t771;
t1236 = -pkin(2) - pkin(9);
t1355 = t1236 * t1336;
t1354 = t1236 * t1340;
t1349 = pkin(3) * t1340 + pkin(4) * t1260 + pkin(10) * t1307 - qJ(3) * t1336;
t905 = t1047 * t1100 - t1048 * t975;
t1348 = pkin(8) * (t1047 * t905 + t1048 * t911);
t1214 = t1048 * t1253;
t893 = t1047 * t1104 - t1214;
t1347 = pkin(8) * (t1047 * t893 + t1048 * t895);
t1346 = pkin(10) * t1310;
t1088 = (-t1049 * t968 - t1053 * t970) * t990;
t1192 = t1053 * t990;
t1163 = t968 * t1192;
t1204 = t1049 * t990;
t927 = t970 * t1204;
t1142 = t927 - t1163;
t1245 = -t1050 * t1142 + t1054 * t939;
t1272 = -t1051 * t1245 + t1055 * t1088;
t1243 = t1050 * t939 + t1054 * t1142;
t1269 = t1051 * t1088 + t1055 * t1245;
t1301 = -t1047 * t1243 + t1048 * t1269;
t1338 = -t1052 * t1301 + t1056 * t1272;
t861 = -qJD(5) * t970 - t1151;
t1144 = t1053 * t861 + t1204 * t968;
t1097 = -t1049 * t861 + t1163;
t1162 = t1054 * t917;
t1246 = -t1050 * t1097 - t1162;
t1271 = -t1051 * t1246 + t1055 * t1144;
t1165 = t1050 * t917;
t1244 = t1054 * t1097 - t1165;
t1268 = t1051 * t1144 + t1055 * t1246;
t1302 = -t1047 * t1244 + t1048 * t1268;
t1337 = -t1052 * t1302 + t1056 * t1271;
t1334 = t1052 * t1272 + t1056 * t1301;
t1333 = t1052 * t1271 + t1056 * t1302;
t1332 = pkin(1) * t893;
t1331 = pkin(1) * t895;
t1330 = pkin(1) * t905;
t1329 = pkin(1) * t911;
t1250 = -t1239 - t1240;
t1273 = t1049 * t1250 + t1193;
t1328 = pkin(3) * t1273;
t1327 = pkin(4) * t1273;
t1270 = t1053 * t1250 - t1206;
t1326 = pkin(10) * t1270;
t1325 = pkin(10) * t1273;
t1324 = qJ(3) * t1273;
t1321 = t1050 * t1270;
t1320 = t1051 * t1273;
t1316 = t1054 * t1270;
t1315 = t1055 * t1273;
t1011 = t1037 - t1035;
t1099 = t1011 * t1051 + t1176;
t979 = -t1032 + (t1157 + t1166) * t1047;
t909 = -t1047 * t979 + t1048 * t1099;
t961 = -t1011 * t1055 + t1177;
t1309 = t1052 * t909 + t1056 * t961;
t1010 = -t1036 + t1035;
t1101 = t1010 * t1055 + t1179;
t978 = -t1017 + t1007;
t907 = -t1047 * t978 + t1048 * t1101;
t958 = -t1010 * t1051 + t1178;
t1308 = t1052 * t907 - t1056 * t958;
t1306 = -t1052 * t961 + t1056 * t909;
t1305 = t1052 * t958 + t1056 * t907;
t1304 = t1047 * t1268 + t1048 * t1244;
t1303 = t1047 * t1269 + t1048 * t1243;
t1298 = 2 * qJD(6);
t1297 = pkin(8) * t949;
t1296 = pkin(8) * t963;
t1294 = qJ(6) * t1251;
t1092 = t1136 * t994;
t1262 = -t941 + t1092;
t956 = t996 * t994;
t1261 = -t956 + t1066;
t1278 = t1050 * t1261;
t1275 = t1054 * t1261;
t1089 = t1054 * t1136;
t1072 = t996 * t1089;
t1090 = t1050 * t1136;
t1075 = t994 * t1090;
t922 = t1075 + t1072;
t1274 = t1051 * t1066 + t1055 * t922;
t805 = t1053 * t1060 - t927;
t1096 = -t1050 * t805 + t1162;
t1143 = t1054 * t805 + t1165;
t1168 = t1048 * t1055;
t1169 = t1048 * t1051;
t804 = t1049 * t1060 + t1192 * t970;
t1242 = -t1047 * t1143 + t1096 * t1168 + t804 * t1169;
t1249 = -t1051 * t1096 + t1055 * t804;
t1267 = t1052 * t1249 + t1056 * t1242;
t1266 = -t1052 * t1242 + t1056 * t1249;
t1103 = t1136 ^ 2;
t1265 = qJ(3) * t1253;
t1233 = pkin(2) * t1055;
t1137 = -qJ(3) * t1051 - t1233;
t1182 = qJD(1) * t1047;
t1003 = t1137 * t1182;
t1180 = t1003 * t1051;
t1229 = g(3) * t1055;
t1259 = (qJD(1) * t1180 + t1229) * t1047;
t1030 = g(1) * t1052 - t1056 * g(2);
t1231 = pkin(8) * t1047;
t1001 = qJDD(1) * pkin(1) + t1057 * t1231 + t1030;
t1031 = g(1) * t1056 + g(2) * t1052;
t1002 = -pkin(1) * t1057 + qJDD(1) * t1231 - t1031;
t1150 = -t1001 * t1168 + t1051 * t1002;
t1135 = qJDD(3) + t1150;
t1227 = t1038 * pkin(2);
t1067 = t1035 * qJ(3) - t1135 + t1227;
t1174 = t1039 * t1055;
t1059 = pkin(3) * t1007 - t1005 * pkin(9) + (t1229 + (-pkin(3) * t1174 + t1180) * qJD(1)) * t1047 - t1067;
t1004 = pkin(3) * t1156 - pkin(9) * t1039;
t1028 = -0.2e1 * qJD(3) * t1156;
t1146 = t1039 * t1156;
t1015 = pkin(2) * t1146;
t1226 = t1048 * g(3);
t1152 = -t1015 + t1226;
t827 = -pkin(3) * t1037 - t1007 * qJ(3) + t1028 + t1236 * t1008 + (-t1001 + (-qJ(3) * t1174 - t1004 * t1051) * qJD(1)) * t1047 - t1152;
t745 = t1050 * t1059 + t1054 * t827;
t953 = pkin(4) * t994 - pkin(10) * t996;
t709 = -pkin(4) * t1103 + pkin(10) * t1066 - t994 * t953 + t745;
t1237 = 0.2e1 * qJD(3);
t948 = -g(3) * t1171 + t1001 * t1169 + t1055 * t1002;
t870 = -t1035 * pkin(2) + t1038 * qJ(3) + t1003 * t1155 + t1039 * t1237 + t948;
t826 = t1008 * pkin(3) - pkin(9) * t1037 + t1039 * t1004 + t870;
t737 = t1262 * pkin(10) + (t1136 * t996 - t940) * pkin(4) + t826;
t649 = t1049 * t737 + t1053 * t709;
t913 = pkin(5) * t968 - qJ(6) * t970;
t1140 = t939 * qJ(6) + t1298 * t990 - t968 * t913 + t649;
t1248 = t1047 * t1099 + t1048 * t979;
t1247 = t1047 * t1101 + t1048 * t978;
t1241 = t1048 * t1143 + t1096 * t1170 + t804 * t1171;
t992 = t994 ^ 2;
t993 = t996 ^ 2;
t1014 = -t1036 - t1037;
t1105 = t1051 * t979 - t1055 * t978;
t887 = -t1047 * t1014 + t1048 * t1105;
t921 = t1051 * t978 + t1055 * t979;
t821 = t1052 * t921 + t1056 * t887;
t1235 = pkin(7) * t821;
t1234 = pkin(2) * t1051;
t1232 = pkin(5) * t1053;
t1230 = pkin(8) * t1048;
t1228 = t1008 * pkin(2);
t1224 = t990 * t970;
t648 = t1049 * t709 - t1053 * t737;
t1223 = t1260 - t1239;
t1222 = pkin(1) * t887 + t921 * t1231;
t1221 = qJ(6) * t1053;
t744 = t1050 * t827 - t1054 * t1059;
t708 = -t1066 * pkin(4) - t1103 * pkin(10) + t953 * t996 + t744;
t1211 = t1049 * t708;
t1202 = t1050 * t826;
t933 = t956 + t1066;
t1201 = t1050 * t933;
t1199 = t1051 * t975;
t981 = t1047 * t1001 + t1226;
t1198 = t1051 * t981;
t1197 = t1053 * t708;
t1190 = t1054 * t826;
t1189 = t1054 * t933;
t1186 = t1055 * t975;
t1185 = t1055 * t981;
t1175 = t1038 * t1047;
t1164 = t1051 * t956;
t1161 = t1055 * t956;
t1160 = pkin(4) * t1054 + pkin(3);
t885 = t1048 * t1014 + t1047 * t1105;
t1159 = -pkin(1) * t885 + t921 * t1230;
t1158 = t1039 * t1182;
t1154 = pkin(4) * t1050 + qJ(3);
t1153 = -qJ(6) * t1049 - pkin(4);
t601 = t1049 * t648 + t1053 * t649;
t985 = -t1030 * t1052 - t1056 * t1031;
t1147 = t970 * t913 + qJDD(6) + t648;
t1024 = qJDD(1) * t1056 - t1052 * t1057;
t1141 = -pkin(7) * t1024 - g(3) * t1052;
t1139 = -t1198 - t1297;
t1138 = t1185 - t1296;
t600 = t1049 * t649 - t1053 * t648;
t663 = t1050 * t745 - t1054 * t744;
t664 = t1050 * t744 + t1054 * t745;
t637 = -pkin(5) * t1239 + t1140;
t1093 = -t939 * pkin(5) + t1147;
t639 = qJ(6) * t1239 - t1093;
t584 = -t1049 * t639 + t1053 * t637;
t1065 = -t861 * pkin(5) - t1294 + t708;
t645 = (pkin(5) * t990 - (2 * qJD(6))) * t970 + t1065;
t565 = t1050 * t584 - t1054 * t645;
t583 = t1049 * t637 + t1053 * t639;
t1134 = t1051 * t583 - t1055 * t565;
t585 = t1050 * t601 - t1054 * t708;
t1133 = t1051 * t600 - t1055 * t585;
t1132 = t1051 * t826 - t1055 * t663;
t701 = t1054 * t1251 + t1365;
t1127 = -t1055 * t701 - t1364;
t702 = -t1054 * t806 + t1321;
t1126 = -t1055 * t702 + t1320;
t814 = t1183 * t968 + t1062;
t710 = t1054 * t814 - t1365;
t1125 = -t1055 * t710 + t1364;
t808 = -t861 + t1224;
t711 = -t1054 * t808 + t1321;
t1124 = -t1055 * t711 + t1320;
t897 = (0.2e1 * qJD(4) + t1156) * t996 + t1149;
t815 = t1050 * t897 + t1054 * t1262;
t955 = -t992 + t993;
t1115 = t1051 * t955 + t1055 * t815;
t1069 = t1156 * t996 - t1149;
t901 = -t1092 - t941;
t816 = t1050 * t1069 + t1054 * t901;
t926 = -t992 - t993;
t1114 = t1051 * t926 - t1055 * t816;
t946 = -t1103 - t992;
t857 = t1050 * t946 + t1275;
t1113 = t1051 * t897 - t1055 * t857;
t860 = -pkin(2) * t1014 + t870;
t1063 = t1135 + t1259;
t866 = -t1227 + (-t1014 - t1035) * qJ(3) + t1063;
t1112 = t1051 * t866 + t1055 * t860;
t957 = -t993 - t1103;
t868 = t1054 * t957 - t1201;
t1111 = -t1051 * t1262 - t1055 * t868;
t879 = t1067 - t1259;
t1110 = t1051 * t870 + t1055 * t879;
t974 = -t993 + t1103;
t872 = -t1054 * t974 - t1278;
t1109 = -t1051 * t901 + t1055 * t872;
t973 = t992 - t1103;
t873 = -t1050 * t973 - t1189;
t1108 = t1051 * t1069 + t1055 * t873;
t947 = g(3) * t1170 + t1150;
t1107 = t1051 * t948 - t1055 * t947;
t867 = t1051 * t947 + t1055 * t948;
t1106 = t1055 * t1253 + t1199;
t1102 = qJD(1) * t1039 - t1048 * t1057;
t984 = t1030 * t1056 - t1031 * t1052;
t889 = -t1054 * t940 - t1075;
t1095 = t1055 * t889 - t1164;
t891 = -t1050 * t941 - t1072;
t1094 = t1055 * t891 + t1164;
t1091 = (-t1047 * t885 - t1048 * t887) * pkin(8);
t555 = -pkin(4) * t583 - pkin(5) * t639 - qJ(6) * t637;
t561 = -pkin(10) * t583 + (pkin(5) * t1049 - t1221) * t645;
t566 = t1050 * t645 + t1054 * t584;
t524 = pkin(3) * t583 - t1050 * t561 - t1054 * t555 + t1236 * t566;
t531 = pkin(3) * t565 + pkin(10) * t584 - qJ(3) * t566 + (t1153 - t1232) * t645;
t550 = t1051 * t565 + t1055 * t583;
t1087 = pkin(8) * t550 + t1051 * t531 + t1055 * t524;
t586 = t1050 * t708 + t1054 * t601;
t540 = t1236 * t586 + (pkin(10) * t1050 + t1160) * t600;
t546 = pkin(3) * t585 - pkin(4) * t708 + pkin(10) * t601 - qJ(3) * t586;
t562 = t1051 * t585 + t1055 * t600;
t1086 = pkin(8) * t562 + t1051 * t546 + t1055 * t540;
t621 = pkin(5) * t1223 + t1140;
t622 = qJ(6) * t1223 + t1093;
t571 = -t1049 * t621 + t1053 * t622 - t1346;
t654 = -pkin(4) * t1310 - pkin(5) * t1252 + qJ(6) * t807;
t552 = pkin(3) * t1310 - t1050 * t571 - t1054 * t654 + t1355;
t558 = t1049 * t622 + t1053 * t621 + t1349;
t1085 = t1051 * t558 + t1055 * t552 + t1383;
t602 = t1373 - qJ(6) * t1263 + (t904 + t1239) * pkin(5) - t1140;
t1064 = t1298 * t970 - t1065;
t629 = -pkin(5) * t1224 + t1064 + t1294;
t607 = -pkin(5) * t1209 + t1053 * t629 + t1367;
t703 = -t1050 * t1251 + t1362;
t554 = -t1050 * t607 - t1054 * t602 + t1236 * t703 - t1374;
t572 = pkin(3) * t701 + t1368 - qJ(3) * t703 + t1049 * t629 + (pkin(4) + t1232) * t1251;
t657 = t1051 * t701 - t1361;
t1084 = pkin(8) * t657 + t1051 * t572 + t1055 * t554;
t630 = (-t808 - t1224) * pkin(5) + t1064;
t608 = -t1049 * t630 - t1221 * t808 - t1325;
t609 = -t1327 + (-t1250 - t1239) * qJ(6) + (-t1264 - t939) * pkin(5) + t1147;
t713 = t1050 * t808 + t1316;
t557 = -t1050 * t608 - t1054 * t609 + t1236 * t713 + t1328;
t573 = pkin(3) * t711 - qJ(3) * t713 + t1053 * t630 + t1153 * t808 + t1326;
t661 = t1051 * t711 + t1315;
t1083 = pkin(8) * t661 + t1051 * t573 + t1055 * t557;
t587 = -t600 - t1346;
t560 = -t1050 * t587 + t1160 * t1310 + t1355;
t564 = t1349 + t601;
t1082 = t1051 * t564 + t1055 * t560 + t1383;
t635 = t648 - t1327;
t659 = t1211 - t1325;
t704 = t1050 * t806 + t1316;
t568 = -t1050 * t659 - t1054 * t635 + t1236 * t704 + t1328;
t597 = pkin(3) * t702 - pkin(4) * t806 - qJ(3) * t704 - t1197 + t1326;
t658 = t1051 * t702 + t1315;
t1081 = pkin(8) * t658 + t1051 * t597 + t1055 * t568;
t636 = t649 - t1373;
t662 = t1197 - t1367;
t712 = -t1050 * t814 - t1362;
t570 = -t1050 * t662 - t1054 * t636 + t1236 * t712 + t1374;
t599 = pkin(3) * t710 + pkin(4) * t814 - qJ(3) * t712 + t1211 - t1368;
t660 = t1051 * t710 + t1361;
t1080 = pkin(8) * t660 + t1051 * t599 + t1055 * t570;
t606 = pkin(3) * t826 + t1236 * t664;
t616 = pkin(3) * t663 - qJ(3) * t664;
t646 = t1051 * t663 + t1055 * t826;
t1079 = pkin(8) * t646 + t1051 * t616 + t1055 * t606;
t818 = -t1050 * t901 + t1054 * t1069;
t628 = pkin(3) * t926 + t1236 * t818 - t664;
t731 = pkin(3) * t816 - qJ(3) * t818;
t762 = t1051 * t816 + t1055 * t926;
t1078 = pkin(8) * t762 + t1051 * t731 + t1055 * t628;
t858 = t1054 * t946 - t1278;
t671 = pkin(3) * t857 - qJ(3) * t858 - t744;
t680 = pkin(3) * t897 + t1236 * t858 + t1190;
t777 = t1051 * t857 + t1055 * t897;
t1077 = pkin(8) * t777 + t1051 * t671 + t1055 * t680;
t869 = -t1050 * t957 - t1189;
t672 = pkin(3) * t868 - qJ(3) * t869 - t745;
t688 = -pkin(3) * t1262 + t1236 * t869 - t1202;
t780 = t1051 * t868 - t1055 * t1262;
t1076 = pkin(8) * t780 + t1051 * t672 + t1055 * t688;
t1074 = t996 * t1090;
t1073 = t994 * t1089;
t839 = t1228 + (t1181 * t1237 + t1001) * t1047 + 0.2e1 * t1265 + t1152;
t1071 = t1051 * t839 + t1233 * t1253 + t1297;
t1061 = t1015 + t1028 - t981 - t1265;
t840 = (-t1008 - t975) * pkin(2) + t1061;
t1070 = -qJ(3) * t1199 + t1055 * t840 + t1296;
t778 = -t1051 * t879 + t1055 * t870;
t871 = t1061 - t1228;
t1068 = pkin(8) * t778 + t1137 * t871;
t1044 = t1047 * t1045;
t1023 = qJDD(1) * t1052 + t1056 * t1057;
t1021 = t1048 * t1038;
t1013 = t1036 - t1037;
t1009 = -pkin(7) * t1023 + g(3) * t1056;
t980 = (t1046 + t1238) * t1158;
t972 = t1007 * t1055 - t1158 * t1238;
t971 = -t1008 * t1051 - t1046 * t1158;
t952 = t1052 * t1175 + t1056 * t980;
t951 = t1052 * t980 - t1056 * t1175;
t945 = (t1044 * t1167 + t1214) * t1051;
t944 = (t1045 * t1055 * t1102 + t1007 * t1047) * t1051;
t943 = (t1008 * t1047 - t1102 * t1173) * t1055;
t942 = (-t1044 * t1051 * t1057 + (t1008 - t1146) * t1048) * t1055;
t924 = -pkin(2) * t978 + qJ(3) * t979;
t923 = -t1073 + t1074;
t920 = -t1051 * t1253 + t1186;
t892 = t1054 * t941 - t1074;
t890 = -t1050 * t940 + t1073;
t888 = -t1051 * t922 + t1055 * t1066;
t886 = -t1047 * t1013 + t1048 * t1106;
t884 = t1048 * t1013 + t1047 * t1106;
t883 = -t1052 * t945 + t1056 * t972;
t882 = -t1052 * t942 + t1056 * t971;
t881 = t1052 * t972 + t1056 * t945;
t880 = t1052 * t971 + t1056 * t942;
t875 = t1054 * t973 - t1201;
t874 = -t1050 * t974 + t1275;
t841 = (-t1012 - t1035) * qJ(3) + (-t1005 - t1038) * pkin(2) + t1063;
t838 = -t1051 * t891 + t1161;
t837 = -t1051 * t889 - t1161;
t832 = t1047 * t981 + t1048 * t1107;
t831 = t1047 * t1107 - t1048 * t981;
t830 = -pkin(2) * t989 + qJ(3) * t1006 + t870;
t824 = -t1047 * t923 + t1048 * t1274;
t823 = -t1052 * t887 + t1056 * t921;
t822 = -t1052 * t886 + t1056 * t920;
t820 = t1052 * t920 + t1056 * t886;
t819 = pkin(7) * t823;
t817 = t1050 * t1262 - t1054 * t897;
t791 = -t1051 * t873 + t1055 * t1069;
t790 = -t1051 * t872 - t1055 * t901;
t781 = -t1198 - t1348;
t779 = pkin(2) * t879 + qJ(3) * t870;
t776 = -t1185 + t1347;
t775 = t1047 * t947 + t1048 * t1138 - t1330;
t770 = -t1051 * t815 + t1055 * t955;
t769 = t1047 * t948 + t1048 * t1139 + t1332;
t764 = -t1047 * t892 + t1048 * t1094;
t763 = -t1047 * t890 + t1048 * t1095;
t761 = -pkin(1) * t831 + t1230 * t867;
t760 = -t1052 * t832 + t1056 * t867;
t759 = t1052 * t867 + t1056 * t832;
t750 = t1048 * t867 + t1159;
t749 = -t1047 * t875 + t1048 * t1108;
t748 = -t1047 * t874 + t1048 * t1109;
t747 = (-t1047 * t831 - t1048 * t832) * pkin(8);
t746 = t1091 - t1107;
t743 = -t1047 * t871 + t1048 * t1110;
t742 = t1047 * t1110 + t1048 * t871;
t741 = -t1047 * t869 + t1048 * t1111;
t740 = t1047 * t1111 + t1048 * t869;
t734 = -t1047 * t858 + t1048 * t1113;
t733 = t1047 * t1113 + t1048 * t858;
t732 = -qJ(3) * t1186 - t1051 * t840 + t1348;
t730 = t1055 * t839 - t1253 * t1234 - t1347;
t705 = -t1047 * t817 + t1048 * t1115;
t700 = -t1047 * t818 + t1048 * t1114;
t699 = t1047 * t1114 + t1048 * t818;
t698 = -t1051 * t860 + t1055 * t866 + t1091;
t697 = -t1047 * t841 + t1048 * t1070 + t1330;
t687 = -qJ(3) * t1262 + t1236 * t868 + t1190;
t686 = -t1047 * t830 + t1048 * t1071 - t1332;
t681 = -t1047 * t924 + t1048 * t1112 + t1159;
t679 = qJ(3) * t897 + t1236 * t857 + t1202;
t676 = -t1052 * t741 + t1056 * t780;
t675 = t1052 * t780 + t1056 * t741;
t674 = -t1052 * t743 + t1056 * t778;
t673 = t1052 * t778 + t1056 * t743;
t670 = -t1052 * t734 + t1056 * t777;
t669 = t1052 * t777 + t1056 * t734;
t656 = -t1052 * t700 + t1056 * t762;
t655 = t1052 * t762 + t1056 * t700;
t640 = (-qJ(3) * t1055 + t1234) * t871 + (-t1047 * t742 - t1048 * t743) * pkin(8);
t638 = -pkin(1) * t742 - t1047 * t779 + t1048 * t1068;
t627 = qJ(3) * t926 + t1236 * t816 - t663;
t626 = -t1047 * t713 + t1048 * t1124;
t625 = -t1047 * t712 + t1048 * t1125;
t624 = t1047 * t1124 + t1048 * t713;
t623 = t1047 * t1125 + t1048 * t712;
t620 = -t1047 * t704 + t1048 * t1126;
t619 = -t1047 * t703 + t1048 * t1127;
t618 = t1047 * t1126 + t1048 * t704;
t617 = t1047 * t1127 + t1048 * t703;
t605 = qJ(3) * t826 + t1236 * t663;
t604 = -t1047 * t664 + t1048 * t1132;
t603 = t1047 * t1132 + t1048 * t664;
t598 = -t1051 * t688 + t1055 * t672 + (-t1047 * t740 - t1048 * t741) * pkin(8);
t596 = -t1052 * t626 + t1056 * t661;
t595 = -t1052 * t625 + t1056 * t660;
t594 = t1052 * t661 + t1056 * t626;
t593 = t1052 * t660 + t1056 * t625;
t592 = -t1051 * t680 + t1055 * t671 + (-t1047 * t733 - t1048 * t734) * pkin(8);
t591 = -t1052 * t620 + t1056 * t658;
t590 = -t1052 * t619 + t1056 * t657;
t589 = t1052 * t658 + t1056 * t620;
t588 = t1052 * t657 + t1056 * t619;
t582 = -pkin(1) * t740 - t1047 * t687 + t1048 * t1076;
t581 = -pkin(1) * t733 - t1047 * t679 + t1048 * t1077;
t576 = -t1052 * t604 + t1056 * t646;
t575 = t1052 * t646 + t1056 * t604;
t574 = -t1051 * t628 + t1055 * t731 + (-t1047 * t699 - t1048 * t700) * pkin(8);
t569 = -t1050 * t636 + t1054 * t662 + t1236 * t710 + t1366;
t567 = -t1050 * t635 + t1054 * t659 + t1236 * t702 + t1324;
t563 = -pkin(1) * t699 - t1047 * t627 + t1048 * t1078;
t559 = t1054 * t587 + t1154 * t1310 + t1354;
t556 = -t1050 * t609 + t1054 * t608 + t1236 * t711 + t1324;
t553 = -t1050 * t602 + t1054 * t607 + t1236 * t701 - t1366;
t551 = qJ(3) * t1310 - t1050 * t654 + t1054 * t571 + t1354;
t549 = -t1047 * t586 + t1048 * t1133;
t548 = t1047 * t1133 + t1048 * t586;
t547 = -t1051 * t606 + t1055 * t616 + (-t1047 * t603 - t1048 * t604) * pkin(8);
t545 = -pkin(1) * t603 - t1047 * t605 + t1048 * t1079;
t544 = -t1051 * t570 + t1055 * t599 + (-t1047 * t623 - t1048 * t625) * pkin(8);
t543 = -t1051 * t568 + t1055 * t597 + (-t1047 * t618 - t1048 * t620) * pkin(8);
t542 = -t1047 * t566 + t1048 * t1134;
t541 = t1047 * t1134 + t1048 * t566;
t539 = t1236 * t585 + (-pkin(10) * t1054 + t1154) * t600;
t538 = -t1051 * t557 + t1055 * t573 + (-t1047 * t624 - t1048 * t626) * pkin(8);
t537 = -t1051 * t554 + t1055 * t572 + (-t1047 * t617 - t1048 * t619) * pkin(8);
t536 = -pkin(1) * t623 - t1047 * t569 + t1048 * t1080;
t535 = -t1052 * t549 + t1056 * t562;
t534 = t1052 * t562 + t1056 * t549;
t533 = -pkin(1) * t618 - t1047 * t567 + t1048 * t1081;
t532 = -t1051 * t560 + t1055 * t564 + t1384;
t530 = -t1051 * t552 + t1055 * t558 + t1384;
t529 = -pkin(1) * t624 - t1047 * t556 + t1048 * t1083;
t528 = -t1052 * t542 + t1056 * t550;
t527 = t1052 * t550 + t1056 * t542;
t526 = -pkin(1) * t617 - t1047 * t553 + t1048 * t1084;
t525 = -t1047 * t559 + t1048 * t1082 - t1393;
t523 = qJ(3) * t583 - t1050 * t555 + t1054 * t561 + t1236 * t565;
t522 = -t1047 * t551 + t1048 * t1085 - t1393;
t521 = -t1051 * t540 + t1055 * t546 + (-t1047 * t548 - t1048 * t549) * pkin(8);
t520 = -pkin(1) * t548 - t1047 * t539 + t1048 * t1086;
t519 = -t1051 * t524 + t1055 * t531 + (-t1047 * t541 - t1048 * t542) * pkin(8);
t518 = -pkin(1) * t541 - t1047 * t523 + t1048 * t1087;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1023, -t1024, 0, t985, 0, 0, 0, 0, 0, 0, -t850, t836, t823, t760, 0, 0, 0, 0, 0, 0, t823, t850, -t836, t674, 0, 0, 0, 0, 0, 0, t670, t676, t656, t576, 0, 0, 0, 0, 0, 0, t591, t595, t1387, t535, 0, 0, 0, 0, 0, 0, t596, t1387, t590, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1024, -t1023, 0, t984, 0, 0, 0, 0, 0, 0, t847, -t833, t821, t759, 0, 0, 0, 0, 0, 0, t821, -t847, t833, t673, 0, 0, 0, 0, 0, 0, t669, t675, t655, t575, 0, 0, 0, 0, 0, 0, t589, t593, t1385, t534, 0, 0, 0, 0, 0, 0, t594, t1385, t588, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t905, -t893, t885, t831, 0, 0, 0, 0, 0, 0, t885, -t905, t893, t742, 0, 0, 0, 0, 0, 0, t733, t740, t699, t603, 0, 0, 0, 0, 0, 0, t618, t623, t1378, t548, 0, 0, 0, 0, 0, 0, t624, t1378, t617, t541; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1024, 0, -t1023, 0, t1141, -t1009, -t984, -pkin(7) * t984, t883, t822, -t1308, t882, -t1309, t952, -t1052 * t775 + t1056 * t781 - t1370, -t1052 * t769 + t1056 * t776 + t1372, -t1052 * t750 + t1056 * t746 - t1235, -pkin(7) * t759 - t1052 * t761 + t1056 * t747, t952, t1308, t1309, t883, t822, t882, -t1052 * t681 + t1056 * t698 - t1235, -t1052 * t697 + t1056 * t732 + t1370, -t1052 * t686 + t1056 * t730 - t1372, -pkin(7) * t673 - t1052 * t638 + t1056 * t640, -t1052 * t764 + t1056 * t838, -t1052 * t705 + t1056 * t770, -t1052 * t748 + t1056 * t790, -t1052 * t763 + t1056 * t837, -t1052 * t749 + t1056 * t791, -t1052 * t824 + t1056 * t888, -pkin(7) * t669 - t1052 * t581 + t1056 * t592, -pkin(7) * t675 - t1052 * t582 + t1056 * t598, -pkin(7) * t655 - t1052 * t563 + t1056 * t574, -pkin(7) * t575 - t1052 * t545 + t1056 * t547, t1266, -t1405, t1388, t1337, t1406, t1338, -pkin(7) * t589 - t1052 * t533 + t1056 * t543, -pkin(7) * t593 - t1052 * t536 + t1056 * t544, -t1052 * t525 + t1056 * t532 - t1396, -pkin(7) * t534 - t1052 * t520 + t1056 * t521, t1266, t1388, t1405, t1338, -t1406, t1337, -pkin(7) * t594 - t1052 * t529 + t1056 * t538, -t1052 * t522 + t1056 * t530 - t1396, -pkin(7) * t588 - t1052 * t526 + t1056 * t537, -pkin(7) * t527 - t1052 * t518 + t1056 * t519; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1023, 0, t1024, 0, t1009, t1141, t985, pkin(7) * t985, t881, t820, t1305, t880, t1306, t951, t1052 * t781 + t1056 * t775 - t1369, t1052 * t776 + t1056 * t769 + t1371, t1052 * t746 + t1056 * t750 + t819, pkin(7) * t760 + t1052 * t747 + t1056 * t761, t951, -t1305, -t1306, t881, t820, t880, t1052 * t698 + t1056 * t681 + t819, t1052 * t732 + t1056 * t697 + t1369, t1052 * t730 + t1056 * t686 - t1371, pkin(7) * t674 + t1052 * t640 + t1056 * t638, t1052 * t838 + t1056 * t764, t1052 * t770 + t1056 * t705, t1052 * t790 + t1056 * t748, t1052 * t837 + t1056 * t763, t1052 * t791 + t1056 * t749, t1052 * t888 + t1056 * t824, pkin(7) * t670 + t1052 * t592 + t1056 * t581, pkin(7) * t676 + t1052 * t598 + t1056 * t582, pkin(7) * t656 + t1052 * t574 + t1056 * t563, pkin(7) * t576 + t1052 * t547 + t1056 * t545, t1267, t1403, t1386, t1333, -t1404, t1334, pkin(7) * t591 + t1052 * t543 + t1056 * t533, pkin(7) * t595 + t1052 * t544 + t1056 * t536, t1052 * t532 + t1056 * t525 + t1395, pkin(7) * t535 + t1052 * t521 + t1056 * t520, t1267, t1386, -t1403, t1334, t1404, t1333, pkin(7) * t596 + t1052 * t538 + t1056 * t529, t1052 * t530 + t1056 * t522 + t1395, pkin(7) * t590 + t1052 * t537 + t1056 * t526, pkin(7) * t528 + t1052 * t519 + t1056 * t518; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1030, t1031, 0, 0, t944, t884, t1247, t943, t1248, t1021, t1047 * t1138 - t1048 * t947 + t1329, t1047 * t1139 - t1048 * t948 - t1331, t1047 * t867 + t1222, pkin(1) * t832 + t1231 * t867, t1021, -t1247, -t1248, t944, t884, t943, t1047 * t1112 + t1048 * t924 + t1222, t1047 * t1070 + t1048 * t841 - t1329, t1047 * t1071 + t1048 * t830 + t1331, pkin(1) * t743 + t1047 * t1068 + t1048 * t779, t1047 * t1094 + t1048 * t892, t1047 * t1115 + t1048 * t817, t1047 * t1109 + t1048 * t874, t1047 * t1095 + t1048 * t890, t1047 * t1108 + t1048 * t875, t1047 * t1274 + t1048 * t923, pkin(1) * t734 + t1047 * t1077 + t1048 * t679, pkin(1) * t741 + t1047 * t1076 + t1048 * t687, pkin(1) * t700 + t1047 * t1078 + t1048 * t627, pkin(1) * t604 + t1047 * t1079 + t1048 * t605, t1241, t1397, t1377, t1304, -t1398, t1303, pkin(1) * t620 + t1047 * t1081 + t1048 * t567, pkin(1) * t625 + t1047 * t1080 + t1048 * t569, t1047 * t1082 + t1048 * t559 + t1394, pkin(1) * t549 + t1047 * t1086 + t1048 * t539, t1241, t1377, -t1397, t1303, t1398, t1304, pkin(1) * t626 + t1047 * t1083 + t1048 * t556, t1047 * t1085 + t1048 * t551 + t1394, pkin(1) * t619 + t1047 * t1084 + t1048 * t553, pkin(1) * t542 + t1047 * t1087 + t1048 * t523;];
tauB_reg  = t1;
