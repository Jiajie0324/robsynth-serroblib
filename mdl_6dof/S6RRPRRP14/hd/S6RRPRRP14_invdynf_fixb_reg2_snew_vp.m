% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP14
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP14_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP14_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP14_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP14_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP14_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP14_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:27:24
% EndTime: 2019-05-06 19:27:34
% DurationCPUTime: 10.92s
% Computational Cost: add. (30089->334), mult. (67835->398), div. (0->0), fcn. (50332->10), ass. (0->230)
t2589 = cos(pkin(6));
t2585 = qJD(1) * t2589 + qJD(2);
t2591 = sin(qJ(4));
t2595 = cos(qJ(4));
t2588 = sin(pkin(6));
t2596 = cos(qJ(2));
t2648 = t2588 * t2596;
t2637 = qJD(1) * t2648;
t2553 = t2585 * t2595 - t2591 * t2637;
t2592 = sin(qJ(2));
t2649 = t2588 * t2592;
t2638 = qJD(1) * t2649;
t2640 = qJDD(1) * t2588;
t2561 = -qJD(2) * t2638 + t2596 * t2640;
t2584 = qJDD(1) * t2589 + qJDD(2);
t2633 = t2595 * t2561 + t2591 * t2584;
t2608 = qJD(4) * t2553 + qJDD(5) + t2633;
t2574 = qJD(4) + t2638;
t2590 = sin(qJ(5));
t2594 = cos(qJ(5));
t2537 = t2553 * t2590 - t2574 * t2594;
t2539 = t2553 * t2594 + t2574 * t2590;
t2655 = t2537 * t2539;
t2479 = t2608 + t2655;
t2536 = t2539 ^ 2;
t2551 = t2585 * t2591 + t2595 * t2637;
t2549 = qJD(5) + t2551;
t2670 = t2549 ^ 2;
t2674 = -t2536 - t2670;
t2452 = t2479 * t2594 + t2590 * t2674;
t2613 = t2591 * t2561 - t2595 * t2584;
t2524 = -qJD(4) * t2551 - t2613;
t2639 = qJDD(1) * t2592;
t2660 = qJD(1) * t2596;
t2606 = (qJD(2) * t2660 + t2639) * t2588;
t2605 = qJDD(4) + t2606;
t2602 = -t2537 * qJD(5) + t2594 * t2524 + t2590 * t2605;
t2654 = t2537 * t2549;
t2601 = t2602 - t2654;
t2426 = t2452 * t2595 - t2591 * t2601;
t2424 = t2452 * t2591 + t2595 * t2601;
t2450 = t2479 * t2590 - t2594 * t2674;
t2623 = t2424 * t2596 - t2450 * t2592;
t2402 = t2588 * t2426 + t2589 * t2623;
t2412 = t2424 * t2592 + t2450 * t2596;
t2593 = sin(qJ(1));
t2597 = cos(qJ(1));
t2714 = t2402 * t2593 + t2412 * t2597;
t2713 = t2402 * t2597 - t2412 * t2593;
t2400 = -t2589 * t2426 + t2588 * t2623;
t2465 = t2602 + t2654;
t2635 = t2590 * t2524 - t2594 * t2605;
t2607 = (-qJD(5) + t2549) * t2539 - t2635;
t2672 = -t2465 * t2594 + t2590 * t2607;
t2513 = t2537 ^ 2;
t2487 = t2536 + t2513;
t2671 = t2465 * t2590 + t2594 * t2607;
t2691 = t2487 * t2595 + t2591 * t2671;
t2698 = t2592 * t2691 + t2596 * t2672;
t2692 = -t2487 * t2591 + t2595 * t2671;
t2697 = t2592 * t2672 - t2596 * t2691;
t2703 = -t2588 * t2692 + t2589 * t2697;
t2708 = -t2593 * t2703 + t2597 * t2698;
t2707 = t2593 * t2698 + t2597 * t2703;
t2704 = t2588 * t2697 + t2589 * t2692;
t2480 = t2608 - t2655;
t2673 = -t2670 - t2513;
t2677 = -t2480 * t2590 + t2594 * t2673;
t2696 = t2591 * t2677;
t2678 = t2480 * t2594 + t2590 * t2673;
t2695 = t2592 * t2678;
t2694 = t2595 * t2677;
t2693 = t2596 * t2678;
t2632 = t2585 * t2637;
t2541 = t2606 + t2632;
t2598 = qJD(1) ^ 2;
t2665 = t2588 ^ 2;
t2582 = t2665 * t2592 ^ 2 * t2598;
t2666 = t2585 ^ 2;
t2548 = -t2582 - t2666;
t2644 = t2596 * t2598;
t2636 = t2592 * t2644;
t2572 = t2665 * t2636;
t2560 = -t2572 + t2584;
t2615 = t2548 * t2596 - t2560 * t2592;
t2501 = -t2588 * t2541 + t2589 * t2615;
t2528 = t2548 * t2592 + t2560 * t2596;
t2690 = t2501 * t2593 + t2528 * t2597;
t2689 = t2501 * t2597 - t2528 * t2593;
t2566 = t2585 * t2638;
t2540 = t2561 - t2566;
t2559 = t2572 + t2584;
t2643 = t2598 * t2596 ^ 2;
t2583 = t2665 * t2643;
t2562 = -t2583 - t2666;
t2614 = t2559 * t2596 + t2562 * t2592;
t2510 = t2588 * t2540 + t2589 * t2614;
t2534 = t2559 * t2592 - t2562 * t2596;
t2688 = t2510 * t2593 + t2534 * t2597;
t2687 = t2510 * t2597 - t2534 * t2593;
t2508 = -t2589 * t2540 + t2588 * t2614;
t2499 = t2589 * t2541 + t2588 * t2615;
t2669 = t2551 ^ 2;
t2668 = t2553 ^ 2;
t2667 = t2574 ^ 2;
t2664 = 2 * qJD(3);
t2663 = t2589 * g(3);
t2662 = t2596 * g(3);
t2661 = qJD(1) * t2592;
t2653 = t2553 * t2551;
t2576 = t2593 * g(1) - g(2) * t2597;
t2556 = pkin(8) * t2588 * t2598 + qJDD(1) * pkin(1) + t2576;
t2652 = t2556 * t2589;
t2645 = t2596 * t2665;
t2642 = qJD(4) - t2574;
t2641 = qJD(4) + t2574;
t2558 = pkin(3) * t2638 - pkin(9) * t2585;
t2603 = -t2556 + (-t2639 + (-qJD(2) - t2585) * t2660) * qJ(3);
t2631 = pkin(2) * t2566 - 0.2e1 * qJD(3) * t2638 - t2663;
t2474 = (-pkin(2) - pkin(9)) * t2561 + (-pkin(3) * t2588 * t2643 - t2558 * t2661 + t2603) * t2588 + t2631;
t2577 = -g(1) * t2597 - g(2) * t2593;
t2557 = -pkin(1) * t2598 + pkin(8) * t2640 + t2577;
t2634 = t2592 * t2557 - t2596 * t2652;
t2609 = -t2584 * pkin(2) - t2666 * qJ(3) + qJDD(3) + t2634;
t2600 = -t2584 * pkin(9) + (t2662 + ((-pkin(2) * t2660 - qJ(3) * t2661) * t2661 - pkin(9) * t2636) * t2588 + (t2639 + (qJD(2) - t2585) * t2660) * pkin(3)) * t2588 + t2609;
t2448 = t2595 * t2474 + t2591 * t2600;
t2530 = pkin(4) * t2551 - pkin(10) * t2553;
t2430 = -pkin(4) * t2667 + pkin(10) * t2605 - t2551 * t2530 + t2448;
t2527 = -g(3) * t2649 + t2596 * t2557 + t2592 * t2652;
t2604 = -t2666 * pkin(2) + t2584 * qJ(3) + t2527;
t2612 = (-pkin(2) * t2596 - qJ(3) * t2592) * t2598;
t2473 = t2561 * pkin(3) + (t2664 + t2558) * t2585 + (-pkin(9) * t2644 + t2612) * t2645 + t2604;
t2502 = t2553 * t2641 + t2633;
t2599 = (t2551 * t2574 - t2524) * pkin(10) + t2502 * pkin(4) + t2473;
t2411 = t2594 * t2430 + t2590 * t2599;
t2410 = -t2590 * t2430 + t2594 * t2599;
t2447 = -t2591 * t2474 + t2595 * t2600;
t2512 = pkin(5) * t2537 - qJ(6) * t2539;
t2404 = -pkin(5) * t2670 + qJ(6) * t2608 + 0.2e1 * qJD(6) * t2549 - t2537 * t2512 + t2411;
t2405 = -pkin(5) * t2608 - qJ(6) * t2670 + t2539 * t2512 + qJDD(6) - t2410;
t2385 = t2404 * t2594 + t2405 * t2590;
t2429 = -t2605 * pkin(4) - t2667 * pkin(10) + t2553 * t2530 - t2447;
t2611 = -qJD(5) * t2539 - t2635;
t2408 = -t2611 * pkin(5) + (pkin(5) * t2549 - 0.2e1 * qJD(6)) * t2539 + t2429 - t2601 * qJ(6);
t2382 = t2385 * t2591 - t2408 * t2595;
t2384 = t2404 * t2590 - t2405 * t2594;
t2630 = -t2382 * t2596 + t2384 * t2592;
t2389 = -t2410 * t2590 + t2411 * t2594;
t2386 = t2389 * t2591 - t2429 * t2595;
t2388 = t2410 * t2594 + t2411 * t2590;
t2629 = -t2386 * t2596 + t2388 * t2592;
t2416 = t2447 * t2595 + t2448 * t2591;
t2628 = -t2416 * t2596 + t2473 * t2592;
t2461 = (qJD(5) + t2549) * t2539 + t2635;
t2425 = -t2461 * t2595 + t2696;
t2624 = -t2425 * t2596 + t2695;
t2462 = t2549 * t2539 - t2611;
t2432 = -t2462 * t2595 + t2696;
t2622 = -t2432 * t2596 + t2695;
t2503 = -t2553 * t2642 - t2633;
t2505 = t2551 * t2642 + t2613;
t2468 = t2503 * t2591 + t2505 * t2595;
t2515 = -t2668 - t2669;
t2621 = -t2468 * t2596 + t2515 * t2592;
t2517 = t2605 - t2653;
t2525 = -t2667 - t2669;
t2483 = t2517 * t2595 + t2525 * t2591;
t2620 = -t2483 * t2596 + t2502 * t2592;
t2518 = -t2653 - t2605;
t2532 = -t2667 - t2668;
t2489 = t2518 * t2591 + t2532 * t2595;
t2504 = -t2551 * t2641 - t2613;
t2619 = -t2489 * t2596 + t2504 * t2592;
t2491 = t2585 * t2664 + t2612 * t2645 + t2604;
t2495 = (t2612 * t2649 + t2662) * t2588 + t2609;
t2618 = t2491 * t2592 - t2495 * t2596;
t2526 = -g(3) * t2648 - t2634;
t2617 = t2526 * t2596 + t2527 * t2592;
t2542 = t2606 - t2632;
t2543 = t2561 + t2566;
t2616 = -t2542 * t2596 + t2543 * t2592;
t2570 = -qJDD(1) * t2593 - t2597 * t2598;
t2569 = qJDD(1) * t2597 - t2593 * t2598;
t2563 = -t2582 - t2583;
t2544 = -t2588 * t2556 - t2663;
t2514 = t2542 * t2592 + t2543 * t2596;
t2497 = -t2588 * t2563 + t2589 * t2616;
t2496 = t2589 * t2563 + t2588 * t2616;
t2492 = -t2561 * pkin(2) + t2588 * t2603 + t2631;
t2490 = t2518 * t2595 - t2532 * t2591;
t2488 = -t2526 * t2592 + t2527 * t2596;
t2484 = -t2517 * t2591 + t2525 * t2595;
t2478 = -t2588 * t2544 + t2589 * t2617;
t2477 = t2589 * t2544 + t2588 * t2617;
t2471 = -t2497 * t2593 + t2514 * t2597;
t2470 = t2497 * t2597 + t2514 * t2593;
t2469 = t2503 * t2595 - t2505 * t2591;
t2460 = t2489 * t2592 + t2504 * t2596;
t2459 = t2491 * t2596 + t2495 * t2592;
t2458 = t2483 * t2592 + t2502 * t2596;
t2449 = t2468 * t2592 + t2515 * t2596;
t2446 = -t2588 * t2492 + t2589 * t2618;
t2445 = t2589 * t2492 + t2588 * t2618;
t2444 = -t2588 * t2490 + t2589 * t2619;
t2443 = t2589 * t2490 + t2588 * t2619;
t2440 = -t2588 * t2484 + t2589 * t2620;
t2439 = t2589 * t2484 + t2588 * t2620;
t2434 = t2462 * t2591 + t2694;
t2427 = t2461 * t2591 + t2694;
t2423 = -t2588 * t2469 + t2589 * t2621;
t2422 = t2589 * t2469 + t2588 * t2621;
t2417 = -t2447 * t2591 + t2448 * t2595;
t2415 = t2432 * t2592 + t2693;
t2413 = t2425 * t2592 + t2693;
t2409 = t2416 * t2592 + t2473 * t2596;
t2403 = -t2588 * t2434 + t2589 * t2622;
t2401 = t2589 * t2434 + t2588 * t2622;
t2399 = -t2588 * t2427 + t2589 * t2624;
t2397 = t2589 * t2427 + t2588 * t2624;
t2391 = -t2588 * t2417 + t2589 * t2628;
t2390 = t2589 * t2417 + t2588 * t2628;
t2387 = t2389 * t2595 + t2429 * t2591;
t2383 = t2385 * t2595 + t2408 * t2591;
t2381 = t2386 * t2592 + t2388 * t2596;
t2380 = t2382 * t2592 + t2384 * t2596;
t2379 = -t2588 * t2387 + t2589 * t2629;
t2378 = t2589 * t2387 + t2588 * t2629;
t2377 = -t2588 * t2383 + t2589 * t2630;
t2376 = t2589 * t2383 + t2588 * t2630;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2570, -t2569, 0, -t2576 * t2593 + t2577 * t2597, 0, 0, 0, 0, 0, 0, -t2688, -t2690, t2471, -t2478 * t2593 + t2488 * t2597, 0, 0, 0, 0, 0, 0, t2471, t2688, t2690, -t2446 * t2593 + t2459 * t2597, 0, 0, 0, 0, 0, 0, -t2440 * t2593 + t2458 * t2597, -t2444 * t2593 + t2460 * t2597, -t2423 * t2593 + t2449 * t2597, -t2391 * t2593 + t2409 * t2597, 0, 0, 0, 0, 0, 0, -t2399 * t2593 + t2413 * t2597, -t2714, t2708, -t2379 * t2593 + t2381 * t2597, 0, 0, 0, 0, 0, 0, -t2403 * t2593 + t2415 * t2597, t2708, t2714, -t2377 * t2593 + t2380 * t2597; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2569, t2570, 0, t2576 * t2597 + t2577 * t2593, 0, 0, 0, 0, 0, 0, t2687, t2689, t2470, t2478 * t2597 + t2488 * t2593, 0, 0, 0, 0, 0, 0, t2470, -t2687, -t2689, t2446 * t2597 + t2459 * t2593, 0, 0, 0, 0, 0, 0, t2440 * t2597 + t2458 * t2593, t2444 * t2597 + t2460 * t2593, t2423 * t2597 + t2449 * t2593, t2391 * t2597 + t2409 * t2593, 0, 0, 0, 0, 0, 0, t2399 * t2597 + t2413 * t2593, t2713, t2707, t2379 * t2597 + t2381 * t2593, 0, 0, 0, 0, 0, 0, t2403 * t2597 + t2415 * t2593, t2707, -t2713, t2377 * t2597 + t2380 * t2593; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2508, t2499, t2496, t2477, 0, 0, 0, 0, 0, 0, t2496, -t2508, -t2499, t2445, 0, 0, 0, 0, 0, 0, t2439, t2443, t2422, t2390, 0, 0, 0, 0, 0, 0, t2397, t2400, t2704, t2378, 0, 0, 0, 0, 0, 0, t2401, t2704, -t2400, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2598, -qJDD(1), 0, t2577, 0, 0, 0, 0, 0, 0, -t2534, -t2528, t2514, t2488, 0, 0, 0, 0, 0, 0, t2514, t2534, t2528, t2459, 0, 0, 0, 0, 0, 0, t2458, t2460, t2449, t2409, 0, 0, 0, 0, 0, 0, t2413, -t2412, t2698, t2381, 0, 0, 0, 0, 0, 0, t2415, t2698, t2412, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2598, 0, t2576, 0, 0, 0, 0, 0, 0, t2510, t2501, t2497, t2478, 0, 0, 0, 0, 0, 0, t2497, -t2510, -t2501, t2446, 0, 0, 0, 0, 0, 0, t2440, t2444, t2423, t2391, 0, 0, 0, 0, 0, 0, t2399, t2402, t2703, t2379, 0, 0, 0, 0, 0, 0, t2403, t2703, -t2402, t2377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2508, t2499, t2496, t2477, 0, 0, 0, 0, 0, 0, t2496, -t2508, -t2499, t2445, 0, 0, 0, 0, 0, 0, t2439, t2443, t2422, t2390, 0, 0, 0, 0, 0, 0, t2397, t2400, t2704, t2378, 0, 0, 0, 0, 0, 0, t2401, t2704, -t2400, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2562, -t2560, t2543, t2527, 0, 0, 0, 0, 0, 0, t2543, -t2562, t2560, t2491, 0, 0, 0, 0, 0, 0, t2502, t2504, t2515, t2473, 0, 0, 0, 0, 0, 0, t2678, -t2450, t2672, t2388, 0, 0, 0, 0, 0, 0, t2678, t2672, t2450, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2559, t2548, -t2542, t2526, 0, 0, 0, 0, 0, 0, -t2542, -t2559, -t2548, -t2495, 0, 0, 0, 0, 0, 0, -t2483, -t2489, -t2468, -t2416, 0, 0, 0, 0, 0, 0, -t2425, t2424, -t2691, -t2386, 0, 0, 0, 0, 0, 0, -t2432, -t2691, -t2424, -t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2540, t2541, t2563, t2544, 0, 0, 0, 0, 0, 0, t2563, t2540, -t2541, t2492, 0, 0, 0, 0, 0, 0, t2484, t2490, t2469, t2417, 0, 0, 0, 0, 0, 0, t2427, -t2426, t2692, t2387, 0, 0, 0, 0, 0, 0, t2434, t2692, t2426, t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2563, t2540, -t2541, t2492, 0, 0, 0, 0, 0, 0, t2484, t2490, t2469, t2417, 0, 0, 0, 0, 0, 0, t2427, -t2426, t2692, t2387, 0, 0, 0, 0, 0, 0, t2434, t2692, t2426, t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2543, t2562, -t2560, -t2491, 0, 0, 0, 0, 0, 0, -t2502, -t2504, -t2515, -t2473, 0, 0, 0, 0, 0, 0, -t2678, t2450, -t2672, -t2388, 0, 0, 0, 0, 0, 0, -t2678, -t2672, -t2450, -t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2542, t2559, t2548, t2495, 0, 0, 0, 0, 0, 0, t2483, t2489, t2468, t2416, 0, 0, 0, 0, 0, 0, t2425, -t2424, t2691, t2386, 0, 0, 0, 0, 0, 0, t2432, t2691, t2424, t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2525, t2518, t2503, t2448, 0, 0, 0, 0, 0, 0, t2677, -t2452, t2671, t2389, 0, 0, 0, 0, 0, 0, t2677, t2671, t2452, t2385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, t2532, t2505, t2447, 0, 0, 0, 0, 0, 0, -t2461, -t2601, t2487, -t2429, 0, 0, 0, 0, 0, 0, -t2462, t2487, t2601, -t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2502, t2504, t2515, t2473, 0, 0, 0, 0, 0, 0, t2678, -t2450, t2672, t2388, 0, 0, 0, 0, 0, 0, t2678, t2672, t2450, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2673, -t2479, t2607, t2411, 0, 0, 0, 0, 0, 0, t2673, t2607, t2479, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2480, t2674, -t2465, t2410, 0, 0, 0, 0, 0, 0, t2480, -t2465, -t2674, -t2405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2461, t2601, -t2487, t2429, 0, 0, 0, 0, 0, 0, t2462, -t2487, -t2601, t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2673, t2607, t2479, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2462, -t2487, -t2601, t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2480, t2465, t2674, t2405;];
f_new_reg  = t1;
