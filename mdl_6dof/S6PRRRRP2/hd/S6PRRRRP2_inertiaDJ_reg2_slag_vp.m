% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRRP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:04:20
% EndTime: 2019-03-09 00:04:32
% DurationCPUTime: 4.17s
% Computational Cost: add. (4184->302), mult. (10438->501), div. (0->0), fcn. (10103->10), ass. (0->184)
t122 = sin(qJ(5));
t119 = t122 ^ 2;
t125 = cos(qJ(5));
t120 = t125 ^ 2;
t245 = t119 + t120;
t123 = sin(qJ(4));
t124 = sin(qJ(3));
t121 = sin(pkin(6));
t127 = cos(qJ(2));
t209 = t121 * t127;
t181 = qJD(2) * t209;
t126 = cos(qJ(3));
t232 = sin(qJ(2));
t186 = t121 * t232;
t213 = cos(pkin(6));
t79 = t213 * t124 + t126 * t186;
t131 = t79 * qJD(3) + t124 * t181;
t144 = t124 * t186 - t213 * t126;
t233 = cos(qJ(4));
t138 = t233 * t144;
t201 = qJD(4) * t123;
t140 = t144 * qJD(3);
t63 = t126 * t181 - t140;
t128 = qJD(4) * t138 + t123 * t131 + t79 * t201 - t233 * t63;
t178 = qJD(2) * t232;
t173 = t121 * t178;
t52 = -t123 * t144 + t233 * t79;
t44 = t122 * t52 + t125 * t209;
t14 = t44 * qJD(5) - t122 * t173 + t125 * t128;
t117 = qJD(5) * t125;
t189 = t122 * t209;
t15 = -qJD(5) * t189 + t52 * t117 - t122 * t128 - t125 * t173;
t45 = t125 * t52 - t189;
t162 = t122 * t45 - t125 * t44;
t139 = -t162 * qJD(5) + t15 * t122 - t14 * t125;
t177 = qJD(4) * t233;
t175 = pkin(3) * t177;
t244 = t245 * t175;
t207 = t123 * t126;
t92 = t233 * t124 + t207;
t190 = t92 * t117;
t183 = t233 * t126;
t172 = qJD(3) * t183;
t208 = t123 * t124;
t242 = qJD(3) + qJD(4);
t61 = -t126 * t177 + t242 * t208 - t172;
t49 = -t122 * t61 + t190;
t205 = t119 - t120;
t243 = t205 * qJD(5);
t23 = t52 * qJD(4) + t123 * t63 + t233 * t131;
t51 = t123 * t79 + t138;
t169 = t23 * t92 - t51 * t61;
t116 = qJD(5) * t122;
t191 = t92 * t116;
t62 = t242 * t92;
t91 = -t183 + t208;
t241 = t125 * t169 + t14 * t91 - t51 * t191 - t45 * t62;
t204 = qJD(3) * t124;
t198 = pkin(3) * t204;
t147 = pkin(4) * t62 + pkin(10) * t61 + t198;
t114 = -pkin(3) * t126 - pkin(2);
t150 = -pkin(4) * t91 + pkin(10) * t92 - t114;
t237 = -pkin(9) - pkin(8);
t102 = t237 * t124;
t103 = t237 * t126;
t66 = t123 * t102 - t233 * t103;
t228 = -t122 * t150 + t125 * t66;
t187 = qJD(3) * t237;
t94 = t124 * t187;
t41 = -t102 * t177 - t103 * t201 - t187 * t207 - t233 * t94;
t9 = -qJD(5) * t228 + t122 * t41 + t125 * t147;
t240 = t131 * t124 - t79 * t204 + (t140 + t63) * t126;
t239 = -0.2e1 * t243;
t238 = 2 * qJD(6);
t236 = pkin(10) * t62;
t235 = pkin(10) * t91;
t234 = t62 * pkin(5);
t231 = pkin(3) * t123;
t42 = t66 * qJD(4) + t123 * t94 - t237 * t172;
t65 = -t233 * t102 - t103 * t123;
t230 = t42 * t65;
t18 = t51 * t23;
t60 = t65 * t117;
t229 = t42 * t122 + t60;
t195 = pkin(3) * t201;
t78 = pkin(5) * t116 - qJ(6) * t117 - qJD(6) * t122;
t67 = t78 + t195;
t227 = -t67 - t78;
t112 = pkin(10) + t231;
t226 = t244 * t112;
t225 = pkin(3) * qJD(4);
t224 = qJ(6) * t62;
t223 = t112 * t62;
t222 = t112 * t91;
t221 = t119 * t61;
t220 = t120 * t61;
t219 = t122 * t23;
t217 = t123 * t65;
t216 = t125 * t61;
t199 = t233 * pkin(3);
t113 = -t199 - pkin(4);
t214 = t113 * t117 + t122 * t195;
t40 = (pkin(5) * t122 - qJ(6) * t125) * t92 + t65;
t212 = qJD(5) * t40;
t211 = qJD(5) * t92;
t210 = qJD(6) * t91;
t206 = t244 * pkin(10);
t203 = qJD(3) * t126;
t202 = qJD(3) * t127;
t50 = 0.2e1 * t91 * t62;
t200 = -0.2e1 * pkin(2) * qJD(3);
t197 = pkin(4) * t116;
t196 = pkin(4) * t117;
t194 = pkin(10) * t116;
t193 = pkin(10) * t117;
t192 = t122 * t216;
t36 = t40 * t116;
t59 = t65 * t116;
t185 = t122 * t233;
t184 = t125 * t233;
t182 = t124 * t202;
t180 = t122 * t117;
t179 = t124 * t203;
t88 = t92 ^ 2;
t174 = t88 * t180;
t145 = qJ(6) * t61 + (pkin(5) * qJD(5) - qJD(6)) * t92;
t155 = -pkin(5) * t61 + qJ(6) * t211;
t11 = t155 * t122 + t145 * t125 + t42;
t171 = t11 * t92 - t40 * t61;
t170 = t23 * t65 + t51 * t42;
t168 = t42 * t92 - t61 * t65;
t167 = t61 * t91 - t62 * t92;
t166 = -t125 * pkin(5) - t122 * qJ(6);
t165 = -t113 * t92 + t222;
t26 = qJ(6) * t91 + t228;
t143 = t125 * t150;
t34 = -t122 * t66 - t143;
t27 = -t91 * pkin(5) - t34;
t164 = t122 * t26 - t125 * t27;
t163 = t122 * t228 + t125 * t34;
t159 = t122 * t175;
t158 = t125 * t175;
t157 = t121 ^ 2 * t127 * t178;
t156 = t113 * t116 - t125 * t195;
t97 = -pkin(4) + t166;
t154 = -0.2e1 * t45 * t14 + 0.2e1 * t15 * t44 + 0.2e1 * t18;
t153 = t191 + t216;
t46 = t91 * t116 - t125 * t62;
t8 = qJD(5) * t143 + t66 * t116 - t122 * t147 + t125 * t41;
t152 = -t61 * t97 + t78 * t92 - t236;
t151 = -t15 * t91 + t92 * t219 - t44 * t62 + t49 * t51;
t149 = -t11 + (t92 * t97 - t235) * qJD(5);
t148 = (t123 * t92 - t233 * t91) * qJD(4);
t84 = -t199 + t97;
t146 = -t11 + (t84 * t92 - t222) * qJD(5);
t77 = t166 * qJD(5) + t125 * qJD(6);
t5 = t210 - t8 + t224;
t6 = -t234 - t9;
t1 = -t164 * qJD(5) + t6 * t122 + t5 * t125;
t2 = -t163 * qJD(5) - t9 * t122 - t8 * t125;
t135 = t139 * pkin(10);
t134 = -t91 * t175 - t61 * t84 + t67 * t92 - t223;
t133 = t139 * t112 + t45 * t158;
t132 = pkin(3) * t148 - t113 * t61 - t223;
t129 = t162 * t61 + (t122 * t14 + t125 * t15 + (-t122 * t44 - t125 * t45) * qJD(5)) * t92;
t108 = -0.2e1 * t180;
t107 = 0.2e1 * t180;
t83 = t97 * t116;
t76 = t245 * t233 * t225;
t73 = t84 * t116;
t72 = t112 * t117 + t159;
t71 = t112 * t116 - t158;
t70 = 0.2e1 * t76;
t48 = t91 * t117 + t122 * t62;
t33 = -0.2e1 * t92 * t220 - 0.2e1 * t174;
t32 = -0.2e1 * t92 * t221 + 0.2e1 * t174;
t31 = t205 * t211 + t192;
t25 = 0.2e1 * t92 * t192 + t88 * t243;
t24 = 0.4e1 * t92 * t180 + t220 - t221;
t20 = -t167 * t122 + t91 * t190;
t19 = -0.2e1 * t167 * t125 - 0.2e1 * t91 * t191;
t17 = t51 * t116 - t125 * t23;
t16 = t51 * t117 + t219;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t131 * t144 + 0.2e1 * t79 * t63 - 0.2e1 * t157, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t128 * t52 - 0.2e1 * t157 + 0.2e1 * t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t181, 0, 0, 0, 0, 0, 0, 0, 0 (-t126 * t178 - t182) * t121 (t124 * t178 - t126 * t202) * t121, t240, -pkin(2) * t173 + t240 * pkin(8), 0, 0, 0, 0, 0, 0 (-t127 * t62 + t178 * t91) * t121 (t127 * t61 + t178 * t92) * t121, t128 * t91 - t52 * t62 + t169, -pkin(3) * t121 * t182 + t114 * t173 - t128 * t66 - t52 * t41 + t170, 0, 0, 0, 0, 0, 0, t151, t241, t129, -t14 * t228 - t15 * t34 - t44 * t9 - t45 * t8 + t170, 0, 0, 0, 0, 0, 0, t151, t129, -t241, t11 * t51 - t14 * t26 + t15 * t27 + t23 * t40 + t44 * t6 + t45 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t179, 0.2e1 * (-t124 ^ 2 + t126 ^ 2) * qJD(3), 0, -0.2e1 * t179, 0, 0, t124 * t200, t126 * t200, 0, 0, -0.2e1 * t92 * t61, 0.2e1 * t167, 0, t50, 0, 0, 0.2e1 * t114 * t62 + 0.2e1 * t198 * t91, -0.2e1 * t114 * t61 + 0.2e1 * t198 * t92, 0.2e1 * t41 * t91 - 0.2e1 * t62 * t66 + 0.2e1 * t168, 0.2e1 * t114 * t198 - 0.2e1 * t41 * t66 + 0.2e1 * t230, t33, 0.2e1 * t25, t19, t32, -0.2e1 * t20, t50, 0.2e1 * t122 * t168 + 0.2e1 * t34 * t62 + 0.2e1 * t60 * t92 + 0.2e1 * t9 * t91, 0.2e1 * t125 * t168 - 0.2e1 * t228 * t62 - 0.2e1 * t59 * t92 + 0.2e1 * t8 * t91, 0.2e1 * t163 * t61 + 0.2e1 * (t122 * t8 - t125 * t9 + (t122 * t34 - t125 * t228) * qJD(5)) * t92, -0.2e1 * t228 * t8 + 0.2e1 * t34 * t9 + 0.2e1 * t230, t33, t19, -0.2e1 * t25, t50, 0.2e1 * t20, t32, 0.2e1 * t122 * t171 + 0.2e1 * t190 * t40 - 0.2e1 * t27 * t62 - 0.2e1 * t6 * t91, 0.2e1 * t164 * t61 + 0.2e1 * (-t122 * t5 + t125 * t6 + (-t122 * t27 - t125 * t26) * qJD(5)) * t92, -0.2e1 * t125 * t171 + 0.2e1 * t26 * t62 + 0.2e1 * t36 * t92 + 0.2e1 * t5 * t91, 0.2e1 * t11 * t40 + 0.2e1 * t26 * t5 + 0.2e1 * t27 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, -t63, 0, 0, 0, 0, 0, 0, 0, 0, -t23, t128, 0, -t128 * t231 + t175 * t52 + t195 * t51 - t199 * t23, 0, 0, 0, 0, 0, 0, t17, t16, t139, t23 * t113 + (t51 * t123 + t185 * t44) * t225 + t133, 0, 0, 0, 0, 0, 0, t17, t139, -t16, t159 * t44 + t23 * t84 + t51 * t67 + t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, 0, -t204, 0, -pkin(8) * t203, pkin(8) * t204, 0, 0, 0, 0, -t61, 0, -t62, 0, -t42, t41 (-t123 * t62 + t233 * t61 + t148) * pkin(3) (-t233 * t42 - t123 * t41 + (t233 * t66 + t217) * qJD(4)) * pkin(3), -t31, -t24, t48, t31, -t46, 0, t59 + (-qJD(5) * t165 - t42) * t125 + t132 * t122, t116 * t165 + t125 * t132 + t229, t2, t42 * t113 + (t184 * t228 - t185 * t34 + t217) * t225 + t2 * t112, -t31, t48, t24, 0, t46, t31, t122 * t134 + t125 * t146 + t36, t1, t146 * t122 + (-t134 - t212) * t125, t11 * t84 + t40 * t67 + (t184 * t26 + t185 * t27) * t225 + t1 * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t195, -0.2e1 * t175, 0, 0, t107, t239, 0, t108, 0, 0, 0.2e1 * t156, 0.2e1 * t214, t70, 0.2e1 * t113 * t195 + 0.2e1 * t226, t107, 0, -t239, 0, 0, t108, -0.2e1 * t125 * t67 + 0.2e1 * t73, t70, -0.2e1 * t117 * t84 - 0.2e1 * t122 * t67, 0.2e1 * t67 * t84 + 0.2e1 * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, t128, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, t139, -pkin(4) * t23 + t135, 0, 0, 0, 0, 0, 0, t17, t139, -t16, t23 * t97 + t51 * t78 + t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, 0, -t62, 0, -t42, t41, 0, 0, -t31, -t24, t48, t31, -t46, 0, t59 + (pkin(4) * t61 - t236) * t122 + (-t42 + (-pkin(4) * t92 - t235) * qJD(5)) * t125, pkin(4) * t153 + pkin(10) * t46 + t229, t2, -pkin(4) * t42 + pkin(10) * t2, -t31, t48, t24, 0, t46, t31, t122 * t152 + t125 * t149 + t36, t1, t149 * t122 + (-t152 - t212) * t125, pkin(10) * t1 + t11 * t97 + t40 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, -t175, 0, 0, t107, t239, 0, t108, 0, 0, t156 - t197, -t196 + t214, t76, -pkin(4) * t195 + t206, t107, 0, -t239, 0, 0, t108, t227 * t125 + t73 + t83, t76, t227 * t122 + (-t84 - t97) * t117, t67 * t97 + t78 * t84 + t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, t239, 0, t108, 0, 0, -0.2e1 * t197, -0.2e1 * t196, 0, 0, t107, 0, -t239, 0, 0, t108, -0.2e1 * t125 * t78 + 0.2e1 * t83, 0, -0.2e1 * t117 * t97 - 0.2e1 * t122 * t78, 0.2e1 * t97 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, t14, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, -t14, -pkin(5) * t15 - qJ(6) * t14 + qJD(6) * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t153, 0, -t49, t62, t9, t8, 0, 0, 0, -t153, 0, t62, t49, 0, t9 + 0.2e1 * t234, t122 * t145 - t125 * t155, 0.2e1 * t210 - t8 + 0.2e1 * t224, -pkin(5) * t6 + qJ(6) * t5 + qJD(6) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, -t116, 0, -t72, t71, 0, 0, 0, t117, 0, 0, t116, 0, -t72, t77, -t71 (-pkin(5) * t185 + qJ(6) * t184) * t225 + t77 * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, -t116, 0, -t193, t194, 0, 0, 0, t117, 0, 0, t116, 0, -t193, t77, -t194, t77 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238, qJ(6) * t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, -t153, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
