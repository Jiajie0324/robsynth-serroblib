% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 09:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:40:43
% EndTime: 2019-05-05 09:40:54
% DurationCPUTime: 11.85s
% Computational Cost: add. (35210->303), mult. (69935->423), div. (0->0), fcn. (52213->12), ass. (0->236)
t2548 = sin(qJ(4));
t2549 = sin(qJ(3));
t2552 = cos(qJ(4));
t2553 = cos(qJ(3));
t2513 = (t2548 * t2553 + t2549 * t2552) * qJD(2);
t2606 = qJD(2) * t2553;
t2592 = qJD(3) * t2606;
t2595 = t2549 * qJDD(2);
t2517 = t2592 + t2595;
t2537 = t2553 * qJDD(2);
t2607 = qJD(2) * t2549;
t2593 = qJD(3) * t2607;
t2586 = t2537 - t2593;
t2588 = t2548 * t2517 - t2552 * t2586;
t2564 = qJD(4) * t2513 + qJDD(5) + t2588;
t2538 = qJD(3) + qJD(4);
t2547 = sin(qJ(5));
t2551 = cos(qJ(5));
t2492 = t2513 * t2547 - t2538 * t2551;
t2494 = t2513 * t2551 + t2538 * t2547;
t2601 = t2492 * t2494;
t2439 = t2564 + t2601;
t2491 = t2494 ^ 2;
t2511 = t2548 * t2607 - t2552 * t2606;
t2505 = qJD(5) + t2511;
t2612 = t2505 ^ 2;
t2616 = -t2491 - t2612;
t2412 = t2439 * t2551 + t2547 * t2616;
t2562 = -t2552 * t2517 - t2548 * t2586;
t2470 = -t2511 * qJD(4) - t2562;
t2594 = qJDD(3) + qJDD(4);
t2561 = -t2492 * qJD(5) + t2551 * t2470 + t2547 * t2594;
t2600 = t2492 * t2505;
t2560 = t2561 - t2600;
t2386 = t2412 * t2548 + t2552 * t2560;
t2388 = t2412 * t2552 - t2548 * t2560;
t2362 = t2386 * t2553 + t2388 * t2549;
t2543 = sin(pkin(6));
t2545 = cos(pkin(6));
t2368 = t2386 * t2549 - t2388 * t2553;
t2410 = t2439 * t2547 - t2551 * t2616;
t2550 = sin(qJ(2));
t2554 = cos(qJ(2));
t2577 = t2368 * t2550 + t2410 * t2554;
t2337 = t2543 * t2362 + t2545 * t2577;
t2352 = t2368 * t2554 - t2410 * t2550;
t2542 = sin(pkin(11));
t2544 = cos(pkin(11));
t2651 = t2337 * t2542 - t2352 * t2544;
t2650 = t2337 * t2544 + t2352 * t2542;
t2335 = -t2545 * t2362 + t2543 * t2577;
t2430 = t2561 + t2600;
t2589 = t2547 * t2470 - t2551 * t2594;
t2563 = (-qJD(5) + t2505) * t2494 - t2589;
t2614 = -t2430 * t2551 + t2547 * t2563;
t2467 = t2492 ^ 2;
t2446 = t2491 + t2467;
t2613 = t2430 * t2547 + t2551 * t2563;
t2626 = t2446 * t2552 + t2548 * t2613;
t2627 = -t2446 * t2548 + t2552 * t2613;
t2632 = -t2549 * t2626 + t2553 * t2627;
t2636 = t2550 * t2614 + t2554 * t2632;
t2633 = t2549 * t2627 + t2553 * t2626;
t2637 = t2550 * t2632 - t2554 * t2614;
t2640 = -t2543 * t2633 + t2545 * t2637;
t2645 = -t2542 * t2640 + t2544 * t2636;
t2644 = t2542 * t2636 + t2544 * t2640;
t2641 = t2543 * t2637 + t2545 * t2633;
t2440 = t2564 - t2601;
t2615 = -t2612 - t2467;
t2619 = -t2440 * t2547 + t2551 * t2615;
t2631 = t2548 * t2619;
t2620 = t2440 * t2551 + t2547 * t2615;
t2630 = t2550 * t2620;
t2629 = t2552 * t2619;
t2628 = t2554 * t2620;
t2587 = g(1) * t2542 - g(2) * t2544;
t2608 = -g(3) + qJDD(1);
t2621 = t2543 * t2608 + t2545 * t2587;
t2556 = qJD(2) ^ 2;
t2530 = t2549 * t2556 * t2553;
t2524 = qJDD(3) + t2530;
t2611 = t2511 ^ 2;
t2610 = t2513 ^ 2;
t2609 = t2538 ^ 2;
t2599 = t2511 * t2513;
t2540 = t2553 ^ 2;
t2598 = t2540 * t2556;
t2597 = qJD(4) - t2538;
t2501 = -t2543 * t2587 + t2545 * t2608;
t2523 = -g(1) * t2544 - g(2) * t2542;
t2481 = t2554 * t2523 + t2550 * t2621;
t2559 = -t2556 * pkin(2) + qJDD(2) * pkin(8) + t2481;
t2455 = t2549 * t2501 + t2553 * t2559;
t2527 = qJD(3) * pkin(3) - pkin(9) * t2607;
t2438 = -pkin(3) * t2598 + pkin(9) * t2586 - qJD(3) * t2527 + t2455;
t2454 = t2553 * t2501 - t2549 * t2559;
t2557 = t2454 + (-t2517 + t2592) * pkin(9) + t2524 * pkin(3);
t2407 = t2552 * t2438 + t2548 * t2557;
t2485 = pkin(4) * t2511 - pkin(10) * t2513;
t2398 = -pkin(4) * t2609 + pkin(10) * t2594 - t2511 * t2485 + t2407;
t2585 = t2550 * t2523 - t2554 * t2621;
t2472 = -qJDD(2) * pkin(2) - t2556 * pkin(8) + t2585;
t2449 = -t2586 * pkin(3) - pkin(9) * t2598 + t2527 * t2607 + t2472;
t2458 = (qJD(4) + t2538) * t2513 + t2588;
t2590 = t2538 * t2511 - t2470;
t2558 = pkin(4) * t2458 + pkin(10) * t2590 + t2449;
t2372 = t2551 * t2398 + t2547 * t2558;
t2539 = t2549 ^ 2;
t2596 = t2539 + t2540;
t2371 = -t2547 * t2398 + t2551 * t2558;
t2406 = -t2548 * t2438 + t2552 * t2557;
t2466 = pkin(5) * t2492 - qJ(6) * t2494;
t2358 = -pkin(5) * t2612 + qJ(6) * t2564 + 0.2e1 * qJD(6) * t2505 - t2492 * t2466 + t2372;
t2359 = -pkin(5) * t2564 - qJ(6) * t2612 + t2494 * t2466 + qJDD(6) - t2371;
t2340 = t2358 * t2551 + t2359 * t2547;
t2397 = -t2594 * pkin(4) - t2609 * pkin(10) + t2513 * t2485 - t2406;
t2565 = -qJD(5) * t2494 - t2589;
t2370 = -t2565 * pkin(5) + (pkin(5) * t2505 - 0.2e1 * qJD(6)) * t2494 + t2397 - t2560 * qJ(6);
t2323 = t2340 * t2548 - t2370 * t2552;
t2324 = t2340 * t2552 + t2370 * t2548;
t2319 = -t2323 * t2549 + t2324 * t2553;
t2339 = t2358 * t2547 - t2359 * t2551;
t2584 = t2319 * t2550 - t2339 * t2554;
t2344 = -t2371 * t2547 + t2372 * t2551;
t2341 = t2344 * t2548 - t2397 * t2552;
t2342 = t2344 * t2552 + t2397 * t2548;
t2322 = -t2341 * t2549 + t2342 * t2553;
t2343 = t2371 * t2551 + t2372 * t2547;
t2583 = t2322 * t2550 - t2343 * t2554;
t2373 = t2406 * t2552 + t2407 * t2548;
t2374 = -t2406 * t2548 + t2407 * t2552;
t2349 = -t2373 * t2549 + t2374 * t2553;
t2582 = t2349 * t2550 - t2449 * t2554;
t2426 = (qJD(5) + t2505) * t2494 + t2589;
t2387 = -t2426 * t2552 + t2631;
t2389 = t2426 * t2548 + t2629;
t2365 = -t2387 * t2549 + t2389 * t2553;
t2578 = t2365 * t2550 - t2628;
t2427 = t2494 * t2505 - t2565;
t2391 = -t2427 * t2552 + t2631;
t2393 = t2427 * t2548 + t2629;
t2369 = -t2391 * t2549 + t2393 * t2553;
t2576 = t2369 * t2550 - t2628;
t2459 = -t2513 * t2597 - t2588;
t2461 = t2511 * t2597 + t2562;
t2422 = t2459 * t2548 + t2461 * t2552;
t2423 = t2459 * t2552 - t2461 * t2548;
t2395 = -t2422 * t2549 + t2423 * t2553;
t2471 = -t2610 - t2611;
t2575 = t2395 * t2550 - t2471 * t2554;
t2482 = -t2609 - t2611;
t2483 = t2594 - t2599;
t2447 = t2482 * t2548 + t2483 * t2552;
t2448 = t2482 * t2552 - t2483 * t2548;
t2419 = -t2447 * t2549 + t2448 * t2553;
t2574 = t2419 * t2550 - t2458 * t2554;
t2421 = -t2454 * t2549 + t2455 * t2553;
t2573 = t2421 * t2550 - t2472 * t2554;
t2484 = -t2594 - t2599;
t2499 = -t2609 - t2610;
t2462 = t2484 * t2548 + t2499 * t2552;
t2463 = t2484 * t2552 - t2499 * t2548;
t2425 = -t2462 * t2549 + t2463 * t2553;
t2572 = t2425 * t2550 + t2554 * t2590;
t2571 = t2481 * t2550 - t2554 * t2585;
t2555 = qJD(3) ^ 2;
t2529 = -t2555 - t2598;
t2497 = -t2524 * t2549 + t2529 * t2553;
t2518 = t2537 - 0.2e1 * t2593;
t2570 = t2497 * t2550 + t2518 * t2554;
t2525 = -qJDD(3) + t2530;
t2528 = -t2539 * t2556 - t2555;
t2498 = t2525 * t2553 - t2528 * t2549;
t2516 = 0.2e1 * t2592 + t2595;
t2569 = t2498 * t2550 - t2516 * t2554;
t2519 = t2596 * qJDD(2);
t2522 = t2596 * t2556;
t2568 = t2519 * t2550 + t2522 * t2554;
t2567 = qJDD(2) * t2554 - t2550 * t2556;
t2521 = -qJDD(2) * t2550 - t2554 * t2556;
t2509 = t2567 * t2545;
t2508 = t2521 * t2545;
t2507 = t2567 * t2543;
t2506 = t2521 * t2543;
t2496 = t2525 * t2549 + t2528 * t2553;
t2495 = t2524 * t2553 + t2529 * t2549;
t2490 = t2519 * t2554 - t2522 * t2550;
t2488 = t2568 * t2545;
t2487 = t2568 * t2543;
t2479 = t2498 * t2554 + t2516 * t2550;
t2478 = t2497 * t2554 - t2518 * t2550;
t2453 = -t2543 * t2496 + t2545 * t2569;
t2452 = -t2543 * t2495 + t2545 * t2570;
t2451 = t2545 * t2496 + t2543 * t2569;
t2450 = t2545 * t2495 + t2543 * t2570;
t2444 = t2481 * t2554 + t2550 * t2585;
t2434 = -t2543 * t2501 + t2545 * t2571;
t2433 = t2545 * t2501 + t2543 * t2571;
t2424 = t2462 * t2553 + t2463 * t2549;
t2420 = t2454 * t2553 + t2455 * t2549;
t2418 = t2447 * t2553 + t2448 * t2549;
t2409 = t2421 * t2554 + t2472 * t2550;
t2408 = t2425 * t2554 - t2550 * t2590;
t2403 = t2419 * t2554 + t2458 * t2550;
t2394 = t2422 * t2553 + t2423 * t2549;
t2385 = t2395 * t2554 + t2471 * t2550;
t2380 = -t2543 * t2424 + t2545 * t2572;
t2379 = t2545 * t2424 + t2543 * t2572;
t2378 = -t2543 * t2420 + t2545 * t2573;
t2377 = t2545 * t2420 + t2543 * t2573;
t2376 = -t2543 * t2418 + t2545 * t2574;
t2375 = t2545 * t2418 + t2543 * t2574;
t2367 = t2391 * t2553 + t2393 * t2549;
t2363 = t2387 * t2553 + t2389 * t2549;
t2361 = -t2543 * t2394 + t2545 * t2575;
t2360 = t2545 * t2394 + t2543 * t2575;
t2353 = t2369 * t2554 + t2630;
t2351 = t2365 * t2554 + t2630;
t2348 = t2373 * t2553 + t2374 * t2549;
t2347 = t2349 * t2554 + t2449 * t2550;
t2338 = -t2543 * t2367 + t2545 * t2576;
t2336 = t2545 * t2367 + t2543 * t2576;
t2334 = -t2543 * t2363 + t2545 * t2578;
t2332 = t2545 * t2363 + t2543 * t2578;
t2326 = -t2543 * t2348 + t2545 * t2582;
t2325 = t2545 * t2348 + t2543 * t2582;
t2321 = t2341 * t2553 + t2342 * t2549;
t2320 = t2322 * t2554 + t2343 * t2550;
t2318 = t2323 * t2553 + t2324 * t2549;
t2317 = t2319 * t2554 + t2339 * t2550;
t2316 = -t2543 * t2321 + t2545 * t2583;
t2315 = t2545 * t2321 + t2543 * t2583;
t2314 = -t2543 * t2318 + t2545 * t2584;
t2313 = t2545 * t2318 + t2543 * t2584;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2544 * t2523 - t2542 * t2587, 0, 0, 0, 0, 0, 0, -t2509 * t2542 + t2521 * t2544, -t2508 * t2542 - t2544 * t2567, 0, -t2434 * t2542 + t2444 * t2544, 0, 0, 0, 0, 0, 0, -t2452 * t2542 + t2478 * t2544, -t2453 * t2542 + t2479 * t2544, -t2488 * t2542 + t2490 * t2544, -t2378 * t2542 + t2409 * t2544, 0, 0, 0, 0, 0, 0, -t2376 * t2542 + t2403 * t2544, -t2380 * t2542 + t2408 * t2544, -t2361 * t2542 + t2385 * t2544, -t2326 * t2542 + t2347 * t2544, 0, 0, 0, 0, 0, 0, -t2334 * t2542 + t2351 * t2544, -t2651, t2645, -t2316 * t2542 + t2320 * t2544, 0, 0, 0, 0, 0, 0, -t2338 * t2542 + t2353 * t2544, t2645, t2651, -t2314 * t2542 + t2317 * t2544; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2542 * t2523 + t2544 * t2587, 0, 0, 0, 0, 0, 0, t2509 * t2544 + t2521 * t2542, t2508 * t2544 - t2542 * t2567, 0, t2434 * t2544 + t2444 * t2542, 0, 0, 0, 0, 0, 0, t2452 * t2544 + t2478 * t2542, t2453 * t2544 + t2479 * t2542, t2488 * t2544 + t2490 * t2542, t2378 * t2544 + t2409 * t2542, 0, 0, 0, 0, 0, 0, t2376 * t2544 + t2403 * t2542, t2380 * t2544 + t2408 * t2542, t2361 * t2544 + t2385 * t2542, t2326 * t2544 + t2347 * t2542, 0, 0, 0, 0, 0, 0, t2334 * t2544 + t2351 * t2542, t2650, t2644, t2316 * t2544 + t2320 * t2542, 0, 0, 0, 0, 0, 0, t2338 * t2544 + t2353 * t2542, t2644, -t2650, t2314 * t2544 + t2317 * t2542; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2608, 0, 0, 0, 0, 0, 0, t2507, t2506, 0, t2433, 0, 0, 0, 0, 0, 0, t2450, t2451, t2487, t2377, 0, 0, 0, 0, 0, 0, t2375, t2379, t2360, t2325, 0, 0, 0, 0, 0, 0, t2332, t2335, t2641, t2315, 0, 0, 0, 0, 0, 0, t2336, t2641, -t2335, t2313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2523, 0, 0, 0, 0, 0, 0, t2521, -t2567, 0, t2444, 0, 0, 0, 0, 0, 0, t2478, t2479, t2490, t2409, 0, 0, 0, 0, 0, 0, t2403, t2408, t2385, t2347, 0, 0, 0, 0, 0, 0, t2351, t2352, t2636, t2320, 0, 0, 0, 0, 0, 0, t2353, t2636, -t2352, t2317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2587, 0, 0, 0, 0, 0, 0, t2509, t2508, 0, t2434, 0, 0, 0, 0, 0, 0, t2452, t2453, t2488, t2378, 0, 0, 0, 0, 0, 0, t2376, t2380, t2361, t2326, 0, 0, 0, 0, 0, 0, t2334, t2337, t2640, t2316, 0, 0, 0, 0, 0, 0, t2338, t2640, -t2337, t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2608, 0, 0, 0, 0, 0, 0, t2507, t2506, 0, t2433, 0, 0, 0, 0, 0, 0, t2450, t2451, t2487, t2377, 0, 0, 0, 0, 0, 0, t2375, t2379, t2360, t2325, 0, 0, 0, 0, 0, 0, t2332, t2335, t2641, t2315, 0, 0, 0, 0, 0, 0, t2336, t2641, -t2335, t2313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2556, -qJDD(2), 0, t2481, 0, 0, 0, 0, 0, 0, t2497, t2498, t2519, t2421, 0, 0, 0, 0, 0, 0, t2419, t2425, t2395, t2349, 0, 0, 0, 0, 0, 0, t2365, t2368, t2632, t2322, 0, 0, 0, 0, 0, 0, t2369, t2632, -t2368, t2319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2556, 0, -t2585, 0, 0, 0, 0, 0, 0, t2518, -t2516, t2522, -t2472, 0, 0, 0, 0, 0, 0, -t2458, t2590, -t2471, -t2449, 0, 0, 0, 0, 0, 0, -t2620, t2410, -t2614, -t2343, 0, 0, 0, 0, 0, 0, -t2620, -t2614, -t2410, -t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, 0, 0, 0, 0, 0, 0, t2495, t2496, 0, t2420, 0, 0, 0, 0, 0, 0, t2418, t2424, t2394, t2348, 0, 0, 0, 0, 0, 0, t2363, -t2362, t2633, t2321, 0, 0, 0, 0, 0, 0, t2367, t2633, t2362, t2318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2529, t2525, t2537, t2455, 0, 0, 0, 0, 0, 0, t2448, t2463, t2423, t2374, 0, 0, 0, 0, 0, 0, t2389, -t2388, t2627, t2342, 0, 0, 0, 0, 0, 0, t2393, t2627, t2388, t2324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2524, t2528, -t2595, t2454, 0, 0, 0, 0, 0, 0, t2447, t2462, t2422, t2373, 0, 0, 0, 0, 0, 0, t2387, -t2386, t2626, t2341, 0, 0, 0, 0, 0, 0, t2391, t2626, t2386, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2518, t2516, -t2522, t2472, 0, 0, 0, 0, 0, 0, t2458, -t2590, t2471, t2449, 0, 0, 0, 0, 0, 0, t2620, -t2410, t2614, t2343, 0, 0, 0, 0, 0, 0, t2620, t2614, t2410, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2482, t2484, t2459, t2407, 0, 0, 0, 0, 0, 0, t2619, -t2412, t2613, t2344, 0, 0, 0, 0, 0, 0, t2619, t2613, t2412, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2483, t2499, t2461, t2406, 0, 0, 0, 0, 0, 0, -t2426, -t2560, t2446, -t2397, 0, 0, 0, 0, 0, 0, -t2427, t2446, t2560, -t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2458, -t2590, t2471, t2449, 0, 0, 0, 0, 0, 0, t2620, -t2410, t2614, t2343, 0, 0, 0, 0, 0, 0, t2620, t2614, t2410, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2615, -t2439, t2563, t2372, 0, 0, 0, 0, 0, 0, t2615, t2563, t2439, t2358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2440, t2616, -t2430, t2371, 0, 0, 0, 0, 0, 0, t2440, -t2430, -t2616, -t2359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, t2560, -t2446, t2397, 0, 0, 0, 0, 0, 0, t2427, -t2446, -t2560, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2615, t2563, t2439, t2358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2427, -t2446, -t2560, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2440, t2430, t2616, t2359;];
f_new_reg  = t1;
