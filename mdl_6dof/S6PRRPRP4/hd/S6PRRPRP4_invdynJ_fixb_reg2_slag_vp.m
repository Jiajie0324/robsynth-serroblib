% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:44:05
% EndTime: 2019-03-08 21:44:15
% DurationCPUTime: 6.21s
% Computational Cost: add. (4793->551), mult. (10717->691), div. (0->0), fcn. (7734->10), ass. (0->291)
t204 = cos(qJ(5));
t201 = sin(qJ(5));
t312 = qJD(3) * t201;
t205 = cos(qJ(3));
t316 = qJD(2) * t205;
t138 = t204 * t316 + t312;
t202 = sin(qJ(3));
t318 = qJD(2) * t202;
t179 = qJD(5) + t318;
t244 = t138 * t179;
t302 = qJD(2) * qJD(3);
t279 = t202 * t302;
t296 = t205 * qJDD(2);
t396 = -t279 + t296;
t65 = qJD(5) * t138 - t204 * qJDD(3) + t396 * t201;
t401 = t65 - t244;
t400 = t65 + t244;
t377 = pkin(4) + pkin(8);
t283 = t201 * t316;
t310 = qJD(3) * t204;
t140 = -t283 + t310;
t339 = t140 * t179;
t66 = -qJD(5) * t283 + qJDD(3) * t201 + (qJD(3) * qJD(5) + t396) * t204;
t399 = t66 + t339;
t203 = sin(qJ(2));
t198 = sin(pkin(6));
t322 = qJD(1) * t198;
t290 = t203 * t322;
t147 = qJD(2) * pkin(8) + t290;
t199 = cos(pkin(6));
t321 = qJD(1) * t205;
t173 = t199 * t321;
t97 = t202 * t147 - t173;
t398 = -qJD(4) - t97;
t206 = cos(qJ(2));
t303 = qJD(1) * qJD(2);
t281 = t206 * t303;
t313 = qJD(3) * t199;
t397 = qJDD(2) * pkin(8) + (qJDD(1) * t203 + t281) * t198 + qJD(1) * t313;
t336 = t199 * t202;
t338 = t198 * t203;
t129 = t205 * t338 + t336;
t209 = qJD(2) ^ 2;
t241 = qJDD(2) * t206 - t203 * t209;
t277 = t206 * t302;
t337 = t198 * t206;
t288 = qJD(2) * t337;
t293 = t202 * t338;
t80 = -qJD(3) * t293 + (t288 + t313) * t205;
t395 = qJD(3) * t80 + qJDD(3) * t129 + (t202 * t241 + t205 * t277) * t198;
t128 = -t199 * t205 + t293;
t81 = qJD(3) * t129 + t202 * t288;
t394 = -qJD(3) * t81 - qJDD(3) * t128 + t198 * (-t202 * t277 + t205 * t241);
t207 = -pkin(3) - pkin(9);
t389 = qJD(4) - t173;
t326 = (pkin(4) * qJD(2) + t147) * t202 + t389;
t67 = t207 * qJD(3) + t326;
t333 = t202 * qJ(4);
t276 = -pkin(2) - t333;
t132 = t207 * t205 + t276;
t320 = qJD(1) * t206;
t284 = t198 * t320;
t87 = qJD(2) * t132 - t284;
t31 = -t201 * t87 + t204 * t67;
t17 = -qJ(6) * t140 + t31;
t16 = pkin(5) * t179 + t17;
t364 = qJ(6) * t65;
t278 = t205 * t302;
t297 = t202 * qJDD(2);
t227 = t278 + t297;
t137 = qJDD(5) + t227;
t373 = pkin(5) * t137;
t301 = qJDD(1) * t199;
t309 = qJD(3) * t205;
t261 = t147 * t309 + t397 * t202 - t205 * t301;
t248 = qJDD(4) + t261;
t23 = t227 * pkin(4) + t207 * qJDD(3) + t248;
t32 = t201 * t67 + t204 * t87;
t346 = qJ(4) * t205;
t252 = pkin(9) * t202 - t346;
t305 = t202 * qJD(4);
t223 = t252 * qJD(3) - t305;
t282 = t203 * t303;
t251 = -qJDD(1) * t337 + t198 * t282;
t238 = pkin(3) * t279 + t251;
t35 = qJD(2) * t223 + qJDD(2) * t132 + t238;
t5 = -qJD(5) * t32 - t201 * t35 + t204 * t23;
t2 = -qJD(6) * t140 + t364 + t373 + t5;
t348 = sin(pkin(10));
t268 = t348 * t206;
t349 = cos(pkin(10));
t271 = t349 * t203;
t122 = t199 * t271 + t268;
t273 = t198 * t349;
t76 = t122 * t202 + t205 * t273;
t269 = t348 * t203;
t270 = t349 * t206;
t124 = -t199 * t269 + t270;
t272 = t198 * t348;
t78 = t124 * t202 - t205 * t272;
t229 = g(1) * t78 + g(2) * t76 + g(3) * t128;
t363 = qJ(6) * t66;
t307 = qJD(5) * t204;
t308 = qJD(5) * t201;
t4 = t201 * t23 + t204 * t35 + t67 * t307 - t87 * t308;
t3 = -qJD(6) * t138 - t363 + t4;
t18 = -qJ(6) * t138 + t32;
t361 = t179 * t18;
t393 = -(t16 * t179 - t3) * t201 + (t2 + t361) * t204 - t229;
t311 = qJD(3) * t202;
t187 = pkin(3) * t311;
t101 = t187 + t223;
t331 = t202 * t206;
t103 = (t201 * t331 + t203 * t204) * t198;
t146 = t377 * t309;
t162 = t377 * t202;
t366 = -qJD(1) * t103 + t204 * t101 - t132 * t308 + t201 * t146 + t162 * t307;
t329 = t204 * t206;
t102 = (-t201 * t203 + t202 * t329) * t198;
t391 = -qJD(1) * t102 + t204 * t146;
t98 = qJD(1) * t336 + t147 * t205;
t91 = -qJD(3) * qJ(4) - t98;
t90 = -qJD(3) * pkin(3) - t398;
t46 = -t66 + t339;
t75 = t204 * t132 + t201 * t162;
t120 = t204 * t137;
t390 = -t179 * t308 + t120;
t151 = -pkin(3) * t205 + t276;
t319 = qJD(2) * t151;
t100 = -t284 + t319;
t388 = t100 * t318 + qJDD(4);
t262 = t147 * t311 - t202 * t301 - t397 * t205;
t387 = (-t202 * t98 + t205 * t97) * qJD(3) + t261 * t202 - t262 * t205;
t193 = qJDD(3) * qJ(4);
t194 = qJD(3) * qJD(4);
t36 = -t193 - t194 + t262;
t344 = qJDD(3) * pkin(3);
t37 = t248 - t344;
t386 = (t202 * t91 + t205 * t90) * qJD(3) + t37 * t202 - t36 * t205;
t121 = -t199 * t270 + t269;
t123 = t199 * t268 + t271;
t82 = t128 * t204 + t201 * t337;
t385 = -g(3) * t82 - g(2) * (-t121 * t201 + t204 * t76) - g(1) * (-t123 * t201 + t204 * t78);
t186 = pkin(4) * t316;
t69 = t186 - t91;
t383 = t137 * t207 + t179 * t69;
t345 = qJDD(2) * pkin(2);
t105 = t251 - t345;
t255 = g(1) * t123 + g(2) * t121;
t208 = qJD(3) ^ 2;
t372 = pkin(8) * t208;
t382 = t198 * (-g(3) * t206 + t282) - t105 + t255 + t345 - t372;
t234 = -qJ(4) * t309 - t305;
t119 = t187 + t234;
t224 = -g(3) * t337 + t255;
t300 = qJDD(2) * t151;
t49 = qJD(2) * t234 + t238 + t300;
t379 = qJD(2) * (-t119 + t290) + t224 - t300 - t372 - t49;
t378 = t140 ^ 2;
t371 = g(3) * t203;
t182 = pkin(5) * t204 + pkin(4);
t370 = pkin(8) + t182;
t263 = qJ(6) * t205 - t132;
t369 = pkin(5) * t309 + t263 * t307 + (-qJ(6) * t311 - qJD(5) * t162 + qJD(6) * t205 - t101) * t201 + t391;
t306 = qJD(5) * t205;
t286 = t201 * t306;
t226 = t202 * t310 + t286;
t304 = t204 * qJD(6);
t368 = qJ(6) * t226 - t205 * t304 + t366;
t367 = -t17 + t16;
t365 = -t75 * qJD(5) - t201 * t101 + t391;
t362 = qJD(2) * pkin(2);
t360 = t179 * t31;
t359 = t179 * t32;
t358 = t204 * t65;
t353 = t66 * t201;
t188 = pkin(3) * t318;
t114 = t252 * qJD(2) + t188;
t86 = t186 + t98;
t48 = t204 * t114 + t201 * t86;
t327 = qJ(6) - t207;
t334 = t201 * t202;
t47 = -t201 * t114 + t204 * t86;
t352 = t327 * t308 - t304 - (pkin(5) * t205 - qJ(6) * t334) * qJD(2) - t47;
t150 = t327 * t204;
t351 = -qJ(6) * t204 * t318 - qJD(5) * t150 - t201 * qJD(6) - t48;
t350 = pkin(5) * t307 - (-t182 * qJD(2) - t147) * t202 + t389;
t347 = pkin(8) * qJDD(3);
t343 = t121 * t205;
t342 = t123 * t205;
t340 = t140 * t138;
t335 = t201 * t137;
t332 = t202 * t204;
t330 = t204 * t205;
t328 = t205 * t206;
t325 = qJDD(1) - g(3);
t324 = pkin(2) * t337 + pkin(8) * t338;
t163 = t377 * t205;
t196 = t202 ^ 2;
t197 = t205 ^ 2;
t323 = t196 - t197;
t317 = qJD(2) * t203;
t315 = qJD(3) * t138;
t314 = qJD(3) * t140;
t299 = qJDD(2) * t196;
t298 = qJDD(2) * t197;
t266 = -pkin(5) * t138 - qJD(6);
t54 = -t266 + t69;
t295 = t54 * t308;
t294 = t54 * t307;
t116 = t121 * pkin(2);
t292 = -pkin(3) * t343 - t121 * t333 - t116;
t117 = t123 * pkin(2);
t291 = -pkin(3) * t342 - t123 * t333 - t117;
t289 = t198 * t317;
t285 = t179 * t316;
t181 = pkin(5) * t201 + qJ(4);
t72 = t76 * pkin(3);
t77 = t122 * t205 - t202 * t273;
t275 = qJ(4) * t77 - t72;
t73 = t78 * pkin(3);
t79 = t124 * t205 + t202 * t272;
t274 = qJ(4) * t79 - t73;
t118 = t128 * pkin(3);
t264 = qJ(4) * t129 - t118;
t260 = t138 * t284;
t259 = t140 * t284;
t258 = t202 * t278;
t254 = g(1) * t124 + g(2) * t122;
t250 = -t201 * t31 + t204 * t32;
t247 = g(3) * (t324 + (pkin(3) * t328 + qJ(4) * t331) * t198);
t246 = t179 ^ 2;
t200 = -qJ(6) - pkin(9);
t239 = pkin(5) * t334 - t200 * t205;
t83 = -t128 * t201 + t198 * t329;
t235 = -t179 * t307 - t335;
t231 = -g(1) * (-t123 * t332 - t124 * t201) - g(2) * (-t121 * t332 - t122 * t201) - g(3) * t102;
t230 = -g(1) * (-t123 * t334 + t124 * t204) - g(2) * (-t121 * t334 + t122 * t204) - g(3) * t103;
t228 = -g(1) * t79 - g(2) * t77 - g(3) * t129;
t26 = t396 * pkin(4) - t36;
t11 = pkin(5) * t66 + qJDD(6) + t26;
t225 = t11 + t228;
t222 = -g(1) * (-t123 * t204 - t201 * t78) - g(2) * (-t121 * t204 - t201 * t76) - g(3) * t83 - t4;
t220 = t229 - t261;
t219 = -qJD(5) * t179 * t207 + t228 + t26;
t148 = -t284 - t362;
t218 = -t347 + (t148 + t284 - t362) * qJD(3);
t217 = t347 + (-t100 - t284 - t319) * qJD(3);
t216 = qJD(3) * t97 + t228 - t262;
t215 = qJD(3) * t98 + t220;
t212 = t5 + t385;
t211 = (-t371 + (-t196 - t197) * t281) * t198 - t254 + (t299 + t298) * pkin(8);
t210 = (t128 * t202 + t129 * t205) * qJDD(2) + (t202 * t81 + t205 * t80 + (t128 * t205 - t129 * t202) * qJD(3)) * qJD(2);
t175 = t202 * t209 * t205;
t155 = t323 * t209;
t153 = qJDD(3) * t205 - t202 * t208;
t152 = qJDD(3) * t202 + t205 * t208;
t149 = t327 * t201;
t145 = t377 * t311;
t144 = -qJ(4) * t316 + t188;
t143 = t204 * t162;
t136 = t138 ^ 2;
t134 = -0.2e1 * t258 + t298;
t133 = 0.2e1 * t258 + t299;
t127 = pkin(5) * t330 + t163;
t99 = 0.2e1 * t202 * t296 - 0.2e1 * t323 * t302;
t88 = -pkin(5) * t286 - t370 * t311;
t84 = t137 * t202 + t179 * t309;
t74 = -t132 * t201 + t143;
t63 = -qJ(6) * t330 + t75;
t61 = -t136 + t378;
t59 = t202 * pkin(5) + t263 * t201 + t143;
t42 = -t204 * t246 - t314 - t335;
t41 = -t201 * t246 + t120 - t315;
t40 = (t138 * t205 - t179 * t332) * qJD(2) + t235;
t39 = (-t140 * t205 - t179 * t334) * qJD(2) + t390;
t30 = qJD(5) * t82 + t81 * t201 + t204 * t289;
t29 = qJD(5) * t83 - t201 * t289 + t81 * t204;
t25 = t204 * t244 + t353;
t24 = -t201 * t339 - t358;
t20 = -t138 * t226 + t66 * t330;
t19 = t65 * t201 * t205 + (t201 * t311 - t204 * t306) * t140;
t13 = (t179 * t312 - t65) * t202 + (t235 + t314) * t205;
t12 = (t179 * t310 - t66) * t202 + (-t315 - t390) * t205;
t10 = t46 * t201 + t401 * t204;
t9 = t400 * t201 - t399 * t204;
t8 = (-t138 * t201 + t140 * t204) * t311 + (t353 + t358 + (t138 * t204 + t140 * t201) * qJD(5)) * t205;
t7 = -t129 * t65 + t137 * t83 + t140 * t80 - t179 * t30;
t6 = t129 * t66 + t137 * t82 + t138 * t80 + t179 * t29;
t1 = -t138 * t30 - t140 * t29 + t65 * t82 + t66 * t83;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t325, 0, 0, 0, 0, 0, 0, t241 * t198 (-qJDD(2) * t203 - t206 * t209) * t198, 0, -g(3) + (t199 ^ 2 + (t203 ^ 2 + t206 ^ 2) * t198 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t394, -t395, t210, t128 * t261 - t129 * t262 + t80 * t98 + t81 * t97 - g(3) + (-t105 * t206 + t148 * t317) * t198, 0, 0, 0, 0, 0, 0, t210, -t394, t395, t128 * t37 - t129 * t36 - t80 * t91 + t81 * t90 - g(3) + (t100 * t317 - t206 * t49) * t198, 0, 0, 0, 0, 0, 0, t6, t7, t1, t129 * t26 + t29 * t31 + t30 * t32 - t4 * t83 + t5 * t82 + t69 * t80 - g(3), 0, 0, 0, 0, 0, 0, t6, t7, t1, t11 * t129 + t16 * t29 + t18 * t30 + t2 * t82 - t3 * t83 + t54 * t80 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t325 * t337 + t255, -t325 * t338 + t254, 0, 0, t133, t99, t152, t134, t153, 0, t218 * t202 + t382 * t205, -t382 * t202 + t218 * t205, t211 + t387, -t105 * pkin(2) + g(1) * t117 + g(2) * t116 - g(3) * t324 + (-t148 * t203 + (-t202 * t97 - t205 * t98) * t206) * t322 + (-t254 + t387) * pkin(8), 0, -t152, -t153, t133, t99, t134, t211 + t386, t217 * t202 - t205 * t379, t202 * t379 + t217 * t205, t49 * t151 + t100 * t119 - g(1) * t291 - g(2) * t292 - t247 + (-t100 * t203 + (-t202 * t90 + t205 * t91) * t206) * t322 + (-t254 + t386) * pkin(8), t19, t8, t13, t20, t12, t84, t137 * t74 - t138 * t145 + t163 * t66 + (-t310 * t69 + t5) * t202 + t365 * t179 + (qJD(3) * t31 + t204 * t26 - t308 * t69 - t260) * t205 + t230, -t137 * t75 - t140 * t145 - t163 * t65 + (t312 * t69 - t4) * t202 - t366 * t179 + (-qJD(3) * t32 - t201 * t26 - t307 * t69 - t259) * t205 + t231, t65 * t74 - t66 * t75 - t365 * t140 - t366 * t138 + t250 * t311 + (t201 * t5 - t204 * t4 + (t201 * t32 + t204 * t31) * qJD(5) + t224) * t205, t4 * t75 + t5 * t74 + t26 * t163 - t69 * t145 - g(1) * (-pkin(9) * t342 + t377 * t124 + t291) - g(2) * (-pkin(9) * t343 + t377 * t122 + t292) - t247 + t366 * t32 + t365 * t31 + (-t69 * t205 * t320 - g(3) * (pkin(4) * t203 + pkin(9) * t328)) * t198, t19, t8, t13, t20, t12, t84, t127 * t66 + t137 * t59 + t138 * t88 + (-t310 * t54 + t2) * t202 + t369 * t179 + (qJD(3) * t16 + t11 * t204 - t260 - t295) * t205 + t230, -t127 * t65 - t137 * t63 + t140 * t88 + (t312 * t54 - t3) * t202 - t368 * t179 + (-qJD(3) * t18 - t11 * t201 - t259 - t294) * t205 + t231, t59 * t65 - t63 * t66 - t369 * t140 - t368 * t138 + (-t16 * t201 + t18 * t204) * t311 + (t2 * t201 - t204 * t3 + (t16 * t204 + t18 * t201) * qJD(5) + t224) * t205, t3 * t63 + t2 * t59 + t11 * t127 + t54 * t88 - g(1) * (-t239 * t123 + t370 * t124 + t291) - g(2) * (-t239 * t121 + t370 * t122 + t292) - t247 + t368 * t18 + t369 * t16 + (-t182 * t371 + (-g(3) * t239 - t321 * t54) * t206) * t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, t155, t297, t175, t296, qJDD(3), -t148 * t318 + t215, -t148 * t316 - t216, 0, 0, qJDD(3), -t297, -t296, -t175, t155, t175 (-pkin(3) * t202 + t346) * qJDD(2), -t144 * t316 - t215 - 0.2e1 * t344 + t388, 0.2e1 * t193 + 0.2e1 * t194 + (t100 * t205 + t144 * t202) * qJD(2) + t216, -t37 * pkin(3) - g(1) * t274 - g(2) * t275 - g(3) * t264 - t36 * qJ(4) - t100 * t144 + t398 * t91 - t90 * t98, t24, t9, t39, t25, t40, -t285, qJ(4) * t66 + t326 * t138 - t179 * t47 + t219 * t201 + t383 * t204 - t31 * t316, -qJ(4) * t65 + t326 * t140 + t179 * t48 - t383 * t201 + t219 * t204 + t32 * t316, t138 * t48 + t140 * t47 + (-t32 * t318 + t207 * t65 - t5 + (-t138 * t207 - t32) * qJD(5)) * t204 + (t31 * t318 - t207 * t66 - t4 + (t140 * t207 + t31) * qJD(5)) * t201 + t229, t26 * qJ(4) - t32 * t48 - t31 * t47 - g(1) * (-pkin(9) * t78 + t274) - g(2) * (-pkin(9) * t76 + t275) - g(3) * (-pkin(9) * t128 + t264) + t326 * t69 + (qJD(5) * t250 + t4 * t201 + t5 * t204) * t207, t24, t9, t39, t25, t40, -t285, t294 - t137 * t150 + t181 * t66 + t352 * t179 + t350 * t138 + (-t16 * t205 + t332 * t54) * qJD(2) + t225 * t201, -t295 + t137 * t149 - t181 * t65 - t351 * t179 + t350 * t140 + (t18 * t205 - t334 * t54) * qJD(2) + t225 * t204, -t351 * t138 - t352 * t140 + t149 * t66 - t150 * t65 - t393, -t3 * t149 - t2 * t150 + t11 * t181 - g(1) * (t181 * t79 + t78 * t200 - t73) - g(2) * (t181 * t77 + t76 * t200 - t72) - g(3) * (t128 * t200 + t129 * t181 - t118) + t350 * t54 + t351 * t18 + t352 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t297, qJDD(3) + t175, -t196 * t209 - t208, qJD(3) * t91 - t220 - t344 + t388, 0, 0, 0, 0, 0, 0, t41, t42, t10, -qJD(3) * t69 + (t5 + t359) * t204 + (t4 - t360) * t201 - t229, 0, 0, 0, 0, 0, 0, t41, t42, t10, -qJD(3) * t54 + t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t340, t61, -t401, -t340, t46, t137, -t140 * t69 + t212 + t359, t138 * t69 + t222 + t360, 0, 0, t340, t61, -t401, -t340, t46, t137, 0.2e1 * t373 + t364 + t361 + (t266 - t54) * t140 + t212, -pkin(5) * t378 + t363 + t17 * t179 + (qJD(6) + t54) * t138 + t222, t65 * pkin(5) - t367 * t138, t367 * t18 + (-t54 * t140 + t2 + t385) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, -t400, -t136 - t378, t138 * t18 + t140 * t16 + t225;];
tau_reg  = t14;
