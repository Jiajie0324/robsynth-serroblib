% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRP4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP4_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:44:08
% EndTime: 2019-03-08 21:44:12
% DurationCPUTime: 2.16s
% Computational Cost: add. (1412->221), mult. (3583->378), div. (0->0), fcn. (3038->8), ass. (0->140)
t156 = pkin(4) + pkin(8);
t157 = pkin(3) + pkin(9);
t144 = qJ(6) + t157;
t84 = sin(pkin(6));
t91 = cos(qJ(2));
t152 = t84 * t91;
t88 = sin(qJ(2));
t153 = t84 * t88;
t87 = sin(qJ(3));
t128 = t87 * t153;
t85 = cos(pkin(6));
t90 = cos(qJ(3));
t42 = -t85 * t90 + t128;
t86 = sin(qJ(5));
t89 = cos(qJ(5));
t100 = t89 * t152 - t42 * t86;
t164 = qJD(5) * t100;
t145 = t87 * qJ(4);
t163 = t157 * t90 + t145;
t147 = qJ(4) * t90;
t162 = t157 * t87 - t147;
t80 = t86 ^ 2;
t82 = t89 ^ 2;
t150 = t80 - t82;
t83 = t90 ^ 2;
t114 = qJD(3) * (t87 ^ 2 - t83);
t161 = t150 * qJD(5);
t139 = qJD(4) * t90;
t62 = t156 * t90;
t160 = t163 * qJD(3) - qJD(5) * t62 - t139;
t142 = qJD(2) * t91;
t118 = t84 * t142;
t23 = -qJD(3) * t128 + (qJD(3) * t85 + t118) * t90;
t43 = t90 * t153 + t85 * t87;
t16 = t43 * t23;
t24 = qJD(3) * t43 + t87 * t118;
t159 = -0.2e1 * t84 ^ 2 * t88 * t142 + 0.2e1 * t24 * t42 + 0.2e1 * t16;
t158 = 0.2e1 * qJD(4);
t155 = pkin(5) * t89;
t143 = qJD(2) * t88;
t119 = t84 * t143;
t25 = t86 * t152 + t42 * t89;
t13 = qJD(5) * t25 + t89 * t119 + t24 * t86;
t154 = t13 * t86;
t151 = t86 * t87;
t124 = t156 * t87;
t50 = -pkin(2) - t163;
t21 = t86 * t124 + t89 * t50;
t148 = qJ(4) * t86;
t146 = qJ(6) * t90;
t141 = qJD(3) * t86;
t140 = qJD(3) * t89;
t138 = qJD(5) * t86;
t137 = qJD(5) * t89;
t136 = qJD(5) * t90;
t135 = qJD(5) * t157;
t134 = t86 * qJD(6);
t133 = t87 * qJD(3);
t132 = t87 * qJD(4);
t131 = t89 * qJD(6);
t75 = t90 * qJD(3);
t130 = qJ(4) * qJD(5);
t129 = -0.2e1 * pkin(2) * qJD(3);
t127 = pkin(5) * t138;
t126 = pkin(8) * t133;
t125 = pkin(8) * t75;
t123 = t86 * t75;
t122 = t89 * t133;
t121 = t86 * t136;
t120 = t89 * t136;
t117 = t87 * t75;
t116 = t86 * t137;
t115 = qJ(6) * t136;
t58 = t144 * t89;
t55 = t89 * t124;
t113 = t83 * t116;
t112 = t86 * t122;
t111 = t156 * t75;
t27 = -pkin(5) * t121 + (-t155 - t156) * t133;
t74 = pkin(5) * t86 + qJ(4);
t110 = -t74 * t136 + t27;
t109 = t89 * t111 - t50 * t137;
t108 = -pkin(3) * t90 - t145;
t17 = t87 * pkin(5) + t55 + (-t50 + t146) * t86;
t18 = -t89 * t146 + t21;
t107 = -t17 * t86 + t18 * t89;
t20 = -t50 * t86 + t55;
t106 = -t20 * t86 + t21 * t89;
t105 = -t100 * t89 - t25 * t86;
t103 = -qJD(5) * t156 + qJD(4);
t102 = t23 * qJ(4) + t43 * qJD(4);
t14 = t43 * t137 + t23 * t86;
t15 = -t43 * t138 + t23 * t89;
t10 = t50 * t138 - t89 * (t162 * qJD(3) - t132) - t86 * t111 - qJD(5) * t55;
t47 = t86 * t133 - t120;
t56 = t156 * t133;
t98 = t162 * qJD(5) - t56;
t41 = t90 * t155 + t62;
t70 = pkin(5) * t137 + qJD(4);
t97 = -qJD(5) * t41 + t74 * t133 - t70 * t90;
t96 = t108 * qJD(3) + t139;
t11 = qJ(4) * t123 + (-t157 * qJD(3) + t103) * t151 + t109;
t3 = t106 * qJD(5) - t10 * t86 + t11 * t89;
t95 = t23 * t90 + t24 * t87 + (t42 * t90 - t43 * t87) * qJD(3);
t94 = t95 * pkin(8);
t93 = t89 * t115 + t90 * t134 + (-t144 * qJD(3) + t103) * t151 + t109;
t78 = qJ(4) * t158;
t69 = -0.2e1 * t116;
t68 = 0.2e1 * t116;
t67 = -0.2e1 * t117;
t66 = 0.2e1 * t117;
t59 = -pkin(2) + t108;
t57 = t144 * t86;
t53 = -0.2e1 * t114;
t52 = 0.2e1 * t161;
t46 = -t87 * t137 - t123;
t45 = t121 + t122;
t44 = -t87 * t138 + t89 * t75;
t40 = -t132 + (pkin(3) * t87 - t147) * qJD(3);
t38 = -qJD(5) * t58 - t134;
t37 = t144 * t138 - t131;
t36 = (t91 * t133 + t90 * t143) * t84;
t35 = (t87 * t143 - t91 * t75) * t84;
t34 = -0.2e1 * t82 * t117 - 0.2e1 * t113;
t33 = -0.2e1 * t80 * t117 + 0.2e1 * t113;
t32 = -t150 * t136 - t112;
t31 = 0.4e1 * t90 * t116 - t150 * t133;
t29 = 0.2e1 * t86 * t114 - 0.2e1 * t87 * t120;
t28 = 0.2e1 * t89 * t114 + 0.2e1 * t87 * t121;
t22 = -0.4e1 * t90 * t112 - 0.2e1 * t83 * t161;
t12 = -t86 * t119 + t24 * t89 + t164;
t9 = t37 * t89 + t38 * t86 + (-t57 * t89 + t58 * t86) * qJD(5);
t8 = -qJ(6) * t122 - t86 * t115 + t90 * t131 + t10;
t7 = (pkin(5) + t148) * t75 + t93;
t6 = (t43 * t141 - t13) * t87 + (qJD(3) * t100 - t14) * t90;
t5 = (-t43 * t140 + t12) * t87 + (qJD(3) * t25 + t15) * t90;
t4 = -t25 * t138 + t154 + (t12 - t164) * t89;
t2 = -0.2e1 * t100 * t13 + 0.2e1 * t12 * t25 + 0.2e1 * t16;
t1 = t105 * t133 + (t12 * t86 - t13 * t89 + (-t100 * t86 + t25 * t89) * qJD(5)) * t90;
t19 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t118, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t35, t95, -pkin(2) * t119 + t94, 0, 0, 0, 0, 0, 0, t95, t36, -t35 (t59 * t143 - t40 * t91) * t84 + t94, 0, 0, 0, 0, 0, 0, t5, t6, t1, t10 * t100 + t11 * t25 + t12 * t20 + t13 * t21 + t23 * t62 - t43 * t56, 0, 0, 0, 0, 0, 0, t5, t6, t1, t100 * t8 + t12 * t17 + t13 * t18 + t23 * t41 + t25 * t7 + t27 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t53, 0, t67, 0, 0, t87 * t129, t90 * t129, 0, 0, 0, 0, 0, t66, t53, t67, 0, -0.2e1 * t59 * t133 + 0.2e1 * t40 * t90, -0.2e1 * t40 * t87 - 0.2e1 * t59 * t75, 0.2e1 * t59 * t40, t33, t22, t29, t34, t28, t66, 0.2e1 * (-t62 * t140 + t11) * t87 + 0.2e1 * (qJD(3) * t20 - t62 * t138 - t56 * t89) * t90, 0.2e1 * (t62 * t141 + t10) * t87 + 0.2e1 * (-qJD(3) * t21 - t62 * t137 + t56 * t86) * t90, 0.2e1 * t106 * t133 + 0.2e1 * (t10 * t89 + t11 * t86 + (t20 * t89 + t21 * t86) * qJD(5)) * t90, -0.2e1 * t10 * t21 + 0.2e1 * t11 * t20 - 0.2e1 * t56 * t62, t33, t22, t29, t34, t28, t66, 0.2e1 * (-t41 * t140 + t7) * t87 + 0.2e1 * (qJD(3) * t17 - t41 * t138 + t27 * t89) * t90, 0.2e1 * (t41 * t141 + t8) * t87 + 0.2e1 * (-qJD(3) * t18 - t41 * t137 - t27 * t86) * t90, 0.2e1 * t107 * t133 + 0.2e1 * (t7 * t86 + t8 * t89 + (t17 * t89 + t18 * t86) * qJD(5)) * t90, 0.2e1 * t17 * t7 - 0.2e1 * t18 * t8 + 0.2e1 * t27 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, t23, -pkin(3) * t24 + t102, 0, 0, 0, 0, 0, 0, t14, t15, -t4 -(t105 * qJD(5) + t12 * t89 + t154) * t157 + t102, 0, 0, 0, 0, 0, 0, t14, t15, -t4, -t100 * t38 - t12 * t58 - t13 * t57 + t23 * t74 + t25 * t37 + t43 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t133, 0, -t125, t126, 0, 0, 0, -t75, t133, 0, 0, 0, t96, t125, -t126, t96 * pkin(8), -t32, t31, t44, t32, t46, 0, -t160 * t89 + t98 * t86, t160 * t86 + t98 * t89, -t3, -t56 * qJ(4) + t62 * qJD(4) - t157 * t3, -t32, t31, t44, t32, t46, 0, t110 * t86 + t37 * t87 - t58 * t75 - t97 * t89, t110 * t89 - t38 * t87 + t57 * t75 + t97 * t86 (-t57 * t133 - t38 * t90 - t7 + (-t58 * t90 - t18) * qJD(5)) * t89 + (t58 * t133 + t37 * t90 + t8 + (-t57 * t90 + t17) * qJD(5)) * t86, t17 * t37 + t18 * t38 + t27 * t74 + t41 * t70 + t57 * t8 - t58 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, t78, t69, t52, 0, t68, 0, 0, 0.2e1 * qJD(4) * t86 + 0.2e1 * t89 * t130, 0.2e1 * qJD(4) * t89 - 0.2e1 * t86 * t130, 0, t78, t69, t52, 0, t68, 0, 0, 0.2e1 * t74 * t137 + 0.2e1 * t70 * t86, -0.2e1 * t74 * t138 + 0.2e1 * t70 * t89, -0.2e1 * t9, -0.2e1 * t37 * t58 - 0.2e1 * t38 * t57 + 0.2e1 * t70 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, t125, 0, 0, 0, 0, 0, 0, t44, t46, 0, t3, 0, 0, 0, 0, 0, 0, t44, t46, 0, qJD(5) * t107 + t7 * t89 - t8 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0, t12 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, t45, t75, t11, t10, 0, 0, 0, 0, t47, 0, t45, t75 (0.2e1 * pkin(5) + t148) * t75 + t93, t8, -t47 * pkin(5), t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, 0, -t137, 0, t86 * t135, t89 * t135, 0, 0, 0, 0, -t138, 0, -t137, 0, t37, -t38, t127, t37 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, -t137, 0, 0, 0, 0, 0, 0, 0, 0, -t138, -t137, 0, -t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t47, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, -t138, 0, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t19;
