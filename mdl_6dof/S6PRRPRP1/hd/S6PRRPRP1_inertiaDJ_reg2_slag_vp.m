% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRP1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:26:35
% EndTime: 2019-03-08 21:26:42
% DurationCPUTime: 2.56s
% Computational Cost: add. (2663->239), mult. (6719->433), div. (0->0), fcn. (6553->10), ass. (0->144)
t150 = cos(pkin(11));
t93 = cos(qJ(3));
t125 = t150 * t93;
t86 = sin(pkin(11));
t90 = sin(qJ(3));
t161 = t86 * t90;
t67 = -t125 + t161;
t126 = t150 * t90;
t68 = t86 * t93 + t126;
t80 = -t93 * pkin(3) - pkin(2);
t106 = -t67 * pkin(4) + t68 * pkin(9) - t80;
t154 = -qJ(4) - pkin(8);
t124 = qJD(3) * t154;
t104 = t93 * qJD(4) + t90 * t124;
t105 = -t90 * qJD(4) + t93 * t124;
t96 = t150 * t104 + t86 * t105;
t174 = qJD(5) * t106 - t96;
t73 = t154 * t93;
t52 = -t150 * t73 + t154 * t161;
t89 = sin(qJ(5));
t92 = cos(qJ(5));
t22 = -t89 * t106 + t92 * t52;
t84 = t89 ^ 2;
t85 = t92 ^ 2;
t153 = t84 - t85;
t87 = sin(pkin(6));
t94 = cos(qJ(2));
t159 = t87 * t94;
t91 = sin(qJ(2));
t160 = t87 * t91;
t88 = cos(pkin(6));
t62 = -t90 * t160 + t88 * t93;
t63 = t93 * t160 + t88 * t90;
t38 = t150 * t63 + t86 * t62;
t108 = t89 * t159 - t92 * t38;
t109 = t92 * t159 + t89 * t38;
t149 = qJD(2) * t91;
t134 = t87 * t149;
t148 = qJD(2) * t94;
t133 = t87 * t148;
t50 = t62 * qJD(3) + t93 * t133;
t127 = t150 * t50;
t99 = t63 * qJD(3) + t90 * t133;
t98 = -t86 * t99 + t127;
t11 = t109 * qJD(5) - t89 * t134 - t92 * t98;
t12 = t108 * qJD(5) + t92 * t134 - t89 * t98;
t173 = (t108 * t92 - t109 * t89) * qJD(5) + t11 * t89 - t12 * t92;
t147 = qJD(3) * t90;
t139 = pkin(3) * t147;
t60 = t68 * qJD(3);
t135 = t86 * t147;
t61 = qJD(3) * t125 - t135;
t102 = t60 * pkin(4) - t61 * pkin(9) + t139;
t33 = t92 * t102;
t10 = -qJD(5) * t22 - t89 * t96 + t33;
t21 = -t92 * t106 - t89 * t52;
t140 = -t89 * t102 + t174 * t92;
t143 = qJD(5) * t89;
t9 = t52 * t143 + t140;
t172 = -t10 * t92 + t9 * t89 + (t21 * t89 - t22 * t92) * qJD(5);
t152 = qJ(6) * t68;
t15 = t67 * pkin(5) - t92 * t152 + t21;
t18 = -t89 * t152 + t22;
t168 = t60 * pkin(5);
t103 = t61 * qJ(6) + qJD(5) * t52 + t68 * qJD(6);
t144 = qJD(5) * t68;
t130 = qJ(6) * t144;
t95 = -t103 * t92 + t33 + (t130 + t174) * t89;
t7 = t95 + t168;
t8 = t103 * t89 + t92 * t130 + t140;
t171 = -t7 * t92 + t8 * t89 + (t15 * t89 - t18 * t92) * qJD(5);
t170 = t90 ^ 2;
t169 = 0.2e1 * qJD(5);
t167 = t92 * pkin(5);
t24 = t150 * t99 + t86 * t50;
t37 = -t150 * t62 + t86 * t63;
t166 = t37 * t24;
t35 = t86 * t104 - t150 * t105;
t51 = -t154 * t126 - t86 * t73;
t165 = t51 * t35;
t164 = t68 * t61;
t163 = t68 * t89;
t162 = t68 * t92;
t158 = t89 * t60;
t157 = t89 * t61;
t156 = t92 * t60;
t155 = t92 * t61;
t78 = t86 * pkin(3) + pkin(9);
t151 = qJ(6) + t78;
t146 = qJD(3) * t93;
t145 = qJD(3) * t94;
t82 = qJD(5) * t92;
t48 = 0.2e1 * t67 * t60;
t142 = -0.2e1 * pkin(2) * qJD(3);
t79 = -t150 * pkin(3) - pkin(4);
t141 = t79 * t169;
t138 = pkin(5) * t143;
t137 = t90 * t145;
t136 = t37 * t143;
t132 = t89 * t82;
t131 = t90 * t146;
t71 = t79 - t167;
t129 = -t71 + t167;
t128 = -0.4e1 * t89 * t162;
t123 = t87 ^ 2 * t91 * t148;
t66 = t68 ^ 2;
t122 = t66 * t132;
t120 = pkin(5) * t84 + t71 * t92;
t116 = -t21 * t92 - t22 * t89;
t114 = t24 * t51 + t37 * t35;
t113 = t108 * t89 + t109 * t92;
t111 = -t60 * t78 + t61 * t79;
t110 = t67 * t78 - t68 * t79;
t44 = t67 * t82 + t158;
t46 = t68 * t82 + t157;
t107 = t68 * t143 - t155;
t100 = t116 * qJD(5) - t10 * t89 - t9 * t92;
t6 = t113 * qJD(5) - t11 * t92 - t12 * t89;
t97 = t170 * t133 - t62 * t146 + t50 * t93;
t75 = -0.2e1 * t132;
t74 = 0.2e1 * t132;
t70 = -0.2e1 * t153 * qJD(5);
t65 = t151 * t92;
t64 = t151 * t89;
t54 = -t89 * qJD(6) - t151 * t82;
t53 = -t92 * qJD(6) + t151 * t143;
t42 = -t67 * t143 + t156;
t39 = (-t84 - t85) * t61;
t34 = pkin(5) * t163 + t51;
t28 = 0.2e1 * t85 * t164 - 0.2e1 * t122;
t27 = 0.2e1 * t84 * t164 + 0.2e1 * t122;
t26 = t144 * t153 - t89 * t155;
t25 = qJD(5) * t128 - t153 * t61;
t20 = t153 * t66 * t169 + t61 * t128;
t19 = t46 * pkin(5) + t35;
t17 = -0.2e1 * t68 * t158 - 0.2e1 * t46 * t67;
t16 = -0.2e1 * t107 * t67 + 0.2e1 * t68 * t156;
t14 = -t24 * t92 + t136;
t13 = t24 * t89 + t37 * t82;
t4 = -t109 * t60 + t12 * t67 + t24 * t163 + t46 * t37;
t3 = -t107 * t37 + t108 * t60 + t11 * t67 + t24 * t162;
t2 = 0.2e1 * t108 * t11 - 0.2e1 * t109 * t12 + 0.2e1 * t166;
t1 = t113 * t61 + t173 * t68;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t63 * t50 - 0.2e1 * t62 * t99 - 0.2e1 * t123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t38 * t98 - 0.2e1 * t123 + 0.2e1 * t166, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, -t133, 0, 0, 0, 0, 0, 0, 0, 0 (-t93 * t149 - t137) * t87 (-t93 * t145 + t90 * t149) * t87, t97, -pkin(2) * t134 + t97 * pkin(8), 0, 0, 0, 0, 0, 0 (t67 * t149 - t60 * t94) * t87 (t68 * t149 - t61 * t94) * t87, t24 * t68 + t37 * t61 - t38 * t60 - t98 * t67 (-t88 * t135 + t127) * t52 + t38 * t96 + (t86 * (-t91 * t146 - t90 * t148) * t52 + t80 * t149 - pkin(3) * t137) * t87 + t114, 0, 0, 0, 0, 0, 0, t4, t3, t1, -t10 * t109 + t108 * t9 - t11 * t22 + t12 * t21 + t114, 0, 0, 0, 0, 0, 0, t4, t3, t1, t108 * t8 - t109 * t7 - t11 * t18 + t12 * t15 + t37 * t19 + t24 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t131, 0.2e1 * (t93 ^ 2 - t170) * qJD(3), 0, -0.2e1 * t131, 0, 0, t90 * t142, t93 * t142, 0, 0, 0.2e1 * t164, -0.2e1 * t68 * t60 - 0.2e1 * t61 * t67, 0, t48, 0, 0, 0.2e1 * t67 * t139 + 0.2e1 * t80 * t60, 0.2e1 * t68 * t139 + 0.2e1 * t80 * t61, 0.2e1 * t35 * t68 + 0.2e1 * t51 * t61 - 0.2e1 * t52 * t60 - 0.2e1 * t96 * t67, 0.2e1 * t80 * t139 + 0.2e1 * t52 * t96 + 0.2e1 * t165, t28, t20, t16, t27, t17, t48, 0.2e1 * t10 * t67 + 0.2e1 * t35 * t163 + 0.2e1 * t21 * t60 + 0.2e1 * t46 * t51, -0.2e1 * t107 * t51 + 0.2e1 * t35 * t162 - 0.2e1 * t22 * t60 + 0.2e1 * t9 * t67, 0.2e1 * t116 * t61 + 0.2e1 * t172 * t68, 0.2e1 * t21 * t10 - 0.2e1 * t22 * t9 + 0.2e1 * t165, t28, t20, t16, t27, t17, t48, 0.2e1 * t15 * t60 + 0.2e1 * t19 * t163 + 0.2e1 * t34 * t46 + 0.2e1 * t7 * t67, -0.2e1 * t107 * t34 + 0.2e1 * t19 * t162 - 0.2e1 * t18 * t60 + 0.2e1 * t8 * t67, 0.2e1 * (-t15 * t92 - t18 * t89) * t61 + 0.2e1 * t171 * t68, 0.2e1 * t15 * t7 - 0.2e1 * t18 * t8 + 0.2e1 * t34 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t50, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t98, 0 (-t24 * t150 + t98 * t86) * pkin(3), 0, 0, 0, 0, 0, 0, t14, t13, t6, t24 * t79 + t6 * t78, 0, 0, 0, 0, 0, 0, t14, t13, t6, pkin(5) * t136 + t108 * t53 - t109 * t54 - t11 * t65 - t12 * t64 + t24 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, 0, -t147, 0, -pkin(8) * t146, pkin(8) * t147, 0, 0, 0, 0, t61, 0, -t60, 0, -t35, -t96 (-t150 * t61 - t60 * t86) * pkin(3) (-t35 * t150 + t96 * t86) * pkin(3), -t26, t25, t44, t26, t42, 0, -t35 * t92 + t111 * t89 + (-t110 * t92 + t51 * t89) * qJD(5), t35 * t89 + t111 * t92 + (t110 * t89 + t51 * t92) * qJD(5), t100, t100 * t78 + t35 * t79, -t26, t25, t44, t26, t42, 0, t71 * t157 - t19 * t92 + t54 * t67 - t64 * t60 + (t120 * t68 + t34 * t89) * qJD(5), t71 * t155 + t19 * t89 + t53 * t67 - t65 * t60 + (t129 * t163 + t34 * t92) * qJD(5) (-t54 * t68 + t61 * t64 - t8 + (-t65 * t68 - t15) * qJD(5)) * t92 + (t53 * t68 - t61 * t65 - t7 + (-t64 * t68 - t18) * qJD(5)) * t89, t34 * t138 + t15 * t54 - t18 * t53 + t19 * t71 - t7 * t64 - t8 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t70, 0, t75, 0, 0, t89 * t141, t92 * t141, 0, 0, t74, t70, 0, t75, 0, 0, -0.2e1 * t129 * t143, t120 * t169, -0.2e1 * t53 * t92 - 0.2e1 * t54 * t89 + 0.2e1 * (t64 * t92 - t65 * t89) * qJD(5), 0.2e1 * t71 * t138 - 0.2e1 * t65 * t53 - 0.2e1 * t64 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t61, 0, t139, 0, 0, 0, 0, 0, 0, t42, -t44, t39, -t172, 0, 0, 0, 0, 0, 0, t42, -t44, t39, -t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53 * t89 + t54 * t92 + (t64 * t89 + t65 * t92) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, t11, 0, 0, 0, 0, 0, 0, 0, 0, t12, t11, 0, t12 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, 0, -t46, t60, t10, t9, 0, 0, 0, 0, -t107, 0, -t46, t60, t95 + 0.2e1 * t168, t8, t107 * pkin(5), t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t143, 0, -t78 * t82, t78 * t143, 0, 0, 0, 0, t82, 0, -t143, 0, t54, t53, -pkin(5) * t82, t54 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t82, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t82, 0, -t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t107, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, t82, 0, t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
