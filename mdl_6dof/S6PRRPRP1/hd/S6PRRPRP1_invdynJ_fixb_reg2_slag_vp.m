% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:26:41
% EndTime: 2019-03-08 21:26:55
% DurationCPUTime: 7.98s
% Computational Cost: add. (7892->615), mult. (18723->793), div. (0->0), fcn. (14784->14), ass. (0->308)
t227 = sin(qJ(2));
t221 = sin(pkin(6));
t326 = qJD(1) * t221;
t300 = t227 * t326;
t226 = sin(qJ(3));
t321 = qJD(3) * t226;
t414 = -pkin(3) * t321 + t300;
t219 = sin(pkin(11));
t229 = cos(qJ(3));
t368 = cos(pkin(11));
t281 = t368 * t226;
t180 = t219 * t229 + t281;
t171 = t180 * qJD(3);
t280 = t368 * t229;
t344 = t219 * t226;
t254 = t280 - t344;
t174 = t254 * qJD(3);
t424 = pkin(4) * t171 - pkin(9) * t174 - t414;
t390 = qJ(4) + pkin(8);
t286 = qJD(3) * t390;
t163 = t229 * qJD(4) - t226 * t286;
t247 = -t226 * qJD(4) - t229 * t286;
t230 = cos(qJ(2));
t295 = t230 * t326;
t419 = t163 * t368 + t219 * t247 - t254 * t295;
t318 = qJD(1) * qJD(2);
t292 = t230 * t318;
t366 = qJDD(2) * pkin(8);
t154 = t366 + (qJDD(1) * t227 + t292) * t221;
t222 = cos(pkin(6));
t325 = qJD(1) * t222;
t423 = qJD(3) * t325 + t154;
t340 = t221 * t227;
t175 = t222 * t229 - t226 * t340;
t369 = cos(pkin(10));
t284 = t369 * t227;
t220 = sin(pkin(10));
t341 = t220 * t230;
t166 = t222 * t284 + t341;
t216 = qJ(3) + pkin(11);
t210 = sin(t216);
t211 = cos(t216);
t285 = t221 * t369;
t117 = t166 * t210 + t211 * t285;
t283 = t369 * t230;
t342 = t220 * t227;
t168 = -t222 * t342 + t283;
t343 = t220 * t221;
t119 = t168 * t210 - t211 * t343;
t156 = t210 * t340 - t222 * t211;
t249 = g(1) * t119 + g(2) * t117 + g(3) * t156;
t393 = g(3) * t221;
t172 = t180 * qJD(2);
t225 = sin(qJ(5));
t228 = cos(qJ(5));
t141 = qJD(3) * t225 + t172 * t228;
t315 = qJD(3) * qJD(5);
t320 = qJD(5) * t225;
t199 = qJD(2) * t280;
t317 = qJD(2) * qJD(3);
t290 = t226 * t317;
t242 = qJDD(2) * t180 - t219 * t290;
t416 = qJD(3) * t199 + t242;
t250 = t225 * qJDD(3) - t172 * t320 + (t416 + t315) * t228;
t388 = qJ(6) * t250;
t313 = t226 * qJDD(2);
t267 = -qJDD(2) * t280 + t219 * t313;
t116 = qJD(2) * t171 + t267;
t112 = qJDD(5) + t116;
t401 = pkin(5) * t112;
t314 = qJDD(1) * t222;
t198 = t229 * t314;
t316 = qJD(2) * qJD(4);
t185 = qJD(2) * pkin(8) + t300;
t275 = qJ(4) * qJD(2) + t185;
t417 = t229 * t275;
t57 = qJDD(3) * pkin(3) + t198 - qJD(3) * t417 + (-qJ(4) * qJDD(2) - t316 - t423) * t226;
t312 = t229 * qJDD(2);
t302 = t226 * t314 + t229 * t423;
t76 = -t185 * t321 + t302;
t58 = t229 * t316 + (-t290 + t312) * qJ(4) + t76;
t23 = t219 * t57 + t368 * t58;
t21 = qJDD(3) * pkin(9) + t23;
t200 = t229 * t325;
t132 = -t226 * t275 + t200;
t127 = qJD(3) * pkin(3) + t132;
t294 = t226 * t325;
t133 = t294 + t417;
t282 = t368 * t133;
t70 = t219 * t127 + t282;
t63 = qJD(3) * pkin(9) + t70;
t209 = t229 * pkin(3) + pkin(2);
t161 = -qJD(2) * t209 + qJD(4) - t295;
t323 = qJD(2) * t226;
t169 = t219 * t323 - t199;
t83 = t169 * pkin(4) - t172 * pkin(9) + t161;
t39 = t225 * t83 + t228 * t63;
t338 = t221 * t230;
t288 = qJDD(1) * t338;
t293 = t227 * t318;
t268 = t221 * t293 - t288;
t367 = qJDD(2) * pkin(2);
t153 = t268 - t367;
t412 = pkin(3) * t290 + qJDD(4);
t46 = -pkin(3) * t312 + t116 * pkin(4) - pkin(9) * t416 + t153 + t412;
t7 = -qJD(5) * t39 - t225 * t21 + t228 * t46;
t2 = -qJD(6) * t141 - t388 + t401 + t7;
t162 = qJD(5) + t169;
t139 = -t228 * qJD(3) + t172 * t225;
t27 = -qJ(6) * t139 + t39;
t384 = t162 * t27;
t422 = t2 + t384;
t403 = pkin(3) * t219;
t205 = pkin(9) + t403;
t332 = qJ(6) + t205;
t278 = qJD(5) * t332;
t354 = t169 * t225;
t123 = t219 * t133;
t74 = t132 * t368 - t123;
t310 = pkin(3) * t323;
t98 = pkin(4) * t172 + pkin(9) * t169 + t310;
t41 = t225 * t98 + t228 * t74;
t421 = -qJ(6) * t354 + t228 * qJD(6) - t225 * t278 - t41;
t353 = t169 * t228;
t40 = -t225 * t74 + t228 * t98;
t374 = -pkin(5) * t172 - qJ(6) * t353 - t225 * qJD(6) - t228 * t278 - t40;
t420 = t205 * t320 + t41;
t370 = t219 * t163 - t180 * t295 - t368 * t247;
t277 = t162 * t225;
t418 = t141 * t277;
t165 = -t222 * t283 + t342;
t167 = t222 * t341 + t284;
t271 = g(1) * t167 + g(2) * t165;
t246 = -g(3) * t338 + t271;
t243 = t246 * t210;
t114 = -pkin(4) * t254 - pkin(9) * t180 - t209;
t189 = t390 * t229;
t137 = t189 * t368 - t344 * t390;
t128 = t228 * t137;
t67 = t225 * t114 + t128;
t415 = -t419 * t225 + t228 * t424;
t319 = qJD(5) * t228;
t413 = t114 * t319 + t225 * t424 + t419 * t228;
t234 = -t228 * qJDD(3) + t225 * t416;
t65 = qJD(5) * t141 + t234;
t411 = pkin(5) * t65 + qJDD(6);
t118 = t166 * t211 - t210 * t285;
t120 = t168 * t211 + t210 * t343;
t157 = t210 * t222 + t211 * t340;
t333 = t228 * t230;
t305 = t221 * t333;
t410 = -g(3) * (-t157 * t225 - t305) - g(2) * (-t118 * t225 + t165 * t228) - g(1) * (-t120 * t225 + t167 * t228);
t231 = qJD(3) ^ 2;
t262 = -t153 + t271;
t409 = -pkin(8) * t231 + t221 * (-g(3) * t230 + t293) + t262 + t367;
t408 = t141 ^ 2;
t407 = t172 ^ 2;
t402 = pkin(3) * t226;
t182 = t209 * t338;
t394 = g(3) * t182;
t392 = t139 * pkin(5);
t391 = t228 * pkin(5);
t38 = -t225 * t63 + t228 * t83;
t26 = -qJ(6) * t141 + t38;
t16 = pkin(5) * t162 + t26;
t389 = -t26 + t16;
t22 = -t219 * t58 + t368 * t57;
t387 = qJ(6) * t65;
t386 = qJD(2) * pkin(2);
t365 = qJDD(3) * pkin(4);
t20 = -t365 - t22;
t13 = t20 + t411;
t385 = t13 * t225;
t383 = t162 * t38;
t382 = t162 * t39;
t381 = t20 * t225;
t380 = t250 * t225;
t379 = t65 * t228;
t378 = -t139 * t319 - t225 * t65;
t265 = -qJ(6) * t174 - qJD(6) * t180;
t377 = pkin(5) * t171 + t265 * t228 + (-t128 + (qJ(6) * t180 - t114) * t225) * qJD(5) + t415;
t297 = t180 * t319;
t376 = -qJ(6) * t297 + (-qJD(5) * t137 + t265) * t225 + t413;
t373 = -t137 * t320 + t413;
t372 = -qJD(5) * t67 + t415;
t351 = t174 * t225;
t256 = t297 + t351;
t371 = pkin(5) * t256 + t370;
t364 = t139 * t162;
t363 = t139 * t169;
t362 = t139 * t172;
t361 = t141 * t139;
t360 = t141 * t162;
t359 = t141 * t172;
t358 = t141 * t225;
t357 = t162 * t172;
t356 = t166 * t225;
t355 = t168 * t225;
t352 = t172 * t169;
t350 = t174 * t228;
t349 = t180 * t225;
t348 = t180 * t228;
t347 = t185 * t226;
t346 = t211 * t225;
t345 = t211 * t228;
t339 = t221 * t229;
t336 = t390 * t227;
t335 = t225 * t112;
t334 = t225 * t230;
t105 = t228 * t112;
t331 = qJDD(1) - g(3);
t330 = -t165 * t209 + t166 * t390;
t329 = -t167 * t209 + t168 * t390;
t217 = t226 ^ 2;
t218 = t229 ^ 2;
t328 = t217 - t218;
t327 = t217 + t218;
t186 = -t295 - t386;
t324 = qJD(2) * t186;
t322 = qJD(2) * t227;
t279 = qJD(6) + t392;
t69 = t127 * t368 - t123;
t62 = -qJD(3) * pkin(4) - t69;
t48 = t279 + t62;
t308 = t48 * t320;
t307 = t221 * t334;
t232 = qJD(2) ^ 2;
t304 = t226 * t232 * t229;
t303 = t249 * t225;
t301 = t368 * pkin(3);
t299 = t221 * t322;
t298 = qJD(2) * t338;
t289 = t230 * t317;
t6 = t228 * t21 + t225 * t46 + t83 * t319 - t63 * t320;
t66 = t228 * t114 - t137 * t225;
t72 = t132 * t219 + t282;
t136 = t189 * t219 + t390 * t281;
t276 = t162 * t228;
t274 = t229 * t290;
t273 = t220 * pkin(3) * t339 - t168 * t402;
t206 = -t301 - pkin(4);
t272 = pkin(4) * t211 + pkin(9) * t210;
t270 = g(1) * t168 + g(2) * t166;
t3 = -qJD(6) * t139 - t387 + t6;
t269 = -t16 * t162 + t3;
t208 = pkin(4) + t391;
t223 = -qJ(6) - pkin(9);
t266 = t208 * t211 - t210 * t223;
t264 = t175 * pkin(3);
t263 = qJDD(2) * t230 - t227 * t232;
t259 = t105 + (-t320 - t354) * t162;
t176 = t222 * t226 + t227 * t339;
t104 = t219 * t175 + t176 * t368;
t84 = -t104 * t225 - t305;
t257 = -t104 * t228 + t307;
t148 = t185 * t229 + t294;
t255 = -t180 * t320 + t350;
t253 = -g(1) * (t167 * t346 + t168 * t228) - g(2) * (t165 * t346 + t166 * t228) - (-t211 * t334 + t227 * t228) * t393;
t252 = -g(1) * (-t167 * t345 + t355) - g(2) * (-t165 * t345 + t356) - (t211 * t333 + t225 * t227) * t393;
t251 = -t112 * t205 + t162 * t62;
t248 = g(1) * t120 + g(2) * t118 + g(3) * t157;
t245 = t249 + t22;
t244 = (-t166 * t226 - t229 * t285) * pkin(3);
t241 = -g(1) * (-t120 * t228 - t167 * t225) - g(2) * (-t118 * t228 - t165 * t225) - g(3) * (-t157 * t228 + t307) - t6;
t239 = -pkin(8) * qJDD(3) + (t186 + t295 - t386) * qJD(3);
t115 = -qJDD(2) * t209 + t268 + t412;
t147 = t200 - t347;
t77 = -t148 * qJD(3) - t226 * t154 + t198;
t236 = -t77 * t226 + t76 * t229 + (-t147 * t229 - t148 * t226) * qJD(3) - t270;
t235 = t7 + t410;
t233 = t172 * t319 + t225 * t315 + t234;
t187 = t206 - t391;
t178 = t332 * t228;
t177 = t332 * t225;
t164 = t169 ^ 2;
t138 = t139 ^ 2;
t131 = -qJD(3) * t176 - t226 * t298;
t130 = qJD(3) * t175 + t229 * t298;
t103 = -t175 * t368 + t176 * t219;
t95 = pkin(5) * t349 + t136;
t73 = t130 * t368 + t219 * t131;
t71 = t130 * t219 - t131 * t368;
t60 = -t138 + t408;
t51 = -t112 * t254 + t162 * t171;
t50 = -pkin(5) * t354 + t72;
t49 = -qJ(6) * t349 + t67;
t47 = -pkin(5) * t254 - qJ(6) * t348 + t66;
t43 = -t233 + t360;
t42 = t250 + t364;
t37 = qJD(5) * t257 - t225 * t73 + t228 * t299;
t36 = qJD(5) * t84 + t225 * t299 + t228 * t73;
t34 = -t162 ^ 2 * t228 - t335 - t359;
t33 = t162 * t276 + t335 - t359;
t32 = t259 + t362;
t31 = t259 - t362;
t30 = t139 * t277 - t379;
t29 = t141 * t276 + t380;
t18 = t139 * t256 + t349 * t65;
t17 = t141 * t255 + t250 * t348;
t12 = -t139 * t171 - t162 * t256 - t180 * t335 + t254 * t65;
t11 = t105 * t180 + t141 * t171 + t162 * t255 - t250 * t254;
t10 = (t250 - t363) * t228 - t418 + t378;
t9 = (-t250 - t363) * t228 + t418 + t378;
t8 = (-t139 * t228 - t358) * t174 + (-t380 - t379 + (t139 * t225 - t141 * t228) * qJD(5)) * t180;
t5 = t103 * t65 + t112 * t84 + t139 * t71 + t162 * t37;
t4 = t103 * t250 + t112 * t257 + t141 * t71 - t162 * t36;
t1 = -t139 * t36 - t141 * t37 - t250 * t84 + t257 * t65;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t331, 0, 0, 0, 0, 0, 0, t263 * t221 (-qJDD(2) * t227 - t230 * t232) * t221, 0, -g(3) + (t222 ^ 2 + (t227 ^ 2 + t230 ^ 2) * t221 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t131 * qJD(3) + t175 * qJDD(3) + (-t226 * t289 + t229 * t263) * t221, -t130 * qJD(3) - t176 * qJDD(3) + (-t226 * t263 - t229 * t289) * t221 (-t175 * t226 + t176 * t229) * qJDD(2) + (t130 * t229 - t131 * t226 + (-t175 * t229 - t176 * t226) * qJD(3)) * qJD(2), t130 * t148 + t131 * t147 + t175 * t77 + t176 * t76 - g(3) + (-t153 * t230 + t186 * t322) * t221, 0, 0, 0, 0, 0, 0, -t71 * qJD(3) - t103 * qJDD(3) + (-t116 * t230 + t169 * t322) * t221, -t73 * qJD(3) - t104 * qJDD(3) + (t172 * t322 - t230 * t416) * t221, t103 * t416 - t104 * t116 - t73 * t169 + t71 * t172, -t103 * t22 + t104 * t23 - t69 * t71 + t70 * t73 - g(3) + (-t115 * t230 + t161 * t322) * t221, 0, 0, 0, 0, 0, 0, t5, t4, t1, t103 * t20 - t257 * t6 + t36 * t39 + t37 * t38 + t62 * t71 + t7 * t84 - g(3), 0, 0, 0, 0, 0, 0, t5, t4, t1, t103 * t13 + t16 * t37 + t2 * t84 - t257 * t3 + t27 * t36 + t48 * t71 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t246 + t288, -t331 * t340 + t270, 0, 0, qJDD(2) * t217 + 0.2e1 * t274, 0.2e1 * t226 * t312 - 0.2e1 * t317 * t328, qJDD(3) * t226 + t229 * t231, qJDD(2) * t218 - 0.2e1 * t274, qJDD(3) * t229 - t226 * t231, 0, t239 * t226 + t229 * t409, -t226 * t409 + t239 * t229, t327 * t366 + (-g(3) * t227 - t292 * t327) * t221 + t236, t262 * pkin(2) + t236 * pkin(8) + (-g(3) * (pkin(2) * t230 + pkin(8) * t227) + (-t186 * t227 + (t147 * t226 - t148 * t229) * t230) * qJD(1)) * t221, t172 * t174 + t180 * t416, -t180 * t116 - t174 * t169 - t172 * t171 + t254 * t416, qJD(3) * t174 + qJDD(3) * t180, -t116 * t254 + t169 * t171, -qJD(3) * t171 + qJDD(3) * t254, 0, -t169 * t300 - qJDD(3) * t136 - t115 * t254 - t116 * t209 + t161 * t171 + t246 * t211 + (t169 * t402 - t370) * qJD(3), -qJD(3) * t419 - t137 * qJDD(3) + t115 * t180 + t161 * t174 - t172 * t414 - t209 * t416 - t243, -g(3) * t340 - t137 * t116 + t136 * t416 - t169 * t419 - t70 * t171 + t172 * t370 - t69 * t174 - t22 * t180 + t23 * t254 - t270, t23 * t137 - t22 * t136 - t115 * t209 - g(1) * t329 - g(2) * t330 - g(3) * (t221 * t336 + t182) + t419 * t70 - t370 * t69 - t414 * t161, t17, t8, t11, t18, t12, t51, t62 * t351 + t112 * t66 + t136 * t65 + t171 * t38 - t254 * t7 + (t319 * t62 + t381) * t180 + t372 * t162 + t370 * t139 + t252, t62 * t350 - t112 * t67 + t136 * t250 - t171 * t39 + t254 * t6 + (t20 * t228 - t320 * t62) * t180 - t373 * t162 + t370 * t141 + t253, -t250 * t66 - t65 * t67 + (-t225 * t39 - t228 * t38) * t174 - t372 * t141 - t373 * t139 + t243 + (-t225 * t6 - t228 * t7 + (t225 * t38 - t228 * t39) * qJD(5)) * t180, t6 * t67 + t7 * t66 + t20 * t136 - g(1) * (-t167 * t272 + t329) - g(2) * (-t165 * t272 + t330) - t394 + t370 * t62 + t373 * t39 + t372 * t38 - (t230 * t272 + t336) * t393, t17, t8, t11, t18, t12, t51, t48 * t351 + t112 * t47 + t16 * t171 - t254 * t2 + t65 * t95 + (t319 * t48 + t385) * t180 + t377 * t162 + t371 * t139 + t252, t48 * t350 - t112 * t49 - t171 * t27 + t254 * t3 + t250 * t95 + (t13 * t228 - t308) * t180 - t376 * t162 + t371 * t141 + t253, -t47 * t250 - t49 * t65 + (-t16 * t228 - t225 * t27) * t174 - t377 * t141 - t376 * t139 + t243 + (-t2 * t228 - t225 * t3 + (t16 * t225 - t228 * t27) * qJD(5)) * t180, t3 * t49 + t2 * t47 + t13 * t95 - g(1) * (pkin(5) * t355 - t167 * t266 + t329) - g(2) * (pkin(5) * t356 - t165 * t266 + t330) - t394 + t371 * t48 + t376 * t27 + t377 * t16 - (t266 * t230 + (pkin(5) * t225 + t390) * t227) * t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304, t328 * t232, t313, t304, t312, qJDD(3), -g(3) * t175 + t198 + (-g(1) * t220 + g(2) * t369) * t339 + (-t154 + t270 - t324) * t226, -t229 * t324 - g(1) * (-t168 * t229 - t226 * t343) - g(2) * (-t166 * t229 + t226 * t285) + g(3) * t176 + (t147 + t347) * qJD(3) - t302, 0, 0, t352, -t164 + t407 (t199 + t169) * qJD(3) + t242, -t352, -t267, qJDD(3), t72 * qJD(3) - t161 * t172 + (qJDD(3) * t368 - t169 * t323) * pkin(3) + t245, qJD(3) * t74 + t161 * t169 + (-qJDD(3) * t219 - t172 * t323) * pkin(3) + t248 - t23, -t116 * t403 - t416 * t301 - (-t70 + t72) * t172 + (-t69 + t74) * t169, -g(1) * t273 - g(2) * t244 - g(3) * t264 - t161 * t310 + t22 * t301 + t23 * t403 + t69 * t72 - t70 * t74, t29, t10, t33, t30, t32, -t357, -t139 * t72 - t162 * t40 - t172 * t38 + t206 * t65 + t251 * t225 + (-qJD(5) * t162 * t205 - t20 + t249) * t228, -t141 * t72 + t162 * t420 + t172 * t39 + t206 * t250 + t251 * t228 - t303 + t381, t139 * t41 + t141 * t40 + (-t169 * t38 - t205 * t65 + t6 + (t141 * t205 - t38) * qJD(5)) * t228 + (-t169 * t39 + t205 * t250 - t7 + (t139 * t205 - t39) * qJD(5)) * t225 - t248, t20 * t206 - t38 * t40 - t62 * t72 - g(1) * (-pkin(4) * t119 + pkin(9) * t120 + t273) - g(2) * (-t117 * pkin(4) + t118 * pkin(9) + t244) - g(3) * (-pkin(4) * t156 + pkin(9) * t157 + t264) - t420 * t39 + (-t7 * t225 + t6 * t228 - t319 * t38) * t205, t29, t10, t33, t30, t32, -t357, -t112 * t177 - t139 * t50 - t16 * t172 + t187 * t65 + t374 * t162 + (t169 * t48 + (t48 + t392) * qJD(5)) * t225 + (-t13 + t249) * t228, t48 * t353 - t112 * t178 + t385 - t141 * t50 + t172 * t27 + t187 * t250 - t421 * t162 + (pkin(5) * t358 + t228 * t48) * qJD(5) - t303, -t139 * t421 - t374 * t141 + t177 * t250 - t178 * t65 - t225 * t422 + t269 * t228 - t248, t3 * t178 - t2 * t177 + t13 * t187 + pkin(5) * t308 - t48 * t50 - g(1) * (-t119 * t208 - t120 * t223 + t273) - g(2) * (-t117 * t208 - t118 * t223 + t244) - g(3) * (-t156 * t208 - t157 * t223 + t264) + t421 * t27 + t374 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t172 * qJD(3) + t267 (t199 - t169) * qJD(3) + t242, -t164 - t407, t169 * t70 + t172 * t69 + t115 - t246, 0, 0, 0, 0, 0, 0, t31, t34, t9, -t172 * t62 + (t7 + t382) * t228 + (t6 - t383) * t225 - t246, 0, 0, 0, 0, 0, 0, t31, t34, t9, -t172 * t48 + t269 * t225 + t228 * t422 - t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t361, t60, t42, -t361, t43, t112, -t141 * t62 + t235 + t382, t139 * t62 + t241 + t383, 0, 0, t361, t60, t42, -t361, t43, t112, 0.2e1 * t401 - t388 + t384 + (-t279 - t48) * t141 + t235, -pkin(5) * t408 + t387 + t162 * t26 + (qJD(6) + t48) * t139 + t241, -pkin(5) * t250 - t139 * t389, t389 * t27 + (-t48 * t141 + t2 + t410) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233 + t360, t250 - t364, -t138 - t408, t139 * t27 + t141 * t16 - t245 - t365 + t411;];
tau_reg  = t14;
