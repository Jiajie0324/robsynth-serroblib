% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPRP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:26:42
% EndTime: 2019-03-08 21:26:53
% DurationCPUTime: 5.61s
% Computational Cost: add. (6834->399), mult. (15175->615), div. (0->0), fcn. (17319->10), ass. (0->329)
t299 = sin(qJ(3));
t478 = -qJ(4) - pkin(8);
t280 = t478 * t299;
t302 = cos(qJ(3));
t281 = t478 * t302;
t296 = sin(pkin(11));
t468 = cos(pkin(11));
t225 = -t468 * t280 - t281 * t296;
t301 = cos(qJ(5));
t503 = t225 * t301;
t505 = t503 / 0.2e1;
t297 = sin(pkin(6));
t300 = sin(qJ(2));
t439 = t297 * t300;
t469 = cos(pkin(6));
t259 = t299 * t439 - t302 * t469;
t260 = t299 * t469 + t302 * t439;
t174 = t468 * t259 + t260 * t296;
t504 = t174 / 0.2e1;
t366 = t504 - t174 / 0.2e1;
t298 = sin(qJ(5));
t275 = t468 * t281;
t441 = t296 * t280;
t498 = -t275 + t441;
t453 = t498 * t298;
t452 = t498 * t301;
t364 = t468 * t299;
t440 = t296 * t302;
t270 = t364 + t440;
t197 = t298 * t270;
t363 = 0.2e1 * t301 * t197;
t328 = -t296 * t299 + t302 * t468;
t303 = cos(qJ(2));
t438 = t297 * t303;
t231 = t328 * t438;
t436 = t298 * t231;
t183 = t301 * t439 - t436;
t488 = t183 / 0.2e1;
t502 = t296 / 0.2e1;
t480 = t328 * pkin(5);
t292 = -pkin(3) * t302 - pkin(2);
t192 = -pkin(4) * t328 - pkin(9) * t270 + t292;
t111 = -t301 * t192 + t453;
t443 = t270 * t301;
t96 = -qJ(6) * t443 - t111;
t83 = t96 - t480;
t501 = -t83 + t96;
t239 = t468 * t260;
t442 = t296 * t259;
t500 = t239 - t442;
t266 = t328 ^ 2;
t267 = t270 ^ 2;
t499 = -t267 - t266;
t483 = t298 / 0.2e1;
t94 = t174 * t483 + t298 * t504;
t294 = t298 ^ 2;
t295 = t301 ^ 2;
t285 = t294 + t295;
t399 = t285 * qJD(3);
t497 = -t83 / 0.2e1;
t479 = t299 * pkin(3);
t200 = pkin(4) * t270 - pkin(9) * t328 + t479;
t182 = t301 * t200;
t199 = t301 * t328;
t437 = t225 * t298;
t84 = pkin(5) * t270 - qJ(6) * t199 + t182 + t437;
t496 = t84 / 0.2e1;
t495 = t96 / 0.2e1;
t149 = -t298 * t438 + t301 * t500;
t494 = t149 / 0.2e1;
t493 = t500 / 0.2e1;
t290 = pkin(3) * t296 + pkin(9);
t430 = qJ(6) + t290;
t263 = t430 * t301;
t487 = -t263 / 0.2e1;
t486 = -t270 / 0.2e1;
t485 = t270 / 0.2e1;
t484 = -t295 / 0.2e1;
t482 = -t301 / 0.2e1;
t481 = pkin(5) * t298;
t112 = t192 * t298 + t452;
t97 = -qJ(6) * t197 + t112;
t471 = t97 * t301;
t473 = t83 * t298;
t477 = -t473 / 0.2e1 + t471 / 0.2e1;
t476 = pkin(5) * qJD(5);
t391 = t495 + t497;
t392 = -t480 / 0.2e1;
t339 = t392 - t391;
t8 = t339 * t301;
t475 = qJD(2) * t8;
t474 = qJD(3) * pkin(3);
t472 = t84 * t301;
t194 = t298 * t328;
t181 = t298 * t200;
t429 = -t181 + t503;
t98 = -qJ(6) * t194 - t429;
t470 = t98 * t298;
t11 = t501 * t197;
t467 = qJD(2) * t11;
t291 = -pkin(3) * t468 - pkin(4);
t277 = -t301 * pkin(5) + t291;
t444 = t263 * t301;
t261 = t430 * t298;
t447 = t261 * t298;
t309 = -(-t444 / 0.2e1 - t447 / 0.2e1) * t328 + t277 * t485;
t338 = -t472 / 0.2e1 - t470 / 0.2e1;
t22 = t309 + t338;
t466 = qJD(2) * t22;
t461 = t149 * t301;
t136 = t461 / 0.2e1;
t376 = -t461 / 0.2e1;
t75 = t136 + t376;
t465 = qJD(4) * t75;
t148 = t298 * t500 + t301 * t438;
t464 = t148 * t328;
t463 = t148 * t298;
t462 = t149 * t328;
t163 = pkin(5) * t197 + t225;
t460 = t163 * t298;
t230 = t270 * t438;
t458 = t174 * t230;
t457 = t174 * t270;
t456 = t500 * t328;
t455 = t183 * t301;
t389 = t298 * t439;
t435 = t301 * t231;
t184 = t389 + t435;
t454 = t184 * t298;
t450 = t230 * t298;
t449 = t230 * t301;
t26 = (t500 - t461 - t463) * t174;
t448 = t26 * qJD(1);
t446 = t261 * t301;
t445 = t263 * t298;
t33 = -t148 * t183 + t149 * t184 + t458;
t434 = t33 * qJD(1);
t358 = t366 * t328;
t38 = (-t500 / 0.2e1 + t493) * t270 - t358;
t433 = t38 * qJD(2);
t63 = -t297 ^ 2 * t300 * t303 + t231 * t500 + t458;
t431 = t63 * qJD(1);
t427 = t364 / 0.2e1 + t440 / 0.2e1;
t286 = t295 - t294;
t397 = t267 - t266;
t153 = t397 * t298;
t426 = qJD(2) * t153;
t154 = t499 * t298;
t425 = qJD(2) * t154;
t155 = t397 * t301;
t424 = qJD(2) * t155;
t204 = t499 * t301;
t423 = qJD(2) * t204;
t422 = qJD(2) * t328;
t421 = qJD(2) * t270;
t420 = qJD(2) * t300;
t419 = qJD(2) * t301;
t418 = qJD(2) * t302;
t417 = qJD(3) * t298;
t416 = qJD(3) * t299;
t415 = qJD(3) * t301;
t414 = qJD(3) * t302;
t413 = qJD(3) * t303;
t412 = qJD(4) * t301;
t411 = qJD(5) * t149;
t410 = qJD(5) * t298;
t409 = qJD(5) * t301;
t359 = t270 * t484 + t294 * t486;
t152 = -t427 + t359;
t408 = t152 * qJD(2);
t387 = -t468 / 0.2e1;
t323 = t270 * t387 + t328 * t502;
t166 = (-t299 / 0.2e1 + t323) * pkin(3);
t407 = t166 * qJD(2);
t406 = t194 * qJD(2);
t405 = t197 * qJD(2);
t404 = t199 * qJD(2);
t257 = t294 * t328;
t258 = t295 * t328;
t201 = -t257 - t258;
t403 = t201 * qJD(2);
t202 = t285 * t267;
t402 = t202 * qJD(2);
t401 = t499 * qJD(2);
t400 = t427 * qJD(2);
t287 = -t299 ^ 2 + t302 ^ 2;
t398 = t287 * qJD(2);
t396 = pkin(5) * t443;
t395 = pkin(2) * t299 * qJD(2);
t394 = pkin(2) * t418;
t393 = pkin(5) * t410;
t388 = t299 * t438;
t386 = t328 * t421;
t385 = t295 * t421;
t384 = t298 * t415;
t383 = t270 * t410;
t382 = t270 * t409;
t381 = t328 * t270 * qJD(3);
t380 = qJD(2) * t438;
t379 = t298 * t409;
t378 = t299 * t418;
t377 = t270 * t419;
t375 = t457 / 0.2e1;
t373 = -t443 / 0.2e1;
t372 = t443 / 0.2e1;
t371 = t439 / 0.2e1;
t369 = -t436 / 0.2e1;
t368 = -t197 / 0.2e1;
t367 = -t435 / 0.2e1;
t365 = -t181 / 0.2e1 + t505;
t362 = t298 * t392;
t361 = -qJD(5) + t422;
t360 = t174 * t372;
t92 = t366 * t298;
t357 = qJD(3) * t363;
t356 = t239 / 0.2e1 - t442 / 0.2e1;
t162 = pkin(5) * t194 + t498;
t304 = -t477 * t174 - t148 * t84 / 0.2e1 + t98 * t494 + t163 * t493 + t162 * t504;
t313 = t261 * t488 + t184 * t487 - t230 * t277 / 0.2e1;
t2 = t304 + t313;
t7 = t162 * t163 + t83 * t84 + t97 * t98;
t355 = t2 * qJD(1) + t7 * qJD(2);
t354 = t97 * t298 + t83 * t301;
t12 = t163 * t396 + t501 * t97;
t3 = -t391 * t149 + (t174 * t373 + t488) * pkin(5);
t353 = -qJD(1) * t3 + qJD(2) * t12;
t10 = (t470 + t472) * t270 + t354 * t328;
t337 = t148 * t482 + t149 * t483;
t320 = t337 * t328;
t335 = t183 * t483 + t184 * t482;
t36 = -t320 + t335;
t352 = t36 * qJD(1) - t10 * qJD(2);
t13 = t339 * t298;
t351 = -qJD(1) * t75 + qJD(2) * t13;
t307 = t366 * t498;
t324 = t230 * t387 + t231 * t502;
t17 = (t388 / 0.2e1 + t324) * pkin(3) + t307;
t67 = t292 * t479;
t350 = -t17 * qJD(1) + t67 * qJD(2);
t23 = t163 * t270 - (-t471 + t473) * t328;
t336 = t376 - t463 / 0.2e1;
t310 = -t328 * t336 + t375;
t334 = -t455 / 0.2e1 - t454 / 0.2e1;
t25 = t310 + t334;
t349 = -qJD(1) * t25 - qJD(2) * t23;
t317 = t485 * t500 - t358;
t306 = t148 * t486 + t298 * t317;
t27 = t449 / 0.2e1 + t306;
t31 = (-t111 + t453) * t270 - t182 * t328;
t348 = t27 * qJD(1) + t31 * qJD(2);
t305 = t149 * t486 + t301 * t317;
t30 = -t450 / 0.2e1 + t305;
t32 = (-t112 + t452) * t270 - (t429 - t503) * t328;
t347 = t30 * qJD(1) + t32 * qJD(2);
t34 = t354 * t270;
t311 = t427 * t438;
t40 = t270 * t337 + t311;
t346 = -qJD(1) * t40 - qJD(2) * t34;
t345 = t38 * qJD(1);
t332 = t371 - t457 / 0.2e1;
t43 = t369 - t462 / 0.2e1 + t332 * t301;
t66 = t112 * t328 + t225 * t443;
t344 = qJD(1) * t43 - qJD(2) * t66;
t44 = t367 + t464 / 0.2e1 - t332 * t298;
t65 = -t111 * t328 - t197 * t225;
t343 = -qJD(1) * t44 + qJD(2) * t65;
t191 = t444 + t447;
t342 = -t270 * t290 + t291 * t328;
t101 = t225 * t270 + t328 * t498;
t70 = -t456 / 0.2e1 + t332;
t341 = -qJD(1) * t70 + qJD(2) * t101;
t340 = t361 * t301;
t333 = -t290 * t328 / 0.2e1 + t291 * t486;
t331 = t270 * t340;
t193 = (t294 / 0.2e1 + t484) * t270;
t330 = -qJD(2) * t193 + t384;
t329 = qJD(5) * t427 - t386;
t327 = t267 * t298 * t419 + qJD(3) * t193;
t203 = t286 * t267;
t326 = qJD(2) * t203 + t357;
t325 = qJD(2) * t363 - qJD(3) * t286;
t102 = t277 * t481;
t15 = pkin(5) * t92;
t5 = -t391 * t263 + (t496 + t277 * t373 - t460 / 0.2e1) * pkin(5);
t321 = -qJD(1) * t15 - qJD(2) * t5 + qJD(3) * t102;
t319 = t333 * t301;
t312 = (-t445 / 0.2e1 + t446 / 0.2e1) * t270 + t477;
t316 = t275 / 0.2e1 - t441 / 0.2e1 + t362;
t20 = t312 + t316;
t50 = t336 + t356;
t318 = -qJD(1) * t50 + qJD(2) * t20 + qJD(3) * t191;
t54 = -t182 / 0.2e1 - t319;
t315 = qJD(1) * t92 - qJD(2) * t54 - t291 * t417;
t308 = t333 * t298 + t505;
t52 = t308 - t365;
t93 = t366 * t301;
t314 = qJD(1) * t93 - qJD(2) * t52 - t291 * t415;
t256 = t427 * qJD(3);
t254 = t270 * t415;
t229 = (t377 + t417) * pkin(5);
t186 = t194 * qJD(5);
t185 = t193 * qJD(5);
t165 = t479 / 0.2e1 + t323 * pkin(3);
t164 = t406 - t410;
t151 = t359 + t427;
t95 = -t174 * t482 + t301 * t504;
t73 = t75 * qJD(5);
t71 = t456 / 0.2e1 + t375 + t371;
t55 = t225 * t483 + t437 / 0.2e1 + t182 / 0.2e1 - t319;
t53 = t308 + t365;
t51 = t136 + t463 / 0.2e1 + t356;
t46 = t462 / 0.2e1 + t360 + t369 + t301 * t371;
t45 = -t464 / 0.2e1 + t174 * t368 + t367 - t389 / 0.2e1;
t41 = t148 * t372 + t149 * t368 + t311;
t37 = t38 * qJD(3);
t35 = -t320 - t335;
t29 = t450 / 0.2e1 + t305;
t28 = -t449 / 0.2e1 + t306;
t24 = t310 - t334;
t21 = t309 - t338;
t19 = t312 - t316;
t18 = -t307 + (-t388 / 0.2e1 + t324) * pkin(3);
t16 = t94 * pkin(5);
t14 = t96 * t483 - t471 / 0.2e1 + t362 + t477;
t9 = (t391 + t392) * t301;
t6 = t263 * t495 + t83 * t487 + (t277 * t372 + t460 / 0.2e1 + t496) * pkin(5);
t4 = t149 * t497 + t96 * t494 + (t360 + t488) * pkin(5);
t1 = t304 - t313;
t39 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t63, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t33 + qJD(3) * t26; 0, 0, -t297 * t420, -t380, 0, 0, 0, 0, 0 (-t299 * t413 - t300 * t418) * t297 (t299 * t420 - t302 * t413) * t297 (t230 * t270 + t231 * t328) * qJD(2) + t37, t431 + (t225 * t230 + t231 * t498 + t292 * t439) * qJD(2) + t18 * qJD(3) + t71 * qJD(4), 0, 0, 0, 0, 0 (-t183 * t328 + t197 * t230) * qJD(2) + t28 * qJD(3) + t46 * qJD(5) (t184 * t328 + t230 * t443) * qJD(2) + t29 * qJD(3) + t45 * qJD(5), t35 * qJD(3) + (-t454 - t455) * t421, t434 + (t163 * t230 + t183 * t83 + t184 * t97) * qJD(2) + t1 * qJD(3) + t24 * qJD(4) + t4 * qJD(5) + t41 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t260 * qJD(3) - t299 * t380, t259 * qJD(3) - t302 * t380, t433, t18 * qJD(2) + (-t174 * t296 - t468 * t500) * t474, 0, 0, 0, 0, 0, qJD(2) * t28 + qJD(5) * t94 - t415 * t500, qJD(2) * t29 + qJD(5) * t95 + t417 * t500, t35 * qJD(2) - t174 * t399, t448 + t1 * qJD(2) + (-t174 * t191 + t277 * t500) * qJD(3) + t16 * qJD(5) + t51 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t24 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t46 + qJD(3) * t94 - t411, qJD(2) * t45 + qJD(3) * t95 + qJD(5) * t148, 0, -pkin(5) * t411 + qJD(2) * t4 + qJD(3) * t16 + t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t41 + qJD(3) * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -qJD(3) * t17 - qJD(4) * t70 - t431, 0, 0, 0, 0, 0, qJD(3) * t27 - qJD(5) * t43, qJD(3) * t30 - qJD(5) * t44, qJD(3) * t36, qJD(3) * t2 + qJD(4) * t25 - qJD(5) * t3 - qJD(6) * t40 - t434; 0, 0, 0, 0, t299 * t414, t287 * qJD(3), 0, 0, 0, -pkin(2) * t416, -pkin(2) * t414, -qJD(4) * t499, qJD(3) * t67 + qJD(4) * t101, -t267 * t379 + t295 * t381, -qJD(5) * t203 - t328 * t357, qJD(3) * t155 + t328 * t383, -qJD(3) * t153 + t328 * t382, -t381, qJD(3) * t31 - qJD(4) * t154 + qJD(5) * t66, qJD(3) * t32 - qJD(4) * t204 + qJD(5) * t65, -qJD(3) * t10 - qJD(5) * t11 + qJD(6) * t202, qJD(3) * t7 + qJD(4) * t23 + qJD(5) * t12 - qJD(6) * t34; 0, 0, 0, 0, t378, t398, t414, -t416, 0, -pkin(8) * t414 - t395, pkin(8) * t416 - t394 (-t270 * t296 - t328 * t468) * t474 + t345 (-t225 * t296 - t468 * t498) * t474 + t165 * qJD(4) + t350, -t185 - (-t384 - t385) * t328 (-t257 + t258) * qJD(3) + (-qJD(5) - t422) * t363, t270 * t417 + t424, t254 - t426, t329 (t298 * t342 - t452) * qJD(3) + t55 * qJD(5) + t348 (t301 * t342 + t453) * qJD(3) + t53 * qJD(5) + t347 (-t84 * t298 + t98 * t301 - (t445 - t446) * t328) * qJD(3) + t9 * qJD(5) + t352 (t162 * t277 - t261 * t84 + t263 * t98) * qJD(3) + t21 * qJD(4) + t6 * qJD(5) + t19 * qJD(6) + t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t401, qJD(3) * t165 + t341, 0, 0, 0, 0, 0, -t425, -t423, 0, qJD(3) * t21 + qJD(5) * t14 + qJD(6) * t151 - t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327, -t326, t361 * t197, t331, t256, qJD(3) * t55 - qJD(5) * t112 - t344, qJD(3) * t53 + qJD(5) * t111 + t343, pkin(5) * t383 + qJD(3) * t9 - t467, qJD(3) * t6 + qJD(4) * t14 - t476 * t97 + t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t402, qJD(3) * t19 + qJD(4) * t151 + t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t433, qJD(2) * t17, 0, 0, 0, 0, 0, -qJD(2) * t27 - qJD(5) * t92, -qJD(2) * t30 - qJD(5) * t93, -qJD(2) * t36, -qJD(2) * t2 - qJD(5) * t15 - qJD(6) * t50 - t448; 0, 0, 0, 0, -t378, -t398, 0, 0, 0, t395, t394, -t345, qJD(4) * t166 - t350, -t328 * t385 - t185, 0.2e1 * t298 * t331, -qJD(5) * t199 - t424, t186 + t426, -t329, qJD(5) * t54 - t270 * t412 - t348, qJD(4) * t197 + qJD(5) * t52 - t347, -qJD(4) * t201 - qJD(5) * t8 - t352, qJD(4) * t22 - qJD(5) * t5 + qJD(6) * t20 - t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, t286 * qJD(5), 0, 0, 0, t291 * t410, t291 * t409, qJD(6) * t285, qJD(5) * t102 + qJD(6) * t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t407, 0, 0, 0, 0, 0, -t377, t405, -t403, t466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, -t325, -t404 + t409, t164, -t400, -t290 * t409 - t315, t290 * t410 - t314, -pkin(5) * t409 - t475, -t263 * t476 + t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t25 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, -qJD(3) * t166 - t341, 0, 0, 0, 0, 0, t186 + t254 + t425, -qJD(3) * t197 + t328 * t409 + t423, t201 * qJD(3), -qJD(3) * t22 - qJD(5) * t13 + qJD(6) * t152 + t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t407, 0, 0, 0, 0, 0, t377, -t405, t403, -t466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, t340, 0, -t351 - t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t43 + qJD(3) * t92, qJD(2) * t44 + qJD(3) * t93, 0, qJD(2) * t3 + qJD(3) * t15 - t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t327, t326, qJD(3) * t199 - t298 * t386, -qJD(3) * t194 - t328 * t377, t256, -qJD(3) * t54 - qJD(4) * t194 + t344, -qJD(3) * t52 - t328 * t412 - t343, qJD(3) * t8 + t467, qJD(3) * t5 + qJD(4) * t13 - qJD(6) * t396 - t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, t325, t404, -t406, t400, t315, t314, t475, -qJD(6) * t481 - t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, -t328 * t419, 0, t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t40 + qJD(3) * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t402, pkin(5) * t382 - qJD(3) * t20 - qJD(4) * t152 - t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t399, -t318 + t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t39;
