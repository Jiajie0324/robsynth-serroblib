% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPPR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR4_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:19:44
% EndTime: 2019-03-09 08:19:52
% DurationCPUTime: 2.44s
% Computational Cost: add. (1757->221), mult. (3767->399), div. (0->0), fcn. (3044->6), ass. (0->136)
t94 = sin(qJ(2));
t145 = t94 * qJ(3);
t150 = pkin(2) + qJ(4);
t95 = cos(qJ(2));
t151 = t150 * t95;
t169 = t145 + t151;
t164 = pkin(3) + pkin(7);
t162 = pkin(8) - t150;
t160 = sin(qJ(6));
t125 = qJD(6) * t160;
t161 = cos(qJ(6));
t126 = qJD(6) * t161;
t91 = sin(pkin(9));
t92 = cos(pkin(9));
t168 = t92 * t125 - t91 * t126;
t53 = t160 * t92 - t161 * t91;
t123 = (t94 ^ 2 - t95 ^ 2) * qJD(2);
t87 = t91 ^ 2;
t88 = t92 ^ 2;
t61 = (t87 + t88) * qJD(4);
t146 = qJ(5) * t91;
t163 = pkin(4) + pkin(5);
t167 = -t163 * t92 - t146;
t166 = 0.2e1 * t91;
t165 = 2 * qJD(3);
t132 = t161 * t92;
t52 = -t160 * t91 - t132;
t159 = t52 * t168;
t47 = t52 * qJD(6);
t158 = t53 * t47;
t78 = -t92 * qJD(5) + qJD(3);
t157 = t78 * t95;
t156 = t91 * t94;
t155 = t91 * t95;
t67 = t164 * t94;
t154 = t92 * t67;
t153 = t92 * t94;
t152 = t92 * t95;
t142 = t94 * qJD(2);
t26 = -t52 * t142 + t168 * t95;
t40 = t52 * t95;
t149 = t26 * t53 - t40 * t47;
t50 = -pkin(1) - t169;
t34 = t92 * t50 + t91 * t67;
t68 = t164 * t95;
t144 = qJD(3) * t95;
t143 = qJD(4) * t94;
t141 = t94 * qJD(3);
t83 = t95 * qJD(2);
t140 = qJ(3) * qJD(3);
t139 = -0.2e1 * pkin(1) * qJD(2);
t30 = t94 * qJ(5) + t34;
t138 = pkin(7) * t142;
t137 = pkin(7) * t83;
t136 = t92 * t142;
t76 = t92 * t83;
t135 = t94 * t83;
t25 = pkin(8) * t152 + t30;
t99 = t154 + t163 * t94 - (pkin(8) * t95 + t50) * t91;
t98 = t161 * t99;
t10 = -t160 * t25 - t98;
t11 = -t160 * t99 + t161 * t25;
t109 = -qJD(4) * t95 - t141;
t104 = t92 * t109;
t100 = t94 * qJD(5) + t104;
t106 = -t92 * qJ(3) + t91 * t164;
t102 = (qJ(5) + t106) * t95;
t121 = t94 * t162;
t96 = (-t92 * t121 + t102) * qJD(2) + t100;
t107 = t91 * qJ(3) + t92 * t164;
t103 = -pkin(4) - t107;
t105 = t91 * t109;
t97 = t105 + (-t91 * t121 + (-pkin(5) + t103) * t95) * qJD(2);
t3 = qJD(6) * t98 + t25 * t125 - t160 * t97 - t161 * t96;
t4 = -t11 * qJD(6) - t160 * t96 + t161 * t97;
t134 = t10 * t168 + t11 * t47 + t3 * t53 + t4 * t52;
t130 = t150 * t94;
t129 = qJD(2) * t161;
t128 = qJD(2) * t160;
t127 = qJD(4) * t160;
t124 = t161 * qJD(4);
t71 = -0.2e1 * t135;
t122 = qJ(5) * t92 - qJ(3);
t62 = t91 * t136;
t120 = t91 * t130;
t119 = t92 * t130;
t116 = t162 * t160;
t115 = t150 * t61;
t114 = t95 * t62;
t113 = -pkin(2) * t95 - t145;
t112 = pkin(4) * t92 + t146;
t16 = (t119 + t102) * qJD(2) + t100;
t18 = t105 + (t103 * t95 + t120) * qJD(2);
t6 = t16 * t91 - t18 * t92;
t22 = -t105 + (t107 * t95 - t120) * qJD(2);
t23 = t104 + (t106 * t95 + t119) * qJD(2);
t9 = t22 * t92 + t23 * t91;
t27 = -t128 * t153 + t129 * t156 - t95 * t47;
t41 = t53 * t95;
t111 = -t168 * t41 - t27 * t52;
t33 = -t91 * t50 + t154;
t110 = t162 * t132;
t108 = t168 * t94 + t52 * t83;
t101 = t113 * qJD(2) + t144;
t74 = t91 * t83;
t73 = t91 * t142;
t72 = qJD(5) * t155;
t70 = 0.2e1 * t135;
t64 = -pkin(1) + t113;
t63 = t150 * t76;
t60 = t88 * t71;
t59 = t87 * t71;
t58 = pkin(4) * t91 - t122;
t57 = t162 * t91;
t56 = t164 * t142;
t55 = -0.2e1 * t123;
t51 = 0.2e1 * t61;
t49 = -t163 * t91 + t122;
t48 = t92 * t123;
t45 = (-t87 + t88) * t142;
t43 = -t141 + (pkin(2) * t94 - qJ(3) * t95) * qJD(2);
t39 = t166 * t123;
t38 = t112 * t95 + t68;
t37 = -t92 * t116 + t161 * t57;
t36 = -t160 * t57 - t110;
t35 = t167 * t95 - t68;
t31 = -t94 * pkin(4) - t33;
t29 = t72 + (-t112 - t164) * t142;
t28 = t47 * t94 - t53 * t83;
t24 = -t72 + (t164 - t167) * t142;
t21 = -t57 * t126 + t91 * t127 + (qJD(6) * t116 + t124) * t92;
t20 = qJD(6) * t110 + t91 * t124 + t57 * t125 - t92 * t127;
t15 = -0.2e1 * t158 + 0.2e1 * t159;
t12 = t161 * t168 + t160 * t47 + (-t160 * t52 - t161 * t53) * qJD(6);
t5 = t168 * t36 + t20 * t53 + t21 * t52 + t37 * t47;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t55, 0, t71, 0, 0, t94 * t139, t95 * t139, 0, 0, 0, 0, 0, t70, t55, t71, 0, -0.2e1 * t64 * t142 + 0.2e1 * t43 * t95, -0.2e1 * t43 * t94 - 0.2e1 * t64 * t83, 0.2e1 * t64 * t43, t59, -0.4e1 * t114, t39, t60, 0.2e1 * t48, t70, -0.2e1 * t56 * t152 + 0.2e1 * t22 * t94 + 0.2e1 * (-t68 * t153 + t33 * t95) * qJD(2), 0.2e1 * t56 * t155 - 0.2e1 * t23 * t94 + 0.2e1 * (t68 * t156 - t34 * t95) * qJD(2), 0.2e1 * (t22 * t91 - t23 * t92) * t95 + 0.2e1 * (-t33 * t91 + t34 * t92) * t142, 0.2e1 * t22 * t33 + 0.2e1 * t23 * t34 - 0.2e1 * t56 * t68, t59, t39, 0.4e1 * t114, t70, -0.2e1 * t48, t60, 0.2e1 * t29 * t152 - 0.2e1 * t18 * t94 + 0.2e1 * (-t38 * t153 - t31 * t95) * qJD(2), 0.2e1 * (-t16 * t92 - t18 * t91) * t95 + 0.2e1 * (t30 * t92 + t31 * t91) * t142, 0.2e1 * t29 * t155 + 0.2e1 * t16 * t94 + 0.2e1 * (-t38 * t156 + t30 * t95) * qJD(2), 0.2e1 * t16 * t30 + 0.2e1 * t18 * t31 + 0.2e1 * t29 * t38, 0.2e1 * t41 * t27, -0.2e1 * t26 * t41 - 0.2e1 * t27 * t40, -0.2e1 * t27 * t94 - 0.2e1 * t41 * t83, 0.2e1 * t40 * t26, 0.2e1 * t26 * t94 + 0.2e1 * t40 * t83, t70, -0.2e1 * t10 * t83 + 0.2e1 * t24 * t40 + 0.2e1 * t35 * t26 - 0.2e1 * t4 * t94, 0.2e1 * t11 * t83 + 0.2e1 * t24 * t41 + 0.2e1 * t35 * t27 - 0.2e1 * t3 * t94, -0.2e1 * t10 * t27 - 0.2e1 * t11 * t26 + 0.2e1 * t3 * t40 - 0.2e1 * t4 * t41, 0.2e1 * t10 * t4 - 0.2e1 * t11 * t3 + 0.2e1 * t24 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, -t142, 0, -t137, t138, 0, 0, 0, -t83, t142, 0, 0, 0, t101, t137, -t138, t101 * pkin(7), t62, t45, t76, -t62, -t74, 0, -t56 * t91 - t63 + (t144 + (-qJD(2) * qJ(3) - qJD(4)) * t94) * t92, -t56 * t92 + (t169 * qJD(2) + t143 - t144) * t91, -t9, -qJ(3) * t56 + qJD(3) * t68 - t9 * t150 + (-t33 * t92 - t34 * t91) * qJD(4), t62, t76, -t45, 0, t74, -t62, t29 * t91 - t63 + (t157 + (-qJD(2) * t58 - qJD(4)) * t94) * t92, -t6, -t29 * t92 + (-t143 + t157 + (-t58 * t94 - t151) * qJD(2)) * t91, t29 * t58 + t38 * t78 - t6 * t150 + (-t30 * t91 + t31 * t92) * qJD(4), t111, t168 * t40 + t26 * t52 - t27 * t53 + t41 * t47, t108, t149, -t28, 0, -t21 * t94 + t24 * t53 + t49 * t26 - t35 * t47 - t36 * t83 - t78 * t40, -t168 * t35 - t20 * t94 - t24 * t52 + t49 * t27 + t37 * t83 - t78 * t41, t20 * t40 - t21 * t41 - t26 * t37 - t27 * t36 + t134, t10 * t21 - t11 * t20 + t24 * t49 - t3 * t37 - t35 * t78 + t36 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, 0.2e1 * t140, 0, 0, 0, 0, 0, 0, t91 * t165, t92 * t165, t51, 0.2e1 * t115 + 0.2e1 * t140, 0, 0, 0, 0, 0, 0, t78 * t166, t51, -0.2e1 * t78 * t92, 0.2e1 * t58 * t78 + 0.2e1 * t115, 0.2e1 * t159, 0.2e1 * t168 * t53 - 0.2e1 * t47 * t52, 0, -0.2e1 * t158, 0, 0, -0.2e1 * t47 * t49 - 0.2e1 * t53 * t78, -0.2e1 * t168 * t49 + 0.2e1 * t52 * t78, 0.2e1 * t5, -0.2e1 * t20 * t37 + 0.2e1 * t21 * t36 - 0.2e1 * t49 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, t137, 0, 0, 0, 0, 0, 0, t76, -t74, 0, t9, 0, 0, 0, 0, 0, 0, t76, 0, t74, t6, 0, 0, 0, 0, 0, 0, -t108, t28, t111 + t149, t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, 0, 0, 0, 0, 0, 0, 0, 0, t15, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, t73, 0, -t56, 0, 0, 0, 0, 0, 0, -t136, 0, -t73, t29, 0, 0, 0, 0, 0, 0, -t26, -t27, 0, -t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, 0, 0, 0, 0, 0, t47, t168, 0, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, t73, 0, t18, 0, 0, 0, 0, 0, 0, t94 * t125 - t95 * t129, t126 * t94 + t128 * t95, -t161 * t27 - t160 * t26 + (t160 * t41 - t161 * t40) * qJD(6), t4 * t161 - t3 * t160 + (-t160 * t10 + t161 * t11) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t12, t21 * t161 - t20 * t160 + (-t160 * t36 + t161 * t37) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t26, -t83, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, 0, t47, 0, t21, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, -t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, -t126, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
