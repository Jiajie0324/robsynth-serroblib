% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPPR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:19:52
% EndTime: 2019-03-09 08:20:04
% DurationCPUTime: 7.67s
% Computational Cost: add. (5621->587), mult. (11908->708), div. (0->0), fcn. (7473->8), ass. (0->309)
t238 = cos(qJ(2));
t343 = t238 * qJDD(1);
t204 = pkin(7) * t343;
t226 = qJDD(2) * qJ(3);
t227 = qJD(2) * qJD(3);
t235 = sin(qJ(2));
t345 = qJD(1) * qJD(2);
t328 = t235 * t345;
t106 = pkin(7) * t328 - t204 - t226 - t227;
t275 = pkin(3) * t343 + qJDD(4) - t106;
t249 = pkin(3) * t328 - t275;
t231 = sin(pkin(9));
t232 = cos(pkin(9));
t355 = qJD(2) * t232;
t357 = qJD(1) * t238;
t138 = -t231 * t357 + t355;
t350 = qJD(5) * t138;
t173 = t231 * t343;
t317 = qJDD(2) * t232 - t173;
t99 = t231 * t328 + t317;
t399 = qJ(5) * t99;
t245 = t249 + t350 + t399;
t326 = t232 * t343;
t98 = qJDD(2) * t231 - t232 * t328 + t326;
t410 = pkin(4) * t98;
t22 = -t245 + t410;
t236 = sin(qJ(1));
t239 = cos(qJ(1));
t307 = g(1) * t239 + g(2) * t236;
t278 = t307 * t238;
t405 = g(3) * t235;
t432 = t278 + t405;
t436 = t22 - t432;
t327 = t238 * t345;
t344 = t235 * qJDD(1);
t266 = t327 + t344;
t234 = sin(qJ(6));
t237 = cos(qJ(6));
t356 = qJD(2) * t231;
t136 = t232 * t357 + t356;
t289 = t136 * t234 + t138 * t237;
t26 = qJD(6) * t289 + t234 * t99 - t237 * t98;
t358 = qJD(1) * t235;
t189 = -qJD(6) + t358;
t395 = t189 * t289;
t435 = -t26 - t395;
t229 = t235 ^ 2;
t230 = t238 ^ 2;
t360 = t229 - t230;
t416 = qJD(1) * t360;
t434 = qJD(2) * (-t136 * t238 + t232 * t416) - (t98 + t326) * t235;
t412 = pkin(3) + pkin(7);
t403 = pkin(2) + qJ(4);
t402 = pkin(8) - t403;
t333 = t232 * t358;
t334 = t231 * t358;
t348 = qJD(6) * t237;
t349 = qJD(6) * t234;
t417 = -t231 * t348 + t232 * t349;
t370 = t234 * t333 - t237 * t334 - t417;
t286 = t234 * t231 + t237 * t232;
t122 = t286 * qJD(6);
t267 = t286 * t235;
t369 = -qJD(1) * t267 + t122;
t433 = t266 * t232;
t206 = pkin(7) * t358;
t347 = pkin(3) * t358 + qJD(3) + t206;
t422 = t235 * (t136 * t231 - t138 * t232);
t430 = qJD(1) * t422 - t231 * t99 - t232 * t98;
t393 = t232 * t99;
t89 = t98 * t231;
t429 = qJD(2) * t422 - t238 * (t89 - t393);
t428 = t289 ^ 2;
t290 = -t237 * t136 + t138 * t234;
t427 = t290 ^ 2;
t215 = t235 * qJ(3);
t324 = -pkin(1) - t215;
t262 = -t238 * t403 + t324;
t104 = t262 * qJD(1);
t108 = -qJD(2) * t403 + t347;
t46 = -t231 * t104 + t108 * t232;
t305 = qJD(5) - t46;
t411 = pkin(4) + pkin(5);
t340 = t411 * t235;
t27 = -pkin(8) * t138 - qJD(1) * t340 + t305;
t47 = t232 * t104 + t231 * t108;
t39 = qJ(5) * t358 + t47;
t29 = pkin(8) * t136 + t39;
t296 = t234 * t29 - t237 * t27;
t188 = pkin(2) * t328;
t388 = qJ(3) * t238;
t295 = qJ(4) * t235 - t388;
t352 = qJD(3) * t235;
t246 = qJD(2) * t295 - qJD(4) * t238 - t352;
t37 = qJD(1) * t246 + qJDD(1) * t262 + t188;
t33 = t231 * t37;
t252 = -pkin(4) * t266 + qJDD(5) + t33;
t187 = pkin(7) * t327;
t203 = pkin(7) * t344;
t325 = qJDD(3) + t187 + t203;
t67 = pkin(3) * t266 - qJD(2) * qJD(4) - qJDD(2) * t403 + t325;
t394 = t232 * t67;
t18 = t252 - t394;
t12 = -pkin(5) * t266 - pkin(8) * t99 + t18;
t21 = t231 * t67 + t232 * t37;
t213 = t235 * qJD(5);
t15 = qJ(5) * t266 + qJD(1) * t213 + t21;
t13 = pkin(8) * t98 + t15;
t3 = -qJD(6) * t296 + t234 * t12 + t237 * t13;
t426 = -t189 * t296 + t3;
t11 = t234 * t27 + t237 * t29;
t4 = -qJD(6) * t11 + t237 * t12 - t234 * t13;
t425 = -t11 * t189 + t4;
t424 = t411 * t98;
t25 = -t136 * t348 + t138 * t349 - t234 * t98 - t237 * t99;
t396 = t189 * t290;
t423 = t25 + t396;
t390 = t136 * t333 + t89;
t135 = t138 ^ 2;
t419 = -t136 ^ 2 - t135;
t418 = t232 * qJD(5) - t347;
t140 = -qJDD(6) + t266;
t373 = t237 * t231;
t287 = -t232 * t234 + t373;
t415 = t140 * t287 - t189 * t369;
t414 = t140 * t286 + t189 * t370;
t387 = qJ(5) * t231;
t277 = t232 * t411 + t387;
t413 = -0.2e1 * pkin(1);
t240 = qJD(2) ^ 2;
t409 = pkin(7) * t240;
t408 = g(1) * t236;
t225 = g(3) * t238;
t221 = t238 * pkin(2);
t404 = t289 * t290;
t380 = t231 * t235;
t263 = -pkin(8) * t380 - t238 * t411;
t211 = pkin(2) * t358;
t114 = qJD(1) * t295 + t211;
t208 = pkin(7) * t357;
t147 = pkin(3) * t357 + t208;
t65 = -t231 * t114 + t147 * t232;
t36 = qJD(1) * t263 - t65;
t66 = t232 * t114 + t231 * t147;
t54 = qJ(5) * t357 + t66;
t41 = -pkin(8) * t333 + t54;
t150 = t402 * t231;
t151 = t402 * t232;
t84 = -t150 * t234 - t151 * t237;
t401 = -qJD(4) * t287 + qJD(6) * t84 - t234 * t36 - t237 * t41;
t85 = t150 * t237 - t151 * t234;
t400 = qJD(4) * t286 - qJD(6) * t85 + t234 * t41 - t237 * t36;
t392 = -t277 * t358 + t418;
t303 = pkin(4) * t232 + t387;
t391 = t303 * t358 - t418;
t353 = qJD(2) * t238;
t148 = t412 * t353;
t354 = qJD(2) * t235;
t210 = pkin(2) * t354;
t88 = t210 + t246;
t51 = t231 * t148 + t232 * t88;
t389 = pkin(7) * qJDD(2);
t386 = qJ(5) * t232;
t385 = qJDD(2) * pkin(2);
t241 = qJD(1) ^ 2;
t381 = t229 * t241;
t379 = t231 * t238;
t378 = t232 * t238;
t377 = t235 * t236;
t376 = t235 * t239;
t375 = t235 * t241;
t374 = t236 * t238;
t372 = t238 * t239;
t228 = qJD(2) * qJ(3);
t120 = qJD(4) + t228 + t147;
t264 = qJ(5) * t138 - t120;
t52 = pkin(4) * t136 - t264;
t371 = -qJD(4) + t52;
t363 = t221 + t215;
t336 = t238 * qJ(4) + t363;
t131 = -pkin(1) - t336;
t164 = t412 * t235;
t80 = t232 * t131 + t231 * t164;
t368 = t433 * t403;
t182 = qJ(3) * t374;
t341 = pkin(4) * t379;
t367 = t236 * t341 + t182;
t185 = qJ(3) * t372;
t366 = t239 * t341 + t185;
t365 = g(1) * t374 - g(2) * t372;
t165 = t412 * t238;
t222 = t239 * pkin(7);
t362 = t239 * pkin(3) + t222;
t361 = t239 * pkin(1) + t236 * pkin(7);
t359 = t229 + t230;
t351 = qJD(4) * t136;
t346 = qJD(4) - t120;
t339 = qJ(5) * t378;
t338 = t39 * t358;
t70 = t235 * qJ(5) + t80;
t172 = t231 * t344;
t337 = t231 * t327 + t232 * t381 + t172;
t335 = -g(1) * t376 - g(2) * t377 + t225;
t332 = t403 * t353;
t331 = qJD(5) * t379;
t50 = t148 * t232 - t231 * t88;
t322 = -qJD(2) * pkin(2) + qJD(3);
t321 = -qJ(3) + t386;
t79 = -t231 * t131 + t164 * t232;
t318 = t403 * t89 - t335;
t35 = qJ(5) * t353 + t213 + t51;
t316 = pkin(2) * t372 + qJ(3) * t376 + t361;
t315 = -t203 - t335;
t314 = -t26 * t287 + t290 * t369;
t313 = t235 * t327;
t312 = t403 * t172;
t311 = t359 * qJDD(1) * pkin(7);
t124 = t231 * t236 - t232 * t376;
t126 = t231 * t239 + t232 * t377;
t310 = -g(1) * t126 - g(2) * t124;
t309 = -g(1) * t124 + g(2) * t126;
t125 = t231 * t376 + t232 * t236;
t127 = -t231 * t377 + t232 * t239;
t308 = -g(1) * t127 - g(2) * t125;
t306 = -g(2) * t239 + t408;
t302 = pkin(5) * t231 - t386;
t300 = t15 * t231 - t18 * t232;
t20 = -t33 + t394;
t299 = t20 * t232 + t21 * t231;
t49 = pkin(8) * t379 - t340 - t79;
t55 = pkin(8) * t378 + t70;
t23 = -t234 * t55 + t237 * t49;
t24 = t234 * t49 + t237 * t55;
t294 = qJD(4) * t138 + t403 * t99;
t293 = t126 * t237 - t127 * t234;
t292 = t126 * t234 + t127 * t237;
t153 = t206 + t322;
t163 = -t208 - t228;
t288 = t153 * t238 + t163 * t235;
t285 = g(3) * (pkin(4) * t380 + t336);
t284 = t189 ^ 2;
t156 = qJDD(2) * t235 + t238 * t240;
t283 = t324 - t221;
t282 = -t231 * t381 + t433;
t281 = t127 * pkin(4) + qJ(5) * t126 + t362;
t280 = qJD(2) * t138 + t337;
t279 = t236 * pkin(3) + qJ(4) * t372 + t316;
t130 = t283 * qJD(1);
t276 = t130 * t358 + qJDD(3) - t315;
t38 = -pkin(4) * t358 + t305;
t274 = (t231 * t38 + t232 * t39) * t235;
t273 = (-t231 * t46 + t232 * t47) * t235;
t272 = -t25 * t286 + t289 * t370;
t271 = -qJ(3) * t353 - t352;
t268 = t235 * t287;
t265 = t136 * t357 - t337;
t48 = -t138 * t334 + t393;
t261 = (-t136 * t354 + t238 * t98) * t232;
t155 = -pkin(1) - t363;
t260 = t389 + (-qJD(1) * t155 - t130) * qJD(2);
t118 = t210 + t271;
t71 = qJD(1) * t271 + qJDD(1) * t283 + t188;
t259 = qJD(1) * t118 + qJDD(1) * t155 + t409 + t71;
t257 = -t48 - t390;
t256 = t307 * t403;
t255 = t262 * t408;
t254 = t125 * pkin(4) + qJ(5) * t124 + t279;
t253 = -t249 - t432;
t250 = -t11 * t369 - t4 * t286 + t3 * t287 + t296 * t370 + t335;
t248 = t138 * t358 + t98;
t113 = t325 - t385;
t247 = qJD(2) * t288 - t106 * t238 + t113 * t235;
t244 = (-pkin(3) * t345 - g(3)) * t235 - t278 + t275;
t243 = t244 - t399;
t179 = t238 * t375;
t160 = t360 * t241;
t157 = qJDD(2) * t238 - t235 * t240;
t152 = pkin(4) * t231 - t321;
t146 = t412 * t354;
t144 = -qJ(3) * t357 + t211;
t133 = qJDD(1) * t230 - 0.2e1 * t313;
t132 = qJDD(1) * t229 + 0.2e1 * t313;
t123 = -t231 * t411 + t321;
t110 = -t234 * t378 + t238 * t373;
t109 = t286 * t238;
t97 = -0.2e1 * qJD(2) * t416 + 0.2e1 * t235 * t343;
t95 = t238 * t303 + t165;
t83 = -t238 * t277 - t165;
t72 = -pkin(4) * t235 - t79;
t69 = t331 + (-t303 - t412) * t354;
t64 = t124 * t234 + t125 * t237;
t63 = t124 * t237 - t125 * t234;
t62 = -qJD(2) * t136 + t282;
t61 = (-t136 + t356) * t358 + t317;
t59 = qJD(2) * t268 + t122 * t238;
t58 = qJD(2) * t267 + t238 * t417;
t57 = -t138 * t357 + t282;
t56 = -pkin(4) * t357 - t65;
t53 = -t331 + (t277 + t412) * t354;
t42 = (t138 * t354 - t238 * t99) * t231;
t40 = -pkin(4) * t353 - t50;
t32 = -t136 * t411 + t264;
t31 = -pkin(8) * t232 * t354 + t35;
t30 = qJD(2) * t263 - t50;
t28 = (t99 - t173) * t235 + (t138 * t238 + t231 * t416) * qJD(2);
t14 = t245 - t424;
t6 = -qJD(6) * t24 - t234 * t31 + t237 * t30;
t5 = qJD(6) * t23 + t234 * t30 + t237 * t31;
t1 = [0, 0, 0, 0, 0, qJDD(1), t306, t307, 0, 0, t132, t97, t156, t133, t157, 0, -t156 * pkin(7) + 0.2e1 * (-t328 + t343) * pkin(1) + t365 (t345 * t413 - t389) * t238 + (qJDD(1) * t413 - t306 + t409) * t235, -t307 + 0.2e1 * t311, -g(1) * (-pkin(1) * t236 + t222) - g(2) * t361 + (pkin(7) ^ 2 * t359 + pkin(1) ^ 2) * qJDD(1), 0, -t156, -t157, t132, t97, t133, t311 + t247 - t307, t235 * t260 + t238 * t259 - t365, t260 * t238 + (-t259 + t306) * t235, pkin(7) * t247 - g(1) * t222 - g(2) * t316 + t130 * t118 + t71 * t155 - t283 * t408, t42, -t429, t28, t261, t434, t132, -t136 * t146 + t165 * t98 + (-t232 * t249 + (qJD(1) * t79 + t46) * qJD(2)) * t238 + (qJD(1) * t50 + qJDD(1) * t79 - t120 * t355 + t20) * t235 + t308, -t138 * t146 + t165 * t99 + (t231 * t249 + (-qJD(1) * t80 - t47) * qJD(2)) * t238 + (-qJD(1) * t51 - qJDD(1) * t80 + t120 * t356 - t21) * t235 - t310, -t136 * t51 - t138 * t50 - t79 * t99 - t80 * t98 + (t20 * t231 - t21 * t232) * t238 + qJD(2) * t273 + t365, -g(1) * t362 - g(2) * t279 - t120 * t146 - t165 * t249 + t20 * t79 + t21 * t80 + t46 * t50 + t47 * t51 - t255, t42, t28, t429, t132, -t434, t261, t136 * t69 + t95 * t98 + (t22 * t232 + (-qJD(1) * t72 - t38) * qJD(2)) * t238 + (-qJD(1) * t40 - qJDD(1) * t72 - t355 * t52 - t18) * t235 + t308, -t136 * t35 + t138 * t40 - t70 * t98 + t72 * t99 + (-t15 * t232 - t18 * t231) * t238 + qJD(2) * t274 + t365, -t138 * t69 - t95 * t99 + (t22 * t231 + (qJD(1) * t70 + t39) * qJD(2)) * t238 + (qJD(1) * t35 + qJDD(1) * t70 - t356 * t52 + t15) * t235 + t310, -g(1) * t281 - g(2) * t254 + t15 * t70 + t18 * t72 + t22 * t95 + t39 * t35 + t38 * t40 + t52 * t69 - t255, t110 * t25 + t289 * t59, -t109 * t25 + t110 * t26 - t289 * t58 - t290 * t59, t110 * t140 - t189 * t59 + t235 * t25 - t289 * t353, -t109 * t26 + t290 * t58, -t109 * t140 + t189 * t58 + t235 * t26 + t290 * t353, t140 * t235 + t189 * t353, -g(1) * t292 - g(2) * t64 - t14 * t109 - t23 * t140 - t6 * t189 - t4 * t235 + t83 * t26 + t290 * t53 + t296 * t353 + t32 * t58, -g(1) * t293 - g(2) * t63 + t11 * t353 - t14 * t110 + t24 * t140 + t5 * t189 + t3 * t235 - t83 * t25 + t289 * t53 + t32 * t59, t109 * t3 - t11 * t58 + t110 * t4 + t23 * t25 - t24 * t26 - t289 * t6 - t290 * t5 + t296 * t59 - t365, t3 * t24 + t11 * t5 + t4 * t23 - t296 * t6 + t14 * t83 + t32 * t53 - g(1) * (pkin(5) * t127 + t281) - g(2) * (pkin(5) * t125 - pkin(8) * t372 + t254) - (t238 * t402 + t324) * t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t179, t160, t344, t179, t343, qJDD(2), pkin(1) * t375 + t315, t405 - t204 + (pkin(1) * t241 + t307) * t238, 0, 0, qJDD(2), -t344, -t343, -t179, t160, t179 (-pkin(2) * t235 + t388) * qJDD(1) + ((-t163 - t228) * t235 + (-t153 + t322) * t238) * qJD(1), -t144 * t357 + t276 - 0.2e1 * t385, t204 + 0.2e1 * t226 + 0.2e1 * t227 + (qJD(1) * t144 - g(3)) * t235 + (qJD(1) * t130 - t307) * t238, -t106 * qJ(3) - t163 * qJD(3) - t113 * pkin(2) - t130 * t144 - g(1) * (-pkin(2) * t376 + t185) - g(2) * (-pkin(2) * t377 + t182) - g(3) * t363 - t288 * qJD(1) * pkin(7), t48, t430, t57, t390, t265, -t179, qJ(3) * t98 + t347 * t136 + t253 * t231 + (-t238 * t46 + (-t232 * t346 - t65) * t235) * qJD(1) - t368, t312 + qJ(3) * t99 + t347 * t138 + t253 * t232 + (t235 * t66 + t238 * t47 + (t235 * t346 + t332) * t231) * qJD(1), t136 * t66 + t138 * t65 + (t358 * t46 - t21 + t351) * t231 + (-t358 * t47 - t20 + t294) * t232 + t318, -t249 * qJ(3) - t47 * t66 - t46 * t65 - g(1) * t185 - g(2) * t182 - g(3) * t336 + t256 * t235 - t299 * t403 + t347 * t120 + (-t231 * t47 - t232 * t46) * qJD(4), t48, t57, -t430, -t179, -t265, t390, t152 * t98 + t391 * t136 + t436 * t231 + (t238 * t38 + (t232 * t371 + t56) * t235) * qJD(1) - t368, t136 * t54 - t138 * t56 + (-t358 * t38 - t15 + t351) * t231 + (t18 + t294 - t338) * t232 + t318, -t312 - t152 * t99 - t391 * t138 - t436 * t232 + (-t235 * t54 - t238 * t39 + (t235 * t371 - t332) * t231) * qJD(1), t22 * t152 - t39 * t54 - t38 * t56 - g(1) * (-t239 * t339 + t366) - g(2) * (-t236 * t339 + t367) - t285 + t391 * t52 + (g(3) * t386 + t256) * t235 - t300 * t403 + (-t231 * t39 + t232 * t38) * qJD(4), t272, -t25 * t287 - t26 * t286 - t289 * t369 - t290 * t370, t289 * t357 - t414, t314, -t290 * t357 - t415, -t189 * t357, t123 * t26 - t14 * t287 - t84 * t140 + t392 * t290 + t369 * t32 - g(3) * t268 - t400 * t189 + (-qJD(1) * t296 - t287 * t307) * t238, -t11 * t357 - t123 * t25 + t85 * t140 + t401 * t189 + t392 * t289 + t370 * t32 + (t14 + t432) * t286, t25 * t84 - t26 * t85 - t289 * t400 - t290 * t401 + t250, t3 * t85 + t4 * t84 + t14 * t123 - g(1) * t366 - g(2) * t367 - t285 + t392 * t32 + (g(3) * pkin(8) - t302 * t307) * t238 + t401 * t11 - t400 * t296 + (-g(3) * t302 - t307 * t402) * t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, qJDD(2) + t179, -t240 - t381, qJD(2) * t163 + t187 + t276 - t385, 0, 0, 0, 0, 0, 0, t62, -t280, t257, qJD(1) * t273 - qJD(2) * t120 + t299 + t335, 0, 0, 0, 0, 0, 0, t62, t257, t280, qJD(1) * t274 - qJD(2) * t52 + t300 + t335, 0, 0, 0, 0, 0, 0, qJD(2) * t290 + t414, qJD(2) * t289 + t415, t272 + t314, qJD(2) * t32 + t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t61, t419, t136 * t47 + t138 * t46 + t244, 0, 0, 0, 0, 0, 0, t248, t419, -t61, t410 + t136 * t39 + (-qJD(5) - t38) * t138 + t243, 0, 0, 0, 0, 0, 0, -t26 + t395, t25 - t396, t427 + t428, -t11 * t290 + t289 * t296 + t243 - t350 + t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136 * t138 - t266 (t136 + t356) * t358 + t317, -t135 - t381, -t338 + t138 * t52 + (-t67 - t225) * t232 + t252 + t309, 0, 0, 0, 0, 0, 0, -t138 * t290 - t140 * t237 - t234 * t284, -t138 * t289 + t140 * t234 - t237 * t284, t234 * t435 + t423 * t237, -g(3) * t378 - t32 * t138 + t234 * t426 + t237 * t425 + t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t404, -t427 + t428, -t423, -t404, t435, -t140, -g(1) * t63 + g(2) * t293 - g(3) * t109 - t289 * t32 + t425, g(1) * t64 - g(2) * t292 - g(3) * t110 + t290 * t32 - t426, 0, 0;];
tau_reg  = t1;
