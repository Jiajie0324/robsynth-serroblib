% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:44:31
% EndTime: 2019-05-06 08:44:55
% DurationCPUTime: 21.45s
% Computational Cost: add. (40155->654), mult. (90325->860), div. (0->0), fcn. (53980->8), ass. (0->465)
t806 = cos(pkin(9));
t805 = sin(pkin(9));
t812 = cos(qJ(2));
t875 = qJD(1) * t812;
t750 = qJD(2) * t806 - t805 * t875;
t746 = t750 ^ 2;
t809 = sin(qJ(2));
t802 = t809 ^ 2;
t815 = qJD(1) ^ 2;
t795 = t802 * t815;
t865 = t795 + t746;
t748 = qJD(2) * t805 + t806 * t875;
t691 = t750 * t748;
t870 = qJD(1) * qJD(2);
t791 = t812 * t870;
t868 = qJDD(1) * t809;
t764 = t791 + t868;
t942 = t691 + t764;
t890 = t805 * t942;
t587 = t806 * t865 + t890;
t794 = t812 * qJDD(1);
t854 = t809 * t870;
t765 = t794 - t854;
t722 = qJDD(2) * t806 - t765 * t805;
t876 = qJD(1) * t809;
t731 = t748 * t876;
t941 = t722 - t731;
t543 = t587 * t809 - t812 * t941;
t888 = t806 * t942;
t607 = t805 * t865 - t888;
t810 = sin(qJ(1));
t813 = cos(qJ(1));
t497 = t543 * t810 + t607 * t813;
t1043 = pkin(6) * t497;
t499 = t543 * t813 - t607 * t810;
t1042 = pkin(6) * t499;
t549 = t587 * t812 + t809 * t941;
t1041 = pkin(7) * t549;
t922 = pkin(2) + qJ(4);
t1040 = pkin(1) * t549 + t922 * t587;
t1039 = pkin(1) * t607 + pkin(7) * t543;
t929 = t748 ^ 2;
t726 = t929 - t795;
t602 = t726 * t805 + t888;
t721 = qJDD(2) * t805 + t806 * t765;
t730 = t750 * t876;
t659 = t721 - t730;
t552 = t602 * t809 - t659 * t812;
t601 = t726 * t806 - t890;
t1038 = t552 * t810 - t601 * t813;
t1037 = t552 * t813 + t601 * t810;
t663 = t722 + t731;
t972 = -t659 * t806 + t805 * t663;
t654 = -t929 - t746;
t969 = -t659 * t805 - t663 * t806;
t995 = t654 * t812 + t809 * t969;
t1010 = t810 * t972 + t813 * t995;
t1036 = pkin(6) * t1010;
t1011 = t810 * t995 - t813 * t972;
t1035 = pkin(6) * t1011;
t658 = t721 + t730;
t566 = -t658 * t805 + t806 * t941;
t686 = t746 - t929;
t544 = t566 * t809 + t686 * t812;
t570 = t658 * t806 + t805 * t941;
t1034 = t544 * t810 + t570 * t813;
t1033 = t544 * t813 - t570 * t810;
t850 = -t764 + t691;
t651 = t805 * t850;
t727 = -t746 + t795;
t1000 = -t727 * t806 + t651;
t1013 = -t1000 * t809 + t663 * t812;
t912 = t850 * t806;
t999 = t805 * t727 + t912;
t1032 = t1013 * t810 + t813 * t999;
t1031 = t1013 * t813 - t810 * t999;
t814 = qJD(2) ^ 2;
t780 = -t795 - t814;
t860 = t809 * t812 * t815;
t774 = -qJDD(2) + t860;
t883 = t812 * t774;
t704 = -t780 * t809 + t883;
t763 = 0.2e1 * t791 + t868;
t636 = t704 * t810 - t763 * t813;
t1029 = pkin(6) * t636;
t640 = t704 * t813 + t763 * t810;
t1028 = pkin(6) * t640;
t938 = -t929 - t795;
t959 = t806 * t938 + t651;
t956 = t805 * t938 - t912;
t970 = t812 * t658 + t809 * t956;
t992 = t810 * t959 + t813 * t970;
t1027 = pkin(6) * t992;
t994 = t810 * t970 - t813 * t959;
t1026 = pkin(6) * t994;
t993 = t654 * t809 - t812 * t969;
t1025 = pkin(7) * t993;
t1020 = t607 * t922;
t1016 = -pkin(1) * t993 - qJ(3) * t654 + t922 * t969;
t1015 = -pkin(1) * t972 + pkin(7) * t995;
t1014 = t602 * t812 + t659 * t809;
t1012 = t1000 * t812 + t663 * t809;
t1009 = pkin(3) * t587 + qJ(3) * t607;
t803 = t812 ^ 2;
t892 = t803 * t815;
t781 = t814 + t892;
t773 = qJDD(2) + t860;
t900 = t773 * t809;
t706 = t781 * t812 + t900;
t766 = t794 - 0.2e1 * t854;
t637 = t706 * t810 - t766 * t813;
t1007 = pkin(6) * t637;
t641 = t706 * t813 + t766 * t810;
t1006 = pkin(6) * t641;
t971 = t809 * t658 - t812 * t956;
t1005 = pkin(7) * t971;
t998 = -pkin(1) * t971 + t922 * t956;
t997 = -pkin(1) * t959 + pkin(7) * t970;
t996 = t566 * t812 - t686 * t809;
t990 = pkin(3) * t654 - t922 * t972;
t512 = pkin(3) * t969 - qJ(3) * t972;
t884 = t812 * t773;
t701 = -t781 * t809 + t884;
t989 = pkin(1) * t701;
t986 = pkin(7) * t701;
t985 = pkin(7) * t704;
t983 = qJ(5) * t941;
t973 = t922 * t959;
t779 = -t795 + t814;
t703 = -t779 * t809 + t884;
t866 = qJDD(1) * t813;
t968 = t703 * t810 - t809 * t866;
t867 = qJDD(1) * t810;
t967 = t703 * t813 + t809 * t867;
t966 = pkin(3) * t956 - qJ(3) * t959;
t965 = 2 * qJD(3);
t899 = t774 * t809;
t698 = t780 * t812 + t899;
t964 = pkin(1) * t698;
t963 = pkin(7) * t698;
t962 = pkin(7) * t706;
t782 = -t814 + t892;
t707 = t782 * t812 + t899;
t958 = t707 * t810 - t813 * t794;
t957 = t707 * t813 + t810 * t794;
t834 = -t805 * t721 - t731 * t806;
t846 = t805 * t731;
t824 = t721 * t806 - t846;
t861 = t812 * t691;
t934 = -t809 * t824 - t861;
t955 = t810 * t934 + t813 * t834;
t822 = (t748 * t806 - t750 * t805) * t876;
t743 = t812 * t764;
t723 = t806 * t730;
t833 = t723 + t846;
t935 = -t809 * t833 + t743;
t954 = t810 * t935 + t813 * t822;
t953 = -t810 * t834 + t813 * t934;
t952 = -t810 * t822 + t813 * t935;
t840 = t764 + t791;
t951 = qJ(3) * t840;
t808 = sin(qJ(6));
t751 = -qJDD(6) + t764;
t811 = cos(qJ(6));
t678 = -t811 * t748 + t750 * t808;
t680 = t748 * t808 + t750 * t811;
t911 = t678 * t680;
t823 = -t751 - t911;
t950 = t808 * t823;
t947 = t811 * t823;
t777 = g(1) * t813 + g(2) * t810;
t741 = -pkin(1) * t815 + qJDD(1) * pkin(7) - t777;
t921 = qJ(3) * t809;
t927 = pkin(2) * t812;
t842 = -t921 - t927;
t761 = t842 * qJD(1);
t944 = (qJD(1) * t761 + t741) * t812;
t785 = -qJD(6) + t876;
t657 = t678 * t785;
t821 = qJD(6) * t678 - t721 * t808 - t722 * t811;
t943 = t657 - t821;
t940 = -pkin(2) * t854 + t876 * t965;
t775 = pkin(3) * t876 - qJD(2) * qJ(4);
t776 = t810 * g(1) - t813 * g(2);
t831 = -qJDD(1) * pkin(1) - t776;
t818 = t831 - t940 - t951;
t562 = -t775 * t876 + (-pkin(3) * t803 - pkin(7)) * t815 - t922 * t765 + t818;
t711 = t812 * g(3) + t809 * t741;
t828 = -qJDD(2) * pkin(2) - t814 * qJ(3) + t761 * t876 + qJDD(3) + t711;
t586 = -t773 * qJ(4) + (t764 - t791) * pkin(3) + t828;
t504 = -0.2e1 * qJD(4) * t748 + t806 * t562 + t805 * t586;
t939 = -t782 * t809 + t883;
t627 = -t722 * t806 + t730 * t805;
t631 = -t722 * t805 - t723;
t829 = -t631 * t809 + t861;
t937 = t813 * t627 + t810 * t829;
t851 = -t811 * t721 + t808 * t722;
t535 = (qJD(6) + t785) * t680 + t851;
t742 = t809 * t764;
t936 = t812 * t833 + t742;
t907 = t750 * t809;
t862 = t748 * t907;
t933 = t812 * t824 - t862;
t932 = -t627 * t810 + t813 * t829;
t885 = t812 * t741;
t931 = -qJD(1) * (pkin(4) * t907 + t761 * t812) - t885;
t930 = t721 * pkin(4) - 0.2e1 * qJD(5) * t750 - t983;
t676 = t678 ^ 2;
t677 = t680 ^ 2;
t783 = t785 ^ 2;
t928 = pkin(4) + pkin(5);
t926 = pkin(4) * t805;
t925 = pkin(4) * t806;
t877 = t802 + t803;
t768 = t877 * qJDD(1);
t771 = t795 + t892;
t688 = t768 * t810 + t771 * t813;
t924 = pkin(6) * t688;
t923 = t815 * pkin(7);
t579 = t751 - t911;
t920 = t579 * t808;
t919 = t579 * t811;
t740 = -t831 + t923;
t909 = t740 * t809;
t908 = t740 * t812;
t906 = t763 * t809;
t902 = t766 * t812;
t894 = t785 * t808;
t893 = t785 * t811;
t798 = t809 * g(3);
t878 = t814 * pkin(2) + t798;
t839 = qJDD(2) * qJ(3) - t878;
t820 = t765 * pkin(3) - qJ(4) * t892 + qJDD(4) + t839;
t819 = (t965 + t775) * qJD(2) + t820;
t578 = t944 + t819;
t891 = t805 * t578;
t889 = t806 * t578;
t511 = t819 + t930 - t931;
t835 = -pkin(5) * t876 - pkin(8) * t750;
t488 = t721 * pkin(5) + pkin(8) * t929 - t750 * t835 + t511;
t887 = t808 * t488;
t886 = t811 * t488;
t873 = qJD(4) * t750;
t738 = 0.2e1 * t873;
t682 = pkin(4) * t748 - qJ(5) * t750;
t881 = -t805 * t562 + t806 * t586;
t827 = t764 * pkin(4) + qJ(5) * t795 - t750 * t682 - qJDD(5) + t881;
t826 = t738 - t827;
t460 = pkin(5) * t850 - pkin(8) * t663 + t826;
t830 = t764 * qJ(5) + 0.2e1 * qJD(5) * t876 - t748 * t682 + t504;
t479 = -pkin(4) * t795 + t830;
t465 = -pkin(5) * t929 + t721 * pkin(8) + t835 * t876 + t479;
t422 = t808 * t460 + t811 * t465;
t879 = pkin(1) * t771 + pkin(7) * t768;
t869 = qJD(3) * qJD(2);
t864 = t809 * t911;
t863 = t812 * t911;
t853 = qJ(5) * t805 + pkin(3);
t852 = qJ(5) * t806 - qJ(3);
t421 = -t811 * t460 + t808 * t465;
t712 = -t798 + t885;
t616 = t711 * t809 + t812 * t712;
t694 = -t776 * t810 - t813 * t777;
t848 = t810 * t860;
t847 = t813 * t860;
t770 = -t810 * t815 + t866;
t845 = -pkin(6) * t770 - g(3) * t810;
t844 = t812 * t631 + t862;
t841 = pkin(2) * t809 - qJ(3) * t812;
t396 = -t421 * t811 + t422 * t808;
t397 = t808 * t421 + t811 * t422;
t503 = t738 - t881;
t452 = -t806 * t503 + t805 * t504;
t453 = t805 * t503 + t806 * t504;
t615 = t711 * t812 - t712 * t809;
t838 = t779 * t812 + t900;
t693 = t776 * t813 - t777 * t810;
t737 = -0.2e1 * t873;
t825 = t737 + t827;
t617 = t944 + t839 + 0.2e1 * t869;
t817 = t765 * pkin(2) + t740 + t940;
t797 = -0.2e1 * t869;
t816 = -qJD(2) * t775 + t797 - t820 - t930;
t772 = -t795 + t892;
t769 = t813 * t815 + t867;
t759 = t841 * qJDD(1);
t754 = t877 * t870;
t733 = -pkin(6) * t769 + g(3) * t813;
t720 = qJDD(2) * t810 + t754 * t813;
t719 = -t802 * t870 + t743;
t718 = -qJDD(2) * t813 + t754 * t810;
t717 = -t765 * t809 - t803 * t870;
t699 = t791 * t809 + t742;
t697 = (t765 - t854) * t812;
t689 = t768 * t813 - t771 * t810;
t685 = pkin(6) * t689;
t684 = t902 - t906;
t683 = t763 * t812 + t766 * t809;
t674 = t719 * t813 - t848;
t673 = t717 * t813 + t848;
t672 = t719 * t810 + t847;
t671 = t717 * t810 - t847;
t645 = -t677 + t783;
t644 = t676 - t783;
t633 = -t908 - t963;
t632 = -t909 - t986;
t625 = t684 * t813 - t772 * t810;
t624 = t684 * t810 + t772 * t813;
t622 = t711 - t989;
t621 = t712 - t964;
t620 = -t677 - t783;
t613 = qJ(3) * t771 + t828;
t610 = pkin(2) * t771 + t617;
t609 = t817 + t951;
t596 = -t677 + t676;
t595 = -t923 + (-t765 - t766) * pkin(2) + t818;
t594 = (t763 + t840) * qJ(3) + t817;
t593 = t616 * t813 - t740 * t810;
t592 = t616 * t810 + t740 * t813;
t591 = -t783 - t676;
t574 = -qJD(6) * t680 - t851;
t565 = (t678 * t811 - t680 * t808) * t785;
t564 = (-t678 * t808 - t680 * t811) * t785;
t563 = pkin(2) * t773 - qJ(3) * t781 - t828 + t989;
t561 = t964 + pkin(2) * t780 + t797 - t944 + (-qJDD(2) + t774) * qJ(3) + t878;
t558 = -t676 - t677;
t557 = t617 * t812 + t809 * t828;
t556 = t617 * t809 - t812 * t828;
t547 = -pkin(2) * t906 + t594 * t812 + t963;
t546 = -qJ(3) * t902 - t595 * t809 + t986;
t539 = t657 + t821;
t534 = (qJD(6) - t785) * t680 + t851;
t533 = -t610 * t809 + t613 * t812;
t532 = t644 * t811 + t920;
t531 = -t645 * t808 + t947;
t530 = -t644 * t808 + t919;
t529 = -t645 * t811 - t950;
t528 = t680 * t894 - t811 * t821;
t527 = t680 * t893 + t808 * t821;
t526 = -t574 * t808 - t678 * t893;
t525 = -t574 * t811 + t678 * t894;
t520 = -t620 * t808 + t919;
t519 = t620 * t811 + t920;
t517 = t591 * t811 - t950;
t516 = t591 * t808 + t947;
t514 = t557 * t813 - t609 * t810;
t513 = t557 * t810 + t609 * t813;
t510 = -t564 * t806 - t565 * t805;
t509 = t564 * t805 - t565 * t806;
t501 = -t510 * t809 + t751 * t812;
t500 = -pkin(1) * t556 + pkin(2) * t828 - qJ(3) * t617;
t495 = t816 - t944 + (-t658 - t730) * pkin(4);
t494 = t816 + t931 + t983;
t489 = -pkin(7) * t556 - t609 * t841;
t487 = -pkin(4) * t663 - qJ(5) * t659 + t512;
t486 = -t535 * t811 - t539 * t808;
t485 = -t534 * t811 - t808 * t943;
t484 = -t535 * t808 + t539 * t811;
t483 = t534 * t808 - t811 * t943;
t482 = pkin(3) * t941 - t1020 - t891;
t478 = -t530 * t806 - t532 * t805;
t477 = -t529 * t806 - t531 * t805;
t476 = t530 * t805 - t532 * t806;
t475 = t529 * t805 - t531 * t806;
t474 = -t527 * t806 - t528 * t805;
t473 = t527 * t805 - t528 * t806;
t472 = -t525 * t806 - t526 * t805;
t471 = t525 * t805 - t526 * t806;
t470 = t805 * t519 + t520 * t806;
t469 = -t519 * t806 + t520 * t805;
t468 = pkin(3) * t658 + t889 - t973;
t467 = -qJ(5) * t654 + t826;
t466 = (-t654 - t795) * pkin(4) + t830;
t464 = -t1009 - t504;
t462 = t805 * t516 + t517 * t806;
t461 = -t516 * t806 + t517 * t805;
t459 = -t472 * t809 + t863;
t458 = -t474 * t809 - t863;
t455 = t737 + t881 + t966;
t454 = -qJ(3) * t941 - t1040 - t889;
t451 = -t477 * t809 + t539 * t812;
t450 = -t478 * t809 + t535 * t812;
t449 = -qJ(3) * t658 - t891 + t998;
t448 = t469 * t809 - t812 * t943;
t447 = -t469 * t812 - t809 * t943;
t446 = -t806 * t495 + t658 * t853 - t973;
t445 = -pkin(4) * t850 + qJ(5) * t938 + t825 + t966;
t444 = t461 * t809 - t534 * t812;
t443 = -t461 * t812 - t534 * t809;
t442 = -t805 * t494 + (-pkin(3) - t925) * t941 + t1020;
t441 = t452 * t809 + t578 * t812;
t440 = -t452 * t812 + t578 * t809;
t439 = qJ(5) * t942 + (t865 - t795) * pkin(4) + t830 + t1009;
t438 = -pkin(8) * t519 + qJ(5) * t943 - t886;
t437 = t805 * t484 + t486 * t806;
t436 = -t484 * t806 + t486 * t805;
t435 = -t483 * t806 - t485 * t805;
t434 = t483 * t805 - t485 * t806;
t433 = t806 * t479 - t805 * t825;
t432 = t805 * t479 + t806 * t825;
t431 = -pkin(8) * t516 + qJ(5) * t534 - t887;
t430 = t805 * t495 + t658 * t852 + t998;
t429 = -t806 * t494 + (qJ(3) + t926) * t941 + t1040;
t428 = -t435 * t809 + t596 * t812;
t427 = -t453 + t990;
t426 = t436 * t809 - t558 * t812;
t425 = -t436 * t812 - t558 * t809;
t424 = -pkin(8) * t520 + t928 * t943 + t887;
t423 = -pkin(8) * t517 + t534 * t928 - t886;
t420 = t448 * t813 + t470 * t810;
t419 = t448 * t810 - t470 * t813;
t418 = t464 * t812 - t482 * t809 - t1041;
t417 = t432 * t809 + t511 * t812;
t416 = -t432 * t812 + t511 * t809;
t415 = t1016 + t452;
t414 = t455 * t812 - t468 * t809 - t1005;
t413 = pkin(3) * t452 - qJ(3) * t453;
t412 = t444 * t813 + t462 * t810;
t411 = t444 * t810 - t462 * t813;
t410 = -t806 * t466 - t805 * t467 + t990;
t409 = pkin(3) * t578 - t453 * t922;
t408 = t441 * t813 + t453 * t810;
t407 = t441 * t810 - t453 * t813;
t406 = -t427 * t809 + t512 * t812 - t1025;
t405 = t805 * t466 - t806 * t467 + t1016;
t404 = t445 * t812 - t446 * t809 - t1005;
t403 = t439 * t812 - t442 * t809 + t1041;
t402 = t426 * t813 + t437 * t810;
t401 = t426 * t810 - t437 * t813;
t400 = -t410 * t809 + t487 * t812 - t1025;
t399 = t417 * t813 + t433 * t810;
t398 = t417 * t810 - t433 * t813;
t394 = -pkin(1) * t440 - qJ(3) * t578 + t452 * t922;
t393 = pkin(3) * t432 + pkin(4) * t825 - qJ(3) * t433 + qJ(5) * t479;
t392 = -pkin(8) * t396 - qJ(5) * t488;
t391 = -t922 * t433 + (t853 + t925) * t511;
t390 = pkin(3) * t469 - qJ(3) * t470 + qJ(5) * t520 - t519 * t928 + t422;
t389 = -pkin(8) * t484 + qJ(5) * t558 - t396;
t388 = pkin(3) * t436 - qJ(3) * t437 + qJ(5) * t486 - t484 * t928;
t387 = -pkin(8) * t486 + t558 * t928 - t397;
t386 = pkin(3) * t461 - qJ(3) * t462 + qJ(5) * t517 - t516 * t928 + t421;
t385 = -pkin(3) * t943 - t806 * t424 - t805 * t438 - t470 * t922;
t384 = -pkin(8) * t397 - t488 * t928;
t383 = -pkin(3) * t534 - t806 * t423 - t805 * t431 - t462 * t922;
t382 = -pkin(7) * t440 - t409 * t809 + t413 * t812;
t381 = -pkin(1) * t447 + qJ(3) * t943 + t805 * t424 - t806 * t438 + t469 * t922;
t380 = -pkin(1) * t416 + t922 * t432 + (t852 - t926) * t511;
t379 = -pkin(1) * t443 + qJ(3) * t534 + t805 * t423 - t806 * t431 + t461 * t922;
t378 = t805 * t396 + t397 * t806;
t377 = -t396 * t806 + t397 * t805;
t376 = t377 * t809 + t488 * t812;
t375 = -t377 * t812 + t488 * t809;
t374 = -pkin(7) * t416 - t391 * t809 + t393 * t812;
t373 = -pkin(7) * t447 - t385 * t809 + t390 * t812;
t372 = -pkin(7) * t443 - t383 * t809 + t386 * t812;
t371 = -pkin(3) * t558 - t806 * t387 - t805 * t389 - t437 * t922;
t370 = -pkin(1) * t425 + qJ(3) * t558 + t805 * t387 - t806 * t389 + t436 * t922;
t369 = t376 * t813 + t378 * t810;
t368 = t376 * t810 - t378 * t813;
t367 = -pkin(7) * t425 - t371 * t809 + t388 * t812;
t366 = pkin(3) * t488 - t378 * t922 - t806 * t384 - t805 * t392;
t365 = pkin(3) * t377 - qJ(3) * t378 + qJ(5) * t397 - t396 * t928;
t364 = -pkin(1) * t375 - qJ(3) * t488 + t377 * t922 + t805 * t384 - t806 * t392;
t363 = -pkin(7) * t375 + t365 * t812 - t366 * t809;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t769, -t770, 0, t694, 0, 0, 0, 0, 0, 0, -t641, t640, t689, t593, 0, 0, 0, 0, 0, 0, t689, t641, -t640, t514, 0, 0, 0, 0, 0, 0, t992, -t499, t1010, t408, 0, 0, 0, 0, 0, 0, t992, t1010, t499, t399, 0, 0, 0, 0, 0, 0, t412, t420, t402, t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t770, -t769, 0, t693, 0, 0, 0, 0, 0, 0, -t637, t636, t688, t592, 0, 0, 0, 0, 0, 0, t688, t637, -t636, t513, 0, 0, 0, 0, 0, 0, t994, -t497, t1011, t407, 0, 0, 0, 0, 0, 0, t994, t1011, t497, t398, 0, 0, 0, 0, 0, 0, t411, t419, t401, t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t701, t698, 0, -t615, 0, 0, 0, 0, 0, 0, 0, -t701, -t698, t556, 0, 0, 0, 0, 0, 0, t971, t549, t993, t440, 0, 0, 0, 0, 0, 0, t971, t993, -t549, t416, 0, 0, 0, 0, 0, 0, t443, t447, t425, t375; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t770, 0, -t769, 0, t845, -t733, -t693, -pkin(6) * t693, t674, t625, t967, t673, t957, t720, -t622 * t810 + t632 * t813 + t1007, -t621 * t810 + t633 * t813 - t1029, t615 * t813 - t924, -pkin(6) * t592 - (pkin(1) * t810 - pkin(7) * t813) * t615, t720, -t967, -t957, t674, t625, t673, t533 * t813 - t759 * t810 - t924, t546 * t813 - t563 * t810 - t1007, t547 * t813 - t561 * t810 + t1029, -pkin(6) * t513 + t489 * t813 - t500 * t810, t932, t1033, t1031, t953, t1037, t952, t414 * t813 - t449 * t810 - t1026, t418 * t813 - t454 * t810 + t1043, t406 * t813 - t415 * t810 - t1035, -pkin(6) * t407 + t382 * t813 - t394 * t810, t932, t1031, -t1033, t952, -t1037, t953, t404 * t813 - t430 * t810 - t1026, t400 * t813 - t405 * t810 - t1035, t403 * t813 - t429 * t810 - t1043, -pkin(6) * t398 + t374 * t813 - t380 * t810, t458 * t813 - t473 * t810, t428 * t813 - t434 * t810, t451 * t813 - t475 * t810, t459 * t813 - t471 * t810, t450 * t813 - t476 * t810, t501 * t813 - t509 * t810, -pkin(6) * t411 + t372 * t813 - t379 * t810, -pkin(6) * t419 + t373 * t813 - t381 * t810, -pkin(6) * t401 + t367 * t813 - t370 * t810, -pkin(6) * t368 + t363 * t813 - t364 * t810; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t769, 0, t770, 0, t733, t845, t694, pkin(6) * t694, t672, t624, t968, t671, t958, t718, t622 * t813 + t632 * t810 - t1006, t621 * t813 + t633 * t810 + t1028, t615 * t810 + t685, pkin(6) * t593 - (-pkin(1) * t813 - pkin(7) * t810) * t615, t718, -t968, -t958, t672, t624, t671, t533 * t810 + t759 * t813 + t685, t546 * t810 + t563 * t813 + t1006, t547 * t810 + t561 * t813 - t1028, pkin(6) * t514 + t489 * t810 + t500 * t813, t937, t1034, t1032, t955, t1038, t954, t414 * t810 + t449 * t813 + t1027, t418 * t810 + t454 * t813 - t1042, t406 * t810 + t415 * t813 + t1036, pkin(6) * t408 + t382 * t810 + t394 * t813, t937, t1032, -t1034, t954, -t1038, t955, t404 * t810 + t430 * t813 + t1027, t400 * t810 + t405 * t813 + t1036, t403 * t810 + t429 * t813 + t1042, pkin(6) * t399 + t374 * t810 + t380 * t813, t458 * t810 + t473 * t813, t428 * t810 + t434 * t813, t451 * t810 + t475 * t813, t459 * t810 + t471 * t813, t450 * t810 + t476 * t813, t501 * t810 + t509 * t813, pkin(6) * t412 + t372 * t810 + t379 * t813, pkin(6) * t420 + t373 * t810 + t381 * t813, pkin(6) * t402 + t367 * t810 + t370 * t813, pkin(6) * t369 + t363 * t810 + t364 * t813; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, 0, t699, t683, t838, t697, -t939, 0, pkin(1) * t766 + t908 - t962, -pkin(1) * t763 - t909 + t985, t616 + t879, pkin(1) * t740 + pkin(7) * t616, 0, -t838, t939, t699, t683, t697, t610 * t812 + t613 * t809 + t879, t962 + t812 * t595 + (-pkin(1) - t921) * t766, -t985 + t809 * t594 + (pkin(1) + t927) * t763, pkin(7) * t557 + (pkin(1) - t842) * t609, t844, -t996, t1012, t933, -t1014, t936, t455 * t809 + t468 * t812 + t997, t464 * t809 + t482 * t812 - t1039, t427 * t812 + t512 * t809 + t1015, -pkin(1) * t453 + pkin(7) * t441 + t409 * t812 + t413 * t809, t844, t1012, t996, t936, t1014, t933, t445 * t809 + t446 * t812 + t997, t410 * t812 + t487 * t809 + t1015, t439 * t809 + t442 * t812 + t1039, -pkin(1) * t433 + pkin(7) * t417 + t391 * t812 + t393 * t809, t474 * t812 - t864, t435 * t812 + t596 * t809, t477 * t812 + t539 * t809, t472 * t812 + t864, t478 * t812 + t535 * t809, t510 * t812 + t751 * t809, -pkin(1) * t462 + pkin(7) * t444 + t383 * t812 + t386 * t809, -pkin(1) * t470 + pkin(7) * t448 + t385 * t812 + t390 * t809, -pkin(1) * t437 + pkin(7) * t426 + t371 * t812 + t388 * t809, -pkin(1) * t378 + pkin(7) * t376 + t365 * t809 + t366 * t812;];
tauB_reg  = t1;
