% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPPR4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:19:44
% EndTime: 2019-03-09 08:19:56
% DurationCPUTime: 4.44s
% Computational Cost: add. (4185->411), mult. (9628->546), div. (0->0), fcn. (5822->6), ass. (0->241)
t183 = cos(pkin(9));
t182 = sin(pkin(9));
t288 = qJ(5) * t182;
t306 = pkin(4) + pkin(5);
t207 = t306 * t183 + t288;
t200 = pkin(3) + t207;
t186 = sin(qJ(2));
t255 = qJD(1) * qJD(2);
t245 = t186 * t255;
t265 = qJD(2) * t183;
t188 = cos(qJ(2));
t267 = qJD(1) * t188;
t119 = -t182 * t267 + t265;
t258 = t119 * qJD(5);
t178 = qJD(2) * qJD(3);
t271 = -pkin(7) * t245 + t178;
t25 = t200 * t245 + t258 - t271;
t250 = t183 * t267;
t266 = qJD(2) * t182;
t117 = t250 + t266;
t180 = t186 ^ 2;
t181 = t188 ^ 2;
t239 = qJD(1) * (0.2e1 * t180 - t181);
t328 = (t117 * t188 - t183 * t239) * qJD(2);
t307 = pkin(3) + pkin(7);
t185 = sin(qJ(6));
t187 = cos(qJ(6));
t268 = qJD(1) * t186;
t252 = t182 * t268;
t235 = t187 * t252;
t251 = t183 * t268;
t259 = qJD(6) * t187;
t260 = qJD(6) * t185;
t312 = -t182 * t259 + t183 * t260;
t327 = -t185 * t251 + t235 + t312;
t214 = t185 * t182 + t187 * t183;
t108 = t214 * qJD(6);
t203 = t214 * t186;
t291 = -qJD(1) * t203 + t108;
t176 = t182 ^ 2;
t177 = t183 ^ 2;
t286 = t119 * t183;
t326 = (qJD(2) * (t176 - t177) - t117 * t182 + t286) * t268;
t264 = qJD(2) * t186;
t325 = (t182 * (t117 + 0.2e1 * t250) - t286) * t264;
t165 = pkin(7) * t268;
t256 = pkin(3) * t268 + qJD(3) + t165;
t216 = t117 * t185 + t119 * t187;
t323 = t216 ^ 2;
t217 = -t187 * t117 + t119 * t185;
t322 = t217 ^ 2;
t321 = -0.2e1 * t255;
t157 = -qJD(6) + t268;
t283 = t182 * t186;
t201 = -pkin(8) * t283 - t306 * t188;
t196 = t201 * qJD(2);
t244 = t188 * t255;
t155 = pkin(7) * t244;
t168 = pkin(3) * t267;
t101 = t155 + (-qJD(4) + t168) * qJD(2);
t156 = pkin(2) * t245;
t219 = -qJ(3) * t188 + qJ(4) * t186;
t257 = t186 * qJD(3);
t193 = qJD(2) * t219 - t188 * qJD(4) - t257;
t63 = qJD(1) * t193 + t156;
t27 = t183 * t101 - t182 * t63;
t16 = qJD(1) * t196 - t27;
t172 = t186 * qJD(5);
t28 = t182 * t101 + t183 * t63;
t20 = qJ(5) * t244 + qJD(1) * t172 + t28;
t234 = t183 * t245;
t17 = -pkin(8) * t234 + t20;
t184 = -pkin(2) - qJ(4);
t243 = -t186 * qJ(3) - pkin(1);
t114 = t184 * t188 + t243;
t91 = t114 * qJD(1);
t95 = t184 * qJD(2) + t256;
t41 = -t182 * t91 + t183 * t95;
t232 = qJD(5) - t41;
t253 = t306 * t186;
t18 = -t119 * pkin(8) - qJD(1) * t253 + t232;
t42 = t182 * t95 + t183 * t91;
t34 = qJ(5) * t268 + t42;
t21 = pkin(8) * t117 + t34;
t9 = t18 * t187 - t185 * t21;
t3 = qJD(6) * t9 + t185 * t16 + t187 * t17;
t320 = t9 * t157 + t3;
t10 = t18 * t185 + t187 * t21;
t4 = -qJD(6) * t10 + t187 * t16 - t185 * t17;
t319 = -t10 * t157 + t4;
t29 = t185 * (qJD(6) * t119 + t234) - qJD(2) * t235 - t117 * t259;
t294 = t217 * t157;
t318 = t29 + t294;
t293 = t216 * t157;
t316 = t291 * t157;
t315 = t327 * t157;
t116 = t119 ^ 2;
t314 = -t117 ^ 2 - t116;
t313 = t183 * qJD(5) - t256;
t311 = qJD(6) * t216;
t179 = qJD(2) * qJ(3);
t310 = qJD(4) + t179;
t305 = t216 * t217;
t303 = pkin(8) + t184;
t170 = pkin(2) * t268;
t102 = qJD(1) * t219 + t170;
t167 = pkin(7) * t267;
t127 = t167 + t168;
t55 = -t182 * t102 + t183 * t127;
t32 = qJD(1) * t201 - t55;
t56 = t183 * t102 + t182 * t127;
t48 = qJ(5) * t267 + t56;
t37 = -pkin(8) * t251 + t48;
t130 = t303 * t182;
t131 = t303 * t183;
t78 = t130 * t187 - t131 * t185;
t302 = -qJD(4) * t214 + qJD(6) * t78 - t185 * t37 + t187 * t32;
t279 = t187 * t182;
t215 = -t183 * t185 + t279;
t77 = -t130 * t185 - t131 * t187;
t301 = qJD(4) * t215 - qJD(6) * t77 + t185 * t32 + t187 * t37;
t300 = qJD(2) * pkin(2);
t33 = -pkin(4) * t268 + t232;
t298 = t188 * t33;
t297 = t188 * t34;
t296 = t188 * t41;
t295 = t188 * t42;
t290 = -t207 * t268 + t313;
t226 = pkin(4) * t183 + t288;
t289 = t226 * t268 - t313;
t263 = qJD(2) * t188;
t128 = t307 * t263;
t169 = pkin(2) * t264;
t81 = t169 + t193;
t45 = t182 * t128 + t183 * t81;
t143 = t307 * t186;
t73 = t183 * t114 + t182 * t143;
t285 = t157 * t186;
t190 = qJD(1) ^ 2;
t284 = t180 * t190;
t282 = t182 * t188;
t281 = t183 * t186;
t280 = t183 * t188;
t278 = t188 * t190;
t189 = qJD(2) ^ 2;
t277 = t189 * t186;
t276 = t189 * t188;
t274 = t182 * t244 + t183 * t284;
t144 = t307 * t188;
t270 = t180 - t181;
t136 = -pkin(2) * t188 + t243;
t113 = qJD(1) * t136;
t262 = qJD(4) * t117;
t261 = qJD(4) * t119;
t254 = pkin(4) * t263;
t60 = t186 * qJ(5) + t73;
t249 = t184 * t263;
t246 = qJD(5) * t282;
t44 = t183 * t128 - t182 * t81;
t72 = -t182 * t114 + t183 * t143;
t242 = pkin(1) * t321;
t241 = qJD(3) - t300;
t240 = t183 * qJ(5) - qJ(3);
t238 = -t117 + t266;
t237 = -t119 + t265;
t31 = qJ(5) * t263 + t172 + t45;
t197 = qJD(2) * t203;
t30 = qJD(1) * t197 + t311;
t236 = -t30 * t215 + t217 * t291;
t106 = t127 + t310;
t146 = t183 * t244;
t233 = t186 * t244;
t231 = -t182 * t284 + t146;
t133 = pkin(4) * t182 - t240;
t202 = t119 * qJ(5) - t106;
t46 = pkin(4) * t117 - t202;
t229 = -qJD(2) * t133 - qJD(4) + t46;
t228 = qJD(2) * t119 + t274;
t22 = -pkin(4) * t244 - t27;
t224 = t20 * t182 - t22 * t183;
t223 = t28 * t182 + t27 * t183;
t222 = t182 * t33 + t183 * t34;
t221 = -t182 * t41 + t183 * t42;
t43 = pkin(8) * t282 - t253 - t72;
t49 = pkin(8) * t280 + t60;
t13 = -t185 * t49 + t187 * t43;
t14 = t185 * t43 + t187 * t49;
t220 = -t106 + t310;
t213 = -0.2e1 * qJD(2) * t113;
t93 = t117 * t251;
t212 = t119 * t252 - t93;
t211 = -pkin(3) - t226;
t210 = t117 * t267 - t274;
t204 = -qJ(3) * t263 - t257;
t104 = t169 + t204;
t92 = qJD(1) * t204 + t156;
t209 = pkin(7) * t189 + qJD(1) * t104 + t92;
t206 = -t214 * t29 - t216 * t327;
t205 = t237 * t268;
t100 = -pkin(3) * t245 + t271;
t199 = -t10 * t291 - t4 * t214 + t3 * t215 + t327 * t9;
t195 = (-t117 * t183 - t177 * t267) * t264;
t194 = t211 * t245 + t271;
t135 = t165 + t241;
t140 = -t167 - t179;
t192 = t271 * t188 + (t135 * t188 + (t140 + t167) * t186) * qJD(2);
t191 = -t214 * t245 - t311;
t152 = t186 * t278;
t142 = -0.2e1 * t233;
t141 = 0.2e1 * t233;
t139 = t270 * t190;
t129 = t184 * t146;
t126 = t307 * t264;
t124 = -qJ(3) * t267 + t170;
t112 = t270 * t321;
t109 = -t306 * t182 + t240;
t97 = -t185 * t280 + t188 * t279;
t96 = t214 * t188;
t94 = t113 * t268;
t84 = t188 * t226 + t144;
t80 = t238 * t268;
t76 = -t188 * t207 - t144;
t71 = -qJD(2) * t117 + t231;
t70 = (t119 * t182 - t176 * t267) * t264;
t69 = t237 * t252;
t62 = -t119 * t267 + t231;
t61 = -pkin(4) * t186 - t72;
t59 = (t119 * t188 + t182 * t239) * qJD(2);
t58 = t246 + (-pkin(7) + t211) * t264;
t52 = t108 * t188 + t215 * t264;
t51 = t312 * t188 + t197;
t50 = -pkin(4) * t267 - t55;
t47 = -t246 + (pkin(7) + t200) * t264;
t36 = -t44 - t254;
t35 = t194 - t258;
t26 = -t306 * t117 + t202;
t24 = -pkin(8) * t183 * t264 + t31;
t23 = t196 - t44;
t6 = -qJD(6) * t14 - t185 * t24 + t187 * t23;
t5 = qJD(6) * t13 + t185 * t23 + t187 * t24;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t112, t276, t142, -t277, 0, -pkin(7) * t276 + t186 * t242, pkin(7) * t277 + t188 * t242, 0, 0, 0, -t276, t277, t141, t112, t142, t192, t186 * t213 + t188 * t209, -t186 * t209 + t188 * t213, pkin(7) * t192 + t113 * t104 + t92 * t136, t70, -t325, t59, t195, -t328, t141, t100 * t280 - t126 * t117 + (qJD(1) * t44 + t27) * t186 + (-t106 * t281 + t296 + (-t144 * t281 + t188 * t72) * qJD(1)) * qJD(2), -t100 * t282 - t126 * t119 + (-qJD(1) * t45 - t28) * t186 + (t106 * t283 - t295 + (t144 * t283 - t188 * t73) * qJD(1)) * qJD(2), -t45 * t117 - t44 * t119 + (t182 * t27 - t183 * t28) * t188 + ((-t182 * t72 + t183 * t73) * qJD(1) + t221) * t264, t100 * t144 - t106 * t126 + t27 * t72 + t28 * t73 + t41 * t44 + t42 * t45, t70, t59, t325, t141, t328, t195, t35 * t280 + t58 * t117 + (-qJD(1) * t36 - t22) * t186 + (-t46 * t281 - t298 + (-t188 * t61 - t281 * t84) * qJD(1)) * qJD(2), -t31 * t117 + t36 * t119 + (-t182 * t22 - t183 * t20) * t188 + ((t182 * t61 + t183 * t60) * qJD(1) + t222) * t264, t35 * t282 - t58 * t119 + (qJD(1) * t31 + t20) * t186 + (-t46 * t283 + t297 + (t188 * t60 - t283 * t84) * qJD(1)) * qJD(2), t20 * t60 + t22 * t61 + t31 * t34 + t33 * t36 + t35 * t84 + t46 * t58, t216 * t52 + t29 * t97, -t216 * t51 - t217 * t52 - t29 * t96 + t30 * t97, -t52 * t157 + t29 * t186 + (qJD(1) * t97 - t216) * t263, t217 * t51 - t30 * t96, t51 * t157 + t30 * t186 + (-qJD(1) * t96 + t217) * t263 (t157 + t268) * t263, -t6 * t157 - t4 * t186 - t25 * t96 + t26 * t51 + t76 * t30 + t47 * t217 + (-qJD(1) * t13 - t9) * t263, t5 * t157 + t3 * t186 - t25 * t97 + t26 * t52 - t76 * t29 + t47 * t216 + (qJD(1) * t14 + t10) * t263, -t10 * t51 + t13 * t29 - t14 * t30 - t216 * t6 - t217 * t5 + t3 * t96 + t4 * t97 - t52 * t9, t10 * t5 + t13 * t4 + t14 * t3 + t25 * t76 + t26 * t47 + t6 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t152, t139, 0, t152, 0, 0, t190 * pkin(1) * t186, pkin(1) * t278, 0, 0, 0, 0, 0, -t152, t139, t152 ((-t140 - t179) * t186 + (-t135 + t241) * t188) * qJD(1), -t124 * t267 + t94, 0.2e1 * t178 + (t113 * t188 + t124 * t186) * qJD(1), t271 * qJ(3) - t140 * qJD(3) - t113 * t124 + (-t140 * t186 + (-t135 - t300) * t188) * qJD(1) * pkin(7), t69, -t326, t62, -t182 * t234 + t93, t210, -t152, t100 * t182 + t129 + t256 * t117 + (-t296 + (-t183 * t220 - t55) * t186) * qJD(1), t100 * t183 + t256 * t119 + (t186 * t56 + t295 + (t186 * t220 - t249) * t182) * qJD(1), t56 * t117 + t55 * t119 + (-t268 * t42 + t261 - t27) * t183 + (t268 * t41 + t262 - t28) * t182, t100 * qJ(3) - t41 * t55 - t42 * t56 + t223 * t184 + t256 * t106 + (-t182 * t42 - t183 * t41) * qJD(4), t69, t62, t326, -t152, -t210, -t238 * t251, t35 * t182 + t129 + t289 * t117 + (t298 + (t183 * t229 + t50) * t186) * qJD(1), t48 * t117 - t50 * t119 + (-t268 * t34 + t22 + t261) * t183 + (-t268 * t33 - t20 + t262) * t182, -t35 * t183 - t289 * t119 + (-t186 * t48 - t297 + (t186 * t229 + t249) * t182) * qJD(1), t35 * t133 - t33 * t50 - t34 * t48 + t289 * t46 + t224 * t184 + (-t182 * t34 + t183 * t33) * qJD(4), t206, -t214 * t30 - t215 * t29 - t216 * t291 + t217 * t327, t315 + (-qJD(2) * t214 + t216) * t267, t236, t316 + (-qJD(2) * t215 - t217) * t267, -t157 * t267, t109 * t30 - t25 * t215 + t290 * t217 + t291 * t26 + t302 * t157 + (-qJD(2) * t77 + t9) * t267, -t109 * t29 + t25 * t214 + t290 * t216 - t327 * t26 - t301 * t157 + (qJD(2) * t78 - t10) * t267, t216 * t302 + t217 * t301 + t77 * t29 - t78 * t30 + t199, -t10 * t301 + t25 * t109 + t26 * t290 + t3 * t78 - t302 * t9 + t4 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, -t189 - t284, qJD(2) * t140 + t155 + t94, 0, 0, 0, 0, 0, 0, t71, -t228, t212, -t106 * qJD(2) + t221 * t268 + t223, 0, 0, 0, 0, 0, 0, t71, t212, t228, -t46 * qJD(2) + t222 * t268 + t224, 0, 0, 0, 0, 0, 0, -t315 + (t214 * t267 + t217) * qJD(2), -t316 + (t215 * t267 + t216) * qJD(2), t206 + t236, qJD(2) * t26 + t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205, t80, t314, t117 * t42 + t119 * t41 + t100, 0, 0, 0, 0, 0, 0, -t205, t314, -t80, t34 * t117 + (-qJD(5) - t33) * t119 + t194, 0, 0, 0, 0, 0, 0, t191 + t293, t29 - t294, t322 + t323, -t10 * t217 - t9 * t216 - t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117 * t119 - t244 (t117 + t266) * t268, -t116 - t284, t46 * t119 + (-t186 * t34 - t254) * qJD(1) - t27, 0, 0, 0, 0, 0, 0, t157 * t260 - t119 * t217 + (-t185 * t285 - t187 * t263) * qJD(1), t157 * t259 - t119 * t216 + (t185 * t263 - t187 * t285) * qJD(1), t318 * t187 + (-t30 - t293) * t185, -t26 * t119 + t320 * t185 + t319 * t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305, -t322 + t323, -t318, -t305, t191 - t293, -t244, -t216 * t26 + t319, t217 * t26 - t320, 0, 0;];
tauc_reg  = t1;
