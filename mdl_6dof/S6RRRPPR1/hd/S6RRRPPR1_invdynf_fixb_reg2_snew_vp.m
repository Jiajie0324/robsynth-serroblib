% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:11:36
% EndTime: 2019-05-07 04:11:46
% DurationCPUTime: 10.30s
% Computational Cost: add. (101447->343), mult. (232620->486), div. (0->0), fcn. (176447->12), ass. (0->275)
t2340 = cos(qJ(2));
t2325 = t2340 * qJDD(1);
t2336 = sin(qJ(2));
t2384 = qJD(1) * t2336;
t2363 = qJD(2) * t2384;
t2305 = t2325 - t2363;
t2329 = t2340 ^ 2;
t2343 = qJD(1) ^ 2;
t2337 = sin(qJ(1));
t2341 = cos(qJ(1));
t2313 = t2337 * g(1) - t2341 * g(2);
t2351 = qJDD(1) * pkin(1) + t2313;
t2352 = qJD(2) * pkin(2) - pkin(8) * t2384;
t2272 = t2305 * pkin(2) - t2352 * t2384 + t2351 + (pkin(8) * t2329 + pkin(7)) * t2343;
t2335 = sin(qJ(3));
t2339 = cos(qJ(3));
t2298 = (t2335 * t2340 + t2336 * t2339) * qJD(1);
t2383 = qJD(1) * t2340;
t2362 = qJD(2) * t2383;
t2366 = t2336 * qJDD(1);
t2304 = t2362 + t2366;
t2357 = t2335 * t2304 - t2339 * t2305;
t2269 = -qJD(3) * t2298 - t2357;
t2297 = -t2335 * t2384 + t2339 * t2383;
t2296 = t2297 ^ 2;
t2327 = qJD(2) + qJD(3);
t2355 = pkin(3) * t2327 - qJ(4) * t2298;
t2216 = t2269 * pkin(3) + t2296 * qJ(4) - t2298 * t2355 - qJDD(4) + t2272;
t2331 = sin(pkin(10));
t2333 = cos(pkin(10));
t2279 = -t2333 * t2297 + t2298 * t2331;
t2277 = qJD(6) + t2279;
t2395 = qJD(6) + t2277;
t2281 = t2331 * t2297 + t2333 * t2298;
t2330 = sin(pkin(11));
t2332 = cos(pkin(11));
t2266 = t2281 * t2330 - t2332 * t2327;
t2268 = t2281 * t2332 + t2327 * t2330;
t2334 = sin(qJ(6));
t2338 = cos(qJ(6));
t2237 = t2338 * t2266 + t2268 * t2334;
t2394 = t2237 ^ 2;
t2239 = -t2266 * t2334 + t2268 * t2338;
t2393 = t2239 ^ 2;
t2392 = t2266 ^ 2;
t2391 = t2268 ^ 2;
t2390 = t2277 ^ 2;
t2250 = t2279 ^ 2;
t2389 = t2281 ^ 2;
t2388 = t2298 ^ 2;
t2315 = t2327 ^ 2;
t2387 = -2 * qJD(4);
t2386 = -2 * qJD(5);
t2385 = t2336 * g(3);
t2382 = t2237 * t2239;
t2381 = t2266 * t2268;
t2380 = t2268 * t2279;
t2379 = t2279 * t2266;
t2378 = t2279 * t2281;
t2377 = t2281 * t2327;
t2376 = t2297 * t2298;
t2375 = t2327 * t2279;
t2374 = t2327 * t2297;
t2373 = t2329 * t2343;
t2314 = -g(1) * t2341 - g(2) * t2337;
t2300 = -pkin(1) * t2343 + qJDD(1) * pkin(7) + t2314;
t2372 = t2336 * t2300;
t2371 = t2336 * t2343;
t2370 = t2340 * t2300;
t2369 = -qJD(3) + t2327;
t2368 = qJD(6) - t2277;
t2346 = -pkin(2) * t2373 + t2305 * pkin(8) - qJD(2) * t2352 - t2385;
t2349 = pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2371 - g(3);
t2350 = qJDD(2) * pkin(2) - t2304 * pkin(8) - t2372;
t2236 = t2339 * (t2346 + t2370) + t2335 * (t2340 * t2349 + t2350);
t2328 = t2336 ^ 2;
t2367 = t2328 + t2329;
t2365 = qJDD(2) + qJDD(3);
t2204 = -t2296 * pkin(3) + t2269 * qJ(4) - t2327 * t2355 + t2236;
t2235 = -t2335 * t2346 + t2339 * t2350 + (-t2335 * t2300 + t2339 * t2349) * t2340;
t2353 = -t2339 * t2304 - t2335 * t2305;
t2270 = qJD(3) * t2297 - t2353;
t2283 = t2365 + t2376;
t2344 = (-t2270 + t2374) * qJ(4) + t2283 * pkin(3) + t2235;
t2177 = t2333 * t2204 + t2279 * t2387 + t2331 * t2344;
t2247 = pkin(4) * t2279 - qJ(5) * t2281;
t2155 = -pkin(4) * t2315 + qJ(5) * t2365 - t2279 * t2247 + t2177;
t2240 = -t2333 * t2269 + t2270 * t2331;
t2219 = t2240 + t2377;
t2241 = t2269 * t2331 + t2270 * t2333;
t2359 = -t2241 + t2375;
t2180 = pkin(4) * t2219 + qJ(5) * t2359 - t2216;
t2141 = t2332 * t2155 + t2330 * t2180 + t2266 * t2386;
t2361 = t2331 * t2204 - t2333 * t2344;
t2234 = t2332 * t2241 + t2330 * t2365;
t2358 = t2241 * t2330 - t2332 * t2365;
t2360 = -t2334 * t2234 - t2338 * t2358;
t2208 = -t2234 - t2379;
t2209 = t2240 - t2381;
t2140 = -t2330 * t2155 + t2332 * t2180 + t2268 * t2386;
t2354 = -qJDD(6) - t2240;
t2348 = -t2338 * t2234 + t2334 * t2358;
t2154 = qJDD(5) - t2365 * pkin(4) - t2315 * qJ(5) + ((2 * qJD(4)) + t2247) * t2281 + t2361;
t2342 = qJD(2) ^ 2;
t2320 = t2340 * t2371;
t2317 = -t2342 - t2373;
t2316 = -t2328 * t2343 - t2342;
t2312 = -qJDD(2) + t2320;
t2311 = qJDD(2) + t2320;
t2310 = t2367 * t2343;
t2309 = -qJDD(1) * t2337 - t2341 * t2343;
t2308 = qJDD(1) * t2341 - t2337 * t2343;
t2307 = t2367 * qJDD(1);
t2306 = t2325 - 0.2e1 * t2363;
t2303 = 0.2e1 * t2362 + t2366;
t2299 = t2343 * pkin(7) + t2351;
t2291 = t2370 - t2385;
t2290 = -t2340 * g(3) - t2372;
t2289 = -t2315 - t2388;
t2288 = t2312 * t2340 - t2316 * t2336;
t2287 = -t2311 * t2336 + t2317 * t2340;
t2286 = t2312 * t2336 + t2316 * t2340;
t2285 = t2311 * t2340 + t2317 * t2336;
t2284 = -t2365 + t2376;
t2282 = -t2315 - t2296;
t2273 = -t2315 - t2389;
t2271 = -t2296 - t2388;
t2260 = -t2290 * t2336 + t2291 * t2340;
t2259 = t2290 * t2340 + t2291 * t2336;
t2256 = t2284 * t2339 - t2289 * t2335;
t2255 = t2284 * t2335 + t2289 * t2339;
t2254 = t2297 * t2369 + t2353;
t2253 = t2270 + t2374;
t2252 = t2298 * t2369 - t2357;
t2251 = (qJD(3) + t2327) * t2298 + t2357;
t2249 = t2282 * t2339 - t2283 * t2335;
t2248 = t2282 * t2335 + t2283 * t2339;
t2246 = -t2365 - t2378;
t2245 = t2365 - t2378;
t2244 = -t2250 - t2315;
t2242 = pkin(5) * t2279 - pkin(9) * t2268;
t2232 = -t2389 - t2250;
t2230 = -t2250 - t2391;
t2229 = t2246 * t2333 - t2273 * t2331;
t2228 = t2246 * t2331 + t2273 * t2333;
t2227 = -t2250 - t2392;
t2226 = -t2255 * t2336 + t2256 * t2340;
t2225 = t2255 * t2340 + t2256 * t2336;
t2224 = t2252 * t2339 - t2254 * t2335;
t2223 = t2252 * t2335 + t2254 * t2339;
t2222 = -t2241 - t2375;
t2220 = -t2240 + t2377;
t2217 = -t2391 - t2392;
t2215 = -t2248 * t2336 + t2249 * t2340;
t2214 = t2248 * t2340 + t2249 * t2336;
t2213 = t2244 * t2333 - t2245 * t2331;
t2212 = t2244 * t2331 + t2245 * t2333;
t2211 = -t2390 - t2393;
t2210 = -t2240 - t2381;
t2207 = t2234 - t2379;
t2206 = -t2358 + t2380;
t2205 = t2358 + t2380;
t2200 = -t2235 * t2335 + t2236 * t2339;
t2199 = t2235 * t2339 + t2236 * t2335;
t2198 = -t2390 - t2394;
t2197 = -t2228 * t2335 + t2229 * t2339;
t2196 = t2228 * t2339 + t2229 * t2335;
t2195 = -t2223 * t2336 + t2224 * t2340;
t2194 = t2223 * t2340 + t2224 * t2336;
t2193 = t2220 * t2333 - t2222 * t2331;
t2192 = t2220 * t2331 + t2222 * t2333;
t2191 = t2354 - t2382;
t2190 = -t2354 - t2382;
t2189 = -t2393 - t2394;
t2188 = t2210 * t2332 - t2230 * t2330;
t2187 = t2210 * t2330 + t2230 * t2332;
t2186 = -t2212 * t2335 + t2213 * t2339;
t2185 = t2212 * t2339 + t2213 * t2335;
t2184 = -t2209 * t2330 + t2227 * t2332;
t2183 = t2209 * t2332 + t2227 * t2330;
t2182 = t2206 * t2332 - t2208 * t2330;
t2181 = t2206 * t2330 + t2208 * t2332;
t2176 = t2281 * t2387 - t2361;
t2175 = -t2199 * t2336 + t2200 * t2340;
t2174 = t2199 * t2340 + t2200 * t2336;
t2173 = t2237 * t2368 + t2348;
t2172 = -t2237 * t2395 - t2348;
t2171 = -t2239 * t2368 + t2360;
t2170 = t2239 * t2395 - t2360;
t2169 = t2191 * t2338 - t2211 * t2334;
t2168 = t2191 * t2334 + t2211 * t2338;
t2167 = t2188 * t2333 + t2207 * t2331;
t2166 = t2188 * t2331 - t2207 * t2333;
t2165 = t2184 * t2333 + t2205 * t2331;
t2164 = t2184 * t2331 - t2205 * t2333;
t2163 = -t2196 * t2336 + t2197 * t2340;
t2162 = t2196 * t2340 + t2197 * t2336;
t2161 = t2182 * t2333 + t2217 * t2331;
t2160 = t2182 * t2331 - t2217 * t2333;
t2159 = -t2190 * t2334 + t2198 * t2338;
t2158 = t2190 * t2338 + t2198 * t2334;
t2157 = -t2192 * t2335 + t2193 * t2339;
t2156 = t2192 * t2339 + t2193 * t2335;
t2152 = -t2185 * t2336 + t2186 * t2340;
t2151 = t2185 * t2340 + t2186 * t2336;
t2150 = pkin(5) * t2358 - pkin(9) * t2392 + t2268 * t2242 + t2154;
t2149 = -t2176 * t2331 + t2177 * t2333;
t2148 = t2176 * t2333 + t2177 * t2331;
t2147 = t2171 * t2338 - t2173 * t2334;
t2146 = t2171 * t2334 + t2173 * t2338;
t2145 = -t2168 * t2330 + t2169 * t2332;
t2144 = t2168 * t2332 + t2169 * t2330;
t2143 = -t2166 * t2335 + t2167 * t2339;
t2142 = t2166 * t2339 + t2167 * t2335;
t2139 = -t2164 * t2335 + t2165 * t2339;
t2138 = t2164 * t2339 + t2165 * t2335;
t2137 = -t2160 * t2335 + t2161 * t2339;
t2136 = t2160 * t2339 + t2161 * t2335;
t2135 = -t2158 * t2330 + t2159 * t2332;
t2134 = t2158 * t2332 + t2159 * t2330;
t2133 = -t2156 * t2336 + t2157 * t2340;
t2132 = t2156 * t2340 + t2157 * t2336;
t2131 = -pkin(5) * t2392 - pkin(9) * t2358 - t2279 * t2242 + t2141;
t2130 = pkin(5) * t2209 + pkin(9) * t2208 + t2140;
t2129 = t2145 * t2333 + t2172 * t2331;
t2128 = t2145 * t2331 - t2172 * t2333;
t2127 = t2135 * t2333 + t2170 * t2331;
t2126 = t2135 * t2331 - t2170 * t2333;
t2125 = -t2148 * t2335 + t2149 * t2339;
t2124 = t2148 * t2339 + t2149 * t2335;
t2123 = -t2146 * t2330 + t2147 * t2332;
t2122 = t2146 * t2332 + t2147 * t2330;
t2121 = -t2142 * t2336 + t2143 * t2340;
t2120 = t2142 * t2340 + t2143 * t2336;
t2119 = -t2140 * t2330 + t2141 * t2332;
t2118 = t2140 * t2332 + t2141 * t2330;
t2117 = -t2138 * t2336 + t2139 * t2340;
t2116 = t2138 * t2340 + t2139 * t2336;
t2115 = -t2136 * t2336 + t2137 * t2340;
t2114 = t2136 * t2340 + t2137 * t2336;
t2113 = t2123 * t2333 + t2189 * t2331;
t2112 = t2123 * t2331 - t2189 * t2333;
t2111 = t2119 * t2333 + t2154 * t2331;
t2110 = t2119 * t2331 - t2154 * t2333;
t2109 = t2130 * t2334 + t2131 * t2338;
t2108 = t2130 * t2338 - t2131 * t2334;
t2107 = -t2128 * t2335 + t2129 * t2339;
t2106 = t2128 * t2339 + t2129 * t2335;
t2105 = -t2126 * t2335 + t2127 * t2339;
t2104 = t2126 * t2339 + t2127 * t2335;
t2103 = -t2124 * t2336 + t2125 * t2340;
t2102 = t2124 * t2340 + t2125 * t2336;
t2101 = -t2112 * t2335 + t2113 * t2339;
t2100 = t2112 * t2339 + t2113 * t2335;
t2099 = -t2110 * t2335 + t2111 * t2339;
t2098 = t2110 * t2339 + t2111 * t2335;
t2097 = -t2108 * t2334 + t2109 * t2338;
t2096 = t2108 * t2338 + t2109 * t2334;
t2095 = -t2106 * t2336 + t2107 * t2340;
t2094 = t2106 * t2340 + t2107 * t2336;
t2093 = -t2104 * t2336 + t2105 * t2340;
t2092 = t2104 * t2340 + t2105 * t2336;
t2091 = -t2100 * t2336 + t2101 * t2340;
t2090 = t2100 * t2340 + t2101 * t2336;
t2089 = -t2098 * t2336 + t2099 * t2340;
t2088 = t2098 * t2340 + t2099 * t2336;
t2087 = -t2096 * t2330 + t2097 * t2332;
t2086 = t2096 * t2332 + t2097 * t2330;
t2085 = t2087 * t2333 + t2150 * t2331;
t2084 = t2087 * t2331 - t2150 * t2333;
t2083 = -t2084 * t2335 + t2085 * t2339;
t2082 = t2084 * t2339 + t2085 * t2335;
t2081 = -t2082 * t2336 + t2083 * t2340;
t2080 = t2082 * t2340 + t2083 * t2336;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2309, -t2308, 0, -t2313 * t2337 + t2314 * t2341, 0, 0, 0, 0, 0, 0, t2287 * t2341 - t2306 * t2337, t2288 * t2341 + t2303 * t2337, t2307 * t2341 - t2310 * t2337, t2260 * t2341 - t2299 * t2337, 0, 0, 0, 0, 0, 0, t2215 * t2341 + t2251 * t2337, t2226 * t2341 + t2253 * t2337, t2195 * t2341 + t2271 * t2337, t2175 * t2341 - t2272 * t2337, 0, 0, 0, 0, 0, 0, t2152 * t2341 + t2219 * t2337, t2163 * t2341 - t2337 * t2359, t2133 * t2341 + t2232 * t2337, t2103 * t2341 - t2216 * t2337, 0, 0, 0, 0, 0, 0, t2117 * t2341 + t2183 * t2337, t2121 * t2341 + t2187 * t2337, t2115 * t2341 + t2181 * t2337, t2089 * t2341 + t2118 * t2337, 0, 0, 0, 0, 0, 0, t2093 * t2341 + t2134 * t2337, t2095 * t2341 + t2144 * t2337, t2091 * t2341 + t2122 * t2337, t2081 * t2341 + t2086 * t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2308, t2309, 0, t2313 * t2341 + t2314 * t2337, 0, 0, 0, 0, 0, 0, t2287 * t2337 + t2306 * t2341, t2288 * t2337 - t2303 * t2341, t2307 * t2337 + t2310 * t2341, t2260 * t2337 + t2299 * t2341, 0, 0, 0, 0, 0, 0, t2215 * t2337 - t2251 * t2341, t2226 * t2337 - t2253 * t2341, t2195 * t2337 - t2271 * t2341, t2175 * t2337 + t2272 * t2341, 0, 0, 0, 0, 0, 0, t2152 * t2337 - t2219 * t2341, t2163 * t2337 + t2341 * t2359, t2133 * t2337 - t2232 * t2341, t2103 * t2337 + t2216 * t2341, 0, 0, 0, 0, 0, 0, t2117 * t2337 - t2183 * t2341, t2121 * t2337 - t2187 * t2341, t2115 * t2337 - t2181 * t2341, t2089 * t2337 - t2118 * t2341, 0, 0, 0, 0, 0, 0, t2093 * t2337 - t2134 * t2341, t2095 * t2337 - t2144 * t2341, t2091 * t2337 - t2122 * t2341, t2081 * t2337 - t2086 * t2341; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2285, t2286, 0, t2259, 0, 0, 0, 0, 0, 0, t2214, t2225, t2194, t2174, 0, 0, 0, 0, 0, 0, t2151, t2162, t2132, t2102, 0, 0, 0, 0, 0, 0, t2116, t2120, t2114, t2088, 0, 0, 0, 0, 0, 0, t2092, t2094, t2090, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2343, -qJDD(1), 0, t2314, 0, 0, 0, 0, 0, 0, t2287, t2288, t2307, t2260, 0, 0, 0, 0, 0, 0, t2215, t2226, t2195, t2175, 0, 0, 0, 0, 0, 0, t2152, t2163, t2133, t2103, 0, 0, 0, 0, 0, 0, t2117, t2121, t2115, t2089, 0, 0, 0, 0, 0, 0, t2093, t2095, t2091, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2343, 0, t2313, 0, 0, 0, 0, 0, 0, t2306, -t2303, t2310, t2299, 0, 0, 0, 0, 0, 0, -t2251, -t2253, -t2271, t2272, 0, 0, 0, 0, 0, 0, -t2219, t2359, -t2232, t2216, 0, 0, 0, 0, 0, 0, -t2183, -t2187, -t2181, -t2118, 0, 0, 0, 0, 0, 0, -t2134, -t2144, -t2122, -t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2285, t2286, 0, t2259, 0, 0, 0, 0, 0, 0, t2214, t2225, t2194, t2174, 0, 0, 0, 0, 0, 0, t2151, t2162, t2132, t2102, 0, 0, 0, 0, 0, 0, t2116, t2120, t2114, t2088, 0, 0, 0, 0, 0, 0, t2092, t2094, t2090, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2312, t2325, t2291, 0, 0, 0, 0, 0, 0, t2249, t2256, t2224, t2200, 0, 0, 0, 0, 0, 0, t2186, t2197, t2157, t2125, 0, 0, 0, 0, 0, 0, t2139, t2143, t2137, t2099, 0, 0, 0, 0, 0, 0, t2105, t2107, t2101, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, t2316, -t2366, t2290, 0, 0, 0, 0, 0, 0, t2248, t2255, t2223, t2199, 0, 0, 0, 0, 0, 0, t2185, t2196, t2156, t2124, 0, 0, 0, 0, 0, 0, t2138, t2142, t2136, t2098, 0, 0, 0, 0, 0, 0, t2104, t2106, t2100, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2306, t2303, -t2310, -t2299, 0, 0, 0, 0, 0, 0, t2251, t2253, t2271, -t2272, 0, 0, 0, 0, 0, 0, t2219, -t2359, t2232, -t2216, 0, 0, 0, 0, 0, 0, t2183, t2187, t2181, t2118, 0, 0, 0, 0, 0, 0, t2134, t2144, t2122, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2282, t2284, t2252, t2236, 0, 0, 0, 0, 0, 0, t2213, t2229, t2193, t2149, 0, 0, 0, 0, 0, 0, t2165, t2167, t2161, t2111, 0, 0, 0, 0, 0, 0, t2127, t2129, t2113, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2283, t2289, t2254, t2235, 0, 0, 0, 0, 0, 0, t2212, t2228, t2192, t2148, 0, 0, 0, 0, 0, 0, t2164, t2166, t2160, t2110, 0, 0, 0, 0, 0, 0, t2126, t2128, t2112, t2084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2251, t2253, t2271, -t2272, 0, 0, 0, 0, 0, 0, t2219, -t2359, t2232, -t2216, 0, 0, 0, 0, 0, 0, t2183, t2187, t2181, t2118, 0, 0, 0, 0, 0, 0, t2134, t2144, t2122, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, t2246, t2220, t2177, 0, 0, 0, 0, 0, 0, t2184, t2188, t2182, t2119, 0, 0, 0, 0, 0, 0, t2135, t2145, t2123, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245, t2273, t2222, t2176, 0, 0, 0, 0, 0, 0, -t2205, -t2207, -t2217, -t2154, 0, 0, 0, 0, 0, 0, -t2170, -t2172, -t2189, -t2150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2219, -t2359, t2232, -t2216, 0, 0, 0, 0, 0, 0, t2183, t2187, t2181, t2118, 0, 0, 0, 0, 0, 0, t2134, t2144, t2122, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2227, t2210, t2206, t2141, 0, 0, 0, 0, 0, 0, t2159, t2169, t2147, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2230, t2208, t2140, 0, 0, 0, 0, 0, 0, t2158, t2168, t2146, t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2205, t2207, t2217, t2154, 0, 0, 0, 0, 0, 0, t2170, t2172, t2189, t2150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2198, t2191, t2171, t2109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2190, t2211, t2173, t2108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2170, t2172, t2189, t2150;];
f_new_reg  = t1;
