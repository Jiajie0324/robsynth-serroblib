% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:23:13
% EndTime: 2019-03-09 15:23:34
% DurationCPUTime: 11.26s
% Computational Cost: add. (23404->689), mult. (56480->858), div. (0->0), fcn. (43329->18), ass. (0->357)
t331 = qJD(2) + qJD(3);
t335 = sin(pkin(11));
t337 = cos(pkin(11));
t340 = sin(qJ(3));
t341 = sin(qJ(2));
t432 = qJD(1) * t341;
t416 = t340 * t432;
t343 = cos(qJ(3));
t344 = cos(qJ(2));
t441 = t343 * t344;
t238 = -qJD(1) * t441 + t416;
t262 = t340 * t344 + t341 * t343;
t240 = t262 * qJD(1);
t336 = sin(pkin(10));
t482 = cos(pkin(10));
t369 = -t336 * t238 + t240 * t482;
t176 = t331 * t335 + t337 * t369;
t339 = sin(qJ(6));
t502 = cos(qJ(6));
t183 = t335 * t369;
t509 = t331 * t337 - t183;
t371 = t502 * t509;
t126 = -t176 * t339 + t371;
t521 = t126 ^ 2;
t189 = t482 * t238 + t240 * t336;
t186 = qJD(6) + t189;
t520 = t126 * t186;
t125 = t176 * t502 + t339 * t509;
t519 = t125 ^ 2;
t334 = qJ(2) + qJ(3);
t323 = sin(t334);
t324 = cos(t334);
t342 = sin(qJ(1));
t345 = cos(qJ(1));
t395 = g(1) * t345 + g(2) * t342;
t518 = -g(3) * t324 + t323 * t395;
t516 = t189 * t369;
t257 = t335 * t502 + t339 * t337;
t237 = t257 * qJD(6);
t514 = t257 * t189 + t237;
t419 = t502 * t337;
t370 = -t339 * t335 + t419;
t429 = qJD(6) * t339;
t507 = qJD(6) * t419 - t335 * t429;
t513 = t370 * t189 + t507;
t322 = pkin(10) + t334;
t309 = sin(t322);
t452 = t309 * t345;
t453 = t309 * t342;
t512 = g(1) * t452 + g(2) * t453;
t428 = qJD(1) * qJD(2);
t413 = t344 * t428;
t427 = t341 * qJDD(1);
t511 = -t413 - t427;
t503 = pkin(8) + pkin(7);
t326 = t344 * pkin(2);
t317 = t326 + pkin(1);
t510 = t369 * t509;
t285 = t503 * t344;
t270 = qJD(1) * t285;
t245 = t340 * t270;
t284 = t503 * t341;
t268 = qJD(1) * t284;
t489 = qJD(2) * pkin(2);
t252 = -t268 + t489;
t195 = t343 * t252 - t245;
t232 = t240 * qJ(4);
t171 = t195 - t232;
t203 = -t343 * t268 - t245;
t178 = -t232 + t203;
t249 = t343 * t270;
t202 = t268 * t340 - t249;
t480 = qJ(4) * t238;
t373 = t202 + t480;
t409 = t482 * t340;
t437 = -t178 * t336 + t482 * t373 + (t336 * t343 + t409) * qJD(3) * pkin(2);
t310 = cos(t322);
t490 = t337 * pkin(5);
t311 = pkin(4) + t490;
t338 = -pkin(9) - qJ(5);
t382 = -t309 * t338 + t310 * t311;
t213 = -t340 * t284 + t343 * t285;
t391 = t310 * pkin(4) + t309 * qJ(5);
t508 = g(1) * t342 - g(2) * t345;
t297 = g(3) * t310;
t506 = t297 - t512;
t442 = t340 * t341;
t392 = t331 * t442;
t430 = qJD(3) * t343;
t418 = t344 * t430;
t426 = t344 * qJDD(1);
t404 = -qJD(1) * t418 - t340 * t426 + t343 * t511;
t173 = qJD(1) * t392 + t404;
t205 = t331 * t262;
t390 = t340 * t427 - t343 * t426;
t174 = qJD(1) * t205 + t390;
t118 = -t173 * t482 - t336 * t174;
t328 = qJDD(2) + qJDD(3);
t103 = t335 * t118 - t328 * t337;
t104 = t118 * t337 + t328 * t335;
t40 = -qJD(6) * t371 + t339 * t103 - t502 * t104 + t176 * t429;
t505 = t125 * t514 + t370 * t40;
t117 = -t173 * t336 + t482 * t174;
t114 = qJDD(6) + t117;
t504 = t257 * t114 + t186 * t513;
t196 = t252 * t340 + t249;
t207 = qJDD(2) * pkin(2) + t503 * t511;
t414 = t341 * t428;
t211 = t503 * (-t414 + t426);
t136 = -qJD(3) * t196 + t343 * t207 - t340 * t211;
t83 = t328 * pkin(3) + t173 * qJ(4) - t240 * qJD(4) + t136;
t431 = qJD(3) * t340;
t405 = -t340 * t207 - t343 * t211 - t252 * t430 + t270 * t431;
t87 = -qJ(4) * t174 - qJD(4) * t238 - t405;
t44 = t336 * t83 + t482 * t87;
t38 = qJ(5) * t328 + qJD(5) * t331 + t44;
t233 = pkin(2) * t414 - qJDD(1) * t317;
t150 = t174 * pkin(3) + qJDD(4) + t233;
t47 = t117 * pkin(4) - t118 * qJ(5) - qJD(5) * t369 + t150;
t13 = t335 * t47 + t337 * t38;
t10 = -pkin(9) * t103 + t13;
t161 = pkin(3) * t331 + t171;
t172 = t196 - t480;
t410 = t482 * t172;
t108 = t336 * t161 + t410;
t102 = qJ(5) * t331 + t108;
t283 = t317 * qJD(1);
t208 = t238 * pkin(3) + qJD(4) - t283;
t120 = t189 * pkin(4) - qJ(5) * t369 + t208;
t60 = -t102 * t335 + t337 * t120;
t48 = pkin(5) * t189 - pkin(9) * t176 + t60;
t61 = t337 * t102 + t335 * t120;
t52 = pkin(9) * t509 + t61;
t378 = t339 * t52 - t48 * t502;
t12 = -t335 * t38 + t337 * t47;
t9 = pkin(5) * t117 - pkin(9) * t104 + t12;
t3 = -qJD(6) * t378 + t10 * t502 + t339 * t9;
t501 = pkin(3) * t240;
t500 = pkin(3) * t323;
t499 = pkin(5) * t103;
t314 = pkin(3) * t324;
t435 = t314 + t326;
t267 = pkin(1) + t435;
t251 = t345 * t267;
t496 = g(2) * t251;
t330 = pkin(11) + qJ(6);
t320 = sin(t330);
t494 = g(3) * t320;
t321 = cos(t330);
t493 = g(3) * t321;
t491 = g(3) * t344;
t325 = t337 * pkin(9);
t420 = qJD(2) * t503;
t269 = t341 * t420;
t271 = t344 * t420;
t158 = -t343 * t269 - t340 * t271 - t284 * t430 - t285 * t431;
t261 = -t441 + t442;
t129 = -qJ(4) * t205 - qJD(4) * t261 + t158;
t159 = -qJD(3) * t213 + t340 * t269 - t343 * t271;
t204 = -qJD(2) * t441 + t392 - t418;
t351 = t204 * qJ(4) - t262 * qJD(4) + t159;
t67 = t129 * t482 + t336 * t351;
t153 = -t204 * t336 + t205 * t482;
t154 = -t204 * t482 - t336 * t205;
t319 = t341 * t489;
t194 = pkin(3) * t205 + t319;
t199 = -t336 * t261 + t262 * t482;
t76 = pkin(4) * t153 - qJ(5) * t154 - qJD(5) * t199 + t194;
t34 = t335 * t76 + t337 * t67;
t43 = -t336 * t87 + t482 * t83;
t11 = t13 * t337;
t316 = pkin(2) * t343 + pkin(3);
t231 = pkin(2) * t409 + t336 * t316;
t225 = qJ(5) + t231;
t209 = (-pkin(9) - t225) * t335;
t458 = t225 * t337;
t210 = t325 + t458;
t155 = t209 * t502 - t339 * t210;
t304 = t336 * t340 * pkin(2);
t229 = t482 * pkin(2) * t430 - qJD(3) * t304;
t222 = qJD(5) + t229;
t461 = t189 * t337;
t401 = pkin(5) * t369 + pkin(9) * t461;
t131 = t178 * t482 + t336 * t373;
t137 = pkin(4) * t369 + qJ(5) * t189 + t501;
t318 = pkin(2) * t432;
t132 = t137 + t318;
t72 = -t131 * t335 + t337 * t132;
t50 = t401 + t72;
t462 = t189 * t335;
t425 = pkin(9) * t462;
t73 = t337 * t131 + t335 * t132;
t58 = t425 + t73;
t487 = qJD(6) * t155 + t222 * t370 - t339 * t50 - t502 * t58;
t156 = t339 * t209 + t210 * t502;
t486 = -qJD(6) * t156 - t222 * t257 + t339 * t58 - t50 * t502;
t307 = pkin(3) * t336 + qJ(5);
t241 = (-pkin(9) - t307) * t335;
t455 = t307 * t337;
t242 = t325 + t455;
t192 = t241 * t502 - t339 * t242;
t165 = t336 * t172;
t116 = t171 * t482 - t165;
t70 = -t116 * t335 + t337 * t137;
t49 = t401 + t70;
t71 = t337 * t116 + t335 * t137;
t57 = t425 + t71;
t485 = qJD(5) * t370 + qJD(6) * t192 - t339 * t49 - t502 * t57;
t193 = t339 * t241 + t242 * t502;
t484 = -qJD(5) * t257 - qJD(6) * t193 + t339 * t57 - t49 * t502;
t182 = pkin(5) * t462;
t483 = t182 + t437;
t481 = pkin(7) * qJDD(1);
t107 = t161 * t482 - t165;
t101 = -t331 * pkin(4) + qJD(5) - t107;
t479 = t101 * t189;
t478 = t103 * t337;
t477 = t104 * t335;
t476 = t104 * t337;
t115 = t171 * t336 + t410;
t475 = t115 * t331;
t474 = t126 * t369;
t473 = t125 * t126;
t472 = t125 * t369;
t471 = t154 * t335;
t470 = t176 * t369;
t469 = t176 * t335;
t468 = t186 * t369;
t467 = t369 ^ 2;
t466 = t369 * t331;
t464 = t189 ^ 2;
t463 = t189 * t331;
t459 = t199 * t335;
t457 = t240 * t238;
t451 = t310 * t335;
t450 = t310 * t342;
t449 = t310 * t345;
t448 = t320 * t342;
t447 = t320 * t345;
t446 = t321 * t342;
t445 = t321 * t345;
t440 = t337 * t117 - t189 * t462;
t198 = t261 * t482 + t262 * t336;
t220 = pkin(3) * t261 - t317;
t143 = pkin(4) * t198 - qJ(5) * t199 + t220;
t187 = -qJ(4) * t261 + t213;
t212 = -t343 * t284 - t285 * t340;
t372 = -qJ(4) * t262 + t212;
t145 = t187 * t482 + t336 * t372;
t80 = t335 * t143 + t337 * t145;
t436 = t229 - t131;
t332 = t341 ^ 2;
t333 = t344 ^ 2;
t434 = t332 - t333;
t433 = t332 + t333;
t348 = qJD(1) ^ 2;
t424 = t341 * t348 * t344;
t423 = g(1) * t449 + g(2) * t450 + g(3) * t309;
t422 = t314 + t391;
t42 = -pkin(4) * t328 + qJDD(5) - t43;
t415 = -t42 - t297;
t329 = -qJ(4) - t503;
t412 = pkin(5) * t335 - t329;
t33 = -t335 * t67 + t337 * t76;
t408 = t502 * t103 + t339 * t104;
t407 = t437 * t331;
t66 = t129 * t336 - t482 * t351;
t79 = t337 * t143 - t145 * t335;
t144 = t187 * t336 - t482 * t372;
t402 = t341 * t413;
t400 = -g(1) * t453 + g(2) * t452;
t41 = qJD(6) * t125 + t408;
t399 = t126 * t513 - t257 * t41;
t312 = -pkin(3) * t482 - pkin(4);
t398 = t370 * t114 - t186 * t514;
t397 = t337 * t512 - t369 * t60;
t396 = -pkin(4) * t309 - t500;
t393 = t314 + t382;
t389 = -t12 * t337 - t13 * t335;
t388 = -t12 * t335 + t11;
t387 = t335 * t60 - t337 * t61;
t230 = t316 * t482 - t304;
t386 = t337 * t509;
t385 = -t107 * t189 + t108 * t369;
t384 = t117 * t198 + t153 * t189;
t383 = t117 * t199 + t154 * t189;
t381 = -t309 * t311 - t310 * t338;
t380 = -t60 * t461 - t61 * t462 + t11 - t423;
t226 = -pkin(4) - t230;
t59 = pkin(5) * t198 - t199 * t325 + t79;
t64 = -pkin(9) * t459 + t80;
t28 = -t339 * t64 + t502 * t59;
t19 = t339 * t48 + t502 * t52;
t29 = t339 * t59 + t502 * t64;
t377 = t309 * t395;
t376 = t508 * t310;
t375 = -0.2e1 * pkin(1) * t428 - pkin(7) * qJDD(2);
t374 = t117 * t335 + t189 * t461;
t366 = -t208 * t369 + t43 - t506;
t365 = t189 * t208 + t423 - t44;
t363 = -t117 * t225 - t189 * t222 + t479;
t362 = -qJD(5) * t189 - t117 * t307 + t479;
t361 = t386 - t469;
t360 = t42 + t506;
t347 = qJD(2) ^ 2;
t359 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t347 + t508;
t358 = pkin(1) * t348 + t395 - t481;
t357 = t101 * t154 + t199 * t42 - t395;
t356 = g(3) * t323 - t238 * t283 + t324 * t395 + t405;
t4 = -qJD(6) * t19 - t339 * t10 + t502 * t9;
t355 = -t19 * t514 - t4 * t257 + t3 * t370 + t378 * t513 - t423;
t30 = t42 + t499;
t84 = -pkin(5) * t509 + t101;
t354 = -t30 * t370 - t310 * t493 + t321 * t512 + t378 * t369 + t514 * t84;
t353 = g(3) * t451 + t369 * t61 + (-t377 + t42) * t335;
t352 = t19 * t369 + t30 * t257 + t310 * t494 - t320 * t377 + t513 * t84;
t350 = t283 * t240 + t136 + t518;
t275 = qJ(5) * t449;
t274 = qJ(5) * t450;
t273 = t312 - t490;
t272 = -pkin(2) * t341 - t500;
t254 = t345 * t272;
t253 = t342 * t272;
t219 = t226 - t490;
t218 = t310 * t445 + t448;
t217 = -t310 * t447 + t446;
t216 = -t310 * t446 + t447;
t215 = t310 * t448 + t445;
t214 = t318 + t501;
t179 = -t238 ^ 2 + t240 ^ 2;
t151 = -t404 + (t238 - t416) * t331;
t148 = t370 * t199;
t147 = t257 * t199;
t94 = t335 * t103;
t93 = pkin(5) * t459 + t144;
t91 = t118 + t463;
t90 = -t117 + t466;
t89 = t115 - t182;
t88 = -t464 + t467;
t69 = t176 * t461 + t477;
t68 = -t462 * t509 - t478;
t63 = t154 * t257 + t199 * t507;
t62 = -t154 * t370 + t199 * t237;
t54 = t440 - t510;
t53 = t374 - t470;
t51 = pkin(5) * t471 + t66;
t35 = t189 * t361 + t476 - t94;
t32 = t398 - t474;
t31 = -t472 + t504;
t25 = -pkin(9) * t471 + t34;
t20 = pkin(5) * t153 - t154 * t325 + t33;
t15 = -t126 * t514 - t370 * t41;
t14 = t125 * t513 - t40 * t257;
t7 = t399 - t505;
t6 = -qJD(6) * t29 + t20 * t502 - t339 * t25;
t5 = qJD(6) * t28 + t339 * t20 + t25 * t502;
t1 = [0, 0, 0, 0, 0, qJDD(1), t508, t395, 0, 0, qJDD(1) * t332 + 0.2e1 * t402, 0.2e1 * t341 * t426 - 0.2e1 * t428 * t434, qJDD(2) * t341 + t344 * t347, qJDD(1) * t333 - 0.2e1 * t402, qJDD(2) * t344 - t341 * t347, 0, t341 * t375 + t344 * t359, -t341 * t359 + t344 * t375, 0.2e1 * t433 * t481 - t395, -g(1) * (-pkin(1) * t342 + pkin(7) * t345) - g(2) * (pkin(1) * t345 + pkin(7) * t342) + (pkin(7) ^ 2 * t433 + pkin(1) ^ 2) * qJDD(1), -t173 * t262 - t204 * t240, t173 * t261 - t174 * t262 + t204 * t238 - t205 * t240, -t204 * t331 + t262 * t328, t174 * t261 + t205 * t238, -t205 * t331 - t261 * t328, 0, t159 * t331 - t317 * t174 - t283 * t205 + t212 * t328 + t233 * t261 + t238 * t319 + t324 * t508, -t158 * t331 + t317 * t173 + t283 * t204 - t213 * t328 + t233 * t262 + t240 * t319 - t323 * t508, -t136 * t262 - t158 * t238 - t159 * t240 + t173 * t212 - t174 * t213 + t195 * t204 - t196 * t205 + t261 * t405 - t395, -t405 * t213 + t196 * t158 + t136 * t212 + t195 * t159 - t233 * t317 - t283 * t319 - g(1) * (-t317 * t342 + t345 * t503) - g(2) * (t317 * t345 + t342 * t503) t118 * t199 + t154 * t369, -t118 * t198 - t153 * t369 - t383, t154 * t331 + t199 * t328, t384, -t153 * t331 - t198 * t328, 0, t220 * t117 - t144 * t328 + t150 * t198 + t208 * t153 + t194 * t189 - t66 * t331 + t376, t118 * t220 - t145 * t328 + t150 * t199 + t154 * t208 + t194 * t369 - t331 * t67 + t400, -t107 * t154 - t108 * t153 - t117 * t145 + t118 * t144 - t189 * t67 - t198 * t44 - t199 * t43 + t369 * t66 - t395, t44 * t145 + t108 * t67 - t43 * t144 - t107 * t66 + t150 * t220 + t208 * t194 - g(1) * (-t342 * t267 - t345 * t329) - g(2) * (-t342 * t329 + t251) (t104 * t199 + t154 * t176) * t337 (-t477 - t478) * t199 + t361 * t154, t104 * t198 + t176 * t153 + t337 * t383 (t103 * t199 - t154 * t509) * t335, -t103 * t198 + t153 * t509 - t335 * t383, t384, t144 * t103 + t79 * t117 + t12 * t198 + t60 * t153 + t33 * t189 + t335 * t357 + t337 * t376 - t509 * t66, t144 * t104 - t80 * t117 - t13 * t198 - t61 * t153 + t66 * t176 - t34 * t189 + t337 * t357 - t451 * t508, t34 * t509 - t80 * t103 - t33 * t176 - t79 * t104 + t389 * t199 + (-t335 * t61 - t337 * t60) * t154 - t400, -t496 + t101 * t66 + t12 * t79 + t13 * t80 + t42 * t144 + t60 * t33 + t61 * t34 + (g(1) * t329 - g(2) * t391) * t345 + (-g(1) * (-t267 - t391) + g(2) * t329) * t342, -t125 * t62 - t148 * t40, -t125 * t63 - t126 * t62 + t147 * t40 - t148 * t41, t114 * t148 + t125 * t153 - t186 * t62 - t198 * t40, -t126 * t63 + t147 * t41, -t114 * t147 + t126 * t153 - t186 * t63 - t198 * t41, t114 * t198 + t153 * t186, -g(1) * t216 - g(2) * t218 + t114 * t28 - t126 * t51 + t147 * t30 - t153 * t378 + t186 * t6 + t198 * t4 + t41 * t93 + t63 * t84, -g(1) * t215 - g(2) * t217 - t114 * t29 + t125 * t51 + t148 * t30 - t153 * t19 - t186 * t5 - t198 * t3 - t40 * t93 - t62 * t84, -t125 * t6 + t126 * t5 - t147 * t3 - t148 * t4 - t19 * t63 + t28 * t40 - t29 * t41 - t378 * t62 - t400, -t496 - t378 * t6 + t19 * t5 + t4 * t28 + t3 * t29 + t30 * t93 + t84 * t51 + (-g(1) * t412 - g(2) * t382) * t345 + (-g(1) * (-t267 - t382) - g(2) * t412) * t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t424, t434 * t348, t427, t424, t426, qJDD(2), t341 * t358 - t491, g(3) * t341 + t344 * t358, 0, 0, t457, t179, t151, -t457, -t390, t328, -t202 * t331 + (-t238 * t432 + t328 * t343 - t331 * t431) * pkin(2) + t350, t203 * t331 + (-t240 * t432 - t328 * t340 - t331 * t430) * pkin(2) + t356 (t196 + t202) * t240 + (-t195 + t203) * t238 + (t173 * t343 - t174 * t340 + (-t238 * t343 + t240 * t340) * qJD(3)) * pkin(2), -t195 * t202 - t196 * t203 + (-t491 - t405 * t340 + t136 * t343 + (-t195 * t340 + t196 * t343) * qJD(3) + (qJD(1) * t283 + t395) * t341) * pkin(2), t516, t88, t91, -t516, t90, t328, -t214 * t189 + t230 * t328 + t366 - t407, -t214 * t369 - t231 * t328 - t331 * t436 + t365, -t231 * t117 - t230 * t118 - t189 * t436 + t369 * t437 + t385, -g(3) * t435 - t107 * t437 + t108 * t436 - t208 * t214 + t43 * t230 + t44 * t231 - t272 * t395, t69, t35, t53, t68, t54, -t516, t226 * t103 - t72 * t189 + t437 * t183 + (-t407 + t415) * t337 + t363 * t335 + t397, t104 * t226 + t176 * t437 + t189 * t73 + t337 * t363 + t353, t222 * t386 - t103 * t458 - t73 * t509 + t72 * t176 + (t104 * t225 + t176 * t222 - t12) * t335 + t380, t42 * t226 - t61 * t73 - t60 * t72 - g(1) * (-pkin(4) * t452 + t254 + t275) - g(2) * (-pkin(4) * t453 + t253 + t274) - g(3) * (t326 + t422) + t388 * t225 - t387 * t222 + t437 * t101, t14, t7, t31, t15, t32, -t468, t114 * t155 - t126 * t483 + t186 * t486 + t219 * t41 + t354, -t114 * t156 + t125 * t483 - t186 * t487 - t219 * t40 + t352, -t125 * t486 + t126 * t487 + t155 * t40 - t156 * t41 + t355, t3 * t156 + t4 * t155 + t30 * t219 - g(1) * (t345 * t381 + t254) - g(2) * (t342 * t381 + t253) - g(3) * (t326 + t393) + t483 * t84 + t487 * t19 - t486 * t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, t179, t151, -t457, -t390, t328, t196 * t331 + t350, t195 * t331 + t356, 0, 0, t516, t88, t91, -t516, t90, t328, t475 + (-t189 * t240 + t328 * t482) * pkin(3) + t366, t116 * t331 + (-t240 * t369 - t328 * t336) * pkin(3) + t365, -t115 * t369 + t116 * t189 + (-t117 * t336 - t118 * t482) * pkin(3) + t385, t107 * t115 - t108 * t116 + (-t208 * t240 + t336 * t44 + t43 * t482 + t518) * pkin(3), t69, t35, t53, t68, t54, -t516, t312 * t103 - t115 * t183 - t70 * t189 + (t415 + t475) * t337 + t362 * t335 + t397, t104 * t312 - t115 * t176 + t189 * t71 + t337 * t362 + t353, qJD(5) * t386 - t103 * t455 - t71 * t509 + t70 * t176 + (qJD(5) * t176 + t104 * t307 - t12) * t335 + t380, t42 * t312 - t61 * t71 - t60 * t70 - t101 * t115 - g(1) * (t345 * t396 + t275) - g(2) * (t342 * t396 + t274) - g(3) * t422 + t388 * t307 - t387 * qJD(5), t14, t7, t31, t15, t32, -t468, t114 * t192 + t126 * t89 + t186 * t484 + t273 * t41 + t354, -t114 * t193 - t125 * t89 - t186 * t485 - t273 * t40 + t352, -t125 * t484 + t126 * t485 + t192 * t40 - t193 * t41 + t355, -g(3) * t393 - t378 * t484 + t19 * t485 + t4 * t192 + t3 * t193 + t30 * t273 - t84 * t89 + t395 * (-t381 + t500); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117 + t466, t118 - t463, -t464 - t467, t107 * t369 + t108 * t189 + t150 - t508, 0, 0, 0, 0, 0, 0, t440 + t510, -t374 - t470, -t476 - t94 - (-t386 - t469) * t189, -t101 * t369 - t189 * t387 - t389 - t508, 0, 0, 0, 0, 0, 0, t398 + t474, -t472 - t504, t399 + t505, t19 * t513 + t3 * t257 - t369 * t84 + t370 * t4 + t378 * t514 - t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176 * t189 + t103, t189 * t509 + t104, -t176 ^ 2 - t509 ^ 2, t176 * t60 - t509 * t61 + t360, 0, 0, 0, 0, 0, 0, t125 * t186 + t41, -t40 + t520, -t519 - t521, -t125 * t378 - t126 * t19 + t360 + t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t473, t519 - t521, -t40 - t520, t473, -t408 + (-qJD(6) + t186) * t125, t114, -g(1) * t217 + g(2) * t215 - t84 * t125 + t19 * t186 + t309 * t494 + t4, g(1) * t218 - g(2) * t216 - t126 * t84 - t186 * t378 + t309 * t493 - t3, 0, 0;];
tau_reg  = t1;
