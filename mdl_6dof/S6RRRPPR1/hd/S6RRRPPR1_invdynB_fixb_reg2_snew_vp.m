% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:09:46
% EndTime: 2019-05-07 04:10:31
% DurationCPUTime: 47.00s
% Computational Cost: add. (422868->955), mult. (969151->1476), div. (0->0), fcn. (734264->12), ass. (0->655)
t1154 = cos(qJ(2));
t1137 = t1154 * qJDD(1);
t1150 = sin(qJ(2));
t1223 = qJD(1) * t1150;
t1189 = qJD(2) * t1223;
t1112 = t1137 - t1189;
t1143 = t1154 ^ 2;
t1157 = qJD(1) ^ 2;
t1151 = sin(qJ(1));
t1155 = cos(qJ(1));
t1121 = t1151 * g(1) - t1155 * g(2);
t1169 = qJDD(1) * pkin(1) + t1121;
t1170 = qJD(2) * pkin(2) - pkin(8) * t1223;
t1044 = t1112 * pkin(2) - t1170 * t1223 + t1169 + (pkin(8) * t1143 + pkin(7)) * t1157;
t1144 = sin(pkin(11));
t1149 = sin(qJ(3));
t1153 = cos(qJ(3));
t1103 = (t1149 * t1154 + t1150 * t1153) * qJD(1);
t1222 = qJD(1) * t1154;
t1182 = qJD(2) * t1222;
t1197 = qJDD(1) * t1150;
t1111 = t1182 + t1197;
t1178 = t1149 * t1111 - t1153 * t1112;
t1041 = -qJD(3) * t1103 - t1178;
t1102 = -t1149 * t1223 + t1153 * t1222;
t1042 = qJD(3) * t1102 + t1153 * t1111 + t1149 * t1112;
t1145 = sin(pkin(10));
t1147 = cos(pkin(10));
t986 = -t1147 * t1041 + t1042 * t1145;
t1068 = t1145 * t1102 + t1147 * t1103;
t1141 = qJD(2) + qJD(3);
t1146 = cos(pkin(11));
t1036 = t1068 * t1144 - t1146 * t1141;
t1038 = t1068 * t1146 + t1141 * t1144;
t989 = t1038 * t1036;
t1253 = t986 - t989;
t1262 = t1144 * t1253;
t1066 = -t1147 * t1102 + t1103 * t1145;
t1006 = t1068 * t1066;
t1194 = qJDD(2) + qJDD(3);
t1251 = -t1006 + t1194;
t1261 = t1145 * t1251;
t1260 = t1146 * t1253;
t1259 = t1147 * t1251;
t1148 = sin(qJ(6));
t1171 = qJDD(6) + t986;
t1152 = cos(qJ(6));
t982 = t1152 * t1036 + t1038 * t1148;
t984 = -t1036 * t1148 + t1038 * t1152;
t907 = t984 * t982;
t1252 = t1171 - t907;
t1258 = t1148 * t1252;
t1074 = t1102 * t1103;
t1249 = t1074 + t1194;
t1257 = t1149 * t1249;
t1256 = t1152 * t1252;
t1255 = t1153 * t1249;
t1100 = t1102 ^ 2;
t1172 = pkin(3) * t1141 - qJ(4) * t1103;
t936 = t1041 * pkin(3) + t1100 * qJ(4) - t1103 * t1172 - qJDD(4) + t1044;
t987 = t1041 * t1145 + t1042 * t1147;
t974 = -t1144 * t987 + t1146 * t1194;
t975 = t1144 * t1194 + t1146 * t987;
t855 = -qJD(6) * t982 + t1148 * t974 + t1152 * t975;
t1061 = qJD(6) + t1066;
t944 = t1061 * t982;
t1254 = t855 - t944;
t996 = t1066 * t1036;
t919 = -t975 - t996;
t918 = t996 - t975;
t1057 = t1141 * t1066;
t1179 = -t987 + t1057;
t1095 = t1141 * t1102;
t1018 = -t1042 + t1095;
t1250 = t1042 + t1095;
t1139 = t1143 * t1157;
t1156 = qJD(2) ^ 2;
t1127 = -t1139 - t1156;
t1180 = t1148 * t975 - t1152 * t974;
t821 = (qJD(6) - t1061) * t984 + t1180;
t1014 = (qJD(3) - t1141) * t1103 + t1178;
t1122 = g(1) * t1155 + g(2) * t1151;
t1166 = pkin(1) * t1157 - qJDD(1) * pkin(7) + t1122;
t1165 = t1150 * t1166;
t1162 = qJDD(2) * pkin(2) - t1111 * pkin(8) + t1165;
t1244 = t1150 * g(3);
t1163 = -pkin(2) * t1139 + t1112 * pkin(8) - qJD(2) * t1170 - t1244;
t1201 = t1150 * t1157;
t1224 = qJD(1) * qJD(2);
t1168 = pkin(2) * t1201 + pkin(8) * t1224 - g(3);
t976 = t1149 * t1163 - t1153 * t1162 + (-t1149 * t1166 - t1153 * t1168) * t1154;
t978 = t982 ^ 2;
t979 = t984 ^ 2;
t1248 = t1036 ^ 2;
t1035 = t1038 ^ 2;
t1060 = t1061 ^ 2;
t1247 = t1066 ^ 2;
t1064 = t1068 ^ 2;
t1101 = t1103 ^ 2;
t1123 = t1141 ^ 2;
t1246 = 2 * qJD(4);
t1245 = pkin(4) * t1145;
t1001 = pkin(4) * t1066 - qJ(5) * t1068;
t1158 = pkin(3) * t1249 + qJ(4) * t1018 - t976;
t1164 = t1154 * t1166;
t977 = t1153 * (-t1164 + t1163) + t1149 * (t1154 * t1168 + t1162);
t913 = -t1100 * pkin(3) + t1041 * qJ(4) - t1141 * t1172 + t977;
t831 = -0.2e1 * qJD(4) * t1066 + t1145 * t1158 + t1147 * t913;
t784 = -pkin(4) * t1123 + qJ(5) * t1194 - t1066 * t1001 + t831;
t1214 = t1068 * t1141;
t946 = t986 + t1214;
t839 = pkin(4) * t946 + qJ(5) * t1179 - t936;
t735 = 0.2e1 * qJD(5) * t1038 + t1144 * t784 - t1146 * t839;
t697 = pkin(5) * t1253 + pkin(9) * t919 - t735;
t736 = -0.2e1 * qJD(5) * t1036 + t1144 * t839 + t1146 * t784;
t991 = pkin(5) * t1066 - pkin(9) * t1038;
t710 = -pkin(5) * t1248 + pkin(9) * t974 - t1066 * t991 + t736;
t646 = t1148 * t697 + t1152 * t710;
t645 = t1148 * t710 - t1152 * t697;
t606 = t1148 * t646 - t1152 * t645;
t1243 = t1144 * t606;
t1181 = t1145 * t913 - t1147 * t1158;
t783 = qJDD(5) - t1194 * pkin(4) - t1123 * qJ(5) + (t1246 + t1001) * t1068 + t1181;
t1242 = t1144 * t783;
t921 = t986 + t989;
t1241 = t1144 * t921;
t1240 = t1145 * t936;
t1239 = t1145 * t986;
t999 = t1006 + t1194;
t1238 = t1145 * t999;
t1237 = t1146 * t606;
t1236 = t1146 * t783;
t1235 = t1146 * t921;
t1234 = t1147 * t936;
t1233 = t1147 * t999;
t766 = -t974 * pkin(5) - pkin(9) * t1248 + t1038 * t991 + t783;
t1232 = t1148 * t766;
t864 = t1171 + t907;
t1231 = t1148 * t864;
t830 = t1068 * t1246 + t1181;
t759 = t1145 * t831 - t1147 * t830;
t1230 = t1149 * t759;
t900 = t1149 * t977 - t1153 * t976;
t1229 = t1150 * t900;
t1228 = t1152 * t766;
t1227 = t1152 * t864;
t1226 = t1153 * t759;
t1225 = t1154 * t900;
t1221 = t1038 * t1066;
t1220 = t1044 * t1149;
t1219 = t1044 * t1153;
t1218 = t1061 * t1148;
t1217 = t1061 * t1152;
t1216 = t1066 * t1144;
t1215 = t1066 * t1146;
t1071 = -t1074 + t1194;
t1213 = t1071 * t1149;
t1212 = t1071 * t1153;
t1104 = t1157 * pkin(7) + t1169;
t1211 = t1104 * t1150;
t1210 = t1104 * t1154;
t1131 = t1154 * t1201;
t1119 = qJDD(2) + t1131;
t1209 = t1119 * t1150;
t1120 = qJDD(2) - t1131;
t1208 = t1120 * t1150;
t1207 = t1120 * t1154;
t1206 = t1141 * t1145;
t1205 = t1141 * t1147;
t1204 = t1141 * t1149;
t1203 = t1141 * t1153;
t1142 = t1150 ^ 2;
t1202 = t1142 * t1157;
t1198 = t1142 + t1143;
t1196 = qJDD(1) * t1151;
t1195 = qJDD(1) * t1155;
t1193 = t1145 * t907;
t1192 = t1147 * t907;
t1191 = -pkin(4) * t1147 - pkin(3);
t1188 = t1145 * t989;
t1187 = t1147 * t989;
t1186 = t1151 * t1006;
t1185 = t1155 * t1006;
t1184 = t1151 * t1074;
t1183 = t1155 * t1074;
t760 = t1145 * t830 + t1147 * t831;
t607 = t1148 * t645 + t1152 * t646;
t901 = t1149 * t976 + t1153 * t977;
t1088 = t1154 * g(3) - t1165;
t1089 = -t1164 - t1244;
t1029 = t1088 * t1150 + t1154 * t1089;
t1080 = -t1121 * t1151 - t1155 * t1122;
t1177 = t1151 * t1194;
t1176 = t1151 * t1131;
t1175 = t1155 * t1131;
t1116 = -t1151 * t1157 + t1195;
t1173 = -pkin(6) * t1116 - g(3) * t1151;
t672 = t1144 * t736 - t1146 * t735;
t673 = t1144 * t735 + t1146 * t736;
t1028 = t1088 * t1154 - t1089 * t1150;
t1079 = t1121 * t1155 - t1122 * t1151;
t916 = t974 + t1221;
t947 = t986 - t1214;
t1133 = t1155 * t1194;
t1126 = t1139 - t1156;
t1125 = -t1156 - t1202;
t1124 = t1156 - t1202;
t1118 = t1139 - t1202;
t1117 = t1139 + t1202;
t1115 = t1155 * t1157 + t1196;
t1114 = t1198 * qJDD(1);
t1113 = t1137 - 0.2e1 * t1189;
t1110 = 0.2e1 * t1182 + t1197;
t1108 = t1154 * t1119;
t1107 = t1198 * t1224;
t1099 = -pkin(6) * t1115 + g(3) * t1155;
t1093 = -t1101 + t1123;
t1092 = t1100 - t1123;
t1091 = t1111 * t1154 - t1142 * t1224;
t1090 = -t1112 * t1150 - t1143 * t1224;
t1087 = -t1101 - t1123;
t1086 = -t1125 * t1150 - t1207;
t1085 = -t1124 * t1150 + t1108;
t1084 = t1127 * t1154 - t1209;
t1083 = t1126 * t1154 - t1208;
t1082 = t1125 * t1154 - t1208;
t1081 = t1127 * t1150 + t1108;
t1077 = t1114 * t1155 - t1117 * t1151;
t1076 = t1114 * t1151 + t1117 * t1155;
t1075 = -t1110 * t1150 + t1113 * t1154;
t1073 = -t1101 + t1100;
t1069 = -t1123 - t1100;
t1055 = t1086 * t1155 + t1110 * t1151;
t1054 = t1084 * t1155 - t1113 * t1151;
t1053 = t1086 * t1151 - t1110 * t1155;
t1052 = t1084 * t1151 + t1113 * t1155;
t1051 = -t1064 + t1123;
t1050 = t1247 - t1123;
t1049 = (t1102 * t1153 + t1103 * t1149) * t1141;
t1048 = (t1102 * t1149 - t1103 * t1153) * t1141;
t1047 = -pkin(7) * t1082 - t1210;
t1046 = -pkin(7) * t1081 - t1211;
t1045 = -t1064 - t1123;
t1043 = -t1100 - t1101;
t1040 = -pkin(1) * t1082 + t1089;
t1039 = -pkin(1) * t1081 + t1088;
t1024 = t1092 * t1153 - t1213;
t1023 = -t1093 * t1149 + t1255;
t1022 = t1092 * t1149 + t1212;
t1021 = t1093 * t1153 + t1257;
t1020 = -t1087 * t1149 - t1212;
t1019 = t1087 * t1153 - t1213;
t1013 = (qJD(3) + t1141) * t1103 + t1178;
t1012 = t1042 * t1153 - t1103 * t1204;
t1011 = t1042 * t1149 + t1103 * t1203;
t1010 = -t1041 * t1149 - t1102 * t1203;
t1009 = t1041 * t1153 - t1102 * t1204;
t1008 = t1029 * t1155 - t1104 * t1151;
t1007 = t1029 * t1151 + t1104 * t1155;
t1004 = t1069 * t1153 - t1257;
t1003 = t1069 * t1149 + t1255;
t1002 = -t1064 + t1247;
t997 = -t1247 - t1123;
t995 = -t1035 + t1247;
t994 = -t1247 + t1248;
t993 = (-t1066 * t1147 + t1068 * t1145) * t1141;
t992 = (-t1066 * t1145 - t1068 * t1147) * t1141;
t990 = -t1048 * t1150 + t1049 * t1154;
t988 = -t1035 + t1248;
t981 = t1147 * t986;
t972 = -t1247 - t1064;
t969 = -pkin(8) * t1019 - t1219;
t968 = -t1035 - t1247;
t967 = -pkin(8) * t1003 - t1220;
t966 = -t1022 * t1150 + t1024 * t1154;
t965 = -t1021 * t1150 + t1023 * t1154;
t964 = t1050 * t1147 - t1238;
t963 = -t1051 * t1145 + t1259;
t962 = t1050 * t1145 + t1233;
t961 = t1051 * t1147 + t1261;
t960 = -t1045 * t1145 - t1233;
t959 = t1045 * t1147 - t1238;
t958 = -t1247 - t1248;
t957 = -t1019 * t1150 + t1020 * t1154;
t956 = t1019 * t1154 + t1020 * t1150;
t955 = -t1014 * t1153 - t1018 * t1149;
t954 = -t1013 * t1153 - t1149 * t1250;
t953 = -t1014 * t1149 + t1018 * t1153;
t952 = -t1013 * t1149 + t1153 * t1250;
t951 = -t1057 - t987;
t943 = -t979 + t1060;
t942 = t978 - t1060;
t941 = t1035 + t1248;
t940 = -t1068 * t1206 + t1147 * t987;
t939 = t1068 * t1205 + t1145 * t987;
t938 = t1066 * t1205 + t1239;
t937 = t1066 * t1206 - t981;
t935 = -t1011 * t1150 + t1012 * t1154;
t934 = -t1009 * t1150 + t1010 * t1154;
t933 = -t1003 * t1150 + t1004 * t1154;
t932 = t1003 * t1154 + t1004 * t1150;
t931 = t1147 * t997 - t1261;
t930 = t1145 * t997 + t1259;
t929 = (-t1036 * t1146 + t1038 * t1144) * t1066;
t928 = (t1036 * t1144 + t1038 * t1146) * t1066;
t927 = -pkin(2) * t1250 + pkin(8) * t1020 - t1220;
t926 = -t979 - t1060;
t925 = -t1149 * t992 + t1153 * t993;
t924 = t1149 * t993 + t1153 * t992;
t923 = -pkin(2) * t1013 + pkin(8) * t1004 + t1219;
t915 = t974 - t1221;
t912 = -t1038 * t1216 + t1146 * t975;
t911 = -t1038 * t1215 - t1144 * t975;
t910 = t1036 * t1215 - t1144 * t974;
t909 = -t1036 * t1216 - t1146 * t974;
t906 = t1151 * t1250 + t1155 * t957;
t905 = t1151 * t957 - t1155 * t1250;
t904 = -t979 + t978;
t899 = t1013 * t1151 + t1155 * t933;
t898 = -t1013 * t1155 + t1151 * t933;
t897 = -t1060 - t978;
t896 = -t1149 * t962 + t1153 * t964;
t895 = -t1149 * t961 + t1153 * t963;
t894 = t1149 * t964 + t1153 * t962;
t893 = t1149 * t963 + t1153 * t961;
t892 = -t1149 * t959 + t1153 * t960;
t891 = t1149 * t960 + t1153 * t959;
t890 = pkin(2) * t1044 + pkin(8) * t901;
t889 = -t1150 * t953 + t1154 * t955;
t888 = -t1150 * t952 + t1154 * t954;
t887 = t1150 * t955 + t1154 * t953;
t886 = t1147 * t929 + t1239;
t885 = t1145 * t929 - t981;
t884 = -qJ(4) * t959 - t1234;
t883 = -t1145 * t951 - t1147 * t947;
t882 = t1145 * t1179 - t1147 * t946;
t881 = -t1145 * t947 + t1147 * t951;
t880 = -t1145 * t946 - t1147 * t1179;
t879 = (t1148 * t984 - t1152 * t982) * t1061;
t878 = (-t1148 * t982 - t1152 * t984) * t1061;
t877 = t1146 * t994 - t1241;
t876 = -t1144 * t995 + t1260;
t875 = -t1144 * t994 - t1235;
t874 = -t1146 * t995 - t1262;
t873 = -t1149 * t939 + t1153 * t940;
t872 = -t1149 * t937 + t1153 * t938;
t871 = t1149 * t940 + t1153 * t939;
t870 = t1149 * t938 + t1153 * t937;
t869 = t1147 * t912 + t1188;
t868 = t1147 * t910 - t1188;
t867 = t1145 * t912 - t1187;
t866 = t1145 * t910 + t1187;
t862 = -t978 - t979;
t861 = -pkin(1) * t956 - pkin(2) * t1019 + t977;
t860 = -qJ(4) * t930 - t1240;
t859 = -t1144 * t968 - t1235;
t858 = t1146 * t968 - t1241;
t857 = t1043 * t1151 + t1155 * t889;
t856 = -t1043 * t1155 + t1151 * t889;
t854 = -qJD(6) * t984 - t1180;
t853 = -t1149 * t930 + t1153 * t931;
t852 = t1149 * t931 + t1153 * t930;
t851 = t1146 * t958 - t1262;
t850 = t1144 * t958 + t1260;
t849 = -pkin(1) * t932 + t1149 * t1089 + t1153 * t1088 + (t1149 * (t1112 + t1189) - t1153 * (-t1111 + t1182)) * pkin(8) + (-t1153 * t1119 + t1127 * t1149 - t1003) * pkin(2);
t848 = -pkin(8) * t953 - t900;
t847 = -t1150 * t924 + t1154 * t925;
t846 = -t1144 * t919 + t1146 * t916;
t845 = t1144 * t918 + t1146 * t915;
t844 = t1144 * t916 + t1146 * t919;
t843 = -t1144 * t915 + t1146 * t918;
t842 = -pkin(2) * t1043 + pkin(8) * t955 + t901;
t841 = -pkin(1) * t887 - pkin(2) * t953;
t840 = pkin(3) * t1179 + qJ(4) * t960 - t1240;
t836 = -pkin(7) * t956 - t1150 * t927 + t1154 * t969;
t835 = t1152 * t942 - t1231;
t834 = -t1148 * t943 + t1256;
t833 = t1148 * t942 + t1227;
t832 = t1152 * t943 + t1258;
t829 = -pkin(3) * t946 + qJ(4) * t931 + t1234;
t828 = t1154 * t901 - t1229;
t827 = t1150 * t901 + t1225;
t825 = -t855 - t944;
t820 = (qJD(6) + t1061) * t984 + t1180;
t819 = t1152 * t855 - t1218 * t984;
t818 = t1148 * t855 + t1217 * t984;
t817 = -t1148 * t854 + t1217 * t982;
t816 = t1152 * t854 + t1218 * t982;
t815 = -pkin(7) * t932 - t1150 * t923 + t1154 * t967;
t814 = t1145 * t916 + t1147 * t877;
t813 = -t1145 * t919 + t1147 * t876;
t812 = t1145 * t877 - t1147 * t916;
t811 = t1145 * t876 + t1147 * t919;
t810 = -t1148 * t926 - t1227;
t809 = t1152 * t926 - t1231;
t808 = -t1145 * t988 + t1147 * t845;
t807 = t1145 * t845 + t1147 * t988;
t806 = -t1044 * t1151 + t1155 * t828;
t805 = t1044 * t1155 + t1151 * t828;
t804 = -t1145 * t918 + t1147 * t859;
t803 = t1145 * t859 + t1147 * t918;
t802 = -t1150 * t894 + t1154 * t896;
t801 = -t1150 * t893 + t1154 * t895;
t800 = -t1145 * t915 + t1147 * t851;
t799 = t1145 * t851 + t1147 * t915;
t798 = -t1150 * t891 + t1154 * t892;
t797 = t1150 * t892 + t1154 * t891;
t796 = -t1145 * t941 + t1147 * t846;
t795 = t1145 * t846 + t1147 * t941;
t794 = t1152 * t897 - t1258;
t793 = t1148 * t897 + t1256;
t792 = -t1149 * t885 + t1153 * t886;
t791 = t1149 * t886 + t1153 * t885;
t790 = -t1149 * t881 + t1153 * t883;
t789 = -t1149 * t880 + t1153 * t882;
t788 = t1149 * t883 + t1153 * t881;
t787 = t1149 * t882 + t1153 * t880;
t786 = -t1144 * t878 + t1146 * t879;
t785 = -t1144 * t879 - t1146 * t878;
t781 = -t1150 * t871 + t1154 * t873;
t780 = -t1150 * t870 + t1154 * t872;
t779 = -t1149 * t867 + t1153 * t869;
t778 = -t1149 * t866 + t1153 * t868;
t777 = t1149 * t869 + t1153 * t867;
t776 = t1149 * t868 + t1153 * t866;
t775 = -t1150 * t852 + t1154 * t853;
t774 = t1150 * t853 + t1154 * t852;
t773 = -t1151 * t1179 + t1155 * t798;
t772 = t1151 * t798 + t1155 * t1179;
t771 = -pkin(1) * t827 - pkin(2) * t900;
t770 = t1145 * t1171 + t1147 * t786;
t769 = t1145 * t786 - t1147 * t1171;
t768 = t1151 * t946 + t1155 * t775;
t767 = t1151 * t775 - t1155 * t946;
t765 = -qJ(5) * t858 + t1236;
t764 = -t1144 * t833 + t1146 * t835;
t763 = -t1144 * t832 + t1146 * t834;
t762 = -t1144 * t835 - t1146 * t833;
t761 = -t1144 * t834 - t1146 * t832;
t758 = -qJ(5) * t850 + t1242;
t757 = -t1148 * t825 - t1152 * t821;
t756 = -t1148 * t1254 - t1152 * t820;
t755 = -t1148 * t821 + t1152 * t825;
t754 = -t1148 * t820 + t1152 * t1254;
t753 = -t1144 * t818 + t1146 * t819;
t752 = -t1144 * t816 + t1146 * t817;
t751 = -t1144 * t819 - t1146 * t818;
t750 = -t1144 * t817 - t1146 * t816;
t749 = -pkin(7) * t827 - pkin(8) * t1225 - t1150 * t890;
t748 = -pkin(8) * t891 - t1149 * t840 + t1153 * t884;
t747 = -t1149 * t812 + t1153 * t814;
t746 = -t1149 * t811 + t1153 * t813;
t745 = t1149 * t814 + t1153 * t812;
t744 = t1149 * t813 + t1153 * t811;
t743 = -t1144 * t809 + t1146 * t810;
t742 = t1144 * t810 + t1146 * t809;
t741 = -t1149 * t807 + t1153 * t808;
t740 = t1149 * t808 + t1153 * t807;
t739 = -pkin(7) * t887 - t1150 * t842 + t1154 * t848;
t738 = -t1149 * t803 + t1153 * t804;
t737 = t1149 * t804 + t1153 * t803;
t734 = pkin(3) * t936 + qJ(4) * t760;
t733 = -t1149 * t799 + t1153 * t800;
t732 = t1149 * t800 + t1153 * t799;
t731 = -t1149 * t795 + t1153 * t796;
t730 = t1149 * t796 + t1153 * t795;
t729 = -pkin(8) * t852 - t1149 * t829 + t1153 * t860;
t728 = -t1144 * t793 + t1146 * t794;
t727 = t1144 * t794 + t1146 * t793;
t726 = pkin(2) * t1179 + pkin(8) * t892 + t1149 * t884 + t1153 * t840;
t725 = -t1150 * t791 + t1154 * t792;
t724 = -t1150 * t788 + t1154 * t790;
t723 = -t1150 * t787 + t1154 * t789;
t722 = t1150 * t790 + t1154 * t788;
t721 = t1147 * t753 + t1193;
t720 = t1147 * t752 - t1193;
t719 = t1145 * t753 - t1192;
t718 = t1145 * t752 + t1192;
t717 = -qJ(4) * t881 - t759;
t716 = -t1150 * t777 + t1154 * t779;
t715 = -t1150 * t776 + t1154 * t778;
t714 = -pkin(2) * t946 + pkin(8) * t853 + t1149 * t860 + t1153 * t829;
t713 = t1151 * t972 + t1155 * t724;
t712 = t1151 * t724 - t1155 * t972;
t711 = -pkin(3) * t972 + qJ(4) * t883 + t760;
t708 = -pkin(9) * t809 + t1228;
t707 = -t1149 * t769 + t1153 * t770;
t706 = t1149 * t770 + t1153 * t769;
t705 = -t1145 * t821 + t1147 * t764;
t704 = -t1145 * t825 + t1147 * t763;
t703 = t1145 * t764 + t1147 * t821;
t702 = t1145 * t763 + t1147 * t825;
t701 = -pkin(4) * t858 + t736;
t700 = -pkin(1) * t797 - pkin(2) * t891 - pkin(3) * t959 + t831;
t699 = -pkin(4) * t850 + t735;
t698 = -pkin(9) * t793 + t1232;
t694 = t1145 * t1254 + t1147 * t743;
t693 = t1145 * t743 - t1147 * t1254;
t692 = t1145 * t820 + t1147 * t728;
t691 = t1145 * t728 - t1147 * t820;
t690 = -pkin(1) * t774 - pkin(2) * t852 - pkin(3) * t930 + t830;
t689 = -pkin(5) * t1254 + pkin(9) * t810 + t1232;
t688 = t1153 * t760 - t1230;
t687 = t1149 * t760 + t1226;
t686 = -t1144 * t755 + t1146 * t757;
t685 = -t1144 * t754 + t1146 * t756;
t684 = t1144 * t757 + t1146 * t755;
t683 = -t1144 * t756 - t1146 * t754;
t682 = -pkin(5) * t820 + pkin(9) * t794 - t1228;
t681 = -t1150 * t745 + t1154 * t747;
t680 = -t1150 * t744 + t1154 * t746;
t679 = -t1150 * t740 + t1154 * t741;
t678 = -pkin(1) * t722 - pkin(2) * t788 - pkin(3) * t881;
t677 = -t1145 * t904 + t1147 * t685;
t676 = t1145 * t685 + t1147 * t904;
t675 = -t1150 * t737 + t1154 * t738;
t674 = t1150 * t738 + t1154 * t737;
t671 = -t1150 * t732 + t1154 * t733;
t670 = t1150 * t733 + t1154 * t732;
t669 = -t1150 * t730 + t1154 * t731;
t668 = t1150 * t731 + t1154 * t730;
t667 = t1145 * t862 + t1147 * t686;
t666 = t1145 * t686 - t1147 * t862;
t665 = -t1149 * t719 + t1153 * t721;
t664 = -t1149 * t718 + t1153 * t720;
t663 = t1149 * t721 + t1153 * t719;
t662 = t1149 * t720 + t1153 * t718;
t661 = t1151 * t858 + t1155 * t675;
t660 = t1151 * t675 - t1155 * t858;
t659 = t1151 * t850 + t1155 * t671;
t658 = t1151 * t671 - t1155 * t850;
t657 = -qJ(5) * t844 - t672;
t656 = t1151 * t844 + t1155 * t669;
t655 = t1151 * t669 - t1155 * t844;
t654 = -pkin(7) * t797 - t1150 * t726 + t1154 * t748;
t653 = t1145 * t783 + t1147 * t673;
t652 = t1145 * t673 - t1147 * t783;
t651 = -t1150 * t706 + t1154 * t707;
t650 = -t1149 * t703 + t1153 * t705;
t649 = -t1149 * t702 + t1153 * t704;
t648 = t1149 * t705 + t1153 * t703;
t647 = t1149 * t704 + t1153 * t702;
t643 = -qJ(4) * t803 - t1145 * t701 + t1147 * t765;
t642 = -pkin(4) * t684 - pkin(5) * t755;
t641 = -qJ(4) * t799 - t1145 * t699 + t1147 * t758;
t640 = -t1149 * t693 + t1153 * t694;
t639 = t1149 * t694 + t1153 * t693;
t638 = -pkin(7) * t774 - t1150 * t714 + t1154 * t729;
t637 = -pkin(8) * t788 - t1149 * t711 + t1153 * t717;
t636 = -pkin(3) * t858 + qJ(4) * t804 + t1145 * t765 + t1147 * t701;
t635 = -t1149 * t691 + t1153 * t692;
t634 = t1149 * t692 + t1153 * t691;
t633 = -pkin(3) * t850 + qJ(4) * t800 + t1145 * t758 + t1147 * t699;
t632 = -pkin(2) * t972 + pkin(8) * t790 + t1149 * t717 + t1153 * t711;
t631 = -qJ(4) * t795 + t1147 * t657 + t1245 * t844;
t630 = -t1150 * t687 + t1154 * t688;
t629 = t1150 * t688 + t1154 * t687;
t628 = -pkin(8) * t687 - qJ(4) * t1226 - t1149 * t734;
t627 = -t1151 * t936 + t1155 * t630;
t626 = t1151 * t630 + t1155 * t936;
t625 = qJ(4) * t796 + t1145 * t657 + t1191 * t844;
t624 = pkin(2) * t936 + pkin(8) * t688 - qJ(4) * t1230 + t1153 * t734;
t623 = -qJ(5) * t742 - t1144 * t689 + t1146 * t708;
t622 = -t1149 * t676 + t1153 * t677;
t621 = t1149 * t677 + t1153 * t676;
t620 = -pkin(4) * t742 - pkin(5) * t809 + t646;
t619 = -t1149 * t666 + t1153 * t667;
t618 = t1149 * t667 + t1153 * t666;
t617 = -qJ(5) * t727 - t1144 * t682 + t1146 * t698;
t616 = -pkin(4) * t727 - pkin(5) * t793 + t645;
t615 = -t1150 * t663 + t1154 * t665;
t614 = -t1150 * t662 + t1154 * t664;
t613 = -pkin(1) * t674 - pkin(2) * t737 - pkin(3) * t803 - pkin(4) * t918 - qJ(5) * t859 - t1242;
t612 = -pkin(1) * t670 - pkin(2) * t732 - pkin(3) * t799 - pkin(4) * t915 - qJ(5) * t851 + t1236;
t611 = -t1149 * t652 + t1153 * t653;
t610 = t1149 * t653 + t1153 * t652;
t609 = -t1150 * t648 + t1154 * t650;
t608 = -t1150 * t647 + t1154 * t649;
t605 = -t1150 * t639 + t1154 * t640;
t604 = t1150 * t640 + t1154 * t639;
t603 = -t1150 * t634 + t1154 * t635;
t602 = t1150 * t635 + t1154 * t634;
t601 = -pkin(1) * t629 - pkin(2) * t687 - pkin(3) * t759;
t600 = -pkin(5) * t766 + pkin(9) * t607;
t599 = -pkin(1) * t668 - pkin(2) * t730 - pkin(3) * t795 - pkin(4) * t941 - qJ(5) * t846 - t673;
t598 = -pkin(9) * t755 - t606;
t597 = t1151 * t742 + t1155 * t605;
t596 = t1151 * t605 - t1155 * t742;
t595 = -pkin(5) * t862 + pkin(9) * t757 + t607;
t594 = -qJ(4) * t652 + (-qJ(5) * t1147 + t1245) * t672;
t593 = -pkin(8) * t737 - t1149 * t636 + t1153 * t643;
t592 = -pkin(8) * t732 - t1149 * t633 + t1153 * t641;
t591 = -pkin(2) * t858 + pkin(8) * t738 + t1149 * t643 + t1153 * t636;
t590 = -pkin(2) * t850 + pkin(8) * t733 + t1149 * t641 + t1153 * t633;
t589 = -pkin(7) * t722 - t1150 * t632 + t1154 * t637;
t588 = t1151 * t727 + t1155 * t603;
t587 = t1151 * t603 - t1155 * t727;
t586 = -t1150 * t621 + t1154 * t622;
t585 = -pkin(8) * t730 - t1149 * t625 + t1153 * t631;
t584 = -t1150 * t618 + t1154 * t619;
t583 = t1150 * t619 + t1154 * t618;
t582 = -pkin(2) * t844 + pkin(8) * t731 + t1149 * t631 + t1153 * t625;
t581 = qJ(4) * t653 + (-qJ(5) * t1145 + t1191) * t672;
t580 = -qJ(4) * t693 - t1145 * t620 + t1147 * t623;
t579 = -qJ(4) * t691 - t1145 * t616 + t1147 * t617;
t578 = t1151 * t684 + t1155 * t584;
t577 = t1151 * t584 - t1155 * t684;
t576 = -t1150 * t610 + t1154 * t611;
t575 = t1150 * t611 + t1154 * t610;
t574 = -pkin(3) * t742 + qJ(4) * t694 + t1145 * t623 + t1147 * t620;
t573 = t1146 * t607 - t1243;
t572 = t1144 * t607 + t1237;
t571 = -pkin(7) * t629 - t1150 * t624 + t1154 * t628;
t570 = -pkin(3) * t727 + qJ(4) * t692 + t1145 * t617 + t1147 * t616;
t569 = t1145 * t766 + t1147 * t573;
t568 = t1145 * t573 - t1147 * t766;
t567 = t1151 * t672 + t1155 * t576;
t566 = t1151 * t576 - t1155 * t672;
t565 = -pkin(1) * t604 - pkin(2) * t639 - pkin(3) * t693 + pkin(4) * t1254 - qJ(5) * t743 - t1144 * t708 - t1146 * t689;
t564 = -qJ(5) * t684 - t1144 * t595 + t1146 * t598;
t563 = -pkin(1) * t602 - pkin(2) * t634 - pkin(3) * t691 + pkin(4) * t820 - qJ(5) * t728 - t1144 * t698 - t1146 * t682;
t562 = -pkin(7) * t674 - t1150 * t591 + t1154 * t593;
t561 = -pkin(7) * t670 - t1150 * t590 + t1154 * t592;
t560 = -pkin(4) * t572 - pkin(5) * t606;
t559 = -pkin(7) * t668 - t1150 * t582 + t1154 * t585;
t558 = -qJ(4) * t666 - t1145 * t642 + t1147 * t564;
t557 = -pkin(8) * t610 - t1149 * t581 + t1153 * t594;
t556 = -pkin(1) * t575 - pkin(2) * t610 - pkin(3) * t652 + pkin(4) * t783 - qJ(5) * t673;
t555 = -pkin(3) * t684 + qJ(4) * t667 + t1145 * t564 + t1147 * t642;
t554 = -pkin(9) * t1237 - qJ(5) * t572 - t1144 * t600;
t553 = -pkin(2) * t672 + pkin(8) * t611 + t1149 * t594 + t1153 * t581;
t552 = -pkin(8) * t639 - t1149 * t574 + t1153 * t580;
t551 = -t1149 * t568 + t1153 * t569;
t550 = t1149 * t569 + t1153 * t568;
t549 = -pkin(2) * t742 + pkin(8) * t640 + t1149 * t580 + t1153 * t574;
t548 = -pkin(8) * t634 - t1149 * t570 + t1153 * t579;
t547 = -pkin(2) * t727 + pkin(8) * t635 + t1149 * t579 + t1153 * t570;
t546 = -pkin(1) * t583 - pkin(2) * t618 - pkin(3) * t666 + pkin(4) * t862 - qJ(5) * t686 - t1144 * t598 - t1146 * t595;
t545 = -pkin(8) * t618 - t1149 * t555 + t1153 * t558;
t544 = -t1150 * t550 + t1154 * t551;
t543 = t1150 * t551 + t1154 * t550;
t542 = -pkin(2) * t684 + pkin(8) * t619 + t1149 * t558 + t1153 * t555;
t541 = -qJ(4) * t568 - t1145 * t560 + t1147 * t554;
t540 = -pkin(7) * t604 - t1150 * t549 + t1154 * t552;
t539 = -pkin(7) * t575 - t1150 * t553 + t1154 * t557;
t538 = -pkin(7) * t602 - t1150 * t547 + t1154 * t548;
t537 = t1151 * t572 + t1155 * t544;
t536 = t1151 * t544 - t1155 * t572;
t535 = -pkin(3) * t572 + qJ(4) * t569 + t1145 * t554 + t1147 * t560;
t534 = -pkin(7) * t583 - t1150 * t542 + t1154 * t545;
t533 = -pkin(1) * t543 - pkin(2) * t550 - pkin(3) * t568 + pkin(4) * t766 + pkin(9) * t1243 - qJ(5) * t573 - t1146 * t600;
t532 = -pkin(8) * t550 - t1149 * t535 + t1153 * t541;
t531 = -pkin(2) * t572 + pkin(8) * t551 + t1149 * t541 + t1153 * t535;
t530 = -pkin(7) * t543 - t1150 * t531 + t1154 * t532;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1115, -t1116, 0, t1080, 0, 0, 0, 0, 0, 0, t1054, t1055, t1077, t1008, 0, 0, 0, 0, 0, 0, t899, t906, t857, t806, 0, 0, 0, 0, 0, 0, t768, t773, t713, t627, 0, 0, 0, 0, 0, 0, t659, t661, t656, t567, 0, 0, 0, 0, 0, 0, t588, t597, t578, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1116, -t1115, 0, t1079, 0, 0, 0, 0, 0, 0, t1052, t1053, t1076, t1007, 0, 0, 0, 0, 0, 0, t898, t905, t856, t805, 0, 0, 0, 0, 0, 0, t767, t772, t712, t626, 0, 0, 0, 0, 0, 0, t658, t660, t655, t566, 0, 0, 0, 0, 0, 0, t587, t596, t577, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1081, t1082, 0, -t1028, 0, 0, 0, 0, 0, 0, t932, t956, t887, t827, 0, 0, 0, 0, 0, 0, t774, t797, t722, t629, 0, 0, 0, 0, 0, 0, t670, t674, t668, t575, 0, 0, 0, 0, 0, 0, t602, t604, t583, t543; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1116, 0, -t1115, 0, t1173, -t1099, -t1079, -pkin(6) * t1079, t1091 * t1155 - t1176, t1075 * t1155 - t1118 * t1151, t1085 * t1155 + t1150 * t1196, t1090 * t1155 + t1176, t1083 * t1155 + t1137 * t1151, qJDD(2) * t1151 + t1107 * t1155, -pkin(6) * t1052 - t1039 * t1151 + t1046 * t1155, -pkin(6) * t1053 - t1040 * t1151 + t1047 * t1155, -pkin(6) * t1076 + t1028 * t1155, -pkin(6) * t1007 - (pkin(1) * t1151 - pkin(7) * t1155) * t1028, t1155 * t935 - t1184, -t1073 * t1151 + t1155 * t888, -t1018 * t1151 + t1155 * t965, t1155 * t934 + t1184, -t1014 * t1151 + t1155 * t966, t1155 * t990 + t1177, -pkin(6) * t898 - t1151 * t849 + t1155 * t815, -pkin(6) * t905 - t1151 * t861 + t1155 * t836, -pkin(6) * t856 - t1151 * t841 + t1155 * t739, -pkin(6) * t805 - t1151 * t771 + t1155 * t749, t1155 * t781 + t1186, -t1002 * t1151 + t1155 * t723, -t1151 * t951 + t1155 * t801, t1155 * t780 - t1186, -t1151 * t947 + t1155 * t802, t1155 * t847 + t1177, -pkin(6) * t767 - t1151 * t690 + t1155 * t638, -pkin(6) * t772 - t1151 * t700 + t1155 * t654, -pkin(6) * t712 - t1151 * t678 + t1155 * t589, -pkin(6) * t626 - t1151 * t601 + t1155 * t571, -t1151 * t911 + t1155 * t716, -t1151 * t843 + t1155 * t679, -t1151 * t874 + t1155 * t680, -t1151 * t909 + t1155 * t715, -t1151 * t875 + t1155 * t681, -t1151 * t928 + t1155 * t725, -pkin(6) * t658 - t1151 * t612 + t1155 * t561, -pkin(6) * t660 - t1151 * t613 + t1155 * t562, -pkin(6) * t655 - t1151 * t599 + t1155 * t559, -pkin(6) * t566 - t1151 * t556 + t1155 * t539, -t1151 * t751 + t1155 * t615, -t1151 * t683 + t1155 * t586, -t1151 * t761 + t1155 * t608, -t1151 * t750 + t1155 * t614, -t1151 * t762 + t1155 * t609, -t1151 * t785 + t1155 * t651, -pkin(6) * t587 - t1151 * t563 + t1155 * t538, -pkin(6) * t596 - t1151 * t565 + t1155 * t540, -pkin(6) * t577 - t1151 * t546 + t1155 * t534, -pkin(6) * t536 - t1151 * t533 + t1155 * t530; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1115, 0, t1116, 0, t1099, t1173, t1080, pkin(6) * t1080, t1091 * t1151 + t1175, t1075 * t1151 + t1118 * t1155, t1085 * t1151 - t1150 * t1195, t1090 * t1151 - t1175, t1083 * t1151 - t1137 * t1155, -qJDD(2) * t1155 + t1107 * t1151, pkin(6) * t1054 + t1039 * t1155 + t1046 * t1151, pkin(6) * t1055 + t1040 * t1155 + t1047 * t1151, pkin(6) * t1077 + t1028 * t1151, pkin(6) * t1008 - (-pkin(1) * t1155 - pkin(7) * t1151) * t1028, t1151 * t935 + t1183, t1073 * t1155 + t1151 * t888, t1018 * t1155 + t1151 * t965, t1151 * t934 - t1183, t1014 * t1155 + t1151 * t966, t1151 * t990 - t1133, pkin(6) * t899 + t1151 * t815 + t1155 * t849, pkin(6) * t906 + t1151 * t836 + t1155 * t861, pkin(6) * t857 + t1151 * t739 + t1155 * t841, pkin(6) * t806 + t1151 * t749 + t1155 * t771, t1151 * t781 - t1185, t1002 * t1155 + t1151 * t723, t1151 * t801 + t1155 * t951, t1151 * t780 + t1185, t1151 * t802 + t1155 * t947, t1151 * t847 - t1133, pkin(6) * t768 + t1151 * t638 + t1155 * t690, pkin(6) * t773 + t1151 * t654 + t1155 * t700, pkin(6) * t713 + t1151 * t589 + t1155 * t678, pkin(6) * t627 + t1151 * t571 + t1155 * t601, t1151 * t716 + t1155 * t911, t1151 * t679 + t1155 * t843, t1151 * t680 + t1155 * t874, t1151 * t715 + t1155 * t909, t1151 * t681 + t1155 * t875, t1151 * t725 + t1155 * t928, pkin(6) * t659 + t1151 * t561 + t1155 * t612, pkin(6) * t661 + t1151 * t562 + t1155 * t613, pkin(6) * t656 + t1151 * t559 + t1155 * t599, pkin(6) * t567 + t1151 * t539 + t1155 * t556, t1151 * t615 + t1155 * t751, t1151 * t586 + t1155 * t683, t1151 * t608 + t1155 * t761, t1151 * t614 + t1155 * t750, t1151 * t609 + t1155 * t762, t1151 * t651 + t1155 * t785, pkin(6) * t588 + t1151 * t538 + t1155 * t563, pkin(6) * t597 + t1151 * t540 + t1155 * t565, pkin(6) * t578 + t1151 * t534 + t1155 * t546, pkin(6) * t537 + t1151 * t530 + t1155 * t533; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1121, t1122, 0, 0, (t1111 + t1182) * t1150, t1110 * t1154 + t1113 * t1150, t1124 * t1154 + t1209, (t1112 - t1189) * t1154, t1126 * t1150 + t1207, 0, pkin(1) * t1113 + pkin(7) * t1084 + t1210, -pkin(1) * t1110 + pkin(7) * t1086 - t1211, pkin(1) * t1117 + pkin(7) * t1114 + t1029, pkin(1) * t1104 + pkin(7) * t1029, t1011 * t1154 + t1012 * t1150, t1150 * t954 + t1154 * t952, t1021 * t1154 + t1023 * t1150, t1009 * t1154 + t1010 * t1150, t1022 * t1154 + t1024 * t1150, t1048 * t1154 + t1049 * t1150, -pkin(1) * t1013 + pkin(7) * t933 + t1150 * t967 + t1154 * t923, -pkin(1) * t1250 + pkin(7) * t957 + t1150 * t969 + t1154 * t927, -pkin(1) * t1043 + pkin(7) * t889 + t1150 * t848 + t1154 * t842, pkin(1) * t1044 + pkin(7) * t828 - pkin(8) * t1229 + t1154 * t890, t1150 * t873 + t1154 * t871, t1150 * t789 + t1154 * t787, t1150 * t895 + t1154 * t893, t1150 * t872 + t1154 * t870, t1150 * t896 + t1154 * t894, t1150 * t925 + t1154 * t924, -pkin(1) * t946 + pkin(7) * t775 + t1150 * t729 + t1154 * t714, pkin(1) * t1179 + pkin(7) * t798 + t1150 * t748 + t1154 * t726, -pkin(1) * t972 + pkin(7) * t724 + t1150 * t637 + t1154 * t632, pkin(1) * t936 + pkin(7) * t630 + t1150 * t628 + t1154 * t624, t1150 * t779 + t1154 * t777, t1150 * t741 + t1154 * t740, t1150 * t746 + t1154 * t744, t1150 * t778 + t1154 * t776, t1150 * t747 + t1154 * t745, t1150 * t792 + t1154 * t791, -pkin(1) * t850 + pkin(7) * t671 + t1150 * t592 + t1154 * t590, -pkin(1) * t858 + pkin(7) * t675 + t1150 * t593 + t1154 * t591, -pkin(1) * t844 + pkin(7) * t669 + t1150 * t585 + t1154 * t582, -pkin(1) * t672 + pkin(7) * t576 + t1150 * t557 + t1154 * t553, t1150 * t665 + t1154 * t663, t1150 * t622 + t1154 * t621, t1150 * t649 + t1154 * t647, t1150 * t664 + t1154 * t662, t1150 * t650 + t1154 * t648, t1150 * t707 + t1154 * t706, -pkin(1) * t727 + pkin(7) * t603 + t1150 * t548 + t1154 * t547, -pkin(1) * t742 + pkin(7) * t605 + t1150 * t552 + t1154 * t549, -pkin(1) * t684 + pkin(7) * t584 + t1150 * t545 + t1154 * t542, -pkin(1) * t572 + pkin(7) * t544 + t1150 * t532 + t1154 * t531;];
tauB_reg  = t1;
