% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 02:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:49:03
% EndTime: 2019-05-05 02:49:12
% DurationCPUTime: 10.26s
% Computational Cost: add. (23234->306), mult. (51513->406), div. (0->0), fcn. (37247->12), ass. (0->230)
t2438 = sin(pkin(11));
t2441 = cos(pkin(11));
t2450 = cos(qJ(3));
t2515 = qJD(2) * t2450;
t2447 = sin(qJ(3));
t2516 = qJD(2) * t2447;
t2405 = t2438 * t2516 - t2441 * t2515;
t2407 = (t2438 * t2450 + t2441 * t2447) * qJD(2);
t2509 = t2407 * t2405;
t2371 = -qJDD(3) - t2509;
t2452 = qJD(3) ^ 2;
t2521 = t2407 ^ 2;
t2392 = t2452 + t2521;
t2346 = t2371 * t2438 - t2392 * t2441;
t2348 = t2371 * t2441 + t2392 * t2438;
t2312 = t2346 * t2450 + t2348 * t2447;
t2440 = sin(pkin(6));
t2443 = cos(pkin(6));
t2313 = t2346 * t2447 - t2348 * t2450;
t2448 = sin(qJ(2));
t2451 = cos(qJ(2));
t2500 = qJD(3) * t2515;
t2504 = t2447 * qJDD(2);
t2415 = t2500 + t2504;
t2501 = qJD(3) * t2516;
t2503 = t2450 * qJDD(2);
t2467 = -t2501 + t2503;
t2464 = t2441 * t2415 + t2438 * t2467;
t2514 = qJD(3) * t2405;
t2461 = t2464 - t2514;
t2478 = t2313 * t2448 + t2451 * t2461;
t2275 = t2440 * t2312 + t2443 * t2478;
t2299 = t2313 * t2451 - t2448 * t2461;
t2439 = sin(pkin(10));
t2442 = cos(pkin(10));
t2561 = t2275 * t2439 - t2299 * t2442;
t2560 = t2275 * t2442 + t2299 * t2439;
t2400 = t2405 ^ 2;
t2367 = -t2452 - t2400;
t2494 = qJDD(3) - t2509;
t2332 = t2367 * t2438 + t2441 * t2494;
t2335 = -t2367 * t2441 + t2438 * t2494;
t2301 = t2332 * t2450 - t2335 * t2447;
t2304 = t2332 * t2447 + t2335 * t2450;
t2378 = t2415 * t2438 - t2441 * t2467;
t2510 = t2407 * qJD(3);
t2533 = t2378 + t2510;
t2480 = t2304 * t2448 + t2451 * t2533;
t2269 = t2440 * t2301 + t2443 * t2480;
t2296 = t2304 * t2451 - t2448 * t2533;
t2559 = t2269 * t2439 - t2296 * t2442;
t2558 = t2269 * t2442 + t2296 * t2439;
t2525 = -t2400 - t2521;
t2352 = t2378 - t2510;
t2356 = t2464 + t2514;
t2536 = -t2352 * t2441 + t2356 * t2438;
t2537 = -t2352 * t2438 - t2356 * t2441;
t2541 = -t2447 * t2537 + t2450 * t2536;
t2544 = t2448 * t2525 + t2451 * t2541;
t2540 = t2447 * t2536 + t2450 * t2537;
t2545 = t2448 * t2541 - t2451 * t2525;
t2550 = -t2440 * t2540 + t2443 * t2545;
t2557 = -t2439 * t2550 + t2442 * t2544;
t2556 = t2439 * t2544 + t2442 * t2550;
t2273 = -t2443 * t2312 + t2440 * t2478;
t2551 = t2440 * t2545 + t2443 * t2540;
t2267 = -t2443 * t2301 + t2440 * t2480;
t2491 = g(1) * t2439 - g(2) * t2442;
t2517 = -g(3) + qJDD(1);
t2528 = t2440 * t2517 + t2443 * t2491;
t2446 = sin(qJ(6));
t2449 = cos(qJ(6));
t2421 = -g(1) * t2442 - g(2) * t2439;
t2365 = t2451 * t2421 + t2448 * t2528;
t2453 = qJD(2) ^ 2;
t2361 = -pkin(2) * t2453 + qJDD(2) * pkin(8) + t2365;
t2390 = -t2440 * t2491 + t2443 * t2517;
t2341 = -t2447 * t2361 + t2450 * t2390;
t2430 = t2447 * t2453 * t2450;
t2423 = qJDD(3) + t2430;
t2326 = (-t2415 + t2500) * qJ(4) + t2423 * pkin(3) + t2341;
t2342 = t2450 * t2361 + t2447 * t2390;
t2422 = qJD(3) * pkin(3) - qJ(4) * t2516;
t2520 = t2450 ^ 2;
t2508 = t2520 * t2453;
t2327 = -pkin(3) * t2508 + qJ(4) * t2467 - qJD(3) * t2422 + t2342;
t2496 = -t2441 * t2326 + t2438 * t2327;
t2466 = -qJDD(3) * pkin(4) - t2452 * qJ(5) + qJDD(5) + t2496;
t2456 = pkin(5) * t2356 - qJDD(3) * pkin(9) + t2466;
t2490 = t2448 * t2421 - t2451 * t2528;
t2360 = -qJDD(2) * pkin(2) - t2453 * pkin(8) + t2490;
t2331 = -t2467 * pkin(3) - qJ(4) * t2508 + t2422 * t2516 + qJDD(4) + t2360;
t2458 = t2378 * pkin(4) - qJ(5) * t2461 + t2331;
t2457 = -t2400 * pkin(5) + t2378 * pkin(9) + t2458;
t2519 = 2 * qJD(4);
t2507 = pkin(4) * t2405 - qJ(5) * t2407 + t2519;
t2492 = pkin(9) * t2405 + t2507;
t2389 = pkin(5) * t2407 - qJD(3) * pkin(9);
t2498 = pkin(4) * qJD(3) - (2 * qJD(5));
t2493 = -t2389 + t2498;
t2454 = -t2446 * t2457 + t2449 * t2456 + (-t2446 * t2493 + t2449 * t2492) * t2407;
t2380 = qJD(3) * t2446 - t2449 * t2405;
t2524 = t2380 ^ 2;
t2382 = qJD(3) * t2449 + t2405 * t2446;
t2523 = t2382 ^ 2;
t2399 = qJD(6) + t2407;
t2522 = t2399 ^ 2;
t2518 = 2 * qJD(5);
t2511 = t2382 * t2380;
t2506 = qJD(6) - t2399;
t2505 = qJD(6) + t2399;
t2435 = t2447 ^ 2;
t2502 = t2435 + t2520;
t2499 = -t2522 - t2523;
t2495 = -t2446 * qJDD(3) + t2449 * t2378;
t2251 = t2449 * t2457 + t2446 * t2456 + (t2446 * t2492 + t2449 * t2493) * t2407;
t2236 = t2446 * t2251 + t2449 * t2454;
t2476 = t2438 * t2326 + t2441 * t2327;
t2462 = -t2452 * pkin(4) + qJDD(3) * qJ(5) - t2405 * t2507 + t2476;
t2270 = -t2378 * pkin(5) - t2400 * pkin(9) + (t2518 + t2389) * qJD(3) + t2462;
t2231 = -t2236 * t2441 + t2270 * t2438;
t2232 = t2236 * t2438 + t2270 * t2441;
t2226 = -t2231 * t2447 + t2232 * t2450;
t2237 = t2251 * t2449 - t2446 * t2454;
t2489 = t2226 * t2448 - t2237 * t2451;
t2279 = qJD(3) * t2518 + t2462;
t2280 = t2407 * t2507 + t2466;
t2254 = t2279 * t2438 - t2280 * t2441;
t2255 = t2279 * t2441 + t2280 * t2438;
t2243 = -t2254 * t2447 + t2255 * t2450;
t2298 = t2407 * t2498 + t2458;
t2488 = t2243 * t2448 - t2298 * t2451;
t2287 = -t2407 * t2519 - t2496;
t2288 = -0.2e1 * qJD(4) * t2405 + t2476;
t2264 = t2287 * t2441 + t2288 * t2438;
t2265 = -t2287 * t2438 + t2288 * t2441;
t2246 = -t2264 * t2447 + t2265 * t2450;
t2487 = t2246 * t2448 - t2331 * t2451;
t2319 = -t2382 * t2506 + t2495;
t2469 = -t2449 * qJDD(3) - t2446 * t2378;
t2465 = t2380 * t2506 + t2469;
t2289 = t2446 * t2319 + t2449 * t2465;
t2340 = -t2523 - t2524;
t2277 = -t2289 * t2441 + t2340 * t2438;
t2278 = t2289 * t2438 + t2340 * t2441;
t2253 = -t2277 * t2447 + t2278 * t2450;
t2290 = t2319 * t2449 - t2446 * t2465;
t2486 = t2253 * t2448 - t2290 * t2451;
t2343 = -t2522 - t2524;
t2463 = -qJDD(6) - t2464;
t2459 = -t2463 - t2511;
t2305 = t2446 * t2343 + t2449 * t2459;
t2318 = t2382 * t2505 - t2495;
t2283 = -t2305 * t2441 + t2318 * t2438;
t2284 = t2305 * t2438 + t2318 * t2441;
t2257 = -t2283 * t2447 + t2284 * t2450;
t2306 = t2343 * t2449 - t2446 * t2459;
t2485 = t2257 * t2448 - t2306 * t2451;
t2330 = t2463 - t2511;
t2309 = t2446 * t2330 + t2449 * t2499;
t2320 = -t2380 * t2505 - t2469;
t2285 = -t2309 * t2441 + t2320 * t2438;
t2286 = t2309 * t2438 + t2320 * t2441;
t2259 = -t2285 * t2447 + t2286 * t2450;
t2310 = t2330 * t2449 - t2446 * t2499;
t2484 = t2259 * t2448 - t2310 * t2451;
t2308 = -t2341 * t2447 + t2342 * t2450;
t2479 = t2308 * t2448 - t2360 * t2451;
t2475 = t2365 * t2448 - t2451 * t2490;
t2429 = -t2452 - t2508;
t2385 = -t2423 * t2447 + t2429 * t2450;
t2416 = -0.2e1 * t2501 + t2503;
t2474 = t2385 * t2448 + t2416 * t2451;
t2424 = -qJDD(3) + t2430;
t2428 = -t2435 * t2453 - t2452;
t2386 = t2424 * t2450 - t2428 * t2447;
t2414 = 0.2e1 * t2500 + t2504;
t2473 = t2386 * t2448 - t2414 * t2451;
t2417 = t2502 * qJDD(2);
t2420 = t2502 * t2453;
t2472 = t2417 * t2448 + t2420 * t2451;
t2470 = qJDD(2) * t2451 - t2448 * t2453;
t2419 = -qJDD(2) * t2448 - t2451 * t2453;
t2404 = t2470 * t2443;
t2403 = t2419 * t2443;
t2402 = t2470 * t2440;
t2401 = t2419 * t2440;
t2384 = t2424 * t2447 + t2428 * t2450;
t2383 = t2423 * t2450 + t2429 * t2447;
t2379 = t2417 * t2451 - t2420 * t2448;
t2374 = t2472 * t2443;
t2373 = t2472 * t2440;
t2363 = t2386 * t2451 + t2414 * t2448;
t2362 = t2385 * t2451 - t2416 * t2448;
t2339 = -t2440 * t2384 + t2443 * t2473;
t2338 = -t2440 * t2383 + t2443 * t2474;
t2337 = t2443 * t2384 + t2440 * t2473;
t2336 = t2443 * t2383 + t2440 * t2474;
t2329 = t2365 * t2451 + t2448 * t2490;
t2316 = -t2440 * t2390 + t2443 * t2475;
t2315 = t2443 * t2390 + t2440 * t2475;
t2307 = t2341 * t2450 + t2342 * t2447;
t2297 = t2308 * t2451 + t2360 * t2448;
t2272 = -t2440 * t2307 + t2443 * t2479;
t2271 = t2443 * t2307 + t2440 * t2479;
t2258 = t2285 * t2450 + t2286 * t2447;
t2256 = t2283 * t2450 + t2284 * t2447;
t2252 = t2277 * t2450 + t2278 * t2447;
t2249 = t2259 * t2451 + t2310 * t2448;
t2248 = t2257 * t2451 + t2306 * t2448;
t2247 = t2253 * t2451 + t2290 * t2448;
t2245 = t2264 * t2450 + t2265 * t2447;
t2244 = t2246 * t2451 + t2331 * t2448;
t2242 = t2254 * t2450 + t2255 * t2447;
t2241 = -t2440 * t2258 + t2443 * t2484;
t2240 = t2443 * t2258 + t2440 * t2484;
t2239 = -t2440 * t2256 + t2443 * t2485;
t2238 = t2443 * t2256 + t2440 * t2485;
t2235 = t2243 * t2451 + t2298 * t2448;
t2234 = -t2440 * t2252 + t2443 * t2486;
t2233 = t2443 * t2252 + t2440 * t2486;
t2230 = -t2440 * t2245 + t2443 * t2487;
t2229 = t2443 * t2245 + t2440 * t2487;
t2228 = -t2440 * t2242 + t2443 * t2488;
t2227 = t2443 * t2242 + t2440 * t2488;
t2225 = t2231 * t2450 + t2232 * t2447;
t2224 = t2226 * t2451 + t2237 * t2448;
t2223 = -t2440 * t2225 + t2443 * t2489;
t2222 = t2443 * t2225 + t2440 * t2489;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2442 * t2421 - t2439 * t2491, 0, 0, 0, 0, 0, 0, -t2404 * t2439 + t2419 * t2442, -t2403 * t2439 - t2442 * t2470, 0, -t2316 * t2439 + t2329 * t2442, 0, 0, 0, 0, 0, 0, -t2338 * t2439 + t2362 * t2442, -t2339 * t2439 + t2363 * t2442, -t2374 * t2439 + t2379 * t2442, -t2272 * t2439 + t2297 * t2442, 0, 0, 0, 0, 0, 0, t2559, t2561, t2557, -t2230 * t2439 + t2244 * t2442, 0, 0, 0, 0, 0, 0, t2557, -t2559, -t2561, -t2228 * t2439 + t2235 * t2442, 0, 0, 0, 0, 0, 0, -t2239 * t2439 + t2248 * t2442, -t2241 * t2439 + t2249 * t2442, -t2234 * t2439 + t2247 * t2442, -t2223 * t2439 + t2224 * t2442; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2439 * t2421 + t2442 * t2491, 0, 0, 0, 0, 0, 0, t2404 * t2442 + t2419 * t2439, t2403 * t2442 - t2439 * t2470, 0, t2316 * t2442 + t2329 * t2439, 0, 0, 0, 0, 0, 0, t2338 * t2442 + t2362 * t2439, t2339 * t2442 + t2363 * t2439, t2374 * t2442 + t2379 * t2439, t2272 * t2442 + t2297 * t2439, 0, 0, 0, 0, 0, 0, -t2558, -t2560, t2556, t2230 * t2442 + t2244 * t2439, 0, 0, 0, 0, 0, 0, t2556, t2558, t2560, t2228 * t2442 + t2235 * t2439, 0, 0, 0, 0, 0, 0, t2239 * t2442 + t2248 * t2439, t2241 * t2442 + t2249 * t2439, t2234 * t2442 + t2247 * t2439, t2223 * t2442 + t2224 * t2439; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, 0, 0, 0, 0, 0, 0, t2402, t2401, 0, t2315, 0, 0, 0, 0, 0, 0, t2336, t2337, t2373, t2271, 0, 0, 0, 0, 0, 0, -t2267, -t2273, t2551, t2229, 0, 0, 0, 0, 0, 0, t2551, t2267, t2273, t2227, 0, 0, 0, 0, 0, 0, t2238, t2240, t2233, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2421, 0, 0, 0, 0, 0, 0, t2419, -t2470, 0, t2329, 0, 0, 0, 0, 0, 0, t2362, t2363, t2379, t2297, 0, 0, 0, 0, 0, 0, -t2296, -t2299, t2544, t2244, 0, 0, 0, 0, 0, 0, t2544, t2296, t2299, t2235, 0, 0, 0, 0, 0, 0, t2248, t2249, t2247, t2224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2491, 0, 0, 0, 0, 0, 0, t2404, t2403, 0, t2316, 0, 0, 0, 0, 0, 0, t2338, t2339, t2374, t2272, 0, 0, 0, 0, 0, 0, -t2269, -t2275, t2550, t2230, 0, 0, 0, 0, 0, 0, t2550, t2269, t2275, t2228, 0, 0, 0, 0, 0, 0, t2239, t2241, t2234, t2223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, 0, 0, 0, 0, 0, 0, t2402, t2401, 0, t2315, 0, 0, 0, 0, 0, 0, t2336, t2337, t2373, t2271, 0, 0, 0, 0, 0, 0, -t2267, -t2273, t2551, t2229, 0, 0, 0, 0, 0, 0, t2551, t2267, t2273, t2227, 0, 0, 0, 0, 0, 0, t2238, t2240, t2233, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2453, -qJDD(2), 0, t2365, 0, 0, 0, 0, 0, 0, t2385, t2386, t2417, t2308, 0, 0, 0, 0, 0, 0, -t2304, -t2313, t2541, t2246, 0, 0, 0, 0, 0, 0, t2541, t2304, t2313, t2243, 0, 0, 0, 0, 0, 0, t2257, t2259, t2253, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2453, 0, -t2490, 0, 0, 0, 0, 0, 0, t2416, -t2414, t2420, -t2360, 0, 0, 0, 0, 0, 0, -t2533, -t2461, -t2525, -t2331, 0, 0, 0, 0, 0, 0, -t2525, t2533, t2461, -t2298, 0, 0, 0, 0, 0, 0, -t2306, -t2310, -t2290, -t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2390, 0, 0, 0, 0, 0, 0, t2383, t2384, 0, t2307, 0, 0, 0, 0, 0, 0, t2301, t2312, t2540, t2245, 0, 0, 0, 0, 0, 0, t2540, -t2301, -t2312, t2242, 0, 0, 0, 0, 0, 0, t2256, t2258, t2252, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2429, t2424, t2503, t2342, 0, 0, 0, 0, 0, 0, -t2335, t2348, t2536, t2265, 0, 0, 0, 0, 0, 0, t2536, t2335, -t2348, t2255, 0, 0, 0, 0, 0, 0, t2284, t2286, t2278, t2232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2423, t2428, -t2504, t2341, 0, 0, 0, 0, 0, 0, t2332, t2346, t2537, t2264, 0, 0, 0, 0, 0, 0, t2537, -t2332, -t2346, t2254, 0, 0, 0, 0, 0, 0, t2283, t2285, t2277, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2416, t2414, -t2420, t2360, 0, 0, 0, 0, 0, 0, t2533, t2461, t2525, t2331, 0, 0, 0, 0, 0, 0, t2525, -t2533, -t2461, t2298, 0, 0, 0, 0, 0, 0, t2306, t2310, t2290, t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2367, t2371, -t2352, t2288, 0, 0, 0, 0, 0, 0, -t2352, -t2367, -t2371, t2279, 0, 0, 0, 0, 0, 0, t2318, t2320, t2340, t2270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2494, -t2392, -t2356, t2287, 0, 0, 0, 0, 0, 0, -t2356, -t2494, t2392, -t2280, 0, 0, 0, 0, 0, 0, -t2305, -t2309, -t2289, -t2236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2533, t2461, t2525, t2331, 0, 0, 0, 0, 0, 0, t2525, -t2533, -t2461, t2298, 0, 0, 0, 0, 0, 0, t2306, t2310, t2290, t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2525, -t2533, -t2461, t2298, 0, 0, 0, 0, 0, 0, t2306, t2310, t2290, t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2352, t2367, t2371, -t2279, 0, 0, 0, 0, 0, 0, -t2318, -t2320, -t2340, -t2270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, t2494, -t2392, t2280, 0, 0, 0, 0, 0, 0, t2305, t2309, t2289, t2236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2343, t2330, t2319, t2251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2459, t2499, t2465, t2454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2318, t2320, t2340, t2270;];
f_new_reg  = t1;
