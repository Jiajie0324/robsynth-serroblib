% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPPR2_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR2_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR2_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR2_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:06:34
% EndTime: 2019-03-08 21:06:45
% DurationCPUTime: 4.56s
% Computational Cost: add. (3321->317), mult. (7889->481), div. (0->0), fcn. (9057->10), ass. (0->258)
t226 = cos(qJ(3));
t367 = cos(pkin(11));
t211 = t367 * t226;
t220 = sin(pkin(11));
t223 = sin(qJ(3));
t349 = t220 * t223;
t188 = -t211 + t349;
t418 = t188 / 0.2e1;
t383 = -t188 / 0.2e1;
t221 = sin(pkin(6));
t224 = sin(qJ(2));
t347 = t221 * t224;
t368 = cos(pkin(6));
t178 = t368 * t223 + t226 * t347;
t164 = t367 * t178;
t177 = t223 * t347 - t368 * t226;
t351 = t220 * t177;
t403 = t164 - t351;
t290 = t403 * t383;
t121 = -t367 * t177 - t220 * t178;
t281 = t367 * t223;
t348 = t220 * t226;
t190 = t281 + t348;
t361 = t121 * t190;
t234 = t290 - t361 / 0.2e1 + t347 / 0.2e1;
t227 = cos(qJ(2));
t346 = t221 * t227;
t153 = t190 * t346;
t198 = t346 * t349;
t255 = t211 * t346;
t154 = t255 - t198;
t30 = t221 ^ 2 * t224 * t227 + t121 * t153 - t154 * t403;
t409 = t30 * qJD(1);
t416 = t234 * qJD(4) - t409;
t288 = -t347 / 0.2e1;
t250 = t288 + t290;
t233 = t361 / 0.2e1 - t250;
t415 = -qJD(4) * t233 + t409;
t185 = t188 ^ 2;
t388 = t190 ^ 2;
t401 = -t388 - t185;
t414 = qJD(4) * t401;
t413 = t401 * qJD(2);
t412 = t403 / 0.2e1;
t411 = qJD(2) * t30;
t222 = sin(qJ(6));
t375 = -qJ(4) - pkin(8);
t202 = t375 * t223;
t203 = t375 * t226;
t148 = -t367 * t202 - t203 * t220;
t253 = pkin(5) * t190 + t148;
t362 = t222 * t253;
t225 = cos(qJ(6));
t410 = t225 * t253;
t378 = t225 / 0.2e1;
t289 = t403 * t378;
t282 = t412 - t403 / 0.2e1;
t275 = t282 * t190;
t395 = t275 * qJD(3);
t408 = (t153 * t190 - t154 * t188) * qJD(2) + t395;
t129 = t222 * t190;
t322 = t129 * qJD(2);
t326 = qJD(6) * t222;
t407 = t322 + t326;
t197 = t367 * t203;
t350 = t220 * t202;
t402 = -t197 + t350;
t406 = -t188 * pkin(5) + t402;
t405 = t121 * t418 - t275;
t404 = 0.2e1 * t406;
t259 = t148 * t190 - t188 * t402;
t397 = qJD(4) * t259;
t396 = t275 * qJD(2);
t394 = t233 * qJD(2);
t393 = t234 * qJD(2);
t218 = t222 ^ 2;
t219 = t225 ^ 2;
t207 = t218 - t219;
t132 = t225 * t188;
t280 = 0.2e1 * t222 * t132;
t243 = qJD(2) * t280 - qJD(3) * t207;
t390 = qJD(1) * t275;
t389 = -qJD(1) * t233 + qJD(2) * t259;
t387 = pkin(4) + pkin(9);
t277 = t164 / 0.2e1;
t382 = -t190 / 0.2e1;
t276 = -t197 / 0.2e1;
t381 = -t198 / 0.2e1;
t213 = -t367 * pkin(3) - pkin(4);
t380 = -t213 / 0.2e1;
t379 = -t222 / 0.2e1;
t376 = t190 * pkin(4);
t216 = t223 * pkin(3);
t374 = qJD(3) * pkin(3);
t355 = t188 * qJ(5);
t279 = t216 + t355;
t90 = t387 * t190 + t279;
t373 = t222 * t90;
t372 = t225 * t90;
t87 = -t121 * t225 + t222 * t346;
t371 = t87 * t190;
t88 = t121 * t222 + t225 * t346;
t370 = t88 * t190;
t179 = t190 * qJD(4);
t241 = t348 / 0.2e1 + t281 / 0.2e1;
t102 = (t382 + t241) * t346;
t324 = t102 * qJD(1);
t369 = t179 + t324;
t214 = -pkin(3) * t226 - pkin(2);
t254 = -qJ(5) * t190 + t214;
t128 = pkin(4) * t188 + t254;
t134 = t279 + t376;
t39 = -t128 * t190 - t134 * t188;
t366 = qJD(2) * t39;
t64 = t401 * t222;
t365 = qJD(2) * t64;
t307 = t388 - t185;
t95 = t307 * t222;
t364 = qJD(2) * t95;
t96 = t307 * t225;
t363 = qJD(2) * t96;
t357 = t154 * t222;
t356 = t154 * t225;
t354 = t188 * t222;
t210 = pkin(3) * t220 + qJ(5);
t353 = t190 * t210;
t352 = t210 * t188;
t345 = t222 * t153;
t344 = t225 * t153;
t215 = t216 / 0.2e1;
t47 = t215 + (pkin(4) / 0.2e1 + t380) * t190 + (qJ(5) / 0.2e1 + t210 / 0.2e1) * t188;
t339 = t47 * qJD(2);
t97 = t401 * t225;
t338 = t97 * qJD(2);
t336 = qJD(2) * t222;
t335 = qJD(2) * t224;
t334 = qJD(2) * t226;
t333 = qJD(3) * t132;
t332 = qJD(3) * t222;
t331 = qJD(4) * t188;
t330 = qJD(5) * t190;
t329 = qJD(5) * t222;
t328 = qJD(5) * t225;
t327 = qJD(6) * t129;
t325 = qJD(6) * t225;
t304 = -t367 / 0.2e1;
t235 = (t190 * t304 + t220 * t383) * pkin(3);
t112 = -t216 / 0.2e1 + t235;
t323 = t112 * qJD(2);
t321 = t132 * qJD(2);
t182 = t349 / 0.2e1 - t211 / 0.2e1;
t318 = t182 * qJD(2);
t317 = t388 * qJD(2);
t316 = t188 * qJD(2);
t315 = t188 * qJD(3);
t314 = t188 * qJD(5);
t313 = t190 * qJD(2);
t312 = t190 * qJD(3);
t208 = -t223 ^ 2 + t226 ^ 2;
t311 = t208 * qJD(2);
t310 = t223 * qJD(3);
t309 = t225 * qJD(3);
t308 = t226 * qJD(3);
t306 = pkin(2) * t223 * qJD(2);
t305 = pkin(2) * t334;
t303 = t128 * t313;
t302 = t388 * t336;
t301 = t222 * t315;
t300 = t222 * t309;
t299 = t190 * t326;
t298 = t190 * t325;
t297 = t188 * t313;
t296 = t188 * t312;
t295 = t221 * t335;
t294 = qJD(2) * t346;
t293 = t222 * t316;
t292 = t223 * t334;
t291 = t222 * t325;
t173 = t225 * t313;
t287 = -t346 / 0.2e1;
t286 = t346 / 0.2e1;
t285 = -t345 / 0.2e1;
t284 = t344 / 0.2e1;
t278 = qJD(6) + t313;
t274 = qJD(3) * t280;
t89 = t387 * t188 + t254;
t38 = t225 * t89 + t362;
t4 = -t372 * t190 + (t38 - t362) * t188;
t229 = t222 * t405 + t88 * t383;
t8 = -t356 / 0.2e1 + t229;
t272 = t8 * qJD(1) + t4 * qJD(2);
t230 = -t225 * t405 + t87 * t383;
t10 = -t357 / 0.2e1 + t230;
t37 = t222 * t89 - t410;
t3 = -t373 * t190 + (t37 + t410) * t188;
t271 = t10 * qJD(1) + t3 * qJD(2);
t19 = t128 * t134;
t228 = t134 * t287;
t252 = t153 * t380 - t154 * t210 / 0.2e1;
t2 = t228 + t252;
t270 = t2 * qJD(1) + t19 * qJD(2);
t32 = t214 * t216;
t242 = t154 * t220 / 0.2e1 + t153 * t304;
t5 = (t223 * t286 + t242) * pkin(3);
t269 = -t5 * qJD(1) + t32 * qJD(2);
t20 = t132 * t406 + t190 * t37;
t25 = t285 + t371 / 0.2e1 + t250 * t225;
t266 = -qJD(1) * t25 + qJD(2) * t20;
t21 = -t190 * t38 + t354 * t406;
t24 = t284 - t370 / 0.2e1 + t250 * t222;
t265 = -qJD(1) * t24 + qJD(2) * t21;
t260 = t148 * t153 + t154 * t402;
t209 = -pkin(9) + t213;
t258 = t188 * t209 + t353;
t103 = t381 + (t211 / 0.2e1 + t418) * t346;
t40 = t128 * t188 - t134 * t190;
t257 = -qJD(1) * t103 + qJD(2) * t40;
t256 = t278 * t222;
t251 = t209 * t382 + t352 / 0.2e1;
t249 = t188 * t256;
t131 = (t219 / 0.2e1 - t218 / 0.2e1) * t188;
t248 = -qJD(2) * t131 + t300;
t247 = qJD(6) * t182 + t297;
t245 = t185 * t225 * t336 + qJD(3) * t131;
t135 = t207 * t185;
t244 = qJD(2) * t135 + t274;
t240 = t90 / 0.2e1 + t251;
t118 = t277 - t164 / 0.2e1;
t146 = t276 + t197 / 0.2e1;
t239 = qJD(1) * t118 + qJD(2) * t146 + qJD(3) * t210;
t15 = t222 * t240;
t42 = t282 * t225;
t237 = qJD(1) * t42 - qJD(2) * t15 - t210 * t309;
t17 = t225 * t240;
t41 = t282 * t222;
t236 = -qJD(1) * t41 - qJD(2) * t17 + t210 * t332;
t174 = t182 * qJD(3);
t157 = -t173 - t325;
t126 = t131 * qJD(6);
t117 = 0.2e1 * t276 + t350;
t111 = t215 + t235;
t105 = t190 * t286 + t241 * t346;
t104 = t188 * t287 + t255 / 0.2e1 + t381;
t93 = t105 * qJD(2);
t91 = t102 * qJD(2);
t63 = 0.2e1 * t277 - t351;
t48 = -t352 / 0.2e1 + t213 * t190 / 0.2e1 + t215 + t355 / 0.2e1 + t376 / 0.2e1;
t44 = 0.2e1 * t289;
t43 = 0.2e1 * t403 * t379;
t27 = t370 / 0.2e1 + t354 * t412 + t222 * t288 + t284;
t26 = -t371 / 0.2e1 + t188 * t289 + t225 * t288 + t285;
t18 = -t372 / 0.2e1 + t251 * t225 + t404 * t379;
t16 = -t373 / 0.2e1 + t251 * t222 + t404 * t378;
t9 = t357 / 0.2e1 + t230;
t7 = t356 / 0.2e1 + t229;
t6 = pkin(3) * t242 + t287 * t216;
t1 = t228 - t252;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t411, 0, 0, 0, -t411, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t295, -t294, 0, 0, 0, 0, 0 (-t224 * t334 - t227 * t310) * t221 (t223 * t335 - t227 * t308) * t221, t408 (t214 * t347 + t260) * qJD(2) + t6 * qJD(3) + t416, t408, qJD(3) * t105 - t188 * t295, qJD(3) * t104 - t190 * t295 (t128 * t347 + t260) * qJD(2) + t1 * qJD(3) + t105 * qJD(5) + t416, 0, 0, 0, 0, 0 ((-t222 * t347 + t344) * t190 - t154 * t132) * qJD(2) + t9 * qJD(3) + t27 * qJD(6) (-(t225 * t347 + t345) * t190 + t154 * t354) * qJD(2) + t7 * qJD(3) + t26 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t178 * qJD(3) - t223 * t294, t177 * qJD(3) - t226 * t294, t396, t6 * qJD(2) + (t121 * t220 - t367 * t403) * t374, t396, qJD(3) * t403 + t93, qJD(2) * t104 + qJD(3) * t121, t1 * qJD(2) + (t121 * t210 + t213 * t403) * qJD(3) + t63 * qJD(5), 0, 0, 0, 0, 0, qJD(2) * t9 + qJD(6) * t44 + t121 * t332, qJD(2) * t7 + qJD(6) * t43 + t121 * t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t393, 0, 0, 0, t393, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t63 + t93, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t27 + qJD(3) * t44 + qJD(6) * t88, qJD(2) * t26 + qJD(3) * t43 - qJD(6) * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -qJD(3) * t5 + t415, t395, -t102 * qJD(3), -t103 * qJD(3), qJD(3) * t2 - qJD(5) * t102 + t415, 0, 0, 0, 0, 0, qJD(3) * t10 - qJD(6) * t24, qJD(3) * t8 - qJD(6) * t25; 0, 0, 0, 0, t223 * t308, t208 * qJD(3), 0, 0, 0, -pkin(2) * t310, -pkin(2) * t308, -t414, qJD(3) * t32 + t397, -t414, qJD(3) * t39 + t190 * t314, qJD(3) * t40 + qJD(5) * t388, qJD(3) * t19 - t128 * t330 + t397, t185 * t291 + t218 * t296, -qJD(6) * t135 + t190 * t274, qJD(3) * t95 + t188 * t298, qJD(3) * t96 - t188 * t299, -t296, qJD(3) * t3 - qJD(4) * t97 + qJD(6) * t21 + t388 * t329, qJD(3) * t4 + qJD(4) * t64 + qJD(6) * t20 + t328 * t388; 0, 0, 0, 0, t292, t311, t308, -t310, 0, -pkin(8) * t308 - t306, pkin(8) * t310 - t305 (t367 * t188 - t190 * t220) * t374 + t390 (-t148 * t220 - t367 * t402) * t374 + t111 * qJD(4) + t269 (-t188 * t213 - t353) * qJD(3) - t314 + t390, qJD(3) * t402 - t324 + t366, -qJD(3) * t148 + t257 (-t148 * t210 + t213 * t402) * qJD(3) + t48 * qJD(4) + t117 * qJD(5) + t270, t126 + (t218 * t316 + t300) * t190, -0.2e1 * t188 * t291 + t190 * t243, -t188 * t309 + t364, t301 + t363, -t247 (-t225 * t258 - t362) * qJD(3) - t132 * qJD(5) + t16 * qJD(6) + t271, -t253 * t309 + t18 * qJD(6) + (qJD(3) * t258 + t314) * t222 + t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t413, qJD(3) * t111 + t389, -t413, 0, 0, qJD(3) * t48 + t389, 0, 0, 0, 0, 0, -t338, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t315, t297, t317, qJD(3) * t117 - t303 - t324, 0, 0, 0, 0, 0, t302 - t333, t225 * t317 + t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, -t244, t278 * t132, -t249, -t174, qJD(3) * t16 - qJD(6) * t38 + t265, qJD(3) * t18 + qJD(6) * t37 + t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t396, qJD(2) * t5, -t396, t91, t103 * qJD(2), -qJD(2) * t2 + qJD(5) * t118, 0, 0, 0, 0, 0, -qJD(2) * t10 - qJD(6) * t42, -qJD(2) * t8 + qJD(6) * t41; 0, 0, 0, 0, -t292, -t311, 0, 0, 0, t306, t305, -t390, qJD(4) * t112 - t269, -t390, -t366 + t369, -t257 - t331, -qJD(4) * t47 + qJD(5) * t146 - t270, -t218 * t297 + t126, -0.2e1 * t225 * t249, -t299 - t364, -t298 - t363, t247, qJD(6) * t15 - t222 * t331 - t271, -qJD(4) * t132 + qJD(6) * t17 - t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), t210 * qJD(5), -t291, t207 * qJD(6), 0, 0, 0, t210 * t325 + t329, -t210 * t326 + t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t323, 0, t313, -t316, -t339, 0, 0, 0, 0, 0, -t293, -t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t239, 0, 0, 0, 0, 0, t332, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t248, -t243, -t256, t157, t318, -t209 * t326 - t237, -t209 * t325 - t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t394, 0, 0, 0, t394, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t413, -qJD(3) * t112 - t389, t413, -t312, t315, qJD(3) * t47 - t330 - t389, 0, 0, 0, 0, 0, -t298 + t301 + t338, t327 + t333 - t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, 0, -t313, t316, t339, 0, 0, 0, 0, 0, t293, t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t118 + t91, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, -t317, -qJD(3) * t146 + t303 + t369, 0, 0, 0, 0, 0, -t302 - t327 (-qJD(6) * t190 - t317) * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t239, 0, 0, 0, 0, 0, -t332, -t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t407, -t278 * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t24 + qJD(3) * t42, qJD(2) * t25 - qJD(3) * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, t244 (-t225 * t316 + t332) * t190 (t293 + t309) * t190, -t174, -qJD(3) * t15 + qJD(5) * t129 + t179 * t225 - t265, -qJD(3) * t17 - qJD(4) * t129 + t190 * t328 - t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t243, t222 * t313, t173, -t318, t237, t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, -t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t11;
