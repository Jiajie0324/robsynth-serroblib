% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 02:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:46:52
% EndTime: 2019-05-05 02:47:50
% DurationCPUTime: 59.89s
% Computational Cost: add. (112103->857), mult. (248319->1308), div. (0->0), fcn. (177953->12), ass. (0->628)
t929 = sin(qJ(3));
t1043 = qJD(2) * t929;
t920 = sin(pkin(11));
t923 = cos(pkin(11));
t932 = cos(qJ(3));
t878 = -t923 * t932 * qJD(2) + t1043 * t920;
t880 = (t920 * t932 + t923 * t929) * qJD(2);
t1060 = t880 * t878;
t1134 = qJDD(3) + t1060;
t1162 = t1134 * t920;
t1083 = t880 ^ 2;
t934 = qJD(3) ^ 2;
t856 = t1083 + t934;
t746 = t856 * t923 + t1162;
t1161 = t1134 * t923;
t752 = -t856 * t920 + t1161;
t648 = t746 * t932 + t752 * t929;
t922 = sin(pkin(6));
t925 = cos(pkin(6));
t1039 = qJD(2) * qJD(3);
t1024 = t932 * t1039;
t1036 = qJDD(2) * t929;
t889 = t1024 + t1036;
t1025 = t929 * t1039;
t1034 = qJDD(2) * t932;
t961 = t1025 - t1034;
t823 = t923 * t889 - t920 * t961;
t865 = qJD(3) * t878;
t1097 = -t865 + t823;
t657 = t746 * t929 - t752 * t932;
t930 = sin(qJ(2));
t933 = cos(qJ(2));
t983 = -t1097 * t933 + t657 * t930;
t554 = t922 * t648 + t925 * t983;
t617 = t1097 * t930 + t657 * t933;
t921 = sin(pkin(10));
t924 = cos(pkin(10));
t500 = t554 * t924 + t617 * t921;
t1253 = qJ(1) * t500;
t501 = t554 * t921 - t617 * t924;
t1252 = qJ(1) * t501;
t548 = -t925 * t648 + t922 * t983;
t1251 = pkin(7) * (t548 * t922 + t554 * t925);
t1135 = qJDD(3) - t1060;
t1160 = t1135 * t920;
t857 = t1083 - t934;
t748 = t857 * t923 - t1160;
t1159 = t1135 * t923;
t753 = t857 * t920 + t1159;
t650 = t748 * t932 - t753 * t929;
t1096 = t865 + t823;
t655 = t748 * t929 + t753 * t932;
t985 = -t1096 * t933 + t655 * t930;
t552 = t922 * t650 + t925 * t985;
t615 = t1096 * t930 + t655 * t933;
t1250 = t552 * t921 - t615 * t924;
t1249 = t552 * t924 + t615 * t921;
t1248 = pkin(1) * t548;
t1247 = pkin(1) * t554;
t1084 = t878 ^ 2;
t852 = t1084 - t934;
t744 = t852 * t920 + t1161;
t751 = -t852 * t923 + t1162;
t646 = t744 * t932 - t751 * t929;
t653 = t744 * t929 + t751 * t932;
t1040 = t880 * qJD(3);
t822 = t889 * t920 + t923 * t961;
t770 = t822 - t1040;
t987 = t653 * t930 - t770 * t933;
t550 = t922 * t646 + t925 * t987;
t613 = t653 * t933 + t770 * t930;
t1246 = t550 * t921 - t613 * t924;
t1245 = t550 * t924 + t613 * t921;
t796 = -t934 - t1084;
t718 = t796 * t920 + t1159;
t721 = -t796 * t923 + t1160;
t624 = t718 * t932 - t721 * t929;
t1136 = t822 + t1040;
t627 = t718 * t929 + t721 * t932;
t990 = t1136 * t933 + t627 * t930;
t530 = t922 * t624 + t925 * t990;
t601 = -t1136 * t930 + t627 * t933;
t479 = t530 * t924 + t601 * t921;
t1243 = qJ(1) * t479;
t480 = t530 * t921 - t601 * t924;
t1242 = qJ(1) * t480;
t1239 = -t925 * t650 + t922 * t985;
t1238 = pkin(7) * t617;
t528 = -t925 * t624 + t922 * t990;
t1237 = pkin(7) * (t528 * t922 + t530 * t925);
t1232 = -t925 * t646 + t922 * t987;
t1231 = pkin(1) * t528;
t1230 = pkin(1) * t530;
t1092 = -t1084 - t1083;
t1167 = t1096 * t920 - t770 * t923;
t1168 = -t1096 * t923 - t770 * t920;
t1175 = t1167 * t932 - t1168 * t929;
t1186 = t1092 * t930 + t1175 * t933;
t1174 = t1167 * t929 + t1168 * t932;
t1187 = -t1092 * t933 + t1175 * t930;
t1201 = -t1174 * t922 + t1187 * t925;
t1212 = t1186 * t921 + t1201 * t924;
t1227 = qJ(1) * t1212;
t1213 = t1186 * t924 - t1201 * t921;
t1226 = qJ(1) * t1213;
t1224 = pkin(8) * t648;
t1223 = pkin(1) * t1201;
t1202 = t1174 * t925 + t1187 * t922;
t1222 = pkin(1) * t1202;
t1217 = -pkin(2) * t648 - pkin(3) * t746;
t1216 = pkin(2) * t1097 - pkin(8) * t657;
t1093 = -t1083 + t1084;
t1156 = t1097 * t923 - t1136 * t920;
t1072 = t1097 * t920;
t1073 = t1136 * t923;
t1169 = -t1072 - t1073;
t1176 = -t1156 * t929 + t1169 * t932;
t1188 = -t1093 * t930 + t1176 * t933;
t1177 = t1156 * t932 + t1169 * t929;
t1189 = t1093 * t933 + t1176 * t930;
t1199 = -t1177 * t922 + t1189 * t925;
t1215 = t1188 * t924 - t1199 * t921;
t1214 = t1188 * t921 + t1199 * t924;
t1211 = (-t1201 * t925 - t1202 * t922) * pkin(7);
t1210 = pkin(7) * t601;
t1209 = pkin(7) * t1186;
t1200 = t1177 * t925 + t1189 * t922;
t1197 = pkin(8) * t1174;
t1196 = qJ(4) * t746;
t1195 = qJ(4) * t752;
t546 = -pkin(2) * t1174 - pkin(3) * t1168;
t1190 = -pkin(2) * t1092 + pkin(8) * t1175;
t1185 = pkin(8) * t624;
t1181 = qJ(4) * t1168;
t1180 = -pkin(2) * t624 - pkin(3) * t718;
t1179 = pkin(2) * t1136 + pkin(8) * t627;
t1178 = -pkin(3) * t1092 + qJ(4) * t1167;
t1164 = qJ(4) * t718;
t1163 = qJ(4) * t721;
t1028 = t930 * t1060;
t1012 = -t1040 * t920 + t923 * t823;
t1014 = t1040 * t923 + t920 * t823;
t1087 = t1012 * t932 - t1014 * t929;
t1101 = t1087 * t933 + t1028;
t1086 = t1012 * t929 + t1014 * t932;
t1027 = t933 * t1060;
t1103 = t1087 * t930 - t1027;
t1128 = -t1086 * t922 + t1103 * t925;
t1155 = t1101 * t924 - t1128 * t921;
t1154 = t1101 * t921 + t1128 * t924;
t1013 = -t923 * t822 + t865 * t920;
t964 = t822 * t920 + t865 * t923;
t1088 = -t1013 * t929 + t932 * t964;
t1100 = t1088 * t933 - t1028;
t1089 = t1013 * t932 + t929 * t964;
t1102 = t1088 * t930 + t1027;
t1130 = -t1089 * t922 + t1102 * t925;
t1153 = t1100 * t924 - t1130 * t921;
t1152 = t1100 * t921 + t1130 * t924;
t959 = (-t878 * t920 - t880 * t923) * qJD(3);
t960 = (-t878 * t923 + t880 * t920) * qJD(3);
t1090 = -t929 * t959 + t932 * t960;
t910 = t930 * qJDD(3);
t1104 = t1090 * t933 + t910;
t1091 = t929 * t960 + t932 * t959;
t1032 = qJDD(3) * t933;
t1099 = t1090 * t930 - t1032;
t1132 = -t1091 * t922 + t1099 * t925;
t1151 = t1104 * t924 - t1132 * t921;
t1150 = t1104 * t921 + t1132 * t924;
t1143 = qJ(5) * t1097;
t1133 = t1091 * t925 + t1099 * t922;
t1131 = t1089 * t925 + t1102 * t922;
t1129 = t1086 * t925 + t1103 * t922;
t928 = sin(qJ(6));
t931 = cos(qJ(6));
t832 = qJD(3) * t928 - t931 * t878;
t834 = qJD(3) * t931 + t878 * t928;
t768 = t834 * t832;
t817 = qJDD(6) + t823;
t1098 = -t768 + t817;
t1107 = t1098 * t928;
t1106 = t1098 * t931;
t1022 = g(1) * t921 - t924 * g(2);
t1046 = g(3) - qJDD(1);
t1105 = t925 * t1022 - t922 * t1046;
t1095 = t921 * t1046;
t1094 = t924 * t1046;
t896 = g(1) * t924 + g(2) * t921;
t829 = -t1022 * t921 - t924 * t896;
t1041 = qJD(4) * t880;
t864 = 0.2e1 * t1041;
t790 = t1105 * t930 - t933 * t896;
t935 = qJD(2) ^ 2;
t780 = -t935 * pkin(2) + qJDD(2) * pkin(8) + t790;
t851 = t1022 * t922 + t1046 * t925;
t730 = t929 * t780 + t932 * t851;
t906 = t929 * t935 * t932;
t898 = qJDD(3) + t906;
t694 = (-t889 + t1024) * qJ(4) + t898 * pkin(3) - t730;
t731 = t932 * t780 - t929 * t851;
t897 = qJD(3) * pkin(3) - qJ(4) * t1043;
t1082 = t932 ^ 2;
t913 = t1082 * t935;
t695 = -pkin(3) * t913 - qJ(4) * t961 - qJD(3) * t897 + t731;
t1044 = -t923 * t694 + t920 * t695;
t791 = pkin(4) * t878 - qJ(5) * t880;
t965 = qJDD(3) * pkin(4) + t934 * qJ(5) - t880 * t791 - qJDD(5) - t1044;
t956 = t864 - t965;
t532 = pkin(5) * t1096 - pkin(9) * t1135 + t956;
t1020 = pkin(4) * qJD(3) - (2 * qJD(5));
t850 = pkin(5) * t880 - qJD(3) * pkin(9);
t789 = -t1105 * t933 - t930 * t896;
t779 = -qJDD(2) * pkin(2) - t935 * pkin(8) + t789;
t717 = t961 * pkin(3) - qJ(4) * t913 + t1043 * t897 + qJDD(4) + t779;
t937 = t822 * pkin(4) - t1143 + t717;
t560 = (t1020 - t850) * t880 - t1084 * pkin(5) + t822 * pkin(9) + t937;
t1019 = t532 * t931 - t928 * t560;
t471 = t532 * t928 + t560 * t931;
t434 = -t1019 * t928 + t931 * t471;
t433 = t1019 * t931 + t928 * t471;
t828 = t1022 * t924 - t921 * t896;
t831 = t832 ^ 2;
t1085 = t834 ^ 2;
t869 = qJD(6) + t880;
t867 = t869 ^ 2;
t1081 = 2 * qJD(5);
t1080 = pkin(4) + pkin(9);
t1079 = pkin(4) * t923;
t714 = t789 * t930 + t790 * t933;
t1078 = pkin(7) * t714;
t585 = t864 + t1044;
t1045 = t920 * t694 + t923 * t695;
t1042 = qJD(4) * t878;
t861 = -0.2e1 * t1042;
t586 = t861 + t1045;
t515 = -t585 * t923 + t586 * t920;
t1077 = t515 * t929;
t1076 = t515 * t932;
t1075 = t717 * t920;
t1074 = t717 * t923;
t1071 = t779 * t929;
t1070 = t779 * t932;
t1063 = t832 * t869;
t1062 = t869 * t928;
t1061 = t869 * t931;
t890 = -0.2e1 * t1025 + t1034;
t835 = t890 * t932;
t1059 = t898 * t929;
t899 = qJDD(3) - t906;
t1058 = t899 * t929;
t1057 = t899 * t932;
t917 = t929 ^ 2;
t1056 = t917 * t935;
t972 = -t934 * pkin(4) - t791 * t878 + t1045;
t939 = qJDD(3) * qJ(5) + t861 + t972;
t534 = -t822 * pkin(5) - t1084 * pkin(9) + (t1081 + t850) * qJD(3) + t939;
t1053 = t928 * t534;
t716 = t768 + t817;
t1052 = t928 * t716;
t1051 = t930 * t851;
t1049 = t931 * t534;
t1048 = t931 * t716;
t1047 = t933 * t851;
t1038 = qJD(5) * qJD(3);
t1037 = qJDD(2) * t922;
t1035 = qJDD(2) * t930;
t1033 = qJDD(2) * t933;
t1031 = t917 + t1082;
t1030 = t920 * t768;
t1029 = t923 * t768;
t740 = -t832 * qJD(6) + t931 * qJDD(3) + t928 * t822;
t1026 = -t867 - t1085;
t1023 = qJ(5) * t920 + pkin(3);
t516 = t585 * t920 + t923 * t586;
t636 = t730 * t929 + t932 * t731;
t1017 = t928 * qJDD(3) - t931 * t822;
t1016 = t930 * t906;
t1015 = t933 * t906;
t635 = t730 * t932 - t731 * t929;
t891 = t1031 * qJDD(2);
t894 = t913 + t1056;
t826 = t891 * t933 - t894 * t930;
t1010 = pkin(7) * t826 + t635 * t930;
t892 = -t930 * t935 + t1033;
t1009 = -pkin(7) * t892 - t1051;
t976 = t933 * t935 + t1035;
t1008 = -pkin(7) * t976 + t1047;
t421 = -t433 * t923 + t534 * t920;
t422 = t433 * t920 + t534 * t923;
t383 = -t421 * t929 + t422 * t932;
t1007 = t383 * t930 - t434 * t933;
t557 = t939 + 0.2e1 * t1038;
t558 = -0.2e1 * t1041 + t965;
t484 = t557 * t920 + t558 * t923;
t485 = t557 * t923 - t558 * t920;
t441 = -t484 * t929 + t485 * t932;
t610 = t1020 * t880 + t937;
t1006 = t441 * t930 - t610 * t933;
t454 = t516 * t932 - t1077;
t1005 = t454 * t930 - t717 * t933;
t941 = (-qJD(6) + t869) * t834 - t1017;
t970 = t740 + t1063;
t588 = t928 * t941 - t931 * t970;
t727 = -t831 - t1085;
t555 = -t588 * t923 + t727 * t920;
t556 = t588 * t920 + t727 * t923;
t477 = -t555 * t929 + t556 * t932;
t590 = t928 * t970 + t931 * t941;
t1004 = t477 * t930 - t590 * t933;
t677 = (qJD(6) + t869) * t834 + t1017;
t971 = t740 - t1063;
t589 = t677 * t928 - t931 * t971;
t765 = -t831 + t1085;
t565 = t589 * t923 + t765 * t920;
t566 = -t589 * t920 + t765 * t923;
t490 = -t565 * t929 + t566 * t932;
t591 = t677 * t931 + t928 * t971;
t1003 = t490 * t930 + t591 * t933;
t738 = -t867 - t831;
t632 = t928 * t738 + t1106;
t569 = -t632 * t923 + t677 * t920;
t570 = t632 * t920 + t677 * t923;
t493 = -t569 * t929 + t570 * t932;
t633 = t931 * t738 - t1107;
t1002 = t493 * t930 - t633 * t933;
t637 = t1026 * t931 - t1052;
t573 = -t637 * t923 + t920 * t971;
t574 = t637 * t920 + t923 * t971;
t497 = -t573 * t929 + t574 * t932;
t638 = -t1026 * t928 - t1048;
t1001 = t497 * t930 - t638 * t933;
t781 = t831 - t867;
t641 = -t781 * t928 - t1048;
t579 = t641 * t923 + t920 * t941;
t581 = -t641 * t920 + t923 * t941;
t505 = -t579 * t929 + t581 * t932;
t643 = -t781 * t931 + t1052;
t1000 = t505 * t930 + t643 * t933;
t782 = t867 - t1085;
t640 = -t782 * t931 - t1107;
t580 = t923 * t640 + t920 * t970;
t582 = -t920 * t640 + t923 * t970;
t506 = -t580 * t929 + t582 * t932;
t642 = t782 * t928 - t1106;
t999 = t506 * t930 + t642 * t933;
t739 = -qJD(6) * t834 - t1017;
t670 = -t1062 * t832 - t739 * t931;
t619 = t670 * t923 - t1030;
t621 = -t670 * t920 - t1029;
t540 = -t619 * t929 + t621 * t932;
t671 = -t1061 * t832 + t739 * t928;
t998 = t540 * t930 + t671 * t933;
t672 = -t1061 * t834 - t740 * t928;
t620 = t672 * t923 + t1030;
t622 = -t672 * t920 + t1029;
t541 = -t620 * t929 + t622 * t932;
t673 = t1062 * t834 - t740 * t931;
t997 = t541 * t930 + t673 * t933;
t706 = (t832 * t928 + t834 * t931) * t869;
t644 = t706 * t923 + t817 * t920;
t645 = -t706 * t920 + t817 * t923;
t572 = -t644 * t929 + t645 * t932;
t707 = (t832 * t931 - t834 * t928) * t869;
t996 = t572 * t930 + t707 * t933;
t989 = t636 * t930 - t779 * t933;
t713 = t789 * t933 - t790 * t930;
t888 = 0.2e1 * t1024 + t1036;
t825 = -t888 * t929 + t835;
t895 = t913 - t1056;
t982 = t825 * t930 + t895 * t933;
t905 = -t913 - t934;
t842 = t905 * t932 - t1059;
t981 = t842 * t930 + t890 * t933;
t903 = -t934 - t1056;
t844 = -t903 * t929 - t1057;
t980 = t844 * t930 - t888 * t933;
t876 = t976 * t925;
t979 = t876 * t924 + t892 * t921;
t810 = t876 * t921 - t892 * t924;
t978 = t891 * t930 + t894 * t933;
t886 = t1031 * t1039;
t973 = t886 * t930 - t1032;
t904 = t913 - t934;
t841 = t904 * t932 - t1058;
t963 = -t1033 * t932 + t841 * t930;
t887 = t932 * t898;
t902 = t934 - t1056;
t843 = -t902 * t929 + t887;
t962 = -t1033 * t929 + t843 * t930;
t847 = -t1039 * t1082 + t929 * t961;
t958 = t847 * t930 - t1015;
t848 = -t1039 * t917 + t889 * t932;
t957 = t848 * t930 + t1015;
t387 = pkin(5) * t534 - t1080 * t434;
t394 = pkin(5) * t433 - qJ(5) * t434;
t362 = -pkin(3) * t434 + qJ(4) * t422 + t387 * t923 + t394 * t920;
t368 = -qJ(4) * t421 - t387 * t920 + t394 * t923;
t382 = t421 * t932 + t422 * t929;
t352 = -pkin(8) * t382 - t362 * t929 + t368 * t932;
t367 = -pkin(2) * t382 - pkin(3) * t421 - qJ(5) * t534 + t1080 * t433;
t376 = t383 * t933 + t434 * t930;
t955 = pkin(7) * t376 + t352 * t930 + t367 * t933;
t419 = pkin(5) * t727 - t1080 * t590 - t434;
t519 = pkin(5) * t588 - qJ(5) * t590;
t391 = -pkin(3) * t590 + qJ(4) * t556 + t419 * t923 + t519 * t920;
t395 = -qJ(4) * t555 - t419 * t920 + t519 * t923;
t476 = t555 * t932 + t556 * t929;
t371 = -pkin(8) * t476 - t391 * t929 + t395 * t932;
t392 = -pkin(2) * t476 - pkin(3) * t555 - qJ(5) * t727 + t1080 * t588 + t433;
t457 = t477 * t933 + t590 * t930;
t954 = pkin(7) * t457 + t371 * t930 + t392 * t933;
t450 = pkin(5) * t632 - qJ(5) * t633 + t1019;
t462 = pkin(5) * t677 - t1080 * t633 + t1049;
t403 = -pkin(3) * t633 + qJ(4) * t570 + t450 * t920 + t462 * t923;
t407 = -qJ(4) * t569 + t450 * t923 - t462 * t920;
t492 = t569 * t932 + t570 * t929;
t375 = -pkin(8) * t492 - t403 * t929 + t407 * t932;
t423 = -pkin(2) * t492 - pkin(3) * t569 - qJ(5) * t677 + t1080 * t632 - t1053;
t468 = t493 * t933 + t633 * t930;
t953 = pkin(7) * t468 + t375 * t930 + t423 * t933;
t452 = pkin(5) * t637 - qJ(5) * t638 - t471;
t467 = pkin(5) * t971 - t1080 * t638 - t1053;
t404 = -pkin(3) * t638 + qJ(4) * t574 + t452 * t920 + t467 * t923;
t408 = -qJ(4) * t573 + t452 * t923 - t467 * t920;
t496 = t573 * t932 + t574 * t929;
t377 = -pkin(8) * t496 - t404 * t929 + t408 * t932;
t424 = -pkin(2) * t496 - pkin(3) * t573 - qJ(5) * t971 + t1080 * t637 - t1049;
t469 = t497 * t933 + t638 * t930;
t952 = pkin(7) * t469 + t377 * t930 + t424 * t933;
t439 = qJ(4) * t485 + (-t1023 - t1079) * t610;
t440 = t484 * t932 + t485 * t929;
t448 = -qJ(4) * t484 + (pkin(4) * t920 - qJ(5) * t923) * t610;
t384 = -pkin(8) * t440 - t439 * t929 + t448 * t932;
t399 = -pkin(2) * t440 - pkin(3) * t484 - pkin(4) * t558 - qJ(5) * t557;
t431 = t441 * t933 + t610 * t930;
t951 = pkin(7) * t431 + t384 * t930 + t399 * t933;
t453 = t516 * t929 + t1076;
t491 = -pkin(3) * t717 + qJ(4) * t516;
t413 = -pkin(8) * t453 - qJ(4) * t1076 - t491 * t929;
t430 = -pkin(2) * t453 - pkin(3) * t515;
t447 = t454 * t933 + t717 * t930;
t950 = pkin(7) * t447 + t413 * t930 + t430 * t933;
t542 = -pkin(4) * t1092 + t557;
t543 = -qJ(5) * t1092 + t956;
t456 = t542 * t923 + t543 * t920 + t1178;
t460 = -t542 * t920 + t543 * t923 - t1181;
t418 = -t456 * t929 + t460 * t932 - t1197;
t521 = pkin(4) * t1096 + qJ(5) * t770 + t546;
t949 = t418 * t930 + t521 * t933 + t1209;
t475 = t1178 + t516;
t486 = -t515 - t1181;
t429 = -t475 * t929 + t486 * t932 - t1197;
t948 = t429 * t930 + t546 * t933 + t1209;
t936 = -t1081 * t880 + t937;
t578 = (t1136 + t1040) * pkin(4) + t936;
t520 = t1023 * t1136 + t923 * t578 + t1163;
t531 = qJ(5) * t1073 - t578 * t920 + t1164;
t449 = -t520 * t929 + t531 * t932 + t1185;
t482 = pkin(4) * t1135 + qJ(5) * t796 - t1180 + t558;
t947 = t449 * t930 + t482 * t933 + t1210;
t577 = -pkin(4) * t1040 + t1143 - t936;
t523 = t1195 + t920 * t577 + (pkin(3) + t1079) * t1097;
t533 = -pkin(4) * t1072 + t577 * t923 - t1196;
t455 = -t523 * t929 + t533 * t932 - t1224;
t494 = -pkin(4) * t856 + 0.2e1 * t1042 - 0.2e1 * t1038 + (-qJDD(3) - t1134) * qJ(5) - t972 + t1217;
t946 = t455 * t930 + t494 * t933 - t1238;
t602 = -pkin(3) * t1136 - t1074 - t1163;
t623 = t1075 - t1164;
t495 = -t602 * t929 + t623 * t932 - t1185;
t514 = t1180 + t585;
t945 = t495 * t930 + t514 * t933 - t1210;
t611 = -pkin(3) * t1097 + t1075 - t1195;
t639 = t1074 + t1196;
t513 = -t611 * t929 + t639 * t932 + t1224;
t522 = -t1217 + t586;
t944 = t513 * t930 + t522 * t933 + t1238;
t838 = t905 * t929 + t887;
t700 = -pkin(2) * t838 + t730;
t728 = -pkin(8) * t838 + t1071;
t783 = t842 * t933 - t890 * t930;
t943 = pkin(7) * t783 + t700 * t933 + t728 * t930;
t840 = t903 * t932 - t1058;
t701 = -pkin(2) * t840 + t731;
t729 = -pkin(8) * t840 + t1070;
t784 = t844 * t933 + t888 * t930;
t942 = pkin(7) * t784 + t701 * t933 + t729 * t930;
t606 = t636 * t933 + t779 * t930;
t940 = pkin(7) * t606 - (-pkin(2) * t933 - pkin(8) * t930) * t635;
t877 = t892 * t925;
t875 = t892 * t922;
t874 = t976 * t922;
t849 = t886 * t933 + t910;
t839 = t902 * t932 + t1059;
t837 = t904 * t929 + t1057;
t836 = (t889 + t1024) * t929;
t827 = t973 * t925;
t824 = t888 * t932 + t890 * t929;
t815 = t978 * t925;
t814 = t978 * t922;
t811 = -t877 * t921 - t924 * t976;
t809 = t877 * t924 - t921 * t976;
t795 = t848 * t933 - t1016;
t794 = t847 * t933 + t1016;
t793 = t1035 * t929 + t843 * t933;
t792 = t1034 * t930 + t841 * t933;
t778 = t825 * t933 - t895 * t930;
t742 = -t1047 + (t874 * t922 + t876 * t925) * pkin(7);
t741 = -t1051 + (-t875 * t922 - t877 * t925) * pkin(7);
t737 = -t815 * t921 + t826 * t924;
t736 = t815 * t924 + t826 * t921;
t735 = -t922 * t836 + t925 * t957;
t734 = -t922 * t835 + t925 * t958;
t733 = -t922 * t839 + t925 * t962;
t732 = -t922 * t837 + t925 * t963;
t725 = -t922 * t840 + t925 * t980;
t724 = -t922 * t838 + t925 * t981;
t723 = t925 * t840 + t922 * t980;
t722 = t925 * t838 + t922 * t981;
t711 = -t922 * t824 + t925 * t982;
t710 = pkin(2) * t890 + pkin(8) * t842 - t1070;
t709 = -pkin(2) * t888 + pkin(8) * t844 + t1071;
t708 = t714 * t925;
t697 = -pkin(1) * t875 + t1008 * t925 + t922 * t789;
t696 = pkin(1) * t874 + t1009 * t925 + t922 * t790;
t675 = -t713 * t925 + t922 * t851;
t674 = -t713 * t922 - t925 * t851;
t661 = -t725 * t921 + t784 * t924;
t660 = -t724 * t921 + t783 * t924;
t659 = t725 * t924 + t784 * t921;
t658 = t724 * t924 + t783 * t921;
t618 = pkin(2) * t894 + pkin(8) * t891 + t636;
t609 = -pkin(2) * t779 + pkin(8) * t636;
t605 = -pkin(1) * t674 + t1078 * t925;
t604 = -t675 * t921 + t714 * t924;
t603 = t675 * t924 + t714 * t921;
t587 = t933 * t635 + (-t814 * t922 - t815 * t925) * pkin(7);
t583 = (-t674 * t922 - t675 * t925) * pkin(7);
t571 = t644 * t932 + t645 * t929;
t545 = -t930 * t701 + t933 * t729 + (-t723 * t922 - t725 * t925) * pkin(7);
t544 = -t930 * t700 + t933 * t728 + (-t722 * t922 - t724 * t925) * pkin(7);
t539 = t620 * t932 + t622 * t929;
t538 = t619 * t932 + t621 * t929;
t537 = t635 * t922 + t925 * t989;
t536 = -t635 * t925 + t922 * t989;
t535 = t572 * t933 - t707 * t930;
t526 = -pkin(1) * t723 - t922 * t709 + t925 * t942;
t525 = -pkin(1) * t722 - t922 * t710 + t925 * t943;
t524 = -pkin(1) * t814 + t1010 * t925 - t922 * t618;
t518 = t541 * t933 - t673 * t930;
t517 = t540 * t933 - t671 * t930;
t504 = t580 * t932 + t582 * t929;
t503 = t579 * t932 + t581 * t929;
t498 = t611 * t932 + t639 * t929 - t1216;
t489 = t565 * t932 + t566 * t929;
t488 = -t537 * t921 + t606 * t924;
t487 = t537 * t924 + t606 * t921;
t483 = t602 * t932 + t623 * t929 - t1179;
t474 = -t922 * t571 + t925 * t996;
t473 = t506 * t933 - t642 * t930;
t472 = t505 * t933 - t643 * t930;
t461 = t490 * t933 - t591 * t930;
t459 = -t922 * t539 + t925 * t997;
t458 = -t922 * t538 + t925 * t998;
t451 = t523 * t932 + t533 * t929 + t1216;
t446 = t520 * t932 + t531 * t929 + t1179;
t445 = -(pkin(2) * t930 - pkin(8) * t933) * t635 + (-t536 * t922 - t537 * t925) * pkin(7);
t444 = -pkin(1) * t536 - t922 * t609 + t925 * t940;
t443 = -t922 * t504 + t925 * t999;
t442 = t1000 * t925 - t922 * t503;
t438 = t1001 * t925 - t922 * t496;
t437 = t1001 * t922 + t925 * t496;
t436 = t1002 * t925 - t922 * t492;
t435 = t1002 * t922 + t925 * t492;
t432 = t1003 * t925 - t922 * t489;
t428 = t1004 * t925 - t922 * t476;
t427 = t1004 * t922 + t925 * t476;
t426 = t475 * t932 + t486 * t929 + t1190;
t425 = t933 * t513 - t930 * t522 - t1251;
t420 = t933 * t495 - t930 * t514 + t1237;
t417 = t456 * t932 + t460 * t929 + t1190;
t416 = -t438 * t921 + t469 * t924;
t415 = t438 * t924 + t469 * t921;
t414 = -t922 * t498 + t925 * t944 - t1248;
t412 = t1005 * t925 - t922 * t453;
t411 = t1005 * t922 + t925 * t453;
t410 = -t436 * t921 + t468 * t924;
t409 = t436 * t924 + t468 * t921;
t406 = -pkin(2) * t717 + pkin(8) * t454 - qJ(4) * t1077 + t491 * t932;
t405 = t933 * t455 - t930 * t494 + t1251;
t402 = -t922 * t483 + t925 * t945 + t1231;
t401 = -t428 * t921 + t457 * t924;
t400 = t428 * t924 + t457 * t921;
t398 = t933 * t449 - t930 * t482 - t1237;
t397 = t1006 * t925 - t922 * t440;
t396 = t1006 * t922 + t925 * t440;
t393 = t933 * t429 - t930 * t546 + t1211;
t390 = -t922 * t451 + t925 * t946 + t1248;
t389 = -t412 * t921 + t447 * t924;
t388 = t412 * t924 + t447 * t921;
t386 = -t922 * t446 + t925 * t947 - t1231;
t385 = t933 * t418 - t930 * t521 + t1211;
t381 = -pkin(2) * t610 + pkin(8) * t441 + t439 * t932 + t448 * t929;
t380 = -t397 * t921 + t431 * t924;
t379 = t397 * t924 + t431 * t921;
t378 = -t922 * t426 + t925 * t948 - t1222;
t374 = -pkin(2) * t638 + pkin(8) * t497 + t404 * t932 + t408 * t929;
t373 = -pkin(2) * t633 + pkin(8) * t493 + t403 * t932 + t407 * t929;
t372 = -t922 * t417 + t925 * t949 - t1222;
t370 = -pkin(2) * t590 + pkin(8) * t477 + t391 * t932 + t395 * t929;
t369 = t933 * t413 - t930 * t430 + (-t411 * t922 - t412 * t925) * pkin(7);
t366 = t1007 * t925 - t922 * t382;
t365 = t1007 * t922 + t925 * t382;
t364 = -pkin(1) * t411 - t922 * t406 + t925 * t950;
t363 = t933 * t377 - t930 * t424 + (-t437 * t922 - t438 * t925) * pkin(7);
t361 = t933 * t375 - t930 * t423 + (-t435 * t922 - t436 * t925) * pkin(7);
t360 = t933 * t384 - t930 * t399 + (-t396 * t922 - t397 * t925) * pkin(7);
t359 = t933 * t371 - t930 * t392 + (-t427 * t922 - t428 * t925) * pkin(7);
t358 = -t366 * t921 + t376 * t924;
t357 = t366 * t924 + t376 * t921;
t356 = -pkin(1) * t437 - t922 * t374 + t925 * t952;
t355 = -pkin(1) * t396 - t922 * t381 + t925 * t951;
t354 = -pkin(1) * t435 - t922 * t373 + t925 * t953;
t353 = -pkin(1) * t427 - t922 * t370 + t925 * t954;
t351 = -pkin(2) * t434 + pkin(8) * t383 + t362 * t932 + t368 * t929;
t350 = t933 * t352 - t930 * t367 + (-t365 * t922 - t366 * t925) * pkin(7);
t349 = -pkin(1) * t365 - t922 * t351 + t925 * t955;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t829, 0, 0, 0, 0, 0, 0, t811, t810, 0, t604, 0, 0, 0, 0, 0, 0, t660, t661, t737, t488, 0, 0, 0, 0, 0, 0, t480, -t501, t1213, t389, 0, 0, 0, 0, 0, 0, t1213, -t480, t501, t380, 0, 0, 0, 0, 0, 0, t410, t416, t401, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, 0, 0, 0, 0, 0, 0, t809, -t979, 0, t603, 0, 0, 0, 0, 0, 0, t658, t659, t736, t487, 0, 0, 0, 0, 0, 0, -t479, t500, t1212, t388, 0, 0, 0, 0, 0, 0, t1212, t479, -t500, t379, 0, 0, 0, 0, 0, 0, t409, t415, t400, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1046, 0, 0, 0, 0, 0, 0, t875, -t874, 0, t674, 0, 0, 0, 0, 0, 0, t722, t723, t814, t536, 0, 0, 0, 0, 0, 0, -t528, t548, t1202, t411, 0, 0, 0, 0, 0, 0, t1202, t528, -t548, t396, 0, 0, 0, 0, 0, 0, t435, t437, t427, t365; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1095, -t1094, -t828, -qJ(1) * t828, 0, 0, -t810, 0, t811, t921 * t1037, -qJ(1) * t809 - t697 * t921 + t741 * t924, qJ(1) * t979 - t696 * t921 + t742 * t924, -t708 * t921 + t713 * t924, -qJ(1) * t603 + t583 * t924 - t605 * t921, -t735 * t921 + t795 * t924, -t711 * t921 + t778 * t924, -t733 * t921 + t793 * t924, -t734 * t921 + t794 * t924, -t732 * t921 + t792 * t924, -t827 * t921 + t849 * t924, -qJ(1) * t658 - t525 * t921 + t544 * t924, -qJ(1) * t659 - t526 * t921 + t545 * t924, -qJ(1) * t736 - t524 * t921 + t587 * t924, -qJ(1) * t487 - t444 * t921 + t445 * t924, t1155, t1215, -t1250, t1153, t1246, t1151, -t402 * t921 + t420 * t924 + t1243, -t414 * t921 + t425 * t924 - t1253, -t378 * t921 + t393 * t924 - t1227, -qJ(1) * t388 - t364 * t921 + t369 * t924, t1151, t1250, -t1246, t1155, t1215, t1153, -t372 * t921 + t385 * t924 - t1227, -t386 * t921 + t398 * t924 - t1243, -t390 * t921 + t405 * t924 + t1253, -qJ(1) * t379 - t355 * t921 + t360 * t924, -t459 * t921 + t518 * t924, -t432 * t921 + t461 * t924, -t443 * t921 + t473 * t924, -t458 * t921 + t517 * t924, -t442 * t921 + t472 * t924, -t474 * t921 + t535 * t924, -qJ(1) * t409 - t354 * t921 + t361 * t924, -qJ(1) * t415 - t356 * t921 + t363 * t924, -qJ(1) * t400 - t353 * t921 + t359 * t924, -qJ(1) * t357 - t349 * t921 + t350 * t924; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1094, -t1095, t829, qJ(1) * t829, 0, 0, t979, 0, t809, -t924 * t1037, qJ(1) * t811 + t697 * t924 + t741 * t921, qJ(1) * t810 + t696 * t924 + t742 * t921, t708 * t924 + t713 * t921, qJ(1) * t604 + t583 * t921 + t605 * t924, t735 * t924 + t795 * t921, t711 * t924 + t778 * t921, t733 * t924 + t793 * t921, t734 * t924 + t794 * t921, t732 * t924 + t792 * t921, t827 * t924 + t849 * t921, qJ(1) * t660 + t525 * t924 + t544 * t921, qJ(1) * t661 + t526 * t924 + t545 * t921, qJ(1) * t737 + t524 * t924 + t587 * t921, qJ(1) * t488 + t444 * t924 + t445 * t921, t1154, t1214, t1249, t1152, -t1245, t1150, t402 * t924 + t420 * t921 + t1242, t414 * t924 + t425 * t921 - t1252, t378 * t924 + t393 * t921 + t1226, qJ(1) * t389 + t364 * t924 + t369 * t921, t1150, -t1249, t1245, t1154, t1214, t1152, t372 * t924 + t385 * t921 + t1226, t386 * t924 + t398 * t921 - t1242, t390 * t924 + t405 * t921 + t1252, qJ(1) * t380 + t355 * t924 + t360 * t921, t459 * t924 + t518 * t921, t432 * t924 + t461 * t921, t443 * t924 + t473 * t921, t458 * t924 + t517 * t921, t442 * t924 + t472 * t921, t474 * t924 + t535 * t921, qJ(1) * t410 + t354 * t924 + t361 * t921, qJ(1) * t416 + t356 * t924 + t363 * t921, qJ(1) * t401 + t353 * t924 + t359 * t921, qJ(1) * t358 + t349 * t924 + t350 * t921; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1022, t896, 0, 0, 0, 0, t874, 0, t875, t925 * qJDD(2), pkin(1) * t877 + t1008 * t922 - t925 * t789, -pkin(1) * t876 + t1009 * t922 - t925 * t790, t714 * t922, pkin(1) * t675 + t1078 * t922, t925 * t836 + t922 * t957, t925 * t824 + t922 * t982, t925 * t839 + t922 * t962, t925 * t835 + t922 * t958, t925 * t837 + t922 * t963, t973 * t922, pkin(1) * t724 + t925 * t710 + t922 * t943, pkin(1) * t725 + t925 * t709 + t922 * t942, pkin(1) * t815 + t1010 * t922 + t925 * t618, pkin(1) * t537 + t925 * t609 + t922 * t940, t1129, t1200, t1239, t1131, -t1232, t1133, t925 * t483 + t922 * t945 - t1230, t925 * t498 + t922 * t944 + t1247, t925 * t426 + t922 * t948 + t1223, pkin(1) * t412 + t925 * t406 + t922 * t950, t1133, -t1239, t1232, t1129, t1200, t1131, t925 * t417 + t922 * t949 + t1223, t925 * t446 + t922 * t947 + t1230, t925 * t451 + t922 * t946 - t1247, pkin(1) * t397 + t925 * t381 + t922 * t951, t925 * t539 + t922 * t997, t1003 * t922 + t925 * t489, t925 * t504 + t922 * t999, t925 * t538 + t922 * t998, t1000 * t922 + t925 * t503, t925 * t571 + t922 * t996, pkin(1) * t436 + t925 * t373 + t922 * t953, pkin(1) * t438 + t925 * t374 + t922 * t952, pkin(1) * t428 + t925 * t370 + t922 * t954, pkin(1) * t366 + t925 * t351 + t922 * t955;];
tauB_reg  = t1;
