% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:06:38
% EndTime: 2019-03-08 21:06:49
% DurationCPUTime: 7.10s
% Computational Cost: add. (6150->564), mult. (14418->731), div. (0->0), fcn. (11311->14), ass. (0->280)
t180 = sin(pkin(11));
t183 = cos(pkin(11));
t187 = sin(qJ(3));
t190 = cos(qJ(3));
t136 = t180 * t190 + t183 * t187;
t361 = t136 * qJD(2);
t371 = qJD(6) + t361;
t292 = qJD(2) * t190;
t268 = t183 * t292;
t294 = qJD(2) * t187;
t127 = t180 * t294 - t268;
t186 = sin(qJ(6));
t189 = cos(qJ(6));
t93 = qJD(3) * t186 - t189 * t127;
t256 = t371 * t93;
t288 = qJD(6) * t189;
t289 = qJD(6) * t186;
t129 = t136 * qJD(3);
t279 = t190 * qJDD(2);
t280 = t187 * qJDD(2);
t236 = t180 * t280 - t183 * t279;
t74 = qJD(2) * t129 + t236;
t37 = qJD(3) * t289 - t189 * qJDD(3) - t127 * t288 - t186 * t74;
t374 = t37 - t256;
t188 = sin(qJ(2));
t182 = sin(pkin(6));
t296 = qJD(1) * t182;
t269 = t188 * t296;
t291 = qJD(3) * t187;
t379 = pkin(3) * t291 - t269;
t185 = -qJ(4) - pkin(8);
t260 = qJD(3) * t185;
t118 = qJD(4) * t190 + t187 * t260;
t119 = -qJD(4) * t187 + t190 * t260;
t191 = cos(qJ(2));
t273 = t191 * t296;
t339 = t118 * t180 - t183 * t119 - t136 * t273;
t290 = qJD(3) * t190;
t132 = -t180 * t291 + t183 * t290;
t378 = qJ(5) * t132 + qJD(5) * t136 - t379;
t144 = qJD(2) * pkin(8) + t269;
t251 = qJ(4) * qJD(2) + t144;
t184 = cos(pkin(6));
t295 = qJD(1) * t184;
t272 = t187 * t295;
t88 = t251 * t190 + t272;
t80 = t180 * t88;
t161 = t190 * t295;
t87 = -t251 * t187 + t161;
t84 = qJD(3) * pkin(3) + t87;
t39 = t183 * t84 - t80;
t245 = qJD(5) - t39;
t344 = pkin(5) * t361;
t352 = pkin(4) + pkin(9);
t22 = -t352 * qJD(3) + t245 + t344;
t169 = pkin(3) * t190 + pkin(2);
t116 = -t169 * qJD(2) + qJD(4) - t273;
t198 = -qJ(5) * t361 + t116;
t36 = t352 * t127 + t198;
t10 = t186 * t22 + t189 * t36;
t283 = qJD(2) * qJD(3);
t264 = t187 * t283;
t209 = t136 * qJDD(2) - t180 * t264;
t263 = t190 * t283;
t75 = t183 * t263 + t209;
t337 = qJ(5) * t75;
t309 = t182 * t191;
t261 = qJDD(1) * t309;
t284 = qJD(1) * qJD(2);
t267 = t188 * t284;
t237 = t182 * t267 - t261;
t73 = pkin(3) * t264 - t169 * qJDD(2) + qJDD(4) + t237;
t196 = -qJD(5) * t361 - t337 + t73;
t14 = t352 * t74 + t196;
t281 = qJDD(1) * t184;
t158 = t190 * t281;
t282 = qJD(2) * qJD(4);
t266 = t191 * t284;
t323 = qJDD(2) * pkin(8);
t107 = t323 + (qJDD(1) * t188 + t266) * t182;
t373 = qJD(3) * t295 + t107;
t30 = qJDD(3) * pkin(3) + t158 - t251 * t290 + (-qJ(4) * qJDD(2) - t282 - t373) * t187;
t278 = t187 * t281 + t190 * t373;
t48 = -t144 * t291 + t278;
t31 = t190 * t282 + (-t264 + t279) * qJ(4) + t48;
t341 = t180 * t31 - t183 * t30;
t274 = qJDD(5) + t341;
t6 = pkin(5) * t75 - t352 * qJDD(3) + t274;
t2 = -qJD(6) * t10 - t186 * t14 + t189 * t6;
t360 = t10 * t371 + t2;
t235 = t186 * t36 - t189 * t22;
t1 = -t235 * qJD(6) + t189 * t14 + t186 * t6;
t240 = t235 * t371 + t1;
t377 = pkin(5) * t132 + t339;
t368 = t189 * t371;
t95 = qJD(3) * t189 + t127 * t186;
t376 = t95 * t368;
t375 = -t352 * t129 + t378;
t254 = t186 * t371;
t68 = qJDD(6) + t75;
t65 = t189 * t68;
t222 = -t254 * t371 + t65;
t44 = t183 * t87 - t80;
t367 = -qJD(5) + t44;
t176 = qJ(3) + pkin(11);
t173 = cos(t176);
t327 = cos(pkin(10));
t257 = t327 * t191;
t181 = sin(pkin(10));
t313 = t181 * t188;
t123 = -t184 * t257 + t313;
t258 = t327 * t188;
t312 = t181 * t191;
t125 = t184 * t312 + t258;
t244 = g(1) * t125 + g(2) * t123;
t365 = g(3) * t309 - t244;
t206 = t365 * t173;
t147 = t185 * t187;
t148 = t185 * t190;
t91 = -t183 * t147 - t148 * t180;
t372 = -qJDD(3) * t91 - t206;
t311 = t182 * t188;
t133 = t184 * t190 - t187 * t311;
t370 = 0.2e1 * t361 * qJD(3) + t236;
t364 = -t180 * t187 + t183 * t190;
t338 = t118 * t183 + t119 * t180 - t364 * t273;
t302 = t344 - t367;
t172 = sin(t176);
t326 = qJ(5) * t172;
t366 = (pkin(4) * t173 + t326) * t309;
t305 = t186 * t191;
t154 = t182 * t305;
t310 = t182 * t190;
t134 = t184 * t187 + t188 * t310;
t63 = -t183 * t133 + t134 * t180;
t53 = t189 * t63 + t154;
t122 = t361 ^ 2;
t353 = t127 ^ 2;
t363 = -t353 - t122;
t362 = -t353 + t122;
t347 = pkin(3) * t183;
t168 = -pkin(4) - t347;
t164 = -pkin(9) + t168;
t345 = pkin(5) * t127;
t332 = t183 * t88;
t40 = t180 * t84 + t332;
t35 = -qJD(3) * qJ(5) - t40;
t23 = -t35 - t345;
t359 = t164 * t68 + t23 * t371;
t92 = t147 * t180 - t148 * t183;
t358 = -qJDD(3) * t92 + t172 * t365;
t192 = qJD(3) ^ 2;
t324 = qJDD(2) * pkin(2);
t106 = t237 - t324;
t225 = -t106 + t244;
t357 = -pkin(8) * t192 + t182 * (-g(3) * t191 + t267) + t225 + t324;
t293 = qJD(2) * t188;
t270 = qJD(2) * t309;
t85 = qJD(3) * t133 + t190 * t270;
t86 = -qJD(3) * t134 - t187 * t270;
t43 = t180 * t86 + t183 * t85;
t64 = t133 * t180 + t134 * t183;
t356 = t182 * (t191 * t75 - t293 * t361) + qJD(3) * t43 + qJDD(3) * t64;
t41 = t180 * t85 - t183 * t86;
t355 = t182 * (t127 * t293 - t191 * t74) - qJD(3) * t41 - qJDD(3) * t63;
t354 = qJD(3) * (-t127 + t268) + t209;
t351 = pkin(4) * t74;
t226 = -qJ(5) * t136 - t169;
t55 = -t352 * t364 + t226;
t59 = pkin(5) * t136 + t91;
t20 = -t186 * t55 + t189 * t59;
t350 = t20 * qJD(6) + t186 * t377 - t375 * t189;
t21 = t186 * t59 + t189 * t55;
t349 = -t21 * qJD(6) + t375 * t186 + t189 * t377;
t348 = pkin(3) * t180;
t346 = pkin(3) * t187;
t343 = g(3) * t182;
t342 = t95 * t93;
t13 = t180 * t30 + t183 * t31;
t340 = -pkin(5) * t129 + t338;
t336 = qJD(2) * pkin(2);
t335 = t127 * t93;
t334 = t127 * t95;
t250 = qJDD(3) * t186 - t189 * t74;
t38 = qJD(6) * t95 + t250;
t331 = t186 * t38;
t330 = t186 * t68;
t329 = t189 * t37;
t33 = t189 * t38;
t42 = t180 * t87 + t332;
t325 = qJD(3) * t42;
t322 = qJDD(3) * pkin(4);
t321 = t123 * t173;
t320 = t125 * t173;
t319 = t127 * t361;
t318 = t144 * t187;
t317 = t172 * t186;
t316 = t172 * t189;
t314 = t181 * t182;
t306 = t186 * t129;
t304 = t189 * t129;
t303 = t189 * t191;
t301 = qJDD(1) - g(3);
t124 = t184 * t258 + t312;
t300 = -t123 * t169 - t124 * t185;
t126 = -t184 * t313 + t257;
t299 = -t125 * t169 - t126 * t185;
t178 = t187 ^ 2;
t179 = t190 ^ 2;
t298 = t178 - t179;
t297 = t178 + t179;
t170 = pkin(3) * t294;
t276 = t182 * t303;
t193 = qJD(2) ^ 2;
t275 = t187 * t193 * t190;
t271 = t182 * t293;
t262 = t191 * t283;
t259 = t182 * t327;
t255 = qJ(5) * t127 + t170;
t249 = -pkin(4) * t321 - t123 * t326 + t300;
t248 = -pkin(4) * t320 - t125 * t326 + t299;
t247 = t187 * t263;
t246 = t181 * pkin(3) * t310 - t126 * t346;
t243 = g(1) * t126 + g(2) * t124;
t242 = -pkin(4) * t129 + t378;
t141 = t169 * t309;
t241 = -t185 * t311 + t141;
t234 = t127 * t129 - t364 * t74;
t233 = t132 * t361 + t136 * t75;
t230 = t133 * pkin(3);
t229 = qJDD(2) * t191 - t188 * t193;
t228 = qJD(3) * t129 - qJDD(3) * t364;
t227 = qJD(3) * t132 + qJDD(3) * t136;
t177 = qJDD(3) * qJ(5);
t8 = -qJD(3) * qJD(5) - t13 - t177;
t223 = -t186 * t63 + t276;
t98 = t144 * t190 + t272;
t110 = t172 * t311 - t184 * t173;
t76 = t124 * t172 + t173 * t259;
t78 = t126 * t172 - t173 * t314;
t217 = g(1) * t78 + g(2) * t76 + g(3) * t110;
t111 = t172 * t184 + t173 * t311;
t77 = t124 * t173 - t172 * t259;
t79 = t126 * t173 + t172 * t314;
t216 = g(1) * t79 + g(2) * t77 + g(3) * t111;
t214 = -t78 * pkin(4) + qJ(5) * t79 + t246;
t213 = -t368 * t371 - t330;
t211 = t217 - t341;
t210 = t216 - t13;
t208 = (-t124 * t187 - t190 * t259) * pkin(3);
t207 = -t110 * pkin(4) + qJ(5) * t111 + t230;
t205 = -t127 * t43 + t361 * t41 + t63 * t75 - t64 * t74;
t204 = -t127 * t132 - t129 * t361 - t136 * t74 + t364 * t75;
t7 = -pkin(5) * t74 - t8;
t202 = -qJD(6) * t164 * t371 - t216 + t7;
t145 = -t273 - t336;
t201 = -pkin(8) * qJDD(3) + (t145 + t273 - t336) * qJD(3);
t51 = pkin(4) * t127 + t198;
t200 = t361 * t51 + qJDD(5) - t211;
t199 = -t76 * pkin(4) + t77 * qJ(5) + t208;
t52 = (t127 + t268) * qJD(3) + t209;
t49 = -t98 * qJD(3) - t187 * t107 + t158;
t97 = t161 - t318;
t197 = -t49 * t187 + t48 * t190 + (-t187 * t98 - t190 * t97) * qJD(3) - t243;
t195 = t365 + t73;
t194 = -g(3) * t311 - t338 * t127 + t339 * t361 - t74 * t92 + t75 * t91 - t243;
t166 = qJ(5) + t348;
t69 = -pkin(4) * t364 + t226;
t60 = pkin(5) * t364 + t92;
t56 = pkin(4) * t361 + t255;
t45 = t352 * t361 + t255;
t34 = -qJD(3) * pkin(4) + t245;
t26 = t42 - t345;
t19 = t196 + t351;
t18 = qJD(6) * t53 + t186 * t41 + t189 * t271;
t17 = qJD(6) * t223 - t186 * t271 + t189 * t41;
t16 = t186 * t26 + t189 * t45;
t15 = -t186 * t45 + t189 * t26;
t11 = t274 - t322;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t301, 0, 0, 0, 0, 0, 0, t229 * t182 (-qJDD(2) * t188 - t191 * t193) * t182, 0, -g(3) + (t184 ^ 2 + (t188 ^ 2 + t191 ^ 2) * t182 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, qJD(3) * t86 + qJDD(3) * t133 + (-t187 * t262 + t190 * t229) * t182, -qJD(3) * t85 - qJDD(3) * t134 + (-t187 * t229 - t190 * t262) * t182 (-t133 * t187 + t134 * t190) * qJDD(2) + (-t187 * t86 + t190 * t85 + (-t133 * t190 - t134 * t187) * qJD(3)) * qJD(2), t133 * t49 + t134 * t48 + t85 * t98 + t86 * t97 - g(3) + (-t106 * t191 + t145 * t293) * t182, 0, 0, 0, 0, 0, 0, t355, -t356, t205, t341 * t63 + t13 * t64 - t39 * t41 + t40 * t43 - g(3) + (t116 * t293 - t191 * t73) * t182, 0, 0, 0, 0, 0, 0, t205, -t355, t356, t11 * t63 + t34 * t41 - t35 * t43 - t64 * t8 - g(3) + (-t19 * t191 + t293 * t51) * t182, 0, 0, 0, 0, 0, 0, t17 * t371 + t38 * t64 + t43 * t93 + t53 * t68, -t18 * t371 + t223 * t68 - t37 * t64 + t43 * t95, -t17 * t95 - t18 * t93 + t223 * t38 + t37 * t53, -t1 * t223 + t10 * t18 - t17 * t235 + t2 * t53 + t23 * t43 + t64 * t7 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t365 + t261, -t301 * t311 + t243, 0, 0, qJDD(2) * t178 + 0.2e1 * t247, 0.2e1 * t187 * t279 - 0.2e1 * t298 * t283, qJDD(3) * t187 + t190 * t192, qJDD(2) * t179 - 0.2e1 * t247, qJDD(3) * t190 - t187 * t192, 0, t201 * t187 + t190 * t357, -t187 * t357 + t201 * t190, t297 * t323 + (-g(3) * t188 - t297 * t266) * t182 + t197, t225 * pkin(2) + t197 * pkin(8) + (-g(3) * (pkin(2) * t191 + pkin(8) * t188) + (-t145 * t188 + (t187 * t97 - t190 * t98) * t191) * qJD(1)) * t182, t233, t204, t227, t234, -t228, 0, -t127 * t269 + t116 * t129 - t364 * t73 - t169 * t74 + (t127 * t346 - t339) * qJD(3) + t372, -t361 * t269 + t116 * t132 + t136 * t73 - t169 * t75 + (t346 * t361 - t338) * qJD(3) + t358, -t129 * t40 + t13 * t364 - t132 * t39 + t136 * t341 + t194, -g(1) * t299 - g(2) * t300 - g(3) * t241 + t116 * t379 + t13 * t92 - t73 * t169 + t338 * t40 - t339 * t39 + t341 * t91, 0, -t227, t228, t233, t204, t234, t11 * t136 + t129 * t35 + t132 * t34 - t364 * t8 + t194, qJD(3) * t339 + t127 * t242 - t129 * t51 + t19 * t364 - t69 * t74 - t372, qJD(3) * t338 - t132 * t51 - t136 * t19 + t242 * t361 - t69 * t75 - t358, t19 * t69 - t8 * t92 + t11 * t91 - g(1) * t248 - g(2) * t249 - g(3) * (t241 + t366) - t242 * t51 - t338 * t35 + t339 * t34, t95 * t306 - (-t186 * t37 + t288 * t95) * t364 (-t186 * t93 + t189 * t95) * t129 - (-t331 - t329 + (-t186 * t95 - t189 * t93) * qJD(6)) * t364, -t364 * t330 + t132 * t95 - t136 * t37 + (-t288 * t364 + t306) * t371, -t93 * t304 - (t289 * t93 - t33) * t364, -t364 * t65 - t132 * t93 - t136 * t38 + (t289 * t364 + t304) * t371, t132 * t371 + t136 * t68, t20 * t68 + t2 * t136 - t235 * t132 + t60 * t38 - t23 * t304 - g(1) * (-t125 * t317 + t126 * t189) - g(2) * (-t123 * t317 + t124 * t189) + t340 * t93 - (t172 * t305 + t188 * t189) * t343 - (-t7 * t189 + t23 * t289) * t364 + t349 * t371, -t21 * t68 - t1 * t136 - t10 * t132 - t60 * t37 + t23 * t306 - g(1) * (-t125 * t316 - t126 * t186) - g(2) * (-t123 * t316 - t124 * t186) + t340 * t95 - (t172 * t303 - t186 * t188) * t343 - (t7 * t186 + t23 * t288) * t364 - t350 * t371, t20 * t37 - t21 * t38 - t349 * t95 - t350 * t93 + (t10 * t189 + t186 * t235) * t129 - t206 - (t1 * t189 - t186 * t2 + (-t10 * t186 + t189 * t235) * qJD(6)) * t364, t1 * t21 + t2 * t20 + t7 * t60 - g(1) * (pkin(5) * t126 - pkin(9) * t320 + t248) - g(2) * (pkin(5) * t124 - pkin(9) * t321 + t249) - g(3) * (t141 + t366) - t349 * t235 + t340 * t23 - (pkin(9) * t173 * t191 + (pkin(5) - t185) * t188) * t343 + t350 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t275, t298 * t193, t280, t275, t279, qJDD(3), -g(3) * t133 + t158 + (-g(1) * t181 + g(2) * t327) * t310 + (-qJD(2) * t145 - t107 + t243) * t187, -t145 * t292 - g(1) * (-t126 * t190 - t187 * t314) - g(2) * (-t124 * t190 + t187 * t259) + g(3) * t134 + (t97 + t318) * qJD(3) - t278, 0, 0, t319, t362, t52, -t319, -t236, qJDD(3), t325 - t116 * t361 + (qJDD(3) * t183 - t127 * t294) * pkin(3) + t211, qJD(3) * t44 + t116 * t127 + (-qJDD(3) * t180 - t294 * t361) * pkin(3) + t210 (t40 - t42) * t361 + (-t39 + t44) * t127 + (-t180 * t74 - t183 * t75) * pkin(3), -g(1) * t246 - g(2) * t208 - g(3) * t230 - t116 * t170 + t13 * t348 - t341 * t347 + t39 * t42 - t40 * t44, qJDD(3), -t52, t236, t319, t362, -t319, -t166 * t74 + t168 * t75 + (-t35 - t42) * t361 + (t34 + t367) * t127, -t325 + t127 * t56 + (-pkin(4) + t168) * qJDD(3) + t200, qJDD(3) * t166 - t127 * t51 + t361 * t56 + t177 + (0.2e1 * qJD(5) - t44) * qJD(3) - t210, -g(1) * t214 - g(2) * t199 - g(3) * t207 + t11 * t168 - t8 * t166 - t34 * t42 + t35 * t367 - t51 * t56, -t254 * t95 - t329, -t33 - t376 + (t37 + t256) * t186, t222 + t334, t368 * t93 + t331, t213 - t335, t371 * t127, -t127 * t235 - t15 * t371 + t166 * t38 + t202 * t186 + t189 * t359 + t302 * t93, -t10 * t127 + t16 * t371 - t166 * t37 - t186 * t359 + t202 * t189 + t302 * t95, t15 * t95 + t16 * t93 + (-t10 * t361 + t164 * t37 - t2 + (-t164 * t93 - t10) * qJD(6)) * t189 + (-t361 * t235 - t164 * t38 - t1 + (t164 * t95 - t235) * qJD(6)) * t186 + t217, t7 * t166 - t10 * t16 + t235 * t15 - g(1) * (-pkin(9) * t78 + t214) - g(2) * (-t76 * pkin(9) + t199) - g(3) * (-pkin(9) * t110 + t207) + t302 * t23 + (t1 * t186 + t10 * t288 + t2 * t189 + t235 * t289) * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t370, t354, t363, t127 * t40 + t361 * t39 + t195, 0, 0, 0, 0, 0, 0, t363, -t370, -t354, t351 - t337 - t127 * t35 + (-qJD(5) - t34) * t361 + t195, 0, 0, 0, 0, 0, 0, t213 + t335, t334 - t222, -t186 * t374 - t33 + t376, t127 * t23 - t186 * t360 + t240 * t189 + t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, qJDD(3) - t319, -t122 - t192, qJD(3) * t35 + t200 - t322, 0, 0, 0, 0, 0, 0, -qJD(3) * t93 + t222, -qJD(3) * t95 + t213, t374 * t189 + (t371 * t95 - t38) * t186, -t23 * qJD(3) + t240 * t186 + t189 * t360 - t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342, -t93 ^ 2 + t95 ^ 2, -t374, -t342, -t250 + (-qJD(6) + t371) * t95, t68, -t23 * t95 - g(1) * (-t125 * t186 + t189 * t78) - g(2) * (-t123 * t186 + t189 * t76) - g(3) * (t110 * t189 + t154) + t360, t23 * t93 - g(1) * (-t125 * t189 - t186 * t78) - g(2) * (-t123 * t189 - t186 * t76) - g(3) * (-t110 * t186 + t276) - t240, 0, 0;];
tau_reg  = t3;
