% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6PRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRPPR2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:06:31
% EndTime: 2019-03-08 21:06:41
% DurationCPUTime: 3.89s
% Computational Cost: add. (4559->382), mult. (11780->512), div. (0->0), fcn. (8875->10), ass. (0->211)
t134 = sin(pkin(11));
t136 = cos(pkin(11));
t139 = sin(qJ(3));
t142 = cos(qJ(3));
t110 = t134 * t142 + t136 * t139;
t258 = t110 * qJD(2);
t265 = qJD(6) + t258;
t204 = qJD(2) * t142;
t188 = t136 * t204;
t206 = qJD(2) * t139;
t101 = t134 * t206 - t188;
t138 = sin(qJ(6));
t141 = cos(qJ(6));
t79 = qJD(3) * t138 - t141 * t101;
t182 = t265 * t79;
t199 = qJD(6) * t141;
t200 = qJD(6) * t138;
t103 = t110 * qJD(3);
t91 = qJD(2) * t103;
t49 = qJD(3) * t200 - t101 * t199 - t138 * t91;
t267 = t49 - t182;
t140 = sin(qJ(2));
t135 = sin(pkin(6));
t209 = qJD(1) * t135;
t192 = t140 * t209;
t202 = qJD(3) * t139;
t272 = pkin(3) * t202 - t192;
t143 = cos(qJ(2));
t189 = t143 * t209;
t241 = -qJ(4) - pkin(8);
t183 = qJD(3) * t241;
t197 = t142 * qJD(4);
t95 = t139 * t183 + t197;
t96 = -t139 * qJD(4) + t142 * t183;
t239 = -t110 * t189 + t134 * t95 - t136 * t96;
t201 = qJD(3) * t142;
t106 = -t134 * t202 + t136 * t201;
t271 = t106 * qJ(5) + t110 * qJD(5) - t272;
t114 = qJD(2) * pkin(8) + t192;
t137 = cos(pkin(6));
t218 = t137 * t142;
t123 = qJD(1) * t218;
t207 = qJD(2) * t135;
t186 = qJD(1) * t207;
t174 = t143 * t186;
t211 = qJD(3) * t123 + t142 * t174;
t60 = -t114 * t202 + t211;
t46 = (-qJ(4) * t202 + t197) * qJD(2) + t60;
t208 = qJD(1) * t139;
t187 = t137 * t208;
t83 = t114 * t142 + t187;
t47 = -t83 * qJD(3) + (-qJ(4) * t201 + (-qJD(4) - t189) * t139) * qJD(2);
t15 = t134 * t46 - t136 * t47;
t195 = qJD(2) * qJD(3);
t185 = t139 * t195;
t118 = t134 * t185;
t184 = t142 * t195;
t92 = t136 * t184 - t118;
t13 = pkin(5) * t92 + t15;
t97 = pkin(3) * t185 + t140 * t186;
t171 = -t92 * qJ(5) + t97;
t153 = -qJD(5) * t258 + t171;
t251 = pkin(4) + pkin(9);
t19 = t251 * t91 + t153;
t177 = qJ(4) * qJD(2) + t114;
t74 = t177 * t142 + t187;
t66 = t134 * t74;
t73 = -t177 * t139 + t123;
t70 = qJD(3) * pkin(3) + t73;
t29 = t136 * t70 - t66;
t170 = qJD(5) - t29;
t245 = t258 * pkin(5);
t20 = -t251 * qJD(3) + t170 + t245;
t129 = -t142 * pkin(3) - pkin(2);
t93 = t129 * qJD(2) + qJD(4) - t189;
t147 = -qJ(5) * t258 + t93;
t28 = t251 * t101 + t147;
t6 = t138 * t20 + t141 * t28;
t2 = -qJD(6) * t6 + t141 * t13 - t138 * t19;
t257 = t265 * t6 + t2;
t163 = t138 * t28 - t141 * t20;
t1 = -t163 * qJD(6) + t138 * t13 + t141 * t19;
t167 = t163 * t265 + t1;
t270 = pkin(5) * t106 + t239;
t262 = t141 * t265;
t81 = qJD(3) * t141 + t101 * t138;
t269 = t81 * t262;
t268 = -t251 * t103 + t271;
t180 = t138 * t265;
t86 = t141 * t92;
t159 = -t180 * t265 + t86;
t266 = t258 * qJD(3);
t261 = -t134 * t139 + t136 * t142;
t238 = t134 * t96 + t136 * t95 - t261 * t189;
t65 = t92 * t110;
t263 = t106 * t258 + t65;
t34 = t136 * t73 - t66;
t213 = -qJD(5) + t34;
t100 = t258 ^ 2;
t252 = t101 ^ 2;
t260 = -t252 - t100;
t259 = -t252 + t100;
t128 = -pkin(3) * t136 - pkin(4);
t124 = -pkin(9) + t128;
t246 = pkin(5) * t101;
t233 = t136 * t74;
t30 = t134 * t70 + t233;
t27 = -qJD(3) * qJ(5) - t30;
t21 = -t27 - t246;
t256 = t124 * t92 + t21 * t265;
t205 = qJD(2) * t140;
t222 = t135 * t140;
t107 = -t139 * t222 + t218;
t190 = t143 * t207;
t175 = t142 * t190;
t71 = qJD(3) * t107 + t175;
t108 = t137 * t139 + t142 * t222;
t176 = t139 * t190;
t72 = -qJD(3) * t108 - t176;
t33 = t134 * t72 + t136 * t71;
t255 = t135 * (t143 * t92 - t205 * t258) + t33 * qJD(3);
t31 = t134 * t71 - t136 * t72;
t254 = t135 * (t101 * t205 - t143 * t91) - t31 * qJD(3);
t253 = qJD(3) * (-t101 + t188) - t118;
t250 = t91 * pkin(4);
t161 = -t110 * qJ(5) + t129;
t48 = -t251 * t261 + t161;
t116 = t241 * t139;
t117 = t241 * t142;
t77 = -t136 * t116 - t117 * t134;
t54 = pkin(5) * t110 + t77;
t17 = -t138 * t48 + t141 * t54;
t249 = t17 * qJD(6) + t270 * t138 - t268 * t141;
t18 = t138 * t54 + t141 * t48;
t248 = -t18 * qJD(6) + t268 * t138 + t270 * t141;
t247 = pkin(3) * t139;
t58 = -t136 * t107 + t108 * t134;
t244 = t15 * t58;
t243 = t15 * t77;
t242 = t81 * t79;
t240 = -pkin(5) * t103 + t238;
t16 = t134 * t47 + t136 * t46;
t237 = qJD(2) * pkin(2);
t236 = t101 * t79;
t42 = t101 * pkin(4) + t147;
t235 = t258 * t42;
t232 = t138 * t92;
t231 = t141 * t49;
t85 = t141 * t91;
t50 = qJD(6) * t81 - t85;
t43 = t141 * t50;
t230 = t50 * t138;
t229 = t81 * t101;
t228 = t101 * t258;
t227 = t103 * t138;
t226 = t103 * t141;
t224 = t114 * t139;
t221 = t135 * t143;
t145 = qJD(2) ^ 2;
t220 = t135 * t145;
t144 = qJD(3) ^ 2;
t217 = t144 * t139;
t216 = t144 * t142;
t212 = t245 - t213;
t132 = t139 ^ 2;
t133 = t142 ^ 2;
t210 = t132 - t133;
t203 = qJD(3) * t103;
t198 = t106 * qJD(3);
t130 = pkin(3) * t206;
t194 = t140 * t220;
t193 = t139 * t145 * t142;
t191 = t135 * t205;
t32 = t134 * t73 + t233;
t181 = t101 * qJ(5) + t130;
t173 = t139 * t184;
t14 = -qJD(3) * qJD(5) - t16;
t11 = -pkin(5) * t91 - t14;
t172 = -qJD(6) * t124 * t265 + t11;
t169 = -pkin(4) * t103 + t271;
t168 = t138 * t163 + t141 * t6;
t115 = -t189 - t237;
t166 = -t115 - t189;
t162 = t101 * t103 - t261 * t91;
t78 = t116 * t134 - t117 * t136;
t160 = -qJD(3) * t32 + t15;
t158 = -t138 * t58 + t141 * t221;
t44 = t138 * t221 + t141 * t58;
t152 = -t262 * t265 - t232;
t62 = -t118 + (t101 + t188) * qJD(3);
t151 = qJD(3) * (-t166 - t237);
t59 = t107 * t134 + t108 * t136;
t150 = -t101 * t33 + t258 * t31 + t58 * t92 - t59 * t91;
t149 = -t101 * t106 - t103 * t258 - t110 * t91 + t261 * t92;
t61 = -t114 * t201 + (-qJD(3) * t137 - t190) * t208;
t82 = t123 - t224;
t148 = -t61 * t139 + t60 * t142 + (-t139 * t83 - t142 * t82) * qJD(3);
t146 = -t238 * t101 + t15 * t110 + t239 * t258 + t77 * t92 - t78 * t91;
t126 = pkin(3) * t134 + qJ(5);
t63 = -pkin(4) * t261 + t161;
t55 = pkin(5) * t261 + t78;
t51 = pkin(4) * t258 + t181;
t35 = t251 * t258 + t181;
t26 = -qJD(3) * pkin(4) + t170;
t24 = t153 + t250;
t22 = t32 - t246;
t10 = qJD(6) * t44 + t138 * t31 + t141 * t191;
t9 = qJD(6) * t158 - t138 * t191 + t141 * t31;
t8 = t138 * t22 + t141 * t35;
t7 = -t138 * t35 + t141 * t22;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194, -t143 * t220, 0, 0, 0, 0, 0, 0, 0, 0, -t142 * t194 + (t72 - t176) * qJD(3), t139 * t194 + (-t71 - t175) * qJD(3) (-t139 * t72 + t142 * t71 + (-t107 * t142 - t108 * t139) * qJD(3)) * qJD(2), t61 * t107 + t60 * t108 + t83 * t71 + t82 * t72 + (t115 - t189) * t191, 0, 0, 0, 0, 0, 0, t254, -t255, t150, t244 + t16 * t59 - t29 * t31 + t30 * t33 + (-t143 * t97 + t205 * t93) * t135, 0, 0, 0, 0, 0, 0, t150, -t254, t255, -t14 * t59 + t244 + t26 * t31 - t27 * t33 + (-t143 * t24 + t205 * t42) * t135, 0, 0, 0, 0, 0, 0, t265 * t9 + t33 * t79 + t44 * t92 + t50 * t59, -t10 * t265 + t158 * t92 + t33 * t81 - t49 * t59, -t10 * t79 + t158 * t50 + t44 * t49 - t81 * t9, -t1 * t158 + t10 * t6 + t11 * t59 - t163 * t9 + t2 * t44 + t21 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t173, -0.2e1 * t210 * t195, t216, -0.2e1 * t173, -t217, 0, -pkin(8) * t216 + t139 * t151, pkin(8) * t217 + t142 * t151 (-t132 - t133) * t174 + t148 ((t139 * t82 - t142 * t83) * t143 + (-t115 - t237) * t140) * t209 + t148 * pkin(8), t263, t149, t198, t162, -t203, 0, -t101 * t192 + t93 * t103 - t97 * t261 + t129 * t91 + (t101 * t247 - t239) * qJD(3), -t258 * t192 + t93 * t106 + t97 * t110 + t129 * t92 + (t247 * t258 - t238) * qJD(3), -t30 * t103 - t29 * t106 + t16 * t261 + t146, t97 * t129 + t16 * t78 + t238 * t30 - t239 * t29 + t272 * t93 + t243, 0, -t198, t203, t263, t149, t162, t27 * t103 + t26 * t106 - t14 * t261 + t146, qJD(3) * t239 + t101 * t169 - t42 * t103 + t24 * t261 - t63 * t91, qJD(3) * t238 - t42 * t106 - t24 * t110 + t169 * t258 - t63 * t92, -t14 * t78 - t169 * t42 - t238 * t27 + t239 * t26 + t24 * t63 + t243, t81 * t227 - (-t138 * t49 + t199 * t81) * t261 (-t138 * t79 + t141 * t81) * t103 - (-t230 - t231 + (-t138 * t81 - t141 * t79) * qJD(6)) * t261, t265 * t227 + t81 * t106 - t49 * t110 - (t199 * t265 + t232) * t261, -t79 * t226 - (t200 * t79 - t43) * t261, t265 * t226 - t79 * t106 - t50 * t110 - (-t200 * t265 + t86) * t261, t106 * t265 + t65, -t21 * t226 - t163 * t106 + t2 * t110 + t17 * t92 + t55 * t50 + t248 * t265 + t240 * t79 - (-t11 * t141 + t200 * t21) * t261, t21 * t227 - t1 * t110 - t6 * t106 - t18 * t92 - t55 * t49 - t249 * t265 + t240 * t81 - (t11 * t138 + t199 * t21) * t261, t17 * t49 - t18 * t50 - t248 * t81 - t249 * t79 + t168 * t103 - (t1 * t141 - t2 * t138 + (-t138 * t6 + t141 * t163) * qJD(6)) * t261, t1 * t18 + t11 * t55 - t163 * t248 + t2 * t17 + t240 * t21 + t249 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, t210 * t145, 0, t193, 0, 0, t166 * t206, -t115 * t204 + (t82 + t224) * qJD(3) - t211, 0, 0, t228, t259, t62, -t228, 0, 0, -t101 * t130 - t258 * t93 - t160, qJD(3) * t34 + t101 * t93 - t130 * t258 - t16 (t30 - t32) * t258 + (-t29 + t34) * t101 + (-t134 * t91 - t136 * t92) * pkin(3), t29 * t32 - t30 * t34 + (t134 * t16 - t136 * t15 - t206 * t93) * pkin(3), 0, -t62, 0, t228, t259, -t228, -t126 * t91 + t128 * t92 + (-t27 - t32) * t258 + (t26 + t213) * t101, t101 * t51 + t160 + t235, -t42 * t101 + t51 * t258 + (0.2e1 * qJD(5) - t34) * qJD(3) + t16, -t14 * t126 + t15 * t128 + t213 * t27 - t26 * t32 - t42 * t51, -t180 * t81 - t231, -t43 - t269 + (t49 + t182) * t138, t159 + t229, t262 * t79 + t230, t152 - t236, t265 * t101, -t101 * t163 + t126 * t50 + t172 * t138 + t141 * t256 + t212 * t79 - t265 * t7, -t6 * t101 - t126 * t49 - t138 * t256 + t172 * t141 + t212 * t81 + t265 * t8, t7 * t81 + t8 * t79 + (-t258 * t6 + t124 * t49 - t2 + (-t124 * t79 - t6) * qJD(6)) * t141 + (-t258 * t163 - t124 * t50 - t1 + (t124 * t81 - t163) * qJD(6)) * t138, t11 * t126 + t163 * t7 - t6 * t8 + t212 * t21 + (qJD(6) * t168 + t1 * t138 + t2 * t141) * t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t266, t253, t260, t101 * t30 + t258 * t29 + t97, 0, 0, 0, 0, 0, 0, t260, -0.2e1 * t266, -t253, t250 - t27 * t101 + (-qJD(5) - t26) * t258 + t171, 0, 0, 0, 0, 0, 0, t152 + t236, t229 - t159, -t267 * t138 + t269 - t43, t21 * t101 - t138 * t257 + t167 * t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t228, -t100 - t144, qJD(3) * t27 + t15 + t235, 0, 0, 0, 0, 0, 0, -qJD(3) * t79 + t159, -qJD(3) * t81 + t152, t267 * t141 + (t265 * t81 - t50) * t138, -t21 * qJD(3) + t167 * t138 + t141 * t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, -t79 ^ 2 + t81 ^ 2, -t267, -t242, t85 + (-qJD(6) + t265) * t81, t92, -t21 * t81 + t257, t21 * t79 - t167, 0, 0;];
tauc_reg  = t3;
