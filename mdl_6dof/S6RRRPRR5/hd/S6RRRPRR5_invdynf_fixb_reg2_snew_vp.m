% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 10:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 10:45:38
% EndTime: 2019-05-07 10:45:46
% DurationCPUTime: 8.60s
% Computational Cost: add. (39167->331), mult. (80955->400), div. (0->0), fcn. (58126->10), ass. (0->236)
t2198 = qJDD(2) + qJDD(3);
t2204 = sin(qJ(3));
t2209 = cos(qJ(3));
t2210 = cos(qJ(2));
t2260 = qJD(1) * t2210;
t2205 = sin(qJ(2));
t2261 = qJD(1) * t2205;
t2166 = t2204 * t2261 - t2209 * t2260;
t2168 = (t2204 * t2210 + t2205 * t2209) * qJD(1);
t2253 = t2168 * t2166;
t2139 = -t2198 - t2253;
t2199 = qJD(2) + qJD(3);
t2197 = t2199 ^ 2;
t2263 = t2168 ^ 2;
t2236 = -t2197 - t2263;
t2115 = t2139 * t2204 + t2209 * t2236;
t2117 = t2139 * t2209 - t2204 * t2236;
t2085 = t2115 * t2205 - t2117 * t2210;
t2206 = sin(qJ(1));
t2281 = t2085 * t2206;
t2211 = cos(qJ(1));
t2280 = t2085 * t2211;
t2165 = t2166 ^ 2;
t2135 = -t2197 - t2165;
t2230 = t2198 - t2253;
t2101 = t2135 * t2204 + t2209 * t2230;
t2104 = -t2135 * t2209 + t2204 * t2230;
t2078 = t2101 * t2205 + t2104 * t2210;
t2279 = t2078 * t2206;
t2278 = t2078 * t2211;
t2084 = t2115 * t2210 + t2117 * t2205;
t2238 = qJD(2) * t2260;
t2241 = t2205 * qJDD(1);
t2175 = t2238 + t2241;
t2195 = t2210 * qJDD(1);
t2239 = qJD(2) * t2261;
t2176 = t2195 - t2239;
t2223 = t2209 * t2175 + t2204 * t2176;
t2248 = qJD(3) - t2199;
t2113 = t2166 * t2248 - t2223;
t2277 = t2113 * t2204;
t2276 = t2113 * t2209;
t2075 = t2101 * t2210 - t2104 * t2205;
t2270 = -t2165 - t2263;
t2275 = t2206 * t2270;
t2274 = t2211 * t2270;
t2201 = t2210 ^ 2;
t2213 = qJD(1) ^ 2;
t2184 = t2206 * g(1) - t2211 * g(2);
t2220 = qJDD(1) * pkin(1) + t2184;
t2221 = qJD(2) * pkin(2) - pkin(8) * t2261;
t2133 = t2176 * pkin(2) + (pkin(8) * t2201 + pkin(7)) * t2213 - t2221 * t2261 + t2220;
t2130 = -qJD(3) * t2166 + t2223;
t2254 = t2166 * t2199;
t2232 = -t2130 + t2254;
t2252 = t2199 * t2168;
t2273 = pkin(3) * t2252 + t2232 * qJ(4) - 0.2e1 * qJD(4) * t2168 - t2133;
t2203 = sin(qJ(5));
t2208 = cos(qJ(5));
t2144 = -t2208 * t2166 + t2199 * t2203;
t2146 = t2166 * t2203 + t2199 * t2208;
t2202 = sin(qJ(6));
t2207 = cos(qJ(6));
t2119 = t2207 * t2144 + t2146 * t2202;
t2268 = t2119 ^ 2;
t2121 = -t2144 * t2202 + t2146 * t2207;
t2267 = t2121 ^ 2;
t2143 = t2144 ^ 2;
t2266 = t2146 ^ 2;
t2164 = qJD(5) + t2168;
t2161 = qJD(6) + t2164;
t2265 = t2161 ^ 2;
t2264 = t2164 ^ 2;
t2262 = 0.2e1 * qJD(4);
t2258 = t2119 * t2121;
t2255 = t2144 * t2146;
t2251 = t2201 * t2213;
t2185 = -g(1) * t2211 - g(2) * t2206;
t2171 = -pkin(1) * t2213 + qJDD(1) * pkin(7) + t2185;
t2250 = t2205 * t2171;
t2249 = t2205 * t2213;
t2247 = qJD(3) + t2199;
t2246 = qJD(5) - t2164;
t2245 = qJD(5) + t2164;
t2244 = qJD(6) - t2161;
t2243 = qJD(6) + t2161;
t2231 = t2204 * t2175 - t2209 * t2176;
t2129 = qJD(3) * t2168 + t2231;
t2155 = pkin(4) * t2168 - pkin(9) * t2199;
t2048 = -t2165 * pkin(4) - t2168 * t2155 + (pkin(3) + pkin(9)) * t2129 + t2273;
t2123 = qJDD(2) * pkin(2) - t2175 * pkin(8) - t2250 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2249 - g(3)) * t2210;
t2154 = -t2205 * g(3) + t2210 * t2171;
t2126 = -pkin(2) * t2251 + t2176 * pkin(8) - qJD(2) * t2221 + t2154;
t2092 = t2209 * t2123 - t2204 * t2126;
t2140 = pkin(3) * t2166 - qJ(4) * t2168;
t2070 = -t2198 * pkin(3) - t2197 * qJ(4) + t2168 * t2140 + qJDD(4) - t2092;
t2057 = -t2230 * pkin(9) + (t2130 + t2254) * pkin(4) + t2070;
t2029 = t2208 * t2048 + t2203 * t2057;
t2200 = t2205 ^ 2;
t2242 = t2200 + t2201;
t2237 = -t2264 - t2266;
t2235 = -t2203 * t2048 + t2208 * t2057;
t2233 = -t2208 * t2129 + t2203 * t2198;
t2098 = -qJD(5) * t2146 - t2233;
t2224 = t2203 * t2129 + t2208 * t2198;
t2099 = -qJD(5) * t2144 + t2224;
t2234 = t2207 * t2098 - t2202 * t2099;
t2218 = -qJDD(5) - t2130;
t2214 = -t2218 - t2255;
t2014 = (-t2144 * t2164 - t2099) * pkin(10) + t2214 * pkin(5) + t2235;
t2134 = pkin(5) * t2164 - pkin(10) * t2146;
t2015 = -pkin(5) * t2143 + pkin(10) * t2098 - t2134 * t2164 + t2029;
t2000 = t2014 * t2207 - t2015 * t2202;
t2001 = t2014 * t2202 + t2015 * t2207;
t2229 = t2000 * t2207 + t2001 * t2202;
t2040 = -t2121 * t2244 + t2234;
t2225 = -t2202 * t2098 - t2207 * t2099;
t2042 = t2119 * t2244 + t2225;
t2228 = t2040 * t2202 + t2042 * t2207;
t2216 = qJDD(6) - t2218;
t2073 = t2216 - t2258;
t2087 = -t2265 - t2268;
t2227 = t2073 * t2207 + t2087 * t2202;
t2074 = -t2216 - t2258;
t2096 = -t2265 - t2267;
t2226 = t2074 * t2202 + t2096 * t2207;
t2093 = t2204 * t2123 + t2209 * t2126;
t2217 = t2144 * t2246 - t2224;
t2215 = -t2197 * pkin(3) + t2198 * qJ(4) - t2166 * t2140 + t2093;
t2059 = -t2129 * pkin(4) - t2165 * pkin(9) + (t2262 + t2155) * t2199 + t2215;
t2212 = qJD(2) ^ 2;
t2189 = t2210 * t2249;
t2187 = -t2212 - t2251;
t2186 = -t2200 * t2213 - t2212;
t2183 = -qJDD(2) + t2189;
t2182 = qJDD(2) + t2189;
t2181 = t2242 * t2213;
t2180 = -qJDD(1) * t2206 - t2211 * t2213;
t2179 = qJDD(1) * t2211 - t2206 * t2213;
t2178 = t2242 * qJDD(1);
t2177 = t2195 - 0.2e1 * t2239;
t2174 = 0.2e1 * t2238 + t2241;
t2170 = t2213 * pkin(7) + t2220;
t2153 = -t2210 * g(3) - t2250;
t2150 = t2183 * t2210 - t2186 * t2205;
t2149 = -t2182 * t2205 + t2187 * t2210;
t2148 = t2183 * t2205 + t2186 * t2210;
t2147 = t2182 * t2210 + t2187 * t2205;
t2125 = -t2153 * t2205 + t2154 * t2210;
t2124 = t2153 * t2210 + t2154 * t2205;
t2111 = -t2166 * t2247 + t2223;
t2109 = -t2129 + t2252;
t2108 = t2129 + t2252;
t2107 = t2168 * t2248 + t2231;
t2106 = t2168 * t2247 + t2231;
t2105 = -t2264 - t2143;
t2100 = -t2143 - t2266;
t2095 = t2218 - t2255;
t2091 = -t2144 * t2245 + t2224;
t2090 = -t2146 * t2246 - t2233;
t2089 = t2146 * t2245 + t2233;
t2082 = t2109 * t2209 - t2277;
t2081 = -t2107 * t2209 - t2277;
t2080 = t2109 * t2204 + t2276;
t2079 = -t2107 * t2204 + t2276;
t2072 = t2208 * t2095 - t2203 * t2237;
t2071 = t2203 * t2095 + t2208 * t2237;
t2069 = -t2267 - t2268;
t2068 = t2208 * t2105 - t2203 * t2214;
t2067 = t2203 * t2105 + t2208 * t2214;
t2066 = t2199 * t2262 + t2215;
t2065 = -t2129 * pkin(3) - t2273;
t2064 = -t2092 * t2204 + t2093 * t2209;
t2063 = t2092 * t2209 + t2093 * t2204;
t2062 = t2208 * t2090 - t2203 * t2217;
t2061 = t2203 * t2090 + t2208 * t2217;
t2060 = t2074 * t2207 - t2096 * t2202;
t2054 = -t2080 * t2205 + t2082 * t2210;
t2053 = -t2079 * t2205 + t2081 * t2210;
t2052 = t2080 * t2210 + t2082 * t2205;
t2051 = t2079 * t2210 + t2081 * t2205;
t2050 = t2071 * t2204 + t2091 * t2209;
t2049 = -t2071 * t2209 + t2091 * t2204;
t2046 = -t2073 * t2202 + t2087 * t2207;
t2045 = t2067 * t2204 + t2089 * t2209;
t2044 = -t2067 * t2209 + t2089 * t2204;
t2041 = -t2119 * t2243 - t2225;
t2039 = t2121 * t2243 - t2234;
t2038 = t2061 * t2204 + t2100 * t2209;
t2037 = -t2061 * t2209 + t2100 * t2204;
t2036 = t2066 * t2209 + t2070 * t2204;
t2035 = t2066 * t2204 - t2070 * t2209;
t2034 = -t2098 * pkin(5) - t2143 * pkin(10) + t2146 * t2134 + t2059;
t2033 = -t2063 * t2205 + t2064 * t2210;
t2032 = t2063 * t2210 + t2064 * t2205;
t2031 = t2208 * t2060 - t2203 * t2226;
t2030 = t2203 * t2060 + t2208 * t2226;
t2027 = -t2049 * t2205 + t2050 * t2210;
t2026 = t2049 * t2210 + t2050 * t2205;
t2025 = t2208 * t2046 - t2203 * t2227;
t2024 = t2203 * t2046 + t2208 * t2227;
t2023 = -t2044 * t2205 + t2045 * t2210;
t2022 = t2044 * t2210 + t2045 * t2205;
t2021 = t2040 * t2207 - t2042 * t2202;
t2019 = -t2037 * t2205 + t2038 * t2210;
t2018 = t2037 * t2210 + t2038 * t2205;
t2017 = -t2035 * t2205 + t2036 * t2210;
t2016 = t2035 * t2210 + t2036 * t2205;
t2013 = t2030 * t2204 + t2041 * t2209;
t2012 = -t2030 * t2209 + t2041 * t2204;
t2011 = t2024 * t2204 + t2039 * t2209;
t2010 = -t2024 * t2209 + t2039 * t2204;
t2009 = t2208 * t2029 - t2203 * t2235;
t2008 = t2203 * t2029 + t2208 * t2235;
t2007 = t2208 * t2021 - t2203 * t2228;
t2006 = t2203 * t2021 + t2208 * t2228;
t2005 = t2006 * t2204 + t2069 * t2209;
t2004 = -t2006 * t2209 + t2069 * t2204;
t2003 = t2008 * t2204 + t2059 * t2209;
t2002 = -t2008 * t2209 + t2059 * t2204;
t1999 = -t2012 * t2205 + t2013 * t2210;
t1998 = t2012 * t2210 + t2013 * t2205;
t1997 = -t2010 * t2205 + t2011 * t2210;
t1996 = t2010 * t2210 + t2011 * t2205;
t1995 = -t2004 * t2205 + t2005 * t2210;
t1994 = t2004 * t2210 + t2005 * t2205;
t1993 = -t2002 * t2205 + t2003 * t2210;
t1992 = t2002 * t2210 + t2003 * t2205;
t1991 = -t2000 * t2202 + t2001 * t2207;
t1989 = t2208 * t1991 - t2203 * t2229;
t1988 = t2203 * t1991 + t2208 * t2229;
t1987 = t1988 * t2204 + t2034 * t2209;
t1986 = -t1988 * t2209 + t2034 * t2204;
t1985 = -t1986 * t2205 + t1987 * t2210;
t1984 = t1986 * t2210 + t1987 * t2205;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2180, -t2179, 0, -t2184 * t2206 + t2185 * t2211, 0, 0, 0, 0, 0, 0, t2149 * t2211 - t2177 * t2206, t2150 * t2211 + t2174 * t2206, t2178 * t2211 - t2181 * t2206, t2125 * t2211 - t2170 * t2206, 0, 0, 0, 0, 0, 0, t2106 * t2206 - t2278, -t2206 * t2232 - t2280, t2054 * t2211 + t2275, t2033 * t2211 - t2133 * t2206, 0, 0, 0, 0, 0, 0, t2053 * t2211 + t2275, -t2108 * t2206 + t2278, -t2111 * t2206 + t2280, t2017 * t2211 - t2065 * t2206, 0, 0, 0, 0, 0, 0, t2023 * t2211 + t2068 * t2206, t2027 * t2211 + t2072 * t2206, t2019 * t2211 + t2062 * t2206, t1993 * t2211 + t2009 * t2206, 0, 0, 0, 0, 0, 0, t1997 * t2211 + t2025 * t2206, t1999 * t2211 + t2031 * t2206, t1995 * t2211 + t2007 * t2206, t1985 * t2211 + t1989 * t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2179, t2180, 0, t2184 * t2211 + t2185 * t2206, 0, 0, 0, 0, 0, 0, t2149 * t2206 + t2177 * t2211, t2150 * t2206 - t2174 * t2211, t2178 * t2206 + t2181 * t2211, t2125 * t2206 + t2170 * t2211, 0, 0, 0, 0, 0, 0, -t2106 * t2211 - t2279, t2211 * t2232 - t2281, t2054 * t2206 - t2274, t2033 * t2206 + t2133 * t2211, 0, 0, 0, 0, 0, 0, t2053 * t2206 - t2274, t2108 * t2211 + t2279, t2111 * t2211 + t2281, t2017 * t2206 + t2065 * t2211, 0, 0, 0, 0, 0, 0, t2023 * t2206 - t2068 * t2211, t2027 * t2206 - t2072 * t2211, t2019 * t2206 - t2062 * t2211, t1993 * t2206 - t2009 * t2211, 0, 0, 0, 0, 0, 0, t1997 * t2206 - t2025 * t2211, t1999 * t2206 - t2031 * t2211, t1995 * t2206 - t2007 * t2211, t1985 * t2206 - t1989 * t2211; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2147, t2148, 0, t2124, 0, 0, 0, 0, 0, 0, t2075, t2084, t2052, t2032, 0, 0, 0, 0, 0, 0, t2051, -t2075, -t2084, t2016, 0, 0, 0, 0, 0, 0, t2022, t2026, t2018, t1992, 0, 0, 0, 0, 0, 0, t1996, t1998, t1994, t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2213, -qJDD(1), 0, t2185, 0, 0, 0, 0, 0, 0, t2149, t2150, t2178, t2125, 0, 0, 0, 0, 0, 0, -t2078, -t2085, t2054, t2033, 0, 0, 0, 0, 0, 0, t2053, t2078, t2085, t2017, 0, 0, 0, 0, 0, 0, t2023, t2027, t2019, t1993, 0, 0, 0, 0, 0, 0, t1997, t1999, t1995, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2213, 0, t2184, 0, 0, 0, 0, 0, 0, t2177, -t2174, t2181, t2170, 0, 0, 0, 0, 0, 0, -t2106, t2232, -t2270, t2133, 0, 0, 0, 0, 0, 0, -t2270, t2108, t2111, t2065, 0, 0, 0, 0, 0, 0, -t2068, -t2072, -t2062, -t2009, 0, 0, 0, 0, 0, 0, -t2025, -t2031, -t2007, -t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2147, t2148, 0, t2124, 0, 0, 0, 0, 0, 0, t2075, t2084, t2052, t2032, 0, 0, 0, 0, 0, 0, t2051, -t2075, -t2084, t2016, 0, 0, 0, 0, 0, 0, t2022, t2026, t2018, t1992, 0, 0, 0, 0, 0, 0, t1996, t1998, t1994, t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187, t2183, t2195, t2154, 0, 0, 0, 0, 0, 0, -t2104, t2117, t2082, t2064, 0, 0, 0, 0, 0, 0, t2081, t2104, -t2117, t2036, 0, 0, 0, 0, 0, 0, t2045, t2050, t2038, t2003, 0, 0, 0, 0, 0, 0, t2011, t2013, t2005, t1987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2182, t2186, -t2241, t2153, 0, 0, 0, 0, 0, 0, t2101, t2115, t2080, t2063, 0, 0, 0, 0, 0, 0, t2079, -t2101, -t2115, t2035, 0, 0, 0, 0, 0, 0, t2044, t2049, t2037, t2002, 0, 0, 0, 0, 0, 0, t2010, t2012, t2004, t1986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2177, t2174, -t2181, -t2170, 0, 0, 0, 0, 0, 0, t2106, -t2232, t2270, -t2133, 0, 0, 0, 0, 0, 0, t2270, -t2108, -t2111, -t2065, 0, 0, 0, 0, 0, 0, t2068, t2072, t2062, t2009, 0, 0, 0, 0, 0, 0, t2025, t2031, t2007, t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2135, t2139, t2109, t2093, 0, 0, 0, 0, 0, 0, -t2107, -t2135, -t2139, t2066, 0, 0, 0, 0, 0, 0, t2089, t2091, t2100, t2059, 0, 0, 0, 0, 0, 0, t2039, t2041, t2069, t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2230, t2236, t2113, t2092, 0, 0, 0, 0, 0, 0, t2113, -t2230, -t2236, -t2070, 0, 0, 0, 0, 0, 0, -t2067, -t2071, -t2061, -t2008, 0, 0, 0, 0, 0, 0, -t2024, -t2030, -t2006, -t1988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2106, -t2232, t2270, -t2133, 0, 0, 0, 0, 0, 0, t2270, -t2108, -t2111, -t2065, 0, 0, 0, 0, 0, 0, t2068, t2072, t2062, t2009, 0, 0, 0, 0, 0, 0, t2025, t2031, t2007, t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2270, -t2108, -t2111, -t2065, 0, 0, 0, 0, 0, 0, t2068, t2072, t2062, t2009, 0, 0, 0, 0, 0, 0, t2025, t2031, t2007, t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2107, t2135, t2139, -t2066, 0, 0, 0, 0, 0, 0, -t2089, -t2091, -t2100, -t2059, 0, 0, 0, 0, 0, 0, -t2039, -t2041, -t2069, -t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2113, t2230, t2236, t2070, 0, 0, 0, 0, 0, 0, t2067, t2071, t2061, t2008, 0, 0, 0, 0, 0, 0, t2024, t2030, t2006, t1988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2105, t2095, t2090, t2029, 0, 0, 0, 0, 0, 0, t2046, t2060, t2021, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2214, t2237, t2217, t2235, 0, 0, 0, 0, 0, 0, t2227, t2226, t2228, t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2089, t2091, t2100, t2059, 0, 0, 0, 0, 0, 0, t2039, t2041, t2069, t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2087, t2074, t2040, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2073, t2096, t2042, t2000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2039, t2041, t2069, t2034;];
f_new_reg  = t1;
