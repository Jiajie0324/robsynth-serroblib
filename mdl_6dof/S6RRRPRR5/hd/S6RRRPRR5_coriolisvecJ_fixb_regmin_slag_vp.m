% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR5_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR5_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR5_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR5_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:23:10
% EndTime: 2019-03-09 18:23:23
% DurationCPUTime: 5.02s
% Computational Cost: add. (5988->416), mult. (14190->542), div. (0->0), fcn. (10430->8), ass. (0->240)
t218 = sin(qJ(6));
t219 = sin(qJ(5));
t222 = cos(qJ(6));
t223 = cos(qJ(5));
t174 = t218 * t223 + t219 * t222;
t220 = sin(qJ(3));
t221 = sin(qJ(2));
t224 = cos(qJ(2));
t330 = cos(qJ(3));
t177 = t220 * t224 + t330 * t221;
t289 = qJD(1) * t177;
t334 = qJD(5) + qJD(6);
t293 = (t289 + t334) * t174;
t214 = qJD(2) + qJD(3);
t301 = t220 * t221;
t251 = t214 * t301;
t274 = t330 * t224;
t258 = qJD(1) * t274;
t291 = t214 * t258;
t116 = qJD(1) * t251 - t291;
t346 = qJD(5) + t289;
t145 = qJD(6) + t346;
t283 = qJD(6) * t218;
t286 = qJD(5) * t219;
t300 = t222 * t223;
t335 = -t218 * t219 + t300;
t347 = -t218 * t286 - t219 * t283 + t335 * t289 + t334 * t300;
t352 = t174 * t116 - t145 * t347;
t288 = qJD(1) * t221;
t273 = t220 * t288;
t157 = -t258 + t273;
t131 = -t223 * t157 + t214 * t219;
t351 = t131 * t346;
t175 = -t274 + t301;
t113 = t335 * t175;
t350 = -t116 * t335 - t145 * t293;
t133 = t157 * t219 + t214 * t223;
t249 = t131 * t218 - t222 * t133;
t72 = t222 * t131 + t133 * t218;
t349 = t249 * t72;
t332 = pkin(3) + pkin(9);
t284 = qJD(5) * t332;
t118 = pkin(3) * t289 + qJ(4) * t157;
t153 = t289 * pkin(9);
t86 = t118 + t153;
t348 = t86 + t284;
t345 = t249 ^ 2 - t72 ^ 2;
t331 = -pkin(8) - pkin(7);
t190 = t331 * t224;
t183 = qJD(1) * t190;
t161 = t220 * t183;
t189 = t331 * t221;
t181 = qJD(1) * t189;
t320 = qJD(2) * pkin(2);
t165 = t181 + t320;
t120 = -t330 * t165 - t161;
t281 = qJD(4) + t120;
t326 = t289 * pkin(4);
t295 = t326 + t281;
t67 = -t332 * t214 + t295;
t206 = -pkin(2) * t224 - pkin(1);
t188 = t206 * qJD(1);
t232 = -qJ(4) * t289 + t188;
t70 = t332 * t157 + t232;
t34 = t219 * t67 + t223 * t70;
t21 = -pkin(10) * t131 + t34;
t19 = t21 * t283;
t212 = t214 * qJ(4);
t164 = t330 * t183;
t121 = t220 * t165 - t164;
t327 = t157 * pkin(4);
t91 = t121 - t327;
t79 = t212 + t91;
t54 = pkin(5) * t131 + t79;
t344 = t54 * t72 + t19;
t282 = qJD(6) * t222;
t128 = t214 * t177;
t117 = t128 * qJD(1);
t285 = qJD(5) * t223;
t62 = t219 * t117 + t157 * t285 - t214 * t286;
t112 = t223 * t117;
t63 = t133 * qJD(5) - t112;
t13 = -t131 * t282 - t133 * t283 - t218 * t63 + t222 * t62;
t343 = t145 * t72 + t13;
t279 = qJD(1) * qJD(2);
t270 = t221 * t279;
t241 = pkin(2) * t270 + qJ(4) * t116 - qJD(4) * t289;
t31 = t332 * t117 + t241;
t275 = qJD(2) * t331;
t259 = qJD(1) * t275;
t168 = t221 * t259;
t169 = t224 * t259;
t271 = qJD(3) * t330;
t287 = qJD(3) * t220;
t57 = t165 * t287 + t220 * t168 - t330 * t169 - t183 * t271;
t47 = -pkin(4) * t116 + t57;
t266 = -t219 * t31 + t223 * t47;
t229 = -t34 * qJD(5) + t266;
t3 = -pkin(5) * t116 - pkin(10) * t62 + t229;
t246 = t219 * t47 + t223 * t31 + t67 * t285 - t70 * t286;
t4 = -pkin(10) * t63 + t246;
t276 = -t218 * t4 + t222 * t3;
t33 = -t219 * t70 + t223 * t67;
t20 = -pkin(10) * t133 + t33;
t18 = pkin(5) * t346 + t20;
t319 = t21 * t222;
t9 = t18 * t218 + t319;
t342 = -t9 * qJD(6) + t54 * t249 + t276;
t228 = t249 * qJD(6) - t218 * t62 - t222 * t63;
t341 = -t145 * t249 + t228;
t340 = -0.2e1 * t279;
t260 = -t165 * t271 - t330 * t168 - t220 * t169 - t183 * t287;
t55 = -t214 * qJD(4) + t260;
t41 = -pkin(4) * t117 - t55;
t339 = t41 * t219 + t79 * t285;
t278 = pkin(2) * t287;
t122 = t220 * t181 - t164;
t97 = t122 - t327;
t338 = (t278 - t97) * t223;
t136 = -t330 * t189 - t220 * t190;
t107 = t177 * pkin(4) + t136;
t103 = t219 * t107;
t247 = -qJ(4) * t177 + t206;
t95 = t332 * t175 + t247;
t312 = t223 * t95 + t103;
t114 = t174 * t175;
t123 = t330 * t181 + t161;
t292 = -pkin(2) * t271 - qJD(4) + t123;
t337 = -t157 * pkin(5) - pkin(10) * t286;
t137 = -t220 * t189 + t330 * t190;
t277 = -pkin(5) * t223 - pkin(4);
t336 = pkin(5) * t285 - t277 * t289;
t333 = t289 ^ 2;
t329 = pkin(10) * t289;
t328 = pkin(10) * t175;
t205 = -t330 * pkin(2) - pkin(3);
t201 = -pkin(9) + t205;
t325 = -pkin(10) + t201;
t324 = -pkin(10) - t332;
t106 = pkin(2) * t288 + t118;
t78 = t106 + t153;
t323 = t219 * t97 + t223 * t78;
t322 = t219 * t91 + t223 * t86;
t182 = t221 * t275;
t184 = t224 * t275;
t76 = -t330 * t182 - t220 * t184 - t189 * t271 - t190 * t287;
t318 = t214 * t76;
t77 = -t137 * qJD(3) + t220 * t182 - t330 * t184;
t317 = t214 * t77;
t316 = t223 * t62;
t315 = t336 - t292;
t314 = t326 - t292;
t313 = t281 + t336;
t311 = t121 * t214;
t310 = t128 * t219;
t309 = t145 * t157;
t308 = t346 * t157;
t307 = t289 * t157;
t306 = t289 * t223;
t304 = t175 * t219;
t302 = t219 * t116;
t111 = t223 * t116;
t227 = qJD(1) ^ 2;
t299 = t224 * t227;
t298 = t332 * t116;
t226 = qJD(2) ^ 2;
t297 = t226 * t221;
t296 = t226 * t224;
t290 = t221 ^ 2 - t224 ^ 2;
t210 = t221 * t320;
t272 = -t95 - t328;
t167 = t325 * t223;
t186 = t324 * t223;
t202 = pkin(2) * t220 + qJ(4);
t269 = qJD(6) * t18 + t4;
t268 = -t34 * t157 + t41 * t223;
t265 = t346 * t79;
t264 = pkin(1) * t340;
t263 = t346 ^ 2;
t262 = t346 * t133;
t257 = -t122 + t278;
t166 = t325 * t219;
t255 = qJD(6) * t166 + t201 * t286 + (-t78 - t329) * t219 + t337 - t338;
t140 = pkin(10) * t306;
t254 = -t167 * t334 - t219 * t278 + t140 + t323;
t185 = t324 * t219;
t85 = t223 * t91;
t253 = qJD(6) * t185 + t337 + t85 + (-t329 - t348) * t219;
t252 = -t186 * t334 + t140 + t322;
t250 = t33 * t157 + t79 * t306 + t339;
t127 = -qJD(2) * t274 - t224 * t271 + t251;
t240 = qJ(4) * t127 - qJD(4) * t177 + t210;
t40 = t332 * t128 + t240;
t52 = -t127 * pkin(4) + t77;
t245 = t107 * t285 + t219 * t52 + t223 * t40 - t95 * t286;
t244 = -t219 * t263 - t111;
t243 = t175 * t285 + t310;
t242 = -t128 * t223 + t175 * t286;
t17 = pkin(5) * t63 + t41;
t8 = t18 * t222 - t21 * t218;
t239 = t8 * t157 + t17 * t174 + t347 * t54;
t238 = -t9 * t157 + t17 * t335 - t293 * t54;
t100 = pkin(3) * t157 + t232;
t237 = t100 * t289 + t57;
t236 = -t188 * t289 - t57;
t235 = t188 * t157 + t260;
t233 = -t100 * t157 - t55;
t231 = -t223 * t263 + t302;
t51 = -pkin(4) * t128 - t76;
t81 = t291 + (t157 - t273) * t214;
t213 = t219 * pkin(5);
t203 = qJ(4) + t213;
t187 = t202 + t213;
t119 = pkin(3) * t175 + t247;
t109 = -t212 - t121;
t108 = -pkin(4) * t175 - t137;
t105 = -pkin(3) * t214 + t281;
t104 = t223 * t107;
t96 = -t157 ^ 2 + t333;
t92 = t116 * t177;
t80 = t277 * t175 - t137;
t53 = pkin(3) * t128 + t240;
t50 = t223 * t52;
t48 = pkin(3) * t117 + t241;
t46 = t223 * t328 + t312;
t36 = pkin(5) * t177 + t272 * t219 + t104;
t30 = -t131 * t157 + t231;
t29 = t133 * t157 + t244;
t27 = pkin(5) * t242 + t51;
t25 = -t219 * t262 + t316;
t23 = t334 * t114 - t335 * t128;
t22 = t113 * t334 + t174 * t128;
t12 = -t157 * t72 + t352;
t11 = -t157 * t249 + t350;
t10 = (-t63 - t262) * t223 + (-t62 + t351) * t219;
t7 = -pkin(10) * t242 + t245;
t6 = -pkin(5) * t127 + t50 + (-pkin(10) * t128 - t40) * t219 + (t272 * t223 - t103) * qJD(5);
t5 = t13 * t335 + t249 * t293;
t1 = -t13 * t174 + t228 * t335 + t249 * t347 + t293 * t72;
t2 = [0, 0, 0, 0.2e1 * t224 * t270, t290 * t340, t296, -t297, 0, -pkin(7) * t296 + t221 * t264, pkin(7) * t297 + t224 * t264, -t127 * t289 - t92, t116 * t175 - t117 * t177 + t127 * t157 - t128 * t289, -t127 * t214, -t128 * t214, 0, t117 * t206 + t128 * t188 - t317 + (qJD(1) * t175 + t157) * t210, -t116 * t206 - t127 * t188 + 0.2e1 * t289 * t210 + t318, -t105 * t127 + t109 * t128 - t116 * t136 + t117 * t137 + t157 * t76 + t175 * t55 + t177 * t57 + t289 * t77, -t100 * t128 - t117 * t119 - t157 * t53 - t175 * t48 + t317, t100 * t127 + t116 * t119 - t177 * t48 - t289 * t53 - t318, t100 * t53 + t105 * t77 + t109 * t76 + t119 * t48 + t136 * t57 + t137 * t55, t133 * t243 + t62 * t304 (-t131 * t219 + t133 * t223) * t128 + (-t219 * t63 + t316 + (-t131 * t223 - t133 * t219) * qJD(5)) * t175, -t127 * t133 - t175 * t302 + t177 * t62 + t243 * t346, -t175 * t111 + t127 * t131 - t177 * t63 - t242 * t346, -t127 * t346 - t92 (-t219 * t40 + t50) * t346 - (-t219 * t95 + t104) * t116 + t266 * t177 - t33 * t127 + t51 * t131 + t108 * t63 + (-t128 * t79 - t175 * t41) * t223 + (-t34 * t177 + t79 * t304 - t312 * t346) * qJD(5), t108 * t62 + t312 * t116 + t34 * t127 + t51 * t133 + t339 * t175 - t246 * t177 - t245 * t346 + t79 * t310, t114 * t13 - t22 * t249, t113 * t13 + t114 * t228 - t22 * t72 + t23 * t249, -t114 * t116 + t127 * t249 + t13 * t177 + t145 * t22, -t113 * t116 + t127 * t72 - t145 * t23 + t177 * t228, -t127 * t145 - t92 (-t218 * t7 + t222 * t6) * t145 - (-t218 * t46 + t222 * t36) * t116 + t276 * t177 - t8 * t127 + t27 * t72 - t80 * t228 - t17 * t113 + t54 * t23 + ((-t218 * t36 - t222 * t46) * t145 - t9 * t177) * qJD(6), t17 * t114 + t9 * t127 + t80 * t13 + t19 * t177 + t54 * t22 - t27 * t249 + (-(-qJD(6) * t46 + t6) * t145 + t36 * t116 - t3 * t177) * t218 + (-(qJD(6) * t36 + t7) * t145 + t46 * t116 - t269 * t177) * t222; 0, 0, 0, -t221 * t299, t290 * t227, 0, 0, 0, t227 * pkin(1) * t221, pkin(1) * t299, t307, t96, t81, 0, 0, t122 * t214 + (-t157 * t288 - t214 * t287) * pkin(2) + t236, t123 * t214 + (-t214 * t271 - t288 * t289) * pkin(2) + t235, -t116 * t205 - t117 * t202 + (-t109 + t257) * t289 + (t105 + t292) * t157, t106 * t157 + t214 * t257 + t237, t106 * t289 - t292 * t214 + t233, -t100 * t106 + t257 * t105 + t292 * t109 - t202 * t55 + t205 * t57, t25, t10, t29, t30, t308, -t201 * t111 + t202 * t63 + t314 * t131 + ((-qJD(5) * t201 + t78) * t219 + t338) * t346 + t250, t202 * t62 + (-t201 * t285 + t323) * t346 + t314 * t133 + (t201 * t116 - t278 * t346 - t265) * t219 + t268, t5, t1, t11, t12, t309 -(-t166 * t218 + t167 * t222) * t116 - t187 * t228 + t315 * t72 + (t218 * t254 - t222 * t255) * t145 + t239 (t166 * t222 + t167 * t218) * t116 + t187 * t13 - t315 * t249 + (t218 * t255 + t222 * t254) * t145 + t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, t96, t81, 0, 0, t236 + t311, -t120 * t214 + t235, pkin(3) * t116 - qJ(4) * t117 + (-t109 - t121) * t289 + (t105 - t281) * t157, t118 * t157 + t237 - t311, t118 * t289 + t281 * t214 + t233, -pkin(3) * t57 - qJ(4) * t55 - t100 * t118 - t105 * t121 - t281 * t109, t25, t10, t29, t30, t308, t223 * t298 + qJ(4) * t63 + (t219 * t348 - t85) * t346 + t295 * t131 + t250, qJ(4) * t62 + (t223 * t284 + t322) * t346 + t295 * t133 + (-t265 - t298) * t219 + t268, t5, t1, t11, t12, t309 -(-t185 * t218 + t186 * t222) * t116 - t203 * t228 + t313 * t72 + (t218 * t252 - t222 * t253) * t145 + t239 (t185 * t222 + t186 * t218) * t116 + t203 * t13 - t313 * t249 + (t218 * t253 + t222 * t252) * t145 + t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t307, -t214 ^ 2 - t333, t109 * t214 + t237, 0, 0, 0, 0, 0, -t131 * t214 + t244, -t133 * t214 + t231, 0, 0, 0, 0, 0, -t214 * t72 + t350, t214 * t249 + t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133 * t131, -t131 ^ 2 + t133 ^ 2, t62 + t351, t112 + (-qJD(5) + t346) * t133, -t116, -t133 * t79 + t34 * t346 + t229, t131 * t79 + t33 * t346 - t246, -t349, t345, t343, t341, -t116 -(-t20 * t218 - t319) * t145 + (-t222 * t116 - t133 * t72 - t145 * t283) * pkin(5) + t342 (-t145 * t21 - t3) * t218 + (t145 * t20 - t269) * t222 + (t218 * t116 + t133 * t249 - t145 * t282) * pkin(5) + t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t349, t345, t343, t341, -t116, t145 * t9 + t342, t145 * t8 - t218 * t3 - t222 * t269 + t344;];
tauc_reg  = t2;
