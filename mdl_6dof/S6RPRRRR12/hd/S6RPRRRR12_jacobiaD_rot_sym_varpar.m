% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RPRRRR12
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RPRRRR12_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 09:16
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RPRRRR12_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR12_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR12_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RPRRRR12_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RPRRRR12_jacobiaD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:46
	% EndTime: 2019-10-10 09:15:46
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:46
	% EndTime: 2019-10-10 09:15:46
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:46
	% EndTime: 2019-10-10 09:15:46
	% DurationCPUTime: 0.33s
	% Computational Cost: add. (137->30), mult. (614->95), div. (108->12), fcn. (792->9), ass. (0->49)
	t86 = sin(pkin(6));
	t79 = t86 ^ 2;
	t88 = cos(pkin(6));
	t81 = 0.1e1 / t88 ^ 2;
	t90 = cos(qJ(1));
	t84 = t90 ^ 2;
	t77 = t79 * t81 * t84 + 0.1e1;
	t89 = sin(qJ(1));
	t83 = t89 ^ 2;
	t108 = 0.1e1 / t77 ^ 2 * t83;
	t112 = t108 * t81;
	t103 = t90 * t86;
	t76 = atan2(t103, t88);
	t72 = sin(t76);
	t73 = cos(t76);
	t58 = t72 * t103 + t73 * t88;
	t55 = 0.1e1 / t58;
	t85 = sin(pkin(14));
	t105 = t89 * t85;
	t87 = cos(pkin(14));
	t99 = t88 * t105 - t87 * t90;
	t65 = 0.1e1 / t99;
	t80 = 0.1e1 / t88;
	t56 = 0.1e1 / t58 ^ 2;
	t66 = 0.1e1 / t99 ^ 2;
	t111 = t56 * t89;
	t104 = t89 * t87;
	t70 = t88 * t104 + t85 * t90;
	t110 = t66 * t70;
	t106 = t88 * t90;
	t69 = -t85 * t106 - t104;
	t109 = t69 * t70;
	t107 = t79 * t80;
	t102 = qJD(1) * t90;
	t74 = 0.1e1 / t77;
	t101 = (t74 - 0.1e1) * t86;
	t100 = -0.2e1 * t80 * t112;
	t68 = t87 * t106 - t105;
	t51 = (-t73 * t74 * t90 * t107 + t72 * t101) * t89;
	t78 = t86 * t79;
	t67 = t65 * t66;
	t64 = t70 ^ 2;
	t63 = t69 * qJD(1);
	t62 = t68 * qJD(1);
	t61 = t64 * t66 + 0.1e1;
	t57 = t55 * t56;
	t54 = t56 * t79 * t83 + 0.1e1;
	t50 = qJD(1) * t51;
	t1 = [(-t74 * t80 * t86 + t78 * t100) * t102, 0, 0, 0, 0, 0; (0.2e1 * (t51 * t111 - t55 * t90) / t54 ^ 2 * (-t50 * t57 * t83 + t102 * t111) * t79 + ((0.2e1 * t51 * t57 * t89 - t56 * t90) * t50 + (-t89 * t55 + ((-t51 + (-t78 * t112 - t101) * t89 * t72) * t90 - (t84 * t79 ^ 2 * t100 + (-t108 + (0.2e1 * t83 - t84) * t74) * t107) * t89 * t73) * t56) * qJD(1)) / t54) * t86, 0, 0, 0, 0, 0; 0.2e1 * (t66 * t109 + t65 * t68) / t61 ^ 2 * (t63 * t64 * t67 + t62 * t110) + (-t69 * t62 * t66 + (-0.2e1 * t67 * t109 - t68 * t66) * t63 + (-t99 * t110 + t70 * t65) * qJD(1)) / t61, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:46
	% EndTime: 2019-10-10 09:15:47
	% DurationCPUTime: 0.60s
	% Computational Cost: add. (994->58), mult. (3107->139), div. (132->12), fcn. (4021->13), ass. (0->80)
	t183 = sin(pkin(7));
	t184 = sin(pkin(6));
	t185 = cos(pkin(14));
	t186 = cos(pkin(7));
	t187 = cos(pkin(6));
	t173 = -t184 * t185 * t183 + t187 * t186;
	t191 = cos(qJ(1));
	t211 = t191 * t185;
	t182 = sin(pkin(14));
	t189 = sin(qJ(1));
	t214 = t189 * t182;
	t174 = -t187 * t211 + t214;
	t216 = t184 * t191;
	t204 = -t174 * t183 + t186 * t216;
	t157 = atan2(t204, t173);
	t152 = sin(t157);
	t153 = cos(t157);
	t138 = t152 * t204 + t153 * t173;
	t135 = 0.1e1 / t138;
	t188 = sin(qJ(3));
	t190 = cos(qJ(3));
	t200 = t187 * t214 - t211;
	t212 = t191 * t182;
	t213 = t189 * t185;
	t201 = t187 * t213 + t212;
	t217 = t184 * t189;
	t209 = t183 * t217;
	t202 = -t186 * t201 + t209;
	t151 = t202 * t188 - t190 * t200;
	t145 = 0.1e1 / t151;
	t230 = t204 ^ 2;
	t170 = 0.1e1 / t173;
	t136 = 0.1e1 / t138 ^ 2;
	t146 = 0.1e1 / t151 ^ 2;
	t171 = 0.1e1 / t173 ^ 2;
	t229 = -0.2e1 * t170 * t171;
	t175 = -t187 * t212 - t213;
	t167 = t175 * qJD(1);
	t166 = t174 * qJD(1);
	t210 = qJD(1) * t184;
	t206 = t191 * t210;
	t199 = t166 * t186 + t183 * t206;
	t139 = t151 * qJD(3) + t167 * t188 - t199 * t190;
	t215 = t186 * t190;
	t218 = t200 * t188;
	t150 = -t190 * t209 + t201 * t215 - t218;
	t144 = t150 ^ 2;
	t143 = t144 * t146 + 0.1e1;
	t225 = t146 * t150;
	t140 = t167 * t190 + t199 * t188 + (t202 * t190 + t218) * qJD(3);
	t226 = t140 * t145 * t146;
	t228 = (t139 * t225 - t144 * t226) / t143 ^ 2;
	t168 = t201 * qJD(1);
	t207 = t189 * t210;
	t159 = -t168 * t183 - t186 * t207;
	t156 = t230 * t171 + 0.1e1;
	t154 = 0.1e1 / t156;
	t198 = t152 + (t153 * t170 * t204 - t152) * t154;
	t130 = t198 * t159;
	t227 = t130 * t135 * t136;
	t208 = t183 * t216;
	t203 = t174 * t186 + t208;
	t149 = t175 * t190 + t203 * t188;
	t224 = t149 * t150;
	t223 = t154 * t170;
	t155 = 0.1e1 / t156 ^ 2;
	t222 = t155 * t204;
	t158 = t166 * t183 - t186 * t206;
	t221 = t158 * t136;
	t163 = -t183 * t201 - t186 * t217;
	t220 = t159 * t163;
	t219 = t175 * t188;
	t205 = t183 * t207;
	t169 = t200 * qJD(1);
	t160 = t163 ^ 2;
	t148 = -t203 * t190 + t219;
	t141 = 0.1e1 / t143;
	t134 = t160 * t136 + 0.1e1;
	t131 = t198 * t163;
	t1 = [t220 * t222 * t229 + t158 * t223, 0, 0, 0, 0, 0; 0.2e1 * (-t131 * t136 * t163 - t135 * t204) / t134 ^ 2 * (-t160 * t227 + t163 * t221) + (t159 * t135 + (-t130 * t204 + t131 * t158) * t136 + (-0.2e1 * t131 * t227 + t198 * t221 + (t152 * t171 * t222 + (0.2e1 * t223 + (t230 * t229 - t170) * t155) * t153) * t136 * t220) * t163) / t134, 0, 0, 0, 0, 0; 0.2e1 * (-t145 * t148 + t146 * t224) * t228 + ((-t168 * t215 + t169 * t188 + t190 * t205) * t145 + 0.2e1 * t224 * t226 + (-t148 * t140 - (t169 * t190 + (t168 * t186 - t205) * t188) * t150 - t149 * t139) * t146 + (t149 * t145 - (t174 * t215 + t190 * t208 - t219) * t225) * qJD(3)) * t141, 0, -0.2e1 * t228 + 0.2e1 * (t139 * t146 * t141 + (-t141 * t226 - t146 * t228) * t150) * t150, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:47
	% EndTime: 2019-10-10 09:15:50
	% DurationCPUTime: 2.82s
	% Computational Cost: add. (7906->122), mult. (24067->265), div. (442->12), fcn. (30860->17), ass. (0->135)
	t327 = sin(pkin(14));
	t331 = cos(pkin(14));
	t336 = sin(qJ(1));
	t395 = t336 * t331;
	t333 = cos(pkin(6));
	t339 = cos(qJ(1));
	t396 = t333 * t339;
	t320 = t327 * t396 + t395;
	t335 = sin(qJ(3));
	t338 = cos(qJ(3));
	t329 = sin(pkin(7));
	t332 = cos(pkin(7));
	t330 = sin(pkin(6));
	t398 = t330 * t339;
	t325 = t336 * t327;
	t430 = -t331 * t396 + t325;
	t353 = t329 * t398 + t430 * t332;
	t443 = -t320 * t338 + t353 * t335;
	t382 = t333 * t325;
	t394 = qJD(1) * t339;
	t319 = -qJD(1) * t382 + t331 * t394;
	t442 = -qJD(3) * t443 + t319 * t335;
	t301 = t320 * t335 + t353 * t338;
	t314 = -t329 * t430 + t332 * t398;
	t328 = sin(pkin(8));
	t424 = cos(pkin(8));
	t440 = -t301 * t328 + t314 * t424;
	t363 = t327 * t339 + t333 * t395;
	t399 = t330 * t336;
	t350 = t329 * t399 - t363 * t332;
	t321 = t331 * t339 - t382;
	t402 = t321 * t335;
	t303 = t350 * t338 - t402;
	t337 = cos(qJ(4));
	t351 = -t363 * t329 - t332 * t399;
	t348 = t351 * t328;
	t377 = t337 * t424;
	t304 = t321 * t338 + t350 * t335;
	t334 = sin(qJ(4));
	t408 = t304 * t334;
	t274 = -t303 * t377 + t337 * t348 + t408;
	t268 = t274 ^ 2;
	t346 = t303 * t424 - t348;
	t275 = t304 * t337 + t346 * t334;
	t270 = 0.1e1 / t275 ^ 2;
	t265 = t268 * t270 + 0.1e1;
	t263 = 0.1e1 / t265;
	t317 = t320 * qJD(1);
	t316 = t430 * qJD(1);
	t378 = t330 * t394;
	t358 = t316 * t332 + t329 * t378;
	t283 = -qJD(3) * t402 + t358 * t335 + (t350 * qJD(3) - t317) * t338;
	t282 = -t304 * qJD(3) + t317 * t335 + t358 * t338;
	t359 = -t316 * t329 + t332 * t378;
	t347 = t282 * t424 + t359 * t328;
	t262 = t283 * t337 + t347 * t334 + (t346 * t337 - t408) * qJD(4);
	t269 = 0.1e1 / t275;
	t418 = t262 * t269 * t270;
	t261 = t275 * qJD(4) + t283 * t334 - t347 * t337;
	t414 = t270 * t274;
	t421 = (t261 * t414 - t268 * t418) / t265 ^ 2;
	t438 = t263 * t418 + t270 * t421;
	t425 = 0.2e1 * t274;
	t318 = t363 * qJD(1);
	t379 = qJD(1) * t399;
	t357 = t318 * t329 + t332 * t379;
	t437 = t357 * t424;
	t372 = t329 * t379;
	t356 = t318 * t332 - t372;
	t435 = (t320 * qJD(3) + t356) * t335 + (t353 * qJD(3) - t319) * t338;
	t397 = t332 * t338;
	t267 = -t437 + (-t318 * t397 + t338 * t372 - t442) * t328;
	t289 = t440 ^ 2;
	t400 = t329 * t333;
	t428 = (-t327 * t335 + t331 * t397) * t330 + t338 * t400;
	t299 = -t428 * t328 + (-t329 * t330 * t331 + t332 * t333) * t424;
	t297 = 0.1e1 / t299 ^ 2;
	t280 = t289 * t297 + 0.1e1;
	t296 = 0.1e1 / t299;
	t298 = t296 * t297;
	t313 = -t335 * t400 + (-t331 * t332 * t335 - t327 * t338) * t330;
	t309 = t313 * qJD(3);
	t406 = t309 * t328;
	t420 = (t267 * t297 * t440 + t289 * t298 * t406) / t280 ^ 2;
	t434 = -0.2e1 * t420;
	t410 = t440 * t313;
	t432 = t328 * (t296 * t443 + t297 * t410);
	t391 = -0.2e1 * t421;
	t416 = t263 * t270;
	t429 = -t262 * t416 + t269 * t391;
	t361 = t424 * t301 + t314 * t328;
	t427 = -t334 * t443 + t361 * t337;
	t389 = t261 * t416;
	t417 = t263 * t269;
	t426 = qJD(4) * t417 + t438 * t425 - t389;
	t281 = atan2(t440, t299);
	t276 = sin(t281);
	t277 = cos(t281);
	t260 = t276 * t440 + t277 * t299;
	t257 = 0.1e1 / t260;
	t258 = 0.1e1 / t260 ^ 2;
	t293 = t303 * t328 + t351 * t424;
	t290 = t293 ^ 2;
	t255 = t258 * t290 + 0.1e1;
	t266 = t282 * t328 - t359 * t424;
	t415 = t266 * t258;
	t278 = 0.1e1 / t280;
	t385 = t297 * t406;
	t360 = t267 * t296 + t385 * t440;
	t251 = t360 * t278;
	t368 = -t276 * t299 + t277 * t440;
	t247 = t368 * t251 + t276 * t267 - t277 * t406;
	t422 = t247 * t257 * t258;
	t423 = (-t290 * t422 + t293 * t415) / t255 ^ 2;
	t419 = t258 * t293;
	t413 = t276 * t293;
	t412 = t277 * t293;
	t411 = t440 * t296;
	t407 = t309 * t328 ^ 2;
	t393 = -0.2e1 * t423;
	t392 = -0.2e1 * t422;
	t387 = t263 * t414;
	t376 = t424 * t283;
	t374 = t296 * t434;
	t285 = t356 * t338 + t442;
	t362 = t424 * t285 - t328 * t357;
	t355 = -t303 * t334 - t304 * t377;
	t354 = t276 + (t277 * t411 - t276) * t278;
	t308 = t428 * qJD(3);
	t253 = 0.1e1 / t255;
	t252 = t278 * t432;
	t250 = t354 * t293;
	t248 = (t276 * t443 - t277 * t313) * t328 + t368 * t252;
	t246 = t432 * t434 + (0.2e1 * t298 * t407 * t410 + t435 * t296 * t328 + (t443 * t407 + (t267 * t313 - t308 * t440) * t328) * t297) * t278;
	t1 = [t293 * t374 + (t266 * t296 + t293 * t385) * t278, 0, t246, 0, 0, 0; t440 * t257 * t393 + ((-t285 * t328 - t437) * t257 + (-t247 * t440 + t250 * t266) * t258) * t253 + ((t250 * t392 + t354 * t415) * t253 + (t250 * t393 + ((-t251 * t278 * t411 + 0.2e1 * t420) * t413 + (t440 * t374 + t251 + (-t251 + t360) * t278) * t412) * t253) * t258) * t293, 0, 0.2e1 * (-t257 * t304 * t328 - t248 * t419) * t423 + ((t368 * t246 + (-t260 * t251 + t267 * t277) * t252) * t419 + (t293 * t392 + t415) * t248 + (t283 * t257 + (-t304 * t247 + (t251 * t443 + t308) * t412 + (t251 * t313 + t252 * t309 + t435) * t413) * t258) * t328) * t253, 0, 0, 0; (t334 * t435 - t362 * t337) * t417 - (t427 * qJD(4) + t362 * t334 + t337 * t435) * t387 - t429 * t427 + t426 * (t361 * t334 + t337 * t443), 0, (t282 * t334 + t337 * t376) * t417 - (t355 * qJD(4) + t282 * t337 - t334 * t376) * t387 - t429 * t355 + t426 * (t303 * t337 - t424 * t408), t391 + (-t438 * t274 + t389) * t425, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:48
	% EndTime: 2019-10-10 09:15:55
	% DurationCPUTime: 7.00s
	% Computational Cost: add. (23019->195), mult. (70693->359), div. (705->12), fcn. (90087->19), ass. (0->173)
	t460 = sin(qJ(3));
	t578 = sin(pkin(14));
	t584 = cos(pkin(6));
	t532 = t584 * t578;
	t582 = cos(pkin(14));
	t585 = sin(qJ(1));
	t588 = cos(qJ(1));
	t501 = t588 * t532 + t585 * t582;
	t580 = sin(pkin(7));
	t581 = sin(pkin(6));
	t530 = t581 * t580;
	t519 = t588 * t530;
	t587 = cos(qJ(3));
	t510 = t587 * t519;
	t583 = cos(pkin(7));
	t534 = t584 * t582;
	t600 = -t588 * t534 + t585 * t578;
	t601 = t600 * t583;
	t434 = t501 * t460 + t587 * t601 + t510;
	t503 = -t585 * t532 + t588 * t582;
	t450 = t503 * qJD(1);
	t515 = t585 * t530;
	t502 = t585 * t534 + t588 * t578;
	t449 = t502 * qJD(1);
	t547 = t449 * t583;
	t417 = -t450 * t587 + (-qJD(1) * t515 + t547) * t460 + t434 * qJD(3);
	t457 = cos(pkin(8));
	t459 = sin(qJ(4));
	t531 = t583 * t581;
	t516 = t585 * t531;
	t504 = qJD(1) * t516 + t449 * t580;
	t579 = sin(pkin(8));
	t490 = t504 * t579;
	t586 = cos(qJ(4));
	t435 = (t601 + t519) * t460 - t501 * t587;
	t509 = t587 * t515;
	t597 = qJD(1) * t509 + t435 * qJD(3) - t450 * t460 - t587 * t547;
	t618 = -t417 * t586 + (t597 * t457 + t490) * t459;
	t592 = -t588 * t531 + t580 * t600;
	t483 = t592 * t579;
	t409 = t435 * t586 + (t434 * t457 - t483) * t459;
	t550 = t457 * t586;
	t617 = -t409 * qJD(4) - t417 * t459 - t597 * t550;
	t612 = t435 * t459;
	t609 = t582 * t531 + t584 * t580;
	t489 = t502 * t583;
	t436 = t503 * t587 + (-t489 + t515) * t460;
	t474 = t503 * t460 + t587 * t489 - t509;
	t482 = t502 * t580 + t516;
	t480 = t482 * t579;
	t411 = t436 * t586 + (-t474 * t457 + t480) * t459;
	t428 = t482 * t457 + t474 * t579;
	t458 = sin(qJ(5));
	t461 = cos(qJ(5));
	t388 = t411 * t458 - t428 * t461;
	t608 = 0.2e1 * t388;
	t475 = t434 * t586;
	t405 = t457 * t475 - t586 * t483 - t612;
	t403 = t405 ^ 2;
	t529 = t581 * t578;
	t445 = t609 * t460 + t587 * t529;
	t451 = -t582 * t530 + t584 * t583;
	t538 = t586 * t579;
	t444 = -t460 * t529 + t609 * t587;
	t549 = t586 * t444;
	t497 = -t445 * t459 + t451 * t538 + t457 * t549;
	t422 = 0.1e1 / t497 ^ 2;
	t394 = t403 * t422 + 0.1e1;
	t392 = 0.1e1 / t394;
	t377 = -t586 * t490 + t617;
	t425 = t445 * t586 + (t444 * t457 + t579 * t451) * t459;
	t441 = t444 * qJD(3);
	t442 = t445 * qJD(3);
	t398 = t425 * qJD(4) + t441 * t459 + t442 * t550;
	t421 = 0.1e1 / t497;
	t565 = t405 * t422;
	t526 = t377 * t421 + t398 * t565;
	t359 = t526 * t392;
	t395 = atan2(-t405, -t497);
	t390 = sin(t395);
	t391 = cos(t395);
	t528 = t390 * t497 - t391 * t405;
	t354 = t528 * t359 - t390 * t377 + t391 * t398;
	t371 = -t390 * t405 - t391 * t497;
	t369 = 0.1e1 / t371 ^ 2;
	t604 = t354 * t369;
	t603 = t398 * t422;
	t448 = t501 * qJD(1);
	t488 = qJD(1) * t601;
	t470 = -qJD(1) * t510 + t436 * qJD(3) - t448 * t460 - t587 * t488;
	t472 = t474 * t586;
	t599 = -qJD(4) * t472 - t470 * t459;
	t598 = -t436 * t550 + t474 * t459;
	t478 = t586 * t480;
	t564 = t436 * t459;
	t410 = t457 * t472 - t478 + t564;
	t404 = t410 ^ 2;
	t365 = t369 * t404 + 0.1e1;
	t363 = 0.1e1 / t365;
	t368 = 0.1e1 / t371;
	t414 = -t448 * t587 + (qJD(1) * t519 + t488) * t460 - t474 * qJD(3);
	t468 = t470 * t586;
	t481 = qJD(1) * t592;
	t479 = t579 * t481;
	t375 = t411 * qJD(4) + t414 * t459 + t457 * t468 + t586 * t479;
	t569 = t375 * t369;
	t576 = t368 * t604;
	t577 = (-t404 * t576 + t410 * t569) / t365 ^ 2;
	t596 = -t363 * t604 - 0.2e1 * t368 * t577;
	t589 = 0.2e1 * t410;
	t543 = t576 * t589;
	t560 = 0.2e1 * t577;
	t571 = t369 * t410;
	t595 = t560 * t571 + (t543 - t569) * t363;
	t389 = t411 * t461 + t428 * t458;
	t383 = 0.1e1 / t389;
	t384 = 0.1e1 / t389 ^ 2;
	t590 = -0.2e1 * t405;
	t548 = qJD(4) * t564;
	t376 = qJD(4) * t478 + t414 * t586 + t599 * t457 - t459 * t479 - t548;
	t400 = -t457 * t481 + t470 * t579;
	t366 = t389 * qJD(5) + t376 * t458 - t400 * t461;
	t382 = t388 ^ 2;
	t374 = t382 * t384 + 0.1e1;
	t568 = t384 * t388;
	t561 = qJD(5) * t388;
	t367 = t376 * t461 + t400 * t458 - t561;
	t572 = t367 * t383 * t384;
	t575 = (t366 * t568 - t382 * t572) / t374 ^ 2;
	t567 = t421 * t603;
	t574 = (t377 * t565 + t403 * t567) / t394 ^ 2;
	t573 = t363 * t368;
	t372 = 0.1e1 / t374;
	t570 = t372 * t384;
	t566 = t405 * t421;
	t563 = t457 * t459;
	t559 = -0.2e1 * t575;
	t558 = -0.2e1 * t574;
	t556 = t384 * t575;
	t555 = t421 * t574;
	t553 = t363 * t571;
	t552 = t366 * t570;
	t551 = t388 * t572;
	t546 = t458 * t579;
	t545 = t461 * t579;
	t542 = 0.2e1 * t551;
	t541 = t567 * t590;
	t427 = -t434 * t579 - t457 * t592;
	t387 = t409 * t461 + t427 * t458;
	t386 = t409 * t458 - t427 * t461;
	t525 = -t458 * t383 + t461 * t568;
	t524 = -t409 * t421 + t425 * t565;
	t418 = -t434 * t459 - t435 * t550;
	t429 = t444 * t459 + t445 * t550;
	t523 = t418 * t421 + t429 * t565;
	t420 = -t436 * t563 - t472;
	t397 = t420 * t461 + t436 * t546;
	t513 = -t420 * t458 + t436 * t545;
	t512 = -t390 + (-t391 * t566 + t390) * t392;
	t498 = t434 * t550 - t538 * t592 - t612;
	t402 = t441 * t550 - t442 * t459 + (-t445 * t563 + t549) * qJD(4);
	t401 = -t457 * t504 + t579 * t597;
	t399 = t497 * qJD(4) + t441 * t586 - t442 * t563;
	t381 = -t417 * t550 + (t435 * t563 - t475) * qJD(4) + t597 * t459;
	t380 = t598 * qJD(4) - t414 * t563 - t468;
	t379 = t498 * qJD(4) - t618;
	t378 = -t405 * qJD(4) + t618;
	t362 = t523 * t392;
	t361 = t524 * t392;
	t355 = t528 * t361 + t390 * t409 + t391 * t425;
	t353 = t523 * t558 + (-t429 * t541 + t381 * t421 + (t377 * t429 + t398 * t418 + t402 * t405) * t422) * t392;
	t351 = t524 * t558 + (-t425 * t541 + t378 * t421 + (t377 * t425 - t398 * t409 + t399 * t405) * t422) * t392;
	t1 = [-t555 * t589 + (t375 * t421 + t410 * t603) * t392, 0, t353, t351, 0, 0; (t504 * t538 - t617) * t573 - (t512 * t375 + ((t359 * t392 * t566 + t558) * t390 + (-t555 * t590 - t359 + (t359 - t526) * t392) * t391) * t410) * t553 - t596 * t498 + t595 * t512 * t410, 0, (t414 * t550 - t457 * t548 + t599) * t573 - ((-t353 * t405 - t362 * t377 + t402 + (t362 * t497 - t418) * t359) * t391 + (t353 * t497 - t362 * t398 - t381 + (t362 * t405 - t429) * t359) * t390) * t553 - t596 * t598 + t595 * (t528 * t362 - t390 * t418 + t391 * t429), (t355 * t571 - t368 * t411) * t560 + (t355 * t543 + t376 * t368 + (-t411 * t354 - t355 * t375 + (-(-t351 * t405 - t361 * t377 + t399 + (t361 * t497 + t409) * t359) * t391 - (t351 * t497 - t361 * t398 - t378 + (t361 * t405 - t425) * t359) * t390) * t410) * t369) * t363, 0, 0; 0.2e1 * (-t383 * t386 + t387 * t568) * t575 + ((t387 * qJD(5) + t379 * t458 - t401 * t461) * t383 + t387 * t542 + (-t386 * t367 - (-t386 * qJD(5) + t379 * t461 + t401 * t458) * t388 - t387 * t366) * t384) * t372, 0, (t556 * t608 - t552) * t397 - (-t367 * t570 + t383 * t559) * t513 + ((t397 * qJD(5) + t380 * t458 - t414 * t545) * t383 - (t513 * qJD(5) + t380 * t461 + t414 * t546) * t568 + t397 * t542) * t372, t525 * t410 * t559 + (t525 * t375 + ((-qJD(5) * t383 - 0.2e1 * t551) * t461 + (t366 * t461 + (t367 - t561) * t458) * t384) * t410) * t372, t559 + (t552 + (-t372 * t572 - t556) * t388) * t608, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:15:51
	% EndTime: 2019-10-10 09:16:02
	% DurationCPUTime: 12.21s
	% Computational Cost: add. (54698->282), mult. (164092->508), div. (983->12), fcn. (210779->21), ass. (0->223)
	t728 = sin(pkin(14));
	t735 = cos(pkin(6));
	t679 = t735 * t728;
	t732 = cos(pkin(14));
	t736 = sin(qJ(1));
	t738 = cos(qJ(1));
	t646 = -t736 * t679 + t738 * t732;
	t586 = t646 * qJD(1);
	t597 = sin(qJ(3));
	t730 = sin(pkin(7));
	t731 = sin(pkin(6));
	t677 = t731 * t730;
	t661 = t736 * t677;
	t737 = cos(qJ(3));
	t651 = t737 * t661;
	t665 = t738 * t677;
	t681 = t735 * t732;
	t645 = t736 * t681 + t738 * t728;
	t585 = t645 * qJD(1);
	t734 = cos(pkin(7));
	t694 = t585 * t734;
	t746 = -t738 * t681 + t736 * t728;
	t748 = t746 * t734;
	t644 = t738 * t679 + t736 * t732;
	t749 = t644 * t737;
	t616 = qJD(1) * t651 + (-t749 + (t748 + t665) * t597) * qJD(3) - t586 * t597 - t737 * t694;
	t678 = t734 * t731;
	t662 = t736 * t678;
	t647 = qJD(1) * t662 + t585 * t730;
	t729 = sin(pkin(8));
	t733 = cos(pkin(8));
	t541 = t616 * t729 - t647 * t733;
	t595 = sin(qJ(5));
	t767 = t541 * t595;
	t599 = cos(qJ(5));
	t766 = t541 * t599;
	t596 = sin(qJ(4));
	t611 = t616 * t733 + t647 * t729;
	t765 = t611 * t596;
	t600 = cos(qJ(4));
	t764 = t611 * t600;
	t747 = t597 * t665 - t749;
	t573 = t597 * t748 + t747;
	t763 = t573 * t596;
	t762 = t573 * t600;
	t628 = -t738 * t678 + t730 * t746;
	t761 = t628 * t729;
	t760 = t628 * t733;
	t632 = t645 * t734;
	t620 = t646 * t597 + t737 * t632 - t651;
	t627 = t645 * t730 + t662;
	t759 = -t620 * t733 + t627 * t729;
	t758 = t732 * t678 + t735 * t730;
	t639 = t737 * t748;
	t574 = t646 * t737 + (-t632 + t661) * t597;
	t676 = t731 * t728;
	t581 = t758 * t597 + t737 * t676;
	t580 = -t597 * t676 + t758 * t737;
	t587 = -t732 * t677 + t735 * t734;
	t655 = t733 * t580 + t729 * t587;
	t563 = -t581 * t596 + t655 * t600;
	t577 = t580 * qJD(3);
	t578 = t581 * qJD(3);
	t690 = t733 * t578;
	t538 = t563 * qJD(4) + t577 * t600 - t596 * t690;
	t564 = t581 * t600 + t655 * t596;
	t570 = -t580 * t729 + t587 * t733;
	t546 = t564 * t599 + t570 * t595;
	t689 = t729 * t599;
	t516 = t546 * qJD(5) + t538 * t595 - t578 * t689;
	t545 = t564 * t595 - t570 * t599;
	t543 = 0.1e1 / t545 ^ 2;
	t752 = t516 * t543;
	t542 = 0.1e1 / t545;
	t652 = t737 * t665;
	t750 = t644 * t597;
	t742 = -t750 - t639;
	t622 = t652 - t742;
	t615 = -t622 * t733 + t761;
	t548 = t615 * t600 + t763;
	t549 = t615 * t596 - t762;
	t614 = t622 * t729 + t760;
	t527 = t549 * t595 - t614 * t599;
	t714 = t527 * t543;
	t669 = -t542 * t548 + t563 * t714;
	t751 = t595 * t669;
	t631 = qJD(1) * t748;
	t741 = -t750 - t652;
	t609 = t741 * qJD(1) + t574 * qJD(3) - t737 * t631;
	t626 = qJD(1) * t628;
	t745 = t609 * t733 + t729 * t626;
	t705 = qJD(4) * t574;
	t744 = -t733 * t705 - t609;
	t743 = t759 * t600;
	t572 = t639 - t741;
	t656 = t733 * t572 - t761;
	t739 = t656 * t600 - t763;
	t515 = atan2(-t527, t545);
	t506 = sin(t515);
	t507 = cos(t515);
	t485 = -t506 * t527 + t507 * t545;
	t482 = 0.1e1 / t485;
	t553 = t574 * t600 + t759 * t596;
	t613 = t620 * t729 + t627 * t733;
	t533 = t553 * t599 + t613 * t595;
	t552 = t574 * t596 - t743;
	t594 = sin(qJ(6));
	t598 = cos(qJ(6));
	t511 = t533 * t598 + t552 * t594;
	t503 = 0.1e1 / t511;
	t483 = 0.1e1 / t485 ^ 2;
	t504 = 0.1e1 / t511 ^ 2;
	t612 = t613 * t599;
	t532 = t553 * t595 - t612;
	t526 = t532 ^ 2;
	t481 = t483 * t526 + 0.1e1;
	t555 = t747 * qJD(1) - t620 * qJD(3) + t597 * t631;
	t497 = t555 * t600 + t743 * qJD(4) + (-t705 - t745) * t596;
	t607 = t609 * t729 - t733 * t626;
	t486 = t533 * qJD(5) + t497 * t595 - t607 * t599;
	t720 = t486 * t483;
	t525 = t527 ^ 2;
	t514 = t525 * t543 + 0.1e1;
	t512 = 0.1e1 / t514;
	t642 = qJD(1) * t661 - t694;
	t683 = qJD(3) * t652 - t586 * t737;
	t556 = t742 * qJD(3) + t642 * t597 - t683;
	t499 = t548 * qJD(4) + t556 * t600 + t765;
	t529 = t549 * t599 + t614 * t595;
	t488 = t529 * qJD(5) + t499 * t595 + t766;
	t673 = -t488 * t542 + t516 * t714;
	t472 = t673 * t512;
	t675 = -t506 * t545 - t507 * t527;
	t466 = t675 * t472 - t488 * t506 + t507 * t516;
	t484 = t482 * t483;
	t726 = t466 * t484;
	t727 = 0.2e1 * (-t526 * t726 + t532 * t720) / t481 ^ 2;
	t704 = qJD(5) * t595;
	t487 = qJD(5) * t612 + t497 * t599 - t553 * t704 + t607 * t595;
	t496 = t553 * qJD(4) + t555 * t596 + t745 * t600;
	t475 = t511 * qJD(6) + t487 * t594 - t496 * t598;
	t510 = t533 * t594 - t552 * t598;
	t502 = t510 ^ 2;
	t493 = t502 * t504 + 0.1e1;
	t719 = t504 * t510;
	t702 = qJD(6) * t510;
	t476 = t487 * t598 + t496 * t594 - t702;
	t722 = t476 * t503 * t504;
	t724 = 0.2e1 * (t475 * t719 - t502 * t722) / t493 ^ 2;
	t716 = t542 * t752;
	t723 = 0.2e1 * (t488 * t714 - t525 * t716) / t514 ^ 2;
	t721 = t483 * t532;
	t718 = t506 * t532;
	t717 = t507 * t532;
	t715 = t527 * t542;
	t713 = t552 * t595;
	t712 = t552 * t599;
	t708 = t594 * t503;
	t707 = t598 * t510;
	t703 = qJD(5) * t599;
	t701 = 0.2e1 * t484 * t532;
	t700 = t482 * t727;
	t699 = t483 * t727;
	t698 = t542 * t723;
	t697 = t483 * t718;
	t696 = t483 * t717;
	t695 = t510 * t722;
	t693 = t595 * t729;
	t692 = t596 * t733;
	t691 = t600 * t733;
	t688 = t466 * t701;
	t687 = 0.2e1 * t695;
	t686 = -0.2e1 * t527 * t716;
	t682 = qJD(6) * t712 + t497;
	t551 = t656 * t596 + t762;
	t567 = -t572 * t729 - t760;
	t531 = t551 * t599 + t567 * t595;
	t509 = t531 * t598 - t594 * t739;
	t508 = t531 * t594 + t598 * t739;
	t561 = -t574 * t692 - t620 * t600;
	t536 = t561 * t599 + t574 * t693;
	t560 = t574 * t691 - t620 * t596;
	t524 = t536 * t598 + t560 * t594;
	t523 = t536 * t594 - t560 * t598;
	t530 = t551 * t595 - t567 * t599;
	t672 = t504 * t707 - t708;
	t671 = -t529 * t542 + t546 * t714;
	t559 = t573 * t692 - t622 * t600;
	t534 = t559 * t595 + t573 * t689;
	t568 = t580 * t600 - t581 * t692;
	t562 = t568 * t595 - t581 * t689;
	t670 = -t534 * t542 + t562 * t714;
	t659 = -t561 * t595 + t574 * t689;
	t658 = -t506 + (t507 * t715 + t506) * t512;
	t653 = qJD(6) * t553 - t496 * t599 + t552 * t704;
	t619 = t620 * qJD(4);
	t558 = qJD(3) * t639 + (t644 * qJD(3) - t642) * t597 + t683;
	t537 = -t564 * qJD(4) - t577 * t596 - t600 * t690;
	t522 = (-t577 * t692 - t578 * t600 + (-t580 * t596 - t581 * t691) * qJD(4)) * t595 + t568 * t703 - t577 * t689 + t581 * qJD(5) * t693;
	t521 = t553 * t594 - t598 * t712;
	t520 = -t553 * t598 - t594 * t712;
	t519 = -t555 * t692 + t596 * t619 + t744 * t600;
	t518 = t555 * t691 + t744 * t596 - t600 * t619;
	t517 = -t545 * qJD(5) + t538 * t599 + t578 * t693;
	t501 = t739 * qJD(4) + t558 * t600 - t765;
	t500 = t551 * qJD(4) + t558 * t596 + t764;
	t498 = -t549 * qJD(4) - t556 * t596 + t764;
	t495 = (-t556 * t692 + (t573 * t691 + t622 * t596) * qJD(4) + t616 * t600) * t595 - t556 * t689 + (t559 * t599 - t573 * t693) * qJD(5);
	t494 = t659 * qJD(5) + t519 * t599 + t555 * t693;
	t491 = 0.1e1 / t493;
	t490 = -t530 * qJD(5) + t501 * t599 + t767;
	t489 = -t527 * qJD(5) + t499 * t599 - t767;
	t479 = 0.1e1 / t481;
	t478 = t512 * t751;
	t477 = t670 * t512;
	t474 = t671 * t512;
	t471 = t658 * t532;
	t469 = (-t506 * t548 + t507 * t563) * t595 + t675 * t478;
	t467 = t675 * t474 - t506 * t529 + t507 * t546;
	t465 = -t670 * t723 + (t562 * t686 - t495 * t542 + (t488 * t562 + t516 * t534 + t522 * t527) * t543) * t512;
	t463 = -t671 * t723 + (t546 * t686 - t489 * t542 + (t488 * t546 + t516 * t529 + t517 * t527) * t543) * t512;
	t462 = -t723 * t751 + (t669 * t703 + (t563 * t686 - t498 * t542 + (t488 * t563 + t516 * t548 + t527 * t537) * t543) * t595) * t512;
	t1 = [t532 * t698 + (-t486 * t542 + t532 * t752) * t512, 0, t465, t462, t463, 0; -t530 * t700 + ((t531 * qJD(5) + t501 * t595 - t766) * t482 + (-t530 * t466 - t471 * t486) * t483) * t479 + (t471 * t699 + (0.2e1 * t471 * t726 - (-t472 * t512 * t715 - t723) * t697 - (-t527 * t698 - t472 + (t472 - t673) * t512) * t696 - t658 * t720) * t479) * t532, 0, t659 * t700 + ((t536 * qJD(5) + t519 * t595 - t555 * t689) * t482 + t659 * t483 * t466 - ((-t465 * t527 - t477 * t488 + t522 + (-t477 * t545 - t534) * t472) * t507 + (-t465 * t545 - t477 * t516 - t495 + (t477 * t527 - t562) * t472) * t506) * t721) * t479 + (t532 * t699 + (-t720 + t688) * t479) * (t675 * t477 - t506 * t534 + t507 * t562), (t469 * t721 + t482 * t713) * t727 + (-t469 * t720 + (-t496 * t595 - t552 * t703) * t482 + (t469 * t701 + t483 * t713) * t466 - (t563 * t703 - t462 * t527 - t478 * t488 + t537 * t595 + (-t478 * t545 - t548 * t595) * t472) * t696 - (-t548 * t703 - t462 * t545 - t478 * t516 - t498 * t595 + (t478 * t527 - t563 * t595) * t472) * t697) * t479, (t467 * t721 - t482 * t533) * t727 + (t467 * t688 + t487 * t482 + (-t533 * t466 - t467 * t486 - (-t463 * t527 - t474 * t488 + t517 + (-t474 * t545 - t529) * t472) * t717 - (-t463 * t545 - t474 * t516 - t489 + (t474 * t527 - t546) * t472) * t718) * t483) * t479, 0; (-t503 * t508 + t509 * t719) * t724 + ((t509 * qJD(6) + t490 * t594 - t500 * t598) * t503 + t509 * t687 + (-t508 * t476 - (-t508 * qJD(6) + t490 * t598 + t500 * t594) * t510 - t509 * t475) * t504) * t491, 0, (-t503 * t523 + t524 * t719) * t724 + ((t524 * qJD(6) + t494 * t594 - t518 * t598) * t503 + t524 * t687 + (-t523 * t476 - (-t523 * qJD(6) + t494 * t598 + t518 * t594) * t510 - t524 * t475) * t504) * t491, (-t503 * t520 + t521 * t719) * t724 + (t521 * t687 - t682 * t503 * t598 + t653 * t708 + (-t682 * t510 * t594 - t521 * t475 - t520 * t476 - t653 * t707) * t504) * t491, -t672 * t532 * t724 + (t672 * t486 + ((-qJD(6) * t503 - 0.2e1 * t695) * t598 + (t475 * t598 + (t476 - t702) * t594) * t504) * t532) * t491, -t724 + (0.2e1 * t475 * t504 * t491 + (-0.2e1 * t491 * t722 - t504 * t724) * t510) * t510;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end