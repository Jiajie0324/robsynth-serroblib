% Calculate vector of inverse dynamics joint torques for
% S6RPRRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d3,d4,d5,d6,theta2]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRRR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [14x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RPRRRR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:01:41
% EndTime: 2019-03-09 08:02:27
% DurationCPUTime: 34.43s
% Computational Cost: add. (41013->923), mult. (136780->1298), div. (0->0), fcn. (122890->18), ass. (0->384)
t949 = sin(pkin(6));
t963 = cos(qJ(1));
t1132 = t949 * t963;
t953 = cos(pkin(6));
t1124 = t953 * t963;
t946 = sin(pkin(14));
t950 = cos(pkin(14));
t958 = sin(qJ(1));
t905 = -t1124 * t950 + t946 * t958;
t948 = sin(pkin(7));
t952 = cos(pkin(7));
t869 = t1132 * t952 - t905 * t948;
t947 = sin(pkin(8));
t1147 = t869 * t947;
t1077 = t948 * t1132;
t906 = t1124 * t946 + t950 * t958;
t957 = sin(qJ(3));
t962 = cos(qJ(3));
t819 = (t905 * t952 + t1077) * t962 + t906 * t957;
t951 = cos(pkin(8));
t1018 = t819 * t951 + t1147;
t1127 = t952 * t957;
t820 = t957 * t1077 + t1127 * t905 - t906 * t962;
t956 = sin(qJ(4));
t961 = cos(qJ(4));
t746 = t1018 * t956 + t820 * t961;
t784 = t819 * t947 - t869 * t951;
t955 = sin(qJ(5));
t960 = cos(qJ(5));
t689 = t746 * t960 - t784 * t955;
t954 = sin(qJ(6));
t1195 = t689 * t954;
t959 = cos(qJ(6));
t1194 = t689 * t959;
t1193 = t746 * t955 + t784 * t960;
t1093 = qJD(4) * t961;
t1063 = t947 * t1093;
t1129 = t951 * t956;
t1099 = qJD(1) * t949;
t1069 = t946 * t1099;
t1046 = t957 * t1069;
t1134 = t949 * t950;
t1137 = t948 * t953;
t1007 = t1134 * t952 + t1137;
t989 = t1007 * qJD(1);
t855 = t962 * t989 - t1046;
t1009 = t1127 * t950 + t946 * t962;
t1136 = t948 * t957;
t1076 = t953 * t1136;
t864 = t1009 * t949 + t1076;
t858 = t864 * qJD(1);
t793 = -t1129 * t858 + t855 * t961;
t1190 = -t793 + t1063;
t1140 = t947 * t956;
t1128 = t951 * t961;
t939 = pkin(11) * t1140;
t1177 = pkin(3) * t1128 - t939;
t1126 = t952 * t962;
t1135 = t948 * t962;
t1098 = qJD(1) * t953;
t1080 = pkin(1) * t1098;
t934 = t950 * t1080;
t1143 = t946 * t949;
t984 = pkin(2) * t953 + (-pkin(10) * t952 - qJ(2)) * t1143;
t849 = qJD(1) * t984 + t934;
t889 = (-pkin(10) * t946 * t948 - pkin(2) * t950 - pkin(1)) * t949;
t875 = qJD(1) * t889 + qJD(2);
t1106 = t849 * t1126 + t875 * t1135;
t1068 = t950 * t1099;
t900 = qJ(2) * t1068 + t946 * t1080;
t842 = pkin(10) * t989 + t900;
t1039 = -t957 * t842 + t1106;
t1164 = pkin(11) * t951;
t735 = -t1164 * t858 + t1039;
t1130 = t951 * t855;
t978 = -(t849 * t952 + t875 * t948) * t957 - t962 * t842;
t736 = -pkin(11) * t1130 + t978;
t843 = t947 * t855;
t798 = pkin(3) * t858 - pkin(11) * t843;
t1189 = t1177 * qJD(4) - t736 * t1129 - t798 * t1140 - t961 * t735;
t1149 = t858 * t947;
t1188 = pkin(12) * t1149 - t1189;
t692 = -t736 * t947 + t951 * t798;
t1119 = t961 * t858;
t792 = t1119 * t951 + t855 * t956;
t1183 = pkin(4) * t792 - pkin(12) * t793 + t692 - (pkin(4) * t956 - pkin(12) * t961) * t947 * qJD(4);
t1186 = t820 * t956;
t1118 = t961 * t962;
t1122 = t956 * t957;
t1005 = t1118 * t951 - t1122;
t1131 = t950 * t962;
t887 = (-t1127 * t946 + t1131) * t1099;
t1049 = t948 * t1069;
t992 = (-t1126 * t946 - t950 * t957) * t949;
t886 = qJD(1) * t992;
t985 = t1049 * t947 + t886 * t951;
t1182 = t887 * t961 + t956 * t985 - t952 * t1063 - (t1005 * qJD(4) + (-t1122 * t951 + t1118) * qJD(3)) * t948;
t1141 = t947 * t955;
t910 = t1140 * t955 - t960 * t951;
t1105 = -qJD(5) * t910 - t1141 * t858 + t1190 * t960;
t1139 = t947 * t960;
t911 = t1139 * t956 + t951 * t955;
t1104 = qJD(5) * t911 + t1139 * t858 + t1190 * t955;
t1037 = -t948 * t1068 + t1098 * t952;
t1013 = qJD(3) + t1037;
t994 = t1013 * t947;
t883 = t961 * t994;
t773 = -t855 * t1128 + t858 * t956 - t883;
t770 = qJD(5) + t773;
t975 = t994 + t1130;
t775 = t956 * t975 + t1119;
t1176 = t1013 * t951 + qJD(4) - t843;
t809 = t960 * t1176;
t715 = t775 * t955 - t809;
t714 = qJD(6) + t715;
t1138 = t947 * t961;
t1101 = pkin(3) * t1129 + pkin(11) * t1138;
t1181 = t1101 * qJD(4) + (t736 * t951 + t798 * t947) * t961 - t956 * t735;
t1094 = qJD(4) * t956;
t1064 = t947 * t1094;
t1036 = -t792 + t1064;
t1096 = qJD(3) * t957;
t1014 = -t1049 * t951 + (t1096 * t948 + t886) * t947;
t1075 = t950 * t1126;
t1051 = t949 * t1075;
t1084 = qJDD(1) * t950;
t1059 = t949 * t1084;
t1095 = qJD(3) * t962;
t1066 = t948 * t1095;
t1082 = qJDD(1) * t962;
t1085 = qJD(1) * qJD(3);
t801 = -qJD(3) * t1046 + qJDD(1) * t1076 + t1051 * t1085 + t1059 * t1127 + t1066 * t1098 + t1082 * t1143;
t1142 = t946 * t957;
t1010 = t1075 - t1142;
t802 = -(qJDD(1) * t1010 - t1009 * t1085) * t949 + (t1085 * t957 - t1082) * t1137;
t1083 = qJDD(1) * t953;
t1003 = -t948 * t1059 + t1083 * t952 + qJDD(3);
t990 = t1003 * t947;
t679 = qJD(4) * t775 + t802 * t1128 + t956 * t801 - t961 * t990;
t1166 = pkin(1) * t953;
t909 = qJ(2) * t1134 + t1166 * t946;
t995 = t1007 * pkin(10);
t860 = t995 + t909;
t848 = t962 * t860;
t938 = t950 * t1166;
t865 = t938 + t984;
t1070 = t865 * t1127 + t889 * t1136 + t848;
t1074 = t953 * t1135;
t863 = t1142 * t949 - t1051 - t1074;
t1006 = t1134 * t948 - t952 * t953;
t991 = t1006 * t947;
t974 = -t863 * t951 - t991;
t734 = pkin(11) * t974 + t1070;
t1038 = t865 * t1126 + t889 * t1135 - t957 * t860;
t739 = -pkin(3) * t1006 - t1164 * t864 + t1038;
t1165 = pkin(11) * t947;
t810 = -t865 * t948 + t952 * t889;
t757 = pkin(3) * t863 - t1165 * t864 + t810;
t1072 = t739 * t1129 + t757 * t1140 + t961 * t734;
t816 = t1006 * t951 - t863 * t947;
t653 = -pkin(12) * t816 + t1072;
t683 = -t739 * t947 + t951 * t757;
t1148 = t864 * t956;
t780 = t1128 * t863 + t961 * t991 + t1148;
t781 = t864 * t961 + t956 * t974;
t656 = pkin(4) * t780 - pkin(12) * t781 + t683;
t1180 = t960 * t653 + t955 * t656;
t1120 = t957 * t961;
t1121 = t956 * t962;
t1004 = t1121 * t951 + t1120;
t1109 = -t887 * t956 + t961 * t985 + t952 * t1064 + (t1004 * qJD(4) + (t1120 * t951 + t1121) * qJD(3)) * t948;
t897 = pkin(12) * t951 + t1101;
t898 = (-pkin(4) * t961 - pkin(12) * t956 - pkin(3)) * t947;
t1103 = t960 * t897 + t955 * t898;
t1102 = pkin(4) * t1149 + t1181;
t944 = t949 ^ 2;
t1178 = (t946 ^ 2 + t950 ^ 2) * t944;
t1089 = qJD(5) * t960;
t1091 = qJD(5) * t955;
t1175 = -t898 * t1089 + t1091 * t897 + t1183 * t955 + t1188 * t960;
t1173 = (t739 * t951 + t757 * t947) * t961 - t956 * t734;
t709 = pkin(11) * t975 - t978;
t711 = pkin(3) * t1013 + t735;
t805 = -t849 * t948 + t952 * t875;
t750 = -pkin(3) * t855 - pkin(11) * t1149 + t805;
t649 = (t711 * t951 + t750 * t947) * t961 - t956 * t709;
t776 = -t1003 * t951 - t802 * t947 - qJDD(4);
t1061 = t951 * t1093;
t1065 = t952 * t1095;
t1086 = qJD(1) * qJD(2);
t1060 = t949 * t1086;
t1079 = pkin(1) * t1083;
t880 = qJ(2) * t1059 + t950 * t1060 + t946 * t1079;
t831 = qJDD(1) * t995 + t880;
t1045 = t946 * t1060;
t932 = t950 * t1079;
t832 = qJDD(1) * t984 - t1045 + t932;
t870 = qJDD(1) * t889 + qJDD(2);
t1030 = t849 * t1065 + t875 * t1066 + t832 * t1127 + t870 * t1136 + t962 * t831;
t983 = -t1096 * t842 + t1030;
t670 = (-t802 * t951 + t990) * pkin(11) + t983;
t1040 = t832 * t1126 + t870 * t1135 - t957 * t831;
t966 = qJD(3) * t978 + t1040;
t671 = pkin(3) * t1003 - t1164 * t801 + t966;
t789 = -t832 * t948 + t952 * t870;
t696 = pkin(3) * t802 - t1165 * t801 + t789;
t982 = -t711 * t1061 - t750 * t1063 + t1094 * t709 - t671 * t1129 - t696 * t1140 - t961 * t670;
t609 = -pkin(12) * t776 - t982;
t639 = -t671 * t947 + t951 * t696;
t678 = qJD(4) * t883 + t855 * t1061 - t1094 * t858 - t802 * t1129 + t961 * t801 + t956 * t990;
t617 = pkin(4) * t679 - pkin(12) * t678 + t639;
t650 = t711 * t1129 + t750 * t1140 + t961 * t709;
t641 = pkin(12) * t1176 + t650;
t673 = -t711 * t947 + t951 * t750;
t647 = pkin(4) * t773 - pkin(12) * t775 + t673;
t621 = t641 * t960 + t647 * t955;
t600 = -qJD(5) * t621 - t609 * t955 + t960 * t617;
t677 = qJDD(5) + t679;
t598 = -pkin(5) * t677 - t600;
t717 = t1176 * t955 + t960 * t775;
t1125 = t953 * t958;
t907 = -t1125 * t946 + t950 * t963;
t1008 = -t1125 * t950 - t946 * t963;
t1133 = t949 * t958;
t970 = t1008 * t952 + t1133 * t948;
t821 = -t907 * t957 + t962 * t970;
t822 = t907 * t962 + t957 * t970;
t971 = -t1008 * t948 + t1133 * t952;
t967 = t971 * t947;
t748 = t822 * t961 + (t821 * t951 + t967) * t956;
t786 = -t821 * t947 + t951 * t971;
t690 = -t748 * t955 + t786 * t960;
t737 = t781 * t955 + t816 * t960;
t998 = g(1) * t690 + g(2) * t1193 - g(3) * t737;
t1171 = (pkin(5) * t717 + pkin(13) * t714) * t714 + t598 + t998;
t1062 = t951 * t1094;
t857 = t864 * qJD(3);
t1097 = qJD(2) * t949;
t1067 = t946 * t1097;
t969 = t865 * t1065 + t889 * t1066 + t1097 * t1131 + (-qJD(3) * t860 - t1067 * t952) * t957;
t723 = -t1164 * t857 + t969;
t856 = (t1010 * t949 + t1074) * qJD(3);
t965 = qJD(2) * t992 + (-t848 + (-t865 * t952 - t889 * t948) * t957) * qJD(3);
t724 = -t1164 * t856 + t965;
t1048 = t948 * t1067;
t787 = pkin(3) * t857 - t1165 * t856 + t1048;
t1170 = (t724 * t951 + t787 * t947) * t961 - t739 * t1062 - t757 * t1064 - t734 * t1093 - t956 * t723;
t1054 = t955 * t678 + t960 * t776;
t645 = qJD(5) * t717 + t1054;
t643 = qJDD(6) + t645;
t926 = -pkin(5) * t960 - pkin(13) * t955 - pkin(4);
t1169 = (t650 - t770 * (pkin(5) * t955 - pkin(13) * t960)) * t714 - t926 * t643;
t1150 = t857 * t947;
t981 = t739 * t1061 + t757 * t1063 - t1094 * t734 + t724 * t1129 + t787 * t1140 + t961 * t723;
t626 = pkin(12) * t1150 + t981;
t684 = -t724 * t947 + t951 * t787;
t718 = qJD(4) * t781 + t1128 * t857 + t856 * t956;
t719 = -t857 * t1129 + t856 * t961 + (t961 * t974 - t1148) * qJD(4);
t638 = pkin(4) * t718 - pkin(12) * t719 + t684;
t1168 = -qJD(5) * t1180 - t626 * t955 + t638 * t960;
t1163 = g(2) * t958;
t1162 = g(2) * t963;
t1161 = pkin(12) * qJD(5);
t1160 = pkin(1) * qJDD(1);
t1087 = qJD(6) * t959;
t644 = qJD(5) * t809 - t1091 * t775 + t960 * t678 - t955 * t776;
t1073 = t770 * t1087 + t959 * t644 + t954 * t677;
t1088 = qJD(6) * t954;
t618 = -t1088 * t717 + t1073;
t1159 = t618 * t954;
t1158 = t643 * t954;
t1157 = t643 * t959;
t1152 = t717 * t954;
t680 = -t959 * t770 + t1152;
t1156 = t680 * t714;
t682 = t717 * t959 + t770 * t954;
t1155 = t682 * t714;
t1154 = t715 * t770;
t1153 = t717 * t770;
t1151 = t773 * t960;
t964 = qJD(1) ^ 2;
t1123 = t953 * t964;
t700 = pkin(4) * t775 + pkin(12) * t773;
t1115 = t960 * t649 + t955 * t700;
t868 = t1004 * t948 + t1140 * t952;
t904 = -t1135 * t947 + t951 * t952;
t823 = t868 * t955 - t904 * t960;
t1112 = qJD(5) * t823 - t1014 * t955 + t1182 * t960;
t824 = t868 * t960 + t904 * t955;
t1111 = qJD(5) * t824 - t1014 * t960 - t1182 * t955;
t1110 = -pkin(5) * t1036 + qJD(5) * t1103 + t1183 * t960 - t1188 * t955;
t876 = t1138 * t959 + t911 * t954;
t1108 = -qJD(6) * t876 + t1036 * t954 + t1105 * t959;
t1078 = t954 * t1138;
t1107 = -qJD(6) * t1078 - t1036 * t959 + t1087 * t911 + t1105 * t954;
t1092 = qJD(5) * t954;
t1090 = qJD(5) * t959;
t599 = t647 * t1089 - t1091 * t641 + t960 * t609 + t955 * t617;
t597 = pkin(13) * t677 + t599;
t612 = -t711 * t1062 - t750 * t1064 - t709 * t1093 + t671 * t1128 + t696 * t1138 - t956 * t670;
t610 = pkin(4) * t776 - t612;
t602 = pkin(5) * t645 - pkin(13) * t644 + t610;
t1057 = -t954 * t597 + t959 * t602;
t1055 = t644 * t954 - t959 * t677;
t1053 = t770 * t960;
t1052 = t714 * t959;
t1043 = g(1) * t963 + t1163;
t1042 = g(1) * t958 - t1162;
t698 = -t1151 * t959 + t775 * t954;
t1035 = t1089 * t959 - t698;
t896 = t939 + (-pkin(3) * t961 - pkin(4)) * t951;
t825 = pkin(5) * t910 - pkin(13) * t911 + t896;
t1034 = -pkin(13) * t1036 - qJD(6) * t825 + t1175;
t827 = -pkin(13) * t1138 + t1103;
t1033 = -pkin(5) * t1104 + pkin(13) * t1105 + qJD(6) * t827 - t1102;
t867 = -t1005 * t948 - t1138 * t952;
t1032 = -qJD(6) * t867 + t1112;
t1031 = qJD(6) * t824 - t1109;
t1029 = t959 * t597 + t954 * t602;
t614 = pkin(13) * t770 + t621;
t640 = -pkin(4) * t1176 - t649;
t624 = t715 * pkin(5) - t717 * pkin(13) + t640;
t606 = t614 * t959 + t624 * t954;
t1028 = t614 * t954 - t624 * t959;
t623 = pkin(13) * t780 + t1180;
t652 = pkin(4) * t816 - t1173;
t738 = t781 * t960 - t816 * t955;
t632 = pkin(5) * t737 - pkin(13) * t738 + t652;
t1027 = t623 * t959 + t632 * t954;
t1026 = -t623 * t954 + t632 * t959;
t620 = -t641 * t955 + t647 * t960;
t1023 = -t653 * t955 + t656 * t960;
t686 = t738 * t959 + t780 * t954;
t685 = t738 * t954 - t780 * t959;
t1016 = -t897 * t955 + t898 * t960;
t1015 = (-qJ(2) * t1069 + t934) * t946 - t900 * t950;
t935 = -t1160 * t949 + qJDD(2);
t1012 = t1160 * t944 - t935 * t949;
t1002 = -pkin(12) * t677 + t640 * t770;
t1000 = t656 * t1089 - t1091 * t653 + t960 * t626 + t955 * t638;
t743 = t1128 * t819 + t1147 * t961 - t1186;
t747 = -t1128 * t821 + t822 * t956 - t961 * t967;
t997 = g(1) * t747 + g(2) * t743 + g(3) * t780;
t996 = -g(1) * t748 + g(2) * t746 - g(3) * t781;
t988 = t1003 * MDP(12);
t986 = -t610 + t997;
t613 = -pkin(5) * t770 - t620;
t979 = -pkin(13) * t643 + (t613 + t620) * t714;
t976 = pkin(12) * qJD(6) * t714 - t997;
t973 = t947 * t1176;
t972 = qJD(4) * t1176;
t627 = -pkin(4) * t1150 - t1170;
t968 = (pkin(13) * t775 - qJD(6) * t926 + t1115) * t714 + t996;
t908 = -qJ(2) * t1143 + t938;
t879 = t932 + (-qJ(2) * qJDD(1) - t1086) * t1143;
t877 = t911 * t959 - t1078;
t826 = pkin(5) * t1138 - t1016;
t807 = -t1129 * t864 - t863 * t961;
t806 = t1128 * t864 - t863 * t956;
t767 = t1141 * t864 + t807 * t960;
t765 = -t1129 * t822 + t821 * t961;
t764 = t1128 * t822 + t821 * t956;
t763 = t1129 * t820 - t819 * t961;
t762 = -t1128 * t820 - t819 * t956;
t745 = -t1018 * t961 + t1186;
t713 = t1141 * t822 + t765 * t960;
t712 = -t1141 * t820 + t763 * t960;
t697 = -t1151 * t954 - t959 * t775;
t691 = t748 * t960 + t786 * t955;
t665 = -qJD(5) * t737 + t1141 * t857 + t719 * t960;
t664 = qJD(5) * t738 - t1139 * t857 + t719 * t955;
t661 = t691 * t959 + t747 * t954;
t660 = -t691 * t954 + t747 * t959;
t634 = -qJD(6) * t685 + t665 * t959 + t718 * t954;
t633 = qJD(6) * t686 + t665 * t954 - t718 * t959;
t630 = -pkin(5) * t775 + t649 * t955 - t700 * t960;
t622 = -pkin(5) * t780 - t1023;
t619 = qJD(6) * t682 + t1055;
t607 = pkin(5) * t664 - pkin(13) * t665 + t627;
t604 = -pkin(5) * t718 - t1168;
t603 = pkin(13) * t718 + t1000;
t596 = -qJD(6) * t606 + t1057;
t595 = -qJD(6) * t1028 + t1029;
t1 = [((-qJD(6) * t1027 - t603 * t954 + t607 * t959) * t714 + t1026 * t643 + t596 * t737 - t1028 * t664 + t604 * t680 + t622 * t619 + t598 * t685 + t613 * t633 - g(1) * (t745 * t954 + t1194) - g(2) * t661) * MDP(34) + (-(qJD(6) * t1026 + t603 * t959 + t607 * t954) * t714 - t1027 * t643 - t595 * t737 - t606 * t664 + t604 * t682 + t622 * t618 + t598 * t686 + t613 * t634 - g(1) * (t745 * t959 - t1195) - g(2) * t660) * MDP(35) + (t1150 * t775 + t1176 * t719 - t816 * t678 - t776 * t781) * MDP(17) + (-t1150 * t773 - t1176 * t718 + t816 * t679 + t776 * t780) * MDP(18) + (g(1) * t745 + g(2) * t747 + t1072 * t776 - t1150 * t650 - t1176 * t981 + t639 * t781 + t673 * t719 + t683 * t678 + t684 * t775 - t816 * t982) * MDP(21) + (-g(1) * t746 - g(2) * t748 + t649 * t1150 + t1170 * t1176 - t1173 * t776 - t612 * t816 + t639 * t780 + t673 * t718 + t683 * t679 + t684 * t773) * MDP(20) + (g(1) * t1193 - g(2) * t690 - t1000 * t770 - t1180 * t677 - t599 * t780 + t610 * t738 - t621 * t718 + t627 * t717 + t640 * t665 + t652 * t644) * MDP(28) + (-g(1) * t820 - g(2) * t822 + t1003 * t1038 - t1006 * t966 + t1013 * t965 - t1048 * t855 + t789 * t863 + t810 * t802 + t805 * t857) * MDP(13) + (g(1) * t906 - g(2) * t907 + t1012 * t950 + (qJDD(1) * t908 - t1045 + t879) * t953) * MDP(4) + qJDD(1) * MDP(1) + t1043 * MDP(3) + (t879 * t908 + t880 * t909 + t1042 * pkin(1) + (-t935 * pkin(1) - qJ(2) * t1043 - qJD(2) * t1015) * t949) * MDP(7) + t1042 * MDP(2) + (-t644 * t737 - t645 * t738 - t664 * t717 - t665 * t715) * MDP(23) + (t644 * t738 + t665 * t717) * MDP(22) + (t643 * t737 + t664 * t714) * MDP(33) + (-t619 * t737 - t633 * t714 - t643 * t685 - t664 * t680) * MDP(32) + (t618 * t737 + t634 * t714 + t643 * t686 + t664 * t682) * MDP(31) + (-g(1) * t819 - g(2) * t821 - t1003 * t1070 + t1006 * t983 - t1013 * t969 + t1048 * t858 + t789 * t864 + t810 * t801 + t805 * t856) * MDP(14) + (t678 * t781 + t719 * t775) * MDP(15) + (-t678 * t780 - t679 * t781 - t718 * t775 - t719 * t773) * MDP(16) + (t644 * t780 + t665 * t770 + t677 * t738 + t717 * t718) * MDP(24) + (-t645 * t780 - t664 * t770 - t677 * t737 - t715 * t718) * MDP(25) + (t677 * t780 + t718 * t770) * MDP(26) + (-t618 * t685 - t619 * t686 - t633 * t682 - t634 * t680) * MDP(30) + (t618 * t686 + t634 * t682) * MDP(29) + (t1003 * t864 - t1006 * t801 + t1013 * t856) * MDP(10) + (-t1003 * t863 + t1006 * t802 - t1013 * t857) * MDP(11) - t1006 * t988 + (t801 * t864 + t856 * t858) * MDP(8) + (-t801 * t863 - t802 * t864 + t855 * t856 - t857 * t858) * MDP(9) + (-g(1) * t905 + (-t1012 + t1162) * t946 + (-t909 * qJDD(1) - t880 + (-t1060 + t1163) * t950) * t953) * MDP(5) + (t776 * t816 + t857 * t973) * MDP(19) + (-g(1) * t689 - g(2) * t691 + t1023 * t677 + t1168 * t770 + t600 * t780 + t610 * t737 + t620 * t718 + t627 * t715 + t640 * t664 + t652 * t645) * MDP(27) + (t1086 * t1178 + (-t879 * t946 + t880 * t950 + (-t908 * t946 + t909 * t950) * qJDD(1) - t1043) * t949) * MDP(6); -t964 * MDP(6) * t1178 + (-g(3) * t953 + qJDD(2)) * MDP(7) + (t952 * t802 - t886 * t1013 + (t1003 * t962 - t1013 * t1096 + t1069 * t855) * t948) * MDP(13) + (t952 * t801 + t887 * t1013 + (-t1003 * t957 - t1013 * t1095 - t1069 * t858) * t948) * MDP(14) + (t1014 * t773 + t904 * t679 + t867 * t776) * MDP(20) + (t1014 * t775 + t904 * t678 + t868 * t776) * MDP(21) + (t1109 * t715 - t1111 * t770 + t645 * t867 - t677 * t823) * MDP(27) + (t1109 * t717 + t1112 * t770 + t644 * t867 - t677 * t824) * MDP(28) + ((-t824 * t954 + t867 * t959) * t643 + t823 * t619 + (-t1031 * t959 + t1032 * t954) * t714 + t1111 * t680) * MDP(34) + (-(t824 * t959 + t867 * t954) * t643 + t823 * t618 + (t1031 * t954 + t1032 * t959) * t714 + t1111 * t682) * MDP(35) - (t1109 * MDP(20) - MDP(21) * t1182) * t1176 + ((t1123 * t946 - t1084) * MDP(4) + (qJDD(1) * t946 + t1123 * t950) * MDP(5) + (qJD(1) * t1015 - t1042 - t1160) * MDP(7)) * t949; -t858 * t855 * MDP(8) + (t773 * t793 + t775 * t792 + (t678 * t961 - t679 * t956 + (-t773 * t961 - t775 * t956) * qJD(4)) * t947) * MDP(16) + (-g(1) * t821 + g(2) * t819 + g(3) * t863 - t1037 * t978 - t805 * t858 + t1040) * MDP(13) + (-t947 * pkin(3) * t679 - g(1) * t765 - g(2) * t763 - g(3) * t807 + t1036 * t673 - t639 * t1138 - t649 * t1149 - t1176 * t1181 - t1177 * t776 + t612 * t951 - t692 * t773) * MDP(20) + (-t951 * t679 + t1176 * t792 + (t858 * t773 - t776 * t961 - t956 * t972) * t947) * MDP(18) + (t951 * t678 - t1176 * t793 + (-t858 * t775 - t776 * t956 + t961 * t972) * t947) * MDP(17) + t988 + (t1016 * t677 - t600 * t1138 + t896 * t645 + t610 * t910 - g(1) * t713 - g(2) * t712 - g(3) * t767 + ((-qJD(5) * t897 - t1183) * t960 + (-qJD(5) * t898 + t1188) * t955) * t770 + t1102 * t715 + t1104 * t640 + t1036 * t620) * MDP(27) + (-t1013 * t855 + t801) * MDP(10) + (-t855 ^ 2 + t858 ^ 2) * MDP(9) + (t1013 * t858 - t802) * MDP(11) + (t1104 * t714 + t643 * t910) * MDP(33) + (t1105 * t717 + t644 * t911) * MDP(22) + (-t1104 * t717 - t1105 * t715 - t644 * t910 - t645 * t911) * MDP(23) + (-t776 * t951 - t858 * t973) * MDP(19) + (t1036 * t770 - t1138 * t677) * MDP(26) + (t1036 * t717 + t1105 * t770 - t1138 * t644 + t677 * t911) * MDP(24) + (-t1036 * t715 - t1104 * t770 + t1138 * t645 - t677 * t910) * MDP(25) + ((t825 * t959 - t827 * t954) * t643 + t596 * t910 + t826 * t619 + t598 * t876 - g(1) * (t713 * t959 + t764 * t954) - g(2) * (t712 * t959 + t762 * t954) - g(3) * (t767 * t959 + t806 * t954) + (-t1033 * t959 + t1034 * t954) * t714 + t1110 * t680 + t1107 * t613 - t1104 * t1028) * MDP(34) + (g(1) * t822 - g(2) * t820 + g(3) * t864 + qJD(3) * t1106 + t1037 * t1039 - t805 * t855 - t1030) * MDP(14) + (-t1103 * t677 + t599 * t1138 + t896 * t644 + t610 * t911 - g(1) * (t1139 * t822 - t765 * t955) - g(2) * (-t1139 * t820 - t763 * t955) - g(3) * (t1139 * t864 - t807 * t955) + t1175 * t770 + t1102 * t717 + t1105 * t640 - t1036 * t621) * MDP(28) + (-t1104 * t680 - t1107 * t714 - t619 * t910 - t643 * t876) * MDP(32) + (t1108 * t682 + t618 * t877) * MDP(29) + (t1104 * t682 + t1108 * t714 + t618 * t910 + t643 * t877) * MDP(31) + (-t1107 * t682 - t1108 * t680 - t618 * t876 - t619 * t877) * MDP(30) + (-(t825 * t954 + t827 * t959) * t643 - t595 * t910 + t826 * t618 + t598 * t877 - g(1) * (-t713 * t954 + t764 * t959) - g(2) * (-t712 * t954 + t762 * t959) - g(3) * (-t767 * t954 + t806 * t959) + (t1033 * t954 + t1034 * t959) * t714 + t1110 * t682 + t1108 * t613 - t1104 * t606) * MDP(35) + (t1101 * t776 + t982 * t951 - t692 * t775 - t673 * t793 + g(1) * t764 + g(2) * t762 + g(3) * t806 + (-pkin(3) * t678 + t1093 * t673 + t639 * t956 + t650 * t858) * t947 - t1189 * t1176) * MDP(21) + (t678 * t1140 + t1190 * t775) * MDP(15); -t773 ^ 2 * MDP(16) + (t1176 * t773 + t678) * MDP(17) - t679 * MDP(18) - t776 * MDP(19) + (t1176 * t650 + t612 + t997) * MDP(20) + (t1176 * t649 + t673 * t773 + t982 - t996) * MDP(21) + (t1053 * t717 + t644 * t955) * MDP(22) + ((t644 - t1154) * t960 + (-t645 - t1153) * t955) * MDP(23) + (t1053 * t770 + t677 * t955) * MDP(24) + (-t770 ^ 2 * t955 + t677 * t960) * MDP(25) + (-pkin(4) * t645 - t650 * t715 + (t649 * t770 + t1002) * t955 + ((-t700 - t1161) * t770 + t986) * t960) * MDP(27) + (-pkin(4) * t644 + t1115 * t770 - t650 * t717 + t1002 * t960 + (t1161 * t770 - t986) * t955) * MDP(28) + (t618 * t955 * t959 + (-t1088 * t955 + t1035) * t682) * MDP(29) + (t680 * t698 + t682 * t697 + (-t680 * t959 - t682 * t954) * t1089 + (-t1159 - t619 * t959 + (t680 * t954 - t682 * t959) * qJD(6)) * t955) * MDP(30) + (-t618 * t960 + t1035 * t714 + (-t1088 * t714 + t682 * t770 + t1157) * t955) * MDP(31) + (t619 * t960 + (-t1089 * t954 + t697) * t714 + (-t1087 * t714 - t680 * t770 - t1158) * t955) * MDP(32) + (t714 * t770 * t955 - t643 * t960) * MDP(33) + (-t613 * t697 - t630 * t680 - t1169 * t959 + t968 * t954 + (t613 * t1092 - t596 + (qJD(5) * t680 - t1158) * pkin(12) - t976 * t959) * t960 + (t613 * t1087 + t598 * t954 - t770 * t1028 + (t1092 * t714 + t619) * pkin(12)) * t955) * MDP(34) + (-t613 * t698 - t630 * t682 + t1169 * t954 + t968 * t959 + (t613 * t1090 + t595 + (qJD(5) * t682 - t1157) * pkin(12) + t976 * t954) * t960 + (-t613 * t1088 + t598 * t959 - t770 * t606 + (t1090 * t714 + t618) * pkin(12)) * t955) * MDP(35) + (t773 * MDP(15) + MDP(16) * t775 + MDP(18) * t1176 - t673 * MDP(20) - t717 * MDP(24) + t715 * MDP(25) - t770 * MDP(26) - t620 * MDP(27) + t621 * MDP(28)) * t775; -t715 ^ 2 * MDP(23) + (t644 + t1154) * MDP(24) + (-t1054 + t1153) * MDP(25) + t677 * MDP(26) + (t621 * t770 + t600 - t998) * MDP(27) + (g(1) * t691 - g(2) * t689 + g(3) * t738 + t620 * t770 + t640 * t715 - t599) * MDP(28) + (t1052 * t682 + t1159) * MDP(29) + ((t618 - t1156) * t959 + (-t619 - t1155) * t954) * MDP(30) + (t1052 * t714 + t1158) * MDP(31) + (-t714 ^ 2 * t954 + t1157) * MDP(32) + (-pkin(5) * t619 - t1171 * t959 - t621 * t680 + t979 * t954) * MDP(34) + (-pkin(5) * t618 + t1171 * t954 - t621 * t682 + t979 * t959) * MDP(35) + (MDP(22) * t715 + MDP(23) * t717 - MDP(25) * qJD(5) - MDP(27) * t640 - MDP(31) * t682 + MDP(32) * t680 - MDP(33) * t714 + MDP(34) * t1028 + MDP(35) * t606) * t717; t682 * t680 * MDP(29) + (-t680 ^ 2 + t682 ^ 2) * MDP(30) + (t1073 + t1156) * MDP(31) + (-t1055 + t1155) * MDP(32) + t643 * MDP(33) + (t606 * t714 - t613 * t682 - g(1) * t660 - g(2) * (t743 * t959 + t1195) + g(3) * t685 + t1057) * MDP(34) + (-t1028 * t714 + t613 * t680 + g(1) * t661 - g(2) * (-t743 * t954 + t1194) + g(3) * t686 - t1029) * MDP(35) + (-MDP(31) * t1152 - MDP(32) * t682 - MDP(34) * t606 + MDP(35) * t1028) * qJD(6);];
tau  = t1;
