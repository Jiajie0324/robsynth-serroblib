% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d3,d4,d5,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 07:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RPRRRR12_invdynf_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 07:01:36
% EndTime: 2019-05-06 07:02:29
% DurationCPUTime: 54.60s
% Computational Cost: add. (749690->449), mult. (2448254->752), div. (0->0), fcn. (2163806->18), ass. (0->407)
t3460 = sin(pkin(6));
t3475 = qJD(1) ^ 2;
t3560 = t3460 * t3475;
t3468 = sin(qJ(3));
t3473 = cos(qJ(3));
t3461 = cos(pkin(14));
t3463 = cos(pkin(7));
t3561 = t3460 * t3463;
t3551 = t3461 * t3561;
t3457 = sin(pkin(14));
t3566 = t3457 * t3460;
t3553 = qJD(1) * t3566;
t3459 = sin(pkin(7));
t3563 = t3459 * t3473;
t3464 = cos(pkin(6));
t3578 = qJD(1) * t3464;
t3406 = -qJD(1) * t3473 * t3551 + t3468 * t3553 - t3563 * t3578;
t3555 = qJDD(1) * t3460;
t3548 = t3457 * t3555;
t3546 = t3461 * t3555;
t3554 = qJDD(1) * t3464;
t3597 = t3459 * t3554 + t3463 * t3546;
t3388 = -t3406 * qJD(3) + t3468 * t3597 + t3473 * t3548;
t3458 = sin(pkin(8));
t3462 = cos(pkin(8));
t3419 = (t3459 * t3464 + t3551) * qJD(1) * pkin(10);
t3469 = sin(qJ(1));
t3474 = cos(qJ(1));
t3449 = -g(1) * t3474 - g(2) * t3469;
t3427 = -pkin(1) * t3475 + qJ(2) * t3555 + t3449;
t3582 = pkin(10) * t3457;
t3485 = -pkin(2) * t3461 - t3459 * t3582;
t3579 = pkin(10) * qJDD(1);
t3484 = t3463 * t3579 + t3485 * t3560;
t3562 = t3460 * t3461;
t3448 = t3469 * g(1) - g(2) * t3474;
t3426 = qJDD(1) * pkin(1) + qJ(2) * t3560 + t3448;
t3568 = t3426 * t3464;
t3486 = -g(3) * t3562 - 0.2e1 * qJD(2) * t3553 + t3461 * t3568;
t3353 = (qJDD(1) * pkin(2) + qJD(1) * t3419) * t3464 + (-t3460 * t3484 - t3427) * t3457 + t3486;
t3428 = (pkin(2) * t3464 - t3561 * t3582) * qJD(1);
t3552 = qJD(1) * t3562;
t3549 = 0.2e1 * qJD(2) * t3552 + t3461 * t3427 + t3457 * t3568;
t3354 = (-qJD(1) * t3428 + t3459 * t3579) * t3464 + (-g(3) * t3457 + t3461 * t3484) * t3460 + t3549;
t3545 = -t3464 * g(3) + qJDD(2);
t3374 = (-t3426 + t3485 * qJDD(1) + (-t3419 * t3461 + t3428 * t3457) * qJD(1)) * t3460 + t3545;
t3318 = t3463 * t3473 * t3353 - t3354 * t3468 + t3374 * t3563;
t3558 = t3463 * t3468;
t3564 = t3459 * t3468;
t3408 = (t3464 * t3564 + (t3457 * t3473 + t3461 * t3558) * t3460) * qJD(1);
t3581 = pkin(11) * t3458;
t3382 = pkin(3) * t3406 - t3408 * t3581;
t3420 = t3459 * t3552 - t3463 * t3578 - qJD(3);
t3491 = -t3406 * t3462 - t3420 * t3458;
t3395 = t3491 * pkin(11);
t3417 = -t3459 * t3546 + t3463 * t3554 + qJDD(3);
t3479 = pkin(3) * t3417 - t3382 * t3408 - t3395 * t3420 + t3318;
t3339 = -t3353 * t3459 + t3463 * t3374;
t3483 = t3468 * t3548 - t3473 * t3597;
t3387 = -qJD(3) * t3408 - t3483;
t3580 = pkin(11) * t3462;
t3400 = -pkin(3) * t3420 - t3408 * t3580;
t3480 = -pkin(3) * t3387 + t3395 * t3406 + t3400 * t3408 + t3339;
t3598 = t3462 * (-t3388 * t3580 + t3479) + t3458 * (-t3388 * t3581 + t3480);
t3596 = t3387 * t3462 + t3417 * t3458;
t3467 = sin(qJ(4));
t3472 = cos(qJ(4));
t3370 = t3472 * t3408 + t3467 * t3491;
t3396 = -t3406 * t3458 + t3420 * t3462 - qJD(4);
t3466 = sin(qJ(5));
t3471 = cos(qJ(5));
t3344 = t3370 * t3466 + t3471 * t3396;
t3343 = qJD(6) + t3344;
t3595 = qJD(6) + t3343;
t3346 = t3370 * t3471 - t3396 * t3466;
t3559 = t3462 * t3472;
t3565 = t3458 * t3472;
t3368 = t3406 * t3559 + t3408 * t3467 + t3420 * t3565;
t3366 = qJD(5) + t3368;
t3465 = sin(qJ(6));
t3470 = cos(qJ(6));
t3331 = t3346 * t3465 - t3470 * t3366;
t3594 = t3331 ^ 2;
t3333 = t3346 * t3470 + t3366 * t3465;
t3593 = t3333 ^ 2;
t3592 = t3343 ^ 2;
t3591 = t3344 ^ 2;
t3590 = t3346 ^ 2;
t3589 = t3366 ^ 2;
t3588 = t3368 ^ 2;
t3587 = t3370 ^ 2;
t3586 = t3396 ^ 2;
t3585 = t3406 ^ 2;
t3584 = t3408 ^ 2;
t3583 = t3420 ^ 2;
t3577 = t3331 * t3333;
t3576 = t3344 * t3346;
t3575 = t3368 * t3370;
t3574 = t3368 * t3396;
t3573 = t3370 * t3396;
t3571 = t3406 * t3408;
t3570 = t3406 * t3420;
t3454 = t3460 ^ 2;
t3567 = t3454 * t3475;
t3557 = qJD(5) - t3366;
t3556 = qJD(6) - t3343;
t3319 = t3353 * t3558 + t3473 * t3354 + t3374 * t3564;
t3298 = pkin(11) * t3596 - t3406 * t3382 + t3420 * t3400 + t3319;
t3251 = t3472 * t3298 + t3467 * t3598;
t3341 = pkin(4) * t3368 - pkin(12) * t3370;
t3375 = -t3387 * t3458 + t3462 * t3417 + qJDD(4);
t3244 = -pkin(4) * t3586 + pkin(12) * t3375 - t3341 * t3368 + t3251;
t3266 = -t3458 * t3479 + t3462 * t3480;
t3540 = -t3370 * qJD(4) + t3387 * t3559 - t3467 * t3388 + t3417 * t3565;
t3313 = -t3540 - t3573;
t3335 = -t3368 * qJD(4) + t3472 * t3388 + t3467 * t3596;
t3542 = -t3335 - t3574;
t3476 = pkin(4) * t3313 + pkin(12) * t3542 + t3266;
t3215 = t3471 * t3244 + t3466 * t3476;
t3550 = t3464 * t3560;
t3214 = -t3244 * t3466 + t3471 * t3476;
t3496 = -t3471 * t3335 - t3466 * t3375;
t3306 = -qJD(5) * t3344 - t3496;
t3487 = qJDD(5) - t3540;
t3544 = -t3465 * t3306 + t3470 * t3487;
t3543 = t3366 * t3344 - t3306;
t3541 = t3466 * t3335 - t3471 * t3375;
t3538 = t3467 * t3298 - t3472 * t3598;
t3322 = pkin(5) * t3344 - pkin(13) * t3346;
t3207 = -pkin(5) * t3589 + pkin(13) * t3487 - t3344 * t3322 + t3215;
t3243 = -t3375 * pkin(4) - t3586 * pkin(12) + t3370 * t3341 + t3538;
t3285 = (qJD(5) + t3366) * t3346 + t3541;
t3218 = pkin(5) * t3285 + pkin(13) * t3543 + t3243;
t3184 = -t3207 * t3465 + t3218 * t3470;
t3185 = t3207 * t3470 + t3218 * t3465;
t3170 = -t3184 * t3465 + t3185 * t3470;
t3206 = -pkin(5) * t3487 - pkin(13) * t3589 + t3322 * t3346 - t3214;
t3156 = t3170 * t3466 - t3206 * t3471;
t3157 = t3170 * t3471 + t3206 * t3466;
t3169 = t3184 * t3470 + t3185 * t3465;
t3533 = t3157 * t3467 - t3169 * t3472;
t3137 = t3462 * t3156 + t3458 * t3533;
t3138 = -t3458 * t3156 + t3462 * t3533;
t3146 = t3157 * t3472 + t3169 * t3467;
t3536 = t3138 * t3473 + t3146 * t3468;
t3130 = -t3459 * t3137 + t3463 * t3536;
t3133 = -t3138 * t3468 + t3146 * t3473;
t3537 = t3130 * t3461 + t3133 * t3457;
t3186 = t3214 * t3471 + t3215 * t3466;
t3187 = -t3214 * t3466 + t3215 * t3471;
t3526 = t3187 * t3467 - t3243 * t3472;
t3165 = t3462 * t3186 + t3458 * t3526;
t3166 = -t3458 * t3186 + t3462 * t3526;
t3179 = t3187 * t3472 + t3243 * t3467;
t3530 = t3166 * t3473 + t3179 * t3468;
t3144 = -t3459 * t3165 + t3463 * t3530;
t3151 = -t3166 * t3468 + t3179 * t3473;
t3535 = t3144 * t3461 + t3151 * t3457;
t3262 = -t3333 * t3556 + t3544;
t3481 = -t3470 * t3306 - t3465 * t3487;
t3264 = t3331 * t3556 + t3481;
t3231 = t3262 * t3470 - t3264 * t3465;
t3284 = -t3593 - t3594;
t3219 = t3231 * t3466 - t3284 * t3471;
t3220 = t3231 * t3471 + t3284 * t3466;
t3230 = t3262 * t3465 + t3264 * t3470;
t3520 = t3220 * t3467 - t3230 * t3472;
t3180 = t3462 * t3219 + t3458 * t3520;
t3181 = -t3458 * t3219 + t3462 * t3520;
t3199 = t3220 * t3472 + t3230 * t3467;
t3528 = t3181 * t3473 + t3199 * t3468;
t3153 = -t3459 * t3180 + t3463 * t3528;
t3171 = -t3181 * t3468 + t3199 * t3473;
t3534 = t3153 * t3461 + t3171 * t3457;
t3482 = -qJD(5) * t3346 - qJDD(6) - t3541;
t3269 = -t3482 - t3577;
t3294 = -t3592 - t3594;
t3253 = -t3269 * t3465 + t3294 * t3470;
t3261 = t3333 * t3595 - t3544;
t3224 = t3253 * t3466 - t3261 * t3471;
t3225 = t3253 * t3471 + t3261 * t3466;
t3252 = t3269 * t3470 + t3294 * t3465;
t3518 = t3225 * t3467 - t3252 * t3472;
t3189 = t3462 * t3224 + t3458 * t3518;
t3190 = -t3458 * t3224 + t3462 * t3518;
t3208 = t3225 * t3472 + t3252 * t3467;
t3525 = t3190 * t3473 + t3208 * t3468;
t3159 = -t3459 * t3189 + t3463 * t3525;
t3173 = -t3190 * t3468 + t3208 * t3473;
t3532 = t3159 * t3461 + t3173 * t3457;
t3270 = t3482 - t3577;
t3299 = -t3592 - t3593;
t3257 = t3270 * t3470 - t3299 * t3465;
t3263 = -t3331 * t3595 - t3481;
t3226 = t3257 * t3466 - t3263 * t3471;
t3227 = t3257 * t3471 + t3263 * t3466;
t3256 = t3270 * t3465 + t3299 * t3470;
t3517 = t3227 * t3467 - t3256 * t3472;
t3193 = t3462 * t3226 + t3458 * t3517;
t3194 = -t3458 * t3226 + t3462 * t3517;
t3209 = t3227 * t3472 + t3256 * t3467;
t3524 = t3194 * t3473 + t3209 * t3468;
t3162 = -t3459 * t3193 + t3463 * t3524;
t3176 = -t3194 * t3468 + t3209 * t3473;
t3531 = t3162 * t3461 + t3176 * t3457;
t3511 = t3251 * t3467 - t3472 * t3538;
t3210 = t3462 * t3266 + t3458 * t3511;
t3211 = -t3458 * t3266 + t3462 * t3511;
t3223 = t3251 * t3472 + t3467 * t3538;
t3521 = t3211 * t3473 + t3223 * t3468;
t3175 = -t3459 * t3210 + t3463 * t3521;
t3188 = -t3211 * t3468 + t3223 * t3473;
t3529 = t3175 * t3461 + t3188 * t3457;
t3286 = -t3346 * t3557 - t3541;
t3288 = t3344 * t3557 + t3496;
t3258 = t3286 * t3466 + t3288 * t3471;
t3259 = t3286 * t3471 - t3288 * t3466;
t3308 = -t3590 - t3591;
t3510 = t3259 * t3467 - t3308 * t3472;
t3221 = t3462 * t3258 + t3458 * t3510;
t3222 = -t3458 * t3258 + t3462 * t3510;
t3245 = t3259 * t3472 + t3308 * t3467;
t3519 = t3222 * t3473 + t3245 * t3468;
t3183 = -t3459 * t3221 + t3463 * t3519;
t3204 = -t3222 * t3468 + t3245 * t3473;
t3527 = t3183 * t3461 + t3204 * t3457;
t3301 = t3487 - t3576;
t3312 = -t3589 - t3591;
t3271 = t3301 * t3471 + t3312 * t3466;
t3272 = -t3301 * t3466 + t3312 * t3471;
t3508 = t3272 * t3467 - t3285 * t3472;
t3232 = t3462 * t3271 + t3458 * t3508;
t3233 = -t3458 * t3271 + t3462 * t3508;
t3249 = t3272 * t3472 + t3285 * t3467;
t3515 = t3233 * t3473 + t3249 * t3468;
t3196 = -t3459 * t3232 + t3463 * t3515;
t3212 = -t3233 * t3468 + t3249 * t3473;
t3523 = t3196 * t3461 + t3212 * t3457;
t3302 = -t3487 - t3576;
t3317 = -t3589 - t3590;
t3275 = t3302 * t3466 + t3317 * t3471;
t3276 = t3302 * t3471 - t3317 * t3466;
t3506 = t3276 * t3467 + t3472 * t3543;
t3234 = t3462 * t3275 + t3458 * t3506;
t3235 = -t3458 * t3275 + t3462 * t3506;
t3254 = t3276 * t3472 - t3467 * t3543;
t3514 = t3235 * t3473 + t3254 * t3468;
t3198 = -t3459 * t3234 + t3463 * t3514;
t3213 = -t3235 * t3468 + t3254 * t3473;
t3522 = t3198 * t3461 + t3213 * t3457;
t3325 = -t3587 - t3588;
t3314 = t3540 - t3573;
t3316 = -t3335 + t3574;
t3503 = t3314 * t3467 + t3316 * t3472;
t3267 = t3462 * t3325 + t3458 * t3503;
t3268 = -t3458 * t3325 + t3462 * t3503;
t3283 = t3314 * t3472 - t3316 * t3467;
t3509 = t3268 * t3473 + t3283 * t3468;
t3229 = -t3459 * t3267 + t3463 * t3509;
t3248 = -t3268 * t3468 + t3283 * t3473;
t3516 = t3229 * t3461 + t3248 * t3457;
t3327 = t3375 - t3575;
t3337 = -t3586 - t3588;
t3498 = t3327 * t3472 + t3337 * t3467;
t3273 = t3462 * t3313 + t3458 * t3498;
t3274 = -t3458 * t3313 + t3462 * t3498;
t3303 = -t3327 * t3467 + t3337 * t3472;
t3507 = t3274 * t3473 + t3303 * t3468;
t3239 = -t3459 * t3273 + t3463 * t3507;
t3260 = -t3274 * t3468 + t3303 * t3473;
t3513 = t3239 * t3461 + t3260 * t3457;
t3326 = -t3375 - t3575;
t3340 = -t3586 - t3587;
t3499 = t3326 * t3467 + t3340 * t3472;
t3281 = t3458 * t3499 - t3462 * t3542;
t3282 = t3458 * t3542 + t3462 * t3499;
t3307 = t3326 * t3472 - t3340 * t3467;
t3504 = t3282 * t3473 + t3307 * t3468;
t3241 = -t3459 * t3281 + t3463 * t3504;
t3265 = -t3282 * t3468 + t3307 * t3473;
t3512 = t3241 * t3461 + t3265 * t3457;
t3502 = t3318 * t3473 + t3319 * t3468;
t3278 = -t3459 * t3339 + t3463 * t3502;
t3293 = -t3318 * t3468 + t3319 * t3473;
t3505 = t3278 * t3461 + t3293 * t3457;
t3371 = -t3584 - t3585;
t3357 = (-qJD(3) - t3420) * t3408 - t3483;
t3359 = -t3388 + t3570;
t3495 = t3357 * t3468 + t3359 * t3473;
t3321 = -t3459 * t3371 + t3463 * t3495;
t3338 = t3357 * t3473 - t3359 * t3468;
t3501 = t3321 * t3461 + t3338 * t3457;
t3356 = (qJD(3) - t3420) * t3408 + t3483;
t3376 = -t3583 - t3585;
t3378 = t3417 - t3571;
t3494 = t3376 * t3468 + t3378 * t3473;
t3324 = -t3459 * t3356 + t3463 * t3494;
t3342 = t3376 * t3473 - t3378 * t3468;
t3500 = t3324 * t3461 + t3342 * t3457;
t3358 = t3388 + t3570;
t3377 = -t3417 - t3571;
t3381 = -t3583 - t3584;
t3493 = t3377 * t3468 + t3381 * t3473;
t3329 = -t3459 * t3358 + t3463 * t3493;
t3347 = t3377 * t3473 - t3381 * t3468;
t3497 = t3329 * t3461 + t3347 * t3457;
t3398 = -t3457 * t3427 + t3486;
t3399 = -g(3) * t3566 + t3549;
t3492 = t3398 * t3461 + t3399 * t3457;
t3439 = t3461 * t3550;
t3423 = t3439 - t3548;
t3438 = t3457 * t3550;
t3424 = t3438 + t3546;
t3490 = t3423 * t3461 + t3424 * t3457;
t3437 = t3461 * t3457 * t3567;
t3429 = t3437 + t3554;
t3455 = t3461 ^ 2;
t3456 = t3464 ^ 2;
t3433 = (-t3454 * t3455 - t3456) * t3475;
t3489 = t3429 * t3461 + t3433 * t3457;
t3430 = t3437 - t3554;
t3453 = t3457 ^ 2;
t3432 = (-t3453 * t3454 - t3456) * t3475;
t3488 = t3430 * t3457 + t3432 * t3461;
t3445 = -qJDD(1) * t3469 - t3474 * t3475;
t3444 = qJDD(1) * t3474 - t3469 * t3475;
t3431 = (-t3453 - t3455) * t3567;
t3425 = t3438 - t3546;
t3422 = t3439 + t3548;
t3409 = -t3460 * t3426 + t3545;
t3404 = t3430 * t3461 - t3432 * t3457;
t3403 = -t3429 * t3457 + t3433 * t3461;
t3401 = -t3423 * t3457 + t3424 * t3461;
t3393 = -t3460 * t3422 + t3464 * t3488;
t3392 = -t3460 * t3425 + t3464 * t3489;
t3391 = t3464 * t3422 + t3460 * t3488;
t3390 = t3464 * t3425 + t3460 * t3489;
t3386 = -t3460 * t3431 + t3464 * t3490;
t3385 = t3464 * t3431 + t3460 * t3490;
t3355 = -t3398 * t3457 + t3399 * t3461;
t3349 = -t3460 * t3409 + t3464 * t3492;
t3348 = t3464 * t3409 + t3460 * t3492;
t3328 = t3463 * t3358 + t3459 * t3493;
t3323 = t3463 * t3356 + t3459 * t3494;
t3320 = t3463 * t3371 + t3459 * t3495;
t3310 = -t3329 * t3457 + t3347 * t3461;
t3309 = -t3324 * t3457 + t3342 * t3461;
t3300 = -t3321 * t3457 + t3338 * t3461;
t3292 = -t3460 * t3328 + t3464 * t3497;
t3291 = t3464 * t3328 + t3460 * t3497;
t3290 = -t3460 * t3323 + t3464 * t3500;
t3289 = t3464 * t3323 + t3460 * t3500;
t3280 = -t3460 * t3320 + t3464 * t3501;
t3279 = t3464 * t3320 + t3460 * t3501;
t3277 = t3463 * t3339 + t3459 * t3502;
t3255 = -t3278 * t3457 + t3293 * t3461;
t3240 = t3463 * t3281 + t3459 * t3504;
t3238 = t3463 * t3273 + t3459 * t3507;
t3237 = -t3460 * t3277 + t3464 * t3505;
t3236 = t3464 * t3277 + t3460 * t3505;
t3228 = t3463 * t3267 + t3459 * t3509;
t3217 = -t3241 * t3457 + t3265 * t3461;
t3216 = -t3239 * t3457 + t3260 * t3461;
t3205 = -t3229 * t3457 + t3248 * t3461;
t3203 = -t3460 * t3240 + t3464 * t3512;
t3202 = t3464 * t3240 + t3460 * t3512;
t3201 = -t3460 * t3238 + t3464 * t3513;
t3200 = t3464 * t3238 + t3460 * t3513;
t3197 = t3463 * t3234 + t3459 * t3514;
t3195 = t3463 * t3232 + t3459 * t3515;
t3192 = -t3460 * t3228 + t3464 * t3516;
t3191 = t3464 * t3228 + t3460 * t3516;
t3182 = t3463 * t3221 + t3459 * t3519;
t3178 = -t3198 * t3457 + t3213 * t3461;
t3177 = -t3196 * t3457 + t3212 * t3461;
t3174 = t3463 * t3210 + t3459 * t3521;
t3172 = -t3183 * t3457 + t3204 * t3461;
t3168 = -t3460 * t3197 + t3464 * t3522;
t3167 = t3464 * t3197 + t3460 * t3522;
t3164 = -t3460 * t3195 + t3464 * t3523;
t3163 = t3464 * t3195 + t3460 * t3523;
t3161 = t3463 * t3193 + t3459 * t3524;
t3160 = -t3175 * t3457 + t3188 * t3461;
t3158 = t3463 * t3189 + t3459 * t3525;
t3155 = -t3460 * t3182 + t3464 * t3527;
t3154 = t3464 * t3182 + t3460 * t3527;
t3152 = t3463 * t3180 + t3459 * t3528;
t3150 = -t3162 * t3457 + t3176 * t3461;
t3149 = -t3460 * t3174 + t3464 * t3529;
t3148 = t3464 * t3174 + t3460 * t3529;
t3147 = -t3159 * t3457 + t3173 * t3461;
t3145 = -t3153 * t3457 + t3171 * t3461;
t3143 = t3463 * t3165 + t3459 * t3530;
t3142 = -t3460 * t3161 + t3464 * t3531;
t3141 = t3464 * t3161 + t3460 * t3531;
t3140 = -t3460 * t3158 + t3464 * t3532;
t3139 = t3464 * t3158 + t3460 * t3532;
t3136 = -t3460 * t3152 + t3464 * t3534;
t3135 = t3464 * t3152 + t3460 * t3534;
t3134 = -t3144 * t3457 + t3151 * t3461;
t3132 = -t3460 * t3143 + t3464 * t3535;
t3131 = t3464 * t3143 + t3460 * t3535;
t3129 = t3463 * t3137 + t3459 * t3536;
t3128 = -t3130 * t3457 + t3133 * t3461;
t3127 = -t3460 * t3129 + t3464 * t3537;
t3126 = t3464 * t3129 + t3460 * t3537;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3445, -t3444, 0, -t3448 * t3469 + t3449 * t3474, 0, 0, 0, 0, 0, 0, -t3392 * t3469 + t3403 * t3474, -t3393 * t3469 + t3404 * t3474, -t3386 * t3469 + t3401 * t3474, -t3349 * t3469 + t3355 * t3474, 0, 0, 0, 0, 0, 0, -t3290 * t3469 + t3309 * t3474, -t3292 * t3469 + t3310 * t3474, -t3280 * t3469 + t3300 * t3474, -t3237 * t3469 + t3255 * t3474, 0, 0, 0, 0, 0, 0, -t3201 * t3469 + t3216 * t3474, -t3203 * t3469 + t3217 * t3474, -t3192 * t3469 + t3205 * t3474, -t3149 * t3469 + t3160 * t3474, 0, 0, 0, 0, 0, 0, -t3164 * t3469 + t3177 * t3474, -t3168 * t3469 + t3178 * t3474, -t3155 * t3469 + t3172 * t3474, -t3132 * t3469 + t3134 * t3474, 0, 0, 0, 0, 0, 0, -t3140 * t3469 + t3147 * t3474, -t3142 * t3469 + t3150 * t3474, -t3136 * t3469 + t3145 * t3474, -t3127 * t3469 + t3128 * t3474; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3444, t3445, 0, t3448 * t3474 + t3449 * t3469, 0, 0, 0, 0, 0, 0, t3392 * t3474 + t3403 * t3469, t3393 * t3474 + t3404 * t3469, t3386 * t3474 + t3401 * t3469, t3349 * t3474 + t3355 * t3469, 0, 0, 0, 0, 0, 0, t3290 * t3474 + t3309 * t3469, t3292 * t3474 + t3310 * t3469, t3280 * t3474 + t3300 * t3469, t3237 * t3474 + t3255 * t3469, 0, 0, 0, 0, 0, 0, t3201 * t3474 + t3216 * t3469, t3203 * t3474 + t3217 * t3469, t3192 * t3474 + t3205 * t3469, t3149 * t3474 + t3160 * t3469, 0, 0, 0, 0, 0, 0, t3164 * t3474 + t3177 * t3469, t3168 * t3474 + t3178 * t3469, t3155 * t3474 + t3172 * t3469, t3132 * t3474 + t3134 * t3469, 0, 0, 0, 0, 0, 0, t3140 * t3474 + t3147 * t3469, t3142 * t3474 + t3150 * t3469, t3136 * t3474 + t3145 * t3469, t3127 * t3474 + t3128 * t3469; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3390, t3391, t3385, t3348, 0, 0, 0, 0, 0, 0, t3289, t3291, t3279, t3236, 0, 0, 0, 0, 0, 0, t3200, t3202, t3191, t3148, 0, 0, 0, 0, 0, 0, t3163, t3167, t3154, t3131, 0, 0, 0, 0, 0, 0, t3139, t3141, t3135, t3126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3475, -qJDD(1), 0, t3449, 0, 0, 0, 0, 0, 0, t3403, t3404, t3401, t3355, 0, 0, 0, 0, 0, 0, t3309, t3310, t3300, t3255, 0, 0, 0, 0, 0, 0, t3216, t3217, t3205, t3160, 0, 0, 0, 0, 0, 0, t3177, t3178, t3172, t3134, 0, 0, 0, 0, 0, 0, t3147, t3150, t3145, t3128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3475, 0, t3448, 0, 0, 0, 0, 0, 0, t3392, t3393, t3386, t3349, 0, 0, 0, 0, 0, 0, t3290, t3292, t3280, t3237, 0, 0, 0, 0, 0, 0, t3201, t3203, t3192, t3149, 0, 0, 0, 0, 0, 0, t3164, t3168, t3155, t3132, 0, 0, 0, 0, 0, 0, t3140, t3142, t3136, t3127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3390, t3391, t3385, t3348, 0, 0, 0, 0, 0, 0, t3289, t3291, t3279, t3236, 0, 0, 0, 0, 0, 0, t3200, t3202, t3191, t3148, 0, 0, 0, 0, 0, 0, t3163, t3167, t3154, t3131, 0, 0, 0, 0, 0, 0, t3139, t3141, t3135, t3126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3433, t3430, t3424, t3399, 0, 0, 0, 0, 0, 0, t3342, t3347, t3338, t3293, 0, 0, 0, 0, 0, 0, t3260, t3265, t3248, t3188, 0, 0, 0, 0, 0, 0, t3212, t3213, t3204, t3151, 0, 0, 0, 0, 0, 0, t3173, t3176, t3171, t3133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3429, t3432, t3423, t3398, 0, 0, 0, 0, 0, 0, t3324, t3329, t3321, t3278, 0, 0, 0, 0, 0, 0, t3239, t3241, t3229, t3175, 0, 0, 0, 0, 0, 0, t3196, t3198, t3183, t3144, 0, 0, 0, 0, 0, 0, t3159, t3162, t3153, t3130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3425, t3422, t3431, t3409, 0, 0, 0, 0, 0, 0, t3323, t3328, t3320, t3277, 0, 0, 0, 0, 0, 0, t3238, t3240, t3228, t3174, 0, 0, 0, 0, 0, 0, t3195, t3197, t3182, t3143, 0, 0, 0, 0, 0, 0, t3158, t3161, t3152, t3129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3376, t3377, t3357, t3319, 0, 0, 0, 0, 0, 0, t3303, t3307, t3283, t3223, 0, 0, 0, 0, 0, 0, t3249, t3254, t3245, t3179, 0, 0, 0, 0, 0, 0, t3208, t3209, t3199, t3146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3378, t3381, t3359, t3318, 0, 0, 0, 0, 0, 0, t3274, t3282, t3268, t3211, 0, 0, 0, 0, 0, 0, t3233, t3235, t3222, t3166, 0, 0, 0, 0, 0, 0, t3190, t3194, t3181, t3138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3356, t3358, t3371, t3339, 0, 0, 0, 0, 0, 0, t3273, t3281, t3267, t3210, 0, 0, 0, 0, 0, 0, t3232, t3234, t3221, t3165, 0, 0, 0, 0, 0, 0, t3189, t3193, t3180, t3137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3337, t3326, t3314, t3251, 0, 0, 0, 0, 0, 0, t3272, t3276, t3259, t3187, 0, 0, 0, 0, 0, 0, t3225, t3227, t3220, t3157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3327, t3340, t3316, -t3538, 0, 0, 0, 0, 0, 0, -t3285, t3543, -t3308, -t3243, 0, 0, 0, 0, 0, 0, -t3252, -t3256, -t3230, -t3169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3313, -t3542, t3325, t3266, 0, 0, 0, 0, 0, 0, t3271, t3275, t3258, t3186, 0, 0, 0, 0, 0, 0, t3224, t3226, t3219, t3156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3312, t3302, t3286, t3215, 0, 0, 0, 0, 0, 0, t3253, t3257, t3231, t3170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3301, t3317, t3288, t3214, 0, 0, 0, 0, 0, 0, -t3261, -t3263, -t3284, -t3206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3285, -t3543, t3308, t3243, 0, 0, 0, 0, 0, 0, t3252, t3256, t3230, t3169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3294, t3270, t3262, t3185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3269, t3299, t3264, t3184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3261, t3263, t3284, t3206;];
f_new_reg  = t1;
