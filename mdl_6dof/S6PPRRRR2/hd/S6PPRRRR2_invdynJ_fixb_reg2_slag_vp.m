% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PPRRRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:05:32
% EndTime: 2019-03-08 19:05:48
% DurationCPUTime: 9.91s
% Computational Cost: add. (11154->628), mult. (28035->890), div. (0->0), fcn. (25263->18), ass. (0->277)
t363 = cos(pkin(6));
t208 = qJD(1) * t363 + qJD(2);
t225 = sin(pkin(13));
t227 = sin(pkin(6));
t232 = sin(qJ(3));
t228 = cos(pkin(13));
t362 = cos(pkin(7));
t296 = t228 * t362;
t285 = t232 * t296;
t379 = cos(qJ(3));
t251 = (t225 * t379 + t285) * t227;
t226 = sin(pkin(7));
t343 = t226 * t232;
t109 = qJD(1) * t251 + t208 * t343;
t231 = sin(qJ(4));
t235 = cos(qJ(4));
t283 = pkin(4) * t231 - pkin(10) * t235;
t185 = t283 * qJD(4);
t400 = -t109 + t185;
t382 = -pkin(4) * t235 - pkin(10) * t231;
t190 = -pkin(3) + t382;
t230 = sin(qJ(5));
t345 = t225 * t227;
t310 = qJD(1) * t345;
t189 = t232 * t310;
t274 = t379 * t296;
t266 = t227 * t274;
t258 = qJD(1) * t266;
t311 = t226 * t379;
t243 = -t208 * t311 + t189 - t258;
t234 = cos(qJ(5));
t323 = qJD(5) * t234;
t325 = qJD(5) * t230;
t327 = qJD(4) * t234;
t338 = t234 * t235;
t370 = t243 * t338 + t190 * t323 + (-t231 * t327 - t235 * t325) * pkin(9) + t400 * t230;
t328 = qJD(4) * t231;
t340 = t230 * t235;
t376 = pkin(9) * t230;
t399 = t234 * t400 - t243 * t340 + t328 * t376;
t210 = pkin(9) * t338;
t273 = pkin(5) * t231 - pkin(11) * t338;
t398 = t273 * qJD(4) + (-t210 + (pkin(11) * t231 - t190) * t230) * qJD(5) + t399;
t326 = qJD(4) * t235;
t308 = t230 * t326;
t259 = t231 * t323 + t308;
t397 = pkin(11) * t259 - t370;
t381 = pkin(11) + pkin(10);
t312 = qJD(5) * t381;
t330 = qJD(3) * t235;
t182 = t283 * qJD(3);
t104 = qJD(3) * pkin(9) + t109;
t102 = t231 * t104;
t315 = t227 * t228 * t226;
t141 = -qJD(1) * t315 + t208 * t362;
t76 = t141 * t235 - t102;
t60 = t182 * t230 + t234 * t76;
t396 = t60 + (-pkin(11) * t330 + t312) * t230;
t59 = t182 * t234 - t230 * t76;
t395 = -qJD(3) * t273 - t234 * t312 - t59;
t332 = qJD(3) * t231;
t173 = t230 * t332 - t327;
t329 = qJD(4) * t230;
t175 = t234 * t332 + t329;
t229 = sin(qJ(6));
t233 = cos(qJ(6));
t115 = t173 * t233 + t175 * t229;
t278 = t173 * t229 - t175 * t233;
t354 = t115 * t278;
t209 = -qJD(5) + t330;
t202 = qJDD(1) * t363 + qJDD(2);
t139 = -qJDD(1) * t315 + t202 * t362;
t358 = qJDD(3) * pkin(9);
t276 = t227 * t285;
t304 = qJD(3) * t379;
t291 = t226 * t304;
t301 = qJDD(1) * t345;
t279 = -qJD(3) * t258 - qJDD(1) * t276 - t202 * t343 - t208 * t291 - t301 * t379;
t290 = qJD(3) * t310;
t68 = -t232 * t290 - t279;
t66 = t68 + t358;
t316 = -t139 * t231 - t141 * t326 - t235 * t66;
t28 = -t104 * t328 - t316;
t26 = qJDD(4) * pkin(10) + t28;
t331 = qJD(3) * t232;
t309 = t226 * t331;
t272 = qJD(1) * qJD(3) * t276 - qJDD(1) * t266 - t202 * t311 + t208 * t309 + t232 * t301 + t290 * t379;
t46 = qJD(3) * t185 + qJDD(3) * t190 + t272;
t353 = t141 * t231;
t77 = t104 * t235 + t353;
t75 = qJD(4) * pkin(10) + t77;
t98 = qJD(3) * t190 + t243;
t271 = -t230 * t46 - t234 * t26 - t323 * t98 + t325 * t75;
t40 = -t230 * t75 + t234 * t98;
t394 = t40 * t209 - t271;
t320 = qJD(3) * qJD(4);
t303 = t235 * t320;
t318 = t231 * qJDD(3);
t393 = qJD(4) * qJD(5) + t303 + t318;
t392 = -t115 ^ 2 + t278 ^ 2;
t200 = -qJD(6) + t209;
t324 = qJD(5) * t231;
t302 = qJD(3) * t324;
t110 = (-qJDD(4) + t302) * t230 - t393 * t234;
t292 = t230 * t393 + t234 * t302;
t262 = qJDD(4) * t234 - t292;
t321 = qJD(6) * t233;
t322 = qJD(6) * t229;
t42 = t110 * t233 + t173 * t321 + t175 * t322 - t229 * t262;
t391 = -t115 * t200 - t42;
t38 = -pkin(11) * t175 + t40;
t36 = -pkin(5) * t209 + t38;
t41 = t230 * t98 + t234 * t75;
t39 = -pkin(11) * t173 + t41;
t218 = t235 * qJDD(3);
t170 = t231 * t320 + qJDD(5) - t218;
t9 = -qJD(5) * t41 - t230 * t26 + t234 * t46;
t6 = pkin(5) * t170 + pkin(11) * t110 + t9;
t7 = pkin(11) * t262 - t271;
t1 = (qJD(6) * t36 + t7) * t233 + t229 * t6 - t39 * t322;
t299 = t226 * t363;
t275 = t379 * t299;
t344 = t225 * t232;
t120 = t227 * t344 - t266 - t275;
t224 = qJ(5) + qJ(6);
t219 = sin(t224);
t220 = cos(t224);
t361 = cos(pkin(12));
t282 = t363 * t361;
t360 = sin(pkin(12));
t249 = t225 * t360 - t228 * t282;
t298 = t227 * t361;
t122 = t226 * t249 - t298 * t362;
t150 = t225 * t282 + t228 * t360;
t385 = t226 * t298 + t249 * t362;
t92 = t150 * t379 - t232 * t385;
t54 = t122 * t231 + t235 * t92;
t281 = t363 * t360;
t250 = t225 * t361 + t228 * t281;
t297 = t227 * t360;
t123 = t226 * t250 + t297 * t362;
t151 = -t225 * t281 + t228 * t361;
t384 = -t226 * t297 + t250 * t362;
t94 = t151 * t379 - t232 * t384;
t56 = t123 * t231 + t235 * t94;
t74 = -qJD(4) * pkin(4) - t76;
t61 = pkin(5) * t173 + t74;
t91 = t150 * t232 + t379 * t385;
t93 = t151 * t232 + t379 * t384;
t121 = t232 * t299 + t251;
t255 = t362 * t363 - t315;
t97 = t121 * t235 + t231 * t255;
t390 = t115 * t61 - g(1) * (-t219 * t93 - t220 * t56) - g(2) * (-t219 * t91 - t220 * t54) - g(3) * (-t120 * t219 - t220 * t97) - t1;
t367 = t233 * t39;
t11 = t229 * t36 + t367;
t2 = -qJD(6) * t11 - t229 * t7 + t233 * t6;
t389 = t278 * t61 - g(1) * (-t219 * t56 + t220 * t93) - g(2) * (-t219 * t54 + t220 * t91) - g(3) * (t120 * t220 - t219 * t97) + t2;
t247 = qJD(6) * t278 + t110 * t229 + t233 * t262;
t388 = t200 * t278 + t247;
t387 = t41 * t209 - t9;
t143 = t190 * t230 + t210;
t57 = t120 * t234 - t230 * t97;
t386 = -g(1) * (-t230 * t56 + t234 * t93) - g(2) * (-t230 * t54 + t234 * t91) - g(3) * t57;
t307 = t234 * t326;
t383 = -t230 * t324 + t307;
t317 = qJD(5) + qJD(6);
t377 = pkin(5) * t230;
t172 = t234 * t190;
t339 = t231 * t234;
t119 = -pkin(11) * t339 + t172 + (-pkin(5) - t376) * t235;
t341 = t230 * t231;
t130 = -pkin(11) * t341 + t143;
t79 = t119 * t233 - t130 * t229;
t374 = qJD(6) * t79 + t229 * t398 - t233 * t397;
t80 = t119 * t229 + t130 * t233;
t373 = -qJD(6) * t80 + t229 * t397 + t233 * t398;
t195 = t381 * t230;
t196 = t381 * t234;
t135 = -t195 * t233 - t196 * t229;
t372 = qJD(6) * t135 + t229 * t395 - t233 * t396;
t136 = -t195 * t229 + t196 * t233;
t371 = -qJD(6) * t136 + t229 * t396 + t233 * t395;
t369 = qJD(3) * pkin(3);
t368 = t229 * t39;
t364 = -qJD(5) * t143 + t399;
t359 = qJDD(3) * pkin(3);
t357 = qJDD(4) * pkin(4);
t356 = t243 * t231;
t355 = t110 * t230;
t352 = t173 * t209;
t351 = t173 * t230;
t350 = t175 * t173;
t349 = t175 * t209;
t348 = t175 * t234;
t347 = t219 * t235;
t346 = t220 * t235;
t342 = t229 * t230;
t176 = -t233 * t234 + t342;
t337 = -t176 * t330 - t233 * t323 - t234 * t321 + t317 * t342;
t177 = t229 * t234 + t230 * t233;
t125 = t317 * t177;
t336 = -t177 * t330 + t125;
t222 = t231 ^ 2;
t223 = t235 ^ 2;
t334 = t222 - t223;
t238 = qJD(3) ^ 2;
t314 = t235 * t238 * t231;
t313 = pkin(9) + t377;
t294 = pkin(5) * t259 + pkin(9) * t326 + t356;
t293 = t104 * t326 - t139 * t235 + t141 * t328 + t231 * t66;
t289 = t231 * t303;
t288 = pkin(5) * t325 - t353 - (qJD(3) * t377 + t104) * t235;
t287 = qJD(4) * t304;
t58 = t120 * t230 + t234 * t97;
t23 = -t229 * t58 + t233 * t57;
t24 = t229 * t57 + t233 * t58;
t280 = -t230 * t41 - t234 * t40;
t155 = t231 * t362 + t235 * t343;
t128 = -t155 * t230 - t234 * t311;
t261 = -t155 * t234 + t230 * t311;
t81 = t128 * t233 + t229 * t261;
t82 = t128 * t229 - t233 * t261;
t215 = pkin(5) * t234 + pkin(4);
t277 = -t215 * t235 - t231 * t381;
t270 = t170 * t230 - t209 * t323;
t269 = t170 * t234 + t209 * t325;
t53 = t122 * t235 - t231 * t92;
t55 = t123 * t235 - t231 * t94;
t96 = t121 * t231 - t235 * t255;
t268 = g(1) * t55 + g(2) * t53 - g(3) * t96;
t267 = g(1) * t56 + g(2) * t54 + g(3) * t97;
t27 = t293 - t357;
t265 = qJDD(3) * t379 - t232 * t238;
t264 = g(1) * t93 + g(2) * t91 + g(3) * t120;
t263 = g(1) * t94 + g(2) * t92 + g(3) * t121;
t260 = -t268 - t27;
t154 = t231 * t343 - t235 * t362;
t257 = -pkin(10) * t170 - t209 * t74;
t256 = t262 * t234;
t103 = t243 - t369;
t254 = -pkin(9) * qJDD(4) + (t103 - t243 - t369) * qJD(4);
t253 = qJD(3) * t109 + t264;
t252 = -g(1) * t297 + g(2) * t298 - g(3) * t363;
t248 = -pkin(10) * qJD(5) * t209 - t260;
t237 = qJD(4) ^ 2;
t67 = t272 - t359;
t241 = -pkin(9) * t237 + t253 + t359 - t67;
t239 = t293 * t231 + t28 * t235 + (-t231 * t77 - t235 * t76) * qJD(4) - t263;
t186 = t313 * t231;
t162 = qJDD(6) + t170;
t148 = t176 * t231;
t147 = t177 * t231;
t142 = -pkin(9) * t340 + t172;
t127 = qJD(4) * t155 + t231 * t291;
t126 = -qJD(4) * t154 + t235 * t291;
t113 = t120 * pkin(3);
t112 = t121 * qJD(3);
t111 = (t275 + (t274 - t344) * t227) * qJD(3);
t89 = t93 * pkin(3);
t88 = t91 * pkin(3);
t85 = -t322 * t341 + (t317 * t339 + t308) * t233 + t383 * t229;
t84 = t125 * t231 + t229 * t308 - t233 * t307;
t73 = qJD(5) * t261 - t126 * t230 + t234 * t309;
t72 = qJD(5) * t128 + t126 * t234 + t230 * t309;
t52 = -qJD(4) * t96 + t111 * t235;
t51 = qJD(4) * t97 + t111 * t231;
t18 = -qJD(6) * t82 - t229 * t72 + t233 * t73;
t17 = qJD(6) * t81 + t229 * t73 + t233 * t72;
t16 = -pkin(5) * t262 + t27;
t15 = qJD(5) * t57 + t112 * t230 + t234 * t52;
t14 = -qJD(5) * t58 + t112 * t234 - t230 * t52;
t13 = t233 * t38 - t368;
t12 = -t229 * t38 - t367;
t10 = t233 * t36 - t368;
t4 = -qJD(6) * t24 + t14 * t233 - t15 * t229;
t3 = qJD(6) * t23 + t14 * t229 + t15 * t233;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t202 * t363 - g(3) + (t225 ^ 2 + t228 ^ 2) * t227 ^ 2 * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t112 - qJDD(3) * t120, -qJD(3) * t111 - qJDD(3) * t121, 0, t109 * t111 + t112 * t243 + t120 * t272 + t121 * t68 + t139 * t255 - g(3), 0, 0, 0, 0, 0, 0, -t120 * t218 - qJD(4) * t51 - qJDD(4) * t96 + (-t112 * t235 + t120 * t328) * qJD(3), t120 * t318 - qJD(4) * t52 - qJDD(4) * t97 + (t112 * t231 + t120 * t326) * qJD(3) (t231 * t96 + t235 * t97) * qJDD(3) + (t231 * t51 + t235 * t52 + (-t231 * t97 + t235 * t96) * qJD(4)) * qJD(3), t103 * t112 + t120 * t67 + t28 * t97 + t293 * t96 - t51 * t76 + t52 * t77 - g(3), 0, 0, 0, 0, 0, 0, -t14 * t209 + t170 * t57 + t173 * t51 - t262 * t96, -t110 * t96 + t15 * t209 - t170 * t58 + t175 * t51, t110 * t57 - t14 * t175 - t15 * t173 + t262 * t58, t14 * t40 + t15 * t41 + t27 * t96 - t271 * t58 + t51 * t74 + t57 * t9 - g(3), 0, 0, 0, 0, 0, 0, t115 * t51 + t162 * t23 - t200 * t4 - t247 * t96, -t162 * t24 + t200 * t3 - t278 * t51 - t42 * t96, -t115 * t3 + t23 * t42 + t24 * t247 + t278 * t4, t1 * t24 + t10 * t4 + t11 * t3 + t16 * t96 + t2 * t23 + t51 * t61 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252 + t202, 0, 0, 0, 0, 0, 0, t265 * t226 (-qJDD(3) * t232 - t238 * t379) * t226, 0, t139 * t362 + (-t379 * t272 + t232 * t68 + (t109 * t379 + t232 * t243) * qJD(3)) * t226 + t252, 0, 0, 0, 0, 0, 0, -t127 * qJD(4) - t154 * qJDD(4) + (-t231 * t287 + t235 * t265) * t226, -t126 * qJD(4) - t155 * qJDD(4) + (-t231 * t265 - t235 * t287) * t226 (t154 * t231 + t155 * t235) * qJDD(3) + (t126 * t235 + t127 * t231 + (t154 * t235 - t155 * t231) * qJD(4)) * qJD(3), t77 * t126 - t76 * t127 + t293 * t154 + t28 * t155 + (t103 * t331 - t379 * t67) * t226 + t252, 0, 0, 0, 0, 0, 0, t127 * t173 + t128 * t170 - t154 * t262 - t209 * t73, -t110 * t154 + t127 * t175 + t170 * t261 + t209 * t72, t110 * t128 - t173 * t72 - t175 * t73 - t261 * t262, t127 * t74 + t128 * t9 + t154 * t27 + t261 * t271 + t40 * t73 + t41 * t72 + t252, 0, 0, 0, 0, 0, 0, t115 * t127 - t154 * t247 + t162 * t81 - t18 * t200, -t127 * t278 - t154 * t42 - t162 * t82 + t17 * t200, -t115 * t17 + t18 * t278 + t247 * t82 + t42 * t81, t1 * t82 + t10 * t18 + t11 * t17 + t127 * t61 + t154 * t16 + t2 * t81 + t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t253 - t272 (-t243 + t189) * qJD(3) + t263 + t279, 0, 0, qJDD(3) * t222 + 0.2e1 * t289, 0.2e1 * t218 * t231 - 0.2e1 * t320 * t334, qJDD(4) * t231 + t235 * t237, qJDD(3) * t223 - 0.2e1 * t289, qJDD(4) * t235 - t231 * t237, 0, t231 * t254 + t235 * t241, -t231 * t241 + t235 * t254, t239 + (qJD(3) * t243 + t358) * (t222 + t223) -t67 * pkin(3) + g(1) * t89 + g(2) * t88 + g(3) * t113 - t103 * t109 - (t231 * t76 - t235 * t77) * t243 + t239 * pkin(9), -t110 * t339 + t175 * t383 (-t173 * t234 - t175 * t230) * t326 + (t256 + t355 + (-t348 + t351) * qJD(5)) * t231 (-t209 * t327 + t110) * t235 + (qJD(4) * t175 + t269) * t231, t173 * t259 - t262 * t341 (t209 * t329 - t262) * t235 + (-qJD(4) * t173 - t270) * t231, -t170 * t235 - t209 * t328, t142 * t170 - t364 * t209 - t263 * t230 + (-t9 + (pkin(9) * t173 + t230 * t74) * qJD(4) + t264 * t234) * t235 + (-pkin(9) * t262 + t40 * qJD(4) + t173 * t243 + t27 * t230 + t323 * t74) * t231, -t143 * t170 + t370 * t209 - t263 * t234 + (-t271 + (pkin(9) * t175 + t234 * t74) * qJD(4) - t264 * t230) * t235 + (-pkin(9) * t110 - qJD(4) * t41 + t175 * t243 + t27 * t234 - t325 * t74) * t231, t143 * t262 + t142 * t110 - t364 * t175 - t370 * t173 + t280 * t326 + (t271 * t230 - t9 * t234 + (t230 * t40 - t234 * t41) * qJD(5) + t264) * t231, -t271 * t143 + t9 * t142 + t74 * t356 - g(1) * (t382 * t93 - t89) - g(2) * (t382 * t91 - t88) - g(3) * (t120 * t382 - t113) + t370 * t41 + t364 * t40 + (t231 * t27 + t326 * t74 - t263) * pkin(9), t148 * t42 + t278 * t84, t115 * t84 + t147 * t42 - t148 * t247 + t278 * t85, -t148 * t162 + t200 * t84 + t235 * t42 - t278 * t328, t115 * t85 - t147 * t247, -t115 * t328 - t147 * t162 + t200 * t85 - t235 * t247, -t162 * t235 - t200 * t328, t79 * t162 - t2 * t235 + t10 * t328 - t186 * t247 + t16 * t147 + t61 * t85 - g(1) * (t219 * t94 - t346 * t93) - g(2) * (t219 * t92 - t346 * t91) - g(3) * (-t120 * t346 + t121 * t219) - t373 * t200 + t294 * t115, -t80 * t162 + t1 * t235 - t11 * t328 - t186 * t42 - t16 * t148 - t61 * t84 - g(1) * (t220 * t94 + t347 * t93) - g(2) * (t220 * t92 + t347 * t91) - g(3) * (t120 * t347 + t121 * t220) + t374 * t200 - t294 * t278, -t1 * t147 + t10 * t84 - t11 * t85 - t115 * t374 + t148 * t2 + t231 * t264 + t247 * t80 + t278 * t373 + t42 * t79, t1 * t80 + t2 * t79 + t16 * t186 - g(1) * (t277 * t93 + t313 * t94 - t89) - g(2) * (t277 * t91 + t313 * t92 - t88) - g(3) * (t120 * t277 + t121 * t313 - t113) + t294 * t61 + t374 * t11 + t373 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314, t334 * t238, t318, t314, t218, qJDD(4), qJD(4) * t77 - t103 * t332 - t268 - t293, -t103 * t330 + (t76 + t102) * qJD(4) + t267 + t316, 0, 0, -t209 * t348 - t355 (-t110 + t352) * t234 + (t262 + t349) * t230 (-t175 * t231 + t209 * t338) * qJD(3) + t270, -t209 * t351 + t256 (t173 * t231 - t209 * t340) * qJD(3) + t269, t209 * t332, -pkin(4) * t292 + t59 * t209 - t40 * t332 - t77 * t173 + t257 * t230 + (-t248 + t357) * t234, pkin(4) * t110 - t175 * t77 - t209 * t60 + t230 * t248 + t234 * t257 + t332 * t41, t60 * t173 + t59 * t175 + ((qJD(5) * t175 + t262) * pkin(10) + t394) * t234 + ((qJD(5) * t173 - t110) * pkin(10) + t387) * t230 - t267, -t40 * t59 - t41 * t60 - t74 * t77 + t260 * pkin(4) + (qJD(5) * t280 - t9 * t230 - t234 * t271 - t267) * pkin(10), -t177 * t42 + t278 * t337, t115 * t337 + t176 * t42 + t177 * t247 + t278 * t336, t162 * t177 + t200 * t337 + t278 * t332, t115 * t336 - t176 * t247, t115 * t332 - t162 * t176 + t200 * t336, t200 * t332, -t10 * t332 + t115 * t288 + t135 * t162 + t16 * t176 - t200 * t371 + t215 * t247 - t220 * t268 + t336 * t61, t11 * t332 - t136 * t162 + t16 * t177 + t200 * t372 + t215 * t42 + t219 * t268 - t278 * t288 - t337 * t61, -t1 * t176 + t10 * t337 - t11 * t336 - t115 * t372 + t135 * t42 + t136 * t247 - t177 * t2 + t278 * t371 - t267, t1 * t136 + t2 * t135 - t16 * t215 - g(1) * (t215 * t55 + t381 * t56) - g(2) * (t215 * t53 + t381 * t54) - g(3) * (-t215 * t96 + t381 * t97) + t288 * t61 + t372 * t11 + t371 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, -t173 ^ 2 + t175 ^ 2, -t110 - t352, -t350, t262 - t349, t170, -t74 * t175 + t386 - t387, t74 * t173 - g(1) * (-t230 * t93 - t234 * t56) - g(2) * (-t230 * t91 - t234 * t54) + g(3) * t58 - t394, 0, 0, -t354, t392, t391, t354, t388, t162, t12 * t200 + (-t115 * t175 + t162 * t233 + t200 * t322) * pkin(5) + t389, -t13 * t200 + (-t162 * t229 + t175 * t278 + t200 * t321) * pkin(5) + t390, -t10 * t115 - t11 * t278 + t115 * t13 - t278 * t12 + (t229 * t247 + t233 * t42 + (-t115 * t233 - t229 * t278) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t229 + t2 * t233 - t61 * t175 + (-t10 * t229 + t11 * t233) * qJD(6) + t386) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t354, t392, t391, t354, t388, t162, -t11 * t200 + t389, -t10 * t200 + t390, 0, 0;];
tau_reg  = t5;
