% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PPRRRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRRR2_inertiaDJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:05:34
% EndTime: 2019-03-08 19:05:42
% DurationCPUTime: 3.98s
% Computational Cost: add. (4383->352), mult. (12839->645), div. (0->0), fcn. (13644->14), ass. (0->165)
t102 = sin(qJ(6));
t103 = sin(qJ(5));
t207 = cos(qJ(6));
t208 = -pkin(11) - pkin(10);
t143 = t208 * t207;
t133 = t103 * t143;
t106 = cos(qJ(5));
t212 = t208 * t106;
t55 = t102 * t212 + t133;
t104 = sin(qJ(4));
t107 = cos(qJ(4));
t100 = sin(pkin(7));
t101 = sin(pkin(6));
t193 = cos(pkin(13));
t194 = cos(pkin(7));
t195 = cos(pkin(6));
t120 = -t101 * t193 * t100 + t195 * t194;
t105 = sin(qJ(3));
t108 = cos(qJ(3));
t137 = t194 * t193;
t150 = t100 * t195;
t99 = sin(pkin(13));
t47 = t105 * t150 + (t105 * t137 + t108 * t99) * t101;
t37 = t104 * t120 + t47 * t107;
t46 = -t108 * t150 + (t105 * t99 - t108 * t137) * t101;
t42 = t46 * qJD(3);
t16 = qJD(4) * t37 - t42 * t104;
t36 = t47 * t104 - t107 * t120;
t186 = qJD(3) * t108;
t158 = t100 * t186;
t192 = t100 * t105;
t65 = t104 * t194 + t107 * t192;
t51 = qJD(4) * t65 + t104 * t158;
t64 = t104 * t192 - t107 * t194;
t202 = t16 * t64 + t36 * t51;
t152 = t207 * qJD(6);
t211 = t207 * qJD(5) + t152;
t95 = t103 ^ 2;
t97 = t106 ^ 2;
t200 = t95 - t97;
t151 = qJD(5) * t200;
t210 = qJD(5) + qJD(6);
t181 = qJD(5) * t107;
t161 = t103 * t181;
t94 = t104 * qJD(4);
t122 = t106 * t94 + t161;
t204 = t107 * pkin(4);
t139 = -pkin(10) * t104 - t204;
t132 = -pkin(3) + t139;
t124 = t106 * t132;
t138 = pkin(4) * t104 - pkin(10) * t107;
t125 = t138 * t103;
t38 = pkin(9) * t122 - qJD(4) * t125 - qJD(5) * t124;
t209 = t208 * t104 - pkin(3) - t204;
t206 = t103 * pkin(9);
t205 = t106 * pkin(4);
t13 = t36 * t16;
t43 = t47 * qJD(3);
t203 = t43 * t46;
t40 = t64 * t51;
t188 = t106 * t107;
t90 = pkin(9) * t188;
t60 = t103 * t132 + t90;
t96 = t104 ^ 2;
t199 = -t107 ^ 2 + t96;
t198 = t104 * t16;
t197 = t104 * t51;
t196 = t108 * t43;
t191 = t100 * t108;
t190 = t102 * t103;
t189 = t103 * t104;
t187 = qJD(3) * t105;
t185 = qJD(4) * t103;
t184 = qJD(4) * t106;
t183 = qJD(5) * t103;
t182 = qJD(5) * t106;
t180 = qJD(6) * t102;
t179 = t107 * qJD(4);
t178 = -0.2e1 * pkin(3) * qJD(4);
t177 = -0.2e1 * pkin(4) * qJD(5);
t176 = t107 * t206;
t175 = pkin(5) * t183;
t174 = pkin(5) * t180;
t172 = pkin(9) * t179;
t170 = t36 * t183;
t169 = t64 * t183;
t167 = t102 * t189;
t165 = -pkin(5) - t206;
t164 = t207 * t106;
t163 = t103 * t179;
t162 = t104 * t183;
t160 = t106 * t181;
t159 = t100 * t187;
t157 = t103 * t182;
t156 = t104 * t179;
t155 = t106 * t179;
t154 = qJD(4) * t207;
t148 = t199 * qJD(4);
t147 = 0.2e1 * t156;
t146 = pkin(5) * t152;
t145 = t208 * t190;
t144 = t96 * t157;
t142 = t104 * t155;
t141 = t107 * t154;
t18 = -t103 * t37 + t106 * t46;
t19 = t103 * t46 + t106 * t37;
t136 = -t103 * t19 - t106 * t18;
t126 = t103 * t191 - t106 * t65;
t127 = t103 * t65 + t106 * t191;
t135 = t103 * t126 + t106 * t127;
t59 = t124 - t176;
t134 = -t103 * t60 - t106 * t59;
t12 = t102 * t18 + t207 * t19;
t31 = -t102 * t127 - t126 * t207;
t131 = t103 * t16 + t36 * t182;
t130 = -t106 * t16 + t170;
t129 = t103 * t51 + t64 * t182;
t128 = -t106 * t51 + t169;
t109 = (-t209 * t103 - t90) * qJD(5) + (t107 * t212 + (-t165 + t205) * t104) * qJD(4);
t121 = t104 * t182 + t163;
t111 = -pkin(11) * t121 - t38;
t114 = t209 * t106 + t165 * t107;
t112 = t207 * t114;
t54 = -pkin(11) * t189 + t60;
t9 = -qJD(6) * t112 - t102 * t109 - t207 * t111 + t54 * t180;
t74 = t102 * t106 + t207 * t103;
t56 = -t207 * t212 + t145;
t17 = -qJD(4) * t36 - t42 * t107;
t5 = -t19 * qJD(5) - t103 * t17 + t106 * t43;
t6 = qJD(5) * t18 + t103 * t43 + t106 * t17;
t119 = t136 * qJD(5) - t103 * t5 + t106 * t6;
t50 = t64 * qJD(4) - t107 * t158;
t23 = qJD(5) * t127 - t103 * t159 + t106 * t50;
t24 = qJD(5) * t126 + t103 * t50 + t106 * t159;
t118 = qJD(5) * t135 - t103 * t24 - t106 * t23;
t39 = -t60 * qJD(5) + (pkin(9) * t189 + t106 * t138) * qJD(4);
t117 = qJD(5) * t134 - t103 * t39 - t106 * t38;
t116 = t198 + t107 * t17 + (-t104 * t37 + t107 * t36) * qJD(4);
t115 = t197 - t107 * t50 + (-t104 * t65 + t107 * t64) * qJD(4);
t113 = t102 * t114;
t49 = t210 * t74;
t28 = t207 * t54 + t113;
t110 = -t102 * t111 + t207 * t109;
t93 = -pkin(5) * t106 - pkin(4);
t86 = -0.2e1 * t156;
t76 = (pkin(5) * t103 + pkin(9)) * t104;
t73 = -t164 + t190;
t63 = t104 * t164 - t167;
t62 = t74 * t104;
t58 = pkin(5) * t121 + t172;
t57 = -t103 * t155 + t104 * t151;
t48 = -t211 * t106 + t210 * t190;
t35 = -t56 * qJD(6) + (t106 * t143 - t145) * qJD(5);
t34 = -qJD(5) * t55 - qJD(6) * t133 - t212 * t180;
t33 = t103 * t141 - t102 * t162 - qJD(6) * t167 + (t102 * t179 + t211 * t104) * t106;
t32 = t102 * t163 + t49 * t104 - t106 * t141;
t30 = t102 * t126 - t127 * t207;
t27 = -t102 * t54 + t112;
t11 = -t102 * t19 + t207 * t18;
t10 = -qJD(6) * t28 + t110;
t8 = -t31 * qJD(6) + t102 * t23 + t207 * t24;
t7 = -t102 * t24 - t126 * t180 + t127 * t152 + t207 * t23;
t2 = -t12 * qJD(6) - t102 * t6 + t207 * t5;
t1 = -t102 * t5 - t18 * t152 + t19 * t180 - t207 * t6;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t42 * t47 + 0.2e1 * t203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t17 * t37 + 0.2e1 * t13 + 0.2e1 * t203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t18 * t5 + 0.2e1 * t19 * t6 + 0.2e1 * t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t1 * t12 + 0.2e1 * t11 * t2 + 0.2e1 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t105 * t42 - t196 + (t105 * t46 + t108 * t47) * qJD(3)) * t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t65 - t37 * t50 + (t46 * t187 - t196) * t100 + t202, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126 * t6 - t127 * t5 + t18 * t24 - t19 * t23 + t202, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t31 + t11 * t8 - t12 * t7 + t2 * t30 + t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t100 ^ 2 * t105 * t186 - 0.2e1 * t65 * t50 + 0.2e1 * t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t126 * t23 - 0.2e1 * t127 * t24 + 0.2e1 * t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t30 * t8 - 0.2e1 * t31 * t7 + 0.2e1 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t42, 0, 0, 0, 0, 0, 0, 0, 0, -t107 * t43 + t46 * t94, t104 * t43 + t46 * t179, t116, -pkin(3) * t43 + pkin(9) * t116, 0, 0, 0, 0, 0, 0 (t36 * t185 - t5) * t107 + (qJD(4) * t18 + t131) * t104 (t36 * t184 + t6) * t107 + (-qJD(4) * t19 - t130) * t104, t136 * t179 + (-t103 * t6 - t106 * t5 + (t103 * t18 - t106 * t19) * qJD(5)) * t104, t18 * t39 - t19 * t38 + t5 * t59 + t6 * t60 + (t36 * t179 + t198) * pkin(9), 0, 0, 0, 0, 0, 0, -t107 * t2 + t11 * t94 + t16 * t62 + t33 * t36, -t1 * t107 - t12 * t94 + t16 * t63 - t32 * t36, t1 * t62 + t11 * t32 - t12 * t33 - t2 * t63, -t1 * t28 + t10 * t11 - t12 * t9 + t16 * t76 + t2 * t27 + t36 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t158, 0, 0, 0, 0, 0, 0, 0, 0 (-t107 * t187 - t108 * t94) * t100 (t104 * t187 - t108 * t179) * t100, t115, -pkin(3) * t159 + pkin(9) * t115, 0, 0, 0, 0, 0, 0 (t64 * t185 - t24) * t107 + (-qJD(4) * t127 + t129) * t104 (t64 * t184 - t23) * t107 + (qJD(4) * t126 - t128) * t104, t135 * t179 + (t103 * t23 - t106 * t24 + (-t103 * t127 + t106 * t126) * qJD(5)) * t104, -t23 * t60 + t24 * t59 + t38 * t126 - t39 * t127 + (t64 * t179 + t197) * pkin(9), 0, 0, 0, 0, 0, 0, -t107 * t8 + t30 * t94 + t33 * t64 + t51 * t62, -t107 * t7 - t31 * t94 - t32 * t64 + t51 * t63, t30 * t32 - t31 * t33 + t62 * t7 - t63 * t8, t10 * t30 + t27 * t8 - t28 * t7 - t31 * t9 + t51 * t76 + t58 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, -0.2e1 * t148, 0, t86, 0, 0, t104 * t178, t107 * t178, 0, 0, 0.2e1 * t156 * t97 - 0.2e1 * t144, -0.4e1 * t103 * t142 + 0.2e1 * t151 * t96, 0.2e1 * t104 * t161 + 0.2e1 * t199 * t184, 0.2e1 * t156 * t95 + 0.2e1 * t144, -0.2e1 * t103 * t148 + 0.2e1 * t104 * t160, t86, 0.2e1 * t59 * t94 - 0.2e1 * t107 * t39 + 0.2e1 * (t103 * t147 + t96 * t182) * pkin(9), -0.2e1 * t60 * t94 - 0.2e1 * t107 * t38 + 0.2e1 * (-t96 * t183 + 0.2e1 * t142) * pkin(9), 0.2e1 * t134 * t179 + 0.2e1 * (t103 * t38 - t106 * t39 + (t103 * t59 - t106 * t60) * qJD(5)) * t104, 0.2e1 * pkin(9) ^ 2 * t156 - 0.2e1 * t38 * t60 + 0.2e1 * t39 * t59, -0.2e1 * t63 * t32, 0.2e1 * t32 * t62 - 0.2e1 * t33 * t63, 0.2e1 * t107 * t32 + 0.2e1 * t63 * t94, 0.2e1 * t62 * t33, 0.2e1 * t107 * t33 - 0.2e1 * t62 * t94, t86, -0.2e1 * t10 * t107 + 0.2e1 * t27 * t94 + 0.2e1 * t33 * t76 + 0.2e1 * t58 * t62, -0.2e1 * t107 * t9 - 0.2e1 * t28 * t94 - 0.2e1 * t32 * t76 + 0.2e1 * t58 * t63, -0.2e1 * t10 * t63 + 0.2e1 * t27 * t32 - 0.2e1 * t28 * t33 + 0.2e1 * t62 * t9, 0.2e1 * t10 * t27 - 0.2e1 * t28 * t9 + 0.2e1 * t58 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t17, 0, 0, 0, 0, 0, 0, 0, 0, t130, t131, t119, -pkin(4) * t16 + pkin(10) * t119, 0, 0, 0, 0, 0, 0, t16 * t73 + t36 * t49, t16 * t74 - t36 * t48, t1 * t73 + t11 * t48 - t12 * t49 - t2 * t74, pkin(5) * t170 - t1 * t56 + t11 * t35 - t12 * t34 + t16 * t93 + t2 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t50, 0, 0, 0, 0, 0, 0, 0, 0, t128, t129, t118, -pkin(4) * t51 + pkin(10) * t118, 0, 0, 0, 0, 0, 0, t49 * t64 + t51 * t73, -t48 * t64 + t51 * t74, t30 * t48 - t31 * t49 + t7 * t73 - t74 * t8, pkin(5) * t169 + t30 * t35 - t31 * t34 + t51 * t93 + t55 * t8 - t56 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t179, 0, -t94, 0, -t172, pkin(9) * t94, 0, 0, -t57, -0.4e1 * t104 * t157 - t200 * t179, t103 * t94 - t160, t57, t122, 0 (pkin(10) * t188 + (-t205 + t206) * t104) * qJD(5) + (t103 * t139 - t90) * qJD(4) (pkin(9) * t104 * t106 + t125) * qJD(5) + (t106 * t139 + t176) * qJD(4), t117, -pkin(4) * t172 + pkin(10) * t117, -t32 * t74 - t48 * t63, t32 * t73 - t33 * t74 + t48 * t62 - t49 * t63, t107 * t48 + t74 * t94, t33 * t73 + t49 * t62, t107 * t49 - t73 * t94, 0, -t107 * t35 + t175 * t62 + t33 * t93 + t49 * t76 + t55 * t94 + t58 * t73, -t107 * t34 + t175 * t63 - t32 * t93 - t48 * t76 - t56 * t94 + t58 * t74, -t10 * t74 + t27 * t48 - t28 * t49 + t32 * t55 - t33 * t56 + t34 * t62 - t35 * t63 + t73 * t9, t10 * t55 + t175 * t76 + t27 * t35 - t28 * t34 - t56 * t9 + t58 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, -0.2e1 * t151, 0, -0.2e1 * t157, 0, 0, t103 * t177, t106 * t177, 0, 0, -0.2e1 * t74 * t48, 0.2e1 * t48 * t73 - 0.2e1 * t49 * t74, 0, 0.2e1 * t73 * t49, 0, 0, 0.2e1 * t175 * t73 + 0.2e1 * t49 * t93, 0.2e1 * t175 * t74 - 0.2e1 * t48 * t93, 0.2e1 * t34 * t73 - 0.2e1 * t35 * t74 + 0.2e1 * t48 * t55 - 0.2e1 * t49 * t56, 0.2e1 * t175 * t93 - 0.2e1 * t34 * t56 + 0.2e1 * t35 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0 (t207 * t2 - t1 * t102 + (-t102 * t11 + t207 * t12) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, t23, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0 (t207 * t8 - t102 * t7 + (-t102 * t30 + t207 * t31) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155 - t162, 0, -t121, t94, t39, t38, 0, 0, 0, 0, -t32, 0, -t33, t94, pkin(5) * t104 * t154 - qJD(6) * t113 + t107 * t174 - t152 * t54 + t110 (-t102 * t94 + t107 * t152) * pkin(5) + t9 (t207 * t32 - t102 * t33 + (t102 * t63 - t207 * t62) * qJD(6)) * pkin(5) (t207 * t10 - t102 * t9 + (-t102 * t27 + t207 * t28) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t182, 0, -t183, 0, -pkin(10) * t182, pkin(10) * t183, 0, 0, 0, 0, -t48, 0, -t49, 0, t35, t34 (t207 * t48 - t102 * t49 + (t102 * t74 - t207 * t73) * qJD(6)) * pkin(5) (t207 * t35 - t102 * t34 + (-t102 * t55 + t207 * t56) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t174, -0.2e1 * t146, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t33, t94, t10, t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, -t49, 0, t35, t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, -t146, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
