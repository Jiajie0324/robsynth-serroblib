% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRPR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRPR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:51:36
% EndTime: 2019-03-09 01:51:40
% DurationCPUTime: 1.56s
% Computational Cost: add. (591->192), mult. (1174->233), div. (0->0), fcn. (909->4), ass. (0->142)
t166 = pkin(4) + pkin(8);
t89 = cos(qJ(4));
t170 = t166 * t89;
t87 = sin(qJ(4));
t126 = t87 * qJD(5);
t151 = t89 * qJ(5);
t47 = -t87 * pkin(4) + t151;
t101 = t47 * qJD(4) + t126;
t81 = t87 ^ 2;
t83 = t89 ^ 2;
t52 = t81 + t83;
t86 = sin(qJ(6));
t34 = t52 * t86;
t88 = cos(qJ(6));
t159 = t87 * t88;
t110 = 0.2e1 * t86 * t159;
t80 = t86 ^ 2;
t82 = t88 ^ 2;
t51 = t80 - t82;
t93 = qJD(1) * t110 - t51 * qJD(4);
t169 = qJD(4) * (-t166 * t87 + t151) + t126;
t168 = t83 / 0.2e1;
t84 = -pkin(7) + qJ(2);
t165 = -pkin(5) + t84;
t41 = t165 * t89;
t163 = t41 * t88;
t162 = t81 * t88;
t152 = t87 * qJ(5);
t29 = t152 + t170;
t161 = t86 * t29;
t160 = t86 * t87;
t158 = t88 * t29;
t85 = pkin(1) + qJ(3);
t71 = t87 * qJD(4);
t61 = t86 * t71;
t146 = qJD(6) * t89;
t67 = t88 * t146;
t157 = t67 - t61;
t53 = t81 - t83;
t39 = -t47 + t85;
t24 = t87 * pkin(8) + t39;
t10 = t86 * t24 + t163;
t1 = -t161 * t89 + (t10 - t163) * t87;
t156 = t1 * qJD(1);
t11 = t88 * t24 - t41 * t86;
t2 = -t11 * t87 + t158 * t89 - t41 * t160;
t155 = t2 * qJD(1);
t40 = t165 * t87;
t3 = -t10 * t89 - t40 * t159;
t154 = t3 * qJD(1);
t4 = -t11 * t89 + t40 * t160;
t153 = t4 * qJD(1);
t150 = qJD(3) * t89;
t149 = qJD(5) * t86;
t148 = qJD(5) * t88;
t147 = qJD(6) * t88;
t145 = qJD(6) * t166;
t46 = t89 * pkin(4) + t152;
t12 = t39 * t89 + t46 * t87;
t144 = t12 * qJD(1);
t13 = -t39 * t87 + t46 * t89;
t143 = t13 * qJD(1);
t111 = t81 / 0.2e1 + t168;
t42 = 0.1e1 / 0.2e1 + t111;
t16 = t42 * t86;
t142 = t16 * qJD(1);
t17 = t42 * t88;
t141 = t17 * qJD(1);
t31 = t52 * t84;
t140 = t31 * qJD(1);
t139 = t34 * qJD(1);
t35 = t53 * t86;
t138 = t35 * qJD(1);
t37 = t52 * t88;
t137 = t37 * qJD(1);
t38 = t53 * t88;
t136 = t38 * qJD(1);
t135 = t39 * qJD(1);
t134 = t42 * qJD(1);
t133 = t46 * qJD(1);
t132 = t52 * qJD(1);
t131 = t53 * qJD(1);
t130 = t83 * qJD(1);
t129 = t85 * qJD(1);
t128 = t86 * qJD(4);
t72 = t87 * qJD(1);
t127 = t87 * qJD(2);
t125 = t87 * qJD(6);
t124 = t88 * qJD(4);
t74 = t89 * qJD(1);
t73 = t89 * qJD(4);
t123 = t89 * qJD(5);
t122 = qJ(5) * qJD(6);
t121 = qJD(4) * qJ(5);
t120 = t86 * t146;
t119 = t86 * t72;
t118 = t87 * t124;
t117 = t86 * t147;
t116 = t88 * t130;
t115 = t86 * t124;
t114 = t88 * t72;
t113 = t87 * t73;
t112 = t84 * t73;
t65 = t87 * t74;
t109 = t88 * t65;
t108 = -qJD(2) + t135;
t107 = -qJD(2) + t129;
t105 = qJD(4) * t110;
t103 = t83 * qJD(5) - t150;
t102 = t46 * qJD(4) - t123;
t100 = t170 / 0.2e1 + t152 / 0.2e1;
t99 = (-qJD(6) - t74) * t160;
t91 = t29 / 0.2e1 + t100;
t8 = t91 * t86;
t98 = -t8 * qJD(1) - t88 * t121;
t9 = t91 * t88;
t97 = -t9 * qJD(1) + t86 * t121;
t28 = (t82 / 0.2e1 - t80 / 0.2e1) * t87;
t96 = -t28 * qJD(1) + t115;
t95 = t86 * qJD(1) * t162 + t28 * qJD(4);
t36 = t51 * t81;
t94 = t36 * qJD(1) + t105;
t92 = t118 + t120;
t79 = qJ(2) * qJD(1);
t78 = qJ(2) * qJD(2);
t68 = -t71 / 0.2e1;
t66 = t88 * t125;
t64 = t88 * t73;
t63 = t88 * t74;
t62 = t86 * t73;
t60 = t86 * t74;
t50 = t84 * t71;
t43 = -0.1e1 / 0.2e1 + t111;
t33 = t63 + t147;
t32 = -qJD(6) * t86 - t60;
t30 = t65 + t125 / 0.2e1;
t23 = t28 * qJD(6);
t19 = t162 / 0.2e1 + (t168 - 0.1e1 / 0.2e1) * t88;
t18 = -t86 / 0.2e1 + t34 / 0.2e1;
t6 = -t40 * t86 - t158 / 0.2e1 + t100 * t88;
t5 = t40 * t88 - t161 / 0.2e1 + t100 * t86;
t7 = [0, 0, 0, 0, qJD(2), t78, qJD(2), qJD(3), t85 * qJD(3) + t78, -t113, t53 * qJD(4), 0, 0, 0, qJD(3) * t87 + t85 * t73, -t85 * t71 + t150, -t52 * qJD(2), -t12 * qJD(4) + (-qJD(3) + t123) * t87, -t13 * qJD(4) + t103, t31 * qJD(2) + (qJD(3) + t102) * t39, t113 * t80 + t117 * t81, -t36 * qJD(6) + t105 * t89, -t35 * qJD(4) + t67 * t87, -t38 * qJD(4) - t120 * t87, -t113, -t37 * qJD(2) + t1 * qJD(4) + t4 * qJD(6) + t103 * t86, t34 * qJD(2) - t2 * qJD(4) - t3 * qJD(6) + t103 * t88; 0, 0, 0, 0, qJD(1), t79, qJD(1), 0, t79, 0, 0, 0, 0, 0, 0, 0, -t132, 0, 0, t43 * qJD(3) + t140, 0, 0, 0, 0, 0, -t137, t139; 0, 0, 0, 0, 0, 0, 0, qJD(1), t129, 0, 0, 0, 0, 0, t72, t74, 0, -t72, -t74, t43 * qJD(2) + t135, 0, 0, 0, 0, 0, t18 * qJD(6) - t60, t19 * qJD(6) - t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t131, -t71, -t73, 0, t85 * t74 - t50, -t85 * t72 - t112, -t101, t50 - t144, t112 - t143, t101 * t84 + t39 * t133, t23 + (t72 * t80 + t115) * t89, -0.2e1 * t87 * t117 + t93 * t89, -t118 - t138, t61 - t136, -t30, t5 * qJD(6) + t41 * t128 - t169 * t88 + t156, t6 * qJD(6) + t41 * t124 + t169 * t86 - t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t65, t130, -t39 * t74 + t50, 0, 0, 0, 0, 0, t130 * t86 - t118, t61 + t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t94, t66 + t109, t99, t68, t18 * qJD(3) + t5 * qJD(4) - t11 * qJD(6) + t153, t19 * qJD(3) + t6 * qJD(4) + t10 * qJD(6) - t154; 0, 0, 0, 0, -qJD(1), -t79, -qJD(1), 0, -qJD(3) - t79, 0, 0, 0, 0, 0, -t73, t71, t132, t73, -t71, -t42 * qJD(3) - t102 - t140, 0, 0, 0, 0, 0, t137 + t157, -t92 - t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t72, 0, t74, -t72, -t133, 0, 0, 0, 0, 0, -t119, -t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t32; 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t107, 0, 0, 0, 0, 0, -t72, -t74, 0, t72, t74, t42 * qJD(2) - t135, 0, 0, 0, 0, 0, t16 * qJD(6) + t60, t17 * qJD(6) + t63; 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t73, 0, t71, t73, t101, 0, 0, 0, 0, 0, t66 + t62, -t125 * t86 + t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92 + t142, t141 + t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t131, 0, 0, 0, -t107 * t89, t107 * t87, 0, -t89 * qJD(2) + t144, t127 + t143, -t108 * t46, -t65 * t80 + t23, 0.2e1 * t88 * t99, -t120 + t138, -t67 + t136, t30, t8 * qJD(6) + t127 * t86 - t156, t9 * qJD(6) + t127 * t88 + t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t72, 0, -t74, t72, t133, 0, 0, 0, 0, 0, t119, t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), qJ(5) * qJD(5), -t117, t51 * qJD(6), 0, 0, 0, t122 * t88 + t149, -t122 * t86 + t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t121, 0, 0, 0, 0, 0, t128, t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t93, t32, -t33, t72 / 0.2e1, t145 * t86 - t98, t145 * t88 - t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, -t130, t108 * t89, 0, 0, 0, 0, 0 (-t130 - t146) * t86, -t67 - t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4), -t121, 0, 0, 0, 0, 0, -t128, -t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t94, t62 - t109, t65 * t86 + t64, t68, -t153 - t16 * qJD(3) - t8 * qJD(4) + (-qJD(2) * t88 + t149) * t89, t154 - t17 * qJD(3) - t9 * qJD(4) + (qJD(2) * t86 + t148) * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, -t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t93, t60, t63, -t72 / 0.2e1, t98, t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t7;
