% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RPPRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RPPRPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:27:38
% EndTime: 2019-05-05 14:27:48
% DurationCPUTime: 11.14s
% Computational Cost: add. (23483->658), mult. (46467->601), div. (0->0), fcn. (22728->6), ass. (0->393)
t873 = sin(qJ(4));
t876 = cos(qJ(4));
t880 = qJD(1) ^ 2;
t844 = t873 * t880 * t876;
t835 = qJDD(4) - t844;
t1002 = t876 * t835;
t867 = t873 ^ 2;
t1013 = t867 * t880;
t879 = qJD(4) ^ 2;
t841 = -t879 - t1013;
t751 = t841 * t873 + t1002;
t990 = qJD(1) * qJD(4);
t851 = t876 * t990;
t985 = t873 * qJDD(1);
t816 = 0.2e1 * t851 + t985;
t874 = sin(qJ(1));
t877 = cos(qJ(1));
t1104 = pkin(6) * (t751 * t877 - t816 * t874);
t1103 = pkin(6) * (t751 * t874 + t816 * t877);
t834 = qJDD(4) + t844;
t1008 = t873 * t834;
t1053 = t876 ^ 2;
t854 = t1053 * t880;
t842 = -t854 - t879;
t754 = -t842 * t876 + t1008;
t850 = t873 * t990;
t984 = t876 * qJDD(1);
t818 = -0.2e1 * t850 + t984;
t1102 = pkin(6) * (t754 * t877 + t818 * t874);
t1101 = pkin(6) * (t754 * t874 - t818 * t877);
t1007 = t873 * t835;
t761 = -t841 * t876 + t1007;
t1100 = qJ(2) * t761;
t1003 = t876 * t834;
t763 = t842 * t873 + t1003;
t1099 = qJ(2) * t763;
t1098 = qJ(3) * t761;
t1097 = qJ(3) * t763;
t1033 = pkin(1) + qJ(3);
t1096 = t1033 * t761;
t1095 = t1033 * t763;
t1094 = -pkin(3) * t818 - pkin(7) * t763;
t1093 = -pkin(3) * t816 - pkin(7) * t761;
t954 = -t879 + t1013;
t753 = t873 * t954 + t1003;
t1092 = t753 * t874 - t877 * t985;
t1091 = t753 * t877 + t874 * t985;
t994 = t854 - t879;
t755 = t876 * t994 - t1007;
t1090 = t755 * t874 - t877 * t984;
t1089 = t755 * t877 + t874 * t984;
t1088 = pkin(3) * t751;
t1087 = pkin(3) * t754;
t1086 = pkin(7) * t751;
t1085 = pkin(7) * t754;
t1032 = qJ(2) - pkin(7);
t1084 = t1032 * t751;
t1050 = pkin(2) + pkin(3);
t1083 = t1050 * t751;
t1069 = t1050 * t754;
t872 = sin(qJ(6));
t875 = cos(qJ(6));
t993 = qJD(1) * t873;
t809 = qJD(4) * t872 - t875 * t993;
t811 = qJD(4) * t875 + t872 * t993;
t742 = t811 * t809;
t817 = -t850 + t984;
t798 = qJDD(6) + t817;
t1075 = -t742 + t798;
t1082 = t1075 * t872;
t1081 = t1075 * t875;
t1076 = -t1032 * t754 + t1033 * t818;
t992 = t876 * qJD(1);
t846 = qJD(6) + t992;
t902 = (t809 * t872 + t811 * t875) * t846;
t1071 = t1033 * t880;
t865 = qJDD(1) * qJ(2);
t838 = t877 * g(1) + t874 * g(2);
t920 = 0.2e1 * qJD(2) * qJD(1) - t838;
t900 = qJDD(3) + t920;
t894 = t865 + t900;
t882 = -qJDD(1) * pkin(7) - t1071 + t894;
t721 = t873 * g(3) + t876 * t882;
t722 = t876 * g(3) - t873 * t882;
t663 = -t873 * t721 - t876 * t722;
t983 = t867 + t1053;
t829 = t983 * qJDD(1);
t833 = t854 + t1013;
t1074 = -pkin(1) * t833 - qJ(2) * t829;
t1073 = pkin(4) * t842 - qJ(5) * t834;
t662 = t876 * t721 - t722 * t873;
t1070 = t1050 * t662;
t1029 = qJ(5) * t873;
t1049 = pkin(4) + pkin(8);
t1051 = -2 * qJD(5);
t1052 = 2 * qJD(3);
t870 = t880 * pkin(7);
t953 = t851 + t985;
t1066 = t953 * pkin(4) - t817 * qJ(5) - t870;
t837 = t874 * g(1) - t877 * g(2);
t937 = -qJDD(2) + t837;
t982 = pkin(5) * t992;
t638 = t851 * pkin(8) + (-pkin(5) * t867 + qJ(2)) * t880 + (pkin(8) * t873 + t1033) * qJDD(1) + (qJD(4) * t1029 + t1052 + (qJD(4) * t1049 + t1051 - t982) * t876) * qJD(1) + t937 + t1066;
t1028 = qJ(5) * t876;
t1043 = pkin(4) * t873;
t814 = (-t1028 + t1043) * qJD(1);
t908 = -qJDD(4) * pkin(4) - t879 * qJ(5) + t814 * t992 + qJDD(5) - t721;
t648 = -t835 * pkin(8) + (t817 + t850) * pkin(5) + t908;
t595 = t872 * t638 - t648 * t875;
t596 = t638 * t875 + t648 * t872;
t575 = -t875 * t595 + t872 * t596;
t1042 = pkin(4) * t876;
t935 = t1029 + t1042;
t1068 = t935 * qJDD(1);
t1067 = t1033 * qJDD(1);
t1001 = t880 * qJ(2);
t899 = t937 + t1001;
t884 = t899 + t1067;
t673 = (qJD(4) * t935 + t1051 * t876 + t1052) * qJD(1) + t884 + t1066;
t893 = qJDD(4) * qJ(5) - t814 * t993 - t722;
t885 = t879 * pkin(4) - t893;
t988 = qJD(5) * qJD(4);
t686 = t885 - 0.2e1 * t988;
t624 = -t686 * t876 + t873 * t908;
t997 = pkin(3) * t673 - pkin(7) * t624;
t1065 = t673 * (pkin(2) + t935) + t997;
t952 = t872 * qJDD(4) - t875 * t953;
t696 = (qJD(6) - t846) * t811 + t952;
t653 = pkin(4) * t816 + t673;
t976 = t876 * t653 - t1093;
t1064 = -t816 * (pkin(2) + t1029) - t976;
t981 = qJD(1) * t1052;
t896 = t937 + t981;
t886 = t896 + t1001;
t652 = -pkin(4) * t851 + 0.2e1 * qJD(5) * t992 - t1067 + (t818 - t850) * qJ(5) - t886 - t1066;
t977 = t873 * t652 - t1094;
t1063 = -t818 * (pkin(2) + t1042) - t977;
t764 = t873 * t994 + t1002;
t758 = t876 * t954 - t1008;
t647 = t953 * pkin(5) - qJD(4) * (-qJD(4) * pkin(8) + t982) + pkin(8) * t1013 + t686;
t570 = -t575 * t876 - t647 * t873;
t572 = pkin(8) * t575;
t978 = pkin(4) * t575 + qJ(5) * t647 + t572;
t1062 = -t1050 * t570 + t978;
t1017 = t846 * t809;
t720 = -t809 * qJD(6) + t875 * qJDD(4) + t872 * t953;
t918 = t720 + t1017;
t630 = -t696 * t872 - t875 * t918;
t1054 = t811 ^ 2;
t797 = t809 ^ 2;
t707 = -t797 - t1054;
t606 = -t630 * t876 + t707 * t873;
t936 = pkin(8) * t630 + t575;
t903 = pkin(4) * t630 - qJ(5) * t707 + t936;
t1061 = -t1050 * t606 + t903;
t843 = t846 ^ 2;
t723 = -t843 - t797;
t657 = t872 * t723 + t1081;
t695 = (qJD(6) + t846) * t811 + t952;
t611 = -t657 * t876 + t695 * t873;
t640 = t872 * t647;
t1000 = -pkin(8) * t657 - t640;
t945 = pkin(4) * t657 - qJ(5) * t695 - t1000;
t1060 = -t1050 * t611 + t945;
t710 = t742 + t798;
t1011 = t872 * t710;
t970 = -t843 - t1054;
t671 = t875 * t970 - t1011;
t919 = t720 - t1017;
t616 = -t671 * t876 + t873 * t919;
t641 = t875 * t647;
t999 = -pkin(8) * t671 - t641;
t944 = pkin(4) * t671 - qJ(5) * t919 - t999;
t1059 = -t1050 * t616 + t944;
t623 = -t686 * t873 - t876 * t908;
t996 = -pkin(4) * t908 - qJ(5) * t686;
t1058 = -t1050 * t623 - t996;
t1057 = -t721 - t1083;
t1056 = -t722 + t1069;
t891 = -pkin(4) * t835 - qJ(5) * t841 + t908;
t1055 = -t891 + t1083;
t1048 = pkin(1) * t880;
t767 = t884 + t981;
t1047 = pkin(2) * t767;
t1046 = pkin(2) * t829;
t1041 = pkin(5) * t575;
t1040 = pkin(5) * t630;
t1039 = pkin(5) * t647;
t1038 = pkin(6) * (-t829 * t874 - t833 * t877);
t986 = qJDD(1) * t877;
t830 = -t874 * t880 + t986;
t1037 = pkin(6) * t830;
t987 = qJDD(1) * t874;
t831 = t877 * t880 + t987;
t1036 = pkin(6) * t831;
t1035 = pkin(7) * t662;
t1034 = pkin(7) * t829;
t1031 = qJ(3) * t818;
t1030 = qJ(3) * t833;
t1027 = qJDD(1) * pkin(1);
t1024 = t816 * t876;
t1022 = t818 * t873;
t1016 = t846 * t811;
t1015 = t846 * t872;
t1014 = t846 * t875;
t1010 = t873 * t653;
t740 = -t870 + t767;
t729 = t873 * t740;
t1009 = t873 * t816;
t1006 = t875 * t710;
t1005 = t876 * t740;
t1004 = t876 * t818;
t998 = -pkin(4) * t1022 + t876 * t652;
t995 = -pkin(3) * t740 + pkin(7) * t663;
t980 = t873 * t742;
t979 = t876 * t742;
t859 = 0.2e1 * t988;
t674 = t859 + (t833 - t879) * pkin(4) + t893;
t819 = pkin(3) * t833;
t887 = qJ(5) * t833 + t908;
t975 = t876 * t674 + t873 * t887 + t819;
t974 = t819 + t663;
t973 = t1094 + t729;
t972 = -t1005 + t1093;
t660 = t673 * t1043;
t964 = -pkin(7) * t623 + t660;
t963 = t1005 + t1085;
t962 = -qJ(3) + t1028;
t576 = t872 * t595 + t875 * t596;
t558 = -t1049 * t576 - t1039;
t563 = -qJ(5) * t576 + t1041;
t961 = -t873 * t558 + t876 * t563;
t632 = -t696 * t875 + t872 * t918;
t898 = pkin(5) * t707 - t576;
t565 = -t1049 * t632 + t898;
t590 = -qJ(5) * t632 + t1040;
t960 = -t873 * t565 + t876 * t590;
t658 = t875 * t723 - t1082;
t917 = -pkin(5) * t657 + t595;
t579 = -qJ(5) * t658 - t917;
t934 = pkin(5) * t695 - t641;
t584 = -t1049 * t658 + t934;
t959 = t876 * t579 - t873 * t584;
t672 = -t872 * t970 - t1006;
t897 = -pkin(5) * t671 + t596;
t582 = -qJ(5) * t672 - t897;
t933 = pkin(5) * t919 + t640;
t587 = -t1049 * t672 + t933;
t958 = t876 * t582 - t873 * t587;
t888 = -t865 - t920;
t768 = -qJDD(3) + t888 + t1071;
t957 = -t767 * t874 - t877 * t768;
t778 = t888 + t1048;
t780 = t899 + t1027;
t956 = -t877 * t778 - t780 * t874;
t955 = -t837 * t874 - t877 * t838;
t951 = t874 * t844;
t950 = t877 * t844;
t571 = t575 * t873 - t647 * t876;
t949 = -pkin(3) * t576 + pkin(7) * t571 + t876 * t558 + t873 * t563;
t612 = t657 * t873 + t695 * t876;
t948 = -pkin(3) * t658 + pkin(7) * t612 + t873 * t579 + t876 * t584;
t617 = t671 * t873 + t876 * t919;
t947 = -pkin(3) * t672 + pkin(7) * t617 + t873 * t582 + t876 * t587;
t607 = t630 * t873 + t707 * t876;
t946 = -pkin(3) * t632 + pkin(7) * t607 + t876 * t565 + t873 * t590;
t943 = -pkin(1) + t962;
t942 = pkin(2) * t740 - t995;
t941 = t998 - t1085;
t940 = pkin(2) * t768 - qJ(3) * g(3);
t939 = g(3) * t874 + t1037;
t938 = g(3) * t877 - t1036;
t932 = -t1010 + t1086;
t931 = t729 - t1086;
t930 = t695 * t872 - t875 * t919;
t775 = t843 - t1054;
t929 = t775 * t875 + t1082;
t774 = t797 - t843;
t928 = t774 * t872 + t1006;
t927 = t767 * t877 - t768 * t874;
t926 = t778 * t874 - t780 * t877;
t924 = t837 * t877 - t838 * t874;
t923 = pkin(2) * t818 - t973;
t922 = pkin(2) * t816 - t972;
t916 = -pkin(7) * t570 + t961;
t915 = -pkin(7) * t606 + t960;
t914 = -pkin(7) * t611 + t959;
t913 = -pkin(7) * t616 + t958;
t912 = -t674 * t873 + t876 * t887 + t1034;
t911 = t1034 - t662;
t719 = -qJD(6) * t811 - t952;
t910 = t1015 * t809 + t719 * t875;
t909 = t1014 * t811 + t720 * t872;
t907 = pkin(2) * t576 - t949;
t906 = pkin(2) * t632 - t946;
t905 = pkin(2) * t658 - t948;
t904 = pkin(2) * t672 - t947;
t856 = pkin(2) * t880 - g(3);
t901 = -pkin(2) * t987 - t877 * t856 - t1036;
t815 = pkin(3) * t829;
t892 = t815 + t1068;
t890 = t912 - t1030;
t889 = t911 - t1030;
t883 = t859 - t885 - t1073;
t881 = t686 + t1073;
t878 = pkin(1) * g(3);
t871 = qJ(2) * g(3);
t869 = pkin(2) * qJDD(1);
t858 = 0.2e1 * t865;
t857 = 0.2e1 * qJDD(1) * qJ(3);
t832 = -t854 + t1013;
t820 = pkin(2) * t833;
t804 = t983 * t990;
t795 = -t937 - 0.2e1 * t1027;
t787 = t858 + t920;
t779 = t858 + t900;
t776 = t857 + t896 + 0.2e1 * t1027;
t773 = -qJDD(4) * t874 - t804 * t877;
t772 = qJDD(4) * t877 - t804 * t874;
t771 = t1053 * t990 + t817 * t873;
t770 = -t867 * t990 + t876 * t953;
t760 = (t817 - t850) * t876;
t749 = (t953 + t851) * t873;
t748 = t815 + t1046;
t741 = -pkin(2) * t986 + t856 * t874 - t1037;
t738 = -t797 + t1054;
t735 = t871 - t1047;
t734 = pkin(6) * (-t829 * t877 + t833 * t874);
t728 = -t1022 - t1024;
t727 = -t1004 + t1009;
t725 = t878 - t940;
t718 = -t770 * t877 + t951;
t717 = t771 * t877 - t951;
t716 = -t770 * t874 - t950;
t715 = t771 * t874 + t950;
t714 = t892 + t1046;
t708 = pkin(1) * t780 - qJ(2) * t778;
t703 = (-t809 * t875 + t811 * t872) * t846;
t702 = -t727 * t877 + t832 * t874;
t701 = -t727 * t874 - t832 * t877;
t685 = -t1015 * t811 + t720 * t875;
t684 = -t1014 * t809 + t719 * t872;
t680 = t876 * t798 - t873 * t902;
t679 = -t873 * t798 - t876 * t902;
t678 = t774 * t875 - t1011;
t677 = -t872 * t775 + t1081;
t661 = -qJ(2) * t768 + t1033 * t767;
t645 = t873 * t909 + t979;
t644 = t873 * t910 - t979;
t643 = t876 * t910 + t980;
t642 = t876 * t909 - t980;
t639 = -t820 - t974;
t637 = -t923 + t1099;
t636 = -t922 + t1100;
t635 = t1005 + t1076;
t634 = t1033 * t816 + t1084 + t729;
t631 = -t695 * t875 - t872 * t919;
t625 = t889 + t1074;
t621 = t873 * t929 + t876 * t918;
t620 = -t876 * t696 + t873 * t928;
t619 = -t873 * t918 + t876 * t929;
t618 = t873 * t696 + t876 * t928;
t615 = -t1056 + t1095;
t614 = -t1057 + t1096;
t609 = t876 * t738 - t873 * t930;
t608 = -t873 * t738 - t876 * t930;
t604 = -t820 - t975;
t603 = -t1055 - t1096;
t602 = -t1063 - t1099;
t601 = -t1064 - t1100;
t600 = -t1076 + t998;
t599 = t816 * t943 - t1010 - t1084;
t598 = t1069 + t883 - t1095;
t597 = t890 + t1074;
t592 = -qJ(2) * t663 - t942;
t591 = t1032 * t662 + t1033 * t740;
t585 = -t1033 * t663 + t1070;
t568 = -qJ(2) * t624 - t1065;
t567 = t1032 * t623 - t673 * t943 + t660;
t566 = -t1033 * t624 - t1058;
t560 = -t1033 * t617 - t1059;
t559 = -t1033 * t612 - t1060;
t556 = -qJ(2) * t617 - t904;
t555 = t1032 * t616 + t1033 * t672 + t958;
t554 = -qJ(2) * t612 - t905;
t553 = t1032 * t611 + t1033 * t658 + t959;
t552 = -t1033 * t607 - t1061;
t551 = -qJ(2) * t607 - t906;
t550 = t1032 * t606 + t1033 * t632 + t960;
t549 = -t1033 * t571 - t1062;
t548 = -qJ(2) * t571 - t907;
t547 = t1032 * t570 + t1033 * t576 + t961;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t830, 0, -t831, 0, -t939, -t938, -t924, -pkin(6) * t924, 0, -t830, t831, 0, 0, 0, t926, t939, t938, pkin(6) * t926 + (-pkin(1) * t874 + qJ(2) * t877) * g(3), 0, t831, t830, 0, 0, 0, -t927, t901, t741, -pkin(6) * t927 - t874 * t725 + t877 * t735, t717, t702, -t1089, t718, t1091, t773, -t874 * t614 + t877 * t636 - t1103, -t874 * t615 + t877 * t637 + t1101, -t639 * t877 + t748 * t874 - t1038, t877 * t592 - t874 * t585 - pkin(6) * (t662 * t874 + t740 * t877), t773, t1089, -t1091, t717, t702, t718, -t604 * t877 + t714 * t874 - t1038, t877 * t601 - t874 * t603 + t1103, -t874 * t598 + t877 * t602 - t1101, t877 * t568 - t874 * t566 - pkin(6) * (t623 * t874 + t673 * t877), -t642 * t877 - t685 * t874, -t608 * t877 - t631 * t874, -t619 * t877 - t677 * t874, -t643 * t877 + t684 * t874, -t618 * t877 - t678 * t874, -t679 * t877 - t703 * t874, t877 * t554 - t874 * t559 - pkin(6) * (t611 * t874 + t658 * t877), t877 * t556 - t874 * t560 - pkin(6) * (t616 * t874 + t672 * t877), t877 * t551 - t874 * t552 - pkin(6) * (t606 * t874 + t632 * t877), t877 * t548 - t874 * t549 - pkin(6) * (t570 * t874 + t576 * t877); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t831, 0, t830, 0, t938, -t939, t955, pkin(6) * t955, 0, -t831, -t830, 0, 0, 0, t956, -t938, t939, pkin(6) * t956 + (pkin(1) * t877 + qJ(2) * t874) * g(3), 0, -t830, t831, 0, 0, 0, t957, -t741, t901, pkin(6) * t957 + t877 * t725 + t874 * t735, t715, t701, -t1090, t716, t1092, t772, t877 * t614 + t874 * t636 + t1104, t877 * t615 + t874 * t637 - t1102, -t639 * t874 - t748 * t877 + t734, t874 * t592 + t877 * t585 + pkin(6) * (t662 * t877 - t740 * t874), t772, t1090, -t1092, t715, t701, t716, -t604 * t874 - t714 * t877 + t734, t874 * t601 + t877 * t603 - t1104, t877 * t598 + t874 * t602 + t1102, t874 * t568 + t877 * t566 + pkin(6) * (t623 * t877 - t673 * t874), -t642 * t874 + t685 * t877, -t608 * t874 + t631 * t877, -t619 * t874 + t677 * t877, -t643 * t874 - t684 * t877, -t618 * t874 + t678 * t877, -t679 * t874 + t703 * t877, t874 * t554 + t877 * t559 + pkin(6) * (t611 * t877 - t658 * t874), t874 * t556 + t877 * t560 + pkin(6) * (t616 * t877 - t672 * t874), t874 * t551 + t877 * t552 + pkin(6) * (t606 * t877 - t632 * t874), t874 * t548 + t877 * t549 + pkin(6) * (t570 * t877 - t576 * t874); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t837, t838, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t795, t787, t708, qJDD(1), 0, 0, 0, 0, 0, 0, t779, t776, t661, t760, t728, t764, t749, t758, 0, t634, t635, t625, t591, 0, -t764, -t758, t760, t728, t749, t597, t599, t600, t567, t645, t609, t621, t644, t620, t680, t553, t555, t550, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t880, 0, 0, -g(3), -t837, 0, 0, -qJDD(1), t880, 0, 0, 0, -t780, 0, g(3), t871, 0, t880, qJDD(1), 0, 0, 0, -t767, -t856, -t869, t735, t771, -t727, -t755, -t770, t753, -t804, t636, t637, -t639, t592, -t804, t755, -t753, t771, -t727, -t770, -t604, t601, t602, t568, -t642, -t608, -t619, -t643, -t618, -t679, t554, t556, t551, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, 0, qJDD(1), 0, g(3), 0, -t838, 0, 0, -t880, -qJDD(1), 0, 0, 0, -t778, -g(3), 0, t878, 0, -qJDD(1), t880, 0, 0, 0, -t768, t869, -t856, t725, t844, -t832, t984, -t844, -t985, qJDD(4), t614, t615, -t748, t585, qJDD(4), -t984, t985, t844, -t832, -t844, -t714, t603, t598, t566, t685, t631, t677, -t684, t678, t703, t559, t560, t552, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t837, t838, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t795, t787, t708, qJDD(1), 0, 0, 0, 0, 0, 0, t779, t776, t661, t760, t728, t764, t749, t758, 0, t634, t635, t625, t591, 0, -t764, -t758, t760, t728, t749, t597, t599, t600, t567, t645, t609, t621, t644, t620, t680, t553, t555, t550, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t780, -t778, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t894 - t1048, t857 + t886 + t1027, qJ(3) * t767, t760, t728, t764, t749, t758, 0, qJ(3) * t816 + t931, t963 + t1031, t889, qJ(3) * t740 - t1035, 0, -t764, -t758, t760, t728, t749, t890, t816 * t962 + t932, t941 - t1031, -t673 * t962 + t964, t645, t609, t621, t644, t620, t680, qJ(3) * t658 + t914, qJ(3) * t672 + t913, qJ(3) * t632 + t915, qJ(3) * t576 + t916; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t880, 0, 0, 0, t780, 0, -g(3), 0, 0, -t880, -qJDD(1), 0, 0, 0, t767, t856, t869, t1047, -t771, t727, t755, t770, -t753, t804, t922, t923, t639, t942, t804, -t755, t753, -t771, t727, t770, t604, t1064, t1063, t1065, t642, t608, t619, t643, t618, t679, t905, t904, t906, t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, qJDD(1), 0, 0, 0, t778, g(3), 0, 0, 0, qJDD(1), -t880, 0, 0, 0, t768, -t869, t856, t940, -t844, t832, -t984, t844, t985, -qJDD(4), t1057 - t1098, t1056 - t1097, t748, qJ(3) * t663 - t1070, -qJDD(4), t984, -t985, -t844, t832, t844, t714, t1055 + t1098, -t1069 + t881 + t1097, qJ(3) * t624 + t1058, -t685, -t631, -t677, t684, -t678, -t703, qJ(3) * t612 + t1060, qJ(3) * t617 + t1059, qJ(3) * t607 + t1061, qJ(3) * t571 + t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t768, t767, 0, t760, t728, t764, t749, t758, 0, t931, t963, t911, -t1035, 0, -t764, -t758, t760, t728, t749, t912, qJ(5) * t1024 + t932, t941, -t1028 * t673 + t964, t645, t609, t621, t644, t620, t680, t914, t913, t915, t916; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t880, 0, 0, 0, t768, 0, -g(3), 0, -t844, t832, -t984, t844, t985, -qJDD(4), -t721 - t1088, -t722 + t1087, t815, -pkin(3) * t662, -qJDD(4), t984, -t985, -t844, t832, t844, t892, -t891 + t1088, t881 - t1087, -pkin(3) * t623 - t996, -t685, -t631, -t677, t684, -t678, -t703, -pkin(3) * t611 + t945, -pkin(3) * t616 + t944, -pkin(3) * t606 + t903, -pkin(3) * t570 + t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, qJDD(1), 0, 0, 0, -t767, g(3), 0, 0, t771, -t727, -t755, -t770, t753, -t804, t972, t973, t974, t995, -t804, t755, -t753, t771, -t727, -t770, t975, qJ(5) * t1009 + t976, pkin(4) * t1004 + t977, -t673 * t935 - t997, -t642, -t608, -t619, -t643, -t618, -t679, t948, t947, t946, t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, -t816, t835, t850, t954, -t850, 0, t740, -t721, 0, -t850, -t835, -t954, t817, -t816, t850, t887, qJ(5) * t816, t652, -qJ(5) * t673, t742, t738, t918, -t742, -t696, t798, t579, t582, t590, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t851, t818, -t994, -t953, t834, -t851, -t740, 0, -t722, 0, -t851, t994, -t834, t851, t818, -t953, t674, t653, pkin(4) * t818, -pkin(4) * t673, -t909, t930, -t929, -t910, -t928, t902, t584, t587, t565, t558; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, -t832, t984, -t844, -t985, qJDD(4), t721, t722, 0, 0, qJDD(4), -t984, t985, t844, -t832, -t844, -t1068, t891, t883, t996, t685, t631, t677, -t684, t678, t703, -t945, -t944, -t903, -t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(4), -t984, t985, t844, -t832, -t844, 0, t908, -t686, 0, t685, t631, t677, -t684, t678, t703, t1000, t999, -t936, -t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, t835, t954, -t817, t816, -t850, -t908, 0, t673, 0, -t742, -t738, -t918, t742, t696, -t798, t917, t897, -t1040, -t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t851, -t994, t834, -t851, -t818, t953, t686, -t673, 0, 0, t909, -t930, t929, t910, t928, -t902, pkin(8) * t658 - t934, pkin(8) * t672 - t933, pkin(8) * t632 - t898, pkin(8) * t576 + t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t720, -t695, t1075, t1017, t774, -t1017, 0, -t647, t595, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1016, t919, t775, t719, t710, -t1016, t647, 0, t596, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t742, t738, t918, -t742, -t696, t798, -t595, -t596, 0, 0;];
m_new_reg  = t1;
