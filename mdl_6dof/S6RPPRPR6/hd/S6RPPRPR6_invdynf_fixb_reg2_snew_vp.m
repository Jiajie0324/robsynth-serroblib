% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPPRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPPRPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:27:48
% EndTime: 2019-05-05 14:27:50
% DurationCPUTime: 2.39s
% Computational Cost: add. (3535->244), mult. (7026->195), div. (0->0), fcn. (3513->6), ass. (0->118)
t1210 = qJD(1) ^ 2;
t1205 = sin(qJ(1));
t1208 = cos(qJ(1));
t1184 = -t1208 * g(1) - t1205 * g(2);
t1216 = -qJDD(1) * qJ(2) - (2 * qJD(2) * qJD(1)) - t1184;
t1243 = pkin(1) + qJ(3);
t1161 = t1210 * t1243 - qJDD(3) + t1216;
t1204 = sin(qJ(4));
t1207 = cos(qJ(4));
t1232 = t1207 * t1210;
t1223 = t1204 * t1232;
t1182 = qJDD(4) - t1223;
t1209 = qJD(4) ^ 2;
t1200 = t1204 ^ 2;
t1236 = t1200 * t1210;
t1185 = -t1209 - t1236;
t1152 = t1207 * t1182 + t1204 * t1185;
t1233 = t1207 * qJD(1);
t1222 = qJD(4) * t1233;
t1226 = t1204 * qJDD(1);
t1172 = 0.2e1 * t1222 + t1226;
t1254 = t1205 * t1152 + t1208 * t1172;
t1253 = t1208 * t1152 - t1205 * t1172;
t1181 = qJDD(4) + t1223;
t1201 = t1207 ^ 2;
t1186 = -t1201 * t1210 - t1209;
t1154 = t1204 * t1181 - t1207 * t1186;
t1238 = qJD(4) * t1204;
t1192 = qJD(1) * t1238;
t1225 = t1207 * qJDD(1);
t1175 = -0.2e1 * t1192 + t1225;
t1252 = t1205 * t1154 - t1208 * t1175;
t1251 = t1208 * t1154 + t1205 * t1175;
t1203 = sin(qJ(6));
t1206 = cos(qJ(6));
t1240 = qJD(1) * t1204;
t1168 = t1203 * qJD(4) - t1206 * t1240;
t1249 = t1168 ^ 2;
t1170 = t1206 * qJD(4) + t1203 * t1240;
t1248 = t1170 ^ 2;
t1188 = qJD(6) + t1233;
t1247 = t1188 ^ 2;
t1246 = 2 * qJD(3);
t1245 = -2 * qJD(5);
t1244 = pkin(4) + pkin(8);
t1242 = t1204 * g(3);
t1241 = t1210 * qJ(2);
t1237 = t1170 * t1168;
t1229 = qJD(6) - t1188;
t1228 = qJD(6) + t1188;
t1227 = t1200 + t1201;
t1224 = pkin(5) * t1233;
t1183 = t1205 * g(1) - t1208 * g(2);
t1213 = -qJDD(1) * pkin(7) - t1161;
t1144 = -t1207 * g(3) + t1204 * t1213;
t1174 = -t1192 + t1225;
t1173 = t1222 + t1226;
t1221 = -t1203 * qJDD(4) + t1206 * t1173;
t1220 = -qJDD(2) + t1183;
t1219 = -qJDD(6) - t1174;
t1158 = t1207 * t1181 + t1204 * t1186;
t1157 = t1204 * t1182 - t1207 * t1185;
t1218 = -t1206 * qJDD(4) - t1203 * t1173;
t1215 = qJDD(1) * t1243 + t1220;
t1202 = t1210 * pkin(7);
t1214 = t1173 * pkin(4) - t1174 * qJ(5) - t1202 + t1215;
t1171 = (pkin(4) * t1204 - qJ(5) * t1207) * qJD(1);
t1132 = t1209 * pkin(4) - qJDD(4) * qJ(5) + qJD(4) * t1245 + t1171 * t1240 - t1144;
t1160 = (qJD(1) * t1246) + t1215 + t1241;
t1212 = t1207 * t1213;
t1211 = t1209 * qJ(5) - t1171 * t1233 - qJDD(5) + t1212;
t1180 = t1227 * t1210;
t1179 = t1205 * qJDD(1) + t1208 * t1210;
t1178 = t1208 * qJDD(1) - t1205 * t1210;
t1177 = t1227 * qJDD(1);
t1163 = qJDD(1) * pkin(1) + t1220 + t1241;
t1162 = t1210 * pkin(1) + t1216;
t1151 = -t1202 + t1160;
t1150 = -t1208 * t1177 + t1205 * t1180;
t1149 = -t1205 * t1177 - t1208 * t1180;
t1148 = -t1247 - t1248;
t1145 = -t1247 - t1249;
t1143 = t1212 + t1242;
t1142 = t1219 - t1237;
t1141 = -t1219 - t1237;
t1140 = -t1248 - t1249;
t1138 = t1168 * t1229 + t1218;
t1137 = -t1168 * t1228 - t1218;
t1136 = -t1170 * t1229 + t1221;
t1135 = t1170 * t1228 - t1221;
t1133 = qJDD(4) * pkin(4) + t1211 + t1242;
t1131 = t1241 + (t1207 * t1245 + t1246 + (pkin(4) * t1207 + qJ(5) * t1204) * qJD(4)) * qJD(1) + t1214;
t1130 = t1206 * t1142 - t1203 * t1148;
t1129 = t1203 * t1142 + t1206 * t1148;
t1128 = -t1204 * t1143 + t1207 * t1144;
t1127 = t1207 * t1143 + t1204 * t1144;
t1126 = -t1203 * t1141 + t1206 * t1145;
t1125 = t1206 * t1141 + t1203 * t1145;
t1124 = t1174 * pkin(5) - t1244 * qJDD(4) + (qJD(4) * qJD(1) * pkin(5) + pkin(8) * t1232 - g(3)) * t1204 - t1211;
t1123 = pkin(8) * t1236 + t1173 * pkin(5) - qJD(4) * (-qJD(4) * pkin(8) + t1224) + t1132;
t1122 = t1173 * pkin(8) + (-t1200 * pkin(5) + qJ(2)) * t1210 + (qJ(5) * t1238 + t1246 + (qJD(4) * t1244 - t1224 + t1245) * t1207) * qJD(1) + t1214;
t1121 = t1206 * t1136 - t1203 * t1138;
t1120 = t1203 * t1136 + t1206 * t1138;
t1119 = -t1207 * t1132 - t1204 * t1133;
t1118 = -t1204 * t1132 + t1207 * t1133;
t1117 = t1204 * t1129 + t1207 * t1137;
t1116 = -t1207 * t1129 + t1204 * t1137;
t1115 = t1204 * t1125 + t1207 * t1135;
t1114 = -t1207 * t1125 + t1204 * t1135;
t1113 = t1204 * t1120 + t1207 * t1140;
t1112 = -t1207 * t1120 + t1204 * t1140;
t1111 = t1206 * t1122 + t1203 * t1124;
t1110 = -t1203 * t1122 + t1206 * t1124;
t1108 = -t1203 * t1110 + t1206 * t1111;
t1107 = t1206 * t1110 + t1203 * t1111;
t1106 = t1204 * t1107 - t1207 * t1123;
t1105 = -t1207 * t1107 - t1204 * t1123;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1179, -t1178, 0, -t1205 * t1183 + t1208 * t1184, 0, 0, 0, 0, 0, 0, 0, t1179, t1178, -t1208 * t1162 - t1205 * t1163, 0, 0, 0, 0, 0, 0, 0, t1178, -t1179, -t1205 * t1160 - t1208 * t1161, 0, 0, 0, 0, 0, 0, t1253, -t1251, t1150, t1208 * t1127 - t1205 * t1151, 0, 0, 0, 0, 0, 0, t1150, -t1253, t1251, t1208 * t1118 - t1205 * t1131, 0, 0, 0, 0, 0, 0, t1208 * t1114 - t1205 * t1126, t1208 * t1116 - t1205 * t1130, t1208 * t1112 - t1205 * t1121, t1208 * t1105 - t1205 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1178, -t1179, 0, t1208 * t1183 + t1205 * t1184, 0, 0, 0, 0, 0, 0, 0, -t1178, t1179, -t1205 * t1162 + t1208 * t1163, 0, 0, 0, 0, 0, 0, 0, t1179, t1178, t1208 * t1160 - t1205 * t1161, 0, 0, 0, 0, 0, 0, t1254, -t1252, t1149, t1205 * t1127 + t1208 * t1151, 0, 0, 0, 0, 0, 0, t1149, -t1254, t1252, t1205 * t1118 + t1208 * t1131, 0, 0, 0, 0, 0, 0, t1205 * t1114 + t1208 * t1126, t1205 * t1116 + t1208 * t1130, t1205 * t1112 + t1208 * t1121, t1205 * t1105 + t1208 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1157, -t1158, 0, t1128, 0, 0, 0, 0, 0, 0, 0, t1157, t1158, t1119, 0, 0, 0, 0, 0, 0, t1115, t1117, t1113, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1210, -qJDD(1), 0, t1184, 0, 0, 0, 0, 0, 0, 0, t1210, qJDD(1), -t1162, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1210, -t1161, 0, 0, 0, 0, 0, 0, t1152, -t1154, -t1177, t1127, 0, 0, 0, 0, 0, 0, -t1177, -t1152, t1154, t1118, 0, 0, 0, 0, 0, 0, t1114, t1116, t1112, t1105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1210, 0, t1183, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1210, t1163, 0, 0, 0, 0, 0, 0, 0, t1210, qJDD(1), t1160, 0, 0, 0, 0, 0, 0, t1172, t1175, -t1180, t1151, 0, 0, 0, 0, 0, 0, -t1180, -t1172, -t1175, t1131, 0, 0, 0, 0, 0, 0, t1126, t1130, t1121, t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1157, -t1158, 0, t1128, 0, 0, 0, 0, 0, 0, 0, t1157, t1158, t1119, 0, 0, 0, 0, 0, 0, t1115, t1117, t1113, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1157, -t1158, 0, t1128, 0, 0, 0, 0, 0, 0, 0, t1157, t1158, t1119, 0, 0, 0, 0, 0, 0, t1115, t1117, t1113, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1210, -qJDD(1), t1162, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1210, t1161, 0, 0, 0, 0, 0, 0, -t1152, t1154, t1177, -t1127, 0, 0, 0, 0, 0, 0, t1177, t1152, -t1154, -t1118, 0, 0, 0, 0, 0, 0, -t1114, -t1116, -t1112, -t1105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1210, -t1163, 0, 0, 0, 0, 0, 0, 0, -t1210, -qJDD(1), -t1160, 0, 0, 0, 0, 0, 0, -t1172, -t1175, t1180, -t1151, 0, 0, 0, 0, 0, 0, t1180, t1172, t1175, -t1131, 0, 0, 0, 0, 0, 0, -t1126, -t1130, -t1121, -t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1157, -t1158, 0, t1128, 0, 0, 0, 0, 0, 0, 0, t1157, t1158, t1119, 0, 0, 0, 0, 0, 0, t1115, t1117, t1113, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1210, -qJDD(1), -t1160, 0, 0, 0, 0, 0, 0, -t1172, -t1175, t1180, -t1151, 0, 0, 0, 0, 0, 0, t1180, t1172, t1175, -t1131, 0, 0, 0, 0, 0, 0, -t1126, -t1130, -t1121, -t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1210, -t1161, 0, 0, 0, 0, 0, 0, t1152, -t1154, -t1177, t1127, 0, 0, 0, 0, 0, 0, -t1177, -t1152, t1154, t1118, 0, 0, 0, 0, 0, 0, t1114, t1116, t1112, t1105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1185, -t1181, -t1226, t1144, 0, 0, 0, 0, 0, 0, -t1226, -t1185, t1181, -t1132, 0, 0, 0, 0, 0, 0, t1135, t1137, t1140, -t1123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1182, t1186, -t1225, t1143, 0, 0, 0, 0, 0, 0, -t1225, -t1182, -t1186, t1133, 0, 0, 0, 0, 0, 0, -t1125, -t1129, -t1120, -t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1172, t1175, -t1180, t1151, 0, 0, 0, 0, 0, 0, -t1180, -t1172, -t1175, t1131, 0, 0, 0, 0, 0, 0, t1126, t1130, t1121, t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1180, -t1172, -t1175, t1131, 0, 0, 0, 0, 0, 0, t1126, t1130, t1121, t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1226, t1185, -t1181, t1132, 0, 0, 0, 0, 0, 0, -t1135, -t1137, -t1140, t1123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, t1182, t1186, -t1133, 0, 0, 0, 0, 0, 0, t1125, t1129, t1120, t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1145, t1142, t1136, t1111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1141, t1148, t1138, t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1135, t1137, t1140, -t1123;];
f_new_reg  = t1;
