% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRPR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRPR6_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:51:33
% EndTime: 2019-03-09 01:51:37
% DurationCPUTime: 1.09s
% Computational Cost: add. (648->115), mult. (1150->196), div. (0->0), fcn. (792->4), ass. (0->82)
t42 = sin(qJ(4));
t36 = t42 ^ 2;
t44 = cos(qJ(4));
t38 = t44 ^ 2;
t84 = t36 + t38;
t25 = t84 * qJD(2);
t83 = qJ(5) * t42;
t90 = pkin(4) + pkin(8);
t95 = t90 * t44 + t83;
t82 = t44 * qJ(5);
t94 = -t42 * pkin(4) + t82;
t61 = (t36 - t38) * qJD(4);
t41 = sin(qJ(6));
t35 = t41 ^ 2;
t43 = cos(qJ(6));
t37 = t43 ^ 2;
t87 = t35 - t37;
t60 = t87 * qJD(6);
t39 = -pkin(7) + qJ(2);
t89 = pkin(5) - t39;
t24 = t89 * t42;
t73 = t42 * qJD(5);
t93 = qJD(4) * (-t42 * t90 + t82) + qJD(6) * t24 + t73;
t40 = pkin(1) + qJ(3);
t23 = t40 - t94;
t12 = t42 * pkin(8) + t23;
t64 = t89 * t44;
t55 = t43 * t64;
t56 = -t44 * qJD(5) + qJD(3);
t62 = qJD(4) * t89;
t72 = t44 * qJD(2);
t79 = qJD(6) * t41;
t2 = t12 * t79 - qJD(6) * t55 - t43 * (t95 * qJD(4) + t56) - t41 * (-t42 * t62 - t72);
t31 = t42 * qJD(4);
t78 = qJD(6) * t43;
t3 = -t12 * t78 - t41 * qJD(3) + (-t41 * qJ(5) - t43 * t89) * t31 + (-t43 * qJD(2) + (-t90 * qJD(4) - qJD(6) * t89 + qJD(5)) * t41) * t44;
t4 = -t41 * t12 + t55;
t5 = t43 * t12 + t41 * t64;
t51 = t4 * t41 - t43 * t5;
t1 = -qJD(6) * t51 - t2 * t41 + t3 * t43;
t52 = t4 * t43 + t41 * t5;
t92 = qJD(6) * t52 + t2 * t43 + t3 * t41;
t91 = 0.2e1 * qJD(5);
t88 = t39 * t25;
t86 = t35 + t37;
t80 = qJD(4) * t24;
t77 = qJD(6) * t44;
t76 = qJD(6) * t90;
t75 = t40 * qJD(3);
t74 = t42 * qJD(2);
t32 = t44 * qJD(4);
t71 = qJ(2) * qJD(2);
t70 = qJ(5) * qJD(6);
t69 = t41 * t77;
t68 = t43 * t77;
t67 = t43 * t32;
t66 = t41 * t78;
t65 = t42 * t32;
t63 = t86 * t42;
t59 = qJD(6) * t84;
t26 = 0.2e1 * t65;
t58 = t41 * t67;
t57 = t36 * t66;
t50 = pkin(4) * t44 + t83;
t9 = -t44 * t62 + t74;
t47 = t95 * qJD(6) + t9;
t11 = t94 * qJD(4) + t73;
t46 = 0.2e1 * qJD(2);
t34 = qJ(5) * t91;
t27 = -0.2e1 * t65;
t22 = 0.2e1 * t61;
t21 = 0.2e1 * t25;
t20 = t39 * t32 + t74;
t19 = t39 * t31 - t72;
t18 = -t41 * t31 + t68;
t17 = t41 * t32 + t42 * t78;
t16 = t43 * t31 + t69;
t15 = -t42 * t79 + t67;
t14 = qJD(4) * t63;
t10 = qJD(4) * t50 + t56;
t7 = -t42 * t60 + t58;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0.2e1 * t71, 0, 0, 0, 0, 0, 0, 0, t46, 0.2e1 * qJD(3), 0.2e1 * t71 + 0.2e1 * t75, t27, t22, 0, t26, 0, 0, 0.2e1 * qJD(3) * t42 + 0.2e1 * t40 * t32, 0.2e1 * qJD(3) * t44 - 0.2e1 * t40 * t31, -t21, 0.2e1 * t75 + 0.2e1 * t88, 0, 0, 0, t27, t22, t26, -t21, -0.2e1 * t10 * t42 - 0.2e1 * t23 * t32, -0.2e1 * t10 * t44 + 0.2e1 * t23 * t31, 0.2e1 * t23 * t10 + 0.2e1 * t88, 0.2e1 * t35 * t65 + 0.2e1 * t57, -0.2e1 * t36 * t60 + 0.4e1 * t42 * t58, -0.2e1 * t41 * t61 + 0.2e1 * t42 * t68, 0.2e1 * t37 * t65 - 0.2e1 * t57, -0.2e1 * t42 * t69 - 0.2e1 * t43 * t61, t27, 0.2e1 * (t43 * t80 + t3) * t44 + 0.2e1 * (-qJD(4) * t4 - t24 * t79 - t9 * t43) * t42, 0.2e1 * (-t41 * t80 + t2) * t44 + 0.2e1 * (qJD(4) * t5 - t24 * t78 + t9 * t41) * t42, -0.2e1 * t51 * t32 - 0.2e1 * t92 * t42, -0.2e1 * t5 * t2 - 0.2e1 * t24 * t9 + 0.2e1 * t4 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, 0, 0, 0, 0, 0, -t32, t31, 0, -qJD(3), 0, 0, 0, 0, 0, 0, 0, t32, -t31, -t10, 0, 0, 0, 0, 0, 0, t18, -t16, -t86 * t32, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, t41 * t59, t43 * t59, 0 (qJD(4) * t52 + t9) * t42 + (-t1 - t80) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (0.1e1 - t86) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, -t32, 0, -t19, -t20, 0, 0, 0, t31, t32, 0, 0, 0, -t11, t19, t20, qJD(2) * t50 + t11 * t39, t7, -t87 * t32 - 0.4e1 * t42 * t66, -t16, -t7, -t18, 0, t47 * t41 - t93 * t43, t93 * t41 + t47 * t43, -t1, t9 * qJ(5) - t24 * qJD(5) - t1 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t32, t11, 0, 0, 0, 0, 0, 0, t17, t15, -t14, t73 + (-t63 * t90 + t82) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t34, -0.2e1 * t66, 0.2e1 * t60, 0, 0.2e1 * t66, 0, 0, 0.2e1 * qJD(5) * t41 + 0.2e1 * t43 * t70, 0.2e1 * qJD(5) * t43 - 0.2e1 * t41 * t70, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, 0, t19, 0, 0, 0, 0, 0, 0, -t16, -t18, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, t15, -t31, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, -t79, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, 0, -t78, 0, t41 * t76, t43 * t76, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t6;
