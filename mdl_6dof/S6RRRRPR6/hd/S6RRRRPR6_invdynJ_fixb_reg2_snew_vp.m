% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 20:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:51:53
% EndTime: 2019-05-07 20:52:41
% DurationCPUTime: 20.07s
% Computational Cost: add. (212282->684), mult. (445530->968), div. (0->0), fcn. (335437->12), ass. (0->431)
t393 = sin(qJ(3));
t394 = sin(qJ(2));
t442 = qJD(1) * qJD(2);
t380 = t394 * t442;
t399 = cos(qJ(2));
t441 = t399 * qJDD(1);
t365 = -t380 + t441;
t360 = -qJDD(3) + t365;
t398 = cos(qJ(3));
t448 = qJD(1) * t394;
t361 = qJD(2) * t393 + t398 * t448;
t425 = qJD(2) * t398 - t393 * t448;
t414 = t425 * t361;
t499 = -t360 + t414;
t507 = t393 * t499;
t506 = t398 * t499;
t388 = sin(pkin(11));
t392 = sin(qJ(4));
t397 = cos(qJ(4));
t340 = t361 * t392 - t397 * t425;
t341 = t397 * t361 + t392 * t425;
t389 = cos(pkin(11));
t306 = t389 * t340 + t341 * t388;
t308 = -t340 * t388 + t341 * t389;
t266 = t308 * t306;
t357 = -qJDD(4) + t360;
t496 = -t266 - t357;
t505 = t388 * t496;
t504 = t389 * t496;
t391 = sin(qJ(6));
t396 = cos(qJ(6));
t262 = t396 * t306 + t308 * t391;
t264 = -t306 * t391 + t308 * t396;
t214 = t264 * t262;
t353 = -qJDD(6) + t357;
t498 = -t214 - t353;
t503 = t391 * t498;
t310 = t341 * t340;
t494 = -t310 - t357;
t502 = t392 * t494;
t501 = t396 * t498;
t500 = t397 * t494;
t422 = t425 ^ 2;
t401 = qJD(1) ^ 2;
t381 = t394 * qJDD(1);
t434 = t399 * t442;
t364 = t381 + t434;
t336 = qJD(3) * t425 + t393 * qJDD(2) + t398 * t364;
t410 = t398 * qJDD(2) - t393 * t364;
t403 = -qJD(3) * t361 + t410;
t278 = -t340 * qJD(4) + t397 * t336 + t392 * t403;
t428 = t392 * t336 - t397 * t403;
t407 = -qJD(4) * t341 - t428;
t228 = t389 * t278 + t388 * t407;
t429 = t278 * t388 - t389 * t407;
t163 = -t262 * qJD(6) + t396 * t228 - t391 * t429;
t378 = qJD(1) * t399 - qJD(3);
t373 = -qJD(4) + t378;
t368 = -qJD(6) + t373;
t242 = t262 * t368;
t497 = t242 + t163;
t289 = t306 * t373;
t211 = -t289 + t228;
t495 = t289 + t228;
t327 = t340 * t373;
t260 = -t327 + t278;
t493 = t327 + t278;
t350 = t425 * t378;
t319 = t350 - t336;
t318 = t350 + t336;
t430 = t391 * t228 + t396 * t429;
t134 = (qJD(6) + t368) * t264 + t430;
t257 = (qJD(4) + t373) * t341 + t428;
t314 = (qJD(3) + t378) * t361 - t410;
t254 = t262 ^ 2;
t255 = t264 ^ 2;
t304 = t306 ^ 2;
t305 = t308 ^ 2;
t492 = t340 ^ 2;
t339 = t341 ^ 2;
t359 = t361 ^ 2;
t367 = t368 ^ 2;
t491 = t373 ^ 2;
t375 = t378 ^ 2;
t490 = qJD(2) ^ 2;
t395 = sin(qJ(1));
t400 = cos(qJ(1));
t432 = t395 * g(1) - t400 * g(2);
t355 = qJDD(1) * pkin(1) + t401 * pkin(7) + t432;
t416 = -t365 + t380;
t417 = t364 + t434;
t313 = pkin(2) * t416 - pkin(8) * t417 - t355;
t419 = g(1) * t400 + g(2) * t395;
t479 = qJDD(1) * pkin(7);
t356 = -pkin(1) * t401 - t419 + t479;
t420 = -pkin(2) * t399 - pkin(8) * t394;
t426 = t401 * t420 + t356;
t487 = t394 * g(3);
t323 = -pkin(2) * t490 + qJDD(2) * pkin(8) + t399 * t426 - t487;
t280 = -t398 * t313 + t393 * t323;
t234 = pkin(3) * t499 - pkin(9) * t318 - t280;
t281 = t393 * t313 + t398 * t323;
t347 = -pkin(3) * t378 - pkin(9) * t361;
t236 = -pkin(3) * t422 + pkin(9) * t403 + t378 * t347 + t281;
t183 = -t397 * t234 + t392 * t236;
t184 = t392 * t234 + t397 * t236;
t127 = -t183 * t397 + t184 * t392;
t489 = pkin(3) * t127;
t204 = -t257 * t392 - t260 * t397;
t488 = pkin(3) * t204;
t486 = t399 * g(3);
t446 = qJD(5) * t308;
t299 = -0.2e1 * t446;
t153 = pkin(4) * t494 - qJ(5) * t260 - t183;
t324 = -pkin(4) * t373 - qJ(5) * t341;
t165 = -pkin(4) * t492 + qJ(5) * t407 + t373 * t324 + t184;
t431 = -t389 * t153 + t388 * t165;
t418 = t299 - t431;
t83 = pkin(5) * t496 - pkin(10) * t211 + t418;
t447 = qJD(5) * t306;
t297 = -0.2e1 * t447;
t449 = t388 * t153 + t389 * t165;
t102 = t297 + t449;
t286 = -pkin(5) * t373 - pkin(10) * t308;
t84 = -t304 * pkin(5) - pkin(10) * t429 + t373 * t286 + t102;
t49 = t391 * t84 - t396 * t83;
t50 = t391 * t83 + t396 * t84;
t33 = t391 * t49 + t396 * t50;
t32 = t391 * t50 - t396 * t49;
t482 = t32 * t389;
t15 = t33 * t388 + t482;
t485 = pkin(4) * t15 + pkin(5) * t32;
t137 = -t242 + t163;
t93 = -t134 * t391 - t137 * t396;
t95 = -t134 * t396 + t137 * t391;
t59 = t388 * t95 + t389 * t93;
t484 = pkin(4) * t59 + pkin(5) * t93;
t483 = t32 * t388;
t440 = 0.2e1 * t446;
t101 = t431 + t440;
t65 = -t101 * t389 + t102 * t388;
t481 = t392 * t65;
t480 = t397 * t65;
t322 = -qJDD(2) * pkin(2) - t490 * pkin(8) + t394 * t426 + t486;
t269 = -t403 * pkin(3) - t422 * pkin(9) + t361 * t347 + t322;
t185 = -t407 * pkin(4) - t492 * qJ(5) + t341 * t324 + qJDD(5) + t269;
t126 = pkin(5) * t429 - t304 * pkin(10) + t308 * t286 + t185;
t478 = t126 * t391;
t477 = t126 * t396;
t476 = t127 * t393;
t475 = t127 * t398;
t474 = t185 * t388;
t473 = t185 * t389;
t195 = -t214 + t353;
t472 = t195 * t391;
t471 = t195 * t396;
t246 = -t266 + t357;
t470 = t246 * t388;
t469 = t246 * t389;
t468 = t269 * t392;
t467 = t269 * t397;
t291 = -t310 + t357;
t466 = t291 * t392;
t465 = t291 * t397;
t464 = t308 * t373;
t463 = t322 * t393;
t462 = t322 * t398;
t330 = t360 + t414;
t461 = t330 * t393;
t460 = t330 * t398;
t459 = t368 * t391;
t458 = t368 * t396;
t457 = t373 * t388;
t456 = t373 * t389;
t455 = t373 * t392;
t454 = t373 * t397;
t453 = t393 * t361;
t377 = t399 * t401 * t394;
t452 = t394 * (qJDD(2) + t377);
t451 = t398 * t361;
t450 = t399 * (-t377 + qJDD(2));
t439 = t399 * t214;
t438 = t399 * t266;
t437 = t399 * t310;
t283 = -t305 - t491;
t220 = t283 * t389 + t470;
t436 = pkin(4) * t220 - t449;
t66 = t101 * t388 + t389 * t102;
t39 = t392 * t66 + t480;
t64 = pkin(4) * t65;
t435 = pkin(3) * t39 + t64;
t208 = t429 + t464;
t156 = -t208 * t388 - t211 * t389;
t158 = -t208 * t389 + t211 * t388;
t109 = t156 * t397 + t158 * t392;
t154 = pkin(4) * t156;
t433 = pkin(3) * t109 + t154;
t128 = t183 * t392 + t397 * t184;
t230 = t280 * t393 + t398 * t281;
t345 = t356 * t394 + t486;
t346 = t356 * t399 - t487;
t427 = t394 * t345 + t399 * t346;
t16 = t33 * t389 - t483;
t9 = t15 * t397 + t16 * t392;
t424 = pkin(3) * t9 + t485;
t61 = -t388 * t93 + t389 * t95;
t35 = t392 * t61 + t397 * t59;
t423 = pkin(3) * t35 + t484;
t320 = -t339 - t491;
t267 = t320 * t397 + t466;
t421 = pkin(3) * t267 - t184;
t415 = t280 * t398 - t281 * t393;
t413 = -pkin(1) + t420;
t221 = -t283 * t388 + t469;
t166 = t220 * t397 + t221 * t392;
t412 = pkin(3) * t166 + t436;
t202 = -t367 - t254;
t149 = t202 * t391 + t501;
t150 = t202 * t396 - t503;
t106 = t149 * t389 + t150 * t388;
t411 = pkin(4) * t106 + pkin(5) * t149 - t49;
t300 = -t491 - t492;
t244 = t300 * t392 + t500;
t409 = pkin(3) * t244 - t183;
t408 = t399 * t414;
t253 = -t491 - t304;
t193 = t253 * t388 + t504;
t194 = t253 * t389 - t505;
t142 = t193 * t397 + t194 * t392;
t192 = pkin(4) * t193;
t406 = pkin(3) * t142 + t192 - t431;
t237 = -t255 - t367;
t173 = t237 * t396 + t472;
t174 = -t237 * t391 + t471;
t117 = t173 * t389 + t174 * t388;
t405 = pkin(4) * t117 + pkin(5) * t173 - t50;
t107 = -t149 * t388 + t150 * t389;
t67 = t106 * t397 + t107 * t392;
t404 = pkin(3) * t67 + t411;
t118 = -t173 * t388 + t174 * t389;
t76 = t117 * t397 + t118 * t392;
t402 = pkin(3) * t76 + t405;
t386 = t399 ^ 2;
t385 = t394 ^ 2;
t383 = t386 * t401;
t382 = t385 * t401;
t366 = -0.2e1 * t380 + t441;
t363 = t381 + 0.2e1 * t434;
t351 = t399 * t357;
t349 = -t359 + t375;
t348 = t422 - t375;
t343 = t359 - t422;
t342 = -t359 - t375;
t338 = -t375 - t422;
t329 = t422 + t359;
t326 = -t339 + t491;
t325 = -t491 + t492;
t315 = (-qJD(3) + t378) * t361 + t410;
t309 = t339 - t492;
t302 = -t342 * t393 + t460;
t301 = t342 * t398 + t461;
t298 = 0.2e1 * t447;
t295 = t338 * t398 - t507;
t294 = t338 * t393 + t506;
t288 = -t305 + t491;
t287 = t304 - t491;
t285 = (t340 * t397 - t341 * t392) * t373;
t284 = (t340 * t392 + t341 * t397) * t373;
t282 = -t339 - t492;
t275 = -t314 * t398 + t318 * t393;
t273 = t325 * t397 + t466;
t272 = -t326 * t392 + t500;
t271 = t325 * t392 - t465;
t270 = t326 * t397 + t502;
t268 = -t320 * t392 + t465;
t265 = t305 - t304;
t256 = (qJD(4) - t373) * t341 + t428;
t252 = t278 * t397 + t341 * t455;
t251 = t278 * t392 - t341 * t454;
t250 = -t340 * t454 - t392 * t407;
t249 = -t340 * t455 + t397 * t407;
t245 = t300 * t397 - t502;
t241 = -t255 + t367;
t240 = t254 - t367;
t239 = (t306 * t389 - t308 * t388) * t373;
t238 = (t306 * t388 + t308 * t389) * t373;
t231 = -t304 - t305;
t225 = t287 * t389 + t470;
t224 = -t288 * t388 + t504;
t223 = t287 * t388 - t469;
t222 = t288 * t389 + t505;
t218 = -pkin(9) * t267 + t467;
t217 = -t267 * t393 + t268 * t398;
t216 = t267 * t398 + t268 * t393;
t215 = -pkin(9) * t244 + t468;
t213 = t255 - t254;
t207 = t429 - t464;
t206 = -t257 * t397 + t260 * t392;
t205 = -t256 * t397 - t392 * t493;
t203 = -t256 * t392 + t397 * t493;
t201 = t228 * t389 + t308 * t457;
t200 = t228 * t388 - t308 * t456;
t199 = -t306 * t456 + t388 * t429;
t198 = -t306 * t457 - t389 * t429;
t191 = (t262 * t396 - t264 * t391) * t368;
t190 = (t262 * t391 + t264 * t396) * t368;
t189 = -t244 * t393 + t245 * t398;
t188 = t244 * t398 + t245 * t393;
t187 = -t238 * t392 + t239 * t397;
t186 = t238 * t397 + t239 * t392;
t181 = -pkin(3) * t493 + pkin(9) * t268 + t468;
t180 = -pkin(3) * t256 + pkin(9) * t245 - t467;
t179 = -t254 - t255;
t178 = t240 * t396 + t472;
t177 = -t241 * t391 + t501;
t176 = t240 * t391 - t471;
t175 = t241 * t396 + t503;
t171 = -t223 * t392 + t225 * t397;
t170 = -t222 * t392 + t224 * t397;
t169 = t223 * t397 + t225 * t392;
t168 = t222 * t397 + t224 * t392;
t167 = -t220 * t392 + t221 * t397;
t162 = -qJD(6) * t264 - t430;
t161 = -qJ(5) * t220 + t473;
t160 = -t204 * t393 + t206 * t398;
t159 = t204 * t398 + t206 * t393;
t157 = -t207 * t389 - t388 * t495;
t155 = -t207 * t388 + t389 * t495;
t148 = -t200 * t392 + t201 * t397;
t147 = -t198 * t392 + t199 * t397;
t146 = t200 * t397 + t201 * t392;
t145 = t198 * t397 + t199 * t392;
t143 = -t193 * t392 + t194 * t397;
t141 = -t190 * t388 + t191 * t389;
t140 = t190 * t389 + t191 * t388;
t139 = -qJ(5) * t193 + t474;
t133 = (qJD(6) - t368) * t264 + t430;
t132 = t163 * t396 + t264 * t459;
t131 = t163 * t391 - t264 * t458;
t130 = -t162 * t391 - t262 * t458;
t129 = t162 * t396 - t262 * t459;
t125 = -pkin(4) * t495 + qJ(5) * t221 + t474;
t124 = -pkin(3) * t269 + pkin(9) * t128;
t123 = -t176 * t388 + t178 * t389;
t122 = -t175 * t388 + t177 * t389;
t121 = t176 * t389 + t178 * t388;
t120 = t175 * t389 + t177 * t388;
t119 = -pkin(4) * t207 + qJ(5) * t194 - t473;
t115 = -t166 * t393 + t167 * t398;
t114 = t166 * t398 + t167 * t393;
t113 = -pkin(9) * t204 - t127;
t112 = -pkin(3) * t282 + pkin(9) * t206 + t128;
t111 = -t156 * t392 + t158 * t397;
t110 = -t155 * t392 + t157 * t397;
t108 = t155 * t397 + t157 * t392;
t104 = -t142 * t393 + t143 * t398;
t103 = t142 * t398 + t143 * t393;
t99 = -pkin(10) * t173 + t477;
t98 = -t140 * t392 + t141 * t397;
t97 = t140 * t397 + t141 * t392;
t96 = -pkin(10) * t149 + t478;
t94 = -t133 * t396 - t391 * t497;
t92 = -t133 * t391 + t396 * t497;
t90 = -t131 * t388 + t132 * t389;
t89 = -t129 * t388 + t130 * t389;
t88 = t131 * t389 + t132 * t388;
t87 = t129 * t389 + t130 * t388;
t86 = t128 * t398 - t476;
t85 = t128 * t393 + t475;
t81 = -t121 * t392 + t123 * t397;
t80 = -t120 * t392 + t122 * t397;
t79 = t121 * t397 + t123 * t392;
t78 = t120 * t397 + t122 * t392;
t77 = -t117 * t392 + t118 * t397;
t75 = -pkin(9) * t166 - t125 * t392 + t161 * t397;
t74 = -pkin(5) * t497 + pkin(10) * t174 + t478;
t73 = -pkin(5) * t133 + pkin(10) * t150 - t477;
t72 = -pkin(9) * t142 - t119 * t392 + t139 * t397;
t71 = -pkin(3) * t495 + pkin(9) * t167 + t125 * t397 + t161 * t392;
t70 = -t109 * t393 + t111 * t398;
t69 = t109 * t398 + t111 * t393;
t68 = -t106 * t392 + t107 * t397;
t63 = -pkin(3) * t207 + pkin(9) * t143 + t119 * t397 + t139 * t392;
t62 = -pkin(4) * t185 + qJ(5) * t66;
t60 = -t388 * t92 + t389 * t94;
t58 = t388 * t94 + t389 * t92;
t56 = -t392 * t88 + t397 * t90;
t55 = -t392 * t87 + t397 * t89;
t54 = t392 * t90 + t397 * t88;
t53 = t392 * t89 + t397 * t87;
t52 = -qJ(5) * t156 - t65;
t51 = -pkin(4) * t231 + qJ(5) * t158 + t66;
t47 = -t393 * t76 + t398 * t77;
t46 = t393 * t77 + t398 * t76;
t45 = -qJ(5) * t117 - t388 * t74 + t389 * t99;
t44 = -qJ(5) * t106 - t388 * t73 + t389 * t96;
t43 = -t393 * t67 + t398 * t68;
t42 = t393 * t68 + t398 * t67;
t41 = -pkin(4) * t497 + qJ(5) * t118 + t388 * t99 + t389 * t74;
t40 = t397 * t66 - t481;
t38 = -pkin(4) * t133 + qJ(5) * t107 + t388 * t96 + t389 * t73;
t37 = -t392 * t59 + t397 * t61;
t36 = -t392 * t58 + t397 * t60;
t34 = t392 * t60 + t397 * t58;
t30 = -pkin(5) * t126 + pkin(10) * t33;
t29 = -pkin(9) * t109 - t392 * t51 + t397 * t52;
t28 = -pkin(3) * t231 + pkin(9) * t111 + t392 * t52 + t397 * t51;
t27 = -pkin(10) * t93 - t32;
t26 = -pkin(5) * t179 + pkin(10) * t95 + t33;
t25 = -t39 * t393 + t398 * t40;
t24 = t39 * t398 + t393 * t40;
t23 = -pkin(9) * t39 - qJ(5) * t480 - t392 * t62;
t22 = -pkin(3) * t185 + pkin(9) * t40 - qJ(5) * t481 + t397 * t62;
t21 = -pkin(9) * t76 - t392 * t41 + t397 * t45;
t20 = -pkin(3) * t497 + pkin(9) * t77 + t392 * t45 + t397 * t41;
t19 = -t35 * t393 + t37 * t398;
t18 = t35 * t398 + t37 * t393;
t17 = -pkin(9) * t67 - t38 * t392 + t397 * t44;
t13 = -pkin(3) * t133 + pkin(9) * t68 + t38 * t397 + t392 * t44;
t12 = -qJ(5) * t59 - t26 * t388 + t27 * t389;
t11 = -pkin(4) * t179 + qJ(5) * t61 + t26 * t389 + t27 * t388;
t10 = -t15 * t392 + t16 * t397;
t8 = -pkin(10) * t482 - qJ(5) * t15 - t30 * t388;
t7 = -pkin(4) * t126 - pkin(10) * t483 + qJ(5) * t16 + t30 * t389;
t6 = -pkin(9) * t35 - t11 * t392 + t12 * t397;
t5 = -pkin(3) * t179 + pkin(9) * t37 + t11 * t397 + t12 * t392;
t4 = t10 * t398 - t393 * t9;
t3 = t10 * t393 + t398 * t9;
t2 = -pkin(9) * t9 - t392 * t7 + t397 * t8;
t1 = -pkin(3) * t126 + pkin(9) * t10 + t392 * t8 + t397 * t7;
t14 = [0, 0, 0, 0, 0, qJDD(1), t432, t419, 0, 0, t417 * t394, t363 * t399 + t366 * t394, t452 + t399 * (-t382 + t490), -t416 * t399, t394 * (t383 - t490) + t450, 0, t399 * t355 + pkin(1) * t366 + pkin(7) * (t399 * (-t383 - t490) - t452), -t394 * t355 - pkin(1) * t363 + pkin(7) * (-t450 - t394 * (-t382 - t490)), pkin(1) * (t382 + t383) + (t385 + t386) * t479 + t427, pkin(1) * t355 + pkin(7) * t427, t394 * (t336 * t398 + t378 * t453) + t408, t394 * (t315 * t398 + t319 * t393) - t399 * t343, t394 * (-t349 * t393 + t506) - t399 * t318, t394 * (t350 * t398 - t393 * t403) - t408, t394 * (t348 * t398 + t461) + t399 * t314, t399 * t360 + t394 * (-t398 * t425 - t453) * t378, t394 * (-pkin(8) * t294 + t463) + t399 * (-pkin(2) * t294 + t280) - pkin(1) * t294 + pkin(7) * (t295 * t399 - t315 * t394), t394 * (-pkin(8) * t301 + t462) + t399 * (-pkin(2) * t301 + t281) - pkin(1) * t301 + pkin(7) * (t302 * t399 - t319 * t394), t394 * t415 + pkin(7) * (t275 * t399 - t329 * t394) + t413 * (-t314 * t393 - t318 * t398), pkin(7) * (t230 * t399 + t322 * t394) - t413 * t415, t394 * (-t251 * t393 + t252 * t398) - t437, t394 * (-t203 * t393 + t205 * t398) - t399 * t309, t394 * (-t270 * t393 + t272 * t398) - t399 * t260, t394 * (-t249 * t393 + t250 * t398) + t437, t394 * (-t271 * t393 + t273 * t398) + t399 * t257, t394 * (-t284 * t393 + t285 * t398) + t351, t394 * (-pkin(8) * t188 - t180 * t393 + t215 * t398) + t399 * (-pkin(2) * t188 - t409) - pkin(1) * t188 + pkin(7) * (t189 * t399 + t256 * t394), t394 * (-pkin(8) * t216 - t181 * t393 + t218 * t398) + t399 * (-pkin(2) * t216 - t421) - pkin(1) * t216 + pkin(7) * (t217 * t399 + t394 * t493), t394 * (-pkin(8) * t159 - t112 * t393 + t113 * t398) + t399 * (-pkin(2) * t159 - t488) - pkin(1) * t159 + pkin(7) * (t160 * t399 + t282 * t394), t394 * (-pkin(8) * t85 - pkin(9) * t475 - t124 * t393) + t399 * (-pkin(2) * t85 - t489) - pkin(1) * t85 + pkin(7) * (t269 * t394 + t399 * t86), t394 * (-t146 * t393 + t148 * t398) - t438, t394 * (-t108 * t393 + t110 * t398) - t399 * t265, t394 * (-t168 * t393 + t170 * t398) - t399 * t211, t394 * (-t145 * t393 + t147 * t398) + t438, t394 * (-t169 * t393 + t171 * t398) + t399 * t208, t394 * (-t186 * t393 + t187 * t398) + t351, t394 * (-pkin(8) * t103 - t393 * t63 + t398 * t72) + t399 * (-pkin(2) * t103 - t406 + t440) - pkin(1) * t103 + pkin(7) * (t104 * t399 + t207 * t394), t394 * (-pkin(8) * t114 - t393 * t71 + t398 * t75) + t399 * (-pkin(2) * t114 + t297 - t412) - pkin(1) * t114 + pkin(7) * (t115 * t399 + t394 * t495), t394 * (-pkin(8) * t69 - t28 * t393 + t29 * t398) + t399 * (-pkin(2) * t69 - t433) - pkin(1) * t69 + pkin(7) * (t231 * t394 + t399 * t70), t394 * (-pkin(8) * t24 - t22 * t393 + t23 * t398) + t399 * (-pkin(2) * t24 - t435) - pkin(1) * t24 + pkin(7) * (t185 * t394 + t25 * t399), t394 * (-t393 * t54 + t398 * t56) - t439, t394 * (-t34 * t393 + t36 * t398) - t399 * t213, t394 * (-t393 * t78 + t398 * t80) - t399 * t137, t394 * (-t393 * t53 + t398 * t55) + t439, t394 * (-t393 * t79 + t398 * t81) + t399 * t134, t394 * (-t393 * t97 + t398 * t98) + t399 * t353, t394 * (-pkin(8) * t42 - t13 * t393 + t17 * t398) + t399 * (-pkin(2) * t42 - t404) - pkin(1) * t42 + pkin(7) * (t133 * t394 + t399 * t43), t394 * (-pkin(8) * t46 - t20 * t393 + t21 * t398) + t399 * (-pkin(2) * t46 - t402) - pkin(1) * t46 + pkin(7) * (t394 * t497 + t399 * t47), t394 * (-pkin(8) * t18 - t393 * t5 + t398 * t6) + t399 * (-pkin(2) * t18 - t423) - pkin(1) * t18 + pkin(7) * (t179 * t394 + t19 * t399), t394 * (-pkin(8) * t3 - t1 * t393 + t2 * t398) + t399 * (-pkin(2) * t3 - t424) - pkin(1) * t3 + pkin(7) * (t126 * t394 + t399 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t377, t382 - t383, t381, t377, t441, qJDD(2), -t345, -t346, 0, 0, t336 * t393 - t378 * t451, t315 * t393 - t319 * t398, t349 * t398 + t507, t350 * t393 + t398 * t403, t348 * t393 - t460, (-t393 * t425 + t451) * t378, pkin(2) * t315 + pkin(8) * t295 - t462, pkin(2) * t319 + pkin(8) * t302 + t463, pkin(2) * t329 + pkin(8) * t275 + t230, -pkin(2) * t322 + pkin(8) * t230, t251 * t398 + t252 * t393, t203 * t398 + t205 * t393, t270 * t398 + t272 * t393, t249 * t398 + t250 * t393, t271 * t398 + t273 * t393, t284 * t398 + t285 * t393, -pkin(2) * t256 + pkin(8) * t189 + t180 * t398 + t215 * t393, -pkin(2) * t493 + pkin(8) * t217 + t181 * t398 + t218 * t393, -pkin(2) * t282 + pkin(8) * t160 + t112 * t398 + t113 * t393, -pkin(2) * t269 + pkin(8) * t86 - pkin(9) * t476 + t124 * t398, t146 * t398 + t148 * t393, t108 * t398 + t110 * t393, t168 * t398 + t170 * t393, t145 * t398 + t147 * t393, t169 * t398 + t171 * t393, t186 * t398 + t187 * t393, -pkin(2) * t207 + pkin(8) * t104 + t393 * t72 + t398 * t63, -pkin(2) * t495 + pkin(8) * t115 + t393 * t75 + t398 * t71, -pkin(2) * t231 + pkin(8) * t70 + t28 * t398 + t29 * t393, -pkin(2) * t185 + pkin(8) * t25 + t22 * t398 + t23 * t393, t393 * t56 + t398 * t54, t34 * t398 + t36 * t393, t393 * t80 + t398 * t78, t393 * t55 + t398 * t53, t393 * t81 + t398 * t79, t393 * t98 + t398 * t97, -pkin(2) * t133 + pkin(8) * t43 + t13 * t398 + t17 * t393, -pkin(2) * t497 + pkin(8) * t47 + t20 * t398 + t21 * t393, -pkin(2) * t179 + pkin(8) * t19 + t393 * t6 + t398 * t5, -pkin(2) * t126 + pkin(8) * t4 + t1 * t398 + t2 * t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t414, t343, t318, t414, -t314, -t360, -t280, -t281, 0, 0, t310, t309, t260, -t310, -t257, -t357, t409, t421, t488, t489, t266, t265, t211, -t266, -t208, -t357, t299 + t406, t298 + t412, t433, t435, t214, t213, t137, -t214, -t134, -t353, t404, t402, t423, t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t310, t309, t260, -t310, -t257, -t357, -t183, -t184, 0, 0, t266, t265, t211, -t266, -t208, -t357, t192 + t418, t298 + t436, t154, t64, t214, t213, t137, -t214, -t134, -t353, t411, t405, t484, t485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, t495, t231, t185, 0, 0, 0, 0, 0, 0, t133, t497, t179, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, t213, t137, -t214, -t134, -t353, -t49, -t50, 0, 0;];
tauJ_reg  = t14;
