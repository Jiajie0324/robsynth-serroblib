% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR6_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:23:17
% EndTime: 2019-03-09 22:23:41
% DurationCPUTime: 11.14s
% Computational Cost: add. (15520->614), mult. (35573->822), div. (0->0), fcn. (26570->16), ass. (0->310)
t322 = cos(qJ(3));
t318 = sin(qJ(2));
t323 = cos(qJ(2));
t424 = t322 * t323;
t350 = pkin(3) * t318 - pkin(9) * t424;
t460 = pkin(8) + pkin(9);
t392 = qJD(3) * t460;
t364 = pkin(2) * t318 - pkin(8) * t323;
t255 = t364 * qJD(1);
t317 = sin(qJ(3));
t410 = qJD(1) * t318;
t391 = t317 * t410;
t413 = pkin(7) * t391 + t322 * t255;
t507 = qJD(1) * t350 + t322 * t392 + t413;
t232 = t317 * t255;
t427 = t318 * t322;
t428 = t317 * t323;
t505 = t232 + (-pkin(7) * t427 - pkin(9) * t428) * qJD(1) + t317 * t392;
t315 = sin(qJ(6));
t320 = cos(qJ(6));
t398 = qJD(6) * t315;
t397 = t322 * qJD(2);
t246 = t391 - t397;
t406 = qJD(2) * t317;
t248 = t322 * t410 + t406;
t316 = sin(qJ(4));
t321 = cos(qJ(4));
t184 = t321 * t246 + t248 * t316;
t313 = sin(pkin(11));
t314 = cos(pkin(11));
t354 = t246 * t316 - t321 * t248;
t470 = -t184 * t314 + t313 * t354;
t425 = t320 * t470;
t469 = t184 * t313 + t314 * t354;
t396 = qJD(1) * qJD(2);
t382 = t323 * t396;
t395 = t318 * qJDD(1);
t402 = qJD(3) * t318;
t477 = -qJD(1) * t402 + qJDD(2);
t174 = qJD(3) * t397 + (t382 + t395) * t322 + t477 * t317;
t409 = qJD(1) * t323;
t175 = (qJD(2) * (qJD(3) + t409) + t395) * t317 - t477 * t322;
t328 = qJD(4) * t354 - t316 * t174 - t321 * t175;
t399 = qJD(4) * t321;
t400 = qJD(4) * t316;
t94 = t321 * t174 - t316 * t175 - t246 * t399 - t248 * t400;
t47 = -t313 * t94 + t314 * t328;
t48 = t313 * t328 + t314 * t94;
t10 = qJD(6) * t425 + t315 * t47 + t320 * t48 + t398 * t469;
t286 = -qJD(3) + t409;
t276 = -qJD(4) + t286;
t267 = -qJD(6) + t276;
t499 = t315 * t469 + t425;
t445 = t267 * t499;
t506 = t10 + t445;
t487 = t315 * t470 - t320 * t469;
t503 = t487 * t499;
t249 = t316 * t317 - t321 * t322;
t341 = t249 * t323;
t463 = qJD(3) + qJD(4);
t501 = -qJD(1) * t341 + t463 * t249;
t250 = t316 * t322 + t317 * t321;
t417 = (-t409 + t463) * t250;
t498 = t487 ^ 2 - t499 ^ 2;
t312 = qJ(3) + qJ(4);
t292 = pkin(11) + qJ(6) + t312;
t283 = sin(t292);
t284 = cos(t292);
t324 = cos(qJ(1));
t319 = sin(qJ(1));
t426 = t319 * t323;
t200 = t283 * t324 - t284 * t426;
t423 = t323 * t324;
t202 = t283 * t319 + t284 * t423;
t264 = -pkin(2) * t323 - pkin(8) * t318 - pkin(1);
t239 = t264 * qJD(1);
t298 = pkin(7) * t409;
t270 = qJD(2) * pkin(8) + t298;
t192 = t322 * t239 - t270 * t317;
t159 = -pkin(9) * t248 + t192;
t150 = -pkin(3) * t286 + t159;
t193 = t239 * t317 + t270 * t322;
t160 = -pkin(9) * t246 + t193;
t157 = t321 * t160;
t104 = t150 * t316 + t157;
t483 = qJ(5) * t184;
t78 = t104 - t483;
t444 = t314 * t78;
t155 = t316 * t160;
t103 = t321 * t150 - t155;
t482 = qJ(5) * t354;
t77 = t103 + t482;
t70 = -pkin(4) * t276 + t77;
t30 = t313 * t70 + t444;
t468 = pkin(10) * t470;
t22 = t30 + t468;
t21 = t22 * t398;
t452 = g(3) * t318;
t269 = -qJD(2) * pkin(2) + pkin(7) * t410;
t203 = pkin(3) * t246 + t269;
t145 = pkin(4) * t184 + qJD(5) + t203;
t83 = -pkin(5) * t470 + t145;
t504 = g(1) * t202 - g(2) * t200 + t284 * t452 - t83 * t499 + t21;
t11 = qJD(6) * t487 + t315 * t48 - t320 * t47;
t442 = t487 * t267;
t494 = -t11 - t442;
t502 = t507 * t321;
t271 = t460 * t317;
t272 = t460 * t322;
t500 = -t271 * t399 - t272 * t400 - t507 * t316 - t505 * t321;
t303 = t323 * qJDD(1);
t466 = -t318 * t396 + t303;
t243 = qJDD(3) - t466;
t238 = qJDD(4) + t243;
t258 = t364 * qJD(2);
t197 = qJD(1) * t258 + qJDD(1) * t264;
t189 = t322 * t197;
t222 = t466 * pkin(7) + qJDD(2) * pkin(8);
t79 = t243 * pkin(3) - t174 * pkin(9) - qJD(3) * t193 - t317 * t222 + t189;
t401 = qJD(3) * t322;
t403 = qJD(3) * t317;
t340 = t317 * t197 + t322 * t222 + t239 * t401 - t270 * t403;
t90 = -pkin(9) * t175 + t340;
t378 = -t316 * t90 + t321 * t79;
t329 = -qJD(4) * t104 + t378;
t16 = t238 * pkin(4) - t94 * qJ(5) + qJD(5) * t354 + t329;
t372 = -t150 * t399 + t160 * t400 - t316 * t79 - t321 * t90;
t18 = qJ(5) * t328 - qJD(5) * t184 - t372;
t4 = t314 * t16 - t18 * t313;
t2 = pkin(5) * t238 - pkin(10) * t48 + t4;
t497 = -t315 * t2 + t504;
t199 = t283 * t426 + t284 * t324;
t201 = -t283 * t423 + t284 * t319;
t5 = t313 * t16 + t314 * t18;
t3 = pkin(10) * t47 + t5;
t393 = t320 * t2 - t315 * t3;
t488 = -g(1) * t201 + g(2) * t199 + t283 * t452 - t83 * t487 + t393;
t495 = pkin(5) * t469;
t484 = pkin(10) * t469;
t414 = -t316 * t271 + t321 * t272;
t492 = -pkin(4) * t410 + t501 * qJ(5) - t414 * qJD(4) - t250 * qJD(5) + t505 * t316 - t502;
t491 = -t417 * qJ(5) - qJD(5) * t249 + t500;
t296 = pkin(7) * t395;
t223 = -qJDD(2) * pkin(2) + pkin(7) * t382 + t296;
t362 = g(1) * t324 + g(2) * t319;
t451 = g(3) * t323;
t334 = t318 * t362 - t451;
t490 = qJD(3) * pkin(8) * t286 - t223 + t334;
t459 = pkin(3) * t317;
t365 = pkin(3) * t403 - t409 * t459 - t298;
t489 = pkin(4) * t417 + t365;
t486 = pkin(4) * t354;
t481 = t354 * t184;
t480 = t313 * t501 - t417 * t314;
t479 = -t417 * t313 - t501 * t314;
t404 = qJD(2) * t323;
t384 = t317 * t404;
t478 = t318 * t401 + t384;
t476 = -t184 ^ 2 + t354 ^ 2;
t475 = -t184 * t276 + t94;
t305 = sin(t312);
t306 = cos(t312);
t210 = t305 * t324 - t306 * t426;
t212 = t305 * t319 + t306 * t423;
t473 = g(1) * t212 - g(2) * t210 + t184 * t203 + t306 * t452 + t372;
t209 = t305 * t426 + t306 * t324;
t211 = -t305 * t423 + t306 * t319;
t462 = -g(1) * t211 + g(2) * t209 + t305 * t452;
t472 = t203 * t354 + t329 + t462;
t471 = t276 * t354 + t328;
t448 = -t491 * t313 + t492 * t314;
t447 = t492 * t313 + t491 * t314;
t430 = t314 * t316;
t446 = pkin(3) * qJD(4);
t376 = -t159 * t316 - t157;
t84 = t376 + t483;
t421 = t321 * t159 - t155;
t85 = t421 + t482;
t440 = t313 * t85 - t314 * t84 + (-t313 * t321 - t430) * t446;
t431 = t313 * t316;
t438 = -t313 * t84 - t314 * t85 + (t314 * t321 - t431) * t446;
t217 = t250 * t318;
t245 = t322 * t264;
t457 = pkin(7) * t317;
t191 = -pkin(9) * t427 + t245 + (-pkin(3) - t457) * t323;
t288 = pkin(7) * t424;
t412 = t317 * t264 + t288;
t429 = t317 * t318;
t198 = -pkin(9) * t429 + t412;
t419 = t316 * t191 + t321 * t198;
t465 = -t317 * t402 + t323 * t397;
t458 = pkin(4) * t313;
t308 = t322 * pkin(3);
t450 = pkin(2) + t308;
t262 = pkin(4) * t305 + t459;
t449 = pkin(7) + t262;
t143 = -qJD(2) * t341 - t463 * t217;
t218 = t249 * t318;
t405 = qJD(2) * t318;
t415 = t322 * t258 + t405 * t457;
t138 = t350 * qJD(2) + (-t288 + (pkin(9) * t318 - t264) * t317) * qJD(3) + t415;
t416 = t317 * t258 + t264 * t401;
t142 = -t478 * pkin(9) + (-t318 * t397 - t323 * t403) * pkin(7) + t416;
t377 = t321 * t138 - t316 * t142;
t33 = pkin(4) * t405 - t143 * qJ(5) - qJD(4) * t419 + t218 * qJD(5) + t377;
t144 = -t400 * t429 + (t463 * t427 + t384) * t321 + t465 * t316;
t339 = t316 * t138 + t321 * t142 + t191 * t399 - t198 * t400;
t37 = -qJ(5) * t144 - qJD(5) * t217 + t339;
t13 = t313 * t33 + t314 * t37;
t71 = t313 * t78;
t36 = t314 * t77 - t71;
t29 = t314 * t70 - t71;
t20 = -pkin(5) * t276 + t29 + t484;
t443 = t320 * t20;
t441 = -t440 - t468;
t439 = t438 - t484;
t181 = -t249 * t314 - t250 * t313;
t182 = -t249 * t313 + t250 * t314;
t357 = t320 * t181 - t182 * t315;
t437 = qJD(6) * t357 + t480 * t315 + t479 * t320;
t134 = t181 * t315 + t182 * t320;
t436 = qJD(6) * t134 + t479 * t315 - t480 * t320;
t435 = t174 * t317;
t434 = t246 * t286;
t433 = t248 * t286;
t432 = t248 * t322;
t422 = -t480 * pkin(5) + t489;
t374 = t321 * t191 - t198 * t316;
t116 = -pkin(4) * t323 + qJ(5) * t218 + t374;
t121 = -qJ(5) * t217 + t419;
t59 = t313 * t116 + t314 * t121;
t373 = -t321 * t271 - t272 * t316;
t168 = -qJ(5) * t250 + t373;
t169 = -qJ(5) * t249 + t414;
t119 = t313 * t168 + t314 * t169;
t263 = pkin(4) * t306 + t308;
t259 = pkin(3) * t429 + t318 * pkin(7);
t310 = t318 ^ 2;
t411 = -t323 ^ 2 + t310;
t408 = qJD(2) * t246;
t407 = qJD(2) * t248;
t204 = t478 * pkin(3) + pkin(7) * t404;
t390 = t286 * t397;
t388 = t286 * t403;
t385 = t286 * t401;
t380 = qJD(6) * t20 + t3;
t12 = -t313 * t37 + t314 * t33;
t35 = -t313 * t77 - t444;
t58 = t314 * t116 - t121 * t313;
t118 = t314 * t168 - t169 * t313;
t371 = -qJD(3) * t239 - t222;
t369 = pkin(4) * t249 - t450;
t294 = pkin(3) * t321 + pkin(4);
t220 = -pkin(3) * t431 + t314 * t294;
t368 = pkin(4) * t217 + t259;
t93 = pkin(10) * t181 + t119;
t367 = pkin(5) * t410 + t479 * pkin(10) + qJD(6) * t93 - t448;
t92 = -pkin(10) * t182 + t118;
t366 = t480 * pkin(10) + qJD(6) * t92 + t447;
t363 = pkin(3) * t248 - t486;
t361 = g(1) * t319 - g(2) * t324;
t360 = t270 * t401 - t189;
t7 = t315 * t20 + t320 * t22;
t359 = -pkin(8) * t243 + qJD(3) * t269;
t161 = -t217 * t314 + t218 * t313;
t162 = -t217 * t313 - t218 * t314;
t358 = t320 * t161 - t162 * t315;
t113 = t161 * t315 + t162 * t320;
t254 = pkin(2) + t263;
t309 = -qJ(5) - t460;
t353 = t254 * t323 - t309 * t318;
t351 = pkin(4) * t144 + t204;
t289 = pkin(4) * t314 + pkin(5);
t349 = t289 * t315 + t320 * t458;
t348 = t289 * t320 - t315 * t458;
t346 = pkin(1) + t353;
t345 = -0.2e1 * pkin(1) * t396 - pkin(7) * qJDD(2);
t344 = t317 * t243 - t385;
t343 = t322 * t243 + t388;
t326 = qJD(1) ^ 2;
t337 = pkin(1) * t326 + t362;
t148 = pkin(3) * t175 + t223;
t325 = qJD(2) ^ 2;
t331 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t325 + t361;
t60 = -pkin(4) * t328 + qJDD(5) + t148;
t230 = t317 * t319 + t322 * t423;
t229 = -t317 * t423 + t319 * t322;
t228 = t317 * t324 - t319 * t424;
t227 = t317 * t426 + t322 * t324;
t224 = qJDD(6) + t238;
t221 = pkin(3) * t430 + t294 * t313;
t213 = pkin(5) + t220;
t149 = -pkin(5) * t181 + t369;
t126 = -pkin(5) * t161 + t368;
t96 = -t486 - t495;
t91 = t363 - t495;
t88 = t143 * t314 - t144 * t313;
t87 = -t143 * t313 - t144 * t314;
t55 = -pkin(5) * t87 + t351;
t50 = pkin(10) * t161 + t59;
t49 = -pkin(5) * t323 - pkin(10) * t162 + t58;
t26 = qJD(6) * t113 + t315 * t88 - t320 * t87;
t25 = qJD(6) * t358 + t315 * t87 + t320 * t88;
t24 = t36 + t484;
t23 = t35 - t468;
t19 = -pkin(5) * t47 + t60;
t9 = pkin(10) * t87 + t13;
t8 = pkin(5) * t405 - pkin(10) * t88 + t12;
t6 = -t22 * t315 + t443;
t1 = [qJDD(1), t361, t362, qJDD(1) * t310 + 0.2e1 * t318 * t382, 0.2e1 * t303 * t318 - 0.2e1 * t396 * t411, qJDD(2) * t318 + t323 * t325, qJDD(2) * t323 - t318 * t325, 0, t318 * t345 + t323 * t331, -t318 * t331 + t323 * t345, t174 * t427 + t465 * t248 (-t246 * t322 - t248 * t317) * t404 + (-t435 - t175 * t322 + (t246 * t317 - t432) * qJD(3)) * t318 (-t174 - t390) * t323 + (t343 + t407) * t318 (t286 * t406 + t175) * t323 + (-t344 - t408) * t318, -t243 * t323 - t286 * t405 -(-t264 * t403 + t415) * t286 + t245 * t243 - g(1) * t228 - g(2) * t230 + ((t385 + t408) * pkin(7) + (-pkin(7) * t243 + qJD(2) * t269 - t371) * t317 + t360) * t323 + (pkin(7) * t175 + qJD(2) * t192 + t223 * t317 + t269 * t401) * t318, t416 * t286 - t412 * t243 - g(1) * t227 - g(2) * t229 + (t269 * t397 + (-t388 + t407) * pkin(7) + t340) * t323 + (-t269 * t403 - t193 * qJD(2) + t223 * t322 + (t174 - t390) * pkin(7)) * t318, -t143 * t354 - t218 * t94, -t143 * t184 + t144 * t354 - t217 * t94 - t218 * t328, -t143 * t276 - t218 * t238 - t323 * t94 - t354 * t405, t144 * t276 - t184 * t405 - t217 * t238 - t323 * t328, -t238 * t323 - t276 * t405, -t377 * t276 + t374 * t238 - t378 * t323 + t103 * t405 + t204 * t184 - t259 * t328 + t148 * t217 + t203 * t144 - g(1) * t210 - g(2) * t212 + (t104 * t323 + t276 * t419) * qJD(4), -g(1) * t209 - g(2) * t211 - t104 * t405 + t203 * t143 - t148 * t218 - t204 * t354 - t238 * t419 + t259 * t94 + t276 * t339 - t323 * t372, t12 * t469 + t13 * t470 + t161 * t5 - t162 * t4 - t29 * t88 + t30 * t87 + t318 * t361 + t47 * t59 - t48 * t58, t5 * t59 + t30 * t13 + t4 * t58 + t29 * t12 + t60 * t368 + t145 * t351 + (-g(1) * t449 - g(2) * t346) * t324 + (g(1) * t346 - g(2) * t449) * t319, t10 * t113 + t25 * t487, t10 * t358 - t11 * t113 + t25 * t499 - t26 * t487, -t10 * t323 + t113 * t224 - t25 * t267 + t405 * t487, t11 * t323 + t224 * t358 + t26 * t267 + t405 * t499, -t224 * t323 - t267 * t405 -(-t315 * t9 + t320 * t8) * t267 + (-t315 * t50 + t320 * t49) * t224 - t393 * t323 + t6 * t405 - t55 * t499 + t126 * t11 - t19 * t358 + t83 * t26 - g(1) * t200 - g(2) * t202 + (-(-t315 * t49 - t320 * t50) * t267 + t7 * t323) * qJD(6), -t7 * t405 - g(1) * t199 - g(2) * t201 + t126 * t10 + t19 * t113 - t21 * t323 + t83 * t25 + t55 * t487 + ((-qJD(6) * t50 + t8) * t267 - t49 * t224 + t2 * t323) * t315 + ((qJD(6) * t49 + t9) * t267 - t50 * t224 + t380 * t323) * t320; 0, 0, 0, -t318 * t326 * t323, t411 * t326, t395, t303, qJDD(2), t318 * t337 - t296 - t451, t452 + (-pkin(7) * qJDD(1) + t337) * t323, -t286 * t432 + t435 (t174 + t434) * t322 + (-t175 + t433) * t317 (-t248 * t318 + t286 * t424) * qJD(1) + t344 (t246 * t318 - t286 * t428) * qJD(1) + t343, t286 * t410, -pkin(2) * t175 + t413 * t286 + t359 * t317 + (-t192 * t318 + (-pkin(7) * t246 - t269 * t317) * t323) * qJD(1) + t490 * t322, -pkin(2) * t174 - t232 * t286 + t359 * t322 + (-t269 * t424 + t193 * t318 + (-t248 * t323 + t286 * t427) * pkin(7)) * qJD(1) - t490 * t317, t94 * t250 + t354 * t501, t184 * t501 - t94 * t249 + t250 * t328 + t354 * t417, t250 * t238 + t276 * t501 + t354 * t410, t184 * t410 - t249 * t238 + t276 * t417, t276 * t410, t373 * t238 + t450 * t328 + t148 * t249 - t103 * t410 + (t272 * t399 + (-qJD(4) * t271 - t505) * t316 + t502) * t276 + t417 * t203 + t365 * t184 + t334 * t306, t104 * t410 + t148 * t250 - t203 * t501 - t414 * t238 + t276 * t500 - t334 * t305 - t365 * t354 - t450 * t94, -t118 * t48 + t119 * t47 + t181 * t5 - t182 * t4 - t479 * t29 + t480 * t30 - t362 * t323 + t447 * t470 + t448 * t469 - t452, t5 * t119 + t4 * t118 + t60 * t369 - g(3) * t353 + t447 * t30 + t448 * t29 + t489 * t145 + t362 * (t254 * t318 + t309 * t323) t10 * t134 + t437 * t487, t10 * t357 - t134 * t11 - t436 * t487 + t437 * t499, t134 * t224 - t267 * t437 - t410 * t487, t224 * t357 + t267 * t436 - t410 * t499, t267 * t410 (-t315 * t93 + t320 * t92) * t224 + t149 * t11 - t19 * t357 - t6 * t410 + t436 * t83 - t422 * t499 + (t315 * t366 + t320 * t367) * t267 + t334 * t284 -(t315 * t92 + t320 * t93) * t224 + t149 * t10 + t19 * t134 + t7 * t410 + t437 * t83 + t422 * t487 + (-t315 * t367 + t320 * t366) * t267 - t334 * t283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248 * t246, -t246 ^ 2 + t248 ^ 2, t174 - t434, -t175 - t433, t243, -g(1) * t229 + g(2) * t227 - t193 * t286 - t248 * t269 + (t371 + t452) * t317 - t360, g(1) * t230 - g(2) * t228 + g(3) * t427 - t192 * t286 + t246 * t269 - t340, -t481, t476, t475, t471, t238, t376 * t276 + (-t184 * t248 + t238 * t321 + t276 * t400) * pkin(3) + t472, -t421 * t276 + (-t238 * t316 + t248 * t354 + t276 * t399) * pkin(3) + t473, -t220 * t48 + t221 * t47 + (t29 + t438) * t470 + (-t30 + t440) * t469, t5 * t221 + t4 * t220 - t145 * t363 - g(1) * (-t262 * t423 + t263 * t319) - g(2) * (-t262 * t426 - t263 * t324) + t262 * t452 + t438 * t30 + t440 * t29, -t503, t498, t506, t494, t224 (t213 * t320 - t221 * t315) * t224 + t91 * t499 + (t315 * t439 + t320 * t441) * t267 + (-(-t213 * t315 - t221 * t320) * t267 - t7) * qJD(6) + t488, -t91 * t487 + (-t213 * t224 - t2 + (-qJD(6) * t221 - t441) * t267) * t315 + (-t221 * t224 + (qJD(6) * t213 + t439) * t267 - t380) * t320 + t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t481, t476, t475, t471, t238, -t104 * t276 + t472, -t103 * t276 + t473 (t313 * t47 - t314 * t48) * pkin(4) + (-t36 + t29) * t470 + (-t30 - t35) * t469, -t29 * t35 - t30 * t36 + (t145 * t354 + t5 * t313 + t4 * t314 + t462) * pkin(4), -t503, t498, t506, t494, t224, t348 * t224 + (t23 * t320 - t24 * t315) * t267 + t96 * t499 + (t267 * t349 - t7) * qJD(6) + t488, -t349 * t224 - t320 * t3 - (t23 * t315 + t24 * t320) * t267 - t96 * t487 + (t267 * t348 - t443) * qJD(6) + t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t469 ^ 2 - t470 ^ 2, -t29 * t469 - t30 * t470 - t334 + t60, 0, 0, 0, 0, 0, t11 - t442, t10 - t445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t503, t498, t506, t494, t224 (-qJD(6) - t267) * t7 + t488, -t267 * t6 - t320 * t380 + t497;];
tau_reg  = t1;
