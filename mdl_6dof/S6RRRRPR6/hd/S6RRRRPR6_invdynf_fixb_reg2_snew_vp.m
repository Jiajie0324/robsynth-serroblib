% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 20:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:55:31
% EndTime: 2019-05-07 20:55:43
% DurationCPUTime: 12.65s
% Computational Cost: add. (159530->343), mult. (334019->479), div. (0->0), fcn. (249962->12), ass. (0->271)
t2274 = sin(qJ(2));
t2309 = qJD(1) * t2274;
t2260 = qJD(2) * t2309;
t2279 = cos(qJ(2));
t2262 = t2279 * qJDD(1);
t2293 = t2262 - qJDD(3) - t2260;
t2288 = -qJDD(4) + t2293;
t2273 = sin(qJ(3));
t2278 = cos(qJ(3));
t2235 = -t2278 * qJD(2) + t2273 * t2309;
t2236 = qJD(2) * t2273 + t2278 * t2309;
t2272 = sin(qJ(4));
t2277 = cos(qJ(4));
t2217 = t2277 * t2235 + t2236 * t2272;
t2218 = -t2235 * t2272 + t2236 * t2277;
t2303 = t2217 * t2218;
t2180 = -t2288 - t2303;
t2268 = sin(pkin(11));
t2269 = cos(pkin(11));
t2190 = t2269 * t2217 + t2218 * t2268;
t2192 = -t2217 * t2268 + t2218 * t2269;
t2306 = t2190 * t2192;
t2152 = -t2288 - t2306;
t2308 = qJD(1) * t2279;
t2257 = -qJD(3) + t2308;
t2252 = -qJD(4) + t2257;
t2245 = -qJD(6) + t2252;
t2324 = qJD(6) - t2245;
t2323 = qJD(2) ^ 2;
t2271 = sin(qJ(6));
t2276 = cos(qJ(6));
t2158 = t2276 * t2190 + t2192 * t2271;
t2322 = t2158 ^ 2;
t2160 = -t2190 * t2271 + t2192 * t2276;
t2321 = t2160 ^ 2;
t2320 = t2190 ^ 2;
t2319 = t2192 ^ 2;
t2318 = t2217 ^ 2;
t2317 = t2218 ^ 2;
t2316 = t2235 ^ 2;
t2315 = t2236 ^ 2;
t2314 = t2245 ^ 2;
t2313 = t2252 ^ 2;
t2312 = t2257 ^ 2;
t2311 = -2 * qJD(5);
t2310 = t2279 * g(3);
t2307 = t2158 * t2160;
t2305 = t2190 * t2252;
t2304 = t2192 * t2252;
t2302 = t2217 * t2252;
t2301 = t2235 * t2236;
t2300 = t2235 * t2257;
t2299 = qJD(3) + t2257;
t2298 = qJD(4) + t2252;
t2297 = qJD(6) + t2245;
t2275 = sin(qJ(1));
t2280 = cos(qJ(1));
t2249 = t2275 * g(1) - t2280 * g(2);
t2281 = qJD(1) ^ 2;
t2231 = qJDD(1) * pkin(1) + t2281 * pkin(7) + t2249;
t2294 = qJD(2) * t2308;
t2295 = t2274 * qJDD(1);
t2239 = t2294 + t2295;
t2240 = t2262 - 0.2e1 * t2260;
t2195 = (-t2239 - t2294) * pkin(8) - t2240 * pkin(2) - t2231;
t2250 = -g(1) * t2280 - g(2) * t2275;
t2232 = -pkin(1) * t2281 + qJDD(1) * pkin(7) + t2250;
t2225 = -g(3) * t2274 + t2279 * t2232;
t2237 = (-pkin(2) * t2279 - pkin(8) * t2274) * qJD(1);
t2205 = -pkin(2) * t2323 + qJDD(2) * pkin(8) + t2237 * t2308 + t2225;
t2173 = t2278 * t2195 - t2273 * t2205;
t2210 = -t2293 - t2301;
t2287 = -t2273 * qJDD(2) - t2278 * t2239;
t2214 = -qJD(3) * t2235 - t2287;
t2142 = (-t2214 + t2300) * pkin(9) + t2210 * pkin(3) + t2173;
t2174 = t2273 * t2195 + t2278 * t2205;
t2226 = -pkin(3) * t2257 - pkin(9) * t2236;
t2289 = -t2278 * qJDD(2) + t2273 * t2239;
t2285 = -qJD(3) * t2236 - t2289;
t2144 = -pkin(3) * t2316 + pkin(9) * t2285 + t2257 * t2226 + t2174;
t2113 = t2272 * t2142 + t2277 * t2144;
t2265 = t2274 ^ 2;
t2266 = t2279 ^ 2;
t2296 = t2265 + t2266;
t2112 = t2277 * t2142 - t2272 * t2144;
t2282 = -t2277 * t2214 - t2272 * t2285;
t2172 = -t2217 * qJD(4) - t2282;
t2096 = (-t2172 + t2302) * qJ(5) + t2180 * pkin(4) + t2112;
t2206 = -pkin(4) * t2252 - qJ(5) * t2218;
t2290 = t2272 * t2214 - t2277 * t2285;
t2284 = -qJD(4) * t2218 - t2290;
t2102 = -pkin(4) * t2318 + qJ(5) * t2284 + t2252 * t2206 + t2113;
t2070 = t2268 * t2096 + t2269 * t2102 + t2190 * t2311;
t2136 = t2269 * t2172 + t2268 * t2284;
t2291 = t2172 * t2268 - t2269 * t2284;
t2292 = -t2271 * t2136 - t2276 * t2291;
t2127 = -t2136 + t2305;
t2069 = t2269 * t2096 - t2268 * t2102 + t2192 * t2311;
t2286 = -qJDD(6) + t2288;
t2283 = -t2276 * t2136 + t2271 * t2291;
t2204 = t2310 - qJDD(2) * pkin(2) - t2323 * pkin(8) + (qJD(1) * t2237 + t2232) * t2274;
t2167 = -t2285 * pkin(3) - t2316 * pkin(9) + t2236 * t2226 + t2204;
t2114 = -t2284 * pkin(4) - t2318 * qJ(5) + t2218 * t2206 + qJDD(5) + t2167;
t2256 = t2279 * t2281 * t2274;
t2255 = -t2266 * t2281 - t2323;
t2254 = -t2265 * t2281 - t2323;
t2248 = -qJDD(2) + t2256;
t2247 = qJDD(2) + t2256;
t2244 = t2296 * t2281;
t2243 = -qJDD(1) * t2275 - t2280 * t2281;
t2242 = qJDD(1) * t2280 - t2275 * t2281;
t2241 = t2296 * qJDD(1);
t2238 = 0.2e1 * t2294 + t2295;
t2224 = -t2232 * t2274 - t2310;
t2223 = t2248 * t2279 - t2254 * t2274;
t2222 = -t2247 * t2274 + t2255 * t2279;
t2221 = t2248 * t2274 + t2254 * t2279;
t2220 = t2247 * t2279 + t2255 * t2274;
t2219 = -t2312 - t2315;
t2216 = -t2312 - t2316;
t2209 = t2293 - t2301;
t2208 = -t2315 - t2316;
t2202 = -t2313 - t2317;
t2201 = -t2224 * t2274 + t2225 * t2279;
t2200 = t2224 * t2279 + t2225 * t2274;
t2199 = t2235 * t2299 + t2287;
t2198 = t2214 + t2300;
t2197 = -t2236 * t2299 - t2289;
t2196 = (qJD(3) - t2257) * t2236 + t2289;
t2188 = t2209 * t2278 - t2219 * t2273;
t2187 = t2209 * t2273 + t2219 * t2278;
t2186 = -t2313 - t2318;
t2182 = -t2210 * t2273 + t2216 * t2278;
t2181 = t2210 * t2278 + t2216 * t2273;
t2179 = t2288 - t2303;
t2177 = -pkin(5) * t2252 - pkin(10) * t2192;
t2176 = -t2313 - t2319;
t2175 = -t2317 - t2318;
t2169 = t2197 * t2278 - t2199 * t2273;
t2168 = t2197 * t2273 + t2199 * t2278;
t2166 = t2188 * t2279 + t2198 * t2274;
t2165 = t2188 * t2274 - t2198 * t2279;
t2164 = t2179 * t2277 - t2202 * t2272;
t2163 = t2179 * t2272 + t2202 * t2277;
t2162 = t2182 * t2279 + t2196 * t2274;
t2161 = t2182 * t2274 - t2196 * t2279;
t2157 = t2217 * t2298 + t2282;
t2156 = t2172 + t2302;
t2155 = -t2218 * t2298 - t2290;
t2154 = (qJD(4) - t2252) * t2218 + t2290;
t2153 = -t2313 - t2320;
t2151 = t2288 - t2306;
t2150 = -t2180 * t2272 + t2186 * t2277;
t2149 = t2180 * t2277 + t2186 * t2272;
t2147 = t2169 * t2279 + t2208 * t2274;
t2146 = t2169 * t2274 - t2208 * t2279;
t2145 = -t2314 - t2321;
t2139 = -t2319 - t2320;
t2138 = -t2173 * t2273 + t2174 * t2278;
t2137 = t2173 * t2278 + t2174 * t2273;
t2133 = t2151 * t2269 - t2176 * t2268;
t2132 = t2151 * t2268 + t2176 * t2269;
t2131 = t2138 * t2279 + t2204 * t2274;
t2130 = t2138 * t2274 - t2204 * t2279;
t2129 = -t2163 * t2273 + t2164 * t2278;
t2128 = t2163 * t2278 + t2164 * t2273;
t2126 = t2136 + t2305;
t2125 = -t2291 - t2304;
t2124 = t2291 - t2304;
t2123 = t2155 * t2277 - t2157 * t2272;
t2122 = t2155 * t2272 + t2157 * t2277;
t2121 = -t2314 - t2322;
t2120 = -t2286 - t2307;
t2119 = t2286 - t2307;
t2118 = -t2152 * t2268 + t2153 * t2269;
t2117 = t2152 * t2269 + t2153 * t2268;
t2116 = -t2149 * t2273 + t2150 * t2278;
t2115 = t2149 * t2278 + t2150 * t2273;
t2111 = t2129 * t2279 + t2156 * t2274;
t2110 = t2129 * t2274 - t2156 * t2279;
t2109 = -t2321 - t2322;
t2108 = t2116 * t2279 + t2154 * t2274;
t2107 = t2116 * t2274 - t2154 * t2279;
t2106 = t2119 * t2276 - t2145 * t2271;
t2105 = t2119 * t2271 + t2145 * t2276;
t2104 = -t2132 * t2272 + t2133 * t2277;
t2103 = t2132 * t2277 + t2133 * t2272;
t2100 = -t2122 * t2273 + t2123 * t2278;
t2099 = t2122 * t2278 + t2123 * t2273;
t2098 = t2125 * t2269 - t2127 * t2268;
t2097 = t2125 * t2268 + t2127 * t2269;
t2093 = -t2120 * t2271 + t2121 * t2276;
t2092 = t2120 * t2276 + t2121 * t2271;
t2091 = -t2117 * t2272 + t2118 * t2277;
t2090 = t2117 * t2277 + t2118 * t2272;
t2089 = t2100 * t2279 + t2175 * t2274;
t2088 = t2100 * t2274 - t2175 * t2279;
t2087 = t2158 * t2297 + t2283;
t2086 = -t2158 * t2324 - t2283;
t2085 = -t2160 * t2297 + t2292;
t2084 = t2160 * t2324 - t2292;
t2083 = -t2112 * t2272 + t2113 * t2277;
t2082 = t2112 * t2277 + t2113 * t2272;
t2081 = pkin(5) * t2291 - pkin(10) * t2320 + t2192 * t2177 + t2114;
t2080 = -t2105 * t2268 + t2106 * t2269;
t2079 = t2105 * t2269 + t2106 * t2268;
t2078 = -t2103 * t2273 + t2104 * t2278;
t2077 = t2103 * t2278 + t2104 * t2273;
t2076 = -t2097 * t2272 + t2098 * t2277;
t2075 = t2097 * t2277 + t2098 * t2272;
t2074 = -t2092 * t2268 + t2093 * t2269;
t2073 = t2092 * t2269 + t2093 * t2268;
t2072 = -t2090 * t2273 + t2091 * t2278;
t2071 = t2090 * t2278 + t2091 * t2273;
t2068 = t2078 * t2279 + t2126 * t2274;
t2067 = t2078 * t2274 - t2126 * t2279;
t2066 = t2085 * t2276 - t2087 * t2271;
t2065 = t2085 * t2271 + t2087 * t2276;
t2064 = -t2082 * t2273 + t2083 * t2278;
t2063 = t2082 * t2278 + t2083 * t2273;
t2062 = t2072 * t2279 + t2124 * t2274;
t2061 = t2072 * t2274 - t2124 * t2279;
t2060 = -pkin(5) * t2320 - pkin(10) * t2291 + t2252 * t2177 + t2070;
t2059 = t2064 * t2279 + t2167 * t2274;
t2058 = t2064 * t2274 - t2167 * t2279;
t2057 = pkin(5) * t2152 + t2127 * pkin(10) + t2069;
t2056 = -t2079 * t2272 + t2080 * t2277;
t2055 = t2079 * t2277 + t2080 * t2272;
t2054 = -t2075 * t2273 + t2076 * t2278;
t2053 = t2075 * t2278 + t2076 * t2273;
t2052 = -t2073 * t2272 + t2074 * t2277;
t2051 = t2073 * t2277 + t2074 * t2272;
t2050 = -t2069 * t2268 + t2070 * t2269;
t2049 = t2069 * t2269 + t2070 * t2268;
t2048 = t2054 * t2279 + t2139 * t2274;
t2047 = t2054 * t2274 - t2139 * t2279;
t2046 = -t2065 * t2268 + t2066 * t2269;
t2045 = t2065 * t2269 + t2066 * t2268;
t2044 = t2057 * t2271 + t2060 * t2276;
t2043 = t2057 * t2276 - t2060 * t2271;
t2042 = -t2055 * t2273 + t2056 * t2278;
t2041 = t2055 * t2278 + t2056 * t2273;
t2040 = t2042 * t2279 + t2086 * t2274;
t2039 = t2042 * t2274 - t2086 * t2279;
t2038 = -t2051 * t2273 + t2052 * t2278;
t2037 = t2051 * t2278 + t2052 * t2273;
t2036 = -t2049 * t2272 + t2050 * t2277;
t2035 = t2049 * t2277 + t2050 * t2272;
t2034 = t2038 * t2279 + t2084 * t2274;
t2033 = t2038 * t2274 - t2084 * t2279;
t2032 = -t2045 * t2272 + t2046 * t2277;
t2031 = t2045 * t2277 + t2046 * t2272;
t2030 = -t2043 * t2271 + t2044 * t2276;
t2029 = t2043 * t2276 + t2044 * t2271;
t2028 = -t2035 * t2273 + t2036 * t2278;
t2027 = t2035 * t2278 + t2036 * t2273;
t2026 = t2028 * t2279 + t2114 * t2274;
t2025 = t2028 * t2274 - t2114 * t2279;
t2024 = -t2031 * t2273 + t2032 * t2278;
t2023 = t2031 * t2278 + t2032 * t2273;
t2022 = t2024 * t2279 + t2109 * t2274;
t2021 = t2024 * t2274 - t2109 * t2279;
t2020 = -t2029 * t2268 + t2030 * t2269;
t2019 = t2029 * t2269 + t2030 * t2268;
t2018 = -t2019 * t2272 + t2020 * t2277;
t2017 = t2019 * t2277 + t2020 * t2272;
t2016 = -t2017 * t2273 + t2018 * t2278;
t2015 = t2017 * t2278 + t2018 * t2273;
t2014 = t2016 * t2279 + t2081 * t2274;
t2013 = t2016 * t2274 - t2081 * t2279;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2243, -t2242, 0, -t2249 * t2275 + t2250 * t2280, 0, 0, 0, 0, 0, 0, t2222 * t2280 - t2240 * t2275, t2223 * t2280 + t2238 * t2275, t2241 * t2280 - t2244 * t2275, t2201 * t2280 - t2231 * t2275, 0, 0, 0, 0, 0, 0, t2162 * t2280 + t2181 * t2275, t2166 * t2280 + t2187 * t2275, t2147 * t2280 + t2168 * t2275, t2131 * t2280 + t2137 * t2275, 0, 0, 0, 0, 0, 0, t2108 * t2280 + t2115 * t2275, t2111 * t2280 + t2128 * t2275, t2089 * t2280 + t2099 * t2275, t2059 * t2280 + t2063 * t2275, 0, 0, 0, 0, 0, 0, t2062 * t2280 + t2071 * t2275, t2068 * t2280 + t2077 * t2275, t2048 * t2280 + t2053 * t2275, t2026 * t2280 + t2027 * t2275, 0, 0, 0, 0, 0, 0, t2034 * t2280 + t2037 * t2275, t2040 * t2280 + t2041 * t2275, t2022 * t2280 + t2023 * t2275, t2014 * t2280 + t2015 * t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2242, t2243, 0, t2249 * t2280 + t2250 * t2275, 0, 0, 0, 0, 0, 0, t2222 * t2275 + t2240 * t2280, t2223 * t2275 - t2238 * t2280, t2241 * t2275 + t2244 * t2280, t2201 * t2275 + t2231 * t2280, 0, 0, 0, 0, 0, 0, t2162 * t2275 - t2181 * t2280, t2166 * t2275 - t2187 * t2280, t2147 * t2275 - t2168 * t2280, t2131 * t2275 - t2137 * t2280, 0, 0, 0, 0, 0, 0, t2108 * t2275 - t2115 * t2280, t2111 * t2275 - t2128 * t2280, t2089 * t2275 - t2099 * t2280, t2059 * t2275 - t2063 * t2280, 0, 0, 0, 0, 0, 0, t2062 * t2275 - t2071 * t2280, t2068 * t2275 - t2077 * t2280, t2048 * t2275 - t2053 * t2280, t2026 * t2275 - t2027 * t2280, 0, 0, 0, 0, 0, 0, t2034 * t2275 - t2037 * t2280, t2040 * t2275 - t2041 * t2280, t2022 * t2275 - t2023 * t2280, t2014 * t2275 - t2015 * t2280; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2220, t2221, 0, t2200, 0, 0, 0, 0, 0, 0, t2161, t2165, t2146, t2130, 0, 0, 0, 0, 0, 0, t2107, t2110, t2088, t2058, 0, 0, 0, 0, 0, 0, t2061, t2067, t2047, t2025, 0, 0, 0, 0, 0, 0, t2033, t2039, t2021, t2013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2281, -qJDD(1), 0, t2250, 0, 0, 0, 0, 0, 0, t2222, t2223, t2241, t2201, 0, 0, 0, 0, 0, 0, t2162, t2166, t2147, t2131, 0, 0, 0, 0, 0, 0, t2108, t2111, t2089, t2059, 0, 0, 0, 0, 0, 0, t2062, t2068, t2048, t2026, 0, 0, 0, 0, 0, 0, t2034, t2040, t2022, t2014; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2281, 0, t2249, 0, 0, 0, 0, 0, 0, t2240, -t2238, t2244, t2231, 0, 0, 0, 0, 0, 0, -t2181, -t2187, -t2168, -t2137, 0, 0, 0, 0, 0, 0, -t2115, -t2128, -t2099, -t2063, 0, 0, 0, 0, 0, 0, -t2071, -t2077, -t2053, -t2027, 0, 0, 0, 0, 0, 0, -t2037, -t2041, -t2023, -t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2220, t2221, 0, t2200, 0, 0, 0, 0, 0, 0, t2161, t2165, t2146, t2130, 0, 0, 0, 0, 0, 0, t2107, t2110, t2088, t2058, 0, 0, 0, 0, 0, 0, t2061, t2067, t2047, t2025, 0, 0, 0, 0, 0, 0, t2033, t2039, t2021, t2013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2255, t2248, t2262, t2225, 0, 0, 0, 0, 0, 0, t2182, t2188, t2169, t2138, 0, 0, 0, 0, 0, 0, t2116, t2129, t2100, t2064, 0, 0, 0, 0, 0, 0, t2072, t2078, t2054, t2028, 0, 0, 0, 0, 0, 0, t2038, t2042, t2024, t2016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2247, t2254, -t2295, t2224, 0, 0, 0, 0, 0, 0, -t2196, -t2198, -t2208, -t2204, 0, 0, 0, 0, 0, 0, -t2154, -t2156, -t2175, -t2167, 0, 0, 0, 0, 0, 0, -t2124, -t2126, -t2139, -t2114, 0, 0, 0, 0, 0, 0, -t2084, -t2086, -t2109, -t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2240, t2238, -t2244, -t2231, 0, 0, 0, 0, 0, 0, t2181, t2187, t2168, t2137, 0, 0, 0, 0, 0, 0, t2115, t2128, t2099, t2063, 0, 0, 0, 0, 0, 0, t2071, t2077, t2053, t2027, 0, 0, 0, 0, 0, 0, t2037, t2041, t2023, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216, t2209, t2197, t2174, 0, 0, 0, 0, 0, 0, t2150, t2164, t2123, t2083, 0, 0, 0, 0, 0, 0, t2091, t2104, t2076, t2036, 0, 0, 0, 0, 0, 0, t2052, t2056, t2032, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2210, t2219, t2199, t2173, 0, 0, 0, 0, 0, 0, t2149, t2163, t2122, t2082, 0, 0, 0, 0, 0, 0, t2090, t2103, t2075, t2035, 0, 0, 0, 0, 0, 0, t2051, t2055, t2031, t2017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2196, t2198, t2208, t2204, 0, 0, 0, 0, 0, 0, t2154, t2156, t2175, t2167, 0, 0, 0, 0, 0, 0, t2124, t2126, t2139, t2114, 0, 0, 0, 0, 0, 0, t2084, t2086, t2109, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2186, t2179, t2155, t2113, 0, 0, 0, 0, 0, 0, t2118, t2133, t2098, t2050, 0, 0, 0, 0, 0, 0, t2074, t2080, t2046, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2180, t2202, t2157, t2112, 0, 0, 0, 0, 0, 0, t2117, t2132, t2097, t2049, 0, 0, 0, 0, 0, 0, t2073, t2079, t2045, t2019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2154, t2156, t2175, t2167, 0, 0, 0, 0, 0, 0, t2124, t2126, t2139, t2114, 0, 0, 0, 0, 0, 0, t2084, t2086, t2109, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2153, t2151, t2125, t2070, 0, 0, 0, 0, 0, 0, t2093, t2106, t2066, t2030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2152, t2176, t2127, t2069, 0, 0, 0, 0, 0, 0, t2092, t2105, t2065, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2124, t2126, t2139, t2114, 0, 0, 0, 0, 0, 0, t2084, t2086, t2109, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2121, t2119, t2085, t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2120, t2145, t2087, t2043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2084, t2086, t2109, t2081;];
f_new_reg  = t1;
