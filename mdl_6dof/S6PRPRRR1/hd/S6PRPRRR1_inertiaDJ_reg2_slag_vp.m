% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:25:06
% EndTime: 2019-03-08 20:25:13
% DurationCPUTime: 2.34s
% Computational Cost: add. (3296->226), mult. (8268->401), div. (0->0), fcn. (8490->12), ass. (0->142)
t88 = sin(qJ(6));
t83 = t88 ^ 2;
t92 = cos(qJ(6));
t84 = t92 ^ 2;
t171 = (t83 - t84) * qJD(6);
t165 = cos(qJ(5));
t119 = qJD(5) * t165;
t93 = cos(qJ(4));
t122 = t165 * t93;
t89 = sin(qJ(5));
t90 = sin(qJ(4));
t152 = t89 * t90;
t170 = qJD(4) + qJD(5);
t48 = -qJD(4) * t122 - t93 * t119 + t152 * t170;
t151 = t89 * t93;
t67 = t165 * t90 + t151;
t49 = t170 * t67;
t66 = -t122 + t152;
t173 = t48 * t66 - t49 * t67;
t172 = t83 + t84;
t138 = t90 * qJD(4);
t137 = t93 * qJD(4);
t169 = t90 ^ 2;
t168 = 0.2e1 * qJD(4);
t167 = t49 * pkin(5);
t85 = sin(pkin(12));
t77 = pkin(2) * t85 + pkin(8);
t166 = pkin(9) + t77;
t142 = cos(pkin(12));
t86 = sin(pkin(6));
t91 = sin(qJ(2));
t94 = cos(qJ(2));
t58 = (t142 * t91 + t85 * t94) * t86;
t87 = cos(pkin(6));
t50 = -t58 * t90 + t87 * t93;
t51 = t58 * t93 + t87 * t90;
t25 = t165 * t51 + t50 * t89;
t118 = t142 * t94;
t141 = qJD(2) * t86;
t127 = t91 * t141;
t54 = -t118 * t141 + t127 * t85;
t160 = t54 * t93;
t27 = t50 * qJD(4) - t160;
t99 = -t51 * qJD(4) + t54 * t90;
t11 = qJD(5) * t25 - t165 * t99 + t89 * t27;
t24 = -t165 * t50 + t51 * t89;
t164 = t24 * t11;
t163 = t24 * t89;
t115 = t166 * t165;
t63 = t166 * t93;
t43 = -t152 * t166 + t165 * t63;
t120 = qJD(4) * t166;
t62 = t90 * t120;
t20 = qJD(5) * t43 + t115 * t137 - t89 * t62;
t42 = t115 * t90 + t89 * t63;
t162 = t42 * t20;
t161 = t42 * t89;
t55 = qJD(2) * t58;
t57 = (t85 * t91 - t118) * t86;
t39 = t57 * t55;
t159 = t66 * t49;
t158 = t66 * t89;
t157 = t67 * t48;
t156 = t67 * t88;
t155 = t67 * t92;
t154 = t83 * t48;
t45 = t84 * t48;
t153 = t88 * t49;
t150 = t92 * t48;
t149 = t92 * t49;
t82 = qJD(6) * t92;
t148 = t20 * t88 + t42 * t82;
t147 = t149 * t67 - t150 * t66;
t143 = pkin(4) * qJD(5);
t130 = t89 * t143;
t81 = -pkin(4) * t165 - pkin(5);
t145 = t130 * t88 + t81 * t82;
t139 = qJD(6) * t88;
t136 = 0.2e1 * t159;
t135 = t88 * t150;
t78 = -pkin(2) * t142 - pkin(3);
t134 = t78 * t168;
t133 = pkin(5) * t139;
t132 = pkin(5) * t82;
t131 = pkin(4) * t138;
t129 = t67 * t139;
t128 = t57 * t138;
t126 = t88 * t82;
t125 = t90 * t137;
t124 = t88 * t165;
t123 = t92 * t165;
t121 = t172 * t48;
t64 = t67 ^ 2;
t117 = t64 * t126;
t116 = pkin(4) * t119;
t114 = t11 * t42 + t20 * t24;
t113 = t11 * t66 + t24 * t49;
t12 = -t25 * t88 + t57 * t92;
t13 = t25 * t92 + t57 * t88;
t112 = t12 * t92 + t13 * t88;
t111 = t12 * t88 - t13 * t92;
t71 = -pkin(4) * t93 + t78;
t98 = -pkin(5) * t66 + pkin(10) * t67 - t71;
t97 = t92 * t98;
t17 = -t43 * t88 - t97;
t18 = t92 * t43 - t88 * t98;
t110 = t17 * t92 + t18 * t88;
t109 = t17 * t88 - t18 * t92;
t108 = t20 * t66 + t42 * t49;
t80 = pkin(4) * t89 + pkin(10);
t106 = t66 * t80 - t67 * t81;
t105 = -t130 * t92 + t139 * t81;
t103 = -t48 * t88 + t67 * t82;
t29 = t129 + t150;
t28 = t139 * t66 - t149;
t102 = t172 * t165;
t101 = (-t165 * t66 + t67 * t89) * qJD(5);
t100 = pkin(10) * t48 + t131 + t167;
t10 = qJD(5) * t24 - t165 * t27 - t89 * t99;
t3 = t10 * t92 + t139 * t25 - t55 * t88 - t57 * t82;
t4 = -qJD(6) * t13 + t88 * t10 + t55 * t92;
t1 = -qJD(6) * t112 - t3 * t92 - t4 * t88;
t19 = qJD(5) * t42 + t120 * t151 + t165 * t62;
t7 = qJD(6) * t97 - t100 * t88 + t139 * t43 + t19 * t92;
t8 = -qJD(6) * t18 + t100 * t92 + t88 * t19;
t2 = -qJD(6) * t110 - t7 * t92 - t8 * t88;
t96 = pkin(4) * t101 - t48 * t81 - t49 * t80;
t95 = -t137 * t50 - t54 * t169 + t27 * t93;
t74 = -0.2e1 * t126;
t73 = 0.2e1 * t126;
t65 = -0.2e1 * t171;
t61 = t102 * t143;
t40 = t42 * t139;
t33 = t67 * t45;
t32 = t67 * t154;
t30 = t66 * t82 + t153;
t23 = -t45 - t154;
t22 = t171 * t67 + t135;
t14 = -0.4e1 * t126 * t67 + t154 - t45;
t6 = -t11 * t92 + t139 * t24;
t5 = t11 * t88 + t24 * t82;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t54 * t58 + 0.2e1 * t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t51 * t27 + 0.2e1 * t50 * t99 + 0.2e1 * t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t10 * t25 + 0.2e1 * t164 + 0.2e1 * t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t12 * t4 - 0.2e1 * t13 * t3 + 0.2e1 * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, -t94 * t141, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t54, 0 (-t142 * t55 - t54 * t85) * pkin(2), 0, 0, 0, 0, 0, 0, -t55 * t93 + t128, t137 * t57 + t55 * t90, t95, t55 * t78 + t77 * t95, 0, 0, 0, 0, 0, 0, t49 * t57 + t55 * t66, -t48 * t57 + t55 * t67, t10 * t66 + t11 * t67 - t24 * t48 - t25 * t49, pkin(4) * t128 - t10 * t43 - t19 * t25 + t55 * t71 + t114, 0, 0, 0, 0, 0, 0, t103 * t24 + t11 * t156 + t12 * t49 + t4 * t66, t11 * t155 - t13 * t49 - t24 * t29 + t3 * t66, t112 * t48 + (qJD(6) * t111 + t3 * t88 - t4 * t92) * t67, t12 * t8 - t13 * t7 + t17 * t4 - t18 * t3 + t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t125 (t93 ^ 2 - t169) * t168, 0, -0.2e1 * t125, 0, 0, t90 * t134, t93 * t134, 0, 0, -0.2e1 * t157, 0.2e1 * t173, 0, t136, 0, 0, 0.2e1 * t131 * t66 + 0.2e1 * t49 * t71, 0.2e1 * t131 * t67 - 0.2e1 * t48 * t71, 0.2e1 * t19 * t66 + 0.2e1 * t20 * t67 - 0.2e1 * t42 * t48 - 0.2e1 * t43 * t49, 0.2e1 * t131 * t71 - 0.2e1 * t19 * t43 + 0.2e1 * t162, -0.2e1 * t33 - 0.2e1 * t117, 0.4e1 * t135 * t67 + 0.2e1 * t171 * t64, -0.2e1 * t129 * t66 + 0.2e1 * t147, -0.2e1 * t32 + 0.2e1 * t117, -0.2e1 * t103 * t66 - 0.2e1 * t153 * t67, t136, 0.2e1 * t103 * t42 + 0.2e1 * t156 * t20 + 0.2e1 * t17 * t49 + 0.2e1 * t8 * t66, 0.2e1 * t155 * t20 - 0.2e1 * t18 * t49 - 0.2e1 * t29 * t42 + 0.2e1 * t7 * t66, 0.2e1 * t110 * t48 + 0.2e1 * (qJD(6) * t109 + t7 * t88 - t8 * t92) * t67, 0.2e1 * t17 * t8 - 0.2e1 * t18 * t7 + 0.2e1 * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t27 + t160) * t90 - t50 * t138, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t67 - t25 * t48 + t113, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t67 + t111 * t48 + t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19 * t67 - t43 * t48 + t108, 0, 0, 0, 0, 0, 0, 0, t173 * t92 + t147, 0, t109 * t48 + t2 * t67 + t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t157 + 0.2e1 * t159, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t32 - 0.2e1 * t33 + 0.2e1 * t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t27, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t10, 0 (-t165 * t11 - t10 * t89 + (t165 * t25 + t163) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, t6, t5, t1, t11 * t81 + (-t12 * t124 + t123 * t13 + t163) * t143 + t1 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, 0, -t138, 0, -t77 * t137, t77 * t138, 0, 0, 0, 0, -t48, 0, -t49, 0, -t20, t19 (t165 * t48 - t49 * t89 + t101) * pkin(4) (-t165 * t20 - t19 * t89 + (t165 * t43 + t161) * qJD(5)) * pkin(4), -t22, t14, t30, t22, -t28, 0, t40 + (-qJD(6) * t106 - t20) * t92 + t96 * t88, t106 * t139 + t92 * t96 + t148, t2, t20 * t81 + (t123 * t18 - t124 * t17 + t161) * t143 + t2 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, -t137, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t48, 0 (-t165 * t49 - t48 * t89 + (t165 * t67 + t158) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, t28, t30, t23, t49 * t81 - t80 * t121 + (t102 * t67 + t158) * t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t130, -0.2e1 * t116, 0, 0, t73, t65, 0, t74, 0, 0, 0.2e1 * t105, 0.2e1 * t145, 0.2e1 * t61, 0.2e1 * (t102 * t80 + t81 * t89) * t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t10, 0, 0, 0, 0, 0, 0, 0, 0, t6, t5, t1, -t11 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, -t49, 0, -t20, t19, 0, 0, -t22, t14, t30, t22, -t28, 0, t40 + (pkin(5) * t48 - pkin(10) * t49) * t88 + (-t20 + (-pkin(5) * t67 - pkin(10) * t66) * qJD(6)) * t92, pkin(5) * t29 + pkin(10) * t28 + t148, t2, -t20 * pkin(5) + pkin(10) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t48, 0, 0, 0, 0, 0, 0, 0, 0, t28, t30, t23, -pkin(10) * t121 - t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -t116, 0, 0, t73, t65, 0, t74, 0, 0, t105 - t133, -t132 + t145, t61 (-pkin(5) * t89 + pkin(10) * t102) * t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, t65, 0, t74, 0, 0, -0.2e1 * t133, -0.2e1 * t132, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t103, t49, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t139, 0, -t116 * t88 - t80 * t82, -t116 * t92 + t139 * t80, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t139, 0, -pkin(10) * t82, pkin(10) * t139, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t9;
