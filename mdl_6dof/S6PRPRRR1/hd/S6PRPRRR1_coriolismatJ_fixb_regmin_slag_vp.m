% Calculate minimal parameter regressor of coriolis matrix for
% S6PRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRPRRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:25:09
% EndTime: 2019-03-08 20:25:19
% DurationCPUTime: 4.26s
% Computational Cost: add. (4315->306), mult. (10592->464), div. (0->0), fcn. (12134->12), ass. (0->270)
t283 = sin(qJ(4));
t435 = cos(qJ(5));
t359 = t435 * t283;
t282 = sin(qJ(5));
t286 = cos(qJ(4));
t405 = t282 * t286;
t256 = t359 + t405;
t253 = t256 ^ 2;
t285 = cos(qJ(6));
t278 = t285 ^ 2;
t281 = sin(qJ(6));
t446 = t281 ^ 2;
t367 = -t278 + t446;
t186 = t367 * t253;
t460 = 0.2e1 * t256;
t369 = qJD(4) + qJD(5);
t455 = t369 * t285;
t467 = t281 * t455;
t304 = t467 * t460;
t469 = -t186 * qJD(2) + t304;
t173 = (t446 / 0.2e1 - t278 / 0.2e1) * t256;
t117 = -t173 * qJD(2) + t467;
t279 = sin(pkin(12));
t280 = sin(pkin(6));
t436 = cos(qJ(2));
t360 = t280 * t436;
t284 = sin(qJ(2));
t412 = t280 * t284;
t425 = cos(pkin(12));
t224 = t279 * t412 - t360 * t425;
t419 = t224 * t256;
t294 = t419 / 0.2e1;
t468 = t256 * t455;
t271 = pkin(2) * t279 + pkin(8);
t429 = pkin(9) + t271;
t250 = t429 * t283;
t251 = t429 * t286;
t308 = -t282 * t250 + t251 * t435;
t458 = t308 * t281;
t272 = -pkin(2) * t425 - pkin(3);
t259 = -t286 * pkin(4) + t272;
t358 = t435 * t286;
t406 = t282 * t283;
t254 = -t358 + t406;
t433 = t254 * pkin(5);
t326 = -t256 * pkin(10) + t433;
t291 = t259 + t326;
t87 = -t285 * t291 + t458;
t466 = (-t87 + t458) * t256;
t457 = t308 * t285;
t88 = t281 * t291 + t457;
t465 = (-t88 + t457) * t256;
t333 = t435 * t250 + t282 * t251;
t303 = t358 / 0.2e1 - t406 / 0.2e1;
t444 = t254 / 0.2e1;
t70 = (t444 + t303) * t224;
t398 = t70 * qJD(1);
t464 = t369 * t333 - t398;
t225 = (t279 * t436 + t284 * t425) * t280;
t426 = cos(pkin(6));
t194 = t225 * t283 - t286 * t426;
t195 = t225 * t286 + t283 * t426;
t334 = t435 * t194 + t282 * t195;
t445 = -t254 / 0.2e1;
t71 = (t303 + t445) * t224;
t463 = t71 * qJD(2) + t369 * t334;
t462 = t369 * t308;
t309 = -t282 * t194 + t195 * t435;
t252 = t359 / 0.2e1 + t405 / 0.2e1;
t72 = t252 * t224 + t294;
t461 = t72 * qJD(2) - t369 * t309;
t177 = t285 * t254;
t459 = t177 * t369;
t456 = t369 * t254;
t368 = -t254 ^ 2 + t253;
t430 = t282 * pkin(4);
t274 = pkin(10) + t430;
t415 = t256 * t274;
t366 = t435 * pkin(4);
t275 = -t366 - pkin(5);
t416 = t254 * t275;
t442 = t256 / 0.2e1;
t453 = t433 / 0.2e1 - t415 / 0.2e1 - t416 / 0.2e1 + (t282 * t442 + t435 * t445) * pkin(4);
t388 = qJD(2) * t259;
t443 = -t256 / 0.2e1;
t69 = (t443 + t252) * t224;
t399 = t69 * qJD(1);
t452 = -t256 * t388 + t399;
t434 = pkin(4) * t283;
t132 = t254 * t434 + t256 * t259;
t451 = -qJD(2) * t132 + t399;
t407 = t281 * t285;
t354 = qJD(2) * t407;
t449 = t173 * t369 + t253 * t354;
t145 = t354 * t460 + t367 * t369;
t441 = -t275 / 0.2e1;
t440 = -t281 / 0.2e1;
t439 = t281 / 0.2e1;
t438 = -t285 / 0.2e1;
t437 = t285 / 0.2e1;
t432 = t254 * pkin(10);
t431 = t256 * pkin(5);
t411 = t281 * t309;
t58 = -t224 * t285 + t411;
t428 = t58 * t254;
t404 = t285 * t309;
t59 = t224 * t281 + t404;
t427 = t59 * t254;
t421 = t333 * t281;
t420 = t333 * t285;
t418 = t225 * t281;
t417 = t225 * t285;
t414 = t256 * t281;
t413 = t256 * t285;
t118 = t224 * t254;
t410 = t281 * t118;
t196 = t431 + t432;
t182 = t196 + t434;
t408 = t281 * t182;
t175 = t281 * t254;
t403 = t285 * t118;
t401 = t285 * t182;
t396 = t369 * t175;
t382 = qJD(5) * t281;
t385 = qJD(4) * t281;
t394 = (t382 + t385) * t256;
t124 = t368 * t285;
t393 = qJD(2) * t124;
t133 = -t254 * t259 + t256 * t434;
t391 = qJD(2) * t133;
t390 = qJD(2) * t254;
t389 = qJD(2) * t256;
t387 = qJD(2) * t283;
t386 = qJD(2) * t286;
t384 = qJD(4) * t285;
t383 = qJD(5) * t259;
t381 = qJD(5) * t285;
t380 = qJD(6) * t281;
t379 = qJD(6) * t285;
t123 = t368 * t281;
t378 = t123 * qJD(2);
t377 = t368 * qJD(2);
t160 = t175 * qJD(2);
t375 = t175 * qJD(6);
t167 = t177 * qJD(2);
t373 = t252 * qJD(2);
t266 = -t283 ^ 2 + t286 ^ 2;
t372 = t266 * qJD(2);
t371 = t283 * qJD(4);
t370 = t286 * qJD(4);
t365 = qJD(4) * t430;
t364 = qJD(5) * t430;
t362 = t58 * t443;
t361 = t59 * t443;
t357 = t254 * t388;
t355 = t272 * t386;
t353 = t256 * t379;
t352 = t256 * t380;
t197 = t254 * t389;
t351 = t272 * t387;
t269 = t281 * t379;
t350 = t283 * t386;
t349 = t309 * t439;
t99 = t334 * t439;
t100 = t334 * t437;
t348 = -t414 / 0.2e1;
t347 = t413 / 0.2e1;
t346 = t411 / 0.2e1;
t345 = -t410 / 0.2e1;
t343 = t404 / 0.2e1;
t342 = -t403 / 0.2e1;
t336 = t435 * qJD(4);
t335 = t435 * qJD(5);
t189 = t369 * t256;
t330 = -t366 / 0.2e1;
t327 = t369 * t430;
t325 = t225 / 0.2e1 + t334 * t443;
t324 = t254 * t189;
t293 = -t419 / 0.2e1;
t290 = t285 * t293 + t362;
t3 = t256 * t349 + t290;
t9 = t401 * t254 + t466;
t321 = t3 * qJD(1) + t9 * qJD(2);
t1 = t256 * t346 + t290;
t11 = t196 * t177 + t466;
t320 = t1 * qJD(1) + t11 * qJD(2);
t10 = -t408 * t254 + t465;
t289 = t281 * t294 + t361;
t8 = t309 * t347 + t289;
t319 = t8 * qJD(1) + t10 * qJD(2);
t12 = -t196 * t175 + t465;
t6 = t256 * t343 + t289;
t318 = t6 * qJD(1) + t12 * qJD(2);
t13 = t345 + t427 / 0.2e1 + t325 * t285;
t32 = -t254 * t88 + t333 * t413;
t317 = qJD(1) * t13 - qJD(2) * t32;
t14 = t342 - t428 / 0.2e1 - t325 * t281;
t31 = t254 * t87 - t333 * t414;
t316 = qJD(1) * t14 - qJD(2) * t31;
t312 = t441 + t330;
t287 = (-t274 / 0.2e1 + t430 / 0.2e1 + pkin(10) / 0.2e1) * t256 + (-pkin(5) / 0.2e1 + t312) * t254;
t18 = t287 * t281;
t315 = t18 * qJD(2);
t314 = -t415 - t416;
t313 = t256 * (-qJD(6) - t390);
t311 = t432 / 0.2e1 + t431 / 0.2e1;
t310 = t256 * t441 + t274 * t444;
t307 = t285 * t313;
t125 = qJD(6) * t252 + t197;
t306 = pkin(5) / 0.2e1 + t312;
t305 = t196 / 0.2e1 + t311;
t301 = t182 / 0.2e1 + t310;
t300 = t309 * t442;
t216 = t306 * t281;
t29 = t305 * t285;
t299 = pkin(5) * t382 + qJD(2) * t29 + qJD(4) * t216;
t217 = t306 * t285;
t27 = t305 * t281;
t298 = pkin(5) * t381 - qJD(2) * t27 + qJD(4) * t217;
t297 = t256 * t419;
t23 = t281 * t301;
t296 = -qJD(2) * t23 - t275 * t384;
t25 = t285 * t301;
t295 = qJD(2) * t25 - t275 * t385;
t21 = t287 * t285;
t292 = -qJD(2) * t21 - t281 * t365;
t264 = t281 * t364;
t260 = t367 * qJD(6);
t219 = pkin(5) * t438 + t275 * t437 + t285 * t330;
t218 = pkin(5) * t440 + t275 * t439 + t281 * t330;
t183 = t369 * t252;
t166 = t177 * qJD(6);
t155 = t173 * qJD(6);
t131 = t167 + t379;
t130 = -t160 - t380;
t122 = t224 * t286;
t120 = t224 * t283;
t113 = 0.2e1 * t281 * t307;
t112 = t285 * t294;
t111 = t281 * t293;
t103 = t197 * t278 - t155;
t90 = t375 - t468;
t74 = t166 - t393;
t73 = -t375 + t378;
t63 = t70 * qJD(2);
t61 = t69 * qJD(2);
t53 = -t155 + (-t278 * t389 - t467) * t254;
t48 = t393 + t394;
t47 = -t378 + t468;
t46 = (-qJD(6) + t390) * t407 * t460 + t367 * t456;
t44 = -t334 * t438 + t100;
t43 = 0.2e1 * t100;
t42 = -t334 * t440 + t99;
t41 = 0.2e1 * t99;
t40 = -t404 / 0.2e1 + t309 * t438;
t35 = t346 + t349;
t30 = t196 * t437 - t285 * t311 + t421;
t28 = t196 * t440 + t281 * t311 + t420;
t26 = t421 / 0.2e1 - t333 * t440 + t401 / 0.2e1 - t310 * t285;
t24 = t420 / 0.2e1 - t333 * t438 - t408 / 0.2e1 + t310 * t281;
t22 = t166 + t394;
t20 = t458 - pkin(10) * t413 / 0.2e1 + t453 * t285;
t19 = pkin(10) * t348 + t453 * t281 - t457;
t16 = -t427 / 0.2e1 + t334 * t347 + t345 + t417 / 0.2e1;
t15 = t428 / 0.2e1 + t334 * t348 + t342 - t418 / 0.2e1;
t7 = t285 * t300 + t111 + t361;
t5 = t111 + (-t59 / 0.2e1 + t343) * t256;
t4 = t281 * t300 + t112 + t362;
t2 = t112 + (-t58 / 0.2e1 + t346) * t256;
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -qJD(2) * t412, -qJD(2) * t360 (-t224 * t279 - t225 * t425) * qJD(2) * pkin(2), 0, 0, 0, 0, 0, t120 * qJD(4) - t225 * t386, qJD(4) * t122 + t225 * t387, 0, 0, 0, 0, 0, t225 * t390 + t369 * t72, t225 * t389 + t369 * t71, 0, 0, 0, 0, 0 ((-t410 + t417) * t254 - t281 * t297) * qJD(2) + t4 * qJD(4) + t2 * qJD(5) + t16 * qJD(6) (-(t403 + t418) * t254 - t285 * t297) * qJD(2) + t7 * qJD(4) + t5 * qJD(5) + t15 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t120 - qJD(4) * t195, qJD(2) * t122 + qJD(4) * t194, 0, 0, 0, 0, 0, t461, t463, 0, 0, 0, 0, 0, qJD(2) * t4 + qJD(5) * t40 + qJD(6) * t42 - t309 * t384, qJD(2) * t7 + qJD(5) * t35 + qJD(6) * t44 + t309 * t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t461, t463, 0, 0, 0, 0, 0, qJD(2) * t2 + qJD(4) * t40 + qJD(6) * t41 - t309 * t381, qJD(2) * t5 + qJD(4) * t35 + qJD(6) * t43 + t309 * t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t16 + qJD(4) * t42 + qJD(5) * t41 - qJD(6) * t59, qJD(2) * t15 + qJD(4) * t44 + qJD(5) * t43 + qJD(6) * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t369 * t69, -t369 * t70, 0, 0, 0, 0, 0, qJD(4) * t3 + qJD(5) * t1 - qJD(6) * t13, qJD(4) * t8 + qJD(5) * t6 - qJD(6) * t14; 0, 0, 0, 0, 0, t283 * t370, t266 * qJD(4), 0, 0, 0, t272 * t371, t272 * t370, -t324, -t369 * t368, 0, 0, 0, qJD(4) * t132 + t256 * t383, qJD(4) * t133 - t254 * t383, -t253 * t269 - t278 * t324, t186 * qJD(6) + t254 * t304, t124 * t369 - t254 * t352, -t123 * t369 - t254 * t353, t256 * t456, qJD(4) * t9 + qJD(5) * t11 + qJD(6) * t32, qJD(4) * t10 + qJD(5) * t12 + qJD(6) * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, t350, t372, t370, -t371, 0, -t271 * t370 + t351, t271 * t371 + t355, -t197, -t377, -t456, -t189, 0, -t451 - t462, t391 + t464, t53, t46, t48, t47, t125 (t281 * t314 - t457) * qJD(4) + t19 * qJD(5) + t26 * qJD(6) + t321 (t285 * t314 + t458) * qJD(4) + t20 * qJD(5) + t24 * qJD(6) + t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, -t377, -t456, -t189, 0, -t452 - t462, -t357 + t464, t53, t46, t48, t47, t125, t19 * qJD(4) + (t281 * t326 - t457) * qJD(5) + t30 * qJD(6) + t320, t20 * qJD(4) + (t285 * t326 + t458) * qJD(5) + t28 * qJD(6) + t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t449, -t469, t281 * t313, t307, t183, qJD(4) * t26 + qJD(5) * t30 - qJD(6) * t88 - t317, qJD(4) * t24 + qJD(5) * t28 + qJD(6) * t87 - t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t371, -t370, 0, 0, 0, 0, 0, -t189, t456, 0, 0, 0, 0, 0, t90, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189, t456, 0, 0, 0, 0, 0, t90, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t353 + t396, t352 + t459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t63, 0, 0, 0, 0, 0, -qJD(2) * t3, -qJD(2) * t8; 0, 0, 0, 0, 0, -t350, -t372, 0, 0, 0, -t351, -t355, t197, t377, 0, 0, 0, t451, t398 - t391, t103, t113, t74, t73, -t125, qJD(5) * t18 - qJD(6) * t25 - t321, qJD(5) * t21 + qJD(6) * t23 - t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t364, -pkin(4) * t335, t269, -t260, 0, 0, 0, t275 * t380 - t285 * t364, t275 * t379 + t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327 (-t336 - t335) * pkin(4), t269, -t260, 0, 0, 0, t218 * qJD(6) - t285 * t327 + t315, qJD(6) * t219 + t264 - t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, -t145, t131, t130, -t373, qJD(5) * t218 - t274 * t379 - t295, qJD(5) * t219 + t274 * t380 - t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t63, 0, 0, 0, 0, 0, -qJD(2) * t1, -qJD(2) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, t377, 0, 0, 0, t452, t398 + t357, t103, t113, t74, t73, -t125, -qJD(4) * t18 - qJD(6) * t29 - t320, -qJD(4) * t21 + qJD(6) * t27 - t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t365, pkin(4) * t336, t269, -t260, 0, 0, 0, -qJD(6) * t216 + t285 * t365 - t315, -qJD(6) * t217 + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, -t260, 0, 0, 0, -pkin(5) * t380, -pkin(5) * t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, -t145, t131, t130, -t373, -pkin(10) * t379 - t299, pkin(10) * t380 - t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t13, qJD(2) * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, t469, t197 * t281 - t459, t197 * t285 + t396, t183, qJD(4) * t25 + qJD(5) * t29 + t317, -qJD(4) * t23 - qJD(5) * t27 + t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, t145, -t167, t160, t373, qJD(5) * t216 + t295, qJD(5) * t217 + t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, t145, -t167, t160, t373, t299, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t17;
