% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:25:13
% EndTime: 2019-03-08 20:25:24
% DurationCPUTime: 7.04s
% Computational Cost: add. (8961->560), mult. (20245->754), div. (0->0), fcn. (16508->16), ass. (0->287)
t210 = sin(pkin(6));
t208 = sin(pkin(12));
t211 = cos(pkin(12));
t217 = sin(qJ(2));
t220 = cos(qJ(2));
t254 = t208 * t220 + t211 * t217;
t146 = t254 * t210;
t139 = qJD(1) * t146;
t216 = sin(qJ(4));
t309 = qJD(4) * t216;
t266 = pkin(4) * t309 - t139;
t319 = t220 * t211;
t156 = t208 * t217 - t319;
t209 = sin(pkin(11));
t212 = cos(pkin(11));
t213 = cos(pkin(6));
t321 = t213 * t220;
t323 = t213 * t217;
t317 = -t208 * t321 - t211 * t323;
t104 = t209 * t156 + t212 * t317;
t109 = -t212 * t156 + t209 * t317;
t264 = g(1) * t109 - g(2) * t104;
t239 = g(3) * t146 + t264;
t314 = qJD(1) * t210;
t287 = t217 * t314;
t169 = t208 * t287;
t286 = t220 * t314;
t142 = t211 * t286 - t169;
t195 = pkin(2) * t208 + pkin(8);
t367 = pkin(9) + t195;
t279 = qJD(4) * t367;
t148 = t216 * t279;
t215 = sin(qJ(5));
t219 = cos(qJ(4));
t371 = cos(qJ(5));
t288 = t371 * t219;
t249 = -t215 * t216 + t288;
t154 = t367 * t216;
t155 = t367 * t219;
t250 = -t154 * t371 - t215 * t155;
t267 = t219 * t279;
t363 = qJD(5) * t250 - t249 * t142 - t148 * t371 - t215 * t267;
t299 = qJD(4) + qJD(5);
t274 = t215 * t299;
t285 = qJD(5) * t371;
t121 = -qJD(4) * t288 + t216 * t274 - t219 * t285;
t159 = t215 * t219 + t216 * t371;
t122 = t299 * t159;
t384 = pkin(5) * t122 + pkin(10) * t121 + t266;
t311 = qJD(2) * t210;
t284 = qJD(1) * t311;
t302 = qJDD(1) * t210;
t383 = t217 * t302 + t220 * t284;
t207 = qJ(4) + qJ(5);
t202 = sin(t207);
t203 = cos(t207);
t118 = -t146 * t202 + t203 * t213;
t329 = t210 * t212;
t73 = t104 * t202 - t203 * t329;
t331 = t209 * t210;
t75 = -t109 * t202 + t203 * t331;
t382 = g(1) * t75 + g(2) * t73 + g(3) * t118;
t214 = sin(qJ(6));
t218 = cos(qJ(6));
t304 = qJD(6) * t218;
t163 = qJD(2) * pkin(2) + t286;
t128 = t208 * t163 + t211 * t287;
t126 = qJD(2) * pkin(8) + t128;
t278 = pkin(9) * qJD(2) + t126;
t187 = qJD(1) * t213 + qJD(3);
t335 = t187 * t216;
t93 = t219 * t278 + t335;
t352 = t215 * t93;
t170 = t219 * t187;
t92 = -t216 * t278 + t170;
t85 = qJD(4) * pkin(4) + t92;
t41 = t371 * t85 - t352;
t37 = -pkin(5) * t299 - t41;
t298 = qJDD(4) + qJDD(5);
t181 = t213 * qJDD(1) + qJDD(3);
t168 = t219 * t181;
t180 = t220 * t302;
t349 = qJDD(2) * pkin(2);
t143 = -t217 * t284 + t180 + t349;
t96 = t208 * t143 + t211 * t383;
t89 = qJDD(2) * pkin(8) + t96;
t33 = qJDD(4) * pkin(4) + t168 + (-pkin(9) * qJDD(2) - t89) * t216 - t93 * qJD(4);
t303 = qJD(2) * qJD(4);
t283 = t216 * t303;
t300 = t219 * qJDD(2);
t308 = qJD(4) * t219;
t295 = t216 * t181 + t187 * t308 + t219 * t89;
t39 = -t126 * t309 + t295;
t34 = (-t283 + t300) * pkin(9) + t39;
t280 = t215 * t34 - t371 * t33;
t294 = t371 * t93;
t42 = t215 * t85 + t294;
t8 = -qJD(5) * t42 - t280;
t6 = -pkin(5) * t298 - t8;
t381 = t6 * t214 + t37 * t304;
t114 = -t215 * t154 + t155 * t371;
t362 = qJD(5) * t114 - t159 * t142 - t215 * t148 + t267 * t371;
t243 = t156 * t213;
t105 = -t209 * t254 - t212 * t243;
t108 = t209 * t243 - t212 * t254;
t327 = t210 * t217;
t145 = t208 * t327 - t210 * t319;
t240 = g(1) * t108 + g(2) * t105 - g(3) * t145;
t380 = t240 * t202;
t137 = t145 * t218;
t322 = t213 * t219;
t123 = -t146 * t216 + t322;
t124 = t146 * t219 + t213 * t216;
t62 = t215 * t123 + t124 * t371;
t47 = -t214 * t62 + t137;
t38 = pkin(10) * t299 + t42;
t127 = t163 * t211 - t169;
t200 = pkin(4) * t219 + pkin(3);
t115 = -qJD(2) * t200 - t127;
t310 = qJD(2) * t216;
t150 = -qJD(2) * t288 + t215 * t310;
t152 = t159 * qJD(2);
t60 = pkin(5) * t150 - pkin(10) * t152 + t115;
t19 = t214 * t60 + t218 * t38;
t258 = t214 * t38 - t218 * t60;
t379 = t19 * t218 + t214 * t258;
t378 = t159 * qJDD(2);
t289 = -t211 * t143 + t208 * t383;
t63 = pkin(4) * t283 - qJDD(2) * t200 + t289;
t375 = qJD(2) * t299;
t90 = -t249 * t375 - t378;
t301 = t216 * qJDD(2);
t262 = -qJDD(2) * t288 + t215 * t301;
t91 = qJD(2) * t122 + t262;
t23 = pkin(5) * t91 + pkin(10) * t90 + t63;
t307 = qJD(5) * t215;
t7 = t215 * t33 + t85 * t285 - t93 * t307 + t371 * t34;
t5 = pkin(10) * t298 + t7;
t2 = -t258 * qJD(6) + t214 * t23 + t218 * t5;
t1 = t2 * t218;
t339 = t150 * t218;
t356 = t19 * t214;
t377 = -t150 * t356 + t258 * t339 + t1;
t149 = qJD(6) + t150;
t305 = qJD(6) * t214;
t348 = t121 * t218;
t247 = t159 * t305 + t348;
t336 = t159 * t218;
t86 = qJDD(6) + t91;
t376 = -t149 * t247 + t86 * t336;
t131 = t218 * t152 + t214 * t299;
t50 = qJD(6) * t131 - t214 * t90 - t218 * t298;
t374 = t121 * t299 - t159 * t298;
t370 = pkin(2) * t211;
t171 = -t200 - t370;
t111 = -pkin(5) * t249 - pkin(10) * t159 + t171;
t53 = t111 * t218 - t114 * t214;
t366 = qJD(6) * t53 + t384 * t214 + t218 * t363;
t54 = t111 * t214 + t114 * t218;
t365 = -qJD(6) * t54 - t214 * t363 + t384 * t218;
t43 = t215 * t92 + t294;
t364 = t42 - t43;
t273 = t218 * t299;
t129 = t152 * t214 - t273;
t361 = t129 * t348 - t50 * t336;
t49 = -qJD(6) * t273 + t152 * t305 - t214 * t298 + t218 * t90;
t360 = t131 * t122 + t249 * t49;
t359 = t121 * t150 - t159 * t91;
t358 = t150 * t37;
t354 = t214 * t49;
t351 = t218 * t50;
t350 = t218 * t86;
t347 = t126 * t216;
t346 = t129 * t149;
t345 = t129 * t214;
t344 = t131 * t129;
t343 = t131 * t149;
t342 = t131 * t218;
t341 = t145 * t214;
t340 = t149 * t152;
t338 = t152 * t150;
t337 = t159 * t214;
t334 = t203 * t214;
t333 = t203 * t218;
t330 = t209 * t217;
t328 = t210 * t216;
t326 = t210 * t219;
t325 = t210 * t220;
t320 = t214 * t121;
t318 = qJDD(1) - g(3);
t205 = t216 ^ 2;
t206 = t219 ^ 2;
t316 = t205 - t206;
t125 = -qJD(2) * pkin(3) - t127;
t313 = qJD(2) * t125;
t312 = qJD(2) * t142;
t306 = qJD(6) * t149;
t183 = g(2) * t329;
t293 = t131 * t320;
t292 = t212 * t321;
t223 = qJD(2) ^ 2;
t291 = t216 * t223 * t219;
t35 = t37 * t305;
t188 = pkin(2) * t325;
t221 = -pkin(9) - pkin(8);
t290 = -t145 * t200 - t146 * t221 + t188;
t281 = t152 * t258 + t35;
t276 = t149 * t218;
t275 = t219 * t183;
t272 = pkin(4) * t285;
t270 = t219 * t283;
t175 = pkin(2) * t292;
t269 = -pkin(2) * t330 + t175;
t268 = pkin(4) * t307 - t43;
t117 = pkin(5) * t152 + pkin(10) * t150;
t265 = pkin(5) * t203 + pkin(10) * t202;
t198 = pkin(4) * t215 + pkin(10);
t261 = -t198 * t86 + t358;
t260 = -t218 * t258 + t356;
t257 = -t122 * t129 + t249 * t50;
t256 = -t122 * t152 - t249 * t90;
t48 = t218 * t62 + t341;
t100 = t170 - t347;
t101 = t126 * t219 + t335;
t255 = t100 * t216 - t101 * t219;
t253 = -t209 * t321 - t212 * t217;
t252 = t104 * t221 + t105 * t200 + t269;
t251 = t123 * t371 - t215 * t124;
t248 = t159 * t304 - t320;
t119 = t146 * t203 + t202 * t213;
t74 = -t104 * t203 - t202 * t329;
t76 = t109 * t203 + t202 * t331;
t245 = g(1) * t76 + g(2) * t74 + g(3) * t119;
t244 = -g(1) * t331 - g(3) * t213 + t183;
t242 = t19 * t152 + t214 * t382 + t381;
t238 = -t382 - t6;
t237 = t253 * pkin(2);
t3 = -qJD(6) * t19 - t214 * t5 + t218 * t23;
t236 = -qJD(6) * t260 - t3 * t214;
t235 = -qJD(2) * t139 + t240;
t196 = -pkin(3) - t370;
t234 = -qJDD(4) * t195 + (qJD(2) * t196 + t125 + t142) * qJD(4);
t233 = -t354 + (t342 + t345) * qJD(6);
t232 = t108 * t200 - t109 * t221 + t237;
t231 = -g(1) * t253 - g(3) * t325;
t230 = t236 + t1;
t229 = -t149 * t248 - t337 * t86;
t40 = -t101 * qJD(4) - t216 * t89 + t168;
t228 = -t40 * t216 + t39 * t219 + (-t100 * t219 - t101 * t216) * qJD(4);
t227 = -t115 * t152 - t280 - t382;
t226 = t115 * t150 + t245 - t7;
t222 = qJD(4) ^ 2;
t88 = -qJDD(2) * pkin(3) + t289;
t225 = qJDD(2) * t196 + t195 * t222 + t235 + t88;
t224 = t236 - t245;
t199 = -pkin(4) * t371 - pkin(5);
t189 = pkin(4) * t322;
t174 = t209 * pkin(4) * t326;
t173 = qJDD(4) * t219 - t216 * t222;
t172 = qJDD(4) * t216 + t219 * t222;
t141 = t156 * t311;
t140 = qJD(2) * t146;
t116 = t118 * pkin(5);
t110 = pkin(4) * t310 + t117;
t94 = -t150 ^ 2 + t152 ^ 2;
t87 = -t122 * t299 + t249 * t298;
t72 = qJD(4) * t123 - t141 * t219;
t71 = -qJD(4) * t124 + t141 * t216;
t70 = t75 * pkin(5);
t69 = t73 * pkin(5);
t58 = t152 * t299 - t159 * t375 - t262;
t57 = t378 + (qJD(2) * t249 + t150) * t299;
t44 = t371 * t92 - t352;
t29 = t117 * t214 + t218 * t41;
t28 = t117 * t218 - t214 * t41;
t27 = t110 * t214 + t218 * t44;
t26 = t110 * t218 - t214 * t44;
t25 = -t131 * t152 + t149 * t276 + t214 * t86;
t24 = -t149 ^ 2 * t214 + t129 * t152 + t350;
t22 = t149 * t345 - t351;
t21 = t131 * t276 - t354;
t17 = qJD(5) * t62 + t215 * t72 - t371 * t71;
t16 = qJD(5) * t251 + t215 * t71 + t371 * t72;
t11 = -qJD(6) * t48 + t140 * t218 - t16 * t214;
t10 = qJD(6) * t47 + t140 * t214 + t16 * t218;
t9 = (-t49 - t346) * t218 + (-t50 - t343) * t214;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t318, 0, 0, 0, 0, 0, 0 (qJDD(2) * t220 - t217 * t223) * t210 (-qJDD(2) * t217 - t220 * t223) * t210, 0, -g(3) + (t213 ^ 2 + (t217 ^ 2 + t220 ^ 2) * t210 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(2) * t140 - qJDD(2) * t145, qJD(2) * t141 - qJDD(2) * t146, 0, -t127 * t140 - t128 * t141 + t145 * t289 + t146 * t96 + t181 * t213 - g(3), 0, 0, 0, 0, 0, 0, -t145 * t300 + qJD(4) * t71 + qJDD(4) * t123 + (-t140 * t219 + t145 * t309) * qJD(2), t145 * t301 - qJD(4) * t72 - qJDD(4) * t124 + (t140 * t216 + t145 * t308) * qJD(2) (-t123 * t216 + t124 * t219) * qJDD(2) + (-t216 * t71 + t219 * t72 + (-t123 * t219 - t124 * t216) * qJD(4)) * qJD(2), t100 * t71 + t101 * t72 + t123 * t40 + t124 * t39 + t125 * t140 + t145 * t88 - g(3), 0, 0, 0, 0, 0, 0, t140 * t150 + t145 * t91 - t17 * t299 + t251 * t298, t140 * t152 - t145 * t90 - t16 * t299 - t298 * t62, -t150 * t16 + t152 * t17 + t251 * t90 - t62 * t91, t115 * t140 + t145 * t63 + t16 * t42 - t17 * t41 + t251 * t8 + t62 * t7 - g(3), 0, 0, 0, 0, 0, 0, t11 * t149 + t129 * t17 - t251 * t50 + t47 * t86, -t10 * t149 + t131 * t17 + t251 * t49 - t48 * t86, -t10 * t129 - t11 * t131 + t47 * t49 - t48 * t50, t10 * t19 - t11 * t258 + t17 * t37 + t2 * t48 - t251 * t6 + t3 * t47 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t180 - g(2) * (t292 - t330) + t231, -g(1) * (t209 * t323 - t212 * t220) - g(2) * (-t209 * t220 - t212 * t323) - t318 * t327, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t211 * t349 - t235 - t289, -t208 * t349 + t239 + t312 - t96, 0, -g(2) * t175 + t127 * t139 - t128 * t142 + (g(2) * t330 + t96 * t208 - t211 * t289 + t231) * pkin(2), qJDD(2) * t205 + 0.2e1 * t270, 0.2e1 * t216 * t300 - 0.2e1 * t303 * t316, t172, qJDD(2) * t206 - 0.2e1 * t270, t173, 0, t216 * t234 - t219 * t225, t216 * t225 + t219 * t234, t228 - t239 + (qJDD(2) * t195 - t312) * (t205 + t206) t88 * t196 - t125 * t139 - g(1) * (pkin(3) * t108 + pkin(8) * t109 + t237) - g(2) * (pkin(3) * t105 - pkin(8) * t104 + t269) - g(3) * (-pkin(3) * t145 + pkin(8) * t146 + t188) + t255 * t142 + t228 * t195, -t121 * t152 - t159 * t90, t256 + t359, -t374, t122 * t150 - t249 * t91, t87, 0, t115 * t122 + t266 * t150 + t171 * t91 - t240 * t203 - t249 * t63 + t250 * t298 - t299 * t362, -t114 * t298 - t115 * t121 + t266 * t152 + t63 * t159 - t171 * t90 - t299 * t363 + t380, -t114 * t91 + t121 * t41 - t122 * t42 - t150 * t363 + t152 * t362 - t159 * t8 + t249 * t7 + t250 * t90 - t239, -g(1) * t232 - g(2) * t252 - g(3) * t290 + t7 * t114 + t115 * t266 + t63 * t171 + t250 * t8 - t362 * t41 + t363 * t42, -t131 * t247 - t336 * t49, t293 + (t354 + (-t342 + t345) * qJD(6)) * t159 + t361, t360 + t376, t129 * t248 + t337 * t50, t229 + t257, t122 * t149 - t249 * t86, t53 * t86 - t3 * t249 - t258 * t122 - t250 * t50 - t37 * t320 - g(1) * (t108 * t333 + t109 * t214) - g(2) * (-t104 * t214 + t105 * t333) - g(3) * (-t145 * t333 + t146 * t214) + t381 * t159 + t365 * t149 + t362 * t129, -t54 * t86 + t2 * t249 - t19 * t122 + t250 * t49 - t37 * t348 - g(1) * (-t108 * t334 + t109 * t218) - g(2) * (-t104 * t218 - t105 * t334) - g(3) * (t145 * t334 + t146 * t218) + (t6 * t218 - t35) * t159 - t366 * t149 + t362 * t131, t49 * t53 - t50 * t54 - t365 * t131 - t366 * t129 + t260 * t121 - t380 + (-qJD(6) * t379 - t2 * t214 - t218 * t3) * t159, t2 * t54 + t3 * t53 - t6 * t250 - g(1) * (t108 * t265 + t232) - g(2) * (t105 * t265 + t252) - g(3) * (-t145 * t265 + t290) + t362 * t37 + t366 * t19 - t365 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244 + t181, 0, 0, 0, 0, 0, 0, t173, -t172, 0, -qJD(4) * t255 + t216 * t39 + t219 * t40 + t244, 0, 0, 0, 0, 0, 0, t87, t374, -t256 + t359, -t121 * t42 - t122 * t41 + t159 * t7 + t249 * t8 + t244, 0, 0, 0, 0, 0, 0, t229 - t257, t360 - t376, t159 * t233 - t293 + t361, -t121 * t379 + t122 * t37 + t159 * t230 - t249 * t6 + t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t291, t316 * t223, t301, t291, t300, qJDD(4), -g(3) * t123 + t168 + (-g(1) * t209 + g(2) * t212) * t326 + (t264 - t89 - t313) * t216, -t219 * t313 - g(1) * (-t109 * t219 - t209 * t328) - g(2) * (t104 * t219 + t212 * t328) + g(3) * t124 + (t100 + t347) * qJD(4) - t295, 0, 0, t338, t94, t57, -t338, t58, t298, t43 * qJD(4) - t364 * qJD(5) + (-qJD(5) * t274 - t150 * t310 + t298 * t371) * pkin(4) + t227, t44 * t299 + (-t152 * t310 - t215 * t298 - t285 * t299) * pkin(4) + t226, t364 * t152 + (-t41 + t44) * t150 + (t371 * t90 - t215 * t91 + (-t150 * t371 + t152 * t215) * qJD(5)) * pkin(4), -g(1) * t174 - g(3) * t189 + t41 * t43 - t42 * t44 + (t275 + t8 * t371 + t7 * t215 + (-t41 * t215 + t371 * t42) * qJD(5) + (-qJD(2) * t115 + t239) * t216) * pkin(4), t21, t9, t25, t22, t24, -t340, -t26 * t149 + t199 * t50 + t268 * t129 + (-t149 * t272 + t261) * t214 + (-t198 * t306 + t238) * t218 + t281, -t199 * t49 + t261 * t218 + t268 * t131 + (t198 * t305 - t218 * t272 + t27) * t149 + t242, t27 * t129 + t26 * t131 + (-t129 * t272 - t198 * t50 + (t131 * t198 + t258) * qJD(6)) * t218 + (t131 * t272 - t198 * t49 - t3 + (t129 * t198 - t19) * qJD(6)) * t214 - t245 + t377, t6 * t199 - t19 * t27 + t258 * t26 - t37 * t43 - g(1) * (pkin(10) * t76 + t174 + t70) - g(2) * (pkin(10) * t74 + t69) - g(3) * (pkin(10) * t119 + t116 + t189) + t230 * t198 + (t275 + t239 * t216 + (t37 * t215 + t371 * t379) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t338, t94, t57, -t338, t58, t298, t42 * qJD(4) + t227, t299 * t41 + t226, 0, 0, t21, t9, t25, t22, t24, -t340, -pkin(5) * t50 - t129 * t42 - t149 * t28 + (-pkin(10) * t86 + t358) * t214 + (-pkin(10) * t306 + t238) * t218 + t281, t37 * t339 + pkin(5) * t49 - t131 * t42 + t149 * t29 + (t149 * t305 - t350) * pkin(10) + t242, t129 * t29 + t131 * t28 + (t233 - t351) * pkin(10) + t224 + t377, -t6 * pkin(5) - g(1) * t70 - g(2) * t69 - g(3) * t116 + t258 * t28 - t19 * t29 - t37 * t42 + (t224 + t1) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, -t129 ^ 2 + t131 ^ 2, -t49 + t346, -t344, t343 - t50, t86, t19 * t149 - t37 * t131 - g(1) * (-t108 * t218 - t214 * t76) - g(2) * (-t105 * t218 - t214 * t74) - g(3) * (-t119 * t214 + t137) + t3, -t258 * t149 + t37 * t129 - g(1) * (t108 * t214 - t218 * t76) - g(2) * (t105 * t214 - t218 * t74) - g(3) * (-t119 * t218 - t341) - t2, 0, 0;];
tau_reg  = t4;
