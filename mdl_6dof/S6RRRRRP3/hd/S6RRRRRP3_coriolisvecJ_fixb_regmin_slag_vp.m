% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRP3_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP3_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP3_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP3_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:09:30
% EndTime: 2019-03-10 01:09:44
% DurationCPUTime: 5.76s
% Computational Cost: add. (10331->437), mult. (24444->585), div. (0->0), fcn. (18059->8), ass. (0->246)
t259 = cos(qJ(2));
t371 = -pkin(8) - pkin(7);
t232 = t371 * t259;
t222 = qJD(1) * t232;
t255 = sin(qJ(3));
t198 = t255 * t222;
t256 = sin(qJ(2));
t230 = t371 * t256;
t220 = qJD(1) * t230;
t369 = cos(qJ(3));
t152 = t220 * t369 + t198;
t307 = qJD(3) * t369;
t399 = -pkin(2) * t307 + t152;
t308 = qJD(1) * t369;
t324 = qJD(1) * t256;
t192 = t255 * t324 - t259 * t308;
t341 = t255 * t259;
t194 = -qJD(1) * t341 - t256 * t308;
t144 = -pkin(3) * t194 + pkin(9) * t192;
t127 = pkin(2) * t324 + t144;
t254 = sin(qJ(4));
t258 = cos(qJ(4));
t398 = -t127 * t258 + t254 * t399;
t397 = t254 * t127 + t258 * t399;
t242 = pkin(2) * t255 + pkin(9);
t366 = -pkin(10) - t242;
t300 = qJD(4) * t366;
t349 = t192 * t254;
t316 = pkin(10) * t349;
t393 = -t254 * t300 + t316 + t397;
t348 = t192 * t258;
t290 = -pkin(4) * t194 + pkin(10) * t348;
t396 = t258 * t300 - t290 + t398;
t370 = -pkin(9) - pkin(10);
t312 = qJD(4) * t370;
t356 = qJD(2) * pkin(2);
t202 = t220 + t356;
t148 = t202 * t369 + t198;
t332 = t144 * t254 + t148 * t258;
t392 = -t254 * t312 + t316 + t332;
t296 = t144 * t258 - t148 * t254;
t395 = t258 * t312 - t290 - t296;
t250 = qJD(2) + qJD(3);
t164 = t194 * t254 + t250 * t258;
t165 = -t194 * t258 + t250 * t254;
t253 = sin(qJ(5));
t257 = cos(qJ(5));
t283 = t164 * t253 + t165 * t257;
t372 = t283 ^ 2;
t101 = -t164 * t257 + t165 * t253;
t99 = t101 ^ 2;
t394 = -t99 + t372;
t214 = t253 * t258 + t254 * t257;
t317 = qJD(4) + qJD(5);
t155 = t317 * t214;
t389 = t192 * t214 + t155;
t344 = t253 * t254;
t212 = -t257 * t258 + t344;
t319 = qJD(5) * t257;
t321 = qJD(4) * t258;
t333 = t192 * t212 - t257 * t321 - t258 * t319 + t317 * t344;
t391 = qJ(6) * t101;
t390 = t283 * t101;
t215 = t256 * t369 + t341;
t278 = -t255 * t256 + t259 * t369;
t267 = t278 * qJD(3);
t156 = qJD(2) * t278 + t267;
t342 = t254 * t156;
t388 = t215 * t321 + t342;
t188 = qJD(4) + t192;
t178 = qJD(5) + t188;
t262 = t156 * qJD(1);
t322 = qJD(4) * t254;
t314 = t194 * t321 - t250 * t322 - t254 * t262;
t320 = qJD(5) * t253;
t96 = t194 * t322 + t250 * t321 + t258 * t262;
t38 = -t164 * t319 + t165 * t320 - t253 * t314 - t257 * t96;
t387 = t101 * t178 - t38;
t157 = t250 * t215;
t143 = t157 * qJD(1);
t246 = -pkin(2) * t259 - pkin(1);
t228 = t246 * qJD(1);
t125 = pkin(3) * t192 + pkin(9) * t194 + t228;
t201 = t369 * t222;
t149 = t202 * t255 - t201;
t131 = pkin(9) * t250 + t149;
t80 = t125 * t254 + t131 * t258;
t85 = t143 * pkin(3) + (-pkin(9) * t267 + (t256 * pkin(2) - pkin(9) * t278) * qJD(2)) * qJD(1);
t83 = t258 * t85;
t313 = qJD(2) * t371;
t291 = qJD(1) * t313;
t203 = t256 * t291;
t204 = t259 * t291;
t323 = qJD(3) * t255;
t88 = t202 * t307 + t203 * t369 + t255 * t204 + t222 * t323;
t264 = -qJD(4) * t80 - t254 * t88 + t83;
t12 = pkin(4) * t143 - pkin(10) * t96 + t264;
t275 = t125 * t321 - t131 * t322 + t254 * t85 + t258 * t88;
t17 = pkin(10) * t314 + t275;
t79 = t125 * t258 - t131 * t254;
t60 = -pkin(10) * t165 + t79;
t52 = pkin(4) * t188 + t60;
t61 = pkin(10) * t164 + t80;
t299 = -t12 * t253 - t17 * t257 - t319 * t52 + t320 * t61;
t130 = -pkin(3) * t250 - t148;
t97 = -pkin(4) * t164 + t130;
t386 = t101 * t97 + t299;
t318 = qJD(1) * qJD(2);
t385 = -0.2e1 * t318;
t53 = pkin(5) * t101 + qJD(6) + t97;
t384 = t283 * t53;
t383 = t396 * t257;
t382 = t395 * t257;
t381 = qJ(6) * t283;
t380 = -qJ(6) * t389 - t212 * qJD(6);
t151 = t220 * t255 - t201;
t288 = pkin(2) * t323 - t151;
t379 = (t322 + t349) * pkin(4);
t207 = t366 * t254;
t249 = t258 * pkin(10);
t208 = t242 * t258 + t249;
t328 = t207 * t253 + t208 * t257;
t229 = t370 * t254;
t231 = pkin(9) * t258 + t249;
t327 = t229 * t253 + t231 * t257;
t378 = -t229 * t319 + t231 * t320 - t253 * t395 + t257 * t392;
t377 = -t207 * t319 + t208 * t320 - t253 * t396 + t257 * t393;
t376 = t194 * pkin(5) + qJ(6) * t333 - qJD(6) * t214;
t338 = t258 * t156;
t276 = -t215 * t322 + t338;
t375 = t230 * t369 + t232 * t255;
t305 = t12 * t257 - t253 * t17;
t57 = t257 * t61;
t31 = t253 * t52 + t57;
t266 = -qJD(5) * t31 + t305;
t374 = -t283 * t97 + t266;
t39 = qJD(5) * t283 + t253 * t96 - t257 * t314;
t373 = t178 * t283 - t39;
t368 = t212 * pkin(5);
t367 = t258 * pkin(4);
t55 = t253 * t61;
t30 = t257 * t52 - t55;
t18 = t30 - t381;
t15 = pkin(5) * t178 + t18;
t365 = t15 - t18;
t364 = -t377 + t380;
t363 = -qJD(5) * t328 + t253 * t393 + t376 + t383;
t362 = t257 * t60 - t55;
t361 = -t378 + t380;
t360 = -qJD(5) * t327 + t253 * t392 + t376 + t382;
t147 = -pkin(3) * t278 - pkin(9) * t215 + t246;
t140 = t258 * t147;
t167 = t230 * t255 - t232 * t369;
t345 = t215 * t258;
t75 = -pkin(4) * t278 - pkin(10) * t345 - t167 * t254 + t140;
t160 = t258 * t167;
t329 = t147 * t254 + t160;
t346 = t215 * t254;
t84 = -pkin(10) * t346 + t329;
t357 = t253 * t75 + t257 * t84;
t355 = t96 * t254;
t354 = qJ(6) * t214;
t353 = t164 * t188;
t352 = t165 * t188;
t351 = t178 * t194;
t350 = t188 * t194;
t347 = t194 * t192;
t343 = t254 * t143;
t339 = t258 * t143;
t261 = qJD(1) ^ 2;
t337 = t259 * t261;
t260 = qJD(2) ^ 2;
t336 = t260 * t256;
t335 = t260 * t259;
t326 = t379 + t288;
t325 = t256 ^ 2 - t259 ^ 2;
t315 = t256 * t356;
t245 = -pkin(3) - t367;
t120 = t130 * t321;
t306 = t256 * t318;
t221 = t256 * t313;
t223 = t259 * t313;
t106 = qJD(3) * t375 + t221 * t369 + t255 * t223;
t95 = pkin(3) * t157 - pkin(9) * t156 + t315;
t91 = t258 * t95;
t25 = -pkin(10) * t338 + pkin(4) * t157 - t106 * t254 + t91 + (-t160 + (pkin(10) * t215 - t147) * t254) * qJD(4);
t274 = t106 * t258 + t147 * t321 - t167 * t322 + t254 * t95;
t33 = -pkin(10) * t388 + t274;
t304 = t25 * t257 - t253 * t33;
t303 = -t253 * t60 - t57;
t302 = -t253 * t84 + t257 * t75;
t298 = pkin(1) * t385;
t295 = t207 * t257 - t208 * t253;
t294 = t229 * t257 - t231 * t253;
t293 = t188 * t258;
t89 = t202 * t323 + t203 * t255 - t204 * t369 - t222 * t307;
t244 = -pkin(2) * t369 - pkin(3);
t289 = -t80 * t194 + t254 * t89 + t120;
t287 = -t149 + t379;
t284 = t130 * t192 - t143 * t242;
t126 = pkin(4) * t346 - t375;
t281 = pkin(5) * t389 + t379;
t280 = t130 * t322 + t79 * t194 - t89 * t258;
t279 = t25 * t253 + t257 * t33 + t319 * t75 - t320 * t84;
t227 = t244 - t367;
t45 = -pkin(4) * t314 + t89;
t273 = t30 * t194 + t45 * t212 + t389 * t97;
t272 = -t31 * t194 + t45 * t214 - t333 * t97;
t271 = t194 * t228 - t89;
t107 = t221 * t255 - t223 * t369 + t230 * t323 - t232 * t307;
t19 = t31 - t391;
t2 = pkin(5) * t143 + qJ(6) * t38 - qJD(6) * t283 + t266;
t4 = -qJ(6) * t39 - qJD(6) * t101 - t299;
t268 = t15 * t333 - t19 * t389 - t2 * t214 - t4 * t212;
t66 = pkin(4) * t388 + t107;
t14 = pkin(5) * t39 + t45;
t263 = t228 * t192 - t88;
t243 = pkin(4) * t257 + pkin(5);
t206 = t212 * qJ(6);
t138 = t212 * t215;
t137 = t214 * t215;
t129 = -t206 + t327;
t128 = t294 - t354;
t115 = -t192 ^ 2 + t194 ^ 2;
t114 = t143 * t278;
t113 = -t206 + t328;
t112 = t295 - t354;
t109 = (-qJD(1) * t215 - t194) * t250;
t108 = t192 * t250 + t262;
t51 = t165 * t194 + t188 * t293 + t343;
t50 = -t188 ^ 2 * t254 + t164 * t194 + t339;
t44 = t165 * t293 + t355;
t43 = -t320 * t346 + (t317 * t345 + t342) * t257 + t276 * t253;
t42 = t155 * t215 + t253 * t342 - t257 * t338;
t37 = -qJ(6) * t137 + t357;
t36 = -t101 * t194 - t143 * t212 - t178 * t389;
t35 = t143 * t214 - t178 * t333 + t194 * t283;
t34 = -pkin(5) * t278 + qJ(6) * t138 + t302;
t22 = (t96 + t353) * t258 + (t314 - t352) * t254;
t21 = t362 - t381;
t20 = t303 + t391;
t8 = -t214 * t38 - t283 * t333;
t7 = t101 * t333 + t212 * t38 - t214 * t39 - t283 * t389;
t6 = -qJ(6) * t43 - qJD(6) * t137 + t279;
t5 = pkin(5) * t157 + qJ(6) * t42 - qJD(5) * t357 + qJD(6) * t138 + t304;
t1 = [0, 0, 0, 0.2e1 * t259 * t306, t325 * t385, t335, -t336, 0, -pkin(7) * t335 + t256 * t298, pkin(7) * t336 + t259 * t298, -t194 * t156 + t215 * t262, -t215 * t143 - t156 * t192 + t194 * t157 + t262 * t278, t156 * t250, -t157 * t250, 0, -t107 * t250 + t143 * t246 + t157 * t228 + (-qJD(1) * t278 + t192) * t315, pkin(2) * t215 * t306 - t106 * t250 + t228 * t156 - t194 * t315 + t246 * t262, t165 * t276 + t345 * t96 (t164 * t258 - t165 * t254) * t156 + (t258 * t314 - t355 + (-t164 * t254 - t165 * t258) * qJD(4)) * t215, t157 * t165 + t188 * t276 + t215 * t339 - t278 * t96, t164 * t157 - t188 * t388 - t215 * t343 - t278 * t314, t157 * t188 - t114 (-t167 * t321 + t91) * t188 + t140 * t143 - (-t131 * t321 + t83) * t278 + t79 * t157 - t107 * t164 + t375 * t314 + t215 * t120 + ((-qJD(4) * t147 - t106) * t188 - t167 * t143 - (-qJD(4) * t125 - t88) * t278 + t89 * t215 + t130 * t156) * t254, t107 * t165 + t130 * t276 - t143 * t329 - t80 * t157 - t188 * t274 + t275 * t278 + t345 * t89 - t375 * t96, t138 * t38 - t283 * t42, t101 * t42 + t137 * t38 + t138 * t39 - t283 * t43, -t138 * t143 + t157 * t283 - t178 * t42 + t278 * t38, -t101 * t157 - t137 * t143 - t178 * t43 + t278 * t39, t157 * t178 - t114, t304 * t178 + t302 * t143 - t305 * t278 + t30 * t157 + t66 * t101 + t126 * t39 + t45 * t137 + t97 * t43 + (-t178 * t357 + t278 * t31) * qJD(5), -t126 * t38 - t138 * t45 - t143 * t357 - t157 * t31 - t178 * t279 - t278 * t299 + t283 * t66 - t42 * t97, -t101 * t6 - t137 * t4 + t138 * t2 + t15 * t42 - t19 * t43 - t283 * t5 + t34 * t38 - t37 * t39, t4 * t37 + t19 * t6 + t2 * t34 + t15 * t5 + t14 * (pkin(5) * t137 + t126) + t53 * (pkin(5) * t43 + t66); 0, 0, 0, -t256 * t337, t325 * t261, 0, 0, 0, t261 * pkin(1) * t256, pkin(1) * t337, -t347, t115, t108, t109, 0, t151 * t250 + (-t192 * t324 - t250 * t323) * pkin(2) + t271, t152 * t250 + (t194 * t324 - t250 * t307) * pkin(2) + t263, t44, t22, t51, t50, t350, -t244 * t314 + t284 * t254 - t288 * t164 + (-t242 * t321 + t398) * t188 + t280, t244 * t96 + t284 * t258 + t288 * t165 + (t242 * t322 + t397) * t188 + t289, t8, t7, t35, t36, t351, t295 * t143 + t227 * t39 + (-t208 * t319 + (-qJD(5) * t207 + t393) * t253 + t383) * t178 + t326 * t101 + t273, -t143 * t328 + t178 * t377 - t227 * t38 + t283 * t326 + t272, -t101 * t364 + t112 * t38 - t113 * t39 - t283 * t363 + t268, t4 * t113 + t2 * t112 + t14 * (t227 + t368) + (t281 + t288) * t53 + t364 * t19 + t363 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t347, t115, t108, t109, 0, t149 * t250 + t271, t148 * t250 + t263, t44, t22, t51, t50, t350, pkin(3) * t314 - t296 * t188 + t149 * t164 + t130 * t349 + (-t188 * t321 - t343) * pkin(9) + t280, -pkin(3) * t96 + t332 * t188 - t149 * t165 + t130 * t348 + (t188 * t322 - t339) * pkin(9) + t289, t8, t7, t35, t36, t351, t294 * t143 + t245 * t39 + (-t231 * t319 + (-qJD(5) * t229 + t392) * t253 + t382) * t178 + t287 * t101 + t273, -t143 * t327 + t178 * t378 - t245 * t38 + t283 * t287 + t272, -t101 * t361 + t128 * t38 - t129 * t39 - t283 * t360 + t268, t4 * t129 + t2 * t128 + t14 * (t245 + t368) + (t281 - t149) * t53 + t361 * t19 + t360 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165 * t164, -t164 ^ 2 + t165 ^ 2, t96 - t353, t314 + t352, t143, -t130 * t165 + t188 * t80 + t264, -t130 * t164 + t188 * t79 - t275, t390, t394, t387, t373, t143, -t303 * t178 + (-t101 * t165 + t143 * t257 - t178 * t320) * pkin(4) + t374, t362 * t178 + (-t143 * t253 - t165 * t283 - t178 * t319) * pkin(4) + t386, t283 * t19 + t101 * t21 - t101 * t15 + t283 * t20 + t243 * t38 + (-t253 * t39 + (-t101 * t257 + t253 * t283) * qJD(5)) * pkin(4), -pkin(5) * t384 - t15 * t20 - t19 * t21 + t2 * t243 + (-t53 * t165 + t4 * t253 + (-t15 * t253 + t19 * t257) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t390, t394, t387, t373, t143, t178 * t31 + t374, t178 * t30 + t386, pkin(5) * t38 - t101 * t365, t365 * t19 + (t2 - t384) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99 - t372, t101 * t19 + t15 * t283 + t14;];
tauc_reg  = t1;
