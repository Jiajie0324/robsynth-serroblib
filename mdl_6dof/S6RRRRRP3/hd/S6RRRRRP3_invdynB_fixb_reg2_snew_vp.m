% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 04:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:43:28
% EndTime: 2019-05-08 04:44:15
% DurationCPUTime: 30.57s
% Computational Cost: add. (222642->802), mult. (445335->1181), div. (0->0), fcn. (331048->10), ass. (0->577)
t1007 = sin(qJ(5));
t1012 = cos(qJ(5));
t1004 = qJD(2) + qJD(3);
t1008 = sin(qJ(4));
t1013 = cos(qJ(4));
t1009 = sin(qJ(3));
t1010 = sin(qJ(2));
t1014 = cos(qJ(3));
t1015 = cos(qJ(2));
t969 = (t1009 * t1015 + t1010 * t1014) * qJD(1);
t940 = -t1004 * t1013 + t1008 * t969;
t941 = t1004 * t1008 + t1013 * t969;
t892 = t1007 * t941 + t1012 * t940;
t894 = -t1007 * t940 + t1012 * t941;
t845 = t894 * t892;
t1067 = qJD(1) * t1015;
t1040 = qJD(2) * t1067;
t1060 = qJDD(1) * t1010;
t977 = t1040 + t1060;
t1000 = t1015 * qJDD(1);
t1068 = qJD(1) * t1010;
t1041 = qJD(2) * t1068;
t978 = t1000 - t1041;
t1035 = t1009 * t977 - t1014 * t978;
t909 = -qJD(3) * t969 - t1035;
t906 = qJDD(4) - t909;
t905 = qJDD(5) + t906;
t1039 = -t905 + t845;
t1097 = t1007 * t1039;
t1082 = t1012 * t1039;
t1132 = t1039 * pkin(5);
t903 = t941 * t940;
t1130 = -t903 + t906;
t1136 = t1008 * t1130;
t1057 = qJDD(2) + qJDD(3);
t967 = t1009 * t1068 - t1014 * t1067;
t931 = t969 * t967;
t1129 = -t931 + t1057;
t1135 = t1009 * t1129;
t1134 = t1013 * t1130;
t1133 = t1014 * t1129;
t910 = -qJD(3) * t967 + t1009 * t978 + t1014 * t977;
t1036 = t1008 * t910 - t1013 * t1057;
t1028 = qJD(4) * t941 + t1036;
t858 = -t940 * qJD(4) + t1008 * t1057 + t1013 * t910;
t784 = -t892 * qJD(5) - t1007 * t1028 + t1012 * t858;
t963 = qJD(4) + t967;
t961 = qJD(5) + t963;
t865 = t961 * t892;
t1131 = -t865 + t784;
t958 = t1004 * t967;
t878 = t910 - t958;
t920 = t963 * t940;
t841 = -t920 - t858;
t840 = -t920 + t858;
t809 = t845 + t905;
t1098 = t1007 * t809;
t891 = t894 ^ 2;
t959 = t961 ^ 2;
t852 = -t891 - t959;
t770 = t1012 * t852 - t1098;
t1083 = t1012 * t809;
t771 = -t1007 * t852 - t1083;
t703 = t1008 * t771 + t1013 * t770;
t1128 = -pkin(3) * t703 - pkin(4) * t770;
t890 = t892 ^ 2;
t829 = -t959 - t890;
t756 = t1007 * t829 - t1082;
t757 = t1012 * t829 + t1097;
t693 = t1008 * t757 + t1013 * t756;
t1127 = -pkin(3) * t693 - pkin(4) * t756;
t875 = (qJD(3) - t1004) * t969 + t1035;
t837 = (qJD(4) - t963) * t941 + t1036;
t1037 = t1007 * t858 + t1012 * t1028;
t748 = (qJD(5) - t961) * t894 + t1037;
t1006 = t1015 ^ 2;
t1018 = qJD(1) ^ 2;
t1011 = sin(qJ(1));
t1016 = cos(qJ(1));
t987 = t1011 * g(1) - t1016 * g(2);
t1029 = qJDD(1) * pkin(1) + t987;
t1030 = qJD(2) * pkin(2) - pkin(8) * t1068;
t912 = t978 * pkin(2) + (pkin(8) * t1006 + pkin(7)) * t1018 - t1030 * t1068 + t1029;
t1126 = t940 ^ 2;
t938 = t941 ^ 2;
t962 = t963 ^ 2;
t965 = t967 ^ 2;
t966 = t969 ^ 2;
t1125 = t1004 ^ 2;
t752 = -t865 - t784;
t686 = -t1007 * t748 + t1012 * t752;
t688 = -t1007 * t752 - t1012 * t748;
t633 = -t1008 * t686 + t1013 * t688;
t802 = -t890 - t891;
t621 = t1009 * t633 - t1014 * t802;
t622 = t1009 * t802 + t1014 * t633;
t560 = -t1010 * t621 + t1015 * t622;
t631 = t1008 * t688 + t1013 * t686;
t545 = t1011 * t560 - t1016 * t631;
t1120 = pkin(6) * t545;
t694 = -t1008 * t756 + t1013 * t757;
t747 = (qJD(5) + t961) * t894 + t1037;
t650 = t1009 * t694 - t1014 * t747;
t651 = t1009 * t747 + t1014 * t694;
t600 = -t1010 * t650 + t1015 * t651;
t569 = t1011 * t600 - t1016 * t693;
t1119 = pkin(6) * t569;
t704 = -t1008 * t770 + t1013 * t771;
t656 = t1009 * t704 - t1014 * t1131;
t657 = t1009 * t1131 + t1014 * t704;
t606 = -t1010 * t656 + t1015 * t657;
t576 = t1011 * t606 - t1016 * t703;
t1118 = pkin(6) * t576;
t559 = t1010 * t622 + t1015 * t621;
t1117 = pkin(7) * t559;
t599 = t1010 * t651 + t1015 * t650;
t1116 = pkin(7) * t599;
t605 = t1010 * t657 + t1015 * t656;
t1115 = pkin(7) * t605;
t1114 = pkin(8) * t621;
t1113 = pkin(8) * t650;
t1112 = pkin(8) * t656;
t1111 = pkin(9) * t631;
t1110 = pkin(9) * t693;
t1109 = pkin(9) * t703;
t1108 = pkin(10) * t686;
t1107 = pkin(10) * t756;
t1106 = pkin(10) * t770;
t1105 = pkin(3) * t1009;
t1104 = -pkin(1) * t631 + pkin(7) * t560;
t1103 = -pkin(1) * t693 + pkin(7) * t600;
t1102 = -pkin(1) * t703 + pkin(7) * t606;
t799 = -t878 * pkin(9) + (t1004 * t969 - t909) * pkin(3) - t912;
t988 = g(1) * t1016 + g(2) * t1011;
t1021 = -pkin(1) * t1018 + qJDD(1) * pkin(7) - t988;
t1020 = t1010 * t1021;
t1063 = t1010 * t1018;
t1069 = qJD(1) * qJD(2);
t1019 = -t1020 - t977 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1063 + pkin(8) * t1069 - g(3)) * t1015;
t1002 = t1006 * t1018;
t952 = -t1010 * g(3) + t1015 * t1021;
t902 = -pkin(2) * t1002 + t978 * pkin(8) - qJD(2) * t1030 + t952;
t848 = t1009 * t1019 + t1014 * t902;
t929 = pkin(3) * t967 - pkin(9) * t969;
t805 = -pkin(3) * t1125 + pkin(9) * t1057 - t967 * t929 + t848;
t728 = t1008 * t805 - t1013 * t799;
t699 = pkin(4) * t1130 + pkin(10) * t841 - t728;
t729 = t1008 * t799 + t1013 * t805;
t913 = pkin(4) * t963 - pkin(10) * t941;
t708 = -pkin(4) * t1126 - pkin(10) * t1028 - t963 * t913 + t729;
t638 = t1007 * t708 - t1012 * t699;
t639 = t1007 * t699 + t1012 * t708;
t1101 = qJD(6) * t894;
t1056 = t784 * qJ(6) + t638;
t1027 = -qJ(6) * t865 - t1056;
t608 = t1027 - 0.2e1 * t1101 - t1132;
t1100 = t1007 * t608;
t847 = t1009 * t902 - t1014 * t1019;
t804 = -t1057 * pkin(3) - t1125 * pkin(9) + t929 * t969 + t847;
t730 = t1028 * pkin(4) - t1126 * pkin(10) + t913 * t941 + t804;
t1099 = t1007 * t730;
t1096 = t1007 * t961;
t578 = t1007 * t639 - t1012 * t638;
t1095 = t1008 * t578;
t1094 = t1008 * t804;
t850 = t903 + t906;
t1093 = t1008 * t850;
t1092 = t1008 * t963;
t1091 = t1009 * t912;
t927 = t931 + t1057;
t1090 = t1009 * t927;
t787 = t1009 * t848 - t1014 * t847;
t1089 = t1010 * t787;
t970 = pkin(7) * t1018 + t1029;
t1088 = t1010 * t970;
t994 = t1015 * t1063;
t985 = qJDD(2) + t994;
t1087 = t1010 * t985;
t986 = qJDD(2) - t994;
t1086 = t1010 * t986;
t1085 = t1012 * t608;
t1084 = t1012 * t730;
t1081 = t1012 * t961;
t1080 = t1013 * t578;
t1079 = t1013 * t804;
t1078 = t1013 * t850;
t1077 = t1013 * t963;
t1076 = t1014 * t912;
t1075 = t1014 * t927;
t1074 = t1015 * t787;
t1073 = t1015 * t970;
t1072 = t1015 * t986;
t1066 = t1004 * t1009;
t1065 = t1004 * t1014;
t1005 = t1010 ^ 2;
t1064 = t1005 * t1018;
t1061 = t1005 + t1006;
t1059 = qJDD(1) * t1011;
t1058 = qJDD(1) * t1016;
t1055 = t1009 * t845;
t1054 = t1009 * t903;
t1053 = t1011 * t931;
t1052 = t1014 * t845;
t1051 = t1014 * t903;
t1050 = t1016 * t931;
t1049 = -pkin(3) * t1014 - pkin(2);
t1047 = -pkin(2) * t631 + pkin(8) * t622;
t1046 = -pkin(2) * t693 + pkin(8) * t651;
t1045 = -pkin(2) * t703 + pkin(8) * t657;
t1044 = -pkin(4) * t802 + pkin(10) * t688;
t1043 = -pkin(4) * t747 + pkin(10) * t757;
t1042 = -pkin(4) * t1131 + pkin(10) * t771;
t579 = t1007 * t638 + t1012 * t639;
t788 = t1009 * t847 + t1014 * t848;
t951 = t1015 * g(3) + t1020;
t901 = t1010 * t951 + t1015 * t952;
t943 = -t1011 * t987 - t1016 * t988;
t1034 = t1011 * t994;
t1033 = t1016 * t994;
t597 = -pkin(3) * t631 - pkin(4) * t686;
t982 = -t1011 * t1018 + t1058;
t1032 = -pkin(6) * t982 - g(3) * t1011;
t673 = t1008 * t729 - t1013 * t728;
t674 = t1008 * t728 + t1013 * t729;
t899 = t1010 * t952 - t1015 * t951;
t1031 = t1011 * t988 - t1016 * t987;
t783 = -qJD(5) * t894 - t1037;
t859 = pkin(5) * t961 - qJ(6) * t894;
t1026 = t783 * qJ(6) - 0.2e1 * qJD(6) * t892 - t859 * t961 + t639;
t1025 = -pkin(1) * t559 - pkin(2) * t621 + pkin(3) * t802 - pkin(9) * t633;
t1024 = -pkin(1) * t599 - pkin(2) * t650 + pkin(3) * t747 - pkin(9) * t694;
t1023 = -pkin(1) * t605 - pkin(2) * t656 + pkin(3) * t1131 - pkin(9) * t704;
t664 = -t783 * pkin(5) - t890 * qJ(6) + t859 * t894 + qJDD(6) + t730;
t1017 = qJD(2) ^ 2;
t992 = -t1002 - t1017;
t991 = t1002 - t1017;
t990 = -t1017 - t1064;
t989 = t1017 - t1064;
t984 = t1002 - t1064;
t983 = t1002 + t1064;
t981 = t1016 * t1018 + t1059;
t980 = t1061 * qJDD(1);
t979 = t1000 - 0.2e1 * t1041;
t976 = 0.2e1 * t1040 + t1060;
t974 = t1015 * t985;
t973 = t1061 * t1069;
t964 = -pkin(6) * t981 + g(3) * t1016;
t956 = -t966 + t1125;
t955 = t965 - t1125;
t954 = -t1005 * t1069 + t1015 * t977;
t953 = -t1006 * t1069 - t1010 * t978;
t950 = -t966 - t1125;
t949 = -t1010 * t990 - t1072;
t948 = -t1010 * t989 + t974;
t947 = t1015 * t992 - t1087;
t946 = t1015 * t991 - t1086;
t945 = t1015 * t990 - t1086;
t944 = t1010 * t992 + t974;
t936 = -t1011 * t983 + t1016 * t980;
t935 = t1011 * t980 + t1016 * t983;
t932 = -t1010 * t976 + t1015 * t979;
t930 = -t966 + t965;
t925 = -t1125 - t965;
t924 = t1011 * t976 + t1016 * t949;
t923 = -t1011 * t979 + t1016 * t947;
t922 = t1011 * t949 - t1016 * t976;
t921 = t1011 * t947 + t1016 * t979;
t919 = -t938 + t962;
t918 = -t962 + t1126;
t917 = (t1009 * t969 - t1014 * t967) * t1004;
t916 = (-t1009 * t967 - t1014 * t969) * t1004;
t915 = -pkin(7) * t945 - t1073;
t914 = -pkin(7) * t944 - t1088;
t911 = -t965 - t966;
t908 = -pkin(1) * t945 + t952;
t907 = -pkin(1) * t944 + t951;
t898 = -t938 + t1126;
t888 = -t938 - t962;
t887 = 0.2e1 * t1101;
t885 = t1014 * t955 - t1090;
t884 = -t1009 * t956 + t1133;
t883 = t1009 * t955 + t1075;
t882 = t1014 * t956 + t1135;
t881 = -t1009 * t950 - t1075;
t880 = t1014 * t950 - t1090;
t879 = -t910 - t958;
t874 = (qJD(3) + t1004) * t969 + t1035;
t873 = -t962 - t1126;
t872 = t1014 * t910 - t1066 * t969;
t871 = t1009 * t910 + t1065 * t969;
t870 = -t1009 * t909 + t1065 * t967;
t869 = t1014 * t909 + t1066 * t967;
t868 = -t1011 * t970 + t1016 * t901;
t867 = t1011 * t901 + t1016 * t970;
t864 = t1014 * t925 - t1135;
t863 = t1009 * t925 + t1133;
t862 = -t891 + t959;
t861 = t890 - t959;
t860 = t938 + t1126;
t855 = (t1008 * t941 - t1013 * t940) * t963;
t854 = (t1008 * t940 + t1013 * t941) * t963;
t853 = -t1010 * t916 + t1015 * t917;
t844 = -pkin(8) * t880 - t1076;
t843 = -t891 + t890;
t838 = (-qJD(4) - t963) * t941 - t1036;
t836 = -pkin(8) * t863 - t1091;
t835 = -t1010 * t883 + t1015 * t885;
t834 = -t1010 * t882 + t1015 * t884;
t833 = t1013 * t858 - t1092 * t941;
t832 = -t1008 * t858 - t1077 * t941;
t831 = t1008 * t1028 + t1077 * t940;
t830 = t1013 * t1028 - t1092 * t940;
t828 = -t1010 * t880 + t1015 * t881;
t827 = t1010 * t881 + t1015 * t880;
t826 = -t1009 * t879 - t1014 * t875;
t825 = -t1009 * t878 - t1014 * t874;
t824 = -t1009 * t875 + t1014 * t879;
t823 = -t1009 * t874 + t1014 * t878;
t822 = t1009 * t906 + t1014 * t855;
t821 = t1009 * t855 - t1014 * t906;
t820 = t1013 * t918 - t1093;
t819 = -t1008 * t919 + t1134;
t818 = -t1008 * t918 - t1078;
t817 = -t1013 * t919 - t1136;
t816 = -t1010 * t871 + t1015 * t872;
t815 = -t1010 * t869 + t1015 * t870;
t814 = (t1007 * t894 - t1012 * t892) * t961;
t813 = (-t1007 * t892 - t1012 * t894) * t961;
t812 = -t1010 * t863 + t1015 * t864;
t811 = t1010 * t864 + t1015 * t863;
t807 = -t1008 * t888 - t1078;
t806 = t1013 * t888 - t1093;
t801 = t1013 * t873 - t1136;
t800 = t1008 * t873 + t1134;
t798 = -pkin(2) * t878 + pkin(8) * t881 - t1091;
t795 = t1014 * t833 + t1054;
t794 = t1014 * t831 - t1054;
t793 = t1009 * t833 - t1051;
t792 = t1009 * t831 + t1051;
t791 = -pkin(2) * t874 + pkin(8) * t864 + t1076;
t790 = t1011 * t878 + t1016 * t828;
t789 = t1011 * t828 - t1016 * t878;
t786 = t1011 * t874 + t1016 * t812;
t785 = t1011 * t812 - t1016 * t874;
t779 = t1012 * t861 - t1098;
t778 = -t1007 * t862 - t1082;
t777 = t1007 * t861 + t1083;
t776 = t1012 * t862 - t1097;
t775 = -t1008 * t841 - t1013 * t837;
t774 = -t1008 * t840 + t1013 * t838;
t773 = -t1008 * t837 + t1013 * t841;
t772 = -t1008 * t838 - t1013 * t840;
t768 = pkin(2) * t912 + pkin(8) * t788;
t767 = -t1010 * t824 + t1015 * t826;
t766 = -t1010 * t823 + t1015 * t825;
t765 = t1010 * t826 + t1015 * t824;
t764 = -t1009 * t837 + t1014 * t820;
t763 = -t1009 * t841 + t1014 * t819;
t762 = t1009 * t820 + t1014 * t837;
t761 = t1009 * t819 + t1014 * t841;
t760 = -t1010 * t821 + t1015 * t822;
t759 = t1009 * t840 + t1014 * t807;
t758 = t1009 * t807 - t1014 * t840;
t754 = -t1009 * t838 + t1014 * t801;
t753 = t1009 * t801 + t1014 * t838;
t746 = -pkin(1) * t827 - pkin(2) * t880 + t848;
t745 = t1012 * t784 - t1096 * t894;
t744 = t1007 * t784 + t1081 * t894;
t743 = -t1007 * t783 + t1081 * t892;
t742 = t1012 * t783 + t1096 * t892;
t741 = -t1009 * t898 + t1014 * t774;
t740 = t1009 * t774 + t1014 * t898;
t739 = -t1008 * t813 + t1013 * t814;
t738 = -t1008 * t814 - t1013 * t813;
t737 = t1011 * t911 + t1016 * t767;
t736 = t1011 * t767 - t1016 * t911;
t735 = -pkin(9) * t806 + t1079;
t734 = -t1009 * t860 + t1014 * t775;
t733 = t1009 * t775 + t1014 * t860;
t732 = -pkin(1) * t811 - pkin(2) * t863 + t847;
t731 = -pkin(9) * t800 + t1094;
t727 = -pkin(8) * t824 - t787;
t726 = t1009 * t905 + t1014 * t739;
t725 = t1009 * t739 - t1014 * t905;
t724 = -t1010 * t793 + t1015 * t795;
t723 = -t1010 * t792 + t1015 * t794;
t722 = -pkin(2) * t911 + pkin(8) * t826 + t788;
t721 = -pkin(1) * t765 - pkin(2) * t824;
t720 = -pkin(7) * t827 - t1010 * t798 + t1015 * t844;
t719 = t1015 * t788 - t1089;
t718 = t1010 * t788 + t1074;
t717 = -pkin(5) * t1131 - qJ(6) * t809;
t716 = -pkin(7) * t811 - t1010 * t791 + t1015 * t836;
t715 = -t1008 * t777 + t1013 * t779;
t714 = -t1008 * t776 + t1013 * t778;
t713 = -t1008 * t779 - t1013 * t777;
t712 = -t1008 * t778 - t1013 * t776;
t711 = -t1011 * t912 + t1016 * t719;
t710 = t1011 * t719 + t1016 * t912;
t709 = -pkin(3) * t806 + t729;
t707 = -pkin(3) * t800 + t728;
t701 = -t1010 * t762 + t1015 * t764;
t700 = -t1010 * t761 + t1015 * t763;
t696 = -t1010 * t758 + t1015 * t759;
t695 = t1010 * t759 + t1015 * t758;
t691 = -t1010 * t753 + t1015 * t754;
t690 = t1010 * t754 + t1015 * t753;
t689 = t1084 - t1106;
t687 = -t1007 * t1131 - t1012 * t747;
t685 = -t1007 * t747 + t1012 * t1131;
t683 = -t1008 * t744 + t1013 * t745;
t682 = -t1008 * t742 + t1013 * t743;
t681 = -t1008 * t745 - t1013 * t744;
t680 = -t1008 * t743 - t1013 * t742;
t679 = -t1010 * t740 + t1015 * t741;
t678 = t1099 - t1107;
t677 = -t1010 * t733 + t1015 * t734;
t676 = t1010 * t734 + t1015 * t733;
t675 = -pkin(1) * t718 - pkin(2) * t787;
t672 = -t1010 * t725 + t1015 * t726;
t671 = t1010 * t726 + t1015 * t725;
t670 = t1014 * t683 + t1055;
t669 = t1014 * t682 - t1055;
t668 = t1009 * t683 - t1052;
t667 = t1009 * t682 + t1052;
t666 = t1011 * t806 + t1016 * t696;
t665 = t1011 * t696 - t1016 * t806;
t663 = t1011 * t800 + t1016 * t691;
t662 = t1011 * t691 - t1016 * t800;
t661 = -t1009 * t748 + t1014 * t715;
t660 = -t1009 * t752 + t1014 * t714;
t659 = t1009 * t715 + t1014 * t748;
t658 = t1009 * t714 + t1014 * t752;
t654 = -qJ(6) * t852 + t664;
t653 = t1009 * t804 + t1014 * t674;
t652 = t1009 * t674 - t1014 * t804;
t649 = t1042 + t1099;
t647 = t1011 * t773 + t1016 * t677;
t646 = t1011 * t677 - t1016 * t773;
t645 = t1043 - t1084;
t644 = -pkin(9) * t773 - t673;
t643 = -pkin(7) * t718 - pkin(8) * t1074 - t1010 * t768;
t642 = -pkin(7) * t765 - t1010 * t722 + t1015 * t727;
t641 = -t1011 * t738 + t1016 * t672;
t640 = t1011 * t672 + t1016 * t738;
t636 = -pkin(8) * t758 - t1009 * t709 + t1014 * t735;
t635 = -pkin(8) * t753 - t1009 * t707 + t1014 * t731;
t634 = -pkin(5) * t747 + qJ(6) * t829 - t664;
t632 = -t1008 * t685 + t1013 * t687;
t630 = -t1008 * t687 - t1013 * t685;
t628 = -pkin(2) * t806 + pkin(8) * t759 + t1009 * t735 + t1014 * t709;
t627 = -pkin(1) * t695 - pkin(2) * t758 + pkin(3) * t840 - pkin(9) * t807 - t1094;
t626 = -pkin(2) * t800 + pkin(8) * t754 + t1009 * t731 + t1014 * t707;
t625 = -t1009 * t843 + t1014 * t632;
t624 = t1009 * t632 + t1014 * t843;
t623 = -pkin(1) * t690 - pkin(2) * t753 - pkin(3) * t838 - pkin(9) * t801 + t1079;
t619 = -t1010 * t668 + t1015 * t670;
t618 = -t1010 * t667 + t1015 * t669;
t617 = t1010 * t670 + t1015 * t668;
t616 = t1010 * t669 + t1015 * t667;
t615 = -pkin(5) * t890 + t1026;
t614 = -pkin(8) * t733 + t1014 * t644 + t1105 * t773;
t613 = -t1007 * t717 + t1012 * t654 - t1106;
t612 = -t1010 * t659 + t1015 * t661;
t611 = -t1010 * t658 + t1015 * t660;
t610 = t1010 * t661 + t1015 * t659;
t609 = t1010 * t660 + t1015 * t658;
t607 = qJ(6) * t1082 - t1007 * t634 - t1107;
t603 = -t1010 * t652 + t1015 * t653;
t602 = t1010 * t653 + t1015 * t652;
t601 = pkin(8) * t734 + t1009 * t644 + t1049 * t773;
t596 = t639 + t1128;
t595 = t1007 * t654 + t1012 * t717 + t1042;
t594 = t887 + (-t752 + t865) * qJ(6) + t1132 + t1056;
t593 = qJ(6) * t1097 + t1012 * t634 + t1043;
t592 = t638 + t1127;
t591 = -qJ(6) * t748 + (-t802 - t890) * pkin(5) + t1026;
t590 = -pkin(1) * t676 - pkin(2) * t733 - pkin(3) * t860 - pkin(9) * t775 - t674;
t589 = -t1008 * t649 + t1013 * t689 - t1109;
t588 = -t1011 * t713 + t1016 * t612;
t587 = -t1011 * t712 + t1016 * t611;
t586 = t1011 * t612 + t1016 * t713;
t585 = t1011 * t611 + t1016 * t712;
t584 = -t1011 * t681 + t1016 * t619;
t583 = -t1011 * t680 + t1016 * t618;
t582 = t1011 * t619 + t1016 * t681;
t581 = t1011 * t618 + t1016 * t680;
t580 = -pkin(5) * t752 + t597;
t577 = t1011 * t703 + t1016 * t606;
t575 = pkin(6) * t577;
t574 = -t1008 * t645 + t1013 * t678 - t1110;
t573 = -pkin(8) * t652 + (-pkin(9) * t1014 + t1105) * t673;
t572 = -pkin(5) * t664 + qJ(6) * t615;
t571 = (-t852 - t890) * pkin(5) + t1026 + t1128;
t570 = t1011 * t693 + t1016 * t600;
t568 = pkin(6) * t570;
t567 = t1011 * t673 + t1016 * t603;
t566 = t1011 * t603 - t1016 * t673;
t565 = -pkin(4) * t730 + pkin(10) * t579;
t564 = -t1027 + t1127 + t887 + 0.2e1 * t1132;
t563 = -t1010 * t624 + t1015 * t625;
t562 = t1010 * t625 + t1015 * t624;
t561 = -t578 - t1108;
t557 = t1044 + t579;
t556 = pkin(8) * t653 + (-pkin(9) * t1009 + t1049) * t673;
t555 = -pkin(7) * t695 - t1010 * t628 + t1015 * t636;
t554 = -pkin(7) * t690 - t1010 * t626 + t1015 * t635;
t553 = t1012 * t615 - t1100;
t552 = t1007 * t615 + t1085;
t551 = -pkin(1) * t602 - pkin(2) * t652 + pkin(3) * t804 - pkin(9) * t674;
t550 = -t1011 * t630 + t1016 * t563;
t549 = t1011 * t563 + t1016 * t630;
t548 = -t1008 * t595 + t1013 * t613 - t1109;
t547 = -pkin(7) * t676 - t1010 * t601 + t1015 * t614;
t546 = t1011 * t631 + t1016 * t560;
t544 = pkin(6) * t546;
t543 = -t1008 * t593 + t1013 * t607 - t1110;
t542 = t1013 * t579 - t1095;
t541 = t1008 * t579 + t1080;
t540 = -t1007 * t591 + t1012 * t594 - t1108;
t539 = t1007 * t594 + t1012 * t591 + t1044;
t538 = t1009 * t730 + t1014 * t542;
t537 = t1009 * t542 - t1014 * t730;
t536 = -t1009 * t596 + t1014 * t589 - t1112;
t535 = -t1008 * t689 - t1013 * t649 + t1023;
t534 = -t1009 * t592 + t1014 * t574 - t1113;
t533 = -t1008 * t678 - t1013 * t645 + t1024;
t532 = t1009 * t589 + t1014 * t596 + t1045;
t531 = t1009 * t574 + t1014 * t592 + t1046;
t530 = -t1008 * t552 + t1013 * t553;
t529 = t1008 * t553 + t1013 * t552;
t528 = -pkin(3) * t541 - pkin(4) * t578;
t527 = -t1008 * t613 - t1013 * t595 + t1023;
t526 = -t1008 * t557 + t1013 * t561 - t1111;
t525 = -pkin(7) * t602 - t1010 * t556 + t1015 * t573;
t524 = -pkin(10) * t552 - qJ(6) * t1085 - t1007 * t572;
t523 = t1009 * t664 + t1014 * t530;
t522 = t1009 * t530 - t1014 * t664;
t521 = -t1009 * t571 + t1014 * t548 - t1112;
t520 = -t1008 * t607 - t1013 * t593 + t1024;
t519 = t1009 * t548 + t1014 * t571 + t1045;
t518 = -t1009 * t564 + t1014 * t543 - t1113;
t517 = -pkin(4) * t664 + pkin(10) * t553 - qJ(6) * t1100 + t1012 * t572;
t516 = t1009 * t543 + t1014 * t564 + t1046;
t515 = -pkin(9) * t541 - pkin(10) * t1080 - t1008 * t565;
t514 = -t1010 * t537 + t1015 * t538;
t513 = t1010 * t538 + t1015 * t537;
t512 = -t1009 * t597 + t1014 * t526 - t1114;
t511 = -t1008 * t539 + t1013 * t540 - t1111;
t510 = -pkin(3) * t529 - pkin(4) * t552 - pkin(5) * t608;
t509 = -t1008 * t561 - t1013 * t557 + t1025;
t508 = t1009 * t526 + t1014 * t597 + t1047;
t507 = -t1010 * t532 + t1015 * t536 - t1115;
t506 = -t1010 * t531 + t1015 * t534 - t1116;
t505 = t1011 * t541 + t1016 * t514;
t504 = t1011 * t514 - t1016 * t541;
t503 = -t1009 * t580 + t1014 * t511 - t1114;
t502 = -t1010 * t522 + t1015 * t523;
t501 = t1010 * t523 + t1015 * t522;
t500 = -t1008 * t540 - t1013 * t539 + t1025;
t499 = t1009 * t511 + t1014 * t580 + t1047;
t498 = -t1010 * t519 + t1015 * t521 - t1115;
t497 = -t1010 * t516 + t1015 * t518 - t1116;
t496 = -pkin(8) * t537 - t1009 * t528 + t1014 * t515;
t495 = t1011 * t529 + t1016 * t502;
t494 = t1011 * t502 - t1016 * t529;
t493 = -pkin(9) * t529 - t1008 * t517 + t1013 * t524;
t492 = -pkin(1) * t513 - pkin(2) * t537 + pkin(3) * t730 - pkin(9) * t542 + pkin(10) * t1095 - t1013 * t565;
t491 = -t1010 * t508 + t1015 * t512 - t1117;
t490 = -pkin(2) * t541 + pkin(8) * t538 + t1009 * t515 + t1014 * t528;
t489 = -t1010 * t499 + t1015 * t503 - t1117;
t488 = -pkin(8) * t522 - t1009 * t510 + t1014 * t493;
t487 = -pkin(1) * t501 - pkin(2) * t522 + pkin(3) * t664 - pkin(9) * t530 - t1008 * t524 - t1013 * t517;
t486 = -pkin(2) * t529 + pkin(8) * t523 + t1009 * t493 + t1014 * t510;
t485 = -pkin(7) * t513 - t1010 * t490 + t1015 * t496;
t484 = -pkin(7) * t501 - t1010 * t486 + t1015 * t488;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t981, -t982, 0, t943, 0, 0, 0, 0, 0, 0, t923, t924, t936, t868, 0, 0, 0, 0, 0, 0, t786, t790, t737, t711, 0, 0, 0, 0, 0, 0, t663, t666, t647, t567, 0, 0, 0, 0, 0, 0, t570, t577, t546, t505, 0, 0, 0, 0, 0, 0, t570, t577, t546, t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t982, -t981, 0, -t1031, 0, 0, 0, 0, 0, 0, t921, t922, t935, t867, 0, 0, 0, 0, 0, 0, t785, t789, t736, t710, 0, 0, 0, 0, 0, 0, t662, t665, t646, t566, 0, 0, 0, 0, 0, 0, t569, t576, t545, t504, 0, 0, 0, 0, 0, 0, t569, t576, t545, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t944, t945, 0, t899, 0, 0, 0, 0, 0, 0, t811, t827, t765, t718, 0, 0, 0, 0, 0, 0, t690, t695, t676, t602, 0, 0, 0, 0, 0, 0, t599, t605, t559, t513, 0, 0, 0, 0, 0, 0, t599, t605, t559, t501; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t982, 0, -t981, 0, t1032, -t964, t1031, pkin(6) * t1031, t1016 * t954 - t1034, -t1011 * t984 + t1016 * t932, t1010 * t1059 + t1016 * t948, t1016 * t953 + t1034, t1000 * t1011 + t1016 * t946, qJDD(2) * t1011 + t1016 * t973, -pkin(6) * t921 - t1011 * t907 + t1016 * t914, -pkin(6) * t922 - t1011 * t908 + t1016 * t915, -pkin(6) * t935 - t1016 * t899, -pkin(6) * t867 + (pkin(1) * t1011 - pkin(7) * t1016) * t899, t1016 * t816 + t1053, -t1011 * t930 + t1016 * t766, -t1011 * t879 + t1016 * t834, t1016 * t815 - t1053, -t1011 * t875 + t1016 * t835, t1011 * t1057 + t1016 * t853, -pkin(6) * t785 - t1011 * t732 + t1016 * t716, -pkin(6) * t789 - t1011 * t746 + t1016 * t720, -pkin(6) * t736 - t1011 * t721 + t1016 * t642, -pkin(6) * t710 - t1011 * t675 + t1016 * t643, -t1011 * t832 + t1016 * t724, -t1011 * t772 + t1016 * t679, -t1011 * t817 + t1016 * t700, -t1011 * t830 + t1016 * t723, -t1011 * t818 + t1016 * t701, -t1011 * t854 + t1016 * t760, -pkin(6) * t662 - t1011 * t623 + t1016 * t554, -pkin(6) * t665 - t1011 * t627 + t1016 * t555, -pkin(6) * t646 - t1011 * t590 + t1016 * t547, -pkin(6) * t566 - t1011 * t551 + t1016 * t525, t584, t550, t587, t583, t588, t641, -t1011 * t533 + t1016 * t506 - t1119, -t1011 * t535 + t1016 * t507 - t1118, -t1011 * t509 + t1016 * t491 - t1120, -pkin(6) * t504 - t1011 * t492 + t1016 * t485, t584, t550, t587, t583, t588, t641, -t1011 * t520 + t1016 * t497 - t1119, -t1011 * t527 + t1016 * t498 - t1118, -t1011 * t500 + t1016 * t489 - t1120, -pkin(6) * t494 - t1011 * t487 + t1016 * t484; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t981, 0, t982, 0, t964, t1032, t943, pkin(6) * t943, t1011 * t954 + t1033, t1011 * t932 + t1016 * t984, -t1010 * t1058 + t1011 * t948, t1011 * t953 - t1033, -t1000 * t1016 + t1011 * t946, -qJDD(2) * t1016 + t1011 * t973, pkin(6) * t923 + t1011 * t914 + t1016 * t907, pkin(6) * t924 + t1011 * t915 + t1016 * t908, pkin(6) * t936 - t1011 * t899, pkin(6) * t868 + (-pkin(1) * t1016 - pkin(7) * t1011) * t899, t1011 * t816 - t1050, t1011 * t766 + t1016 * t930, t1011 * t834 + t1016 * t879, t1011 * t815 + t1050, t1011 * t835 + t1016 * t875, t1011 * t853 - t1016 * t1057, pkin(6) * t786 + t1011 * t716 + t1016 * t732, pkin(6) * t790 + t1011 * t720 + t1016 * t746, pkin(6) * t737 + t1011 * t642 + t1016 * t721, pkin(6) * t711 + t1011 * t643 + t1016 * t675, t1011 * t724 + t1016 * t832, t1011 * t679 + t1016 * t772, t1011 * t700 + t1016 * t817, t1011 * t723 + t1016 * t830, t1011 * t701 + t1016 * t818, t1011 * t760 + t1016 * t854, pkin(6) * t663 + t1011 * t554 + t1016 * t623, pkin(6) * t666 + t1011 * t555 + t1016 * t627, pkin(6) * t647 + t1011 * t547 + t1016 * t590, pkin(6) * t567 + t1011 * t525 + t1016 * t551, t582, t549, t585, t581, t586, t640, t1011 * t506 + t1016 * t533 + t568, t1011 * t507 + t1016 * t535 + t575, t1011 * t491 + t1016 * t509 + t544, pkin(6) * t505 + t1011 * t485 + t1016 * t492, t582, t549, t585, t581, t586, t640, t1011 * t497 + t1016 * t520 + t568, t1011 * t498 + t1016 * t527 + t575, t1011 * t489 + t1016 * t500 + t544, pkin(6) * t495 + t1011 * t484 + t1016 * t487; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t987, t988, 0, 0, (t977 + t1040) * t1010, t1010 * t979 + t1015 * t976, t1015 * t989 + t1087, (t978 - t1041) * t1015, t1010 * t991 + t1072, 0, pkin(1) * t979 + pkin(7) * t947 + t1073, -pkin(1) * t976 + pkin(7) * t949 - t1088, pkin(1) * t983 + pkin(7) * t980 + t901, pkin(1) * t970 + pkin(7) * t901, t1010 * t872 + t1015 * t871, t1010 * t825 + t1015 * t823, t1010 * t884 + t1015 * t882, t1010 * t870 + t1015 * t869, t1010 * t885 + t1015 * t883, t1010 * t917 + t1015 * t916, -pkin(1) * t874 + pkin(7) * t812 + t1010 * t836 + t1015 * t791, -pkin(1) * t878 + pkin(7) * t828 + t1010 * t844 + t1015 * t798, -pkin(1) * t911 + pkin(7) * t767 + t1010 * t727 + t1015 * t722, pkin(1) * t912 + pkin(7) * t719 - pkin(8) * t1089 + t1015 * t768, t1010 * t795 + t1015 * t793, t1010 * t741 + t1015 * t740, t1010 * t763 + t1015 * t761, t1010 * t794 + t1015 * t792, t1010 * t764 + t1015 * t762, t1010 * t822 + t1015 * t821, -pkin(1) * t800 + pkin(7) * t691 + t1010 * t635 + t1015 * t626, -pkin(1) * t806 + pkin(7) * t696 + t1010 * t636 + t1015 * t628, -pkin(1) * t773 + pkin(7) * t677 + t1010 * t614 + t1015 * t601, -pkin(1) * t673 + pkin(7) * t603 + t1010 * t573 + t1015 * t556, t617, t562, t609, t616, t610, t671, t1010 * t534 + t1015 * t531 + t1103, t1010 * t536 + t1015 * t532 + t1102, t1010 * t512 + t1015 * t508 + t1104, -pkin(1) * t541 + pkin(7) * t514 + t1010 * t496 + t1015 * t490, t617, t562, t609, t616, t610, t671, t1010 * t518 + t1015 * t516 + t1103, t1010 * t521 + t1015 * t519 + t1102, t1010 * t503 + t1015 * t499 + t1104, -pkin(1) * t529 + pkin(7) * t502 + t1010 * t488 + t1015 * t486;];
tauB_reg  = t1;
