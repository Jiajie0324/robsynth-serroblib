% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP3_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP3_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP3_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP3_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:09:30
% EndTime: 2019-03-10 01:09:39
% DurationCPUTime: 2.77s
% Computational Cost: add. (5339->283), mult. (11943->460), div. (0->0), fcn. (11414->8), ass. (0->174)
t170 = sin(qJ(3));
t171 = sin(qJ(2));
t174 = cos(qJ(3));
t175 = cos(qJ(2));
t135 = t170 * t175 + t174 * t171;
t173 = cos(qJ(4));
t164 = qJD(4) * t173;
t169 = sin(qJ(4));
t133 = t170 * t171 - t174 * t175;
t249 = qJD(2) + qJD(3);
t93 = t249 * t133;
t236 = t169 * t93;
t250 = t135 * t164 - t236;
t157 = pkin(2) * t170 + pkin(9);
t243 = -pkin(10) - t157;
t126 = t243 * t169;
t165 = t173 * pkin(10);
t127 = t157 * t173 + t165;
t168 = sin(qJ(5));
t172 = cos(qJ(5));
t222 = t168 * t126 + t172 * t127;
t247 = -pkin(9) - pkin(10);
t147 = t247 * t169;
t149 = pkin(9) * t173 + t165;
t221 = t168 * t147 + t172 * t149;
t223 = t172 * t173;
t226 = t168 * t169;
t132 = -t223 + t226;
t167 = t173 ^ 2;
t219 = t169 ^ 2 - t167;
t186 = t219 * qJD(4);
t211 = qJD(4) + qJD(5);
t248 = -pkin(8) - pkin(7);
t246 = pkin(2) * t174;
t245 = pkin(4) * t133;
t244 = pkin(4) * t172;
t148 = t248 * t171;
t150 = t248 * t175;
t100 = t148 * t170 - t150 * t174;
t202 = qJD(2) * t248;
t140 = t171 * t202;
t183 = t175 * t202;
t63 = t100 * qJD(3) + t170 * t140 - t174 * t183;
t31 = t250 * pkin(4) + t63;
t228 = t135 * t169;
t99 = -t148 * t174 - t170 * t150;
t71 = pkin(4) * t228 + t99;
t225 = t168 * t173;
t134 = t169 * t172 + t225;
t92 = t211 * t134;
t242 = t31 * t132 + t71 * t92;
t214 = qJD(5) * t172;
t91 = -t172 * t164 - t173 * t214 + t211 * t226;
t241 = t31 * t134 - t71 * t91;
t161 = -pkin(2) * t175 - pkin(1);
t86 = t133 * pkin(3) - t135 * pkin(9) + t161;
t190 = -t100 * t169 + t173 * t86;
t227 = t135 * t173;
t38 = -pkin(10) * t227 + t190 + t245;
t95 = t173 * t100;
t238 = t169 * t86 + t95;
t46 = -pkin(10) * t228 + t238;
t45 = t172 * t46;
t240 = t168 * t38 + t45;
t239 = t99 * t164 + t63 * t169;
t237 = t135 * t93;
t235 = t173 * t93;
t216 = qJD(4) * t169;
t162 = pkin(4) * t216;
t218 = qJD(3) * t170;
t163 = pkin(2) * t218;
t143 = t163 + t162;
t160 = -pkin(4) * t173 - pkin(3);
t146 = t160 - t246;
t234 = t143 * t132 + t146 * t92;
t233 = t143 * t134 - t146 * t91;
t232 = t132 * t162 + t160 * t92;
t231 = t134 * t162 - t160 * t91;
t230 = -t92 * qJ(6) - t132 * qJD(6);
t229 = qJ(6) * t134;
t224 = t169 * t173;
t159 = -pkin(3) - t246;
t220 = t159 * t164 + t169 * t163;
t217 = qJD(3) * t174;
t215 = qJD(5) * t168;
t213 = t171 * qJD(2);
t212 = t175 * qJD(2);
t210 = -0.2e1 * pkin(1) * qJD(2);
t209 = pkin(2) * t213;
t208 = pkin(3) * t216;
t207 = pkin(3) * t164;
t206 = pkin(2) * t217;
t205 = pkin(4) * t215;
t204 = pkin(4) * t214;
t203 = t135 * t226;
t89 = t99 * t216;
t201 = qJD(4) * t247;
t200 = t135 * t216;
t198 = t169 * t164;
t195 = -t168 * t46 + t172 * t38;
t79 = t135 * t223 - t203;
t16 = pkin(5) * t133 - qJ(6) * t79 + t195;
t78 = t134 * t135;
t18 = -qJ(6) * t78 + t240;
t23 = -t132 * t93 + t92 * t135;
t94 = t249 * t135;
t57 = pkin(3) * t94 + pkin(9) * t93 + t209;
t62 = -t174 * t140 - t148 * t217 - t150 * t218 - t170 * t183;
t194 = t169 * t62 + t173 * t57;
t10 = pkin(10) * t235 + t94 * pkin(4) + (-t95 + (pkin(10) * t135 - t86) * t169) * qJD(4) + t194;
t19 = t100 * t216 - t86 * t164 - t169 * t57 + t173 * t62;
t15 = -pkin(10) * t250 - t19;
t196 = t172 * t10 - t168 * t15;
t6 = -t240 * qJD(5) + t196;
t2 = t94 * pkin(5) + t23 * qJ(6) - t79 * qJD(6) + t6;
t24 = -t93 * t225 - t168 * t200 - qJD(5) * t203 + (t211 * t227 - t236) * t172;
t5 = -t168 * t10 - t172 * t15 - t38 * t214 + t46 * t215;
t4 = -qJ(6) * t24 - qJD(6) * t78 - t5;
t197 = -t4 * t132 - t2 * t134 + t16 * t91 - t18 * t92;
t77 = pkin(5) * t92 + t162;
t193 = qJD(4) * t243;
t184 = t173 * t206;
t103 = t169 * t193 + t184;
t185 = t169 * t206;
t104 = t173 * t193 - t185;
t39 = -t172 * t103 - t168 * t104 - t126 * t214 + t127 * t215;
t25 = -t39 + t230;
t182 = t91 * qJ(6) - t134 * qJD(6);
t40 = -t222 * qJD(5) - t168 * t103 + t172 * t104;
t26 = t182 + t40;
t188 = t172 * t126 - t127 * t168;
t66 = t188 - t229;
t125 = t132 * qJ(6);
t67 = -t125 + t222;
t192 = -t25 * t132 - t26 * t134 + t66 * t91 - t67 * t92;
t141 = t169 * t201;
t142 = t173 * t201;
t60 = -t172 * t141 - t168 * t142 - t147 * t214 + t149 * t215;
t33 = -t60 + t230;
t61 = -t221 * qJD(5) - t168 * t141 + t172 * t142;
t34 = t182 + t61;
t187 = t172 * t147 - t149 * t168;
t74 = t187 - t229;
t75 = -t125 + t221;
t191 = -t33 * t132 - t34 * t134 + t74 * t91 - t75 * t92;
t189 = -0.4e1 * t135 * t224;
t181 = t133 * t157 - t135 * t159;
t106 = pkin(5) * t132 + t160;
t180 = t159 * t216 - t173 * t163;
t179 = t133 * t216 - t173 * t94;
t177 = t200 + t235;
t176 = -t157 * t94 - t159 * t93 + (-t133 * t174 + t135 * t170) * qJD(3) * pkin(2);
t158 = pkin(5) + t244;
t152 = 0.2e1 * t198;
t131 = -0.2e1 * t186;
t130 = t135 ^ 2;
t105 = t106 - t246;
t88 = pkin(5) * t91;
t70 = t163 + t77;
t69 = -0.2e1 * t134 * t91;
t68 = 0.2e1 * t133 * t94;
t65 = t133 * t164 + t169 * t94;
t54 = -t135 * t186 - t93 * t224;
t47 = pkin(5) * t78 + t71;
t44 = -t132 * t94 - t133 * t92;
t43 = -t133 * t91 + t134 * t94;
t42 = qJD(4) * t189 + t219 * t93;
t41 = 0.2e1 * t132 * t91 - 0.2e1 * t134 * t92;
t32 = t158 * t91 + (-t168 * t92 + (-t132 * t172 + t134 * t168) * qJD(5)) * pkin(4);
t20 = -t238 * qJD(4) + t194;
t17 = -t134 * t23 - t79 * t91;
t12 = t24 * pkin(5) + t31;
t7 = t132 * t23 - t134 * t24 + t78 * t91 - t79 * t92;
t1 = [0, 0, 0, 0.2e1 * t171 * t212, 0.2e1 * (-t171 ^ 2 + t175 ^ 2) * qJD(2), 0, 0, 0, t171 * t210, t175 * t210, -0.2e1 * t237, 0.2e1 * t133 * t93 - 0.2e1 * t135 * t94, 0, 0, 0, 0.2e1 * t133 * t209 + 0.2e1 * t161 * t94, 0.2e1 * t135 * t209 - 0.2e1 * t161 * t93, -0.2e1 * t130 * t198 - 0.2e1 * t167 * t237, 0.2e1 * t130 * t186 - t93 * t189, -0.2e1 * t177 * t133 + 0.2e1 * t94 * t227, -0.2e1 * t133 * t250 - 0.2e1 * t94 * t228, t68, 0.2e1 * t20 * t133 + 0.2e1 * t239 * t135 + 0.2e1 * t190 * t94 - 0.2e1 * t99 * t236, 0.2e1 * t19 * t133 - 0.2e1 * t238 * t94 - 0.2e1 * t99 * t235 + 0.2e1 * (t63 * t173 - t89) * t135, -0.2e1 * t79 * t23, 0.2e1 * t23 * t78 - 0.2e1 * t24 * t79, -0.2e1 * t133 * t23 + 0.2e1 * t79 * t94, -0.2e1 * t133 * t24 - 0.2e1 * t78 * t94, t68, 0.2e1 * t6 * t133 + 0.2e1 * t195 * t94 + 0.2e1 * t71 * t24 + 0.2e1 * t31 * t78, 0.2e1 * t5 * t133 - 0.2e1 * t71 * t23 - 0.2e1 * t240 * t94 + 0.2e1 * t31 * t79, 0.2e1 * t16 * t23 - 0.2e1 * t18 * t24 - 0.2e1 * t2 * t79 - 0.2e1 * t4 * t78, 0.2e1 * t12 * t47 + 0.2e1 * t16 * t2 + 0.2e1 * t18 * t4; 0, 0, 0, 0, 0, t212, -t213, 0, -pkin(7) * t212, pkin(7) * t213, 0, 0, -t93, -t94, 0, -t63, t62, t54, t42, t65, -t179, 0, t89 + (-t181 * qJD(4) - t63) * t173 + t176 * t169, t176 * t173 + t181 * t216 + t239, t17, t7, t43, t44, 0, t40 * t133 + t143 * t78 + t146 * t24 + t188 * t94 + t242, t39 * t133 + t143 * t79 - t146 * t23 - t222 * t94 + t241, t23 * t66 - t24 * t67 - t25 * t78 - t26 * t79 + t197, t105 * t12 + t16 * t26 + t18 * t25 + t2 * t66 + t4 * t67 + t47 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t163, -0.2e1 * t206, t152, t131, 0, 0, 0, 0.2e1 * t180, 0.2e1 * t220, t69, t41, 0, 0, 0, 0.2e1 * t234, 0.2e1 * t233, 0.2e1 * t192, 0.2e1 * t105 * t70 + 0.2e1 * t25 * t67 + 0.2e1 * t26 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t94, 0, -t63, t62, t54, t42, t65, -t179, 0, t89 + (pkin(3) * t93 - pkin(9) * t94) * t169 + (-t63 + (-pkin(3) * t135 - pkin(9) * t133) * qJD(4)) * t173, t177 * pkin(3) + t179 * pkin(9) + t239, t17, t7, t43, t44, 0, t61 * t133 + t160 * t24 + t162 * t78 + t187 * t94 + t242, t60 * t133 - t160 * t23 + t162 * t79 - t221 * t94 + t241, t23 * t74 - t24 * t75 - t33 * t78 - t34 * t79 + t197, t106 * t12 + t16 * t34 + t18 * t33 + t2 * t74 + t4 * t75 + t47 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t206, t152, t131, 0, 0, 0, t180 - t208, -t207 + t220, t69, t41, 0, 0, 0, t232 + t234, t231 + t233, t191 + t192, t105 * t77 + t106 * t70 + t25 * t75 + t26 * t74 + t33 * t67 + t34 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, t131, 0, 0, 0, -0.2e1 * t208, -0.2e1 * t207, t69, t41, 0, 0, 0, 0.2e1 * t232, 0.2e1 * t231, 0.2e1 * t191, 0.2e1 * t106 * t77 + 0.2e1 * t33 * t75 + 0.2e1 * t34 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, -t250, t94, t20, t19, 0, 0, -t23, -t24, t94, t94 * t244 + (-t45 + (-t38 - t245) * t168) * qJD(5) + t196 (-t133 * t214 - t168 * t94) * pkin(4) + t5, t158 * t23 + (-t168 * t24 + (t168 * t79 - t172 * t78) * qJD(5)) * pkin(4), t2 * t158 + (t168 * t4 + (-t16 * t168 + t172 * t18) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, -t216, 0, -t157 * t164 - t185, t157 * t216 - t184, 0, 0, -t91, -t92, 0, t40, t39, t32, t26 * t158 + (t168 * t25 + (-t168 * t66 + t172 * t67) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, -t216, 0, -pkin(9) * t164, pkin(9) * t216, 0, 0, -t91, -t92, 0, t61, t60, t32, t34 * t158 + (t168 * t33 + (-t168 * t74 + t172 * t75) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t205, -0.2e1 * t204, 0, 0.2e1 * (-t158 + t244) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t24, t94, t6, t5, pkin(5) * t23, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t91, -t92, 0, t40, t39, t88, t26 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t91, -t92, 0, t61, t60, t88, t34 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205, -t204, 0, -pkin(5) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
