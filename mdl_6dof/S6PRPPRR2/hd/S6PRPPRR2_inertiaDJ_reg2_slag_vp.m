% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPPRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPPRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPPRR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:20:01
% EndTime: 2019-03-08 19:20:05
% DurationCPUTime: 1.33s
% Computational Cost: add. (1000->144), mult. (2632->268), div. (0->0), fcn. (2573->10), ass. (0->104)
t39 = cos(pkin(11));
t103 = sin(qJ(2));
t95 = sin(pkin(11));
t96 = sin(pkin(6));
t59 = t96 * t95;
t54 = t103 * t59;
t104 = cos(qJ(2));
t63 = t96 * t104;
t55 = qJD(2) * t63;
t21 = -qJD(2) * t54 + t39 * t55;
t62 = t96 * t103;
t23 = t104 * t59 + t39 * t62;
t10 = t23 * t21;
t111 = t23 * qJD(2);
t48 = -t39 * t63 + t54;
t113 = 0.2e1 * t111 * t48 + 0.2e1 * t10;
t43 = cos(qJ(6));
t44 = cos(qJ(5));
t108 = pkin(5) * t44;
t42 = sin(qJ(5));
t67 = pkin(9) * t42 + t108;
t112 = t43 * t67;
t41 = sin(qJ(6));
t35 = t41 ^ 2;
t37 = t43 ^ 2;
t99 = t35 + t37;
t100 = t35 - t37;
t70 = qJD(6) * t100;
t40 = cos(pkin(6));
t14 = t40 * t44 + t48 * t42;
t8 = -t14 * t41 + t23 * t43;
t9 = t14 * t43 + t23 * t41;
t64 = t41 * t8 - t43 * t9;
t7 = t14 * qJD(5) - t111 * t44;
t110 = t64 * qJD(5) + t7;
t109 = 2 * qJD(4);
t47 = t48 * t44;
t13 = t40 * t42 - t47;
t107 = t13 * t7;
t106 = t42 * pkin(5);
t105 = t7 * t44;
t73 = -t39 * pkin(2) - pkin(3);
t32 = -pkin(8) + t73;
t102 = t41 * t32;
t101 = t43 * t44;
t36 = t42 ^ 2;
t38 = t44 ^ 2;
t98 = t36 - t38;
t97 = t36 + t38;
t94 = qJD(5) * t41;
t93 = qJD(5) * t42;
t92 = qJD(5) * t43;
t91 = qJD(5) * t44;
t90 = qJD(6) * t41;
t89 = qJD(6) * t43;
t88 = qJD(6) * t44;
t87 = -0.2e1 * pkin(5) * qJD(6);
t86 = t42 * t102;
t85 = t44 * t102;
t84 = t43 * t42 * t32;
t33 = t95 * pkin(2) + qJ(4);
t83 = t33 * t109;
t82 = qJD(6) * t32 * t38;
t81 = t42 * t90;
t80 = t41 * t88;
t79 = t43 * t88;
t78 = t41 * t89;
t77 = t32 * t93;
t76 = t42 * t92;
t75 = t42 * t91;
t74 = t32 * t91;
t72 = t99 * t42;
t71 = t99 * t44;
t69 = t41 * t76;
t68 = t38 * t78;
t66 = -t44 * pkin(9) + t106;
t65 = t41 * t9 + t43 * t8;
t53 = t33 + t66;
t52 = t43 * t53;
t11 = t52 - t86;
t12 = t41 * t53 + t84;
t61 = t11 * t43 + t12 * t41;
t60 = t11 * t41 - t12 * t43;
t58 = t23 * qJD(4) + t21 * t33;
t57 = t13 * t89 + t7 * t41;
t56 = t13 * t90 - t7 * t43;
t6 = -qJD(5) * t47 - t111 * t42 + t40 * t93;
t2 = -t9 * qJD(6) + t21 * t43 + t6 * t41;
t3 = t8 * qJD(6) + t21 * t41 - t6 * t43;
t51 = -t65 * qJD(6) - t2 * t41 + t3 * t43;
t4 = t32 * t81 - qJD(6) * t52 - t41 * (t67 * qJD(5) + qJD(4)) - t43 * t74;
t5 = t43 * qJD(4) - t12 * qJD(6) + (-t85 + t112) * qJD(5);
t50 = -t61 * qJD(6) - t4 * t43 - t5 * t41;
t1 = -t6 * t42 - t105 + (t13 * t42 + t14 * t44) * qJD(5);
t49 = qJD(5) * t13 + t51;
t34 = qJD(5) * t36;
t31 = 0.2e1 * t75;
t28 = t41 * t93 - t79;
t27 = t41 * t91 + t42 * t89;
t26 = t76 + t80;
t25 = -t43 * t91 + t81;
t16 = t44 * t70 + t69;
t15 = (-0.1e1 + t99) * t75;
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t14 * t6 + 0.2e1 * t10 + 0.2e1 * t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t8 * t2 + 0.2e1 * t9 * t3 + 0.2e1 * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t62, -t55, 0, 0, 0, 0, 0, 0, 0, 0, -t111, -t21, 0 (-t111 * t39 + t21 * t95) * pkin(2), 0, 0, 0, 0, 0, 0, 0, t111, t21, t111 * t73 + t58, 0, 0, 0, 0, 0, 0, t21 * t42 + t23 * t91, t21 * t44 - t23 * t93, -t1, t1 * t32 + t58, 0, 0, 0, 0, 0, 0 (-t13 * t94 + t2) * t42 + (qJD(5) * t8 + t57) * t44 (-t13 * t92 - t3) * t42 + (-qJD(5) * t9 - t56) * t44, t65 * t93 + (t64 * qJD(6) - t2 * t43 - t3 * t41) * t44, t2 * t11 + t3 * t12 - t9 * t4 + t8 * t5 + (t13 * t93 - t105) * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t83, -0.2e1 * t75, -0.2e1 * t38 * qJD(5) + 0.2e1 * t34, 0, t31, 0, 0, 0.2e1 * qJD(4) * t42 + 0.2e1 * t33 * t91, 0.2e1 * qJD(4) * t44 - 0.2e1 * t33 * t93, 0, t83, -0.2e1 * t37 * t75 - 0.2e1 * t68, 0.2e1 * t38 * t70 + 0.4e1 * t44 * t69, -0.2e1 * t42 * t80 - 0.2e1 * t98 * t92, -0.2e1 * t35 * t75 + 0.2e1 * t68, -0.2e1 * t42 * t79 + 0.2e1 * t98 * t94, t31, -0.2e1 * t43 * t82 + 0.2e1 * t5 * t42 + 0.2e1 * (t11 + 0.2e1 * t86) * t91, 0.2e1 * t41 * t82 + 0.2e1 * t4 * t42 + 0.2e1 * (-t12 + 0.2e1 * t84) * t91, 0.2e1 * t61 * t93 + 0.2e1 * (t60 * qJD(6) + t4 * t41 - t43 * t5) * t44, -0.2e1 * t32 ^ 2 * t75 + 0.2e1 * t11 * t5 - 0.2e1 * t12 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * t42 - t6 * t44 + (t13 * t44 - t14 * t42) * qJD(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, t110 * t42 + t49 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * t44 + (t98 * t32 + t60 * t42) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110 * t44 + t49 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97 * t89, t97 * t90, 0, -t60 * t91 + (t50 - 0.2e1 * t74) * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 + (-t99 * t98 - t38) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t7, t6, 0, 0, 0, 0, 0, 0, 0, 0, t56, t57, t51, -t7 * pkin(5) + t51 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, 0, -t91, 0, -t77, -t74, 0, 0, -t16, t100 * t93 - 0.4e1 * t44 * t78, t27, t16, -t25, 0 (-t85 - t112) * qJD(6) + (t66 * t41 - t84) * qJD(5) (-t32 * t101 + t67 * t41) * qJD(6) + (-pkin(9) * t101 + (t43 * pkin(5) + t102) * t42) * qJD(5), t50, -pkin(5) * t77 + t50 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t91, t93, 0, 0, 0, 0, 0, 0, 0, 0, t25, t27, -qJD(5) * t72 (-pkin(9) * t72 - t108) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t91, 0, 0, 0, 0, 0, 0, 0, 0, -t26, t28, qJD(5) * t71 (pkin(9) * t71 - t106) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t78, -0.2e1 * t70, 0, -0.2e1 * t78, 0, 0, t41 * t87, t43 * t87, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, 0, t28, t91, t5, t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t90, 0, -pkin(9) * t89, pkin(9) * t90, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t17;
