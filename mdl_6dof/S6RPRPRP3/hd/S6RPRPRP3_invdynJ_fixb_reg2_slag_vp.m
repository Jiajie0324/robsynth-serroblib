% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:09:44
% EndTime: 2019-03-09 03:09:54
% DurationCPUTime: 6.33s
% Computational Cost: add. (7323->531), mult. (15586->660), div. (0->0), fcn. (10720->14), ass. (0->265)
t227 = cos(qJ(3));
t214 = g(3) * t227;
t225 = sin(qJ(3));
t216 = qJ(1) + pkin(9);
t209 = cos(t216);
t207 = sin(t216);
t370 = g(2) * t207;
t283 = g(1) * t209 + t370;
t247 = t283 * t225 - t214;
t220 = sin(pkin(9));
t201 = pkin(1) * t220 + pkin(7);
t177 = t201 * qJD(1);
t321 = qJD(3) * t227;
t175 = t201 * qJDD(1);
t396 = qJD(2) * qJD(3) + t175;
t290 = -t227 * qJDD(2) + t177 * t321 + t225 * t396;
t349 = qJDD(3) * pkin(3);
t74 = qJDD(4) + t290 - t349;
t233 = t74 - t247;
t219 = sin(pkin(10));
t366 = pkin(8) + qJ(4);
t173 = t366 * t219;
t221 = cos(pkin(10));
t174 = t366 * t221;
t224 = sin(qJ(5));
t376 = cos(qJ(5));
t105 = -t224 * t173 + t174 * t376;
t212 = t227 * qJDD(1);
t319 = qJD(1) * qJD(3);
t301 = t225 * t319;
t383 = t301 - t212;
t155 = qJDD(5) + t383;
t215 = pkin(10) + qJ(5);
t206 = sin(t215);
t400 = -t105 * t155 - t206 * t247;
t217 = t225 ^ 2;
t218 = t227 ^ 2;
t327 = t217 - t218;
t380 = -t225 * t212 + t319 * t327;
t399 = t221 * t380;
t323 = qJD(3) * t221;
t326 = qJD(1) * t225;
t151 = -t219 * t326 + t323;
t324 = qJD(3) * t219;
t152 = t221 * t326 + t324;
t93 = -t376 * t151 + t152 * t224;
t398 = t93 ^ 2;
t325 = qJD(1) * t227;
t195 = -qJD(5) + t325;
t397 = t195 * t93;
t157 = t219 * t376 + t224 * t221;
t141 = t157 * qJD(5);
t253 = t227 * t157;
t331 = qJD(1) * t253 - t141;
t312 = t376 * t221;
t289 = t227 * t312;
t310 = t219 * t325;
t303 = qJD(5) * t376;
t320 = qJD(5) * t224;
t384 = -t219 * t320 + t221 * t303;
t330 = qJD(1) * t289 - t224 * t310 - t384;
t202 = t221 * pkin(4) + pkin(3);
t291 = t227 * t202 + t366 * t225;
t316 = t225 * qJDD(1);
t393 = t227 * t319 + t316;
t328 = t393 * t219;
t271 = qJDD(3) * t221 - t328;
t395 = t151 * t321 + t271 * t225;
t128 = t157 * t225;
t80 = qJD(3) * t253 + t225 * t384;
t270 = -t155 * t128 + t80 * t195;
t322 = qJD(3) * t225;
t317 = qJDD(3) * t219;
t117 = t221 * t393 + t317;
t260 = t224 * t151 + t152 * t376;
t39 = qJD(5) * t260 + t224 * t117 - t376 * t271;
t295 = -t227 * t39 + t93 * t322;
t394 = t270 - t295;
t38 = -t376 * t117 - t151 * t303 + t152 * t320 - t224 * t271;
t296 = t227 * t38 + t260 * t322;
t258 = -t224 * t219 + t312;
t129 = t258 * t225;
t308 = t219 * t321;
t79 = -qJD(3) * t289 + t141 * t225 + t224 * t308;
t362 = t129 * t155 + t79 * t195;
t392 = t362 - t296;
t365 = -t129 * t39 + t79 * t93;
t389 = -t38 * t128 + t260 * t80;
t391 = t389 - t365;
t390 = t389 + t365;
t378 = t260 ^ 2;
t339 = t221 * t227;
t267 = pkin(4) * t225 - pkin(8) * t339;
t160 = t225 * t177;
t132 = qJD(2) * t227 - t160;
t276 = pkin(3) * t225 - qJ(4) * t227;
t162 = t276 * qJD(1);
t86 = -t132 * t219 + t221 * t162;
t55 = qJD(1) * t267 + t86;
t87 = t221 * t132 + t219 * t162;
t66 = -pkin(8) * t310 + t87;
t359 = -qJD(4) * t157 - qJD(5) * t105 + t224 * t66 - t376 * t55;
t352 = t260 * t195;
t388 = t39 + t352;
t351 = pkin(1) * qJDD(1);
t257 = t225 * t117 + t152 * t321;
t387 = t219 * t257;
t386 = t227 * t271;
t385 = t270 + t295;
t382 = t39 * pkin(5) + t38 * qJ(6) - t260 * qJD(6);
t381 = -t155 * t258 + t195 * t331 - t326 * t93;
t277 = pkin(3) * t227 + qJ(4) * t225;
t266 = -pkin(2) - t277;
t222 = cos(pkin(9));
t375 = pkin(1) * t222;
t144 = t266 - t375;
t131 = t221 * t144;
t76 = -pkin(8) * t221 * t225 + t131 + (-t201 * t219 - pkin(4)) * t227;
t101 = t219 * t144 + t201 * t339;
t341 = t219 * t225;
t85 = -pkin(8) * t341 + t101;
t357 = t224 * t76 + t376 * t85;
t137 = qJD(3) * t276 - qJD(4) * t225;
t309 = t201 * t322;
t90 = t221 * t137 + t219 * t309;
t64 = qJD(3) * t267 + t90;
t125 = t219 * t137;
t181 = t225 * t201;
t340 = t219 * t227;
t75 = t125 + (-pkin(8) * t340 - t181 * t221) * qJD(3);
t11 = -qJD(5) * t357 - t224 * t75 + t376 * t64;
t379 = -t157 * t39 - t258 * t38 + t260 * t331 + t330 * t93;
t374 = pkin(4) * t219;
t373 = pkin(5) * t155;
t372 = g(1) * t207;
t369 = g(2) * t209;
t368 = g(3) * t225;
t367 = t260 * t93;
t133 = qJD(2) * t225 + t177 * t227;
t106 = pkin(4) * t310 + t133;
t363 = -pkin(5) * t331 + qJ(6) * t330 - qJD(6) * t157 - t106;
t33 = t224 * t55 + t376 * t66;
t314 = t225 * qJDD(2) + t227 * t396;
t68 = qJDD(3) * qJ(4) + (qJD(4) - t160) * qJD(3) + t314;
t77 = qJD(1) * t137 + qJDD(1) * t144;
t35 = t219 * t77 + t221 * t68;
t27 = qJ(6) * t326 + t33;
t259 = -t173 * t376 - t224 * t174;
t72 = qJD(4) * t258 + qJD(5) * t259;
t361 = t72 - t27;
t360 = t72 - t33;
t358 = pkin(5) * t326 - t359;
t120 = qJD(3) * qJ(4) + t133;
t123 = t144 * qJD(1);
t58 = -t120 * t219 + t221 * t123;
t49 = -pkin(4) * t325 - pkin(8) * t152 + t58;
t59 = t221 * t120 + t219 * t123;
t52 = pkin(8) * t151 + t59;
t16 = t224 * t49 + t376 * t52;
t356 = t16 * t195;
t350 = qJ(6) * t155;
t347 = t206 * t207;
t208 = cos(t215);
t346 = t208 * t225;
t345 = t208 * t227;
t344 = t209 * t225;
t343 = t209 * t227;
t230 = qJD(1) ^ 2;
t342 = t218 * t230;
t337 = t366 * t227;
t335 = t225 * t151;
t15 = -t224 * t52 + t376 * t49;
t333 = qJD(6) - t15;
t332 = t395 * t221;
t127 = pkin(4) * t308 + t201 * t321;
t298 = t219 * t212;
t329 = t218 * t219 * t319 + t225 * t298;
t136 = pkin(4) * t341 + t181;
t203 = -pkin(2) - t375;
t178 = qJD(1) * t203;
t176 = qJDD(1) * t203;
t315 = -t378 + t398;
t228 = cos(qJ(1));
t313 = t228 * pkin(1) + t209 * pkin(2) + t207 * pkin(7);
t311 = t152 * t325;
t305 = t195 * t326;
t304 = t217 * qJD(1) * t219;
t300 = t221 * t212;
t226 = sin(qJ(1));
t297 = -pkin(1) * t226 + t209 * pkin(7);
t34 = -t219 * t68 + t221 * t77;
t19 = pkin(4) * t383 - pkin(8) * t117 + t34;
t24 = pkin(8) * t271 + t35;
t294 = -t376 * t19 + t224 * t24 + t52 * t303 + t49 * t320;
t292 = -t117 * t227 + t152 * t322;
t287 = t227 * t301;
t186 = t225 * t372;
t286 = -g(2) * t344 + t186;
t113 = t208 * t209 + t227 * t347;
t115 = t206 * t343 - t207 * t208;
t285 = g(1) * t113 - g(2) * t115;
t114 = -t209 * t206 + t207 * t345;
t116 = t208 * t343 + t347;
t284 = g(1) * t114 - g(2) * t116;
t282 = -t369 + t372;
t281 = g(1) * t226 - g(2) * t228;
t280 = -t378 - t398;
t278 = t128 * t39 + t80 * t93;
t275 = pkin(5) * t208 + qJ(6) * t206;
t273 = -t34 * t219 + t35 * t221;
t272 = -t58 * t219 + t59 * t221;
t268 = qJD(1) * (-t151 + t323);
t40 = -t224 * t85 + t376 * t76;
t262 = t271 * pkin(4);
t3 = t224 * t19 + t376 * t24 + t49 * t303 - t320 * t52;
t10 = t224 * t64 + t76 * t303 - t320 * t85 + t376 * t75;
t255 = -t258 * t39 - t331 * t93;
t254 = -qJD(1) * t178 + t283;
t118 = -qJD(3) * pkin(3) + qJD(4) - t132;
t252 = g(1) * t208 * t344 - g(3) * t345 + t155 * t259 + t346 * t370;
t251 = -qJ(4) * t322 + (qJD(4) - t118) * t227;
t250 = t207 * t374 + t209 * t291 + t313;
t229 = qJD(3) ^ 2;
t249 = t201 * t229 + 0.2e1 * t176 + t369;
t248 = 0.2e1 * qJD(3) * t178 - qJDD(3) * t201;
t245 = -t227 * t283 - t368;
t244 = g(1) * t115 + g(2) * t113 + t206 * t368 - t294;
t243 = t38 - t397;
t88 = -pkin(4) * t151 + t118;
t239 = t209 * t374 + t297 + (-pkin(2) - t291) * t207;
t81 = -t177 * t322 + t314;
t238 = t290 * t225 + t81 * t227 + (-t132 * t227 - t133 * t225) * qJD(3);
t29 = pkin(5) * t93 - qJ(6) * t260 + t88;
t237 = t260 * t29 + qJDD(6) - t244;
t236 = -t105 * t39 + t259 * t38 - t72 * t93 + t245;
t235 = -g(1) * t116 - g(2) * t114 - g(3) * t346 + t3;
t234 = t39 - t352;
t51 = -t262 + t74;
t232 = -t262 + t233;
t193 = t225 * t230 * t227;
t169 = qJDD(3) * t227 - t225 * t229;
t168 = qJDD(3) * t225 + t227 * t229;
t145 = qJDD(1) * t218 - 0.2e1 * t287;
t103 = -t155 * t227 - t195 * t322;
t100 = -t201 * t340 + t131;
t91 = -t221 * t309 + t125;
t89 = -pkin(5) * t258 - qJ(6) * t157 - t202;
t53 = pkin(5) * t128 - qJ(6) * t129 + t136;
t48 = pkin(5) * t260 + qJ(6) * t93;
t37 = t227 * pkin(5) - t40;
t36 = -qJ(6) * t227 + t357;
t25 = t155 * t157 + t195 * t330 - t260 * t326;
t21 = pkin(5) * t80 + qJ(6) * t79 - qJD(6) * t129 + t127;
t20 = -t38 - t397;
t14 = -t195 * qJ(6) + t16;
t13 = t195 * pkin(5) + t333;
t12 = -t129 * t38 - t260 * t79;
t9 = -pkin(5) * t322 - t11;
t8 = qJ(6) * t322 - qJD(6) * t227 + t10;
t7 = -t157 * t38 - t260 * t330;
t6 = t296 + t362;
t5 = t51 + t382;
t2 = qJDD(6) + t294 - t373;
t1 = -qJD(6) * t195 + t3 + t350;
t4 = [0, 0, 0, 0, 0, qJDD(1), t281, g(1) * t228 + g(2) * t226, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t222 * t351 + t282, -0.2e1 * t220 * t351 + t283, 0 (t281 + (t220 ^ 2 + t222 ^ 2) * t351) * pkin(1), qJDD(1) * t217 + 0.2e1 * t287, -0.2e1 * t380, t168, t145, t169, 0, t248 * t225 + (-t249 + t372) * t227, t225 * t249 + t227 * t248 - t186 (t217 + t218) * t175 + t238 - t283, t176 * t203 - g(1) * (-pkin(2) * t207 + t297) - g(2) * t313 + t238 * t201, t257 * t221, t332 - t387, t292 + t399, -t395 * t219, -t386 + (-t304 + t335) * qJD(3) + t329, t145, -t283 * t219 + (-t201 * t271 + t74 * t219 + (t100 * qJD(1) + t58) * qJD(3)) * t225 + (-t90 * qJD(1) - t100 * qJDD(1) - t34 + t282 * t221 + (t118 * t219 - t151 * t201) * qJD(3)) * t227, -t283 * t221 + (t201 * t117 + t74 * t221 + (-qJD(1) * t101 - t59) * qJD(3)) * t225 + (t91 * qJD(1) + t101 * qJDD(1) + t35 - t282 * t219 + (t118 * t221 + t152 * t201) * qJD(3)) * t227, t91 * t151 + t101 * t271 - t90 * t152 - t100 * t117 + t186 + (-t219 * t59 - t221 * t58) * t321 + (-t35 * t219 - t34 * t221 - t369) * t225, t35 * t101 + t59 * t91 + t34 * t100 + t58 * t90 - g(1) * t297 - g(2) * (t209 * t277 + t313) - t266 * t372 + (t118 * t321 + t74 * t225) * t201, t12, -t391, t6, t278, t394, t103, -t11 * t195 + t127 * t93 + t128 * t51 + t136 * t39 + t15 * t322 + t155 * t40 + t227 * t294 + t80 * t88 + t284, t10 * t195 + t127 * t260 + t129 * t51 - t136 * t38 - t155 * t357 - t16 * t322 + t227 * t3 - t79 * t88 - t285, -t10 * t93 - t11 * t260 - t128 * t3 + t129 * t294 + t15 * t79 - t16 * t80 - t357 * t39 + t38 * t40 + t286, -g(1) * t239 - g(2) * t250 + t16 * t10 + t15 * t11 + t88 * t127 + t51 * t136 - t294 * t40 + t3 * t357, t12, t6, t391, t103, -t394, t278, t128 * t5 - t13 * t322 - t155 * t37 + t195 * t9 + t2 * t227 + t21 * t93 + t29 * t80 + t39 * t53 + t284, -t1 * t128 + t129 * t2 - t13 * t79 - t14 * t80 + t260 * t9 - t36 * t39 - t37 * t38 - t8 * t93 + t286, -t1 * t227 - t129 * t5 + t14 * t322 + t155 * t36 - t195 * t8 - t21 * t260 + t29 * t79 + t38 * t53 + t285, t1 * t36 + t14 * t8 + t5 * t53 + t29 * t21 + t2 * t37 + t13 * t9 - g(1) * (-pkin(5) * t114 - qJ(6) * t113 + t239) - g(2) * (pkin(5) * t116 + qJ(6) * t115 + t250); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t169, -t168, 0, t225 * t81 - t227 * t290 - g(3) + (-t132 * t225 + t133 * t227) * qJD(3), 0, 0, 0, 0, 0, 0, t386 + (-t304 - t335) * qJD(3) + t329, t292 - t399, t332 + t387, -t227 * t74 - g(3) + t273 * t225 + (t118 * t225 + t227 * t272) * qJD(3), 0, 0, 0, 0, 0, 0, t385, -t392, t390, t128 * t294 + t129 * t3 - t15 * t80 - t16 * t79 - t227 * t51 + t322 * t88 - g(3), 0, 0, 0, 0, 0, 0, t385, t390, t392, t1 * t129 + t128 * t2 + t13 * t80 - t14 * t79 - t227 * t5 + t29 * t322 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, t327 * t230, t316, t193, t212, qJDD(3), qJD(3) * t133 + t225 * t254 - t214 - t290, t368 + (t132 + t160) * qJD(3) + t254 * t227 - t314, 0, 0, t219 * t117 - t221 * t311, t219 * t271 + t117 * t221 + (-t221 * t151 + t219 * t152) * t325, -t298 + t221 * t342 + (-t152 + t324) * t326, t151 * t310 + t221 * t271, -t219 * t342 + t225 * t268 - t300, t193, qJ(4) * t298 - pkin(3) * t328 + t133 * t151 + (-t233 + t349) * t221 + (t219 * t251 - t58 * t225 + t86 * t227) * qJD(1), qJ(4) * t300 - pkin(3) * t117 - t133 * t152 + t233 * t219 + (t221 * t251 + t59 * t225 - t227 * t87) * qJD(1), -t87 * t151 + t86 * t152 + (qJ(4) * t271 + qJD(4) * t151 + t325 * t58 + t35) * t221 + (qJ(4) * t117 + qJD(4) * t152 + t325 * t59 - t34) * t219 + t245, -t118 * t133 - t58 * t86 - t59 * t87 + t272 * qJD(4) - t233 * pkin(3) + (t245 + t273) * qJ(4), t7, t379, t25, t255, -t381, t305, -t106 * t93 - t15 * t326 - t195 * t359 - t202 * t39 - t258 * t51 - t331 * t88 + t252, -t106 * t260 + t157 * t51 + t16 * t326 + t195 * t360 + t202 * t38 - t330 * t88 + t400, t15 * t330 + t157 * t294 + t16 * t331 + t258 * t3 - t260 * t359 + t33 * t93 + t236, -g(3) * t291 - t294 * t259 + t3 * t105 - t88 * t106 + t359 * t15 + t360 * t16 - t51 * t202 + t283 * (t202 * t225 - t337) t7, t25, -t379, t305, t381, t255, t13 * t326 + t195 * t358 - t258 * t5 - t29 * t331 + t363 * t93 + t39 * t89 + t252, t1 * t258 - t13 * t330 + t14 * t331 + t157 * t2 + t260 * t358 + t27 * t93 + t236, -t14 * t326 - t157 * t5 - t195 * t361 - t260 * t363 + t29 * t330 + t38 * t89 - t400, t1 * t105 + t5 * t89 - t2 * t259 - g(3) * (t227 * t275 + t291) + t363 * t29 + t361 * t14 + t358 * t13 + t283 * (-t337 - (-t202 - t275) * t225); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t271 - t311, t221 * t316 + t227 * t268 + t317, -t151 ^ 2 - t152 ^ 2, -t151 * t59 + t152 * t58 + t233, 0, 0, 0, 0, 0, 0, t234, -t243, t280, t15 * t260 + t16 * t93 + t232, 0, 0, 0, 0, 0, 0, t234, t280, t243, -t13 * t260 + t14 * t93 + t232 + t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367, -t315, t20, -t367, -t388, t155, -t260 * t88 + t244 - t356, -t15 * t195 + t88 * t93 - t235, 0, 0, t367, t20, t315, t155, t388, -t367, -t48 * t93 - t237 - t356 + 0.2e1 * t373, pkin(5) * t38 - qJ(6) * t39 + (t14 - t16) * t260 + (t13 - t333) * t93, 0.2e1 * t350 - t29 * t93 + t48 * t260 + (-0.2e1 * qJD(6) + t15) * t195 + t235, t1 * qJ(6) - t2 * pkin(5) - t29 * t48 - t13 * t16 - g(1) * (-pkin(5) * t115 + qJ(6) * t116) - g(2) * (-pkin(5) * t113 + qJ(6) * t114) - (-pkin(5) * t206 + qJ(6) * t208) * t368 + t333 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155 + t367, t20, -t195 ^ 2 - t378, t14 * t195 + t237 - t373;];
tau_reg  = t4;
