% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:41:10
% EndTime: 2019-05-05 17:41:18
% DurationCPUTime: 8.09s
% Computational Cost: add. (24523->285), mult. (51309->354), div. (0->0), fcn. (34520->10), ass. (0->201)
t2289 = sin(qJ(3));
t2319 = qJD(1) * t2289;
t2274 = qJD(3) * t2319;
t2292 = cos(qJ(3));
t2309 = t2292 * qJDD(1);
t2304 = -t2274 + t2309;
t2303 = -qJDD(5) + t2304;
t2283 = sin(pkin(10));
t2285 = cos(pkin(10));
t2248 = -t2285 * qJD(3) + t2283 * t2319;
t2249 = t2283 * qJD(3) + t2285 * t2319;
t2288 = sin(qJ(5));
t2291 = cos(qJ(5));
t2221 = t2291 * t2248 + t2288 * t2249;
t2223 = -t2288 * t2248 + t2291 * t2249;
t2315 = t2223 * t2221;
t2179 = t2303 - t2315;
t2220 = t2223 ^ 2;
t2312 = t2292 * qJD(1);
t2270 = qJD(5) - t2312;
t2322 = t2270 ^ 2;
t2329 = -t2220 - t2322;
t2151 = t2179 * t2288 + t2291 * t2329;
t2153 = t2179 * t2291 - t2288 * t2329;
t2122 = t2151 * t2283 - t2153 * t2285;
t2308 = qJD(3) * t2312;
t2310 = t2289 * qJDD(1);
t2253 = t2308 + t2310;
t2235 = t2283 * qJDD(3) + t2285 * t2253;
t2301 = t2285 * qJDD(3) - t2283 * t2253;
t2297 = -t2221 * qJD(5) + t2291 * t2235 + t2288 * t2301;
t2316 = t2221 * t2270;
t2296 = t2297 - t2316;
t2109 = t2122 * t2292 - t2289 * t2296;
t2124 = t2151 * t2285 + t2153 * t2283;
t2284 = sin(pkin(9));
t2286 = cos(pkin(9));
t2085 = t2109 * t2284 + t2124 * t2286;
t2087 = t2109 * t2286 - t2124 * t2284;
t2290 = sin(qJ(1));
t2293 = cos(qJ(1));
t2353 = t2085 * t2293 + t2087 * t2290;
t2352 = t2085 * t2290 - t2087 * t2293;
t2107 = t2122 * t2289 + t2292 * t2296;
t2164 = t2297 + t2316;
t2306 = t2288 * t2235 - t2291 * t2301;
t2298 = (-qJD(5) + t2270) * t2223 - t2306;
t2326 = t2164 * t2288 + t2291 * t2298;
t2327 = -t2291 * t2164 + t2288 * t2298;
t2332 = t2283 * t2326 + t2285 * t2327;
t2193 = t2221 ^ 2;
t2172 = t2220 + t2193;
t2333 = -t2283 * t2327 + t2285 * t2326;
t2338 = -t2172 * t2289 + t2292 * t2333;
t2342 = t2284 * t2332 + t2286 * t2338;
t2343 = t2284 * t2338 - t2286 * t2332;
t2349 = -t2290 * t2343 + t2293 * t2342;
t2348 = t2290 * t2342 + t2293 * t2343;
t2180 = t2303 + t2315;
t2328 = -t2322 - t2193;
t2334 = t2180 * t2288 + t2291 * t2328;
t2335 = -t2291 * t2180 + t2288 * t2328;
t2336 = t2283 * t2334 + t2285 * t2335;
t2347 = t2284 * t2336;
t2346 = t2286 * t2336;
t2337 = -t2283 * t2335 + t2285 * t2334;
t2345 = t2289 * t2337;
t2344 = t2292 * t2337;
t2339 = t2172 * t2292 + t2289 * t2333;
t2238 = t2248 * t2312;
t2214 = -t2235 + t2238;
t2325 = qJD(3) ^ 2;
t2324 = t2248 ^ 2;
t2323 = t2249 ^ 2;
t2321 = -2 * qJD(4);
t2320 = -g(3) + qJDD(2);
t2314 = t2249 * t2248;
t2280 = t2292 ^ 2;
t2294 = qJD(1) ^ 2;
t2313 = t2280 * t2294;
t2264 = -t2293 * g(1) - t2290 * g(2);
t2251 = -t2294 * pkin(1) + t2264;
t2263 = t2290 * g(1) - t2293 * g(2);
t2300 = qJDD(1) * pkin(1) + t2263;
t2225 = -t2284 * t2251 + t2286 * t2300;
t2217 = -qJDD(1) * pkin(2) - t2294 * pkin(7) - t2225;
t2184 = (-t2253 - t2308) * qJ(4) + (-t2304 + t2274) * pkin(3) + t2217;
t2226 = t2286 * t2251 + t2284 * t2300;
t2218 = -t2294 * pkin(2) + qJDD(1) * pkin(7) + t2226;
t2199 = t2292 * t2218 + t2289 * t2320;
t2250 = (-pkin(3) * t2292 - qJ(4) * t2289) * qJD(1);
t2192 = -pkin(3) * t2325 + qJDD(3) * qJ(4) + t2250 * t2312 + t2199;
t2143 = t2283 * t2184 + t2285 * t2192 + t2248 * t2321;
t2236 = -pkin(4) * t2312 - t2249 * pkin(8);
t2135 = -pkin(4) * t2324 + pkin(8) * t2301 + t2236 * t2312 + t2143;
t2142 = t2285 * t2184 - t2283 * t2192 + t2249 * t2321;
t2216 = -t2304 - t2314;
t2295 = t2216 * pkin(4) + pkin(8) * t2214 + t2142;
t2106 = t2291 * t2135 + t2288 * t2295;
t2279 = t2289 ^ 2;
t2311 = t2279 + t2280;
t2307 = t2249 * t2312;
t2105 = -t2288 * t2135 + t2291 * t2295;
t2255 = -t2284 * qJDD(1) - t2286 * t2294;
t2256 = t2286 * qJDD(1) - t2284 * t2294;
t2305 = t2293 * t2255 - t2256 * t2290;
t2302 = t2255 * t2290 + t2256 * t2293;
t2299 = -qJD(5) * t2223 - t2306;
t2273 = t2292 * t2320;
t2188 = qJDD(4) - t2273 - t2325 * qJ(4) - qJDD(3) * pkin(3) + (qJD(1) * t2250 + t2218) * t2289;
t2150 = -t2301 * pkin(4) - t2324 * pkin(8) + t2249 * t2236 + t2188;
t2269 = t2292 * t2294 * t2289;
t2267 = -t2313 - t2325;
t2266 = -t2279 * t2294 - t2325;
t2262 = -qJDD(3) + t2269;
t2261 = qJDD(3) + t2269;
t2260 = t2311 * t2294;
t2259 = -t2290 * qJDD(1) - t2293 * t2294;
t2258 = t2293 * qJDD(1) - t2290 * t2294;
t2257 = t2311 * qJDD(1);
t2254 = -0.2e1 * t2274 + t2309;
t2252 = 0.2e1 * t2308 + t2310;
t2237 = -t2313 - t2323;
t2233 = t2292 * t2262 - t2289 * t2266;
t2232 = -t2289 * t2261 + t2292 * t2267;
t2231 = t2289 * t2262 + t2292 * t2266;
t2230 = t2292 * t2261 + t2289 * t2267;
t2228 = t2286 * t2257 - t2284 * t2260;
t2227 = t2284 * t2257 + t2286 * t2260;
t2224 = -t2313 - t2324;
t2215 = t2304 - t2314;
t2213 = t2235 + t2238;
t2212 = t2301 - t2307;
t2211 = -t2301 - t2307;
t2205 = -t2323 - t2324;
t2203 = t2286 * t2233 + t2284 * t2252;
t2202 = t2286 * t2232 - t2284 * t2254;
t2201 = t2284 * t2233 - t2286 * t2252;
t2200 = t2284 * t2232 + t2286 * t2254;
t2198 = -t2289 * t2218 + t2273;
t2195 = t2285 * t2215 - t2283 * t2237;
t2194 = t2283 * t2215 + t2285 * t2237;
t2191 = t2221 * pkin(5) - t2223 * qJ(6);
t2190 = -t2284 * t2225 + t2286 * t2226;
t2189 = t2286 * t2225 + t2284 * t2226;
t2183 = -t2283 * t2216 + t2285 * t2224;
t2182 = t2285 * t2216 + t2283 * t2224;
t2176 = t2285 * t2212 - t2283 * t2214;
t2175 = t2283 * t2212 + t2285 * t2214;
t2170 = -t2289 * t2198 + t2292 * t2199;
t2169 = t2292 * t2198 + t2289 * t2199;
t2168 = t2292 * t2195 + t2289 * t2213;
t2167 = t2289 * t2195 - t2292 * t2213;
t2166 = t2292 * t2183 + t2289 * t2211;
t2165 = t2289 * t2183 - t2292 * t2211;
t2159 = (qJD(5) + t2270) * t2223 + t2306;
t2158 = t2270 * t2223 - t2299;
t2156 = t2176 * t2292 + t2205 * t2289;
t2155 = t2176 * t2289 - t2205 * t2292;
t2149 = t2170 * t2286 + t2217 * t2284;
t2148 = t2170 * t2284 - t2217 * t2286;
t2141 = t2168 * t2286 + t2194 * t2284;
t2140 = t2168 * t2284 - t2194 * t2286;
t2139 = t2166 * t2286 + t2182 * t2284;
t2138 = t2166 * t2284 - t2182 * t2286;
t2137 = t2156 * t2286 + t2175 * t2284;
t2136 = t2156 * t2284 - t2175 * t2286;
t2119 = -t2142 * t2283 + t2143 * t2285;
t2118 = t2142 * t2285 + t2143 * t2283;
t2117 = t2158 * t2289 + t2344;
t2115 = -t2158 * t2292 + t2345;
t2113 = t2119 * t2292 + t2188 * t2289;
t2112 = t2119 * t2289 - t2188 * t2292;
t2111 = -t2299 * pkin(5) + (pkin(5) * t2270 - (2 * qJD(6))) * t2223 + t2150 - t2296 * qJ(6);
t2110 = t2159 * t2289 + t2344;
t2108 = -t2159 * t2292 + t2345;
t2100 = pkin(5) * t2303 - qJ(6) * t2322 + t2223 * t2191 + qJDD(6) - t2105;
t2099 = -pkin(5) * t2322 - qJ(6) * t2303 + 0.2e1 * qJD(6) * t2270 - t2221 * t2191 + t2106;
t2094 = t2117 * t2286 + t2347;
t2092 = t2117 * t2284 - t2346;
t2090 = t2113 * t2286 + t2118 * t2284;
t2089 = t2113 * t2284 - t2118 * t2286;
t2088 = t2110 * t2286 + t2347;
t2086 = t2110 * t2284 - t2346;
t2084 = -t2105 * t2288 + t2106 * t2291;
t2083 = t2105 * t2291 + t2106 * t2288;
t2078 = t2099 * t2291 + t2100 * t2288;
t2077 = t2099 * t2288 - t2100 * t2291;
t2076 = -t2083 * t2283 + t2084 * t2285;
t2075 = t2083 * t2285 + t2084 * t2283;
t2074 = t2076 * t2292 + t2150 * t2289;
t2073 = t2076 * t2289 - t2150 * t2292;
t2072 = -t2077 * t2283 + t2078 * t2285;
t2071 = t2077 * t2285 + t2078 * t2283;
t2070 = t2072 * t2292 + t2111 * t2289;
t2069 = t2072 * t2289 - t2111 * t2292;
t2068 = t2074 * t2286 + t2075 * t2284;
t2067 = t2074 * t2284 - t2075 * t2286;
t2066 = t2070 * t2286 + t2071 * t2284;
t2065 = t2070 * t2284 - t2071 * t2286;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2259, -t2258, 0, -t2263 * t2290 + t2264 * t2293, 0, 0, 0, 0, 0, 0, t2305, -t2302, 0, -t2189 * t2290 + t2190 * t2293, 0, 0, 0, 0, 0, 0, -t2200 * t2290 + t2202 * t2293, -t2201 * t2290 + t2203 * t2293, -t2227 * t2290 + t2228 * t2293, -t2148 * t2290 + t2149 * t2293, 0, 0, 0, 0, 0, 0, -t2138 * t2290 + t2139 * t2293, -t2140 * t2290 + t2141 * t2293, -t2136 * t2290 + t2137 * t2293, -t2089 * t2290 + t2090 * t2293, 0, 0, 0, 0, 0, 0, -t2086 * t2290 + t2088 * t2293, t2352, t2349, -t2067 * t2290 + t2068 * t2293, 0, 0, 0, 0, 0, 0, -t2092 * t2290 + t2094 * t2293, t2349, -t2352, -t2065 * t2290 + t2066 * t2293; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2258, t2259, 0, t2263 * t2293 + t2264 * t2290, 0, 0, 0, 0, 0, 0, t2302, t2305, 0, t2189 * t2293 + t2190 * t2290, 0, 0, 0, 0, 0, 0, t2200 * t2293 + t2202 * t2290, t2201 * t2293 + t2203 * t2290, t2227 * t2293 + t2228 * t2290, t2148 * t2293 + t2149 * t2290, 0, 0, 0, 0, 0, 0, t2138 * t2293 + t2139 * t2290, t2140 * t2293 + t2141 * t2290, t2136 * t2293 + t2137 * t2290, t2089 * t2293 + t2090 * t2290, 0, 0, 0, 0, 0, 0, t2086 * t2293 + t2088 * t2290, -t2353, t2348, t2067 * t2293 + t2068 * t2290, 0, 0, 0, 0, 0, 0, t2092 * t2293 + t2094 * t2290, t2348, t2353, t2065 * t2293 + t2066 * t2290; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, 0, 0, 0, 0, 0, 0, t2230, t2231, 0, t2169, 0, 0, 0, 0, 0, 0, t2165, t2167, t2155, t2112, 0, 0, 0, 0, 0, 0, t2108, -t2107, t2339, t2073, 0, 0, 0, 0, 0, 0, t2115, t2339, t2107, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2294, -qJDD(1), 0, t2264, 0, 0, 0, 0, 0, 0, t2255, -t2256, 0, t2190, 0, 0, 0, 0, 0, 0, t2202, t2203, t2228, t2149, 0, 0, 0, 0, 0, 0, t2139, t2141, t2137, t2090, 0, 0, 0, 0, 0, 0, t2088, -t2087, t2342, t2068, 0, 0, 0, 0, 0, 0, t2094, t2342, t2087, t2066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2294, 0, t2263, 0, 0, 0, 0, 0, 0, t2256, t2255, 0, t2189, 0, 0, 0, 0, 0, 0, t2200, t2201, t2227, t2148, 0, 0, 0, 0, 0, 0, t2138, t2140, t2136, t2089, 0, 0, 0, 0, 0, 0, t2086, -t2085, t2343, t2067, 0, 0, 0, 0, 0, 0, t2092, t2343, t2085, t2065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, 0, 0, 0, 0, 0, 0, t2230, t2231, 0, t2169, 0, 0, 0, 0, 0, 0, t2165, t2167, t2155, t2112, 0, 0, 0, 0, 0, 0, t2108, -t2107, t2339, t2073, 0, 0, 0, 0, 0, 0, t2115, t2339, t2107, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2294, -qJDD(1), 0, t2226, 0, 0, 0, 0, 0, 0, t2232, t2233, t2257, t2170, 0, 0, 0, 0, 0, 0, t2166, t2168, t2156, t2113, 0, 0, 0, 0, 0, 0, t2110, -t2109, t2338, t2074, 0, 0, 0, 0, 0, 0, t2117, t2338, t2109, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2294, 0, t2225, 0, 0, 0, 0, 0, 0, t2254, -t2252, t2260, -t2217, 0, 0, 0, 0, 0, 0, -t2182, -t2194, -t2175, -t2118, 0, 0, 0, 0, 0, 0, -t2336, -t2124, -t2332, -t2075, 0, 0, 0, 0, 0, 0, -t2336, -t2332, t2124, -t2071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, 0, 0, 0, 0, 0, 0, t2230, t2231, 0, t2169, 0, 0, 0, 0, 0, 0, t2165, t2167, t2155, t2112, 0, 0, 0, 0, 0, 0, t2108, -t2107, t2339, t2073, 0, 0, 0, 0, 0, 0, t2115, t2339, t2107, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, t2262, t2309, t2199, 0, 0, 0, 0, 0, 0, t2183, t2195, t2176, t2119, 0, 0, 0, 0, 0, 0, t2337, -t2122, t2333, t2076, 0, 0, 0, 0, 0, 0, t2337, t2333, t2122, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2261, t2266, -t2310, t2198, 0, 0, 0, 0, 0, 0, -t2211, -t2213, -t2205, -t2188, 0, 0, 0, 0, 0, 0, -t2159, -t2296, t2172, -t2150, 0, 0, 0, 0, 0, 0, -t2158, t2172, t2296, -t2111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2254, t2252, -t2260, t2217, 0, 0, 0, 0, 0, 0, t2182, t2194, t2175, t2118, 0, 0, 0, 0, 0, 0, t2336, t2124, t2332, t2075, 0, 0, 0, 0, 0, 0, t2336, t2332, -t2124, t2071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2224, t2215, t2212, t2143, 0, 0, 0, 0, 0, 0, t2334, t2153, t2326, t2084, 0, 0, 0, 0, 0, 0, t2334, t2326, -t2153, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216, t2237, t2214, t2142, 0, 0, 0, 0, 0, 0, t2335, t2151, t2327, t2083, 0, 0, 0, 0, 0, 0, t2335, t2327, -t2151, t2077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2211, t2213, t2205, t2188, 0, 0, 0, 0, 0, 0, t2159, t2296, -t2172, t2150, 0, 0, 0, 0, 0, 0, t2158, -t2172, -t2296, t2111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2328, t2179, t2298, t2106, 0, 0, 0, 0, 0, 0, t2328, t2298, -t2179, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2180, t2329, -t2164, t2105, 0, 0, 0, 0, 0, 0, -t2180, -t2164, -t2329, -t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2159, t2296, -t2172, t2150, 0, 0, 0, 0, 0, 0, t2158, -t2172, -t2296, t2111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2328, t2298, -t2179, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2158, -t2172, -t2296, t2111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2180, t2164, t2329, t2100;];
f_new_reg  = t1;
