% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRP3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP3_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:09:37
% EndTime: 2019-03-09 03:09:43
% DurationCPUTime: 2.28s
% Computational Cost: add. (2417->216), mult. (5697->373), div. (0->0), fcn. (5061->8), ass. (0->127)
t96 = cos(qJ(3));
t148 = t96 * qJD(3);
t165 = sin(qJ(5));
t124 = qJD(5) * t165;
t166 = cos(qJ(5));
t125 = qJD(5) * t166;
t92 = sin(pkin(10));
t93 = cos(pkin(10));
t62 = t92 * t124 - t93 * t125;
t132 = t166 * t92;
t68 = t165 * t93 + t132;
t95 = sin(qJ(3));
t39 = t68 * t148 - t62 * t95;
t57 = t68 * t95;
t154 = t68 * t39 - t57 * t62;
t63 = t68 * qJD(5);
t67 = t165 * t92 - t166 * t93;
t38 = t67 * t148 + t95 * t63;
t58 = t67 * t95;
t155 = t38 * t67 + t58 * t63;
t174 = t154 - t155;
t173 = t154 + t155;
t87 = t95 * qJD(3);
t172 = -t96 * t39 + t57 * t87;
t156 = t38 * t57 + t58 * t39;
t171 = -0.2e1 * t62;
t170 = 0.2e1 * t63;
t169 = 0.2e1 * qJD(3);
t168 = 2 * qJD(6);
t167 = pkin(3) * t95;
t163 = t57 * t39;
t84 = sin(pkin(9)) * pkin(1) + pkin(7);
t161 = t92 * t84;
t160 = t92 * t95;
t74 = t95 * t84;
t158 = pkin(8) + qJ(4);
t128 = pkin(4) + t161;
t114 = -t96 * pkin(3) - t95 * qJ(4);
t85 = -cos(pkin(9)) * pkin(1) - pkin(2);
t64 = t114 + t85;
t60 = t93 * t64;
t36 = -t93 * t95 * pkin(8) - t128 * t96 + t60;
t69 = t93 * t96 * t84;
t49 = t92 * t64 + t69;
t40 = -pkin(8) * t160 + t49;
t10 = t165 * t36 + t166 * t40;
t138 = t92 * t148;
t70 = t84 * t148;
t56 = pkin(4) * t138 + t70;
t61 = pkin(4) * t160 + t74;
t88 = t92 ^ 2;
t89 = t93 ^ 2;
t153 = t88 + t89;
t152 = t95 ^ 2 - t96 ^ 2;
t151 = qJ(4) * t96;
t150 = qJD(4) * t96;
t149 = t95 * qJD(4);
t147 = t96 * qJD(6);
t146 = 0.2e1 * t163;
t145 = t67 * t170;
t144 = t96 * t161;
t143 = t93 * t74;
t142 = t85 * t169;
t141 = pkin(5) * t87;
t139 = t88 * t148;
t137 = t92 * t149;
t136 = t93 * t87;
t135 = t93 * t148;
t134 = t93 * t149;
t133 = t95 * t148;
t86 = -t93 * pkin(4) - pkin(3);
t129 = qJ(6) * t87;
t107 = t158 * t132;
t123 = t166 * qJD(4);
t126 = qJD(4) * t165;
t73 = t158 * t93;
t33 = qJD(5) * t107 - t93 * t123 + t73 * t124 + t92 * t126;
t115 = t158 * t165;
t34 = t73 * t125 + t93 * t126 + (-qJD(5) * t115 + t123) * t92;
t51 = t165 * t73 + t107;
t52 = -t92 * t115 + t166 * t73;
t127 = -t52 * t33 + t51 * t34;
t122 = t153 * qJD(4);
t121 = 0.2e1 * t133;
t120 = t92 * t135;
t119 = 0.2e1 * t122;
t118 = -0.2e1 * t152 * qJD(3);
t113 = -t151 + t167;
t111 = t39 * t67 + t57 * t63;
t46 = -t134 + (t93 * t113 + t92 * t74) * qJD(3);
t47 = -t137 + (t92 * t113 - t143) * qJD(3);
t110 = -t46 * t92 + t47 * t93;
t48 = t60 - t144;
t109 = -t48 * t92 + t49 * t93;
t108 = t62 * t67 - t68 * t63;
t106 = -t33 * t96 - t52 * t87;
t105 = t34 * t96 - t51 * t87;
t42 = t96 * t62 + t68 * t87;
t41 = -t96 * t63 + t67 * t87;
t104 = -t158 * t96 + t167;
t103 = t58 * t33 + t57 * t34 - t38 * t52 + t39 * t51;
t102 = t33 * t57 - t34 * t58 - t51 * t38 - t52 * t39;
t9 = -t165 * t40 + t166 * t36;
t101 = -t39 * pkin(5) - t38 * qJ(6) - t58 * qJD(6);
t97 = -t134 + (t104 * t93 + t128 * t95) * qJD(3);
t98 = -t137 + (t104 * t92 - t143) * qJD(3);
t3 = t40 * t124 - t36 * t125 - t165 * t97 - t166 * t98;
t100 = 0.2e1 * t33 * t67 + 0.2e1 * t34 * t68 - 0.2e1 * t51 * t62 - 0.2e1 * t52 * t63;
t20 = t58 * t38;
t99 = -0.2e1 * t133 + 0.2e1 * t20 + 0.2e1 * t163;
t4 = -t36 * t124 - t40 * t125 - t165 * t98 + t166 * t97;
t79 = t89 * t148;
t78 = t92 * t87;
t77 = -0.2e1 * t133;
t50 = t68 * t171;
t43 = t67 * pkin(5) - t68 * qJ(6) + t86;
t29 = t63 * pkin(5) + t62 * qJ(6) - t68 * qJD(6);
t24 = t57 * pkin(5) + t58 * qJ(6) + t61;
t17 = 0.2e1 * t20;
t12 = 0.2e1 * t96 * t38 - 0.2e1 * t58 * t87;
t8 = -t38 * t68 + t58 * t62;
t7 = t96 * pkin(5) - t9;
t6 = -t96 * qJ(6) + t10;
t5 = -t101 + t56;
t2 = -t4 - t141;
t1 = t129 - t3 - t147;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t118, 0, t77, 0, 0, t95 * t142, t96 * t142, 0, 0, t89 * t121, -0.4e1 * t95 * t120, t152 * t93 * t169, t88 * t121, t92 * t118, t77, -0.2e1 * t46 * t96 + 0.2e1 * (t48 + 0.2e1 * t144) * t87, 0.2e1 * t47 * t96 + 0.2e1 * (-t49 + 0.2e1 * t69) * t87, 0.2e1 * (-t46 * t93 - t47 * t92) * t95 + 0.2e1 * (-t48 * t93 - t49 * t92) * t148, 0.2e1 * t84 ^ 2 * t133 + 0.2e1 * t48 * t46 + 0.2e1 * t49 * t47, t17, 0.2e1 * t156, t12, t146, -0.2e1 * t172, t77, 0.2e1 * t61 * t39 - 0.2e1 * t4 * t96 + 0.2e1 * t56 * t57 + 0.2e1 * t9 * t87, -0.2e1 * t10 * t87 - 0.2e1 * t3 * t96 - 0.2e1 * t61 * t38 - 0.2e1 * t56 * t58, -0.2e1 * t10 * t39 + 0.2e1 * t3 * t57 + 0.2e1 * t9 * t38 + 0.2e1 * t4 * t58, -0.2e1 * t10 * t3 + 0.2e1 * t9 * t4 + 0.2e1 * t61 * t56, t17, t12, -0.2e1 * t156, t77, 0.2e1 * t172, t146, 0.2e1 * t2 * t96 + 0.2e1 * t24 * t39 + 0.2e1 * t5 * t57 - 0.2e1 * t7 * t87, -0.2e1 * t1 * t57 - 0.2e1 * t2 * t58 - 0.2e1 * t7 * t38 - 0.2e1 * t6 * t39, -0.2e1 * t1 * t96 + 0.2e1 * t24 * t38 + 0.2e1 * t5 * t58 + 0.2e1 * t6 * t87, 0.2e1 * t6 * t1 + 0.2e1 * t7 * t2 + 0.2e1 * t24 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110 * t95 + (t109 * t96 + t152 * t84) * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t38 + t3 * t58 - t9 * t39 - t4 * t57 - t56 * t96 + t61 * t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t58 + t2 * t57 + t24 * t87 - t6 * t38 + t7 * t39 - t5 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t153) * t121, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, 0, -t87, 0, -t70, t84 * t87, 0, 0, t120, t79 - t139, t78, -t120, t136, 0, t92 * t150 + (t114 * t92 - t69) * qJD(3), t93 * t150 + (t114 * t93 + t144) * qJD(3), t110, -pkin(3) * t70 + t110 * qJ(4) + t109 * qJD(4), t8, -t174, t42, t111, -t41, 0, t86 * t39 + t56 * t67 + t61 * t63 + t105, -t86 * t38 + t56 * t68 - t61 * t62 + t106, -t10 * t63 + t3 * t67 - t4 * t68 + t9 * t62 + t102, -t10 * t33 - t3 * t52 - t9 * t34 - t4 * t51 + t56 * t86, t8, t42, t174, 0, t41, t111, t24 * t63 + t29 * t57 + t43 * t39 + t5 * t67 + t105, -t1 * t67 + t2 * t68 - t6 * t63 - t7 * t62 + t102, t24 * t62 + t29 * t58 + t43 * t38 - t5 * t68 - t106, t1 * t52 + t2 * t51 + t24 * t29 - t6 * t33 + t7 * t34 + t5 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t148, 0, 0, 0, 0, 0, 0, 0, 0, -t136, t78, t79 + t139, t95 * t122 + (t153 * t151 - t167) * qJD(3), 0, 0, 0, 0, 0, 0, t41, t42, t173, t86 * t87 + t103, 0, 0, 0, 0, 0, 0, t41, t173, -t42, -t96 * t29 + t43 * t87 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, qJ(4) * t119, t50, 0.2e1 * t108, 0, t145, 0, 0, t86 * t170, t86 * t171, t100, 0.2e1 * t127, t50, 0, -0.2e1 * t108, 0, 0, t145, 0.2e1 * t29 * t67 + 0.2e1 * t43 * t63, t100, -0.2e1 * t29 * t68 + 0.2e1 * t43 * t62, 0.2e1 * t43 * t29 + 0.2e1 * t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, t135, 0, t70, 0, 0, 0, 0, 0, 0, t39, -t38, 0, t56, 0, 0, 0, 0, 0, 0, t39, 0, t38, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t62, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t62, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, -t39, t87, t4, t3, 0, 0, 0, -t38, 0, t87, t39, 0, t4 + 0.2e1 * t141, pkin(5) * t38 - t39 * qJ(6) - t57 * qJD(6), 0.2e1 * t129 - t3 - 0.2e1 * t147, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, t38, 0, 0, 0, 0, 0, 0, 0, 0, -t39, 0, -t38, t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, -t63, 0, -t34, t33, 0, 0, 0, -t62, 0, 0, t63, 0, -t34, pkin(5) * t62 - t63 * qJ(6) - t67 * qJD(6), -t33, -t34 * pkin(5) - t33 * qJ(6) + t52 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, qJ(6) * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t38, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
