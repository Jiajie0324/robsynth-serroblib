% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:39:42
% EndTime: 2019-05-05 17:40:21
% DurationCPUTime: 40.16s
% Computational Cost: add. (96560->753), mult. (201821->1076), div. (0->0), fcn. (136391->10), ass. (0->533)
t936 = sin(pkin(10));
t938 = cos(pkin(10));
t942 = sin(qJ(3));
t990 = qJD(1) * t942;
t891 = qJD(3) * t936 + t938 * t990;
t941 = sin(qJ(5));
t944 = cos(qJ(5));
t974 = qJD(3) * t938 - t936 * t990;
t837 = t891 * t941 - t944 * t974;
t945 = cos(qJ(3));
t989 = qJD(1) * t945;
t921 = -qJD(5) + t989;
t1006 = t837 * t921;
t986 = qJD(1) * qJD(3);
t980 = t945 * t986;
t985 = qJDD(1) * t942;
t899 = t980 + t985;
t865 = qJDD(3) * t936 + t938 * t899;
t958 = qJDD(3) * t938 - t899 * t936;
t949 = -t837 * qJD(5) + t944 * t865 + t941 * t958;
t1051 = t949 + t1006;
t839 = t944 * t891 + t941 * t974;
t1007 = t837 * t839;
t926 = t942 * t986;
t984 = t945 * qJDD(1);
t900 = -t926 + t984;
t892 = -qJDD(5) + t900;
t950 = t892 - t1007;
t1018 = t950 * t944;
t1039 = t921 ^ 2;
t836 = t839 ^ 2;
t787 = -t836 - t1039;
t668 = t787 * t941 - t1018;
t1019 = t950 * t941;
t679 = t787 * t944 + t1019;
t597 = t668 * t938 + t679 * t936;
t562 = -t1051 * t942 + t597 * t945;
t595 = t668 * t936 - t679 * t938;
t937 = sin(pkin(9));
t939 = cos(pkin(9));
t505 = t562 * t937 - t595 * t939;
t507 = t562 * t939 + t595 * t937;
t943 = sin(qJ(1));
t946 = cos(qJ(1));
t461 = t505 * t946 + t507 * t943;
t1180 = pkin(6) * t461;
t471 = t505 * t943 - t507 * t946;
t1179 = pkin(6) * t471;
t1178 = qJ(2) * t505;
t1177 = pkin(1) * t505 - pkin(2) * t595 + pkin(7) * t562;
t560 = t1051 * t945 + t597 * t942;
t1176 = -pkin(1) * t560 + qJ(2) * t507;
t977 = t865 * t941 - t944 * t958;
t705 = (qJD(5) - t921) * t839 + t977;
t628 = t1051 * t944 - t705 * t941;
t1021 = t1051 * t941;
t632 = -t705 * t944 - t1021;
t553 = -t628 * t936 + t632 * t938;
t1040 = t837 ^ 2;
t771 = t836 - t1040;
t543 = t553 * t945 + t771 * t942;
t547 = t628 * t938 + t632 * t936;
t487 = t543 * t937 - t547 * t939;
t489 = t543 * t939 + t547 * t937;
t1175 = t487 * t946 + t489 * t943;
t1174 = t487 * t943 - t489 * t946;
t802 = t1040 - t1039;
t697 = t802 * t941 - t1018;
t701 = t802 * t944 + t1019;
t625 = t697 * t936 - t701 * t938;
t706 = (qJD(5) + t921) * t839 + t977;
t581 = t625 * t945 + t706 * t942;
t621 = t697 * t938 + t701 * t936;
t521 = t581 * t937 + t621 * t939;
t525 = t581 * t939 - t621 * t937;
t1173 = t521 * t946 + t525 * t943;
t1172 = t521 * t943 - t525 * t946;
t1170 = pkin(7) * t560;
t1169 = -pkin(2) * t560 - pkin(3) * t1051 - qJ(4) * t597;
t1053 = t1006 - t949;
t1090 = -t1053 * t941 - t706 * t944;
t1091 = t944 * t1053 - t706 * t941;
t1106 = t1090 * t936 + t1091 * t938;
t1107 = t1090 * t938 - t1091 * t936;
t728 = t836 + t1040;
t1131 = t1107 * t945 - t728 * t942;
t1143 = t1106 * t937 + t1131 * t939;
t1144 = -t1106 * t939 + t1131 * t937;
t1149 = t1143 * t943 + t1144 * t946;
t1167 = pkin(6) * t1149;
t1150 = t1143 * t946 - t1144 * t943;
t1166 = pkin(6) * t1150;
t1164 = qJ(4) * t595;
t1157 = qJ(2) * t1144;
t1156 = -pkin(3) * t595 + pkin(4) * t679;
t1155 = pkin(1) * t1144 - pkin(2) * t1106 + pkin(7) * t1131;
t1153 = t625 * t942 - t706 * t945;
t1152 = t553 * t942 - t771 * t945;
t1132 = t1107 * t942 + t728 * t945;
t1151 = -pkin(1) * t1132 + qJ(2) * t1143;
t1147 = pkin(7) * t1132;
t1146 = -pkin(2) * t1132 - pkin(3) * t728 - qJ(4) * t1107;
t951 = -t892 - t1007;
t1017 = t951 * t941;
t803 = -t836 + t1039;
t1066 = t944 * t803 + t1017;
t745 = t944 * t951;
t1067 = -t803 * t941 + t745;
t1082 = -t1066 * t938 - t1067 * t936;
t1081 = -t1066 * t936 + t1067 * t938;
t1112 = -t1053 * t942 + t1081 * t945;
t1129 = -t1082 * t937 + t1112 * t939;
t1130 = t1082 * t939 + t1112 * t937;
t1142 = t1129 * t946 - t1130 * t943;
t1141 = t1129 * t943 + t1130 * t946;
t1139 = pkin(8) * t668;
t1138 = pkin(8) * t679;
t1136 = qJ(4) * t1106;
t511 = -pkin(3) * t1106 - pkin(4) * t1091;
t1050 = -t1039 - t1040;
t1060 = t1050 * t944 - t1017;
t1062 = t1050 * t941 + t745;
t1083 = t1060 * t936 + t1062 * t938;
t1128 = pkin(2) * t1083;
t1126 = pkin(8) * t1091;
t1123 = qJ(4) * t1083;
t1084 = t1060 * t938 - t1062 * t936;
t1122 = qJ(4) * t1084;
t1119 = t1083 * t937;
t1118 = t1083 * t939;
t1117 = t1084 * t942;
t1116 = t1084 * t945;
t1115 = -pkin(3) * t1083 - pkin(4) * t1062;
t1114 = pkin(4) * t728 + pkin(8) * t1090;
t1113 = t1053 * t945 + t1081 * t942;
t744 = -qJD(5) * t839 - t977;
t995 = t921 * t944;
t981 = t837 * t995;
t956 = -t744 * t941 - t981;
t996 = t921 * t941;
t964 = t944 * t744 - t837 * t996;
t1041 = -t936 * t956 - t938 * t964;
t1042 = -t936 * t964 + t938 * t956;
t983 = t942 * t1007;
t1064 = t1042 * t945 - t983;
t1085 = -t1041 * t937 + t1064 * t939;
t1086 = t1041 * t939 + t1064 * t937;
t1111 = t1085 * t946 - t1086 * t943;
t1110 = t1085 * t943 + t1086 * t946;
t952 = (t837 * t941 + t839 * t944) * t921;
t797 = t839 * t996;
t963 = -t797 + t981;
t1044 = -t936 * t963 - t938 * t952;
t1043 = -t936 * t952 + t938 * t963;
t1061 = t1043 * t945 - t892 * t942;
t1087 = -t1044 * t937 + t1061 * t939;
t1088 = t1044 * t939 + t1061 * t937;
t1109 = t1087 * t946 - t1088 * t943;
t1108 = t1087 * t943 + t1088 * t946;
t1102 = pkin(8) * t1060;
t1101 = pkin(8) * t1062;
t1096 = qJ(6) * t1051;
t959 = t974 * t891;
t1077 = -t900 + t959;
t1095 = t1077 * t936;
t1094 = t1077 * t938;
t1038 = qJD(3) ^ 2;
t913 = g(1) * t946 + g(2) * t943;
t947 = qJD(1) ^ 2;
t897 = -pkin(1) * t947 - t913;
t912 = g(1) * t943 - t946 * g(2);
t957 = qJDD(1) * pkin(1) + t912;
t842 = t939 * t897 + t937 * t957;
t823 = -pkin(2) * t947 + qJDD(1) * pkin(7) + t842;
t1035 = pkin(3) * t945;
t962 = -qJ(4) * t942 - t1035;
t896 = t962 * qJD(1);
t993 = g(3) - qJDD(2);
t925 = t945 * t993;
t764 = -qJDD(3) * pkin(3) - t1038 * qJ(4) + (qJD(1) * t896 + t823) * t942 + qJDD(4) + t925;
t866 = -pkin(4) * t989 - pkin(8) * t891;
t970 = t974 ^ 2;
t675 = -t958 * pkin(4) - t970 * pkin(8) + t866 * t891 + t764;
t1093 = -t744 * pkin(5) - t1096 + t675;
t841 = t897 * t937 - t939 * t957;
t767 = t841 * t939 - t842 * t937;
t1014 = t767 * t943;
t978 = t841 * t937 + t939 * t842;
t672 = t946 * t978 + t1014;
t1013 = t767 * t946;
t1092 = -t943 * t978 + t1013;
t903 = qJDD(1) * t939 - t937 * t947;
t1045 = -qJ(2) * t903 - t937 * t993;
t902 = qJDD(1) * t937 + t939 * t947;
t1052 = t946 * t902 + t903 * t943;
t869 = -qJ(2) * t902 + t939 * t993;
t1089 = -pkin(6) * t1052 + t1045 * t943 + t869 * t946;
t844 = -t902 * t943 + t946 * t903;
t1080 = -pkin(6) * t844 + t1045 * t946 - t869 * t943;
t1079 = -2 * qJD(6);
t982 = t945 * t1007;
t1065 = t1042 * t942 + t982;
t1063 = t1043 * t942 + t945 * t892;
t693 = -t839 * t995 + t941 * t949;
t694 = t944 * t949 + t797;
t614 = -t693 * t938 - t694 * t936;
t617 = -t693 * t936 + t694 * t938;
t965 = t945 * t617 + t983;
t1046 = -t614 * t937 + t939 * t965;
t1047 = t939 * t614 + t937 * t965;
t1058 = t1046 * t946 - t1047 * t943;
t1057 = t1046 * t943 + t1047 * t946;
t874 = t974 * t989;
t818 = -t865 - t874;
t875 = t891 * t989;
t816 = t958 - t875;
t1037 = 2 * qJD(4);
t822 = -qJDD(1) * pkin(2) - t947 * pkin(7) + t841;
t961 = t899 + t980;
t758 = -t961 * qJ(4) + (-t900 + t926) * pkin(3) + t822;
t791 = t945 * t823 - t942 * t993;
t770 = -pkin(3) * t1038 + qJDD(3) * qJ(4) + t896 * t989 + t791;
t664 = t1037 * t891 - t938 * t758 + t936 * t770;
t636 = pkin(4) * t1077 + pkin(8) * t818 - t664;
t665 = t974 * t1037 + t936 * t758 + t938 * t770;
t641 = -pkin(4) * t970 + pkin(8) * t958 + t866 * t989 + t665;
t558 = t941 * t636 + t944 * t641;
t769 = pkin(5) * t837 - qJ(6) * t839;
t960 = -t892 * qJ(6) + t1079 * t921 - t837 * t769 + t558;
t890 = t891 ^ 2;
t1036 = pkin(3) * t942;
t1034 = pkin(5) * t944;
t1031 = qJ(6) * t944;
t557 = -t944 * t636 + t941 * t641;
t494 = -t557 * t944 + t558 * t941;
t1030 = t494 * t936;
t1029 = t494 * t938;
t1027 = t675 * t941;
t1026 = t675 * t944;
t1016 = t764 * t936;
t1015 = t764 * t938;
t819 = t900 + t959;
t1011 = t819 * t936;
t1010 = t819 * t938;
t1009 = t822 * t942;
t1008 = t822 * t945;
t1005 = t839 * t921;
t1002 = t900 * t942;
t920 = t945 * t947 * t942;
t909 = -t920 + qJDD(3);
t999 = t909 * t942;
t998 = t909 * t945;
t910 = qJDD(3) + t920;
t997 = t910 * t942;
t932 = t942 ^ 2;
t994 = t932 * t947;
t992 = t728 - t1039;
t933 = t945 ^ 2;
t991 = t932 + t933;
t979 = -qJ(6) * t941 - pkin(4);
t495 = t557 * t941 + t944 * t558;
t789 = t823 * t942 + t925;
t726 = t789 * t942 + t945 * t791;
t852 = -t912 * t943 - t946 * t913;
t973 = t937 * t920;
t972 = t939 * t920;
t968 = t839 * t769 + qJDD(6) + t557;
t906 = qJDD(1) * t946 - t943 * t947;
t967 = -pkin(6) * t906 - g(3) * t943;
t966 = t942 * t617 - t982;
t589 = -t664 * t938 + t665 * t936;
t590 = t664 * t936 + t665 * t938;
t725 = t789 * t945 - t791 * t942;
t851 = t912 * t946 - t913 * t943;
t955 = t942 * t959;
t954 = t945 * t959;
t953 = pkin(5) * t892 + t968;
t948 = 0.2e1 * qJD(6) * t839 - t1093;
t929 = t933 * t947;
t918 = -t929 - t1038;
t917 = t929 - t1038;
t916 = -t994 - t1038;
t915 = -t994 + t1038;
t908 = t929 - t994;
t907 = t929 + t994;
t905 = qJDD(1) * t943 + t946 * t947;
t904 = t991 * qJDD(1);
t901 = -0.2e1 * t926 + t984;
t898 = 0.2e1 * t980 + t985;
t894 = t945 * t910;
t893 = t991 * t986;
t885 = t945 * t900;
t876 = -pkin(6) * t905 + g(3) * t946;
t873 = -t890 - t929;
t872 = -t890 + t929;
t871 = t970 - t929;
t864 = t899 * t945 - t932 * t986;
t863 = -t933 * t986 - t1002;
t862 = qJDD(3) * t937 + t893 * t939;
t861 = -qJDD(3) * t939 + t893 * t937;
t859 = -t916 * t942 - t998;
t858 = -t915 * t942 + t894;
t857 = t918 * t945 - t997;
t856 = t917 * t945 - t999;
t855 = t916 * t945 - t999;
t854 = t918 * t942 + t894;
t850 = t904 * t939 - t907 * t937;
t849 = t904 * t937 + t907 * t939;
t848 = t970 - t890;
t843 = -t898 * t942 + t901 * t945;
t840 = -t929 - t970;
t832 = t864 * t939 - t973;
t831 = t863 * t939 + t973;
t830 = t864 * t937 + t972;
t829 = t863 * t937 - t972;
t828 = t858 * t939 + t937 * t985;
t827 = t856 * t939 + t937 * t984;
t826 = t858 * t937 - t939 * t985;
t825 = t856 * t937 - t939 * t984;
t817 = t865 - t874;
t815 = t875 + t958;
t808 = t970 + t890;
t806 = (-t936 * t891 - t938 * t974) * t989;
t805 = (-t938 * t891 + t936 * t974) * t989;
t801 = t859 * t939 + t898 * t937;
t800 = t857 * t939 - t901 * t937;
t799 = t859 * t937 - t898 * t939;
t798 = t857 * t937 + t901 * t939;
t795 = t865 * t938 + t875 * t936;
t794 = -t865 * t936 + t875 * t938;
t793 = t874 * t938 - t936 * t958;
t792 = -t874 * t936 - t938 * t958;
t790 = t843 * t939 - t908 * t937;
t788 = t843 * t937 + t908 * t939;
t784 = t806 * t945 - t1002;
t783 = -t849 * t943 + t850 * t946;
t782 = t849 * t946 + t850 * t943;
t781 = t871 * t938 + t1011;
t780 = -t872 * t936 + t1094;
t779 = -t873 * t936 + t1010;
t778 = -t871 * t936 + t1010;
t777 = -t872 * t938 - t1095;
t776 = t873 * t938 + t1011;
t775 = -pkin(7) * t855 + t1008;
t774 = -pkin(7) * t854 + t1009;
t763 = -pkin(2) * t855 + t791;
t762 = -pkin(2) * t854 + t789;
t757 = pkin(1) * t993 + qJ(2) * t978;
t756 = t840 * t938 - t1095;
t755 = t840 * t936 + t1094;
t754 = t945 * t795 - t955;
t753 = t945 * t793 + t955;
t743 = t816 * t938 - t818 * t936;
t742 = t815 * t938 - t817 * t936;
t741 = t816 * t936 + t818 * t938;
t740 = -t815 * t936 - t817 * t938;
t732 = -t799 * t943 + t801 * t946;
t731 = -t798 * t943 + t800 * t946;
t730 = t799 * t946 + t801 * t943;
t729 = t798 * t946 + t800 * t943;
t721 = t784 * t939 - t805 * t937;
t720 = t784 * t937 + t805 * t939;
t719 = t781 * t945 + t816 * t942;
t718 = t780 * t945 - t818 * t942;
t717 = t779 * t945 + t817 * t942;
t716 = t779 * t942 - t817 * t945;
t715 = t742 * t945 - t848 * t942;
t714 = t756 * t945 - t815 * t942;
t713 = t756 * t942 + t815 * t945;
t704 = -t744 - t1005;
t688 = t754 * t939 - t794 * t937;
t687 = t753 * t939 - t792 * t937;
t686 = t754 * t937 + t794 * t939;
t685 = t753 * t937 + t792 * t939;
t684 = t743 * t945 - t808 * t942;
t683 = t743 * t942 + t808 * t945;
t678 = -qJ(2) * t849 + t725 * t939;
t677 = qJ(2) * t850 + t725 * t937;
t676 = -qJ(4) * t776 + t1015;
t674 = t726 * t939 + t822 * t937;
t673 = t726 * t937 - t822 * t939;
t670 = -qJ(4) * t755 + t1016;
t659 = t719 * t939 - t778 * t937;
t658 = t718 * t939 - t777 * t937;
t657 = t717 * t939 + t776 * t937;
t656 = t719 * t937 + t778 * t939;
t655 = t718 * t937 + t777 * t939;
t654 = t717 * t937 - t776 * t939;
t653 = -qJ(2) * t799 - t763 * t937 + t775 * t939;
t652 = -qJ(2) * t798 - t762 * t937 + t774 * t939;
t649 = t714 * t939 + t755 * t937;
t648 = t714 * t937 - t755 * t939;
t647 = t715 * t939 - t740 * t937;
t646 = t715 * t937 + t740 * t939;
t645 = -pkin(1) * t855 + qJ(2) * t801 + t763 * t939 + t775 * t937;
t644 = -pkin(1) * t854 + qJ(2) * t800 + t762 * t939 + t774 * t937;
t643 = t684 * t939 + t741 * t937;
t642 = t684 * t937 - t741 * t939;
t638 = -pkin(3) * t776 + t665;
t637 = -pkin(3) * t755 + t664;
t604 = t1026 - t1138;
t603 = -pkin(2) * t716 + pkin(3) * t817 - qJ(4) * t779 - t1016;
t602 = -t673 * t943 + t674 * t946;
t601 = t673 * t946 + t674 * t943;
t600 = t1027 - t1101;
t599 = -pkin(2) * t713 - pkin(3) * t815 - qJ(4) * t756 + t1015;
t588 = -qJ(2) * t673 - (pkin(2) * t937 - pkin(7) * t939) * t725;
t587 = -t654 * t943 + t657 * t946;
t586 = t654 * t946 + t657 * t943;
t577 = -pkin(4) * t1051 + t1027 - t1139;
t576 = t704 * t942 + t1116;
t574 = -t704 * t945 + t1117;
t572 = -t648 * t943 + t649 * t946;
t571 = t648 * t946 + t649 * t943;
t570 = t590 * t945 + t764 * t942;
t569 = t590 * t942 - t764 * t945;
t568 = (-pkin(5) * t921 + t1079) * t839 + t1093;
t567 = -qJ(4) * t741 - t589;
t566 = -pkin(4) * t705 - t1026 + t1102;
t565 = -t642 * t943 + t643 * t946;
t564 = t642 * t946 + t643 * t943;
t563 = t705 * t942 + t1116;
t561 = -t705 * t945 + t1117;
t559 = qJ(2) * t674 - (-pkin(2) * t939 - pkin(7) * t937 - pkin(1)) * t725;
t555 = -pkin(7) * t716 - t638 * t942 + t676 * t945;
t546 = -pkin(7) * t713 - t637 * t942 + t670 * t945;
t545 = (-t704 + t1005) * pkin(5) + t948;
t544 = pkin(5) * t1005 + t1096 + t948;
t541 = -pkin(2) * t683 - pkin(3) * t808 - qJ(4) * t743 - t590;
t532 = qJ(6) * t1039 - t953;
t531 = -pkin(5) * t1039 + t960;
t526 = -pkin(7) * t683 + t1036 * t741 + t567 * t945;
t517 = t576 * t939 + t1119;
t515 = t576 * t937 - t1118;
t513 = qJ(6) * t992 + t953;
t512 = pkin(5) * t992 + t960;
t510 = t570 * t939 + t589 * t937;
t509 = t570 * t937 - t589 * t939;
t508 = t563 * t939 + t1119;
t506 = t563 * t937 - t1118;
t504 = -t1031 * t704 - t545 * t941 - t1101;
t503 = -pkin(2) * t569 + pkin(3) * t764 - qJ(4) * t590;
t502 = -pkin(5) * t1021 + t544 * t944 + t1138;
t501 = -t1156 + t558;
t500 = t545 * t944 + t704 * t979 + t1102;
t499 = t1139 + t544 * t941 + (pkin(4) + t1034) * t1051;
t498 = -t577 * t936 + t604 * t938 + t1164;
t497 = -qJ(2) * t654 + t555 * t939 - t603 * t937;
t496 = t1115 + t557;
t493 = -pkin(5) * t1053 + qJ(6) * t706 + t511;
t492 = -qJ(2) * t648 + t546 * t939 - t599 * t937;
t491 = -t566 * t936 + t600 * t938 - t1123;
t490 = -pkin(1) * t716 + qJ(2) * t657 + t555 * t937 + t603 * t939;
t485 = -pkin(7) * t569 + (-qJ(4) * t945 + t1036) * t589;
t484 = -pkin(4) * t675 + pkin(8) * t495;
t479 = (-t1050 - t1039) * qJ(6) + (-t951 + t892) * pkin(5) + t968 + t1115;
t478 = -pkin(1) * t713 + qJ(2) * t649 + t546 * t937 + t599 * t939;
t477 = -t494 - t1126;
t476 = t531 * t944 - t532 * t941;
t475 = t531 * t941 + t532 * t944;
t474 = qJ(6) * t950 + (t787 + t1039) * pkin(5) - t960 + t1156;
t473 = t1114 + t495;
t472 = -t515 * t943 + t517 * t946;
t470 = t515 * t946 + t517 * t943;
t468 = -qJ(2) * t642 + t526 * t939 - t541 * t937;
t467 = -t577 * t938 - t604 * t936 - t1169;
t466 = -t509 * t943 + t510 * t946;
t465 = t509 * t946 + t510 * t943;
t464 = -t506 * t943 + t508 * t946;
t462 = t506 * t946 + t508 * t943;
t460 = -pkin(1) * t683 + qJ(2) * t643 + t526 * t937 + t541 * t939;
t459 = -pkin(2) * t561 + pkin(3) * t705 - t566 * t938 - t600 * t936 - t1122;
t458 = -t512 * t941 + t513 * t944 - t1126;
t457 = t512 * t944 + t513 * t941 + t1114;
t456 = t495 * t938 - t1030;
t455 = t495 * t936 + t1029;
t454 = -t500 * t936 + t504 * t938 - t1123;
t453 = -pkin(8) * t475 + (pkin(5) * t941 - t1031) * t568;
t452 = t456 * t945 + t675 * t942;
t451 = t456 * t942 - t675 * t945;
t450 = -t499 * t936 + t502 * t938 - t1164;
t449 = t498 * t945 - t501 * t942 + t1170;
t444 = -t475 * t936 + t476 * t938;
t443 = t475 * t938 + t476 * t936;
t442 = -pkin(7) * t561 + t491 * t945 - t496 * t942;
t441 = pkin(8) * t476 + (t979 - t1034) * t568;
t440 = -pkin(2) * t574 + pkin(3) * t704 - t500 * t938 - t504 * t936 - t1122;
t439 = -t499 * t938 - t502 * t936 + t1169;
t438 = -qJ(2) * t509 + t485 * t939 - t503 * t937;
t437 = t444 * t945 + t568 * t942;
t436 = t444 * t942 - t568 * t945;
t435 = -pkin(3) * t455 - pkin(4) * t494;
t434 = -t473 * t936 + t477 * t938 - t1136;
t433 = -pkin(1) * t569 + qJ(2) * t510 + t485 * t937 + t503 * t939;
t432 = -pkin(7) * t574 + t454 * t945 - t479 * t942;
t431 = -t473 * t938 - t477 * t936 + t1146;
t430 = t450 * t945 - t474 * t942 - t1170;
t429 = -t457 * t936 + t458 * t938 - t1136;
t428 = -pkin(8) * t1029 - qJ(4) * t455 - t484 * t936;
t427 = t452 * t939 + t455 * t937;
t426 = t452 * t937 - t455 * t939;
t425 = t449 * t939 - t467 * t937 + t1178;
t424 = t434 * t945 - t511 * t942 - t1147;
t423 = -t457 * t938 - t458 * t936 + t1146;
t422 = t449 * t937 + t467 * t939 - t1176;
t421 = -pkin(3) * t443 - pkin(4) * t475 - pkin(5) * t532 - qJ(6) * t531;
t420 = -qJ(2) * t506 + t442 * t939 - t459 * t937;
t419 = t437 * t939 + t443 * t937;
t418 = t437 * t937 - t443 * t939;
t417 = -pkin(1) * t561 + qJ(2) * t508 + t442 * t937 + t459 * t939;
t416 = t429 * t945 - t493 * t942 - t1147;
t415 = -pkin(2) * t451 + pkin(3) * t675 + pkin(8) * t1030 - qJ(4) * t456 - t484 * t938;
t414 = -qJ(2) * t515 + t432 * t939 - t440 * t937;
t413 = -qJ(4) * t443 - t441 * t936 + t453 * t938;
t412 = -pkin(1) * t574 + qJ(2) * t517 + t432 * t937 + t440 * t939;
t411 = t430 * t939 - t439 * t937 - t1178;
t410 = t430 * t937 + t439 * t939 + t1176;
t409 = -t426 * t943 + t427 * t946;
t408 = t426 * t946 + t427 * t943;
t407 = -pkin(7) * t451 + t428 * t945 - t435 * t942;
t406 = t424 * t939 - t431 * t937 - t1157;
t405 = t424 * t937 + t431 * t939 + t1151;
t404 = -pkin(2) * t436 + pkin(3) * t568 - qJ(4) * t444 - t441 * t938 - t453 * t936;
t403 = -t418 * t943 + t419 * t946;
t402 = t418 * t946 + t419 * t943;
t401 = t416 * t939 - t423 * t937 - t1157;
t400 = t416 * t937 + t423 * t939 + t1151;
t399 = -pkin(7) * t436 + t413 * t945 - t421 * t942;
t398 = -qJ(2) * t426 + t407 * t939 - t415 * t937;
t397 = -pkin(1) * t451 + qJ(2) * t427 + t407 * t937 + t415 * t939;
t396 = -qJ(2) * t418 + t399 * t939 - t404 * t937;
t395 = -pkin(1) * t436 + qJ(2) * t419 + t399 * t937 + t404 * t939;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t905, -t906, 0, t852, 0, 0, 0, 0, 0, 0, -t1052, -t844, 0, t672, 0, 0, 0, 0, 0, 0, t731, t732, t783, t602, 0, 0, 0, 0, 0, 0, t572, t587, t565, t466, 0, 0, 0, 0, 0, 0, t464, t471, t1150, t409, 0, 0, 0, 0, 0, 0, t472, t1150, -t471, t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t906, -t905, 0, t851, 0, 0, 0, 0, 0, 0, t844, -t1052, 0, -t1092, 0, 0, 0, 0, 0, 0, t729, t730, t782, t601, 0, 0, 0, 0, 0, 0, t571, t586, t564, t465, 0, 0, 0, 0, 0, 0, t462, -t461, t1149, t408, 0, 0, 0, 0, 0, 0, t470, t1149, t461, t402; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t993, 0, 0, 0, 0, 0, 0, t854, t855, 0, -t725, 0, 0, 0, 0, 0, 0, t713, t716, t683, t569, 0, 0, 0, 0, 0, 0, t561, -t560, t1132, t451, 0, 0, 0, 0, 0, 0, t574, t1132, t560, t436; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t906, 0, -t905, 0, t967, -t876, -t851, -pkin(6) * t851, 0, 0, t844, 0, -t1052, 0, t1080, -t1089, t1092, pkin(6) * t1092 + qJ(2) * t1013 - t757 * t943, -t830 * t943 + t832 * t946, -t788 * t943 + t790 * t946, -t826 * t943 + t828 * t946, -t829 * t943 + t831 * t946, -t825 * t943 + t827 * t946, -t861 * t943 + t862 * t946, -pkin(6) * t729 - t644 * t943 + t652 * t946, -pkin(6) * t730 - t645 * t943 + t653 * t946, -pkin(6) * t782 - t677 * t943 + t678 * t946, -pkin(6) * t601 - t559 * t943 + t588 * t946, -t686 * t943 + t688 * t946, -t646 * t943 + t647 * t946, -t655 * t943 + t658 * t946, -t685 * t943 + t687 * t946, -t656 * t943 + t659 * t946, -t720 * t943 + t721 * t946, -pkin(6) * t571 - t478 * t943 + t492 * t946, -pkin(6) * t586 - t490 * t943 + t497 * t946, -pkin(6) * t564 - t460 * t943 + t468 * t946, -pkin(6) * t465 - t433 * t943 + t438 * t946, t1058, -t1174, t1142, t1111, t1172, t1109, -pkin(6) * t462 - t417 * t943 + t420 * t946, -t422 * t943 + t425 * t946 + t1180, -t405 * t943 + t406 * t946 - t1167, -pkin(6) * t408 - t397 * t943 + t398 * t946, t1058, t1142, t1174, t1109, -t1172, t1111, -pkin(6) * t470 - t412 * t943 + t414 * t946, -t400 * t943 + t401 * t946 - t1167, -t410 * t943 + t411 * t946 - t1180, -pkin(6) * t402 - t395 * t943 + t396 * t946; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t905, 0, t906, 0, t876, t967, t852, pkin(6) * t852, 0, 0, t1052, 0, t844, 0, t1089, t1080, t672, pkin(6) * t672 + qJ(2) * t1014 + t757 * t946, t830 * t946 + t832 * t943, t788 * t946 + t790 * t943, t826 * t946 + t828 * t943, t829 * t946 + t831 * t943, t825 * t946 + t827 * t943, t861 * t946 + t862 * t943, pkin(6) * t731 + t644 * t946 + t652 * t943, pkin(6) * t732 + t645 * t946 + t653 * t943, pkin(6) * t783 + t677 * t946 + t678 * t943, pkin(6) * t602 + t559 * t946 + t588 * t943, t686 * t946 + t688 * t943, t646 * t946 + t647 * t943, t655 * t946 + t658 * t943, t685 * t946 + t687 * t943, t656 * t946 + t659 * t943, t720 * t946 + t721 * t943, pkin(6) * t572 + t478 * t946 + t492 * t943, pkin(6) * t587 + t490 * t946 + t497 * t943, pkin(6) * t565 + t460 * t946 + t468 * t943, pkin(6) * t466 + t433 * t946 + t438 * t943, t1057, t1175, t1141, t1110, -t1173, t1108, pkin(6) * t464 + t417 * t946 + t420 * t943, t422 * t946 + t425 * t943 + t1179, t405 * t946 + t406 * t943 + t1166, pkin(6) * t409 + t397 * t946 + t398 * t943, t1057, t1141, -t1175, t1108, t1173, t1110, pkin(6) * t472 + t412 * t946 + t414 * t943, t400 * t946 + t401 * t943 + t1166, t410 * t946 + t411 * t943 - t1179, pkin(6) * t403 + t395 * t946 + t396 * t943; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t912, t913, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t903 - t841, -pkin(1) * t902 - t842, 0, -pkin(1) * t767, t961 * t942, t898 * t945 + t901 * t942, t915 * t945 + t997, -t942 * t980 + t885, t917 * t942 + t998, 0, pkin(1) * t798 + pkin(2) * t901 + pkin(7) * t857 - t1008, pkin(1) * t799 - pkin(2) * t898 + pkin(7) * t859 + t1009, pkin(1) * t849 + pkin(2) * t907 + pkin(7) * t904 + t726, pkin(1) * t673 - pkin(2) * t822 + pkin(7) * t726, t942 * t795 + t954, t742 * t942 + t848 * t945, t780 * t942 + t818 * t945, t942 * t793 - t954, t781 * t942 - t816 * t945, t806 * t942 + t885, pkin(1) * t648 - pkin(2) * t755 + pkin(7) * t714 + t637 * t945 + t670 * t942, pkin(1) * t654 - pkin(2) * t776 + pkin(7) * t717 + t638 * t945 + t676 * t942, pkin(1) * t642 + pkin(7) * t684 + t567 * t942 + (-pkin(2) - t1035) * t741, pkin(1) * t509 + pkin(7) * t570 + (-pkin(2) + t962) * t589, t966, t1152, t1113, t1065, -t1153, t1063, pkin(1) * t506 + pkin(7) * t563 + t491 * t942 + t496 * t945 - t1128, t498 * t942 + t501 * t945 - t1177, t434 * t942 + t511 * t945 + t1155, pkin(1) * t426 - pkin(2) * t455 + pkin(7) * t452 + t428 * t942 + t435 * t945, t966, t1113, -t1152, t1063, t1153, t1065, pkin(1) * t515 + pkin(7) * t576 + t454 * t942 + t479 * t945 - t1128, t429 * t942 + t493 * t945 + t1155, t450 * t942 + t474 * t945 + t1177, pkin(1) * t418 - pkin(2) * t443 + pkin(7) * t437 + t413 * t942 + t421 * t945;];
tauB_reg  = t1;
