% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPPR7_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR7_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR7_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR7_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:01:05
% EndTime: 2019-03-09 16:01:29
% DurationCPUTime: 10.82s
% Computational Cost: add. (11119->630), mult. (26164->818), div. (0->0), fcn. (17820->8), ass. (0->288)
t289 = cos(qJ(3));
t360 = qJD(3) * t289;
t290 = cos(qJ(2));
t366 = qJD(1) * t290;
t461 = t289 * t366 - t360;
t287 = sin(qJ(3));
t343 = t287 * t366;
t362 = qJD(3) * t287;
t460 = t343 - t362;
t288 = sin(qJ(2));
t367 = qJD(1) * t288;
t344 = t287 * t367;
t358 = t289 * qJD(2);
t229 = t344 - t358;
t342 = t289 * t367;
t365 = qJD(2) * t287;
t231 = t342 + t365;
t283 = sin(pkin(10));
t284 = cos(pkin(10));
t148 = t229 * t283 + t231 * t284;
t286 = sin(qJ(6));
t325 = -t229 * t284 + t283 * t231;
t416 = cos(qJ(6));
t69 = -t148 * t416 + t286 * t325;
t459 = t69 ^ 2;
t434 = t148 * t286 + t325 * t416;
t458 = t434 ^ 2;
t263 = -qJD(3) + t366;
t256 = qJD(6) + t263;
t457 = t69 * t256;
t456 = t256 * t434;
t411 = pkin(8) - qJ(5);
t247 = t411 * t289;
t415 = pkin(7) * t287;
t345 = -pkin(3) - t415;
t322 = -pkin(4) + t345;
t383 = t289 * t290;
t316 = pkin(2) * t288 - pkin(8) * t290;
t235 = t316 * qJD(1);
t384 = t289 * t235;
t455 = t384 - (-qJ(5) * t383 + t288 * t322) * qJD(1) + qJD(3) * t247 - t287 * qJD(5);
t208 = t287 * t235;
t270 = qJ(4) * t367;
t357 = t289 * qJD(5);
t385 = t288 * t289;
t386 = t287 * t290;
t454 = t208 + t270 + (-pkin(7) * t385 + qJ(5) * t386) * qJD(1) + t362 * t411 + t357;
t412 = t69 * t434;
t375 = t283 * t461 - t460 * t284;
t221 = t283 * t287 + t284 * t289;
t300 = t290 * t221;
t374 = qJD(1) * t300 - t221 * qJD(3);
t453 = -t458 + t459;
t363 = qJD(2) * t290;
t298 = t287 * t363 + t288 * t360;
t353 = qJD(2) * qJD(3);
t172 = qJD(1) * t298 + t287 * t353;
t251 = t263 * qJD(4);
t354 = qJD(1) * qJD(2);
t268 = t288 * t354;
t260 = qJ(4) * t268;
t244 = -pkin(2) * t290 - pkin(8) * t288 - pkin(1);
t210 = t244 * qJD(1);
t236 = t316 * qJD(2);
t212 = qJD(1) * t236;
t274 = pkin(7) * t366;
t249 = qJD(2) * pkin(8) + t274;
t320 = pkin(7) * t268;
t296 = -t210 * t360 - t287 * t212 + t249 * t362 + t289 * t320;
t63 = -t251 + t260 - t296;
t41 = qJ(5) * t172 + qJD(5) * t229 + t63;
t330 = t290 * t354;
t361 = qJD(3) * t288;
t337 = t287 * t361;
t171 = qJD(1) * t337 + (-t330 - t353) * t289;
t417 = pkin(3) + pkin(4);
t84 = -t210 * t362 + t289 * t212 - t249 * t360 + t287 * t320;
t43 = t171 * qJ(5) - t231 * qJD(5) - t268 * t417 - t84;
t15 = t283 * t43 + t284 * t41;
t92 = -t171 * t283 - t284 * t172;
t11 = -pkin(9) * t92 + t15;
t152 = t289 * t210 - t287 * t249;
t111 = t231 * qJ(5) + t152;
t81 = t263 * t417 + qJD(4) - t111;
t153 = t210 * t287 + t249 * t289;
t112 = qJ(5) * t229 + t153;
t253 = t263 * qJ(4);
t94 = t112 - t253;
t36 = -t283 * t94 + t284 * t81;
t444 = pkin(9) * t148;
t29 = pkin(5) * t263 + t36 - t444;
t37 = t283 * t81 + t284 * t94;
t429 = pkin(9) * t325;
t30 = t37 - t429;
t6 = t286 * t29 + t30 * t416;
t328 = t283 * t41 - t284 * t43;
t93 = -t171 * t284 + t172 * t283;
t9 = -pkin(5) * t268 - pkin(9) * t93 - t328;
t2 = -qJD(6) * t6 - t286 * t11 + t416 * t9;
t273 = pkin(7) * t367;
t285 = qJD(2) * pkin(2);
t248 = t273 - t285;
t135 = t229 * pkin(3) - t231 * qJ(4) + t248;
t96 = -pkin(4) * t229 + qJD(5) - t135;
t55 = pkin(5) * t325 + t96;
t452 = t55 * t69 + t2;
t451 = t325 ^ 2;
t402 = t283 * t454 + t284 * t455;
t401 = t283 * t455 - t284 * t454;
t449 = t263 * t325;
t331 = qJD(6) * t416;
t359 = qJD(6) * t286;
t1 = t416 * t11 + t286 * t9 + t29 * t331 - t30 * t359;
t448 = t434 * t55 - t1;
t24 = t148 * t359 + t286 * t92 + t325 * t331 - t416 * t93;
t447 = -t24 + t456;
t390 = t231 * t263;
t394 = t229 * t263;
t446 = t287 * (t172 - t390) + t289 * (t171 - t394);
t445 = t148 ^ 2;
t443 = -pkin(5) * t367 - pkin(9) * t374 - t402;
t442 = -pkin(9) * t375 - t401;
t441 = t148 * t263;
t439 = t148 * t325;
t435 = -qJ(4) * t461 + t287 * qJD(4) + t274;
t395 = t172 * t289;
t396 = t171 * t287;
t433 = t288 * ((t229 * t287 - t231 * t289) * qJD(3) - t395 + t396) - (t229 * t289 + t231 * t287) * t363;
t324 = t229 + t358;
t432 = qJD(1) * (-t263 * t386 + t288 * t324) + t263 * t362;
t281 = t288 ^ 2;
t305 = qJD(1) * t281 - t263 * t290;
t335 = t263 * t360;
t431 = qJD(2) * (t229 * t288 + t287 * t305) - t290 * t172 - t288 * t335;
t430 = -0.2e1 * t354;
t131 = t153 - t253;
t321 = pkin(3) * t268;
t77 = -t84 - t321;
t428 = t131 * t263 + t77;
t301 = -t153 * t263 + t84;
t348 = t417 * t287;
t379 = -qJD(3) * t348 + t343 * t417 + t435;
t424 = t172 + t390;
t364 = qJD(2) * t288;
t423 = qJ(4) * t364 - t290 * qJD(4);
t339 = t290 * t358;
t422 = -t337 + t339;
t355 = qJD(4) - t152;
t418 = t231 ^ 2;
t259 = t263 ^ 2;
t414 = pkin(8) * t231;
t413 = pkin(8) * t263;
t246 = t411 * t287;
t163 = t284 * t246 - t247 * t283;
t306 = t283 * t289 - t284 * t287;
t127 = pkin(9) * t306 + t163;
t164 = t283 * t246 + t284 * t247;
t128 = -pkin(9) * t221 + t164;
t52 = t286 * t127 + t128 * t416;
t410 = qJD(6) * t52 - t286 * t442 + t416 * t443;
t51 = t127 * t416 - t286 * t128;
t409 = -qJD(6) * t51 + t286 * t443 + t416 * t442;
t266 = pkin(7) * t383;
t372 = qJD(3) * t266 + t244 * t362;
t60 = (-qJ(5) * t363 - t236) * t289 + (qJ(5) * t362 + qJD(2) * t322 - t357) * t288 + t372;
t373 = t287 * t236 + t244 * t360;
t61 = (-pkin(7) * qJD(2) + qJ(5) * qJD(3)) * t385 + (qJD(5) * t288 + (-pkin(7) * qJD(3) + qJ(5) * qJD(2)) * t290) * t287 + t373 + t423;
t28 = t283 * t60 + t284 * t61;
t142 = -t286 * t221 - t306 * t416;
t408 = qJD(6) * t142 - t286 * t374 - t375 * t416;
t68 = t172 * pkin(3) + pkin(7) * t330 + t171 * qJ(4) - t231 * qJD(4);
t407 = t68 * t287;
t406 = t68 * t289;
t405 = t221 * t331 - t286 * t375 - t306 * t359 + t374 * t416;
t237 = -qJ(4) * t283 - t284 * t417;
t233 = -pkin(5) + t237;
t238 = qJ(4) * t284 - t283 * t417;
t150 = t233 * t416 - t286 * t238;
t302 = t286 * t283 - t284 * t416;
t48 = -t111 * t283 + t284 * t112;
t34 = t48 - t429;
t49 = t284 * t111 + t283 * t112;
t35 = t49 + t444;
t404 = -qJD(4) * t302 + qJD(6) * t150 - t286 * t34 - t35 * t416;
t151 = t286 * t233 + t238 * t416;
t224 = t283 * t416 + t286 * t284;
t403 = -qJD(4) * t224 - qJD(6) * t151 + t286 * t35 - t34 * t416;
t400 = -pkin(5) * t375 + t379;
t398 = t135 * t231;
t391 = t231 * t229;
t389 = t248 * t287;
t388 = t248 * t289;
t277 = t287 * qJ(4);
t387 = t287 * t288;
t293 = qJD(1) ^ 2;
t382 = t290 * t293;
t292 = qJD(2) ^ 2;
t381 = t292 * t288;
t380 = t292 * t290;
t265 = pkin(7) * t386;
t280 = t290 * pkin(3);
t139 = t290 * pkin(4) + t265 + t280 + (-qJ(5) * t288 - t244) * t289;
t183 = t287 * t244 + t266;
t168 = -qJ(4) * t290 + t183;
t149 = qJ(5) * t387 + t168;
t65 = t283 * t139 + t284 * t149;
t378 = t256 * t224;
t377 = t256 * t302;
t376 = pkin(3) * t460 + t435;
t157 = t231 * pkin(3) + t229 * qJ(4);
t370 = qJ(4) * t339 + qJD(4) * t385;
t368 = -t290 ^ 2 + t281;
t352 = t287 * t413;
t351 = t289 * t413;
t239 = -t289 * pkin(3) - pkin(2) - t277;
t350 = pkin(8) * t358;
t349 = pkin(7) * t363;
t346 = t288 * t382;
t334 = t263 * t367;
t333 = t229 ^ 2 - t418;
t27 = -t283 * t61 + t284 * t60;
t327 = t286 * t93 + t416 * t92;
t326 = pkin(1) * t430;
t64 = t284 * t139 - t149 * t283;
t182 = t244 * t289 - t265;
t217 = t289 * pkin(4) - t239;
t323 = -t231 + t365;
t319 = t290 * t268;
t318 = -pkin(7) - t348;
t120 = -pkin(4) * t231 - t157;
t317 = t288 * t345;
t315 = -t289 * t236 + t372;
t314 = -t283 * t36 + t284 * t37;
t313 = (qJD(3) * t229 - t171) * pkin(8);
t129 = pkin(3) * t263 + t355;
t312 = t129 * t289 - t131 * t287;
t311 = t148 * t283 - t284 * t325;
t310 = -t152 * t289 - t153 * t287;
t174 = -pkin(7) * t342 + t208;
t194 = t221 * t288;
t46 = pkin(5) * t290 - pkin(9) * t194 + t64;
t193 = t283 * t385 - t284 * t387;
t50 = -pkin(9) * t193 + t65;
t22 = -t286 * t50 + t416 * t46;
t23 = t286 * t46 + t416 * t50;
t119 = -t286 * t193 + t194 * t416;
t181 = (-t263 - t366) * t364;
t262 = qJ(4) * t385;
t167 = t288 * t318 + t262;
t297 = -t287 * t394 - t395;
t47 = -pkin(4) * t172 - t68;
t109 = (-t288 * t358 - t290 * t362) * pkin(7) + t373;
t25 = -qJD(6) * t69 + t327;
t31 = pkin(5) * t92 + t47;
t295 = t172 * t387 + t229 * t298;
t294 = -t152 * t263 + t296;
t82 = (-t289 * t417 - t277) * t361 + t318 * t363 + t370;
t192 = -t262 + (pkin(3) * t287 + pkin(7)) * t288;
t173 = pkin(7) * t344 + t384;
t169 = -t182 + t280;
t159 = pkin(8) * t395;
t158 = pkin(5) * t221 + t217;
t156 = qJD(1) * t317 - t384;
t155 = t174 + t270;
t141 = t221 * t416 - t286 * t306;
t124 = qJD(2) * t300 + t306 * t361;
t123 = t283 * t422 - t284 * t298;
t118 = t193 * t416 + t194 * t286;
t117 = -t171 - t394;
t113 = t193 * pkin(5) + t167;
t110 = t364 * t415 - t315;
t108 = pkin(3) * t298 + qJ(4) * t337 + t349 - t370;
t98 = -t335 + (t263 * t383 + t288 * t323) * qJD(1);
t97 = qJD(2) * t317 + t315;
t91 = t109 + t423;
t80 = -t289 * t390 - t396;
t76 = -t171 * t385 + t231 * t422;
t62 = -pkin(5) * t148 + t120;
t59 = t263 * t337 + t171 * t290 + (t231 * t288 + t289 * t305) * qJD(2);
t45 = t123 * pkin(5) + t82;
t33 = qJD(6) * t119 + t123 * t416 + t286 * t124;
t32 = t286 * t123 - t124 * t416 + t193 * t331 + t194 * t359;
t21 = -pkin(9) * t123 + t28;
t18 = -pkin(5) * t364 - pkin(9) * t124 + t27;
t5 = -t286 * t30 + t29 * t416;
t4 = -qJD(6) * t23 + t18 * t416 - t286 * t21;
t3 = qJD(6) * t22 + t286 * t18 + t21 * t416;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t319, t368 * t430, t380, -0.2e1 * t319, -t381, 0, -pkin(7) * t380 + t288 * t326, pkin(7) * t381 + t290 * t326, 0, 0, t76, t433, t59, t295, -t431, t181, -t110 * t263 - t84 * t290 + (pkin(7) * t172 + t248 * t360) * t288 + ((pkin(7) * t229 + t389) * t290 + (t152 + (t182 + t265) * qJD(1)) * t288) * qJD(2), t109 * t263 - t296 * t290 + (-pkin(7) * t171 - t248 * t362) * t288 + ((pkin(7) * t231 + t388) * t290 + (-t153 + (-t183 + t266) * qJD(1)) * t288) * qJD(2), -t109 * t229 - t110 * t231 + t182 * t171 - t183 * t172 + t310 * t363 + (t287 * t296 - t289 * t84 + (t152 * t287 - t153 * t289) * qJD(3)) * t288, t153 * t109 + t152 * t110 + t84 * t182 - t296 * t183 + (t248 + t273) * t349, t76, t59, -t433, t181, t431, t295, t108 * t229 + t192 * t172 + t97 * t263 + (t135 * t365 + t77) * t290 + (t135 * t360 + t407 + (-qJD(1) * t169 - t129) * qJD(2)) * t288, -t168 * t172 - t169 * t171 - t91 * t229 + t97 * t231 + t312 * t363 + (-t287 * t63 + t289 * t77 + (-t129 * t287 - t131 * t289) * qJD(3)) * t288, -t108 * t231 + t192 * t171 - t91 * t263 + (-t135 * t358 - t63) * t290 + (t135 * t362 - t406 + (qJD(1) * t168 + t131) * qJD(2)) * t288, t108 * t135 + t129 * t97 + t131 * t91 + t168 * t63 + t169 * t77 + t192 * t68, t124 * t148 + t194 * t93, -t123 * t148 - t124 * t325 - t193 * t93 - t194 * t92, t124 * t263 + t93 * t290 + (-qJD(1) * t194 - t148) * t364, t123 * t325 + t193 * t92, -t123 * t263 - t92 * t290 + (qJD(1) * t193 + t325) * t364, t181, t96 * t123 - t328 * t290 + t82 * t325 + t167 * t92 + t47 * t193 + t27 * t263 + (-qJD(1) * t64 - t36) * t364, t96 * t124 + t82 * t148 - t15 * t290 + t167 * t93 + t47 * t194 - t28 * t263 + (qJD(1) * t65 + t37) * t364, -t123 * t37 - t124 * t36 - t148 * t27 - t15 * t193 + t194 * t328 - t28 * t325 - t64 * t93 - t65 * t92, t15 * t65 + t167 * t47 + t27 * t36 + t28 * t37 - t328 * t64 + t82 * t96, -t119 * t24 + t32 * t69, t118 * t24 - t119 * t25 + t32 * t434 + t33 * t69, -t24 * t290 - t32 * t256 + (-qJD(1) * t119 + t69) * t364, t118 * t25 + t33 * t434, -t25 * t290 - t33 * t256 + (qJD(1) * t118 + t434) * t364 (-t256 - t366) * t364, t113 * t25 + t31 * t118 + t2 * t290 + t4 * t256 + t55 * t33 + t45 * t434 + (-qJD(1) * t22 - t5) * t364, -t1 * t290 - t113 * t24 + t31 * t119 - t3 * t256 - t55 * t32 - t45 * t69 + (qJD(1) * t23 + t6) * t364, -t1 * t118 - t119 * t2 + t22 * t24 - t23 * t25 - t3 * t434 + t32 * t5 - t33 * t6 + t4 * t69, t1 * t23 + t113 * t31 + t2 * t22 + t3 * t6 + t4 * t5 + t45 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346, t368 * t293, 0, t346, 0, 0, t293 * pkin(1) * t288, pkin(1) * t382, 0, 0, t80, -t446, t98, t297, t432, t334, -pkin(2) * t172 + t173 * t263 + (t351 + t389) * qJD(3) + ((-pkin(8) * t365 - t152) * t288 + (-pkin(7) * t324 - t389) * t290) * qJD(1), pkin(2) * t171 - t174 * t263 + (-t352 + t388) * qJD(3) + ((t153 - t350) * t288 + (pkin(7) * t323 - t388) * t290) * qJD(1), t173 * t231 + t174 * t229 - t159 + (t152 * t366 - t296 + (-t152 + t414) * qJD(3)) * t289 + (t313 - t301) * t287, -t152 * t173 - t153 * t174 + (-t248 - t285) * t274 + (qJD(3) * t310 - t84 * t287 - t289 * t296) * pkin(8), t80, t98, t446, t334, -t432, t297, -t156 * t263 + t239 * t172 - t406 - t376 * t229 + (t135 * t287 + t351) * qJD(3) + (t129 * t288 + (-pkin(8) * t364 - t135 * t290) * t287) * qJD(1), t155 * t229 - t156 * t231 - t159 + (-t129 * t366 + t63 + (t129 + t414) * qJD(3)) * t289 + (t313 + t428) * t287, t155 * t263 + t239 * t171 - t407 + t376 * t231 + (-t135 * t289 + t352) * qJD(3) + (t135 * t383 + (-t131 + t350) * t288) * qJD(1), -t129 * t156 - t131 * t155 + t68 * t239 - t376 * t135 + (qJD(3) * t312 + t77 * t287 + t63 * t289) * pkin(8), -t148 * t374 - t306 * t93, t148 * t375 - t93 * t221 + t306 * t92 + t325 * t374, -t374 * t263 + (qJD(2) * t306 + t148) * t367, t92 * t221 - t325 * t375, t375 * t263 + (qJD(2) * t221 - t325) * t367, t334, t217 * t92 + t47 * t221 - t375 * t96 + t402 * t263 + t379 * t325 + (-qJD(2) * t163 + t36) * t367, t217 * t93 - t47 * t306 - t374 * t96 - t401 * t263 + t379 * t148 + (qJD(2) * t164 - t37) * t367, -t148 * t402 - t15 * t221 - t163 * t93 - t164 * t92 - t306 * t328 - t325 * t401 + t36 * t374 + t37 * t375, t15 * t164 - t163 * t328 + t47 * t217 + t36 * t402 + t37 * t401 + t379 * t96, -t24 * t142 + t405 * t69, t24 * t141 - t142 * t25 + t405 * t434 + t408 * t69, -t405 * t256 + (-qJD(2) * t142 - t69) * t367, t25 * t141 + t408 * t434, -t408 * t256 + (qJD(2) * t141 - t434) * t367, t256 * t367, t31 * t141 + t158 * t25 + t400 * t434 + t408 * t55 - t410 * t256 + (-qJD(2) * t51 + t5) * t367, t31 * t142 - t158 * t24 - t400 * t69 - t405 * t55 + t409 * t256 + (qJD(2) * t52 - t6) * t367, -t1 * t141 - t142 * t2 + t24 * t51 - t25 * t52 + t405 * t5 - t408 * t6 + t409 * t434 - t410 * t69, t1 * t52 + t31 * t158 + t2 * t51 + t400 * t55 - t409 * t6 - t410 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t391, -t333, t117, -t391, -t424, t268, -t231 * t248 + t301, t229 * t248 + t294, 0, 0, t391, t117, t333, t268, t424, -t391, -t157 * t229 + t301 + 0.2e1 * t321 - t398, pkin(3) * t171 - t172 * qJ(4) + (t131 - t153) * t231 + (t129 - t355) * t229, -t135 * t229 + t157 * t231 - 0.2e1 * t251 + 0.2e1 * t260 - t294, -t77 * pkin(3) + t63 * qJ(4) - t129 * t153 + t131 * t355 - t135 * t157, -t439, -t445 + t451, -t93 - t449, t439, t92 - t441, t268, -t237 * t268 - t120 * t325 + t96 * t148 + (-qJD(4) * t283 - t48) * t263 + t328, t238 * t268 - t120 * t148 - t96 * t325 + (-qJD(4) * t284 + t49) * t263 + t15, qJD(4) * t311 - t237 * t93 - t238 * t92 + (t36 + t49) * t325 + (-t37 + t48) * t148, qJD(4) * t314 - t96 * t120 + t15 * t238 - t237 * t328 - t36 * t48 - t37 * t49, t412, -t453, -t447, -t412, t25 + t457, t268, -t150 * t268 + t256 * t403 - t434 * t62 - t452, t151 * t268 - t256 * t404 + t62 * t69 - t448, t150 * t24 - t151 * t25 + (-t404 + t5) * t434 + (t403 + t6) * t69, t1 * t151 + t2 * t150 + t403 * t5 + t404 * t6 - t55 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t268 + t391, t117, -t259 - t418, t398 + t428, 0, 0, 0, 0, 0, 0, -t231 * t325 - t259 * t283 - t268 * t284, -t148 * t231 - t259 * t284 + t268 * t283, t263 * t311 - t283 * t92 - t284 * t93, t15 * t283 - t96 * t231 + t263 * t314 - t284 * t328, 0, 0, 0, 0, 0, 0, -t231 * t434 - t256 * t378 + t268 * t302, t224 * t268 + t231 * t69 + t256 * t377, -t224 * t25 - t24 * t302 + t377 * t434 - t378 * t69, t1 * t224 - t2 * t302 - t55 * t231 - t377 * t6 - t378 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92 + t441, t93 - t449, -t445 - t451, t148 * t36 + t325 * t37 + t47, 0, 0, 0, 0, 0, 0, t25 - t457, -t24 - t456, -t458 - t459, t434 * t6 - t5 * t69 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, t453, t447, t412, -t327 - (-qJD(6) + t256) * t69, -t268, t6 * t256 + t452, t256 * t5 + t448, 0, 0;];
tauc_reg  = t7;
