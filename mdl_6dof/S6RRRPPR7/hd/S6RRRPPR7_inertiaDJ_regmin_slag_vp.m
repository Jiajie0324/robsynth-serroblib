% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPPR7_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR7_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR7_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR7_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:01:05
% EndTime: 2019-03-09 16:01:15
% DurationCPUTime: 2.88s
% Computational Cost: add. (2621->321), mult. (6358->557), div. (0->0), fcn. (5357->8), ass. (0->169)
t132 = sin(pkin(10));
t133 = cos(pkin(10));
t135 = sin(qJ(3));
t137 = cos(qJ(3));
t226 = t132 * t135 + t133 * t137;
t223 = t226 * qJD(3);
t136 = sin(qJ(2));
t211 = t136 * t137;
t112 = qJ(4) * t211;
t139 = -pkin(3) - pkin(4);
t189 = t139 * t135;
t169 = -pkin(7) + t189;
t60 = t169 * t136 + t112;
t231 = t223 * t60;
t124 = t135 * qJ(4);
t224 = -t137 * pkin(3) - t124;
t96 = -pkin(2) + t224;
t86 = t137 * pkin(4) - t96;
t230 = t223 * t86;
t123 = qJD(2) * t136;
t138 = cos(qJ(2));
t201 = qJD(3) * t138;
t184 = t137 * t201;
t229 = t135 * t123 - t184;
t204 = qJD(2) * t138;
t181 = t135 * t204;
t178 = t137 * t204;
t98 = t132 * t178;
t158 = t133 * t181 - t98;
t140 = t136 * t223 + t158;
t228 = -0.4e1 * t136;
t122 = qJD(3) * t137;
t108 = t132 * t122;
t203 = qJD(3) * t135;
t227 = -t133 * t203 + t108;
t120 = qJ(4) * t123;
t196 = t138 * qJD(4);
t225 = t120 - t196;
t130 = t137 ^ 2;
t207 = t135 ^ 2 - t130;
t175 = t207 * qJD(3);
t186 = t135 * t201;
t205 = qJD(2) * t137;
t148 = t136 * t205 + t186;
t219 = pkin(8) * t138;
t167 = pkin(2) * t136 - t219;
t93 = t167 * qJD(2);
t218 = t136 * pkin(8);
t168 = -t138 * pkin(2) - t218;
t99 = -pkin(1) + t168;
t215 = t99 * t122 + t135 * t93;
t35 = t148 * pkin(7) - t215;
t72 = -t112 + (t135 * pkin(3) + pkin(7)) * t136;
t208 = qJ(4) * t122 + t135 * qJD(4);
t77 = pkin(3) * t203 - t208;
t222 = (-t138 * t96 + t218) * qJD(2) - qJD(3) * t72 - t136 * t77;
t134 = sin(qJ(6));
t217 = t138 * pkin(7);
t113 = t135 * t217;
t127 = t138 * pkin(3);
t52 = t138 * pkin(4) + t113 + t127 + (-qJ(5) * t136 - t99) * t137;
t212 = t135 * t136;
t114 = t137 * t217;
t214 = t135 * t99 + t114;
t61 = -t138 * qJ(4) + t214;
t56 = qJ(5) * t212 + t61;
t22 = -t132 * t56 + t133 * t52;
t73 = t226 * t136;
t15 = t138 * pkin(5) - t73 * pkin(9) + t22;
t102 = t132 * t211;
t166 = t133 * t212 - t102;
t23 = t132 * t52 + t133 * t56;
t16 = t166 * pkin(9) + t23;
t220 = cos(qJ(6));
t156 = t134 * t15 + t220 * t16;
t44 = t227 * t136 + t204 * t226;
t172 = -t229 * pkin(7) - t137 * t93 + t99 * t203;
t197 = t137 * qJD(5);
t20 = -qJ(5) * t178 + (qJ(5) * t203 + t139 * qJD(2) - t197) * t136 + t172;
t18 = t133 * t20;
t21 = (-pkin(7) * qJD(2) + qJ(5) * qJD(3)) * t211 + (qJD(5) * t136 + (-pkin(7) * qJD(3) + qJ(5) * qJD(2)) * t138) * t135 + t215 + t225;
t9 = -t132 * t21 + t18;
t4 = -pkin(5) * t123 - t44 * pkin(9) + t9;
t10 = t132 * t20 + t133 * t21;
t8 = t140 * pkin(9) + t10;
t2 = -t156 * qJD(6) - t134 * t8 + t220 * t4;
t221 = 0.2e1 * qJD(4);
t216 = pkin(8) - qJ(5);
t101 = t216 * t137;
t146 = qJD(3) * t101 - t135 * qJD(5);
t76 = -t216 * t203 - t197;
t46 = t132 * t146 + t133 * t76;
t100 = t216 * t135;
t59 = t132 * t100 + t133 * t101;
t213 = t133 * t135;
t198 = t137 * qJD(4);
t210 = qJ(4) * t178 + t136 * t198;
t129 = t136 ^ 2;
t206 = -t138 ^ 2 + t129;
t202 = qJD(3) * t136;
t200 = qJD(6) * t134;
t199 = t132 * qJD(4);
t195 = -0.2e1 * pkin(1) * qJD(2);
t194 = -0.2e1 * pkin(2) * qJD(3);
t193 = pkin(3) * t123;
t192 = pkin(8) * t203;
t191 = pkin(8) * t122;
t190 = pkin(7) * t204;
t188 = t220 * t133;
t187 = t135 * t202;
t185 = qJ(4) * t202;
t180 = t135 * t122;
t179 = t136 * t204;
t177 = qJD(6) * t220;
t45 = t132 * t76 - t133 * t146;
t58 = t133 * t100 - t132 * t101;
t176 = t137 * t99 - t113;
t94 = -t132 * qJ(4) + t133 * t139;
t174 = t206 * qJD(2);
t173 = 0.2e1 * t179;
t171 = -pkin(5) * t133 + t139;
t170 = t135 * t178;
t165 = t220 * t226;
t62 = t127 - t176;
t162 = -t135 * t61 + t137 * t62;
t159 = t171 * t135;
t1 = -t134 * t4 - t15 * t177 + t16 * t200 - t220 * t8;
t87 = -t132 * t137 + t213;
t47 = -t87 * pkin(9) + t58;
t48 = -pkin(9) * t226 + t59;
t155 = t134 * t47 + t220 * t48;
t92 = -pkin(5) + t94;
t95 = t133 * qJ(4) + t132 * t139;
t154 = t134 * t92 + t220 * t95;
t153 = t220 * t132 + t134 * t133;
t152 = -pkin(7) + t159;
t149 = t220 * t166;
t147 = t136 * t122 + t181;
t55 = -t134 * t226 + t220 * t87;
t145 = -pkin(9) * t227 + t46;
t144 = t224 * qJD(3) + t198;
t43 = t134 * t166 + t220 * t73;
t142 = pkin(9) * t223 + t45;
t30 = -t35 + t225;
t31 = t172 - t193;
t141 = t162 * qJD(3) + t31 * t135 + t30 * t137;
t107 = -0.2e1 * t179;
t106 = pkin(8) * t184;
t81 = t178 - t187;
t80 = t153 * qJD(6);
t79 = t132 * t200 - t133 * t177;
t64 = qJD(3) * t189 + t208;
t57 = pkin(5) * t226 + t86;
t54 = t134 * t87 + t165;
t49 = t108 * pkin(5) + qJD(3) * t159 + t208;
t42 = t134 * t73 - t149;
t38 = t102 * pkin(5) + t152 * t136 + t112;
t34 = t147 * pkin(3) + t135 * t185 + t190 - t210;
t33 = t153 * qJD(4) + t154 * qJD(6);
t32 = -qJD(4) * t188 - t92 * t177 + (qJD(6) * t95 + t199) * t134;
t26 = (t139 * t137 - t124) * t202 + t169 * t204 + t210;
t25 = t55 * qJD(6) + t134 * t223 + t220 * t227;
t24 = qJD(6) * t165 + t134 * t227 + t87 * t200 - t220 * t223;
t13 = t98 * pkin(5) + t152 * t204 + ((-t132 * pkin(5) - qJ(4)) * t135 + t171 * t137) * t202 + t210;
t12 = t43 * qJD(6) + t134 * t44 - t220 * t140;
t11 = -qJD(6) * t149 - t134 * t140 + t73 * t200 - t220 * t44;
t7 = t155 * qJD(6) + t134 * t145 + t220 * t142;
t6 = t134 * t142 - t220 * t145 - t47 * t177 + t48 * t200;
t3 = [0, 0, 0, t173, -0.2e1 * t174, 0, 0, 0, t136 * t195, t138 * t195, -0.2e1 * t129 * t180 + 0.2e1 * t130 * t179, 0.2e1 * t129 * t175 + t170 * t228, 0.2e1 * t136 * t186 + 0.2e1 * t206 * t205, -0.2e1 * t135 * t174 + 0.2e1 * t136 * t184, t107, 0.2e1 * t172 * t138 + 0.2e1 * t176 * t123 + 0.2e1 * (t129 * t122 + t135 * t173) * pkin(7), -0.2e1 * t35 * t138 - 0.2e1 * t214 * t123 + 0.2e1 * (-t129 * t203 + t137 * t173) * pkin(7), 0.2e1 * (qJD(2) * t135 * t72 + t31) * t138 + 0.2e1 * (-qJD(2) * t62 + t72 * t122 + t34 * t135) * t136, 0.2e1 * t162 * t204 + 0.2e1 * (-t135 * t30 + t137 * t31 + (-t135 * t62 - t137 * t61) * qJD(3)) * t136, 0.2e1 * (-t72 * t205 - t30) * t138 + 0.2e1 * (qJD(2) * t61 - t34 * t137 + t72 * t203) * t136, 0.2e1 * t30 * t61 + 0.2e1 * t31 * t62 + 0.2e1 * t34 * t72, 0.2e1 * t9 * t138 + 0.2e1 * t26 * t102 - 0.2e1 * t60 * t158 + 0.2e1 * (-t22 * qJD(2) - t26 * t213 - t231) * t136, -0.2e1 * t10 * t138 + 0.2e1 * t23 * t123 + 0.2e1 * t26 * t73 + 0.2e1 * t60 * t44, 0.2e1 * t10 * t166 + 0.2e1 * t140 * t23 - 0.2e1 * t22 * t44 - 0.2e1 * t9 * t73, 0.2e1 * t23 * t10 + 0.2e1 * t22 * t9 + 0.2e1 * t26 * t60, -0.2e1 * t43 * t11, 0.2e1 * t11 * t42 - 0.2e1 * t12 * t43, -0.2e1 * t11 * t138 - 0.2e1 * t123 * t43, -0.2e1 * t12 * t138 + 0.2e1 * t123 * t42, t107, 0.2e1 * t2 * t138 - 0.2e1 * (-t134 * t16 + t220 * t15) * t123 + 0.2e1 * t13 * t42 + 0.2e1 * t38 * t12, 0.2e1 * t1 * t138 - 0.2e1 * t38 * t11 + 0.2e1 * t123 * t156 + 0.2e1 * t13 * t43; 0, 0, 0, 0, 0, t204, -t123, 0, -t190, pkin(7) * t123, -t136 * t175 + t170, t180 * t228 - t207 * t204, t229, t148, 0, t106 + (-pkin(2) * t137 + pkin(7) * t135) * t202 + (t168 * t135 - t114) * qJD(2) (pkin(7) * t211 + t167 * t135) * qJD(3) + (t168 * t137 + t113) * qJD(2), t106 + (t96 * t202 - t34) * t137 - t222 * t135, t141 (-t34 + (t136 * t96 + t219) * qJD(3)) * t135 + t222 * t137, pkin(8) * t141 + t34 * t96 + t72 * t77, -t45 * t138 + t64 * t102 - t86 * t158 + t26 * t226 + t60 * t227 + (-t58 * qJD(2) - t64 * t213 - t230) * t136, t59 * t123 - t46 * t138 + t26 * t87 + t86 * t44 + t64 * t73 + t231, t46 * t166 + t59 * t158 - t10 * t226 - t23 * t108 + t45 * t73 - t58 * t44 - t9 * t87 + (t23 * t213 - t22 * t226 + t59 * t73) * qJD(3), t10 * t59 - t22 * t45 + t23 * t46 + t26 * t86 + t58 * t9 + t60 * t64, -t11 * t55 - t43 * t24, t11 * t54 - t12 * t55 + t24 * t42 - t43 * t25, -t123 * t55 - t24 * t138, t123 * t54 - t25 * t138, 0, -t7 * t138 - (-t134 * t48 + t220 * t47) * t123 + t49 * t42 + t57 * t12 + t13 * t54 + t38 * t25, -t57 * t11 + t123 * t155 + t13 * t55 + t6 * t138 - t38 * t24 + t49 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t180, -0.2e1 * t175, 0, 0, 0, t135 * t194, t137 * t194, -0.2e1 * t77 * t137 + 0.2e1 * t96 * t203, 0, -0.2e1 * t96 * t122 - 0.2e1 * t77 * t135, 0.2e1 * t96 * t77, 0.2e1 * t226 * t64 + 0.2e1 * t227 * t86, 0.2e1 * t64 * t87 + 0.2e1 * t230, -0.2e1 * t46 * t226 - 0.2e1 * t59 * t108 + 0.2e1 * t45 * t87 + 0.2e1 * (t59 * t213 - t226 * t58) * qJD(3), -0.2e1 * t45 * t58 + 0.2e1 * t46 * t59 + 0.2e1 * t64 * t86, -0.2e1 * t55 * t24, 0.2e1 * t24 * t54 - 0.2e1 * t25 * t55, 0, 0, 0, 0.2e1 * t25 * t57 + 0.2e1 * t49 * t54, -0.2e1 * t57 * t24 + 0.2e1 * t49 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t147, t123, -t172, t35, -t172 + 0.2e1 * t193 (-pkin(3) * t204 - t185) * t137 + (-qJ(4) * t204 + (qJD(3) * pkin(3) - qJD(4)) * t136) * t135, 0.2e1 * t120 - t35 - 0.2e1 * t196, -t31 * pkin(3) + t30 * qJ(4) + qJD(4) * t61, -t94 * t123 - t18 + (t21 - t196) * t132, t95 * t123 - t133 * t196 + t10, t95 * t140 - t94 * t44 + (t132 * t73 + t133 * t166) * qJD(4), t10 * t95 + t9 * t94 + (-t22 * t132 + t23 * t133) * qJD(4), 0, 0, t11, t12, t123, -t33 * t138 - (-t134 * t95 + t220 * t92) * t123 - t2, t123 * t154 + t32 * t138 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, -t203, 0, -t191, t192, -t191, t144, -t192, t144 * pkin(8), t45, t46, -t95 * t108 + (t132 * t87 - t133 * t226) * qJD(4) + (t95 * t213 - t226 * t94) * qJD(3), -t45 * t94 + t46 * t95 + (-t58 * t132 + t59 * t133) * qJD(4), 0, 0, t24, t25, 0, t7, -t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, qJ(4) * t221, 0.2e1 * t199, t133 * t221, 0 (-t94 * t132 + t95 * t133) * t221, 0, 0, 0, 0, 0, 0.2e1 * t33, -0.2e1 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123, t81, 0, t31, -t133 * t123, t132 * t123, t132 * (t132 * t187 - t98) + (t132 * t147 - t44) * t133, t10 * t132 + t9 * t133, 0, 0, 0, 0, 0, -t80 * t138 - (-t134 * t132 + t188) * t123, t123 * t153 + t79 * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, t191, 0, 0, -t133 ^ 2 * t122 - t132 * t108, t46 * t132 - t45 * t133, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t140, t44, 0, t26, 0, 0, 0, 0, 0, t12, -t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, t223, 0, t64, 0, 0, 0, 0, 0, t25, -t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t12, -t123, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t25, 0, -t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
