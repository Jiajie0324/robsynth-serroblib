% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta5]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR7_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR7_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR7_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR7_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR7_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR7_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:01:10
% EndTime: 2019-03-09 16:01:30
% DurationCPUTime: 9.26s
% Computational Cost: add. (7357->668), mult. (16072->845), div. (0->0), fcn. (11279->12), ass. (0->306)
t298 = cos(qJ(3));
t393 = qJD(3) * t298;
t299 = cos(qJ(2));
t400 = qJD(1) * t299;
t490 = t298 * t400 - t393;
t294 = sin(qJ(3));
t379 = t294 * t400;
t395 = qJD(3) * t294;
t489 = t379 - t395;
t444 = pkin(8) - qJ(5);
t224 = t444 * t298;
t295 = sin(qJ(2));
t381 = -pkin(7) * t294 - pkin(3);
t358 = -pkin(4) + t381;
t418 = t298 * t299;
t350 = pkin(2) * t295 - pkin(8) * t299;
t213 = t350 * qJD(1);
t427 = t213 * t298;
t488 = qJD(3) * t224 - qJD(5) * t294 + t427 - (-qJ(5) * t418 + t295 * t358) * qJD(1);
t244 = -qJD(3) + t400;
t235 = qJD(6) + t244;
t389 = t298 * qJD(2);
t401 = qJD(1) * t295;
t206 = t294 * t401 - t389;
t378 = t298 * t401;
t398 = qJD(2) * t294;
t208 = t378 + t398;
t290 = sin(pkin(10));
t291 = cos(pkin(10));
t127 = t206 * t290 + t208 * t291;
t293 = sin(qJ(6));
t297 = cos(qJ(6));
t470 = -t291 * t206 + t208 * t290;
t472 = t127 * t293 + t297 * t470;
t487 = t235 * t472;
t473 = -t127 * t297 + t293 * t470;
t486 = t235 * t473;
t485 = t473 * t472;
t392 = qJD(5) * t298;
t185 = t294 * t213;
t411 = qJ(4) * t401 + t185;
t422 = t295 * t298;
t424 = t294 * t299;
t484 = (-pkin(7) * t422 + qJ(5) * t424) * qJD(1) + t411 + t395 * t444 + t392;
t483 = t472 ^ 2 - t473 ^ 2;
t390 = qJD(6) * t297;
t391 = qJD(6) * t293;
t387 = qJD(1) * qJD(2);
t368 = t299 * t387;
t386 = t295 * qJDD(1);
t394 = qJD(3) * t295;
t474 = qJD(1) * t394 - qJDD(2);
t116 = -qJD(3) * t389 + (-t368 - t386) * t298 + t474 * t294;
t117 = t294 * (qJD(2) * (qJD(3) + t400) + t386) + t474 * t298;
t53 = -t116 * t290 - t291 * t117;
t54 = -t116 * t291 + t117 * t290;
t10 = -t127 * t391 - t293 * t53 + t297 * t54 - t390 * t470;
t482 = t10 + t487;
t11 = -qJD(6) * t473 + t293 * t54 + t297 * t53;
t481 = t11 + t486;
t286 = pkin(10) + qJ(6);
t269 = sin(t286);
t270 = cos(t286);
t331 = t269 * t294 + t270 * t298;
t300 = cos(qJ(1));
t296 = sin(qJ(1));
t419 = t296 * t299;
t181 = t294 * t419 + t298 * t300;
t416 = t300 * t294;
t182 = t296 * t418 - t416;
t337 = t181 * t269 + t182 * t270;
t227 = -qJD(2) * pkin(2) + pkin(7) * t401;
t111 = t206 * pkin(3) - t208 * qJ(4) + t227;
t76 = -pkin(4) * t206 + qJD(5) - t111;
t44 = pkin(5) * t470 + t76;
t471 = g(3) * t295;
t183 = -t296 * t298 + t299 * t416;
t417 = t299 * t300;
t184 = t294 * t296 + t298 * t417;
t95 = t183 * t269 + t184 * t270;
t480 = -g(1) * t95 - g(2) * t337 - t331 * t471 - t44 * t472;
t332 = t269 * t298 - t270 * t294;
t273 = t299 * qJDD(1);
t468 = -t295 * t387 + t273;
t199 = qJDD(3) - t468;
t214 = t350 * qJD(2);
t277 = t295 * pkin(8);
t282 = t299 * pkin(2);
t382 = -pkin(1) - t282;
t326 = t382 - t277;
t137 = qJD(1) * t214 + qJDD(1) * t326;
t175 = pkin(7) * t468 + qJDD(2) * pkin(8);
t189 = t326 * qJD(1);
t268 = pkin(7) * t400;
t228 = qJD(2) * pkin(8) + t268;
t356 = -t298 * t137 + t294 * t175 + t189 * t395 + t228 * t393;
t327 = qJDD(4) + t356;
t455 = pkin(3) + pkin(4);
t20 = qJ(5) * t116 - qJD(5) * t208 - t199 * t455 + t327;
t187 = t199 * qJ(4);
t230 = t244 * qJD(4);
t310 = t294 * t137 + t298 * t175 + t189 * t393 - t228 * t395;
t34 = t187 - t230 + t310;
t23 = qJ(5) * t117 + qJD(5) * t206 + t34;
t366 = -t291 * t20 + t290 * t23;
t3 = -pkin(5) * t199 - pkin(9) * t54 - t366;
t7 = t290 * t20 + t291 * t23;
t5 = -pkin(9) * t53 + t7;
t380 = -t293 * t5 + t297 * t3;
t465 = t181 * t270 - t182 * t269;
t94 = t183 * t270 - t184 * t269;
t479 = -g(1) * t94 - g(2) * t465 + t332 * t471 + t44 * t473 + t380;
t478 = pkin(9) * t127;
t477 = pkin(9) * t470;
t413 = -t290 * t490 + t489 * t291;
t200 = t290 * t294 + t291 * t298;
t311 = t299 * t200;
t412 = -qJD(1) * t311 + t200 * qJD(3);
t421 = t295 * t300;
t423 = t295 * t296;
t476 = g(1) * t421 + g(2) * t423;
t475 = qJ(4) * t490 - t294 * qJD(4) - t268;
t445 = g(3) * t299;
t347 = g(1) * t300 + g(2) * t296;
t462 = t295 * t347;
t458 = t445 - t462;
t441 = t484 * t290 + t291 * t488;
t438 = t290 * t488 - t484 * t291;
t384 = t455 * t294;
t415 = -qJD(3) * t384 + t379 * t455 - t475;
t396 = qJD(2) * t299;
t467 = t294 * t396 + t295 * t393;
t371 = t294 * t394;
t373 = t299 * t389;
t466 = -t371 + t373;
t131 = t298 * t189 - t294 * t228;
t388 = qJD(4) - t131;
t276 = t294 * qJ(4);
t464 = t298 * pkin(3) + pkin(2) + t276;
t463 = -t445 + t476;
t451 = pkin(8) * t199;
t461 = t111 * t244 + t451;
t457 = -0.2e1 * pkin(1);
t456 = t208 ^ 2;
t239 = t244 ^ 2;
t452 = pkin(3) * t199;
t450 = g(1) * t296;
t447 = g(2) * t300;
t403 = -t277 - t282;
t222 = -pkin(1) + t403;
t248 = pkin(7) * t418;
t409 = qJD(3) * t248 + t222 * t395;
t51 = (-qJ(5) * t396 - t214) * t298 + (qJ(5) * t395 + qJD(2) * t358 - t392) * t295 + t409;
t397 = qJD(2) * t295;
t410 = t294 * t214 + t222 * t393;
t321 = qJ(4) * t397 - qJD(4) * t299 + t410;
t52 = (-pkin(7) * qJD(2) + qJ(5) * qJD(3)) * t422 + (qJD(5) * t295 + (-pkin(7) * qJD(3) + qJ(5) * qJD(2)) * t299) * t294 + t321;
t19 = t290 * t51 + t291 * t52;
t328 = t290 * t298 - t291 * t294;
t120 = t297 * t200 - t293 * t328;
t443 = -qJD(6) * t120 - t293 * t413 + t297 * t412;
t121 = -t200 * t293 - t297 * t328;
t442 = qJD(6) * t121 + t293 * t412 + t297 * t413;
t86 = qJ(5) * t208 + t131;
t67 = t244 * t455 + qJD(4) - t86;
t232 = t244 * qJ(4);
t132 = t294 * t189 + t298 * t228;
t87 = qJ(5) * t206 + t132;
t74 = -t232 + t87;
t31 = t290 * t67 + t291 * t74;
t40 = t290 * t87 + t291 * t86;
t440 = pkin(8) * qJD(3);
t24 = t31 - t477;
t439 = t24 * t293;
t437 = pkin(5) * t413 + t415;
t106 = -t232 + t132;
t436 = t106 * t244;
t435 = t116 * t294;
t434 = t132 * t244;
t432 = t206 * t244;
t431 = t208 * t206;
t430 = t208 * t244;
t428 = t208 * t298;
t426 = t235 * t244;
t425 = t294 * t295;
t303 = qJD(1) ^ 2;
t420 = t295 * t303;
t246 = pkin(7) * t424;
t281 = t299 * pkin(3);
t118 = pkin(4) * t299 + t246 + t281 + (-qJ(5) * t295 - t222) * t298;
t405 = t294 * t222 + t248;
t142 = -qJ(4) * t299 + t405;
t130 = qJ(5) * t425 + t142;
t57 = t290 * t118 + t291 * t130;
t414 = -pkin(3) * t489 + t475;
t136 = t208 * pkin(3) + t206 * qJ(4);
t223 = t444 * t294;
t140 = t290 * t223 + t291 * t224;
t408 = t476 * t298;
t406 = qJ(4) * t373 + qJD(4) * t422;
t287 = t295 ^ 2;
t402 = -t299 ^ 2 + t287;
t399 = qJD(2) * t208;
t30 = -t290 * t74 + t291 * t67;
t21 = pkin(5) * t244 + t30 - t478;
t385 = t21 * t390 + t293 * t3 + t297 * t5;
t266 = pkin(7) * t386;
t176 = -qJDD(2) * pkin(2) + pkin(7) * t368 + t266;
t383 = g(1) * t417 + g(2) * t419 + t471;
t376 = t244 * t398;
t375 = t244 * t389;
t372 = t244 * t395;
t18 = -t290 * t52 + t291 * t51;
t39 = -t290 * t86 + t291 * t87;
t364 = -t181 * pkin(3) + qJ(4) * t182;
t363 = -t183 * pkin(3) + qJ(4) * t184;
t215 = -qJ(4) * t290 - t291 * t455;
t56 = t291 * t118 - t130 * t290;
t361 = -t181 * t291 + t182 * t290;
t360 = t183 * t290 + t184 * t291;
t139 = t291 * t223 - t224 * t290;
t359 = t222 * t298 - t246;
t195 = t298 * pkin(4) + t464;
t355 = pkin(3) * t418 + qJ(4) * t424 - t403;
t354 = -pkin(7) - t384;
t92 = -pkin(4) * t208 - t136;
t101 = pkin(9) * t328 + t139;
t353 = pkin(9) * t413 - qJD(6) * t101 - t438;
t102 = -pkin(9) * t200 + t140;
t352 = -pkin(5) * t401 + pkin(9) * t412 + qJD(6) * t102 - t441;
t351 = t295 * t381;
t349 = -g(1) * t181 + g(2) * t183;
t348 = g(1) * t182 - g(2) * t184;
t346 = -t182 * pkin(3) + t300 * pkin(7) - qJ(4) * t181;
t345 = t214 * t298 - t409;
t9 = t293 * t21 + t297 * t24;
t344 = -t290 * t30 + t291 * t31;
t165 = t200 * t295;
t38 = pkin(5) * t299 - pkin(9) * t165 + t56;
t164 = t290 * t422 - t291 * t425;
t41 = -pkin(9) * t164 + t57;
t343 = -t293 * t41 + t297 * t38;
t342 = t293 * t38 + t297 * t41;
t341 = qJD(3) * t227 - t451;
t103 = pkin(3) * t244 + t388;
t340 = t103 * t298 - t106 * t294;
t339 = t127 * t290 - t291 * t470;
t90 = t297 * t164 + t165 * t293;
t91 = -t164 * t293 + t165 * t297;
t336 = t181 * t290 + t182 * t291;
t335 = t183 * t291 - t184 * t290;
t210 = -pkin(5) + t215;
t216 = qJ(4) * t291 - t290 * t455;
t334 = t210 * t297 - t216 * t293;
t333 = t210 * t293 + t216 * t297;
t330 = t290 * t297 + t291 * t293;
t329 = t290 * t293 - t291 * t297;
t323 = -g(1) * t183 - g(2) * t181 - g(3) * t425;
t322 = -t244 * t440 + t445;
t319 = t24 * t391 - t385;
t35 = t117 * pkin(3) + t116 * qJ(4) - t208 * qJD(4) + t176;
t318 = -t298 * t455 - t276;
t317 = -pkin(7) * qJDD(2) + t387 * t457;
t316 = t294 * t199 - t244 * t393;
t315 = t298 * t199 + t372;
t314 = -t322 - t35;
t313 = t235 * t330;
t312 = t235 * t329;
t302 = qJD(2) ^ 2;
t308 = pkin(7) * t302 + qJDD(1) * t457 - t450;
t241 = qJ(4) * t422;
t141 = t295 * t354 + t241;
t307 = t300 * pkin(1) + pkin(2) * t417 + t184 * pkin(3) + t296 * pkin(7) + pkin(8) * t421 + qJ(4) * t183;
t306 = -t323 - t356;
t25 = -pkin(4) * t117 + qJDD(5) - t35;
t305 = t111 * t208 + qJDD(4) - t306;
t304 = g(1) * t184 + g(2) * t182 + g(3) * t422 - t131 * t244 - t310;
t68 = t318 * t394 + t354 * t396 + t406;
t256 = g(2) * t421;
t251 = pkin(8) * t417;
t247 = pkin(8) * t419;
t188 = -qJDD(6) + t199;
t161 = -t241 + (pkin(3) * t294 + pkin(7)) * t295;
t143 = t281 - t359;
t138 = pkin(5) * t200 + t195;
t135 = qJD(1) * t351 - t427;
t134 = -pkin(7) * t378 + t411;
t98 = qJD(2) * t311 + t328 * t394;
t97 = t290 * t466 - t291 * t467;
t88 = pkin(5) * t164 + t141;
t85 = pkin(3) * t467 + pkin(7) * t396 + qJ(4) * t371 - t406;
t77 = qJD(2) * t351 - t345;
t73 = -t116 - t432;
t72 = (-t295 * t389 - t299 * t395) * pkin(7) + t321;
t55 = -pkin(5) * t127 + t92;
t37 = t327 - t452;
t36 = pkin(5) * t97 + t68;
t29 = t40 + t478;
t28 = t39 - t477;
t27 = qJD(6) * t91 + t293 * t98 + t297 * t97;
t26 = -qJD(6) * t90 - t293 * t97 + t297 * t98;
t14 = -pkin(9) * t97 + t19;
t13 = -pkin(5) * t397 - pkin(9) * t98 + t18;
t12 = pkin(5) * t53 + t25;
t8 = t21 * t297 - t439;
t1 = [qJDD(1), -t447 + t450, t347, qJDD(1) * t287 + 0.2e1 * t295 * t368, 0.2e1 * t273 * t295 - 0.2e1 * t387 * t402, qJDD(2) * t295 + t299 * t302, qJDD(2) * t299 - t295 * t302, 0, t317 * t295 + (-t308 - t447) * t299, t295 * t308 + t299 * t317 + t256, -t116 * t422 + t208 * t466 (-t206 * t298 - t208 * t294) * t396 + (t435 - t117 * t298 + (t206 * t294 - t428) * qJD(3)) * t295 (t116 - t375) * t299 + (t315 + t399) * t295 (t117 + t376) * t299 + (-qJD(2) * t206 - t316) * t295, -t199 * t299 - t244 * t397, -t345 * t244 + t359 * t199 + ((pkin(7) * t206 + t227 * t294) * qJD(2) + t356) * t299 + (t227 * t393 + t131 * qJD(2) + t176 * t294 + (t117 - t376) * pkin(7)) * t295 + t348, t410 * t244 - t405 * t199 + (t227 * t389 + (-t372 + t399) * pkin(7) + t310) * t299 + (-t227 * t395 - t132 * qJD(2) + t176 * t298 + (-t116 - t375) * pkin(7)) * t295 + t349, t117 * t161 - t143 * t199 + t206 * t85 + t244 * t77 + (t111 * t398 + t37) * t299 + (-qJD(2) * t103 + t111 * t393 + t294 * t35) * t295 + t348, -t116 * t143 - t117 * t142 - t206 * t72 + t208 * t77 - t256 + t340 * t396 + (t450 - t294 * t34 + t298 * t37 + (-t103 * t294 - t106 * t298) * qJD(3)) * t295, t116 * t161 + t142 * t199 - t208 * t85 - t244 * t72 + (-t111 * t389 - t34) * t299 + (qJD(2) * t106 + t111 * t395 - t298 * t35) * t295 - t349, -g(1) * t346 - g(2) * t307 + t103 * t77 + t106 * t72 + t111 * t85 + t34 * t142 + t37 * t143 + t35 * t161 - t326 * t450, g(1) * t336 - g(2) * t360 + t141 * t53 + t25 * t164 + t18 * t244 - t56 * t199 - t299 * t366 - t30 * t397 + t470 * t68 + t76 * t97, -g(1) * t361 - g(2) * t335 + t68 * t127 + t141 * t54 + t25 * t165 - t19 * t244 + t57 * t199 - t7 * t299 + t31 * t397 + t76 * t98, -g(1) * t423 - t127 * t18 - t164 * t7 + t165 * t366 - t19 * t470 - t30 * t98 - t31 * t97 - t53 * t57 - t54 * t56 + t256, t7 * t57 + t31 * t19 - t366 * t56 + t30 * t18 + t25 * t141 + t76 * t68 - g(1) * (-pkin(4) * t182 + t346) - g(2) * (pkin(4) * t184 - qJ(5) * t421 + t307) - (-t295 * t444 + t382) * t450, t10 * t91 - t26 * t473, -t10 * t90 - t11 * t91 - t26 * t472 + t27 * t473, t10 * t299 - t188 * t91 + t235 * t26 + t397 * t473, -t11 * t299 + t188 * t90 - t235 * t27 + t397 * t472, -t188 * t299 - t235 * t397 (t13 * t297 - t14 * t293) * t235 - t343 * t188 + t380 * t299 - t8 * t397 + t36 * t472 + t88 * t11 + t12 * t90 + t44 * t27 + g(1) * t337 - g(2) * t95 + (-t235 * t342 - t299 * t9) * qJD(6) -(qJD(6) * t343 + t13 * t293 + t14 * t297) * t235 + t342 * t188 + t319 * t299 + t9 * t397 - t36 * t473 + t88 * t10 + t12 * t91 + t44 * t26 + g(1) * t465 - g(2) * t94; 0, 0, 0, -t299 * t420, t402 * t303, t386, t273, qJDD(2), pkin(1) * t420 - t266 + t463 (pkin(1) * t303 - pkin(7) * qJDD(1)) * t299 + t383, -t244 * t428 - t435 (-t116 + t432) * t298 + (-t117 + t430) * t294 (-t208 * t295 + t244 * t418) * qJD(1) + t316 (t206 * t295 - t244 * t424) * qJD(1) + t315, t244 * t401, -pkin(2) * t117 + t341 * t294 + (-t445 - t176 + (t213 + t440) * t244) * t298 + (-t227 * t424 - t131 * t295 + (-t206 * t299 + t244 * t425) * pkin(7)) * qJD(1) + t408, pkin(2) * t116 - t185 * t244 + t341 * t298 + (-t227 * t418 + t132 * t295 + (-t208 * t299 + t244 * t422) * pkin(7)) * qJD(1) + (t176 + t322 - t462) * t294, t103 * t401 - t117 * t464 - t135 * t244 + t414 * t206 - t294 * t461 + t314 * t298 + t408, t134 * t206 - t135 * t208 + (t34 - t244 * t103 + (qJD(3) * t208 - t117) * pkin(8)) * t298 + (t37 + t436 + (qJD(3) * t206 - t116) * pkin(8)) * t294 - t383, -t106 * t401 - t116 * t464 + t134 * t244 - t414 * t208 + t461 * t298 + (t314 + t462) * t294, -t106 * t134 - t103 * t135 - g(1) * t251 - g(2) * t247 - g(3) * t355 + t414 * t111 + (qJD(3) * t340 + t37 * t294 + t34 * t298) * pkin(8) + (-t35 + t462) * t464, t30 * t401 - g(3) * t311 + t415 * t470 - t139 * t199 + t195 * t53 + t441 * t244 + t413 * t76 + (t25 + t462) * t200, t415 * t127 + t140 * t199 + t195 * t54 - t438 * t244 - t31 * t401 + t412 * t76 + (-t25 + t458) * t328, -t127 * t441 - t139 * t54 - t140 * t53 - t200 * t7 - t30 * t412 - t31 * t413 - t328 * t366 - t438 * t470 + t383, t7 * t140 - t366 * t139 + t25 * t195 - g(1) * (-qJ(5) * t417 + t251) - g(2) * (-qJ(5) * t419 + t247) - g(3) * (pkin(4) * t418 + t355) + t415 * t76 + t438 * t31 + t441 * t30 + (g(3) * qJ(5) + t347 * (pkin(2) - t318)) * t295, t10 * t121 - t443 * t473, -t10 * t120 - t11 * t121 + t442 * t473 - t443 * t472, -t121 * t188 + t235 * t443 - t401 * t473, t120 * t188 - t235 * t442 - t401 * t472, t235 * t401 -(t101 * t297 - t102 * t293) * t188 + t138 * t11 + t12 * t120 + t437 * t472 + t442 * t44 + (t293 * t353 - t297 * t352) * t235 + t8 * t401 - t458 * t331 (t101 * t293 + t102 * t297) * t188 + t138 * t10 + t12 * t121 - t437 * t473 + t443 * t44 + (t293 * t352 + t297 * t353) * t235 - t9 * t401 + t458 * t332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t431, -t206 ^ 2 + t456, t73, -t117 - t430, t199, -t208 * t227 + t306 - t434, t206 * t227 + t304, -t136 * t206 - t305 - t434 + 0.2e1 * t452, pkin(3) * t116 - qJ(4) * t117 + (t106 - t132) * t208 + (t103 - t388) * t206, -t111 * t206 + t136 * t208 + 0.2e1 * t187 - 0.2e1 * t230 - t304, t34 * qJ(4) - t37 * pkin(3) - t111 * t136 - t103 * t132 - g(1) * t363 - g(2) * t364 - g(3) * (-pkin(3) * t425 + t241) + t388 * t106, -t215 * t199 - t92 * t470 + t76 * t127 + g(1) * t335 - g(2) * t361 - g(3) * t164 + (-qJD(4) * t290 - t39) * t244 + t366, t216 * t199 - t92 * t127 - t76 * t470 - g(1) * t360 - g(2) * t336 - g(3) * t165 + (-qJD(4) * t291 + t40) * t244 + t7, qJD(4) * t339 - t215 * t54 - t216 * t53 + (t30 + t40) * t470 + (-t31 + t39) * t127, t7 * t216 - t366 * t215 - t31 * t40 - t30 * t39 - t76 * t92 - g(1) * (-pkin(4) * t183 + t363) - g(2) * (-pkin(4) * t181 + t364) - g(3) * (-t295 * t384 + t241) + t344 * qJD(4), t485, t483, -t482, t481, t188, -t334 * t188 - (t28 * t297 - t29 * t293) * t235 - t55 * t472 - qJD(4) * t313 + (-t235 * t333 + t9) * qJD(6) - t479, t333 * t188 + (t28 * t293 + t29 * t297) * t235 + t55 * t473 + qJD(4) * t312 + (-t235 * t334 - t439) * qJD(6) + t385 + t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t199 + t431, t73, -t239 - t456, t305 + t436 - t452, -t199 * t291 - t208 * t470 - t239 * t290, -t127 * t208 + t199 * t290 - t239 * t291, t244 * t339 - t290 * t53 - t291 * t54, -t208 * t76 + t244 * t344 + t290 * t7 - t291 * t366 + t323, 0, 0, 0, 0, 0, -qJD(6) * t313 + t188 * t329 - t208 * t472 - t330 * t426, qJD(6) * t312 + t188 * t330 + t208 * t473 + t329 * t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127 * t244 + t53, -t244 * t470 + t54, -t127 ^ 2 - t470 ^ 2, t127 * t30 + t31 * t470 + t25 + t463, 0, 0, 0, 0, 0, t11 - t486, t10 - t487; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, -t483, t482, -t481, -t188 (t235 - qJD(6)) * t9 + t479, t8 * t235 + t319 - t480;];
tau_reg  = t1;
