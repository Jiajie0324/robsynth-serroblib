% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPPR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:01:05
% EndTime: 2019-03-09 16:01:21
% DurationCPUTime: 5.40s
% Computational Cost: add. (5226->396), mult. (12161->708), div. (0->0), fcn. (10533->8), ass. (0->193)
t134 = sin(qJ(2));
t123 = qJD(2) * t134;
t210 = qJ(4) * t123;
t136 = cos(qJ(2));
t243 = t134 * pkin(8);
t184 = -pkin(2) * t136 - t243;
t100 = -pkin(1) + t184;
t135 = cos(qJ(3));
t122 = qJD(3) * t135;
t133 = sin(qJ(3));
t244 = pkin(8) * t136;
t183 = pkin(2) * t134 - t244;
t172 = t183 * qJD(2);
t241 = t100 * t122 + t133 * t172;
t224 = qJD(3) * t136;
t208 = t133 * t224;
t228 = qJD(2) * t135;
t81 = t134 * t228 + t208;
t31 = t81 * pkin(7) - t241;
t254 = t210 - t31;
t225 = qJD(3) * t134;
t207 = qJ(4) * t225;
t227 = qJD(2) * t136;
t213 = pkin(7) * t227;
t209 = t135 * t227;
t223 = qJD(4) * t135;
t232 = qJ(4) * t209 + t134 * t223;
t82 = t134 * t122 + t133 * t227;
t30 = t82 * pkin(3) + t133 * t207 + t213 - t232;
t237 = sin(pkin(10));
t195 = qJD(2) * t237;
t238 = cos(pkin(10));
t196 = qJD(2) * t238;
t233 = t135 * t136;
t235 = t133 * t136;
t167 = t237 * t133 + t238 * t135;
t250 = t167 * qJD(3);
t149 = t134 * t250 - t195 * t233 + t196 * t235;
t197 = t237 * t135;
t109 = qJD(3) * t197;
t198 = t238 * t133;
t173 = -qJD(3) * t198 + t109;
t124 = t133 * qJ(4);
t251 = -t135 * pkin(3) - t124;
t128 = t133 ^ 2;
t130 = t135 ^ 2;
t230 = t128 - t130;
t132 = sin(qJ(6));
t245 = cos(qJ(6));
t186 = t245 * t238;
t88 = -t132 * t237 + t186;
t99 = t230 * qJD(3);
t234 = t134 * t135;
t114 = qJ(4) * t234;
t72 = -t114 + (t133 * pkin(3) + pkin(7)) * t134;
t226 = qJD(3) * t133;
t231 = qJ(4) * t122 + t133 * qJD(4);
t76 = pkin(3) * t226 - t231;
t96 = -pkin(2) + t251;
t249 = (-t136 * t96 + t243) * qJD(2) - qJD(3) * t72 - t134 * t76;
t204 = t133 * t123;
t116 = pkin(7) * t233;
t239 = t133 * t100 + t116;
t160 = -pkin(7) * t204 + qJD(3) * t239 - t135 * t172;
t248 = -0.2e1 * t136;
t247 = 0.2e1 * qJD(4);
t246 = -pkin(3) - pkin(4);
t242 = pkin(8) - qJ(5);
t115 = pkin(7) * t235;
t127 = t136 * pkin(3);
t236 = qJ(5) * t134;
t159 = pkin(4) * t136 + t115 + t127 + (-t100 - t236) * t135;
t59 = -qJ(4) * t136 + t239;
t166 = t133 * t236 + t59;
t19 = t237 * t159 + t238 * t166;
t181 = t242 * t237;
t182 = t242 * t238;
t55 = t133 * t181 + t135 * t182;
t129 = t134 ^ 2;
t229 = -t136 ^ 2 + t129;
t222 = qJD(4) * t136;
t221 = qJD(5) * t133;
t220 = qJD(5) * t135;
t219 = qJD(6) * t132;
t218 = -0.2e1 * pkin(1) * qJD(2);
t217 = -0.2e1 * pkin(2) * qJD(3);
t216 = pkin(3) * t123;
t215 = pkin(8) * t226;
t214 = pkin(8) * t122;
t212 = t246 * t133;
t205 = t135 * t224;
t203 = t133 * t122;
t202 = t134 * t227;
t200 = qJD(6) * t245;
t194 = t132 * t167;
t193 = t238 * qJD(4);
t192 = t237 * qJD(4);
t67 = t135 * t100 - t115;
t191 = t229 * qJD(2);
t190 = 0.2e1 * t202;
t87 = t135 * pkin(4) - t96;
t189 = t133 * t209;
t188 = t129 * t203;
t187 = -pkin(7) + t212;
t180 = t245 * t167;
t61 = t127 - t67;
t178 = -t133 * t59 + t135 * t61;
t177 = -t133 * t239 - t135 * t67;
t147 = -qJ(5) * t209 + (qJ(5) * t226 + t246 * qJD(2) - t220) * t134 + t160;
t143 = t237 * t147;
t148 = (-qJD(4) + (-pkin(7) * qJD(3) + qJ(5) * qJD(2)) * t133) * t136 + (qJ(5) * t122 + t221 + (-pkin(7) * t135 + qJ(4)) * qJD(2)) * t134 + t241;
t10 = t238 * t148 + t143;
t137 = t149 * pkin(9) + t10;
t40 = t173 * t134 + t167 * t227;
t144 = t238 * t147;
t9 = -t237 * t148 + t144;
t138 = -pkin(5) * t123 - t40 * pkin(9) + t9;
t18 = t238 * t159 - t237 * t166;
t73 = t167 * t134;
t145 = t136 * pkin(5) - t73 * pkin(9) + t18;
t140 = t245 * t145;
t102 = t134 * t197;
t174 = -t134 * t198 + t102;
t15 = -t174 * pkin(9) + t19;
t1 = -qJD(6) * t140 - t132 * t138 - t245 * t137 + t15 * t219;
t171 = (-t238 * pkin(5) + t246) * t133;
t169 = t242 * t122 - t221;
t168 = -t242 * t226 - t220;
t165 = t245 * t174;
t94 = -t237 * qJ(4) + t238 * t246;
t90 = t132 * t238 + t245 * t237;
t162 = -pkin(5) + t94;
t161 = t251 * qJD(3) + t223;
t39 = -t132 * t174 + t245 * t73;
t26 = -t222 + t254;
t27 = t160 - t216;
t156 = t178 * qJD(3) + t133 * t27 + t135 * t26;
t155 = t177 * qJD(3) + t133 * t160 - t135 * t31;
t154 = t245 * t162;
t54 = t133 * t182 - t135 * t181;
t89 = -t197 + t198;
t153 = -t89 * pkin(9) + t54;
t95 = t238 * qJ(4) + t237 * t246;
t50 = t132 * t162 + t245 * t95;
t152 = t132 * t153;
t151 = t245 * t153;
t42 = t238 * t168 + t237 * t169;
t41 = t237 * t168 - t238 * t169;
t146 = t82 * qJ(5) + t134 * t221 + t254;
t142 = -t173 * pkin(9) + t42;
t141 = t132 * t145;
t139 = pkin(9) * t250 + t41;
t2 = -qJD(6) * t141 - t132 * t137 + t245 * t138 - t15 * t200;
t108 = -0.2e1 * t202;
t107 = -0.2e1 * t203;
t106 = 0.2e1 * t203;
t105 = pkin(8) * t205;
t83 = t204 - t205;
t80 = -t133 * t225 + t209;
t79 = t90 * qJD(6);
t78 = t88 * qJD(6);
t65 = qJD(3) * t212 + t231;
t64 = 0.2e1 * t130 * t202 - 0.2e1 * t188;
t63 = 0.2e1 * t128 * t202 + 0.2e1 * t188;
t60 = t230 * t225 - t189;
t58 = -t133 * t191 + t134 * t205;
t57 = 0.4e1 * t134 * t203 + t230 * t227;
t56 = t187 * t134 + t114;
t53 = 0.2e1 * t134 * t208 + 0.2e1 * t229 * t228;
t52 = t129 * t99 - 0.2e1 * t134 * t189;
t51 = t167 * pkin(5) + t87;
t49 = -t132 * t95 + t154;
t48 = t245 * t89 - t194;
t47 = t132 * t89 + t180;
t44 = t109 * pkin(5) + qJD(3) * t171 + t231;
t43 = -t167 * pkin(9) + t55;
t38 = t132 * t73 + t165;
t34 = t102 * pkin(5) + t114 + (-pkin(7) + t171) * t134;
t29 = t90 * qJD(4) + t50 * qJD(6);
t28 = -qJD(4) * t186 - qJD(6) * t154 + (qJD(6) * t95 + t192) * t132;
t22 = (t246 * t135 - t124) * t225 + t187 * t227 + t232;
t21 = -qJD(6) * t194 + t132 * t250 + t245 * t173 + t89 * t200;
t20 = qJD(6) * t180 + t132 * t173 + t89 * t219 - t245 * t250;
t17 = t245 * t43 + t152;
t16 = -t132 * t43 + t151;
t13 = -t82 * pkin(4) - t149 * pkin(5) - t30;
t12 = t39 * qJD(6) + t132 * t40 - t245 * t149;
t11 = qJD(6) * t165 - t132 * t149 + t73 * t219 - t245 * t40;
t8 = t245 * t15 + t141;
t7 = -t132 * t15 + t140;
t6 = qJD(6) * t152 + t132 * t142 + t245 * t139 + t43 * t200;
t5 = -qJD(6) * t151 + t132 * t139 - t245 * t142 + t43 * t219;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190, -0.2e1 * t191, 0, t108, 0, 0, t134 * t218, t136 * t218, 0, 0, t64, 0.2e1 * t52, t53, t63, 0.2e1 * t58, t108, 0.2e1 * t67 * t123 + 0.2e1 * t136 * t160 + 0.2e1 * (t129 * t122 + t133 * t190) * pkin(7), -0.2e1 * t239 * t123 - 0.2e1 * t136 * t31 + 0.2e1 * (-t129 * t226 + t135 * t190) * pkin(7), 0.2e1 * t177 * t227 + 0.2e1 * (t133 * t31 + t135 * t160 + (t133 * t67 - t135 * t239) * qJD(3)) * t134, 0.2e1 * pkin(7) ^ 2 * t202 - 0.2e1 * t160 * t67 - 0.2e1 * t239 * t31, t64, t53, -0.2e1 * t52, t108, -0.2e1 * t58, t63, 0.2e1 * (qJD(2) * t133 * t72 + t27) * t136 + 0.2e1 * (-qJD(2) * t61 + t72 * t122 + t30 * t133) * t134, 0.2e1 * t178 * t227 + 0.2e1 * (-t133 * t26 + t135 * t27 + (-t133 * t61 - t135 * t59) * qJD(3)) * t134, 0.2e1 * (-t72 * t228 - t26) * t136 + 0.2e1 * (qJD(2) * t59 - t30 * t135 + t72 * t226) * t134, 0.2e1 * t26 * t59 + 0.2e1 * t27 * t61 + 0.2e1 * t30 * t72, 0.2e1 * t73 * t40, 0.2e1 * t149 * t73 - 0.2e1 * t174 * t40, -0.2e1 * t73 * t123 + 0.2e1 * t136 * t40, -0.2e1 * t174 * t149, 0.2e1 * t174 * t123 + 0.2e1 * t136 * t149, t108, -0.2e1 * t18 * t123 + 0.2e1 * t9 * t136 - 0.2e1 * t149 * t56 + 0.2e1 * t174 * t22, -0.2e1 * t10 * t136 + 0.2e1 * t19 * t123 + 0.2e1 * t22 * t73 + 0.2e1 * t56 * t40, -0.2e1 * t10 * t174 + 0.2e1 * t149 * t19 - 0.2e1 * t18 * t40 - 0.2e1 * t9 * t73, 0.2e1 * t10 * t19 + 0.2e1 * t18 * t9 + 0.2e1 * t22 * t56, -0.2e1 * t39 * t11, 0.2e1 * t11 * t38 - 0.2e1 * t12 * t39, -0.2e1 * t11 * t136 - 0.2e1 * t39 * t123, 0.2e1 * t38 * t12, -0.2e1 * t12 * t136 + 0.2e1 * t38 * t123, t108, 0.2e1 * t34 * t12 - 0.2e1 * t7 * t123 + 0.2e1 * t13 * t38 + 0.2e1 * t136 * t2, 0.2e1 * t1 * t136 - 0.2e1 * t34 * t11 + 0.2e1 * t8 * t123 + 0.2e1 * t13 * t39, 0.2e1 * t1 * t38 + 0.2e1 * t11 * t7 - 0.2e1 * t12 * t8 - 0.2e1 * t2 * t39, -0.2e1 * t1 * t8 + 0.2e1 * t13 * t34 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, 0, -t123, 0, -t213, pkin(7) * t123, 0, 0, -t60, -t57, t83, t60, t81, 0, t105 + (-pkin(2) * t135 + pkin(7) * t133) * t225 + (t184 * t133 - t116) * qJD(2) (pkin(7) * t234 + t183 * t133) * qJD(3) + (t184 * t135 + t115) * qJD(2), t155, -pkin(2) * t213 + pkin(8) * t155, -t60, t83, t57, 0, -t81, t60, t105 + (t96 * t225 - t30) * t135 - t249 * t133, t156 (-t30 + (t134 * t96 + t244) * qJD(3)) * t133 + t249 * t135, pkin(8) * t156 + t30 * t96 + t72 * t76, t250 * t73 + t40 * t89, t89 * t149 - t40 * t167 - t73 * t173 - t174 * t250, -t89 * t123 + t136 * t250, -t149 * t167 + t174 * t173, t167 * t123 - t173 * t136, 0, -t54 * t123 - t41 * t136 - t149 * t87 + t22 * t167 + t56 * t173 + t65 * t174, t55 * t123 - t42 * t136 + t22 * t89 + t250 * t56 + t87 * t40 + t65 * t73, -t10 * t167 + t55 * t149 - t19 * t173 - t42 * t174 - t18 * t250 - t54 * t40 + t41 * t73 - t9 * t89, t10 * t55 - t18 * t41 + t19 * t42 + t22 * t87 + t54 * t9 + t56 * t65, -t11 * t48 - t20 * t39, t11 * t47 - t12 * t48 + t20 * t38 - t21 * t39, -t48 * t123 - t136 * t20, t12 * t47 + t21 * t38, t47 * t123 - t136 * t21, 0, t51 * t12 - t16 * t123 + t13 * t47 - t136 * t6 + t34 * t21 + t44 * t38, -t51 * t11 + t17 * t123 + t13 * t48 + t136 * t5 - t34 * t20 + t44 * t39, t1 * t47 + t11 * t16 - t12 * t17 - t2 * t48 + t20 * t7 - t21 * t8 + t38 * t5 + t39 * t6, -t1 * t17 + t13 * t51 + t16 * t2 + t34 * t44 - t5 * t8 - t6 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, -0.2e1 * t99, 0, t107, 0, 0, t133 * t217, t135 * t217, 0, 0, t106, 0, 0.2e1 * t99, 0, 0, t107, -0.2e1 * t135 * t76 + 0.2e1 * t96 * t226, 0, -0.2e1 * t96 * t122 - 0.2e1 * t133 * t76, 0.2e1 * t96 * t76, 0.2e1 * t89 * t250, -0.2e1 * t89 * t109 + 0.2e1 * (-t167 ^ 2 + t89 * t198) * qJD(3), 0, 0.2e1 * t167 * t173, 0, 0, 0.2e1 * t65 * t167 + 0.2e1 * t87 * t173, 0.2e1 * t250 * t87 + 0.2e1 * t65 * t89, -0.2e1 * t42 * t167 - 0.2e1 * t55 * t173 - 0.2e1 * t250 * t54 + 0.2e1 * t41 * t89, -0.2e1 * t41 * t54 + 0.2e1 * t42 * t55 + 0.2e1 * t65 * t87, -0.2e1 * t48 * t20, 0.2e1 * t20 * t47 - 0.2e1 * t21 * t48, 0, 0.2e1 * t47 * t21, 0, 0, 0.2e1 * t21 * t51 + 0.2e1 * t44 * t47, -0.2e1 * t20 * t51 + 0.2e1 * t44 * t48, 0.2e1 * t16 * t20 - 0.2e1 * t17 * t21 + 0.2e1 * t47 * t5 + 0.2e1 * t48 * t6, -0.2e1 * t16 * t6 - 0.2e1 * t17 * t5 + 0.2e1 * t44 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t82, t123, -t160, t31, 0, 0, 0, t80, 0, t123, t82, 0, -t160 + 0.2e1 * t216 (-pkin(3) * t227 - t207) * t135 + (-qJ(4) * t227 + (pkin(3) * qJD(3) - qJD(4)) * t134) * t133, -t31 + 0.2e1 * t210 - 0.2e1 * t222, -pkin(3) * t27 + qJ(4) * t26 + qJD(4) * t59, 0, 0, -t40, 0, -t149, t123, -t94 * t123 + t237 * t146 + t192 * t248 - t144, t95 * t123 + t238 * t146 + t193 * t248 + t143, t149 * t95 - t174 * t193 + t192 * t73 - t94 * t40, t10 * t95 + t9 * t94 + (-t237 * t18 + t238 * t19) * qJD(4), 0, 0, t11, 0, t12, t123, -t49 * t123 - t29 * t136 - t2, t50 * t123 + t136 * t28 - t1, t11 * t49 - t12 * t50 + t28 * t38 + t29 * t39, -t1 * t50 + t2 * t49 - t28 * t8 - t29 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, -t226, 0, -t214, t215, 0, 0, 0, t122, 0, 0, t226, 0, -t214, t161, -t215, t161 * pkin(8), 0, 0, -t250, 0, t173, 0, t41, t42, -t167 * t193 - t95 * t173 + t89 * t192 - t250 * t94, -t41 * t94 + t42 * t95 + (-t237 * t54 + t238 * t55) * qJD(4), 0, 0, t20, 0, t21, 0, t6, -t5, t20 * t49 - t21 * t50 + t28 * t47 + t29 * t48, -t16 * t29 - t17 * t28 - t49 * t6 - t5 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, qJ(4) * t247, 0, 0, 0, 0, 0, 0, 0.2e1 * t192, 0.2e1 * t193, 0 (-t237 * t94 + t238 * t95) * t247, 0, 0, 0, 0, 0, 0, 0.2e1 * t29, -0.2e1 * t28, 0, -0.2e1 * t28 * t50 - 0.2e1 * t29 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123, t80, 0, t27, 0, 0, 0, 0, 0, 0, -t134 * t196, t134 * t195, t237 * t149 - t238 * t40, t10 * t237 + t9 * t238, 0, 0, 0, 0, 0, 0, -t88 * t123 - t136 * t79, t90 * t123 - t136 * t78, t11 * t88 - t12 * t90 - t38 * t78 + t39 * t79, -t1 * t90 + t2 * t88 - t7 * t79 + t78 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, t214, 0, 0, 0, 0, 0, 0, 0, 0, -t238 ^ 2 * t122 - t237 * t109, t42 * t237 - t41 * t238, 0, 0, 0, 0, 0, 0, 0, 0, t20 * t88 - t21 * t90 - t47 * t78 + t48 * t79, -t16 * t79 + t17 * t78 - t5 * t90 - t6 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t78, 0, -t28 * t90 - t29 * t88 - t49 * t79 + t50 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t78 * t90 - 0.2e1 * t79 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, t40, 0, t22, 0, 0, 0, 0, 0, 0, t12, -t11, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, t250, 0, t65, 0, 0, 0, 0, 0, 0, t21, -t20, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, -t12, -t123, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, 0, -t21, 0, -t6, t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
