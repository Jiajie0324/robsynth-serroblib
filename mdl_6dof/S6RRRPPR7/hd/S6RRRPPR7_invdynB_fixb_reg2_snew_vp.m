% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 05:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 05:57:33
% EndTime: 2019-05-07 05:58:27
% DurationCPUTime: 42.27s
% Computational Cost: add. (146497->805), mult. (300650->1161), div. (0->0), fcn. (209995->10), ass. (0->570)
t1050 = qJD(1) * qJD(2);
t995 = cos(qJ(2));
t1037 = t995 * t1050;
t991 = sin(qJ(2));
t1049 = qJDD(1) * t991;
t950 = t1037 + t1049;
t990 = sin(qJ(3));
t994 = cos(qJ(3));
t1012 = -t990 * qJDD(2) - t994 * t950;
t1056 = qJD(1) * t995;
t973 = -qJD(3) + t1056;
t1052 = qJD(3) - t973;
t1057 = qJD(1) * t991;
t944 = -t994 * qJD(2) + t1057 * t990;
t1002 = t1052 * t944 + t1012;
t946 = t990 * qJD(2) + t1057 * t994;
t1075 = t944 * t946;
t1047 = qJDD(1) * t995;
t976 = t991 * t1050;
t951 = -t976 + t1047;
t941 = -qJDD(3) + t951;
t1007 = t941 - t1075;
t1084 = t1007 * t994;
t1111 = t973 ^ 2;
t940 = t946 ^ 2;
t901 = -t940 - t1111;
t796 = t901 * t990 - t1084;
t742 = t1002 * t991 + t796 * t995;
t1085 = t1007 * t990;
t808 = t901 * t994 + t1085;
t992 = sin(qJ(1));
t996 = cos(qJ(1));
t703 = t742 * t992 + t808 * t996;
t1189 = pkin(6) * t703;
t705 = t742 * t996 - t808 * t992;
t1188 = pkin(6) * t705;
t740 = -t1002 * t995 + t796 * t991;
t1187 = pkin(7) * t740;
t1186 = -pkin(1) * t740 - pkin(8) * t796;
t1185 = pkin(1) * t808 + pkin(7) * t742;
t1031 = -t994 * qJDD(2) + t990 * t950;
t1051 = qJD(3) + t973;
t1005 = -t1051 * t946 - t1031;
t1112 = t944 ^ 2;
t922 = t1112 - t1111;
t824 = t922 * t994 + t1085;
t757 = t1005 * t991 + t824 * t995;
t821 = t922 * t990 - t1084;
t1184 = t757 * t992 - t821 * t996;
t1183 = t757 * t996 + t821 * t992;
t1181 = pkin(2) * t808;
t1179 = pkin(8) * t808;
t1174 = -t1005 * t995 + t824 * t991;
t1004 = -qJD(3) * t944 - t1012;
t927 = t944 * t973;
t848 = -t1004 + t927;
t1116 = t1005 * t990 + t848 * t994;
t1115 = t1005 * t994 - t848 * t990;
t1123 = t940 + t1112;
t1134 = t1115 * t995 - t1123 * t991;
t1153 = t1116 * t992 + t1134 * t996;
t1173 = pkin(6) * t1153;
t1154 = -t1116 * t996 + t1134 * t992;
t1172 = pkin(6) * t1154;
t1032 = t941 + t1075;
t1082 = t1032 * t994;
t1122 = -t1111 - t1112;
t1141 = t1122 * t990 - t1082;
t1171 = pkin(1) * t1141;
t1170 = pkin(2) * t1141;
t1133 = t1115 * t991 + t1123 * t995;
t1169 = pkin(7) * t1133;
t1168 = pkin(7) * t1134;
t1083 = t1032 * t990;
t1140 = t1122 * t994 + t1083;
t1167 = pkin(8) * t1140;
t1166 = pkin(8) * t1141;
t905 = t940 - t1112;
t1165 = t905 * t991;
t1164 = t905 * t995;
t1163 = t1140 * t991;
t1162 = t1140 * t995;
t1161 = t1141 * t992;
t1160 = t1141 * t996;
t923 = -t940 + t1111;
t1142 = -t923 * t990 - t1082;
t1159 = t1142 * t991;
t1158 = t1142 * t995;
t1143 = -t923 * t994 + t1083;
t1157 = t1143 * t992;
t1156 = t1143 * t996;
t844 = t1004 + t927;
t1155 = -pkin(1) * t1133 - pkin(2) * t1123 - pkin(8) * t1115;
t1152 = -2 * qJD(4);
t1151 = -2 * qJD(5);
t1150 = pkin(8) * t1116;
t986 = sin(pkin(10));
t987 = cos(pkin(10));
t895 = -t987 * t944 + t946 * t986;
t897 = t944 * t986 + t946 * t987;
t826 = t897 * t895;
t1131 = -t826 + t941;
t1147 = t1131 * t986;
t1146 = t1131 * t987;
t989 = sin(qJ(6));
t993 = cos(qJ(6));
t814 = t993 * t895 + t897 * t989;
t816 = -t895 * t989 + t897 * t993;
t739 = t816 * t814;
t936 = qJDD(6) + t941;
t1132 = -t739 + t936;
t1145 = t1132 * t989;
t1144 = t1132 * t993;
t1010 = qJD(3) * t946 + t1031;
t1105 = t995 * g(3);
t1110 = qJD(2) ^ 2;
t962 = g(1) * t996 + g(2) * t992;
t997 = qJD(1) ^ 2;
t934 = -pkin(1) * t997 + qJDD(1) * pkin(7) - t962;
t1107 = pkin(2) * t995;
t1024 = -pkin(8) * t991 - t1107;
t948 = t1024 * qJD(1);
t862 = -qJDD(2) * pkin(2) - t1110 * pkin(8) + (qJD(1) * t948 + t934) * t991 + t1105;
t999 = t1010 * pkin(3) - qJ(4) * t844 + t862;
t1065 = t973 * t990;
t1039 = t944 * t1065;
t1064 = t973 * t994;
t919 = t946 * t1064;
t1018 = -t919 - t1039;
t1038 = t944 * t1064;
t918 = t946 * t1065;
t1019 = -t918 + t1038;
t1076 = t941 * t991;
t1114 = t1019 * t995 - t1076;
t1139 = t1018 * t996 + t1114 * t992;
t1138 = -t1018 * t992 + t1114 * t996;
t1001 = t1010 * t994 + t1039;
t1000 = t1010 * t990 - t1038;
t1041 = t991 * t1075;
t1117 = t1000 * t995 - t1041;
t1137 = t1001 * t996 + t1117 * t992;
t1136 = -t1001 * t992 + t1117 * t996;
t801 = -t986 * t1004 + t1010 * t987;
t874 = t973 * t897;
t1130 = t874 + t801;
t1081 = t895 * t973;
t802 = t987 * t1004 + t986 * t1010;
t768 = -t802 - t1081;
t1014 = -t951 + t976;
t1015 = t950 + t1037;
t961 = t992 * g(1) - t996 * g(2);
t933 = qJDD(1) * pkin(1) + t997 * pkin(7) + t961;
t840 = pkin(2) * t1014 - pkin(8) * t1015 - t933;
t917 = -g(3) * t991 + t995 * t934;
t863 = -pkin(2) * t1110 + qJDD(2) * pkin(8) + t1056 * t948 + t917;
t778 = -t994 * t840 + t990 * t863;
t899 = pkin(3) * t944 - qJ(4) * t946;
t1026 = t946 * t899 + qJDD(4) + t778;
t1009 = t941 * pkin(3) + t1026;
t1003 = -qJ(4) * t1111 + t1009;
t846 = t1051 * t944 + t1012;
t676 = pkin(4) * t1032 + qJ(5) * t846 + t1003;
t1016 = pkin(4) * t973 - qJ(5) * t946;
t779 = t990 * t840 + t994 * t863;
t1013 = -t941 * qJ(4) + t1152 * t973 - t944 * t899 + t779;
t719 = -pkin(3) * t1111 + t1013;
t683 = -pkin(4) * t1112 + qJ(5) * t1010 - t1016 * t973 + t719;
t1017 = t1151 * t897 + t987 * t676 - t986 * t683;
t607 = t1151 * t895 + t986 * t676 + t987 * t683;
t930 = t995 * t941;
t1120 = t1019 * t991 + t930;
t837 = t1004 * t994 + t918;
t1020 = t995 * t837 + t1041;
t836 = -t1004 * t990 + t919;
t1119 = t1020 * t992 + t996 * t836;
t1040 = t995 * t1075;
t1118 = t1000 * t991 + t1040;
t1113 = t1020 * t996 - t836 * t992;
t812 = t814 ^ 2;
t813 = t816 ^ 2;
t893 = t895 ^ 2;
t894 = t897 ^ 2;
t964 = qJD(6) + t973;
t963 = t964 ^ 2;
t1109 = pkin(3) + pkin(4);
t1108 = pkin(2) * t991;
t1106 = pkin(3) * t994;
t1104 = qJ(4) * t994;
t579 = pkin(5) * t1131 + pkin(9) * t768 + t1017;
t1023 = pkin(5) * t973 - pkin(9) * t897;
t581 = -t893 * pkin(5) + t801 * pkin(9) - t1023 * t973 + t607;
t533 = -t993 * t579 + t989 * t581;
t534 = t989 * t579 + t993 * t581;
t504 = -t533 * t993 + t534 * t989;
t1103 = t504 * t986;
t1102 = t504 * t987;
t1035 = -pkin(3) * t973 + t1152;
t682 = t1031 * pkin(4) + t1112 * qJ(5) - qJDD(5) + t999 + (pkin(4) * qJD(3) - t1016 + t1035) * t946;
t633 = t801 * pkin(5) + t893 * pkin(9) - t1023 * t897 + t682;
t1101 = t633 * t989;
t1100 = t633 * t993;
t733 = t739 + t936;
t1099 = t733 * t989;
t1098 = t733 * t993;
t799 = t826 + t941;
t1097 = t799 * t986;
t1096 = t799 * t987;
t842 = t1052 * t946 + t1031;
t1094 = t842 * t990;
t1093 = t842 * t994;
t1092 = t1002 * t990;
t1087 = t862 * t990;
t1086 = t862 * t994;
t1078 = t933 * t991;
t1077 = t933 * t995;
t1074 = t946 * t973;
t972 = t995 * t997 * t991;
t958 = -t972 + qJDD(2);
t1073 = t958 * t991;
t1072 = t958 * t995;
t959 = qJDD(2) + t972;
t1071 = t959 * t991;
t1070 = t964 * t814;
t1069 = t964 * t989;
t1068 = t964 * t993;
t1067 = t973 * t986;
t1066 = t973 * t987;
t983 = t991 ^ 2;
t1063 = t983 * t997;
t1062 = t986 * t682;
t1061 = t987 * t682;
t1059 = t1123 - t1111;
t984 = t995 ^ 2;
t1058 = t983 + t984;
t1048 = qJDD(1) * t992;
t1046 = qJDD(1) * t996;
t1045 = t991 * t739;
t1044 = t995 * t739;
t1043 = t991 * t826;
t1042 = t995 * t826;
t699 = -t814 * qJD(6) + t989 * t801 + t993 * t802;
t1036 = qJ(4) * t990 + pkin(2);
t505 = t533 * t989 + t993 * t534;
t1033 = -t993 * t801 + t989 * t802;
t916 = t991 * t934 + t1105;
t852 = t916 * t991 + t995 * t917;
t909 = -t961 * t992 - t996 * t962;
t1029 = t992 * t972;
t1028 = t996 * t972;
t955 = -t992 * t997 + t1046;
t1022 = -pkin(6) * t955 - g(3) * t992;
t1021 = t991 * t837 - t1040;
t767 = -t802 + t1081;
t558 = t1017 * t987 + t607 * t986;
t559 = -t1017 * t986 + t987 * t607;
t708 = -t778 * t994 + t779 * t990;
t709 = t778 * t990 + t779 * t994;
t851 = t916 * t995 - t917 * t991;
t908 = t961 * t996 - t962 * t992;
t1011 = t699 - t1070;
t1006 = (-qJD(6) + t964) * t816 - t1033;
t998 = 0.2e1 * qJD(4) * t946 - t999;
t981 = t984 * t997;
t968 = -t981 - t1110;
t967 = t981 - t1110;
t966 = -t1063 - t1110;
t965 = -t1063 + t1110;
t957 = t981 - t1063;
t956 = t981 + t1063;
t954 = t996 * t997 + t1048;
t953 = t1058 * qJDD(1);
t952 = -0.2e1 * t976 + t1047;
t949 = 0.2e1 * t1037 + t1049;
t943 = t995 * t959;
t942 = t1058 * t1050;
t929 = -pkin(6) * t954 + g(3) * t996;
t921 = -t1050 * t983 + t950 * t995;
t920 = -t1050 * t984 - t951 * t991;
t915 = -t966 * t991 - t1072;
t914 = -t965 * t991 + t943;
t913 = t968 * t995 - t1071;
t912 = t967 * t995 - t1073;
t911 = t966 * t995 - t1073;
t910 = t968 * t991 + t943;
t903 = t953 * t996 - t956 * t992;
t902 = t953 * t992 + t956 * t996;
t898 = -t949 * t991 + t952 * t995;
t873 = -t894 + t1111;
t872 = t893 - t1111;
t869 = t915 * t996 + t949 * t992;
t868 = t913 * t996 - t952 * t992;
t867 = t915 * t992 - t949 * t996;
t866 = t913 * t992 + t952 * t996;
t865 = -pkin(7) * t911 - t1077;
t864 = -pkin(7) * t910 - t1078;
t857 = -t894 - t1111;
t854 = -pkin(1) * t911 + t917;
t853 = -pkin(1) * t910 + t916;
t841 = t1010 - t1074;
t817 = t894 - t893;
t807 = -t1111 - t893;
t805 = t852 * t996 - t933 * t992;
t804 = t852 * t992 + t933 * t996;
t789 = -t813 + t963;
t788 = t812 - t963;
t787 = (-t895 * t987 + t897 * t986) * t973;
t786 = (t895 * t986 + t897 * t987) * t973;
t785 = -t813 - t963;
t780 = -t893 - t894;
t775 = -t844 * t990 - t1093;
t774 = -t1092 + t1093;
t771 = -t844 * t994 + t1094;
t770 = -t1002 * t994 - t1094;
t764 = -t874 + t801;
t763 = t1086 - t1179;
t762 = -t1067 * t897 + t802 * t987;
t761 = -t1066 * t897 - t802 * t986;
t760 = t1066 * t895 - t801 * t986;
t759 = -t1067 * t895 - t801 * t987;
t756 = -t846 * t991 + t1158;
t755 = -t848 * t991 + t1158;
t754 = t872 * t987 - t1097;
t753 = -t873 * t986 + t1146;
t752 = -t872 * t986 - t1096;
t751 = -t873 * t987 - t1147;
t750 = t1087 - t1166;
t749 = t841 * t991 + t1162;
t747 = -t857 * t986 - t1096;
t746 = -t841 * t995 + t1163;
t744 = t857 * t987 - t1097;
t743 = t842 * t991 + t1162;
t741 = -t842 * t995 + t1163;
t738 = t813 - t812;
t737 = t775 * t995 + t1165;
t736 = t774 * t995 - t1165;
t735 = -t963 - t812;
t731 = t807 * t987 - t1147;
t730 = t807 * t986 + t1146;
t725 = (-t814 * t993 + t816 * t989) * t964;
t724 = (-t814 * t989 - t816 * t993) * t964;
t722 = t1035 * t946 + t999;
t721 = -t786 * t990 + t787 * t994;
t720 = -t786 * t994 - t787 * t990;
t718 = t779 - t1181;
t717 = t778 - t1170;
t716 = t721 * t995 - t1076;
t715 = qJ(4) * t1059 + t1009;
t714 = t749 * t996 + t1161;
t712 = t749 * t992 - t1160;
t710 = -t812 - t813;
t707 = pkin(3) * t1059 + t1013;
t706 = t743 * t996 + t1161;
t704 = t743 * t992 - t1160;
t702 = (-t841 + t1074) * pkin(3) + t998;
t701 = pkin(3) * t1074 - qJ(4) * t1002 + t998;
t700 = -pkin(2) * t1116 - pkin(3) * t848 - qJ(4) * t1005;
t698 = -qJD(6) * t816 - t1033;
t697 = t1130 * t987 - t768 * t986;
t696 = t764 * t987 + t767 * t986;
t695 = t1130 * t986 + t768 * t987;
t694 = -t764 * t986 + t767 * t987;
t693 = t788 * t993 - t1099;
t692 = -t789 * t989 + t1144;
t691 = t788 * t989 + t1098;
t690 = t789 * t993 + t1145;
t689 = -t761 * t990 + t762 * t994;
t688 = -t759 * t990 + t760 * t994;
t687 = -t761 * t994 - t762 * t990;
t686 = -t759 * t994 - t760 * t990;
t685 = -t785 * t989 - t1098;
t684 = t785 * t993 - t1099;
t681 = -t752 * t990 + t754 * t994;
t680 = -t751 * t990 + t753 * t994;
t679 = -t752 * t994 - t754 * t990;
t678 = -t751 * t994 - t753 * t990;
t675 = t709 * t995 + t862 * t991;
t674 = t709 * t991 - t862 * t995;
t671 = t744 * t990 + t747 * t994;
t670 = -t744 * t994 + t747 * t990;
t665 = -pkin(2) * t1002 - t1087 - t1186;
t663 = -t699 - t1070;
t659 = (qJD(6) + t964) * t816 + t1033;
t658 = -t1170 + (-t1122 - t1111) * qJ(4) + (t1032 + t941) * pkin(3) + t1026;
t657 = t735 * t993 - t1145;
t656 = t735 * t989 + t1144;
t655 = -t1069 * t816 + t699 * t993;
t654 = t1068 * t816 + t699 * t989;
t653 = t1068 * t814 - t698 * t989;
t652 = t1069 * t814 + t698 * t993;
t651 = -pkin(1) * t741 + pkin(2) * t842 + t1086 - t1167;
t650 = t689 * t995 - t1043;
t649 = t688 * t995 + t1043;
t648 = t730 * t990 + t731 * t994;
t647 = -t730 * t994 + t731 * t990;
t646 = t1181 + qJ(4) * t1007 + (t901 + t1111) * pkin(3) - t1013;
t645 = -t708 - t1150;
t644 = -t724 * t986 + t725 * t987;
t643 = -t724 * t987 - t725 * t986;
t642 = t1003 * t990 + t719 * t994;
t641 = -t1003 * t994 + t719 * t990;
t640 = -t1104 * t841 - t702 * t990 - t1166;
t639 = pkin(3) * t1092 + t701 * t994 + t1179;
t638 = -t1130 * t991 + t681 * t995;
t637 = t680 * t995 + t768 * t991;
t636 = t671 * t995 + t767 * t991;
t635 = t671 * t991 - t767 * t995;
t634 = -t718 * t991 + t763 * t995 + t1187;
t632 = t648 * t995 + t764 * t991;
t631 = t648 * t991 - t764 * t995;
t630 = -pkin(7) * t741 - t717 * t991 + t750 * t995;
t629 = t695 * t990 + t697 * t994;
t628 = -t694 * t990 + t696 * t994;
t627 = -t695 * t994 + t697 * t990;
t626 = -t694 * t994 - t696 * t990;
t625 = t675 * t996 + t708 * t992;
t624 = t675 * t992 - t708 * t996;
t623 = -t691 * t986 + t693 * t987;
t622 = -t690 * t986 + t692 * t987;
t621 = -t691 * t987 - t693 * t986;
t620 = -t690 * t987 - t692 * t986;
t619 = -qJ(4) * t767 - qJ(5) * t744 - t1061;
t618 = -t684 * t986 + t685 * t987;
t617 = t684 * t987 + t685 * t986;
t616 = t642 * t995 + t722 * t991;
t615 = t642 * t991 - t722 * t995;
t614 = t1155 - t709;
t613 = -pkin(1) * t674 + pkin(2) * t862 - pkin(8) * t709;
t612 = -qJ(4) * t764 - qJ(5) * t730 - t1062;
t611 = -pkin(1) * t746 + t1036 * t841 - t994 * t702 - t1167;
t610 = -t707 * t990 + t715 * t994 - t1150;
t609 = t628 * t995 - t817 * t991;
t608 = -t990 * t701 + (pkin(2) + t1106) * t1002 + t1186;
t605 = t629 * t995 - t780 * t991;
t604 = t629 * t991 + t780 * t995;
t603 = t1108 * t1116 + t645 * t995 - t1169;
t602 = -qJ(5) * t747 - t1109 * t767 + t1062;
t601 = t1006 * t993 - t663 * t989;
t600 = -t1011 * t989 - t659 * t993;
t599 = t1006 * t989 + t663 * t993;
t598 = t1011 * t993 - t659 * t989;
t597 = -t656 * t986 + t657 * t987;
t596 = t656 * t987 + t657 * t986;
t595 = -t654 * t986 + t655 * t987;
t594 = -t652 * t986 + t653 * t987;
t593 = -t654 * t987 - t655 * t986;
t592 = -t652 * t987 - t653 * t986;
t591 = -qJ(5) * t731 - t1109 * t764 - t1061;
t590 = t636 * t996 + t670 * t992;
t589 = t636 * t992 - t670 * t996;
t588 = -t643 * t990 + t644 * t994;
t587 = -t643 * t994 - t644 * t990;
t586 = -pkin(9) * t684 - t1100;
t585 = t588 * t995 - t936 * t991;
t584 = -pkin(8) * t641 + (pkin(3) * t990 - t1104) * t722;
t583 = -pkin(2) * t641 + pkin(3) * t1003 - qJ(4) * t719;
t582 = -pkin(7) * t674 + (-pkin(8) * t995 + t1108) * t708;
t580 = -t707 * t994 - t715 * t990 + t1155;
t577 = -pkin(9) * t656 - t1101;
t576 = t632 * t996 + t647 * t992;
t575 = t632 * t992 - t647 * t996;
t574 = -pkin(7) * t746 + t640 * t995 - t658 * t991;
t573 = t639 * t995 - t646 * t991 - t1187;
t572 = t616 * t996 + t641 * t992;
t571 = t616 * t992 - t641 * t996;
t570 = t610 * t995 - t700 * t991 - t1169;
t569 = -t621 * t990 + t623 * t994;
t568 = -t620 * t990 + t622 * t994;
t567 = -t621 * t994 - t623 * t990;
t566 = -t620 * t994 - t622 * t990;
t565 = -pkin(5) * t1011 + pkin(9) * t685 - t1101;
t564 = t617 * t990 + t618 * t994;
t563 = -t617 * t994 + t618 * t990;
t562 = t605 * t996 + t627 * t992;
t561 = t605 * t992 - t627 * t996;
t560 = -pkin(5) * t659 + pkin(9) * t657 + t1100;
t557 = -pkin(2) * t627 - qJ(4) * t697 + t1109 * t695;
t556 = -pkin(2) * t670 - qJ(4) * t747 + t1109 * t744 - t607;
t555 = -t599 * t986 + t601 * t987;
t554 = -t598 * t986 + t600 * t987;
t553 = t599 * t987 + t601 * t986;
t552 = -t598 * t987 - t600 * t986;
t551 = t596 * t990 + t597 * t994;
t550 = -t596 * t994 + t597 * t990;
t549 = -t593 * t990 + t595 * t994;
t548 = -t592 * t990 + t594 * t994;
t547 = -t593 * t994 - t595 * t990;
t546 = -t592 * t994 - t594 * t990;
t545 = -t1006 * t991 + t569 * t995;
t544 = t568 * t995 + t663 * t991;
t543 = -t1011 * t991 + t564 * t995;
t542 = t1011 * t995 + t564 * t991;
t541 = -pkin(2) * t647 - qJ(4) * t731 + t1109 * t730 + t1017;
t540 = -qJ(4) * t682 - qJ(5) * t558;
t539 = -pkin(1) * t615 - pkin(8) * t642 + (t1036 + t1106) * t722;
t538 = -pkin(8) * t670 - t602 * t990 + t619 * t994;
t537 = t549 * t995 - t1045;
t536 = t548 * t995 + t1045;
t535 = qJ(4) * t780 - qJ(5) * t695 - t558;
t531 = -pkin(8) * t647 - t591 * t990 + t612 * t994;
t530 = -qJ(5) * t697 + t1109 * t780 - t559;
t529 = t551 * t995 - t659 * t991;
t528 = t551 * t991 + t659 * t995;
t527 = -qJ(5) * t559 - t1109 * t682;
t526 = -pkin(1) * t635 + pkin(2) * t767 - pkin(8) * t671 - t602 * t994 - t619 * t990;
t525 = -pkin(7) * t615 - t583 * t991 + t584 * t995;
t524 = -pkin(1) * t631 + pkin(2) * t764 - pkin(8) * t648 - t591 * t994 - t612 * t990;
t523 = t558 * t990 + t559 * t994;
t522 = -t558 * t994 + t559 * t990;
t521 = t543 * t996 + t563 * t992;
t520 = t543 * t992 - t563 * t996;
t519 = t553 * t990 + t555 * t994;
t518 = -t552 * t990 + t554 * t994;
t517 = -t553 * t994 + t555 * t990;
t516 = -t552 * t994 - t554 * t990;
t515 = t523 * t995 + t682 * t991;
t514 = t523 * t991 - t682 * t995;
t513 = qJ(4) * t1011 - qJ(5) * t617 - t565 * t986 + t586 * t987;
t512 = t518 * t995 - t738 * t991;
t511 = t519 * t995 - t710 * t991;
t510 = t519 * t991 + t710 * t995;
t509 = qJ(4) * t659 - qJ(5) * t596 - t560 * t986 + t577 * t987;
t508 = -qJ(5) * t618 + t1011 * t1109 - t987 * t565 - t986 * t586;
t507 = t529 * t996 + t550 * t992;
t506 = t529 * t992 - t550 * t996;
t503 = -pkin(7) * t635 + t538 * t995 - t556 * t991;
t502 = -qJ(5) * t597 + t1109 * t659 - t987 * t560 - t986 * t577;
t501 = -pkin(7) * t631 + t531 * t995 - t541 * t991;
t500 = pkin(5) * t633 + pkin(9) * t505;
t499 = -pkin(8) * t627 - t530 * t990 + t535 * t994;
t498 = -pkin(9) * t599 - t504;
t497 = -pkin(5) * t710 + pkin(9) * t601 + t505;
t496 = -pkin(1) * t604 - pkin(2) * t780 - pkin(8) * t629 - t530 * t994 - t535 * t990;
t495 = -pkin(2) * t563 + pkin(5) * t684 - qJ(4) * t618 + t1109 * t617 - t534;
t494 = t515 * t996 + t522 * t992;
t493 = t515 * t992 - t522 * t996;
t492 = -pkin(2) * t550 + pkin(5) * t656 - qJ(4) * t597 + t1109 * t596 - t533;
t491 = t511 * t996 + t517 * t992;
t490 = t511 * t992 - t517 * t996;
t489 = -pkin(7) * t604 + t499 * t995 - t557 * t991;
t488 = -pkin(8) * t522 - t527 * t990 + t540 * t994;
t487 = -pkin(2) * t522 - qJ(4) * t559 + t1109 * t558;
t486 = t505 * t987 - t1103;
t485 = t505 * t986 + t1102;
t484 = -pkin(8) * t563 - t508 * t990 + t513 * t994;
t483 = -pkin(2) * t517 + pkin(5) * t599 - qJ(4) * t555 + t1109 * t553;
t482 = -pkin(8) * t550 - t502 * t990 + t509 * t994;
t481 = -pkin(1) * t542 - pkin(2) * t1011 - pkin(8) * t564 - t508 * t994 - t513 * t990;
t480 = -pkin(1) * t514 + pkin(2) * t682 - pkin(8) * t523 - t527 * t994 - t540 * t990;
t479 = qJ(4) * t710 - qJ(5) * t553 - t497 * t986 + t498 * t987;
t478 = -pkin(1) * t528 - pkin(2) * t659 - pkin(8) * t551 - t502 * t994 - t509 * t990;
t477 = -qJ(5) * t555 + t1109 * t710 - t987 * t497 - t986 * t498;
t476 = t485 * t990 + t486 * t994;
t475 = -t485 * t994 + t486 * t990;
t474 = -pkin(7) * t542 + t484 * t995 - t495 * t991;
t473 = t476 * t995 + t633 * t991;
t472 = t476 * t991 - t633 * t995;
t471 = -pkin(9) * t1102 - qJ(4) * t633 - qJ(5) * t485 - t500 * t986;
t470 = pkin(9) * t1103 - qJ(5) * t486 - t1109 * t633 - t987 * t500;
t469 = -pkin(7) * t514 - t487 * t991 + t488 * t995;
t468 = -pkin(7) * t528 + t482 * t995 - t492 * t991;
t467 = -pkin(8) * t517 - t477 * t990 + t479 * t994;
t466 = -pkin(1) * t510 - pkin(2) * t710 - pkin(8) * t519 - t477 * t994 - t479 * t990;
t465 = t473 * t996 + t475 * t992;
t464 = t473 * t992 - t475 * t996;
t463 = -pkin(7) * t510 + t467 * t995 - t483 * t991;
t462 = -pkin(2) * t475 + pkin(5) * t504 - qJ(4) * t486 + t1109 * t485;
t461 = -pkin(8) * t475 - t470 * t990 + t471 * t994;
t460 = -pkin(1) * t472 + pkin(2) * t633 - pkin(8) * t476 - t470 * t994 - t471 * t990;
t459 = -pkin(7) * t472 + t461 * t995 - t462 * t991;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t954, -t955, 0, t909, 0, 0, 0, 0, 0, 0, t868, t869, t903, t805, 0, 0, 0, 0, 0, 0, t706, -t705, t1153, t625, 0, 0, 0, 0, 0, 0, t714, t1153, t705, t572, 0, 0, 0, 0, 0, 0, t576, t590, t562, t494, 0, 0, 0, 0, 0, 0, t507, t521, t491, t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t955, -t954, 0, t908, 0, 0, 0, 0, 0, 0, t866, t867, t902, t804, 0, 0, 0, 0, 0, 0, t704, -t703, t1154, t624, 0, 0, 0, 0, 0, 0, t712, t1154, t703, t571, 0, 0, 0, 0, 0, 0, t575, t589, t561, t493, 0, 0, 0, 0, 0, 0, t506, t520, t490, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t910, t911, 0, -t851, 0, 0, 0, 0, 0, 0, t741, -t740, t1133, t674, 0, 0, 0, 0, 0, 0, t746, t1133, t740, t615, 0, 0, 0, 0, 0, 0, t631, t635, t604, t514, 0, 0, 0, 0, 0, 0, t528, t542, t510, t472; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t955, 0, -t954, 0, t1022, -t929, -t908, -pkin(6) * t908, t921 * t996 - t1029, t898 * t996 - t957 * t992, t1048 * t991 + t914 * t996, t920 * t996 + t1029, t1047 * t992 + t912 * t996, qJDD(2) * t992 + t942 * t996, -pkin(6) * t866 - t853 * t992 + t864 * t996, -pkin(6) * t867 - t854 * t992 + t865 * t996, -pkin(6) * t902 + t851 * t996, -pkin(6) * t804 - (pkin(1) * t992 - pkin(7) * t996) * t851, t1113, t737 * t996 - t771 * t992, t755 * t996 - t1157, t1136, t1183, t1138, -pkin(6) * t704 + t630 * t996 - t651 * t992, t634 * t996 - t665 * t992 + t1189, t603 * t996 - t614 * t992 - t1172, -pkin(6) * t624 + t582 * t996 - t613 * t992, t1113, t756 * t996 - t1157, t736 * t996 - t770 * t992, t1138, -t1183, t1136, -pkin(6) * t712 + t574 * t996 - t611 * t992, t570 * t996 - t580 * t992 - t1172, t573 * t996 - t608 * t992 - t1189, -pkin(6) * t571 + t525 * t996 - t539 * t992, t650 * t996 - t687 * t992, t609 * t996 - t626 * t992, t637 * t996 - t678 * t992, t649 * t996 - t686 * t992, t638 * t996 - t679 * t992, t716 * t996 - t720 * t992, -pkin(6) * t575 + t501 * t996 - t524 * t992, -pkin(6) * t589 + t503 * t996 - t526 * t992, -pkin(6) * t561 + t489 * t996 - t496 * t992, -pkin(6) * t493 + t469 * t996 - t480 * t992, t537 * t996 - t547 * t992, t512 * t996 - t516 * t992, t544 * t996 - t566 * t992, t536 * t996 - t546 * t992, t545 * t996 - t567 * t992, t585 * t996 - t587 * t992, -pkin(6) * t506 + t468 * t996 - t478 * t992, -pkin(6) * t520 + t474 * t996 - t481 * t992, -pkin(6) * t490 + t463 * t996 - t466 * t992, -pkin(6) * t464 + t459 * t996 - t460 * t992; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t954, 0, t955, 0, t929, t1022, t909, pkin(6) * t909, t921 * t992 + t1028, t898 * t992 + t957 * t996, -t1046 * t991 + t914 * t992, t920 * t992 - t1028, -t1046 * t995 + t912 * t992, -qJDD(2) * t996 + t942 * t992, pkin(6) * t868 + t853 * t996 + t864 * t992, pkin(6) * t869 + t854 * t996 + t865 * t992, pkin(6) * t903 + t851 * t992, pkin(6) * t805 - (-pkin(1) * t996 - pkin(7) * t992) * t851, t1119, t737 * t992 + t771 * t996, t755 * t992 + t1156, t1137, t1184, t1139, pkin(6) * t706 + t630 * t992 + t651 * t996, t634 * t992 + t665 * t996 - t1188, t603 * t992 + t614 * t996 + t1173, pkin(6) * t625 + t582 * t992 + t613 * t996, t1119, t756 * t992 + t1156, t736 * t992 + t770 * t996, t1139, -t1184, t1137, pkin(6) * t714 + t574 * t992 + t611 * t996, t570 * t992 + t580 * t996 + t1173, t573 * t992 + t608 * t996 + t1188, pkin(6) * t572 + t525 * t992 + t539 * t996, t650 * t992 + t687 * t996, t609 * t992 + t626 * t996, t637 * t992 + t678 * t996, t649 * t992 + t686 * t996, t638 * t992 + t679 * t996, t716 * t992 + t720 * t996, pkin(6) * t576 + t501 * t992 + t524 * t996, pkin(6) * t590 + t503 * t992 + t526 * t996, pkin(6) * t562 + t489 * t992 + t496 * t996, pkin(6) * t494 + t469 * t992 + t480 * t996, t537 * t992 + t547 * t996, t512 * t992 + t516 * t996, t544 * t992 + t566 * t996, t536 * t992 + t546 * t996, t545 * t992 + t567 * t996, t585 * t992 + t587 * t996, pkin(6) * t507 + t468 * t992 + t478 * t996, pkin(6) * t521 + t474 * t992 + t481 * t996, pkin(6) * t491 + t463 * t992 + t466 * t996, pkin(6) * t465 + t459 * t992 + t460 * t996; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t961, t962, 0, 0, t1015 * t991, t949 * t995 + t952 * t991, t965 * t995 + t1071, -t1014 * t995, t967 * t991 + t1072, 0, pkin(1) * t952 + pkin(7) * t913 + t1077, -pkin(1) * t949 + pkin(7) * t915 - t1078, pkin(1) * t956 + pkin(7) * t953 + t852, pkin(1) * t933 + pkin(7) * t852, t1021, t775 * t991 - t1164, t848 * t995 + t1159, t1118, t1174, t1120, pkin(7) * t743 + t717 * t995 + t750 * t991 - t1171, t718 * t995 + t763 * t991 - t1185, t1168 + t991 * t645 + (-pkin(1) - t1107) * t1116, pkin(7) * t675 + (-pkin(1) + t1024) * t708, t1021, t846 * t995 + t1159, t774 * t991 + t1164, t1120, -t1174, t1118, pkin(7) * t749 + t640 * t991 + t658 * t995 - t1171, -pkin(1) * t1116 + t610 * t991 + t700 * t995 + t1168, t639 * t991 + t646 * t995 + t1185, -pkin(1) * t641 + pkin(7) * t616 + t583 * t995 + t584 * t991, t689 * t991 + t1042, t628 * t991 + t817 * t995, t680 * t991 - t768 * t995, t688 * t991 - t1042, t1130 * t995 + t681 * t991, t721 * t991 + t930, -pkin(1) * t647 + pkin(7) * t632 + t531 * t991 + t541 * t995, -pkin(1) * t670 + pkin(7) * t636 + t538 * t991 + t556 * t995, -pkin(1) * t627 + pkin(7) * t605 + t499 * t991 + t557 * t995, -pkin(1) * t522 + pkin(7) * t515 + t487 * t995 + t488 * t991, t549 * t991 + t1044, t518 * t991 + t738 * t995, t568 * t991 - t663 * t995, t548 * t991 - t1044, t1006 * t995 + t569 * t991, t588 * t991 + t936 * t995, -pkin(1) * t550 + pkin(7) * t529 + t482 * t991 + t492 * t995, -pkin(1) * t563 + pkin(7) * t543 + t484 * t991 + t495 * t995, -pkin(1) * t517 + pkin(7) * t511 + t467 * t991 + t483 * t995, -pkin(1) * t475 + pkin(7) * t473 + t461 * t991 + t462 * t995;];
tauB_reg  = t1;
