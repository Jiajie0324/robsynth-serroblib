% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 11:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 11:06:35
% EndTime: 2019-05-07 11:07:57
% DurationCPUTime: 59.65s
% Computational Cost: add. (602389->945), mult. (1281675->1462), div. (0->0), fcn. (960464->12), ass. (0->652)
t1118 = sin(qJ(3));
t1123 = cos(qJ(3));
t1119 = sin(qJ(2));
t1183 = qJD(1) * t1119;
t1072 = -t1123 * qJD(2) + t1118 * t1183;
t1124 = cos(qJ(2));
t1182 = qJD(1) * t1124;
t1101 = -qJD(3) + t1182;
t1055 = t1072 * t1101;
t1143 = qJD(2) * t1182;
t1155 = qJDD(1) * t1119;
t1077 = t1143 + t1155;
t1142 = t1072 * qJD(3) - t1118 * qJDD(2) - t1123 * t1077;
t996 = t1055 + t1142;
t1116 = sin(qJ(6));
t1121 = cos(qJ(6));
t1117 = sin(qJ(5));
t1122 = cos(qJ(5));
t1113 = sin(pkin(11));
t1114 = cos(pkin(11));
t1073 = qJD(2) * t1118 + t1123 * t1183;
t1132 = t1123 * qJDD(2) - t1118 * t1077;
t1129 = qJD(3) * t1073 - t1132;
t1139 = -t1113 * t1142 + t1114 * t1129;
t966 = -t1113 * t1129 - t1114 * t1142;
t1140 = t1117 * t966 + t1122 * t1139;
t1032 = t1114 * t1072 + t1073 * t1113;
t1033 = -t1072 * t1113 + t1073 * t1114;
t977 = -t1032 * t1117 + t1033 * t1122;
t876 = -qJD(5) * t977 - t1140;
t975 = t1122 * t1032 + t1033 * t1117;
t877 = -t975 * qJD(5) - t1117 * t1139 + t1122 * t966;
t912 = t1116 * t977 + t1121 * t975;
t777 = -qJD(6) * t912 + t1116 * t876 + t1121 * t877;
t1093 = -qJD(5) + t1101;
t1086 = -qJD(6) + t1093;
t902 = t912 * t1086;
t1223 = t777 + t902;
t957 = t975 * t1093;
t844 = t957 - t877;
t1222 = t957 + t877;
t1018 = t1032 * t1101;
t941 = t1018 - t966;
t1221 = t1018 + t966;
t1104 = qJD(2) * t1183;
t1153 = qJDD(1) * t1124;
t1078 = -t1104 + t1153;
t1069 = -qJDD(3) + t1078;
t1177 = t1032 * t1033;
t1131 = -t1069 - t1177;
t1220 = t1113 * t1131;
t1219 = t1114 * t1131;
t1064 = -qJDD(5) + t1069;
t1059 = -qJDD(6) + t1064;
t914 = -t1116 * t975 + t1121 * t977;
t1204 = t912 * t914;
t1127 = -t1059 - t1204;
t1218 = t1116 * t1127;
t1203 = t975 * t977;
t1128 = -t1064 - t1203;
t1217 = t1117 * t1128;
t1172 = t1072 * t1073;
t1130 = -t1069 - t1172;
t1216 = t1118 * t1130;
t1215 = t1121 * t1127;
t1214 = t1122 * t1128;
t1213 = t1123 * t1130;
t995 = t1142 - t1055;
t840 = (qJD(5) + t1093) * t977 + t1140;
t1141 = t1116 * t877 - t1121 * t876;
t743 = (qJD(6) + t1086) * t914 + t1141;
t991 = (qJD(3) + t1101) * t1073 - t1132;
t910 = t912 ^ 2;
t911 = t914 ^ 2;
t1212 = t975 ^ 2;
t974 = t977 ^ 2;
t1211 = qJD(2) ^ 2;
t1210 = t1032 ^ 2;
t1031 = t1033 ^ 2;
t1209 = t1072 ^ 2;
t1068 = t1073 ^ 2;
t1083 = t1086 ^ 2;
t1092 = t1093 ^ 2;
t1208 = t1101 ^ 2;
t1207 = pkin(2) * t1119;
t1206 = pkin(2) * t1124;
t1205 = t1124 * g(3);
t1120 = sin(qJ(1));
t1125 = cos(qJ(1));
t1091 = g(1) * t1125 + g(2) * t1120;
t1126 = qJD(1) ^ 2;
t1062 = -pkin(1) * t1126 + qJDD(1) * pkin(7) - t1091;
t1050 = -g(3) * t1119 + t1124 * t1062;
t1136 = -pkin(8) * t1119 - t1206;
t1075 = t1136 * qJD(1);
t1007 = -pkin(2) * t1211 + qJDD(2) * pkin(8) + t1075 * t1182 + t1050;
t1090 = t1120 * g(1) - t1125 * g(2);
t1061 = qJDD(1) * pkin(1) + t1126 * pkin(7) + t1090;
t1133 = -t1078 + t1104;
t1134 = t1077 + t1143;
t990 = pkin(2) * t1133 - pkin(8) * t1134 - t1061;
t946 = t1118 * t1007 - t1123 * t990;
t887 = t1130 * pkin(3) + qJ(4) * t996 - t946;
t1048 = -pkin(3) * t1101 - qJ(4) * t1073;
t947 = t1123 * t1007 + t1118 * t990;
t890 = -pkin(3) * t1209 - qJ(4) * t1129 + t1101 * t1048 + t947;
t811 = 0.2e1 * qJD(4) * t1033 + t1113 * t890 - t1114 * t887;
t775 = t1131 * pkin(4) + pkin(9) * t941 - t811;
t1010 = -pkin(4) * t1101 - pkin(9) * t1033;
t812 = -0.2e1 * qJD(4) * t1032 + t1113 * t887 + t1114 * t890;
t782 = -pkin(4) * t1210 - pkin(9) * t1139 + t1101 * t1010 + t812;
t711 = t1117 * t782 - t1122 * t775;
t673 = t1128 * pkin(5) + pkin(10) * t844 - t711;
t712 = t1117 * t775 + t1122 * t782;
t954 = -pkin(5) * t1093 - pkin(10) * t977;
t675 = -pkin(5) * t1212 + pkin(10) * t876 + t1093 * t954 + t712;
t620 = t1116 * t673 + t1121 * t675;
t650 = t1117 * t712 - t1122 * t711;
t1202 = t1113 * t650;
t1006 = t1205 - qJDD(2) * pkin(2) - t1211 * pkin(8) + (qJD(1) * t1075 + t1062) * t1119;
t923 = t1129 * pkin(3) - t1209 * qJ(4) + t1073 * t1048 + qJDD(4) + t1006;
t1201 = t1113 * t923;
t962 = t1069 - t1177;
t1200 = t1113 * t962;
t1199 = t1114 * t650;
t1198 = t1114 * t923;
t1197 = t1114 * t962;
t835 = t1139 * pkin(4) - t1210 * pkin(9) + t1033 * t1010 + t923;
t748 = -t876 * pkin(5) - pkin(10) * t1212 + t977 * t954 + t835;
t1196 = t1116 * t748;
t836 = t1059 - t1204;
t1195 = t1116 * t836;
t619 = t1116 * t675 - t1121 * t673;
t576 = t1116 * t620 - t1121 * t619;
t1194 = t1117 * t576;
t1193 = t1117 * t835;
t906 = t1064 - t1203;
t1192 = t1117 * t906;
t735 = t1113 * t812 - t1114 * t811;
t1191 = t1118 * t735;
t1190 = t1121 * t748;
t1189 = t1121 * t836;
t1188 = t1122 * t576;
t1187 = t1122 * t835;
t1186 = t1122 * t906;
t1185 = t1123 * t735;
t1184 = qJD(1) * qJD(2);
t1181 = t1006 * t1118;
t1180 = t1006 * t1123;
t1020 = t1069 - t1172;
t1179 = t1020 * t1118;
t1178 = t1020 * t1123;
t1176 = t1033 * t1101;
t1175 = t1061 * t1119;
t1174 = t1061 * t1124;
t1173 = t1069 * t1119;
t1171 = t1086 * t1116;
t1170 = t1086 * t1121;
t1100 = t1124 * t1126 * t1119;
t1088 = -t1100 + qJDD(2);
t1169 = t1088 * t1119;
t1168 = t1088 * t1124;
t1089 = qJDD(2) + t1100;
t1167 = t1089 * t1119;
t1166 = t1093 * t1117;
t1165 = t1093 * t1122;
t1164 = t1101 * t1113;
t1163 = t1101 * t1114;
t1162 = t1101 * t1118;
t1161 = t1101 * t1123;
t1110 = t1119 ^ 2;
t1160 = t1110 * t1126;
t1111 = t1124 ^ 2;
t1156 = t1110 + t1111;
t1154 = qJDD(1) * t1120;
t1152 = qJDD(1) * t1125;
t1151 = t1119 * t1204;
t1150 = t1119 * t1203;
t1149 = t1124 * t1204;
t1148 = t1124 * t1203;
t1147 = t1119 * t1177;
t1146 = t1124 * t1177;
t1145 = t1119 * t1172;
t1144 = t1124 * t1172;
t736 = t1113 * t811 + t1114 * t812;
t577 = t1116 * t619 + t1121 * t620;
t651 = t1117 * t711 + t1122 * t712;
t1049 = t1062 * t1119 + t1205;
t999 = t1049 * t1119 + t1124 * t1050;
t1041 = -t1090 * t1120 - t1125 * t1091;
t1138 = t1120 * t1100;
t1137 = t1125 * t1100;
t1082 = -t1120 * t1126 + t1152;
t1135 = -pkin(6) * t1082 - g(3) * t1120;
t880 = t1118 * t947 - t1123 * t946;
t881 = t1118 * t946 + t1123 * t947;
t998 = t1049 * t1124 - t1050 * t1119;
t1040 = t1090 * t1125 - t1091 * t1120;
t937 = t1139 + t1176;
t1108 = t1111 * t1126;
t1098 = -t1108 - t1211;
t1097 = t1108 - t1211;
t1096 = -t1160 - t1211;
t1095 = -t1160 + t1211;
t1085 = t1108 - t1160;
t1084 = t1108 + t1160;
t1081 = t1125 * t1126 + t1154;
t1080 = t1156 * qJDD(1);
t1079 = -0.2e1 * t1104 + t1153;
t1076 = 0.2e1 * t1143 + t1155;
t1071 = t1124 * t1089;
t1070 = t1156 * t1184;
t1058 = t1124 * t1069;
t1057 = -pkin(6) * t1081 + g(3) * t1125;
t1054 = -t1068 + t1208;
t1053 = -t1208 + t1209;
t1052 = t1077 * t1124 - t1110 * t1184;
t1051 = -t1078 * t1119 - t1111 * t1184;
t1047 = -t1096 * t1119 - t1168;
t1046 = -t1095 * t1119 + t1071;
t1045 = t1098 * t1124 - t1167;
t1044 = t1097 * t1124 - t1169;
t1043 = t1096 * t1124 - t1169;
t1042 = t1098 * t1119 + t1071;
t1038 = -t1068 + t1209;
t1037 = t1080 * t1125 - t1084 * t1120;
t1036 = t1080 * t1120 + t1084 * t1125;
t1035 = -t1068 - t1208;
t1034 = -t1076 * t1119 + t1079 * t1124;
t1030 = -t1208 - t1209;
t1019 = t1068 + t1209;
t1016 = -t1031 + t1208;
t1015 = -t1208 + t1210;
t1014 = t1047 * t1125 + t1076 * t1120;
t1013 = t1045 * t1125 - t1079 * t1120;
t1012 = t1047 * t1120 - t1076 * t1125;
t1011 = t1045 * t1120 + t1079 * t1125;
t1009 = -pkin(7) * t1043 - t1174;
t1008 = -pkin(7) * t1042 - t1175;
t1005 = (t1072 * t1123 - t1073 * t1118) * t1101;
t1004 = (-t1072 * t1118 - t1073 * t1123) * t1101;
t1003 = -t1031 - t1208;
t1001 = -pkin(1) * t1043 + t1050;
t1000 = -pkin(1) * t1042 + t1049;
t992 = (-qJD(3) + t1101) * t1073 + t1132;
t987 = t1073 * t1162 - t1123 * t1142;
t986 = t1073 * t1161 + t1118 * t1142;
t985 = -t1072 * t1161 + t1118 * t1129;
t984 = t1072 * t1162 + t1123 * t1129;
t983 = t1005 * t1124 - t1173;
t982 = t1053 * t1123 + t1179;
t981 = -t1054 * t1118 + t1213;
t980 = -t1053 * t1118 + t1178;
t979 = -t1054 * t1123 - t1216;
t978 = -t1031 + t1210;
t973 = -t1035 * t1118 + t1178;
t972 = t1035 * t1123 + t1179;
t970 = -t1208 - t1210;
t969 = -t1061 * t1120 + t1125 * t999;
t968 = t1061 * t1125 + t1120 * t999;
t961 = t1030 * t1123 - t1216;
t960 = t1030 * t1118 + t1213;
t956 = -t974 + t1092;
t955 = -t1092 + t1212;
t953 = (t1032 * t1114 - t1033 * t1113) * t1101;
t952 = (t1032 * t1113 + t1033 * t1114) * t1101;
t951 = -t974 - t1092;
t950 = t1124 * t987 + t1145;
t949 = t1124 * t985 - t1145;
t948 = -t1031 - t1210;
t945 = -t1118 * t996 - t1123 * t991;
t944 = t1118 * t995 + t1123 * t992;
t943 = -t1118 * t991 + t1123 * t996;
t942 = -t1118 * t992 + t1123 * t995;
t936 = t1139 - t1176;
t935 = -pkin(8) * t972 + t1180;
t934 = t1033 * t1164 + t1114 * t966;
t933 = -t1033 * t1163 + t1113 * t966;
t932 = -t1032 * t1163 + t1113 * t1139;
t931 = -t1032 * t1164 - t1114 * t1139;
t930 = -t1119 * t991 + t1124 * t982;
t929 = -t1119 * t996 + t1124 * t981;
t928 = t1015 * t1114 + t1200;
t927 = -t1016 * t1113 + t1219;
t926 = t1015 * t1113 - t1197;
t925 = t1016 * t1114 + t1220;
t924 = -pkin(8) * t960 + t1181;
t922 = -t1119 * t995 + t1124 * t973;
t921 = -t1003 * t1113 + t1197;
t920 = t1119 * t973 + t1124 * t995;
t919 = t1003 * t1114 + t1200;
t918 = -t1119 * t992 + t1124 * t961;
t917 = t1119 * t961 + t1124 * t992;
t916 = -t974 + t1212;
t915 = -t1038 * t1119 + t1124 * t944;
t909 = -t1092 - t1212;
t905 = t1114 * t970 - t1220;
t904 = t1113 * t970 + t1219;
t901 = -t1019 * t1119 + t1124 * t945;
t900 = t1019 * t1124 + t1119 * t945;
t899 = -t911 + t1083;
t898 = t910 - t1083;
t897 = (-t1117 * t977 + t1122 * t975) * t1093;
t896 = (t1117 * t975 + t1122 * t977) * t1093;
t895 = -t911 - t1083;
t894 = -t1118 * t952 + t1123 * t953;
t893 = -t1118 * t953 - t1123 * t952;
t892 = -pkin(2) * t972 + t947;
t891 = -pkin(2) * t960 + t946;
t888 = t1124 * t894 - t1173;
t884 = t1120 * t972 + t1125 * t922;
t883 = t1120 * t922 - t1125 * t972;
t882 = -t974 - t1212;
t879 = t1120 * t960 + t1125 * t918;
t878 = t1120 * t918 - t1125 * t960;
t873 = -t1113 * t941 - t1114 * t937;
t872 = -t1113 * t1221 - t1114 * t936;
t871 = -t1113 * t937 + t1114 * t941;
t870 = -t1113 * t936 + t1114 * t1221;
t869 = t1122 * t955 + t1192;
t868 = -t1117 * t956 + t1214;
t867 = t1117 * t955 - t1186;
t866 = t1122 * t956 + t1217;
t865 = -t1118 * t933 + t1123 * t934;
t864 = -t1118 * t931 + t1123 * t932;
t863 = -t1118 * t934 - t1123 * t933;
t862 = -t1118 * t932 - t1123 * t931;
t861 = -t1117 * t951 + t1186;
t860 = t1122 * t951 + t1192;
t859 = -t1118 * t926 + t1123 * t928;
t858 = -t1118 * t925 + t1123 * t927;
t857 = -t1118 * t928 - t1123 * t926;
t856 = -t1118 * t927 - t1123 * t925;
t855 = t1006 * t1119 + t1124 * t881;
t854 = -t1006 * t1124 + t1119 * t881;
t853 = -qJ(4) * t919 + t1198;
t852 = -t1118 * t919 + t1123 * t921;
t851 = t1118 * t921 + t1123 * t919;
t850 = t1120 * t943 + t1125 * t901;
t849 = t1120 * t901 - t1125 * t943;
t848 = -qJ(4) * t904 + t1201;
t847 = -t911 + t910;
t846 = -t1083 - t910;
t845 = -pkin(1) * t920 - pkin(2) * t995 - pkin(8) * t973 - t1181;
t839 = (qJD(5) - t1093) * t977 + t1140;
t834 = t1122 * t909 - t1217;
t833 = t1117 * t909 + t1214;
t832 = t1122 * t877 + t1166 * t977;
t831 = t1117 * t877 - t1165 * t977;
t830 = -t1117 * t876 - t1165 * t975;
t829 = t1122 * t876 - t1166 * t975;
t828 = -pkin(1) * t917 - pkin(2) * t992 - pkin(8) * t961 + t1180;
t827 = t1124 * t865 + t1147;
t826 = t1124 * t864 - t1147;
t825 = -t1118 * t904 + t1123 * t905;
t824 = t1118 * t905 + t1123 * t904;
t823 = (-t1116 * t914 + t1121 * t912) * t1086;
t822 = (t1116 * t912 + t1121 * t914) * t1086;
t821 = -pkin(8) * t943 - t880;
t820 = -t1113 * t896 + t1114 * t897;
t819 = t1113 * t897 + t1114 * t896;
t818 = -t1119 * t937 + t1124 * t859;
t817 = -t1119 * t941 + t1124 * t858;
t816 = -pkin(3) * t1221 + qJ(4) * t921 + t1201;
t815 = t1119 * t1221 + t1124 * t852;
t814 = t1119 * t852 - t1124 * t1221;
t813 = -pkin(3) * t936 + qJ(4) * t905 - t1198;
t809 = -pkin(7) * t920 - t1119 * t892 + t1124 * t935;
t808 = t1119 * t936 + t1124 * t825;
t807 = t1119 * t825 - t1124 * t936;
t806 = -t910 - t911;
t805 = -pkin(7) * t917 - t1119 * t891 + t1124 * t924;
t804 = -t1118 * t871 + t1123 * t873;
t803 = -t1118 * t870 + t1123 * t872;
t802 = t1118 * t873 + t1123 * t871;
t801 = -t1118 * t872 - t1123 * t870;
t800 = t1121 * t898 + t1195;
t799 = -t1116 * t899 + t1215;
t798 = t1116 * t898 - t1189;
t797 = t1121 * t899 + t1218;
t796 = t1120 * t880 + t1125 * t855;
t795 = t1120 * t855 - t1125 * t880;
t794 = -t1116 * t895 + t1189;
t793 = t1121 * t895 + t1195;
t792 = -t1113 * t867 + t1114 * t869;
t791 = -t1113 * t866 + t1114 * t868;
t790 = t1113 * t869 + t1114 * t867;
t789 = t1113 * t868 + t1114 * t866;
t788 = -t1113 * t860 + t1114 * t861;
t787 = t1113 * t861 + t1114 * t860;
t786 = -pkin(1) * t900 - pkin(2) * t1019 - pkin(8) * t945 - t881;
t785 = -pkin(1) * t854 + pkin(2) * t1006 - pkin(8) * t881;
t784 = -t1119 * t978 + t1124 * t803;
t783 = -pkin(9) * t860 + t1187;
t781 = t1119 * t948 + t1124 * t804;
t780 = t1119 * t804 - t1124 * t948;
t778 = -pkin(7) * t900 + t1124 * t821 + t1207 * t943;
t776 = -qJD(6) * t914 - t1141;
t772 = -t1117 * t844 - t1122 * t840;
t771 = -t1117 * t1222 - t1122 * t839;
t770 = -t1117 * t840 + t1122 * t844;
t769 = -t1117 * t839 + t1122 * t1222;
t768 = t1121 * t846 - t1218;
t767 = t1116 * t846 + t1215;
t766 = -pkin(9) * t833 + t1193;
t765 = -t1113 * t833 + t1114 * t834;
t764 = t1113 * t834 + t1114 * t833;
t763 = -t1113 * t831 + t1114 * t832;
t762 = -t1113 * t829 + t1114 * t830;
t761 = t1113 * t832 + t1114 * t831;
t760 = t1113 * t830 + t1114 * t829;
t759 = -t1117 * t822 + t1122 * t823;
t758 = t1117 * t823 + t1122 * t822;
t757 = t1120 * t851 + t1125 * t815;
t756 = t1120 * t815 - t1125 * t851;
t755 = -t1118 * t819 + t1123 * t820;
t754 = -t1118 * t820 - t1123 * t819;
t753 = -t1064 * t1119 + t1124 * t755;
t752 = -pkin(7) * t854 + (-pkin(8) * t1124 + t1207) * t880;
t751 = -pkin(2) * t802 - pkin(3) * t871;
t750 = t1120 * t824 + t1125 * t808;
t749 = t1120 * t808 - t1125 * t824;
t747 = -t777 + t902;
t742 = (qJD(6) - t1086) * t914 + t1141;
t741 = t1121 * t777 + t1171 * t914;
t740 = t1116 * t777 - t1170 * t914;
t739 = -t1116 * t776 - t1170 * t912;
t738 = t1121 * t776 - t1171 * t912;
t737 = -pkin(2) * t851 - pkin(3) * t919 + t812;
t734 = -pkin(4) * t1222 + pkin(9) * t861 + t1193;
t733 = -pkin(2) * t824 - pkin(3) * t904 + t811;
t732 = -pkin(8) * t851 - t1118 * t816 + t1123 * t853;
t731 = -pkin(4) * t839 + pkin(9) * t834 - t1187;
t730 = -t1117 * t798 + t1122 * t800;
t729 = -t1117 * t797 + t1122 * t799;
t728 = t1117 * t800 + t1122 * t798;
t727 = t1117 * t799 + t1122 * t797;
t726 = -t1117 * t793 + t1122 * t794;
t725 = t1117 * t794 + t1122 * t793;
t724 = -pkin(3) * t923 + qJ(4) * t736;
t723 = -t1118 * t790 + t1123 * t792;
t722 = -t1118 * t789 + t1123 * t791;
t721 = -t1118 * t792 - t1123 * t790;
t720 = -t1118 * t791 - t1123 * t789;
t719 = -t1118 * t787 + t1123 * t788;
t718 = t1118 * t788 + t1123 * t787;
t717 = -pkin(8) * t824 - t1118 * t813 + t1123 * t848;
t716 = t1120 * t802 + t1125 * t781;
t715 = t1120 * t781 - t1125 * t802;
t714 = -qJ(4) * t871 - t735;
t713 = -pkin(3) * t948 + qJ(4) * t873 + t736;
t709 = -t1113 * t770 + t1114 * t772;
t708 = -t1113 * t769 + t1114 * t771;
t707 = t1113 * t772 + t1114 * t770;
t706 = t1113 * t771 + t1114 * t769;
t705 = -t1117 * t767 + t1122 * t768;
t704 = t1117 * t768 + t1122 * t767;
t703 = -pkin(10) * t793 + t1190;
t702 = -t1118 * t764 + t1123 * t765;
t701 = t1118 * t765 + t1123 * t764;
t700 = -t1118 * t761 + t1123 * t763;
t699 = -t1118 * t760 + t1123 * t762;
t698 = -t1118 * t763 - t1123 * t761;
t697 = -t1118 * t762 - t1123 * t760;
t696 = -t1113 * t758 + t1114 * t759;
t695 = t1113 * t759 + t1114 * t758;
t694 = -t1119 * t840 + t1124 * t723;
t693 = -t1119 * t844 + t1124 * t722;
t692 = t1119 * t1222 + t1124 * t719;
t691 = t1119 * t719 - t1124 * t1222;
t690 = -pkin(10) * t767 + t1196;
t689 = t1124 * t700 + t1150;
t688 = t1124 * t699 - t1150;
t687 = -pkin(1) * t814 + pkin(2) * t1221 - pkin(8) * t852 - t1118 * t853 - t1123 * t816;
t686 = -t1116 * t747 - t1121 * t743;
t685 = -t1116 * t1223 - t1121 * t742;
t684 = -t1116 * t743 + t1121 * t747;
t683 = -t1116 * t742 + t1121 * t1223;
t682 = -t1117 * t740 + t1122 * t741;
t681 = -t1117 * t738 + t1122 * t739;
t680 = t1117 * t741 + t1122 * t740;
t679 = t1117 * t739 + t1122 * t738;
t678 = -pkin(1) * t807 + pkin(2) * t936 - pkin(8) * t825 - t1118 * t848 - t1123 * t813;
t677 = t1119 * t839 + t1124 * t702;
t676 = t1119 * t702 - t1124 * t839;
t670 = t1123 * t736 - t1191;
t669 = t1118 * t736 + t1185;
t668 = t1119 * t923 + t1124 * t670;
t667 = t1119 * t670 - t1124 * t923;
t666 = -t1113 * t728 + t1114 * t730;
t665 = -t1113 * t727 + t1114 * t729;
t664 = t1113 * t730 + t1114 * t728;
t663 = t1113 * t729 + t1114 * t727;
t662 = -qJ(4) * t787 - t1113 * t734 + t1114 * t783;
t661 = -t1113 * t725 + t1114 * t726;
t660 = t1113 * t726 + t1114 * t725;
t659 = -pkin(5) * t1223 + pkin(10) * t794 + t1196;
t658 = -pkin(7) * t814 - t1119 * t737 + t1124 * t732;
t657 = -pkin(5) * t742 + pkin(10) * t768 - t1190;
t656 = -qJ(4) * t764 - t1113 * t731 + t1114 * t766;
t655 = -pkin(3) * t1222 + qJ(4) * t788 + t1113 * t783 + t1114 * t734;
t654 = t1120 * t718 + t1125 * t692;
t653 = t1120 * t692 - t1125 * t718;
t652 = -pkin(7) * t807 - t1119 * t733 + t1124 * t717;
t649 = -t1118 * t707 + t1123 * t709;
t648 = -t1118 * t706 + t1123 * t708;
t647 = t1118 * t709 + t1123 * t707;
t646 = -t1118 * t708 - t1123 * t706;
t645 = -t1113 * t704 + t1114 * t705;
t644 = t1113 * t705 + t1114 * t704;
t643 = -pkin(3) * t839 + qJ(4) * t765 + t1113 * t766 + t1114 * t731;
t642 = -pkin(2) * t669 - pkin(3) * t735;
t641 = -t1118 * t695 + t1123 * t696;
t640 = -t1118 * t696 - t1123 * t695;
t639 = -t1059 * t1119 + t1124 * t641;
t638 = -t1119 * t916 + t1124 * t648;
t637 = t1119 * t882 + t1124 * t649;
t636 = t1119 * t649 - t1124 * t882;
t635 = -pkin(4) * t835 + pkin(9) * t651;
t634 = -pkin(8) * t802 - t1118 * t713 + t1123 * t714;
t633 = t1120 * t701 + t1125 * t677;
t632 = t1120 * t677 - t1125 * t701;
t631 = -pkin(2) * t718 - pkin(3) * t787 - pkin(4) * t860 + t712;
t630 = -pkin(9) * t770 - t650;
t629 = -t1117 * t684 + t1122 * t686;
t628 = -t1117 * t683 + t1122 * t685;
t627 = t1117 * t686 + t1122 * t684;
t626 = t1117 * t685 + t1122 * t683;
t625 = -t1113 * t680 + t1114 * t682;
t624 = -t1113 * t679 + t1114 * t681;
t623 = t1113 * t682 + t1114 * t680;
t622 = t1113 * t681 + t1114 * t679;
t621 = -pkin(4) * t882 + pkin(9) * t772 + t651;
t617 = -pkin(2) * t701 - pkin(3) * t764 - pkin(4) * t833 + t711;
t616 = -pkin(1) * t780 + pkin(2) * t948 - pkin(8) * t804 - t1118 * t714 - t1123 * t713;
t615 = -pkin(8) * t669 - qJ(4) * t1185 - t1118 * t724;
t614 = t1120 * t669 + t1125 * t668;
t613 = t1120 * t668 - t1125 * t669;
t612 = -t1118 * t664 + t1123 * t666;
t611 = -t1118 * t663 + t1123 * t665;
t610 = -t1118 * t666 - t1123 * t664;
t609 = -t1118 * t665 - t1123 * t663;
t608 = -t1118 * t660 + t1123 * t661;
t607 = t1118 * t661 + t1123 * t660;
t606 = -pkin(7) * t780 - t1119 * t751 + t1124 * t634;
t605 = -pkin(9) * t725 - t1117 * t659 + t1122 * t703;
t604 = -pkin(2) * t647 - pkin(3) * t707 - pkin(4) * t770;
t603 = -t1119 * t743 + t1124 * t612;
t602 = -t1119 * t747 + t1124 * t611;
t601 = t1119 * t1223 + t1124 * t608;
t600 = t1119 * t608 - t1124 * t1223;
t599 = -pkin(9) * t704 - t1117 * t657 + t1122 * t690;
t598 = t1114 * t651 - t1202;
t597 = t1113 * t651 + t1199;
t596 = -t1118 * t644 + t1123 * t645;
t595 = t1118 * t645 + t1123 * t644;
t594 = -pkin(4) * t1223 + pkin(9) * t726 + t1117 * t703 + t1122 * t659;
t593 = t1120 * t647 + t1125 * t637;
t592 = t1120 * t637 - t1125 * t647;
t591 = -pkin(8) * t718 - t1118 * t655 + t1123 * t662;
t590 = -pkin(1) * t667 + pkin(2) * t923 - pkin(8) * t670 + qJ(4) * t1191 - t1123 * t724;
t589 = -pkin(4) * t742 + pkin(9) * t705 + t1117 * t690 + t1122 * t657;
t588 = t1119 * t742 + t1124 * t596;
t587 = t1119 * t596 - t1124 * t742;
t586 = -pkin(8) * t701 - t1118 * t643 + t1123 * t656;
t585 = -t1113 * t627 + t1114 * t629;
t584 = -t1113 * t626 + t1114 * t628;
t583 = t1113 * t629 + t1114 * t627;
t582 = t1113 * t628 + t1114 * t626;
t581 = -t1118 * t623 + t1123 * t625;
t580 = -t1118 * t622 + t1123 * t624;
t579 = -t1118 * t625 - t1123 * t623;
t578 = -t1118 * t624 - t1123 * t622;
t575 = t1124 * t581 + t1151;
t574 = t1124 * t580 - t1151;
t573 = -pkin(1) * t691 + pkin(2) * t1222 - pkin(8) * t719 - t1118 * t662 - t1123 * t655;
t572 = -pkin(5) * t748 + pkin(10) * t577;
t571 = -qJ(4) * t707 - t1113 * t621 + t1114 * t630;
t570 = -pkin(3) * t882 + qJ(4) * t709 + t1113 * t630 + t1114 * t621;
t569 = -pkin(1) * t676 + pkin(2) * t839 - pkin(8) * t702 - t1118 * t656 - t1123 * t643;
t568 = -pkin(7) * t667 - t1119 * t642 + t1124 * t615;
t567 = -pkin(10) * t684 - t576;
t566 = -pkin(5) * t806 + pkin(10) * t686 + t577;
t565 = t1120 * t607 + t1125 * t601;
t564 = t1120 * t601 - t1125 * t607;
t563 = -pkin(7) * t691 - t1119 * t631 + t1124 * t591;
t562 = -t1118 * t597 + t1123 * t598;
t561 = t1118 * t598 + t1123 * t597;
t560 = -pkin(9) * t1199 - qJ(4) * t597 - t1113 * t635;
t559 = t1119 * t835 + t1124 * t562;
t558 = t1119 * t562 - t1124 * t835;
t557 = -pkin(3) * t835 - pkin(9) * t1202 + qJ(4) * t598 + t1114 * t635;
t556 = -pkin(2) * t607 - pkin(3) * t660 - pkin(4) * t725 - pkin(5) * t793 + t620;
t555 = t1120 * t595 + t1125 * t588;
t554 = t1120 * t588 - t1125 * t595;
t553 = -pkin(7) * t676 - t1119 * t617 + t1124 * t586;
t552 = -qJ(4) * t660 - t1113 * t594 + t1114 * t605;
t551 = -pkin(3) * t1223 + qJ(4) * t661 + t1113 * t605 + t1114 * t594;
t550 = -t1118 * t583 + t1123 * t585;
t549 = -t1118 * t582 + t1123 * t584;
t548 = t1118 * t585 + t1123 * t583;
t547 = -t1118 * t584 - t1123 * t582;
t546 = -pkin(2) * t595 - pkin(3) * t644 - pkin(4) * t704 - pkin(5) * t767 + t619;
t545 = -t1119 * t847 + t1124 * t549;
t544 = t1119 * t806 + t1124 * t550;
t543 = t1119 * t550 - t1124 * t806;
t542 = -qJ(4) * t644 - t1113 * t589 + t1114 * t599;
t541 = t1122 * t577 - t1194;
t540 = t1117 * t577 + t1188;
t539 = -pkin(3) * t742 + qJ(4) * t645 + t1113 * t599 + t1114 * t589;
t538 = -pkin(2) * t561 - pkin(3) * t597 - pkin(4) * t650;
t537 = -pkin(8) * t647 - t1118 * t570 + t1123 * t571;
t536 = t1120 * t561 + t1125 * t559;
t535 = t1120 * t559 - t1125 * t561;
t534 = -pkin(9) * t627 - t1117 * t566 + t1122 * t567;
t533 = -pkin(4) * t806 + pkin(9) * t629 + t1117 * t567 + t1122 * t566;
t532 = -pkin(1) * t636 + pkin(2) * t882 - pkin(8) * t649 - t1118 * t571 - t1123 * t570;
t531 = -pkin(2) * t548 - pkin(3) * t583 - pkin(4) * t627 - pkin(5) * t684;
t530 = -pkin(7) * t636 - t1119 * t604 + t1124 * t537;
t529 = t1120 * t548 + t1125 * t544;
t528 = t1120 * t544 - t1125 * t548;
t527 = -t1113 * t540 + t1114 * t541;
t526 = t1113 * t541 + t1114 * t540;
t525 = -pkin(9) * t540 - pkin(10) * t1188 - t1117 * t572;
t524 = -pkin(8) * t607 - t1118 * t551 + t1123 * t552;
t523 = -pkin(4) * t748 + pkin(9) * t541 - pkin(10) * t1194 + t1122 * t572;
t522 = -pkin(8) * t561 - t1118 * t557 + t1123 * t560;
t521 = -pkin(8) * t595 - t1118 * t539 + t1123 * t542;
t520 = -pkin(1) * t600 + pkin(2) * t1223 - pkin(8) * t608 - t1118 * t552 - t1123 * t551;
t519 = -pkin(1) * t587 + pkin(2) * t742 - pkin(8) * t596 - t1118 * t542 - t1123 * t539;
t518 = -pkin(1) * t558 + pkin(2) * t835 - pkin(8) * t562 - t1118 * t560 - t1123 * t557;
t517 = -pkin(7) * t600 - t1119 * t556 + t1124 * t524;
t516 = -qJ(4) * t583 - t1113 * t533 + t1114 * t534;
t515 = -pkin(3) * t806 + qJ(4) * t585 + t1113 * t534 + t1114 * t533;
t514 = -pkin(7) * t587 - t1119 * t546 + t1124 * t521;
t513 = -t1118 * t526 + t1123 * t527;
t512 = t1118 * t527 + t1123 * t526;
t511 = t1119 * t748 + t1124 * t513;
t510 = t1119 * t513 - t1124 * t748;
t509 = -pkin(7) * t558 - t1119 * t538 + t1124 * t522;
t508 = -qJ(4) * t526 - t1113 * t523 + t1114 * t525;
t507 = -pkin(3) * t748 + qJ(4) * t527 + t1113 * t525 + t1114 * t523;
t506 = -pkin(2) * t512 - pkin(3) * t526 - pkin(4) * t540 - pkin(5) * t576;
t505 = -pkin(8) * t548 - t1118 * t515 + t1123 * t516;
t504 = t1120 * t512 + t1125 * t511;
t503 = t1120 * t511 - t1125 * t512;
t502 = -pkin(1) * t543 + pkin(2) * t806 - pkin(8) * t550 - t1118 * t516 - t1123 * t515;
t501 = -pkin(7) * t543 - t1119 * t531 + t1124 * t505;
t500 = -pkin(8) * t512 - t1118 * t507 + t1123 * t508;
t499 = -pkin(1) * t510 + pkin(2) * t748 - pkin(8) * t513 - t1118 * t508 - t1123 * t507;
t498 = -pkin(7) * t510 - t1119 * t506 + t1124 * t500;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1081, -t1082, 0, t1041, 0, 0, 0, 0, 0, 0, t1013, t1014, t1037, t969, 0, 0, 0, 0, 0, 0, t879, t884, t850, t796, 0, 0, 0, 0, 0, 0, t750, t757, t716, t614, 0, 0, 0, 0, 0, 0, t633, t654, t593, t536, 0, 0, 0, 0, 0, 0, t555, t565, t529, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1082, -t1081, 0, t1040, 0, 0, 0, 0, 0, 0, t1011, t1012, t1036, t968, 0, 0, 0, 0, 0, 0, t878, t883, t849, t795, 0, 0, 0, 0, 0, 0, t749, t756, t715, t613, 0, 0, 0, 0, 0, 0, t632, t653, t592, t535, 0, 0, 0, 0, 0, 0, t554, t564, t528, t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1042, t1043, 0, -t998, 0, 0, 0, 0, 0, 0, t917, t920, t900, t854, 0, 0, 0, 0, 0, 0, t807, t814, t780, t667, 0, 0, 0, 0, 0, 0, t676, t691, t636, t558, 0, 0, 0, 0, 0, 0, t587, t600, t543, t510; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1082, 0, -t1081, 0, t1135, -t1057, -t1040, -pkin(6) * t1040, t1052 * t1125 - t1138, t1034 * t1125 - t1085 * t1120, t1046 * t1125 + t1119 * t1154, t1051 * t1125 + t1138, t1044 * t1125 + t1120 * t1153, qJDD(2) * t1120 + t1070 * t1125, -pkin(6) * t1011 - t1000 * t1120 + t1008 * t1125, -pkin(6) * t1012 - t1001 * t1120 + t1009 * t1125, -pkin(6) * t1036 + t1125 * t998, -pkin(6) * t968 - (pkin(1) * t1120 - pkin(7) * t1125) * t998, -t1120 * t986 + t1125 * t950, -t1120 * t942 + t1125 * t915, -t1120 * t979 + t1125 * t929, -t1120 * t984 + t1125 * t949, -t1120 * t980 + t1125 * t930, -t1004 * t1120 + t1125 * t983, -pkin(6) * t878 - t1120 * t828 + t1125 * t805, -pkin(6) * t883 - t1120 * t845 + t1125 * t809, -pkin(6) * t849 - t1120 * t786 + t1125 * t778, -pkin(6) * t795 - t1120 * t785 + t1125 * t752, -t1120 * t863 + t1125 * t827, -t1120 * t801 + t1125 * t784, -t1120 * t856 + t1125 * t817, -t1120 * t862 + t1125 * t826, -t1120 * t857 + t1125 * t818, -t1120 * t893 + t1125 * t888, -pkin(6) * t749 - t1120 * t678 + t1125 * t652, -pkin(6) * t756 - t1120 * t687 + t1125 * t658, -pkin(6) * t715 - t1120 * t616 + t1125 * t606, -pkin(6) * t613 - t1120 * t590 + t1125 * t568, -t1120 * t698 + t1125 * t689, -t1120 * t646 + t1125 * t638, -t1120 * t720 + t1125 * t693, -t1120 * t697 + t1125 * t688, -t1120 * t721 + t1125 * t694, -t1120 * t754 + t1125 * t753, -pkin(6) * t632 - t1120 * t569 + t1125 * t553, -pkin(6) * t653 - t1120 * t573 + t1125 * t563, -pkin(6) * t592 - t1120 * t532 + t1125 * t530, -pkin(6) * t535 - t1120 * t518 + t1125 * t509, -t1120 * t579 + t1125 * t575, -t1120 * t547 + t1125 * t545, -t1120 * t609 + t1125 * t602, -t1120 * t578 + t1125 * t574, -t1120 * t610 + t1125 * t603, -t1120 * t640 + t1125 * t639, -pkin(6) * t554 - t1120 * t519 + t1125 * t514, -pkin(6) * t564 - t1120 * t520 + t1125 * t517, -pkin(6) * t528 - t1120 * t502 + t1125 * t501, -pkin(6) * t503 - t1120 * t499 + t1125 * t498; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1081, 0, t1082, 0, t1057, t1135, t1041, pkin(6) * t1041, t1052 * t1120 + t1137, t1034 * t1120 + t1085 * t1125, t1046 * t1120 - t1119 * t1152, t1051 * t1120 - t1137, t1044 * t1120 - t1124 * t1152, -qJDD(2) * t1125 + t1070 * t1120, pkin(6) * t1013 + t1000 * t1125 + t1008 * t1120, pkin(6) * t1014 + t1001 * t1125 + t1009 * t1120, pkin(6) * t1037 + t1120 * t998, pkin(6) * t969 - (-pkin(1) * t1125 - pkin(7) * t1120) * t998, t1120 * t950 + t1125 * t986, t1120 * t915 + t1125 * t942, t1120 * t929 + t1125 * t979, t1120 * t949 + t1125 * t984, t1120 * t930 + t1125 * t980, t1004 * t1125 + t1120 * t983, pkin(6) * t879 + t1120 * t805 + t1125 * t828, pkin(6) * t884 + t1120 * t809 + t1125 * t845, pkin(6) * t850 + t1120 * t778 + t1125 * t786, pkin(6) * t796 + t1120 * t752 + t1125 * t785, t1120 * t827 + t1125 * t863, t1120 * t784 + t1125 * t801, t1120 * t817 + t1125 * t856, t1120 * t826 + t1125 * t862, t1120 * t818 + t1125 * t857, t1120 * t888 + t1125 * t893, pkin(6) * t750 + t1120 * t652 + t1125 * t678, pkin(6) * t757 + t1120 * t658 + t1125 * t687, pkin(6) * t716 + t1120 * t606 + t1125 * t616, pkin(6) * t614 + t1120 * t568 + t1125 * t590, t1120 * t689 + t1125 * t698, t1120 * t638 + t1125 * t646, t1120 * t693 + t1125 * t720, t1120 * t688 + t1125 * t697, t1120 * t694 + t1125 * t721, t1120 * t753 + t1125 * t754, pkin(6) * t633 + t1120 * t553 + t1125 * t569, pkin(6) * t654 + t1120 * t563 + t1125 * t573, pkin(6) * t593 + t1120 * t530 + t1125 * t532, pkin(6) * t536 + t1120 * t509 + t1125 * t518, t1120 * t575 + t1125 * t579, t1120 * t545 + t1125 * t547, t1120 * t602 + t1125 * t609, t1120 * t574 + t1125 * t578, t1120 * t603 + t1125 * t610, t1120 * t639 + t1125 * t640, pkin(6) * t555 + t1120 * t514 + t1125 * t519, pkin(6) * t565 + t1120 * t517 + t1125 * t520, pkin(6) * t529 + t1120 * t501 + t1125 * t502, pkin(6) * t504 + t1120 * t498 + t1125 * t499; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1090, t1091, 0, 0, t1134 * t1119, t1076 * t1124 + t1079 * t1119, t1095 * t1124 + t1167, -t1133 * t1124, t1097 * t1119 + t1168, 0, pkin(1) * t1079 + pkin(7) * t1045 + t1174, -pkin(1) * t1076 + pkin(7) * t1047 - t1175, pkin(1) * t1084 + pkin(7) * t1080 + t999, pkin(1) * t1061 + pkin(7) * t999, t1119 * t987 - t1144, t1038 * t1124 + t1119 * t944, t1119 * t981 + t1124 * t996, t1119 * t985 + t1144, t1119 * t982 + t1124 * t991, t1005 * t1119 + t1058, -pkin(1) * t960 + pkin(7) * t918 + t1119 * t924 + t1124 * t891, -pkin(1) * t972 + pkin(7) * t922 + t1119 * t935 + t1124 * t892, pkin(7) * t901 + t1119 * t821 + (-pkin(1) - t1206) * t943, pkin(7) * t855 + (-pkin(1) + t1136) * t880, t1119 * t865 - t1146, t1119 * t803 + t1124 * t978, t1119 * t858 + t1124 * t941, t1119 * t864 + t1146, t1119 * t859 + t1124 * t937, t1119 * t894 + t1058, -pkin(1) * t824 + pkin(7) * t808 + t1119 * t717 + t1124 * t733, -pkin(1) * t851 + pkin(7) * t815 + t1119 * t732 + t1124 * t737, -pkin(1) * t802 + pkin(7) * t781 + t1119 * t634 + t1124 * t751, -pkin(1) * t669 + pkin(7) * t668 + t1119 * t615 + t1124 * t642, t1119 * t700 - t1148, t1119 * t648 + t1124 * t916, t1119 * t722 + t1124 * t844, t1119 * t699 + t1148, t1119 * t723 + t1124 * t840, t1064 * t1124 + t1119 * t755, -pkin(1) * t701 + pkin(7) * t677 + t1119 * t586 + t1124 * t617, -pkin(1) * t718 + pkin(7) * t692 + t1119 * t591 + t1124 * t631, -pkin(1) * t647 + pkin(7) * t637 + t1119 * t537 + t1124 * t604, -pkin(1) * t561 + pkin(7) * t559 + t1119 * t522 + t1124 * t538, t1119 * t581 - t1149, t1119 * t549 + t1124 * t847, t1119 * t611 + t1124 * t747, t1119 * t580 + t1149, t1119 * t612 + t1124 * t743, t1059 * t1124 + t1119 * t641, -pkin(1) * t595 + pkin(7) * t588 + t1119 * t521 + t1124 * t546, -pkin(1) * t607 + pkin(7) * t601 + t1119 * t524 + t1124 * t556, -pkin(1) * t548 + pkin(7) * t544 + t1119 * t505 + t1124 * t531, -pkin(1) * t512 + pkin(7) * t511 + t1119 * t500 + t1124 * t506;];
tauB_reg  = t1;
