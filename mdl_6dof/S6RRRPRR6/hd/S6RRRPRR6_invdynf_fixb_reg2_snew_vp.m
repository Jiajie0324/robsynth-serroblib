% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 11:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 11:09:21
% EndTime: 2019-05-07 11:09:34
% DurationCPUTime: 13.14s
% Computational Cost: add. (153514->343), mult. (326140->479), div. (0->0), fcn. (242994->12), ass. (0->271)
t2266 = sin(qJ(2));
t2301 = qJD(1) * t2266;
t2252 = qJD(2) * t2301;
t2271 = cos(qJ(2));
t2254 = t2271 * qJDD(1);
t2285 = t2254 - t2252 - qJDD(3);
t2265 = sin(qJ(3));
t2270 = cos(qJ(3));
t2227 = -t2270 * qJD(2) + t2265 * t2301;
t2228 = qJD(2) * t2265 + t2270 * t2301;
t2293 = t2227 * t2228;
t2201 = -t2285 - t2293;
t2260 = sin(pkin(11));
t2261 = cos(pkin(11));
t2210 = t2227 * t2261 + t2228 * t2260;
t2211 = -t2227 * t2260 + t2228 * t2261;
t2296 = t2210 * t2211;
t2173 = -t2285 - t2296;
t2300 = qJD(1) * t2271;
t2249 = -qJD(3) + t2300;
t2243 = -qJD(5) + t2249;
t2237 = -qJD(6) + t2243;
t2316 = qJD(6) - t2237;
t2315 = qJD(2) ^ 2;
t2264 = sin(qJ(5));
t2269 = cos(qJ(5));
t2181 = t2269 * t2210 + t2211 * t2264;
t2183 = -t2210 * t2264 + t2211 * t2269;
t2263 = sin(qJ(6));
t2268 = cos(qJ(6));
t2147 = t2268 * t2181 + t2183 * t2263;
t2314 = t2147 ^ 2;
t2149 = -t2181 * t2263 + t2183 * t2268;
t2313 = t2149 ^ 2;
t2312 = t2181 ^ 2;
t2311 = t2183 ^ 2;
t2310 = t2210 ^ 2;
t2309 = t2211 ^ 2;
t2308 = t2227 ^ 2;
t2307 = t2228 ^ 2;
t2306 = t2237 ^ 2;
t2305 = t2243 ^ 2;
t2304 = t2249 ^ 2;
t2303 = -2 * qJD(4);
t2302 = t2271 * g(3);
t2299 = t2147 * t2149;
t2298 = t2181 * t2183;
t2297 = t2181 * t2243;
t2295 = t2210 * t2249;
t2294 = t2211 * t2249;
t2292 = t2227 * t2249;
t2291 = qJD(3) + t2249;
t2290 = qJD(5) + t2243;
t2289 = qJD(6) + t2237;
t2267 = sin(qJ(1));
t2272 = cos(qJ(1));
t2241 = t2267 * g(1) - t2272 * g(2);
t2273 = qJD(1) ^ 2;
t2222 = qJDD(1) * pkin(1) + t2273 * pkin(7) + t2241;
t2286 = qJD(2) * t2300;
t2287 = t2266 * qJDD(1);
t2231 = t2286 + t2287;
t2232 = t2254 - 0.2e1 * t2252;
t2186 = (-t2231 - t2286) * pkin(8) - t2232 * pkin(2) - t2222;
t2242 = -g(1) * t2272 - g(2) * t2267;
t2223 = -pkin(1) * t2273 + qJDD(1) * pkin(7) + t2242;
t2219 = -g(3) * t2266 + t2271 * t2223;
t2229 = (-pkin(2) * t2271 - pkin(8) * t2266) * qJD(1);
t2196 = -pkin(2) * t2315 + qJDD(2) * pkin(8) + t2229 * t2300 + t2219;
t2163 = t2270 * t2186 - t2265 * t2196;
t2279 = -t2265 * qJDD(2) - t2270 * t2231;
t2207 = -qJD(3) * t2227 - t2279;
t2135 = (-t2207 + t2292) * qJ(4) + t2201 * pkin(3) + t2163;
t2164 = t2265 * t2186 + t2270 * t2196;
t2217 = -pkin(3) * t2249 - qJ(4) * t2228;
t2281 = -t2270 * qJDD(2) + t2265 * t2231;
t2277 = -qJD(3) * t2228 - t2281;
t2137 = -pkin(3) * t2308 + qJ(4) * t2277 + t2249 * t2217 + t2164;
t2103 = t2261 * t2135 - t2260 * t2137 + t2211 * t2303;
t2175 = t2261 * t2207 + t2260 * t2277;
t2160 = -t2175 + t2295;
t2089 = pkin(4) * t2173 + t2160 * pkin(9) + t2103;
t2104 = t2260 * t2135 + t2261 * t2137 + t2210 * t2303;
t2197 = -pkin(4) * t2249 - pkin(9) * t2211;
t2282 = -t2207 * t2260 + t2261 * t2277;
t2093 = -pkin(4) * t2310 + pkin(9) * t2282 + t2249 * t2197 + t2104;
t2069 = t2264 * t2089 + t2269 * t2093;
t2257 = t2266 ^ 2;
t2258 = t2271 ^ 2;
t2288 = t2257 + t2258;
t2068 = t2269 * t2089 - t2264 * t2093;
t2275 = -t2269 * t2175 - t2264 * t2282;
t2129 = -t2181 * qJD(5) - t2275;
t2283 = t2264 * t2175 - t2269 * t2282;
t2276 = qJD(5) * t2183 + t2283;
t2284 = -t2263 * t2129 - t2268 * t2276;
t2280 = -qJDD(5) + t2285;
t2278 = -qJDD(6) + t2280;
t2145 = -t2280 - t2298;
t2195 = t2302 - qJDD(2) * pkin(2) - t2315 * pkin(8) + (qJD(1) * t2229 + t2223) * t2266;
t2274 = -t2268 * t2129 + t2263 * t2276;
t2156 = -t2277 * pkin(3) - t2308 * qJ(4) + t2228 * t2217 + qJDD(4) + t2195;
t2111 = -t2282 * pkin(4) - t2310 * pkin(9) + t2211 * t2197 + t2156;
t2248 = t2271 * t2273 * t2266;
t2246 = -t2258 * t2273 - t2315;
t2245 = -t2257 * t2273 - t2315;
t2240 = -qJDD(2) + t2248;
t2239 = qJDD(2) + t2248;
t2236 = t2288 * t2273;
t2235 = -qJDD(1) * t2267 - t2272 * t2273;
t2234 = qJDD(1) * t2272 - t2267 * t2273;
t2233 = t2288 * qJDD(1);
t2230 = 0.2e1 * t2286 + t2287;
t2218 = -t2223 * t2266 - t2302;
t2216 = t2240 * t2271 - t2245 * t2266;
t2215 = -t2239 * t2266 + t2246 * t2271;
t2214 = t2240 * t2266 + t2245 * t2271;
t2213 = t2239 * t2271 + t2246 * t2266;
t2212 = -t2304 - t2307;
t2209 = -t2304 - t2308;
t2200 = t2285 - t2293;
t2199 = -t2307 - t2308;
t2194 = -t2304 - t2309;
t2192 = -t2218 * t2266 + t2219 * t2271;
t2191 = t2218 * t2271 + t2219 * t2266;
t2190 = t2227 * t2291 + t2279;
t2189 = t2207 + t2292;
t2188 = -t2228 * t2291 - t2281;
t2187 = (qJD(3) - t2249) * t2228 + t2281;
t2180 = t2200 * t2270 - t2212 * t2265;
t2179 = t2200 * t2265 + t2212 * t2270;
t2177 = -t2304 - t2310;
t2172 = t2285 - t2296;
t2171 = -t2201 * t2265 + t2209 * t2270;
t2170 = t2201 * t2270 + t2209 * t2265;
t2167 = -pkin(5) * t2243 - pkin(10) * t2183;
t2166 = -t2305 - t2311;
t2165 = -t2309 - t2310;
t2162 = t2188 * t2270 - t2190 * t2265;
t2161 = t2188 * t2265 + t2190 * t2270;
t2159 = t2175 + t2295;
t2158 = t2282 - t2294;
t2157 = -t2282 - t2294;
t2155 = t2180 * t2271 + t2189 * t2266;
t2154 = t2172 * t2261 - t2194 * t2260;
t2153 = t2180 * t2266 - t2189 * t2271;
t2152 = t2172 * t2260 + t2194 * t2261;
t2151 = t2171 * t2271 + t2187 * t2266;
t2150 = t2171 * t2266 - t2187 * t2271;
t2146 = -t2305 - t2312;
t2144 = t2280 - t2298;
t2143 = -t2173 * t2260 + t2177 * t2261;
t2142 = t2173 * t2261 + t2177 * t2260;
t2140 = t2162 * t2271 + t2199 * t2266;
t2139 = t2162 * t2266 - t2199 * t2271;
t2138 = -t2306 - t2313;
t2132 = -t2311 - t2312;
t2131 = -t2163 * t2265 + t2164 * t2270;
t2130 = t2163 * t2270 + t2164 * t2265;
t2126 = t2158 * t2261 - t2160 * t2260;
t2125 = t2158 * t2260 + t2160 * t2261;
t2124 = t2144 * t2269 - t2166 * t2264;
t2123 = t2144 * t2264 + t2166 * t2269;
t2122 = t2131 * t2271 + t2195 * t2266;
t2121 = t2131 * t2266 - t2195 * t2271;
t2120 = -t2152 * t2265 + t2154 * t2270;
t2119 = t2152 * t2270 + t2154 * t2265;
t2118 = -t2306 - t2314;
t2117 = t2181 * t2290 + t2275;
t2116 = t2129 + t2297;
t2115 = -t2183 * t2290 - t2283;
t2114 = (qJD(5) - t2243) * t2183 + t2283;
t2113 = -t2278 - t2299;
t2112 = t2278 - t2299;
t2110 = -t2145 * t2264 + t2146 * t2269;
t2109 = t2145 * t2269 + t2146 * t2264;
t2108 = -t2142 * t2265 + t2143 * t2270;
t2107 = t2142 * t2270 + t2143 * t2265;
t2106 = t2120 * t2271 + t2159 * t2266;
t2105 = t2120 * t2266 - t2159 * t2271;
t2102 = t2108 * t2271 + t2157 * t2266;
t2101 = t2108 * t2266 - t2157 * t2271;
t2100 = -t2313 - t2314;
t2099 = -t2125 * t2265 + t2126 * t2270;
t2098 = t2125 * t2270 + t2126 * t2265;
t2097 = t2112 * t2268 - t2138 * t2263;
t2096 = t2112 * t2263 + t2138 * t2268;
t2095 = -t2123 * t2260 + t2124 * t2261;
t2094 = t2123 * t2261 + t2124 * t2260;
t2092 = t2099 * t2271 + t2165 * t2266;
t2091 = t2099 * t2266 - t2165 * t2271;
t2086 = t2115 * t2269 - t2117 * t2264;
t2085 = t2115 * t2264 + t2117 * t2269;
t2084 = -t2113 * t2263 + t2118 * t2268;
t2083 = t2113 * t2268 + t2118 * t2263;
t2082 = -t2109 * t2260 + t2110 * t2261;
t2081 = t2109 * t2261 + t2110 * t2260;
t2080 = pkin(5) * t2276 - pkin(10) * t2312 + t2183 * t2167 + t2111;
t2079 = t2147 * t2289 + t2274;
t2078 = -t2147 * t2316 - t2274;
t2077 = -t2149 * t2289 + t2284;
t2076 = t2149 * t2316 - t2284;
t2075 = -t2103 * t2260 + t2104 * t2261;
t2074 = t2103 * t2261 + t2104 * t2260;
t2073 = -t2096 * t2264 + t2097 * t2269;
t2072 = t2096 * t2269 + t2097 * t2264;
t2071 = -t2094 * t2265 + t2095 * t2270;
t2070 = t2094 * t2270 + t2095 * t2265;
t2067 = -t2085 * t2260 + t2086 * t2261;
t2066 = t2085 * t2261 + t2086 * t2260;
t2065 = -t2083 * t2264 + t2084 * t2269;
t2064 = t2083 * t2269 + t2084 * t2264;
t2063 = -t2081 * t2265 + t2082 * t2270;
t2062 = t2081 * t2270 + t2082 * t2265;
t2061 = t2071 * t2271 + t2116 * t2266;
t2060 = t2071 * t2266 - t2116 * t2271;
t2059 = t2077 * t2268 - t2079 * t2263;
t2058 = t2077 * t2263 + t2079 * t2268;
t2057 = t2063 * t2271 + t2114 * t2266;
t2056 = t2063 * t2266 - t2114 * t2271;
t2055 = -pkin(5) * t2312 - pkin(10) * t2276 + t2243 * t2167 + t2069;
t2054 = (-t2129 + t2297) * pkin(10) + t2145 * pkin(5) + t2068;
t2053 = -t2074 * t2265 + t2075 * t2270;
t2052 = t2074 * t2270 + t2075 * t2265;
t2051 = t2053 * t2271 + t2156 * t2266;
t2050 = t2053 * t2266 - t2156 * t2271;
t2049 = -t2072 * t2260 + t2073 * t2261;
t2048 = t2072 * t2261 + t2073 * t2260;
t2047 = -t2068 * t2264 + t2069 * t2269;
t2046 = t2068 * t2269 + t2069 * t2264;
t2045 = -t2066 * t2265 + t2067 * t2270;
t2044 = t2066 * t2270 + t2067 * t2265;
t2043 = -t2064 * t2260 + t2065 * t2261;
t2042 = t2064 * t2261 + t2065 * t2260;
t2041 = t2045 * t2271 + t2132 * t2266;
t2040 = t2045 * t2266 - t2132 * t2271;
t2039 = -t2058 * t2264 + t2059 * t2269;
t2038 = t2058 * t2269 + t2059 * t2264;
t2037 = t2054 * t2263 + t2055 * t2268;
t2036 = t2054 * t2268 - t2055 * t2263;
t2035 = -t2048 * t2265 + t2049 * t2270;
t2034 = t2048 * t2270 + t2049 * t2265;
t2033 = t2035 * t2271 + t2078 * t2266;
t2032 = t2035 * t2266 - t2078 * t2271;
t2031 = -t2046 * t2260 + t2047 * t2261;
t2030 = t2046 * t2261 + t2047 * t2260;
t2029 = -t2042 * t2265 + t2043 * t2270;
t2028 = t2042 * t2270 + t2043 * t2265;
t2027 = t2029 * t2271 + t2076 * t2266;
t2026 = t2029 * t2266 - t2076 * t2271;
t2025 = -t2038 * t2260 + t2039 * t2261;
t2024 = t2038 * t2261 + t2039 * t2260;
t2023 = -t2036 * t2263 + t2037 * t2268;
t2022 = t2036 * t2268 + t2037 * t2263;
t2021 = -t2030 * t2265 + t2031 * t2270;
t2020 = t2030 * t2270 + t2031 * t2265;
t2019 = t2021 * t2271 + t2111 * t2266;
t2018 = t2021 * t2266 - t2111 * t2271;
t2017 = -t2024 * t2265 + t2025 * t2270;
t2016 = t2024 * t2270 + t2025 * t2265;
t2015 = t2017 * t2271 + t2100 * t2266;
t2014 = t2017 * t2266 - t2100 * t2271;
t2013 = -t2022 * t2264 + t2023 * t2269;
t2012 = t2022 * t2269 + t2023 * t2264;
t2011 = -t2012 * t2260 + t2013 * t2261;
t2010 = t2012 * t2261 + t2013 * t2260;
t2009 = -t2010 * t2265 + t2011 * t2270;
t2008 = t2010 * t2270 + t2011 * t2265;
t2007 = t2009 * t2271 + t2080 * t2266;
t2006 = t2009 * t2266 - t2080 * t2271;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2235, -t2234, 0, -t2241 * t2267 + t2242 * t2272, 0, 0, 0, 0, 0, 0, t2215 * t2272 - t2232 * t2267, t2216 * t2272 + t2230 * t2267, t2233 * t2272 - t2236 * t2267, t2192 * t2272 - t2222 * t2267, 0, 0, 0, 0, 0, 0, t2151 * t2272 + t2170 * t2267, t2155 * t2272 + t2179 * t2267, t2140 * t2272 + t2161 * t2267, t2122 * t2272 + t2130 * t2267, 0, 0, 0, 0, 0, 0, t2102 * t2272 + t2107 * t2267, t2106 * t2272 + t2119 * t2267, t2092 * t2272 + t2098 * t2267, t2051 * t2272 + t2052 * t2267, 0, 0, 0, 0, 0, 0, t2057 * t2272 + t2062 * t2267, t2061 * t2272 + t2070 * t2267, t2041 * t2272 + t2044 * t2267, t2019 * t2272 + t2020 * t2267, 0, 0, 0, 0, 0, 0, t2027 * t2272 + t2028 * t2267, t2033 * t2272 + t2034 * t2267, t2015 * t2272 + t2016 * t2267, t2007 * t2272 + t2008 * t2267; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2234, t2235, 0, t2241 * t2272 + t2242 * t2267, 0, 0, 0, 0, 0, 0, t2215 * t2267 + t2232 * t2272, t2216 * t2267 - t2230 * t2272, t2233 * t2267 + t2236 * t2272, t2192 * t2267 + t2222 * t2272, 0, 0, 0, 0, 0, 0, t2151 * t2267 - t2170 * t2272, t2155 * t2267 - t2179 * t2272, t2140 * t2267 - t2161 * t2272, t2122 * t2267 - t2130 * t2272, 0, 0, 0, 0, 0, 0, t2102 * t2267 - t2107 * t2272, t2106 * t2267 - t2119 * t2272, t2092 * t2267 - t2098 * t2272, t2051 * t2267 - t2052 * t2272, 0, 0, 0, 0, 0, 0, t2057 * t2267 - t2062 * t2272, t2061 * t2267 - t2070 * t2272, t2041 * t2267 - t2044 * t2272, t2019 * t2267 - t2020 * t2272, 0, 0, 0, 0, 0, 0, t2027 * t2267 - t2028 * t2272, t2033 * t2267 - t2034 * t2272, t2015 * t2267 - t2016 * t2272, t2007 * t2267 - t2008 * t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2213, t2214, 0, t2191, 0, 0, 0, 0, 0, 0, t2150, t2153, t2139, t2121, 0, 0, 0, 0, 0, 0, t2101, t2105, t2091, t2050, 0, 0, 0, 0, 0, 0, t2056, t2060, t2040, t2018, 0, 0, 0, 0, 0, 0, t2026, t2032, t2014, t2006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2273, -qJDD(1), 0, t2242, 0, 0, 0, 0, 0, 0, t2215, t2216, t2233, t2192, 0, 0, 0, 0, 0, 0, t2151, t2155, t2140, t2122, 0, 0, 0, 0, 0, 0, t2102, t2106, t2092, t2051, 0, 0, 0, 0, 0, 0, t2057, t2061, t2041, t2019, 0, 0, 0, 0, 0, 0, t2027, t2033, t2015, t2007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2273, 0, t2241, 0, 0, 0, 0, 0, 0, t2232, -t2230, t2236, t2222, 0, 0, 0, 0, 0, 0, -t2170, -t2179, -t2161, -t2130, 0, 0, 0, 0, 0, 0, -t2107, -t2119, -t2098, -t2052, 0, 0, 0, 0, 0, 0, -t2062, -t2070, -t2044, -t2020, 0, 0, 0, 0, 0, 0, -t2028, -t2034, -t2016, -t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2213, t2214, 0, t2191, 0, 0, 0, 0, 0, 0, t2150, t2153, t2139, t2121, 0, 0, 0, 0, 0, 0, t2101, t2105, t2091, t2050, 0, 0, 0, 0, 0, 0, t2056, t2060, t2040, t2018, 0, 0, 0, 0, 0, 0, t2026, t2032, t2014, t2006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2246, t2240, t2254, t2219, 0, 0, 0, 0, 0, 0, t2171, t2180, t2162, t2131, 0, 0, 0, 0, 0, 0, t2108, t2120, t2099, t2053, 0, 0, 0, 0, 0, 0, t2063, t2071, t2045, t2021, 0, 0, 0, 0, 0, 0, t2029, t2035, t2017, t2009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2239, t2245, -t2287, t2218, 0, 0, 0, 0, 0, 0, -t2187, -t2189, -t2199, -t2195, 0, 0, 0, 0, 0, 0, -t2157, -t2159, -t2165, -t2156, 0, 0, 0, 0, 0, 0, -t2114, -t2116, -t2132, -t2111, 0, 0, 0, 0, 0, 0, -t2076, -t2078, -t2100, -t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2232, t2230, -t2236, -t2222, 0, 0, 0, 0, 0, 0, t2170, t2179, t2161, t2130, 0, 0, 0, 0, 0, 0, t2107, t2119, t2098, t2052, 0, 0, 0, 0, 0, 0, t2062, t2070, t2044, t2020, 0, 0, 0, 0, 0, 0, t2028, t2034, t2016, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2200, t2188, t2164, 0, 0, 0, 0, 0, 0, t2143, t2154, t2126, t2075, 0, 0, 0, 0, 0, 0, t2082, t2095, t2067, t2031, 0, 0, 0, 0, 0, 0, t2043, t2049, t2025, t2011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2201, t2212, t2190, t2163, 0, 0, 0, 0, 0, 0, t2142, t2152, t2125, t2074, 0, 0, 0, 0, 0, 0, t2081, t2094, t2066, t2030, 0, 0, 0, 0, 0, 0, t2042, t2048, t2024, t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187, t2189, t2199, t2195, 0, 0, 0, 0, 0, 0, t2157, t2159, t2165, t2156, 0, 0, 0, 0, 0, 0, t2114, t2116, t2132, t2111, 0, 0, 0, 0, 0, 0, t2076, t2078, t2100, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2177, t2172, t2158, t2104, 0, 0, 0, 0, 0, 0, t2110, t2124, t2086, t2047, 0, 0, 0, 0, 0, 0, t2065, t2073, t2039, t2013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2173, t2194, t2160, t2103, 0, 0, 0, 0, 0, 0, t2109, t2123, t2085, t2046, 0, 0, 0, 0, 0, 0, t2064, t2072, t2038, t2012; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2157, t2159, t2165, t2156, 0, 0, 0, 0, 0, 0, t2114, t2116, t2132, t2111, 0, 0, 0, 0, 0, 0, t2076, t2078, t2100, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2146, t2144, t2115, t2069, 0, 0, 0, 0, 0, 0, t2084, t2097, t2059, t2023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2145, t2166, t2117, t2068, 0, 0, 0, 0, 0, 0, t2083, t2096, t2058, t2022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2114, t2116, t2132, t2111, 0, 0, 0, 0, 0, 0, t2076, t2078, t2100, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2118, t2112, t2077, t2037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2113, t2138, t2079, t2036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2076, t2078, t2100, t2080;];
f_new_reg  = t1;
