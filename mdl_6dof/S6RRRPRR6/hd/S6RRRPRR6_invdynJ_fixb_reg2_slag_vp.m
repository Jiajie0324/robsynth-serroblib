% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:29:40
% EndTime: 2019-03-09 18:30:17
% DurationCPUTime: 23.94s
% Computational Cost: add. (33183->838), mult. (75533->1084), div. (0->0), fcn. (56486->18), ass. (0->360)
t400 = cos(qJ(2));
t473 = qJD(1) * t400;
t355 = -qJD(3) + t473;
t396 = sin(qJ(2));
t437 = pkin(2) * t396 - pkin(8) * t400;
t326 = t437 * qJD(1);
t399 = cos(qJ(3));
t395 = sin(qJ(3));
t474 = qJD(1) * t396;
t455 = t395 * t474;
t253 = pkin(7) * t455 + t399 * t326;
t489 = t399 * t400;
t424 = pkin(3) * t396 - qJ(4) * t489;
t392 = -qJ(4) - pkin(8);
t444 = qJD(3) * t392;
t588 = -qJD(1) * t424 - qJD(4) * t395 + t399 * t444 - t253;
t306 = t395 * t326;
t466 = qJD(4) * t399;
t492 = t396 * t399;
t494 = t395 * t400;
t587 = t306 + (-pkin(7) * t492 - qJ(4) * t494) * qJD(1) - t395 * t444 - t466;
t462 = t399 * qJD(2);
t322 = t455 - t462;
t454 = t399 * t474;
t472 = qJD(2) * t395;
t324 = t454 + t472;
t390 = sin(pkin(11));
t391 = cos(pkin(11));
t231 = t391 * t322 + t324 * t390;
t394 = sin(qJ(5));
t398 = cos(qJ(5));
t429 = -t322 * t390 + t391 * t324;
t161 = t398 * t231 + t394 * t429;
t393 = sin(qJ(6));
t545 = cos(qJ(6));
t449 = qJD(6) * t545;
t463 = qJD(6) * t393;
t559 = -t231 * t394 + t398 * t429;
t461 = qJD(1) * qJD(2);
t447 = t400 * t461;
t460 = t396 * qJDD(1);
t468 = qJD(3) * t396;
t563 = qJD(1) * t468 - qJDD(2);
t223 = -qJD(3) * t462 + (-t447 - t460) * t399 + t563 * t395;
t224 = t395 * (qJD(2) * (qJD(3) + t473) + t460) + t563 * t399;
t140 = -t223 * t390 + t391 * t224;
t141 = -t223 * t391 - t224 * t390;
t464 = qJD(5) * t398;
t465 = qJD(5) * t394;
t57 = t394 * t140 - t398 * t141 + t231 * t464 + t429 * t465;
t58 = t398 * t140 + t394 * t141 - t231 * t465 + t429 * t464;
t20 = t161 * t449 + t393 * t58 + t463 * t559 + t545 * t57;
t344 = -qJD(5) + t355;
t337 = -qJD(6) + t344;
t82 = t545 * t161 + t393 * t559;
t524 = t337 * t82;
t561 = -t20 - t524;
t316 = t390 * t399 + t391 * t395;
t300 = t316 * qJD(3);
t481 = t316 * t473 - t300;
t315 = t390 * t395 - t391 * t399;
t586 = t355 * t315;
t530 = t82 ^ 2;
t576 = -t393 * t161 + t545 * t559;
t531 = t576 ^ 2;
t562 = -t530 + t531;
t529 = t82 * t576;
t484 = t587 * t390 + t391 * t588;
t483 = t390 * t588 - t587 * t391;
t438 = pkin(2) * t400 + pkin(8) * t396;
t336 = -pkin(1) - t438;
t311 = t336 * qJD(1);
t369 = pkin(7) * t473;
t342 = qJD(2) * pkin(8) + t369;
t240 = t399 * t311 - t342 * t395;
t193 = -qJ(4) * t324 + t240;
t179 = -pkin(3) * t355 + t193;
t241 = t311 * t395 + t342 * t399;
t194 = -qJ(4) * t322 + t241;
t184 = t390 * t194;
t111 = t391 * t179 - t184;
t557 = pkin(9) * t429;
t89 = -pkin(4) * t355 + t111 - t557;
t496 = t391 * t194;
t112 = t390 * t179 + t496;
t570 = pkin(9) * t231;
t92 = t112 - t570;
t44 = -t394 * t92 + t398 * t89;
t575 = pkin(10) * t559;
t38 = t44 - t575;
t32 = -pkin(5) * t344 + t38;
t45 = t394 * t89 + t398 * t92;
t579 = pkin(10) * t161;
t39 = t45 - t579;
t523 = t393 * t39;
t12 = t32 * t545 - t523;
t457 = t545 * t39;
t13 = t393 * t32 + t457;
t585 = -t12 * t82 + t13 * t576;
t376 = t400 * qJDD(1);
t553 = -t396 * t461 + t376;
t314 = qJDD(3) - t553;
t310 = qJDD(5) + t314;
t327 = t437 * qJD(2);
t242 = qJD(1) * t327 + qJDD(1) * t336;
t236 = t399 * t242;
t294 = pkin(7) * t553 + qJDD(2) * pkin(8);
t135 = -qJD(3) * t241 - t294 * t395 + t236;
t88 = pkin(3) * t314 + qJ(4) * t223 - qJD(4) * t324 + t135;
t467 = qJD(3) * t399;
t469 = qJD(3) * t395;
t134 = t395 * t242 + t399 * t294 + t311 * t467 - t342 * t469;
t96 = -qJ(4) * t224 - qJD(4) * t322 + t134;
t42 = -t390 * t96 + t391 * t88;
t30 = pkin(4) * t314 - pkin(9) * t141 + t42;
t43 = t390 * t88 + t391 * t96;
t34 = -pkin(9) * t140 + t43;
t9 = -qJD(5) * t45 + t398 * t30 - t34 * t394;
t6 = pkin(5) * t310 + pkin(10) * t57 + t9;
t443 = -t394 * t30 - t398 * t34 - t89 * t464 + t92 * t465;
t7 = -pkin(10) * t58 - t443;
t1 = t32 * t449 - t39 * t463 + t393 * t6 + t545 * t7;
t341 = -qJD(2) * pkin(2) + pkin(7) * t474;
t247 = pkin(3) * t322 + qJD(4) + t341;
t172 = pkin(4) * t231 + t247;
t103 = pkin(5) * t161 + t172;
t387 = qJ(3) + pkin(11);
t377 = qJ(5) + t387;
t365 = qJ(6) + t377;
t352 = sin(t365);
t353 = cos(t365);
t401 = cos(qJ(1));
t397 = sin(qJ(1));
t490 = t397 * t400;
t249 = t352 * t401 - t353 * t490;
t488 = t400 * t401;
t251 = t352 * t397 + t353 * t488;
t532 = g(3) * t396;
t560 = g(1) * t251 - g(2) * t249 + t103 * t82 + t353 * t532 - t1;
t21 = qJD(6) * t576 - t393 * t57 + t545 * t58;
t522 = t576 * t337;
t549 = -t21 - t522;
t583 = -pkin(4) * t474 - pkin(9) * t586 + t484;
t582 = -pkin(9) * t481 - t483;
t367 = pkin(7) * t460;
t295 = -qJDD(2) * pkin(2) + pkin(7) * t447 + t367;
t385 = g(3) * t400;
t436 = g(1) * t401 + g(2) * t397;
t414 = -t436 * t396 + t385;
t411 = -t295 - t414;
t581 = pkin(8) * qJD(3) * t355 + t411;
t512 = t161 ^ 2;
t514 = t559 ^ 2;
t580 = -t512 + t514;
t2 = -qJD(6) * t13 - t393 * t7 + t545 * t6;
t248 = t352 * t490 + t353 * t401;
t250 = -t352 * t488 + t353 * t397;
t550 = -g(1) * t250 + g(2) * t248 - t103 * t576 + t352 * t532 + t2;
t511 = t161 * t344;
t578 = -t57 - t511;
t510 = t161 * t559;
t486 = t315 * t464 + t316 * t465 - t394 * t481 - t398 * t586;
t229 = -t315 * t394 + t316 * t398;
t485 = qJD(5) * t229 + t394 * t586 - t398 * t481;
t361 = sin(t377);
t362 = cos(t377);
t259 = t361 * t401 - t362 * t490;
t261 = t361 * t397 + t362 * t488;
t577 = g(1) * t261 - g(2) * t259 + t161 * t172 + t362 * t532 + t443;
t338 = t392 * t395;
t339 = t392 * t399;
t245 = t391 * t338 + t339 * t390;
t211 = -pkin(9) * t316 + t245;
t246 = t390 * t338 - t391 * t339;
t212 = -pkin(9) * t315 + t246;
t526 = t211 * t464 - t212 * t465 + t394 * t583 - t398 * t582;
t131 = t394 * t211 + t398 * t212;
t525 = -qJD(5) * t131 + t394 * t582 + t398 * t583;
t119 = -t193 * t390 - t496;
t104 = t119 + t570;
t120 = t391 * t193 - t184;
t105 = t120 - t557;
t363 = pkin(3) * t391 + pkin(4);
t544 = pkin(3) * t390;
t290 = t398 * t363 - t394 * t544;
t517 = t290 * qJD(5) - t394 * t104 - t398 * t105;
t291 = t363 * t394 + t398 * t544;
t516 = -t291 * qJD(5) - t398 * t104 + t105 * t394;
t513 = t559 * t344;
t574 = -t58 - t513;
t258 = t361 * t490 + t362 * t401;
t260 = -t361 * t488 + t362 * t397;
t551 = -g(1) * t260 + g(2) * t258 + t361 * t532;
t571 = -t172 * t559 + t551 + t9;
t569 = -pkin(10) * t485 + t526;
t568 = -pkin(5) * t474 + pkin(10) * t486 + t525;
t567 = t517 + t575;
t566 = t516 - t579;
t565 = t231 * t429;
t543 = pkin(3) * t395;
t439 = pkin(3) * t469 - t473 * t543 - t369;
t470 = qJD(2) * t400;
t453 = t395 * t470;
t564 = t396 * t467 + t453;
t318 = t399 * t336;
t541 = pkin(7) * t395;
t237 = -qJ(4) * t492 + t318 + (-pkin(3) - t541) * t400;
t357 = pkin(7) * t489;
t266 = t395 * t336 + t357;
t495 = t395 * t396;
t244 = -qJ(4) * t495 + t266;
t166 = t391 * t237 - t244 * t390;
t286 = t315 * t396;
t128 = -pkin(4) * t400 + pkin(9) * t286 + t166;
t167 = t390 * t237 + t391 * t244;
t285 = t316 * t396;
t133 = -pkin(9) * t285 + t167;
t74 = t394 * t128 + t398 * t133;
t554 = t240 * t355 + t134;
t482 = -pkin(4) * t481 + t439;
t302 = t395 * t490 + t399 * t401;
t304 = -t395 * t488 + t397 * t399;
t552 = -g(1) * t304 + g(2) * t302;
t547 = -0.2e1 * pkin(1);
t546 = pkin(5) * t58;
t542 = pkin(4) * t140;
t538 = g(1) * t397;
t533 = g(2) * t401;
t130 = t398 * t211 - t212 * t394;
t106 = -pkin(10) * t229 + t130;
t228 = t398 * t315 + t316 * t394;
t107 = -pkin(10) * t228 + t131;
t52 = t106 * t545 - t393 * t107;
t528 = qJD(6) * t52 + t393 * t568 + t545 * t569;
t53 = t393 * t106 + t107 * t545;
t527 = -qJD(6) * t53 - t393 * t569 + t545 * t568;
t382 = t399 * pkin(3);
t366 = t382 + pkin(2);
t158 = -t393 * t228 + t229 * t545;
t521 = -qJD(6) * t158 + t393 * t486 - t485 * t545;
t520 = t228 * t449 + t229 * t463 + t393 * t485 + t486 * t545;
t287 = pkin(5) + t290;
t203 = t287 * t545 - t393 * t291;
t519 = qJD(6) * t203 + t393 * t566 + t545 * t567;
t204 = t393 * t287 + t291 * t545;
t518 = -qJD(6) * t204 - t393 * t567 + t545 * t566;
t515 = pkin(7) * qJDD(1);
t509 = t223 * t395;
t508 = t224 * t399;
t507 = t429 ^ 2;
t506 = t429 * t355;
t505 = t231 ^ 2;
t504 = t231 * t355;
t502 = t241 * t355;
t501 = t322 * t355;
t500 = t322 * t395;
t499 = t324 * t322;
t498 = t324 * t355;
t497 = t324 * t399;
t493 = t395 * t401;
t491 = t396 * t401;
t487 = pkin(5) * t485 + t482;
t471 = qJD(2) * t396;
t478 = t399 * t327 + t471 * t541;
t154 = -t396 * t466 + t424 * qJD(2) + (-t357 + (qJ(4) * t396 - t336) * t395) * qJD(3) + t478;
t479 = t395 * t327 + t336 * t467;
t165 = (-pkin(7) * qJD(2) - qJ(4) * qJD(3)) * t492 + (-qJD(4) * t396 + (-pkin(7) * qJD(3) - qJ(4) * qJD(2)) * t400) * t395 + t479;
t79 = t390 * t154 + t391 * t165;
t373 = cos(t387);
t332 = pkin(4) * t373 + t382;
t328 = pkin(3) * t495 + t396 * pkin(7);
t477 = t401 * pkin(1) + t397 * pkin(7);
t388 = t396 ^ 2;
t389 = t400 ^ 2;
t476 = t388 - t389;
t475 = t388 + t389;
t386 = -pkin(9) + t392;
t403 = qJD(1) ^ 2;
t456 = t396 * t403 * t400;
t284 = pkin(5) * t362 + t332;
t257 = pkin(3) * t564 + pkin(7) * t470;
t452 = t400 * t462;
t450 = t355 * t474;
t73 = t398 * t128 - t133 * t394;
t78 = t391 * t154 - t165 * t390;
t267 = pkin(4) * t315 - t366;
t441 = t396 * t447;
t358 = t396 * t538;
t440 = -g(2) * t491 + t358;
t238 = pkin(4) * t285 + t328;
t181 = pkin(3) * t324 + pkin(4) * t429;
t372 = sin(t387);
t331 = pkin(4) * t372 + t543;
t435 = pkin(7) * t322 + t341 * t395;
t434 = pkin(7) * t324 + t341 * t399;
t433 = -pkin(8) * t314 + qJD(3) * t341;
t432 = -t240 * t399 - t241 * t395;
t273 = pkin(2) + t284;
t379 = -pkin(10) + t386;
t431 = t273 * t400 - t379 * t396;
t202 = -t285 * t394 - t286 * t398;
t325 = pkin(2) + t332;
t428 = t325 * t400 - t386 * t396;
t426 = t366 * t400 - t392 * t396;
t205 = t315 * t468 - t316 * t470;
t168 = -pkin(4) * t205 + t257;
t59 = -pkin(5) * t400 - pkin(10) * t202 + t73;
t201 = t398 * t285 - t286 * t394;
t62 = -pkin(10) * t201 + t74;
t26 = -t393 * t62 + t545 * t59;
t27 = t393 * t59 + t545 * t62;
t421 = -pkin(7) * qJDD(2) + t461 * t547;
t123 = -t393 * t201 + t202 * t545;
t419 = t314 * t395 - t355 * t467;
t418 = t314 * t399 + t355 * t469;
t206 = t300 * t396 + t390 * t453 - t391 * t452;
t69 = pkin(4) * t471 + pkin(9) * t206 + t78;
t72 = pkin(9) * t205 + t79;
t22 = t128 * t464 - t133 * t465 + t394 * t69 + t398 * t72;
t417 = pkin(1) * t403 + t436;
t402 = qJD(2) ^ 2;
t416 = pkin(7) * t402 + qJDD(1) * t547 + t533;
t177 = pkin(3) * t224 + qJDD(4) + t295;
t413 = -t400 * t436 - t532;
t97 = t177 + t542;
t23 = -qJD(5) * t74 - t394 * t72 + t398 * t69;
t409 = t177 + t414;
t405 = t409 + t542;
t383 = t401 * pkin(7);
t305 = t395 * t397 + t399 * t488;
t303 = -t397 * t489 + t493;
t297 = qJDD(6) + t310;
t283 = pkin(5) * t361 + t331;
t278 = t372 * t397 + t373 * t488;
t277 = -t372 * t488 + t373 * t397;
t276 = t372 * t401 - t373 * t490;
t275 = t372 * t490 + t373 * t401;
t265 = -pkin(7) * t494 + t318;
t254 = -pkin(7) * t454 + t306;
t243 = -t314 * t400 - t355 * t471;
t191 = -qJD(3) * t266 + t478;
t190 = (-t396 * t462 - t400 * t469) * pkin(7) + t479;
t178 = pkin(5) * t228 + t267;
t157 = t228 * t545 + t229 * t393;
t150 = pkin(5) * t201 + t238;
t122 = t201 * t545 + t202 * t393;
t108 = pkin(5) * t559 + t181;
t102 = qJD(5) * t202 - t398 * t205 - t206 * t394;
t101 = -t394 * t205 + t398 * t206 + t285 * t464 - t286 * t465;
t70 = pkin(5) * t102 + t168;
t37 = qJD(6) * t123 - t393 * t101 + t102 * t545;
t36 = t101 * t545 + t393 * t102 + t201 * t449 + t202 * t463;
t33 = t97 + t546;
t17 = -pkin(10) * t102 + t22;
t16 = pkin(5) * t471 + pkin(10) * t101 + t23;
t15 = t38 * t545 - t523;
t14 = -t393 * t38 - t457;
t4 = -qJD(6) * t27 + t16 * t545 - t393 * t17;
t3 = qJD(6) * t26 + t393 * t16 + t17 * t545;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t533 + t538, t436, 0, 0, qJDD(1) * t388 + 0.2e1 * t441, 0.2e1 * t376 * t396 - 0.2e1 * t461 * t476, qJDD(2) * t396 + t400 * t402, qJDD(1) * t389 - 0.2e1 * t441, qJDD(2) * t400 - t396 * t402, 0, t421 * t396 + (-t416 + t538) * t400, t396 * t416 + t400 * t421 - t358, 0.2e1 * t475 * t515 - t436, -g(1) * (-pkin(1) * t397 + t383) - g(2) * t477 + (pkin(7) ^ 2 * t475 + pkin(1) ^ 2) * qJDD(1), -t223 * t492 + (-t395 * t468 + t452) * t324 (-t322 * t399 - t324 * t395) * t470 + (t509 - t508 + (-t497 + t500) * qJD(3)) * t396 (-t355 * t462 + t223) * t400 + (qJD(2) * t324 + t418) * t396, t224 * t495 + t322 * t564 (t355 * t472 + t224) * t400 + (-qJD(2) * t322 - t419) * t396, t243, -g(1) * t303 - g(2) * t305 - t191 * t355 + t265 * t314 + (qJD(2) * t435 - t135) * t400 + (pkin(7) * t224 + qJD(2) * t240 + t295 * t395 + t341 * t467) * t396, -g(1) * t302 - g(2) * t304 + t190 * t355 - t266 * t314 + (qJD(2) * t434 + t134) * t400 + (-pkin(7) * t223 - qJD(2) * t241 + t295 * t399 - t341 * t469) * t396, -t190 * t322 - t191 * t324 + t223 * t265 - t224 * t266 + t358 + t432 * t470 + (-t533 - t134 * t395 - t135 * t399 + (t240 * t395 - t241 * t399) * qJD(3)) * t396, t134 * t266 + t241 * t190 + t135 * t265 + t240 * t191 - g(1) * t383 - g(2) * (t401 * t438 + t477) - t336 * t538 + (t295 * t396 + t341 * t470) * pkin(7), -t141 * t286 - t206 * t429, t140 * t286 - t141 * t285 + t205 * t429 + t206 * t231, -t141 * t400 + t206 * t355 - t286 * t314 + t429 * t471, t140 * t285 - t205 * t231, t140 * t400 - t205 * t355 - t231 * t471 - t285 * t314, t243, -g(1) * t276 - g(2) * t278 + t111 * t471 + t140 * t328 + t166 * t314 + t177 * t285 - t205 * t247 + t231 * t257 - t355 * t78 - t400 * t42, -g(1) * t275 - g(2) * t277 - t112 * t471 + t141 * t328 - t167 * t314 - t177 * t286 - t206 * t247 + t257 * t429 + t355 * t79 + t400 * t43, t111 * t206 + t112 * t205 - t140 * t167 - t141 * t166 - t231 * t79 - t285 * t43 + t286 * t42 - t429 * t78 + t440, t43 * t167 + t112 * t79 + t42 * t166 + t111 * t78 + t177 * t328 + t247 * t257 - g(1) * (pkin(3) * t493 + t383) - g(2) * (t366 * t488 - t392 * t491 + t477) + (-g(1) * (-pkin(1) - t426) - g(2) * t543) * t397, -t101 * t559 - t202 * t57, t101 * t161 - t102 * t559 + t201 * t57 - t202 * t58, t101 * t344 + t202 * t310 + t400 * t57 + t471 * t559, t102 * t161 + t201 * t58, t102 * t344 - t161 * t471 - t201 * t310 + t400 * t58, -t310 * t400 - t344 * t471, -g(1) * t259 - g(2) * t261 + t102 * t172 + t161 * t168 + t201 * t97 - t23 * t344 + t238 * t58 + t310 * t73 - t400 * t9 + t44 * t471, -g(1) * t258 - g(2) * t260 - t101 * t172 + t168 * t559 + t202 * t97 + t22 * t344 - t238 * t57 - t310 * t74 - t400 * t443 - t45 * t471, t101 * t44 - t102 * t45 - t161 * t22 + t201 * t443 - t202 * t9 - t23 * t559 + t57 * t73 - t58 * t74 + t440, -t443 * t74 + t45 * t22 + t9 * t73 + t44 * t23 + t97 * t238 + t172 * t168 - g(1) * (t331 * t401 + t383) - g(2) * (t325 * t488 - t386 * t491 + t477) + (-g(1) * (-pkin(1) - t428) - g(2) * t331) * t397, -t123 * t20 - t36 * t576, t122 * t20 - t123 * t21 + t36 * t82 - t37 * t576, t123 * t297 + t20 * t400 + t337 * t36 + t471 * t576, t122 * t21 + t37 * t82, -t122 * t297 + t21 * t400 + t337 * t37 - t471 * t82, -t297 * t400 - t337 * t471, -g(1) * t249 - g(2) * t251 + t103 * t37 + t12 * t471 + t122 * t33 + t150 * t21 - t2 * t400 + t26 * t297 - t337 * t4 + t70 * t82, -g(1) * t248 - g(2) * t250 + t1 * t400 - t103 * t36 + t123 * t33 - t13 * t471 - t150 * t20 - t27 * t297 + t3 * t337 + t576 * t70, -t1 * t122 + t12 * t36 - t123 * t2 - t13 * t37 + t20 * t26 - t21 * t27 - t3 * t82 - t4 * t576 + t440, t1 * t27 + t13 * t3 + t2 * t26 + t12 * t4 + t33 * t150 + t103 * t70 - g(1) * (t283 * t401 + t383) - g(2) * (t273 * t488 - t379 * t491 + t477) + (-g(1) * (-pkin(1) - t431) - g(2) * t283) * t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t456, t476 * t403, t460, t456, t376, qJDD(2), t396 * t417 - t367 - t385, t532 + (t417 - t515) * t400, 0, 0, -t355 * t497 - t509 (-t223 + t501) * t399 + (-t224 + t498) * t395 (-t324 * t396 + t355 * t489) * qJD(1) + t419, -t355 * t500 - t508 (t322 * t396 - t355 * t494) * qJD(1) + t418, t450, -pkin(2) * t224 + t253 * t355 + t433 * t395 + (-t240 * t396 - t400 * t435) * qJD(1) + t581 * t399, pkin(2) * t223 - t254 * t355 + t433 * t399 + (t241 * t396 - t400 * t434) * qJD(1) - t581 * t395, t253 * t324 + t254 * t322 + ((qJD(3) * t324 - t224) * pkin(8) + t554) * t399 + (-t135 + t502 + (qJD(3) * t322 - t223) * pkin(8)) * t395 + t413, -t341 * t369 - t240 * t253 - t241 * t254 + t411 * pkin(2) + (qJD(3) * t432 + t134 * t399 - t135 * t395 + t413) * pkin(8), t141 * t316 + t429 * t586, -t140 * t316 - t141 * t315 - t231 * t586 + t429 * t481, t314 * t316 - t355 * t586 - t429 * t474, t140 * t315 - t231 * t481, t231 * t474 - t314 * t315 - t355 * t481, t450, -t111 * t474 - t140 * t366 + t177 * t315 + t231 * t439 + t245 * t314 - t247 * t481 - t355 * t484 - t373 * t414, t112 * t474 - t141 * t366 + t177 * t316 - t246 * t314 + t247 * t586 + t355 * t483 + t372 * t414 + t429 * t439, -t111 * t586 + t112 * t481 - t140 * t246 - t141 * t245 - t231 * t483 - t315 * t43 - t316 * t42 - t429 * t484 + t413, -g(3) * t426 + t111 * t484 + t112 * t483 - t177 * t366 + t42 * t245 + t43 * t246 + t247 * t439 + t436 * (t366 * t396 + t392 * t400) -t229 * t57 - t486 * t559, t161 * t486 + t228 * t57 - t229 * t58 - t485 * t559, t229 * t310 + t344 * t486 - t474 * t559, t161 * t485 + t228 * t58, t161 * t474 - t228 * t310 + t344 * t485, t344 * t474, t130 * t310 + t161 * t482 + t172 * t485 + t228 * t97 + t267 * t58 - t344 * t525 - t362 * t414 - t44 * t474, -t131 * t310 - t172 * t486 + t229 * t97 - t267 * t57 + t344 * t526 + t361 * t414 + t45 * t474 + t482 * t559, t130 * t57 - t131 * t58 - t161 * t526 + t228 * t443 - t229 * t9 + t44 * t486 - t45 * t485 - t525 * t559 + t413, -g(3) * t428 + t9 * t130 - t443 * t131 + t172 * t482 + t97 * t267 + t44 * t525 + t45 * t526 + t436 * (t325 * t396 + t386 * t400) -t158 * t20 - t520 * t576, t157 * t20 - t158 * t21 + t520 * t82 + t521 * t576, t158 * t297 + t337 * t520 - t474 * t576, t157 * t21 - t521 * t82, -t157 * t297 - t337 * t521 + t474 * t82, t337 * t474, -t103 * t521 - t12 * t474 + t157 * t33 + t178 * t21 + t297 * t52 - t337 * t527 - t353 * t414 + t487 * t82, -t103 * t520 + t13 * t474 + t158 * t33 - t178 * t20 - t297 * t53 + t337 * t528 + t352 * t414 + t487 * t576, -t1 * t157 + t12 * t520 + t13 * t521 - t158 * t2 + t20 * t52 - t21 * t53 - t527 * t576 - t528 * t82 + t413, -g(3) * t431 + t1 * t53 + t103 * t487 + t12 * t527 + t13 * t528 + t33 * t178 + t2 * t52 + t436 * (t273 * t396 + t379 * t400); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t499, -t322 ^ 2 + t324 ^ 2, -t223 - t501, -t499, -t224 - t498, t314, -t342 * t467 - t502 - t324 * t341 + t236 + (-qJD(3) * t311 - t294 + t532) * t395 + t552, g(1) * t305 - g(2) * t303 + g(3) * t492 + t322 * t341 - t554, 0, 0, t565, -t505 + t507, t141 - t504, -t565, -t140 - t506, t314, t372 * t532 - g(1) * t277 + g(2) * t275 + t119 * t355 - t429 * t247 + (-t231 * t324 + t314 * t391) * pkin(3) + t42, t373 * t532 + g(1) * t278 - g(2) * t276 - t120 * t355 + t231 * t247 + (-t314 * t390 - t324 * t429) * pkin(3) - t43 (-t140 * t390 - t141 * t391) * pkin(3) + (t112 + t119) * t429 + (-t111 + t120) * t231, -t111 * t119 - t112 * t120 + (g(3) * t495 - t247 * t324 + t43 * t390 + t42 * t391 + t552) * pkin(3), t510, t580, t578, -t510, t574, t310, -t161 * t181 + t290 * t310 - t344 * t516 + t571, -t181 * t559 - t291 * t310 + t344 * t517 + t577, t290 * t57 - t291 * t58 + (t45 - t516) * t559 + (-t517 - t44) * t161, -t443 * t291 + t9 * t290 - t172 * t181 - g(1) * (-t331 * t488 + t332 * t397) - g(2) * (-t331 * t490 - t332 * t401) + t331 * t532 + t517 * t45 + t516 * t44, t529, t562, t561, -t529, t549, t297, -t108 * t82 + t203 * t297 - t337 * t518 + t550, -t108 * t576 - t204 * t297 + t337 * t519 + t560, t20 * t203 - t204 * t21 - t518 * t576 - t519 * t82 + t585, t1 * t204 + t2 * t203 - t103 * t108 - g(1) * (-t283 * t488 + t284 * t397) - g(2) * (-t283 * t490 - t284 * t401) + t283 * t532 + t519 * t13 + t518 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140 - t506, t141 + t504, -t505 - t507, t111 * t429 + t112 * t231 + t409, 0, 0, 0, 0, 0, 0, t58 - t513, -t57 + t511, -t512 - t514, t161 * t45 + t44 * t559 + t405, 0, 0, 0, 0, 0, 0, t21 - t522, -t20 + t524, -t530 - t531, t12 * t576 + t13 * t82 + t405 + t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t510, t580, t578, -t510, t574, t310, -t344 * t45 + t571, -t344 * t44 + t577, 0, 0, t529, t562, t561, -t529, t549, t297, t14 * t337 + (t297 * t545 + t337 * t463 - t559 * t82) * pkin(5) + t550, -t15 * t337 + (-t297 * t393 + t337 * t449 - t559 * t576) * pkin(5) + t560, t14 * t576 + t15 * t82 + (t545 * t20 - t21 * t393 + (t393 * t576 - t545 * t82) * qJD(6)) * pkin(5) + t585, -t12 * t14 - t13 * t15 + (t1 * t393 + t2 * t545 - t103 * t559 + (-t12 * t393 + t13 * t545) * qJD(6) + t551) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t529, t562, t561, -t529, t549, t297, -t13 * t337 + t550, -t12 * t337 + t560, 0, 0;];
tau_reg  = t5;
