% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR6_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR6_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR6_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR6_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:29:30
% EndTime: 2019-03-09 18:29:52
% DurationCPUTime: 9.05s
% Computational Cost: add. (11551->489), mult. (28996->693), div. (0->0), fcn. (22187->10), ass. (0->259)
t272 = sin(qJ(5));
t276 = cos(qJ(5));
t278 = cos(qJ(2));
t347 = qJD(1) * t278;
t255 = -qJD(3) + t347;
t273 = sin(qJ(3));
t274 = sin(qJ(2));
t348 = qJD(1) * t274;
t328 = t273 * t348;
t277 = cos(qJ(3));
t336 = t277 * qJD(2);
t233 = t328 - t336;
t346 = qJD(2) * t273;
t235 = t277 * t348 + t346;
t269 = sin(pkin(11));
t270 = cos(pkin(11));
t178 = t233 * t269 - t235 * t270;
t413 = pkin(9) * t178;
t239 = -pkin(2) * t278 - pkin(8) * t274 - pkin(1);
t223 = t239 * qJD(1);
t262 = pkin(7) * t347;
t246 = qJD(2) * pkin(8) + t262;
t186 = t277 * t223 - t246 * t273;
t150 = -qJ(4) * t235 + t186;
t139 = -pkin(3) * t255 + t150;
t370 = t273 * t223;
t187 = t246 * t277 + t370;
t151 = -qJ(4) * t233 + t187;
t144 = t269 * t151;
t78 = t270 * t139 - t144;
t58 = -pkin(4) * t255 + t413 + t78;
t295 = -t233 * t270 - t235 * t269;
t401 = pkin(9) * t295;
t371 = t270 * t151;
t79 = t269 * t139 + t371;
t60 = t79 + t401;
t19 = t272 * t58 + t276 * t60;
t119 = t178 * t272 + t276 * t295;
t427 = pkin(10) * t119;
t15 = t19 + t427;
t271 = sin(qJ(6));
t338 = qJD(6) * t271;
t11 = t15 * t338;
t275 = cos(qJ(6));
t404 = -t276 * t178 + t272 * t295;
t55 = t119 * t275 - t271 * t404;
t245 = -qJD(2) * pkin(2) + pkin(7) * t348;
t191 = pkin(3) * t233 + qJD(4) + t245;
t128 = -pkin(4) * t295 + t191;
t67 = -pkin(5) * t119 + t128;
t432 = -t67 * t55 + t11;
t334 = qJD(1) * qJD(2);
t322 = t278 * t334;
t342 = qJD(3) * t274;
t326 = t273 * t342;
t333 = qJD(2) * qJD(3);
t193 = -qJD(1) * t326 + (t322 + t333) * t277;
t341 = qJD(3) * t277;
t325 = t274 * t341;
t344 = qJD(2) * t278;
t327 = t273 * t344;
t408 = t325 + t327;
t194 = qJD(1) * t408 + t273 * t333;
t136 = -t193 * t269 - t194 * t270;
t137 = t193 * t270 - t194 * t269;
t339 = qJD(5) * t276;
t340 = qJD(5) * t272;
t45 = t272 * t136 + t276 * t137 + t178 * t340 + t295 * t339;
t46 = qJD(5) * t404 - t276 * t136 + t272 * t137;
t51 = t119 * t271 + t275 * t404;
t283 = -qJD(6) * t51 - t271 * t45 - t275 * t46;
t248 = -qJD(5) + t255;
t240 = -qJD(6) + t248;
t385 = t240 * t51;
t403 = t283 - t385;
t259 = t274 * t334;
t303 = pkin(2) * t274 - pkin(8) * t278;
t237 = t303 * qJD(2);
t224 = qJD(1) * t237;
t307 = pkin(7) * t259;
t356 = -t277 * t224 - t273 * t307;
t286 = -qJD(3) * t187 - t356;
t77 = pkin(3) * t259 - qJ(4) * t193 - qJD(4) * t235 + t286;
t343 = qJD(3) * t273;
t292 = t223 * t341 + t273 * t224 - t246 * t343;
t281 = -t277 * t307 + t292;
t85 = -qJ(4) * t194 - qJD(4) * t233 + t281;
t34 = -t269 * t85 + t270 * t77;
t25 = pkin(4) * t259 - pkin(9) * t137 + t34;
t35 = t269 * t77 + t270 * t85;
t27 = pkin(9) * t136 + t35;
t319 = t276 * t25 - t272 * t27;
t284 = -qJD(5) * t19 + t319;
t2 = pkin(5) * t259 - pkin(10) * t45 + t284;
t431 = -t271 * t2 + t432;
t411 = t51 * t55;
t384 = t240 * t55;
t337 = qJD(6) * t275;
t8 = t119 * t337 - t271 * t46 + t275 * t45 - t338 * t404;
t406 = t8 + t384;
t366 = t277 * t278;
t291 = pkin(3) * t274 - qJ(4) * t366;
t392 = -qJ(4) - pkin(8);
t314 = qJD(3) * t392;
t236 = t303 * qJD(1);
t353 = pkin(7) * t328 + t277 * t236;
t430 = -qJD(1) * t291 - t273 * qJD(4) + t277 * t314 - t353;
t219 = t273 * t236;
t335 = t277 * qJD(4);
t367 = t274 * t277;
t368 = t273 * t278;
t429 = t219 + (-pkin(7) * t367 - qJ(4) * t368) * qJD(1) - t273 * t314 - t335;
t407 = t51 ^ 2 - t55 ^ 2;
t313 = -t272 * t25 - t276 * t27 - t58 * t339 + t60 * t340;
t3 = -pkin(10) * t46 - t313;
t329 = t275 * t2 - t271 * t3;
t428 = -t67 * t51 + t329;
t227 = t269 * t277 + t270 * t273;
t289 = t227 * t278;
t415 = qJD(1) * t289 - t227 * qJD(3);
t294 = t269 * t273 - t270 * t277;
t424 = t255 * t294;
t378 = t119 * t248;
t426 = t45 + t378;
t425 = t404 * t119;
t359 = t269 * t429 + t270 * t430;
t358 = t269 * t430 - t270 * t429;
t423 = -t119 ^ 2 + t404 ^ 2;
t422 = -t128 * t119 + t313;
t420 = pkin(10) * t404;
t419 = -pkin(4) * t348 - t424 * pkin(9) + t359;
t410 = t415 * pkin(9) + t358;
t379 = t404 * t248;
t418 = -t46 - t379;
t414 = -t128 * t404 + t284;
t296 = -t227 * t272 - t276 * t294;
t362 = qJD(5) * t296 + t415 * t272 + t424 * t276;
t176 = t227 * t276 - t272 * t294;
t361 = qJD(5) * t176 + t424 * t272 - t415 * t276;
t409 = -t262 + (-t273 * t347 + t343) * pkin(3);
t18 = -t272 * t60 + t276 * t58;
t14 = t18 - t420;
t10 = -pkin(5) * t248 + t14;
t382 = t275 * t15;
t5 = t271 * t10 + t382;
t405 = -qJD(6) * t5 + t428;
t402 = -0.2e1 * t334;
t400 = t419 * t276;
t242 = t392 * t273;
t243 = t392 * t277;
t189 = t270 * t242 + t243 * t269;
t164 = -pkin(9) * t227 + t189;
t190 = t269 * t242 - t270 * t243;
t165 = -pkin(9) * t294 + t190;
t360 = t272 * t164 + t276 * t165;
t357 = -t415 * pkin(4) + t409;
t258 = pkin(3) * t270 + pkin(4);
t394 = pkin(3) * t269;
t306 = t276 * t258 - t272 * t394;
t88 = -t150 * t269 - t371;
t68 = t88 - t401;
t89 = t270 * t150 - t144;
t69 = t89 + t413;
t397 = t306 * qJD(5) - t272 * t68 - t276 * t69;
t213 = t258 * t272 + t276 * t394;
t396 = t213 * qJD(5) - t272 * t69 + t276 * t68;
t395 = t164 * t339 - t165 * t340 + t419 * t272 + t410 * t276;
t393 = pkin(7) * t273;
t113 = t176 * t271 - t275 * t296;
t391 = -qJD(6) * t113 - t361 * t271 + t362 * t275;
t114 = t176 * t275 + t271 * t296;
t390 = qJD(6) * t114 + t362 * t271 + t361 * t275;
t387 = t361 * pkin(5) + t357;
t229 = t277 * t239;
t183 = -qJ(4) * t367 + t229 + (-pkin(3) - t393) * t278;
t257 = pkin(7) * t366;
t352 = t273 * t239 + t257;
t369 = t273 * t274;
t188 = -qJ(4) * t369 + t352;
t122 = t270 * t183 - t188 * t269;
t208 = t294 * t274;
t95 = -pkin(4) * t278 + pkin(9) * t208 + t122;
t123 = t269 * t183 + t270 * t188;
t207 = t227 * t274;
t99 = -pkin(9) * t207 + t123;
t386 = t272 * t95 + t276 * t99;
t383 = t275 * t10;
t381 = t396 - t427;
t380 = t397 + t420;
t377 = t193 * t273;
t376 = t233 * t255;
t375 = t235 * t255;
t374 = t245 * t273;
t373 = t245 * t277;
t372 = t255 * t277;
t280 = qJD(1) ^ 2;
t365 = t278 * t280;
t279 = qJD(2) ^ 2;
t364 = t279 * t274;
t363 = t279 * t278;
t345 = qJD(2) * t274;
t354 = t277 * t237 + t345 * t393;
t110 = -t274 * t335 + t291 * qJD(2) + (-t257 + (qJ(4) * t274 - t239) * t273) * qJD(3) + t354;
t355 = t273 * t237 + t239 * t341;
t121 = (-pkin(7) * qJD(2) - qJ(4) * qJD(3)) * t367 + (-qJD(4) * t274 + (-pkin(7) * qJD(3) - qJ(4) * qJD(2)) * t278) * t273 + t355;
t49 = t269 * t110 + t270 * t121;
t350 = pkin(3) * t369 + t274 * pkin(7);
t267 = t274 ^ 2;
t349 = -t278 ^ 2 + t267;
t331 = t408 * pkin(3) + pkin(7) * t344;
t330 = -pkin(3) * t277 - pkin(2);
t324 = t278 * t336;
t177 = pkin(3) * t194 + pkin(7) * t322;
t320 = qJD(6) * t10 + t3;
t159 = t227 * t342 + t269 * t327 - t270 * t324;
t48 = t270 * t110 - t121 * t269;
t38 = pkin(4) * t345 + pkin(9) * t159 + t48;
t158 = -qJD(2) * t289 + t294 * t342;
t44 = pkin(9) * t158 + t49;
t317 = -t272 * t44 + t276 * t38;
t315 = -t272 * t99 + t276 * t95;
t312 = pkin(1) * t402;
t310 = t276 * t164 - t165 * t272;
t309 = t233 + t336;
t308 = -t235 + t346;
t184 = pkin(4) * t207 + t350;
t70 = -pkin(10) * t176 + t310;
t305 = -t361 * pkin(10) + qJD(6) * t70 + t395;
t71 = pkin(10) * t296 + t360;
t304 = pkin(5) * t348 + t362 * pkin(10) + qJD(5) * t360 + qJD(6) * t71 + t410 * t272 - t400;
t141 = pkin(3) * t235 - pkin(4) * t178;
t157 = -t207 * t272 - t208 * t276;
t30 = -pkin(5) * t278 - pkin(10) * t157 + t315;
t299 = -t276 * t207 + t208 * t272;
t33 = pkin(10) * t299 + t386;
t302 = t271 * t30 + t275 * t33;
t91 = t157 * t271 - t275 * t299;
t92 = t157 * t275 + t271 * t299;
t209 = pkin(5) + t306;
t298 = t209 * t275 - t213 * t271;
t297 = t209 * t271 + t213 * t275;
t293 = qJD(1) * t267 - t255 * t278;
t199 = pkin(4) * t294 + t330;
t124 = -pkin(4) * t158 + t331;
t96 = -pkin(4) * t136 + t177;
t290 = t272 * t38 + t276 * t44 + t95 * t339 - t340 * t99;
t138 = -pkin(5) * t296 + t199;
t106 = -pkin(5) * t299 + t184;
t72 = pkin(5) * t404 + t141;
t66 = qJD(5) * t157 - t276 * t158 - t272 * t159;
t65 = qJD(5) * t299 + t272 * t158 - t276 * t159;
t39 = pkin(5) * t66 + t124;
t22 = pkin(5) * t46 + t96;
t13 = qJD(6) * t92 + t271 * t65 + t275 * t66;
t12 = -qJD(6) * t91 - t271 * t66 + t275 * t65;
t7 = -pkin(10) * t66 + t290;
t6 = pkin(5) * t345 - pkin(10) * t65 - qJD(5) * t386 + t317;
t4 = -t15 * t271 + t383;
t1 = [0, 0, 0, 0.2e1 * t278 * t259, t349 * t402, t363, -t364, 0, -pkin(7) * t363 + t274 * t312, pkin(7) * t364 + t278 * t312, t193 * t367 + (t324 - t326) * t235 (-t233 * t277 - t235 * t273) * t344 + (-t377 - t194 * t277 + (t233 * t273 - t235 * t277) * qJD(3)) * t274, t255 * t326 - t193 * t278 + (t235 * t274 + t277 * t293) * qJD(2), t255 * t325 + t194 * t278 + (-t233 * t274 - t273 * t293) * qJD(2) (-t255 - t347) * t345 -(-t239 * t343 + t354) * t255 + (t245 * t341 + pkin(7) * t194 + (qJD(1) * t229 + t186) * qJD(2)) * t274 + ((pkin(7) * t233 + t374) * qJD(2) + (t370 + (pkin(7) * t255 + t246) * t277) * qJD(3) + t356) * t278 (-pkin(7) * t278 * t343 + t355) * t255 + t292 * t278 + (pkin(7) * t193 - t245 * t343) * t274 + ((pkin(7) * t235 + t373) * t278 + (-pkin(7) * t372 - qJD(1) * t352 - t187) * t274) * qJD(2), -t122 * t137 + t123 * t136 + t158 * t79 + t159 * t78 + t178 * t48 - t207 * t35 + t208 * t34 + t295 * t49, t34 * t122 + t35 * t123 + t177 * t350 + t191 * t331 + t78 * t48 + t79 * t49, t157 * t45 + t404 * t65, t119 * t65 - t157 * t46 + t299 * t45 - t404 * t66, -t248 * t65 - t278 * t45 + (qJD(1) * t157 + t404) * t345, t248 * t66 + t278 * t46 + (qJD(1) * t299 + t119) * t345 (-t248 - t347) * t345, -t317 * t248 - t319 * t278 - t124 * t119 + t184 * t46 - t96 * t299 + t128 * t66 + (t19 * t278 + t248 * t386) * qJD(5) + (qJD(1) * t315 + t18) * t345, t290 * t248 - t313 * t278 + t124 * t404 + t184 * t45 + t96 * t157 + t128 * t65 + (-qJD(1) * t386 - t19) * t345, t12 * t51 + t8 * t92, t12 * t55 - t13 * t51 + t283 * t92 - t8 * t91, -t12 * t240 - t278 * t8 + (qJD(1) * t92 + t51) * t345, t13 * t240 - t278 * t283 + (-qJD(1) * t91 + t55) * t345 (-t240 - t347) * t345 -(-t271 * t7 + t275 * t6) * t240 - t329 * t278 - t39 * t55 - t106 * t283 + t22 * t91 + t67 * t13 + (t240 * t302 + t278 * t5) * qJD(6) + ((-t271 * t33 + t275 * t30) * qJD(1) + t4) * t345, t106 * t8 - t11 * t278 + t67 * t12 + t22 * t92 + t39 * t51 + ((-qJD(6) * t33 + t6) * t240 + t2 * t278) * t271 + ((qJD(6) * t30 + t7) * t240 + t320 * t278) * t275 + (-qJD(1) * t302 - t5) * t345; 0, 0, 0, -t274 * t365, t349 * t280, 0, 0, 0, t280 * pkin(1) * t274, pkin(1) * t365, -t235 * t372 + t377 (t193 + t376) * t277 + (-t194 + t375) * t273, -t255 * t341 + (t255 * t366 + t274 * t308) * qJD(1), t255 * t343 + (-t255 * t368 + t274 * t309) * qJD(1), t255 * t348, -pkin(2) * t194 + t353 * t255 + (pkin(8) * t372 + t374) * qJD(3) + ((-pkin(8) * t346 - t186) * t274 + (-pkin(7) * t309 - t374) * t278) * qJD(1), -pkin(2) * t193 - t219 * t255 + (-pkin(8) * t255 * t273 + t373) * qJD(3) + (-t245 * t366 + (-pkin(8) * t336 + t187) * t274 + (t255 * t367 + t278 * t308) * pkin(7)) * qJD(1), t136 * t190 - t137 * t189 + t359 * t178 - t227 * t34 - t294 * t35 + t358 * t295 + t415 * t79 - t424 * t78, t177 * t330 + t34 * t189 + t35 * t190 + t191 * t409 + t358 * t79 + t359 * t78, t45 * t176 + t362 * t404, t119 * t362 - t176 * t46 + t296 * t45 - t361 * t404, -t362 * t248 + (qJD(2) * t176 - t404) * t348, t361 * t248 + (qJD(2) * t296 - t119) * t348, t248 * t348, -t96 * t296 + t199 * t46 + (t165 * t339 + (qJD(5) * t164 + t410) * t272 - t400) * t248 + t361 * t128 - t357 * t119 + (qJD(2) * t310 - t18) * t348, t96 * t176 + t199 * t45 + t395 * t248 + t362 * t128 + t357 * t404 + (-qJD(2) * t360 + t19) * t348, t8 * t114 + t391 * t51, -t113 * t8 + t114 * t283 - t390 * t51 + t391 * t55, -t391 * t240 + (qJD(2) * t114 - t51) * t348, t390 * t240 + (-qJD(2) * t113 - t55) * t348, t240 * t348, t22 * t113 - t138 * t283 + t390 * t67 - t387 * t55 + (t271 * t305 + t275 * t304) * t240 + ((-t271 * t71 + t275 * t70) * qJD(2) - t4) * t348, t22 * t114 + t138 * t8 + t391 * t67 + t387 * t51 + (-t271 * t304 + t275 * t305) * t240 + (-(t271 * t70 + t275 * t71) * qJD(2) + t5) * t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235 * t233, -t233 ^ 2 + t235 ^ 2, t193 - t376, -t194 - t375, t259, -t187 * t255 - t235 * t245 + t286, -t186 * t255 + t233 * t245 - t281 (t136 * t269 - t137 * t270) * pkin(3) + (-t89 + t78) * t295 + (-t79 - t88) * t178, -t78 * t88 - t79 * t89 + (-t191 * t235 + t269 * t35 + t270 * t34) * pkin(3), -t425, t423, t426, t418, t259, t119 * t141 + t248 * t396 + t306 * t259 + t414, -t141 * t404 - t213 * t259 + t248 * t397 + t422, -t411, t407, t406, t403, t259, t298 * t259 + t72 * t55 + (t271 * t380 + t275 * t381) * t240 + (t240 * t297 - t5) * qJD(6) + t428, -t297 * t259 - t275 * t3 - t72 * t51 + (-t271 * t381 + t275 * t380) * t240 + (t240 * t298 - t383) * qJD(6) + t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t178 ^ 2 - t295 ^ 2, -t178 * t78 - t295 * t79 + t177, 0, 0, 0, 0, 0, t46 - t379, t45 - t378, 0, 0, 0, 0, 0, -t283 - t385, t8 - t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t425, t423, t426, t418, t259, -t19 * t248 + t414, -t18 * t248 + t422, -t411, t407, t406, t403, t259 (-t14 * t271 - t382) * t240 + (t240 * t338 + t259 * t275 + t404 * t55) * pkin(5) + t405 (t15 * t240 - t2) * t271 + (-t14 * t240 - t320) * t275 + (t240 * t337 - t259 * t271 - t404 * t51) * pkin(5) + t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t411, t407, t406, t403, t259, -t240 * t5 + t405, -t240 * t4 - t275 * t320 + t431;];
tauc_reg  = t1;
