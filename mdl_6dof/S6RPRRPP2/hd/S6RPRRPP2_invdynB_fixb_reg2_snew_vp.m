% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:22:57
% EndTime: 2019-05-05 21:23:29
% DurationCPUTime: 27.26s
% Computational Cost: add. (37716->663), mult. (73061->876), div. (0->0), fcn. (46353->8), ass. (0->470)
t854 = sin(qJ(4));
t857 = cos(qJ(4));
t855 = sin(qJ(3));
t901 = qJD(1) * t855;
t804 = qJD(3) * t854 + t857 * t901;
t858 = cos(qJ(3));
t900 = qJD(1) * t858;
t834 = -qJD(4) + t900;
t895 = qJD(1) * qJD(3);
t889 = t858 * t895;
t894 = qJDD(1) * t855;
t809 = t889 + t894;
t884 = -t857 * qJDD(3) + t854 * t809;
t868 = (qJD(4) + t834) * t804 + t884;
t802 = -t857 * qJD(3) + t854 * t901;
t873 = -t854 * qJDD(3) - t857 * t809;
t867 = qJD(4) * t802 + t873;
t910 = t834 * t802;
t971 = t910 + t867;
t1050 = -t854 * t868 + t971 * t857;
t596 = t971 * t854 + t857 * t868;
t798 = t804 ^ 2;
t957 = t802 ^ 2;
t704 = -t957 - t798;
t536 = t596 * t858 - t704 * t855;
t850 = sin(pkin(9));
t851 = cos(pkin(9));
t483 = t1050 * t851 + t536 * t850;
t486 = -t1050 * t850 + t536 * t851;
t856 = sin(qJ(1));
t859 = cos(qJ(1));
t436 = t483 * t859 + t486 * t856;
t1123 = pkin(6) * t436;
t1114 = t483 * t856 - t486 * t859;
t1122 = pkin(6) * t1114;
t1121 = -pkin(1) * t483 - pkin(7) * t536;
t750 = t804 * t802;
t839 = t855 * t895;
t893 = qJDD(1) * t858;
t810 = -t839 + t893;
t799 = -qJDD(4) + t810;
t978 = -t750 + t799;
t1001 = t978 * t857;
t956 = t834 ^ 2;
t969 = t957 - t956;
t1023 = -t854 * t969 + t1001;
t1046 = t1023 * t851;
t1002 = t978 * t854;
t1022 = t857 * t969 + t1002;
t1048 = t1022 * t858;
t582 = t868 * t855 - t1048;
t523 = t582 * t850 - t1046;
t1047 = t1023 * t850;
t529 = t582 * t851 + t1047;
t1120 = t523 * t859 + t529 * t856;
t1119 = t523 * t856 - t529 * t859;
t1117 = qJ(2) * t483;
t1116 = pkin(2) * t1050 - t1121;
t533 = t596 * t855 + t704 * t858;
t1115 = -pkin(1) * t533 + qJ(2) * t486;
t977 = t750 + t799;
t1004 = t977 * t854;
t768 = t798 - t956;
t1025 = t768 * t857 + t1004;
t1003 = t977 * t857;
t1024 = t768 * t854 - t1003;
t1042 = t1024 * t858 - t855 * t971;
t1053 = -t1025 * t850 + t1042 * t851;
t1054 = t1025 * t851 + t1042 * t850;
t1074 = t1053 * t859 - t1054 * t856;
t1073 = t1053 * t856 + t1054 * t859;
t897 = qJD(4) - t834;
t677 = t804 * t897 + t884;
t972 = t910 - t867;
t935 = t972 * t854;
t599 = -t677 * t857 - t935;
t747 = t798 - t957;
t919 = t747 * t855;
t557 = t599 * t858 + t919;
t1028 = t857 * t972;
t591 = -t677 * t854 + t1028;
t491 = t557 * t850 - t591 * t851;
t494 = t557 * t851 + t591 * t850;
t1113 = t491 * t859 + t494 * t856;
t1112 = t491 * t856 - t494 * t859;
t1110 = pkin(7) * t533;
t970 = -t956 - t957;
t1021 = t854 * t970 - t1003;
t1031 = t850 * t1021;
t1020 = t857 * t970 + t1004;
t1027 = t858 * t1020;
t728 = qJD(4) * t804 + t884;
t778 = t804 * t834;
t675 = t728 - t778;
t1060 = t675 * t855 + t1027;
t1077 = t1060 * t851 + t1031;
t1030 = t851 * t1021;
t1078 = t1060 * t850 - t1030;
t1092 = t1077 * t856 + t1078 * t859;
t1108 = pkin(6) * t1092;
t1093 = t1077 * t859 - t1078 * t856;
t1107 = pkin(6) * t1093;
t974 = t798 + t956;
t628 = t974 * t854 + t1001;
t1064 = t628 * t858;
t1055 = -t972 * t855 - t1064;
t625 = -t974 * t857 + t1002;
t1067 = t625 * t850;
t1075 = t1055 * t851 - t1067;
t1066 = t625 * t851;
t1076 = t1055 * t850 + t1066;
t1094 = t1075 * t856 + t1076 * t859;
t1106 = pkin(6) * t1094;
t1095 = t1075 * t859 - t1076 * t856;
t1105 = pkin(6) * t1095;
t1104 = pkin(2) * t533 + pkin(3) * t704 + pkin(8) * t596;
t1102 = qJ(2) * t1076;
t1101 = qJ(2) * t1078;
t1049 = t1022 * t855;
t1100 = t868 * t858 + t1049;
t1072 = pkin(2) * t625;
t1099 = pkin(1) * t1076 + pkin(7) * t1055 + t1072;
t1041 = pkin(2) * t1021;
t1098 = pkin(1) * t1078 + pkin(7) * t1060 - t1041;
t1065 = t628 * t855;
t1056 = t858 * t972 - t1065;
t1097 = -pkin(1) * t1056 + qJ(2) * t1075;
t1029 = t855 * t1020;
t1061 = -t858 * t675 + t1029;
t1096 = -pkin(1) * t1061 + qJ(2) * t1077;
t1088 = pkin(7) * t1056;
t1087 = pkin(7) * t1061;
t1068 = pkin(8) * t1050;
t1084 = -pkin(3) * t1050 + qJ(5) * t868;
t1038 = pkin(8) * t1020;
t1082 = -pkin(2) * t1061 - t1038;
t1069 = pkin(8) * t628;
t1081 = -pkin(2) * t1056 + t1069;
t1043 = t1024 * t855 + t858 * t971;
t1071 = pkin(3) * t625;
t1070 = pkin(8) * t625;
t1039 = pkin(3) * t1021;
t1059 = -qJ(5) * t970 - t1039;
t1058 = qJ(5) * t978 + t1071;
t734 = t858 * t747;
t1057 = t599 * t855 - t734;
t1037 = pkin(8) * t1021;
t1036 = qJ(5) * t704;
t1035 = qJ(5) * t972;
t1034 = qJ(6) * t971;
t824 = g(1) * t859 + g(2) * t856;
t860 = qJD(1) ^ 2;
t806 = -pkin(1) * t860 - t824;
t823 = g(1) * t856 - t859 * g(2);
t872 = qJDD(1) * pkin(1) + t823;
t732 = t850 * t806 - t851 * t872;
t733 = t851 * t806 + t850 * t872;
t886 = t732 * t850 + t851 * t733;
t636 = t732 * t851 - t733 * t850;
t946 = t636 * t856;
t559 = t859 * t886 + t946;
t945 = t636 * t859;
t1026 = -t856 * t886 + t945;
t812 = qJDD(1) * t850 + t851 * t860;
t906 = g(3) - qJDD(2);
t775 = -qJ(2) * t812 + t851 * t906;
t813 = qJDD(1) * t851 - t850 * t860;
t960 = -qJ(2) * t813 - t850 * t906;
t975 = t859 * t812 + t813 * t856;
t1019 = -pkin(6) * t975 + t775 * t859 + t856 * t960;
t741 = t855 * t750;
t909 = t834 * t854;
t760 = t804 * t909;
t903 = -t857 * t867 + t760;
t963 = t858 * t903 + t741;
t908 = t834 * t857;
t761 = t804 * t908;
t973 = t854 * t867 + t761;
t991 = t850 * t963 + t851 * t973;
t992 = -t850 * t973 + t851 * t963;
t989 = t856 * t992 + t859 * t991;
t990 = -t856 * t991 + t859 * t992;
t892 = t802 * t909;
t870 = t728 * t857 + t892;
t891 = t802 * t908;
t871 = t728 * t854 - t891;
t964 = t858 * t871 - t741;
t996 = -t850 * t870 + t851 * t964;
t998 = t850 * t964 + t851 * t870;
t1018 = -t856 * t998 + t859 * t996;
t1017 = t856 * t996 + t859 * t998;
t877 = -t761 - t892;
t878 = -t760 + t891;
t916 = t799 * t855;
t958 = t858 * t878 - t916;
t997 = -t850 * t877 + t851 * t958;
t999 = t850 * t958 + t851 * t877;
t1016 = -t856 * t999 + t859 * t997;
t1015 = t856 * t997 + t859 * t999;
t737 = -t812 * t856 + t859 * t813;
t1014 = -pkin(6) * t737 - t775 * t856 + t859 * t960;
t714 = -pkin(2) * t860 + qJDD(1) * pkin(7) + t733;
t951 = pkin(3) * t858;
t880 = -pkin(8) * t855 - t951;
t807 = t880 * qJD(1);
t838 = t858 * t906;
t954 = qJD(3) ^ 2;
t638 = (qJD(1) * t807 + t714) * t855 - qJDD(3) * pkin(3) - t954 * pkin(8) + t838;
t1000 = t728 * pkin(4) - t1035 + t638;
t899 = qJD(5) * t834;
t822 = 0.2e1 * t899;
t898 = qJD(6) * t802;
t976 = -0.2e1 * t898 + t822;
t759 = pkin(5) * t834 - qJ(6) * t804;
t968 = t804 * t759 + qJDD(6);
t966 = -t728 * pkin(5) + t968;
t742 = t858 * t750;
t962 = t855 * t871 + t742;
t905 = t855 * t903 - t742;
t782 = t858 * t799;
t961 = t855 * t878 + t782;
t955 = 0.2e1 * t804;
t953 = pkin(4) + pkin(5);
t952 = pkin(3) * t855;
t950 = pkin(4) * t857;
t944 = t638 * t854;
t943 = t638 * t857;
t940 = t675 * t857;
t713 = -qJDD(1) * pkin(2) - t860 * pkin(7) + t732;
t923 = t713 * t855;
t922 = t713 * t858;
t833 = t858 * t860 * t855;
t819 = -t833 + qJDD(3);
t913 = t819 * t855;
t912 = t819 * t858;
t820 = qJDD(3) + t833;
t911 = t820 * t855;
t846 = t855 ^ 2;
t907 = t846 * t860;
t875 = -t810 + t839;
t876 = t809 + t889;
t624 = pkin(3) * t875 - pkin(8) * t876 + t713;
t691 = t858 * t714 - t855 * t906;
t639 = -pkin(3) * t954 + qJDD(3) * pkin(8) + t807 * t900 + t691;
t553 = t854 * t624 + t857 * t639;
t847 = t858 ^ 2;
t902 = t846 + t847;
t888 = qJ(5) * t854 + pkin(3);
t736 = pkin(4) * t802 - qJ(5) * t804;
t887 = -pkin(5) * t802 - t736;
t552 = -t857 * t624 + t854 * t639;
t689 = t855 * t714 + t838;
t603 = t689 * t855 + t858 * t691;
t752 = -t823 * t856 - t859 * t824;
t882 = t850 * t833;
t881 = t851 * t833;
t816 = qJDD(1) * t859 - t856 * t860;
t879 = -pkin(6) * t816 - g(3) * t856;
t874 = pkin(4) * t956 + t799 * qJ(5) + t802 * t736 - t553;
t477 = -t552 * t857 + t553 * t854;
t478 = t552 * t854 + t553 * t857;
t602 = t689 * t858 - t691 * t855;
t751 = t823 * t859 - t824 * t856;
t821 = -0.2e1 * t899;
t502 = t821 - t874;
t869 = t799 * pkin(4) - qJ(5) * t956 + qJDD(5) + t552;
t866 = pkin(5) * t957 + t834 * t759 + t874;
t865 = t736 * t804 + t869;
t863 = t799 * pkin(5) + t1034 + t869;
t862 = -t728 * qJ(6) + t866;
t861 = qJD(5) * t955 - t1000;
t475 = (-0.2e1 * qJD(6) - t887) * t804 + t863;
t530 = (-pkin(4) * t834 - 0.2e1 * qJD(5)) * t804 + t1000;
t498 = (-t675 + t778) * pkin(4) + t861;
t497 = pkin(4) * t778 + t1035 + t861;
t844 = t847 * t860;
t830 = -t844 - t954;
t829 = t844 - t954;
t828 = -t907 - t954;
t827 = -t907 + t954;
t818 = t844 - t907;
t817 = t844 + t907;
t815 = qJDD(1) * t856 + t859 * t860;
t814 = t902 * qJDD(1);
t811 = -0.2e1 * t839 + t893;
t808 = 0.2e1 * t889 + t894;
t801 = t858 * t820;
t800 = t902 * t895;
t781 = -pkin(6) * t815 + g(3) * t859;
t765 = t809 * t858 - t846 * t895;
t764 = -t810 * t855 - t847 * t895;
t763 = qJDD(3) * t850 + t800 * t851;
t762 = -qJDD(3) * t851 + t800 * t850;
t758 = -t828 * t855 - t912;
t757 = -t827 * t855 + t801;
t756 = t830 * t858 - t911;
t755 = t829 * t858 - t913;
t754 = t828 * t858 - t913;
t753 = t830 * t855 + t801;
t744 = t814 * t851 - t817 * t850;
t743 = t814 * t850 + t817 * t851;
t735 = -t808 * t855 + t811 * t858;
t726 = t765 * t851 - t882;
t725 = t764 * t851 + t882;
t724 = t765 * t850 + t881;
t723 = t764 * t850 - t881;
t722 = t757 * t851 + t850 * t894;
t721 = t755 * t851 + t850 * t893;
t720 = t757 * t850 - t851 * t894;
t719 = t755 * t850 - t851 * t893;
t701 = t758 * t851 + t808 * t850;
t700 = t756 * t851 - t811 * t850;
t699 = t758 * t850 - t808 * t851;
t698 = t756 * t850 + t811 * t851;
t696 = (t802 * t857 - t804 * t854) * t834;
t693 = (-t802 * t854 - t804 * t857) * t834;
t690 = t735 * t851 - t818 * t850;
t688 = t735 * t850 + t818 * t851;
t684 = t802 * t897 + t873;
t674 = t728 + t778;
t661 = -t743 * t856 + t744 * t859;
t660 = t743 * t859 + t744 * t856;
t655 = t696 * t858 - t916;
t653 = -pkin(7) * t754 + t922;
t646 = -pkin(7) * t753 + t923;
t632 = -pkin(2) * t754 + t691;
t631 = -pkin(2) * t753 + t689;
t623 = pkin(1) * t906 + qJ(2) * t886;
t608 = -t699 * t856 + t701 * t859;
t607 = -t698 * t856 + t700 * t859;
t606 = t699 * t859 + t701 * t856;
t605 = t698 * t859 + t700 * t856;
t604 = -qJ(5) * t675 - qJ(6) * t977;
t595 = t940 + t935;
t589 = -t675 * t854 + t1028;
t587 = t655 * t851 - t693 * t850;
t584 = t655 * t850 + t693 * t851;
t580 = -t674 * t855 + t1048;
t574 = -t684 * t855 + t1064;
t571 = t684 * t858 + t1065;
t570 = -qJ(2) * t743 + t602 * t851;
t569 = qJ(2) * t744 + t602 * t850;
t568 = t677 * t855 + t1027;
t565 = -t677 * t858 + t1029;
t562 = t603 * t851 + t713 * t850;
t561 = t603 * t850 - t713 * t851;
t560 = t943 - t1070;
t555 = t595 * t858 - t919;
t554 = qJ(6) * t978 + t953 * t972;
t551 = t944 - t1037;
t532 = -qJ(2) * t699 - t632 * t850 + t653 * t851;
t531 = -qJ(2) * t698 - t631 * t850 + t646 * t851;
t527 = t580 * t851 - t1047;
t521 = t580 * t850 + t1046;
t515 = t574 * t851 + t1067;
t512 = t574 * t850 - t1066;
t511 = -pkin(1) * t754 + qJ(2) * t701 + t632 * t851 + t653 * t850;
t510 = -pkin(1) * t753 + qJ(2) * t700 + t631 * t851 + t646 * t850;
t508 = t568 * t851 + t1031;
t505 = t568 * t850 - t1030;
t501 = t553 - t1071;
t500 = -pkin(4) * t971 + t1084;
t499 = t552 - t1039;
t496 = t865 - t1036;
t495 = -pkin(4) * t704 + t502;
t492 = t555 * t851 - t589 * t850;
t489 = t555 * t850 + t589 * t851;
t482 = t953 * t971 - t1084;
t481 = qJ(6) * t957 + t530 - t966;
t480 = -t561 * t856 + t562 * t859;
t479 = t561 * t859 + t562 * t856;
t476 = t821 - t862 + 0.2e1 * t898;
t474 = -pkin(2) * t571 - pkin(3) * t684 - t1069 - t944;
t473 = -pkin(2) * t565 + pkin(3) * t677 - t1038 + t943;
t472 = -qJ(2) * t561 - (pkin(2) * t850 - pkin(7) * t851) * t602;
t471 = pkin(4) * t977 + t1059 + t865;
t470 = t497 + (t974 - t957) * qJ(6) + t966;
t469 = -pkin(4) * t974 + t1058 + t822 + t874;
t468 = -qJ(5) * t940 - t498 * t854 - t1037;
t467 = t478 * t858 + t638 * t855;
t466 = t478 * t855 - t638 * t858;
t465 = -pkin(4) * t935 + t497 * t857 + t1070;
t464 = qJD(6) * t955 + t804 * t887 - t1034 + t1036 - t863;
t463 = -t477 - t1068;
t462 = (-t970 - t957) * qJ(6) + (-t675 - t728) * pkin(5) + t498 + t968;
t459 = -t512 * t856 + t515 * t859;
t456 = t512 * t859 + t515 * t856;
t455 = t502 * t857 + t854 * t865;
t454 = t502 * t854 - t857 * t865;
t453 = t953 * t704 + (-t868 - t728) * qJ(6) + t866 + t976;
t452 = -t505 * t856 + t508 * t859;
t449 = t505 * t859 + t508 * t856;
t446 = qJ(2) * t562 - (-pkin(2) * t851 - pkin(7) * t850 - pkin(1)) * t602;
t445 = -t953 * t974 + t1058 + t862 + t976;
t444 = -pkin(7) * t571 - t501 * t855 + t560 * t858;
t443 = t953 * t977 + t1059 + t475;
t442 = -pkin(7) * t565 - t499 * t855 + t551 * t858;
t435 = -t857 * t498 + t675 * t888 + t1082;
t434 = -t854 * t497 + (-pkin(3) - t950) * t972 + t1081;
t433 = t470 * t857 - t554 * t854 + t1070;
t432 = -t462 * t854 + t604 * t857 - t1037;
t431 = -qJ(5) * t481 - qJ(6) * t475;
t430 = t1104 - t478;
t429 = -t495 * t854 + t496 * t857 - t1068;
t428 = t455 * t858 + t530 * t855;
t427 = t455 * t855 - t530 * t858;
t426 = t475 * t854 + t476 * t857;
t425 = -t475 * t857 + t476 * t854;
t424 = t467 * t851 + t477 * t850;
t423 = t467 * t850 - t477 * t851;
t422 = t1050 * t952 + t463 * t858 + t1110;
t421 = -pkin(2) * t466 + pkin(3) * t638 - pkin(8) * t478;
t420 = -pkin(3) * t972 - t470 * t854 - t554 * t857 + t1081;
t419 = pkin(3) * t675 - t462 * t857 - t604 * t854 + t1082;
t418 = -t495 * t857 - t496 * t854 + t1104;
t417 = -pkin(8) * t454 + (pkin(4) * t854 - qJ(5) * t857) * t530;
t416 = t468 * t858 - t471 * t855 - t1087;
t415 = -qJ(6) * t476 - t481 * t953;
t414 = -pkin(3) * t454 + pkin(4) * t865 - qJ(5) * t502;
t413 = t465 * t858 - t469 * t855 - t1088;
t412 = t426 * t858 + t481 * t855;
t411 = t426 * t855 - t481 * t858;
t410 = -t453 * t854 + t464 * t857 + t1068;
t409 = -pkin(7) * t466 + (-pkin(8) * t858 + t952) * t477;
t408 = t429 * t858 - t500 * t855 + t1110;
t407 = -qJ(2) * t512 + t444 * t851 - t474 * t850;
t406 = t428 * t851 + t454 * t850;
t405 = t428 * t850 - t454 * t851;
t404 = -qJ(2) * t505 + t442 * t851 - t473 * t850;
t403 = -t453 * t857 - t464 * t854 - t1104;
t402 = -pkin(1) * t571 + qJ(2) * t515 + t444 * t850 + t474 * t851;
t401 = t433 * t858 - t445 * t855 - t1088;
t400 = -pkin(1) * t565 + qJ(2) * t508 + t442 * t850 + t473 * t851;
t399 = t432 * t858 - t443 * t855 - t1087;
t398 = -t423 * t856 + t424 * t859;
t397 = t423 * t859 + t424 * t856;
t396 = t410 * t858 - t482 * t855 - t1110;
t395 = t412 * t851 + t425 * t850;
t394 = t412 * t850 - t425 * t851;
t393 = t422 * t851 - t430 * t850 + t1117;
t392 = -pkin(3) * t425 - qJ(5) * t476 + t475 * t953;
t391 = t416 * t851 - t435 * t850 - t1101;
t390 = -pkin(2) * t427 - pkin(8) * t455 + (t888 + t950) * t530;
t389 = t413 * t851 - t434 * t850 - t1102;
t388 = t422 * t850 + t430 * t851 - t1115;
t387 = t416 * t850 + t435 * t851 + t1096;
t386 = t413 * t850 + t434 * t851 + t1097;
t385 = -pkin(8) * t425 - t415 * t854 + t431 * t857;
t384 = t408 * t851 - t418 * t850 + t1117;
t383 = -t405 * t856 + t406 * t859;
t382 = t405 * t859 + t406 * t856;
t381 = t401 * t851 - t420 * t850 - t1102;
t380 = t399 * t851 - t419 * t850 - t1101;
t379 = t408 * t850 + t418 * t851 - t1115;
t378 = t401 * t850 + t420 * t851 + t1097;
t377 = -pkin(7) * t427 - t414 * t855 + t417 * t858;
t376 = t399 * t850 + t419 * t851 + t1096;
t375 = -qJ(2) * t423 + t409 * t851 - t421 * t850;
t374 = -pkin(1) * t466 + qJ(2) * t424 + t409 * t850 + t421 * t851;
t373 = t396 * t851 - t403 * t850 - t1117;
t372 = t396 * t850 + t403 * t851 + t1115;
t371 = -t394 * t856 + t395 * t859;
t370 = t394 * t859 + t395 * t856;
t369 = -pkin(2) * t411 + pkin(3) * t481 - pkin(8) * t426 - t415 * t857 - t431 * t854;
t368 = -pkin(7) * t411 + t385 * t858 - t392 * t855;
t367 = -qJ(2) * t405 + t377 * t851 - t390 * t850;
t366 = -pkin(1) * t427 + qJ(2) * t406 + t377 * t850 + t390 * t851;
t365 = -qJ(2) * t394 + t368 * t851 - t369 * t850;
t364 = -pkin(1) * t411 + qJ(2) * t395 + t368 * t850 + t369 * t851;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t815, -t816, 0, t752, 0, 0, 0, 0, 0, 0, -t975, -t737, 0, t559, 0, 0, 0, 0, 0, 0, t607, t608, t661, t480, 0, 0, 0, 0, 0, 0, t452, t459, t1114, t398, 0, 0, 0, 0, 0, 0, t1093, t1114, t1095, t383, 0, 0, 0, 0, 0, 0, t1093, t1095, -t1114, t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t816, -t815, 0, t751, 0, 0, 0, 0, 0, 0, t737, -t975, 0, -t1026, 0, 0, 0, 0, 0, 0, t605, t606, t660, t479, 0, 0, 0, 0, 0, 0, t449, t456, -t436, t397, 0, 0, 0, 0, 0, 0, t1092, -t436, t1094, t382, 0, 0, 0, 0, 0, 0, t1092, t1094, t436, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, 0, 0, 0, 0, 0, 0, t753, t754, 0, -t602, 0, 0, 0, 0, 0, 0, t565, t571, -t533, t466, 0, 0, 0, 0, 0, 0, t1061, -t533, t1056, t427, 0, 0, 0, 0, 0, 0, t1061, t1056, t533, t411; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t816, 0, -t815, 0, t879, -t781, -t751, -pkin(6) * t751, 0, 0, t737, 0, -t975, 0, t1014, -t1019, t1026, pkin(6) * t1026 + qJ(2) * t945 - t623 * t856, -t724 * t856 + t726 * t859, -t688 * t856 + t690 * t859, -t720 * t856 + t722 * t859, -t723 * t856 + t725 * t859, -t719 * t856 + t721 * t859, -t762 * t856 + t763 * t859, -pkin(6) * t605 - t510 * t856 + t531 * t859, -pkin(6) * t606 - t511 * t856 + t532 * t859, -pkin(6) * t660 - t569 * t856 + t570 * t859, -pkin(6) * t479 - t446 * t856 + t472 * t859, t990, -t1112, t1074, t1018, t1119, t1016, -pkin(6) * t449 - t400 * t856 + t404 * t859, -pkin(6) * t456 - t402 * t856 + t407 * t859, -t388 * t856 + t393 * t859 + t1123, -pkin(6) * t397 - t374 * t856 + t375 * t859, t990, t1074, t1112, t1016, -t1119, t1018, -t387 * t856 + t391 * t859 - t1108, -t379 * t856 + t384 * t859 + t1123, -t386 * t856 + t389 * t859 - t1106, -pkin(6) * t382 - t366 * t856 + t367 * t859, t990, -t489 * t856 + t492 * t859, -t1074, t1018, -t521 * t856 + t527 * t859, -t584 * t856 + t587 * t859, -t376 * t856 + t380 * t859 - t1108, -t378 * t856 + t381 * t859 - t1106, -t372 * t856 + t373 * t859 - t1123, -pkin(6) * t370 - t364 * t856 + t365 * t859; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t815, 0, t816, 0, t781, t879, t752, pkin(6) * t752, 0, 0, t975, 0, t737, 0, t1019, t1014, t559, pkin(6) * t559 + qJ(2) * t946 + t623 * t859, t724 * t859 + t726 * t856, t688 * t859 + t690 * t856, t720 * t859 + t722 * t856, t723 * t859 + t725 * t856, t719 * t859 + t721 * t856, t762 * t859 + t763 * t856, pkin(6) * t607 + t510 * t859 + t531 * t856, pkin(6) * t608 + t511 * t859 + t532 * t856, pkin(6) * t661 + t569 * t859 + t570 * t856, pkin(6) * t480 + t446 * t859 + t472 * t856, t989, t1113, t1073, t1017, -t1120, t1015, pkin(6) * t452 + t400 * t859 + t404 * t856, pkin(6) * t459 + t402 * t859 + t407 * t856, t388 * t859 + t393 * t856 + t1122, pkin(6) * t398 + t374 * t859 + t375 * t856, t989, t1073, -t1113, t1015, t1120, t1017, t387 * t859 + t391 * t856 + t1107, t379 * t859 + t384 * t856 + t1122, t386 * t859 + t389 * t856 + t1105, pkin(6) * t383 + t366 * t859 + t367 * t856, t989, t489 * t859 + t492 * t856, -t1073, t1017, t521 * t859 + t527 * t856, t584 * t859 + t587 * t856, t376 * t859 + t380 * t856 + t1107, t378 * t859 + t381 * t856 + t1105, t372 * t859 + t373 * t856 - t1122, pkin(6) * t371 + t364 * t859 + t365 * t856; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t823, t824, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t813 - t732, -pkin(1) * t812 - t733, 0, -pkin(1) * t636, t876 * t855, t808 * t858 + t811 * t855, t827 * t858 + t911, -t875 * t858, t829 * t855 + t912, 0, pkin(1) * t698 + pkin(2) * t811 + pkin(7) * t756 - t922, pkin(1) * t699 - pkin(2) * t808 + pkin(7) * t758 + t923, pkin(1) * t743 + pkin(2) * t817 + pkin(7) * t814 + t603, pkin(1) * t561 - pkin(2) * t713 + pkin(7) * t603, t905, t1057, t1043, t962, t1100, t961, pkin(1) * t505 + pkin(7) * t568 + t499 * t858 + t551 * t855 - t1041, pkin(1) * t512 + pkin(7) * t574 + t501 * t858 + t560 * t855 - t1072, t855 * t463 + (-pkin(2) - t951) * t1050 + t1121, pkin(1) * t423 + pkin(7) * t467 + (-pkin(2) + t880) * t477, t905, t1043, -t1057, t961, -t1100, t962, t468 * t855 + t471 * t858 + t1098, t429 * t855 + t500 * t858 - t1116, t465 * t855 + t469 * t858 + t1099, pkin(1) * t405 - pkin(2) * t454 + pkin(7) * t428 + t414 * t858 + t417 * t855, t905, t595 * t855 + t734, -t1043, t962, t674 * t858 + t1049, t696 * t855 + t782, t432 * t855 + t443 * t858 + t1098, t433 * t855 + t445 * t858 + t1099, t410 * t855 + t482 * t858 + t1116, pkin(1) * t394 - pkin(2) * t425 + pkin(7) * t412 + t385 * t855 + t392 * t858;];
tauB_reg  = t1;
