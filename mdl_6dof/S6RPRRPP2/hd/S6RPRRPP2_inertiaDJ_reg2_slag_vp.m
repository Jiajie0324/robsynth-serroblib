% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP2_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:33:21
% EndTime: 2019-03-09 04:33:29
% DurationCPUTime: 2.57s
% Computational Cost: add. (1455->249), mult. (3347->376), div. (0->0), fcn. (2444->6), ass. (0->143)
t84 = sin(qJ(4));
t155 = t84 * qJ(5);
t169 = pkin(4) + pkin(5);
t86 = cos(qJ(4));
t103 = t169 * t86 + t155;
t85 = sin(qJ(3));
t150 = qJD(4) * t85;
t142 = qJ(5) * qJD(3);
t87 = cos(qJ(3));
t123 = t87 * t142;
t146 = t86 * qJD(5);
t161 = t86 * t123 + t85 * t146;
t177 = -t103 * t150 + t161;
t176 = t169 * qJD(3);
t144 = t87 * qJD(3);
t79 = t84 ^ 2;
t81 = t86 ^ 2;
t35 = (t79 + t81) * t144;
t175 = -0.2e1 * qJD(4);
t159 = t79 - t81;
t121 = qJ(6) * t144;
t76 = qJD(4) * t86;
t130 = t85 * t76;
t147 = t84 * qJD(6);
t174 = qJ(6) * t130 + t84 * t121 + t85 * t147;
t122 = qJ(5) * t150;
t38 = t84 * t144 + t130;
t173 = -t38 * pkin(4) - t84 * t122 + t161;
t149 = qJD(4) * t87;
t131 = t84 * t149;
t75 = t85 * qJD(3);
t37 = t86 * t75 + t131;
t168 = pkin(8) * t85;
t116 = -pkin(3) * t87 - t168;
t72 = -cos(pkin(9)) * pkin(1) - pkin(2);
t42 = t116 + t72;
t71 = sin(pkin(9)) * pkin(1) + pkin(7);
t167 = pkin(8) * t87;
t115 = pkin(3) * t85 - t167;
t99 = t115 * qJD(3);
t6 = t37 * t71 - t42 * t76 - t84 * t99;
t157 = qJ(5) * t86;
t110 = pkin(4) * t84 - t157;
t25 = (t110 + t71) * t85;
t148 = t84 * qJD(5);
t33 = t110 * qJD(4) - t148;
t111 = -pkin(4) * t86 - t155;
t49 = -pkin(3) + t111;
t171 = (-t49 * t87 + t168) * qJD(3) - qJD(4) * t25 - t33 * t85;
t145 = t86 * qJD(6);
t151 = qJD(4) * t84;
t163 = pkin(8) - qJ(6);
t32 = -t163 * t151 - t145;
t55 = t163 * t86;
t34 = qJD(4) * t55 - t147;
t54 = t163 * t84;
t170 = -(t54 * t86 - t55 * t84) * qJD(4) - t32 * t86 - t34 * t84;
t125 = t86 * t144;
t117 = t84 * t125;
t80 = t85 ^ 2;
t152 = qJD(4) * t80;
t17 = -0.4e1 * t85 * t117 + 0.2e1 * t159 * t152;
t46 = t159 * t175;
t89 = 0.2e1 * qJD(5);
t135 = t169 * t84;
t4 = (-t71 - t135) * t144 + t177;
t166 = t4 * t84;
t165 = t4 * t86;
t164 = t71 * t87;
t48 = t86 * t164;
t15 = t84 * t42 + t48;
t160 = pkin(8) * t35;
t158 = -t87 ^ 2 + t80;
t156 = qJ(6) * t85;
t154 = qJD(3) * t84;
t153 = qJD(3) * t86;
t143 = t87 * qJD(5);
t141 = pkin(3) * t175;
t47 = t84 * t164;
t140 = 0.2e1 * qJD(3) * t72;
t139 = pkin(4) * t75;
t137 = pkin(8) * t151;
t136 = pkin(8) * t76;
t134 = t169 * t144;
t43 = pkin(3) + t103;
t133 = t43 * t76;
t132 = t71 * t152;
t129 = t86 * t149;
t128 = t84 * t76;
t127 = t85 * t144;
t126 = t71 * t75;
t124 = t71 * t144;
t14 = t42 * t86 - t47;
t120 = t158 * qJD(3);
t119 = -t84 * t126 + t71 * t129 + t42 * t151 - t86 * t99;
t118 = t80 * t128;
t11 = -qJ(5) * t87 + t15;
t10 = t84 * t156 + t11;
t77 = t87 * pkin(4);
t9 = t87 * pkin(5) + t47 + t77 + (-t42 - t156) * t86;
t113 = t10 * t86 + t84 * t9;
t112 = t10 * t84 - t86 * t9;
t12 = -t14 + t77;
t109 = t11 * t86 + t12 * t84;
t108 = -t11 * t84 + t12 * t86;
t107 = -t14 * t86 - t15 * t84;
t106 = t14 * t84 - t15 * t86;
t100 = -t135 + t157;
t28 = t100 * qJD(4) + t148;
t101 = -t43 * t151 + t28 * t86;
t13 = (-t71 + t100) * t85;
t98 = qJD(4) * t13 + t43 * t144;
t97 = -qJ(6) * t151 + t145;
t95 = -t86 * t121 + t119;
t94 = t111 * qJD(4) + t146;
t73 = t85 * t142;
t3 = t73 - t6 - t143;
t5 = t119 - t139;
t92 = t108 * qJD(4) + t3 * t86 + t5 * t84;
t91 = t107 * qJD(4) + t119 * t84 - t6 * t86;
t90 = 0.2e1 * t73 - 0.2e1 * t143 - t6;
t78 = qJ(5) * t89;
t64 = -0.2e1 * t127;
t63 = -0.2e1 * t128;
t62 = 0.2e1 * t128;
t61 = pkin(8) * t129;
t52 = t81 * t127;
t51 = t79 * t127;
t39 = -t84 * t75 + t129;
t36 = t84 * t150 - t125;
t27 = 0.2e1 * t52 - 0.2e1 * t118;
t26 = 0.2e1 * t51 + 0.2e1 * t118;
t24 = t159 * t150 - t117;
t23 = -t84 * t120 + t85 * t129;
t22 = t85 * t131 + t158 * t153;
t21 = 0.4e1 * t85 * t128 + t159 * t144;
t20 = 0.2e1 * t23;
t19 = 0.2e1 * t22;
t16 = 0.2e1 * t51 + 0.2e1 * t52 - 0.2e1 * t127;
t8 = t124 - t173;
t2 = t3 + t174;
t1 = (-t97 - t176) * t85 + t95;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t127, -0.2e1 * t120, 0, t64, 0, 0, t85 * t140, t87 * t140, 0, 0, t27, t17, t19, t26, t20, t64, 0.2e1 * t86 * t132 + 0.2e1 * t119 * t87 + 0.2e1 * (t14 + 0.2e1 * t47) * t75, -0.2e1 * t84 * t132 - 0.2e1 * t6 * t87 + 0.2e1 * (-t15 + 0.2e1 * t48) * t75, 0.2e1 * t107 * t144 + 0.2e1 * (t106 * qJD(4) + t119 * t86 + t6 * t84) * t85, 0.2e1 * t71 ^ 2 * t127 - 0.2e1 * t119 * t14 - 0.2e1 * t15 * t6, t27, t19, -t17, t64, -0.2e1 * t23, t26, 0.2e1 * (t25 * t154 + t5) * t87 + 0.2e1 * (-qJD(3) * t12 + t25 * t76 + t8 * t84) * t85, 0.2e1 * t108 * t144 + 0.2e1 * (-t109 * qJD(4) - t3 * t84 + t5 * t86) * t85, 0.2e1 * (-t153 * t25 - t3) * t87 + 0.2e1 * (qJD(3) * t11 + t151 * t25 - t8 * t86) * t85, 0.2e1 * t11 * t3 + 0.2e1 * t12 * t5 + 0.2e1 * t25 * t8, t27, -t17, -0.2e1 * t22, t26, t20, t64, 0.2e1 * (-t13 * t154 + t1) * t87 + 0.2e1 * (-qJD(3) * t9 - t13 * t76 - t166) * t85, 0.2e1 * (t13 * t153 - t2) * t87 + 0.2e1 * (qJD(3) * t10 - t13 * t151 + t165) * t85, 0.2e1 * t112 * t144 + 0.2e1 * (qJD(4) * t113 - t1 * t86 + t2 * t84) * t85, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t13 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91 * t85 + (-t106 * t87 + t158 * t71) * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(3) * t109 - t8) * t87 + (qJD(3) * t25 + t92) * t85, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(3) * t113 + t4) * t87 + (-qJD(3) * t13 - qJD(4) * t112 + t1 * t84 + t2 * t86) * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0, -t75, 0, -t124, t126, 0, 0, -t24, -t21, -t39, t24, t37, 0, t61 + (-pkin(3) * t86 + t71 * t84) * t150 + (t116 * t84 - t48) * qJD(3) (t71 * t85 * t86 + t115 * t84) * qJD(4) + (t116 * t86 + t47) * qJD(3), t91, -pkin(3) * t124 + pkin(8) * t91, -t24, -t39, t21, 0, -t37, t24, t61 + (t49 * t150 - t8) * t86 - t171 * t84, t92 (-t8 + (t49 * t85 + t167) * qJD(4)) * t84 + t171 * t86, pkin(8) * t92 + t25 * t33 + t8 * t49, -t24, t21, t39, t24, t37, 0, t34 * t87 + t165 + (-qJD(3) * t54 - t133) * t85 + (-t28 * t85 - t98) * t84, -t32 * t87 + t166 + t98 * t86 + (qJD(3) * t55 + t101) * t85 (-t54 * t144 - t34 * t85 - t2 + (t55 * t85 - t9) * qJD(4)) * t86 + (t55 * t144 + t32 * t85 - t1 + (t54 * t85 + t10) * qJD(4)) * t84, t1 * t54 + t10 * t32 + t13 * t28 + t2 * t55 + t34 * t9 + t4 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t144, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t39, t35, -pkin(3) * t75 + t160, 0, 0, 0, 0, 0, 0, -t37, t35, t39, -t33 * t87 + t49 * t75 + t160, 0, 0, 0, 0, 0, 0, -t37, t39, -t35 (t28 + (t54 * t84 + t55 * t86) * qJD(3)) * t87 + (-qJD(3) * t43 - t170) * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t46, 0, t63, 0, 0, t84 * t141, t86 * t141, 0, 0, t62, 0, -t46, 0, 0, t63, 0.2e1 * t49 * t151 - 0.2e1 * t33 * t86, 0, -0.2e1 * t33 * t84 - 0.2e1 * t49 * t76, 0.2e1 * t49 * t33, t62, -t46, 0, t63, 0, 0, 0.2e1 * t101, 0.2e1 * t28 * t84 + 0.2e1 * t133, 0.2e1 * t170, 0.2e1 * t28 * t43 + 0.2e1 * t32 * t55 + 0.2e1 * t34 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t38, t75, -t119, t6, 0, 0, 0, -t36, 0, t75, t38, 0, -t119 + 0.2e1 * t139 (-pkin(4) * t144 - t122) * t86 + (-t123 + (pkin(4) * qJD(4) - qJD(5)) * t85) * t84, t90, -pkin(4) * t5 + qJ(5) * t3 + qJD(5) * t11, 0, 0, t36, 0, -t38, t75 (t97 + 0.2e1 * t176) * t85 - t95, t90 + t174 (t122 + t134) * t86 + (t123 + (-qJD(4) * t169 + qJD(5)) * t85) * t84, qJ(5) * t2 + qJD(5) * t10 - t1 * t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t36, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, -t36, t173, 0, 0, 0, 0, 0, 0, -t38, -t36, 0, -t134 * t84 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t151, 0, -t136, t137, 0, 0, 0, t76, 0, 0, t151, 0, -t136, t94, -t137, t94 * pkin(8), 0, 0, -t76, 0, -t151, 0, -t34, t32, qJD(4) * t103 - t146, qJ(5) * t32 + qJD(5) * t55 - t169 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t78, 0, 0, 0, 0, 0, 0, 0, t89, 0, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t36, 0, t5, 0, 0, 0, 0, 0, 0, -t75, 0, t36, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t136, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t36, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, t76, 0, t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
