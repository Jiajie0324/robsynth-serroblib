% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPPR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:30:15
% EndTime: 2019-03-09 15:30:26
% DurationCPUTime: 5.85s
% Computational Cost: add. (8534->591), mult. (18515->654), div. (0->0), fcn. (12894->10), ass. (0->295)
t218 = sin(qJ(6));
t222 = cos(qJ(6));
t223 = cos(qJ(2));
t389 = cos(qJ(3));
t313 = t389 * t223;
t288 = qJD(1) * t313;
t219 = sin(qJ(3));
t220 = sin(qJ(2));
t331 = qJD(1) * t220;
t312 = t219 * t331;
t129 = -t288 + t312;
t144 = t219 * t223 + t220 * t389;
t131 = t144 * qJD(1);
t204 = t223 * pkin(2);
t195 = t204 + pkin(1);
t150 = t195 * qJD(1);
t81 = t129 * pkin(3) - t131 * qJ(4) - t150;
t273 = qJD(5) - t81;
t391 = -pkin(4) - pkin(9);
t42 = t131 * pkin(5) + t129 * t391 + t273;
t209 = qJD(2) + qJD(3);
t354 = t131 * qJ(5);
t390 = pkin(8) + pkin(7);
t151 = t390 * t220;
t146 = qJD(1) * t151;
t382 = qJD(2) * pkin(2);
t137 = -t146 + t382;
t152 = t390 * t223;
t147 = qJD(1) * t152;
t342 = t219 * t147;
t298 = -t389 * t137 + t342;
t405 = qJD(4) + t298;
t257 = -t354 + t405;
t325 = pkin(3) - t391;
t56 = -t209 * t325 + t257;
t20 = -t218 * t56 + t222 * t42;
t404 = qJD(6) + t131;
t410 = t20 * t404;
t21 = t218 * t42 + t222 * t56;
t409 = t21 * t404;
t104 = t129 * t218 + t222 * t209;
t402 = t404 * t104;
t208 = qJDD(2) + qJDD(3);
t327 = qJD(6) * t222;
t328 = qJD(6) * t218;
t302 = qJDD(1) * t389;
t323 = t220 * qJDD(1);
t279 = t219 * t323 - t223 * t302;
t99 = t209 * t144;
t74 = qJD(1) * t99 + t279;
t44 = t129 * t328 + t218 * t208 + t209 * t327 - t222 * t74;
t408 = t44 - t402;
t322 = t223 * qJDD(1);
t324 = qJD(1) * qJD(2);
t407 = t220 * t324 - t322;
t406 = t20 * t222 + t21 * t218;
t214 = qJ(2) + qJ(3);
t202 = sin(t214);
t191 = g(3) * t202;
t203 = cos(t214);
t224 = cos(qJ(1));
t345 = t203 * t224;
t221 = sin(qJ(1));
t346 = t203 * t221;
t395 = g(1) * t345 + g(2) * t346 + t191;
t306 = t223 * t324;
t102 = qJDD(2) * pkin(2) + t390 * (-t306 - t323);
t103 = t390 * t407;
t308 = qJD(3) * t389;
t330 = qJD(3) * t219;
t291 = -t389 * t102 - t219 * t103 + t137 * t330 + t147 * t308;
t200 = t208 * pkin(3);
t396 = qJDD(4) - t200;
t37 = t291 + t396;
t341 = t219 * t220;
t280 = t209 * t341;
t290 = -t209 * t288 - t219 * t322 - t220 * t302;
t73 = qJD(1) * t280 + t290;
t370 = t73 * qJ(5);
t238 = -t131 * qJD(5) + t37 + t370;
t13 = t208 * t391 + t238;
t215 = qJDD(1) * pkin(1);
t123 = t407 * pkin(2) - t215;
t30 = t74 * pkin(3) + t73 * qJ(4) - t131 * qJD(4) + t123;
t258 = qJDD(5) - t30;
t8 = -t73 * pkin(5) + t391 * t74 + t258;
t2 = qJD(6) * t20 + t222 * t13 + t218 * t8;
t7 = t222 * t8;
t3 = -qJD(6) * t21 - t218 * t13 + t7;
t403 = t2 * t222 - t3 * t218;
t97 = -t146 * t389 - t342;
t367 = pkin(2) * t308 + qJD(4) - t97;
t352 = t131 * t209;
t187 = t202 * pkin(5);
t401 = t203 * pkin(9) + t187;
t197 = t208 * qJ(4);
t199 = t209 * qJD(4);
t400 = -t197 - t199;
t305 = g(1) * t221 - g(2) * t224;
t205 = g(2) * t221;
t399 = g(1) * t224 + t205;
t126 = t129 ^ 2;
t394 = t131 ^ 2;
t78 = -t394 + t126;
t398 = -t209 ^ 2 - t394;
t67 = -qJDD(6) + t73;
t255 = t218 * t404 ^ 2 + t222 * t67;
t392 = pkin(3) + pkin(4);
t388 = pkin(2) * t220;
t387 = pkin(4) * t131;
t192 = g(3) * t203;
t385 = g(3) * t223;
t190 = t203 * pkin(3);
t189 = t203 * pkin(4);
t383 = t208 * pkin(4);
t292 = -t219 * t102 + t389 * t103 - t137 * t308 + t147 * t330;
t268 = t292 + t400;
t16 = -t74 * qJ(5) - t129 * qJD(5) + t268;
t14 = pkin(5) * t208 - t16;
t381 = t14 * t218;
t12 = t14 * t222;
t186 = pkin(2) * t219 + qJ(4);
t380 = t186 * t74;
t378 = t209 * t298;
t135 = t389 * t147;
t90 = t219 * t137 + t135;
t377 = t209 * t90;
t375 = t218 * t44;
t374 = t218 * t99;
t372 = t222 * t99;
t106 = t129 * t222 - t209 * t218;
t301 = t222 * t208 + t218 * t74;
t45 = qJD(6) * t106 + t301;
t371 = t45 * t222;
t369 = t74 * qJ(4);
t368 = -t354 + t367;
t366 = pkin(7) * qJDD(1);
t365 = t104 * t218;
t364 = t104 * t222;
t363 = t106 * t104;
t362 = t106 * t218;
t361 = t106 * t222;
t360 = t404 * t129;
t358 = t129 * qJ(5);
t357 = t129 * t104;
t356 = t129 * t106;
t355 = t129 * t209;
t353 = t131 * t129;
t143 = -t313 + t341;
t351 = t143 * t218;
t350 = t143 * t222;
t349 = t186 * t208;
t185 = t202 * qJ(4);
t348 = t202 * t221;
t347 = t202 * t224;
t344 = t218 * t221;
t343 = t218 * t224;
t340 = t221 * t222;
t339 = t222 * t224;
t338 = t224 * t390;
t337 = qJ(5) - t390;
t87 = t131 * pkin(3) + t129 * qJ(4);
t335 = t190 + t185;
t212 = t220 ^ 2;
t213 = t223 ^ 2;
t333 = t212 - t213;
t332 = t212 + t213;
t329 = qJD(6) * t404;
t321 = pkin(2) * t330;
t320 = t220 * t382;
t319 = pkin(2) * t331;
t228 = qJD(1) ^ 2;
t318 = t220 * t228 * t223;
t156 = t224 * t195;
t317 = pkin(3) * t345 + qJ(4) * t347 + t156;
t316 = t189 + t335;
t315 = t204 + t335;
t314 = -g(1) * t347 - g(2) * t348 + t192;
t311 = g(1) * t337;
t310 = g(2) * t337;
t309 = qJD(2) * t389;
t304 = t20 * t129 + t12;
t303 = g(1) * t325;
t201 = t209 * qJ(4);
t72 = t90 + t358;
t63 = -t201 - t72;
t59 = t209 * pkin(5) - t63;
t300 = t404 * t59;
t299 = -t195 - t185;
t96 = -t146 * t219 + t135;
t107 = t389 * t151 + t152 * t219;
t297 = t222 * t404;
t294 = t404 * t106;
t293 = -t143 * pkin(3) + t144 * qJ(4) + t195;
t289 = qJD(2) * t219 * t390;
t194 = -pkin(2) * t389 - pkin(3);
t287 = t220 * t306;
t76 = t96 + t358;
t286 = -t76 + t321;
t285 = -t96 + t321;
t284 = g(1) * t348 - g(2) * t347;
t283 = -g(1) * t346 + g(2) * t345;
t282 = -pkin(3) * t202 - t388;
t184 = -pkin(4) + t194;
t35 = t129 * t99 + t143 * t74;
t98 = t280 + (-t308 - t309) * t223;
t34 = -t131 * t98 - t144 * t73;
t277 = t20 * t218 - t21 * t222;
t48 = t144 * pkin(5) + t143 * t391 + t293;
t84 = -qJ(5) * t144 + t107;
t31 = -t218 * t84 + t222 * t48;
t32 = t218 * t48 + t222 * t84;
t276 = t316 + t401;
t275 = t143 * t208 + t209 * t99;
t69 = t144 * t208 - t209 * t98;
t274 = -t45 + t294;
t272 = t208 - t353;
t271 = g(2) * (pkin(4) * t345 + t317);
t270 = t390 * t309;
t83 = t319 + t87;
t269 = -qJD(6) * t42 - t13 - t192;
t267 = t299 - t190;
t266 = -0.2e1 * pkin(1) * t324 - pkin(7) * qJDD(2);
t265 = t143 * t327 + t374;
t264 = -t143 * t328 + t372;
t47 = t99 * pkin(3) + t98 * qJ(4) - t144 * qJD(4) + t320;
t108 = -t219 * t151 + t152 * t389;
t263 = -t325 * t67 - t300;
t60 = -t151 * t308 - t152 * t330 - t220 * t270 - t223 * t289;
t260 = t292 + t395;
t259 = -t291 - t314;
t256 = t218 * t67 - t297 * t404;
t46 = -t129 * pkin(5) + t131 * t391 - t87;
t254 = -t21 * t129 + t395 * t218 - t381;
t61 = qJD(3) * t108 - t220 * t289 + t223 * t270;
t253 = -t107 * t73 - t108 * t74 - t60 * t129 + t131 * t61 - t399;
t252 = -t203 * t399 - t191;
t251 = t259 - t396;
t9 = -pkin(4) * t74 + t258;
t250 = -t107 * t208 - t209 * t61 - t283;
t249 = t108 * t208 + t209 * t60 + t284;
t248 = -t81 * t129 - t260;
t227 = qJD(2) ^ 2;
t247 = -pkin(7) * t227 + 0.2e1 * t215 + t305;
t246 = pkin(1) * t228 - t366 + t399;
t245 = t150 * t131 + t259;
t244 = -t150 * t129 + t260;
t243 = t406 * t131 + t20 * t327 + t21 * t328 - t314 - t403;
t242 = t129 * t98 - t131 * t99 + t143 * t73 - t144 * t74;
t241 = t399 * t392 * t202;
t240 = -t209 * t312 - t290;
t172 = -pkin(9) + t184;
t239 = t172 * t67 - t321 * t404 - t300;
t237 = -t81 * t131 + t251;
t236 = -qJD(6) * t406 + t403;
t235 = -t375 - t371 + (t361 + t365) * qJD(6);
t234 = t240 + t355;
t58 = -pkin(4) * t129 + t273;
t233 = t129 * t58 - t16 - t395;
t232 = t370 + (-qJD(5) - t58) * t131 - t251;
t153 = qJ(4) * t346;
t155 = qJ(4) * t345;
t231 = (t205 * t325 + t224 * t303) * t202 - g(1) * (pkin(5) * t345 + t155) - g(2) * (pkin(5) * t346 + t153);
t217 = qJ(4) + pkin(5);
t181 = pkin(5) + t186;
t119 = t202 * t339 - t344;
t118 = -t202 * t343 - t340;
t117 = -t202 * t340 - t343;
t116 = t202 * t344 - t339;
t86 = t201 + t90;
t85 = t143 * qJ(5) + t108;
t82 = -pkin(3) * t209 + t405;
t75 = -pkin(4) * t143 + t293;
t70 = -t87 - t387;
t62 = -t83 - t387;
t57 = -t209 * t392 + t257;
t53 = t74 - t352;
t43 = t46 - t319;
t39 = t98 * qJ(5) - t144 * qJD(5) + t61;
t38 = -t99 * qJ(5) - t143 * qJD(5) - t60;
t33 = -pkin(4) * t99 - t47;
t29 = t218 * t46 + t222 * t72;
t28 = -t218 * t72 + t222 * t46;
t27 = t218 * t43 + t222 * t76;
t26 = -t218 * t76 + t222 * t43;
t25 = t256 + t356;
t24 = t255 - t357;
t23 = -t218 * t402 + t371;
t22 = -t106 * t297 + t375;
t17 = -t98 * pkin(5) + t391 * t99 - t47;
t15 = t238 - t383;
t6 = (t44 + t402) * t222 + (t45 + t294) * t218;
t5 = -qJD(6) * t32 + t222 * t17 - t218 * t39;
t4 = qJD(6) * t31 + t218 * t17 + t222 * t39;
t1 = [0, 0, 0, 0, 0, qJDD(1), t305, t399, 0, 0, qJDD(1) * t212 + 0.2e1 * t287, 0.2e1 * t220 * t322 - 0.2e1 * t324 * t333, qJDD(2) * t220 + t223 * t227, qJDD(1) * t213 - 0.2e1 * t287, qJDD(2) * t223 - t220 * t227, 0, t220 * t266 + t223 * t247, -t220 * t247 + t223 * t266, 0.2e1 * t332 * t366 - t399, -g(1) * (-pkin(1) * t221 + pkin(7) * t224) - g(2) * (pkin(1) * t224 + pkin(7) * t221) + (pkin(7) ^ 2 * t332 + pkin(1) ^ 2) * qJDD(1), t34, t242, t69, t35, -t275, 0, t123 * t143 + t129 * t320 - t150 * t99 - t195 * t74 + t250, t123 * t144 + t131 * t320 + t150 * t98 + t195 * t73 - t249, t143 * t292 + t144 * t291 - t298 * t98 - t90 * t99 + t253, -t292 * t108 + t90 * t60 + t291 * t107 + t298 * t61 - t123 * t195 - t150 * t320 - g(1) * (-t221 * t195 + t338) - g(2) * (t221 * t390 + t156) t34, t69, -t242, 0, t275, t35, t129 * t47 + t143 * t30 - t293 * t74 + t81 * t99 + t250, t143 * t268 + t144 * t37 - t82 * t98 - t86 * t99 + t253, -t131 * t47 - t144 * t30 - t293 * t73 + t81 * t98 + t249, -t268 * t108 + t86 * t60 - t30 * t293 + t81 * t47 + t37 * t107 + t82 * t61 - g(1) * t338 - g(2) * t317 + (-g(1) * t267 - g(2) * t390) * t221, t35, t242, -t275, t34, t69, 0, t131 * t33 + t144 * t9 + t208 * t85 - t209 * t38 - t58 * t98 - t73 * t75 + t284, t129 * t33 + t143 * t9 + t208 * t84 + t209 * t39 + t58 * t99 + t74 * t75 + t283, -t129 * t38 - t131 * t39 - t143 * t16 - t144 * t15 + t57 * t98 - t63 * t99 + t73 * t84 + t74 * t85 + t399, t15 * t84 + t57 * t39 - t16 * t85 + t63 * t38 + t9 * t75 + t58 * t33 - t271 + t224 * t311 + (-g(1) * (t267 - t189) + t310) * t221, t106 * t264 - t350 * t44 (-t362 - t364) * t99 + (t375 - t371 + (-t361 + t365) * qJD(6)) * t143, -t106 * t98 - t44 * t144 + t264 * t404 - t350 * t67, t104 * t265 + t351 * t45, t104 * t98 - t45 * t144 - t265 * t404 + t351 * t67, -t144 * t67 - t404 * t98, t59 * t374 - g(1) * t117 - g(2) * t119 - t38 * t104 + t5 * t404 + t3 * t144 - t20 * t98 - t31 * t67 + t85 * t45 + (t327 * t59 + t381) * t143, t59 * t372 - g(1) * t116 - g(2) * t118 - t38 * t106 - t4 * t404 - t2 * t144 + t21 * t98 + t32 * t67 - t85 * t44 + (-t328 * t59 + t12) * t143, -t4 * t104 - t5 * t106 + t31 * t44 - t32 * t45 - t406 * t99 + (qJD(6) * t277 - t2 * t218 - t3 * t222) * t143 - t283, t2 * t32 + t21 * t4 + t3 * t31 + t20 * t5 + t14 * t85 - t59 * t38 - t271 + (-g(2) * t401 + t311) * t224 + (-g(1) * (t299 - t187) + t310 + t203 * t303) * t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, t333 * t228, t323, t318, t322, qJDD(2), t220 * t246 - t385, g(3) * t220 + t223 * t246, 0, 0, t353, -t78, t234, -t353, -t279, t208, t96 * t209 + (-t129 * t331 + t208 * t389 - t209 * t330) * pkin(2) + t245, t97 * t209 + (-t131 * t331 - t208 * t219 - t209 * t308) * pkin(2) + t244 (t90 - t96) * t131 + (t298 + t97) * t129 + (t389 * t73 - t219 * t74 + (-t129 * t389 + t131 * t219) * qJD(3)) * pkin(2), -t298 * t96 - t90 * t97 + (-t389 * t291 - t385 - t219 * t292 + (t219 * t298 + t389 * t90) * qJD(3) + (qJD(1) * t150 + t399) * t220) * pkin(2), t353, t234, t78, t208, t53, -t353, -t83 * t129 - t194 * t208 - t209 * t285 + t237, -t380 - t194 * t73 + (t285 + t86) * t131 + (t82 - t367) * t129, t83 * t131 + t209 * t367 + t248 + t349 - t400, -t268 * t186 + t37 * t194 - t81 * t83 - g(1) * (t224 * t282 + t155) - g(2) * (t221 * t282 + t153) - g(3) * t315 + t367 * t86 + t285 * t82, -t353, -t78, -t279, t353, t234, t208, -t131 * t62 + t209 * t368 + t233 + t349, t232 + t286 * t209 + (-pkin(4) + t184) * t208 - t129 * t62, t184 * t73 + t380 + (-t286 + t63) * t131 + (-t57 + t368) * t129, t15 * t184 - t16 * t186 - t58 * t62 - g(1) * (-t224 * t388 + t155) - g(2) * (-t221 * t388 + t153) - g(3) * (t189 + t315) - t368 * t63 + t286 * t57 + t241, t22, t6, t25, t23, t24, t360, -t404 * t26 + t181 * t45 + t368 * t104 + (-t172 * t329 + t252) * t222 + t239 * t218 + t304, -t181 * t44 + (t172 * t328 + t27) * t404 + t368 * t106 + t239 * t222 + t254, t104 * t27 + t106 * t26 + (t362 - t364) * t321 + t235 * t172 + t243, t14 * t181 - t21 * t27 - t20 * t26 - g(3) * (t204 + t276) + t368 * t59 + (t220 * t399 - t277 * t330) * pkin(2) + t236 * t172 + t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, -t78, t234, -t353, -t279, t208, t245 + t377, t244 - t378, 0, 0, t353, t234, t78, t208, t53, -t353, -t129 * t87 + t200 + t237 + t377, pkin(3) * t73 - t369 + (t86 - t90) * t131 + (t82 - t405) * t129, t131 * t87 + 0.2e1 * t197 + 0.2e1 * t199 + t248 + t378, -t268 * qJ(4) - t37 * pkin(3) - t81 * t87 - t82 * t90 - g(1) * (-pkin(3) * t347 + t155) - g(2) * (-pkin(3) * t348 + t153) - g(3) * t335 + t405 * t86, -t353, -t78, -t279, t353, t234, t208, -t131 * t70 + t209 * t257 + t197 + t233, t232 - t129 * t70 - t209 * t72 + (-pkin(4) - t392) * t208, t369 - t392 * t73 + (t63 + t72) * t131 + (-t57 + t257) * t129, -g(1) * t155 - g(2) * t153 - g(3) * t316 - t16 * qJ(4) - t15 * t392 - t257 * t63 - t57 * t72 - t58 * t70 + t241, t22, t6, t25, t23, t24, t360, -t28 * t404 + t217 * t45 + t257 * t104 + t263 * t218 + (t325 * t329 + t252) * t222 + t304, -t217 * t44 + (-t325 * t328 + t29) * t404 + t257 * t106 + t263 * t222 + t254, t104 * t29 + t106 * t28 - t235 * t325 + t243, -g(3) * t276 + t14 * t217 - t20 * t28 - t21 * t29 - t236 * t325 + t257 * t59 + t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t234, t398, -t209 * t86 - t237, 0, 0, 0, 0, 0, 0, t398, t272, t73 - t355, t63 * t209 + t232 - t383, 0, 0, 0, 0, 0, 0, -t209 * t104 + t256, -t209 * t106 + t255, -t408 * t218 + t274 * t222, -t209 * t59 - t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240 - t355, t74 + t352, -t394 - t126, t129 * t63 + t131 * t57 + t305 + t9, 0, 0, 0, 0, 0, 0, -t255 - t357, t256 - t356, t274 * t218 + t408 * t222, -t59 * t129 + (t3 + t409) * t222 + (t2 - t410) * t218 + t305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, -t104 ^ 2 + t106 ^ 2, -t408, -t363, -t301 + (-qJD(6) + t404) * t106, -t67, -g(1) * t118 + g(2) * t116 - t59 * t106 + t218 * t269 - t327 * t56 + t409 + t7, g(1) * t119 - g(2) * t117 + t59 * t104 + t410 + (qJD(6) * t56 - t8) * t218 + t269 * t222, 0, 0;];
tau_reg  = t1;
