% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:33:03
% EndTime: 2019-05-07 04:33:34
% DurationCPUTime: 30.18s
% Computational Cost: add. (50946->695), mult. (107859->914), div. (0->0), fcn. (73344->8), ass. (0->481)
t918 = sin(qJ(3));
t919 = sin(qJ(2));
t922 = cos(qJ(3));
t923 = cos(qJ(2));
t866 = (t918 * t923 + t919 * t922) * qJD(1);
t913 = qJD(2) + qJD(3);
t1000 = t913 * t866;
t982 = qJD(1) * qJD(2);
t966 = t923 * t982;
t981 = qJDD(1) * t919;
t876 = t966 + t981;
t906 = t923 * qJDD(1);
t967 = t919 * t982;
t877 = t906 - t967;
t961 = t918 * t876 - t922 * t877;
t944 = -qJD(3) * t866 - t961;
t1078 = -t944 + t1000;
t1042 = t913 ^ 2;
t990 = qJD(1) * t919;
t864 = -t922 * t923 * qJD(1) + t918 * t990;
t1044 = t864 ^ 2;
t1053 = -t1044 - t1042;
t1009 = t866 * t864;
t912 = qJDD(2) + qJDD(3);
t1081 = t912 - t1009;
t1105 = t1081 * t918;
t1077 = t1053 * t922 - t1105;
t1104 = t1081 * t922;
t1082 = t1053 * t918 + t1104;
t1099 = t1077 * t923 - t1082 * t919;
t920 = sin(qJ(1));
t1123 = t1099 * t920;
t924 = cos(qJ(1));
t610 = t1078 * t924 - t1123;
t1169 = pkin(6) * t610;
t1122 = t1099 * t924;
t612 = t1078 * t920 + t1122;
t1168 = pkin(6) * t612;
t1001 = t913 * t864;
t939 = qJD(3) * t864 - t876 * t922 - t877 * t918;
t1065 = t1001 + t939;
t1043 = t866 ^ 2;
t1054 = -t1043 - t1042;
t1080 = t912 + t1009;
t1125 = t1080 * t918;
t1137 = -t1054 * t922 + t1125;
t1124 = t1080 * t922;
t1138 = t1054 * t918 + t1124;
t663 = t1137 * t919 - t1138 * t923;
t608 = t1065 * t924 + t663 * t920;
t1167 = pkin(6) * t608;
t611 = -t1065 * t920 + t663 * t924;
t1166 = pkin(6) * t611;
t1052 = -t1044 - t1043;
t1070 = t1052 * t924;
t726 = t1001 - t939;
t719 = t726 * t922;
t723 = (qJD(3) - t913) * t866 + t961;
t649 = t723 * t918 + t719;
t1027 = t726 * t918;
t656 = -t723 * t922 + t1027;
t587 = t649 * t919 + t656 * t923;
t562 = t587 * t920 - t1070;
t1165 = pkin(6) * t562;
t1071 = t1052 * t920;
t565 = t587 * t924 + t1071;
t1164 = pkin(6) * t565;
t1128 = pkin(7) * t1099;
t1163 = pkin(1) * t1078 - t1128;
t1051 = t1044 - t1042;
t1117 = t1051 * t918 + t1124;
t753 = -t1051 * t922 + t1125;
t676 = t1117 * t919 + t753 * t923;
t1162 = t676 * t920 - t723 * t924;
t1161 = t676 * t924 + t723 * t920;
t1098 = t1077 * t919 + t1082 * t923;
t1129 = pkin(7) * t1098;
t1140 = t1137 * t923 + t1138 * t919;
t1155 = pkin(7) * t1140;
t1115 = -pkin(1) * t1098 - pkin(2) * t1082;
t804 = pkin(3) * t864 - qJ(4) * t866;
t926 = qJD(1) ^ 2;
t993 = t919 * t926;
t887 = g(1) * t924 + g(2) * t920;
t869 = -pkin(1) * t926 + qJDD(1) * pkin(7) - t887;
t994 = t919 * t869;
t757 = qJDD(2) * pkin(2) - t876 * pkin(8) - t994 + (pkin(2) * t993 + pkin(8) * t982 - g(3)) * t923;
t833 = -t919 * g(3) + t923 * t869;
t916 = t923 ^ 2;
t908 = t916 * t926;
t947 = qJD(2) * pkin(2) - pkin(8) * t990;
t762 = -pkin(2) * t908 + t877 * pkin(8) - qJD(2) * t947 + t833;
t686 = -t922 * t757 + t918 * t762;
t941 = -t912 * pkin(3) - qJ(4) * t1042 + qJDD(4) + t686;
t937 = t866 * t804 + t941;
t544 = -pkin(3) * t1081 - qJ(4) * t1053 + t1115 + t937;
t1160 = -pkin(1) * t1065 - pkin(7) * t663;
t1159 = -pkin(1) * t1140 - pkin(2) * t1137;
t1028 = t1065 * t918;
t721 = (qJD(3) + t913) * t866 + t961;
t1102 = -t721 * t922 + t1028;
t653 = -t1065 * t922 - t721 * t918;
t585 = -t1102 * t923 + t653 * t919;
t807 = t1043 - t1044;
t1158 = t585 * t920 + t807 * t924;
t1157 = t585 * t924 - t807 * t920;
t582 = t649 * t923 - t656 * t919;
t1156 = pkin(7) * t582;
t1154 = pkin(1) * t582 + pkin(2) * t649 + qJ(4) * t723;
t1075 = pkin(1) * t1052;
t1153 = -pkin(7) * t587 + t1075;
t1152 = (-t1080 - t912) * qJ(4) + t1159;
t1133 = t1117 * t923 - t753 * t919;
t1111 = pkin(8) * t1077;
t1110 = pkin(8) * t1082;
t1149 = pkin(8) * t1137;
t1148 = pkin(8) * t1138;
t1147 = -t1102 * t919 - t653 * t923;
t1145 = pkin(2) * t1065 - t1148;
t1055 = t1042 - t1043;
t1118 = -t1055 * t918 + t1104;
t1119 = t922 * t1055 + t1105;
t1132 = t1118 * t923 - t1119 * t919;
t1142 = t1132 * t920 - t726 * t924;
t1141 = t1132 * t924 + t726 * t920;
t1139 = pkin(8) * t649;
t1074 = pkin(2) * t1052;
t1135 = -pkin(8) * t656 + t1074;
t1131 = t1118 * t919 + t1119 * t923;
t1130 = pkin(3) * (t1078 - t944);
t999 = t913 * t918;
t971 = t866 * t999;
t1087 = -t922 * t939 - t971;
t998 = t913 * t922;
t954 = t866 * t998 - t918 * t939;
t1100 = t1087 * t923 - t919 * t954;
t973 = t924 * t1009;
t956 = t1100 * t920 - t973;
t974 = t920 * t1009;
t955 = t1100 * t924 + t974;
t636 = t1087 * t919 + t923 * t954;
t1094 = qJ(5) * t726;
t1086 = qJ(4) * t1052;
t951 = t1065 * qJ(4);
t1049 = -pkin(4) * t944 + t1044 * qJ(5) - qJDD(5);
t886 = t920 * g(1) - t924 * g(2);
t946 = qJDD(1) * pkin(1) + t886;
t778 = t877 * pkin(2) + (pkin(8) * t916 + pkin(7)) * t926 - t947 * t990 + t946;
t931 = -pkin(3) * t1000 + t778;
t929 = -t951 + t931;
t1079 = t929 - t1049;
t1076 = -0.2e1 * t951;
t917 = sin(qJ(6));
t921 = cos(qJ(6));
t818 = t864 * t917 + t921 * t913;
t820 = t864 * t921 - t913 * t917;
t763 = t820 * t818;
t769 = qJDD(6) - t939;
t1056 = -t763 + t769;
t1067 = t1056 * t917;
t1066 = t1056 * t921;
t972 = t864 * t998;
t945 = -t918 * t944 + t972;
t953 = t864 * t999 + t922 * t944;
t1046 = -t919 * t953 + t923 * t945;
t1064 = t1046 * t920 + t973;
t1063 = t1046 * t924 - t974;
t942 = (-t864 * t918 - t866 * t922) * t913;
t1060 = t919 * t942;
t952 = t971 - t972;
t1047 = t923 * t952 - t1060;
t896 = t924 * t912;
t1062 = t1047 * t920 - t896;
t1002 = t912 * t920;
t1061 = t1047 * t924 + t1002;
t1058 = t923 * t942;
t687 = t918 * t757 + t922 * t762;
t969 = pkin(3) * t1042 - t687;
t943 = -0.2e1 * qJD(4) * t913 + t864 * t804 + t969;
t1050 = -t912 * pkin(4) - t1094;
t1048 = t919 * t952 + t1058;
t1045 = t919 * t945 + t923 * t953;
t815 = t818 ^ 2;
t816 = t820 ^ 2;
t858 = qJD(6) + t866;
t855 = t858 ^ 2;
t1041 = -2 * qJD(5);
t1040 = pkin(3) + pkin(4);
t1039 = pkin(3) * t922;
t1038 = t944 * pkin(3);
t1037 = pkin(5) + qJ(4);
t1036 = qJ(4) * t922;
t604 = -t686 * t922 + t687 * t918;
t1035 = t604 * t919;
t1034 = t604 * t923;
t691 = t763 + t769;
t1033 = t691 * t921;
t1026 = t944 * qJ(5);
t1025 = t778 * t918;
t1024 = t778 * t922;
t1015 = t818 * t858;
t1011 = t858 * t917;
t1010 = t858 * t921;
t868 = t926 * pkin(7) + t946;
t1008 = t868 * t919;
t1007 = t868 * t923;
t893 = t923 * t993;
t884 = qJDD(2) + t893;
t1006 = t884 * t919;
t885 = qJDD(2) - t893;
t1005 = t885 * t919;
t1004 = t885 * t923;
t1003 = t912 * qJ(4);
t915 = t919 ^ 2;
t997 = t915 * t926;
t805 = pkin(5) * t866 - pkin(9) * t864;
t857 = t1044 * pkin(4);
t834 = -pkin(4) * t913 - qJ(5) * t866;
t985 = 0.2e1 * qJD(4) + t834;
t932 = t913 * t985 + t1003 - t1026 - t857 - t969;
t984 = (2 * qJD(5)) - t804;
t560 = t912 * pkin(5) - t1042 * pkin(9) + (t805 + t984) * t864 + t932;
t996 = t917 * t560;
t995 = t917 * t691;
t992 = t921 * t560;
t991 = t915 + t916;
t989 = qJD(4) * t866;
t983 = pkin(9) + t1040;
t980 = qJDD(1) * t920;
t979 = qJDD(1) * t924;
t978 = -t816 - t855;
t977 = 0.2e1 * t989;
t976 = t918 * t763;
t975 = t922 * t763;
t970 = t818 * qJD(6) + t917 * t912 + t921 * t944;
t965 = -qJ(4) * t918 - pkin(2);
t964 = -pkin(4) * t864 - t804;
t605 = t686 * t918 + t922 * t687;
t963 = t921 * t912 - t917 * t944;
t832 = t923 * g(3) + t994;
t761 = t832 * t919 + t923 * t833;
t822 = -t886 * t920 - t924 * t887;
t960 = t920 * t893;
t959 = t924 * t893;
t958 = t1041 - t964;
t881 = -t920 * t926 + t979;
t957 = -pkin(6) * t881 - g(3) * t920;
t543 = -(-pkin(3) - pkin(9)) * t944 - t1065 * pkin(5) + (-pkin(9) * t913 + t985) * t866 + t1079;
t936 = t941 + t1050;
t556 = -t1042 * pkin(5) - t912 * pkin(9) + (-t805 + t958) * t866 + t936;
t501 = -t921 * t543 + t917 * t556;
t502 = t917 * t543 + t921 * t556;
t472 = -t921 * t501 + t917 * t502;
t473 = t917 * t501 + t921 * t502;
t760 = t832 * t923 - t833 * t919;
t821 = t886 * t924 - t887 * t920;
t948 = -t970 - t1015;
t940 = (-qJD(6) + t858) * t820 - t963;
t621 = t1003 - t943;
t935 = t864 * t1041 - t913 * t834 + t857 + t943;
t930 = t931 + t1038;
t928 = t929 + t977;
t927 = t985 * t866 - t1049 + t930;
t925 = qJD(2) ^ 2;
t891 = -t908 - t925;
t890 = t908 - t925;
t889 = -t925 - t997;
t888 = t925 - t997;
t883 = t908 - t997;
t882 = t908 + t997;
t880 = t924 * t926 + t980;
t879 = t991 * qJDD(1);
t878 = t906 - 0.2e1 * t967;
t875 = 0.2e1 * t966 + t981;
t873 = t923 * t884;
t872 = t991 * t982;
t859 = -pkin(6) * t880 + g(3) * t924;
t853 = t866 * t1041;
t837 = t876 * t923 - t915 * t982;
t836 = -t877 * t919 - t916 * t982;
t828 = -t889 * t919 - t1004;
t827 = -t888 * t919 + t873;
t826 = t891 * t923 - t1006;
t825 = t890 * t923 - t1005;
t824 = t889 * t923 - t1005;
t823 = t891 * t919 + t873;
t814 = t879 * t924 - t882 * t920;
t813 = t879 * t920 + t882 * t924;
t811 = -t875 * t919 + t878 * t923;
t792 = t828 * t924 + t875 * t920;
t791 = t826 * t924 - t878 * t920;
t790 = t828 * t920 - t875 * t924;
t789 = t826 * t920 + t878 * t924;
t788 = -t816 + t855;
t787 = t815 - t855;
t786 = (-t864 * t922 + t866 * t918) * t913;
t780 = -pkin(7) * t824 - t1007;
t779 = -pkin(7) * t823 - t1008;
t772 = -pkin(1) * t824 + t833;
t771 = -pkin(1) * t823 + t832;
t758 = t816 - t815;
t725 = t1000 + t944;
t718 = -t855 - t815;
t707 = t761 * t924 - t868 * t920;
t706 = t761 * t920 + t868 * t924;
t699 = -t815 - t816;
t697 = -qJD(6) * t820 - t963;
t696 = (t818 * t921 - t820 * t917) * t858;
t695 = (-t818 * t917 - t820 * t921) * t858;
t694 = t786 * t923 - t1060;
t688 = qJ(4) * t1078 - qJ(5) * t1081;
t684 = -t1024 + t1149;
t682 = t970 - t1015;
t678 = (qJD(6) + t858) * t820 + t963;
t677 = -t1025 - t1110;
t669 = t1011 * t820 + t921 * t970;
t668 = t1010 * t820 - t917 * t970;
t667 = -t1010 * t818 + t697 * t917;
t666 = t1011 * t818 + t697 * t921;
t657 = t725 * t922 + t1027;
t651 = t725 * t918 - t719;
t647 = -t696 * t918 + t769 * t922;
t646 = t696 * t922 + t769 * t918;
t645 = -t787 * t921 + t995;
t644 = t788 * t917 - t1066;
t643 = t787 * t917 + t1033;
t642 = t788 * t921 + t1067;
t627 = -t917 * t978 - t1033;
t626 = t921 * t978 - t995;
t625 = -qJ(5) * t1080 - t1040 * t1065;
t623 = t718 * t921 - t1067;
t622 = t917 * t718 + t1066;
t620 = -t1025 + t1145;
t619 = -t669 * t918 + t975;
t618 = -t667 * t918 - t975;
t617 = t669 * t922 + t976;
t616 = t667 * t922 - t976;
t615 = -pkin(2) * t721 + t1024 + t1111;
t614 = t928 + t1038;
t607 = t937 - t1086;
t606 = -pkin(3) * t1052 + t621;
t603 = t721 * t920 + t1122;
t600 = -t721 * t924 + t1123;
t597 = -t917 * t682 + t921 * t940;
t596 = t678 * t921 + t917 * t948;
t595 = t682 * t921 + t917 * t940;
t594 = -t678 * t917 + t921 * t948;
t593 = t928 - t1130;
t592 = t930 + t977 + t1076;
t591 = pkin(2) * t778 + pkin(8) * t605;
t588 = -t651 * t919 + t657 * t923;
t584 = t651 * t923 + t657 * t919;
t581 = -t645 * t918 + t922 * t940;
t580 = -t644 * t918 - t682 * t922;
t579 = t645 * t922 + t918 * t940;
t578 = t644 * t922 - t682 * t918;
t577 = t864 * t984 + t932;
t576 = t866 * t958 + t936;
t575 = -t646 * t919 + t647 * t923;
t574 = t627 * t918 + t922 * t948;
t573 = -t627 * t922 + t918 * t948;
t572 = t927 - t951;
t571 = t623 * t918 + t678 * t922;
t570 = -t623 * t922 + t678 * t918;
t569 = -t1159 + t687;
t568 = -t596 * t918 + t758 * t922;
t567 = t596 * t922 + t758 * t918;
t566 = t588 * t924 + t1071;
t563 = t588 * t920 - t1070;
t559 = t597 * t918 + t699 * t922;
t558 = -t597 * t922 + t699 * t918;
t557 = t1115 + t686;
t555 = t621 * t922 + t918 * t937;
t554 = t621 * t918 - t922 * t937;
t553 = -pkin(8) * t651 - t604;
t552 = -t617 * t919 + t619 * t923;
t551 = -t616 * t919 + t618 * t923;
t550 = -t1036 * t1078 - t593 * t918 - t1110;
t549 = -qJ(5) * t1054 + t1076 + t927;
t548 = t866 * t964 + t1086 + t1094 - t853 - t936;
t547 = pkin(3) * t1028 + t592 * t922 - t1149;
t546 = pkin(8) * t657 - t1074 + t605;
t545 = -pkin(1) * t584 - pkin(2) * t651;
t542 = -t620 * t919 + t684 * t923 + t1155;
t541 = -t1003 + t1040 * t1052 + (-t723 + t944) * qJ(5) + t935;
t540 = pkin(4) * t1078 + qJ(5) * t1053 - t866 * t834 - t1079 + t1130 - 0.2e1 * t989;
t539 = t605 * t923 - t1035;
t538 = t605 * t919 + t1034;
t537 = t1078 * t965 + t922 * t593 + t1111;
t536 = t1148 + t918 * t592 - (pkin(2) + t1039) * t1065;
t535 = pkin(3) * t1054 + t1152 + t943;
t534 = -t615 * t919 + t677 * t923 - t1129;
t533 = t539 * t924 - t778 * t920;
t532 = t539 * t920 + t778 * t924;
t531 = pkin(3) * t726 + t1154;
t530 = -t579 * t919 + t581 * t923;
t529 = -t578 * t919 + t580 * t923;
t528 = t576 * t918 + t577 * t922;
t527 = -t576 * t922 + t577 * t918;
t526 = -t606 * t918 + t607 * t922 + t1139;
t525 = -t853 + (t1081 - t1009) * pkin(4) - t1050 - t544;
t524 = qJ(4) * t572 - qJ(5) * t576;
t523 = -t573 * t919 + t574 * t923;
t522 = t573 * t923 + t574 * t919;
t521 = -t570 * t919 + t571 * t923;
t520 = t570 * t923 + t571 * t919;
t519 = -t1040 * t726 - t1154;
t518 = t1040 * t1054 + t1026 + t1152 + t935;
t517 = -t540 * t918 + t688 * t922 + t1110;
t516 = t606 * t922 + t607 * t918 - t1135;
t515 = -t567 * t919 + t568 * t923;
t514 = t549 * t922 - t625 * t918 - t1149;
t513 = -t558 * t919 + t559 * t923;
t512 = t558 * t923 + t559 * t919;
t511 = -pkin(1) * t538 - pkin(2) * t604;
t510 = pkin(2) * t1078 + t540 * t922 + t688 * t918 - t1111;
t509 = -t554 * t919 + t555 * t923;
t508 = t554 * t923 + t555 * t919;
t507 = t549 * t918 + t625 * t922 - t1145;
t506 = -pkin(8) * t554 + (-pkin(3) * t918 + t1036) * t614;
t505 = t523 * t924 - t626 * t920;
t504 = t523 * t920 + t626 * t924;
t503 = -qJ(5) * t597 + t1037 * t595;
t499 = t521 * t924 - t622 * t920;
t498 = t521 * t920 + t622 * t924;
t497 = -qJ(5) * t577 + t1040 * t572;
t496 = t509 * t924 - t614 * t920;
t495 = t509 * t920 + t614 * t924;
t494 = t513 * t924 - t595 * t920;
t493 = t513 * t920 + t595 * t924;
t492 = pkin(8) * t555 + (-t965 + t1039) * t614;
t491 = -qJ(5) * t948 + t626 * t983 - t992;
t490 = -pkin(7) * t538 - pkin(8) * t1034 - t591 * t919;
t489 = -t541 * t918 + t548 * t922 - t1139;
t488 = -qJ(5) * t678 + t622 * t983 - t996;
t487 = -t537 * t919 + t550 * t923 - t1129;
t486 = t541 * t922 + t548 * t918 + t1135;
t485 = -t536 * t919 + t547 * t923 - t1155;
t484 = -pkin(7) * t584 - t546 * t919 + t553 * t923;
t483 = -t527 * t919 + t528 * t923;
t482 = t527 * t923 + t528 * t919;
t481 = -qJ(5) * t627 + t1037 * t626 - t502;
t480 = -qJ(5) * t623 + t1037 * t622 - t501;
t479 = -pkin(1) * t508 - pkin(2) * t554 + pkin(3) * t937 - qJ(4) * t621;
t478 = t483 * t924 - t572 * t920;
t477 = t483 * t920 + t572 * t924;
t476 = -t510 * t919 + t517 * t923 + t1129;
t475 = -t516 * t919 + t526 * t923 + t1156;
t474 = -t507 * t919 + t514 * t923 - t1155;
t471 = t473 * t918 + t560 * t922;
t470 = -t473 * t922 + t560 * t918;
t469 = -pkin(1) * t522 - pkin(2) * t573 - t1037 * t948 + t627 * t983 + t996;
t468 = -pkin(1) * t520 - pkin(2) * t570 - t1037 * t678 + t623 * t983 - t992;
t467 = -pkin(8) * t527 - t497 * t918 + t524 * t922;
t466 = -t486 * t919 + t489 * t923 - t1156;
t465 = pkin(2) * t572 + pkin(8) * t528 + t497 * t922 + t524 * t918;
t464 = -pkin(7) * t508 - t492 * t919 + t506 * t923;
t463 = -qJ(5) * t699 + t595 * t983 + t472;
t462 = -pkin(8) * t573 + t481 * t922 - t491 * t918;
t461 = -pkin(1) * t482 - pkin(2) * t527 - qJ(4) * t577 + t1040 * t576;
t460 = -pkin(8) * t570 + t480 * t922 - t488 * t918;
t459 = pkin(2) * t626 + pkin(8) * t574 + t481 * t918 + t491 * t922;
t458 = pkin(2) * t622 + pkin(8) * t571 + t480 * t918 + t488 * t922;
t457 = -pkin(1) * t512 - pkin(2) * t558 - t1037 * t699 + t597 * t983 + t473;
t456 = -pkin(8) * t558 - t463 * t918 + t503 * t922;
t455 = pkin(2) * t595 + pkin(8) * t559 + t463 * t922 + t503 * t918;
t454 = -t470 * t919 + t471 * t923;
t453 = t470 * t923 + t471 * t919;
t452 = -qJ(5) * t473 + t1037 * t472;
t451 = -qJ(5) * t560 + t472 * t983;
t450 = t454 * t924 - t472 * t920;
t449 = t454 * t920 + t472 * t924;
t448 = -pkin(7) * t482 - t465 * t919 + t467 * t923;
t447 = -pkin(7) * t522 - t459 * t919 + t462 * t923;
t446 = -pkin(7) * t520 - t458 * t919 + t460 * t923;
t445 = -pkin(7) * t512 - t455 * t919 + t456 * t923;
t444 = -pkin(1) * t453 - pkin(2) * t470 - t1037 * t560 + t473 * t983;
t443 = -pkin(8) * t470 - t451 * t918 + t452 * t922;
t442 = pkin(2) * t472 + pkin(8) * t471 + t451 * t922 + t452 * t918;
t441 = -pkin(7) * t453 - t442 * t919 + t443 * t923;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t880, -t881, 0, t822, 0, 0, 0, 0, 0, 0, t791, t792, t814, t707, 0, 0, 0, 0, 0, 0, t603, t611, t566, t533, 0, 0, 0, 0, 0, 0, t612, t565, -t611, t496, 0, 0, 0, 0, 0, 0, -t611, -t612, -t565, t478, 0, 0, 0, 0, 0, 0, t499, t505, t494, t450; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t881, -t880, 0, t821, 0, 0, 0, 0, 0, 0, t789, t790, t813, t706, 0, 0, 0, 0, 0, 0, t600, t608, t563, t532, 0, 0, 0, 0, 0, 0, -t610, t562, -t608, t495, 0, 0, 0, 0, 0, 0, -t608, t610, -t562, t477, 0, 0, 0, 0, 0, 0, t498, t504, t493, t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t823, t824, 0, -t760, 0, 0, 0, 0, 0, 0, t1098, -t1140, t584, t538, 0, 0, 0, 0, 0, 0, t1098, -t582, t1140, t508, 0, 0, 0, 0, 0, 0, t1140, -t1098, t582, t482, 0, 0, 0, 0, 0, 0, t520, t522, t512, t453; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t881, 0, -t880, 0, t957, -t859, -t821, -pkin(6) * t821, t837 * t924 - t960, t811 * t924 - t883 * t920, t827 * t924 + t919 * t980, t836 * t924 + t960, t825 * t924 + t906 * t920, qJDD(2) * t920 + t872 * t924, -pkin(6) * t789 - t771 * t920 + t779 * t924, -pkin(6) * t790 - t772 * t920 + t780 * t924, -pkin(6) * t813 + t760 * t924, -pkin(6) * t706 - (pkin(1) * t920 - pkin(7) * t924) * t760, t955, -t1157, t1141, t1063, -t1161, t1061, -pkin(6) * t600 + t534 * t924 - t557 * t920, t542 * t924 - t569 * t920 - t1167, -pkin(6) * t563 + t484 * t924 - t545 * t920, -pkin(6) * t532 + t490 * t924 - t511 * t920, t955, t1141, t1157, t1061, t1161, t1063, t487 * t924 - t544 * t920 + t1169, t475 * t924 - t531 * t920 - t1165, t485 * t924 - t535 * t920 + t1167, -pkin(6) * t495 + t464 * t924 - t479 * t920, t1063, -t1157, -t1161, t955, t1141, t694 * t924 + t1002, t474 * t924 - t518 * t920 + t1167, t476 * t924 - t525 * t920 - t1169, t466 * t924 - t519 * t920 + t1165, -pkin(6) * t477 + t448 * t924 - t461 * t920, t552 * t924 - t668 * t920, t515 * t924 - t594 * t920, t529 * t924 - t642 * t920, t551 * t924 - t666 * t920, t530 * t924 - t643 * t920, t575 * t924 - t695 * t920, -pkin(6) * t498 + t446 * t924 - t468 * t920, -pkin(6) * t504 + t447 * t924 - t469 * t920, -pkin(6) * t493 + t445 * t924 - t457 * t920, -pkin(6) * t449 + t441 * t924 - t444 * t920; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t880, 0, t881, 0, t859, t957, t822, pkin(6) * t822, t837 * t920 + t959, t811 * t920 + t883 * t924, t827 * t920 - t919 * t979, t836 * t920 - t959, t825 * t920 - t906 * t924, -qJDD(2) * t924 + t872 * t920, pkin(6) * t791 + t771 * t924 + t779 * t920, pkin(6) * t792 + t772 * t924 + t780 * t920, pkin(6) * t814 + t760 * t920, pkin(6) * t707 - (-pkin(1) * t924 - pkin(7) * t920) * t760, t956, -t1158, t1142, t1064, -t1162, t1062, pkin(6) * t603 + t534 * t920 + t557 * t924, t542 * t920 + t569 * t924 + t1166, pkin(6) * t566 + t484 * t920 + t545 * t924, pkin(6) * t533 + t490 * t920 + t511 * t924, t956, t1142, t1158, t1062, t1162, t1064, t487 * t920 + t544 * t924 + t1168, t475 * t920 + t531 * t924 + t1164, t485 * t920 + t535 * t924 - t1166, pkin(6) * t496 + t464 * t920 + t479 * t924, t1064, -t1158, -t1162, t956, t1142, t694 * t920 - t896, t474 * t920 + t518 * t924 - t1166, t476 * t920 + t525 * t924 - t1168, t466 * t920 + t519 * t924 - t1164, pkin(6) * t478 + t448 * t920 + t461 * t924, t552 * t920 + t668 * t924, t515 * t920 + t594 * t924, t529 * t920 + t642 * t924, t551 * t920 + t666 * t924, t530 * t920 + t643 * t924, t575 * t920 + t695 * t924, pkin(6) * t499 + t446 * t920 + t468 * t924, pkin(6) * t505 + t447 * t920 + t469 * t924, pkin(6) * t494 + t445 * t920 + t457 * t924, pkin(6) * t450 + t441 * t920 + t444 * t924; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t886, t887, 0, 0, (t876 + t966) * t919, t875 * t923 + t878 * t919, t888 * t923 + t1006, (t877 - t967) * t923, t890 * t919 + t1004, 0, pkin(1) * t878 + pkin(7) * t826 + t1007, -pkin(1) * t875 + pkin(7) * t828 - t1008, pkin(1) * t882 + pkin(7) * t879 + t761, pkin(1) * t868 + pkin(7) * t761, t636, -t1147, t1131, t1045, t1133, t1048, -pkin(1) * t721 + t615 * t923 + t677 * t919 + t1128, t620 * t923 + t684 * t919 - t1160, pkin(7) * t588 + t546 * t923 + t553 * t919 - t1075, pkin(1) * t778 + pkin(7) * t539 - pkin(8) * t1035 + t591 * t923, t636, t1131, t1147, t1048, -t1133, t1045, t537 * t923 + t550 * t919 - t1163, t516 * t923 + t526 * t919 - t1153, t536 * t923 + t547 * t919 + t1160, pkin(1) * t614 + pkin(7) * t509 + t492 * t923 + t506 * t919, t1045, -t1147, t1133, t636, t1131, t786 * t919 + t1058, t507 * t923 + t514 * t919 + t1160, t510 * t923 + t517 * t919 + t1163, t486 * t923 + t489 * t919 + t1153, pkin(1) * t572 + pkin(7) * t483 + t465 * t923 + t467 * t919, t617 * t923 + t619 * t919, t567 * t923 + t568 * t919, t578 * t923 + t580 * t919, t616 * t923 + t618 * t919, t579 * t923 + t581 * t919, t646 * t923 + t647 * t919, pkin(1) * t622 + pkin(7) * t521 + t458 * t923 + t460 * t919, pkin(1) * t626 + pkin(7) * t523 + t459 * t923 + t462 * t919, pkin(1) * t595 + pkin(7) * t513 + t455 * t923 + t456 * t919, pkin(1) * t472 + pkin(7) * t454 + t442 * t923 + t443 * t919;];
tauB_reg  = t1;
