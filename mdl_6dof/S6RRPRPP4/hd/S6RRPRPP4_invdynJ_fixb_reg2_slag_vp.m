% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:01:47
% EndTime: 2019-03-09 10:02:03
% DurationCPUTime: 9.64s
% Computational Cost: add. (8354->656), mult. (17517->764), div. (0->0), fcn. (11125->10), ass. (0->335)
t250 = cos(qJ(2));
t352 = qJD(1) * qJD(2);
t331 = t250 * t352;
t247 = sin(qJ(2));
t351 = t247 * qJDD(1);
t280 = t331 + t351;
t152 = qJDD(4) + t280;
t244 = sin(pkin(9));
t246 = sin(qJ(4));
t249 = cos(qJ(4));
t402 = cos(pkin(9));
t153 = t244 * t249 + t246 * t402;
t367 = qJD(1) * t247;
t204 = qJD(4) + t367;
t328 = t402 * t249;
t154 = -t244 * t246 + t328;
t313 = qJD(4) * t328;
t359 = qJD(4) * t246;
t453 = t154 * t367 - t244 * t359 + t313;
t306 = t152 * t153 + t204 * t453;
t366 = qJD(1) * t250;
t363 = qJD(2) * t246;
t155 = t249 * t366 + t363;
t333 = t246 * t366;
t361 = qJD(2) * t249;
t157 = -t333 + t361;
t89 = t402 * t155 + t157 * t244;
t460 = -t89 * t366 + t306;
t282 = -t244 * t155 + t157 * t402;
t459 = qJD(2) * t282 + t306;
t134 = t153 * qJD(4);
t374 = t153 * t367 + t134;
t305 = t152 * t154 - t204 * t374;
t458 = -qJD(2) * t89 + t305;
t332 = t247 * t352;
t350 = t250 * qJDD(1);
t456 = -t332 + t350;
t83 = qJD(4) * t155 - t249 * qJDD(2) + t246 * t456;
t84 = -qJD(4) * t333 + t246 * qJDD(2) + (qJD(2) * qJD(4) + t456) * t249;
t46 = -t244 * t83 + t402 * t84;
t284 = t46 * t153 + t453 * t89;
t238 = qJ(4) + pkin(9);
t227 = cos(t238);
t248 = sin(qJ(1));
t251 = cos(qJ(1));
t309 = g(1) * t251 + g(2) * t248;
t288 = t309 * t250;
t424 = g(3) * t247;
t452 = t288 + t424;
t435 = pkin(2) + pkin(8);
t377 = qJ(5) + t435;
t165 = t377 * t246;
t327 = t377 * t249;
t98 = -t165 * t402 - t244 * t327;
t457 = t98 * t152 + t227 * t452;
t411 = t204 * t89;
t47 = -t244 * t84 - t402 * t83;
t28 = t47 + t411;
t434 = pkin(3) + pkin(7);
t455 = t89 * t282;
t220 = pkin(7) * t367;
t451 = qJD(3) + t220;
t422 = t282 ^ 2;
t123 = -qJD(4) * t327 - t246 * qJD(5);
t354 = t249 * qJD(5);
t273 = t359 * t377 - t354;
t391 = t246 * t247;
t225 = pkin(2) * t367;
t400 = qJ(3) * t250;
t302 = pkin(8) * t247 - t400;
t127 = qJD(1) * t302 + t225;
t221 = pkin(7) * t366;
t163 = pkin(3) * t366 + t221;
t81 = -t246 * t127 + t249 * t163;
t63 = (pkin(4) * t250 - qJ(5) * t391) * qJD(1) + t81;
t82 = t249 * t127 + t246 * t163;
t70 = qJ(5) * t249 * t367 + t82;
t416 = (t273 - t63) * t402 + (-t123 + t70) * t244;
t203 = pkin(2) * t332;
t355 = t247 * qJD(3);
t264 = qJD(2) * t302 - t355;
t229 = t247 * qJ(3);
t329 = -pkin(1) - t229;
t279 = -t250 * t435 + t329;
t66 = qJD(1) * t264 + qJDD(1) * t279 + t203;
t114 = t279 * qJD(1);
t353 = pkin(3) * t367 + t451;
t122 = -qJD(2) * t435 + t353;
t68 = t114 * t249 + t122 * t246;
t202 = pkin(7) * t331;
t217 = pkin(7) * t351;
t330 = qJDD(3) + t202 + t217;
t87 = pkin(3) * t280 - qJDD(2) * t435 + t330;
t24 = -qJD(4) * t68 - t246 * t66 + t249 * t87;
t450 = t68 * t204 + t24;
t295 = t155 * t204;
t449 = t83 - t295;
t394 = t157 * t204;
t448 = -t84 + t394;
t215 = t246 * pkin(4) + qJ(3);
t234 = t250 * pkin(2);
t371 = t234 + t229;
t429 = pkin(8) * t250;
t316 = t371 + t429;
t148 = -pkin(1) - t316;
t183 = t434 * t247;
t96 = t249 * t148 + t246 * t183;
t130 = t249 * t152;
t447 = -t204 * t359 + t130;
t245 = -qJ(5) - pkin(8);
t390 = t246 * t248;
t349 = pkin(4) * t390;
t387 = t247 * t248;
t446 = t245 * t387 + t250 * t349;
t388 = t246 * t251;
t207 = pkin(4) * t388;
t386 = t247 * t251;
t445 = t250 * t207 + t245 * t386;
t216 = pkin(4) * t249 + pkin(3);
t358 = qJD(4) * t249;
t373 = pkin(4) * t358 + t216 * t367 + t451;
t357 = qJD(4) * t250;
t335 = t246 * t357;
t276 = t247 * t361 + t335;
t444 = t84 * pkin(4) + qJDD(5);
t72 = t123 * t402 + t244 * t273;
t97 = -t165 * t244 + t327 * t402;
t443 = -t98 * t46 + t97 * t47 - t72 * t89;
t442 = t46 * pkin(5) - t47 * qJ(6) - t282 * qJD(6);
t241 = qJD(2) * qJ(3);
t136 = t241 + t163;
t441 = t136 * t204 - t152 * t435;
t14 = t47 * t154 - t282 * t374;
t94 = pkin(4) * t155 + qJD(5) + t136;
t38 = pkin(5) * t89 - qJ(6) * t282 + t94;
t440 = -t38 * t282 - qJDD(6);
t146 = t152 * qJ(6);
t12 = t152 * pkin(4) + t83 * qJ(5) - t157 * qJD(5) + t24;
t347 = -t122 * t358 - t246 * t87 - t249 * t66;
t23 = -t114 * t359 - t347;
t17 = -qJ(5) * t84 - qJD(5) * t155 + t23;
t4 = t244 * t12 + t402 * t17;
t1 = qJD(6) * t204 + t146 + t4;
t58 = -qJ(5) * t155 + t68;
t410 = t244 * t58;
t67 = -t114 * t246 + t249 * t122;
t57 = -qJ(5) * t157 + t67;
t53 = pkin(4) * t204 + t57;
t21 = t402 * t53 - t410;
t19 = -t204 * pkin(5) + qJD(6) - t21;
t3 = t402 * t12 - t244 * t17;
t430 = pkin(5) * t152;
t2 = qJDD(6) - t3 - t430;
t55 = t402 * t58;
t22 = t244 * t53 + t55;
t20 = qJ(6) * t204 + t22;
t237 = g(3) * t250;
t340 = -g(1) * t386 - g(2) * t387 + t237;
t439 = t1 * t153 - t2 * t154 + t19 * t374 + t20 * t453 + t340;
t438 = t4 * t153 + t3 * t154 - t21 * t374 + t22 * t453 + t340;
t437 = -t47 * t153 - t154 * t46 - t282 * t453 + t374 * t89;
t436 = t204 ^ 2;
t431 = pkin(2) * t247;
t428 = g(1) * t248;
t425 = g(2) * t251;
t26 = t244 * t57 + t55;
t423 = t26 * t282;
t420 = t89 ^ 2;
t362 = qJD(2) * t247;
t224 = pkin(2) * t362;
t108 = t224 + t264;
t360 = qJD(2) * t250;
t164 = t434 * t360;
t145 = t249 * t164;
t325 = qJ(5) * t250 - t148;
t34 = pkin(4) * t360 + t145 + t325 * t358 + (-qJ(5) * t362 - qJD(4) * t183 + qJD(5) * t250 - t108) * t246;
t49 = t249 * t108 - t148 * t359 + t246 * t164 + t183 * t358;
t39 = qJ(5) * t276 - t250 * t354 + t49;
t9 = t244 * t34 + t402 * t39;
t417 = pkin(5) * t453 + qJ(6) * t374 - qJD(6) * t154 + t373;
t36 = t244 * t63 + t402 * t70;
t415 = pkin(5) * t366 - t416;
t31 = qJ(6) * t366 + t36;
t414 = t72 - t31;
t413 = t72 - t36;
t159 = t249 * t183;
t73 = t247 * pkin(4) + t246 * t325 + t159;
t382 = t249 * t250;
t78 = -qJ(5) * t382 + t96;
t44 = t244 * t73 + t402 * t78;
t412 = t204 * t282;
t409 = t249 * t83;
t406 = t67 * t204;
t404 = t84 * t246;
t401 = pkin(7) * qJDD(2);
t397 = qJDD(2) * pkin(2);
t395 = t157 * t155;
t392 = t246 * t152;
t389 = t246 * t250;
t254 = qJD(1) ^ 2;
t385 = t247 * t254;
t384 = t248 * t249;
t383 = t248 * t250;
t381 = t249 * t251;
t380 = t250 * t245;
t379 = t250 * t251;
t27 = t402 * t57 - t410;
t376 = qJD(6) - t27;
t345 = t247 * t384;
t372 = pkin(4) * t345 + t207;
t184 = t434 * t250;
t370 = t251 * pkin(1) + t248 * pkin(7);
t242 = t247 ^ 2;
t243 = t250 ^ 2;
t369 = t242 - t243;
t368 = t242 + t243;
t365 = qJD(2) * t155;
t364 = qJD(2) * t157;
t356 = t136 * qJD(2);
t348 = g(3) * t382;
t346 = t246 * t386;
t344 = t247 * t381;
t235 = t251 * pkin(7);
t342 = t251 * t216 + t248 * t380 + t235;
t218 = pkin(7) * t350;
t239 = qJDD(2) * qJ(3);
t240 = qJD(2) * qJD(3);
t341 = t218 + t239 + t240;
t206 = pkin(4) * t382;
t135 = t206 + t184;
t339 = t434 * qJD(2);
t338 = t246 * t362;
t334 = t204 * t366;
t326 = -qJD(2) * pkin(2) + qJD(3);
t324 = pkin(2) * t379 + qJ(3) * t386 + t370;
t323 = -t217 - t340;
t322 = pkin(3) * t350 + t341;
t321 = qJD(1) * t339;
t320 = t247 * t331;
t199 = qJ(3) * t383;
t319 = -pkin(2) * t387 + t199;
t201 = qJ(3) * t379;
t318 = -pkin(2) * t386 + t201;
t210 = g(1) * t383;
t317 = -g(2) * t379 + t210;
t315 = t402 * t362;
t314 = t368 * qJDD(1) * pkin(7);
t253 = qJD(2) ^ 2;
t312 = pkin(7) * t253 + t425;
t226 = sin(t238);
t118 = t226 * t248 - t227 * t386;
t120 = t226 * t251 + t227 * t387;
t311 = -g(1) * t120 - g(2) * t118;
t119 = t226 * t386 + t227 * t248;
t121 = -t226 * t387 + t227 * t251;
t310 = -g(1) * t121 - g(2) * t119;
t308 = -t420 - t422;
t307 = -t420 + t422;
t124 = t244 * t389 - t250 * t328;
t74 = t134 * t250 - t244 * t338 + t249 * t315;
t304 = -t124 * t46 - t74 * t89;
t303 = pkin(5) * t226 - qJ(6) * t227;
t300 = -t246 * t67 + t249 * t68;
t167 = t220 + t326;
t177 = -t221 - t241;
t298 = t167 * t250 + t177 * t247;
t294 = t329 - t234;
t293 = pkin(4) * t391 + t371 - t380;
t291 = t46 + t412;
t290 = -t46 + t412;
t287 = -0.2e1 * pkin(1) * t352 - t401;
t8 = -t244 * t39 + t34 * t402;
t43 = -t244 * t78 + t402 * t73;
t137 = t294 * qJD(1);
t286 = t137 * t367 + qJDD(3) - t323;
t285 = -t204 * t358 - t392;
t283 = -qJ(3) * t360 - t355;
t278 = 0.2e1 * qJDD(1) * pkin(1) - t312;
t277 = g(1) * t118 - g(2) * t120 + t227 * t237 + t3;
t168 = -pkin(1) - t371;
t272 = t401 + (-qJD(1) * t168 - t137) * qJD(2);
t271 = -t47 + t411;
t125 = t153 * t250;
t75 = -t244 * t276 - t246 * t315 + t250 * t313;
t268 = t124 * t47 + t125 * t46 + t282 * t74 + t75 * t89;
t267 = g(1) * t119 - g(2) * t121 - t226 * t237 - t4;
t266 = pkin(4) * t346 + t248 * t216 - t245 * t379 + t324;
t265 = t26 * t204 + t277;
t93 = -t247 * t321 + t322;
t263 = -t14 - t284;
t262 = (-t215 * t247 - pkin(1) - t234) * t428;
t261 = -t124 * t152 - t204 * t74 + t247 * t46 + t360 * t89;
t129 = t224 + t283;
t85 = qJD(1) * t283 + qJDD(1) * t294 + t203;
t260 = qJD(1) * t129 + qJDD(1) * t168 + t312 + t85;
t100 = -pkin(4) * t335 + (-pkin(7) - t216) * t362;
t115 = pkin(7) * t332 - t341;
t126 = t330 - t397;
t259 = qJD(2) * t298 - t115 * t250 + t126 * t247;
t52 = t93 + t444;
t258 = -t97 * t152 - t226 * t452;
t257 = qJD(4) * t204 * t435 - t452 + t93;
t256 = (-g(3) - t321) * t247 - t288 + t322 + t444;
t214 = -pkin(4) * t402 - pkin(5);
t212 = pkin(4) * t244 + qJ(6);
t198 = t250 * t385;
t181 = pkin(4) * t344;
t176 = t369 * t254;
t170 = qJDD(2) * t250 - t247 * t253;
t169 = qJDD(2) * t247 + t250 * t253;
t162 = t247 * t339;
t160 = -qJ(3) * t366 + t225;
t150 = qJDD(1) * t243 - 0.2e1 * t320;
t149 = qJDD(1) * t242 + 0.2e1 * t320;
t141 = -t246 * t387 + t381;
t140 = t345 + t388;
t139 = t346 + t384;
t138 = t344 - t390;
t107 = 0.2e1 * t247 * t350 - 0.2e1 * t352 * t369;
t99 = t152 * t247 + t204 * t360;
t95 = -t148 * t246 + t159;
t86 = pkin(5) * t153 - qJ(6) * t154 + t215;
t60 = -pkin(5) * t124 + qJ(6) * t125 + t135;
t50 = -qJD(4) * t96 - t246 * t108 + t145;
t45 = pkin(4) * t157 + pkin(5) * t282 + qJ(6) * t89;
t42 = -t247 * pkin(5) - t43;
t41 = qJ(6) * t247 + t44;
t29 = -t282 * t366 + t305;
t25 = -t74 * pkin(5) + t75 * qJ(6) + t125 * qJD(6) + t100;
t18 = -t125 * t47 - t282 * t75;
t13 = -t125 * t152 - t204 * t75 + t247 * t47 + t282 * t360;
t7 = -pkin(5) * t360 - t8;
t6 = qJ(6) * t360 + qJD(6) * t247 + t9;
t5 = t52 + t442;
t10 = [0, 0, 0, 0, 0, qJDD(1), -t425 + t428, t309, 0, 0, t149, t107, t169, t150, t170, 0, t247 * t287 + t250 * t278 + t210, t287 * t250 + (-t278 - t428) * t247, -t309 + 0.2e1 * t314, -g(1) * (-t248 * pkin(1) + t235) - g(2) * t370 + (pkin(7) ^ 2 * t368 + pkin(1) ^ 2) * qJDD(1), 0, -t169, -t170, t149, t107, t150, t314 + t259 - t309, t247 * t272 + t250 * t260 - t210, t272 * t250 + (-t260 + t428) * t247, pkin(7) * t259 - g(1) * t235 - g(2) * t324 + t137 * t129 + t85 * t168 - t294 * t428, t83 * t389 + (-t249 * t357 + t338) * t157 (-t155 * t246 + t157 * t249) * t362 + (t404 + t409 + (t155 * t249 + t157 * t246) * qJD(4)) * t250 (t204 * t363 - t83) * t247 + (t285 + t364) * t250, -t155 * t276 + t382 * t84 (t204 * t361 - t84) * t247 + (-t365 - t447) * t250, t99, -g(1) * t141 - g(2) * t139 + t95 * t152 - t162 * t155 + t184 * t84 + t50 * t204 + (-t249 * t356 + t24) * t247 + (qJD(2) * t67 - t136 * t359 + t93 * t249) * t250, g(1) * t140 - g(2) * t138 - t96 * t152 - t162 * t157 - t184 * t83 - t49 * t204 + (t246 * t356 - t23) * t247 + (-qJD(2) * t68 - t136 * t358 - t93 * t246) * t250, -t49 * t155 - t50 * t157 + t95 * t83 - t96 * t84 + t210 + t300 * t362 + (-t425 - t23 * t249 + t24 * t246 + (t246 * t68 + t249 * t67) * qJD(4)) * t250, t23 * t96 + t68 * t49 + t24 * t95 + t67 * t50 + t93 * t184 - t136 * t162 - g(1) * (t251 * pkin(3) + t235) - g(2) * (pkin(8) * t379 + t324) + (-g(1) * (t294 - t429) - g(2) * pkin(3)) * t248, t18, t268, t13, t304, -t261, t99, t100 * t89 - t124 * t52 + t135 * t46 + t152 * t43 + t204 * t8 + t21 * t360 + t247 * t3 - t74 * t94 + t310, t100 * t282 - t125 * t52 + t135 * t47 - t152 * t44 - t204 * t9 - t22 * t360 - t247 * t4 - t75 * t94 - t311, t124 * t4 + t125 * t3 + t21 * t75 + t22 * t74 - t282 * t8 - t43 * t47 - t44 * t46 - t89 * t9 + t317, -g(1) * t342 - g(2) * t266 + t94 * t100 + t52 * t135 + t21 * t8 + t22 * t9 + t3 * t43 + t4 * t44 - t262, t18, t13, -t268, t99, t261, t304, -t124 * t5 - t152 * t42 - t19 * t360 - t2 * t247 - t204 * t7 + t25 * t89 - t38 * t74 + t46 * t60 + t310, t1 * t124 - t125 * t2 - t19 * t75 + t20 * t74 + t282 * t7 - t41 * t46 + t42 * t47 - t6 * t89 + t317, t1 * t247 + t125 * t5 + t152 * t41 + t20 * t360 + t204 * t6 - t25 * t282 + t38 * t75 - t47 * t60 + t311, t1 * t41 + t20 * t6 + t5 * t60 + t38 * t25 + t2 * t42 + t19 * t7 - g(1) * (t121 * pkin(5) + t120 * qJ(6) + t342) - g(2) * (pkin(5) * t119 + qJ(6) * t118 + t266) - t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, t176, t351, t198, t350, qJDD(2), pkin(1) * t385 + t323, t424 - t218 + (pkin(1) * t254 + t309) * t250, 0, 0, qJDD(2), -t351, -t350, -t198, t176, t198 (t400 - t431) * qJDD(1) + ((-t177 - t241) * t247 + (-t167 + t326) * t250) * qJD(1), -t160 * t366 + t286 - 0.2e1 * t397, t218 + 0.2e1 * t239 + 0.2e1 * t240 + (qJD(1) * t160 - g(3)) * t247 + (qJD(1) * t137 - t309) * t250, -pkin(7) * qJD(1) * t298 - t126 * pkin(2) - g(1) * t318 - g(2) * t319 - g(3) * t371 - t115 * qJ(3) - t177 * qJD(3) - t137 * t160, -t246 * t394 - t409 (-t84 - t394) * t249 + (t83 + t295) * t246 (-t157 * t250 - t204 * t391) * qJD(1) + t447, t249 * t295 + t404 (-t204 * t247 * t249 + t155 * t250) * qJD(1) + t285, -t334, qJ(3) * t84 + t353 * t155 - t81 * t204 + t257 * t246 + t249 * t441 - t67 * t366, -qJ(3) * t83 + t353 * t157 + t82 * t204 - t246 * t441 + t257 * t249 + t68 * t366, t82 * t155 + t81 * t157 + (-t68 * t367 - t435 * t83 - t24 + (t155 * t435 - t68) * qJD(4)) * t249 + (t67 * t367 + t435 * t84 - t23 + (-t157 * t435 + t67) * qJD(4)) * t246 - t340, -g(1) * t201 - g(2) * t199 - g(3) * t316 + t93 * qJ(3) + t353 * t136 - t67 * t81 - t68 * t82 + (-qJD(4) * t300 - t23 * t246 - t24 * t249 + t247 * t309) * t435, t14, t437, t29, t284, -t460, -t334, t52 * t153 + t204 * t416 - t21 * t366 + t215 * t46 + t373 * t89 + t453 * t94 + t258, t52 * t154 - t204 * t413 + t215 * t47 + t22 * t366 + t282 * t373 - t374 * t94 - t457, -t282 * t416 + t36 * t89 - t438 + t443, t4 * t98 - t3 * t97 + t52 * t215 - g(1) * (t318 + t445) - g(2) * (t319 + t446) - g(3) * t293 + t373 * t94 + t413 * t22 + t416 * t21, t14, t29, -t437, -t334, t460, t284, t5 * t153 + t19 * t366 - t204 * t415 + t38 * t453 + t417 * t89 + t86 * t46 + t258, t282 * t415 + t31 * t89 - t439 + t443, -t5 * t154 - t20 * t366 + t414 * t204 - t417 * t282 + t374 * t38 - t86 * t47 + t457, t1 * t98 + t5 * t86 + t2 * t97 - g(1) * (t201 + t445) - g(2) * (t199 + t446) - g(3) * (t247 * t303 + t293) + t417 * t38 + t414 * t20 + t415 * t19 + t309 * (-t250 * t303 + t431); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t351, qJDD(2) + t198, -t242 * t254 - t253, qJD(2) * t177 + t202 + t286 - t397, 0, 0, 0, 0, 0, 0, -t246 * t436 + t130 - t365, -t249 * t436 - t364 - t392, t246 * t448 + t249 * t449, -t356 + t450 * t249 + (t23 - t406) * t246 + t340, 0, 0, 0, 0, 0, 0, t458, -t459, t263, -t94 * qJD(2) + t438, 0, 0, 0, 0, 0, 0, t458, t263, t459, -t38 * qJD(2) + t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t155 ^ 2 + t157 ^ 2, -t449, -t395, t448, t152, -g(1) * t138 - g(2) * t140 - t136 * t157 + t348 + t450, g(1) * t139 - g(2) * t141 + t136 * t155 + t406 + (qJD(4) * t114 - t237) * t246 + t347, 0, 0, t455, t307, t28, -t455, t290, t152, -t94 * t282 + (t152 * t402 - t157 * t89) * pkin(4) + t265, t27 * t204 + t94 * t89 + (-t152 * t244 - t157 * t282) * pkin(4) + t267, t22 * t282 - t423 + (-t244 * t46 - t402 * t47) * pkin(4) + (-t21 + t27) * t89, -t22 * t27 + t21 * t26 - g(1) * t181 - g(2) * t372 + (g(1) * t390 - t94 * t157 + t4 * t244 + t3 * t402 + t348) * pkin(4), t455, t28, -t307, t152, -t290, -t455, -t45 * t89 + (pkin(5) - t214) * t152 + t265 + t440, t20 * t282 - t212 * t46 + t214 * t47 - t423 + (t19 - t376) * t89, t212 * t152 - t38 * t89 + t45 * t282 + t146 + (0.2e1 * qJD(6) - t27) * t204 - t267, t1 * t212 + t2 * t214 - t38 * t45 - t19 * t26 - g(1) * (-pkin(5) * t118 + qJ(6) * t119 + t181 - t349) - g(2) * (pkin(5) * t120 - qJ(6) * t121 + t372) - g(3) * (-t206 + (-pkin(5) * t227 - qJ(6) * t226) * t250) + t376 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t291, -t271, t308, t21 * t282 + t22 * t89 + t256, 0, 0, 0, 0, 0, 0, t291, t308, t271, -t19 * t282 + t20 * t89 + t256 + t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t152 + t455, t28, -t436 - t422, -t20 * t204 - t277 - t430 - t440;];
tau_reg  = t10;
