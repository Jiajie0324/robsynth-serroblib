% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:39:17
% EndTime: 2019-05-06 12:39:54
% DurationCPUTime: 28.23s
% Computational Cost: add. (61551->664), mult. (130887->878), div. (0->0), fcn. (82393->8), ass. (0->479)
t922 = sin(qJ(4));
t925 = cos(qJ(4));
t926 = cos(qJ(2));
t981 = qJD(1) * t926;
t871 = qJD(2) * t922 + t925 * t981;
t873 = qJD(2) * t925 - t922 * t981;
t919 = sin(pkin(9));
t920 = cos(pkin(9));
t810 = t920 * t871 + t873 * t919;
t923 = sin(qJ(2));
t982 = qJD(1) * t923;
t902 = qJD(4) + t982;
t1015 = t810 * t902;
t978 = qJD(1) * qJD(2);
t960 = t923 * t978;
t974 = qJDD(1) * t926;
t880 = -t960 + t974;
t955 = t922 * qJDD(2) + t925 * t880;
t804 = -qJD(4) * t873 - t955;
t805 = -t871 * qJD(4) + t925 * qJDD(2) - t922 * t880;
t726 = t804 * t919 + t805 * t920;
t1052 = t726 - t1015;
t812 = -t871 * t919 + t873 * t920;
t743 = t812 * t810;
t906 = t926 * t978;
t976 = qJDD(1) * t923;
t879 = t906 + t976;
t864 = qJDD(4) + t879;
t1058 = t743 + t864;
t1019 = t1058 * t920;
t1039 = t902 ^ 2;
t809 = t812 ^ 2;
t766 = -t809 - t1039;
t649 = t766 * t919 + t1019;
t1020 = t1058 * t919;
t656 = t766 * t920 - t1020;
t575 = t649 * t922 - t656 * t925;
t555 = -t1052 * t926 + t575 * t923;
t577 = t649 * t925 + t922 * t656;
t924 = sin(qJ(1));
t927 = cos(qJ(1));
t520 = t555 * t924 - t577 * t927;
t1186 = pkin(6) * t520;
t522 = t555 * t927 + t577 * t924;
t1185 = pkin(6) * t522;
t564 = t1052 * t923 + t575 * t926;
t1184 = pkin(7) * t564;
t1037 = pkin(2) + pkin(8);
t1183 = pkin(1) * t564 + qJ(3) * t1052 + t1037 * t575;
t1182 = -pkin(1) * t577 + pkin(7) * t555;
t1040 = t810 ^ 2;
t785 = t1040 - t1039;
t664 = t785 * t919 + t1019;
t668 = t785 * t920 - t1020;
t603 = t664 * t925 + t668 * t922;
t791 = t902 * t812;
t957 = -t920 * t804 + t805 * t919;
t685 = -t957 + t791;
t568 = t603 * t923 + t685 * t926;
t598 = t664 * t922 - t668 * t925;
t1181 = t568 * t924 + t598 * t927;
t1180 = t568 * t927 - t598 * t924;
t1057 = t791 + t957;
t618 = t1052 * t920 - t1057 * t919;
t1022 = t1052 * t919;
t622 = -t1057 * t920 - t1022;
t546 = t618 * t925 + t622 * t922;
t736 = t809 - t1040;
t540 = t546 * t923 + t736 * t926;
t544 = -t618 * t922 + t622 * t925;
t1179 = t540 * t924 - t544 * t927;
t1178 = t540 * t927 + t544 * t924;
t1051 = t726 + t1015;
t1095 = t1051 * t919 + t685 * t920;
t1098 = -t920 * t1051 + t685 * t919;
t1119 = t1095 * t925 - t1098 * t922;
t1118 = t1095 * t922 + t1098 * t925;
t699 = t809 + t1040;
t1139 = t1118 * t923 - t699 * t926;
t1157 = t1119 * t924 + t1139 * t927;
t1176 = pkin(6) * t1157;
t1158 = -t1119 * t927 + t1139 * t924;
t1175 = pkin(6) * t1158;
t1168 = t603 * t926 - t685 * t923;
t1167 = t546 * t926 - t736 * t923;
t1165 = -pkin(3) * t1052 - t1037 * t577;
t1164 = pkin(3) * t575 - pkin(4) * t656 - qJ(3) * t577;
t1059 = -t743 + t864;
t1018 = t1059 * t919;
t1050 = -t1039 - t1040;
t1061 = t1050 * t920 - t1018;
t710 = t920 * t1059;
t1062 = t1050 * t919 + t710;
t1090 = t1061 * t925 - t1062 * t922;
t1089 = t1061 * t922 + t1062 * t925;
t1123 = t1057 * t926 + t1089 * t923;
t1136 = t1090 * t924 + t1123 * t927;
t1163 = pkin(6) * t1136;
t1137 = -t1090 * t927 + t1123 * t924;
t1162 = pkin(6) * t1137;
t1138 = -t1118 * t926 - t699 * t923;
t1161 = pkin(7) * t1138;
t1160 = -pkin(1) * t1138 + qJ(3) * t699 + t1037 * t1118;
t1159 = -pkin(1) * t1119 + pkin(7) * t1139;
t787 = -t809 + t1039;
t1099 = t920 * t787 + t1018;
t1100 = -t787 * t919 + t710;
t1116 = t1099 * t922 - t1100 * t925;
t1117 = -t1099 * t925 - t1100 * t922;
t1141 = t1051 * t926 - t1117 * t923;
t1156 = t1116 * t927 + t1141 * t924;
t1155 = -t1116 * t924 + t1141 * t927;
t916 = t923 ^ 2;
t929 = qJD(1) ^ 2;
t909 = t916 * t929;
t928 = qJD(2) ^ 2;
t896 = -t909 - t928;
t966 = t923 * t926 * t929;
t889 = -qJDD(2) + t966;
t988 = t926 * t889;
t831 = -t896 * t923 + t988;
t878 = 0.2e1 * t906 + t976;
t776 = t831 * t924 - t878 * t927;
t1153 = pkin(6) * t776;
t780 = t831 * t927 + t878 * t924;
t1152 = pkin(6) * t780;
t1122 = t1057 * t923 - t1089 * t926;
t1150 = pkin(7) * t1122;
t1149 = qJ(5) * t649;
t1148 = qJ(5) * t656;
t1143 = -pkin(1) * t1122 - qJ(3) * t1057 + t1037 * t1089;
t1142 = -pkin(1) * t1090 + pkin(7) * t1123;
t1140 = t1051 * t923 + t1117 * t926;
t1134 = -pkin(3) * t699 - t1037 * t1119;
t500 = pkin(3) * t1118 + pkin(4) * t1098 - qJ(3) * t1119;
t888 = qJDD(2) + t966;
t1004 = t888 * t923;
t917 = t926 ^ 2;
t994 = t917 * t929;
t897 = t928 + t994;
t833 = t897 * t926 + t1004;
t881 = -0.2e1 * t960 + t974;
t777 = t833 * t924 - t881 * t927;
t1133 = pkin(6) * t777;
t781 = t833 * t927 + t881 * t924;
t1132 = pkin(6) * t781;
t1127 = qJ(5) * t1098;
t1124 = pkin(4) * t699 + qJ(5) * t1095;
t1120 = pkin(3) * t1057 - t1037 * t1090;
t1115 = pkin(3) * t1089 + pkin(4) * t1062 - qJ(3) * t1090;
t989 = t926 * t888;
t828 = -t897 * t923 + t989;
t1114 = pkin(1) * t828;
t1111 = pkin(7) * t828;
t1110 = pkin(7) * t831;
t1103 = qJ(5) * t1061;
t1102 = qJ(5) * t1062;
t1101 = qJ(6) * t1052;
t895 = -t909 + t928;
t830 = -t895 * t923 + t989;
t973 = qJDD(1) * t927;
t1097 = t830 * t924 - t923 * t973;
t975 = qJDD(1) * t924;
t1096 = t830 * t927 + t923 * t975;
t938 = (-t810 * t919 - t812 * t920) * t902;
t998 = t902 * t919;
t775 = t812 * t998;
t997 = t902 * t920;
t969 = t810 * t997;
t949 = t775 - t969;
t1043 = t922 * t938 - t925 * t949;
t1044 = -t922 * t949 - t925 * t938;
t851 = t926 * t864;
t1063 = -t1044 * t923 + t851;
t1094 = t1043 * t927 + t1063 * t924;
t1093 = -t1043 * t924 + t1063 * t927;
t940 = t919 * t957 + t969;
t950 = t810 * t998 - t920 * t957;
t1042 = t922 * t950 - t925 * t940;
t1041 = -t922 * t940 - t925 * t950;
t970 = t926 * t743;
t1066 = -t1041 * t923 - t970;
t1092 = t1042 * t927 + t1066 * t924;
t1091 = -t1042 * t924 + t1066 * t927;
t1088 = 2 * qJD(3);
t1003 = t889 * t923;
t825 = t896 * t926 + t1003;
t1087 = pkin(1) * t825;
t1086 = pkin(7) * t825;
t1085 = pkin(7) * t833;
t821 = t873 * t871;
t1056 = -t821 + t864;
t1072 = t1056 * t922;
t1071 = t1056 * t925;
t898 = -t928 + t994;
t834 = t898 * t926 + t1003;
t1068 = t834 * t924 - t926 * t973;
t1067 = t834 * t927 + t924 * t974;
t971 = t923 * t743;
t1065 = t1041 * t926 - t971;
t850 = t923 * t864;
t1064 = t1044 * t926 + t850;
t946 = t879 + t906;
t1060 = qJ(3) * t946;
t1055 = t880 * pkin(3) - pkin(8) * t994;
t1054 = -pkin(2) * t960 + t1088 * t982;
t891 = pkin(3) * t982 - qJD(2) * pkin(8);
t892 = g(1) * t924 - t927 * g(2);
t943 = -qJDD(1) * pkin(1) - t892;
t932 = -t1054 + t943 - t1060;
t702 = -t891 * t982 + (-pkin(3) * t917 - pkin(7)) * t929 - t1037 * t880 + t932;
t893 = g(1) * t927 + g(2) * t924;
t854 = -pkin(1) * t929 + qJDD(1) * pkin(7) - t893;
t839 = t926 * g(3) + t923 * t854;
t1032 = qJ(3) * t923;
t1036 = pkin(2) * t926;
t948 = -t1032 - t1036;
t876 = t948 * qJD(1);
t939 = -qJDD(2) * pkin(2) - t928 * qJ(3) + t876 * t982 + qJDD(3) + t839;
t724 = -t888 * pkin(8) + (t879 - t906) * pkin(3) + t939;
t638 = t922 * t702 - t925 * t724;
t1011 = t871 * t902;
t758 = t805 + t1011;
t595 = pkin(4) * t1056 - qJ(5) * t758 - t638;
t639 = t925 * t702 + t922 * t724;
t838 = pkin(4) * t902 - qJ(5) * t873;
t862 = t871 ^ 2;
t605 = -pkin(4) * t862 + qJ(5) * t804 - t838 * t902 + t639;
t539 = -0.2e1 * qJD(5) * t810 + t919 * t595 + t920 * t605;
t1053 = -t898 * t923 + t988;
t1049 = pkin(5) * t957 - t1101;
t677 = t726 * t919 + t812 * t997;
t678 = t726 * t920 - t775;
t612 = t677 * t922 - t678 * t925;
t613 = -t677 * t925 - t678 * t922;
t941 = -t613 * t923 + t970;
t1048 = t927 * t612 + t924 * t941;
t912 = t923 * g(3);
t1047 = (qJD(1) * t876 + t854) * t926 - t928 * pkin(2) - t912;
t1046 = -t612 * t924 + t927 * t941;
t1045 = -t804 * pkin(4) - t862 * qJ(5) + t838 * t873 + qJDD(5);
t863 = t873 ^ 2;
t1038 = 2 * qJD(6);
t1035 = pkin(5) * t920;
t983 = t916 + t917;
t883 = t983 * qJDD(1);
t886 = t909 + t994;
t817 = t883 * t924 + t886 * t927;
t1034 = pkin(6) * t817;
t1033 = pkin(7) * t929;
t1031 = qJ(6) * t920;
t958 = -t920 * t595 + t605 * t919;
t979 = qJD(5) * t812;
t538 = t958 + 0.2e1 * t979;
t502 = -t538 * t920 + t539 * t919;
t1030 = t502 * t925;
t972 = qJDD(2) * qJ(3);
t933 = t1047 + t972;
t722 = (t1088 + t891) * qJD(2) + t933 + t1055;
t642 = t722 + t1045;
t1028 = t642 * t919;
t1027 = t642 * t920;
t794 = t821 + t864;
t1016 = t794 * t925;
t853 = -t943 + t1033;
t1013 = t853 * t923;
t1012 = t853 * t926;
t1010 = t878 * t923;
t1006 = t881 * t926;
t996 = t902 * t922;
t995 = t902 * t925;
t993 = t922 * t502;
t992 = t922 * t722;
t991 = t922 * t794;
t990 = t925 * t722;
t986 = -t863 - t1039;
t985 = pkin(1) * t886 + pkin(7) * t883;
t977 = qJD(3) * qJD(2);
t968 = t923 * t821;
t967 = t926 * t821;
t959 = -qJ(6) * t919 - pkin(4);
t503 = t538 * t919 + t920 * t539;
t840 = t854 * t926 - t912;
t761 = t839 * t923 + t926 * t840;
t823 = -t892 * t924 - t927 * t893;
t954 = t924 * t966;
t953 = t927 * t966;
t885 = -t924 * t929 + t973;
t952 = -pkin(6) * t885 - g(3) * t924;
t951 = t926 * t613 + t971;
t947 = pkin(2) * t923 - qJ(3) * t926;
t571 = -t638 * t925 + t639 * t922;
t572 = t922 * t638 + t925 * t639;
t760 = t839 * t926 - t840 * t923;
t945 = t895 * t926 + t1004;
t822 = t892 * t927 - t893 * t924;
t944 = t805 - t1011;
t735 = pkin(5) * t810 - qJ(6) * t812;
t942 = t864 * qJ(6) + t902 * t1038 - t810 * t735 + t539;
t937 = -t864 * pkin(5) - qJ(6) * t1039 + qJDD(6) + t958;
t935 = (-qJD(4) + t902) * t873 - t955;
t934 = -t1047 - 0.2e1 * t977;
t799 = -0.2e1 * t979;
t527 = -t735 * t812 + t799 - t937;
t762 = t933 + 0.2e1 * t977;
t931 = pkin(2) * t880 + t1054 + t853;
t930 = -qJD(2) * t891 + t812 * t1038 - t1045 - t1049 - t1055 + t934 - t972;
t887 = -t909 + t994;
t884 = t927 * t929 + t975;
t874 = t947 * qJDD(1);
t866 = t983 * t978;
t849 = -pkin(6) * t884 + g(3) * t927;
t846 = -t863 + t1039;
t845 = t862 - t1039;
t844 = qJDD(2) * t924 + t866 * t927;
t843 = t879 * t926 - t916 * t978;
t842 = -qJDD(2) * t927 + t866 * t924;
t841 = -t880 * t923 - t917 * t978;
t826 = t946 * t923;
t824 = (t880 - t960) * t926;
t819 = t863 - t862;
t818 = t883 * t927 - t886 * t924;
t816 = pkin(6) * t818;
t815 = t1006 - t1010;
t814 = t878 * t926 + t881 * t923;
t806 = -t1039 - t862;
t803 = t843 * t927 - t954;
t802 = t841 * t927 + t954;
t801 = t843 * t924 + t953;
t800 = t841 * t924 - t953;
t792 = -t862 - t863;
t774 = -t1012 - t1086;
t773 = -t1013 - t1111;
t771 = (t871 * t925 - t873 * t922) * t902;
t770 = (t871 * t922 + t873 * t925) * t902;
t769 = t815 * t927 - t887 * t924;
t768 = t815 * t924 + t887 * t927;
t764 = t839 - t1114;
t763 = t840 - t1087;
t753 = (qJD(4) + t902) * t873 + t955;
t751 = qJ(3) * t886 + t939;
t750 = pkin(2) * t886 + t762;
t749 = -t805 * t922 - t873 * t995;
t748 = t804 * t922 - t871 * t995;
t747 = -t805 * t925 + t873 * t996;
t746 = -t804 * t925 - t871 * t996;
t745 = t931 + t1060;
t744 = -t770 * t923 + t851;
t741 = t846 * t922 - t1071;
t740 = -t845 * t922 - t1016;
t739 = -t845 * t925 + t991;
t738 = -t846 * t925 - t1072;
t734 = -t922 * t986 - t1016;
t733 = t925 * t986 - t991;
t732 = -t1033 + (-t880 - t881) * pkin(2) + t932;
t729 = (t878 + t946) * qJ(3) + t931;
t728 = t761 * t927 - t853 * t924;
t727 = t761 * t924 + t853 * t927;
t715 = t806 * t925 - t1072;
t714 = t806 * t922 + t1071;
t705 = pkin(2) * t888 - qJ(3) * t897 + t1114 - t939;
t704 = -t749 * t923 + t967;
t703 = -t746 * t923 - t967;
t701 = t1087 + pkin(2) * t896 + (-qJDD(2) + t889) * qJ(3) + t934;
t696 = t762 * t926 + t923 * t939;
t695 = t762 * t923 - t926 * t939;
t694 = t758 * t922 + t925 * t935;
t693 = t753 * t925 + t922 * t944;
t692 = -t758 * t925 + t922 * t935;
t691 = t753 * t922 - t925 * t944;
t681 = -pkin(2) * t1010 + t729 * t926 + t1086;
t680 = -qJ(3) * t1006 - t732 * t923 + t1111;
t672 = -t750 * t923 + t751 * t926;
t671 = -t738 * t923 + t758 * t926;
t670 = -t740 * t923 + t926 * t935;
t661 = t733 * t923 + t926 * t944;
t658 = -t733 * t926 + t923 * t944;
t653 = t714 * t923 + t753 * t926;
t652 = -t714 * t926 + t753 * t923;
t651 = -t691 * t923 + t819 * t926;
t646 = t692 * t923 + t792 * t926;
t645 = -t692 * t926 + t792 * t923;
t641 = t696 * t927 - t745 * t924;
t640 = t696 * t924 + t745 * t927;
t630 = -pkin(1) * t695 + pkin(2) * t939 - qJ(3) * t762;
t629 = t661 * t927 + t734 * t924;
t628 = t661 * t924 - t734 * t927;
t627 = t653 * t927 + t715 * t924;
t626 = t653 * t924 - t715 * t927;
t625 = pkin(3) * t692 - qJ(3) * t694;
t624 = -pkin(7) * t695 - t745 * t947;
t588 = t646 * t927 + t694 * t924;
t587 = t646 * t924 - t694 * t927;
t586 = pkin(3) * t944 - t1037 * t734 - t992;
t585 = pkin(3) * t753 - t1037 * t715 + t990;
t584 = t1027 - t1148;
t579 = pkin(3) * t733 - qJ(3) * t734 - t639;
t574 = t1028 - t1102;
t573 = pkin(3) * t714 - qJ(3) * t715 - t638;
t562 = -pkin(1) * t658 - qJ(3) * t944 + t1037 * t733 - t990;
t561 = -pkin(4) * t1052 + t1028 - t1149;
t560 = (pkin(5) * t902 - (2 * qJD(6))) * t812 + t642 + t1049;
t559 = -pkin(1) * t652 - qJ(3) * t753 + t1037 * t714 - t992;
t558 = t571 * t923 + t722 * t926;
t557 = -t571 * t926 + t722 * t923;
t556 = -pkin(4) * t1057 - t1027 + t1103;
t543 = (-t1057 - t791) * pkin(5) + t930;
t542 = -pkin(5) * t791 + t1101 + t930;
t532 = pkin(3) * t792 - t1037 * t694 - t572;
t526 = -pkin(5) * t1039 + t942;
t525 = pkin(3) * t571 - qJ(3) * t572;
t524 = -pkin(7) * t658 + t579 * t926 - t586 * t923;
t523 = -pkin(7) * t652 + t573 * t926 - t585 * t923;
t518 = -pkin(1) * t645 - qJ(3) * t792 + t1037 * t692 + t571;
t517 = qJ(6) * t699 + (0.2e1 * qJD(5) + t735) * t812 + t937;
t516 = pkin(3) * t722 - t1037 * t572;
t515 = (t699 - t1039) * pkin(5) + t942;
t514 = t558 * t927 + t572 * t924;
t513 = t558 * t924 - t572 * t927;
t512 = -t1031 * t1057 - t543 * t919 - t1102;
t511 = -pkin(5) * t1022 + t542 * t920 + t1148;
t510 = t1057 * t959 + t920 * t543 + t1103;
t509 = t1149 + t919 * t542 + (pkin(4) + t1035) * t1052;
t508 = -pkin(7) * t645 - t532 * t923 + t625 * t926;
t499 = -pkin(1) * t557 - qJ(3) * t722 + t1037 * t571;
t498 = -t1164 - t539;
t497 = -pkin(4) * t642 + qJ(5) * t503;
t496 = t1115 + t799 - t958;
t495 = -t502 - t1127;
t494 = -t925 * t561 - t922 * t584 - t1165;
t493 = t526 * t920 - t527 * t919;
t492 = t526 * t919 + t527 * t920;
t490 = -pkin(5) * t1051 + qJ(6) * t685 + t500;
t489 = t1124 + t503;
t488 = pkin(5) * t1059 + qJ(6) * t1050 + t1115 + t527;
t487 = -t925 * t556 - t922 * t574 + t1120;
t486 = qJ(6) * t1058 + (-t766 - t1039) * pkin(5) + t942 + t1164;
t485 = t561 * t922 - t584 * t925 - t1183;
t484 = -t515 * t919 + t517 * t920 - t1127;
t483 = t515 * t920 + t517 * t919 + t1124;
t482 = -pkin(7) * t557 - t516 * t923 + t525 * t926;
t481 = t556 * t922 - t574 * t925 + t1143;
t480 = -qJ(5) * t492 + (pkin(5) * t919 - t1031) * t560;
t479 = t503 * t925 - t993;
t478 = t503 * t922 + t1030;
t477 = -t925 * t510 - t922 * t512 + t1120;
t476 = t478 * t923 + t642 * t926;
t475 = -t478 * t926 + t642 * t923;
t474 = -t925 * t509 - t922 * t511 + t1165;
t473 = qJ(5) * t493 + (t959 - t1035) * t560;
t472 = t510 * t922 - t512 * t925 + t1143;
t471 = -t492 * t922 + t493 * t925;
t470 = t492 * t925 + t493 * t922;
t469 = t509 * t922 - t511 * t925 + t1183;
t468 = -t494 * t923 + t498 * t926 - t1184;
t467 = t470 * t923 + t560 * t926;
t466 = -t470 * t926 + t560 * t923;
t465 = -t487 * t923 + t496 * t926 - t1150;
t464 = -t925 * t489 - t922 * t495 + t1134;
t463 = -t477 * t923 + t488 * t926 - t1150;
t462 = t489 * t922 - t495 * t925 + t1160;
t461 = -t474 * t923 + t486 * t926 + t1184;
t460 = t476 * t927 + t479 * t924;
t459 = t476 * t924 - t479 * t927;
t458 = -t925 * t483 - t922 * t484 + t1134;
t457 = t483 * t922 - t484 * t925 + t1160;
t456 = pkin(3) * t478 + pkin(4) * t502 - qJ(3) * t479;
t455 = -t464 * t923 + t500 * t926 - t1161;
t454 = t467 * t927 + t471 * t924;
t453 = t467 * t924 - t471 * t927;
t452 = -t458 * t923 + t490 * t926 - t1161;
t451 = pkin(3) * t642 + qJ(5) * t993 - t1037 * t479 - t925 * t497;
t450 = pkin(3) * t470 + pkin(4) * t492 + pkin(5) * t527 - qJ(3) * t471 + qJ(6) * t526;
t449 = -pkin(1) * t475 - qJ(3) * t642 + qJ(5) * t1030 + t1037 * t478 + t497 * t922;
t448 = pkin(3) * t560 - t1037 * t471 - t925 * t473 - t922 * t480;
t447 = -pkin(1) * t466 - qJ(3) * t560 + t1037 * t470 + t922 * t473 - t925 * t480;
t446 = -pkin(7) * t475 - t451 * t923 + t456 * t926;
t445 = -pkin(7) * t466 - t448 * t923 + t450 * t926;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t884, -t885, 0, t823, 0, 0, 0, 0, 0, 0, -t781, t780, t818, t728, 0, 0, 0, 0, 0, 0, t818, t781, -t780, t641, 0, 0, 0, 0, 0, 0, t627, t629, t588, t514, 0, 0, 0, 0, 0, 0, t1136, -t522, t1157, t460, 0, 0, 0, 0, 0, 0, t1136, t1157, t522, t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t885, -t884, 0, t822, 0, 0, 0, 0, 0, 0, -t777, t776, t817, t727, 0, 0, 0, 0, 0, 0, t817, t777, -t776, t640, 0, 0, 0, 0, 0, 0, t626, t628, t587, t513, 0, 0, 0, 0, 0, 0, t1137, -t520, t1158, t459, 0, 0, 0, 0, 0, 0, t1137, t1158, t520, t453; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t828, t825, 0, -t760, 0, 0, 0, 0, 0, 0, 0, -t828, -t825, t695, 0, 0, 0, 0, 0, 0, t652, t658, t645, t557, 0, 0, 0, 0, 0, 0, t1122, t564, t1138, t475, 0, 0, 0, 0, 0, 0, t1122, t1138, -t564, t466; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t885, 0, -t884, 0, t952, -t849, -t822, -pkin(6) * t822, t803, t769, t1096, t802, t1067, t844, -t764 * t924 + t773 * t927 + t1133, -t763 * t924 + t774 * t927 - t1153, t760 * t927 - t1034, -pkin(6) * t727 - (pkin(1) * t924 - pkin(7) * t927) * t760, t844, -t1096, -t1067, t803, t769, t802, t672 * t927 - t874 * t924 - t1034, t680 * t927 - t705 * t924 - t1133, t681 * t927 - t701 * t924 + t1153, -pkin(6) * t640 + t624 * t927 - t630 * t924, t704 * t927 - t747 * t924, t651 * t927 - t693 * t924, t671 * t927 - t741 * t924, t703 * t927 - t748 * t924, t670 * t927 - t739 * t924, t744 * t927 - t771 * t924, -pkin(6) * t626 + t523 * t927 - t559 * t924, -pkin(6) * t628 + t524 * t927 - t562 * t924, -pkin(6) * t587 + t508 * t927 - t518 * t924, -pkin(6) * t513 + t482 * t927 - t499 * t924, t1046, t1178, t1155, t1091, t1180, t1093, t465 * t927 - t481 * t924 - t1162, t468 * t927 - t485 * t924 + t1186, t455 * t927 - t462 * t924 - t1175, -pkin(6) * t459 + t446 * t927 - t449 * t924, t1046, t1155, -t1178, t1093, -t1180, t1091, t463 * t927 - t472 * t924 - t1162, t452 * t927 - t457 * t924 - t1175, t461 * t927 - t469 * t924 - t1186, -pkin(6) * t453 + t445 * t927 - t447 * t924; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t884, 0, t885, 0, t849, t952, t823, pkin(6) * t823, t801, t768, t1097, t800, t1068, t842, t764 * t927 + t773 * t924 - t1132, t763 * t927 + t774 * t924 + t1152, t760 * t924 + t816, pkin(6) * t728 - (-pkin(1) * t927 - pkin(7) * t924) * t760, t842, -t1097, -t1068, t801, t768, t800, t672 * t924 + t874 * t927 + t816, t680 * t924 + t705 * t927 + t1132, t681 * t924 + t701 * t927 - t1152, pkin(6) * t641 + t624 * t924 + t630 * t927, t704 * t924 + t747 * t927, t651 * t924 + t693 * t927, t671 * t924 + t741 * t927, t703 * t924 + t748 * t927, t670 * t924 + t739 * t927, t744 * t924 + t771 * t927, pkin(6) * t627 + t523 * t924 + t559 * t927, pkin(6) * t629 + t524 * t924 + t562 * t927, pkin(6) * t588 + t508 * t924 + t518 * t927, pkin(6) * t514 + t482 * t924 + t499 * t927, t1048, t1179, t1156, t1092, t1181, t1094, t465 * t924 + t481 * t927 + t1163, t468 * t924 + t485 * t927 - t1185, t455 * t924 + t462 * t927 + t1176, pkin(6) * t460 + t446 * t924 + t449 * t927, t1048, t1156, -t1179, t1094, -t1181, t1092, t463 * t924 + t472 * t927 + t1163, t452 * t924 + t457 * t927 + t1176, t461 * t924 + t469 * t927 + t1185, pkin(6) * t454 + t445 * t924 + t447 * t927; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t892, t893, 0, 0, t826, t814, t945, t824, -t1053, 0, pkin(1) * t881 + t1012 - t1085, -pkin(1) * t878 - t1013 + t1110, t761 + t985, pkin(1) * t853 + pkin(7) * t761, 0, -t945, t1053, t826, t814, t824, t750 * t926 + t751 * t923 + t985, t1085 + t926 * t732 + (-pkin(1) - t1032) * t881, -t1110 + t923 * t729 + (pkin(1) + t1036) * t878, pkin(7) * t696 + (pkin(1) - t948) * t745, t749 * t926 + t968, t691 * t926 + t819 * t923, t738 * t926 + t758 * t923, t746 * t926 - t968, t740 * t926 + t923 * t935, t770 * t926 + t850, -pkin(1) * t715 + pkin(7) * t653 + t573 * t923 + t585 * t926, -pkin(1) * t734 + pkin(7) * t661 + t579 * t923 + t586 * t926, -pkin(1) * t694 + pkin(7) * t646 + t532 * t926 + t625 * t923, -pkin(1) * t572 + pkin(7) * t558 + t516 * t926 + t525 * t923, t951, -t1167, t1140, t1065, -t1168, t1064, t487 * t926 + t496 * t923 + t1142, t494 * t926 + t498 * t923 - t1182, t464 * t926 + t500 * t923 + t1159, -pkin(1) * t479 + pkin(7) * t476 + t451 * t926 + t456 * t923, t951, t1140, t1167, t1064, t1168, t1065, t477 * t926 + t488 * t923 + t1142, t458 * t926 + t490 * t923 + t1159, t474 * t926 + t486 * t923 + t1182, -pkin(1) * t471 + pkin(7) * t467 + t448 * t926 + t450 * t923;];
tauB_reg  = t1;
