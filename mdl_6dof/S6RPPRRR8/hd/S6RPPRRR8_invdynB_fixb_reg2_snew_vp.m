% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:15:11
% EndTime: 2019-05-05 16:15:34
% DurationCPUTime: 20.80s
% Computational Cost: add. (95376->691), mult. (218270->1035), div. (0->0), fcn. (160398->10), ass. (0->453)
t752 = sin(qJ(4));
t747 = sin(pkin(10));
t748 = cos(pkin(10));
t756 = cos(qJ(4));
t771 = t747 * t756 + t748 * t752;
t718 = t771 * qJD(1);
t720 = (-t747 * t752 + t748 * t756) * qJD(1);
t803 = t720 * t718;
t842 = qJDD(4) - t803;
t845 = t752 * t842;
t844 = t756 * t842;
t796 = t720 * qJD(4);
t832 = t771 * qJDD(1);
t673 = -t832 - t796;
t664 = qJDD(5) - t673;
t762 = qJDD(6) + t664;
t758 = qJD(1) ^ 2;
t753 = sin(qJ(1));
t757 = cos(qJ(1));
t730 = t753 * g(1) - t757 * g(2);
t772 = qJDD(2) - t730;
t766 = -t758 * qJ(2) + t772;
t787 = -0.2e1 * qJD(3) * qJD(1);
t825 = pkin(1) + qJ(3);
t843 = -qJDD(1) * t825 + t766 + t787;
t750 = sin(qJ(6));
t751 = sin(qJ(5));
t755 = cos(qJ(5));
t692 = -t755 * qJD(4) + t720 * t751;
t694 = qJD(4) * t751 + t720 * t755;
t754 = cos(qJ(6));
t640 = t754 * t692 + t694 * t750;
t642 = -t692 * t750 + t694 * t754;
t588 = t642 * t640;
t835 = -t588 + t762;
t841 = t750 * t835;
t651 = t694 * t692;
t833 = -t651 + t664;
t840 = t751 * t833;
t839 = t754 * t835;
t838 = t755 * t833;
t791 = qJDD(1) * t747;
t743 = t747 ^ 2;
t744 = t748 ^ 2;
t798 = t743 + t744;
t837 = pkin(3) * t791 - (pkin(7) * t798 + t825) * t758;
t836 = t798 * t758;
t708 = qJD(5) + t718;
t705 = qJD(6) + t708;
t620 = t705 * t640;
t790 = qJDD(1) * t748;
t717 = -t752 * t791 + t756 * t790;
t797 = qJD(4) * t718;
t675 = t717 - t797;
t776 = -t755 * qJDD(4) + t751 * t675;
t624 = -qJD(5) * t694 - t776;
t625 = -t692 * qJD(5) + t751 * qJDD(4) + t755 * t675;
t765 = qJD(6) * t640 - t624 * t750 - t625 * t754;
t834 = -t620 - t765;
t658 = t708 * t692;
t593 = -t658 - t625;
t592 = -t658 + t625;
t666 = -g(3) * t748 + t747 * t843;
t777 = -t754 * t624 + t750 * t625;
t505 = (qJD(6) - t705) * t642 + t777;
t589 = t694 * (qJD(5) - t708) + t776;
t638 = t640 ^ 2;
t639 = t642 ^ 2;
t829 = t692 ^ 2;
t691 = t694 ^ 2;
t703 = t705 ^ 2;
t707 = t708 ^ 2;
t714 = t718 ^ 2;
t715 = t720 ^ 2;
t828 = qJD(4) ^ 2;
t827 = pkin(4) * t752;
t826 = t747 * g(3);
t824 = qJDD(1) * pkin(1);
t652 = -pkin(3) * t743 * t758 - pkin(7) * t791 + t666;
t761 = t826 + (t787 + (-pkin(3) * t747 - qJ(2)) * t758 + (-pkin(7) - t825) * qJDD(1) + t772) * t748;
t600 = t756 * t652 + t752 * t761;
t667 = pkin(4) * t718 - pkin(8) * t720;
t548 = -pkin(4) * t828 + qJDD(4) * pkin(8) - t667 * t718 + t600;
t793 = qJD(2) * qJD(1);
t741 = 0.2e1 * t793;
t731 = t757 * g(1) + t753 * g(2);
t745 = qJDD(1) * qJ(2);
t770 = t731 - t745;
t769 = -qJDD(3) + t770;
t564 = t741 + (-t675 + t797) * pkin(8) + (-t673 + t796) * pkin(4) - t769 + t837;
t491 = t751 * t548 - t755 * t564;
t460 = pkin(5) * t833 + pkin(9) * t593 - t491;
t492 = t755 * t548 + t751 * t564;
t653 = pkin(5) * t708 - pkin(9) * t694;
t470 = -pkin(5) * t829 + pkin(9) * t624 - t653 * t708 + t492;
t409 = -t754 * t460 + t470 * t750;
t410 = t750 * t460 + t754 * t470;
t373 = -t409 * t754 + t410 * t750;
t823 = t373 * t751;
t822 = t373 * t755;
t599 = t652 * t752 - t756 * t761;
t547 = -qJDD(4) * pkin(4) - t828 * pkin(8) + t667 * t720 + t599;
t485 = -t624 * pkin(5) - pkin(9) * t829 + t653 * t694 + t547;
t821 = t485 * t750;
t820 = t485 * t754;
t530 = -t599 * t756 + t600 * t752;
t819 = t530 * t747;
t818 = t530 * t748;
t817 = t547 * t751;
t816 = t547 * t755;
t566 = t588 + t762;
t815 = t566 * t750;
t814 = t566 * t754;
t607 = t651 + t664;
t813 = t607 * t751;
t812 = t607 * t755;
t764 = t769 - 0.2e1 * t793;
t661 = t764 - t837;
t811 = t661 * t752;
t810 = t661 * t756;
t670 = qJDD(4) + t803;
t809 = t670 * t752;
t808 = t670 * t756;
t807 = t705 * t750;
t806 = t705 * t754;
t805 = t708 * t751;
t804 = t708 * t755;
t724 = t798 * qJDD(1);
t802 = t724 * t753;
t801 = t724 * t757;
t800 = t747 * t748;
t799 = t743 - t744;
t789 = qJDD(1) * t753;
t788 = qJDD(1) * t757;
t786 = t752 * t588;
t785 = t756 * t588;
t784 = t752 * t651;
t783 = t756 * t651;
t782 = t753 * t803;
t781 = t757 * t803;
t780 = -pkin(4) * t756 - pkin(3);
t374 = t409 * t750 + t754 * t410;
t437 = t491 * t751 + t755 * t492;
t531 = t599 * t752 + t756 * t600;
t704 = -t758 * pkin(1) + t741 - t770;
t709 = -t766 + t824;
t657 = t757 * t704 - t709 * t753;
t690 = -t730 * t753 - t757 * t731;
t696 = t758 * t825 + t764;
t775 = -t696 + t745;
t728 = -t753 * t758 + t788;
t774 = pkin(6) * t728 + g(3) * t753;
t729 = t757 * t758 + t789;
t773 = -pkin(6) * t729 + g(3) * t757;
t436 = -t491 * t755 + t492 * t751;
t665 = t748 * t843 + t826;
t609 = t748 * t665 + t747 * t666;
t610 = -t665 * t747 + t666 * t748;
t656 = t704 * t753 + t709 * t757;
t689 = t730 * t757 - t731 * t753;
t722 = t747 * t836;
t687 = -t722 * t753 + t747 * t788;
t685 = t722 * t757 + t747 * t789;
t727 = t799 * t758;
t725 = t799 * qJDD(1);
t721 = t748 * t836;
t702 = -t715 - t828;
t701 = -t715 + t828;
t700 = t714 - t828;
t699 = t729 * t800;
t698 = t728 * t800;
t688 = -t721 * t753 + t748 * t788;
t686 = t721 * t757 + t748 * t789;
t681 = -t757 * t836 - t802;
t680 = -t753 * t836 + t801;
t678 = t715 - t714;
t677 = pkin(2) * t791 - t748 * t696;
t676 = pkin(2) * t790 + t747 * t696;
t674 = t717 - 0.2e1 * t797;
t672 = t832 + 0.2e1 * t796;
t668 = -t828 - t714;
t660 = (-t718 * t756 + t720 * t752) * qJD(4);
t659 = (-t718 * t752 - t720 * t756) * qJD(4);
t655 = -t691 + t707;
t654 = -t707 + t829;
t650 = -t714 - t715;
t648 = -pkin(2) * t722 + t665;
t647 = -pkin(2) * t721 - t666;
t646 = -t691 + t829;
t637 = t675 * t756 - t752 * t796;
t636 = t675 * t752 + t756 * t796;
t635 = -t673 * t752 + t756 * t797;
t634 = t673 * t756 + t752 * t797;
t633 = -t691 - t707;
t632 = -t702 * t752 - t808;
t631 = -t701 * t752 + t844;
t630 = t700 * t756 - t809;
t629 = t702 * t756 - t809;
t628 = t701 * t756 + t845;
t627 = t700 * t752 + t808;
t626 = -t707 - t829;
t619 = t691 + t829;
t618 = -t672 * t756 - t674 * t752;
t617 = t717 * t752 - t756 * t832;
t616 = -t672 * t752 + t674 * t756;
t615 = -t717 * t756 - t752 * t832;
t614 = -t639 + t703;
t613 = t638 - t703;
t612 = t668 * t756 - t845;
t611 = t668 * t752 + t844;
t605 = (-t692 * t755 + t694 * t751) * t708;
t604 = (-t692 * t751 - t694 * t755) * t708;
t603 = -pkin(2) * t836 - t610;
t602 = -t659 * t748 - t660 * t747;
t601 = -t639 - t703;
t598 = -pkin(7) * t629 - t810;
t596 = t609 * t753 - t696 * t757;
t595 = -t609 * t757 - t696 * t753;
t590 = (-qJD(5) - t708) * t694 - t776;
t587 = -t639 + t638;
t586 = t625 * t755 - t694 * t805;
t585 = t625 * t751 + t694 * t804;
t584 = -t624 * t751 + t692 * t804;
t583 = t624 * t755 + t692 * t805;
t582 = -pkin(7) * t611 - t811;
t581 = -t636 * t748 - t637 * t747;
t580 = -t634 * t748 - t635 * t747;
t579 = -t629 * t747 + t632 * t748;
t578 = t629 * t748 + t632 * t747;
t577 = -t628 * t748 - t631 * t747;
t576 = -t627 * t748 - t630 * t747;
t575 = -t703 - t638;
t574 = t605 * t756 + t664 * t752;
t573 = t605 * t752 - t664 * t756;
t572 = t654 * t755 - t813;
t571 = -t655 * t751 + t838;
t570 = t654 * t751 + t812;
t569 = t655 * t755 + t840;
t568 = -pkin(3) * t674 + pkin(7) * t632 - t811;
t561 = -t633 * t751 - t812;
t560 = t633 * t755 - t813;
t559 = (-t640 * t754 + t642 * t750) * t705;
t558 = (-t640 * t750 - t642 * t754) * t705;
t557 = -t615 * t747 + t617 * t748;
t556 = -t616 * t748 - t618 * t747;
t555 = t615 * t748 + t617 * t747;
t554 = -pkin(3) * t672 + pkin(7) * t612 + t810;
t553 = t626 * t755 - t840;
t552 = t626 * t751 + t838;
t551 = pkin(2) * t609 - qJ(2) * t610;
t550 = -t611 * t747 + t612 * t748;
t549 = t611 * t748 + t612 * t747;
t545 = -t638 - t639;
t544 = t578 * t753 + t674 * t757;
t543 = -t578 * t757 + t674 * t753;
t542 = t586 * t756 + t784;
t541 = t584 * t756 - t784;
t540 = t586 * t752 - t783;
t539 = t584 * t752 + t783;
t538 = -pkin(2) * t696 - t610 * t825;
t537 = t549 * t753 + t672 * t757;
t536 = -t549 * t757 + t672 * t753;
t534 = -qJD(6) * t642 - t777;
t533 = t555 * t753 + t650 * t757;
t532 = -t555 * t757 + t650 * t753;
t529 = -t589 * t755 - t593 * t751;
t528 = t590 * t755 - t592 * t751;
t527 = -t589 * t751 + t593 * t755;
t526 = t590 * t751 + t592 * t755;
t525 = t613 * t754 - t815;
t524 = -t614 * t750 + t839;
t523 = t613 * t750 + t814;
t522 = t614 * t754 + t841;
t521 = -t601 * t750 - t814;
t520 = t601 * t754 - t815;
t519 = t572 * t756 - t589 * t752;
t518 = t571 * t756 - t593 * t752;
t517 = t572 * t752 + t589 * t756;
t516 = t571 * t752 + t593 * t756;
t515 = pkin(3) * t661 + pkin(7) * t531;
t514 = t561 * t756 + t592 * t752;
t513 = t561 * t752 - t592 * t756;
t512 = -t573 * t748 - t574 * t747;
t511 = t553 * t756 - t590 * t752;
t510 = t553 * t752 + t590 * t756;
t509 = -t620 + t765;
t504 = (qJD(6) + t705) * t642 + t777;
t503 = -t642 * t807 - t754 * t765;
t502 = t642 * t806 - t750 * t765;
t501 = -t534 * t750 + t640 * t806;
t500 = t534 * t754 + t640 * t807;
t499 = t528 * t756 - t646 * t752;
t498 = t528 * t752 + t646 * t756;
t497 = t575 * t754 - t841;
t496 = t575 * t750 + t839;
t495 = -pkin(7) * t615 - t530;
t494 = t529 * t756 - t619 * t752;
t493 = t529 * t752 + t619 * t756;
t490 = -t558 * t751 + t559 * t755;
t489 = t558 * t755 + t559 * t751;
t488 = -pkin(8) * t560 + t816;
t486 = -pkin(8) * t552 + t817;
t484 = -pkin(3) * t650 + pkin(7) * t617 + t531;
t483 = -t540 * t748 - t542 * t747;
t482 = -t539 * t748 - t541 * t747;
t481 = t490 * t756 + t752 * t762;
t480 = t490 * t752 - t756 * t762;
t479 = pkin(2) * t555 + pkin(3) * t615 - qJ(2) * t557;
t478 = pkin(2) * t578 + pkin(3) * t629 - qJ(2) * t579 - t600;
t477 = t531 * t748 - t819;
t476 = t531 * t747 + t818;
t475 = -pkin(4) * t560 + t492;
t474 = -t523 * t751 + t525 * t755;
t473 = -t522 * t751 + t524 * t755;
t472 = t523 * t755 + t525 * t751;
t471 = t522 * t755 + t524 * t751;
t469 = -pkin(4) * t552 + t491;
t467 = t476 * t753 - t661 * t757;
t466 = -t476 * t757 - t661 * t753;
t465 = pkin(2) * t549 + pkin(3) * t611 - qJ(2) * t550 - t599;
t464 = -t520 * t751 + t521 * t755;
t463 = t520 * t755 + t521 * t751;
t462 = -t517 * t748 - t519 * t747;
t461 = -t516 * t748 - t518 * t747;
t457 = -t513 * t747 + t514 * t748;
t456 = t513 * t748 + t514 * t747;
t455 = pkin(2) * t674 - t748 * t568 - t579 * t825 - t747 * t598;
t454 = -t505 * t754 - t509 * t750;
t453 = -t504 * t754 - t750 * t834;
t452 = -t505 * t750 + t509 * t754;
t451 = -t504 * t750 + t754 * t834;
t450 = -t510 * t747 + t511 * t748;
t449 = t510 * t748 + t511 * t747;
t448 = -t502 * t751 + t503 * t755;
t447 = -t500 * t751 + t501 * t755;
t446 = t502 * t755 + t503 * t751;
t445 = t500 * t755 + t501 * t751;
t444 = -t498 * t748 - t499 * t747;
t443 = -t496 * t751 + t497 * t755;
t442 = t496 * t755 + t497 * t751;
t441 = -pkin(9) * t520 + t820;
t440 = -pkin(9) * t496 + t821;
t439 = -t493 * t747 + t494 * t748;
t438 = t493 * t748 + t494 * t747;
t435 = pkin(2) * t672 - t550 * t825 - t748 * t554 - t747 * t582;
t434 = t448 * t756 + t786;
t433 = t447 * t756 - t786;
t432 = t448 * t752 - t785;
t431 = t447 * t752 + t785;
t430 = t456 * t753 + t560 * t757;
t429 = -t456 * t757 + t560 * t753;
t428 = t449 * t753 + t552 * t757;
t427 = -t449 * t757 + t552 * t753;
t426 = -t480 * t748 - t481 * t747;
t425 = t474 * t756 - t505 * t752;
t424 = t473 * t756 - t509 * t752;
t423 = t474 * t752 + t505 * t756;
t422 = t473 * t752 + t509 * t756;
t421 = t464 * t756 + t752 * t834;
t420 = t464 * t752 - t756 * t834;
t419 = t437 * t756 + t547 * t752;
t418 = t437 * t752 - t547 * t756;
t417 = -pkin(5) * t834 + pkin(9) * t521 + t821;
t416 = t438 * t753 + t527 * t757;
t415 = -t438 * t757 + t527 * t753;
t414 = t443 * t756 + t504 * t752;
t413 = t443 * t752 - t504 * t756;
t412 = -pkin(8) * t527 - t436;
t411 = -pkin(5) * t504 + pkin(9) * t497 - t820;
t407 = pkin(2) * t650 - t748 * t484 - t747 * t495 - t557 * t825;
t406 = -pkin(7) * t513 - t475 * t752 + t488 * t756;
t405 = -pkin(7) * t510 - t469 * t752 + t486 * t756;
t404 = pkin(2) * t476 + pkin(3) * t530 - qJ(2) * t477;
t403 = -t452 * t751 + t454 * t755;
t402 = -t451 * t751 + t453 * t755;
t401 = t452 * t755 + t454 * t751;
t400 = t451 * t755 + t453 * t751;
t399 = -pkin(3) * t560 + pkin(7) * t514 + t475 * t756 + t488 * t752;
t398 = t402 * t756 - t587 * t752;
t397 = t402 * t752 + t587 * t756;
t396 = -pkin(3) * t552 + pkin(7) * t511 + t469 * t756 + t486 * t752;
t395 = t403 * t756 + t545 * t752;
t394 = t403 * t752 - t545 * t756;
t393 = -t432 * t748 - t434 * t747;
t392 = -t431 * t748 - t433 * t747;
t391 = -pkin(2) * t661 + pkin(7) * t819 - t477 * t825 - t748 * t515;
t390 = -pkin(7) * t493 + t412 * t756 + t527 * t827;
t389 = -t423 * t748 - t425 * t747;
t388 = -t422 * t748 - t424 * t747;
t387 = -t420 * t747 + t421 * t748;
t386 = t420 * t748 + t421 * t747;
t385 = -t418 * t747 + t419 * t748;
t384 = t418 * t748 + t419 * t747;
t383 = pkin(7) * t494 + t752 * t412 + t527 * t780;
t382 = -pkin(4) * t401 - pkin(5) * t452;
t381 = -t413 * t747 + t414 * t748;
t380 = t413 * t748 + t414 * t747;
t379 = -pkin(4) * t463 - pkin(5) * t520 + t410;
t378 = pkin(2) * t456 + pkin(3) * t513 - pkin(4) * t592 + pkin(8) * t561 - qJ(2) * t457 + t817;
t377 = pkin(2) * t449 + pkin(3) * t510 + pkin(4) * t590 + pkin(8) * t553 - qJ(2) * t450 - t816;
t376 = -pkin(4) * t442 - pkin(5) * t496 + t409;
t375 = -pkin(8) * t463 - t417 * t751 + t441 * t755;
t372 = -pkin(7) * t418 + (-pkin(8) * t756 + t827) * t436;
t371 = t386 * t753 + t463 * t757;
t370 = -t386 * t757 + t463 * t753;
t369 = -pkin(8) * t442 - t411 * t751 + t440 * t755;
t368 = t384 * t753 + t436 * t757;
t367 = -t384 * t757 + t436 * t753;
t366 = t380 * t753 + t442 * t757;
t365 = -t380 * t757 + t442 * t753;
t364 = -pkin(5) * t485 + pkin(9) * t374;
t363 = -t397 * t748 - t398 * t747;
t362 = pkin(2) * t438 + pkin(3) * t493 + pkin(4) * t619 + pkin(8) * t529 - qJ(2) * t439 + t437;
t361 = -pkin(9) * t452 - t373;
t360 = -t394 * t747 + t395 * t748;
t359 = t394 * t748 + t395 * t747;
t358 = -pkin(5) * t545 + pkin(9) * t454 + t374;
t357 = pkin(7) * t419 + (-pkin(8) * t752 + t780) * t436;
t356 = pkin(2) * t560 - t748 * t399 - t747 * t406 - t457 * t825;
t355 = pkin(2) * t552 - t748 * t396 - t747 * t405 - t450 * t825;
t354 = t359 * t753 + t401 * t757;
t353 = -t359 * t757 + t401 * t753;
t352 = t374 * t755 - t823;
t351 = t374 * t751 + t822;
t350 = t352 * t756 + t485 * t752;
t349 = t352 * t752 - t485 * t756;
t348 = -pkin(7) * t420 + t375 * t756 - t379 * t752;
t347 = pkin(2) * t527 - t748 * t383 - t747 * t390 - t439 * t825;
t346 = -pkin(7) * t413 + t369 * t756 - t376 * t752;
t345 = pkin(2) * t384 + pkin(3) * t418 - pkin(4) * t547 + pkin(8) * t437 - qJ(2) * t385;
t344 = -pkin(3) * t463 + pkin(7) * t421 + t375 * t752 + t379 * t756;
t343 = -pkin(3) * t442 + pkin(7) * t414 + t369 * t752 + t376 * t756;
t342 = -pkin(4) * t351 - pkin(5) * t373;
t341 = pkin(2) * t386 + pkin(3) * t420 - pkin(4) * t834 + pkin(8) * t464 - qJ(2) * t387 + t417 * t755 + t441 * t751;
t340 = -pkin(8) * t401 - t358 * t751 + t361 * t755;
t339 = pkin(2) * t380 + pkin(3) * t413 - pkin(4) * t504 + pkin(8) * t443 - qJ(2) * t381 + t411 * t755 + t440 * t751;
t338 = -pkin(8) * t351 - pkin(9) * t822 - t364 * t751;
t337 = -t349 * t747 + t350 * t748;
t336 = t349 * t748 + t350 * t747;
t335 = pkin(2) * t436 - t748 * t357 - t747 * t372 - t385 * t825;
t334 = -pkin(7) * t394 + t340 * t756 - t382 * t752;
t333 = -pkin(3) * t401 + pkin(7) * t395 + t340 * t752 + t382 * t756;
t332 = t336 * t753 + t351 * t757;
t331 = -t336 * t757 + t351 * t753;
t330 = pkin(2) * t359 + pkin(3) * t394 - pkin(4) * t545 + pkin(8) * t403 - qJ(2) * t360 + t358 * t755 + t361 * t751;
t329 = pkin(2) * t463 - t748 * t344 - t747 * t348 - t387 * t825;
t328 = pkin(2) * t442 - t748 * t343 - t747 * t346 - t381 * t825;
t327 = -pkin(7) * t349 + t338 * t756 - t342 * t752;
t326 = -pkin(3) * t351 + pkin(7) * t350 + t338 * t752 + t342 * t756;
t325 = pkin(2) * t401 - t748 * t333 - t747 * t334 - t360 * t825;
t324 = pkin(2) * t336 + pkin(3) * t349 - pkin(4) * t485 + pkin(8) * t352 - pkin(9) * t823 - qJ(2) * t337 + t364 * t755;
t323 = pkin(2) * t351 - t748 * t326 - t747 * t327 - t337 * t825;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t729, -t728, 0, t690, 0, 0, 0, 0, 0, 0, 0, t729, t728, t657, 0, 0, 0, 0, 0, 0, t687, t688, t681, t596, 0, 0, 0, 0, 0, 0, t537, t544, t533, t467, 0, 0, 0, 0, 0, 0, t428, t430, t416, t368, 0, 0, 0, 0, 0, 0, t366, t371, t354, t332; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t728, -t729, 0, t689, 0, 0, 0, 0, 0, 0, 0, -t728, t729, t656, 0, 0, 0, 0, 0, 0, t685, t686, t680, t595, 0, 0, 0, 0, 0, 0, t536, t543, t532, t466, 0, 0, 0, 0, 0, 0, t427, t429, t415, t367, 0, 0, 0, 0, 0, 0, t365, t370, t353, t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t610, 0, 0, 0, 0, 0, 0, t550, t579, t557, t477, 0, 0, 0, 0, 0, 0, t450, t457, t439, t385, 0, 0, 0, 0, 0, 0, t381, t387, t360, t337; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t728, 0, -t729, 0, -t774, -t773, -t689, -pkin(6) * t689, 0, -t728, t729, 0, 0, 0, -t656, t774, t773, -pkin(6) * t656 + (-pkin(1) * t753 + qJ(2) * t757) * g(3), t699, -t725 * t753 - t727 * t757, t688, -t699, -t687, 0, -pkin(6) * t685 + t648 * t757 - t677 * t753, -pkin(6) * t686 + t647 * t757 - t676 * t753, -pkin(2) * t801 - pkin(6) * t680 - t603 * t753, -pkin(6) * t595 - t538 * t753 + t551 * t757, -t581 * t753 + t781, -t556 * t753 + t678 * t757, -t577 * t753 + t717 * t757, -t580 * t753 - t781, -t576 * t753 - t757 * t832, qJDD(4) * t757 - t602 * t753, -pkin(6) * t536 - t435 * t753 + t465 * t757, -pkin(6) * t543 - t455 * t753 + t478 * t757, -pkin(6) * t532 - t407 * t753 + t479 * t757, -pkin(6) * t466 - t391 * t753 + t404 * t757, -t483 * t753 + t585 * t757, -t444 * t753 + t526 * t757, -t461 * t753 + t569 * t757, -t482 * t753 + t583 * t757, -t462 * t753 + t570 * t757, -t512 * t753 + t604 * t757, -pkin(6) * t427 - t355 * t753 + t377 * t757, -pkin(6) * t429 - t356 * t753 + t378 * t757, -pkin(6) * t415 - t347 * t753 + t362 * t757, -pkin(6) * t367 - t335 * t753 + t345 * t757, -t393 * t753 + t446 * t757, -t363 * t753 + t400 * t757, -t388 * t753 + t471 * t757, -t392 * t753 + t445 * t757, -t389 * t753 + t472 * t757, -t426 * t753 + t489 * t757, -pkin(6) * t365 - t328 * t753 + t339 * t757, -pkin(6) * t370 - t329 * t753 + t341 * t757, -pkin(6) * t353 - t325 * t753 + t330 * t757, -pkin(6) * t331 - t323 * t753 + t324 * t757; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t729, 0, t728, 0, t773, -t774, t690, pkin(6) * t690, 0, -t729, -t728, 0, 0, 0, t657, -t773, t774, pkin(6) * t657 + (pkin(1) * t757 + qJ(2) * t753) * g(3), -t698, t725 * t757 - t727 * t753, t686, t698, -t685, 0, pkin(6) * t687 + t648 * t753 + t677 * t757, pkin(6) * t688 + t647 * t753 + t676 * t757, -pkin(2) * t802 + pkin(6) * t681 + t603 * t757, pkin(6) * t596 + t538 * t757 + t551 * t753, t581 * t757 + t782, t556 * t757 + t678 * t753, t577 * t757 + t717 * t753, t580 * t757 - t782, t576 * t757 - t753 * t832, qJDD(4) * t753 + t602 * t757, pkin(6) * t537 + t435 * t757 + t465 * t753, pkin(6) * t544 + t455 * t757 + t478 * t753, pkin(6) * t533 + t407 * t757 + t479 * t753, pkin(6) * t467 + t391 * t757 + t404 * t753, t483 * t757 + t585 * t753, t444 * t757 + t526 * t753, t461 * t757 + t569 * t753, t482 * t757 + t583 * t753, t462 * t757 + t570 * t753, t512 * t757 + t604 * t753, pkin(6) * t428 + t355 * t757 + t377 * t753, pkin(6) * t430 + t356 * t757 + t378 * t753, pkin(6) * t416 + t347 * t757 + t362 * t753, pkin(6) * t368 + t335 * t757 + t345 * t753, t393 * t757 + t446 * t753, t363 * t757 + t400 * t753, t388 * t757 + t471 * t753, t392 * t757 + t445 * t753, t389 * t757 + t472 * t753, t426 * t757 + t489 * t753, pkin(6) * t366 + t328 * t757 + t339 * t753, pkin(6) * t371 + t329 * t757 + t341 * t753, pkin(6) * t354 + t325 * t757 + t330 * t753, pkin(6) * t332 + t323 * t757 + t324 * t753; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t730, t731, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t772 - 0.2e1 * t824, -t731 + t741 + 0.2e1 * t745, pkin(1) * t709 + qJ(2) * t704, t744 * qJDD(1), -0.2e1 * t747 * t790, 0, t743 * qJDD(1), 0, 0, t722 * t825 + t747 * t775, t721 * t825 + t748 * t775, -qJ(2) * t836 + t724 * t825 - t609, -qJ(2) * t696 - t609 * t825, -t636 * t747 + t637 * t748, -t616 * t747 + t618 * t748, -t628 * t747 + t631 * t748, -t634 * t747 + t635 * t748, -t627 * t747 + t630 * t748, -t659 * t747 + t660 * t748, qJ(2) * t672 - t549 * t825 - t747 * t554 + t748 * t582, qJ(2) * t674 - t747 * t568 - t578 * t825 + t748 * t598, qJ(2) * t650 - t747 * t484 + t748 * t495 - t555 * t825, -pkin(7) * t818 - qJ(2) * t661 - t476 * t825 - t747 * t515, -t540 * t747 + t542 * t748, -t498 * t747 + t499 * t748, -t516 * t747 + t518 * t748, -t539 * t747 + t541 * t748, -t517 * t747 + t519 * t748, -t573 * t747 + t574 * t748, qJ(2) * t552 - t747 * t396 + t748 * t405 - t449 * t825, qJ(2) * t560 - t747 * t399 + t748 * t406 - t456 * t825, qJ(2) * t527 - t747 * t383 + t748 * t390 - t438 * t825, qJ(2) * t436 - t747 * t357 + t748 * t372 - t384 * t825, -t432 * t747 + t434 * t748, -t397 * t747 + t398 * t748, -t422 * t747 + t424 * t748, -t431 * t747 + t433 * t748, -t423 * t747 + t425 * t748, -t480 * t747 + t481 * t748, qJ(2) * t442 - t747 * t343 + t748 * t346 - t380 * t825, qJ(2) * t463 - t747 * t344 + t748 * t348 - t386 * t825, qJ(2) * t401 - t747 * t333 + t748 * t334 - t359 * t825, qJ(2) * t351 - t747 * t326 + t748 * t327 - t336 * t825;];
tauB_reg  = t1;
