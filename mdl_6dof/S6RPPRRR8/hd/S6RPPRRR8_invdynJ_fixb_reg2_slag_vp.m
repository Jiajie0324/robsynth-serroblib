% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPPRRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:36:26
% EndTime: 2019-03-09 02:36:39
% DurationCPUTime: 6.62s
% Computational Cost: add. (11466->551), mult. (23259->692), div. (0->0), fcn. (16908->14), ass. (0->266)
t212 = pkin(10) + qJ(4);
t198 = sin(t212);
t199 = cos(t212);
t224 = sin(qJ(1));
t228 = cos(qJ(1));
t373 = g(1) * t224 - g(2) * t228;
t239 = -g(3) * t198 + t199 * t373;
t217 = sin(pkin(10));
t220 = -pkin(1) - qJ(3);
t366 = -qJD(1) * qJD(3) + qJDD(1) * t220;
t162 = qJDD(2) + t366;
t273 = -pkin(7) * qJDD(1) + t162;
t126 = t273 * t217;
t218 = cos(pkin(10));
t127 = t273 * t218;
t179 = qJD(1) * t220 + qJD(2);
t275 = -pkin(7) * qJD(1) + t179;
t138 = t275 * t217;
t139 = t275 * t218;
t223 = sin(qJ(4));
t227 = cos(qJ(4));
t302 = qJD(4) * t227;
t303 = qJD(4) * t223;
t268 = t223 * t126 - t227 * t127 + t138 * t302 + t139 * t303;
t339 = qJDD(4) * pkin(4);
t39 = t268 - t339;
t237 = -t39 - t239;
t158 = t217 * t227 + t218 * t223;
t147 = t158 * qJD(1);
t383 = qJD(5) + t147;
t391 = qJD(5) * pkin(8) * t383 - t237;
t222 = sin(qJ(5));
t226 = cos(qJ(5));
t83 = t138 * t227 + t139 * t223;
t78 = qJD(4) * pkin(8) + t83;
t324 = t218 * t227;
t284 = qJD(1) * t324;
t305 = qJD(1) * t217;
t149 = -t223 * t305 + t284;
t197 = qJD(1) * qJ(2) + qJD(3);
t167 = pkin(3) * t305 + t197;
t79 = pkin(4) * t147 - pkin(8) * t149 + t167;
t41 = t222 * t79 + t226 * t78;
t390 = t383 * t41;
t357 = g(3) * t199;
t245 = t198 * t373 + t357;
t40 = -t222 * t78 + t226 * t79;
t300 = qJD(5) * t226;
t301 = qJD(5) * t222;
t287 = -t227 * t126 - t223 * t127 - t139 * t302;
t42 = -t138 * t303 - t287;
t38 = qJDD(4) * pkin(8) + t42;
t294 = qJD(1) * qJD(4);
t281 = t223 * t294;
t240 = t158 * qJDD(1) - t217 * t281;
t280 = t227 * t294;
t104 = t218 * t280 + t240;
t213 = qJDD(1) * qJ(2);
t214 = qJD(1) * qJD(2);
t372 = t213 + t214;
t170 = qJDD(3) + t372;
t292 = t217 * qJDD(1);
t190 = pkin(3) * t292;
t154 = t190 + t170;
t291 = t218 * qJDD(1);
t243 = -t217 * t280 - t218 * t281 - t223 * t292 + t227 * t291;
t50 = t104 * pkin(4) - pkin(8) * t243 + t154;
t8 = t222 * t50 + t226 * t38 + t79 * t300 - t301 * t78;
t261 = -t383 * t40 + t8;
t120 = -t226 * qJD(4) + t149 * t222;
t122 = qJD(4) * t222 + t149 * t226;
t221 = sin(qJ(6));
t225 = cos(qJ(6));
t257 = t120 * t221 - t225 * t122;
t64 = t225 * t120 + t122 * t221;
t356 = t64 * t257;
t323 = t221 * t222;
t160 = -t225 * t226 + t323;
t290 = qJD(5) + qJD(6);
t298 = qJD(6) * t225;
t345 = t160 * t147 - t225 * t300 - t226 * t298 + t290 * t323;
t161 = t221 * t226 + t222 * t225;
t109 = t290 * t161;
t344 = t161 * t147 + t109;
t229 = -pkin(9) - pkin(8);
t285 = qJD(5) * t229;
t334 = t147 * t222;
t103 = pkin(4) * t149 + pkin(8) * t147;
t129 = t223 * t138;
t82 = t139 * t227 - t129;
t49 = t222 * t103 + t226 * t82;
t389 = -pkin(9) * t334 + t222 * t285 - t49;
t48 = t226 * t103 - t222 * t82;
t388 = -pkin(5) * t149 - t48 + (-pkin(9) * t147 + t285) * t226;
t386 = qJD(4) * qJD(5) + t243;
t385 = t301 + t334;
t159 = -t223 * t217 + t324;
t271 = t226 * t383;
t101 = qJDD(5) + t104;
t322 = t222 * t101;
t384 = -t271 * t383 - t322;
t263 = g(1) * t228 + g(2) * t224;
t382 = t257 ^ 2 - t64 ^ 2;
t137 = qJD(6) + t383;
t288 = t149 * t300 + t222 * t386;
t249 = qJDD(4) * t226 - t288;
t299 = qJD(6) * t221;
t59 = -t222 * qJDD(4) + t149 * t301 - t226 * t386;
t19 = t120 * t298 + t122 * t299 - t221 * t249 + t225 * t59;
t381 = t137 * t64 - t19;
t28 = -pkin(9) * t122 + t40;
t26 = pkin(5) * t383 + t28;
t29 = -pkin(9) * t120 + t41;
t46 = t226 * t50;
t9 = -qJD(5) * t41 - t222 * t38 + t46;
t6 = pkin(5) * t101 + pkin(9) * t59 + t9;
t7 = pkin(9) * t249 + t8;
t1 = (qJD(6) * t26 + t7) * t225 + t221 * t6 - t29 * t299;
t216 = qJ(5) + qJ(6);
t203 = cos(t216);
t326 = t203 * t224;
t202 = sin(t216);
t327 = t202 * t228;
t131 = t198 * t326 + t327;
t325 = t203 * t228;
t328 = t202 * t224;
t133 = t198 * t325 - t328;
t77 = -qJD(4) * pkin(4) - t82;
t54 = pkin(5) * t120 + t77;
t380 = g(1) * t131 - g(2) * t133 + t203 * t357 + t54 * t64 - t1;
t130 = -t198 * t328 + t325;
t132 = t198 * t327 + t326;
t347 = t225 * t29;
t11 = t221 * t26 + t347;
t2 = -qJD(6) * t11 - t221 * t7 + t225 * t6;
t379 = -g(1) * t130 - g(2) * t132 + t202 * t357 + t54 * t257 + t2;
t236 = qJD(6) * t257 + t221 * t59 + t225 * t249;
t378 = -t137 * t257 + t236;
t94 = t160 * t158;
t92 = t161 * t158;
t210 = t217 ^ 2;
t211 = t218 ^ 2;
t306 = t210 + t211;
t376 = t179 * t306;
t355 = -pkin(7) + t220;
t165 = t355 * t217;
t166 = t355 * t218;
t375 = -t165 * t223 + t227 * t166;
t204 = t217 * pkin(3);
t219 = -pkin(7) - qJ(3);
t374 = t228 * t204 + t224 * t219;
t241 = -t263 + t170;
t151 = t158 * qJD(4);
t312 = t226 * t151;
t247 = -t159 * t301 - t312;
t311 = t226 * t228;
t318 = t222 * t224;
t142 = -t198 * t318 + t311;
t315 = t224 * t226;
t317 = t222 * t228;
t144 = t198 * t317 + t315;
t371 = -g(1) * t142 - g(2) * t144;
t370 = t9 + t390;
t369 = -t160 * t19 - t257 * t344;
t98 = qJDD(6) + t101;
t368 = -t137 * t345 + t161 * t98;
t367 = -t149 * t151 + t159 * t243;
t365 = t149 ^ 2;
t364 = 0.2e1 * t214;
t363 = pkin(5) * t222;
t171 = t229 * t222;
t172 = t229 * t226;
t118 = t171 * t225 + t172 * t221;
t354 = qJD(6) * t118 + t221 * t388 + t225 * t389;
t119 = t171 * t221 - t172 * t225;
t353 = -qJD(6) * t119 - t221 * t389 + t225 * t388;
t352 = t149 * t64;
t351 = t149 * t257;
t348 = t221 * t29;
t346 = t59 * t222;
t188 = qJ(2) + t204;
t102 = pkin(4) * t158 - pkin(8) * t159 + t188;
t107 = t165 * t227 + t166 * t223;
t105 = t226 * t107;
t53 = t222 * t102 + t105;
t152 = -t217 * t303 + t218 * t302;
t343 = -t160 * qJD(1) + t161 * t152 - t290 * t94;
t342 = t161 * qJD(1) + t160 * t152 + t290 * t92;
t297 = t120 * qJD(5);
t56 = t222 * t249;
t341 = -t226 * t297 + t56;
t340 = pkin(1) * qJDD(1);
t338 = t120 * t147;
t337 = t120 * t149;
t336 = t122 * t120;
t335 = t122 * t149;
t333 = t149 * t147;
t331 = t159 * t222;
t330 = t159 * t226;
t321 = t222 * t120;
t320 = t222 * t122;
t319 = t222 * t151;
t88 = t226 * t101;
t314 = t226 * t120;
t313 = t226 * t122;
t310 = -t151 * qJD(4) + t159 * qJDD(4);
t309 = t263 * t199;
t308 = t228 * pkin(1) + t224 * qJ(2);
t304 = qJD(4) * t147;
t286 = t224 * t204 + t308;
t206 = t228 * qJ(2);
t279 = -pkin(1) * t224 + t206;
t73 = -t158 * qJD(3) + qJD(4) * t375;
t99 = pkin(4) * t152 + pkin(8) * t151 + qJD(2);
t276 = -t222 * t73 + t226 * t99;
t52 = t226 * t102 - t107 * t222;
t274 = t306 * t162;
t272 = t222 * t383;
t270 = qJDD(2) - t340;
t269 = qJD(5) * t158 + qJD(1);
t267 = t161 * t236 + t345 * t64;
t266 = -t137 * t344 - t160 * t98;
t265 = pkin(5) * t385 - t83;
t264 = pkin(4) * t198 - pkin(8) * t199;
t36 = pkin(5) * t158 - pkin(9) * t330 + t52;
t44 = -pkin(9) * t331 + t53;
t21 = -t221 * t44 + t225 * t36;
t22 = t221 * t36 + t225 * t44;
t260 = t222 * t41 + t226 * t40;
t259 = t222 * t40 - t226 * t41;
t258 = t158 * t104 + t152 * t147;
t256 = t313 + t321;
t196 = pkin(5) * t226 + pkin(4);
t254 = t196 * t198 + t199 * t229;
t253 = t279 + t374;
t252 = -qJD(4) * t152 - t158 * qJDD(4);
t251 = -t383 * t385 + t88;
t250 = -t219 * t228 + t286;
t248 = t159 * t300 - t319;
t24 = t102 * t300 - t107 * t301 + t222 * t99 + t226 * t73;
t246 = -pkin(8) * t101 + t383 * t77;
t242 = t249 * t226;
t235 = t241 + t372;
t234 = -qJD(5) * t260 - t9 * t222 + t8 * t226;
t233 = t82 * t151 - t83 * t152 - t42 * t158 + t159 * t268 + t373;
t74 = qJD(3) * t159 + qJD(4) * t107;
t230 = qJD(1) ^ 2;
t146 = t147 ^ 2;
t145 = t198 * t311 - t318;
t143 = t198 * t315 + t317;
t95 = t160 * t159;
t93 = t161 * t159;
t75 = pkin(5) * t331 - t375;
t47 = pkin(5) * t248 + t74;
t33 = -t299 * t331 + (t290 * t330 - t319) * t225 + t247 * t221;
t31 = t109 * t159 - t221 * t319 + t225 * t312;
t25 = -qJD(5) * t53 + t276;
t23 = -pkin(5) * t249 + t39;
t18 = -pkin(9) * t248 + t24;
t16 = pkin(9) * t312 + pkin(5) * t152 + (-t105 + (pkin(9) * t159 - t102) * t222) * qJD(5) + t276;
t13 = t225 * t28 - t348;
t12 = -t221 * t28 - t347;
t10 = t225 * t26 - t348;
t4 = -qJD(6) * t22 + t16 * t225 - t18 * t221;
t3 = qJD(6) * t21 + t16 * t221 + t18 * t225;
t5 = [0, 0, 0, 0, 0, qJDD(1), t373, t263, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t373 - 0.2e1 * t340, 0.2e1 * t213 + t364 - t263, -t270 * pkin(1) - g(1) * t279 - g(2) * t308 + (t213 + t364) * qJ(2), t211 * qJDD(1), -0.2e1 * t217 * t291, 0, t210 * qJDD(1), 0, 0, t235 * t217, t235 * t218, t373 + t306 * (-t162 - t366) t170 * qJ(2) + t197 * qJD(2) - g(1) * (t220 * t224 + t206) - g(2) * (qJ(3) * t228 + t308) + t220 * t274 - qJD(3) * t376, t367, -t159 * t104 + t151 * t147 - t149 * t152 - t158 * t243, t310, t258, t252, 0, qJD(2) * t147 - qJD(4) * t74 + qJDD(4) * t375 + t104 * t188 + t152 * t167 + t154 * t158 - t198 * t263, qJD(2) * t149 - t73 * qJD(4) - t107 * qJDD(4) - t167 * t151 + t154 * t159 + t188 * t243 - t309, -t107 * t104 - t73 * t147 + t74 * t149 - t243 * t375 + t233, -g(1) * t253 - g(2) * t250 + t167 * qJD(2) + t42 * t107 + t154 * t188 - t268 * t375 + t83 * t73 - t82 * t74, t122 * t247 - t330 * t59 (t314 + t320) * t151 + (t242 + t346 + (-t313 + t321) * qJD(5)) * t159, t152 * t122 - t158 * t59 + t159 * t88 + t247 * t383, t120 * t248 - t159 * t56, -t120 * t152 + t158 * t249 - t159 * t322 - t248 * t383, t101 * t158 + t152 * t383, t25 * t383 + t52 * t101 + t9 * t158 + t40 * t152 + t74 * t120 + t375 * t249 - t77 * t319 - g(1) * t145 - g(2) * t143 + (t39 * t222 + t300 * t77) * t159, -t77 * t312 + g(1) * t144 - g(2) * t142 - t101 * t53 + t375 * t59 + t122 * t74 - t383 * t24 - t152 * t41 - t158 * t8 + (t39 * t226 - t301 * t77) * t159, -t24 * t120 + t53 * t249 - t25 * t122 + t52 * t59 + t260 * t151 + (qJD(5) * t259 - t8 * t222 - t9 * t226) * t159 + t309, t8 * t53 + t41 * t24 + t9 * t52 + t40 * t25 - t39 * t375 + t77 * t74 - g(1) * (t228 * t264 + t253) - g(2) * (t224 * t264 + t250) t19 * t95 + t257 * t31, t19 * t93 - t236 * t95 + t257 * t33 + t31 * t64, -t137 * t31 - t152 * t257 - t158 * t19 - t95 * t98, -t236 * t93 + t33 * t64, -t137 * t33 - t152 * t64 + t158 * t236 - t93 * t98, t137 * t152 + t158 * t98, -g(1) * t133 - g(2) * t131 + t10 * t152 + t137 * t4 + t158 * t2 + t21 * t98 + t23 * t93 - t236 * t75 + t33 * t54 + t47 * t64, g(1) * t132 - g(2) * t130 - t1 * t158 - t11 * t152 - t137 * t3 - t19 * t75 - t22 * t98 - t23 * t95 - t257 * t47 - t31 * t54, -t1 * t93 + t10 * t31 - t11 * t33 + t19 * t21 + t2 * t95 + t22 * t236 + t257 * t4 - t3 * t64 + t309, t1 * t22 + t11 * t3 + t2 * t21 + t10 * t4 + t23 * t75 + t54 * t47 - g(1) * (t206 + t374) - g(2) * t286 + (-g(1) * t254 - g(2) * (-t219 + t363)) * t228 + (-g(1) * (-pkin(1) - t363) - g(2) * t254) * t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t230, -qJ(2) * t230 + t270 - t373, 0, 0, 0, 0, 0, 0, -t230 * t217, -t230 * t218, -t306 * qJDD(1), -qJD(1) * t197 + t274 - t373, 0, 0, 0, 0, 0, 0, -qJD(1) * t147 + t310, -qJD(1) * t149 + t252, -t258 - t367, -qJD(1) * t167 - t233, 0, 0, 0, 0, 0, 0, -t158 * t322 + t151 * t120 + t159 * t249 + (-t222 * t152 - t226 * t269) * t383, -t158 * t88 + t122 * t151 + t159 * t59 + (-t226 * t152 + t222 * t269) * t383 (-t314 + t320) * t152 + t256 * qJD(1) + (qJD(5) * t256 + t242 - t346) * t158, -qJD(1) * t260 + t77 * t151 - t152 * t259 + t158 * t234 - t39 * t159 - t373, 0, 0, 0, 0, 0, 0, -t137 * t343 + t151 * t64 + t159 * t236 - t92 * t98, t137 * t342 - t151 * t257 + t159 * t19 + t94 * t98, -t19 * t92 - t236 * t94 - t257 * t343 + t342 * t64, -t1 * t94 - t10 * t343 - t11 * t342 + t151 * t54 - t159 * t23 - t2 * t92 - t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, t291, -t306 * t230, qJD(1) * t376 + t241, 0, 0, 0, 0, 0, 0 (t149 + t284) * qJD(4) + t240, t243 - t304, -t146 - t365, t147 * t83 + t149 * t82 + t190 + t241, 0, 0, 0, 0, 0, 0, t251 - t337, -t335 + t384 (t59 - t338) * t226 + t122 * t272 + t341, -t149 * t77 + t261 * t222 + t226 * t370 - t263, 0, 0, 0, 0, 0, 0, t266 - t352, t351 - t368, t267 + t369, t1 * t161 - t10 * t344 - t11 * t345 - t149 * t54 - t160 * t2 - t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t333, -t146 + t365, t243 + t304, -t333 (t149 - t284) * qJD(4) - t240, qJDD(4), qJD(4) * t83 - t149 * t167 - t239 - t268, t147 * t167 + (t82 + t129) * qJD(4) + t245 + t287, 0, 0, t122 * t271 - t346 (-t59 - t338) * t226 - t383 * t320 + t341, -t335 - t384, t120 * t272 + t242, t251 + t337, -t383 * t149, -pkin(4) * t288 - t48 * t383 - t40 * t149 - t83 * t120 + t246 * t222 + (t339 - t391) * t226, pkin(4) * t59 - t122 * t83 + t149 * t41 + t222 * t391 + t246 * t226 + t383 * t49, t49 * t120 + t48 * t122 + ((t122 * qJD(5) + t249) * pkin(8) + t261) * t226 + ((-t59 + t297) * pkin(8) - t370) * t222 - t245, -t40 * t48 - t41 * t49 - t77 * t83 + t237 * pkin(4) + (t234 - t245) * pkin(8), -t161 * t19 + t257 * t345, t267 - t369, t351 + t368, -t160 * t236 + t344 * t64, t266 + t352, -t137 * t149, -t10 * t149 + t118 * t98 + t137 * t353 + t160 * t23 + t196 * t236 - t203 * t239 + t265 * t64 + t344 * t54, t11 * t149 - t119 * t98 - t137 * t354 + t161 * t23 + t19 * t196 + t202 * t239 - t257 * t265 - t345 * t54, -t1 * t160 + t10 * t345 - t11 * t344 + t118 * t19 + t119 * t236 - t161 * t2 + t257 * t353 - t354 * t64 - t245, g(3) * t254 + t1 * t119 + t353 * t10 + t354 * t11 + t2 * t118 - t23 * t196 + t265 * t54 - t373 * (t196 * t199 - t198 * t229); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t336, -t120 ^ 2 + t122 ^ 2, t120 * t383 - t59, -t336, t122 * t383 + t249, t101, -t78 * t300 - t122 * t77 + t390 + t46 + (-qJD(5) * t79 + t357 - t38) * t222 + t371, g(1) * t143 - g(2) * t145 + t120 * t77 + t226 * t357 - t261, 0, 0, -t356, t382, t381, t356, t378, t98, -t12 * t137 + (-t122 * t64 - t137 * t299 + t225 * t98) * pkin(5) + t379, t13 * t137 + (t122 * t257 - t137 * t298 - t221 * t98) * pkin(5) + t380, -t10 * t64 - t11 * t257 - t12 * t257 + t13 * t64 + (t19 * t225 + t236 * t221 + (-t221 * t257 - t225 * t64) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t221 + t2 * t225 - t54 * t122 + t222 * t357 + (-t10 * t221 + t11 * t225) * qJD(6) + t371) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t382, t381, t356, t378, t98, t11 * t137 + t379, t10 * t137 + t380, 0, 0;];
tau_reg  = t5;
