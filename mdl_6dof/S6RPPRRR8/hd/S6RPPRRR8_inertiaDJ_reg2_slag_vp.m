% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR8_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:36:20
% EndTime: 2019-03-09 02:36:27
% DurationCPUTime: 2.86s
% Computational Cost: add. (4623->258), mult. (9371->458), div. (0->0), fcn. (9353->8), ass. (0->128)
t147 = pkin(1) + qJ(3);
t137 = -pkin(7) - t147;
t161 = sin(qJ(4));
t102 = t137 * t161;
t163 = cos(qJ(4));
t172 = t163 * qJD(3) + qJD(4) * t102;
t103 = t137 * t163;
t173 = t161 * qJD(3) - qJD(4) * t103;
t78 = sin(pkin(10));
t79 = cos(pkin(10));
t89 = t172 * t78 + t173 * t79;
t60 = t161 * t79 + t163 * t78;
t61 = -t161 * t78 + t163 * t79;
t70 = t78 * pkin(3) + qJ(2);
t94 = t60 * pkin(4) - pkin(8) * t61 + t70;
t175 = -qJD(5) * t94 + t89;
t53 = t60 * qJD(4);
t54 = t61 * qJD(4);
t91 = t79 * t102 + t78 * t103;
t174 = t54 * pkin(4) + t53 * pkin(8) - qJD(5) * t91 + qJD(2);
t169 = qJD(5) + qJD(6);
t162 = cos(qJ(6));
t81 = sin(qJ(5));
t126 = t162 * t81;
t80 = sin(qJ(6));
t82 = cos(qJ(5));
t63 = t80 * t82 + t126;
t43 = t169 * t63;
t125 = t162 * t82;
t151 = t80 * t81;
t98 = t125 - t151;
t12 = t43 * t61 + t98 * t53;
t35 = t98 * t60;
t120 = t162 * qJD(6);
t171 = t162 * qJD(5) + t120;
t142 = qJD(5) * t81;
t130 = t61 * t142;
t149 = t82 * t53;
t170 = t130 + t149;
t141 = qJD(5) * t82;
t100 = t61 * t141 - t53 * t81;
t76 = t81 ^ 2;
t77 = t82 ^ 2;
t144 = t76 - t77;
t118 = qJD(5) * t144;
t64 = (t78 ^ 2 + t79 ^ 2) * qJD(3);
t18 = -t81 * t91 + t82 * t94;
t19 = t81 * t94 + t82 * t91;
t108 = t18 * t81 - t19 * t82;
t8 = -t174 * t81 + t175 * t82;
t9 = t174 * t82 + t175 * t81;
t168 = t108 * qJD(5) + t8 * t81 - t82 * t9;
t58 = t61 ^ 2;
t167 = 0.2e1 * qJD(2);
t166 = -pkin(9) - pkin(8);
t165 = pkin(4) * t53;
t164 = t54 * pkin(5);
t26 = t172 * t79 - t173 * t78;
t40 = t78 * t102 - t79 * t103;
t160 = t40 * t26;
t159 = t43 * t60;
t156 = t54 * t63;
t155 = t60 * t54;
t44 = t61 * t53;
t154 = t61 * t81;
t153 = t98 * t43;
t42 = t169 * t151 - t171 * t82;
t152 = t63 * t42;
t150 = t81 * t54;
t148 = t82 * t61;
t135 = t61 * t151;
t14 = -t53 * t126 - t80 * t130 - qJD(6) * t135 + (t171 * t61 - t53 * t80) * t82;
t34 = t63 * t61;
t146 = -t63 * t14 + t42 * t34;
t143 = t76 + t77;
t140 = qJD(6) * t80;
t139 = qJ(2) * qJD(2);
t41 = 0.2e1 * t155;
t138 = -0.2e1 * pkin(4) * qJD(5);
t136 = t81 * t149;
t134 = pkin(5) * t142;
t133 = pkin(5) * t140;
t132 = t80 * t166;
t129 = t81 * t141;
t128 = t60 ^ 2 + t58;
t123 = t143 * t54;
t117 = t81 * t132;
t116 = t58 * t129;
t115 = pkin(5) * t120;
t114 = t166 * t162;
t113 = -pkin(8) * t54 + t165;
t112 = pkin(4) * t61 + pkin(8) * t60;
t36 = t61 * t125 - t135;
t110 = t12 * t98 + t36 * t43;
t109 = t18 * t82 + t19 * t81;
t107 = -t26 * t61 + t40 * t53;
t106 = t42 * t60 - t156;
t105 = t44 - t155;
t104 = t81 * t114;
t38 = t60 * t141 + t150;
t16 = -pkin(9) * t154 + t19;
t83 = t170 * pkin(9) + t164 + t9;
t87 = t60 * pkin(5) - pkin(9) * t148 + t18;
t85 = t162 * t87;
t88 = -t100 * pkin(9) - t8;
t1 = -qJD(6) * t85 + t16 * t140 - t162 * t88 - t80 * t83;
t95 = 0.2e1 * t105;
t65 = t166 * t82;
t46 = -t162 * t65 + t117;
t92 = -t109 * qJD(5) - t8 * t82 - t9 * t81;
t86 = t80 * t87;
t84 = t91 * t54 - t89 * t60 + t107;
t2 = -qJD(6) * t86 - t16 * t120 + t162 * t83 - t80 * t88;
t73 = -pkin(5) * t82 - pkin(4);
t45 = t80 * t65 + t104;
t37 = t60 * t142 - t82 * t54;
t33 = t63 * t60;
t27 = pkin(5) * t154 + t40;
t24 = t61 * t118 + t136;
t23 = -t46 * qJD(6) + (t82 * t114 - t117) * qJD(5);
t22 = -t169 * t104 - t132 * t141 - t65 * t140;
t20 = t54 * t98 - t159;
t17 = t100 * pkin(5) + t26;
t13 = -t169 * t35 - t156;
t11 = -t54 * t125 + t80 * t150 + t159;
t7 = t162 * t16 + t86;
t6 = -t80 * t16 + t85;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t167, 0.2e1 * t139, 0, 0, 0, 0, 0, 0, t78 * t167, t79 * t167, 0.2e1 * t64, 0.2e1 * t147 * t64 + 0.2e1 * t139, -0.2e1 * t44, 0.2e1 * t53 * t60 - 0.2e1 * t54 * t61, 0, t41, 0, 0, 0.2e1 * qJD(2) * t60 + 0.2e1 * t54 * t70, 0.2e1 * qJD(2) * t61 - 0.2e1 * t53 * t70, -0.2e1 * t84, 0.2e1 * t70 * qJD(2) - 0.2e1 * t89 * t91 + 0.2e1 * t160, -0.2e1 * t77 * t44 - 0.2e1 * t116, 0.2e1 * t118 * t58 + 0.4e1 * t61 * t136, 0.2e1 * t54 * t148 - 0.2e1 * t170 * t60, -0.2e1 * t76 * t44 + 0.2e1 * t116, -0.2e1 * t100 * t60 - 0.2e1 * t61 * t150, t41, 0.2e1 * t100 * t40 + 0.2e1 * t26 * t154 + 0.2e1 * t18 * t54 + 0.2e1 * t9 * t60, 0.2e1 * t26 * t148 - 0.2e1 * t170 * t40 - 0.2e1 * t19 * t54 + 0.2e1 * t8 * t60, 0.2e1 * t109 * t53 + 0.2e1 * t168 * t61, 0.2e1 * t18 * t9 - 0.2e1 * t19 * t8 + 0.2e1 * t160, -0.2e1 * t36 * t12, 0.2e1 * t12 * t34 - 0.2e1 * t14 * t36, -0.2e1 * t12 * t60 + 0.2e1 * t36 * t54, 0.2e1 * t34 * t14, -0.2e1 * t14 * t60 - 0.2e1 * t34 * t54, t41, 0.2e1 * t14 * t27 + 0.2e1 * t17 * t34 + 0.2e1 * t2 * t60 + 0.2e1 * t54 * t6, 0.2e1 * t1 * t60 - 0.2e1 * t12 * t27 + 0.2e1 * t17 * t36 - 0.2e1 * t54 * t7, 0.2e1 * t1 * t34 + 0.2e1 * t12 * t6 - 0.2e1 * t14 * t7 - 0.2e1 * t2 * t36, -0.2e1 * t1 * t7 + 0.2e1 * t17 * t27 + 0.2e1 * t2 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t95, t84, 0, 0, 0, 0, 0, 0, -t128 * t141 + t81 * t95, t128 * t142 + t82 * t95, 0, -t108 * t54 + t60 * t92 + t107, 0, 0, 0, 0, 0, 0, t13 * t60 - t14 * t61 - t33 * t54 + t34 * t53, t11 * t60 + t12 * t61 - t35 * t54 + t36 * t53, t11 * t34 - t12 * t33 - t13 * t36 - t14 * t35, -t1 * t35 - t11 * t7 + t13 * t6 - t17 * t61 - t2 * t33 + t27 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t123 * t60 - 0.2e1 * t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t11 * t35 - 0.2e1 * t13 * t33 - 0.2e1 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, t54, -t53, 0, qJD(2), 0, 0, 0, 0, 0, 0, -t37, -t38, t143 * t53, -t168, 0, 0, 0, 0, 0, 0, t20, t106, t110 + t146, -t1 * t63 + t2 * t98 - t42 * t7 - t43 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11 * t63 + t13 * t98 + t33 * t43 - t35 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t152 - 0.2e1 * t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, -t54, 0, -t26, t89, 0, 0, -t24, -0.4e1 * t61 * t129 + t144 * t53, t38, t24, -t37, 0, -t26 * t82 + t113 * t81 + (-t112 * t82 + t40 * t81) * qJD(5), t26 * t81 + t113 * t82 + (t112 * t81 + t40 * t82) * qJD(5), t92, -t26 * pkin(4) + pkin(8) * t92, -t12 * t63 - t36 * t42, -t110 + t146, -t106, -t14 * t98 + t34 * t43, t20, 0, t34 * t134 + t14 * t73 - t17 * t98 + t23 * t60 + t27 * t43 + t45 * t54, -t12 * t73 + t36 * t134 + t17 * t63 + t22 * t60 - t27 * t42 - t46 * t54, -t1 * t98 + t12 * t45 - t14 * t46 - t2 * t63 + t22 * t34 - t23 * t36 + t42 * t6 - t43 * t7, -t1 * t46 + t134 * t27 + t17 * t73 + t2 * t45 - t22 * t7 + t23 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t54, 0, 0, 0, 0, 0, 0, 0, 0, -t170, -t100, t123, pkin(8) * t123 - t165, 0, 0, 0, 0, 0, 0, -t12, t42 * t61 + t53 * t63, -t11 * t98 - t13 * t63 - t33 * t42 - t35 * t43, -pkin(5) * t130 - t11 * t46 + t13 * t45 - t22 * t35 - t23 * t33 + t53 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * t63 + t23 * t98 - t42 * t46 - t43 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t129, -0.2e1 * t118, 0, -0.2e1 * t129, 0, 0, t81 * t138, t82 * t138, 0, 0, -0.2e1 * t152, -0.2e1 * t42 * t98 - 0.2e1 * t63 * t43, 0, -0.2e1 * t153, 0, 0, -0.2e1 * t134 * t98 + 0.2e1 * t43 * t73, 0.2e1 * t63 * t134 - 0.2e1 * t42 * t73, -0.2e1 * t22 * t98 - 0.2e1 * t23 * t63 + 0.2e1 * t42 * t45 - 0.2e1 * t43 * t46, 0.2e1 * t134 * t73 - 0.2e1 * t22 * t46 + 0.2e1 * t23 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, 0, -t100, t54, t9, t8, 0, 0, 0, 0, -t12, 0, -t14, t54, -t60 * t133 + t162 * t164 + t2 (-t120 * t60 - t54 * t80) * pkin(5) + t1 (t162 * t12 - t14 * t80 + (-t162 * t34 + t36 * t80) * qJD(6)) * pkin(5) (t162 * t2 - t1 * t80 + (t162 * t7 - t6 * t80) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t37, 0, 0, 0, 0, 0, 0, 0, 0, t13, t11, 0 (t162 * t13 - t11 * t80 + (t162 * t35 + t33 * t80) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, -t141, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t42, 0 (-t162 * t43 - t42 * t80 + (t162 * t63 - t80 * t98) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, 0, -t142, 0, -pkin(8) * t141, pkin(8) * t142, 0, 0, 0, 0, -t42, 0, -t43, 0, t23, t22 (t162 * t42 - t43 * t80 + (t162 * t98 + t63 * t80) * qJD(6)) * pkin(5) (t162 * t23 - t22 * t80 + (t162 * t46 - t45 * t80) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t133, -0.2e1 * t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, 0, -t14, t54, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, t11, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t42, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, -t43, 0, t23, t22, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
