% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR3_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR3_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:42:26
% EndTime: 2019-03-09 03:42:41
% DurationCPUTime: 5.72s
% Computational Cost: add. (10452->458), mult. (24591->645), div. (0->0), fcn. (17487->10), ass. (0->230)
t231 = sin(pkin(11));
t233 = cos(pkin(11));
t293 = t233 * qJD(3);
t237 = sin(qJ(3));
t300 = qJD(1) * t237;
t187 = t231 * t300 - t293;
t282 = t233 * t300;
t294 = t231 * qJD(3);
t189 = t282 + t294;
t236 = sin(qJ(5));
t238 = cos(qJ(5));
t123 = t236 * t187 - t238 * t189;
t124 = t238 * t187 + t236 * t189;
t235 = sin(qJ(6));
t333 = cos(qJ(6));
t53 = t333 * t123 + t235 * t124;
t353 = t53 ^ 2;
t57 = t235 * t123 - t333 * t124;
t352 = t57 ^ 2;
t239 = cos(qJ(3));
t292 = t239 * qJD(1);
t218 = -qJD(5) + t292;
t213 = -qJD(6) + t218;
t351 = t53 * t213;
t350 = t57 * t213;
t195 = t238 * t231 + t236 * t233;
t180 = t195 * qJD(5);
t336 = t195 * t239;
t306 = qJD(1) * t336 - t180;
t309 = t238 * t233;
t194 = t231 * t236 - t309;
t296 = qJD(5) * t238;
t297 = qJD(5) * t236;
t342 = t194 * t292 - t231 * t297 + t233 * t296;
t331 = pkin(8) + qJ(4);
t204 = t331 * t231;
t205 = t331 * t233;
t220 = sin(pkin(10)) * pkin(1) + pkin(7);
t207 = t220 * qJD(1);
t196 = t237 * t207;
t168 = t239 * qJD(2) - t196;
t268 = pkin(3) * t237 - qJ(4) * t239;
t198 = t268 * qJD(1);
t115 = -t231 * t168 + t233 * t198;
t311 = t233 * t239;
t262 = pkin(4) * t237 - pkin(8) * t311;
t82 = qJD(1) * t262 + t115;
t116 = t233 * t168 + t231 * t198;
t286 = t231 * t292;
t95 = -pkin(8) * t286 + t116;
t326 = -qJD(4) * t309 + t204 * t296 + t238 * t95 + (qJD(4) * t231 + qJD(5) * t205 + t82) * t236;
t135 = -t236 * t204 + t238 * t205;
t321 = -t195 * qJD(4) - t135 * qJD(5) + t236 * t95 - t238 * t82;
t349 = t123 ^ 2;
t348 = t124 ^ 2;
t337 = t194 * t237;
t347 = pkin(9) * t337;
t346 = pkin(5) * t300 + t342 * pkin(9) - t321;
t345 = -t306 * pkin(9) + t326;
t332 = t57 * t53;
t344 = t123 * t218;
t343 = t124 * t218;
t249 = qJD(5) * t337;
t341 = -t352 + t353;
t280 = qJD(6) * t333;
t295 = qJD(6) * t235;
t291 = qJD(1) * qJD(3);
t278 = t239 * t291;
t271 = t231 * t278;
t272 = t233 * t278;
t76 = t236 * (qJD(5) * t189 + t271) + t187 * t296 - t238 * t272;
t77 = -t187 * t297 + t189 * t296 + t236 * t272 + t238 * t271;
t24 = -t123 * t295 + t124 * t280 + t235 * t77 + t333 * t76;
t340 = -t24 + t350;
t169 = t237 * qJD(2) + t239 * t207;
t149 = qJD(3) * qJ(4) + t169;
t221 = -cos(pkin(10)) * pkin(1) - pkin(2);
t183 = -t239 * pkin(3) - t237 * qJ(4) + t221;
t152 = t183 * qJD(1);
t85 = -t231 * t149 + t233 * t152;
t65 = -pkin(4) * t292 - t189 * pkin(8) + t85;
t86 = t233 * t149 + t231 * t152;
t68 = -pkin(8) * t187 + t86;
t34 = t236 * t65 + t238 * t68;
t254 = t262 * qJD(3);
t290 = qJD(2) * qJD(3);
t225 = t239 * t290;
t142 = t225 + (qJD(4) - t196) * qJD(3);
t176 = qJD(3) * t268 - t237 * qJD(4);
t153 = t176 * qJD(1);
t80 = -t231 * t142 + t233 * t153;
t66 = qJD(1) * t254 + t80;
t81 = t233 * t142 + t231 * t153;
t69 = -pkin(8) * t271 + t81;
t13 = -qJD(5) * t34 - t236 * t69 + t238 * t66;
t224 = t237 * t291;
t10 = pkin(5) * t224 + t76 * pkin(9) + t13;
t12 = t236 * t66 + t238 * t69 + t65 * t296 - t297 * t68;
t11 = -t77 * pkin(9) + t12;
t33 = -t236 * t68 + t238 * t65;
t30 = pkin(9) * t123 + t33;
t28 = -t218 * pkin(5) + t30;
t31 = -t124 * pkin(9) + t34;
t247 = -t235 * t10 - t333 * t11 - t28 * t280 + t31 * t295;
t274 = -qJD(3) * pkin(3) + qJD(4);
t146 = -t168 + t274;
t117 = t187 * pkin(4) + t146;
t64 = t124 * pkin(5) + t117;
t339 = -t57 * t64 + t247;
t288 = t333 * t31;
t6 = t235 * t28 + t288;
t2 = -qJD(6) * t6 + t333 * t10 - t235 * t11;
t335 = t53 * t64 + t2;
t25 = -qJD(6) * t53 - t235 * t76 + t333 * t77;
t334 = -t25 + t351;
t134 = -t238 * t204 - t205 * t236;
t108 = -t195 * pkin(9) + t134;
t109 = -pkin(9) * t194 + t135;
t45 = t235 * t108 + t333 * t109;
t330 = t45 * qJD(6) - t345 * t235 + t346 * t333;
t44 = t333 * t108 - t235 * t109;
t329 = -t44 * qJD(6) + t346 * t235 + t345 * t333;
t164 = t195 * t237;
t105 = -t235 * t164 - t333 * t337;
t283 = t239 * t293;
t284 = t239 * t294;
t111 = t180 * t237 + t236 * t284 - t238 * t283;
t250 = qJD(3) * t336;
t243 = t249 - t250;
t35 = t333 * t111 + t164 * t280 - t235 * t243 - t295 * t337;
t328 = -t105 * t25 - t35 * t57;
t104 = t333 * t164 - t235 * t337;
t36 = t105 * qJD(6) - t235 * t111 - t333 * t243;
t327 = -t104 * t224 + t36 * t213;
t325 = t111 * t124 + t337 * t77;
t324 = t194 * t280 + t195 * t295 - t306 * t235 - t342 * t333;
t129 = -t235 * t194 + t333 * t195;
t323 = t129 * qJD(6) + t342 * t235 - t306 * t333;
t322 = t235 * t31;
t167 = t233 * t183;
t312 = t233 * t237;
t107 = -pkin(8) * t312 + t167 + (-t220 * t231 - pkin(4)) * t239;
t197 = t220 * t311;
t131 = t231 * t183 + t197;
t314 = t231 * t237;
t114 = -pkin(8) * t314 + t131;
t47 = t236 * t107 + t238 * t114;
t320 = -t164 * t224 - t243 * t218;
t319 = t123 * t124;
t298 = qJD(3) * t239;
t155 = t207 * t298 + t237 * t290;
t318 = t155 * t237;
t317 = t155 * t239;
t316 = t187 * t237;
t230 = t239 ^ 2;
t241 = qJD(1) ^ 2;
t315 = t230 * t241;
t313 = t231 * t239;
t310 = t236 * t114;
t210 = t237 * t220;
t240 = qJD(3) ^ 2;
t308 = t240 * t237;
t307 = t240 * t239;
t299 = qJD(3) * t237;
t285 = t220 * t299;
t121 = t233 * t176 + t231 * t285;
t160 = pkin(4) * t284 + t220 * t298;
t175 = pkin(4) * t314 + t210;
t229 = t237 ^ 2;
t303 = t229 - 0.2e1 * t230;
t302 = t229 - t230;
t208 = qJD(1) * t221;
t301 = qJD(1) * t231;
t158 = t231 * t176;
t106 = t158 + (-pkin(8) * t313 - t210 * t233) * qJD(3);
t93 = t254 + t121;
t289 = t238 * t106 + t107 * t296 + t236 * t93;
t287 = t220 * t313;
t132 = pkin(4) * t271 + t155;
t222 = -pkin(4) * t233 - pkin(3);
t136 = pkin(4) * t286 + t169;
t281 = -t306 * pkin(5) - t136;
t279 = t233 * t291;
t276 = t24 * t239 - t299 * t53;
t275 = -t123 * t299 + t76 * t239;
t46 = t238 * t107 - t310;
t273 = t187 + t293;
t270 = t239 * t224;
t269 = -t104 * t24 - t36 * t53;
t267 = -t80 * t231 + t81 * t233;
t266 = -t231 * t85 + t233 * t86;
t43 = pkin(5) * t77 + t132;
t265 = qJD(1) * t273;
t264 = qJD(1) * (-t189 + t294);
t263 = 0.2e1 * qJD(3) * t208;
t39 = -t239 * pkin(5) + t347 + t46;
t40 = -pkin(9) * t164 + t47;
t19 = -t235 * t40 + t333 * t39;
t20 = t235 * t39 + t333 * t40;
t261 = t239 * t25 + t299 * t57;
t260 = -t124 * t299 + t239 * t77;
t258 = t239 * t264;
t253 = -t105 * t224 - t35 * t213;
t252 = -t111 * t218 + t224 * t337;
t248 = -qJ(4) * t299 + (-t146 + t274) * t239;
t27 = -qJD(5) * t47 - t236 * t106 + t238 * t93;
t154 = -t207 * t299 + t225;
t244 = t154 * t239 + t318 + (-t168 * t239 - t169 * t237) * qJD(3);
t242 = t123 * t243 - t164 * t76;
t228 = t233 ^ 2;
t227 = t231 ^ 2;
t216 = t237 * t241 * t239;
t209 = -0.2e1 * t270;
t170 = t189 * t299;
t157 = t194 * pkin(5) + t222;
t156 = t187 * t283;
t130 = t167 - t287;
t128 = t333 * t194 + t195 * t235;
t122 = -t233 * t285 + t158;
t120 = pkin(5) * t164 + t175;
t73 = -pkin(5) * t243 + t160;
t26 = -t114 * t297 + t289;
t18 = -pkin(9) * t250 + (-t310 + t347) * qJD(5) + t289;
t17 = pkin(5) * t299 + t111 * pkin(9) + t27;
t8 = t333 * t30 - t322;
t7 = -t235 * t30 - t288;
t5 = t333 * t28 - t322;
t4 = -t20 * qJD(6) + t333 * t17 - t235 * t18;
t3 = t19 * qJD(6) + t235 * t17 + t333 * t18;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t270, -0.2e1 * t302 * t291, t307, t209, -t308, 0, -t220 * t307 + t237 * t263, t220 * t308 + t239 * t263, t244, t244 * t220 (t189 * t233 + t228 * t300) * t298, -t156 + (-t189 - 0.2e1 * t282) * t284, t279 * t303 + t170 (t187 * t231 + t227 * t300) * t298 (-t301 * t303 - t316) * qJD(3), t209, t155 * t314 + (-qJD(1) * t121 - t80) * t239 + ((t146 * t231 + t187 * t220) * t239 + (t85 + (t130 + t287) * qJD(1)) * t237) * qJD(3), t155 * t312 + (qJD(1) * t122 + t81) * t239 + ((t146 * t233 + t189 * t220) * t239 + (-t86 + (-t131 + t197) * qJD(1)) * t237) * qJD(3), -t121 * t189 - t122 * t187 + (-t231 * t81 - t233 * t80) * t237 + (-t231 * t86 - t233 * t85 + (-t130 * t233 - t131 * t231) * qJD(1)) * t298, t85 * t121 + t86 * t122 + t80 * t130 + t81 * t131 + (t146 * t298 + t318) * t220, t111 * t123 + t337 * t76, -t242 + t325, -t252 + t275, -t124 * t243 + t77 * t164, t260 + t320 (-t218 - t292) * t299, t160 * t124 - t13 * t239 + t132 * t164 + t175 * t77 - t27 * t218 - t117 * t249 + (t117 * t336 + (t46 * qJD(1) + t33) * t237) * qJD(3), -t117 * t111 + t12 * t239 - t160 * t123 - t132 * t337 - t175 * t76 + t26 * t218 + (-qJD(1) * t47 - t34) * t299, t33 * t111 - t12 * t164 + t123 * t27 - t26 * t124 + t13 * t337 + t243 * t34 + t46 * t76 - t47 * t77, t117 * t160 + t12 * t47 + t13 * t46 + t132 * t175 + t26 * t34 + t27 * t33, -t105 * t24 + t35 * t53, -t269 + t328, -t253 + t276, t104 * t25 - t36 * t57, t261 + t327 (-t213 - t292) * t299, t43 * t104 + t120 * t25 - t2 * t239 - t4 * t213 + t64 * t36 - t73 * t57 + (qJD(1) * t19 + t5) * t299, -t247 * t239 + t43 * t105 - t120 * t24 + t3 * t213 - t64 * t35 - t73 * t53 + (-qJD(1) * t20 - t6) * t299, t104 * t247 - t105 * t2 + t19 * t24 - t20 * t25 + t3 * t57 + t35 * t5 - t36 * t6 + t4 * t53, t120 * t43 + t19 * t2 - t20 * t247 + t3 * t6 + t4 * t5 + t64 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t308, -t307, 0, t154 * t237 - t317 + (-t168 * t237 + t169 * t239) * qJD(3), 0, 0, 0, 0, 0, 0 (-t229 * t301 + t316) * qJD(3), -t229 * t279 + t170, t189 * t284 - t156, -t317 + t267 * t237 + (t146 * t237 + t239 * t266) * qJD(3), 0, 0, 0, 0, 0, 0, -t260 + t320, t252 + t275, t242 + t325, -t34 * t111 - t12 * t337 - t13 * t164 - t132 * t239 + t33 * t249 + (t117 * t237 - t33 * t336) * qJD(3), 0, 0, 0, 0, 0, 0, -t261 + t327, t253 + t276, t269 + t328, -t2 * t104 - t105 * t247 - t43 * t239 + t299 * t64 - t6 * t35 - t5 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t216, t302 * t241, 0, t216, 0, 0, t169 * qJD(3) - t208 * t300 - t155, -t208 * t292 - t225 + (t168 + t196) * qJD(3), 0, 0, t233 * t258 (t187 * t233 + t189 * t231 + (-t227 + t228) * qJD(3)) * t292, t233 * t315 + t237 * t264, -t273 * t286, -t231 * t315 + t237 * t265, t216, -t155 * t233 - t169 * t187 + (t115 * t239 + t231 * t248 - t237 * t85) * qJD(1), t155 * t231 - t169 * t189 + (-t116 * t239 + t233 * t248 + t237 * t86) * qJD(1), t115 * t189 + t116 * t187 + (-qJD(4) * t187 + t292 * t85 + t81) * t233 + (qJD(4) * t189 + t292 * t86 - t80) * t231, -t155 * pkin(3) + qJ(4) * t267 + qJD(4) * t266 - t85 * t115 - t86 * t116 - t146 * t169, -t123 * t342 - t195 * t76, -t123 * t306 - t124 * t342 + t194 * t76 - t195 * t77, -t342 * t218 + (qJD(3) * t195 + t123) * t300, -t124 * t306 + t194 * t77, -t306 * t218 + (-qJD(3) * t194 + t124) * t300, t218 * t300, -t136 * t124 + t132 * t194 + t222 * t77 - t321 * t218 - t306 * t117 + (qJD(3) * t134 - t33) * t300, t136 * t123 + t132 * t195 - t222 * t76 - t326 * t218 + t342 * t117 + (-qJD(3) * t135 + t34) * t300, -t12 * t194 + t123 * t321 + t124 * t326 - t13 * t195 + t134 * t76 - t135 * t77 + t306 * t34 - t33 * t342, -t117 * t136 + t12 * t135 + t13 * t134 + t132 * t222 + t321 * t33 - t326 * t34, -t129 * t24 + t324 * t53, t128 * t24 - t129 * t25 + t323 * t53 - t324 * t57, t324 * t213 + (qJD(3) * t129 + t53) * t300, t128 * t25 - t323 * t57, t323 * t213 + (-qJD(3) * t128 - t57) * t300, t213 * t300, t43 * t128 + t157 * t25 + t323 * t64 - t281 * t57 + t330 * t213 + (qJD(3) * t44 - t5) * t300, t43 * t129 - t157 * t24 - t324 * t64 - t281 * t53 - t329 * t213 + (-qJD(3) * t45 + t6) * t300, t128 * t247 - t129 * t2 + t24 * t44 - t25 * t45 - t323 * t6 + t324 * t5 - t329 * t57 - t330 * t53, t157 * t43 + t2 * t44 - t247 * t45 + t281 * t64 - t329 * t6 - t330 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t258, t239 * t265, -t187 ^ 2 - t189 ^ 2, t187 * t86 + t189 * t85 + t155, 0, 0, 0, 0, 0, 0, t77 + t344, -t76 + t343, -t348 - t349, -t123 * t33 + t124 * t34 + t132, 0, 0, 0, 0, 0, 0, t25 + t351, -t24 - t350, -t352 - t353, -t5 * t53 - t57 * t6 + t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t319, -t348 + t349, -t76 - t343, t319, -t77 + t344, t224, t117 * t123 - t34 * t218 + t13, t117 * t124 - t33 * t218 - t12, 0, 0, t332, t341, t340, -t332, t334, t224, t7 * t213 + (-t123 * t57 + t213 * t295 + t333 * t224) * pkin(5) + t335, -t8 * t213 + (-t123 * t53 + t213 * t280 - t224 * t235) * pkin(5) + t339, t5 * t57 - t6 * t53 - t8 * t57 - t7 * t53 + (t333 * t24 - t235 * t25 + (-t235 * t53 + t333 * t57) * qJD(6)) * pkin(5), -t5 * t7 - t6 * t8 + (t333 * t2 - t247 * t235 + t123 * t64 + (-t235 * t5 + t333 * t6) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, t341, t340, -t332, t334, t224, -t6 * t213 + t335, -t5 * t213 + t339, 0, 0;];
tauc_reg  = t1;
