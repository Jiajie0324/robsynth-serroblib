% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:42:34
% EndTime: 2019-03-09 03:42:51
% DurationCPUTime: 9.18s
% Computational Cost: add. (12963->614), mult. (28089->803), div. (0->0), fcn. (20024->18), ass. (0->291)
t273 = sin(pkin(11));
t275 = cos(pkin(11));
t361 = t275 * qJD(3);
t280 = sin(qJ(3));
t369 = qJD(1) * t280;
t204 = t273 * t369 - t361;
t367 = qJD(3) * t273;
t206 = t275 * t369 + t367;
t279 = sin(qJ(5));
t282 = cos(qJ(5));
t132 = t204 * t279 - t206 * t282;
t133 = t282 * t204 + t206 * t279;
t278 = sin(qJ(6));
t414 = cos(qJ(6));
t65 = t132 * t414 + t278 * t133;
t439 = t65 ^ 2;
t69 = t278 * t132 - t414 * t133;
t438 = t69 ^ 2;
t283 = cos(qJ(3));
t368 = qJD(1) * t283;
t244 = -qJD(5) + t368;
t239 = -qJD(6) + t244;
t437 = t239 * t69;
t436 = t65 * t239;
t274 = sin(pkin(10));
t251 = pkin(1) * t274 + pkin(7);
t232 = t251 * qJD(1);
t365 = qJD(3) * t283;
t230 = t251 * qJDD(1);
t427 = qJD(2) * qJD(3) + t230;
t120 = t283 * qJDD(2) - t232 * t365 - t280 * t427;
t111 = -qJDD(3) * pkin(3) + qJDD(4) - t120;
t267 = g(3) * t283;
t270 = qJ(1) + pkin(10);
t259 = sin(t270);
t261 = cos(t270);
t333 = g(1) * t261 + g(2) * t259;
t300 = t333 * t280 - t267;
t293 = t111 - t300;
t213 = t273 * t282 + t275 * t279;
t195 = t213 * qJD(5);
t422 = t213 * t283;
t373 = qJD(1) * t422 - t195;
t375 = t282 * t275;
t212 = t273 * t279 - t375;
t363 = qJD(5) * t282;
t364 = qJD(5) * t279;
t428 = t212 * t368 - t273 * t364 + t275 * t363;
t401 = pkin(8) + qJ(4);
t228 = t401 * t273;
t229 = t401 * t275;
t216 = t280 * t232;
t183 = qJD(2) * t283 - t216;
t328 = pkin(3) * t280 - qJ(4) * t283;
t219 = t328 * qJD(1);
t124 = -t183 * t273 + t275 * t219;
t378 = t275 * t283;
t317 = pkin(4) * t280 - pkin(8) * t378;
t84 = qJD(1) * t317 + t124;
t125 = t275 * t183 + t273 * t219;
t350 = t273 * t368;
t97 = -pkin(8) * t350 + t125;
t392 = qJD(4) * t375 - t228 * t363 - t282 * t97 + (-qJD(4) * t273 - qJD(5) * t229 - t84) * t279;
t144 = -t279 * t228 + t282 * t229;
t391 = -t213 * qJD(4) - qJD(5) * t144 + t279 * t97 - t282 * t84;
t264 = t283 * qJDD(1);
t340 = t280 * t264;
t360 = qJD(1) * qJD(3);
t271 = t280 ^ 2;
t272 = t283 ^ 2;
t370 = t271 - t272;
t416 = t360 * t370 - t340;
t435 = t275 * t416;
t434 = t132 ^ 2;
t433 = t133 ^ 2;
t432 = -pkin(5) * t369 - pkin(9) * t428 + t391;
t431 = -pkin(9) * t373 - t392;
t402 = t69 * t65;
t430 = t132 * t244;
t429 = t133 * t244;
t426 = -t438 + t439;
t345 = qJD(6) * t414;
t362 = qJD(6) * t278;
t256 = t275 * qJDD(3);
t343 = t283 * t360;
t357 = t280 * qJDD(1);
t308 = t343 + t357;
t162 = t273 * t308 - t256;
t358 = t273 * qJDD(3);
t163 = t275 * t308 + t358;
t57 = t279 * t162 - t282 * t163 + t204 * t363 + t206 * t364;
t58 = t162 * t282 + t279 * t163 - t204 * t364 + t206 * t363;
t17 = -t132 * t362 + t133 * t345 + t278 * t58 + t414 * t57;
t425 = -t17 + t437;
t184 = qJD(2) * t280 + t232 * t283;
t167 = qJD(3) * qJ(4) + t184;
t329 = pkin(3) * t283 + qJ(4) * t280;
t316 = -pkin(2) - t329;
t276 = cos(pkin(10));
t413 = pkin(1) * t276;
t199 = t316 - t413;
t170 = t199 * qJD(1);
t87 = -t167 * t273 + t275 * t170;
t75 = -pkin(4) * t368 - pkin(8) * t206 + t87;
t88 = t275 * t167 + t273 * t170;
t77 = -pkin(8) * t204 + t88;
t34 = -t279 * t77 + t282 * t75;
t30 = pkin(9) * t132 + t34;
t28 = -pkin(5) * t244 + t30;
t35 = t279 * t75 + t282 * t77;
t31 = -pkin(9) * t133 + t35;
t420 = t280 * t360 - t264;
t211 = qJDD(5) + t420;
t191 = qJD(3) * t328 - t280 * qJD(4);
t116 = qJD(1) * t191 + qJDD(1) * t199;
t353 = t280 * qJDD(2) + t283 * t427;
t99 = qJDD(3) * qJ(4) + (qJD(4) - t216) * qJD(3) + t353;
t50 = t275 * t116 - t273 * t99;
t41 = pkin(4) * t420 - pkin(8) * t163 + t50;
t51 = t273 * t116 + t275 * t99;
t44 = -pkin(8) * t162 + t51;
t9 = -qJD(5) * t35 - t279 * t44 + t282 * t41;
t6 = pkin(5) * t211 + pkin(9) * t57 + t9;
t8 = t279 * t41 + t282 * t44 + t75 * t363 - t364 * t77;
t7 = -pkin(9) * t58 + t8;
t1 = t278 * t6 + t28 * t345 - t31 * t362 + t414 * t7;
t269 = pkin(11) + qJ(5);
t265 = qJ(6) + t269;
t249 = sin(t265);
t250 = cos(t265);
t385 = t259 * t283;
t147 = t249 * t261 - t250 * t385;
t384 = t261 * t283;
t149 = t249 * t259 + t250 * t384;
t403 = g(3) * t280;
t164 = -qJD(3) * pkin(3) + qJD(4) - t183;
t126 = pkin(4) * t204 + t164;
t74 = pkin(5) * t133 + t126;
t424 = g(1) * t149 - g(2) * t147 + t250 * t403 - t69 * t74 - t1;
t389 = pkin(1) * qJDD(1);
t311 = t163 * t280 + t206 * t365;
t421 = t273 * t311;
t182 = t275 * t199;
t379 = t275 * t280;
t113 = -pkin(8) * t379 + t182 + (-t251 * t273 - pkin(4)) * t283;
t141 = t273 * t199 + t251 * t378;
t381 = t273 * t280;
t123 = -pkin(8) * t381 + t141;
t60 = t279 * t113 + t282 * t123;
t258 = sin(t269);
t260 = cos(t269);
t157 = t258 * t385 + t260 * t261;
t159 = -t258 * t384 + t259 * t260;
t419 = -g(1) * t159 + g(2) * t157 + t258 * t403;
t146 = t249 * t385 + t250 * t261;
t148 = -t249 * t384 + t250 * t259;
t354 = t414 * t31;
t11 = t278 * t28 + t354;
t2 = -qJD(6) * t11 - t278 * t7 + t414 * t6;
t418 = -g(1) * t148 + g(2) * t146 + t249 * t403 + t65 * t74 + t2;
t18 = -qJD(6) * t65 - t278 * t57 + t414 * t58;
t417 = -t18 + t436;
t415 = pkin(5) * t58;
t412 = pkin(4) * t162;
t411 = pkin(4) * t273;
t410 = pkin(9) * t212;
t408 = g(1) * t259;
t404 = g(2) * t261;
t143 = -t282 * t228 - t229 * t279;
t114 = -pkin(9) * t213 + t143;
t115 = t144 - t410;
t55 = t114 * t414 - t278 * t115;
t400 = qJD(6) * t55 + t278 * t432 - t414 * t431;
t56 = t278 * t114 + t115 * t414;
t399 = -qJD(6) * t56 + t278 * t431 + t414 * t432;
t179 = t213 * t280;
t180 = t212 * t280;
t110 = -t278 * t179 - t180 * t414;
t347 = t283 * t361;
t348 = t273 * t365;
t118 = t195 * t280 + t279 * t348 - t282 * t347;
t307 = qJD(5) * t212;
t304 = t280 * t307;
t305 = qJD(3) * t422;
t292 = t304 - t305;
t36 = t118 * t414 + t179 * t345 - t180 * t362 - t278 * t292;
t398 = -t110 * t18 - t36 * t69;
t109 = t179 * t414 - t180 * t278;
t198 = qJDD(6) + t211;
t37 = qJD(6) * t110 - t278 * t118 - t292 * t414;
t397 = -t109 * t198 + t37 * t239;
t396 = t118 * t133 + t180 * t58;
t395 = t212 * t345 + t213 * t362 - t278 * t373 - t414 * t428;
t138 = -t278 * t212 + t213 * t414;
t394 = qJD(6) * t138 + t278 * t428 - t373 * t414;
t393 = t278 * t31;
t390 = -t179 * t211 - t292 * t244;
t388 = t132 * t133;
t387 = t162 * t283;
t386 = t204 * t280;
t268 = -pkin(9) - t401;
t383 = t268 * t280;
t286 = qJD(1) ^ 2;
t382 = t272 * t286;
t380 = t273 * t283;
t377 = t401 * t280;
t376 = t279 * t123;
t234 = t280 * t251;
t374 = -t162 * t379 - t204 * t347;
t366 = qJD(3) * t280;
t349 = t251 * t366;
t130 = t275 * t191 + t273 * t349;
t175 = pkin(4) * t348 + t251 * t365;
t371 = (t272 * t360 + t340) * t273;
t190 = pkin(4) * t381 + t234;
t253 = -pkin(2) - t413;
t233 = qJD(1) * t253;
t231 = qJDD(1) * t253;
t173 = t273 * t191;
t112 = t173 + (-pkin(8) * t380 - t234 * t275) * qJD(3);
t95 = qJD(3) * t317 + t130;
t356 = t282 * t112 + t113 * t363 + t279 * t95;
t284 = cos(qJ(1));
t352 = t284 * pkin(1) + t261 * pkin(2) + t259 * pkin(7);
t252 = pkin(4) * t275 + pkin(3);
t351 = qJD(1) * t271 * t273;
t145 = pkin(4) * t350 + t184;
t346 = -pkin(5) * t373 - t145;
t342 = t273 * t264;
t341 = t275 * t264;
t281 = sin(qJ(1));
t339 = -pkin(1) * t281 + t261 * pkin(7);
t338 = t17 * t283 - t366 * t65;
t336 = -t132 * t366 + t283 * t57;
t59 = t282 * t113 - t376;
t335 = -t163 * t283 + t206 * t366;
t334 = t280 * t343;
t332 = -t404 + t408;
t331 = g(1) * t281 - g(2) * t284;
t330 = -t109 * t17 - t37 * t65;
t327 = -t50 * t273 + t51 * t275;
t326 = -t273 * t87 + t275 * t88;
t325 = -t110 * t198 - t239 * t36;
t324 = -t118 * t244 + t180 * t211;
t217 = pkin(5) * t260 + t252;
t323 = t217 * t283 - t383;
t321 = t252 * t283 + t377;
t319 = qJD(1) * (t204 + t361);
t318 = qJD(1) * (-t206 + t367);
t45 = -pkin(5) * t283 + pkin(9) * t180 + t59;
t46 = -pkin(9) * t179 + t60;
t21 = -t278 * t46 + t414 * t45;
t22 = t278 * t45 + t414 * t46;
t315 = t18 * t283 + t366 * t69;
t313 = -t133 * t366 + t283 * t58;
t306 = -qJD(1) * t233 + t333;
t303 = -qJ(4) * t366 + (qJD(4) - t164) * t283;
t285 = qJD(3) ^ 2;
t302 = t251 * t285 + 0.2e1 * t231 + t404;
t301 = 0.2e1 * qJD(3) * t233 - qJDD(3) * t251;
t298 = -t283 * t333 - t403;
t76 = t111 + t412;
t27 = -qJD(5) * t60 - t279 * t112 + t282 * t95;
t119 = -t232 * t366 + t353;
t294 = t119 * t283 - t120 * t280 + (-t183 * t283 - t184 * t280) * qJD(3);
t289 = t293 + t412;
t288 = t132 * t292 - t179 * t57;
t242 = t280 * t286 * t283;
t236 = t280 * t408;
t224 = qJDD(3) * t283 - t280 * t285;
t223 = qJDD(3) * t280 + t283 * t285;
t220 = pkin(5) * t258 + t411;
t201 = qJDD(1) * t272 - 0.2e1 * t334;
t172 = pkin(5) * t212 - t252;
t160 = t258 * t259 + t260 * t384;
t158 = t258 * t261 - t260 * t385;
t140 = -t251 * t380 + t182;
t137 = t212 * t414 + t213 * t278;
t131 = -t275 * t349 + t173;
t129 = pkin(5) * t179 + t190;
t78 = -pkin(5) * t292 + t175;
t32 = t76 + t415;
t26 = -t123 * t364 + t356;
t20 = -pkin(9) * t305 + (t280 * t410 - t376) * qJD(5) + t356;
t19 = pkin(5) * t366 + pkin(9) * t118 + t27;
t13 = t30 * t414 - t393;
t12 = -t278 * t30 - t354;
t10 = t28 * t414 - t393;
t4 = -qJD(6) * t22 + t19 * t414 - t278 * t20;
t3 = qJD(6) * t21 + t278 * t19 + t20 * t414;
t5 = [0, 0, 0, 0, 0, qJDD(1), t331, g(1) * t284 + g(2) * t281, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t276 * t389 + t332, -0.2e1 * t274 * t389 + t333, 0 (t331 + (t274 ^ 2 + t276 ^ 2) * t389) * pkin(1), qJDD(1) * t271 + 0.2e1 * t334, -0.2e1 * t416, t223, t201, t224, 0, t301 * t280 + (-t302 + t408) * t283, t280 * t302 + t283 * t301 - t236 (t271 + t272) * t230 + t294 - t333, t231 * t253 - g(1) * (-pkin(2) * t259 + t339) - g(2) * t352 + t294 * t251, t311 * t275, t374 - t421, t335 + t435 (t162 * t280 + t204 * t365) * t273, t387 + (-t351 - t386) * qJD(3) + t371, t201, -t333 * t273 + (t111 * t273 + t251 * t162 + (qJD(1) * t140 + t87) * qJD(3)) * t280 + (-t130 * qJD(1) - t140 * qJDD(1) - t50 + t332 * t275 + (t164 * t273 + t204 * t251) * qJD(3)) * t283, -t333 * t275 + (t111 * t275 + t251 * t163 + (-qJD(1) * t141 - t88) * qJD(3)) * t280 + (t131 * qJD(1) + t141 * qJDD(1) + t51 - t332 * t273 + (t164 * t275 + t206 * t251) * qJD(3)) * t283, -t130 * t206 - t131 * t204 - t140 * t163 - t141 * t162 + t236 + (-t273 * t88 - t275 * t87) * t365 + (-t273 * t51 - t275 * t50 - t404) * t280, t51 * t141 + t88 * t131 + t50 * t140 + t87 * t130 - g(1) * t339 - g(2) * (t261 * t329 + t352) - t316 * t408 + (t111 * t280 + t164 * t365) * t251, t118 * t132 + t180 * t57, -t288 + t396, -t324 + t336, -t133 * t292 + t58 * t179, t313 + t390, -t211 * t283 - t244 * t366, -g(1) * t158 - g(2) * t160 + t175 * t133 + t76 * t179 + t190 * t58 + t59 * t211 - t27 * t244 - t9 * t283 - t126 * qJD(5) * t180 + (t126 * t422 + t34 * t280) * qJD(3), -g(1) * t157 - g(2) * t159 - t118 * t126 - t132 * t175 - t180 * t76 - t190 * t57 - t211 * t60 + t244 * t26 + t283 * t8 - t35 * t366, t34 * t118 - t26 * t133 + t27 * t132 - t8 * t179 + t9 * t180 + t59 * t57 - t60 * t58 + t236 - t35 * t305 + (t307 * t35 - t404) * t280, t8 * t60 + t35 * t26 + t9 * t59 + t34 * t27 + t76 * t190 + t126 * t175 - g(1) * (t261 * t411 + t339) - g(2) * (t252 * t384 + t261 * t377 + t352) + (-g(1) * (-pkin(2) - t321) - g(2) * t411) * t259, -t110 * t17 + t36 * t65, -t330 + t398, -t325 + t338, t109 * t18 - t37 * t69, t315 + t397, -t198 * t283 - t239 * t366, -g(1) * t147 - g(2) * t149 + t10 * t366 + t109 * t32 + t129 * t18 + t198 * t21 - t2 * t283 - t239 * t4 + t37 * t74 - t69 * t78, -g(1) * t146 - g(2) * t148 + t1 * t283 - t11 * t366 + t110 * t32 - t129 * t17 - t198 * t22 + t239 * t3 - t36 * t74 - t65 * t78, -t1 * t109 + t10 * t36 - t11 * t37 - t110 * t2 + t17 * t21 - t18 * t22 - t280 * t404 + t3 * t69 + t4 * t65 + t236, t1 * t22 + t11 * t3 + t2 * t21 + t10 * t4 + t32 * t129 + t74 * t78 - g(1) * (t220 * t261 + t339) - g(2) * (t217 * t384 - t261 * t383 + t352) + (-g(1) * (-pkin(2) - t323) - g(2) * t220) * t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t224, -t223, 0, t119 * t280 + t120 * t283 - g(3) + (-t183 * t280 + t184 * t283) * qJD(3), 0, 0, 0, 0, 0, 0, -t387 + (-t351 + t386) * qJD(3) + t371, t335 - t435, t374 + t421, -t111 * t283 - g(3) + t327 * t280 + (t164 * t280 + t283 * t326) * qJD(3), 0, 0, 0, 0, 0, 0, -t313 + t390, t324 + t336, t288 + t396, -t35 * t118 - t9 * t179 - t8 * t180 - t76 * t283 - g(3) + t34 * t304 + (t126 * t280 - t34 * t422) * qJD(3), 0, 0, 0, 0, 0, 0, -t315 + t397, t325 + t338, t330 + t398, t1 * t110 - t10 * t37 - t109 * t2 - t11 * t36 - t283 * t32 + t366 * t74 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242, t370 * t286, t357, t242, t264, qJDD(3), qJD(3) * t184 + t280 * t306 + t120 - t267, t403 + (t183 + t216) * qJD(3) + t306 * t283 - t353, 0, 0, -t206 * t275 * t368 + t163 * t273, -t273 * t162 + t163 * t275 + (t204 * t275 + t206 * t273) * t368, t275 * t382 + t280 * t318 - t342, -t162 * t275 - t204 * t350, -t273 * t382 + t280 * t319 - t341, t242, qJ(4) * t342 - pkin(3) * t162 - t184 * t204 - t293 * t275 + (t124 * t283 + t273 * t303 - t280 * t87) * qJD(1), qJ(4) * t341 - pkin(3) * t163 - t184 * t206 + t293 * t273 + (-t125 * t283 + t275 * t303 + t280 * t88) * qJD(1), t124 * t206 + t125 * t204 + (-qJ(4) * t162 - qJD(4) * t204 + t368 * t87 + t51) * t275 + (qJ(4) * t163 + qJD(4) * t206 + t368 * t88 - t50) * t273 + t298, -t87 * t124 - t88 * t125 - t164 * t184 + t326 * qJD(4) - t293 * pkin(3) + (t298 + t327) * qJ(4), -t132 * t428 - t57 * t213, -t132 * t373 - t133 * t428 + t212 * t57 - t213 * t58, t132 * t369 + t213 * t211 - t244 * t428, -t133 * t373 + t58 * t212, t133 * t369 - t212 * t211 - t244 * t373, t244 * t369, -t126 * t373 - t133 * t145 + t143 * t211 + t212 * t76 - t244 * t391 - t252 * t58 + t260 * t300 - t34 * t369, t126 * t428 + t132 * t145 - t144 * t211 + t213 * t76 + t244 * t392 + t252 * t57 - t258 * t300 + t35 * t369, t132 * t391 - t133 * t392 + t143 * t57 - t144 * t58 - t212 * t8 - t213 * t9 - t34 * t428 + t35 * t373 + t298, -g(3) * t321 - t126 * t145 + t9 * t143 + t8 * t144 - t76 * t252 + t34 * t391 + t35 * t392 + t333 * (t252 * t280 - t283 * t401) -t17 * t138 + t395 * t65, t137 * t17 - t138 * t18 + t394 * t65 - t395 * t69, t138 * t198 + t239 * t395 + t369 * t65, t18 * t137 - t394 * t69, -t137 * t198 + t239 * t394 - t369 * t69, t239 * t369, -t10 * t369 + t137 * t32 + t172 * t18 + t198 * t55 - t239 * t399 + t250 * t300 - t346 * t69 + t394 * t74, t11 * t369 + t138 * t32 - t17 * t172 - t198 * t56 + t239 * t400 - t249 * t300 - t346 * t65 - t395 * t74, -t1 * t137 + t10 * t395 - t11 * t394 - t138 * t2 + t17 * t55 - t18 * t56 + t399 * t65 + t400 * t69 + t298, -g(3) * t323 + t1 * t56 + t10 * t399 + t11 * t400 + t32 * t172 + t2 * t55 + t346 * t74 + t333 * (t217 * t280 + t268 * t283); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t273 * t357 + t283 * t318 - t256, t275 * t357 + t283 * t319 + t358, -t204 ^ 2 - t206 ^ 2, t204 * t88 + t206 * t87 + t293, 0, 0, 0, 0, 0, 0, t58 + t430, -t57 + t429, -t433 - t434, -t132 * t34 + t133 * t35 + t289, 0, 0, 0, 0, 0, 0, t18 + t436, -t17 - t437, -t438 - t439, -t10 * t65 - t11 * t69 + t289 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t388, -t433 + t434, -t57 - t429, t388, -t58 + t430, t211, t126 * t132 - t244 * t35 + t419 + t9, g(1) * t160 - g(2) * t158 + t126 * t133 - t244 * t34 + t260 * t403 - t8, 0, 0, t402, t426, t425, -t402, t417, t198, t12 * t239 + (-t132 * t69 + t198 * t414 + t239 * t362) * pkin(5) + t418, -t13 * t239 + (-t132 * t65 - t198 * t278 + t239 * t345) * pkin(5) + t424, t10 * t69 - t11 * t65 - t12 * t65 - t13 * t69 + (t414 * t17 - t18 * t278 + (-t278 * t65 + t414 * t69) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t278 + t2 * t414 + t74 * t132 + (-t10 * t278 + t11 * t414) * qJD(6) + t419) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t402, t426, t425, -t402, t417, t198, -t11 * t239 + t418, -t10 * t239 + t424, 0, 0;];
tau_reg  = t5;
