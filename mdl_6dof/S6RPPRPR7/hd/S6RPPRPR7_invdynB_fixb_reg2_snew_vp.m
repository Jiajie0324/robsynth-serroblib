% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:33
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:32:27
% EndTime: 2019-05-05 14:32:46
% DurationCPUTime: 18.08s
% Computational Cost: add. (88868->688), mult. (211366->1033), div. (0->0), fcn. (153774->10), ass. (0->452)
t754 = sin(qJ(4));
t750 = sin(pkin(9));
t752 = cos(pkin(9));
t757 = cos(qJ(4));
t772 = t750 * t757 + t752 * t754;
t719 = t772 * qJD(1);
t721 = (-t750 * t754 + t752 * t757) * qJD(1);
t802 = t721 * t719;
t845 = qJDD(4) - t802;
t848 = t754 * t845;
t847 = t757 * t845;
t790 = qJDD(1) * t752;
t791 = qJDD(1) * t750;
t718 = -t754 * t791 + t757 * t790;
t796 = qJD(4) * t719;
t675 = t718 - t796;
t749 = sin(pkin(10));
t751 = cos(pkin(10));
t653 = t749 * qJDD(4) + t751 * t675;
t692 = -t751 * qJD(4) + t721 * t749;
t805 = t719 * t692;
t604 = -t653 - t805;
t759 = qJD(1) ^ 2;
t755 = sin(qJ(1));
t758 = cos(qJ(1));
t731 = t755 * g(1) - t758 * g(2);
t773 = qJDD(2) - t731;
t767 = -t759 * qJ(2) + t773;
t787 = -0.2e1 * qJD(3) * qJD(1);
t827 = pkin(1) + qJ(3);
t846 = -qJDD(1) * t827 + t767 + t787;
t603 = -t805 + t653;
t795 = t721 * qJD(4);
t835 = t772 * qJDD(1);
t673 = t835 + t795;
t763 = qJDD(6) + t673;
t695 = qJD(4) * t749 + t721 * t751;
t643 = t695 * t692;
t836 = -t643 + t673;
t844 = t749 * t836;
t843 = t751 * t836;
t753 = sin(qJ(6));
t756 = cos(qJ(6));
t636 = t756 * t692 + t695 * t753;
t638 = -t692 * t753 + t695 * t756;
t584 = t638 * t636;
t838 = -t584 + t763;
t842 = t753 * t838;
t841 = t756 * t838;
t744 = t750 ^ 2;
t745 = t752 ^ 2;
t797 = t744 + t745;
t840 = pkin(3) * t791 - (pkin(7) * t797 + t827) * t759;
t839 = t797 * t759;
t708 = qJD(6) + t719;
t620 = t708 * t636;
t652 = t751 * qJDD(4) - t675 * t749;
t766 = qJD(6) * t636 - t652 * t753 - t653 * t756;
t837 = -t620 - t766;
t667 = -g(3) * t752 + t750 * t846;
t777 = -t756 * t652 + t753 * t653;
t517 = (qJD(6) - t708) * t638 + t777;
t634 = t636 ^ 2;
t635 = t638 ^ 2;
t832 = t692 ^ 2;
t687 = t695 ^ 2;
t707 = t708 ^ 2;
t831 = t719 ^ 2;
t716 = t721 ^ 2;
t830 = qJD(4) ^ 2;
t829 = pkin(4) * t754;
t828 = t750 * g(3);
t826 = qJDD(1) * pkin(1);
t648 = -pkin(3) * t744 * t759 - pkin(7) * t791 + t667;
t762 = t828 + (t787 + (-pkin(3) * t750 - qJ(2)) * t759 + (-pkin(7) - t827) * qJDD(1) + t773) * t752;
t590 = t757 * t648 + t754 * t762;
t664 = pkin(4) * t719 - qJ(5) * t721;
t542 = -pkin(4) * t830 + qJDD(4) * qJ(5) - t664 * t719 + t590;
t793 = qJD(2) * qJD(1);
t742 = 0.2e1 * t793;
t732 = t758 * g(1) + t755 * g(2);
t746 = qJDD(1) * qJ(2);
t771 = t732 - t746;
t770 = -qJDD(3) + t771;
t563 = t742 + (-t675 + t796) * qJ(5) + (t673 + t795) * pkin(4) - t770 + t840;
t483 = 0.2e1 * qJD(5) * t695 + t749 * t542 - t751 * t563;
t447 = t836 * pkin(5) + pkin(8) * t604 - t483;
t484 = -0.2e1 * qJD(5) * t692 + t751 * t542 + t749 * t563;
t651 = pkin(5) * t719 - pkin(8) * t695;
t461 = -pkin(5) * t832 + pkin(8) * t652 - t651 * t719 + t484;
t405 = -t756 * t447 + t461 * t753;
t406 = t753 * t447 + t756 * t461;
t371 = -t405 * t756 + t406 * t753;
t825 = t371 * t749;
t824 = t371 * t751;
t589 = t648 * t754 - t757 * t762;
t541 = -qJDD(4) * pkin(4) - t830 * qJ(5) + t664 * t721 + qJDD(5) + t589;
t492 = -t652 * pkin(5) - pkin(8) * t832 + t651 * t695 + t541;
t823 = t492 * t753;
t822 = t492 * t756;
t526 = -t589 * t757 + t590 * t754;
t821 = t526 * t750;
t820 = t526 * t752;
t819 = t541 * t749;
t818 = t541 * t751;
t561 = t584 + t763;
t817 = t561 * t753;
t816 = t561 * t756;
t607 = t643 + t673;
t815 = t607 * t749;
t814 = t607 * t751;
t765 = t770 - 0.2e1 * t793;
t661 = t765 - t840;
t813 = t661 * t754;
t812 = t661 * t757;
t670 = qJDD(4) + t802;
t811 = t670 * t754;
t810 = t670 * t757;
t809 = t673 * t754;
t808 = t695 * t719;
t807 = t708 * t753;
t806 = t708 * t756;
t804 = t719 * t749;
t803 = t719 * t751;
t725 = t797 * qJDD(1);
t801 = t725 * t755;
t800 = t725 * t758;
t799 = t750 * t752;
t798 = t744 - t745;
t789 = qJDD(1) * t755;
t788 = qJDD(1) * t758;
t786 = t754 * t584;
t785 = t757 * t584;
t784 = t754 * t643;
t783 = t757 * t643;
t782 = t755 * t802;
t781 = t758 * t802;
t780 = -pkin(4) * t757 - pkin(3);
t372 = t405 * t753 + t756 * t406;
t428 = t483 * t749 + t751 * t484;
t527 = t589 * t754 + t757 * t590;
t705 = -pkin(1) * t759 + t742 - t771;
t709 = -t767 + t826;
t657 = t758 * t705 - t709 * t755;
t696 = -t731 * t755 - t758 * t732;
t698 = t759 * t827 + t765;
t776 = -t698 + t746;
t729 = -t755 * t759 + t788;
t775 = pkin(6) * t729 + g(3) * t755;
t730 = t758 * t759 + t789;
t774 = -pkin(6) * t730 + g(3) * t758;
t427 = -t483 * t751 + t484 * t749;
t666 = t752 * t846 + t828;
t609 = t752 * t666 + t750 * t667;
t610 = -t666 * t750 + t667 * t752;
t656 = t705 * t755 + t709 * t758;
t694 = t731 * t758 - t732 * t755;
t600 = -t652 - t808;
t723 = t750 * t839;
t690 = -t723 * t755 + t750 * t788;
t688 = t723 * t758 + t750 * t789;
t728 = t798 * t759;
t726 = t798 * qJDD(1);
t722 = t752 * t839;
t704 = -t716 - t830;
t703 = -t716 + t830;
t702 = t831 - t830;
t701 = t730 * t799;
t700 = t729 * t799;
t691 = -t722 * t755 + t752 * t788;
t689 = t722 * t758 + t752 * t789;
t682 = -t758 * t839 - t801;
t681 = -t755 * t839 + t800;
t678 = t716 - t831;
t677 = pkin(2) * t791 - t752 * t698;
t676 = pkin(2) * t790 + t750 * t698;
t674 = t718 - 0.2e1 * t796;
t672 = t835 + 0.2e1 * t795;
t668 = -t831 - t830;
t663 = t757 * t673;
t659 = (-t719 * t757 + t721 * t754) * qJD(4);
t658 = (-t719 * t754 - t721 * t757) * qJD(4);
t655 = -t687 + t831;
t654 = -t831 + t832;
t647 = -t831 - t716;
t645 = -pkin(2) * t722 - t667;
t644 = -pkin(2) * t723 + t666;
t641 = -t687 + t832;
t633 = t675 * t757 - t754 * t795;
t632 = t675 * t754 + t757 * t795;
t631 = t757 * t796 + t809;
t630 = t754 * t796 - t663;
t629 = -t687 - t831;
t628 = -t704 * t754 - t810;
t627 = -t703 * t754 + t847;
t626 = t702 * t757 - t811;
t625 = t704 * t757 - t811;
t624 = t703 * t757 + t848;
t623 = t702 * t754 + t810;
t622 = -t831 - t832;
t619 = -t672 * t757 - t674 * t754;
t618 = t718 * t754 - t757 * t835;
t617 = -t672 * t754 + t674 * t757;
t616 = -t718 * t757 - t754 * t835;
t615 = -t635 + t707;
t614 = t634 - t707;
t613 = t668 * t757 - t848;
t612 = t668 * t754 + t847;
t611 = t687 + t832;
t601 = t652 - t808;
t599 = (-t692 * t751 + t695 * t749) * t719;
t598 = (-t692 * t749 - t695 * t751) * t719;
t597 = -pkin(2) * t839 - t610;
t596 = -t658 * t752 - t659 * t750;
t595 = t653 * t751 - t695 * t804;
t594 = t653 * t749 + t695 * t803;
t593 = -t652 * t749 + t692 * t803;
t592 = t652 * t751 + t692 * t804;
t591 = -t635 - t707;
t588 = -pkin(7) * t625 - t812;
t586 = t609 * t755 - t698 * t758;
t585 = -t609 * t758 - t698 * t755;
t583 = -t635 + t634;
t582 = -pkin(7) * t612 - t813;
t581 = -t632 * t752 - t633 * t750;
t580 = -t630 * t752 - t631 * t750;
t579 = -t625 * t750 + t628 * t752;
t578 = t625 * t752 + t628 * t750;
t577 = -t624 * t752 - t627 * t750;
t576 = -t623 * t752 - t626 * t750;
t575 = t599 * t757 + t809;
t574 = t599 * t754 - t663;
t573 = -t707 - t634;
t572 = t654 * t751 - t815;
t571 = -t655 * t749 + t843;
t570 = t654 * t749 + t814;
t569 = t655 * t751 + t844;
t568 = -pkin(3) * t674 + pkin(7) * t628 - t813;
t567 = t595 * t757 + t784;
t566 = t593 * t757 - t784;
t565 = t595 * t754 - t783;
t564 = t593 * t754 + t783;
t559 = -t629 * t749 - t814;
t558 = t629 * t751 - t815;
t556 = -qJD(6) * t638 - t777;
t553 = (-t636 * t756 + t638 * t753) * t708;
t552 = (-t636 * t753 - t638 * t756) * t708;
t551 = -t616 * t750 + t618 * t752;
t550 = -t617 * t752 - t619 * t750;
t549 = t616 * t752 + t618 * t750;
t548 = -pkin(3) * t672 + pkin(7) * t613 + t812;
t547 = t622 * t751 - t844;
t546 = t622 * t749 + t843;
t545 = pkin(2) * t609 - qJ(2) * t610;
t544 = -t612 * t750 + t613 * t752;
t543 = t612 * t752 + t613 * t750;
t539 = t578 * t755 + t674 * t758;
t538 = -t578 * t758 + t674 * t755;
t537 = -t634 - t635;
t536 = -t600 * t751 - t604 * t749;
t535 = t601 * t751 - t603 * t749;
t534 = -t600 * t749 + t604 * t751;
t533 = t601 * t749 + t603 * t751;
t532 = -pkin(2) * t698 - t610 * t827;
t531 = t543 * t755 + t672 * t758;
t530 = -t543 * t758 + t672 * t755;
t529 = t549 * t755 + t647 * t758;
t528 = -t549 * t758 + t647 * t755;
t525 = t572 * t757 - t600 * t754;
t524 = t571 * t757 - t604 * t754;
t523 = t572 * t754 + t600 * t757;
t522 = t571 * t754 + t604 * t757;
t521 = -t620 + t766;
t516 = (qJD(6) + t708) * t638 + t777;
t515 = t614 * t756 - t817;
t514 = -t615 * t753 + t841;
t513 = t614 * t753 + t816;
t512 = t615 * t756 + t842;
t511 = -t638 * t807 - t756 * t766;
t510 = t638 * t806 - t753 * t766;
t509 = -t556 * t753 + t636 * t806;
t508 = t556 * t756 + t636 * t807;
t507 = t535 * t757 - t641 * t754;
t506 = t535 * t754 + t641 * t757;
t505 = t559 * t757 + t603 * t754;
t504 = t559 * t754 - t603 * t757;
t503 = -t591 * t753 - t816;
t502 = t591 * t756 - t817;
t501 = t547 * t757 - t601 * t754;
t500 = t547 * t754 + t601 * t757;
t499 = pkin(3) * t661 + pkin(7) * t527;
t498 = t536 * t757 - t611 * t754;
t497 = t536 * t754 + t611 * t757;
t496 = -t574 * t752 - t575 * t750;
t495 = t573 * t756 - t842;
t494 = t573 * t753 + t841;
t493 = -pkin(7) * t616 - t526;
t491 = -t565 * t752 - t567 * t750;
t490 = -t564 * t752 - t566 * t750;
t489 = -t552 * t749 + t553 * t751;
t488 = t552 * t751 + t553 * t749;
t487 = -qJ(5) * t558 + t818;
t486 = -qJ(5) * t546 + t819;
t485 = -pkin(3) * t647 + pkin(7) * t618 + t527;
t481 = t489 * t757 + t754 * t763;
t480 = t489 * t754 - t757 * t763;
t479 = pkin(2) * t549 + pkin(3) * t616 - qJ(2) * t551;
t478 = pkin(2) * t578 + pkin(3) * t625 - qJ(2) * t579 - t590;
t477 = t527 * t752 - t821;
t476 = t527 * t750 + t820;
t475 = -t523 * t752 - t525 * t750;
t474 = -t522 * t752 - t524 * t750;
t473 = -t517 * t756 - t521 * t753;
t472 = -t516 * t756 - t753 * t837;
t471 = -t517 * t753 + t521 * t756;
t470 = -t516 * t753 + t756 * t837;
t469 = -t513 * t749 + t515 * t751;
t468 = -t512 * t749 + t514 * t751;
t467 = t513 * t751 + t515 * t749;
t466 = t512 * t751 + t514 * t749;
t465 = -t510 * t749 + t511 * t751;
t464 = -t508 * t749 + t509 * t751;
t463 = t510 * t751 + t511 * t749;
t462 = t508 * t751 + t509 * t749;
t460 = -t506 * t752 - t507 * t750;
t458 = t476 * t755 - t661 * t758;
t457 = -t476 * t758 - t661 * t755;
t456 = -t504 * t750 + t505 * t752;
t455 = t504 * t752 + t505 * t750;
t454 = -pkin(4) * t558 + t484;
t453 = pkin(2) * t543 + pkin(3) * t612 - qJ(2) * t544 - t589;
t452 = -pkin(4) * t546 + t483;
t451 = -t502 * t749 + t503 * t751;
t450 = t502 * t751 + t503 * t749;
t449 = -t500 * t750 + t501 * t752;
t448 = t500 * t752 + t501 * t750;
t444 = -t497 * t750 + t498 * t752;
t443 = t497 * t752 + t498 * t750;
t442 = pkin(2) * t674 - t752 * t568 - t579 * t827 - t750 * t588;
t441 = -pkin(8) * t502 + t822;
t440 = -t494 * t749 + t495 * t751;
t439 = t494 * t751 + t495 * t749;
t438 = t465 * t757 + t786;
t437 = t464 * t757 - t786;
t436 = t465 * t754 - t785;
t435 = t464 * t754 + t785;
t434 = -pkin(8) * t494 + t823;
t433 = pkin(2) * t672 - t544 * t827 - t752 * t548 - t750 * t582;
t432 = t455 * t755 + t558 * t758;
t431 = -t455 * t758 + t558 * t755;
t430 = t448 * t755 + t546 * t758;
t429 = -t448 * t758 + t546 * t755;
t426 = t469 * t757 - t517 * t754;
t425 = t468 * t757 - t521 * t754;
t424 = t469 * t754 + t517 * t757;
t423 = t468 * t754 + t521 * t757;
t422 = t443 * t755 + t534 * t758;
t421 = -t443 * t758 + t534 * t755;
t420 = -t480 * t752 - t481 * t750;
t419 = t451 * t757 + t754 * t837;
t418 = t451 * t754 - t757 * t837;
t417 = -pkin(5) * t837 + pkin(8) * t503 + t823;
t416 = t440 * t757 + t516 * t754;
t415 = t440 * t754 - t516 * t757;
t414 = -pkin(5) * t516 + pkin(8) * t495 - t822;
t413 = t428 * t757 + t541 * t754;
t412 = t428 * t754 - t541 * t757;
t411 = -qJ(5) * t534 - t427;
t410 = -t471 * t749 + t473 * t751;
t409 = -t470 * t749 + t472 * t751;
t408 = t471 * t751 + t473 * t749;
t407 = t470 * t751 + t472 * t749;
t403 = pkin(2) * t647 - t752 * t485 - t750 * t493 - t551 * t827;
t402 = t409 * t757 - t583 * t754;
t401 = t409 * t754 + t583 * t757;
t400 = -pkin(7) * t504 - t454 * t754 + t487 * t757;
t399 = pkin(2) * t476 + pkin(3) * t526 - qJ(2) * t477;
t398 = -pkin(7) * t500 - t452 * t754 + t486 * t757;
t397 = t410 * t757 + t537 * t754;
t396 = t410 * t754 - t537 * t757;
t395 = -t436 * t752 - t438 * t750;
t394 = -t435 * t752 - t437 * t750;
t393 = -pkin(3) * t558 + pkin(7) * t505 + t454 * t757 + t487 * t754;
t392 = -pkin(3) * t546 + pkin(7) * t501 + t452 * t757 + t486 * t754;
t391 = -pkin(7) * t497 + t411 * t757 + t534 * t829;
t390 = -pkin(4) * t408 - pkin(5) * t471;
t389 = -pkin(2) * t661 + pkin(7) * t821 - t477 * t827 - t752 * t499;
t388 = -t424 * t752 - t426 * t750;
t387 = -t423 * t752 - t425 * t750;
t386 = -t418 * t750 + t419 * t752;
t385 = t418 * t752 + t419 * t750;
t384 = pkin(7) * t498 + t754 * t411 + t534 * t780;
t383 = pkin(2) * t455 + pkin(3) * t504 - pkin(4) * t603 - qJ(2) * t456 + qJ(5) * t559 + t819;
t382 = -t415 * t750 + t416 * t752;
t381 = t415 * t752 + t416 * t750;
t380 = pkin(2) * t448 + pkin(3) * t500 + pkin(4) * t601 - qJ(2) * t449 + qJ(5) * t547 - t818;
t379 = -t412 * t750 + t413 * t752;
t378 = t412 * t752 + t413 * t750;
t377 = -pkin(4) * t450 - pkin(5) * t502 + t406;
t376 = -qJ(5) * t450 - t417 * t749 + t441 * t751;
t375 = -pkin(4) * t439 - pkin(5) * t494 + t405;
t374 = t385 * t755 + t450 * t758;
t373 = -t385 * t758 + t450 * t755;
t370 = -qJ(5) * t439 - t414 * t749 + t434 * t751;
t369 = -t401 * t752 - t402 * t750;
t368 = -t396 * t750 + t397 * t752;
t367 = t396 * t752 + t397 * t750;
t366 = t381 * t755 + t439 * t758;
t365 = -t381 * t758 + t439 * t755;
t364 = pkin(2) * t443 + pkin(3) * t497 + pkin(4) * t611 - qJ(2) * t444 + qJ(5) * t536 + t428;
t363 = -pkin(7) * t412 + (-qJ(5) * t757 + t829) * t427;
t362 = -pkin(5) * t492 + pkin(8) * t372;
t361 = t378 * t755 + t427 * t758;
t360 = -t378 * t758 + t427 * t755;
t359 = -pkin(8) * t471 - t371;
t358 = -pkin(5) * t537 + pkin(8) * t473 + t372;
t357 = pkin(7) * t413 + (-qJ(5) * t754 + t780) * t427;
t356 = t367 * t755 + t408 * t758;
t355 = -t367 * t758 + t408 * t755;
t354 = pkin(2) * t558 - t752 * t393 - t750 * t400 - t456 * t827;
t353 = pkin(2) * t546 - t752 * t392 - t750 * t398 - t449 * t827;
t352 = t372 * t751 - t825;
t351 = t372 * t749 + t824;
t350 = pkin(2) * t534 - t752 * t384 - t750 * t391 - t444 * t827;
t349 = t352 * t757 + t492 * t754;
t348 = t352 * t754 - t492 * t757;
t347 = -pkin(7) * t418 + t376 * t757 - t377 * t754;
t346 = -pkin(7) * t415 + t370 * t757 - t375 * t754;
t345 = -pkin(3) * t450 + pkin(7) * t419 + t376 * t754 + t377 * t757;
t344 = pkin(2) * t378 + pkin(3) * t412 - pkin(4) * t541 - qJ(2) * t379 + qJ(5) * t428;
t343 = -pkin(3) * t439 + pkin(7) * t416 + t370 * t754 + t375 * t757;
t342 = pkin(2) * t385 + pkin(3) * t418 - pkin(4) * t837 - qJ(2) * t386 + qJ(5) * t451 + t417 * t751 + t441 * t749;
t341 = -pkin(4) * t351 - pkin(5) * t371;
t340 = -qJ(5) * t408 - t358 * t749 + t359 * t751;
t339 = pkin(2) * t381 + pkin(3) * t415 - pkin(4) * t516 - qJ(2) * t382 + qJ(5) * t440 + t414 * t751 + t434 * t749;
t338 = -pkin(8) * t824 - qJ(5) * t351 - t362 * t749;
t337 = -pkin(7) * t396 + t340 * t757 - t390 * t754;
t336 = -t348 * t750 + t349 * t752;
t335 = t348 * t752 + t349 * t750;
t334 = pkin(2) * t427 - t752 * t357 - t750 * t363 - t379 * t827;
t333 = -pkin(3) * t408 + pkin(7) * t397 + t340 * t754 + t390 * t757;
t332 = pkin(2) * t367 + pkin(3) * t396 - pkin(4) * t537 - qJ(2) * t368 + qJ(5) * t410 + t358 * t751 + t359 * t749;
t331 = t335 * t755 + t351 * t758;
t330 = -t335 * t758 + t351 * t755;
t329 = pkin(2) * t450 - t752 * t345 - t750 * t347 - t386 * t827;
t328 = pkin(2) * t439 - t752 * t343 - t750 * t346 - t382 * t827;
t327 = -pkin(7) * t348 + t338 * t757 - t341 * t754;
t326 = -pkin(3) * t351 + pkin(7) * t349 + t338 * t754 + t341 * t757;
t325 = pkin(2) * t408 - t752 * t333 - t750 * t337 - t368 * t827;
t324 = pkin(2) * t335 + pkin(3) * t348 - pkin(4) * t492 - pkin(8) * t825 - qJ(2) * t336 + qJ(5) * t352 + t362 * t751;
t323 = pkin(2) * t351 - t752 * t326 - t750 * t327 - t336 * t827;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t730, -t729, 0, t696, 0, 0, 0, 0, 0, 0, 0, t730, t729, t657, 0, 0, 0, 0, 0, 0, t690, t691, t682, t586, 0, 0, 0, 0, 0, 0, t531, t539, t529, t458, 0, 0, 0, 0, 0, 0, t430, t432, t422, t361, 0, 0, 0, 0, 0, 0, t366, t374, t356, t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t729, -t730, 0, t694, 0, 0, 0, 0, 0, 0, 0, -t729, t730, t656, 0, 0, 0, 0, 0, 0, t688, t689, t681, t585, 0, 0, 0, 0, 0, 0, t530, t538, t528, t457, 0, 0, 0, 0, 0, 0, t429, t431, t421, t360, 0, 0, 0, 0, 0, 0, t365, t373, t355, t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t610, 0, 0, 0, 0, 0, 0, t544, t579, t551, t477, 0, 0, 0, 0, 0, 0, t449, t456, t444, t379, 0, 0, 0, 0, 0, 0, t382, t386, t368, t336; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t729, 0, -t730, 0, -t775, -t774, -t694, -pkin(6) * t694, 0, -t729, t730, 0, 0, 0, -t656, t775, t774, -pkin(6) * t656 + (-pkin(1) * t755 + qJ(2) * t758) * g(3), t701, -t726 * t755 - t728 * t758, t691, -t701, -t690, 0, -pkin(6) * t688 + t644 * t758 - t677 * t755, -pkin(6) * t689 + t645 * t758 - t676 * t755, -pkin(2) * t800 - pkin(6) * t681 - t597 * t755, -pkin(6) * t585 - t532 * t755 + t545 * t758, -t581 * t755 + t781, -t550 * t755 + t678 * t758, -t577 * t755 + t718 * t758, -t580 * t755 - t781, -t576 * t755 - t758 * t835, qJDD(4) * t758 - t596 * t755, -pkin(6) * t530 - t433 * t755 + t453 * t758, -pkin(6) * t538 - t442 * t755 + t478 * t758, -pkin(6) * t528 - t403 * t755 + t479 * t758, -pkin(6) * t457 - t389 * t755 + t399 * t758, -t491 * t755 + t594 * t758, -t460 * t755 + t533 * t758, -t474 * t755 + t569 * t758, -t490 * t755 + t592 * t758, -t475 * t755 + t570 * t758, -t496 * t755 + t598 * t758, -pkin(6) * t429 - t353 * t755 + t380 * t758, -pkin(6) * t431 - t354 * t755 + t383 * t758, -pkin(6) * t421 - t350 * t755 + t364 * t758, -pkin(6) * t360 - t334 * t755 + t344 * t758, -t395 * t755 + t463 * t758, -t369 * t755 + t407 * t758, -t387 * t755 + t466 * t758, -t394 * t755 + t462 * t758, -t388 * t755 + t467 * t758, -t420 * t755 + t488 * t758, -pkin(6) * t365 - t328 * t755 + t339 * t758, -pkin(6) * t373 - t329 * t755 + t342 * t758, -pkin(6) * t355 - t325 * t755 + t332 * t758, -pkin(6) * t330 - t323 * t755 + t324 * t758; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t730, 0, t729, 0, t774, -t775, t696, pkin(6) * t696, 0, -t730, -t729, 0, 0, 0, t657, -t774, t775, pkin(6) * t657 + (pkin(1) * t758 + qJ(2) * t755) * g(3), -t700, t726 * t758 - t728 * t755, t689, t700, -t688, 0, pkin(6) * t690 + t644 * t755 + t677 * t758, pkin(6) * t691 + t645 * t755 + t676 * t758, -pkin(2) * t801 + pkin(6) * t682 + t597 * t758, pkin(6) * t586 + t532 * t758 + t545 * t755, t581 * t758 + t782, t550 * t758 + t678 * t755, t577 * t758 + t718 * t755, t580 * t758 - t782, t576 * t758 - t755 * t835, qJDD(4) * t755 + t596 * t758, pkin(6) * t531 + t433 * t758 + t453 * t755, pkin(6) * t539 + t442 * t758 + t478 * t755, pkin(6) * t529 + t403 * t758 + t479 * t755, pkin(6) * t458 + t389 * t758 + t399 * t755, t491 * t758 + t594 * t755, t460 * t758 + t533 * t755, t474 * t758 + t569 * t755, t490 * t758 + t592 * t755, t475 * t758 + t570 * t755, t496 * t758 + t598 * t755, pkin(6) * t430 + t353 * t758 + t380 * t755, pkin(6) * t432 + t354 * t758 + t383 * t755, pkin(6) * t422 + t350 * t758 + t364 * t755, pkin(6) * t361 + t334 * t758 + t344 * t755, t395 * t758 + t463 * t755, t369 * t758 + t407 * t755, t387 * t758 + t466 * t755, t394 * t758 + t462 * t755, t388 * t758 + t467 * t755, t420 * t758 + t488 * t755, pkin(6) * t366 + t328 * t758 + t339 * t755, pkin(6) * t374 + t329 * t758 + t342 * t755, pkin(6) * t356 + t325 * t758 + t332 * t755, pkin(6) * t331 + t323 * t758 + t324 * t755; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t731, t732, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t773 - 0.2e1 * t826, -t732 + t742 + 0.2e1 * t746, pkin(1) * t709 + qJ(2) * t705, t745 * qJDD(1), -0.2e1 * t750 * t790, 0, t744 * qJDD(1), 0, 0, t723 * t827 + t750 * t776, t722 * t827 + t752 * t776, -qJ(2) * t839 + t725 * t827 - t609, -qJ(2) * t698 - t609 * t827, -t632 * t750 + t633 * t752, -t617 * t750 + t619 * t752, -t624 * t750 + t627 * t752, -t630 * t750 + t631 * t752, -t623 * t750 + t626 * t752, -t658 * t750 + t659 * t752, qJ(2) * t672 - t543 * t827 - t750 * t548 + t752 * t582, qJ(2) * t674 - t750 * t568 - t578 * t827 + t752 * t588, qJ(2) * t647 - t750 * t485 + t752 * t493 - t549 * t827, -pkin(7) * t820 - qJ(2) * t661 - t476 * t827 - t750 * t499, -t565 * t750 + t567 * t752, -t506 * t750 + t507 * t752, -t522 * t750 + t524 * t752, -t564 * t750 + t566 * t752, -t523 * t750 + t525 * t752, -t574 * t750 + t575 * t752, qJ(2) * t546 - t750 * t392 + t752 * t398 - t448 * t827, qJ(2) * t558 - t750 * t393 + t752 * t400 - t455 * t827, qJ(2) * t534 - t750 * t384 + t752 * t391 - t443 * t827, qJ(2) * t427 - t750 * t357 + t752 * t363 - t378 * t827, -t436 * t750 + t438 * t752, -t401 * t750 + t402 * t752, -t423 * t750 + t425 * t752, -t435 * t750 + t437 * t752, -t424 * t750 + t426 * t752, -t480 * t750 + t481 * t752, qJ(2) * t439 - t750 * t343 + t752 * t346 - t381 * t827, qJ(2) * t450 - t750 * t345 + t752 * t347 - t385 * t827, qJ(2) * t408 - t750 * t333 + t752 * t337 - t367 * t827, qJ(2) * t351 - t750 * t326 + t752 * t327 - t335 * t827;];
tauB_reg  = t1;
