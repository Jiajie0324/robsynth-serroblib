% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRP2_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP2_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:03:10
% EndTime: 2019-03-10 01:03:27
% DurationCPUTime: 6.43s
% Computational Cost: add. (14007->471), mult. (35217->608), div. (0->0), fcn. (26301->8), ass. (0->260)
t204 = cos(qJ(5));
t288 = qJD(5) * t204;
t202 = sin(qJ(3));
t203 = sin(qJ(2));
t295 = qJD(1) * t203;
t273 = t202 * t295;
t205 = cos(qJ(3));
t206 = cos(qJ(2));
t294 = qJD(1) * t206;
t274 = t205 * t294;
t157 = -t273 + t274;
t158 = -t202 * t294 - t205 * t295;
t201 = sin(qJ(4));
t346 = cos(qJ(4));
t355 = t346 * t157 + t201 * t158;
t365 = t355 * t204;
t369 = t288 - t365;
t200 = sin(qJ(5));
t229 = -t201 * t157 + t346 * t158;
t197 = qJD(2) + qJD(3);
t267 = qJD(4) + t197;
t112 = -t200 * t229 - t204 * t267;
t114 = t200 * t267 - t204 * t229;
t363 = -qJD(5) + t355;
t368 = t363 * t200;
t289 = qJD(5) * t200;
t303 = t202 * t206;
t171 = t203 * t205 + t303;
t350 = qJD(1) * t171;
t212 = t197 * t350;
t211 = t201 * t212;
t285 = qJD(1) * qJD(2);
t270 = t206 * t285;
t136 = qJD(3) * t274 - t197 * t273 + t205 * t270;
t277 = t346 * t136;
t210 = t277 - t211;
t209 = qJD(4) * t355 + t210;
t364 = -qJD(5) * t267 - t209;
t50 = t204 * t364 - t229 * t289;
t51 = t114 * qJD(5) + t209 * t200;
t8 = -t369 * t112 + t114 * t368 - t200 * t51 - t50 * t204;
t263 = t201 * t136 + t346 * t212;
t64 = -t229 * qJD(4) + t263;
t61 = t204 * t64;
t15 = -t112 * t229 - t363 * t368 + t61;
t48 = t50 * t200;
t17 = t369 * t114 - t48;
t59 = t200 * t64;
t322 = -t288 * t363 + t59;
t16 = t114 * t229 + t363 * t365 + t322;
t344 = pkin(5) * t229;
t123 = t229 * qJ(6);
t309 = t229 * t355;
t314 = t363 * t229;
t366 = t355 * t200;
t55 = t229 ^ 2 - t355 ^ 2;
t154 = t158 * pkin(9);
t348 = pkin(7) + pkin(8);
t180 = t348 * t206;
t174 = qJD(1) * t180;
t159 = t202 * t174;
t179 = t348 * t203;
t172 = qJD(1) * t179;
t165 = qJD(2) * pkin(2) - t172;
t262 = t205 * t165 - t159;
t110 = t154 + t262;
t100 = pkin(3) * t197 + t110;
t163 = t205 * t174;
t242 = -t165 * t202 - t163;
t343 = pkin(9) * t157;
t111 = -t242 + t343;
t271 = qJD(4) * t346;
t290 = qJD(4) * t201;
t281 = qJD(2) * t348;
t253 = qJD(1) * t281;
t167 = t206 * t253;
t292 = qJD(3) * t202;
t260 = -t202 * t167 - t174 * t292;
t166 = t203 * t253;
t356 = (qJD(3) * t165 - t166) * t205;
t73 = -pkin(9) * t212 + t260 + t356;
t261 = t202 * t166 - t205 * t167;
t220 = t242 * qJD(3) + t261;
t74 = -pkin(9) * t136 + t220;
t14 = t100 * t290 + t111 * t271 + t201 * t73 - t346 * t74;
t193 = -pkin(2) * t206 - pkin(1);
t178 = t193 * qJD(1);
t143 = -pkin(3) * t157 + t178;
t231 = t143 * t229 - t14;
t108 = t346 * t111;
t67 = t201 * t100 + t108;
t63 = t267 * pkin(10) + t67;
t79 = -pkin(4) * t355 + pkin(10) * t229 + t143;
t38 = -t200 * t63 + t204 * t79;
t298 = qJD(6) - t38;
t26 = pkin(5) * t363 + t298;
t107 = t201 * t111;
t66 = t346 * t100 - t107;
t62 = -t267 * pkin(4) - t66;
t41 = t112 * pkin(5) - t114 * qJ(6) + t62;
t7 = pkin(5) * t51 + qJ(6) * t50 - qJD(6) * t114 + t14;
t272 = -t7 * t204 + t41 * t289;
t239 = -t229 * t26 + t272;
t268 = -t14 * t204 + t62 * t289;
t238 = t229 * t38 + t268;
t39 = t200 * t79 + t204 * t63;
t27 = -qJ(6) * t363 + t39;
t342 = t7 * t200;
t361 = t229 * t27 - t342;
t254 = t14 * t200 - t39 * t229 + t62 * t288;
t217 = -t100 * t271 + t111 * t290 - t201 * t74 - t346 * t73;
t214 = -t143 * t355 + t217;
t52 = -t355 * t197 + t210;
t53 = -t229 * t197 - t263;
t97 = -pkin(4) * t229 - pkin(10) * t355;
t359 = -0.2e1 * t285;
t194 = pkin(2) * t295;
t187 = qJD(2) * t194;
t215 = t157 * t271 + t158 * t290 + t277;
t291 = qJD(3) * t205;
t293 = qJD(2) * t203;
t21 = t64 * pkin(4) - t215 * pkin(10) + t187 + (pkin(10) * t201 + pkin(3)) * qJD(1) * (qJD(2) * t303 + t203 * t291 + t205 * t293 + t206 * t292);
t233 = t200 * t21 - t204 * t217 + t79 * t288 - t63 * t289;
t334 = qJ(6) * t64;
t2 = -qJD(6) * t363 + t233 + t334;
t266 = -t200 * t217 - t204 * t21 + t63 * t288 + t79 * t289;
t347 = pkin(5) * t64;
t4 = t266 - t347;
t358 = t2 * t204 + t4 * t200;
t192 = pkin(2) * t205 + pkin(3);
t304 = t201 * t202;
t134 = t192 * t271 + (-t202 * t290 + (t346 * t205 - t304) * qJD(3)) * pkin(2);
t259 = t172 * t202 - t163;
t117 = t259 - t343;
t297 = -t205 * t172 - t159;
t118 = t154 + t297;
t82 = t201 * t117 + t346 * t118;
t357 = -t134 + t82;
t275 = t346 * t202;
t321 = t346 * t117 - t201 * t118 + t192 * t290 + (t202 * t271 + (t201 * t205 + t275) * qJD(3)) * pkin(2);
t75 = t201 * t110 + t108;
t252 = pkin(3) * t290 - t75;
t153 = pkin(5) * t289 - qJ(6) * t288 - t200 * qJD(6);
t354 = -pkin(5) * t366 + qJ(6) * t365 + t153;
t353 = pkin(2) * t304 - t346 * t192;
t352 = -t211 + t215;
t124 = -pkin(9) * t171 - t179 * t205 - t180 * t202;
t170 = t202 * t203 - t205 * t206;
t241 = t179 * t202 - t180 * t205;
t125 = -pkin(9) * t170 - t241;
t351 = t346 * t124 - t201 * t125;
t349 = t114 ^ 2;
t345 = pkin(3) * t158;
t339 = t200 * t97 + t204 * t66;
t76 = t346 * t110 - t107;
t87 = -t345 + t97;
t338 = t200 * t87 + t204 * t76;
t83 = t194 + t87;
t337 = t200 * t83 + t204 * t82;
t139 = -t201 * t170 + t346 * t171;
t146 = pkin(3) * t170 + t193;
t228 = -t346 * t170 - t201 * t171;
t93 = -pkin(4) * t228 - pkin(10) * t139 + t146;
t95 = t201 * t124 + t346 * t125;
t336 = t200 * t93 + t204 * t95;
t335 = pkin(3) * qJD(4);
t333 = t114 * t41;
t332 = t355 * t41;
t152 = pkin(2) * t275 + t201 * t192 + pkin(10);
t330 = t152 * t64;
t190 = t201 * pkin(3) + pkin(10);
t329 = t190 * t64;
t140 = t197 * t170;
t225 = t171 * qJD(3);
t141 = t171 * qJD(2) + t225;
t84 = t228 * qJD(4) - t346 * t140 - t201 * t141;
t328 = t200 * t84;
t327 = t204 * t51;
t326 = t204 * t84;
t325 = t62 * t355;
t323 = t354 + t321;
t320 = t354 + t252;
t249 = pkin(5) * t200 - qJ(6) * t204;
t319 = -t249 * t355 + t153 - t67;
t318 = qJD(5) * t41;
t317 = t112 * t200;
t316 = t114 * t112;
t315 = t114 * t204;
t308 = t139 * t204;
t307 = t158 * t157;
t306 = t178 * t158;
t302 = t204 * t134;
t208 = qJD(1) ^ 2;
t301 = t206 * t208;
t207 = qJD(2) ^ 2;
t300 = t207 * t203;
t299 = t207 * t206;
t296 = t203 ^ 2 - t206 ^ 2;
t283 = t346 * pkin(3);
t196 = pkin(2) * t293;
t280 = t200 * t346;
t279 = t204 * t346;
t269 = -pkin(2) * t197 - t165;
t133 = pkin(3) * t141 + t196;
t33 = t200 * t82 - t204 * t83 + t344;
t265 = t200 * t134 - t33;
t264 = pkin(1) * t359;
t255 = pkin(3) * t271;
t250 = t204 * pkin(5) + t200 * qJ(6);
t248 = -t325 - t330;
t247 = -t325 - t329;
t246 = -t200 * t27 + t204 * t26;
t245 = t200 * t26 + t204 * t27;
t244 = -t200 * t66 + t204 * t97;
t176 = -pkin(4) - t250;
t240 = t365 * t41 + t361;
t237 = t26 * t288 - t27 * t289 + t358;
t236 = -t363 * t39 - t266;
t235 = -t139 * t289 + t326;
t234 = -t178 * t157 - t260;
t173 = t203 * t281;
t175 = t206 * t281;
t226 = -t205 * t173 - t202 * t175 - t179 * t291 - t180 * t292;
t90 = -pkin(9) * t141 + t226;
t219 = t241 * qJD(3) + t173 * t202 - t205 * t175;
t91 = pkin(9) * t140 + t219;
t24 = t351 * qJD(4) + t201 * t91 + t346 * t90;
t85 = t139 * qJD(4) - t201 * t140 + t346 * t141;
t35 = pkin(4) * t85 - pkin(10) * t84 + t133;
t232 = t200 * t35 + t204 * t24 + t93 * t288 - t95 * t289;
t227 = -t152 * t289 + t302;
t224 = t322 * pkin(10);
t222 = -t190 * t289 + t204 * t255;
t221 = -t26 * t365 + t27 * t366 + t237;
t218 = t246 * qJD(5) + t358;
t216 = -t48 - t327 + (t315 + t317) * qJD(5);
t25 = t95 * qJD(4) + t201 * t90 - t346 * t91;
t191 = -t283 - pkin(4);
t168 = -t283 + t176;
t151 = -pkin(4) + t353;
t144 = t194 - t345;
t142 = t176 + t353;
t119 = pkin(3) * t212 + t187;
t116 = -t157 ^ 2 + t158 ^ 2;
t104 = -t158 * t197 - t212;
t103 = -t157 * t197 + t136;
t80 = pkin(5) * t114 + qJ(6) * t112;
t54 = t249 * t139 - t351;
t43 = pkin(5) * t228 + t200 * t95 - t204 * t93;
t42 = -qJ(6) * t228 + t336;
t37 = -t244 + t344;
t36 = t339 - t123;
t32 = -t123 + t337;
t31 = t200 * t76 - t204 * t87 + t344;
t30 = -t123 + t338;
t29 = -t112 * t363 - t50;
t9 = t249 * t84 + (t250 * qJD(5) - qJD(6) * t204) * t139 + t25;
t6 = -pkin(5) * t85 + t336 * qJD(5) + t200 * t24 - t204 * t35;
t5 = qJ(6) * t85 - qJD(6) * t228 + t232;
t1 = [0, 0, 0, 0.2e1 * t203 * t270, t296 * t359, t299, -t300, 0, -pkin(7) * t299 + t203 * t264, pkin(7) * t300 + t206 * t264, t136 * t171 + t140 * t158, -t136 * t170 - t140 * t157 + t158 * t141 - t171 * t212, -t140 * t197, -t141 * t197, 0, -t157 * t196 + t178 * t141 + t219 * t197 + (t193 * t225 + (t203 * pkin(2) * t170 + t193 * t171) * qJD(2)) * qJD(1), t193 * t136 - t178 * t140 - t226 * t197 + (-t158 + t350) * t196, t352 * t139 - t229 * t84, -t139 * t64 + t228 * t352 + t229 * t85 + t355 * t84, t84 * t267, -t85 * t267, 0, -t119 * t228 - t133 * t355 + t143 * t85 + t146 * t64 - t25 * t267, t119 * t139 - t133 * t229 + t143 * t84 + t146 * t209 - t24 * t267, t114 * t235 - t50 * t308 (-t112 * t204 - t114 * t200) * t84 + (t48 - t327 + (-t315 + t317) * qJD(5)) * t139, t114 * t85 + t228 * t50 - t235 * t363 + t64 * t308, -t139 * t59 - t112 * t85 + t228 * t51 - (-t139 * t288 - t328) * t363, -t228 * t64 - t363 * t85, t266 * t228 + t38 * t85 + t25 * t112 - t351 * t51 + (-(-qJD(5) * t95 + t35) * t363 + t93 * t64 + t62 * qJD(5) * t139) * t204 + (-(-qJD(5) * t93 - t24) * t363 - t95 * t64 + t14 * t139 + t62 * t84) * t200, t25 * t114 - t268 * t139 + t228 * t233 + t232 * t363 + t62 * t326 - t336 * t64 + t351 * t50 - t39 * t85, t41 * t328 + t112 * t9 + t363 * t6 + t228 * t4 - t26 * t85 - t43 * t64 + t51 * t54 + (t288 * t41 + t342) * t139, -t112 * t5 + t114 * t6 - t42 * t51 - t43 * t50 + t246 * t84 + (-qJD(5) * t245 - t2 * t200 + t204 * t4) * t139, -t114 * t9 + t272 * t139 - t2 * t228 + t27 * t85 - t41 * t326 - t363 * t5 + t42 * t64 + t50 * t54, t2 * t42 + t26 * t6 + t27 * t5 + t4 * t43 + t41 * t9 + t54 * t7; 0, 0, 0, -t203 * t301, t296 * t208, 0, 0, 0, t208 * pkin(1) * t203, pkin(1) * t301, t307, t116, t103, t104, 0, t157 * t194 + t306 - t259 * t197 + (t269 * t202 - t163) * qJD(3) + t261, t158 * t194 + t297 * t197 + (t269 * qJD(3) + t166) * t205 + t234, t309, t55, t52, t53, 0, t144 * t355 - t321 * t267 + t231, t144 * t229 + t357 * t267 + t214, t17, t8, t16, t15, -t314, t151 * t51 + t248 * t200 + t321 * t112 - ((-qJD(5) * t152 - t83) * t204 + t357 * t200) * t363 + t238, -t151 * t50 + t248 * t204 + t321 * t114 - (-t227 + t337) * t363 + t254, t142 * t51 + (-t330 - t332) * t200 + t323 * t112 - (-t152 * t288 - t265) * t363 + t239, t265 * t114 + (t32 - t302) * t112 + t216 * t152 + t221, t142 * t50 + (-t318 + t330) * t204 - t323 * t114 - (t227 - t32) * t363 + t240, t134 * t245 + t142 * t7 + t152 * t218 - t26 * t33 - t27 * t32 + t323 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, t116, t103, t104, 0, -t197 * t242 + t220 + t306, t197 * t262 + t234 - t356, t309, t55, t52, t53, 0, t75 * t267 + (-t158 * t355 - t267 * t290) * pkin(3) + t231, t76 * t267 + (-t158 * t229 - t267 * t271) * pkin(3) + t214, t17, t8, t16, t15, -t314, t191 * t51 + t247 * t200 + t252 * t112 - ((-qJD(5) * t190 - t87) * t204 + (-t255 + t76) * t200) * t363 + t238, -t191 * t50 + t247 * t204 + t252 * t114 - (-t222 + t338) * t363 + t254, t168 * t51 + (-t329 - t332) * t200 + t320 * t112 - (-t190 * t288 - t200 * t255 + t31) * t363 + t239, t30 * t112 - t31 * t114 + (-t112 * t279 + t114 * t280) * t335 + t216 * t190 + t221, t168 * t50 + (-t318 + t329) * t204 - t320 * t114 - (-t30 + t222) * t363 + t240, t7 * t168 - t26 * t31 - t27 * t30 + t320 * t41 + (t26 * t280 + t27 * t279) * t335 + t218 * t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t309, t55, t52, t53, 0, t267 * t67 + t231, t267 * t66 + t214, t17, t8, t16, t15, -t314, -pkin(4) * t51 - t67 * t112 + t244 * t363 - t366 * t62 - t224 + t238, pkin(4) * t50 - t339 * t363 - t67 * t114 - t62 * t365 + (-t289 * t363 - t61) * pkin(10) + t254, t112 * t319 + t176 * t51 - t363 * t37 - t366 * t41 - t224 + t239, pkin(10) * t216 + t112 * t36 - t114 * t37 - t246 * t355 + t237, t176 * t50 - (-pkin(10) * t289 - t36) * t363 - t319 * t114 + (pkin(10) * t64 + t363 * t41) * t204 + t361, pkin(10) * t218 + t176 * t7 - t26 * t37 - t27 * t36 + t319 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316, -t112 ^ 2 + t349, t29, -t114 * t363 + t200 * t364 + t229 * t288, t64, -t114 * t62 + t236, t112 * t62 - t363 * t38 - t233, -t112 * t80 + t236 - t333 + 0.2e1 * t347, pkin(5) * t50 - qJ(6) * t51 + (t27 - t39) * t114 + (t26 - t298) * t112, 0.2e1 * t334 - t112 * t41 + t114 * t80 - (0.2e1 * qJD(6) - t38) * t363 + t233, -pkin(5) * t4 + qJ(6) * t2 - t26 * t39 + t27 * t298 - t41 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316 - t64, t29, -t363 ^ 2 - t349, t27 * t363 + t333 + t4;];
tauc_reg  = t1;
