% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 04:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:36:01
% EndTime: 2019-05-08 04:36:12
% DurationCPUTime: 12.06s
% Computational Cost: add. (55311->324), mult. (120502->410), div. (0->0), fcn. (91639->10), ass. (0->236)
t2519 = sin(qJ(3));
t2524 = cos(qJ(3));
t2525 = cos(qJ(2));
t2573 = qJD(1) * t2525;
t2520 = sin(qJ(2));
t2574 = qJD(1) * t2520;
t2485 = -t2519 * t2574 + t2524 * t2573;
t2486 = (t2519 * t2525 + t2520 * t2524) * qJD(1);
t2518 = sin(qJ(4));
t2523 = cos(qJ(4));
t2471 = t2485 * t2518 + t2486 * t2523;
t2552 = qJD(2) * t2573;
t2556 = t2520 * qJDD(1);
t2492 = t2552 + t2556;
t2512 = t2525 * qJDD(1);
t2553 = qJD(2) * t2574;
t2493 = t2512 - t2553;
t2547 = t2519 * t2492 - t2524 * t2493;
t2460 = -qJD(3) * t2486 - t2547;
t2543 = -t2524 * t2492 - t2519 * t2493;
t2461 = qJD(3) * t2485 - t2543;
t2548 = -t2523 * t2460 + t2518 * t2461;
t2537 = qJD(4) * t2471 + qJDD(5) + t2548;
t2514 = qJD(2) + qJD(3);
t2511 = qJD(4) + t2514;
t2517 = sin(qJ(5));
t2522 = cos(qJ(5));
t2456 = t2471 * t2517 - t2511 * t2522;
t2458 = t2471 * t2522 + t2511 * t2517;
t2568 = t2456 * t2458;
t2392 = t2537 + t2568;
t2455 = t2458 ^ 2;
t2469 = -t2523 * t2485 + t2486 * t2518;
t2467 = qJD(5) + t2469;
t2581 = t2467 ^ 2;
t2585 = -t2455 - t2581;
t2371 = t2392 * t2522 + t2517 * t2585;
t2544 = -t2518 * t2460 - t2523 * t2461;
t2415 = -qJD(4) * t2469 - t2544;
t2555 = qJDD(2) + qJDD(3);
t2551 = qJDD(4) + t2555;
t2534 = -t2456 * qJD(5) + t2522 * t2415 + t2517 * t2551;
t2567 = t2456 * t2467;
t2533 = t2534 - t2567;
t2346 = t2371 * t2518 + t2523 * t2533;
t2348 = t2371 * t2523 - t2518 * t2533;
t2325 = t2346 * t2524 + t2348 * t2519;
t2331 = t2346 * t2519 - t2348 * t2524;
t2311 = t2325 * t2520 + t2331 * t2525;
t2369 = t2392 * t2517 - t2522 * t2585;
t2521 = sin(qJ(1));
t2526 = cos(qJ(1));
t2609 = t2311 * t2521 + t2369 * t2526;
t2608 = t2311 * t2526 - t2369 * t2521;
t2303 = t2325 * t2525 - t2331 * t2520;
t2385 = t2534 + t2567;
t2549 = t2517 * t2415 - t2522 * t2551;
t2536 = (-qJD(5) + t2467) * t2458 - t2549;
t2583 = -t2385 * t2522 + t2517 * t2536;
t2430 = t2456 ^ 2;
t2413 = t2455 + t2430;
t2582 = t2385 * t2517 + t2522 * t2536;
t2594 = t2413 * t2523 + t2518 * t2582;
t2595 = -t2413 * t2518 + t2523 * t2582;
t2600 = -t2519 * t2594 + t2524 * t2595;
t2601 = t2519 * t2595 + t2524 * t2594;
t2605 = -t2520 * t2601 + t2525 * t2600;
t2607 = t2521 * t2605 - t2526 * t2583;
t2606 = t2521 * t2583 + t2526 * t2605;
t2604 = t2520 * t2600 + t2525 * t2601;
t2393 = t2537 - t2568;
t2584 = -t2581 - t2430;
t2588 = -t2393 * t2517 + t2522 * t2584;
t2599 = t2518 * t2588;
t2589 = t2393 * t2522 + t2517 * t2584;
t2598 = t2521 * t2589;
t2597 = t2523 * t2588;
t2596 = t2526 * t2589;
t2516 = t2525 ^ 2;
t2528 = qJD(1) ^ 2;
t2501 = t2521 * g(1) - t2526 * g(2);
t2541 = qJDD(1) * pkin(1) + t2501;
t2542 = qJD(2) * pkin(2) - pkin(8) * t2574;
t2463 = t2493 * pkin(2) - t2542 * t2574 + t2541 + (pkin(8) * t2516 + pkin(7)) * t2528;
t2484 = t2485 ^ 2;
t2545 = pkin(3) * t2514 - pkin(9) * t2486;
t2411 = t2460 * pkin(3) + t2484 * pkin(9) - t2486 * t2545 + t2463;
t2580 = t2469 ^ 2;
t2579 = t2471 ^ 2;
t2578 = t2486 ^ 2;
t2577 = t2511 ^ 2;
t2576 = t2514 ^ 2;
t2575 = t2520 * g(3);
t2566 = t2469 * t2471;
t2565 = t2485 * t2486;
t2564 = t2514 * t2485;
t2563 = t2516 * t2528;
t2502 = -g(1) * t2526 - g(2) * t2521;
t2488 = -pkin(1) * t2528 + qJDD(1) * pkin(7) + t2502;
t2562 = t2520 * t2488;
t2561 = t2520 * t2528;
t2560 = t2525 * t2488;
t2559 = -qJD(3) + t2514;
t2558 = qJD(4) - t2511;
t2531 = -pkin(2) * t2563 + t2493 * pkin(8) - qJD(2) * t2542 - t2575;
t2538 = pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2561 - g(3);
t2539 = qJDD(2) * pkin(2) - t2492 * pkin(8) - t2562;
t2428 = t2524 * (t2531 + t2560) + t2519 * (t2525 * t2538 + t2539);
t2402 = -t2484 * pkin(3) + t2460 * pkin(9) - t2514 * t2545 + t2428;
t2427 = -t2519 * t2531 + t2524 * t2539 + (-t2519 * t2488 + t2524 * t2538) * t2525;
t2473 = t2555 + t2565;
t2529 = (-t2461 + t2564) * pkin(9) + t2473 * pkin(3) + t2427;
t2368 = t2523 * t2402 + t2518 * t2529;
t2439 = pkin(4) * t2469 - pkin(10) * t2471;
t2362 = -pkin(4) * t2577 + pkin(10) * t2551 - t2469 * t2439 + t2368;
t2403 = (qJD(4) + t2511) * t2471 + t2548;
t2550 = t2511 * t2469 - t2415;
t2530 = pkin(4) * t2403 + pkin(10) * t2550 - t2411;
t2335 = t2522 * t2362 + t2517 * t2530;
t2515 = t2520 ^ 2;
t2557 = t2515 + t2516;
t2334 = -t2517 * t2362 + t2522 * t2530;
t2367 = -t2518 * t2402 + t2523 * t2529;
t2540 = -qJD(5) * t2458 - t2549;
t2361 = -t2551 * pkin(4) - t2577 * pkin(10) + t2471 * t2439 - t2367;
t2527 = qJD(2) ^ 2;
t2507 = t2525 * t2561;
t2505 = -t2527 - t2563;
t2504 = -t2515 * t2528 - t2527;
t2500 = -qJDD(2) + t2507;
t2499 = qJDD(2) + t2507;
t2498 = t2557 * t2528;
t2497 = -qJDD(1) * t2521 - t2526 * t2528;
t2496 = qJDD(1) * t2526 - t2521 * t2528;
t2495 = t2557 * qJDD(1);
t2494 = t2512 - 0.2e1 * t2553;
t2491 = 0.2e1 * t2552 + t2556;
t2487 = t2528 * pkin(7) + t2541;
t2481 = t2560 - t2575;
t2480 = -t2525 * g(3) - t2562;
t2479 = -t2576 - t2578;
t2478 = t2500 * t2525 - t2504 * t2520;
t2477 = -t2499 * t2520 + t2505 * t2525;
t2476 = t2500 * t2520 + t2504 * t2525;
t2475 = t2499 * t2525 + t2505 * t2520;
t2474 = -t2555 + t2565;
t2472 = -t2576 - t2484;
t2462 = -t2484 - t2578;
t2459 = -t2577 - t2579;
t2452 = -t2480 * t2520 + t2481 * t2525;
t2451 = t2480 * t2525 + t2481 * t2520;
t2448 = t2474 * t2524 - t2479 * t2519;
t2447 = t2474 * t2519 + t2479 * t2524;
t2446 = t2485 * t2559 + t2543;
t2445 = t2461 + t2564;
t2444 = t2486 * t2559 - t2547;
t2443 = (qJD(3) + t2514) * t2486 + t2547;
t2442 = t2472 * t2524 - t2473 * t2519;
t2441 = t2472 * t2519 + t2473 * t2524;
t2438 = -t2551 - t2566;
t2437 = t2551 - t2566;
t2436 = -t2577 - t2580;
t2429 = pkin(5) * t2456 - qJ(6) * t2458;
t2426 = -t2579 - t2580;
t2423 = t2438 * t2523 - t2459 * t2518;
t2422 = t2438 * t2518 + t2459 * t2523;
t2421 = -t2447 * t2520 + t2448 * t2525;
t2420 = t2447 * t2525 + t2448 * t2520;
t2417 = t2444 * t2524 - t2446 * t2519;
t2416 = t2444 * t2519 + t2446 * t2524;
t2410 = -t2441 * t2520 + t2442 * t2525;
t2409 = t2441 * t2525 + t2442 * t2520;
t2408 = t2436 * t2523 - t2437 * t2518;
t2407 = t2436 * t2518 + t2437 * t2523;
t2406 = t2469 * t2558 + t2544;
t2404 = -t2471 * t2558 - t2548;
t2396 = -t2427 * t2519 + t2428 * t2524;
t2395 = t2427 * t2524 + t2428 * t2519;
t2391 = -t2422 * t2519 + t2423 * t2524;
t2390 = t2422 * t2524 + t2423 * t2519;
t2389 = -t2416 * t2520 + t2417 * t2525;
t2388 = t2416 * t2525 + t2417 * t2520;
t2382 = t2467 * t2458 - t2540;
t2381 = (qJD(5) + t2467) * t2458 + t2549;
t2380 = -t2407 * t2519 + t2408 * t2524;
t2379 = t2407 * t2524 + t2408 * t2519;
t2378 = t2404 * t2523 - t2406 * t2518;
t2377 = t2404 * t2518 + t2406 * t2523;
t2366 = -t2395 * t2520 + t2396 * t2525;
t2365 = t2395 * t2525 + t2396 * t2520;
t2359 = -t2390 * t2520 + t2391 * t2525;
t2358 = t2390 * t2525 + t2391 * t2520;
t2353 = t2382 * t2518 + t2597;
t2351 = -t2382 * t2523 + t2599;
t2349 = t2381 * t2518 + t2597;
t2347 = -t2381 * t2523 + t2599;
t2345 = -t2379 * t2520 + t2380 * t2525;
t2344 = t2379 * t2525 + t2380 * t2520;
t2339 = -t2377 * t2519 + t2378 * t2524;
t2338 = t2377 * t2524 + t2378 * t2519;
t2337 = -t2367 * t2518 + t2368 * t2523;
t2336 = t2367 * t2523 + t2368 * t2518;
t2333 = -t2540 * pkin(5) + (pkin(5) * t2467 - (2 * qJD(6))) * t2458 + t2361 - t2533 * qJ(6);
t2332 = -t2351 * t2519 + t2353 * t2524;
t2330 = t2351 * t2524 + t2353 * t2519;
t2328 = -t2347 * t2519 + t2349 * t2524;
t2326 = t2347 * t2524 + t2349 * t2519;
t2324 = -pkin(5) * t2537 - qJ(6) * t2581 + t2458 * t2429 + qJDD(6) - t2334;
t2323 = -pkin(5) * t2581 + qJ(6) * t2537 + 0.2e1 * qJD(6) * t2467 - t2456 * t2429 + t2335;
t2318 = -t2338 * t2520 + t2339 * t2525;
t2317 = t2338 * t2525 + t2339 * t2520;
t2316 = -t2336 * t2519 + t2337 * t2524;
t2315 = t2336 * t2524 + t2337 * t2519;
t2314 = -t2334 * t2517 + t2335 * t2522;
t2313 = t2334 * t2522 + t2335 * t2517;
t2312 = -t2330 * t2520 + t2332 * t2525;
t2310 = t2330 * t2525 + t2332 * t2520;
t2308 = t2314 * t2523 + t2361 * t2518;
t2307 = t2314 * t2518 - t2361 * t2523;
t2306 = -t2326 * t2520 + t2328 * t2525;
t2304 = t2326 * t2525 + t2328 * t2520;
t2302 = t2323 * t2522 + t2324 * t2517;
t2301 = t2323 * t2517 - t2324 * t2522;
t2296 = -t2315 * t2520 + t2316 * t2525;
t2295 = t2315 * t2525 + t2316 * t2520;
t2294 = t2302 * t2523 + t2333 * t2518;
t2293 = t2302 * t2518 - t2333 * t2523;
t2292 = -t2307 * t2519 + t2308 * t2524;
t2291 = t2307 * t2524 + t2308 * t2519;
t2290 = -t2293 * t2519 + t2294 * t2524;
t2289 = t2293 * t2524 + t2294 * t2519;
t2288 = -t2291 * t2520 + t2292 * t2525;
t2287 = t2291 * t2525 + t2292 * t2520;
t2286 = -t2289 * t2520 + t2290 * t2525;
t2285 = t2289 * t2525 + t2290 * t2520;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2497, -t2496, 0, -t2501 * t2521 + t2502 * t2526, 0, 0, 0, 0, 0, 0, t2477 * t2526 - t2494 * t2521, t2478 * t2526 + t2491 * t2521, t2495 * t2526 - t2498 * t2521, t2452 * t2526 - t2487 * t2521, 0, 0, 0, 0, 0, 0, t2410 * t2526 + t2443 * t2521, t2421 * t2526 + t2445 * t2521, t2389 * t2526 + t2462 * t2521, t2366 * t2526 - t2463 * t2521, 0, 0, 0, 0, 0, 0, t2345 * t2526 + t2403 * t2521, t2359 * t2526 - t2521 * t2550, t2318 * t2526 + t2426 * t2521, t2296 * t2526 - t2411 * t2521, 0, 0, 0, 0, 0, 0, t2306 * t2526 + t2598, t2608, t2606, t2288 * t2526 + t2313 * t2521, 0, 0, 0, 0, 0, 0, t2312 * t2526 + t2598, t2606, -t2608, t2286 * t2526 + t2301 * t2521; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2496, t2497, 0, t2501 * t2526 + t2502 * t2521, 0, 0, 0, 0, 0, 0, t2477 * t2521 + t2494 * t2526, t2478 * t2521 - t2491 * t2526, t2495 * t2521 + t2498 * t2526, t2452 * t2521 + t2487 * t2526, 0, 0, 0, 0, 0, 0, t2410 * t2521 - t2443 * t2526, t2421 * t2521 - t2445 * t2526, t2389 * t2521 - t2462 * t2526, t2366 * t2521 + t2463 * t2526, 0, 0, 0, 0, 0, 0, t2345 * t2521 - t2403 * t2526, t2359 * t2521 + t2526 * t2550, t2318 * t2521 - t2426 * t2526, t2296 * t2521 + t2411 * t2526, 0, 0, 0, 0, 0, 0, t2306 * t2521 - t2596, t2609, t2607, t2288 * t2521 - t2313 * t2526, 0, 0, 0, 0, 0, 0, t2312 * t2521 - t2596, t2607, -t2609, t2286 * t2521 - t2301 * t2526; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2475, t2476, 0, t2451, 0, 0, 0, 0, 0, 0, t2409, t2420, t2388, t2365, 0, 0, 0, 0, 0, 0, t2344, t2358, t2317, t2295, 0, 0, 0, 0, 0, 0, t2304, -t2303, t2604, t2287, 0, 0, 0, 0, 0, 0, t2310, t2604, t2303, t2285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2528, -qJDD(1), 0, t2502, 0, 0, 0, 0, 0, 0, t2477, t2478, t2495, t2452, 0, 0, 0, 0, 0, 0, t2410, t2421, t2389, t2366, 0, 0, 0, 0, 0, 0, t2345, t2359, t2318, t2296, 0, 0, 0, 0, 0, 0, t2306, t2311, t2605, t2288, 0, 0, 0, 0, 0, 0, t2312, t2605, -t2311, t2286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2528, 0, t2501, 0, 0, 0, 0, 0, 0, t2494, -t2491, t2498, t2487, 0, 0, 0, 0, 0, 0, -t2443, -t2445, -t2462, t2463, 0, 0, 0, 0, 0, 0, -t2403, t2550, -t2426, t2411, 0, 0, 0, 0, 0, 0, -t2589, t2369, -t2583, -t2313, 0, 0, 0, 0, 0, 0, -t2589, -t2583, -t2369, -t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2475, t2476, 0, t2451, 0, 0, 0, 0, 0, 0, t2409, t2420, t2388, t2365, 0, 0, 0, 0, 0, 0, t2344, t2358, t2317, t2295, 0, 0, 0, 0, 0, 0, t2304, -t2303, t2604, t2287, 0, 0, 0, 0, 0, 0, t2310, t2604, t2303, t2285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2505, t2500, t2512, t2481, 0, 0, 0, 0, 0, 0, t2442, t2448, t2417, t2396, 0, 0, 0, 0, 0, 0, t2380, t2391, t2339, t2316, 0, 0, 0, 0, 0, 0, t2328, t2331, t2600, t2292, 0, 0, 0, 0, 0, 0, t2332, t2600, -t2331, t2290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2499, t2504, -t2556, t2480, 0, 0, 0, 0, 0, 0, t2441, t2447, t2416, t2395, 0, 0, 0, 0, 0, 0, t2379, t2390, t2338, t2315, 0, 0, 0, 0, 0, 0, t2326, -t2325, t2601, t2291, 0, 0, 0, 0, 0, 0, t2330, t2601, t2325, t2289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2494, t2491, -t2498, -t2487, 0, 0, 0, 0, 0, 0, t2443, t2445, t2462, -t2463, 0, 0, 0, 0, 0, 0, t2403, -t2550, t2426, -t2411, 0, 0, 0, 0, 0, 0, t2589, -t2369, t2583, t2313, 0, 0, 0, 0, 0, 0, t2589, t2583, t2369, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2472, t2474, t2444, t2428, 0, 0, 0, 0, 0, 0, t2408, t2423, t2378, t2337, 0, 0, 0, 0, 0, 0, t2349, -t2348, t2595, t2308, 0, 0, 0, 0, 0, 0, t2353, t2595, t2348, t2294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2473, t2479, t2446, t2427, 0, 0, 0, 0, 0, 0, t2407, t2422, t2377, t2336, 0, 0, 0, 0, 0, 0, t2347, -t2346, t2594, t2307, 0, 0, 0, 0, 0, 0, t2351, t2594, t2346, t2293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2443, t2445, t2462, -t2463, 0, 0, 0, 0, 0, 0, t2403, -t2550, t2426, -t2411, 0, 0, 0, 0, 0, 0, t2589, -t2369, t2583, t2313, 0, 0, 0, 0, 0, 0, t2589, t2583, t2369, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2436, t2438, t2404, t2368, 0, 0, 0, 0, 0, 0, t2588, -t2371, t2582, t2314, 0, 0, 0, 0, 0, 0, t2588, t2582, t2371, t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2437, t2459, t2406, t2367, 0, 0, 0, 0, 0, 0, -t2381, -t2533, t2413, -t2361, 0, 0, 0, 0, 0, 0, -t2382, t2413, t2533, -t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2403, -t2550, t2426, -t2411, 0, 0, 0, 0, 0, 0, t2589, -t2369, t2583, t2313, 0, 0, 0, 0, 0, 0, t2589, t2583, t2369, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2584, -t2392, t2536, t2335, 0, 0, 0, 0, 0, 0, t2584, t2536, t2392, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2393, t2585, -t2385, t2334, 0, 0, 0, 0, 0, 0, t2393, -t2385, -t2585, -t2324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2381, t2533, -t2413, t2361, 0, 0, 0, 0, 0, 0, t2382, -t2413, -t2533, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2584, t2536, t2392, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2382, -t2413, -t2533, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2393, t2385, t2585, t2324;];
f_new_reg  = t1;
