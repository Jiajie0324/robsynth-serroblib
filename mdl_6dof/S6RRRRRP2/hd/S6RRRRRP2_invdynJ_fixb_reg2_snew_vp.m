% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 04:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRRP2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:33:03
% EndTime: 2019-05-08 04:33:48
% DurationCPUTime: 17.74s
% Computational Cost: add. (69810->592), mult. (151988->794), div. (0->0), fcn. (115393->10), ass. (0->382)
t371 = sin(qJ(3));
t376 = cos(qJ(3));
t377 = cos(qJ(2));
t372 = sin(qJ(2));
t445 = qJD(1) * t372;
t341 = qJD(1) * t376 * t377 - t371 * t445;
t342 = (t371 * t377 + t372 * t376) * qJD(1);
t370 = sin(qJ(4));
t375 = cos(qJ(4));
t322 = -t375 * t341 + t342 * t370;
t318 = qJD(5) + t322;
t491 = t318 ^ 2;
t324 = t341 * t370 + t342 * t375;
t366 = qJD(2) + qJD(3);
t359 = qJD(4) + t366;
t369 = sin(qJ(5));
t374 = cos(qJ(5));
t304 = t324 * t369 - t374 * t359;
t492 = t304 ^ 2;
t272 = t492 - t491;
t360 = t372 * qJDD(1);
t441 = qJD(1) * qJD(2);
t430 = t377 * t441;
t348 = t360 + t430;
t361 = t377 * qJDD(1);
t431 = t372 * t441;
t349 = t361 - t431;
t425 = t348 * t371 - t376 * t349;
t308 = -qJD(3) * t342 - t425;
t404 = t348 * t376 + t349 * t371;
t309 = qJD(3) * t341 + t404;
t427 = -t375 * t308 + t309 * t370;
t242 = -qJD(4) * t324 - t427;
t241 = qJDD(5) - t242;
t306 = t324 * t374 + t359 * t369;
t461 = t306 * t304;
t508 = t241 + t461;
t473 = t508 * t369;
t171 = -t272 * t374 + t473;
t276 = t318 * t306;
t405 = t308 * t370 + t309 * t375;
t243 = -qJD(4) * t322 + t405;
t440 = qJDD(2) + qJDD(3);
t422 = qJDD(4) + t440;
t428 = -t243 * t369 + t374 * t422;
t398 = qJD(5) * t306 - t428;
t191 = -t276 + t398;
t108 = t171 * t370 - t191 * t375;
t112 = t171 * t375 + t191 * t370;
t568 = t372 * (t108 * t371 - t112 * t376) - t377 * (t108 * t376 + t112 * t371);
t390 = -t374 * t243 - t369 * t422;
t385 = -t304 * qJD(5) - t390;
t462 = t304 * t318;
t501 = -t462 + t385;
t475 = t501 * t369;
t507 = t276 + t398;
t122 = -t507 * t374 - t475;
t303 = t306 ^ 2;
t504 = t303 - t492;
t91 = t122 * t370 - t375 * t504;
t93 = t122 * t375 + t370 * t504;
t565 = t372 * (t371 * t91 - t376 * t93) - t377 * (t371 * t93 + t376 * t91);
t505 = -t303 - t491;
t148 = -t374 * t505 + t473;
t562 = pkin(1) * t148;
t561 = pkin(2) * t148;
t509 = t241 - t461;
t471 = t509 * t369;
t499 = -t491 - t492;
t512 = t374 * t499 - t471;
t531 = t370 * t507 + t375 * t512;
t532 = t370 * t512 - t375 * t507;
t543 = t371 * t531 + t376 * t532;
t560 = pkin(2) * t543;
t559 = pkin(3) * t148;
t558 = pkin(4) * t148;
t557 = pkin(8) * t543;
t556 = pkin(10) * t148;
t472 = t508 * t374;
t150 = t369 * t505 + t472;
t555 = pkin(10) * t150;
t554 = t150 * t370;
t553 = t150 * t375;
t470 = t509 * t374;
t513 = t369 * t499 + t470;
t544 = -t371 * t532 + t376 * t531;
t552 = -pkin(2) * t513 + pkin(8) * t544;
t551 = pkin(7) * (-t372 * t543 + t377 * t544) - pkin(1) * t513;
t500 = t462 + t385;
t273 = -t303 + t491;
t533 = -t273 * t369 + t470;
t545 = t370 * t500 + t375 * t533;
t546 = t370 * t533 - t375 * t500;
t550 = t372 * (-t371 * t546 + t376 * t545) + t377 * (t371 * t545 + t376 * t546);
t549 = pkin(3) * t532;
t548 = pkin(9) * t532;
t168 = t272 * t369 + t472;
t547 = -pkin(3) * t513 + pkin(9) * t531;
t539 = pkin(4) * t513;
t538 = pkin(10) * t512;
t537 = pkin(10) * t513;
t534 = t374 * t273 + t471;
t368 = t377 ^ 2;
t379 = qJD(1) ^ 2;
t373 = sin(qJ(1));
t489 = cos(qJ(1));
t429 = g(1) * t373 - t489 * g(2);
t401 = qJDD(1) * pkin(1) + t429;
t402 = qJD(2) * pkin(2) - pkin(8) * t445;
t311 = pkin(2) * t349 - t402 * t445 + t401 + (pkin(8) * t368 + pkin(7)) * t379;
t474 = t501 * t374;
t118 = -t507 * t369 + t474;
t503 = t303 + t492;
t530 = pkin(4) * t503;
t529 = -qJ(6) * t369 - pkin(4);
t528 = qJ(6) * t501;
t525 = t370 * t503;
t288 = t324 * t322;
t506 = -t288 + t422;
t523 = t370 * t506;
t330 = t341 * t342;
t502 = t330 + t440;
t521 = t371 * t502;
t518 = t375 * t503;
t516 = t375 * t506;
t514 = t376 * t502;
t339 = t341 ^ 2;
t415 = pkin(3) * t366 - pkin(9) * t342;
t235 = pkin(3) * t308 + pkin(9) * t339 - t342 * t415 + t311;
t458 = t318 * t369;
t270 = t306 * t458;
t457 = t318 * t374;
t436 = t304 * t457;
t410 = t270 - t436;
t494 = t241 * t370 + t375 * t410;
t497 = -t375 * t241 + t370 * t410;
t511 = t372 * (-t371 * t497 + t376 * t494) + t377 * (t371 * t494 + t376 * t497);
t400 = t369 * t398 + t436;
t438 = t370 * t461;
t495 = t375 * t400 - t438;
t437 = t375 * t461;
t496 = t370 * t400 + t437;
t510 = t372 * (-t371 * t496 + t376 * t495) + t377 * (t371 * t495 + t376 * t496);
t448 = t372 * t379;
t403 = g(1) * t489 + t373 * g(2);
t482 = qJDD(1) * pkin(7);
t344 = -t379 * pkin(1) - t403 + t482;
t454 = t344 * t372;
t297 = qJDD(2) * pkin(2) - pkin(8) * t348 - t454 + (pkin(2) * t448 + pkin(8) * t441 - g(3)) * t377;
t334 = -t372 * g(3) + t377 * t344;
t363 = t368 * t379;
t298 = -pkin(2) * t363 + t349 * pkin(8) - qJD(2) * t402 + t334;
t260 = t371 * t297 + t376 * t298;
t213 = -t339 * pkin(3) + t308 * pkin(9) - t366 * t415 + t260;
t337 = t366 * t341;
t294 = t309 - t337;
t406 = t376 * t297 - t371 * t298;
t381 = pkin(3) * t502 - pkin(9) * t294 + t406;
t137 = t375 * t213 + t370 * t381;
t283 = pkin(4) * t322 - pkin(10) * t324;
t490 = t359 ^ 2;
t129 = -pkin(4) * t490 + pkin(10) * t422 - t322 * t283 + t137;
t314 = t359 * t322;
t222 = t243 - t314;
t132 = -t222 * pkin(10) + (t324 * t359 - t242) * pkin(4) - t235;
t74 = t129 * t369 - t374 * t132;
t75 = t374 * t129 + t369 * t132;
t38 = t369 * t74 + t374 * t75;
t261 = pkin(5) * t304 - qJ(6) * t306;
t419 = -t241 * qJ(6) + t304 * t261 - t75;
t498 = -pkin(5) * (t505 + t491) + qJ(6) * t508 - t419;
t185 = t374 * t385 - t270;
t412 = t375 * t185 + t438;
t413 = t370 * t185 - t437;
t493 = t372 * (-t371 * t413 + t376 * t412) + t377 * (t371 * t412 + t376 * t413);
t320 = t322 ^ 2;
t321 = t324 ^ 2;
t340 = t342 ^ 2;
t365 = t366 ^ 2;
t488 = pkin(4) * t370;
t136 = t213 * t370 - t375 * t381;
t80 = -t136 * t375 + t137 * t370;
t487 = t371 * t80;
t486 = t376 * t80;
t128 = -t422 * pkin(4) - t490 * pkin(10) + t283 * t324 + t136;
t485 = -pkin(4) * t128 + pkin(10) * t38;
t483 = qJ(6) * t374;
t477 = t500 * t369;
t476 = t500 * t374;
t207 = t260 * t371 + t376 * t406;
t469 = t207 * t372;
t468 = t235 * t370;
t467 = t235 * t375;
t281 = t288 + t422;
t464 = t281 * t370;
t463 = t281 * t375;
t460 = t311 * t371;
t459 = t311 * t376;
t327 = -t330 + t440;
t456 = t327 * t371;
t455 = t327 * t376;
t453 = t359 * t370;
t452 = t359 * t375;
t451 = t366 * t371;
t450 = t366 * t376;
t124 = t369 * t128;
t356 = t377 * t448;
t449 = t372 * (qJDD(2) + t356);
t125 = t374 * t128;
t447 = t377 * (qJDD(2) - t356);
t444 = qJD(6) * t318;
t443 = qJD(3) + t366;
t442 = qJD(4) + t359;
t32 = -t128 * t375 + t370 * t38;
t439 = pkin(3) * t32 + t485;
t198 = (qJD(5) + t318) * t304 + t390;
t435 = pkin(4) * t198 + t124 - t555;
t434 = -pkin(4) * t507 - t125 + t538;
t433 = -pkin(4) * t375 - pkin(3);
t81 = t136 * t370 + t375 * t137;
t208 = t376 * t260 - t371 * t406;
t333 = g(3) * t377 + t454;
t426 = t372 * t333 + t377 * t334;
t121 = -t191 * t374 + t477;
t315 = 0.2e1 * t444;
t407 = t315 - t419;
t44 = (t503 - t491) * pkin(5) + t407;
t58 = -t241 * pkin(5) - qJ(6) * t491 + t261 * t306 + qJDD(6) + t74;
t46 = qJ(6) * t503 + t58;
t424 = pkin(10) * t121 + t369 * t46 + t374 * t44 + t530;
t193 = (-qJD(5) + t318) * t306 + t428;
t123 = t193 * t374 + t477;
t423 = pkin(10) * t123 + t38 + t530;
t421 = t434 + t549;
t102 = t198 * t375 - t554;
t420 = pkin(3) * t102 + t435;
t86 = t121 * t370 + t518;
t417 = pkin(3) * t86 + t424;
t87 = t123 * t370 + t518;
t416 = pkin(3) * t87 + t423;
t57 = -pkin(5) * t491 + t407;
t414 = -pkin(5) * t58 + qJ(6) * t57;
t411 = t304 * t458 - t374 * t398;
t279 = -t490 - t320;
t230 = t279 * t370 + t516;
t409 = pkin(3) * t230 - t136;
t408 = -pkin(5) * t500 - qJ(6) * t191;
t37 = t369 * t75 - t374 * t74;
t386 = t398 * pkin(5) + t128 - t528;
t384 = 0.2e1 * qJD(6) * t306 - t386;
t53 = -pkin(5) * t276 + t384 + t528;
t399 = pkin(4) * t501 + pkin(5) * t474 + t369 * t53 + t555;
t54 = (-t507 - t276) * pkin(5) + t384;
t397 = t374 * t54 + t529 * t507 + t538;
t395 = (-t304 * t369 - t306 * t374) * t318;
t96 = t375 * t501 + t554;
t394 = pkin(3) * t96 + t399;
t393 = t397 + t549;
t392 = (-qJD(4) + t359) * t324 - t427;
t391 = (-qJD(3) + t366) * t342 - t425;
t29 = t369 * t58 + t374 * t57;
t70 = (pkin(5) * t318 - 0.2e1 * qJD(6)) * t306 + t386;
t389 = pkin(10) * t29 + (-pkin(5) * t374 + t529) * t70;
t20 = t29 * t370 - t375 * t70;
t387 = pkin(3) * t20 + t389;
t383 = pkin(5) * t509 + qJ(6) * t499 - t58;
t307 = -t321 - t490;
t249 = t307 * t375 - t464;
t380 = pkin(3) * t249 - t137;
t378 = qJD(2) ^ 2;
t367 = t372 ^ 2;
t362 = t367 * t379;
t350 = t361 - 0.2e1 * t431;
t347 = t360 + 0.2e1 * t430;
t343 = pkin(7) * t379 + t401;
t336 = -t340 + t365;
t335 = t339 - t365;
t332 = -t340 - t365;
t329 = t340 - t339;
t325 = -t365 - t339;
t313 = -t321 + t490;
t312 = t320 - t490;
t310 = -t339 - t340;
t296 = -t332 * t371 - t455;
t295 = t332 * t376 - t456;
t293 = t309 + t337;
t292 = t341 * t443 + t404;
t289 = t342 * t443 + t425;
t287 = t321 - t320;
t286 = t325 * t376 - t521;
t285 = t325 * t371 + t514;
t269 = (-t322 * t375 + t324 * t370) * t359;
t268 = (-t322 * t370 - t324 * t375) * t359;
t258 = -t320 - t321;
t254 = t312 * t375 - t464;
t253 = -t313 * t370 + t516;
t252 = t312 * t370 + t463;
t251 = t313 * t375 + t523;
t250 = -t307 * t370 - t463;
t245 = t294 * t371 + t376 * t391;
t244 = -t294 * t376 + t371 * t391;
t231 = t279 * t375 - t523;
t224 = -t322 * t442 + t405;
t223 = t243 + t314;
t219 = t324 * t442 + t427;
t218 = t243 * t375 - t324 * t453;
t217 = t243 * t370 + t324 * t452;
t216 = -t242 * t370 + t322 * t452;
t215 = t242 * t375 + t322 * t453;
t201 = -t249 * t371 + t250 * t376;
t200 = t249 * t376 + t250 * t371;
t199 = -pkin(9) * t249 - t467;
t184 = t306 * t457 + t369 * t385;
t177 = -pkin(9) * t230 - t468;
t164 = -t230 * t371 + t231 * t376;
t163 = t230 * t376 + t231 * t371;
t162 = t223 * t370 + t375 * t392;
t161 = -t219 * t375 - t222 * t370;
t160 = -t223 * t375 + t370 * t392;
t159 = -t219 * t370 + t222 * t375;
t158 = pkin(3) * t160;
t134 = -pkin(3) * t224 + pkin(9) * t250 - t468;
t133 = -pkin(3) * t219 + pkin(9) * t231 + t467;
t119 = t193 * t369 - t476;
t117 = -t191 * t369 - t476;
t104 = -t198 * t370 - t553;
t98 = -t370 * t501 + t553;
t89 = t123 * t375 - t525;
t88 = t121 * t375 - t525;
t83 = -t160 * t371 + t162 * t376;
t82 = t160 * t376 + t162 * t371;
t79 = pkin(3) * t80;
t78 = t125 + t556;
t77 = t124 - t537;
t76 = pkin(3) * t235 + pkin(9) * t81;
t71 = -pkin(4) * t117 - t408;
t68 = -pkin(9) * t160 - t80;
t67 = -pkin(3) * t258 + pkin(9) * t162 + t81;
t65 = -t102 * t371 + t104 * t376;
t63 = t102 * t376 + t104 * t371;
t61 = -t371 * t96 + t376 * t98;
t59 = t371 * t98 + t376 * t96;
t56 = t75 + t558;
t55 = t74 - t539;
t50 = -t371 * t87 + t376 * t89;
t49 = -t371 * t86 + t376 * t88;
t48 = t371 * t89 + t376 * t87;
t47 = t371 * t88 + t376 * t86;
t42 = t376 * t81 - t487;
t41 = t371 * t81 + t486;
t40 = -t369 * t54 - t483 * t507 - t537;
t39 = -t383 - t539;
t35 = -pkin(5) * t475 + t374 * t53 - t556;
t34 = -0.2e1 * t444 - t498 - t558;
t33 = t128 * t370 + t375 * t38;
t30 = -pkin(10) * t119 - t37;
t28 = t369 * t57 - t374 * t58;
t26 = -pkin(9) * t102 - t370 * t56 + t375 * t78;
t25 = -t370 * t55 + t375 * t77 - t548;
t24 = pkin(9) * t104 + t370 * t78 + t375 * t56 + t559;
t23 = t370 * t77 + t375 * t55 + t547;
t22 = -pkin(10) * t117 - t369 * t44 + t374 * t46;
t21 = t29 * t375 + t370 * t70;
t18 = -pkin(9) * t87 + t119 * t488 + t30 * t375;
t17 = pkin(9) * t89 + t119 * t433 + t30 * t370;
t16 = -t370 * t39 + t375 * t40 - t548;
t15 = -pkin(9) * t96 - t34 * t370 + t35 * t375;
t14 = -pkin(10) * t28 + (pkin(5) * t369 - t483) * t70;
t13 = t370 * t40 + t375 * t39 + t547;
t12 = pkin(9) * t98 + t34 * t375 + t35 * t370 - t559;
t11 = -t32 * t371 + t33 * t376;
t10 = t32 * t376 + t33 * t371;
t9 = -pkin(9) * t86 + t22 * t375 - t370 * t71;
t8 = -pkin(4) * t28 - t414;
t7 = -pkin(3) * t117 + pkin(9) * t88 + t22 * t370 + t375 * t71;
t6 = -pkin(9) * t32 + (-pkin(10) * t375 + t488) * t37;
t5 = -t20 * t371 + t21 * t376;
t4 = t20 * t376 + t21 * t371;
t3 = pkin(9) * t33 + (-pkin(10) * t370 + t433) * t37;
t2 = -pkin(9) * t20 + t14 * t375 - t370 * t8;
t1 = -pkin(3) * t28 + pkin(9) * t21 + t14 * t370 + t375 * t8;
t19 = [0, 0, 0, 0, 0, qJDD(1), t429, t403, 0, 0, (t348 + t430) * t372, t347 * t377 + t350 * t372, t449 + t377 * (-t362 + t378), (t349 - t431) * t377, t372 * (t363 - t378) + t447, 0, t377 * t343 + pkin(1) * t350 + pkin(7) * (t377 * (-t363 - t378) - t449), -t372 * t343 - pkin(1) * t347 + pkin(7) * (-t447 - t372 * (-t362 - t378)), pkin(1) * (t362 + t363) + (t367 + t368) * t482 + t426, pkin(1) * t343 + pkin(7) * t426, t372 * (t309 * t376 - t342 * t451) + t377 * (t309 * t371 + t342 * t450), t372 * (-t289 * t376 - t293 * t371) + t377 * (-t289 * t371 + t293 * t376), t372 * (-t336 * t371 + t514) + t377 * (t336 * t376 + t521), t372 * (-t308 * t371 - t341 * t450) + t377 * (t308 * t376 - t341 * t451), t372 * (t335 * t376 - t456) + t377 * (t335 * t371 + t455), (t372 * (t341 * t376 + t342 * t371) + t377 * (t341 * t371 - t342 * t376)) * t366, t372 * (-pkin(8) * t285 - t460) + t377 * (-pkin(2) * t289 + pkin(8) * t286 + t459) - pkin(1) * t289 + pkin(7) * (-t285 * t372 + t286 * t377), t372 * (-pkin(8) * t295 - t459) + t377 * (-pkin(2) * t292 + pkin(8) * t296 - t460) - pkin(1) * t292 + pkin(7) * (-t295 * t372 + t296 * t377), t372 * (-pkin(8) * t244 - t207) + t377 * (-pkin(2) * t310 + pkin(8) * t245 + t208) - pkin(1) * t310 + pkin(7) * (-t244 * t372 + t245 * t377), -pkin(8) * t469 + t377 * (pkin(2) * t311 + pkin(8) * t208) + pkin(1) * t311 + pkin(7) * (t208 * t377 - t469), t372 * (-t217 * t371 + t218 * t376) + t377 * (t217 * t376 + t218 * t371), t372 * (-t159 * t371 + t161 * t376) + t377 * (t159 * t376 + t161 * t371), t372 * (-t251 * t371 + t253 * t376) + t377 * (t251 * t376 + t253 * t371), t372 * (-t215 * t371 + t216 * t376) + t377 * (t215 * t376 + t216 * t371), t372 * (-t252 * t371 + t254 * t376) + t377 * (t252 * t376 + t254 * t371), t372 * (-t268 * t371 + t269 * t376) + t377 * (t268 * t376 + t269 * t371), t372 * (-pkin(8) * t163 - t133 * t371 + t177 * t376) + t377 * (-pkin(2) * t219 + pkin(8) * t164 + t133 * t376 + t177 * t371) - pkin(1) * t219 + pkin(7) * (-t163 * t372 + t164 * t377), t372 * (-pkin(8) * t200 - t134 * t371 + t199 * t376) + t377 * (-pkin(2) * t224 + pkin(8) * t201 + t134 * t376 + t199 * t371) - pkin(1) * t224 + pkin(7) * (-t200 * t372 + t201 * t377), t372 * (-pkin(8) * t82 - t371 * t67 + t376 * t68) + t377 * (-pkin(2) * t258 + pkin(8) * t83 + t371 * t68 + t376 * t67) - pkin(1) * t258 + pkin(7) * (-t372 * t82 + t377 * t83), t372 * (-pkin(8) * t41 - pkin(9) * t486 - t371 * t76) + t377 * (pkin(2) * t235 + pkin(8) * t42 - pkin(9) * t487 + t376 * t76) + pkin(1) * t235 + pkin(7) * (-t372 * t41 + t377 * t42), t493, -t565, t550, t510, t568, t511, t372 * (-t23 * t371 + t25 * t376 - t557) + t377 * (t23 * t376 + t25 * t371 + t552) + t551, t372 * (-pkin(8) * t63 - t24 * t371 + t26 * t376) + t377 * (pkin(8) * t65 + t24 * t376 + t26 * t371 + t561) + t562 + pkin(7) * (-t372 * t63 + t377 * t65), t372 * (-pkin(8) * t48 - t17 * t371 + t18 * t376) + t377 * (-pkin(2) * t119 + pkin(8) * t50 + t17 * t376 + t18 * t371) - pkin(1) * t119 + pkin(7) * (-t372 * t48 + t377 * t50), t372 * (-pkin(8) * t10 - t3 * t371 + t376 * t6) + t377 * (-pkin(2) * t37 + pkin(8) * t11 + t3 * t376 + t371 * t6) - pkin(1) * t37 + pkin(7) * (-t10 * t372 + t11 * t377), t493, t550, t565, t511, -t568, t510, t372 * (-t13 * t371 + t16 * t376 - t557) + t377 * (t13 * t376 + t16 * t371 + t552) + t551, t372 * (-pkin(8) * t47 - t371 * t7 + t376 * t9) + t377 * (-pkin(2) * t117 + pkin(8) * t49 + t371 * t9 + t376 * t7) - pkin(1) * t117 + pkin(7) * (-t372 * t47 + t377 * t49), t372 * (-pkin(8) * t59 - t12 * t371 + t15 * t376) + t377 * (pkin(8) * t61 + t12 * t376 + t15 * t371 - t561) - t562 + pkin(7) * (-t372 * t59 + t377 * t61), t372 * (-pkin(8) * t4 - t1 * t371 + t2 * t376) + t377 * (-pkin(2) * t28 + pkin(8) * t5 + t1 * t376 + t2 * t371) - pkin(1) * t28 + pkin(7) * (-t372 * t4 + t377 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t362 - t363, t360, t356, t361, qJDD(2), -t333, -t334, 0, 0, -t330, t329, t294, t330, t391, t440, pkin(2) * t285 + t406, pkin(2) * t295 - t260, pkin(2) * t244, pkin(2) * t207, t288, t287, t223, -t288, t392, t422, pkin(2) * t163 + t409, pkin(2) * t200 + t380, pkin(2) * t82 + t158, pkin(2) * t41 + t79, t184, t118, t534, t411, t168, t395, t421 + t560, pkin(2) * t63 + t420, pkin(2) * t48 + t416, pkin(2) * t10 + t439, t184, t534, -t118, t395, -t168, t411, t393 + t560, pkin(2) * t47 + t417, pkin(2) * t59 + t394, pkin(2) * t4 + t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, t329, t294, t330, t391, t440, t406, -t260, 0, 0, t288, t287, t223, -t288, t392, t422, t409, t380, t158, t79, t184, t118, t534, t411, t168, t395, t421, t420, t416, t439, t184, t534, -t118, t395, -t168, t411, t393, t417, t394, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t288, t287, t223, -t288, t392, t422, -t136, -t137, 0, 0, t184, t118, t534, t411, t168, t395, t434, t435, t423, t485, t184, t534, -t118, t395, -t168, t411, t397, t424, t399, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t461, t504, t500, -t461, -t191, t241, -t74, -t75, 0, 0, t461, t500, -t504, t241, t191, -t461, t383, t408, t315 + t498, t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t509, t500, t505, t58;];
tauJ_reg  = t19;
