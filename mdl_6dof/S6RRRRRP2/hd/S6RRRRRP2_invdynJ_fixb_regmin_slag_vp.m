% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRP2_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP2_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP2_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:03:16
% EndTime: 2019-03-10 01:03:36
% DurationCPUTime: 9.12s
% Computational Cost: add. (16768->588), mult. (39066->731), div. (0->0), fcn. (29442->14), ass. (0->317)
t255 = cos(qJ(5));
t365 = qJD(5) * t255;
t256 = cos(qJ(3));
t252 = sin(qJ(3));
t253 = sin(qJ(2));
t371 = qJD(1) * t253;
t344 = t252 * t371;
t257 = cos(qJ(2));
t370 = qJD(1) * t257;
t164 = t256 * t370 - t344;
t165 = -t252 * t370 - t256 * t371;
t251 = sin(qJ(4));
t434 = cos(qJ(4));
t442 = t434 * t164 + t251 * t165;
t455 = t442 * t255;
t460 = t365 - t455;
t250 = sin(qJ(5));
t298 = -t251 * t164 + t165 * t434;
t245 = qJD(2) + qJD(3);
t338 = qJD(4) + t245;
t116 = -t250 * t298 - t255 * t338;
t118 = t250 * t338 - t255 * t298;
t450 = -qJD(5) + t442;
t459 = t450 * t250;
t244 = qJDD(2) + qJDD(3);
t327 = qJDD(4) + t244;
t366 = qJD(5) * t250;
t175 = t252 * t253 - t256 * t257;
t292 = t175 * qJDD(1);
t359 = t257 * qJDD(1);
t362 = qJD(1) * qJD(2);
t340 = t257 * t362;
t360 = t253 * qJDD(1);
t295 = -t340 - t360;
t361 = qJD(1) * qJD(3);
t451 = -t257 * t361 + t295;
t115 = -t245 * t344 + t252 * t359 - t256 * t451;
t176 = t252 * t257 + t253 * t256;
t142 = t245 * t176;
t270 = qJD(1) * t142;
t452 = t434 * t115 - t251 * t270;
t262 = -t251 * t292 + t452;
t261 = qJD(4) * t442 + t262;
t453 = qJD(5) * t338 + t261;
t47 = -t250 * t327 - t255 * t453 - t298 * t366;
t48 = t250 * t453 - t255 * t327 - t298 * t365;
t8 = -t116 * t460 + t118 * t459 - t250 * t48 - t47 * t255;
t263 = -t292 - t270;
t335 = t251 * t115 - t434 * t263;
t64 = -qJD(4) * t298 + t335;
t63 = qJDD(5) + t64;
t60 = t255 * t63;
t18 = -t116 * t298 - t450 * t459 + t60;
t243 = t257 * pkin(2);
t423 = pkin(1) + t243;
t149 = pkin(3) * t175 - t423;
t202 = qJD(1) * t423;
t458 = qJDD(1) * t423;
t43 = t47 * t250;
t20 = t118 * t460 - t43;
t59 = t250 * t63;
t19 = t118 * t298 - t450 * t460 + t59;
t431 = pkin(5) * t298;
t160 = t165 * pkin(9);
t437 = pkin(7) + pkin(8);
t204 = t437 * t257;
t187 = qJD(1) * t204;
t166 = t252 * t187;
t203 = t437 * t253;
t185 = qJD(1) * t203;
t416 = qJD(2) * pkin(2);
t172 = -t185 + t416;
t334 = t256 * t172 - t166;
t113 = t160 + t334;
t104 = pkin(3) * t245 + t113;
t170 = t256 * t187;
t308 = -t172 * t252 - t170;
t430 = pkin(9) * t164;
t114 = -t308 + t430;
t109 = t251 * t114;
t71 = t104 * t434 - t109;
t68 = -pkin(4) * t338 - t71;
t41 = t116 * pkin(5) - t118 * qJ(6) + t68;
t414 = t442 * t41;
t413 = t442 * t68;
t125 = t298 * qJ(6);
t392 = t298 * t442;
t249 = qJ(2) + qJ(3);
t240 = sin(t249);
t254 = sin(qJ(1));
t258 = cos(qJ(1));
t321 = g(1) * t258 + g(2) * t254;
t456 = t321 * t240;
t396 = t450 * t298;
t242 = qJ(4) + t249;
t231 = sin(t242);
t387 = t231 * t258;
t388 = t231 * t254;
t454 = g(1) * t387 + g(2) * t388;
t316 = t255 * pkin(5) + t250 * qJ(6);
t58 = t298 ^ 2 - t442 ^ 2;
t110 = t434 * t114;
t72 = t251 * t104 + t110;
t69 = pkin(10) * t338 + t72;
t146 = -pkin(3) * t164 - t202;
t80 = -pkin(4) * t442 + pkin(10) * t298 + t146;
t38 = -t250 * t69 + t255 * t80;
t377 = qJD(6) - t38;
t27 = pkin(5) * t450 + t377;
t375 = t454 * t255;
t40 = t41 * t366;
t448 = -t298 * t27 + t375 + t40;
t39 = t250 * t80 + t255 * t69;
t28 = -qJ(6) * t450 + t39;
t232 = cos(t242);
t426 = g(3) * t250;
t353 = -t232 * t426 + t250 * t454;
t342 = qJD(4) * t434;
t367 = qJD(4) * t251;
t143 = qJDD(2) * pkin(2) + t295 * t437;
t341 = t253 * t362;
t294 = -t341 + t359;
t145 = t437 * t294;
t280 = qJD(3) * t308 + t256 * t143 - t252 * t145;
t56 = pkin(3) * t244 - pkin(9) * t115 + t280;
t369 = qJD(3) * t252;
t162 = t187 * t369;
t328 = -qJD(3) * t172 - t145;
t62 = -t162 + (pkin(9) * t451 + t143) * t252 + ((-t253 * t361 + t294) * pkin(9) - t328) * t256;
t329 = t104 * t367 + t114 * t342 + t251 * t62 - t434 * t56;
t14 = -pkin(4) * t327 + t329;
t5 = t48 * pkin(5) + t47 * qJ(6) - t118 * qJD(6) + t14;
t424 = t5 * t250;
t447 = t298 * t28 + t353 - t424;
t291 = t14 * t250 - t39 * t298 + t68 * t365 - t353;
t65 = t68 * t366;
t446 = t38 * t298 + t375 + t65;
t277 = t104 * t342 - t114 * t367 + t251 * t56 + t434 * t62;
t222 = g(3) * t231;
t385 = t232 * t258;
t386 = t232 * t254;
t352 = g(1) * t385 + g(2) * t386 + t222;
t269 = -t146 * t442 - t277 + t352;
t427 = g(3) * t232;
t281 = t146 * t298 - t329 - t427 + t454;
t51 = -t245 * t442 + t262;
t52 = -t245 * t298 - t335;
t98 = -pkin(4) * t298 - pkin(10) * t442;
t13 = pkin(10) * t327 + t277;
t223 = pkin(2) * t341;
t400 = qJDD(1) * pkin(1);
t17 = -pkin(2) * t359 - pkin(3) * t263 + t64 * pkin(4) - pkin(10) * t261 + t223 - t400;
t302 = t255 * t13 + t250 * t17 + t80 * t365 - t366 * t69;
t417 = qJ(6) * t63;
t2 = -qJD(6) * t450 + t302 + t417;
t337 = t250 * t13 - t255 * t17 + t69 * t365 + t80 * t366;
t436 = pkin(5) * t63;
t4 = qJDD(6) + t337 - t436;
t444 = t2 * t255 + t4 * t250;
t235 = pkin(2) * t256 + pkin(3);
t381 = t251 * t252;
t135 = t235 * t342 + (-t252 * t367 + (t256 * t434 - t381) * qJD(3)) * pkin(2);
t333 = t185 * t252 - t170;
t121 = t333 - t430;
t376 = -t256 * t185 - t166;
t122 = t160 + t376;
t83 = t251 * t121 + t122 * t434;
t443 = -t135 + t83;
t345 = t434 * t252;
t404 = t121 * t434 - t251 * t122 + t235 * t367 + (t252 * t342 + (t251 * t256 + t345) * qJD(3)) * pkin(2);
t76 = t251 * t113 + t110;
t324 = pkin(3) * t367 - t76;
t159 = pkin(5) * t366 - qJ(6) * t365 - t250 * qJD(6);
t394 = t442 * t250;
t441 = -pkin(5) * t394 + qJ(6) * t455 + t159;
t374 = -t252 * t203 + t256 * t204;
t440 = t232 * pkin(4) + t231 * pkin(10);
t439 = t165 * t367 + t164 * t342 + t251 * (-t252 * t360 + t256 * t359) + t452;
t438 = t118 ^ 2;
t435 = pkin(10) * t63;
t433 = pkin(3) * t165;
t422 = t250 * t98 + t255 * t71;
t77 = t113 * t434 - t109;
t88 = -t433 + t98;
t421 = t250 * t88 + t255 * t77;
t237 = pkin(2) * t371;
t84 = t237 + t88;
t420 = t250 * t84 + t255 * t83;
t140 = -t251 * t175 + t176 * t434;
t297 = -t175 * t434 - t251 * t176;
t94 = -pkin(4) * t297 - pkin(10) * t140 + t149;
t332 = -t256 * t203 - t204 * t252;
t126 = -pkin(9) * t176 + t332;
t127 = -pkin(9) * t175 + t374;
t96 = t251 * t126 + t127 * t434;
t419 = t250 * t94 + t255 * t96;
t418 = pkin(10) * qJD(5);
t415 = t450 * t39;
t373 = pkin(2) * t345 + t251 * t235;
t158 = pkin(10) + t373;
t412 = t158 * t63;
t233 = pkin(3) * t251 + pkin(10);
t411 = t233 * t63;
t141 = t245 * t175;
t85 = qJD(4) * t297 - t141 * t434 - t251 * t142;
t410 = t250 * t85;
t409 = t255 * t48;
t408 = t255 * t85;
t406 = t441 + t404;
t403 = t441 + t324;
t315 = pkin(5) * t250 - qJ(6) * t255;
t402 = -t315 * t442 + t159 - t72;
t401 = qJD(5) * t41;
t399 = t116 * t250;
t398 = t118 * t116;
t397 = t118 * t255;
t391 = t135 * t255;
t390 = t140 * t255;
t389 = t165 * t164;
t383 = t250 * t254;
t380 = t254 * t255;
t379 = t255 * t258;
t378 = t258 * t250;
t247 = t253 ^ 2;
t372 = -t257 ^ 2 + t247;
t368 = qJD(3) * t256;
t357 = t434 * pkin(3);
t239 = t253 * t416;
t350 = -t5 - t427;
t349 = qJD(2) * t437;
t348 = t250 * t434;
t347 = t255 * t434;
t343 = -t14 - t427;
t134 = pkin(3) * t142 + t239;
t33 = t250 * t83 - t255 * t84 + t431;
t336 = t250 * t135 - t33;
t326 = pkin(3) * t342;
t325 = t232 * t316 + t440;
t152 = t232 * t383 + t379;
t154 = t232 * t378 - t380;
t323 = -g(1) * t152 + g(2) * t154;
t153 = t232 * t380 - t378;
t155 = t232 * t379 + t383;
t322 = g(1) * t153 - g(2) * t155;
t320 = g(1) * t254 - g(2) * t258;
t318 = -pkin(2) * t381 + t235 * t434;
t314 = -t412 - t413;
t313 = -t411 - t413;
t312 = -t250 * t28 + t255 * t27;
t311 = t250 * t27 + t255 * t28;
t241 = cos(t249);
t227 = pkin(3) * t241;
t310 = t227 + t325;
t306 = pkin(4) + t316;
t305 = t227 + t423 + t440;
t304 = -0.2e1 * pkin(1) * t362 - pkin(7) * qJDD(2);
t303 = -t140 * t366 + t408;
t300 = t126 * t434 - t251 * t127;
t186 = t253 * t349;
t188 = t257 * t349;
t293 = -t256 * t186 - t252 * t188 - t203 * t368 - t204 * t369;
t91 = -pkin(9) * t142 + t293;
t279 = -qJD(3) * t374 + t186 * t252 - t256 * t188;
t92 = pkin(9) * t141 + t279;
t25 = qJD(4) * t300 + t251 * t92 + t434 * t91;
t86 = qJD(4) * t140 - t251 * t141 + t142 * t434;
t35 = pkin(4) * t86 - pkin(10) * t85 + t134;
t301 = t255 * t25 + t250 * t35 + t94 * t365 - t366 * t96;
t296 = -t158 * t366 + t391;
t289 = t41 * t455 + t447;
t288 = t27 * t365 - t28 * t366 - t352 + t444;
t287 = g(1) * t154 + g(2) * t152 + t231 * t426 - t337;
t286 = -t233 * t366 + t255 * t326;
t259 = qJD(2) ^ 2;
t285 = -pkin(7) * t259 + t320 + 0.2e1 * t400;
t260 = qJD(1) ^ 2;
t284 = pkin(1) * t260 - pkin(7) * qJDD(1) + t321;
t283 = t350 * t255 + t448;
t282 = t343 * t255 + t446;
t278 = qJD(5) * t312 + t444;
t276 = -t43 - t409 + (t397 + t399) * qJD(5);
t275 = t118 * t41 + qJDD(6) - t287;
t274 = -t27 * t455 + t28 * t394 + t288;
t273 = -g(1) * t155 - g(2) * t153 - t222 * t255 + t302;
t26 = qJD(4) * t96 + t251 * t91 - t434 * t92;
t271 = g(3) * t240 - t252 * t143 + t202 * t164 + t241 * t321 + t328 * t256 + t162;
t267 = -g(3) * t241 - t202 * t165 + t280 + t456;
t266 = t321 * t306 * t231;
t192 = pkin(10) * t386;
t194 = pkin(10) * t385;
t264 = -g(1) * t194 - g(2) * t192 + t266;
t246 = -pkin(9) - t437;
t234 = -t357 - pkin(4);
t189 = -pkin(2) * t253 - pkin(3) * t240;
t173 = -t357 - t306;
t161 = t223 - t458;
t157 = -pkin(4) - t318;
t147 = t237 - t433;
t144 = -t306 - t318;
t120 = -t164 ^ 2 + t165 ^ 2;
t101 = pkin(3) * t270 + qJDD(1) * t149 + t223;
t100 = -t165 * t245 + t263;
t99 = -t164 * t245 + t115;
t81 = pkin(5) * t118 + qJ(6) * t116;
t54 = t140 * t315 - t300;
t46 = pkin(5) * t297 + t250 * t96 - t255 * t94;
t45 = -qJ(6) * t297 + t419;
t37 = t250 * t71 - t255 * t98 + t431;
t36 = t422 - t125;
t32 = -t125 + t420;
t31 = t250 * t77 - t255 * t88 + t431;
t30 = -t125 + t421;
t22 = -t116 * t450 - t47;
t9 = t315 * t85 + (qJD(5) * t316 - qJD(6) * t255) * t140 + t26;
t7 = -pkin(5) * t86 + qJD(5) * t419 + t25 * t250 - t255 * t35;
t6 = qJ(6) * t86 - qJD(6) * t297 + t301;
t1 = [qJDD(1), t320, t321, qJDD(1) * t247 + 0.2e1 * t253 * t340, 0.2e1 * t253 * t359 - 0.2e1 * t362 * t372, qJDD(2) * t253 + t257 * t259, qJDD(2) * t257 - t253 * t259, 0, t253 * t304 + t257 * t285, -t253 * t285 + t257 * t304, t115 * t176 + t141 * t165, -t115 * t175 - t141 * t164 + t165 * t142 + t176 * t263, -t141 * t245 + t176 * t244, -t142 * t245 - t175 * t244, 0, -t164 * t239 + t320 * t241 + t332 * t244 + t279 * t245 + (t161 - t458) * t175 - 0.2e1 * t202 * t142, -t115 * t423 + t202 * t141 + t161 * t176 - t165 * t239 - t240 * t320 - t244 * t374 - t245 * t293, t140 * t439 - t298 * t85, -t140 * t64 + t297 * t439 + t298 * t86 + t442 * t85, t140 * t327 + t338 * t85, t297 * t327 - t338 * t86, 0, -t101 * t297 - t134 * t442 + t146 * t86 + t149 * t64 + t232 * t320 - t26 * t338 + t300 * t327, -g(1) * t388 + g(2) * t387 + t101 * t140 - t134 * t298 + t146 * t85 + t149 * t261 - t25 * t338 - t327 * t96, t118 * t303 - t390 * t47 (-t116 * t255 - t118 * t250) * t85 + (t43 - t409 + (-t397 + t399) * qJD(5)) * t140, t118 * t86 + t297 * t47 - t303 * t450 + t390 * t63, -t140 * t59 - t116 * t86 + t297 * t48 - (-t140 * t365 - t410) * t450, -t297 * t63 - t450 * t86, t337 * t297 + t38 * t86 + t26 * t116 - t300 * t48 + (-(-qJD(5) * t96 + t35) * t450 + t94 * t63 + t68 * qJD(5) * t140) * t255 + (-(-qJD(5) * t94 - t25) * t450 - t96 * t63 + t14 * t140 + t68 * t85) * t250 + t322, t301 * t450 - t419 * t63 + t302 * t297 - t39 * t86 + t26 * t118 + t300 * t47 + t68 * t408 + (t14 * t255 - t65) * t140 + t323, t41 * t410 + t116 * t9 + t450 * t7 + t297 * t4 - t27 * t86 - t46 * t63 + t48 * t54 + (t365 * t41 + t424) * t140 + t322, -t116 * t6 + t118 * t7 - t45 * t48 - t46 * t47 + t312 * t85 + t320 * t231 + (-qJD(5) * t311 - t2 * t250 + t255 * t4) * t140, -t41 * t408 - t118 * t9 - t450 * t6 - t297 * t2 + t28 * t86 + t45 * t63 + t47 * t54 + (-t5 * t255 + t40) * t140 - t323, t2 * t45 + t28 * t6 + t5 * t54 + t41 * t9 + t4 * t46 + t27 * t7 - g(1) * (-pkin(5) * t153 - qJ(6) * t152) - g(2) * (pkin(5) * t155 + qJ(6) * t154) + (g(1) * t246 - g(2) * t305) * t258 + (g(1) * t305 + g(2) * t246) * t254; 0, 0, 0, -t253 * t260 * t257, t372 * t260, t360, t359, qJDD(2), -g(3) * t257 + t253 * t284, g(3) * t253 + t257 * t284, t389, t120, t99, t100, t244, -t333 * t245 + (t164 * t371 + t244 * t256 - t245 * t369) * pkin(2) + t267, t376 * t245 + (t165 * t371 - t244 * t252 - t245 * t368) * pkin(2) + t271, t392, t58, t51, t52, t327, t147 * t442 + t318 * t327 - t338 * t404 + t281, t147 * t298 - t327 * t373 + t338 * t443 + t269, t20, t8, t19, t18, -t396, t157 * t48 + t314 * t250 + t404 * t116 - ((-qJD(5) * t158 - t84) * t255 + t443 * t250) * t450 + t282, -t157 * t47 + t314 * t255 + t404 * t118 - (-t296 + t420) * t450 + t291, t144 * t48 + (-t412 - t414) * t250 + t406 * t116 - (-t158 * t365 - t336) * t450 + t283, t336 * t118 + (t32 - t391) * t116 + t276 * t158 + t274, t144 * t47 + (-t401 + t412) * t255 - t406 * t118 - (t296 - t32) * t450 + t289, t5 * t144 - t28 * t32 - t27 * t33 - g(1) * (t189 * t258 + t194) - g(2) * (t189 * t254 + t192) - g(3) * (t243 + t310) + t406 * t41 + t311 * t135 + t266 + t278 * t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t389, t120, t99, t100, t244, -t245 * t308 + t267, t245 * t334 + t271, t392, t58, t51, t52, t327, t76 * t338 + (-t165 * t442 + t327 * t434 - t338 * t367) * pkin(3) + t281, t77 * t338 + (-t165 * t298 - t251 * t327 - t338 * t342) * pkin(3) + t269, t20, t8, t19, t18, -t396, t234 * t48 + t313 * t250 + t324 * t116 - ((-qJD(5) * t233 - t88) * t255 + (-t326 + t77) * t250) * t450 + t282, -t234 * t47 + t313 * t255 + t324 * t118 - (-t286 + t421) * t450 + t291, t173 * t48 + (-t411 - t414) * t250 + t403 * t116 - (-t233 * t365 - t250 * t326 + t31) * t450 + t283, t30 * t116 - t31 * t118 + (-t116 * t347 + t118 * t348) * qJD(4) * pkin(3) + t276 * t233 + t274, t173 * t47 + (-t401 + t411) * t255 - t403 * t118 - (-t30 + t286) * t450 + t289, t5 * t173 - t28 * t30 - t27 * t31 - g(3) * t310 + t403 * t41 + (t456 + (t27 * t348 + t28 * t347) * qJD(4)) * pkin(3) + t278 * t233 + t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t392, t58, t51, t52, t327, t338 * t72 + t281, t338 * t71 + t269, t20, t8, t19, t18, -t396, -pkin(4) * t48 - t72 * t116 + (-t450 * t71 - t413 - t435) * t250 + (-(-t98 - t418) * t450 + t343) * t255 + t446, pkin(4) * t47 - t422 * t450 - t72 * t118 - t68 * t455 + (-t366 * t450 - t60) * pkin(10) + t291, -t450 * t37 - t306 * t48 + (-t435 - t414) * t250 + t402 * t116 + (t418 * t450 + t350) * t255 + t448, pkin(10) * t276 + t116 * t36 - t118 * t37 - t312 * t442 + t288, -t306 * t47 - (-pkin(10) * t366 - t36) * t450 - t402 * t118 + (t41 * t450 + t435) * t255 + t447, pkin(10) * t278 - g(3) * t325 - t27 * t37 - t28 * t36 - t306 * t5 + t402 * t41 + t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398, -t116 ^ 2 + t438, t22, -t118 * t450 - t48, t63, -t118 * t68 + t287 - t415, t116 * t68 - t38 * t450 - t273, -t116 * t81 - t275 - t415 + 0.2e1 * t436, pkin(5) * t47 - qJ(6) * t48 + (t28 - t39) * t118 + (t27 - t377) * t116, 0.2e1 * t417 - t116 * t41 + t118 * t81 - (0.2e1 * qJD(6) - t38) * t450 + t273, t2 * qJ(6) - t4 * pkin(5) - t41 * t81 - t27 * t39 - g(1) * (-pkin(5) * t154 + qJ(6) * t155) - g(2) * (-pkin(5) * t152 + qJ(6) * t153) + t377 * t28 + t315 * t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398 - t63, t22, -t450 ^ 2 - t438, t28 * t450 + t275 - t436;];
tau_reg  = t1;
