% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP2_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP2_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:03:11
% EndTime: 2019-03-10 01:03:19
% DurationCPUTime: 2.94s
% Computational Cost: add. (7187->273), mult. (15564->441), div. (0->0), fcn. (15302->8), ass. (0->170)
t96 = sin(qJ(5));
t94 = t96 ^ 2;
t100 = cos(qJ(5));
t95 = t100 ^ 2;
t207 = t94 + t95;
t195 = cos(qJ(3));
t136 = t195 * pkin(2) + pkin(3);
t194 = cos(qJ(4));
t116 = t194 * t136;
t146 = t195 * qJD(3);
t139 = pkin(2) * t146;
t202 = qJD(3) + qJD(4);
t97 = sin(qJ(4));
t98 = sin(qJ(3));
t87 = t97 * t98 * pkin(2);
t50 = -qJD(4) * t116 - t194 * t139 + t202 * t87;
t212 = t207 * t50;
t152 = t194 * t98;
t211 = t202 * pkin(2) * (t97 * t195 + t152);
t200 = pkin(7) + pkin(8);
t137 = t200 * t195;
t101 = cos(qJ(2));
t173 = t98 * t101;
t99 = sin(qJ(2));
t210 = (-t99 * t137 - t200 * t173) * qJD(2);
t118 = -t195 * t101 + t98 * t99;
t110 = t194 * t118;
t75 = t195 * t99 + t173;
t54 = t97 * t75 + t110;
t55 = -t97 * t118 + t194 * t75;
t90 = -t101 * pkin(2) - pkin(1);
t62 = t118 * pkin(3) + t90;
t33 = t54 * pkin(4) - t55 * pkin(10) + t62;
t80 = t200 * t99;
t81 = t200 * t101;
t123 = t195 * t80 + t98 * t81;
t44 = -t75 * pkin(9) - t123;
t185 = t98 * t80;
t122 = -t195 * t81 + t185;
t45 = -t118 * pkin(9) - t122;
t35 = t194 * t45 + t97 * t44;
t208 = t100 * t35 + t96 * t33;
t177 = qJD(4) * pkin(3);
t206 = t177 * t194;
t203 = -qJD(2) - qJD(3);
t104 = t203 * t75;
t170 = qJD(4) * t97;
t57 = t203 * t118;
t23 = -qJD(4) * t110 + t97 * t104 - t75 * t170 + t194 * t57;
t93 = qJD(5) * t100;
t120 = t96 * t23 + t55 * t93;
t15 = t54 * qJ(6) + t208;
t126 = t100 * t33 - t96 * t35;
t16 = -t54 * pkin(5) - t126;
t204 = t100 * t15 + t16 * t96;
t178 = t94 - t95;
t142 = t178 * qJD(5);
t24 = t55 * qJD(4) - t194 * t104 + t97 * t57;
t165 = t99 * qJD(2);
t92 = pkin(2) * t165;
t49 = -t104 * pkin(3) + t92;
t14 = t24 * pkin(4) - t23 * pkin(10) + t49;
t171 = qJD(3) * t98;
t102 = t104 * pkin(9) - t80 * t146 - t81 * t171 + t210;
t40 = t122 * qJD(3) + (-t101 * t137 + t185) * qJD(2);
t103 = -t57 * pkin(9) + t40;
t147 = qJD(4) * t194;
t9 = -t194 * t102 - t97 * t103 - t44 * t147 + t45 * t170;
t5 = -qJD(5) * t208 + t100 * t14 + t96 * t9;
t201 = 2 * qJD(6);
t199 = pkin(10) * t24;
t198 = pkin(10) * t54;
t197 = t24 * pkin(5);
t10 = t97 * t102 - t194 * t103 + t45 * t147 + t44 * t170;
t34 = -t194 * t44 + t97 * t45;
t196 = t10 * t96 + t34 * t93;
t88 = t97 * pkin(3) + pkin(10);
t192 = t24 * t88;
t67 = pkin(2) * t152 + t97 * t136 + pkin(10);
t191 = t54 * t67;
t190 = t54 * t88;
t189 = t55 * t23;
t188 = t55 * t96;
t186 = t96 * t24;
t158 = pkin(3) * t170;
t51 = t158 + t211;
t166 = t96 * qJD(6);
t168 = qJD(5) * t96;
t70 = pkin(5) * t168 - qJ(6) * t93 - t166;
t41 = t51 + t70;
t59 = t70 + t158;
t183 = -t41 - t59;
t182 = -t41 - t70;
t66 = t87 - t116 - pkin(4);
t181 = t51 * t96 + t66 * t93;
t180 = -t59 - t70;
t138 = pkin(3) * t147;
t68 = t207 * t138;
t156 = t194 * pkin(3);
t89 = -t156 - pkin(4);
t179 = t96 * t158 + t89 * t93;
t175 = t100 * t96;
t174 = t24 * qJ(6);
t172 = qJ(6) * t100;
t131 = pkin(5) * t96 - t172;
t19 = t131 * t55 + t34;
t169 = qJD(5) * t19;
t167 = t54 * qJD(6);
t164 = qJ(6) * qJD(5);
t163 = t100 * qJD(6);
t162 = t101 * qJD(2);
t161 = -0.2e1 * pkin(1) * qJD(2);
t160 = pkin(4) * t168;
t159 = pkin(2) * t171;
t157 = pkin(10) * t168;
t155 = pkin(4) * t93;
t154 = pkin(10) * t93;
t153 = t55 * t168;
t18 = t19 * t168;
t29 = t34 * t168;
t150 = t96 * t93;
t145 = -0.2e1 * t158;
t144 = -0.4e1 * t55 * t175;
t60 = t66 * t168;
t143 = -t51 * t100 + t60;
t141 = -pkin(5) * qJD(5) + qJD(6);
t135 = t23 * t54 + t55 * t24;
t134 = -t24 * t67 + t50 * t54;
t133 = -t55 * t66 + t191;
t132 = -t55 * t89 + t190;
t130 = -t100 * pkin(5) - t96 * qJ(6);
t129 = t100 * t16 - t15 * t96;
t76 = t89 * t168;
t124 = -t100 * t158 + t76;
t79 = -pkin(4) + t130;
t121 = -t100 * t23 + t153;
t119 = -t100 * t24 + t54 * t168;
t4 = t100 * t9 - t96 * t14 + t35 * t168 - t33 * t93;
t117 = t23 * t79 + t55 * t70 - t199;
t114 = t90 * t75;
t6 = t120 * pkin(5) + qJ(6) * t153 - t55 * t163 - t23 * t172 + t10;
t113 = -t6 + (t55 * t79 - t198) * qJD(5);
t58 = t130 + t66;
t112 = -t6 + (t55 * t58 - t191) * qJD(5);
t73 = -t156 + t79;
t111 = -t6 + (t55 * t73 - t190) * qJD(5);
t109 = t23 * t58 + t41 * t55 + t134;
t108 = t23 * t66 + t51 * t55 + t134;
t107 = t207 * t206;
t69 = t130 * qJD(5) + t163;
t2 = t167 - t4 + t174;
t3 = -t197 - t5;
t1 = t129 * qJD(5) + t2 * t100 + t3 * t96;
t106 = -t54 * t138 + t23 * t73 + t55 * t59 - t192;
t105 = t23 * t89 - t192 + (-t194 * t54 + t55 * t97) * t177;
t86 = 0.2e1 * t150;
t74 = -0.2e1 * t142;
t72 = t79 * t168;
t65 = t73 * t168;
t64 = t96 * t138 + t88 * t93;
t63 = -t100 * t138 + t88 * t168;
t56 = t58 * t168;
t53 = t55 ^ 2;
t39 = t123 * qJD(3) - t210;
t38 = -t96 * t50 + t67 * t93;
t37 = t100 * t50 + t67 * t168;
t22 = t54 * t93 + t186;
t17 = -t55 * t142 + t23 * t175;
t11 = qJD(5) * t144 - t178 * t23;
t7 = [0, 0, 0, 0.2e1 * t99 * t162, 0.2e1 * (t101 ^ 2 - t99 ^ 2) * qJD(2), 0, 0, 0, t99 * t161, t101 * t161, 0.2e1 * t75 * t57, 0.2e1 * t75 * t104 - 0.2e1 * t57 * t118, 0, 0, 0, 0.2e1 * qJD(3) * t114 + 0.2e1 * (t99 * pkin(2) * t118 + t114) * qJD(2), 0.2e1 * t90 * t57 + 0.2e1 * t75 * t92, 0.2e1 * t189, -0.2e1 * t135, 0, 0, 0, 0.2e1 * t62 * t24 + 0.2e1 * t49 * t54, 0.2e1 * t62 * t23 + 0.2e1 * t49 * t55, -0.2e1 * t53 * t150 + 0.2e1 * t95 * t189, 0.2e1 * t53 * t142 + t23 * t144, 0.2e1 * t135 * t100 - 0.2e1 * t54 * t153, -0.2e1 * t120 * t54 - 0.2e1 * t55 * t186, 0.2e1 * t54 * t24, 0.2e1 * t10 * t188 + 0.2e1 * t120 * t34 + 0.2e1 * t126 * t24 + 0.2e1 * t5 * t54, 0.2e1 * t4 * t54 - 0.2e1 * t208 * t24 - 0.2e1 * t55 * t29 + 0.2e1 * (t10 * t55 + t34 * t23) * t100, 0.2e1 * t120 * t19 - 0.2e1 * t16 * t24 + 0.2e1 * t6 * t188 - 0.2e1 * t3 * t54, 0.2e1 * t129 * t23 + 0.2e1 * (-qJD(5) * t204 + t100 * t3 - t2 * t96) * t55, 0.2e1 * t55 * t18 + 0.2e1 * t15 * t24 + 0.2e1 * t2 * t54 + 0.2e1 * (-t19 * t23 - t55 * t6) * t100, 0.2e1 * t15 * t2 + 0.2e1 * t16 * t3 + 0.2e1 * t19 * t6; 0, 0, 0, 0, 0, t162, -t165, 0, -pkin(7) * t162, pkin(7) * t165, 0, 0, t57, t104, 0, t40, t39, 0, 0, t23, -t24, 0, -t10, t9, t17, t11, t22, -t119, 0, t29 + (-t133 * qJD(5) - t10) * t100 + t108 * t96, t108 * t100 + t133 * t168 + t196, t112 * t100 + t109 * t96 + t18, t1, t112 * t96 + (-t109 - t169) * t100, t1 * t67 + t19 * t41 - t204 * t50 + t6 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t159, -0.2e1 * t139, 0, 0, 0, 0, 0, -0.2e1 * t51, 0.2e1 * t50, t86, t74, 0, 0, 0, 0.2e1 * t143, 0.2e1 * t181, -0.2e1 * t41 * t100 + 0.2e1 * t56, -0.2e1 * t212, -0.2e1 * t41 * t96 - 0.2e1 * t58 * t93, -0.2e1 * t212 * t67 + 0.2e1 * t58 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t104, 0, t40, t39, 0, 0, t23, -t24, 0, -t10, t9, t17, t11, t22, -t119, 0, t29 + (-t132 * qJD(5) - t10) * t100 + t105 * t96, t105 * t100 + t132 * t168 + t196, t111 * t100 + t106 * t96 + t18, t1, t111 * t96 + (-t106 - t169) * t100, t1 * t88 + t19 * t59 + t204 * t206 + t6 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t139, 0, 0, 0, 0, 0, t145 - t211, -t138 + t50, t86, t74, 0, 0, 0, t60 + t76 + (-t51 - t158) * t100, t179 + t181, t183 * t100 + t56 + t65, t68 - t212, t183 * t96 + (-t58 - t73) * t93, t107 * t67 - t212 * t88 + t41 * t73 + t58 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, -0.2e1 * t138, t86, t74, 0, 0, 0, 0.2e1 * t124, 0.2e1 * t179, -0.2e1 * t59 * t100 + 0.2e1 * t65, 0.2e1 * t68, -0.2e1 * t59 * t96 - 0.2e1 * t73 * t93, 0.2e1 * t107 * t88 + 0.2e1 * t73 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, -t24, 0, -t10, t9, t17, t11, t22, -t119, 0, t29 + (-pkin(4) * t23 - t199) * t96 + (-t10 + (-pkin(4) * t55 - t198) * qJD(5)) * t100, t121 * pkin(4) + t119 * pkin(10) + t196, t113 * t100 + t117 * t96 + t18, t1, t113 * t96 + (-t117 - t169) * t100, pkin(10) * t1 + t19 * t70 + t6 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t50, t86, t74, 0, 0, 0, t143 - t160, -t155 + t181, t182 * t100 + t56 + t72, -t212, t182 * t96 + (-t58 - t79) * t93, -pkin(10) * t212 + t41 * t79 + t58 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, -t138, t86, t74, 0, 0, 0, t124 - t160, -t155 + t179, t180 * t100 + t65 + t72, t68, t180 * t96 + (-t73 - t79) * t93, pkin(10) * t107 + t59 * t79 + t73 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t74, 0, 0, 0, -0.2e1 * t160, -0.2e1 * t155, -0.2e1 * t70 * t100 + 0.2e1 * t72, 0, -0.2e1 * t70 * t96 - 0.2e1 * t79 * t93, 0.2e1 * t79 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t121, -t120, t24, t5, t4, t5 + 0.2e1 * t197, t130 * t23 + (t131 * qJD(5) - t166) * t55, 0.2e1 * t167 - t4 + 0.2e1 * t174, -t3 * pkin(5) + t2 * qJ(6) + t15 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -t168, 0, -t38, t37, -t38, t69, -t37 (pkin(5) * t50 - t164 * t67) * t96 + (-qJ(6) * t50 + t141 * t67) * t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -t168, 0, -t64, t63, -t64, t69, -t63 (-pkin(5) * t138 - t164 * t88) * t96 + (qJ(6) * t138 + t141 * t88) * t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -t168, 0, -t154, t157, -t154, t69, -t157, t69 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, qJ(6) * t201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t121, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
