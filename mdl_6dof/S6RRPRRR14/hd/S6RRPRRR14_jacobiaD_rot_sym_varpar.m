% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRPRRR14
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRPRRR14_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:11
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRPRRR14_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRPRRR14_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRPRRR14_jacobiaD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:58
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:58
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:59
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:59
	% DurationCPUTime: 1.05s
	% Computational Cost: add. (2253->89), mult. (6986->213), div. (424->12), fcn. (8980->13), ass. (0->101)
	t171 = sin(pkin(6));
	t173 = cos(pkin(7));
	t174 = cos(pkin(6));
	t170 = sin(pkin(7));
	t177 = cos(qJ(2));
	t217 = t170 * t177;
	t159 = -t171 * t217 + t174 * t173;
	t156 = 0.1e1 / t159;
	t175 = sin(qJ(2));
	t178 = cos(qJ(1));
	t210 = t178 * t175;
	t176 = sin(qJ(1));
	t211 = t176 * t177;
	t191 = t174 * t210 + t211;
	t216 = t171 * t175;
	t157 = 0.1e1 / t159 ^ 2;
	t209 = t178 * t177;
	t212 = t176 * t175;
	t160 = -t174 * t209 + t212;
	t214 = t171 * t178;
	t195 = -t160 * t170 + t173 * t214;
	t220 = t195 * t157;
	t231 = t170 * (t156 * t191 + t216 * t220);
	t143 = atan2(t195, t159);
	t138 = sin(t143);
	t139 = cos(t143);
	t122 = t138 * t195 + t139 * t159;
	t119 = 0.1e1 / t122;
	t169 = sin(pkin(14));
	t172 = cos(pkin(14));
	t190 = t174 * t212 - t209;
	t192 = t174 * t211 + t210;
	t215 = t171 * t176;
	t193 = t170 * t215 - t173 * t192;
	t135 = t193 * t169 - t172 * t190;
	t129 = 0.1e1 / t135;
	t120 = 0.1e1 / t122 ^ 2;
	t130 = 0.1e1 / t135 ^ 2;
	t154 = -t170 * t192 - t173 * t215;
	t151 = t154 ^ 2;
	t117 = t151 * t120 + 0.1e1;
	t146 = t160 * qJD(1) + t190 * qJD(2);
	t208 = qJD(1) * t171;
	t201 = t178 * t208;
	t136 = t146 * t170 - t173 * t201;
	t224 = t136 * t120;
	t150 = t195 ^ 2;
	t142 = t150 * t157 + 0.1e1;
	t140 = 0.1e1 / t142;
	t148 = t192 * qJD(1) + t191 * qJD(2);
	t202 = t176 * t208;
	t137 = -t148 * t170 - t173 * t202;
	t207 = qJD(2) * t171;
	t218 = t170 * t175;
	t198 = t207 * t218;
	t197 = t157 * t198;
	t185 = t137 * t156 - t195 * t197;
	t113 = t185 * t140;
	t196 = -t138 * t159 + t139 * t195;
	t109 = t196 * t113 + t138 * t137 + t139 * t198;
	t229 = t109 * t119 * t120;
	t230 = (-t151 * t229 + t154 * t224) / t117 ^ 2;
	t158 = t156 * t157;
	t228 = (-t150 * t158 * t198 + t137 * t220) / t142 ^ 2;
	t227 = t120 * t154;
	t147 = t191 * qJD(1) + t192 * qJD(2);
	t188 = t146 * t173 + t170 * t201;
	t127 = -t147 * t172 + t188 * t169;
	t226 = t127 * t129 * t130;
	t134 = -t169 * t190 - t193 * t172;
	t225 = t130 * t134;
	t223 = t138 * t154;
	t222 = t139 * t154;
	t221 = t195 * t156;
	t219 = t169 * t173;
	t213 = t172 * t173;
	t206 = -0.2e1 * t230;
	t205 = -0.2e1 * t229;
	t128 = t134 ^ 2;
	t125 = t128 * t130 + 0.1e1;
	t126 = -t147 * t169 - t188 * t172;
	t204 = 0.2e1 * (t126 * t225 - t128 * t226) / t125 ^ 2;
	t203 = 0.2e1 * t228;
	t200 = -0.2e1 * t156 * t228;
	t199 = 0.2e1 * t134 * t226;
	t194 = t160 * t173 + t170 * t214;
	t187 = -t148 * t173 + t170 * t202;
	t186 = t138 + (t139 * t221 - t138) * t140;
	t168 = t170 ^ 2;
	t149 = t190 * qJD(1) + t160 * qJD(2);
	t145 = -t172 * t192 + t190 * t219;
	t144 = -t169 * t192 - t190 * t213;
	t133 = t194 * t169 - t172 * t191;
	t132 = -t169 * t191 - t194 * t172;
	t123 = 0.1e1 / t125;
	t115 = 0.1e1 / t117;
	t114 = t140 * t231;
	t112 = t186 * t154;
	t110 = (-t138 * t191 + t139 * t216) * t170 - t196 * t114;
	t108 = t203 * t231 + (t149 * t156 * t170 + (-t137 * t157 * t218 + (t157 * t191 * t168 * t175 + (0.2e1 * t158 * t168 * t171 * t175 ^ 2 - t157 * t217) * t195) * qJD(2)) * t171) * t140;
	t1 = [t154 * t200 + (t136 * t156 - t154 * t197) * t140, t108, 0, 0, 0, 0; t195 * t119 * t206 + (t137 * t119 + (-t109 * t195 + t112 * t136) * t120) * t115 + ((t112 * t205 + t186 * t224) * t115 + (t112 * t206 + ((-t113 * t140 * t221 + t203) * t223 + (t195 * t200 + t113 + (-t113 + t185) * t140) * t222) * t115) * t120) * t154, 0.2e1 * (t119 * t170 * t190 - t110 * t227) * t230 + ((t196 * t108 - (-t122 * t113 + t137 * t139) * t114) * t227 + (t154 * t205 + t224) * t110 + (-t147 * t119 + (t190 * t109 + (-t113 * t191 + t177 * t207) * t222 + (t149 + (qJD(2) * t114 - t113) * t216) * t223) * t120) * t170) * t115, 0, 0, 0, 0; (-t129 * t132 + t133 * t225) * t204 + ((t149 * t169 + t187 * t172) * t129 + t133 * t199 + (-t132 * t127 - (t149 * t172 - t187 * t169) * t134 - t133 * t126) * t130) * t123, (-t129 * t144 + t145 * t225) * t204 + ((t146 * t169 - t147 * t213) * t129 + t145 * t199 + (-t144 * t127 - (t146 * t172 + t147 * t219) * t134 - t145 * t126) * t130) * t123, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:59
	% EndTime: 2019-10-10 11:11:02
	% DurationCPUTime: 2.73s
	% Computational Cost: add. (7994->144), mult. (24079->300), div. (442->12), fcn. (30676->17), ass. (0->137)
	t349 = sin(pkin(8));
	t353 = cos(pkin(8));
	t357 = cos(qJ(2));
	t358 = cos(qJ(1));
	t429 = cos(pkin(6));
	t430 = sin(qJ(2));
	t386 = t429 * t430;
	t431 = sin(qJ(1));
	t342 = t431 * t357 + t358 * t386;
	t391 = t357 * t429;
	t372 = t358 * t430 + t431 * t391;
	t336 = t372 * qJD(1) + t342 * qJD(2);
	t350 = sin(pkin(7));
	t354 = cos(pkin(7));
	t351 = sin(pkin(6));
	t393 = t351 * t431;
	t388 = qJD(1) * t393;
	t374 = t336 * t350 + t354 * t388;
	t347 = t431 * t430;
	t379 = t431 * t386;
	t401 = t358 * t357;
	t337 = -qJD(1) * t379 - qJD(2) * t347 + (qJD(2) * t429 + qJD(1)) * t401;
	t348 = sin(pkin(14));
	t352 = cos(pkin(14));
	t373 = -t336 * t354 + t350 * t388;
	t432 = -t337 * t348 + t373 * t352;
	t285 = t432 * t349 - t374 * t353;
	t383 = -t358 * t391 + t347;
	t405 = t351 * t358;
	t370 = t350 * t405 + t383 * t354;
	t324 = t342 * t348 + t370 * t352;
	t433 = t383 * t350 - t354 * t405;
	t436 = -t324 * t349 - t433 * t353;
	t404 = t352 * t354;
	t378 = -t430 * t348 + t357 * t404;
	t406 = t350 * t357;
	t321 = -(t429 * t350 * t352 + t378 * t351) * t349 + (-t351 * t406 + t429 * t354) * t353;
	t319 = 0.1e1 / t321 ^ 2;
	t407 = t350 * t353;
	t333 = (-(-t348 * t357 - t430 * t404) * t349 + t430 * t407) * t351;
	t330 = qJD(2) * t333;
	t417 = t319 * t330;
	t299 = atan2(t436, t321);
	t294 = sin(t299);
	t295 = cos(t299);
	t278 = t294 * t436 + t295 * t321;
	t275 = 0.1e1 / t278;
	t367 = t350 * t393 - t372 * t354;
	t371 = t379 - t401;
	t327 = t367 * t348 - t352 * t371;
	t355 = sin(qJ(4));
	t356 = cos(qJ(4));
	t326 = t348 * t371 + t367 * t352;
	t368 = -t372 * t350 - t354 * t393;
	t366 = t368 * t349;
	t365 = t326 * t353 - t366;
	t293 = t327 * t356 + t365 * t355;
	t287 = 0.1e1 / t293;
	t318 = 0.1e1 / t321;
	t276 = 0.1e1 / t278 ^ 2;
	t288 = 0.1e1 / t293 ^ 2;
	t311 = t326 * t349 + t368 * t353;
	t308 = t311 ^ 2;
	t273 = t276 * t308 + 0.1e1;
	t335 = t342 * qJD(1) + t372 * qJD(2);
	t334 = t383 * qJD(1) + t371 * qJD(2);
	t392 = qJD(1) * t405;
	t376 = t334 * t354 + t350 * t392;
	t303 = t335 * t348 + t376 * t352;
	t377 = -t334 * t350 + t354 * t392;
	t284 = t303 * t349 - t377 * t353;
	t424 = t276 * t311;
	t307 = t436 ^ 2;
	t298 = t307 * t319 + 0.1e1;
	t296 = 0.1e1 / t298;
	t382 = t285 * t318 - t417 * t436;
	t269 = t382 * t296;
	t385 = -t294 * t321 + t295 * t436;
	t265 = t385 * t269 + t294 * t285 + t295 * t330;
	t427 = t265 * t275 * t276;
	t428 = (t284 * t424 - t308 * t427) / t273 ^ 2;
	t304 = -t335 * t352 + t376 * t348;
	t369 = t303 * t353 + t377 * t349;
	t279 = t293 * qJD(4) + t304 * t355 - t369 * t356;
	t402 = t353 * t356;
	t414 = t327 * t355;
	t292 = -t326 * t402 + t356 * t366 + t414;
	t286 = t292 ^ 2;
	t283 = t286 * t288 + 0.1e1;
	t422 = t288 * t292;
	t280 = t304 * t356 + t369 * t355 + (t365 * t356 - t414) * qJD(4);
	t423 = t280 * t287 * t288;
	t426 = (t279 * t422 - t286 * t423) / t283 ^ 2;
	t416 = t318 * t417;
	t425 = (t285 * t319 * t436 - t307 * t416) / t298 ^ 2;
	t421 = t294 * t311;
	t420 = t295 * t311;
	t419 = t436 * t318;
	t418 = t436 * t333;
	t325 = -t342 * t352 + t370 * t348;
	t415 = t325 * t355;
	t410 = t348 * t354;
	t332 = -t372 * t352 + t371 * t410;
	t413 = t332 * t355;
	t409 = t349 * t355;
	t408 = t349 * t356;
	t403 = t353 * t355;
	t400 = -0.2e1 * t428;
	t399 = -0.2e1 * t427;
	t398 = 0.2e1 * t426;
	t397 = 0.2e1 * t425;
	t396 = t350 * t408;
	t390 = -0.2e1 * t318 * t425;
	t389 = 0.2e1 * t292 * t423;
	t384 = t324 * t353 - t349 * t433;
	t315 = (-t342 * t404 + t383 * t348) * t349 - t342 * t407;
	t381 = -t315 * t318 + t319 * t418;
	t331 = t372 * t348 + t371 * t404;
	t380 = -t349 * t350 * t371 + t331 * t353;
	t375 = t294 + (t295 * t419 - t294) * t296;
	t291 = t325 * t356 + t384 * t355;
	t302 = t332 * t356 + t380 * t355;
	t329 = (t378 * t349 + t353 * t406) * t351 * qJD(2);
	t316 = -t331 * t349 - t371 * t407;
	t314 = t334 * t352 + t335 * t410;
	t313 = -t334 * t348 + t335 * t404;
	t306 = -t337 * t352 - t373 * t348;
	t301 = -t380 * t356 + t413;
	t300 = (t336 * t348 - t337 * t404) * t349 - t337 * t407;
	t290 = -t384 * t356 + t415;
	t281 = 0.1e1 / t283;
	t271 = 0.1e1 / t273;
	t270 = t381 * t296;
	t268 = t375 * t311;
	t266 = -t385 * t270 + t294 * t315 + t295 * t333;
	t264 = t381 * t397 + (0.2e1 * t416 * t418 + t300 * t318 + (-t285 * t333 - t315 * t330 - t329 * t436) * t319) * t296;
	t1 = [t311 * t390 + (t284 * t318 - t311 * t417) * t296, t264, 0, 0, 0, 0; t436 * t275 * t400 + (t285 * t275 + (-t265 * t436 + t268 * t284) * t276) * t271 + (t268 * t399 * t271 + (t268 * t400 + ((-t269 * t296 * t419 + t397) * t421 + (t436 * t390 + t269 + (-t269 + t382) * t296) * t420 + t375 * t284) * t271) * t276) * t311, 0.2e1 * (-t266 * t424 - t275 * t316) * t428 + ((-t313 * t349 - t335 * t407) * t275 + t266 * t311 * t399 + (-t316 * t265 + t266 * t284 + (t264 * t436 - t270 * t285 + t329 + (t270 * t321 + t315) * t269) * t420 + (-t264 * t321 + t270 * t330 + t300 + (t270 * t436 - t333) * t269) * t421) * t276) * t271, 0, 0, 0, 0; (-t287 * t290 + t291 * t422) * t398 + ((t306 * t355 + t374 * t408 + t402 * t432) * t287 + t291 * t389 + (-t290 * t280 - (t306 * t356 - t374 * t409 - t403 * t432) * t292 - t291 * t279) * t288 + (t291 * t287 - (t324 * t402 - t408 * t433 - t415) * t422) * qJD(4)) * t281, (-t287 * t301 + t302 * t422) * t398 + ((-t313 * t402 + t314 * t355 + t335 * t396) * t287 + t302 * t389 + (-t301 * t280 - (-t335 * t350 * t409 + t313 * t403 + t314 * t356) * t292 - t302 * t279) * t288 + (t302 * t287 - (t331 * t402 - t371 * t396 - t413) * t422) * qJD(4)) * t281, 0, -0.2e1 * t426 + 0.2e1 * (t279 * t281 * t288 + (-t281 * t423 - t288 * t426) * t292) * t292, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:01
	% EndTime: 2019-10-10 11:11:08
	% DurationCPUTime: 6.61s
	% Computational Cost: add. (22947->221), mult. (69993->417), div. (705->12), fcn. (88776->19), ass. (0->196)
	t498 = sin(pkin(14));
	t616 = cos(pkin(6));
	t617 = sin(qJ(2));
	t574 = t616 * t617;
	t618 = sin(qJ(1));
	t620 = cos(qJ(2));
	t621 = cos(qJ(1));
	t534 = t621 * t574 + t618 * t620;
	t614 = cos(pkin(14));
	t528 = t534 * t614;
	t575 = t616 * t620;
	t546 = -t621 * t575 + t618 * t617;
	t615 = cos(pkin(7));
	t538 = t546 * t615;
	t612 = sin(pkin(7));
	t613 = sin(pkin(6));
	t568 = t613 * t612;
	t556 = t621 * t568;
	t474 = -t528 + (t538 + t556) * t498;
	t502 = sin(qJ(4));
	t641 = t474 * t502;
	t619 = cos(qJ(4));
	t640 = t474 * t619;
	t535 = t618 * t575 + t621 * t617;
	t482 = t535 * qJD(1) + t534 * qJD(2);
	t563 = -t618 * t574 + t621 * t620;
	t483 = t563 * qJD(1) - t546 * qJD(2);
	t551 = t618 * t568;
	t458 = (qJD(1) * t551 - t615 * t482) * t498 + t483 * t614;
	t639 = t458 * t502;
	t499 = sin(pkin(8));
	t570 = t615 * t613;
	t557 = t621 * t570;
	t624 = t546 * t612 - t557;
	t638 = t624 * t499;
	t500 = cos(pkin(8));
	t529 = t535 * t614;
	t567 = t612 * t614;
	t549 = t613 * t567;
	t542 = t618 * t549;
	t517 = t563 * t498 + t615 * t529 - t542;
	t552 = t618 * t570;
	t523 = t535 * t612 + t552;
	t637 = t523 * t499 - t517 * t500;
	t571 = t615 * t614;
	t459 = -qJD(1) * t542 + t482 * t571 + t483 * t498;
	t533 = qJD(1) * t552 + t482 * t612;
	t627 = t459 * t500 - t533 * t499;
	t636 = t458 * t619 - t627 * t502;
	t531 = t534 * t498;
	t543 = t621 * t549;
	t634 = t531 + t543;
	t569 = t614 * t613;
	t550 = t615 * t569;
	t582 = t498 * t613;
	t564 = t617 * t582;
	t526 = -t620 * t550 + t564;
	t486 = t616 * t567 - t526;
	t553 = t617 * t569;
	t555 = t620 * t570;
	t487 = t553 + (t612 * t616 + t555) * t498;
	t554 = t620 * t568;
	t493 = t616 * t615 - t554;
	t456 = t487 * t619 + (t486 * t500 + t493 * t499) * t502;
	t491 = -t617 * t550 - t620 * t582;
	t489 = t491 * qJD(2);
	t492 = -t615 * t564 + t620 * t569;
	t490 = t492 * qJD(2);
	t547 = t499 * t617 * t568;
	t540 = t619 * t547;
	t586 = t500 * t619;
	t432 = -qJD(2) * t540 + t456 * qJD(4) - t489 * t586 + t490 * t502;
	t587 = t499 * t619;
	t536 = t486 * t586 - t487 * t502 + t493 * t587;
	t453 = 0.1e1 / t536 ^ 2;
	t632 = t432 * t453;
	t481 = t534 * qJD(1) + t535 * qJD(2);
	t520 = t546 * qJD(1) - t563 * qJD(2);
	t518 = t520 * t614;
	t511 = qJD(1) * t543 + t481 * t498 + t615 * t518;
	t513 = qJD(1) * t557 - t520 * t612;
	t631 = t499 * t513 + t500 * t511;
	t539 = t546 * t614;
	t630 = (-t615 * t539 - t634) * t500 + t638;
	t629 = t637 * t619;
	t581 = t499 * t612;
	t628 = (t546 * t498 - t615 * t528) * t500 + t534 * t581;
	t438 = -t630 * t619 - t641;
	t436 = t438 ^ 2;
	t428 = t436 * t453 + 0.1e1;
	t422 = 0.1e1 / t428;
	t440 = t630 * t502 - t640;
	t411 = t440 * qJD(4) + t627 * t619 + t639;
	t452 = 0.1e1 / t536;
	t600 = t438 * t453;
	t562 = t411 * t452 + t432 * t600;
	t393 = t562 * t422;
	t429 = atan2(-t438, -t536);
	t416 = sin(t429);
	t417 = cos(t429);
	t566 = t416 * t536 - t417 * t438;
	t388 = t566 * t393 - t416 * t411 + t417 * t432;
	t405 = -t416 * t438 - t417 * t536;
	t402 = 0.1e1 / t405;
	t403 = 0.1e1 / t405 ^ 2;
	t475 = t563 * t614 + (-t535 * t615 + t551) * t498;
	t443 = t475 * t502 - t629;
	t437 = t443 ^ 2;
	t399 = t403 * t437 + 0.1e1;
	t397 = 0.1e1 / t399;
	t607 = t397 * t403;
	t444 = t475 * t619 + t637 * t502;
	t457 = -t481 * t614 + (qJD(1) * t556 + t520 * t615) * t498;
	t409 = t444 * qJD(4) + t457 * t502 - t631 * t619;
	t605 = t403 * t443;
	t610 = t388 * t402 * t403;
	t611 = (t409 * t605 - t437 * t610) / t399 ^ 2;
	t626 = -t388 * t607 - 0.2e1 * t402 * t611;
	t622 = 0.2e1 * t443;
	t579 = t610 * t622;
	t596 = 0.2e1 * t611;
	t625 = t397 * t579 - t409 * t607 + t596 * t605;
	t463 = t517 * t499 + t523 * t500;
	t501 = sin(qJ(5));
	t503 = cos(qJ(5));
	t427 = t444 * t503 + t463 * t501;
	t419 = 0.1e1 / t427;
	t420 = 0.1e1 / t427 ^ 2;
	t623 = -0.2e1 * t438;
	t602 = t452 * t632;
	t609 = (t411 * t600 + t436 * t602) / t428 ^ 2;
	t608 = t397 * t402;
	t598 = qJD(4) * t502;
	t410 = t629 * qJD(4) + t457 * t619 - t475 * t598 + t631 * t502;
	t434 = -t511 * t499 + t513 * t500;
	t426 = t444 * t501 - t463 * t503;
	t597 = qJD(5) * t426;
	t401 = t410 * t503 + t434 * t501 - t597;
	t606 = t401 * t419 * t420;
	t400 = t427 * qJD(5) + t410 * t501 - t434 * t503;
	t418 = t426 ^ 2;
	t408 = t418 * t420 + 0.1e1;
	t603 = t420 * t426;
	t604 = 0.1e1 / t408 ^ 2 * (t400 * t603 - t418 * t606);
	t601 = t438 * t452;
	t595 = -0.2e1 * t609;
	t594 = -0.2e1 * t604;
	t593 = 0.2e1 * t604;
	t591 = t452 * t609;
	t589 = t397 * t605;
	t588 = t426 * t606;
	t585 = qJD(2) * t619;
	t583 = t498 * t615;
	t578 = 0.2e1 * t588;
	t577 = t602 * t623;
	t473 = t614 * t538 + t634;
	t442 = t640 + (t473 * t500 - t638) * t502;
	t462 = -t473 * t499 - t500 * t624;
	t425 = t442 * t503 + t462 * t501;
	t424 = t442 * t501 - t462 * t503;
	t545 = t563 * t615;
	t479 = t535 * t498 - t614 * t545;
	t480 = -t498 * t545 - t529;
	t544 = t563 * t612;
	t541 = t499 * t544;
	t449 = t480 * t619 + (t479 * t500 + t541) * t502;
	t467 = -t479 * t499 + t500 * t544;
	t431 = t449 * t503 + t467 * t501;
	t430 = t449 * t501 - t467 * t503;
	t565 = t619 * t581;
	t561 = -t419 * t501 + t503 * t603;
	t560 = t440 * t452 + t456 * t600;
	t478 = -t615 * t531 - t539;
	t447 = t478 * t502 - t628 * t619;
	t466 = -t491 * t586 + t492 * t502 - t540;
	t559 = t447 * t452 + t466 * t600;
	t548 = -t416 + (-t417 * t601 + t416) * t422;
	t537 = t473 * t586 - t587 * t624 - t641;
	t448 = -t479 * t586 + t480 * t502 - t619 * t541;
	t465 = t481 * t583 + t518;
	t464 = t481 * t571 - t520 * t498;
	t446 = -t481 * t612 * t500 - t464 * t499;
	t445 = (-t498 * t555 - t553) * qJD(2) * t502 + t492 * qJD(4) * t619 - t499 * t554 * t585 + t547 * t598 + (t491 * t598 - t526 * t585) * t500;
	t435 = -t459 * t499 - t500 * t533;
	t433 = t490 * t619 + (qJD(2) * t547 + t489 * t500) * t502 + t536 * qJD(4);
	t415 = (-t482 * t614 - t483 * t583) * t502 - (t482 * t498 - t483 * t571) * t586 - t483 * t565 + (t478 * t619 + t628 * t502) * qJD(4);
	t414 = t465 * t619 + (t464 * t500 - t481 * t581) * t502 - t448 * qJD(4);
	t413 = t537 * qJD(4) - t636;
	t412 = -t438 * qJD(4) + t636;
	t406 = 0.1e1 / t408;
	t396 = t559 * t422;
	t394 = t560 * t422;
	t389 = t566 * t394 - t416 * t440 + t417 * t456;
	t387 = t559 * t595 + (-t466 * t577 + t415 * t452 + (t411 * t466 + t432 * t447 + t438 * t445) * t453) * t422;
	t385 = t560 * t595 + (-t456 * t577 + t412 * t452 + (t411 * t456 + t432 * t440 + t433 * t438) * t453) * t422;
	t1 = [-t591 * t622 + (t409 * t452 + t443 * t632) * t422, t387, 0, t385, 0, 0; (t442 * qJD(4) - t459 * t586 + t533 * t587 - t639) * t608 - (t548 * t409 + ((t393 * t422 * t601 + t595) * t416 + (-t591 * t623 - t393 + (t393 - t562) * t422) * t417) * t443) * t589 - t626 * t537 + t625 * t548 * t443, (t449 * qJD(4) - t464 * t586 + t465 * t502 + t481 * t565) * t608 - ((-t387 * t438 - t396 * t411 + t445 + (t396 * t536 - t447) * t393) * t417 + (t387 * t536 - t396 * t432 - t415 + (t396 * t438 - t466) * t393) * t416) * t589 + t626 * t448 + t625 * (t566 * t396 - t416 * t447 + t417 * t466), 0, (t389 * t605 - t402 * t444) * t596 + (t389 * t579 + t410 * t402 + (-t444 * t388 - t389 * t409 + (-(-t385 * t438 - t394 * t411 + t433 + (t394 * t536 - t440) * t393) * t417 - (t385 * t536 - t394 * t432 - t412 + (t394 * t438 - t456) * t393) * t416) * t443) * t403) * t397, 0, 0; (-t419 * t424 + t425 * t603) * t593 + ((t425 * qJD(5) + t413 * t501 - t435 * t503) * t419 + t425 * t578 + (-t424 * t401 - (-t424 * qJD(5) + t413 * t503 + t435 * t501) * t426 - t425 * t400) * t420) * t406, (-t419 * t430 + t431 * t603) * t593 + ((t431 * qJD(5) + t414 * t501 - t446 * t503) * t419 + t431 * t578 + (-t430 * t401 - (-t430 * qJD(5) + t414 * t503 + t446 * t501) * t426 - t431 * t400) * t420) * t406, 0, t561 * t443 * t594 + (t561 * t409 + ((-qJD(5) * t419 - 0.2e1 * t588) * t503 + (t400 * t503 + (t401 - t597) * t501) * t420) * t443) * t406, t594 + 0.2e1 * (t400 * t420 * t406 + (-t406 * t606 - t420 * t604) * t426) * t426, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:03
	% EndTime: 2019-10-10 11:11:16
	% DurationCPUTime: 13.32s
	% Computational Cost: add. (54756->300), mult. (163156->566), div. (983->12), fcn. (208653->21), ass. (0->256)
	t645 = sin(pkin(14));
	t792 = cos(pkin(6));
	t793 = sin(qJ(2));
	t736 = t792 * t793;
	t794 = sin(qJ(1));
	t795 = cos(qJ(2));
	t796 = cos(qJ(1));
	t691 = t796 * t736 + t794 * t795;
	t790 = cos(pkin(14));
	t684 = t691 * t790;
	t737 = t792 * t795;
	t700 = -t796 * t737 + t794 * t793;
	t791 = cos(pkin(7));
	t693 = t700 * t791;
	t788 = sin(pkin(7));
	t789 = sin(pkin(6));
	t731 = t789 * t788;
	t713 = t796 * t731;
	t615 = -t684 + (t693 + t713) * t645;
	t650 = sin(qJ(4));
	t818 = t615 * t650;
	t653 = cos(qJ(4));
	t817 = t615 * t653;
	t649 = sin(qJ(5));
	t692 = t794 * t737 + t796 * t793;
	t625 = t692 * qJD(1) + t691 * qJD(2);
	t724 = -t794 * t736 + t796 * t795;
	t626 = t724 * qJD(1) - t700 * qJD(2);
	t730 = t788 * t790;
	t706 = t789 * t730;
	t695 = t794 * t706;
	t734 = t791 * t790;
	t599 = -qJD(1) * t695 + t625 * t734 + t626 * t645;
	t646 = sin(pkin(8));
	t647 = cos(pkin(8));
	t733 = t791 * t789;
	t709 = t794 * t733;
	t689 = qJD(1) * t709 + t625 * t788;
	t672 = t599 * t646 + t689 * t647;
	t816 = t672 * t649;
	t652 = cos(qJ(5));
	t815 = t672 * t652;
	t708 = t794 * t731;
	t598 = (qJD(1) * t708 - t791 * t625) * t645 + t626 * t790;
	t671 = -t599 * t647 + t689 * t646;
	t814 = t598 * t653 + t671 * t650;
	t813 = -t598 * t650 + t671 * t653;
	t714 = t796 * t733;
	t679 = t700 * t788 - t714;
	t810 = t679 * t646;
	t809 = t679 * t647;
	t685 = t692 * t790;
	t673 = t724 * t645 + t791 * t685 - t695;
	t678 = t692 * t788 + t709;
	t808 = t678 * t646 - t673 * t647;
	t686 = t691 * t645;
	t696 = t796 * t706;
	t807 = t686 + t696;
	t732 = t790 * t789;
	t710 = t793 * t732;
	t715 = t795 * t733;
	t629 = t710 + (t792 * t788 + t715) * t645;
	t707 = t791 * t732;
	t746 = t645 * t789;
	t725 = t793 * t746;
	t682 = -t795 * t707 + t725;
	t628 = t792 * t730 - t682;
	t712 = t795 * t731;
	t636 = t792 * t791 - t712;
	t726 = t628 * t647 + t636 * t646;
	t595 = -t629 * t650 + t726 * t653;
	t635 = -t791 * t725 + t795 * t732;
	t633 = t635 * qJD(2);
	t634 = -t793 * t707 - t795 * t746;
	t632 = t634 * qJD(2);
	t711 = t793 * t731;
	t701 = qJD(2) * t711;
	t690 = t632 * t647 + t646 * t701;
	t573 = t595 * qJD(4) + t633 * t653 + t690 * t650;
	t596 = t629 * t653 + t726 * t650;
	t612 = -t628 * t646 + t636 * t647;
	t578 = t596 * t652 + t612 * t649;
	t618 = -t632 * t646 + t647 * t701;
	t551 = t578 * qJD(5) + t573 * t649 - t618 * t652;
	t577 = t596 * t649 - t612 * t652;
	t575 = 0.1e1 / t577 ^ 2;
	t805 = t551 * t575;
	t574 = 0.1e1 / t577;
	t694 = t700 * t790;
	t669 = t791 * t694 + t807;
	t662 = -t669 * t647 + t810;
	t583 = t662 * t653 + t818;
	t584 = t662 * t650 - t817;
	t663 = t669 * t646 + t809;
	t562 = t584 * t649 - t663 * t652;
	t774 = t562 * t575;
	t719 = -t574 * t583 + t595 * t774;
	t804 = t649 * t719;
	t624 = t691 * qJD(1) + t692 * qJD(2);
	t675 = t700 * qJD(1) - t724 * qJD(2);
	t674 = t675 * t790;
	t665 = qJD(1) * t696 + t624 * t645 + t791 * t674;
	t667 = qJD(1) * t714 - t675 * t788;
	t803 = t646 * t667 + t647 * t665;
	t802 = t808 * t653;
	t801 = t634 * t647 + t646 * t711;
	t699 = t724 * t791;
	t622 = -t645 * t699 - t685;
	t621 = t692 * t645 - t790 * t699;
	t698 = t724 * t788;
	t687 = t621 * t647 + t646 * t698;
	t800 = -t622 * t650 + t687 * t653;
	t614 = t790 * t693 + t807;
	t727 = t614 * t647 - t810;
	t799 = t727 * t653 - t818;
	t546 = atan2(-t562, t577);
	t537 = sin(t546);
	t538 = cos(t546);
	t520 = -t537 * t562 + t538 * t577;
	t517 = 0.1e1 / t520;
	t616 = t724 * t790 + (-t692 * t791 + t708) * t645;
	t588 = t616 * t653 + t808 * t650;
	t661 = t673 * t646 + t678 * t647;
	t568 = t588 * t652 + t661 * t649;
	t587 = t616 * t650 - t802;
	t648 = sin(qJ(6));
	t651 = cos(qJ(6));
	t550 = t568 * t651 + t587 * t648;
	t543 = 0.1e1 / t550;
	t518 = 0.1e1 / t520 ^ 2;
	t544 = 0.1e1 / t550 ^ 2;
	t798 = -0.2e1 * t562;
	t567 = t588 * t649 - t661 * t652;
	t797 = 0.2e1 * t567;
	t561 = t567 ^ 2;
	t516 = t561 * t518 + 0.1e1;
	t597 = -t624 * t790 + (qJD(1) * t713 + t675 * t791) * t645;
	t762 = qJD(4) * t650;
	t532 = t802 * qJD(4) + t597 * t653 - t616 * t762 + t803 * t650;
	t660 = -t665 * t646 + t667 * t647;
	t521 = t568 * qJD(5) + t532 * t649 - t660 * t652;
	t781 = t518 * t567;
	t560 = t562 ^ 2;
	t541 = t560 * t575 + 0.1e1;
	t539 = 0.1e1 / t541;
	t534 = t583 * qJD(4) + t814;
	t564 = t584 * t652 + t663 * t649;
	t523 = t564 * qJD(5) + t534 * t649 - t815;
	t723 = -t523 * t574 + t551 * t774;
	t507 = t723 * t539;
	t729 = -t537 * t577 - t538 * t562;
	t501 = t729 * t507 - t537 * t523 + t538 * t551;
	t519 = t517 * t518;
	t786 = t501 * t519;
	t787 = (t521 * t781 - t561 * t786) / t516 ^ 2;
	t522 = -t567 * qJD(5) + t532 * t652 + t660 * t649;
	t531 = t588 * qJD(4) + t597 * t650 - t803 * t653;
	t511 = t550 * qJD(6) + t522 * t648 - t531 * t651;
	t549 = t568 * t648 - t587 * t651;
	t542 = t549 ^ 2;
	t528 = t542 * t544 + 0.1e1;
	t778 = t544 * t549;
	t758 = qJD(6) * t549;
	t512 = t522 * t651 + t531 * t648 - t758;
	t783 = t512 * t543 * t544;
	t785 = (t511 * t778 - t542 * t783) / t528 ^ 2;
	t776 = t574 * t805;
	t784 = (t523 * t774 - t560 * t776) / t541 ^ 2;
	t782 = t518 * t521;
	t780 = t537 * t567;
	t779 = t538 * t567;
	t777 = t549 * t651;
	t775 = t562 * t574;
	t773 = t587 * t649;
	t772 = t587 * t652;
	t764 = t647 * t650;
	t763 = t648 * t543;
	t760 = qJD(5) * t649;
	t759 = qJD(5) * t652;
	t757 = 0.2e1 * t787;
	t756 = -0.2e1 * t785;
	t755 = 0.2e1 * t785;
	t754 = -0.2e1 * t784;
	t753 = t519 * t797;
	t752 = t574 * t784;
	t751 = t518 * t780;
	t750 = t518 * t779;
	t749 = t549 * t783;
	t747 = t645 * t791;
	t745 = t646 * t788;
	t744 = t647 * t788;
	t743 = t501 * t753;
	t742 = 0.2e1 * t749;
	t741 = t776 * t798;
	t735 = qJD(6) * t772 + t532;
	t586 = t727 * t650 + t817;
	t603 = -t614 * t646 - t809;
	t566 = t586 * t652 + t603 * t649;
	t548 = t566 * t651 - t648 * t799;
	t547 = t566 * t648 + t651 * t799;
	t592 = t622 * t653 + t687 * t650;
	t609 = -t621 * t646 + t647 * t698;
	t571 = t592 * t652 + t609 * t649;
	t556 = t571 * t651 - t648 * t800;
	t555 = t571 * t648 + t651 * t800;
	t565 = t586 * t649 - t603 * t652;
	t570 = t592 * t649 - t609 * t652;
	t722 = t544 * t777 - t763;
	t721 = -t564 * t574 + t578 * t774;
	t620 = -t791 * t686 - t694;
	t619 = t700 * t645 - t791 * t684;
	t683 = t691 * t788;
	t680 = t619 * t647 + t646 * t683;
	t590 = t620 * t653 + t680 * t650;
	t681 = -t619 * t646 + t647 * t683;
	t569 = t590 * t649 - t681 * t652;
	t608 = t635 * t653 + t801 * t650;
	t623 = -t634 * t646 + t647 * t711;
	t593 = t608 * t649 - t623 * t652;
	t720 = -t569 * t574 + t593 * t774;
	t604 = t624 * t734 - t675 * t645;
	t705 = -t604 * t647 + t624 * t745;
	t704 = -t537 + (t538 * t775 + t537) * t539;
	t702 = qJD(2) * t712;
	t697 = qJD(6) * t588 - t531 * t652 + t587 * t760;
	t631 = t682 * qJD(2);
	t606 = t625 * t645 - t626 * t734;
	t605 = t624 * t747 + t674;
	t589 = -t604 * t646 - t624 * t744;
	t572 = -t596 * qJD(4) - t633 * t650 + t690 * t653;
	t559 = (t646 * t650 * t702 + t631 * t764 - t635 * t762 + ((-t645 * t715 - t710) * qJD(2) + t801 * qJD(4)) * t653) * t649 + t608 * t759 - (-t631 * t646 + t647 * t702) * t652 + t623 * t760;
	t558 = t588 * t648 - t651 * t772;
	t557 = -t588 * t651 - t648 * t772;
	t554 = t800 * qJD(4) + t605 * t653 - t705 * t650;
	t553 = t592 * qJD(4) + t605 * t650 + t705 * t653;
	t552 = -t577 * qJD(5) + t573 * t652 + t618 * t649;
	t536 = t799 * qJD(4) - t814;
	t535 = t586 * qJD(4) + t813;
	t533 = -t584 * qJD(4) + t813;
	t530 = (t590 * qJD(5) + t606 * t646 - t626 * t744) * t652 + ((-t625 * t790 - t626 * t747) * t653 + t606 * t764 + t626 * t650 * t745 + t681 * qJD(5) + (-t620 * t650 + t680 * t653) * qJD(4)) * t649;
	t529 = -t570 * qJD(5) + t554 * t652 + t589 * t649;
	t526 = 0.1e1 / t528;
	t525 = -t565 * qJD(5) + t536 * t652 - t816;
	t524 = -t562 * qJD(5) + t534 * t652 + t816;
	t514 = 0.1e1 / t516;
	t513 = t539 * t804;
	t510 = t720 * t539;
	t509 = t721 * t539;
	t506 = t704 * t567;
	t504 = (-t537 * t583 + t538 * t595) * t649 + t729 * t513;
	t503 = t729 * t510 - t537 * t569 + t538 * t593;
	t502 = t729 * t509 - t537 * t564 + t538 * t578;
	t500 = t720 * t754 + (t593 * t741 - t530 * t574 + (t523 * t593 + t551 * t569 + t559 * t562) * t575) * t539;
	t498 = t721 * t754 + (t578 * t741 - t524 * t574 + (t523 * t578 + t551 * t564 + t552 * t562) * t575) * t539;
	t497 = t754 * t804 + (t719 * t759 + (t595 * t741 - t533 * t574 + (t523 * t595 + t551 * t583 + t562 * t572) * t575) * t649) * t539;
	t1 = [t752 * t797 + (-t521 * t574 + t567 * t805) * t539, t500, 0, t497, t498, 0; -0.2e1 * t565 * t517 * t787 + ((t566 * qJD(5) + t536 * t649 + t815) * t517 + (-t565 * t501 - t506 * t521) * t518) * t514 + (t506 * t518 * t757 + (0.2e1 * t506 * t786 - (-t507 * t539 * t775 + t754) * t751 - (t752 * t798 - t507 + (t507 - t723) * t539) * t750 - t704 * t782) * t514) * t567, (t503 * t781 - t517 * t570) * t757 + ((t571 * qJD(5) + t554 * t649 - t589 * t652) * t517 + t503 * t743 + (-t570 * t501 - t503 * t521 - (-t500 * t562 - t510 * t523 + t559 + (-t510 * t577 - t569) * t507) * t779 - (-t500 * t577 - t510 * t551 - t530 + (t510 * t562 - t593) * t507) * t780) * t518) * t514, 0, (t504 * t781 + t517 * t773) * t757 + (-t504 * t782 + (-t531 * t649 - t587 * t759) * t517 + (t504 * t753 + t518 * t773) * t501 - (t595 * t759 - t497 * t562 - t513 * t523 + t572 * t649 + (-t513 * t577 - t583 * t649) * t507) * t750 - (-t583 * t759 - t497 * t577 - t513 * t551 - t533 * t649 + (t513 * t562 - t595 * t649) * t507) * t751) * t514, (t502 * t781 - t517 * t568) * t757 + (t502 * t743 + t522 * t517 + (-t568 * t501 - t502 * t521 - (-t498 * t562 - t509 * t523 + t552 + (-t509 * t577 - t564) * t507) * t779 - (-t498 * t577 - t509 * t551 - t524 + (t509 * t562 - t578) * t507) * t780) * t518) * t514, 0; (-t543 * t547 + t548 * t778) * t755 + ((t548 * qJD(6) + t525 * t648 - t535 * t651) * t543 + t548 * t742 + (-t547 * t512 - (-t547 * qJD(6) + t525 * t651 + t535 * t648) * t549 - t548 * t511) * t544) * t526, (-t543 * t555 + t556 * t778) * t755 + ((t556 * qJD(6) + t529 * t648 - t553 * t651) * t543 + t556 * t742 + (-t555 * t512 - (-t555 * qJD(6) + t529 * t651 + t553 * t648) * t549 - t556 * t511) * t544) * t526, 0, (-t543 * t557 + t558 * t778) * t755 + (t558 * t742 - t735 * t543 * t651 + t697 * t763 + (-t735 * t549 * t648 - t558 * t511 - t557 * t512 - t697 * t777) * t544) * t526, t722 * t567 * t756 + (t722 * t521 + ((-qJD(6) * t543 - 0.2e1 * t749) * t651 + (t511 * t651 + (t512 - t758) * t648) * t544) * t567) * t526, t756 + 0.2e1 * (t511 * t544 * t526 + (-t526 * t783 - t544 * t785) * t549) * t549;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end