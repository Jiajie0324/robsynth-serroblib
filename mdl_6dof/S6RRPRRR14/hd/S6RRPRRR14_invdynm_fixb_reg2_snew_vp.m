% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RRPRRR14
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-09 12:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RRPRRR14_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR14_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR14_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRPRRR14_invdynm_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-09 12:02:23
% EndTime: 2019-05-09 12:12:25
% DurationCPUTime: 601.38s
% Computational Cost: add. (8918104->1482), mult. (24212009->2407), div. (0->0), fcn. (20985296->18), ass. (0->1075)
t2738 = cos(qJ(2));
t2721 = t2738 ^ 2;
t2725 = sin(pkin(6));
t2719 = t2725 ^ 2;
t3075 = qJD(1) ^ 2;
t3020 = t2719 * t3075;
t2998 = t2721 * t3020;
t2726 = cos(pkin(14));
t2724 = sin(pkin(7));
t2728 = cos(pkin(7));
t2733 = sin(qJ(2));
t3016 = t2725 * t2733;
t3001 = qJD(1) * t3016;
t2713 = qJD(2) * t3001;
t3007 = qJDD(1) * t2738;
t2972 = t2725 * t3007 - t2713;
t2729 = cos(pkin(6));
t2983 = qJDD(1) * t2729 + qJDD(2);
t2772 = t2983 * t2724 + t2972 * t2728;
t2766 = t2726 * t2772;
t2730 = sin(qJ(6));
t3058 = qJD(1) * t2729;
t2715 = qJD(2) + t3058;
t2722 = sin(pkin(14));
t3015 = t2725 * t2738;
t3000 = qJD(1) * t3015;
t2982 = t2728 * t3000;
t3019 = t2722 * t2724;
t2674 = t2715 * t3019 + t2722 * t2982 + t2726 * t3001;
t2732 = sin(qJ(4));
t2737 = cos(qJ(4));
t2827 = t2715 * t2724 + t2982;
t2673 = -t2722 * t3001 + t2726 * t2827;
t2981 = t2724 * t3000;
t3022 = t2715 * t2728;
t2689 = -t2981 + t3022;
t2723 = sin(pkin(8));
t2727 = cos(pkin(8));
t2862 = t2673 * t2727 + t2689 * t2723;
t2626 = t2674 * t2737 + t2732 * t2862;
t2731 = sin(qJ(5));
t2736 = cos(qJ(5));
t3028 = t2689 * t2727;
t2977 = -t2723 * t2673 + qJD(4) + t3028;
t2600 = t2736 * t2626 + t2731 * t2977;
t2735 = cos(qJ(6));
t2624 = t2674 * t2732 - t2737 * t2862;
t2847 = qJD(5) + t2624;
t2554 = t2600 * t2730 - t2735 * t2847;
t2556 = t2735 * t2600 + t2730 * t2847;
t2493 = t2556 * t2554;
t2765 = t2772 * t2722;
t3008 = qJDD(1) * t2733;
t3057 = qJD(1) * t2738;
t2837 = qJD(2) * t3057 + t3008;
t2786 = t2837 * t2725;
t2761 = t2726 * t2786 + t2765;
t2773 = -t2724 * t2972 + t2728 * t2983;
t2774 = -t2722 * t2786 + t2766;
t3078 = t2723 * t2773 + t2727 * t2774;
t2573 = -t2624 * qJD(4) + t2732 * t3078 + t2737 * t2761;
t2633 = -t2723 * t2774 + t2727 * t2773 + qJDD(4);
t2985 = -t2731 * t2573 + t2736 * t2633;
t2840 = t2600 * qJD(5) - t2985;
t2499 = qJDD(6) + t2840;
t3084 = -t2493 + t2499;
t3096 = t2730 * t3084;
t2598 = t2626 * t2731 - t2736 * t2977;
t2535 = t2600 * t2598;
t2757 = t2626 * qJD(4) + t2732 * t2761 - t2737 * t3078;
t2572 = qJDD(5) + t2757;
t3083 = -t2535 + t2572;
t3095 = t2731 * t3083;
t3094 = t2735 * t3084;
t3093 = t2736 * t3083;
t2603 = t2977 * t2624;
t3092 = -t2603 + t2573;
t2716 = g(3) * t3016;
t2734 = sin(qJ(1));
t2739 = cos(qJ(1));
t2712 = g(1) * t2739 + t2734 * g(2);
t3009 = qJDD(1) * t2725;
t2787 = pkin(10) * t3009 - t2712;
t2711 = t2734 * g(1) - t2739 * g(2);
t2849 = qJDD(1) * pkin(1) + t2711;
t2833 = t2729 * t2849;
t3061 = qJ(3) * t2724;
t3073 = pkin(2) * t2738;
t2848 = -t2733 * t3061 - t3073;
t3013 = t2729 * t2733;
t3021 = t2715 * t2733;
t3060 = qJ(3) * t2728;
t2714 = t2715 ^ 2;
t3064 = t2714 * pkin(2);
t2748 = t2738 * t2787 + t2733 * t2833 - t2716 - t3064 + t2772 * qJ(3) + (-pkin(1) * t3057 + (t3021 * t3060 + (pkin(10) * t3013 + t2848 * t3015) * qJD(1)) * t2725) * qJD(1);
t3056 = qJD(3) * t2674;
t2971 = t2983 * pkin(2);
t3065 = t3075 * pkin(1);
t2758 = -t2733 * (-t2712 - t3065) + t2738 * t2833 + t2714 * t3061 + t2971;
t2832 = t2733 * t2848;
t2988 = -pkin(10) - t3060;
t3068 = pkin(10) * t2729;
t3005 = t2738 * t3068;
t3062 = t2738 * g(3);
t2750 = (-t3062 + t2988 * t3008 + ((-t2725 * t2832 + t3005) * qJD(1) + (-qJD(2) + t2715) * t2738 * t3060) * qJD(1)) * t2725 + t2758;
t3063 = t2729 * g(3);
t2980 = t2713 * pkin(2) - t3063;
t2720 = t2733 ^ 2;
t3010 = t2720 + t2721;
t3011 = qJD(2) + t2715;
t3017 = t2724 * t2738;
t3059 = qJD(1) * t2725;
t2753 = ((-pkin(1) + t2848) * qJDD(1) + (pkin(2) * t3021 - pkin(10) * t3059 + (-t2728 * t3010 * t3059 - t3011 * t3017) * qJ(3)) * qJD(1) - t2711) * t2725 + t2980;
t3080 = t2724 * t2753 + t2728 * t2750;
t2744 = -t2722 * t2748 + t2726 * t3080 - 0.2e1 * t3056;
t2760 = pkin(11) * t2761;
t2838 = t2862 * pkin(11);
t3067 = pkin(11) * t2723;
t2851 = -pkin(3) * t2673 - t2674 * t3067;
t2743 = pkin(3) * t2773 - t2674 * t2851 + t2689 * t2838 - t2727 * t2760 + t2744;
t2747 = -t2724 * t2750 + t2728 * t2753 + qJDD(3);
t3066 = pkin(11) * t2727;
t2850 = pkin(3) * t2689 - t2674 * t3066;
t2746 = -pkin(3) * t2774 - t2673 * t2838 + t2674 * t2850 - t2723 * t2760 + t2747;
t3091 = t2723 * t2746 + t2727 * t2743;
t2565 = t2847 * t2600;
t3090 = t2840 + t2565;
t2845 = t2847 ^ 2;
t2968 = t2977 ^ 2;
t3089 = t2719 * t2733;
t3035 = t2673 * t2674;
t2764 = t2773 + t3035;
t3088 = t2722 * t2764;
t3087 = t2726 * t2764;
t3038 = t2626 * t2624;
t2763 = t2633 - t3038;
t3086 = t2732 * t2763;
t3085 = t2737 * t2763;
t2873 = -t2736 * t2573 - t2731 * t2633;
t2501 = -t2598 * qJD(5) - t2873;
t2564 = t2847 * t2598;
t2469 = t2501 - t2564;
t2656 = t2689 * t2673;
t3082 = t2656 + t2761;
t2671 = t2673 ^ 2;
t2672 = t2674 ^ 2;
t2621 = -t2671 - t2672;
t2688 = t2689 ^ 2;
t3081 = t2688 + t2672;
t3029 = t2689 * t2726;
t3079 = t2674 * t3029 + t2722 * t2761;
t3077 = -t2722 * t2656 + t2726 * t2774;
t2843 = t2977 * t2626;
t2526 = t2843 + t2757;
t3076 = (-qJ(3) * t2724 ^ 2 + t2728 * t2988) * t3009 + t2728 * t2712;
t2552 = t2554 ^ 2;
t2553 = t2556 ^ 2;
t2595 = qJD(6) + t2598;
t2594 = t2595 ^ 2;
t2596 = t2598 ^ 2;
t2597 = t2600 ^ 2;
t2622 = t2624 ^ 2;
t2623 = t2626 ^ 2;
t3074 = 0.2e1 * t2673;
t3072 = pkin(4) * t2732;
t3071 = pkin(4) * t2737;
t3070 = pkin(5) * t2731;
t3069 = pkin(10) * t2725;
t3006 = qJD(3) * t3074;
t2481 = pkin(11) * t3078 + t2673 * t2851 - t2689 * t2850 + t2722 * t3080 + t2726 * t2748 + t3006;
t2361 = t2737 * t2481 + t2732 * t3091;
t2582 = pkin(4) * t2624 - pkin(12) * t2626;
t2340 = -pkin(4) * t2968 + t2633 * pkin(12) - t2624 * t2582 + t2361;
t2741 = pkin(4) * t2526 - pkin(12) * t3092 - t2723 * t2743 + t2727 * t2746;
t2263 = t2340 * t2731 - t2736 * t2741;
t2533 = pkin(5) * t2598 - pkin(13) * t2600;
t2239 = -t2572 * pkin(5) - pkin(13) * t2845 + t2533 * t2600 + t2263;
t3055 = t2239 * t2730;
t3054 = t2239 * t2735;
t2360 = t2732 * t2481 - t2737 * t3091;
t2339 = -t2633 * pkin(4) - t2968 * pkin(12) + t2626 * t2582 + t2360;
t3053 = t2339 * t2731;
t3052 = t2339 * t2736;
t3031 = t2689 * t2674;
t2613 = -t2774 + t3031;
t2409 = t2723 * t2744 - t2727 * t2747 + (-t2613 * t2727 + t2723 * t2764) * pkin(3) + (-t2727 ^ 2 * t2621 + (t2723 * t3081 + t3028 * t3074) * t2723) * pkin(11);
t3051 = t2409 * t2732;
t3050 = t2409 * t2737;
t2423 = t2493 + t2499;
t3049 = t2423 * t2730;
t3048 = t2423 * t2735;
t2488 = t2535 + t2572;
t3047 = t2488 * t2731;
t3046 = t2488 * t2736;
t2546 = -t2633 - t3038;
t3045 = t2546 * t2732;
t3044 = t2546 * t2737;
t3043 = t2573 * t2732;
t3003 = qJ(3) * t3017;
t2574 = t2724 * t2758 - t2728 * t2980 - qJDD(3) + (t2724 * (-pkin(10) * t3008 - t3062) - t2728 * (-pkin(2) * t3007 - t2849) + ((t2724 * t3005 + (-t2724 * t2832 - t2728 * (-t3010 * t3060 - pkin(10))) * t2725) * qJD(1) + (-pkin(2) * t2733 + 0.2e1 * t3003) * t3022) * qJD(1)) * t2725;
t3042 = t2574 * t2722;
t3041 = t2574 * t2726;
t3040 = t2595 * t2730;
t3039 = t2595 * t2735;
t2628 = -t2773 + t3035;
t3037 = t2628 * t2722;
t3036 = t2628 * t2726;
t2777 = t3069 * t3075 + t2849;
t2685 = t2725 * t2777 + t3063;
t3033 = t2685 * t2733;
t3032 = t2685 * t2738;
t3012 = t2733 * t3075;
t2989 = t2738 * t3012;
t2710 = t2719 * t2989;
t2690 = t2710 + t2983;
t3027 = t2690 * t2733;
t3026 = t2690 * t2738;
t2691 = -t2710 + t2983;
t3025 = t2691 * t2733;
t3024 = t2691 * t2738;
t3023 = t2715 * t2725;
t3018 = t2723 * t2624;
t3014 = t2727 * t2624;
t2264 = t2736 * t2340 + t2731 * t2741;
t3004 = -pkin(5) * t2736 - pkin(4);
t3002 = qJD(1) * t3023;
t2999 = t2720 * t3020;
t2997 = t2731 * t2493;
t2996 = t2736 * t2493;
t2995 = t2732 * t2535;
t2994 = t2737 * t2535;
t2991 = t2724 * t3035;
t2990 = t2728 * t3035;
t2987 = -t2715 + t3058;
t2240 = -pkin(5) * t2845 + t2572 * pkin(13) - t2598 * t2533 + t2264;
t2277 = pkin(5) * t3090 - t2469 * pkin(13) + t2339;
t2177 = t2240 * t2730 - t2735 * t2277;
t2178 = t2240 * t2735 + t2277 * t2730;
t2115 = t2177 * t2730 + t2735 * t2178;
t2187 = t2263 * t2731 + t2736 * t2264;
t2986 = -t2501 * t2730 + t2735 * t2572;
t2984 = -t2711 * t2734 - t2739 * t2712;
t2979 = -pkin(5) * t2239 + pkin(13) * t2115;
t2709 = qJDD(1) * t2739 - t2734 * t3075;
t2978 = -pkin(9) * t2709 - g(3) * t2734;
t2687 = -t2999 - t2714;
t2663 = -t2687 * t2733 - t3024;
t2976 = pkin(10) * t2663 - t3033;
t2695 = -t2714 - t2998;
t2669 = t2695 * t2738 - t3027;
t2975 = pkin(10) * t2669 + t3032;
t2567 = -t2968 - t2622;
t2490 = t2567 * t2737 - t3086;
t2974 = pkin(11) * t2490 + t3050;
t2577 = -t2623 - t2968;
t2497 = -t2577 * t2732 + t3044;
t2973 = pkin(11) * t2497 - t3051;
t2634 = -t2688 - t2671;
t2587 = t2634 * t2726 - t3088;
t2970 = qJ(3) * t2587 + t3041;
t2593 = t2722 * t3081 + t3036;
t2969 = qJ(3) * t2593 - t3042;
t2087 = t2115 * t2731 - t2239 * t2736;
t2088 = t2115 * t2736 + t2239 * t2731;
t2114 = -t2177 * t2735 + t2178 * t2730;
t2962 = t2088 * t2732 - t2114 * t2737;
t2023 = t2087 * t2727 + t2723 * t2962;
t2024 = -t2087 * t2723 + t2727 * t2962;
t2059 = t2088 * t2737 + t2114 * t2732;
t2966 = t2024 * t2726 + t2059 * t2722;
t1996 = -t2023 * t2724 + t2728 * t2966;
t2004 = -t2024 * t2722 + t2059 * t2726;
t2967 = t1996 * t2738 + t2004 * t2733;
t2186 = -t2263 * t2736 + t2264 * t2731;
t2949 = t2187 * t2732 - t2339 * t2737;
t2103 = t2186 * t2727 + t2723 * t2949;
t2104 = -t2186 * t2723 + t2727 * t2949;
t2156 = t2187 * t2737 + t2339 * t2732;
t2959 = t2104 * t2726 + t2156 * t2722;
t2043 = -t2103 * t2724 + t2728 * t2959;
t2071 = -t2104 * t2722 + t2156 * t2726;
t2965 = t2043 * t2738 + t2071 * t2733;
t2396 = (-qJD(6) + t2595) * t2556 + t2986;
t2888 = -t2501 * t2735 - t2572 * t2730;
t2428 = -qJD(6) * t2554 - t2888;
t2513 = t2595 * t2554;
t2398 = t2428 + t2513;
t2321 = t2396 * t2735 + t2398 * t2730;
t2456 = t2552 + t2553;
t2280 = t2321 * t2731 + t2456 * t2736;
t2281 = t2321 * t2736 - t2456 * t2731;
t2319 = t2396 * t2730 - t2398 * t2735;
t2934 = t2281 * t2732 - t2319 * t2737;
t2165 = t2280 * t2727 + t2723 * t2934;
t2166 = -t2280 * t2723 + t2727 * t2934;
t2210 = t2281 * t2737 + t2319 * t2732;
t2953 = t2166 * t2726 + t2210 * t2722;
t2077 = -t2165 * t2724 + t2728 * t2953;
t2123 = -t2166 * t2722 + t2210 * t2726;
t2964 = t2077 * t2738 + t2123 * t2733;
t2427 = -qJD(6) * t2556 + t2986;
t2514 = t2595 * t2556;
t2395 = t2427 - t2514;
t2397 = t2428 - t2513;
t2320 = t2395 * t2735 - t2397 * t2730;
t2491 = t2553 - t2552;
t2291 = t2320 * t2731 - t2491 * t2736;
t2292 = t2320 * t2736 + t2491 * t2731;
t2318 = t2395 * t2730 + t2397 * t2735;
t2931 = t2292 * t2732 - t2318 * t2737;
t2170 = t2291 * t2727 + t2723 * t2931;
t2171 = -t2291 * t2723 + t2727 * t2931;
t2217 = t2292 * t2737 + t2318 * t2732;
t2952 = t2171 * t2726 + t2217 * t2722;
t2079 = -t2170 * t2724 + t2728 * t2952;
t2128 = -t2171 * t2722 + t2217 * t2726;
t2963 = t2079 * t2738 + t2128 * t2733;
t2475 = -t2594 - t2552;
t2370 = t2475 * t2735 - t3096;
t2300 = t2370 * t2731 + t2395 * t2736;
t2301 = t2370 * t2736 - t2395 * t2731;
t2369 = t2475 * t2730 + t3094;
t2928 = t2301 * t2732 - t2369 * t2737;
t2190 = t2300 * t2727 + t2723 * t2928;
t2191 = -t2300 * t2723 + t2727 * t2928;
t2244 = t2301 * t2737 + t2369 * t2732;
t2947 = t2191 * t2726 + t2244 * t2722;
t2097 = -t2190 * t2724 + t2728 * t2947;
t2142 = -t2191 * t2722 + t2244 * t2726;
t2961 = t2097 * t2738 + t2142 * t2733;
t2486 = -t2553 - t2594;
t2373 = -t2486 * t2730 - t3048;
t2399 = (qJD(6) + t2595) * t2554 + t2888;
t2303 = t2373 * t2731 + t2399 * t2736;
t2304 = t2373 * t2736 - t2399 * t2731;
t2372 = t2486 * t2735 - t3049;
t2927 = t2304 * t2732 - t2372 * t2737;
t2194 = t2303 * t2727 + t2723 * t2927;
t2195 = -t2303 * t2723 + t2727 * t2927;
t2249 = t2304 * t2737 + t2372 * t2732;
t2946 = t2195 * t2726 + t2249 * t2722;
t2102 = -t2194 * t2724 + t2728 * t2946;
t2148 = -t2195 * t2722 + t2249 * t2726;
t2960 = t2102 * t2738 + t2148 * t2733;
t2512 = -t2553 + t2594;
t2387 = -t2512 * t2730 + t3094;
t2314 = t2387 * t2731 - t2398 * t2736;
t2316 = t2387 * t2736 + t2398 * t2731;
t2385 = t2512 * t2735 + t3096;
t2925 = t2316 * t2732 - t2385 * t2737;
t2200 = t2314 * t2727 + t2723 * t2925;
t2202 = -t2314 * t2723 + t2727 * t2925;
t2259 = t2316 * t2737 + t2385 * t2732;
t2945 = t2202 * t2726 + t2259 * t2722;
t2109 = -t2200 * t2724 + t2728 * t2945;
t2151 = -t2202 * t2722 + t2259 * t2726;
t2958 = t2109 * t2738 + t2151 * t2733;
t2511 = t2552 - t2594;
t2388 = t2511 * t2735 - t3049;
t2394 = -t2427 - t2514;
t2315 = t2388 * t2731 + t2394 * t2736;
t2317 = t2388 * t2736 - t2394 * t2731;
t2386 = t2511 * t2730 + t3048;
t2924 = t2317 * t2732 - t2386 * t2737;
t2201 = t2315 * t2727 + t2723 * t2924;
t2203 = -t2315 * t2723 + t2727 * t2924;
t2260 = t2317 * t2737 + t2386 * t2732;
t2944 = t2203 * t2726 + t2260 * t2722;
t2110 = -t2201 * t2724 + t2728 * t2944;
t2152 = -t2203 * t2722 + t2260 * t2726;
t2957 = t2110 * t2738 + t2152 * t2733;
t2391 = -t2427 * t2730 + t2554 * t3039;
t2351 = t2391 * t2731 + t2996;
t2353 = t2391 * t2736 - t2997;
t2390 = -t2427 * t2735 - t2554 * t3040;
t2914 = t2353 * t2732 + t2390 * t2737;
t2232 = t2351 * t2727 + t2723 * t2914;
t2234 = -t2351 * t2723 + t2727 * t2914;
t2289 = t2353 * t2737 - t2390 * t2732;
t2939 = t2234 * t2726 + t2289 * t2722;
t2135 = -t2232 * t2724 + t2728 * t2939;
t2181 = -t2234 * t2722 + t2289 * t2726;
t2956 = t2135 * t2738 + t2181 * t2733;
t2393 = t2428 * t2735 - t2556 * t3040;
t2352 = t2393 * t2731 - t2996;
t2354 = t2393 * t2736 + t2997;
t2392 = t2428 * t2730 + t2556 * t3039;
t2913 = t2354 * t2732 - t2392 * t2737;
t2233 = t2352 * t2727 + t2723 * t2913;
t2235 = -t2352 * t2723 + t2727 * t2913;
t2290 = t2354 * t2737 + t2392 * t2732;
t2938 = t2235 * t2726 + t2290 * t2722;
t2136 = -t2233 * t2724 + t2728 * t2938;
t2182 = -t2235 * t2722 + t2290 * t2726;
t2955 = t2136 * t2738 + t2182 * t2733;
t2912 = -t2360 * t2737 + t2361 * t2732;
t2241 = -t2409 * t2727 + t2723 * t2912;
t2242 = t2409 * t2723 + t2727 * t2912;
t2279 = t2360 * t2732 + t2361 * t2737;
t2937 = t2242 * t2726 + t2279 * t2722;
t2141 = -t2241 * t2724 + t2728 * t2937;
t2183 = -t2242 * t2722 + t2279 * t2726;
t2954 = t2141 * t2738 + t2183 * t2733;
t2440 = (-t2554 * t2735 + t2556 * t2730) * t2595;
t2401 = t2440 * t2731 - t2499 * t2736;
t2402 = t2440 * t2736 + t2499 * t2731;
t2439 = (-t2554 * t2730 - t2556 * t2735) * t2595;
t2905 = t2402 * t2732 - t2439 * t2737;
t2282 = t2401 * t2727 + t2723 * t2905;
t2283 = -t2401 * t2723 + t2727 * t2905;
t2341 = t2402 * t2737 + t2439 * t2732;
t2933 = t2283 * t2726 + t2341 * t2722;
t2173 = -t2282 * t2724 + t2728 * t2933;
t2221 = -t2283 * t2722 + t2341 * t2726;
t2951 = t2173 * t2738 + t2221 * t2733;
t2468 = t2600 * t2624 + t2985;
t2470 = t2501 + t2564;
t2381 = t2468 * t2731 - t2470 * t2736;
t2383 = t2468 * t2736 + t2470 * t2731;
t2502 = t2596 + t2597;
t2906 = t2383 * t2732 + t2502 * t2737;
t2285 = t2381 * t2727 + t2723 * t2906;
t2286 = -t2381 * t2723 + t2727 * t2906;
t2348 = t2383 * t2737 - t2502 * t2732;
t2932 = t2286 * t2726 + t2348 * t2722;
t2175 = -t2285 * t2724 + t2728 * t2932;
t2228 = -t2286 * t2722 + t2348 * t2726;
t2950 = t2175 * t2738 + t2228 * t2733;
t2380 = t2469 * t2736 - t2731 * t3090;
t2382 = -t2469 * t2731 - t2736 * t3090;
t2534 = t2597 - t2596;
t2907 = t2382 * t2732 - t2534 * t2737;
t2296 = t2380 * t2727 + t2723 * t2907;
t2297 = -t2380 * t2723 + t2727 * t2907;
t2366 = t2382 * t2737 + t2534 * t2732;
t2929 = t2297 * t2726 + t2366 * t2722;
t2189 = -t2296 * t2724 + t2728 * t2929;
t2238 = -t2297 * t2722 + t2366 * t2726;
t2948 = t2189 * t2738 + t2238 * t2733;
t2515 = -t2845 - t2596;
t2431 = t2515 * t2731 + t3093;
t2432 = t2515 * t2736 - t3095;
t2899 = t2432 * t2732 - t2737 * t3090;
t2324 = t2431 * t2727 + t2723 * t2899;
t2325 = -t2431 * t2723 + t2727 * t2899;
t2368 = t2432 * t2737 + t2732 * t3090;
t2922 = t2325 * t2726 + t2368 * t2722;
t2205 = -t2324 * t2724 + t2728 * t2922;
t2254 = -t2325 * t2722 + t2368 * t2726;
t2943 = t2205 * t2738 + t2254 * t2733;
t2532 = -t2597 - t2845;
t2435 = t2532 * t2736 - t3047;
t2436 = -t2532 * t2731 - t3046;
t2471 = (0.2e1 * qJD(5) + t2624) * t2598 + t2873;
t2897 = t2436 * t2732 + t2471 * t2737;
t2328 = t2435 * t2727 + t2723 * t2897;
t2329 = -t2435 * t2723 + t2727 * t2897;
t2371 = t2436 * t2737 - t2471 * t2732;
t2921 = t2329 * t2726 + t2371 * t2722;
t2207 = -t2328 * t2724 + t2728 * t2921;
t2261 = -t2329 * t2722 + t2371 * t2726;
t2942 = t2207 * t2738 + t2261 * t2733;
t2562 = -t2597 + t2845;
t2448 = t2562 * t2736 + t3095;
t2450 = -t2562 * t2731 + t3093;
t2893 = t2450 * t2732 - t2470 * t2737;
t2332 = t2448 * t2727 + t2723 * t2893;
t2334 = -t2448 * t2723 + t2727 * t2893;
t2378 = t2450 * t2737 + t2470 * t2732;
t2919 = t2334 * t2726 + t2378 * t2722;
t2213 = -t2332 * t2724 + t2728 * t2919;
t2272 = -t2334 * t2722 + t2378 * t2726;
t2941 = t2213 * t2738 + t2272 * t2733;
t2561 = t2596 - t2845;
t2449 = t2561 * t2731 + t3046;
t2451 = t2561 * t2736 - t3047;
t2466 = -t2565 + t2840;
t2892 = t2451 * t2732 + t2466 * t2737;
t2333 = t2449 * t2727 + t2723 * t2892;
t2335 = -t2449 * t2723 + t2727 * t2892;
t2379 = t2451 * t2737 - t2466 * t2732;
t2918 = t2335 * t2726 + t2379 * t2722;
t2214 = -t2333 * t2724 + t2728 * t2918;
t2273 = -t2335 * t2722 + t2379 * t2726;
t2940 = t2214 * t2738 + t2273 * t2733;
t2783 = t2731 * t2564;
t2462 = -t2736 * t2840 + t2783;
t2781 = t2736 * t2564;
t2463 = t2731 * t2840 + t2781;
t2842 = t2463 * t2732 + t2994;
t2362 = t2462 * t2727 + t2723 * t2842;
t2364 = -t2462 * t2723 + t2727 * t2842;
t2418 = t2463 * t2737 - t2995;
t2911 = t2364 * t2726 + t2418 * t2722;
t2247 = -t2362 * t2724 + t2728 * t2911;
t2310 = -t2364 * t2722 + t2418 * t2726;
t2936 = t2247 * t2738 + t2310 * t2733;
t2780 = t2736 * t2565;
t2464 = t2731 * t2501 + t2780;
t2782 = t2731 * t2565;
t2465 = t2736 * t2501 - t2782;
t2841 = t2465 * t2732 - t2994;
t2363 = t2464 * t2727 + t2723 * t2841;
t2365 = -t2464 * t2723 + t2727 * t2841;
t2419 = t2465 * t2737 + t2995;
t2910 = t2365 * t2726 + t2419 * t2722;
t2248 = -t2363 * t2724 + t2728 * t2910;
t2311 = -t2365 * t2722 + t2419 * t2726;
t2935 = t2248 * t2738 + t2311 * t2733;
t2495 = -t2783 - t2780;
t2496 = -t2781 + t2782;
t2889 = t2496 * t2732 - t2572 * t2737;
t2405 = t2495 * t2727 + t2723 * t2889;
t2406 = -t2495 * t2723 + t2727 * t2889;
t2461 = t2496 * t2737 + t2572 * t2732;
t2904 = t2406 * t2726 + t2461 * t2722;
t2295 = -t2405 * t2724 + t2728 * t2904;
t2347 = -t2406 * t2722 + t2461 * t2726;
t2930 = t2295 * t2738 + t2347 * t2733;
t2543 = -t2622 - t2623;
t2531 = t2603 + t2573;
t2754 = t2843 - t2757;
t2884 = -t2531 * t2737 + t2732 * t2754;
t2416 = t2543 * t2727 + t2723 * t2884;
t2417 = -t2543 * t2723 + t2727 * t2884;
t2455 = t2531 * t2732 + t2737 * t2754;
t2902 = t2417 * t2726 + t2455 * t2722;
t2309 = -t2416 * t2724 + t2728 * t2902;
t2355 = -t2417 * t2722 + t2455 * t2726;
t2926 = t2309 * t2738 + t2355 * t2733;
t2583 = t2623 - t2622;
t2885 = -t2526 * t2732 + t2737 * t3092;
t2429 = t2583 * t2727 + t2723 * t2885;
t2430 = -t2583 * t2723 + t2727 * t2885;
t2454 = -t2526 * t2737 - t2732 * t3092;
t2900 = t2430 * t2726 + t2454 * t2722;
t2323 = -t2429 * t2724 + t2728 * t2900;
t2367 = -t2430 * t2722 + t2454 * t2726;
t2923 = t2323 * t2738 + t2367 * t2733;
t2877 = t2567 * t2732 + t3085;
t2433 = t2526 * t2727 + t2723 * t2877;
t2434 = -t2526 * t2723 + t2727 * t2877;
t2898 = t2434 * t2726 + t2490 * t2722;
t2331 = -t2433 * t2724 + t2728 * t2898;
t2384 = -t2434 * t2722 + t2490 * t2726;
t2920 = t2331 * t2738 + t2384 * t2733;
t2880 = t2577 * t2737 + t3045;
t2437 = t2723 * t2880 + t2727 * t3092;
t2438 = -t2723 * t3092 + t2727 * t2880;
t2896 = t2438 * t2726 + t2497 * t2722;
t2337 = -t2437 * t2724 + t2728 * t2896;
t2400 = -t2438 * t2722 + t2497 * t2726;
t2917 = t2337 * t2738 + t2400 * t2733;
t2602 = -t2623 + t2968;
t2878 = t2602 * t2737 + t3086;
t2443 = t2531 * t2727 + t2723 * t2878;
t2445 = -t2531 * t2723 + t2727 * t2878;
t2509 = -t2602 * t2732 + t3085;
t2895 = t2445 * t2726 + t2509 * t2722;
t2344 = -t2443 * t2724 + t2728 * t2895;
t2407 = -t2445 * t2722 + t2509 * t2726;
t2916 = t2344 * t2738 + t2407 * t2733;
t2601 = t2622 - t2968;
t2879 = t2601 * t2732 - t3044;
t2444 = t2723 * t2879 + t2727 * t2754;
t2446 = -t2723 * t2754 + t2727 * t2879;
t2510 = t2601 * t2737 + t3045;
t2894 = t2446 * t2726 + t2510 * t2722;
t2345 = -t2444 * t2724 + t2728 * t2894;
t2408 = -t2446 * t2722 + t2510 * t2726;
t2915 = t2345 * t2738 + t2408 * t2733;
t2756 = t2737 * t2757;
t2831 = t2732 * t2603;
t2482 = -t2626 * t3014 + (-t2756 + t2831) * t2723;
t2779 = t2727 * t2831;
t2483 = t2626 * t3018 - t2727 * t2756 + t2779;
t2829 = t2737 * t2603;
t2522 = t2732 * t2757 + t2829;
t2891 = t2483 * t2726 + t2522 * t2722;
t2376 = -t2482 * t2724 + t2728 * t2891;
t2425 = -t2483 * t2722 + t2522 * t2726;
t2909 = t2376 * t2738 + t2425 * t2733;
t2844 = t2737 * t2977;
t2484 = t2723 * t3043 + (t2723 * t2844 + t3014) * t2626;
t2485 = t2727 * t3043 + (t2727 * t2844 - t3018) * t2626;
t2830 = t2732 * t2843;
t2523 = t2737 * t2573 - t2830;
t2890 = t2485 * t2726 + t2523 * t2722;
t2377 = -t2484 * t2724 + t2728 * t2890;
t2426 = -t2485 * t2722 + t2523 * t2726;
t2908 = t2377 * t2738 + t2426 * t2733;
t2828 = t2737 * t2843;
t2518 = t2727 * t2633 + (-t2831 - t2828) * t2723;
t2519 = -t2723 * t2633 - t2727 * t2828 - t2779;
t2536 = -t2829 + t2830;
t2887 = t2519 * t2726 + t2536 * t2722;
t2411 = -t2518 * t2724 + t2728 * t2887;
t2474 = -t2519 * t2722 + t2536 * t2726;
t2903 = t2411 * t2738 + t2474 * t2733;
t2775 = t2729 * t2777;
t2751 = t2728 * (-g(3) * t3015 + t2738 * t2775 + t2971) + t2724 * (-pkin(2) * t2972 - t2685);
t2755 = t2728 * (-qJD(2) * t2982 + t2715 * t2827) + t2724 * (-qJD(2) * t2981 - t2827 * t3000);
t2776 = t2787 - t3065;
t2769 = t2738 * t2776 - t2716;
t2762 = -pkin(2) * t2998 + t2769 - t3064;
t2788 = -t2719 * t3003 + t2725 * t3068;
t2853 = t2728 * (t2719 * t3073 + pkin(1));
t2524 = t2722 * t2762 + 0.2e1 * t3056 - t2751 * t2726 + (-t2726 * t2755 + t2765) * qJ(3) + (t2722 * t2833 - t3076 * t2726 + ((t2722 * t2788 - t2726 * t2853) * qJD(1) + (-pkin(2) * t2724 * t2726 + t2722 * t3060) * t3023) * qJD(1)) * t2733;
t2525 = t2726 * t2762 + t3006 + t2751 * t2722 + (t2722 * t2755 + t2766) * qJ(3) + (t2726 * t2833 + t3076 * t2722 + ((t2722 * t2853 + t2726 * t2788) * qJD(1) + (pkin(2) * t3019 + t2726 * t3060) * t3023) * qJD(1)) * t2733;
t2886 = -t2524 * t2726 + t2525 * t2722;
t2421 = t2574 * t2724 + t2728 * t2886;
t2453 = t2524 * t2722 + t2525 * t2726;
t2901 = t2421 * t2738 + t2453 * t2733;
t2618 = -t2656 + t2761;
t2768 = t2774 + t3031;
t2868 = -t2618 * t2726 + t2722 * t2768;
t2538 = -t2621 * t2724 + t2728 * t2868;
t2579 = t2618 * t2722 + t2726 * t2768;
t2883 = t2538 * t2738 + t2579 * t2733;
t2864 = t2634 * t2722 + t3087;
t2542 = -t2613 * t2724 + t2728 * t2864;
t2882 = t2542 * t2738 + t2587 * t2733;
t2648 = t2672 - t2671;
t2869 = -t2613 * t2722 + t2726 * t3082;
t2545 = -t2648 * t2724 + t2728 * t2869;
t2578 = -t2613 * t2726 - t2722 * t3082;
t2881 = t2545 * t2738 + t2578 * t2733;
t2867 = -t2726 * t3081 + t3037;
t2550 = -t2724 * t3082 + t2728 * t2867;
t2876 = t2550 * t2738 + t2593 * t2733;
t2655 = -t2672 + t2688;
t2865 = t2655 * t2726 + t3088;
t2559 = -t2618 * t2724 + t2728 * t2865;
t2604 = -t2655 * t2722 + t3087;
t2875 = t2559 * t2738 + t2604 * t2733;
t2654 = t2671 - t2688;
t2866 = t2654 * t2722 - t3036;
t2560 = -t2724 * t2768 + t2728 * t2866;
t2605 = t2654 * t2726 + t3037;
t2874 = t2560 * t2738 + t2605 * t2733;
t2589 = t2728 * t3077 - t2991;
t2611 = -t2673 * t3029 - t2722 * t2774;
t2872 = t2589 * t2738 + t2611 * t2733;
t2591 = t2728 * t3079 + t2991;
t2612 = t2726 ^ 2 * t2786 + (t2766 - t3031) * t2722;
t2871 = t2591 * t2738 + t2612 * t2733;
t2836 = t2689 * (t2673 * t2722 - t2674 * t2726);
t2607 = -t2724 * t2773 + t2728 * t2836;
t2610 = (t2673 * t2726 + t2674 * t2722) * t2689;
t2870 = t2607 * t2738 + t2610 * t2733;
t2661 = t2733 * t2776 + (t2725 * g(3) - t2775) * t2738;
t2662 = t2733 * t2775 + t2769;
t2863 = -t2661 * t2738 + t2662 * t2733;
t2627 = t2661 * t2733 + t2662 * t2738;
t2699 = t2715 * t3000;
t2679 = t2699 + t2786;
t2698 = t2715 * t3001;
t2682 = -t2698 + t2972;
t2861 = t2679 * t2738 + t2682 * t2733;
t2680 = -t2699 + t2786;
t2681 = t2698 + t2972;
t2860 = -t2680 * t2738 + t2681 * t2733;
t2859 = t2687 * t2738 - t3025;
t2693 = t2714 - t2999;
t2858 = t2693 * t2738 + t3027;
t2857 = t2695 * t2733 + t3026;
t2694 = -t2714 + t2998;
t2856 = t2694 * t2733 + t3024;
t2855 = t2711 * t2739 - t2734 * t2712;
t2854 = t2725 * t2983;
t2835 = pkin(5) * t2395 + pkin(13) * t2370 - t3054;
t2834 = pkin(5) * t2399 + pkin(13) * t2373 + t3055;
t2010 = pkin(12) * t2088 + (-pkin(13) * t2731 + t3004) * t2114;
t2027 = -pkin(12) * t2087 + (-pkin(13) * t2736 + t3070) * t2114;
t2052 = -pkin(4) * t2087 - t2979;
t2809 = pkin(11) * t2059 + t2027 * t2732 + t2052 * t2737;
t1974 = pkin(3) * t2024 + t2010 * t2727 + t2723 * t2809;
t1995 = t2023 * t2728 + t2724 * t2966;
t1975 = -pkin(3) * t2023 - t2010 * t2723 + t2727 * t2809;
t1981 = t2027 * t2737 - t2052 * t2732 + (-t2023 * t2723 - t2024 * t2727) * pkin(11);
t2801 = qJ(3) * t2004 + t1975 * t2726 + t1981 * t2722;
t1956 = -pkin(2) * t1995 - t1974 * t2724 + t2728 * t2801;
t1961 = -t1975 * t2722 + t1981 * t2726 + (-t1995 * t2724 - t1996 * t2728) * qJ(3);
t1978 = -t1996 * t2733 + t2004 * t2738;
t2826 = pkin(10) * t1978 + t1956 * t2738 + t1961 * t2733;
t2098 = -pkin(13) * t2319 - t2114;
t2072 = pkin(12) * t2281 + t2098 * t2731 + t2319 * t3004;
t2075 = -pkin(12) * t2280 + t2098 * t2736 + t2319 * t3070;
t2784 = pkin(5) * t2456 + pkin(13) * t2321 + t2115;
t2080 = -pkin(4) * t2280 - t2784;
t2808 = pkin(11) * t2210 + t2075 * t2732 + t2080 * t2737;
t2005 = pkin(3) * t2166 + t2072 * t2727 + t2723 * t2808;
t2076 = t2165 * t2728 + t2724 * t2953;
t2006 = -pkin(3) * t2165 - t2072 * t2723 + t2727 * t2808;
t2013 = t2075 * t2737 - t2080 * t2732 + (-t2165 * t2723 - t2166 * t2727) * pkin(11);
t2800 = qJ(3) * t2123 + t2006 * t2726 + t2013 * t2722;
t1973 = -pkin(2) * t2076 - t2005 * t2724 + t2728 * t2800;
t1982 = -t2006 * t2722 + t2013 * t2726 + (-t2076 * t2724 - t2077 * t2728) * qJ(3);
t2056 = -t2077 * t2733 + t2123 * t2738;
t2825 = pkin(10) * t2056 + t1973 * t2738 + t1982 * t2733;
t2157 = -pkin(4) * t2339 + pkin(12) * t2187;
t2778 = pkin(11) * t2156 + (-pkin(12) * t2732 - t3071) * t2186;
t2030 = pkin(3) * t2104 + t2157 * t2727 + t2723 * t2778;
t2042 = t2103 * t2728 + t2724 * t2959;
t2031 = -pkin(3) * t2103 - t2157 * t2723 + t2727 * t2778;
t2032 = (-pkin(12) * t2737 + t3072) * t2186 + (-t2103 * t2723 - t2104 * t2727) * pkin(11);
t2797 = qJ(3) * t2071 + t2031 * t2726 + t2032 * t2722;
t1980 = -pkin(2) * t2042 - t2030 * t2724 + t2728 * t2797;
t1985 = -t2031 * t2722 + t2032 * t2726 + (-t2042 * t2724 - t2043 * t2728) * qJ(3);
t2009 = -t2043 * t2733 + t2071 * t2738;
t2824 = pkin(10) * t2009 + t1980 * t2738 + t1985 * t2733;
t2158 = -pkin(5) * t2369 + t2177;
t2208 = -pkin(13) * t2369 + t3055;
t2089 = -pkin(4) * t2369 + pkin(12) * t2301 + t2158 * t2736 + t2208 * t2731;
t2099 = -pkin(12) * t2300 - t2158 * t2731 + t2208 * t2736;
t2153 = -pkin(4) * t2300 - t2835;
t2807 = pkin(11) * t2244 + t2099 * t2732 + t2153 * t2737;
t2016 = pkin(3) * t2191 + t2089 * t2727 + t2723 * t2807;
t2096 = t2190 * t2728 + t2724 * t2947;
t2017 = -pkin(3) * t2190 - t2089 * t2723 + t2727 * t2807;
t2050 = t2099 * t2737 - t2153 * t2732 + (-t2190 * t2723 - t2191 * t2727) * pkin(11);
t2799 = qJ(3) * t2142 + t2017 * t2726 + t2050 * t2722;
t1984 = -pkin(2) * t2096 - t2016 * t2724 + t2728 * t2799;
t1998 = -t2017 * t2722 + t2050 * t2726 + (-t2096 * t2724 - t2097 * t2728) * qJ(3);
t2067 = -t2097 * t2733 + t2142 * t2738;
t2823 = pkin(10) * t2067 + t1984 * t2738 + t1998 * t2733;
t2162 = -pkin(5) * t2372 + t2178;
t2209 = -pkin(13) * t2372 + t3054;
t2095 = -pkin(4) * t2372 + pkin(12) * t2304 + t2162 * t2736 + t2209 * t2731;
t2100 = -pkin(12) * t2303 - t2162 * t2731 + t2209 * t2736;
t2155 = -pkin(4) * t2303 - t2834;
t2806 = pkin(11) * t2249 + t2100 * t2732 + t2155 * t2737;
t2020 = pkin(3) * t2195 + t2095 * t2727 + t2723 * t2806;
t2101 = t2194 * t2728 + t2724 * t2946;
t2021 = -pkin(3) * t2194 - t2095 * t2723 + t2727 * t2806;
t2051 = t2100 * t2737 - t2155 * t2732 + (-t2194 * t2723 - t2195 * t2727) * pkin(11);
t2798 = qJ(3) * t2148 + t2021 * t2726 + t2051 * t2722;
t1987 = -pkin(2) * t2101 - t2020 * t2724 + t2728 * t2798;
t1999 = -t2021 * t2722 + t2051 * t2726 + (-t2101 * t2724 - t2102 * t2728) * qJ(3);
t2068 = -t2102 * t2733 + t2148 * t2738;
t2822 = pkin(10) * t2068 + t1987 * t2738 + t1999 * t2733;
t2161 = pkin(4) * t2502 + pkin(12) * t2383 + t2187;
t2167 = -pkin(12) * t2381 - t2186;
t2785 = pkin(11) * t2348 + t2167 * t2732 - t2381 * t3071;
t2073 = pkin(3) * t2286 + t2161 * t2727 + t2723 * t2785;
t2174 = t2285 * t2728 + t2724 * t2932;
t2074 = -pkin(3) * t2285 - t2161 * t2723 + t2727 * t2785;
t2111 = t2381 * t3072 + t2167 * t2737 + (-t2285 * t2723 - t2286 * t2727) * pkin(11);
t2796 = qJ(3) * t2228 + t2074 * t2726 + t2111 * t2722;
t2008 = -pkin(2) * t2174 - t2073 * t2724 + t2728 * t2796;
t2022 = -t2074 * t2722 + t2111 * t2726 + (-t2174 * t2724 - t2175 * t2728) * qJ(3);
t2132 = -t2175 * t2733 + t2228 * t2738;
t2821 = pkin(10) * t2132 + t2008 * t2738 + t2022 * t2733;
t2271 = -pkin(4) * t3090 + pkin(12) * t2432 - t3052;
t2236 = -pkin(4) * t2431 + t2263;
t2298 = -pkin(12) * t2431 + t3053;
t2805 = pkin(11) * t2368 + t2236 * t2737 + t2298 * t2732;
t2117 = pkin(3) * t2325 + t2271 * t2727 + t2723 * t2805;
t2204 = t2324 * t2728 + t2724 * t2922;
t2118 = -pkin(3) * t2324 - t2271 * t2723 + t2727 * t2805;
t2137 = -t2236 * t2732 + t2298 * t2737 + (-t2324 * t2723 - t2325 * t2727) * pkin(11);
t2795 = qJ(3) * t2254 + t2118 * t2726 + t2137 * t2722;
t2026 = -pkin(2) * t2204 - t2117 * t2724 + t2728 * t2795;
t2053 = -t2118 * t2722 + t2137 * t2726 + (-t2204 * t2724 - t2205 * t2728) * qJ(3);
t2150 = -t2205 * t2733 + t2254 * t2738;
t2820 = pkin(10) * t2150 + t2026 * t2738 + t2053 * t2733;
t2274 = pkin(4) * t2471 + pkin(12) * t2436 + t3053;
t2237 = -pkin(4) * t2435 + t2264;
t2299 = -pkin(12) * t2435 + t3052;
t2804 = pkin(11) * t2371 + t2237 * t2737 + t2299 * t2732;
t2124 = pkin(3) * t2329 + t2274 * t2727 + t2723 * t2804;
t2206 = t2328 * t2728 + t2724 * t2921;
t2125 = -pkin(3) * t2328 - t2274 * t2723 + t2727 * t2804;
t2139 = -t2237 * t2732 + t2299 * t2737 + (-t2328 * t2723 - t2329 * t2727) * pkin(11);
t2794 = qJ(3) * t2261 + t2125 * t2726 + t2139 * t2722;
t2029 = -pkin(2) * t2206 - t2124 * t2724 + t2728 * t2794;
t2055 = -t2125 * t2722 + t2139 * t2726 + (-t2206 * t2724 - t2207 * t2728) * qJ(3);
t2154 = -t2207 * t2733 + t2261 * t2738;
t2819 = pkin(10) * t2154 + t2029 * t2738 + t2055 * t2733;
t2140 = t2241 * t2728 + t2724 * t2937;
t2185 = pkin(3) * t2242 + t2279 * t3067;
t2168 = (-t2241 * t2723 - t2242 * t2727) * pkin(11);
t2184 = -pkin(3) * t2241 + t2279 * t3066;
t2793 = qJ(3) * t2183 + t2168 * t2722 + t2184 * t2726;
t2049 = -pkin(2) * t2140 - t2185 * t2724 + t2728 * t2793;
t2054 = t2168 * t2726 - t2184 * t2722 + (-t2140 * t2724 - t2141 * t2728) * qJ(3);
t2092 = -t2141 * t2733 + t2183 * t2738;
t2818 = pkin(10) * t2092 + t2049 * t2738 + t2054 * t2733;
t2803 = pkin(11) * t2455 + t2279;
t2222 = pkin(3) * t2417 + t2723 * t2803;
t2308 = t2416 * t2728 + t2724 * t2902;
t2220 = (-t2416 * t2723 - t2417 * t2727) * pkin(11) - t2912;
t2223 = -pkin(3) * t2416 + t2727 * t2803;
t2792 = qJ(3) * t2355 + t2220 * t2722 + t2223 * t2726;
t2094 = -pkin(2) * t2308 - t2222 * t2724 + t2728 * t2792;
t2116 = t2220 * t2726 - t2223 * t2722 + (-t2308 * t2724 - t2309 * t2728) * qJ(3);
t2243 = -t2309 * t2733 + t2355 * t2738;
t2817 = pkin(10) * t2243 + t2094 * t2738 + t2116 * t2733;
t2251 = pkin(3) * t2434 - t2360 * t2727 + t2723 * t2974;
t2330 = t2433 * t2728 + t2724 * t2898;
t2252 = -pkin(3) * t2433 + t2360 * t2723 + t2727 * t2974;
t2302 = -t3051 + (-t2433 * t2723 - t2434 * t2727) * pkin(11);
t2791 = qJ(3) * t2384 + t2252 * t2726 + t2302 * t2722;
t2127 = -pkin(2) * t2330 - t2251 * t2724 + t2728 * t2791;
t2147 = -t2252 * t2722 + t2302 * t2726 + (-t2330 * t2724 - t2331 * t2728) * qJ(3);
t2275 = -t2331 * t2733 + t2384 * t2738;
t2816 = pkin(10) * t2275 + t2127 * t2738 + t2147 * t2733;
t2255 = pkin(3) * t2438 - t2361 * t2727 + t2723 * t2973;
t2336 = t2437 * t2728 + t2724 * t2896;
t2256 = -pkin(3) * t2437 + t2361 * t2723 + t2727 * t2973;
t2307 = -t3050 + (-t2437 * t2723 - t2438 * t2727) * pkin(11);
t2790 = qJ(3) * t2400 + t2256 * t2726 + t2307 * t2722;
t2130 = -pkin(2) * t2336 - t2255 * t2724 + t2728 * t2790;
t2149 = -t2256 * t2722 + t2307 * t2726 + (-t2336 * t2724 - t2337 * t2728) * qJ(3);
t2278 = -t2337 * t2733 + t2400 * t2738;
t2815 = pkin(10) * t2278 + t2130 * t2738 + t2149 * t2733;
t2420 = -t2574 * t2728 + t2724 * t2886;
t2346 = (-t2420 * t2724 - t2421 * t2728) * qJ(3);
t2357 = -t2421 * t2733 + t2453 * t2738;
t2358 = -pkin(2) * t2420 + t2453 * t3060;
t2814 = pkin(10) * t2357 + t2346 * t2733 + t2358 * t2738;
t2537 = t2621 * t2728 + t2724 * t2868;
t2389 = (-t2537 * t2724 - t2538 * t2728) * qJ(3) - t2886;
t2789 = qJ(3) * t2579 + t2453;
t2404 = -pkin(2) * t2537 + t2728 * t2789;
t2492 = -t2538 * t2733 + t2579 * t2738;
t2813 = pkin(10) * t2492 + t2389 * t2733 + t2404 * t2738;
t2541 = t2613 * t2728 + t2724 * t2864;
t2413 = -pkin(2) * t2541 + t2524 * t2724 + t2728 * t2970;
t2447 = -t3042 + (-t2541 * t2724 - t2542 * t2728) * qJ(3);
t2503 = -t2542 * t2733 + t2587 * t2738;
t2812 = pkin(10) * t2503 + t2413 * t2738 + t2447 * t2733;
t2549 = t2724 * t2867 + t2728 * t3082;
t2415 = -pkin(2) * t2549 + t2525 * t2724 + t2728 * t2969;
t2452 = -t3041 + (-t2549 * t2724 - t2550 * t2728) * qJ(3);
t2508 = -t2550 * t2733 + t2593 * t2738;
t2811 = pkin(10) * t2508 + t2415 * t2738 + t2452 * t2733;
t2650 = t2680 * t2733 + t2681 * t2738;
t2810 = pkin(10) * t2650 + t2627;
t2678 = (t3011 * t3057 + t3008) * t2725;
t2718 = t2725 * t2719;
t2708 = t2734 * qJDD(1) + t2739 * t3075;
t2704 = t2729 * t2983;
t2697 = t3010 * t3020;
t2696 = (t2720 - t2721) * t3020;
t2692 = -pkin(9) * t2708 + g(3) * t2739;
t2683 = t3010 * t3002;
t2677 = (-t2720 * t2715 * qJD(1) + t2738 * t2837) * t2725;
t2676 = -t2721 * t3002 - t2733 * t2972;
t2668 = t2694 * t2738 - t3025;
t2667 = -t2693 * t2733 + t3026;
t2660 = t2678 * t3013 + t2718 * t2989;
t2659 = (t3008 + (qJD(2) - t2987) * t3057) * t3089;
t2658 = (qJD(1) * t2987 * t3089 + t2725 * t2972) * t2738;
t2657 = (-t2718 * t3012 + (-t2713 + (-qJD(1) * t3021 + t3007) * t2725) * t2729) * t2738;
t2651 = -t2679 * t2733 + t2682 * t2738;
t2647 = t2682 * t2725 + t2729 * t2857;
t2646 = -t2681 * t2725 + t2729 * t2856;
t2645 = -t2680 * t2725 + t2729 * t2858;
t2644 = -t2682 * t2729 + t2725 * t2857;
t2643 = t2681 * t2729 + t2725 * t2856;
t2642 = t2680 * t2729 + t2725 * t2858;
t2640 = -t2678 * t2725 + t2729 * t2859;
t2639 = t2678 * t2729 + t2725 * t2859;
t2638 = -t2696 * t2725 + t2729 * t2861;
t2637 = t2697 * t2725 + t2729 * t2860;
t2636 = t2696 * t2729 + t2725 * t2861;
t2635 = -t2697 * t2729 + t2725 * t2860;
t2609 = t2685 * t2725 + t2729 * t2863;
t2608 = -t2685 * t2729 + t2725 * t2863;
t2606 = t2724 * t2836 + t2728 * t2773;
t2592 = -t3033 + (-t2644 * t2725 - t2647 * t2729) * pkin(10);
t2590 = t2724 * t3079 - t2990;
t2588 = t2724 * t3077 + t2990;
t2586 = -t3032 + (-t2639 * t2725 - t2640 * t2729) * pkin(10);
t2585 = -pkin(1) * t2644 + t2661 * t2725 + t2729 * t2975;
t2584 = pkin(1) * t2647 - t2661 * t2729 + t2725 * t2975;
t2581 = -pkin(1) * t2639 + t2662 * t2725 + t2729 * t2976;
t2580 = pkin(1) * t2640 - t2662 * t2729 + t2725 * t2976;
t2576 = pkin(1) * t2609 + t2627 * t3069;
t2575 = -pkin(1) * t2608 + t2627 * t3068;
t2569 = -pkin(1) * t2635 + t2729 * t2810;
t2568 = pkin(1) * t2637 + t2725 * t2810;
t2566 = -t2607 * t2733 + t2610 * t2738;
t2563 = (-t2608 * t2725 - t2609 * t2729) * pkin(10);
t2558 = t2724 * t2866 + t2728 * t2768;
t2557 = t2618 * t2728 + t2724 * t2865;
t2551 = (-t2635 * t2725 - t2637 * t2729) * pkin(10) - t2863;
t2544 = t2648 * t2728 + t2724 * t2869;
t2540 = -t2591 * t2733 + t2612 * t2738;
t2539 = -t2589 * t2733 + t2611 * t2738;
t2521 = -t2606 * t2725 + t2729 * t2870;
t2520 = t2606 * t2729 + t2725 * t2870;
t2517 = -t2560 * t2733 + t2605 * t2738;
t2516 = -t2559 * t2733 + t2604 * t2738;
t2507 = -t2590 * t2725 + t2729 * t2871;
t2506 = -t2588 * t2725 + t2729 * t2872;
t2505 = t2590 * t2729 + t2725 * t2871;
t2504 = t2588 * t2729 + t2725 * t2872;
t2498 = -t2545 * t2733 + t2578 * t2738;
t2479 = -t2558 * t2725 + t2729 * t2874;
t2478 = -t2557 * t2725 + t2729 * t2875;
t2477 = t2558 * t2729 + t2725 * t2874;
t2476 = t2557 * t2729 + t2725 * t2875;
t2473 = -t2549 * t2725 + t2729 * t2876;
t2472 = t2549 * t2729 + t2725 * t2876;
t2460 = -t2541 * t2725 + t2729 * t2882;
t2459 = t2541 * t2729 + t2725 * t2882;
t2458 = -t2544 * t2725 + t2729 * t2881;
t2457 = t2544 * t2729 + t2725 * t2881;
t2442 = -t2537 * t2725 + t2729 * t2883;
t2441 = t2537 * t2729 + t2725 * t2883;
t2414 = pkin(2) * t2550 - t2525 * t2728 + t2724 * t2969;
t2412 = pkin(2) * t2542 - t2524 * t2728 + t2724 * t2970;
t2410 = t2518 * t2728 + t2724 * t2887;
t2403 = pkin(2) * t2538 + t2724 * t2789;
t2375 = t2484 * t2728 + t2724 * t2890;
t2374 = t2482 * t2728 + t2724 * t2891;
t2359 = pkin(2) * t2421 + t2453 * t3061;
t2356 = -t2411 * t2733 + t2474 * t2738;
t2343 = t2444 * t2728 + t2724 * t2894;
t2342 = t2443 * t2728 + t2724 * t2895;
t2327 = -t2377 * t2733 + t2426 * t2738;
t2326 = -t2376 * t2733 + t2425 * t2738;
t2322 = t2429 * t2728 + t2724 * t2900;
t2313 = -t2420 * t2725 + t2729 * t2901;
t2312 = t2420 * t2729 + t2725 * t2901;
t2306 = -t2410 * t2725 + t2729 * t2903;
t2305 = t2410 * t2729 + t2725 * t2903;
t2294 = t2405 * t2728 + t2724 * t2904;
t2293 = -t2415 * t2733 + t2452 * t2738 + (-t2472 * t2725 - t2473 * t2729) * pkin(10);
t2288 = -t2345 * t2733 + t2408 * t2738;
t2287 = -t2344 * t2733 + t2407 * t2738;
t2284 = -t2413 * t2733 + t2447 * t2738 + (-t2459 * t2725 - t2460 * t2729) * pkin(10);
t2270 = -pkin(1) * t2472 - t2414 * t2725 + t2729 * t2811;
t2269 = pkin(1) * t2473 + t2414 * t2729 + t2725 * t2811;
t2268 = -t2375 * t2725 + t2729 * t2908;
t2267 = -t2374 * t2725 + t2729 * t2909;
t2266 = t2375 * t2729 + t2725 * t2908;
t2265 = t2374 * t2729 + t2725 * t2909;
t2258 = -pkin(1) * t2459 - t2412 * t2725 + t2729 * t2812;
t2257 = pkin(1) * t2460 + t2412 * t2729 + t2725 * t2812;
t2253 = t2389 * t2738 - t2404 * t2733 + (-t2441 * t2725 - t2442 * t2729) * pkin(10);
t2250 = -t2323 * t2733 + t2367 * t2738;
t2246 = t2363 * t2728 + t2724 * t2910;
t2245 = t2362 * t2728 + t2724 * t2911;
t2231 = -t2295 * t2733 + t2347 * t2738;
t2230 = -pkin(1) * t2441 - t2403 * t2725 + t2729 * t2813;
t2229 = pkin(1) * t2442 + t2403 * t2729 + t2725 * t2813;
t2227 = -t2343 * t2725 + t2729 * t2915;
t2226 = -t2342 * t2725 + t2729 * t2916;
t2225 = t2343 * t2729 + t2725 * t2915;
t2224 = t2342 * t2729 + t2725 * t2916;
t2219 = -t2336 * t2725 + t2729 * t2917;
t2218 = t2336 * t2729 + t2725 * t2917;
t2216 = -t2330 * t2725 + t2729 * t2920;
t2215 = t2330 * t2729 + t2725 * t2920;
t2212 = t2333 * t2728 + t2724 * t2918;
t2211 = t2332 * t2728 + t2724 * t2919;
t2199 = -t2322 * t2725 + t2729 * t2923;
t2198 = t2322 * t2729 + t2725 * t2923;
t2197 = -t2248 * t2733 + t2311 * t2738;
t2196 = -t2247 * t2733 + t2310 * t2738;
t2193 = -t2308 * t2725 + t2729 * t2926;
t2192 = t2308 * t2729 + t2725 * t2926;
t2188 = t2296 * t2728 + t2724 * t2929;
t2180 = -t2294 * t2725 + t2729 * t2930;
t2179 = t2294 * t2729 + t2725 * t2930;
t2172 = t2282 * t2728 + t2724 * t2933;
t2169 = t2346 * t2738 - t2358 * t2733 + (-t2312 * t2725 - t2313 * t2729) * pkin(10);
t2164 = -t2214 * t2733 + t2273 * t2738;
t2163 = -t2213 * t2733 + t2272 * t2738;
t2160 = -pkin(1) * t2312 - t2359 * t2725 + t2729 * t2814;
t2159 = pkin(1) * t2313 + t2359 * t2729 + t2725 * t2814;
t2146 = -t2246 * t2725 + t2729 * t2935;
t2145 = -t2245 * t2725 + t2729 * t2936;
t2144 = t2246 * t2729 + t2725 * t2935;
t2143 = t2245 * t2729 + t2725 * t2936;
t2138 = -t2189 * t2733 + t2238 * t2738;
t2134 = t2233 * t2728 + t2724 * t2938;
t2133 = t2232 * t2728 + t2724 * t2939;
t2131 = -t2173 * t2733 + t2221 * t2738;
t2129 = pkin(2) * t2337 + t2255 * t2728 + t2724 * t2790;
t2126 = pkin(2) * t2331 + t2251 * t2728 + t2724 * t2791;
t2122 = -t2212 * t2725 + t2729 * t2940;
t2121 = -t2211 * t2725 + t2729 * t2941;
t2120 = t2212 * t2729 + t2725 * t2940;
t2119 = t2211 * t2729 + t2725 * t2941;
t2113 = -t2206 * t2725 + t2729 * t2942;
t2112 = t2206 * t2729 + t2725 * t2942;
t2108 = t2201 * t2728 + t2724 * t2944;
t2107 = t2200 * t2728 + t2724 * t2945;
t2106 = -t2204 * t2725 + t2729 * t2943;
t2105 = t2204 * t2729 + t2725 * t2943;
t2093 = pkin(2) * t2309 + t2222 * t2728 + t2724 * t2792;
t2091 = -t2188 * t2725 + t2729 * t2948;
t2090 = t2188 * t2729 + t2725 * t2948;
t2086 = -t2136 * t2733 + t2182 * t2738;
t2085 = -t2135 * t2733 + t2181 * t2738;
t2084 = -t2174 * t2725 + t2729 * t2950;
t2083 = t2174 * t2729 + t2725 * t2950;
t2082 = -t2172 * t2725 + t2729 * t2951;
t2081 = t2172 * t2729 + t2725 * t2951;
t2078 = t2170 * t2728 + t2724 * t2952;
t2070 = -t2110 * t2733 + t2152 * t2738;
t2069 = -t2109 * t2733 + t2151 * t2738;
t2066 = -t2140 * t2725 + t2729 * t2954;
t2065 = t2140 * t2729 + t2725 * t2954;
t2064 = -t2134 * t2725 + t2729 * t2955;
t2063 = -t2133 * t2725 + t2729 * t2956;
t2062 = t2134 * t2729 + t2725 * t2955;
t2061 = t2133 * t2729 + t2725 * t2956;
t2060 = -t2130 * t2733 + t2149 * t2738 + (-t2218 * t2725 - t2219 * t2729) * pkin(10);
t2058 = -t2127 * t2733 + t2147 * t2738 + (-t2215 * t2725 - t2216 * t2729) * pkin(10);
t2057 = -t2079 * t2733 + t2128 * t2738;
t2048 = pkin(2) * t2141 + t2185 * t2728 + t2724 * t2793;
t2047 = -t2108 * t2725 + t2729 * t2957;
t2046 = -t2107 * t2725 + t2729 * t2958;
t2045 = t2108 * t2729 + t2725 * t2957;
t2044 = t2107 * t2729 + t2725 * t2958;
t2041 = -t2101 * t2725 + t2729 * t2960;
t2040 = t2101 * t2729 + t2725 * t2960;
t2039 = -pkin(1) * t2218 - t2129 * t2725 + t2729 * t2815;
t2038 = pkin(1) * t2219 + t2129 * t2729 + t2725 * t2815;
t2037 = -t2096 * t2725 + t2729 * t2961;
t2036 = t2096 * t2729 + t2725 * t2961;
t2035 = -pkin(1) * t2215 - t2126 * t2725 + t2729 * t2816;
t2034 = pkin(1) * t2216 + t2126 * t2729 + t2725 * t2816;
t2033 = -t2094 * t2733 + t2116 * t2738 + (-t2192 * t2725 - t2193 * t2729) * pkin(10);
t2028 = pkin(2) * t2207 + t2124 * t2728 + t2724 * t2794;
t2025 = pkin(2) * t2205 + t2117 * t2728 + t2724 * t2795;
t2019 = -t2078 * t2725 + t2729 * t2963;
t2018 = t2078 * t2729 + t2725 * t2963;
t2015 = -t2076 * t2725 + t2729 * t2964;
t2014 = t2076 * t2729 + t2725 * t2964;
t2012 = -pkin(1) * t2192 - t2093 * t2725 + t2729 * t2817;
t2011 = pkin(1) * t2193 + t2093 * t2729 + t2725 * t2817;
t2007 = pkin(2) * t2175 + t2073 * t2728 + t2724 * t2796;
t2003 = -t2042 * t2725 + t2729 * t2965;
t2002 = t2042 * t2729 + t2725 * t2965;
t2001 = -t2029 * t2733 + t2055 * t2738 + (-t2112 * t2725 - t2113 * t2729) * pkin(10);
t2000 = -t2026 * t2733 + t2053 * t2738 + (-t2105 * t2725 - t2106 * t2729) * pkin(10);
t1997 = -t2049 * t2733 + t2054 * t2738 + (-t2065 * t2725 - t2066 * t2729) * pkin(10);
t1994 = -pkin(1) * t2112 - t2028 * t2725 + t2729 * t2819;
t1993 = pkin(1) * t2113 + t2028 * t2729 + t2725 * t2819;
t1992 = -pkin(1) * t2105 - t2025 * t2725 + t2729 * t2820;
t1991 = pkin(1) * t2106 + t2025 * t2729 + t2725 * t2820;
t1990 = -t2008 * t2733 + t2022 * t2738 + (-t2083 * t2725 - t2084 * t2729) * pkin(10);
t1989 = -pkin(1) * t2065 - t2048 * t2725 + t2729 * t2818;
t1988 = pkin(1) * t2066 + t2048 * t2729 + t2725 * t2818;
t1986 = pkin(2) * t2102 + t2020 * t2728 + t2724 * t2798;
t1983 = pkin(2) * t2097 + t2016 * t2728 + t2724 * t2799;
t1979 = pkin(2) * t2043 + t2030 * t2728 + t2724 * t2797;
t1977 = -pkin(1) * t2083 - t2007 * t2725 + t2729 * t2821;
t1976 = pkin(1) * t2084 + t2007 * t2729 + t2725 * t2821;
t1972 = pkin(2) * t2077 + t2005 * t2728 + t2724 * t2800;
t1971 = -t1995 * t2725 + t2729 * t2967;
t1970 = t1995 * t2729 + t2725 * t2967;
t1969 = -t1987 * t2733 + t1999 * t2738 + (-t2040 * t2725 - t2041 * t2729) * pkin(10);
t1968 = -t1984 * t2733 + t1998 * t2738 + (-t2036 * t2725 - t2037 * t2729) * pkin(10);
t1967 = -pkin(1) * t2040 - t1986 * t2725 + t2729 * t2822;
t1966 = pkin(1) * t2041 + t1986 * t2729 + t2725 * t2822;
t1965 = -pkin(1) * t2036 - t1983 * t2725 + t2729 * t2823;
t1964 = pkin(1) * t2037 + t1983 * t2729 + t2725 * t2823;
t1963 = -t1973 * t2733 + t1982 * t2738 + (-t2014 * t2725 - t2015 * t2729) * pkin(10);
t1962 = -t1980 * t2733 + t1985 * t2738 + (-t2002 * t2725 - t2003 * t2729) * pkin(10);
t1960 = -pkin(1) * t2002 - t1979 * t2725 + t2729 * t2824;
t1959 = pkin(1) * t2003 + t1979 * t2729 + t2725 * t2824;
t1958 = -pkin(1) * t2014 - t1972 * t2725 + t2729 * t2825;
t1957 = pkin(1) * t2015 + t1972 * t2729 + t2725 * t2825;
t1955 = pkin(2) * t1996 + t1974 * t2728 + t2724 * t2801;
t1954 = -t1956 * t2733 + t1961 * t2738 + (-t1970 * t2725 - t1971 * t2729) * pkin(10);
t1953 = -pkin(1) * t1970 - t1955 * t2725 + t2729 * t2826;
t1952 = pkin(1) * t1971 + t1955 * t2729 + t2725 * t2826;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t2709, 0, -t2708, 0, t2978, -t2692, -t2855, -pkin(9) * t2855, -t2734 * t2660 + t2677 * t2739, -t2734 * t2638 + t2651 * t2739, -t2734 * t2645 + t2667 * t2739, -t2734 * t2657 + t2676 * t2739, -t2734 * t2646 + t2668 * t2739, t2739 * t2683 + t2734 * t2854, t2739 * t2592 - t2734 * t2585 - pkin(9) * (t2647 * t2739 + t2734 * t2669), t2739 * t2586 - t2734 * t2581 - pkin(9) * (t2640 * t2739 + t2734 * t2663), t2739 * t2551 - t2734 * t2569 - pkin(9) * (t2637 * t2739 + t2734 * t2650), t2739 * t2563 - t2734 * t2575 - pkin(9) * (t2609 * t2739 + t2734 * t2627), -t2734 * t2507 + t2540 * t2739, -t2734 * t2458 + t2498 * t2739, -t2734 * t2478 + t2516 * t2739, -t2734 * t2506 + t2539 * t2739, -t2734 * t2479 + t2517 * t2739, -t2734 * t2521 + t2566 * t2739, t2739 * t2284 - t2734 * t2258 - pkin(9) * (t2460 * t2739 + t2734 * t2503), t2739 * t2293 - t2734 * t2270 - pkin(9) * (t2473 * t2739 + t2734 * t2508), t2739 * t2253 - t2734 * t2230 - pkin(9) * (t2442 * t2739 + t2734 * t2492), t2739 * t2169 - t2734 * t2160 - pkin(9) * (t2313 * t2739 + t2734 * t2357), -t2734 * t2268 + t2327 * t2739, -t2734 * t2199 + t2250 * t2739, -t2734 * t2226 + t2287 * t2739, -t2734 * t2267 + t2326 * t2739, -t2734 * t2227 + t2288 * t2739, -t2734 * t2306 + t2356 * t2739, t2739 * t2058 - t2734 * t2035 - pkin(9) * (t2216 * t2739 + t2734 * t2275), t2739 * t2060 - t2734 * t2039 - pkin(9) * (t2219 * t2739 + t2734 * t2278), t2739 * t2033 - t2734 * t2012 - pkin(9) * (t2193 * t2739 + t2734 * t2243), t2739 * t1997 - t2734 * t1989 - pkin(9) * (t2066 * t2739 + t2734 * t2092), -t2734 * t2146 + t2197 * t2739, -t2734 * t2091 + t2138 * t2739, -t2734 * t2121 + t2163 * t2739, -t2734 * t2145 + t2196 * t2739, -t2734 * t2122 + t2164 * t2739, -t2734 * t2180 + t2231 * t2739, t2739 * t2000 - t2734 * t1992 - pkin(9) * (t2106 * t2739 + t2734 * t2150), t2739 * t2001 - t2734 * t1994 - pkin(9) * (t2113 * t2739 + t2734 * t2154), t2739 * t1990 - t2734 * t1977 - pkin(9) * (t2084 * t2739 + t2734 * t2132), t2739 * t1962 - t2734 * t1960 - pkin(9) * (t2003 * t2739 + t2734 * t2009), -t2734 * t2064 + t2086 * t2739, -t2734 * t2019 + t2057 * t2739, -t2734 * t2046 + t2069 * t2739, -t2734 * t2063 + t2085 * t2739, -t2734 * t2047 + t2070 * t2739, -t2734 * t2082 + t2131 * t2739, t2739 * t1968 - t2734 * t1965 - pkin(9) * (t2037 * t2739 + t2734 * t2067), t2739 * t1969 - t2734 * t1967 - pkin(9) * (t2041 * t2739 + t2734 * t2068), t2739 * t1963 - t2734 * t1958 - pkin(9) * (t2015 * t2739 + t2734 * t2056), t2739 * t1954 - t2734 * t1953 - pkin(9) * (t1971 * t2739 + t2734 * t1978); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t2708, 0, t2709, 0, t2692, t2978, t2984, pkin(9) * t2984, t2660 * t2739 + t2734 * t2677, t2638 * t2739 + t2734 * t2651, t2645 * t2739 + t2734 * t2667, t2657 * t2739 + t2734 * t2676, t2646 * t2739 + t2734 * t2668, t2734 * t2683 - t2739 * t2854, t2734 * t2592 + t2739 * t2585 + pkin(9) * (-t2734 * t2647 + t2669 * t2739), t2734 * t2586 + t2739 * t2581 + pkin(9) * (-t2734 * t2640 + t2663 * t2739), t2734 * t2551 + t2739 * t2569 + pkin(9) * (-t2734 * t2637 + t2650 * t2739), t2734 * t2563 + t2739 * t2575 + pkin(9) * (-t2734 * t2609 + t2627 * t2739), t2507 * t2739 + t2734 * t2540, t2458 * t2739 + t2734 * t2498, t2478 * t2739 + t2734 * t2516, t2506 * t2739 + t2734 * t2539, t2479 * t2739 + t2734 * t2517, t2521 * t2739 + t2734 * t2566, t2734 * t2284 + t2739 * t2258 + pkin(9) * (-t2734 * t2460 + t2503 * t2739), t2734 * t2293 + t2739 * t2270 + pkin(9) * (-t2734 * t2473 + t2508 * t2739), t2734 * t2253 + t2739 * t2230 + pkin(9) * (-t2734 * t2442 + t2492 * t2739), t2734 * t2169 + t2739 * t2160 + pkin(9) * (-t2734 * t2313 + t2357 * t2739), t2268 * t2739 + t2734 * t2327, t2199 * t2739 + t2734 * t2250, t2226 * t2739 + t2734 * t2287, t2267 * t2739 + t2734 * t2326, t2227 * t2739 + t2734 * t2288, t2306 * t2739 + t2734 * t2356, t2734 * t2058 + t2739 * t2035 + pkin(9) * (-t2734 * t2216 + t2275 * t2739), t2734 * t2060 + t2739 * t2039 + pkin(9) * (-t2734 * t2219 + t2278 * t2739), t2734 * t2033 + t2739 * t2012 + pkin(9) * (-t2734 * t2193 + t2243 * t2739), t2734 * t1997 + t2739 * t1989 + pkin(9) * (-t2734 * t2066 + t2092 * t2739), t2146 * t2739 + t2734 * t2197, t2091 * t2739 + t2734 * t2138, t2121 * t2739 + t2734 * t2163, t2145 * t2739 + t2734 * t2196, t2122 * t2739 + t2734 * t2164, t2180 * t2739 + t2734 * t2231, t2734 * t2000 + t2739 * t1992 + pkin(9) * (-t2734 * t2106 + t2150 * t2739), t2734 * t2001 + t2739 * t1994 + pkin(9) * (-t2734 * t2113 + t2154 * t2739), t2734 * t1990 + t2739 * t1977 + pkin(9) * (-t2734 * t2084 + t2132 * t2739), t2734 * t1962 + t2739 * t1960 + pkin(9) * (-t2734 * t2003 + t2009 * t2739), t2064 * t2739 + t2734 * t2086, t2019 * t2739 + t2734 * t2057, t2046 * t2739 + t2734 * t2069, t2063 * t2739 + t2734 * t2085, t2047 * t2739 + t2734 * t2070, t2082 * t2739 + t2734 * t2131, t2734 * t1968 + t2739 * t1965 + pkin(9) * (-t2734 * t2037 + t2067 * t2739), t2734 * t1969 + t2739 * t1967 + pkin(9) * (-t2734 * t2041 + t2068 * t2739), t2734 * t1963 + t2739 * t1958 + pkin(9) * (-t2734 * t2015 + t2056 * t2739), t2734 * t1954 + t2739 * t1953 + pkin(9) * (-t2734 * t1971 + t1978 * t2739); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2711, t2712, 0, 0, t2659, t2636, t2642, t2658, t2643, t2704, t2584, t2580, t2568, t2576, t2505, t2457, t2476, t2504, t2477, t2520, t2257, t2269, t2229, t2159, t2266, t2198, t2224, t2265, t2225, t2305, t2034, t2038, t2011, t1988, t2144, t2090, t2119, t2143, t2120, t2179, t1991, t1993, t1976, t1959, t2062, t2018, t2044, t2061, t2045, t2081, t1964, t1966, t1957, t1952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t3075, 0, 0, -g(3), -t2711, 0, t2677, t2651, t2667, t2676, t2668, t2683, t2592, t2586, t2551, t2563, t2540, t2498, t2516, t2539, t2517, t2566, t2284, t2293, t2253, t2169, t2327, t2250, t2287, t2326, t2288, t2356, t2058, t2060, t2033, t1997, t2197, t2138, t2163, t2196, t2164, t2231, t2000, t2001, t1990, t1962, t2086, t2057, t2069, t2085, t2070, t2131, t1968, t1969, t1963, t1954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3075, 0, qJDD(1), 0, g(3), 0, -t2712, 0, t2660, t2638, t2645, t2657, t2646, -t2854, t2585, t2581, t2569, t2575, t2507, t2458, t2478, t2506, t2479, t2521, t2258, t2270, t2230, t2160, t2268, t2199, t2226, t2267, t2227, t2306, t2035, t2039, t2012, t1989, t2146, t2091, t2121, t2145, t2122, t2180, t1992, t1994, t1977, t1960, t2064, t2019, t2046, t2063, t2047, t2082, t1965, t1967, t1958, t1953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2711, t2712, 0, 0, t2659, t2636, t2642, t2658, t2643, t2704, t2584, t2580, t2568, t2576, t2505, t2457, t2476, t2504, t2477, t2520, t2257, t2269, t2229, t2159, t2266, t2198, t2224, t2265, t2225, t2305, t2034, t2038, t2011, t1988, t2144, t2090, t2119, t2143, t2120, t2179, t1991, t1993, t1976, t1959, t2062, t2018, t2044, t2061, t2045, t2081, t1964, t1966, t1957, t1952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2786, t2682, t2690, -t2699, t2694, t2699, 0, -t2685, t2661, 0, t2612, t2578, t2604, t2611, t2605, t2610, t2447, t2452, t2389, t2346, t2426, t2367, t2407, t2425, t2408, t2474, t2147, t2149, t2116, t2054, t2311, t2238, t2272, t2310, t2273, t2347, t2053, t2055, t2022, t1985, t2182, t2128, t2151, t2181, t2152, t2221, t1998, t1999, t1982, t1961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2698, t2679, t2693, t2972, t2691, -t2698, t2685, 0, t2662, 0, t2591, t2545, t2559, t2589, t2560, t2607, t2413, t2415, t2404, t2358, t2377, t2323, t2344, t2376, t2345, t2411, t2127, t2130, t2094, t2049, t2248, t2189, t2213, t2247, t2214, t2295, t2026, t2029, t2008, t1980, t2136, t2079, t2109, t2135, t2110, t2173, t1984, t1987, t1973, t1956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2710, t2696, t2680, t2710, t2681, t2983, -t2661, -t2662, 0, 0, t2590, t2544, t2557, t2588, t2558, t2606, t2412, t2414, t2403, t2359, t2375, t2322, t2342, t2374, t2343, t2410, t2126, t2129, t2093, t2048, t2246, t2188, t2211, t2245, t2212, t2294, t2025, t2028, t2007, t1979, t2134, t2078, t2107, t2133, t2108, t2172, t1983, t1986, t1972, t1955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2761, -t2613, t2764, -t2656, t2654, t2656, 0, -t2574, t2524, 0, t2523, t2454, t2509, t2522, t2510, t2536, t2302, t2307, t2220, t2168, t2419, t2366, t2378, t2418, t2379, t2461, t2137, t2139, t2111, t2032, t2290, t2217, t2259, t2289, t2260, t2341, t2050, t2051, t2013, t1981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3031, t3082, t2655, t2774, -t2628, -t3031, t2574, 0, t2525, 0, t2485, t2430, t2445, t2483, t2446, t2519, t2252, t2256, t2223, t2184, t2365, t2297, t2334, t2364, t2335, t2406, t2118, t2125, t2074, t2031, t2235, t2171, t2202, t2234, t2203, t2283, t2017, t2021, t2006, t1975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3035, t2648, t2618, t3035, t2768, t2773, -t2524, -t2525, 0, 0, t2484, t2429, t2443, t2482, t2444, t2518, t2251, t2255, t2222, t2185, t2363, t2296, t2332, t2362, t2333, t2405, t2117, t2124, t2073, t2030, t2233, t2170, t2200, t2232, t2201, t2282, t2016, t2020, t2005, t1974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2573, -t2526, t2763, t2603, t2601, -t2603, 0, -t2409, t2360, 0, t2465, t2382, t2450, t2463, t2451, t2496, t2298, t2299, t2167, -pkin(12) * t2186, t2354, t2292, t2316, t2353, t2317, t2402, t2099, t2100, t2075, t2027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2843, t3092, t2602, -t2757, -t2546, -t2843, t2409, 0, t2361, 0, -t2535, -t2534, -t2470, t2535, t2466, -t2572, t2236, t2237, -pkin(4) * t2381, -pkin(4) * t2186, -t2392, -t2318, -t2385, t2390, -t2386, -t2439, t2153, t2155, t2080, t2052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3038, t2583, t2531, -t3038, t2754, t2633, -t2360, -t2361, 0, 0, t2464, t2380, t2448, t2462, t2449, t2495, t2271, t2274, t2161, t2157, t2352, t2291, t2314, t2351, t2315, t2401, t2089, t2095, t2072, t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, -t3090, t3083, t2564, t2561, -t2564, 0, t2339, t2263, 0, t2393, t2320, t2387, t2391, t2388, t2440, t2208, t2209, t2098, -pkin(13) * t2114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2565, t2469, t2562, -t2840, t2488, -t2565, -t2339, 0, t2264, 0, -t2493, -t2491, -t2398, t2493, t2394, -t2499, t2158, t2162, -pkin(5) * t2319, -pkin(5) * t2114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2535, t2534, t2470, -t2535, -t2466, t2572, -t2263, -t2264, 0, 0, t2392, t2318, t2385, -t2390, t2386, t2439, t2835, t2834, t2784, t2979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2428, t2395, t3084, t2513, t2511, -t2513, 0, t2239, t2177, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2514, t2397, t2512, t2427, t2423, -t2514, -t2239, 0, t2178, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2493, t2491, t2398, -t2493, -t2394, t2499, -t2177, -t2178, 0, 0;];
m_new_reg  = t1;
