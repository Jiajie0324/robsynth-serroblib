% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d4,d5,d6,theta3]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR14_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2018-12-10 18:39
% Revision: bb42a8b95257d9bc83910d26e849f5825122f662 (2018-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR14_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: pkin has to be [14x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x6] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2018-12-10 18:34:03
% EndTime: 2018-12-10 18:35:20
% DurationCPUTime: 44.60s
% Computational Cost: add. (50784->1044), mult. (143928->1461), div. (0->0), fcn. (127167->30), ass. (0->451)
t1148 = sin(qJ(6));
t1153 = cos(qJ(6));
t1149 = sin(qJ(5));
t1154 = cos(qJ(5));
t1151 = sin(qJ(2));
t1152 = sin(qJ(1));
t1157 = cos(qJ(1));
t1312 = pkin(6) + qJ(2);
t1249 = cos(t1312) / 0.2e1;
t1313 = pkin(6) - qJ(2);
t1276 = cos(t1313);
t1189 = t1276 / 0.2e1 + t1249;
t1072 = t1151 * t1152 - t1157 * t1189;
t1143 = sin(pkin(7));
t1147 = cos(pkin(7));
t1144 = sin(pkin(6));
t1323 = t1144 * t1157;
t1030 = -t1072 * t1143 + t1147 * t1323;
t1310 = pkin(8) + qJ(4);
t1246 = sin(t1310) / 0.2e1;
t1311 = pkin(8) - qJ(4);
t1273 = sin(t1311);
t1099 = t1246 - t1273 / 0.2e1;
t1248 = cos(t1310) / 0.2e1;
t1275 = cos(t1311);
t1102 = t1248 - t1275 / 0.2e1;
t1155 = cos(qJ(4));
t1247 = sin(t1312) / 0.2e1;
t1274 = sin(t1313);
t1101 = t1247 - t1274 / 0.2e1;
t1156 = cos(qJ(2));
t1073 = t1101 * t1157 + t1152 * t1156;
t1135 = pkin(7) - pkin(14);
t1126 = cos(t1135) / 0.2e1;
t1134 = pkin(7) + pkin(14);
t1133 = cos(t1134);
t1094 = t1126 + t1133 / 0.2e1;
t1141 = sin(pkin(14));
t1125 = sin(t1134) / 0.2e1;
t1132 = sin(t1135);
t1306 = t1125 + t1132 / 0.2e1;
t1257 = t1144 * t1306;
t956 = t1072 * t1094 + t1073 * t1141 + t1157 * t1257;
t1093 = t1125 - t1132 / 0.2e1;
t1095 = t1126 - t1133 / 0.2e1;
t1145 = cos(pkin(14));
t957 = t1072 * t1093 - t1073 * t1145 + t1095 * t1323;
t832 = -t1030 * t1102 + t1099 * t956 + t1155 * t957;
t1142 = sin(pkin(8));
t1146 = cos(pkin(8));
t913 = t1030 * t1146 - t1142 * t956;
t791 = t1149 * t913 + t1154 * t832;
t1150 = sin(qJ(4));
t1187 = t1246 + t1273 / 0.2e1;
t1188 = t1275 / 0.2e1 + t1248;
t831 = -t1030 * t1187 + t957 * t1150 - t956 * t1188;
t1419 = t1148 * t791 - t1153 * t831;
t1418 = t1148 * t831 + t1153 * t791;
t1318 = t1147 * t1151;
t1193 = (-t1141 * t1318 + t1145 * t1156) * t1144;
t1065 = qJD(1) * t1193;
t1194 = (t1141 * t1156 + t1145 * t1318) * t1144;
t1063 = qJD(1) * t1194;
t1326 = t1144 * t1151;
t1285 = t1143 * t1326;
t1253 = t1142 * t1285;
t1185 = qJD(1) * t1253 - t1063 * t1146;
t1319 = t1146 * t1155;
t1330 = t1142 * t1155;
t1403 = t1143 * (-t1141 * t1150 + t1145 * t1319) + t1147 * t1330;
t1357 = t1403 * qJD(4) - t1065 * t1155 - t1150 * t1185;
t1320 = t1146 * t1150;
t1332 = t1142 * t1150;
t1043 = t1147 * t1332 + (t1141 * t1155 + t1145 * t1320) * t1143;
t1223 = t1155 * t1253;
t1356 = qJD(1) * t1223 + t1043 * qJD(4) - t1063 * t1319 - t1065 * t1150;
t1351 = qJD(3) * t1143;
t1329 = t1143 * t1145;
t1334 = t1141 * t1147;
t1085 = pkin(2) * t1334 + qJ(3) * t1329;
t1328 = t1143 * t1146;
t1034 = (t1142 * t1147 + t1145 * t1328) * pkin(11) + t1085;
t1322 = t1145 * t1147;
t1121 = pkin(2) * t1322;
t1335 = t1141 * t1143;
t1384 = pkin(11) * t1146;
t1046 = pkin(3) * t1147 + t1121 + (-qJ(3) - t1384) * t1335;
t1385 = pkin(11) * t1142;
t1068 = (-pkin(3) * t1145 - t1141 * t1385 - pkin(2)) * t1143;
t1222 = t1046 * t1146 + t1068 * t1142;
t1400 = -t1150 * t1034 + t1222 * t1155;
t1379 = cos(pkin(6));
t1301 = pkin(1) * t1379;
t1124 = t1156 * t1301;
t1116 = qJD(1) * t1124;
t1365 = qJ(3) * t1147;
t1278 = -pkin(10) - t1365;
t1240 = t1278 * t1151;
t1219 = t1144 * t1240;
t1050 = qJD(1) * t1219 + t1116;
t1123 = t1151 * t1301;
t1241 = t1156 * t1278;
t1174 = t1144 * t1241 - t1123;
t1051 = t1174 * qJD(1);
t1217 = -qJ(3) * t1143 * t1156 + pkin(2) * t1151;
t1078 = t1217 * t1144 * qJD(1);
t938 = t1145 * t1050 + t1051 * t1334 + t1078 * t1335;
t888 = pkin(11) * t1185 + t938;
t1256 = qJD(1) * t1285;
t937 = -t1050 * t1141 + t1051 * t1322 + t1078 * t1329;
t890 = pkin(3) * t1256 - t1065 * t1384 + t937;
t984 = -t1051 * t1143 + t1147 * t1078;
t928 = pkin(3) * t1063 - t1065 * t1385 + t984;
t1415 = -t1155 * t888 - t890 * t1320 - t928 * t1332 + (-t1141 * t1320 + t1145 * t1155) * t1351 + t1400 * qJD(4);
t1294 = qJD(3) * t1335;
t1221 = -t1146 * t928 + (t1294 + t890) * t1142;
t1271 = t1379 * qJD(1);
t1239 = t1271 + qJD(2);
t1324 = t1144 * t1156;
t1284 = t1143 * t1324;
t1192 = qJD(1) * t1284 - t1147 * t1239;
t1287 = t1141 * t1326;
t1317 = t1147 * t1156;
t1283 = t1144 * t1317;
t1071 = qJD(1) * t1283 + t1143 * t1239;
t1339 = t1071 * t1145;
t1399 = qJD(1) * t1287 - t1339;
t1414 = t1142 * t1192 + t1146 * t1399;
t1413 = t1149 * t832 - t1154 * t913;
t1252 = t1146 * t1285;
t1004 = -qJD(1) * t1252 - t1063 * t1142;
t1412 = -pkin(12) * t1004 - t1415;
t1409 = -t1356 * pkin(4) + pkin(12) * t1357 - t1221;
t1081 = t1142 * t1329 - t1146 * t1147;
t987 = t1043 * t1149 + t1154 * t1081;
t1367 = -qJD(5) * t987 + t1004 * t1149 + t1154 * t1357;
t988 = t1043 * t1154 - t1081 * t1149;
t1366 = qJD(5) * t988 - t1154 * t1004 + t1149 * t1357;
t1321 = t1145 * t1151;
t1282 = t1144 * t1321;
t1340 = t1071 * t1141;
t1014 = qJD(1) * t1282 + t1340;
t925 = t1014 * t1150 + t1155 * t1414;
t924 = qJD(5) + t925;
t927 = t1155 * t1014 - t1150 * t1414;
t1167 = -t1142 * t1399 + t1146 * t1192 - qJD(4);
t965 = t1154 * t1167;
t847 = t1149 * t927 + t965;
t845 = qJD(6) + t847;
t1291 = qJD(4) * t1330;
t1297 = qJD(1) * t1326;
t1218 = (-t1143 ^ 2 - t1147 ^ 2) * t1297;
t989 = t1145 * t1218 - t1340;
t990 = t1141 * t1218 + t1339;
t923 = t1155 * t990 + t1320 * t989;
t1406 = t1291 - t923;
t1022 = t1155 * t1034;
t1405 = -t1150 * t888 + t1155 * (t1142 * t928 + t1146 * t890) + (t1141 * t1319 + t1145 * t1150) * t1351 + (t1150 * t1222 + t1022) * qJD(4);
t1308 = qJDD(1) * t1151;
t1269 = t1144 * t1308;
t1295 = qJD(2) * t1324;
t1404 = qJD(1) * t1295 + t1269;
t1137 = t1144 ^ 2;
t1386 = pkin(1) * t1137;
t1402 = 0.2e1 * t1386;
t1369 = -pkin(4) * t1004 + t1405;
t1401 = t1294 + t937;
t1075 = -t1157 * t1151 - t1152 * t1189;
t1325 = t1144 * t1152;
t1215 = -t1075 * t1143 + t1147 * t1325;
t1398 = -g(1) * t1030 - g(2) * t1215;
t1345 = qJD(5) * t1154;
t1347 = qJD(5) * t1149;
t977 = -t1046 * t1142 + t1146 * t1068;
t904 = -pkin(4) * t1403 - pkin(12) * t1043 + t977;
t1280 = t1046 * t1320 + t1068 * t1332 + t1022;
t916 = -pkin(12) * t1081 + t1280;
t1397 = t1409 * t1149 + t1154 * t1412 - t904 * t1345 + t1347 * t916;
t1272 = t1143 * t1379;
t1197 = t1272 + t1283;
t1077 = t1101 * t1152 - t1156 * t1157;
t1394 = g(1) * t1077 - g(2) * t1073;
t1289 = qJD(4) * t1319;
t1350 = qJD(4) * t1150;
t1296 = qJD(2) * t1326;
t1251 = qJD(1) * t1296;
t1267 = t1379 * qJDD(1);
t1119 = t1267 + qJDD(2);
t1307 = qJDD(1) * t1156;
t1268 = t1144 * t1307;
t1259 = -t1119 * t1147 + t1143 * t1268;
t1182 = t1143 * t1251 - t1259;
t1173 = t1182 * t1142;
t1176 = qJD(2) * t1240 + qJD(3) * t1317;
t1110 = t1116 * qJD(2);
t1258 = pkin(1) * t1267;
t1279 = pkin(10) * t1268 + t1151 * t1258 + t1110;
t935 = (t1119 * qJ(3) + qJD(3) * t1239) * t1143 + (qJD(1) * t1176 + t1307 * t1365) * t1144 + t1279;
t1352 = qJD(1) * qJD(2);
t1196 = -t1123 * t1352 + t1156 * t1258;
t1293 = qJD(3) * t1318;
t954 = t1119 * pkin(2) + (qJDD(1) * t1240 + (qJD(2) * t1241 - t1293) * qJD(1)) * t1144 + t1196;
t1327 = t1143 * t1151;
t1170 = qJD(2) * t1217 - qJD(3) * t1327;
t1207 = -pkin(2) * t1156 - qJ(3) * t1327 - pkin(1);
t976 = (qJD(1) * t1170 + qJDD(1) * t1207) * t1144;
t815 = t1145 * t935 + t954 * t1334 + t976 * t1335;
t1224 = t1147 * t1251;
t972 = (-t1119 * t1143 - t1147 * t1268 + t1224) * t1145 + t1404 * t1141;
t786 = (-t972 * t1146 + t1173) * pkin(11) + t815;
t814 = -t1141 * t935 + t954 * t1322 + t976 * t1329;
t1298 = t1156 * t1352;
t973 = t1119 * t1335 - t1141 * t1224 + (t1145 * t1298 + (t1141 * t1317 + t1321) * qJDD(1)) * t1144;
t787 = pkin(3) * t1182 - t1384 * t973 + t814;
t883 = -t1143 * t954 + t1147 * t976 + qJDD(3);
t809 = pkin(3) * t972 - t1385 * t973 + t883;
t1195 = pkin(10) * t1324 + t1123;
t1007 = qJ(3) * t1071 + qJD(1) * t1195;
t1179 = pkin(2) * t1379 + t1219;
t1015 = qJD(2) * pkin(2) + qJD(1) * t1179 + t1116;
t1069 = t1207 * t1144;
t1060 = qJD(1) * t1069;
t911 = t1145 * t1007 + t1015 * t1334 + t1060 * t1335;
t846 = -pkin(11) * t1414 + t911;
t910 = -t1141 * t1007 + t1015 * t1322 + t1060 * t1329;
t850 = -pkin(3) * t1192 - t1014 * t1384 + t910;
t964 = -t1143 * t1015 + t1147 * t1060 + qJD(3);
t881 = pkin(3) * t1399 - t1014 * t1385 + t964;
t1191 = -t1155 * t786 - t850 * t1289 - t881 * t1291 - t787 * t1320 - t809 * t1332 + t1350 * t846;
t931 = -t1142 * t972 - t1146 * t1182 - qJDD(4);
t722 = -pkin(12) * t931 - t1191;
t752 = -t1142 * t787 + t1146 * t809;
t803 = -qJD(4) * t925 + t1150 * t1173 + t1155 * t973 - t972 * t1320;
t804 = qJD(4) * t927 + t1150 * t973 - t1155 * t1173 + t972 * t1319;
t730 = pkin(4) * t804 - pkin(12) * t803 + t752;
t765 = t1155 * t846 + t850 * t1320 + t881 * t1332;
t754 = -pkin(12) * t1167 + t765;
t788 = -t1142 * t850 + t1146 * t881;
t760 = pkin(4) * t925 - pkin(12) * t927 + t788;
t734 = t1149 * t760 + t1154 * t754;
t713 = -qJD(5) * t734 - t1149 * t722 + t1154 * t730;
t1040 = -t1145 * t1197 + t1287;
t1270 = t1379 * t1147;
t1198 = -t1270 + t1284;
t1183 = t1142 * t1198;
t1168 = -t1146 * t1040 - t1183;
t1037 = qJ(3) * t1197 + t1195;
t1048 = t1124 + t1179;
t933 = t1145 * t1037 + t1048 * t1334 + t1069 * t1335;
t878 = pkin(11) * t1168 + t933;
t1041 = t1141 * t1197 + t1282;
t932 = -t1141 * t1037 + t1048 * t1322 + t1069 * t1329;
t882 = -pkin(3) * t1198 - t1041 * t1384 + t932;
t982 = -t1048 * t1143 + t1147 * t1069;
t903 = pkin(3) * t1040 - t1041 * t1385 + t982;
t1392 = -t1150 * t878 + t1155 * (t1142 * t903 + t1146 * t882);
t764 = -t1150 * t846 + t1155 * (t1142 * t881 + t1146 * t850);
t1100 = t1247 + t1274 / 0.2e1;
t1103 = t1249 - t1276 / 0.2e1;
t1171 = t1100 * t1094 + t1103 * t1141 + t1306 * t1379;
t1209 = t1100 * t1143 - t1270;
t985 = t1100 * t1093 + t1095 * t1379 - t1103 * t1145;
t1159 = t1099 * t1171 + t1102 * t1209 + t985 * t1155;
t1172 = -t1075 * t1094 - t1077 * t1141 - t1152 * t1257;
t958 = t1075 * t1093 - t1077 * t1145 + t1095 * t1325;
t1160 = -t1099 * t1172 - t1102 * t1215 + t958 * t1155;
t914 = t1142 * t1172 + t1146 * t1215;
t792 = -t1149 * t1160 + t1154 * t914;
t952 = -t1142 * t1171 - t1146 * t1209;
t1214 = g(1) * t792 + g(2) * t1413 + g(3) * (-t1149 * t1159 + t1154 * t952);
t802 = qJDD(5) + t804;
t711 = -pkin(5) * t802 - t713;
t849 = -t1149 * t1167 + t1154 * t927;
t1391 = (pkin(5) * t849 + pkin(13) * t845) * t845 + t1214 + t711;
t1109 = -pkin(5) * t1154 - pkin(13) * t1149 - pkin(4);
t1263 = t1149 * t803 + t1154 * t931;
t758 = qJD(5) * t849 + t1263;
t756 = qJDD(6) + t758;
t1390 = (-t765 + t924 * (pkin(5) * t1149 - pkin(13) * t1154)) * t845 + t1109 * t756;
t1303 = t1155 * t878 + t882 * t1320 + t903 * t1332;
t986 = -t1040 * t1142 + t1146 * t1198;
t770 = -pkin(12) * t986 + t1303;
t808 = -t1142 * t882 + t1146 * t903;
t1316 = t1150 * t1041;
t941 = t1040 * t1319 + t1155 * t1183 + t1316;
t942 = t1155 * t1041 + t1150 * t1168;
t773 = pkin(4) * t941 - pkin(12) * t942 + t808;
t1228 = t1149 * t773 + t1154 * t770;
t1064 = qJD(2) * t1194;
t1005 = -qJD(2) * t1252 - t1064 * t1142;
t1184 = qJD(2) * t1253 - t1064 * t1146;
t1012 = qJD(2) * t1174 - t1144 * t1293;
t1039 = t1170 * t1144;
t1117 = qJD(2) * t1124;
t992 = qJD(3) * t1272 + t1144 * t1176 + t1117;
t894 = t1012 * t1334 + t1039 * t1335 + t1145 * t992;
t854 = pkin(11) * t1184 + t894;
t1066 = qJD(2) * t1193;
t1255 = qJD(2) * t1285;
t893 = t1012 * t1322 + t1039 * t1329 - t1141 * t992;
t858 = pkin(3) * t1255 - t1066 * t1384 + t893;
t959 = -t1012 * t1143 + t1147 * t1039;
t897 = pkin(3) * t1064 - t1066 * t1385 + t959;
t1190 = t1155 * t854 + t882 * t1289 + t903 * t1291 + t858 * t1320 + t897 * t1332 - t1350 * t878;
t738 = -pkin(12) * t1005 + t1190;
t795 = -t1142 * t858 + t1146 * t897;
t859 = t1155 * t1066 + t1184 * t1150 + (t1155 * t1168 - t1316) * qJD(4);
t860 = -qJD(2) * t1223 + qJD(4) * t942 + t1064 * t1319 + t1150 * t1066;
t751 = pkin(4) * t860 - pkin(12) * t859 + t795;
t1389 = -qJD(5) * t1228 - t1149 * t738 + t1154 * t751;
t1290 = qJD(4) * t1320;
t1292 = qJD(4) * t1332;
t1349 = qJD(4) * t1155;
t1387 = t1155 * (t1142 * t897 + t1146 * t858) - t1150 * t854 - t882 * t1290 - t903 * t1292 - t878 * t1349;
t1158 = qJD(1) ^ 2;
t1383 = pkin(12) * qJD(5);
t1359 = t1148 * t849;
t796 = -t1153 * t924 + t1359;
t1378 = t796 * t845;
t798 = t1148 * t924 + t1153 * t849;
t1377 = t798 * t845;
t1376 = t847 * t924;
t1375 = t849 * t924;
t827 = pkin(4) * t927 + pkin(12) * t925;
t1374 = t1149 * t827 + t1154 * t764;
t1368 = t1149 * t904 + t1154 * t916;
t1373 = -t1356 * pkin(5) + qJD(5) * t1368 - t1149 * t1412 + t1409 * t1154;
t1225 = -t1148 * t988 - t1153 * t1403;
t1371 = qJD(6) * t1225 + t1148 * t1356 + t1153 * t1367;
t944 = -t1148 * t1403 + t1153 * t988;
t1370 = qJD(6) * t944 + t1148 * t1367 - t1153 * t1356;
t1362 = t1119 * MDP(8);
t1343 = qJD(6) * t1153;
t757 = -qJD(5) * t965 - t1149 * t931 + t1154 * t803 - t1347 * t927;
t1304 = t1148 * t802 + t1153 * t757 + t924 * t1343;
t1344 = qJD(6) * t1148;
t731 = -t1344 * t849 + t1304;
t1361 = t1148 * t731;
t1360 = t1148 * t756;
t1358 = t1153 * t756;
t1086 = -t1146 * t1154 + t1149 * t1332;
t1355 = -t1142 * t1149 * t989 + qJD(5) * t1086 - t1154 * t1406;
t1331 = t1142 * t1154;
t1087 = t1146 * t1149 + t1150 * t1331;
t1354 = qJD(5) * t1087 + t1149 * t1406 - t1331 * t989;
t1348 = qJD(5) * t1148;
t1346 = qJD(5) * t1153;
t1338 = t1102 * t1143;
t1337 = t1103 * t1143;
t1336 = t1137 * t1158;
t1315 = t1153 * t1154;
t1139 = t1151 ^ 2;
t1309 = -t1156 ^ 2 + t1139;
t1305 = t1151 * t1386;
t1300 = t845 * t1348;
t1299 = t845 * t1346;
t1288 = t1156 * t1336;
t712 = t1149 * t730 + t1154 * t722 + t760 * t1345 - t1347 * t754;
t710 = pkin(13) * t802 + t712;
t725 = -t1150 * t786 - t850 * t1290 - t881 * t1292 + t787 * t1319 + t809 * t1330 - t846 * t1349;
t723 = pkin(4) * t931 - t725;
t715 = pkin(5) * t758 - pkin(13) * t757 + t723;
t1266 = -t1148 * t710 + t1153 * t715;
t1265 = t1148 * t757 - t1153 * t802;
t1262 = t1153 * t845;
t1261 = t1154 * t924;
t1245 = t1144 * t1158 * t1379;
t915 = pkin(4) * t1081 - t1400;
t824 = pkin(5) * t987 - pkin(13) * t988 + t915;
t1244 = -pkin(13) * t1356 - qJD(6) * t824 + t1397;
t811 = -pkin(13) * t1403 + t1368;
t1243 = -pkin(5) * t1366 + pkin(13) * t1367 + qJD(6) * t811 - t1369;
t1238 = 0.2e1 * t1271 + qJD(2);
t1233 = t1148 * t715 + t1153 * t710;
t727 = pkin(13) * t924 + t734;
t753 = pkin(4) * t1167 - t764;
t740 = t847 * pkin(5) - t849 * pkin(13) + t753;
t719 = t1148 * t740 + t1153 * t727;
t1232 = t1148 * t727 - t1153 * t740;
t736 = pkin(13) * t941 + t1228;
t769 = pkin(4) * t986 - t1392;
t879 = t1149 * t942 + t1154 * t986;
t880 = -t1149 * t986 + t1154 * t942;
t745 = pkin(5) * t879 - pkin(13) * t880 + t769;
t1231 = t1148 * t745 + t1153 * t736;
t1230 = -t1148 * t736 + t1153 * t745;
t817 = t1148 * t941 + t1153 * t880;
t816 = t1148 * t880 - t1153 * t941;
t733 = -t1149 * t754 + t1154 * t760;
t1227 = -t1149 * t770 + t1154 * t773;
t1226 = -t1149 * t916 + t1154 * t904;
t1220 = qJD(6) * t1330 + t1355;
t1216 = -pkin(12) * t802 + t753 * t924;
t833 = t1150 * t958 + t1172 * t1188 - t1187 * t1215;
t865 = t1150 * t985 - t1171 * t1188 + t1187 * t1209;
t1213 = g(1) * t833 - g(2) * t831 + g(3) * t865;
t1212 = -g(1) * t1160 + g(2) * t832 - g(3) * t1159;
t1211 = t1149 * t751 + t1154 * t738 + t773 * t1345 - t1347 * t770;
t1208 = -t1298 - t1308;
t1206 = t1144 * (t1267 + t1119);
t1205 = -g(1) * t1075 + g(2) * t1072 - g(3) * t1100;
t1204 = g(3) * t1103 + t1394;
t922 = t1150 * t990 - t1319 * t989;
t1202 = -qJD(6) * t1087 + t1292 - t922;
t1200 = t1213 - t723;
t726 = -pkin(5) * t924 - t733;
t1186 = -pkin(13) * t756 + (t726 + t733) * t845;
t1181 = pkin(12) * qJD(6) * t845 - t1213;
t1177 = t1143 * t1187;
t1169 = (pkin(13) * t927 - qJD(6) * t1109 + t1374) * t845 + t1212;
t739 = pkin(4) * t1005 - t1387;
t1166 = t1239 * t1195;
t1084 = -qJ(3) * t1335 + t1121;
t1009 = t1093 * t1103 + t1100 * t1145;
t1008 = t1094 * t1103 - t1100 * t1141;
t981 = t1075 * t1145 + t1077 * t1093;
t980 = -t1075 * t1141 + t1077 * t1094;
t979 = -t1072 * t1145 - t1073 * t1093;
t978 = t1072 * t1141 - t1073 * t1094;
t975 = -t1008 * t1142 - t1103 * t1328;
t946 = -t1077 * t1328 - t1142 * t980;
t945 = t1073 * t1328 - t1142 * t978;
t906 = t1008 * t1099 + t1009 * t1155 + t1102 * t1337;
t905 = -t1008 * t1188 + t1009 * t1150 + t1103 * t1177;
t864 = t1077 * t1338 + t1099 * t980 + t1155 * t981;
t863 = t1077 * t1177 + t981 * t1150 - t1188 * t980;
t862 = -t1073 * t1338 + t1099 * t978 + t1155 * t979;
t861 = -t1073 * t1177 + t979 * t1150 - t1188 * t978;
t841 = t1149 * t975 + t1154 * t906;
t822 = t1148 * t927 - t1315 * t925;
t821 = -t1148 * t1154 * t925 - t1153 * t927;
t819 = t1149 * t952 + t1154 * t1159;
t813 = t1149 * t946 + t1154 * t864;
t812 = t1149 * t945 + t1154 * t862;
t810 = pkin(5) * t1403 - t1226;
t793 = t1149 * t914 + t1154 * t1160;
t781 = qJD(5) * t880 + t1154 * t1005 + t1149 * t859;
t780 = -qJD(5) * t879 - t1005 * t1149 + t1154 * t859;
t762 = t1148 * t833 + t1153 * t793;
t761 = -t1148 * t793 + t1153 * t833;
t747 = qJD(6) * t817 + t1148 * t780 - t1153 * t860;
t746 = -qJD(6) * t816 + t1148 * t860 + t1153 * t780;
t743 = -pkin(5) * t927 + t1149 * t764 - t1154 * t827;
t735 = -pkin(5) * t941 - t1227;
t732 = qJD(6) * t798 + t1265;
t720 = pkin(5) * t781 - pkin(13) * t780 + t739;
t717 = -pkin(5) * t860 - t1389;
t716 = pkin(13) * t860 + t1211;
t709 = -qJD(6) * t719 + t1266;
t708 = -qJD(6) * t1232 + t1233;
t1 = [(0.2e1 * (t1151 * t1307 - t1309 * t1352) * MDP(5) + (qJDD(1) * t1139 + 0.2e1 * t1151 * t1298) * MDP(4)) * t1137 + t1379 * t1362 + (-g(1) * t791 - g(2) * t793 + t1227 * t802 + t1389 * t924 + t713 * t941 + t723 * t879 + t733 * t860 + t739 * t847 + t753 * t781 + t769 * t758) * MDP(27) + (g(1) * t831 + g(2) * t833 + t765 * t1005 + t1167 * t1190 - t1191 * t986 + t1303 * t931 + t752 * t942 + t788 * t859 + t795 * t927 + t808 * t803) * MDP(21) + (t815 * t933 + t911 * t894 + t814 * t932 + t910 * t893 + t883 * t982 + t964 * t959 - g(1) * (-pkin(1) * t1152 - pkin(2) * t1073 + pkin(10) * t1323) - g(2) * (pkin(1) * t1157 - pkin(2) * t1077 + pkin(10) * t1325) + t1398 * qJ(3)) * MDP(14) + (-qJD(2) * t1166 + (-pkin(10) * t1326 + t1124) * t1119 + (pkin(10) * t1144 * t1208 + t1196) * t1379 + t1307 * t1402 - 0.2e1 * t1305 * t1352 + g(1) * t1073 + g(2) * t1077) * MDP(9) + (-t893 * t1014 - t815 * t1040 - t814 * t1041 - t911 * t1064 - t910 * t1066 - t1399 * t894 - t932 * t973 - t933 * t972 + t1398) * MDP(13) + (-g(1) * t957 - g(2) * t958 + t883 * t1040 + t964 * t1064 + t1182 * t932 - t1192 * t893 - t1198 * t814 + t1255 * t910 + t1399 * t959 + t982 * t972) * MDP(11) + (g(1) * t1413 - g(2) * t792 - t1211 * t924 - t1228 * t802 - t712 * t941 + t723 * t880 - t734 * t860 + t739 * t849 + t753 * t780 + t769 * t757) * MDP(28) + (-(-pkin(10) * t1296 + t1117) * t1239 - t1195 * t1119 - (-pkin(10) * t1251 + t1279) * t1379 - g(1) * t1072 - g(2) * t1075 + t1208 * t1402) * MDP(10) + (t1151 * t1206 + t1238 * t1295) * MDP(6) + (t1156 * t1206 - t1238 * t1296) * MDP(7) + ((-qJD(6) * t1231 - t1148 * t716 + t1153 * t720) * t845 + t1230 * t756 + t709 * t879 - t1232 * t781 + t717 * t796 + t735 * t732 + t711 * t816 + t726 * t747 - g(1) * t1418 - g(2) * t762) * MDP(34) + (t717 * t798 + t735 * t731 + t711 * t817 + t726 * t746 - (qJD(6) * t1230 + t1148 * t720 + t1153 * t716) * t845 - t1231 * t756 - t708 * t879 - t719 * t781 + g(1) * t1419 - g(2) * t761) * MDP(35) + (t1005 * t1167 + t931 * t986) * MDP(19) + (t1005 * t925 + t1167 * t860 + t986 * t804 + t931 * t941) * MDP(18) + (-t1005 * t927 - t1167 * t859 - t986 * t803 - t931 * t942) * MDP(17) + qJDD(1) * MDP(1) + (-t758 * t941 - t781 * t924 - t802 * t879 - t847 * t860) * MDP(25) + (t757 * t941 + t780 * t924 + t802 * t880 + t849 * t860) * MDP(24) + (t802 * t941 + t860 * t924) * MDP(26) + (-t803 * t941 - t804 * t942 - t859 * t925 - t860 * t927) * MDP(16) + (t803 * t942 + t859 * t927) * MDP(15) + (-t757 * t879 - t758 * t880 - t780 * t847 - t781 * t849) * MDP(23) + (t757 * t880 + t780 * t849) * MDP(22) + (-t732 * t879 - t747 * t845 - t756 * t816 - t781 * t796) * MDP(32) + (t731 * t879 + t746 * t845 + t756 * t817 + t781 * t798) * MDP(31) + (t756 * t879 + t781 * t845) * MDP(33) + (g(1) * t1152 - g(2) * t1157) * MDP(2) + (g(1) * t1157 + g(2) * t1152) * MDP(3) + (-t731 * t816 - t732 * t817 - t746 * t796 - t747 * t798) * MDP(30) + (t731 * t817 + t746 * t798) * MDP(29) + (-g(1) * t956 + g(2) * t1172 + t959 * t1014 + t883 * t1041 + t964 * t1066 - t1182 * t933 + t1192 * t894 + t1198 * t815 - t1255 * t911 + t982 * t973) * MDP(12) + (-g(1) * t832 - g(2) * t1160 - t764 * t1005 - t1167 * t1387 - t1392 * t931 - t725 * t986 + t752 * t941 + t788 * t860 + t795 * t925 + t808 * t804) * MDP(20); (t1226 * t802 - t713 * t1403 + t915 * t758 + t723 * t987 - g(1) * t813 - g(2) * t812 - g(3) * t841 + ((-qJD(5) * t916 - t1409) * t1154 + (-qJD(5) * t904 + t1412) * t1149) * t924 + t1369 * t847 + t1366 * t753 + t1356 * t733) * MDP(27) + (t915 * t757 + t723 * t988 - t1368 * t802 + t712 * t1403 - g(1) * (-t1149 * t864 + t1154 * t946) - g(2) * (-t1149 * t862 + t1154 * t945) - g(3) * (-t1149 * t906 + t1154 * t975) + t1397 * t924 + t1369 * t849 + t1367 * t753 - t1356 * t734) * MDP(28) + (-t1356 * t847 - t1366 * t924 + t1403 * t758 - t802 * t987) * MDP(25) + (t1356 * t849 + t1367 * t924 - t1403 * t757 + t802 * t988) * MDP(24) + (t1356 * t924 - t1403 * t802) * MDP(26) + (-t1043 * t804 - t1356 * t927 - t1357 * t925 + t1403 * t803) * MDP(16) + (-t1004 * t925 + t1081 * t804 + t1167 * t1356 - t1403 * t931) * MDP(18) + (-g(1) * t864 - g(2) * t862 - g(3) * t906 + t764 * t1004 - t725 * t1081 + t1167 * t1405 + t1221 * t925 + t1356 * t788 - t1400 * t931 - t1403 * t752 + t977 * t804) * MDP(20) + (-pkin(10) * t1404 + qJD(1) * t1166 + t1158 * t1305 + t1196 + t1205) * MDP(9) + (t810 * t731 + t711 * t944 - (t1148 * t824 + t1153 * t811) * t756 - t708 * t987 - g(1) * (-t1148 * t813 + t1153 * t863) - g(2) * (-t1148 * t812 + t1153 * t861) - g(3) * (-t1148 * t841 + t1153 * t905) + (t1148 * t1243 + t1153 * t1244) * t845 + t1373 * t798 + t1371 * t726 - t1366 * t719) * MDP(35) + (t1367 * t849 + t757 * t988) * MDP(22) + (-t1366 * t849 - t1367 * t847 - t757 * t987 - t758 * t988) * MDP(23) + (t1371 * t798 + t731 * t944) * MDP(29) + (t1366 * t798 + t1371 * t845 + t731 * t987 + t756 * t944) * MDP(31) + t1309 * MDP(5) * t1336 + (t1043 * t803 + t1357 * t927) * MDP(15) + ((-pkin(10) * t1297 + t1116) * t1271 + pkin(1) * t1288 + t1110 - t1204 - t1279) * MDP(10) + t1362 + (t1225 * t756 - t1366 * t796 - t1370 * t845 - t732 * t987) * MDP(32) + (t1225 * t731 - t1370 * t798 - t1371 * t796 - t732 * t944) * MDP(30) + ((-t1148 * t811 + t1153 * t824) * t756 + t709 * t987 + t810 * t732 - t711 * t1225 - g(1) * (t1148 * t863 + t1153 * t813) - g(2) * (t1148 * t861 + t1153 * t812) - g(3) * (t1148 * t905 + t1153 * t841) + (t1148 * t1244 - t1153 * t1243) * t845 + t1373 * t796 + t1370 * t726 - t1366 * t1232) * MDP(34) + (g(3) * t1337 + t911 * t1063 + t910 * t1065 - t1084 * t973 - t1085 * t972 + t1329 * t815 - t1335 * t814 + (-qJD(3) * t1329 + t938) * t1399 + t1394 * t1143 + t1401 * t1014) * MDP(13) + (-t1143 * pkin(2) * t972 - g(1) * t981 - g(2) * t979 - g(3) * t1009 - t964 * t1063 + t1084 * t1182 + t814 * t1147 + t1192 * t1401 - t1256 * t910 - t1329 * t883 - t1399 * t984) * MDP(11) + (g(1) * t863 + g(2) * t861 + g(3) * t905 - t765 * t1004 + t752 * t1043 - t1191 * t1081 + t1167 * t1415 + t1221 * t927 + t1280 * t931 + t1357 * t788 + t977 * t803) * MDP(21) + (t1004 * t927 - t931 * t1043 - t1081 * t803 - t1167 * t1357) * MDP(17) + (t1085 * t1259 - t815 * t1147 - t984 * t1014 - t964 * t1065 - t938 * t1192 - g(1) * t980 - g(2) * t978 - g(3) * t1008 + (-pkin(2) * t973 + t883 * t1141 + t1145 * qJD(3) * t1192 + (-qJD(2) * t1085 + t911) * t1297) * t1143) * MDP(12) + (-t1004 * t1167 + t931 * t1081) * MDP(19) + (t814 * t1084 + t815 * t1085 - t910 * t937 - t911 * t938 - t964 * t984 + t1205 * pkin(2) + (-t883 * pkin(2) + (-t1141 * t910 + t1145 * t911) * qJD(3) + t1204 * qJ(3)) * t1143) * MDP(14) + (-t1156 * t1245 + t1269) * MDP(6) + (t1366 * t845 + t756 * t987) * MDP(33) - t1151 * MDP(4) * t1288 + (t1151 * t1245 + t1268) * MDP(7); (t1192 * t989 + t972) * MDP(11) + (-t1192 * t990 + t973) * MDP(12) + (t989 * t1014 + t1399 * t990) * MDP(13) + (-g(1) * t1215 + g(2) * t1030 + g(3) * t1209 - t910 * t989 - t911 * t990 + t883) * MDP(14) + (t1146 * t804 - t922 * t1167 + (-t1155 * t931 + t1167 * t1350 + t989 * t925) * t1142) * MDP(20) + (t1146 * t803 - t923 * t1167 + (t1150 * t931 + t1167 * t1349 + t989 * t927) * t1142) * MDP(21) + (-t1086 * t802 - t847 * t922 - t1354 * t924 + (-t1155 * t758 + t1350 * t847) * t1142) * MDP(27) + (-t1087 * t802 - t849 * t922 + t1355 * t924 + (-t1155 * t757 + t1350 * t849) * t1142) * MDP(28) + ((-t1087 * t1148 - t1153 * t1330) * t756 + t1086 * t732 + (t1148 * t1220 + t1153 * t1202) * t845 + t1354 * t796) * MDP(34) + (t1086 * t731 - (t1087 * t1153 - t1148 * t1330) * t756 + (-t1148 * t1202 + t1153 * t1220) * t845 + t1354 * t798) * MDP(35); -t925 ^ 2 * MDP(16) + (-t1167 * t925 + t803) * MDP(17) - t804 * MDP(18) - t931 * MDP(19) + (-t1167 * t765 + t1213 + t725) * MDP(20) + (-t1167 * t764 + t788 * t925 + t1191 - t1212) * MDP(21) + (t1149 * t757 + t1261 * t849) * MDP(22) + ((t757 - t1376) * t1154 + (-t758 - t1375) * t1149) * MDP(23) + (t1149 * t802 + t1261 * t924) * MDP(24) + (-t1149 * t924 ^ 2 + t1154 * t802) * MDP(25) + (-pkin(4) * t758 - t765 * t847 + (t764 * t924 + t1216) * t1149 + ((-t827 - t1383) * t924 + t1200) * t1154) * MDP(27) + (-pkin(4) * t757 - t765 * t849 + t1374 * t924 + t1216 * t1154 + (t1383 * t924 - t1200) * t1149) * MDP(28) + (t1149 * t1153 * t731 + (qJD(5) * t1315 - t1149 * t1344 - t822) * t798) * MDP(29) + (t796 * t822 + t798 * t821 + (-t1148 * t798 - t1153 * t796) * t1345 + (-t1361 - t1153 * t732 + (t1148 * t796 - t1153 * t798) * qJD(6)) * t1149) * MDP(30) + (-t822 * t845 + (-t731 + t1299) * t1154 + (-t1344 * t845 + t798 * t924 + t1358) * t1149) * MDP(31) + (t821 * t845 + (t732 - t1300) * t1154 + (-t1343 * t845 - t796 * t924 - t1360) * t1149) * MDP(32) + (t1149 * t845 * t924 - t1154 * t756) * MDP(33) + (-t726 * t821 - t743 * t796 + t1390 * t1153 + t1169 * t1148 + (t726 * t1348 - t709 + (qJD(5) * t796 - t1360) * pkin(12) - t1181 * t1153) * t1154 + (t726 * t1343 + t711 * t1148 - t924 * t1232 + (t732 + t1300) * pkin(12)) * t1149) * MDP(34) + (-t726 * t822 - t743 * t798 - t1390 * t1148 + t1169 * t1153 + (t726 * t1346 + t708 + (qJD(5) * t798 - t1358) * pkin(12) + t1181 * t1148) * t1154 + (-t726 * t1344 + t711 * t1153 - t924 * t719 + (t731 + t1299) * pkin(12)) * t1149) * MDP(35) + (MDP(15) * t925 + MDP(16) * t927 - MDP(18) * t1167 - MDP(20) * t788 - MDP(24) * t849 + MDP(25) * t847 - MDP(26) * t924 - MDP(27) * t733 + MDP(28) * t734) * t927; -t847 ^ 2 * MDP(23) + (t757 + t1376) * MDP(24) + (-t1263 + t1375) * MDP(25) + t802 * MDP(26) + (t734 * t924 - t1214 + t713) * MDP(27) + (g(1) * t793 - g(2) * t791 + g(3) * t819 + t733 * t924 + t753 * t847 - t712) * MDP(28) + (t1262 * t798 + t1361) * MDP(29) + ((t731 - t1378) * t1153 + (-t732 - t1377) * t1148) * MDP(30) + (t1262 * t845 + t1360) * MDP(31) + (-t1148 * t845 ^ 2 + t1358) * MDP(32) + (-pkin(5) * t732 + t1186 * t1148 - t1153 * t1391 - t734 * t796) * MDP(34) + (-pkin(5) * t731 + t1148 * t1391 + t1186 * t1153 - t734 * t798) * MDP(35) + (MDP(22) * t847 + MDP(23) * t849 - MDP(25) * qJD(5) - MDP(27) * t753 - MDP(31) * t798 + MDP(32) * t796 - MDP(33) * t845 + MDP(34) * t1232 + MDP(35) * t719) * t849; t798 * t796 * MDP(29) + (-t796 ^ 2 + t798 ^ 2) * MDP(30) + (t1304 + t1378) * MDP(31) + (-t1265 + t1377) * MDP(32) + t756 * MDP(33) + (t719 * t845 - t726 * t798 - g(1) * t761 - g(2) * t1419 - g(3) * (-t1148 * t819 + t1153 * t865) + t1266) * MDP(34) + (t726 * t796 - t1232 * t845 + g(1) * t762 - g(2) * t1418 - g(3) * (-t1148 * t865 - t1153 * t819) - t1233) * MDP(35) + (-MDP(31) * t1359 - MDP(32) * t798 - MDP(34) * t719 + MDP(35) * t1232) * qJD(6);];
tau  = t1;
