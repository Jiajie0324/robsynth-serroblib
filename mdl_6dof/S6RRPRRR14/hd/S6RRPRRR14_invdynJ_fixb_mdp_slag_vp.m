% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d4,d5,d6,theta3]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR14_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2019-01-03 10:26
% Revision: 5fdbc45bcf2cc60deefd7ac2d71d743ed41bf7e4 (2018-12-21)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR14_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: pkin has to be [14x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR14_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x6] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-01-03 10:22:03
% EndTime: 2019-01-03 10:23:05
% DurationCPUTime: 44.70s
% Computational Cost: add. (47304->1015), mult. (142768->1424), div. (0->0), fcn. (127167->18), ass. (0->421)
t1072 = sin(qJ(6));
t1073 = sin(qJ(5));
t1078 = cos(qJ(5));
t1074 = sin(qJ(4));
t1295 = cos(qJ(4));
t1066 = sin(pkin(8));
t1070 = cos(pkin(8));
t1075 = sin(qJ(2));
t1076 = sin(qJ(1));
t1079 = cos(qJ(2));
t1080 = cos(qJ(1));
t1287 = cos(pkin(6));
t1194 = t1080 * t1287;
t1028 = t1075 * t1194 + t1076 * t1079;
t1065 = sin(pkin(14));
t1069 = cos(pkin(14));
t1027 = t1075 * t1076 - t1079 * t1194;
t1067 = sin(pkin(7));
t1071 = cos(pkin(7));
t1068 = sin(pkin(6));
t1234 = t1068 * t1080;
t1143 = t1027 * t1071 + t1067 * t1234;
t1296 = t1028 * t1065 + t1069 * t1143;
t997 = -t1027 * t1067 + t1071 * t1234;
t1304 = t1066 * t997 + t1070 * t1296;
t929 = -t1028 * t1069 + t1065 * t1143;
t826 = t1074 * t1304 + t929 * t1295;
t890 = t1066 * t1296 - t1070 * t997;
t771 = -t1073 * t890 + t1078 * t826;
t1333 = t1072 * t771;
t1077 = cos(qJ(6));
t1332 = t1077 * t771;
t1230 = t1071 * t1075;
t1016 = (-t1065 * t1230 + t1069 * t1079) * t1068;
t1009 = qJD(1) * t1016;
t1310 = (t1065 * t1079 + t1069 * t1230) * t1068;
t1006 = qJD(1) * t1310;
t1237 = t1068 * t1075;
t1204 = t1067 * t1237;
t1172 = t1066 * t1204;
t1112 = qJD(1) * t1172 - t1006 * t1070;
t1215 = t1295 * t1069;
t1218 = t1066 * t1295;
t1317 = t1067 * (-t1065 * t1074 + t1070 * t1215) + t1071 * t1218;
t1273 = t1317 * qJD(4) - t1009 * t1295 - t1074 * t1112;
t1144 = t1295 * t1172;
t1217 = t1070 * t1295;
t1216 = t1295 * t1065;
t1231 = t1070 * t1074;
t1242 = t1066 * t1074;
t985 = t1071 * t1242 + (t1069 * t1231 + t1216) * t1067;
t1272 = qJD(1) * t1144 + t985 * qJD(4) - t1006 * t1217 - t1009 * t1074;
t1331 = t1073 * t826 + t1078 * t890;
t1292 = pkin(11) * t1066;
t1011 = (-pkin(3) * t1069 - t1065 * t1292 - pkin(2)) * t1067;
t1240 = t1067 * t1069;
t1245 = t1065 * t1071;
t1024 = pkin(2) * t1245 + qJ(3) * t1240;
t1239 = t1067 * t1070;
t977 = (t1066 * t1071 + t1069 * t1239) * pkin(11) + t1024;
t1233 = t1069 * t1071;
t1055 = pkin(2) * t1233;
t1246 = t1065 * t1067;
t1291 = pkin(11) * t1070;
t988 = pkin(3) * t1071 + t1055 + (-qJ(3) - t1291) * t1246;
t1102 = t1011 * t1218 - t1074 * t977 + t1217 * t988;
t1259 = qJD(3) * t1067;
t1146 = -qJ(3) * t1067 * t1079 + pkin(2) * t1075;
t1260 = qJD(1) * t1068;
t1017 = t1146 * t1260;
t1195 = t1079 * t1287;
t1058 = pkin(1) * t1195;
t1050 = qJD(1) * t1058;
t1271 = qJ(3) * t1071;
t1198 = -pkin(10) - t1271;
t1162 = t1198 * t1075;
t1148 = t1068 * t1162;
t992 = qJD(1) * t1148 + t1050;
t1196 = t1075 * t1287;
t1057 = pkin(1) * t1196;
t1163 = t1079 * t1198;
t1100 = t1068 * t1163 - t1057;
t993 = t1100 * qJD(1);
t883 = t1017 * t1246 + t1069 * t992 + t993 * t1245;
t833 = pkin(11) * t1112 + t883;
t1175 = qJD(1) * t1204;
t882 = t1017 * t1240 - t1065 * t992 + t993 * t1233;
t835 = pkin(3) * t1175 - t1009 * t1291 + t882;
t923 = t1071 * t1017 - t1067 * t993;
t873 = pkin(3) * t1006 - t1009 * t1292 + t923;
t1328 = -t835 * t1231 - t873 * t1242 - t1295 * t833 + (-t1065 * t1231 + t1215) * t1259 + t1102 * qJD(4);
t1209 = qJD(3) * t1246;
t1149 = -t1070 * t873 + (t1209 + t835) * t1066;
t1193 = t1287 * qJD(1);
t1161 = t1193 + qJD(2);
t1235 = t1068 * t1079;
t1200 = t1067 * t1235;
t1116 = qJD(1) * t1200 - t1071 * t1161;
t1211 = qJD(1) * t1237;
t1229 = t1071 * t1079;
t1202 = t1068 * t1229;
t1014 = qJD(1) * t1202 + t1067 * t1161;
t1250 = t1014 * t1069;
t1309 = t1065 * t1211 - t1250;
t1324 = -t1066 * t1116 - t1070 * t1309;
t1171 = t1070 * t1204;
t944 = -qJD(1) * t1171 - t1006 * t1066;
t1327 = -pkin(12) * t944 - t1328;
t1322 = -t1272 * pkin(4) + pkin(12) * t1273 - t1149;
t1326 = t929 * t1074;
t1180 = qJD(4) * t1218;
t1147 = (-t1067 ^ 2 - t1071 ^ 2) * t1211;
t1251 = t1014 * t1065;
t931 = t1069 * t1147 - t1251;
t932 = t1065 * t1147 + t1250;
t867 = t1231 * t931 + t1295 * t932;
t1325 = -t1180 + t867;
t1192 = t1287 * t1067;
t1089 = t1068 * (-t1065 * t1075 + t1069 * t1229) + t1069 * t1192;
t1124 = -t1071 * t1287 + t1200;
t1306 = -t1124 * t1066 + t1089 * t1070;
t1020 = t1066 * t1240 - t1070 * t1071;
t925 = t1078 * t1020 + t1073 * t985;
t1275 = -qJD(5) * t925 + t1073 * t944 + t1078 * t1273;
t926 = -t1020 * t1073 + t1078 * t985;
t1274 = qJD(5) * t926 + t1073 * t1273 - t1078 * t944;
t1321 = t1324 * t1295;
t1232 = t1069 * t1075;
t1201 = t1068 * t1232;
t956 = qJD(1) * t1201 + t1251;
t869 = t1074 * t956 - t1321;
t868 = qJD(5) + t869;
t1308 = t1324 * t1074;
t871 = t1295 * t956 + t1308;
t1093 = -t1066 * t1309 + t1070 * t1116 - qJD(4);
t904 = t1078 * t1093;
t793 = t1073 * t871 + t904;
t789 = qJD(6) + t793;
t965 = t1295 * t977;
t1320 = -t1074 * t833 + t1217 * t835 + t1218 * t873 + (t1069 * t1074 + t1070 * t1216) * t1259 + (t965 + (t1011 * t1066 + t1070 * t988) * t1074) * qJD(4);
t1226 = qJDD(1) * t1075;
t1191 = t1068 * t1226;
t1203 = qJD(2) * t1260;
t1318 = t1079 * t1203 + t1191;
t1061 = t1068 ^ 2;
t1293 = pkin(1) * t1061;
t1316 = 0.2e1 * t1293;
t1241 = t1066 * t1078;
t1026 = t1070 * t1073 + t1074 * t1241;
t1315 = -qJD(5) * t1026 + t1073 * t1325 + t1241 * t931;
t1025 = -t1070 * t1078 + t1073 * t1242;
t1314 = -t1066 * t1073 * t931 + qJD(5) * t1025 + t1078 * t1325;
t1277 = -t944 * pkin(4) + t1320;
t1170 = t1075 * t1203;
t1189 = t1287 * qJDD(1);
t1053 = t1189 + qJDD(2);
t1225 = qJDD(1) * t1079;
t1190 = t1068 * t1225;
t1182 = -t1053 * t1071 + t1067 * t1190;
t1109 = t1067 * t1170 - t1182;
t1151 = t1071 * t1170;
t914 = (-t1053 * t1067 - t1071 * t1190 + t1151) * t1069 + t1318 * t1065;
t876 = -t1066 * t914 - t1070 * t1109 - qJDD(4);
t1313 = t876 * MDP(19);
t1207 = qJD(4) * t1242;
t866 = t1074 * t932 - t1217 * t931;
t1312 = t1207 - t866;
t1311 = t1209 + t882;
t1307 = t1306 * t1295;
t1030 = -t1076 * t1196 + t1079 * t1080;
t1029 = -t1080 * t1075 - t1076 * t1195;
t1236 = t1068 * t1076;
t1141 = t1029 * t1071 + t1067 * t1236;
t1096 = t1030 * t1065 - t1069 * t1141;
t1142 = -t1029 * t1067 + t1071 * t1236;
t1305 = -t1142 * t1066 + t1096 * t1070;
t1303 = -g(1) * t997 - g(2) * t1142;
t1254 = qJD(5) * t1078;
t1256 = qJD(5) * t1073;
t918 = t1070 * t1011 - t1066 * t988;
t849 = -pkin(4) * t1317 - pkin(12) * t985 + t918;
t1220 = t1011 * t1242 + t988 * t1231 + t965;
t856 = -pkin(12) * t1020 + t1220;
t1302 = t1322 * t1073 + t1078 * t1327 - t849 * t1254 + t1256 * t856;
t1300 = -g(1) * t1030 - g(2) * t1028;
t1179 = qJD(4) * t1217;
t1258 = qJD(4) * t1074;
t1099 = t1109 * t1066;
t1103 = qJD(2) * t1162 + qJD(3) * t1229;
t1043 = t1050 * qJD(2);
t1181 = pkin(1) * t1189;
t1199 = pkin(10) * t1190 + t1075 * t1181 + t1043;
t880 = (t1053 * qJ(3) + qJD(3) * t1161) * t1067 + (qJD(1) * t1103 + t1225 * t1271) * t1068 + t1199;
t1261 = qJD(1) * qJD(2);
t1123 = -t1057 * t1261 + t1079 * t1181;
t1208 = qJD(3) * t1230;
t897 = t1053 * pkin(2) + (qJDD(1) * t1162 + (qJD(2) * t1163 - t1208) * qJD(1)) * t1068 + t1123;
t1238 = t1067 * t1075;
t1095 = qJD(2) * t1146 - qJD(3) * t1238;
t1132 = -pkin(2) * t1079 - qJ(3) * t1238 - pkin(1);
t917 = (qJD(1) * t1095 + qJDD(1) * t1132) * t1068;
t765 = t1069 * t880 + t897 * t1245 + t917 * t1246;
t743 = (-t914 * t1070 + t1099) * pkin(11) + t765;
t764 = -t1065 * t880 + t897 * t1233 + t917 * t1240;
t1212 = t1079 * t1261;
t915 = t1053 * t1246 - t1065 * t1151 + (t1069 * t1212 + (t1065 * t1229 + t1232) * qJDD(1)) * t1068;
t744 = pkin(3) * t1109 - t1291 * t915 + t764;
t822 = -t1067 * t897 + t1071 * t917 + qJDD(3);
t761 = pkin(3) * t914 - t1292 * t915 + t822;
t1012 = t1132 * t1068;
t1003 = qJD(1) * t1012;
t1122 = pkin(10) * t1235 + t1057;
t951 = qJ(3) * t1014 + qJD(1) * t1122;
t1106 = pkin(2) * t1287 + t1148;
t958 = qJD(2) * pkin(2) + qJD(1) * t1106 + t1050;
t854 = t1003 * t1246 + t1069 * t951 + t958 * t1245;
t792 = pkin(11) * t1324 + t854;
t853 = t1003 * t1240 - t1065 * t951 + t958 * t1233;
t796 = -pkin(3) * t1116 - t1291 * t956 + t853;
t903 = t1071 * t1003 - t1067 * t958 + qJD(3);
t820 = pkin(3) * t1309 - t1292 * t956 + t903;
t1115 = -t796 * t1179 - t820 * t1180 - t744 * t1231 - t761 * t1242 + t1258 * t792 - t1295 * t743;
t679 = -pkin(12) * t876 - t1115;
t709 = -t1066 * t744 + t1070 * t761;
t755 = qJD(4) * t1321 + t1074 * t1099 - t914 * t1231 - t1258 * t956 + t1295 * t915;
t1219 = qJD(4) * t1295;
t756 = qJD(4) * t1308 + t1074 * t915 - t1295 * t1099 + t914 * t1217 + t1219 * t956;
t687 = pkin(4) * t756 - pkin(12) * t755 + t709;
t720 = t796 * t1231 + t820 * t1242 + t1295 * t792;
t711 = -pkin(12) * t1093 + t720;
t745 = -t1066 * t796 + t1070 * t820;
t717 = pkin(4) * t869 - pkin(12) * t871 + t745;
t691 = t1073 * t717 + t1078 * t711;
t670 = -qJD(5) * t691 - t1073 * t679 + t1078 * t687;
t930 = t1030 * t1069 + t1065 * t1141;
t828 = -t1074 * t1305 + t930 * t1295;
t892 = t1066 * t1096 + t1070 * t1142;
t772 = -t1073 * t828 + t1078 * t892;
t1125 = t1192 + t1202;
t983 = t1065 * t1125 + t1201;
t887 = t1074 * t1306 + t983 * t1295;
t924 = t1066 * t1089 + t1070 * t1124;
t818 = t1073 * t887 + t924 * t1078;
t1138 = g(1) * t772 + g(2) * t1331 - g(3) * t818;
t754 = qJDD(5) + t756;
t668 = -pkin(5) * t754 - t670;
t795 = -t1073 * t1093 + t1078 * t871;
t1299 = (pkin(5) * t795 + pkin(13) * t789) * t789 + t1138 + t668;
t1042 = -pkin(5) * t1078 - pkin(13) * t1073 - pkin(4);
t1185 = t1073 * t755 + t1078 * t876;
t715 = qJD(5) * t795 + t1185;
t713 = qJDD(6) + t715;
t1298 = (-t720 + t868 * (pkin(5) * t1073 - pkin(13) * t1078)) * t789 + t1042 * t713;
t980 = qJ(3) * t1125 + t1122;
t990 = t1058 + t1106;
t878 = t1012 * t1246 + t1069 * t980 + t990 * t1245;
t817 = pkin(11) * t1306 + t878;
t877 = t1012 * t1240 - t1065 * t980 + t990 * t1233;
t821 = -pkin(3) * t1124 - t1291 * t983 + t877;
t919 = t1071 * t1012 - t1067 * t990;
t848 = -pkin(3) * t1089 - t1292 * t983 + t919;
t1222 = t821 * t1231 + t848 * t1242 + t1295 * t817;
t725 = -pkin(12) * t924 + t1222;
t760 = -t1066 * t821 + t1070 * t848;
t886 = t983 * t1074 - t1307;
t728 = pkin(4) * t886 - pkin(12) * t887 + t760;
t1154 = t1073 * t728 + t1078 * t725;
t1007 = qJD(2) * t1310;
t1150 = qJD(2) * t1172;
t1051 = qJD(2) * t1058;
t934 = qJD(3) * t1192 + t1068 * t1103 + t1051;
t954 = qJD(2) * t1100 - t1068 * t1208;
t982 = t1095 * t1068;
t839 = t1069 * t934 + t954 * t1245 + t982 * t1246;
t800 = (-t1007 * t1070 + t1150) * pkin(11) + t839;
t1008 = qJD(2) * t1016;
t1174 = qJD(2) * t1204;
t838 = -t1065 * t934 + t954 * t1233 + t982 * t1240;
t804 = pkin(3) * t1174 - t1008 * t1291 + t838;
t898 = -t1067 * t954 + t1071 * t982;
t842 = pkin(3) * t1007 - t1008 * t1292 + t898;
t1114 = t821 * t1179 + t848 * t1180 + t804 * t1231 + t842 * t1242 - t1258 * t817 + t1295 * t800;
t945 = -qJD(2) * t1171 - t1007 * t1066;
t695 = -pkin(12) * t945 + t1114;
t747 = -t1066 * t804 + t1070 * t842;
t805 = -qJD(2) * t1144 + t1007 * t1217 + t1008 * t1074 + t1219 * t983 + t1258 * t1306;
t806 = qJD(4) * t1307 - t1007 * t1231 + t1008 * t1295 + t1074 * t1150 - t1258 * t983;
t708 = pkin(4) * t805 - pkin(12) * t806 + t747;
t1297 = -qJD(5) * t1154 - t1073 * t695 + t1078 * t708;
t1081 = qJD(1) ^ 2;
t1290 = pkin(12) * qJD(5);
t1264 = t1072 * t795;
t748 = -t1077 * t868 + t1264;
t1286 = t748 * t789;
t750 = t1072 * t868 + t1077 * t795;
t1285 = t750 * t789;
t1284 = t793 * t868;
t1283 = t795 * t868;
t719 = -t1074 * t792 + t1217 * t796 + t1218 * t820;
t780 = pkin(4) * t871 + pkin(12) * t869;
t1282 = t1073 * t780 + t1078 * t719;
t1276 = t1073 * t849 + t1078 * t856;
t1281 = -t1272 * pkin(5) + qJD(5) * t1276 - t1073 * t1327 + t1322 * t1078;
t888 = t1072 * t926 + t1077 * t1317;
t1279 = -qJD(6) * t888 + t1072 * t1272 + t1077 * t1275;
t889 = -t1072 * t1317 + t1077 * t926;
t1278 = qJD(6) * t889 + t1072 * t1275 - t1077 * t1272;
t1269 = t1053 * MDP(8);
t1252 = qJD(6) * t1077;
t714 = -qJD(5) * t904 - t1073 * t876 + t1078 * t755 - t1256 * t871;
t1223 = t1072 * t754 + t1077 * t714 + t868 * t1252;
t1253 = qJD(6) * t1072;
t688 = -t1253 * t795 + t1223;
t1266 = t1072 * t688;
t1265 = t1072 * t713;
t1263 = t1077 * t713;
t1257 = qJD(5) * t1072;
t1255 = qJD(5) * t1077;
t1247 = t1061 * t1081;
t1243 = t1066 * t1067;
t1228 = t1077 * t1078;
t1063 = t1075 ^ 2;
t1227 = -t1079 ^ 2 + t1063;
t1224 = t1075 * t1293;
t1214 = t789 * t1257;
t1213 = t789 * t1255;
t1210 = qJD(2) * t1237;
t1206 = qJD(4) * t1231;
t1205 = t1079 * t1247;
t669 = t1073 * t687 + t1078 * t679 + t717 * t1254 - t1256 * t711;
t667 = pkin(13) * t754 + t669;
t682 = -t1074 * t743 - t796 * t1206 - t820 * t1207 + t744 * t1217 + t761 * t1218 - t792 * t1219;
t680 = pkin(4) * t876 - t682;
t672 = pkin(5) * t715 - pkin(13) * t714 + t680;
t1188 = -t1072 * t667 + t1077 * t672;
t1187 = t1072 * t714 - t1077 * t754;
t1184 = t1077 * t789;
t1183 = t1078 * t868;
t1178 = t1067 * t1218;
t1168 = t1068 * t1081 * t1287;
t855 = t1020 * pkin(4) - t1102;
t777 = t925 * pkin(5) - t926 * pkin(13) + t855;
t1166 = -pkin(13) * t1272 - qJD(6) * t777 + t1302;
t763 = -pkin(13) * t1317 + t1276;
t1165 = -pkin(5) * t1274 + pkin(13) * t1275 + qJD(6) * t763 - t1277;
t1160 = 0.2e1 * t1193 + qJD(2);
t1159 = t1072 * t672 + t1077 * t667;
t684 = pkin(13) * t868 + t691;
t710 = pkin(4) * t1093 - t719;
t697 = t793 * pkin(5) - t795 * pkin(13) + t710;
t676 = t1072 * t697 + t1077 * t684;
t1158 = t1072 * t684 - t1077 * t697;
t693 = pkin(13) * t886 + t1154;
t1105 = -t1074 * t817 + t1217 * t821 + t1218 * t848;
t724 = t924 * pkin(4) - t1105;
t819 = -t1073 * t924 + t1078 * t887;
t702 = t818 * pkin(5) - t819 * pkin(13) + t724;
t1157 = t1072 * t702 + t1077 * t693;
t1156 = -t1072 * t693 + t1077 * t702;
t767 = t1072 * t886 + t1077 * t819;
t766 = t1072 * t819 - t886 * t1077;
t690 = -t1073 * t711 + t1078 * t717;
t1153 = -t1073 * t725 + t1078 * t728;
t1152 = -t1073 * t856 + t1078 * t849;
t1145 = -pkin(12) * t754 + t710 * t868;
t823 = t1295 * t1304 - t1326;
t827 = t1074 * t930 + t1295 * t1305;
t1137 = g(1) * t827 + g(2) * t823 + g(3) * t886;
t1136 = -g(1) * t828 + g(2) * t826 - g(3) * t887;
t1135 = t1073 * t708 + t1078 * t695 + t728 * t1254 - t1256 * t725;
t1133 = -t1212 - t1226;
t1131 = t1068 * (t1189 + t1053);
t1130 = -t1072 * t1026 - t1077 * t1218;
t1129 = -t1077 * t1026 + t1072 * t1218;
t1127 = t1137 - t680;
t1121 = -g(1) * t1029 + g(2) * t1027 - g(3) * t1235;
t1120 = g(3) * t1237 - t1300;
t683 = -pkin(5) * t868 - t690;
t1113 = -pkin(13) * t713 + (t683 + t690) * t789;
t1108 = pkin(12) * qJD(6) * t789 - t1137;
t1094 = (pkin(13) * t871 - qJD(6) * t1042 + t1282) * t789 + t1136;
t1090 = -t1074 * t800 - t821 * t1206 - t848 * t1207 + t1217 * t804 + t1218 * t842 - t817 * t1219;
t1088 = t1161 * t1122;
t696 = t945 * pkin(4) - t1090;
t1023 = -qJ(3) * t1246 + t1055;
t957 = t1066 * t1310 + t1171;
t950 = t1029 * t1069 - t1030 * t1245;
t949 = -t1029 * t1065 - t1030 * t1233;
t948 = -t1027 * t1069 - t1028 * t1245;
t947 = t1027 * t1065 - t1028 * t1233;
t913 = t1030 * t1239 - t1066 * t949;
t912 = t1028 * t1239 - t1066 * t947;
t909 = t1016 * t1295 + (-t1070 * t1310 + t1172) * t1074;
t908 = t1016 * t1074 + t1217 * t1310 - t1144;
t872 = t1073 * t957 + t1078 * t909;
t864 = t950 * t1295 + (t1030 * t1243 + t1070 * t949) * t1074;
t863 = -t1030 * t1178 + t950 * t1074 - t1217 * t949;
t862 = t948 * t1295 + (t1028 * t1243 + t1070 * t947) * t1074;
t861 = -t1028 * t1178 + t948 * t1074 - t1217 * t947;
t825 = -t1217 * t1296 - t1218 * t997 + t1326;
t791 = t1073 * t913 + t1078 * t864;
t790 = t1073 * t912 + t1078 * t862;
t775 = t1072 * t871 - t1228 * t869;
t774 = -t1072 * t1078 * t869 - t1077 * t871;
t773 = t1073 * t892 + t1078 * t828;
t762 = pkin(5) * t1317 - t1152;
t738 = -qJD(5) * t818 - t1073 * t945 + t1078 * t806;
t737 = qJD(5) * t819 + t1073 * t806 + t945 * t1078;
t735 = t1072 * t827 + t1077 * t773;
t734 = -t1072 * t773 + t1077 * t827;
t704 = -qJD(6) * t766 + t1072 * t805 + t1077 * t738;
t703 = qJD(6) * t767 + t1072 * t738 - t805 * t1077;
t700 = -pkin(5) * t871 + t1073 * t719 - t1078 * t780;
t692 = -pkin(5) * t886 - t1153;
t689 = qJD(6) * t750 + t1187;
t677 = t737 * pkin(5) - t738 * pkin(13) + t696;
t674 = -pkin(5) * t805 - t1297;
t673 = pkin(13) * t805 + t1135;
t666 = -qJD(6) * t676 + t1188;
t665 = -qJD(6) * t1158 + t1159;
t1 = [(g(1) * t825 + g(2) * t827 + t1093 * t1114 - t1115 * t924 + t1222 * t876 + t709 * t887 + t720 * t945 + t745 * t806 + t747 * t871 + t760 * t755) * MDP(21) + (-g(1) * t1296 + g(2) * t1096 + t903 * t1008 - t1109 * t878 + t1116 * t839 + t1124 * t765 - t1174 * t854 + t822 * t983 + t898 * t956 + t919 * t915) * MDP(12) + (-t854 * t1007 - t853 * t1008 + t1089 * t765 - t1309 * t839 - t764 * t983 - t838 * t956 - t877 * t915 - t878 * t914 + t1303) * MDP(13) + (-g(1) * t929 - g(2) * t930 + t903 * t1007 - t1089 * t822 + t877 * t1109 - t838 * t1116 - t764 * t1124 + t853 * t1174 + t1309 * t898 + t919 * t914) * MDP(11) + (-(qJD(6) * t1156 + t1072 * t677 + t1077 * t673) * t789 - t1157 * t713 - t665 * t818 - t676 * t737 + t674 * t750 + t692 * t688 + t668 * t767 + t683 * t704 - g(1) * (t1077 * t825 - t1333) - g(2) * t734) * MDP(35) + (t765 * t878 + t854 * t839 + t764 * t877 + t853 * t838 + t822 * t919 + t903 * t898 - g(1) * (-pkin(1) * t1076 - pkin(2) * t1028 + pkin(10) * t1234) - g(2) * (pkin(1) * t1080 + pkin(2) * t1030 + pkin(10) * t1236) + t1303 * qJ(3)) * MDP(14) + (-g(1) * t771 - g(2) * t773 + t1153 * t754 + t1297 * t868 + t670 * t886 + t680 * t818 + t690 * t805 + t696 * t793 + t710 * t737 + t724 * t715) * MDP(27) + ((-qJD(6) * t1157 - t1072 * t673 + t1077 * t677) * t789 + t1156 * t713 + t666 * t818 - t1158 * t737 + t674 * t748 + t692 * t689 + t668 * t766 + t683 * t703 - g(1) * (t1072 * t825 + t1332) - g(2) * t735) * MDP(34) + t1287 * t1269 + (t1093 * t945 + t876 * t924) * MDP(19) + (-t1093 * t806 - t924 * t755 - t945 * t871 - t876 * t887) * MDP(17) + (t1093 * t805 + t924 * t756 + t945 * t869 + t876 * t886) * MDP(18) + (0.2e1 * (t1075 * t1225 - t1227 * t1261) * MDP(5) + (qJDD(1) * t1063 + 0.2e1 * t1075 * t1212) * MDP(4)) * t1061 + (-g(1) * t826 - g(2) * t828 - t1090 * t1093 - t1105 * t876 - t682 * t924 + t709 * t886 - t719 * t945 + t745 * t805 + t747 * t869 + t760 * t756) * MDP(20) + (t755 * t887 + t806 * t871) * MDP(15) + (-t755 * t886 - t756 * t887 - t805 * t871 - t806 * t869) * MDP(16) + (t713 * t818 + t737 * t789) * MDP(33) + (-t689 * t818 - t703 * t789 - t713 * t766 - t737 * t748) * MDP(32) + (t688 * t818 + t704 * t789 + t713 * t767 + t737 * t750) * MDP(31) + (-t714 * t818 - t715 * t819 - t737 * t795 - t738 * t793) * MDP(23) + (t714 * t819 + t738 * t795) * MDP(22) + (-qJD(2) * t1088 + (-pkin(10) * t1237 + t1058) * t1053 + (pkin(10) * t1068 * t1133 + t1123) * t1287 + t1225 * t1316 - 0.2e1 * t1224 * t1261 + g(1) * t1028 - g(2) * t1030) * MDP(9) + (-(-pkin(10) * t1210 + t1051) * t1161 - t1122 * t1053 - (-pkin(10) * t1170 + t1199) * t1287 - g(1) * t1027 - g(2) * t1029 + t1133 * t1316) * MDP(10) + (t1079 * t1131 - t1160 * t1210) * MDP(7) + (qJD(2) * t1160 * t1235 + t1075 * t1131) * MDP(6) + (t688 * t767 + t704 * t750) * MDP(29) + (-t688 * t766 - t689 * t767 - t703 * t750 - t704 * t748) * MDP(30) + (-t715 * t886 - t737 * t868 - t754 * t818 - t793 * t805) * MDP(25) + (t714 * t886 + t738 * t868 + t754 * t819 + t795 * t805) * MDP(24) + (t754 * t886 + t805 * t868) * MDP(26) + qJDD(1) * MDP(1) + (g(1) * t1076 - g(2) * t1080) * MDP(2) + (g(1) * t1080 + g(2) * t1076) * MDP(3) + (g(1) * t1331 - g(2) * t772 - t1135 * t868 - t1154 * t754 - t669 * t886 + t680 * t819 - t691 * t805 + t696 * t795 + t710 * t738 + t724 * t714) * MDP(28); ((-t1072 * t763 + t1077 * t777) * t713 + t666 * t925 + t762 * t689 + t668 * t888 - g(1) * (t1072 * t863 + t1077 * t791) - g(2) * (t1072 * t861 + t1077 * t790) - g(3) * (t1072 * t908 + t1077 * t872) + (t1072 * t1166 - t1077 * t1165) * t789 + t1281 * t748 + t1278 * t683 - t1274 * t1158) * MDP(34) + (g(1) * t863 + g(2) * t861 + g(3) * t908 - t1020 * t1115 + t1149 * t871 + t1220 * t876 + t1273 * t745 + t709 * t985 - t720 * t944 + t918 * t755) * MDP(21) + (t1024 * t1182 - t765 * t1071 - t923 * t956 - t903 * t1009 - t883 * t1116 - g(1) * t949 - g(2) * t947 + g(3) * t1310 + (-pkin(2) * t915 + t822 * t1065 + t1069 * qJD(3) * t1116 + (-qJD(2) * t1024 + t854) * t1211) * t1067) * MDP(12) + (-g(3) * t1204 + t854 * t1006 + t853 * t1009 - t1023 * t915 - t1024 * t914 + t1240 * t765 - t1246 * t764 + t1311 * t956 + (-qJD(3) * t1240 + t883) * t1309 + t1300 * t1067) * MDP(13) + (-t1067 * pkin(2) * t914 - g(1) * t950 - g(2) * t948 - g(3) * t1016 - t903 * t1006 + t1023 * t1109 + t764 * t1071 + t1116 * t1311 - t1175 * t853 - t1240 * t822 - t1309 * t923) * MDP(11) + (t855 * t715 + t680 * t925 + t1152 * t754 - t670 * t1317 - g(1) * t791 - g(2) * t790 - g(3) * t872 + ((-qJD(5) * t856 - t1322) * t1078 + (-qJD(5) * t849 + t1327) * t1073) * t868 + t1277 * t793 + t1274 * t710 + t1272 * t690) * MDP(27) + (-t1273 * MDP(17) + t1272 * MDP(18) - t944 * MDP(19) + t1320 * MDP(20) + MDP(21) * t1328) * t1093 + (t1020 * t756 - t1317 * t876 - t944 * t869) * MDP(18) + (-g(1) * t864 - g(2) * t862 - g(3) * t909 - t682 * t1020 - t1102 * t876 + t1149 * t869 + t1272 * t745 - t1317 * t709 + t719 * t944 + t918 * t756) * MDP(20) + (-t1272 * t871 - t1273 * t869 + t1317 * t755 - t756 * t985) * MDP(16) + (-t1272 * t793 - t1274 * t868 + t1317 * t715 - t754 * t925) * MDP(25) + (t1272 * t868 - t1317 * t754) * MDP(26) + (t1272 * t795 + t1275 * t868 - t1317 * t714 + t754 * t926) * MDP(24) + (t855 * t714 + t680 * t926 - t1276 * t754 + t669 * t1317 - g(1) * (-t1073 * t864 + t1078 * t913) - g(2) * (-t1073 * t862 + t1078 * t912) - g(3) * (-t1073 * t909 + t1078 * t957) + t1302 * t868 + t1277 * t795 + t1275 * t710 - t1272 * t691) * MDP(28) + ((-pkin(10) * t1211 + t1050) * t1193 + pkin(1) * t1205 + t1043 + t1120 - t1199) * MDP(10) + (t764 * t1023 + t765 * t1024 - t853 * t882 - t854 * t883 - t903 * t923 + t1121 * pkin(2) + (-t822 * pkin(2) + (-t1065 * t853 + t1069 * t854) * qJD(3) - t1120 * qJ(3)) * t1067) * MDP(14) + t1269 + (-t1020 * t755 + t944 * t871 - t876 * t985) * MDP(17) + (t1075 * t1168 + t1190) * MDP(7) + (-t1079 * t1168 + t1191) * MDP(6) + (-pkin(10) * t1318 + qJD(1) * t1088 + t1081 * t1224 + t1121 + t1123) * MDP(9) + t1020 * t1313 + (t1273 * t871 + t755 * t985) * MDP(15) + (t1274 * t789 + t713 * t925) * MDP(33) + (t1275 * t795 + t714 * t926) * MDP(22) - t1075 * MDP(4) * t1205 + (-t1274 * t795 - t1275 * t793 - t714 * t925 - t715 * t926) * MDP(23) + (-t1274 * t748 - t1278 * t789 - t689 * t925 - t713 * t888) * MDP(32) + (t1274 * t750 + t1279 * t789 + t688 * t925 + t713 * t889) * MDP(31) + (t1279 * t750 + t688 * t889) * MDP(29) + (-t1278 * t750 - t1279 * t748 - t688 * t888 - t689 * t889) * MDP(30) + (-(t1072 * t777 + t1077 * t763) * t713 - t665 * t925 + t762 * t688 + t668 * t889 - g(1) * (-t1072 * t791 + t1077 * t863) - g(2) * (-t1072 * t790 + t1077 * t861) - g(3) * (-t1072 * t872 + t1077 * t908) + (t1072 * t1165 + t1077 * t1166) * t789 + t1281 * t750 + t1279 * t683 - t1274 * t676) * MDP(35) + t1227 * MDP(5) * t1247; (t1116 * t931 + t914) * MDP(11) + (-t1116 * t932 + t915) * MDP(12) + (t1309 * t932 + t931 * t956) * MDP(13) + (-g(1) * t1142 + g(2) * t997 + g(3) * t1124 - t853 * t931 - t854 * t932 + t822) * MDP(14) + (t1070 * t756 - t866 * t1093 + (t1093 * t1258 - t1295 * t876 + t931 * t869) * t1066) * MDP(20) + (t1070 * t755 - t867 * t1093 + (t1074 * t876 + t1093 * t1219 + t931 * t871) * t1066) * MDP(21) + (-t1025 * t754 - t866 * t793 + t1315 * t868 + (t1258 * t793 - t1295 * t715) * t1066) * MDP(27) + (-t1026 * t754 - t866 * t795 + t1314 * t868 + (t1258 * t795 - t1295 * t714) * t1066) * MDP(28) + (t1025 * t689 + t1130 * t713 + (qJD(6) * t1129 + t1072 * t1314 + t1077 * t1312) * t789 - t1315 * t748) * MDP(34) + (t1025 * t688 + t1129 * t713 + (-qJD(6) * t1130 - t1072 * t1312 + t1077 * t1314) * t789 - t1315 * t750) * MDP(35); -t869 ^ 2 * MDP(16) + (-t1093 * t869 + t755) * MDP(17) - t756 * MDP(18) - t1313 + (-t1093 * t720 + t1137 + t682) * MDP(20) + (-t1093 * t719 + t745 * t869 + t1115 - t1136) * MDP(21) + (t1073 * t714 + t1183 * t795) * MDP(22) + ((t714 - t1284) * t1078 + (-t715 - t1283) * t1073) * MDP(23) + (t1073 * t754 + t1183 * t868) * MDP(24) + (-t1073 * t868 ^ 2 + t1078 * t754) * MDP(25) + (-pkin(4) * t715 - t720 * t793 + (t719 * t868 + t1145) * t1073 + ((-t780 - t1290) * t868 + t1127) * t1078) * MDP(27) + (-pkin(4) * t714 - t720 * t795 + t1282 * t868 + t1145 * t1078 + (t1290 * t868 - t1127) * t1073) * MDP(28) + (t1073 * t1077 * t688 + (qJD(5) * t1228 - t1073 * t1253 - t775) * t750) * MDP(29) + (t748 * t775 + t750 * t774 + (-t1072 * t750 - t1077 * t748) * t1254 + (-t1266 - t1077 * t689 + (t1072 * t748 - t1077 * t750) * qJD(6)) * t1073) * MDP(30) + (-t775 * t789 + (-t688 + t1213) * t1078 + (-t1253 * t789 + t750 * t868 + t1263) * t1073) * MDP(31) + (t774 * t789 + (t689 - t1214) * t1078 + (-t1252 * t789 - t748 * t868 - t1265) * t1073) * MDP(32) + (t1073 * t789 * t868 - t1078 * t713) * MDP(33) + (-t683 * t774 - t700 * t748 + t1298 * t1077 + t1094 * t1072 + (t683 * t1257 - t666 + (qJD(5) * t748 - t1265) * pkin(12) - t1108 * t1077) * t1078 + (t683 * t1252 + t668 * t1072 - t868 * t1158 + (t689 + t1214) * pkin(12)) * t1073) * MDP(34) + (-t683 * t775 - t700 * t750 - t1298 * t1072 + t1094 * t1077 + (t683 * t1255 + t665 + (qJD(5) * t750 - t1263) * pkin(12) + t1108 * t1072) * t1078 + (-t683 * t1253 + t668 * t1077 - t868 * t676 + (t688 + t1213) * pkin(12)) * t1073) * MDP(35) + (MDP(15) * t869 + MDP(16) * t871 - MDP(18) * t1093 - MDP(20) * t745 - MDP(24) * t795 + MDP(25) * t793 - MDP(26) * t868 - MDP(27) * t690 + MDP(28) * t691) * t871; -t793 ^ 2 * MDP(23) + (t714 + t1284) * MDP(24) + (-t1185 + t1283) * MDP(25) + t754 * MDP(26) + (t691 * t868 - t1138 + t670) * MDP(27) + (g(1) * t773 - g(2) * t771 + g(3) * t819 + t690 * t868 + t710 * t793 - t669) * MDP(28) + (t1184 * t750 + t1266) * MDP(29) + ((t688 - t1286) * t1077 + (-t689 - t1285) * t1072) * MDP(30) + (t1184 * t789 + t1265) * MDP(31) + (-t1072 * t789 ^ 2 + t1263) * MDP(32) + (-pkin(5) * t689 + t1113 * t1072 - t1077 * t1299 - t691 * t748) * MDP(34) + (-pkin(5) * t688 + t1072 * t1299 + t1113 * t1077 - t691 * t750) * MDP(35) + (MDP(22) * t793 + MDP(23) * t795 - MDP(25) * qJD(5) - MDP(27) * t710 - MDP(31) * t750 + MDP(32) * t748 - MDP(33) * t789 + MDP(34) * t1158 + MDP(35) * t676) * t795; t750 * t748 * MDP(29) + (-t748 ^ 2 + t750 ^ 2) * MDP(30) + (t1223 + t1286) * MDP(31) + (-t1187 + t1285) * MDP(32) + t713 * MDP(33) + (t676 * t789 - t683 * t750 - g(1) * t734 - g(2) * (t1077 * t823 + t1333) + g(3) * t766 + t1188) * MDP(34) + (-t1158 * t789 + t683 * t748 + g(1) * t735 - g(2) * (-t1072 * t823 + t1332) + g(3) * t767 - t1159) * MDP(35) + (-MDP(31) * t1264 - MDP(32) * t750 - MDP(34) * t676 + MDP(35) * t1158) * qJD(6);];
tau  = t1;
