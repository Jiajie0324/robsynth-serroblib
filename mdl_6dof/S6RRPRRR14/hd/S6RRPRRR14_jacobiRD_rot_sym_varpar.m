% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% S6RRPRRR14
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% JRD_rot [9x6]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:11
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = S6RRPRRR14_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14_jacobiRD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14_jacobiRD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRPRRR14_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRPRRR14_jacobiRD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:58
	% DurationCPUTime: 0.05s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:58
	% EndTime: 2019-10-10 11:10:58
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0, 0, 0; -t31, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; t31, 0, 0, 0, 0, 0; -t30, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:10:59
	% EndTime: 2019-10-10 11:10:59
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (27->13), mult. (88->22), div. (0->0), fcn. (88->6), ass. (0->21)
	t158 = sin(qJ(2));
	t159 = sin(qJ(1));
	t171 = t158 * t159;
	t161 = cos(qJ(1));
	t170 = t158 * t161;
	t160 = cos(qJ(2));
	t169 = t159 * t160;
	t168 = t160 * t161;
	t156 = sin(pkin(6));
	t167 = qJD(1) * t156;
	t166 = qJD(2) * t156;
	t157 = cos(pkin(6));
	t165 = -t157 * t168 + t171;
	t164 = t157 * t169 + t170;
	t163 = t157 * t170 + t169;
	t162 = t157 * t171 - t168;
	t155 = t162 * qJD(1) + t165 * qJD(2);
	t154 = t164 * qJD(1) + t163 * qJD(2);
	t153 = t163 * qJD(1) + t164 * qJD(2);
	t152 = t165 * qJD(1) + t162 * qJD(2);
	t1 = [t155, t152, 0, 0, 0, 0; -t153, -t154, 0, 0, 0, 0; 0, -t158 * t166, 0, 0, 0, 0; t154, t153, 0, 0, 0, 0; t152, t155, 0, 0, 0, 0; 0, -t160 * t166, 0, 0, 0, 0; -t159 * t167, 0, 0, 0, 0, 0; t161 * t167, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:00
	% EndTime: 2019-10-10 11:11:00
	% DurationCPUTime: 0.11s
	% Computational Cost: add. (78->24), mult. (267->57), div. (0->0), fcn. (267->10), ass. (0->32)
	t270 = sin(pkin(14));
	t274 = cos(pkin(7));
	t296 = t270 * t274;
	t273 = cos(pkin(14));
	t295 = t273 * t274;
	t278 = cos(qJ(2));
	t294 = t274 * t278;
	t276 = sin(qJ(2));
	t277 = sin(qJ(1));
	t293 = t276 * t277;
	t279 = cos(qJ(1));
	t292 = t276 * t279;
	t291 = t277 * t278;
	t290 = t278 * t279;
	t272 = sin(pkin(6));
	t289 = qJD(1) * t272;
	t288 = qJD(2) * t272;
	t287 = t277 * t289;
	t286 = t279 * t289;
	t275 = cos(pkin(6));
	t285 = -t275 * t290 + t293;
	t284 = t275 * t291 + t292;
	t283 = t275 * t292 + t291;
	t282 = t275 * t293 - t290;
	t266 = t285 * qJD(1) + t282 * qJD(2);
	t271 = sin(pkin(7));
	t281 = t266 * t274 + t271 * t286;
	t268 = t284 * qJD(1) + t283 * qJD(2);
	t280 = t268 * t274 - t271 * t287;
	t269 = t282 * qJD(1) + t285 * qJD(2);
	t267 = t283 * qJD(1) + t284 * qJD(2);
	t1 = [t269 * t273 + t280 * t270, t266 * t273 + t267 * t296, 0, 0, 0, 0; -t267 * t273 + t281 * t270, -t268 * t273 + t269 * t296, 0, 0, 0, 0; 0, (-t270 * t294 - t273 * t276) * t288, 0, 0, 0, 0; -t269 * t270 + t280 * t273, -t266 * t270 + t267 * t295, 0, 0, 0, 0; t267 * t270 + t281 * t273, t268 * t270 + t269 * t295, 0, 0, 0, 0; 0, (t270 * t276 - t273 * t294) * t288, 0, 0, 0, 0; -t268 * t271 - t274 * t287, -t267 * t271, 0, 0, 0, 0; -t266 * t271 + t274 * t286, -t269 * t271, 0, 0, 0, 0; 0, t278 * t271 * t288, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:03
	% EndTime: 2019-10-10 11:11:05
	% DurationCPUTime: 1.14s
	% Computational Cost: add. (488->96), mult. (1604->195), div. (0->0), fcn. (1726->14), ass. (0->85)
	t612 = cos(pkin(6));
	t614 = sin(qJ(2));
	t615 = sin(qJ(1));
	t651 = t615 * t614;
	t644 = t612 * t651;
	t617 = cos(qJ(2));
	t618 = cos(qJ(1));
	t648 = t618 * t617;
	t584 = -qJD(1) * t644 - qJD(2) * t651 + (qJD(2) * t612 + qJD(1)) * t648;
	t605 = sin(pkin(14));
	t609 = cos(pkin(14));
	t649 = t618 * t614;
	t650 = t615 * t617;
	t598 = t612 * t649 + t650;
	t625 = t612 * t650 + t649;
	t583 = t625 * qJD(1) + t598 * qJD(2);
	t607 = sin(pkin(7));
	t611 = cos(pkin(7));
	t608 = sin(pkin(6));
	t647 = qJD(1) * t608;
	t643 = t615 * t647;
	t621 = -t583 * t611 + t607 * t643;
	t561 = t584 * t609 + t621 * t605;
	t597 = -t612 * t648 + t651;
	t656 = t608 * t618;
	t628 = t597 * t611 + t607 * t656;
	t571 = -t598 * t609 + t628 * t605;
	t613 = sin(qJ(4));
	t616 = cos(qJ(4));
	t576 = t583 * t607 + t611 * t643;
	t606 = sin(pkin(8));
	t610 = cos(pkin(8));
	t668 = -t584 * t605 + t621 * t609;
	t638 = t576 * t606 + t668 * t610;
	t671 = (t598 * t605 + t628 * t609) * t610 + (-t597 * t607 + t611 * t656) * t606;
	t678 = -t561 * t616 - t638 * t613 + (-t571 * t613 + t616 * t671) * qJD(4);
	t677 = -t561 * t613 + t638 * t616 + (t571 * t616 + t613 * t671) * qJD(4);
	t653 = t611 * t614;
	t660 = t607 * t608;
	t623 = t606 * t614 * t660 + (-t605 * t617 - t609 * t653) * t608 * t610;
	t662 = t605 * t611;
	t661 = t606 * t607;
	t659 = t607 * t610;
	t658 = t607 * t612;
	t657 = t608 * t615;
	t655 = t609 * t611;
	t654 = t609 * t614;
	t652 = t611 * t617;
	t646 = qJD(2) * t608;
	t645 = t617 * t660;
	t642 = t618 * t647;
	t640 = qJD(2) * t645;
	t582 = t598 * qJD(1) + t625 * qJD(2);
	t624 = t644 - t648;
	t581 = t597 * qJD(1) + t624 * qJD(2);
	t622 = t581 * t611 + t607 * t642;
	t558 = t582 * t605 + t622 * t609;
	t574 = -t581 * t607 + t611 * t642;
	t639 = t558 * t610 + t574 * t606;
	t627 = t607 * t657 - t611 * t625;
	t634 = (t605 * t624 + t627 * t609) * t610 + (t607 * t625 + t611 * t657) * t606;
	t626 = -t605 * t614 + t609 * t652;
	t633 = -(t626 * t608 + t609 * t658) * t610 - (t612 * t611 - t645) * t606;
	t564 = -t581 * t605 + t582 * t655;
	t632 = t564 * t610 - t582 * t661;
	t566 = t583 * t605 - t584 * t655;
	t631 = t566 * t610 + t584 * t661;
	t630 = (t597 * t605 - t598 * t655) * t610 + t598 * t661;
	t629 = (t605 * t625 + t624 * t655) * t610 - t624 * t661;
	t595 = (-t605 * t653 + t609 * t617) * t608;
	t590 = t626 * t646;
	t620 = -t590 * t610 + t606 * t640;
	t619 = t623 * qJD(2);
	t593 = qJD(2) * t595;
	t591 = (-t605 * t652 - t654) * t646;
	t586 = t608 * t654 + (t608 * t652 + t658) * t605;
	t580 = -t609 * t625 + t624 * t662;
	t578 = -t597 * t609 - t598 * t662;
	t573 = t627 * t605 - t609 * t624;
	t567 = -t583 * t609 - t584 * t662;
	t565 = t581 * t609 + t582 * t662;
	t559 = -t582 * t609 + t622 * t605;
	t557 = t559 * t616 + t639 * t613 + (-t573 * t613 + t634 * t616) * qJD(4);
	t556 = -t559 * t613 + t639 * t616 + (-t573 * t616 - t634 * t613) * qJD(4);
	t1 = [t678, t565 * t616 + t632 * t613 + (-t580 * t613 + t629 * t616) * qJD(4), 0, t556, 0, 0; t557, t567 * t616 + t631 * t613 + (-t578 * t613 + t630 * t616) * qJD(4), 0, t677, 0, 0; 0, t591 * t616 + t620 * t613 + (-t595 * t613 + t623 * t616) * qJD(4), 0, -t593 * t613 + t619 * t616 + (-t586 * t616 + t633 * t613) * qJD(4), 0, 0; -t677, -t565 * t613 + t632 * t616 + (-t580 * t616 - t629 * t613) * qJD(4), 0, -t557, 0, 0; t556, -t567 * t613 + t631 * t616 + (-t578 * t616 - t630 * t613) * qJD(4), 0, t678, 0, 0; 0, -t591 * t613 + t620 * t616 + (-t595 * t616 - t623 * t613) * qJD(4), 0, -t593 * t616 - t619 * t613 + (t586 * t613 + t633 * t616) * qJD(4), 0, 0; -t576 * t610 + t606 * t668, -t564 * t606 - t582 * t659, 0, 0, 0, 0; -t558 * t606 + t574 * t610, -t566 * t606 + t584 * t659, 0, 0, 0, 0; 0, t590 * t606 + t610 * t640, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:11
	% EndTime: 2019-10-10 11:11:14
	% DurationCPUTime: 2.86s
	% Computational Cost: add. (1335->147), mult. (4251->289), div. (0->0), fcn. (4788->16), ass. (0->131)
	t927 = sin(qJ(2));
	t928 = sin(qJ(1));
	t987 = cos(pkin(6));
	t958 = t928 * t987;
	t953 = t927 * t958;
	t931 = cos(qJ(2));
	t932 = cos(qJ(1));
	t967 = t932 * t931;
	t968 = t928 * t927;
	t897 = -qJD(1) * t953 - qJD(2) * t968 + (qJD(2) * t987 + qJD(1)) * t967;
	t918 = sin(pkin(14));
	t922 = cos(pkin(14));
	t957 = t932 * t987;
	t911 = t927 * t957 + t928 * t931;
	t935 = t932 * t927 + t931 * t958;
	t896 = t935 * qJD(1) + t911 * qJD(2);
	t920 = sin(pkin(7));
	t924 = cos(pkin(7));
	t921 = sin(pkin(6));
	t966 = qJD(1) * t921;
	t961 = t928 * t966;
	t937 = -t896 * t924 + t920 * t961;
	t863 = t897 * t922 + t918 * t937;
	t926 = sin(qJ(4));
	t930 = cos(qJ(4));
	t862 = -t897 * t918 + t922 * t937;
	t886 = t896 * t920 + t924 * t961;
	t919 = sin(pkin(8));
	t923 = cos(pkin(8));
	t952 = t862 * t923 + t886 * t919;
	t910 = -t931 * t957 + t968;
	t973 = t921 * t932;
	t942 = t910 * t924 + t920 * t973;
	t881 = -t911 * t922 + t918 * t942;
	t880 = t911 * t918 + t922 * t942;
	t900 = -t910 * t920 + t924 * t973;
	t949 = t880 * t923 + t900 * t919;
	t998 = -t881 * t926 + t930 * t949;
	t839 = t998 * qJD(4) - t863 * t930 - t926 * t952;
	t846 = t862 * t919 - t886 * t923;
	t849 = t881 * t930 + t949 * t926;
	t866 = t880 * t919 - t900 * t923;
	t925 = sin(qJ(5));
	t929 = cos(qJ(5));
	t1008 = t839 * t929 + t846 * t925 + (-t849 * t925 - t866 * t929) * qJD(5);
	t1007 = t839 * t925 + (t849 * t929 - t866 * t925) * qJD(5) - t846 * t929;
	t837 = qJD(4) * t849 - t863 * t926 + t952 * t930;
	t895 = t911 * qJD(1) + t935 * qJD(2);
	t936 = t953 - t967;
	t894 = t910 * qJD(1) + t936 * qJD(2);
	t960 = t932 * t966;
	t938 = t894 * t924 + t920 * t960;
	t860 = t895 * t918 + t922 * t938;
	t884 = -t894 * t920 + t924 * t960;
	t988 = t860 * t923 + t884 * t919;
	t956 = t987 * t920;
	t969 = t924 * t931;
	t971 = t922 * t927;
	t899 = t921 * t971 + (t921 * t969 + t956) * t918;
	t940 = -t918 * t927 + t922 * t969;
	t898 = t940 * t921 + t922 * t956;
	t976 = t920 * t921;
	t909 = t987 * t924 - t931 * t976;
	t947 = t898 * t923 + t909 * t919;
	t859 = t899 * t930 + t926 * t947;
	t978 = t918 * t924;
	t977 = t919 * t920;
	t975 = t920 * t923;
	t974 = t921 * t928;
	t972 = t922 * t924;
	t970 = t924 * t927;
	t965 = qJD(2) * t921;
	t964 = qJD(5) * t925;
	t963 = qJD(5) * t929;
	t962 = t927 * t976;
	t959 = t920 * t965;
	t955 = t927 * t959;
	t954 = t931 * t959;
	t941 = t920 * t974 - t924 * t935;
	t882 = t918 * t936 + t922 * t941;
	t902 = t920 * t935 + t924 * t974;
	t948 = t882 * t923 + t902 * t919;
	t869 = -t894 * t918 + t895 * t972;
	t946 = -t869 * t923 + t895 * t977;
	t871 = t896 * t918 - t897 * t972;
	t945 = t871 * t923 + t897 * t977;
	t889 = t910 * t918 - t911 * t972;
	t944 = t889 * t923 + t911 * t977;
	t891 = t918 * t935 + t936 * t972;
	t943 = t891 * t923 - t936 * t977;
	t907 = (-t918 * t931 - t922 * t970) * t921;
	t939 = t907 * t923 + t919 * t962;
	t908 = (-t918 * t970 + t922 * t931) * t921;
	t903 = t940 * t965;
	t934 = -t903 * t923 + t919 * t954;
	t905 = qJD(2) * t907;
	t933 = t905 * t923 + t919 * t955;
	t883 = t918 * t941 - t922 * t936;
	t850 = -t883 * t926 + t948 * t930;
	t851 = t883 * t930 + t948 * t926;
	t858 = -t899 * t926 + t947 * t930;
	t890 = -t910 * t922 - t911 * t978;
	t855 = t890 * t930 + t944 * t926;
	t892 = -t922 * t935 + t936 * t978;
	t856 = t892 * t930 + t943 * t926;
	t873 = t908 * t930 + t939 * t926;
	t906 = qJD(2) * t908;
	t904 = (-t918 * t969 - t971) * t965;
	t893 = -t907 * t919 + t923 * t962;
	t888 = -t905 * t919 + t923 * t955;
	t887 = t903 * t919 + t923 * t954;
	t877 = -t898 * t919 + t909 * t923;
	t875 = -t891 * t919 - t936 * t975;
	t874 = -t889 * t919 + t911 * t975;
	t872 = -t896 * t922 - t897 * t978;
	t870 = t894 * t922 + t895 * t978;
	t868 = -t882 * t919 + t902 * t923;
	t861 = -t895 * t922 + t918 * t938;
	t854 = -t871 * t919 + t897 * t975;
	t853 = -t869 * t919 - t895 * t975;
	t852 = t904 * t930 + t934 * t926 + (-t908 * t926 + t930 * t939) * qJD(4);
	t844 = -t860 * t919 + t884 * t923;
	t843 = qJD(4) * t858 + t906 * t930 + t926 * t933;
	t842 = -t859 * qJD(4) - t906 * t926 + t933 * t930;
	t841 = t872 * t930 + t945 * t926 + (-t890 * t926 + t930 * t944) * qJD(4);
	t840 = t870 * t930 - t946 * t926 + (-t892 * t926 + t930 * t943) * qJD(4);
	t836 = t850 * qJD(4) + t861 * t930 + t988 * t926;
	t835 = qJD(4) * t851 + t861 * t926 - t988 * t930;
	t834 = t836 * t929 + t844 * t925 + (-t851 * t925 + t868 * t929) * qJD(5);
	t833 = -t836 * t925 + t844 * t929 + (-t851 * t929 - t868 * t925) * qJD(5);
	t1 = [t1008, t840 * t929 + t853 * t925 + (-t856 * t925 + t875 * t929) * qJD(5), 0, -t835 * t929 - t850 * t964, t833, 0; t834, t841 * t929 + t854 * t925 + (-t855 * t925 + t874 * t929) * qJD(5), 0, t837 * t929 + t964 * t998, t1007, 0; 0, t852 * t929 + t887 * t925 + (-t873 * t925 + t893 * t929) * qJD(5), 0, t842 * t929 - t858 * t964, -t843 * t925 + t888 * t929 + (-t859 * t929 - t877 * t925) * qJD(5), 0; -t1007, -t840 * t925 + t853 * t929 + (-t856 * t929 - t875 * t925) * qJD(5), 0, t835 * t925 - t850 * t963, -t834, 0; t833, -t841 * t925 + t854 * t929 + (-t855 * t929 - t874 * t925) * qJD(5), 0, -t837 * t925 + t963 * t998, t1008, 0; 0, -t852 * t925 + t887 * t929 + (-t873 * t929 - t893 * t925) * qJD(5), 0, -t842 * t925 - t858 * t963, -t843 * t929 - t888 * t925 + (t859 * t925 - t877 * t929) * qJD(5), 0; t837, qJD(4) * t856 + t870 * t926 + t930 * t946, 0, t836, 0, 0; t835, qJD(4) * t855 + t872 * t926 - t930 * t945, 0, -t839, 0, 0; 0, qJD(4) * t873 + t904 * t926 - t930 * t934, 0, t843, 0, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:11:22
	% EndTime: 2019-10-10 11:11:27
	% DurationCPUTime: 5.02s
	% Computational Cost: add. (3324->200), mult. (10387->377), div. (0->0), fcn. (12061->18), ass. (0->167)
	t1211 = sin(qJ(2));
	t1212 = sin(qJ(1));
	t1313 = cos(pkin(6));
	t1271 = t1212 * t1313;
	t1266 = t1211 * t1271;
	t1216 = cos(qJ(2));
	t1217 = cos(qJ(1));
	t1278 = t1217 * t1216;
	t1279 = t1212 * t1211;
	t1180 = -qJD(1) * t1266 - qJD(2) * t1279 + (qJD(2) * t1313 + qJD(1)) * t1278;
	t1201 = sin(pkin(14));
	t1205 = cos(pkin(14));
	t1270 = t1217 * t1313;
	t1194 = t1211 * t1270 + t1212 * t1216;
	t1243 = t1217 * t1211 + t1216 * t1271;
	t1179 = t1243 * qJD(1) + t1194 * qJD(2);
	t1207 = cos(pkin(7));
	t1203 = sin(pkin(7));
	t1204 = sin(pkin(6));
	t1285 = t1204 * t1212;
	t1277 = t1203 * t1285;
	t1247 = qJD(1) * t1277 - t1179 * t1207;
	t1145 = t1180 * t1205 + t1247 * t1201;
	t1210 = sin(qJ(4));
	t1215 = cos(qJ(4));
	t1202 = sin(pkin(8));
	t1206 = cos(pkin(8));
	t1273 = t1207 * t1285;
	t1248 = qJD(1) * t1273 + t1179 * t1203;
	t1319 = t1180 * t1201 - t1247 * t1205;
	t1327 = -t1248 * t1202 + t1206 * t1319;
	t1193 = -t1216 * t1270 + t1279;
	t1284 = t1204 * t1217;
	t1276 = t1203 * t1284;
	t1255 = t1193 * t1207 + t1276;
	t1166 = -t1194 * t1205 + t1255 * t1201;
	t1272 = t1207 * t1284;
	t1185 = -t1193 * t1203 + t1272;
	t1318 = t1194 * t1201 + t1255 * t1205;
	t1328 = t1185 * t1202 + t1206 * t1318;
	t1333 = -t1166 * t1210 + t1215 * t1328;
	t1103 = qJD(4) * t1333 - t1145 * t1215 + t1327 * t1210;
	t1128 = t1166 * t1215 + t1210 * t1328;
	t1148 = -t1185 * t1206 + t1202 * t1318;
	t1209 = sin(qJ(5));
	t1214 = cos(qJ(5));
	t1111 = t1128 * t1209 + t1148 * t1214;
	t1123 = t1202 * t1319 + t1248 * t1206;
	t1095 = -t1111 * qJD(5) + t1103 * t1214 - t1123 * t1209;
	t1102 = t1128 * qJD(4) - t1145 * t1210 - t1215 * t1327;
	t1113 = t1128 * t1214 - t1148 * t1209;
	t1208 = sin(qJ(6));
	t1213 = cos(qJ(6));
	t1347 = t1095 * t1208 + (t1113 * t1213 - t1208 * t1333) * qJD(6) - t1102 * t1213;
	t1346 = t1095 * t1213 + t1102 * t1208 + (-t1113 * t1208 - t1213 * t1333) * qJD(6);
	t1093 = t1113 * qJD(5) + t1103 * t1209 + t1123 * t1214;
	t1280 = t1207 * t1216;
	t1252 = -t1201 * t1211 + t1205 * t1280;
	t1269 = t1313 * t1203;
	t1225 = t1252 * t1204 + t1205 * t1269;
	t1275 = t1204 * t1216 * t1203;
	t1245 = t1313 * t1207 - t1275;
	t1331 = t1245 * t1202 + t1225 * t1206;
	t1281 = t1207 * t1211;
	t1251 = t1201 * t1216 + t1205 * t1281;
	t1190 = t1251 * t1204;
	t1286 = t1203 * t1211;
	t1246 = t1204 * t1202 * t1286 - t1190 * t1206;
	t1244 = t1266 - t1278;
	t1253 = -t1207 * t1243 + t1277;
	t1167 = t1253 * t1201 - t1205 * t1244;
	t1230 = -t1201 * t1244 - t1253 * t1205;
	t1254 = t1203 * t1243 + t1273;
	t1324 = -t1254 * t1202 + t1230 * t1206;
	t1129 = t1167 * t1210 + t1324 * t1215;
	t1282 = t1205 * t1211;
	t1183 = t1204 * t1282 + (t1204 * t1280 + t1269) * t1201;
	t1143 = t1183 * t1215 + t1331 * t1210;
	t1178 = t1194 * qJD(1) + t1243 * qJD(2);
	t1177 = t1193 * qJD(1) + t1244 * qJD(2);
	t1249 = qJD(1) * t1276 + t1177 * t1207;
	t1229 = t1178 * t1201 + t1249 * t1205;
	t1250 = qJD(1) * t1272 - t1177 * t1203;
	t1325 = t1250 * t1202 + t1229 * t1206;
	t1322 = t1246 * qJD(2);
	t1321 = -t1183 * t1210 + t1331 * t1215;
	t1191 = (-t1201 * t1281 + t1205 * t1216) * t1204;
	t1317 = -t1191 * t1210 + t1246 * t1215;
	t1289 = t1201 * t1207;
	t1174 = -t1205 * t1243 + t1244 * t1289;
	t1283 = t1205 * t1207;
	t1173 = t1201 * t1243 + t1244 * t1283;
	t1288 = t1203 * t1202;
	t1256 = t1173 * t1206 - t1244 * t1288;
	t1316 = -t1174 * t1210 + t1256 * t1215;
	t1172 = -t1193 * t1205 - t1194 * t1289;
	t1171 = t1193 * t1201 - t1194 * t1283;
	t1257 = t1171 * t1206 + t1194 * t1288;
	t1315 = -t1172 * t1210 + t1257 * t1215;
	t1312 = qJD(2) * t1204;
	t1310 = qJD(5) * t1209;
	t1309 = qJD(6) * t1208;
	t1308 = qJD(6) * t1213;
	t1307 = t1333 * t1214;
	t1306 = t1129 * t1214;
	t1305 = t1321 * t1214;
	t1287 = t1203 * t1206;
	t1274 = t1206 * t1286;
	t1268 = qJD(2) * t1275;
	t1144 = -t1178 * t1205 + t1249 * t1201;
	t1099 = -t1129 * qJD(4) + t1144 * t1215 + t1325 * t1210;
	t1265 = qJD(6) * t1306 + t1099;
	t1264 = qJD(6) * t1307 - t1103;
	t1188 = qJD(2) * t1191;
	t1119 = t1321 * qJD(4) + t1188 * t1215 + t1322 * t1210;
	t1263 = -qJD(6) * t1305 + t1119;
	t1130 = t1167 * t1215 - t1210 * t1324;
	t1150 = t1230 * t1202 + t1254 * t1206;
	t1115 = t1130 * t1214 + t1150 * t1209;
	t1114 = -t1130 * t1209 + t1150 * t1214;
	t1136 = t1172 * t1215 + t1257 * t1210;
	t1157 = -t1171 * t1202 + t1194 * t1287;
	t1116 = t1136 * t1214 + t1157 * t1209;
	t1138 = t1174 * t1215 + t1256 * t1210;
	t1158 = -t1173 * t1202 - t1244 * t1287;
	t1117 = t1138 * t1214 + t1158 * t1209;
	t1163 = -t1225 * t1202 + t1245 * t1206;
	t1121 = t1143 * t1214 + t1163 * t1209;
	t1120 = -t1143 * t1209 + t1163 * t1214;
	t1156 = t1191 * t1215 + t1246 * t1210;
	t1175 = t1190 * t1202 + t1204 * t1274;
	t1139 = t1156 * t1214 + t1175 * t1209;
	t1151 = -t1177 * t1201 + t1178 * t1283;
	t1259 = -t1151 * t1206 + t1178 * t1288;
	t1153 = t1179 * t1201 - t1180 * t1283;
	t1258 = t1153 * t1206 + t1180 * t1288;
	t1186 = t1252 * t1312;
	t1240 = -t1186 * t1206 + t1202 * t1268;
	t1098 = qJD(4) * t1130 + t1144 * t1210 - t1325 * t1215;
	t1237 = qJD(6) * t1130 - t1098 * t1214 + t1129 * t1310;
	t1236 = -qJD(6) * t1128 + t1102 * t1214 + t1310 * t1333;
	t1118 = t1143 * qJD(4) + t1188 * t1210 - t1322 * t1215;
	t1235 = qJD(6) * t1143 - t1118 * t1214 - t1310 * t1321;
	t1218 = -t1229 * t1202 + t1250 * t1206;
	t1187 = (-t1201 * t1280 - t1282) * t1312;
	t1170 = (t1251 * t1202 + t1274) * t1312;
	t1169 = t1186 * t1202 + t1206 * t1268;
	t1154 = -t1179 * t1205 - t1180 * t1289;
	t1152 = t1177 * t1205 + t1178 * t1289;
	t1134 = -t1153 * t1202 + t1180 * t1287;
	t1133 = -t1151 * t1202 - t1178 * t1287;
	t1132 = t1317 * qJD(4) + t1187 * t1215 + t1240 * t1210;
	t1131 = t1156 * qJD(4) + t1187 * t1210 - t1215 * t1240;
	t1110 = t1132 * t1214 + t1169 * t1209 + (-t1156 * t1209 + t1175 * t1214) * qJD(5);
	t1109 = t1315 * qJD(4) + t1154 * t1215 + t1258 * t1210;
	t1108 = t1136 * qJD(4) + t1154 * t1210 - t1258 * t1215;
	t1107 = t1316 * qJD(4) + t1152 * t1215 - t1259 * t1210;
	t1106 = t1138 * qJD(4) + t1152 * t1210 + t1259 * t1215;
	t1105 = t1120 * qJD(5) + t1119 * t1214 + t1170 * t1209;
	t1104 = -t1121 * qJD(5) - t1119 * t1209 + t1170 * t1214;
	t1097 = t1109 * t1214 + t1134 * t1209 + (-t1136 * t1209 + t1157 * t1214) * qJD(5);
	t1096 = t1107 * t1214 + t1133 * t1209 + (-t1138 * t1209 + t1158 * t1214) * qJD(5);
	t1092 = t1114 * qJD(5) + t1099 * t1214 + t1218 * t1209;
	t1091 = t1115 * qJD(5) + t1099 * t1209 - t1218 * t1214;
	t1090 = t1092 * t1213 + t1098 * t1208 + (-t1115 * t1208 + t1129 * t1213) * qJD(6);
	t1089 = -t1092 * t1208 + t1098 * t1213 + (-t1115 * t1213 - t1129 * t1208) * qJD(6);
	t1 = [t1346, t1096 * t1213 + t1106 * t1208 + (-t1117 * t1208 - t1213 * t1316) * qJD(6), 0, t1265 * t1208 + t1237 * t1213, -t1091 * t1213 - t1114 * t1309, t1089; t1090, t1097 * t1213 + t1108 * t1208 + (-t1116 * t1208 - t1213 * t1315) * qJD(6), 0, t1264 * t1208 + t1236 * t1213, t1093 * t1213 - t1111 * t1309, t1347; 0, t1110 * t1213 + t1131 * t1208 + (-t1139 * t1208 - t1213 * t1317) * qJD(6), 0, t1263 * t1208 + t1235 * t1213, t1104 * t1213 - t1120 * t1309, -t1105 * t1208 + t1118 * t1213 + (-t1121 * t1213 + t1208 * t1321) * qJD(6); -t1347, -t1096 * t1208 + t1106 * t1213 + (-t1117 * t1213 + t1208 * t1316) * qJD(6), 0, -t1237 * t1208 + t1265 * t1213, t1091 * t1208 - t1114 * t1308, -t1090; t1089, -t1097 * t1208 + t1108 * t1213 + (-t1116 * t1213 + t1208 * t1315) * qJD(6), 0, -t1236 * t1208 + t1264 * t1213, -t1093 * t1208 - t1111 * t1308, t1346; 0, -t1110 * t1208 + t1131 * t1213 + (-t1139 * t1213 + t1208 * t1317) * qJD(6), 0, -t1235 * t1208 + t1263 * t1213, -t1104 * t1208 - t1120 * t1308, -t1105 * t1213 - t1118 * t1208 + (t1121 * t1208 + t1213 * t1321) * qJD(6); t1093, t1117 * qJD(5) + t1107 * t1209 - t1133 * t1214, 0, -qJD(5) * t1306 - t1098 * t1209, t1092, 0; t1091, t1116 * qJD(5) + t1109 * t1209 - t1134 * t1214, 0, -qJD(5) * t1307 + t1102 * t1209, -t1095, 0; 0, t1139 * qJD(5) + t1132 * t1209 - t1169 * t1214, 0, qJD(5) * t1305 - t1118 * t1209, t1105, 0;];
	JRD_rot = t1;
else
	JRD_rot=NaN(9,6);
end