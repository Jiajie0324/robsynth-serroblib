% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRPRRR14V3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-04-12 15:12
% Revision: b693519ea345eb34ae9622239e7f1167217e9d53 (2019-04-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR14V3_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14V3_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S6RRPRRR14V3_inertiaJ_regmin_slag_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
t23 = sin(qJ(6));
t27 = cos(qJ(6));
t29 = cos(qJ(4));
t25 = sin(qJ(4));
t28 = cos(qJ(5));
t62 = t28 * t25;
t7 = t23 * t62 + t27 * t29;
t86 = -0.2e1 * t7;
t30 = cos(qJ(2));
t26 = sin(qJ(2));
t15 = t29 * t26;
t24 = sin(qJ(5));
t46 = t24 * t15;
t8 = t30 * t28 + t46;
t85 = -0.2e1 * t8;
t84 = 0.2e1 * t24;
t83 = 2 * qJ(3);
t14 = t25 * t26;
t45 = t28 * t15;
t9 = -t30 * t24 + t45;
t2 = t23 * t14 + t9 * t27;
t82 = t2 * t23;
t81 = t2 * t28;
t66 = t25 * t27;
t1 = t9 * t23 - t26 * t66;
t80 = t28 * t1;
t79 = t28 * t7;
t78 = t8 * t28;
t77 = t9 * t24;
t61 = t28 * t27;
t10 = -t23 * t29 + t25 * t61;
t76 = t10 * t23;
t75 = t10 * t28;
t18 = t25 ^ 2;
t74 = t18 * t24;
t73 = t18 * t28;
t72 = t23 * t24;
t71 = t23 * t25;
t70 = t23 * t27;
t69 = t24 * t25;
t68 = t24 * t28;
t67 = t24 * t29;
t65 = t25 * t29;
t64 = t27 * t24;
t63 = t28 * t23;
t60 = t28 * t29;
t59 = t29 * t30;
t58 = qJ(3) * t30;
t57 = t25 * qJ(3);
t56 = t29 * qJ(3);
t55 = -0.2e1 * t68;
t54 = 0.2e1 * t68;
t53 = -0.2e1 * t65;
t52 = 0.2e1 * t65;
t51 = 0.2e1 * t26 * t30;
t50 = t8 * t72;
t49 = t8 * t64;
t17 = t24 ^ 2;
t48 = t17 * t71;
t47 = t24 * t14;
t44 = t17 * t66;
t43 = t24 * t62;
t42 = t25 * t15;
t41 = t17 * t56;
t40 = t24 * t56;
t39 = t26 * t57;
t38 = t26 * t58;
t37 = t26 * t56;
t36 = 0.2e1 * t38;
t35 = t17 * t39;
t34 = t24 * t39;
t33 = t28 * t39;
t22 = t29 ^ 2;
t32 = (t18 + t22) * t83;
t31 = qJ(3) ^ 2;
t21 = t28 ^ 2;
t20 = t27 ^ 2;
t19 = t26 ^ 2;
t16 = t23 ^ 2;
t13 = t26 * t62;
t6 = (t27 * t60 + t71) * qJ(3);
t5 = (-t23 * t60 + t66) * qJ(3);
t4 = -t23 * t37 + t27 * t33;
t3 = qJ(3) * t26 * t7;
t11 = [1, 0, 0, t19, t51, 0, 0, 0, 0, 0, t36, 0, t19 * t83, t19 * t31, t22 * t19, t19 * t53, -0.2e1 * t26 * t59, t25 * t51, t30 ^ 2, t29 * t36, -0.2e1 * t25 * t38, t9 ^ 2, t9 * t85, 0.2e1 * t9 * t14, t14 * t85, t18 * t19 (t8 * t15 + t19 * t74) * t83 (t9 * t15 + t19 * t73) * t83, t2 ^ 2, -0.2e1 * t2 * t1, 0.2e1 * t2 * t8, t1 * t85, t8 ^ 2, -0.2e1 * t1 * t34 + 0.2e1 * t3 * t8, -0.2e1 * t2 * t34 + 0.2e1 * t4 * t8; 0, 0, 0, 0, 0, t26, t30, 0, 0, 0, 0, t58, 0, 0, t42 (-t18 + t22) * t26, -t25 * t30, -t59, 0, t30 * t57, t30 * t56, t9 * t62 (-t77 - t78) * t25, t26 * t73 - t9 * t29, -t26 * t74 + t8 * t29, -t42 (t8 - t46) * t57 (t9 - t45) * t57, t2 * t10, -t10 * t1 - t2 * t7, t10 * t8 + t2 * t69, -t1 * t69 - t7 * t8, t8 * t69, t5 * t8 + (t25 * t3 + (t1 * t29 - t7 * t14) * qJ(3)) * t24, -t6 * t8 + (t25 * t4 + (-t10 * t14 + t2 * t29) * qJ(3)) * t24; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t31, t18, t52, 0, 0, 0, 0, 0, t21 * t18, t18 * t55, t28 * t53, t24 * t52, t22, t24 * t32, t28 * t32, t10 ^ 2, t10 * t86, 0.2e1 * t10 * t69, t69 * t86, t17 * t18 (t25 * t5 + t7 * t56) * t84 (t10 * t56 - t25 * t6) * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, t14, t15, 0, 0, 0, 0, 0, t13, -t47, 0, 0, 0, 0, 0, -t50 - t80, -t49 - t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t25, 0, 0, 0, 0, 0, -t60, t67, 0, 0, 0, 0, 0, -t48 - t79, -t44 - t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t14, -t30, -t37, t39, t77, -t24 * t8 + t9 * t28, t47, t13, 0, -t28 * t37, t24 * t37, t2 * t64 (-t1 * t27 - t82) * t24, t49 - t81, -t50 + t80, -t78, -t23 * t35 - t3 * t28, -t27 * t35 - t4 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t29, 0, -t57, -t56, t43 (-t17 + t21) * t25, -t67, -t60, 0, -t28 * t57, t24 * t57, t10 * t64 (-t27 * t7 - t76) * t24, t44 - t75, -t48 + t79, -t43, t23 * t41 - t5 * t28, t27 * t41 + t6 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t17, t54, 0, 0, 0, 0, 0, t20 * t17, -0.2e1 * t17 * t70, t27 * t55, t23 * t54, t21, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, -t8, t14, t34, t33, t82, -t23 * t1 + t2 * t27, t23 * t8, t27 * t8, 0, t27 * t34, -t23 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t69, -t29, -t40, -t28 * t56, t76, t10 * t27 - t23 * t7, t23 * t69, t25 * t64, 0, -t27 * t40, t23 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t24, 0, 0, 0, 0, 0, t61, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, t28, 0, 0, 0, t23 * t64 (-t16 + t20) * t24, -t63, -t61, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t16, 0.2e1 * t70, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t1, t8, t3, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t7, t69, t5, -t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72, -t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t72, -t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, t27, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t11;
