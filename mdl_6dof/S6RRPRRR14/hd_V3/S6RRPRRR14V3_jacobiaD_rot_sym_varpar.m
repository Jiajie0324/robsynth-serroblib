% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRPRRR14V3
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRPRRR14V3_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:13
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRPRRR14V3_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR14V3_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR14V3_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRPRRR14V3_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S6RRPRRR14V3_jacobiaD_rot_sym_varpar: pkin has to be [1x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:23
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:23
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:23
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:23
	% DurationCPUTime: 0.77s
	% Computational Cost: add. (776->71), mult. (1835->159), div. (470->13), fcn. (2177->7), ass. (0->71)
	t80 = sin(qJ(1));
	t111 = qJD(1) * t80;
	t131 = 0.2e1 * t80;
	t71 = t80 ^ 2;
	t82 = cos(qJ(1));
	t75 = t82 ^ 2;
	t76 = 0.1e1 / t82;
	t129 = (t71 / t75 + 0.1e1) * t76 * t111;
	t79 = sin(qJ(2));
	t112 = t80 * t79;
	t81 = cos(qJ(2));
	t61 = atan2(-t112, -t81);
	t59 = sin(t61);
	t103 = t59 * t112;
	t60 = cos(t61);
	t55 = -t60 * t81 - t103;
	t52 = 0.1e1 / t55;
	t72 = 0.1e1 / t81;
	t53 = 0.1e1 / t55 ^ 2;
	t73 = 0.1e1 / t81 ^ 2;
	t128 = -0.2e1 * t79;
	t69 = t79 ^ 2;
	t116 = t69 * t73;
	t66 = t71 * t116 + 0.1e1;
	t62 = 0.1e1 / t66;
	t127 = t62 - 0.1e1;
	t110 = qJD(1) * t82;
	t101 = t79 * t110;
	t109 = qJD(2) * t80;
	t118 = t60 * t79;
	t108 = qJD(2) * t81;
	t48 = (-(-t80 * t108 - t101) * t72 + t109 * t116) * t62;
	t44 = (-t48 * t80 + qJD(2)) * t118 + (-t101 + (t48 - t109) * t81) * t59;
	t126 = t44 * t52 * t53;
	t125 = t48 * t59;
	t124 = t48 * t79;
	t123 = t53 * t79;
	t122 = t53 * t82;
	t113 = t72 * t79;
	t68 = t79 * t69;
	t74 = t72 * t73;
	t90 = qJD(2) * (t68 * t74 + t113);
	t94 = t69 * t80 * t110;
	t121 = (t71 * t90 + t73 * t94) / t66 ^ 2;
	t100 = 0.1e1 + t116;
	t58 = t100 * t80 * t62;
	t120 = t58 * t80;
	t119 = t59 * t81;
	t117 = t69 * t72;
	t115 = t69 * t75;
	t114 = t71 / t82 ^ 2;
	t51 = t53 * t115 + 0.1e1;
	t107 = 0.2e1 * (-t115 * t126 + (t75 * t79 * t108 - t94) * t53) / t51 ^ 2;
	t106 = 0.2e1 * t126;
	t67 = t73 * t114 + 0.1e1;
	t105 = 0.2e1 * (t74 * qJD(2) * t79 * t114 + t73 * t129) / t67 ^ 2;
	t104 = t79 * t122;
	t102 = t62 * t117;
	t99 = 0.1e1 + t114;
	t98 = t79 * t107;
	t97 = t121 * t128;
	t96 = t121 * t131;
	t95 = t80 * t102;
	t93 = t100 * t82;
	t91 = t99 * t79 * t73;
	t64 = 0.1e1 / t67;
	t49 = 0.1e1 / t51;
	t47 = (t127 * t79 * t59 - t60 * t95) * t82;
	t46 = -t80 * t119 + t118 + (-t60 * t112 + t119) * t58;
	t45 = -t100 * t96 + (qJD(1) * t93 + t90 * t131) * t62;
	t1 = [t82 * t72 * t97 + (qJD(2) * t93 - t111 * t113) * t62, t45, 0, 0, 0, 0; (t52 * t98 + (-t52 * t108 + (qJD(1) * t47 + t44) * t123) * t49) * t80 + (t53 * t98 * t47 + (-((t127 * t108 + t48 * t95 + t97) * t59 + (t96 * t117 - t124 + (t124 + (-t68 * t73 + t128) * t109) * t62) * t60) * t104 + (t79 * t106 - t53 * t108) * t47 + (-t52 + ((-t71 + t75) * t60 * t102 + t127 * t103) * t53) * t79 * qJD(1)) * t49) * t82, (t46 * t123 - t52 * t81) * t82 * t107 + ((-t52 * t111 + (-qJD(2) * t46 - t44) * t122) * t81 + (-t82 * qJD(2) * t52 - (-t45 * t60 * t80 + t59 * t109 + t120 * t125 - t125 + (-qJD(2) * t59 - t110 * t60) * t58) * t104 + (t82 * t106 + t53 * t111) * t46 - ((t45 - t110) * t59 + ((0.1e1 - t120) * qJD(2) + (t58 - t80) * t48) * t60) * t81 * t122) * t79) * t49, 0, 0, 0, 0; t99 * t72 * t105 + (-qJD(2) * t91 - 0.2e1 * t72 * t129) * t64, t76 * t73 * t105 * t112 + ((-0.2e1 * t69 * t74 - t72) * t76 * t109 - qJD(1) * t91) * t64, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:24
	% DurationCPUTime: 1.03s
	% Computational Cost: add. (1002->94), mult. (2519->212), div. (480->12), fcn. (2968->9), ass. (0->91)
	t125 = sin(qJ(1));
	t118 = t125 ^ 2;
	t124 = sin(qJ(2));
	t117 = t124 ^ 2;
	t127 = cos(qJ(2));
	t120 = 0.1e1 / t127 ^ 2;
	t172 = t117 * t120;
	t112 = t118 * t172 + 0.1e1;
	t116 = t124 * t117;
	t119 = 0.1e1 / t127;
	t171 = t119 * t124;
	t136 = qJD(2) * (t116 * t119 * t120 + t171);
	t128 = cos(qJ(1));
	t162 = qJD(1) * t128;
	t149 = t125 * t162;
	t179 = 0.1e1 / t112 ^ 2 * (t118 * t136 + t149 * t172);
	t191 = -0.2e1 * t179;
	t110 = 0.1e1 / t112;
	t145 = 0.1e1 + t172;
	t188 = t125 * t145;
	t97 = t110 * t188;
	t190 = t125 * t97 - 0.1e1;
	t123 = sin(qJ(4));
	t126 = cos(qJ(4));
	t164 = t127 * t128;
	t106 = t125 * t123 + t126 * t164;
	t101 = 0.1e1 / t106 ^ 2;
	t166 = t125 * t126;
	t105 = t123 * t164 - t166;
	t174 = t105 * t126;
	t100 = 0.1e1 / t106;
	t176 = t100 * t123;
	t138 = t101 * t174 - t176;
	t99 = t105 ^ 2;
	t98 = t101 * t99 + 0.1e1;
	t95 = 0.1e1 / t98;
	t189 = t138 * t95;
	t167 = t125 * t124;
	t109 = atan2(-t167, -t127);
	t108 = cos(t109);
	t107 = sin(t109);
	t153 = t107 * t167;
	t93 = -t108 * t127 - t153;
	t90 = 0.1e1 / t93;
	t91 = 0.1e1 / t93 ^ 2;
	t187 = t110 - 0.1e1;
	t122 = t128 ^ 2;
	t160 = qJD(2) * t127;
	t154 = t91 * t160;
	t150 = t124 * t162;
	t161 = qJD(2) * t125;
	t173 = t108 * t124;
	t148 = t120 * t161;
	t84 = (-(-t125 * t160 - t150) * t119 + t117 * t148) * t110;
	t79 = (-t125 * t84 + qJD(2)) * t173 + (-t150 + (t84 - t161) * t127) * t107;
	t185 = t79 * t90 * t91;
	t89 = t117 * t122 * t91 + 0.1e1;
	t186 = (t122 * t124 * t154 + (-t122 * t185 - t91 * t149) * t117) / t89 ^ 2;
	t175 = t101 * t105;
	t142 = -qJD(1) * t127 + qJD(4);
	t143 = qJD(4) * t127 - qJD(1);
	t159 = qJD(2) * t128;
	t147 = t124 * t159;
	t170 = t123 * t128;
	t86 = -t143 * t170 + (t142 * t125 - t147) * t126;
	t181 = t100 * t101 * t86;
	t165 = t125 * t127;
	t137 = t123 * t165 + t126 * t128;
	t85 = t137 * qJD(1) - t106 * qJD(4) + t123 * t147;
	t184 = (-t85 * t175 - t99 * t181) / t98 ^ 2;
	t87 = 0.1e1 / t89;
	t183 = t87 * t91;
	t182 = t90 * t87;
	t177 = qJD(2) * t97;
	t169 = t124 * t128;
	t163 = qJD(1) * t125;
	t158 = 0.2e1 * t185;
	t157 = -0.2e1 * t184;
	t156 = t90 * t186;
	t155 = t105 * t181;
	t152 = t110 * t117 * t119;
	t146 = 0.2e1 * t91 * t186;
	t144 = t119 * t191;
	t141 = t125 * t152;
	t140 = t145 * t128;
	t139 = t142 * t128;
	t104 = -t126 * t165 + t170;
	t83 = (t187 * t124 * t107 - t108 * t141) * t128;
	t82 = -t190 * t173 + (-t125 + t97) * t127 * t107;
	t80 = t188 * t191 + (qJD(1) * t140 + 0.2e1 * t125 * t136) * t110;
	t1 = [t144 * t169 + (qJD(2) * t140 - t163 * t171) * t110, t80, 0, 0, 0, 0; (-t160 * t182 + (0.2e1 * t156 + (qJD(1) * t83 + t79) * t183) * t124) * t125 + (t83 * t146 * t124 + (-t83 * t154 + (t83 * t158 + ((0.2e1 * t124 * t179 - t84 * t141 - t187 * t160) * t107 + (t117 * t125 * t144 + t124 * t84 + (t116 * t148 - (t84 - 0.2e1 * t161) * t124) * t110) * t108) * t91 * t128) * t124 + (-t90 + (-(t118 - t122) * t108 * t152 + t187 * t153) * t91) * t124 * qJD(1)) * t87) * t128, (-t163 * t182 + (-0.2e1 * t156 + (-qJD(2) * t82 - t79) * t183) * t128) * t127 + (t82 * t128 * t146 + (-t90 * t159 - ((-t125 * t80 - t162 * t97) * t108 + (t190 * t84 + t161 - t177) * t107) * t91 * t169 + (t128 * t158 + t91 * t163) * t82) * t87 - ((t80 - t162) * t107 + (t84 * t97 + qJD(2) + (-t84 - t177) * t125) * t108) * t164 * t183) * t124, 0, 0, 0, 0; 0.2e1 * (t100 * t137 + t104 * t175) * t184 + (0.2e1 * t104 * t155 - t143 * t100 * t166 + (t124 * t161 + t139) * t176 + (t137 * t86 + t104 * t85 - t139 * t174 - (qJD(2) * t124 * t126 + t143 * t123) * t105 * t125) * t101) * t95, t127 * t159 * t189 + (-t163 * t189 + (t138 * t157 + ((-qJD(4) * t100 - 0.2e1 * t155) * t126 + (-t126 * t85 + (-qJD(4) * t105 + t86) * t123) * t101) * t95) * t128) * t124, 0, t157 + 0.2e1 * (-t101 * t85 * t95 + (-t101 * t184 - t95 * t181) * t105) * t105, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:23
	% EndTime: 2019-10-10 11:13:25
	% DurationCPUTime: 2.07s
	% Computational Cost: add. (2288->151), mult. (7495->320), div. (1129->14), fcn. (9361->11), ass. (0->133)
	t200 = cos(qJ(2));
	t196 = sin(qJ(4));
	t287 = sin(qJ(1));
	t237 = t287 * t196;
	t199 = cos(qJ(4));
	t201 = cos(qJ(1));
	t263 = t201 * t199;
	t177 = t200 * t263 + t237;
	t195 = sin(qJ(5));
	t198 = cos(qJ(5));
	t197 = sin(qJ(2));
	t265 = t197 * t201;
	t161 = t177 * t195 - t198 * t265;
	t291 = 0.2e1 * t161;
	t162 = t177 * t198 + t195 * t265;
	t156 = 0.1e1 / t162;
	t157 = 0.1e1 / t162 ^ 2;
	t279 = t157 * t161;
	t217 = t195 * t156 - t198 * t279;
	t290 = -qJD(5) * t199 + qJD(2);
	t173 = t200 * t237 + t263;
	t228 = t287 * qJD(4);
	t220 = t196 * t228;
	t257 = qJD(4) * t201;
	t232 = t199 * t257;
	t260 = qJD(2) * t201;
	t234 = t197 * t260;
	t151 = t173 * qJD(1) + t196 * t234 - t200 * t232 - t220;
	t236 = t287 * t199;
	t264 = t201 * t196;
	t176 = t200 * t264 - t236;
	t189 = 0.1e1 / t196;
	t190 = 0.1e1 / t196 ^ 2;
	t192 = 0.1e1 / t197;
	t193 = 0.1e1 / t197 ^ 2;
	t261 = qJD(2) * t200;
	t235 = t193 * t261;
	t258 = qJD(4) * t199;
	t271 = t189 * t192;
	t289 = (t190 * t192 * t258 + t189 * t235) * t176 + t151 * t271;
	t267 = t197 * t196;
	t167 = atan2(-t173, t267);
	t164 = cos(t167);
	t163 = sin(t167);
	t277 = t163 * t173;
	t147 = t164 * t267 - t277;
	t144 = 0.1e1 / t147;
	t145 = 0.1e1 / t147 ^ 2;
	t288 = 0.2e1 * t176;
	t171 = t173 ^ 2;
	t270 = t190 * t193;
	t168 = t171 * t270 + 0.1e1;
	t165 = 0.1e1 / t168;
	t214 = t196 * t261 + t197 * t258;
	t242 = t173 * t270;
	t229 = qJD(2) * t287;
	t221 = t197 * t229;
	t230 = qJD(1) * t287;
	t262 = qJD(1) * t201;
	t153 = (t228 * t200 - t230) * t199 + (t262 * t200 - t221 - t257) * t196;
	t245 = t153 * t271;
	t135 = (t214 * t242 - t245) * t165;
	t212 = -t135 * t173 + t214;
	t130 = (-t135 * t267 - t153) * t163 + t212 * t164;
	t146 = t144 * t145;
	t286 = t130 * t146;
	t211 = qJD(5) * t177 + t197 * t230 - t200 * t260;
	t152 = (-qJD(4) * t200 + qJD(1)) * t264 + (-t200 * t230 + t228 - t234) * t199;
	t219 = qJD(5) * t265 + t152;
	t137 = t219 * t195 + t211 * t198;
	t155 = t161 ^ 2;
	t150 = t155 * t157 + 0.1e1;
	t138 = -t211 * t195 + t219 * t198;
	t158 = t156 * t157;
	t283 = t138 * t158;
	t285 = (t137 * t279 - t155 * t283) / t150 ^ 2;
	t191 = t189 * t190;
	t194 = t192 * t193;
	t233 = t193 * t258;
	t284 = (t153 * t242 + (-t190 * t194 * t261 - t191 * t233) * t171) / t168 ^ 2;
	t282 = t145 * t176;
	t148 = 0.1e1 / t150;
	t281 = t148 * t157;
	t280 = t151 * t145;
	t266 = t197 * t199;
	t170 = (t195 * t200 - t198 * t266) * t201;
	t278 = t161 * t170;
	t276 = t163 * t176;
	t275 = t163 * t197;
	t274 = t164 * t173;
	t273 = t164 * t176;
	t272 = t164 * t200;
	t269 = t190 * t199;
	t259 = qJD(4) * t196;
	t172 = t176 ^ 2;
	t142 = t145 * t172 + 0.1e1;
	t255 = 0.2e1 * (-t172 * t286 - t176 * t280) / t142 ^ 2;
	t254 = -0.2e1 * t285;
	t253 = 0.2e1 * t285;
	t252 = -0.2e1 * t284;
	t251 = t146 * t288;
	t250 = t157 * t285;
	t249 = t192 * t284;
	t248 = t137 * t281;
	t247 = t145 * t276;
	t244 = t161 * t283;
	t243 = t173 * t271;
	t241 = t189 * t193 * t200;
	t239 = t197 * t287;
	t238 = t200 * t287;
	t215 = t173 * t241 + t287;
	t143 = t215 * t165;
	t231 = t287 - t143;
	t227 = t144 * t255;
	t226 = t145 * t255;
	t224 = t189 * t249;
	t223 = t195 * t239;
	t222 = t198 * t239;
	t154 = t177 * qJD(1) - t199 * t221 - t200 * t220 - t232;
	t218 = -qJD(5) * t239 - t154;
	t175 = t200 * t236 - t264;
	t216 = t173 * t269 - t175 * t189;
	t210 = -qJD(5) * t175 + t197 * t262 + t200 * t229;
	t169 = (-t195 * t266 - t198 * t200) * t201;
	t160 = -t175 * t198 - t223;
	t140 = 0.1e1 / t142;
	t139 = t216 * t192 * t165;
	t134 = (-t163 + (t164 * t243 + t163) * t165) * t176;
	t133 = -t143 * t274 + (t231 * t275 + t272) * t196;
	t131 = t164 * t266 - t163 * t175 + (-t163 * t267 - t274) * t139;
	t129 = t215 * t252 + (t153 * t241 + t262 + (-t190 * t200 * t233 + (-0.2e1 * t194 * t200 ^ 2 - t192) * t189 * qJD(2)) * t173) * t165;
	t127 = -0.2e1 * t216 * t249 + (-t216 * t235 + (t153 * t269 - t154 * t189 + (t175 * t269 + (-0.2e1 * t191 * t199 ^ 2 - t189) * t173) * qJD(4)) * t192) * t165;
	t1 = [t289 * t165 + t224 * t288, t129, 0, t127, 0, 0; t173 * t227 + (-t153 * t144 + (t130 * t173 + t134 * t151) * t145) * t140 + (t134 * t226 + (0.2e1 * t134 * t286 + (t151 * t165 - t151 - (-t135 * t165 * t243 + t252) * t176) * t145 * t163 + (-(-0.2e1 * t173 * t224 - t135) * t282 + (-(t135 + t245) * t176 + t289 * t173) * t145 * t165) * t164) * t140) * t176, t133 * t176 * t226 + (-(-t129 * t274 + (t135 * t277 - t153 * t164) * t143) * t282 + (t130 * t251 + t280) * t133 + (-t144 * t265 - (-t143 * t275 + t163 * t239 + t272) * t282) * t258) * t140 + (t227 * t265 + ((-t144 * t260 - (t231 * qJD(2) - t135) * t247) * t200 + (t144 * t230 + (t201 * t130 - (-t129 + t262) * t276 - (t231 * t135 - qJD(2)) * t273) * t145) * t197) * t140) * t196, 0, (t131 * t282 - t144 * t177) * t255 + (t131 * t280 + t152 * t144 + (t131 * t251 - t145 * t177) * t130 - (t199 * t261 - t197 * t259 - t127 * t173 - t139 * t153 + (-t139 * t267 - t175) * t135) * t145 * t273 - (-t154 + (-t127 * t196 - t135 * t199) * t197 - t212 * t139) * t247) * t140, 0, 0; (t250 * t291 - t248) * t160 + (-t138 * t281 + t156 * t254) * (-t175 * t195 + t222) + ((t218 * t195 + t210 * t198) * t156 - (-t210 * t195 + t218 * t198) * t279 + 0.2e1 * t160 * t244) * t148, (-t156 * t169 + t157 * t278) * t253 + (-t170 * t137 * t157 + (-t169 * t157 + 0.2e1 * t158 * t278) * t138 + ((t198 * t238 + t199 * t223) * t156 - (-t195 * t238 + t199 * t222) * t279) * qJD(1) + (((t195 * t259 + t290 * t198) * t156 - (-t290 * t195 + t198 * t259) * t279) * t197 + t217 * t200 * (-qJD(2) * t199 + qJD(5))) * t201) * t148, 0, t217 * t176 * t253 + (t217 * t151 + ((-qJD(5) * t156 - 0.2e1 * t244) * t198 + (t137 * t198 + (-qJD(5) * t161 + t138) * t195) * t157) * t176) * t148, t254 + (t248 + (-t148 * t283 - t250) * t161) * t291, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:13:24
	% EndTime: 2019-10-10 11:13:27
	% DurationCPUTime: 3.48s
	% Computational Cost: add. (6638->203), mult. (19789->388), div. (992->12), fcn. (24542->13), ass. (0->160)
	t301 = sin(qJ(5));
	t303 = sin(qJ(2));
	t302 = sin(qJ(4));
	t370 = qJD(4) * t302;
	t308 = cos(qJ(2));
	t307 = cos(qJ(4));
	t337 = qJD(2) * t307 - qJD(5);
	t407 = t337 * t308;
	t413 = (-t303 * t370 + t407) * t301;
	t304 = sin(qJ(1));
	t372 = qJD(2) * t308;
	t309 = cos(qJ(1));
	t379 = t303 * t309;
	t412 = qJD(1) * t379 + t304 * t372;
	t306 = cos(qJ(5));
	t338 = qJD(5) * t307 - qJD(2);
	t410 = (t301 * t338 + t306 * t370) * t303 - t306 * t407;
	t374 = t309 * t302;
	t376 = t307 * t308;
	t284 = t304 * t376 - t374;
	t381 = t303 * t306;
	t267 = t284 * t301 - t304 * t381;
	t380 = t303 * t307;
	t281 = t301 * t380 + t306 * t308;
	t260 = atan2(-t267, t281);
	t248 = sin(t260);
	t249 = cos(t260);
	t229 = -t248 * t267 + t249 * t281;
	t227 = 0.1e1 / t229 ^ 2;
	t375 = t307 * t309;
	t378 = t304 * t302;
	t287 = t308 * t375 + t378;
	t272 = t287 * t301 - t306 * t379;
	t266 = t272 ^ 2;
	t225 = t227 * t266 + 0.1e1;
	t339 = -qJD(1) * t308 + qJD(4);
	t368 = qJD(4) * t308;
	t340 = qJD(1) - t368;
	t371 = qJD(2) * t309;
	t350 = t303 * t371;
	t256 = t340 * t374 + (t304 * t339 - t350) * t307;
	t273 = t287 * t306 + t301 * t379;
	t373 = qJD(1) * t304;
	t322 = t303 * t373 - t308 * t371;
	t233 = qJD(5) * t273 + t256 * t301 + t322 * t306;
	t396 = t233 * t227;
	t265 = t267 ^ 2;
	t279 = 0.1e1 / t281 ^ 2;
	t259 = t265 * t279 + 0.1e1;
	t250 = 0.1e1 / t259;
	t369 = qJD(4) * t307;
	t344 = t309 * t369;
	t345 = t304 * t370;
	t382 = t303 * t304;
	t351 = qJD(2) * t382;
	t258 = qJD(1) * t287 - t307 * t351 - t308 * t345 - t344;
	t269 = t284 * t306 + t301 * t382;
	t235 = qJD(5) * t269 + t258 * t301 - t412 * t306;
	t332 = t338 * t306;
	t253 = t303 * t332 + t413;
	t278 = 0.1e1 / t281;
	t386 = t267 * t279;
	t328 = -t235 * t278 + t253 * t386;
	t216 = t328 * t250;
	t333 = -t248 * t281 - t249 * t267;
	t210 = t216 * t333 - t248 * t235 + t249 * t253;
	t226 = 0.1e1 / t229;
	t228 = t226 * t227;
	t401 = t210 * t228;
	t364 = 0.2e1 * (-t266 * t401 + t272 * t396) / t225 ^ 2;
	t409 = t253 * t279;
	t324 = t308 * t378 + t375;
	t383 = t302 * t303;
	t355 = t267 * t383;
	t323 = -t278 * t324 + t279 * t355;
	t408 = t301 * t323;
	t282 = -t301 * t308 + t306 * t380;
	t276 = t282 * t309;
	t405 = qJD(6) * t276 + t302 * t322 - t303 * t344;
	t367 = qJD(5) * t303;
	t236 = t301 * (-qJD(5) * t284 + t412) + t306 * (t304 * t367 + t258);
	t377 = t304 * t307;
	t286 = t308 * t374 - t377;
	t300 = sin(qJ(6));
	t305 = cos(qJ(6));
	t247 = t273 * t305 + t286 * t300;
	t241 = 0.1e1 / t247;
	t242 = 0.1e1 / t247 ^ 2;
	t404 = -0.2e1 * t267;
	t403 = 0.2e1 * t272;
	t234 = (t309 * t367 + t256) * t306 + (-qJD(5) * t287 - t322) * t301;
	t255 = qJD(1) * t324 + t302 * t350 - t308 * t344 - t345;
	t218 = qJD(6) * t247 + t234 * t300 + t255 * t305;
	t246 = t273 * t300 - t286 * t305;
	t240 = t246 ^ 2;
	t232 = t240 * t242 + 0.1e1;
	t393 = t242 * t246;
	t365 = qJD(6) * t246;
	t219 = t234 * t305 - t255 * t300 - t365;
	t398 = t219 * t241 * t242;
	t400 = (t218 * t393 - t240 * t398) / t232 ^ 2;
	t388 = t278 * t409;
	t399 = (t235 * t386 - t265 * t388) / t259 ^ 2;
	t397 = t227 * t272;
	t395 = t241 * t300;
	t394 = t241 * t305;
	t392 = t246 * t300;
	t391 = t246 * t305;
	t390 = t248 * t272;
	t389 = t249 * t272;
	t387 = t267 * t278;
	t385 = t286 * t301;
	t384 = t286 * t306;
	t366 = qJD(5) * t306;
	t363 = -0.2e1 * t400;
	t362 = 0.2e1 * t400;
	t361 = -0.2e1 * t399;
	t360 = t228 * t403;
	t359 = t278 * t399;
	t358 = t246 * t398;
	t357 = t227 * t390;
	t356 = t227 * t389;
	t354 = t303 * t374;
	t343 = 0.2e1 * t358;
	t342 = t388 * t404;
	t341 = t210 * t360;
	t334 = qJD(6) * t384 + t256;
	t245 = -t269 * t305 - t300 * t324;
	t244 = -t269 * t300 + t305 * t324;
	t329 = -qJD(6) * t354 + t282 * t373 + t410 * t309;
	t327 = t242 * t391 - t395;
	t326 = -t269 * t278 + t282 * t386;
	t274 = t281 * t304;
	t285 = t301 * t376 - t381;
	t325 = t274 * t278 + t285 * t386;
	t321 = -t302 * t372 - t303 * t369;
	t319 = -t248 + (t249 * t387 + t248) * t250;
	t318 = qJD(1) * t281;
	t317 = qJD(5) * t385 + qJD(6) * t287 + t255 * t306;
	t275 = t281 * t309;
	t264 = -t276 * t305 - t300 * t354;
	t263 = -t276 * t300 + t305 * t354;
	t262 = t287 * t300 - t305 * t384;
	t261 = -t287 * t305 - t300 * t384;
	t257 = t340 * t377 + (t309 * t339 + t351) * t302;
	t252 = t308 * t332 + (-t302 * t368 - t303 * t337) * t301;
	t239 = t253 * t304 + t309 * t318;
	t230 = 0.1e1 / t232;
	t223 = 0.1e1 / t225;
	t222 = t250 * t408;
	t221 = t325 * t250;
	t220 = t326 * t250;
	t215 = t319 * t272;
	t214 = (t248 * t324 - t249 * t383) * t301 - t333 * t222;
	t212 = t221 * t333 + t248 * t274 + t249 * t285;
	t211 = t220 * t333 - t248 * t269 + t249 * t282;
	t209 = t325 * t361 + (t285 * t342 + t239 * t278 + (t235 * t285 + t252 * t267 - t253 * t274) * t279) * t250;
	t207 = t326 * t361 + (t282 * t342 - t236 * t278 + (t235 * t282 + t253 * t269 - t267 * t410) * t279) * t250;
	t206 = 0.2e1 * t399 * t408 + (-t323 * t366 + (0.2e1 * t355 * t388 - t257 * t278 + (-t235 * t383 - t253 * t324 + t267 * t321) * t279) * t301) * t250;
	t1 = [t359 * t403 + (-t233 * t278 + t272 * t409) * t250, t209, 0, t206, t207, 0; t267 * t226 * t364 + (-t235 * t226 + (t210 * t267 - t215 * t233) * t227) * t223 + (t215 * t227 * t364 + (0.2e1 * t215 * t401 - (-t216 * t250 * t387 + t361) * t357 - (t359 * t404 - t216 + (t216 - t328) * t250) * t356 - t319 * t396) * t223) * t272, (t212 * t397 + t226 * t275) * t364 + (t212 * t341 + (t275 * t210 - t212 * t233 - (-t209 * t267 - t221 * t235 + t252 + (-t221 * t281 + t274) * t216) * t389 - (-t209 * t281 - t221 * t253 + t239 + (t221 * t267 - t285) * t216) * t390) * t227 + (t304 * t318 + (-t338 * t381 - t413) * t309) * t226) * t223, 0, (t214 * t397 + t226 * t385) * t364 + (-t214 * t396 + (t255 * t301 - t286 * t366) * t226 + (t214 * t360 + t227 * t385) * t210 - (t324 * t366 - t206 * t281 + t222 * t253 - t257 * t301 + (-t222 * t267 + t301 * t383) * t216) * t357 - (-t366 * t383 - t206 * t267 - (-t216 * t281 - t235) * t222 + (t216 * t324 + t321) * t301) * t356) * t223, (t211 * t397 - t226 * t273) * t364 + (t211 * t341 + t234 * t226 + (-t273 * t210 - t211 * t233 - (-t207 * t267 - t220 * t235 - t410 + (-t220 * t281 - t269) * t216) * t389 - (-t207 * t281 - t220 * t253 - t236 + (t220 * t267 - t282) * t216) * t390) * t227) * t223, 0; (-t241 * t244 + t245 * t393) * t362 + ((qJD(6) * t245 - t236 * t300 - t257 * t305) * t241 + t245 * t343 + (-t244 * t219 - (-qJD(6) * t244 - t236 * t305 + t257 * t300) * t246 - t245 * t218) * t242) * t230, (-t241 * t263 + t264 * t393) * t362 + (t264 * t343 + t329 * t395 - t405 * t394 + (-t264 * t218 - t263 * t219 - t329 * t391 - t405 * t392) * t242) * t230, 0, (-t241 * t261 + t262 * t393) * t362 + (t262 * t343 - t334 * t394 + t317 * t395 + (-t262 * t218 - t261 * t219 - t317 * t391 - t334 * t392) * t242) * t230, t327 * t272 * t363 + (t327 * t233 + ((-qJD(6) * t241 - 0.2e1 * t358) * t305 + (t218 * t305 + (t219 - t365) * t300) * t242) * t272) * t230, t363 + 0.2e1 * (t218 * t230 * t242 + (-t230 * t398 - t242 * t400) * t246) * t246;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end