% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:26
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:24:51
% EndTime: 2019-05-05 18:25:19
% DurationCPUTime: 28.15s
% Computational Cost: add. (193077->880), mult. (423140->1359), div. (0->0), fcn. (297205->12), ass. (0->599)
t927 = sin(qJ(1));
t1004 = qJD(1) ^ 2;
t931 = cos(qJ(1));
t892 = g(1) * t931 + g(2) * t927;
t876 = -pkin(1) * t1004 - t892;
t919 = sin(pkin(10));
t921 = cos(pkin(10));
t891 = g(1) * t927 - t931 * g(2);
t938 = qJDD(1) * pkin(1) + t891;
t819 = t919 * t876 - t921 * t938;
t820 = t921 * t876 + t919 * t938;
t947 = t819 * t919 + t921 * t820;
t748 = t819 * t921 - t820 * t919;
t986 = t748 * t931;
t674 = t927 * t947 - t986;
t987 = t748 * t927;
t675 = t931 * t947 + t987;
t881 = qJDD(1) * t919 + t1004 * t921;
t882 = qJDD(1) * t921 - t1004 * t919;
t824 = -t881 * t927 + t931 * t882;
t915 = g(3) - qJDD(2);
t852 = qJ(2) * t881 - t915 * t921;
t939 = -qJ(2) * t882 - t915 * t919;
t1023 = -pkin(6) * t824 + t852 * t927 + t931 * t939;
t930 = cos(qJ(3));
t961 = qJD(1) * qJD(3);
t950 = t930 * t961;
t926 = sin(qJ(3));
t960 = qJDD(1) * t926;
t878 = t950 + t960;
t908 = t930 * qJDD(1);
t951 = t926 * t961;
t879 = t908 - t951;
t918 = sin(pkin(11));
t920 = cos(pkin(11));
t945 = t878 * t918 - t920 * t879;
t969 = qJD(1) * t930;
t970 = qJD(1) * t926;
t867 = t918 * t969 + t920 * t970;
t966 = qJD(3) * t867;
t779 = t945 + t966;
t865 = t918 * t970 - t920 * t969;
t818 = t867 * t865;
t1007 = qJDD(3) - t818;
t1022 = t1007 * t918;
t1021 = t1007 * t920;
t925 = sin(qJ(5));
t929 = cos(qJ(5));
t836 = -t929 * qJD(3) + t867 * t925;
t838 = qJD(3) * t925 + t867 * t929;
t778 = t838 * t836;
t817 = qJDD(5) + t945;
t1009 = -t778 + t817;
t1020 = t1009 * t925;
t1019 = t1009 * t929;
t924 = sin(qJ(6));
t928 = cos(qJ(6));
t771 = t928 * t836 + t838 * t924;
t774 = -t836 * t924 + t838 * t928;
t704 = t774 * t771;
t937 = qJDD(6) + t817;
t1011 = -t704 + t937;
t1018 = t1011 * t924;
t1017 = t1011 * t928;
t1008 = t931 * t881 + t882 * t927;
t1016 = pkin(6) * t1008 + t852 * t931 - t927 * t939;
t861 = qJD(5) + t865;
t857 = qJD(6) + t861;
t741 = t857 * t771;
t822 = t878 * t920 + t879 * t918;
t946 = -t929 * qJDD(3) + t925 * t822;
t755 = -qJD(5) * t838 - t946;
t756 = -t836 * qJD(5) + t925 * qJDD(3) + t929 * t822;
t936 = qJD(6) * t771 - t755 * t924 - t756 * t928;
t1010 = -t741 - t936;
t797 = t861 * t836;
t709 = -t797 - t756;
t708 = -t797 + t756;
t948 = -t928 * t755 + t924 * t756;
t606 = (qJD(6) - t857) * t774 + t948;
t705 = (qJD(5) - t861) * t838 + t946;
t766 = t771 ^ 2;
t767 = t774 ^ 2;
t1005 = t836 ^ 2;
t835 = t838 ^ 2;
t856 = t857 ^ 2;
t860 = t861 ^ 2;
t863 = t865 ^ 2;
t864 = t867 ^ 2;
t1003 = 2 * qJD(4);
t1002 = pkin(4) * t918;
t935 = qJDD(1) * pkin(7) + t820;
t934 = -pkin(2) * t1004 + t935;
t787 = -t926 * t915 + t930 * t934;
t888 = qJD(3) * pkin(3) - qJ(4) * t970;
t914 = t930 ^ 2;
t911 = t914 * t1004;
t735 = -pkin(3) * t911 + qJ(4) * t879 - qJD(3) * t888 + t787;
t972 = t930 * t915;
t933 = -t926 * t935 - t972 - t878 * qJ(4) + qJDD(3) * pkin(3) + (qJD(3) * t930 * qJ(4) + (pkin(3) * t930 + pkin(2)) * t970) * qJD(1);
t654 = -0.2e1 * qJD(4) * t865 + t920 * t735 + t918 * t933;
t808 = pkin(4) * t865 - pkin(8) * t867;
t932 = qJD(3) ^ 2;
t624 = -pkin(4) * t932 + qJDD(3) * pkin(8) - t808 * t865 + t654;
t799 = -qJDD(1) * pkin(2) - t1004 * pkin(7) + t819;
t745 = -t879 * pkin(3) - qJ(4) * t911 + t888 * t970 + qJDD(4) + t799;
t967 = qJD(3) * t865;
t943 = -t822 + t967;
t657 = pkin(4) * t779 + t943 * pkin(8) + t745;
t569 = t925 * t624 - t929 * t657;
t526 = pkin(5) * t1009 + pkin(9) * t709 - t569;
t570 = t929 * t624 + t925 * t657;
t788 = pkin(5) * t861 - pkin(9) * t838;
t529 = -pkin(5) * t1005 + pkin(9) * t755 - t788 * t861 + t570;
t472 = -t928 * t526 + t529 * t924;
t473 = t924 * t526 + t928 * t529;
t416 = -t472 * t928 + t473 * t924;
t1001 = t416 * t925;
t1000 = t416 * t929;
t949 = t918 * t735 - t920 * t933;
t623 = -qJDD(3) * pkin(4) - t932 * pkin(8) + (t1003 + t808) * t867 + t949;
t571 = -t755 * pkin(5) - pkin(9) * t1005 + t838 * t788 + t623;
t999 = t571 * t924;
t998 = t571 * t928;
t653 = t1003 * t867 + t949;
t577 = -t653 * t920 + t654 * t918;
t997 = t577 * t926;
t996 = t577 * t930;
t995 = t623 * t925;
t994 = t623 * t929;
t681 = t704 + t937;
t993 = t681 * t924;
t992 = t681 * t928;
t732 = t778 + t817;
t991 = t732 * t925;
t990 = t732 * t929;
t989 = t745 * t918;
t988 = t745 * t920;
t985 = t799 * t926;
t984 = t799 * t930;
t812 = qJDD(3) + t818;
t983 = t812 * t918;
t982 = t812 * t920;
t981 = t857 * t924;
t980 = t857 * t928;
t979 = t861 * t925;
t978 = t861 * t929;
t900 = t930 * t1004 * t926;
t889 = qJDD(3) + t900;
t975 = t889 * t926;
t890 = qJDD(3) - t900;
t974 = t890 * t926;
t973 = t890 * t930;
t913 = t926 ^ 2;
t971 = t913 + t914;
t968 = t1004 * t913;
t965 = qJD(3) * t918;
t964 = qJD(3) * t920;
t959 = qJDD(3) * t921;
t958 = t918 * t704;
t957 = t920 * t704;
t956 = t918 * t778;
t955 = t920 * t778;
t954 = t919 * t818;
t953 = t921 * t818;
t952 = -pkin(4) * t920 - pkin(3);
t417 = t472 * t924 + t928 * t473;
t578 = t653 * t918 + t920 * t654;
t785 = t926 * t934 + t972;
t717 = t785 * t926 + t930 * t787;
t834 = -t891 * t927 - t931 * t892;
t942 = t919 * t900;
t941 = t921 * t900;
t885 = qJDD(1) * t931 - t1004 * t927;
t940 = -pkin(6) * t885 - g(3) * t927;
t491 = -t569 * t929 + t570 * t925;
t492 = t569 * t925 + t570 * t929;
t716 = t785 * t930 - t787 * t926;
t833 = t891 * t931 - t892 * t927;
t781 = -t945 + t966;
t904 = t919 * qJDD(3);
t899 = -t911 - t932;
t898 = t911 - t932;
t897 = -t932 - t968;
t896 = t932 - t968;
t887 = t911 - t968;
t886 = t911 + t968;
t884 = qJDD(1) * t927 + t1004 * t931;
t883 = t971 * qJDD(1);
t880 = t908 - 0.2e1 * t951;
t877 = 0.2e1 * t950 + t960;
t874 = t930 * t889;
t873 = t971 * t961;
t862 = -pkin(6) * t884 + g(3) * t931;
t855 = -t864 - t932;
t854 = -t864 + t932;
t853 = t863 - t932;
t848 = t878 * t930 - t913 * t961;
t847 = -t879 * t926 - t914 * t961;
t846 = t873 * t921 + t904;
t845 = t873 * t919 - t959;
t844 = -t897 * t926 - t973;
t843 = -t896 * t926 + t874;
t842 = t899 * t930 - t975;
t841 = t898 * t930 - t974;
t840 = t897 * t930 - t974;
t839 = t899 * t926 + t874;
t829 = t883 * t921 - t886 * t919;
t828 = t883 * t919 + t886 * t921;
t823 = -t877 * t926 + t880 * t930;
t816 = -t864 + t863;
t810 = -t932 - t863;
t807 = t848 * t921 - t942;
t806 = t847 * t921 + t942;
t805 = t848 * t919 + t941;
t804 = t847 * t919 - t941;
t803 = t843 * t921 + t919 * t960;
t802 = t841 * t921 + t908 * t919;
t801 = t843 * t919 - t921 * t960;
t800 = t841 * t919 - t908 * t921;
t796 = (-t865 * t920 + t867 * t918) * qJD(3);
t795 = (-t865 * t918 - t867 * t920) * qJD(3);
t794 = t844 * t921 + t877 * t919;
t793 = t842 * t921 - t880 * t919;
t792 = t844 * t919 - t877 * t921;
t791 = t842 * t919 + t880 * t921;
t790 = -t835 + t860;
t789 = -t860 + t1005;
t786 = t823 * t921 - t887 * t919;
t784 = t823 * t919 + t887 * t921;
t783 = -t822 - t967;
t777 = -t863 - t864;
t776 = -t835 + t1005;
t773 = t822 * t920 - t867 * t965;
t770 = t822 * t918 + t867 * t964;
t769 = t865 * t964 + t918 * t945;
t768 = t865 * t965 - t920 * t945;
t765 = -t835 - t860;
t764 = -t855 * t918 - t982;
t763 = -t854 * t918 + t1021;
t762 = t853 * t920 - t983;
t761 = t855 * t920 - t983;
t760 = t854 * t920 + t1022;
t759 = t853 * t918 + t982;
t758 = -t828 * t927 + t829 * t931;
t757 = t828 * t931 + t829 * t927;
t754 = -pkin(7) * t840 + t984;
t753 = -pkin(7) * t839 + t985;
t751 = -t860 - t1005;
t744 = -pkin(2) * t840 + t787;
t743 = -pkin(2) * t839 + t785;
t740 = t835 + t1005;
t739 = -t767 + t856;
t738 = t766 - t856;
t737 = t810 * t920 - t1022;
t736 = t810 * t918 + t1021;
t734 = pkin(1) * t915 + qJ(2) * t947;
t727 = (-t836 * t929 + t838 * t925) * t861;
t726 = (t836 * t925 + t838 * t929) * t861;
t725 = -t795 * t926 + t796 * t930;
t724 = -t792 * t927 + t794 * t931;
t723 = -t791 * t927 + t793 * t931;
t722 = t792 * t931 + t794 * t927;
t721 = t791 * t931 + t793 * t927;
t720 = -t767 - t856;
t719 = t725 * t921 + t904;
t718 = t725 * t919 - t959;
t714 = t781 * t920 - t783 * t918;
t713 = -t779 * t920 + t918 * t943;
t712 = t781 * t918 + t783 * t920;
t711 = -t779 * t918 - t920 * t943;
t706 = (-qJD(5) - t861) * t838 - t946;
t703 = -t767 + t766;
t702 = t756 * t929 - t838 * t979;
t701 = -t756 * t925 - t838 * t978;
t700 = -t755 * t925 + t836 * t978;
t699 = -t755 * t929 - t836 * t979;
t698 = -t770 * t926 + t773 * t930;
t697 = -t768 * t926 + t769 * t930;
t696 = -t761 * t926 + t764 * t930;
t695 = -t760 * t926 + t763 * t930;
t694 = -t759 * t926 + t762 * t930;
t693 = t761 * t930 + t764 * t926;
t692 = t727 * t920 + t817 * t918;
t691 = t727 * t918 - t817 * t920;
t690 = -t856 - t766;
t689 = t789 * t929 - t991;
t688 = -t790 * t925 + t1019;
t687 = -t789 * t925 - t990;
t686 = -t790 * t929 - t1020;
t685 = -qJ(2) * t828 + t716 * t921;
t684 = qJ(2) * t829 + t716 * t919;
t683 = -qJ(4) * t761 + t988;
t679 = t717 * t921 + t799 * t919;
t678 = t717 * t919 - t799 * t921;
t677 = -t765 * t925 - t990;
t676 = t765 * t929 - t991;
t673 = -qJ(4) * t736 + t989;
t672 = (-t771 * t928 + t774 * t924) * t857;
t671 = (-t771 * t924 - t774 * t928) * t857;
t670 = t751 * t929 - t1020;
t669 = t751 * t925 + t1019;
t668 = t698 * t921 + t954;
t667 = t697 * t921 - t954;
t666 = t698 * t919 - t953;
t665 = t697 * t919 + t953;
t664 = -t736 * t926 + t737 * t930;
t663 = t736 * t930 + t737 * t926;
t662 = -t766 - t767;
t661 = t702 * t920 + t956;
t660 = t700 * t920 - t956;
t659 = t702 * t918 - t955;
t658 = t700 * t918 + t955;
t652 = t696 * t921 - t919 * t943;
t651 = t695 * t921 - t783 * t919;
t650 = t694 * t921 + t781 * t919;
t649 = t696 * t919 + t921 * t943;
t648 = t695 * t919 + t783 * t921;
t647 = t694 * t919 - t781 * t921;
t645 = pkin(3) * t943 + qJ(4) * t764 + t989;
t644 = -qJ(2) * t792 - t744 * t919 + t754 * t921;
t643 = -qJ(2) * t791 - t743 * t919 + t753 * t921;
t641 = -qJD(6) * t774 - t948;
t640 = -pkin(3) * t779 + qJ(4) * t737 - t988;
t639 = -t712 * t926 + t714 * t930;
t638 = -t711 * t926 + t713 * t930;
t637 = t712 * t930 + t714 * t926;
t636 = t664 * t921 + t779 * t919;
t635 = t664 * t919 - t779 * t921;
t634 = -pkin(1) * t840 + qJ(2) * t794 + t744 * t921 + t754 * t919;
t633 = -pkin(1) * t839 + qJ(2) * t793 + t743 * t921 + t753 * t919;
t632 = -t705 * t929 - t709 * t925;
t631 = t706 * t929 - t708 * t925;
t630 = -t705 * t925 + t709 * t929;
t629 = -t706 * t925 - t708 * t929;
t628 = t738 * t928 - t993;
t627 = -t739 * t924 + t1017;
t626 = t738 * t924 + t992;
t625 = t739 * t928 + t1018;
t621 = -t720 * t924 - t992;
t620 = t689 * t920 - t705 * t918;
t619 = t688 * t920 - t709 * t918;
t618 = t720 * t928 - t993;
t617 = t689 * t918 + t705 * t920;
t616 = t688 * t918 + t709 * t920;
t615 = t638 * t921 - t816 * t919;
t614 = t638 * t919 + t816 * t921;
t613 = t677 * t920 + t708 * t918;
t612 = t677 * t918 - t708 * t920;
t611 = -t691 * t926 + t692 * t930;
t610 = -t741 + t936;
t605 = (qJD(6) + t857) * t774 + t948;
t604 = t670 * t920 - t706 * t918;
t603 = t670 * t918 + t706 * t920;
t602 = t639 * t921 + t777 * t919;
t601 = t639 * t919 - t777 * t921;
t600 = -t774 * t981 - t928 * t936;
t599 = t774 * t980 - t924 * t936;
t598 = -t641 * t924 + t771 * t980;
t597 = t641 * t928 + t771 * t981;
t596 = t631 * t920 - t776 * t918;
t595 = t631 * t918 + t776 * t920;
t594 = t690 * t928 - t1018;
t593 = t690 * t924 + t1017;
t592 = -t678 * t927 + t679 * t931;
t591 = t678 * t931 + t679 * t927;
t590 = t632 * t920 - t740 * t918;
t589 = t632 * t918 + t740 * t920;
t588 = -t671 * t925 + t672 * t929;
t587 = -t671 * t929 - t672 * t925;
t586 = -pkin(2) * t637 - pkin(3) * t712;
t585 = -t659 * t926 + t661 * t930;
t584 = -t658 * t926 + t660 * t930;
t583 = t588 * t920 + t918 * t937;
t582 = t588 * t918 - t920 * t937;
t581 = t611 * t921 - t726 * t919;
t580 = t611 * t919 + t726 * t921;
t579 = -qJ(2) * t678 - (pkin(2) * t919 - pkin(7) * t921) * t716;
t576 = -pkin(2) * t693 - pkin(3) * t761 + t654;
t575 = -t649 * t927 + t652 * t931;
t574 = t649 * t931 + t652 * t927;
t573 = -pkin(8) * t676 + t994;
t572 = -pkin(8) * t669 + t995;
t568 = -pkin(2) * t663 - pkin(3) * t736 + t653;
t567 = -t635 * t927 + t636 * t931;
t566 = t635 * t931 + t636 * t927;
t565 = -pkin(3) * t745 + qJ(4) * t578;
t564 = -t626 * t925 + t628 * t929;
t563 = -t625 * t925 + t627 * t929;
t562 = -t626 * t929 - t628 * t925;
t561 = -t625 * t929 - t627 * t925;
t560 = -pkin(7) * t693 - t645 * t926 + t683 * t930;
t559 = qJ(2) * t679 - (-pkin(2) * t921 - pkin(7) * t919 - pkin(1)) * t716;
t558 = t585 * t921 - t701 * t919;
t557 = t584 * t921 - t699 * t919;
t556 = t585 * t919 + t701 * t921;
t555 = t584 * t919 + t699 * t921;
t554 = -qJ(4) * t712 - t577;
t553 = -t617 * t926 + t620 * t930;
t552 = -t616 * t926 + t619 * t930;
t551 = -t618 * t925 + t621 * t929;
t550 = t618 * t929 + t621 * t925;
t549 = -pkin(7) * t663 - t640 * t926 + t673 * t930;
t548 = -pkin(3) * t777 + qJ(4) * t714 + t578;
t547 = -t612 * t926 + t613 * t930;
t546 = t612 * t930 + t613 * t926;
t545 = -t606 * t928 - t610 * t924;
t544 = -t1010 * t924 - t605 * t928;
t543 = -t606 * t924 + t610 * t928;
t542 = t1010 * t928 - t605 * t924;
t541 = -t603 * t926 + t604 * t930;
t540 = t603 * t930 + t604 * t926;
t539 = -t601 * t927 + t602 * t931;
t538 = t601 * t931 + t602 * t927;
t537 = -t599 * t925 + t600 * t929;
t536 = -t597 * t925 + t598 * t929;
t535 = -t599 * t929 - t600 * t925;
t534 = -t597 * t929 - t598 * t925;
t533 = -t595 * t926 + t596 * t930;
t532 = -pkin(4) * t676 + t570;
t531 = -t593 * t925 + t594 * t929;
t530 = t593 * t929 + t594 * t925;
t528 = -pkin(4) * t669 + t569;
t525 = -t589 * t926 + t590 * t930;
t524 = t589 * t930 + t590 * t926;
t521 = t553 * t921 - t687 * t919;
t520 = t552 * t921 - t686 * t919;
t519 = t553 * t919 + t687 * t921;
t518 = t552 * t919 + t686 * t921;
t517 = -pkin(9) * t618 + t998;
t516 = t537 * t920 + t958;
t515 = t536 * t920 - t958;
t514 = t537 * t918 - t957;
t513 = t536 * t918 + t957;
t512 = t547 * t921 + t676 * t919;
t511 = t547 * t919 - t676 * t921;
t510 = -pkin(9) * t593 + t999;
t509 = t541 * t921 + t669 * t919;
t508 = t541 * t919 - t669 * t921;
t507 = -t582 * t926 + t583 * t930;
t506 = t564 * t920 - t606 * t918;
t505 = t563 * t920 - t610 * t918;
t504 = t564 * t918 + t606 * t920;
t503 = t563 * t918 + t610 * t920;
t502 = t578 * t930 - t997;
t501 = t578 * t926 + t996;
t500 = t1010 * t918 + t551 * t920;
t499 = -t1010 * t920 + t551 * t918;
t498 = t533 * t921 - t629 * t919;
t497 = t533 * t919 + t629 * t921;
t496 = t502 * t921 + t745 * t919;
t495 = t502 * t919 - t745 * t921;
t494 = t525 * t921 + t630 * t919;
t493 = t525 * t919 - t630 * t921;
t490 = t531 * t920 + t605 * t918;
t489 = t531 * t918 - t605 * t920;
t488 = -pkin(5) * t1010 + pkin(9) * t621 + t999;
t487 = -pkin(5) * t605 + pkin(9) * t594 - t998;
t486 = -qJ(2) * t649 + t560 * t921 - t576 * t919;
t485 = t507 * t921 - t587 * t919;
t484 = t507 * t919 + t587 * t921;
t483 = -pkin(8) * t630 - t491;
t482 = t492 * t920 + t623 * t918;
t481 = t492 * t918 - t623 * t920;
t480 = -t543 * t925 + t545 * t929;
t479 = -t542 * t925 + t544 * t929;
t478 = t543 * t929 + t545 * t925;
t477 = -t542 * t929 - t544 * t925;
t476 = -pkin(2) * t501 - pkin(3) * t577;
t475 = -pkin(1) * t693 + qJ(2) * t652 + t560 * t919 + t576 * t921;
t474 = -qJ(2) * t635 + t549 * t921 - t568 * t919;
t470 = t479 * t920 - t703 * t918;
t469 = t479 * t918 + t703 * t920;
t468 = -pkin(7) * t637 - t548 * t926 + t554 * t930;
t467 = -qJ(4) * t612 - t532 * t918 + t573 * t920;
t466 = -qJ(4) * t603 - t528 * t918 + t572 * t920;
t465 = t480 * t920 + t662 * t918;
t464 = t480 * t918 - t662 * t920;
t463 = -pkin(2) * t546 - pkin(3) * t612 + pkin(4) * t708 - pkin(8) * t677 - t995;
t462 = -pkin(2) * t540 - pkin(3) * t603 - pkin(4) * t706 - pkin(8) * t670 + t994;
t461 = -pkin(1) * t663 + qJ(2) * t636 + t549 * t919 + t568 * t921;
t460 = -t514 * t926 + t516 * t930;
t459 = -t513 * t926 + t515 * t930;
t458 = -pkin(3) * t676 + qJ(4) * t613 + t532 * t920 + t573 * t918;
t457 = -t511 * t927 + t512 * t931;
t456 = t511 * t931 + t512 * t927;
t455 = -pkin(3) * t669 + qJ(4) * t604 + t528 * t920 + t572 * t918;
t454 = -t508 * t927 + t509 * t931;
t453 = t508 * t931 + t509 * t927;
t452 = -t504 * t926 + t506 * t930;
t451 = -t503 * t926 + t505 * t930;
t450 = -t499 * t926 + t500 * t930;
t449 = t499 * t930 + t500 * t926;
t448 = -pkin(7) * t501 - qJ(4) * t996 - t565 * t926;
t447 = -qJ(4) * t589 + t1002 * t630 + t483 * t920;
t446 = -pkin(4) * t478 - pkin(5) * t543;
t445 = -t495 * t927 + t496 * t931;
t444 = t495 * t931 + t496 * t927;
t443 = -t493 * t927 + t494 * t931;
t442 = t493 * t931 + t494 * t927;
t441 = -t489 * t926 + t490 * t930;
t440 = t489 * t930 + t490 * t926;
t439 = qJ(4) * t590 + t918 * t483 + t630 * t952;
t438 = -qJ(2) * t601 + t468 * t921 - t586 * t919;
t437 = t460 * t921 - t535 * t919;
t436 = t459 * t921 - t534 * t919;
t435 = t460 * t919 + t535 * t921;
t434 = t459 * t919 + t534 * t921;
t433 = -pkin(4) * t550 - pkin(5) * t618 + t473;
t432 = t452 * t921 - t562 * t919;
t431 = t451 * t921 - t561 * t919;
t430 = t452 * t919 + t562 * t921;
t429 = t451 * t919 + t561 * t921;
t428 = -pkin(4) * t530 - pkin(5) * t593 + t472;
t427 = -pkin(1) * t637 + qJ(2) * t602 + t468 * t919 + t586 * t921;
t426 = -pkin(2) * t524 - pkin(3) * t589 - pkin(4) * t740 - pkin(8) * t632 - t492;
t425 = t450 * t921 + t550 * t919;
t424 = t450 * t919 - t550 * t921;
t423 = -pkin(8) * t550 - t488 * t925 + t517 * t929;
t422 = -t481 * t926 + t482 * t930;
t421 = t481 * t930 + t482 * t926;
t420 = -pkin(8) * t530 - t487 * t925 + t510 * t929;
t419 = t441 * t921 + t530 * t919;
t418 = t441 * t919 - t530 * t921;
t415 = -t469 * t926 + t470 * t930;
t414 = -t464 * t926 + t465 * t930;
t413 = t464 * t930 + t465 * t926;
t412 = -qJ(4) * t481 + (-pkin(8) * t920 + t1002) * t491;
t411 = -pkin(5) * t571 + pkin(9) * t417;
t410 = -pkin(9) * t543 - t416;
t409 = t422 * t921 + t491 * t919;
t408 = t422 * t919 - t491 * t921;
t407 = -pkin(5) * t662 + pkin(9) * t545 + t417;
t406 = -pkin(7) * t546 - t458 * t926 + t467 * t930;
t405 = -pkin(7) * t540 - t455 * t926 + t466 * t930;
t404 = -qJ(2) * t495 + t448 * t921 - t476 * t919;
t403 = t415 * t921 - t477 * t919;
t402 = t415 * t919 + t477 * t921;
t401 = qJ(4) * t482 + (-pkin(8) * t918 + t952) * t491;
t400 = t414 * t921 + t478 * t919;
t399 = t414 * t919 - t478 * t921;
t398 = -pkin(7) * t524 - t439 * t926 + t447 * t930;
t397 = -t424 * t927 + t425 * t931;
t396 = t424 * t931 + t425 * t927;
t395 = -pkin(1) * t501 + qJ(2) * t496 + t448 * t919 + t476 * t921;
t394 = -pkin(2) * t421 - pkin(3) * t481 + pkin(4) * t623 - pkin(8) * t492;
t393 = -t418 * t927 + t419 * t931;
t392 = t418 * t931 + t419 * t927;
t391 = -pkin(2) * t449 - pkin(3) * t499 + pkin(4) * t1010 - pkin(8) * t551 - t488 * t929 - t517 * t925;
t390 = t417 * t929 - t1001;
t389 = t417 * t925 + t1000;
t388 = -qJ(4) * t499 + t423 * t920 - t433 * t918;
t387 = -pkin(2) * t440 - pkin(3) * t489 + pkin(4) * t605 - pkin(8) * t531 - t487 * t929 - t510 * t925;
t386 = -qJ(4) * t489 + t420 * t920 - t428 * t918;
t385 = -qJ(2) * t511 + t406 * t921 - t463 * t919;
t384 = t390 * t920 + t571 * t918;
t383 = t390 * t918 - t571 * t920;
t382 = -qJ(2) * t508 + t405 * t921 - t462 * t919;
t381 = -pkin(3) * t550 + qJ(4) * t500 + t423 * t918 + t433 * t920;
t380 = -pkin(1) * t546 + qJ(2) * t512 + t406 * t919 + t463 * t921;
t379 = -pkin(3) * t530 + qJ(4) * t490 + t420 * t918 + t428 * t920;
t378 = -pkin(1) * t540 + qJ(2) * t509 + t405 * t919 + t462 * t921;
t377 = -t408 * t927 + t409 * t931;
t376 = t408 * t931 + t409 * t927;
t375 = -qJ(2) * t493 + t398 * t921 - t426 * t919;
t374 = -pkin(8) * t478 - t407 * t925 + t410 * t929;
t373 = -pkin(4) * t389 - pkin(5) * t416;
t372 = -t399 * t927 + t400 * t931;
t371 = t399 * t931 + t400 * t927;
t370 = -pkin(1) * t524 + qJ(2) * t494 + t398 * t919 + t426 * t921;
t369 = -pkin(7) * t421 - t401 * t926 + t412 * t930;
t368 = -pkin(8) * t389 - pkin(9) * t1000 - t411 * t925;
t367 = -qJ(4) * t464 + t374 * t920 - t446 * t918;
t366 = -t383 * t926 + t384 * t930;
t365 = t383 * t930 + t384 * t926;
t364 = -pkin(2) * t413 - pkin(3) * t464 + pkin(4) * t662 - pkin(8) * t480 - t407 * t929 - t410 * t925;
t363 = -pkin(3) * t478 + qJ(4) * t465 + t374 * t918 + t446 * t920;
t362 = -pkin(7) * t449 - t381 * t926 + t388 * t930;
t361 = -pkin(7) * t440 - t379 * t926 + t386 * t930;
t360 = t366 * t921 + t389 * t919;
t359 = t366 * t919 - t389 * t921;
t358 = -qJ(2) * t408 + t369 * t921 - t394 * t919;
t357 = -pkin(1) * t421 + qJ(2) * t409 + t369 * t919 + t394 * t921;
t356 = -qJ(2) * t424 + t362 * t921 - t391 * t919;
t355 = -qJ(2) * t418 + t361 * t921 - t387 * t919;
t354 = -pkin(1) * t449 + qJ(2) * t425 + t362 * t919 + t391 * t921;
t353 = -pkin(1) * t440 + qJ(2) * t419 + t361 * t919 + t387 * t921;
t352 = -qJ(4) * t383 + t368 * t920 - t373 * t918;
t351 = -pkin(7) * t413 - t363 * t926 + t367 * t930;
t350 = -pkin(2) * t365 - pkin(3) * t383 + pkin(4) * t571 - pkin(8) * t390 + pkin(9) * t1001 - t411 * t929;
t349 = -pkin(3) * t389 + qJ(4) * t384 + t368 * t918 + t373 * t920;
t348 = -t359 * t927 + t360 * t931;
t347 = t359 * t931 + t360 * t927;
t346 = -qJ(2) * t399 + t351 * t921 - t364 * t919;
t345 = -pkin(1) * t413 + qJ(2) * t400 + t351 * t919 + t364 * t921;
t344 = -pkin(7) * t365 - t349 * t926 + t352 * t930;
t343 = -qJ(2) * t359 + t344 * t921 - t350 * t919;
t342 = -pkin(1) * t365 + qJ(2) * t360 + t344 * t919 + t350 * t921;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t884, -t885, 0, t834, 0, 0, 0, 0, 0, 0, -t1008, -t824, 0, t675, 0, 0, 0, 0, 0, 0, t723, t724, t758, t592, 0, 0, 0, 0, 0, 0, t567, t575, t539, t445, 0, 0, 0, 0, 0, 0, t454, t457, t443, t377, 0, 0, 0, 0, 0, 0, t393, t397, t372, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t885, -t884, 0, t833, 0, 0, 0, 0, 0, 0, t824, -t1008, 0, t674, 0, 0, 0, 0, 0, 0, t721, t722, t757, t591, 0, 0, 0, 0, 0, 0, t566, t574, t538, t444, 0, 0, 0, 0, 0, 0, t453, t456, t442, t376, 0, 0, 0, 0, 0, 0, t392, t396, t371, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t915, 0, 0, 0, 0, 0, 0, t839, t840, 0, -t716, 0, 0, 0, 0, 0, 0, t663, t693, t637, t501, 0, 0, 0, 0, 0, 0, t540, t546, t524, t421, 0, 0, 0, 0, 0, 0, t440, t449, t413, t365; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t885, 0, -t884, 0, t940, -t862, -t833, -pkin(6) * t833, 0, 0, t824, 0, -t1008, 0, t1023, t1016, -t674, -pkin(6) * t674 + qJ(2) * t986 - t734 * t927, -t805 * t927 + t807 * t931, -t784 * t927 + t786 * t931, -t801 * t927 + t803 * t931, -t804 * t927 + t806 * t931, -t800 * t927 + t802 * t931, -t845 * t927 + t846 * t931, -pkin(6) * t721 - t633 * t927 + t643 * t931, -pkin(6) * t722 - t634 * t927 + t644 * t931, -pkin(6) * t757 - t684 * t927 + t685 * t931, -pkin(6) * t591 - t559 * t927 + t579 * t931, -t666 * t927 + t668 * t931, -t614 * t927 + t615 * t931, -t648 * t927 + t651 * t931, -t665 * t927 + t667 * t931, -t647 * t927 + t650 * t931, -t718 * t927 + t719 * t931, -pkin(6) * t566 - t461 * t927 + t474 * t931, -pkin(6) * t574 - t475 * t927 + t486 * t931, -pkin(6) * t538 - t427 * t927 + t438 * t931, -pkin(6) * t444 - t395 * t927 + t404 * t931, -t556 * t927 + t558 * t931, -t497 * t927 + t498 * t931, -t518 * t927 + t520 * t931, -t555 * t927 + t557 * t931, -t519 * t927 + t521 * t931, -t580 * t927 + t581 * t931, -pkin(6) * t453 - t378 * t927 + t382 * t931, -pkin(6) * t456 - t380 * t927 + t385 * t931, -pkin(6) * t442 - t370 * t927 + t375 * t931, -pkin(6) * t376 - t357 * t927 + t358 * t931, -t435 * t927 + t437 * t931, -t402 * t927 + t403 * t931, -t429 * t927 + t431 * t931, -t434 * t927 + t436 * t931, -t430 * t927 + t432 * t931, -t484 * t927 + t485 * t931, -pkin(6) * t392 - t353 * t927 + t355 * t931, -pkin(6) * t396 - t354 * t927 + t356 * t931, -pkin(6) * t371 - t345 * t927 + t346 * t931, -pkin(6) * t347 - t342 * t927 + t343 * t931; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t884, 0, t885, 0, t862, t940, t834, pkin(6) * t834, 0, 0, t1008, 0, t824, 0, -t1016, t1023, t675, pkin(6) * t675 + qJ(2) * t987 + t734 * t931, t805 * t931 + t807 * t927, t784 * t931 + t786 * t927, t801 * t931 + t803 * t927, t804 * t931 + t806 * t927, t800 * t931 + t802 * t927, t845 * t931 + t846 * t927, pkin(6) * t723 + t633 * t931 + t643 * t927, pkin(6) * t724 + t634 * t931 + t644 * t927, pkin(6) * t758 + t684 * t931 + t685 * t927, pkin(6) * t592 + t559 * t931 + t579 * t927, t666 * t931 + t668 * t927, t614 * t931 + t615 * t927, t648 * t931 + t651 * t927, t665 * t931 + t667 * t927, t647 * t931 + t650 * t927, t718 * t931 + t719 * t927, pkin(6) * t567 + t461 * t931 + t474 * t927, pkin(6) * t575 + t475 * t931 + t486 * t927, pkin(6) * t539 + t427 * t931 + t438 * t927, pkin(6) * t445 + t395 * t931 + t404 * t927, t556 * t931 + t558 * t927, t497 * t931 + t498 * t927, t518 * t931 + t520 * t927, t555 * t931 + t557 * t927, t519 * t931 + t521 * t927, t580 * t931 + t581 * t927, pkin(6) * t454 + t378 * t931 + t382 * t927, pkin(6) * t457 + t380 * t931 + t385 * t927, pkin(6) * t443 + t370 * t931 + t375 * t927, pkin(6) * t377 + t357 * t931 + t358 * t927, t435 * t931 + t437 * t927, t402 * t931 + t403 * t927, t429 * t931 + t431 * t927, t434 * t931 + t436 * t927, t430 * t931 + t432 * t927, t484 * t931 + t485 * t927, pkin(6) * t393 + t353 * t931 + t355 * t927, pkin(6) * t397 + t354 * t931 + t356 * t927, pkin(6) * t372 + t345 * t931 + t346 * t927, pkin(6) * t348 + t342 * t931 + t343 * t927; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t891, t892, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t882 - t819, -pkin(1) * t881 - t820, 0, -pkin(1) * t748, (t878 + t950) * t926, t877 * t930 + t880 * t926, t896 * t930 + t975, (t879 - t951) * t930, t898 * t926 + t973, 0, pkin(1) * t791 + pkin(2) * t880 + pkin(7) * t842 - t984, pkin(1) * t792 - pkin(2) * t877 + pkin(7) * t844 + t985, pkin(1) * t828 + pkin(2) * t886 + pkin(7) * t883 + t717, pkin(1) * t678 - pkin(2) * t799 + pkin(7) * t717, t770 * t930 + t773 * t926, t711 * t930 + t713 * t926, t760 * t930 + t763 * t926, t768 * t930 + t769 * t926, t759 * t930 + t762 * t926, t795 * t930 + t796 * t926, pkin(1) * t635 - pkin(2) * t779 + pkin(7) * t664 + t640 * t930 + t673 * t926, pkin(1) * t649 + pkin(2) * t943 + pkin(7) * t696 + t645 * t930 + t683 * t926, pkin(1) * t601 - pkin(2) * t777 + pkin(7) * t639 + t548 * t930 + t554 * t926, pkin(1) * t495 - pkin(2) * t745 + pkin(7) * t502 - qJ(4) * t997 + t565 * t930, t659 * t930 + t661 * t926, t595 * t930 + t596 * t926, t616 * t930 + t619 * t926, t658 * t930 + t660 * t926, t617 * t930 + t620 * t926, t691 * t930 + t692 * t926, pkin(1) * t508 - pkin(2) * t669 + pkin(7) * t541 + t455 * t930 + t466 * t926, pkin(1) * t511 - pkin(2) * t676 + pkin(7) * t547 + t458 * t930 + t467 * t926, pkin(1) * t493 - pkin(2) * t630 + pkin(7) * t525 + t439 * t930 + t447 * t926, pkin(1) * t408 - pkin(2) * t491 + pkin(7) * t422 + t401 * t930 + t412 * t926, t514 * t930 + t516 * t926, t469 * t930 + t470 * t926, t503 * t930 + t505 * t926, t513 * t930 + t515 * t926, t504 * t930 + t506 * t926, t582 * t930 + t583 * t926, pkin(1) * t418 - pkin(2) * t530 + pkin(7) * t441 + t379 * t930 + t386 * t926, pkin(1) * t424 - pkin(2) * t550 + pkin(7) * t450 + t381 * t930 + t388 * t926, pkin(1) * t399 - pkin(2) * t478 + pkin(7) * t414 + t363 * t930 + t367 * t926, pkin(1) * t359 - pkin(2) * t389 + pkin(7) * t366 + t349 * t930 + t352 * t926;];
tauB_reg  = t1;
