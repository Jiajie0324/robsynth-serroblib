% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:38:58
% EndTime: 2019-03-09 03:39:06
% DurationCPUTime: 2.93s
% Computational Cost: add. (4922->262), mult. (10291->462), div. (0->0), fcn. (10046->10), ass. (0->141)
t135 = sin(pkin(10)) * pkin(1) + pkin(7);
t127 = qJ(4) + t135;
t120 = qJD(3) * t127;
t97 = sin(qJ(3));
t99 = cos(qJ(3));
t110 = t99 * qJD(4) - t120 * t97;
t111 = -t97 * qJD(4) - t120 * t99;
t167 = cos(pkin(11));
t95 = sin(pkin(11));
t105 = t110 * t167 + t111 * t95;
t145 = t167 * t99;
t80 = t95 * t97 - t145;
t81 = t167 * t97 + t95 * t99;
t91 = -cos(pkin(10)) * pkin(1) - pkin(2);
t85 = -t99 * pkin(3) + t91;
t112 = t80 * pkin(4) - t81 * pkin(8) + t85;
t201 = -qJD(5) * t112 - t105;
t121 = t99 * t127;
t122 = t97 * t127;
t107 = t121 * t167 - t122 * t95;
t164 = t97 * qJD(3);
t159 = pkin(3) * t164;
t76 = t81 * qJD(3);
t77 = qJD(3) * t145 - t164 * t95;
t200 = -t76 * pkin(4) + t77 * pkin(8) + qJD(5) * t107 - t159;
t191 = sin(qJ(6));
t96 = sin(qJ(5));
t150 = t191 * t96;
t141 = t81 * t150;
t192 = cos(qJ(6));
t152 = t192 * t96;
t196 = qJD(5) + qJD(6);
t146 = t192 * qJD(6);
t197 = t192 * qJD(5) + t146;
t98 = cos(qJ(5));
t19 = t77 * t152 + (t191 * t77 + t197 * t81) * t98 - t196 * t141;
t83 = t191 * t98 + t152;
t46 = t83 * t81;
t148 = qJD(6) * t191;
t60 = (t191 * qJD(5) + t148) * t96 - t197 * t98;
t172 = -t83 * t19 + t46 * t60;
t61 = t196 * t83;
t151 = t192 * t98;
t82 = -t151 + t150;
t18 = t61 * t81 + t82 * t77;
t47 = t151 * t81 - t141;
t175 = t82 * t18 - t47 * t61;
t199 = t175 - t172;
t198 = -t81 * t76 - t77 * t80;
t165 = qJD(5) * t98;
t126 = t81 * t165 + t96 * t77;
t166 = qJD(5) * t96;
t157 = t81 * t166;
t180 = t98 * t77;
t49 = t157 - t180;
t93 = t96 ^ 2;
t94 = t98 ^ 2;
t144 = qJD(5) * (t93 - t94);
t23 = -t107 * t96 + t112 * t98;
t24 = t98 * t107 + t96 * t112;
t132 = t23 * t96 - t24 * t98;
t8 = t200 * t96 + t201 * t98;
t9 = -t200 * t98 + t201 * t96;
t195 = qJD(5) * t132 + t8 * t96 - t9 * t98;
t63 = t80 * t76;
t59 = 0.2e1 * t63;
t194 = 0.2e1 * qJD(3);
t193 = t76 * pkin(5);
t190 = t46 * t19;
t189 = t47 * t18;
t38 = t110 * t95 - t167 * t111;
t52 = t121 * t95 + t167 * t122;
t188 = t52 * t38;
t187 = t77 * t93;
t186 = t81 * t77;
t185 = t81 * t96;
t184 = t82 * t61;
t183 = t83 * t60;
t71 = t94 * t77;
t182 = t96 * t76;
t179 = t98 * t81;
t174 = -t18 * t83 - t47 * t60;
t173 = t19 * t82 + t46 * t61;
t170 = t76 * t179 + t80 * t180;
t163 = t99 * qJD(3);
t162 = t91 * t194;
t90 = -pkin(3) * t167 - pkin(4);
t161 = 0.2e1 * qJD(5) * t90;
t160 = pkin(5) * t166;
t158 = t80 * t166;
t155 = t96 * t165;
t154 = t97 * t163;
t153 = pkin(3) * t95 + pkin(8);
t149 = -0.4e1 * t96 * t179;
t143 = pkin(9) + t153;
t79 = t81 ^ 2;
t142 = t79 * t155;
t140 = pkin(5) * t146;
t139 = pkin(5) * t148;
t138 = t96 * t153;
t137 = t98 * t153;
t134 = qJD(5) * t153;
t133 = -t23 * t98 - t24 * t96;
t131 = t38 * t80 + t52 * t76;
t130 = t60 * t80 - t76 * t83;
t129 = t61 * t80 + t76 * t82;
t50 = t165 * t80 + t182;
t125 = t135 * qJD(3);
t124 = t143 * t192;
t123 = t143 * t191;
t100 = t49 * pkin(9) + t193 + t9;
t103 = t80 * pkin(5) - pkin(9) * t179 + t23;
t102 = t192 * t103;
t104 = -t126 * pkin(9) - t8;
t21 = -pkin(9) * t185 + t24;
t1 = -qJD(6) * t102 - t191 * t100 - t192 * t104 + t148 * t21;
t119 = t96 * t124;
t118 = t96 * t123;
t117 = -t153 * t76 + t90 * t77;
t116 = t153 * t80 - t90 * t81;
t115 = qJD(5) * t124;
t114 = qJD(5) * t123;
t109 = qJD(5) * t133 - t8 * t98 - t9 * t96;
t101 = t191 * t103;
t2 = -qJD(6) * t101 + t192 * t100 - t191 * t104 - t21 * t146;
t84 = -t98 * pkin(5) + t90;
t78 = t143 * t98;
t56 = t81 * t71;
t55 = t93 * t186;
t54 = t192 * t78 - t118;
t53 = -t191 * t78 - t119;
t48 = -t98 * t76 + t158;
t45 = -t71 - t187;
t37 = pkin(5) * t185 + t52;
t33 = t144 * t81 - t96 * t180;
t26 = qJD(6) * t118 + t114 * t96 - t115 * t98 - t146 * t78;
t25 = qJD(6) * t119 + t114 * t98 + t115 * t96 + t148 * t78;
t22 = t126 * pkin(5) + t38;
t7 = t192 * t21 + t101;
t6 = -t191 * t21 + t102;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t154 (-t97 ^ 2 + t99 ^ 2) * t194, 0, -0.2e1 * t154, 0, 0, t97 * t162, t99 * t162, 0, 0, 0.2e1 * t186, 0.2e1 * t198, 0, t59, 0, 0, 0.2e1 * t159 * t80 + 0.2e1 * t76 * t85, 0.2e1 * t159 * t81 + 0.2e1 * t77 * t85, -0.2e1 * t105 * t80 - 0.2e1 * t107 * t76 + 0.2e1 * t38 * t81 + 0.2e1 * t52 * t77, 0.2e1 * t105 * t107 + 0.2e1 * t159 * t85 + 0.2e1 * t188, 0.2e1 * t56 - 0.2e1 * t142, 0.2e1 * t144 * t79 + t149 * t77, -0.2e1 * t157 * t80 + 0.2e1 * t170, 0.2e1 * t55 + 0.2e1 * t142, -0.2e1 * t126 * t80 - 0.2e1 * t81 * t182, t59, 0.2e1 * t126 * t52 + 0.2e1 * t38 * t185 + 0.2e1 * t23 * t76 + 0.2e1 * t80 * t9, 0.2e1 * t38 * t179 - 0.2e1 * t24 * t76 - 0.2e1 * t49 * t52 + 0.2e1 * t8 * t80, 0.2e1 * t133 * t77 + 0.2e1 * t195 * t81, 0.2e1 * t23 * t9 - 0.2e1 * t24 * t8 + 0.2e1 * t188, -0.2e1 * t189, 0.2e1 * t46 * t18 - 0.2e1 * t47 * t19, -0.2e1 * t18 * t80 + 0.2e1 * t47 * t76, 0.2e1 * t190, -0.2e1 * t80 * t19 - 0.2e1 * t76 * t46, t59, 0.2e1 * t19 * t37 + 0.2e1 * t2 * t80 + 0.2e1 * t22 * t46 + 0.2e1 * t6 * t76, 0.2e1 * t1 * t80 - 0.2e1 * t18 * t37 + 0.2e1 * t22 * t47 - 0.2e1 * t7 * t76, 0.2e1 * t1 * t46 + 0.2e1 * t18 * t6 - 0.2e1 * t19 * t7 - 0.2e1 * t2 * t47, -0.2e1 * t1 * t7 + 0.2e1 * t2 * t6 + 0.2e1 * t22 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * t81 + t107 * t77 + t131, 0, 0, 0, 0, 0, 0, 0, t198 * t98 + t170, 0, t109 * t81 - t132 * t77 + t131, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t47 - t18 * t7 - t19 * t6 - t2 * t46 + t22 * t80 + t37 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t186 + 0.2e1 * t63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t56 + 0.2e1 * t55 + 0.2e1 * t63, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t189 + 0.2e1 * t63 + 0.2e1 * t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, 0, -t164, 0, -t99 * t125, t97 * t125, 0, 0, 0, 0, t77, 0, -t76, 0, -t38, -t105 (-t167 * t77 - t76 * t95) * pkin(3) (t105 * t95 - t167 * t38) * pkin(3), -t33, qJD(5) * t149 - t187 + t71, t50, t33, -t48, 0, -t38 * t98 + t117 * t96 + (-t116 * t98 + t52 * t96) * qJD(5), t38 * t96 + t117 * t98 + (t116 * t96 + t52 * t98) * qJD(5), t109, -t8 * t137 - t9 * t138 + t38 * t90 + (-t137 * t23 - t138 * t24) * qJD(5), t174, t172 + t175, -t130, t173, -t129, 0, t160 * t46 + t19 * t84 + t22 * t82 + t26 * t80 + t37 * t61 + t53 * t76, t160 * t47 - t18 * t84 + t22 * t83 + t25 * t80 - t37 * t60 - t54 * t76, t1 * t82 + t18 * t53 - t19 * t54 - t2 * t83 + t25 * t46 - t26 * t47 + t6 * t60 - t61 * t7, -t1 * t54 + t160 * t37 + t2 * t53 + t22 * t84 - t25 * t7 + t26 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, -t163, 0, 0, 0, 0, 0, 0, 0, 0, -t76, -t77, 0 (-t167 * t76 + t77 * t95) * pkin(3), 0, 0, 0, 0, 0, 0, t48, t50, -t45, t76 * t90 + (t94 + t93) * t77 * t153, 0, 0, 0, 0, 0, 0, t129, -t130, t199, pkin(5) * t158 - t18 * t54 - t19 * t53 - t25 * t47 - t26 * t46 + t76 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t155, -0.2e1 * t144, 0, -0.2e1 * t155, 0, 0, t96 * t161, t98 * t161, 0, 0, -0.2e1 * t183, 0.2e1 * t82 * t60 - 0.2e1 * t83 * t61, 0, 0.2e1 * t184, 0, 0, 0.2e1 * t160 * t82 + 0.2e1 * t61 * t84, 0.2e1 * t160 * t83 - 0.2e1 * t60 * t84, 0.2e1 * t25 * t82 - 0.2e1 * t26 * t83 + 0.2e1 * t53 * t60 - 0.2e1 * t54 * t61, 0.2e1 * t160 * t84 - 0.2e1 * t25 * t54 + 0.2e1 * t26 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, t77, 0, t159, 0, 0, 0, 0, 0, 0, -t48, -t50, t45, -t195, 0, 0, 0, 0, 0, 0, -t129, t130, -t199, -t1 * t83 - t2 * t82 - t6 * t61 - t60 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173 + t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25 * t83 - t26 * t82 - t53 * t61 - t54 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t183 + 0.2e1 * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, 0, -t126, t76, t9, t8, 0, 0, 0, 0, -t18, 0, -t19, t76, -t80 * t139 + t192 * t193 + t2 (-t80 * t146 - t191 * t76) * pkin(5) + t1 (t192 * t18 - t191 * t19 + (t191 * t47 - t192 * t46) * qJD(6)) * pkin(5) (t192 * t2 - t191 * t1 + (-t191 * t6 + t192 * t7) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, t49, 0, 0, 0, 0, 0, 0, 0, 0, -t19, t18, 0 (-t192 * t19 - t191 * t18 + (t191 * t46 + t192 * t47) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, 0, -t166, 0, -t98 * t134, t96 * t134, 0, 0, 0, 0, -t60, 0, -t61, 0, t26, t25 (t192 * t60 - t191 * t61 + (t191 * t83 - t192 * t82) * qJD(6)) * pkin(5) (t192 * t26 - t191 * t25 + (-t191 * t53 + t192 * t54) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t165, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t60, 0 (-t192 * t61 - t191 * t60 + (t191 * t82 + t192 * t83) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t139, -0.2e1 * t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, t76, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, 0, -t61, 0, t26, t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t60, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t139, -t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
