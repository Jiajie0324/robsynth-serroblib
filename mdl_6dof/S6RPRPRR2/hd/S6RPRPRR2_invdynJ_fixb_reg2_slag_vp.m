% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:39:05
% EndTime: 2019-03-09 03:39:17
% DurationCPUTime: 6.66s
% Computational Cost: add. (12306->591), mult. (26783->740), div. (0->0), fcn. (19296->18), ass. (0->299)
t242 = cos(qJ(3));
t365 = cos(pkin(11));
t300 = t365 * t242;
t199 = qJD(1) * t300;
t233 = sin(pkin(11));
t239 = sin(qJ(3));
t331 = qJD(1) * t239;
t171 = t233 * t331 - t199;
t166 = qJD(5) + t171;
t205 = pkin(3) * t233 + pkin(8);
t228 = qJ(3) + pkin(11);
t215 = sin(t228);
t217 = cos(t228);
t229 = qJ(1) + pkin(10);
t216 = sin(t229);
t218 = cos(t229);
t286 = g(1) * t218 + g(2) * t216;
t258 = -g(3) * t217 + t215 * t286;
t221 = t242 * qJDD(2);
t234 = sin(pkin(10));
t206 = pkin(1) * t234 + pkin(7);
t193 = t206 * qJDD(1);
t293 = -qJD(2) * qJD(3) - t193;
t324 = qJD(1) * qJD(4);
t195 = t206 * qJD(1);
t294 = qJ(4) * qJD(1) + t195;
t409 = t242 * t294;
t75 = qJDD(3) * pkin(3) + t221 - qJD(3) * t409 + (-qJ(4) * qJDD(1) + t293 - t324) * t239;
t313 = -t239 * qJDD(2) + t242 * t293;
t330 = qJD(3) * t239;
t113 = -t195 * t330 - t313;
t325 = qJD(1) * qJD(3);
t306 = t239 * t325;
t320 = t242 * qJDD(1);
t79 = t242 * t324 + (-t306 + t320) * qJ(4) + t113;
t377 = t233 * t79 - t365 * t75;
t36 = -qJDD(3) * pkin(4) + t377;
t421 = qJD(5) * t205 * t166 - t258 + t36;
t420 = 0.2e1 * qJD(3);
t181 = t233 * t242 + t239 * t365;
t174 = t181 * qJD(1);
t238 = sin(qJ(5));
t241 = cos(qJ(5));
t147 = -t241 * qJD(3) + t174 * t238;
t149 = qJD(3) * t238 + t174 * t241;
t237 = sin(qJ(6));
t397 = cos(qJ(6));
t270 = -t237 * t147 + t149 * t397;
t81 = t397 * t147 + t149 * t237;
t384 = t81 * t270;
t383 = pkin(9) + t205;
t302 = qJD(5) * t383;
t357 = t171 * t238;
t107 = pkin(3) * t331 + pkin(4) * t174 + pkin(8) * t171;
t326 = t239 * qJD(2);
t152 = t326 + t409;
t138 = t233 * t152;
t223 = t242 * qJD(2);
t151 = -t239 * t294 + t223;
t86 = t151 * t365 - t138;
t47 = t238 * t107 + t241 * t86;
t419 = pkin(9) * t357 + t238 * t302 + t47;
t46 = t241 * t107 - t238 * t86;
t418 = -pkin(5) * t174 - t46 + (-pkin(9) * t171 - t302) * t241;
t312 = t397 * t238;
t184 = t237 * t241 + t312;
t405 = qJD(5) + qJD(6);
t133 = t405 * t184;
t335 = -t184 * t171 - t133;
t338 = t237 * t238;
t269 = t397 * t241 - t338;
t307 = t397 * qJD(6);
t407 = t397 * qJD(5) + t307;
t334 = -t269 * t171 - t241 * t407 + t338 * t405;
t255 = qJDD(1) * t181 - t233 * t306;
t127 = qJD(3) * t199 + t255;
t417 = qJD(3) * qJD(5) + t127;
t329 = qJD(5) * t238;
t416 = t329 + t357;
t415 = t270 ^ 2 - t81 ^ 2;
t162 = qJD(6) + t166;
t328 = qJD(5) * t241;
t314 = t174 * t328 + t238 * t417;
t271 = qJDD(3) * t241 - t314;
t327 = qJD(6) * t237;
t68 = -t238 * qJDD(3) + t174 * t329 - t241 * t417;
t23 = t147 * t307 + t149 * t327 - t237 * t271 + t397 * t68;
t414 = t162 * t81 - t23;
t141 = qJD(3) * pkin(3) + t151;
t301 = t365 * t152;
t78 = t233 * t141 + t301;
t72 = qJD(3) * pkin(8) + t78;
t235 = cos(pkin(10));
t208 = -pkin(1) * t235 - pkin(2);
t226 = t242 * pkin(3);
t408 = t208 - t226;
t170 = qJD(1) * t408 + qJD(4);
t93 = t171 * pkin(4) - t174 * pkin(8) + t170;
t43 = -t238 * t72 + t241 * t93;
t31 = -pkin(9) * t149 + t43;
t29 = pkin(5) * t166 + t31;
t44 = t238 * t93 + t241 * t72;
t32 = -pkin(9) * t147 + t44;
t173 = t181 * qJD(3);
t321 = t239 * qJDD(1);
t280 = -qJDD(1) * t300 + t233 * t321;
t126 = qJD(1) * t173 + t280;
t123 = qJDD(5) + t126;
t39 = t233 * t75 + t365 * t79;
t37 = qJDD(3) * pkin(8) + t39;
t150 = pkin(3) * t306 + qJDD(1) * t408 + qJDD(4);
t51 = t126 * pkin(4) - t127 * pkin(8) + t150;
t50 = t241 * t51;
t9 = -qJD(5) * t44 - t238 * t37 + t50;
t6 = t123 * pkin(5) + t68 * pkin(9) + t9;
t8 = t238 * t51 + t241 * t37 + t93 * t328 - t329 * t72;
t7 = pkin(9) * t271 + t8;
t1 = t237 * t6 + t29 * t307 - t32 * t327 + t397 * t7;
t232 = qJ(5) + qJ(6);
t224 = sin(t232);
t342 = t218 * t224;
t225 = cos(t232);
t345 = t216 * t225;
t143 = -t217 * t345 + t342;
t341 = t218 * t225;
t346 = t216 * t224;
t145 = t217 * t341 + t346;
t389 = g(3) * t215;
t77 = t141 * t365 - t138;
t71 = -qJD(3) * pkin(4) - t77;
t53 = t147 * pkin(5) + t71;
t413 = g(1) * t145 - g(2) * t143 + t225 * t389 + t53 * t81 - t1;
t282 = -t166 * t43 + t8;
t364 = pkin(1) * qJDD(1);
t296 = t166 * t238;
t410 = t149 * t296;
t336 = qJ(4) + t206;
t177 = t336 * t242;
t298 = t336 * t239;
t121 = t177 * t365 - t233 * t298;
t110 = t241 * t121;
t266 = -t233 * t239 + t300;
t111 = -pkin(4) * t266 - pkin(8) * t181 + t408;
t57 = t238 * t111 + t110;
t393 = g(1) * t216;
t304 = g(2) * t218 - t393;
t339 = t218 * t241;
t344 = t216 * t238;
t154 = t217 * t344 + t339;
t340 = t218 * t238;
t343 = t216 * t241;
t156 = -t217 * t340 + t343;
t406 = -g(1) * t156 + g(2) * t154;
t142 = t217 * t346 + t341;
t144 = -t217 * t342 + t345;
t318 = t397 * t32;
t11 = t237 * t29 + t318;
t2 = -qJD(6) * t11 - t237 * t7 + t397 * t6;
t404 = -g(1) * t144 + g(2) * t142 + t224 * t389 - t53 * t270 + t2;
t24 = qJD(6) * t270 - t237 * t68 - t397 * t271;
t403 = t162 * t270 - t24;
t119 = qJDD(6) + t123;
t402 = t184 * t119 - t162 * t334;
t112 = t241 * t123;
t310 = t181 * t329;
t176 = t266 * qJD(3);
t353 = t176 * t241;
t267 = t310 - t353;
t401 = t181 * t112 - t166 * t267;
t400 = -t173 * t147 - t266 * t271;
t256 = -t286 * t217 - t389;
t399 = t23 * t269 - t270 * t335;
t398 = t174 ^ 2;
t396 = pkin(3) * t239;
t395 = pkin(4) * t217;
t387 = g(3) * t242;
t240 = sin(qJ(1));
t386 = t240 * pkin(1);
t385 = t241 * pkin(5);
t116 = t269 * t181;
t40 = t133 * t181 - t176 * t269;
t382 = -t116 * t24 + t40 * t81;
t115 = t184 * t181;
t352 = t181 * t238;
t41 = t176 * t312 - t237 * t310 - t327 * t352 + (t176 * t237 + t181 * t407) * t241;
t381 = -t115 * t119 - t41 * t162;
t178 = t383 * t238;
t179 = t383 * t241;
t124 = -t178 * t397 - t237 * t179;
t380 = qJD(6) * t124 + t237 * t418 - t397 * t419;
t125 = -t237 * t178 + t179 * t397;
t379 = -qJD(6) * t125 + t237 * t419 + t397 * t418;
t378 = t173 * t270 + t23 * t266;
t375 = t174 * t81;
t373 = t237 * t32;
t372 = t44 * t166;
t371 = t68 * t238;
t370 = t270 * t174;
t369 = t149 * t173 + t266 * t68;
t368 = -t181 * t126 - t176 * t171;
t262 = t271 * t241;
t367 = -t147 * t353 + t181 * t262;
t64 = t238 * t271;
t366 = -t147 * t328 + t64;
t363 = t147 * t171;
t362 = t147 * t174;
t361 = t147 * t238;
t360 = t149 * t147;
t359 = t149 * t174;
t358 = t149 * t241;
t355 = t174 * t171;
t354 = t176 * t238;
t351 = t181 * t241;
t349 = t195 * t239;
t348 = t195 * t242;
t347 = t215 * t218;
t337 = t238 * t123;
t214 = t226 + pkin(2);
t243 = cos(qJ(1));
t227 = t243 * pkin(1);
t333 = t218 * t214 + t227;
t230 = t239 ^ 2;
t231 = t242 ^ 2;
t332 = t230 - t231;
t196 = qJD(1) * t208;
t194 = qJDD(1) * t208;
t319 = pkin(3) * t330;
t317 = t149 * t354;
t246 = qJD(1) ^ 2;
t316 = t239 * t246 * t242;
t236 = -qJ(4) - pkin(7);
t305 = pkin(5) * t238 - t236;
t108 = pkin(4) * t173 - pkin(8) * t176 + t319;
t297 = qJD(3) * t336;
t153 = t242 * qJD(4) - t239 * t297;
t260 = -t239 * qJD(4) - t242 * t297;
t92 = t153 * t365 + t233 * t260;
t299 = t241 * t108 - t238 * t92;
t56 = t241 * t111 - t121 * t238;
t85 = t151 * t233 + t301;
t91 = t233 * t153 - t365 * t260;
t120 = t177 * t233 + t365 * t298;
t295 = t166 * t241;
t292 = -t184 * t24 + t334 * t81;
t291 = t242 * t306;
t290 = pkin(5) * t416 - t85;
t289 = g(2) * t347 - t215 * t393;
t288 = t269 * t119 + t162 * t335;
t207 = -pkin(3) * t365 - pkin(4);
t287 = -pkin(8) * t215 - t395;
t284 = g(1) * t240 - g(2) * t243;
t283 = -t115 * t23 + t270 * t41;
t281 = -t218 * t236 - t386;
t279 = -t173 * t81 + t24 * t266;
t278 = -t238 * t44 - t241 * t43;
t277 = t238 * t43 - t241 * t44;
t276 = -t116 * t119 + t162 * t40;
t275 = t127 * t266 - t173 * t174;
t213 = pkin(4) + t385;
t244 = -pkin(9) - pkin(8);
t274 = t213 * t217 - t215 * t244;
t164 = t326 + t348;
t272 = -t166 * t416 + t112;
t45 = -pkin(5) * t266 - pkin(9) * t351 + t56;
t48 = -pkin(9) * t352 + t57;
t19 = -t237 * t48 + t397 * t45;
t20 = t237 * t45 + t397 * t48;
t268 = t181 * t328 + t354;
t26 = t238 * t108 + t111 * t328 - t121 * t329 + t241 * t92;
t265 = -t205 * t123 + t166 * t71;
t263 = -qJD(1) * t196 + t286;
t259 = -qJDD(3) * t206 + t196 * t420;
t245 = qJD(3) ^ 2;
t254 = -t206 * t245 - 0.2e1 * t194 - t304;
t253 = qJD(5) * t278 - t9 * t238 + t8 * t241;
t251 = -t166 * t268 - t181 * t337;
t114 = -t164 * qJD(3) - t239 * t193 + t221;
t163 = t223 - t349;
t250 = t113 * t242 - t114 * t239 + (-t163 * t242 - t164 * t239) * qJD(3);
t192 = qJDD(3) * t242 - t239 * t245;
t191 = qJDD(3) * t239 + t242 * t245;
t189 = t207 - t385;
t169 = t171 ^ 2;
t157 = t217 * t339 + t344;
t155 = -t217 * t343 + t340;
t129 = qJD(3) * t176 + qJDD(3) * t181;
t128 = -qJD(3) * t173 + qJDD(3) * t266;
t90 = pkin(5) * t352 + t120;
t52 = pkin(5) * t268 + t91;
t27 = -qJD(5) * t57 + t299;
t25 = -pkin(5) * t271 + t36;
t18 = -pkin(9) * t268 + t26;
t17 = -pkin(9) * t353 + t173 * pkin(5) + (-t110 + (pkin(9) * t181 - t111) * t238) * qJD(5) + t299;
t13 = t31 * t397 - t373;
t12 = -t237 * t31 - t318;
t10 = t29 * t397 - t373;
t4 = -qJD(6) * t20 + t17 * t397 - t237 * t18;
t3 = qJD(6) * t19 + t237 * t17 + t18 * t397;
t5 = [0, 0, 0, 0, 0, qJDD(1), t284, g(1) * t243 + g(2) * t240, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t235 * t364 - t304, -0.2e1 * t234 * t364 + t286, 0 (t284 + (t234 ^ 2 + t235 ^ 2) * t364) * pkin(1), qJDD(1) * t230 + 0.2e1 * t291, 0.2e1 * t239 * t320 - 0.2e1 * t325 * t332, t191, qJDD(1) * t231 - 0.2e1 * t291, t192, 0, t239 * t259 + t242 * t254, -t239 * t254 + t242 * t259 (t230 + t231) * t193 + t250 - t286, t194 * t208 - g(1) * (-pkin(2) * t216 + pkin(7) * t218 - t386) - g(2) * (pkin(2) * t218 + pkin(7) * t216 + t227) + t250 * t206, t127 * t181 + t174 * t176, t275 + t368, t129, -t126 * t266 + t171 * t173, t128, 0, -t120 * qJDD(3) + t408 * t126 - t150 * t266 + t170 * t173 - t304 * t217 + (t171 * t396 - t91) * qJD(3), -t121 * qJDD(3) + t408 * t127 + t150 * t181 + t170 * t176 + (t174 * t396 - t92) * qJD(3) + t289, t120 * t127 - t121 * t126 - t171 * t92 - t173 * t78 + t174 * t91 - t176 * t77 + t181 * t377 + t266 * t39 - t286, t39 * t121 + t78 * t92 + t377 * t120 - t77 * t91 + t150 * t408 + t170 * t319 - g(1) * (-t216 * t214 + t281) - g(2) * (-t216 * t236 + t333) -t149 * t267 - t351 * t68, -t317 + (t371 + (-t358 + t361) * qJD(5)) * t181 + t367, t369 + t401, t147 * t268 - t181 * t64, t251 + t400, -t123 * t266 + t166 * t173, t27 * t166 + t56 * t123 - t9 * t266 + t43 * t173 + t91 * t147 - t120 * t271 + t71 * t354 - g(1) * t155 - g(2) * t157 + (t36 * t238 + t328 * t71) * t181, t71 * t353 - g(1) * t154 - g(2) * t156 - t120 * t68 - t57 * t123 + t91 * t149 - t26 * t166 - t44 * t173 + t8 * t266 + (t36 * t241 - t329 * t71) * t181, -t26 * t147 + t57 * t271 - t27 * t149 + t56 * t68 + t278 * t176 + (qJD(5) * t277 - t8 * t238 - t9 * t241) * t181 - t289, t8 * t57 + t44 * t26 + t9 * t56 + t43 * t27 + t36 * t120 + t71 * t91 - g(1) * t281 - g(2) * (pkin(8) * t347 + t218 * t395 + t333) + (-g(1) * (-t214 + t287) + g(2) * t236) * t216, -t116 * t23 - t270 * t40, -t283 + t382, -t276 + t378, t115 * t24 + t41 * t81, t279 + t381, -t119 * t266 + t162 * t173, -g(1) * t143 - g(2) * t145 + t10 * t173 + t115 * t25 + t119 * t19 + t162 * t4 - t2 * t266 + t24 * t90 + t41 * t53 + t52 * t81, -g(1) * t142 - g(2) * t144 + t1 * t266 - t11 * t173 + t116 * t25 - t119 * t20 - t162 * t3 - t23 * t90 + t270 * t52 - t40 * t53, -t1 * t115 + t10 * t40 - t11 * t41 - t116 * t2 + t19 * t23 - t20 * t24 - t270 * t4 - t3 * t81 - t289, t1 * t20 + t11 * t3 + t2 * t19 + t10 * t4 + t25 * t90 + t53 * t52 + g(1) * t386 - g(2) * t333 + (-g(1) * t305 - g(2) * t274) * t218 + (-g(1) * (-t214 - t274) - g(2) * t305) * t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t192, -t191, 0, t113 * t239 + t114 * t242 - g(3) + (-t163 * t239 + t164 * t242) * qJD(3), 0, 0, 0, 0, 0, 0, t128, -t129, -t275 + t368, -t173 * t77 + t176 * t78 + t181 * t39 - t266 * t377 - g(3), 0, 0, 0, 0, 0, 0, t251 - t400, t369 - t401, t317 + (-t371 + (t358 + t361) * qJD(5)) * t181 + t367, t71 * t173 - t176 * t277 + t181 * t253 - t266 * t36 - g(3), 0, 0, 0, 0, 0, 0, -t279 + t381, t276 + t378, t283 + t382, t1 * t116 - t10 * t41 - t11 * t40 - t115 * t2 + t173 * t53 - t25 * t266 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, t332 * t246, t321, t316, t320, qJDD(3), -t387 + t221 + (t164 - t348) * qJD(3) + (t263 + t293) * t239, g(3) * t239 + (t163 + t349) * qJD(3) + t263 * t242 + t313, 0, 0, t355, -t169 + t398 (t199 + t171) * qJD(3) + t255, -t355, -t280, qJDD(3), t85 * qJD(3) - t170 * t174 + (qJDD(3) * t365 - t171 * t331) * pkin(3) + t258 - t377, t86 * qJD(3) + t170 * t171 + (-qJDD(3) * t233 - t174 * t331) * pkin(3) - t39 - t256 (t78 - t85) * t174 + (-t77 + t86) * t171 + (-t126 * t233 - t127 * t365) * pkin(3), t77 * t85 - t78 * t86 + (-t365 * t377 - t387 + t233 * t39 + (-qJD(1) * t170 + t286) * t239) * pkin(3), t149 * t295 - t371 (-t68 - t363) * t241 - t410 + t366, t166 * t295 + t337 - t359, t147 * t296 + t262, t272 + t362, -t166 * t174, t207 * t314 - t46 * t166 - t43 * t174 - t85 * t147 + t265 * t238 + (-t207 * qJDD(3) - t421) * t241, -t85 * t149 + t47 * t166 + t44 * t174 - t207 * t68 + t238 * t421 + t265 * t241, t47 * t147 + t46 * t149 + ((qJD(5) * t149 + t271) * t205 + t282) * t241 + (-t44 * t171 - t205 * t68 - t9 + (t147 * t205 - t44) * qJD(5)) * t238 + t256, t36 * t207 - t44 * t47 - t43 * t46 - t71 * t85 - g(3) * (t226 - t287) + t253 * t205 + t286 * (pkin(4) * t215 - pkin(8) * t217 + t396) -t23 * t184 - t270 * t334, t292 - t399, -t370 + t402, -t24 * t269 - t335 * t81, t288 + t375, -t162 * t174, -t10 * t174 + t124 * t119 + t162 * t379 + t189 * t24 + t225 * t258 - t25 * t269 + t290 * t81 - t335 * t53, t11 * t174 - t125 * t119 - t162 * t380 + t25 * t184 - t189 * t23 - t224 * t258 + t270 * t290 - t334 * t53, t1 * t269 + t10 * t334 + t11 * t335 + t124 * t23 - t125 * t24 - t2 * t184 - t270 * t379 - t380 * t81 + t256, t1 * t125 + t2 * t124 + t25 * t189 - g(3) * (t226 + t274) + t290 * t53 + t380 * t11 + t379 * t10 + t286 * (t213 * t215 + t217 * t244 + t396); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174 * t420 + t280 (t199 - t171) * qJD(3) + t255, -t169 - t398, t78 * t171 + t77 * t174 + t150 + t304, 0, 0, 0, 0, 0, 0, t272 - t362, -t166 ^ 2 * t241 - t337 - t359 (t68 - t363) * t241 + t410 + t366, -t71 * t174 + (t9 + t372) * t241 + t282 * t238 + t304, 0, 0, 0, 0, 0, 0, t288 - t375, -t370 - t402, t292 + t399, t1 * t184 + t10 * t335 - t11 * t334 - t53 * t174 + t2 * t269 + t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t360, -t147 ^ 2 + t149 ^ 2, t147 * t166 - t68, -t360, t149 * t166 + t271, t123, -t72 * t328 - t71 * t149 + t372 + t50 + (-qJD(5) * t93 - t37 + t389) * t238 + t406, g(1) * t157 - g(2) * t155 + t147 * t71 + t241 * t389 - t282, 0, 0, t384, t415, t414, -t384, t403, t119, -t12 * t162 + (t119 * t397 - t149 * t81 - t162 * t327) * pkin(5) + t404, t13 * t162 + (-t119 * t237 - t149 * t270 - t162 * t307) * pkin(5) + t413, -t10 * t81 + t11 * t270 + t12 * t270 + t13 * t81 + (t397 * t23 - t237 * t24 + (t237 * t270 - t397 * t81) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t237 + t2 * t397 - t53 * t149 + t238 * t389 + (-t10 * t237 + t11 * t397) * qJD(6) + t406) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, t415, t414, -t384, t403, t119, t11 * t162 + t404, t10 * t162 + t413, 0, 0;];
tau_reg  = t5;
