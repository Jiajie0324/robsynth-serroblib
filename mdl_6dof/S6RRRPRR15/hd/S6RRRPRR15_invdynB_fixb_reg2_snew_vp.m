% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 17:28
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR15_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR15_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR15_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR15_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR15_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR15_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:22:41
% EndTime: 2019-05-07 17:25:05
% DurationCPUTime: 137.27s
% Computational Cost: add. (764445->1070), mult. (1919275->1704), div. (0->0), fcn. (1610476->14), ass. (0->793)
t1303 = sin(qJ(1));
t1308 = cos(qJ(1));
t1298 = cos(pkin(6));
t1287 = qJD(1) * t1298 + qJD(2);
t1302 = sin(qJ(2));
t1306 = cos(qJ(3));
t1307 = cos(qJ(2));
t1297 = cos(pkin(7));
t1301 = sin(qJ(3));
t1493 = t1297 * t1301;
t1295 = sin(pkin(7));
t1497 = t1295 * t1301;
t1296 = sin(pkin(6));
t1525 = qJD(1) * t1296;
t1231 = (t1302 * t1306 + t1307 * t1493) * t1525 + t1287 * t1497;
t1494 = t1296 * t1307;
t1475 = qJD(1) * t1494;
t1254 = -t1297 * t1287 + t1295 * t1475 - qJD(3);
t1479 = qJDD(1) * t1302;
t1524 = qJD(1) * t1307;
t1263 = (qJD(2) * t1524 + t1479) * t1296;
t1495 = t1296 * t1302;
t1476 = qJD(1) * t1495;
t1480 = qJDD(1) * t1296;
t1264 = -qJD(2) * t1476 + t1307 * t1480;
t1460 = qJDD(1) * t1298 + qJDD(2);
t1367 = t1460 * t1295;
t1492 = t1297 * t1306;
t1455 = t1263 * t1301 - t1264 * t1492 - t1306 * t1367;
t1118 = (qJD(3) - t1254) * t1231 + t1455;
t1250 = t1254 ^ 2;
t1459 = t1297 * t1475;
t1496 = t1295 * t1306;
t1229 = -t1287 * t1496 + t1301 * t1476 - t1306 * t1459;
t1539 = t1229 ^ 2;
t1173 = -t1250 - t1539;
t1450 = t1264 * t1295 - t1297 * t1460 - qJDD(3);
t1506 = t1229 * t1231;
t1330 = t1450 + t1506;
t1555 = t1306 * t1330;
t1377 = t1173 * t1301 - t1555;
t1022 = t1297 * t1118 + t1295 * t1377;
t1024 = -t1295 * t1118 + t1297 * t1377;
t1556 = t1301 * t1330;
t1090 = t1173 * t1306 + t1556;
t1405 = t1024 * t1307 + t1090 * t1302;
t912 = -t1296 * t1022 + t1298 * t1405;
t984 = t1024 * t1302 - t1090 * t1307;
t847 = -t1303 * t984 + t1308 * t912;
t1698 = pkin(8) * t847;
t850 = t1303 * t912 + t1308 * t984;
t1697 = pkin(8) * t850;
t1177 = -t1229 * qJD(3) + t1306 * t1263 + t1264 * t1493 + t1301 * t1367;
t1208 = t1229 * t1254;
t1124 = t1208 + t1177;
t1538 = t1231 ^ 2;
t1183 = t1538 + t1250;
t1331 = t1450 - t1506;
t1554 = t1331 * t1301;
t1384 = t1183 * t1306 - t1554;
t1029 = -t1124 * t1297 + t1295 * t1384;
t1031 = t1124 * t1295 + t1297 * t1384;
t1553 = t1331 * t1306;
t1098 = t1183 * t1301 + t1553;
t1402 = t1031 * t1307 - t1098 * t1302;
t918 = -t1296 * t1029 + t1298 * t1402;
t987 = t1031 * t1302 + t1098 * t1307;
t856 = -t1303 * t987 + t1308 * t918;
t1696 = pkin(8) * t856;
t857 = t1303 * t918 + t1308 * t987;
t1695 = pkin(8) * t857;
t916 = t1298 * t1029 + t1296 * t1402;
t1694 = pkin(9) * (t1296 * t916 + t1298 * t918);
t910 = t1298 * t1022 + t1296 * t1405;
t1693 = pkin(9) * (t1296 * t910 + t1298 * t912);
t1692 = pkin(1) * t910;
t1691 = pkin(1) * t912;
t1690 = pkin(1) * t916;
t1689 = pkin(1) * t918;
t1119 = (qJD(3) + t1254) * t1231 + t1455;
t1203 = t1250 - t1539;
t1383 = t1203 * t1301 + t1553;
t1038 = t1297 * t1119 + t1295 * t1383;
t1042 = -t1295 * t1119 + t1297 * t1383;
t1105 = t1203 * t1306 - t1554;
t1397 = t1042 * t1307 + t1105 * t1302;
t921 = -t1296 * t1038 + t1298 * t1397;
t994 = t1042 * t1302 - t1105 * t1307;
t1688 = t1303 * t921 + t1308 * t994;
t1206 = -t1538 + t1250;
t1378 = t1206 * t1306 - t1556;
t1550 = -t1208 + t1177;
t1037 = t1295 * t1378 + t1297 * t1550;
t1041 = -t1295 * t1550 + t1297 * t1378;
t1103 = t1206 * t1301 + t1555;
t1398 = t1041 * t1307 - t1103 * t1302;
t920 = -t1296 * t1037 + t1298 * t1398;
t991 = t1041 * t1302 + t1103 * t1307;
t1687 = t1303 * t920 + t1308 * t991;
t1686 = -t1303 * t994 + t1308 * t921;
t1685 = -t1303 * t991 + t1308 * t920;
t1682 = pkin(9) * t984;
t1681 = pkin(9) * t987;
t1672 = t1298 * t1038 + t1296 * t1397;
t1671 = t1298 * t1037 + t1296 * t1398;
t1594 = -t1119 * t1306 + t1301 * t1550;
t1548 = -t1538 - t1539;
t1595 = -t1119 * t1301 - t1306 * t1550;
t1602 = -t1295 * t1548 + t1297 * t1595;
t1614 = -t1302 * t1602 + t1307 * t1594;
t1603 = t1295 * t1595 + t1297 * t1548;
t1613 = t1302 * t1594 + t1307 * t1602;
t1635 = -t1296 * t1603 + t1298 * t1613;
t1645 = t1303 * t1614 + t1308 * t1635;
t1670 = pkin(8) * t1645;
t1646 = -t1303 * t1635 + t1308 * t1614;
t1669 = pkin(8) * t1646;
t1668 = pkin(10) * (t1029 * t1295 + t1031 * t1297);
t1667 = pkin(10) * (t1022 * t1295 + t1024 * t1297);
t1517 = t1118 * t1306;
t1605 = -t1124 * t1301 - t1517;
t1547 = t1538 - t1539;
t1518 = t1118 * t1301;
t1604 = t1124 * t1306 - t1518;
t1615 = -t1295 * t1547 + t1297 * t1604;
t1634 = -t1302 * t1615 + t1307 * t1605;
t1616 = t1295 * t1604 + t1297 * t1547;
t1633 = t1302 * t1605 + t1307 * t1615;
t1647 = -t1296 * t1616 + t1298 * t1633;
t1666 = -t1303 * t1647 + t1308 * t1634;
t1665 = t1303 * t1634 + t1308 * t1647;
t1664 = pkin(1) * t1635;
t1636 = t1296 * t1613 + t1298 * t1603;
t1663 = pkin(1) * t1636;
t1662 = pkin(2) * t1022;
t1661 = pkin(2) * t1024;
t1660 = pkin(2) * t1029;
t1659 = pkin(2) * t1031;
t1648 = t1296 * t1633 + t1298 * t1616;
t1642 = (-t1296 * t1636 - t1298 * t1635) * pkin(9);
t1641 = pkin(9) * t1614;
t1632 = pkin(2) * t1602;
t1631 = pkin(2) * t1603;
t1630 = pkin(10) * t1090;
t1629 = pkin(10) * t1098;
t1612 = (-t1295 * t1603 - t1297 * t1602) * pkin(10);
t1611 = pkin(10) * t1594;
t1610 = qJ(4) * t1124;
t1362 = t1254 * (t1229 * t1301 + t1231 * t1306);
t1316 = t1295 * t1450 + t1297 * t1362;
t1504 = t1231 * t1301;
t1505 = t1229 * t1306;
t1361 = (-t1504 + t1505) * t1254;
t1545 = -t1302 * t1316 + t1307 * t1361;
t1319 = t1295 * t1362 - t1297 * t1450;
t1546 = t1302 * t1361 + t1307 * t1316;
t1564 = -t1296 * t1319 + t1298 * t1546;
t1593 = -t1303 * t1564 + t1308 * t1545;
t1176 = qJD(3) * t1231 + t1455;
t1320 = -t1176 * t1492 + (t1231 * t1295 - t1254 * t1493) * t1229;
t1364 = t1176 * t1301 - t1254 * t1505;
t1543 = -t1302 * t1320 + t1307 * t1364;
t1322 = -t1176 * t1496 + (-t1231 * t1297 - t1254 * t1497) * t1229;
t1544 = t1302 * t1364 + t1307 * t1320;
t1565 = -t1296 * t1322 + t1298 * t1544;
t1592 = -t1303 * t1565 + t1308 * t1543;
t1321 = t1177 * t1493 + (-t1229 * t1295 - t1254 * t1492) * t1231;
t1457 = t1306 * t1177 + t1254 * t1504;
t1541 = -t1302 * t1321 + t1307 * t1457;
t1323 = t1177 * t1497 + (t1229 * t1297 - t1254 * t1496) * t1231;
t1542 = t1302 * t1457 + t1307 * t1321;
t1566 = -t1296 * t1323 + t1298 * t1542;
t1591 = -t1303 * t1566 + t1308 * t1541;
t1590 = t1303 * t1545 + t1308 * t1564;
t1589 = t1303 * t1543 + t1308 * t1565;
t1588 = t1303 * t1541 + t1308 * t1566;
t1299 = sin(qJ(6));
t1300 = sin(qJ(5));
t1305 = cos(qJ(5));
t1201 = t1229 * t1300 - t1254 * t1305;
t1223 = qJD(5) + t1231;
t1304 = cos(qJ(6));
t1151 = t1201 * t1299 - t1304 * t1223;
t1153 = t1201 * t1304 + t1223 * t1299;
t1085 = t1153 * t1151;
t1464 = -t1305 * t1176 - t1300 * t1450;
t1094 = -qJD(5) * t1201 - t1464;
t1332 = qJDD(6) - t1094;
t1552 = -t1085 + t1332;
t1581 = t1299 * t1552;
t1199 = -t1305 * t1229 - t1254 * t1300;
t1138 = t1201 * t1199;
t1174 = qJDD(5) + t1177;
t1551 = -t1138 + t1174;
t1580 = t1300 * t1551;
t1575 = t1304 * t1552;
t1574 = t1305 * t1551;
t1569 = t1296 * t1542 + t1298 * t1323;
t1568 = t1296 * t1544 + t1298 * t1322;
t1567 = t1296 * t1546 + t1298 * t1319;
t1271 = t1287 * t1476;
t1241 = t1264 - t1271;
t1560 = t1298 * t1241;
t1376 = t1176 * t1300 - t1305 * t1450;
t1095 = -qJD(5) * t1199 + t1376;
t1163 = t1223 * t1199;
t1058 = t1095 - t1163;
t1272 = t1287 * t1475;
t1238 = t1272 + t1263;
t1251 = (t1287 * t1295 + t1459) * pkin(10);
t1532 = pkin(10) * t1295;
t1259 = (-pkin(2) * t1307 - t1302 * t1532) * t1525;
t1284 = g(1) * t1308 + g(2) * t1303;
t1309 = qJD(1) ^ 2;
t1260 = -pkin(1) * t1309 + pkin(9) * t1480 - t1284;
t1283 = t1303 * g(1) - t1308 * g(2);
t1533 = pkin(9) * t1296;
t1324 = qJDD(1) * pkin(1) + t1309 * t1533 + t1283;
t1318 = t1298 * t1324;
t1461 = -t1302 * t1260 + t1307 * t1318;
t1531 = pkin(10) * t1297;
t1134 = -t1263 * t1531 + t1460 * pkin(2) + t1287 * t1251 + (-qJD(1) * t1259 * t1302 - g(3) * t1307) * t1296 + t1461;
t1257 = pkin(2) * t1287 - t1476 * t1531;
t1530 = t1298 * g(3);
t1312 = -t1263 * t1532 - t1264 * pkin(2) - t1530 + ((-t1251 * t1307 + t1257 * t1302) * qJD(1) - t1324) * t1296;
t1067 = t1134 * t1295 - t1297 * t1312;
t1549 = t1067 + (pkin(3) * t1254 + (2 * qJD(4))) * t1231;
t1196 = qJD(6) + t1199;
t1102 = t1196 * t1151;
t1467 = t1151 * qJD(6) - t1304 * t1095 - t1299 * t1174;
t981 = t1467 + t1102;
t1465 = t1095 * t1299 - t1304 * t1174;
t976 = (qJD(6) - t1196) * t1153 + t1465;
t1147 = t1151 ^ 2;
t1148 = t1153 ^ 2;
t1195 = t1196 ^ 2;
t1197 = t1199 ^ 2;
t1198 = t1201 ^ 2;
t1540 = t1223 ^ 2;
t1286 = t1287 ^ 2;
t1537 = pkin(3) + pkin(11);
t1536 = pkin(3) * t1176;
t1535 = pkin(3) * t1301;
t1534 = pkin(3) * t1306;
t1136 = pkin(5) * t1199 - pkin(12) * t1201;
t1314 = -g(3) * t1495 + t1302 * t1318;
t1135 = -t1287 * t1257 + (t1259 * t1525 + t1260) * t1307 + (t1264 * t1297 + t1367) * pkin(10) + t1314;
t1311 = t1295 * t1312;
t1008 = -t1134 * t1492 + t1135 * t1301 - t1306 * t1311;
t1189 = pkin(3) * t1229 - qJ(4) * t1231;
t1326 = t1189 * t1231 + qJDD(4) + t1008;
t1317 = pkin(3) * t1450 + t1326;
t982 = qJ(4) * t1250 - t1317;
t1313 = t1550 * pkin(4) + pkin(11) * t1330 - t982;
t1202 = pkin(4) * t1231 + pkin(11) * t1254;
t1315 = -t1549 - t1610;
t927 = -pkin(4) * t1539 + t1176 * t1537 - t1202 * t1231 + t1315;
t840 = t1300 * t1313 + t1305 * t927;
t816 = -pkin(5) * t1540 + pkin(12) * t1174 - t1136 * t1199 + t840;
t1488 = t1306 * t1135;
t967 = -t1250 * pkin(3) - qJ(4) * t1450 - 0.2e1 * qJD(4) * t1254 + t1134 * t1493 - t1229 * t1189 + t1301 * t1311 + t1488;
t929 = -t1176 * pkin(4) - pkin(11) * t1539 - t1254 * t1202 + t967;
t863 = t929 - t1058 * pkin(12) + (t1201 * t1223 - t1094) * pkin(5);
t773 = t1299 * t863 + t1304 * t816;
t839 = t1300 * t927 - t1305 * t1313;
t815 = -t1174 * pkin(5) - pkin(12) * t1540 + t1136 * t1201 + t839;
t1529 = t1299 * t815;
t1528 = t1300 * t929;
t1527 = t1304 * t815;
t1526 = t1305 * t929;
t1004 = t1085 + t1332;
t1522 = t1004 * t1299;
t1521 = t1004 * t1304;
t1081 = t1138 + t1174;
t1520 = t1081 * t1300;
t1519 = t1081 * t1305;
t1510 = t1196 * t1299;
t1509 = t1196 * t1304;
t1508 = t1223 * t1300;
t1507 = t1223 * t1305;
t1486 = t1307 * t1309;
t1292 = t1296 ^ 2;
t1499 = t1292 * t1302;
t1282 = t1486 * t1499;
t1261 = t1282 + t1460;
t1503 = t1261 * t1302;
t1502 = t1261 * t1307;
t1262 = -t1282 + t1460;
t1501 = t1262 * t1302;
t1500 = t1262 * t1307;
t1498 = t1292 * t1309;
t1491 = t1301 * t1067;
t1243 = t1296 * t1324 + t1530;
t1490 = t1302 * t1243;
t1489 = t1306 * t1067;
t1487 = t1307 * t1243;
t1483 = qJD(5) + t1223;
t1293 = t1302 ^ 2;
t1294 = t1307 ^ 2;
t1481 = t1293 + t1294;
t1478 = pkin(5) * t1305 + pkin(4);
t1477 = t1287 * t1525;
t1474 = t1300 * t1085;
t1473 = t1305 * t1085;
t1472 = t1301 * t1138;
t1471 = t1306 * t1138;
t1469 = t1293 * t1498;
t1468 = t1294 * t1498;
t1466 = pkin(5) * t1300 + qJ(4);
t772 = t1299 * t816 - t1304 * t863;
t722 = t1299 * t772 + t1304 * t773;
t1247 = -t1283 * t1303 - t1308 * t1284;
t1281 = qJDD(1) * t1308 - t1303 * t1309;
t1458 = -pkin(8) * t1281 - g(3) * t1303;
t1256 = -t1469 - t1286;
t1213 = -t1256 * t1302 - t1500;
t1454 = pkin(9) * t1213 - t1490;
t1268 = -t1286 - t1468;
t1217 = t1268 * t1307 - t1503;
t1453 = pkin(9) * t1217 + t1487;
t1452 = t1489 + t1630;
t1451 = -t1491 + t1629;
t721 = t1299 * t773 - t1304 * t772;
t774 = t1300 * t840 - t1305 * t839;
t775 = t1300 * t839 + t1305 * t840;
t697 = t1300 * t722 - t1305 * t815;
t1449 = t1301 * t721 - t1306 * t697;
t1448 = t1301 * t929 - t1306 * t774;
t1044 = t1147 + t1148;
t980 = -t1102 + t1467;
t895 = -t1299 * t980 - t1304 * t976;
t851 = t1044 * t1305 + t1300 * t895;
t893 = -t1299 * t976 + t1304 * t980;
t1447 = t1301 * t893 - t1306 * t851;
t1084 = -t1148 + t1147;
t977 = (-qJD(6) - t1196) * t1153 - t1465;
t894 = t1299 * t981 + t1304 * t977;
t866 = -t1084 * t1305 - t1300 * t894;
t892 = t1299 * t977 - t1304 * t981;
t1446 = t1301 * t892 + t1306 * t866;
t1065 = -t1195 - t1147;
t948 = t1065 * t1304 - t1581;
t871 = t1300 * t948 + t1305 * t977;
t947 = t1065 * t1299 + t1575;
t1445 = t1301 * t947 - t1306 * t871;
t1071 = -t1148 - t1195;
t955 = -t1071 * t1299 - t1521;
t875 = t1300 * t955 + t1305 * t981;
t954 = t1071 * t1304 - t1522;
t1444 = t1301 * t954 - t1306 * t875;
t1101 = -t1148 + t1195;
t970 = -t1101 * t1299 + t1575;
t882 = -t1300 * t970 - t1305 * t980;
t968 = t1101 * t1304 + t1581;
t1443 = t1301 * t968 + t1306 * t882;
t1100 = t1147 - t1195;
t971 = t1100 * t1304 - t1522;
t883 = -t1300 * t971 - t1305 * t976;
t969 = t1100 * t1299 + t1521;
t1442 = t1301 * t969 + t1306 * t883;
t1006 = -qJD(6) * t1153 - t1465;
t973 = -t1006 * t1299 + t1151 * t1509;
t930 = -t1300 * t973 - t1473;
t972 = t1006 * t1304 + t1151 * t1510;
t1441 = t1301 * t972 + t1306 * t930;
t975 = -t1153 * t1510 - t1304 * t1467;
t931 = -t1300 * t975 + t1473;
t974 = t1153 * t1509 - t1299 * t1467;
t1440 = t1301 * t974 + t1306 * t931;
t1439 = t1301 * t967 + t1306 * t982;
t698 = t1300 * t815 + t1305 * t722;
t665 = -t1295 * t698 + t1297 * t1449;
t676 = t1301 * t697 + t1306 * t721;
t1438 = t1302 * t676 + t1307 * t665;
t716 = -t1295 * t775 + t1297 * t1448;
t758 = t1301 * t774 + t1306 * t929;
t1437 = t1302 * t758 + t1307 * t716;
t852 = -t1044 * t1300 + t1305 * t895;
t757 = -t1295 * t852 + t1297 * t1447;
t792 = t1301 * t851 + t1306 * t893;
t1436 = t1302 * t792 + t1307 * t757;
t867 = -t1084 * t1300 + t1305 * t894;
t764 = -t1295 * t867 + t1297 * t1446;
t796 = -t1301 * t866 + t1306 * t892;
t1435 = t1302 * t796 + t1307 * t764;
t872 = -t1300 * t977 + t1305 * t948;
t777 = -t1295 * t872 + t1297 * t1445;
t817 = t1301 * t871 + t1306 * t947;
t1434 = t1302 * t817 + t1307 * t777;
t876 = -t1300 * t981 + t1305 * t955;
t779 = -t1295 * t876 + t1297 * t1444;
t823 = t1301 * t875 + t1306 * t954;
t1433 = t1302 * t823 + t1307 * t779;
t884 = -t1300 * t980 + t1305 * t970;
t785 = -t1295 * t884 + t1297 * t1443;
t835 = -t1301 * t882 + t1306 * t968;
t1432 = t1302 * t835 + t1307 * t785;
t885 = -t1300 * t976 + t1305 * t971;
t786 = -t1295 * t885 + t1297 * t1442;
t836 = -t1301 * t883 + t1306 * t969;
t1431 = t1302 * t836 + t1307 * t786;
t932 = t1305 * t973 - t1474;
t810 = -t1295 * t932 + t1297 * t1441;
t864 = -t1301 * t930 + t1306 * t972;
t1430 = t1302 * t864 + t1307 * t810;
t933 = t1305 * t975 + t1474;
t811 = -t1295 * t933 + t1297 * t1440;
t865 = -t1301 * t931 + t1306 * t974;
t1429 = t1302 * t865 + t1307 * t811;
t962 = t1315 + t1536;
t834 = -t1295 * t962 + t1297 * t1439;
t886 = -t1301 * t982 + t1306 * t967;
t1428 = t1302 * t886 + t1307 * t834;
t1026 = (-t1151 * t1299 - t1153 * t1304) * t1196;
t1027 = (-t1151 * t1304 + t1153 * t1299) * t1196;
t985 = -t1027 * t1300 + t1305 * t1332;
t1417 = t1026 * t1301 + t1306 * t985;
t986 = t1027 * t1305 + t1300 * t1332;
t854 = -t1295 * t986 + t1297 * t1417;
t914 = t1026 * t1306 - t1301 * t985;
t1427 = t1302 * t914 + t1307 * t854;
t1096 = -t1197 - t1198;
t1059 = t1095 + t1163;
t1329 = (-qJD(5) + t1223) * t1201 - t1464;
t964 = -t1059 * t1305 + t1300 * t1329;
t1415 = t1096 * t1301 - t1306 * t964;
t966 = t1059 * t1300 + t1305 * t1329;
t860 = -t1295 * t966 + t1297 * t1415;
t934 = t1096 * t1306 + t1301 * t964;
t1426 = t1302 * t934 + t1307 * t860;
t1137 = -t1197 + t1198;
t1055 = t1201 * t1483 + t1464;
t963 = t1055 * t1300 - t1058 * t1305;
t1414 = t1137 * t1301 + t1306 * t963;
t965 = -t1055 * t1305 - t1058 * t1300;
t870 = -t1295 * t965 + t1297 * t1414;
t943 = t1137 * t1306 - t1301 * t963;
t1425 = t1302 * t943 + t1307 * t870;
t1107 = -t1540 - t1197;
t1015 = t1107 * t1305 - t1580;
t1014 = t1107 * t1300 + t1574;
t1409 = -t1014 * t1306 + t1055 * t1301;
t897 = -t1295 * t1015 + t1297 * t1409;
t951 = t1014 * t1301 + t1055 * t1306;
t1424 = t1302 * t951 + t1307 * t897;
t1009 = t1488 + (t1297 * t1134 + t1311) * t1301;
t1410 = -t1008 * t1306 + t1009 * t1301;
t901 = t1295 * t1067 + t1297 * t1410;
t928 = t1008 * t1301 + t1009 * t1306;
t1423 = t1302 * t928 + t1307 * t901;
t1131 = -t1198 - t1540;
t1021 = -t1131 * t1300 - t1519;
t1020 = t1131 * t1305 - t1520;
t1060 = -t1199 * t1483 + t1376;
t1406 = -t1020 * t1306 + t1060 * t1301;
t903 = -t1295 * t1021 + t1297 * t1406;
t953 = t1020 * t1301 + t1060 * t1306;
t1422 = t1302 * t953 + t1307 * t903;
t1161 = t1197 - t1540;
t1035 = t1161 * t1305 - t1520;
t1033 = -t1161 * t1300 - t1519;
t1400 = t1033 * t1306 + t1301 * t1329;
t907 = -t1295 * t1035 + t1297 * t1400;
t960 = -t1033 * t1301 + t1306 * t1329;
t1421 = t1302 * t960 + t1307 * t907;
t1162 = -t1198 + t1540;
t1034 = -t1162 * t1300 + t1574;
t1032 = -t1162 * t1305 - t1580;
t1401 = t1032 * t1306 + t1059 * t1301;
t908 = -t1295 * t1034 + t1297 * t1401;
t961 = -t1032 * t1301 + t1059 * t1306;
t1420 = t1302 * t961 + t1307 * t908;
t1051 = -t1094 * t1300 + t1199 * t1507;
t1050 = -t1094 * t1305 - t1199 * t1508;
t1366 = t1050 * t1306 - t1472;
t941 = -t1051 * t1295 + t1297 * t1366;
t997 = -t1050 * t1301 - t1471;
t1419 = t1302 * t997 + t1307 * t941;
t1053 = t1095 * t1305 - t1201 * t1508;
t1052 = -t1095 * t1300 - t1201 * t1507;
t1365 = t1052 * t1306 + t1472;
t942 = -t1053 * t1295 + t1297 * t1365;
t998 = -t1052 * t1301 + t1471;
t1418 = t1302 * t998 + t1307 * t942;
t1086 = (t1199 * t1300 + t1201 * t1305) * t1223;
t1045 = -t1086 * t1301 + t1174 * t1306;
t1087 = (-t1199 * t1305 + t1201 * t1300) * t1223;
t1391 = t1086 * t1306 + t1174 * t1301;
t990 = -t1295 * t1087 + t1297 * t1391;
t1416 = t1045 * t1302 + t1307 * t990;
t1413 = qJD(1) * t1287 - t1298 * t1309;
t1211 = g(3) * t1494 - t1461;
t1212 = t1307 * t1260 + t1314;
t1375 = -t1211 * t1307 + t1212 * t1302;
t1154 = t1211 * t1302 + t1212 * t1307;
t1374 = t1238 * t1307 + t1241 * t1302;
t1239 = -t1272 + t1263;
t1240 = t1264 + t1271;
t1373 = -t1239 * t1307 + t1240 * t1302;
t1372 = t1256 * t1307 - t1501;
t1266 = t1286 - t1469;
t1371 = t1266 * t1307 + t1503;
t1370 = t1268 * t1302 + t1502;
t1267 = -t1286 + t1468;
t1369 = t1267 * t1302 + t1500;
t1246 = t1283 * t1308 - t1284 * t1303;
t1368 = t1296 * t1460;
t649 = -t1537 * t698 + (pkin(12) * t1300 + t1478) * t721;
t663 = pkin(4) * t697 - pkin(5) * t815 + pkin(12) * t722 - qJ(4) * t698;
t1343 = pkin(10) * t676 + t1301 * t663 + t1306 * t649;
t648 = -t1537 * t697 + (-pkin(12) * t1305 + t1466) * t721;
t664 = t1295 * t1449 + t1297 * t698;
t630 = -pkin(2) * t664 - t1295 * t648 + t1297 * t1343;
t633 = -t1301 * t649 + t1306 * t663 + (-t1295 * t664 - t1297 * t665) * pkin(10);
t647 = -t1302 * t665 + t1307 * t676;
t1359 = pkin(9) * t647 + t1302 * t633 + t1307 * t630;
t706 = -pkin(12) * t893 - t721;
t682 = -t1300 * t706 + t1478 * t893 - t1537 * t852;
t686 = pkin(4) * t851 + pkin(5) * t1044 + pkin(12) * t895 - qJ(4) * t852 + t722;
t1342 = pkin(10) * t792 + t1301 * t686 + t1306 * t682;
t681 = t1305 * t706 + t1466 * t893 - t1537 * t851;
t756 = t1295 * t1447 + t1297 * t852;
t645 = -pkin(2) * t756 - t1295 * t681 + t1297 * t1342;
t652 = -t1301 * t682 + t1306 * t686 + (-t1295 * t756 - t1297 * t757) * pkin(10);
t720 = -t1302 * t757 + t1307 * t792;
t1358 = pkin(9) * t720 + t1302 * t652 + t1307 * t645;
t718 = pkin(4) * t929 - t1537 * t775;
t724 = pkin(4) * t774 - qJ(4) * t775;
t1339 = pkin(10) * t758 + t1301 * t724 + t1306 * t718;
t715 = t1295 * t1448 + t1297 * t775;
t717 = qJ(4) * t929 - t1537 * t774;
t651 = -pkin(2) * t715 - t1295 * t717 + t1297 * t1339;
t659 = -t1301 * t718 + t1306 * t724 + (-t1295 * t715 - t1297 * t716) * pkin(10);
t685 = -t1302 * t716 + t1307 * t758;
t1357 = pkin(9) * t685 + t1302 * t659 + t1307 * t651;
t760 = -pkin(5) * t947 + t772;
t791 = -pkin(12) * t947 + t1529;
t693 = pkin(4) * t947 - t1300 * t791 - t1305 * t760 - t1537 * t872;
t730 = pkin(4) * t871 + pkin(5) * t977 + pkin(12) * t948 - qJ(4) * t872 - t1527;
t1341 = pkin(10) * t817 + t1301 * t730 + t1306 * t693;
t692 = qJ(4) * t947 - t1300 * t760 + t1305 * t791 - t1537 * t871;
t776 = t1295 * t1445 + t1297 * t872;
t654 = -pkin(2) * t776 - t1295 * t692 + t1297 * t1341;
t667 = -t1301 * t693 + t1306 * t730 + (-t1295 * t776 - t1297 * t777) * pkin(10);
t739 = -t1302 * t777 + t1307 * t817;
t1356 = pkin(9) * t739 + t1302 * t667 + t1307 * t654;
t761 = -pkin(5) * t954 + t773;
t793 = -pkin(12) * t954 + t1527;
t695 = pkin(4) * t954 - t1300 * t793 - t1305 * t761 - t1537 * t876;
t734 = pkin(4) * t875 + pkin(5) * t981 + pkin(12) * t955 - qJ(4) * t876 + t1529;
t1340 = pkin(10) * t823 + t1301 * t734 + t1306 * t695;
t694 = qJ(4) * t954 - t1300 * t761 + t1305 * t793 - t1537 * t875;
t778 = t1295 * t1444 + t1297 * t876;
t658 = -pkin(2) * t778 - t1295 * t694 + t1297 * t1340;
t668 = -t1301 * t695 + t1306 * t734 + (-t1295 * t778 - t1297 * t779) * pkin(10);
t740 = -t1302 * t779 + t1307 * t823;
t1355 = pkin(9) * t740 + t1302 * t668 + t1307 * t658;
t751 = pkin(4) * t1096 - t1537 * t966 - t775;
t879 = pkin(4) * t964 - qJ(4) * t966;
t1338 = pkin(10) * t934 + t1301 * t879 + t1306 * t751;
t750 = qJ(4) * t1096 - t1537 * t964 - t774;
t859 = t1295 * t1415 + t1297 * t966;
t684 = -pkin(2) * t859 - t1295 * t750 + t1297 * t1338;
t699 = -t1301 * t751 + t1306 * t879 + (-t1295 * t859 - t1297 * t860) * pkin(10);
t807 = -t1302 * t860 + t1307 * t934;
t1354 = pkin(9) * t807 + t1302 * t699 + t1307 * t684;
t797 = pkin(4) * t1014 - qJ(4) * t1015 - t839;
t829 = pkin(4) * t1055 - t1015 * t1537 + t1526;
t1337 = pkin(10) * t951 + t1301 * t797 + t1306 * t829;
t828 = qJ(4) * t1055 - t1014 * t1537 + t1528;
t896 = t1297 * t1015 + t1295 * t1409;
t705 = -pkin(2) * t896 - t1295 * t828 + t1297 * t1337;
t725 = -t1301 * t829 + t1306 * t797 + (-t1295 * t896 - t1297 * t897) * pkin(10);
t832 = -t1302 * t897 + t1307 * t951;
t1353 = pkin(9) * t832 + t1302 * t725 + t1307 * t705;
t800 = pkin(4) * t1020 - qJ(4) * t1021 - t840;
t831 = pkin(4) * t1060 - t1021 * t1537 - t1528;
t1336 = pkin(10) * t953 + t1301 * t800 + t1306 * t831;
t830 = qJ(4) * t1060 - t1020 * t1537 + t1526;
t902 = t1297 * t1021 + t1295 * t1406;
t708 = -pkin(2) * t902 - t1295 * t830 + t1297 * t1336;
t727 = -t1301 * t831 + t1306 * t800 + (-t1295 * t902 - t1297 * t903) * pkin(10);
t837 = -t1302 * t903 + t1307 * t953;
t1352 = pkin(9) * t837 + t1302 * t727 + t1307 * t708;
t1325 = pkin(10) * t886 + (-qJ(4) * t1301 - t1534) * t962;
t833 = t1295 * t1439 + t1297 * t962;
t887 = pkin(3) * t982 + qJ(4) * t967;
t738 = -pkin(2) * t833 - t1295 * t887 + t1297 * t1325;
t745 = (-qJ(4) * t1306 + t1535) * t962 + (-t1295 * t833 - t1297 * t834) * pkin(10);
t782 = -t1302 * t834 + t1307 * t886;
t1351 = pkin(9) * t782 + t1302 * t745 + t1307 * t738;
t1054 = -pkin(3) * t1550 - qJ(4) * t1119;
t946 = -pkin(3) * t1548 + t967;
t952 = (-t1548 - t1250) * qJ(4) + t1317;
t1335 = t1301 * t952 + t1306 * t946 + t1611;
t799 = -t1054 * t1295 + t1297 * t1335 - t1631;
t806 = -t1301 * t946 + t1306 * t952 + t1612;
t1350 = t1302 * t806 + t1307 * t799 + t1641;
t938 = (t1118 + t1176) * pkin(3) + t1315;
t1327 = qJ(4) * t1518 + t1306 * t938 - t1630;
t936 = (-t1173 - t1250) * qJ(4) + (t1330 + t1450) * pkin(3) + t1326;
t803 = -t1295 * t936 + t1297 * t1327 + t1662;
t841 = qJ(4) * t1517 - t1301 * t938 + t1667;
t1349 = t1302 * t841 + t1307 * t803 + t1682;
t937 = -t1536 + t1549 + 0.2e1 * t1610;
t1328 = t1124 * t1534 + t1301 * t937 - t1629;
t935 = pkin(3) * t1183 - qJ(4) * t1331 + t967;
t805 = -t1295 * t935 + t1297 * t1328 - t1660;
t842 = -t1124 * t1535 + t1306 * t937 - t1668;
t1348 = t1302 * t842 + t1307 * t805 - t1681;
t900 = -t1297 * t1067 + t1295 * t1410;
t812 = (-t1295 * t900 - t1297 * t901) * pkin(10);
t820 = -t1302 * t901 + t1307 * t928;
t821 = -pkin(2) * t900 + t1531 * t928;
t1347 = pkin(9) * t820 + t1302 * t812 + t1307 * t821;
t838 = t1612 - t1410;
t1333 = t928 + t1611;
t846 = t1297 * t1333 - t1631;
t1346 = t1302 * t838 + t1307 * t846 + t1641;
t874 = t1008 * t1295 + t1297 * t1452 - t1662;
t904 = -t1491 - t1667;
t1345 = t1302 * t904 + t1307 * t874 - t1682;
t878 = t1009 * t1295 + t1297 * t1451 + t1660;
t909 = -t1489 + t1668;
t1344 = t1302 * t909 + t1307 * t878 + t1681;
t1193 = t1239 * t1302 + t1240 * t1307;
t1334 = pkin(9) * t1193 + t1154;
t1291 = t1296 * t1292;
t1280 = qJDD(1) * t1303 + t1308 * t1309;
t1270 = t1481 * t1498;
t1269 = (t1293 - t1294) * t1498;
t1265 = -pkin(8) * t1280 + g(3) * t1308;
t1242 = t1481 * t1477;
t1237 = (t1479 + (qJD(2) + t1287) * t1524) * t1296;
t1235 = t1263 * t1307 - t1293 * t1477;
t1234 = -t1264 * t1302 - t1294 * t1477;
t1216 = t1267 * t1307 - t1501;
t1215 = -t1266 * t1302 + t1502;
t1210 = (t1238 * t1298 + t1291 * t1486) * t1302;
t1209 = (-t1291 * t1302 * t1309 + t1560) * t1307;
t1194 = -t1238 * t1302 + t1241 * t1307;
t1188 = t1296 * t1241 + t1298 * t1370;
t1187 = -t1296 * t1240 + t1298 * t1369;
t1186 = -t1296 * t1239 + t1298 * t1371;
t1185 = t1296 * t1370 - t1560;
t1182 = -t1296 * t1237 + t1298 * t1372;
t1181 = t1298 * t1237 + t1296 * t1372;
t1180 = -t1296 * t1269 + t1298 * t1374;
t1179 = t1296 * t1270 + t1298 * t1373;
t1178 = -t1298 * t1270 + t1296 * t1373;
t1142 = -t1188 * t1303 + t1217 * t1308;
t1141 = t1188 * t1308 + t1217 * t1303;
t1133 = -t1182 * t1303 + t1213 * t1308;
t1132 = t1182 * t1308 + t1213 * t1303;
t1129 = t1296 * t1243 + t1298 * t1375;
t1128 = -t1298 * t1243 + t1296 * t1375;
t1109 = -t1179 * t1303 + t1193 * t1308;
t1108 = t1179 * t1308 + t1193 * t1303;
t1097 = -t1490 + (-t1185 * t1296 - t1188 * t1298) * pkin(9);
t1089 = -t1487 + (-t1181 * t1296 - t1182 * t1298) * pkin(9);
t1088 = -pkin(1) * t1185 + t1211 * t1296 + t1298 * t1453;
t1083 = -pkin(1) * t1181 + t1212 * t1296 + t1298 * t1454;
t1070 = pkin(9) * t1154 * t1298 - pkin(1) * t1128;
t1069 = -t1129 * t1303 + t1154 * t1308;
t1068 = t1129 * t1308 + t1154 * t1303;
t1066 = -pkin(1) * t1178 + t1298 * t1334;
t1062 = (-t1128 * t1296 - t1129 * t1298) * pkin(9);
t1061 = (-t1178 * t1296 - t1179 * t1298) * pkin(9) - t1375;
t989 = t1297 * t1087 + t1295 * t1391;
t940 = t1053 * t1297 + t1295 * t1365;
t939 = t1051 * t1297 + t1295 * t1366;
t923 = t1045 * t1307 - t1302 * t990;
t906 = t1297 * t1034 + t1295 * t1401;
t905 = t1297 * t1035 + t1295 * t1400;
t881 = -t1302 * t942 + t1307 * t998;
t880 = -t1302 * t941 + t1307 * t997;
t877 = -t1009 * t1297 + t1295 * t1451 - t1659;
t873 = -t1008 * t1297 + t1295 * t1452 + t1661;
t869 = t1295 * t1414 + t1297 * t965;
t868 = -t1296 * t989 + t1298 * t1416;
t853 = t1295 * t1417 + t1297 * t986;
t845 = t1295 * t1333 + t1632;
t844 = -t1302 * t908 + t1307 * t961;
t843 = -t1302 * t907 + t1307 * t960;
t822 = pkin(2) * t901 + t1532 * t928;
t819 = -t1296 * t940 + t1298 * t1418;
t818 = -t1296 * t939 + t1298 * t1419;
t813 = -t1302 * t870 + t1307 * t943;
t809 = t1295 * t1440 + t1297 * t933;
t808 = t1295 * t1441 + t1297 * t932;
t804 = t1295 * t1328 + t1297 * t935 + t1659;
t802 = t1295 * t1327 + t1297 * t936 - t1661;
t801 = -t1302 * t854 + t1307 * t914;
t798 = t1054 * t1297 + t1295 * t1335 + t1632;
t795 = -t1296 * t906 + t1298 * t1420;
t794 = -t1296 * t905 + t1298 * t1421;
t790 = -t1296 * t902 + t1298 * t1422;
t789 = t1296 * t1422 + t1298 * t902;
t788 = -t1296 * t896 + t1298 * t1424;
t787 = t1296 * t1424 + t1298 * t896;
t784 = t1295 * t1442 + t1297 * t885;
t783 = t1295 * t1443 + t1297 * t884;
t781 = -t1296 * t900 + t1298 * t1423;
t780 = t1296 * t1423 + t1298 * t900;
t770 = -t1296 * t869 + t1298 * t1425;
t769 = -t1302 * t811 + t1307 * t865;
t768 = -t1302 * t810 + t1307 * t864;
t767 = -t1296 * t859 + t1298 * t1426;
t766 = t1296 * t1426 + t1298 * t859;
t765 = -t1296 * t853 + t1298 * t1427;
t763 = t1295 * t1446 + t1297 * t867;
t762 = -t1302 * t878 + t1307 * t909 + t1694;
t759 = -t1302 * t874 + t1307 * t904 - t1693;
t755 = -t1303 * t790 + t1308 * t837;
t754 = t1303 * t837 + t1308 * t790;
t753 = -t1303 * t788 + t1308 * t832;
t752 = t1303 * t832 + t1308 * t788;
t749 = -t1302 * t786 + t1307 * t836;
t748 = -t1302 * t785 + t1307 * t835;
t747 = -t1296 * t833 + t1298 * t1428;
t746 = t1296 * t1428 + t1298 * t833;
t744 = -t1296 * t877 + t1298 * t1344 + t1690;
t743 = -t1303 * t781 + t1308 * t820;
t742 = t1303 * t820 + t1308 * t781;
t741 = -t1296 * t873 + t1298 * t1345 - t1692;
t737 = pkin(2) * t834 + t1295 * t1325 + t1297 * t887;
t736 = -t1302 * t846 + t1307 * t838 + t1642;
t735 = -t1302 * t805 + t1307 * t842 - t1694;
t733 = -t1302 * t803 + t1307 * t841 + t1693;
t732 = -t1296 * t809 + t1298 * t1429;
t731 = -t1296 * t808 + t1298 * t1430;
t729 = -t1303 * t767 + t1308 * t807;
t728 = t1303 * t807 + t1308 * t767;
t726 = -t1302 * t764 + t1307 * t796;
t723 = -t1296 * t845 + t1298 * t1346 - t1663;
t719 = -t1302 * t799 + t1307 * t806 + t1642;
t714 = -t1296 * t804 + t1298 * t1348 - t1690;
t713 = -t1296 * t802 + t1298 * t1349 + t1692;
t712 = -t1296 * t784 + t1298 * t1431;
t711 = -t1296 * t783 + t1298 * t1432;
t710 = -t1303 * t747 + t1308 * t782;
t709 = t1303 * t782 + t1308 * t747;
t707 = pkin(2) * t903 + t1295 * t1336 + t1297 * t830;
t704 = pkin(2) * t897 + t1295 * t1337 + t1297 * t828;
t703 = -t1296 * t778 + t1298 * t1433;
t702 = t1296 * t1433 + t1298 * t778;
t701 = -t1296 * t776 + t1298 * t1434;
t700 = t1296 * t1434 + t1298 * t776;
t696 = -t1296 * t798 + t1298 * t1350 - t1663;
t691 = -t1302 * t821 + t1307 * t812 + (-t1296 * t780 - t1298 * t781) * pkin(9);
t690 = -t1296 * t763 + t1298 * t1435;
t689 = -pkin(1) * t780 - t1296 * t822 + t1298 * t1347;
t688 = -t1296 * t756 + t1298 * t1436;
t687 = t1296 * t1436 + t1298 * t756;
t683 = pkin(2) * t860 + t1295 * t1338 + t1297 * t750;
t680 = -t1303 * t703 + t1308 * t740;
t679 = t1303 * t740 + t1308 * t703;
t678 = -t1303 * t701 + t1308 * t739;
t677 = t1303 * t739 + t1308 * t701;
t675 = -t1303 * t688 + t1308 * t720;
t674 = t1303 * t720 + t1308 * t688;
t673 = -t1296 * t715 + t1298 * t1437;
t672 = t1296 * t1437 + t1298 * t715;
t671 = -t1302 * t738 + t1307 * t745 + (-t1296 * t746 - t1298 * t747) * pkin(9);
t670 = -t1302 * t708 + t1307 * t727 + (-t1296 * t789 - t1298 * t790) * pkin(9);
t669 = -t1302 * t705 + t1307 * t725 + (-t1296 * t787 - t1298 * t788) * pkin(9);
t666 = -pkin(1) * t746 - t1296 * t737 + t1298 * t1351;
t662 = -pkin(1) * t789 - t1296 * t707 + t1298 * t1352;
t661 = -pkin(1) * t787 - t1296 * t704 + t1298 * t1353;
t660 = -t1302 * t684 + t1307 * t699 + (-t1296 * t766 - t1298 * t767) * pkin(9);
t657 = pkin(2) * t779 + t1295 * t1340 + t1297 * t694;
t656 = -t1303 * t673 + t1308 * t685;
t655 = t1303 * t685 + t1308 * t673;
t653 = pkin(2) * t777 + t1295 * t1341 + t1297 * t692;
t650 = pkin(2) * t716 + t1295 * t1339 + t1297 * t717;
t646 = -pkin(1) * t766 - t1296 * t683 + t1298 * t1354;
t644 = pkin(2) * t757 + t1295 * t1342 + t1297 * t681;
t643 = -t1296 * t664 + t1298 * t1438;
t642 = t1296 * t1438 + t1298 * t664;
t641 = -t1302 * t658 + t1307 * t668 + (-t1296 * t702 - t1298 * t703) * pkin(9);
t640 = -t1302 * t654 + t1307 * t667 + (-t1296 * t700 - t1298 * t701) * pkin(9);
t639 = -pkin(1) * t702 - t1296 * t657 + t1298 * t1355;
t638 = -pkin(1) * t700 - t1296 * t653 + t1298 * t1356;
t637 = -t1302 * t645 + t1307 * t652 + (-t1296 * t687 - t1298 * t688) * pkin(9);
t636 = -t1302 * t651 + t1307 * t659 + (-t1296 * t672 - t1298 * t673) * pkin(9);
t635 = -t1303 * t643 + t1308 * t647;
t634 = t1303 * t647 + t1308 * t643;
t632 = -pkin(1) * t672 - t1296 * t650 + t1298 * t1357;
t631 = -pkin(1) * t687 - t1296 * t644 + t1298 * t1358;
t629 = pkin(2) * t665 + t1295 * t1343 + t1297 * t648;
t628 = -t1302 * t630 + t1307 * t633 + (-t1296 * t642 - t1298 * t643) * pkin(9);
t627 = -pkin(1) * t642 - t1296 * t629 + t1298 * t1359;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1280, -t1281, 0, t1247, 0, 0, 0, 0, 0, 0, t1142, t1133, t1109, t1069, 0, 0, 0, 0, 0, 0, -t850, t857, t1646, t743, 0, 0, 0, 0, 0, 0, t1646, t850, -t857, t710, 0, 0, 0, 0, 0, 0, t753, t755, t729, t656, 0, 0, 0, 0, 0, 0, t678, t680, t675, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1281, -t1280, 0, t1246, 0, 0, 0, 0, 0, 0, t1141, t1132, t1108, t1068, 0, 0, 0, 0, 0, 0, t847, -t856, t1645, t742, 0, 0, 0, 0, 0, 0, t1645, -t847, t856, t709, 0, 0, 0, 0, 0, 0, t752, t754, t728, t655, 0, 0, 0, 0, 0, 0, t677, t679, t674, t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1185, t1181, t1178, t1128, 0, 0, 0, 0, 0, 0, t910, -t916, t1636, t780, 0, 0, 0, 0, 0, 0, t1636, -t910, t916, t746, 0, 0, 0, 0, 0, 0, t787, t789, t766, t672, 0, 0, 0, 0, 0, 0, t700, t702, t687, t642; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1281, 0, -t1280, 0, t1458, -t1265, -t1246, -pkin(8) * t1246, -t1210 * t1303 + t1235 * t1308, -t1180 * t1303 + t1194 * t1308, -t1186 * t1303 + t1215 * t1308, -t1209 * t1303 + t1234 * t1308, -t1187 * t1303 + t1216 * t1308, t1308 * t1242 + t1303 * t1368, -pkin(8) * t1141 - t1088 * t1303 + t1097 * t1308, -pkin(8) * t1132 - t1083 * t1303 + t1089 * t1308, -pkin(8) * t1108 + t1061 * t1308 - t1066 * t1303, -pkin(8) * t1068 + t1062 * t1308 - t1070 * t1303, t1591, t1666, -t1687, t1592, t1688, t1593, -t1303 * t741 + t1308 * t759 - t1698, -t1303 * t744 + t1308 * t762 + t1696, -t1303 * t723 + t1308 * t736 - t1670, -pkin(8) * t742 - t1303 * t689 + t1308 * t691, t1593, t1687, -t1688, t1591, t1666, t1592, -t1303 * t696 + t1308 * t719 - t1670, -t1303 * t713 + t1308 * t733 + t1698, -t1303 * t714 + t1308 * t735 - t1696, -pkin(8) * t709 - t1303 * t666 + t1308 * t671, -t1303 * t819 + t1308 * t881, -t1303 * t770 + t1308 * t813, -t1303 * t795 + t1308 * t844, -t1303 * t818 + t1308 * t880, -t1303 * t794 + t1308 * t843, -t1303 * t868 + t1308 * t923, -pkin(8) * t752 - t1303 * t661 + t1308 * t669, -pkin(8) * t754 - t1303 * t662 + t1308 * t670, -pkin(8) * t728 - t1303 * t646 + t1308 * t660, -pkin(8) * t655 - t1303 * t632 + t1308 * t636, -t1303 * t732 + t1308 * t769, -t1303 * t690 + t1308 * t726, -t1303 * t711 + t1308 * t748, -t1303 * t731 + t1308 * t768, -t1303 * t712 + t1308 * t749, -t1303 * t765 + t1308 * t801, -pkin(8) * t677 - t1303 * t638 + t1308 * t640, -pkin(8) * t679 - t1303 * t639 + t1308 * t641, -pkin(8) * t674 - t1303 * t631 + t1308 * t637, -pkin(8) * t634 - t1303 * t627 + t1308 * t628; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1280, 0, t1281, 0, t1265, t1458, t1247, pkin(8) * t1247, t1210 * t1308 + t1235 * t1303, t1180 * t1308 + t1194 * t1303, t1186 * t1308 + t1215 * t1303, t1209 * t1308 + t1234 * t1303, t1187 * t1308 + t1216 * t1303, t1303 * t1242 - t1308 * t1368, pkin(8) * t1142 + t1088 * t1308 + t1097 * t1303, pkin(8) * t1133 + t1083 * t1308 + t1089 * t1303, pkin(8) * t1109 + t1061 * t1303 + t1066 * t1308, pkin(8) * t1069 + t1062 * t1303 + t1070 * t1308, t1588, t1665, t1685, t1589, -t1686, t1590, t1303 * t759 + t1308 * t741 - t1697, t1303 * t762 + t1308 * t744 + t1695, t1303 * t736 + t1308 * t723 + t1669, pkin(8) * t743 + t1303 * t691 + t1308 * t689, t1590, -t1685, t1686, t1588, t1665, t1589, t1303 * t719 + t1308 * t696 + t1669, t1303 * t733 + t1308 * t713 + t1697, t1303 * t735 + t1308 * t714 - t1695, pkin(8) * t710 + t1303 * t671 + t1308 * t666, t1303 * t881 + t1308 * t819, t1303 * t813 + t1308 * t770, t1303 * t844 + t1308 * t795, t1303 * t880 + t1308 * t818, t1303 * t843 + t1308 * t794, t1303 * t923 + t1308 * t868, pkin(8) * t753 + t1303 * t669 + t1308 * t661, pkin(8) * t755 + t1303 * t670 + t1308 * t662, pkin(8) * t729 + t1303 * t660 + t1308 * t646, pkin(8) * t656 + t1303 * t636 + t1308 * t632, t1303 * t769 + t1308 * t732, t1303 * t726 + t1308 * t690, t1303 * t748 + t1308 * t711, t1303 * t768 + t1308 * t731, t1303 * t749 + t1308 * t712, t1303 * t801 + t1308 * t765, pkin(8) * t678 + t1303 * t640 + t1308 * t638, pkin(8) * t680 + t1303 * t641 + t1308 * t639, pkin(8) * t675 + t1303 * t637 + t1308 * t631, pkin(8) * t635 + t1303 * t628 + t1308 * t627; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1283, t1284, 0, 0, (t1292 * t1307 * t1413 + t1263 * t1296) * t1302, t1298 * t1269 + t1296 * t1374, t1298 * t1239 + t1296 * t1371, (t1264 * t1296 - t1413 * t1499) * t1307, t1298 * t1240 + t1296 * t1369, t1298 * t1460, pkin(1) * t1188 - t1211 * t1298 + t1296 * t1453, pkin(1) * t1182 - t1212 * t1298 + t1296 * t1454, pkin(1) * t1179 + t1296 * t1334, pkin(1) * t1129 + t1154 * t1533, t1569, t1648, t1671, t1568, -t1672, t1567, t1296 * t1345 + t1298 * t873 + t1691, t1296 * t1344 + t1298 * t877 - t1689, t1296 * t1346 + t1298 * t845 + t1664, pkin(1) * t781 + t1296 * t1347 + t1298 * t822, t1567, -t1671, t1672, t1569, t1648, t1568, t1296 * t1350 + t1298 * t798 + t1664, t1296 * t1349 + t1298 * t802 - t1691, t1296 * t1348 + t1298 * t804 + t1689, pkin(1) * t747 + t1296 * t1351 + t1298 * t737, t1296 * t1418 + t1298 * t940, t1296 * t1425 + t1298 * t869, t1296 * t1420 + t1298 * t906, t1296 * t1419 + t1298 * t939, t1296 * t1421 + t1298 * t905, t1296 * t1416 + t1298 * t989, pkin(1) * t788 + t1296 * t1353 + t1298 * t704, pkin(1) * t790 + t1296 * t1352 + t1298 * t707, pkin(1) * t767 + t1296 * t1354 + t1298 * t683, pkin(1) * t673 + t1296 * t1357 + t1298 * t650, t1296 * t1429 + t1298 * t809, t1296 * t1435 + t1298 * t763, t1296 * t1432 + t1298 * t783, t1296 * t1430 + t1298 * t808, t1296 * t1431 + t1298 * t784, t1296 * t1427 + t1298 * t853, pkin(1) * t701 + t1296 * t1356 + t1298 * t653, pkin(1) * t703 + t1296 * t1355 + t1298 * t657, pkin(1) * t688 + t1296 * t1358 + t1298 * t644, pkin(1) * t643 + t1296 * t1359 + t1298 * t629;];
tauB_reg  = t1;
