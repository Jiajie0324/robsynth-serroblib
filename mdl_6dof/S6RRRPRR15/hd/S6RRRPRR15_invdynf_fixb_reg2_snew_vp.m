% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR15
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 17:28
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR15_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR15_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR15_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR15_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR15_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR15_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:27:44
% EndTime: 2019-05-07 17:28:06
% DurationCPUTime: 22.81s
% Computational Cost: add. (143156->401), mult. (359706->580), div. (0->0), fcn. (302061->14), ass. (0->329)
t3050 = cos(pkin(6));
t3041 = qJD(1) * t3050 + qJD(2);
t3053 = sin(qJ(3));
t3058 = cos(qJ(3));
t3049 = cos(pkin(7));
t3048 = sin(pkin(6));
t3059 = cos(qJ(2));
t3132 = t3048 * t3059;
t3120 = qJD(1) * t3132;
t3113 = t3049 * t3120;
t3054 = sin(qJ(2));
t3133 = t3048 * t3054;
t3121 = qJD(1) * t3133;
t3047 = sin(pkin(7));
t3134 = t3047 * t3058;
t2994 = -t3041 * t3134 + t3053 * t3121 - t3058 * t3113;
t3122 = qJDD(1) * t3048;
t3022 = qJD(2) * t3120 + t3054 * t3122;
t3023 = -qJD(2) * t3121 + t3059 * t3122;
t3040 = t3050 * qJDD(1) + qJDD(2);
t3072 = t3023 * t3049 + t3040 * t3047;
t3066 = t3058 * t3022 + t3053 * t3072;
t3012 = -t3049 * t3041 + t3047 * t3120 - qJD(3);
t3128 = qJD(3) - t3012;
t2934 = -t2994 * t3128 + t3066;
t3110 = t3023 * t3047 - t3049 * t3040 - qJDD(3);
t3131 = t3049 * t3053;
t3135 = t3047 * t3053;
t3145 = qJD(1) * t3048;
t2996 = (t3054 * t3058 + t3059 * t3131) * t3145 + t3041 * t3135;
t3139 = t2994 * t2996;
t3069 = t3110 - t3139;
t2975 = t2996 ^ 2;
t3152 = t3012 ^ 2;
t3118 = -t3152 - t2975;
t3080 = t3053 * t3069 + t3058 * t3118;
t2905 = t3049 * t2934 + t3047 * t3080;
t2908 = t3047 * t2934 - t3049 * t3080;
t2926 = t3053 * t3118 - t3058 * t3069;
t3084 = t2908 * t3059 + t2926 * t3054;
t2860 = t3048 * t2905 + t3050 * t3084;
t2887 = t2908 * t3054 - t2926 * t3059;
t3055 = sin(qJ(1));
t3060 = cos(qJ(1));
t3180 = t2860 * t3055 + t2887 * t3060;
t3179 = t2860 * t3060 - t2887 * t3055;
t2858 = -t3050 * t2905 + t3048 * t3084;
t3127 = qJD(3) + t3012;
t2933 = -t2994 * t3127 + t3066;
t3174 = t2933 * t3053;
t3173 = t2933 * t3058;
t2958 = t3110 + t3139;
t2993 = t2994 ^ 2;
t2963 = -t3152 - t2993;
t2921 = t2958 * t3053 + t2963 * t3058;
t3172 = t2921 * t3054;
t3171 = t2921 * t3059;
t3079 = t2958 * t3058 - t2963 * t3053;
t3170 = t3047 * t3079;
t3169 = t3049 * t3079;
t2965 = -t2994 * qJD(3) + t3066;
t3064 = -qJDD(5) - t2965;
t3159 = -t2975 - t2993;
t3164 = t3047 * t3159;
t3163 = t3049 * t3159;
t3052 = sin(qJ(5));
t3057 = cos(qJ(5));
t2978 = -t3057 * t2994 - t3012 * t3052;
t2977 = qJD(6) + t2978;
t3160 = qJD(6) + t2977;
t2980 = t2994 * t3052 - t3012 * t3057;
t2992 = qJD(5) + t2996;
t3051 = sin(qJ(6));
t3056 = cos(qJ(6));
t2952 = t2980 * t3051 - t3056 * t2992;
t3158 = t2952 ^ 2;
t2954 = t2980 * t3056 + t2992 * t3051;
t3157 = t2954 ^ 2;
t3156 = t2977 ^ 2;
t3155 = t2978 ^ 2;
t3154 = t2980 ^ 2;
t3153 = t2992 ^ 2;
t3151 = t3041 ^ 2;
t3150 = -2 * qJD(4);
t3149 = pkin(10) * t3047;
t3148 = pkin(10) * t3049;
t3147 = t3050 * g(3);
t3146 = qJD(1) * (-pkin(2) * t3059 - t3054 * t3149) * t3145;
t3144 = t2952 * t2954;
t3141 = t2980 * t2978;
t3138 = t2994 * t3012;
t2983 = t3012 * t2996;
t3035 = t3055 * g(1) - g(2) * t3060;
t3061 = qJD(1) ^ 2;
t3018 = pkin(9) * t3048 * t3061 + qJDD(1) * pkin(1) + t3035;
t3137 = t3018 * t3050;
t3136 = t3048 ^ 2 * t3061;
t3130 = t3049 * t3058;
t3126 = qJD(5) - t2992;
t3125 = qJD(5) + t2992;
t3124 = qJD(6) - t2977;
t3111 = -t3053 * t3022 + t3023 * t3130 + t3040 * t3134;
t2964 = qJD(3) * t2996 - t3111;
t2981 = pkin(4) * t2996 + pkin(11) * t3012;
t3010 = (t3041 * t3047 + t3113) * pkin(10);
t3036 = -g(1) * t3060 - g(2) * t3055;
t3019 = -pkin(1) * t3061 + pkin(9) * t3122 + t3036;
t3115 = -t3054 * t3019 + t3059 * t3137;
t2943 = -t3022 * t3148 + t3040 * pkin(2) + t3041 * t3010 + (-g(3) * t3059 - t3054 * t3146) * t3048 + t3115;
t3016 = pkin(2) * t3041 - t3121 * t3148;
t2949 = -t3022 * t3149 - t3023 * pkin(2) - t3147 + (-t3018 + (-t3010 * t3059 + t3016 * t3054) * qJD(1)) * t3048;
t2917 = -t3047 * t2943 + t3049 * t2949;
t3065 = t2996 * t3150 + (-t2965 - t3138) * qJ(4) - pkin(3) * t2983 + t2917;
t2864 = -t2993 * pkin(4) - t2996 * t2981 + (pkin(3) + pkin(11)) * t2964 + t3065;
t2974 = pkin(3) * t2994 - qJ(4) * t2996;
t3123 = t3059 * t3019 + t3054 * t3137;
t2944 = -t3041 * t3016 + (-g(3) * t3054 + t3059 * t3146) * t3048 + t3072 * pkin(10) + t3123;
t3112 = -t2943 * t3130 + t3053 * t2944 - t2949 * t3134;
t2884 = pkin(3) * t3110 - t3152 * qJ(4) + t2996 * t2974 + qJDD(4) + t3112;
t3062 = t2958 * pkin(11) + (t2965 - t3138) * pkin(4) + t2884;
t2830 = t3057 * t2864 + t3052 * t3062;
t2896 = t2943 * t3131 + t3058 * t2944 + t2949 * t3135;
t2829 = -t2864 * t3052 + t3057 * t3062;
t3077 = t3052 * t2964 - t3057 * t3110;
t2923 = -qJD(5) * t2978 + t3077;
t3117 = -t3051 * t2923 - t3056 * t3064;
t3116 = -t3057 * t2964 - t3052 * t3110;
t3114 = t3041 * t3120;
t2945 = pkin(5) * t2978 - pkin(12) * t2980;
t2821 = -pkin(5) * t3153 - pkin(12) * t3064 - t2978 * t2945 + t2830;
t3068 = -t3152 * pkin(3) - qJ(4) * t3110 - t2994 * t2974 + t2896;
t2866 = -t2964 * pkin(4) - t2993 * pkin(11) + (t3150 - t2981) * t3012 + t3068;
t2912 = t2980 * t3125 + t3116;
t2835 = (t2978 * t2992 - t2923) * pkin(12) + t2912 * pkin(5) + t2866;
t2803 = -t2821 * t3051 + t2835 * t3056;
t2804 = t2821 * t3056 + t2835 * t3051;
t2793 = -t2803 * t3051 + t2804 * t3056;
t2820 = pkin(5) * t3064 - pkin(12) * t3153 + t2945 * t2980 - t2829;
t2784 = t2793 * t3057 + t2820 * t3052;
t2783 = t2793 * t3052 - t2820 * t3057;
t2792 = t2803 * t3056 + t2804 * t3051;
t3108 = -t2783 * t3058 + t2792 * t3053;
t2776 = -t3047 * t2784 + t3049 * t3108;
t2779 = t2783 * t3053 + t2792 * t3058;
t3109 = t2776 * t3059 + t2779 * t3054;
t2806 = -t2829 * t3052 + t2830 * t3057;
t2805 = t2829 * t3057 + t2830 * t3052;
t3105 = -t2805 * t3058 + t2866 * t3053;
t2790 = -t3047 * t2806 + t3049 * t3105;
t2800 = t2805 * t3053 + t2866 * t3058;
t3107 = t2790 * t3059 + t2800 * t3054;
t2881 = -t2954 * t3124 + t3117;
t3063 = -t3056 * t2923 + t3051 * t3064;
t2883 = t2952 * t3124 + t3063;
t2846 = t2881 * t3056 - t2883 * t3051;
t2909 = -t3157 - t3158;
t2832 = t2846 * t3057 + t2909 * t3052;
t2831 = t2846 * t3052 - t2909 * t3057;
t2845 = t2881 * t3051 + t2883 * t3056;
t3101 = -t2831 * t3058 + t2845 * t3053;
t2799 = -t3047 * t2832 + t3049 * t3101;
t2818 = t2831 * t3053 + t2845 * t3058;
t3106 = t2799 * t3059 + t2818 * t3054;
t3070 = -qJD(5) * t2980 - qJDD(6) - t3116;
t2893 = -t3070 - t3144;
t2916 = -t3156 - t3158;
t2871 = -t2893 * t3051 + t2916 * t3056;
t2880 = t2954 * t3160 - t3117;
t2837 = t2871 * t3057 + t2880 * t3052;
t2836 = t2871 * t3052 - t2880 * t3057;
t2870 = t2893 * t3056 + t2916 * t3051;
t3099 = -t2836 * t3058 + t2870 * t3053;
t2808 = -t3047 * t2837 + t3049 * t3099;
t2822 = t2836 * t3053 + t2870 * t3058;
t3104 = t2808 * t3059 + t2822 * t3054;
t2894 = t3070 - t3144;
t2918 = -t3156 - t3157;
t2875 = t2894 * t3056 - t2918 * t3051;
t2882 = -t2952 * t3160 - t3063;
t2839 = t2875 * t3057 + t2882 * t3052;
t2838 = t2875 * t3052 - t2882 * t3057;
t2874 = t2894 * t3051 + t2918 * t3056;
t3098 = -t2838 * t3058 + t2874 * t3053;
t2810 = -t3047 * t2839 + t3049 * t3098;
t2824 = t2838 * t3053 + t2874 * t3058;
t3103 = t2810 * t3059 + t2824 * t3054;
t2876 = t2964 * pkin(3) + t3065;
t2879 = t3012 * t3150 + t3068;
t3093 = t2879 * t3053 - t2884 * t3058;
t2827 = -t3047 * t2876 + t3049 * t3093;
t2840 = t2879 * t3058 + t2884 * t3053;
t3102 = t2827 * t3059 + t2840 * t3054;
t2913 = -t2980 * t3126 - t3116;
t2915 = t2978 * t3126 - t3077;
t2878 = t2913 * t3057 - t2915 * t3052;
t2877 = t2913 * t3052 + t2915 * t3057;
t2924 = -t3154 - t3155;
t3094 = -t2877 * t3058 + t2924 * t3053;
t2834 = -t3047 * t2878 + t3049 * t3094;
t2867 = t2877 * t3053 + t2924 * t3058;
t3100 = t2834 * t3059 + t2867 * t3054;
t2919 = -t3064 - t3141;
t2928 = -t3153 - t3155;
t2898 = -t2919 * t3052 + t2928 * t3057;
t2897 = t2919 * t3057 + t2928 * t3052;
t3089 = -t2897 * t3058 + t2912 * t3053;
t2848 = -t3047 * t2898 + t3049 * t3089;
t2872 = t2897 * t3053 + t2912 * t3058;
t3097 = t2848 * t3059 + t2872 * t3054;
t3090 = t2896 * t3053 - t3058 * t3112;
t2850 = -t3047 * t2917 + t3049 * t3090;
t2865 = t2896 * t3058 + t3053 * t3112;
t3096 = t2850 * t3059 + t2865 * t3054;
t2920 = -t3141 + t3064;
t2941 = -t3153 - t3154;
t2900 = t2920 * t3057 - t2941 * t3052;
t2899 = t2920 * t3052 + t2941 * t3057;
t2914 = -t2978 * t3125 + t3077;
t3088 = -t2899 * t3058 + t2914 * t3053;
t2852 = -t3047 * t2900 + t3049 * t3088;
t2873 = t2899 * t3053 + t2914 * t3058;
t3095 = t2852 * t3059 + t2873 * t3054;
t2930 = t2964 + t2983;
t3083 = -t2930 * t3053 - t3173;
t2891 = t3049 * t3083 - t3164;
t2910 = -t2930 * t3058 + t3174;
t3092 = t2891 * t3059 + t2910 * t3054;
t2932 = -t2996 * t3127 + t3111;
t3082 = t2932 * t3053 - t3173;
t2892 = t3049 * t3082 - t3164;
t2911 = t2932 * t3058 + t3174;
t3091 = t2892 * t3059 + t2911 * t3054;
t2929 = t2964 - t2983;
t2903 = -t3047 * t2929 - t3169;
t3087 = t2903 * t3059 + t3172;
t2931 = -t2996 * t3128 + t3111;
t2904 = -t3047 * t2931 + t3169;
t3086 = t2904 * t3059 - t3172;
t2984 = -g(3) * t3132 + t3115;
t2985 = -g(3) * t3133 + t3123;
t3076 = t2984 * t3059 + t2985 * t3054;
t3001 = t3114 - t3022;
t3026 = t3041 * t3121;
t3002 = t3023 + t3026;
t3075 = t3001 * t3059 + t3002 * t3054;
t3045 = t3054 ^ 2;
t3014 = -t3045 * t3136 - t3151;
t3034 = t3059 * t3054 * t3136;
t3021 = t3034 - t3040;
t3074 = t3014 * t3059 + t3021 * t3054;
t3020 = t3034 + t3040;
t3046 = t3059 ^ 2;
t3024 = -t3046 * t3136 - t3151;
t3073 = t3020 * t3059 + t3024 * t3054;
t3033 = -qJDD(1) * t3055 - t3060 * t3061;
t3032 = qJDD(1) * t3060 - t3055 * t3061;
t3025 = (-t3045 - t3046) * t3136;
t3004 = -t3048 * t3018 - t3147;
t3003 = -t3023 + t3026;
t3000 = t3114 + t3022;
t2988 = -t3020 * t3054 + t3024 * t3059;
t2986 = -t3014 * t3054 + t3021 * t3059;
t2976 = -t3001 * t3054 + t3002 * t3059;
t2973 = -t3048 * t3003 + t3050 * t3073;
t2972 = t3050 * t3003 + t3048 * t3073;
t2969 = -t3048 * t3000 + t3050 * t3074;
t2968 = t3050 * t3000 + t3048 * t3074;
t2967 = -t3048 * t3025 + t3050 * t3075;
t2966 = t3050 * t3025 + t3048 * t3075;
t2955 = -t2984 * t3054 + t2985 * t3059;
t2938 = -t3048 * t3004 + t3050 * t3076;
t2937 = t3050 * t3004 + t3048 * t3076;
t2902 = t3049 * t2931 + t3170;
t2901 = t3049 * t2929 - t3170;
t2890 = t3047 * t3082 + t3163;
t2889 = t3047 * t3083 + t3163;
t2886 = -t2904 * t3054 - t3171;
t2885 = -t2903 * t3054 + t3171;
t2869 = -t2892 * t3054 + t2911 * t3059;
t2868 = -t2891 * t3054 + t2910 * t3059;
t2856 = -t3048 * t2902 + t3050 * t3086;
t2855 = -t3048 * t2901 + t3050 * t3087;
t2854 = t3050 * t2902 + t3048 * t3086;
t2853 = t3050 * t2901 + t3048 * t3087;
t2851 = t3049 * t2900 + t3047 * t3088;
t2849 = t3049 * t2917 + t3047 * t3090;
t2847 = t3049 * t2898 + t3047 * t3089;
t2844 = -t3048 * t2890 + t3050 * t3091;
t2843 = -t3048 * t2889 + t3050 * t3092;
t2842 = t3050 * t2890 + t3048 * t3091;
t2841 = t3050 * t2889 + t3048 * t3092;
t2833 = t3049 * t2878 + t3047 * t3094;
t2828 = -t2852 * t3054 + t2873 * t3059;
t2826 = t3049 * t2876 + t3047 * t3093;
t2825 = -t2848 * t3054 + t2872 * t3059;
t2823 = -t2850 * t3054 + t2865 * t3059;
t2819 = -t2834 * t3054 + t2867 * t3059;
t2817 = -t3048 * t2851 + t3050 * t3095;
t2816 = t3050 * t2851 + t3048 * t3095;
t2815 = -t3048 * t2847 + t3050 * t3097;
t2814 = t3050 * t2847 + t3048 * t3097;
t2813 = -t2827 * t3054 + t2840 * t3059;
t2812 = -t3048 * t2849 + t3050 * t3096;
t2811 = t3050 * t2849 + t3048 * t3096;
t2809 = t3049 * t2839 + t3047 * t3098;
t2807 = t3049 * t2837 + t3047 * t3099;
t2802 = -t3048 * t2833 + t3050 * t3100;
t2801 = t3050 * t2833 + t3048 * t3100;
t2798 = t3049 * t2832 + t3047 * t3101;
t2797 = -t3048 * t2826 + t3050 * t3102;
t2796 = t3050 * t2826 + t3048 * t3102;
t2795 = -t2810 * t3054 + t2824 * t3059;
t2794 = -t2808 * t3054 + t2822 * t3059;
t2791 = -t2799 * t3054 + t2818 * t3059;
t2789 = t3049 * t2806 + t3047 * t3105;
t2788 = -t3048 * t2809 + t3050 * t3103;
t2787 = t3050 * t2809 + t3048 * t3103;
t2786 = -t3048 * t2807 + t3050 * t3104;
t2785 = t3050 * t2807 + t3048 * t3104;
t2782 = -t3048 * t2798 + t3050 * t3106;
t2781 = t3050 * t2798 + t3048 * t3106;
t2780 = -t2790 * t3054 + t2800 * t3059;
t2778 = -t3048 * t2789 + t3050 * t3107;
t2777 = t3050 * t2789 + t3048 * t3107;
t2775 = t3049 * t2784 + t3047 * t3108;
t2774 = -t2776 * t3054 + t2779 * t3059;
t2773 = -t3048 * t2775 + t3050 * t3109;
t2772 = t3050 * t2775 + t3048 * t3109;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3033, -t3032, 0, -t3035 * t3055 + t3036 * t3060, 0, 0, 0, 0, 0, 0, -t2973 * t3055 + t2988 * t3060, -t2969 * t3055 + t2986 * t3060, -t2967 * t3055 + t2976 * t3060, -t2938 * t3055 + t2955 * t3060, 0, 0, 0, 0, 0, 0, -t2855 * t3055 + t2885 * t3060, t3180, -t2844 * t3055 + t2869 * t3060, -t2812 * t3055 + t2823 * t3060, 0, 0, 0, 0, 0, 0, -t2843 * t3055 + t2868 * t3060, -t2856 * t3055 + t2886 * t3060, -t3180, -t2797 * t3055 + t2813 * t3060, 0, 0, 0, 0, 0, 0, -t2815 * t3055 + t2825 * t3060, -t2817 * t3055 + t2828 * t3060, -t2802 * t3055 + t2819 * t3060, -t2778 * t3055 + t2780 * t3060, 0, 0, 0, 0, 0, 0, -t2786 * t3055 + t2794 * t3060, -t2788 * t3055 + t2795 * t3060, -t2782 * t3055 + t2791 * t3060, -t2773 * t3055 + t2774 * t3060; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3032, t3033, 0, t3035 * t3060 + t3036 * t3055, 0, 0, 0, 0, 0, 0, t2973 * t3060 + t2988 * t3055, t2969 * t3060 + t2986 * t3055, t2967 * t3060 + t2976 * t3055, t2938 * t3060 + t2955 * t3055, 0, 0, 0, 0, 0, 0, t2855 * t3060 + t2885 * t3055, -t3179, t2844 * t3060 + t2869 * t3055, t2812 * t3060 + t2823 * t3055, 0, 0, 0, 0, 0, 0, t2843 * t3060 + t2868 * t3055, t2856 * t3060 + t2886 * t3055, t3179, t2797 * t3060 + t2813 * t3055, 0, 0, 0, 0, 0, 0, t2815 * t3060 + t2825 * t3055, t2817 * t3060 + t2828 * t3055, t2802 * t3060 + t2819 * t3055, t2778 * t3060 + t2780 * t3055, 0, 0, 0, 0, 0, 0, t2786 * t3060 + t2794 * t3055, t2788 * t3060 + t2795 * t3055, t2782 * t3060 + t2791 * t3055, t2773 * t3060 + t2774 * t3055; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2972, t2968, t2966, t2937, 0, 0, 0, 0, 0, 0, t2853, -t2858, t2842, t2811, 0, 0, 0, 0, 0, 0, t2841, t2854, t2858, t2796, 0, 0, 0, 0, 0, 0, t2814, t2816, t2801, t2777, 0, 0, 0, 0, 0, 0, t2785, t2787, t2781, t2772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3061, -qJDD(1), 0, t3036, 0, 0, 0, 0, 0, 0, t2988, t2986, t2976, t2955, 0, 0, 0, 0, 0, 0, t2885, t2887, t2869, t2823, 0, 0, 0, 0, 0, 0, t2868, t2886, -t2887, t2813, 0, 0, 0, 0, 0, 0, t2825, t2828, t2819, t2780, 0, 0, 0, 0, 0, 0, t2794, t2795, t2791, t2774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3061, 0, t3035, 0, 0, 0, 0, 0, 0, t2973, t2969, t2967, t2938, 0, 0, 0, 0, 0, 0, t2855, -t2860, t2844, t2812, 0, 0, 0, 0, 0, 0, t2843, t2856, t2860, t2797, 0, 0, 0, 0, 0, 0, t2815, t2817, t2802, t2778, 0, 0, 0, 0, 0, 0, t2786, t2788, t2782, t2773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2972, t2968, t2966, t2937, 0, 0, 0, 0, 0, 0, t2853, -t2858, t2842, t2811, 0, 0, 0, 0, 0, 0, t2841, t2854, t2858, t2796, 0, 0, 0, 0, 0, 0, t2814, t2816, t2801, t2777, 0, 0, 0, 0, 0, 0, t2785, t2787, t2781, t2772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3024, t3021, t3002, t2985, 0, 0, 0, 0, 0, 0, t2921, -t2926, t2911, t2865, 0, 0, 0, 0, 0, 0, t2910, -t2921, t2926, t2840, 0, 0, 0, 0, 0, 0, t2872, t2873, t2867, t2800, 0, 0, 0, 0, 0, 0, t2822, t2824, t2818, t2779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3020, t3014, t3001, t2984, 0, 0, 0, 0, 0, 0, t2903, -t2908, t2892, t2850, 0, 0, 0, 0, 0, 0, t2891, t2904, t2908, t2827, 0, 0, 0, 0, 0, 0, t2848, t2852, t2834, t2790, 0, 0, 0, 0, 0, 0, t2808, t2810, t2799, t2776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3003, t3000, t3025, t3004, 0, 0, 0, 0, 0, 0, t2901, t2905, t2890, t2849, 0, 0, 0, 0, 0, 0, t2889, t2902, -t2905, t2826, 0, 0, 0, 0, 0, 0, t2847, t2851, t2833, t2789, 0, 0, 0, 0, 0, 0, t2807, t2809, t2798, t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2963, t3069, t2932, t2896, 0, 0, 0, 0, 0, 0, -t2930, -t2963, -t3069, t2879, 0, 0, 0, 0, 0, 0, t2912, t2914, t2924, t2866, 0, 0, 0, 0, 0, 0, t2870, t2874, t2845, t2792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2958, t3118, -t2933, -t3112, 0, 0, 0, 0, 0, 0, -t2933, t2958, -t3118, -t2884, 0, 0, 0, 0, 0, 0, -t2897, -t2899, -t2877, -t2805, 0, 0, 0, 0, 0, 0, -t2836, -t2838, -t2831, -t2783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2929, t2934, t3159, t2917, 0, 0, 0, 0, 0, 0, t3159, t2931, -t2934, t2876, 0, 0, 0, 0, 0, 0, t2898, t2900, t2878, t2806, 0, 0, 0, 0, 0, 0, t2837, t2839, t2832, t2784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3159, t2931, -t2934, t2876, 0, 0, 0, 0, 0, 0, t2898, t2900, t2878, t2806, 0, 0, 0, 0, 0, 0, t2837, t2839, t2832, t2784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930, t2963, t3069, -t2879, 0, 0, 0, 0, 0, 0, -t2912, -t2914, -t2924, -t2866, 0, 0, 0, 0, 0, 0, -t2870, -t2874, -t2845, -t2792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2933, -t2958, t3118, t2884, 0, 0, 0, 0, 0, 0, t2897, t2899, t2877, t2805, 0, 0, 0, 0, 0, 0, t2836, t2838, t2831, t2783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2928, t2920, t2913, t2830, 0, 0, 0, 0, 0, 0, t2871, t2875, t2846, t2793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2919, t2941, t2915, t2829, 0, 0, 0, 0, 0, 0, -t2880, -t2882, -t2909, -t2820; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2912, t2914, t2924, t2866, 0, 0, 0, 0, 0, 0, t2870, t2874, t2845, t2792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2916, t2894, t2881, t2804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2893, t2918, t2883, t2803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2880, t2882, t2909, t2820;];
f_new_reg  = t1;
