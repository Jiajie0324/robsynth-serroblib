% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR15_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR15_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR15_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:39:20
% EndTime: 2019-03-09 20:40:00
% DurationCPUTime: 27.91s
% Computational Cost: add. (19183->943), mult. (54884->1261), div. (0->0), fcn. (46370->14), ass. (0->373)
t893 = sin(qJ(3));
t1067 = qJD(3) * t893;
t889 = sin(pkin(7));
t1039 = t889 * t1067;
t1111 = cos(pkin(7));
t1112 = cos(pkin(6));
t894 = sin(qJ(2));
t1030 = t894 * t1112;
t881 = pkin(1) * t1030;
t898 = cos(qJ(2));
t890 = sin(pkin(6));
t965 = t890 * (-pkin(10) * t1111 - pkin(9));
t910 = t898 * t965 - t881;
t787 = t910 * qJD(1);
t1069 = qJD(1) * t890;
t1113 = pkin(10) * t889;
t969 = pkin(2) * t894 - t1113 * t898;
t824 = t969 * t1069;
t710 = t1111 * t824 - t787 * t889;
t1031 = t893 * t1111;
t998 = t894 * t1031;
t971 = t890 * t998;
t1117 = cos(qJ(3));
t1042 = t1117 * t898;
t1009 = t890 * t1042;
t977 = qJD(1) * t1009;
t813 = -qJD(1) * t971 + t977;
t1144 = pkin(3) * t1039 + qJ(4) * t813 - t710;
t997 = t1111 * t1117;
t922 = t893 * t898 + t894 * t997;
t822 = t922 * t890;
t812 = qJD(1) * t822;
t1143 = -t1039 + t812;
t1045 = t889 * t1117;
t1010 = t890 * t1045;
t899 = cos(qJ(1));
t1026 = t899 * t1112;
t895 = sin(qJ(1));
t835 = -t1026 * t898 + t894 * t895;
t836 = t1026 * t894 + t895 * t898;
t717 = t1010 * t899 + t835 * t997 + t836 * t893;
t1032 = t890 * t1111;
t791 = -t1032 * t899 + t835 * t889;
t892 = sin(qJ(5));
t897 = cos(qJ(5));
t679 = t717 * t892 + t791 * t897;
t1093 = t890 * t899;
t1098 = t889 * t893;
t718 = -t1031 * t835 - t1093 * t1098 + t1117 * t836;
t891 = sin(qJ(6));
t896 = cos(qJ(6));
t1142 = t679 * t891 - t718 * t896;
t1141 = t679 * t896 + t718 * t891;
t1096 = t890 * t894;
t1118 = pkin(3) + pkin(11);
t1011 = t1118 * t1096;
t1044 = t1117 * t824;
t1130 = pkin(4) + pkin(10);
t880 = pkin(2) * t1031;
t1028 = t898 * t1112;
t882 = pkin(1) * t1028;
t874 = qJD(1) * t882;
t940 = t894 * t965;
t786 = qJD(1) * t940 + t874;
t937 = -t893 * t786 + t787 * t997;
t1135 = t813 * pkin(4) + (-qJD(1) * t1011 - t1044) * t889 - t937 - (t1045 * t1130 + t880) * qJD(3);
t1066 = qJD(4) * t893;
t1140 = t1118 * t812 - (-t1066 + (pkin(11) * t893 - qJ(4) * t1117) * qJD(3)) * t889 - t1144;
t967 = qJD(3) * t997;
t1139 = pkin(2) * t967 - t787 * t1031 - t824 * t1098 - t1117 * t786;
t886 = t890 ^ 2;
t1138 = 0.2e1 * pkin(1) * t886;
t1041 = t894 * t1069;
t1007 = t889 * t1041;
t924 = -t1045 * t897 - t1111 * t892;
t1079 = -qJD(5) * t924 + t1007 * t897 + t1143 * t892;
t834 = -t892 * t1045 + t897 * t1111;
t1076 = qJD(5) * t834 - t1007 * t892 + t1143 * t897;
t1023 = t1112 * qJD(1);
t975 = t1023 + qJD(2);
t948 = t889 * t975;
t1094 = t890 * t898;
t953 = t997 * t1094;
t1133 = -qJD(1) * t953 - t1117 * t948;
t926 = pkin(9) * t1094 + t881;
t1027 = t898 * t1111;
t999 = t890 * t1027;
t740 = t926 * qJD(1) + (qJD(1) * t999 + t948) * pkin(10);
t913 = pkin(2) * t1112 + t940;
t746 = qJD(2) * pkin(2) + qJD(1) * t913 + t874;
t968 = pkin(2) * t898 + t1113 * t894;
t954 = -pkin(1) - t968;
t816 = t954 * t890;
t804 = qJD(1) * t816;
t654 = -t804 * t1045 + t740 * t893 - t746 * t997;
t1060 = -qJD(4) - t654;
t1006 = t893 * t1041;
t747 = t1006 + t1133;
t1051 = t889 * t1094;
t814 = qJD(1) * t1051 - t1111 * t975 - qJD(3);
t699 = -t897 * t747 - t814 * t892;
t698 = qJD(6) + t699;
t1038 = qJD(3) * t1117;
t1003 = t889 * t1038;
t966 = t1003 - t813;
t1132 = qJ(4) * t1007 - t1111 * qJD(4) - t1139;
t1056 = qJDD(1) * t894;
t923 = t1027 * t893 + t1117 * t894;
t902 = qJD(2) * t922 + qJD(3) * t923;
t933 = t893 * t948;
t1012 = t1112 * qJDD(1);
t970 = t1012 + qJDD(2);
t938 = t970 * t889;
t673 = qJD(3) * t933 - qJDD(1) * t953 - t1117 * t938 + (qJD(1) * t902 + t893 * t1056) * t890;
t1131 = t717 * t897 - t791 * t892;
t1025 = t1112 * t889;
t1000 = t893 * t1025;
t915 = t923 * t890;
t779 = t1000 + t915;
t832 = -t1111 * t1112 + t1051;
t771 = (t999 + t1025) * pkin(10) + t926;
t784 = t882 + t913;
t911 = -t1045 * t816 + t893 * t771 - t784 * t997;
t630 = t779 * pkin(4) + t1118 * t832 + t911;
t778 = -t1025 * t1117 + t893 * t1096 - t953;
t1109 = qJ(4) * t779;
t707 = t1111 * t816 - t784 * t889;
t959 = t707 - t1109;
t635 = t1118 * t778 + t959;
t1129 = t892 * t630 + t897 * t635;
t1078 = pkin(4) * t812 - t1039 * t1130 - t1132;
t947 = pkin(2) * t997 - pkin(10) * t1098;
t828 = -pkin(3) * t1111 - t947;
t777 = pkin(4) * t1098 - pkin(11) * t1111 + t828;
t952 = -pkin(3) * t1117 - qJ(4) * t893 - pkin(2);
t801 = (-pkin(11) * t1117 + t952) * t889;
t1077 = t892 * t777 + t897 * t801;
t1071 = pkin(10) * t1045 + t880;
t1128 = t1071 * qJD(3) + t937;
t749 = t1069 * t923 + t933;
t1058 = qJD(5) + t749;
t701 = t747 * t892 - t814 * t897;
t1104 = t701 * t891;
t744 = qJD(1) * t915 + qJD(5) + t933;
t660 = -t896 * t744 + t1104;
t1127 = t1058 * t660;
t1015 = t1058 * t897;
t1059 = pkin(4) * t749 - t1060;
t1126 = (qJDD(2) + 0.2e1 * t1012) * t890;
t1064 = qJD(5) * t897;
t1065 = qJD(5) * t892;
t1125 = -t777 * t1064 + t1065 * t801 + t1135 * t892 + t1140 * t897;
t936 = t969 * qJD(2);
t825 = t890 * t936;
t1043 = t1117 * t825;
t709 = -t778 * qJD(3) + (t1009 - t971) * qJD(2);
t1004 = pkin(1) * qJD(2) * t1112;
t875 = t898 * t1004;
t788 = qJD(2) * t940 + t875;
t789 = t910 * qJD(2);
t996 = qJD(3) * t1031;
t916 = -t771 * t1038 - t816 * t1039 - t784 * t996 - t893 * t788 + t789 * t997;
t611 = t709 * pkin(4) + (-qJD(2) * t1011 - t1043) * t889 - t916;
t708 = qJD(3) * t1000 + t890 * t902;
t711 = t1111 * t825 - t789 * t889;
t919 = -qJ(4) * t709 - qJD(4) * t779 + t711;
t613 = t1118 * t708 + t919;
t1124 = -qJD(5) * t1129 + t611 * t897 - t613 * t892;
t1022 = t1111 * qJD(2);
t1035 = t890 * t1056;
t1017 = qJDD(1) * t1111;
t990 = t898 * t1017;
t672 = t1006 * (t1022 + qJD(3)) - qJD(2) * t977 - t1117 * t1035 + (-t890 * t990 - t938) * t893 + t1133 * qJD(3);
t1057 = qJD(1) * qJD(2);
t1037 = t894 * t1057;
t1002 = t890 * t1037;
t1055 = qJDD(1) * t898;
t1034 = t890 * t1055;
t756 = t1111 * t970 + qJDD(3) + (t1002 - t1034) * t889;
t1001 = pkin(1) * t1012;
t972 = qJD(1) * t1004;
t1046 = pkin(9) * t1034 + t894 * t1001 + t898 * t972;
t925 = -pkin(9) * t1002 + t1046;
t991 = qJD(1) * t1022;
t689 = (t938 + (-t894 * t991 + t990) * t890) * pkin(10) + t925;
t927 = t898 * t1001 - t894 * t972;
t1036 = t898 * t1057;
t951 = -t1036 - t1056;
t928 = t951 * pkin(9);
t697 = t970 * pkin(2) + ((-t1017 * t894 - t898 * t991) * pkin(10) + t928) * t890 + t927;
t723 = (qJD(1) * t936 + qJDD(1) * t954) * t890;
t963 = t740 * t1038 + t804 * t1039 - t723 * t1045 + t893 * t689 - t697 * t997 + t746 * t996;
t935 = qJDD(4) + t963;
t585 = -pkin(4) * t672 - t1118 * t756 + t935;
t652 = t1111 * t723 - t697 * t889;
t920 = qJ(4) * t672 - qJD(4) * t749 + t652;
t588 = t1118 * t673 + t920;
t623 = t1118 * t814 + t1059;
t696 = t1111 * t804 - t746 * t889;
t960 = -qJ(4) * t749 + t696;
t626 = t1118 * t747 + t960;
t594 = t623 * t892 + t626 * t897;
t575 = -qJD(5) * t594 + t897 * t585 - t588 * t892;
t670 = -qJDD(5) + t672;
t573 = pkin(5) * t670 - t575;
t837 = -t1028 * t895 - t899 * t894;
t838 = -t1030 * t895 + t898 * t899;
t721 = -t1010 * t895 - t837 * t997 + t838 * t893;
t792 = t1032 * t895 - t837 * t889;
t680 = t721 * t897 - t792 * t892;
t978 = t778 * t897 + t832 * t892;
t946 = g(1) * t680 + g(2) * t1131 + g(3) * t978;
t1123 = (pkin(5) * t701 + pkin(12) * t698) * t698 + t573 + t946;
t655 = t746 * t1031 + t804 * t1098 + t1117 * t740;
t633 = -pkin(4) * t747 + t655;
t809 = t814 * qJ(4);
t627 = t633 - t809;
t1121 = -t1058 * t627 - t1118 * t670;
t1018 = -t897 * t673 + t756 * t892;
t620 = qJD(5) * t701 + t1018;
t618 = qJDD(6) + t620;
t859 = pkin(5) * t892 - pkin(12) * t897 + qJ(4);
t994 = pkin(5) * t897 + pkin(12) * t892;
t1120 = ((-pkin(4) - t994) * t749 - qJD(5) * t994 + t1060) * t698 - t859 * t618;
t1119 = t749 ^ 2;
t901 = qJD(1) ^ 2;
t1115 = pkin(3) * t756;
t1114 = pkin(3) * t778;
t1110 = qJ(4) * t747;
t1061 = qJD(6) * t896;
t619 = t747 * t1064 + t1065 * t814 + t892 * t673 + t897 * t756;
t1049 = t744 * t1061 + t896 * t619 - t891 * t670;
t1062 = qJD(6) * t891;
t589 = -t1062 * t701 + t1049;
t1108 = t589 * t891;
t1107 = t655 * t814;
t1106 = t660 * t698;
t662 = t701 * t896 + t744 * t891;
t1105 = t662 * t698;
t1103 = t749 * t747;
t1102 = t749 * t892;
t745 = t756 * qJ(4);
t1100 = t886 * t901;
t1099 = t889 * t892;
t1097 = t889 * t897;
t1095 = t890 * t895;
t1092 = t891 * t618;
t1091 = t891 * t1118;
t1090 = t896 * t618;
t1089 = t896 * t1118;
t1088 = t897 * t589;
t1084 = -pkin(5) * t966 + qJD(5) * t1077 + t1135 * t897 - t1140 * t892;
t659 = t1118 * t749 + t1110;
t1082 = t892 * t633 + t897 * t659;
t961 = t1098 * t896 - t834 * t891;
t1081 = qJD(6) * t961 - t1079 * t896 + t891 * t966;
t796 = t1098 * t891 + t834 * t896;
t1080 = qJD(6) * t796 - t1079 * t891 - t896 * t966;
t1075 = -pkin(3) * t812 + (-qJ(4) * t1038 - t1066) * t889 + t1144;
t1074 = pkin(10) * t1039 + t1132;
t1073 = -(-pkin(3) * t1041 - t1044) * t889 + t1128;
t887 = t894 ^ 2;
t1070 = -t898 ^ 2 + t887;
t1068 = qJD(2) * t890;
t1063 = qJD(5) * t1118;
t1053 = t898 * t1100;
t1052 = t889 * t1096;
t1048 = t784 * t1031 + t816 * t1098 + t1117 * t771;
t826 = -t1111 * qJ(4) - t1071;
t1040 = t894 * t1068;
t574 = t623 * t1064 - t1065 * t626 + t892 * t585 + t897 * t588;
t572 = -pkin(12) * t670 + t574;
t808 = qJD(4) * t814;
t964 = -t804 * t1003 - t697 * t1031 + t740 * t1067 - t723 * t1098 - t1117 * t689 - t746 * t967;
t595 = -t745 + t808 + t964;
t586 = -pkin(4) * t673 - t595;
t579 = pkin(5) * t620 - pkin(12) * t619 + t586;
t1021 = -t891 * t572 + t896 * t579;
t1019 = t619 * t891 + t896 * t670;
t1016 = t1058 * t701;
t1014 = t1058 * t662;
t1013 = t698 * t896;
t657 = t832 * qJ(4) - t1048;
t800 = pkin(4) * t1045 - t826;
t1005 = t889 * t1040;
t995 = t890 * t901 * t1112;
t993 = -g(1) * t717 + g(2) * t721;
t722 = t838 * t1117 + (t1095 * t889 + t1111 * t837) * t893;
t992 = g(1) * t718 - g(2) * t722;
t683 = t1102 * t896 - t747 * t891;
t989 = -t1065 * t896 - t683;
t704 = -pkin(5) * t924 - pkin(12) * t834 + t800;
t988 = -pkin(12) * t966 - qJD(6) * t704 + t1125;
t695 = pkin(12) * t1098 + t1077;
t987 = -pkin(5) * t1076 - pkin(12) * t1079 + qJD(6) * t695 - t1078;
t986 = t896 * t572 + t891 * t579;
t592 = pkin(12) * t744 + t594;
t602 = pkin(5) * t699 - pkin(12) * t701 + t627;
t581 = t592 * t896 + t602 * t891;
t985 = t592 * t891 - t602 * t896;
t599 = pkin(12) * t779 + t1129;
t636 = -pkin(4) * t778 - t657;
t715 = t778 * t892 - t832 * t897;
t614 = -pkin(5) * t978 - pkin(12) * t715 + t636;
t984 = t599 * t896 + t614 * t891;
t983 = -t599 * t891 + t614 * t896;
t593 = t623 * t897 - t626 * t892;
t981 = t630 * t897 - t635 * t892;
t675 = t715 * t896 + t779 * t891;
t674 = t715 * t891 - t779 * t896;
t979 = t777 * t897 - t801 * t892;
t974 = 0.2e1 * t1023 + qJD(2);
t957 = -t1058 * t744 * t892 - t897 * t670;
t956 = -t1061 * t698 - t1092;
t955 = -t1062 * t698 + t1090;
t950 = t630 * t1064 - t1065 * t635 + t892 * t611 + t897 * t613;
t945 = g(1) * t721 + g(2) * t717 + g(3) * t778;
t944 = g(1) * t722 + g(2) * t718 + g(3) * t779;
t736 = -t835 * t893 + t836 * t997;
t738 = t837 * t893 + t838 * t997;
t943 = g(1) * t738 + g(2) * t736 + g(3) * t822;
t737 = -t1031 * t836 - t1117 * t835;
t739 = -t1031 * t838 + t1117 * t837;
t823 = (-t998 + t1042) * t890;
t942 = -g(1) * t739 - g(2) * t737 - g(3) * t823;
t939 = t970 * MDP(8);
t932 = -t1015 * t744 + t892 * t670;
t931 = -g(1) * t838 - g(2) * t836 - g(3) * t1096;
t929 = t586 - t944;
t921 = t816 * t1003 + t789 * t1031 - t1067 * t771 + t825 * t1098 + t1117 * t788 + t784 * t967;
t591 = -pkin(5) * t744 - t593;
t917 = -pkin(12) * t618 + (t591 + t593) * t698;
t914 = -qJD(6) * t1118 * t698 + t944;
t616 = -qJ(4) * t1005 + t832 * qJD(4) - t921;
t909 = (-pkin(12) * t747 - qJD(6) * t859 + t1082) * t698 + t945;
t908 = -t944 - t964;
t907 = t945 - t963;
t609 = -pkin(4) * t708 - t616;
t905 = t975 * t926;
t637 = pkin(3) * t747 + t960;
t904 = t637 * t749 + qJDD(4) - t907;
t903 = -t814 * t747 - t672;
t827 = t952 * t889;
t752 = t1052 * t897 + t822 * t892;
t703 = t1097 * t838 + t738 * t892;
t702 = t1097 * t836 + t736 * t892;
t694 = -pkin(5) * t1098 - t979;
t684 = pkin(3) * t749 + t1110;
t682 = t1102 * t891 + t896 * t747;
t681 = t721 * t892 + t792 * t897;
t658 = t832 * pkin(3) + t911;
t653 = t959 + t1114;
t651 = qJD(5) * t978 + t1005 * t897 + t708 * t892;
t650 = qJD(5) * t715 + t1005 * t892 - t708 * t897;
t642 = t809 - t655;
t640 = pkin(3) * t814 - t1060;
t639 = t681 * t896 + t722 * t891;
t638 = -t681 * t891 + t722 * t896;
t625 = pkin(3) * t708 + t919;
t624 = (-pkin(3) * t1040 - t1043) * t889 - t916;
t608 = -qJD(6) * t674 + t651 * t896 + t709 * t891;
t607 = qJD(6) * t675 + t651 * t891 - t709 * t896;
t603 = pkin(5) * t747 - t633 * t897 + t659 * t892;
t598 = -pkin(5) * t779 - t981;
t597 = t935 - t1115;
t596 = pkin(3) * t673 + t920;
t590 = qJD(6) * t662 + t1019;
t582 = pkin(5) * t650 - pkin(12) * t651 + t609;
t577 = -pkin(5) * t709 - t1124;
t576 = pkin(12) * t709 + t950;
t571 = -qJD(6) * t581 + t1021;
t570 = -qJD(6) * t985 + t986;
t1 = [((qJDD(1) * t887 + 0.2e1 * t1036 * t894) * MDP(4) + 0.2e1 * (t1055 * t894 - t1057 * t1070) * MDP(5)) * t886 + (t596 * t653 + t637 * t625 + t595 * t657 + t642 * t616 + t597 * t658 + t640 * t624 - g(1) * (-t895 * pkin(1) - t836 * pkin(2) - pkin(3) * t718 + pkin(9) * t1093 - pkin(10) * t791 - qJ(4) * t717) - g(2) * (t899 * pkin(1) + t838 * pkin(2) + t722 * pkin(3) + pkin(9) * t1095 + pkin(10) * t792 + t721 * qJ(4))) * MDP(21) + (g(1) * t791 - g(2) * t792 + t595 * t778 + t597 * t779 + t616 * t747 + t624 * t749 + t640 * t709 + t642 * t708 + t657 * t673 - t658 * t672) * MDP(18) + (-t1005 * t655 - t1048 * t756 + t652 * t779 - t707 * t672 + t696 * t709 + t711 * t749 + t814 * t921 - t832 * t964 + t993) * MDP(17) + (-(t1043 * t889 + t916) * t814 - t911 * t756 + t963 * t832 - t654 * t1005 + t711 * t747 + t707 * t673 + t652 * t778 + t696 * t708 + t992) * MDP(16) + (-t620 * t779 - t650 * t744 - t670 * t978 - t699 * t709) * MDP(25) + (t590 * t978 - t607 * t698 - t618 * t674 - t650 * t660) * MDP(32) + (-t589 * t978 + t608 * t698 + t618 * t675 + t650 * t662) * MDP(31) + (-t618 * t978 + t650 * t698) * MDP(33) + (t619 * t978 - t620 * t715 - t650 * t701 - t651 * t699) * MDP(23) + (g(1) * t679 - g(2) * t681 + t1124 * t744 + t575 * t779 - t586 * t978 + t593 * t709 + t609 * t699 + t636 * t620 + t627 * t650 - t981 * t670) * MDP(27) + (t1068 * t898 * t974 + t1126 * t894) * MDP(6) + (-t1040 * t974 + t1126 * t898) * MDP(7) + t1112 * t939 + (-qJD(2) * t905 + (-pkin(9) * t1096 + t882) * t970 + (t890 * t928 + t927) * t1112 + g(1) * t836 - g(2) * t838 + (t1055 - t1037) * t1138) * MDP(9) + (-(-pkin(9) * t1040 + t875) * t975 - t926 * t970 - t925 * t1112 - g(1) * t835 - g(2) * t837 + t951 * t1138) * MDP(10) + (g(1) * t1131 - g(2) * t680 + t1129 * t670 - t574 * t779 + t586 * t715 - t594 * t709 + t609 * t701 + t636 * t619 + t627 * t651 - t950 * t744) * MDP(28) + qJDD(1) * MDP(1) + (-t1005 * t814 - t756 * t832) * MDP(15) + (-t1005 * t747 + t673 * t832 + t708 * t814 - t756 * t778) * MDP(14) + (-t1005 * t642 + t595 * t832 - t596 * t779 + t616 * t814 - t625 * t749 - t637 * t709 + t653 * t672 - t657 * t756 - t993) * MDP(20) + (t1005 * t749 + t672 * t832 - t709 * t814 + t756 * t779) * MDP(13) + (t1005 * t640 - t596 * t778 - t597 * t832 - t624 * t814 - t625 * t747 - t637 * t708 - t653 * t673 + t658 * t756 - t992) * MDP(19) + ((-qJD(6) * t984 - t576 * t891 + t582 * t896) * t698 + t983 * t618 - t571 * t978 - t985 * t650 + t577 * t660 + t598 * t590 + t573 * t674 + t591 * t607 + g(1) * t1141 - g(2) * t639) * MDP(34) + (-(qJD(6) * t983 + t576 * t896 + t582 * t891) * t698 - t984 * t618 + t570 * t978 - t581 * t650 + t577 * t662 + t598 * t589 + t573 * t675 + t591 * t608 - g(1) * t1142 - g(2) * t638) * MDP(35) + (g(1) * t899 + g(2) * t895) * MDP(3) + (g(1) * t895 - g(2) * t899) * MDP(2) + (t672 * t778 - t673 * t779 - t708 * t749 - t709 * t747) * MDP(12) + (-t672 * t779 + t709 * t749) * MDP(11) + (t619 * t779 + t651 * t744 - t670 * t715 + t701 * t709) * MDP(24) + (-t670 * t779 + t709 * t744) * MDP(26) + (t619 * t715 + t651 * t701) * MDP(22) + (-t589 * t674 - t590 * t675 - t607 * t662 - t608 * t660) * MDP(30) + (t589 * t675 + t608 * t662) * MDP(29); (-t1080 * t662 - t1081 * t660 + t589 * t961 - t590 * t796) * MDP(30) + ((-t695 * t891 + t704 * t896) * t618 - t571 * t924 + t694 * t590 - t573 * t961 - g(1) * (t703 * t896 + t739 * t891) - g(2) * (t702 * t896 + t737 * t891) - g(3) * (t752 * t896 + t823 * t891) + (t891 * t988 - t896 * t987) * t698 + t1084 * t660 + t1080 * t591 - t1076 * t985) * MDP(34) + (-t1076 * t660 - t1080 * t698 + t590 * t924 + t618 * t961) * MDP(32) + (-t1076 * t744 - t1098 * t620 - t670 * t924 - t699 * t966) * MDP(25) + (t1076 * t662 + t1081 * t698 - t589 * t924 + t618 * t796) * MDP(31) + (-(t695 * t896 + t704 * t891) * t618 + t570 * t924 + t694 * t589 + t573 * t796 - g(1) * (-t703 * t891 + t739 * t896) - g(2) * (-t702 * t891 + t737 * t896) - g(3) * (-t752 * t891 + t823 * t896) + (t891 * t987 + t896 * t988) * t698 + t1084 * t662 + t1081 * t591 - t1076 * t581) * MDP(35) + (t1076 * t698 - t618 * t924) * MDP(33) + (-t1076 * t701 + t1079 * t699 + t619 * t924 - t620 * t834) * MDP(23) + (t947 * t756 - t963 * t1111 - t710 * t747 - t696 * t812 + t1128 * t814 + (-pkin(2) * t673 + t1041 * t654 + t1044 * t814 + t1067 * t696 - t1117 * t652) * t889 + t942) * MDP(16) + (t596 * t827 + t595 * t826 + t597 * t828 - g(1) * (pkin(2) * t837 + pkin(3) * t739 + qJ(4) * t738 + t1113 * t838) - g(2) * (-pkin(2) * t835 + pkin(3) * t737 + qJ(4) * t736 + t1113 * t836) - g(3) * (pkin(3) * t823 + qJ(4) * t822 + t890 * t968) + t1074 * t642 + t1073 * t640 + t1075 * t637) * MDP(21) + (pkin(1) * t1053 + (-pkin(9) * t1041 + t874) * t1023 + t874 * qJD(2) - t931 - t1046) * MDP(10) + (pkin(1) * t1100 * t894 - g(1) * t837 + g(2) * t835 - g(3) * t1094 + qJD(1) * t905 + t927 + (-t1036 * t890 - t1035) * pkin(9)) * MDP(9) + (-t672 * t1111 + t813 * t814 + (-t1038 * t814 - t1041 * t749 + t756 * t893) * t889) * MDP(13) + (-t595 * t1111 + t637 * t813 + t827 * t672 - t826 * t756 + t1074 * t814 - t1075 * t749 + (-t1038 * t637 + t1041 * t642 - t596 * t893) * t889 - t943) * MDP(20) + (t1007 * t814 + t1111 * t756) * MDP(15) + (-t673 * t1111 - t812 * t814 + (t1041 * t747 + t1067 * t814 + t1117 * t756) * t889) * MDP(14) + (t597 * t1111 + t637 * t812 - t827 * t673 + t828 * t756 - t1073 * t814 - t1075 * t747 + (-t1041 * t640 - t1067 * t637 + t1117 * t596) * t889 - t942) * MDP(19) + (-t640 * t813 - t642 * t812 - t828 * t672 + t826 * t673 + t1073 * t749 + t1074 * t747 + (-t1117 * t595 + t597 * t893 + (t1117 * t640 + t642 * t893) * qJD(3) + t931) * t889) * MDP(18) + (t813 * t747 + t749 * t812 + (-t1117 * t672 - t673 * t893 + (-t1117 * t747 - t749 * t893) * qJD(3)) * t889) * MDP(12) + (-t1098 * t672 + t749 * t966) * MDP(11) + (-t1098 * t670 + t744 * t966) * MDP(26) + (-t1079 * t744 + t1098 * t619 - t834 * t670 + t701 * t966) * MDP(24) + (t1081 * t662 + t589 * t796) * MDP(29) + (t894 * t995 + t1034) * MDP(7) + (-t898 * t995 + t1035) * MDP(6) + (-t979 * t670 + t575 * t1098 + t800 * t620 - t586 * t924 - g(1) * t703 - g(2) * t702 - g(3) * t752 + ((-qJD(5) * t801 - t1135) * t897 + (-qJD(5) * t777 + t1140) * t892) * t744 + t1078 * t699 + t1076 * t627 + t966 * t593) * MDP(27) + (-t1079 * t701 + t619 * t834) * MDP(22) + t1070 * MDP(5) * t1100 + (-t1071 * t756 + t964 * t1111 - t710 * t749 - t696 * t813 + t1139 * t814 + (t655 * t1041 + pkin(2) * t672 + t652 * t893 + (-pkin(10) * t814 * t893 + t1117 * t696) * qJD(3)) * t889 + t943) * MDP(17) + t939 + (t1077 * t670 - t574 * t1098 + t800 * t619 + t586 * t834 - g(1) * (-t1099 * t838 + t738 * t897) - g(2) * (-t1099 * t836 + t736 * t897) - g(3) * (-t1052 * t892 + t822 * t897) + t1125 * t744 + t1078 * t701 - t1079 * t627 - t966 * t594) * MDP(28) - t894 * MDP(4) * t1053; (-t591 * t682 - t603 * t660 - t1120 * t896 + t909 * t891 + (t618 * t1091 + t571 + (-t1118 * t660 - t591 * t891) * qJD(5) - t914 * t896) * t892 + (t591 * t1061 + t573 * t891 - t985 * t749 + t1118 * t590 + (t1091 * t698 - t985) * qJD(5)) * t897) * MDP(34) + (-t591 * t683 - t603 * t662 + t1120 * t891 + t909 * t896 + (t618 * t1089 - t570 + (-t1118 * t662 - t591 * t896) * qJD(5) + t914 * t891) * t892 + (-t591 * t1062 + t573 * t896 - t581 * t749 + t1118 * t589 + (t1089 * t698 - t581) * qJD(5)) * t897) * MDP(35) + (-t595 * qJ(4) - t597 * pkin(3) - t637 * t684 - t640 * t655 - g(1) * (-pkin(3) * t721 + qJ(4) * t722) - g(2) * (-pkin(3) * t717 + qJ(4) * t718) - g(3) * (t1109 - t1114) + t1060 * t642) * MDP(21) + (t684 * t747 + t1107 - 0.2e1 * t1115 + t904) * MDP(19) + (t896 * t1088 + (-t1062 * t897 + t989) * t662) * MDP(29) + (qJ(4) * t620 + t593 * t747 + t1059 * t699 + (-t633 * t744 - t1121) * t897 + ((t659 + t1063) * t744 + t929) * t892) * MDP(27) + (qJ(4) * t619 + t1082 * t744 - t594 * t747 + t1059 * t701 + t1121 * t892 + (t1063 * t744 + t929) * t897) * MDP(28) + (-t696 * t749 - t1107 + t907) * MDP(16) + (t1060 * t814 - t637 * t747 + t684 * t749 + 0.2e1 * t745 - t808 + t908) * MDP(20) + (t589 * t892 + t989 * t698 + (t1014 + t955) * t897) * MDP(31) + (-t747 ^ 2 + t1119) * MDP(12) + (-t1016 * t892 + t619 * t897) * MDP(22) + ((-t620 - t1016) * t897 + (t1058 * t699 - t619) * t892) * MDP(23) + (pkin(3) * t672 - qJ(4) * t673 + (-t642 - t655) * t749 + (t640 + t1060) * t747) * MDP(18) + (t660 * t683 + t662 * t682 + (t660 * t896 + t662 * t891) * t1065 + (-t1108 - t590 * t896 + (t660 * t891 - t662 * t896) * qJD(6)) * t897) * MDP(30) + (-t699 * t747 + t932) * MDP(25) + (t654 * t814 + t696 * t747 - t908) * MDP(17) + (t701 * t747 + t957) * MDP(24) + (-t749 * t814 - t673) * MDP(14) + t756 * MDP(15) + t903 * MDP(13) + MDP(11) * t1103 + t744 * t747 * MDP(26) + (t1015 * t698 + t618 * t892) * MDP(33) + (-t590 * t892 + (t1065 * t891 + t682) * t698 + (t956 - t1127) * t897) * MDP(32); t903 * MDP(18) + (t756 - t1103) * MDP(19) + (-t814 ^ 2 - t1119) * MDP(20) + (-t642 * t814 - t1115 + t904) * MDP(21) + (t699 * t814 + t957) * MDP(27) + (t701 * t814 + t932) * MDP(28) + (-t897 * t590 + (-t1015 * t891 + t896 * t814) * t698 + (t956 + t1127) * t892) * MDP(34) + (-t1088 + (-t1015 * t896 - t891 * t814) * t698 + (t1014 - t955) * t892) * MDP(35); -t699 ^ 2 * MDP(23) + (t699 * t744 + t619) * MDP(24) - t1018 * MDP(25) - t670 * MDP(26) + (t594 * t744 + t575 - t946) * MDP(27) + (g(1) * t681 + g(2) * t679 + g(3) * t715 + t593 * t744 + t627 * t699 - t574) * MDP(28) + (t1013 * t662 + t1108) * MDP(29) + ((t589 - t1106) * t896 + (-t590 - t1105) * t891) * MDP(30) + (t1013 * t698 + t1092) * MDP(31) + (-t698 ^ 2 * t891 + t1090) * MDP(32) + (-pkin(5) * t590 - t1123 * t896 - t594 * t660 + t917 * t891) * MDP(34) + (-pkin(5) * t589 + t1123 * t891 - t594 * t662 + t917 * t896) * MDP(35) + (t699 * MDP(22) + (-qJD(5) + t744) * MDP(25) - t627 * MDP(27) - t662 * MDP(31) + t660 * MDP(32) - t698 * MDP(33) + t985 * MDP(34) + t581 * MDP(35) + t701 * MDP(23)) * t701; t662 * t660 * MDP(29) + (-t660 ^ 2 + t662 ^ 2) * MDP(30) + (t1049 + t1106) * MDP(31) + (-t1019 + t1105) * MDP(32) + t618 * MDP(33) + (-g(1) * t638 + g(2) * t1142 + g(3) * t674 + t581 * t698 - t591 * t662 + t1021) * MDP(34) + (g(1) * t639 + g(2) * t1141 + g(3) * t675 + t591 * t660 - t985 * t698 - t986) * MDP(35) + (-MDP(31) * t1104 - MDP(32) * t662 - MDP(34) * t581 + MDP(35) * t985) * qJD(6);];
tau  = t1;
