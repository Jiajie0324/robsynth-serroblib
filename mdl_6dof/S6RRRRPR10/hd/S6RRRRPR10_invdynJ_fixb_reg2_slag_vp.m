% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 23:08:41
% EndTime: 2019-03-09 23:09:22
% DurationCPUTime: 23.31s
% Computational Cost: add. (27978->908), mult. (67683->1153), div. (0->0), fcn. (54321->14), ass. (0->422)
t328 = sin(qJ(3));
t332 = cos(qJ(2));
t325 = sin(pkin(6));
t529 = qJD(1) * t325;
t499 = t332 * t529;
t456 = t328 * t499;
t527 = qJD(3) * t328;
t617 = t456 - t527;
t567 = cos(pkin(6));
t483 = t567 * qJD(1);
t451 = pkin(1) * t483;
t329 = sin(qJ(2));
t500 = t329 * t529;
t245 = -pkin(8) * t500 + t332 * t451;
t437 = pkin(2) * t329 - pkin(9) * t332;
t246 = t437 * t529;
t596 = cos(qJ(3));
t165 = -t328 * t245 + t596 * t246;
t628 = pkin(10) + pkin(9);
t289 = t628 * t596;
t502 = t332 * t596;
t664 = (pkin(3) * t329 - pkin(10) * t502) * t529 + t165 + qJD(3) * t289;
t166 = t596 * t245 + t328 * t246;
t288 = t628 * t328;
t663 = -pkin(10) * t456 + qJD(3) * t288 + t166;
t327 = sin(qJ(4));
t595 = cos(qJ(4));
t264 = t327 * t328 - t595 * t596;
t504 = t325 * t596;
t449 = qJD(1) * t504;
t417 = t332 * t449;
t611 = qJD(3) + qJD(4);
t535 = t264 * t611 - t327 * t456 + t417 * t595;
t439 = t567 * t596;
t546 = t325 * t329;
t641 = -t328 * t546 + t439;
t413 = t641 * pkin(3);
t265 = t327 * t596 + t328 * t595;
t534 = (-t499 + t611) * t265;
t248 = pkin(8) * t499 + t329 * t451;
t441 = -pkin(3) * t617 - t248;
t415 = t483 + qJD(2);
t223 = -t328 * t500 + t596 * t415;
t224 = t328 * t415 + t329 * t449;
t149 = -t595 * t223 + t224 * t327;
t517 = qJDD(1) * t332;
t301 = t325 * t517;
t519 = qJD(1) * qJD(2);
t490 = t329 * t519;
t446 = t325 * t490;
t239 = qJDD(3) - t301 + t446;
t232 = qJDD(4) + t239;
t284 = -qJD(3) + t499;
t274 = -qJD(4) + t284;
t326 = sin(qJ(6));
t331 = cos(qJ(6));
t522 = qJD(6) * t331;
t523 = qJD(6) * t326;
t468 = t567 * qJDD(1);
t410 = t468 + qJDD(2);
t518 = qJDD(1) * t329;
t488 = t325 * t518;
t489 = t332 * t519;
t640 = t325 * t489 + t488;
t657 = qJD(3) * t224;
t353 = t328 * t640 - t410 * t596 + t657;
t345 = -t223 * qJD(3) - t328 * t410;
t448 = qJD(2) * t502;
t503 = t329 * t596;
t358 = qJD(1) * t448 + qJDD(1) * t503;
t604 = -t325 * t358 + t345;
t339 = -t327 * t604 + t595 * t353;
t402 = t327 * t223 + t224 * t595;
t69 = qJD(4) * t402 + t339;
t39 = -t149 * t522 - t331 * t232 - t274 * t523 - t326 * t69;
t121 = -t331 * t149 - t274 * t326;
t612 = qJD(6) + t402;
t646 = t612 * t121;
t662 = t39 - t646;
t492 = qJD(4) * t595;
t200 = pkin(9) * t415 + t248;
t412 = -pkin(2) * t332 - pkin(9) * t329 - pkin(1);
t238 = t412 * t325;
t210 = qJD(1) * t238;
t135 = -t200 * t328 + t596 * t210;
t115 = -pkin(10) * t224 + t135;
t136 = t200 * t596 + t328 * t210;
t116 = t223 * pkin(10) + t136;
t542 = t327 * t116;
t72 = t115 * t595 - t542;
t661 = pkin(3) * t492 - t72;
t205 = -t327 * t288 + t289 * t595;
t570 = qJD(4) * t205 - t663 * t327 + t595 * t664;
t643 = t612 * t331;
t526 = qJD(4) * t327;
t68 = -t223 * t492 + t224 * t526 + t327 * t353 + t595 * t604;
t65 = -qJDD(6) + t68;
t383 = t326 * t65 - t612 * t643;
t660 = -t121 * t149 + t383;
t659 = qJ(5) * t535 - qJD(5) * t265 + t441;
t123 = t149 * t326 - t274 * t331;
t644 = t612 * t326;
t406 = -t331 * t65 - t612 * t644;
t658 = t123 * t149 + t406;
t38 = t331 * t39;
t656 = -t123 * t644 - t38;
t525 = qJD(6) * t123;
t40 = t232 * t326 - t331 * t69 + t525;
t577 = t326 * t40;
t655 = t331 * t646 + t577;
t654 = -t331 * t40 - t123 * t643 + (t39 + t646) * t326;
t585 = t149 * pkin(5);
t599 = pkin(4) + pkin(11);
t653 = t534 * t599 + t659;
t114 = t595 * t116;
t377 = -pkin(3) * t284 + t115;
t368 = t327 * t377;
t60 = t114 + t368;
t57 = t274 * qJ(5) - t60;
t43 = -t57 - t585;
t652 = t43 * t612;
t464 = t599 * t546;
t651 = -pkin(5) * t535 + qJD(1) * t464 + t570;
t572 = t288 * t492 + t289 * t526 + t327 * t664 + t663 * t595;
t569 = -qJD(5) - t661;
t566 = qJ(5) * t149;
t648 = t149 * t402;
t647 = t328 * t604;
t645 = t612 * t149;
t105 = t595 * t377;
t59 = -t105 + t542;
t538 = -qJD(5) - t59;
t204 = t595 * t288 + t289 * t327;
t324 = qJ(3) + qJ(4);
t319 = cos(t324);
t544 = t325 * t332;
t330 = sin(qJ(1));
t597 = cos(qJ(1));
t440 = t567 * t597;
t252 = t329 * t330 - t332 * t440;
t485 = t332 * t567;
t254 = t329 * t597 + t330 * t485;
t613 = g(1) * t254 + g(2) * t252;
t381 = g(3) * t544 - t613;
t369 = t381 * t319;
t642 = -t204 * t232 - t369;
t486 = t329 * t567;
t255 = -t330 * t486 + t332 * t597;
t195 = -t255 * t328 + t330 * t504;
t259 = pkin(1) * t485 - pkin(8) * t546;
t249 = qJD(2) * t259;
t600 = t402 ^ 2;
t639 = -t149 ^ 2 + t600;
t626 = pkin(5) * t402;
t537 = t626 - t538;
t41 = t274 * t599 + t537;
t199 = -pkin(2) * t415 - t245;
t154 = -t223 * pkin(3) + t199;
t344 = -qJ(5) * t402 + t154;
t54 = t149 * t599 + t344;
t20 = t326 * t41 + t331 * t54;
t450 = pkin(1) * qJD(2) * t567;
t411 = qJD(1) * t450;
t442 = pkin(1) * t468;
t506 = pkin(8) * t301 + t329 * t442 + t332 * t411;
t174 = -pkin(8) * t446 + t506;
t159 = pkin(9) * t410 + t174;
t403 = t437 * qJD(2);
t164 = (qJD(1) * t403 + qJDD(1) * t412) * t325;
t478 = -t328 * t159 + t596 * t164;
t493 = qJD(3) * t596;
t46 = t239 * pkin(3) + pkin(10) * t604 - t200 * t493 - t210 * t527 + t478;
t393 = -t596 * t159 - t328 * t164 + t200 * t527 - t210 * t493;
t53 = -pkin(10) * t353 - t393;
t467 = -qJD(4) * t105 + t116 * t526 - t327 * t46 - t595 * t53;
t214 = t232 * qJ(5);
t621 = qJD(5) * t274 - t214;
t11 = t467 + t621;
t9 = -pkin(5) * t69 - t11;
t638 = -t149 * t20 + t9 * t331;
t460 = pkin(8) * t640 + t329 * t411 - t332 * t442;
t160 = -pkin(2) * t410 + t460;
t99 = pkin(3) * t353 + t160;
t342 = t68 * qJ(5) - qJD(5) * t402 + t99;
t10 = t599 * t69 + t342;
t466 = qJD(4) * t368 + t116 * t492 + t327 * t53 - t595 * t46;
t424 = qJDD(5) + t466;
t6 = -pkin(5) * t68 - t232 * t599 + t424;
t2 = -qJD(6) * t20 - t326 * t10 + t331 * t6;
t637 = t20 * t612 + t2;
t636 = t123 * t612 - t40;
t635 = t149 * t274 + t68;
t253 = t329 * t440 + t330 * t332;
t318 = sin(t324);
t505 = t325 * t597;
t183 = t253 * t319 - t318 * t505;
t545 = t325 * t330;
t187 = t255 * t319 + t318 * t545;
t235 = t318 * t567 + t319 * t546;
t389 = g(1) * t187 + g(2) * t183 + g(3) * t235;
t359 = t389 + t467;
t78 = t149 * pkin(4) + t344;
t634 = -t149 * t78 - t359 - t621;
t633 = t149 * t154 + t359;
t425 = t326 * t54 - t331 * t41;
t632 = -t149 * t425 + t9 * t326 + t43 * t522;
t182 = t253 * t318 + t319 * t505;
t631 = t182 * t326 + t252 * t331;
t630 = t182 * t331 - t252 * t326;
t321 = t325 ^ 2;
t629 = 0.2e1 * t321;
t627 = pkin(4) * t402;
t625 = t402 * t43;
t573 = qJ(5) * t500 + t572;
t568 = t626 - t569;
t513 = pkin(3) * t526;
t71 = t115 * t327 + t114;
t444 = -t71 + t513;
t623 = t402 * t599;
t622 = -t160 - t381;
t310 = pkin(1) * t486;
t260 = pkin(8) * t544 + t310;
t237 = pkin(9) * t567 + t260;
t163 = t596 * t237 + t328 * t238;
t307 = pkin(4) * t544;
t512 = qJ(5) * t544;
t620 = t319 * t307 + t318 * t512;
t251 = t325 * t503 + t328 * t567;
t363 = t251 * qJD(3);
t497 = qJD(2) * t544;
t347 = t328 * t497 + t363;
t619 = (qJDD(2) + 0.2e1 * t468) * t325;
t618 = t417 - t493;
t616 = -t596 * t239 - t284 * t527;
t615 = t20 * t326 - t331 * t425;
t1 = -t425 * qJD(6) + t331 * t10 + t326 * t6;
t614 = t1 * t326 + t2 * t331;
t250 = qJD(2) * t260;
t494 = t402 * t425 + t1;
t610 = -t402 * t20 - t2;
t186 = t255 * t318 - t319 * t545;
t234 = t318 * t546 - t319 * t567;
t390 = g(1) * t186 + g(2) * t182 + g(3) * t234;
t360 = t390 - t466;
t349 = t402 * t78 + qJDD(5) - t360;
t609 = -t154 * t402 + t360;
t608 = t223 * t526 + t224 * t492 + t274 * t402 + t339;
t607 = t232 * t265 + t274 * t535 - t402 * t500;
t606 = t149 * t500 - t232 * t264 + t274 * t534;
t605 = -t205 * t232 + t318 * t381;
t162 = -t328 * t237 + t596 * t238;
t120 = -pkin(3) * t544 - pkin(10) * t251 + t162;
t128 = pkin(10) * t641 + t163;
t247 = t325 * t403;
t475 = t596 * t247 - t328 * t249;
t528 = qJD(2) * t329;
t498 = t325 * t528;
t601 = -qJD(3) * t641 - t325 * t448;
t86 = pkin(3) * t498 + pkin(10) * t601 - t237 * t493 - t238 * t527 + t475;
t106 = -t237 * t527 + t238 * t493 + t328 * t247 + t596 * t249;
t92 = -pkin(10) * t347 + t106;
t397 = -t120 * t492 + t128 * t526 - t327 * t86 - t595 * t92;
t21 = -t325 * (qJ(5) * t528 - qJD(5) * t332) + t397;
t364 = t327 * t641;
t173 = t251 * t595 + t364;
t357 = t595 * t641;
t97 = -qJD(4) * t357 + t251 * t526 + t327 * t347 + t595 * t601;
t603 = t325 * (t332 * t68 + t402 * t528) + t173 * t232 + t274 * t97;
t172 = t251 * t327 - t357;
t98 = qJD(4) * t364 + t251 * t492 - t327 * t601 + t347 * t595;
t602 = t325 * (t149 * t528 - t332 * t69) + t172 * t232 - t274 * t98;
t335 = qJD(1) ^ 2;
t594 = pkin(3) * t224;
t593 = pkin(3) * t327;
t592 = pkin(4) * t232;
t591 = pkin(11) * t186;
t590 = pkin(11) * t234;
t587 = g(3) * t325;
t584 = t182 * pkin(11);
t316 = pkin(3) * t596 + pkin(2);
t394 = -t265 * qJ(5) - t316;
t155 = t264 * t599 + t394;
t170 = pkin(5) * t265 + t204;
t103 = -t155 * t326 + t170 * t331;
t582 = qJD(6) * t103 + t326 * t651 + t331 * t653;
t104 = t155 * t331 + t170 * t326;
t581 = -qJD(6) * t104 - t326 * t653 + t331 * t651;
t578 = t274 * t60;
t575 = t599 * t65;
t574 = -pkin(5) * t534 - t573;
t571 = pkin(4) * t500 + t570;
t565 = qJ(5) * t318;
t564 = t123 * t121;
t558 = t223 * t284;
t557 = t224 * t223;
t556 = t252 * t319;
t553 = t254 * t319;
t551 = t264 * t326;
t550 = t264 * t331;
t549 = t318 * t326;
t548 = t318 * t331;
t547 = t321 * t335;
t543 = t326 * t332;
t540 = t328 * t332;
t539 = t331 * t332;
t536 = pkin(4) * t534 + t659;
t82 = t327 * t120 + t595 * t128;
t533 = -t252 * t316 + t253 * t628;
t532 = -t254 * t316 + t255 * t628;
t531 = t597 * pkin(1) + pkin(8) * t545;
t322 = t329 ^ 2;
t323 = t332 ^ 2;
t530 = t322 - t323;
t524 = qJD(6) * t612;
t514 = t595 * pkin(3);
t18 = t425 * t523;
t511 = t332 * t547;
t510 = t325 * t543;
t508 = t325 * t539;
t507 = t328 * t545;
t491 = pkin(1) * t629;
t487 = -pkin(1) * t330 + pkin(8) * t505;
t482 = -t182 * pkin(4) + t183 * qJ(5);
t481 = -t186 * pkin(4) + qJ(5) * t187;
t480 = -t234 * pkin(4) + qJ(5) * t235;
t479 = -t40 + t525;
t477 = t326 * t500 + t331 * t534;
t476 = -t326 * t534 + t331 * t500;
t463 = t329 * t511;
t462 = -pkin(4) * t556 - t252 * t565 + t533;
t461 = -pkin(4) * t553 - t254 * t565 + t532;
t291 = t328 * t505;
t455 = t274 * t500;
t315 = -t514 - pkin(4);
t447 = t329 * t489;
t443 = t195 * pkin(3);
t438 = t325 * t335 * t567;
t436 = g(1) * t182 - g(2) * t186;
t435 = -g(1) * t183 + g(2) * t187;
t434 = g(1) * t252 - g(2) * t254;
t433 = g(1) * t255 + g(2) * t253;
t268 = t316 * t544;
t432 = t546 * t628 + t268;
t81 = t120 * t595 - t327 * t128;
t430 = t253 * t596 - t291;
t428 = t594 + t566;
t427 = t149 * t98 + t172 * t69;
t426 = -t173 * t68 - t402 * t97;
t80 = t307 - t81;
t55 = t173 * pkin(5) + pkin(11) * t544 + t80;
t236 = -pkin(2) * t567 - t259;
t176 = t236 - t413;
t343 = -t173 * qJ(5) + t176;
t74 = t172 * t599 + t343;
t30 = -t326 * t74 + t331 * t55;
t31 = t326 * t55 + t331 * t74;
t423 = pkin(3) * t507 + t254 * t628 + t255 * t316 + t531;
t414 = 0.2e1 * t483 + qJD(2);
t79 = t512 - t82;
t408 = g(1) * t597 + g(2) * t330;
t144 = t172 * t331 + t510;
t400 = pkin(3) * t291 - t252 * t628 - t253 * t316 + t487;
t399 = t120 * t526 + t128 * t492 + t327 * t92 - t595 * t86;
t396 = t149 * t534 + t264 * t69;
t395 = -t265 * t68 - t402 * t535;
t312 = -pkin(11) + t315;
t391 = t312 * t65 - t513 * t612;
t386 = t264 * t523 - t477;
t385 = t264 * t522 - t476;
t384 = -t328 * t239 + t284 * t493;
t382 = -t18 + t390;
t380 = -g(3) * t546 - t433;
t379 = t443 + t481;
t376 = t253 * t328 + t504 * t597;
t374 = t187 * pkin(4) + qJ(5) * t186 + t423;
t372 = t413 + t480;
t367 = t376 * pkin(3);
t366 = t149 * t97 + t172 * t68 - t173 * t69 - t402 * t98;
t365 = -pkin(4) * t183 - qJ(5) * t182 + t400;
t362 = -t312 * t524 - t389;
t361 = t524 * t599 - t389;
t76 = -qJD(3) * t136 + t478;
t354 = -t204 * t68 - t205 * t69 + t380;
t352 = t149 * t535 + t264 * t68 - t265 * t69 - t402 * t534;
t351 = -t367 + t482;
t350 = -t76 * t328 - t393 * t596 + t380;
t348 = t353 * t596;
t34 = pkin(3) * t347 + t98 * pkin(4) + pkin(8) * t497 + t97 * qJ(5) - t173 * qJD(5) + t329 * t450;
t313 = qJ(5) + t593;
t196 = t255 * t596 + t507;
t177 = t264 * pkin(4) + t394;
t171 = -t264 * pkin(5) + t205;
t161 = (-t232 * t332 - t274 * t528) * t325;
t156 = pkin(3) * t363 + (t310 + (pkin(3) * t328 + pkin(8)) * t544) * qJD(2);
t145 = -t326 * t172 + t508;
t140 = t186 * t326 + t254 * t331;
t139 = t186 * t331 - t254 * t326;
t107 = -qJD(3) * t163 + t475;
t100 = t566 + t627;
t93 = t172 * pkin(4) + t343;
t87 = t428 + t627;
t77 = t566 + t623;
t67 = qJD(6) * t144 + t326 * t98 + t331 * t498;
t66 = -qJD(6) * t508 - t331 * t98 + (qJD(6) * t172 + t498) * t326;
t61 = t428 + t623;
t58 = -pkin(5) * t172 - t79;
t56 = pkin(4) * t274 - t538;
t49 = t71 - t585;
t48 = t60 - t585;
t29 = t326 * t48 + t331 * t77;
t28 = -t326 * t77 + t331 * t48;
t25 = t326 * t49 + t331 * t61;
t24 = -t326 * t61 + t331 * t49;
t23 = -pkin(4) * t498 + t399;
t22 = t98 * pkin(11) + t34;
t17 = t69 * pkin(4) + t342;
t16 = -pkin(5) * t98 - t21;
t15 = -t97 * pkin(5) - qJD(2) * t464 + t399;
t12 = t424 - t592;
t4 = -qJD(6) * t31 + t15 * t331 - t22 * t326;
t3 = qJD(6) * t30 + t15 * t326 + t22 * t331;
t5 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t330 - g(2) * t597, t408, 0, 0 (qJDD(1) * t322 + 0.2e1 * t447) * t321 (t329 * t517 - t519 * t530) * t629, t329 * t619 + t414 * t497 (qJDD(1) * t323 - 0.2e1 * t447) * t321, t332 * t619 - t414 * t498, t410 * t567, -t250 * t415 + t259 * t410 - t460 * t567 + g(1) * t253 - g(2) * t255 + (-t490 + t517) * t491, -t249 * t415 - t260 * t410 - t174 * t567 + (-t489 - t518) * t491 - t434 ((-t245 * qJD(2) + qJDD(1) * t260 + t174) * t332 + (-qJD(2) * t248 - qJDD(1) * t259 + t460) * t329 - t408) * t325, t321 * qJDD(1) * pkin(1) ^ 2 - g(1) * t487 - g(2) * t531 + t174 * t260 - t245 * t250 + t248 * t249 - t259 * t460, -t345 * t251 + t439 * t657 + (t358 * t251 + t224 * (-t329 * t527 + t448)) * t325, -t223 * t601 - t224 * t347 - t251 * t353 - t604 * t641, t224 * t498 + t251 * t239 + t284 * t601 + t544 * t604, -t223 * t347 - t353 * t641, t223 * t498 + t239 * t641 + t284 * t347 + t353 * t544 (-t239 * t332 - t284 * t528) * t325, g(1) * t430 - g(2) * t196 - t107 * t284 + t135 * t498 - t160 * t641 + t162 * t239 + t199 * t347 - t250 * t223 + t236 * t353 - t76 * t544, -g(1) * t376 - g(2) * t195 + t106 * t284 - t136 * t498 + t160 * t251 - t163 * t239 - t199 * t601 + t250 * t224 - t236 * t604 - t393 * t544, t106 * t223 - t107 * t224 + t135 * t601 - t136 * t347 + t162 * t604 - t163 * t353 - t76 * t251 - t393 * t641 + t434, -t393 * t163 + t136 * t106 + t76 * t162 + t135 * t107 + t160 * t236 + t199 * t250 - g(1) * (-pkin(2) * t253 - pkin(9) * t252 + t487) - g(2) * (pkin(2) * t255 + pkin(9) * t254 + t531) t426, t366, t603, t427, -t602, t161, t149 * t156 + t154 * t98 + t172 * t99 + t176 * t69 + t232 * t81 + t399 * t274 + (t332 * t466 - t528 * t59) * t325 - t435, t402 * t156 - t154 * t97 + t173 * t99 - t176 * t68 - t232 * t82 - t397 * t274 + (-t332 * t467 - t528 * t60) * t325 - t436, t149 * t397 + t172 * t467 + t173 * t466 + t399 * t402 - t59 * t97 - t60 * t98 + t68 * t81 - t69 * t82 + t434, -g(1) * t400 - g(2) * t423 + t154 * t156 + t99 * t176 - t397 * t60 + t399 * t59 - t466 * t81 - t467 * t82, t161, -t603, t602, t426, t366, t427, t11 * t172 + t12 * t173 + t149 * t21 + t23 * t402 - t56 * t97 + t57 * t98 - t68 * t80 + t69 * t79 + t434, -t149 * t34 - t17 * t172 - t23 * t274 + t232 * t80 - t69 * t93 - t78 * t98 + (-t12 * t332 + t528 * t56) * t325 + t435, -t402 * t34 - t17 * t173 + t21 * t274 - t232 * t79 + t68 * t93 + t78 * t97 + (t11 * t332 - t528 * t57) * t325 + t436, -g(1) * t365 - g(2) * t374 + t11 * t79 + t12 * t80 + t17 * t93 + t57 * t21 + t56 * t23 + t78 * t34, t123 * t67 + t145 * t39, -t121 * t67 - t123 * t66 - t144 * t39 + t145 * t40, -t123 * t97 + t145 * t65 - t173 * t39 + t612 * t67, t121 * t66 - t144 * t40, t121 * t97 - t144 * t65 - t173 * t40 - t612 * t66, -t173 * t65 - t612 * t97, g(1) * t631 - g(2) * t140 + t16 * t121 - t9 * t144 + t2 * t173 - t30 * t65 + t4 * t612 + t58 * t40 + t425 * t97 + t43 * t66, g(1) * t630 - g(2) * t139 - t1 * t173 + t16 * t123 - t9 * t145 + t20 * t97 - t3 * t612 + t31 * t65 - t58 * t39 + t43 * t67, t1 * t144 - t121 * t3 - t123 * t4 + t145 * t2 - t20 * t66 + t30 * t39 - t31 * t40 + t425 * t67 - t435, t1 * t31 + t20 * t3 + t2 * t30 - t425 * t4 + t9 * t58 + t43 * t16 - g(1) * (-pkin(5) * t252 - pkin(11) * t183 + t365) - g(2) * (pkin(5) * t254 + pkin(11) * t187 + t374); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t463, t530 * t547, -t332 * t438 + t488, t463, t329 * t438 + t301, t410, pkin(1) * t329 * t547 + t248 * t415 - t381 - t460, pkin(1) * t511 + t245 * t415 + (pkin(8) * t519 + g(3)) * t546 + t433 - t506, 0, 0, -t224 * t618 - t647, -t223 * t618 + t224 * t617 - t328 * t353 - t596 * t604 (-t224 * t329 + t284 * t502) * t529 - t384, t328 * t558 - t348 (-t223 * t329 - t284 * t540) * t529 - t616, t284 * t500, -pkin(2) * t353 + t199 * t527 + t165 * t284 + t248 * t223 + t384 * pkin(9) + (-g(3) * t502 + (-t135 * t329 - t199 * t540) * qJD(1)) * t325 + (-t160 + t613) * t596, pkin(2) * t604 + pkin(9) * t616 + t136 * t500 - t166 * t284 - t199 * t618 - t248 * t224 - t328 * t622, t165 * t224 - t166 * t223 + t350 + t617 * t136 + t618 * t135 + (-t223 * t527 + t224 * t493 - t348 - t647) * pkin(9), -t135 * t165 - t136 * t166 - t199 * t248 + t622 * pkin(2) + ((-t135 * t596 - t136 * t328) * qJD(3) + t350) * pkin(9), t395, t352, t607, t396, t606, t455, t149 * t441 + t154 * t534 + t264 * t99 + t274 * t570 - t316 * t69 + t500 * t59 + t642, -t154 * t535 + t265 * t99 - t274 * t572 + t316 * t68 + t402 * t441 + t500 * t60 + t605, t149 * t572 + t264 * t467 + t265 * t466 + t402 * t570 - t534 * t60 - t535 * t59 + t354, -g(1) * t532 - g(2) * t533 - g(3) * t432 + t154 * t441 + t204 * t466 - t205 * t467 - t99 * t316 + t570 * t59 - t572 * t60, t455, -t607, -t606, t395, t352, t396, t11 * t264 + t12 * t265 + t149 * t573 + t402 * t571 + t534 * t57 - t535 * t56 + t354, -t149 * t536 - t17 * t264 - t177 * t69 - t274 * t571 - t500 * t56 - t534 * t78 - t642, -t17 * t265 + t177 * t68 + t274 * t573 - t402 * t536 + t500 * t57 + t535 * t78 - t605, t17 * t177 - t11 * t205 + t12 * t204 - g(1) * t461 - g(2) * t462 - g(3) * (t432 + t620) + t536 * t78 + t573 * t57 + t571 * t56, t123 * t385 - t39 * t551, t477 * t123 + t476 * t121 + (-t577 - t38 + (-t121 * t331 - t123 * t326) * qJD(6)) * t264, -t123 * t535 - t265 * t39 + t385 * t612 - t551 * t65, t121 * t386 - t40 * t550, t121 * t535 - t265 * t40 - t386 * t612 - t550 * t65, -t265 * t65 - t535 * t612, -t103 * t65 + t2 * t265 + t171 * t40 - t9 * t550 - g(1) * (-t254 * t549 + t255 * t331) - g(2) * (-t252 * t549 + t253 * t331) - (t318 * t543 + t329 * t331) * t587 + t535 * t425 + t581 * t612 + t574 * t121 + t386 * t43, t104 * t65 - t1 * t265 - t171 * t39 + t9 * t551 - g(1) * (-t254 * t548 - t255 * t326) - g(2) * (-t252 * t548 - t253 * t326) - (t318 * t539 - t326 * t329) * t587 + t535 * t20 - t582 * t612 + t574 * t123 + t385 * t43, t103 * t39 - t104 * t40 + t477 * t20 - t476 * t425 - t581 * t123 - t582 * t121 - t369 + (-qJD(6) * t615 + t1 * t331 - t2 * t326) * t264, t1 * t104 + t2 * t103 + t9 * t171 - g(1) * (pkin(5) * t255 - pkin(11) * t553 + t461) - g(2) * (pkin(5) * t253 - pkin(11) * t556 + t462) - g(3) * (t268 + t620) + t574 * t43 - (pkin(11) * t319 * t332 + (pkin(5) + t628) * t329) * t587 + t582 * t20 - t581 * t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t557, -t223 ^ 2 + t224 ^ 2, -t604 + t558, t557, -t224 * t284 - t353, t239, -g(1) * t195 + g(2) * t376 - g(3) * t641 - t136 * t284 - t199 * t224 + t76, g(1) * t196 + g(2) * t430 + g(3) * t251 - t135 * t284 - t199 * t223 + t393, 0, 0, t648, t639, -t635, -t648, -t608, t232, -t71 * t274 + (-t149 * t224 + t232 * t595 + t274 * t526) * pkin(3) + t609, -t72 * t274 + (-t224 * t402 - t232 * t327 + t274 * t492) * pkin(3) + t633, t60 * t402 + t72 * t149 + t149 * t59 - t71 * t402 + (t595 * t68 - t327 * t69 + (-t149 * t595 + t327 * t402) * qJD(4)) * pkin(3), -g(1) * t443 + g(2) * t367 - g(3) * t413 - t154 * t594 + t444 * t59 - t466 * t514 - t467 * t593 + t60 * t661, t232, t635, t608, t648, t639, -t648, -t313 * t69 - t315 * t68 + (t444 - t57) * t402 + (t569 + t56) * t149, t149 * t87 - t444 * t274 + (-pkin(4) + t315) * t232 + t349, t232 * t313 + t274 * t569 + t402 * t87 + t634, -g(1) * t379 - g(2) * t351 - g(3) * t372 - t11 * t313 + t12 * t315 + t444 * t56 + t569 * t57 - t78 * t87, t656, t654, t658, t655, t660, t645, -t612 * t24 + t313 * t40 + t568 * t121 + (-t391 + t625) * t331 + t362 * t326 + t632, t612 * t25 - t313 * t39 + t568 * t123 + t362 * t331 + (t391 - t652) * t326 + t638, t121 * t25 + t123 * t24 + (-t121 * t513 + t312 * t479 - t494) * t326 + (-t123 * t513 + t312 * t39 + (-t121 * t312 - t20) * qJD(6) + t610) * t331 + t382, t9 * t313 - t20 * t25 + t425 * t24 - g(1) * (t379 - t591) - g(2) * (t351 - t584) - g(3) * (t372 - t590) + t615 * t513 + t568 * t43 + (t20 * t522 + t18 + t614) * t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t648, t639, -t635, -t648, -t608, t232, -t578 + t609, t274 * t59 + t633, 0, 0, t232, t635, t608, t648, t639, -t648, pkin(4) * t68 - qJ(5) * t69 + (-t57 - t60) * t402 + (t56 + t538) * t149, t100 * t149 + t349 + t578 - 0.2e1 * t592, t100 * t402 + t274 * t538 + t214 + t634, -t12 * pkin(4) - g(1) * t481 - g(2) * t482 - g(3) * t480 - t11 * qJ(5) - t78 * t100 + t538 * t57 - t56 * t60, t656, t654, t658, t655, t660, t645, qJ(5) * t40 - t612 * t28 + (t575 + t625) * t331 + t537 * t121 + t361 * t326 + t632, -qJ(5) * t39 + t612 * t29 + t537 * t123 + (-t575 - t652) * t326 + t361 * t331 + t638, t121 * t29 + t123 * t28 + (-t479 * t599 - t494) * t326 + (-t599 * t39 + (t121 * t599 - t20) * qJD(6) + t610) * t331 + t382, t9 * qJ(5) - t20 * t29 + t425 * t28 - g(1) * (t481 - t591) - g(2) * (t482 - t584) - g(3) * (t480 - t590) + t537 * t43 - ((t20 * t331 + t326 * t425) * qJD(6) + t614) * t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t635, t232 - t648, -t274 ^ 2 - t600, -t274 * t57 + t349 - t592, 0, 0, 0, 0, 0, 0, t121 * t274 + t406, t123 * t274 + t383, t636 * t326 + t331 * t662, t274 * t43 + t494 * t326 + t331 * t637 - t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t564, -t121 ^ 2 + t123 ^ 2, -t662, -t564, t636, -t65, -t43 * t123 - g(1) * t139 - g(2) * t630 - g(3) * (t234 * t331 + t510) + t637, -t425 * t612 + t43 * t121 + g(1) * t140 + g(2) * t631 - g(3) * (-t234 * t326 + t508) - t1, 0, 0;];
tau_reg  = t5;
