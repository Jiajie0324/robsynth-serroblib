% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPR10_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR10_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR10_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR10_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 23:08:31
% EndTime: 2019-03-09 23:08:42
% DurationCPUTime: 3.65s
% Computational Cost: add. (5844->389), mult. (15435->662), div. (0->0), fcn. (15033->10), ass. (0->189)
t145 = sin(pkin(6));
t152 = cos(qJ(2));
t149 = sin(qJ(2));
t221 = qJD(2) * t149;
t148 = sin(qJ(3));
t151 = cos(qJ(3));
t241 = cos(qJ(4));
t199 = qJD(3) * t241;
t243 = -pkin(10) - pkin(9);
t178 = t243 * t199;
t147 = sin(qJ(4));
t187 = qJD(3) * t147 * t243;
t118 = t243 * t148;
t119 = t243 * t151;
t86 = t147 * t118 - t241 * t119;
t64 = qJD(4) * t86 + t148 * t187 - t151 * t178;
t85 = -t241 * t118 - t147 * t119;
t248 = t145 * (-t152 * t64 + t85 * t221);
t198 = qJD(4) * t241;
t216 = qJD(4) * t147;
t63 = -t118 * t198 - t119 * t216 - t148 * t178 - t151 * t187;
t247 = t145 * (t152 * t63 + t86 * t221);
t146 = sin(qJ(6));
t143 = t146 ^ 2;
t150 = cos(qJ(6));
t222 = -t150 ^ 2 + t143;
t192 = t222 * qJD(6);
t246 = qJD(3) + qJD(4);
t245 = 0.2e1 * t145;
t154 = 2 * qJD(5);
t244 = pkin(4) + pkin(11);
t214 = qJD(6) * t150;
t226 = t145 * t152;
t227 = t145 * t149;
t210 = t151 * t227;
t230 = cos(pkin(6));
t102 = t230 * t148 + t210;
t207 = pkin(1) * t230;
t96 = pkin(8) * t226 + t230 * pkin(9) + t149 * t207;
t97 = (-pkin(2) * t152 - pkin(9) * t149 - pkin(1)) * t145;
t197 = -t148 * t96 + t151 * t97;
t57 = -pkin(3) * t226 - t102 * pkin(10) + t197;
t196 = t230 * t151;
t168 = t148 * t227 - t196;
t236 = t148 * t97 + t151 * t96;
t62 = -pkin(10) * t168 + t236;
t237 = t147 * t57 + t241 * t62;
t29 = qJ(5) * t226 - t237;
t162 = t241 * t168;
t76 = t147 * t102 + t162;
t22 = -t76 * pkin(5) - t29;
t165 = t168 * qJD(3);
t220 = qJD(2) * t152;
t202 = t145 * t220;
t185 = t151 * t202;
t158 = -t165 + t185;
t166 = t147 * t168;
t193 = qJD(3) * t230;
t208 = qJD(3) * t210 + (t193 + t202) * t148;
t42 = -qJD(4) * t166 + t102 * t198 + t147 * t158 + t241 * t208;
t126 = t145 * t221;
t194 = qJD(2) * t230;
t181 = t152 * t194;
t100 = -pkin(1) * t181 + pkin(8) * t126;
t99 = (pkin(2) * t149 - pkin(9) * t152) * t145 * qJD(2);
t195 = t148 * t100 + t151 * t99;
t218 = qJD(3) * t151;
t219 = qJD(3) * t148;
t34 = pkin(3) * t126 - pkin(10) * t158 - t96 * t218 - t97 * t219 + t195;
t48 = t151 * t100 - t148 * t99 - t97 * t218 + t96 * t219;
t37 = -t208 * pkin(10) - t48;
t11 = -t147 * t34 - t57 * t198 + t62 * t216 - t241 * t37;
t120 = qJ(5) * t126;
t183 = t120 - t11;
t201 = qJD(5) * t226;
t8 = -t183 + t201;
t6 = -t42 * pkin(5) - t8;
t242 = t6 * t146 + t22 * t214;
t240 = pkin(3) * t145;
t239 = pkin(9) * t145;
t5 = t6 * t150;
t110 = t147 * t151 + t241 * t148;
t84 = t246 * t110;
t50 = -t84 * pkin(5) - t63;
t225 = t147 * t148;
t109 = -t241 * t151 + t225;
t75 = -t109 * pkin(5) + t86;
t238 = t50 * t146 + t75 * t214;
t41 = qJD(4) * t162 + t102 * t216 + t147 * t208 - t241 * t158;
t235 = t146 * t41;
t234 = t146 * t84;
t233 = t150 * t84;
t65 = t146 * t226 + t150 * t76;
t25 = qJD(6) * t65 + t150 * t126 + t146 * t42;
t232 = t25 * t146;
t231 = t25 * t150;
t47 = t50 * t150;
t229 = qJD(6) * t75;
t182 = t149 * t194;
t101 = pkin(1) * t182 + pkin(8) * t202;
t228 = t101 * t148;
t188 = pkin(3) * t198;
t125 = t188 + qJD(5);
t133 = t147 * pkin(3) + qJ(5);
t224 = t125 * t146 + t133 * t214;
t223 = qJ(5) * t214 + qJD(5) * t146;
t217 = qJD(3) * t152;
t215 = qJD(6) * t146;
t213 = qJD(6) * t244;
t212 = -0.2e1 * pkin(2) * qJD(3);
t139 = pkin(3) * t219;
t138 = pkin(3) * t216;
t211 = t146 * t233;
t209 = t150 * t226;
t137 = -t151 * pkin(3) - pkin(2);
t142 = t145 ^ 2;
t206 = t142 * t220;
t205 = t148 * t217;
t204 = t152 * t216;
t136 = -t241 * pkin(3) - pkin(4);
t132 = -pkin(11) + t136;
t203 = t132 * t214;
t200 = t146 * t214;
t12 = -t147 * t37 - t62 * t198 - t57 * t216 + t241 * t34;
t77 = t241 * t102 - t166;
t191 = t77 * t138;
t190 = pkin(4) * t126;
t189 = t150 * t138;
t186 = t149 * t206;
t184 = -t147 * t62 + t241 * t57;
t30 = pkin(4) * t226 - t184;
t20 = t77 * pkin(5) + pkin(11) * t226 + t30;
t95 = -t230 * pkin(2) + pkin(8) * t227 - t152 * t207;
t78 = pkin(3) * t168 + t95;
t155 = -t77 * qJ(5) + t78;
t26 = t244 * t76 + t155;
t14 = t146 * t20 + t150 * t26;
t66 = t146 * t76 - t209;
t180 = t146 * t65 + t150 * t66;
t177 = -t110 * qJ(5) + t137;
t69 = t244 * t109 + t177;
t74 = t110 * pkin(5) + t85;
t44 = t146 * t74 + t150 * t69;
t179 = -qJ(5) * t84 - qJD(5) * t109;
t174 = t77 * t214 - t235;
t27 = -t150 * t41 - t77 * t215;
t83 = t246 * t225 + (-t199 - t198) * t151;
t173 = t110 * t214 - t146 * t83;
t67 = -t110 * t215 - t150 * t83;
t172 = t83 * qJ(5) - t110 * qJD(5) + t139;
t171 = qJD(6) * (qJ(5) * t109 + t110 * t244);
t170 = qJD(6) * (t109 * t133 - t110 * t132);
t70 = t208 * pkin(3) + t101;
t169 = t148 * t221 - t151 * t217;
t167 = t244 * t83 + t179;
t164 = -t125 * t109 + t110 * t138 - t133 * t84;
t163 = t244 * t84 + t172;
t161 = -t41 * pkin(5) - t244 * t126 - t12;
t160 = t41 * qJ(5) - t77 * qJD(5) + t70;
t159 = -t132 * t83 + t164;
t157 = t244 * t42 + t160;
t156 = -t83 * pkin(5) + t64;
t141 = qJD(5) * t150;
t124 = -0.2e1 * t200;
t113 = t125 * t150;
t111 = -0.2e1 * t186;
t108 = 0.2e1 * t192;
t107 = t109 ^ 2;
t79 = t109 * pkin(4) + t177;
t73 = -0.2e1 * t110 * t83;
t56 = -t109 * t192 + t211;
t52 = t84 * pkin(4) + t172;
t51 = -0.4e1 * t109 * t200 - t222 * t84;
t49 = -t236 * qJD(3) + t195;
t43 = -t146 * t69 + t150 * t74;
t39 = t76 * pkin(4) + t155;
t31 = -0.2e1 * t77 * t41;
t24 = -qJD(6) * t209 - t150 * t42 + (qJD(6) * t76 + t126) * t146;
t23 = -t41 * t110 - t77 * t83;
t18 = -t66 * t215 + t231;
t17 = t42 * pkin(4) + t160;
t16 = -qJD(6) * t44 - t146 * t163 + t150 * t156;
t15 = -t146 * t156 - t150 * t163 - t74 * t214 + t69 * t215;
t13 = -t146 * t26 + t150 * t20;
t10 = -t190 - t12;
t7 = -qJD(6) * t180 - t150 * t24 - t232;
t2 = -qJD(6) * t14 - t146 * t157 + t150 * t161;
t1 = -t146 * t161 - t150 * t157 - t20 * t214 + t26 * t215;
t3 = [0, 0, 0, 0.2e1 * t186, 0.2e1 * (-t149 ^ 2 + t152 ^ 2) * t142 * qJD(2), t181 * t245, -0.2e1 * t145 * t182, 0, -0.2e1 * t142 * pkin(1) * t221 - 0.2e1 * t101 * t230, -0.2e1 * pkin(1) * t206 + 0.2e1 * t100 * t230, 0.2e1 * t102 * t158, -0.2e1 * t102 * t208 - 0.2e1 * t158 * t168 (-t151 * t152 * t193 + t102 * t221 - (-t149 * t219 + t151 * t220) * t226) * t245, -0.2e1 * t168 * t126 + 0.2e1 * t208 * t226, t111, -0.2e1 * t101 * t196 + 0.2e1 * t95 * t208 + 0.2e1 * (-t49 * t152 + (qJD(2) * t197 + t228) * t149) * t145, 0.2e1 * t101 * t102 - 0.2e1 * t236 * t126 + 0.2e1 * t95 * t158 - 0.2e1 * t48 * t226, t31, 0.2e1 * t41 * t76 - 0.2e1 * t77 * t42 (t152 * t41 + t77 * t221) * t245 (t152 * t42 - t76 * t221) * t245, t111, 0.2e1 * t78 * t42 + 0.2e1 * t70 * t76 + 0.2e1 * (-t12 * t152 + t184 * t221) * t145, -0.2e1 * t78 * t41 + 0.2e1 * t70 * t77 + 0.2e1 * (-t11 * t152 - t237 * t221) * t145, 0.2e1 * t10 * t77 + 0.2e1 * t29 * t42 - 0.2e1 * t30 * t41 + 0.2e1 * t8 * t76, -0.2e1 * t17 * t76 - 0.2e1 * t39 * t42 + 0.2e1 * (-t10 * t152 + t30 * t221) * t145, -0.2e1 * t17 * t77 + 0.2e1 * t39 * t41 + 0.2e1 * (t152 * t8 - t29 * t221) * t145, 0.2e1 * t30 * t10 + 0.2e1 * t39 * t17 + 0.2e1 * t29 * t8, 0.2e1 * t66 * t25, -0.2e1 * t66 * t24 + 0.2e1 * t25 * t65, 0.2e1 * t25 * t77 - 0.2e1 * t66 * t41, -0.2e1 * t24 * t77 - 0.2e1 * t65 * t41, t31, -0.2e1 * t13 * t41 + 0.2e1 * t2 * t77 + 0.2e1 * t22 * t24 - 0.2e1 * t6 * t65, 0.2e1 * t1 * t77 + 0.2e1 * t14 * t41 + 0.2e1 * t22 * t25 + 0.2e1 * t6 * t66; 0, 0, 0, 0, 0, t202, -t126, 0, -t101, t100, t148 * t185 + (t102 * t151 - t148 * t168) * qJD(3), -t102 * t219 - t148 * t208 + (t158 - t165) * t151, t169 * t145 (t151 * t221 + t205) * t145, 0, -pkin(2) * t208 - t101 * t151 - t169 * t239 + t95 * t219, -pkin(9) * t126 * t151 - pkin(2) * t158 - t205 * t239 + t95 * t218 + t228, t23, t41 * t109 - t110 * t42 + t83 * t76 - t77 * t84 (t110 * t221 + t152 * t83) * t145 (-t109 * t221 + t152 * t84) * t145, 0, t70 * t109 + t137 * t42 + t76 * t139 + t78 * t84 - t248, t70 * t110 - t137 * t41 + t77 * t139 - t78 * t83 - t247, t10 * t110 + t8 * t109 + t29 * t84 - t30 * t83 - t85 * t41 - t86 * t42 + t63 * t76 + t64 * t77, -t17 * t109 - t39 * t84 - t79 * t42 - t52 * t76 + t248, -t17 * t110 + t39 * t83 + t79 * t41 - t52 * t77 + t247, t10 * t85 + t17 * t79 + t29 * t63 + t30 * t64 + t39 * t52 - t8 * t86, t66 * t234 + (t214 * t66 + t232) * t109, t180 * t84 + (-t146 * t24 + t231 + (-t146 * t66 + t150 * t65) * qJD(6)) * t109, t109 * t174 + t25 * t110 + t234 * t77 - t66 * t83, t109 * t27 - t24 * t110 + t233 * t77 - t65 * t83, t23, -t22 * t233 + t2 * t110 - t13 * t83 + t16 * t77 + t75 * t24 - t43 * t41 - t50 * t65 + (t215 * t22 - t5) * t109, t1 * t110 + t242 * t109 + t14 * t83 + t15 * t77 + t22 * t234 + t75 * t25 + t44 * t41 + t50 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t148 * t218, 0.2e1 * (-t148 ^ 2 + t151 ^ 2) * qJD(3), 0, 0, 0, t148 * t212, t151 * t212, t73, 0.2e1 * t83 * t109 - 0.2e1 * t110 * t84, 0, 0, 0, 0.2e1 * t109 * t139 + 0.2e1 * t137 * t84, 0.2e1 * t110 * t139 - 0.2e1 * t137 * t83, 0.2e1 * t63 * t109 + 0.2e1 * t64 * t110 - 0.2e1 * t85 * t83 - 0.2e1 * t86 * t84, -0.2e1 * t52 * t109 - 0.2e1 * t79 * t84, -0.2e1 * t52 * t110 + 0.2e1 * t79 * t83, 0.2e1 * t79 * t52 - 0.2e1 * t86 * t63 + 0.2e1 * t85 * t64, 0.2e1 * t143 * t109 * t84 + 0.2e1 * t107 * t200, -0.2e1 * t107 * t192 + 0.4e1 * t109 * t211, 0.2e1 * t109 * t173 + 0.2e1 * t110 * t234, 0.2e1 * t109 * t67 + 0.2e1 * t110 * t233, t73, -0.2e1 * t75 * t233 + 0.2e1 * t16 * t110 - 0.2e1 * t43 * t83 + 0.2e1 * (t215 * t75 - t47) * t109, 0.2e1 * t109 * t238 + 0.2e1 * t15 * t110 + 0.2e1 * t234 * t75 + 0.2e1 * t44 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, -t208, t126, t49, t48, 0, 0, -t41, -t42, t126 (t241 * t221 + t204) * t240 + t12 (-t147 * t221 + t152 * t198) * t240 + t11, -t125 * t76 - t133 * t42 - t136 * t41 + t191 (-pkin(3) * t204 + (-pkin(4) + t136) * t221) * t145 - t12 (t133 * t221 + (-qJD(5) - t125) * t152) * t145 + t183, t10 * t136 - t29 * t125 - t8 * t133 + t30 * t138, t18, t7, t27, -t174, 0, -t125 * t65 + t132 * t27 + t133 * t24 + t189 * t77 + t242, -t77 * t203 + t125 * t66 + t133 * t25 + t5 + (-qJD(6) * t22 + t132 * t41 - t191) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, -t219, 0, -pkin(9) * t218, pkin(9) * t219, 0, 0, -t83, -t84, 0, -t64, t63, -t136 * t83 + t164, t64, -t63, t86 * t125 - t63 * t133 + t64 * t136 + t85 * t138, t56, t51, t67, -t173, 0, t146 * t170 + t150 * t159 + t238, t47 + t150 * t170 + (-t159 - t229) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t138, -0.2e1 * t188, 0, 0.2e1 * t138, 0.2e1 * t125, 0.2e1 * t133 * t125 + 0.2e1 * t136 * t138, t124, t108, 0, 0, 0, 0.2e1 * t224, -0.2e1 * t133 * t215 + 0.2e1 * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t42, t126, t12, t11, pkin(4) * t41 - qJ(5) * t42 - qJD(5) * t76, -0.2e1 * t190 - t12, -t11 + 0.2e1 * t120 - 0.2e1 * t201, -t10 * pkin(4) - t8 * qJ(5) - t29 * qJD(5), t18, t7, t27, -t174, 0, qJ(5) * t24 - qJD(5) * t65 - t244 * t27 + t242, -t244 * t235 + qJ(5) * t25 + qJD(5) * t66 + t5 + (t150 * t244 * t77 - t146 * t22) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, -t84, 0, -t64, t63, pkin(4) * t83 + t179, t64, -t63, -t64 * pkin(4) - t63 * qJ(5) + t86 * qJD(5), t56, t51, t67, -t173, 0, t146 * t171 + t150 * t167 + t238, t47 + t150 * t171 + (-t167 - t229) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, -t188, 0, t138, t154 + t188, -pkin(4) * t138 + t125 * qJ(5) + t133 * qJD(5), t124, t108, 0, 0, 0, t223 + t224, t113 + t141 + (-qJ(5) - t133) * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, qJ(5) * t154, t124, t108, 0, 0, 0, 0.2e1 * t223, -0.2e1 * qJ(5) * t215 + 0.2e1 * t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t126, 0, t10, 0, 0, 0, 0, 0, t27, -t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, 0, 0, t64, 0, 0, 0, 0, 0, t67, -t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, -t24, -t41, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109 * t214 + t234, -t109 * t215 + t233, -t83, t16, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t214, 0, -t132 * t215 + t189, -t138 * t146 - t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t214, 0, t146 * t213, t150 * t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
