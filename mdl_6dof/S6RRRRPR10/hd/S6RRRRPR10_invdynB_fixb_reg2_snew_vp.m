% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 23:04
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 23:00:11
% EndTime: 2019-05-07 23:01:55
% DurationCPUTime: 72.93s
% Computational Cost: add. (357833->1003), mult. (770531->1577), div. (0->0), fcn. (626296->12), ass. (0->740)
t1225 = sin(qJ(3));
t1230 = cos(qJ(3));
t1221 = sin(pkin(6));
t1231 = cos(qJ(2));
t1363 = t1221 * t1231;
t1348 = qJD(1) * t1363;
t1206 = -qJD(3) + t1348;
t1198 = -qJD(4) + t1206;
t1197 = t1198 ^ 2;
t1222 = cos(pkin(6));
t1213 = qJD(1) * t1222 + qJD(2);
t1226 = sin(qJ(2));
t1364 = t1221 * t1226;
t1349 = qJD(1) * t1364;
t1175 = t1213 * t1225 + t1230 * t1349;
t1224 = sin(qJ(4));
t1229 = cos(qJ(4));
t1334 = t1213 * t1230 - t1225 * t1349;
t1140 = t1175 * t1224 - t1229 * t1334;
t1415 = t1140 ^ 2;
t1063 = -t1197 - t1415;
t1352 = qJDD(1) * t1221;
t1184 = -qJD(2) * t1349 + t1231 * t1352;
t1178 = -qJDD(3) + t1184;
t1177 = -qJDD(4) + t1178;
t1142 = t1229 * t1175 + t1224 * t1334;
t1375 = t1140 * t1142;
t1242 = t1177 + t1375;
t1431 = t1229 * t1242;
t965 = t1063 * t1224 - t1431;
t1432 = t1224 * t1242;
t967 = t1063 * t1229 + t1432;
t870 = t1225 * t967 + t1230 * t965;
t1498 = pkin(9) * t870;
t873 = t1225 * t965 - t1230 * t967;
t1497 = pkin(9) * t873;
t1414 = t1142 ^ 2;
t1099 = t1414 + t1197;
t1243 = t1177 - t1375;
t1430 = t1243 * t1224;
t1000 = t1099 * t1229 - t1430;
t1429 = t1243 * t1229;
t1001 = t1099 * t1224 + t1429;
t904 = t1000 * t1230 - t1001 * t1225;
t1496 = pkin(9) * t904;
t905 = t1000 * t1225 + t1001 * t1230;
t1495 = pkin(9) * t905;
t1494 = t1221 * t870;
t1493 = t1221 * t904;
t1115 = -t1414 + t1197;
t1008 = t1115 * t1229 - t1432;
t1011 = t1115 * t1224 + t1431;
t915 = t1008 * t1230 - t1011 * t1225;
t1492 = t1221 * t915;
t1114 = t1415 - t1197;
t1010 = t1114 * t1224 - t1429;
t1014 = t1114 * t1229 + t1430;
t917 = t1010 * t1230 + t1014 * t1225;
t1491 = t1221 * t917;
t1490 = t1222 * t870;
t1489 = t1222 * t904;
t1488 = t1222 * t915;
t1487 = t1222 * t917;
t1486 = t1226 * t873;
t1485 = t1226 * t905;
t918 = t1008 * t1225 + t1011 * t1230;
t1484 = t1226 * t918;
t920 = t1010 * t1225 - t1014 * t1230;
t1483 = t1226 * t920;
t1482 = t1231 * t873;
t1481 = t1231 * t905;
t1480 = t1231 * t918;
t1479 = t1231 * t920;
t1478 = -pkin(2) * t904 - pkin(3) * t1000;
t1477 = -pkin(2) * t870 - pkin(3) * t965;
t1475 = pkin(10) * t965;
t1474 = pkin(10) * t967;
t1472 = pkin(10) * t1000;
t1471 = pkin(10) * t1001;
t1412 = -2 * qJD(5);
t1227 = sin(qJ(1));
t1232 = cos(qJ(1));
t1345 = t1226 * t1375;
t1351 = qJDD(1) * t1226;
t1390 = qJD(1) * t1231;
t1183 = (qJD(2) * t1390 + t1351) * t1221;
t1333 = qJDD(1) * t1222 + qJDD(2);
t1125 = t1334 * qJD(3) + t1230 * t1183 + t1225 * t1333;
t1247 = -t1225 * t1183 + t1230 * t1333;
t1240 = t1175 * qJD(3) - t1247;
t1238 = t1229 * t1125 - t1224 * t1240;
t1034 = -t1140 * qJD(4) + t1238;
t1368 = t1198 * t1224;
t1326 = t1229 * t1034 + t1142 * t1368;
t1367 = t1198 * t1229;
t1328 = t1224 * t1034 - t1142 * t1367;
t1418 = -t1225 * t1328 + t1230 * t1326;
t1438 = t1231 * t1418 + t1345;
t1417 = t1225 * t1326 + t1230 * t1328;
t1344 = t1231 * t1375;
t1440 = t1226 * t1418 - t1344;
t1456 = -t1221 * t1417 + t1222 * t1440;
t1470 = -t1227 * t1456 + t1232 * t1438;
t1336 = t1224 * t1125 + t1229 * t1240;
t1033 = qJD(4) * t1142 + t1336;
t1269 = t1033 * t1224 - t1140 * t1367;
t1327 = -t1229 * t1033 - t1140 * t1368;
t1420 = -t1225 * t1327 + t1230 * t1269;
t1437 = t1231 * t1420 - t1345;
t1419 = t1225 * t1269 + t1230 * t1327;
t1439 = t1226 * t1420 + t1344;
t1457 = -t1221 * t1419 + t1222 * t1439;
t1469 = -t1227 * t1457 + t1232 * t1437;
t1468 = t1227 * t1438 + t1232 * t1456;
t1467 = t1227 * t1437 + t1232 * t1457;
t1298 = t1334 * t1175;
t1441 = -t1178 + t1298;
t1466 = t1225 * t1441;
t1463 = t1230 * t1441;
t1120 = t1140 * t1198;
t1427 = t1120 + t1034;
t1409 = pkin(2) * t1231;
t1331 = -pkin(9) * t1226 - t1409;
t1391 = qJD(1) * t1221;
t1182 = t1331 * t1391;
t1209 = g(1) * t1232 + g(2) * t1227;
t1233 = qJD(1) ^ 2;
t1179 = -pkin(1) * t1233 + pkin(8) * t1352 - t1209;
t1208 = t1227 * g(1) - t1232 * g(2);
t1406 = pkin(8) * t1221;
t1246 = qJDD(1) * pkin(1) + t1233 * t1406 + t1208;
t1241 = t1222 * t1246;
t1335 = t1226 * t1179 - t1231 * t1241;
t1413 = t1213 ^ 2;
t1079 = (qJD(1) * t1182 * t1226 + g(3) * t1231) * t1221 - t1333 * pkin(2) - t1413 * pkin(9) + t1335;
t1152 = -pkin(3) * t1206 - pkin(10) * t1175;
t1332 = t1334 ^ 2;
t979 = t1240 * pkin(3) - t1332 * pkin(10) + t1175 * t1152 + t1079;
t1236 = t1033 * pkin(4) - qJ(5) * t1427 + t979;
t1460 = t1142 * t1412 + t1236;
t1459 = t1221 * t1439 + t1222 * t1419;
t1458 = t1221 * t1440 + t1222 * t1417;
t1267 = (t1140 * t1224 + t1142 * t1229) * t1198;
t1268 = (t1140 * t1229 - t1142 * t1224) * t1198;
t1421 = -t1225 * t1267 + t1230 * t1268;
t1422 = t1225 * t1268 + t1230 * t1267;
t1434 = -t1221 * t1422 + (t1177 * t1231 + t1226 * t1421) * t1222;
t1436 = -t1177 * t1226 + t1231 * t1421;
t1455 = t1227 * t1436 + t1232 * t1434;
t1454 = -t1227 * t1434 + t1232 * t1436;
t1425 = -t1415 - t1414;
t1453 = pkin(2) * t1425;
t1452 = pkin(3) * t1425;
t1223 = sin(qJ(6));
t1030 = qJDD(6) + t1034;
t1228 = cos(qJ(6));
t1107 = -t1228 * t1140 - t1198 * t1223;
t1109 = t1140 * t1223 - t1198 * t1228;
t1045 = t1109 * t1107;
t1428 = -t1045 + t1030;
t1447 = t1223 * t1428;
t1446 = t1226 * t1425;
t1426 = -t1414 + t1415;
t1445 = t1226 * t1426;
t1444 = t1228 * t1428;
t1443 = t1231 * t1425;
t1442 = t1231 * t1426;
t1435 = t1177 * t1363 + t1222 * t1422 + t1364 * t1421;
t1191 = t1213 * t1349;
t1159 = t1184 - t1191;
t1433 = t1222 * t1159;
t989 = t1120 - t1034;
t1160 = t1334 * t1206;
t1094 = -t1125 - t1160;
t1192 = t1213 * t1348;
t1156 = t1192 + t1183;
t1089 = (qJD(3) + t1206) * t1175 - t1247;
t1066 = pkin(4) * t1140 - qJ(5) * t1142;
t1239 = -g(3) * t1364 + t1226 * t1241;
t1080 = t1333 * pkin(9) - t1413 * pkin(2) + (t1182 * t1391 + t1179) * t1231 + t1239;
t1410 = pkin(2) * t1226;
t1330 = -pkin(9) * t1231 + t1410;
t1392 = qJD(1) * t1213;
t1405 = t1222 * g(3);
t1081 = -t1184 * pkin(2) - t1183 * pkin(9) - t1405 + (t1330 * t1392 - t1246) * t1221;
t1003 = t1225 * t1080 - t1230 * t1081;
t929 = pkin(3) * t1441 + pkin(10) * t1094 - t1003;
t1004 = t1230 * t1080 + t1225 * t1081;
t937 = -pkin(3) * t1332 - pkin(10) * t1240 + t1206 * t1152 + t1004;
t841 = t1224 * t937 - t1229 * t929;
t1276 = t1177 * pkin(4) - t1197 * qJ(5) + t1142 * t1066 + qJDD(5) + t841;
t770 = -pkin(5) * t989 + t1242 * pkin(11) + t1276;
t1111 = pkin(5) * t1142 + pkin(11) * t1198;
t1339 = -pkin(4) * t1198 + t1412;
t781 = t1236 - t1415 * pkin(5) + t1033 * pkin(11) + (-t1111 + t1339) * t1142;
t1338 = -t1223 * t781 + t1228 * t770;
t707 = t1223 * t770 + t1228 * t781;
t669 = -t1223 * t1338 + t1228 * t707;
t668 = t1223 * t707 + t1228 * t1338;
t1106 = t1107 ^ 2;
t1416 = t1109 ^ 2;
t1135 = qJD(6) + t1142;
t1133 = t1135 ^ 2;
t1174 = t1175 ^ 2;
t1201 = t1206 ^ 2;
t1411 = pkin(4) + pkin(11);
t1408 = pkin(4) * t1224;
t1407 = pkin(4) * t1229;
t842 = t1224 * t929 + t1229 * t937;
t1404 = t1177 * qJ(5);
t1281 = -t1197 * pkin(4) - t1140 * t1066 + t842;
t776 = -t1404 - t1033 * pkin(5) - t1415 * pkin(11) + (t1412 - t1111) * t1198 + t1281;
t1402 = t1223 * t776;
t946 = t1045 + t1030;
t1401 = t1223 * t946;
t1400 = t1224 * t979;
t766 = t1224 * t842 - t1229 * t841;
t1399 = t1225 * t766;
t1397 = t1228 * t776;
t1396 = t1228 * t946;
t1395 = t1229 * t979;
t1121 = t1198 * t1142;
t982 = t1033 - t1121;
t1394 = t1229 * t982;
t1393 = t1230 * t766;
t1382 = t1079 * t1225;
t1381 = t1079 * t1230;
t1380 = t1107 * t1135;
t1117 = t1298 + t1178;
t1379 = t1117 * t1225;
t1378 = t1117 * t1230;
t1377 = t1135 * t1223;
t1376 = t1135 * t1228;
t1357 = t1231 * t1233;
t1218 = t1221 ^ 2;
t1366 = t1218 * t1226;
t1205 = t1357 * t1366;
t1180 = -t1205 + t1333;
t1372 = t1180 * t1226;
t1371 = t1180 * t1231;
t1181 = t1205 + t1333;
t1370 = t1181 * t1226;
t1369 = t1181 * t1231;
t1365 = t1218 * t1233;
t1361 = t1225 * t1175;
t1162 = t1221 * t1246 + t1405;
t1360 = t1226 * t1162;
t1359 = t1230 * t1175;
t1358 = t1231 * t1162;
t1355 = qJD(4) - t1198;
t1354 = qJD(4) + t1198;
t1219 = t1226 ^ 2;
t1220 = t1231 ^ 2;
t1353 = t1219 + t1220;
t1350 = t1213 * t1391;
t1347 = t1224 * t1045;
t1346 = t1229 * t1045;
t1343 = t1219 * t1365;
t1342 = t1220 * t1365;
t955 = -t1107 * qJD(6) + t1223 * t1033 - t1228 * t1177;
t1341 = -t1133 - t1416;
t1340 = qJ(5) * t1224 + pkin(3);
t767 = t1224 * t841 + t1229 * t842;
t908 = t1003 * t1225 + t1230 * t1004;
t1337 = t1228 * t1033 + t1223 * t1177;
t1166 = -t1208 * t1227 - t1232 * t1209;
t1092 = -t1160 + t1125;
t1203 = qJDD(1) * t1232 - t1227 * t1233;
t1329 = -pkin(7) * t1203 - g(3) * t1227;
t1171 = -t1343 - t1413;
t1144 = -t1171 * t1226 - t1371;
t1325 = pkin(8) * t1144 - t1360;
t1188 = -t1342 - t1413;
t1149 = t1188 * t1231 - t1370;
t1324 = pkin(8) * t1149 + t1358;
t655 = t1224 * t776 - t1229 * t668;
t656 = t1224 * t668 + t1229 * t776;
t621 = -t1225 * t655 + t1230 * t656;
t1323 = t1226 * t621 - t1231 * t669;
t1249 = 0.2e1 * qJD(5) * t1198 - t1281;
t820 = -t1249 - t1404;
t737 = t1224 * t820 - t1229 * t1276;
t738 = t1224 * t1276 + t1229 * t820;
t684 = -t1225 * t737 + t1230 * t738;
t834 = t1142 * t1339 + t1236;
t1322 = t1226 * t684 - t1231 * t834;
t697 = t1230 * t767 - t1399;
t1321 = t1226 * t697 - t1231 * t979;
t1251 = (-qJD(6) + t1135) * t1109 + t1337;
t1279 = t955 + t1380;
t831 = t1223 * t1251 - t1228 * t1279;
t996 = -t1106 - t1416;
t802 = t1224 * t996 - t1229 * t831;
t803 = t1224 * t831 + t1229 * t996;
t721 = -t1225 * t802 + t1230 * t803;
t833 = t1223 * t1279 + t1228 * t1251;
t1320 = t1226 * t721 - t1231 * t833;
t1044 = -t1106 + t1416;
t1280 = t955 - t1380;
t922 = (qJD(6) + t1135) * t1109 - t1337;
t830 = t1223 * t922 - t1228 * t1280;
t814 = t1044 * t1224 + t1229 * t830;
t815 = t1044 * t1229 - t1224 * t830;
t730 = -t1225 * t814 + t1230 * t815;
t832 = t1223 * t1280 + t1228 * t922;
t1319 = t1226 * t730 + t1231 * t832;
t1015 = -t1133 - t1106;
t868 = t1223 * t1015 + t1444;
t818 = t1224 * t922 - t1229 * t868;
t819 = t1224 * t868 + t1229 * t922;
t734 = -t1225 * t818 + t1230 * t819;
t869 = t1015 * t1228 - t1447;
t1318 = t1226 * t734 - t1231 * t869;
t874 = t1228 * t1341 - t1401;
t821 = t1224 * t1280 - t1229 * t874;
t822 = t1224 * t874 + t1229 * t1280;
t736 = -t1225 * t821 + t1230 * t822;
t875 = -t1223 * t1341 - t1396;
t1317 = t1226 * t736 - t1231 * t875;
t1054 = t1106 - t1133;
t897 = -t1054 * t1223 - t1396;
t826 = t1224 * t1251 + t1229 * t897;
t828 = -t1224 * t897 + t1229 * t1251;
t750 = -t1225 * t826 + t1230 * t828;
t899 = -t1054 * t1228 + t1401;
t1316 = t1226 * t750 + t1231 * t899;
t1055 = t1133 - t1416;
t896 = -t1055 * t1228 - t1447;
t827 = t1224 * t1279 + t1229 * t896;
t829 = -t1224 * t896 + t1229 * t1279;
t751 = -t1225 * t827 + t1230 * t829;
t898 = t1055 * t1223 - t1444;
t1315 = t1226 * t751 + t1231 * t898;
t954 = -qJD(6) * t1109 + t1337;
t909 = -t1107 * t1377 - t1228 * t954;
t862 = t1229 * t909 - t1347;
t864 = -t1224 * t909 - t1346;
t788 = -t1225 * t862 + t1230 * t864;
t910 = -t1107 * t1376 + t1223 * t954;
t1314 = t1226 * t788 + t1231 * t910;
t911 = -t1109 * t1376 - t1223 * t955;
t863 = t1229 * t911 + t1347;
t865 = -t1224 * t911 + t1346;
t789 = -t1225 * t863 + t1230 * t865;
t912 = t1109 * t1377 - t1228 * t955;
t1313 = t1226 * t789 + t1231 * t912;
t963 = (t1107 * t1223 + t1109 * t1228) * t1135;
t900 = t1030 * t1224 + t1229 * t963;
t901 = t1030 * t1229 - t1224 * t963;
t825 = -t1225 * t900 + t1230 * t901;
t964 = (t1107 * t1228 - t1109 * t1223) * t1135;
t1312 = t1226 * t825 + t1231 * t964;
t980 = t1142 * t1355 + t1336;
t1311 = -t1231 * t980 - t1486;
t1310 = t1231 * t982 + t1486;
t1309 = -t1231 * t1427 + t1485;
t1237 = -t1140 * t1355 + t1238;
t1308 = t1231 * t1237 - t1485;
t986 = -t1140 * t1354 + t1238;
t1307 = t1231 * t986 + t1484;
t1306 = t1231 * t989 - t1484;
t983 = -t1033 - t1121;
t1305 = t1231 * t983 + t1483;
t981 = t1142 * t1354 + t1336;
t1304 = t1231 * t981 - t1483;
t885 = -t1224 * t981 - t1229 * t986;
t889 = t1224 * t986 - t1229 * t981;
t810 = -t1225 * t885 + t1230 * t889;
t1303 = t1226 * t810 - t1443;
t888 = t1224 * t983 + t1229 * t989;
t892 = -t1224 * t989 + t1229 * t983;
t813 = -t1225 * t888 + t1230 * t892;
t1302 = t1226 * t813 - t1443;
t886 = -t1224 * t980 + t1229 * t1427;
t890 = -t1224 * t1427 - t1229 * t980;
t811 = -t1225 * t886 + t1230 * t890;
t1301 = t1226 * t811 + t1442;
t887 = -t1224 * t982 + t1229 * t1237;
t891 = -t1224 * t1237 - t1394;
t812 = -t1225 * t887 + t1230 * t891;
t1300 = t1226 * t812 + t1442;
t1299 = -t1079 * t1231 + t1226 * t908;
t1297 = -t1222 * t1233 + t1392;
t907 = -t1003 * t1230 + t1004 * t1225;
t1090 = (-qJD(3) + t1206) * t1175 + t1247;
t1018 = t1090 * t1230 - t1092 * t1225;
t1145 = -t1174 + t1332;
t1296 = t1018 * t1226 + t1145 * t1231;
t1019 = -t1089 * t1230 - t1094 * t1225;
t1110 = t1332 + t1174;
t1295 = t1019 * t1226 + t1110 * t1231;
t1128 = -t1201 - t1332;
t1053 = t1128 * t1230 - t1466;
t1294 = t1053 * t1226 + t1090 * t1231;
t1146 = -t1174 - t1201;
t1065 = -t1146 * t1225 + t1378;
t1293 = t1065 * t1226 - t1092 * t1231;
t1154 = -t1174 + t1201;
t1069 = -t1154 * t1225 + t1463;
t1292 = t1069 * t1226 + t1094 * t1231;
t1153 = t1332 - t1201;
t1070 = t1153 * t1230 + t1379;
t1291 = t1070 * t1226 + t1089 * t1231;
t1105 = (-t1230 * t1334 - t1361) * t1206;
t1290 = t1105 * t1226 + t1178 * t1231;
t1129 = g(3) * t1363 + t1335;
t1130 = t1231 * t1179 + t1239;
t1289 = -t1231 * t1129 + t1226 * t1130;
t1062 = t1129 * t1226 + t1130 * t1231;
t1288 = t1156 * t1231 + t1159 * t1226;
t1157 = -t1192 + t1183;
t1158 = t1184 + t1191;
t1287 = -t1157 * t1231 + t1158 * t1226;
t1286 = t1171 * t1231 - t1372;
t1187 = t1342 - t1413;
t1285 = t1187 * t1226 + t1371;
t1186 = -t1343 + t1413;
t1284 = t1186 * t1231 + t1370;
t1283 = t1188 * t1226 + t1369;
t1165 = t1208 * t1232 - t1209 * t1227;
t1282 = t1221 * t1333;
t1271 = t1226 * t1298;
t1270 = t1231 * t1298;
t626 = pkin(5) * t776 - t1411 * t669;
t630 = pkin(5) * t668 - qJ(5) * t669;
t599 = -pkin(3) * t669 + pkin(10) * t656 + t1224 * t630 + t1229 * t626;
t605 = -pkin(10) * t655 - t1224 * t626 + t1229 * t630;
t620 = t1225 * t656 + t1230 * t655;
t590 = -pkin(9) * t620 - t1225 * t599 + t1230 * t605;
t604 = -pkin(2) * t620 - pkin(3) * t655 - qJ(5) * t776 + t1411 * t668;
t612 = t1226 * t669 + t1231 * t621;
t1266 = pkin(8) * t612 + t1226 * t590 + t1231 * t604;
t648 = pkin(5) * t996 - t1411 * t833 - t669;
t754 = pkin(5) * t831 - qJ(5) * t833;
t628 = -pkin(3) * t833 + pkin(10) * t803 + t1224 * t754 + t1229 * t648;
t631 = -pkin(10) * t802 - t1224 * t648 + t1229 * t754;
t720 = t1225 * t803 + t1230 * t802;
t609 = -pkin(9) * t720 - t1225 * t628 + t1230 * t631;
t629 = -pkin(2) * t720 - pkin(3) * t802 - qJ(5) * t996 + t1411 * t831 + t668;
t694 = t1226 * t833 + t1231 * t721;
t1265 = pkin(8) * t694 + t1226 * t609 + t1231 * t629;
t686 = pkin(5) * t868 - qJ(5) * t869 + t1338;
t701 = pkin(5) * t922 - t1411 * t869 + t1397;
t640 = -pkin(3) * t869 + pkin(10) * t819 + t1224 * t686 + t1229 * t701;
t644 = -pkin(10) * t818 - t1224 * t701 + t1229 * t686;
t733 = t1225 * t819 + t1230 * t818;
t614 = -pkin(9) * t733 - t1225 * t640 + t1230 * t644;
t661 = -pkin(2) * t733 - pkin(3) * t818 - qJ(5) * t922 + t1411 * t868 - t1402;
t708 = t1226 * t869 + t1231 * t734;
t1264 = pkin(8) * t708 + t1226 * t614 + t1231 * t661;
t687 = pkin(5) * t874 - qJ(5) * t875 - t707;
t704 = pkin(5) * t1280 - t1411 * t875 - t1402;
t641 = -pkin(3) * t875 + pkin(10) * t822 + t1224 * t687 + t1229 * t704;
t645 = -pkin(10) * t821 - t1224 * t704 + t1229 * t687;
t735 = t1225 * t822 + t1230 * t821;
t615 = -pkin(9) * t735 - t1225 * t641 + t1230 * t645;
t662 = -pkin(2) * t735 - pkin(3) * t821 - qJ(5) * t1280 + t1411 * t874 - t1397;
t709 = t1226 * t875 + t1231 * t736;
t1263 = pkin(8) * t709 + t1226 * t615 + t1231 * t662;
t677 = pkin(10) * t738 + (-t1340 - t1407) * t834;
t683 = t1225 * t738 + t1230 * t737;
t688 = -pkin(10) * t737 + (-qJ(5) * t1229 + t1408) * t834;
t624 = -pkin(9) * t683 - t1225 * t677 + t1230 * t688;
t642 = -pkin(2) * t683 - pkin(3) * t737 + pkin(4) * t1276 - qJ(5) * t820;
t671 = t1226 * t834 + t1231 * t684;
t1262 = pkin(8) * t671 + t1226 * t624 + t1231 * t642;
t796 = -pkin(4) * t1425 + t820;
t797 = -qJ(5) * t1425 + t1276;
t698 = pkin(10) * t889 + t1224 * t797 + t1229 * t796 - t1452;
t705 = -pkin(10) * t885 - t1224 * t796 + t1229 * t797;
t806 = t1225 * t889 + t1230 * t885;
t653 = -pkin(9) * t806 - t1225 * t698 + t1230 * t705;
t728 = -pkin(2) * t806 - pkin(3) * t885 + pkin(4) * t986 + qJ(5) * t981;
t778 = t1231 * t810 + t1446;
t1261 = pkin(8) * t778 + t1226 * t653 + t1231 * t728;
t696 = t1225 * t767 + t1393;
t753 = -pkin(3) * t979 + pkin(10) * t767;
t659 = -pkin(9) * t696 - pkin(10) * t1393 - t1225 * t753;
t672 = -pkin(2) * t696 - pkin(3) * t766;
t693 = t1226 * t979 + t1231 * t697;
t1260 = pkin(8) * t693 + t1226 * t659 + t1231 * t672;
t719 = pkin(10) * t892 - t1452 + t767;
t731 = -pkin(10) * t888 - t766;
t809 = t1225 * t892 + t1230 * t888;
t665 = -pkin(9) * t809 - t1225 * t719 + t1230 * t731;
t763 = -pkin(2) * t809 - pkin(3) * t888;
t779 = t1231 * t813 + t1446;
t1259 = pkin(8) * t779 + t1226 * t665 + t1231 * t763;
t805 = (t982 - t1121) * pkin(4) + t1460;
t745 = t1229 * t805 + t1340 * t982 - t1474;
t758 = qJ(5) * t1394 - t1224 * t805 + t1475;
t682 = -t1225 * t745 + t1230 * t758 + t1498;
t732 = -pkin(4) * t1242 + qJ(5) * t1063 - t1276 - t1477;
t836 = -t1226 * t982 + t1482;
t1258 = pkin(8) * t836 + t1226 * t682 + t1231 * t732;
t804 = pkin(4) * t1121 + qJ(5) * t1237 - t1460;
t752 = -t1471 + t1224 * t804 + (pkin(3) + t1407) * t1237;
t762 = t1229 * t804 - t1237 * t1408 - t1472;
t685 = -t1225 * t752 + t1230 * t762 - t1496;
t744 = -pkin(4) * t1099 + (t1243 + t1177) * qJ(5) + t1249 + t1478;
t846 = -t1226 * t1237 - t1481;
t1257 = pkin(8) * t846 + t1226 * t685 + t1231 * t744;
t837 = -pkin(3) * t980 - t1395 + t1474;
t884 = t1400 - t1475;
t746 = -t1225 * t837 + t1230 * t884 - t1498;
t764 = t1477 + t841;
t835 = t1226 * t980 - t1482;
t1256 = pkin(8) * t835 + t1226 * t746 + t1231 * t764;
t843 = -pkin(3) * t1427 + t1400 + t1471;
t895 = t1395 + t1472;
t755 = -t1225 * t843 + t1230 * t895 + t1496;
t768 = -t1478 + t842;
t845 = t1226 * t1427 + t1481;
t1255 = pkin(8) * t845 + t1226 * t755 + t1231 * t768;
t1052 = t1128 * t1225 + t1463;
t936 = -pkin(2) * t1052 + t1003;
t990 = -pkin(9) * t1052 + t1382;
t993 = t1053 * t1231 - t1090 * t1226;
t1254 = pkin(8) * t993 + t1226 * t990 + t1231 * t936;
t1064 = t1146 * t1230 + t1379;
t940 = -pkin(2) * t1064 + t1004;
t994 = -pkin(9) * t1064 + t1381;
t995 = t1065 * t1231 + t1092 * t1226;
t1253 = pkin(8) * t995 + t1226 * t994 + t1231 * t940;
t1101 = t1157 * t1226 + t1158 * t1231;
t1252 = pkin(8) * t1101 + t1062;
t1017 = -t1089 * t1225 + t1094 * t1230;
t855 = -pkin(9) * t1017 - t907;
t960 = t1019 * t1231 - t1110 * t1226;
t1250 = pkin(8) * t960 - t1017 * t1409 + t1226 * t855;
t866 = t1079 * t1226 + t1231 * t908;
t1248 = pkin(8) * t866 + t1331 * t907;
t1084 = t1160 * t1230 + t1225 * t1240;
t1245 = t1226 * t1084 - t1270;
t1086 = t1125 * t1230 + t1206 * t1361;
t1244 = t1226 * t1086 + t1270;
t1217 = t1221 * t1218;
t1202 = qJDD(1) * t1227 + t1232 * t1233;
t1190 = t1353 * t1365;
t1189 = (t1219 - t1220) * t1365;
t1185 = -pkin(7) * t1202 + g(3) * t1232;
t1161 = t1353 * t1350;
t1155 = (t1351 + (qJD(2) + t1213) * t1390) * t1221;
t1151 = t1183 * t1231 - t1219 * t1350;
t1150 = -t1184 * t1226 - t1220 * t1350;
t1148 = t1187 * t1231 - t1372;
t1147 = -t1186 * t1226 + t1369;
t1127 = (t1156 * t1222 + t1217 * t1357) * t1226;
t1126 = (-t1217 * t1226 * t1233 + t1433) * t1231;
t1104 = (-t1225 * t1334 + t1359) * t1206;
t1102 = -t1156 * t1226 + t1159 * t1231;
t1098 = t1221 * t1159 + t1222 * t1283;
t1097 = -t1221 * t1158 + t1222 * t1285;
t1096 = -t1221 * t1157 + t1222 * t1284;
t1095 = t1221 * t1283 - t1433;
t1088 = -t1221 * t1155 + t1222 * t1286;
t1087 = t1222 * t1155 + t1221 * t1286;
t1085 = t1125 * t1225 - t1206 * t1359;
t1083 = t1160 * t1225 - t1230 * t1240;
t1082 = t1105 * t1231 - t1178 * t1226;
t1078 = -t1221 * t1189 + t1222 * t1288;
t1077 = t1221 * t1190 + t1222 * t1287;
t1076 = -t1222 * t1190 + t1221 * t1287;
t1068 = t1153 * t1225 - t1378;
t1067 = t1154 * t1230 + t1466;
t1047 = -t1098 * t1227 + t1149 * t1232;
t1046 = t1098 * t1232 + t1149 * t1227;
t1043 = t1231 * t1086 - t1271;
t1042 = t1231 * t1084 + t1271;
t1041 = -t1088 * t1227 + t1144 * t1232;
t1040 = t1088 * t1232 + t1144 * t1227;
t1039 = t1221 * t1162 + t1222 * t1289;
t1038 = -t1222 * t1162 + t1221 * t1289;
t1023 = -t1221 * t1104 + t1222 * t1290;
t1021 = -t1077 * t1227 + t1101 * t1232;
t1020 = t1077 * t1232 + t1101 * t1227;
t1016 = t1090 * t1225 + t1092 * t1230;
t1006 = t1070 * t1231 - t1089 * t1226;
t1005 = t1069 * t1231 - t1094 * t1226;
t997 = -t1360 + (-t1095 * t1221 - t1098 * t1222) * pkin(8);
t992 = -t1358 + (-t1087 * t1221 - t1088 * t1222) * pkin(8);
t991 = -pkin(1) * t1095 + t1221 * t1129 + t1222 * t1324;
t978 = t1018 * t1231 - t1145 * t1226;
t977 = -pkin(1) * t1087 + t1221 * t1130 + t1222 * t1325;
t962 = -t1221 * t1085 + t1222 * t1244;
t961 = -t1221 * t1083 + t1222 * t1245;
t953 = pkin(8) * t1062 * t1222 - pkin(1) * t1038;
t952 = -t1039 * t1227 + t1062 * t1232;
t951 = t1039 * t1232 + t1062 * t1227;
t948 = -pkin(1) * t1076 + t1222 * t1252;
t947 = -pkin(2) * t1092 + pkin(9) * t1065 + t1382;
t944 = -t1221 * t1068 + t1222 * t1291;
t943 = -t1221 * t1067 + t1222 * t1292;
t942 = (-t1038 * t1221 - t1039 * t1222) * pkin(8);
t939 = pkin(2) * t1090 + pkin(9) * t1053 - t1381;
t938 = (-t1076 * t1221 - t1077 * t1222) * pkin(8) - t1289;
t933 = -t1221 * t1064 + t1222 * t1293;
t932 = t1222 * t1064 + t1221 * t1293;
t931 = -t1221 * t1052 + t1222 * t1294;
t930 = t1222 * t1052 + t1221 * t1294;
t902 = -t1221 * t1016 + t1222 * t1296;
t894 = -t1221 * t1017 + t1222 * t1295;
t893 = t1222 * t1017 + t1221 * t1295;
t867 = -pkin(2) * t1079 + pkin(9) * t908;
t861 = -t1227 * t933 + t1232 * t995;
t860 = t1227 * t995 + t1232 * t933;
t857 = -t1227 * t931 + t1232 * t993;
t856 = t1227 * t993 + t1232 * t931;
t850 = -t1226 * t981 - t1479;
t849 = -t1226 * t983 + t1479;
t848 = -t1226 * t989 - t1480;
t847 = -t1226 * t986 + t1480;
t844 = pkin(2) * t1110 + pkin(9) * t1019 + t908;
t839 = -t1227 * t894 + t1232 * t960;
t838 = t1227 * t960 + t1232 * t894;
t824 = t1225 * t901 + t1230 * t900;
t817 = -t1221 * t907 + t1222 * t1299;
t816 = t1221 * t1299 + t1222 * t907;
t808 = t1225 * t891 + t1230 * t887;
t807 = t1225 * t890 + t1230 * t886;
t801 = t1222 * t1304 - t1491;
t800 = t1222 * t1305 + t1491;
t799 = t1222 * t1306 - t1492;
t798 = t1222 * t1307 + t1492;
t795 = t1231 * t812 - t1445;
t794 = t1231 * t811 - t1445;
t793 = t1222 * t1308 - t1493;
t792 = t1222 * t1309 + t1493;
t791 = t1221 * t1308 + t1489;
t790 = t1221 * t1309 - t1489;
t787 = t1225 * t865 + t1230 * t863;
t786 = t1225 * t864 + t1230 * t862;
t777 = -t1226 * t964 + t1231 * t825;
t775 = -t1226 * t940 + t1231 * t994 + (-t1221 * t932 - t1222 * t933) * pkin(8);
t774 = t1222 * t1310 + t1494;
t773 = t1222 * t1311 - t1494;
t772 = t1221 * t1310 - t1490;
t771 = t1221 * t1311 + t1490;
t769 = -t1226 * t936 + t1231 * t990 + (-t1221 * t930 - t1222 * t931) * pkin(8);
t765 = -pkin(1) * t932 - t1221 * t947 + t1222 * t1253;
t761 = -t1227 * t817 + t1232 * t866;
t760 = t1227 * t866 + t1232 * t817;
t759 = -pkin(1) * t930 - t1221 * t939 + t1222 * t1254;
t757 = -t1226 * t912 + t1231 * t789;
t756 = -t1226 * t910 + t1231 * t788;
t749 = t1225 * t829 + t1230 * t827;
t748 = t1225 * t828 + t1230 * t826;
t747 = t1017 * t1410 + t1231 * t855 + (-t1221 * t893 - t1222 * t894) * pkin(8);
t743 = -t1227 * t793 + t1232 * t846;
t742 = -t1227 * t792 + t1232 * t845;
t741 = t1227 * t846 + t1232 * t793;
t740 = t1227 * t845 + t1232 * t792;
t739 = -pkin(2) * t1427 + t1225 * t895 + t1230 * t843 + t1495;
t729 = t1225 * t815 + t1230 * t814;
t727 = -pkin(2) * t980 + t1225 * t884 + t1230 * t837 - t1497;
t726 = -t1227 * t774 + t1232 * t836;
t725 = -t1227 * t773 + t1232 * t835;
t724 = t1227 * t836 + t1232 * t774;
t723 = t1227 * t835 + t1232 * t773;
t722 = -t1221 * t824 + t1222 * t1312;
t718 = -t1221 * t808 + t1222 * t1300;
t717 = -t1221 * t807 + t1222 * t1301;
t716 = -t1221 * t809 + t1222 * t1302;
t715 = -t1221 * t806 + t1222 * t1303;
t714 = t1221 * t1302 + t1222 * t809;
t713 = t1221 * t1303 + t1222 * t806;
t712 = -t1226 * t898 + t1231 * t751;
t711 = -t1226 * t899 + t1231 * t750;
t710 = -pkin(1) * t893 - t1221 * t844 + t1222 * t1250;
t703 = -t1221 * t787 + t1222 * t1313;
t702 = -t1221 * t786 + t1222 * t1314;
t700 = -t1226 * t832 + t1231 * t730;
t699 = t1330 * t907 + (-t1221 * t816 - t1222 * t817) * pkin(8);
t695 = -pkin(1) * t816 - t1221 * t867 + t1222 * t1248;
t692 = -t1227 * t716 + t1232 * t779;
t691 = -t1227 * t715 + t1232 * t778;
t690 = t1227 * t779 + t1232 * t716;
t689 = t1227 * t778 + t1232 * t715;
t681 = pkin(2) * t1237 + t1225 * t762 + t1230 * t752 - t1495;
t680 = -t1221 * t749 + t1222 * t1315;
t679 = -t1221 * t748 + t1222 * t1316;
t678 = pkin(2) * t982 + t1225 * t758 + t1230 * t745 + t1497;
t676 = -t1221 * t735 + t1222 * t1317;
t675 = t1221 * t1317 + t1222 * t735;
t674 = -t1221 * t733 + t1222 * t1318;
t673 = t1221 * t1318 + t1222 * t733;
t670 = -t1221 * t729 + t1222 * t1319;
t667 = -t1221 * t720 + t1222 * t1320;
t666 = t1221 * t1320 + t1222 * t720;
t664 = pkin(9) * t813 + t1225 * t731 + t1230 * t719 - t1453;
t663 = -t1226 * t768 + t1231 * t755 + (-t1221 * t790 - t1222 * t792) * pkin(8);
t660 = -t1226 * t764 + t1231 * t746 + (-t1221 * t771 - t1222 * t773) * pkin(8);
t658 = -t1221 * t696 + t1222 * t1321;
t657 = t1221 * t1321 + t1222 * t696;
t654 = -pkin(2) * t979 + pkin(9) * t697 - pkin(10) * t1399 + t1230 * t753;
t652 = -t1227 * t676 + t1232 * t709;
t651 = t1227 * t709 + t1232 * t676;
t650 = -pkin(1) * t790 - t1221 * t739 + t1222 * t1255;
t649 = pkin(9) * t810 + t1225 * t705 + t1230 * t698 - t1453;
t647 = -t1227 * t674 + t1232 * t708;
t646 = t1227 * t708 + t1232 * t674;
t643 = -pkin(1) * t771 - t1221 * t727 + t1222 * t1256;
t639 = -t1226 * t744 + t1231 * t685 + (-t1221 * t791 - t1222 * t793) * pkin(8);
t638 = -t1227 * t667 + t1232 * t694;
t637 = t1227 * t694 + t1232 * t667;
t636 = -t1221 * t683 + t1222 * t1322;
t635 = t1221 * t1322 + t1222 * t683;
t634 = -t1226 * t732 + t1231 * t682 + (-t1221 * t772 - t1222 * t774) * pkin(8);
t633 = -t1227 * t658 + t1232 * t693;
t632 = t1227 * t693 + t1232 * t658;
t627 = -t1226 * t763 + t1231 * t665 + (-t1221 * t714 - t1222 * t716) * pkin(8);
t625 = -pkin(1) * t791 - t1221 * t681 + t1222 * t1257;
t623 = -pkin(1) * t772 - t1221 * t678 + t1222 * t1258;
t622 = -pkin(2) * t834 + pkin(9) * t684 + t1225 * t688 + t1230 * t677;
t619 = -t1227 * t636 + t1232 * t671;
t618 = t1227 * t671 + t1232 * t636;
t617 = -t1226 * t728 + t1231 * t653 + (-t1221 * t713 - t1222 * t715) * pkin(8);
t616 = -pkin(1) * t714 - t1221 * t664 + t1222 * t1259;
t613 = -pkin(2) * t875 + pkin(9) * t736 + t1225 * t645 + t1230 * t641;
t611 = -pkin(2) * t869 + pkin(9) * t734 + t1225 * t644 + t1230 * t640;
t610 = -pkin(1) * t713 - t1221 * t649 + t1222 * t1261;
t608 = -t1226 * t672 + t1231 * t659 + (-t1221 * t657 - t1222 * t658) * pkin(8);
t607 = -pkin(2) * t833 + pkin(9) * t721 + t1225 * t631 + t1230 * t628;
t606 = -pkin(1) * t657 - t1221 * t654 + t1222 * t1260;
t603 = -t1221 * t620 + t1222 * t1323;
t602 = t1221 * t1323 + t1222 * t620;
t601 = -t1226 * t662 + t1231 * t615 + (-t1221 * t675 - t1222 * t676) * pkin(8);
t600 = -t1226 * t661 + t1231 * t614 + (-t1221 * t673 - t1222 * t674) * pkin(8);
t598 = -t1226 * t642 + t1231 * t624 + (-t1221 * t635 - t1222 * t636) * pkin(8);
t597 = -t1226 * t629 + t1231 * t609 + (-t1221 * t666 - t1222 * t667) * pkin(8);
t596 = -pkin(1) * t635 - t1221 * t622 + t1222 * t1262;
t595 = -pkin(1) * t675 - t1221 * t613 + t1222 * t1263;
t594 = -pkin(1) * t673 - t1221 * t611 + t1222 * t1264;
t593 = -t1227 * t603 + t1232 * t612;
t592 = t1227 * t612 + t1232 * t603;
t591 = -pkin(1) * t666 - t1221 * t607 + t1222 * t1265;
t589 = -pkin(2) * t669 + pkin(9) * t621 + t1225 * t605 + t1230 * t599;
t588 = -t1226 * t604 + t1231 * t590 + (-t1221 * t602 - t1222 * t603) * pkin(8);
t587 = -pkin(1) * t602 - t1221 * t589 + t1222 * t1266;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1202, -t1203, 0, t1166, 0, 0, 0, 0, 0, 0, t1047, t1041, t1021, t952, 0, 0, 0, 0, 0, 0, t857, t861, t839, t761, 0, 0, 0, 0, 0, 0, t725, t742, t692, t633, 0, 0, 0, 0, 0, 0, t691, t726, t743, t619, 0, 0, 0, 0, 0, 0, t647, t652, t638, t593; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1203, -t1202, 0, t1165, 0, 0, 0, 0, 0, 0, t1046, t1040, t1020, t951, 0, 0, 0, 0, 0, 0, t856, t860, t838, t760, 0, 0, 0, 0, 0, 0, t723, t740, t690, t632, 0, 0, 0, 0, 0, 0, t689, t724, t741, t618, 0, 0, 0, 0, 0, 0, t646, t651, t637, t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1095, t1087, t1076, t1038, 0, 0, 0, 0, 0, 0, t930, t932, t893, t816, 0, 0, 0, 0, 0, 0, t771, t790, t714, t657, 0, 0, 0, 0, 0, 0, t713, t772, t791, t635, 0, 0, 0, 0, 0, 0, t673, t675, t666, t602; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1203, 0, -t1202, 0, t1329, -t1185, -t1165, -pkin(7) * t1165, -t1127 * t1227 + t1151 * t1232, -t1078 * t1227 + t1102 * t1232, -t1096 * t1227 + t1147 * t1232, -t1126 * t1227 + t1150 * t1232, -t1097 * t1227 + t1148 * t1232, t1232 * t1161 + t1227 * t1282, -pkin(7) * t1046 - t1227 * t991 + t1232 * t997, -pkin(7) * t1040 - t1227 * t977 + t1232 * t992, -pkin(7) * t1020 - t1227 * t948 + t1232 * t938, -pkin(7) * t951 - t1227 * t953 + t1232 * t942, t1043 * t1232 - t1227 * t962, -t1227 * t902 + t1232 * t978, t1005 * t1232 - t1227 * t943, t1042 * t1232 - t1227 * t961, t1006 * t1232 - t1227 * t944, -t1023 * t1227 + t1082 * t1232, -pkin(7) * t856 - t1227 * t759 + t1232 * t769, -pkin(7) * t860 - t1227 * t765 + t1232 * t775, -pkin(7) * t838 - t1227 * t710 + t1232 * t747, -pkin(7) * t760 - t1227 * t695 + t1232 * t699, t1470, -t1227 * t717 + t1232 * t794, -t1227 * t799 + t1232 * t848, t1469, -t1227 * t801 + t1232 * t850, t1454, -pkin(7) * t723 - t1227 * t643 + t1232 * t660, -pkin(7) * t740 - t1227 * t650 + t1232 * t663, -pkin(7) * t690 - t1227 * t616 + t1232 * t627, -pkin(7) * t632 - t1227 * t606 + t1232 * t608, t1454, -t1227 * t798 + t1232 * t847, -t1227 * t800 + t1232 * t849, t1470, -t1227 * t718 + t1232 * t795, t1469, -pkin(7) * t689 - t1227 * t610 + t1232 * t617, -pkin(7) * t724 - t1227 * t623 + t1232 * t634, -pkin(7) * t741 - t1227 * t625 + t1232 * t639, -pkin(7) * t618 - t1227 * t596 + t1232 * t598, -t1227 * t703 + t1232 * t757, -t1227 * t670 + t1232 * t700, -t1227 * t680 + t1232 * t712, -t1227 * t702 + t1232 * t756, -t1227 * t679 + t1232 * t711, -t1227 * t722 + t1232 * t777, -pkin(7) * t646 - t1227 * t594 + t1232 * t600, -pkin(7) * t651 - t1227 * t595 + t1232 * t601, -pkin(7) * t637 - t1227 * t591 + t1232 * t597, -pkin(7) * t592 - t1227 * t587 + t1232 * t588; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1202, 0, t1203, 0, t1185, t1329, t1166, pkin(7) * t1166, t1127 * t1232 + t1151 * t1227, t1078 * t1232 + t1102 * t1227, t1096 * t1232 + t1147 * t1227, t1126 * t1232 + t1150 * t1227, t1097 * t1232 + t1148 * t1227, t1227 * t1161 - t1232 * t1282, pkin(7) * t1047 + t1227 * t997 + t1232 * t991, pkin(7) * t1041 + t1227 * t992 + t1232 * t977, pkin(7) * t1021 + t1227 * t938 + t1232 * t948, pkin(7) * t952 + t1227 * t942 + t1232 * t953, t1043 * t1227 + t1232 * t962, t1227 * t978 + t1232 * t902, t1005 * t1227 + t1232 * t943, t1042 * t1227 + t1232 * t961, t1006 * t1227 + t1232 * t944, t1023 * t1232 + t1082 * t1227, pkin(7) * t857 + t1227 * t769 + t1232 * t759, pkin(7) * t861 + t1227 * t775 + t1232 * t765, pkin(7) * t839 + t1227 * t747 + t1232 * t710, pkin(7) * t761 + t1227 * t699 + t1232 * t695, t1468, t1227 * t794 + t1232 * t717, t1227 * t848 + t1232 * t799, t1467, t1227 * t850 + t1232 * t801, t1455, pkin(7) * t725 + t1227 * t660 + t1232 * t643, pkin(7) * t742 + t1227 * t663 + t1232 * t650, pkin(7) * t692 + t1227 * t627 + t1232 * t616, pkin(7) * t633 + t1227 * t608 + t1232 * t606, t1455, t1227 * t847 + t1232 * t798, t1227 * t849 + t1232 * t800, t1468, t1227 * t795 + t1232 * t718, t1467, pkin(7) * t691 + t1227 * t617 + t1232 * t610, pkin(7) * t726 + t1227 * t634 + t1232 * t623, pkin(7) * t743 + t1227 * t639 + t1232 * t625, pkin(7) * t619 + t1227 * t598 + t1232 * t596, t1227 * t757 + t1232 * t703, t1227 * t700 + t1232 * t670, t1227 * t712 + t1232 * t680, t1227 * t756 + t1232 * t702, t1227 * t711 + t1232 * t679, t1227 * t777 + t1232 * t722, pkin(7) * t647 + t1227 * t600 + t1232 * t594, pkin(7) * t652 + t1227 * t601 + t1232 * t595, pkin(7) * t638 + t1227 * t597 + t1232 * t591, pkin(7) * t593 + t1227 * t588 + t1232 * t587; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1208, t1209, 0, 0, (t1218 * t1231 * t1297 + t1183 * t1221) * t1226, t1222 * t1189 + t1221 * t1288, t1222 * t1157 + t1221 * t1284, (t1184 * t1221 - t1297 * t1366) * t1231, t1222 * t1158 + t1221 * t1285, t1222 * t1333, pkin(1) * t1098 - t1222 * t1129 + t1221 * t1324, pkin(1) * t1088 - t1222 * t1130 + t1221 * t1325, pkin(1) * t1077 + t1221 * t1252, pkin(1) * t1039 + t1062 * t1406, t1222 * t1085 + t1221 * t1244, t1222 * t1016 + t1221 * t1296, t1222 * t1067 + t1221 * t1292, t1222 * t1083 + t1221 * t1245, t1222 * t1068 + t1221 * t1291, t1222 * t1104 + t1221 * t1290, pkin(1) * t931 + t1221 * t1254 + t1222 * t939, pkin(1) * t933 + t1221 * t1253 + t1222 * t947, pkin(1) * t894 + t1221 * t1250 + t1222 * t844, pkin(1) * t817 + t1221 * t1248 + t1222 * t867, t1458, t1221 * t1301 + t1222 * t807, t1221 * t1306 + t1488, t1459, t1221 * t1304 + t1487, t1435, pkin(1) * t773 + t1221 * t1256 + t1222 * t727, pkin(1) * t792 + t1221 * t1255 + t1222 * t739, pkin(1) * t716 + t1221 * t1259 + t1222 * t664, pkin(1) * t658 + t1221 * t1260 + t1222 * t654, t1435, t1221 * t1307 - t1488, t1221 * t1305 - t1487, t1458, t1221 * t1300 + t1222 * t808, t1459, pkin(1) * t715 + t1221 * t1261 + t1222 * t649, pkin(1) * t774 + t1221 * t1258 + t1222 * t678, pkin(1) * t793 + t1221 * t1257 + t1222 * t681, pkin(1) * t636 + t1221 * t1262 + t1222 * t622, t1221 * t1313 + t1222 * t787, t1221 * t1319 + t1222 * t729, t1221 * t1315 + t1222 * t749, t1221 * t1314 + t1222 * t786, t1221 * t1316 + t1222 * t748, t1221 * t1312 + t1222 * t824, pkin(1) * t674 + t1221 * t1264 + t1222 * t611, pkin(1) * t676 + t1221 * t1263 + t1222 * t613, pkin(1) * t667 + t1221 * t1265 + t1222 * t607, pkin(1) * t603 + t1221 * t1266 + t1222 * t589;];
tauB_reg  = t1;
