% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP10_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:58:24
% EndTime: 2019-05-06 01:58:56
% DurationCPUTime: 25.28s
% Computational Cost: add. (56664->617), mult. (110890->837), div. (0->0), fcn. (74280->8), ass. (0->435)
t809 = sin(qJ(4));
t813 = cos(qJ(4));
t814 = cos(qJ(3));
t867 = qJD(1) * t814;
t773 = -qJD(3) * t813 + t809 * t867;
t775 = qJD(3) * t809 + t813 * t867;
t808 = sin(qJ(5));
t812 = cos(qJ(5));
t730 = -t773 * t808 + t775 * t812;
t727 = t730 ^ 2;
t810 = sin(qJ(3));
t798 = qJD(1) * t810 + qJD(4);
t792 = qJD(5) + t798;
t912 = t792 ^ 2;
t664 = t912 + t727;
t728 = t812 * t773 + t775 * t808;
t676 = t730 * t728;
t863 = qJD(1) * qJD(3);
t848 = t814 * t863;
t861 = qJDD(1) * t810;
t778 = -t848 - t861;
t771 = qJDD(4) - t778;
t767 = qJDD(5) + t771;
t924 = t676 + t767;
t895 = t924 * t808;
t584 = t664 * t812 + t895;
t894 = t924 * t812;
t610 = t664 * t808 - t894;
t551 = t584 * t809 + t610 * t813;
t849 = t810 * t863;
t859 = qJDD(1) * t814;
t779 = -t849 + t859;
t844 = -t813 * qJDD(3) + t809 * t779;
t722 = -qJD(4) * t775 - t844;
t851 = t773 * qJD(4) - t809 * qJDD(3) - t813 * t779;
t820 = qJD(5) * t728 - t722 * t808 + t812 * t851;
t887 = t728 * t792;
t933 = -t820 - t887;
t506 = t551 * t810 - t814 * t933;
t523 = t584 * t813 - t610 * t809;
t811 = sin(qJ(1));
t815 = cos(qJ(1));
t465 = t506 * t815 + t523 * t811;
t1029 = pkin(6) * t465;
t476 = t506 * t811 - t523 * t815;
t1028 = pkin(6) * t476;
t913 = t728 ^ 2;
t708 = t913 - t912;
t621 = t708 * t808 + t894;
t625 = t708 * t812 - t895;
t560 = t621 * t809 - t625 * t813;
t845 = -t812 * t722 - t808 * t851;
t597 = (qJD(5) - t792) * t730 + t845;
t515 = t560 * t810 - t597 * t814;
t557 = t621 * t813 + t625 * t809;
t1027 = t515 * t811 - t557 * t815;
t1026 = t515 * t815 + t557 * t811;
t596 = (qJD(5) + t792) * t730 + t845;
t538 = -t596 * t808 + t812 * t933;
t899 = t933 * t808;
t542 = -t596 * t812 - t899;
t492 = -t538 * t809 + t542 * t813;
t672 = t727 - t913;
t479 = t492 * t810 - t672 * t814;
t488 = t538 * t813 + t542 * t809;
t1025 = t479 * t811 + t488 * t815;
t1024 = t479 * t815 - t488 * t811;
t911 = pkin(7) + pkin(1);
t1023 = qJ(2) * t523 + t506 * t911;
t508 = t551 * t814 + t810 * t933;
t1022 = pkin(2) * t523 + t508 * t911;
t1021 = -pkin(2) * t506 + pkin(3) * t933 - pkin(8) * t551 + qJ(2) * t508;
t1019 = pkin(8) * t523;
t921 = -t887 + t820;
t952 = -t597 * t812 - t921 * t808;
t953 = -t597 * t808 + t812 * t921;
t968 = t809 * t952 + t813 * t953;
t640 = -t913 - t727;
t969 = -t809 * t953 + t813 * t952;
t986 = -t640 * t814 + t810 * t969;
t1003 = t811 * t968 - t815 * t986;
t1018 = pkin(6) * t1003;
t1005 = t811 * t986 + t815 * t968;
t1017 = pkin(6) * t1005;
t1009 = -pkin(3) * t523 - pkin(4) * t584;
t1007 = t492 * t814 + t672 * t810;
t1006 = t560 * t814 + t597 * t810;
t709 = -t727 + t912;
t925 = -t676 + t767;
t893 = t925 * t808;
t954 = t812 * t709 + t893;
t652 = t812 * t925;
t955 = -t709 * t808 + t652;
t967 = t809 * t955 + t813 * t954;
t966 = -t809 * t954 + t813 * t955;
t987 = -t810 * t966 - t814 * t921;
t1004 = -t811 * t987 + t815 * t967;
t1002 = t811 * t967 + t815 * t987;
t984 = t640 * t810 + t814 * t969;
t1001 = pkin(2) * t968 - t911 * t984;
t1000 = qJ(2) * t968 - t911 * t986;
t999 = pkin(2) * t986 - pkin(3) * t640 + pkin(8) * t969 - qJ(2) * t984;
t996 = pkin(8) * t968;
t995 = pkin(9) * t584;
t994 = pkin(9) * t610;
t457 = -pkin(3) * t968 - pkin(4) * t953;
t985 = -t810 * t921 + t814 * t966;
t920 = -t912 - t913;
t929 = t812 * t920 - t893;
t932 = t808 * t920 + t652;
t946 = t809 * t929 + t813 * t932;
t983 = pkin(2) * t946;
t981 = pkin(8) * t946;
t947 = -t809 * t932 + t813 * t929;
t980 = pkin(8) * t947;
t979 = pkin(9) * t953;
t978 = qJ(2) * t946;
t975 = t810 * t947;
t974 = t811 * t946;
t973 = t814 * t947;
t972 = t815 * t946;
t971 = -pkin(3) * t946 - pkin(4) * t932;
t970 = -pkin(4) * t640 + pkin(9) * t952;
t962 = pkin(9) * t929;
t961 = pkin(9) * t932;
t960 = qJ(6) * t933;
t822 = (-t728 * t808 - t730 * t812) * t792;
t877 = t792 * t808;
t700 = t730 * t877;
t876 = t792 * t812;
t855 = t728 * t876;
t833 = t700 - t855;
t917 = t809 * t833 + t813 * t822;
t916 = -t809 * t822 + t813 * t833;
t930 = t767 * t814 - t810 * t916;
t951 = -t811 * t930 + t815 * t917;
t636 = -qJD(5) * t730 - t845;
t826 = -t636 * t808 + t855;
t834 = t812 * t636 + t728 * t877;
t914 = t809 * t826 + t813 * t834;
t856 = t814 * t676;
t915 = -t809 * t834 + t813 * t826;
t931 = -t810 * t915 - t856;
t950 = -t811 * t931 + t815 * t914;
t949 = t811 * t917 + t815 * t930;
t948 = t811 * t914 + t815 * t931;
t945 = 2 * qJD(6);
t738 = t775 * t773;
t923 = -t738 + t771;
t943 = t809 * t923;
t938 = t813 * t923;
t755 = t798 * t773;
t691 = -t755 + t851;
t857 = t810 * t676;
t928 = t814 * t915 - t857;
t927 = t767 * t810 + t814 * t916;
t817 = qJD(1) ^ 2;
t926 = t817 * t911;
t690 = t851 + t755;
t862 = qJD(2) * qJD(1);
t803 = 0.2e1 * t862;
t790 = t815 * g(1) + t811 * g(2);
t805 = qJDD(1) * qJ(2);
t828 = t790 - t805;
t824 = t803 - t828;
t830 = -t779 + t849;
t831 = -t778 + t848;
t681 = pkin(3) * t831 + pkin(8) * t830 + t824 - t926;
t789 = t811 * g(1) - t815 * g(2);
t832 = qJDD(2) - t789;
t821 = -t817 * qJ(2) + t832;
t754 = -qJDD(1) * t911 + t821;
t733 = -t814 * g(3) + t810 * t754;
t816 = qJD(3) ^ 2;
t910 = pkin(3) * t810;
t839 = -pkin(8) * t814 + t910;
t825 = t817 * t839;
t696 = -t816 * pkin(3) + qJDD(3) * pkin(8) - t810 * t825 + t733;
t629 = -t813 * t681 + t809 * t696;
t568 = t923 * pkin(4) + pkin(9) * t691 - t629;
t630 = t809 * t681 + t813 * t696;
t769 = t773 ^ 2;
t838 = pkin(4) * t798 - pkin(9) * t775;
t576 = -t769 * pkin(4) + t722 * pkin(9) - t798 * t838 + t630;
t517 = t808 * t568 + t812 * t576;
t667 = pkin(5) * t728 - qJ(6) * t730;
t829 = t767 * qJ(6) - t728 * t667 + t792 * t945 + t517;
t592 = t730 * t876 - t808 * t820;
t593 = -t812 * t820 - t700;
t532 = t592 * t813 + t593 * t809;
t535 = -t592 * t809 + t593 * t813;
t827 = -t535 * t810 + t856;
t919 = t811 * t532 + t815 * t827;
t918 = t815 * t532 - t811 * t827;
t686 = (qJD(4) - t798) * t775 + t844;
t770 = t775 ^ 2;
t797 = t798 ^ 2;
t909 = pkin(5) * t812;
t908 = t636 * pkin(5);
t907 = qJ(6) * t812;
t906 = qJDD(1) * pkin(1);
t516 = -t812 * t568 + t808 * t576;
t462 = -t516 * t812 + t517 * t808;
t905 = t462 * t809;
t904 = t462 * t813;
t732 = t810 * g(3) + t814 * t754;
t695 = qJDD(3) * pkin(3) + t816 * pkin(8) - t814 * t825 + t732;
t612 = t722 * pkin(4) + t769 * pkin(9) - t775 * t838 + t695;
t897 = t612 * t808;
t896 = t612 * t812;
t892 = t695 * t809;
t891 = t695 * t813;
t717 = t738 + t771;
t889 = t717 * t809;
t888 = t717 * t813;
t806 = t810 ^ 2;
t807 = t814 ^ 2;
t868 = t806 + t807;
t782 = t868 * qJDD(1);
t884 = t782 * t811;
t883 = t782 * t815;
t852 = t810 * t814 * t817;
t787 = qJDD(3) + t852;
t882 = t787 * t810;
t881 = t787 * t814;
t788 = qJDD(3) - t852;
t880 = t788 * t810;
t879 = t788 * t814;
t878 = t792 * t730;
t875 = t798 * t809;
t874 = t798 * t813;
t873 = t806 * t817;
t872 = t807 * t817;
t749 = t828 - 0.2e1 * t862 + t926;
t871 = t810 * t749;
t870 = t814 * t749;
t869 = -t640 - t912;
t860 = qJDD(1) * t811;
t858 = qJDD(1) * t815;
t854 = t810 * t738;
t853 = t814 * t738;
t850 = pkin(3) * t814 + pkin(2);
t847 = -qJ(6) * t808 - pkin(4);
t463 = t516 * t808 + t812 * t517;
t563 = t629 * t809 + t813 * t630;
t756 = -t817 * pkin(1) + t824;
t757 = -t821 + t906;
t704 = t815 * t756 - t757 * t811;
t740 = -t789 * t811 - t815 * t790;
t843 = t811 * t852;
t842 = t815 * t852;
t840 = t730 * t667 + qJDD(6) + t516;
t783 = -t811 * t817 + t858;
t837 = pkin(6) * t783 + g(3) * t811;
t784 = t815 * t817 + t860;
t836 = -pkin(6) * t784 + g(3) * t815;
t835 = t814 * t535 + t857;
t562 = -t629 * t813 + t630 * t809;
t679 = t814 * t732 + t810 * t733;
t680 = -t732 * t810 + t733 * t814;
t701 = t756 * t811 + t757 * t815;
t739 = t789 * t815 - t790 * t811;
t823 = -t767 * pkin(5) + t840;
t819 = -pkin(5) * t878 + t730 * t945 + t612;
t818 = t819 + t960;
t796 = -t816 - t872;
t795 = t816 - t872;
t794 = -t816 - t873;
t793 = -t816 + t873;
t786 = (-t806 + t807) * t817;
t785 = t868 * t817;
t780 = -0.2e1 * t849 + t859;
t777 = 0.2e1 * t848 + t861;
t772 = t868 * t863;
t753 = -t770 + t797;
t752 = t769 - t797;
t751 = -t779 * t810 - t807 * t863;
t750 = -t778 * t814 - t806 * t863;
t746 = -t796 * t810 - t881;
t745 = t794 * t814 - t880;
t744 = t796 * t814 - t882;
t743 = -t795 * t814 - t880;
t742 = t794 * t810 + t879;
t741 = -t793 * t810 - t881;
t737 = -t770 + t769;
t736 = -t785 * t815 - t884;
t735 = -t785 * t811 + t883;
t734 = -t770 - t797;
t731 = t777 * t810 - t780 * t814;
t724 = -t797 - t769;
t715 = t769 + t770;
t706 = t744 * t811 + t780 * t815;
t705 = t742 * t811 + t777 * t815;
t703 = -t744 * t815 + t780 * t811;
t702 = -t742 * t815 + t777 * t811;
t698 = (-t773 * t813 + t775 * t809) * t798;
t697 = (-t773 * t809 - t775 * t813) * t798;
t687 = (-qJD(4) - t798) * t775 - t844;
t685 = -t775 * t875 - t813 * t851;
t684 = t775 * t874 - t809 * t851;
t683 = -t722 * t809 + t773 * t874;
t682 = t722 * t813 + t773 * t875;
t674 = -t698 * t810 + t771 * t814;
t671 = t752 * t813 - t889;
t670 = -t753 * t809 + t938;
t669 = t752 * t809 + t888;
t668 = t753 * t813 + t943;
t666 = -t734 * t809 - t888;
t665 = t734 * t813 - t889;
t662 = -pkin(2) * t785 - t680;
t661 = pkin(2) * t744 - qJ(2) * t746 - t733;
t660 = pkin(2) * t742 - qJ(2) * t745 + t732;
t659 = t724 * t813 - t943;
t658 = t724 * t809 + t938;
t647 = pkin(2) * t777 - t745 * t911 - t870;
t646 = pkin(2) * t780 - t746 * t911 + t871;
t645 = t679 * t811 - t749 * t815;
t644 = -t679 * t815 - t749 * t811;
t643 = -t685 * t810 + t853;
t642 = -t683 * t810 - t853;
t634 = -t686 * t813 - t691 * t809;
t633 = t687 * t813 + t690 * t809;
t632 = -t686 * t809 + t691 * t813;
t631 = t687 * t809 - t690 * t813;
t627 = -t671 * t810 - t686 * t814;
t626 = -t670 * t810 - t691 * t814;
t617 = -pkin(8) * t665 - t891;
t616 = pkin(2) * t679 - qJ(2) * t680;
t615 = -pkin(8) * t658 - t892;
t614 = t666 * t814 - t690 * t810;
t613 = t666 * t810 + t690 * t814;
t607 = t659 * t814 - t687 * t810;
t606 = t659 * t810 + t687 * t814;
t605 = -t633 * t810 - t737 * t814;
t598 = -t636 + t878;
t595 = -pkin(2) * t749 - t680 * t911;
t583 = t634 * t814 - t715 * t810;
t582 = t634 * t810 + t715 * t814;
t577 = -pkin(3) * t665 + t630;
t575 = -pkin(3) * t658 + t629;
t570 = t613 * t811 + t665 * t815;
t569 = -t613 * t815 + t665 * t811;
t565 = t606 * t811 + t658 * t815;
t564 = -t606 * t815 + t658 * t811;
t553 = -t896 + t995;
t548 = t582 * t811 + t632 * t815;
t547 = -t582 * t815 + t632 * t811;
t546 = t563 * t814 - t695 * t810;
t545 = t563 * t810 + t695 * t814;
t544 = -t897 - t961;
t522 = -pkin(8) * t632 - t562;
t510 = -pkin(4) * t933 - t897 + t994;
t509 = t598 * t810 + t973;
t507 = -t598 * t814 + t975;
t505 = -pkin(4) * t596 + t896 + t962;
t504 = pkin(2) * t613 + pkin(3) * t690 + pkin(8) * t666 - qJ(2) * t614 - t892;
t503 = pkin(2) * t606 + pkin(3) * t687 + pkin(8) * t659 - qJ(2) * t607 + t891;
t502 = t818 + t908;
t501 = t596 * t810 + t973;
t499 = -t596 * t814 + t975;
t497 = qJ(6) * t912 - t823;
t496 = t545 * t811 + t562 * t815;
t495 = -t545 * t815 + t562 * t811;
t494 = -pkin(5) * t912 + t829;
t485 = (-t598 + t636) * pkin(5) + t818;
t484 = t819 + t908 + 0.2e1 * t960;
t483 = qJ(6) * t869 + t823;
t482 = pkin(5) * t869 + t829;
t481 = pkin(2) * t665 - t814 * t577 - t614 * t911 - t810 * t617;
t478 = pkin(2) * t658 - t814 * t575 - t607 * t911 - t810 * t615;
t477 = t507 * t811 + t972;
t475 = -t507 * t815 + t974;
t473 = pkin(2) * t582 + pkin(3) * t715 + pkin(8) * t634 - qJ(2) * t583 + t563;
t468 = t499 * t811 + t972;
t466 = -t499 * t815 + t974;
t464 = -t1009 + t517;
t461 = pkin(2) * t545 + pkin(3) * t695 + pkin(8) * t563 - qJ(2) * t546;
t460 = t516 + t971;
t459 = -t485 * t808 - t598 * t907 - t961;
t458 = -t810 * t522 - t583 * t911 + t632 * t850;
t456 = -pkin(5) * t899 + t484 * t812 - t995;
t455 = pkin(4) * t612 + pkin(9) * t463;
t454 = -t510 * t809 + t553 * t813 + t1019;
t453 = t812 * t485 + t598 * t847 + t962;
t452 = -t505 * t809 + t544 * t813 - t981;
t451 = (-t920 - t912) * qJ(6) + (-t925 - t767) * pkin(5) + t840 + t971;
t450 = -t994 + t808 * t484 + (pkin(4) + t909) * t933;
t449 = t494 * t812 - t497 * t808;
t448 = t494 * t808 + t497 * t812;
t447 = -t462 - t979;
t446 = -qJ(6) * t924 + (-t664 + t912) * pkin(5) - t829 + t1009;
t445 = -pkin(5) * t921 + qJ(6) * t597 + t457;
t444 = t463 + t970;
t443 = -t911 * t546 + (pkin(8) * t810 + t850) * t562;
t438 = -t482 * t808 + t483 * t812 - t979;
t437 = t463 * t813 - t905;
t436 = t463 * t809 + t904;
t435 = t482 * t812 + t483 * t808 + t970;
t434 = t437 * t814 - t612 * t810;
t433 = t437 * t810 + t612 * t814;
t432 = t510 * t813 + t553 * t809 - t1021;
t431 = -pkin(9) * t448 + (-pkin(5) * t808 + t907) * t502;
t430 = pkin(2) * t499 - pkin(3) * t596 - qJ(2) * t501 + t505 * t813 + t544 * t809 + t980;
t429 = -t448 * t809 + t449 * t813;
t428 = t448 * t813 + t449 * t809;
t427 = -t453 * t809 + t459 * t813 - t981;
t426 = -t450 * t809 + t456 * t813 - t1019;
t425 = -pkin(3) * t436 - pkin(4) * t462;
t424 = pkin(9) * t449 + (-t847 + t909) * t502;
t423 = t429 * t814 - t502 * t810;
t422 = t429 * t810 + t502 * t814;
t421 = -t810 * t454 - t814 * t464 - t1022;
t420 = -t444 * t809 + t447 * t813 - t996;
t419 = -t810 * t452 - t814 * t460 - t501 * t911 + t983;
t418 = pkin(2) * t507 - pkin(3) * t598 - qJ(2) * t509 + t453 * t813 + t459 * t809 + t980;
t417 = t450 * t813 + t456 * t809 + t1021;
t416 = -pkin(8) * t436 - pkin(9) * t904 - t455 * t809;
t415 = t433 * t811 + t436 * t815;
t414 = -t433 * t815 + t436 * t811;
t413 = -t435 * t809 + t438 * t813 - t996;
t412 = -pkin(3) * t428 - pkin(4) * t448 - pkin(5) * t497 - qJ(6) * t494;
t411 = -t810 * t427 - t814 * t451 - t509 * t911 + t983;
t410 = t444 * t813 + t447 * t809 + t999;
t409 = -t810 * t426 - t814 * t446 + t1022;
t408 = t422 * t811 + t428 * t815;
t407 = -t422 * t815 + t428 * t811;
t406 = t435 * t813 + t438 * t809 + t999;
t405 = -t810 * t420 - t814 * t457 + t1001;
t404 = -pkin(8) * t428 - t424 * t809 + t431 * t813;
t403 = -t810 * t413 - t814 * t445 + t1001;
t402 = pkin(2) * t433 + pkin(3) * t612 + pkin(8) * t437 - pkin(9) * t905 - qJ(2) * t434 + t455 * t813;
t401 = pkin(2) * t436 - t810 * t416 - t814 * t425 - t434 * t911;
t400 = pkin(2) * t422 + pkin(3) * t502 + pkin(8) * t429 - qJ(2) * t423 + t424 * t813 + t431 * t809;
t399 = pkin(2) * t428 - t810 * t404 - t814 * t412 - t423 * t911;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t784, -t783, 0, t740, 0, 0, 0, 0, 0, 0, 0, t784, t783, t704, 0, 0, 0, 0, 0, 0, t705, t706, t736, t645, 0, 0, 0, 0, 0, 0, t565, t570, t548, t496, 0, 0, 0, 0, 0, 0, t468, t476, t1005, t415, 0, 0, 0, 0, 0, 0, t477, t1005, -t476, t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t783, -t784, 0, t739, 0, 0, 0, 0, 0, 0, 0, -t783, t784, t701, 0, 0, 0, 0, 0, 0, t702, t703, t735, t644, 0, 0, 0, 0, 0, 0, t564, t569, t547, t495, 0, 0, 0, 0, 0, 0, t466, -t465, t1003, t414, 0, 0, 0, 0, 0, 0, t475, t1003, t465, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t745, t746, 0, t680, 0, 0, 0, 0, 0, 0, t607, t614, t583, t546, 0, 0, 0, 0, 0, 0, t501, t508, t984, t434, 0, 0, 0, 0, 0, 0, t509, t984, -t508, t423; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t783, 0, -t784, 0, -t837, -t836, -t739, -pkin(6) * t739, 0, -t783, t784, 0, 0, 0, -t701, t837, t836, -pkin(6) * t701 + (-pkin(1) * t811 + qJ(2) * t815) * g(3), -t751 * t811 + t842, -t731 * t811 + t786 * t815, -t743 * t811 + t814 * t858, -t750 * t811 - t842, -t741 * t811 - t810 * t858, qJDD(3) * t815 - t772 * t811, -pkin(6) * t702 - t647 * t811 + t660 * t815, -pkin(6) * t703 - t646 * t811 + t661 * t815, -pkin(2) * t883 - pkin(6) * t735 - t662 * t811, -pkin(6) * t644 - t595 * t811 + t616 * t815, -t643 * t811 + t684 * t815, -t605 * t811 + t631 * t815, -t626 * t811 + t668 * t815, -t642 * t811 + t682 * t815, -t627 * t811 + t669 * t815, -t674 * t811 + t697 * t815, -pkin(6) * t564 - t478 * t811 + t503 * t815, -pkin(6) * t569 - t481 * t811 + t504 * t815, -pkin(6) * t547 - t458 * t811 + t473 * t815, -pkin(6) * t495 - t443 * t811 + t461 * t815, t918, t1025, t1004, t950, -t1027, t951, -pkin(6) * t466 - t419 * t811 + t430 * t815, -t421 * t811 + t432 * t815 + t1029, -t405 * t811 + t410 * t815 - t1018, -pkin(6) * t414 - t401 * t811 + t402 * t815, t918, t1004, -t1025, t951, t1027, t950, -pkin(6) * t475 - t411 * t811 + t418 * t815, -t403 * t811 + t406 * t815 - t1018, -t409 * t811 + t417 * t815 - t1029, -pkin(6) * t407 - t399 * t811 + t400 * t815; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t784, 0, t783, 0, t836, -t837, t740, pkin(6) * t740, 0, -t784, -t783, 0, 0, 0, t704, -t836, t837, pkin(6) * t704 + (pkin(1) * t815 + qJ(2) * t811) * g(3), t751 * t815 + t843, t731 * t815 + t786 * t811, t743 * t815 + t811 * t859, t750 * t815 - t843, t741 * t815 - t810 * t860, qJDD(3) * t811 + t772 * t815, pkin(6) * t705 + t647 * t815 + t660 * t811, pkin(6) * t706 + t646 * t815 + t661 * t811, -pkin(2) * t884 + pkin(6) * t736 + t662 * t815, pkin(6) * t645 + t595 * t815 + t616 * t811, t643 * t815 + t684 * t811, t605 * t815 + t631 * t811, t626 * t815 + t668 * t811, t642 * t815 + t682 * t811, t627 * t815 + t669 * t811, t674 * t815 + t697 * t811, pkin(6) * t565 + t478 * t815 + t503 * t811, pkin(6) * t570 + t481 * t815 + t504 * t811, pkin(6) * t548 + t458 * t815 + t473 * t811, pkin(6) * t496 + t443 * t815 + t461 * t811, t919, -t1024, t1002, t948, t1026, t949, pkin(6) * t468 + t419 * t815 + t430 * t811, t421 * t815 + t432 * t811 + t1028, t405 * t815 + t410 * t811 + t1017, pkin(6) * t415 + t401 * t815 + t402 * t811, t919, t1002, t1024, t949, -t1026, t948, pkin(6) * t477 + t411 * t815 + t418 * t811, t403 * t815 + t406 * t811 + t1017, t409 * t815 + t417 * t811 - t1028, pkin(6) * t408 + t399 * t815 + t400 * t811; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t789, t790, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t832 - 0.2e1 * t906, -t790 + t803 + 0.2e1 * t805, pkin(1) * t757 + qJ(2) * t756, -t830 * t814, -t777 * t814 - t780 * t810, -t795 * t810 + t879, t831 * t810, t793 * t814 - t882, 0, qJ(2) * t777 - t742 * t911 - t871, qJ(2) * t780 - t744 * t911 - t870, -qJ(2) * t785 + t782 * t911 - t679, -qJ(2) * t749 - t679 * t911, t685 * t814 + t854, t633 * t814 - t737 * t810, t670 * t814 - t691 * t810, t683 * t814 - t854, t671 * t814 - t686 * t810, t698 * t814 + t771 * t810, qJ(2) * t658 - t810 * t575 - t606 * t911 + t814 * t615, qJ(2) * t665 - t810 * t577 - t613 * t911 + t814 * t617, t814 * t522 + (qJ(2) + t910) * t632 - t911 * t582, -t911 * t545 + (qJ(2) + t839) * t562, t835, t1007, t985, t928, -t1006, t927, t814 * t452 - t810 * t460 - t499 * t911 + t978, t814 * t454 - t810 * t464 - t1023, t814 * t420 - t810 * t457 + t1000, qJ(2) * t436 + t814 * t416 - t810 * t425 - t433 * t911, t835, t985, -t1007, t927, t1006, t928, t814 * t427 - t810 * t451 - t507 * t911 + t978, t814 * t413 - t810 * t445 + t1000, t814 * t426 - t810 * t446 + t1023, qJ(2) * t428 + t814 * t404 - t810 * t412 - t422 * t911;];
tauB_reg  = t1;
