% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRP10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP10_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP10_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP10_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:32:33
% EndTime: 2019-03-09 06:32:45
% DurationCPUTime: 4.76s
% Computational Cost: add. (3813->337), mult. (8558->546), div. (0->0), fcn. (7254->6), ass. (0->162)
t110 = sin(qJ(3));
t111 = cos(qJ(4));
t209 = cos(qJ(5));
t165 = t209 * qJD(5);
t124 = qJD(4) * t209 + t165;
t109 = sin(qJ(4));
t208 = sin(qJ(5));
t163 = t208 * qJD(5);
t213 = (qJD(4) * t208 + t163) * t109;
t46 = -t111 * t124 + t213;
t217 = t46 * t110;
t112 = cos(qJ(3));
t191 = qJD(4) * t112;
t175 = t111 * t191;
t189 = t110 * qJD(3);
t64 = t109 * t189 - t175;
t207 = pkin(3) * t112;
t147 = pkin(8) * t110 + t207;
t215 = t111 * t147;
t73 = t109 * t208 - t111 * t209;
t105 = t109 ^ 2;
t107 = t111 ^ 2;
t197 = t105 - t107;
t160 = qJD(4) * t197;
t106 = t110 ^ 2;
t108 = t112 ^ 2;
t159 = (t106 - t108) * qJD(3);
t167 = qJD(3) * t208;
t149 = t112 * t167;
t168 = qJD(3) * t209;
t151 = t112 * t168;
t74 = t109 * t209 + t111 * t208;
t47 = (qJD(4) + qJD(5)) * t74;
t204 = t110 * t47;
t27 = t109 * t149 - t111 * t151 + t204;
t152 = t110 * t167;
t153 = t110 * t168;
t203 = t112 * t47;
t28 = -t109 * t152 + t111 * t153 + t203;
t58 = t73 * t110;
t59 = t73 * t112;
t212 = (-t110 * t59 + t112 * t58) * qJD(3) + t27 * t110 + t112 * t28;
t113 = -pkin(1) - pkin(7);
t201 = t109 * t113;
t162 = pkin(4) - t201;
t188 = t111 * qJD(2);
t206 = t110 * pkin(3);
t210 = -pkin(9) - pkin(8);
t200 = t110 * t113;
t87 = t111 * t200;
t116 = t188 + (-t87 + (-t112 * t210 - qJ(2) - t206) * t109) * qJD(4) + (t162 * t112 + (-t110 * t210 + t207) * t111) * qJD(3);
t103 = t112 * qJD(3);
t170 = t113 * t103;
t190 = qJD(4) * t113;
t176 = t109 * t190;
t146 = -pkin(8) * t112 + t206;
t135 = qJ(2) + t146;
t71 = t111 * t135;
t35 = t110 * t176 - t109 * (qJD(3) * t147 + qJD(2)) - qJD(4) * t71 - t111 * t170;
t118 = pkin(9) * t64 - t35;
t117 = -t116 * t209 + t118 * t208;
t199 = t111 * t112;
t44 = -pkin(9) * t199 + t110 * t162 + t71;
t202 = t109 * t112;
t54 = t109 * t135 + t87;
t48 = -pkin(9) * t202 + t54;
t205 = t208 * t44 + t209 * t48;
t4 = -qJD(5) * t205 - t117;
t211 = 0.2e1 * qJD(2);
t114 = 2 * qJD(6);
t198 = t112 * t113;
t196 = t105 + t107;
t194 = t106 + t108;
t193 = qJD(4) * t109;
t192 = qJD(4) * t111;
t30 = -t109 * t153 - t111 * t152 - t112 * t213 + t124 * t199;
t57 = t74 * t112;
t187 = 0.2e1 * t57 * t30;
t186 = 0.2e1 * t73 * t47;
t185 = -0.2e1 * pkin(3) * qJD(4);
t184 = t208 * pkin(4);
t183 = pkin(5) * t103;
t182 = pkin(4) * t193;
t181 = t109 * t200;
t180 = t109 * t198;
t100 = -pkin(4) * t111 - pkin(3);
t177 = t109 * t191;
t173 = t109 * t192;
t93 = t113 * t189;
t172 = t111 * t189;
t171 = t110 * t103;
t156 = t210 * t208;
t136 = qJD(4) * t156;
t157 = t210 * t209;
t137 = qJD(4) * t157;
t138 = t109 * t157;
t85 = t210 * t111;
t31 = -qJD(5) * t138 - t109 * t137 - t111 * t136 - t163 * t85;
t32 = -t85 * t165 - t111 * t137 + (qJD(5) * t156 + t136) * t109;
t49 = -t208 * t85 - t138;
t50 = t109 * t156 - t209 * t85;
t169 = -t31 * t50 + t32 * t49;
t72 = pkin(4) * t202 - t198;
t161 = t196 * t112;
t89 = 0.2e1 * t171;
t158 = pkin(4) * t163;
t155 = t109 * t172;
t154 = t108 * t173;
t145 = t28 * t57 + t30 * t59;
t144 = t30 * t73 + t47 * t57;
t143 = t46 * t73 - t47 * t74;
t53 = t71 - t181;
t142 = t109 * t54 + t111 * t53;
t141 = t109 * t53 - t111 * t54;
t134 = t103 * t57 + t110 * t30;
t133 = t103 * t50 - t110 * t31;
t132 = -t103 * t49 - t110 * t32;
t131 = t112 * t46 + t189 * t74;
t130 = t103 * t73 + t204;
t52 = -pkin(4) * t64 + t93;
t129 = -t28 * t49 - t30 * t50 + t31 * t57 - t32 * t59;
t29 = t109 * t151 + t149 * t111 - t217;
t56 = t74 * t110;
t128 = -t27 * t50 + t29 * t49 + t31 * t58 + t32 * t56;
t127 = t27 * t57 - t28 * t56 - t29 * t59 + t30 * t58;
t126 = t27 * t73 + t29 * t74 - t46 * t56 + t47 * t58;
t25 = -t208 * t48 + t209 * t44;
t3 = -t116 * t208 - t118 * t209 + t163 * t48 - t165 * t44;
t123 = 0.2e1 * t31 * t73 + 0.2e1 * t32 * t74 - 0.2e1 * t46 * t49 - 0.2e1 * t47 * t50;
t122 = -t29 * t110 + t57 * t189 + (-qJD(3) * t56 - t30) * t112;
t121 = 0.2e1 * t27 * t58 + 0.2e1 * t29 * t56 - 0.2e1 * t171;
t102 = t110 * qJD(6);
t97 = qJ(6) * t103;
t1 = t97 + t102 - t3;
t120 = t28 * t73 - t30 * t74 + t46 * t57 + t47 * t59;
t36 = t188 - t54 * qJD(4) + (-t180 + t215) * qJD(3);
t119 = -qJD(4) * t142 - t36 * t109 - t35 * t111;
t115 = (-t110 * t184 - t205) * qJD(5) - t117;
t104 = qJ(2) * t211;
t101 = pkin(4) * t165;
t99 = -pkin(4) * t209 - pkin(5);
t96 = t184 + qJ(6);
t95 = -0.2e1 * t158;
t90 = t101 + qJD(6);
t63 = t103 * t109 + t110 * t192;
t62 = -t172 - t177;
t61 = -t103 * t111 + t110 * t193;
t51 = t112 * t160 + t155;
t43 = pkin(5) * t73 - qJ(6) * t74 + t100;
t40 = -0.2e1 * t74 * t46;
t38 = t103 * t74 - t217;
t37 = t189 * t73 - t203;
t34 = pkin(5) * t57 + qJ(6) * t59 + t72;
t21 = -pkin(5) * t110 - t25;
t20 = qJ(6) * t110 + t205;
t12 = 0.2e1 * t59 * t28;
t11 = pkin(5) * t47 + qJ(6) * t46 - qJD(6) * t74 + t182;
t7 = -0.2e1 * t103 * t59 - 0.2e1 * t110 * t28;
t6 = -t28 * t74 + t46 * t59;
t5 = pkin(5) * t30 + qJ(6) * t28 + qJD(6) * t59 + t52;
t2 = -t183 - t4;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, t104, -0.2e1 * t171, 0.2e1 * t159, 0, t89, 0, 0, 0.2e1 * qJ(2) * t103 + 0.2e1 * qJD(2) * t110, -0.2e1 * qJ(2) * t189 + 0.2e1 * qJD(2) * t112, 0, t104, -0.2e1 * t107 * t171 - 0.2e1 * t154, 0.2e1 * t108 * t160 + 0.4e1 * t112 * t155, -0.2e1 * t110 * t177 - 0.2e1 * t111 * t159, -0.2e1 * t105 * t171 + 0.2e1 * t154, 0.2e1 * t109 * t159 - 0.2e1 * t110 * t175, t89, -0.2e1 * t108 * t111 * t190 + 0.2e1 * t36 * t110 + 0.2e1 * (t53 + 0.2e1 * t181) * t103, 0.2e1 * t108 * t176 + 0.2e1 * t35 * t110 + 0.2e1 * (-t54 + 0.2e1 * t87) * t103, 0.2e1 * t142 * t189 + 0.2e1 * (qJD(4) * t141 + t109 * t35 - t111 * t36) * t112, -0.2e1 * t113 ^ 2 * t171 - 0.2e1 * t35 * t54 + 0.2e1 * t36 * t53, t12, 0.2e1 * t145, t7, t187, -0.2e1 * t134, t89, 0.2e1 * t103 * t25 + 0.2e1 * t110 * t4 + 0.2e1 * t30 * t72 + 0.2e1 * t52 * t57, -0.2e1 * t103 * t205 + 0.2e1 * t110 * t3 - 0.2e1 * t28 * t72 - 0.2e1 * t52 * t59, -0.2e1 * t205 * t30 + 0.2e1 * t25 * t28 + 0.2e1 * t3 * t57 + 0.2e1 * t4 * t59, -0.2e1 * t205 * t3 + 0.2e1 * t25 * t4 + 0.2e1 * t52 * t72, t12, t7, -0.2e1 * t145, t89, 0.2e1 * t134, t187, -0.2e1 * t103 * t21 - 0.2e1 * t110 * t2 + 0.2e1 * t30 * t34 + 0.2e1 * t5 * t57, -0.2e1 * t1 * t57 - 0.2e1 * t2 * t59 - 0.2e1 * t20 * t30 - 0.2e1 * t21 * t28, 0.2e1 * t1 * t110 + 0.2e1 * t103 * t20 + 0.2e1 * t28 * t34 + 0.2e1 * t5 * t59, 0.2e1 * t1 * t20 + 0.2e1 * t2 * t21 + 0.2e1 * t34 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194 * t192, t194 * t193, 0, -t141 * t103 + (t119 - 0.2e1 * t170) * t110, 0, 0, 0, 0, 0, 0, t122, t212, t127, -t112 * t52 + t189 * t72 - t205 * t27 - t25 * t29 + t3 * t58 - t4 * t56, 0, 0, 0, 0, 0, 0, t122, t127, -t212, -t1 * t58 - t112 * t5 + t189 * t34 + t2 * t56 - t20 * t27 + t21 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t196) * t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189, 0, -t103, 0, -t93, -t170, 0, 0, -t51, -0.4e1 * t112 * t173 + t189 * t197, t63, t51, -t61, 0 (-t180 - t215) * qJD(4) + (t109 * t146 - t87) * qJD(3) (t109 * t147 - t111 * t198) * qJD(4) + (-pkin(8) * t199 + (pkin(3) * t111 + t201) * t110) * qJD(3), t119, -pkin(3) * t93 + pkin(8) * t119, t6, t120, t38, t144, -t130, 0, t100 * t30 + t182 * t57 + t47 * t72 + t52 * t73 + t132, -t100 * t28 - t182 * t59 - t46 * t72 + t52 * t74 - t133, -t205 * t47 + t25 * t46 + t3 * t73 - t4 * t74 + t129, t100 * t52 + t182 * t72 - t205 * t31 - t25 * t32 - t3 * t50 - t4 * t49, t6, t38, -t120, 0, t130, t144, t11 * t57 + t30 * t43 + t34 * t47 + t5 * t73 + t132, -t1 * t73 + t2 * t74 - t20 * t47 - t21 * t46 + t129, t11 * t59 + t28 * t43 + t34 * t46 - t5 * t74 + t133, t1 * t50 + t11 * t34 + t2 * t49 - t20 * t31 + t21 * t32 + t43 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189, -t103, 0, 0, 0, 0, 0, 0, 0, 0, t62, t64, qJD(3) * t161 (pkin(8) * t161 - t206) * qJD(3), 0, 0, 0, 0, 0, 0, t37, t131, t126, -pkin(4) * t177 + t100 * t189 + t128, 0, 0, 0, 0, 0, 0, t37, t126, -t131, -t11 * t112 + t189 * t43 + t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t173, -0.2e1 * t160, 0, -0.2e1 * t173, 0, 0, t109 * t185, t111 * t185, 0, 0, t40, 0.2e1 * t143, 0, t186, 0, 0, 0.2e1 * t100 * t47 + 0.2e1 * t182 * t73, -0.2e1 * t100 * t46 + 0.2e1 * t182 * t74, t123, 0.2e1 * t100 * t182 + 0.2e1 * t169, t40, 0, -0.2e1 * t143, 0, 0, t186, 0.2e1 * t11 * t73 + 0.2e1 * t43 * t47, t123, -0.2e1 * t11 * t74 + 0.2e1 * t43 * t46, 0.2e1 * t11 * t43 + 0.2e1 * t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t64, t103, t36, t35, 0, 0, 0, 0, -t28, 0, -t30, t103, pkin(4) * t151 + t115 (-t110 * t165 - t149) * pkin(4) + t3 (t209 * t28 - t208 * t30 + (-t208 * t59 - t209 * t57) * qJD(5)) * pkin(4) (t209 * t4 - t208 * t3 + (t205 * t209 - t208 * t25) * qJD(5)) * pkin(4), 0, -t28, 0, t103, t30, 0, -t103 * t99 + t115 + t183, -t158 * t59 - t28 * t99 - t30 * t96 - t57 * t90, t103 * t96 + t110 * t90 + t1, t1 * t96 + t158 * t21 + t2 * t99 + t20 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t61, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t27, 0 (-t209 * t29 - t208 * t27 + (t208 * t56 - t209 * t58) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, -t29, 0, -t27, t158 * t56 - t27 * t96 + t29 * t99 - t58 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, 0, -t193, 0, -pkin(8) * t192, pkin(8) * t193, 0, 0, 0, 0, -t46, 0, -t47, 0, -t32, t31 (t209 * t46 - t208 * t47 + (t208 * t74 - t209 * t73) * qJD(5)) * pkin(4) (-t209 * t32 - t208 * t31 + (t208 * t49 + t209 * t50) * qJD(5)) * pkin(4), 0, -t46, 0, 0, t47, 0, -t32, t158 * t74 - t46 * t99 - t47 * t96 - t73 * t90, -t31, t158 * t49 - t31 * t96 + t32 * t99 + t50 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -0.2e1 * t101, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, 0.2e1 * t90, 0.2e1 * t158 * t99 + 0.2e1 * t90 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, -t30, t103, t4, t3, 0, 0, 0, -t28, 0, t103, t30, 0, t4 + 0.2e1 * t183, pkin(5) * t28 - qJ(6) * t30 - qJD(6) * t57, 0.2e1 * t97 + 0.2e1 * t102 - t3, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t27, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t27, -pkin(5) * t29 - qJ(6) * t27 - qJD(6) * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, -t47, 0, -t32, t31, 0, 0, 0, -t46, 0, 0, t47, 0, -t32, pkin(5) * t46 - qJ(6) * t47 - qJD(6) * t73, -t31, -pkin(5) * t32 - qJ(6) * t31 + qJD(6) * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, -t101, 0, 0, 0, 0, 0, 0, 0, 0, -t158, 0, t114 + t101, -pkin(5) * t158 + qJ(6) * t90 + qJD(6) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, qJ(6) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, -t28, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
