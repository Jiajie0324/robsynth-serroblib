% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP10_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:32:40
% EndTime: 2019-03-09 06:32:56
% DurationCPUTime: 8.65s
% Computational Cost: add. (9903->662), mult. (19394->802), div. (0->0), fcn. (12612->10), ass. (0->319)
t233 = sin(qJ(3));
t362 = qJD(1) * t233;
t204 = qJD(4) + t362;
t239 = -pkin(1) - pkin(7);
t186 = qJDD(1) * t239 + qJDD(2);
t194 = qJD(1) * t239 + qJD(2);
t236 = cos(qJ(3));
t358 = qJD(3) * t233;
t403 = qJDD(3) * pkin(3);
t105 = -t236 * t186 + t194 * t358 - t403;
t429 = g(3) * t233;
t237 = cos(qJ(1));
t225 = g(2) * t237;
t234 = sin(qJ(1));
t226 = g(1) * t234;
t444 = t226 - t225;
t259 = t236 * t444 - t429;
t253 = -t105 - t259;
t459 = qJD(4) * pkin(8) * t204 - t253;
t192 = qJD(5) + t204;
t232 = sin(qJ(4));
t361 = qJD(1) * t236;
t321 = t232 * t361;
t235 = cos(qJ(4));
t357 = qJD(3) * t235;
t154 = -t321 + t357;
t359 = qJD(3) * t232;
t155 = t235 * t361 + t359;
t231 = sin(qJ(5));
t431 = cos(qJ(5));
t270 = t231 * t154 + t155 * t431;
t352 = qJD(4) * t236;
t314 = qJD(1) * t352;
t346 = t236 * qJDD(1);
t355 = qJD(4) * t232;
t334 = qJD(3) * t355 + t232 * t346 + t235 * t314;
t276 = t235 * qJDD(3) - t334;
t349 = qJD(1) * qJD(3);
t316 = t233 * t349;
t250 = t232 * t316 + t276;
t84 = t235 * (qJD(3) * (-qJD(4) + t362) - t346) + (-qJDD(3) + t314) * t232;
t30 = qJD(5) * t270 - t231 * t84 - t431 * t250;
t454 = -t192 * t270 + t30;
t238 = -pkin(9) - pkin(8);
t179 = t238 * t232;
t180 = t238 * t235;
t108 = t231 * t179 - t180 * t431;
t315 = t236 * t349;
t347 = t233 * qJDD(1);
t151 = qJDD(4) + t315 + t347;
t147 = qJDD(5) + t151;
t230 = qJ(4) + qJ(5);
t219 = sin(t230);
t458 = -t108 * t147 + t219 * t259;
t418 = qJD(3) * pkin(3);
t145 = -t194 * t236 - t418;
t104 = -pkin(4) * t154 + t145;
t91 = -t431 * t154 + t155 * t231;
t35 = pkin(5) * t91 - qJ(6) * t270 + t104;
t457 = t35 * t91;
t456 = t104 * t91;
t455 = t91 * t270;
t331 = t431 * t235;
t300 = qJD(1) * t331;
t318 = t431 * qJD(4);
t301 = t235 * t318;
t317 = t431 * qJD(5);
t330 = t232 * t362;
t392 = t231 * t232;
t442 = qJD(4) + qJD(5);
t409 = -t231 * t330 + t233 * t300 + t235 * t317 - t392 * t442 + t301;
t391 = t231 * t235;
t158 = t232 * t431 + t391;
t123 = t158 * t233;
t135 = t158 * qJD(1);
t268 = t331 - t392;
t356 = qJD(3) * t236;
t407 = t123 * t442 - t268 * t356 + t135;
t100 = t442 * t158;
t371 = t233 * t135 + t100;
t329 = t232 * t358;
t452 = t235 * t352 - t329;
t382 = t234 * t235;
t385 = t233 * t237;
t139 = t232 * t385 + t382;
t433 = t270 ^ 2;
t340 = t91 ^ 2 - t433;
t351 = qJD(5) * t231;
t29 = -t154 * t317 + t155 * t351 - t231 * t250 + t431 * t84;
t451 = t192 * t91 - t29;
t51 = pkin(5) * t270 + qJ(6) * t91;
t332 = qJD(4) * t238;
t161 = t232 * t332;
t295 = pkin(3) * t236 + pkin(8) * t233;
t160 = t295 * qJD(1);
t389 = t232 * t236;
t101 = t235 * t160 - t194 * t389;
t386 = t233 * t235;
t345 = pkin(9) * t386;
t73 = (pkin(4) * t236 + t345) * qJD(1) + t101;
t379 = t235 * t236;
t102 = t232 * t160 + t194 * t379;
t79 = pkin(9) * t330 + t102;
t421 = -qJD(5) * t108 + t238 * t301 - t431 * t73 + (-t161 + t79) * t231;
t106 = qJDD(3) * pkin(8) + t186 * t233 + t194 * t356;
t294 = pkin(3) * t233 - pkin(8) * t236;
t167 = qJ(2) + t294;
t136 = t167 * qJD(1);
t166 = t233 * t194;
t144 = qJD(3) * pkin(8) + t166;
t353 = qJD(4) * t235;
t152 = qJD(3) * t295 + qJD(2);
t89 = qJD(1) * t152 + qJDD(1) * t167;
t33 = t235 * t106 + t136 * t353 - t144 * t355 + t232 * t89;
t80 = t235 * t136 - t144 * t232;
t448 = -t204 * t80 + t33;
t228 = t233 ^ 2;
t229 = t236 ^ 2;
t364 = t228 + t229;
t310 = t364 * t186;
t296 = -t166 + (t330 + t355) * pkin(4);
t128 = t147 * qJ(6);
t168 = t192 * qJD(6);
t445 = t128 + t168;
t384 = t233 * t239;
t189 = t235 * t384;
t111 = t232 * t167 + t189;
t443 = -t232 * t352 - t233 * t357;
t131 = t147 * pkin(5);
t441 = t131 - qJDD(6);
t220 = cos(t230);
t375 = t237 * t220;
t383 = t234 * t219;
t118 = t233 * t383 - t375;
t394 = t220 * t234;
t120 = t219 * t385 + t394;
t81 = t136 * t232 + t144 * t235;
t86 = t235 * t89;
t34 = -qJD(4) * t81 - t106 * t232 + t86;
t16 = pkin(4) * t151 + pkin(9) * t84 + t34;
t21 = pkin(9) * t250 + t33;
t70 = -pkin(9) * t155 + t80;
t61 = pkin(4) * t204 + t70;
t71 = pkin(9) * t154 + t81;
t311 = -t431 * t16 + t231 * t21 + t71 * t317 + t61 * t351;
t395 = t219 * t236;
t257 = g(1) * t118 - g(2) * t120 + g(3) * t395 - t311;
t242 = t270 * t35 - t257 - t441;
t440 = -t104 * t270 + t257;
t125 = t268 * t233;
t439 = -t125 * t147 + t192 * t407 + t236 * t29 + t270 * t358;
t438 = -t147 * t268 + t192 * t371 - t361 * t91;
t354 = qJD(4) * t233;
t305 = qJD(1) + t354;
t320 = t235 * t356;
t437 = t232 * t305 - t320;
t322 = t232 * t356;
t436 = t235 * t305 + t322;
t103 = -pkin(9) * t389 + t111;
t150 = t235 * t167;
t313 = -t232 * t239 + pkin(4);
t88 = -pkin(9) * t379 + t233 * t313 + t150;
t419 = t431 * t103 + t231 * t88;
t130 = t235 * t152;
t47 = t130 + (-t189 + (pkin(9) * t236 - t167) * t232) * qJD(4) + (t236 * t313 + t345) * qJD(3);
t327 = t232 * t354;
t68 = t232 * t152 + t167 * t353 + (t320 - t327) * t239;
t52 = -pkin(9) * t452 + t68;
t12 = -qJD(5) * t419 - t231 * t52 + t431 * t47;
t434 = t158 * t30 + t268 * t29 + t270 * t371 + t409 * t91;
t432 = 0.2e1 * qJ(2);
t430 = pkin(8) * t151;
t428 = g(3) * t236;
t424 = t371 * pkin(5) - t409 * qJ(6) - qJD(6) * t158 + t296;
t41 = t231 * t73 + t431 * t79;
t36 = qJ(6) * t361 + t41;
t269 = t179 * t431 + t231 * t180;
t62 = qJD(5) * t269 + t161 * t431 + t332 * t391;
t423 = t62 - t36;
t422 = t62 - t41;
t420 = pkin(5) * t361 - t421;
t339 = t431 * t71;
t28 = t231 * t61 + t339;
t417 = t192 * t28;
t414 = t204 * t81;
t413 = t231 * t71;
t412 = t235 * t80;
t411 = t84 * t232;
t261 = t318 + t317;
t319 = qJD(3) * t431;
t324 = t232 * t351;
t408 = qJD(1) * t392 - t300 - t319 * t389 + t231 * t327 + t233 * t324 - (t231 * t356 + t233 * t261) * t235;
t32 = t431 * t70 - t413;
t406 = pkin(4) * t317 + qJD(6) - t32;
t405 = pkin(1) * qJDD(1);
t241 = qJD(1) ^ 2;
t404 = qJ(2) * t241;
t401 = t151 * t235;
t400 = t154 * t204;
t399 = t154 * t232;
t398 = t155 * t154;
t397 = t155 * t235;
t396 = t204 * t232;
t393 = t220 * t236;
t390 = t232 * t151;
t388 = t232 * t237;
t387 = t233 * t234;
t381 = t234 * t236;
t380 = t234 * t238;
t378 = t235 * t237;
t377 = t236 * t237;
t376 = t236 * t238;
t374 = t237 * t238;
t240 = qJD(3) ^ 2;
t373 = t239 * t240;
t27 = t431 * t61 - t413;
t372 = qJD(6) - t27;
t370 = t139 * pkin(4);
t369 = g(1) * t377 + g(2) * t381;
t341 = 0.2e1 * qJD(1) * qJD(2);
t368 = (qJDD(1) * qJ(2) + t341) * qJ(2);
t367 = t237 * pkin(1) + t234 * qJ(2);
t365 = t228 - t229;
t363 = -t240 - t241;
t360 = qJD(3) * t155;
t350 = t145 * qJD(4);
t348 = qJDD(3) * t233;
t344 = g(1) * t394;
t338 = t232 * t387;
t336 = t236 * t241 * t233;
t216 = pkin(4) * t235 + pkin(3);
t222 = t237 * qJ(2);
t335 = t216 * t385 + t236 * t374 + t222;
t333 = t237 * pkin(7) + t367;
t323 = t192 * t361;
t3 = t231 * t16 + t431 * t21 + t61 * t317 - t71 * t351;
t119 = t219 * t237 + t220 * t387;
t309 = -t118 * pkin(5) + qJ(6) * t119;
t121 = t233 * t375 - t383;
t308 = t120 * pkin(5) - qJ(6) * t121;
t205 = pkin(4) * t389;
t153 = -t236 * t239 + t205;
t307 = t364 * qJDD(1);
t306 = qJDD(2) - t405;
t303 = g(2) * t333;
t302 = t233 * t319;
t299 = t233 * t315;
t31 = t231 * t70 + t339;
t298 = pkin(4) * t351 - t31;
t297 = -pkin(5) * t395 + qJ(6) * t393;
t293 = -g(1) * t120 - g(2) * t118;
t292 = -g(1) * t121 - g(2) * t119;
t291 = g(1) * t237 + g(2) * t234;
t288 = -t444 - t404;
t287 = g(2) * t236 * t375 + t147 * t269 + t220 * t429;
t124 = t158 * t236;
t60 = t231 * t443 - t232 * t302 - t236 * t324 + t261 * t379;
t286 = t124 * t30 + t60 * t91;
t285 = pkin(5) * t220 + qJ(6) * t219;
t283 = -t232 * t81 - t412;
t282 = t232 * t80 - t235 * t81;
t280 = g(1) * t387 + t428;
t279 = qJDD(1) * t432 + t341;
t278 = t216 + t285;
t277 = -t186 + t404 + t226;
t275 = (-pkin(4) * t232 + t239) * t226;
t273 = pkin(4) * t388 + t216 * t387 + t234 * t376 + t333;
t49 = -t231 * t103 + t431 * t88;
t267 = t204 * t353 + t390;
t266 = -t204 * t355 + t401;
t11 = -t103 * t351 + t231 * t47 + t88 * t317 + t431 * t52;
t265 = -t268 * t30 + t371 * t91;
t109 = t452 * pkin(4) + t239 * t358;
t210 = g(2) * t385;
t264 = t210 - t280;
t263 = qJDD(3) * t239 + t349 * t432;
t256 = g(1) * t119 - g(2) * t121 + g(3) * t393 - t3;
t126 = -t231 * t389 + t236 * t331;
t58 = t100 * t236 - t231 * t329 + t235 * t302;
t255 = t124 * t29 - t126 * t30 - t270 * t60 + t58 * t91;
t254 = -t123 * t147 + t192 * t408 - t236 * t30 + t91 * t358;
t252 = t279 - t291;
t251 = -t123 * t29 - t125 * t30 - t270 * t408 + t407 * t91;
t249 = -t108 * t30 + t269 * t29 - t62 * t91 + t264;
t248 = t124 * t147 + t192 * t60 + t233 * t30 + t356 * t91;
t246 = t192 * t27 + t256;
t244 = qJD(4) * t283 - t34 * t232 + t33 * t235;
t243 = t250 * t235;
t53 = -pkin(4) * t250 + t105;
t218 = qJDD(3) * t236;
t215 = -pkin(4) * t431 - pkin(5);
t212 = pkin(4) * t231 + qJ(6);
t208 = pkin(4) * t378;
t190 = t233 * t374;
t163 = t216 * t381;
t140 = -t232 * t234 + t233 * t378;
t138 = t233 * t382 + t388;
t137 = -t338 + t378;
t110 = -t232 * t384 + t150;
t97 = t147 * t233 + t192 * t356;
t87 = -pkin(5) * t268 - qJ(6) * t158 - t216;
t69 = -qJD(4) * t111 - t239 * t322 + t130;
t67 = pkin(5) * t124 - qJ(6) * t126 + t153;
t46 = -t233 * pkin(5) - t49;
t45 = qJ(6) * t233 + t419;
t43 = pkin(4) * t155 + t51;
t26 = t192 * qJ(6) + t28;
t25 = -t192 * pkin(5) + t372;
t23 = t147 * t158 + t192 * t409 - t270 * t361;
t13 = pkin(5) * t60 + qJ(6) * t58 - qJD(6) * t126 + t109;
t10 = -pkin(5) * t356 - t12;
t9 = -t126 * t29 - t270 * t58;
t8 = qJ(6) * t356 + qJD(6) * t233 + t11;
t7 = -t158 * t29 + t270 * t409;
t6 = t126 * t147 - t192 * t58 - t233 * t29 + t270 * t356;
t5 = t30 * pkin(5) + t29 * qJ(6) - qJD(6) * t270 + t53;
t2 = t311 - t441;
t1 = t3 + t445;
t4 = [0, 0, 0, 0, 0, qJDD(1), t444, t291, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t444 - 0.2e1 * t405, t252, -t306 * pkin(1) - g(1) * (-pkin(1) * t234 + t222) - g(2) * t367 + t368, qJDD(1) * t229 - 0.2e1 * t299, -0.2e1 * t233 * t346 + 0.2e1 * t349 * t365, -t233 * t240 + t218, qJDD(1) * t228 + 0.2e1 * t299, -t236 * t240 - t348, 0, t263 * t236 + (t252 - t373) * t233, -t263 * t233 + (t279 - t373) * t236 - t369, -t239 * t307 - t310 + t444, -g(1) * (t234 * t239 + t222) - t303 + t239 * t310 + t368, t155 * t443 - t84 * t379 (-t154 * t235 + t155 * t232) * t358 + (t243 + t411 + (-t397 - t399) * qJD(4)) * t236 (-t204 * t357 - t84) * t233 + (t266 + t360) * t236, -t154 * t452 - t250 * t389 ((t204 + t362) * t359 + t276) * t233 + (t154 * qJD(3) - t267) * t236, t151 * t233 + t204 * t356, -g(1) * t140 - g(2) * t138 + t110 * t151 + t69 * t204 + (t34 + (-t145 * t232 - t154 * t239) * qJD(3)) * t233 + (t80 * qJD(3) + t105 * t232 + t235 * t350 + t239 * t250) * t236, g(1) * t139 - g(2) * t137 - t111 * t151 - t204 * t68 + (-t33 + (-t145 * t235 + t155 * t239) * qJD(3)) * t233 + (-qJD(3) * t81 + t105 * t235 - t232 * t350 + t239 * t84) * t236, t68 * t154 + t111 * t276 - t69 * t155 + t110 * t84 + (t412 + (qJD(1) * t111 + t81) * t232) * t358 + (qJD(4) * t282 - t232 * t33 - t235 * t34) * t236 + t369, t33 * t111 + t81 * t68 + t34 * t110 + t80 * t69 - g(1) * (pkin(3) * t385 - pkin(8) * t377 + t222) - t303 + (-t105 * t236 + t145 * t358) * t239 + (-g(1) * t239 - g(2) * t294) * t234, t9, t255, t6, t286, -t248, t97, t104 * t60 + t109 * t91 + t12 * t192 + t124 * t53 + t147 * t49 + t153 * t30 - t233 * t311 + t27 * t356 + t292, -t104 * t58 + t109 * t270 - t11 * t192 + t126 * t53 - t147 * t419 - t153 * t29 - t233 * t3 - t28 * t356 - t293, -t11 * t91 - t12 * t270 - t124 * t3 + t126 * t311 + t27 * t58 - t28 * t60 + t29 * t49 - t30 * t419 + t369, -g(1) * t335 - g(2) * t273 + t104 * t109 + t28 * t11 + t27 * t12 + t53 * t153 + t3 * t419 - t311 * t49 - t275, t9, t6, -t255, t97, t248, t286, -t10 * t192 + t124 * t5 + t13 * t91 - t147 * t46 - t2 * t233 - t25 * t356 + t30 * t67 + t35 * t60 + t292, -t1 * t124 + t10 * t270 + t126 * t2 - t25 * t58 - t26 * t60 - t29 * t46 - t30 * t45 - t8 * t91 + t369, t1 * t233 - t126 * t5 - t13 * t270 + t147 * t45 + t192 * t8 + t26 * t356 + t29 * t67 + t35 * t58 + t293, t1 * t45 + t26 * t8 + t5 * t67 + t35 * t13 + t2 * t46 + t25 * t10 - g(1) * (pkin(5) * t121 + qJ(6) * t120 + t335) - g(2) * (pkin(5) * t119 + qJ(6) * t118 + t273) - t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t241, t288 + t306, 0, 0, 0, 0, 0, 0, t233 * t363 + t218, t236 * t363 - t348, -t307, t310 + t288, 0, 0, 0, 0, 0, 0, t236 * t276 + (-t390 + (-t154 + t321) * qJD(3)) * t233 - t436 * t204, t236 * t84 + (t360 - t401) * t233 + t437 * t204 (t276 * t235 + (t235 * t316 - t84) * t232) * t233 + t436 * t155 - t437 * t154, t283 * qJD(1) + (-qJD(3) * t282 - t105) * t236 + (qJD(3) * t145 + t244) * t233 - t444, 0, 0, 0, 0, 0, 0, t254, t439, t251, t104 * t358 + t123 * t311 + t125 * t3 - t236 * t53 + t27 * t408 - t28 * t407 - t444, 0, 0, 0, 0, 0, 0, t254, t251, -t439, t1 * t125 + t123 * t2 - t236 * t5 - t25 * t408 - t26 * t407 + t35 * t358 - t444; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t336, -t365 * t241, t346, -t336, -t347, qJDD(3), t429 + (-t277 + t225) * t236, t233 * t277 - t210 + t428, 0, 0, t204 * t397 - t411 (-t84 + t400) * t235 + (-t155 * qJD(4) + (-t155 + t359) * t362 + t276) * t232 (-t155 * t236 + t204 * t386) * qJD(1) + t267, -t154 * t396 + t243 (-t154 * t236 - t233 * t396) * qJD(1) + t266, -t204 * t361, -pkin(3) * t334 - t101 * t204 - t80 * t361 + t154 * t166 + (-t430 + t350 + (t145 + t418) * t362) * t232 + (t403 - t459) * t235, t81 * t361 - t155 * t166 + pkin(3) * t84 + t102 * t204 + (t145 * t204 - t430) * t235 + t459 * t232, t101 * t155 - t102 * t154 + t448 * t235 + (-t34 - t414) * t232 + (-t411 + t243 + (t397 - t399) * qJD(4)) * pkin(8) + t264, -t145 * t166 - t80 * t101 - t81 * t102 + t253 * pkin(3) + (-t233 * t444 + t244 - t428) * pkin(8), t7, -t434, t23, t265, -t438, -t323, -t268 * t53 - t216 * t30 + t296 * t91 + (-qJD(1) * t27 - t344) * t236 + t421 * t192 + t371 * t104 + t287, t104 * t409 + t158 * t53 - t192 * t422 + t216 * t29 + t270 * t296 + t28 * t361 + t458, t158 * t311 + t268 * t3 - t27 * t409 - t270 * t421 - t28 * t371 + t41 * t91 + t249, t3 * t108 - t311 * t269 - t53 * t216 - g(1) * (-t233 * t380 + t163) - g(2) * (-t216 * t377 + t190) - g(3) * (-t216 * t233 - t376) + t422 * t28 + t421 * t27 + t296 * t104, t7, t23, t434, -t323, t438, t265, -t268 * t5 + t30 * t87 + t424 * t91 + t371 * t35 + (qJD(1) * t25 - t344) * t236 - t420 * t192 + t287, t1 * t268 + t158 * t2 + t25 * t409 - t26 * t371 + t270 * t420 + t36 * t91 + t249, -t158 * t5 + t192 * t423 - t26 * t361 - t270 * t424 + t29 * t87 - t35 * t409 - t458, -g(1) * t163 - g(2) * t190 + t1 * t108 - t2 * t269 + t5 * t87 + t424 * t35 + t423 * t26 + t420 * t25 + (g(1) * t380 + g(3) * t278) * t233 + (g(3) * t238 + t225 * t278 - t226 * t285) * t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t398, -t154 ^ 2 + t155 ^ 2, -t400 - t84, t398, t155 * t204 + t250, t151, -t144 * t353 - g(1) * t137 - g(2) * t139 - t145 * t155 + t414 + t86 + (-qJD(4) * t136 - t106 + t428) * t232, g(1) * t138 - g(2) * t140 + g(3) * t379 - t145 * t154 - t448, 0, 0, t455, -t340, t451, -t455, -t454, t147, t31 * t192 + (t147 * t431 - t155 * t91 - t192 * t351) * pkin(4) + t440, t456 + t32 * t192 + (-t147 * t231 - t155 * t270 - t192 * t317) * pkin(4) + t256, -t27 * t91 + t28 * t270 - t31 * t270 + t32 * t91 + (t431 * t29 - t231 * t30 + (t231 * t270 - t431 * t91) * qJD(5)) * pkin(4), -t28 * t32 + t27 * t31 - g(1) * t208 - g(2) * t370 + (-t311 * t431 - t104 * t155 + t3 * t231 + t280 * t232 + (-t231 * t27 + t28 * t431) * qJD(5)) * pkin(4), t455, t451, t340, t147, t454, -t455, -t147 * t215 - t192 * t298 - t43 * t91 - t242, -t212 * t30 - t215 * t29 + (t26 + t298) * t270 + (t25 - t406) * t91, t147 * t212 + t192 * t406 + t270 * t43 - t256 + t445 - t457, t1 * t212 + t2 * t215 - t35 * t43 - g(1) * (-pkin(4) * t338 + t208 + t309) - g(2) * (t308 + t370) - g(3) * (-t205 + t297) + t406 * t26 + t298 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t455, -t340, t451, -t455, -t454, t147, t417 + t440, t246 + t456, 0, 0, t455, t451, t340, t147, t454, -t455, -t51 * t91 + t131 - t242 + t417, pkin(5) * t29 - qJ(6) * t30 + (t26 - t28) * t270 + (t25 - t372) * t91, t270 * t51 + 0.2e1 * t128 + 0.2e1 * t168 - t246 - t457, -t2 * pkin(5) - g(1) * t309 - g(2) * t308 - g(3) * t297 + t1 * qJ(6) - t25 * t28 + t26 * t372 - t35 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147 + t455, t451, -t192 ^ 2 - t433, -t192 * t26 + t242;];
tau_reg  = t4;
