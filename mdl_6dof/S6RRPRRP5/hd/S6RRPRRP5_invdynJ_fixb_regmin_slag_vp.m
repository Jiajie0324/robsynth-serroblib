% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x28]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP5_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP5_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:05:29
% EndTime: 2019-03-09 12:05:52
% DurationCPUTime: 9.86s
% Computational Cost: add. (11603->607), mult. (32804->826), div. (0->0), fcn. (26950->12), ass. (0->308)
t238 = sin(pkin(6));
t247 = cos(qJ(2));
t391 = cos(pkin(11));
t315 = t247 * t391;
t298 = qJD(1) * t315;
t207 = t238 * t298;
t237 = sin(pkin(11));
t243 = sin(qJ(2));
t357 = qJD(1) * t243;
t331 = t238 * t357;
t287 = t237 * t331 - t207;
t436 = qJD(4) + t287;
t239 = cos(pkin(6));
t416 = pkin(1) * t239;
t226 = t247 * t416;
t221 = qJD(1) * t226;
t406 = pkin(8) + qJ(3);
t326 = t406 * t243;
t302 = t238 * t326;
t166 = -qJD(1) * t302 + t221;
t373 = t239 * t243;
t225 = pkin(1) * t373;
t375 = t238 * t247;
t167 = (t375 * t406 + t225) * qJD(1);
t314 = t391 * t167;
t111 = t166 * t237 + t314;
t242 = sin(qJ(4));
t246 = cos(qJ(4));
t443 = -t111 + t436 * (pkin(4) * t242 - pkin(10) * t246);
t423 = qJD(4) * t436;
t437 = t287 * t436 + t423;
t442 = t437 * t246;
t201 = -t247 * t237 - t243 * t391;
t266 = qJD(1) * t201;
t180 = t238 * t266;
t241 = sin(qJ(5));
t245 = cos(qJ(5));
t367 = t245 * t246;
t128 = -t180 * t241 - t287 * t367;
t353 = qJD(4) * t246;
t441 = -t245 * t353 + t128;
t358 = qJD(1) * t239;
t307 = qJD(2) + t358;
t152 = -t242 * t180 - t246 * t307;
t346 = qJD(1) * qJD(2);
t325 = t243 * t346;
t301 = t238 * t325;
t140 = -t237 * t301 + (qJD(2) * t298 - qJDD(1) * t201) * t238;
t345 = qJDD(1) * t239;
t223 = qJDD(2) + t345;
t290 = t246 * t140 + t242 * t223;
t252 = -qJD(4) * t152 + t290;
t440 = qJD(5) * t436 + t252;
t265 = qJD(2) * t201;
t344 = qJDD(1) * t243;
t324 = t237 * t344;
t300 = t238 * t315;
t205 = qJDD(1) * t300;
t341 = qJDD(4) - t205;
t250 = t341 + (-qJD(1) * t265 + t324) * t238;
t233 = pkin(2) * t247 + pkin(1);
t299 = t233 * t238;
t191 = -qJD(1) * t299 + qJD(3);
t108 = pkin(3) * t287 + pkin(9) * t180 + t191;
t354 = qJD(4) * t242;
t317 = qJD(2) * t406;
t269 = qJD(3) * t247 - t243 * t317;
t339 = qJD(2) * t416;
t304 = qJD(1) * t339;
t343 = t247 * qJDD(1);
t322 = t238 * t343;
t333 = pkin(8) * t322 + qJDD(1) * t225 + t247 * t304;
t103 = (qJ(3) * t343 + qJD(1) * t269) * t238 + t333;
t338 = pkin(1) * t343;
t220 = t239 * t338;
t355 = qJD(3) * t243;
t87 = -t243 * t304 + pkin(2) * t223 + t220 + (-qJDD(1) * t326 + (-t247 * t317 - t355) * qJD(1)) * t238;
t47 = t391 * t103 + t237 * t87;
t41 = pkin(9) * t223 + t47;
t254 = (qJD(2) * t266 - t324) * t238;
t139 = t205 + t254;
t293 = t233 * qJDD(1);
t342 = pkin(2) * t301 + qJDD(3);
t438 = t238 * t293 - t342;
t63 = -pkin(3) * t139 - pkin(9) * t140 - t438;
t270 = t239 * pkin(2) - t302;
t155 = qJD(2) * pkin(2) + qJD(1) * t270 + t221;
t91 = t237 * t155 + t314;
t83 = pkin(9) * t307 + t91;
t313 = t108 * t354 + t242 * t41 - t246 * t63 + t83 * t353;
t10 = -pkin(4) * t250 + t313;
t240 = -qJ(6) - pkin(10);
t439 = -qJ(6) * t152 + qJD(5) * t240;
t184 = t201 * t239;
t244 = sin(qJ(1));
t248 = cos(qJ(1));
t371 = t243 * t237;
t278 = t315 - t371;
t144 = -t184 * t248 + t244 * t278;
t374 = t238 * t248;
t130 = t144 * t246 - t242 * t374;
t268 = t239 * t278;
t143 = t244 * t201 + t248 * t268;
t435 = t130 * t241 + t143 * t245;
t434 = t130 * t245 - t143 * t241;
t415 = pkin(5) * t241;
t332 = pkin(9) + t415;
t383 = t287 * t246;
t127 = t245 * t180 - t241 * t383;
t350 = qJD(5) * t245;
t294 = t242 * t350 - t127;
t154 = -t246 * t180 + t242 * t307;
t99 = t245 * t154 + t241 * t436;
t432 = t294 * t99;
t97 = t154 * t241 - t245 * t436;
t431 = t436 * t97;
t230 = pkin(2) * t237 + pkin(9);
t381 = t230 * t241;
t430 = t245 * t443 + t354 * t381;
t150 = qJD(5) + t152;
t351 = qJD(5) * t241;
t263 = -t242 * t351 - t441;
t428 = t263 * t150;
t368 = t244 * t247;
t369 = t243 * t248;
t194 = -t239 * t368 - t369;
t360 = pkin(8) * t375 + t225;
t234 = t238 ^ 2;
t417 = pkin(1) * t234;
t427 = t239 * t360 + t243 * t417;
t426 = t353 + t383;
t384 = t287 * t242;
t425 = t354 + t384;
t231 = -pkin(2) * t391 - pkin(3);
t198 = -t246 * pkin(4) - t242 * pkin(10) + t231;
t159 = t237 * t167;
t112 = t166 * t391 - t159;
t122 = pkin(2) * t331 - pkin(3) * t180 + pkin(9) * t287;
t364 = t246 * t112 + t242 * t122;
t51 = -pkin(10) * t180 + t364;
t424 = -t198 * t350 - t241 * t443 + t245 * t51;
t146 = t201 * t248 - t244 * t268;
t182 = t238 * t371 - t300;
t272 = -g(1) * t146 - g(2) * t143 + g(3) * t182;
t183 = t201 * t238;
t163 = -t183 * t246 + t239 * t242;
t124 = t163 * t241 - t182 * t245;
t145 = -t244 * t184 - t248 * t278;
t376 = t238 * t244;
t134 = -t145 * t246 + t242 * t376;
t70 = -t134 * t241 - t146 * t245;
t422 = -g(1) * t70 + g(2) * t435 + g(3) * t124;
t46 = -t237 * t103 + t391 * t87;
t40 = -t223 * pkin(3) - t46;
t421 = t40 - t272;
t420 = t99 ^ 2;
t419 = 0.2e1 * t234;
t249 = qJD(1) ^ 2;
t414 = pkin(9) * t183;
t412 = g(1) * t194;
t411 = g(1) * t244;
t407 = g(3) * t247;
t49 = t242 * t108 + t246 * t83;
t36 = pkin(10) * t436 + t49;
t90 = t155 * t391 - t159;
t82 = -pkin(3) * t307 - t90;
t43 = t152 * pkin(4) - t154 * pkin(10) + t82;
t19 = -t241 * t36 + t245 * t43;
t12 = -qJ(6) * t99 + t19;
t11 = pkin(5) * t150 + t12;
t405 = -t12 + t11;
t48 = t246 * t108 - t242 * t83;
t86 = pkin(4) * t154 + pkin(10) * t152;
t404 = t241 * t86 + t245 * t48;
t165 = t226 + t270;
t173 = qJ(3) * t375 + t360;
t120 = t237 * t165 + t391 * t173;
t110 = pkin(9) * t239 + t120;
t126 = pkin(3) * t182 - t299 + t414;
t365 = t246 * t110 + t242 * t126;
t56 = pkin(10) * t182 + t365;
t119 = t165 * t391 - t237 * t173;
t109 = -t239 * pkin(3) - t119;
t162 = -t183 * t242 - t239 * t246;
t62 = t162 * pkin(4) - t163 * pkin(10) + t109;
t402 = t241 * t62 + t245 * t56;
t203 = t230 * t367;
t349 = qJD(6) * t245;
t389 = qJ(6) * t242;
t401 = pkin(5) * t384 + qJ(6) * t128 + t241 * t51 - t242 * t349 + (pkin(5) * t242 - qJ(6) * t367) * qJD(4) + (-t203 + (-t198 + t389) * t241) * qJD(5) + t430;
t352 = qJD(5) * t230;
t372 = t242 * t245;
t400 = qJ(6) * t127 + (-qJ(6) * qJD(5) - qJD(4) * t230) * t372 + (-qJD(6) * t242 + (-qJ(6) * qJD(4) - t352) * t246) * t241 - t424;
t399 = t150 * t97;
t398 = t287 * t99;
t310 = t242 * t140 - t246 * t223;
t69 = t154 * qJD(4) + t310;
t68 = qJDD(5) + t69;
t397 = t241 * t68;
t396 = t245 * t68;
t31 = t154 * t350 + t241 * t440 - t245 * t250;
t395 = t246 * t31;
t394 = t99 * t150;
t393 = t241 * t439 + t349 - t404;
t79 = t245 * t86;
t392 = -pkin(5) * t154 - t79 + t439 * t245 + (-qJD(6) + t48) * t241;
t388 = qJD(5) * t97;
t308 = t150 * t245;
t385 = t154 * t180;
t382 = t180 * t152;
t380 = t230 * t242;
t379 = t230 * t246;
t378 = t234 * t249;
t377 = t238 * t243;
t370 = t243 * t244;
t366 = t247 * t248;
t361 = t241 * t198 + t203;
t235 = t243 ^ 2;
t359 = -t247 ^ 2 + t235;
t356 = qJD(2) * t243;
t347 = qJD(4) - t207;
t337 = t99 * t353;
t336 = t247 * t378;
t334 = t239 * t366;
t330 = t238 * t356;
t328 = t238 * t239 * t249;
t327 = t406 * t238;
t323 = t238 * t344;
t321 = t230 + t415;
t320 = g(2) * t374 - g(3) * t239;
t319 = -t241 * t56 + t245 * t62;
t30 = t154 * t351 - t241 * t250 - t245 * t440;
t318 = t246 * t30 + t99 * t354;
t312 = -t242 * t110 + t126 * t246;
t311 = -t242 * t112 + t122 * t246;
t222 = t247 * t339;
t156 = t238 * t269 + t222;
t157 = -t238 * t355 + (-t247 * t327 - t225) * qJD(2);
t84 = t156 * t237 - t391 * t157;
t188 = pkin(2) * t373 - t327;
t309 = -t244 * t188 + t248 * t233;
t306 = qJD(2) + 0.2e1 * t358;
t305 = t223 + t345;
t303 = -t31 * t372 + t441 * t97;
t129 = t144 * t242 + t246 * t374;
t133 = -t145 * t242 - t246 * t376;
t296 = -g(1) * t129 + g(2) * t133;
t295 = g(1) * t248 + g(2) * t244;
t20 = t241 * t43 + t245 * t36;
t13 = -qJ(6) * t97 + t20;
t292 = -t11 * t245 - t13 * t241;
t291 = t11 * t241 - t13 * t245;
t125 = t163 * t245 + t182 * t241;
t289 = -t188 * t248 - t233 * t244;
t178 = t238 * t265;
t179 = t278 * t238 * qJD(2);
t123 = pkin(2) * t330 - pkin(3) * t178 - pkin(9) * t179;
t85 = t156 * t391 + t237 * t157;
t288 = -t110 * t353 + t123 * t246 - t126 * t354 - t242 * t85;
t55 = -pkin(4) * t182 - t312;
t50 = pkin(4) * t180 - t311;
t17 = t69 * pkin(4) - pkin(10) * t252 + t40;
t283 = -t108 * t353 - t242 * t63 - t246 * t41 + t354 * t83;
t9 = pkin(10) * t250 - t283;
t285 = -t241 * t17 - t245 * t9 - t43 * t350 + t351 * t36;
t284 = -t150 * t350 - t397;
t276 = -t110 * t354 + t242 * t123 + t126 * t353 + t246 * t85;
t25 = -pkin(10) * t178 + t276;
t117 = qJD(4) * t163 + t179 * t242;
t118 = -qJD(4) * t162 + t179 * t246;
t34 = pkin(4) * t117 - pkin(10) * t118 + t84;
t282 = t241 * t34 + t245 * t25 + t62 * t350 - t351 * t56;
t281 = (-t241 * t353 + t127) * t150;
t35 = -pkin(4) * t436 - t48;
t280 = -pkin(10) * t68 + t150 * t35;
t275 = g(1) * t133 + g(2) * t129 + g(3) * t162;
t274 = -g(1) * t134 - g(2) * t130 - g(3) * t163;
t273 = g(1) * t145 - g(2) * t144 + g(3) * t183;
t26 = pkin(4) * t178 - t288;
t4 = -qJD(5) * t20 + t245 * t17 - t241 * t9;
t258 = -qJD(5) * t402 - t241 * t25 + t245 * t34;
t257 = t150 * t352 - t272;
t256 = pkin(10) * qJD(5) * t150 + t10 - t275;
t255 = -t242 * t437 + t246 * t250;
t251 = -qJDD(4) + t139;
t7 = t31 * pkin(5) + qJDD(6) + t10;
t232 = pkin(5) * t245 + pkin(4);
t213 = t240 * t245;
t212 = t240 * t241;
t211 = pkin(2) * t334;
t195 = -t239 * t370 + t366;
t193 = -t239 * t369 - t368;
t192 = -t334 + t370;
t187 = t245 * t198;
t151 = -t241 * t389 + t361;
t141 = -qJ(6) * t372 + t187 + (-pkin(5) - t381) * t246;
t96 = t97 ^ 2;
t71 = t134 * t245 - t146 * t241;
t54 = -qJD(5) * t124 + t118 * t245 - t178 * t241;
t53 = qJD(5) * t125 + t118 * t241 + t178 * t245;
t28 = t97 * pkin(5) + qJD(6) + t35;
t21 = -qJ(6) * t124 + t402;
t16 = pkin(5) * t162 - qJ(6) * t125 + t319;
t6 = -qJ(6) * t53 - qJD(6) * t124 + t282;
t5 = pkin(5) * t117 - qJ(6) * t54 - qJD(6) * t125 + t258;
t2 = -qJ(6) * t31 - qJD(6) * t97 - t285;
t1 = pkin(5) * t68 + qJ(6) * t30 - qJD(6) * t99 + t4;
t3 = [qJDD(1), -g(2) * t248 + t411, t295 (qJDD(1) * t235 + 0.2e1 * t247 * t325) * t234 (t243 * t343 - t346 * t359) * t419 (qJD(2) * t247 * t306 + t243 * t305) * t238 (t247 * t305 - t306 * t356) * t238, t223 * t239, t338 * t419 + (-pkin(8) * t377 + t226) * t223 + (-pkin(8) * t323 + t220) * t239 - g(1) * t193 - g(2) * t195 - t360 * qJD(2) ^ 2 - 0.2e1 * t427 * t346 -(-pkin(8) * t330 + t222) * t307 - t360 * t223 - (-pkin(8) * t301 + t333) * t239 - g(1) * t192 - g(2) * t194 + 0.2e1 * (-t247 * t346 - t344) * t417, -t119 * t140 + t120 * t139 + t178 * t91 - t179 * t90 - t180 * t84 - t182 * t47 + t183 * t46 - t238 * t295 - t287 * t85, t47 * t120 + t91 * t85 + t46 * t119 - t90 * t84 - g(1) * t289 - g(2) * t309 + (pkin(2) * t191 * t356 + t233 * t438) * t238, t154 * t118 + t163 * t252, -t154 * t117 - t118 * t152 - t162 * t252 - t163 * t69, t118 * t347 + t163 * t341 + t252 * t182 - t154 * t178 + (t163 * t324 + (t118 * t371 - t163 * t265) * qJD(1)) * t238, -t117 * t347 - t162 * t341 - t69 * t182 + t152 * t178 + (-t162 * t324 + (-t117 * t371 + t162 * t265) * qJD(1)) * t238, t341 * t182 - t347 * t178 + (t182 * t324 + (-t178 * t371 - t182 * t265) * qJD(1)) * t238, g(1) * t130 - g(2) * t134 + t109 * t69 + t82 * t117 + t84 * t152 + t40 * t162 - t48 * t178 - t182 * t313 + t250 * t312 + t288 * t436, t109 * t252 + t82 * t118 + t84 * t154 + t40 * t163 + t49 * t178 + t182 * t283 + t251 * t365 - t276 * t436 + t296, -t125 * t30 + t54 * t99, t124 * t30 - t125 * t31 - t53 * t99 - t54 * t97, t117 * t99 + t125 * t68 + t150 * t54 - t162 * t30, -t117 * t97 - t124 * t68 - t150 * t53 - t162 * t31, t117 * t150 + t162 * t68, g(1) * t434 - g(2) * t71 + t10 * t124 + t19 * t117 + t258 * t150 + t4 * t162 + t26 * t97 + t55 * t31 + t319 * t68 + t35 * t53, -g(1) * t435 - g(2) * t70 + t10 * t125 - t20 * t117 - t282 * t150 + t285 * t162 + t26 * t99 - t55 * t30 + t35 * t54 - t402 * t68, -t1 * t125 - t11 * t54 - t124 * t2 - t13 * t53 + t16 * t30 - t21 * t31 - t5 * t99 - t6 * t97 - t296, t2 * t21 + t13 * t6 + t1 * t16 + t11 * t5 + t7 * (pkin(5) * t124 + t55) + t28 * (pkin(5) * t53 + t26) - g(1) * (-pkin(3) * t144 + t129 * t240 - t130 * t232 + t143 * t332 + t289) - g(2) * (-pkin(3) * t145 - t133 * t240 + t134 * t232 - t146 * t332 + t309); 0, 0, 0, -t243 * t336, t359 * t378, -t247 * t328 + t323, t243 * t328 + t322, t223, -t412 + g(2) * t192 + t220 + (-pkin(8) * t344 - t407) * t238 + t427 * t249, pkin(1) * t336 + (-pkin(8) * t331 + t221) * t358 + g(1) * t195 - g(2) * t193 + g(3) * t377 + t221 * qJD(2) - t333 -(-t111 + t91) * t180 - (-t112 + t90) * t287 + (t139 * t237 - t140 * t391) * pkin(2), -g(2) * t211 + t90 * t111 - t91 * t112 + (t47 * t237 + t46 * t391 - t412 + g(2) * t370 + (-t191 * t357 - t407) * t238) * pkin(2) (qJD(4) * t180 + t223) * t242 ^ 2 + ((qJD(4) * t307 + t140) * t242 + t436 * t154) * t246, -t152 * t426 - t154 * t425 - t242 * t69 + t246 * t252, t250 * t242 + t385 + t442, t255 - t382, t436 * t180, -t111 * t152 + t48 * t180 + t231 * t69 - t246 * t421 - t250 * t380 - t311 * t436 - t379 * t423 + t425 * t82, -t111 * t154 - t49 * t180 + t231 * t252 + t242 * t421 + t251 * t379 + t364 * t436 + t380 * t423 + t426 * t82, t263 * t99 - t30 * t372, -t432 + (-t337 + (t30 + t388) * t242) * t241 + t303 (t396 + t398) * t242 + t428 + t318, t395 + t281 + (t284 - t431) * t242, t150 * t242 * t436 - t246 * t68, -t35 * t127 + t187 * t68 - t50 * t97 + t430 * t150 + ((-qJD(5) * t198 + t51) * t150 + t273) * t241 + (-t68 * t381 - t4 + (t230 * t97 + t241 * t35) * qJD(4) - t257 * t245) * t246 + (t10 * t241 + t19 * t436 + t230 * t31 + t35 * t350) * t242, -t361 * t68 - t50 * t99 - t35 * t128 + t424 * t150 + t273 * t245 + (-t285 + (t230 * t99 + t245 * t35) * qJD(4) + t257 * t241) * t246 + (-t35 * t351 + t10 * t245 - t20 * t287 - t230 * t30 + (t230 * t308 - t20) * qJD(4)) * t242, t11 * t128 + t127 * t13 + t141 * t30 - t151 * t31 - t401 * t99 - t400 * t97 + t292 * t353 + (qJD(5) * t291 - t1 * t245 - t2 * t241 + t272) * t242, t2 * t151 + t1 * t141 - g(1) * (pkin(2) * t194 - t145 * t332) - g(2) * (-pkin(2) * t370 + t144 * t332 + t211) - g(3) * (pkin(2) * t375 - t183 * t415 - t414) + t321 * t7 * t242 + t400 * t13 + t401 * t11 + (pkin(5) * t294 + t321 * t353 - t50) * t28 + t272 * (t232 * t246 - t240 * t242 + pkin(3)); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t180 ^ 2 - t287 ^ 2, t287 * t91 - t180 * t90 + (-t293 - t411) * t238 + t320 + t342, 0, 0, 0, 0, 0, t255 + t382, t385 - t442 + (-t341 + t254) * t242, 0, 0, 0, 0, 0, -t395 + t281 + (t284 + t431) * t242 (-t396 + t398) * t242 - t428 + t318, t432 + (t337 + (-t30 + t388) * t242) * t241 + t303, -g(1) * t376 + t11 * t127 - t128 * t13 + (-qJD(4) * t291 - t7) * t246 + (qJD(5) * t292 - t1 * t241 + t2 * t245 + t28 * t436) * t242 + t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154 * t152, -t152 ^ 2 + t154 ^ 2, t152 * t287 + t290, t154 * t287 - t310, t250, -t82 * t154 + t436 * t49 + t275 - t313, t82 * t152 + t436 * t48 - t274 + t283, -t241 * t30 + t308 * t99 (-t30 - t399) * t245 + (-t31 - t394) * t241, t150 * t308 - t154 * t99 + t397, -t150 ^ 2 * t241 + t154 * t97 + t396, -t150 * t154, -pkin(4) * t31 - t79 * t150 - t19 * t154 - t49 * t97 + (t48 * t150 + t280) * t241 - t256 * t245, pkin(4) * t30 + t150 * t404 + t20 * t154 + t241 * t256 + t245 * t280 - t49 * t99, t212 * t30 + t213 * t31 - t392 * t99 - t393 * t97 + (-t11 * t150 + t2) * t245 + (-t13 * t150 - t1) * t241 + t274, -t2 * t213 + t1 * t212 - t7 * t232 - g(1) * (-t133 * t232 - t134 * t240) - g(2) * (-t129 * t232 - t130 * t240) - g(3) * (-t162 * t232 - t163 * t240) + (t150 * t415 - t49) * t28 + t393 * t13 + t392 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 * t97, -t96 + t420, -t30 + t399, -t31 + t394, t68, t20 * t150 - t35 * t99 + t4 + t422, g(1) * t71 + g(2) * t434 + g(3) * t125 + t19 * t150 + t35 * t97 + t285, pkin(5) * t30 - t405 * t97, t405 * t13 + (-t28 * t99 + t1 + t422) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96 - t420, t11 * t99 + t13 * t97 - t275 + t7;];
tau_reg  = t3;
