% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:56:36
% EndTime: 2019-05-06 17:56:45
% DurationCPUTime: 10.22s
% Computational Cost: add. (72759->314), mult. (191837->476), div. (0->0), fcn. (153719->12), ass. (0->265)
t2421 = sin(pkin(11));
t2423 = cos(pkin(11));
t2422 = sin(pkin(6));
t2431 = cos(qJ(2));
t2473 = t2422 * t2431;
t2469 = qJD(1) * t2473;
t2427 = sin(qJ(2));
t2474 = t2422 * t2427;
t2470 = qJD(1) * t2474;
t2384 = t2421 * t2470 - t2423 * t2469;
t2439 = qJD(4) + t2384;
t2438 = t2439 ^ 2;
t2386 = (t2421 * t2431 + t2423 * t2427) * t2422 * qJD(1);
t2424 = cos(pkin(6));
t2415 = qJD(1) * t2424 + qJD(2);
t2426 = sin(qJ(4));
t2430 = cos(qJ(4));
t2369 = t2386 * t2426 - t2430 * t2415;
t2368 = qJD(5) + t2369;
t2493 = qJD(5) + t2368;
t2471 = qJDD(1) * t2422;
t2394 = qJD(2) * t2469 + t2427 * t2471;
t2395 = -qJD(2) * t2470 + t2431 * t2471;
t2365 = t2423 * t2394 + t2421 * t2395;
t2478 = t2384 * t2415;
t2347 = t2365 - t2478;
t2414 = t2424 * qJDD(1) + qJDD(2);
t2447 = -t2430 * t2365 - t2426 * t2414;
t2337 = -t2369 * qJD(4) - t2447;
t2492 = t2369 * t2439 - t2337;
t2371 = t2386 * t2430 + t2415 * t2426;
t2425 = sin(qJ(5));
t2429 = cos(qJ(5));
t2352 = t2371 * t2425 - t2429 * t2439;
t2491 = t2352 ^ 2;
t2354 = t2429 * t2371 + t2425 * t2439;
t2490 = t2354 ^ 2;
t2489 = t2368 ^ 2;
t2488 = t2369 ^ 2;
t2487 = t2371 ^ 2;
t2486 = t2384 ^ 2;
t2485 = t2386 ^ 2;
t2484 = t2415 ^ 2;
t2483 = -2 * qJD(3);
t2482 = -2 * qJD(6);
t2481 = t2352 * t2354;
t2480 = t2369 * t2371;
t2479 = t2384 * t2386;
t2477 = t2386 * t2415;
t2428 = sin(qJ(1));
t2432 = cos(qJ(1));
t2406 = t2428 * g(1) - g(2) * t2432;
t2433 = qJD(1) ^ 2;
t2390 = pkin(8) * t2422 * t2433 + qJDD(1) * pkin(1) + t2406;
t2476 = t2390 * t2424;
t2475 = t2422 ^ 2 * t2433;
t2472 = qJD(5) - t2368;
t2407 = -g(1) * t2432 - g(2) * t2428;
t2391 = -pkin(1) * t2433 + pkin(8) * t2471 + t2407;
t2357 = -g(3) * t2474 + t2431 * t2391 + t2427 * t2476;
t2440 = pkin(2) * t2415 - qJ(3) * t2470;
t2420 = t2431 ^ 2;
t2468 = t2420 * t2475;
t2330 = -pkin(2) * t2468 + t2395 * qJ(3) - t2415 * t2440 + t2357;
t2463 = -t2427 * t2391 + t2431 * t2476;
t2467 = t2427 * t2475;
t2435 = t2414 * pkin(2) - t2394 * qJ(3) + (pkin(2) * t2467 + (qJ(3) * qJD(1) * t2415 - g(3)) * t2422) * t2431 + t2463;
t2297 = t2423 * t2330 + t2384 * t2483 + t2421 * t2435;
t2363 = pkin(3) * t2384 - pkin(9) * t2386;
t2284 = -pkin(3) * t2484 + pkin(9) * t2414 - t2363 * t2384 + t2297;
t2376 = -t2424 * g(3) - t2422 * t2390;
t2343 = -t2395 * pkin(2) - qJ(3) * t2468 + t2440 * t2470 + qJDD(3) + t2376;
t2443 = t2394 * t2421 - t2395 * t2423;
t2345 = t2443 + t2477;
t2434 = t2345 * pkin(3) - pkin(9) * t2347 + t2343;
t2267 = t2430 * t2284 + t2426 * t2434;
t2344 = pkin(4) * t2369 - pkin(10) * t2371;
t2441 = qJDD(4) + t2443;
t2255 = -pkin(4) * t2438 + pkin(10) * t2441 - t2369 * t2344 + t2267;
t2466 = t2421 * t2330 - t2423 * t2435;
t2283 = -t2414 * pkin(3) - t2484 * pkin(9) + ((2 * qJD(3)) + t2363) * t2386 + t2466;
t2464 = t2426 * t2365 - t2430 * t2414;
t2311 = (0.2e1 * qJD(4) + t2384) * t2371 + t2464;
t2263 = t2311 * pkin(4) + pkin(10) * t2492 + t2283;
t2232 = t2429 * t2255 + t2425 * t2263;
t2231 = -t2425 * t2255 + t2429 * t2263;
t2266 = -t2284 * t2426 + t2430 * t2434;
t2465 = t2425 * t2337 - t2429 * t2441;
t2462 = t2415 * t2469;
t2436 = -t2429 * t2337 - t2425 * t2441;
t2288 = t2352 * t2472 + t2436;
t2437 = -t2371 * qJD(4) - qJDD(5) - t2464;
t2301 = -t2437 - t2481;
t2225 = pkin(5) * t2301 + qJ(6) * t2288 + t2354 * t2482 + t2231;
t2329 = pkin(5) * t2368 - qJ(6) * t2354;
t2442 = -qJD(5) * t2354 - t2465;
t2226 = -t2368 * t2329 + t2442 * qJ(6) + (-pkin(5) * t2352 + t2482) * t2352 + t2232;
t2210 = -t2225 * t2425 + t2226 * t2429;
t2254 = -t2441 * pkin(4) - t2438 * pkin(10) + t2344 * t2371 - t2266;
t2233 = -pkin(5) * t2442 - qJ(6) * t2491 + t2329 * t2354 + qJDD(6) + t2254;
t2204 = t2210 * t2430 + t2233 * t2426;
t2209 = t2225 * t2429 + t2226 * t2425;
t2195 = t2204 * t2421 - t2209 * t2423;
t2196 = t2204 * t2423 + t2209 * t2421;
t2461 = t2195 * t2431 + t2196 * t2427;
t2222 = -t2231 * t2425 + t2232 * t2429;
t2214 = t2222 * t2430 + t2254 * t2426;
t2221 = t2231 * t2429 + t2232 * t2425;
t2199 = t2214 * t2421 - t2221 * t2423;
t2200 = t2214 * t2423 + t2221 * t2421;
t2460 = t2199 * t2431 + t2200 * t2427;
t2286 = -t2354 * t2472 - t2465;
t2265 = t2286 * t2429 - t2288 * t2425;
t2309 = -t2490 - t2491;
t2251 = t2265 * t2430 + t2309 * t2426;
t2264 = t2286 * t2425 + t2288 * t2429;
t2227 = t2251 * t2421 - t2264 * t2423;
t2228 = t2251 * t2423 + t2264 * t2421;
t2459 = t2227 * t2431 + t2228 * t2427;
t2239 = -t2266 * t2426 + t2267 * t2430;
t2229 = t2239 * t2421 - t2283 * t2423;
t2230 = t2239 * t2423 + t2283 * t2421;
t2458 = t2229 * t2431 + t2230 * t2427;
t2310 = -t2489 - t2491;
t2273 = -t2301 * t2425 + t2310 * t2429;
t2285 = t2354 * t2493 + t2465;
t2258 = t2273 * t2430 + t2285 * t2426;
t2272 = t2301 * t2429 + t2310 * t2425;
t2236 = t2258 * t2421 - t2272 * t2423;
t2237 = t2258 * t2423 + t2272 * t2421;
t2457 = t2236 * t2431 + t2237 * t2427;
t2302 = t2437 - t2481;
t2319 = -t2489 - t2490;
t2279 = t2302 * t2429 - t2319 * t2425;
t2287 = -t2352 * t2493 - t2436;
t2260 = t2279 * t2430 + t2287 * t2426;
t2278 = t2302 * t2425 + t2319 * t2429;
t2242 = t2260 * t2421 - t2278 * t2423;
t2243 = t2260 * t2423 + t2278 * t2421;
t2456 = t2242 * t2431 + t2243 * t2427;
t2296 = t2386 * t2483 - t2466;
t2268 = t2296 * t2423 + t2297 * t2421;
t2269 = -t2296 * t2421 + t2297 * t2423;
t2455 = t2268 * t2431 + t2269 * t2427;
t2312 = t2371 * t2384 - t2464;
t2314 = -t2369 * t2384 + t2447;
t2290 = t2312 * t2430 - t2314 * t2426;
t2328 = -t2487 - t2488;
t2270 = t2290 * t2421 - t2328 * t2423;
t2271 = t2290 * t2423 + t2328 * t2421;
t2454 = t2270 * t2431 + t2271 * t2427;
t2320 = t2441 - t2480;
t2334 = -t2438 - t2488;
t2304 = -t2320 * t2426 + t2334 * t2430;
t2276 = t2304 * t2421 - t2311 * t2423;
t2277 = t2304 * t2423 + t2311 * t2421;
t2453 = t2276 * t2431 + t2277 * t2427;
t2321 = -t2441 - t2480;
t2340 = -t2487 - t2438;
t2307 = t2321 * t2430 - t2340 * t2426;
t2280 = t2307 * t2421 + t2423 * t2492;
t2281 = t2307 * t2423 - t2421 * t2492;
t2452 = t2280 * t2431 + t2281 * t2427;
t2346 = -t2443 + t2477;
t2348 = -t2365 - t2478;
t2315 = t2346 * t2421 + t2348 * t2423;
t2316 = t2346 * t2423 - t2348 * t2421;
t2451 = t2315 * t2431 + t2316 * t2427;
t2358 = -t2484 - t2486;
t2359 = t2414 - t2479;
t2323 = t2358 * t2421 + t2359 * t2423;
t2324 = t2358 * t2423 - t2359 * t2421;
t2450 = t2323 * t2431 + t2324 * t2427;
t2360 = -t2414 - t2479;
t2367 = -t2484 - t2485;
t2332 = t2360 * t2421 + t2367 * t2423;
t2333 = t2360 * t2423 - t2367 * t2421;
t2449 = t2332 * t2431 + t2333 * t2427;
t2356 = -g(3) * t2473 + t2463;
t2448 = t2356 * t2431 + t2357 * t2427;
t2373 = t2462 - t2394;
t2399 = t2415 * t2470;
t2374 = t2395 + t2399;
t2446 = t2373 * t2431 + t2374 * t2427;
t2419 = t2427 ^ 2;
t2383 = -t2419 * t2475 - t2484;
t2405 = t2431 * t2467;
t2393 = t2405 - t2414;
t2445 = t2383 * t2431 + t2393 * t2427;
t2392 = t2405 + t2414;
t2396 = -t2484 - t2468;
t2444 = t2392 * t2431 + t2396 * t2427;
t2404 = -qJDD(1) * t2428 - t2432 * t2433;
t2403 = qJDD(1) * t2432 - t2428 * t2433;
t2397 = (-t2419 - t2420) * t2475;
t2375 = -t2395 + t2399;
t2372 = t2462 + t2394;
t2366 = -t2392 * t2427 + t2396 * t2431;
t2361 = -t2383 * t2427 + t2393 * t2431;
t2351 = -t2485 - t2486;
t2349 = -t2373 * t2427 + t2374 * t2431;
t2342 = -t2422 * t2375 + t2424 * t2444;
t2341 = t2424 * t2375 + t2422 * t2444;
t2339 = -t2422 * t2372 + t2424 * t2445;
t2338 = t2424 * t2372 + t2422 * t2445;
t2336 = -t2422 * t2397 + t2424 * t2446;
t2335 = t2424 * t2397 + t2422 * t2446;
t2322 = -t2356 * t2427 + t2357 * t2431;
t2318 = -t2422 * t2376 + t2424 * t2448;
t2317 = t2424 * t2376 + t2422 * t2448;
t2308 = -t2332 * t2427 + t2333 * t2431;
t2306 = t2321 * t2426 + t2340 * t2430;
t2303 = t2320 * t2430 + t2334 * t2426;
t2300 = -t2323 * t2427 + t2324 * t2431;
t2295 = -t2422 * t2347 + t2424 * t2449;
t2294 = t2424 * t2347 + t2422 * t2449;
t2293 = -t2315 * t2427 + t2316 * t2431;
t2292 = -t2422 * t2345 + t2424 * t2450;
t2291 = t2424 * t2345 + t2422 * t2450;
t2289 = t2312 * t2426 + t2314 * t2430;
t2275 = -t2422 * t2351 + t2424 * t2451;
t2274 = t2424 * t2351 + t2422 * t2451;
t2259 = t2279 * t2426 - t2287 * t2430;
t2257 = t2273 * t2426 - t2285 * t2430;
t2256 = -t2280 * t2427 + t2281 * t2431;
t2252 = -t2276 * t2427 + t2277 * t2431;
t2250 = t2265 * t2426 - t2309 * t2430;
t2249 = -t2270 * t2427 + t2271 * t2431;
t2248 = -t2422 * t2306 + t2424 * t2452;
t2247 = t2424 * t2306 + t2422 * t2452;
t2246 = -t2422 * t2303 + t2424 * t2453;
t2245 = t2424 * t2303 + t2422 * t2453;
t2244 = -t2268 * t2427 + t2269 * t2431;
t2241 = -t2422 * t2343 + t2424 * t2455;
t2240 = t2424 * t2343 + t2422 * t2455;
t2238 = t2266 * t2430 + t2267 * t2426;
t2235 = -t2422 * t2289 + t2424 * t2454;
t2234 = t2424 * t2289 + t2422 * t2454;
t2224 = -t2242 * t2427 + t2243 * t2431;
t2223 = -t2236 * t2427 + t2237 * t2431;
t2220 = -t2422 * t2259 + t2424 * t2456;
t2219 = t2424 * t2259 + t2422 * t2456;
t2218 = -t2229 * t2427 + t2230 * t2431;
t2217 = -t2227 * t2427 + t2228 * t2431;
t2216 = -t2422 * t2257 + t2424 * t2457;
t2215 = t2424 * t2257 + t2422 * t2457;
t2213 = t2222 * t2426 - t2254 * t2430;
t2212 = -t2422 * t2250 + t2424 * t2459;
t2211 = t2424 * t2250 + t2422 * t2459;
t2208 = -t2422 * t2238 + t2424 * t2458;
t2207 = t2424 * t2238 + t2422 * t2458;
t2206 = -t2220 * t2428 + t2224 * t2432;
t2205 = t2220 * t2432 + t2224 * t2428;
t2203 = t2210 * t2426 - t2233 * t2430;
t2202 = -t2216 * t2428 + t2223 * t2432;
t2201 = t2216 * t2432 + t2223 * t2428;
t2198 = -t2212 * t2428 + t2217 * t2432;
t2197 = t2212 * t2432 + t2217 * t2428;
t2194 = -t2199 * t2427 + t2200 * t2431;
t2193 = -t2422 * t2213 + t2424 * t2460;
t2192 = t2424 * t2213 + t2422 * t2460;
t2191 = -t2195 * t2427 + t2196 * t2431;
t2190 = -t2422 * t2203 + t2424 * t2461;
t2189 = t2424 * t2203 + t2422 * t2461;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2404, -t2403, 0, -t2406 * t2428 + t2407 * t2432, 0, 0, 0, 0, 0, 0, -t2342 * t2428 + t2366 * t2432, -t2339 * t2428 + t2361 * t2432, -t2336 * t2428 + t2349 * t2432, -t2318 * t2428 + t2322 * t2432, 0, 0, 0, 0, 0, 0, -t2292 * t2428 + t2300 * t2432, -t2295 * t2428 + t2308 * t2432, -t2275 * t2428 + t2293 * t2432, -t2241 * t2428 + t2244 * t2432, 0, 0, 0, 0, 0, 0, -t2246 * t2428 + t2252 * t2432, -t2248 * t2428 + t2256 * t2432, -t2235 * t2428 + t2249 * t2432, -t2208 * t2428 + t2218 * t2432, 0, 0, 0, 0, 0, 0, t2202, t2206, t2198, -t2193 * t2428 + t2194 * t2432, 0, 0, 0, 0, 0, 0, t2202, t2206, t2198, -t2190 * t2428 + t2191 * t2432; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2403, t2404, 0, t2406 * t2432 + t2407 * t2428, 0, 0, 0, 0, 0, 0, t2342 * t2432 + t2366 * t2428, t2339 * t2432 + t2361 * t2428, t2336 * t2432 + t2349 * t2428, t2318 * t2432 + t2322 * t2428, 0, 0, 0, 0, 0, 0, t2292 * t2432 + t2300 * t2428, t2295 * t2432 + t2308 * t2428, t2275 * t2432 + t2293 * t2428, t2241 * t2432 + t2244 * t2428, 0, 0, 0, 0, 0, 0, t2246 * t2432 + t2252 * t2428, t2248 * t2432 + t2256 * t2428, t2235 * t2432 + t2249 * t2428, t2208 * t2432 + t2218 * t2428, 0, 0, 0, 0, 0, 0, t2201, t2205, t2197, t2193 * t2432 + t2194 * t2428, 0, 0, 0, 0, 0, 0, t2201, t2205, t2197, t2190 * t2432 + t2191 * t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2341, t2338, t2335, t2317, 0, 0, 0, 0, 0, 0, t2291, t2294, t2274, t2240, 0, 0, 0, 0, 0, 0, t2245, t2247, t2234, t2207, 0, 0, 0, 0, 0, 0, t2215, t2219, t2211, t2192, 0, 0, 0, 0, 0, 0, t2215, t2219, t2211, t2189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2433, -qJDD(1), 0, t2407, 0, 0, 0, 0, 0, 0, t2366, t2361, t2349, t2322, 0, 0, 0, 0, 0, 0, t2300, t2308, t2293, t2244, 0, 0, 0, 0, 0, 0, t2252, t2256, t2249, t2218, 0, 0, 0, 0, 0, 0, t2223, t2224, t2217, t2194, 0, 0, 0, 0, 0, 0, t2223, t2224, t2217, t2191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2433, 0, t2406, 0, 0, 0, 0, 0, 0, t2342, t2339, t2336, t2318, 0, 0, 0, 0, 0, 0, t2292, t2295, t2275, t2241, 0, 0, 0, 0, 0, 0, t2246, t2248, t2235, t2208, 0, 0, 0, 0, 0, 0, t2216, t2220, t2212, t2193, 0, 0, 0, 0, 0, 0, t2216, t2220, t2212, t2190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2341, t2338, t2335, t2317, 0, 0, 0, 0, 0, 0, t2291, t2294, t2274, t2240, 0, 0, 0, 0, 0, 0, t2245, t2247, t2234, t2207, 0, 0, 0, 0, 0, 0, t2215, t2219, t2211, t2192, 0, 0, 0, 0, 0, 0, t2215, t2219, t2211, t2189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2396, t2393, t2374, t2357, 0, 0, 0, 0, 0, 0, t2324, t2333, t2316, t2269, 0, 0, 0, 0, 0, 0, t2277, t2281, t2271, t2230, 0, 0, 0, 0, 0, 0, t2237, t2243, t2228, t2200, 0, 0, 0, 0, 0, 0, t2237, t2243, t2228, t2196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2392, t2383, t2373, t2356, 0, 0, 0, 0, 0, 0, t2323, t2332, t2315, t2268, 0, 0, 0, 0, 0, 0, t2276, t2280, t2270, t2229, 0, 0, 0, 0, 0, 0, t2236, t2242, t2227, t2199, 0, 0, 0, 0, 0, 0, t2236, t2242, t2227, t2195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2375, t2372, t2397, t2376, 0, 0, 0, 0, 0, 0, t2345, t2347, t2351, t2343, 0, 0, 0, 0, 0, 0, t2303, t2306, t2289, t2238, 0, 0, 0, 0, 0, 0, t2257, t2259, t2250, t2213, 0, 0, 0, 0, 0, 0, t2257, t2259, t2250, t2203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2358, t2360, t2346, t2297, 0, 0, 0, 0, 0, 0, t2304, t2307, t2290, t2239, 0, 0, 0, 0, 0, 0, t2258, t2260, t2251, t2214, 0, 0, 0, 0, 0, 0, t2258, t2260, t2251, t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2359, t2367, t2348, t2296, 0, 0, 0, 0, 0, 0, -t2311, t2492, -t2328, -t2283, 0, 0, 0, 0, 0, 0, -t2272, -t2278, -t2264, -t2221, 0, 0, 0, 0, 0, 0, -t2272, -t2278, -t2264, -t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2345, t2347, t2351, t2343, 0, 0, 0, 0, 0, 0, t2303, t2306, t2289, t2238, 0, 0, 0, 0, 0, 0, t2257, t2259, t2250, t2213, 0, 0, 0, 0, 0, 0, t2257, t2259, t2250, t2203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2334, t2321, t2312, t2267, 0, 0, 0, 0, 0, 0, t2273, t2279, t2265, t2222, 0, 0, 0, 0, 0, 0, t2273, t2279, t2265, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, t2340, t2314, t2266, 0, 0, 0, 0, 0, 0, -t2285, -t2287, -t2309, -t2254, 0, 0, 0, 0, 0, 0, -t2285, -t2287, -t2309, -t2233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, -t2492, t2328, t2283, 0, 0, 0, 0, 0, 0, t2272, t2278, t2264, t2221, 0, 0, 0, 0, 0, 0, t2272, t2278, t2264, t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2310, t2302, t2286, t2232, 0, 0, 0, 0, 0, 0, t2310, t2302, t2286, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2301, t2319, t2288, t2231, 0, 0, 0, 0, 0, 0, t2301, t2319, t2288, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2285, t2287, t2309, t2254, 0, 0, 0, 0, 0, 0, t2285, t2287, t2309, t2233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2310, t2302, t2286, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2301, t2319, t2288, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2285, t2287, t2309, t2233;];
f_new_reg  = t1;
