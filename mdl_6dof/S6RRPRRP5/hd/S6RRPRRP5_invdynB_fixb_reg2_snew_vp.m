% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:54:25
% EndTime: 2019-05-06 17:55:33
% DurationCPUTime: 47.24s
% Computational Cost: add. (345527->952), mult. (909428->1481), div. (0->0), fcn. (727687->12), ass. (0->716)
t1100 = sin(qJ(5));
t1096 = sin(pkin(11));
t1098 = cos(pkin(11));
t1097 = sin(pkin(6));
t1106 = cos(qJ(2));
t1228 = t1097 * t1106;
t1205 = qJD(1) * t1228;
t1102 = sin(qJ(2));
t1229 = t1097 * t1102;
t1206 = qJD(1) * t1229;
t1052 = t1096 * t1205 + t1098 * t1206;
t1099 = cos(pkin(6));
t1088 = qJD(1) * t1099 + qJD(2);
t1101 = sin(qJ(4));
t1105 = cos(qJ(4));
t1027 = t1052 * t1105 + t1088 * t1101;
t1104 = cos(qJ(5));
t1050 = t1096 * t1206 - t1098 * t1205;
t1131 = qJD(4) + t1050;
t991 = t1100 * t1027 - t1104 * t1131;
t993 = t1104 * t1027 + t1100 * t1131;
t928 = t993 * t991;
t1221 = qJDD(1) * t1102;
t1244 = qJD(1) * t1106;
t1059 = (qJD(2) * t1244 + t1221) * t1097;
t1222 = qJDD(1) * t1097;
t1060 = -qJD(2) * t1206 + t1106 * t1222;
t1014 = t1098 * t1059 + t1096 * t1060;
t1087 = qJDD(1) * t1099 + qJDD(2);
t1193 = t1101 * t1014 - t1105 * t1087;
t956 = -t1027 * qJD(4) - t1193;
t952 = qJDD(5) - t956;
t1196 = -t952 + t928;
t1256 = t1100 * t1196;
t1249 = t1104 * t1196;
t1297 = t1196 * pkin(5);
t1025 = t1052 * t1101 - t1105 * t1088;
t1197 = t1025 * qJD(4) - t1105 * t1014 - t1101 * t1087;
t998 = t1131 * t1025;
t913 = -t998 - t1197;
t1013 = t1052 * t1050;
t1292 = -t1013 + t1087;
t1301 = t1096 * t1292;
t1300 = t1098 * t1292;
t1191 = t1059 * t1096 - t1098 * t1060;
t1187 = qJDD(4) + t1191;
t976 = t1027 * t1025;
t1295 = t1187 - t976;
t1299 = t1101 * t1295;
t1298 = t1105 * t1295;
t1121 = t1131 ^ 2;
t883 = -t991 * qJD(5) + t1100 * t1187 - t1104 * t1197;
t1021 = qJD(5) + t1025;
t947 = t1021 * t991;
t1296 = -t947 + t883;
t1093 = t1097 ^ 2;
t1108 = qJD(1) ^ 2;
t1245 = qJD(1) * t1088;
t1294 = t1093 * (-t1099 * t1108 + t1245);
t1068 = t1088 * t1206;
t1033 = t1060 - t1068;
t1293 = t1099 * t1033;
t1037 = t1088 * t1050;
t1291 = -t1037 + t1014;
t1069 = t1088 * t1205;
t1030 = t1069 + t1059;
t1103 = sin(qJ(1));
t1107 = cos(qJ(1));
t1082 = g(1) * t1107 + g(2) * t1103;
t1056 = -pkin(1) * t1108 + pkin(8) * t1222 - t1082;
t1081 = g(1) * t1103 - t1107 * g(2);
t1272 = pkin(8) * t1097;
t1117 = qJDD(1) * pkin(1) + t1108 * t1272 + t1081;
t1112 = t1099 * t1117;
t1192 = -t1102 * t1056 + t1106 * t1112;
t1226 = t1102 * t1108;
t1200 = t1093 * t1226;
t1111 = t1087 * pkin(2) - t1059 * qJ(3) + (pkin(2) * t1200 + (qJ(3) * t1245 - g(3)) * t1097) * t1106 + t1192;
t1002 = -g(3) * t1229 + t1106 * t1056 + t1102 * t1112;
t1132 = pkin(2) * t1088 - qJ(3) * t1206;
t1095 = t1106 ^ 2;
t1231 = t1093 * t1108;
t1201 = t1095 * t1231;
t944 = -pkin(2) * t1201 + t1060 * qJ(3) - t1088 * t1132 + t1002;
t861 = -0.2e1 * qJD(3) * t1050 + t1096 * t1111 + t1098 * t944;
t1194 = -t1100 * t1197 - t1104 * t1187;
t832 = (qJD(5) - t1021) * t993 + t1194;
t989 = t991 ^ 2;
t990 = t993 ^ 2;
t1019 = t1021 ^ 2;
t1022 = t1025 ^ 2;
t1023 = t1027 ^ 2;
t1048 = t1050 ^ 2;
t1049 = t1052 ^ 2;
t1290 = t1088 ^ 2;
t1289 = 0.2e1 * qJD(3);
t903 = -t1019 - t989;
t799 = t1100 * t903 - t1249;
t1288 = pkin(4) * t799;
t871 = t928 + t952;
t1257 = t1100 * t871;
t925 = -t990 - t1019;
t808 = t1104 * t925 - t1257;
t1287 = pkin(4) * t808;
t836 = -t947 - t883;
t773 = -t1100 * t836 - t1104 * t832;
t890 = -t989 - t990;
t732 = t1101 * t890 + t1105 * t773;
t771 = -t1100 * t832 + t1104 * t836;
t680 = t1096 * t732 - t1098 * t771;
t681 = t1096 * t771 + t1098 * t732;
t1178 = t1102 * t681 + t1106 * t680;
t731 = t1101 * t773 - t1105 * t890;
t596 = -t1097 * t731 + t1099 * t1178;
t619 = -t1102 * t680 + t1106 * t681;
t558 = t1103 * t619 + t1107 * t596;
t1286 = pkin(7) * t558;
t800 = t1104 * t903 + t1256;
t831 = (qJD(5) + t1021) * t993 + t1194;
t750 = t1101 * t831 + t1105 * t800;
t700 = t1096 * t750 - t1098 * t799;
t701 = t1096 * t799 + t1098 * t750;
t1175 = t1102 * t701 + t1106 * t700;
t749 = t1101 * t800 - t1105 * t831;
t616 = -t1097 * t749 + t1099 * t1175;
t642 = -t1102 * t700 + t1106 * t701;
t574 = t1103 * t642 + t1107 * t616;
t1285 = pkin(7) * t574;
t1250 = t1104 * t871;
t809 = -t1100 * t925 - t1250;
t754 = t1101 * t1296 + t1105 * t809;
t712 = t1096 * t754 - t1098 * t808;
t713 = t1096 * t808 + t1098 * t754;
t1174 = t1102 * t713 + t1106 * t712;
t753 = t1101 * t809 - t1105 * t1296;
t624 = -t1097 * t753 + t1099 * t1174;
t649 = -t1102 * t712 + t1106 * t713;
t581 = t1103 * t649 + t1107 * t624;
t1284 = pkin(7) * t581;
t1283 = pkin(9) * t731;
t1282 = pkin(9) * t749;
t1281 = pkin(9) * t753;
t1280 = pkin(10) * t771;
t1279 = pkin(10) * t799;
t1278 = pkin(10) * t808;
t1277 = pkin(2) * t1097;
t1276 = pkin(2) * t1099;
t1275 = pkin(3) * t1096;
t1274 = pkin(4) * t1101;
t1273 = pkin(4) * t1105;
t1271 = pkin(8) * t1099;
t1270 = qJ(3) * t680;
t1269 = qJ(3) * t700;
t1268 = qJ(3) * t712;
t1267 = pkin(1) * t596 + t619 * t1272;
t1266 = pkin(1) * t616 + t642 * t1272;
t1265 = pkin(1) * t624 + t649 * t1272;
t1038 = t1099 * g(3) + t1097 * t1117;
t969 = t1060 * pkin(2) + qJ(3) * t1201 - t1132 * t1206 - qJDD(3) + t1038;
t1238 = t1052 * t1088;
t977 = t1191 + t1238;
t1110 = t977 * pkin(3) - pkin(9) * t1291 - t969;
t1009 = pkin(3) * t1050 - pkin(9) * t1052;
t826 = -pkin(3) * t1290 + pkin(9) * t1087 - t1009 * t1050 + t861;
t777 = t1101 * t1110 + t1105 * t826;
t974 = pkin(4) * t1025 - pkin(10) * t1027;
t746 = -pkin(4) * t1121 + pkin(10) * t1187 - t1025 * t974 + t777;
t1118 = t1131 * t1027;
t1195 = t1096 * t944 - t1098 * t1111;
t825 = -t1087 * pkin(3) - t1290 * pkin(9) + (t1289 + t1009) * t1052 + t1195;
t768 = -t913 * pkin(10) + (-t956 + t1118) * pkin(4) + t825;
t690 = t1100 * t768 + t1104 * t746;
t1264 = -t1100 * t746 + t1104 * t768;
t1262 = qJD(6) * t993;
t1261 = t1096 * t969;
t1260 = t1098 * t969;
t1217 = t883 * qJ(6) - t1264;
t1138 = -qJ(6) * t947 - t1217;
t662 = t1138 - 0.2e1 * t1262 - t1297;
t1259 = t1100 * t662;
t776 = t1101 * t826 - t1105 * t1110;
t745 = -t1187 * pkin(4) - t1121 * pkin(10) + t1027 * t974 + t776;
t1258 = t1100 * t745;
t1255 = t1101 * t825;
t934 = t1187 + t976;
t1254 = t1101 * t934;
t860 = t1052 * t1289 + t1195;
t785 = t1096 * t861 - t1098 * t860;
t1253 = t1102 * t785;
t1252 = t1104 * t662;
t1251 = t1104 * t745;
t1248 = t1105 * t825;
t1247 = t1105 * t934;
t1246 = t1106 * t785;
t1005 = t1013 + t1087;
t1242 = t1005 * t1096;
t1241 = t1005 * t1098;
t1240 = t1021 * t1100;
t1239 = t1021 * t1104;
t1080 = t1106 * t1200;
t1057 = t1080 + t1087;
t1237 = t1057 * t1102;
t1236 = t1057 * t1106;
t1058 = -t1080 + t1087;
t1235 = t1058 * t1102;
t1234 = t1058 * t1106;
t1233 = t1088 * t1096;
t1232 = t1088 * t1098;
t1230 = t1097 * t1087;
t1227 = t1102 * t1038;
t1225 = t1106 * t1038;
t1094 = t1102 ^ 2;
t1223 = t1094 + t1095;
t1220 = pkin(2) * t680 - pkin(3) * t771 + pkin(9) * t732;
t1219 = pkin(2) * t700 - pkin(3) * t799 + pkin(9) * t750;
t1218 = pkin(2) * t712 - pkin(3) * t808 + pkin(9) * t754;
t1216 = t1101 * t928;
t1215 = t1105 * t928;
t1214 = -pkin(3) * t1098 - pkin(2);
t595 = t1097 * t1178 + t1099 * t731;
t1213 = -pkin(1) * t595 + t619 * t1271;
t615 = t1097 * t1175 + t1099 * t749;
t1212 = -pkin(1) * t615 + t642 * t1271;
t623 = t1097 * t1174 + t1099 * t753;
t1211 = -pkin(1) * t623 + t649 * t1271;
t1210 = -pkin(2) * t731 + qJ(3) * t681;
t1209 = -pkin(2) * t749 + qJ(3) * t701;
t1208 = -pkin(2) * t753 + qJ(3) * t713;
t1207 = t1097 * t1245;
t1204 = t1096 * t976;
t1203 = t1098 * t976;
t1202 = t1094 * t1231;
t1199 = t1097 * t1013;
t1198 = t1099 * t1013;
t786 = t1096 * t860 + t1098 * t861;
t703 = t1101 * t776 + t1105 * t777;
t1042 = -t1081 * t1103 - t1107 * t1082;
t1079 = qJDD(1) * t1107 - t1103 * t1108;
t1190 = -pkin(7) * t1079 - g(3) * t1103;
t1047 = -t1290 - t1202;
t1007 = -t1047 * t1102 - t1234;
t1189 = pkin(8) * t1007 - t1227;
t1064 = -t1290 - t1201;
t1017 = t1064 * t1106 - t1237;
t1188 = pkin(8) * t1017 + t1225;
t626 = t1100 * t690 + t1104 * t1264;
t627 = -t1100 * t1264 + t1104 * t690;
t702 = t1101 * t777 - t1105 * t776;
t882 = -qJD(5) * t993 - t1194;
t943 = pkin(5) * t1021 - qJ(6) * t993;
t1137 = t882 * qJ(6) - 0.2e1 * qJD(6) * t991 - t1021 * t943 + t690;
t637 = -qJ(6) * t832 + (-t890 - t989) * pkin(5) + t1137;
t986 = 0.2e1 * t1262;
t639 = t986 + (-t836 + t947) * qJ(6) + t1297 + t1217;
t572 = -t1100 * t637 + t1104 * t639 - t1280;
t724 = -pkin(4) * t771 - pkin(5) * t836;
t548 = -t1101 * t724 + t1105 * t572 - t1283;
t1135 = -pkin(3) * t731 + pkin(4) * t890 - pkin(10) * t773;
t563 = -t1100 * t639 - t1104 * t637 + t1135;
t529 = t1096 * t548 + t1098 * t563 + t1210;
t531 = -t1096 * t563 + t1098 * t548 - t1270;
t1186 = t1102 * t531 + t1106 * t529;
t609 = -t626 - t1280;
t583 = t1105 * t609 + t1274 * t771 - t1283;
t589 = t1135 - t627;
t533 = t1096 * t583 + t1098 * t589 + t1210;
t535 = -t1096 * t589 + t1098 * t583 - t1270;
t1185 = t1102 * t535 + t1106 * t533;
t632 = -t1138 - t1288 + t986 + 0.2e1 * t1297;
t694 = -t882 * pkin(5) - t989 * qJ(6) + t943 * t993 + qJDD(6) + t745;
t674 = -pkin(5) * t831 + qJ(6) * t903 - t694;
t638 = qJ(6) * t1249 - t1100 * t674 - t1279;
t568 = -t1101 * t632 + t1105 * t638 - t1282;
t1134 = -pkin(3) * t749 + pkin(4) * t831 - pkin(10) * t800;
t610 = -qJ(6) * t1256 - t1104 * t674 + t1134;
t534 = t1096 * t568 + t1098 * t610 + t1209;
t537 = -t1096 * t610 + t1098 * t568 - t1269;
t1184 = t1102 * t537 + t1106 * t534;
t636 = -t1287 + (-t925 - t989) * pkin(5) + t1137;
t692 = -qJ(6) * t925 + t694;
t779 = -pkin(5) * t1296 - qJ(6) * t871;
t643 = -t1100 * t779 + t1104 * t692 - t1278;
t571 = -t1101 * t636 + t1105 * t643 - t1281;
t1133 = -pkin(3) * t753 + pkin(4) * t1296 - pkin(10) * t809;
t611 = -t1100 * t692 - t1104 * t779 + t1133;
t536 = t1096 * t571 + t1098 * t611 + t1208;
t538 = -t1096 * t611 + t1098 * t571 - t1268;
t1183 = t1102 * t538 + t1106 * t536;
t666 = -pkin(5) * t989 + t1137;
t593 = t1104 * t666 - t1259;
t578 = t1101 * t694 + t1105 * t593;
t592 = t1100 * t666 + t1252;
t541 = t1096 * t578 - t1098 * t592;
t542 = t1096 * t592 + t1098 * t578;
t1182 = t1102 * t542 + t1106 * t541;
t667 = -t1264 - t1288;
t697 = t1258 - t1279;
t598 = -t1101 * t667 + t1105 * t697 - t1282;
t646 = t1134 + t1251;
t545 = t1096 * t598 + t1098 * t646 + t1209;
t554 = -t1096 * t646 + t1098 * t598 - t1269;
t1181 = t1102 * t554 + t1106 * t545;
t668 = t690 - t1287;
t704 = t1251 - t1278;
t606 = -t1101 * t668 + t1105 * t704 - t1281;
t651 = t1133 - t1258;
t546 = t1096 * t606 + t1098 * t651 + t1208;
t556 = -t1096 * t651 + t1098 * t606 - t1268;
t1180 = t1102 * t556 + t1106 * t546;
t608 = t1101 * t745 + t1105 * t627;
t565 = t1096 * t608 - t1098 * t626;
t566 = t1096 * t626 + t1098 * t608;
t1179 = t1102 * t566 + t1106 * t565;
t682 = t1096 * t703 - t1098 * t825;
t683 = t1096 * t825 + t1098 * t703;
t1177 = t1102 * t683 + t1106 * t682;
t772 = -t1100 * t1296 - t1104 * t831;
t927 = -t990 + t989;
t740 = -t1101 * t927 + t1105 * t772;
t770 = t1100 * t831 - t1104 * t1296;
t685 = t1096 * t740 + t1098 * t770;
t686 = -t1096 * t770 + t1098 * t740;
t1176 = t1102 * t686 + t1106 * t685;
t946 = -t990 + t1019;
t822 = -t1100 * t946 - t1249;
t761 = -t1101 * t836 + t1105 * t822;
t820 = -t1104 * t946 + t1256;
t717 = t1096 * t761 + t1098 * t820;
t719 = -t1096 * t820 + t1098 * t761;
t1173 = t1102 * t719 + t1106 * t717;
t945 = t989 - t1019;
t823 = t1104 * t945 - t1257;
t762 = -t1101 * t832 + t1105 * t823;
t821 = -t1100 * t945 - t1250;
t718 = t1096 * t762 + t1098 * t821;
t720 = -t1096 * t821 + t1098 * t762;
t1172 = t1102 * t720 + t1106 * t718;
t828 = -t1100 * t882 + t1239 * t991;
t794 = t1105 * t828 - t1216;
t827 = -t1104 * t882 - t1240 * t991;
t734 = t1096 * t794 + t1098 * t827;
t736 = -t1096 * t827 + t1098 * t794;
t1171 = t1102 * t736 + t1106 * t734;
t830 = t1104 * t883 - t1240 * t993;
t795 = t1105 * t830 + t1216;
t829 = -t1100 * t883 - t1239 * t993;
t735 = t1096 * t795 + t1098 * t829;
t737 = -t1096 * t829 + t1098 * t795;
t1170 = t1102 * t737 + t1106 * t735;
t885 = (t1100 * t993 - t1104 * t991) * t1021;
t838 = t1101 * t952 + t1105 * t885;
t884 = (t1100 * t991 + t1104 * t993) * t1021;
t783 = t1096 * t838 + t1098 * t884;
t784 = -t1096 * t884 + t1098 * t838;
t1169 = t1102 * t784 + t1106 * t783;
t1168 = t1102 * t786 + t1246;
t910 = -t1027 * t1050 + t1193;
t914 = -t998 + t1197;
t842 = -t1101 * t914 - t1105 * t910;
t942 = t1022 + t1023;
t796 = t1096 * t842 + t1098 * t942;
t797 = -t1096 * t942 + t1098 * t842;
t1167 = t1102 * t797 + t1106 * t796;
t911 = (-0.2e1 * qJD(4) - t1050) * t1027 - t1193;
t841 = -t1101 * t913 + t1105 * t911;
t975 = -t1023 + t1022;
t801 = t1096 * t841 + t1098 * t975;
t802 = -t1096 * t975 + t1098 * t841;
t1166 = t1102 * t802 + t1106 * t801;
t951 = -t1121 - t1022;
t874 = t1105 * t951 - t1299;
t805 = t1096 * t874 + t1098 * t911;
t806 = -t1096 * t911 + t1098 * t874;
t1165 = t1102 * t806 + t1106 * t805;
t964 = -t1023 - t1121;
t887 = -t1101 * t964 - t1247;
t810 = t1096 * t887 - t1098 * t913;
t811 = t1096 * t913 + t1098 * t887;
t1164 = t1102 * t811 + t1106 * t810;
t997 = -t1023 + t1121;
t896 = -t1101 * t997 + t1298;
t815 = t1096 * t896 + t1098 * t914;
t817 = -t1096 * t914 + t1098 * t896;
t1163 = t1102 * t817 + t1106 * t815;
t996 = t1022 - t1121;
t897 = t1105 * t996 - t1254;
t816 = t1096 * t897 + t1098 * t910;
t818 = -t1096 * t910 + t1098 * t897;
t1162 = t1102 * t818 + t1106 * t816;
t1114 = t1105 * t998;
t907 = -t1101 * t956 + t1114;
t862 = t1096 * t907 + t1203;
t864 = t1098 * t907 - t1204;
t1161 = t1102 * t864 + t1106 * t862;
t1115 = t1101 * t1118;
t909 = -t1105 * t1197 - t1115;
t863 = t1096 * t909 - t1203;
t865 = t1098 * t909 + t1204;
t1160 = t1102 * t865 + t1106 * t863;
t932 = -t1114 + t1115;
t899 = t1096 * t932 - t1098 * t1187;
t900 = t1096 * t1187 + t1098 * t932;
t1159 = t1102 * t900 + t1106 * t899;
t917 = -t1096 * t977 + t1098 * t1291;
t919 = -t1096 * t1291 - t1098 * t977;
t1158 = t1102 * t919 + t1106 * t917;
t1136 = -t1191 + t1238;
t982 = t1037 + t1014;
t918 = t1096 * t1136 - t1098 * t982;
t920 = t1096 * t982 + t1098 * t1136;
t1157 = t1102 * t920 + t1106 * t918;
t1003 = -t1290 - t1048;
t937 = t1003 * t1096 + t1300;
t938 = t1003 * t1098 - t1301;
t1156 = t1102 * t938 + t1106 * t937;
t1020 = -t1049 - t1290;
t949 = t1020 * t1098 - t1242;
t950 = -t1020 * t1096 - t1241;
t1155 = t1102 * t950 + t1106 * t949;
t1035 = -t1049 + t1290;
t958 = t1035 * t1098 + t1301;
t960 = -t1035 * t1096 + t1300;
t1154 = t1102 * t960 + t1106 * t958;
t1034 = t1048 - t1290;
t959 = t1034 * t1096 + t1241;
t961 = t1034 * t1098 - t1242;
t1153 = t1102 * t961 + t1106 * t959;
t970 = t1050 * t1233 - t1098 * t1191;
t971 = t1050 * t1232 + t1096 * t1191;
t1152 = t1102 * t971 + t1106 * t970;
t972 = t1014 * t1096 + t1052 * t1232;
t973 = t1014 * t1098 - t1052 * t1233;
t1151 = t1102 * t973 + t1106 * t972;
t994 = (-t1050 * t1096 - t1052 * t1098) * t1088;
t995 = (-t1050 * t1098 + t1052 * t1096) * t1088;
t1150 = t1102 * t995 + t1106 * t994;
t1001 = g(3) * t1228 - t1192;
t1148 = -t1106 * t1001 + t1102 * t1002;
t936 = t1001 * t1102 + t1002 * t1106;
t1147 = t1030 * t1106 + t1033 * t1102;
t1031 = -t1069 + t1059;
t1032 = t1060 + t1068;
t1146 = -t1031 * t1106 + t1032 * t1102;
t1145 = t1047 * t1106 - t1235;
t1062 = t1290 - t1202;
t1144 = t1062 * t1106 + t1237;
t1143 = t1064 * t1102 + t1236;
t1063 = -t1290 + t1201;
t1142 = t1063 * t1102 + t1234;
t1041 = t1081 * t1107 - t1082 * t1103;
t1141 = (-t1097 * t595 - t1099 * t596) * pkin(8);
t1140 = (-t1097 * t615 - t1099 * t616) * pkin(8);
t1139 = (-t1097 * t623 - t1099 * t624) * pkin(8);
t613 = -pkin(5) * t694 + qJ(6) * t666;
t543 = -pkin(10) * t592 - qJ(6) * t1252 - t1100 * t613;
t567 = -pkin(4) * t592 - pkin(5) * t662;
t577 = t1101 * t593 - t1105 * t694;
t522 = -pkin(9) * t577 - t1101 * t567 + t1105 * t543;
t530 = -pkin(3) * t577 + pkin(4) * t694 - pkin(10) * t593 + qJ(6) * t1259 - t1104 * t613;
t499 = -pkin(2) * t577 + qJ(3) * t542 + t1096 * t522 + t1098 * t530;
t501 = -qJ(3) * t541 - t1096 * t530 + t1098 * t522;
t525 = -t1102 * t541 + t1106 * t542;
t1130 = pkin(8) * t525 + t1102 * t501 + t1106 * t499;
t607 = t1101 * t627 - t1105 * t745;
t540 = -pkin(9) * t607 + (-pkin(10) * t1105 + t1274) * t626;
t550 = -pkin(3) * t607 + pkin(4) * t745 - pkin(10) * t627;
t513 = -pkin(2) * t607 + qJ(3) * t566 + t1096 * t540 + t1098 * t550;
t519 = -qJ(3) * t565 - t1096 * t550 + t1098 * t540;
t532 = -t1102 * t565 + t1106 * t566;
t1129 = pkin(8) * t532 + t1102 * t519 + t1106 * t513;
t584 = qJ(3) * t683 + (-pkin(9) * t1096 + t1214) * t702;
t597 = -qJ(3) * t682 + (-pkin(9) * t1098 + t1275) * t702;
t620 = -t1102 * t682 + t1106 * t683;
t1128 = pkin(8) * t620 + t1102 * t597 + t1106 * t584;
t840 = -t1101 * t910 + t1105 * t914;
t684 = -pkin(9) * t840 - t702;
t633 = qJ(3) * t797 + t1096 * t684 + t1214 * t840;
t645 = -qJ(3) * t796 + t1098 * t684 + t1275 * t840;
t729 = -t1102 * t796 + t1106 * t797;
t1127 = pkin(8) * t729 + t1102 * t645 + t1106 * t633;
t873 = t1101 * t951 + t1298;
t738 = -pkin(3) * t873 + t776;
t778 = -pkin(9) * t873 + t1255;
t664 = -pkin(2) * t873 + qJ(3) * t806 + t1096 * t778 + t1098 * t738;
t671 = -qJ(3) * t805 - t1096 * t738 + t1098 * t778;
t742 = -t1102 * t805 + t1106 * t806;
t1126 = pkin(8) * t742 + t1102 * t671 + t1106 * t664;
t886 = t1105 * t964 - t1254;
t741 = -pkin(3) * t886 + t777;
t782 = -pkin(9) * t886 + t1248;
t665 = -pkin(2) * t886 + qJ(3) * t811 + t1096 * t782 + t1098 * t741;
t675 = -qJ(3) * t810 - t1096 * t741 + t1098 * t782;
t747 = -t1102 * t810 + t1106 * t811;
t1125 = pkin(8) * t747 + t1102 * t675 + t1106 * t665;
t988 = -t1048 - t1049;
t751 = -pkin(2) * t988 + qJ(3) * t920 + t786;
t765 = -qJ(3) * t918 - t785;
t847 = -t1102 * t918 + t1106 * t920;
t1124 = pkin(8) * t847 + t1102 * t765 + t1106 * t751;
t852 = -pkin(2) * t977 + qJ(3) * t938 + t1260;
t869 = -t1102 * t937 + t1106 * t938;
t891 = -qJ(3) * t937 - t1261;
t1123 = pkin(8) * t869 + t1102 * t891 + t1106 * t852;
t858 = -pkin(2) * t1291 + qJ(3) * t950 - t1261;
t889 = -t1102 * t949 + t1106 * t950;
t898 = -qJ(3) * t949 - t1260;
t1122 = pkin(8) * t889 + t1102 * t898 + t1106 * t858;
t983 = t1031 * t1102 + t1032 * t1106;
t1120 = pkin(8) * t983 + t936;
t721 = t1106 * t786 - t1253;
t774 = pkin(2) * t969 + qJ(3) * t786;
t1119 = pkin(8) * t721 - qJ(3) * t1253 + t1106 * t774;
t1116 = t1101 * t998;
t1113 = t1105 * t1118;
t1092 = t1097 * t1093;
t1078 = qJDD(1) * t1103 + t1107 * t1108;
t1071 = t1099 * t1087;
t1066 = t1223 * t1231;
t1065 = (t1094 - t1095) * t1231;
t1061 = -pkin(7) * t1078 + g(3) * t1107;
t1036 = t1223 * t1207;
t1029 = (t1221 + (qJD(2) + t1088) * t1244) * t1097;
t1028 = t1059 * t1106 - t1094 * t1207;
t1024 = -t1060 * t1102 - t1095 * t1207;
t1016 = t1063 * t1106 - t1235;
t1015 = -t1062 * t1102 + t1236;
t1012 = t1049 - t1048;
t1000 = (t1092 * t1106 * t1108 + t1030 * t1099) * t1102;
t999 = (-t1092 * t1226 + t1293) * t1106;
t984 = -t1030 * t1102 + t1033 * t1106;
t968 = t1097 * t1033 + t1099 * t1143;
t967 = -t1097 * t1032 + t1099 * t1142;
t966 = -t1097 * t1031 + t1099 * t1144;
t965 = t1097 * t1143 - t1293;
t963 = -t1097 * t1029 + t1099 * t1145;
t962 = t1099 * t1029 + t1097 * t1145;
t955 = -t1097 * t1065 + t1099 * t1147;
t954 = t1097 * t1066 + t1099 * t1146;
t953 = -t1099 * t1066 + t1097 * t1146;
t931 = -t1116 - t1113;
t930 = t1017 * t1107 - t1103 * t968;
t929 = t1017 * t1103 + t1107 * t968;
t926 = -t1102 * t994 + t1106 * t995;
t924 = t1007 * t1107 - t1103 * t963;
t923 = t1007 * t1103 + t1107 * t963;
t922 = t1097 * t1038 + t1099 * t1148;
t921 = -t1099 * t1038 + t1097 * t1148;
t916 = t1099 * t1150 - t1230;
t908 = -t1101 * t1197 + t1113;
t906 = t1105 * t956 + t1116;
t905 = -t1102 * t972 + t1106 * t973;
t904 = -t1102 * t970 + t1106 * t971;
t902 = -t1103 * t954 + t1107 * t983;
t901 = t1103 * t983 + t1107 * t954;
t895 = t1101 * t996 + t1247;
t894 = t1105 * t997 + t1299;
t893 = -t1102 * t959 + t1106 * t961;
t892 = -t1102 * t958 + t1106 * t960;
t888 = -t1227 + (-t1097 * t965 - t1099 * t968) * pkin(8);
t878 = -t1225 + (-t1097 * t962 - t1099 * t963) * pkin(8);
t877 = t1099 * t1151 - t1199;
t876 = t1099 * t1152 + t1199;
t875 = -pkin(1) * t965 + t1097 * t1001 + t1099 * t1188;
t868 = -pkin(1) * t962 + t1097 * t1002 + t1099 * t1189;
t857 = -t1097 * t1136 + t1099 * t1153;
t856 = -t1097 * t982 + t1099 * t1154;
t855 = -pkin(1) * t921 + t1271 * t936;
t854 = -t1103 * t922 + t1107 * t936;
t853 = t1103 * t936 + t1107 * t922;
t851 = -t1097 * t1291 + t1099 * t1155;
t850 = t1097 * t1155 + t1099 * t1291;
t849 = -pkin(1) * t953 + t1099 * t1120;
t848 = (-t1097 * t921 - t1099 * t922) * pkin(8);
t846 = -t1102 * t917 + t1106 * t919;
t845 = -t1097 * t977 + t1099 * t1156;
t844 = t1097 * t1156 + t1099 * t977;
t843 = (-t1097 * t953 - t1099 * t954) * pkin(8) - t1148;
t839 = t1101 * t911 + t1105 * t913;
t837 = t1101 * t885 - t1105 * t952;
t819 = pkin(2) * t949 - t861;
t814 = pkin(2) * t937 - t860;
t813 = -t1102 * t899 + t1106 * t900;
t812 = -t1097 * t1012 + t1099 * t1158;
t804 = -t1097 * t988 + t1099 * t1157;
t803 = t1097 * t1157 + t1099 * t988;
t793 = t1101 * t830 - t1215;
t792 = t1101 * t828 + t1215;
t791 = -t1102 * t863 + t1106 * t865;
t790 = -t1102 * t862 + t1106 * t864;
t789 = -t1103 * t851 + t1107 * t889;
t788 = t1103 * t889 + t1107 * t851;
t787 = -t1097 * t931 + t1099 * t1159;
t781 = -t1103 * t845 + t1107 * t869;
t780 = t1103 * t869 + t1107 * t845;
t764 = -t1097 * t908 + t1099 * t1160;
t763 = -t1097 * t906 + t1099 * t1161;
t760 = t1101 * t823 + t1105 * t832;
t759 = t1101 * t822 + t1105 * t836;
t758 = -t1102 * t816 + t1106 * t818;
t757 = -t1102 * t815 + t1106 * t817;
t756 = -t1103 * t804 + t1107 * t847;
t755 = t1103 * t847 + t1107 * t804;
t739 = t1101 * t772 + t1105 * t927;
t733 = -t1102 * t801 + t1106 * t802;
t728 = -t1097 * t895 + t1099 * t1162;
t727 = -t1097 * t894 + t1099 * t1163;
t726 = -t1097 * t886 + t1099 * t1164;
t725 = t1097 * t1164 + t1099 * t886;
t723 = -t1097 * t873 + t1099 * t1165;
t722 = t1097 * t1165 + t1099 * t873;
t716 = -t1102 * t858 + t1106 * t898 + (-t1097 * t850 - t1099 * t851) * pkin(8);
t715 = pkin(2) * t810 - pkin(3) * t913 + pkin(9) * t887 + t1255;
t714 = -t1102 * t783 + t1106 * t784;
t709 = t1097 * t969 + t1099 * t1168;
t708 = t1097 * t1168 - t1099 * t969;
t707 = pkin(2) * t805 + pkin(3) * t911 + pkin(9) * t874 - t1248;
t706 = -t1102 * t852 + t1106 * t891 + (-t1097 * t844 - t1099 * t845) * pkin(8);
t705 = -t1097 * t839 + t1099 * t1166;
t696 = -t1097 * t840 + t1099 * t1167;
t695 = t1097 * t1167 + t1099 * t840;
t693 = -pkin(1) * t850 - t1097 * t819 + t1099 * t1122;
t691 = -pkin(1) * t844 - t1097 * t814 + t1099 * t1123;
t688 = -t1097 * t837 + t1099 * t1169;
t687 = t1097 * t1169 + t1099 * t837;
t677 = -t1102 * t735 + t1106 * t737;
t676 = -t1102 * t734 + t1106 * t736;
t673 = -t1103 * t726 + t1107 * t747;
t672 = t1103 * t747 + t1107 * t726;
t670 = -t1103 * t723 + t1107 * t742;
t669 = t1103 * t742 + t1107 * t723;
t663 = pkin(2) * t796 + pkin(3) * t942 + pkin(9) * t842 + t703;
t661 = -t1102 * t718 + t1106 * t720;
t660 = -t1102 * t717 + t1106 * t719;
t659 = -t1097 * t793 + t1099 * t1170;
t658 = -t1097 * t792 + t1099 * t1171;
t657 = t1097 * t1170 + t1099 * t793;
t656 = t1097 * t1171 + t1099 * t792;
t655 = -t1103 * t696 + t1107 * t729;
t654 = t1103 * t729 + t1107 * t696;
t653 = -t1103 * t709 + t1107 * t721;
t652 = t1103 * t721 + t1107 * t709;
t650 = -t1102 * t751 + t1106 * t765 + (-t1097 * t803 - t1099 * t804) * pkin(8);
t644 = -pkin(1) * t803 + t1099 * t1124 - t1277 * t918;
t635 = -t1103 * t688 + t1107 * t714;
t634 = t1103 * t714 + t1107 * t688;
t631 = -t1097 * t760 + t1099 * t1172;
t630 = -t1097 * t759 + t1099 * t1173;
t629 = t1097 * t1172 + t1099 * t760;
t628 = t1097 * t1173 + t1099 * t759;
t625 = -t1102 * t685 + t1106 * t686;
t621 = pkin(2) * t682 - pkin(3) * t825 + pkin(9) * t703;
t612 = -qJ(3) * t1246 - t1102 * t774 + (-t1097 * t708 - t1099 * t709) * pkin(8);
t605 = -t1097 * t739 + t1099 * t1176;
t604 = t1097 * t1176 + t1099 * t739;
t603 = -t1103 * t659 + t1107 * t677;
t602 = -t1103 * t658 + t1107 * t676;
t601 = t1103 * t677 + t1107 * t659;
t600 = t1103 * t676 + t1107 * t658;
t599 = -pkin(1) * t708 + t1099 * t1119 - t1277 * t785;
t591 = -t1097 * t702 + t1099 * t1177;
t590 = t1097 * t1177 + t1099 * t702;
t588 = -t1103 * t631 + t1107 * t661;
t587 = -t1103 * t630 + t1107 * t660;
t586 = t1103 * t661 + t1107 * t631;
t585 = t1103 * t660 + t1107 * t630;
t582 = -t1103 * t624 + t1107 * t649;
t580 = pkin(7) * t582;
t579 = t1101 * t704 + t1105 * t668 + t1218;
t576 = t1101 * t697 + t1105 * t667 + t1219;
t575 = -t1103 * t616 + t1107 * t642;
t573 = pkin(7) * t575;
t570 = -t1102 * t665 + t1106 * t675 + (-t1097 * t725 - t1099 * t726) * pkin(8);
t569 = -t1102 * t664 + t1106 * t671 + (-t1097 * t722 - t1099 * t723) * pkin(8);
t564 = -pkin(1) * t725 - t1097 * t715 + t1099 * t1125;
t562 = -t1103 * t605 + t1107 * t625;
t561 = t1103 * t625 + t1107 * t605;
t560 = -pkin(1) * t722 - t1097 * t707 + t1099 * t1126;
t559 = -t1103 * t596 + t1107 * t619;
t557 = pkin(7) * t559;
t555 = t1101 * t643 + t1105 * t636 + t1218;
t553 = t1101 * t609 - t1273 * t771 + t1220;
t552 = -t1103 * t591 + t1107 * t620;
t551 = t1103 * t620 + t1107 * t591;
t549 = -t1102 * t633 + t1106 * t645 + (-t1097 * t695 - t1099 * t696) * pkin(8);
t547 = t1101 * t638 + t1105 * t632 + t1219;
t544 = -pkin(1) * t695 - t1097 * t663 + t1099 * t1127;
t539 = t1101 * t572 + t1105 * t724 + t1220;
t528 = -t1097 * t607 + t1099 * t1179;
t527 = t1097 * t1179 + t1099 * t607;
t526 = -t1102 * t584 + t1106 * t597 + (-t1097 * t590 - t1099 * t591) * pkin(8);
t524 = pkin(2) * t565 + pkin(9) * t608 + (-pkin(10) * t1101 - pkin(3) - t1273) * t626;
t523 = -pkin(1) * t590 - t1097 * t621 + t1099 * t1128;
t521 = -t1102 * t546 + t1106 * t556 + t1139;
t520 = -t1102 * t545 + t1106 * t554 + t1140;
t518 = -t1097 * t577 + t1099 * t1182;
t517 = t1097 * t1182 + t1099 * t577;
t516 = -t1097 * t579 + t1099 * t1180 + t1211;
t515 = -t1097 * t576 + t1099 * t1181 + t1212;
t514 = -t1102 * t536 + t1106 * t538 + t1139;
t512 = -t1102 * t534 + t1106 * t537 + t1140;
t511 = -t1103 * t528 + t1107 * t532;
t510 = t1103 * t532 + t1107 * t528;
t509 = -t1102 * t533 + t1106 * t535 + t1141;
t508 = -t1097 * t555 + t1099 * t1183 + t1211;
t507 = pkin(2) * t541 - pkin(3) * t592 + pkin(9) * t578 + t1101 * t543 + t1105 * t567;
t506 = -t1097 * t547 + t1099 * t1184 + t1212;
t505 = -t1097 * t553 + t1099 * t1185 + t1213;
t504 = -t1102 * t529 + t1106 * t531 + t1141;
t503 = -t1103 * t518 + t1107 * t525;
t502 = t1103 * t525 + t1107 * t518;
t500 = -t1097 * t539 + t1099 * t1186 + t1213;
t498 = -t1102 * t513 + t1106 * t519 + (-t1097 * t527 - t1099 * t528) * pkin(8);
t497 = -pkin(1) * t527 - t1097 * t524 + t1099 * t1129;
t496 = -t1102 * t499 + t1106 * t501 + (-t1097 * t517 - t1099 * t518) * pkin(8);
t495 = -pkin(1) * t517 - t1097 * t507 + t1099 * t1130;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1078, -t1079, 0, t1042, 0, 0, 0, 0, 0, 0, t930, t924, t902, t854, 0, 0, 0, 0, 0, 0, t781, t789, t756, t653, 0, 0, 0, 0, 0, 0, t670, t673, t655, t552, 0, 0, 0, 0, 0, 0, t575, t582, t559, t511, 0, 0, 0, 0, 0, 0, t575, t582, t559, t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1079, -t1078, 0, t1041, 0, 0, 0, 0, 0, 0, t929, t923, t901, t853, 0, 0, 0, 0, 0, 0, t780, t788, t755, t652, 0, 0, 0, 0, 0, 0, t669, t672, t654, t551, 0, 0, 0, 0, 0, 0, t574, t581, t558, t510, 0, 0, 0, 0, 0, 0, t574, t581, t558, t502; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t965, t962, t953, t921, 0, 0, 0, 0, 0, 0, t844, t850, t803, t708, 0, 0, 0, 0, 0, 0, t722, t725, t695, t590, 0, 0, 0, 0, 0, 0, t615, t623, t595, t527, 0, 0, 0, 0, 0, 0, t615, t623, t595, t517; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1079, 0, -t1078, 0, t1190, -t1061, -t1041, -pkin(7) * t1041, -t1000 * t1103 + t1028 * t1107, -t1103 * t955 + t1107 * t984, t1015 * t1107 - t1103 * t966, t1024 * t1107 - t1103 * t999, t1016 * t1107 - t1103 * t967, t1036 * t1107 + t1103 * t1230, -pkin(7) * t929 - t1103 * t875 + t1107 * t888, -pkin(7) * t923 - t1103 * t868 + t1107 * t878, -pkin(7) * t901 - t1103 * t849 + t1107 * t843, -pkin(7) * t853 - t1103 * t855 + t1107 * t848, -t1103 * t877 + t1107 * t905, -t1103 * t812 + t1107 * t846, -t1103 * t856 + t1107 * t892, -t1103 * t876 + t1107 * t904, -t1103 * t857 + t1107 * t893, -t1103 * t916 + t1107 * t926, -pkin(7) * t780 - t1103 * t691 + t1107 * t706, -pkin(7) * t788 - t1103 * t693 + t1107 * t716, -pkin(7) * t755 - t1103 * t644 + t1107 * t650, -pkin(7) * t652 - t1103 * t599 + t1107 * t612, -t1103 * t764 + t1107 * t791, -t1103 * t705 + t1107 * t733, -t1103 * t727 + t1107 * t757, -t1103 * t763 + t1107 * t790, -t1103 * t728 + t1107 * t758, -t1103 * t787 + t1107 * t813, -pkin(7) * t669 - t1103 * t560 + t1107 * t569, -pkin(7) * t672 - t1103 * t564 + t1107 * t570, -pkin(7) * t654 - t1103 * t544 + t1107 * t549, -pkin(7) * t551 - t1103 * t523 + t1107 * t526, t603, t562, t587, t602, t588, t635, -t1103 * t515 + t1107 * t520 - t1285, -t1103 * t516 + t1107 * t521 - t1284, -t1103 * t505 + t1107 * t509 - t1286, -pkin(7) * t510 - t1103 * t497 + t1107 * t498, t603, t562, t587, t602, t588, t635, -t1103 * t506 + t1107 * t512 - t1285, -t1103 * t508 + t1107 * t514 - t1284, -t1103 * t500 + t1107 * t504 - t1286, -pkin(7) * t502 - t1103 * t495 + t1107 * t496; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1078, 0, t1079, 0, t1061, t1190, t1042, pkin(7) * t1042, t1000 * t1107 + t1028 * t1103, t1103 * t984 + t1107 * t955, t1015 * t1103 + t1107 * t966, t1024 * t1103 + t1107 * t999, t1016 * t1103 + t1107 * t967, t1036 * t1103 - t1107 * t1230, pkin(7) * t930 + t1103 * t888 + t1107 * t875, pkin(7) * t924 + t1103 * t878 + t1107 * t868, pkin(7) * t902 + t1103 * t843 + t1107 * t849, pkin(7) * t854 + t1103 * t848 + t1107 * t855, t1103 * t905 + t1107 * t877, t1103 * t846 + t1107 * t812, t1103 * t892 + t1107 * t856, t1103 * t904 + t1107 * t876, t1103 * t893 + t1107 * t857, t1103 * t926 + t1107 * t916, pkin(7) * t781 + t1103 * t706 + t1107 * t691, pkin(7) * t789 + t1103 * t716 + t1107 * t693, pkin(7) * t756 + t1103 * t650 + t1107 * t644, pkin(7) * t653 + t1103 * t612 + t1107 * t599, t1103 * t791 + t1107 * t764, t1103 * t733 + t1107 * t705, t1103 * t757 + t1107 * t727, t1103 * t790 + t1107 * t763, t1103 * t758 + t1107 * t728, t1103 * t813 + t1107 * t787, pkin(7) * t670 + t1103 * t569 + t1107 * t560, pkin(7) * t673 + t1103 * t570 + t1107 * t564, pkin(7) * t655 + t1103 * t549 + t1107 * t544, pkin(7) * t552 + t1103 * t526 + t1107 * t523, t601, t561, t585, t600, t586, t634, t1103 * t520 + t1107 * t515 + t573, t1103 * t521 + t1107 * t516 + t580, t1103 * t509 + t1107 * t505 + t557, pkin(7) * t511 + t1103 * t498 + t1107 * t497, t601, t561, t585, t600, t586, t634, t1103 * t512 + t1107 * t506 + t573, t1103 * t514 + t1107 * t508 + t580, t1103 * t504 + t1107 * t500 + t557, pkin(7) * t503 + t1103 * t496 + t1107 * t495; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1081, t1082, 0, 0, (t1059 * t1097 + t1106 * t1294) * t1102, t1099 * t1065 + t1097 * t1147, t1099 * t1031 + t1097 * t1144, (t1060 * t1097 - t1102 * t1294) * t1106, t1099 * t1032 + t1097 * t1142, t1071, pkin(1) * t968 - t1099 * t1001 + t1097 * t1188, pkin(1) * t963 - t1099 * t1002 + t1097 * t1189, pkin(1) * t954 + t1097 * t1120, pkin(1) * t922 + t1272 * t936, t1097 * t1151 + t1198, t1099 * t1012 + t1097 * t1158, t1097 * t1154 + t1099 * t982, t1097 * t1152 - t1198, t1097 * t1153 + t1099 * t1136, t1097 * t1150 + t1071, pkin(1) * t845 + t1097 * t1123 + t1099 * t814, pkin(1) * t851 + t1097 * t1122 + t1099 * t819, pkin(1) * t804 + t1097 * t1124 + t1276 * t918, pkin(1) * t709 + t1097 * t1119 + t1276 * t785, t1097 * t1160 + t1099 * t908, t1097 * t1166 + t1099 * t839, t1097 * t1163 + t1099 * t894, t1097 * t1161 + t1099 * t906, t1097 * t1162 + t1099 * t895, t1097 * t1159 + t1099 * t931, pkin(1) * t723 + t1097 * t1126 + t1099 * t707, pkin(1) * t726 + t1097 * t1125 + t1099 * t715, pkin(1) * t696 + t1097 * t1127 + t1099 * t663, pkin(1) * t591 + t1097 * t1128 + t1099 * t621, t657, t604, t628, t656, t629, t687, t1097 * t1181 + t1099 * t576 + t1266, t1097 * t1180 + t1099 * t579 + t1265, t1097 * t1185 + t1099 * t553 + t1267, pkin(1) * t528 + t1097 * t1129 + t1099 * t524, t657, t604, t628, t656, t629, t687, t1097 * t1184 + t1099 * t547 + t1266, t1097 * t1183 + t1099 * t555 + t1265, t1097 * t1186 + t1099 * t539 + t1267, pkin(1) * t518 + t1097 * t1130 + t1099 * t507;];
tauB_reg  = t1;
