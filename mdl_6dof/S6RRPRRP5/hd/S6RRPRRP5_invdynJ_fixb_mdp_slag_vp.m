% Calculate vector of inverse dynamics joint torques for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% MDP [28x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRP5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(28,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [28 1]), ...
  'S6RRPRRP5_invdynJ_fixb_mdp_slag_vp: MDP has to be [28x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:05:52
% EndTime: 2019-03-09 12:06:10
% DurationCPUTime: 15.28s
% Computational Cost: add. (11680->686), mult. (32892->909), div. (0->0), fcn. (26950->12), ass. (0->308)
t681 = sin(pkin(6));
t690 = cos(qJ(2));
t851 = cos(pkin(11));
t762 = t690 * t851;
t744 = qJD(1) * t762;
t650 = t681 * t744;
t680 = sin(pkin(11));
t686 = sin(qJ(2));
t803 = qJD(1) * t686;
t775 = t681 * t803;
t732 = t680 * t775 - t650;
t881 = qJD(4) + t732;
t689 = cos(qJ(4));
t871 = qJD(4) * t881;
t882 = t732 * t881 + t871;
t888 = t882 * t689;
t682 = cos(pkin(6));
t864 = pkin(1) * t682;
t669 = t690 * t864;
t664 = qJD(1) * t669;
t852 = pkin(8) + qJ(3);
t770 = t852 * t686;
t748 = t681 * t770;
t609 = -qJD(1) * t748 + t664;
t828 = t682 * t686;
t668 = pkin(1) * t828;
t830 = t681 * t690;
t610 = (t830 * t852 + t668) * qJD(1);
t761 = t851 * t610;
t554 = t609 * t680 + t761;
t685 = sin(qJ(4));
t887 = t554 - t881 * (pkin(4) * t685 - pkin(10) * t689);
t644 = -t690 * t680 - t686 * t851;
t711 = qJD(1) * t644;
t623 = t681 * t711;
t804 = qJD(1) * t682;
t753 = qJD(2) + t804;
t595 = -t685 * t623 - t689 * t753;
t802 = qJD(2) * t686;
t774 = t681 * t802;
t747 = qJD(1) * t774;
t583 = -t680 * t747 + (qJD(2) * t744 - qJDD(1) * t644) * t681;
t789 = qJDD(1) * t682;
t666 = qJDD(2) + t789;
t735 = t689 * t583 + t685 * t666;
t695 = -qJD(4) * t595 + t735;
t886 = qJD(5) * t881 + t695;
t684 = sin(qJ(5));
t688 = cos(qJ(5));
t821 = t688 * t689;
t571 = -t623 * t684 - t732 * t821;
t796 = qJD(5) * t684;
t798 = qJD(4) * t689;
t885 = t685 * t796 - t688 * t798 + t571;
t710 = qJD(2) * t644;
t788 = qJDD(1) * t686;
t768 = t680 * t788;
t746 = t681 * t762;
t648 = qJDD(1) * t746;
t785 = qJDD(4) - t648;
t693 = t785 + (-qJD(1) * t710 + t768) * t681;
t787 = qJDD(1) * t690;
t782 = pkin(1) * t787;
t663 = t682 * t782;
t783 = qJD(2) * t864;
t750 = qJD(1) * t783;
t764 = qJD(2) * t852;
t801 = qJD(3) * t686;
t530 = -t686 * t750 + pkin(2) * t666 + t663 + (-qJDD(1) * t770 + (-t690 * t764 - t801) * qJD(1)) * t681;
t714 = qJD(3) * t690 - t686 * t764;
t766 = t681 * t787;
t777 = pkin(8) * t766 + qJDD(1) * t668 + t690 * t750;
t546 = (qJ(3) * t787 + qJD(1) * t714) * t681 + t777;
t490 = t680 * t530 + t851 * t546;
t484 = pkin(9) * t666 + t490;
t697 = (qJD(2) * t711 - t768) * t681;
t582 = t648 + t697;
t676 = pkin(2) * t690 + pkin(1);
t738 = t676 * qJDD(1);
t786 = pkin(2) * t747 + qJDD(3);
t883 = t681 * t738 - t786;
t506 = -pkin(3) * t582 - pkin(9) * t583 - t883;
t715 = t682 * pkin(2) - t748;
t598 = qJD(2) * pkin(2) + qJD(1) * t715 + t664;
t534 = t680 * t598 + t761;
t526 = pkin(9) * t753 + t534;
t745 = t676 * t681;
t634 = -qJD(1) * t745 + qJD(3);
t551 = pkin(3) * t732 + pkin(9) * t623 + t634;
t799 = qJD(4) * t685;
t749 = t685 * t484 - t689 * t506 + t526 * t798 + t551 * t799;
t453 = -pkin(4) * t693 + t749;
t683 = -qJ(6) - pkin(10);
t884 = -qJ(6) * t595 + qJD(5) * t683;
t627 = t644 * t682;
t687 = sin(qJ(1));
t691 = cos(qJ(1));
t825 = t686 * t680;
t726 = t762 - t825;
t587 = -t627 * t691 + t687 * t726;
t829 = t681 * t691;
t573 = t587 * t689 - t685 * t829;
t713 = t682 * t726;
t586 = t687 * t644 + t691 * t713;
t880 = t573 * t684 + t586 * t688;
t879 = t573 * t688 - t586 * t684;
t863 = pkin(5) * t684;
t776 = pkin(9) + t863;
t597 = -t689 * t623 + t685 * t753;
t540 = t597 * t684 - t688 * t881;
t877 = t540 * t881;
t593 = qJD(5) + t595;
t875 = t885 * t593;
t625 = t681 * t825 - t746;
t608 = t669 + t715;
t806 = pkin(8) * t830 + t668;
t616 = qJ(3) * t830 + t806;
t563 = t680 * t608 + t851 * t616;
t553 = pkin(9) * t682 + t563;
t626 = t644 * t681;
t862 = pkin(9) * t626;
t569 = pkin(3) * t625 - t745 + t862;
t813 = t689 * t553 + t685 * t569;
t499 = pkin(10) * t625 + t813;
t562 = t608 * t851 - t680 * t616;
t552 = -t682 * pkin(3) - t562;
t605 = -t626 * t685 - t682 * t689;
t606 = -t626 * t689 + t682 * t685;
t505 = t605 * pkin(4) - t606 * pkin(10) + t552;
t816 = t688 * t499 + t684 * t505;
t673 = pkin(2) * t680 + pkin(9);
t836 = t673 * t684;
t874 = -t688 * t887 + t799 * t836;
t822 = t687 * t690;
t823 = t686 * t691;
t637 = -t682 * t822 - t823;
t677 = t681 ^ 2;
t865 = pkin(1) * t677;
t873 = t682 * t806 + t686 * t865;
t602 = t680 * t610;
t555 = t609 * t851 - t602;
t565 = pkin(2) * t775 - pkin(3) * t623 + pkin(9) * t732;
t812 = t689 * t555 + t685 * t565;
t494 = -pkin(10) * t623 + t812;
t674 = -pkin(2) * t851 - pkin(3);
t641 = -t689 * pkin(4) - t685 * pkin(10) + t674;
t795 = qJD(5) * t688;
t872 = t688 * t494 - t641 * t795 + t684 * t887;
t589 = t644 * t691 - t687 * t713;
t717 = -g(1) * t589 - g(2) * t586 + g(3) * t625;
t588 = -t687 * t627 - t691 * t726;
t831 = t681 * t687;
t577 = -t588 * t689 + t685 * t831;
t513 = -t577 * t684 - t589 * t688;
t567 = t606 * t684 - t625 * t688;
t870 = -g(1) * t513 + g(2) * t880 + g(3) * t567;
t473 = t597 * t796 - t684 * t693 - t688 * t886;
t542 = t688 * t597 + t684 * t881;
t839 = t732 * t689;
t570 = t688 * t623 - t684 * t839;
t740 = -t684 * t798 + t570;
t708 = t685 * t795 - t740;
t827 = t684 * t685;
t869 = t473 * t827 - t542 * t708;
t489 = t530 * t851 - t680 * t546;
t483 = -t666 * pkin(3) - t489;
t868 = t483 - t717;
t867 = t542 ^ 2;
t866 = 0.2e1 * t677;
t692 = qJD(1) ^ 2;
t859 = g(1) * t637;
t858 = g(1) * t687;
t854 = g(3) * t690;
t853 = t623 * pkin(4);
t474 = t597 * t795 + t684 * t886 - t688 * t693;
t849 = t474 * t689;
t756 = t685 * t583 - t689 * t666;
t512 = t597 * qJD(4) + t756;
t511 = qJDD(5) + t512;
t848 = t511 * t684;
t847 = t511 * t688;
t846 = t540 * t593;
t845 = t542 * t593;
t844 = t542 * t732;
t754 = t593 * t688;
t841 = t597 * t623;
t840 = t732 * t685;
t838 = t623 * t595;
t837 = t666 * MDP(8);
t835 = t673 * t685;
t834 = t673 * t689;
t833 = t677 * t692;
t832 = t681 * t686;
t826 = t685 * t688;
t824 = t686 * t687;
t820 = t690 * t691;
t492 = t689 * t526 + t685 * t551;
t479 = pkin(10) * t881 + t492;
t533 = t598 * t851 - t602;
t525 = -pkin(3) * t753 - t533;
t486 = t595 * pkin(4) - t597 * pkin(10) + t525;
t462 = -t479 * t684 + t688 * t486;
t455 = -qJ(6) * t542 + t462;
t454 = pkin(5) * t593 + t455;
t819 = -t455 + t454;
t491 = -t685 * t526 + t689 * t551;
t529 = pkin(4) * t597 + pkin(10) * t595;
t818 = t688 * t491 + t684 * t529;
t646 = t673 * t821;
t794 = qJD(6) * t688;
t815 = pkin(5) * t840 + qJ(6) * t571 + t494 * t684 - t685 * t794 + (pkin(5) * t685 - qJ(6) * t821) * qJD(4) + (-t646 + (qJ(6) * t685 - t641) * t684) * qJD(5) + t874;
t797 = qJD(5) * t673;
t800 = qJD(4) * t673;
t814 = qJ(6) * t570 + (-qJ(6) * qJD(5) - t800) * t826 + (-qJD(6) * t685 + (-qJ(6) * qJD(4) - t797) * t689) * t684 - t872;
t810 = t684 * t884 + t794 - t818;
t522 = t688 * t529;
t809 = -pkin(5) * t597 - t522 + t884 * t688 + (-qJD(6) + t491) * t684;
t807 = t684 * t641 + t646;
t678 = t686 ^ 2;
t805 = -t690 ^ 2 + t678;
t793 = t525 * qJD(4);
t791 = qJD(4) - t650;
t790 = qJD(1) * qJD(2);
t780 = t690 * t833;
t778 = t682 * t820;
t772 = t681 * t682 * t692;
t771 = t852 * t681;
t769 = t690 * t790;
t767 = t681 * t788;
t765 = g(2) * t829 - g(3) * t682;
t760 = t473 * t689 + t542 * t799;
t759 = -t499 * t684 + t688 * t505;
t758 = -t685 * t553 + t569 * t689;
t549 = t685 * t555;
t757 = t565 * t689 - t549;
t665 = t690 * t783;
t599 = t681 * t714 + t665;
t600 = -t681 * t801 + (-t690 * t771 - t668) * qJD(2);
t527 = t599 * t680 - t851 * t600;
t631 = pkin(2) * t828 - t771;
t755 = -t631 * t687 + t691 * t676;
t752 = qJD(2) + 0.2e1 * t804;
t751 = t666 + t789;
t572 = t587 * t685 + t689 * t829;
t576 = -t588 * t685 - t689 * t831;
t742 = -g(1) * t572 + g(2) * t576;
t741 = g(1) * t691 + g(2) * t687;
t463 = t479 * t688 + t486 * t684;
t456 = -qJ(6) * t540 + t463;
t737 = -t454 * t688 - t456 * t684;
t736 = t454 * t684 - t456 * t688;
t568 = t606 * t688 + t625 * t684;
t734 = -t631 * t691 - t676 * t687;
t528 = t599 * t851 + t680 * t600;
t621 = t681 * t710;
t622 = t726 * t681 * qJD(2);
t566 = pkin(2) * t774 - pkin(3) * t621 - pkin(9) * t622;
t733 = -t685 * t528 - t553 * t798 + t566 * t689 - t569 * t799;
t498 = -pkin(4) * t625 - t758;
t730 = t740 * t593;
t729 = -t593 * t795 - t848;
t478 = -pkin(4) * t881 - t491;
t727 = -pkin(10) * t511 + t478 * t593;
t724 = -t689 * t484 - t685 * t506 + t526 * t799 - t551 * t798;
t723 = t689 * t528 - t553 * t799 + t685 * t566 + t569 * t798;
t452 = pkin(10) * t693 - t724;
t460 = t512 * pkin(4) - pkin(10) * t695 + t483;
t722 = -t688 * t452 - t684 * t460 + t479 * t796 - t486 * t795;
t468 = -pkin(10) * t621 + t723;
t560 = qJD(4) * t606 + t622 * t685;
t561 = -qJD(4) * t605 + t622 * t689;
t477 = pkin(4) * t560 - pkin(10) * t561 + t527;
t721 = t688 * t468 + t684 * t477 - t499 * t796 + t505 * t795;
t720 = g(1) * t576 + g(2) * t572 + g(3) * t605;
t719 = -g(1) * t577 - g(2) * t573 - g(3) * t606;
t718 = g(1) * t588 - g(2) * t587 + g(3) * t626;
t469 = pkin(4) * t621 - t733;
t702 = -t474 * t826 + t540 * t885;
t701 = t593 * t797 - t717;
t700 = -qJD(5) * t816 - t468 * t684 + t688 * t477;
t447 = -qJD(5) * t463 - t684 * t452 + t688 * t460;
t699 = pkin(10) * qJD(5) * t593 + t453 - t720;
t698 = -t685 * t882 + t689 * t693;
t694 = -qJDD(4) + t582;
t450 = t474 * pkin(5) + qJDD(6) + t453;
t675 = pkin(5) * t688 + pkin(4);
t656 = t683 * t688;
t655 = t683 * t684;
t654 = pkin(2) * t778;
t638 = -t682 * t824 + t820;
t636 = -t682 * t823 - t822;
t635 = -t778 + t824;
t630 = t688 * t641;
t594 = -qJ(6) * t827 + t807;
t584 = -qJ(6) * t826 + t630 + (-pkin(5) - t836) * t689;
t539 = t540 ^ 2;
t514 = t577 * t688 - t589 * t684;
t497 = -qJD(5) * t567 + t561 * t688 - t621 * t684;
t496 = qJD(5) * t568 + t561 * t684 + t621 * t688;
t493 = -t757 + t853;
t471 = t540 * pkin(5) + qJD(6) + t478;
t464 = -qJ(6) * t567 + t816;
t459 = pkin(5) * t605 - qJ(6) * t568 + t759;
t449 = -qJ(6) * t496 - qJD(6) * t567 + t721;
t448 = pkin(5) * t560 - qJ(6) * t497 - qJD(6) * t568 + t700;
t445 = -qJ(6) * t474 - qJD(6) * t540 - t722;
t444 = pkin(5) * t511 + qJ(6) * t473 - qJD(6) * t542 + t447;
t1 = [(-g(1) * t734 - g(2) * t755 + t489 * t562 + t490 * t563 - t533 * t527 + t534 * t528) * MDP(12) + (qJDD(1) * t678 + 0.2e1 * t686 * t769) * t677 * MDP(4) + (t483 * t606 + t492 * t621 + t525 * t561 + t527 * t597 + t552 * t695 + t625 * t724 + t694 * t813 - t723 * t881 + t742) * MDP(19) + (g(1) * t573 - g(2) * t577 + t483 * t605 - t491 * t621 + t552 * t512 + t525 * t560 + t527 * t595 - t625 * t749 + t693 * t758 + t733 * t881) * MDP(18) + (t489 * t626 - t490 * t625 - t527 * t623 - t528 * t732 - t533 * t622 + t534 * t621 - t562 * t583 + t563 * t582) * MDP(11) + (t445 * t464 + t456 * t449 + t444 * t459 + t454 * t448 + t450 * (pkin(5) * t567 + t498) + t471 * (pkin(5) * t496 + t469) - g(1) * (-pkin(3) * t587 + t572 * t683 - t573 * t675 + t586 * t776 + t734) - g(2) * (-pkin(3) * t588 - t576 * t683 + t577 * t675 - t589 * t776 + t755)) * MDP(28) + (t782 * t866 + (-pkin(8) * t832 + t669) * t666 + (-pkin(8) * t767 + t663) * t682 - g(1) * t636 - g(2) * t638 - t806 * qJD(2) ^ 2 - 0.2e1 * t873 * t790) * MDP(9) + (-t512 * t625 - t560 * t791 + t595 * t621 - t605 * t785) * MDP(16) + (-t791 * t621 + t785 * t625) * MDP(17) + (t561 * t791 - t597 * t621 + t606 * t785 + t695 * t625) * MDP(15) + t682 * t837 + (-g(2) * t691 + t858) * MDP(2) + (t473 * t567 - t474 * t568 - t496 * t542 - t497 * t540) * MDP(21) + (-t473 * t568 + t497 * t542) * MDP(20) + (-(-pkin(8) * t774 + t665) * t753 - t806 * t666 - (-pkin(8) * t747 + t777) * t682 - g(1) * t635 - g(2) * t637 + 0.2e1 * (-t769 - t788) * t865) * MDP(10) + (-t474 * t605 - t496 * t593 - t511 * t567 - t540 * t560) * MDP(23) + (-t473 * t605 + t497 * t593 + t511 * t568 + t542 * t560) * MDP(22) + (t511 * t605 + t560 * t593) * MDP(24) + qJDD(1) * MDP(1) + ((t690 * t751 - t752 * t802) * MDP(7) + (qJD(2) * t690 * t752 + t686 * t751) * MDP(6) + (pkin(2) * t634 * t802 + t676 * t883) * MDP(12) - t741 * MDP(11) + (-t605 * t768 + (-t560 * t825 + t605 * t710) * qJD(1)) * MDP(16) + (t625 * t768 + (-t621 * t825 - t625 * t710) * qJD(1)) * MDP(17) + (t606 * t768 + (t561 * t825 - t606 * t710) * qJD(1)) * MDP(15)) * t681 + (g(1) * t879 - g(2) * t514 + t447 * t605 + t453 * t567 + t462 * t560 + t469 * t540 + t498 * t474 + t478 * t496 + t759 * t511 + t700 * t593) * MDP(25) + (-g(1) * t880 - g(2) * t513 + t453 * t568 - t463 * t560 + t469 * t542 - t498 * t473 + t478 * t497 - t816 * t511 - t721 * t593 + t722 * t605) * MDP(26) + t741 * MDP(3) + (-t444 * t568 - t445 * t567 - t448 * t542 - t449 * t540 - t454 * t497 - t456 * t496 + t459 * t473 - t464 * t474 - t742) * MDP(27) + (-t606 * t512 - t597 * t560 - t561 * t595 - t605 * t695) * MDP(14) + (t597 * t561 + t606 * t695) * MDP(13) + (t686 * t787 - t790 * t805) * MDP(5) * t866; (t849 + t730 + (t729 - t877) * t685) * MDP(23) + (t491 * t623 + t674 * t512 + t525 * t840 - t554 * t595 + t685 * t793 - t689 * t868 - t693 * t835 - t757 * t881 - t834 * t871) * MDP(18) + (-t492 * t623 + t525 * t839 - t554 * t597 + t674 * t695 + t685 * t868 + t689 * t793 + t694 * t834 + t812 * t881 + t835 * t871) * MDP(19) + (-t478 * t570 - t493 * t540 + t630 * t511 + t874 * t593 + ((-qJD(5) * t641 + t494) * t593 + t718) * t684 + (-t511 * t836 - t447 + (t478 * t684 + t540 * t673) * qJD(4) - t701 * t688) * t689 + (t453 * t684 + t462 * t881 + t673 * t474 + t478 * t795) * t685) * MDP(25) + ((qJD(4) * t623 + t666) * t685 ^ 2 + ((qJD(4) * t753 + t583) * t685 + t881 * t597) * t689) * MDP(13) + (t593 * t685 * t881 - t511 * t689) * MDP(24) + ((t844 + t847) * t685 - t875 + t760) * MDP(22) - t686 * MDP(4) * t780 + (-t473 * t826 - t542 * t885) * MDP(20) + t881 * t623 * MDP(17) + (t445 * t594 + t444 * t584 - g(1) * (pkin(2) * t637 - t588 * t776) - g(2) * (-pkin(2) * t824 + t587 * t776 + t654) - g(3) * (pkin(2) * t830 - t626 * t863 - t862) + t450 * (t673 + t863) * t685 + (-t853 - t549 + (t565 + t800) * t689 + t708 * pkin(5)) * t471 + t814 * t456 + t815 * t454 + t717 * (t675 * t689 - t683 * t685 + pkin(3))) * MDP(28) + (-t807 * t511 - t493 * t542 - t478 * t571 + t872 * t593 + t718 * t688 + (-t722 + (t478 * t688 + t542 * t673) * qJD(4) + t701 * t684) * t689 + (-t478 * t796 + t453 * t688 - t463 * t732 - t673 * t473 + (t673 * t754 - t463) * qJD(4)) * t685) * MDP(26) + (-(t534 - t554) * t623 - (t533 - t555) * t732 + (t582 * t680 - t583 * t851) * pkin(2)) * MDP(11) + (t693 * t685 + t841 + t888) * MDP(15) + (t702 + t869) * MDP(21) + (-t685 * t512 + t689 * t695 + (-t799 - t840) * t597 + (-t798 - t839) * t595) * MDP(14) + (-t859 + g(2) * t635 + t663 + (-pkin(8) * t788 - t854) * t681 + t873 * t692) * MDP(9) + (t698 - t838) * MDP(16) + (pkin(1) * t780 + (-pkin(8) * t775 + t664) * t804 + g(1) * t638 - g(2) * t636 + g(3) * t832 + t664 * qJD(2) - t777) * MDP(10) + (t454 * t571 + t456 * t570 + t473 * t584 - t474 * t594 - t815 * t542 - t814 * t540 + t737 * t798 + (qJD(5) * t736 - t444 * t688 - t445 * t684 + t717) * t685) * MDP(27) + (-g(2) * t654 + t533 * t554 - t534 * t555 + (t490 * t680 + t489 * t851 - t859 + g(2) * t824 + (-t634 * t803 - t854) * t681) * pkin(2)) * MDP(12) + (-t690 * t772 + t767) * MDP(6) + (t686 * t772 + t766) * MDP(7) + t837 + t805 * MDP(5) * t833; (-t623 ^ 2 - t732 ^ 2) * MDP(11) + (-t533 * t623 + t534 * t732 + (-t738 - t858) * t681 + t765 + t786) * MDP(12) + (t698 + t838) * MDP(18) + (t841 - t888 + (-t785 + t697) * t685) * MDP(19) + (-t849 + t730 + (t729 + t877) * t685) * MDP(25) + ((t844 - t847) * t685 + t875 + t760) * MDP(26) + (t702 - t869) * MDP(27) + (-g(1) * t831 + t454 * t570 - t456 * t571 + (-qJD(4) * t736 - t450) * t689 + (qJD(5) * t737 - t444 * t684 + t445 * t688 + t471 * t881) * t685 + t765) * MDP(28); -t595 ^ 2 * MDP(14) + (t595 * t732 + t735) * MDP(15) - t756 * MDP(16) + t693 * MDP(17) + (t492 * t881 + t720 - t749) * MDP(18) + (t491 * t881 + t525 * t595 - t719 + t724) * MDP(19) + (-t473 * t684 + t542 * t754) * MDP(20) + ((-t473 - t846) * t688 + (-t474 - t845) * t684) * MDP(21) + (t593 * t754 + t848) * MDP(22) + (-t593 ^ 2 * t684 + t847) * MDP(23) + (-pkin(4) * t474 - t492 * t540 - t522 * t593 + (t491 * t593 + t727) * t684 - t699 * t688) * MDP(25) + (pkin(4) * t473 - t492 * t542 + t593 * t818 + t684 * t699 + t688 * t727) * MDP(26) + (t473 * t655 + t474 * t656 - t809 * t542 - t810 * t540 + (-t454 * t593 + t445) * t688 + (-t456 * t593 - t444) * t684 + t719) * MDP(27) + (-t445 * t656 + t444 * t655 - t450 * t675 - g(1) * (-t576 * t675 - t577 * t683) - g(2) * (-t572 * t675 - t573 * t683) - g(3) * (-t605 * t675 - t606 * t683) + (t593 * t863 - t492) * t471 + t810 * t456 + t809 * t454) * MDP(28) + (MDP(13) * t595 + t597 * MDP(14) + MDP(16) * t732 - t525 * MDP(18) - t542 * MDP(22) + t540 * MDP(23) - t593 * MDP(24) - t462 * MDP(25) + t463 * MDP(26)) * t597; t542 * t540 * MDP(20) + (-t539 + t867) * MDP(21) + (-t473 + t846) * MDP(22) + (-t474 + t845) * MDP(23) + t511 * MDP(24) + (t463 * t593 - t478 * t542 + t447 + t870) * MDP(25) + (g(1) * t514 + g(2) * t879 + g(3) * t568 + t462 * t593 + t478 * t540 + t722) * MDP(26) + (pkin(5) * t473 - t540 * t819) * MDP(27) + (t819 * t456 + (-t471 * t542 + t444 + t870) * pkin(5)) * MDP(28); (-t539 - t867) * MDP(27) + (t454 * t542 + t456 * t540 + t450 - t720) * MDP(28);];
tau  = t1;
