% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:05:26
% EndTime: 2019-03-09 12:05:44
% DurationCPUTime: 6.92s
% Computational Cost: add. (9561->453), mult. (26550->800), div. (0->0), fcn. (26266->10), ass. (0->253)
t138 = sin(pkin(6));
t141 = sin(qJ(2));
t270 = sin(pkin(11));
t213 = t270 * t141;
t144 = cos(qJ(2));
t271 = cos(pkin(11));
t214 = t271 * t144;
t91 = (-t214 + t213) * t138;
t305 = 0.2e1 * t91;
t140 = sin(qJ(4));
t143 = cos(qJ(4));
t255 = qJD(2) * t138;
t113 = t213 * t255;
t185 = t214 * t255 - t113;
t272 = cos(pkin(6));
t171 = qJD(4) * t272 + t185;
t184 = t141 * t271 + t144 * t270;
t297 = t138 * t184;
t174 = qJD(4) * t297;
t293 = t140 * t174 - t143 * t171;
t304 = t140 * t293;
t162 = t140 * t272 + t143 * t297;
t230 = pkin(1) * t272;
t207 = t144 * t230;
t283 = pkin(8) + qJ(3);
t216 = t138 * t283;
t177 = -t141 * t216 + t207;
t165 = pkin(2) * t272 + t177;
t208 = t141 * t230;
t263 = t138 * t144;
t178 = t263 * t283 + t208;
t65 = t165 * t271 - t178 * t270;
t57 = -pkin(3) * t272 - t65;
t80 = t140 * t297 - t143 * t272;
t148 = t80 * pkin(4) - pkin(10) * t162 + t57;
t176 = qJD(2) * t184;
t172 = t138 * t176;
t66 = t165 * t270 + t178 * t271;
t152 = pkin(9) * t272 + t66;
t173 = qJD(2) * t297;
t254 = qJD(2) * t141;
t220 = t138 * t254;
t210 = pkin(2) * t220;
t301 = -pkin(3) * t173 + pkin(9) * t185 + qJD(4) * t152 - t210;
t252 = qJD(3) * t138;
t160 = qJD(2) * t177 + t144 * t252;
t161 = -t141 * t252 + (-t144 * t216 - t208) * qJD(2);
t150 = t160 * t271 + t161 * t270;
t289 = t91 * pkin(3);
t156 = -t138 * pkin(1) - pkin(2) * t263 - pkin(9) * t297 + t289;
t302 = -qJD(4) * t156 - t150;
t24 = t140 * t301 + t143 * t302;
t303 = -pkin(10) * t172 - qJD(5) * t148 + t24;
t294 = qJD(4) * t162;
t300 = -t140 * t294 - t143 * t293;
t299 = -0.4e1 * t140;
t139 = sin(qJ(5));
t142 = cos(qJ(5));
t131 = qJD(5) * t142;
t222 = t140 * t131;
t249 = qJD(4) * t143;
t103 = t139 * t249 + t222;
t298 = t103 * pkin(5);
t247 = qJD(5) * t139;
t64 = t140 * t171 + t143 * t174;
t187 = -t142 * t64 + t247 * t80;
t296 = t187 * t140;
t134 = t139 ^ 2;
t136 = t142 ^ 2;
t257 = t134 - t136;
t295 = qJD(5) * t162 - t172;
t127 = pkin(2) * t270 + pkin(9);
t292 = (qJ(6) * qJD(4) + qJD(5) * t127) * t143 + t140 * qJD(6);
t133 = t138 ^ 2;
t291 = t64 * pkin(5);
t68 = t139 * t162 - t142 * t91;
t290 = t68 * pkin(5);
t288 = pkin(4) * t140;
t287 = pkin(5) * t142;
t286 = pkin(10) * t143;
t25 = t140 * t302 - t143 * t301;
t19 = -pkin(4) * t172 - t25;
t36 = -t139 * t293 + t142 * t295 + t91 * t247;
t7 = t36 * pkin(5) + t19;
t285 = t139 * t7;
t284 = t142 * t7;
t282 = -qJ(6) - pkin(10);
t217 = t142 * t249;
t260 = t140 * t142;
t281 = -t217 * t68 - t260 * t36;
t44 = t140 * t156 + t143 * t152;
t39 = pkin(10) * t91 + t44;
t23 = t139 * t148 + t142 * t39;
t280 = -t140 * t64 - t249 * t80;
t37 = t91 * t131 - t139 * t295 - t142 * t293;
t279 = t139 * t37;
t69 = t91 * t139 + t142 * t162;
t278 = t139 * t69;
t226 = t127 * t249;
t81 = t226 + t298;
t277 = t139 * t81;
t276 = t142 * t36;
t275 = t142 * t37;
t274 = t142 * t81;
t128 = -pkin(2) * t271 - pkin(3);
t202 = -pkin(4) * t143 - pkin(10) * t140;
t181 = t202 + t128;
t175 = qJD(5) * t181;
t201 = -t286 + t288;
t186 = qJD(4) * t201;
t273 = -t139 * t186 - t142 * t175;
t259 = t142 * t143;
t112 = t127 * t259;
t77 = t139 * t181 + t112;
t269 = qJD(4) * t68;
t268 = qJD(5) * t68;
t117 = t282 * t139;
t267 = t117 * t140;
t118 = t282 * t142;
t266 = t118 * t140;
t265 = t127 * t139;
t264 = t127 * t143;
t262 = t139 * t140;
t261 = t139 * t143;
t132 = qJD(4) * t140;
t227 = t127 * t132;
t258 = t139 * t227 + t142 * t186;
t135 = t140 ^ 2;
t256 = -t143 ^ 2 + t135;
t253 = qJD(2) * t144;
t251 = qJD(4) * t139;
t250 = qJD(4) * t142;
t248 = qJD(5) * t135;
t246 = qJD(5) * t140;
t245 = qJD(5) * t143;
t49 = 0.2e1 * t80 * t64;
t243 = 0.2e1 * t272;
t242 = 0.2e1 * qJD(4) * t128;
t241 = -0.2e1 * t247;
t240 = pkin(5) * t132;
t239 = pkin(5) * t247;
t238 = t80 * t251;
t237 = t80 * t250;
t236 = t69 * t249;
t235 = t91 * t249;
t54 = t140 * t152;
t38 = -t91 * pkin(4) - t143 * t156 + t54;
t30 = t38 + t290;
t234 = t30 * t247;
t99 = (pkin(5) * t139 + t127) * t140;
t233 = t99 * t247;
t232 = t127 * t261;
t231 = -t144 * pkin(2) - pkin(1);
t229 = t133 * t253;
t228 = t134 * t249;
t225 = t127 * t248;
t224 = t139 * t246;
t223 = t139 * t245;
t221 = t142 * t245;
t219 = t139 * t131;
t218 = t140 * t249;
t129 = -pkin(4) - t287;
t215 = -t129 + t287;
t22 = -t139 * t39 + t142 * t148;
t211 = t256 * qJD(4);
t209 = t69 * t222;
t206 = t135 * t219;
t205 = t141 * t229;
t204 = t139 * t217;
t203 = t272 * t255;
t200 = pkin(5) * t134 + t129 * t142;
t10 = pkin(5) * t80 - qJ(6) * t69 + t22;
t15 = -qJ(6) * t68 + t23;
t199 = -t10 * t142 - t139 * t15;
t198 = t10 * t139 - t142 * t15;
t197 = -t139 * t23 - t142 * t22;
t196 = t139 * t22 - t142 * t23;
t96 = t142 * t181;
t71 = -qJ(6) * t260 + t96 + (-pkin(5) - t265) * t143;
t73 = -qJ(6) * t262 + t77;
t195 = -t139 * t73 - t142 * t71;
t194 = t139 * t71 - t142 * t73;
t76 = t96 - t232;
t193 = -t139 * t77 - t142 * t76;
t192 = t139 * t76 - t142 * t77;
t191 = -t25 * t140 - t24 * t143;
t47 = t132 * t80 - t143 * t64;
t189 = t131 * t38 + t139 * t19;
t188 = -t142 * t19 + t247 * t38;
t46 = t131 * t80 + t139 * t64;
t52 = t160 * t270 - t161 * t271;
t149 = t64 * pkin(4) + pkin(10) * t293 + t52;
t3 = -t139 * t149 + t142 * t303 + t39 * t247;
t101 = -t217 + t224;
t102 = t140 * t250 + t223;
t183 = -pkin(8) * t263 - t208;
t182 = pkin(8) * t138 * t141 - t207;
t170 = t140 * t172;
t4 = -t39 * t131 + t139 * t303 + t142 * t149;
t169 = qJD(5) * t197 - t139 * t4 - t142 * t3;
t145 = -t37 * qJ(6) - t69 * qJD(6) + t4;
t1 = t145 + t291;
t2 = qJ(6) * t36 + qJD(6) * t68 + t3;
t168 = qJD(5) * t199 - t1 * t139 - t142 * t2;
t58 = t102 * t127 + t273;
t59 = -qJD(5) * t77 + t258;
t167 = qJD(5) * t193 - t139 * t59 - t142 * t58;
t97 = -qJD(6) * t142 - t247 * t282;
t98 = -qJD(6) * t139 + t131 * t282;
t166 = -t139 * t98 - t142 * t97 + (-t117 * t142 + t118 * t139) * qJD(5);
t153 = qJ(6) * t224 - t139 * t175 - t142 * t292 + t258;
t124 = t136 * t249;
t122 = -0.2e1 * t218;
t121 = -0.2e1 * t219;
t120 = 0.2e1 * t219;
t115 = t136 * t218;
t114 = t134 * t218;
t111 = t231 * t138;
t110 = -0.2e1 * t257 * qJD(5);
t104 = t132 * t139 - t221;
t100 = t124 + t228;
t94 = t183 * qJD(2);
t93 = t182 * qJD(2);
t89 = 0.2e1 * t115 - 0.2e1 * t206;
t88 = 0.2e1 * t114 + 0.2e1 * t206;
t85 = t246 * t257 - t204;
t84 = t219 * t299 + t124 - t228;
t83 = -0.2e1 * t139 * t211 + 0.2e1 * t140 * t221;
t82 = 0.2e1 * t140 * t223 + 0.2e1 * t250 * t256;
t79 = t204 * t299 + 0.2e1 * t248 * t257;
t78 = 0.2e1 * t114 + 0.2e1 * t115 - 0.2e1 * t218;
t70 = -t132 * t91 + t143 * t172;
t61 = t69 * t132;
t50 = (qJ(6) * qJD(5) + qJD(4) * t127) * t260 + t292 * t139 + t273;
t48 = t153 + t240;
t43 = -t54 + (t289 + (-pkin(9) * t184 + t231) * t138) * t143;
t29 = 0.2e1 * t69 * t37;
t28 = 0.2e1 * t68 * t36;
t27 = t131 * t69 + t279;
t26 = t247 * t68 - t276;
t21 = t69 * t217 + (-t247 * t69 + t275) * t140;
t20 = t68 * t222 + (t140 * t36 + t249 * t68) * t139;
t18 = 0.2e1 * t37 * t80 + 0.2e1 * t64 * t69;
t17 = -0.2e1 * t36 * t80 - 0.2e1 * t64 * t68;
t14 = (t36 - t238) * t143 + (-t46 - t269) * t140;
t13 = (-t36 - t238) * t143 + (-t46 + t269) * t140;
t12 = t61 + (-t37 - t237) * t143 + t296;
t11 = t61 + (-t37 + t237) * t143 - t296;
t9 = -0.2e1 * t36 * t69 - 0.2e1 * t37 * t68;
t8 = -t139 * t36 + t275 + (-t142 * t68 - t278) * qJD(5);
t6 = -t209 + (-t236 + (-t37 + t268) * t140) * t139 + t281;
t5 = t209 + (t236 + (t37 + t268) * t140) * t139 + t281;
t16 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t205, 0.2e1 * (-t141 ^ 2 + t144 ^ 2) * t133 * qJD(2), 0.2e1 * t144 * t203, -0.2e1 * t205, -0.2e1 * t141 * t203, 0, -0.2e1 * pkin(1) * t133 * t254 + 0.2e1 * t272 * t94, -0.2e1 * pkin(1) * t229 + 0.2e1 * t272 * t93, 0.2e1 * (-t141 * t94 - t144 * t93 + (t141 * t183 + t144 * t182) * qJD(2)) * t138, -0.2e1 * t182 * t94 + 0.2e1 * t183 * t93, 0.2e1 * t185 * t297, 0.2e1 * t113 * t91 + 0.2e1 * (-t184 * t297 - t214 * t91) * t255, t185 * t243, t173 * t305, -t173 * t243, 0, 0.2e1 * t111 * t172 + 0.2e1 * t210 * t91 - 0.2e1 * t272 * t52, 0.2e1 * pkin(2) * t133 * t141 * t176 + 0.2e1 * t111 * t185 - 0.2e1 * t150 * t272, -0.2e1 * t150 * t91 - 0.2e1 * t173 * t66 - 0.2e1 * t185 * t65 + 0.2e1 * t297 * t52, 0.2e1 * t111 * t210 + 0.2e1 * t150 * t66 - 0.2e1 * t65 * t52, -0.2e1 * t162 * t293, -0.2e1 * t162 * t64 + 0.2e1 * t293 * t80, 0.2e1 * t162 * t172 - 0.2e1 * t293 * t91, t49, -0.2e1 * t172 * t80 - 0.2e1 * t64 * t91, t172 * t305, 0.2e1 * t172 * t43 + 0.2e1 * t25 * t91 + 0.2e1 * t52 * t80 + 0.2e1 * t57 * t64, 0.2e1 * t162 * t52 - 0.2e1 * t173 * t44 + 0.2e1 * t24 * t91 - 0.2e1 * t293 * t57, -0.2e1 * t162 * t25 + 0.2e1 * t24 * t80 + 0.2e1 * t293 * t43 - 0.2e1 * t44 * t64, -0.2e1 * t24 * t44 + 0.2e1 * t25 * t43 + 0.2e1 * t52 * t57, t29, t9, t18, t28, t17, t49, 0.2e1 * t19 * t68 + 0.2e1 * t22 * t64 + 0.2e1 * t36 * t38 + 0.2e1 * t4 * t80, 0.2e1 * t19 * t69 - 0.2e1 * t23 * t64 + 0.2e1 * t3 * t80 + 0.2e1 * t37 * t38, -0.2e1 * t22 * t37 - 0.2e1 * t23 * t36 + 0.2e1 * t3 * t68 - 0.2e1 * t4 * t69, 0.2e1 * t19 * t38 + 0.2e1 * t22 * t4 - 0.2e1 * t23 * t3, t29, t9, t18, t28, t17, t49, 0.2e1 * t1 * t80 + 0.2e1 * t10 * t64 + 0.2e1 * t30 * t36 + 0.2e1 * t68 * t7, -0.2e1 * t15 * t64 + 0.2e1 * t2 * t80 + 0.2e1 * t30 * t37 + 0.2e1 * t69 * t7, -0.2e1 * t1 * t69 - 0.2e1 * t10 * t37 - 0.2e1 * t15 * t36 + 0.2e1 * t2 * t68, 0.2e1 * t1 * t10 - 0.2e1 * t15 * t2 + 0.2e1 * t30 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138 * t253, 0, -t220, 0, t94, t93, 0, 0, 0, 0, t185, 0, -t173, 0, -t52, -t150 (t271 * t113 + (-t144 * t271 ^ 2 - t184 * t270) * t255) * pkin(2) (t150 * t270 - t271 * t52) * pkin(2), t143 * t294 - t304, t280 + t300, t170 + t235, t47, t70, 0, -t127 * t170 + t128 * t64 + t132 * t57 - t52 * t143 - t226 * t91, -t128 * t293 + t52 * t140 - t173 * t264 + t227 * t91 + t249 * t57, -t127 * t304 - t44 * t132 + t227 * t80 - t43 * t249 + t191 + (t294 - t64) * t264, t128 * t52 + ((-t140 * t44 - t143 * t43) * qJD(4) + t191) * t127, t21, t6, t11, t20, t14, t47, t59 * t80 + t64 * t76 + (-t4 + (t127 * t68 + t139 * t38) * qJD(4)) * t143 + (qJD(4) * t22 + t127 * t36 + t189) * t140, t58 * t80 - t64 * t77 + (-t3 + (t127 * t69 + t142 * t38) * qJD(4)) * t143 + (-qJD(4) * t23 + t127 * t37 - t188) * t140, -t36 * t77 - t37 * t76 + t58 * t68 - t59 * t69 + t197 * t249 + (qJD(5) * t196 + t139 * t3 - t142 * t4) * t140, t22 * t59 - t23 * t58 - t3 * t77 + t4 * t76 + (t140 * t19 + t249 * t38) * t127, t21, t6, t11, t20, t14, t47, t36 * t99 + t48 * t80 + t64 * t71 + t68 * t81 + (t251 * t30 - t1) * t143 + (qJD(4) * t10 + t131 * t30 + t285) * t140, t37 * t99 + t50 * t80 - t64 * t73 + t69 * t81 + (t250 * t30 - t2) * t143 + (-qJD(4) * t15 - t234 + t284) * t140, -t36 * t73 - t37 * t71 - t48 * t69 + t50 * t68 + t199 * t249 + (qJD(5) * t198 - t1 * t142 + t139 * t2) * t140, t1 * t71 + t10 * t48 - t15 * t50 - t2 * t73 + t30 * t81 + t7 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t218, -0.2e1 * t211, 0, t122, 0, 0, t140 * t242, t143 * t242, 0, 0, t89, t79, t82, t88, t83, t122, 0.2e1 * t142 * t225 - 0.2e1 * t143 * t59 + 0.2e1 * (t76 + 0.2e1 * t232) * t132, -0.2e1 * t139 * t225 - 0.2e1 * t143 * t58 + 0.2e1 * (-t77 + 0.2e1 * t112) * t132, 0.2e1 * t193 * t249 + 0.2e1 * (qJD(5) * t192 + t139 * t58 - t142 * t59) * t140, 0.2e1 * t127 ^ 2 * t218 - 0.2e1 * t58 * t77 + 0.2e1 * t59 * t76, t89, t79, t82, t88, t83, t122, 0.2e1 * (t251 * t99 - t48) * t143 + 0.2e1 * (qJD(4) * t71 + t131 * t99 + t277) * t140, 0.2e1 * (t250 * t99 - t50) * t143 + 0.2e1 * (-qJD(4) * t73 - t233 + t274) * t140, 0.2e1 * t195 * t249 + 0.2e1 * (qJD(5) * t194 + t139 * t50 - t142 * t48) * t140, 0.2e1 * t48 * t71 - 0.2e1 * t50 * t73 + 0.2e1 * t81 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, t185, 0, t210, 0, 0, 0, 0, 0, 0, t70, -t140 * t173 - t235, t280 - t300, -t140 * t24 + t143 * t25 + (-t140 * t43 + t143 * t44) * qJD(4), 0, 0, 0, 0, 0, 0, t13, t12, t5 (-qJD(4) * t196 - t19) * t143 + (qJD(4) * t38 + t169) * t140, 0, 0, 0, 0, 0, 0, t13, t12, t5 (-qJD(4) * t198 - t7) * t143 + (qJD(4) * t30 + t168) * t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t167 * t140 + (t127 * t256 - t143 * t192) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(4) * t194 - t81) * t143 + (qJD(4) * t99 + qJD(5) * t195 - t139 * t48 - t142 * t50) * t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, 0, -t64, t172, t25, t24, 0, 0, t27, t8, t46, t26, -t187, 0, -pkin(4) * t36 - pkin(10) * t46 + t188, -pkin(4) * t37 + pkin(10) * t187 + t189 (t279 - t276 + (t139 * t68 + t142 * t69) * qJD(5)) * pkin(10) + t169, -pkin(4) * t19 + pkin(10) * t169, t27, t8, t46, t26, -t187, 0, t117 * t64 + t129 * t36 - t284 + t80 * t98 + (t30 + t290) * t247, t118 * t64 + t129 * t37 + t285 + t80 * t97 + (pkin(5) * t278 + t142 * t30) * qJD(5), -t117 * t37 + t118 * t36 + t68 * t97 - t69 * t98 + t168, pkin(5) * t234 + t1 * t117 + t10 * t98 + t118 * t2 + t129 * t7 - t15 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t249, 0, -t132, 0, -t226, t227, 0, 0, -t85, t84, t104, t85, t102, 0 (pkin(10) * t259 + (-pkin(4) * t142 + t265) * t140) * qJD(5) + (t139 * t202 - t112) * qJD(4) (t127 * t260 + t139 * t201) * qJD(5) + (t142 * t202 + t232) * qJD(4), t167, -pkin(4) * t226 + pkin(10) * t167, -t85, t84, t104, t85, t102, 0, -t274 - t143 * t98 + (t129 * t261 + t267) * qJD(4) + (t139 * t99 + t140 * t200) * qJD(5), t277 - t143 * t97 + (t129 * t259 + t266) * qJD(4) + (t142 * t99 + t215 * t262) * qJD(5) (-t117 * t249 - t140 * t98 - t50 + (-t71 + t266) * qJD(5)) * t142 + (t118 * t249 + t140 * t97 - t48 + (-t73 + t267) * qJD(5)) * t139, pkin(5) * t233 + t117 * t48 + t118 * t50 + t129 * t81 + t71 * t98 - t73 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t132, -t249, 0, 0, 0, 0, 0, 0, 0, 0, -t102, t104, t100 (-t288 + (t134 + t136) * t286) * qJD(4), 0, 0, 0, 0, 0, 0, -t102, t104, t100 (-t239 + (-t117 * t139 - t118 * t142) * qJD(4)) * t143 + (qJD(4) * t129 + t166) * t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, t110, 0, t121, 0, 0, pkin(4) * t241, -0.2e1 * pkin(4) * t131, 0, 0, t120, t110, 0, t121, 0, 0, t215 * t241, 0.2e1 * t200 * qJD(5), 0.2e1 * t166, 0.2e1 * t117 * t98 + 0.2e1 * t118 * t97 + 0.2e1 * t129 * t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, -t36, t64, t4, t3, 0, 0, 0, 0, t37, 0, -t36, t64, t145 + 0.2e1 * t291, t2, -t37 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, 0, -t103, t132, t59, t58, 0, 0, 0, 0, -t101, 0, -t103, t132, t153 + 0.2e1 * t240, t50, t101 * pkin(5), t48 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, t101, 0, 0, 0, 0, 0, 0, 0, 0, -t103, t101, 0, -t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, -t247, 0, -pkin(10) * t131, pkin(10) * t247, 0, 0, 0, 0, t131, 0, -t247, 0, t98, t97, -pkin(5) * t131, t98 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t37, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, -t101, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, t131, 0, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t16;
