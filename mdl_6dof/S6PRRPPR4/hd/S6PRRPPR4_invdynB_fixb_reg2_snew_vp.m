% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:12:52
% EndTime: 2019-05-05 03:13:51
% DurationCPUTime: 57.09s
% Computational Cost: add. (109934->863), mult. (234060->1311), div. (0->0), fcn. (164374->12), ass. (0->636)
t1037 = qJD(2) * qJD(3);
t933 = cos(qJ(3));
t1026 = t933 * t1037;
t930 = sin(qJ(3));
t1035 = qJDD(2) * t930;
t890 = t1026 + t1035;
t922 = sin(pkin(11));
t925 = cos(pkin(11));
t856 = qJDD(3) * t922 + t890 * t925;
t1041 = qJD(2) * t933;
t1042 = qJD(2) * t930;
t880 = -t925 * qJD(3) + t1042 * t922;
t863 = t880 * t1041;
t1105 = t856 + t863;
t882 = qJD(3) * t922 + t1042 * t925;
t1061 = t880 * t882;
t1033 = qJDD(2) * t933;
t911 = t930 * t1037;
t891 = -t911 + t1033;
t964 = t891 - t1061;
t1066 = t964 * t925;
t878 = t882 ^ 2;
t919 = t933 ^ 2;
t935 = qJD(2) ^ 2;
t915 = t919 * t935;
t826 = t915 + t878;
t753 = t826 * t922 + t1066;
t670 = -t1105 * t933 + t753 * t930;
t924 = sin(pkin(6));
t927 = cos(pkin(6));
t676 = t1105 * t930 + t753 * t933;
t1067 = t964 * t922;
t725 = t826 * t925 - t1067;
t931 = sin(qJ(2));
t934 = cos(qJ(2));
t987 = t676 * t931 + t725 * t934;
t564 = -t924 * t670 + t927 * t987;
t613 = t676 * t934 - t725 * t931;
t923 = sin(pkin(10));
t926 = cos(pkin(10));
t498 = t564 * t923 - t613 * t926;
t1260 = qJ(1) * t498;
t513 = t564 * t926 + t613 * t923;
t1259 = qJ(1) * t513;
t562 = t927 * t670 + t924 * t987;
t1258 = pkin(7) * (t562 * t924 + t564 * t927);
t1257 = pkin(1) * t562;
t1256 = pkin(1) * t564;
t1090 = t880 ^ 2;
t857 = t915 - t1090;
t756 = t857 * t925 - t1067;
t855 = -t925 * qJDD(3) + t890 * t922;
t864 = t882 * t1041;
t795 = t855 + t864;
t673 = t756 * t930 - t795 * t933;
t679 = t756 * t933 + t795 * t930;
t752 = t857 * t922 + t1066;
t984 = t679 * t931 - t752 * t934;
t567 = -t924 * t673 + t927 * t984;
t616 = t679 * t934 + t752 * t931;
t1255 = t567 * t923 - t616 * t926;
t1254 = t567 * t926 + t616 * t923;
t1070 = t1105 * t922;
t796 = t855 - t864;
t1072 = t796 * t925;
t707 = -t1072 - t1070;
t830 = t878 - t1090;
t665 = t707 * t930 - t830 * t933;
t667 = t707 * t933 + t830 * t930;
t701 = t1105 * t925 - t796 * t922;
t988 = t667 * t931 - t701 * t934;
t553 = -t924 * t665 + t927 * t988;
t600 = t667 * t934 + t701 * t931;
t1253 = t553 * t923 - t600 * t926;
t1252 = t553 * t926 + t600 * t923;
t1250 = pkin(7) * t613;
t1243 = t927 * t673 + t924 * t984;
t1242 = t927 * t665 + t924 * t988;
t1106 = -t856 + t863;
t1149 = t1106 * t925 - t795 * t922;
t1100 = t878 + t1090;
t1148 = -t1106 * t922 - t795 * t925;
t1173 = -t1100 * t930 + t1148 * t933;
t1188 = t1149 * t931 + t1173 * t934;
t1174 = t1100 * t933 + t1148 * t930;
t1189 = -t1149 * t934 + t1173 * t931;
t1217 = -t1174 * t924 + t1189 * t927;
t1225 = t1188 * t923 + t1217 * t926;
t1241 = qJ(1) * t1225;
t1226 = t1188 * t926 - t1217 * t923;
t1240 = qJ(1) * t1226;
t1239 = pkin(8) * t670;
t1238 = pkin(1) * t1217;
t1218 = t1174 * t927 + t1189 * t924;
t1237 = pkin(1) * t1218;
t1020 = t891 + t1061;
t1064 = t1020 * t925;
t1101 = -t1090 - t915;
t1121 = t1101 * t922 - t1064;
t1065 = t1020 * t922;
t1120 = t1101 * t925 + t1065;
t1146 = t1120 * t933 + t796 * t930;
t1165 = t1121 * t931 + t1146 * t934;
t1147 = t1120 * t930 - t933 * t796;
t1166 = -t1121 * t934 + t1146 * t931;
t1192 = -t1147 * t924 + t1166 * t927;
t1213 = t1165 * t923 + t1192 * t926;
t1230 = qJ(1) * t1213;
t1214 = t1165 * t926 - t1192 * t923;
t1229 = qJ(1) * t1214;
t1228 = pkin(2) * t670 + qJ(4) * t753;
t1227 = -pkin(2) * t725 - pkin(8) * t676;
t1224 = (-t1217 * t927 - t1218 * t924) * pkin(7);
t1223 = pkin(1) * t1192;
t1193 = t1147 * t927 + t1166 * t924;
t1222 = pkin(1) * t1193;
t1221 = pkin(7) * t1188;
t860 = -t878 + t915;
t1123 = -t860 * t925 + t1065;
t1122 = -t860 * t922 - t1064;
t1140 = -t1106 * t930 + t1122 * t933;
t1171 = -t1123 * t931 + t1140 * t934;
t1141 = t1106 * t933 + t1122 * t930;
t1172 = t1123 * t934 + t1140 * t931;
t1190 = -t1141 * t924 + t1172 * t927;
t1216 = t1171 * t926 - t1190 * t923;
t1215 = t1171 * t923 + t1190 * t926;
t1212 = (-t1192 * t927 - t1193 * t924) * pkin(7);
t1210 = pkin(3) * t725;
t1209 = pkin(7) * t1165;
t1208 = pkin(8) * t1173;
t1207 = pkin(8) * t1174;
t1206 = qJ(4) * t725;
t1194 = -pkin(2) * t1174 - pkin(3) * t1100 - qJ(4) * t1148;
t1191 = t1141 * t927 + t1172 * t924;
t1187 = pkin(8) * t1147;
t1184 = qJ(4) * t1149;
t1177 = -pkin(2) * t1147 - qJ(4) * t1120;
t1176 = -pkin(2) * t1121 + pkin(8) * t1146;
t1059 = t891 * t930;
t941 = (t880 * t925 - t882 * t922) * t1041;
t1094 = t933 * t941 - t1059;
t940 = (-t880 * t922 - t882 * t925) * t1041;
t1118 = t1094 * t934 - t931 * t940;
t875 = t933 * t891;
t1098 = t930 * t941 + t875;
t1119 = t1094 * t931 + t934 * t940;
t1142 = -t1098 * t924 + t1119 * t927;
t1170 = t1118 * t926 - t1142 * t923;
t1169 = t1118 * t923 + t1142 * t926;
t1029 = t930 * t1061;
t957 = t855 * t922 - t863 * t925;
t1095 = t933 * t957 - t1029;
t956 = t855 * t925 + t863 * t922;
t1116 = t1095 * t934 - t931 * t956;
t1060 = t880 * t933;
t1028 = t882 * t1060;
t1096 = t930 * t957 + t1028;
t1117 = t1095 * t931 + t934 * t956;
t1144 = -t1096 * t924 + t1117 * t927;
t1168 = t1116 * t926 - t1144 * t923;
t1167 = t1116 * t923 + t1144 * t926;
t1163 = pkin(3) * t1121;
t1159 = qJ(4) * t1121;
t777 = t856 * t925 + t864 * t922;
t1012 = t933 * t777 + t1029;
t776 = -t856 * t922 + t864 * t925;
t1150 = t1012 * t931 + t776 * t934;
t1145 = t1096 * t927 + t1117 * t924;
t1143 = t1098 * t927 + t1119 * t924;
t1139 = pkin(4) * t796;
t929 = sin(qJ(6));
t932 = cos(qJ(6));
t820 = -t932 * t880 + t882 * t929;
t822 = t880 * t929 + t882 * t932;
t746 = t822 * t820;
t885 = qJDD(6) + t891;
t1107 = -t746 + t885;
t1126 = t1107 * t929;
t1125 = t1107 * t932;
t1046 = g(3) - qJDD(1);
t1023 = t924 * t1046;
t1024 = g(1) * t923 - t926 * g(2);
t1124 = t927 * t1024 - t1023;
t1013 = t930 * t777 - t1028;
t1092 = -t1013 * t924 + t1150 * t927;
t1093 = t1012 * t934 - t776 * t931;
t1115 = t1092 * t926 + t1093 * t923;
t1114 = -t1092 * t923 + t1093 * t926;
t898 = g(1) * t926 + g(2) * t923;
t802 = -t1124 * t934 - t931 * t898;
t808 = t1124 * t931 - t934 * t898;
t713 = t802 * t931 + t808 * t934;
t1113 = t713 * t924;
t711 = -qJD(6) * t820 + t855 * t929 + t856 * t932;
t908 = qJD(6) + t1041;
t794 = t908 * t820;
t1108 = t711 - t794;
t779 = -t935 * pkin(2) + qJDD(2) * pkin(8) + t808;
t1086 = pkin(3) * t933;
t1010 = -qJ(4) * t930 - t1086;
t888 = t1010 * qJD(2);
t1104 = (qJD(2) * t888 + t779) * t930;
t1103 = t923 * t1046;
t1102 = t926 * t1046;
t883 = t924 * t1024;
t1007 = t1046 * t927 + t883;
t962 = t931 * t1007;
t961 = t934 * t1007;
t1089 = qJD(3) ^ 2;
t738 = -t930 * t1007 + t933 * t779;
t692 = -pkin(3) * t1089 + qJDD(3) * qJ(4) + t1041 * t888 + t738;
t1008 = t890 + t1026;
t778 = -qJDD(2) * pkin(2) - t935 * pkin(8) + t802;
t709 = -t1008 * qJ(4) + (-t891 + t911) * pkin(3) + t778;
t1044 = t925 * t692 + t922 * t709;
t827 = pkin(4) * t880 - qJ(5) * t882;
t1099 = -t891 * qJ(5) - 0.2e1 * qJD(5) * t1041 - t880 * t827 + t1044;
t1048 = t930 * t779;
t849 = t933 * t1007;
t1015 = -qJDD(3) * pkin(3) - t1089 * qJ(4) + qJDD(4) + t849;
t958 = t856 * qJ(5) - t1015 - t1139;
t1097 = -qJD(2) * (qJ(5) * t1060 - t888 * t930) + t1048 - t958;
t835 = -t1024 * t923 - t926 * t898;
t834 = t1024 * t926 - t923 * t898;
t1091 = t1013 * t927 + t1150 * t924;
t814 = t820 ^ 2;
t815 = t822 ^ 2;
t906 = t908 ^ 2;
t1088 = pkin(4) + pkin(5);
t1087 = pkin(3) * t930;
t1085 = pkin(4) * t925;
t1084 = pkin(7) * t927;
t691 = t1015 + t1104;
t1083 = t691 * t922;
t1082 = t691 * t925;
t715 = t746 + t885;
t1081 = t715 * t929;
t1080 = t715 * t932;
t1077 = t778 * t930;
t1076 = t778 * t933;
t907 = t930 * t935 * t933;
t899 = -t907 + qJDD(3);
t1058 = t899 * t930;
t1057 = t899 * t933;
t900 = qJDD(3) + t907;
t1056 = t900 * t930;
t1055 = t908 * t929;
t1054 = t908 * t932;
t918 = t930 ^ 2;
t1053 = t918 * t935;
t1038 = qJD(5) * t882;
t612 = -0.2e1 * t1038 + t1097;
t970 = pkin(5) * t1041 - pkin(9) * t882;
t584 = t855 * pkin(5) + pkin(9) * t1090 - t882 * t970 + t612;
t1049 = t929 * t584;
t1047 = t932 * t584;
t1045 = t922 * t692 - t925 * t709;
t1043 = t918 + t919;
t1040 = qJD(4) * t880;
t1039 = qJD(4) * t882;
t1036 = qJDD(2) * t924;
t1034 = qJDD(2) * t931;
t1032 = qJDD(2) * t934;
t1031 = t930 * t746;
t1030 = t933 * t746;
t873 = 0.2e1 * t1039;
t609 = t873 + t1045;
t871 = -0.2e1 * t1040;
t610 = t871 + t1044;
t1025 = qJ(5) * t922 + pkin(3);
t1014 = t882 * t827 + qJDD(5) + t1045;
t963 = t891 * pkin(4) + t1014;
t936 = -qJ(5) * t915 + t963;
t542 = pkin(5) * t1020 + pkin(9) * t1106 + t873 + t936;
t969 = t871 + t1099;
t573 = -pkin(4) * t915 + t969;
t558 = -pkin(5) * t1090 + t855 * pkin(9) - t1041 * t970 + t573;
t472 = -t932 * t542 + t929 * t558;
t737 = t849 + t1048;
t631 = t737 * t930 + t933 * t738;
t1022 = t1100 - t915;
t1021 = -t932 * t855 + t929 * t856;
t1018 = t931 * t907;
t1017 = t934 * t907;
t630 = t737 * t933 - t738 * t930;
t893 = t1043 * qJDD(2);
t896 = t915 + t1053;
t832 = t893 * t934 - t896 * t931;
t1009 = pkin(7) * t832 + t630 * t931;
t473 = t929 * t542 + t932 * t558;
t436 = -t472 * t932 + t473 * t929;
t437 = t929 * t472 + t932 * t473;
t403 = t436 * t922 + t437 * t925;
t395 = t403 * t933 + t584 * t930;
t402 = -t436 * t925 + t437 * t922;
t1006 = t395 * t931 - t402 * t934;
t583 = -t936 - 0.2e1 * t1039;
t502 = t573 * t925 - t583 * t922;
t468 = t502 * t933 + t612 * t930;
t501 = t573 * t922 + t583 * t925;
t1005 = t468 * t931 - t501 * t934;
t659 = t711 + t794;
t939 = (-qJD(6) + t908) * t822 - t1021;
t586 = -t659 * t932 + t929 * t939;
t588 = t659 * t929 + t932 * t939;
t508 = t586 * t922 + t588 * t925;
t684 = -t814 - t815;
t481 = t508 * t933 - t684 * t930;
t506 = -t586 * t925 + t588 * t922;
t1004 = t481 * t931 - t506 * t934;
t654 = (qJD(6) + t908) * t822 + t1021;
t585 = -t1108 * t932 + t654 * t929;
t587 = -t1108 * t929 - t654 * t932;
t507 = -t585 * t922 + t587 * t925;
t739 = t815 - t814;
t491 = t507 * t933 - t739 * t930;
t505 = -t585 * t925 - t587 * t922;
t1003 = t491 * t931 + t505 * t934;
t523 = t609 * t922 + t610 * t925;
t510 = t523 * t933 + t691 * t930;
t522 = -t609 * t925 + t610 * t922;
t1002 = t510 * t931 - t522 * t934;
t733 = -t906 - t814;
t627 = t733 * t929 + t1125;
t628 = t733 * t932 - t1126;
t557 = t627 * t922 + t628 * t925;
t518 = t557 * t933 - t654 * t930;
t556 = -t627 * t925 + t628 * t922;
t1001 = t518 * t931 - t556 * t934;
t769 = -t815 - t906;
t632 = t769 * t932 - t1081;
t633 = -t769 * t929 - t1080;
t572 = t632 * t922 + t633 * t925;
t521 = -t1108 * t930 + t572 * t933;
t571 = -t632 * t925 + t633 * t922;
t1000 = t521 * t931 - t571 * t934;
t785 = -t815 + t906;
t646 = -t785 * t932 - t1126;
t648 = -t785 * t929 + t1125;
t581 = -t646 * t922 + t648 * t925;
t527 = t581 * t933 - t659 * t930;
t579 = -t646 * t925 - t648 * t922;
t999 = t527 * t931 + t579 * t934;
t784 = t814 - t906;
t647 = -t784 * t929 - t1080;
t649 = t784 * t932 - t1081;
t582 = -t647 * t922 + t649 * t925;
t528 = t582 * t933 - t930 * t939;
t580 = -t647 * t925 - t649 * t922;
t998 = t528 * t931 + t580 * t934;
t710 = -qJD(6) * t822 - t1021;
t642 = -t1055 * t820 - t710 * t932;
t643 = t1054 * t820 - t710 * t929;
t576 = -t642 * t922 + t643 * t925;
t546 = t576 * t933 + t1031;
t574 = -t642 * t925 - t643 * t922;
t997 = t546 * t931 + t574 * t934;
t644 = -t1054 * t822 - t711 * t929;
t645 = -t1055 * t822 + t711 * t932;
t577 = -t644 * t922 + t645 * t925;
t547 = t577 * t933 - t1031;
t575 = -t644 * t925 - t645 * t922;
t996 = t547 * t931 + t575 * t934;
t696 = (t820 * t929 + t822 * t932) * t908;
t697 = (-t820 * t932 + t822 * t929) * t908;
t620 = -t696 * t922 + t697 * t925;
t607 = t620 * t933 - t885 * t930;
t619 = -t696 * t925 - t697 * t922;
t995 = t607 * t931 + t619 * t934;
t994 = t631 * t931 - t778 * t934;
t712 = t934 * t802 - t931 * t808;
t889 = 0.2e1 * t1026 + t1035;
t892 = -0.2e1 * t911 + t1033;
t829 = -t889 * t930 + t892 * t933;
t897 = t915 - t1053;
t977 = t829 * t931 + t897 * t934;
t905 = -t915 - t1089;
t845 = t905 * t933 - t1056;
t976 = t845 * t931 + t892 * t934;
t903 = -t1053 - t1089;
t847 = -t903 * t930 - t1057;
t975 = t847 * t931 - t889 * t934;
t972 = t934 * t935 + t1034;
t868 = t972 * t927;
t894 = -t931 * t935 + t1032;
t974 = t868 * t926 + t894 * t923;
t818 = t868 * t923 - t894 * t926;
t973 = t893 * t931 + t896 * t934;
t886 = t1043 * t1037;
t971 = -qJDD(3) * t934 + t886 * t931;
t904 = t915 - t1089;
t844 = t904 * t933 - t1058;
t967 = -t1032 * t933 + t844 * t931;
t887 = t933 * t900;
t902 = -t1053 + t1089;
t846 = -t902 * t930 + t887;
t966 = -t1032 * t930 + t846 * t931;
t852 = -t1037 * t919 - t1059;
t960 = t852 * t931 - t1017;
t853 = -t1037 * t918 + t890 * t933;
t959 = t853 * t931 + t1017;
t377 = -pkin(3) * t402 - qJ(5) * t437 + t1088 * t436;
t418 = -pkin(9) * t437 - t1088 * t584;
t428 = -pkin(9) * t436 - qJ(5) * t584;
t380 = -qJ(4) * t402 - t418 * t922 + t428 * t925;
t394 = t403 * t930 - t584 * t933;
t364 = -pkin(8) * t394 - t377 * t930 + t380 * t933;
t371 = -pkin(2) * t394 + pkin(3) * t584 - qJ(4) * t403 - t418 * t925 - t428 * t922;
t382 = t395 * t934 + t402 * t931;
t955 = pkin(7) * t382 + t364 * t931 + t371 * t934;
t420 = -pkin(9) * t588 + t1088 * t684 - t437;
t426 = -pkin(9) * t586 + qJ(5) * t684 - t436;
t385 = -qJ(4) * t506 - t420 * t922 + t426 * t925;
t440 = -pkin(3) * t506 - qJ(5) * t588 + t1088 * t586;
t480 = t508 * t930 + t684 * t933;
t381 = -pkin(8) * t480 + t385 * t933 - t440 * t930;
t384 = -pkin(2) * t480 - pkin(3) * t684 - qJ(4) * t508 - t420 * t925 - t426 * t922;
t444 = t481 * t934 + t506 * t931;
t954 = pkin(7) * t444 + t381 * t931 + t384 * t934;
t474 = -pkin(9) * t628 + t1088 * t654 - t1047;
t495 = -pkin(9) * t627 + qJ(5) * t654 - t1049;
t430 = -qJ(4) * t556 - t474 * t922 + t495 * t925;
t431 = -pkin(3) * t556 - qJ(5) * t628 + t1088 * t627 - t472;
t517 = t557 * t930 + t654 * t933;
t388 = -pkin(8) * t517 + t430 * t933 - t431 * t930;
t408 = -pkin(2) * t517 - pkin(3) * t654 - qJ(4) * t557 - t474 * t925 - t495 * t922;
t466 = t518 * t934 + t556 * t931;
t953 = pkin(7) * t466 + t388 * t931 + t408 * t934;
t479 = -pkin(9) * t633 + t1088 * t1108 + t1049;
t503 = -pkin(9) * t632 + qJ(5) * t1108 - t1047;
t433 = -qJ(4) * t571 - t479 * t922 + t503 * t925;
t438 = -pkin(3) * t571 - qJ(5) * t633 + t1088 * t632 - t473;
t520 = t1108 * t933 + t572 * t930;
t393 = -pkin(8) * t520 + t433 * t933 - t438 * t930;
t415 = -pkin(2) * t520 - pkin(3) * t1108 - qJ(4) * t572 - t479 * t925 - t503 * t922;
t471 = t521 * t934 + t571 * t931;
t952 = pkin(7) * t471 + t393 * t931 + t415 * t934;
t450 = -pkin(3) * t501 - pkin(4) * t583 - qJ(5) * t573;
t459 = -qJ(4) * t501 + (pkin(4) * t922 - qJ(5) * t925) * t612;
t467 = t502 * t930 - t612 * t933;
t401 = -pkin(8) * t467 - t450 * t930 + t459 * t933;
t419 = -pkin(2) * t467 - qJ(4) * t502 + (t1025 + t1085) * t612;
t441 = t468 * t934 + t501 * t931;
t951 = pkin(7) * t441 + t401 * t931 + t419 * t934;
t509 = t523 * t930 - t691 * t933;
t439 = -pkin(8) * t509 + (-qJ(4) * t933 + t1087) * t522;
t454 = -pkin(2) * t509 + pkin(3) * t691 - qJ(4) * t523;
t460 = t510 * t934 + t522 * t931;
t950 = pkin(7) * t460 + t439 * t931 + t454 * t934;
t560 = pkin(4) * t1022 + t969;
t561 = qJ(5) * t1022 + t873 + t963;
t470 = -t560 * t922 + t561 * t925 - t1184;
t626 = -pkin(3) * t1149 - pkin(4) * t1106 + qJ(5) * t795;
t455 = t470 * t933 - t626 * t930 - t1207;
t463 = -t560 * t925 - t561 * t922 + t1194;
t949 = t455 * t931 + t463 * t934 + t1221;
t519 = -t1210 + qJ(5) * t964 + 0.2e1 * t1040 + (-t826 + t915) * pkin(4) - t1099;
t870 = 0.2e1 * t1038;
t590 = t870 - t1104 + (t1105 + t863) * qJ(5) + t958;
t539 = -pkin(4) * t1070 + t590 * t925 - t1206;
t462 = -t519 * t930 + t539 * t933 + t1239;
t504 = -t922 * t590 + (-pkin(3) - t1085) * t1105 + t1228;
t948 = t462 * t931 + t504 * t934 - t1250;
t531 = -t1163 + t873 + (-t1101 - t915) * qJ(5) + (t1020 + t891) * pkin(4) + t1014;
t591 = -t1097 + t870 - t1139;
t541 = -qJ(5) * t1072 - t591 * t922 - t1159;
t464 = -t531 * t930 + t541 * t933 - t1187;
t511 = t1025 * t796 - t925 * t591 + t1177;
t947 = t464 * t931 + t511 * t934 + t1209;
t512 = -t522 - t1184;
t469 = t1087 * t1149 + t512 * t933 - t1207;
t475 = t1194 - t523;
t946 = t469 * t931 + t475 * t934 + t1221;
t570 = t609 - t1163;
t621 = t1083 - t1159;
t492 = -t570 * t930 + t621 * t933 - t1187;
t543 = pkin(3) * t796 + t1082 + t1177;
t945 = t492 * t931 + t543 * t934 + t1209;
t578 = t610 + t1210;
t625 = t1082 + t1206;
t500 = -t578 * t930 + t625 * t933 - t1239;
t559 = pkin(3) * t1105 - t1083 - t1228;
t944 = t500 * t931 + t559 * t934 + t1250;
t841 = t905 * t930 + t887;
t689 = -pkin(2) * t841 + t737;
t735 = -pkin(8) * t841 + t1077;
t782 = t845 * t934 - t892 * t931;
t943 = pkin(7) * t782 + t689 * t934 + t735 * t931;
t843 = t903 * t933 - t1058;
t690 = -pkin(2) * t843 + t738;
t736 = -pkin(8) * t843 + t1076;
t783 = t847 * t934 + t889 * t931;
t942 = pkin(7) * t783 + t690 * t934 + t736 * t931;
t608 = t631 * t934 + t778 * t931;
t938 = pkin(7) * t608 - (-pkin(2) * t934 - pkin(8) * t931) * t630;
t869 = t894 * t927;
t867 = t894 * t924;
t866 = t972 * t924;
t854 = qJDD(3) * t931 + t886 * t934;
t842 = t902 * t933 + t1056;
t840 = t904 * t930 + t1057;
t839 = t1008 * t930;
t838 = -t1026 * t930 + t875;
t833 = t971 * t927;
t828 = t889 * t933 + t892 * t930;
t824 = t973 * t927;
t823 = t973 * t924;
t819 = -t869 * t923 - t926 * t972;
t817 = t869 * t926 - t923 * t972;
t812 = t853 * t934 - t1018;
t811 = t852 * t934 + t1018;
t810 = t1034 * t930 + t846 * t934;
t809 = t1033 * t931 + t844 * t934;
t771 = t829 * t934 - t897 * t931;
t760 = -t961 + (t866 * t924 + t868 * t927) * pkin(7);
t759 = -t962 + (-t867 * t924 - t869 * t927) * pkin(7);
t745 = -t824 * t923 + t832 * t926;
t744 = t824 * t926 + t832 * t923;
t743 = -t924 * t839 + t927 * t959;
t742 = -t924 * t838 + t927 * t960;
t741 = -t924 * t842 + t927 * t966;
t740 = -t924 * t840 + t927 * t967;
t732 = -t924 * t843 + t927 * t975;
t731 = -t924 * t841 + t927 * t976;
t730 = t927 * t843 + t924 * t975;
t729 = t927 * t841 + t924 * t976;
t700 = -t924 * t828 + t927 * t977;
t699 = pkin(2) * t892 + pkin(8) * t845 - t1076;
t698 = -pkin(2) * t889 + pkin(8) * t847 + t1077;
t693 = t713 * t927;
t686 = -pkin(1) * t867 - t1084 * t972 + t924 * t802 + t927 * t961;
t685 = pkin(1) * t866 - t1084 * t894 + t924 * t808 - t927 * t962;
t669 = t924 * t883 + (t1023 - t712) * t927;
t668 = -t1007 * t927 - t712 * t924;
t653 = -t732 * t923 + t783 * t926;
t652 = -t731 * t923 + t782 * t926;
t651 = t732 * t926 + t783 * t923;
t650 = t731 * t926 + t782 * t923;
t624 = pkin(2) * t896 + pkin(8) * t893 + t631;
t611 = -pkin(2) * t778 + pkin(8) * t631;
t606 = t620 * t930 + t885 * t933;
t605 = -pkin(1) * t668 + t1084 * t713;
t604 = -t669 * t923 + t713 * t926;
t603 = t669 * t926 + t713 * t923;
t592 = t934 * t630 + (-t823 * t924 - t824 * t927) * pkin(7);
t589 = (-t668 * t924 - t669 * t927) * pkin(7);
t555 = -t931 * t690 + t934 * t736 + (-t730 * t924 - t732 * t927) * pkin(7);
t554 = -t931 * t689 + t934 * t735 + (-t729 * t924 - t731 * t927) * pkin(7);
t545 = t577 * t930 + t1030;
t544 = t576 * t930 - t1030;
t538 = t630 * t924 + t927 * t994;
t537 = -t630 * t927 + t924 * t994;
t532 = t607 * t934 - t619 * t931;
t530 = -pkin(1) * t730 - t924 * t698 + t927 * t942;
t529 = -pkin(1) * t729 - t924 * t699 + t927 * t943;
t526 = t582 * t930 + t933 * t939;
t525 = t581 * t930 + t659 * t933;
t524 = -pkin(1) * t823 + t1009 * t927 - t924 * t624;
t494 = -t538 * t923 + t608 * t926;
t493 = t538 * t926 + t608 * t923;
t490 = t507 * t930 + t739 * t933;
t485 = -t924 * t606 + t927 * t995;
t484 = t547 * t934 - t575 * t931;
t483 = t546 * t934 - t574 * t931;
t482 = t578 * t933 + t625 * t930 - t1227;
t478 = t528 * t934 - t580 * t931;
t477 = t527 * t934 - t579 * t931;
t476 = t570 * t933 + t621 * t930 + t1176;
t465 = t1208 + t930 * t512 + (-pkin(2) - t1086) * t1149;
t461 = t531 * t933 + t541 * t930 + t1176;
t458 = -t924 * t545 + t927 * t996;
t457 = -t924 * t544 + t927 * t997;
t456 = t519 * t933 + t539 * t930 + t1227;
t453 = -(pkin(2) * t931 - pkin(8) * t934) * t630 + (-t537 * t924 - t538 * t927) * pkin(7);
t452 = -t924 * t526 + t927 * t998;
t451 = -t924 * t525 + t927 * t999;
t449 = -pkin(1) * t537 - t924 * t611 + t927 * t938;
t448 = -pkin(2) * t1149 + t470 * t930 + t626 * t933 + t1208;
t447 = t1000 * t927 - t924 * t520;
t446 = t1000 * t924 + t927 * t520;
t445 = t491 * t934 - t505 * t931;
t443 = t1001 * t927 - t924 * t517;
t442 = t1001 * t924 + t927 * t517;
t435 = t1002 * t927 - t924 * t509;
t434 = t1002 * t924 + t927 * t509;
t432 = t934 * t500 - t931 * t559 - t1258;
t429 = t934 * t492 - t931 * t543 + t1212;
t427 = t1003 * t927 - t924 * t490;
t425 = pkin(8) * t510 + (-pkin(2) + t1010) * t522;
t424 = t1004 * t927 - t924 * t480;
t423 = t1004 * t924 + t927 * t480;
t422 = -t447 * t923 + t471 * t926;
t421 = t447 * t926 + t471 * t923;
t417 = t934 * t464 - t931 * t511 + t1212;
t416 = -t924 * t482 + t927 * t944 - t1257;
t414 = t1005 * t927 - t924 * t467;
t413 = t1005 * t924 + t927 * t467;
t412 = -t443 * t923 + t466 * t926;
t411 = t443 * t926 + t466 * t923;
t410 = t934 * t462 - t931 * t504 + t1258;
t409 = t934 * t469 - t931 * t475 + t1224;
t407 = -t924 * t476 + t927 * t945 - t1222;
t406 = -t435 * t923 + t460 * t926;
t405 = t435 * t926 + t460 * t923;
t404 = t934 * t455 - t931 * t463 + t1224;
t400 = -t924 * t461 + t927 * t947 - t1222;
t399 = -t924 * t465 + t927 * t946 - t1237;
t398 = -t424 * t923 + t444 * t926;
t397 = t424 * t926 + t444 * t923;
t396 = -t924 * t456 + t927 * t948 + t1257;
t392 = -pkin(2) * t501 + pkin(8) * t468 + t450 * t933 + t459 * t930;
t391 = -t414 * t923 + t441 * t926;
t390 = t414 * t926 + t441 * t923;
t389 = -pkin(2) * t571 + pkin(8) * t521 + t433 * t930 + t438 * t933;
t387 = -t924 * t448 + t927 * t949 - t1237;
t386 = -pkin(2) * t556 + pkin(8) * t518 + t430 * t930 + t431 * t933;
t383 = t934 * t439 - t931 * t454 + (-t434 * t924 - t435 * t927) * pkin(7);
t379 = -pkin(1) * t434 - t924 * t425 + t927 * t950;
t378 = -pkin(2) * t506 + pkin(8) * t481 + t385 * t930 + t440 * t933;
t376 = t934 * t393 - t931 * t415 + (-t446 * t924 - t447 * t927) * pkin(7);
t375 = t934 * t388 - t931 * t408 + (-t442 * t924 - t443 * t927) * pkin(7);
t374 = t934 * t401 - t931 * t419 + (-t413 * t924 - t414 * t927) * pkin(7);
t373 = t1006 * t927 - t924 * t394;
t372 = t1006 * t924 + t927 * t394;
t370 = -pkin(1) * t446 - t924 * t389 + t927 * t952;
t369 = -pkin(1) * t413 - t924 * t392 + t927 * t951;
t368 = -pkin(1) * t442 - t924 * t386 + t927 * t953;
t367 = t934 * t381 - t931 * t384 + (-t423 * t924 - t424 * t927) * pkin(7);
t366 = -t373 * t923 + t382 * t926;
t365 = t373 * t926 + t382 * t923;
t363 = -pkin(2) * t402 + pkin(8) * t395 + t377 * t933 + t380 * t930;
t362 = -pkin(1) * t423 - t924 * t378 + t927 * t954;
t361 = t934 * t364 - t931 * t371 + (-t372 * t924 - t373 * t927) * pkin(7);
t360 = -pkin(1) * t372 - t924 * t363 + t927 * t955;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, 0, 0, 0, 0, 0, t819, t818, 0, t604, 0, 0, 0, 0, 0, 0, t652, t653, t745, t494, 0, 0, 0, 0, 0, 0, t1214, -t498, t1226, t406, 0, 0, 0, 0, 0, 0, t1214, t1226, t498, t391, 0, 0, 0, 0, 0, 0, t412, t422, t398, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, 0, 0, 0, 0, 0, 0, t817, -t974, 0, t603, 0, 0, 0, 0, 0, 0, t650, t651, t744, t493, 0, 0, 0, 0, 0, 0, t1213, t513, t1225, t405, 0, 0, 0, 0, 0, 0, t1213, t1225, -t513, t390, 0, 0, 0, 0, 0, 0, t411, t421, t397, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1046, 0, 0, 0, 0, 0, 0, t867, -t866, 0, t668, 0, 0, 0, 0, 0, 0, t729, t730, t823, t537, 0, 0, 0, 0, 0, 0, t1193, t562, t1218, t434, 0, 0, 0, 0, 0, 0, t1193, t1218, -t562, t413, 0, 0, 0, 0, 0, 0, t442, t446, t423, t372; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1103, -t1102, -t834, -qJ(1) * t834, 0, 0, -t818, 0, t819, t923 * t1036, -qJ(1) * t817 - t686 * t923 + t759 * t926, qJ(1) * t974 - t685 * t923 + t760 * t926, -t693 * t923 + t712 * t926, -qJ(1) * t603 + t589 * t926 - t605 * t923, -t743 * t923 + t812 * t926, -t700 * t923 + t771 * t926, -t741 * t923 + t810 * t926, -t742 * t923 + t811 * t926, -t740 * t923 + t809 * t926, -t833 * t923 + t854 * t926, -qJ(1) * t650 - t529 * t923 + t554 * t926, -qJ(1) * t651 - t530 * t923 + t555 * t926, -qJ(1) * t744 - t524 * t923 + t592 * t926, -qJ(1) * t493 - t449 * t923 + t453 * t926, t1114, -t1253, t1216, t1168, t1255, t1170, -t407 * t923 + t429 * t926 - t1230, -t416 * t923 + t432 * t926 - t1259, -t399 * t923 + t409 * t926 - t1241, -qJ(1) * t405 - t379 * t923 + t383 * t926, t1114, t1216, t1253, t1170, -t1255, t1168, -t400 * t923 + t417 * t926 - t1230, -t387 * t923 + t404 * t926 - t1241, -t396 * t923 + t410 * t926 + t1259, -qJ(1) * t390 - t369 * t923 + t374 * t926, -t458 * t923 + t484 * t926, -t427 * t923 + t445 * t926, -t451 * t923 + t477 * t926, -t457 * t923 + t483 * t926, -t452 * t923 + t478 * t926, -t485 * t923 + t532 * t926, -qJ(1) * t411 - t368 * t923 + t375 * t926, -qJ(1) * t421 - t370 * t923 + t376 * t926, -qJ(1) * t397 - t362 * t923 + t367 * t926, -qJ(1) * t365 - t360 * t923 + t361 * t926; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1102, -t1103, t835, qJ(1) * t835, 0, 0, t974, 0, t817, -t926 * t1036, qJ(1) * t819 + t686 * t926 + t759 * t923, qJ(1) * t818 + t685 * t926 + t760 * t923, t693 * t926 + t712 * t923, qJ(1) * t604 + t589 * t923 + t605 * t926, t743 * t926 + t812 * t923, t700 * t926 + t771 * t923, t741 * t926 + t810 * t923, t742 * t926 + t811 * t923, t740 * t926 + t809 * t923, t833 * t926 + t854 * t923, qJ(1) * t652 + t529 * t926 + t554 * t923, qJ(1) * t653 + t530 * t926 + t555 * t923, qJ(1) * t745 + t524 * t926 + t592 * t923, qJ(1) * t494 + t449 * t926 + t453 * t923, t1115, t1252, t1215, t1167, -t1254, t1169, t407 * t926 + t429 * t923 + t1229, t416 * t926 + t432 * t923 - t1260, t399 * t926 + t409 * t923 + t1240, qJ(1) * t406 + t379 * t926 + t383 * t923, t1115, t1215, -t1252, t1169, t1254, t1167, t400 * t926 + t417 * t923 + t1229, t387 * t926 + t404 * t923 + t1240, t396 * t926 + t410 * t923 + t1260, qJ(1) * t391 + t369 * t926 + t374 * t923, t458 * t926 + t484 * t923, t427 * t926 + t445 * t923, t451 * t926 + t477 * t923, t457 * t926 + t483 * t923, t452 * t926 + t478 * t923, t485 * t926 + t532 * t923, qJ(1) * t412 + t368 * t926 + t375 * t923, qJ(1) * t422 + t370 * t926 + t376 * t923, qJ(1) * t398 + t362 * t926 + t367 * t923, qJ(1) * t366 + t360 * t926 + t361 * t923; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1024, t898, 0, 0, 0, 0, t866, 0, t867, t927 * qJDD(2), pkin(1) * t869 - t927 * t802 + (-pkin(7) * t972 + t961) * t924, -pkin(1) * t868 - t927 * t808 + (-pkin(7) * t894 - t962) * t924, t1113, pkin(1) * t669 + pkin(7) * t1113, t927 * t839 + t924 * t959, t927 * t828 + t924 * t977, t927 * t842 + t924 * t966, t927 * t838 + t924 * t960, t927 * t840 + t924 * t967, t971 * t924, pkin(1) * t731 + t927 * t699 + t924 * t943, pkin(1) * t732 + t927 * t698 + t924 * t942, pkin(1) * t824 + t1009 * t924 + t927 * t624, pkin(1) * t538 + t927 * t611 + t924 * t938, t1091, t1242, t1191, t1145, -t1243, t1143, t927 * t476 + t924 * t945 + t1223, t927 * t482 + t924 * t944 + t1256, t927 * t465 + t924 * t946 + t1238, pkin(1) * t435 + t927 * t425 + t924 * t950, t1091, t1191, -t1242, t1143, t1243, t1145, t927 * t461 + t924 * t947 + t1223, t927 * t448 + t924 * t949 + t1238, t927 * t456 + t924 * t948 - t1256, pkin(1) * t414 + t927 * t392 + t924 * t951, t927 * t545 + t924 * t996, t1003 * t924 + t927 * t490, t927 * t525 + t924 * t999, t927 * t544 + t924 * t997, t927 * t526 + t924 * t998, t927 * t606 + t924 * t995, pkin(1) * t443 + t927 * t386 + t924 * t953, pkin(1) * t447 + t927 * t389 + t924 * t952, pkin(1) * t424 + t927 * t378 + t924 * t954, pkin(1) * t373 + t927 * t363 + t924 * t955;];
tauB_reg  = t1;
