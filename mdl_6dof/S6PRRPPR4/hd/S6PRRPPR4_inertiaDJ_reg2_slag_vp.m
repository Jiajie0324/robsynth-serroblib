% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPPR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR4_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:16:26
% EndTime: 2019-03-08 21:16:35
% DurationCPUTime: 2.81s
% Computational Cost: add. (1849->289), mult. (4964->521), div. (0->0), fcn. (4572->10), ass. (0->144)
t91 = sin(pkin(11));
t87 = t91 ^ 2;
t93 = cos(pkin(11));
t88 = t93 ^ 2;
t182 = (t87 + t88) * qJD(4);
t177 = pkin(4) + pkin(5);
t181 = t177 * t91;
t112 = t93 * pkin(3) + t91 * pkin(8) + pkin(4);
t109 = pkin(5) + t112;
t162 = pkin(9) - qJ(4);
t95 = sin(qJ(3));
t97 = cos(qJ(3));
t180 = t109 * t97 + (-t162 * t95 + pkin(2)) * t93;
t174 = cos(qJ(6));
t125 = qJD(6) * t174;
t94 = sin(qJ(6));
t148 = qJD(6) * t94;
t52 = t91 * t125 - t93 * t148;
t60 = t174 * t91 - t94 * t93;
t157 = qJ(4) * t95;
t130 = qJ(5) * t91 + pkin(3);
t61 = -pkin(4) * t93 - t130;
t179 = qJD(3) * (-t61 * t97 + t157);
t123 = (t95 ^ 2 - t97 ^ 2) * qJD(3);
t178 = 0.2e1 * t93;
t176 = pkin(3) * t95;
t175 = pkin(4) * t91;
t98 = cos(qJ(2));
t152 = qJD(2) * t98;
t92 = sin(pkin(6));
t136 = t92 * t152;
t154 = cos(pkin(6));
t96 = sin(qJ(2));
t167 = t92 * t96;
t54 = t154 * t95 + t97 * t167;
t36 = t54 * qJD(3) + t95 * t136;
t173 = t36 * t91;
t172 = t36 * t93;
t171 = t36 * t95;
t53 = -t154 * t97 + t95 * t167;
t170 = t53 * t36;
t169 = t91 * t95;
t168 = t91 * t97;
t166 = t92 * t98;
t165 = t93 * t95;
t164 = t93 * t97;
t144 = t93 * qJD(4);
t155 = t93 * qJ(4);
t153 = qJD(2) * t96;
t137 = t92 * t153;
t35 = -t53 * qJD(3) + t97 * t136;
t20 = t91 * t137 + t35 * t93;
t34 = -t91 * t166 + t54 * t93;
t161 = t34 * t144 + t20 * t155;
t150 = qJD(3) * t97;
t79 = t93 * t150;
t160 = -qJ(5) * t79 - qJD(5) * t165;
t117 = -pkin(3) * t97 - t157;
t110 = -pkin(2) + t117;
t82 = pkin(8) * t164;
t44 = t91 * t110 + t82;
t159 = qJ(4) * t182;
t156 = qJ(4) * t97;
t151 = qJD(3) * t95;
t149 = qJD(3) * t98;
t147 = t87 * qJD(5);
t146 = t91 * qJD(4);
t145 = t91 * qJD(5);
t142 = pkin(8) * t168;
t141 = -0.2e1 * pkin(2) * qJD(3);
t140 = pkin(8) * t150;
t76 = t91 * t150;
t138 = t95 * t146;
t135 = t93 * t151;
t134 = t95 * t144;
t133 = t95 * t150;
t131 = t162 * t91;
t70 = t162 * t93;
t129 = qJ(5) * t93 - pkin(8);
t128 = -t93 * pkin(8) + qJ(5);
t19 = -t93 * t137 + t35 * t91;
t127 = t19 * t91 + t20 * t93;
t126 = qJD(3) * t174;
t124 = t174 * qJD(4);
t122 = 0.2e1 * t133;
t65 = t91 * t79;
t121 = t97 * t126;
t119 = t93 * t124;
t40 = -qJ(5) * t97 + t44;
t118 = t95 * t65;
t116 = -t156 + t176;
t103 = pkin(8) * t169 + t93 * t116;
t31 = t103 * qJD(3) - t134;
t102 = -pkin(8) * t165 + t91 * t116;
t32 = t102 * qJD(3) - t138;
t115 = -t31 * t91 + t32 * t93;
t33 = t93 * t166 + t54 * t91;
t113 = qJ(4) * t19 + qJD(4) * t33;
t111 = t174 * t131;
t9 = t33 * t174 - t34 * t94;
t10 = t34 * t174 + t33 * t94;
t59 = t174 * t93 + t94 * t91;
t107 = 0.2e1 * t19 * t33 + 0.2e1 * t34 * t20 + 0.2e1 * t170;
t106 = -t97 * qJD(5) - t138;
t104 = -t33 * t151 + t36 * t169 + t19 * t97 + t53 * t76;
t51 = t59 * qJD(6);
t101 = t35 * t97 + t171 + (t53 * t97 - t54 * t95) * qJD(3);
t100 = (t19 * t93 - t20 * t91) * t95 + (t33 * t93 - t34 * t91) * t150;
t99 = t174 * t180;
t29 = pkin(9) * t169 + t40;
t7 = t174 * t29 + t180 * t94;
t75 = t91 * t151;
t74 = t97 * t146;
t73 = -0.2e1 * t133;
t63 = t88 * t122;
t62 = t87 * t122;
t58 = 0.2e1 * t182;
t55 = t177 * t93 + t130;
t50 = t91 * t123;
t49 = (t87 - t88) * t150;
t48 = t59 * t95;
t47 = t60 * t95;
t46 = t178 * t123;
t45 = (-t129 + t175) * t95;
t43 = t93 * t110 - t142;
t41 = -t93 * (-pkin(2) - t157) + t112 * t97;
t39 = (t129 - t181) * t95;
t38 = -t94 * t131 - t174 * t70;
t37 = t94 * t70 - t111;
t30 = (pkin(8) + t175) * t150 + t160;
t26 = t134 + (-t112 * t95 + t97 * t155) * qJD(3);
t25 = (pkin(8) + t181) * t150 + t160;
t24 = (-t91 * t156 + (t91 * pkin(3) + t128) * t95) * qJD(3) + t106;
t23 = -t91 * t121 + t95 * t51 + t94 * t79;
t22 = -t93 * t121 - t52 * t95 - t94 * t76;
t16 = t70 * t125 - t94 * t144 + (t162 * t148 + t124) * t91;
t15 = qJD(6) * t111 - t94 * t146 - t70 * t148 - t119;
t6 = -t94 * t29 + t99;
t5 = t36 * t165 + t20 * t97 + (t53 * t164 - t34 * t95) * qJD(3);
t4 = t9 * qJD(6) + t20 * t174 + t19 * t94;
t3 = -t10 * qJD(6) + t19 * t174 - t20 * t94;
t2 = -t94 * t106 + t95 * t119 - t7 * qJD(6) + (-t94 * (pkin(9) * t168 + t95 * qJ(5) + t102) + t174 * (-pkin(9) * t164 - t177 * t95 - t103)) * qJD(3);
t1 = t29 * t148 - t94 * (t134 + (-t109 * t95 - t97 * t70) * qJD(3)) - t174 * ((t128 * t95 + (t162 * t97 + t176) * t91) * qJD(3) + t106) - qJD(6) * t99;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t92 ^ 2 * t96 * t152 + 0.2e1 * t54 * t35 + 0.2e1 * t170, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t10 * t4 + 0.2e1 * t3 * t9 + 0.2e1 * t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, -t136, 0, 0, 0, 0, 0, 0, 0, 0 (-t95 * t149 - t97 * t153) * t92 (-t97 * t149 + t95 * t153) * t92, t101, -pkin(2) * t137 + t101 * pkin(8), 0, 0, 0, 0, 0, 0, t104, t5, t100, -t19 * t43 + t20 * t44 - t31 * t33 + t32 * t34 + (t53 * t150 + t171) * pkin(8), 0, 0, 0, 0, 0, 0, t104, t100, -t5, t19 * t41 + t20 * t40 + t24 * t34 + t26 * t33 + t30 * t53 + t36 * t45, 0, 0, 0, 0, 0, 0, -t9 * t151 - t23 * t53 + t3 * t97 + t36 * t47, t10 * t151 + t22 * t53 - t36 * t48 - t4 * t97, -t10 * t23 + t22 * t9 - t3 * t48 + t4 * t47, -t1 * t10 + t2 * t9 + t25 * t53 + t3 * t6 - t36 * t39 + t4 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, -0.2e1 * t123, 0, t73, 0, 0, t95 * t141, t97 * t141, 0, 0, t63, -0.4e1 * t118, t46, t62, -0.2e1 * t50, t73, -0.2e1 * t31 * t97 + 0.2e1 * (t43 + 0.2e1 * t142) * t151, 0.2e1 * t32 * t97 + 0.2e1 * (-t44 + 0.2e1 * t82) * t151, 0.2e1 * (-t31 * t93 - t32 * t91) * t95 + 0.2e1 * (-t43 * t93 - t44 * t91) * t150, 0.2e1 * pkin(8) ^ 2 * t133 + 0.2e1 * t31 * t43 + 0.2e1 * t32 * t44, t63, t46, 0.4e1 * t118, t73, 0.2e1 * t50, t62, 0.2e1 * t30 * t169 + 0.2e1 * t26 * t97 + 0.2e1 * (t45 * t168 - t41 * t95) * qJD(3), 0.2e1 * (-t24 * t91 + t26 * t93) * t95 + 0.2e1 * (-t40 * t91 + t41 * t93) * t150, -0.2e1 * t30 * t165 - 0.2e1 * t24 * t97 + 0.2e1 * (-t45 * t164 + t40 * t95) * qJD(3), 0.2e1 * t24 * t40 + 0.2e1 * t26 * t41 + 0.2e1 * t30 * t45, -0.2e1 * t48 * t22, -0.2e1 * t22 * t47 - 0.2e1 * t23 * t48, -0.2e1 * t48 * t151 - 0.2e1 * t22 * t97, -0.2e1 * t47 * t23, -0.2e1 * t47 * t151 - 0.2e1 * t23 * t97, t73, -0.2e1 * t6 * t151 + 0.2e1 * t2 * t97 + 0.2e1 * t23 * t39 + 0.2e1 * t25 * t47, 0.2e1 * t1 * t97 + 0.2e1 * t151 * t7 - 0.2e1 * t22 * t39 - 0.2e1 * t25 * t48, -0.2e1 * t1 * t47 - 0.2e1 * t2 * t48 + 0.2e1 * t22 * t6 - 0.2e1 * t23 * t7, -0.2e1 * t1 * t7 + 0.2e1 * t2 * t6 - 0.2e1 * t25 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t35, 0, 0, 0, 0, 0, 0, 0, 0, -t172, t173, t127, -pkin(3) * t36 + t113 * t91 + t161, 0, 0, 0, 0, 0, 0, -t172, t127, -t173, t36 * t61 + (-qJD(5) * t53 + t113) * t91 + t161, 0, 0, 0, 0, 0, 0, -t36 * t59 - t52 * t53, -t36 * t60 + t51 * t53, -t10 * t52 - t3 * t60 - t4 * t59 + t51 * t9, -t10 * t15 - t145 * t53 + t16 * t9 + t3 * t37 - t36 * t55 + t38 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, 0, -t151, 0, -t140, pkin(8) * t151, 0, 0, t65, -t49, t75, -t65, t135, 0, t74 + (t117 * t91 - t82) * qJD(3), t97 * t144 + (t117 * t93 + t142) * qJD(3), t115, -pkin(3) * t140 + (-t43 * t91 + t44 * t93) * qJD(4) + t115 * qJ(4), t65, t75, t49, 0, -t135, -t65, -t95 * t147 - t91 * t179 - t30 * t93 + t74, t24 * t93 + t26 * t91, -t30 * t91 + (-qJD(4) * t97 + t95 * t145 + t179) * t93, t30 * t61 + (qJ(4) * t24 + qJD(4) * t40) * t93 + (qJ(4) * t26 + qJD(4) * t41 - qJD(5) * t45) * t91, -t22 * t60 - t48 * t51, t22 * t59 - t23 * t60 - t47 * t51 - t48 * t52, -t60 * t151 - t51 * t97, t23 * t59 - t47 * t52, t59 * t151 - t52 * t97, 0, -t47 * t145 - t37 * t151 + t16 * t97 + t23 * t55 - t25 * t59 + t39 * t52, t145 * t48 + t15 * t97 + t151 * t38 - t22 * t55 - t25 * t60 - t39 * t51, t1 * t59 - t15 * t47 - t16 * t48 - t2 * t60 + t22 * t37 - t23 * t38 + t51 * t6 - t52 * t7, -t1 * t38 + t145 * t39 - t15 * t7 + t16 * t6 + t2 * t37 - t25 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0.2e1 * t159, 0, 0, 0, 0, 0, 0, t145 * t178, t58, 0.2e1 * t147, -0.2e1 * t61 * t145 + 0.2e1 * t159, -0.2e1 * t60 * t51, 0.2e1 * t51 * t59 - 0.2e1 * t52 * t60, 0, 0.2e1 * t59 * t52, 0, 0, 0.2e1 * t145 * t59 + 0.2e1 * t52 * t55, 0.2e1 * t145 * t60 - 0.2e1 * t51 * t55, 0.2e1 * t15 * t59 - 0.2e1 * t16 * t60 + 0.2e1 * t37 * t51 - 0.2e1 * t38 * t52, 0.2e1 * t145 * t55 - 0.2e1 * t15 * t38 + 0.2e1 * t16 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, t79, 0, t140, 0, 0, 0, 0, 0, 0, t76, 0, -t79, t30, 0, 0, 0, 0, 0, 0, -t23, t22, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, 0, 0, 0, 0, 0, -t52, t51, 0, -t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 * t174 + t4 * t94 + (t174 * t10 - t9 * t94) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, t79, 0, t26, 0, 0, 0, 0, 0, 0, -t126 * t95 - t148 * t97, -t125 * t97 + t151 * t94, t174 * t22 - t94 * t23 + (t174 * t47 + t48 * t94) * qJD(6), t2 * t174 - t1 * t94 + (t174 * t7 - t6 * t94) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, 0, 0, 0, 0, 0, 0, 0, 0, t174 * t51 - t94 * t52 + (-t174 * t59 + t60 * t94) * qJD(6), t16 * t174 - t15 * t94 + (t174 * t38 - t37 * t94) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, -t151, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, 0, -t52, 0, t16, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t125, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
