% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPPR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:16:33
% EndTime: 2019-03-08 21:16:48
% DurationCPUTime: 8.98s
% Computational Cost: add. (6020->657), mult. (14329->863), div. (0->0), fcn. (11194->12), ass. (0->316)
t238 = cos(pkin(11));
t229 = t238 * qJDD(3);
t236 = sin(pkin(11));
t244 = cos(qJ(3));
t358 = qJD(2) * qJD(3);
t326 = t244 * t358;
t241 = sin(qJ(3));
t356 = t241 * qJDD(2);
t273 = t326 + t356;
t130 = t236 * t273 - t229;
t131 = qJDD(3) * t236 + t238 * t273;
t240 = sin(qJ(6));
t243 = cos(qJ(6));
t360 = t238 * qJD(3);
t371 = qJD(2) * t241;
t178 = t236 * t371 - t360;
t368 = qJD(3) * t236;
t180 = t238 * t371 + t368;
t289 = t178 * t240 + t180 * t243;
t21 = qJD(6) * t289 - t243 * t130 + t131 * t240;
t369 = qJD(2) * t244;
t223 = qJD(6) + t369;
t411 = t223 * t289;
t456 = -t21 + t411;
t298 = pkin(3) * t241 - qJ(4) * t244;
t160 = qJD(3) * t298 - qJD(4) * t241;
t237 = sin(pkin(6));
t245 = cos(qJ(2));
t381 = t244 * t245;
t350 = t237 * t381;
t309 = t236 * t350;
t242 = sin(qJ(2));
t373 = qJD(1) * t237;
t342 = t242 * t373;
t438 = qJD(1) * t309 + (t160 - t342) * t238;
t133 = (t236 * t242 + t238 * t381) * t237;
t455 = qJD(1) * t133 - t236 * t160;
t324 = t236 * t356;
t234 = t241 ^ 2;
t235 = t244 ^ 2;
t375 = t234 - t235;
t433 = qJD(2) * t375;
t454 = qJD(3) * (t178 * t241 + t236 * t433) - (t130 + t324) * t244;
t344 = -pkin(8) * t236 - pkin(4);
t382 = t238 * t244;
t353 = pkin(9) * t382;
t453 = (-t353 + (-pkin(5) + t344) * t241) * qJD(3) - t438;
t383 = t238 * t241;
t386 = t236 * t244;
t367 = qJD(3) * t241;
t436 = qJ(5) * t367 - qJD(5) * t244;
t452 = -(-pkin(8) * t383 + pkin(9) * t386) * qJD(3) - t436 + t455;
t359 = qJD(1) * qJD(2);
t329 = t245 * t359;
t239 = cos(pkin(6));
t372 = qJD(1) * t239;
t400 = qJDD(2) * pkin(8);
t451 = t400 + (qJDD(1) * t242 + t329) * t237 + qJD(3) * t372;
t390 = t178 * t238;
t440 = t244 * (t180 * t236 + t390);
t449 = qJD(2) * t440 - t130 * t236 + t131 * t238;
t395 = t131 * t236;
t396 = t130 * t238;
t448 = qJD(3) * t440 + t241 * (t395 + t396);
t447 = t289 ^ 2;
t290 = -t243 * t178 + t180 * t240;
t446 = t290 ^ 2;
t186 = qJD(2) * pkin(8) + t342;
t173 = t241 * t186;
t357 = qJDD(1) * t239;
t349 = t241 * t357 + t244 * t451;
t32 = qJDD(3) * qJ(4) + (qJD(4) - t173) * qJD(3) + t349;
t425 = pkin(3) * t244;
t191 = -qJ(4) * t241 - pkin(2) - t425;
t330 = t242 * t359;
t209 = t237 * t330;
t384 = t237 * t245;
t295 = -qJDD(1) * t384 + t209;
t51 = qJD(2) * t160 + qJDD(2) * t191 + t295;
t18 = -t236 * t32 + t238 * t51;
t231 = t244 * qJDD(2);
t282 = pkin(4) * t231 + qJDD(5) - t18;
t327 = t241 * t358;
t14 = -pkin(4) * t327 + t282;
t435 = -t327 + t231;
t6 = pkin(5) * t435 - pkin(9) * t131 + t14;
t340 = t241 * t372;
t128 = t186 * t244 + t340;
t117 = qJD(3) * qJ(4) + t128;
t341 = t245 * t373;
t129 = qJD(2) * t191 - t341;
t42 = -t236 * t117 + t129 * t238;
t33 = pkin(4) * t369 + qJD(5) - t42;
t22 = pkin(5) * t369 - pkin(9) * t180 + t33;
t43 = t238 * t117 + t236 * t129;
t34 = -qJ(5) * t369 + t43;
t23 = pkin(9) * t178 + t34;
t7 = t22 * t243 - t23 * t240;
t19 = t236 * t51 + t238 * t32;
t13 = qJ(5) * t327 + (-qJ(5) * qJDD(2) - qJD(2) * qJD(5)) * t244 + t19;
t9 = pkin(9) * t130 + t13;
t1 = t7 * qJD(6) + t240 * t6 + t243 * t9;
t445 = -t7 * t223 + t1;
t8 = t22 * t240 + t23 * t243;
t2 = -qJD(6) * t8 - t240 * t9 + t243 * t6;
t444 = t8 * t223 + t2;
t361 = qJD(6) * t243;
t362 = qJD(6) * t240;
t20 = -t240 * t130 - t243 * t131 - t178 * t361 + t180 * t362;
t412 = t223 * t290;
t443 = t20 - t412;
t352 = pkin(8) * t367;
t407 = -t238 * t352 - t455;
t428 = pkin(4) + pkin(5);
t442 = t130 * t428;
t176 = t180 ^ 2;
t437 = -t178 ^ 2 - t176;
t434 = -t236 * t361 + t238 * t362;
t432 = qJDD(3) * pkin(3) - qJDD(4);
t405 = sin(pkin(10));
t315 = t405 * t245;
t406 = cos(pkin(10));
t318 = t406 * t242;
t163 = t239 * t318 + t315;
t320 = t237 * t406;
t102 = t163 * t241 + t244 * t320;
t316 = t405 * t242;
t317 = t406 * t245;
t165 = -t239 * t316 + t317;
t319 = t237 * t405;
t104 = t165 * t241 - t244 * t319;
t385 = t237 * t242;
t169 = -t239 * t244 + t241 * t385;
t270 = g(1) * t104 + g(2) * t102 + g(3) * t169;
t322 = t238 * t231;
t247 = qJD(2) ^ 2;
t388 = t235 * t247;
t431 = -t236 * t388 + (t178 + t360) * t371 - t322;
t170 = t239 * t241 + t244 * t385;
t101 = t170 * t238 - t236 * t384;
t337 = qJD(2) * t384;
t107 = qJD(3) * t170 + t241 * t337;
t106 = -qJD(3) * t169 + t244 * t337;
t370 = qJD(2) * t242;
t338 = t237 * t370;
t65 = t106 * t238 + t236 * t338;
t430 = qJD(2) * (t101 * t367 - t244 * t65) - t101 * t231 - t107 * t180 - t131 * t169;
t366 = qJD(3) * t244;
t308 = t186 * t366 + t241 * t451 - t244 * t357;
t262 = -t308 + t432;
t365 = qJD(5) * t180;
t404 = qJ(5) * t131;
t252 = t262 + t365 + t404;
t12 = t252 - t442;
t429 = t12 + t270;
t219 = pkin(8) * t386;
t232 = t244 * pkin(4);
t423 = pkin(9) * t241;
t81 = pkin(5) * t244 + t219 + t232 + (-t191 - t423) * t238;
t135 = pkin(8) * t382 + t236 * t191;
t116 = -qJ(5) * t244 + t135;
t92 = t236 * t423 + t116;
t24 = -t240 * t92 + t243 * t81;
t427 = qJD(6) * t24 + t240 * t453 - t452 * t243;
t25 = t240 * t81 + t243 * t92;
t426 = -qJD(6) * t25 + t452 * t240 + t243 * t453;
t424 = pkin(4) * t130;
t417 = t289 * t290;
t416 = -pkin(9) + qJ(4);
t197 = t416 * t236;
t198 = t416 * t238;
t109 = t197 * t243 - t198 * t240;
t183 = t236 * t240 + t238 * t243;
t127 = t244 * t372 - t173;
t185 = t298 * qJD(2);
t67 = -t236 * t127 + t185 * t238;
t35 = (-t241 * t428 - t353) * qJD(2) - t67;
t339 = t236 * t369;
t68 = t238 * t127 + t236 * t185;
t55 = qJ(5) * t371 + t68;
t41 = pkin(9) * t339 + t55;
t415 = qJD(4) * t183 + qJD(6) * t109 - t240 * t35 - t243 * t41;
t110 = t197 * t240 + t198 * t243;
t387 = t236 * t243;
t184 = -t238 * t240 + t387;
t414 = qJD(4) * t184 - qJD(6) * t110 + t240 * t41 - t243 * t35;
t413 = qJD(2) * pkin(2);
t410 = t436 + t407;
t409 = t344 * t367 - t438;
t408 = t236 * t352 + t438;
t403 = qJ(5) * t236;
t402 = qJ(5) * t238;
t401 = qJDD(2) * pkin(2);
t398 = t102 * t238;
t397 = t104 * t238;
t162 = -t239 * t317 + t316;
t393 = t162 * t241;
t164 = t239 * t315 + t318;
t392 = t164 * t241;
t391 = t169 * t238;
t380 = qJDD(1) - g(3);
t166 = t183 * qJD(6);
t379 = -t183 * t369 - t166;
t336 = t238 * t369;
t378 = -t240 * t336 + t243 * t339 - t434;
t323 = t236 * t231;
t377 = qJ(4) * t323 + qJD(4) * t339;
t376 = pkin(2) * t384 + pkin(8) * t385;
t374 = t234 + t235;
t364 = qJD(5) * t236;
t94 = t102 * pkin(3);
t355 = -pkin(4) * t398 - t102 * t403 - t94;
t95 = t104 * pkin(3);
t354 = -pkin(4) * t397 - t104 * t403 - t95;
t351 = t241 * t384;
t159 = t169 * pkin(3);
t348 = -pkin(4) * t391 - t169 * t403 - t159;
t157 = t162 * pkin(2);
t347 = -qJ(4) * t393 - t162 * t425 - t157;
t158 = t164 * pkin(2);
t346 = -qJ(4) * t392 - t164 * t425 - t158;
t345 = -g(1) * t392 - g(2) * t393 + g(3) * t351;
t343 = qJ(4) * t367;
t335 = t240 * t366;
t334 = t243 * t366;
t333 = qJD(5) * t383;
t155 = t178 * t369;
t325 = t245 * t358;
t321 = pkin(3) + t403;
t280 = -t236 * t428 + t402;
t314 = t340 - (qJD(2) * t280 - t186) * t244 + t364;
t134 = t191 * t238 - t219;
t307 = pkin(3) * t350 + qJ(4) * t351 + t376;
t306 = t178 * t341;
t305 = t180 * t341;
t304 = t241 * t341;
t303 = qJ(4) * t322;
t302 = t241 * t326;
t301 = g(1) * t164 + g(2) * t162;
t300 = g(1) * t165 + g(2) * t163;
t297 = pkin(4) * t236 - t402;
t100 = t170 * t236 + t238 * t384;
t30 = t100 * t243 - t101 * t240;
t31 = t100 * t240 + t101 * t243;
t288 = qJ(4) * t131 + qJD(4) * t180;
t287 = qJD(2) * (-t180 + t368);
t286 = t223 ^ 2;
t285 = qJDD(2) * t245 - t242 * t247;
t284 = pkin(8) + t297;
t283 = qJD(3) * pkin(3) - qJD(4) + t127;
t138 = t295 - t401;
t246 = qJD(3) ^ 2;
t281 = -pkin(8) * t246 - t138 + t401;
t103 = t163 * t244 - t241 * t320;
t47 = t103 * t236 - t162 * t238;
t105 = t165 * t244 + t241 * t319;
t49 = t105 * t236 - t164 * t238;
t278 = -g(1) * t49 - g(2) * t47 - g(3) * t100;
t132 = -t238 * t385 + t309;
t69 = -t162 * t386 - t163 * t238;
t71 = -t164 * t386 - t165 * t238;
t277 = g(1) * t71 + g(2) * t69 + g(3) * t132;
t70 = -t162 * t382 + t163 * t236;
t72 = -t164 * t382 + t165 * t236;
t276 = -g(1) * t72 - g(2) * t70 - g(3) * t133;
t64 = t106 * t236 - t238 * t338;
t272 = t100 * t131 - t101 * t130 - t65 * t178 + t180 * t64;
t271 = -pkin(8) + t280;
t269 = g(1) * t105 + g(2) * t103 + g(3) * t170;
t268 = -t155 * t236 - t396;
t266 = t133 * pkin(4) + qJ(5) * t132 + t307;
t17 = -t252 + t424;
t265 = -t17 + t270;
t264 = t270 + t262;
t263 = (t130 * t241 + t178 * t366) * t236;
t261 = qJ(5) * t180 + t283;
t260 = t70 * pkin(4) + pkin(8) * t163 + qJ(5) * t69 + t347;
t259 = t72 * pkin(4) + pkin(8) * t165 + qJ(5) * t71 + t346;
t258 = -qJ(4) * t396 - qJD(4) * t390 - t269;
t256 = t270 - t308;
t254 = t244 * t287 - t229 + t324;
t187 = -t341 - t413;
t253 = -pkin(8) * qJDD(3) + (t187 + t341 - t413) * qJD(3);
t251 = t100 * t231 + t107 * t178 + t169 * t130 + (-t100 * t367 + t244 * t64) * qJD(2);
t250 = -t256 - t432;
t39 = -t186 * t367 + t349;
t249 = t308 * t241 + t39 * t244 + (-t127 * t244 - t128 * t241) * qJD(3) - t300;
t248 = t250 - t404;
t218 = t241 * t247 * t244;
t188 = -pkin(4) * t238 - t321;
t182 = -qJDD(6) - t435;
t174 = qJDD(2) * t235 - 0.2e1 * t302;
t172 = t238 * t428 + t321;
t153 = t183 * t241;
t152 = t240 * t383 - t241 * t387;
t151 = t284 * t241;
t121 = -t134 + t232;
t112 = t271 * t241;
t93 = t284 * t366 - t333;
t79 = t271 * t366 + t333;
t78 = t340 + (qJD(2) * t297 + t186) * t244;
t76 = t155 + t131;
t75 = t166 * t241 - t236 * t334 + t238 * t335;
t74 = -t236 * t335 - t238 * t334 + t241 * t434;
t66 = t238 * t388 + t241 * t287 - t323;
t59 = -t180 * t336 + t395;
t58 = -pkin(4) * t371 - t67;
t53 = (t131 * t241 + t180 * t366) * t238;
t50 = t105 * t238 + t164 * t236;
t48 = t103 * t238 + t162 * t236;
t38 = pkin(4) * t178 - t261;
t27 = -t178 * t428 + t261;
t26 = (-t238 * t356 - t131) * t244 + (t180 * t241 + t238 * t433) * qJD(3);
t11 = qJD(6) * t30 + t240 * t64 + t243 * t65;
t10 = -qJD(6) * t31 - t240 * t65 + t243 * t64;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t380, 0, 0, 0, 0, 0, 0, t285 * t237 (-qJDD(2) * t242 - t245 * t247) * t237, 0, -g(3) + (t239 ^ 2 + (t242 ^ 2 + t245 ^ 2) * t237 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t107 - qJDD(3) * t169 + (-t241 * t325 + t244 * t285) * t237, -qJD(3) * t106 - qJDD(3) * t170 + (-t241 * t285 - t244 * t325) * t237 (t169 * t241 + t170 * t244) * qJDD(2) + (t106 * t244 + t107 * t241 + (t169 * t244 - t170 * t241) * qJD(3)) * qJD(2), t106 * t128 - t107 * t127 + t169 * t308 + t170 * t39 - g(3) + (-t138 * t245 + t187 * t370) * t237, 0, 0, 0, 0, 0, 0, t251, -t430, t272, -t100 * t18 + t101 * t19 - t107 * t283 - t169 * t262 - t42 * t64 + t43 * t65 - g(3), 0, 0, 0, 0, 0, 0, t251, t272, t430, t100 * t14 + t101 * t13 + t107 * t38 + t169 * t17 + t33 * t64 + t34 * t65 - g(3), 0, 0, 0, 0, 0, 0, t10 * t223 - t107 * t290 - t169 * t21 - t182 * t30, -t107 * t289 - t11 * t223 + t169 * t20 + t182 * t31, -t10 * t289 - t11 * t290 + t20 * t30 - t21 * t31, t1 * t31 + t10 * t7 - t107 * t27 + t11 * t8 - t12 * t169 + t2 * t30 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t380 * t384 + t301, -t380 * t385 + t300, 0, 0, qJDD(2) * t234 + 0.2e1 * t302, -0.2e1 * qJD(3) * t433 + 0.2e1 * t231 * t241, qJDD(3) * t241 + t244 * t246, t174, qJDD(3) * t244 - t241 * t246, 0, t253 * t241 + ((-g(3) * t245 + t330) * t237 + t281 + t301) * t244, t253 * t244 + (-t281 - t209) * t241 + t345, t374 * t400 + (-g(3) * t242 - t329 * t374) * t237 + t249, -t138 * pkin(2) + g(1) * t158 + g(2) * t157 - g(3) * t376 + (-t187 * t242 + (t127 * t241 - t128 * t244) * t245) * t373 + t249 * pkin(8), t53, -t448, t26, t263, -t454, t174 (-t306 + pkin(8) * t130 - t236 * t262 + (qJD(2) * t134 + t42) * qJD(3)) * t241 + (-qJDD(2) * t134 - t18 + (pkin(8) * t178 - t236 * t283) * qJD(3) - t408 * qJD(2)) * t244 + t276 (-t305 + pkin(8) * t131 - t238 * t262 + (-qJD(2) * t135 - t43) * qJD(3)) * t241 + (qJDD(2) * t135 + t19 + (pkin(8) * t180 - t238 * t283) * qJD(3) + t407 * qJD(2)) * t244 + t277, -t130 * t135 - t131 * t134 + (-t18 * t238 - t19 * t236) * t241 - t408 * t180 - t407 * t178 + (-t236 * t43 - t238 * t42) * t366 - t345, t19 * t135 + t18 * t134 + t283 * t304 - g(1) * t346 - g(2) * t347 - g(3) * t307 + t407 * t43 + t408 * t42 + (-t241 * t262 - t283 * t366 - t300) * pkin(8), t53, t26, t448, t174, t454, t263, t130 * t151 + t178 * t93 + (-t306 + t17 * t236 + (-qJD(2) * t121 - t33) * qJD(3)) * t241 + (qJD(2) * t409 + qJDD(2) * t121 + t368 * t38 + t14) * t244 + t276, -t116 * t130 + t121 * t131 + (-t13 * t236 + t14 * t238) * t241 + t409 * t180 - t410 * t178 + (-t236 * t34 + t238 * t33) * t366 - t345, -t131 * t151 - t180 * t93 + (t305 - t17 * t238 + (qJD(2) * t116 + t34) * qJD(3)) * t241 + (-qJD(2) * t410 - qJDD(2) * t116 - t360 * t38 - t13) * t244 - t277, t13 * t116 + t17 * t151 + t14 * t121 - g(1) * t259 - g(2) * t260 - g(3) * t266 + (t93 - t304) * t38 + t410 * t34 + t409 * t33, -t153 * t20 - t289 * t74, t152 * t20 - t153 * t21 - t289 * t75 + t290 * t74, -t153 * t182 - t20 * t244 - t223 * t74 - t289 * t367, t152 * t21 + t290 * t75, t152 * t182 - t21 * t244 - t223 * t75 + t290 * t367, -t182 * t244 - t223 * t367, -t24 * t182 + t2 * t244 + t79 * t290 + t112 * t21 + t12 * t152 + t27 * t75 - g(1) * (t240 * t71 + t243 * t72) - g(2) * (t240 * t69 + t243 * t70) - g(3) * (t132 * t240 + t133 * t243) + (-qJD(3) * t7 + t290 * t341) * t241 + t426 * t223, t25 * t182 - t1 * t244 + t79 * t289 - t112 * t20 + t12 * t153 - t27 * t74 - g(1) * (-t240 * t72 + t243 * t71) - g(2) * (-t240 * t70 + t243 * t69) - g(3) * (t132 * t243 - t133 * t240) + (qJD(3) * t8 + t289 * t341) * t241 - t427 * t223, -t1 * t152 - t153 * t2 + t20 * t24 - t21 * t25 - t289 * t426 - t290 * t427 + t7 * t74 - t75 * t8 + t345, t1 * t25 + t2 * t24 + t12 * t112 - g(1) * (pkin(5) * t72 + pkin(9) * t392 + t259) - g(2) * (pkin(5) * t70 + pkin(9) * t393 + t260) - g(3) * (pkin(5) * t133 - pkin(9) * t351 + t266) + t427 * t8 + t426 * t7 + (t79 + t304) * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t218, t375 * t247, t356, t218, t231, qJDD(3), qJD(3) * t128 - t187 * t371 + t256, -t187 * t369 + (t127 + t173) * qJD(3) + t269 - t349, 0, 0, t59, t449, t66, t268, t431, t218, -pkin(3) * t130 - t128 * t178 + t264 * t238 + (-t241 * t42 + t244 * t67 + (t244 * t283 - t343) * t236) * qJD(2) + t377, t303 - pkin(3) * t131 - t128 * t180 - t264 * t236 + (t241 * t43 - t244 * t68 + (-t343 + (qJD(4) + t283) * t244) * t238) * qJD(2), t178 * t68 + t180 * t67 + (t369 * t42 + t19) * t238 + (t369 * t43 - t18 + t288) * t236 + t258, t262 * pkin(3) + g(1) * t95 + g(2) * t94 + g(3) * t159 + t283 * t128 - t42 * t67 - t43 * t68 + (-t236 * t42 + t238 * t43) * qJD(4) + (-t18 * t236 + t19 * t238 - t269) * qJ(4), t59, t66, -t449, t218, -t431, t268, t130 * t188 + (-t78 - t364) * t178 + t265 * t238 + (t241 * t33 - t244 * t58 + (-t244 * t38 - t343) * t236) * qJD(2) + t377, t178 * t55 - t180 * t58 + (-t33 * t369 + t13) * t238 + (t34 * t369 + t14 + t288) * t236 + t258, -t303 - t131 * t188 + t180 * t78 + (t265 + t365) * t236 + (-t241 * t34 + t244 * t55 + (t343 + (-qJD(4) + t38) * t244) * t238) * qJD(2), t17 * t188 - t34 * t55 - t38 * t78 - t33 * t58 - g(1) * (qJ(4) * t105 + t354) - g(2) * (qJ(4) * t103 + t355) - g(3) * (qJ(4) * t170 + t348) + (qJ(4) * t13 + qJD(4) * t34) * t238 + (qJ(4) * t14 + qJD(4) * t33 - qJD(5) * t38) * t236, -t184 * t20 + t289 * t379, t183 * t20 - t184 * t21 - t289 * t378 - t290 * t379, -t182 * t184 + t223 * t379 + t289 * t371, t183 * t21 + t290 * t378, t182 * t183 - t223 * t378 - t290 * t371, t223 * t371, -t109 * t182 + t172 * t21 + t183 * t429 + t414 * t223 + t27 * t378 + t314 * t290 + t371 * t7, t110 * t182 - t172 * t20 + t184 * t429 - t415 * t223 + t27 * t379 + t314 * t289 - t371 * t8, -t1 * t183 + t109 * t20 - t110 * t21 - t184 * t2 - t289 * t414 - t290 * t415 - t378 * t8 - t379 * t7 + t269, t1 * t110 + t2 * t109 + t12 * t172 - g(1) * (-pkin(5) * t397 + t105 * t416 + t354) - g(2) * (-pkin(5) * t398 + t103 * t416 + t355) - g(3) * (-pkin(5) * t391 + t170 * t416 + t348) + t415 * t8 + t414 * t7 + t314 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, t76, t437, t178 * t43 + t180 * t42 + t250, 0, 0, 0, 0, 0, 0, t254, t437, -t76, t424 + t178 * t34 + (-qJD(5) - t33) * t180 + t248, 0, 0, 0, 0, 0, 0, -t21 - t411, t20 + t412, t446 + t447, -t289 * t7 - t290 * t8 + t248 - t365 + t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178 * t180 + t435, -t155 + t131, -t176 - t388, t180 * t38 + (-pkin(4) * t367 + t244 * t34) * qJD(2) + t278 + t282, 0, 0, 0, 0, 0, 0, -t180 * t290 - t182 * t243 - t240 * t286, -t180 * t289 + t182 * t240 - t243 * t286, t240 * t456 + t443 * t243, -t180 * t27 + t240 * t445 + t243 * t444 + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, -t446 + t447, -t443, -t417, t456, -t182, -t27 * t289 - g(1) * (-t240 * t50 + t243 * t49) - g(2) * (-t240 * t48 + t243 * t47) - g(3) * t30 + t444, t27 * t290 - g(1) * (-t240 * t49 - t243 * t50) - g(2) * (-t240 * t47 - t243 * t48) + g(3) * t31 - t445, 0, 0;];
tau_reg  = t3;
