% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:14:55
% EndTime: 2019-05-05 03:15:04
% DurationCPUTime: 10.02s
% Computational Cost: add. (24077->304), mult. (51409->407), div. (0->0), fcn. (36266->12), ass. (0->230)
t2439 = sin(qJ(3));
t2497 = qJD(2) * t2439;
t2421 = qJD(3) * t2497;
t2442 = cos(qJ(3));
t2482 = t2442 * qJDD(2);
t2404 = -t2421 + t2482;
t2431 = sin(pkin(11));
t2434 = cos(pkin(11));
t2396 = -t2434 * qJD(3) + t2431 * t2497;
t2398 = qJD(3) * t2431 + t2434 * t2497;
t2489 = t2396 * t2398;
t2355 = t2404 - t2489;
t2394 = t2398 ^ 2;
t2428 = t2442 ^ 2;
t2444 = qJD(2) ^ 2;
t2425 = t2428 * t2444;
t2506 = -t2394 - t2425;
t2335 = t2355 * t2434 - t2431 * t2506;
t2496 = qJD(2) * t2442;
t2480 = qJD(3) * t2496;
t2483 = t2439 * qJDD(2);
t2403 = t2480 + t2483;
t2454 = qJDD(3) * t2431 + t2403 * t2434;
t2488 = t2396 * t2442;
t2481 = qJD(2) * t2488;
t2448 = t2454 + t2481;
t2305 = t2335 * t2439 - t2442 * t2448;
t2433 = sin(pkin(6));
t2436 = cos(pkin(6));
t2307 = t2335 * t2442 + t2439 * t2448;
t2333 = t2355 * t2431 + t2434 * t2506;
t2440 = sin(qJ(2));
t2443 = cos(qJ(2));
t2461 = t2307 * t2440 - t2333 * t2443;
t2266 = -t2433 * t2305 + t2436 * t2461;
t2283 = t2307 * t2443 + t2333 * t2440;
t2432 = sin(pkin(10));
t2435 = cos(pkin(10));
t2551 = t2266 * t2432 - t2283 * t2435;
t2550 = t2266 * t2435 + t2283 * t2432;
t2264 = t2436 * t2305 + t2433 * t2461;
t2449 = -t2454 + t2481;
t2382 = t2398 * t2496;
t2477 = -t2434 * qJDD(3) + t2403 * t2431;
t2507 = -t2382 - t2477;
t2513 = t2431 * t2507 + t2449 * t2434;
t2501 = t2396 ^ 2;
t2346 = t2394 + t2501;
t2511 = -t2449 * t2431 + t2434 * t2507;
t2516 = -t2346 * t2439 + t2442 * t2511;
t2525 = t2440 * t2513 + t2443 * t2516;
t2517 = t2346 * t2442 + t2439 * t2511;
t2527 = t2440 * t2516 - t2443 * t2513;
t2534 = -t2433 * t2517 + t2436 * t2527;
t2545 = -t2432 * t2534 + t2435 * t2525;
t2356 = t2404 + t2489;
t2505 = -t2501 - t2425;
t2514 = -t2356 * t2434 + t2431 * t2505;
t2348 = -t2382 + t2477;
t2512 = t2356 * t2431 + t2434 * t2505;
t2518 = t2348 * t2439 + t2442 * t2512;
t2524 = t2440 * t2514 + t2443 * t2518;
t2519 = -t2442 * t2348 + t2439 * t2512;
t2526 = t2440 * t2518 - t2443 * t2514;
t2535 = -t2433 * t2519 + t2436 * t2526;
t2544 = -t2432 * t2535 + t2435 * t2524;
t2543 = t2432 * t2525 + t2435 * t2534;
t2542 = t2432 * t2524 + t2435 * t2535;
t2537 = t2433 * t2526 + t2436 * t2519;
t2536 = t2433 * t2527 + t2436 * t2517;
t2475 = g(1) * t2432 - g(2) * t2435;
t2452 = t2436 * t2475;
t2498 = -g(3) + qJDD(1);
t2479 = t2433 * t2498;
t2515 = t2452 + t2479;
t2418 = qJD(6) + t2496;
t2508 = qJD(6) + t2418;
t2504 = qJD(3) ^ 2;
t2438 = sin(qJ(6));
t2441 = cos(qJ(6));
t2360 = -t2441 * t2396 + t2398 * t2438;
t2503 = t2360 ^ 2;
t2362 = t2396 * t2438 + t2398 * t2441;
t2502 = t2362 ^ 2;
t2500 = t2418 ^ 2;
t2499 = -0.2e1 * t2398;
t2490 = t2360 * t2362;
t2427 = t2439 ^ 2;
t2487 = t2427 * t2444;
t2410 = -g(1) * t2435 - g(2) * t2432;
t2358 = t2443 * t2410 + t2440 * t2515;
t2340 = -pkin(2) * t2444 + qJDD(2) * pkin(8) + t2358;
t2486 = t2439 * t2340;
t2367 = pkin(4) * t2396 - qJ(5) * t2398;
t2485 = (2 * qJD(4)) + t2367;
t2484 = qJD(6) - t2418;
t2447 = -t2433 * t2475 + t2436 * t2498;
t2332 = t2442 * t2340 + t2439 * t2447;
t2401 = (-pkin(3) * t2442 - qJ(4) * t2439) * qJD(2);
t2312 = -pkin(3) * t2504 + qJDD(3) * qJ(4) + t2401 * t2496 + t2332;
t2474 = t2440 * t2410 - t2443 * t2515;
t2339 = -qJDD(2) * pkin(2) - t2444 * pkin(8) + t2474;
t2445 = (-t2403 - t2480) * qJ(4) + (-t2404 + t2421) * pkin(3) + t2339;
t2281 = -0.2e1 * qJD(4) * t2396 + t2434 * t2312 + t2431 * t2445;
t2478 = t2431 * t2312 - t2434 * t2445;
t2376 = t2442 * t2447;
t2476 = -qJDD(3) * pkin(3) - qJ(4) * t2504 + qJDD(4) - t2376;
t2473 = -qJDD(6) - t2404;
t2451 = t2404 * pkin(4) - qJ(5) * t2425 + qJDD(5) + t2478;
t2256 = t2404 * pkin(5) + t2449 * pkin(9) + (pkin(5) * t2396 + t2485) * t2398 + t2451;
t2270 = -pkin(4) * t2425 - t2404 * qJ(5) - 0.2e1 * qJD(5) * t2496 - t2396 * t2367 + t2281;
t2453 = pkin(5) * t2496 - pkin(9) * t2398;
t2263 = -pkin(5) * t2501 + pkin(9) * t2477 - t2453 * t2496 + t2270;
t2234 = t2256 * t2441 - t2263 * t2438;
t2235 = t2256 * t2438 + t2263 * t2441;
t2221 = t2234 * t2441 + t2235 * t2438;
t2222 = -t2234 * t2438 + t2235 * t2441;
t2214 = t2221 * t2431 + t2222 * t2434;
t2282 = qJD(5) * t2499 + t2486 - t2454 * qJ(5) + (-qJ(5) * t2488 + t2401 * t2439) * qJD(2) + t2476 + t2348 * pkin(4);
t2272 = pkin(5) * t2477 + pkin(9) * t2501 - t2398 * t2453 + t2282;
t2212 = t2214 * t2442 + t2272 * t2439;
t2213 = -t2221 * t2434 + t2222 * t2431;
t2472 = t2212 * t2440 - t2213 * t2443;
t2271 = t2485 * t2398 + t2451;
t2239 = t2270 * t2434 + t2271 * t2431;
t2232 = t2239 * t2442 + t2282 * t2439;
t2238 = t2270 * t2431 - t2271 * t2434;
t2471 = t2232 * t2440 - t2238 * t2443;
t2450 = -t2438 * t2454 + t2441 * t2477;
t2296 = -t2362 * t2484 + t2450;
t2446 = -t2438 * t2477 - t2441 * t2454;
t2298 = t2360 * t2484 + t2446;
t2273 = t2296 * t2438 + t2298 * t2441;
t2274 = t2296 * t2441 - t2298 * t2438;
t2241 = t2273 * t2431 + t2274 * t2434;
t2309 = -t2502 - t2503;
t2237 = t2241 * t2442 - t2309 * t2439;
t2240 = -t2273 * t2434 + t2274 * t2431;
t2470 = t2237 * t2440 - t2240 * t2443;
t2280 = qJD(4) * t2499 - t2478;
t2249 = -t2280 * t2431 + t2281 * t2434;
t2311 = (qJD(2) * t2401 + t2340) * t2439 + t2476;
t2243 = t2249 * t2442 + t2311 * t2439;
t2248 = t2280 * t2434 + t2281 * t2431;
t2469 = t2243 * t2440 - t2248 * t2443;
t2320 = -t2473 - t2490;
t2330 = -t2500 - t2503;
t2285 = t2320 * t2441 + t2330 * t2438;
t2286 = -t2320 * t2438 + t2330 * t2441;
t2262 = t2285 * t2431 + t2286 * t2434;
t2295 = t2362 * t2508 - t2450;
t2245 = t2262 * t2442 - t2295 * t2439;
t2261 = -t2285 * t2434 + t2286 * t2431;
t2468 = t2245 * t2440 - t2261 * t2443;
t2321 = t2473 - t2490;
t2337 = -t2500 - t2502;
t2289 = t2321 * t2438 + t2337 * t2441;
t2290 = t2321 * t2441 - t2337 * t2438;
t2269 = t2289 * t2431 + t2290 * t2434;
t2297 = -t2360 * t2508 - t2446;
t2247 = t2269 * t2442 - t2297 * t2439;
t2268 = -t2289 * t2434 + t2290 * t2431;
t2467 = t2247 * t2440 - t2268 * t2443;
t2331 = t2376 - t2486;
t2288 = -t2331 * t2439 + t2332 * t2442;
t2466 = t2288 * t2440 - t2339 * t2443;
t2459 = t2440 * t2358 - t2443 * t2474;
t2417 = t2439 * t2444 * t2442;
t2411 = qJDD(3) + t2417;
t2416 = -t2425 - t2504;
t2373 = -t2411 * t2439 + t2416 * t2442;
t2405 = -0.2e1 * t2421 + t2482;
t2458 = t2373 * t2440 + t2405 * t2443;
t2412 = -qJDD(3) + t2417;
t2415 = -t2487 - t2504;
t2374 = t2412 * t2442 - t2415 * t2439;
t2402 = 0.2e1 * t2480 + t2483;
t2457 = t2374 * t2440 - t2402 * t2443;
t2406 = (t2427 + t2428) * qJDD(2);
t2409 = t2425 + t2487;
t2456 = t2406 * t2440 + t2409 * t2443;
t2455 = qJDD(2) * t2443 - t2440 * t2444;
t2408 = -qJDD(2) * t2440 - t2443 * t2444;
t2387 = t2455 * t2436;
t2386 = t2408 * t2436;
t2385 = t2455 * t2433;
t2384 = t2408 * t2433;
t2372 = t2412 * t2439 + t2415 * t2442;
t2371 = t2411 * t2442 + t2416 * t2439;
t2368 = t2406 * t2443 - t2409 * t2440;
t2364 = t2456 * t2436;
t2363 = t2456 * t2433;
t2343 = t2374 * t2443 + t2402 * t2440;
t2342 = t2373 * t2443 - t2405 * t2440;
t2329 = -t2433 * t2372 + t2436 * t2457;
t2328 = -t2433 * t2371 + t2436 * t2458;
t2327 = t2436 * t2372 + t2433 * t2457;
t2326 = t2436 * t2371 + t2433 * t2458;
t2319 = t2358 * t2443 + t2440 * t2474;
t2304 = t2433 ^ 2 * t2475 + (-t2479 + t2459) * t2436;
t2303 = t2436 ^ 2 * t2498 + (t2459 - t2452) * t2433;
t2287 = t2331 * t2442 + t2332 * t2439;
t2279 = t2288 * t2443 + t2339 * t2440;
t2255 = -t2433 * t2287 + t2436 * t2466;
t2254 = t2436 * t2287 + t2433 * t2466;
t2246 = t2269 * t2439 + t2297 * t2442;
t2244 = t2262 * t2439 + t2295 * t2442;
t2242 = t2249 * t2439 - t2311 * t2442;
t2236 = t2241 * t2439 + t2309 * t2442;
t2233 = t2247 * t2443 + t2268 * t2440;
t2231 = t2239 * t2439 - t2282 * t2442;
t2230 = t2245 * t2443 + t2261 * t2440;
t2229 = t2243 * t2443 + t2248 * t2440;
t2228 = -t2433 * t2246 + t2436 * t2467;
t2227 = t2436 * t2246 + t2433 * t2467;
t2226 = t2237 * t2443 + t2240 * t2440;
t2225 = -t2433 * t2244 + t2436 * t2468;
t2224 = t2436 * t2244 + t2433 * t2468;
t2223 = t2232 * t2443 + t2238 * t2440;
t2220 = -t2433 * t2242 + t2436 * t2469;
t2219 = t2436 * t2242 + t2433 * t2469;
t2218 = -t2433 * t2236 + t2436 * t2470;
t2217 = t2436 * t2236 + t2433 * t2470;
t2216 = -t2433 * t2231 + t2436 * t2471;
t2215 = t2436 * t2231 + t2433 * t2471;
t2211 = t2214 * t2439 - t2272 * t2442;
t2210 = t2212 * t2443 + t2213 * t2440;
t2209 = -t2433 * t2211 + t2436 * t2472;
t2208 = t2436 * t2211 + t2433 * t2472;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2435 * t2410 - t2432 * t2475, 0, 0, 0, 0, 0, 0, -t2387 * t2432 + t2408 * t2435, -t2386 * t2432 - t2435 * t2455, 0, -t2304 * t2432 + t2319 * t2435, 0, 0, 0, 0, 0, 0, -t2328 * t2432 + t2342 * t2435, -t2329 * t2432 + t2343 * t2435, -t2364 * t2432 + t2368 * t2435, -t2255 * t2432 + t2279 * t2435, 0, 0, 0, 0, 0, 0, t2544, -t2551, t2545, -t2220 * t2432 + t2229 * t2435, 0, 0, 0, 0, 0, 0, t2544, t2545, t2551, -t2216 * t2432 + t2223 * t2435, 0, 0, 0, 0, 0, 0, -t2225 * t2432 + t2230 * t2435, -t2228 * t2432 + t2233 * t2435, -t2218 * t2432 + t2226 * t2435, -t2209 * t2432 + t2210 * t2435; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2432 * t2410 + t2435 * t2475, 0, 0, 0, 0, 0, 0, t2387 * t2435 + t2408 * t2432, t2386 * t2435 - t2432 * t2455, 0, t2304 * t2435 + t2319 * t2432, 0, 0, 0, 0, 0, 0, t2328 * t2435 + t2342 * t2432, t2329 * t2435 + t2343 * t2432, t2364 * t2435 + t2368 * t2432, t2255 * t2435 + t2279 * t2432, 0, 0, 0, 0, 0, 0, t2542, t2550, t2543, t2220 * t2435 + t2229 * t2432, 0, 0, 0, 0, 0, 0, t2542, t2543, -t2550, t2216 * t2435 + t2223 * t2432, 0, 0, 0, 0, 0, 0, t2225 * t2435 + t2230 * t2432, t2228 * t2435 + t2233 * t2432, t2218 * t2435 + t2226 * t2432, t2209 * t2435 + t2210 * t2432; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2498, 0, 0, 0, 0, 0, 0, t2385, t2384, 0, t2303, 0, 0, 0, 0, 0, 0, t2326, t2327, t2363, t2254, 0, 0, 0, 0, 0, 0, t2537, t2264, t2536, t2219, 0, 0, 0, 0, 0, 0, t2537, t2536, -t2264, t2215, 0, 0, 0, 0, 0, 0, t2224, t2227, t2217, t2208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2410, 0, 0, 0, 0, 0, 0, t2408, -t2455, 0, t2319, 0, 0, 0, 0, 0, 0, t2342, t2343, t2368, t2279, 0, 0, 0, 0, 0, 0, t2524, t2283, t2525, t2229, 0, 0, 0, 0, 0, 0, t2524, t2525, -t2283, t2223, 0, 0, 0, 0, 0, 0, t2230, t2233, t2226, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2475, 0, 0, 0, 0, 0, 0, t2387, t2386, 0, t2304, 0, 0, 0, 0, 0, 0, t2328, t2329, t2364, t2255, 0, 0, 0, 0, 0, 0, t2535, t2266, t2534, t2220, 0, 0, 0, 0, 0, 0, t2535, t2534, -t2266, t2216, 0, 0, 0, 0, 0, 0, t2225, t2228, t2218, t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2498, 0, 0, 0, 0, 0, 0, t2385, t2384, 0, t2303, 0, 0, 0, 0, 0, 0, t2326, t2327, t2363, t2254, 0, 0, 0, 0, 0, 0, t2537, t2264, t2536, t2219, 0, 0, 0, 0, 0, 0, t2537, t2536, -t2264, t2215, 0, 0, 0, 0, 0, 0, t2224, t2227, t2217, t2208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2444, -qJDD(2), 0, t2358, 0, 0, 0, 0, 0, 0, t2373, t2374, t2406, t2288, 0, 0, 0, 0, 0, 0, t2518, t2307, t2516, t2243, 0, 0, 0, 0, 0, 0, t2518, t2516, -t2307, t2232, 0, 0, 0, 0, 0, 0, t2245, t2247, t2237, t2212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2444, 0, -t2474, 0, 0, 0, 0, 0, 0, t2405, -t2402, t2409, -t2339, 0, 0, 0, 0, 0, 0, -t2514, -t2333, -t2513, -t2248, 0, 0, 0, 0, 0, 0, -t2514, -t2513, t2333, -t2238, 0, 0, 0, 0, 0, 0, -t2261, -t2268, -t2240, -t2213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2447, 0, 0, 0, 0, 0, 0, t2371, t2372, 0, t2287, 0, 0, 0, 0, 0, 0, t2519, t2305, t2517, t2242, 0, 0, 0, 0, 0, 0, t2519, t2517, -t2305, t2231, 0, 0, 0, 0, 0, 0, t2244, t2246, t2236, t2211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2416, t2412, t2482, t2332, 0, 0, 0, 0, 0, 0, t2512, t2335, t2511, t2249, 0, 0, 0, 0, 0, 0, t2512, t2511, -t2335, t2239, 0, 0, 0, 0, 0, 0, t2262, t2269, t2241, t2214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2415, -t2483, t2331, 0, 0, 0, 0, 0, 0, -t2348, -t2448, t2346, -t2311, 0, 0, 0, 0, 0, 0, -t2348, t2346, t2448, -t2282, 0, 0, 0, 0, 0, 0, t2295, t2297, t2309, -t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2405, t2402, -t2409, t2339, 0, 0, 0, 0, 0, 0, t2514, t2333, t2513, t2248, 0, 0, 0, 0, 0, 0, t2514, t2513, -t2333, t2238, 0, 0, 0, 0, 0, 0, t2261, t2268, t2240, t2213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2505, t2355, t2507, t2281, 0, 0, 0, 0, 0, 0, t2505, t2507, -t2355, t2270, 0, 0, 0, 0, 0, 0, t2286, t2290, t2274, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2356, t2506, t2449, t2280, 0, 0, 0, 0, 0, 0, -t2356, t2449, -t2506, -t2271, 0, 0, 0, 0, 0, 0, -t2285, -t2289, -t2273, -t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2348, t2448, -t2346, t2311, 0, 0, 0, 0, 0, 0, t2348, -t2346, -t2448, t2282, 0, 0, 0, 0, 0, 0, -t2295, -t2297, -t2309, t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2505, t2507, -t2355, t2270, 0, 0, 0, 0, 0, 0, t2286, t2290, t2274, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2348, -t2346, -t2448, t2282, 0, 0, 0, 0, 0, 0, -t2295, -t2297, -t2309, t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, -t2449, t2506, t2271, 0, 0, 0, 0, 0, 0, t2285, t2289, t2273, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2330, t2321, t2296, t2235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2320, t2337, t2298, t2234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, t2297, t2309, -t2272;];
f_new_reg  = t1;
