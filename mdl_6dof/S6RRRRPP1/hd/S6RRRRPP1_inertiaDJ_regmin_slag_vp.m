% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPP1_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:46:47
% EndTime: 2019-03-09 20:46:54
% DurationCPUTime: 2.20s
% Computational Cost: add. (5827->271), mult. (12963->442), div. (0->0), fcn. (11960->8), ass. (0->158)
t159 = sin(pkin(10));
t163 = cos(qJ(4));
t160 = sin(qJ(4));
t227 = cos(pkin(10));
t191 = t227 * t160;
t126 = t159 * t163 + t191;
t118 = t126 * qJD(4);
t190 = t227 * t163;
t212 = qJD(4) * t160;
t119 = qJD(4) * t190 - t159 * t212;
t221 = t159 * t160;
t248 = t190 - t221;
t154 = t163 * qJD(5);
t164 = cos(qJ(3));
t213 = qJD(3) * t164;
t202 = pkin(2) * t213;
t180 = t163 * t202;
t161 = sin(qJ(3));
t148 = pkin(2) * t161 + pkin(9);
t217 = -qJ(5) - t148;
t182 = qJD(4) * t217;
t103 = t160 * t182 + t154 + t180;
t167 = (-qJD(5) - t202) * t160 + t163 * t182;
t57 = t103 * t159 - t227 * t167;
t58 = t227 * t103 + t159 * t167;
t156 = t163 * qJ(5);
t123 = t148 * t163 + t156;
t184 = t217 * t160;
t91 = t123 * t159 - t227 * t184;
t92 = t227 * t123 + t159 * t184;
t245 = -t92 * t118 + t91 * t119 + t57 * t126 + t248 * t58;
t251 = 0.2e1 * t245;
t138 = pkin(9) * t163 + t156;
t240 = -qJ(5) - pkin(9);
t107 = t138 * t159 - t240 * t191;
t108 = t227 * t138 + t240 * t221;
t192 = qJD(4) * t240;
t116 = t160 * t192 + t154;
t168 = -t160 * qJD(5) + t163 * t192;
t83 = t116 * t159 - t227 * t168;
t84 = t227 * t116 + t159 * t168;
t246 = t107 * t119 - t108 * t118 + t83 * t126 + t248 * t84;
t250 = 0.2e1 * t246;
t162 = sin(qJ(2));
t165 = cos(qJ(2));
t130 = t161 * t162 - t164 * t165;
t247 = qJD(2) + qJD(3);
t104 = t247 * t130;
t131 = t161 * t165 + t164 * t162;
t155 = qJD(4) * t163;
t200 = t131 * t155;
t174 = -t104 * t160 + t200;
t249 = t246 + t245;
t243 = -pkin(8) - pkin(7);
t139 = t243 * t162;
t140 = t243 * t165;
t110 = t139 * t161 - t140 * t164;
t106 = t163 * t110;
t151 = -pkin(2) * t165 - pkin(1);
t98 = t130 * pkin(3) - t131 * pkin(9) + t151;
t228 = t160 * t98 + t106;
t158 = t163 ^ 2;
t215 = t160 ^ 2 - t158;
t181 = t215 * qJD(4);
t244 = 2 * qJD(6);
t32 = t126 * t104 - t119 * t131;
t33 = t248 * t104 + t131 * t118;
t201 = qJD(2) * t243;
t133 = t162 * t201;
t179 = t165 * t201;
t64 = t110 * qJD(3) + t161 * t133 - t164 * t179;
t34 = t174 * pkin(4) + t64;
t88 = t248 * t131;
t11 = -pkin(5) * t32 + qJ(6) * t33 - qJD(6) * t88 + t34;
t109 = -t139 * t164 - t161 * t140;
t223 = t131 * t160;
t81 = pkin(4) * t223 + t109;
t87 = t126 * t131;
t31 = pkin(5) * t87 - qJ(6) * t88 + t81;
t242 = -t11 * t248 + t31 * t118;
t241 = pkin(2) * t164;
t239 = -t11 * t126 - t31 * t119;
t105 = t247 * t131;
t176 = qJ(5) * t104 - qJD(5) * t131;
t210 = t162 * qJD(2);
t205 = pkin(2) * t210;
t55 = pkin(3) * t105 + pkin(9) * t104 + t205;
t214 = qJD(3) * t161;
t63 = -t164 * t133 - t139 * t213 - t140 * t214 - t161 * t179;
t193 = t160 * t63 + t163 * t55;
t14 = t105 * pkin(4) + t176 * t163 + (-t106 + (qJ(5) * t131 - t98) * t160) * qJD(4) + t193;
t207 = t98 * t155 + t160 * t55 - t163 * t63;
t16 = -qJ(5) * t200 + (-qJD(4) * t110 + t176) * t160 + t207;
t8 = t159 * t14 + t227 * t16;
t185 = -t110 * t160 + t163 * t98;
t38 = pkin(4) * t130 - t131 * t156 + t185;
t42 = -qJ(5) * t223 + t228;
t26 = t159 * t38 + t227 * t42;
t153 = pkin(2) * t214;
t152 = pkin(4) * t212;
t65 = pkin(5) * t118 - qJ(6) * t119 - qJD(6) * t126 + t152;
t59 = t153 + t65;
t150 = -pkin(4) * t163 - pkin(3);
t96 = -pkin(5) * t248 - qJ(6) * t126 + t150;
t85 = t96 - t241;
t237 = t85 * t118 - t248 * t59;
t236 = -t85 * t119 - t59 * t126;
t235 = t96 * t118 - t248 * t65;
t234 = -t96 * t119 - t65 * t126;
t229 = t109 * t155 + t64 * t160;
t224 = t131 * t104;
t222 = t131 * t163;
t219 = t160 * t105;
t218 = t160 * t163;
t149 = -pkin(3) - t241;
t216 = t149 * t155 + t160 * t153;
t211 = qJD(6) * t130;
t209 = t165 * qJD(2);
t208 = -0.2e1 * pkin(1) * qJD(2);
t206 = t105 * qJ(6) + t8;
t204 = pkin(3) * t212;
t203 = pkin(3) * t155;
t198 = t160 * t155;
t2 = t206 + t211;
t21 = qJ(6) * t130 + t26;
t25 = -t159 * t42 + t227 * t38;
t24 = -t130 * pkin(5) - t25;
t7 = t227 * t14 - t159 * t16;
t4 = -pkin(5) * t105 - t7;
t197 = -t21 * t118 + t24 * t119 + t4 * t126 + t2 * t248;
t196 = -t26 * t118 - t25 * t119 - t7 * t126 + t248 * t8;
t195 = t57 * t91 + t92 * t58;
t194 = t107 * t83 + t108 * t84;
t183 = -0.4e1 * t131 * t218;
t177 = t130 * t148 - t131 * t149;
t175 = t149 * t212 - t163 * t153;
t173 = t104 * t163 + t131 * t212;
t172 = -t105 * t163 + t130 * t212;
t171 = t92 * t32 - t33 * t91 + t57 * t88 - t58 * t87;
t170 = -t107 * t33 + t108 * t32 + t83 * t88 - t84 * t87;
t169 = t107 * t57 + t58 * t108 + t83 * t91 + t92 * t84;
t166 = -t104 * t149 - t105 * t148 + (-t130 * t164 + t131 * t161) * qJD(3) * pkin(2);
t146 = -t227 * pkin(4) - pkin(5);
t144 = pkin(4) * t159 + qJ(6);
t142 = 0.2e1 * t198;
t137 = t150 - t241;
t134 = t153 + t152;
t129 = -0.2e1 * t181;
t127 = t131 ^ 2;
t101 = t109 * t212;
t82 = (-t118 * t159 - t227 * t119) * pkin(4);
t77 = t130 * t155 + t219;
t60 = qJD(6) * t248 - t118 * t144 + t119 * t146;
t52 = -t104 * t218 - t131 * t181;
t41 = qJD(4) * t183 + t215 * t104;
t23 = -t228 * qJD(4) + t193;
t22 = t110 * t212 - t207;
t1 = [0, 0, 0, 0.2e1 * t162 * t209, 0.2e1 * (-t162 ^ 2 + t165 ^ 2) * qJD(2), 0, 0, 0, t162 * t208, t165 * t208, -0.2e1 * t224, 0.2e1 * t104 * t130 - 0.2e1 * t105 * t131, 0, 0, 0, 0.2e1 * t105 * t151 + 0.2e1 * t130 * t205, -0.2e1 * t104 * t151 + 0.2e1 * t131 * t205, -0.2e1 * t127 * t198 - 0.2e1 * t158 * t224, -t104 * t183 + 0.2e1 * t127 * t181, 0.2e1 * t105 * t222 - 0.2e1 * t173 * t130, -0.2e1 * t174 * t130 - 0.2e1 * t131 * t219, 0.2e1 * t130 * t105, 0.2e1 * t185 * t105 + 0.2e1 * t174 * t109 + 0.2e1 * t23 * t130 + 0.2e1 * t64 * t223, -0.2e1 * t228 * t105 - 0.2e1 * t173 * t109 + 0.2e1 * t22 * t130 + 0.2e1 * t64 * t222, 0.2e1 * t25 * t33 + 0.2e1 * t26 * t32 - 0.2e1 * t7 * t88 - 0.2e1 * t8 * t87, 0.2e1 * t25 * t7 + 0.2e1 * t26 * t8 + 0.2e1 * t34 * t81, -0.2e1 * t105 * t24 + 0.2e1 * t11 * t87 - 0.2e1 * t130 * t4 - 0.2e1 * t31 * t32, -0.2e1 * t2 * t87 + 0.2e1 * t21 * t32 - 0.2e1 * t24 * t33 + 0.2e1 * t4 * t88, 0.2e1 * t105 * t21 - 0.2e1 * t11 * t88 + 0.2e1 * t130 * t2 + 0.2e1 * t31 * t33, 0.2e1 * t11 * t31 + 0.2e1 * t2 * t21 + 0.2e1 * t24 * t4; 0, 0, 0, 0, 0, t209, -t210, 0, -pkin(7) * t209, pkin(7) * t210, 0, 0, -t104, -t105, 0, -t64, t63, t52, t41, t77, -t172, 0, t101 + (-t177 * qJD(4) - t64) * t163 + t166 * t160, t166 * t163 + t177 * t212 + t229, t171 + t196, t134 * t81 + t137 * t34 - t25 * t57 + t26 * t58 - t7 * t91 + t8 * t92, -t105 * t91 - t130 * t57 - t32 * t85 + t59 * t87 + t242, t171 + t197, t105 * t92 + t130 * t58 + t33 * t85 - t59 * t88 + t239, t11 * t85 + t2 * t92 + t21 * t58 + t24 * t57 + t31 * t59 + t4 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t153, -0.2e1 * t202, t142, t129, 0, 0, 0, 0.2e1 * t175, 0.2e1 * t216, t251, 0.2e1 * t134 * t137 + 0.2e1 * t195, 0.2e1 * t237, t251, 0.2e1 * t236, 0.2e1 * t59 * t85 + 0.2e1 * t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, -t105, 0, -t64, t63, t52, t41, t77, -t172, 0, t101 + (pkin(3) * t104 - pkin(9) * t105) * t160 + (-t64 + (-pkin(3) * t131 - pkin(9) * t130) * qJD(4)) * t163, t173 * pkin(3) + t172 * pkin(9) + t229, t170 + t196, -t107 * t7 + t108 * t8 + t150 * t34 + t81 * t152 - t25 * t83 + t26 * t84, -t105 * t107 - t130 * t83 - t32 * t96 + t65 * t87 + t242, t170 + t197, t105 * t108 + t130 * t84 + t33 * t96 - t65 * t88 + t239, t107 * t4 + t108 * t2 + t11 * t96 + t21 * t84 + t24 * t83 + t31 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t153, -t202, t142, t129, 0, 0, 0, t175 - t204, -t203 + t216, t249, t134 * t150 + t137 * t152 + t169, t235 + t237, t249, t234 + t236, t59 * t96 + t65 * t85 + t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, t129, 0, 0, 0, -0.2e1 * t204, -0.2e1 * t203, t250, 0.2e1 * t150 * t152 + 0.2e1 * t194, 0.2e1 * t235, t250, 0.2e1 * t234, 0.2e1 * t65 * t96 + 0.2e1 * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t174, t105, t23, t22 (t159 * t32 + t227 * t33) * pkin(4) (t159 * t8 + t227 * t7) * pkin(4) (pkin(5) - t146) * t105 + t7, -qJD(6) * t87 + t144 * t32 - t146 * t33, t105 * t144 + t206 + 0.2e1 * t211, qJD(6) * t21 + t144 * t2 + t146 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, -t212, 0, -t148 * t155 - t160 * t202, t148 * t212 - t180, t82 (t159 * t58 - t227 * t57) * pkin(4), -t57, t60, t58, qJD(6) * t92 + t144 * t58 + t146 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, -t212, 0, -pkin(9) * t155, pkin(9) * t212, t82 (t159 * t84 - t227 * t83) * pkin(4), -t83, t60, t84, qJD(6) * t108 + t144 * t84 + t146 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, t144 * t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t32, 0, t33, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, t118, 0, -t119, t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, t118, 0, -t119, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t105, -t33, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
