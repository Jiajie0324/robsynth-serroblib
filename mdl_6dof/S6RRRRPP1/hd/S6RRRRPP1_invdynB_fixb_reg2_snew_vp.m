% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:00
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:57:41
% EndTime: 2019-05-07 17:58:37
% DurationCPUTime: 57.15s
% Computational Cost: add. (205064->817), mult. (417075->1177), div. (0->0), fcn. (307072->10), ass. (0->587)
t1195 = sin(qJ(1));
t1199 = cos(qJ(1));
t1194 = sin(qJ(2));
t1198 = cos(qJ(2));
t1193 = sin(qJ(3));
t1197 = cos(qJ(3));
t1152 = (t1193 * t1198 + t1194 * t1197) * qJD(1);
t1187 = qJD(2) + qJD(3);
t1192 = sin(qJ(4));
t1196 = cos(qJ(4));
t1124 = t1152 * t1192 - t1196 * t1187;
t1275 = qJD(1) * t1198;
t1276 = qJD(1) * t1194;
t1150 = t1193 * t1276 - t1197 * t1275;
t1231 = qJD(2) * t1275;
t1245 = qJDD(1) * t1194;
t1160 = t1231 + t1245;
t1183 = t1198 * qJDD(1);
t1239 = qJD(2) * t1276;
t1161 = t1183 - t1239;
t1210 = qJD(3) * t1150 - t1160 * t1197 - t1161 * t1193;
t1242 = qJDD(2) + qJDD(3);
t1033 = -t1124 * qJD(4) + t1192 * t1242 - t1196 * t1210;
t1190 = sin(pkin(10));
t1191 = cos(pkin(10));
t1125 = t1152 * t1196 + t1187 * t1192;
t1211 = t1192 * t1210 + t1196 * t1242;
t1207 = t1125 * qJD(4) - t1211;
t1205 = t1191 * t1033 - t1190 * t1207;
t1074 = t1191 * t1124 + t1125 * t1190;
t1146 = qJD(4) + t1150;
t1268 = t1074 * t1146;
t1315 = t1205 - t1268;
t1076 = -t1124 * t1190 + t1125 * t1191;
t1073 = t1076 ^ 2;
t1303 = t1146 ^ 2;
t1000 = t1303 + t1073;
t1018 = t1076 * t1074;
t1228 = t1193 * t1160 - t1197 * t1161;
t1092 = -qJD(3) * t1152 - t1228;
t1089 = qJDD(4) - t1092;
t1319 = t1018 + t1089;
t1292 = t1190 * t1319;
t896 = t1000 * t1191 + t1292;
t1288 = t1191 * t1319;
t913 = t1000 * t1190 - t1288;
t832 = t1192 * t896 + t1196 * t913;
t783 = t1193 * t832 - t1197 * t1315;
t785 = t1193 * t1315 + t1197 * t832;
t718 = t1194 * t783 - t1198 * t785;
t830 = t1192 * t913 - t1196 * t896;
t692 = t1195 * t718 + t1199 * t830;
t1457 = pkin(6) * t692;
t694 = -t1195 * t830 + t1199 * t718;
t1456 = pkin(6) * t694;
t725 = t1194 * t785 + t1198 * t783;
t1455 = pkin(7) * t725;
t1454 = pkin(1) * t725 + pkin(2) * t783 - pkin(3) * t1315 + pkin(9) * t832;
t1453 = pkin(1) * t830 + pkin(7) * t718;
t1305 = t1074 ^ 2;
t1038 = t1305 - t1303;
t938 = t1038 * t1190 + t1288;
t942 = t1038 * t1191 - t1292;
t862 = t1192 * t938 - t1196 * t942;
t1229 = t1033 * t1190 + t1191 * t1207;
t1262 = t1146 * t1076;
t927 = t1229 - t1262;
t791 = t1193 * t862 - t1197 * t927;
t795 = t1193 * t927 + t1197 * t862;
t733 = t1194 * t791 - t1198 * t795;
t858 = t1192 * t942 + t1196 * t938;
t1452 = t1195 * t733 - t1199 * t858;
t1015 = t1073 - t1305;
t1213 = t1229 + t1262;
t850 = -t1190 * t1213 + t1191 * t1315;
t1294 = t1190 * t1315;
t852 = t1191 * t1213 + t1294;
t764 = t1192 * t850 + t1196 * t852;
t755 = t1015 * t1197 + t1193 * t764;
t757 = -t1015 * t1193 + t1197 * t764;
t700 = t1194 * t755 - t1198 * t757;
t762 = t1192 * t852 - t1196 * t850;
t1451 = t1195 * t700 + t1199 * t762;
t1450 = t1195 * t858 + t1199 * t733;
t1449 = -t1195 * t762 + t1199 * t700;
t1448 = pkin(8) * t783;
t1446 = pkin(2) * t830 - pkin(8) * t785;
t1445 = t1194 * t757 + t1198 * t755;
t1444 = t1194 * t795 + t1198 * t791;
t1441 = pkin(9) * t830;
t1313 = -t1268 - t1205;
t1331 = -t1190 * t1313 - t1191 * t927;
t1333 = -t1190 * t927 + t1191 * t1313;
t1355 = t1192 * t1331 + t1196 * t1333;
t1356 = -t1192 * t1333 + t1196 * t1331;
t964 = -t1305 - t1073;
t1375 = t1193 * t964 + t1197 * t1356;
t1380 = t1193 * t1356 - t1197 * t964;
t1401 = -t1194 * t1380 + t1198 * t1375;
t1417 = t1195 * t1355 + t1199 * t1401;
t1440 = pkin(6) * t1417;
t1320 = -t1018 + t1089;
t1291 = t1190 * t1320;
t1312 = -t1303 - t1305;
t1328 = t1191 * t1312 - t1291;
t971 = t1191 * t1320;
t1332 = t1190 * t1312 + t971;
t1357 = t1192 * t1328 + t1196 * t1332;
t1358 = -t1192 * t1332 + t1196 * t1328;
t1376 = t1193 * t1213 + t1197 * t1358;
t1381 = t1193 * t1358 - t1197 * t1213;
t1399 = -t1194 * t1381 + t1198 * t1376;
t1418 = t1195 * t1357 + t1199 * t1399;
t1439 = pkin(6) * t1418;
t1419 = t1195 * t1401 - t1199 * t1355;
t1438 = pkin(6) * t1419;
t1420 = t1195 * t1399 - t1199 * t1357;
t1437 = pkin(6) * t1420;
t1430 = pkin(3) * t830 - pkin(4) * t896;
t1039 = -t1073 + t1303;
t1347 = -t1039 * t1190 + t971;
t1360 = t1191 * t1039 + t1291;
t1377 = -t1192 * t1347 - t1196 * t1360;
t1382 = -t1192 * t1360 + t1196 * t1347;
t1402 = -t1193 * t1313 + t1197 * t1382;
t1403 = t1193 * t1382 + t1197 * t1313;
t1416 = -t1194 * t1403 + t1198 * t1402;
t1428 = t1195 * t1416 + t1199 * t1377;
t1427 = -t1195 * t1377 + t1199 * t1416;
t1398 = t1194 * t1376 + t1198 * t1381;
t1426 = pkin(7) * t1398;
t1400 = t1194 * t1375 + t1198 * t1380;
t1425 = pkin(7) * t1400;
t1424 = -pkin(1) * t1398 - pkin(2) * t1381 + pkin(3) * t1213 - pkin(9) * t1358;
t1423 = -pkin(1) * t1400 - pkin(2) * t1380 + pkin(3) * t964 - pkin(9) * t1356;
t1422 = -pkin(1) * t1357 + pkin(7) * t1399;
t1421 = -pkin(1) * t1355 + pkin(7) * t1401;
t1415 = t1194 * t1402 + t1198 * t1403;
t1413 = pkin(8) * t1380;
t1412 = pkin(8) * t1381;
t1411 = qJ(5) * t896;
t1410 = qJ(5) * t913;
t1405 = -pkin(2) * t1355 + pkin(8) * t1375;
t1404 = -pkin(2) * t1357 + pkin(8) * t1376;
t1393 = pkin(9) * t1355;
t1392 = pkin(9) * t1357;
t729 = -pkin(3) * t1355 - pkin(4) * t1333;
t1385 = -pkin(3) * t1357 - pkin(4) * t1332;
t1212 = (-t1074 * t1190 - t1076 * t1191) * t1146;
t1261 = t1146 * t1190;
t1035 = t1076 * t1261;
t1260 = t1146 * t1191;
t1236 = t1074 * t1260;
t1219 = t1035 - t1236;
t1311 = -t1192 * t1219 - t1196 * t1212;
t1267 = t1089 * t1193;
t1310 = -t1192 * t1212 + t1196 * t1219;
t1325 = t1197 * t1310 + t1267;
t1085 = t1197 * t1089;
t1329 = t1193 * t1310 - t1085;
t1354 = -t1194 * t1329 + t1198 * t1325;
t1379 = t1195 * t1354 + t1199 * t1311;
t1215 = t1190 * t1229 + t1236;
t1220 = t1074 * t1261 - t1191 * t1229;
t1308 = -t1192 * t1215 - t1196 * t1220;
t1238 = t1193 * t1018;
t1309 = -t1192 * t1220 + t1196 * t1215;
t1326 = t1197 * t1309 - t1238;
t1237 = t1197 * t1018;
t1327 = t1193 * t1309 + t1237;
t1352 = -t1194 * t1327 + t1198 * t1326;
t1378 = t1195 * t1352 + t1199 * t1308;
t1374 = -t1195 * t1311 + t1199 * t1354;
t1373 = -t1195 * t1308 + t1199 * t1352;
t1369 = qJ(5) * t1328;
t1368 = qJ(5) * t1332;
t1367 = qJ(5) * t1333;
t1359 = -pkin(4) * t964 + qJ(5) * t1331;
t1353 = t1194 * t1325 + t1198 * t1329;
t1351 = t1194 * t1326 + t1198 * t1327;
t1350 = 2 * qJD(6);
t1348 = qJ(6) * t1315;
t1086 = t1125 * t1124;
t1318 = -t1086 + t1089;
t1346 = t1192 * t1318;
t1115 = t1152 * t1150;
t1317 = -t1115 + t1242;
t1343 = t1193 * t1317;
t1340 = t1196 * t1318;
t1337 = t1197 * t1317;
t1143 = t1187 * t1150;
t1334 = t1210 + t1143;
t923 = t1076 * t1260 + t1190 * t1205;
t924 = t1191 * t1205 - t1035;
t845 = -t1192 * t923 + t1196 * t924;
t1221 = t1193 * t845 - t1237;
t1222 = t1197 * t845 + t1238;
t1306 = -t1194 * t1221 + t1198 * t1222;
t842 = -t1192 * t924 - t1196 * t923;
t1330 = t1195 * t1306 + t1199 * t842;
t1324 = -t1195 * t842 + t1199 * t1306;
t1103 = t1146 * t1124;
t1012 = -t1103 - t1033;
t1011 = -t1103 + t1033;
t1014 = pkin(5) * t1074 - qJ(6) * t1076;
t1189 = t1198 ^ 2;
t1201 = qJD(1) ^ 2;
t1170 = t1195 * g(1) - t1199 * g(2);
t1217 = qJDD(1) * pkin(1) + t1170;
t1218 = qJD(2) * pkin(2) - pkin(8) * t1276;
t1095 = t1161 * pkin(2) + (pkin(8) * t1189 + pkin(7)) * t1201 - t1218 * t1276 + t1217;
t957 = t1334 * pkin(9) + (t1152 * t1187 - t1092) * pkin(3) - t1095;
t1171 = g(1) * t1199 + g(2) * t1195;
t1208 = -pkin(1) * t1201 + qJDD(1) * pkin(7) - t1171;
t1136 = -t1194 * g(3) + t1198 * t1208;
t1185 = t1189 * t1201;
t1084 = -pkin(2) * t1185 + t1161 * pkin(8) - qJD(2) * t1218 + t1136;
t1206 = t1194 * t1208;
t1249 = t1194 * t1201;
t1277 = qJD(1) * qJD(2);
t1202 = -t1206 - t1160 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1249 + pkin(8) * t1277 - g(3)) * t1198;
t1022 = t1197 * t1084 + t1193 * t1202;
t1112 = pkin(3) * t1150 - pkin(9) * t1152;
t1302 = t1187 ^ 2;
t970 = -pkin(3) * t1302 + pkin(9) * t1242 - t1150 * t1112 + t1022;
t877 = t1192 * t970 - t1196 * t957;
t825 = pkin(4) * t1318 + qJ(5) * t1012 - t877;
t1096 = pkin(4) * t1146 - qJ(5) * t1125;
t1304 = t1124 ^ 2;
t878 = t1192 * t957 + t1196 * t970;
t835 = -pkin(4) * t1304 - qJ(5) * t1207 - t1146 * t1096 + t878;
t1299 = t1190 * t825 + t1191 * t835;
t1314 = t1089 * qJ(6) - t1074 * t1014 + t1146 * t1350 + t1299;
t1008 = (qJD(4) - t1146) * t1125 - t1211;
t1055 = (qJD(3) - t1187) * t1152 + t1228;
t1307 = t1194 * t1222 + t1198 * t1221;
t1122 = t1125 ^ 2;
t1148 = t1150 ^ 2;
t1149 = t1152 ^ 2;
t1301 = pkin(3) * t1193;
t1300 = pkin(5) * t1191;
t1298 = t1190 * t835 - t1191 * t825;
t1297 = qJ(6) * t1191;
t1021 = t1193 * t1084 - t1197 * t1202;
t969 = -t1242 * pkin(3) - t1302 * pkin(9) + t1152 * t1112 + t1021;
t879 = t1207 * pkin(4) - t1304 * qJ(5) + t1125 * t1096 + qJDD(5) + t969;
t1296 = t1190 * t879;
t1290 = t1191 * t879;
t1273 = qJD(5) * t1076;
t1069 = 0.2e1 * t1273;
t750 = t1069 + t1298;
t1274 = qJD(5) * t1074;
t1067 = -0.2e1 * t1274;
t751 = t1067 + t1299;
t696 = t1190 * t751 - t1191 * t750;
t1287 = t1192 * t696;
t1286 = t1192 * t969;
t945 = -t1021 * t1197 + t1022 * t1193;
t1284 = t1194 * t945;
t1282 = t1196 * t696;
t1281 = t1196 * t969;
t1279 = t1198 * t945;
t1278 = -t1303 - t964;
t1024 = t1086 + t1089;
t1271 = t1024 * t1192;
t1270 = t1024 * t1196;
t1266 = t1095 * t1193;
t1265 = t1095 * t1197;
t1110 = t1115 + t1242;
t1264 = t1110 * t1193;
t1263 = t1110 * t1197;
t1259 = t1146 * t1192;
t1258 = t1146 * t1196;
t1153 = t1201 * pkin(7) + t1217;
t1257 = t1153 * t1194;
t1256 = t1153 * t1198;
t1177 = t1198 * t1249;
t1168 = qJDD(2) + t1177;
t1255 = t1168 * t1194;
t1169 = qJDD(2) - t1177;
t1254 = t1169 * t1194;
t1253 = t1169 * t1198;
t1252 = t1187 * t1193;
t1251 = t1187 * t1197;
t1188 = t1194 ^ 2;
t1250 = t1188 * t1201;
t1246 = t1188 + t1189;
t1244 = qJDD(1) * t1195;
t1243 = qJDD(1) * t1199;
t1241 = -pkin(3) * t1197 - pkin(2);
t1235 = t1193 * t1086;
t1234 = t1197 * t1086;
t1233 = t1195 * t1115;
t1232 = t1199 * t1115;
t1230 = -qJ(6) * t1190 - pkin(4);
t697 = t1190 * t750 + t1191 * t751;
t946 = t1021 * t1193 + t1197 * t1022;
t1135 = t1198 * g(3) + t1206;
t1083 = t1135 * t1194 + t1198 * t1136;
t1127 = -t1170 * t1195 - t1199 * t1171;
t1226 = t1076 * t1014 + qJDD(6) + t1298;
t1225 = t1195 * t1177;
t1224 = t1199 * t1177;
t1165 = -t1195 * t1201 + t1243;
t1223 = -pkin(6) * t1165 - g(3) * t1195;
t799 = t1192 * t878 - t1196 * t877;
t800 = t1192 * t877 + t1196 * t878;
t1082 = t1135 * t1198 - t1136 * t1194;
t1126 = t1170 * t1199 - t1171 * t1195;
t1216 = t1067 + t1314;
t1214 = -t1089 * pkin(5) + t1226;
t1204 = t1229 * pkin(5) - t1348 + t879;
t1203 = t1076 * t1350 - t1204;
t1200 = qJD(2) ^ 2;
t1175 = -t1185 - t1200;
t1174 = t1185 - t1200;
t1173 = -t1200 - t1250;
t1172 = t1200 - t1250;
t1167 = t1185 - t1250;
t1166 = t1185 + t1250;
t1164 = t1199 * t1201 + t1244;
t1163 = t1246 * qJDD(1);
t1162 = t1183 - 0.2e1 * t1239;
t1159 = 0.2e1 * t1231 + t1245;
t1157 = t1198 * t1168;
t1156 = t1246 * t1277;
t1147 = -pkin(6) * t1164 + g(3) * t1199;
t1140 = -t1149 + t1302;
t1139 = t1148 - t1302;
t1138 = t1160 * t1198 - t1188 * t1277;
t1137 = -t1161 * t1194 - t1189 * t1277;
t1134 = -t1149 - t1302;
t1133 = -t1173 * t1194 - t1253;
t1132 = -t1172 * t1194 + t1157;
t1131 = t1175 * t1198 - t1255;
t1130 = t1174 * t1198 - t1254;
t1129 = t1173 * t1198 - t1254;
t1128 = t1175 * t1194 + t1157;
t1121 = t1163 * t1199 - t1166 * t1195;
t1120 = t1163 * t1195 + t1166 * t1199;
t1116 = -t1159 * t1194 + t1162 * t1198;
t1114 = -t1149 + t1148;
t1108 = -t1302 - t1148;
t1107 = t1133 * t1199 + t1159 * t1195;
t1106 = t1131 * t1199 - t1162 * t1195;
t1105 = t1133 * t1195 - t1159 * t1199;
t1104 = t1131 * t1195 + t1162 * t1199;
t1102 = -t1122 + t1303;
t1101 = -t1303 + t1304;
t1100 = (-t1150 * t1197 + t1152 * t1193) * t1187;
t1099 = (-t1150 * t1193 - t1152 * t1197) * t1187;
t1098 = -pkin(7) * t1129 - t1256;
t1097 = -pkin(7) * t1128 - t1257;
t1094 = -t1148 - t1149;
t1091 = -pkin(1) * t1129 + t1136;
t1090 = -pkin(1) * t1128 + t1135;
t1080 = -t1122 + t1304;
t1070 = -t1122 - t1303;
t1065 = t1139 * t1197 - t1264;
t1064 = -t1140 * t1193 + t1337;
t1063 = t1139 * t1193 + t1263;
t1062 = t1140 * t1197 + t1343;
t1061 = -t1134 * t1193 - t1263;
t1060 = t1134 * t1197 - t1264;
t1059 = -t1143 + t1210;
t1054 = (qJD(3) + t1187) * t1152 + t1228;
t1053 = -t1303 - t1304;
t1052 = -t1152 * t1252 - t1197 * t1210;
t1051 = t1152 * t1251 - t1193 * t1210;
t1050 = -t1092 * t1193 + t1150 * t1251;
t1049 = t1092 * t1197 + t1150 * t1252;
t1048 = t1083 * t1199 - t1153 * t1195;
t1047 = t1083 * t1195 + t1153 * t1199;
t1042 = t1108 * t1197 - t1343;
t1041 = t1108 * t1193 + t1337;
t1036 = t1122 + t1304;
t1030 = (-t1124 * t1196 + t1125 * t1192) * t1146;
t1029 = (t1124 * t1192 + t1125 * t1196) * t1146;
t1026 = -t1099 * t1194 + t1100 * t1198;
t1019 = -pkin(8) * t1060 - t1265;
t1009 = (-qJD(4) - t1146) * t1125 + t1211;
t1007 = -pkin(8) * t1041 - t1266;
t1006 = -t1063 * t1194 + t1065 * t1198;
t1005 = -t1062 * t1194 + t1064 * t1198;
t1004 = t1033 * t1196 - t1125 * t1259;
t1003 = -t1033 * t1192 - t1125 * t1258;
t1002 = t1124 * t1258 + t1192 * t1207;
t1001 = -t1124 * t1259 + t1196 * t1207;
t998 = -t1060 * t1194 + t1061 * t1198;
t997 = t1060 * t1198 + t1061 * t1194;
t996 = -t1055 * t1197 - t1059 * t1193;
t995 = -t1054 * t1197 + t1193 * t1334;
t994 = -t1055 * t1193 + t1059 * t1197;
t993 = -t1054 * t1193 - t1197 * t1334;
t992 = t1030 * t1197 + t1267;
t991 = t1030 * t1193 - t1085;
t990 = t1101 * t1196 - t1271;
t989 = -t1102 * t1192 + t1340;
t988 = -t1101 * t1192 - t1270;
t987 = -t1102 * t1196 - t1346;
t986 = -t1051 * t1194 + t1052 * t1198;
t985 = -t1049 * t1194 + t1050 * t1198;
t980 = -t1041 * t1194 + t1042 * t1198;
t979 = t1041 * t1198 + t1042 * t1194;
t973 = -t1070 * t1192 - t1270;
t972 = t1070 * t1196 - t1271;
t967 = t1053 * t1196 - t1346;
t966 = t1053 * t1192 + t1340;
t956 = pkin(2) * t1334 + pkin(8) * t1061 - t1266;
t953 = t1004 * t1197 + t1235;
t952 = t1002 * t1197 - t1235;
t951 = t1004 * t1193 - t1234;
t950 = t1002 * t1193 + t1234;
t949 = -pkin(2) * t1054 + pkin(8) * t1042 + t1265;
t948 = -t1195 * t1334 + t1199 * t998;
t947 = t1195 * t998 + t1199 * t1334;
t944 = t1054 * t1195 + t1199 * t980;
t943 = -t1054 * t1199 + t1195 * t980;
t918 = -t1008 * t1196 - t1012 * t1192;
t917 = t1009 * t1196 - t1011 * t1192;
t916 = -t1008 * t1192 + t1012 * t1196;
t915 = -t1009 * t1192 - t1011 * t1196;
t910 = pkin(2) * t1095 + pkin(8) * t946;
t909 = -t1194 * t994 + t1198 * t996;
t908 = -t1194 * t993 + t1198 * t995;
t907 = t1194 * t996 + t1198 * t994;
t906 = -t1008 * t1193 + t1197 * t990;
t905 = -t1012 * t1193 + t1197 * t989;
t904 = t1008 * t1197 + t1193 * t990;
t903 = t1012 * t1197 + t1193 * t989;
t902 = -t1194 * t991 + t1198 * t992;
t901 = t1011 * t1193 + t1197 * t973;
t900 = -t1011 * t1197 + t1193 * t973;
t895 = -t1009 * t1193 + t1197 * t967;
t894 = t1009 * t1197 + t1193 * t967;
t893 = -pkin(1) * t997 - pkin(2) * t1060 + t1022;
t892 = -t1080 * t1193 + t1197 * t917;
t891 = t1080 * t1197 + t1193 * t917;
t886 = t1094 * t1195 + t1199 * t909;
t885 = -t1094 * t1199 + t1195 * t909;
t884 = -pkin(9) * t972 + t1281;
t883 = -t1036 * t1193 + t1197 * t918;
t882 = t1036 * t1197 + t1193 * t918;
t881 = -pkin(1) * t979 - pkin(2) * t1041 + t1021;
t880 = -pkin(9) * t966 + t1286;
t876 = -pkin(8) * t994 - t945;
t871 = -t1194 * t951 + t1198 * t953;
t870 = -t1194 * t950 + t1198 * t952;
t869 = -pkin(2) * t1094 + pkin(8) * t996 + t946;
t868 = -pkin(1) * t907 - pkin(2) * t994;
t867 = -pkin(7) * t997 + t1019 * t1198 - t1194 * t956;
t866 = t1198 * t946 - t1284;
t865 = t1194 * t946 + t1279;
t864 = -pkin(7) * t979 + t1007 * t1198 - t1194 * t949;
t847 = -t1095 * t1195 + t1199 * t866;
t846 = t1095 * t1199 + t1195 * t866;
t839 = -pkin(3) * t972 + t878;
t834 = -pkin(3) * t966 + t877;
t827 = -t1194 * t904 + t1198 * t906;
t826 = -t1194 * t903 + t1198 * t905;
t822 = -t1194 * t900 + t1198 * t901;
t821 = t1194 * t901 + t1198 * t900;
t816 = -t1194 * t894 + t1198 * t895;
t815 = t1194 * t895 + t1198 * t894;
t814 = t1290 + t1411;
t813 = -t1194 * t891 + t1198 * t892;
t804 = t1296 - t1368;
t803 = -t1194 * t882 + t1198 * t883;
t802 = t1194 * t883 + t1198 * t882;
t801 = -pkin(1) * t865 - pkin(2) * t945;
t788 = t1195 * t972 + t1199 * t822;
t787 = t1195 * t822 - t1199 * t972;
t782 = t1195 * t966 + t1199 * t816;
t781 = t1195 * t816 - t1199 * t966;
t776 = -pkin(4) * t1315 + t1296 + t1410;
t775 = t1193 * t969 + t1197 * t800;
t774 = t1193 * t800 - t1197 * t969;
t773 = -pkin(4) * t1213 - t1290 + t1369;
t772 = t1204 + (pkin(5) * t1146 - (2 * qJD(6))) * t1076;
t771 = t1195 * t916 + t1199 * t803;
t770 = t1195 * t803 - t1199 * t916;
t769 = -pkin(9) * t916 - t799;
t768 = -pkin(7) * t865 - pkin(8) * t1279 - t1194 * t910;
t759 = -pkin(7) * t907 - t1194 * t869 + t1198 * t876;
t754 = -pkin(8) * t900 - t1193 * t839 + t1197 * t884;
t753 = (-t1213 - t1262) * pkin(5) + t1203;
t752 = -pkin(5) * t1262 + t1203 + t1348;
t748 = -pkin(8) * t894 - t1193 * t834 + t1197 * t880;
t739 = -pkin(2) * t972 + pkin(8) * t901 + t1193 * t884 + t1197 * t839;
t738 = -pkin(1) * t821 - pkin(2) * t900 + pkin(3) * t1011 - pkin(9) * t973 - t1286;
t737 = -pkin(2) * t966 + pkin(8) * t895 + t1193 * t880 + t1197 * t834;
t736 = -pkin(1) * t815 - pkin(2) * t894 - pkin(3) * t1009 - pkin(9) * t967 + t1281;
t735 = qJ(6) * t1303 - t1214 - 0.2e1 * t1273;
t734 = -pkin(5) * t1303 + t1216;
t724 = -pkin(8) * t882 + t1197 * t769 + t1301 * t916;
t723 = qJ(6) * t1278 + t1069 + t1214;
t722 = pkin(5) * t1278 + t1216;
t721 = -t1190 * t753 - t1213 * t1297 - t1368;
t720 = -pkin(5) * t1294 + t1191 * t752 - t1411;
t715 = -t1194 * t774 + t1198 * t775;
t714 = t1194 * t775 + t1198 * t774;
t713 = pkin(8) * t883 + t1193 * t769 + t1241 * t916;
t712 = t1191 * t753 + t1213 * t1230 + t1369;
t711 = -t1430 + t751;
t710 = -t1410 + t1190 * t752 + (pkin(4) + t1300) * t1315;
t709 = -pkin(5) * t1313 + qJ(6) * t927 + t729;
t708 = -t1192 * t776 + t1196 * t814 - t1441;
t707 = -pkin(1) * t802 - pkin(2) * t882 - pkin(3) * t1036 - pkin(9) * t918 - t800;
t706 = t1385 + t750;
t701 = -t1192 * t773 + t1196 * t804 - t1392;
t698 = -pkin(8) * t774 + (-pkin(9) * t1197 + t1301) * t799;
t687 = t1069 + (-t1312 - t1303) * qJ(6) + (-t1089 - t1320) * pkin(5) + t1226 + t1385;
t686 = t1195 * t799 + t1199 * t715;
t685 = t1195 * t715 - t1199 * t799;
t684 = -qJ(6) * t1319 + 0.2e1 * t1274 + (-t1000 + t1303) * pkin(5) - t1314 + t1430;
t683 = -pkin(4) * t879 + qJ(5) * t697;
t682 = -t696 - t1367;
t681 = -t1190 * t735 + t1191 * t734;
t680 = t1190 * t734 + t1191 * t735;
t679 = t1359 + t697;
t678 = pkin(8) * t775 + (-pkin(9) * t1193 + t1241) * t799;
t677 = -pkin(7) * t821 - t1194 * t739 + t1198 * t754;
t676 = -pkin(7) * t815 - t1194 * t737 + t1198 * t748;
t671 = -pkin(1) * t714 - pkin(2) * t774 + pkin(3) * t969 - pkin(9) * t800;
t670 = -t1190 * t722 + t1191 * t723 - t1367;
t669 = t1190 * t723 + t1191 * t722 + t1359;
t668 = -pkin(7) * t802 - t1194 * t713 + t1198 * t724;
t667 = -t1192 * t712 + t1196 * t721 - t1392;
t666 = -t1192 * t710 + t1196 * t720 + t1441;
t665 = -t1192 * t814 - t1196 * t776 - t1454;
t664 = -qJ(5) * t680 + (pkin(5) * t1190 - t1297) * t772;
t663 = t1196 * t697 - t1287;
t662 = t1192 * t697 + t1282;
t661 = -t1193 * t711 + t1197 * t708 - t1448;
t660 = -t1192 * t804 - t1196 * t773 + t1424;
t659 = t1193 * t879 + t1197 * t663;
t658 = t1193 * t663 - t1197 * t879;
t657 = -t1193 * t706 + t1197 * t701 - t1412;
t656 = t1193 * t708 + t1197 * t711 - t1446;
t655 = qJ(5) * t681 + (t1230 - t1300) * t772;
t654 = -t1192 * t680 + t1196 * t681;
t653 = t1192 * t681 + t1196 * t680;
t652 = t1193 * t701 + t1197 * t706 + t1404;
t651 = t1193 * t772 + t1197 * t654;
t650 = t1193 * t654 - t1197 * t772;
t649 = -t1192 * t721 - t1196 * t712 + t1424;
t648 = -t1192 * t679 + t1196 * t682 - t1393;
t647 = -pkin(3) * t662 - pkin(4) * t696;
t646 = -pkin(7) * t714 - t1194 * t678 + t1198 * t698;
t645 = -t1192 * t720 - t1196 * t710 + t1454;
t644 = -t1193 * t687 + t1197 * t667 - t1412;
t643 = -t1193 * t684 + t1197 * t666 + t1448;
t642 = t1193 * t667 + t1197 * t687 + t1404;
t641 = t1193 * t666 + t1197 * t684 + t1446;
t640 = -t1192 * t669 + t1196 * t670 - t1393;
t639 = -t1193 * t729 + t1197 * t648 - t1413;
t638 = -pkin(9) * t662 - qJ(5) * t1282 - t1192 * t683;
t637 = -t1194 * t658 + t1198 * t659;
t636 = t1194 * t659 + t1198 * t658;
t635 = t1193 * t648 + t1197 * t729 + t1405;
t634 = -t1192 * t682 - t1196 * t679 + t1423;
t633 = -pkin(3) * t653 - pkin(4) * t680 - pkin(5) * t735 - qJ(6) * t734;
t632 = -t1194 * t656 + t1198 * t661 - t1455;
t631 = -t1193 * t709 + t1197 * t640 - t1413;
t630 = -t1192 * t670 - t1196 * t669 + t1423;
t629 = -t1194 * t652 + t1198 * t657 - t1426;
t628 = t1193 * t640 + t1197 * t709 + t1405;
t627 = -t1194 * t650 + t1198 * t651;
t626 = t1194 * t651 + t1198 * t650;
t625 = t1195 * t662 + t1199 * t637;
t624 = t1195 * t637 - t1199 * t662;
t623 = -pkin(9) * t653 - t1192 * t655 + t1196 * t664;
t622 = -t1194 * t642 + t1198 * t644 - t1426;
t621 = -t1194 * t641 + t1198 * t643 + t1455;
t620 = t1195 * t653 + t1199 * t627;
t619 = t1195 * t627 - t1199 * t653;
t618 = -pkin(8) * t658 - t1193 * t647 + t1197 * t638;
t617 = -t1194 * t635 + t1198 * t639 - t1425;
t616 = -pkin(1) * t636 - pkin(2) * t658 + pkin(3) * t879 - pkin(9) * t663 + qJ(5) * t1287 - t1196 * t683;
t615 = -pkin(2) * t662 + pkin(8) * t659 + t1193 * t638 + t1197 * t647;
t614 = -t1194 * t628 + t1198 * t631 - t1425;
t613 = -pkin(8) * t650 - t1193 * t633 + t1197 * t623;
t612 = -pkin(1) * t626 - pkin(2) * t650 + pkin(3) * t772 - pkin(9) * t654 - t1192 * t664 - t1196 * t655;
t611 = -pkin(2) * t653 + pkin(8) * t651 + t1193 * t623 + t1197 * t633;
t610 = -pkin(7) * t636 - t1194 * t615 + t1198 * t618;
t609 = -pkin(7) * t626 - t1194 * t611 + t1198 * t613;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1164, -t1165, 0, t1127, 0, 0, 0, 0, 0, 0, t1106, t1107, t1121, t1048, 0, 0, 0, 0, 0, 0, t944, t948, t886, t847, 0, 0, 0, 0, 0, 0, t782, t788, t771, t686, 0, 0, 0, 0, 0, 0, t1418, -t694, t1417, t625, 0, 0, 0, 0, 0, 0, t1418, t1417, t694, t620; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1165, -t1164, 0, t1126, 0, 0, 0, 0, 0, 0, t1104, t1105, t1120, t1047, 0, 0, 0, 0, 0, 0, t943, t947, t885, t846, 0, 0, 0, 0, 0, 0, t781, t787, t770, t685, 0, 0, 0, 0, 0, 0, t1420, -t692, t1419, t624, 0, 0, 0, 0, 0, 0, t1420, t1419, t692, t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1128, t1129, 0, -t1082, 0, 0, 0, 0, 0, 0, t979, t997, t907, t865, 0, 0, 0, 0, 0, 0, t815, t821, t802, t714, 0, 0, 0, 0, 0, 0, t1398, t725, t1400, t636, 0, 0, 0, 0, 0, 0, t1398, t1400, -t725, t626; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1165, 0, -t1164, 0, t1223, -t1147, -t1126, -pkin(6) * t1126, t1138 * t1199 - t1225, t1116 * t1199 - t1167 * t1195, t1132 * t1199 + t1194 * t1244, t1137 * t1199 + t1225, t1130 * t1199 + t1183 * t1195, qJDD(2) * t1195 + t1156 * t1199, -pkin(6) * t1104 - t1090 * t1195 + t1097 * t1199, -pkin(6) * t1105 - t1091 * t1195 + t1098 * t1199, -pkin(6) * t1120 + t1082 * t1199, -pkin(6) * t1047 - (pkin(1) * t1195 - pkin(7) * t1199) * t1082, t1199 * t986 + t1233, -t1114 * t1195 + t1199 * t908, t1005 * t1199 - t1059 * t1195, t1199 * t985 - t1233, t1006 * t1199 - t1055 * t1195, t1199 * t1026 + t1195 * t1242, -pkin(6) * t943 - t1195 * t881 + t1199 * t864, -pkin(6) * t947 - t1195 * t893 + t1199 * t867, -pkin(6) * t885 - t1195 * t868 + t1199 * t759, -pkin(6) * t846 - t1195 * t801 + t1199 * t768, -t1003 * t1195 + t1199 * t871, -t1195 * t915 + t1199 * t813, -t1195 * t987 + t1199 * t826, -t1001 * t1195 + t1199 * t870, -t1195 * t988 + t1199 * t827, -t1029 * t1195 + t1199 * t902, -pkin(6) * t781 - t1195 * t736 + t1199 * t676, -pkin(6) * t787 - t1195 * t738 + t1199 * t677, -pkin(6) * t770 - t1195 * t707 + t1199 * t668, -pkin(6) * t685 - t1195 * t671 + t1199 * t646, t1324, t1449, t1427, t1373, t1450, t1374, -t1195 * t660 + t1199 * t629 - t1437, -t1195 * t665 + t1199 * t632 + t1457, -t1195 * t634 + t1199 * t617 - t1438, -pkin(6) * t624 - t1195 * t616 + t1199 * t610, t1324, t1427, -t1449, t1374, -t1450, t1373, -t1195 * t649 + t1199 * t622 - t1437, -t1195 * t630 + t1199 * t614 - t1438, -t1195 * t645 + t1199 * t621 - t1457, -pkin(6) * t619 - t1195 * t612 + t1199 * t609; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1164, 0, t1165, 0, t1147, t1223, t1127, pkin(6) * t1127, t1138 * t1195 + t1224, t1116 * t1195 + t1167 * t1199, t1132 * t1195 - t1194 * t1243, t1137 * t1195 - t1224, t1130 * t1195 - t1183 * t1199, -qJDD(2) * t1199 + t1156 * t1195, pkin(6) * t1106 + t1090 * t1199 + t1097 * t1195, pkin(6) * t1107 + t1091 * t1199 + t1098 * t1195, pkin(6) * t1121 + t1082 * t1195, pkin(6) * t1048 - (-pkin(1) * t1199 - pkin(7) * t1195) * t1082, t1195 * t986 - t1232, t1114 * t1199 + t1195 * t908, t1005 * t1195 + t1059 * t1199, t1195 * t985 + t1232, t1006 * t1195 + t1055 * t1199, t1195 * t1026 - t1199 * t1242, pkin(6) * t944 + t1195 * t864 + t1199 * t881, pkin(6) * t948 + t1195 * t867 + t1199 * t893, pkin(6) * t886 + t1195 * t759 + t1199 * t868, pkin(6) * t847 + t1195 * t768 + t1199 * t801, t1003 * t1199 + t1195 * t871, t1195 * t813 + t1199 * t915, t1195 * t826 + t1199 * t987, t1001 * t1199 + t1195 * t870, t1195 * t827 + t1199 * t988, t1029 * t1199 + t1195 * t902, pkin(6) * t782 + t1195 * t676 + t1199 * t736, pkin(6) * t788 + t1195 * t677 + t1199 * t738, pkin(6) * t771 + t1195 * t668 + t1199 * t707, pkin(6) * t686 + t1195 * t646 + t1199 * t671, t1330, t1451, t1428, t1378, t1452, t1379, t1195 * t629 + t1199 * t660 + t1439, t1195 * t632 + t1199 * t665 - t1456, t1195 * t617 + t1199 * t634 + t1440, pkin(6) * t625 + t1195 * t610 + t1199 * t616, t1330, t1428, -t1451, t1379, -t1452, t1378, t1195 * t622 + t1199 * t649 + t1439, t1195 * t614 + t1199 * t630 + t1440, t1195 * t621 + t1199 * t645 + t1456, pkin(6) * t620 + t1195 * t609 + t1199 * t612; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1170, t1171, 0, 0, (t1160 + t1231) * t1194, t1159 * t1198 + t1162 * t1194, t1172 * t1198 + t1255, (t1161 - t1239) * t1198, t1174 * t1194 + t1253, 0, pkin(1) * t1162 + pkin(7) * t1131 + t1256, -pkin(1) * t1159 + pkin(7) * t1133 - t1257, pkin(1) * t1166 + pkin(7) * t1163 + t1083, pkin(1) * t1153 + pkin(7) * t1083, t1051 * t1198 + t1052 * t1194, t1194 * t995 + t1198 * t993, t1062 * t1198 + t1064 * t1194, t1049 * t1198 + t1050 * t1194, t1063 * t1198 + t1065 * t1194, t1099 * t1198 + t1100 * t1194, -pkin(1) * t1054 + pkin(7) * t980 + t1007 * t1194 + t1198 * t949, pkin(1) * t1334 + pkin(7) * t998 + t1019 * t1194 + t1198 * t956, -pkin(1) * t1094 + pkin(7) * t909 + t1194 * t876 + t1198 * t869, pkin(1) * t1095 + pkin(7) * t866 - pkin(8) * t1284 + t1198 * t910, t1194 * t953 + t1198 * t951, t1194 * t892 + t1198 * t891, t1194 * t905 + t1198 * t903, t1194 * t952 + t1198 * t950, t1194 * t906 + t1198 * t904, t1194 * t992 + t1198 * t991, -pkin(1) * t966 + pkin(7) * t816 + t1194 * t748 + t1198 * t737, -pkin(1) * t972 + pkin(7) * t822 + t1194 * t754 + t1198 * t739, -pkin(1) * t916 + pkin(7) * t803 + t1194 * t724 + t1198 * t713, -pkin(1) * t799 + pkin(7) * t715 + t1194 * t698 + t1198 * t678, t1307, -t1445, t1415, t1351, -t1444, t1353, t1194 * t657 + t1198 * t652 + t1422, t1194 * t661 + t1198 * t656 - t1453, t1194 * t639 + t1198 * t635 + t1421, -pkin(1) * t662 + pkin(7) * t637 + t1194 * t618 + t1198 * t615, t1307, t1415, t1445, t1353, t1444, t1351, t1194 * t644 + t1198 * t642 + t1422, t1194 * t631 + t1198 * t628 + t1421, t1194 * t643 + t1198 * t641 + t1453, -pkin(1) * t653 + pkin(7) * t627 + t1194 * t613 + t1198 * t611;];
tauB_reg  = t1;
