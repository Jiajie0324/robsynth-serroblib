% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauc_reg [6x30]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPP1_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:46:47
% EndTime: 2019-03-09 20:46:59
% DurationCPUTime: 4.88s
% Computational Cost: add. (11439->439), mult. (27601->567), div. (0->0), fcn. (19738->8), ass. (0->241)
t236 = qJD(2) + qJD(3);
t242 = sin(qJ(3));
t245 = cos(qJ(2));
t343 = cos(qJ(3));
t287 = qJD(1) * t343;
t243 = sin(qJ(2));
t302 = qJD(1) * t243;
t358 = -t242 * t302 + t245 * t287;
t147 = t358 * t236;
t314 = t242 * t245;
t207 = t343 * t243 + t314;
t239 = sin(pkin(10));
t240 = cos(pkin(10));
t241 = sin(qJ(4));
t244 = cos(qJ(4));
t347 = -t239 * t241 + t240 * t244;
t136 = t347 * t207;
t204 = t239 * t244 + t240 * t241;
t188 = t204 * qJD(4);
t356 = -t204 * t358 + t188;
t299 = qJD(4) * t244;
t300 = qJD(4) * t241;
t355 = -t239 * t300 + t240 * t299 - t347 * t358;
t192 = -qJD(1) * t314 - t243 * t287;
t166 = -t241 * t192 - t244 * t236;
t266 = t244 * t192 - t241 * t236;
t108 = t240 * t166 - t239 * t266;
t184 = qJD(4) - t358;
t357 = t184 * t108;
t323 = t358 * t241;
t349 = (t300 - t323) * pkin(4);
t289 = t207 * t299;
t261 = -t242 * t243 + t343 * t245;
t159 = t236 * t261;
t315 = t241 * t159;
t354 = t289 + t315;
t267 = -t239 * t166 - t240 * t266;
t353 = t267 ^ 2;
t298 = qJD(1) * qJD(2);
t352 = -0.2e1 * t298;
t344 = -pkin(8) - pkin(7);
t216 = t344 * t245;
t211 = qJD(1) * t216;
t195 = t242 * t211;
t215 = t344 * t243;
t209 = qJD(1) * t215;
t339 = qJD(2) * pkin(2);
t197 = t209 + t339;
t153 = t343 * t197 + t195;
t131 = -t236 * pkin(3) - t153;
t100 = t166 * pkin(4) + qJD(5) + t131;
t50 = t108 * pkin(5) - qJ(6) * t267 + t100;
t351 = t50 * t267;
t234 = t244 * qJD(5);
t286 = qJD(3) * t343;
t277 = pkin(2) * t286;
t270 = t244 * t277;
t229 = t242 * pkin(2) + pkin(9);
t308 = -qJ(5) - t229;
t279 = qJD(4) * t308;
t158 = t241 * t279 + t234 + t270;
t250 = (-t277 - qJD(5)) * t241 + t244 * t279;
t149 = -t192 * pkin(3) - pkin(9) * t358;
t129 = pkin(2) * t302 + t149;
t125 = t244 * t129;
t157 = t343 * t209 + t195;
t235 = t244 * qJ(5);
t271 = -t192 * pkin(4) - t235 * t358;
t74 = -t241 * t157 + t125 + t271;
t293 = qJ(5) * t323;
t305 = t241 * t129 + t244 * t157;
t82 = -t293 + t305;
t335 = (-t250 + t74) * t240 + (t158 - t82) * t239;
t340 = -qJ(5) - pkin(9);
t283 = qJD(4) * t340;
t182 = t241 * t283 + t234;
t255 = -t241 * qJD(5) + t244 * t283;
t280 = t244 * t149 - t241 * t153;
t77 = t271 + t280;
t306 = t241 * t149 + t244 * t153;
t84 = -t293 + t306;
t330 = (-t255 + t77) * t240 + (t182 - t84) * t239;
t350 = t356 * pkin(5) - t355 * qJ(6) - t204 * qJD(6) + t349;
t196 = t343 * t211;
t156 = t242 * t209 - t196;
t301 = qJD(3) * t242;
t272 = pkin(2) * t301 - t156;
t348 = t343 * t215 + t242 * t216;
t346 = qJD(1) * t207;
t104 = -qJD(4) * t266 + t241 * t147;
t345 = t184 ^ 2;
t342 = t192 * pkin(5);
t341 = t244 * pkin(4);
t103 = t244 * t147 + t192 * t300 + t236 * t299;
t160 = t236 * t207;
t148 = t160 * qJD(1);
t231 = -t245 * pkin(2) - pkin(1);
t214 = t231 * qJD(1);
t126 = -pkin(3) * t358 + t192 * pkin(9) + t214;
t154 = t242 * t197 - t196;
t132 = t236 * pkin(9) + t154;
t86 = t241 * t126 + t244 * t132;
t284 = t243 * t298;
t91 = pkin(2) * t284 + t148 * pkin(3) - t147 * pkin(9);
t89 = t244 * t91;
t291 = qJD(2) * t344;
t274 = qJD(1) * t291;
t198 = t243 * t274;
t199 = t245 * t274;
t94 = t197 * t286 + t343 * t198 + t242 * t199 + t211 * t301;
t251 = -qJD(4) * t86 - t241 * t94 + t89;
t18 = t148 * pkin(4) - t103 * qJ(5) + qJD(5) * t266 + t251;
t259 = t126 * t299 - t132 * t300 + t241 * t91 + t244 * t94;
t22 = -t104 * qJ(5) - t166 * qJD(5) + t259;
t7 = t240 * t18 - t239 * t22;
t8 = t239 * t18 + t240 * t22;
t210 = t243 * t291;
t212 = t245 * t291;
t112 = t348 * qJD(3) + t343 * t210 + t242 * t212;
t152 = -pkin(3) * t261 - t207 * pkin(9) + t231;
t170 = t242 * t215 - t343 * t216;
t163 = t244 * t170;
t265 = -qJ(5) * t159 - qJD(5) * t207;
t295 = t243 * t339;
t99 = t160 * pkin(3) - t159 * pkin(9) + t295;
t97 = t244 * t99;
t24 = t160 * pkin(4) - t241 * t112 + t97 + t265 * t244 + (-t163 + (qJ(5) * t207 - t152) * t241) * qJD(4);
t294 = t244 * t112 + t152 * t299 + t241 * t99;
t33 = -qJ(5) * t289 + (-qJD(4) * t170 + t265) * t241 + t294;
t12 = t239 * t24 + t240 * t33;
t85 = t244 * t126 - t241 * t132;
t71 = qJ(5) * t266 + t85;
t65 = t184 * pkin(4) + t71;
t72 = -t166 * qJ(5) + t86;
t68 = t240 * t72;
t35 = t239 * t65 + t68;
t43 = t239 * t74 + t240 * t82;
t45 = t239 * t77 + t240 * t84;
t141 = t244 * t152;
t83 = -pkin(4) * t261 - t241 * t170 - t207 * t235 + t141;
t304 = t241 * t152 + t163;
t321 = t207 * t241;
t90 = -qJ(5) * t321 + t304;
t52 = t239 * t83 + t240 * t90;
t338 = t239 * t72;
t36 = t239 * t71 + t68;
t337 = t36 * t267;
t336 = -t342 + t335;
t102 = t240 * t158 + t239 * t250;
t181 = t192 * qJ(6);
t38 = -t181 + t43;
t334 = t102 - t38;
t333 = t272 + t350;
t332 = -t154 + t350;
t331 = -t342 + t330;
t128 = t240 * t182 + t239 * t255;
t40 = -t181 + t45;
t329 = t128 - t40;
t328 = t103 * t241;
t327 = t131 * t358;
t326 = t166 * t184;
t325 = t266 * t184;
t324 = t184 * t192;
t322 = t192 * t358;
t320 = t207 * t244;
t316 = t241 * t148;
t313 = t244 * t148;
t312 = t244 * t159;
t247 = qJD(1) ^ 2;
t311 = t245 * t247;
t246 = qJD(2) ^ 2;
t310 = t246 * t243;
t309 = t246 * t245;
t37 = t240 * t71 - t338;
t307 = qJD(6) - t37;
t303 = t243 ^ 2 - t245 ^ 2;
t297 = t148 * qJ(6) + t8;
t296 = t343 * pkin(2);
t292 = -pkin(3) - t341;
t123 = t131 * t299;
t285 = t340 * t241;
t58 = t239 * t103 + t240 * t104;
t282 = t308 * t241;
t281 = pkin(1) * t352;
t278 = t184 * t244;
t95 = t197 * t301 + t242 * t198 - t343 * t199 - t211 * t286;
t4 = -t148 * pkin(5) - t7;
t230 = -t296 - pkin(3);
t200 = t244 * t229 + t235;
t143 = t239 * t200 - t240 * t282;
t144 = t240 * t200 + t239 * t282;
t59 = t240 * t103 - t239 * t104;
t276 = -t102 * t108 + t143 * t59 - t144 * t58;
t213 = t244 * pkin(9) + t235;
t164 = t239 * t213 - t240 * t285;
t165 = t240 * t213 + t239 * t285;
t275 = -t128 * t108 + t164 * t59 - t165 * t58;
t273 = -t86 * t192 + t95 * t241 + t123;
t11 = -t239 * t33 + t240 * t24;
t34 = t240 * t65 - t338;
t51 = -t239 * t90 + t240 * t83;
t269 = -t108 ^ 2 - t353;
t268 = -t229 * t148 - t327;
t264 = pkin(4) * t321 - t348;
t262 = t131 * t300 + t85 * t192 - t95 * t244;
t260 = -t207 * t300 + t312;
t60 = t104 * pkin(4) + t95;
t15 = t58 * pkin(5) - t59 * qJ(6) - qJD(6) * t267 + t60;
t28 = -t184 * pkin(5) + qJD(6) - t34;
t258 = -t15 * t347 - t28 * t192 + t356 * t50;
t29 = t184 * qJ(6) + t35;
t257 = -t15 * t204 + t29 * t192 - t355 * t50;
t256 = t214 * t192 - t95;
t113 = t242 * t210 - t343 * t212 + t215 * t301 - t216 * t286;
t146 = -pkin(5) * t347 - t204 * qJ(6) + t292;
t2 = t184 * qJD(6) + t297;
t254 = t2 * t347 + t4 * t204 + t355 * t28 - t356 * t29;
t253 = -t7 * t204 - t355 * t34 + t347 * t8 - t356 * t35;
t252 = t354 * pkin(4) + t113;
t249 = -t214 * t358 - t94;
t248 = t236 * t346;
t227 = -t240 * pkin(4) - pkin(5);
t225 = t239 * pkin(4) + qJ(6);
t135 = t204 * t207;
t130 = -t296 + t146;
t117 = t192 ^ 2 - t358 ^ 2;
t116 = -t192 * t236 - t248;
t76 = t188 * t207 + t239 * t315 - t240 * t312;
t75 = -qJD(4) * t136 - t159 * t204;
t67 = t135 * pkin(5) - t136 * qJ(6) + t264;
t64 = t184 * t278 - t192 * t266 + t316;
t63 = -t166 * t192 - t345 * t241 + t313;
t56 = -t266 * t278 + t328;
t55 = -pkin(4) * t266 + pkin(5) * t267 + qJ(6) * t108;
t49 = pkin(5) * t261 - t51;
t48 = -qJ(6) * t261 + t52;
t27 = (t103 - t326) * t244 + (-t104 + t325) * t241;
t19 = -t75 * pkin(5) + t76 * qJ(6) - t136 * qJD(6) + t252;
t10 = -t160 * pkin(5) - t11;
t9 = t160 * qJ(6) - qJD(6) * t261 + t12;
t1 = [0, 0, 0, 0.2e1 * t245 * t284, t303 * t352, t309, -t310, 0, -pkin(7) * t309 + t243 * t281, pkin(7) * t310 + t245 * t281, t147 * t207 - t192 * t159, t147 * t261 - t207 * t148 + t159 * t358 + t192 * t160, t159 * t236, -t160 * t236, 0, -t113 * t236 + t231 * t148 + t214 * t160 + (-qJD(1) * t261 - t358) * t295, -t112 * t236 + t231 * t147 + t214 * t159 + (-t192 + t346) * t295, t103 * t320 - t260 * t266 (-t166 * t244 + t241 * t266) * t159 + (-t328 - t104 * t244 + (t166 * t241 + t244 * t266) * qJD(4)) * t207, -t103 * t261 - t160 * t266 + t184 * t260 + t207 * t313, t104 * t261 - t166 * t160 - t354 * t184 - t207 * t316, -t148 * t261 + t184 * t160 (-t170 * t299 + t97) * t184 + t141 * t148 - (-t132 * t299 + t89) * t261 + t85 * t160 + t113 * t166 - t348 * t104 + t207 * t123 + ((-qJD(4) * t152 - t112) * t184 - t170 * t148 - (-qJD(4) * t126 - t94) * t261 + t95 * t207 + t131 * t159) * t241 -(-t170 * t300 + t294) * t184 - t304 * t148 + t259 * t261 - t86 * t160 - t113 * t266 - t348 * t103 + t95 * t320 + t260 * t131, -t12 * t108 - t11 * t267 - t8 * t135 - t7 * t136 + t34 * t76 + t35 * t75 - t51 * t59 - t52 * t58, t100 * t252 + t34 * t11 + t35 * t12 + t264 * t60 + t7 * t51 + t8 * t52, -t10 * t184 + t19 * t108 + t15 * t135 - t49 * t148 - t28 * t160 + t261 * t4 - t50 * t75 + t67 * t58, t10 * t267 - t9 * t108 - t2 * t135 + t4 * t136 - t28 * t76 + t29 * t75 - t48 * t58 + t49 * t59, -t15 * t136 + t48 * t148 + t29 * t160 + t9 * t184 - t19 * t267 - t2 * t261 + t50 * t76 - t67 * t59, t28 * t10 + t15 * t67 + t50 * t19 + t2 * t48 + t29 * t9 + t4 * t49; 0, 0, 0, -t243 * t311, t303 * t247, 0, 0, 0, t247 * pkin(1) * t243, pkin(1) * t311, t322, t117, 0, t116, 0, t156 * t236 + (-t236 * t301 + t302 * t358) * pkin(2) + t256, t157 * t236 + (t192 * t302 - t236 * t286) * pkin(2) + t249, t56, t27, t64, t63, t324, t230 * t104 + t268 * t241 + t272 * t166 + (-t229 * t299 - t125 + (-t277 + t157) * t241) * t184 + t262, t230 * t103 + t268 * t244 - t272 * t266 + (t229 * t300 - t270 + t305) * t184 + t273, t43 * t108 + t267 * t335 + t253 + t276, t8 * t144 - t7 * t143 + t60 * (t230 - t341) + (t102 - t43) * t35 - t335 * t34 + (t349 + t272) * t100, t108 * t333 + t130 * t58 - t143 * t148 - t184 * t336 + t258, t38 * t108 + t267 * t336 + t254 + t276, -t130 * t59 + t144 * t148 + t184 * t334 - t267 * t333 + t257, t15 * t130 + t4 * t143 + t2 * t144 + t28 * t336 + t29 * t334 + t333 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, t117, 0, t116, 0, t154 * t236 + t256, t153 * t236 + t249, t56, t27, t64, t63, t324, -pkin(3) * t104 - t280 * t184 - t154 * t166 - t131 * t323 + (-t184 * t299 - t316) * pkin(9) + t262, -pkin(3) * t103 + t306 * t184 + t154 * t266 - t244 * t327 + (t184 * t300 - t313) * pkin(9) + t273, t45 * t108 + t267 * t330 + t253 + t275, t8 * t165 - t7 * t164 + t60 * t292 + (t128 - t45) * t35 - t330 * t34 + (-t154 + t349) * t100, t108 * t332 + t146 * t58 - t164 * t148 - t184 * t331 + t258, t40 * t108 + t267 * t331 + t254 + t275, -t146 * t59 + t165 * t148 + t184 * t329 - t267 * t332 + t257, t15 * t146 + t4 * t164 + t2 * t165 + t28 * t331 + t29 * t329 + t332 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266 * t166, -t166 ^ 2 + t266 ^ 2, t103 + t326, -t104 - t325, t148, t131 * t266 + t86 * t184 + t251, t131 * t166 + t85 * t184 - t259, t35 * t267 - t337 + (-t239 * t58 - t240 * t59) * pkin(4) + (t37 - t34) * t108, t34 * t36 - t35 * t37 + (t100 * t266 + t239 * t8 + t240 * t7) * pkin(4), -t351 - t55 * t108 + t36 * t184 + (pkin(5) - t227) * t148 + t7, -t225 * t58 + t227 * t59 + t267 * t29 - t337 + (t28 - t307) * t108, -t50 * t108 + t55 * t267 + t225 * t148 + (0.2e1 * qJD(6) - t37) * t184 + t297, t2 * t225 + t4 * t227 - t28 * t36 + t29 * t307 - t50 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, t108 * t35 + t267 * t34 + t60, t184 * t267 + t58, t269, -t59 + t357, t108 * t29 - t267 * t28 + t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108 * t267 - t248, t59 + t357, -t345 - t353, -t29 * t184 + t351 + t4;];
tauc_reg  = t1;
