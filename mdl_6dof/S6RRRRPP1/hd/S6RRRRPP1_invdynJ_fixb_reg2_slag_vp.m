% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:47:03
% EndTime: 2019-03-09 20:47:18
% DurationCPUTime: 10.41s
% Computational Cost: add. (19736->770), mult. (44193->907), div. (0->0), fcn. (32411->14), ass. (0->376)
t329 = sin(pkin(10));
t335 = cos(qJ(4));
t331 = sin(qJ(4));
t511 = cos(pkin(10));
t425 = t511 * t331;
t256 = t329 * t335 + t425;
t240 = t256 * qJD(4);
t336 = cos(qJ(2));
t538 = cos(qJ(3));
t436 = t538 * t336;
t295 = qJD(1) * t436;
t332 = sin(qJ(3));
t333 = sin(qJ(2));
t456 = qJD(1) * t333;
t435 = t332 * t456;
t242 = -t295 + t435;
t556 = t256 * t242 + t240;
t424 = t511 * t335;
t454 = qJD(4) * t331;
t241 = qJD(4) * t424 - t329 * t454;
t474 = t329 * t331;
t548 = t424 - t474;
t555 = t548 * t242 + t241;
t259 = t332 * t336 + t333 * t538;
t244 = t259 * qJD(1);
t448 = qJD(2) + qJD(3);
t416 = t335 * t448;
t210 = t244 * t331 - t416;
t212 = t335 * t244 + t331 * t448;
t143 = t511 * t210 + t212 * t329;
t235 = qJD(4) + t242;
t500 = t143 * t235;
t431 = t538 * qJD(3);
t369 = t538 * qJD(2) + t431;
t426 = qJDD(1) * t538;
t452 = qJD(1) * qJD(2);
t430 = t333 * t452;
t459 = qJD(3) * t435 + t332 * t430;
t344 = t333 * t426 + (qJD(1) * t369 + qJDD(1) * t332) * t336 - t459;
t447 = qJDD(2) + qJDD(3);
t118 = -qJD(4) * t416 + t244 * t454 - t331 * t447 - t335 * t344;
t119 = qJD(4) * t212 + t331 * t344 - t335 * t447;
t75 = -t118 * t511 - t329 * t119;
t44 = t75 + t500;
t376 = -t329 * t210 + t212 * t511;
t558 = t143 * t376;
t429 = t336 * t452;
t450 = t333 * qJDD(1);
t539 = pkin(8) + pkin(7);
t205 = qJDD(2) * pkin(2) + t539 * (-t429 - t450);
t449 = t336 * qJDD(1);
t209 = t539 * (-t430 + t449);
t277 = t539 * t333;
t261 = qJD(1) * t277;
t526 = qJD(2) * pkin(2);
t248 = -t261 + t526;
t278 = t539 * t336;
t263 = qJD(1) * t278;
t455 = qJD(3) * t332;
t414 = -t538 * t205 + t332 * t209 + t248 * t455 + t263 * t431;
t107 = -pkin(3) * t447 + t414;
t328 = qJ(2) + qJ(3);
t323 = cos(t328);
t311 = g(3) * t323;
t557 = t107 + t311;
t246 = t538 * t263;
t196 = -t261 * t332 + t246;
t411 = pkin(2) * t455 - t196;
t322 = sin(t328);
t337 = cos(qJ(1));
t478 = t322 * t337;
t334 = sin(qJ(1));
t479 = t322 * t334;
t554 = g(1) * t478 + g(2) * t479;
t417 = t332 * t448;
t199 = t333 * t417 - t336 * t369;
t453 = qJD(4) * t335;
t434 = t259 * t453;
t379 = -t199 * t331 + t434;
t504 = t376 ^ 2;
t187 = pkin(3) * t244 + pkin(9) * t242;
t169 = pkin(2) * t456 + t187;
t245 = t332 * t263;
t197 = -t261 * t538 - t245;
t127 = t331 * t169 + t335 * t197;
t485 = t242 * t331;
t443 = qJ(5) * t485;
t114 = t443 + t127;
t321 = t335 * qJD(5);
t415 = pkin(2) * t431;
t398 = t335 * t415;
t537 = pkin(2) * t332;
t313 = pkin(9) + t537;
t464 = -qJ(5) - t313;
t419 = qJD(4) * t464;
t198 = t331 * t419 + t321 + t398;
t348 = (-t415 - qJD(5)) * t331 + t335 * t419;
t126 = t335 * t169 - t197 * t331;
t324 = t335 * qJ(5);
t403 = t244 * pkin(4) + t242 * t324;
t96 = t126 + t403;
t520 = (-t348 + t96) * t511 + (-t114 + t198) * t329;
t191 = t248 * t538 - t245;
t128 = t335 * t187 - t191 * t331;
t100 = t128 + t403;
t129 = t331 * t187 + t335 * t191;
t116 = t443 + t129;
t330 = -qJ(5) - pkin(9);
t427 = qJD(4) * t330;
t233 = t331 * t427 + t321;
t370 = -t331 * qJD(5) + t335 * t427;
t514 = (t100 - t370) * t511 + (-t116 + t233) * t329;
t553 = t244 * t448;
t258 = t332 * t333 - t436;
t527 = t336 * pkin(2);
t316 = pkin(1) + t527;
t550 = -pkin(9) * t259 - t316;
t190 = pkin(3) * t258 + t550;
t214 = -t332 * t277 + t278 * t538;
t206 = t335 * t214;
t139 = t331 * t190 + t206;
t552 = -t538 * t277 - t332 * t278;
t325 = qJ(4) + pkin(10);
t320 = cos(t325);
t480 = t320 * t323;
t319 = sin(t325);
t481 = t319 * t323;
t551 = pkin(5) * t480 + qJ(6) * t481;
t408 = t323 * pkin(3) + t322 * pkin(9);
t222 = pkin(4) * t485;
t549 = t222 + t411;
t276 = t316 * qJD(1);
t165 = pkin(3) * t242 - pkin(9) * t244 - t276;
t192 = t332 * t248 + t246;
t172 = pkin(9) * t448 + t192;
t120 = t335 * t165 - t172 * t331;
t121 = t165 * t331 + t172 * t335;
t547 = -t120 * t331 + t121 * t335;
t405 = g(1) * t337 + g(2) * t334;
t137 = t198 * t511 + t329 * t348;
t249 = t313 * t335 + t324;
t423 = t464 * t331;
t181 = t249 * t329 - t423 * t511;
t182 = t249 * t511 + t329 * t423;
t74 = -t118 * t329 + t511 * t119;
t546 = -t137 * t143 + t181 * t75 - t182 * t74;
t168 = t233 * t511 + t329 * t370;
t275 = pkin(9) * t335 + t324;
t207 = t275 * t329 - t330 * t425;
t208 = t275 * t511 + t330 * t474;
t545 = -t168 * t143 + t207 * t75 - t208 * t74;
t317 = pkin(4) * t454;
t544 = pkin(5) * t556 - t555 * qJ(6) - qJD(6) * t256 + t317;
t543 = t311 - t554;
t200 = t448 * t259;
t401 = t332 * t450 - t336 * t426;
t154 = qJD(1) * t200 + t401;
t153 = qJDD(4) + t154;
t52 = t143 * t244 + t153 * t548 - t235 * t556;
t171 = -pkin(3) * t448 - t191;
t135 = t210 * pkin(4) + qJD(5) + t171;
t71 = t143 * pkin(5) - qJ(6) * t376 + t135;
t541 = -t376 * t71 - qJDD(6);
t10 = -t143 * t555 - t256 * t74 - t376 * t556 + t548 * t75;
t540 = t235 ^ 2;
t536 = pkin(2) * t333;
t535 = pkin(5) * t153;
t310 = g(3) * t322;
t531 = g(3) * t336;
t529 = t244 * pkin(5);
t528 = t335 * pkin(4);
t112 = t332 * t205 + t538 * t209 + t248 * t431 - t263 * t455;
t106 = pkin(9) * t447 + t112;
t300 = pkin(2) * t430;
t91 = t300 - (t295 * t448 - t459) * pkin(9) + t154 * pkin(3) + t550 * qJDD(1);
t87 = t335 * t91;
t33 = -qJD(4) * t121 - t106 * t331 + t87;
t21 = pkin(4) * t153 + qJ(5) * t118 - qJD(5) * t212 + t33;
t32 = t335 * t106 + t165 * t453 - t172 * t454 + t331 * t91;
t24 = -qJ(5) * t119 - qJD(5) * t210 + t32;
t7 = t511 * t21 - t329 * t24;
t8 = t329 * t21 + t511 * t24;
t391 = qJ(5) * t199 - qJD(5) * t259;
t445 = t333 * t526;
t134 = pkin(3) * t200 + pkin(9) * t199 + t445;
t437 = qJD(2) * t539;
t262 = t333 * t437;
t264 = t336 * t437;
t147 = qJD(3) * t552 - t538 * t262 - t332 * t264;
t422 = t335 * t134 - t147 * t331;
t35 = pkin(4) * t200 + t391 * t335 + (-t206 + (qJ(5) * t259 - t190) * t331) * qJD(4) + t422;
t440 = t331 * t134 + t335 * t147 + t190 * t453;
t43 = -qJ(5) * t434 + (-qJD(4) * t214 + t391) * t331 + t440;
t17 = t329 * t35 + t511 * t43;
t93 = -qJ(5) * t212 + t120;
t84 = pkin(4) * t235 + t93;
t94 = -qJ(5) * t210 + t121;
t89 = t511 * t94;
t46 = t329 * t84 + t89;
t31 = t32 * t335;
t523 = t329 * t94;
t47 = t329 * t93 + t89;
t522 = t47 * t376;
t58 = t511 * t114 + t329 * t96;
t60 = t329 * t100 + t511 * t116;
t521 = t529 + t520;
t228 = t244 * qJ(6);
t49 = t228 + t58;
t519 = t137 - t49;
t518 = t137 - t58;
t517 = t544 + t549;
t152 = -t222 + t192;
t516 = -t152 + t544;
t515 = t529 + t514;
t54 = t228 + t60;
t513 = t168 - t54;
t512 = t168 - t60;
t510 = pkin(7) * qJDD(1);
t509 = t118 * t331;
t508 = t119 * t335;
t506 = t120 * t335;
t503 = t376 * t235;
t501 = t143 ^ 2;
t498 = t153 * t181;
t497 = t153 * t182;
t496 = t153 * t207;
t495 = t153 * t208;
t493 = t171 * t242;
t491 = t210 * t235;
t490 = t210 * t331;
t489 = t212 * t210;
t488 = t212 * t235;
t487 = t212 * t335;
t486 = t235 * t244;
t484 = t244 * t242;
t483 = t259 * t331;
t482 = t259 * t335;
t314 = pkin(3) + t528;
t272 = t323 * t314;
t477 = t323 * t330;
t476 = t323 * t334;
t475 = t323 * t337;
t472 = t331 * t334;
t471 = t331 * t337;
t469 = t334 * t320;
t468 = t334 * t335;
t467 = t335 * t337;
t466 = t337 * t319;
t465 = t337 * t539;
t48 = t511 * t93 - t523;
t463 = qJD(6) - t48;
t138 = t335 * t190 - t214 * t331;
t115 = pkin(4) * t258 - t259 * t324 + t138;
t125 = -qJ(5) * t483 + t139;
t73 = t329 * t115 + t511 * t125;
t460 = t317 + t549;
t326 = t333 ^ 2;
t327 = t336 ^ 2;
t458 = t326 - t327;
t457 = t326 + t327;
t446 = t538 * pkin(2);
t444 = pkin(9) * qJD(4) * t235;
t442 = t323 * t471;
t340 = qJD(1) ^ 2;
t441 = t333 * t340 * t336;
t439 = g(3) * t481 - t319 * t554;
t438 = g(1) * t475 + g(2) * t476 + t310;
t421 = -t322 * t330 + t272;
t279 = t337 * t316;
t420 = t334 * t539 + t279;
t418 = t235 * t335;
t315 = -t446 - pkin(3);
t413 = t333 * t429;
t412 = -g(1) * t479 + g(2) * t478;
t410 = -t152 + t317;
t215 = t319 * t476 + t320 * t337;
t217 = t323 * t466 - t469;
t407 = -g(1) * t215 + g(2) * t217;
t216 = t323 * t469 - t466;
t218 = t319 * t334 + t320 * t475;
t406 = g(1) * t216 - g(2) * t218;
t404 = g(1) * t334 - g(2) * t337;
t166 = pkin(4) * t483 - t552;
t402 = -pkin(9) * t153 + t493;
t174 = t256 * t259;
t97 = t199 * t256 - t241 * t259;
t400 = -t143 * t97 + t174 * t74;
t397 = t121 * t331 + t506;
t396 = -t501 - t504;
t395 = -t501 + t504;
t393 = -t153 * t313 + t493;
t392 = t314 * t322 + t477;
t390 = -g(3) * t480 + t320 * t554;
t389 = t121 * t244 + t171 * t453 + t331 * t557;
t388 = -t120 * t244 + t171 * t454 + t335 * t554;
t387 = -t121 * t485 - t242 * t506 + t31 - t438;
t386 = t421 + t527;
t385 = pkin(5) * t320 + qJ(6) * t319 + t314;
t384 = t405 * t322;
t383 = t405 * t323;
t382 = -0.2e1 * pkin(1) * t452 - pkin(7) * qJDD(2);
t229 = t323 * t472 + t467;
t381 = t74 + t503;
t380 = -t74 + t503;
t16 = -t329 * t43 + t35 * t511;
t45 = t511 * t84 - t523;
t378 = -t199 * t335 - t259 * t454;
t377 = t143 * t556 - t548 * t74;
t72 = t115 * t511 - t329 * t125;
t372 = g(1) * t217 + g(2) * t215 + t319 * t310 + t7;
t186 = -pkin(5) * t548 - t256 * qJ(6) - t314;
t368 = -t75 + t500;
t367 = pkin(4) * t472 + t314 * t475 - t330 * t478 + t420;
t339 = qJD(2) ^ 2;
t366 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t339 + t404;
t365 = pkin(1) * t340 + t405 - t510;
t364 = g(1) * t218 + g(2) * t216 + t310 * t320 - t8;
t70 = t119 * pkin(4) + qJDD(5) + t107;
t13 = t74 * pkin(5) - t75 * qJ(6) - qJD(6) * t376 + t70;
t39 = qJ(6) * t235 + t46;
t363 = -t13 * t256 - t244 * t39 - t555 * t71 - t439;
t362 = -t276 * t242 - t112 + t438;
t361 = t276 * t244 - t414 - t543;
t175 = t548 * t259;
t98 = t199 * t548 + t240 * t259;
t360 = t143 * t98 - t174 * t75 - t175 * t74 + t376 * t97;
t359 = t47 * t235 + t372;
t358 = -qJD(4) * t397 - t33 * t331;
t357 = t135 * t555 + t244 * t46 + t70 * t256 + t439;
t356 = t143 * t200 + t153 * t174 - t235 * t97 + t258 * t74;
t355 = t465 + t330 * t479 + pkin(4) * t471 + (-t316 - t272) * t334;
t150 = t153 * qJ(6);
t2 = qJD(6) * t235 + t150 + t8;
t38 = -t235 * pkin(5) + qJD(6) - t45;
t4 = qJDD(6) - t7 - t535;
t354 = t2 * t548 + t4 * t256 + t38 * t555 - t39 * t556 - t438;
t353 = -t7 * t256 - t45 * t555 - t46 * t556 + t548 * t8 - t438;
t352 = -t13 * t548 + t244 * t38 + t556 * t71 + t390;
t148 = qJD(3) * t214 - t332 * t262 + t538 * t264;
t351 = t135 * t556 - t244 * t45 - t548 * t70 + t390;
t350 = t358 + t31;
t101 = pkin(4) * t379 + t148;
t346 = -g(1) * (-pkin(3) * t478 + pkin(9) * t475) - g(2) * (-pkin(3) * t479 + pkin(9) * t476) - g(3) * t408;
t343 = -t401 - t553;
t307 = -pkin(4) * t511 - pkin(5);
t305 = pkin(4) * t329 + qJ(6);
t302 = pkin(4) * t468;
t274 = t315 - t528;
t237 = -qJDD(1) * t316 + t300;
t232 = t323 * t467 + t472;
t231 = -t442 + t468;
t230 = -t323 * t468 + t471;
t170 = -t446 + t186;
t156 = -t242 ^ 2 + t244 ^ 2;
t133 = t343 + t553;
t132 = t242 * t448 + t344;
t99 = t153 * t258 + t200 * t235;
t88 = pkin(5) * t174 - qJ(6) * t175 + t166;
t80 = pkin(4) * t212 + pkin(5) * t376 + qJ(6) * t143;
t79 = t153 * t331 - t212 * t244 + t235 * t418;
t78 = t153 * t335 + t210 * t244 - t331 * t540;
t77 = t235 * t490 - t508;
t76 = t212 * t418 - t509;
t69 = -t258 * pkin(5) - t72;
t68 = -qJD(4) * t139 + t422;
t67 = -t214 * t454 + t440;
t66 = qJ(6) * t258 + t73;
t53 = t153 * t256 + t235 * t555 - t244 * t376;
t30 = (-t118 - t491) * t335 + (-t119 - t488) * t331;
t29 = -t97 * pkin(5) + t98 * qJ(6) - t175 * qJD(6) + t101;
t28 = t256 * t75 + t376 * t555;
t25 = t175 * t75 - t376 * t98;
t18 = t153 * t175 + t200 * t376 - t235 * t98 + t258 * t75;
t15 = -t200 * pkin(5) - t16;
t14 = qJ(6) * t200 + qJD(6) * t258 + t17;
t1 = [0, 0, 0, 0, 0, qJDD(1), t404, t405, 0, 0, qJDD(1) * t326 + 0.2e1 * t413, 0.2e1 * t333 * t449 - 0.2e1 * t452 * t458, qJDD(2) * t333 + t336 * t339, qJDD(1) * t327 - 0.2e1 * t413, qJDD(2) * t336 - t333 * t339, 0, t333 * t382 + t336 * t366, -t333 * t366 + t336 * t382, 0.2e1 * t457 * t510 - t405, -g(1) * (-pkin(1) * t334 + pkin(7) * t337) - g(2) * (pkin(1) * t337 + pkin(7) * t334) + (pkin(7) ^ 2 * t457 + pkin(1) ^ 2) * qJDD(1), -t244 * t199 + t259 * t344, -t259 * t154 + t199 * t242 - t244 * t200 - t258 * t344, -t199 * t448 + t259 * t447, t154 * t258 + t200 * t242, -t200 * t448 - t258 * t447, 0, -t148 * t448 - t316 * t154 - t276 * t200 + t237 * t258 + t242 * t445 + t323 * t404 + t447 * t552, -t147 * t448 + t276 * t199 - t214 * t447 + t237 * t259 + t244 * t445 - t316 * t344 + t412, -t112 * t258 - t147 * t242 + t148 * t244 - t214 * t154 + t191 * t199 - t192 * t200 + t259 * t414 - t344 * t552 - t405, t112 * t214 + t192 * t147 - t414 * t552 - t191 * t148 - t237 * t316 - t276 * t445 - g(1) * (-t316 * t334 + t465) - g(2) * t420, -t118 * t482 + t212 * t378 (t210 * t335 + t212 * t331) * t199 + (t509 - t508 + (-t487 + t490) * qJD(4)) * t259, -t118 * t258 + t153 * t482 + t200 * t212 + t235 * t378, t119 * t483 + t210 * t379, -t119 * t258 - t153 * t483 - t200 * t210 - t235 * t379, t99, -g(1) * t230 - g(2) * t232 + t107 * t483 - t119 * t552 + t120 * t200 + t138 * t153 + t148 * t210 + t171 * t379 + t235 * t68 + t258 * t33, -g(1) * t229 - g(2) * t231 + t107 * t482 + t118 * t552 - t121 * t200 - t139 * t153 + t148 * t212 + t171 * t378 - t235 * t67 - t258 * t32, t118 * t138 - t119 * t139 - t210 * t67 - t212 * t68 + t397 * t199 + (-qJD(4) * t547 - t32 * t331 - t33 * t335) * t259 - t412, -g(2) * t279 - t107 * t552 + t120 * t68 + t121 * t67 + t33 * t138 + t32 * t139 + t171 * t148 + (-g(1) * t539 - g(2) * t408) * t337 + (-g(1) * (-t316 - t408) - g(2) * t539) * t334, t25, t360, t18, t400, -t356, t99, t101 * t143 - t135 * t97 + t153 * t72 + t16 * t235 + t166 * t74 + t174 * t70 + t200 * t45 + t258 * t7 + t406, t101 * t376 - t135 * t98 - t153 * t73 + t166 * t75 - t17 * t235 + t175 * t70 - t200 * t46 - t258 * t8 + t407, -t143 * t17 - t16 * t376 - t174 * t8 - t175 * t7 + t45 * t98 + t46 * t97 - t72 * t75 - t73 * t74 - t412, -g(1) * t355 - g(2) * t367 + t135 * t101 + t45 * t16 + t70 * t166 + t46 * t17 + t7 * t72 + t8 * t73, t25, t18, -t360, t99, t356, t400, t13 * t174 + t143 * t29 - t15 * t235 - t153 * t69 - t200 * t38 - t258 * t4 - t71 * t97 + t74 * t88 + t406, -t14 * t143 + t15 * t376 - t174 * t2 + t175 * t4 - t38 * t98 + t39 * t97 - t66 * t74 + t69 * t75 - t412, -t13 * t175 + t14 * t235 + t153 * t66 + t2 * t258 + t200 * t39 - t29 * t376 + t71 * t98 - t75 * t88 - t407, t2 * t66 + t39 * t14 + t13 * t88 + t71 * t29 + t4 * t69 + t38 * t15 - g(1) * (-pkin(5) * t216 - qJ(6) * t215 + t355) - g(2) * (pkin(5) * t218 + qJ(6) * t217 + t367); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, t458 * t340, t450, t441, t449, qJDD(2), t333 * t365 - t531, g(3) * t333 + t336 * t365, 0, 0, t484, t156, t132, -t484, t133, t447, t196 * t448 + (-qJD(3) * t417 - t242 * t456 + t447 * t538) * pkin(2) + t361, t197 * t448 + (-t244 * t456 - t332 * t447 - t431 * t448) * pkin(2) + t362, -t154 * t537 - t344 * t446 + (t192 + t411) * t244 + (-t191 + t197 - t415) * t242, t191 * t196 - t192 * t197 + (-t538 * t414 - t531 + t112 * t332 + (-t191 * t332 + t192 * t538) * qJD(3) + (qJD(1) * t276 + t405) * t333) * pkin(2), t76, t30, t79, t77, t78, -t486, t315 * t119 - t557 * t335 + t393 * t331 + t411 * t210 + (-t313 * t453 - t331 * t415 - t126) * t235 + t388, -t315 * t118 + t393 * t335 - t331 * t384 + t411 * t212 + (t313 * t454 + t127 - t398) * t235 + t389, t126 * t212 + t127 * t210 + (-t210 * t415 - t119 * t313 + (t212 * t313 - t120) * qJD(4)) * t335 + (t212 * t415 - t118 * t313 - t33 + (t210 * t313 - t121) * qJD(4)) * t331 + t387, t107 * t315 - t121 * t127 - t120 * t126 - t171 * t196 + (-t531 + t405 * t333 + (t171 * t332 + t538 * t547) * qJD(3)) * pkin(2) + t350 * t313 + t346, t28, t10, t53, t377, t52, -t486, t143 * t460 - t235 * t520 + t274 * t74 + t351 - t498, -t235 * t518 + t274 * t75 + t376 * t460 + t357 - t497, t143 * t58 + t376 * t520 + t353 + t546, -g(3) * t386 + t135 * t460 - t7 * t181 + t8 * t182 + t70 * t274 - t45 * t520 + t46 * t518 + t405 * (t392 + t536) t28, t53, -t10, -t486, -t52, t377, t143 * t517 + t170 * t74 - t235 * t521 + t352 - t498, t143 * t49 + t376 * t521 + t354 + t546, -t170 * t75 + t235 * t519 - t376 * t517 + t363 + t497, t2 * t182 + t13 * t170 + t4 * t181 - g(3) * (t386 + t551) + t517 * t71 + t519 * t39 + t521 * t38 + t405 * (t322 * t385 + t477 + t536); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t484, t156, t132, -t484, t133, t447, t192 * t448 + t361, t191 * t448 + t362, 0, 0, t76, t30, t79, t77, t78, -t486, -pkin(3) * t119 - t128 * t235 - t192 * t210 + t402 * t331 + (-t557 - t444) * t335 + t388, pkin(3) * t118 + t129 * t235 - t192 * t212 + t402 * t335 + (-t384 + t444) * t331 + t389, t128 * t212 + t129 * t210 + (-t509 - t508 + (t487 + t490) * qJD(4)) * pkin(9) + t358 + t387, -t107 * pkin(3) + pkin(9) * t350 - t120 * t128 - t121 * t129 - t171 * t192 + t346, t28, t10, t53, t377, t52, -t486, t143 * t410 - t235 * t514 - t314 * t74 + t351 - t496, -t235 * t512 - t314 * t75 + t376 * t410 + t357 - t495, t143 * t60 + t376 * t514 + t353 + t545, -g(3) * t421 + t135 * t410 - t7 * t207 + t8 * t208 - t70 * t314 + t392 * t405 - t45 * t514 + t46 * t512, t28, t53, -t10, -t486, -t52, t377, t143 * t516 + t186 * t74 - t235 * t515 + t352 - t496, t143 * t54 + t376 * t515 + t354 + t545, -t186 * t75 + t235 * t513 - t376 * t516 + t363 + t495, t2 * t208 + t13 * t186 + t4 * t207 - g(3) * (t272 + t551) + t516 * t71 + t513 * t39 + t515 * t38 + t330 * t383 + (g(3) * t330 + t385 * t405) * t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t489, -t210 ^ 2 + t212 ^ 2, -t118 + t491, -t489, -t119 + t488, t153, -t172 * t453 - g(1) * t231 + g(2) * t229 + t121 * t235 - t171 * t212 + t87 + (-qJD(4) * t165 - t106 + t310) * t331, g(1) * t232 - g(2) * t230 + t120 * t235 + t171 * t210 + t310 * t335 - t32, 0, 0, t558, t395, t44, -t558, t380, t153, -t135 * t376 + (-t143 * t212 + t153 * t511) * pkin(4) + t359, t135 * t143 + t235 * t48 + (-t153 * t329 - t212 * t376) * pkin(4) + t364, t46 * t376 - t522 + (-t329 * t74 - t511 * t75) * pkin(4) + (t48 - t45) * t143, -g(1) * t302 + t45 * t47 - t46 * t48 + (g(2) * t467 + t7 * t511 - t135 * t212 + t8 * t329 + (t383 + t310) * t331) * pkin(4), t558, t44, -t395, t153, -t380, -t558, -t143 * t80 + (pkin(5) - t307) * t153 + t359 + t541, -t305 * t74 + t307 * t75 + t376 * t39 - t522 + (t38 - t463) * t143, -t143 * t71 + t376 * t80 + t153 * t305 + t150 + (0.2e1 * qJD(6) - t48) * t235 - t364, t2 * t305 + t4 * t307 - t71 * t80 - t38 * t47 - g(1) * (-pkin(4) * t442 - pkin(5) * t217 + qJ(6) * t218 + t302) - g(2) * (-pkin(4) * t229 - pkin(5) * t215 + qJ(6) * t216) + t463 * t39 - (-pkin(4) * t331 - pkin(5) * t319 + qJ(6) * t320) * t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t381, -t368, t396, t143 * t46 + t376 * t45 + t543 + t70, 0, 0, 0, 0, 0, 0, t381, t396, t368, t143 * t39 - t376 * t38 + t13 + t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(4) + t343 + t558, t44, -t540 - t504, -t235 * t39 - t372 - t535 - t541;];
tau_reg  = t1;
