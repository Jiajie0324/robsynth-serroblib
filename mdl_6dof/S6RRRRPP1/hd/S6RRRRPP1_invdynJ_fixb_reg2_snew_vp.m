% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:00
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPP1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:57:03
% EndTime: 2019-05-07 17:57:41
% DurationCPUTime: 19.67s
% Computational Cost: add. (70734->584), mult. (143677->763), div. (0->0), fcn. (105935->10), ass. (0->384)
t380 = cos(pkin(10));
t383 = sin(qJ(2));
t385 = cos(qJ(3));
t382 = sin(qJ(3));
t386 = cos(qJ(2));
t459 = t382 * t386;
t356 = (t383 * t385 + t459) * qJD(1);
t371 = t383 * qJDD(1);
t446 = qJD(1) * qJD(2);
t434 = t386 * t446;
t361 = t371 + t434;
t372 = t386 * qJDD(1);
t435 = t383 * t446;
t362 = t372 - t435;
t426 = t382 * t361 - t385 * t362;
t320 = -qJD(3) * t356 - t426;
t319 = qJDD(4) - t320;
t376 = qJD(2) + qJD(3);
t381 = sin(qJ(4));
t384 = cos(qJ(4));
t340 = t356 * t381 - t384 * t376;
t341 = t356 * t384 + t376 * t381;
t379 = sin(pkin(10));
t309 = t380 * t340 + t341 * t379;
t311 = -t340 * t379 + t341 * t380;
t471 = t311 * t309;
t233 = -t471 - t319;
t478 = t233 * t379;
t308 = t311 ^ 2;
t453 = qJD(1) * t383;
t354 = -t385 * t386 * qJD(1) + t382 * t453;
t351 = qJD(4) + t354;
t506 = t351 ^ 2;
t521 = -t308 - t506;
t159 = -t380 * t521 - t478;
t477 = t233 * t380;
t161 = t379 * t521 - t477;
t102 = t159 * t384 + t161 * t381;
t114 = t159 * t381 - t161 * t384;
t411 = t385 * t361 + t382 * t362;
t321 = -qJD(3) * t354 + t411;
t445 = qJDD(2) + qJDD(3);
t401 = -t384 * t321 - t381 * t445;
t276 = -t340 * qJD(4) - t401;
t400 = -t381 * t321 + t384 * t445;
t396 = -t341 * qJD(4) + t400;
t390 = t380 * t276 + t379 * t396;
t472 = t309 * t351;
t517 = t390 - t472;
t89 = t114 * t382 - t385 * t517;
t91 = t114 * t385 + t382 * t517;
t608 = -pkin(1) * t102 + pkin(7) * (t383 * t89 - t386 * t91);
t607 = pkin(2) * t89;
t606 = pkin(8) * t89;
t605 = -pkin(2) * t102 - pkin(8) * t91;
t508 = t309 ^ 2;
t282 = t508 - t506;
t196 = -t282 * t379 + t477;
t200 = -t282 * t380 - t478;
t142 = t196 * t381 - t200 * t384;
t288 = t351 * t311;
t428 = t276 * t379 - t380 * t396;
t188 = -t428 + t288;
t603 = t383 * (t142 * t385 + t188 * t382) + t386 * (t142 * t382 - t188 * t385);
t600 = pkin(3) * t102;
t599 = pkin(9) * t102;
t598 = pkin(3) * t517 - pkin(9) * t114;
t520 = t308 - t508;
t523 = t288 + t428;
t129 = -t523 * t379 + t380 * t517;
t480 = t517 * t379;
t133 = -t523 * t380 - t480;
t74 = -t129 * t381 + t133 * t384;
t595 = t383 * (t382 * t520 + t385 * t74) + t386 * (t382 * t74 - t385 * t520);
t214 = -t508 - t308;
t515 = t472 + t390;
t547 = t188 * t380 + t515 * t379;
t548 = t188 * t379 - t380 * t515;
t562 = -t381 * t548 + t384 * t547;
t577 = -t214 * t385 + t382 * t562;
t592 = pkin(2) * t577;
t591 = pkin(4) * t159;
t590 = pkin(8) * t577;
t589 = qJ(5) * t159;
t588 = qJ(5) * t161;
t561 = t381 * t547 + t384 * t548;
t576 = t214 * t382 + t385 * t562;
t587 = -pkin(2) * t561 + pkin(8) * t576;
t137 = t196 * t384 + t200 * t381;
t586 = pkin(7) * (-t383 * t577 + t386 * t576) - pkin(1) * t561;
t516 = -t471 + t319;
t476 = t516 * t379;
t514 = -t506 - t508;
t526 = t380 * t514 - t476;
t225 = t380 * t516;
t527 = t379 * t514 + t225;
t546 = -t381 * t527 + t384 * t526;
t564 = t382 * t546 - t385 * t523;
t583 = pkin(2) * t564;
t582 = pkin(3) * t561;
t581 = pkin(8) * t564;
t580 = pkin(9) * t561;
t545 = t381 * t526 + t384 * t527;
t563 = t382 * t523 + t385 * t546;
t579 = -pkin(2) * t545 + pkin(8) * t563;
t578 = -pkin(3) * t214 + pkin(9) * t562;
t70 = t129 * t384 + t133 * t381;
t575 = pkin(7) * (-t383 * t564 + t386 * t563) - pkin(1) * t545;
t283 = -t308 + t506;
t549 = t380 * t283 + t476;
t550 = -t283 * t379 + t225;
t559 = -t381 * t549 + t384 * t550;
t574 = t383 * (t382 * t515 + t385 * t559) + t386 * (t382 * t559 - t385 * t515);
t571 = pkin(3) * t545;
t499 = pkin(4) * t548;
t570 = pkin(9) * t545;
t569 = qJ(5) * t548;
t566 = -pkin(3) * t523 + pkin(9) * t546;
t565 = -pkin(4) * t214 + qJ(5) * t547;
t560 = t381 * t550 + t384 * t549;
t498 = pkin(4) * t527;
t556 = qJ(5) * t526;
t555 = qJ(5) * t527;
t542 = qJ(6) * t517;
t316 = t341 * t340;
t519 = -t316 + t319;
t539 = t381 * t519;
t335 = t356 * t354;
t518 = -t335 + t445;
t536 = t382 * t518;
t533 = t384 * t519;
t530 = t385 * t518;
t443 = t385 * t471;
t444 = t382 * t471;
t464 = t351 * t380;
t442 = t309 * t464;
t409 = t379 * t428 + t442;
t465 = t351 * t379;
t416 = t309 * t465 - t380 * t428;
t510 = -t381 * t416 + t384 * t409;
t525 = t383 * (t385 * t510 - t444) + t386 * (t382 * t510 + t443);
t315 = t385 * t319;
t470 = t319 * t382;
t407 = (-t309 * t379 - t311 * t380) * t351;
t279 = t311 * t465;
t415 = t279 - t442;
t511 = -t381 * t407 + t384 * t415;
t524 = t383 * (t385 * t511 + t470) + t386 * (t382 * t511 - t315);
t348 = t376 * t354;
t297 = t321 - t348;
t378 = t386 ^ 2;
t501 = sin(qJ(1));
t502 = cos(qJ(1));
t417 = g(1) * t501 - t502 * g(2);
t403 = qJDD(1) * pkin(1) + t417;
t504 = qJD(1) ^ 2;
t323 = (pkin(8) * t378 + pkin(7)) * t504 + t362 * pkin(2) - (qJD(2) * pkin(2) - pkin(8) * t453) * t453 + t403;
t206 = -t297 * pkin(9) + (t356 * t376 - t320) * pkin(3) - t323;
t405 = g(1) * t502 + g(2) * t501;
t488 = qJDD(1) * pkin(7);
t397 = -t405 + t488;
t394 = -pkin(1) * t504 + t397;
t393 = t383 * t394;
t496 = t361 * pkin(8);
t414 = qJDD(2) * pkin(2) - t496;
t387 = qJD(2) ^ 2;
t493 = pkin(8) * qJD(2);
t495 = t383 * g(3);
t314 = t386 * t397 - t495 + t362 * pkin(8) - t387 * pkin(2) + (t383 * t493 + (-pkin(1) * t386 - pkin(2) * t378) * qJD(1)) * qJD(1);
t457 = t385 * t314;
t266 = t457 + t382 * (-t393 + t414) + (-g(3) + (pkin(2) * t453 + t493) * qJD(1)) * t459;
t332 = pkin(3) * t354 - pkin(9) * t356;
t505 = t376 ^ 2;
t224 = -pkin(3) * t505 + pkin(9) * t445 - t354 * t332 + t266;
t145 = -t384 * t206 + t381 * t224;
t146 = t381 * t206 + t384 * t224;
t95 = t381 * t145 + t384 * t146;
t452 = qJD(5) * t309;
t302 = -0.2e1 * t452;
t450 = qJD(6) * t351;
t522 = t302 + 0.2e1 * t450;
t327 = t351 * t340;
t256 = t327 + t276;
t258 = pkin(5) * t309 - qJ(6) * t311;
t108 = pkin(4) * t519 - qJ(5) * t256 - t145;
t324 = pkin(4) * t351 - qJ(5) * t341;
t507 = t340 ^ 2;
t117 = -pkin(4) * t507 + qJ(5) * t396 - t351 * t324 + t146;
t455 = t379 * t108 + t380 * t117;
t419 = -t319 * qJ(6) + t309 * t258 - t455;
t513 = t591 - pkin(5) * (t521 + t506) - qJ(6) * t233 - t419;
t252 = (qJD(4) - t351) * t341 - t400;
t512 = t381 * t415 + t384 * t407;
t509 = t381 * t409 + t384 * t416;
t338 = t341 ^ 2;
t352 = t354 ^ 2;
t353 = t356 ^ 2;
t429 = -t380 * t108 + t379 * t117;
t451 = qJD(5) * t311;
t62 = t429 + 0.2e1 * t451;
t63 = t302 + t455;
t37 = t379 * t63 - t380 * t62;
t503 = pkin(4) * t37;
t500 = pkin(3) * t382;
t497 = pkin(5) * t380;
t494 = t386 * g(3);
t492 = t37 * t381;
t491 = t37 * t384;
t265 = t382 * t314 - t385 * (-t383 * t397 - t494 + (t386 * t493 + (t386 * pkin(2) + pkin(1)) * t453) * qJD(1) + t414);
t223 = -t445 * pkin(3) - t505 * pkin(9) + t356 * t332 + t265;
t490 = -pkin(3) * t223 + pkin(9) * t95;
t489 = qJ(6) * t380;
t148 = -t396 * pkin(4) - t507 * qJ(5) + t341 * t324 + qJDD(5) + t223;
t487 = t148 * t379;
t486 = t148 * t380;
t202 = -t265 * t385 + t266 * t382;
t479 = t202 * t383;
t268 = t316 + t319;
t475 = t268 * t381;
t474 = t268 * t384;
t469 = t323 * t382;
t468 = t323 * t385;
t330 = t335 + t445;
t467 = t330 * t382;
t466 = t330 * t385;
t463 = t351 * t381;
t462 = t351 * t384;
t461 = t376 * t382;
t460 = t376 * t385;
t219 = t381 * t223;
t367 = t386 * t504 * t383;
t364 = qJDD(2) + t367;
t458 = t383 * t364;
t220 = t384 * t223;
t456 = t386 * (qJDD(2) - t367);
t449 = qJD(3) + t376;
t447 = qJD(4) + t351;
t441 = t382 * t316;
t440 = t385 * t316;
t305 = -t338 - t506;
t228 = -t305 * t381 - t474;
t257 = t340 * t447 + t401;
t439 = pkin(3) * t257 + pkin(9) * t228 + t219;
t292 = -t506 - t507;
t218 = t292 * t384 - t539;
t253 = -t341 * t447 + t400;
t438 = pkin(3) * t253 + pkin(9) * t218 - t220;
t437 = -pkin(3) * t385 - pkin(2);
t410 = -t419 + t522;
t55 = -pkin(5) * t506 + t410;
t404 = -t319 * pkin(5) - qJ(6) * t506 + qJDD(6) + t429;
t425 = (0.2e1 * qJD(5) + t258) * t311;
t56 = t425 + t404;
t30 = t379 * t55 - t380 * t56;
t31 = t379 * t56 + t380 * t55;
t11 = -t30 * t381 + t31 * t384;
t432 = -qJ(6) * t379 - pkin(4);
t389 = t428 * pkin(5) + t148 - t542;
t79 = t389 + (pkin(5) * t351 - 0.2e1 * qJD(6)) * t311;
t13 = qJ(5) * t31 + (t432 - t497) * t79;
t20 = -qJ(5) * t30 + (pkin(5) * t379 - t489) * t79;
t433 = -pkin(3) * t79 + pkin(9) * t11 + t384 * t13 + t381 * t20;
t38 = t379 * t62 + t380 * t63;
t52 = (-t214 - t506) * pkin(5) + t410;
t53 = -qJ(6) * t214 + t56;
t24 = t379 * t53 + t380 * t52 + t565;
t26 = -t379 * t52 + t380 * t53 - t569;
t431 = t384 * t24 + t381 * t26 + t578;
t28 = t38 + t565;
t32 = -t37 - t569;
t430 = t384 * t28 + t381 * t32 + t578;
t203 = t265 * t382 + t385 * t266;
t343 = t393 + t494;
t344 = t386 * t394 - t495;
t427 = t383 * t343 + t386 * t344;
t388 = 0.2e1 * qJD(6) * t311 - t389;
t64 = -pkin(5) * t288 + t388 + t542;
t44 = t588 + t379 * t64 + (pkin(4) + t497) * t517;
t49 = -pkin(5) * t480 + t380 * t64 - t589;
t424 = t381 * t49 + t384 * t44 + t598;
t65 = (-t523 - t288) * pkin(5) + t388;
t47 = t380 * t65 + t432 * t523 + t556;
t51 = -t379 * t65 - t489 * t523 - t555;
t423 = t381 * t51 + t384 * t47 + t566;
t80 = -pkin(4) * t523 - t486 + t556;
t97 = t487 - t555;
t422 = t381 * t97 + t384 * t80 + t566;
t84 = -pkin(4) * t517 + t487 - t588;
t99 = t486 + t589;
t421 = t381 * t99 + t384 * t84 - t598;
t173 = -t252 * t384 + t256 * t381;
t280 = t338 + t507;
t420 = pkin(3) * t280 + pkin(9) * t173 + t95;
t418 = -t455 - t591;
t412 = -t145 * t384 + t146 * t381;
t18 = t38 * t384 - t492;
t34 = -pkin(4) * t148 + qJ(5) * t38;
t408 = -pkin(3) * t148 + pkin(9) * t18 - qJ(5) * t492 + t384 * t34;
t406 = pkin(4) * t30 - pkin(5) * t56 + qJ(6) * t55;
t402 = -pkin(5) * t515 + qJ(6) * t188 + t499;
t399 = (-qJD(3) + t376) * t356 - t426;
t178 = t311 * t464 + t379 * t390;
t179 = t380 * t390 - t279;
t126 = -t178 * t381 + t179 * t384;
t392 = t383 * (t385 * t126 + t444) + t386 * (t382 * t126 - t443);
t391 = -pkin(5) * t516 - qJ(6) * t514 + t404 - t498;
t377 = t383 ^ 2;
t374 = t378 * t504;
t373 = t377 * t504;
t363 = t372 - 0.2e1 * t435;
t360 = t371 + 0.2e1 * t434;
t357 = pkin(7) * t504 + t403;
t346 = -t353 + t505;
t345 = t352 - t505;
t342 = -t353 - t505;
t334 = t353 - t352;
t328 = -t505 - t352;
t326 = -t338 + t506;
t325 = -t506 + t507;
t322 = -t352 - t353;
t313 = -t338 + t507;
t304 = -0.2e1 * t451;
t303 = 0.2e1 * t452;
t300 = -t342 * t382 - t466;
t299 = t342 * t385 - t467;
t298 = t321 + t348;
t296 = -t354 * t449 + t411;
t293 = t356 * t449 + t426;
t286 = t328 * t385 - t536;
t285 = t328 * t382 + t530;
t273 = (-t340 * t384 + t341 * t381) * t351;
t272 = (-t340 * t381 - t341 * t384) * t351;
t255 = -t327 + t276;
t249 = t276 * t384 - t341 * t463;
t248 = t276 * t381 + t341 * t462;
t247 = t340 * t462 - t381 * t396;
t246 = t340 * t463 + t384 * t396;
t243 = t298 * t382 + t385 * t399;
t242 = -t298 * t385 + t382 * t399;
t241 = t325 * t384 - t475;
t240 = -t326 * t381 + t533;
t239 = t325 * t381 + t474;
t238 = t326 * t384 + t539;
t227 = t305 * t384 - t475;
t217 = t292 * t381 + t533;
t172 = t253 * t384 - t255 * t381;
t171 = -t252 * t381 - t256 * t384;
t170 = t253 * t381 + t255 * t384;
t164 = t228 * t385 - t257 * t382;
t163 = t228 * t382 + t257 * t385;
t158 = t218 * t385 - t253 * t382;
t157 = t218 * t382 + t253 * t385;
t152 = -pkin(9) * t227 + t220;
t151 = t173 * t385 - t280 * t382;
t150 = t173 * t382 + t280 * t385;
t149 = -pkin(9) * t217 + t219;
t123 = t178 * t384 + t179 * t381;
t120 = -pkin(3) * t227 + t146;
t116 = -pkin(3) * t217 + t145;
t81 = -t223 * t385 + t382 * t95;
t76 = -pkin(9) * t171 - t412;
t54 = -t499 - t582;
t45 = t302 - t418 + t600;
t42 = -t402 - t582;
t41 = -t381 * t84 + t384 * t99 + t599;
t40 = -t498 + t62 - t571;
t39 = -t381 * t80 + t384 * t97 - t570;
t36 = t391 + t425 - t571;
t35 = t303 - 0.2e1 * t450 - t513 - t600;
t22 = -t381 * t47 + t384 * t51 - t570;
t21 = -t381 * t44 + t384 * t49 - t599;
t17 = t38 * t381 + t491;
t15 = t148 * t382 + t18 * t385;
t14 = -t148 * t385 + t18 * t382;
t10 = t30 * t384 + t31 * t381;
t8 = t11 * t385 + t382 * t79;
t7 = t11 * t382 - t385 * t79;
t6 = -t28 * t381 + t32 * t384 - t580;
t5 = -pkin(3) * t17 - t503;
t4 = -t24 * t381 + t26 * t384 - t580;
t3 = -pkin(9) * t17 - qJ(5) * t491 - t34 * t381;
t2 = -pkin(3) * t10 - t406;
t1 = -pkin(9) * t10 - t13 * t381 + t20 * t384;
t9 = [0, 0, 0, 0, 0, qJDD(1), t417, t405, 0, 0, (t361 + t434) * t383, t360 * t386 + t363 * t383, t458 + t386 * (-t373 + t387), (t362 - t435) * t386, t383 * (t374 - t387) + t456, 0, t386 * t357 + pkin(1) * t363 + pkin(7) * (t386 * (-t374 - t387) - t458), -t383 * t357 - pkin(1) * t360 + pkin(7) * (-t456 - t383 * (-t373 - t387)), pkin(1) * (t373 + t374) + (t377 + t378) * t488 + t427, pkin(1) * t357 + pkin(7) * t427, t383 * (t321 * t385 - t356 * t461) + t386 * (t321 * t382 + t356 * t460), t383 * (-t293 * t385 - t297 * t382) + t386 * (-t293 * t382 + t297 * t385), t383 * (-t346 * t382 + t530) + t386 * (t346 * t385 + t536), t383 * (-t320 * t382 + t354 * t460) + t386 * (t320 * t385 + t354 * t461), t383 * (t345 * t385 - t467) + t386 * (t345 * t382 + t466), (t383 * (-t354 * t385 + t356 * t382) + t386 * (-t354 * t382 - t356 * t385)) * t376, t383 * (-pkin(8) * t285 - t469) + t386 * (-pkin(2) * t293 + pkin(8) * t286 + t468) - pkin(1) * t293 + pkin(7) * (-t285 * t383 + t286 * t386), t383 * (-pkin(8) * t299 - t468) + t386 * (-pkin(2) * t296 + pkin(8) * t300 - t469) - pkin(1) * t296 + pkin(7) * (-t299 * t383 + t300 * t386), t383 * (-pkin(8) * t242 - t202) + t386 * (-pkin(2) * t322 + pkin(8) * t243 + t203) - pkin(1) * t322 + pkin(7) * (-t242 * t383 + t243 * t386), -pkin(8) * t479 + t386 * (pkin(2) * t323 + pkin(8) * t203) + pkin(1) * t323 + pkin(7) * (t203 * t386 - t479), t383 * (t249 * t385 + t441) + t386 * (t249 * t382 - t440), t383 * (t172 * t385 - t313 * t382) + t386 * (t172 * t382 + t313 * t385), t383 * (t240 * t385 + t256 * t382) + t386 * (t240 * t382 - t256 * t385), t383 * (t247 * t385 - t441) + t386 * (t247 * t382 + t440), t383 * (t241 * t385 - t252 * t382) + t386 * (t241 * t382 + t252 * t385), t383 * (t273 * t385 + t470) + t386 * (t273 * t382 - t315), t383 * (-pkin(8) * t157 - t116 * t382 + t149 * t385) + t386 * (-pkin(2) * t217 + pkin(8) * t158 + t116 * t385 + t149 * t382) - pkin(1) * t217 + pkin(7) * (-t157 * t383 + t158 * t386), t383 * (-pkin(8) * t163 - t120 * t382 + t152 * t385) + t386 * (-pkin(2) * t227 + pkin(8) * t164 + t120 * t385 + t152 * t382) - pkin(1) * t227 + pkin(7) * (-t163 * t383 + t164 * t386), t383 * (-pkin(8) * t150 + t385 * t76) + t386 * (pkin(8) * t151 + t382 * t76) + pkin(7) * (-t150 * t383 + t151 * t386) + (t383 * t500 + t386 * t437 - pkin(1)) * t171, (t383 * (-pkin(9) * t385 + t500) + t386 * (-pkin(9) * t382 + t437) - pkin(1)) * t412 + (pkin(7) + pkin(8)) * (-t383 * t81 + t386 * (t223 * t382 + t385 * t95)), t392, t595, t574, t525, t603, t524, t383 * (-t382 * t40 + t385 * t39 - t581) + t386 * (t382 * t39 + t385 * t40 + t579) + t575, t383 * (-t382 * t45 + t385 * t41 - t606) + t386 * (t382 * t41 + t385 * t45 - t605) - t608, t383 * (-t382 * t54 + t385 * t6 - t590) + t386 * (t382 * t6 + t385 * t54 + t587) + t586, t383 * (-pkin(8) * t14 + t3 * t385 - t382 * t5) + t386 * (-pkin(2) * t17 + pkin(8) * t15 + t3 * t382 + t385 * t5) - pkin(1) * t17 + pkin(7) * (-t14 * t383 + t15 * t386), t392, t574, -t595, t524, -t603, t525, t383 * (t22 * t385 - t36 * t382 - t581) + t386 * (t22 * t382 + t36 * t385 + t579) + t575, t383 * (-t382 * t42 + t385 * t4 - t590) + t386 * (t382 * t4 + t385 * t42 + t587) + t586, t383 * (t21 * t385 - t35 * t382 + t606) + t386 * (t21 * t382 + t35 * t385 + t605) + t608, t383 * (-pkin(8) * t7 + t1 * t385 - t2 * t382) + t386 * (-pkin(2) * t10 + pkin(8) * t8 + t1 * t382 + t2 * t385) - pkin(1) * t10 + pkin(7) * (-t383 * t7 + t386 * t8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, t373 - t374, t371, t367, t372, qJDD(2), -t343, -t344, 0, 0, t335, t334, t298, -t335, t399, t445, pkin(2) * t285 - t265, -t457 - t382 * (pkin(8) * t434 - t343 - t496) + (-t364 * t382 + t299) * pkin(2), pkin(2) * t242, pkin(2) * t202, t248, t170, t238, t246, t239, t272, pkin(2) * t157 + t438, pkin(2) * t163 + t439, pkin(2) * t150 + t420, pkin(2) * t81 + t490, t123, t70, t560, t509, -t137, t512, t422 + t583, t421 + t607, t430 + t592, pkin(2) * t14 + t408, t123, t560, -t70, t512, t137, t509, t423 + t583, t431 + t592, t424 - t607, pkin(2) * t7 + t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, t334, t298, -t335, t399, t445, -t265, -t266, 0, 0, t248, t170, t238, t246, t239, t272, t438, t439, t420, t490, t123, t70, t560, t509, -t137, t512, t422, t421, t430, t408, t123, t560, -t70, t512, t137, t509, t423, t431, t424, t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316, -t313, t256, -t316, -t252, t319, -t145, -t146, 0, 0, t471, t520, t515, -t471, t188, t319, t304 - t429 + t498, t303 + t418, t499, t503, t471, t515, -t520, t319, -t188, -t471, -t258 * t311 + t304 - t391, t402, t513 + t522, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t523, t517, t214, t148, 0, 0, 0, 0, 0, 0, t523, t214, -t517, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t516, t515, t521, t56;];
tauJ_reg  = t9;
