% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:00
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP1_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:59:42
% EndTime: 2019-05-07 17:59:53
% DurationCPUTime: 11.84s
% Computational Cost: add. (53658->312), mult. (109400->395), div. (0->0), fcn. (80492->10), ass. (0->222)
t2645 = sin(qJ(3));
t2646 = sin(qJ(2));
t2649 = cos(qJ(3));
t2650 = cos(qJ(2));
t2614 = (t2645 * t2650 + t2646 * t2649) * qJD(1);
t2692 = qJD(1) * t2650;
t2673 = qJD(2) * t2692;
t2678 = t2646 * qJDD(1);
t2619 = t2673 + t2678;
t2638 = t2650 * qJDD(1);
t2693 = qJD(1) * t2646;
t2674 = qJD(2) * t2693;
t2620 = t2638 - t2674;
t2670 = t2645 * t2619 - t2649 * t2620;
t2662 = t2614 * qJD(3) + qJDD(4) + t2670;
t2644 = sin(qJ(4));
t2648 = cos(qJ(4));
t2681 = qJD(2) + qJD(3);
t2598 = t2644 * t2614 - t2648 * t2681;
t2599 = t2648 * t2614 + t2644 * t2681;
t2642 = sin(pkin(10));
t2643 = cos(pkin(10));
t2576 = t2598 * t2643 + t2642 * t2599;
t2578 = -t2598 * t2642 + t2599 * t2643;
t2689 = t2576 * t2578;
t2530 = t2662 + t2689;
t2575 = t2578 ^ 2;
t2612 = t2645 * t2693 - t2649 * t2692;
t2611 = qJD(4) + t2612;
t2697 = t2611 ^ 2;
t2704 = -t2575 - t2697;
t2492 = t2530 * t2642 - t2643 * t2704;
t2494 = t2530 * t2643 + t2642 * t2704;
t2476 = t2492 * t2644 - t2494 * t2648;
t2669 = t2649 * t2619 + t2645 * t2620;
t2586 = -t2612 * qJD(3) + t2669;
t2677 = qJDD(2) + qJDD(3);
t2664 = -t2648 * t2586 - t2644 * t2677;
t2555 = -t2598 * qJD(4) - t2664;
t2663 = -t2644 * t2586 + t2648 * t2677;
t2659 = -t2599 * qJD(4) + t2663;
t2657 = t2643 * t2555 + t2642 * t2659;
t2688 = t2576 * t2611;
t2656 = t2657 - t2688;
t2455 = t2476 * t2645 - t2649 * t2656;
t2457 = t2476 * t2649 + t2645 * t2656;
t2430 = t2455 * t2646 - t2457 * t2650;
t2465 = t2492 * t2648 + t2494 * t2644;
t2647 = sin(qJ(1));
t2651 = cos(qJ(1));
t2734 = t2430 * t2647 - t2465 * t2651;
t2733 = t2430 * t2651 + t2465 * t2647;
t2432 = t2455 * t2650 + t2457 * t2646;
t2531 = t2662 - t2689;
t2546 = t2576 ^ 2;
t2703 = -t2697 - t2546;
t2711 = -t2531 * t2642 + t2643 * t2703;
t2712 = t2643 * t2531 + t2642 * t2703;
t2713 = t2644 * t2711 + t2648 * t2712;
t2671 = -t2555 * t2642 + t2643 * t2659;
t2686 = t2611 * t2578;
t2665 = -t2671 + t2686;
t2714 = -t2644 * t2712 + t2648 * t2711;
t2721 = t2645 * t2665 + t2649 * t2714;
t2722 = t2645 * t2714 - t2649 * t2665;
t2726 = -t2646 * t2722 + t2650 * t2721;
t2730 = t2647 * t2726 - t2651 * t2713;
t2729 = t2647 * t2713 + t2651 * t2726;
t2511 = t2657 + t2688;
t2666 = t2671 + t2686;
t2700 = t2511 * t2642 + t2643 * t2666;
t2702 = -t2643 * t2511 + t2642 * t2666;
t2709 = t2644 * t2700 + t2648 * t2702;
t2521 = t2575 + t2546;
t2710 = -t2644 * t2702 + t2648 * t2700;
t2715 = -t2521 * t2645 + t2649 * t2710;
t2716 = t2521 * t2649 + t2645 * t2710;
t2720 = -t2646 * t2716 + t2650 * t2715;
t2728 = t2647 * t2720 - t2651 * t2709;
t2727 = t2647 * t2709 + t2651 * t2720;
t2725 = t2646 * t2721 + t2650 * t2722;
t2719 = t2646 * t2715 + t2650 * t2716;
t2676 = t2681 ^ 2;
t2701 = t2612 * t2681 - t2586;
t2641 = t2650 ^ 2;
t2653 = qJD(1) ^ 2;
t2628 = t2647 * g(1) - t2651 * g(2);
t2667 = qJDD(1) * pkin(1) + t2628;
t2668 = qJD(2) * pkin(2) - pkin(8) * t2693;
t2588 = t2620 * pkin(2) + (pkin(8) * t2641 + pkin(7)) * t2653 - t2668 * t2693 + t2667;
t2699 = t2598 ^ 2;
t2698 = t2599 ^ 2;
t2696 = t2612 ^ 2;
t2695 = t2614 ^ 2;
t2694 = -2 * qJD(5);
t2687 = t2598 * t2599;
t2685 = t2611 * t2598;
t2684 = t2612 * t2614;
t2683 = t2641 * t2653;
t2682 = t2646 * t2653;
t2680 = qJD(4) - t2611;
t2565 = (0.2e1 * qJD(3) + qJD(2)) * t2614 + t2670;
t2517 = t2565 * pkin(3) + pkin(9) * t2701 - t2588;
t2629 = -g(1) * t2651 - g(2) * t2647;
t2660 = -pkin(1) * t2653 + qJDD(1) * pkin(7) + t2629;
t2606 = -t2646 * g(3) + t2650 * t2660;
t2584 = -pkin(2) * t2683 + t2620 * pkin(8) - qJD(2) * t2668 + t2606;
t2658 = t2646 * t2660;
t2654 = -t2658 - t2619 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2682 - g(3)) * t2650;
t2548 = t2649 * t2584 + t2645 * t2654;
t2594 = pkin(3) * t2612 - pkin(9) * t2614;
t2526 = -pkin(3) * t2676 + pkin(9) * t2677 - t2612 * t2594 + t2548;
t2486 = t2644 * t2517 + t2648 * t2526;
t2640 = t2646 ^ 2;
t2679 = t2640 + t2641;
t2589 = pkin(4) * t2611 - qJ(5) * t2599;
t2478 = -pkin(4) * t2699 + qJ(5) * t2659 - t2611 * t2589 + t2486;
t2485 = t2648 * t2517 - t2644 * t2526;
t2549 = t2662 - t2687;
t2655 = (-t2555 - t2685) * qJ(5) + t2549 * pkin(4) + t2485;
t2443 = t2643 * t2478 + t2576 * t2694 + t2642 * t2655;
t2672 = t2642 * t2478 - t2643 * t2655;
t2547 = -t2645 * t2584 + t2649 * t2654;
t2525 = -t2677 * pkin(3) - t2676 * pkin(9) + t2614 * t2594 - t2547;
t2487 = -t2659 * pkin(4) - t2699 * qJ(5) + t2599 * t2589 + qJDD(5) + t2525;
t2652 = qJD(2) ^ 2;
t2633 = t2650 * t2682;
t2631 = -t2652 - t2683;
t2630 = -t2640 * t2653 - t2652;
t2627 = -qJDD(2) + t2633;
t2626 = qJDD(2) + t2633;
t2625 = t2679 * t2653;
t2624 = -qJDD(1) * t2647 - t2651 * t2653;
t2623 = qJDD(1) * t2651 - t2647 * t2653;
t2622 = t2679 * qJDD(1);
t2621 = t2638 - 0.2e1 * t2674;
t2618 = 0.2e1 * t2673 + t2678;
t2615 = t2653 * pkin(7) + t2667;
t2605 = -t2650 * g(3) - t2658;
t2604 = -t2695 - t2676;
t2603 = t2627 * t2650 - t2630 * t2646;
t2602 = -t2626 * t2646 + t2631 * t2650;
t2601 = t2627 * t2646 + t2630 * t2650;
t2600 = t2626 * t2650 + t2631 * t2646;
t2593 = -t2677 - t2684;
t2592 = t2677 - t2684;
t2591 = -t2676 - t2696;
t2587 = -t2695 - t2696;
t2583 = -t2605 * t2646 + t2606 * t2650;
t2582 = t2605 * t2650 + t2606 * t2646;
t2574 = -t2697 - t2698;
t2570 = t2593 * t2649 - t2604 * t2645;
t2569 = t2593 * t2645 + t2604 * t2649;
t2568 = -qJD(2) * t2612 - t2669;
t2566 = qJD(2) * t2614 - t2670;
t2564 = -t2697 - t2699;
t2559 = t2591 * t2649 - t2592 * t2645;
t2558 = t2591 * t2645 + t2592 * t2649;
t2556 = -t2698 - t2699;
t2550 = -t2662 - t2687;
t2545 = pkin(5) * t2576 - qJ(6) * t2578;
t2544 = t2598 * t2680 + t2664;
t2543 = t2555 - t2685;
t2542 = -t2599 * t2680 + t2663;
t2541 = (qJD(4) + t2611) * t2599 - t2663;
t2538 = -t2569 * t2646 + t2570 * t2650;
t2537 = t2569 * t2650 + t2570 * t2646;
t2536 = t2566 * t2649 - t2568 * t2645;
t2535 = t2566 * t2645 + t2568 * t2649;
t2534 = -t2558 * t2646 + t2559 * t2650;
t2533 = t2558 * t2650 + t2559 * t2646;
t2529 = t2550 * t2648 - t2574 * t2644;
t2528 = t2550 * t2644 + t2574 * t2648;
t2523 = -t2549 * t2644 + t2564 * t2648;
t2522 = t2549 * t2648 + t2564 * t2644;
t2515 = -t2547 * t2645 + t2548 * t2649;
t2514 = t2547 * t2649 + t2548 * t2645;
t2505 = t2542 * t2648 - t2544 * t2644;
t2504 = t2542 * t2644 + t2544 * t2648;
t2499 = -t2535 * t2646 + t2536 * t2650;
t2498 = t2535 * t2650 + t2536 * t2646;
t2497 = t2529 * t2649 + t2543 * t2645;
t2496 = t2529 * t2645 - t2543 * t2649;
t2491 = t2523 * t2649 + t2541 * t2645;
t2490 = t2523 * t2645 - t2541 * t2649;
t2489 = t2505 * t2649 + t2556 * t2645;
t2488 = t2505 * t2645 - t2556 * t2649;
t2484 = -t2514 * t2646 + t2515 * t2650;
t2483 = t2514 * t2650 + t2515 * t2646;
t2470 = -t2496 * t2646 + t2497 * t2650;
t2469 = t2496 * t2650 + t2497 * t2646;
t2464 = -t2490 * t2646 + t2491 * t2650;
t2463 = t2490 * t2650 + t2491 * t2646;
t2462 = -t2488 * t2646 + t2489 * t2650;
t2461 = t2488 * t2650 + t2489 * t2646;
t2460 = -t2485 * t2644 + t2486 * t2648;
t2459 = t2485 * t2648 + t2486 * t2644;
t2450 = t2460 * t2649 + t2525 * t2645;
t2449 = t2460 * t2645 - t2525 * t2649;
t2448 = -t2671 * pkin(5) + (pkin(5) * t2611 - (2 * qJD(6))) * t2578 + t2487 - t2656 * qJ(6);
t2442 = t2578 * t2694 - t2672;
t2437 = qJDD(6) - t2662 * pkin(5) - t2697 * qJ(6) + ((2 * qJD(5)) + t2545) * t2578 + t2672;
t2436 = -pkin(5) * t2697 + qJ(6) * t2662 + 0.2e1 * qJD(6) * t2611 - t2576 * t2545 + t2443;
t2427 = -t2449 * t2646 + t2450 * t2650;
t2426 = t2449 * t2650 + t2450 * t2646;
t2425 = -t2442 * t2642 + t2443 * t2643;
t2424 = t2442 * t2643 + t2443 * t2642;
t2419 = t2436 * t2643 + t2437 * t2642;
t2418 = t2436 * t2642 - t2437 * t2643;
t2417 = -t2424 * t2644 + t2425 * t2648;
t2416 = t2424 * t2648 + t2425 * t2644;
t2415 = t2417 * t2649 + t2487 * t2645;
t2414 = t2417 * t2645 - t2487 * t2649;
t2413 = -t2418 * t2644 + t2419 * t2648;
t2412 = t2418 * t2648 + t2419 * t2644;
t2411 = t2413 * t2649 + t2448 * t2645;
t2410 = t2413 * t2645 - t2448 * t2649;
t2409 = -t2414 * t2646 + t2415 * t2650;
t2408 = t2414 * t2650 + t2415 * t2646;
t2407 = -t2410 * t2646 + t2411 * t2650;
t2406 = t2410 * t2650 + t2411 * t2646;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2624, -t2623, 0, -t2628 * t2647 + t2629 * t2651, 0, 0, 0, 0, 0, 0, t2602 * t2651 - t2621 * t2647, t2603 * t2651 + t2618 * t2647, t2622 * t2651 - t2625 * t2647, t2583 * t2651 - t2615 * t2647, 0, 0, 0, 0, 0, 0, t2534 * t2651 + t2565 * t2647, t2538 * t2651 - t2647 * t2701, t2499 * t2651 + t2587 * t2647, t2484 * t2651 - t2588 * t2647, 0, 0, 0, 0, 0, 0, t2464 * t2651 + t2522 * t2647, t2470 * t2651 + t2528 * t2647, t2462 * t2651 + t2504 * t2647, t2427 * t2651 + t2459 * t2647, 0, 0, 0, 0, 0, 0, t2729, -t2733, t2727, t2409 * t2651 + t2416 * t2647, 0, 0, 0, 0, 0, 0, t2729, t2727, t2733, t2407 * t2651 + t2412 * t2647; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2623, t2624, 0, t2628 * t2651 + t2629 * t2647, 0, 0, 0, 0, 0, 0, t2602 * t2647 + t2621 * t2651, t2603 * t2647 - t2618 * t2651, t2622 * t2647 + t2625 * t2651, t2583 * t2647 + t2615 * t2651, 0, 0, 0, 0, 0, 0, t2534 * t2647 - t2565 * t2651, t2538 * t2647 + t2651 * t2701, t2499 * t2647 - t2587 * t2651, t2484 * t2647 + t2588 * t2651, 0, 0, 0, 0, 0, 0, t2464 * t2647 - t2522 * t2651, t2470 * t2647 - t2528 * t2651, t2462 * t2647 - t2504 * t2651, t2427 * t2647 - t2459 * t2651, 0, 0, 0, 0, 0, 0, t2730, -t2734, t2728, t2409 * t2647 - t2416 * t2651, 0, 0, 0, 0, 0, 0, t2730, t2728, t2734, t2407 * t2647 - t2412 * t2651; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2600, t2601, 0, t2582, 0, 0, 0, 0, 0, 0, t2533, t2537, t2498, t2483, 0, 0, 0, 0, 0, 0, t2463, t2469, t2461, t2426, 0, 0, 0, 0, 0, 0, t2725, t2432, t2719, t2408, 0, 0, 0, 0, 0, 0, t2725, t2719, -t2432, t2406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2653, -qJDD(1), 0, t2629, 0, 0, 0, 0, 0, 0, t2602, t2603, t2622, t2583, 0, 0, 0, 0, 0, 0, t2534, t2538, t2499, t2484, 0, 0, 0, 0, 0, 0, t2464, t2470, t2462, t2427, 0, 0, 0, 0, 0, 0, t2726, -t2430, t2720, t2409, 0, 0, 0, 0, 0, 0, t2726, t2720, t2430, t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2653, 0, t2628, 0, 0, 0, 0, 0, 0, t2621, -t2618, t2625, t2615, 0, 0, 0, 0, 0, 0, -t2565, t2701, -t2587, t2588, 0, 0, 0, 0, 0, 0, -t2522, -t2528, -t2504, -t2459, 0, 0, 0, 0, 0, 0, -t2713, t2465, -t2709, -t2416, 0, 0, 0, 0, 0, 0, -t2713, -t2709, -t2465, -t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2600, t2601, 0, t2582, 0, 0, 0, 0, 0, 0, t2533, t2537, t2498, t2483, 0, 0, 0, 0, 0, 0, t2463, t2469, t2461, t2426, 0, 0, 0, 0, 0, 0, t2725, t2432, t2719, t2408, 0, 0, 0, 0, 0, 0, t2725, t2719, -t2432, t2406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2631, t2627, t2638, t2606, 0, 0, 0, 0, 0, 0, t2559, t2570, t2536, t2515, 0, 0, 0, 0, 0, 0, t2491, t2497, t2489, t2450, 0, 0, 0, 0, 0, 0, t2721, t2457, t2715, t2415, 0, 0, 0, 0, 0, 0, t2721, t2715, -t2457, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2626, t2630, -t2678, t2605, 0, 0, 0, 0, 0, 0, t2558, t2569, t2535, t2514, 0, 0, 0, 0, 0, 0, t2490, t2496, t2488, t2449, 0, 0, 0, 0, 0, 0, t2722, t2455, t2716, t2414, 0, 0, 0, 0, 0, 0, t2722, t2716, -t2455, t2410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2621, t2618, -t2625, -t2615, 0, 0, 0, 0, 0, 0, t2565, -t2701, t2587, -t2588, 0, 0, 0, 0, 0, 0, t2522, t2528, t2504, t2459, 0, 0, 0, 0, 0, 0, t2713, -t2465, t2709, t2416, 0, 0, 0, 0, 0, 0, t2713, t2709, t2465, t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2591, t2593, t2566, t2548, 0, 0, 0, 0, 0, 0, t2523, t2529, t2505, t2460, 0, 0, 0, 0, 0, 0, t2714, t2476, t2710, t2417, 0, 0, 0, 0, 0, 0, t2714, t2710, -t2476, t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2592, t2604, t2568, t2547, 0, 0, 0, 0, 0, 0, -t2541, -t2543, -t2556, -t2525, 0, 0, 0, 0, 0, 0, -t2665, -t2656, t2521, -t2487, 0, 0, 0, 0, 0, 0, -t2665, t2521, t2656, -t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2565, -t2701, t2587, -t2588, 0, 0, 0, 0, 0, 0, t2522, t2528, t2504, t2459, 0, 0, 0, 0, 0, 0, t2713, -t2465, t2709, t2416, 0, 0, 0, 0, 0, 0, t2713, t2709, t2465, t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2564, t2550, t2542, t2486, 0, 0, 0, 0, 0, 0, t2711, -t2494, t2700, t2425, 0, 0, 0, 0, 0, 0, t2711, t2700, t2494, t2419; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2574, t2544, t2485, 0, 0, 0, 0, 0, 0, t2712, -t2492, t2702, t2424, 0, 0, 0, 0, 0, 0, t2712, t2702, t2492, t2418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2541, t2543, t2556, t2525, 0, 0, 0, 0, 0, 0, t2665, t2656, -t2521, t2487, 0, 0, 0, 0, 0, 0, t2665, -t2521, -t2656, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, -t2530, t2666, t2443, 0, 0, 0, 0, 0, 0, t2703, t2666, t2530, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2531, t2704, -t2511, t2442, 0, 0, 0, 0, 0, 0, t2531, -t2511, -t2704, -t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2665, t2656, -t2521, t2487, 0, 0, 0, 0, 0, 0, t2665, -t2521, -t2656, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, t2666, t2530, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2665, -t2521, -t2656, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2531, t2511, t2704, t2437;];
f_new_reg  = t1;
