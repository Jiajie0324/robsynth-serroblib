% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:29:48
% EndTime: 2019-03-10 03:30:04
% DurationCPUTime: 6.13s
% Computational Cost: add. (19104->368), mult. (40649->597), div. (0->0), fcn. (41625->10), ass. (0->203)
t110 = sin(qJ(6));
t108 = t110 ^ 2;
t113 = cos(qJ(6));
t109 = t113 ^ 2;
t272 = t108 + t109;
t111 = sin(qJ(5));
t259 = sin(qJ(4));
t263 = cos(qJ(3));
t191 = t259 * t263;
t260 = sin(qJ(3));
t262 = cos(qJ(4));
t192 = t262 * t260;
t150 = -t192 - t191;
t144 = t150 * qJD(3);
t175 = pkin(2) * t192;
t233 = t263 * pkin(2);
t195 = t233 + pkin(3);
t87 = t195 * t259 + t175;
t126 = pkin(2) * t144 - qJD(4) * t87;
t189 = t259 * t260;
t174 = pkin(2) * t189;
t193 = t262 * t263;
t177 = pkin(2) * t193;
t157 = -qJD(4) * t174 + (-t174 + t177) * qJD(3);
t164 = t262 * t195;
t136 = -qJD(4) * t164 - t157;
t140 = t174 - t164;
t139 = pkin(4) - t140;
t261 = cos(qJ(5));
t137 = t261 * t139;
t234 = -qJD(5) * t137 - t111 * t126 + t136 * t261;
t238 = qJD(5) * t111;
t33 = t238 * t87 + t234;
t285 = t272 * t33;
t214 = qJD(4) * t259;
t154 = (qJD(5) * t259 + t214) * pkin(3);
t231 = t262 * pkin(3);
t194 = t231 + pkin(4);
t163 = t261 * t194;
t215 = qJD(4) * t262;
t203 = pkin(3) * t215;
t252 = -qJD(5) * t163 - t203 * t261;
t68 = t111 * t154 + t252;
t284 = t272 * t68;
t190 = t259 * t261;
t283 = (qJD(4) + qJD(5)) * pkin(3) * (t111 * t262 + t190);
t112 = sin(qJ(2));
t114 = cos(qJ(2));
t266 = -pkin(8) - pkin(7);
t275 = t260 * t266;
t280 = -pkin(9) * t260 + t275;
t274 = t263 * t266;
t281 = -pkin(9) * t263 + t274;
t132 = t112 * t281 + t114 * t280;
t133 = t112 * t280 - t114 * t281;
t282 = -t132 * t262 + t133 * t259;
t219 = t260 * t112;
t160 = -t114 * t263 + t219;
t162 = t112 * t263 + t114 * t260;
t131 = t160 * t262 + t162 * t259;
t143 = -t112 * t274 - t114 * t275;
t279 = t143 * qJD(3);
t241 = t108 - t109;
t269 = t241 * qJD(6);
t278 = -t112 * t275 + t114 * t274;
t127 = t261 * t131;
t71 = -t160 * t259 + t162 * t262;
t46 = t111 * t71 + t127;
t130 = t111 * t131;
t47 = t261 * t71 - t130;
t106 = -t114 * pkin(2) - pkin(1);
t78 = pkin(3) * t160 + t106;
t50 = pkin(4) * t131 + t78;
t125 = t46 * pkin(5) - t47 * pkin(11) + t50;
t153 = t162 * qJD(3);
t135 = -qJD(2) * t162 - t153;
t212 = t263 * qJD(3);
t216 = qJD(3) * t260;
t267 = -t114 * (qJD(2) * t263 + t212) + qJD(2) * t219 + t112 * t216;
t120 = qJD(4) * t131 - t259 * t135 + t262 * t267;
t168 = qJD(2) * t275;
t169 = qJD(2) * t274;
t122 = t135 * pkin(9) + t112 * t169 + t114 * t168 - t279;
t273 = t278 * qJD(3);
t124 = pkin(9) * t267 - t112 * t168 + t114 * t169 + t273;
t42 = t132 * t259 + t133 * t262;
t21 = -qJD(4) * t42 - t259 * t122 + t262 * t124;
t115 = -pkin(10) * t120 - t21;
t121 = -t71 * pkin(10) - t282;
t118 = t261 * t121;
t117 = qJD(4) * t71 - t262 * t135 - t259 * t267;
t20 = qJD(4) * t282 - t262 * t122 - t259 * t124;
t14 = -pkin(10) * t117 - t20;
t35 = -pkin(10) * t131 + t42;
t6 = -qJD(5) * t118 + t111 * t115 - t14 * t261 + t238 * t35;
t276 = -qJD(6) * t125 + t6;
t119 = t111 * t121;
t26 = t261 * t35 + t119;
t10 = -t110 * t26 + t113 * t125;
t11 = t110 * t125 + t113 * t26;
t270 = -t10 * t110 + t11 * t113;
t25 = t111 * t35 - t118;
t213 = qJD(5) * t261;
t7 = qJD(5) * t119 + t111 * t14 + t115 * t261 + t213 * t35;
t265 = t25 * t7;
t107 = qJD(6) * t113;
t23 = t25 * t107;
t264 = t110 * t7 + t23;
t258 = t112 * pkin(2);
t64 = t261 * t126;
t134 = t111 * t136 + t64;
t79 = t261 * t87;
t59 = t111 * t139 + t79;
t34 = qJD(5) * t59 - t134;
t257 = t25 * t34;
t223 = pkin(4) * t238;
t69 = t223 + t283;
t256 = t25 * t69;
t18 = qJD(5) * t127 + t111 * t117 + t120 * t261 + t238 * t71;
t255 = t47 * t18;
t246 = t111 * t87;
t58 = t137 - t246;
t56 = -pkin(5) - t58;
t254 = t107 * t56 + t110 * t34;
t227 = t259 * pkin(3);
t84 = -t111 * t227 + t163;
t80 = -pkin(5) - t84;
t253 = t107 * t80 + t110 * t69;
t201 = pkin(4) * t213;
t83 = t272 * t201;
t230 = t261 * pkin(4);
t105 = -t230 - pkin(5);
t251 = t105 * t107 + t110 * t223;
t250 = qJD(5) * pkin(4);
t247 = t111 * t25;
t245 = t113 * t18;
t103 = pkin(3) * t190;
t92 = t111 * t194;
t86 = t103 + t92;
t240 = qJD(2) * t112;
t239 = qJD(2) * t114;
t237 = qJD(6) * t110;
t19 = -qJD(5) * t130 - t111 * t120 + t117 * t261 + t213 * t71;
t236 = 0.2e1 * t46 * t19;
t235 = -0.2e1 * pkin(1) * qJD(2);
t226 = pkin(5) * t237;
t225 = pkin(5) * t107;
t224 = pkin(2) * t240;
t222 = t110 * t245;
t221 = t47 * t237;
t220 = t47 * t107;
t22 = t25 * t237;
t218 = t110 * t107;
t217 = t112 * t239;
t51 = t56 * t237;
t211 = -t113 * t34 + t51;
t74 = t80 * t237;
t210 = -t113 * t69 + t74;
t207 = -0.2e1 * t223;
t104 = t111 * pkin(4) + pkin(11);
t206 = t104 * t272;
t205 = pkin(2) * t212;
t204 = pkin(2) * t216;
t202 = pkin(3) * t214;
t45 = t47 ^ 2;
t200 = t45 * t218;
t188 = -t18 * t25 + t47 * t7;
t187 = -0.2e1 * t202;
t186 = t18 * t46 - t19 * t47;
t185 = t33 * t46 + t34 * t47;
t57 = pkin(11) + t59;
t183 = t46 * t57 - t47 * t56;
t182 = t46 * t68 + t47 * t69;
t81 = pkin(11) + t86;
t181 = t46 * t81 - t47 * t80;
t180 = t10 * t113 + t11 * t110;
t178 = t104 * t46 - t105 * t47;
t89 = t105 * t237;
t167 = -t113 * t223 + t89;
t166 = t221 + t245;
t165 = -t113 * t19 + t237 * t46;
t161 = t272 * t261;
t159 = (t111 * t47 - t261 * t46) * qJD(5);
t155 = t106 * t162;
t152 = -t18 * t56 - t19 * t57 + t185;
t151 = -t18 * t80 - t19 * t81 + t182;
t145 = -t231 - t164;
t28 = -pkin(3) * t135 + pkin(4) * t117 + t224;
t116 = t19 * pkin(5) + t18 * pkin(11) + t28;
t2 = -t110 * t116 + t113 * t276 + t237 * t26;
t3 = -t107 * t26 + t110 * t276 + t113 * t116;
t1 = -qJD(6) * t180 - t110 * t3 - t113 * t2;
t138 = pkin(4) * t159 - t104 * t19 - t105 * t18;
t100 = -0.2e1 * t218;
t99 = 0.2e1 * t218;
t88 = -0.2e1 * t269;
t66 = pkin(3) * t153 + (pkin(3) * t162 + t258) * qJD(2);
t49 = qJD(2) * t278 + t273;
t48 = qJD(2) * t143 + t279;
t16 = t107 * t46 + t110 * t19;
t12 = t269 * t47 + t222;
t9 = t18 * t241 - 0.4e1 * t218 * t47;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t217, 0.2e1 * (-t112 ^ 2 + t114 ^ 2) * qJD(2), 0, -0.2e1 * t217, 0, 0, t112 * t235, t114 * t235, 0, 0, -0.2e1 * t162 * t267, 0.2e1 * t135 * t162 + 0.2e1 * t160 * t267, 0, -0.2e1 * t160 * t135, 0, 0, 0.2e1 * qJD(3) * t155 + 0.2e1 * (t160 * t258 + t155) * qJD(2), -0.2e1 * t106 * t267 + 0.2e1 * t162 * t224, -0.2e1 * t135 * t278 - 0.2e1 * t143 * t267 + 0.2e1 * t160 * t48 - 0.2e1 * t162 * t49, 0.2e1 * t106 * t224 - 0.2e1 * t143 * t49 + 0.2e1 * t278 * t48, -0.2e1 * t71 * t120, -0.2e1 * t117 * t71 + 0.2e1 * t120 * t131, 0, 0.2e1 * t131 * t117, 0, 0, 0.2e1 * t117 * t78 + 0.2e1 * t131 * t66, -0.2e1 * t120 * t78 + 0.2e1 * t66 * t71, -0.2e1 * t117 * t42 - 0.2e1 * t120 * t282 + 0.2e1 * t131 * t20 - 0.2e1 * t21 * t71, -0.2e1 * t20 * t42 - 0.2e1 * t21 * t282 + 0.2e1 * t66 * t78, -0.2e1 * t255, 0.2e1 * t186, 0, t236, 0, 0, 0.2e1 * t19 * t50 + 0.2e1 * t28 * t46, -0.2e1 * t18 * t50 + 0.2e1 * t28 * t47, -0.2e1 * t19 * t26 + 0.2e1 * t46 * t6 + 0.2e1 * t188, -0.2e1 * t26 * t6 + 0.2e1 * t28 * t50 + 0.2e1 * t265, -0.2e1 * t109 * t255 - 0.2e1 * t200, 0.4e1 * t222 * t47 + 0.2e1 * t269 * t45, -0.2e1 * t113 * t186 - 0.2e1 * t221 * t46, -0.2e1 * t108 * t255 + 0.2e1 * t200, 0.2e1 * t110 * t186 - 0.2e1 * t220 * t46, t236, 0.2e1 * t10 * t19 + 0.2e1 * t110 * t188 + 0.2e1 * t23 * t47 + 0.2e1 * t3 * t46, -0.2e1 * t11 * t19 + 0.2e1 * t113 * t188 + 0.2e1 * t2 * t46 - 0.2e1 * t22 * t47, 0.2e1 * t180 * t18 + 0.2e1 * (-qJD(6) * t270 + t110 * t2 - t113 * t3) * t47, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, 0, -t240, 0, -pkin(7) * t239, pkin(7) * t240, 0, 0, 0, 0, -t267, 0, t135, 0, t49, t48, t267 * t233 - t160 * t205 + (t135 + t153) * t260 * pkin(2) (-t48 * t260 + t49 * t263 + (t143 * t260 - t263 * t278) * qJD(3)) * pkin(2), 0, 0, -t120, 0, -t117, 0, t21, t20, -t117 * t87 - t120 * t140 - t126 * t71 + t131 * t136, -t126 * t282 - t136 * t42 - t140 * t21 - t20 * t87, 0, 0, -t18, 0, -t19, 0, -t7, t6, t18 * t58 - t19 * t59 + t185, -t26 * t33 - t58 * t7 - t59 * t6 + t257, -t12, t9, t16, t12, -t165, 0, t22 + (-qJD(6) * t183 - t7) * t113 + t152 * t110, t113 * t152 + t183 * t237 + t264, t1, t1 * t57 - t270 * t33 + t56 * t7 + t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t204, -0.2e1 * t205, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t126, 0.2e1 * t136, 0, -0.2e1 * t126 * t140 - 0.2e1 * t136 * t87, 0, 0, 0, 0, 0, 0, -0.2e1 * t34, 0.2e1 * t33, 0, -0.2e1 * t33 * t59 - 0.2e1 * t34 * t58, t99, t88, 0, t100, 0, 0, 0.2e1 * t211, 0.2e1 * t254, -0.2e1 * t285, -0.2e1 * t285 * t57 + 0.2e1 * t34 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, 0, t135, 0, t49, t48, 0, 0, 0, 0, -t120, 0, -t117, 0, t21, t20, -t117 * t227 + t120 * t231 - t131 * t203 + t202 * t71 (-t259 * t20 + t262 * t21 + (t259 * t282 + t262 * t42) * qJD(4)) * pkin(3), 0, 0, -t18, 0, -t19, 0, -t7, t6, t18 * t84 - t19 * t86 + t182, -t26 * t68 - t6 * t86 - t7 * t84 + t256, -t12, t9, t16, t12, -t165, 0, t22 + (-qJD(6) * t181 - t7) * t113 + t151 * t110, t113 * t151 + t181 * t237 + t264, t1, t1 * t81 - t270 * t68 + t7 * t80 + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t204, -t205, 0, 0, 0, 0, 0, 0, 0, 0, t187 + (qJD(4) * t150 + t144) * pkin(2), qJD(4) * t145 - t157, 0 ((qJD(4) * t177 + t157) * t259 + t87 * t215 + t140 * t214 + (qJD(3) + qJD(4)) * t262 * (-pkin(2) * t191 - t175)) * pkin(3), 0, 0, 0, 0, 0, 0, -t111 * t157 + t64 + (t111 * t145 - t103) * qJD(4) + (-t103 - 0.2e1 * t92 - t79 - t111 * (-t189 + t193) * pkin(2)) * qJD(5) (qJD(5) * t87 + t154) * t111 + t234 + t252, 0, -t33 * t86 - t34 * t84 - t58 * t69 - t59 * t68, t99, t88, 0, t100, 0, 0, t51 + t74 + (-t34 - t69) * t113, t253 + t254, -t284 - t285, t34 * t80 + t56 * t69 + t272 * (-t33 * t81 - t57 * t68); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187, -0.2e1 * t203, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t69, 0.2e1 * t68, 0, -0.2e1 * t68 * t86 - 0.2e1 * t69 * t84, t99, t88, 0, t100, 0, 0, 0.2e1 * t210, 0.2e1 * t253, -0.2e1 * t284, -0.2e1 * t284 * t81 + 0.2e1 * t69 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, 0, -t117, 0, t21, t20, 0, 0, 0, 0, -t18, 0, -t19, 0, -t7, t6 (-t111 * t19 + t18 * t261 + t159) * pkin(4) (-t261 * t7 - t111 * t6 + (t26 * t261 + t247) * qJD(5)) * pkin(4), -t12, t9, t16, t12, -t165, 0, t22 + (-qJD(6) * t178 - t7) * t113 + t138 * t110, t113 * t138 + t178 * t237 + t264, t1, t7 * t105 + (t261 * t270 + t247) * t250 + t1 * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, t136, 0, 0, 0, 0, 0, 0, 0, 0 (-t79 + (-0.2e1 * pkin(4) + t140) * t111) * qJD(5) + t134 (-t230 + t246) * qJD(5) + t234, 0 (-t261 * t34 - t111 * t33 + (-t111 * t58 + t261 * t59) * qJD(5)) * pkin(4), t99, t88, 0, t100, 0, 0, t51 + t89 + (-t34 - t223) * t113, t251 + t254, t83 - t285, t34 * t105 - t33 * t206 + (t111 * t56 + t161 * t57) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, -t203, 0, 0, 0, 0, 0, 0, 0, 0, t207 - t283, -t201 + t68, 0 (-t261 * t69 - t111 * t68 + (-t111 * t84 + t261 * t86) * qJD(5)) * pkin(4), t99, t88, 0, t100, 0, 0, t74 + t89 + (-t69 - t223) * t113, t251 + t253, t83 - t284, t69 * t105 - t68 * t206 + (t111 * t80 + t161 * t81) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, -0.2e1 * t201, 0, 0, t99, t88, 0, t100, 0, 0, 0.2e1 * t167, 0.2e1 * t251, 0.2e1 * t83, 0.2e1 * (t104 * t161 + t105 * t111) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, 0, -t7, t6, 0, 0, -t12, t9, t16, t12, -t165, 0, t22 + (pkin(5) * t18 - pkin(11) * t19) * t110 + (-t7 + (-pkin(5) * t47 - pkin(11) * t46) * qJD(6)) * t113, pkin(5) * t166 + pkin(11) * t165 + t264, t1, -pkin(5) * t7 + pkin(11) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0, 0, t99, t88, 0, t100, 0, 0, t211 - t226, -t225 + t254, -t285, -pkin(5) * t34 - pkin(11) * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t68, 0, 0, t99, t88, 0, t100, 0, 0, t210 - t226, -t225 + t253, -t284, -pkin(5) * t69 - pkin(11) * t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t223, -t201, 0, 0, t99, t88, 0, t100, 0, 0, t167 - t226, -t225 + t251, t83 (-pkin(5) * t111 + pkin(11) * t161) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t88, 0, t100, 0, 0, -0.2e1 * t226, -0.2e1 * t225, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, 0, t110 * t18 - t220, t19, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t237, 0, -t107 * t57 + t110 * t33, t113 * t33 + t237 * t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t237, 0, -t107 * t81 + t110 * t68, t113 * t68 + t237 * t81, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t237, 0, -t104 * t107 - t110 * t201, t104 * t237 - t113 * t201, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t237, 0, -pkin(11) * t107, pkin(11) * t237, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
