% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t74 = sin(qJ(6));
t70 = t74 ^ 2;
t79 = cos(qJ(6));
t72 = t79 ^ 2;
t110 = t70 + t72;
t77 = sin(qJ(3));
t122 = t77 * pkin(2);
t81 = cos(qJ(4));
t106 = t81 * t122;
t82 = cos(qJ(3));
t68 = t82 * pkin(2);
t62 = t68 + pkin(3);
t76 = sin(qJ(4));
t47 = t76 * t62 + t106;
t80 = cos(qJ(5));
t115 = t80 * t47;
t45 = -t76 * t122 + t81 * t62;
t42 = pkin(4) + t45;
t75 = sin(qJ(5));
t29 = t75 * t42 + t115;
t27 = pkin(11) + t29;
t114 = t110 * t27;
t123 = t76 * pkin(3);
t107 = t80 * t123;
t67 = t81 * pkin(3);
t61 = t67 + pkin(4);
t46 = t75 * t61 + t107;
t43 = pkin(11) + t46;
t139 = t110 * t43;
t124 = t75 * pkin(4);
t59 = pkin(11) + t124;
t138 = t110 * t59;
t127 = -pkin(8) - pkin(7);
t134 = t82 * t127;
t135 = t77 * t127;
t137 = t134 * t81 - t135 * t76;
t136 = t134 * t76 + t135 * t81;
t78 = sin(qJ(2));
t83 = cos(qJ(2));
t48 = t77 * t78 - t82 * t83;
t50 = t77 * t83 + t82 * t78;
t31 = -t81 * t48 - t76 * t50;
t100 = t127 * t78;
t101 = t127 * t83;
t33 = t82 * t100 + t77 * t101;
t34 = t77 * t100 - t82 * t101;
t11 = t81 * (-t48 * pkin(9) + t34) + t76 * (-t50 * pkin(9) + t33) + t31 * pkin(10);
t90 = t76 * t48 - t81 * t50;
t12 = t90 * pkin(9) + t136 * t83 + t137 * t78;
t89 = pkin(10) * t90 + t12;
t5 = t75 * t11 - t80 * t89;
t133 = t5 ^ 2;
t18 = -t80 * t31 - t75 * t90;
t132 = t18 ^ 2;
t63 = -t83 * pkin(2) - pkin(1);
t39 = t48 * pkin(3) + t63;
t21 = -t31 * pkin(4) + t39;
t131 = 0.2e1 * t21;
t130 = -0.2e1 * t90;
t129 = 0.2e1 * t63;
t128 = 0.2e1 * t83;
t126 = pkin(5) * t74;
t125 = t5 * t79;
t37 = t80 * t42;
t96 = t75 * t47 - t37;
t26 = -pkin(5) + t96;
t121 = t26 * t79;
t53 = t80 * t61;
t95 = t75 * t123 - t53;
t41 = -pkin(5) + t95;
t120 = t41 * t79;
t66 = t80 * pkin(4);
t60 = -t66 - pkin(5);
t119 = t60 * t79;
t20 = t75 * t31 - t80 * t90;
t118 = t74 * t20;
t117 = t74 * t79;
t116 = t79 * t20;
t111 = pkin(11) * t110;
t71 = t78 ^ 2;
t73 = t83 ^ 2;
t109 = t71 + t73;
t108 = -0.2e1 * t20 * t18;
t99 = -t47 - t123;
t94 = -pkin(5) * t20 - pkin(11) * t18;
t7 = t80 * t11 + t75 * t89;
t8 = t18 * pkin(5) - t20 * pkin(11) + t21;
t2 = -t74 * t7 + t79 * t8;
t3 = t79 * t7 + t74 * t8;
t1 = -t2 * t74 + t3 * t79;
t93 = -t18 * t27 + t20 * t26;
t92 = -t18 * t43 + t20 * t41;
t91 = -t18 * t59 + t20 * t60;
t69 = pkin(5) * t79;
t56 = 0.2e1 * t117;
t55 = t60 * t74;
t38 = t41 * t74;
t24 = t26 * t74;
t17 = t20 ^ 2;
t16 = t79 * t18;
t15 = t74 * t18;
t14 = t74 * t116;
t13 = t31 * pkin(9) + t136 * t78 - t137 * t83;
t9 = (-t70 + t72) * t20;
t4 = t5 * t74;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t71, t78 * t128, 0, t73, 0, 0, pkin(1) * t128, -0.2e1 * pkin(1) * t78, 0.2e1 * t109 * pkin(7), t109 * pkin(7) ^ 2 + pkin(1) ^ 2, t50 ^ 2, -0.2e1 * t50 * t48, 0, t48 ^ 2, 0, 0, t48 * t129, t50 * t129, -0.2e1 * t33 * t50 - 0.2e1 * t34 * t48, t33 ^ 2 + t34 ^ 2 + t63 ^ 2, t90 ^ 2, t31 * t130, 0, t31 ^ 2, 0, 0, -0.2e1 * t39 * t31, t39 * t130, 0.2e1 * t12 * t90 + 0.2e1 * t13 * t31, t12 ^ 2 + t13 ^ 2 + t39 ^ 2, t17, t108, 0, t132, 0, 0, t18 * t131, t20 * t131, -0.2e1 * t7 * t18 + 0.2e1 * t5 * t20, t21 ^ 2 + t7 ^ 2 + t133, t72 * t17, -0.2e1 * t17 * t117, 0.2e1 * t18 * t116, t70 * t17, t74 * t108, t132, 0.2e1 * t118 * t5 + 0.2e1 * t2 * t18, 0.2e1 * t116 * t5 - 0.2e1 * t3 * t18, 0.2e1 * (-t2 * t79 - t3 * t74) * t20, t2 ^ 2 + t3 ^ 2 + t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, t83, 0, -t78 * pkin(7), -t83 * pkin(7), 0, 0, 0, 0, t50, 0, -t48, 0, t33, -t34 (-t48 * t77 - t50 * t82) * pkin(2) (t33 * t82 + t34 * t77) * pkin(2), 0, 0, -t90, 0, t31, 0, t12, -t13, t47 * t31 + t45 * t90, t12 * t45 + t13 * t47, 0, 0, t20, 0, -t18, 0, -t5, -t7, -t29 * t18 + t20 * t96, t7 * t29 + t5 * t96, t14, t9, t15, -t14, t16, 0, t74 * t93 - t125, t79 * t93 + t4, t1, t1 * t27 + t5 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t68, -0.2e1 * t122, 0 (t77 ^ 2 + t82 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t45, -0.2e1 * t47, 0, t45 ^ 2 + t47 ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t96, -0.2e1 * t29, 0, t29 ^ 2 + t96 ^ 2, t70, t56, 0, t72, 0, 0, -0.2e1 * t121, 0.2e1 * t24, 0.2e1 * t114, t110 * t27 ^ 2 + t26 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, -t48, 0, t33, -t34, 0, 0, 0, 0, -t90, 0, t31, 0, t12, -t13 (t31 * t76 + t81 * t90) * pkin(3) (t12 * t81 + t13 * t76) * pkin(3), 0, 0, t20, 0, -t18, 0, -t5, -t7, -t46 * t18 + t20 * t95, t7 * t46 + t5 * t95, t14, t9, t15, -t14, t16, 0, t74 * t92 - t125, t79 * t92 + t4, t1, t1 * t43 + t5 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t68, -t122, 0, 0, 0, 0, 0, 0, 0, 1, t45 + t67, -t106 + (-pkin(3) - t62) * t76, 0 (t45 * t81 + t47 * t76) * pkin(3), 0, 0, 0, 0, 0, 1, t99 * t75 + t37 + t53, t99 * t80 + (-t42 - t61) * t75, 0, t29 * t46 + t95 * t96, t70, t56, 0, t72, 0, 0 (-t26 - t41) * t79, t38 + t24, t139 + t114, t139 * t27 + t26 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t67, -0.2e1 * t123, 0 (t76 ^ 2 + t81 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t95, -0.2e1 * t46, 0, t46 ^ 2 + t95 ^ 2, t70, t56, 0, t72, 0, 0, -0.2e1 * t120, 0.2e1 * t38, 0.2e1 * t139, t110 * t43 ^ 2 + t41 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, 0, t31, 0, t12, -t13, 0, 0, 0, 0, t20, 0, -t18, 0, -t5, -t7 (-t18 * t75 - t20 * t80) * pkin(4) (-t5 * t80 + t7 * t75) * pkin(4), t14, t9, t15, -t14, t16, 0, t74 * t91 - t125, t79 * t91 + t4, t1, t1 * t59 + t5 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t45, -t47, 0, 0, 0, 0, 0, 0, 0, 1, t66 - t96, -t115 + (-pkin(4) - t42) * t75, 0 (t29 * t75 - t80 * t96) * pkin(4), t70, t56, 0, t72, 0, 0 (-t26 - t60) * t79, t55 + t24, t138 + t114, t138 * t27 + t26 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t67, -t123, 0, 0, 0, 0, 0, 0, 0, 1, t66 - t95, -t107 + (-pkin(4) - t61) * t75, 0 (t46 * t75 - t80 * t95) * pkin(4), t70, t56, 0, t72, 0, 0 (-t41 - t60) * t79, t55 + t38, t138 + t139, t138 * t43 + t41 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t66, -0.2e1 * t124, 0 (t75 ^ 2 + t80 ^ 2) * pkin(4) ^ 2, t70, t56, 0, t72, 0, 0, -0.2e1 * t119, 0.2e1 * t55, 0.2e1 * t138, t110 * t59 ^ 2 + t60 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, 0, -t5, -t7, 0, 0, t14, t9, t15, -t14, t16, 0, t74 * t94 - t125, t79 * t94 + t4, t1, -t5 * pkin(5) + pkin(11) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t96, -t29, 0, 0, t70, t56, 0, t72, 0, 0, t69 - t121, t24 - t126, t111 + t114, -t26 * pkin(5) + pkin(11) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t95, -t46, 0, 0, t70, t56, 0, t72, 0, 0, t69 - t120, t38 - t126, t111 + t139, -t41 * pkin(5) + pkin(11) * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t66, -t124, 0, 0, t70, t56, 0, t72, 0, 0, t69 - t119, t55 - t126, t111 + t138, -t60 * pkin(5) + pkin(11) * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, t56, 0, t72, 0, 0, 0.2e1 * t69, -0.2e1 * t126, 0.2e1 * t111, pkin(11) ^ 2 * t110 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, -t118, t18, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t79, 0, -t74 * t27, -t79 * t27, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t79, 0, -t74 * t43, -t79 * t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t79, 0, -t74 * t59, -t79 * t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t79, 0, -t74 * pkin(11), -t79 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
