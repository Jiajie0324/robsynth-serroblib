% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR1_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR1_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR1_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR1_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:29:58
% EndTime: 2019-03-10 03:30:04
% DurationCPUTime: 2.42s
% Computational Cost: add. (7608->244), mult. (16590->373), div. (0->0), fcn. (17003->10), ass. (0->154)
t93 = sin(qJ(4));
t97 = cos(qJ(5));
t172 = t93 * t97;
t92 = sin(qJ(5));
t98 = cos(qJ(4));
t111 = (t92 * t98 + t172) * qJD(4);
t157 = qJD(5) * t97;
t187 = (-t157 * t93 - t111) * pkin(3);
t100 = cos(qJ(2));
t94 = sin(qJ(3));
t95 = sin(qJ(2));
t99 = cos(qJ(3));
t118 = t100 * t99 - t94 * t95;
t68 = t100 * t94 + t95 * t99;
t123 = -t118 * t93 - t68 * t98;
t181 = pkin(7) + pkin(8);
t75 = t181 * t95;
t76 = t181 * t100;
t121 = -t75 * t99 - t76 * t94;
t42 = -pkin(9) * t68 + t121;
t120 = t75 * t94 - t76 * t99;
t43 = pkin(9) * t118 - t120;
t128 = t98 * t42 - t93 * t43;
t28 = pkin(10) * t123 + t128;
t183 = qJD(2) + qJD(3);
t55 = t183 * t118;
t56 = t183 * t68;
t126 = -t93 * t55 - t98 * t56;
t186 = pkin(10) * t126 + qJD(4) * t28;
t184 = t121 * qJD(3);
t96 = cos(qJ(6));
t90 = t96 ^ 2;
t91 = sin(qJ(6));
t163 = t91 ^ 2 - t90;
t135 = t163 * qJD(6);
t141 = qJD(2) * t181;
t69 = t95 * t141;
t70 = t100 * t141;
t122 = t99 * t69 + t94 * t70;
t110 = t56 * pkin(9) + t122;
t136 = t94 * t69 - t70 * t99;
t179 = t55 * pkin(9);
t116 = t136 - t179;
t182 = -(t120 * t93 + t121 * t98) * qJD(3) + t98 * t110 - t93 * t116;
t107 = -qJD(4) * t123 - t126;
t180 = pkin(3) * t93;
t127 = -t93 * t42 - t98 * t43;
t17 = t93 * t110 + t98 * t116 + t127 * qJD(4) + (t120 * t98 - t121 * t93) * qJD(3);
t124 = -t118 * t98 + t68 * t93;
t31 = -qJD(4) * t124 + t98 * t55 - t93 * t56;
t101 = t31 * pkin(10) - t17;
t29 = -pkin(10) * t124 - t127;
t21 = t28 * t92 + t29 * t97;
t36 = qJD(3) * t120 + t136;
t5 = t21 * qJD(5) + t97 * t101 + (t98 * (-t110 + t184) + t93 * (t36 - t179) + t186) * t92;
t3 = t5 * t91;
t178 = t97 * pkin(4);
t20 = -t28 * t97 + t29 * t92;
t88 = qJD(6) * t96;
t177 = t20 * t88 + t3;
t33 = -t123 * t92 + t124 * t97;
t14 = -qJD(5) * t33 - t107 * t92 + t97 * t31;
t34 = -t123 * t97 - t124 * t92;
t176 = t34 * t14;
t175 = t34 * t96;
t15 = qJD(5) * t34 + t107 * t97 + t92 * t31;
t174 = t91 * t15;
t168 = t98 * t94;
t85 = pkin(2) * t99 + pkin(3);
t64 = pkin(2) * t168 + t85 * t93;
t173 = t92 * t64;
t171 = t96 * t14;
t170 = t96 * t15;
t169 = t97 * t64;
t154 = t93 * t94 * pkin(2);
t62 = t85 * t98 + pkin(4) - t154;
t125 = t92 * t62 + t169;
t162 = pkin(2) * qJD(3);
t148 = t99 * t162;
t159 = qJD(4) * t98;
t51 = -t85 * t159 - t98 * t148 + (qJD(3) + qJD(4)) * t154;
t106 = (-t94 * t159 + (-t93 * t99 - t168) * qJD(3)) * pkin(2);
t160 = qJD(4) * t93;
t52 = -t160 * t85 + t106;
t138 = t92 * t51 + t52 * t97;
t27 = qJD(5) * t125 - t138;
t40 = -t62 * t97 - pkin(5) + t173;
t167 = t27 * t91 + t40 * t88;
t158 = qJD(5) * t92;
t84 = pkin(3) * t98 + pkin(4);
t50 = t158 * t84 - t187;
t61 = t180 * t92 - t84 * t97 - pkin(5);
t166 = t50 * t91 + t61 * t88;
t146 = pkin(3) * t159;
t165 = -t146 * t97 - t157 * t84;
t145 = pkin(4) * t158;
t83 = -pkin(5) - t178;
t164 = t145 * t91 + t83 * t88;
t161 = qJD(2) * t95;
t156 = qJD(6) * t91;
t155 = qJD(2) * t100;
t153 = -0.2e1 * pkin(1) * qJD(2);
t152 = -t157 * t62 + t51 * t97 - t52 * t92;
t151 = pkin(5) * t156;
t150 = pkin(5) * t88;
t87 = pkin(2) * t161;
t149 = t94 * t162;
t147 = pkin(3) * t160;
t144 = pkin(4) * t157;
t142 = t91 * t88;
t86 = -t100 * pkin(2) - pkin(1);
t48 = t56 * pkin(3) + t87;
t140 = -0.4e1 * t91 * t175;
t38 = t40 * t156;
t139 = -t27 * t96 + t38;
t57 = t61 * t156;
t137 = -t50 * t96 + t57;
t134 = (qJD(4) + qJD(5)) * t180;
t60 = -pkin(3) * t118 + t86;
t37 = pkin(4) * t124 + t60;
t22 = t33 * pkin(5) - t34 * pkin(11) + t37;
t133 = t21 * t96 + t22 * t91;
t132 = t21 * t91 - t22 * t96;
t41 = pkin(11) + t125;
t131 = t33 * t41 - t34 * t40;
t63 = pkin(3) * t172 + t92 * t84 + pkin(11);
t130 = t33 * t63 - t34 * t61;
t82 = pkin(4) * t92 + pkin(11);
t129 = t33 * t82 - t34 * t83;
t71 = t83 * t156;
t117 = -t145 * t96 + t71;
t115 = t14 * t91 + t34 * t88;
t114 = t156 * t34 - t171;
t113 = t156 * t33 - t170;
t49 = t134 * t92 + t165;
t26 = t158 * t64 + t152;
t109 = t14 * t40 - t15 * t41 + t26 * t33 + t27 * t34;
t108 = t14 * t61 - t15 * t63 + t33 * t49 + t34 * t50;
t105 = t14 * t83 - t15 * t82 + (-t33 * t97 + t34 * t92) * qJD(5) * pkin(4);
t23 = pkin(4) * t107 + t48;
t80 = 0.2e1 * t142;
t66 = -0.2e1 * t135;
t35 = t122 - t184;
t32 = t34 ^ 2;
t18 = t20 * t156;
t16 = -qJD(4) * t128 + t182;
t13 = t33 * t88 + t174;
t8 = -t135 * t34 + t171 * t91;
t7 = qJD(6) * t140 - t14 * t163;
t6 = t15 * pkin(5) - t14 * pkin(11) + t23;
t4 = t29 * t158 - t97 * (-t182 + t186) - t28 * t157 + t92 * t101;
t2 = -qJD(6) * t133 + t91 * t4 + t96 * t6;
t1 = qJD(6) * t132 + t96 * t4 - t91 * t6;
t9 = [0, 0, 0, 0.2e1 * t95 * t155, 0.2e1 * (t100 ^ 2 - t95 ^ 2) * qJD(2), 0, 0, 0, t95 * t153, t100 * t153, 0.2e1 * t68 * t55, 0.2e1 * t118 * t55 - 0.2e1 * t56 * t68, 0, 0, 0, -0.2e1 * t118 * t87 + 0.2e1 * t56 * t86, 0.2e1 * t55 * t86 + 0.2e1 * t68 * t87, -0.2e1 * t123 * t31, 0.2e1 * t107 * t123 - 0.2e1 * t124 * t31, 0, 0, 0, 0.2e1 * t107 * t60 + 0.2e1 * t124 * t48, -0.2e1 * t123 * t48 + 0.2e1 * t31 * t60, 0.2e1 * t176, -0.2e1 * t14 * t33 - 0.2e1 * t15 * t34, 0, 0, 0, 0.2e1 * t15 * t37 + 0.2e1 * t23 * t33, 0.2e1 * t14 * t37 + 0.2e1 * t23 * t34, -0.2e1 * t142 * t32 + 0.2e1 * t176 * t90, 0.2e1 * t135 * t32 + t14 * t140, -0.2e1 * t114 * t33 + 0.2e1 * t170 * t34, -0.2e1 * t115 * t33 - 0.2e1 * t174 * t34, 0.2e1 * t33 * t15, 0.2e1 * t115 * t20 - 0.2e1 * t132 * t15 + 0.2e1 * t2 * t33 + 0.2e1 * t3 * t34, 0.2e1 * t1 * t33 - 0.2e1 * t114 * t20 - 0.2e1 * t133 * t15 + 0.2e1 * t175 * t5; 0, 0, 0, 0, 0, t155, -t161, 0, -pkin(7) * t155, pkin(7) * t161, 0, 0, t55, -t56, 0, t36, t35, 0, 0, t31, -t107, 0, t17, t16, 0, 0, t14, -t15, 0, -t5, t4, t8, t7, t13, -t113, 0, t18 + (-qJD(6) * t131 - t5) * t96 + t109 * t91, t109 * t96 + t131 * t156 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t149, -0.2e1 * t148, 0, 0, 0, 0, 0, 0.2e1 * t52, 0.2e1 * t51, 0, 0, 0, 0, 0, -0.2e1 * t27, 0.2e1 * t26, t80, t66, 0, 0, 0, 0.2e1 * t139, 0.2e1 * t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t56, 0, t36, t35, 0, 0, t31, -t107, 0, t17, t16, 0, 0, t14, -t15, 0, -t5, t4, t8, t7, t13, -t113, 0, t18 + (-qJD(6) * t130 - t5) * t96 + t108 * t91, t108 * t96 + t130 * t156 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, -t148, 0, 0, 0, 0, 0 (-pkin(3) - t85) * t160 + t106, t51 - t146, 0, 0, 0, 0, 0, -pkin(3) * t111 + ((-t64 - t180) * t97 + (-t62 - t84) * t92) * qJD(5) + t138 (qJD(5) * t64 + t134) * t92 + t152 + t165, t80, t66, 0, 0, 0, t38 + t57 + (-t27 - t50) * t96, t166 + t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t147, -0.2e1 * t146, 0, 0, 0, 0, 0, -0.2e1 * t50, 0.2e1 * t49, t80, t66, 0, 0, 0, 0.2e1 * t137, 0.2e1 * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, -t107, 0, t17, t16, 0, 0, t14, -t15, 0, -t5, t4, t8, t7, t13, -t113, 0, t18 + (-qJD(6) * t129 - t5) * t96 + t105 * t91, t105 * t96 + t129 * t156 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t51, 0, 0, 0, 0, 0 (-t169 + (-pkin(4) - t62) * t92) * qJD(5) + t138 (t173 - t178) * qJD(5) + t152, t80, t66, 0, 0, 0, t38 + t71 + (-t27 - t145) * t96, t164 + t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147, -t146, 0, 0, 0, 0, 0 (-pkin(4) - t84) * t158 + t187, t49 - t144, t80, t66, 0, 0, 0, t57 + t71 + (-t50 - t145) * t96, t164 + t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t145, -0.2e1 * t144, t80, t66, 0, 0, 0, 0.2e1 * t117, 0.2e1 * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t15, 0, -t5, t4, t8, t7, t13, -t113, 0, t18 + (-pkin(5) * t14 - pkin(11) * t15) * t91 + (-t5 + (-pkin(5) * t34 - pkin(11) * t33) * qJD(6)) * t96, pkin(5) * t114 + pkin(11) * t113 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t26, t80, t66, 0, 0, 0, t139 - t151, -t150 + t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t49, t80, t66, 0, 0, 0, t137 - t151, -t150 + t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t144, t80, t66, 0, 0, 0, t117 - t151, -t150 + t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t66, 0, 0, 0, -0.2e1 * t151, -0.2e1 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t114, -t115, t15, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, -t156, 0, t26 * t91 - t41 * t88, t156 * t41 + t26 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, -t156, 0, t49 * t91 - t63 * t88, t156 * t63 + t49 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, -t156, 0, -t144 * t91 - t82 * t88, -t144 * t96 + t156 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, -t156, 0, -pkin(11) * t88, pkin(11) * t156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t9;
