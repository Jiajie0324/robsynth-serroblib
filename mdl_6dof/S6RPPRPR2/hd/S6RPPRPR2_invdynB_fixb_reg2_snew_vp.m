% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:04
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:03:03
% EndTime: 2019-05-05 14:03:29
% DurationCPUTime: 27.59s
% Computational Cost: add. (59781->725), mult. (136978->1060), div. (0->0), fcn. (95438->10), ass. (0->498)
t817 = qJD(4) ^ 2;
t806 = sin(pkin(10));
t808 = cos(pkin(10));
t812 = sin(qJ(4));
t815 = cos(qJ(4));
t834 = t806 * t815 + t808 * t812;
t760 = t834 * qJD(1);
t897 = t760 ^ 2;
t740 = t897 - t817;
t868 = t806 * t812;
t758 = (-t808 * t815 + t868) * qJD(1);
t872 = t760 * t758;
t942 = qJDD(4) - t872;
t953 = t812 * t942;
t636 = t740 * t815 - t953;
t952 = t815 * t942;
t641 = t740 * t812 + t952;
t569 = t636 * t806 + t641 * t808;
t807 = sin(pkin(9));
t977 = t569 * t807;
t809 = cos(pkin(9));
t976 = t569 * t809;
t739 = t897 + t817;
t941 = qJDD(4) + t872;
t951 = t941 * t812;
t634 = t739 * t815 + t951;
t950 = t941 * t815;
t640 = -t739 * t812 + t950;
t564 = t634 * t808 + t640 * t806;
t975 = pkin(1) * t564;
t974 = qJ(3) * t564;
t571 = t634 * t806 - t640 * t808;
t973 = qJ(3) * t571;
t898 = t758 ^ 2;
t735 = t898 - t817;
t632 = t735 * t812 + t950;
t639 = -t735 * t815 + t951;
t567 = t632 * t806 + t639 * t808;
t972 = t567 * t807;
t971 = t567 * t809;
t970 = t571 * t807;
t969 = t571 * t809;
t968 = -pkin(2) * t564 - pkin(3) * t634;
t967 = t636 * t808 - t641 * t806;
t965 = pkin(7) * t634;
t964 = pkin(7) * t640;
t963 = t632 * t808 - t639 * t806;
t689 = -t817 - t898;
t605 = t689 * t812 + t952;
t608 = -t689 * t815 + t953;
t528 = t605 * t808 - t608 * t806;
t962 = pkin(1) * t528;
t961 = qJ(3) * t528;
t531 = t605 * t806 + t608 * t808;
t960 = qJ(3) * t531;
t959 = t531 * t807;
t958 = t531 * t809;
t957 = -pkin(2) * t528 - pkin(3) * t605;
t955 = pkin(7) * t605;
t954 = pkin(7) * t608;
t813 = sin(qJ(1));
t816 = cos(qJ(1));
t781 = g(1) * t816 + g(2) * t813;
t896 = qJD(1) ^ 2;
t770 = -pkin(1) * t896 - t781;
t780 = g(1) * t813 - t816 * g(2);
t831 = qJDD(1) * pkin(1) + t780;
t705 = t809 * t770 + t807 * t831;
t924 = -pkin(2) * t896 + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t705;
t704 = t807 * t770 - t809 * t831;
t844 = t704 * t807 + t809 * t705;
t620 = t704 * t809 - t705 * t807;
t889 = t620 * t813;
t549 = t816 * t844 + t889;
t888 = t620 * t816;
t943 = -t813 * t844 + t888;
t859 = qJDD(1) * t807;
t773 = t809 * t896 + t859;
t857 = qJDD(1) * t809;
t774 = -t807 * t896 + t857;
t710 = -t773 * t813 + t816 * t774;
t803 = g(3) - qJDD(2);
t734 = qJ(2) * t773 - t803 * t809;
t837 = -qJ(2) * t774 - t803 * t807;
t940 = -pkin(6) * t710 + t734 * t813 + t816 * t837;
t850 = t807 * t872;
t858 = qJDD(1) * t808;
t756 = qJDD(1) * t868 - t815 * t858;
t862 = t760 * qJD(4);
t697 = t756 + t862;
t746 = t758 * qJD(4);
t829 = t697 * t812 + t746 * t815;
t839 = -t815 * t697 + t746 * t812;
t902 = -t806 * t839 + t808 * t829;
t916 = t809 * t902 - t850;
t849 = t809 * t872;
t919 = t807 * t902 + t849;
t939 = -t813 * t919 + t816 * t916;
t938 = t813 * t916 + t816 * t919;
t907 = t834 * qJDD(1);
t699 = t907 - t746;
t838 = t815 * t699 - t812 * t862;
t840 = t812 * t699 + t815 * t862;
t900 = -t806 * t840 + t808 * t838;
t917 = t809 * t900 + t850;
t920 = t807 * t900 - t849;
t937 = -t813 * t920 + t816 * t917;
t936 = t813 * t917 + t816 * t920;
t827 = (-t758 * t812 - t760 * t815) * qJD(4);
t828 = (-t758 * t815 + t760 * t812) * qJD(4);
t903 = -t806 * t827 + t808 * t828;
t918 = -qJDD(4) * t809 + t807 * t903;
t921 = t807 * qJDD(4) + t809 * t903;
t935 = t813 * t921 + t816 * t918;
t934 = -t813 * t918 + t816 * t921;
t908 = -t898 - t897;
t933 = pkin(2) * t908;
t932 = pkin(3) * t908;
t664 = -t746 + t699;
t931 = qJ(5) * t664;
t930 = t807 * t908;
t909 = -t897 + t898;
t929 = t807 * t909;
t928 = t809 * t908;
t927 = t809 * t909;
t811 = sin(qJ(6));
t814 = cos(qJ(6));
t725 = qJD(4) * t811 - t814 * t758;
t727 = qJD(4) * t814 + t758 * t811;
t668 = t727 * t725;
t685 = qJDD(6) + t699;
t911 = -t668 + t685;
t926 = t811 * t911;
t925 = t814 * t911;
t819 = t808 ^ 2;
t795 = t819 * t896;
t800 = t806 ^ 2;
t863 = t896 * t800;
t776 = t795 + t863;
t910 = t816 * t773 + t774 * t813;
t922 = pkin(6) * t910 + t734 * t816 - t813 * t837;
t906 = t896 * (t800 + t819);
t768 = t808 * t906;
t717 = -t768 * t807 + t808 * t857;
t719 = t768 * t809 + t807 * t858;
t645 = t717 * t816 - t719 * t813;
t915 = t717 * t813 + t719 * t816;
t663 = t746 + t699;
t904 = t806 * t828 + t808 * t827;
t901 = t806 * t829 + t808 * t839;
t899 = t806 * t838 + t808 * t840;
t723 = t725 ^ 2;
t724 = t727 ^ 2;
t750 = qJD(6) + t760;
t748 = t750 ^ 2;
t895 = -2 * qJD(5);
t894 = 2 * qJD(5);
t893 = pkin(4) + pkin(8);
t892 = pkin(4) * t815;
t805 = qJDD(1) * pkin(2);
t787 = t808 * t803;
t861 = t808 * t896;
t624 = -t787 + (pkin(3) * t861 - pkin(7) * qJDD(1) - t924) * t806;
t659 = -t806 * t803 + t924 * t808;
t628 = -pkin(3) * t795 + pkin(7) * t858 + t659;
t551 = -t815 * t624 + t812 * t628;
t552 = t812 * t624 + t815 * t628;
t464 = -t551 * t815 + t552 * t812;
t891 = t464 * t806;
t890 = t464 * t808;
t676 = -t896 * qJ(3) + qJDD(3) + t704 - t805;
t657 = -pkin(3) * t858 - t776 * pkin(7) + t676;
t887 = t657 * t812;
t886 = t657 * t815;
t661 = t697 + t862;
t885 = t661 * t815;
t884 = t664 * t812;
t883 = t676 * t807;
t882 = t676 * t809;
t875 = t725 * t750;
t874 = t750 * t811;
t873 = t750 * t814;
t869 = t806 * t807;
t730 = pkin(5) * t760 - qJD(4) * pkin(8);
t684 = pkin(4) * t758 - qJ(5) * t760;
t833 = -t817 * pkin(4) - t758 * t684 + t552;
t856 = qJDD(4) * qJ(5);
t469 = t856 - t697 * pkin(5) - t898 * pkin(8) + (t894 + t730) * qJD(4) + t833;
t867 = t811 * t469;
t603 = t668 + t685;
t866 = t811 * t603;
t865 = t814 * t469;
t864 = t814 * t603;
t854 = -t724 - t748;
t852 = t812 * t668;
t851 = t815 * t668;
t626 = -t725 * qJD(6) + t814 * qJDD(4) + t811 * t697;
t848 = t806 * t858;
t847 = qJ(5) * t812 + pkin(3);
t846 = -t676 + t805;
t845 = pkin(4) * qJD(4) + t895;
t465 = t551 * t812 + t815 * t552;
t658 = t924 * t806 + t787;
t579 = t658 * t806 + t808 * t659;
t722 = -t780 * t813 - t816 * t781;
t842 = t811 * qJDD(4) - t814 * t697;
t779 = qJDD(1) * t816 - t813 * t896;
t841 = -pkin(6) * t779 - g(3) * t813;
t830 = -qJDD(4) * pkin(4) - t817 * qJ(5) + t760 * t684 + qJDD(5) + t551;
t466 = pkin(5) * t663 - pkin(8) * t942 + t830;
t823 = t697 * pkin(4) + t657 - t931;
t472 = (-t730 + t845) * t760 + t697 * pkin(8) + t823 - t898 * pkin(5);
t413 = -t466 * t814 + t472 * t811;
t414 = t466 * t811 + t472 * t814;
t372 = -t814 * t413 + t811 * t414;
t373 = t811 * t413 + t814 * t414;
t578 = t658 * t808 - t659 * t806;
t728 = t773 * t808 * t806;
t729 = t809 * t848 - t861 * t869;
t836 = t728 * t816 + t729 * t813;
t835 = t728 * t813 - t729 * t816;
t721 = t780 * t816 - t781 * t813;
t832 = t626 - t875;
t825 = (-qJD(6) + t750) * t727 - t842;
t824 = qJD(4) * t895 - t833;
t498 = -t824 + t856;
t821 = -t760 * t894 + t823;
t793 = t819 * qJDD(1);
t791 = t800 * qJDD(1);
t778 = qJDD(1) * t813 + t816 * t896;
t777 = t795 - t863;
t772 = t793 - t791;
t771 = t793 + t791;
t767 = t806 * t906;
t751 = -pkin(6) * t778 + g(3) * t816;
t718 = t767 * t809 + t806 * t859;
t715 = t767 * t807 - t806 * t857;
t709 = t772 * t809 - t777 * t807;
t708 = t771 * t809 - t776 * t807;
t707 = t772 * t807 + t777 * t809;
t706 = t771 * t807 + t776 * t809;
t698 = t907 - 0.2e1 * t746;
t696 = t756 + 0.2e1 * t862;
t670 = -t724 + t748;
t669 = t723 - t748;
t665 = t724 - t723;
t662 = -t697 + t862;
t646 = -t715 * t813 + t718 * t816;
t644 = t715 * t816 + t718 * t813;
t630 = -t706 * t813 + t708 * t816;
t629 = t706 * t816 + t708 * t813;
t627 = -t748 - t723;
t625 = -qJD(6) * t727 - t842;
t615 = -t723 - t724;
t614 = t663 * t812 - t756 * t815;
t613 = -t696 * t815 - t698 * t812;
t612 = t662 * t815 + t812 * t907;
t611 = -t663 * t815 - t756 * t812;
t610 = -t696 * t812 + t698 * t815;
t609 = t662 * t812 - t815 * t907;
t604 = pkin(1) * t803 + qJ(2) * t844;
t600 = (t725 * t814 - t727 * t811) * t750;
t599 = (t725 * t811 + t727 * t814) * t750;
t592 = -t884 - t885;
t591 = -t661 * t812 + t664 * t815;
t589 = t626 + t875;
t585 = (qJD(6) + t750) * t727 + t842;
t583 = -t626 * t814 + t727 * t874;
t582 = -t626 * t811 - t727 * t873;
t581 = t625 * t811 - t725 * t873;
t580 = -t625 * t814 - t725 * t874;
t576 = t886 + t965;
t563 = -t599 * t812 + t685 * t815;
t562 = t599 * t815 + t685 * t812;
t561 = -qJ(2) * t715 - t659 * t807 + t808 * t882;
t560 = -qJ(2) * t717 - t658 * t807 + t806 * t882;
t559 = qJ(2) * t718 + t659 * t809 + t808 * t883;
t558 = -qJ(2) * t719 + t658 * t809 + t676 * t869;
t557 = -t669 * t814 + t866;
t556 = t670 * t811 - t925;
t555 = -t669 * t811 - t864;
t554 = -t670 * t814 - t926;
t553 = t887 - t955;
t547 = -t811 * t854 - t864;
t546 = t814 * t854 - t866;
t545 = t807 * t907 + t976;
t544 = -t756 * t807 - t971;
t543 = -t809 * t907 + t977;
t542 = t756 * t809 - t972;
t541 = -qJ(2) * t706 + t578 * t809;
t540 = qJ(2) * t708 + t578 * t807;
t539 = -t611 * t806 + t614 * t808;
t538 = -t610 * t806 + t613 * t808;
t537 = -t609 * t806 + t612 * t808;
t536 = t611 * t808 + t614 * t806;
t535 = t609 * t808 + t612 * t806;
t534 = -pkin(3) * t698 + t887 - t964;
t533 = t814 * t627 - t926;
t532 = t811 * t627 + t925;
t519 = t579 * t809 + t883;
t518 = t579 * t807 - t882;
t517 = t698 * t807 + t969;
t516 = -t698 * t809 + t970;
t515 = -t582 * t812 + t851;
t514 = -t580 * t812 - t851;
t513 = t582 * t815 + t852;
t512 = t580 * t815 - t852;
t511 = -pkin(3) * t696 - t886 - t954;
t510 = t760 * t845 + t823;
t509 = -t663 * t807 - t976;
t508 = -t664 * t807 - t969;
t507 = -t662 * t807 + t971;
t506 = t663 * t809 - t977;
t505 = t664 * t809 - t970;
t504 = t662 * t809 + t972;
t503 = t538 * t809 - t929;
t502 = t538 * t807 + t927;
t501 = t696 * t807 - t958;
t500 = -t696 * t809 - t959;
t497 = t539 * t809 + t930;
t496 = t537 * t809 + t930;
t495 = t539 * t807 - t928;
t494 = t537 * t807 - t928;
t493 = -t661 * t807 + t958;
t492 = t661 * t809 + t959;
t491 = -t591 * t806 + t592 * t808;
t490 = t811 * t589 + t814 * t825;
t489 = t585 * t814 + t811 * t832;
t488 = -t589 * t814 + t811 * t825;
t487 = t585 * t811 - t814 * t832;
t486 = -pkin(2) * t535 - pkin(3) * t609;
t485 = (t661 + t862) * pkin(4) + t821;
t484 = -pkin(4) * t862 - t821 + t931;
t483 = -t554 * t812 + t589 * t815;
t482 = -t555 * t812 + t815 * t825;
t481 = t554 * t815 + t589 * t812;
t480 = t555 * t815 + t812 * t825;
t479 = -qJ(5) * t908 + t830;
t478 = -pkin(4) * t908 + t498;
t477 = t491 * t809 - t929;
t476 = t491 * t807 + t927;
t475 = t546 * t812 + t815 * t832;
t474 = -t546 * t815 + t812 * t832;
t473 = -t562 * t806 + t563 * t808;
t471 = t532 * t812 + t585 * t815;
t470 = -t532 * t815 + t585 * t812;
t468 = -t487 * t812 + t665 * t815;
t467 = t487 * t815 + t665 * t812;
t463 = -pkin(2) * t536 - pkin(3) * t611 + pkin(4) * t663 + qJ(5) * t756;
t462 = t488 * t812 + t615 * t815;
t461 = -t488 * t815 + t615 * t812;
t460 = t552 - t968;
t459 = -t518 * t813 + t519 * t816;
t458 = t518 * t816 + t519 * t813;
t457 = -t516 * t813 + t517 * t816;
t456 = t516 * t816 + t517 * t813;
t455 = -t513 * t806 + t515 * t808;
t454 = -t512 * t806 + t514 * t808;
t453 = -pkin(3) * t657 + pkin(7) * t465;
t452 = -pkin(4) * t884 + t484 * t815 - t965;
t451 = t473 * t809 - t600 * t807;
t450 = t473 * t807 + t600 * t809;
t449 = -pkin(7) * t609 - t464;
t448 = qJ(5) * t885 - t485 * t812 + t955;
t447 = t551 + t957;
t446 = -t505 * t813 + t508 * t816;
t445 = t505 * t816 + t508 * t813;
t444 = -t500 * t813 + t501 * t816;
t443 = t500 * t816 + t501 * t813;
t442 = t964 + t812 * t484 + (pkin(3) + t892) * t664;
t441 = -qJ(2) * t518 - (pkin(2) * t807 - qJ(3) * t809) * t578;
t440 = t498 * t815 + t812 * t830;
t439 = t498 * t812 - t815 * t830;
t438 = -t534 * t806 + t576 * t808 + t974;
t437 = pkin(7) * t612 + t465 - t932;
t436 = t815 * t485 + t661 * t847 + t954;
t435 = -t495 * t813 + t497 * t816;
t434 = -t494 * t813 + t496 * t816;
t433 = t495 * t816 + t497 * t813;
t432 = t494 * t816 + t496 * t813;
t431 = -t492 * t813 + t493 * t816;
t430 = t492 * t816 + t493 * t813;
t429 = -pkin(4) * t739 + (-qJDD(4) - t941) * qJ(5) + t824 + t968;
t428 = pkin(5) * t488 - qJ(5) * t490;
t427 = t455 * t809 - t583 * t807;
t426 = t454 * t809 - t581 * t807;
t425 = t455 * t807 + t583 * t809;
t424 = t454 * t807 + t581 * t809;
t423 = -t511 * t806 + t553 * t808 - t961;
t422 = -t481 * t806 + t483 * t808;
t421 = -t480 * t806 + t482 * t808;
t420 = pkin(4) * t942 + qJ(5) * t689 - t830 - t957;
t419 = qJ(2) * t519 - (-pkin(2) * t809 - qJ(3) * t807 - pkin(1)) * t578;
t418 = -t474 * t806 + t475 * t808;
t417 = t474 * t808 + t475 * t806;
t416 = -t470 * t806 + t471 * t808;
t415 = t470 * t808 + t471 * t806;
t411 = -t467 * t806 + t468 * t808;
t410 = -pkin(7) * t611 - t478 * t812 + t479 * t815;
t409 = t465 * t808 - t891;
t408 = t465 * t806 + t890;
t407 = -t461 * t806 + t462 * t808;
t406 = t461 * t808 + t462 * t806;
t405 = pkin(7) * t614 + t478 * t815 + t479 * t812 - t932;
t404 = t422 * t809 - t556 * t807;
t403 = t421 * t809 - t557 * t807;
t402 = t422 * t807 + t556 * t809;
t401 = t421 * t807 + t557 * t809;
t400 = t409 * t809 + t657 * t807;
t399 = t409 * t807 - t657 * t809;
t398 = pkin(5) * t832 - t547 * t893 - t867;
t397 = t418 * t809 + t547 * t807;
t396 = t418 * t807 - t547 * t809;
t395 = pkin(5) * t585 - t533 * t893 + t865;
t394 = t416 * t809 + t533 * t807;
t393 = t416 * t807 - t533 * t809;
t392 = -pkin(7) * t439 + (pkin(4) * t812 - qJ(5) * t815) * t510;
t391 = t411 * t809 - t489 * t807;
t390 = t411 * t807 + t489 * t809;
t389 = -t439 * t806 + t440 * t808;
t388 = t439 * t808 + t440 * t806;
t387 = t407 * t809 + t490 * t807;
t386 = t407 * t807 - t490 * t809;
t385 = pkin(5) * t546 - qJ(5) * t547 - t414;
t384 = pkin(5) * t532 - qJ(5) * t533 - t413;
t383 = -pkin(2) * t408 - pkin(3) * t464;
t382 = -t442 * t806 + t452 * t808 - t974;
t381 = -qJ(2) * t516 + t438 * t809 - t460 * t807;
t380 = -qJ(3) * t535 - t437 * t806 + t449 * t808;
t379 = -t436 * t806 + t448 * t808 + t961;
t378 = pkin(7) * t440 + (-t847 - t892) * t510;
t377 = t389 * t809 + t510 * t807;
t376 = t389 * t807 - t510 * t809;
t375 = qJ(2) * t517 + t438 * t807 + t460 * t809 + t975;
t374 = -qJ(2) * t500 + t423 * t809 - t447 * t807;
t371 = qJ(2) * t501 + t423 * t807 + t447 * t809 - t962;
t370 = -pkin(7) * t890 - qJ(3) * t408 - t453 * t806;
t369 = -t399 * t813 + t400 * t816;
t368 = t399 * t816 + t400 * t813;
t367 = -qJ(3) * t536 - t405 * t806 + t410 * t808;
t366 = -qJ(2) * t494 + t380 * t809 - t486 * t807;
t365 = -t396 * t813 + t397 * t816;
t364 = t396 * t816 + t397 * t813;
t363 = t372 * t812 + t469 * t815;
t362 = -t372 * t815 + t469 * t812;
t361 = -t393 * t813 + t394 * t816;
t360 = t393 * t816 + t394 * t813;
t359 = -pkin(2) * t417 - pkin(3) * t474 - qJ(5) * t832 + t546 * t893 - t865;
t358 = -pkin(2) * t415 - pkin(3) * t470 - qJ(5) * t585 + t532 * t893 - t867;
t357 = -qJ(2) * t505 + t382 * t809 - t429 * t807;
t356 = -pkin(1) * t535 + qJ(2) * t496 + t380 * t807 + t486 * t809;
t355 = -pkin(2) * t388 - pkin(3) * t439 + pkin(4) * t830 - qJ(5) * t498;
t354 = pkin(5) * t615 - t490 * t893 - t373;
t353 = qJ(2) * t508 + t382 * t807 + t429 * t809 - t975;
t352 = -qJ(2) * t492 + t379 * t809 - t420 * t807;
t351 = -t386 * t813 + t387 * t816;
t350 = t386 * t816 + t387 * t813;
t349 = -pkin(7) * t474 + t385 * t815 - t398 * t812;
t348 = qJ(2) * t493 + t379 * t807 + t420 * t809 + t962;
t347 = -pkin(7) * t470 + t384 * t815 - t395 * t812;
t346 = -qJ(2) * t495 + t367 * t809 - t463 * t807;
t345 = -pkin(3) * t547 + pkin(7) * t475 + t385 * t812 + t398 * t815;
t344 = -pkin(3) * t533 + pkin(7) * t471 + t384 * t812 + t395 * t815;
t343 = -t376 * t813 + t377 * t816;
t342 = t376 * t816 + t377 * t813;
t341 = -pkin(1) * t536 + qJ(2) * t497 + t367 * t807 + t463 * t809;
t340 = pkin(5) * t372 - qJ(5) * t373;
t339 = -pkin(7) * t461 - t354 * t812 + t428 * t815;
t338 = pkin(5) * t469 - t373 * t893;
t337 = -qJ(3) * t388 - t378 * t806 + t392 * t808;
t336 = -pkin(2) * t406 - pkin(3) * t461 - qJ(5) * t615 + t488 * t893 + t372;
t335 = -pkin(3) * t490 + pkin(7) * t462 + t354 * t815 + t428 * t812;
t334 = -qJ(2) * t399 + t370 * t809 - t383 * t807;
t333 = -t362 * t806 + t363 * t808;
t332 = t362 * t808 + t363 * t806;
t331 = -pkin(1) * t408 + qJ(2) * t400 + t370 * t807 + t383 * t809;
t330 = t333 * t809 + t373 * t807;
t329 = t333 * t807 - t373 * t809;
t328 = -qJ(3) * t417 - t345 * t806 + t349 * t808;
t327 = -qJ(3) * t415 - t344 * t806 + t347 * t808;
t326 = -qJ(2) * t376 + t337 * t809 - t355 * t807;
t325 = -qJ(3) * t406 - t335 * t806 + t339 * t808;
t324 = -pkin(1) * t388 + qJ(2) * t377 + t337 * t807 + t355 * t809;
t323 = -pkin(7) * t362 - t338 * t812 + t340 * t815;
t322 = -qJ(2) * t396 + t328 * t809 - t359 * t807;
t321 = -qJ(2) * t393 + t327 * t809 - t358 * t807;
t320 = -pkin(2) * t332 - pkin(3) * t362 - qJ(5) * t469 + t372 * t893;
t319 = -pkin(1) * t417 + qJ(2) * t397 + t328 * t807 + t359 * t809;
t318 = -pkin(1) * t415 + qJ(2) * t394 + t327 * t807 + t358 * t809;
t317 = -pkin(3) * t373 + pkin(7) * t363 + t338 * t815 + t340 * t812;
t316 = -t329 * t813 + t330 * t816;
t315 = t329 * t816 + t330 * t813;
t314 = -qJ(2) * t386 + t325 * t809 - t336 * t807;
t313 = -pkin(1) * t406 + qJ(2) * t387 + t325 * t807 + t336 * t809;
t312 = -qJ(3) * t332 - t317 * t806 + t323 * t808;
t311 = -qJ(2) * t329 + t312 * t809 - t320 * t807;
t310 = -pkin(1) * t332 + qJ(2) * t330 + t312 * t807 + t320 * t809;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t778, -t779, 0, t722, 0, 0, 0, 0, 0, 0, -t910, -t710, 0, t549, 0, 0, 0, 0, 0, 0, -t915, t646, t630, t459, 0, 0, 0, 0, 0, 0, t444, t457, t434, t369, 0, 0, 0, 0, 0, 0, t435, t431, t446, t343, 0, 0, 0, 0, 0, 0, t361, t365, t351, t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t779, -t778, 0, t721, 0, 0, 0, 0, 0, 0, t710, -t910, 0, -t943, 0, 0, 0, 0, 0, 0, t645, t644, t629, t458, 0, 0, 0, 0, 0, 0, t443, t456, t432, t368, 0, 0, 0, 0, 0, 0, t433, t430, t445, t342, 0, 0, 0, 0, 0, 0, t360, t364, t350, t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t578, 0, 0, 0, 0, 0, 0, t528, -t564, t535, t408, 0, 0, 0, 0, 0, 0, t536, -t528, t564, t388, 0, 0, 0, 0, 0, 0, t415, t417, t406, t332; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t779, 0, -t778, 0, t841, -t751, -t721, -pkin(6) * t721, 0, 0, t710, 0, -t910, 0, t940, t922, t943, pkin(6) * t943 + qJ(2) * t888 - t604 * t813, -t835, -t707 * t813 + t709 * t816, t646, t835, t915, 0, -pkin(6) * t645 - t558 * t813 + t560 * t816, -pkin(6) * t644 - t559 * t813 + t561 * t816, -pkin(6) * t629 - t540 * t813 + t541 * t816, -pkin(6) * t458 - t419 * t813 + t441 * t816, t937, -t502 * t813 + t503 * t816, -t543 * t813 + t545 * t816, t939, -t542 * t813 + t544 * t816, t934, -pkin(6) * t443 - t371 * t813 + t374 * t816, -pkin(6) * t456 - t375 * t813 + t381 * t816, -pkin(6) * t432 - t356 * t813 + t366 * t816, -pkin(6) * t368 - t331 * t813 + t334 * t816, t934, -t506 * t813 + t509 * t816, -t504 * t813 + t507 * t816, t937, -t476 * t813 + t477 * t816, t939, -pkin(6) * t433 - t341 * t813 + t346 * t816, -pkin(6) * t430 - t348 * t813 + t352 * t816, -pkin(6) * t445 - t353 * t813 + t357 * t816, -pkin(6) * t342 - t324 * t813 + t326 * t816, -t425 * t813 + t427 * t816, -t390 * t813 + t391 * t816, -t402 * t813 + t404 * t816, -t424 * t813 + t426 * t816, -t401 * t813 + t403 * t816, -t450 * t813 + t451 * t816, -pkin(6) * t360 - t318 * t813 + t321 * t816, -pkin(6) * t364 - t319 * t813 + t322 * t816, -pkin(6) * t350 - t313 * t813 + t314 * t816, -pkin(6) * t315 - t310 * t813 + t311 * t816; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t778, 0, t779, 0, t751, t841, t722, pkin(6) * t722, 0, 0, t910, 0, t710, 0, -t922, t940, t549, pkin(6) * t549 + qJ(2) * t889 + t604 * t816, t836, t707 * t816 + t709 * t813, t644, -t836, -t645, 0, -pkin(6) * t915 + t558 * t816 + t560 * t813, pkin(6) * t646 + t559 * t816 + t561 * t813, pkin(6) * t630 + t540 * t816 + t541 * t813, pkin(6) * t459 + t419 * t816 + t441 * t813, t936, t502 * t816 + t503 * t813, t543 * t816 + t545 * t813, t938, t542 * t816 + t544 * t813, t935, pkin(6) * t444 + t371 * t816 + t374 * t813, pkin(6) * t457 + t375 * t816 + t381 * t813, pkin(6) * t434 + t356 * t816 + t366 * t813, pkin(6) * t369 + t331 * t816 + t334 * t813, t935, t506 * t816 + t509 * t813, t504 * t816 + t507 * t813, t936, t476 * t816 + t477 * t813, t938, pkin(6) * t435 + t341 * t816 + t346 * t813, pkin(6) * t431 + t348 * t816 + t352 * t813, pkin(6) * t446 + t353 * t816 + t357 * t813, pkin(6) * t343 + t324 * t816 + t326 * t813, t425 * t816 + t427 * t813, t390 * t816 + t391 * t813, t402 * t816 + t404 * t813, t424 * t816 + t426 * t813, t401 * t816 + t403 * t813, t450 * t816 + t451 * t813, pkin(6) * t361 + t318 * t816 + t321 * t813, pkin(6) * t365 + t319 * t816 + t322 * t813, pkin(6) * t351 + t313 * t816 + t314 * t813, pkin(6) * t316 + t310 * t816 + t311 * t813; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t780, t781, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t774 - t704, -pkin(1) * t773 - t705, 0, -pkin(1) * t620, t791, 0.2e1 * t848, 0, t793, 0, 0, pkin(1) * t717 - qJ(3) * t768 + t808 * t846, pkin(1) * t715 + qJ(3) * t767 - t806 * t846, pkin(1) * t706 + pkin(2) * t776 + qJ(3) * t771 + t579, pkin(1) * t518 - pkin(2) * t676 + qJ(3) * t579, t899, t610 * t808 + t613 * t806, -t967, t901, t963, t904, pkin(1) * t500 - pkin(2) * t696 + t511 * t808 + t553 * t806 - t960, pkin(1) * t516 - pkin(2) * t698 + t534 * t808 + t576 * t806 + t973, pkin(1) * t494 + qJ(3) * t537 + t437 * t808 + t449 * t806 - t933, pkin(1) * t399 - pkin(2) * t657 - pkin(7) * t891 + qJ(3) * t409 + t453 * t808, t904, t967, -t963, t899, t591 * t808 + t592 * t806, t901, pkin(1) * t495 + qJ(3) * t539 + t405 * t808 + t410 * t806 - t933, pkin(1) * t492 + pkin(2) * t661 + t436 * t808 + t448 * t806 + t960, pkin(1) * t505 + pkin(2) * t664 + t442 * t808 + t452 * t806 - t973, pkin(1) * t376 - pkin(2) * t510 + qJ(3) * t389 + t378 * t808 + t392 * t806, t513 * t808 + t515 * t806, t467 * t808 + t468 * t806, t481 * t808 + t483 * t806, t512 * t808 + t514 * t806, t480 * t808 + t482 * t806, t562 * t808 + t563 * t806, pkin(1) * t393 - pkin(2) * t533 + qJ(3) * t416 + t344 * t808 + t347 * t806, pkin(1) * t396 - pkin(2) * t547 + qJ(3) * t418 + t345 * t808 + t349 * t806, pkin(1) * t386 - pkin(2) * t490 + qJ(3) * t407 + t335 * t808 + t339 * t806, pkin(1) * t329 - pkin(2) * t373 + qJ(3) * t333 + t317 * t808 + t323 * t806;];
tauB_reg  = t1;
