% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:20:55
% EndTime: 2019-03-08 22:21:18
% DurationCPUTime: 14.20s
% Computational Cost: add. (13817->727), mult. (32206->1012), div. (0->0), fcn. (25530->18), ass. (0->306)
t291 = sin(qJ(3));
t294 = cos(qJ(3));
t328 = pkin(3) * t291 - qJ(4) * t294;
t203 = qJD(3) * t328 - qJD(4) * t291;
t284 = sin(pkin(12));
t286 = cos(pkin(12));
t292 = sin(qJ(2));
t376 = qJD(3) * t291;
t365 = pkin(8) * t376;
t285 = sin(pkin(6));
t384 = qJD(1) * t285;
t295 = cos(qJ(2));
t392 = t294 * t295;
t390 = t286 * t203 + t284 * t365 - (-t284 * t392 + t286 * t292) * t384;
t399 = t284 * t292;
t461 = t284 * t203 - (t286 * t392 + t399) * t384;
t394 = t286 * t294;
t320 = pkin(4) * t291 - pkin(9) * t394;
t460 = qJD(3) * t320 + t390;
t395 = t286 * t291;
t398 = t284 * t294;
t459 = (-pkin(8) * t395 - pkin(9) * t398) * qJD(3) + t461;
t371 = t286 * qJD(3);
t380 = qJD(2) * t291;
t224 = t284 * t380 - t371;
t377 = qJD(3) * t284;
t226 = t286 * t380 + t377;
t290 = sin(qJ(5));
t293 = cos(qJ(5));
t138 = t224 * t290 - t226 * t293;
t139 = t293 * t224 + t226 * t290;
t289 = sin(qJ(6));
t432 = cos(qJ(6));
t69 = t138 * t432 + t289 * t139;
t458 = t69 ^ 2;
t73 = t289 * t138 - t432 * t139;
t457 = t73 ^ 2;
t378 = qJD(2) * t294;
t265 = -qJD(5) + t378;
t255 = -qJD(6) + t265;
t456 = t255 * t73;
t455 = t69 * t255;
t233 = t284 * t293 + t286 * t290;
t211 = t233 * qJD(5);
t316 = t233 * t294;
t388 = qJD(2) * t316 - t211;
t393 = t293 * t286;
t232 = t284 * t290 - t393;
t373 = qJD(5) * t293;
t374 = qJD(5) * t290;
t440 = -t284 * t374 + t286 * t373;
t387 = -t232 * t378 - t440;
t238 = qJD(2) * pkin(8) + t292 * t384;
t220 = t291 * t238;
t287 = cos(pkin(6));
t383 = qJD(1) * t287;
t177 = t294 * t383 - t220;
t235 = t328 * qJD(2);
t122 = t286 * t177 + t284 * t235;
t359 = t284 * t378;
t106 = -pkin(9) * t359 + t122;
t425 = pkin(9) + qJ(4);
t243 = t425 * t284;
t244 = t425 * t286;
t121 = -t177 * t284 + t286 * t235;
t96 = qJD(2) * t320 + t121;
t418 = qJD(4) * t393 - t293 * t106 - t243 * t373 + (-qJD(4) * t284 - qJD(5) * t244 - t96) * t290;
t162 = -t290 * t243 + t293 * t244;
t417 = -t233 * qJD(4) - qJD(5) * t162 + t106 * t290 - t293 * t96;
t329 = pkin(3) * t294 + qJ(4) * t291;
t240 = -pkin(2) - t329;
t223 = t286 * t240;
t145 = -pkin(9) * t395 + t223 + (-pkin(8) * t284 - pkin(4)) * t294;
t183 = pkin(8) * t394 + t284 * t240;
t400 = t284 * t291;
t160 = -pkin(9) * t400 + t183;
t416 = t145 * t373 - t160 * t374 + t290 * t460 + t459 * t293;
t79 = t290 * t145 + t293 * t160;
t415 = -qJD(5) * t79 - t459 * t290 + t293 * t460;
t454 = t138 ^ 2;
t453 = t139 ^ 2;
t452 = -pkin(5) * t380 + pkin(10) * t387 + t417;
t451 = -pkin(10) * t388 - t418;
t427 = t73 * t69;
t375 = qJD(3) * t294;
t356 = t284 * t375;
t126 = -t293 * t294 * t371 + t211 * t291 + t290 * t356;
t450 = pkin(5) * t376 + pkin(10) * t126 + t415;
t127 = qJD(3) * t316 + t291 * t440;
t449 = pkin(10) * t127 - t416;
t448 = t138 * t265;
t447 = t139 * t265;
t370 = qJD(1) * qJD(2);
t350 = t295 * t370;
t410 = qJDD(2) * pkin(8);
t446 = t410 + (qJDD(1) * t292 + t350) * t285 + qJD(3) * t383;
t445 = -t457 + t458;
t352 = qJD(6) * t432;
t372 = qJD(6) * t289;
t272 = t286 * qJDD(3);
t369 = qJD(2) * qJD(3);
t347 = t294 * t369;
t366 = t291 * qJDD(2);
t315 = t347 + t366;
t180 = t284 * t315 - t272;
t367 = qJDD(3) * t284;
t181 = t286 * t315 + t367;
t61 = t290 * t180 - t293 * t181 + t224 * t373 + t226 * t374;
t62 = t180 * t293 + t290 * t181 - t224 * t374 + t226 * t373;
t18 = -t138 * t372 + t139 * t352 + t289 * t62 + t432 * t61;
t444 = -t18 + t456;
t382 = qJD(1) * t291;
t178 = t238 * t294 + t287 * t382;
t167 = qJD(3) * qJ(4) + t178;
t381 = qJD(1) * t295;
t361 = t285 * t381;
t179 = qJD(2) * t240 - t361;
t97 = -t167 * t284 + t286 * t179;
t67 = -pkin(4) * t378 - pkin(9) * t226 + t97;
t98 = t286 * t167 + t284 * t179;
t77 = -pkin(9) * t224 + t98;
t38 = -t290 * t77 + t293 * t67;
t26 = pkin(10) * t138 + t38;
t24 = -pkin(5) * t265 + t26;
t39 = t290 * t67 + t293 * t77;
t27 = -pkin(10) * t139 + t39;
t276 = t294 * qJDD(2);
t441 = t291 * t369 - t276;
t231 = qJDD(5) + t441;
t351 = t292 * t370;
t396 = t285 * t295;
t327 = -qJDD(1) * t396 + t285 * t351;
t105 = qJD(2) * t203 + qJDD(2) * t240 + t327;
t368 = qJDD(1) * t287;
t363 = t291 * t368 + t294 * t446;
t83 = qJDD(3) * qJ(4) + (qJD(4) - t220) * qJD(3) + t363;
t48 = t286 * t105 - t284 * t83;
t35 = pkin(4) * t441 - pkin(9) * t181 + t48;
t49 = t284 * t105 + t286 * t83;
t41 = -pkin(9) * t180 + t49;
t9 = -qJD(5) * t39 - t290 * t41 + t293 * t35;
t6 = pkin(5) * t231 + pkin(10) * t61 + t9;
t318 = -t290 * t35 - t293 * t41 - t67 * t373 + t374 * t77;
t7 = -pkin(10) * t62 - t318;
t1 = t24 * t352 - t27 * t372 + t289 * t6 + t432 * t7;
t413 = sin(pkin(11));
t334 = t413 * t295;
t414 = cos(pkin(11));
t337 = t414 * t292;
t207 = t287 * t337 + t334;
t339 = t285 * t414;
t155 = t207 * t294 - t291 * t339;
t335 = t413 * t292;
t336 = t414 * t295;
t209 = -t287 * t335 + t336;
t338 = t285 * t413;
t157 = t209 * t294 + t291 * t338;
t206 = -t287 * t336 + t335;
t208 = t287 * t334 + t337;
t397 = t285 * t292;
t214 = t287 * t291 + t294 * t397;
t281 = pkin(12) + qJ(5);
t277 = qJ(6) + t281;
t268 = sin(t277);
t269 = cos(t277);
t163 = -qJD(3) * pkin(3) + qJD(4) - t177;
t123 = pkin(4) * t224 + t163;
t66 = pkin(5) * t139 + t123;
t443 = -t66 * t73 - g(1) * (-t157 * t269 - t208 * t268) - g(2) * (-t155 * t269 - t206 * t268) - g(3) * (-t214 * t269 + t268 * t396) - t1;
t282 = t291 ^ 2;
t283 = t294 ^ 2;
t386 = t282 - t283;
t333 = qJD(2) * t386;
t439 = -qJDD(3) * pkin(3) + qJDD(4);
t364 = t432 * t27;
t13 = t289 * t24 + t364;
t2 = -qJD(6) * t13 - t289 * t7 + t432 * t6;
t438 = t66 * t69 - g(1) * (-t157 * t268 + t208 * t269) - g(2) * (-t155 * t268 + t206 * t269) - g(3) * (-t214 * t268 - t269 * t396) + t2;
t19 = -qJD(6) * t69 - t289 * t61 + t432 * t62;
t437 = -t19 + t455;
t411 = qJDD(2) * pkin(2);
t188 = t327 - t411;
t296 = qJD(3) ^ 2;
t331 = g(1) * t208 + g(2) * t206;
t436 = -pkin(8) * t296 + t285 * (-g(3) * t295 + t351) - t188 + t331 + t411;
t435 = pkin(5) * t62;
t196 = t232 * t291;
t78 = t293 * t145 - t160 * t290;
t54 = -pkin(5) * t294 + pkin(10) * t196 + t78;
t195 = t233 * t291;
t60 = -pkin(10) * t195 + t79;
t28 = -t289 * t60 + t432 * t54;
t434 = qJD(6) * t28 + t289 * t450 - t432 * t449;
t29 = t289 * t54 + t432 * t60;
t433 = -qJD(6) * t29 + t289 * t449 + t432 * t450;
t430 = pkin(4) * t180;
t429 = pkin(4) * t284;
t428 = g(3) * t292;
t274 = sin(t281);
t237 = pkin(5) * t274 + t429;
t426 = pkin(8) + t237;
t161 = -t293 * t243 - t244 * t290;
t124 = -pkin(10) * t233 + t161;
t125 = -pkin(10) * t232 + t162;
t58 = t124 * t432 - t289 * t125;
t424 = qJD(6) * t58 + t289 * t452 - t432 * t451;
t59 = t289 * t124 + t125 * t432;
t423 = -qJD(6) * t59 + t289 * t451 + t432 * t452;
t422 = qJD(2) * pkin(2);
t421 = t289 * t27;
t144 = -t289 * t232 + t233 * t432;
t420 = -qJD(6) * t144 + t289 * t387 + t388 * t432;
t419 = t232 * t352 + t233 * t372 - t289 * t388 + t387 * t432;
t408 = t138 * t139;
t407 = t180 * t286;
t406 = t181 * t284;
t405 = t268 * t294;
t404 = t269 * t294;
t403 = t274 * t294;
t275 = cos(t281);
t402 = t275 * t294;
t297 = qJD(2) ^ 2;
t401 = t283 * t297;
t391 = qJDD(1) - g(3);
t389 = -t286 * t365 + t461;
t218 = pkin(4) * t356 + pkin(8) * t375;
t236 = pkin(4) * t400 + t291 * pkin(8);
t385 = t282 + t283;
t379 = qJD(2) * t292;
t270 = pkin(4) * t286 + pkin(3);
t362 = pkin(8) + t429;
t360 = t291 * t381;
t358 = t285 * t379;
t357 = qJD(2) * t396;
t353 = g(3) * (pkin(2) * t396 + pkin(8) * t397);
t346 = t295 * t369;
t345 = t284 * t366;
t344 = t284 * t276;
t343 = t286 * t366;
t342 = t286 * t276;
t148 = pkin(4) * t359 + t178;
t341 = -pkin(5) * t388 - t148;
t95 = -t238 * t375 - t291 * t446 + t294 * t368;
t332 = t291 * t347;
t330 = g(1) * t209 + g(2) * t207;
t152 = -t214 * t284 - t286 * t396;
t153 = t214 * t286 - t284 * t396;
t81 = t152 * t293 - t153 * t290;
t82 = t152 * t290 + t153 * t293;
t326 = t224 * t286 + t226 * t284;
t234 = pkin(5) * t275 + t270;
t279 = -pkin(10) - t425;
t325 = t234 * t294 - t279 * t291;
t324 = t270 * t294 + t291 * t425;
t323 = qJD(2) * (t224 + t371);
t322 = qJD(2) * (-t226 + t377);
t321 = qJDD(2) * t295 - t292 * t297;
t43 = -t289 * t82 + t432 * t81;
t44 = t289 * t81 + t432 * t82;
t213 = -t287 * t294 + t291 * t397;
t117 = -t289 * t195 - t196 * t432;
t154 = t207 * t291 + t294 * t339;
t156 = t209 * t291 - t294 * t338;
t314 = g(1) * t156 + g(2) * t154 + g(3) * t213;
t313 = g(1) * t157 + g(2) * t155 + g(3) * t214;
t86 = -t95 + t439;
t312 = t314 - t86;
t311 = g(3) * t396 - t331;
t310 = -g(3) * t397 - t330;
t309 = -qJ(4) * t376 + (qJD(4) - t163) * t294;
t308 = t311 * t291;
t63 = t86 + t430;
t306 = t314 + t95;
t239 = -t361 - t422;
t304 = -pkin(8) * qJDD(3) + (t239 + t361 - t422) * qJD(3);
t303 = -t306 + t439;
t94 = -t238 * t376 + t363;
t302 = -t95 * t291 + t94 * t294 + (-t177 * t294 - t178 * t291) * qJD(3) - t330;
t301 = t303 + t430;
t298 = -g(1) * (-t157 * t274 + t208 * t275) - g(2) * (-t155 * t274 + t206 * t275) - g(3) * (-t214 * t274 - t275 * t396);
t260 = t291 * t297 * t294;
t221 = qJDD(2) * t283 - 0.2e1 * t332;
t217 = qJDD(6) + t231;
t202 = t208 * pkin(2);
t201 = t206 * pkin(2);
t187 = pkin(5) * t232 - t270;
t182 = -pkin(8) * t398 + t223;
t159 = qJD(3) * t214 + t291 * t357;
t158 = -qJD(3) * t213 + t294 * t357;
t147 = pkin(5) * t195 + t236;
t143 = t232 * t432 + t233 * t289;
t120 = t158 * t286 + t284 * t358;
t119 = -t158 * t284 + t286 * t358;
t116 = t195 * t432 - t196 * t289;
t93 = pkin(5) * t127 + t218;
t47 = qJD(6) * t117 - t289 * t126 + t127 * t432;
t46 = t126 * t432 + t289 * t127 + t195 * t352 - t196 * t372;
t34 = -qJD(5) * t82 + t119 * t293 - t120 * t290;
t33 = qJD(5) * t81 + t119 * t290 + t120 * t293;
t30 = t63 + t435;
t15 = t26 * t432 - t421;
t14 = -t289 * t26 - t364;
t12 = t24 * t432 - t421;
t11 = -qJD(6) * t44 - t289 * t33 + t34 * t432;
t10 = qJD(6) * t43 + t289 * t34 + t33 * t432;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t391, 0, 0, 0, 0, 0, 0, t321 * t285 (-qJDD(2) * t292 - t295 * t297) * t285, 0, -g(3) + (t287 ^ 2 + (t292 ^ 2 + t295 ^ 2) * t285 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t159 - qJDD(3) * t213 + (-t291 * t346 + t294 * t321) * t285, -qJD(3) * t158 - qJDD(3) * t214 + (-t291 * t321 - t294 * t346) * t285 (t213 * t291 + t214 * t294) * qJDD(2) + (t158 * t294 + t159 * t291 + (t213 * t294 - t214 * t291) * qJD(3)) * qJD(2), t158 * t178 - t159 * t177 - t213 * t95 + t214 * t94 - g(3) + (-t188 * t295 + t239 * t379) * t285, 0, 0, 0, 0, 0, 0, -t152 * t276 + t159 * t224 + t180 * t213 + (-t119 * t294 + t152 * t376) * qJD(2), t153 * t276 + t159 * t226 + t181 * t213 + (t120 * t294 - t153 * t376) * qJD(2), -t119 * t226 - t120 * t224 - t152 * t181 - t153 * t180, t119 * t97 + t120 * t98 + t152 * t48 + t153 * t49 + t159 * t163 + t213 * t86 - g(3), 0, 0, 0, 0, 0, 0, t139 * t159 + t213 * t62 + t231 * t81 - t265 * t34, -t138 * t159 - t213 * t61 - t231 * t82 + t265 * t33, t138 * t34 - t139 * t33 + t61 * t81 - t62 * t82, t123 * t159 + t213 * t63 - t318 * t82 + t33 * t39 + t34 * t38 + t81 * t9 - g(3), 0, 0, 0, 0, 0, 0, -t11 * t255 - t159 * t73 + t19 * t213 + t217 * t43, t10 * t255 - t159 * t69 - t18 * t213 - t217 * t44, t10 * t73 + t11 * t69 + t18 * t43 - t19 * t44, t1 * t44 + t10 * t13 + t11 * t12 + t159 * t66 + t2 * t43 + t213 * t30 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t391 * t396 + t331, -t391 * t397 + t330, 0, 0, qJDD(2) * t282 + 0.2e1 * t332, -0.2e1 * qJD(3) * t333 + 0.2e1 * t276 * t291, qJDD(3) * t291 + t294 * t296, t221, qJDD(3) * t294 - t291 * t296, 0, t304 * t291 + t294 * t436, -t291 * t436 + t304 * t294, t385 * t410 + (-t350 * t385 - t428) * t285 + t302, -t188 * pkin(2) + g(1) * t202 + g(2) * t201 - t353 + (-t239 * t292 + (t177 * t291 - t178 * t294) * t295) * t384 + t302 * pkin(8) (t181 * t291 + t226 * t375) * t286 (-t406 - t407) * t291 - t326 * t375 (-t181 - t343) * t294 + (t226 * t291 + t286 * t333) * qJD(3) (t180 * t291 + t224 * t375) * t284 (t180 + t345) * t294 + (-t224 * t291 - t284 * t333) * qJD(3), t221, t310 * t284 + (-t224 * t361 + pkin(8) * t180 + t86 * t284 + (qJD(2) * t182 + t97) * qJD(3)) * t291 + (-t182 * qJDD(2) - t48 + (pkin(8) * t224 + t163 * t284) * qJD(3) - t390 * qJD(2) - t311 * t286) * t294, t310 * t286 + (-t226 * t361 + pkin(8) * t181 + t86 * t286 + (-qJD(2) * t183 - t98) * qJD(3)) * t291 + (t183 * qJDD(2) + t49 + (pkin(8) * t226 + t163 * t286) * qJD(3) + t389 * qJD(2) + t311 * t284) * t294, -t180 * t183 - t181 * t182 - t390 * t226 - t389 * t224 + (-t284 * t98 - t286 * t97) * t375 + (-t284 * t49 - t286 * t48 - t311) * t291, t49 * t183 + t48 * t182 - g(1) * (-t208 * t329 - t202) - g(2) * (-t206 * t329 - t201) - t353 + t389 * t98 + t390 * t97 + (-g(3) * t329 - t163 * t382) * t396 + (t163 * t375 + t291 * t86 - t330) * pkin(8), t126 * t138 + t196 * t61, t126 * t139 + t127 * t138 + t195 * t61 + t196 * t62, t126 * t265 - t138 * t376 - t196 * t231 + t294 * t61, t127 * t139 + t195 * t62, t127 * t265 - t139 * t376 - t195 * t231 + t294 * t62, -t231 * t294 - t265 * t376, t78 * t231 - t9 * t294 + t38 * t376 + t218 * t139 + t236 * t62 + t63 * t195 + t123 * t127 - g(1) * (-t208 * t402 + t209 * t274) - g(2) * (-t206 * t402 + t207 * t274) - t415 * t265 + (-t139 * t360 - g(3) * (t274 * t292 + t275 * t392)) * t285, -t79 * t231 - t318 * t294 - t39 * t376 - t218 * t138 - t236 * t61 - t63 * t196 - t123 * t126 - g(1) * (t208 * t403 + t209 * t275) - g(2) * (t206 * t403 + t207 * t275) + t416 * t265 + (t138 * t360 - g(3) * (-t274 * t392 + t275 * t292)) * t285, t126 * t38 - t127 * t39 + t138 * t415 - t139 * t416 + t195 * t318 + t196 * t9 + t61 * t78 - t62 * t79 - t308, -t318 * t79 + t9 * t78 + t63 * t236 + t123 * t218 - g(1) * (-t208 * t324 + t209 * t362 - t202) - g(2) * (-t206 * t324 + t207 * t362 - t201) - t353 + t416 * t39 + t415 * t38 + (-g(3) * pkin(4) * t399 + (-g(3) * t324 - t123 * t382) * t295) * t285, -t117 * t18 + t46 * t69, t116 * t18 - t117 * t19 - t46 * t73 + t47 * t69, t117 * t217 + t18 * t294 + t255 * t46 - t376 * t69, t116 * t19 - t47 * t73, -t116 * t217 + t19 * t294 + t255 * t47 + t376 * t73, -t217 * t294 - t255 * t376, t28 * t217 - t2 * t294 + t12 * t376 - t93 * t73 + t147 * t19 + t30 * t116 + t66 * t47 - g(1) * (-t208 * t404 + t209 * t268) - g(2) * (-t206 * t404 + t207 * t268) - t433 * t255 + (t73 * t360 - g(3) * (t268 * t292 + t269 * t392)) * t285, -t29 * t217 + t1 * t294 - t13 * t376 - t93 * t69 - t147 * t18 + t30 * t117 - t66 * t46 - g(1) * (t208 * t405 + t209 * t269) - g(2) * (t206 * t405 + t207 * t269) + t434 * t255 + (t69 * t360 - g(3) * (-t268 * t392 + t269 * t292)) * t285, -t1 * t116 - t117 * t2 + t12 * t46 - t13 * t47 + t18 * t28 - t19 * t29 + t433 * t69 + t434 * t73 - t308, t1 * t29 + t2 * t28 + t30 * t147 + t66 * t93 - g(1) * (-t208 * t325 + t209 * t426 - t202) - g(2) * (-t206 * t325 + t207 * t426 - t201) - t353 + t434 * t13 + t433 * t12 + (-t237 * t428 + (-g(3) * t325 - t382 * t66) * t295) * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t260, t386 * t297, t366, t260, t276, qJDD(3), qJD(3) * t178 - t239 * t380 + t306, -t239 * t378 + (t177 + t220) * qJD(3) + t313 - t363, 0, 0, -t226 * t286 * t378 + t406, -t180 * t284 + t181 * t286 + t326 * t378, t286 * t401 + t291 * t322 - t344, -t224 * t359 - t407, -t284 * t401 + t291 * t323 - t342, t260, qJ(4) * t344 - pkin(3) * t180 - t178 * t224 + t312 * t286 + (t121 * t294 + t284 * t309 - t97 * t291) * qJD(2), qJ(4) * t342 - pkin(3) * t181 - t178 * t226 - t312 * t284 + (-t122 * t294 + t286 * t309 + t98 * t291) * qJD(2), t121 * t226 + t122 * t224 + (-qJ(4) * t180 - qJD(4) * t224 + t378 * t97 + t49) * t286 + (qJ(4) * t181 + qJD(4) * t226 + t378 * t98 - t48) * t284 - t313, -t97 * t121 - t98 * t122 - t163 * t178 + (-t284 * t97 + t286 * t98) * qJD(4) + t312 * pkin(3) + (-t48 * t284 + t49 * t286 - t313) * qJ(4), t138 * t387 - t233 * t61, -t138 * t388 + t139 * t387 + t232 * t61 - t233 * t62, t138 * t380 + t231 * t233 + t265 * t387, -t139 * t388 + t232 * t62, t139 * t380 - t231 * t232 - t265 * t388, t265 * t380, -t123 * t388 - t139 * t148 + t161 * t231 + t232 * t63 - t265 * t417 - t270 * t62 + t275 * t314 - t38 * t380, -t123 * t387 + t138 * t148 - t162 * t231 + t233 * t63 + t265 * t418 + t270 * t61 - t274 * t314 + t380 * t39, t138 * t417 - t139 * t418 + t161 * t61 - t162 * t62 + t232 * t318 - t233 * t9 + t38 * t387 + t388 * t39 - t313, -t318 * t162 + t9 * t161 - t63 * t270 - t123 * t148 - g(1) * (-t156 * t270 + t157 * t425) - g(2) * (-t154 * t270 + t155 * t425) - g(3) * (-t213 * t270 + t214 * t425) + t418 * t39 + t417 * t38, -t144 * t18 + t419 * t69, t143 * t18 - t144 * t19 - t419 * t73 - t420 * t69, t144 * t217 + t255 * t419 + t380 * t69, t143 * t19 + t420 * t73, -t143 * t217 - t255 * t420 - t380 * t73, t255 * t380, -t12 * t380 + t143 * t30 + t187 * t19 + t217 * t58 - t255 * t423 + t269 * t314 - t341 * t73 - t420 * t66, t13 * t380 + t144 * t30 - t18 * t187 - t217 * t59 + t255 * t424 - t268 * t314 - t341 * t69 - t419 * t66, -t1 * t143 + t12 * t419 + t13 * t420 - t144 * t2 + t18 * t58 - t19 * t59 + t423 * t69 + t424 * t73 - t313, t1 * t59 + t2 * t58 + t30 * t187 - g(1) * (-t156 * t234 - t157 * t279) - g(2) * (-t154 * t234 - t155 * t279) - g(3) * (-t213 * t234 - t214 * t279) + t341 * t66 + t424 * t13 + t423 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294 * t322 - t272 + t345, t294 * t323 + t343 + t367, -t224 ^ 2 - t226 ^ 2, t224 * t98 + t226 * t97 + t303, 0, 0, 0, 0, 0, 0, t62 + t448, -t61 + t447, -t453 - t454, -t138 * t38 + t139 * t39 + t301, 0, 0, 0, 0, 0, 0, t19 + t455, -t18 - t456, -t457 - t458, -t12 * t69 - t13 * t73 + t301 + t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t408, -t453 + t454, -t61 - t447, t408, -t62 + t448, t231, t123 * t138 - t39 * t265 + t298 + t9, -t38 * t265 + t123 * t139 - g(1) * (-t157 * t275 - t208 * t274) - g(2) * (-t155 * t275 - t206 * t274) - g(3) * (-t214 * t275 + t274 * t396) + t318, 0, 0, t427, t445, t444, -t427, t437, t217, t14 * t255 + (-t138 * t73 + t217 * t432 + t255 * t372) * pkin(5) + t438, -t15 * t255 + (-t138 * t69 - t217 * t289 + t255 * t352) * pkin(5) + t443, t12 * t73 - t13 * t69 - t14 * t69 - t15 * t73 + (t432 * t18 - t19 * t289 + (-t289 * t69 + t432 * t73) * qJD(6)) * pkin(5), -t12 * t14 - t13 * t15 + (t1 * t289 + t2 * t432 + t66 * t138 + (-t12 * t289 + t13 * t432) * qJD(6) + t298) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t427, t445, t444, -t427, t437, t217, -t13 * t255 + t438, -t12 * t255 + t443, 0, 0;];
tau_reg  = t3;
