% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 05:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRPRR5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR5_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 05:26:38
% EndTime: 2019-05-05 05:26:55
% DurationCPUTime: 7.52s
% Computational Cost: add. (47023->499), mult. (98987->741), div. (0->0), fcn. (74185->14), ass. (0->299)
t272 = sin(qJ(6));
t267 = sin(pkin(12));
t269 = cos(pkin(12));
t274 = sin(qJ(3));
t310 = qJD(2) * t274;
t233 = -t269 * qJD(3) + t267 * t310;
t234 = qJD(3) * t267 + t269 * t310;
t273 = sin(qJ(5));
t277 = cos(qJ(5));
t209 = t277 * t233 + t234 * t273;
t211 = -t233 * t273 + t234 * t277;
t276 = cos(qJ(6));
t180 = t276 * t209 + t211 * t272;
t182 = -t209 * t272 + t211 * t276;
t132 = t182 * t180;
t306 = qJD(2) * qJD(3);
t257 = t274 * t306;
t278 = cos(qJ(3));
t304 = t278 * qJDD(2);
t239 = -t257 + t304;
t235 = -qJDD(5) + t239;
t231 = -qJDD(6) + t235;
t345 = -t132 - t231;
t352 = t272 * t345;
t351 = t276 * t345;
t268 = sin(pkin(6));
t270 = cos(pkin(6));
t330 = sin(pkin(11));
t331 = cos(pkin(11));
t285 = g(1) * t330 - g(2) * t331;
t283 = t270 * t285;
t311 = -g(3) + qJDD(1);
t350 = t268 * t311 + t283;
t280 = qJD(2) ^ 2;
t318 = t233 * t234;
t287 = -t239 - t318;
t349 = t267 * t287;
t348 = t269 * t287;
t319 = t211 * t209;
t284 = -t235 - t319;
t347 = t273 * t284;
t346 = t277 * t284;
t300 = t278 * t306;
t305 = t274 * qJDD(2);
t238 = t300 + t305;
t218 = qJDD(3) * t267 + t238 * t269;
t296 = -t269 * qJDD(3) + t238 * t267;
t166 = -t209 * qJD(5) + t277 * t218 - t273 * t296;
t297 = t218 * t273 + t277 * t296;
t288 = qJD(5) * t211 + t297;
t116 = -t180 * qJD(6) + t276 * t166 - t272 * t288;
t309 = qJD(2) * t278;
t254 = -qJD(5) + t309;
t248 = -qJD(6) + t254;
t169 = t180 * t248;
t344 = t169 + t116;
t196 = t209 * t254;
t149 = -t196 + t166;
t343 = t196 + t166;
t223 = t233 * t309;
t200 = -t218 + t223;
t224 = t234 * t309;
t198 = -t296 - t224;
t298 = t166 * t272 + t276 * t288;
t88 = (qJD(6) + t248) * t182 + t298;
t145 = (qJD(5) + t254) * t211 + t297;
t178 = t180 ^ 2;
t179 = t182 ^ 2;
t342 = t209 ^ 2;
t208 = t211 ^ 2;
t341 = t233 ^ 2;
t232 = t234 ^ 2;
t247 = t248 ^ 2;
t252 = t254 ^ 2;
t340 = qJD(3) ^ 2;
t282 = -t268 * t285 + t270 * t311;
t281 = t274 * t282;
t243 = -g(1) * t331 - g(2) * t330;
t275 = sin(qJ(2));
t279 = cos(qJ(2));
t205 = t279 * t243 + t350 * t275;
t190 = -t280 * pkin(2) + qJDD(2) * pkin(8) + t205;
t293 = -t278 * pkin(3) - t274 * qJ(4);
t295 = t280 * t293 + t190;
t155 = -pkin(3) * t340 + qJDD(3) * qJ(4) + t278 * t295 + t281;
t294 = t243 * t275 - t350 * t279;
t189 = -qJDD(2) * pkin(2) - t280 * pkin(8) + t294;
t292 = t238 + t300;
t165 = -t292 * qJ(4) + (-t239 + t257) * pkin(3) + t189;
t119 = 0.2e1 * qJD(4) * t234 + t155 * t267 - t269 * t165;
t100 = t287 * pkin(4) + pkin(9) * t200 - t119;
t120 = -0.2e1 * qJD(4) * t233 + t269 * t155 + t267 * t165;
t219 = -pkin(4) * t309 - pkin(9) * t234;
t104 = -pkin(4) * t341 - pkin(9) * t296 + t219 * t309 + t120;
t62 = -t277 * t100 + t273 * t104;
t46 = t284 * pkin(5) - pkin(10) * t149 - t62;
t191 = -pkin(5) * t254 - pkin(10) * t211;
t63 = t273 * t100 + t277 * t104;
t47 = -pkin(5) * t342 - pkin(10) * t288 + t254 * t191 + t63;
t27 = t272 * t47 - t276 * t46;
t28 = t272 * t46 + t276 * t47;
t13 = -t27 * t276 + t272 * t28;
t339 = pkin(5) * t13;
t91 = -t169 + t116;
t53 = -t272 * t88 - t276 * t91;
t338 = pkin(5) * t53;
t337 = t13 * t273;
t336 = t13 * t277;
t39 = t273 * t63 - t277 * t62;
t335 = t267 * t39;
t334 = t269 * t39;
t216 = t278 * t282;
t154 = -qJDD(3) * pkin(3) - t340 * qJ(4) + t274 * t295 + qJDD(4) - t216;
t123 = t296 * pkin(4) - t341 * pkin(9) + t219 * t234 + t154;
t79 = pkin(5) * t288 - pkin(10) * t342 + t191 * t211 + t123;
t333 = t272 * t79;
t332 = t276 * t79;
t329 = t123 * t273;
t328 = t123 * t277;
t124 = -t132 + t231;
t327 = t124 * t272;
t326 = t124 * t276;
t325 = t154 * t267;
t324 = t154 * t269;
t171 = t235 - t319;
t323 = t171 * t273;
t322 = t171 * t277;
t202 = t239 - t318;
t321 = t202 * t267;
t320 = t202 * t269;
t317 = t248 * t272;
t316 = t248 * t276;
t315 = t254 * t273;
t314 = t254 * t277;
t253 = t274 * t280 * t278;
t245 = qJDD(3) + t253;
t313 = t274 * t245;
t244 = -t253 + qJDD(3);
t312 = t278 * t244;
t303 = t278 * t132;
t302 = t278 * t319;
t301 = t278 * t318;
t14 = t27 * t272 + t276 * t28;
t40 = t273 * t62 + t277 * t63;
t78 = t119 * t267 + t269 * t120;
t183 = t190 * t274 - t216;
t184 = t278 * t190 + t281;
t130 = t183 * t274 + t278 * t184;
t291 = t119 * t269 - t267 * t120;
t129 = -t247 - t178;
t95 = t129 * t272 + t351;
t290 = pkin(5) * t95 - t27;
t289 = -pkin(2) + t293;
t156 = -t179 - t247;
t105 = t156 * t276 + t327;
t286 = pkin(5) * t105 - t28;
t264 = t278 ^ 2;
t263 = t274 ^ 2;
t261 = t264 * t280;
t260 = t263 * t280;
t251 = -t261 - t340;
t250 = -t260 - t340;
t242 = t260 + t261;
t241 = (t263 + t264) * qJDD(2);
t240 = -0.2e1 * t257 + t304;
t237 = 0.2e1 * t300 + t305;
t229 = t278 * t239;
t222 = -t232 - t261;
t221 = -t232 + t261;
t220 = -t261 + t341;
t215 = -t250 * t274 - t312;
t214 = t251 * t278 - t313;
t212 = -t261 - t341;
t199 = t218 + t223;
t197 = -t224 + t296;
t194 = -t232 - t341;
t193 = -t208 + t252;
t192 = -t252 + t342;
t188 = -t208 - t252;
t187 = -t222 * t267 + t320;
t186 = t222 * t269 + t321;
t185 = t208 - t342;
t176 = -t252 - t342;
t175 = t212 * t269 - t349;
t174 = t212 * t267 + t348;
t168 = -t179 + t247;
t167 = t178 - t247;
t164 = t198 * t269 - t200 * t267;
t163 = t198 * t267 + t200 * t269;
t161 = (t209 * t277 - t211 * t273) * t254;
t160 = (t209 * t273 + t211 * t277) * t254;
t152 = -t208 - t342;
t151 = t187 * t278 + t199 * t274;
t150 = t175 * t278 + t197 * t274;
t144 = (qJD(5) - t254) * t211 + t297;
t143 = t192 * t277 + t323;
t142 = -t193 * t273 + t346;
t141 = t192 * t273 - t322;
t140 = t193 * t277 + t347;
t139 = t166 * t277 + t211 * t315;
t138 = t166 * t273 - t211 * t314;
t137 = -t209 * t314 + t273 * t288;
t136 = -t209 * t315 - t277 * t288;
t135 = t164 * t278 + t194 * t274;
t134 = -t188 * t273 + t322;
t133 = t188 * t277 + t323;
t131 = t179 - t178;
t128 = t176 * t277 - t347;
t127 = t176 * t273 + t346;
t122 = (t180 * t276 - t182 * t272) * t248;
t121 = (t180 * t272 + t182 * t276) * t248;
t117 = -t178 - t179;
t115 = -qJD(6) * t182 - t298;
t114 = t167 * t276 + t327;
t113 = -t168 * t272 + t351;
t112 = t167 * t272 - t326;
t111 = t168 * t276 + t352;
t110 = -t145 * t277 + t149 * t273;
t109 = -t144 * t277 - t273 * t343;
t108 = -t145 * t273 - t149 * t277;
t107 = -t144 * t273 + t277 * t343;
t106 = -t156 * t272 + t326;
t102 = -t133 * t267 + t134 * t269;
t101 = t133 * t269 + t134 * t267;
t97 = -pkin(9) * t133 + t328;
t96 = t129 * t276 - t352;
t94 = -t127 * t267 + t128 * t269;
t93 = t127 * t269 + t128 * t267;
t87 = (qJD(6) - t248) * t182 + t298;
t86 = -pkin(9) * t127 + t329;
t85 = t116 * t276 + t182 * t317;
t84 = t116 * t272 - t182 * t316;
t83 = -t115 * t272 - t180 * t316;
t82 = t115 * t276 - t180 * t317;
t81 = -t121 * t273 + t122 * t277;
t80 = t121 * t277 + t122 * t273;
t76 = t102 * t278 + t274 * t343;
t75 = -pkin(4) * t343 + pkin(9) * t134 + t329;
t74 = -pkin(4) * t144 + pkin(9) * t128 - t328;
t73 = t144 * t274 + t278 * t94;
t72 = -t112 * t273 + t114 * t277;
t71 = -t111 * t273 + t113 * t277;
t70 = t112 * t277 + t114 * t273;
t69 = t111 * t277 + t113 * t273;
t68 = t154 * t274 + t278 * t78;
t67 = -t108 * t267 + t110 * t269;
t66 = t108 * t269 + t110 * t267;
t65 = -t105 * t273 + t106 * t277;
t64 = t105 * t277 + t106 * t273;
t60 = t152 * t274 + t278 * t67;
t59 = -pkin(10) * t105 + t332;
t58 = -t273 * t95 + t277 * t96;
t57 = t273 * t96 + t277 * t95;
t56 = -t272 * t344 - t276 * t87;
t55 = t272 * t91 - t276 * t88;
t54 = -t272 * t87 + t276 * t344;
t52 = -t273 * t84 + t277 * t85;
t51 = -t273 * t82 + t277 * t83;
t50 = t273 * t85 + t277 * t84;
t49 = t273 * t83 + t277 * t82;
t48 = -pkin(10) * t95 + t333;
t44 = -pkin(5) * t344 + pkin(10) * t106 + t333;
t43 = -pkin(5) * t87 + pkin(10) * t96 - t332;
t42 = -t267 * t64 + t269 * t65;
t41 = t267 * t65 + t269 * t64;
t38 = -pkin(4) * t123 + pkin(9) * t40;
t37 = -t267 * t57 + t269 * t58;
t36 = t267 * t58 + t269 * t57;
t35 = -t273 * t54 + t277 * t56;
t34 = -t273 * t53 + t277 * t55;
t33 = t273 * t56 + t277 * t54;
t32 = t273 * t55 + t277 * t53;
t31 = -pkin(9) * t108 - t39;
t30 = t274 * t344 + t278 * t42;
t29 = -pkin(4) * t152 + pkin(9) * t110 + t40;
t25 = t274 * t87 + t278 * t37;
t24 = -pkin(9) * t64 - t273 * t44 + t277 * t59;
t23 = t269 * t40 - t335;
t22 = t267 * t40 + t334;
t21 = -pkin(9) * t57 - t273 * t43 + t277 * t48;
t20 = t123 * t274 + t23 * t278;
t19 = -pkin(4) * t344 + pkin(9) * t65 + t273 * t59 + t277 * t44;
t18 = -t267 * t32 + t269 * t34;
t17 = t267 * t34 + t269 * t32;
t16 = -pkin(4) * t87 + pkin(9) * t58 + t273 * t48 + t277 * t43;
t15 = t117 * t274 + t18 * t278;
t12 = -pkin(5) * t79 + pkin(10) * t14;
t11 = -pkin(10) * t53 - t13;
t10 = -pkin(5) * t117 + pkin(10) * t55 + t14;
t9 = t14 * t277 - t337;
t8 = t14 * t273 + t336;
t7 = -pkin(9) * t32 - t10 * t273 + t11 * t277;
t6 = -pkin(4) * t117 + pkin(9) * t34 + t10 * t277 + t11 * t273;
t5 = -t267 * t8 + t269 * t9;
t4 = t267 * t9 + t269 * t8;
t3 = -pkin(9) * t8 - pkin(10) * t336 - t12 * t273;
t2 = t274 * t79 + t278 * t5;
t1 = -pkin(4) * t79 + pkin(9) * t9 - pkin(10) * t337 + t12 * t277;
t26 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t311, 0, 0, 0, 0, 0, 0, (qJDD(2) * t279 - t275 * t280) * t268, (-qJDD(2) * t275 - t279 * t280) * t268, 0, t270 ^ 2 * t311 + (t275 * t205 - t279 * t294 - t283) * t268, 0, 0, 0, 0, 0, 0, t270 * (t245 * t278 + t251 * t274) + (t214 * t275 + t240 * t279) * t268, t270 * (-t244 * t274 + t250 * t278) + (t215 * t275 - t237 * t279) * t268, (t241 * t275 + t242 * t279) * t268, t270 * (-t183 * t278 + t184 * t274) + (t130 * t275 - t189 * t279) * t268, 0, 0, 0, 0, 0, 0, t270 * (t175 * t274 - t197 * t278) + (t150 * t275 - t174 * t279) * t268, t270 * (t187 * t274 - t199 * t278) + (t151 * t275 - t186 * t279) * t268, t270 * (t164 * t274 - t194 * t278) + (t135 * t275 - t163 * t279) * t268, t270 * (-t154 * t278 + t274 * t78) + (t275 * t68 + t279 * t291) * t268, 0, 0, 0, 0, 0, 0, t270 * (-t144 * t278 + t274 * t94) + (t275 * t73 - t279 * t93) * t268, t270 * (t102 * t274 - t278 * t343) + (-t101 * t279 + t275 * t76) * t268, t270 * (-t152 * t278 + t274 * t67) + (t275 * t60 - t279 * t66) * t268, t270 * (-t123 * t278 + t23 * t274) + (t20 * t275 - t22 * t279) * t268, 0, 0, 0, 0, 0, 0, t270 * (t274 * t37 - t278 * t87) + (t25 * t275 - t279 * t36) * t268, t270 * (t274 * t42 - t278 * t344) + (t275 * t30 - t279 * t41) * t268, t270 * (-t117 * t278 + t18 * t274) + (t15 * t275 - t17 * t279) * t268, t270 * (t274 * t5 - t278 * t79) + (t2 * t275 - t279 * t4) * t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t294, -t205, 0, 0, t292 * t274, t237 * t278 + t240 * t274, t313 + t278 * (-t260 + t340), -t274 * t300 + t229, t274 * (t261 - t340) + t312, 0, pkin(2) * t240 + pkin(8) * t214 - t189 * t278, -pkin(2) * t237 + pkin(8) * t215 + t189 * t274, pkin(2) * t242 + pkin(8) * t241 + t130, -pkin(2) * t189 + pkin(8) * t130, t274 * (t218 * t269 + t224 * t267) - t301, t274 * (-t197 * t269 - t199 * t267) + t278 * (-t232 + t341), t274 * (-t221 * t267 + t348) + t278 * t200, t274 * (-t223 * t269 + t267 * t296) + t301, t274 * (t220 * t269 + t321) - t278 * t198, t229 + t274 * (t233 * t269 - t234 * t267) * t309, t274 * (-qJ(4) * t174 + t325) + t278 * (-pkin(3) * t174 + t119) - pkin(2) * t174 + pkin(8) * t150, t274 * (-qJ(4) * t186 + t324) + t278 * (-pkin(3) * t186 + t120) - pkin(2) * t186 + pkin(8) * t151, pkin(8) * t135 + t163 * t289 + t274 * t291, pkin(8) * t68 - t289 * t291, t274 * (-t138 * t267 + t139 * t269) - t302, t274 * (-t107 * t267 + t109 * t269) - t278 * t185, t274 * (-t140 * t267 + t142 * t269) - t278 * t149, t274 * (-t136 * t267 + t137 * t269) + t302, t274 * (-t141 * t267 + t143 * t269) + t278 * t145, t274 * (-t160 * t267 + t161 * t269) + t278 * t235, t274 * (-qJ(4) * t93 - t267 * t74 + t269 * t86) + t278 * (-pkin(3) * t93 - pkin(4) * t127 + t62) - pkin(2) * t93 + pkin(8) * t73, t274 * (-qJ(4) * t101 - t267 * t75 + t269 * t97) + t278 * (-pkin(3) * t101 - pkin(4) * t133 + t63) - pkin(2) * t101 + pkin(8) * t76, t274 * (-qJ(4) * t66 - t267 * t29 + t269 * t31) + t278 * (-pkin(3) * t66 - pkin(4) * t108) - pkin(2) * t66 + pkin(8) * t60, t274 * (-pkin(9) * t334 - qJ(4) * t22 - t267 * t38) + t278 * (-pkin(3) * t22 - pkin(4) * t39) - pkin(2) * t22 + pkin(8) * t20, t274 * (-t267 * t50 + t269 * t52) - t303, t274 * (-t267 * t33 + t269 * t35) - t278 * t131, t274 * (-t267 * t69 + t269 * t71) - t278 * t91, t274 * (-t267 * t49 + t269 * t51) + t303, t274 * (-t267 * t70 + t269 * t72) + t278 * t88, t274 * (-t267 * t80 + t269 * t81) + t278 * t231, t274 * (-qJ(4) * t36 - t16 * t267 + t21 * t269) + t278 * (-pkin(3) * t36 - pkin(4) * t57 - t290) - pkin(2) * t36 + pkin(8) * t25, t274 * (-qJ(4) * t41 - t19 * t267 + t24 * t269) + t278 * (-pkin(3) * t41 - pkin(4) * t64 - t286) - pkin(2) * t41 + pkin(8) * t30, t274 * (-qJ(4) * t17 - t267 * t6 + t269 * t7) + t278 * (-pkin(3) * t17 - pkin(4) * t32 - t338) - pkin(2) * t17 + pkin(8) * t15, t274 * (-qJ(4) * t4 - t1 * t267 + t269 * t3) + t278 * (-pkin(3) * t4 - pkin(4) * t8 - t339) - pkin(2) * t4 + pkin(8) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t253, t260 - t261, t305, t253, t304, qJDD(3), -t183, -t184, 0, 0, t218 * t267 - t224 * t269, -t197 * t267 + t199 * t269, t221 * t269 + t349, -t223 * t267 - t269 * t296, t220 * t267 - t320, (t233 * t267 + t234 * t269) * t309, -pkin(3) * t197 + qJ(4) * t175 - t324, -pkin(3) * t199 + qJ(4) * t187 + t325, -pkin(3) * t194 + qJ(4) * t164 + t78, -pkin(3) * t154 + qJ(4) * t78, t138 * t269 + t139 * t267, t107 * t269 + t109 * t267, t140 * t269 + t142 * t267, t136 * t269 + t137 * t267, t141 * t269 + t143 * t267, t160 * t269 + t161 * t267, -pkin(3) * t144 + qJ(4) * t94 + t267 * t86 + t269 * t74, -pkin(3) * t343 + qJ(4) * t102 + t267 * t97 + t269 * t75, -pkin(3) * t152 + qJ(4) * t67 + t267 * t31 + t269 * t29, -pkin(3) * t123 - pkin(9) * t335 + qJ(4) * t23 + t269 * t38, t267 * t52 + t269 * t50, t267 * t35 + t269 * t33, t267 * t71 + t269 * t69, t267 * t51 + t269 * t49, t267 * t72 + t269 * t70, t267 * t81 + t269 * t80, -pkin(3) * t87 + qJ(4) * t37 + t16 * t269 + t21 * t267, -pkin(3) * t344 + qJ(4) * t42 + t19 * t269 + t24 * t267, -pkin(3) * t117 + qJ(4) * t18 + t267 * t7 + t269 * t6, -pkin(3) * t79 + qJ(4) * t5 + t1 * t269 + t267 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, t199, t194, t154, 0, 0, 0, 0, 0, 0, t144, t343, t152, t123, 0, 0, 0, 0, 0, 0, t87, t344, t117, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t319, t185, t149, -t319, -t145, -t235, -t62, -t63, 0, 0, t132, t131, t91, -t132, -t88, -t231, t290, t286, t338, t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, t131, t91, -t132, -t88, -t231, -t27, -t28, 0, 0;];
tauJ_reg  = t26;
