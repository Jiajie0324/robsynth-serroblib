% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 05:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 05:28:43
% EndTime: 2019-05-05 05:28:52
% DurationCPUTime: 10.36s
% Computational Cost: add. (82953->336), mult. (174563->511), div. (0->0), fcn. (130639->14), ass. (0->285)
t2211 = sin(pkin(6));
t2268 = -g(3) + qJDD(1);
t2252 = t2211 * t2268;
t2210 = sin(pkin(11));
t2213 = cos(pkin(11));
t2187 = g(1) * t2210 - g(2) * t2213;
t2214 = cos(pkin(6));
t2261 = t2187 * t2214;
t2280 = t2252 + t2261;
t2222 = cos(qJ(3));
t2266 = qJD(2) * t2222;
t2198 = -qJD(5) + t2266;
t2193 = -qJD(6) + t2198;
t2279 = qJD(6) - t2193;
t2254 = qJD(3) * t2266;
t2218 = sin(qJ(3));
t2256 = t2218 * qJDD(2);
t2180 = t2254 + t2256;
t2209 = sin(pkin(12));
t2212 = cos(pkin(12));
t2160 = qJDD(3) * t2209 + t2180 * t2212;
t2267 = qJD(2) * t2218;
t2175 = -qJD(3) * t2212 + t2209 * t2267;
t2163 = t2175 * t2266;
t2138 = -t2160 + t2163;
t2201 = qJD(3) * t2267;
t2203 = t2222 * qJDD(2);
t2181 = t2203 - t2201;
t2176 = qJD(3) * t2209 + t2212 * t2267;
t2262 = t2175 * t2176;
t2141 = -t2181 - t2262;
t2278 = qJD(3) ^ 2;
t2217 = sin(qJ(5));
t2221 = cos(qJ(5));
t2145 = t2221 * t2175 + t2176 * t2217;
t2147 = -t2175 * t2217 + t2176 * t2221;
t2216 = sin(qJ(6));
t2220 = cos(qJ(6));
t2119 = t2220 * t2145 + t2147 * t2216;
t2277 = t2119 ^ 2;
t2121 = -t2145 * t2216 + t2147 * t2220;
t2276 = t2121 ^ 2;
t2275 = t2145 ^ 2;
t2274 = t2147 ^ 2;
t2273 = t2175 ^ 2;
t2272 = t2176 ^ 2;
t2271 = t2193 ^ 2;
t2270 = t2198 ^ 2;
t2269 = -2 * qJD(4);
t2265 = t2119 * t2121;
t2264 = t2145 * t2147;
t2263 = t2145 * t2198;
t2206 = t2222 ^ 2;
t2224 = qJD(2) ^ 2;
t2260 = t2206 * t2224;
t2259 = qJD(5) + t2198;
t2258 = qJD(6) + t2193;
t2188 = -g(1) * t2213 - g(2) * t2210;
t2219 = sin(qJ(2));
t2223 = cos(qJ(2));
t2142 = t2223 * t2188 + t2219 * t2280;
t2129 = -pkin(2) * t2224 + qJDD(2) * pkin(8) + t2142;
t2227 = -t2211 * t2187 + t2214 * t2268;
t2123 = t2222 * t2129 + t2218 * t2227;
t2178 = (-pkin(3) * t2222 - qJ(4) * t2218) * qJD(2);
t2098 = -pkin(3) * t2278 + qJDD(3) * qJ(4) + t2178 * t2266 + t2123;
t2247 = t2219 * t2188 - t2223 * t2280;
t2128 = -qJDD(2) * pkin(2) - t2224 * pkin(8) + t2247;
t2106 = (-t2180 - t2254) * qJ(4) + (-t2181 + t2201) * pkin(3) + t2128;
t2070 = -t2209 * t2098 + t2212 * t2106 + t2176 * t2269;
t2057 = pkin(4) * t2141 + pkin(9) * t2138 + t2070;
t2071 = t2212 * t2098 + t2209 * t2106 + t2175 * t2269;
t2161 = -pkin(4) * t2266 - pkin(9) * t2176;
t2249 = t2212 * qJDD(3) - t2180 * t2209;
t2061 = -pkin(4) * t2273 + pkin(9) * t2249 + t2161 * t2266 + t2071;
t2025 = t2217 * t2057 + t2221 * t2061;
t2205 = t2218 ^ 2;
t2257 = t2205 + t2206;
t2255 = t2176 * t2266;
t2253 = -qJDD(5) + t2181;
t2024 = t2221 * t2057 - t2217 * t2061;
t2226 = -t2221 * t2160 - t2217 * t2249;
t2107 = -t2145 * qJD(5) - t2226;
t2250 = t2217 * t2160 - t2221 * t2249;
t2228 = qJD(5) * t2147 + t2250;
t2251 = -t2216 * t2107 - t2220 * t2228;
t2248 = -qJDD(6) + t2253;
t2111 = -t2253 - t2264;
t2015 = (-t2107 + t2263) * pkin(10) + t2111 * pkin(5) + t2024;
t2130 = -pkin(5) * t2198 - pkin(10) * t2147;
t2016 = -pkin(5) * t2275 - pkin(10) * t2228 + t2198 * t2130 + t2025;
t1994 = t2015 * t2220 - t2016 * t2216;
t1995 = t2015 * t2216 + t2016 * t2220;
t1979 = t1994 * t2220 + t1995 * t2216;
t1980 = -t1994 * t2216 + t1995 * t2220;
t1970 = t1979 * t2221 + t1980 * t2217;
t1971 = -t1979 * t2217 + t1980 * t2221;
t1965 = -t1970 * t2209 + t1971 * t2212;
t2158 = t2222 * t2227;
t2097 = qJDD(4) - t2158 - t2278 * qJ(4) - qJDD(3) * pkin(3) + (qJD(2) * t2178 + t2129) * t2218;
t2073 = -t2249 * pkin(4) - t2273 * pkin(9) + t2176 * t2161 + t2097;
t2040 = pkin(5) * t2228 - pkin(10) * t2275 + t2147 * t2130 + t2073;
t1963 = t1965 * t2222 + t2040 * t2218;
t1964 = t1970 * t2212 + t1971 * t2209;
t2246 = t1963 * t2219 - t1964 * t2223;
t2046 = -t2121 * t2258 + t2251;
t2225 = -t2220 * t2107 + t2216 * t2228;
t2048 = t2119 * t2258 + t2225;
t2018 = t2046 * t2216 + t2048 * t2220;
t2019 = t2046 * t2220 - t2048 * t2216;
t2000 = t2018 * t2221 + t2019 * t2217;
t2001 = -t2018 * t2217 + t2019 * t2221;
t1984 = -t2000 * t2209 + t2001 * t2212;
t2067 = -t2276 - t2277;
t1982 = t1984 * t2222 + t2067 * t2218;
t1983 = t2000 * t2212 + t2001 * t2209;
t2245 = t1982 * t2219 - t1983 * t2223;
t2009 = t2024 * t2221 + t2025 * t2217;
t2010 = -t2024 * t2217 + t2025 * t2221;
t1989 = -t2009 * t2209 + t2010 * t2212;
t1987 = t1989 * t2222 + t2073 * t2218;
t1988 = t2009 * t2212 + t2010 * t2209;
t2244 = t1987 * t2219 - t1988 * t2223;
t2075 = -t2248 - t2265;
t2078 = -t2271 - t2277;
t2051 = t2075 * t2220 + t2078 * t2216;
t2052 = -t2075 * t2216 + t2078 * t2220;
t2020 = t2051 * t2221 + t2052 * t2217;
t2021 = -t2051 * t2217 + t2052 * t2221;
t2003 = -t2020 * t2209 + t2021 * t2212;
t2045 = t2121 * t2279 - t2251;
t1993 = t2003 * t2222 + t2045 * t2218;
t2002 = t2020 * t2212 + t2021 * t2209;
t2243 = t1993 * t2219 - t2002 * t2223;
t2074 = t2248 - t2265;
t2099 = -t2271 - t2276;
t2062 = t2074 * t2216 + t2099 * t2220;
t2063 = t2074 * t2220 - t2099 * t2216;
t2026 = t2062 * t2221 + t2063 * t2217;
t2027 = -t2062 * t2217 + t2063 * t2221;
t2012 = -t2026 * t2209 + t2027 * t2212;
t2047 = -t2119 * t2279 - t2225;
t1999 = t2012 * t2222 + t2047 * t2218;
t2011 = t2026 * t2212 + t2027 * t2209;
t2242 = t1999 * t2219 - t2011 * t2223;
t2086 = -t2147 * t2259 - t2250;
t2088 = t2145 * t2259 + t2226;
t2064 = t2086 * t2217 + t2088 * t2221;
t2065 = t2086 * t2221 - t2088 * t2217;
t2029 = -t2064 * t2209 + t2065 * t2212;
t2095 = -t2274 - t2275;
t2023 = t2029 * t2222 + t2095 * t2218;
t2028 = t2064 * t2212 + t2065 * t2209;
t2241 = t2023 * t2219 - t2028 * t2223;
t2037 = -t2070 * t2209 + t2071 * t2212;
t2031 = t2037 * t2222 + t2097 * t2218;
t2036 = t2070 * t2212 + t2071 * t2209;
t2240 = t2031 * t2219 - t2036 * t2223;
t2118 = -t2270 - t2275;
t2076 = t2111 * t2221 + t2118 * t2217;
t2077 = -t2111 * t2217 + t2118 * t2221;
t2050 = -t2076 * t2209 + t2077 * t2212;
t2085 = (qJD(5) - t2198) * t2147 + t2250;
t2033 = t2050 * t2222 + t2085 * t2218;
t2049 = t2076 * t2212 + t2077 * t2209;
t2239 = t2033 * t2219 - t2049 * t2223;
t2110 = t2253 - t2264;
t2126 = -t2270 - t2274;
t2081 = t2110 * t2217 + t2126 * t2221;
t2082 = t2110 * t2221 - t2126 * t2217;
t2059 = -t2081 * t2209 + t2082 * t2212;
t2087 = t2107 + t2263;
t2035 = t2059 * t2222 + t2087 * t2218;
t2058 = t2081 * t2212 + t2082 * t2209;
t2238 = t2035 * t2219 - t2058 * t2223;
t2122 = -t2129 * t2218 + t2158;
t2080 = -t2122 * t2218 + t2123 * t2222;
t2237 = t2080 * t2219 - t2128 * t2223;
t2136 = t2249 - t2255;
t2105 = t2136 * t2212 - t2138 * t2209;
t2133 = -t2272 - t2273;
t2084 = t2105 * t2222 + t2133 * t2218;
t2104 = t2136 * t2209 + t2138 * t2212;
t2236 = t2084 * t2219 - t2104 * t2223;
t2150 = -t2260 - t2273;
t2113 = -t2141 * t2209 + t2150 * t2212;
t2135 = -t2249 - t2255;
t2090 = t2113 * t2222 + t2135 * t2218;
t2112 = t2141 * t2212 + t2150 * t2209;
t2235 = t2090 * t2219 - t2112 * t2223;
t2140 = t2181 - t2262;
t2162 = -t2260 - t2272;
t2125 = t2140 * t2212 - t2162 * t2209;
t2137 = t2160 + t2163;
t2094 = t2125 * t2222 + t2137 * t2218;
t2124 = t2140 * t2209 + t2162 * t2212;
t2234 = t2094 * t2219 - t2124 * t2223;
t2233 = t2219 * t2142 - t2223 * t2247;
t2197 = t2218 * t2224 * t2222;
t2189 = qJDD(3) + t2197;
t2196 = -t2260 - t2278;
t2155 = -t2189 * t2218 + t2196 * t2222;
t2182 = t2203 - 0.2e1 * t2201;
t2232 = t2155 * t2219 + t2182 * t2223;
t2190 = -qJDD(3) + t2197;
t2195 = -t2205 * t2224 - t2278;
t2156 = t2190 * t2222 - t2195 * t2218;
t2179 = 0.2e1 * t2254 + t2256;
t2231 = t2156 * t2219 - t2179 * t2223;
t2183 = t2257 * qJDD(2);
t2186 = t2257 * t2224;
t2230 = t2183 * t2219 + t2186 * t2223;
t2229 = qJDD(2) * t2223 - t2219 * t2224;
t2185 = -qJDD(2) * t2219 - t2223 * t2224;
t2169 = t2229 * t2214;
t2168 = t2185 * t2214;
t2167 = t2229 * t2211;
t2166 = t2185 * t2211;
t2154 = t2190 * t2218 + t2195 * t2222;
t2153 = t2189 * t2222 + t2196 * t2218;
t2151 = t2183 * t2223 - t2186 * t2219;
t2149 = t2230 * t2214;
t2148 = t2230 * t2211;
t2132 = t2156 * t2223 + t2179 * t2219;
t2131 = t2155 * t2223 - t2182 * t2219;
t2117 = -t2211 * t2154 + t2214 * t2231;
t2116 = -t2211 * t2153 + t2214 * t2232;
t2115 = t2214 * t2154 + t2211 * t2231;
t2114 = t2214 * t2153 + t2211 * t2232;
t2108 = t2142 * t2223 + t2219 * t2247;
t2093 = t2125 * t2218 - t2137 * t2222;
t2092 = t2211 ^ 2 * t2187 + (-t2252 + t2233) * t2214;
t2091 = t2214 ^ 2 * t2268 + (t2233 - t2261) * t2211;
t2089 = t2113 * t2218 - t2135 * t2222;
t2083 = t2105 * t2218 - t2133 * t2222;
t2079 = t2122 * t2222 + t2123 * t2218;
t2072 = t2094 * t2223 + t2124 * t2219;
t2069 = t2080 * t2223 + t2128 * t2219;
t2068 = t2090 * t2223 + t2112 * t2219;
t2066 = t2084 * t2223 + t2104 * t2219;
t2054 = -t2211 * t2093 + t2214 * t2234;
t2053 = t2214 * t2093 + t2211 * t2234;
t2044 = -t2211 * t2089 + t2214 * t2235;
t2043 = t2214 * t2089 + t2211 * t2235;
t2042 = -t2211 * t2079 + t2214 * t2237;
t2041 = t2214 * t2079 + t2211 * t2237;
t2039 = -t2211 * t2083 + t2214 * t2236;
t2038 = t2214 * t2083 + t2211 * t2236;
t2034 = t2059 * t2218 - t2087 * t2222;
t2032 = t2050 * t2218 - t2085 * t2222;
t2030 = t2037 * t2218 - t2097 * t2222;
t2022 = t2029 * t2218 - t2095 * t2222;
t2017 = t2035 * t2223 + t2058 * t2219;
t2014 = t2033 * t2223 + t2049 * t2219;
t2013 = t2031 * t2223 + t2036 * t2219;
t2008 = -t2211 * t2034 + t2214 * t2238;
t2007 = t2214 * t2034 + t2211 * t2238;
t2006 = t2023 * t2223 + t2028 * t2219;
t2005 = -t2211 * t2032 + t2214 * t2239;
t2004 = t2214 * t2032 + t2211 * t2239;
t1998 = t2012 * t2218 - t2047 * t2222;
t1997 = -t2211 * t2030 + t2214 * t2240;
t1996 = t2214 * t2030 + t2211 * t2240;
t1992 = t2003 * t2218 - t2045 * t2222;
t1991 = -t2211 * t2022 + t2214 * t2241;
t1990 = t2214 * t2022 + t2211 * t2241;
t1986 = t1989 * t2218 - t2073 * t2222;
t1985 = t1999 * t2223 + t2011 * t2219;
t1981 = t1984 * t2218 - t2067 * t2222;
t1978 = t1993 * t2223 + t2002 * t2219;
t1977 = -t2211 * t1998 + t2214 * t2242;
t1976 = t2214 * t1998 + t2211 * t2242;
t1975 = t1987 * t2223 + t1988 * t2219;
t1974 = -t2211 * t1992 + t2214 * t2243;
t1973 = t2214 * t1992 + t2211 * t2243;
t1972 = t1982 * t2223 + t1983 * t2219;
t1969 = -t2211 * t1986 + t2214 * t2244;
t1968 = t2214 * t1986 + t2211 * t2244;
t1967 = -t2211 * t1981 + t2214 * t2245;
t1966 = t2214 * t1981 + t2211 * t2245;
t1962 = t1965 * t2218 - t2040 * t2222;
t1961 = t1963 * t2223 + t1964 * t2219;
t1960 = -t2211 * t1962 + t2214 * t2246;
t1959 = t2214 * t1962 + t2211 * t2246;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2187 * t2210 + t2188 * t2213, 0, 0, 0, 0, 0, 0, -t2169 * t2210 + t2185 * t2213, -t2168 * t2210 - t2213 * t2229, 0, -t2092 * t2210 + t2108 * t2213, 0, 0, 0, 0, 0, 0, -t2116 * t2210 + t2131 * t2213, -t2117 * t2210 + t2132 * t2213, -t2149 * t2210 + t2151 * t2213, -t2042 * t2210 + t2069 * t2213, 0, 0, 0, 0, 0, 0, -t2044 * t2210 + t2068 * t2213, -t2054 * t2210 + t2072 * t2213, -t2039 * t2210 + t2066 * t2213, -t1997 * t2210 + t2013 * t2213, 0, 0, 0, 0, 0, 0, -t2005 * t2210 + t2014 * t2213, -t2008 * t2210 + t2017 * t2213, -t1991 * t2210 + t2006 * t2213, -t1969 * t2210 + t1975 * t2213, 0, 0, 0, 0, 0, 0, -t1974 * t2210 + t1978 * t2213, -t1977 * t2210 + t1985 * t2213, -t1967 * t2210 + t1972 * t2213, -t1960 * t2210 + t1961 * t2213; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187 * t2213 + t2188 * t2210, 0, 0, 0, 0, 0, 0, t2169 * t2213 + t2185 * t2210, t2168 * t2213 - t2210 * t2229, 0, t2092 * t2213 + t2108 * t2210, 0, 0, 0, 0, 0, 0, t2116 * t2213 + t2131 * t2210, t2117 * t2213 + t2132 * t2210, t2149 * t2213 + t2151 * t2210, t2042 * t2213 + t2069 * t2210, 0, 0, 0, 0, 0, 0, t2044 * t2213 + t2068 * t2210, t2054 * t2213 + t2072 * t2210, t2039 * t2213 + t2066 * t2210, t1997 * t2213 + t2013 * t2210, 0, 0, 0, 0, 0, 0, t2005 * t2213 + t2014 * t2210, t2008 * t2213 + t2017 * t2210, t1991 * t2213 + t2006 * t2210, t1969 * t2213 + t1975 * t2210, 0, 0, 0, 0, 0, 0, t1974 * t2213 + t1978 * t2210, t1977 * t2213 + t1985 * t2210, t1967 * t2213 + t1972 * t2210, t1960 * t2213 + t1961 * t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2268, 0, 0, 0, 0, 0, 0, t2167, t2166, 0, t2091, 0, 0, 0, 0, 0, 0, t2114, t2115, t2148, t2041, 0, 0, 0, 0, 0, 0, t2043, t2053, t2038, t1996, 0, 0, 0, 0, 0, 0, t2004, t2007, t1990, t1968, 0, 0, 0, 0, 0, 0, t1973, t1976, t1966, t1959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2188, 0, 0, 0, 0, 0, 0, t2185, -t2229, 0, t2108, 0, 0, 0, 0, 0, 0, t2131, t2132, t2151, t2069, 0, 0, 0, 0, 0, 0, t2068, t2072, t2066, t2013, 0, 0, 0, 0, 0, 0, t2014, t2017, t2006, t1975, 0, 0, 0, 0, 0, 0, t1978, t1985, t1972, t1961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187, 0, 0, 0, 0, 0, 0, t2169, t2168, 0, t2092, 0, 0, 0, 0, 0, 0, t2116, t2117, t2149, t2042, 0, 0, 0, 0, 0, 0, t2044, t2054, t2039, t1997, 0, 0, 0, 0, 0, 0, t2005, t2008, t1991, t1969, 0, 0, 0, 0, 0, 0, t1974, t1977, t1967, t1960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2268, 0, 0, 0, 0, 0, 0, t2167, t2166, 0, t2091, 0, 0, 0, 0, 0, 0, t2114, t2115, t2148, t2041, 0, 0, 0, 0, 0, 0, t2043, t2053, t2038, t1996, 0, 0, 0, 0, 0, 0, t2004, t2007, t1990, t1968, 0, 0, 0, 0, 0, 0, t1973, t1976, t1966, t1959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2224, -qJDD(2), 0, t2142, 0, 0, 0, 0, 0, 0, t2155, t2156, t2183, t2080, 0, 0, 0, 0, 0, 0, t2090, t2094, t2084, t2031, 0, 0, 0, 0, 0, 0, t2033, t2035, t2023, t1987, 0, 0, 0, 0, 0, 0, t1993, t1999, t1982, t1963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2224, 0, -t2247, 0, 0, 0, 0, 0, 0, t2182, -t2179, t2186, -t2128, 0, 0, 0, 0, 0, 0, -t2112, -t2124, -t2104, -t2036, 0, 0, 0, 0, 0, 0, -t2049, -t2058, -t2028, -t1988, 0, 0, 0, 0, 0, 0, -t2002, -t2011, -t1983, -t1964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2227, 0, 0, 0, 0, 0, 0, t2153, t2154, 0, t2079, 0, 0, 0, 0, 0, 0, t2089, t2093, t2083, t2030, 0, 0, 0, 0, 0, 0, t2032, t2034, t2022, t1986, 0, 0, 0, 0, 0, 0, t1992, t1998, t1981, t1962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2196, t2190, t2203, t2123, 0, 0, 0, 0, 0, 0, t2113, t2125, t2105, t2037, 0, 0, 0, 0, 0, 0, t2050, t2059, t2029, t1989, 0, 0, 0, 0, 0, 0, t2003, t2012, t1984, t1965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2189, t2195, -t2256, t2122, 0, 0, 0, 0, 0, 0, -t2135, -t2137, -t2133, -t2097, 0, 0, 0, 0, 0, 0, -t2085, -t2087, -t2095, -t2073, 0, 0, 0, 0, 0, 0, -t2045, -t2047, -t2067, -t2040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2182, t2179, -t2186, t2128, 0, 0, 0, 0, 0, 0, t2112, t2124, t2104, t2036, 0, 0, 0, 0, 0, 0, t2049, t2058, t2028, t1988, 0, 0, 0, 0, 0, 0, t2002, t2011, t1983, t1964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2150, t2140, t2136, t2071, 0, 0, 0, 0, 0, 0, t2077, t2082, t2065, t2010, 0, 0, 0, 0, 0, 0, t2021, t2027, t2001, t1971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2141, t2162, t2138, t2070, 0, 0, 0, 0, 0, 0, t2076, t2081, t2064, t2009, 0, 0, 0, 0, 0, 0, t2020, t2026, t2000, t1970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2135, t2137, t2133, t2097, 0, 0, 0, 0, 0, 0, t2085, t2087, t2095, t2073, 0, 0, 0, 0, 0, 0, t2045, t2047, t2067, t2040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2118, t2110, t2086, t2025, 0, 0, 0, 0, 0, 0, t2052, t2063, t2019, t1980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2111, t2126, t2088, t2024, 0, 0, 0, 0, 0, 0, t2051, t2062, t2018, t1979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2085, t2087, t2095, t2073, 0, 0, 0, 0, 0, 0, t2045, t2047, t2067, t2040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2078, t2074, t2046, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2075, t2099, t2048, t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2045, t2047, t2067, t2040;];
f_new_reg  = t1;
