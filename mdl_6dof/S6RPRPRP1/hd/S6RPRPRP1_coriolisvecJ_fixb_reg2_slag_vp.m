% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRP1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:03:03
% EndTime: 2019-03-09 03:03:11
% DurationCPUTime: 2.76s
% Computational Cost: add. (5626->373), mult. (13455->482), div. (0->0), fcn. (9325->8), ass. (0->214)
t158 = cos(qJ(3));
t240 = cos(pkin(10));
t192 = t240 * t158;
t139 = qJD(1) * t192;
t152 = sin(pkin(10));
t156 = sin(qJ(3));
t212 = qJD(1) * t156;
t122 = t152 * t212 - t139;
t119 = qJD(5) + t122;
t155 = sin(qJ(5));
t157 = cos(qJ(5));
t209 = qJD(5) * t157;
t210 = qJD(5) * t155;
t143 = sin(pkin(9)) * pkin(1) + pkin(7);
t136 = t143 * qJD(1);
t149 = t158 * qJD(2);
t147 = qJD(3) * t149;
t211 = qJD(3) * t156;
t112 = -t136 * t211 + t147;
t204 = t158 * qJD(4);
t89 = (-qJ(4) * t211 + t204) * qJD(1) + t112;
t185 = qJ(4) * qJD(1) + t136;
t207 = t156 * qJD(2);
t106 = t158 * t185 + t207;
t206 = t156 * qJD(4);
t90 = -qJD(1) * t206 - qJD(3) * t106;
t45 = t152 * t90 + t240 * t89;
t193 = t240 * t106;
t105 = -t156 * t185 + t149;
t98 = qJD(3) * pkin(3) + t105;
t56 = t152 * t98 + t193;
t53 = qJD(3) * pkin(8) + t56;
t145 = -cos(pkin(9)) * pkin(1) - pkin(2);
t135 = -pkin(3) * t158 + t145;
t213 = qJD(1) * t135;
t121 = qJD(4) + t213;
t133 = t152 * t158 + t156 * t240;
t214 = qJD(1) * t133;
t66 = t122 * pkin(4) - pkin(8) * t214 + t121;
t124 = t133 * qJD(3);
t114 = qJD(1) * t124;
t203 = qJD(1) * qJD(3);
t195 = t156 * t203;
t140 = pkin(3) * t195;
t138 = t152 * t195;
t167 = qJD(3) * t139 - t138;
t71 = pkin(4) * t114 - pkin(8) * t167 + t140;
t191 = -t155 * t71 - t157 * t45 - t209 * t66 + t210 * t53;
t31 = -t155 * t53 + t157 * t66;
t268 = -t119 * t31 - t191;
t103 = qJD(3) * t155 + t157 * t214;
t205 = t157 * qJD(3);
t173 = qJD(5) * t205 + t157 * t167 - t210 * t214;
t32 = t155 * t66 + t157 * t53;
t7 = -qJD(5) * t32 - t155 * t45 + t157 * t71;
t161 = -qJ(6) * t173 + t7;
t258 = t114 * pkin(5);
t1 = -t103 * qJD(6) + t161 + t258;
t101 = t155 * t214 - t205;
t21 = -qJ(6) * t101 + t32;
t251 = t119 * t21;
t267 = t1 + t251;
t266 = t32 * t119 + t7;
t187 = t119 * t155;
t265 = t103 * t187;
t110 = t157 * t114;
t169 = -t152 * t156 + t192;
t127 = t169 * qJD(3);
t224 = t127 * t157;
t170 = t133 * t210 - t224;
t264 = t110 * t133 - t119 * t170;
t263 = t124 * t214 - t167 * t169;
t70 = qJD(5) * t103 + t155 * t167;
t262 = t103 ^ 2;
t261 = t214 ^ 2;
t260 = pkin(3) * t156;
t259 = t101 * pkin(5);
t44 = t152 * t89 - t240 * t90;
t217 = qJ(4) + t143;
t129 = t217 * t156;
t131 = t217 * t158;
t86 = t129 * t240 + t131 * t152;
t257 = t44 * t86;
t20 = -qJ(6) * t103 + t31;
t17 = pkin(5) * t119 + t20;
t256 = t17 - t20;
t222 = t133 * t157;
t255 = -t101 * t224 - t222 * t70;
t95 = t152 * t106;
t58 = t105 * t240 - t95;
t201 = pkin(3) * t212;
t80 = pkin(4) * t214 + pkin(8) * t122 + t201;
t35 = t155 * t80 + t157 * t58;
t254 = -t101 * t209 - t155 * t70;
t253 = t103 * t124 - t169 * t173;
t87 = -t129 * t152 + t131 * t240;
t83 = t157 * t87;
t84 = -pkin(4) * t169 - pkin(8) * t133 + t135;
t42 = t155 * t84 + t83;
t252 = -t114 * t133 - t122 * t127;
t23 = pkin(5) * t70 + t44;
t249 = t155 * t23;
t248 = t157 * t23;
t246 = t44 * t169;
t245 = t44 * t155;
t244 = t44 * t157;
t243 = t173 * t155;
t142 = pkin(3) * t152 + pkin(8);
t216 = qJ(6) + t142;
t188 = qJD(5) * t216;
t229 = t122 * t155;
t242 = -qJ(6) * t229 + t157 * qJD(6) - t155 * t188 - t35;
t228 = t122 * t157;
t34 = -t155 * t58 + t157 * t80;
t241 = -pkin(5) * t214 - qJ(6) * t228 - t155 * qJD(6) - t157 * t188 - t34;
t239 = t101 * t119;
t238 = t101 * t122;
t237 = t101 * t214;
t236 = t101 * t155;
t235 = t103 * t101;
t234 = t103 * t119;
t233 = t103 * t214;
t232 = t103 * t157;
t231 = t114 * t169;
t230 = t119 * t214;
t227 = t214 * t122;
t225 = t127 * t155;
t223 = t133 * t155;
t221 = t136 * t156;
t220 = t155 * t114;
t159 = qJD(3) ^ 2;
t219 = t159 * t156;
t218 = t159 * t158;
t215 = t156 ^ 2 - t158 ^ 2;
t137 = qJD(1) * t145;
t208 = t127 * qJD(3);
t189 = qJD(3) * t217;
t107 = -t156 * t189 + t204;
t166 = -t158 * t189 - t206;
t65 = t107 * t240 + t152 * t166;
t200 = pkin(3) * t211;
t81 = pkin(4) * t124 - pkin(8) * t127 + t200;
t202 = t155 * t81 + t157 * t65 + t209 * t84;
t199 = t103 * t225;
t160 = qJD(1) ^ 2;
t198 = t156 * t160 * t158;
t196 = t133 * t209;
t194 = -t155 * t65 + t157 * t81;
t41 = -t155 * t87 + t157 * t84;
t190 = qJD(6) + t259;
t57 = t105 * t152 + t193;
t64 = t152 * t107 - t166 * t240;
t186 = t119 * t157;
t184 = 0.2e1 * t214;
t183 = t158 * t195;
t144 = -pkin(3) * t240 - pkin(4);
t55 = t240 * t98 - t95;
t172 = t70 * qJ(6) + t191;
t2 = -qJD(6) * t101 - t172;
t182 = -t119 * t17 + t2;
t181 = -t155 * t21 - t157 * t17;
t180 = t155 * t17 - t157 * t21;
t179 = -t155 * t32 - t157 * t31;
t178 = t155 * t31 - t157 * t32;
t177 = -t124 * t101 + t169 * t70;
t176 = -qJ(6) * t127 - qJD(6) * t133;
t116 = t136 * t158 + t207;
t175 = 0.2e1 * qJD(3) * t137;
t174 = t110 + (-t210 - t229) * t119;
t171 = t196 + t225;
t52 = -qJD(3) * pkin(4) - t55;
t168 = -t114 * t142 + t119 * t52;
t164 = qJD(5) * t179 - t7 * t155 - t157 * t191;
t163 = -t119 * t171 - t133 * t220;
t113 = t116 * qJD(3);
t115 = t149 - t221;
t162 = t112 * t158 + t113 * t156 + (-t115 * t158 - t116 * t156) * qJD(3);
t134 = -pkin(5) * t157 + t144;
t130 = t216 * t157;
t128 = t216 * t155;
t120 = t122 ^ 2;
t118 = t124 * qJD(3);
t100 = t101 ^ 2;
t62 = pkin(5) * t223 + t86;
t48 = t119 * t124 - t231;
t47 = -t100 + t262;
t46 = -pkin(5) * t229 + t57;
t40 = t190 + t52;
t39 = pkin(5) * t171 + t64;
t38 = t234 - t70;
t37 = t173 + t239;
t36 = -qJ(6) * t223 + t42;
t33 = -pkin(5) * t169 - qJ(6) * t222 + t41;
t30 = -t119 ^ 2 * t157 - t220 - t233;
t29 = t119 * t186 + t220 - t233;
t28 = t174 + t237;
t27 = t174 - t237;
t25 = t101 * t187 - t70 * t157;
t24 = t103 * t186 + t243;
t19 = t101 * t171 + t223 * t70;
t18 = -t103 * t170 + t173 * t222;
t16 = -qJD(5) * t42 + t194;
t15 = -t210 * t87 + t202;
t14 = t163 - t177;
t13 = t163 + t177;
t12 = t253 - t264;
t11 = t253 + t264;
t10 = -qJ(6) * t196 + (-qJD(5) * t87 + t176) * t155 + t202;
t9 = (t173 - t238) * t157 - t265 + t254;
t8 = (-t173 - t238) * t157 + t265 + t254;
t5 = t124 * pkin(5) + t176 * t157 + (-t83 + (qJ(6) * t133 - t84) * t155) * qJD(5) + t194;
t4 = -t199 + (-t243 + (-t232 + t236) * qJD(5)) * t133 + t255;
t3 = t199 + (t243 + (t232 + t236) * qJD(5)) * t133 + t255;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t183, -0.2e1 * t215 * t203, t218, -0.2e1 * t183, -t219, 0, -t143 * t218 + t156 * t175, t143 * t219 + t158 * t175, t162, t162 * t143, t127 * t214 + t133 * t167, t252 - t263, t208, t122 * t124 - t231, -t118, 0, t135 * t114 + t121 * t124 + (-t64 + (-qJD(1) * t169 + t122) * t260) * qJD(3), t121 * t127 - t135 * t138 + (t135 * t139 + t184 * t260 - t65) * qJD(3), -t114 * t87 - t122 * t65 - t124 * t56 - t127 * t55 + t133 * t44 + t167 * t86 + t169 * t45 + t214 * t64, t257 + t45 * t87 - t55 * t64 + t56 * t65 + (t121 + t213) * t200, t18, t4, t11, t19, t13, t48, t52 * t225 + t101 * t64 + t114 * t41 + t119 * t16 + t124 * t31 - t169 * t7 + t70 * t86 + (t209 * t52 + t245) * t133, t52 * t224 + t103 * t64 - t114 * t42 - t119 * t15 - t124 * t32 - t169 * t191 + t173 * t86 + (-t210 * t52 + t244) * t133, -t101 * t15 - t103 * t16 - t41 * t173 - t42 * t70 + t179 * t127 + (qJD(5) * t178 + t155 * t191 - t7 * t157) * t133, t15 * t32 + t16 * t31 - t191 * t42 + t41 * t7 + t52 * t64 + t257, t18, t4, t11, t19, t13, t48, t40 * t225 - t1 * t169 + t101 * t39 + t114 * t33 + t119 * t5 + t124 * t17 + t62 * t70 + (t209 * t40 + t249) * t133, t40 * t224 - t10 * t119 + t103 * t39 - t114 * t36 - t124 * t21 + t169 * t2 + t62 * t173 + (-t210 * t40 + t248) * t133, -t10 * t101 - t103 * t5 - t33 * t173 - t36 * t70 + t181 * t127 + (qJD(5) * t180 - t1 * t157 - t2 * t155) * t133, t1 * t33 + t10 * t21 + t17 * t5 + t2 * t36 + t23 * t62 + t39 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t218, 0, t112 * t156 - t113 * t158 + (-t115 * t156 + t116 * t158) * qJD(3), 0, 0, 0, 0, 0, 0, -t118, -t208, t252 + t263, -t124 * t55 + t127 * t56 + t133 * t45 - t246, 0, 0, 0, 0, 0, 0, t14, t12, t3, t52 * t124 - t127 * t178 + t133 * t164 - t246, 0, 0, 0, 0, 0, 0, t14, t12, t3, t40 * t124 - t23 * t169 - t180 * t127 + (qJD(5) * t181 - t1 * t155 + t2 * t157) * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, t215 * t160, 0, t198, 0, 0, -t137 * t212, -t137 * t158 * qJD(1) - t147 + (t115 + t221) * qJD(3), 0, 0, t227, -t120 + t261, -t138 + (t139 + t122) * qJD(3), -t227, 0, 0, qJD(3) * t57 - t121 * t214 - t122 * t201 - t44, qJD(3) * t58 + t121 * t122 - t201 * t214 - t45 (t56 - t57) * t214 + (t58 - t55) * t122 + (-t114 * t152 - t167 * t240) * pkin(3), t55 * t57 - t56 * t58 + (-t121 * t212 + t152 * t45 - t240 * t44) * pkin(3), t24, t9, t29, t25, t28, -t230, -t57 * t101 - t31 * t214 + t144 * t70 - t244 + (-t142 * t209 - t34) * t119 + t168 * t155, -t57 * t103 + t32 * t214 + t144 * t173 + t245 + (t142 * t210 + t35) * t119 + t168 * t157, t101 * t35 + t103 * t34 + (-t122 * t31 - t142 * t70 - t191 + (t103 * t142 - t31) * qJD(5)) * t157 + (-t122 * t32 + t142 * t173 - t7 + (t101 * t142 - t32) * qJD(5)) * t155, t142 * t164 + t44 * t144 - t31 * t34 - t32 * t35 - t52 * t57, t24, t9, t29, t25, t28, -t230, -t101 * t46 - t114 * t128 - t214 * t17 + t134 * t70 - t248 + t241 * t119 + (t122 * t40 + (t40 + t259) * qJD(5)) * t155, t40 * t228 - t103 * t46 - t114 * t130 + t214 * t21 + t134 * t173 + t249 - t242 * t119 + (pkin(5) * t103 * t155 + t157 * t40) * qJD(5), -t101 * t242 - t103 * t241 + t128 * t173 - t130 * t70 - t155 * t267 + t157 * t182, -t1 * t128 + t130 * t2 + t134 * t23 + (pkin(5) * t210 - t46) * t40 + t242 * t21 + t241 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t184 * qJD(3), -t138 + (t139 - t122) * qJD(3), -t120 - t261, t122 * t56 + t214 * t55 + t140, 0, 0, 0, 0, 0, 0, t27, t30, t8, t155 * t268 + t157 * t266 - t214 * t52, 0, 0, 0, 0, 0, 0, t27, t30, t8, t155 * t182 + t157 * t267 - t214 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235, t47, t37, -t235, t38, t114, -t52 * t103 + t266, t101 * t52 - t268, 0, 0, t235, t47, t37, -t235, t38, t114, 0.2e1 * t258 + t251 + (-t190 - t40) * t103 + t161, -t262 * pkin(5) + t20 * t119 + (qJD(6) + t40) * t101 + t172, -pkin(5) * t173 - t101 * t256, t256 * t21 + (-t103 * t40 + t1) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 + t234, t173 - t239, -t100 - t262, t101 * t21 + t103 * t17 + t23;];
tauc_reg  = t6;
