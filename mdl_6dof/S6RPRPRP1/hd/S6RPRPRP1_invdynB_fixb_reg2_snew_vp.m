% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:31
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:30:26
% EndTime: 2019-05-05 17:30:46
% DurationCPUTime: 18.90s
% Computational Cost: add. (86675->735), mult. (189748->1071), div. (0->0), fcn. (129635->10), ass. (0->528)
t811 = sin(qJ(5));
t805 = sin(pkin(10));
t807 = cos(pkin(10));
t815 = cos(qJ(3));
t870 = qJD(1) * t815;
t812 = sin(qJ(3));
t871 = qJD(1) * t812;
t756 = t805 * t870 + t807 * t871;
t814 = cos(qJ(5));
t727 = -qJD(3) * t814 + t756 * t811;
t729 = qJD(3) * t811 + t756 * t814;
t669 = t729 * t727;
t862 = qJD(1) * qJD(3);
t849 = t815 * t862;
t861 = qJDD(1) * t812;
t767 = t849 + t861;
t795 = t815 * qJDD(1);
t850 = t812 * t862;
t832 = -t795 + t850;
t839 = t767 * t805 + t807 * t832;
t707 = qJDD(5) + t839;
t841 = -t707 + t669;
t893 = t841 * t811;
t892 = t841 * t814;
t816 = cos(qJ(1));
t813 = sin(qJ(1));
t780 = g(1) * t816 + g(2) * t813;
t818 = qJD(1) ^ 2;
t765 = -pkin(1) * t818 - t780;
t806 = sin(pkin(9));
t808 = cos(pkin(9));
t779 = g(1) * t813 - g(2) * t816;
t829 = qJDD(1) * pkin(1) + t779;
t709 = t806 * t765 - t808 * t829;
t710 = t808 * t765 + t806 * t829;
t842 = t709 * t806 + t710 * t808;
t643 = t709 * t808 - t710 * t806;
t889 = t643 * t813;
t581 = t816 * t842 + t889;
t888 = t643 * t816;
t933 = -t813 * t842 + t888;
t769 = qJDD(1) * t806 + t808 * t818;
t770 = qJDD(1) * t808 - t806 * t818;
t714 = -t769 * t813 + t770 * t816;
t802 = g(3) - qJDD(2);
t743 = qJ(2) * t769 - t802 * t808;
t831 = -qJ(2) * t770 - t802 * t806;
t932 = -pkin(6) * t714 + t743 * t813 + t816 * t831;
t927 = t841 * pkin(5);
t754 = t805 * t871 - t807 * t870;
t708 = t756 * t754;
t921 = qJDD(3) - t708;
t931 = t805 * t921;
t930 = t807 * t921;
t868 = qJD(3) * t756;
t670 = t839 + t868;
t922 = t769 * t816 + t770 * t813;
t928 = pkin(6) * t922 + t743 * t816 - t813 * t831;
t750 = qJD(5) + t754;
t688 = t750 * t727;
t712 = t807 * t767 - t805 * t832;
t826 = qJD(5) * t727 - qJDD(3) * t811 - t712 * t814;
t923 = -t688 - t826;
t840 = -qJDD(3) * t814 + t811 * t712;
t606 = (qJD(5) - t750) * t729 + t840;
t725 = t727 ^ 2;
t726 = t729 ^ 2;
t749 = t750 ^ 2;
t752 = t754 ^ 2;
t753 = t756 ^ 2;
t645 = -t749 - t725;
t576 = t645 * t811 - t892;
t919 = pkin(4) * t576;
t661 = -t726 - t749;
t631 = t669 + t707;
t895 = t631 * t811;
t582 = t661 * t814 - t895;
t918 = pkin(4) * t582;
t917 = pkin(4) * t805;
t610 = -t688 + t826;
t539 = -t606 * t814 - t610 * t811;
t637 = -t725 - t726;
t510 = t539 * t805 - t637 * t807;
t511 = t539 * t807 + t637 * t805;
t457 = -t510 * t812 + t511 * t815;
t537 = -t606 * t811 + t610 * t814;
t427 = t457 * t806 - t537 * t808;
t428 = t457 * t808 + t537 * t806;
t380 = t427 * t816 + t428 * t813;
t916 = pkin(6) * t380;
t577 = t645 * t814 + t893;
t605 = (qJD(5) + t750) * t729 + t840;
t519 = t577 * t805 - t605 * t807;
t520 = t577 * t807 + t605 * t805;
t468 = -t519 * t812 + t520 * t815;
t444 = t468 * t806 - t576 * t808;
t445 = t468 * t808 + t576 * t806;
t391 = t444 * t816 + t445 * t813;
t915 = pkin(6) * t391;
t894 = t631 * t814;
t583 = -t661 * t811 - t894;
t524 = t583 * t805 - t807 * t923;
t525 = t583 * t807 + t805 * t923;
t471 = -t524 * t812 + t525 * t815;
t448 = t471 * t806 - t582 * t808;
t449 = t471 * t808 + t582 * t806;
t395 = t448 * t816 + t449 * t813;
t914 = pkin(6) * t395;
t456 = t510 * t815 + t511 * t812;
t913 = pkin(7) * t456;
t467 = t519 * t815 + t520 * t812;
t912 = pkin(7) * t467;
t470 = t524 * t815 + t525 * t812;
t911 = pkin(7) * t470;
t910 = pkin(8) * t537;
t909 = pkin(8) * t576;
t908 = pkin(8) * t582;
t907 = qJ(2) * t427;
t906 = qJ(2) * t444;
t905 = qJ(2) * t448;
t904 = qJ(4) * t510;
t903 = qJ(4) * t519;
t902 = qJ(4) * t524;
t821 = -t818 * pkin(2) + qJDD(1) * pkin(7) + t710;
t678 = -t802 * t812 + t815 * t821;
t776 = qJD(3) * pkin(3) - qJ(4) * t871;
t801 = t815 ^ 2;
t798 = t801 * t818;
t634 = -pkin(3) * t798 - qJ(4) * t832 - qJD(3) * t776 + t678;
t820 = t812 * t821;
t874 = t812 * t818;
t819 = -t820 - t767 * qJ(4) + qJDD(3) * pkin(3) + (pkin(3) * t874 + qJ(4) * t862 - t802) * t815;
t561 = -0.2e1 * qJD(4) * t754 + t634 * t807 + t805 * t819;
t700 = pkin(4) * t754 - pkin(8) * t756;
t817 = qJD(3) ^ 2;
t535 = -pkin(4) * t817 + qJDD(3) * pkin(8) - t700 * t754 + t561;
t691 = -qJDD(1) * pkin(2) - pkin(7) * t818 + t709;
t640 = pkin(3) * t832 - qJ(4) * t798 + t776 * t871 + qJDD(4) + t691;
t869 = qJD(3) * t754;
t836 = -t712 + t869;
t564 = pkin(4) * t670 + pkin(8) * t836 + t640;
t873 = -t535 * t811 + t564 * t814;
t852 = -qJ(6) * t826 - t873;
t828 = -qJ(6) * t688 - t852;
t864 = qJD(6) * t729;
t450 = t828 - 0.2e1 * t864 - t927;
t901 = t450 * t811;
t900 = t450 * t814;
t843 = t805 * t634 - t807 * t819;
t865 = qJD(4) * t756;
t560 = t843 + 0.2e1 * t865;
t498 = -t560 * t807 + t561 * t805;
t899 = t498 * t812;
t898 = t498 * t815;
t830 = -qJDD(3) * pkin(4) - pkin(8) * t817 + t843;
t837 = (0.2e1 * qJD(4) + t700) * t756;
t534 = t837 + t830;
t897 = t534 * t811;
t896 = t534 * t814;
t891 = t640 * t805;
t890 = t640 * t807;
t887 = t691 * t812;
t886 = t691 * t815;
t704 = qJDD(3) + t708;
t885 = t704 * t805;
t884 = t704 * t807;
t883 = t750 * t811;
t882 = t750 * t814;
t768 = t795 - 0.2e1 * t850;
t881 = t768 * t815;
t788 = t815 * t874;
t777 = qJDD(3) + t788;
t878 = t777 * t812;
t778 = qJDD(3) - t788;
t877 = t778 * t812;
t876 = t778 * t815;
t800 = t812 ^ 2;
t875 = t800 * t818;
t491 = t535 * t814 + t564 * t811;
t872 = t800 + t801;
t867 = qJD(3) * t805;
t866 = qJD(3) * t807;
t860 = qJDD(3) * t808;
t859 = t805 * t669;
t858 = t807 * t669;
t857 = t806 * t708;
t856 = t808 * t708;
t855 = pkin(1) * t427 - pkin(2) * t537 + pkin(7) * t457;
t854 = pkin(1) * t444 - pkin(2) * t576 + pkin(7) * t468;
t853 = pkin(1) * t448 - pkin(2) * t582 + pkin(7) * t471;
t851 = -pkin(4) * t807 - pkin(3);
t848 = -pkin(1) * t456 + qJ(2) * t428;
t847 = -pkin(1) * t467 + qJ(2) * t445;
t846 = -pkin(1) * t470 + qJ(2) * t449;
t845 = -pkin(3) * t576 + qJ(4) * t520;
t844 = -pkin(3) * t582 + qJ(4) * t525;
t499 = t560 * t805 + t561 * t807;
t676 = t815 * t802 + t820;
t617 = t676 * t812 + t678 * t815;
t724 = -t779 * t813 - t780 * t816;
t835 = t806 * t788;
t834 = t808 * t788;
t773 = qJDD(1) * t816 - t813 * t818;
t833 = -pkin(6) * t773 - g(3) * t813;
t424 = t491 * t811 + t814 * t873;
t425 = t491 * t814 - t811 * t873;
t616 = t676 * t815 - t678 * t812;
t723 = t779 * t816 - t780 * t813;
t672 = -t839 + t868;
t651 = -qJD(5) * t729 - t840;
t679 = pkin(5) * t750 - qJ(6) * t729;
t827 = qJ(6) * t651 - 0.2e1 * qJD(6) * t727 - t750 * t679 + t491;
t825 = -pkin(2) * t456 - pkin(3) * t510 + pkin(4) * t637 - pkin(8) * t539;
t824 = -pkin(2) * t467 - pkin(3) * t519 + pkin(4) * t605 - pkin(8) * t577;
t823 = -pkin(2) * t470 - pkin(3) * t524 + pkin(4) * t923 - pkin(8) * t583;
t822 = -pkin(5) * t651 - qJ(6) * t725 + t729 * t679 + qJDD(6) + t830;
t492 = t837 + t822;
t792 = t806 * qJDD(3);
t787 = -t798 - t817;
t786 = t798 - t817;
t785 = -t817 - t875;
t784 = t817 - t875;
t775 = t798 - t875;
t774 = t798 + t875;
t772 = qJDD(1) * t813 + t816 * t818;
t771 = t872 * qJDD(1);
t766 = 0.2e1 * t849 + t861;
t763 = t815 * t777;
t762 = t872 * t862;
t751 = -pkin(6) * t772 + g(3) * t816;
t746 = -t753 - t817;
t745 = -t753 + t817;
t744 = t752 - t817;
t739 = t767 * t815 - t800 * t862;
t738 = -t801 * t862 + t812 * t832;
t737 = t762 * t808 + t792;
t736 = t762 * t806 - t860;
t735 = -t785 * t812 - t876;
t734 = -t784 * t812 + t763;
t733 = t787 * t815 - t878;
t732 = t786 * t815 - t877;
t731 = t785 * t815 - t877;
t730 = t787 * t812 + t763;
t721 = 0.2e1 * t864;
t719 = t771 * t808 - t774 * t806;
t718 = t771 * t806 + t774 * t808;
t713 = -t766 * t812 + t881;
t706 = -t753 + t752;
t702 = -t817 - t752;
t699 = t739 * t808 - t835;
t698 = t738 * t808 + t835;
t697 = t739 * t806 + t834;
t696 = t738 * t806 - t834;
t695 = t734 * t808 + t806 * t861;
t694 = t732 * t808 + t795 * t806;
t693 = t734 * t806 - t808 * t861;
t692 = t732 * t806 - t795 * t808;
t687 = (-t754 * t807 + t756 * t805) * qJD(3);
t686 = (-t754 * t805 - t756 * t807) * qJD(3);
t685 = t735 * t808 + t766 * t806;
t684 = t733 * t808 - t768 * t806;
t683 = t735 * t806 - t766 * t808;
t682 = t733 * t806 + t768 * t808;
t681 = -t726 + t749;
t680 = t725 - t749;
t677 = t713 * t808 - t775 * t806;
t675 = t713 * t806 + t775 * t808;
t674 = -t712 - t869;
t668 = -t752 - t753;
t667 = -t726 + t725;
t665 = t712 * t807 - t756 * t867;
t664 = t712 * t805 + t756 * t866;
t663 = t754 * t866 + t805 * t839;
t662 = t754 * t867 - t807 * t839;
t660 = -t746 * t805 - t884;
t659 = -t745 * t805 + t930;
t658 = t744 * t807 - t885;
t657 = t746 * t807 - t885;
t656 = t745 * t807 + t931;
t655 = t744 * t805 + t884;
t654 = -t718 * t813 + t719 * t816;
t653 = t718 * t816 + t719 * t813;
t650 = -pkin(7) * t731 + t886;
t649 = -pkin(7) * t730 + t887;
t639 = -pkin(2) * t731 + t678;
t638 = -pkin(2) * t730 + t676;
t636 = t702 * t807 - t931;
t635 = t702 * t805 + t930;
t633 = pkin(1) * t802 + qJ(2) * t842;
t626 = (t727 * t811 + t729 * t814) * t750;
t625 = (-t727 * t814 + t729 * t811) * t750;
t624 = -t686 * t812 + t687 * t815;
t623 = -t683 * t813 + t685 * t816;
t622 = -t682 * t813 + t684 * t816;
t621 = t683 * t816 + t685 * t813;
t620 = t682 * t816 + t684 * t813;
t619 = t624 * t808 + t792;
t618 = t624 * t806 - t860;
t614 = t672 * t807 - t674 * t805;
t613 = -t670 * t807 + t805 * t836;
t612 = t672 * t805 + t674 * t807;
t611 = -t670 * t805 - t807 * t836;
t604 = -t729 * t883 - t814 * t826;
t603 = -t651 * t814 - t727 * t883;
t602 = -t729 * t882 + t811 * t826;
t601 = -t651 * t811 + t727 * t882;
t600 = -t664 * t812 + t665 * t815;
t599 = -t662 * t812 + t663 * t815;
t598 = -t657 * t812 + t660 * t815;
t597 = -t656 * t812 + t659 * t815;
t596 = -t655 * t812 + t658 * t815;
t595 = t657 * t815 + t660 * t812;
t594 = t625 * t807 + t707 * t805;
t593 = t625 * t805 - t707 * t807;
t592 = -t681 * t814 + t893;
t591 = t680 * t814 - t895;
t590 = -t680 * t811 - t894;
t589 = -t681 * t811 - t892;
t588 = -qJ(2) * t718 + t616 * t808;
t587 = qJ(2) * t719 + t616 * t806;
t586 = -qJ(4) * t657 + t890;
t585 = t617 * t808 + t691 * t806;
t584 = t617 * t806 - t691 * t808;
t578 = -qJ(4) * t635 + t891;
t574 = t600 * t808 + t857;
t573 = t599 * t808 - t857;
t572 = t600 * t806 - t856;
t571 = t599 * t806 + t856;
t570 = -t635 * t812 + t636 * t815;
t569 = t635 * t815 + t636 * t812;
t568 = t604 * t807 + t859;
t567 = t601 * t807 - t859;
t566 = t604 * t805 - t858;
t565 = t601 * t805 + t858;
t559 = t598 * t808 - t806 * t836;
t558 = t597 * t808 - t674 * t806;
t557 = t596 * t808 + t672 * t806;
t556 = t598 * t806 + t808 * t836;
t555 = t597 * t806 + t674 * t808;
t554 = t596 * t806 - t672 * t808;
t552 = pkin(3) * t836 + qJ(4) * t660 + t891;
t551 = -qJ(2) * t683 - t639 * t806 + t650 * t808;
t550 = -qJ(2) * t682 - t638 * t806 + t649 * t808;
t549 = -pkin(5) * t923 - qJ(6) * t631;
t548 = -pkin(3) * t670 + qJ(4) * t636 - t890;
t547 = -t612 * t812 + t614 * t815;
t546 = -t611 * t812 + t613 * t815;
t545 = t612 * t815 + t614 * t812;
t544 = t570 * t808 + t670 * t806;
t543 = t570 * t806 - t670 * t808;
t542 = -pkin(1) * t731 + qJ(2) * t685 + t639 * t808 + t650 * t806;
t541 = -pkin(1) * t730 + qJ(2) * t684 + t638 * t808 + t649 * t806;
t540 = t605 * t811 - t814 * t923;
t538 = -t605 * t814 - t811 * t923;
t531 = t591 * t807 - t606 * t805;
t530 = t589 * t807 - t610 * t805;
t529 = t591 * t805 + t606 * t807;
t528 = t589 * t805 + t610 * t807;
t527 = t546 * t808 - t706 * t806;
t526 = t546 * t806 + t706 * t808;
t522 = -t593 * t812 + t594 * t815;
t521 = t593 * t815 + t594 * t812;
t517 = t547 * t808 + t668 * t806;
t516 = t547 * t806 - t668 * t808;
t515 = t538 * t807 - t667 * t805;
t514 = t538 * t805 + t667 * t807;
t513 = -t584 * t813 + t585 * t816;
t512 = t584 * t816 + t585 * t813;
t509 = qJ(4) * t511;
t508 = -pkin(2) * t545 - pkin(3) * t612;
t507 = -pkin(4) * t537 - pkin(5) * t610;
t506 = -t566 * t812 + t568 * t815;
t505 = -t565 * t812 + t567 * t815;
t504 = t566 * t815 + t568 * t812;
t503 = t565 * t815 + t567 * t812;
t502 = t522 * t808 - t626 * t806;
t501 = t522 * t806 + t626 * t808;
t500 = -qJ(2) * t584 - (pkin(2) * t806 - pkin(7) * t808) * t616;
t497 = -pkin(2) * t595 - pkin(3) * t657 + t561;
t496 = -t556 * t813 + t559 * t816;
t495 = t556 * t816 + t559 * t813;
t494 = t896 - t908;
t493 = t897 - t909;
t489 = -pkin(2) * t569 - pkin(3) * t635 + t560;
t488 = -t543 * t813 + t544 * t816;
t487 = t543 * t816 + t544 * t813;
t486 = -pkin(3) * t640 + qJ(4) * t499;
t485 = -pkin(7) * t595 - t552 * t812 + t586 * t815;
t484 = -qJ(6) * t661 + t492;
t483 = qJ(2) * t585 - (-pkin(2) * t808 - pkin(7) * t806 - pkin(1)) * t616;
t482 = t506 * t808 - t602 * t806;
t481 = t505 * t808 - t603 * t806;
t480 = t506 * t806 + t602 * t808;
t479 = t505 * t806 + t603 * t808;
t478 = -qJ(4) * t612 - t498;
t477 = -t529 * t812 + t531 * t815;
t476 = -t528 * t812 + t530 * t815;
t475 = t529 * t815 + t531 * t812;
t474 = t528 * t815 + t530 * t812;
t473 = -pkin(7) * t569 - t548 * t812 + t578 * t815;
t472 = -pkin(3) * t668 + qJ(4) * t614 + t499;
t465 = -t516 * t813 + t517 * t816;
t464 = t516 * t816 + t517 * t813;
t463 = -t514 * t812 + t515 * t815;
t462 = t514 * t815 + t515 * t812;
t461 = t491 - t918;
t460 = -t873 - t919;
t459 = -pkin(5) * t605 + qJ(6) * t645 - t700 * t756 - t822 - 0.2e1 * t865;
t458 = -pkin(5) * t725 + t827;
t454 = t477 * t808 - t590 * t806;
t453 = t476 * t808 - t592 * t806;
t452 = t477 * t806 + t590 * t808;
t451 = t476 * t806 + t592 * t808;
t441 = -t501 * t813 + t502 * t816;
t440 = t501 * t816 + t502 * t813;
t439 = t721 + (-t610 + t688) * qJ(6) + t927 + t852;
t438 = t499 * t815 - t899;
t437 = t499 * t812 + t898;
t436 = -qJ(6) * t606 + (-t637 - t725) * pkin(5) + t827;
t435 = t463 * t808 - t540 * t806;
t434 = t463 * t806 + t540 * t808;
t433 = -t918 + (-t661 - t725) * pkin(5) + t827;
t432 = t484 * t814 - t549 * t811 - t908;
t431 = qJ(6) * t892 - t459 * t811 - t909;
t430 = t438 * t808 + t640 * t806;
t429 = t438 * t806 - t640 * t808;
t422 = t721 - t828 - t919 + 0.2e1 * t927;
t421 = -t480 * t813 + t482 * t816;
t420 = -t479 * t813 + t481 * t816;
t419 = t480 * t816 + t482 * t813;
t418 = t479 * t816 + t481 * t813;
t417 = -pkin(5) * t492 + qJ(6) * t458;
t416 = -qJ(2) * t556 + t485 * t808 - t497 * t806;
t415 = -t424 - t910;
t414 = t425 * t807 + t534 * t805;
t413 = t425 * t805 - t534 * t807;
t412 = -pkin(2) * t437 - pkin(3) * t498;
t411 = -pkin(1) * t595 + qJ(2) * t559 + t485 * t806 + t497 * t808;
t410 = -qJ(2) * t543 + t473 * t808 - t489 * t806;
t409 = -pkin(7) * t545 - t472 * t812 + t478 * t815;
t408 = -t461 * t805 + t494 * t807 - t902;
t407 = t458 * t814 - t901;
t406 = t458 * t811 + t900;
t405 = -t460 * t805 + t493 * t807 - t903;
t404 = -t452 * t813 + t454 * t816;
t403 = -t451 * t813 + t453 * t816;
t402 = t452 * t816 + t454 * t813;
t401 = t451 * t816 + t453 * t813;
t400 = t823 - t897;
t399 = t824 + t896;
t398 = -pkin(1) * t569 + qJ(2) * t544 + t473 * t806 + t489 * t808;
t397 = t461 * t807 + t494 * t805 + t844;
t396 = -t448 * t813 + t449 * t816;
t394 = pkin(6) * t396;
t393 = t460 * t807 + t493 * t805 + t845;
t392 = -t444 * t813 + t445 * t816;
t390 = pkin(6) * t392;
t389 = -pkin(7) * t437 - qJ(4) * t898 - t486 * t812;
t388 = -t434 * t813 + t435 * t816;
t387 = t434 * t816 + t435 * t813;
t386 = t415 * t807 + t537 * t917 - t904;
t385 = t407 * t807 + t492 * t805;
t384 = t407 * t805 - t492 * t807;
t383 = -t429 * t813 + t430 * t816;
t382 = t429 * t816 + t430 * t813;
t381 = -t427 * t813 + t428 * t816;
t379 = pkin(6) * t381;
t378 = -t484 * t811 - t549 * t814 + t823;
t377 = -qJ(6) * t893 - t459 * t814 + t824;
t376 = -t436 * t811 + t439 * t814 - t910;
t375 = t805 * t415 + t537 * t851 + t509;
t374 = -qJ(2) * t516 + t409 * t808 - t508 * t806;
t373 = -pkin(4) * t406 - pkin(5) * t450;
t372 = t432 * t807 - t433 * t805 - t902;
t371 = -t422 * t805 + t431 * t807 - t903;
t370 = t432 * t805 + t433 * t807 + t844;
t369 = -pkin(1) * t545 + qJ(2) * t517 + t409 * t806 + t508 * t808;
t368 = -t425 + t825;
t367 = t422 * t807 + t431 * t805 + t845;
t366 = -t413 * t812 + t414 * t815;
t365 = t413 * t815 + t414 * t812;
t364 = t376 * t807 - t507 * t805 - t904;
t363 = -pkin(3) * t537 + t376 * t805 + t507 * t807 + t509;
t362 = -t436 * t814 - t439 * t811 + t825;
t361 = -qJ(4) * t413 + (-pkin(8) * t807 + t917) * t424;
t360 = -pkin(8) * t406 - qJ(6) * t900 - t417 * t811;
t359 = t366 * t808 + t424 * t806;
t358 = t366 * t806 - t424 * t808;
t357 = -t397 * t812 + t408 * t815 - t911;
t356 = -t393 * t812 + t405 * t815 - t912;
t355 = -t384 * t812 + t385 * t815;
t354 = t384 * t815 + t385 * t812;
t353 = -qJ(2) * t429 + t389 * t808 - t412 * t806;
t352 = qJ(4) * t414 + (-pkin(8) * t805 + t851) * t424;
t351 = -t375 * t812 + t386 * t815 - t913;
t350 = -pkin(1) * t437 + qJ(2) * t430 + t389 * t806 + t412 * t808;
t349 = -pkin(2) * t365 - pkin(3) * t413 + pkin(4) * t534 - pkin(8) * t425;
t348 = -t370 * t812 + t372 * t815 - t911;
t347 = t355 * t808 + t406 * t806;
t346 = t355 * t806 - t406 * t808;
t345 = -t367 * t812 + t371 * t815 - t912;
t344 = t357 * t808 - t400 * t806 - t905;
t343 = t356 * t808 - t399 * t806 - t906;
t342 = -t363 * t812 + t364 * t815 - t913;
t341 = t357 * t806 + t400 * t808 + t846;
t340 = t356 * t806 + t399 * t808 + t847;
t339 = -t358 * t813 + t359 * t816;
t338 = t358 * t816 + t359 * t813;
t337 = -qJ(4) * t384 + t360 * t807 - t373 * t805;
t336 = t348 * t808 - t378 * t806 - t905;
t335 = t351 * t808 - t368 * t806 - t907;
t334 = t345 * t808 - t377 * t806 - t906;
t333 = t348 * t806 + t378 * t808 + t846;
t332 = t351 * t806 + t368 * t808 + t848;
t331 = -pkin(3) * t406 + qJ(4) * t385 + t360 * t805 + t373 * t807;
t330 = t345 * t806 + t377 * t808 + t847;
t329 = -pkin(2) * t354 - pkin(3) * t384 + pkin(4) * t492 - pkin(8) * t407 + qJ(6) * t901 - t417 * t814;
t328 = -pkin(7) * t365 - t352 * t812 + t361 * t815;
t327 = -t346 * t813 + t347 * t816;
t326 = t346 * t816 + t347 * t813;
t325 = t342 * t808 - t362 * t806 - t907;
t324 = t342 * t806 + t362 * t808 + t848;
t323 = -qJ(2) * t358 + t328 * t808 - t349 * t806;
t322 = -pkin(7) * t354 - t331 * t812 + t337 * t815;
t321 = -pkin(1) * t365 + qJ(2) * t359 + t328 * t806 + t349 * t808;
t320 = -qJ(2) * t346 + t322 * t808 - t329 * t806;
t319 = -pkin(1) * t354 + qJ(2) * t347 + t322 * t806 + t329 * t808;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t772, -t773, 0, t724, 0, 0, 0, 0, 0, 0, -t922, -t714, 0, t581, 0, 0, 0, 0, 0, 0, t622, t623, t654, t513, 0, 0, 0, 0, 0, 0, t488, t496, t465, t383, 0, 0, 0, 0, 0, 0, t392, t396, t381, t339, 0, 0, 0, 0, 0, 0, t392, t396, t381, t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t773, -t772, 0, t723, 0, 0, 0, 0, 0, 0, t714, -t922, 0, -t933, 0, 0, 0, 0, 0, 0, t620, t621, t653, t512, 0, 0, 0, 0, 0, 0, t487, t495, t464, t382, 0, 0, 0, 0, 0, 0, t391, t395, t380, t338, 0, 0, 0, 0, 0, 0, t391, t395, t380, t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t802, 0, 0, 0, 0, 0, 0, t730, t731, 0, -t616, 0, 0, 0, 0, 0, 0, t569, t595, t545, t437, 0, 0, 0, 0, 0, 0, t467, t470, t456, t365, 0, 0, 0, 0, 0, 0, t467, t470, t456, t354; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t773, 0, -t772, 0, t833, -t751, -t723, -pkin(6) * t723, 0, 0, t714, 0, -t922, 0, t932, t928, t933, pkin(6) * t933 + qJ(2) * t888 - t633 * t813, -t697 * t813 + t699 * t816, -t675 * t813 + t677 * t816, -t693 * t813 + t695 * t816, -t696 * t813 + t698 * t816, -t692 * t813 + t694 * t816, -t736 * t813 + t737 * t816, -pkin(6) * t620 - t541 * t813 + t550 * t816, -pkin(6) * t621 - t542 * t813 + t551 * t816, -pkin(6) * t653 - t587 * t813 + t588 * t816, -pkin(6) * t512 - t483 * t813 + t500 * t816, -t572 * t813 + t574 * t816, -t526 * t813 + t527 * t816, -t555 * t813 + t558 * t816, -t571 * t813 + t573 * t816, -t554 * t813 + t557 * t816, -t618 * t813 + t619 * t816, -pkin(6) * t487 - t398 * t813 + t410 * t816, -pkin(6) * t495 - t411 * t813 + t416 * t816, -pkin(6) * t464 - t369 * t813 + t374 * t816, -pkin(6) * t382 - t350 * t813 + t353 * t816, t421, t388, t403, t420, t404, t441, -t340 * t813 + t343 * t816 - t915, -t341 * t813 + t344 * t816 - t914, -t332 * t813 + t335 * t816 - t916, -pkin(6) * t338 - t321 * t813 + t323 * t816, t421, t388, t403, t420, t404, t441, -t330 * t813 + t334 * t816 - t915, -t333 * t813 + t336 * t816 - t914, -t324 * t813 + t325 * t816 - t916, -pkin(6) * t326 - t319 * t813 + t320 * t816; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t772, 0, t773, 0, t751, t833, t724, pkin(6) * t724, 0, 0, t922, 0, t714, 0, -t928, t932, t581, pkin(6) * t581 + qJ(2) * t889 + t633 * t816, t697 * t816 + t699 * t813, t675 * t816 + t677 * t813, t693 * t816 + t695 * t813, t696 * t816 + t698 * t813, t692 * t816 + t694 * t813, t736 * t816 + t737 * t813, pkin(6) * t622 + t541 * t816 + t550 * t813, pkin(6) * t623 + t542 * t816 + t551 * t813, pkin(6) * t654 + t587 * t816 + t588 * t813, pkin(6) * t513 + t483 * t816 + t500 * t813, t572 * t816 + t574 * t813, t526 * t816 + t527 * t813, t555 * t816 + t558 * t813, t571 * t816 + t573 * t813, t554 * t816 + t557 * t813, t618 * t816 + t619 * t813, pkin(6) * t488 + t398 * t816 + t410 * t813, pkin(6) * t496 + t411 * t816 + t416 * t813, pkin(6) * t465 + t369 * t816 + t374 * t813, pkin(6) * t383 + t350 * t816 + t353 * t813, t419, t387, t401, t418, t402, t440, t340 * t816 + t343 * t813 + t390, t341 * t816 + t344 * t813 + t394, t332 * t816 + t335 * t813 + t379, pkin(6) * t339 + t321 * t816 + t323 * t813, t419, t387, t401, t418, t402, t440, t330 * t816 + t334 * t813 + t390, t333 * t816 + t336 * t813 + t394, t324 * t816 + t325 * t813 + t379, pkin(6) * t327 + t319 * t816 + t320 * t813; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t779, t780, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t770 - t709, -pkin(1) * t769 - t710, 0, -pkin(1) * t643, (t767 + t849) * t812, t766 * t815 + t768 * t812, t784 * t815 + t878, t881, t786 * t812 + t876, 0, pkin(1) * t682 + pkin(2) * t768 + pkin(7) * t733 - t886, pkin(1) * t683 - pkin(2) * t766 + pkin(7) * t735 + t887, pkin(1) * t718 + pkin(2) * t774 + pkin(7) * t771 + t617, pkin(1) * t584 - pkin(2) * t691 + pkin(7) * t617, t664 * t815 + t665 * t812, t611 * t815 + t613 * t812, t656 * t815 + t659 * t812, t662 * t815 + t663 * t812, t655 * t815 + t658 * t812, t686 * t815 + t687 * t812, pkin(1) * t543 - pkin(2) * t670 + pkin(7) * t570 + t548 * t815 + t578 * t812, pkin(1) * t556 + pkin(2) * t836 + pkin(7) * t598 + t552 * t815 + t586 * t812, pkin(1) * t516 - pkin(2) * t668 + pkin(7) * t547 + t472 * t815 + t478 * t812, pkin(1) * t429 - pkin(2) * t640 + pkin(7) * t438 - qJ(4) * t899 + t486 * t815, t504, t462, t474, t503, t475, t521, t393 * t815 + t405 * t812 + t854, t397 * t815 + t408 * t812 + t853, t375 * t815 + t386 * t812 + t855, pkin(1) * t358 - pkin(2) * t424 + pkin(7) * t366 + t352 * t815 + t361 * t812, t504, t462, t474, t503, t475, t521, t367 * t815 + t371 * t812 + t854, t370 * t815 + t372 * t812 + t853, t363 * t815 + t364 * t812 + t855, pkin(1) * t346 - pkin(2) * t406 + pkin(7) * t355 + t331 * t815 + t337 * t812;];
tauB_reg  = t1;
