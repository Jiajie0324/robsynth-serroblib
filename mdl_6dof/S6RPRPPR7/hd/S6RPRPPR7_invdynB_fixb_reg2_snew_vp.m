% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:17
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:16:42
% EndTime: 2019-05-05 17:17:04
% DurationCPUTime: 21.66s
% Computational Cost: add. (35002->606), mult. (78635->820), div. (0->0), fcn. (51352->8), ass. (0->416)
t719 = qJD(3) ^ 2;
t710 = sin(pkin(9));
t711 = cos(pkin(9));
t714 = sin(qJ(3));
t717 = cos(qJ(3));
t769 = qJD(1) * t717;
t677 = -t710 * t714 * qJD(1) + t711 * t769;
t810 = t677 ^ 2;
t650 = t810 + t719;
t675 = (-t710 * t717 - t711 * t714) * qJD(1);
t783 = t677 * t675;
t832 = qJDD(3) - t783;
t850 = t832 * t710;
t553 = t650 * t711 + t850;
t849 = t832 * t711;
t559 = -t650 * t710 + t849;
t493 = t553 * t717 + t559 * t714;
t715 = sin(qJ(1));
t718 = cos(qJ(1));
t763 = qJD(1) * qJD(3);
t750 = t714 * t763;
t759 = qJDD(1) * t717;
t684 = -t750 + t759;
t749 = t717 * t763;
t761 = qJDD(1) * t714;
t731 = t749 + t761;
t620 = t711 * t684 - t710 * t731;
t765 = t675 * qJD(3);
t833 = t620 + t765;
t462 = t493 * t718 + t715 * t833;
t910 = pkin(6) * t462;
t465 = t493 * t715 - t718 * t833;
t909 = pkin(6) * t465;
t651 = t810 - t719;
t831 = qJDD(3) + t783;
t854 = t710 * t831;
t554 = -t651 * t711 + t854;
t853 = t711 * t831;
t560 = t651 * t710 + t853;
t495 = t554 * t717 + t560 * t714;
t587 = t765 - t620;
t908 = t495 * t715 - t587 * t718;
t907 = t495 * t718 + t587 * t715;
t811 = t675 ^ 2;
t602 = -t719 - t811;
t536 = t602 * t710 + t853;
t539 = -t602 * t711 + t854;
t472 = t536 * t717 - t539 * t714;
t619 = t684 * t710 + t711 * t731;
t662 = qJD(3) * t677;
t822 = t619 + t662;
t454 = t472 * t718 - t715 * t822;
t906 = pkin(6) * t454;
t457 = t472 * t715 + t718 * t822;
t905 = pkin(6) * t457;
t646 = t811 - t719;
t551 = t646 * t710 + t849;
t558 = -t646 * t711 + t850;
t492 = t551 * t717 - t558 * t714;
t581 = t619 - t662;
t904 = t492 * t715 - t581 * t718;
t903 = t492 * t718 + t581 * t715;
t807 = pkin(7) + pkin(1);
t902 = -qJ(2) * t833 - t493 * t807;
t498 = t553 * t714 - t559 * t717;
t901 = -pkin(2) * t833 + t498 * t807;
t900 = pkin(2) * t493 + pkin(3) * t553 + qJ(2) * t498;
t819 = -t811 - t810;
t867 = -t581 * t710 + t587 * t711;
t868 = -t581 * t711 - t587 * t710;
t878 = t714 * t868 + t717 * t867;
t888 = t715 * t819 - t718 * t878;
t899 = pkin(6) * t888;
t890 = t715 * t878 + t718 * t819;
t898 = pkin(6) * t890;
t897 = t554 * t714 - t560 * t717;
t895 = qJ(4) * t553;
t894 = qJ(4) * t559;
t893 = -qJ(2) * t822 + t472 * t807;
t475 = t536 * t714 + t539 * t717;
t892 = -pkin(2) * t822 - t475 * t807;
t820 = t810 - t811;
t848 = -t710 * t822 + t711 * t833;
t795 = t833 * t710;
t796 = t822 * t711;
t869 = -t795 - t796;
t880 = -t714 * t869 - t717 * t848;
t891 = -t715 * t880 + t718 * t820;
t889 = t715 * t820 + t718 * t880;
t887 = qJ(2) * t819 - t807 * t878;
t877 = -t714 * t867 + t717 * t868;
t886 = pkin(2) * t819 - t807 * t877;
t885 = t551 * t714 + t558 * t717;
t884 = -pkin(2) * t472 - pkin(3) * t536 - qJ(2) * t475;
t400 = pkin(2) * t878 + pkin(3) * t867 - qJ(2) * t877;
t882 = qJ(4) * t867;
t881 = -pkin(3) * t819 + qJ(4) * t868;
t879 = -t714 * t848 + t717 * t869;
t875 = qJ(4) * t536;
t874 = qJ(4) * t539;
t824 = qJ(5) * t833;
t809 = 2 * qJD(5);
t713 = sin(qJ(6));
t716 = cos(qJ(6));
t630 = qJD(3) * t713 + t716 * t675;
t632 = qJD(3) * t716 - t675 * t713;
t579 = t632 * t630;
t615 = qJDD(6) + t620;
t823 = -t579 + t615;
t841 = t713 * t823;
t837 = t716 * t823;
t701 = t715 * qJDD(3);
t729 = (t675 * t710 - t677 * t711) * qJD(3);
t730 = (t675 * t711 + t677 * t710) * qJD(3);
t817 = -t714 * t730 - t717 * t729;
t830 = t718 * t817 + t701;
t702 = t718 * qJDD(3);
t829 = -t715 * t817 + t702;
t752 = t718 * t783;
t736 = t711 * t620 - t662 * t710;
t738 = t710 * t620 + t662 * t711;
t812 = -t714 * t736 - t717 * t738;
t828 = -t715 * t812 - t752;
t733 = t619 * t710 - t711 * t765;
t737 = -t711 * t619 - t710 * t765;
t814 = -t714 * t733 - t717 * t737;
t827 = -t715 * t814 + t752;
t753 = t715 * t783;
t826 = t718 * t812 - t753;
t825 = t718 * t814 + t753;
t821 = -pkin(4) * t662 + t677 * t809;
t708 = t714 ^ 2;
t720 = qJD(1) ^ 2;
t775 = t708 * t720;
t697 = -t719 - t775;
t773 = t717 * t720;
t693 = g(1) * t715 - t718 * g(2);
t739 = qJDD(2) - t693;
t727 = -qJ(2) * t720 + t739;
t645 = -qJDD(1) * t807 + t727;
t786 = t645 * t717;
t564 = qJDD(3) * pkin(3) - qJ(4) * t684 + t786 + (-pkin(3) * t773 - qJ(4) * t763 + g(3)) * t714;
t623 = -t717 * g(3) + t714 * t645;
t565 = pkin(3) * t697 - qJ(4) * t761 + t623;
t483 = 0.2e1 * qJD(4) * t675 + t710 * t564 + t711 * t565;
t694 = t718 * g(1) + t715 * g(2);
t707 = qJDD(1) * qJ(2);
t734 = t694 - t707;
t818 = t720 * (qJ(4) * t708 + t807) - pkin(3) * t731 - qJDD(4) - (qJD(3) * pkin(3) - qJ(4) * t769) * t769 + t734;
t816 = -t714 * t729 + t717 * t730;
t815 = -t714 * t737 + t717 * t733;
t813 = -t714 * t738 + t717 * t736;
t628 = t630 ^ 2;
t629 = t632 ^ 2;
t665 = qJD(6) + t677;
t663 = t665 ^ 2;
t808 = pkin(4) + pkin(8);
t806 = pkin(4) * t711;
t805 = qJDD(1) * pkin(1);
t767 = qJD(4) * t677;
t659 = 0.2e1 * t767;
t771 = -t711 * t564 + t710 * t565;
t482 = t659 + t771;
t420 = -t482 * t711 + t483 * t710;
t804 = t420 * t714;
t803 = t420 * t717;
t644 = pkin(5) * t677 - qJD(3) * pkin(8);
t601 = -pkin(4) * t675 - qJ(5) * t677;
t732 = -t719 * pkin(4) + t601 * t675 + t483;
t757 = qJDD(3) * qJ(5);
t426 = t757 - t619 * pkin(5) - t811 * pkin(8) + (t809 + t644) * qJD(3) + t732;
t802 = t426 * t713;
t801 = t426 * t716;
t532 = t579 + t615;
t800 = t532 * t713;
t799 = t532 * t716;
t762 = qJD(2) * qJD(1);
t756 = -0.2e1 * t762;
t566 = t756 + t818;
t798 = t566 * t710;
t797 = t566 * t711;
t641 = t720 * t807 + t734 + t756;
t788 = t641 * t714;
t787 = t641 * t717;
t785 = t665 * t713;
t784 = t665 * t716;
t683 = 0.2e1 * t749 + t761;
t782 = t683 * t714;
t709 = t717 ^ 2;
t770 = t708 + t709;
t686 = t770 * qJDD(1);
t781 = t686 * t715;
t780 = t686 * t718;
t751 = t714 * t773;
t691 = qJDD(3) + t751;
t779 = t691 * t714;
t778 = t691 * t717;
t692 = qJDD(3) - t751;
t777 = t692 * t714;
t776 = t692 * t717;
t774 = t709 * t720;
t764 = qJD(6) + t665;
t760 = qJDD(1) * t715;
t758 = qJDD(1) * t718;
t755 = t710 * t579;
t754 = t711 * t579;
t748 = qJ(5) * t710 + pkin(3);
t742 = t677 * t601 + qJDD(5) + t771;
t728 = -qJDD(3) * pkin(4) + t742;
t725 = -qJ(5) * t719 + t728;
t423 = -pkin(5) * t587 - pkin(8) * t831 + t659 + t725;
t705 = 0.2e1 * t762;
t722 = t705 - t818 - t821 - t824;
t436 = -pkin(5) * t811 + t619 * t808 - t677 * t644 + t722;
t395 = -t716 * t423 + t436 * t713;
t421 = t482 * t710 + t711 * t483;
t653 = -t720 * pkin(1) + t705 - t734;
t666 = -t727 + t805;
t593 = t718 * t653 - t666 * t715;
t627 = -t693 * t715 - t718 * t694;
t746 = qJDD(3) * t713 - t716 * t619;
t745 = t715 * t751;
t744 = t718 * t751;
t687 = -t715 * t720 + t758;
t741 = pkin(6) * t687 + g(3) * t715;
t688 = t718 * t720 + t760;
t740 = -pkin(6) * t688 + g(3) * t718;
t622 = g(3) * t714 + t786;
t396 = t423 * t713 + t436 * t716;
t362 = -t395 * t716 + t396 * t713;
t363 = t395 * t713 + t396 * t716;
t547 = t622 * t717 + t623 * t714;
t548 = -t622 * t714 + t623 * t717;
t590 = t653 * t715 + t666 * t718;
t626 = t693 * t718 - t694 * t715;
t735 = qJDD(3) * t716 + t619 * t713;
t726 = (-qJD(6) + t665) * t632 - t746;
t544 = -qJD(6) * t630 + t735;
t724 = qJD(3) * t809 + t732;
t459 = t724 + t757;
t721 = -t619 * pkin(4) + t566 + t821;
t699 = -t719 - t774;
t698 = t719 - t774;
t696 = -t719 + t775;
t690 = t770 * t720;
t689 = (-t708 + t709) * t720;
t685 = -0.2e1 * t750 + t759;
t681 = t770 * t763;
t658 = -0.2e1 * t767;
t643 = -t684 * t714 - t709 * t763;
t642 = -t708 * t763 + t717 * t731;
t638 = -t699 * t714 - t778;
t637 = t697 * t717 - t777;
t636 = t699 * t717 - t779;
t635 = -t698 * t717 - t777;
t634 = t697 * t714 + t776;
t633 = -t696 * t714 - t778;
t625 = -t690 * t718 - t781;
t624 = -t690 * t715 + t780;
t621 = -t685 * t717 + t782;
t600 = t665 * t630;
t595 = t636 * t715 + t685 * t718;
t594 = t634 * t715 + t683 * t718;
t592 = -t636 * t718 + t685 * t715;
t591 = -t634 * t718 + t683 * t715;
t589 = -t629 + t663;
t588 = t628 - t663;
t576 = t629 - t628;
t563 = -t629 - t663;
t543 = -qJD(6) * t632 - t746;
t542 = -t663 - t628;
t541 = -pkin(2) * t690 - t548;
t540 = -t628 - t629;
t535 = pkin(2) * t636 - qJ(2) * t638 - t623;
t534 = pkin(2) * t634 - qJ(2) * t637 + t622;
t530 = pkin(2) * t683 - t637 * t807 - t787;
t529 = pkin(2) * t685 - t638 * t807 + t788;
t528 = (-t630 * t716 + t632 * t713) * t665;
t527 = (t630 * t713 + t632 * t716) * t665;
t524 = t547 * t715 - t641 * t718;
t523 = -t547 * t718 - t641 * t715;
t514 = -t630 * t764 + t735;
t513 = t544 + t600;
t512 = t544 - t600;
t509 = t632 * t764 + t746;
t508 = t544 * t716 - t632 * t785;
t507 = -t544 * t713 - t632 * t784;
t506 = -t543 * t713 + t630 * t784;
t505 = -t543 * t716 - t630 * t785;
t500 = -t797 + t895;
t499 = pkin(2) * t547 - qJ(2) * t548;
t490 = -t527 * t710 + t615 * t711;
t489 = t527 * t711 + t615 * t710;
t488 = t588 * t716 - t800;
t487 = -t589 * t713 + t837;
t486 = -t588 * t713 - t799;
t485 = -t589 * t716 - t841;
t484 = -t798 - t875;
t480 = -t563 * t713 - t799;
t479 = t563 * t716 - t800;
t478 = -pkin(2) * t641 - t548 * t807;
t477 = t542 * t716 - t841;
t476 = t542 * t713 + t837;
t471 = -t507 * t710 + t754;
t470 = -t505 * t710 - t754;
t469 = t507 * t711 + t755;
t468 = t505 * t711 - t755;
t467 = -pkin(3) * t833 - t798 - t894;
t466 = t721 + t824;
t461 = -pkin(3) * t822 + t797 - t874;
t460 = t658 - t725;
t448 = t513 * t713 + t716 * t726;
t447 = -t509 * t716 - t512 * t713;
t446 = -t513 * t716 + t713 * t726;
t445 = t509 * t713 - t512 * t716;
t444 = (t619 + t822) * pkin(4) + t722;
t443 = t721 + 0.2e1 * t824;
t442 = -t485 * t710 + t513 * t711;
t441 = -t486 * t710 + t711 * t726;
t440 = t485 * t711 + t513 * t710;
t439 = t486 * t711 + t710 * t726;
t438 = t659 + (-t819 - t719) * qJ(5) + t728;
t437 = -pkin(4) * t819 + t459;
t435 = t479 * t710 + t514 * t711;
t434 = -t479 * t711 + t514 * t710;
t433 = -t489 * t717 - t490 * t714;
t432 = t476 * t710 + t509 * t711;
t431 = -t476 * t711 + t509 * t710;
t425 = -t445 * t710 + t576 * t711;
t424 = t445 * t711 + t576 * t710;
t419 = t446 * t710 + t540 * t711;
t418 = -t446 * t711 + t540 * t710;
t417 = -pkin(4) * t795 + t443 * t711 - t895;
t416 = -t469 * t717 - t471 * t714;
t415 = -t468 * t717 - t470 * t714;
t414 = pkin(3) * t566 + qJ(4) * t421;
t413 = qJ(5) * t796 - t444 * t710 + t875;
t412 = t894 + t443 * t710 + (pkin(3) + t806) * t833;
t411 = -t420 - t882;
t410 = t444 * t711 + t748 * t822 + t874;
t409 = t459 * t711 - t460 * t710;
t408 = t459 * t710 + t460 * t711;
t407 = pkin(5) * t446 - qJ(5) * t448;
t406 = t421 + t881;
t405 = -t483 - t900;
t404 = -t440 * t717 - t442 * t714;
t403 = -t439 * t717 - t441 * t714;
t402 = -t434 * t714 + t435 * t717;
t401 = t434 * t717 + t435 * t714;
t399 = t658 - t771 - t884;
t398 = -t431 * t714 + t432 * t717;
t397 = t431 * t717 + t432 * t714;
t394 = -t424 * t717 - t425 * t714;
t393 = pkin(4) * t650 + (qJDD(3) + t832) * qJ(5) + t724 + t900;
t392 = t421 * t717 - t804;
t391 = t421 * t714 + t803;
t390 = -t467 * t717 - t500 * t714 - t901;
t389 = -t418 * t714 + t419 * t717;
t388 = t418 * t717 + t419 * t714;
t387 = -t437 * t710 + t438 * t711 - t882;
t386 = pkin(4) * t587 - qJ(5) * t581 + t400;
t385 = t391 * t715 - t566 * t718;
t384 = -t391 * t718 - t566 * t715;
t383 = t437 * t711 + t438 * t710 + t881;
t382 = t659 + (-t602 - t719) * qJ(5) + (-qJDD(3) - t831) * pkin(4) + t742 + t884;
t381 = pkin(5) * t514 - t480 * t808 - t802;
t380 = t401 * t715 + t480 * t718;
t379 = -t401 * t718 + t480 * t715;
t378 = pkin(5) * t509 - t477 * t808 + t801;
t377 = -t461 * t717 - t484 * t714 - t892;
t376 = t397 * t715 + t477 * t718;
t375 = -t397 * t718 + t477 * t715;
t374 = -qJ(4) * t408 + (-pkin(4) * t710 + qJ(5) * t711) * t466;
t373 = -t408 * t714 + t409 * t717;
t372 = t408 * t717 + t409 * t714;
t371 = t388 * t715 + t448 * t718;
t370 = -t388 * t718 + t448 * t715;
t369 = pkin(5) * t479 - qJ(5) * t480 - t396;
t368 = pkin(5) * t476 - qJ(5) * t477 - t395;
t367 = qJ(4) * t409 + (t748 + t806) * t466;
t366 = t372 * t715 - t466 * t718;
t365 = -t372 * t718 - t466 * t715;
t364 = -t412 * t717 - t417 * t714 + t901;
t361 = -t410 * t717 - t413 * t714 + t892;
t360 = -t406 * t717 - t411 * t714 + t886;
t359 = t362 * t710 + t426 * t711;
t358 = -t362 * t711 + t426 * t710;
t357 = pkin(2) * t391 + pkin(3) * t420 - qJ(2) * t392;
t356 = pkin(5) * t540 - t448 * t808 - t363;
t355 = -t383 * t717 - t387 * t714 + t886;
t354 = -qJ(4) * t434 + t369 * t711 - t381 * t710;
t353 = -qJ(4) * t431 + t368 * t711 - t378 * t710;
t352 = -pkin(2) * t566 + qJ(4) * t804 - t392 * t807 - t414 * t717;
t351 = -pkin(3) * t480 + qJ(4) * t435 + t369 * t710 + t381 * t711;
t350 = -pkin(3) * t477 + qJ(4) * t432 + t368 * t710 + t378 * t711;
t349 = pkin(2) * t401 + pkin(3) * t434 - qJ(2) * t402 + qJ(5) * t514 - t479 * t808 + t801;
t348 = pkin(2) * t397 + pkin(3) * t431 - qJ(2) * t398 + qJ(5) * t509 - t476 * t808 + t802;
t347 = pkin(5) * t362 - qJ(5) * t363;
t346 = -qJ(4) * t418 - t356 * t710 + t407 * t711;
t345 = pkin(2) * t372 + pkin(3) * t408 + pkin(4) * t460 - qJ(2) * t373 + qJ(5) * t459;
t344 = pkin(5) * t426 - t363 * t808;
t343 = -pkin(3) * t448 + qJ(4) * t419 + t356 * t711 + t407 * t710;
t342 = -t358 * t714 + t359 * t717;
t341 = t358 * t717 + t359 * t714;
t340 = pkin(2) * t388 + pkin(3) * t418 - qJ(2) * t389 + qJ(5) * t540 - t446 * t808 - t362;
t339 = -pkin(2) * t466 - t367 * t717 - t373 * t807 - t374 * t714;
t338 = t341 * t715 + t363 * t718;
t337 = -t341 * t718 + t363 * t715;
t336 = pkin(2) * t480 - t351 * t717 - t354 * t714 - t402 * t807;
t335 = pkin(2) * t477 - t350 * t717 - t353 * t714 - t398 * t807;
t334 = -qJ(4) * t358 - t344 * t710 + t347 * t711;
t333 = pkin(2) * t448 - t343 * t717 - t346 * t714 - t389 * t807;
t332 = -pkin(3) * t363 + qJ(4) * t359 + t344 * t711 + t347 * t710;
t331 = pkin(2) * t341 + pkin(3) * t358 - qJ(2) * t342 + qJ(5) * t426 - t362 * t808;
t330 = pkin(2) * t363 - t332 * t717 - t334 * t714 - t342 * t807;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t688, -t687, 0, t627, 0, 0, 0, 0, 0, 0, 0, t688, t687, t593, 0, 0, 0, 0, 0, 0, t594, t595, t625, t524, 0, 0, 0, 0, 0, 0, t457, -t465, t890, t385, 0, 0, 0, 0, 0, 0, t890, -t457, t465, t366, 0, 0, 0, 0, 0, 0, t376, t380, t371, t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t687, -t688, 0, t626, 0, 0, 0, 0, 0, 0, 0, -t687, t688, t590, 0, 0, 0, 0, 0, 0, t591, t592, t624, t523, 0, 0, 0, 0, 0, 0, -t454, t462, t888, t384, 0, 0, 0, 0, 0, 0, t888, t454, -t462, t365, 0, 0, 0, 0, 0, 0, t375, t379, t370, t337; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t637, t638, 0, t548, 0, 0, 0, 0, 0, 0, -t475, t498, t877, t392, 0, 0, 0, 0, 0, 0, t877, t475, -t498, t373, 0, 0, 0, 0, 0, 0, t398, t402, t389, t342; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t687, 0, -t688, 0, -t741, -t740, -t626, -pkin(6) * t626, 0, -t687, t688, 0, 0, 0, -t590, t741, t740, -pkin(6) * t590 + (-pkin(1) * t715 + qJ(2) * t718) * g(3), -t643 * t715 + t744, -t621 * t715 + t689 * t718, -t635 * t715 + t717 * t758, -t642 * t715 - t744, -t633 * t715 - t714 * t758, -t681 * t715 + t702, -pkin(6) * t591 - t530 * t715 + t534 * t718, -pkin(6) * t592 - t529 * t715 + t535 * t718, -pkin(2) * t780 - pkin(6) * t624 - t541 * t715, -pkin(6) * t523 - t478 * t715 + t499 * t718, t828, t891, t908, t827, t904, t829, -t377 * t715 + t399 * t718 + t906, -t390 * t715 + t405 * t718 - t910, -t360 * t715 + t400 * t718 - t899, -pkin(6) * t384 - t352 * t715 + t357 * t718, t829, -t908, -t904, t828, t891, t827, -t355 * t715 + t386 * t718 - t899, -t361 * t715 + t382 * t718 - t906, -t364 * t715 + t393 * t718 + t910, -pkin(6) * t365 - t339 * t715 + t345 * t718, -t416 * t715 + t508 * t718, -t394 * t715 + t447 * t718, -t404 * t715 + t487 * t718, -t415 * t715 + t506 * t718, -t403 * t715 + t488 * t718, -t433 * t715 + t528 * t718, -pkin(6) * t375 - t335 * t715 + t348 * t718, -pkin(6) * t379 - t336 * t715 + t349 * t718, -pkin(6) * t370 - t333 * t715 + t340 * t718, -pkin(6) * t337 - t330 * t715 + t331 * t718; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t688, 0, t687, 0, t740, -t741, t627, pkin(6) * t627, 0, -t688, -t687, 0, 0, 0, t593, -t740, t741, pkin(6) * t593 + (pkin(1) * t718 + qJ(2) * t715) * g(3), t643 * t718 + t745, t621 * t718 + t689 * t715, t635 * t718 + t715 * t759, t642 * t718 - t745, t633 * t718 - t714 * t760, t681 * t718 + t701, pkin(6) * t594 + t530 * t718 + t534 * t715, pkin(6) * t595 + t529 * t718 + t535 * t715, -pkin(2) * t781 + pkin(6) * t625 + t541 * t718, pkin(6) * t524 + t478 * t718 + t499 * t715, t826, t889, -t907, t825, -t903, t830, t377 * t718 + t399 * t715 + t905, t390 * t718 + t405 * t715 - t909, t360 * t718 + t400 * t715 + t898, pkin(6) * t385 + t352 * t718 + t357 * t715, t830, t907, t903, t826, t889, t825, t355 * t718 + t386 * t715 + t898, t361 * t718 + t382 * t715 - t905, t364 * t718 + t393 * t715 + t909, pkin(6) * t366 + t339 * t718 + t345 * t715, t416 * t718 + t508 * t715, t394 * t718 + t447 * t715, t404 * t718 + t487 * t715, t415 * t718 + t506 * t715, t403 * t718 + t488 * t715, t433 * t718 + t528 * t715, pkin(6) * t376 + t335 * t718 + t348 * t715, pkin(6) * t380 + t336 * t718 + t349 * t715, pkin(6) * t371 + t333 * t718 + t340 * t715, pkin(6) * t338 + t330 * t718 + t331 * t715; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t693, t694, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t739 - 0.2e1 * t805, -t694 + t705 + 0.2e1 * t707, pkin(1) * t666 + qJ(2) * t653, (t684 - t750) * t717, -t683 * t717 - t685 * t714, -t698 * t714 + t776, t782, t696 * t717 - t779, 0, qJ(2) * t683 - t634 * t807 - t788, qJ(2) * t685 - t636 * t807 - t787, -qJ(2) * t690 + t686 * t807 - t547, -qJ(2) * t641 - t547 * t807, t813, t879, -t897, t815, -t885, t816, -t461 * t714 + t484 * t717 - t893, -t467 * t714 + t500 * t717 - t902, -t406 * t714 + t411 * t717 + t887, -qJ(2) * t566 - qJ(4) * t803 - t391 * t807 - t414 * t714, t816, t897, t885, t813, t879, t815, -t383 * t714 + t387 * t717 + t887, -t410 * t714 + t413 * t717 + t893, -t412 * t714 + t417 * t717 + t902, -qJ(2) * t466 - t367 * t714 - t372 * t807 + t374 * t717, -t469 * t714 + t471 * t717, -t424 * t714 + t425 * t717, -t440 * t714 + t442 * t717, -t468 * t714 + t470 * t717, -t439 * t714 + t441 * t717, -t489 * t714 + t490 * t717, qJ(2) * t477 - t350 * t714 + t353 * t717 - t397 * t807, qJ(2) * t480 - t351 * t714 + t354 * t717 - t401 * t807, qJ(2) * t448 - t343 * t714 + t346 * t717 - t388 * t807, qJ(2) * t363 - t332 * t714 + t334 * t717 - t341 * t807;];
tauB_reg  = t1;
