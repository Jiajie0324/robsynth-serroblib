% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRRRP2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:01:16
% EndTime: 2019-03-09 06:01:29
% DurationCPUTime: 4.98s
% Computational Cost: add. (8295->468), mult. (19423->605), div. (0->0), fcn. (12965->8), ass. (0->235)
t220 = sin(qJ(3));
t222 = cos(qJ(3));
t242 = pkin(3) * t220 - pkin(8) * t222;
t178 = t242 * qJD(1);
t219 = sin(qJ(4));
t221 = cos(qJ(4));
t206 = sin(pkin(10)) * pkin(1) + pkin(7);
t187 = t206 * qJD(1);
t341 = qJD(2) * t222 - t220 * t187;
t103 = t219 * t178 + t221 * t341;
t290 = qJD(1) * t222;
t270 = t219 * t290;
t334 = -pkin(9) - pkin(8);
t272 = qJD(4) * t334;
t359 = pkin(9) * t270 + t219 * t272 - t103;
t102 = t221 * t178 - t219 * t341;
t299 = t221 * t222;
t235 = pkin(4) * t220 - pkin(9) * t299;
t358 = qJD(1) * t235 - t221 * t272 + t102;
t286 = qJD(3) * t221;
t291 = qJD(1) * t220;
t170 = -t219 * t291 + t286;
t288 = qJD(3) * t219;
t171 = t221 * t291 + t288;
t218 = sin(qJ(5));
t333 = cos(qJ(5));
t110 = -t333 * t170 + t171 * t218;
t108 = t110 ^ 2;
t232 = t218 * t170 + t333 * t171;
t335 = t232 ^ 2;
t357 = -t108 + t335;
t280 = qJD(5) * t218;
t356 = pkin(4) * t280;
t355 = t333 * pkin(4);
t204 = -qJD(4) + t290;
t196 = -qJD(5) + t204;
t319 = t110 * t196;
t282 = qJD(4) * t220;
t259 = qJD(1) * t282;
t278 = qJD(1) * qJD(3);
t350 = qJD(3) * qJD(4) + t222 * t278;
t129 = t219 * t259 - t221 * t350;
t261 = t333 * qJD(5);
t273 = t219 * t350 + t221 * t259;
t56 = t333 * t129 - t170 * t261 + t171 * t280 + t218 * t273;
t354 = -t56 - t319;
t353 = t110 * qJ(6);
t352 = t110 * t232;
t271 = t333 * t221;
t303 = t218 * t219;
t338 = qJD(4) + qJD(5);
t339 = t333 * qJD(4) + t261;
t295 = -t218 * t270 - t221 * t339 + t271 * t290 + t303 * t338;
t173 = t218 * t221 + t333 * t219;
t119 = t338 * t173;
t294 = -t173 * t290 + t119;
t316 = t232 * t196;
t57 = qJD(5) * t232 - t218 * t129 + t333 * t273;
t351 = -t57 - t316;
t281 = qJD(4) * t221;
t265 = t220 * t281;
t285 = qJD(3) * t222;
t268 = t219 * t285;
t349 = t265 + t268;
t134 = -qJD(3) * pkin(3) - t341;
t107 = -pkin(4) * t170 + t134;
t208 = t220 * t278;
t136 = t341 * qJD(3);
t181 = t242 * qJD(3);
t164 = qJD(1) * t181;
t145 = qJD(2) * t220 + t187 * t222;
t135 = qJD(3) * pkin(8) + t145;
t207 = -cos(pkin(10)) * pkin(1) - pkin(2);
t165 = -pkin(3) * t222 - pkin(8) * t220 + t207;
t138 = t165 * qJD(1);
t87 = t135 * t221 + t138 * t219;
t54 = -qJD(4) * t87 - t219 * t136 + t221 * t164;
t38 = pkin(4) * t208 + t129 * pkin(9) + t54;
t283 = qJD(4) * t219;
t53 = -t135 * t283 + t221 * t136 + t138 * t281 + t219 * t164;
t43 = -t273 * pkin(9) + t53;
t86 = -t135 * t219 + t221 * t138;
t75 = -pkin(9) * t171 + t86;
t68 = -pkin(4) * t204 + t75;
t76 = pkin(9) * t170 + t87;
t257 = -t218 * t38 - t68 * t261 + t76 * t280 - t333 * t43;
t348 = t107 * t110 + t257;
t190 = t334 * t219;
t191 = t334 * t221;
t126 = t218 * t190 - t333 * t191;
t329 = qJD(5) * t126 + t218 * t359 + t358 * t333;
t328 = -t190 * t261 - t191 * t280 + t358 * t218 - t333 * t359;
t256 = -pkin(5) * t110 - qJD(6);
t69 = t107 - t256;
t347 = t69 * t232;
t346 = t87 * t204 - t54;
t345 = t204 * t86 + t53;
t344 = qJ(6) * t232;
t342 = t222 * t273;
t244 = -t145 + (-t270 + t283) * pkin(4);
t177 = t206 * t299;
t116 = t219 * t165 + t177;
t203 = pkin(5) * t208;
t340 = -t232 * qJD(6) + t203;
t258 = -t218 * t43 + t333 * t38;
t74 = t333 * t76;
t26 = t218 * t68 + t74;
t7 = -qJD(5) * t26 + t258;
t337 = -t107 * t232 + t7;
t214 = t220 ^ 2;
t238 = qJD(1) * t214 - t204 * t222;
t266 = t219 * t282;
t336 = -t204 * t266 - t238 * t286;
t72 = t218 * t76;
t25 = t333 * t68 - t72;
t21 = t25 - t344;
t20 = -pkin(5) * t196 + t21;
t332 = t20 - t21;
t331 = pkin(5) * t291 - qJ(6) * t295 + t173 * qJD(6) + t329;
t172 = -t271 + t303;
t330 = qJ(6) * t294 + qJD(6) * t172 + t328;
t302 = t219 * t220;
t275 = t218 * t302;
t149 = t220 * t271 - t275;
t247 = t333 * t285;
t79 = t119 * t220 + t218 * t268 - t221 * t247;
t327 = t79 * t110 - t149 * t57;
t29 = t333 * t75 - t72;
t105 = -pkin(9) * t302 + t116;
t151 = t221 * t165;
t300 = t220 * t221;
t304 = t206 * t219;
t96 = -pkin(9) * t300 + t151 + (-pkin(4) - t304) * t222;
t62 = t333 * t105 + t218 * t96;
t325 = t56 * qJ(6);
t251 = pkin(4) * t261;
t323 = -t218 * pkin(4) * t57 - t110 * t251;
t322 = pkin(5) * t294 + t244;
t148 = t173 * t220;
t80 = t219 * t247 - t218 * t266 - qJD(5) * t275 + (t218 * t285 + t220 * t339) * t221;
t321 = -t148 * t208 + t80 * t196;
t315 = t134 * t219;
t314 = t134 * t221;
t137 = t145 * qJD(3);
t313 = t137 * t219;
t312 = t137 * t220;
t311 = t137 * t221;
t310 = t170 * t204;
t309 = t170 * t220;
t308 = t171 * t170;
t307 = t171 * t204;
t306 = t204 * t219;
t305 = t204 * t221;
t301 = t219 * t222;
t223 = qJD(3) ^ 2;
t298 = t223 * t220;
t297 = t223 * t222;
t243 = t273 * t221;
t267 = t221 * t285;
t296 = t170 * t267 - t220 * t243;
t287 = qJD(3) * t220;
t293 = t221 * t181 + t287 * t304;
t154 = pkin(4) * t302 + t220 * t206;
t292 = -t222 ^ 2 + t214;
t188 = qJD(1) * t207;
t284 = qJD(4) * t170;
t224 = qJD(1) ^ 2;
t274 = t222 * t224 * t220;
t120 = pkin(4) * t349 + t206 * t285;
t213 = -pkin(4) * t221 - pkin(3);
t269 = t171 * t285;
t264 = t204 * t281;
t263 = t196 * t291;
t28 = -t218 * t75 - t74;
t255 = t222 * t56 + t232 * t287;
t61 = -t105 * t218 + t333 * t96;
t253 = t129 * t222 + t171 * t287;
t125 = t333 * t190 + t191 * t218;
t252 = -t129 - t284;
t249 = t220 * t264;
t248 = t171 * t265;
t246 = t218 * t208;
t245 = t222 * t208;
t241 = t148 * t56 - t232 * t80;
t240 = -t219 * t87 - t221 * t86;
t239 = t219 * t86 - t221 * t87;
t236 = 0.2e1 * qJD(3) * t188;
t234 = t57 * qJ(6) + t257;
t233 = -t110 * t287 + t222 * t57;
t63 = t235 * qJD(3) + (-t177 + (pkin(9) * t220 - t165) * t219) * qJD(4) + t293;
t77 = t165 * t281 + t219 * t181 + (-t220 * t286 - t222 * t283) * t206;
t65 = -pkin(9) * t349 + t77;
t10 = -t105 * t280 + t218 * t63 + t96 * t261 + t333 * t65;
t231 = t238 * t219;
t230 = -t149 * t208 - t196 * t79;
t2 = -qJD(6) * t110 - t234;
t11 = -t62 * qJD(5) - t218 * t65 + t333 * t63;
t228 = qJD(4) * t240 - t54 * t219 + t53 * t221;
t91 = t273 * pkin(4) + t137;
t226 = t136 * t222 + t312 + (-t145 * t220 - t222 * t341) * qJD(3);
t225 = t7 + t325;
t27 = t57 * pkin(5) + t91;
t212 = pkin(5) + t355;
t166 = t196 * t251;
t142 = pkin(5) * t172 + t213;
t132 = (-t196 - t290) * t287;
t115 = -t206 * t301 + t151;
t106 = pkin(5) * t148 + t154;
t99 = -qJ(6) * t172 + t126;
t98 = -qJ(6) * t173 + t125;
t88 = pkin(4) * t171 + pkin(5) * t232;
t78 = -qJD(4) * t116 + t293;
t58 = pkin(5) * t80 + t120;
t46 = -qJ(6) * t148 + t62;
t44 = -pkin(5) * t222 - qJ(6) * t149 + t61;
t41 = t294 * t196 + (-qJD(3) * t172 + t110) * t291;
t40 = t295 * t196 + (qJD(3) * t173 - t232) * t291;
t24 = t29 - t344;
t23 = t28 + t353;
t22 = t26 - t353;
t19 = t110 * t80 + t148 * t57;
t18 = -t149 * t56 - t232 * t79;
t17 = t294 * t110 + t57 * t172;
t16 = -t56 * t173 - t232 * t295;
t15 = t233 + t321;
t14 = -t233 + t321;
t13 = -t230 + t255;
t12 = t230 + t255;
t9 = -qJ(6) * t80 - qJD(6) * t148 + t10;
t8 = pkin(5) * t287 + t79 * qJ(6) - t149 * qJD(6) + t11;
t5 = t241 + t327;
t4 = -t241 + t327;
t3 = t295 * t110 + t56 * t172 - t173 * t57 - t232 * t294;
t1 = t225 + t340;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t245, -0.2e1 * t292 * t278, t297, -0.2e1 * t245, -t298, 0, -t206 * t297 + t220 * t236, t206 * t298 + t222 * t236, t226, t226 * t206, -t129 * t300 + (-t266 + t267) * t171, -t248 + (-t269 + (t129 - t284) * t220) * t219 + t296, t253 - t336, -t170 * t349 + t273 * t302, t249 + t342 + (-t231 + t309) * qJD(3) (-t204 - t290) * t287, -t78 * t204 + (-t54 + (-t170 * t206 + t315) * qJD(3)) * t222 + (t206 * t273 + t313 + t134 * t281 + (qJD(1) * t115 + t86) * qJD(3)) * t220, t77 * t204 + (t53 + (t171 * t206 + t314) * qJD(3)) * t222 + (-t134 * t283 - t129 * t206 + t311 + (-qJD(1) * t116 - t87) * qJD(3)) * t220, t77 * t170 - t116 * t273 - t78 * t171 + t115 * t129 + t240 * t285 + (qJD(4) * t239 - t53 * t219 - t54 * t221) * t220, t54 * t115 + t53 * t116 + t87 * t77 + t86 * t78 + (t134 * t285 + t312) * t206, t18, t5, t13, t19, t15, t132, t107 * t80 - t11 * t196 + t120 * t110 + t91 * t148 + t154 * t57 - t7 * t222 + (qJD(1) * t61 + t25) * t287, t10 * t196 - t107 * t79 + t120 * t232 + t91 * t149 - t154 * t56 - t257 * t222 + (-qJD(1) * t62 - t26) * t287, -t10 * t110 - t11 * t232 + t148 * t257 - t149 * t7 + t25 * t79 - t26 * t80 + t56 * t61 - t57 * t62, t10 * t26 + t107 * t120 + t11 * t25 + t154 * t91 - t257 * t62 + t61 * t7, t18, t5, t13, t19, t15, t132, -t1 * t222 + t106 * t57 + t58 * t110 + t27 * t148 - t8 * t196 + t69 * t80 + (qJD(1) * t44 + t20) * t287, -t106 * t56 + t58 * t232 + t27 * t149 + t9 * t196 + t2 * t222 - t69 * t79 + (-qJD(1) * t46 - t22) * t287, -t1 * t149 - t110 * t9 - t148 * t2 + t20 * t79 - t22 * t80 - t232 * t8 + t44 * t56 - t46 * t57, t1 * t44 + t106 * t27 + t2 * t46 + t20 * t8 + t22 * t9 + t58 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t298, -t297, 0, t136 * t220 - t137 * t222 + (t145 * t222 - t220 * t341) * qJD(3), 0, 0, 0, 0, 0, 0, t249 - t342 + (-t231 - t309) * qJD(3), t253 + t336, t248 + (t220 * t252 + t269) * t219 + t296 (-qJD(3) * t239 - t137) * t222 + (qJD(3) * t134 + t228) * t220, 0, 0, 0, 0, 0, 0, t14, t12, t4, t107 * t287 - t148 * t7 - t149 * t257 - t222 * t91 - t25 * t80 - t26 * t79, 0, 0, 0, 0, 0, 0, t14, t12, t4, -t1 * t148 + t149 * t2 - t20 * t80 - t22 * t79 - t222 * t27 + t287 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274, t292 * t224, 0, t274, 0, 0, -t188 * t291, -t188 * t290, 0, 0, -t129 * t219 - t171 * t305 (-t129 - t310) * t221 + (-t273 + t307) * t219, -t264 + (t204 * t299 + (-t171 + t288) * t220) * qJD(1), t170 * t306 - t243, t204 * t283 + (-t204 * t301 + (-t170 + t286) * t220) * qJD(1), t204 * t291, -pkin(3) * t273 - t311 + t102 * t204 + t145 * t170 + (pkin(8) * t305 + t315) * qJD(4) + (-t86 * t220 + (-pkin(8) * t287 - t134 * t222) * t219) * qJD(1), pkin(3) * t129 - t103 * t204 + t313 - t145 * t171 + (-pkin(8) * t306 + t314) * qJD(4) + (-t134 * t299 + (-pkin(8) * t286 + t87) * t220) * qJD(1), t102 * t171 - t103 * t170 + ((qJD(4) * t171 - t273) * pkin(8) + t345) * t221 + (pkin(8) * t252 + t346) * t219, -t137 * pkin(3) + pkin(8) * t228 - t86 * t102 - t87 * t103 - t134 * t145, t16, t3, t40, t17, t41, t263, t91 * t172 + t213 * t57 + t329 * t196 + t244 * t110 + t294 * t107 + (qJD(3) * t125 - t25) * t291, t91 * t173 - t213 * t56 - t328 * t196 + t244 * t232 - t295 * t107 + (-qJD(3) * t126 + t26) * t291, t328 * t110 + t125 * t56 - t126 * t57 + t172 * t257 - t7 * t173 + t232 * t329 + t295 * t25 - t294 * t26, t244 * t107 + t7 * t125 - t126 * t257 + t91 * t213 - t329 * t25 - t328 * t26, t16, t3, t40, t17, t41, t263, t142 * t57 + t27 * t172 + t294 * t69 + t331 * t196 + t322 * t110 + (qJD(3) * t98 - t20) * t291, -t142 * t56 + t27 * t173 - t295 * t69 - t330 * t196 + t322 * t232 + (-qJD(3) * t99 + t22) * t291, -t1 * t173 + t330 * t110 - t2 * t172 + t295 * t20 - t294 * t22 + t232 * t331 + t98 * t56 - t99 * t57, t1 * t98 + t27 * t142 + t2 * t99 - t331 * t20 - t330 * t22 + t322 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t308, -t170 ^ 2 + t171 ^ 2, -t129 + t310, t308, -t273 - t307, t208, -t134 * t171 - t346, -t134 * t170 - t345, 0, 0, t352, t357, t354, -t352, t351, t208, t28 * t196 + (-t110 * t171 + t196 * t280 + t333 * t208) * pkin(4) + t337, -t29 * t196 + t166 + (-t171 * t232 - t246) * pkin(4) + t348, t56 * t355 + t323 + (t26 + t28 + t356) * t232 + (t29 - t25) * t110, -t25 * t28 - t26 * t29 + (t333 * t7 - t107 * t171 - t218 * t257 + (-t218 * t25 + t333 * t26) * qJD(5)) * pkin(4), t352, t357, t354, -t352, t351, t208, t212 * t208 + t325 - t347 - t88 * t110 + t23 * t196 + (-t74 + (pkin(4) * t196 - t68) * t218) * qJD(5) + t258 + t340, -pkin(4) * t246 + t110 * t69 - t196 * t24 - t232 * t88 + t166 - t2, t212 * t56 + t323 + (t22 + t23 + t356) * t232 + (t24 - t20) * t110, t1 * t212 - t20 * t23 - t22 * t24 - t69 * t88 + (t2 * t218 + (-t20 * t218 + t333 * t22) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t352, t357, t354, -t352, t351, t208, -t26 * t196 + t337, -t196 * t25 + t348, 0, 0, t352, t357, t354, -t352, t351, t208, -t22 * t196 + 0.2e1 * t203 + (t256 - t69) * t232 + t225, -t335 * pkin(5) - t21 * t196 + (qJD(6) + t69) * t110 + t234, t56 * pkin(5) - t332 * t110, t332 * t22 + (t1 - t347) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 - t316, -t56 + t319, -t108 - t335, t22 * t110 + t20 * t232 + t27;];
tauc_reg  = t6;
