% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:01:23
% EndTime: 2019-03-09 06:01:36
% DurationCPUTime: 7.01s
% Computational Cost: add. (10421->613), mult. (22173->752), div. (0->0), fcn. (14997->14), ass. (0->306)
t264 = sin(pkin(10));
t240 = pkin(1) * t264 + pkin(7);
t213 = t240 * qJD(1);
t268 = sin(qJ(3));
t188 = t268 * t213;
t271 = cos(qJ(3));
t158 = qJD(2) * t271 - t188;
t313 = pkin(3) * t268 - pkin(8) * t271;
t198 = t313 * qJD(1);
t267 = sin(qJ(4));
t270 = cos(qJ(4));
t114 = t270 * t158 + t267 * t198;
t367 = qJD(1) * t271;
t341 = t267 * t367;
t273 = -pkin(9) - pkin(8);
t343 = qJD(4) * t273;
t452 = pkin(9) * t341 + t267 * t343 - t114;
t113 = -t158 * t267 + t270 * t198;
t373 = t270 * t271;
t298 = pkin(4) * t268 - pkin(9) * t373;
t451 = -qJD(1) * t298 + t270 * t343 - t113;
t363 = qJD(3) * t270;
t368 = qJD(1) * t268;
t189 = -t267 * t368 + t363;
t365 = qJD(3) * t267;
t190 = t270 * t368 + t365;
t266 = sin(qJ(5));
t425 = cos(qJ(5));
t124 = -t425 * t189 + t190 * t266;
t121 = t124 ^ 2;
t295 = t266 * t189 + t190 * t425;
t426 = t295 ^ 2;
t450 = -t121 + t426;
t235 = -qJD(4) + t367;
t260 = qJ(1) + pkin(10);
t250 = sin(t260);
t251 = cos(t260);
t310 = g(1) * t251 + g(2) * t250;
t410 = g(3) * t271;
t285 = -t268 * t310 + t410;
t362 = qJD(3) * t271;
t207 = t240 * qJDD(1);
t443 = qJD(2) * qJD(3) + t207;
t321 = -t271 * qJDD(2) + t213 * t362 + t268 * t443;
t394 = qJDD(3) * pkin(3);
t99 = t321 - t394;
t282 = -t285 - t99;
t449 = -qJD(4) * pkin(8) * t235 - t282;
t357 = qJD(5) * t266;
t448 = pkin(4) * t357;
t447 = pkin(4) * t425;
t226 = -qJD(5) + t235;
t392 = t124 * t226;
t359 = qJD(4) * t268;
t330 = qJD(1) * t359;
t354 = qJD(1) * qJD(3);
t331 = t271 * t354;
t351 = t268 * qJDD(1);
t440 = qJD(3) * qJD(4) + t331 + t351;
t117 = (-qJDD(3) + t330) * t267 - t440 * t270;
t320 = t267 * t440 + t270 * t330;
t293 = t270 * qJDD(3) - t320;
t332 = t425 * qJD(5);
t48 = t425 * t117 - t189 * t332 + t190 * t357 - t266 * t293;
t446 = -t48 - t392;
t445 = t124 * qJ(6);
t444 = t124 * t295;
t342 = t425 * t270;
t378 = t266 * t267;
t432 = qJD(4) + qJD(5);
t434 = t425 * qJD(4) + t332;
t372 = -t266 * t341 - t270 * t434 + t342 * t367 + t378 * t432;
t192 = t266 * t270 + t267 * t425;
t133 = t432 * t192;
t371 = -t192 * t367 + t133;
t389 = t295 * t226;
t49 = qJD(5) * t295 - t266 * t117 - t425 * t293;
t442 = -t49 - t389;
t358 = qJD(4) * t270;
t335 = t268 * t358;
t338 = t267 * t362;
t441 = t335 + t338;
t145 = -qJD(3) * pkin(3) - t158;
t119 = -pkin(4) * t189 + t145;
t263 = qJ(4) + qJ(5);
t256 = sin(t263);
t257 = cos(t263);
t380 = t257 * t271;
t141 = -t250 * t380 + t251 * t256;
t143 = t250 * t256 + t251 * t380;
t255 = t271 * qJDD(1);
t185 = t268 * t354 + qJDD(4) - t255;
t314 = pkin(3) * t271 + pkin(8) * t268;
t300 = -pkin(2) - t314;
t265 = cos(pkin(10));
t424 = pkin(1) * t265;
t178 = t300 - t424;
t201 = t313 * qJD(3);
t120 = qJD(1) * t201 + qJDD(1) * t178;
t110 = t270 * t120;
t159 = qJD(2) * t268 + t213 * t271;
t146 = qJD(3) * pkin(8) + t159;
t147 = t178 * qJD(1);
t88 = t146 * t270 + t147 * t267;
t345 = -t268 * qJDD(2) - t271 * t443;
t364 = qJD(3) * t268;
t107 = -t213 * t364 - t345;
t98 = qJDD(3) * pkin(8) + t107;
t38 = -qJD(4) * t88 - t267 * t98 + t110;
t23 = pkin(4) * t185 + pkin(9) * t117 + t38;
t360 = qJD(4) * t267;
t37 = t267 * t120 - t146 * t360 + t147 * t358 + t270 * t98;
t28 = pkin(9) * t293 + t37;
t87 = -t146 * t267 + t270 * t147;
t76 = -pkin(9) * t190 + t87;
t69 = -pkin(4) * t235 + t76;
t77 = pkin(9) * t189 + t88;
t3 = t266 * t23 + t425 * t28 + t69 * t332 - t77 * t357;
t381 = t257 * t268;
t283 = g(1) * t143 - g(2) * t141 + g(3) * t381 - t3;
t439 = t119 * t124 + t283;
t216 = t273 * t267;
t217 = t273 * t270;
t405 = t216 * t332 + t217 * t357 + t451 * t266 + t425 * t452;
t137 = t266 * t216 - t425 * t217;
t404 = -qJD(5) * t137 - t266 * t452 + t451 * t425;
t438 = t235 * t87 + t37;
t395 = pkin(1) * qJDD(1);
t437 = qJ(6) * t295;
t315 = -t159 + (-t341 + t360) * pkin(4);
t177 = qJDD(5) + t185;
t322 = pkin(4) * t332;
t422 = pkin(4) * t266;
t435 = -t177 * t422 + t226 * t322;
t196 = t240 * t373;
t131 = t267 * t178 + t196;
t376 = t267 * t271;
t152 = t250 * t376 + t251 * t270;
t154 = t250 * t270 - t251 * t376;
t433 = -g(1) * t154 + g(2) * t152;
t167 = t177 * pkin(5);
t400 = t48 * qJ(6);
t431 = -t295 * qJD(6) + t167 + t400;
t382 = t256 * t271;
t140 = t250 * t382 + t251 * t257;
t142 = t250 * t257 - t251 * t382;
t411 = g(3) * t268;
t430 = -g(1) * t142 + g(2) * t140 + t256 * t411;
t328 = t425 * t23 - t266 * t28;
t75 = t425 * t77;
t36 = t266 * t69 + t75;
t4 = -qJD(5) * t36 + t328;
t277 = t4 + t430;
t429 = -t119 * t295 + t277;
t336 = t267 * t359;
t337 = t270 * t362;
t291 = -t336 + t337;
t375 = t268 * t270;
t428 = t185 * t375 - t235 * t291;
t327 = -pkin(5) * t124 - qJD(6);
t70 = t119 - t327;
t427 = -t70 * t295 + t430;
t423 = pkin(4) * t190;
t421 = pkin(4) * t267;
t420 = pkin(4) * t270;
t417 = g(1) * t250;
t412 = g(2) * t251;
t73 = t266 * t77;
t35 = t425 * t69 - t73;
t26 = t35 - t437;
t24 = -pkin(5) * t226 + t26;
t409 = -t26 + t24;
t191 = -t342 + t378;
t408 = -qJ(6) * t371 - qJD(6) * t191 + t405;
t407 = -pkin(5) * t368 + qJ(6) * t372 - t192 * qJD(6) + t404;
t377 = t267 * t268;
t347 = t266 * t377;
t161 = t268 * t342 - t347;
t318 = t425 * t362;
t80 = t133 * t268 + t266 * t338 - t270 * t318;
t406 = t80 * t124 - t161 * t49;
t42 = t425 * t76 - t73;
t403 = qJ(6) * t49;
t401 = t235 * t88;
t163 = t270 * t178;
t385 = t240 * t267;
t100 = -pkin(9) * t375 + t163 + (-pkin(4) - t385) * t271;
t116 = -pkin(9) * t377 + t131;
t62 = t266 * t100 + t425 * t116;
t399 = -t124 * t322 - t49 * t422;
t398 = pkin(5) * t371 + t315;
t288 = t293 * t270;
t397 = t189 * t337 + t268 * t288;
t160 = t192 * t268;
t81 = t267 * t318 - t266 * t336 - qJD(5) * t347 + (t266 * t362 + t268 * t434) * t270;
t396 = -t160 * t177 + t81 * t226;
t388 = t189 * t235;
t387 = t190 * t189;
t386 = t190 * t235;
t384 = t251 * t267;
t383 = t251 * t271;
t259 = -qJ(6) + t273;
t379 = t259 * t268;
t374 = t268 * t273;
t370 = t270 * t201 + t364 * t385;
t166 = pkin(4) * t377 + t268 * t240;
t261 = t268 ^ 2;
t262 = t271 ^ 2;
t369 = t261 - t262;
t241 = -pkin(2) - t424;
t214 = qJD(1) * t241;
t366 = qJD(3) * t189;
t361 = qJD(4) * t189;
t356 = qJD(6) * t124;
t208 = qJDD(1) * t241;
t275 = qJD(1) ^ 2;
t346 = t271 * t275 * t268;
t134 = pkin(4) * t441 + t240 * t362;
t272 = cos(qJ(1));
t344 = t272 * pkin(1) + t251 * pkin(2) + t250 * pkin(7);
t249 = pkin(3) + t420;
t340 = t190 * t362;
t339 = t235 * t365;
t334 = t226 * t368;
t269 = sin(qJ(1));
t329 = -pkin(1) * t269 + t251 * pkin(7);
t203 = pkin(5) * t257 + t420;
t41 = -t266 * t76 - t75;
t326 = t271 * t48 + t295 * t364;
t61 = t425 * t100 - t116 * t266;
t324 = t117 * t271 + t190 * t364;
t136 = t425 * t216 + t217 * t266;
t323 = -t117 - t361;
t319 = t190 * t335;
t317 = t268 * t331;
t218 = t268 * t417;
t316 = -t268 * t412 + t218;
t312 = -g(1) * t140 - g(2) * t142;
t311 = -g(1) * t141 - g(2) * t143;
t309 = g(1) * t269 - g(2) * t272;
t308 = t160 * t48 - t295 * t81;
t307 = -t267 * t88 - t270 * t87;
t306 = t267 * t87 - t270 * t88;
t305 = -t161 * t177 - t226 * t80;
t197 = pkin(3) + t203;
t304 = t197 * t271 - t379;
t302 = t249 * t271 - t374;
t299 = -g(3) * t380 + t310 * t381;
t297 = t310 * t256;
t296 = -t124 * t364 + t271 * t49;
t294 = -t267 * t185 + t235 * t358;
t63 = t298 * qJD(3) + (-t196 + (pkin(9) * t268 - t178) * t267) * qJD(4) + t370;
t78 = t178 * t358 + t267 * t201 + (-t268 * t363 - t271 * t360) * t240;
t66 = -pkin(9) * t441 + t78;
t14 = t100 * t332 - t116 * t357 + t266 * t63 + t425 * t66;
t292 = -qJD(1) * t214 + t310;
t289 = -pkin(8) * t185 - t145 * t235;
t274 = qJD(3) ^ 2;
t287 = t240 * t274 + 0.2e1 * t208 + t412;
t286 = 0.2e1 * qJD(3) * t214 - t240 * qJDD(3);
t284 = -t271 * t310 - t411;
t281 = t283 + t403;
t15 = -qJD(5) * t62 - t266 * t66 + t425 * t63;
t280 = qJD(4) * t307 - t38 * t267 + t37 * t270;
t278 = t107 * t271 + t321 * t268 + (-t158 * t271 - t159 * t268) * qJD(3);
t65 = -pkin(4) * t293 + t99;
t20 = t49 * pkin(5) + qJDD(6) + t65;
t248 = pkin(5) + t447;
t224 = g(3) * t382;
t206 = qJDD(3) * t271 - t268 * t274;
t205 = qJDD(3) * t268 + t271 * t274;
t202 = pkin(5) * t256 + t421;
t155 = t250 * t267 + t251 * t373;
t153 = -t250 * t373 + t384;
t151 = pkin(5) * t191 - t249;
t130 = -t240 * t376 + t163;
t129 = -t177 * t271 - t226 * t364;
t118 = pkin(5) * t160 + t166;
t103 = -qJ(6) * t191 + t137;
t102 = -qJ(6) * t192 + t136;
t89 = pkin(5) * t295 + t423;
t79 = -qJD(4) * t131 + t370;
t58 = pkin(5) * t81 + t134;
t51 = -qJ(6) * t160 + t62;
t50 = -pkin(5) * t271 - qJ(6) * t161 + t61;
t40 = t124 * t368 - t177 * t191 + t226 * t371;
t39 = t177 * t192 + t226 * t372 - t295 * t368;
t30 = t42 - t437;
t29 = t41 + t445;
t27 = t36 - t445;
t19 = t124 * t81 + t160 * t49;
t18 = -t161 * t48 - t295 * t80;
t17 = t124 * t371 + t191 * t49;
t16 = -t192 * t48 - t295 * t372;
t13 = t296 + t396;
t12 = -t296 + t396;
t11 = -t305 + t326;
t10 = t305 + t326;
t9 = -qJ(6) * t81 - qJD(6) * t160 + t14;
t8 = pkin(5) * t364 + t80 * qJ(6) - t161 * qJD(6) + t15;
t7 = t308 + t406;
t6 = -t308 + t406;
t5 = t124 * t372 + t191 * t48 - t192 * t49 - t295 * t371;
t2 = t3 - t356 - t403;
t1 = t4 + t431;
t21 = [0, 0, 0, 0, 0, qJDD(1), t309, g(1) * t272 + g(2) * t269, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t265 * t395 - t412 + t417, -0.2e1 * t264 * t395 + t310, 0 (t309 + (t264 ^ 2 + t265 ^ 2) * t395) * pkin(1), qJDD(1) * t261 + 0.2e1 * t317, 0.2e1 * t255 * t268 - 0.2e1 * t354 * t369, t205, qJDD(1) * t262 - 0.2e1 * t317, t206, 0, t286 * t268 + (-t287 + t417) * t271, t268 * t287 + t271 * t286 - t218 (t261 + t262) * t207 + t278 - t310, t208 * t241 - g(1) * (-pkin(2) * t250 + t329) - g(2) * t344 + t278 * t240, -t117 * t375 + t190 * t291, -t319 + (-t340 + (t117 - t361) * t268) * t267 + t397, t324 + t428, -t189 * t441 - t293 * t377 (-t293 + t339) * t271 + (t294 + t366) * t268, -t185 * t271 - t235 * t364, -g(1) * t153 - g(2) * t155 + t130 * t185 - t79 * t235 + (-t38 + (t145 * t267 - t189 * t240) * qJD(3)) * t271 + (t87 * qJD(3) + t145 * t358 - t240 * t293 + t99 * t267) * t268, -g(1) * t152 - g(2) * t154 - t131 * t185 + t235 * t78 + (t37 + (t145 * t270 + t190 * t240) * qJD(3)) * t271 + (-qJD(3) * t88 - t117 * t240 - t145 * t360 + t99 * t270) * t268, t78 * t189 + t131 * t293 - t79 * t190 + t130 * t117 + t218 + t307 * t362 + (qJD(4) * t306 - t37 * t267 - t38 * t270 - t412) * t268, t37 * t131 + t88 * t78 + t38 * t130 + t87 * t79 - g(1) * t329 - g(2) * (t251 * t314 + t344) - t300 * t417 + (t145 * t362 + t268 * t99) * t240, t18, t7, t11, t19, t13, t129, t119 * t81 + t124 * t134 - t15 * t226 + t160 * t65 + t166 * t49 + t177 * t61 - t271 * t4 + t35 * t364 + t311, -t119 * t80 + t134 * t295 + t14 * t226 + t161 * t65 - t166 * t48 - t177 * t62 + t271 * t3 - t36 * t364 + t312, -t124 * t14 - t15 * t295 - t160 * t3 - t161 * t4 + t35 * t80 - t36 * t81 + t48 * t61 - t49 * t62 + t316, t3 * t62 + t36 * t14 + t4 * t61 + t35 * t15 + t65 * t166 + t119 * t134 - g(1) * (pkin(4) * t384 + t329) - g(2) * (t249 * t383 - t251 * t374 + t344) + (-g(1) * (-pkin(2) - t302) - g(2) * t421) * t250, t18, t7, t11, t19, t13, t129, -t1 * t271 + t118 * t49 + t124 * t58 + t160 * t20 + t177 * t50 - t226 * t8 + t24 * t364 + t70 * t81 + t311, -t118 * t48 + t161 * t20 - t177 * t51 + t2 * t271 + t226 * t9 - t27 * t364 + t295 * t58 - t70 * t80 + t312, -t1 * t161 - t124 * t9 - t160 * t2 + t24 * t80 - t27 * t81 - t295 * t8 + t48 * t50 - t49 * t51 + t316, t2 * t51 + t27 * t9 + t1 * t50 + t24 * t8 + t20 * t118 + t70 * t58 - g(1) * (t202 * t251 + t329) - g(2) * (t197 * t383 - t251 * t379 + t344) + (-g(1) * (-pkin(2) - t304) - g(2) * t202) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t206, -t205, 0, t107 * t268 - t321 * t271 - g(3) + (-t158 * t268 + t159 * t271) * qJD(3), 0, 0, 0, 0, 0, 0 (t293 + t339) * t271 + (t294 - t366) * t268, t324 - t428, t319 + (t268 * t323 + t340) * t267 + t397, -g(3) + (-qJD(3) * t306 - t99) * t271 + (qJD(3) * t145 + t280) * t268, 0, 0, 0, 0, 0, 0, t12, t10, t6, t119 * t364 - t160 * t4 + t161 * t3 - t271 * t65 - t35 * t81 - t36 * t80 - g(3), 0, 0, 0, 0, 0, 0, t12, t10, t6, -t1 * t160 + t161 * t2 - t20 * t271 - t24 * t81 - t27 * t80 + t364 * t70 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346, t369 * t275, t351, t346, t255, qJDD(3), qJD(3) * t159 + t268 * t292 - t321 - t410, t411 + (t158 + t188) * qJD(3) + t292 * t271 + t345, 0, 0, -t267 * t117 - t270 * t386 (-t117 - t388) * t270 + (t293 + t386) * t267 (-t190 * t268 + t235 * t373) * qJD(1) - t294, t267 * t388 + t288, t235 * t360 + t185 * t270 + (-t189 * t268 - t235 * t376) * qJD(1), t235 * t368, -pkin(3) * t320 + t113 * t235 - t87 * t368 + t159 * t189 + t289 * t267 + (t394 - t449) * t270, pkin(3) * t117 - t114 * t235 - t159 * t190 + t267 * t449 + t289 * t270 + t88 * t368, t113 * t190 - t114 * t189 + ((qJD(4) * t190 + t293) * pkin(8) + t438) * t270 + (pkin(8) * t323 - t38 + t401) * t267 + t284, -t87 * t113 - t88 * t114 - t145 * t159 + t282 * pkin(3) + (t280 + t284) * pkin(8), t16, t5, t39, t17, t40, t334, t119 * t371 + t124 * t315 + t136 * t177 + t191 * t65 - t226 * t404 - t249 * t49 - t35 * t368 + t299, -t137 * t177 + t192 * t65 + t249 * t48 + t224 + t405 * t226 + t315 * t295 - t372 * t119 + (qJD(1) * t36 - t297) * t268, -t124 * t405 + t136 * t48 - t137 * t49 - t191 * t3 - t192 * t4 - t295 * t404 + t35 * t372 - t36 * t371 + t284, -g(3) * t302 + t119 * t315 + t4 * t136 + t3 * t137 - t65 * t249 + t35 * t404 + t36 * t405 + t310 * (t249 * t268 + t271 * t273) t16, t5, t39, t17, t40, t334, t102 * t177 + t124 * t398 + t151 * t49 + t191 * t20 - t226 * t407 - t24 * t368 + t371 * t70 + t299, -t103 * t177 - t151 * t48 + t192 * t20 + t224 - t372 * t70 + t408 * t226 + t398 * t295 + (qJD(1) * t27 - t297) * t268, -t1 * t192 + t102 * t48 - t103 * t49 - t124 * t408 - t191 * t2 + t24 * t372 - t27 * t371 - t295 * t407 + t284, -g(3) * t304 + t1 * t102 + t2 * t103 + t20 * t151 + t24 * t407 + t27 * t408 + t398 * t70 + t310 * (t197 * t268 + t259 * t271); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t387, -t189 ^ 2 + t190 ^ 2, -t117 + t388, t387, t293 - t386, t185, -t146 * t358 - t145 * t190 - t401 + t110 + (-qJD(4) * t147 + t411 - t98) * t267 + t433, g(1) * t155 - g(2) * t153 + g(3) * t375 - t145 * t189 - t438, 0, 0, t444, t450, t446, -t444, t442, t177, t41 * t226 + (-t124 * t190 + t177 * t425 + t226 * t357) * pkin(4) + t429, -t226 * t42 - t295 * t423 + t435 + t439, t48 * t447 + t399 + (t36 + t41 + t448) * t295 + (t42 - t35) * t124, -t35 * t41 - t36 * t42 + (t3 * t266 + t4 * t425 - t119 * t190 + g(3) * t377 + (-t35 * t266 + t36 * t425) * qJD(5) + t433) * pkin(4), t444, t450, t446, -t444, t442, t177, -t89 * t124 + t248 * t177 + t29 * t226 + (-t75 + (pkin(4) * t226 - t69) * t266) * qJD(5) + t328 + t427 + t431, t124 * t70 - t226 * t30 - t295 * t89 + t281 + t356 + t435, t248 * t48 + t399 + (t27 + t29 + t448) * t295 + (t30 - t24) * t124, t1 * t248 - t27 * t30 - t24 * t29 - t70 * t89 - g(1) * (-t202 * t383 + t203 * t250) - g(2) * (-t202 * t250 * t271 - t203 * t251) + t202 * t411 + (t2 * t266 + (-t24 * t266 + t27 * t425) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, t450, t446, -t444, t442, t177, -t36 * t226 + t429, -t226 * t35 + t439, 0, 0, t444, t450, t446, -t444, t442, t177, t400 - t27 * t226 + 0.2e1 * t167 + (t327 - t70) * t295 + t277, -pkin(5) * t426 - t226 * t26 + (qJD(6) + t70) * t124 + t281, pkin(5) * t48 - t124 * t409, t409 * t27 + (t1 + t427) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 - t389, -t48 + t392, -t121 - t426, t27 * t124 + t24 * t295 + t20 + t285;];
tau_reg  = t21;
