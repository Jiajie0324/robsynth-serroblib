% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:46:29
% EndTime: 2019-05-07 19:46:40
% DurationCPUTime: 10.97s
% Computational Cost: add. (112956->346), mult. (248269->488), div. (0->0), fcn. (191087->12), ass. (0->277)
t2339 = cos(qJ(2));
t2324 = t2339 * qJDD(1);
t2334 = sin(qJ(2));
t2384 = qJD(1) * t2334;
t2364 = qJD(2) * t2384;
t2304 = t2324 - t2364;
t2328 = t2339 ^ 2;
t2342 = qJD(1) ^ 2;
t2335 = sin(qJ(1));
t2340 = cos(qJ(1));
t2312 = t2335 * g(1) - t2340 * g(2);
t2351 = qJDD(1) * pkin(1) + t2312;
t2352 = qJD(2) * pkin(2) - pkin(8) * t2384;
t2276 = t2304 * pkin(2) - t2352 * t2384 + t2351 + (pkin(8) * t2328 + pkin(7)) * t2342;
t2333 = sin(qJ(3));
t2338 = cos(qJ(3));
t2297 = (t2333 * t2339 + t2334 * t2338) * qJD(1);
t2383 = qJD(1) * t2339;
t2363 = qJD(2) * t2383;
t2367 = t2334 * qJDD(1);
t2303 = t2363 + t2367;
t2357 = t2333 * t2303 - t2338 * t2304;
t2273 = -qJD(3) * t2297 - t2357;
t2296 = -t2333 * t2384 + t2338 * t2383;
t2295 = t2296 ^ 2;
t2326 = qJD(2) + qJD(3);
t2355 = pkin(3) * t2326 - pkin(9) * t2297;
t2227 = t2273 * pkin(3) + t2295 * pkin(9) - t2297 * t2355 + t2276;
t2332 = sin(qJ(4));
t2337 = cos(qJ(4));
t2280 = -t2337 * t2296 + t2297 * t2332;
t2278 = qJD(6) + t2280;
t2396 = qJD(6) + t2278;
t2282 = t2296 * t2332 + t2297 * t2337;
t2323 = qJD(4) + t2326;
t2329 = sin(pkin(11));
t2330 = cos(pkin(11));
t2269 = t2282 * t2329 - t2330 * t2323;
t2271 = t2282 * t2330 + t2323 * t2329;
t2331 = sin(qJ(6));
t2336 = cos(qJ(6));
t2242 = t2336 * t2269 + t2271 * t2331;
t2395 = t2242 ^ 2;
t2244 = -t2269 * t2331 + t2271 * t2336;
t2394 = t2244 ^ 2;
t2393 = t2269 ^ 2;
t2392 = t2271 ^ 2;
t2391 = t2278 ^ 2;
t2253 = t2280 ^ 2;
t2390 = t2282 ^ 2;
t2389 = t2297 ^ 2;
t2388 = t2323 ^ 2;
t2387 = t2326 ^ 2;
t2386 = -2 * qJD(5);
t2385 = t2334 * g(3);
t2382 = t2242 * t2244;
t2381 = t2269 * t2271;
t2380 = t2271 * t2280;
t2379 = t2280 * t2269;
t2378 = t2280 * t2282;
t2377 = t2296 * t2297;
t2376 = t2326 * t2296;
t2375 = t2328 * t2342;
t2313 = -g(1) * t2340 - g(2) * t2335;
t2299 = -pkin(1) * t2342 + qJDD(1) * pkin(7) + t2313;
t2374 = t2334 * t2299;
t2373 = t2334 * t2342;
t2372 = t2339 * t2299;
t2371 = -qJD(3) + t2326;
t2370 = qJD(4) - t2323;
t2369 = qJD(6) - t2278;
t2344 = -pkin(2) * t2375 + t2304 * pkin(8) - qJD(2) * t2352 - t2385;
t2349 = pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2373 - g(3);
t2350 = qJDD(2) * pkin(2) - t2303 * pkin(8) - t2374;
t2241 = t2338 * (t2344 + t2372) + t2333 * (t2339 * t2349 + t2350);
t2213 = -t2295 * pkin(3) + t2273 * pkin(9) - t2326 * t2355 + t2241;
t2240 = -t2333 * t2344 + t2338 * t2350 + (-t2333 * t2299 + t2338 * t2349) * t2339;
t2353 = -t2338 * t2303 - t2333 * t2304;
t2274 = qJD(3) * t2296 - t2353;
t2366 = qJDD(2) + qJDD(3);
t2284 = t2366 + t2377;
t2343 = (-t2274 + t2376) * pkin(9) + t2284 * pkin(3) + t2240;
t2185 = t2337 * t2213 + t2332 * t2343;
t2327 = t2334 ^ 2;
t2368 = t2327 + t2328;
t2250 = pkin(4) * t2280 - qJ(5) * t2282;
t2362 = qJDD(4) + t2366;
t2174 = -pkin(4) * t2388 + qJ(5) * t2362 - t2280 * t2250 + t2185;
t2358 = -t2337 * t2273 + t2332 * t2274;
t2229 = qJD(4) * t2282 + t2358;
t2354 = -t2332 * t2273 - t2337 * t2274;
t2230 = -qJD(4) * t2280 - t2354;
t2360 = t2323 * t2280 - t2230;
t2179 = t2360 * qJ(5) + (t2282 * t2323 + t2229) * pkin(4) - t2227;
t2148 = t2330 * t2174 + t2329 * t2179 + t2269 * t2386;
t2184 = -t2332 * t2213 + t2337 * t2343;
t2225 = t2330 * t2230 + t2329 * t2362;
t2359 = t2230 * t2329 - t2330 * t2362;
t2361 = -t2331 * t2225 - t2336 * t2359;
t2205 = -t2225 - t2379;
t2206 = t2229 - t2381;
t2147 = -t2329 * t2174 + t2330 * t2179 + t2271 * t2386;
t2348 = -qJDD(6) - t2229;
t2347 = -t2336 * t2225 + t2331 * t2359;
t2173 = -t2362 * pkin(4) - t2388 * qJ(5) + t2282 * t2250 + qJDD(5) - t2184;
t2341 = qJD(2) ^ 2;
t2319 = t2339 * t2373;
t2317 = -t2341 - t2375;
t2316 = -t2327 * t2342 - t2341;
t2311 = -qJDD(2) + t2319;
t2310 = qJDD(2) + t2319;
t2309 = t2368 * t2342;
t2308 = -qJDD(1) * t2335 - t2340 * t2342;
t2307 = qJDD(1) * t2340 - t2335 * t2342;
t2306 = t2368 * qJDD(1);
t2305 = t2324 - 0.2e1 * t2364;
t2302 = 0.2e1 * t2363 + t2367;
t2298 = t2342 * pkin(7) + t2351;
t2292 = t2372 - t2385;
t2291 = -t2339 * g(3) - t2374;
t2290 = -t2387 - t2389;
t2289 = t2311 * t2339 - t2316 * t2334;
t2288 = -t2310 * t2334 + t2317 * t2339;
t2287 = t2311 * t2334 + t2316 * t2339;
t2286 = t2310 * t2339 + t2317 * t2334;
t2285 = -t2366 + t2377;
t2283 = -t2387 - t2295;
t2275 = -t2295 - t2389;
t2272 = -t2388 - t2390;
t2264 = -t2291 * t2334 + t2292 * t2339;
t2263 = t2291 * t2339 + t2292 * t2334;
t2259 = t2285 * t2338 - t2290 * t2333;
t2258 = t2285 * t2333 + t2290 * t2338;
t2257 = t2296 * t2371 + t2353;
t2256 = t2274 + t2376;
t2255 = t2297 * t2371 - t2357;
t2254 = (qJD(3) + t2326) * t2297 + t2357;
t2252 = t2283 * t2338 - t2284 * t2333;
t2251 = t2283 * t2333 + t2284 * t2338;
t2249 = -t2362 - t2378;
t2248 = t2362 - t2378;
t2247 = -t2253 - t2388;
t2245 = pkin(5) * t2280 - pkin(10) * t2271;
t2239 = -t2390 - t2253;
t2238 = -t2253 - t2392;
t2237 = t2249 * t2337 - t2272 * t2332;
t2236 = t2249 * t2332 + t2272 * t2337;
t2235 = -t2258 * t2334 + t2259 * t2339;
t2234 = t2258 * t2339 + t2259 * t2334;
t2233 = -t2253 - t2393;
t2232 = t2255 * t2338 - t2257 * t2333;
t2231 = t2255 * t2333 + t2257 * t2338;
t2226 = -t2392 - t2393;
t2222 = -t2251 * t2334 + t2252 * t2339;
t2221 = t2251 * t2339 + t2252 * t2334;
t2220 = t2247 * t2337 - t2248 * t2332;
t2219 = t2247 * t2332 + t2248 * t2337;
t2218 = t2280 * t2370 + t2354;
t2216 = -t2282 * t2370 - t2358;
t2215 = (qJD(4) + t2323) * t2282 + t2358;
t2214 = -t2391 - t2394;
t2209 = -t2240 * t2333 + t2241 * t2338;
t2208 = t2240 * t2338 + t2241 * t2333;
t2207 = -t2229 - t2381;
t2204 = t2225 - t2379;
t2203 = -t2359 + t2380;
t2202 = t2359 + t2380;
t2201 = -t2391 - t2395;
t2200 = -t2236 * t2333 + t2237 * t2338;
t2199 = t2236 * t2338 + t2237 * t2333;
t2198 = -t2231 * t2334 + t2232 * t2339;
t2197 = t2231 * t2339 + t2232 * t2334;
t2196 = -t2394 - t2395;
t2195 = -t2219 * t2333 + t2220 * t2338;
t2194 = t2219 * t2338 + t2220 * t2333;
t2193 = t2348 - t2382;
t2192 = -t2348 - t2382;
t2191 = t2216 * t2337 - t2218 * t2332;
t2190 = t2216 * t2332 + t2218 * t2337;
t2189 = t2207 * t2330 - t2238 * t2329;
t2188 = t2207 * t2329 + t2238 * t2330;
t2187 = -t2206 * t2329 + t2233 * t2330;
t2186 = t2206 * t2330 + t2233 * t2329;
t2183 = -t2208 * t2334 + t2209 * t2339;
t2182 = t2208 * t2339 + t2209 * t2334;
t2181 = t2203 * t2330 - t2205 * t2329;
t2180 = t2203 * t2329 + t2205 * t2330;
t2176 = t2193 * t2336 - t2214 * t2331;
t2175 = t2193 * t2331 + t2214 * t2336;
t2171 = -t2199 * t2334 + t2200 * t2339;
t2170 = t2199 * t2339 + t2200 * t2334;
t2169 = t2242 * t2369 + t2347;
t2168 = -t2242 * t2396 - t2347;
t2167 = -t2244 * t2369 + t2361;
t2166 = t2244 * t2396 - t2361;
t2165 = -t2192 * t2331 + t2201 * t2336;
t2164 = t2192 * t2336 + t2201 * t2331;
t2163 = t2189 * t2337 + t2204 * t2332;
t2162 = t2189 * t2332 - t2204 * t2337;
t2161 = t2187 * t2337 + t2202 * t2332;
t2160 = t2187 * t2332 - t2202 * t2337;
t2159 = t2181 * t2337 + t2226 * t2332;
t2158 = t2181 * t2332 - t2226 * t2337;
t2157 = -t2194 * t2334 + t2195 * t2339;
t2156 = t2194 * t2339 + t2195 * t2334;
t2155 = -t2190 * t2333 + t2191 * t2338;
t2154 = t2190 * t2338 + t2191 * t2333;
t2153 = -t2184 * t2332 + t2185 * t2337;
t2152 = t2184 * t2337 + t2185 * t2332;
t2151 = pkin(5) * t2359 - pkin(10) * t2393 + t2271 * t2245 + t2173;
t2150 = -t2175 * t2329 + t2176 * t2330;
t2149 = t2175 * t2330 + t2176 * t2329;
t2146 = t2167 * t2336 - t2169 * t2331;
t2145 = t2167 * t2331 + t2169 * t2336;
t2144 = -t2164 * t2329 + t2165 * t2330;
t2143 = t2164 * t2330 + t2165 * t2329;
t2142 = -t2162 * t2333 + t2163 * t2338;
t2141 = t2162 * t2338 + t2163 * t2333;
t2140 = -t2160 * t2333 + t2161 * t2338;
t2139 = t2160 * t2338 + t2161 * t2333;
t2138 = -t2158 * t2333 + t2159 * t2338;
t2137 = t2158 * t2338 + t2159 * t2333;
t2136 = -pkin(5) * t2393 - pkin(10) * t2359 - t2280 * t2245 + t2148;
t2135 = -t2154 * t2334 + t2155 * t2339;
t2134 = t2154 * t2339 + t2155 * t2334;
t2133 = pkin(5) * t2206 + pkin(10) * t2205 + t2147;
t2132 = t2150 * t2337 + t2168 * t2332;
t2131 = t2150 * t2332 - t2168 * t2337;
t2130 = -t2152 * t2333 + t2153 * t2338;
t2129 = t2152 * t2338 + t2153 * t2333;
t2128 = t2144 * t2337 + t2166 * t2332;
t2127 = t2144 * t2332 - t2166 * t2337;
t2126 = -t2147 * t2329 + t2148 * t2330;
t2125 = t2147 * t2330 + t2148 * t2329;
t2124 = -t2145 * t2329 + t2146 * t2330;
t2123 = t2145 * t2330 + t2146 * t2329;
t2122 = -t2141 * t2334 + t2142 * t2339;
t2121 = t2141 * t2339 + t2142 * t2334;
t2120 = -t2139 * t2334 + t2140 * t2339;
t2119 = t2139 * t2339 + t2140 * t2334;
t2118 = -t2137 * t2334 + t2138 * t2339;
t2117 = t2137 * t2339 + t2138 * t2334;
t2116 = t2124 * t2337 + t2196 * t2332;
t2115 = t2124 * t2332 - t2196 * t2337;
t2114 = t2126 * t2337 + t2173 * t2332;
t2113 = t2126 * t2332 - t2173 * t2337;
t2112 = t2133 * t2331 + t2136 * t2336;
t2111 = t2133 * t2336 - t2136 * t2331;
t2110 = -t2131 * t2333 + t2132 * t2338;
t2109 = t2131 * t2338 + t2132 * t2333;
t2108 = -t2129 * t2334 + t2130 * t2339;
t2107 = t2129 * t2339 + t2130 * t2334;
t2106 = -t2127 * t2333 + t2128 * t2338;
t2105 = t2127 * t2338 + t2128 * t2333;
t2104 = -t2115 * t2333 + t2116 * t2338;
t2103 = t2115 * t2338 + t2116 * t2333;
t2102 = -t2113 * t2333 + t2114 * t2338;
t2101 = t2113 * t2338 + t2114 * t2333;
t2100 = -t2111 * t2331 + t2112 * t2336;
t2099 = t2111 * t2336 + t2112 * t2331;
t2098 = -t2109 * t2334 + t2110 * t2339;
t2097 = t2109 * t2339 + t2110 * t2334;
t2096 = -t2105 * t2334 + t2106 * t2339;
t2095 = t2105 * t2339 + t2106 * t2334;
t2094 = -t2103 * t2334 + t2104 * t2339;
t2093 = t2103 * t2339 + t2104 * t2334;
t2092 = -t2101 * t2334 + t2102 * t2339;
t2091 = t2101 * t2339 + t2102 * t2334;
t2090 = -t2099 * t2329 + t2100 * t2330;
t2089 = t2099 * t2330 + t2100 * t2329;
t2088 = t2090 * t2337 + t2151 * t2332;
t2087 = t2090 * t2332 - t2151 * t2337;
t2086 = -t2087 * t2333 + t2088 * t2338;
t2085 = t2087 * t2338 + t2088 * t2333;
t2084 = -t2085 * t2334 + t2086 * t2339;
t2083 = t2085 * t2339 + t2086 * t2334;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2308, -t2307, 0, -t2312 * t2335 + t2313 * t2340, 0, 0, 0, 0, 0, 0, t2288 * t2340 - t2305 * t2335, t2289 * t2340 + t2302 * t2335, t2306 * t2340 - t2309 * t2335, t2264 * t2340 - t2298 * t2335, 0, 0, 0, 0, 0, 0, t2222 * t2340 + t2254 * t2335, t2235 * t2340 + t2256 * t2335, t2198 * t2340 + t2275 * t2335, t2183 * t2340 - t2276 * t2335, 0, 0, 0, 0, 0, 0, t2157 * t2340 + t2215 * t2335, t2171 * t2340 - t2335 * t2360, t2135 * t2340 + t2239 * t2335, t2108 * t2340 - t2227 * t2335, 0, 0, 0, 0, 0, 0, t2120 * t2340 + t2186 * t2335, t2122 * t2340 + t2188 * t2335, t2118 * t2340 + t2180 * t2335, t2092 * t2340 + t2125 * t2335, 0, 0, 0, 0, 0, 0, t2096 * t2340 + t2143 * t2335, t2098 * t2340 + t2149 * t2335, t2094 * t2340 + t2123 * t2335, t2084 * t2340 + t2089 * t2335; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2307, t2308, 0, t2312 * t2340 + t2313 * t2335, 0, 0, 0, 0, 0, 0, t2288 * t2335 + t2305 * t2340, t2289 * t2335 - t2302 * t2340, t2306 * t2335 + t2309 * t2340, t2264 * t2335 + t2298 * t2340, 0, 0, 0, 0, 0, 0, t2222 * t2335 - t2254 * t2340, t2235 * t2335 - t2256 * t2340, t2198 * t2335 - t2275 * t2340, t2183 * t2335 + t2276 * t2340, 0, 0, 0, 0, 0, 0, t2157 * t2335 - t2215 * t2340, t2171 * t2335 + t2340 * t2360, t2135 * t2335 - t2239 * t2340, t2108 * t2335 + t2227 * t2340, 0, 0, 0, 0, 0, 0, t2120 * t2335 - t2186 * t2340, t2122 * t2335 - t2188 * t2340, t2118 * t2335 - t2180 * t2340, t2092 * t2335 - t2125 * t2340, 0, 0, 0, 0, 0, 0, t2096 * t2335 - t2143 * t2340, t2098 * t2335 - t2149 * t2340, t2094 * t2335 - t2123 * t2340, t2084 * t2335 - t2089 * t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2286, t2287, 0, t2263, 0, 0, 0, 0, 0, 0, t2221, t2234, t2197, t2182, 0, 0, 0, 0, 0, 0, t2156, t2170, t2134, t2107, 0, 0, 0, 0, 0, 0, t2119, t2121, t2117, t2091, 0, 0, 0, 0, 0, 0, t2095, t2097, t2093, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2342, -qJDD(1), 0, t2313, 0, 0, 0, 0, 0, 0, t2288, t2289, t2306, t2264, 0, 0, 0, 0, 0, 0, t2222, t2235, t2198, t2183, 0, 0, 0, 0, 0, 0, t2157, t2171, t2135, t2108, 0, 0, 0, 0, 0, 0, t2120, t2122, t2118, t2092, 0, 0, 0, 0, 0, 0, t2096, t2098, t2094, t2084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2342, 0, t2312, 0, 0, 0, 0, 0, 0, t2305, -t2302, t2309, t2298, 0, 0, 0, 0, 0, 0, -t2254, -t2256, -t2275, t2276, 0, 0, 0, 0, 0, 0, -t2215, t2360, -t2239, t2227, 0, 0, 0, 0, 0, 0, -t2186, -t2188, -t2180, -t2125, 0, 0, 0, 0, 0, 0, -t2143, -t2149, -t2123, -t2089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2286, t2287, 0, t2263, 0, 0, 0, 0, 0, 0, t2221, t2234, t2197, t2182, 0, 0, 0, 0, 0, 0, t2156, t2170, t2134, t2107, 0, 0, 0, 0, 0, 0, t2119, t2121, t2117, t2091, 0, 0, 0, 0, 0, 0, t2095, t2097, t2093, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2311, t2324, t2292, 0, 0, 0, 0, 0, 0, t2252, t2259, t2232, t2209, 0, 0, 0, 0, 0, 0, t2195, t2200, t2155, t2130, 0, 0, 0, 0, 0, 0, t2140, t2142, t2138, t2102, 0, 0, 0, 0, 0, 0, t2106, t2110, t2104, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2310, t2316, -t2367, t2291, 0, 0, 0, 0, 0, 0, t2251, t2258, t2231, t2208, 0, 0, 0, 0, 0, 0, t2194, t2199, t2154, t2129, 0, 0, 0, 0, 0, 0, t2139, t2141, t2137, t2101, 0, 0, 0, 0, 0, 0, t2105, t2109, t2103, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2305, t2302, -t2309, -t2298, 0, 0, 0, 0, 0, 0, t2254, t2256, t2275, -t2276, 0, 0, 0, 0, 0, 0, t2215, -t2360, t2239, -t2227, 0, 0, 0, 0, 0, 0, t2186, t2188, t2180, t2125, 0, 0, 0, 0, 0, 0, t2143, t2149, t2123, t2089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2283, t2285, t2255, t2241, 0, 0, 0, 0, 0, 0, t2220, t2237, t2191, t2153, 0, 0, 0, 0, 0, 0, t2161, t2163, t2159, t2114, 0, 0, 0, 0, 0, 0, t2128, t2132, t2116, t2088; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2284, t2290, t2257, t2240, 0, 0, 0, 0, 0, 0, t2219, t2236, t2190, t2152, 0, 0, 0, 0, 0, 0, t2160, t2162, t2158, t2113, 0, 0, 0, 0, 0, 0, t2127, t2131, t2115, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2254, t2256, t2275, -t2276, 0, 0, 0, 0, 0, 0, t2215, -t2360, t2239, -t2227, 0, 0, 0, 0, 0, 0, t2186, t2188, t2180, t2125, 0, 0, 0, 0, 0, 0, t2143, t2149, t2123, t2089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2247, t2249, t2216, t2185, 0, 0, 0, 0, 0, 0, t2187, t2189, t2181, t2126, 0, 0, 0, 0, 0, 0, t2144, t2150, t2124, t2090; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2248, t2272, t2218, t2184, 0, 0, 0, 0, 0, 0, -t2202, -t2204, -t2226, -t2173, 0, 0, 0, 0, 0, 0, -t2166, -t2168, -t2196, -t2151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, -t2360, t2239, -t2227, 0, 0, 0, 0, 0, 0, t2186, t2188, t2180, t2125, 0, 0, 0, 0, 0, 0, t2143, t2149, t2123, t2089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2233, t2207, t2203, t2148, 0, 0, 0, 0, 0, 0, t2165, t2176, t2146, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2206, t2238, t2205, t2147, 0, 0, 0, 0, 0, 0, t2164, t2175, t2145, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2202, t2204, t2226, t2173, 0, 0, 0, 0, 0, 0, t2166, t2168, t2196, t2151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2201, t2193, t2167, t2112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2192, t2214, t2169, t2111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2168, t2196, t2151;];
f_new_reg  = t1;
