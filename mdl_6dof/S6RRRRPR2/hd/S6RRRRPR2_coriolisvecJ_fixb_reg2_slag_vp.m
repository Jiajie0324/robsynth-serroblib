% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPR2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:59:14
% EndTime: 2019-03-09 21:59:38
% DurationCPUTime: 10.50s
% Computational Cost: add. (26238->583), mult. (66479->763), div. (0->0), fcn. (50506->10), ass. (0->304)
t315 = sin(qJ(2));
t447 = sin(qJ(3));
t385 = t447 * t315;
t367 = qJD(1) * t385;
t317 = cos(qJ(2));
t449 = cos(qJ(3));
t386 = t449 * t317;
t255 = qJD(1) * t386 - t367;
t271 = t315 * t449 + t317 * t447;
t256 = qJD(1) * t271;
t314 = sin(qJ(4));
t448 = cos(qJ(4));
t208 = -t448 * t255 + t256 * t314;
t311 = sin(pkin(11));
t313 = sin(qJ(6));
t312 = cos(pkin(11));
t316 = cos(qJ(6));
t405 = t316 * t312;
t458 = -t311 * t313 + t405;
t459 = t458 * qJD(6);
t486 = t458 * t208 + t459;
t308 = qJD(2) + qJD(3);
t304 = qJD(4) + t308;
t348 = t314 * t255 + t256 * t448;
t189 = t304 * t311 + t312 * t348;
t198 = t311 * t348;
t460 = t304 * t312 - t198;
t351 = t316 * t460;
t132 = -t189 * t313 + t351;
t485 = t132 ^ 2;
t203 = qJD(6) + t208;
t484 = t132 * t203;
t270 = t311 * t316 + t312 * t313;
t253 = t270 * qJD(6);
t483 = t270 * t208 + t253;
t133 = t316 * t189 + t313 * t460;
t482 = t133 ^ 2;
t450 = -pkin(8) - pkin(7);
t285 = t450 * t317;
t277 = qJD(1) * t285;
t257 = t447 * t277;
t284 = t450 * t315;
t275 = qJD(1) * t284;
t439 = qJD(2) * pkin(2);
t265 = t275 + t439;
t218 = t449 * t265 + t257;
t248 = t256 * pkin(9);
t185 = -t248 + t218;
t176 = t308 * pkin(3) + t185;
t261 = t449 * t277;
t219 = t265 * t447 - t261;
t445 = t255 * pkin(9);
t186 = t219 + t445;
t183 = t448 * t186;
t119 = t314 * t176 + t183;
t114 = t304 * qJ(5) + t119;
t301 = -t317 * pkin(2) - pkin(1);
t283 = qJD(1) * t301;
t231 = -t255 * pkin(3) + t283;
t139 = pkin(4) * t208 - qJ(5) * t348 + t231;
t74 = -t114 * t311 + t312 * t139;
t52 = pkin(5) * t208 - pkin(10) * t189 + t74;
t75 = t312 * t114 + t311 * t139;
t60 = pkin(10) * t460 + t75;
t21 = t313 * t52 + t316 * t60;
t325 = t308 * t271;
t322 = t325 * qJD(1);
t381 = qJD(4) * t448;
t394 = qJD(4) * t314;
t380 = t449 * qJD(3);
t340 = qJD(2) * t449 + t380;
t333 = qJD(1) * t340;
t397 = t308 * t367;
t471 = -t317 * t333 + t397;
t115 = -t255 * t381 + t256 * t394 + t314 * t322 + t448 * t471;
t426 = t115 * t311;
t387 = qJD(2) * t450;
t368 = qJD(1) * t387;
t266 = t315 * t368;
t267 = t317 * t368;
t379 = t447 * qJD(3);
t165 = t265 * t380 + t449 * t266 + t447 * t267 + t277 * t379;
t124 = -pkin(9) * t322 + t165;
t362 = -t266 * t447 + t449 * t267;
t125 = pkin(9) * t471 - t265 * t379 + t277 * t380 + t362;
t374 = t314 * t124 - t448 * t125;
t49 = qJD(4) * t119 + t374;
t36 = -pkin(5) * t426 + t49;
t181 = t314 * t186;
t118 = t176 * t448 - t181;
t113 = -t304 * pkin(4) + qJD(5) - t118;
t89 = -pkin(5) * t460 + t113;
t346 = t21 * t348 + t36 * t270 + t486 * t89;
t43 = t313 * (qJD(6) * t189 - t426) - qJD(6) * t351 + t115 * t405;
t464 = t115 * t270;
t44 = qJD(6) * t133 - t464;
t7 = t132 * t486 - t483 * t133 - t270 * t44 - t43 * t458;
t12 = t133 * t486 - t43 * t270;
t321 = t448 * t325;
t116 = qJD(1) * t321 + t255 * t394 + t256 * t381 - t314 * t471;
t34 = t270 * t116 - t133 * t348 + t203 * t486;
t370 = -t448 * t124 - t314 * t125 - t176 * t381 + t186 * t394;
t46 = qJD(5) * t304 - t370;
t393 = qJD(1) * qJD(2);
t378 = t315 * t393;
t293 = pkin(2) * t378;
t194 = pkin(3) * t322 + t293;
t53 = t116 * pkin(4) + t115 * qJ(5) - qJD(5) * t348 + t194;
t16 = t311 * t53 + t312 * t46;
t10 = pkin(10) * t426 + t16;
t356 = t313 * t60 - t316 * t52;
t15 = -t311 * t46 + t312 * t53;
t406 = t312 * t115;
t9 = pkin(5) * t116 + pkin(10) * t406 + t15;
t3 = -qJD(6) * t356 + t316 * t10 + t313 * t9;
t4 = -qJD(6) * t21 - t313 * t10 + t316 * t9;
t338 = -t483 * t21 - t4 * t270 + t3 * t458 + t356 * t486;
t476 = t208 * t311;
t197 = pkin(5) * t476;
t392 = pkin(10) * t476;
t475 = t208 * t312;
t481 = t74 * t475;
t451 = t208 ^ 2;
t93 = t348 ^ 2 - t451;
t364 = pkin(5) * t348 + pkin(10) * t475;
t347 = t348 * t356 - t36 * t458 + t483 * t89;
t105 = t311 * t406;
t77 = t189 * t475 - t105;
t13 = -t132 * t483 - t44 * t458;
t35 = t116 * t458 - t132 * t348 - t203 * t483;
t474 = t208 * t348;
t412 = t231 * t348;
t472 = -t49 - t412;
t162 = pkin(4) * t348 + qJ(5) * t208;
t353 = t311 * t460;
t78 = -t208 * t353 + t105;
t90 = t208 * t304 - t115;
t345 = t208 * t231 + t370;
t111 = t312 ^ 2 * t115;
t352 = t312 * t460;
t337 = -t189 * t311 + t352;
t408 = t311 ^ 2 * t115;
t37 = t208 * t337 - t111 + t408;
t469 = 0.2e1 * t283;
t468 = -0.2e1 * t393;
t14 = t16 * t312;
t359 = -t15 * t311 + t14;
t342 = t385 - t386;
t323 = t308 * t342;
t336 = t314 * t342;
t144 = -qJD(4) * t336 + t271 * t381 - t314 * t323 + t321;
t331 = t448 * t342;
t223 = t271 * t314 + t331;
t95 = t116 * t223;
t465 = t144 * t208 + t95;
t421 = t203 * t348;
t131 = t185 * t314 + t183;
t461 = -pkin(3) * t394 + t131;
t226 = t449 * t275 + t257;
t191 = -t248 + t226;
t391 = t449 * pkin(2);
t300 = t391 + pkin(3);
t225 = -t275 * t447 + t261;
t343 = t225 - t445;
t369 = t448 * t447;
t398 = -t191 * t314 + t448 * t343 + t300 * t394 + (qJD(4) * t369 + (t314 * t449 + t369) * qJD(3)) * pkin(2);
t377 = t49 * t311 + t348 * t75;
t358 = -t49 * t312 - t348 * t74;
t455 = t311 * t116 - t189 * t348;
t454 = t312 * t116 - t348 * t460;
t91 = t304 * t348 - t116;
t446 = pkin(3) * t256;
t444 = t312 * pkin(5);
t305 = t312 * pkin(10);
t250 = pkin(2) * t369 + t314 * t300;
t245 = qJ(5) + t250;
t229 = (-pkin(10) - t245) * t311;
t230 = t245 * t312 + t305;
t170 = t229 * t313 + t230 * t316;
t371 = pkin(2) * t380;
t216 = t300 * t381 + t448 * t371 + (-qJD(4) * t447 - t379) * t314 * pkin(2);
t215 = qJD(5) + t216;
t141 = t191 * t448 + t314 * t343;
t147 = t162 + t446;
t395 = qJD(1) * t315;
t302 = pkin(2) * t395;
t142 = t147 + t302;
t81 = -t141 * t311 + t312 * t142;
t57 = t364 + t81;
t82 = t312 * t141 + t311 * t142;
t71 = t392 + t82;
t443 = qJD(6) * t170 + t215 * t270 - t313 * t71 + t316 * t57;
t169 = t229 * t316 - t230 * t313;
t442 = -qJD(6) * t169 - t215 * t458 + t313 * t57 + t316 * t71;
t143 = qJD(4) * t331 + t271 * t394 + t314 * t325 + t323 * t448;
t303 = t315 * t439;
t212 = pkin(3) * t325 + t303;
t224 = t271 * t448 - t336;
t65 = t144 * pkin(4) + t143 * qJ(5) - t224 * qJD(5) + t212;
t276 = t315 * t387;
t278 = t317 * t387;
t172 = t449 * t276 + t447 * t278 + t284 * t380 + t285 * t379;
t151 = -pkin(9) * t325 + t172;
t232 = t449 * t284 + t285 * t447;
t200 = -t271 * pkin(9) + t232;
t233 = t447 * t284 - t449 * t285;
t201 = -pkin(9) * t342 + t233;
t361 = -t276 * t447 + t449 * t278;
t320 = pkin(9) * t323 - t284 * t379 + t285 * t380 + t361;
t68 = t151 * t448 + t200 * t381 - t201 * t394 + t314 * t320;
t23 = t311 * t65 + t312 * t68;
t158 = -t448 * t200 + t314 * t201;
t437 = t158 * t49;
t297 = pkin(3) * t314 + qJ(5);
t263 = (-pkin(10) - t297) * t311;
t264 = t297 * t312 + t305;
t213 = t263 * t316 - t264 * t313;
t290 = pkin(3) * t381 + qJD(5);
t134 = t185 * t448 - t181;
t79 = -t134 * t311 + t312 * t147;
t56 = t364 + t79;
t80 = t312 * t134 + t311 * t147;
t70 = t392 + t80;
t433 = qJD(6) * t213 + t290 * t458 - t313 * t56 - t316 * t70;
t214 = t263 * t313 + t264 * t316;
t432 = -qJD(6) * t214 - t270 * t290 + t313 * t70 - t316 * t56;
t281 = (-pkin(10) - qJ(5)) * t311;
t282 = qJ(5) * t312 + t305;
t227 = t281 * t316 - t282 * t313;
t83 = -t118 * t311 + t312 * t162;
t61 = t364 + t83;
t84 = t312 * t118 + t311 * t162;
t73 = t84 + t392;
t430 = qJD(5) * t458 + qJD(6) * t227 - t313 * t61 - t316 * t73;
t228 = t281 * t313 + t282 * t316;
t429 = -qJD(5) * t270 - qJD(6) * t228 + t313 * t73 - t316 * t61;
t428 = t197 + t398;
t427 = t113 * t208;
t425 = t133 * t132;
t424 = t143 * t311;
t423 = t143 * t312;
t413 = t224 * t311;
t411 = t256 * t255;
t410 = t283 * t256;
t319 = qJD(1) ^ 2;
t404 = t317 * t319;
t318 = qJD(2) ^ 2;
t403 = t318 * t315;
t402 = t318 * t317;
t399 = t141 - t216;
t237 = pkin(3) * t342 + t301;
t157 = t223 * pkin(4) - t224 * qJ(5) + t237;
t159 = t314 * t200 + t201 * t448;
t88 = t311 * t157 + t312 * t159;
t396 = t315 ^ 2 - t317 ^ 2;
t390 = t447 * pkin(2);
t388 = t315 * t404;
t22 = -t311 * t68 + t312 * t65;
t376 = pkin(1) * t468;
t87 = t312 * t157 - t159 * t311;
t299 = -pkin(3) * t448 - pkin(4);
t366 = t317 * t378;
t365 = t197 - t461;
t249 = t300 * t448 - t314 * t390;
t357 = -t311 * t74 + t312 * t75;
t72 = pkin(5) * t223 - t224 * t305 + t87;
t76 = -pkin(10) * t413 + t88;
t30 = -t313 * t76 + t316 * t72;
t31 = t313 * t72 + t316 * t76;
t355 = -t115 * t158 + t224 * t49;
t354 = -t476 * t75 + t359 - t481;
t350 = -t118 * t208 + t119 * t348;
t246 = -pkin(4) - t249;
t344 = -t283 * t255 - t165;
t341 = -t113 * t143 + t355;
t339 = t115 * t223 - t116 * t224 + t143 * t208;
t335 = t342 * qJD(2);
t334 = pkin(4) * t115 - qJ(5) * t116 + (-qJD(5) + t113) * t208;
t330 = -t115 * t246 - t116 * t245 - t208 * t215 + t427;
t329 = -t115 * t299 - t116 * t297 - t208 * t290 + t427;
t69 = qJD(4) * t159 + t314 * t151 - t448 * t320;
t166 = -qJD(3) * t219 + t362;
t298 = -pkin(4) - t444;
t280 = t299 - t444;
t235 = t246 - t444;
t234 = t302 + t446;
t190 = -t255 ^ 2 + t256 ^ 2;
t180 = t256 * t308 - t322;
t179 = -t255 * t308 - t471;
t173 = -qJD(3) * t233 + t361;
t164 = t458 * t224;
t163 = t270 * t224;
t108 = pkin(5) * t413 + t158;
t92 = t119 - t197;
t59 = -t208 * t476 + t454;
t58 = t208 * t475 + t455;
t55 = -t143 * t270 + t224 * t459;
t54 = t143 * t458 + t224 * t253;
t38 = -pkin(5) * t424 + t69;
t17 = pkin(10) * t424 + t23;
t11 = pkin(5) * t144 + pkin(10) * t423 + t22;
t6 = -qJD(6) * t31 + t316 * t11 - t313 * t17;
t5 = qJD(6) * t30 + t313 * t11 + t316 * t17;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t366, t396 * t468, t402, -0.2e1 * t366, -t403, 0, -pkin(7) * t402 + t315 * t376, pkin(7) * t403 + t317 * t376, 0, 0, -t397 * t271 + t256 * (-qJD(2) * t447 - t379) * t315 + (t256 * t340 + t271 * t333) * t317, -t255 * t323 - t256 * t325 - t271 * t322 + t342 * t471, -t323 * t308, -t255 * t325 + t322 * t342, -t325 * t308, 0, -t255 * t303 + t302 * t335 + (t271 * t469 + t173) * t308, -t172 * t308 + t256 * t303 + t271 * t293 - t283 * t323 - t301 * t471, t172 * t255 - t233 * t322 - t165 * t342 - t219 * t325 - t173 * t256 + t232 * t471 - t166 * t271 + t218 * (qJD(3) * t342 + t335) t165 * t233 + t166 * t232 + t172 * t219 + t173 * t218 + t303 * t469, -t115 * t224 - t143 * t348, -t144 * t348 + t339, -t143 * t304, t465, -t144 * t304, 0, t116 * t237 + t144 * t231 + t194 * t223 + t208 * t212 - t304 * t69, -t115 * t237 - t143 * t231 + t194 * t224 + t212 * t348 - t304 * t68, -t116 * t159 + t118 * t143 - t119 * t144 - t208 * t68 + t223 * t370 + t348 * t69 + t355, -t118 * t69 + t119 * t68 - t159 * t370 + t194 * t237 + t212 * t231 + t437, -t111 * t224 - t189 * t423, 0.2e1 * t105 * t224 - t143 * t337, t144 * t189 - t312 * t339, t143 * t353 - t224 * t408, t144 * t460 + t311 * t339, t465, t87 * t116 + t74 * t144 + t15 * t223 + t22 * t208 + t311 * t341 - t460 * t69, -t116 * t88 - t144 * t75 - t16 * t223 + t189 * t69 - t208 * t23 + t312 * t341, -t22 * t189 - t23 * t198 + (t115 * t87 + t143 * t74 - t15 * t224 + t23 * t304) * t312 + (t115 * t88 + t143 * t75 - t16 * t224) * t311, t113 * t69 + t15 * t87 + t16 * t88 + t22 * t74 + t23 * t75 + t437, -t133 * t54 - t164 * t43, -t132 * t54 - t133 * t55 + t163 * t43 - t164 * t44, t116 * t164 + t133 * t144 - t203 * t54 - t223 * t43, -t132 * t55 + t163 * t44, -t116 * t163 + t132 * t144 - t203 * t55 - t223 * t44, t144 * t203 + t95, t108 * t44 + t116 * t30 - t132 * t38 - t144 * t356 + t163 * t36 + t203 * t6 + t223 * t4 + t55 * t89, -t108 * t43 - t116 * t31 + t133 * t38 - t144 * t21 + t164 * t36 - t203 * t5 - t223 * t3 - t54 * t89, t132 * t5 - t133 * t6 - t163 * t3 - t164 * t4 - t21 * t55 + t30 * t43 - t31 * t44 - t356 * t54, t108 * t36 + t21 * t5 + t3 * t31 + t30 * t4 - t356 * t6 + t38 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t388, t396 * t319, 0, t388, 0, 0, t319 * pkin(1) * t315, pkin(1) * t404, 0, 0, -t411, t190, t179, t411, t180, 0, t255 * t302 - t225 * t308 - t410 + (-t308 * t390 - t219) * qJD(3) + t362, t226 * t308 + (-t256 * t395 - t308 * t380) * pkin(2) + t344, -t322 * t390 + t471 * t391 + (pkin(2) * t379 + t219 + t225) * t256 + (t218 - t226 + t371) * t255, -t218 * t225 - t219 * t226 + (-t283 * t395 + t449 * t166 + t447 * t165 + (-t218 * t447 + t219 * t449) * qJD(3)) * pkin(2), t474, t93, t90, -t474, t91, 0, -t234 * t208 - t304 * t398 + t472, -t234 * t348 + t304 * t399 + t345, t115 * t249 - t116 * t250 + t208 * t399 + t348 * t398 + t350, -t118 * t398 - t119 * t399 - t231 * t234 - t249 * t49 - t250 * t370, t77, t37, t58, t78, t59, -t474, -t81 * t208 + t311 * t330 - t398 * t460 + t358, t189 * t398 + t208 * t82 + t312 * t330 + t377, t215 * t352 - t82 * t460 + (t215 * t311 + t81) * t189 + t354, t113 * t398 + t215 * t357 + t245 * t359 + t246 * t49 - t74 * t81 - t75 * t82, t12, t7, t34, t13, t35, -t421, t116 * t169 - t132 * t428 - t203 * t443 + t235 * t44 + t347, -t116 * t170 + t133 * t428 + t203 * t442 - t235 * t43 + t346, -t132 * t442 + t133 * t443 + t169 * t43 - t170 * t44 + t338, t169 * t4 + t170 * t3 - t21 * t442 + t235 * t36 + t356 * t443 + t428 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t411, t190, t179, t411, t180, 0, t219 * t308 + t166 - t410, t218 * t308 + t344, 0, 0, t474, t93, t90, -t474, t91, 0, -t208 * t446 + t131 * t304 - t412 + (-t183 + (-pkin(3) * t304 - t176) * t314) * qJD(4) - t374, t134 * t304 + (-t256 * t348 - t304 * t381) * pkin(3) + t345, -t131 * t348 + t134 * t208 + (t448 * t115 - t116 * t314 + (-t208 * t448 + t314 * t348) * qJD(4)) * pkin(3) + t350, t118 * t131 - t119 * t134 + (-t448 * t49 - t231 * t256 - t314 * t370 + (-t118 * t314 + t119 * t448) * qJD(4)) * pkin(3), t77, t37, t58, t78, t59, -t474, -t79 * t208 + t311 * t329 + t460 * t461 + t358, -t189 * t461 + t208 * t80 + t312 * t329 + t377, t290 * t352 - t80 * t460 + (t290 * t311 + t79) * t189 + t354, -t113 * t461 + t290 * t357 + t297 * t359 + t299 * t49 - t74 * t79 - t75 * t80, t12, t7, t34, t13, t35, -t421, t116 * t213 - t132 * t365 + t203 * t432 + t280 * t44 + t347, -t116 * t214 + t133 * t365 - t203 * t433 - t280 * t43 + t346, t132 * t433 - t133 * t432 + t213 * t43 - t214 * t44 + t338, t21 * t433 + t213 * t4 + t214 * t3 + t280 * t36 - t356 * t432 + t365 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, t93, t90, -t474, t91, 0, t119 * t304 + t472, t118 * t304 + t345, 0, 0, t77, t37, t312 * t451 + t455, t78, -t311 * t451 + t454, -t474, t119 * t460 - t83 * t208 + t311 * t334 + t358, -t119 * t189 + t208 * t84 + t312 * t334 + t377, qJD(5) * t352 + t14 - t84 * t460 + t83 * t189 - t481 + (qJD(5) * t189 - t208 * t75 - t15) * t311, -pkin(4) * t49 + qJ(5) * t359 + qJD(5) * t357 - t113 * t119 - t74 * t83 - t75 * t84, t12, t7, t34, t13, t35, -t421, t116 * t227 + t132 * t92 + t203 * t429 + t298 * t44 + t347, -t116 * t228 - t133 * t92 - t203 * t430 - t298 * t43 + t346, t132 * t430 - t133 * t429 + t227 * t43 - t228 * t44 + t338, t21 * t430 + t227 * t4 + t228 * t3 + t298 * t36 - t356 * t429 - t89 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189 * t208 - t426, t208 * t460 - t406, -t189 ^ 2 - t460 ^ 2, t189 * t74 - t460 * t75 + t49, 0, 0, 0, 0, 0, 0, t133 * t203 + t44, -t43 + t484, -t482 - t485, -t21 * t132 - t133 * t356 + t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t425, t482 - t485, -t43 - t484, t425, t464 + (-qJD(6) + t203) * t133, t116, -t133 * t89 + t203 * t21 + t4, -t132 * t89 - t203 * t356 - t3, 0, 0;];
tauc_reg  = t1;
