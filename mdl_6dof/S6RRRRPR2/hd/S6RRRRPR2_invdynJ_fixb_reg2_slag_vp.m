% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:59:22
% EndTime: 2019-03-09 21:59:52
% DurationCPUTime: 16.39s
% Computational Cost: add. (31189->772), mult. (73723->968), div. (0->0), fcn. (56298->18), ass. (0->379)
t374 = sin(qJ(2));
t377 = cos(qJ(2));
t566 = sin(qJ(3));
t568 = cos(qJ(3));
t414 = t566 * t374 - t568 * t377;
t273 = t414 * qJD(1);
t294 = t374 * t568 + t377 * t566;
t274 = t294 * qJD(1);
t373 = sin(qJ(4));
t567 = cos(qJ(4));
t219 = t567 * t273 + t274 * t373;
t369 = sin(pkin(11));
t372 = sin(qJ(6));
t370 = cos(pkin(11));
t376 = cos(qJ(6));
t509 = t376 * t370;
t577 = -t369 * t372 + t509;
t496 = qJD(6) * t372;
t578 = qJD(6) * t509 - t369 * t496;
t604 = t577 * t219 + t578;
t364 = qJD(2) + qJD(3);
t356 = qJD(4) + t364;
t423 = -t373 * t273 + t274 * t567;
t203 = t356 * t369 + t370 * t423;
t212 = t369 * t423;
t581 = t356 * t370 - t212;
t434 = t376 * t581;
t140 = -t203 * t372 + t434;
t603 = t140 ^ 2;
t217 = qJD(6) + t219;
t602 = t140 * t217;
t291 = t369 * t376 + t370 * t372;
t271 = t291 * qJD(6);
t601 = t291 * t219 + t271;
t141 = t376 * t203 + t372 * t581;
t600 = t141 ^ 2;
t475 = t568 * qJD(3);
t412 = t568 * qJD(2) + t475;
t379 = -pkin(8) - pkin(7);
t320 = t379 * t377;
t303 = qJD(1) * t320;
t275 = t566 * t303;
t319 = t379 * t374;
t301 = qJD(1) * t319;
t552 = qJD(2) * pkin(2);
t284 = t301 + t552;
t229 = t568 * t284 + t275;
t265 = t274 * pkin(9);
t199 = -t265 + t229;
t188 = t364 * pkin(3) + t199;
t279 = t568 * t303;
t230 = t284 * t566 - t279;
t555 = t273 * pkin(9);
t200 = t230 - t555;
t194 = t567 * t200;
t132 = t373 * t188 + t194;
t129 = t356 * qJ(5) + t132;
t361 = t377 * pkin(2);
t350 = t361 + pkin(1);
t318 = t350 * qJD(1);
t247 = pkin(3) * t273 - t318;
t147 = pkin(4) * t219 - qJ(5) * t423 + t247;
t77 = -t129 * t369 + t370 * t147;
t54 = pkin(5) * t219 - pkin(10) * t203 + t77;
t78 = t370 * t129 + t369 * t147;
t61 = pkin(10) * t581 + t78;
t21 = t372 * t54 + t376 * t61;
t362 = qJDD(2) + qJDD(3);
t353 = qJDD(4) + t362;
t494 = qJD(1) * qJD(2);
t471 = t377 * t494;
t493 = t374 * qJDD(1);
t241 = qJDD(2) * pkin(2) - t379 * (-t471 - t493);
t472 = t374 * t494;
t492 = t377 * qJDD(1);
t246 = t379 * (-t472 + t492);
t156 = -qJD(3) * t230 + t568 * t241 + t246 * t566;
t473 = t566 * qJD(3);
t411 = t566 * qJD(2) + t473;
t469 = t568 * qJDD(1);
t498 = qJD(1) * t374;
t588 = -qJD(1) * t412 - t566 * qJDD(1);
t204 = -t374 * t469 + t377 * t588 + t411 * t498;
t107 = t362 * pkin(3) + t204 * pkin(9) + t156;
t155 = t566 * t241 - t568 * t246 + t284 * t475 + t303 * t473;
t590 = t364 * t294;
t386 = t590 * qJD(1);
t384 = -t414 * qJDD(1) - t386;
t115 = pkin(9) * t384 + t155;
t477 = qJD(4) * t567;
t497 = qJD(4) * t373;
t49 = t567 * t107 - t373 * t115 - t188 * t497 - t200 * t477;
t47 = -pkin(4) * t353 + qJDD(5) - t49;
t119 = t567 * t204 + t273 * t477 + t274 * t497 - t373 * t384;
t102 = -t369 * t119 - t353 * t370;
t563 = pkin(5) * t102;
t24 = t47 + t563;
t368 = qJ(2) + qJ(3);
t360 = qJ(4) + t368;
t347 = cos(t360);
t363 = pkin(11) + qJ(6);
t354 = sin(t363);
t346 = sin(t360);
t375 = sin(qJ(1));
t378 = cos(qJ(1));
t445 = g(1) * t378 + g(2) * t375;
t427 = t346 * t445;
t559 = g(3) * t354;
t192 = t373 * t200;
t131 = t188 * t567 - t192;
t128 = -t356 * pkin(4) + qJD(5) - t131;
t92 = -pkin(5) * t581 + t128;
t390 = t21 * t423 + t24 * t291 + t347 * t559 - t354 * t427 + t604 * t92;
t103 = -t119 * t370 + t353 * t369;
t45 = -qJD(6) * t434 + t372 * t102 - t376 * t103 + t203 * t496;
t467 = t376 * t102 + t372 * t103;
t46 = qJD(6) * t141 + t467;
t7 = t140 * t604 - t601 * t141 - t291 * t46 - t45 * t577;
t14 = t141 * t604 - t45 * t291;
t120 = qJD(4) * t423 - t373 * t204 - t567 * t384;
t118 = qJDD(6) + t120;
t34 = t291 * t118 - t141 * t423 + t217 * t604;
t459 = -t373 * t107 - t567 * t115 - t188 * t477 + t200 * t497;
t43 = qJ(5) * t353 + qJD(5) * t356 - t459;
t338 = pkin(2) * t472;
t542 = qJDD(1) * pkin(1);
t52 = -pkin(2) * t492 - pkin(3) * t384 + t120 * pkin(4) + t119 * qJ(5) - qJD(5) * t423 + t338 - t542;
t13 = t369 * t52 + t370 * t43;
t10 = -pkin(10) * t102 + t13;
t437 = t372 * t61 - t376 * t54;
t12 = -t369 * t43 + t370 * t52;
t9 = pkin(5) * t120 - pkin(10) * t103 + t12;
t3 = -qJD(6) * t437 + t10 * t376 + t372 * t9;
t4 = -qJD(6) * t21 - t10 * t372 + t376 * t9;
t520 = t347 * t378;
t521 = t347 * t375;
t487 = g(1) * t520 + g(2) * t521 + g(3) * t346;
t394 = -t601 * t21 - t4 * t291 + t3 * t577 + t437 * t604 - t487;
t594 = t219 * t369;
t211 = pkin(5) * t594;
t491 = pkin(10) * t594;
t599 = t219 * t581;
t569 = t219 ^ 2;
t110 = t423 ^ 2 - t569;
t593 = t219 * t370;
t453 = pkin(5) * t423 + pkin(10) * t593;
t95 = t103 * t369;
t72 = t203 * t593 + t95;
t355 = cos(t363);
t558 = g(3) * t355;
t523 = t346 * t378;
t524 = t346 * t375;
t589 = g(1) * t523 + g(2) * t524;
t393 = -t24 * t577 - t347 * t558 + t355 * t589 + t437 * t423 + t601 * t92;
t15 = -t140 * t601 - t46 * t577;
t35 = t118 * t577 - t140 * t423 - t217 * t601;
t592 = t219 * t423;
t94 = t102 * t370;
t71 = -t369 * t599 - t94;
t172 = pkin(4) * t423 + qJ(5) * t219;
t86 = t219 * t356 - t119;
t401 = t219 * t247 + t459 + t487;
t435 = t370 * t581;
t408 = -t203 * t369 + t435;
t33 = -t369 * t102 + t103 * t370 + t219 * t408;
t337 = g(3) * t347;
t478 = -t47 - t337;
t537 = t217 * t423;
t583 = t229 * t364;
t139 = t199 * t373 + t194;
t582 = -pkin(3) * t497 + t139;
t239 = t568 * t301 + t275;
t206 = -t265 + t239;
t349 = pkin(2) * t568 + pkin(3);
t238 = -t301 * t566 + t279;
t418 = t238 + t555;
t457 = t567 * t566;
t504 = -t206 * t373 + t567 * t418 + t349 * t497 + (qJD(4) * t457 + (t373 * t568 + t457) * qJD(3)) * pkin(2);
t554 = t370 * pkin(5);
t343 = pkin(4) + t554;
t371 = -pkin(10) - qJ(5);
t580 = t347 * t343 - t346 * t371;
t579 = t347 * pkin(4) + t346 * qJ(5);
t257 = pkin(3) * t414 - t350;
t576 = t337 - t589;
t522 = t347 * t369;
t392 = t423 * t78 + g(3) * t522 + (-t427 + t47) * t369;
t447 = t370 * t589 - t77 * t423;
t112 = t369 * t120;
t573 = -t203 * t423 + t112;
t113 = t370 * t120;
t572 = -t423 * t581 + t113;
t400 = -t247 * t423 + t49 - t576;
t87 = t356 * t423 - t120;
t565 = pkin(3) * t274;
t357 = sin(t368);
t564 = pkin(3) * t357;
t358 = cos(t368);
t345 = pkin(3) * t358;
t501 = t345 + t361;
t300 = pkin(1) + t501;
t281 = t378 * t300;
t561 = g(2) * t281;
t557 = g(3) * t358;
t556 = g(3) * t377;
t359 = t370 * pkin(10);
t387 = t364 * t414;
t397 = t567 * t414;
t151 = qJD(4) * t397 + t294 * t497 + t373 * t590 + t387 * t567;
t407 = t373 * t414;
t152 = -qJD(4) * t407 + t294 * t477 - t373 * t387 + t567 * t590;
t352 = t374 * t552;
t223 = pkin(3) * t590 + t352;
t237 = t294 * t567 - t407;
t66 = t152 * pkin(4) + t151 * qJ(5) - t237 * qJD(5) + t223;
t484 = qJD(2) * t379;
t302 = t374 * t484;
t304 = t377 * t484;
t184 = t568 * t302 + t566 * t304 + t319 * t475 + t320 * t473;
t161 = -pkin(9) * t590 + t184;
t248 = t568 * t319 + t320 * t566;
t214 = -t294 * pkin(9) + t248;
t249 = t566 * t319 - t568 * t320;
t215 = -pkin(9) * t414 + t249;
t442 = -t302 * t566 + t568 * t304;
t383 = pkin(9) * t387 - t319 * t473 + t320 * t475 + t442;
t69 = t161 * t567 + t214 * t477 - t215 * t497 + t373 * t383;
t26 = t369 * t66 + t370 * t69;
t11 = t13 * t370;
t268 = pkin(2) * t457 + t373 * t349;
t262 = qJ(5) + t268;
t244 = (-pkin(10) - t262) * t369;
t528 = t262 * t370;
t245 = t359 + t528;
t180 = t244 * t376 - t245 * t372;
t460 = pkin(2) * t475;
t227 = t349 * t477 + t567 * t460 + (-qJD(4) * t566 - t473) * t373 * pkin(2);
t226 = qJD(5) + t227;
t149 = t206 * t567 + t373 * t418;
t157 = t172 + t565;
t351 = pkin(2) * t498;
t150 = t157 + t351;
t82 = -t149 * t369 + t370 * t150;
t60 = t453 + t82;
t83 = t370 * t149 + t369 * t150;
t74 = t491 + t83;
t551 = qJD(6) * t180 + t226 * t577 - t372 * t60 - t376 * t74;
t181 = t244 * t372 + t245 * t376;
t550 = -qJD(6) * t181 - t226 * t291 + t372 * t74 - t376 * t60;
t342 = pkin(3) * t373 + qJ(5);
t282 = (-pkin(10) - t342) * t369;
t526 = t342 * t370;
t283 = t359 + t526;
t224 = t282 * t376 - t283 * t372;
t329 = pkin(3) * t477 + qJD(5);
t142 = t199 * t567 - t192;
t80 = -t142 * t369 + t370 * t157;
t59 = t453 + t80;
t81 = t370 * t142 + t369 * t157;
t73 = t491 + t81;
t547 = qJD(6) * t224 + t329 * t577 - t372 * t59 - t376 * t73;
t225 = t282 * t372 + t283 * t376;
t546 = -qJD(6) * t225 - t291 * t329 + t372 * t73 - t376 * t59;
t311 = t371 * t369;
t312 = qJ(5) * t370 + t359;
t242 = t311 * t376 - t312 * t372;
t84 = -t131 * t369 + t370 * t172;
t62 = t453 + t84;
t85 = t370 * t131 + t369 * t172;
t76 = t85 + t491;
t545 = qJD(5) * t577 + qJD(6) * t242 - t372 * t62 - t376 * t76;
t243 = t311 * t372 + t312 * t376;
t544 = -qJD(5) * t291 - qJD(6) * t243 + t372 * t76 - t376 * t62;
t543 = pkin(7) * qJDD(1);
t541 = t128 * t219;
t540 = t132 * t356;
t539 = t141 * t140;
t538 = t151 * t369;
t529 = t237 * t369;
t527 = t274 * t273;
t519 = t354 * t375;
t518 = t354 * t378;
t517 = t355 * t375;
t516 = t355 * t378;
t514 = t357 * t375;
t513 = t357 * t378;
t512 = t358 * t375;
t511 = t358 * t378;
t236 = t294 * t373 + t397;
t167 = t236 * pkin(4) - t237 * qJ(5) + t257;
t169 = t373 * t214 + t215 * t567;
t91 = t369 * t167 + t370 * t169;
t506 = t227 - t149;
t505 = t211 + t504;
t366 = t374 ^ 2;
t367 = t377 ^ 2;
t500 = t366 - t367;
t499 = t366 + t367;
t495 = -qJD(5) + t128;
t490 = t566 * pkin(2);
t381 = qJD(1) ^ 2;
t488 = t374 * t381 * t377;
t486 = t345 + t579;
t483 = t204 * t568;
t365 = -pkin(9) + t379;
t470 = pkin(5) * t369 - t365;
t25 = -t369 * t69 + t370 * t66;
t466 = t504 * t356;
t90 = t370 * t167 - t169 * t369;
t168 = -t567 * t214 + t215 * t373;
t461 = t11 - t487;
t348 = -pkin(3) * t567 - pkin(4);
t456 = t374 * t471;
t308 = qJ(5) * t521;
t455 = -pkin(4) * t524 + t308;
t309 = qJ(5) * t520;
t454 = -pkin(4) * t523 + t309;
t452 = -g(1) * t524 + g(2) * t523;
t449 = t211 - t582;
t446 = -pkin(4) * t346 - t564;
t444 = g(1) * t375 - g(2) * t378;
t443 = t345 + t580;
t267 = t349 * t567 - t373 * t490;
t439 = -t12 * t369 + t11;
t438 = -t369 * t77 + t370 * t78;
t75 = pkin(5) * t236 - t237 * t359 + t90;
t79 = -pkin(10) * t529 + t91;
t36 = -t372 * t79 + t376 * t75;
t37 = t372 * t75 + t376 * t79;
t433 = t120 * t237 - t151 * t219;
t432 = t120 * t236 + t152 * t219;
t431 = -t131 * t219 + t132 * t423;
t429 = t343 * t346 + t347 * t371;
t263 = -pkin(4) - t267;
t428 = -t593 * t77 - t594 * t78 + t461;
t426 = t444 * t347;
t424 = -0.2e1 * pkin(1) * t494 - pkin(7) * qJDD(2);
t422 = t429 * t375;
t421 = t429 * t378;
t410 = -t120 * t262 - t219 * t226 + t541;
t409 = -t120 * t342 - t219 * t329 + t541;
t380 = qJD(2) ^ 2;
t405 = -pkin(7) * t380 + t444 + 0.2e1 * t542;
t404 = pkin(1) * t381 + t445 - t543;
t402 = -t128 * t151 + t237 * t47 - t445;
t399 = g(1) * t511 + g(2) * t512 + g(3) * t357 - t318 * t273 - t155;
t395 = t47 + t576;
t70 = qJD(4) * t169 + t373 * t161 - t567 * t383;
t385 = g(1) * t513 + g(2) * t514 + t318 * t274 + t156 - t557;
t307 = t348 - t554;
t305 = -pkin(2) * t374 - t564;
t288 = t378 * t305;
t287 = t375 * t305;
t266 = -qJDD(1) * t350 + t338;
t255 = t263 - t554;
t254 = t347 * t516 + t519;
t253 = -t347 * t518 + t517;
t252 = -t347 * t517 + t518;
t251 = t347 * t519 + t516;
t250 = t351 + t565;
t205 = -t273 ^ 2 + t274 ^ 2;
t185 = -qJD(3) * t249 + t442;
t177 = pkin(3) * t386 + qJDD(1) * t257 + t338;
t176 = t274 * t364 + t384;
t175 = t273 * t364 - t204;
t174 = t577 * t237;
t173 = t291 * t237;
t127 = pkin(5) * t529 + t168;
t106 = t132 - t211;
t58 = -t151 * t291 + t237 * t578;
t57 = t151 * t577 + t237 * t271;
t56 = -t219 * t594 + t572;
t55 = t219 * t593 + t573;
t53 = -pkin(5) * t538 + t70;
t17 = pkin(10) * t538 + t26;
t16 = pkin(5) * t152 + t151 * t359 + t25;
t6 = -qJD(6) * t37 + t16 * t376 - t17 * t372;
t5 = qJD(6) * t36 + t16 * t372 + t17 * t376;
t1 = [0, 0, 0, 0, 0, qJDD(1), t444, t445, 0, 0, qJDD(1) * t366 + 0.2e1 * t456, 0.2e1 * t374 * t492 - 0.2e1 * t494 * t500, qJDD(2) * t374 + t377 * t380, qJDD(1) * t367 - 0.2e1 * t456, qJDD(2) * t377 - t374 * t380, 0, t374 * t424 + t377 * t405, -t374 * t405 + t377 * t424, 0.2e1 * t499 * t543 - t445, -g(1) * (-pkin(1) * t375 + pkin(7) * t378) - g(2) * (pkin(1) * t378 + pkin(7) * t375) + (pkin(7) ^ 2 * t499 + pkin(1) ^ 2) * qJDD(1), -t204 * t294 - t274 * t387 (-t412 * t273 + t294 * (-qJD(1) * t411 + t469) - t483 - t274 * t411) * t377 + (t204 * t566 + t273 * t411 - t274 * t412 + t294 * t588) * t374, t294 * t362 - t364 * t387, t273 * t590 - t384 * t414, -t362 * t414 - t364 * t590, 0, g(1) * t512 - g(2) * t511 + t185 * t364 + t248 * t362 + t266 * t414 + t273 * t352 - t318 * t590 + t350 * t384, -g(1) * t514 + g(2) * t513 - t184 * t364 + t350 * t204 - t249 * t362 + t266 * t294 + t274 * t352 + t318 * t387, -t156 * t294 - t184 * t273 - t185 * t274 + t248 * t204 - t230 * t590 + t249 * t384 - t445 + (-t155 + t583) * t414, t155 * t249 + t230 * t184 + t156 * t248 + t229 * t185 - t266 * t350 - t318 * t352 - g(1) * (-t350 * t375 - t378 * t379) - g(2) * (t350 * t378 - t375 * t379) -t119 * t237 - t151 * t423, t119 * t236 - t152 * t423 - t433, -t151 * t356 + t237 * t353, t432, -t152 * t356 - t236 * t353, 0, t120 * t257 + t152 * t247 - t168 * t353 + t177 * t236 + t219 * t223 - t356 * t70 + t426, -t119 * t257 - t151 * t247 - t169 * t353 + t177 * t237 + t223 * t423 - t356 * t69 + t452, -t119 * t168 - t120 * t169 + t131 * t151 - t132 * t152 - t219 * t69 + t236 * t459 - t237 * t49 + t423 * t70 - t445, -t459 * t169 + t132 * t69 - t49 * t168 - t131 * t70 + t177 * t257 + t247 * t223 - g(1) * (-t300 * t375 - t365 * t378) - g(2) * (-t365 * t375 + t281) (t103 * t237 - t151 * t203) * t370 (-t95 - t94) * t237 - t408 * t151, t103 * t236 + t152 * t203 + t370 * t433 (t102 * t237 + t151 * t581) * t369, -t102 * t236 + t152 * t581 - t369 * t433, t432, t168 * t102 + t12 * t236 + t90 * t120 + t77 * t152 + t25 * t219 + t369 * t402 + t370 * t426 - t581 * t70, t168 * t103 - t91 * t120 - t13 * t236 - t78 * t152 + t70 * t203 - t26 * t219 + t370 * t402 - t444 * t522, t26 * t581 - t91 * t102 - t25 * t203 - t90 * t103 + (-t12 * t370 - t13 * t369) * t237 + (t369 * t78 + t370 * t77) * t151 - t452, -t561 + t12 * t90 + t128 * t70 + t13 * t91 + t47 * t168 + t77 * t25 + t78 * t26 + (g(1) * t365 - g(2) * t579) * t378 + (-g(1) * (-t300 - t579) + g(2) * t365) * t375, -t141 * t57 - t174 * t45, -t140 * t57 - t141 * t58 + t173 * t45 - t174 * t46, t118 * t174 + t141 * t152 - t217 * t57 - t236 * t45, -t140 * t58 + t173 * t46, -t118 * t173 + t140 * t152 - t217 * t58 - t236 * t46, t118 * t236 + t152 * t217, -g(1) * t252 - g(2) * t254 + t118 * t36 + t127 * t46 - t140 * t53 - t152 * t437 + t173 * t24 + t217 * t6 + t236 * t4 + t58 * t92, -g(1) * t251 - g(2) * t253 - t118 * t37 - t127 * t45 + t141 * t53 - t152 * t21 + t174 * t24 - t217 * t5 - t236 * t3 - t57 * t92, t140 * t5 - t141 * t6 - t173 * t3 - t174 * t4 - t21 * t58 + t36 * t45 - t37 * t46 - t437 * t57 - t452, -t561 + t24 * t127 - t437 * t6 + t21 * t5 + t3 * t37 + t4 * t36 + t92 * t53 + (-g(1) * t470 - g(2) * t580) * t378 + (-g(1) * (-t300 - t580) - g(2) * t470) * t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t488, t500 * t381, t493, t488, t492, qJDD(2), t374 * t404 - t556, g(3) * t374 + t377 * t404, 0, 0, t527, t205, t175, -t527, t176, t362, -t238 * t364 + (-t273 * t498 + t362 * t568 - t364 * t473) * pkin(2) + t385, t239 * t364 + (-t274 * t498 - t362 * t566 - t364 * t475) * pkin(2) + t399, pkin(2) * t483 + t384 * t490 + (pkin(2) * t473 + t230 + t238) * t274 - (t229 - t239 + t460) * t273, -t229 * t238 - t230 * t239 + (t568 * t156 + t155 * t566 - t556 + (-t229 * t566 + t230 * t568) * qJD(3) + (qJD(1) * t318 + t445) * t374) * pkin(2), t592, t110, t86, -t592, t87, t353, -t219 * t250 + t267 * t353 + t400 - t466, -t250 * t423 - t268 * t353 - t356 * t506 + t401, t119 * t267 - t120 * t268 - t219 * t506 + t423 * t504 + t431, -g(3) * t501 - t131 * t504 + t132 * t506 - t247 * t250 + t49 * t267 - t268 * t459 - t305 * t445, t72, t33, t55, t71, t56, -t592, t263 * t102 - t82 * t219 + t504 * t212 + (-t466 + t478) * t370 + t410 * t369 + t447, t103 * t263 + t203 * t504 + t219 * t83 + t370 * t410 + t392, t226 * t435 - t102 * t528 - t83 * t581 + t82 * t203 + (t103 * t262 + t203 * t226 - t12) * t369 + t428, t47 * t263 - t78 * t83 - t77 * t82 - g(1) * (t288 + t454) - g(2) * (t287 + t455) - g(3) * (t361 + t486) + t439 * t262 + t438 * t226 + t504 * t128, t14, t7, t34, t15, t35, -t537, t118 * t180 - t140 * t505 + t217 * t550 + t255 * t46 + t393, -t118 * t181 + t141 * t505 - t217 * t551 - t255 * t45 + t390, t140 * t551 - t141 * t550 + t180 * t45 - t181 * t46 + t394, t3 * t181 + t4 * t180 + t24 * t255 - g(1) * (t288 - t421) - g(2) * (t287 - t422) - g(3) * (t361 + t443) + t505 * t92 + t551 * t21 - t550 * t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, t205, t175, -t527, t176, t362, t230 * t364 + t385, t399 + t583, 0, 0, t592, t110, t86, -t592, t87, t353, t139 * t356 + (-t219 * t274 + t353 * t567 - t356 * t497) * pkin(3) + t400, t142 * t356 + (-t274 * t423 - t353 * t373 - t356 * t477) * pkin(3) + t401, -t139 * t423 + t142 * t219 + (t567 * t119 - t120 * t373 + (-t219 * t567 + t373 * t423) * qJD(4)) * pkin(3) + t431, t131 * t139 - t132 * t142 + (t567 * t49 - t557 - t247 * t274 - t373 * t459 + t445 * t357 + (-t131 * t373 + t132 * t567) * qJD(4)) * pkin(3), t72, t33, t55, t71, t56, -t592, t348 * t102 - t80 * t219 + t369 * t409 + t370 * t478 + t581 * t582 + t447, t103 * t348 - t203 * t582 + t219 * t81 + t370 * t409 + t392, t329 * t435 - t102 * t526 - t81 * t581 + t80 * t203 + (t103 * t342 + t203 * t329 - t12) * t369 + t428, t47 * t348 - t78 * t81 - t77 * t80 - g(1) * (t378 * t446 + t309) - g(2) * (t375 * t446 + t308) - g(3) * t486 + t439 * t342 + t438 * t329 - t582 * t128, t14, t7, t34, t15, t35, -t537, t118 * t224 - t140 * t449 + t217 * t546 + t307 * t46 + t393, -t118 * t225 + t141 * t449 - t217 * t547 - t307 * t45 + t390, t140 * t547 - t141 * t546 + t224 * t45 - t225 * t46 + t394, -g(3) * t443 - t437 * t546 + t21 * t547 + t4 * t224 + t3 * t225 + t24 * t307 + t449 * t92 + t445 * (t429 + t564); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t592, t110, t86, -t592, t87, t353, t400 + t540, t131 * t356 + t401, 0, 0, t72, t33, t370 * t569 + t573, t71, -t369 * t569 + t572, -t592, -qJ(5) * t112 - pkin(4) * t102 - t132 * t212 + (t478 + t540) * t370 + (t369 * t495 - t84) * t219 + t447, -qJ(5) * t113 - pkin(4) * t103 - t132 * t203 + (t370 * t495 + t85) * t219 + t392, t84 * t203 + t85 * t212 + (-qJ(5) * t102 + qJD(5) * t581 - t77 * t219 - t85 * t356) * t370 + (qJ(5) * t103 + qJD(5) * t203 - t219 * t78 - t12) * t369 + t461, -t47 * pkin(4) - g(1) * t454 - g(2) * t455 - g(3) * t579 + qJ(5) * t439 + qJD(5) * t438 - t128 * t132 - t77 * t84 - t78 * t85, t14, t7, t34, t15, t35, -t537, t106 * t140 + t118 * t242 + t217 * t544 - t343 * t46 + t393, -t106 * t141 - t118 * t243 - t217 * t545 + t343 * t45 + t390, t140 * t545 - t141 * t544 + t242 * t45 - t243 * t46 + t394, g(1) * t421 + g(2) * t422 - g(3) * t580 - t92 * t106 + t21 * t545 - t24 * t343 + t4 * t242 + t3 * t243 - t437 * t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203 * t219 + t102, t103 + t599, -t203 ^ 2 - t581 ^ 2, t203 * t77 - t581 * t78 + t395, 0, 0, 0, 0, 0, 0, t141 * t217 + t46, -t45 + t602, -t600 - t603, -t140 * t21 - t141 * t437 + t395 + t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t539, t600 - t603, -t45 - t602, t539, -t467 + (-qJD(6) + t217) * t141, t118, -g(1) * t253 + g(2) * t251 - t141 * t92 + t21 * t217 + t346 * t559 + t4, g(1) * t254 - g(2) * t252 - t140 * t92 - t217 * t437 + t346 * t558 - t3, 0, 0;];
tau_reg  = t1;
