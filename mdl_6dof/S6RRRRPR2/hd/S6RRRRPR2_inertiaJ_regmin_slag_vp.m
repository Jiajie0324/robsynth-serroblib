% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR2_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR2_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR2_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
t88 = sin(pkin(11));
t89 = cos(pkin(11));
t105 = t88 ^ 2 + t89 ^ 2;
t91 = sin(qJ(4));
t117 = t91 * pkin(3);
t75 = qJ(5) + t117;
t108 = t105 * t75;
t124 = qJ(5) * t105;
t115 = cos(qJ(4));
t92 = sin(qJ(3));
t93 = sin(qJ(2));
t95 = cos(qJ(3));
t96 = cos(qJ(2));
t61 = t92 * t96 + t95 * t93;
t99 = t92 * t93 - t95 * t96;
t32 = t115 * t99 + t91 * t61;
t123 = -0.2e1 * t32;
t79 = -t96 * pkin(2) - pkin(1);
t49 = t99 * pkin(3) + t79;
t122 = 0.2e1 * t49;
t121 = 0.2e1 * t79;
t120 = 0.2e1 * t96;
t119 = pkin(7) + pkin(8);
t118 = pkin(4) * t88;
t116 = t92 * pkin(2);
t69 = t119 * t93;
t70 = t119 * t96;
t40 = t92 * t69 - t95 * t70;
t27 = -t99 * pkin(9) - t40;
t39 = -t95 * t69 - t92 * t70;
t98 = -t61 * pkin(9) + t39;
t18 = -t115 * t98 + t91 * t27;
t114 = t18 * t89;
t85 = t95 * pkin(2);
t78 = t85 + pkin(3);
t107 = -t115 * t78 + t91 * t116;
t52 = -pkin(4) + t107;
t113 = t52 * t89;
t84 = t115 * pkin(3);
t77 = -t84 - pkin(4);
t112 = t77 * t89;
t33 = t115 * t61 - t91 * t99;
t111 = t88 * t33;
t110 = t89 * t33;
t17 = t32 * pkin(4) - t33 * qJ(5) + t49;
t19 = t115 * t27 + t91 * t98;
t8 = t88 * t17 + t89 * t19;
t103 = t115 * t116;
t54 = -t91 * t78 - t103;
t51 = qJ(5) - t54;
t109 = t105 * t51;
t76 = -t89 * pkin(5) - pkin(4);
t7 = t89 * t17 - t88 * t19;
t3 = -t7 * t88 + t8 * t89;
t102 = -pkin(4) * t33 - qJ(5) * t32;
t101 = -t32 * t51 + t33 * t52;
t100 = -t32 * t75 + t33 * t77;
t90 = sin(qJ(6));
t94 = cos(qJ(6));
t60 = t94 * t88 + t90 * t89;
t59 = t90 * t88 - t94 * t89;
t83 = pkin(4) * t89;
t82 = t89 * pkin(10);
t68 = t77 * t88;
t65 = t89 * qJ(5) + t82;
t64 = (-pkin(10) - qJ(5)) * t88;
t63 = t76 - t84;
t58 = t60 ^ 2;
t57 = t89 * t75 + t82;
t56 = (-pkin(10) - t75) * t88;
t48 = t76 * t60;
t47 = t76 * t59;
t46 = t52 * t88;
t43 = t76 + t107;
t42 = t63 * t60;
t41 = t63 * t59;
t38 = t89 * t51 + t82;
t37 = (-pkin(10) - t51) * t88;
t36 = t90 * t64 + t94 * t65;
t35 = t94 * t64 - t90 * t65;
t34 = -0.2e1 * t60 * t59;
t31 = t43 * t60;
t30 = t43 * t59;
t29 = t90 * t56 + t94 * t57;
t28 = t94 * t56 - t90 * t57;
t25 = t60 * t32;
t24 = t59 * t32;
t23 = t90 * t37 + t94 * t38;
t22 = t94 * t37 - t90 * t38;
t21 = t59 * t33;
t20 = t60 * t33;
t16 = t18 * t88;
t12 = t21 * t60;
t11 = pkin(5) * t111 + t18;
t10 = t11 * t60;
t9 = t11 * t59;
t6 = -t60 * t20 + t21 * t59;
t5 = -pkin(10) * t111 + t8;
t4 = t32 * pkin(5) - pkin(10) * t110 + t7;
t2 = t90 * t4 + t94 * t5;
t1 = t94 * t4 - t90 * t5;
t13 = [1, 0, 0, t93 ^ 2, t93 * t120, 0, 0, 0, pkin(1) * t120, -0.2e1 * pkin(1) * t93, t61 ^ 2, -0.2e1 * t61 * t99, 0, 0, 0, t99 * t121, t61 * t121, t33 ^ 2, t33 * t123, 0, 0, 0, t32 * t122, t33 * t122, 0.2e1 * t18 * t111 + 0.2e1 * t7 * t32, 0.2e1 * t18 * t110 - 0.2e1 * t8 * t32, 0.2e1 * (-t7 * t89 - t8 * t88) * t33, t18 ^ 2 + t7 ^ 2 + t8 ^ 2, t21 ^ 2, 0.2e1 * t21 * t20, t21 * t123, t20 * t123, t32 ^ 2, 0.2e1 * t1 * t32 + 0.2e1 * t11 * t20, -0.2e1 * t11 * t21 - 0.2e1 * t2 * t32; 0, 0, 0, 0, 0, t93, t96, 0, -t93 * pkin(7), -t96 * pkin(7), 0, 0, t61, -t99, 0, t39, t40, 0, 0, t33, -t32, 0, -t18, -t19, t101 * t88 - t114, t101 * t89 + t16, t3, t18 * t52 + t3 * t51, -t12, t6, t25, -t24, 0, t43 * t20 + t22 * t32 + t9, -t43 * t21 - t23 * t32 + t10; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t85, -0.2e1 * t116, 0, 0, 0, 0, 1, -0.2e1 * t107, 0.2e1 * t54, -0.2e1 * t113, 0.2e1 * t46, 0.2e1 * t109, t105 * t51 ^ 2 + t52 ^ 2, t58, t34, 0, 0, 0, 0.2e1 * t30, 0.2e1 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t99, 0, t39, t40, 0, 0, t33, -t32, 0, -t18, -t19, t100 * t88 - t114, t100 * t89 + t16, t3, t18 * t77 + t3 * t75, -t12, t6, t25, -t24, 0, t63 * t20 + t28 * t32 + t9, -t63 * t21 - t29 * t32 + t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t85, -t116, 0, 0, 0, 0, 1, t84 - t107, -t103 + (-pkin(3) - t78) * t91 (-t52 - t77) * t89, t68 + t46, t108 + t109, t51 * t108 + t52 * t77, t58, t34, 0, 0, 0, t41 + t30, t42 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t117, -0.2e1 * t112, 0.2e1 * t68, 0.2e1 * t108, t105 * t75 ^ 2 + t77 ^ 2, t58, t34, 0, 0, 0, 0.2e1 * t41, 0.2e1 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t32, 0, -t18, -t19, t102 * t88 - t114, t102 * t89 + t16, t3, -t18 * pkin(4) + t3 * qJ(5), -t12, t6, t25, -t24, 0, t76 * t20 + t35 * t32 + t9, -t76 * t21 - t36 * t32 + t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t107, t54, t83 - t113, t46 - t118, t124 + t109, -t52 * pkin(4) + t124 * t51, t58, t34, 0, 0, 0, t47 + t30, t48 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t84, -t117, t83 - t112, t68 - t118, t124 + t108, -t77 * pkin(4) + t124 * t75, t58, t34, 0, 0, 0, t47 + t41, t48 + t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * t83, -0.2e1 * t118, 0.2e1 * t124, t105 * qJ(5) ^ 2 + pkin(4) ^ 2, t58, t34, 0, 0, 0, 0.2e1 * t47, 0.2e1 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, t110, 0, t18, 0, 0, 0, 0, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t88, 0, t52, 0, 0, 0, 0, 0, t59, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t88, 0, t77, 0, 0, 0, 0, 0, t59, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t88, 0, -pkin(4), 0, 0, 0, 0, 0, t59, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, -t20, t32, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, 0, t22, -t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, 0, t28, -t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, 0, t35, -t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t13;
