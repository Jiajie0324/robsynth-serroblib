% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 11:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR9_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR9_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR9_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR9_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR9_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR9_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:35:48
% EndTime: 2019-05-06 11:36:04
% DurationCPUTime: 6.13s
% Computational Cost: add. (22751->447), mult. (53600->583), div. (0->0), fcn. (36862->10), ass. (0->264)
t240 = sin(pkin(6));
t244 = sin(qJ(2));
t308 = qJDD(1) * t244;
t248 = cos(qJ(2));
t313 = qJD(1) * t248;
t198 = (qJD(2) * t313 + t308) * t240;
t237 = t240 ^ 2;
t250 = qJD(1) ^ 2;
t323 = t237 * t250;
t229 = t244 ^ 2 * t323;
t241 = cos(pkin(6));
t233 = qJD(1) * t241 + qJD(2);
t298 = t240 * t313;
t264 = pkin(4) * t298 - pkin(9) * t233;
t245 = sin(qJ(1));
t249 = cos(qJ(1));
t296 = g(1) * t245 - g(2) * t249;
t343 = pkin(8) * t240;
t193 = qJDD(1) * pkin(1) + t250 * t343 + t296;
t319 = t241 * t248;
t168 = t193 * t319;
t317 = t244 * qJ(3);
t278 = -pkin(2) * t248 - t317;
t315 = qJD(1) * t240;
t195 = t278 * t315;
t314 = qJD(1) * t244;
t279 = g(1) * t249 + g(2) * t245;
t194 = -pkin(1) * t250 + qJDD(1) * t343 - t279;
t328 = t194 * t244;
t228 = t233 ^ 2;
t232 = qJDD(1) * t241 + qJDD(2);
t353 = -pkin(2) * t232 - qJ(3) * t228 + qJDD(3);
t109 = (g(3) * t248 + t195 * t314) * t240 - t168 + t328 + t353;
t288 = t248 * t244 * t323;
t196 = t232 + t288;
t285 = t233 * t298;
t374 = -2 * qJD(4);
t348 = t233 * t374 - t196 * qJ(4) + (t198 - t285) * pkin(3);
t85 = t109 + t348;
t62 = pkin(4) * t198 + pkin(9) * t229 - t233 * t264 + t85;
t327 = t196 * t244;
t230 = t248 ^ 2 * t323;
t356 = -t230 - t228;
t361 = pkin(8) * (t248 * t356 - t327);
t172 = -t229 - t228;
t197 = t232 - t288;
t320 = t241 * t244;
t373 = pkin(1) * (-t172 * t319 + t197 * t320);
t183 = t248 * t197;
t371 = pkin(8) * (t172 * t244 + t183);
t372 = qJ(3) * t197 + (-t172 - t228) * pkin(2);
t370 = qJ(3) * t356;
t242 = sin(qJ(6));
t243 = sin(qJ(5));
t247 = cos(qJ(5));
t299 = t240 * t314;
t181 = t233 * t247 + t243 * t299;
t217 = qJD(5) + t298;
t246 = cos(qJ(6));
t148 = t181 * t242 - t217 * t246;
t150 = t181 * t246 + t217 * t242;
t123 = t150 * t148;
t291 = -t198 * t247 + t232 * t243;
t135 = -qJD(5) * t181 - t291;
t134 = qJDD(6) - t135;
t359 = -t123 + t134;
t369 = t242 * t359;
t179 = t233 * t243 - t247 * t299;
t144 = t181 * t179;
t224 = qJD(2) * t299;
t307 = qJDD(1) * t248;
t199 = t240 * t307 - t224;
t189 = qJDD(5) + t199;
t358 = -t144 + t189;
t368 = t243 * t358;
t367 = t246 * t359;
t366 = t247 * t358;
t157 = t198 + t285;
t364 = pkin(1) * (t196 * t319 + t320 * t356);
t363 = pkin(3) + pkin(4);
t362 = pkin(3) + pkin(8);
t142 = pkin(5) * t179 - pkin(10) * t181;
t347 = t217 ^ 2;
t286 = t233 * t299;
t192 = pkin(3) * t299 - qJ(4) * t233;
t322 = t240 * t244;
t141 = -g(3) * t322 + t193 * t320 + t194 * t248;
t269 = qJ(3) * t232 + 0.2e1 * qJD(3) * t233 + t195 * t298 + t141;
t257 = t192 * t233 + qJDD(4) + t269;
t254 = pkin(3) * t199 + t257;
t345 = pkin(2) * t228;
t86 = -qJ(4) * t230 + t254 - t345;
t349 = -pkin(9) * t197 + t86;
t251 = (t199 + t286) * pkin(4) + t349;
t284 = qJD(3) * t299;
t221 = -0.2e1 * t284;
t163 = g(3) * t241 + t193 * t240;
t268 = -t163 - t157 * qJ(3) + (-t199 + t286) * pkin(2);
t355 = -pkin(3) * t230 - qJ(4) * t199 - t192 * t299 + t298 * t374 + t268;
t255 = t221 + t355;
t59 = -pkin(4) * t229 + t198 * pkin(9) - t264 * t298 + t255;
t337 = t247 * t59;
t36 = t243 * t251 + t337;
t29 = -pkin(5) * t347 + pkin(10) * t189 - t142 * t179 + t36;
t136 = -qJD(5) * t179 + t198 * t243 + t232 * t247;
t161 = t217 * t179;
t116 = t136 - t161;
t44 = -t116 * pkin(10) + (t181 * t217 - t135) * pkin(5) - t62;
t17 = t242 * t29 - t246 * t44;
t18 = t242 * t44 + t246 * t29;
t11 = t17 * t242 + t18 * t246;
t360 = t237 * (qJD(1) * t233 - t241 * t250);
t342 = pkin(2) + qJ(4);
t280 = -t248 * t342 - pkin(1);
t261 = t280 - t317;
t174 = qJD(6) + t179;
t293 = t136 * t242 - t189 * t246;
t75 = (qJD(6) - t174) * t150 + t293;
t300 = t233 * t314;
t352 = (t300 - t307) * t240 + t224;
t155 = -t224 + (t300 + t307) * t240;
t351 = ((t230 - t228) * t244 + t183) * t240 + t155 * t241;
t156 = (t308 + (qJD(2) - t233) * t313) * t240;
t120 = (-(t229 - t228) * t248 + t327) * t240 + t156 * t241;
t158 = (t308 + (qJD(2) + t233) * t313) * t240;
t205 = t230 - t229;
t110 = -t205 * t241 + (t158 * t248 - t244 * t352) * t240;
t146 = t148 ^ 2;
t147 = t150 ^ 2;
t171 = t174 ^ 2;
t176 = t179 ^ 2;
t177 = t181 ^ 2;
t35 = t243 * t59 - t247 * t251;
t28 = -pkin(5) * t189 - pkin(10) * t347 + t142 * t181 + t35;
t346 = -pkin(5) * t28 + pkin(10) * t11;
t341 = pkin(9) - qJ(3);
t25 = t242 * t28;
t90 = t123 + t134;
t340 = t242 * t90;
t339 = t243 * t62;
t26 = t246 * t28;
t338 = t246 * t90;
t336 = t247 * t62;
t131 = t144 + t189;
t335 = t131 * t243;
t334 = t131 * t247;
t330 = t174 * t242;
t329 = t174 * t246;
t325 = t217 * t243;
t324 = t217 * t247;
t321 = t240 * t248;
t318 = t243 * t244;
t204 = -t229 - t230;
t316 = pkin(1) * (-t204 * t240 + (t155 * t244 - t156 * t248) * t241) + (t155 * t248 + t244 * t156) * t343;
t126 = -pkin(2) * t156 + qJ(3) * t155;
t310 = qJD(6) + t174;
t309 = pkin(4) + t362;
t119 = -t147 - t171;
t57 = -t119 * t242 - t338;
t276 = -t136 * t246 - t189 * t242;
t80 = t148 * t310 + t276;
t306 = pkin(5) * t80 + pkin(10) * t57 + t25;
t107 = -t171 - t146;
t54 = t107 * t246 - t369;
t76 = -t150 * t310 - t293;
t305 = pkin(5) * t76 + pkin(10) * t54 - t26;
t303 = t243 * t123;
t302 = t247 * t123;
t301 = t248 * t144;
t297 = (-t204 - t228) * pkin(2);
t295 = t243 * t35 + t247 * t36;
t133 = t174 * t148;
t97 = -qJD(6) * t148 - t276;
t79 = t133 + t97;
t49 = t242 * t79 - t246 * t75;
t99 = t146 + t147;
t294 = pkin(5) * t99 + pkin(10) * t49 + t11;
t290 = t248 * t309;
t287 = pkin(5) * t243 + t342;
t282 = g(3) * t321 - t168;
t281 = -pkin(5) * t247 - t309;
t10 = -t17 * t246 + t18 * t242;
t19 = t243 * t36 - t247 * t35;
t270 = pkin(1) - t278;
t140 = t282 + t328;
t265 = (t140 * t244 + t141 * t248) * t240;
t262 = t221 + t268;
t260 = (-qJD(5) + t217) * t181 - t291;
t259 = t244 * t341 + t280;
t220 = 0.2e1 * t284;
t256 = t220 - t355;
t253 = -qJ(3) * t204 + (t195 * t315 + t194) * t244 + t282 + t353;
t213 = t241 * t232;
t154 = -t177 + t347;
t153 = t176 - t347;
t145 = -t177 - t347;
t143 = t177 - t176;
t139 = -t347 - t176;
t138 = (t198 * t240 + t248 * t360) * t244;
t137 = (t199 * t240 - t244 * t360) * t248;
t129 = -t147 + t171;
t128 = t146 - t171;
t127 = -t176 - t177;
t125 = (-t179 * t247 + t181 * t243) * t217;
t122 = t147 - t146;
t117 = t136 + t161;
t113 = (qJD(5) + t217) * t181 + t291;
t112 = t136 * t247 - t181 * t325;
t111 = -t135 * t243 + t179 * t324;
t106 = t153 * t247 - t335;
t105 = -t154 * t243 + t366;
t104 = -qJ(4) * t156 + t126;
t102 = t269 - t345;
t100 = t145 * t247 - t335;
t96 = -qJD(6) * t150 - t293;
t94 = t139 * t243 + t366;
t93 = (-t148 * t246 + t150 * t242) * t174;
t92 = (-t148 * t242 - t150 * t246) * t174;
t88 = -pkin(2) * t196 + t109 - t370;
t87 = t269 + t372;
t82 = -t113 * t247 - t116 * t243;
t81 = -t117 * t247 + t243 * t260;
t78 = -t133 + t97;
t72 = -t150 * t330 + t246 * t97;
t71 = t150 * t329 + t242 * t97;
t70 = t148 * t329 - t242 * t96;
t69 = t148 * t330 + t246 * t96;
t68 = t134 * t243 + t247 * t93;
t67 = t128 * t246 - t340;
t66 = -t129 * t242 + t367;
t65 = t128 * t242 + t338;
t64 = t129 * t246 + t369;
t63 = -pkin(2) * t109 + qJ(3) * t102;
t61 = (-t172 - t230) * qJ(4) + t254 + t372;
t58 = t196 * t342 + t370 - t85;
t56 = t119 * t246 - t340;
t53 = t107 * t242 + t367;
t51 = t247 * t72 + t303;
t50 = t247 * t70 - t303;
t48 = -t242 * t78 + t246 * t76;
t47 = -t242 * t75 - t246 * t79;
t46 = t242 * t76 + t246 * t78;
t43 = -t243 * t75 + t247 * t67;
t42 = t243 * t79 + t247 * t66;
t39 = t243 * t57 + t247 * t80;
t37 = t243 * t54 + t247 * t76;
t33 = t122 * t243 + t247 * t48;
t32 = qJ(3) * t86 - t342 * t85;
t30 = t243 * t49 + t247 * t99;
t24 = -t100 * t341 + t116 * t342 - t336;
t23 = t113 * t342 - t341 * t94 - t339;
t22 = -pkin(10) * t56 + t26;
t21 = -pkin(10) * t53 + t25;
t14 = -pkin(5) * t56 + t18;
t13 = -pkin(5) * t53 + t17;
t12 = t127 * t342 - t341 * t81 - t19;
t8 = -t19 * t341 - t342 * t62;
t7 = -pkin(10) * t47 - t10;
t5 = t11 * t243 - t247 * t28;
t4 = -t14 * t243 + t22 * t247 - t341 * t39 + t342 * t56;
t3 = -t13 * t243 + t21 * t247 - t341 * t37 + t342 * t53;
t2 = t247 * t7 + t287 * t47 - t30 * t341;
t1 = -t341 * t5 + (-pkin(10) * t247 + t287) * t10;
t6 = [0, 0, 0, 0, 0, qJDD(1), t296, t279, 0, 0, t138, t110, t120, t137, t351, t213, -t241 * t140 + t364 + (-pkin(1) * t352 + t248 * t163 + t361) * t240, (-t141 + pkin(1) * (t172 * t248 - t197 * t244)) * t241 + (-pkin(1) * t157 - t244 * t163 - t371) * t240, t265 + t316, pkin(1) * (t163 * t240 + (-t140 * t248 + t141 * t244) * t241) + pkin(8) * t265, t213, -t120, -t351, t138, t110, t137, t241 * t126 + (t248 * (t297 + t269) + t253 * t244) * t240 + t316, (t88 + pkin(1) * (-t196 * t248 - t244 * t356)) * t241 + (t248 * t262 + t270 * t352 - t361) * t240, t241 * t87 + t373 + (t244 * (t220 - t268) + t371 + t270 * t157) * t240, (t63 + pkin(1) * (t102 * t244 - t109 * t248)) * t241 + (pkin(8) * (t102 * t248 + t109 * t244) - t270 * t262) * t240, t213, -t351, t120, t137, -t110, t138, t241 * t104 + (t248 * ((-t204 - t230) * qJ(4) + (t155 + t199) * pkin(3) + t297 + t257) + (pkin(3) * t156 + t253 + t348) * t244) * t240 + t316, t241 * t61 + t373 + (t244 * (pkin(3) * t172 + t256) + pkin(3) * t183 + t371 - t261 * t158) * t240, t241 * t58 + t364 + (-pkin(3) * t327 + t248 * (pkin(3) * t356 + t256) + t361 + t261 * t352) * t240, (t32 + pkin(1) * (t244 * t86 - t248 * t85)) * t241 + (t261 * t255 + t362 * (t244 * t85 + t248 * t86)) * t240, t241 * t112 + (t244 * (t136 * t243 + t181 * t324) + t301) * t240, t241 * t82 + (t244 * (-t113 * t243 + t116 * t247) + t248 * t143) * t240, t241 * t105 + (t244 * (t154 * t247 + t368) + t248 * t117) * t240, t241 * t111 + (t244 * (t135 * t247 + t179 * t325) - t301) * t240, t241 * t106 + (t244 * (t153 * t243 + t334) + t248 * t260) * t240, t189 * t321 + t241 * t125 + (-t179 * t243 - t181 * t247) * t217 * t322, (t23 + pkin(1) * (t113 * t248 + t244 * t94)) * t241 + (t244 * (-t113 * t363 + t336) + t248 * (t363 * t94 - t35) + pkin(8) * (-t113 * t244 + t248 * t94) + t259 * (t139 * t247 - t368)) * t240, (t244 * (-t116 * t363 - t339) + t248 * (-t337 - t243 * (pkin(4) * t199 + t349) + t363 * t100) + pkin(8) * (t100 * t248 - t116 * t244) - pkin(4) * t285 * t318 + t259 * (-t145 * t243 - t334)) * t240 + (t24 + pkin(1) * (t100 * t244 + t116 * t248)) * t241, (t12 + pkin(1) * (t127 * t248 + t244 * t81)) * t241 + ((-t127 * t309 + t295) * t244 + t81 * t290 + t259 * (t117 * t243 + t247 * t260)) * t240, (t8 + pkin(1) * (t19 * t244 - t248 * t62)) * t241 + (t244 * t309 * t62 + t19 * t290 + t259 * t295) * t240, t241 * t51 + (t244 * (t243 * t72 - t302) + t248 * t71) * t240, t241 * t33 + (t244 * (-t122 * t247 + t243 * t48) + t248 * t46) * t240, t241 * t42 + (t244 * (t243 * t66 - t247 * t79) + t248 * t64) * t240, t241 * t50 + (t244 * (t243 * t70 + t302) + t248 * t69) * t240, t241 * t43 + (t244 * (t243 * t67 + t247 * t75) + t248 * t65) * t240, t241 * t68 + (t244 * (-t134 * t247 + t243 * t93) + t248 * t92) * t240, (t3 + pkin(1) * (t244 * t37 + t248 * t53)) * t241 + (t244 * (t13 * t247 + t21 * t243 - t363 * t53) + t248 * (t363 * t37 + t305) + pkin(8) * (-t244 * t53 + t248 * t37) + t259 * (-t243 * t76 + t247 * t54)) * t240, (t4 + pkin(1) * (t244 * t39 + t248 * t56)) * t241 + (t244 * (t14 * t247 + t22 * t243 - t363 * t56) + t248 * (t363 * t39 + t306) + pkin(8) * (-t244 * t56 + t248 * t39) + t259 * (-t243 * t80 + t247 * t57)) * t240, (t2 + pkin(1) * (t244 * t30 + t248 * t47)) * t241 + (t7 * t318 + (t30 * t309 + t294) * t248 + t281 * t244 * t47 + t259 * (-t243 * t99 + t247 * t49)) * t240, (t1 + pkin(1) * (t10 * t248 + t244 * t5)) * t241 + ((t309 * t5 + t346) * t248 + t259 * (t11 * t247 + t243 * t28) + (-pkin(10) * t243 + t281) * t244 * t10) * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t288, -t205, t156, t288, t155, t232, -t140, -t141, 0, 0, t232, -t156, -t155, -t288, -t205, t288, t126, t88, t87, t63, t232, -t155, t156, t288, t205, -t288, t104, t61, t58, t32, t112, t82, t105, t111, t106, t125, t23, t24, t12, t8, t51, t33, t42, t50, t43, t68, t3, t4, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t156, t196, t172, t109, 0, 0, 0, 0, 0, 0, t156, t172, -t196, t85, 0, 0, 0, 0, 0, 0, -t113, -t116, -t127, t62, 0, 0, 0, 0, 0, 0, -t53, -t56, -t47, -t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, t197, t356, t86, 0, 0, 0, 0, 0, 0, t94, t100, t81, t19, 0, 0, 0, 0, 0, 0, t37, t39, t30, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t143, t117, -t144, t260, t189, -t35, -t36, 0, 0, t71, t46, t64, t69, t65, t92, t305, t306, t294, t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t122, t79, -t123, -t75, t134, -t17, -t18, 0, 0;];
tauJ_reg  = t6;
