% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR9_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR9_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR9_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR9_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:32:07
% EndTime: 2019-03-09 09:32:21
% DurationCPUTime: 5.10s
% Computational Cost: add. (3832->370), mult. (9565->640), div. (0->0), fcn. (8495->8), ass. (0->224)
t92 = sin(qJ(2));
t207 = qJ(3) * t92;
t159 = -pkin(1) - t207;
t117 = qJD(5) * (pkin(9) * t92 + t159);
t94 = cos(qJ(5));
t186 = t94 * qJD(3);
t91 = sin(qJ(5));
t198 = qJD(4) * t94;
t238 = pkin(3) + pkin(8);
t184 = pkin(4) + t238;
t89 = pkin(2) + qJ(4);
t242 = -t94 * t184 - t91 * t89;
t95 = cos(qJ(2));
t97 = (qJD(5) * t242 + t198) * t95;
t259 = -t117 * t91 - t92 * t186 - t97;
t86 = sin(pkin(6));
t218 = t86 * t95;
t155 = t238 * t218;
t237 = pkin(1) * t92;
t87 = cos(pkin(6));
t182 = t87 * t237;
t258 = (t155 + t182) * qJD(2);
t140 = t184 * t218;
t201 = qJD(4) * t87;
t22 = (t140 + t182) * qJD(2) - t201;
t257 = pkin(5) - t242;
t236 = pkin(1) * t95;
t163 = -pkin(2) - t236;
t149 = qJ(4) - t163;
t132 = t149 * t87;
t220 = t86 * t92;
t254 = pkin(3) * t220 - t132;
t187 = t91 * qJD(3);
t199 = qJD(4) * t91;
t241 = t91 * t184 - t94 * t89;
t253 = -t117 * t94 + t92 * t187 - (qJD(5) * t241 - t199) * t95;
t158 = qJ(3) + t237;
t252 = t158 * t87;
t219 = t86 * t94;
t177 = t92 * t219;
t50 = t87 * t91 - t177;
t51 = t91 * t220 + t87 * t94;
t248 = pkin(5) * t50 - pkin(10) * t51;
t78 = pkin(8) * t220;
t133 = -t78 + t248;
t251 = -pkin(4) * t220 + t133 - t254;
t144 = pkin(5) * t94 + pkin(10) * t91;
t190 = qJD(6) * t91;
t88 = qJ(3) - pkin(9);
t250 = t144 * qJD(5) - t88 * t190 + qJD(4);
t233 = t91 * pkin(5);
t143 = -pkin(10) * t94 + t233;
t122 = t143 + t89;
t193 = qJD(5) * t94;
t169 = t88 * t193;
t124 = -t169 - t187;
t249 = -qJD(6) * t122 + t124;
t90 = sin(qJ(6));
t82 = t90 ^ 2;
t93 = cos(qJ(6));
t84 = t93 ^ 2;
t211 = t82 - t84;
t157 = qJD(6) * t211;
t148 = -pkin(9) + t158;
t130 = qJD(5) * t148;
t109 = t130 * t94 + t187;
t181 = t87 * t236;
t71 = qJD(2) * t181;
t214 = t91 * t71;
t247 = -t109 * t87 - t214;
t246 = (t91 * t130 - t186) * t87 - t94 * t71;
t195 = qJD(5) * t91;
t123 = t88 * t195 - t186;
t243 = qJD(6) * t144 + t123;
t240 = 0.2e1 * t86;
t239 = -pkin(3) - pkin(4);
t204 = qJD(2) * t95;
t75 = t86 * t204;
t28 = -qJD(5) * t177 + t87 * t195 - t91 * t75;
t31 = t90 * t218 + t51 * t93;
t205 = qJD(2) * t92;
t74 = t86 * t205;
t15 = t31 * qJD(6) - t28 * t90 + t93 * t74;
t232 = t15 * t90;
t231 = t15 * t93;
t191 = qJD(6) * t90;
t16 = -t51 * t191 - t90 * t74 + (qJD(6) * t218 - t28) * t93;
t230 = t16 * t90;
t229 = t16 * t93;
t228 = t28 * t94;
t29 = t51 * qJD(5) - t94 * t75;
t227 = t29 * t91;
t30 = -t93 * t218 + t51 * t90;
t226 = t30 * t90;
t225 = t30 * t93;
t224 = t31 * t90;
t223 = t31 * t93;
t179 = pkin(8) * t218;
t58 = t179 + t182;
t47 = t58 * qJD(2);
t222 = t47 * t87;
t221 = t47 * t92;
t217 = t88 * t91;
t216 = t89 * t95;
t215 = t90 * t94;
t131 = t148 * t87;
t139 = -t88 * t92 - pkin(1);
t13 = (-t216 + t139) * t219 + t91 * (t131 + t140);
t11 = pkin(10) * t218 + t13;
t213 = t93 * t11;
t210 = t82 + t84;
t83 = t91 ^ 2;
t85 = t94 ^ 2;
t209 = t83 - t85;
t208 = t83 + t85;
t206 = qJ(3) * t95;
t203 = qJD(3) * t88;
t202 = qJD(3) * t92;
t200 = qJD(4) * t89;
t197 = qJD(5) * t30;
t196 = qJD(5) * t31;
t194 = qJD(5) * t93;
t192 = qJD(5) * t95;
t80 = qJD(6) * t93;
t189 = qJD(6) * t94;
t188 = t87 * qJD(3);
t185 = qJ(3) * qJD(3);
t183 = 0.2e1 * t50 * t29;
t178 = -0.2e1 * pkin(5) * qJD(6);
t176 = t90 * t217;
t175 = t93 * t217;
t174 = pkin(1) * t205;
t81 = t86 ^ 2;
t173 = t81 * t204;
t172 = qJD(5) * t50 * t90;
t171 = t50 * t194;
t170 = t91 * t194;
t168 = t90 * t189;
t166 = t93 * t189;
t165 = t90 * t80;
t164 = t91 * t193;
t161 = t88 * t95;
t160 = t210 * t94;
t156 = t209 * qJD(5);
t72 = 0.2e1 * t164;
t154 = t90 * t170;
t153 = t85 * t165;
t152 = t92 * t173;
t151 = t87 * t74;
t150 = t87 * t75;
t147 = t91 * t161;
t146 = t94 * t161;
t145 = pkin(5) * t29 + pkin(10) * t28;
t7 = -t90 * t11 + t251 * t93;
t8 = t251 * t90 + t213;
t142 = t7 * t93 + t8 * t90;
t141 = t7 * t90 - t8 * t93;
t138 = -pkin(2) * t95 - t207;
t137 = -t224 + t225;
t136 = t224 + t225;
t36 = t122 * t93 - t176;
t37 = t122 * t90 + t175;
t135 = t36 * t93 + t37 * t90;
t134 = t36 * t90 - t37 * t93;
t46 = pkin(8) * t74 - t71;
t121 = t94 * t131;
t125 = t91 * t139;
t10 = -t121 + (-t257 * t95 + t125) * t86;
t4 = ((t257 * t92 - t147) * qJD(2) - t253) * t86 + t246;
t129 = t10 * t80 + t4 * t90;
t128 = t10 * t191 - t4 * t93;
t127 = t50 * t193 + t227;
t126 = t29 * t90 + t50 * t80;
t19 = t50 * t191 - t29 * t93;
t120 = -t238 * t74 + t71;
t119 = -t91 * t192 - t94 * t205;
t118 = -t94 * t192 + t91 * t205;
t54 = -t168 - t170;
t56 = t90 * t195 - t166;
t108 = (-pkin(10) - t241) * t92;
t107 = t143 * qJD(5) - t88 * t189;
t23 = t239 * t220 + t132 - t78;
t1 = t11 * t191 - (t23 + t248) * t80 - t93 * (((-t146 + t108) * qJD(2) + t259) * t86 - t247) - t90 * (t145 - t22);
t2 = -t90 * t214 + t93 * t145 + (-t90 * t133 - t213) * qJD(6) + (t93 * (qJD(4) - t174) + (-qJD(6) * t149 - t109) * t90) * t87 + ((-pkin(1) * t195 + (-qJD(6) * t239 - t123) * t92 + t97) * t90 + ((-t93 * t184 + t88 * t215) * t95 - t90 * t108) * qJD(2)) * t86;
t106 = t141 * qJD(6) + t1 * t90 - t2 * t93;
t105 = -t142 * qJD(6) - t1 * t93 - t2 * t90;
t12 = t121 + (-t242 * t95 - t125) * t86;
t5 = ((t241 * t92 + t146) * qJD(2) - t259) * t86 + t247;
t6 = ((t242 * t92 + t147) * qJD(2) + t253) * t86 - t246;
t104 = -t5 * t91 + t6 * t94 + (-t12 * t91 + t13 * t94) * qJD(5);
t102 = -t231 + t230 + (t223 + t226) * qJD(6);
t17 = t249 * t93 - t250 * t90;
t18 = t249 * t90 + t250 * t93;
t101 = t134 * qJD(6) + t17 * t90 - t18 * t93;
t100 = -t135 * qJD(6) - t17 * t93 - t18 * t90;
t96 = 0.2e1 * qJD(3);
t79 = 0.2e1 * t188;
t76 = t85 * t203;
t73 = qJD(3) * t218;
t67 = t208 * qJD(3);
t62 = -0.2e1 * t152;
t61 = 0.2e1 * t152;
t60 = 0.2e1 * t150;
t59 = 0.2e1 * t151;
t57 = -t78 + t181;
t55 = t90 * t193 + t91 * t80;
t53 = t90 * t190 - t93 * t193;
t49 = (-t92 ^ 2 + t95 ^ 2) * t81 * qJD(2);
t45 = 0.2e1 * t49;
t44 = t163 * t87 + t78;
t43 = (-pkin(1) + t138) * t86;
t42 = -t179 - t252;
t40 = t119 * t86;
t39 = t118 * t86;
t38 = t46 - t188;
t35 = t94 * t157 + t154;
t34 = (-t202 + (pkin(2) * t92 - t206) * qJD(2)) * t86;
t33 = t155 + t252;
t32 = (-t216 + t159) * t86;
t27 = -t201 + t258;
t26 = t120 + t188;
t25 = t78 + t254;
t20 = (-t202 - qJD(4) * t95 + (t89 * t92 - t206) * qJD(2)) * t86;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t45, t60, t62, -0.2e1 * t151, 0, -0.2e1 * t81 * t174 - 0.2e1 * t222, -0.2e1 * pkin(1) * t173 + 0.2e1 * t46 * t87 (-t46 * t95 + t221 + (-t57 * t95 - t58 * t92) * qJD(2)) * t240, -0.2e1 * t46 * t58 - 0.2e1 * t47 * t57, 0, -0.2e1 * t150, t59, t61, t45, t62 (-t38 * t95 + t221 + (t42 * t92 + t44 * t95) * qJD(2)) * t240, 0.2e1 * t222 + 0.2e1 * (-t43 * t205 + t34 * t95) * t86, -0.2e1 * t38 * t87 + 0.2e1 * (-t43 * t204 - t34 * t92) * t86, 0.2e1 * t34 * t43 + 0.2e1 * t38 * t42 + 0.2e1 * t44 * t47, 0, t59, t60, t62, -0.2e1 * t49, t61 (t26 * t95 + t27 * t92 + (t25 * t95 - t33 * t92) * qJD(2)) * t240, 0.2e1 * t26 * t87 + 0.2e1 * (-t20 * t92 - t32 * t204) * t86, -0.2e1 * t27 * t87 + 0.2e1 * (-t20 * t95 + t32 * t205) * t86, 0.2e1 * t20 * t32 + 0.2e1 * t25 * t27 + 0.2e1 * t26 * t33, -0.2e1 * t51 * t28, 0.2e1 * t28 * t50 - 0.2e1 * t29 * t51 (-t205 * t51 - t28 * t95) * t240, t183 (t205 * t50 - t29 * t95) * t240, t62, -0.2e1 * t22 * t50 + 0.2e1 * t23 * t29 + 0.2e1 * (-t12 * t205 + t6 * t95) * t86, -0.2e1 * t22 * t51 - 0.2e1 * t23 * t28 + 0.2e1 * (t13 * t205 + t5 * t95) * t86, 0.2e1 * t12 * t28 - 0.2e1 * t13 * t29 + 0.2e1 * t5 * t50 - 0.2e1 * t51 * t6, 0.2e1 * t12 * t6 - 0.2e1 * t13 * t5 - 0.2e1 * t22 * t23, 0.2e1 * t31 * t16, -0.2e1 * t15 * t31 - 0.2e1 * t16 * t30, 0.2e1 * t16 * t50 + 0.2e1 * t29 * t31, 0.2e1 * t30 * t15, -0.2e1 * t15 * t50 - 0.2e1 * t29 * t30, t183, 0.2e1 * t10 * t15 + 0.2e1 * t2 * t50 + 0.2e1 * t29 * t7 + 0.2e1 * t30 * t4, 0.2e1 * t1 * t50 + 0.2e1 * t10 * t16 - 0.2e1 * t29 * t8 + 0.2e1 * t31 * t4, 0.2e1 * t1 * t30 - 0.2e1 * t15 * t8 - 0.2e1 * t16 * t7 - 0.2e1 * t2 * t31, -0.2e1 * t1 * t8 + 0.2e1 * t10 * t4 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t74, 0, -t47, t46, 0, 0, 0, -t75, t74, 0, 0, 0, t138 * t86 * qJD(2) + t73, t47, -t46 + t79, -pkin(2) * t47 - qJ(3) * t38 - qJD(3) * t42, 0, t74, t75, 0, 0, 0, t73 + (-qJD(4) * t92 + (-t207 - t216) * qJD(2)) * t86, t79 + t120, 0.2e1 * t201 - t258, qJ(3) * t26 + qJD(3) * t33 - qJD(4) * t25 - t27 * t89, -t51 * t195 - t228, t28 * t91 - t29 * t94 + (t50 * t91 - t51 * t94) * qJD(5), t40, t127, t39, 0, t23 * t193 + qJD(4) * t50 - t22 * t91 + t29 * t89 + (t119 * t88 + t186 * t95) * t86, -t23 * t195 + qJD(4) * t51 - t22 * t94 - t28 * t89 + (t118 * t88 - t187 * t95) * t86 (-qJD(3) * t51 + t28 * t88 - t6 + (-t50 * t88 - t13) * qJD(5)) * t94 + (-qJD(3) * t50 - t29 * t88 + t5 + (t51 * t88 + t12) * qJD(5)) * t91, qJD(4) * t23 - t22 * t89 + (t12 * t94 + t13 * t91) * qJD(3) + t104 * t88, t94 * t229 + t31 * t54, t136 * t195 + (-t231 - t230 + (-t223 + t226) * qJD(6)) * t94 (t16 - t171) * t91 + (-t19 + t196) * t94, t15 * t215 - t30 * t56 (-t15 + t172) * t91 + (-t126 - t197) * t94, t127, t18 * t50 + t29 * t36 + (t2 + (-t10 * t90 + t30 * t88) * qJD(5)) * t91 + (-qJD(3) * t30 + qJD(5) * t7 - t15 * t88 + t129) * t94, t17 * t50 - t29 * t37 + (t1 + (-t10 * t93 + t31 * t88) * qJD(5)) * t91 + (-qJD(3) * t31 - qJD(5) * t8 - t16 * t88 - t128) * t94, t106 * t94 + t142 * t195 - t15 * t37 - t16 * t36 + t17 * t30 - t18 * t31, -t4 * t88 * t94 - t1 * t37 + t10 * t123 - t17 * t8 + t18 * t7 + t2 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0.2e1 * t185, 0, 0, 0, 0, 0, 0, 0, t96, 0.2e1 * qJD(4), 0.2e1 * t185 + 0.2e1 * t200, -0.2e1 * t164, 0.2e1 * t156, 0, t72, 0, 0, 0.2e1 * t193 * t89 + 0.2e1 * t199, -0.2e1 * t195 * t89 + 0.2e1 * t198, -0.2e1 * t67, 0.2e1 * t203 * t83 + 0.2e1 * t200 + 0.2e1 * t76, -0.2e1 * t164 * t84 - 0.2e1 * t153, 0.4e1 * t154 * t94 + 0.2e1 * t157 * t85, -0.2e1 * t168 * t91 - 0.2e1 * t194 * t209, -0.2e1 * t164 * t82 + 0.2e1 * t153, 0.2e1 * t156 * t90 - 0.2e1 * t166 * t91, t72, 0.2e1 * t18 * t91 + 0.2e1 * (-qJD(3) * t90 - t80 * t88) * t85 + 0.2e1 * (t36 + 0.2e1 * t176) * t193, 0.2e1 * t17 * t91 + 0.2e1 * (-qJD(3) * t93 + t191 * t88) * t85 + 0.2e1 * (-t37 + 0.2e1 * t175) * t193, 0.2e1 * t101 * t94 + 0.2e1 * t135 * t195, -0.2e1 * t164 * t88 ^ 2 - 0.2e1 * t17 * t37 + 0.2e1 * t18 * t36 + 0.2e1 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, t47, 0, 0, 0, 0, 0, 0, t75, 0, 0, t27, 0, 0, 0, 0, 0, 0, -t29, t28, 0, t22, 0, 0, 0, 0, 0, 0, t19, t126, qJD(6) * t137 + t229 + t232, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4), 0, 0, 0, 0, 0, 0, -t193, t195, 0, -qJD(4), 0, 0, 0, 0, 0, 0, t53, t55, -t210 * t195, t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, 0, t26, 0, 0, 0, 0, 0, 0, t40, t39, t228 - t227 + (-t50 * t94 + t51 * t91) * qJD(5), t104, 0, 0, 0, 0, 0, 0 (-t15 - t172) * t94 + (-t126 + t197) * t91 (-t16 - t171) * t94 + (t19 + t196) * t91, t102 * t91 - t137 * t193 (-qJD(5) * t141 - t4) * t94 + (qJD(5) * t10 + t105) * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, 0, -t208 * t80, t208 * t191, 0, qJD(3) * t85 - t134 * t193 + (t100 - 0.2e1 * t169) * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t210) * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, -t29, -t74, t6, t5, 0, 0, t31 * t80 + t230, -qJD(6) * t136 + t229 - t232, t126, t191 * t30 - t231, -t19, 0, -pkin(5) * t15 - pkin(10) * t126 + t128, -pkin(5) * t16 + pkin(10) * t19 + t129, pkin(10) * t102 + t105, -pkin(5) * t4 + pkin(10) * t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, 0, -t193, 0, -t123, t124, 0, 0, -t35, -0.4e1 * t165 * t94 + t195 * t211, t55, t35, -t53, 0, t107 * t90 - t243 * t93, t107 * t93 + t243 * t90, t100, -pkin(5) * t123 + pkin(10) * t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, -t193, 0, 0, 0, 0, 0, 0, 0, 0, t54, t56, qJD(5) * t160 (pkin(10) * t160 - t233) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t165, -0.2e1 * t157, 0, -0.2e1 * t165, 0, 0, t90 * t178, t93 * t178, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t15, t29, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t56, t193, t18, t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t191, t80, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t191, 0, -pkin(10) * t80, pkin(10) * t191, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
