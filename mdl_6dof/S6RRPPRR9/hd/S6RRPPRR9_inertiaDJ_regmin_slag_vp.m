% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR9_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:32:07
% EndTime: 2019-03-09 09:32:13
% DurationCPUTime: 2.12s
% Computational Cost: add. (1483->251), mult. (4062->458), div. (0->0), fcn. (3603->8), ass. (0->149)
t89 = sin(pkin(6));
t98 = cos(qJ(2));
t166 = t89 * t98;
t174 = pkin(3) + pkin(8);
t90 = cos(pkin(6));
t173 = pkin(1) * t90;
t95 = sin(qJ(2));
t75 = t95 * t173;
t182 = (t174 * t166 + t75) * qJD(2);
t180 = pkin(8) * t166 + t75;
t46 = -t90 * qJ(3) - t180;
t39 = pkin(3) * t166 - t46;
t28 = pkin(4) * t166 - pkin(9) * t90 + t39;
t92 = pkin(2) + qJ(4);
t164 = t92 * t98;
t116 = -pkin(1) - t164;
t91 = qJ(3) - pkin(9);
t30 = (-t91 * t95 + t116) * t89;
t94 = sin(qJ(5));
t97 = cos(qJ(5));
t181 = t94 * t28 + t97 * t30;
t118 = pkin(5) * t97 + pkin(10) * t94;
t145 = qJD(6) * t94;
t179 = t118 * qJD(5) - t91 * t145 + qJD(4);
t167 = t89 * t95;
t138 = t97 * t167;
t150 = qJD(5) * t94;
t156 = qJD(2) * t98;
t70 = t89 * t156;
t34 = -qJD(5) * t138 + t90 * t150 - t94 * t70;
t53 = t94 * t167 + t90 * t97;
t35 = t53 * qJD(5) - t97 * t70;
t178 = t35 * pkin(5) + t34 * pkin(10);
t96 = cos(qJ(6));
t87 = t96 ^ 2;
t93 = sin(qJ(6));
t161 = t93 ^ 2 - t87;
t124 = t161 * qJD(6);
t155 = qJD(3) * t95;
t157 = qJD(2) * t95;
t127 = t89 * t157;
t67 = pkin(2) * t127;
t162 = qJ(4) * t127 + t67;
t20 = (-t155 + (-t91 * qJD(2) - qJD(4)) * t98) * t89 + t162;
t140 = -pkin(4) - t174;
t76 = t98 * t173;
t68 = qJD(2) * t76;
t79 = t90 * qJD(3);
t25 = t140 * t127 + t68 + t79;
t6 = -qJD(5) * t181 - t94 * t20 + t97 * t25;
t143 = t97 * qJD(3);
t105 = -t91 * t150 + t143;
t176 = t118 * qJD(6) - t105;
t175 = 0.2e1 * t89;
t110 = t96 * t166 - t53 * t93;
t14 = t110 * qJD(6) - t93 * t127 - t34 * t96;
t170 = t14 * t93;
t169 = t14 * t96;
t50 = t180 * qJD(2);
t168 = t50 * t90;
t165 = t91 * t94;
t86 = t94 ^ 2;
t88 = t97 ^ 2;
t160 = t86 - t88;
t159 = t86 + t88;
t158 = qJ(3) * t95;
t154 = qJD(3) * t96;
t153 = qJD(3) * t98;
t152 = qJD(5) * t110;
t37 = t93 * t166 + t53 * t96;
t151 = qJD(5) * t37;
t149 = qJD(5) * t96;
t148 = qJD(5) * t97;
t147 = qJD(5) * t98;
t146 = qJD(6) * t93;
t82 = qJD(6) * t96;
t144 = qJD(6) * t97;
t142 = qJ(3) * qJD(2);
t141 = qJ(3) * qJD(3);
t139 = -0.2e1 * pkin(5) * qJD(6);
t137 = t93 * t165;
t136 = t96 * t165;
t48 = -t90 * pkin(2) + pkin(8) * t167 - t76;
t84 = t89 ^ 2;
t135 = t84 * t156;
t52 = t90 * t94 - t138;
t134 = qJD(5) * t52 * t93;
t133 = t52 * t149;
t132 = t94 * t149;
t131 = t96 * t148;
t130 = t93 * t144;
t128 = t96 * t144;
t126 = t93 * t82;
t125 = t94 * t148;
t123 = t160 * qJD(5);
t122 = t90 * qJ(4) - t48;
t121 = t140 * t98;
t120 = t95 * t135;
t119 = t93 * t132;
t117 = pkin(5) * t94 - pkin(10) * t97;
t115 = -pkin(2) * t98 - t158;
t11 = pkin(10) * t166 + t181;
t27 = (-pkin(3) - pkin(4)) * t167 + t122;
t15 = t52 * pkin(5) - t53 * pkin(10) + t27;
t8 = t11 * t96 + t15 * t93;
t113 = t28 * t97 - t30 * t94;
t111 = -t110 * t96 + t37 * t93;
t49 = pkin(8) * t127 - t68;
t10 = -pkin(5) * t166 - t113;
t4 = pkin(5) * t127 - t6;
t109 = t10 * t82 + t4 * t93;
t108 = t10 * t146 - t4 * t96;
t107 = t35 * t93 + t52 * t82;
t19 = t52 * t146 - t35 * t96;
t106 = -qJD(3) * t94 - t91 * t148;
t5 = -t28 * t148 + t30 * t150 - t97 * t20 - t94 * t25;
t104 = -t174 * t127 + t68;
t103 = -t94 * t147 - t97 * t157;
t102 = -t97 * t147 + t94 * t157;
t56 = -t130 - t132;
t100 = t117 * qJD(5) - t91 * t144;
t78 = t90 * qJD(4);
t26 = t78 + (t89 * t121 - t75) * qJD(2);
t99 = 0.2e1 * qJD(3);
t77 = 0.2e1 * t79;
t69 = t89 * t153;
t59 = t117 + t92;
t58 = t93 * t150 - t128;
t57 = t93 * t148 + t94 * t82;
t55 = t93 * t145 - t131;
t47 = (-pkin(1) + t115) * t89;
t45 = t103 * t89;
t44 = t102 * t89;
t43 = t49 - t79;
t42 = t59 * t93 + t136;
t41 = t59 * t96 - t137;
t40 = t67 + (-t98 * t142 - t155) * t89;
t38 = (t116 - t158) * t89;
t33 = -t78 + t182;
t32 = t79 + t104;
t31 = pkin(3) * t167 - t122;
t23 = (-t155 + (-qJD(4) - t142) * t98) * t89 + t162;
t17 = t179 * t96 + (-qJD(6) * t59 + t106) * t93;
t16 = -t91 * t131 - t94 * t154 - t179 * t93 - t59 * t82;
t13 = t37 * qJD(6) + t96 * t127 - t34 * t93;
t7 = -t11 * t93 + t15 * t96;
t2 = t93 * t5 + t96 * (t78 + t178) - t8 * qJD(6) + (-t96 * t75 + (t93 * pkin(10) * t95 + t96 * t121) * t89) * qJD(2);
t1 = t11 * t146 - t15 * t82 - t96 * (-pkin(10) * t127 - t5) - t93 * (t26 + t178);
t3 = [0, 0, 0, 0.2e1 * t120, 0.2e1 * (-t95 ^ 2 + t98 ^ 2) * t84 * qJD(2), 0.2e1 * t90 * t70, -0.2e1 * t90 * t127, 0, -0.2e1 * pkin(1) * t84 * t157 - 0.2e1 * t168, -0.2e1 * pkin(1) * t135 + 0.2e1 * t49 * t90 (-t43 * t98 + t50 * t95 + (t46 * t95 + t48 * t98) * qJD(2)) * t175, 0.2e1 * t168 + 0.2e1 * (-t47 * t157 + t40 * t98) * t89, -0.2e1 * t43 * t90 + 0.2e1 * (-t47 * t156 - t40 * t95) * t89, 0.2e1 * t40 * t47 + 0.2e1 * t43 * t46 + 0.2e1 * t48 * t50 (t32 * t98 + t33 * t95 + (t31 * t98 - t39 * t95) * qJD(2)) * t175, 0.2e1 * t32 * t90 + 0.2e1 * (-t38 * t156 - t23 * t95) * t89, -0.2e1 * t33 * t90 + 0.2e1 * (t38 * t157 - t23 * t98) * t89, 0.2e1 * t23 * t38 + 0.2e1 * t31 * t33 + 0.2e1 * t32 * t39, -0.2e1 * t53 * t34, 0.2e1 * t34 * t52 - 0.2e1 * t35 * t53 (-t53 * t157 - t34 * t98) * t175 (t52 * t157 - t35 * t98) * t175, -0.2e1 * t120, 0.2e1 * t26 * t52 + 0.2e1 * t27 * t35 + 0.2e1 * (-t113 * t157 + t6 * t98) * t89, 0.2e1 * t26 * t53 - 0.2e1 * t27 * t34 + 0.2e1 * (t157 * t181 + t5 * t98) * t89, 0.2e1 * t37 * t14, 0.2e1 * t110 * t14 - 0.2e1 * t13 * t37, 0.2e1 * t14 * t52 + 0.2e1 * t35 * t37, 0.2e1 * t110 * t35 - 0.2e1 * t13 * t52, 0.2e1 * t52 * t35, 0.2e1 * t10 * t13 - 0.2e1 * t110 * t4 + 0.2e1 * t2 * t52 + 0.2e1 * t35 * t7, 0.2e1 * t1 * t52 + 0.2e1 * t10 * t14 - 0.2e1 * t35 * t8 + 0.2e1 * t37 * t4; 0, 0, 0, 0, 0, t70, -t127, 0, -t50, t49, t115 * t89 * qJD(2) + t69, t50, -t49 + t77, -pkin(2) * t50 - qJ(3) * t43 - qJD(3) * t46, t69 + (-qJD(4) * t95 + (-t158 - t164) * qJD(2)) * t89, t77 + t104, 0.2e1 * t78 - t182, qJ(3) * t32 + qJD(3) * t39 - qJD(4) * t31 - t33 * t92, -t53 * t150 - t34 * t97, t34 * t94 - t97 * t35 + (t52 * t94 - t53 * t97) * qJD(5), t45, t44, 0, t27 * t148 + qJD(4) * t52 + t26 * t94 + t92 * t35 + (t103 * t91 + t98 * t143) * t89, -t27 * t150 + qJD(4) * t53 + t26 * t97 - t92 * t34 + (t102 * t91 - t94 * t153) * t89, t97 * t169 + t56 * t37, t111 * t150 + (-t13 * t96 - t170 + (-t110 * t93 - t37 * t96) * qJD(6)) * t97 (t14 - t133) * t94 + (-t19 + t151) * t97 (-t13 + t134) * t94 + (-t107 + t152) * t97, t52 * t148 + t35 * t94, t17 * t52 + t41 * t35 + (t2 + (-t10 * t93 - t110 * t91) * qJD(5)) * t94 + (qJD(3) * t110 + qJD(5) * t7 - t13 * t91 + t109) * t97, t16 * t52 - t42 * t35 + (t1 + (-t10 * t96 + t37 * t91) * qJD(5)) * t94 + (-qJD(3) * t37 - qJD(5) * t8 - t14 * t91 - t108) * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0.2e1 * t141, 0, t99, 0.2e1 * qJD(4), 0.2e1 * qJD(4) * t92 + 0.2e1 * t141, -0.2e1 * t125, 0.2e1 * t123, 0, 0, 0, 0.2e1 * qJD(4) * t94 + 0.2e1 * t92 * t148, 0.2e1 * qJD(4) * t97 - 0.2e1 * t92 * t150, -0.2e1 * t87 * t125 - 0.2e1 * t88 * t126, 0.4e1 * t97 * t119 + 0.2e1 * t88 * t124, -0.2e1 * t94 * t130 - 0.2e1 * t160 * t149, 0.2e1 * t123 * t93 - 0.2e1 * t128 * t94, 0.2e1 * t125, 0.2e1 * t17 * t94 + 0.2e1 * (-qJD(3) * t93 - t91 * t82) * t88 + 0.2e1 * (t41 + 0.2e1 * t137) * t148, 0.2e1 * t16 * t94 + 0.2e1 * (t91 * t146 - t154) * t88 + 0.2e1 * (-t42 + 0.2e1 * t136) * t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, 0, t50, t70, 0, 0, t33, 0, 0, 0, 0, 0, -t35, t34, 0, 0, 0, 0, 0, t19, t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4), 0, 0, 0, 0, 0, -t148, t150, 0, 0, 0, 0, 0, t55, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, 0, 0, t32, 0, 0, 0, 0, 0, t45, t44, 0, 0, 0, 0, 0 (-t13 - t134) * t97 + (-t107 - t152) * t94 (-t14 - t133) * t97 + (t19 + t151) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 * t82, t159 * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t35, -t127, t6, t5, t37 * t82 + t170, -t111 * qJD(6) - t93 * t13 + t169, t107, -t19, 0, -pkin(5) * t13 - pkin(10) * t107 + t108, -pkin(5) * t14 + pkin(10) * t19 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, -t148, 0, t105, t106, -t97 * t124 - t119, -0.4e1 * t97 * t126 + t161 * t150, t57, -t55, 0, t100 * t93 - t176 * t96, t100 * t96 + t176 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, -t148, 0, 0, 0, 0, 0, t56, t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t126, -0.2e1 * t124, 0, 0, 0, t93 * t139, t96 * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t13, t35, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, t148, t17, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t146, 0, -pkin(10) * t82, pkin(10) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
