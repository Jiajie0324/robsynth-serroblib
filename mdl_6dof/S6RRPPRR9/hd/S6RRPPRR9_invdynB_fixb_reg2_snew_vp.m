% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 11:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:36:04
% EndTime: 2019-05-06 11:36:44
% DurationCPUTime: 26.95s
% Computational Cost: add. (86791->769), mult. (205093->1148), div. (0->0), fcn. (141446->10), ass. (0->549)
t1026 = -2 * qJD(4);
t847 = cos(pkin(6));
t836 = qJDD(1) * t847 + qJDD(2);
t854 = cos(qJ(2));
t856 = qJD(1) ^ 2;
t951 = t854 * t856;
t846 = sin(pkin(6));
t843 = t846 ^ 2;
t850 = sin(qJ(2));
t973 = t843 * t850;
t927 = t951 * t973;
t794 = t836 + t927;
t944 = qJDD(1) * t850;
t947 = qJD(1) * t854;
t796 = (qJD(2) * t947 + t944) * t846;
t837 = t847 * qJD(1) + qJD(2);
t997 = pkin(2) * t854;
t921 = -qJ(3) * t850 - t997;
t949 = qJD(1) * t846;
t793 = t921 * t949;
t833 = t837 ^ 2;
t851 = sin(qJ(1));
t855 = cos(qJ(1));
t827 = g(1) * t851 - t855 * g(2);
t995 = pkin(8) * t846;
t791 = qJDD(1) * pkin(1) + t856 * t995 + t827;
t828 = g(1) * t855 + g(2) * t851;
t792 = -pkin(1) * t856 + qJDD(1) * t995 - t828;
t958 = t847 * t854;
t931 = -t791 * t958 + t850 * t792;
t948 = qJD(1) * t850;
t860 = -t836 * pkin(2) - t833 * qJ(3) + t846 * (g(3) * t854 + t793 * t948) + qJDD(3) + t931;
t936 = t846 * t947;
t925 = t837 * t936;
t600 = t860 + t837 * t1026 - qJ(4) * t794 + (t796 - t925) * pkin(3);
t844 = t850 ^ 2;
t972 = t843 * t856;
t834 = t844 * t972;
t883 = pkin(4) * t936 - pkin(9) * t837;
t565 = t796 * pkin(4) + pkin(9) * t834 - t837 * t883 + t600;
t845 = t854 ^ 2;
t835 = t845 * t972;
t1005 = -t835 - t833;
t979 = t794 * t850;
t722 = t1005 * t854 - t979;
t1024 = pkin(8) * t722;
t770 = -t834 - t833;
t795 = t836 - t927;
t781 = t854 * t795;
t1031 = t770 * t850 + t781;
t1036 = pkin(8) * t1031;
t1016 = t722 * t851;
t1015 = t722 * t855;
t1035 = t1031 * t851;
t1034 = t1031 * t855;
t965 = t846 * t854;
t966 = t846 * t850;
t1033 = -t770 * t965 + t795 * t966;
t959 = t847 * t850;
t1032 = -t770 * t958 + t795 * t959;
t937 = t846 * t948;
t829 = qJD(2) * t937;
t943 = qJDD(1) * t854;
t797 = t846 * t943 - t829;
t809 = t837 * t937;
t748 = t797 + t809;
t800 = t835 - t833;
t890 = t800 * t850 + t781;
t687 = -t846 * t748 + t847 * t890;
t977 = t795 * t850;
t733 = -t800 * t854 + t977;
t626 = t687 * t851 + t733 * t855;
t1030 = t687 * t855 - t733 * t851;
t749 = (t944 + (qJD(2) - t837) * t947) * t846;
t799 = t834 - t833;
t892 = -t799 * t854 + t979;
t684 = -t846 * t749 + t847 * t892;
t978 = t794 * t854;
t729 = t799 * t850 + t978;
t1029 = t684 * t851 - t729 * t855;
t619 = t684 * t855 + t729 * t851;
t804 = t835 - t834;
t751 = (t944 + (qJD(2) + t837) * t947) * t846;
t752 = t797 - t809;
t984 = t752 * t850;
t894 = t751 * t854 + t984;
t658 = t846 * t804 + t847 * t894;
t983 = t752 * t854;
t697 = t751 * t850 - t983;
t1028 = t658 * t851 + t697 * t855;
t595 = t658 * t855 - t697 * t851;
t1027 = qJ(3) * t795 + (-t770 - t833) * pkin(2);
t1025 = pkin(2) * t752;
t750 = t796 + t925;
t1023 = qJ(3) * t750;
t1014 = qJ(3) * t1005;
t849 = sin(qJ(5));
t853 = cos(qJ(5));
t777 = t837 * t849 - t853 * t937;
t779 = t837 * t853 + t849 * t937;
t727 = t779 * t777;
t787 = qJDD(5) + t797;
t1006 = -t727 + t787;
t1013 = t1006 * t849;
t1012 = t1006 * t853;
t820 = qJD(5) + t936;
t848 = sin(qJ(6));
t852 = cos(qJ(6));
t739 = t779 * t848 - t852 * t820;
t741 = t779 * t852 + t820 * t848;
t692 = t741 * t739;
t930 = -t853 * t796 + t849 * t836;
t710 = -qJD(5) * t779 - t930;
t870 = qJDD(6) - t710;
t1007 = -t692 + t870;
t1011 = t1007 * t848;
t1010 = t1007 * t852;
t1009 = t1005 * t966 + t794 * t965;
t1008 = t1005 * t959 + t794 * t958;
t961 = t847 * t752;
t711 = -qJD(5) * t777 + t796 * t849 + t836 * t853;
t635 = -t739 * qJD(6) + t852 * t711 + t848 * t787;
t772 = qJD(6) + t777;
t707 = t772 * t739;
t586 = -t707 + t635;
t754 = t820 * t777;
t675 = t711 - t754;
t790 = pkin(3) * t937 - qJ(4) * t837;
t757 = t847 * g(3) + t846 * t791;
t866 = t1023 + t757 + t1025;
t1004 = -pkin(3) * t835 - t797 * qJ(4) + t1026 * t936 - t790 * t937 - t866;
t933 = t848 * t711 - t852 * t787;
t583 = (qJD(6) - t772) * t741 + t933;
t1002 = t847 * t748 + t846 * t890;
t679 = t847 * t749 + t846 * t892;
t656 = -t847 * t804 + t846 * t894;
t737 = t739 ^ 2;
t738 = t741 ^ 2;
t769 = t772 ^ 2;
t775 = t777 ^ 2;
t776 = t779 ^ 2;
t1000 = t820 ^ 2;
t999 = pkin(3) + pkin(4);
t998 = pkin(2) * t850;
t803 = -t834 - t835;
t895 = t748 * t850 - t749 * t854;
t657 = -t846 * t803 + t847 * t895;
t695 = t748 * t854 + t749 * t850;
t594 = t657 * t855 + t695 * t851;
t996 = pkin(7) * t594;
t994 = pkin(8) * t847;
t992 = t833 * pkin(2);
t991 = pkin(2) + qJ(4);
t990 = pkin(9) - qJ(3);
t989 = qJ(3) * t803;
t617 = t692 + t870;
t988 = t617 * t848;
t987 = t617 * t852;
t705 = t727 + t787;
t986 = t705 * t849;
t985 = t705 * t853;
t981 = t772 * t848;
t980 = t772 * t852;
t976 = t820 * t849;
t975 = t820 * t853;
t974 = t836 * t846;
t969 = t846 * t750;
t968 = t846 * t752;
t962 = t847 * t750;
t924 = qJD(3) * t937;
t824 = -0.2e1 * t924;
t599 = t824 + t1004;
t557 = -pkin(4) * t834 + t796 * pkin(9) - t883 * t936 + t599;
t719 = -g(3) * t966 + t791 * t959 + t854 * t792;
t888 = t836 * qJ(3) + 0.2e1 * qJD(3) * t837 + t793 * t936 + t719;
t864 = t837 * t790 + qJDD(4) + t888;
t862 = t797 * pkin(3) + t864;
t601 = -qJ(4) * t835 + t862 - t992;
t858 = pkin(4) * t748 - pkin(9) * t795 + t601;
t503 = t849 * t557 - t853 * t858;
t725 = pkin(5) * t777 - pkin(10) * t779;
t479 = -t787 * pkin(5) - pkin(10) * t1000 + t725 * t779 + t503;
t957 = t848 * t479;
t956 = t849 * t565;
t955 = t850 * t757;
t954 = t852 * t479;
t953 = t853 * t565;
t952 = t854 * t757;
t504 = t853 * t557 + t849 * t858;
t480 = -pkin(5) * t1000 + pkin(10) * t787 - t725 * t777 + t504;
t516 = -t675 * pkin(10) + (t779 * t820 - t710) * pkin(5) - t565;
t445 = t852 * t480 + t848 * t516;
t950 = pkin(1) * t657 + t695 * t995;
t700 = -pkin(2) * t749 + qJ(3) * t748;
t942 = t849 * t692;
t941 = t853 * t692;
t940 = t850 * t727;
t939 = t854 * t727;
t938 = t837 * t949;
t935 = (-t803 - t833) * pkin(2);
t655 = t847 * t803 + t846 * t895;
t934 = -pkin(1) * t655 + t695 * t994;
t444 = t480 * t848 - t852 * t516;
t422 = t848 * t444 + t852 * t445;
t449 = t849 * t503 + t853 * t504;
t762 = -t827 * t851 - t855 * t828;
t928 = -pkin(5) * t853 - t999;
t926 = pkin(5) * t849 + t991;
t816 = qJDD(1) * t855 - t851 * t856;
t922 = -pkin(7) * t816 - g(3) * t851;
t920 = -t955 - t1036;
t919 = t952 + t1024;
t409 = t422 * t849 - t479 * t853;
t421 = -t444 * t852 + t445 * t848;
t918 = t409 * t850 + t421 * t854;
t448 = -t853 * t503 + t849 * t504;
t917 = t448 * t850 - t565 * t854;
t587 = -t707 - t635;
t520 = -t583 * t852 - t587 * t848;
t636 = t737 + t738;
t489 = t520 * t849 + t636 * t853;
t518 = -t583 * t848 + t587 * t852;
t916 = t489 * t850 + t518 * t854;
t584 = (-qJD(6) - t772) * t741 - t933;
t519 = t584 * t852 - t586 * t848;
t691 = -t738 + t737;
t496 = t519 * t849 + t691 * t853;
t517 = t584 * t848 + t586 * t852;
t915 = t496 * t850 + t517 * t854;
t648 = -t769 - t737;
t549 = t648 * t852 - t1011;
t505 = t549 * t849 + t584 * t853;
t548 = t648 * t848 + t1010;
t914 = t505 * t850 + t548 * t854;
t678 = -t738 - t769;
t554 = -t678 * t848 - t987;
t508 = t554 * t849 - t586 * t853;
t553 = t678 * t852 - t988;
t913 = t508 * t850 + t553 * t854;
t703 = -t738 + t769;
t573 = -t703 * t848 + t1010;
t512 = t573 * t849 + t587 * t853;
t571 = t703 * t852 + t1011;
t912 = t512 * t850 + t571 * t854;
t702 = t737 - t769;
t574 = t702 * t852 - t988;
t513 = t574 * t849 + t583 * t853;
t572 = t702 * t848 + t987;
t911 = t513 * t850 + t572 * t854;
t634 = -qJD(6) * t741 - t933;
t580 = -t634 * t848 + t739 * t980;
t537 = t580 * t849 + t941;
t579 = t634 * t852 + t739 * t981;
t910 = t537 * t850 + t579 * t854;
t582 = t635 * t852 - t741 * t981;
t538 = t582 * t849 - t941;
t581 = t635 * t848 + t741 * t980;
t909 = t538 * t850 + t581 * t854;
t552 = (-t803 - t835) * qJ(4) + (t748 + t797) * pkin(3) + t935 + t864;
t566 = pkin(3) * t749 + t600 - t989;
t908 = t552 * t854 + t566 * t850;
t630 = (-t739 * t852 + t741 * t848) * t772;
t577 = t630 * t849 - t853 * t870;
t629 = (-t739 * t848 - t741 * t852) * t772;
t907 = t577 * t850 + t629 * t854;
t672 = (qJD(5) + t820) * t779 + t930;
t589 = -t672 * t849 + t675 * t853;
t726 = t776 - t775;
t906 = t589 * t850 + t726 * t854;
t676 = t711 + t754;
t869 = (-qJD(5) + t820) * t779 - t930;
t590 = -t676 * t853 + t849 * t869;
t701 = -t775 - t776;
t905 = t590 * t850 + t701 * t854;
t904 = -t600 * t854 + t601 * t850;
t716 = -t1000 - t775;
t631 = t716 * t849 + t1012;
t903 = t631 * t850 + t672 * t854;
t633 = t935 + t888;
t637 = t860 - t989;
t902 = t633 * t854 + t637 * t850;
t728 = -t776 - t1000;
t639 = t728 * t853 - t986;
t901 = t639 * t850 + t675 * t854;
t641 = t888 - t992;
t900 = t641 * t850 - t854 * t860;
t747 = -t776 + t1000;
t644 = t747 * t853 + t1013;
t899 = t644 * t850 + t676 * t854;
t746 = t775 - t1000;
t645 = t746 * t849 + t985;
t898 = t645 * t850 + t854 * t869;
t698 = (-t777 * t849 - t779 * t853) * t820;
t897 = t698 * t850 + t787 * t854;
t718 = g(3) * t965 + t931;
t896 = -t854 * t718 + t850 * t719;
t638 = t718 * t850 + t719 * t854;
t893 = t770 * t854 - t977;
t891 = -t1005 * t850 - t978;
t761 = t827 * t855 - t828 * t851;
t889 = qJD(1) * t837 - t847 * t856;
t661 = t710 * t853 + t777 * t976;
t886 = t661 * t850 - t939;
t663 = t711 * t849 + t779 * t975;
t885 = t663 * t850 + t939;
t884 = (-t655 * t846 - t657 * t847) * pkin(8);
t410 = t422 * t853 + t479 * t849;
t379 = t990 * t410 + (-pkin(10) * t849 + t928) * t421;
t380 = -pkin(5) * t479 + pkin(10) * t422 + t409 * t999 - t410 * t991;
t395 = t409 * t854 - t421 * t850;
t881 = pkin(8) * t395 + t379 * t850 + t380 * t854;
t412 = -pkin(10) * t518 - t421;
t490 = t520 * t853 - t636 * t849;
t393 = t849 * t412 + t490 * t990 + t518 * t928;
t394 = pkin(5) * t636 + pkin(10) * t520 + t489 * t999 - t490 * t991 + t422;
t451 = t489 * t854 - t518 * t850;
t880 = pkin(8) * t451 + t393 * t850 + t394 * t854;
t397 = t448 * t999 - t449 * t991;
t416 = t449 * t990 + t565 * t999;
t437 = t448 * t854 + t565 * t850;
t879 = pkin(8) * t437 + t397 * t854 + t416 * t850;
t433 = -pkin(5) * t548 + t444;
t455 = -pkin(10) * t548 + t957;
t506 = t549 * t853 - t584 * t849;
t399 = t853 * t433 + t849 * t455 + t506 * t990 - t548 * t999;
t406 = pkin(5) * t584 + pkin(10) * t549 + t505 * t999 - t506 * t991 - t954;
t464 = t505 * t854 - t548 * t850;
t878 = pkin(8) * t464 + t399 * t850 + t406 * t854;
t434 = -pkin(5) * t553 + t445;
t456 = -pkin(10) * t553 + t954;
t509 = t554 * t853 + t586 * t849;
t401 = t853 * t434 + t849 * t456 + t509 * t990 - t553 * t999;
t408 = -pkin(5) * t586 + pkin(10) * t554 + t508 * t999 - t509 * t991 + t957;
t467 = t508 * t854 - t553 * t850;
t877 = pkin(8) * t467 + t401 * t850 + t408 * t854;
t592 = t676 * t849 + t853 * t869;
t429 = t592 * t990 - t701 * t999 + t449;
t460 = t590 * t999 - t592 * t991;
t545 = t590 * t854 - t701 * t850;
t876 = pkin(8) * t545 + t429 * t850 + t460 * t854;
t632 = t716 * t853 - t1013;
t446 = t631 * t999 - t632 * t991 - t503;
t469 = t632 * t990 - t672 * t999 + t953;
t563 = t631 * t854 - t672 * t850;
t875 = pkin(8) * t563 + t446 * t854 + t469 * t850;
t640 = -t728 * t849 - t985;
t447 = t639 * t999 - t640 * t991 - t504;
t471 = t640 * t990 - t675 * t999 - t956;
t569 = t639 * t854 - t675 * t850;
t874 = pkin(8) * t569 + t447 * t854 + t471 * t850;
t487 = pkin(3) * t601 - t599 * t991;
t525 = pkin(3) * t600 - qJ(3) * t599;
t526 = t600 * t850 + t601 * t854;
t873 = pkin(8) * t526 + t487 * t854 + t525 * t850;
t753 = t829 + (t837 * t948 - t943) * t846;
t823 = 0.2e1 * t924;
t861 = t823 - t1004;
t544 = pkin(3) * t1005 - t753 * t991 + t861;
t717 = -pkin(3) * t794 - qJ(3) * t753;
t872 = t544 * t854 + t717 * t850 + t1024;
t559 = pkin(3) * t770 + qJ(3) * t751 + t861;
t671 = pkin(3) * t795 + t751 * t991;
t871 = t559 * t850 + t671 * t854 + t1036;
t613 = t823 + t866 + t1023;
t868 = t613 * t850 + t750 * t997 + t1036;
t642 = t824 - t866;
t614 = t642 - t1025;
t867 = -qJ(3) * t984 + t614 * t854 - t1024;
t567 = t641 * t854 + t850 * t860;
t865 = pkin(8) * t567 + t642 * t921;
t842 = t846 * t843;
t815 = qJDD(1) * t851 + t855 * t856;
t814 = t847 * t836;
t798 = -pkin(7) * t815 + g(3) * t855;
t756 = (t844 + t845) * t938;
t743 = t796 * t854 - t844 * t938;
t742 = -t797 * t850 - t845 * t938;
t724 = t756 * t855 + t851 * t974;
t723 = t756 * t851 - t855 * t974;
t715 = (t842 * t951 + t962) * t850;
t714 = (t843 * t854 * t889 + t796 * t846) * t850;
t713 = (t797 * t846 - t889 * t973) * t854;
t712 = (-t842 * t850 * t856 + t961) * t854;
t699 = (-t777 * t853 + t779 * t849) * t820;
t690 = t847 * t891 - t968;
t689 = t1008 + t968;
t685 = t751 * t846 + t1032;
t683 = t846 * t891 + t961;
t682 = t1009 - t961;
t680 = -t751 * t847 + t1033;
t670 = -t753 * t846 + t1008;
t669 = t847 * t893 - t969;
t668 = t1032 + t969;
t667 = t753 * t847 + t1009;
t666 = t846 * t893 + t962;
t665 = t1033 - t962;
t664 = t711 * t853 - t779 * t976;
t662 = -t710 * t849 + t777 * t975;
t660 = t698 * t854 - t787 * t850;
t654 = -t715 * t851 + t743 * t855;
t653 = -t712 * t851 + t742 * t855;
t652 = t715 * t855 + t743 * t851;
t651 = t712 * t855 + t742 * t851;
t647 = t746 * t853 - t986;
t646 = -t747 * t849 + t1012;
t643 = -qJ(4) * t749 + t700;
t628 = -t690 * t851 - t1015;
t627 = -t689 * t851 + t1015;
t625 = -t685 * t851 + t1034;
t623 = t690 * t855 - t1016;
t622 = t689 * t855 + t1016;
t620 = t685 * t855 + t1035;
t615 = -pkin(2) * t794 - t1014 + t860;
t612 = t663 * t854 - t940;
t611 = t661 * t854 + t940;
t610 = -t670 * t851 + t1015;
t609 = -t669 * t851 - t1034;
t608 = -t668 * t851 + t1034;
t607 = t670 * t855 + t1016;
t606 = t669 * t855 - t1035;
t605 = t668 * t855 + t1035;
t604 = t846 * t757 + t847 * t896;
t603 = -t847 * t757 + t846 * t896;
t602 = t888 + t1027;
t598 = -t846 * t699 + t847 * t897;
t596 = -t657 * t851 + t695 * t855;
t593 = pkin(7) * t596;
t591 = -t672 * t853 - t675 * t849;
t578 = t630 * t853 + t849 * t870;
t576 = t645 * t854 - t850 * t869;
t575 = t644 * t854 - t676 * t850;
t570 = -t955 + (-t682 * t846 - t689 * t847) * pkin(8);
t568 = -pkin(2) * t860 + qJ(3) * t641;
t564 = (-t770 - t835) * qJ(4) + t862 + t1027;
t560 = -t952 + (-t666 * t846 - t669 * t847) * pkin(8);
t558 = -pkin(1) * t682 + t846 * t718 + t847 * t919;
t555 = t794 * t991 + t1014 - t600;
t551 = t589 * t854 - t726 * t850;
t550 = -pkin(1) * t666 + t846 * t719 + t847 * t920;
t547 = -t846 * t664 + t847 * t885;
t546 = -t846 * t662 + t847 * t886;
t543 = -pkin(1) * t603 + t638 * t994;
t542 = -t604 * t851 + t638 * t855;
t541 = t604 * t855 + t638 * t851;
t540 = t582 * t853 + t942;
t539 = t580 * t853 - t942;
t536 = t638 * t847 + t934;
t535 = -t846 * t647 + t847 * t898;
t534 = -t846 * t646 + t847 * t899;
t533 = (-t603 * t846 - t604 * t847) * pkin(8);
t532 = t884 - t896;
t531 = -t846 * t642 + t847 * t900;
t530 = t847 * t642 + t846 * t900;
t529 = -t846 * t640 + t847 * t901;
t528 = t847 * t640 + t846 * t901;
t527 = t577 * t854 - t629 * t850;
t524 = -t846 * t632 + t847 * t903;
t523 = t847 * t632 + t846 * t903;
t522 = -qJ(3) * t983 - t850 * t614 + (-t683 * t846 - t690 * t847) * pkin(8);
t521 = -t750 * t998 + t854 * t613 + (-t665 * t846 - t668 * t847) * pkin(8);
t515 = t574 * t853 - t583 * t849;
t514 = t573 * t853 - t587 * t849;
t507 = -t846 * t591 + t847 * t906;
t502 = -t846 * t592 + t847 * t905;
t501 = t847 * t592 + t846 * t905;
t499 = -t850 * t633 + t854 * t637 + t884;
t498 = -pkin(1) * t683 - t846 * t615 + t847 * t867;
t497 = t519 * t853 - t691 * t849;
t495 = t538 * t854 - t581 * t850;
t494 = t537 * t854 - t579 * t850;
t493 = -pkin(1) * t665 - t846 * t602 + t847 * t868;
t492 = t854 * t559 - t850 * t671 + (-t680 * t846 - t685 * t847) * pkin(8);
t491 = qJ(3) * t601 - t600 * t991;
t488 = -t846 * t700 + t847 * t902 + t934;
t486 = -t846 * t599 + t847 * t904;
t485 = t847 * t599 + t846 * t904;
t484 = -t850 * t544 + t854 * t717 + (-t667 * t846 - t670 * t847) * pkin(8);
t483 = -t846 * t578 + t847 * t907;
t482 = -t529 * t851 + t569 * t855;
t481 = t529 * t855 + t569 * t851;
t478 = -t531 * t851 + t567 * t855;
t477 = t531 * t855 + t567 * t851;
t475 = -t524 * t851 + t563 * t855;
t474 = t524 * t855 + t563 * t851;
t473 = t513 * t854 - t572 * t850;
t472 = t512 * t854 - t571 * t850;
t470 = -t639 * t990 + t675 * t991 - t953;
t468 = -t631 * t990 + t672 * t991 - t956;
t466 = -t850 * t552 + t854 * t566 + t884;
t465 = -pkin(1) * t680 - t846 * t564 + t847 * t871;
t463 = -pkin(1) * t667 - t846 * t555 + t847 * t872;
t462 = -t502 * t851 + t545 * t855;
t461 = t502 * t855 + t545 * t851;
t459 = -t846 * t643 + t847 * t908 + t934;
t458 = -t846 * t540 + t847 * t909;
t457 = -t846 * t539 + t847 * t910;
t454 = t496 * t854 - t517 * t850;
t453 = -t486 * t851 + t526 * t855;
t452 = t486 * t855 + t526 * t851;
t450 = (-qJ(3) * t854 + t998) * t642 + (-t530 * t846 - t531 * t847) * pkin(8);
t442 = -pkin(1) * t530 - t846 * t568 + t847 * t865;
t441 = -t846 * t515 + t847 * t911;
t440 = -t846 * t514 + t847 * t912;
t439 = -t846 * t509 + t847 * t913;
t438 = t847 * t509 + t846 * t913;
t436 = -t846 * t506 + t847 * t914;
t435 = t847 * t506 + t846 * t914;
t432 = -t846 * t497 + t847 * t915;
t431 = -t846 * t490 + t847 * t916;
t430 = t847 * t490 + t846 * t916;
t428 = -t590 * t990 + t701 * t991 - t448;
t427 = -t439 * t851 + t467 * t855;
t426 = t439 * t855 + t467 * t851;
t425 = -t436 * t851 + t464 * t855;
t424 = t436 * t855 + t464 * t851;
t423 = -t850 * t487 + t854 * t525 + (-t485 * t846 - t486 * t847) * pkin(8);
t420 = -t846 * t449 + t847 * t917;
t419 = t847 * t449 + t846 * t917;
t418 = -pkin(1) * t485 - t846 * t491 + t847 * t873;
t417 = -t850 * t447 + t854 * t471 + (-t528 * t846 - t529 * t847) * pkin(8);
t415 = -t448 * t990 - t565 * t991;
t414 = -t431 * t851 + t451 * t855;
t413 = t431 * t855 + t451 * t851;
t411 = -t850 * t446 + t854 * t469 + (-t523 * t846 - t524 * t847) * pkin(8);
t407 = -pkin(1) * t528 - t846 * t470 + t847 * t874;
t405 = -pkin(1) * t523 - t846 * t468 + t847 * t875;
t404 = t854 * t429 - t850 * t460 + (-t501 * t846 - t502 * t847) * pkin(8);
t403 = -t420 * t851 + t437 * t855;
t402 = t420 * t855 + t437 * t851;
t400 = -t849 * t434 + t853 * t456 - t508 * t990 + t553 * t991;
t398 = -t849 * t433 + t853 * t455 - t505 * t990 + t548 * t991;
t396 = -pkin(1) * t501 - t846 * t428 + t847 * t876;
t392 = t853 * t412 - t489 * t990 + t518 * t926;
t391 = -t846 * t410 + t847 * t918;
t390 = t847 * t410 + t846 * t918;
t389 = t854 * t401 - t850 * t408 + (-t438 * t846 - t439 * t847) * pkin(8);
t388 = t854 * t399 - t850 * t406 + (-t435 * t846 - t436 * t847) * pkin(8);
t387 = -t850 * t397 + t854 * t416 + (-t419 * t846 - t420 * t847) * pkin(8);
t386 = -pkin(1) * t438 - t846 * t400 + t847 * t877;
t385 = -t391 * t851 + t395 * t855;
t384 = t391 * t855 + t395 * t851;
t383 = -pkin(1) * t419 - t846 * t415 + t847 * t879;
t382 = -pkin(1) * t435 - t846 * t398 + t847 * t878;
t381 = t854 * t393 - t850 * t394 + (-t430 * t846 - t431 * t847) * pkin(8);
t378 = -t990 * t409 + (-pkin(10) * t853 + t926) * t421;
t377 = -pkin(1) * t430 - t846 * t392 + t847 * t880;
t376 = t854 * t379 - t850 * t380 + (-t390 * t846 - t391 * t847) * pkin(8);
t375 = -pkin(1) * t390 - t846 * t378 + t847 * t881;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t815, -t816, 0, t762, 0, 0, 0, 0, 0, 0, t627, t609, t596, t542, 0, 0, 0, 0, 0, 0, t596, t628, t608, t478, 0, 0, 0, 0, 0, 0, t596, t625, t610, t453, 0, 0, 0, 0, 0, 0, t475, t482, t462, t403, 0, 0, 0, 0, 0, 0, t425, t427, t414, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t816, -t815, 0, t761, 0, 0, 0, 0, 0, 0, t622, t606, t594, t541, 0, 0, 0, 0, 0, 0, t594, t623, t605, t477, 0, 0, 0, 0, 0, 0, t594, t620, t607, t452, 0, 0, 0, 0, 0, 0, t474, t481, t461, t402, 0, 0, 0, 0, 0, 0, t424, t426, t413, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t682, t666, t655, t603, 0, 0, 0, 0, 0, 0, t655, t683, t665, t530, 0, 0, 0, 0, 0, 0, t655, t680, t667, t485, 0, 0, 0, 0, 0, 0, t523, t528, t501, t419, 0, 0, 0, 0, 0, 0, t435, t438, t430, t390; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t816, 0, -t815, 0, t922, -t798, -t761, -pkin(7) * t761, t654, -t1028, -t1029, t653, -t626, t724, -pkin(7) * t622 - t558 * t851 + t570 * t855, -pkin(7) * t606 - t550 * t851 + t560 * t855, t532 * t855 - t536 * t851 - t996, -pkin(7) * t541 + t533 * t855 - t543 * t851, t724, t1029, t626, t654, -t1028, t653, -t488 * t851 + t499 * t855 - t996, -pkin(7) * t623 - t498 * t851 + t522 * t855, -pkin(7) * t605 - t493 * t851 + t521 * t855, -pkin(7) * t477 - t442 * t851 + t450 * t855, t724, t626, -t1029, t653, t1028, t654, -t459 * t851 + t466 * t855 - t996, -pkin(7) * t620 - t465 * t851 + t492 * t855, -pkin(7) * t607 - t463 * t851 + t484 * t855, -pkin(7) * t452 - t418 * t851 + t423 * t855, -t547 * t851 + t612 * t855, -t507 * t851 + t551 * t855, -t534 * t851 + t575 * t855, -t546 * t851 + t611 * t855, -t535 * t851 + t576 * t855, -t598 * t851 + t660 * t855, -pkin(7) * t474 - t405 * t851 + t411 * t855, -pkin(7) * t481 - t407 * t851 + t417 * t855, -pkin(7) * t461 - t396 * t851 + t404 * t855, -pkin(7) * t402 - t383 * t851 + t387 * t855, -t458 * t851 + t495 * t855, -t432 * t851 + t454 * t855, -t440 * t851 + t472 * t855, -t457 * t851 + t494 * t855, -t441 * t851 + t473 * t855, -t483 * t851 + t527 * t855, -pkin(7) * t424 - t382 * t851 + t388 * t855, -pkin(7) * t426 - t386 * t851 + t389 * t855, -pkin(7) * t413 - t377 * t851 + t381 * t855, -pkin(7) * t384 - t375 * t851 + t376 * t855; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t815, 0, t816, 0, t798, t922, t762, pkin(7) * t762, t652, t595, t619, t651, t1030, t723, pkin(7) * t627 + t558 * t855 + t570 * t851, pkin(7) * t609 + t550 * t855 + t560 * t851, t532 * t851 + t536 * t855 + t593, pkin(7) * t542 + t533 * t851 + t543 * t855, t723, -t619, -t1030, t652, t595, t651, t488 * t855 + t499 * t851 + t593, pkin(7) * t628 + t498 * t855 + t522 * t851, pkin(7) * t608 + t493 * t855 + t521 * t851, pkin(7) * t478 + t442 * t855 + t450 * t851, t723, -t1030, t619, t651, -t595, t652, t459 * t855 + t466 * t851 + t593, pkin(7) * t625 + t465 * t855 + t492 * t851, pkin(7) * t610 + t463 * t855 + t484 * t851, pkin(7) * t453 + t418 * t855 + t423 * t851, t547 * t855 + t612 * t851, t507 * t855 + t551 * t851, t534 * t855 + t575 * t851, t546 * t855 + t611 * t851, t535 * t855 + t576 * t851, t598 * t855 + t660 * t851, pkin(7) * t475 + t405 * t855 + t411 * t851, pkin(7) * t482 + t407 * t855 + t417 * t851, pkin(7) * t462 + t396 * t855 + t404 * t851, pkin(7) * t403 + t383 * t855 + t387 * t851, t458 * t855 + t495 * t851, t432 * t855 + t454 * t851, t440 * t855 + t472 * t851, t457 * t855 + t494 * t851, t441 * t855 + t473 * t851, t483 * t855 + t527 * t851, pkin(7) * t425 + t382 * t855 + t388 * t851, pkin(7) * t427 + t386 * t855 + t389 * t851, pkin(7) * t414 + t377 * t855 + t381 * t851, pkin(7) * t385 + t375 * t855 + t376 * t851; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t827, t828, 0, 0, t714, t656, t679, t713, t1002, t814, pkin(1) * t689 - t847 * t718 + t846 * t919, pkin(1) * t669 - t847 * t719 + t846 * t920, t638 * t846 + t950, pkin(1) * t604 + t638 * t995, t814, -t679, -t1002, t714, t656, t713, t847 * t700 + t846 * t902 + t950, pkin(1) * t690 + t847 * t615 + t846 * t867, pkin(1) * t668 + t847 * t602 + t846 * t868, pkin(1) * t531 + t847 * t568 + t846 * t865, t814, -t1002, t679, t713, -t656, t714, t847 * t643 + t846 * t908 + t950, pkin(1) * t685 + t847 * t564 + t846 * t871, pkin(1) * t670 + t847 * t555 + t846 * t872, pkin(1) * t486 + t847 * t491 + t846 * t873, t847 * t664 + t846 * t885, t847 * t591 + t846 * t906, t847 * t646 + t846 * t899, t847 * t662 + t846 * t886, t847 * t647 + t846 * t898, t847 * t699 + t846 * t897, pkin(1) * t524 + t847 * t468 + t846 * t875, pkin(1) * t529 + t847 * t470 + t846 * t874, pkin(1) * t502 + t847 * t428 + t846 * t876, pkin(1) * t420 + t847 * t415 + t846 * t879, t847 * t540 + t846 * t909, t847 * t497 + t846 * t915, t847 * t514 + t846 * t912, t847 * t539 + t846 * t910, t847 * t515 + t846 * t911, t847 * t578 + t846 * t907, pkin(1) * t436 + t847 * t398 + t846 * t878, pkin(1) * t439 + t847 * t400 + t846 * t877, pkin(1) * t431 + t847 * t392 + t846 * t880, pkin(1) * t391 + t847 * t378 + t846 * t881;];
tauB_reg  = t1;
