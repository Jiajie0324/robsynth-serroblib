% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:08:50
% EndTime: 2019-03-09 18:09:00
% DurationCPUTime: 5.24s
% Computational Cost: add. (13329->367), mult. (28605->629), div. (0->0), fcn. (28997->10), ass. (0->209)
t150 = sin(pkin(11));
t153 = sin(qJ(2));
t155 = cos(qJ(2));
t277 = sin(qJ(3));
t222 = t277 * qJD(3);
t184 = t277 * qJD(2) + t222;
t279 = cos(qJ(3));
t225 = t279 * qJD(3);
t287 = -t279 * qJD(2) - t225;
t103 = t153 * t184 + t287 * t155;
t187 = t279 * t153 + t277 * t155;
t281 = -pkin(8) - pkin(7);
t289 = t281 * t277;
t131 = t153 * t289;
t234 = t279 * t155;
t106 = -t281 * t234 + t131;
t211 = t279 * t281;
t74 = -t106 * qJD(3) + (t155 * t211 - t131) * qJD(2);
t163 = t103 * qJ(4) - qJD(4) * t187 + t74;
t182 = t187 * qJD(3);
t167 = -qJD(2) * t187 - t182;
t186 = t277 * t153 - t234;
t260 = cos(pkin(11));
t195 = qJD(3) * t289;
t197 = t153 * t211;
t246 = t155 * qJD(2);
t236 = t289 * t246 + (qJD(2) + qJD(3)) * t197;
t73 = -t155 * t195 - t236;
t157 = t260 * (qJ(4) * t167 - qJD(4) * t186 - t73) + t150 * t163;
t145 = -t155 * pkin(2) - pkin(1);
t114 = pkin(3) * t186 + t145;
t98 = t150 * t187 + t186 * t260;
t99 = -t150 * t186 + t187 * t260;
t170 = t98 * pkin(4) - t99 * pkin(9) + t114;
t292 = -qJD(5) * t170 - t157;
t166 = (-t277 * qJ(4) + t289) * t155 + (-t279 * qJ(4) + t211) * t153;
t176 = -qJ(4) * t186 + t106;
t164 = t150 * t166 + t176 * t260;
t67 = -t150 * t103 - t167 * t260;
t68 = -t103 * t260 + t150 * t167;
t276 = t153 * pkin(2);
t90 = pkin(3) * t182 + (pkin(3) * t187 + t276) * qJD(2);
t291 = -t67 * pkin(4) + t68 * pkin(9) + qJD(5) * t164 - t90;
t152 = sin(qJ(5));
t148 = t152 ^ 2;
t154 = cos(qJ(5));
t149 = t154 ^ 2;
t251 = t148 - t149;
t285 = t251 * qJD(5);
t215 = pkin(2) * t222;
t216 = pkin(2) * t225;
t120 = -t150 * t215 + t216 * t260;
t250 = t149 + t148;
t290 = t250 * t120;
t278 = cos(qJ(6));
t223 = t278 * qJD(6);
t288 = t278 * qJD(5) + t223;
t232 = t278 * t154;
t151 = sin(qJ(6));
t256 = t151 * t152;
t129 = -t232 + t256;
t146 = qJD(5) * t154;
t237 = t99 * t146;
t194 = t152 * t68 + t237;
t249 = qJD(5) * t152;
t238 = t99 * t249;
t286 = -t154 * t68 + t238;
t284 = qJD(5) + qJD(6);
t10 = t291 * t152 + t292 * t154;
t11 = t292 * t152 - t291 * t154;
t29 = -t152 * t164 + t154 * t170;
t30 = t152 * t170 + t154 * t164;
t282 = t10 * t152 - t11 * t154 + (t29 * t152 - t30 * t154) * qJD(5);
t280 = t67 * pkin(5);
t275 = t154 * pkin(5);
t147 = t154 * pkin(10);
t28 = -t260 * t163 + (t236 + (t287 * qJ(4) - t277 * qJD(4)) * t153 + (-t184 * qJ(4) + t279 * qJD(4) + t195) * t155) * t150;
t60 = t150 * t176 - t260 * t166;
t274 = t60 * t28;
t273 = t99 * t68;
t233 = t278 * t152;
t130 = t151 * t154 + t233;
t102 = t284 * t130;
t20 = pkin(5) * t194 + t28;
t265 = t152 * t99;
t43 = pkin(5) * t265 + t60;
t272 = t43 * t102 + t20 * t129;
t101 = -t288 * t154 + t284 * t256;
t271 = -t43 * t101 + t20 * t130;
t54 = t60 * t146;
t270 = t28 * t152 + t54;
t239 = t99 * t256;
t23 = t68 * t233 - t151 * t238 - qJD(6) * t239 + (t151 * t68 + t288 * t99) * t154;
t63 = t130 * t99;
t269 = t101 * t63 - t130 * t23;
t207 = t260 * t277;
t119 = (t150 * t279 + t207) * qJD(3) * pkin(2);
t241 = pkin(5) * t249;
t107 = t119 + t241;
t244 = t279 * pkin(2);
t144 = t244 + pkin(3);
t243 = t277 * pkin(2);
t121 = t144 * t260 - t150 * t243;
t116 = -pkin(4) - t121;
t110 = t116 - t275;
t268 = t110 * t102 + t107 * t129;
t267 = -t110 * t101 + t107 * t130;
t263 = t60 * t119;
t142 = -pkin(3) * t260 - pkin(4);
t133 = t142 - t275;
t262 = t133 * t102 + t129 * t241;
t261 = -t133 * t101 + t130 * t241;
t258 = t129 * t102;
t257 = t130 * t101;
t255 = t152 * t120;
t254 = t152 * t154;
t253 = t154 * t120;
t252 = t116 * t146 + t119 * t152;
t248 = qJD(6) * t151;
t247 = t153 * qJD(2);
t49 = 0.2e1 * t98 * t67;
t245 = -0.2e1 * pkin(1) * qJD(2);
t242 = pkin(2) * t247;
t240 = pkin(5) * t248;
t53 = t60 * t249;
t235 = pkin(3) * t150 + pkin(9);
t231 = t142 * t249;
t230 = t142 * t146;
t229 = t152 * t146;
t228 = t153 * t246;
t160 = t98 * pkin(5) - t99 * t147 + t29;
t158 = t278 * t160;
t25 = -pkin(10) * t265 + t30;
t14 = -t151 * t25 + t158;
t159 = t151 * t160;
t15 = t278 * t25 + t159;
t156 = t286 * pkin(10) + t11 + t280;
t161 = -t194 * pkin(10) - t10;
t3 = -qJD(6) * t158 - t151 * t156 - t278 * t161 + t248 * t25;
t4 = -qJD(6) * t159 - t151 * t161 + t278 * t156 - t223 * t25;
t227 = t14 * t101 - t15 * t102 + t3 * t129 - t4 * t130;
t221 = -0.4e1 * t99 * t254;
t122 = pkin(2) * t207 + t150 * t144;
t181 = pkin(9) + t122;
t104 = t154 * t181 + t147;
t180 = -pkin(10) - t181;
t177 = qJD(5) * t180;
t171 = t152 * t177 + t253;
t172 = t154 * t177 - t255;
t178 = t152 * t180;
t174 = t278 * t178;
t36 = -qJD(6) * t174 + t104 * t248 - t151 * t172 - t278 * t171;
t175 = t151 * t178;
t37 = -qJD(6) * t175 - t104 * t223 - t151 * t171 + t278 * t172;
t71 = -t151 * t104 + t174;
t72 = t278 * t104 + t175;
t220 = t71 * t101 - t72 * t102 + t36 * t129 - t37 * t130;
t208 = t154 * t235;
t126 = t208 + t147;
t217 = pkin(10) + t235;
t192 = t217 * t278;
t185 = qJD(5) * t192;
t190 = t152 * t192;
t196 = t151 * t217;
t191 = qJD(5) * t196;
t61 = qJD(6) * t190 + t126 * t248 + t152 * t185 + t154 * t191;
t193 = t152 * t196;
t62 = qJD(6) * t193 - t126 * t223 + t152 * t191 - t154 * t185;
t94 = -t151 * t126 - t190;
t95 = t278 * t126 - t193;
t219 = t94 * t101 - t95 * t102 + t61 * t129 - t62 * t130;
t218 = t116 * t249 - t119 * t154;
t214 = pkin(5) * t223;
t96 = t99 ^ 2;
t213 = t96 * t229;
t209 = t152 * t235;
t206 = t28 * t99 + t60 * t68;
t205 = t67 * t99 + t68 * t98;
t204 = qJD(5) * t235;
t202 = t101 * t98 - t130 * t67;
t22 = t102 * t99 + t129 * t68;
t64 = t232 * t99 - t239;
t201 = -t102 * t64 + t129 * t22;
t200 = t119 * t99 - t120 * t98;
t199 = -t152 * t30 - t154 * t29;
t45 = t146 * t98 + t152 * t67;
t189 = t142 * t68 - t235 * t67;
t188 = -t142 * t99 + t235 * t98;
t183 = t145 * t187;
t179 = qJD(5) * t181;
t173 = -t116 * t99 + t181 * t98;
t168 = t116 * t68 - t181 * t67 + t200;
t136 = -0.2e1 * t229;
t135 = 0.2e1 * t229;
t128 = -0.2e1 * t285;
t105 = t155 * t289 + t197;
t80 = -0.2e1 * t257;
t79 = 0.2e1 * t258;
t59 = 0.2e1 * t129 * t101 - 0.2e1 * t130 * t102;
t48 = (t278 * t101 - t102 * t151 + (-t278 * t129 + t130 * t151) * qJD(6)) * pkin(5);
t44 = t154 * t67 - t249 * t98;
t42 = -t102 * t98 - t129 * t67;
t40 = -t254 * t68 + t99 * t285;
t31 = qJD(5) * t221 - t251 * t68;
t17 = t102 * t63 + t129 * t23;
t16 = -t101 * t64 - t130 * t22;
t6 = t201 + t269;
t5 = qJD(5) * t199 - t10 * t154 - t11 * t152;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t228, 0.2e1 * (-t153 ^ 2 + t155 ^ 2) * qJD(2), 0, -0.2e1 * t228, 0, 0, t153 * t245, t155 * t245, 0, 0, -0.2e1 * t187 * t103, 0.2e1 * t103 * t186 + 0.2e1 * t167 * t187, 0, -0.2e1 * t186 * t167, 0, 0, 0.2e1 * qJD(3) * t183 + 0.2e1 * (t186 * t276 + t183) * qJD(2), -0.2e1 * t145 * t103 + 0.2e1 * t187 * t242, 0.2e1 * t105 * t103 + 0.2e1 * t106 * t167 + 0.2e1 * t186 * t73 - 0.2e1 * t187 * t74, 0.2e1 * t105 * t74 - 0.2e1 * t106 * t73 + 0.2e1 * t145 * t242, 0.2e1 * t273, -0.2e1 * t205, 0, t49, 0, 0, 0.2e1 * t114 * t67 + 0.2e1 * t90 * t98, 0.2e1 * t114 * t68 + 0.2e1 * t90 * t99, -0.2e1 * t157 * t98 - 0.2e1 * t164 * t67 + 0.2e1 * t206, 0.2e1 * t114 * t90 + 0.2e1 * t157 * t164 + 0.2e1 * t274, 0.2e1 * t149 * t273 - 0.2e1 * t213, t221 * t68 + 0.2e1 * t96 * t285, 0.2e1 * t154 * t205 - 0.2e1 * t238 * t98, 0.2e1 * t148 * t273 + 0.2e1 * t213, -0.2e1 * t152 * t205 - 0.2e1 * t237 * t98, t49, 0.2e1 * t11 * t98 + 0.2e1 * t152 * t206 + 0.2e1 * t29 * t67 + 0.2e1 * t54 * t99, 0.2e1 * t10 * t98 + 0.2e1 * t154 * t206 - 0.2e1 * t30 * t67 - 0.2e1 * t53 * t99, 0.2e1 * t199 * t68 + 0.2e1 * t282 * t99, -0.2e1 * t10 * t30 + 0.2e1 * t11 * t29 + 0.2e1 * t274, -0.2e1 * t64 * t22, 0.2e1 * t22 * t63 - 0.2e1 * t23 * t64, -0.2e1 * t22 * t98 + 0.2e1 * t64 * t67, 0.2e1 * t63 * t23, -0.2e1 * t23 * t98 - 0.2e1 * t63 * t67, t49, 0.2e1 * t14 * t67 + 0.2e1 * t20 * t63 + 0.2e1 * t23 * t43 + 0.2e1 * t4 * t98, -0.2e1 * t15 * t67 + 0.2e1 * t20 * t64 - 0.2e1 * t22 * t43 + 0.2e1 * t3 * t98, 0.2e1 * t14 * t22 - 0.2e1 * t15 * t23 + 0.2e1 * t3 * t63 - 0.2e1 * t4 * t64, 0.2e1 * t14 * t4 - 0.2e1 * t15 * t3 + 0.2e1 * t20 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t246, 0, -t247, 0, -pkin(7) * t246, pkin(7) * t247, 0, 0, 0, 0, -t103, 0, t167, 0, t74, t73, t103 * t244 - t186 * t216 + (t167 + t182) * t243 (-t73 * t277 + t74 * t279 + (-t277 * t105 + t279 * t106) * qJD(3)) * pkin(2), 0, 0, t68, 0, -t67, 0, -t28, -t157, -t121 * t68 - t122 * t67 + t200, t120 * t164 - t28 * t121 + t122 * t157 + t263, -t40, t31, t45, t40, t44, 0, t53 + (-qJD(5) * t173 - t28) * t154 + t168 * t152, t154 * t168 + t173 * t249 + t270, t5, t28 * t116 + t263 + (-t10 * t181 + t30 * t120 - t179 * t29) * t154 + (-t11 * t181 - t29 * t120 - t179 * t30) * t152, t16, t6, -t202, t17, t42, 0, t107 * t63 + t110 * t23 + t37 * t98 + t67 * t71 + t272, t107 * t64 - t110 * t22 + t36 * t98 - t67 * t72 + t271, t22 * t71 - t23 * t72 + t36 * t63 - t37 * t64 + t227, t107 * t43 + t110 * t20 + t14 * t37 - t15 * t36 - t3 * t72 + t4 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t215, -0.2e1 * t216, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t119, -0.2e1 * t120, 0, -0.2e1 * t119 * t121 + 0.2e1 * t120 * t122, t135, t128, 0, t136, 0, 0, 0.2e1 * t218, 0.2e1 * t252, 0.2e1 * t290, 0.2e1 * t116 * t119 + 0.2e1 * t181 * t290, t80, t59, 0, t79, 0, 0, 0.2e1 * t268, 0.2e1 * t267, 0.2e1 * t220, 0.2e1 * t107 * t110 - 0.2e1 * t36 * t72 + 0.2e1 * t37 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, 0, t167, 0, t74, t73, 0, 0, 0, 0, t68, 0, -t67, 0, -t28, -t157 (-t150 * t67 - t260 * t68) * pkin(3) (t150 * t157 - t260 * t28) * pkin(3), -t40, t31, t45, t40, t44, 0, t53 + t189 * t152 + (-qJD(5) * t188 - t28) * t154, t154 * t189 + t188 * t249 + t270, t5, -t10 * t208 - t11 * t209 + t28 * t142 + (-t208 * t29 - t209 * t30) * qJD(5), t16, t6, -t202, t17, t42, 0, t133 * t23 + t241 * t63 + t62 * t98 + t67 * t94 + t272, -t133 * t22 + t241 * t64 + t61 * t98 - t67 * t95 + t271, t22 * t94 - t23 * t95 + t61 * t63 - t62 * t64 + t227, t133 * t20 + t14 * t62 - t15 * t61 + t241 * t43 - t3 * t95 + t4 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t216, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t120, 0 (-t119 * t260 + t120 * t150) * pkin(3), t135, t128, 0, t136, 0, 0, t218 + t231, t230 + t252, t290, t119 * t142 + t235 * t290, t80, t59, 0, t79, 0, 0, t262 + t268, t261 + t267, t219 + t220, t107 * t133 + t110 * t241 - t36 * t95 + t37 * t94 - t61 * t72 + t62 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, t128, 0, t136, 0, 0, 0.2e1 * t231, 0.2e1 * t230, 0, 0, t80, t59, 0, t79, 0, 0, 0.2e1 * t262, 0.2e1 * t261, 0.2e1 * t219, 0.2e1 * t133 * t241 - 0.2e1 * t61 * t95 + 0.2e1 * t62 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t68, 0, t90, 0, 0, 0, 0, 0, 0, t44, -t45, -t250 * t68, -t282, 0, 0, 0, 0, 0, 0, t42, t202, -t201 + t269, -t101 * t15 - t102 * t14 - t129 * t4 - t130 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101 * t72 - t102 * t71 - t129 * t37 - t130 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101 * t95 - t102 * t94 - t129 * t62 - t130 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t257 + 0.2e1 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t286, 0, -t194, t67, t11, t10, 0, 0, 0, 0, -t22, 0, -t23, t67, -t98 * t240 + t278 * t280 + t4 (-t151 * t67 - t223 * t98) * pkin(5) + t3 (t278 * t22 - t151 * t23 + (t151 * t64 - t278 * t63) * qJD(6)) * pkin(5) (t278 * t4 - t151 * t3 + (-t14 * t151 + t15 * t278) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, 0, -t249, 0, -t154 * t179 - t255, t152 * t179 - t253, 0, 0, 0, 0, -t101, 0, -t102, 0, t37, t36, t48 (t278 * t37 - t151 * t36 + (-t151 * t71 + t278 * t72) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, 0, -t249, 0, -t154 * t204, t152 * t204, 0, 0, 0, 0, -t101, 0, -t102, 0, t62, t61, t48 (t278 * t62 - t151 * t61 + (-t151 * t94 + t278 * t95) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249, -t146, 0, 0, 0, 0, 0, 0, 0, 0, -t102, t101, 0 (-t278 * t102 - t101 * t151 + (t129 * t151 + t130 * t278) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t240, -0.2e1 * t214, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, t67, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, 0, -t102, 0, t37, t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, 0, -t102, 0, t62, t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, -t214, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
