% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 10:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 10:01:35
% EndTime: 2019-05-07 10:01:45
% DurationCPUTime: 10.76s
% Computational Cost: add. (105668->347), mult. (238477->488), div. (0->0), fcn. (182171->12), ass. (0->279)
t2337 = cos(qJ(2));
t2322 = t2337 * qJDD(1);
t2332 = sin(qJ(2));
t2385 = qJD(1) * t2332;
t2364 = qJD(2) * t2385;
t2302 = t2322 - t2364;
t2326 = t2337 ^ 2;
t2340 = qJD(1) ^ 2;
t2333 = sin(qJ(1));
t2338 = cos(qJ(1));
t2310 = t2333 * g(1) - t2338 * g(2);
t2351 = qJDD(1) * pkin(1) + t2310;
t2352 = qJD(2) * pkin(2) - pkin(8) * t2385;
t2268 = t2302 * pkin(2) - t2352 * t2385 + t2351 + (pkin(8) * t2326 + pkin(7)) * t2340;
t2331 = sin(qJ(3));
t2336 = cos(qJ(3));
t2295 = (t2331 * t2337 + t2332 * t2336) * qJD(1);
t2384 = qJD(1) * t2337;
t2363 = qJD(2) * t2384;
t2367 = t2332 * qJDD(1);
t2301 = t2363 + t2367;
t2357 = t2331 * t2301 - t2336 * t2302;
t2265 = -qJD(3) * t2295 - t2357;
t2294 = -t2331 * t2385 + t2336 * t2384;
t2293 = t2294 ^ 2;
t2324 = qJD(2) + qJD(3);
t2355 = pkin(3) * t2324 - qJ(4) * t2295;
t2219 = t2265 * pkin(3) + t2293 * qJ(4) - t2295 * t2355 - qJDD(4) + t2268;
t2327 = sin(pkin(11));
t2328 = cos(pkin(11));
t2276 = -t2328 * t2294 + t2295 * t2327;
t2274 = qJD(5) + t2276;
t2271 = qJD(6) + t2274;
t2397 = qJD(6) + t2271;
t2278 = t2327 * t2294 + t2328 * t2295;
t2330 = sin(qJ(5));
t2335 = cos(qJ(5));
t2262 = t2278 * t2330 - t2335 * t2324;
t2264 = t2278 * t2335 + t2324 * t2330;
t2329 = sin(qJ(6));
t2334 = cos(qJ(6));
t2237 = t2334 * t2262 + t2264 * t2329;
t2396 = t2237 ^ 2;
t2239 = -t2262 * t2329 + t2264 * t2334;
t2395 = t2239 ^ 2;
t2394 = t2262 ^ 2;
t2393 = t2264 ^ 2;
t2392 = t2271 ^ 2;
t2391 = t2274 ^ 2;
t2390 = t2276 ^ 2;
t2389 = t2278 ^ 2;
t2388 = t2295 ^ 2;
t2312 = t2324 ^ 2;
t2387 = -2 * qJD(4);
t2386 = t2332 * g(3);
t2383 = t2237 * t2239;
t2382 = t2262 * t2264;
t2381 = t2274 * t2262;
t2380 = t2276 * t2278;
t2379 = t2278 * t2324;
t2378 = t2294 * t2295;
t2377 = t2324 * t2276;
t2376 = t2324 * t2294;
t2375 = t2326 * t2340;
t2311 = -g(1) * t2338 - g(2) * t2333;
t2297 = -pkin(1) * t2340 + qJDD(1) * pkin(7) + t2311;
t2374 = t2332 * t2297;
t2373 = t2332 * t2340;
t2372 = t2337 * t2297;
t2371 = -qJD(3) + t2324;
t2370 = qJD(5) - t2274;
t2369 = qJD(6) - t2271;
t2343 = -pkin(2) * t2375 + t2302 * pkin(8) - qJD(2) * t2352 - t2386;
t2346 = pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2373 - g(3);
t2347 = qJDD(2) * pkin(2) - t2301 * pkin(8) - t2374;
t2236 = t2336 * (t2343 + t2372) + t2331 * (t2337 * t2346 + t2347);
t2208 = -t2293 * pkin(3) + t2265 * qJ(4) - t2324 * t2355 + t2236;
t2235 = -t2331 * t2343 + t2336 * t2347 + (-t2331 * t2297 + t2336 * t2346) * t2337;
t2353 = -t2336 * t2301 - t2331 * t2302;
t2266 = qJD(3) * t2294 - t2353;
t2366 = qJDD(2) + qJDD(3);
t2280 = t2366 + t2378;
t2341 = (-t2266 + t2376) * qJ(4) + t2280 * pkin(3) + t2235;
t2179 = t2328 * t2208 + t2276 * t2387 + t2327 * t2341;
t2246 = pkin(4) * t2276 - pkin(9) * t2278;
t2159 = -pkin(4) * t2312 + pkin(9) * t2366 - t2276 * t2246 + t2179;
t2358 = -t2328 * t2265 + t2266 * t2327;
t2222 = t2358 + t2379;
t2240 = t2265 * t2327 + t2266 * t2328;
t2360 = -t2240 + t2377;
t2182 = pkin(4) * t2222 + pkin(9) * t2360 - t2219;
t2145 = t2335 * t2159 + t2330 * t2182;
t2325 = t2332 ^ 2;
t2368 = t2325 + t2326;
t2144 = -t2330 * t2159 + t2335 * t2182;
t2362 = t2327 * t2208 - t2328 * t2341;
t2348 = -t2335 * t2240 - t2330 * t2366;
t2216 = -t2262 * qJD(5) - t2348;
t2359 = t2330 * t2240 - t2335 * t2366;
t2349 = qJD(5) * t2264 + t2359;
t2361 = -t2329 * t2216 - t2334 * t2349;
t2354 = qJDD(5) + t2358;
t2350 = -qJDD(6) - t2354;
t2209 = t2354 - t2382;
t2158 = -t2366 * pkin(4) - t2312 * pkin(9) + ((2 * qJD(4)) + t2246) * t2278 + t2362;
t2344 = -t2334 * t2216 + t2329 * t2349;
t2339 = qJD(2) ^ 2;
t2316 = t2337 * t2373;
t2314 = -t2339 - t2375;
t2313 = -t2325 * t2340 - t2339;
t2309 = -qJDD(2) + t2316;
t2308 = qJDD(2) + t2316;
t2307 = t2368 * t2340;
t2306 = -qJDD(1) * t2333 - t2338 * t2340;
t2305 = qJDD(1) * t2338 - t2333 * t2340;
t2304 = t2368 * qJDD(1);
t2303 = t2322 - 0.2e1 * t2364;
t2300 = 0.2e1 * t2363 + t2367;
t2296 = t2340 * pkin(7) + t2351;
t2288 = t2372 - t2386;
t2287 = -t2337 * g(3) - t2374;
t2286 = -t2312 - t2388;
t2285 = t2309 * t2337 - t2313 * t2332;
t2284 = -t2308 * t2332 + t2314 * t2337;
t2283 = t2309 * t2332 + t2313 * t2337;
t2282 = t2308 * t2337 + t2314 * t2332;
t2281 = -t2366 + t2378;
t2279 = -t2312 - t2293;
t2269 = -t2312 - t2389;
t2267 = -t2293 - t2388;
t2258 = -t2287 * t2332 + t2288 * t2337;
t2257 = t2287 * t2337 + t2288 * t2332;
t2254 = t2281 * t2336 - t2286 * t2331;
t2253 = t2281 * t2331 + t2286 * t2336;
t2252 = t2294 * t2371 + t2353;
t2251 = t2266 + t2376;
t2250 = t2295 * t2371 - t2357;
t2249 = (qJD(3) + t2324) * t2295 + t2357;
t2248 = t2279 * t2336 - t2280 * t2331;
t2247 = t2279 * t2331 + t2280 * t2336;
t2245 = -t2366 - t2380;
t2244 = t2366 - t2380;
t2243 = -t2312 - t2390;
t2241 = pkin(5) * t2274 - pkin(10) * t2264;
t2234 = -t2389 - t2390;
t2233 = -t2391 - t2393;
t2232 = t2245 * t2328 - t2269 * t2327;
t2231 = t2245 * t2327 + t2269 * t2328;
t2230 = -t2391 - t2394;
t2229 = -t2253 * t2332 + t2254 * t2337;
t2228 = t2253 * t2337 + t2254 * t2332;
t2227 = t2250 * t2336 - t2252 * t2331;
t2226 = t2250 * t2331 + t2252 * t2336;
t2225 = -t2240 - t2377;
t2223 = -t2358 + t2379;
t2220 = -t2393 - t2394;
t2218 = -t2247 * t2332 + t2248 * t2337;
t2217 = t2247 * t2337 + t2248 * t2332;
t2213 = t2243 * t2328 - t2244 * t2327;
t2212 = t2243 * t2327 + t2244 * t2328;
t2211 = -t2392 - t2395;
t2210 = -t2354 - t2382;
t2204 = -t2235 * t2331 + t2236 * t2336;
t2203 = t2235 * t2336 + t2236 * t2331;
t2202 = -t2392 - t2396;
t2201 = t2262 * t2370 + t2348;
t2200 = t2216 - t2381;
t2199 = -t2264 * t2370 - t2359;
t2198 = (qJD(5) + t2274) * t2264 + t2359;
t2197 = -t2231 * t2331 + t2232 * t2336;
t2196 = t2231 * t2336 + t2232 * t2331;
t2195 = -t2226 * t2332 + t2227 * t2337;
t2194 = t2226 * t2337 + t2227 * t2332;
t2193 = t2223 * t2328 - t2225 * t2327;
t2192 = t2223 * t2327 + t2225 * t2328;
t2191 = t2350 - t2383;
t2190 = -t2350 - t2383;
t2189 = -t2395 - t2396;
t2188 = t2210 * t2335 - t2233 * t2330;
t2187 = t2210 * t2330 + t2233 * t2335;
t2186 = -t2212 * t2331 + t2213 * t2336;
t2185 = t2212 * t2336 + t2213 * t2331;
t2184 = -t2209 * t2330 + t2230 * t2335;
t2183 = t2209 * t2335 + t2230 * t2330;
t2178 = t2278 * t2387 - t2362;
t2177 = -t2203 * t2332 + t2204 * t2337;
t2176 = t2203 * t2337 + t2204 * t2332;
t2175 = t2191 * t2334 - t2211 * t2329;
t2174 = t2191 * t2329 + t2211 * t2334;
t2173 = t2199 * t2335 - t2201 * t2330;
t2172 = t2199 * t2330 + t2201 * t2335;
t2171 = -t2196 * t2332 + t2197 * t2337;
t2170 = t2196 * t2337 + t2197 * t2332;
t2169 = -t2190 * t2329 + t2202 * t2334;
t2168 = t2190 * t2334 + t2202 * t2329;
t2167 = t2237 * t2369 + t2344;
t2166 = -t2237 * t2397 - t2344;
t2165 = -t2239 * t2369 + t2361;
t2164 = t2239 * t2397 - t2361;
t2163 = t2188 * t2328 + t2200 * t2327;
t2162 = t2188 * t2327 - t2200 * t2328;
t2161 = -t2192 * t2331 + t2193 * t2336;
t2160 = t2192 * t2336 + t2193 * t2331;
t2156 = t2184 * t2328 + t2198 * t2327;
t2155 = t2184 * t2327 - t2198 * t2328;
t2154 = t2173 * t2328 + t2220 * t2327;
t2153 = t2173 * t2327 - t2220 * t2328;
t2152 = -t2185 * t2332 + t2186 * t2337;
t2151 = t2185 * t2337 + t2186 * t2332;
t2150 = -t2178 * t2327 + t2179 * t2328;
t2149 = t2178 * t2328 + t2179 * t2327;
t2148 = pkin(5) * t2349 - pkin(10) * t2394 + t2264 * t2241 + t2158;
t2147 = -t2174 * t2330 + t2175 * t2335;
t2146 = t2174 * t2335 + t2175 * t2330;
t2143 = -t2168 * t2330 + t2169 * t2335;
t2142 = t2168 * t2335 + t2169 * t2330;
t2141 = t2165 * t2334 - t2167 * t2329;
t2140 = t2165 * t2329 + t2167 * t2334;
t2139 = -t2162 * t2331 + t2163 * t2336;
t2138 = t2162 * t2336 + t2163 * t2331;
t2137 = -t2160 * t2332 + t2161 * t2337;
t2136 = t2160 * t2337 + t2161 * t2332;
t2135 = -t2155 * t2331 + t2156 * t2336;
t2134 = t2155 * t2336 + t2156 * t2331;
t2133 = -t2153 * t2331 + t2154 * t2336;
t2132 = t2153 * t2336 + t2154 * t2331;
t2131 = -pkin(5) * t2394 - pkin(10) * t2349 - t2274 * t2241 + t2145;
t2130 = (-t2216 - t2381) * pkin(10) + t2209 * pkin(5) + t2144;
t2129 = t2147 * t2328 + t2166 * t2327;
t2128 = t2147 * t2327 - t2166 * t2328;
t2127 = t2143 * t2328 + t2164 * t2327;
t2126 = t2143 * t2327 - t2164 * t2328;
t2125 = -t2149 * t2331 + t2150 * t2336;
t2124 = t2149 * t2336 + t2150 * t2331;
t2123 = -t2144 * t2330 + t2145 * t2335;
t2122 = t2144 * t2335 + t2145 * t2330;
t2121 = -t2140 * t2330 + t2141 * t2335;
t2120 = t2140 * t2335 + t2141 * t2330;
t2119 = -t2138 * t2332 + t2139 * t2337;
t2118 = t2138 * t2337 + t2139 * t2332;
t2117 = -t2134 * t2332 + t2135 * t2337;
t2116 = t2134 * t2337 + t2135 * t2332;
t2115 = -t2132 * t2332 + t2133 * t2337;
t2114 = t2121 * t2328 + t2189 * t2327;
t2113 = t2132 * t2337 + t2133 * t2332;
t2112 = t2121 * t2327 - t2189 * t2328;
t2111 = t2123 * t2328 + t2158 * t2327;
t2110 = t2123 * t2327 - t2158 * t2328;
t2109 = t2130 * t2329 + t2131 * t2334;
t2108 = t2130 * t2334 - t2131 * t2329;
t2107 = -t2128 * t2331 + t2129 * t2336;
t2106 = t2128 * t2336 + t2129 * t2331;
t2105 = -t2126 * t2331 + t2127 * t2336;
t2104 = t2126 * t2336 + t2127 * t2331;
t2103 = -t2124 * t2332 + t2125 * t2337;
t2102 = t2124 * t2337 + t2125 * t2332;
t2101 = -t2112 * t2331 + t2114 * t2336;
t2100 = t2112 * t2336 + t2114 * t2331;
t2099 = -t2110 * t2331 + t2111 * t2336;
t2098 = t2110 * t2336 + t2111 * t2331;
t2097 = -t2108 * t2329 + t2109 * t2334;
t2096 = t2108 * t2334 + t2109 * t2329;
t2095 = -t2106 * t2332 + t2107 * t2337;
t2094 = t2106 * t2337 + t2107 * t2332;
t2093 = -t2104 * t2332 + t2105 * t2337;
t2092 = t2104 * t2337 + t2105 * t2332;
t2091 = -t2100 * t2332 + t2101 * t2337;
t2090 = t2100 * t2337 + t2101 * t2332;
t2089 = -t2098 * t2332 + t2099 * t2337;
t2088 = t2098 * t2337 + t2099 * t2332;
t2087 = -t2096 * t2330 + t2097 * t2335;
t2086 = t2096 * t2335 + t2097 * t2330;
t2085 = t2087 * t2328 + t2148 * t2327;
t2084 = t2087 * t2327 - t2148 * t2328;
t2083 = -t2084 * t2331 + t2085 * t2336;
t2082 = t2084 * t2336 + t2085 * t2331;
t2081 = -t2082 * t2332 + t2083 * t2337;
t2080 = t2082 * t2337 + t2083 * t2332;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2306, -t2305, 0, -t2310 * t2333 + t2311 * t2338, 0, 0, 0, 0, 0, 0, t2284 * t2338 - t2303 * t2333, t2285 * t2338 + t2300 * t2333, t2304 * t2338 - t2307 * t2333, t2258 * t2338 - t2296 * t2333, 0, 0, 0, 0, 0, 0, t2218 * t2338 + t2249 * t2333, t2229 * t2338 + t2251 * t2333, t2195 * t2338 + t2267 * t2333, t2177 * t2338 - t2268 * t2333, 0, 0, 0, 0, 0, 0, t2152 * t2338 + t2222 * t2333, t2171 * t2338 - t2333 * t2360, t2137 * t2338 + t2234 * t2333, t2103 * t2338 - t2219 * t2333, 0, 0, 0, 0, 0, 0, t2117 * t2338 + t2183 * t2333, t2119 * t2338 + t2187 * t2333, t2115 * t2338 + t2172 * t2333, t2089 * t2338 + t2122 * t2333, 0, 0, 0, 0, 0, 0, t2093 * t2338 + t2142 * t2333, t2095 * t2338 + t2146 * t2333, t2091 * t2338 + t2120 * t2333, t2081 * t2338 + t2086 * t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2305, t2306, 0, t2310 * t2338 + t2311 * t2333, 0, 0, 0, 0, 0, 0, t2284 * t2333 + t2303 * t2338, t2285 * t2333 - t2300 * t2338, t2304 * t2333 + t2307 * t2338, t2258 * t2333 + t2296 * t2338, 0, 0, 0, 0, 0, 0, t2218 * t2333 - t2249 * t2338, t2229 * t2333 - t2251 * t2338, t2195 * t2333 - t2267 * t2338, t2177 * t2333 + t2268 * t2338, 0, 0, 0, 0, 0, 0, t2152 * t2333 - t2222 * t2338, t2171 * t2333 + t2338 * t2360, t2137 * t2333 - t2234 * t2338, t2103 * t2333 + t2219 * t2338, 0, 0, 0, 0, 0, 0, t2117 * t2333 - t2183 * t2338, t2119 * t2333 - t2187 * t2338, t2115 * t2333 - t2172 * t2338, t2089 * t2333 - t2122 * t2338, 0, 0, 0, 0, 0, 0, t2093 * t2333 - t2142 * t2338, t2095 * t2333 - t2146 * t2338, t2091 * t2333 - t2120 * t2338, t2081 * t2333 - t2086 * t2338; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2282, t2283, 0, t2257, 0, 0, 0, 0, 0, 0, t2217, t2228, t2194, t2176, 0, 0, 0, 0, 0, 0, t2151, t2170, t2136, t2102, 0, 0, 0, 0, 0, 0, t2116, t2118, t2113, t2088, 0, 0, 0, 0, 0, 0, t2092, t2094, t2090, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2340, -qJDD(1), 0, t2311, 0, 0, 0, 0, 0, 0, t2284, t2285, t2304, t2258, 0, 0, 0, 0, 0, 0, t2218, t2229, t2195, t2177, 0, 0, 0, 0, 0, 0, t2152, t2171, t2137, t2103, 0, 0, 0, 0, 0, 0, t2117, t2119, t2115, t2089, 0, 0, 0, 0, 0, 0, t2093, t2095, t2091, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2340, 0, t2310, 0, 0, 0, 0, 0, 0, t2303, -t2300, t2307, t2296, 0, 0, 0, 0, 0, 0, -t2249, -t2251, -t2267, t2268, 0, 0, 0, 0, 0, 0, -t2222, t2360, -t2234, t2219, 0, 0, 0, 0, 0, 0, -t2183, -t2187, -t2172, -t2122, 0, 0, 0, 0, 0, 0, -t2142, -t2146, -t2120, -t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2282, t2283, 0, t2257, 0, 0, 0, 0, 0, 0, t2217, t2228, t2194, t2176, 0, 0, 0, 0, 0, 0, t2151, t2170, t2136, t2102, 0, 0, 0, 0, 0, 0, t2116, t2118, t2113, t2088, 0, 0, 0, 0, 0, 0, t2092, t2094, t2090, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2314, t2309, t2322, t2288, 0, 0, 0, 0, 0, 0, t2248, t2254, t2227, t2204, 0, 0, 0, 0, 0, 0, t2186, t2197, t2161, t2125, 0, 0, 0, 0, 0, 0, t2135, t2139, t2133, t2099, 0, 0, 0, 0, 0, 0, t2105, t2107, t2101, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2308, t2313, -t2367, t2287, 0, 0, 0, 0, 0, 0, t2247, t2253, t2226, t2203, 0, 0, 0, 0, 0, 0, t2185, t2196, t2160, t2124, 0, 0, 0, 0, 0, 0, t2134, t2138, t2132, t2098, 0, 0, 0, 0, 0, 0, t2104, t2106, t2100, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2303, t2300, -t2307, -t2296, 0, 0, 0, 0, 0, 0, t2249, t2251, t2267, -t2268, 0, 0, 0, 0, 0, 0, t2222, -t2360, t2234, -t2219, 0, 0, 0, 0, 0, 0, t2183, t2187, t2172, t2122, 0, 0, 0, 0, 0, 0, t2142, t2146, t2120, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2279, t2281, t2250, t2236, 0, 0, 0, 0, 0, 0, t2213, t2232, t2193, t2150, 0, 0, 0, 0, 0, 0, t2156, t2163, t2154, t2111, 0, 0, 0, 0, 0, 0, t2127, t2129, t2114, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2280, t2286, t2252, t2235, 0, 0, 0, 0, 0, 0, t2212, t2231, t2192, t2149, 0, 0, 0, 0, 0, 0, t2155, t2162, t2153, t2110, 0, 0, 0, 0, 0, 0, t2126, t2128, t2112, t2084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2249, t2251, t2267, -t2268, 0, 0, 0, 0, 0, 0, t2222, -t2360, t2234, -t2219, 0, 0, 0, 0, 0, 0, t2183, t2187, t2172, t2122, 0, 0, 0, 0, 0, 0, t2142, t2146, t2120, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2243, t2245, t2223, t2179, 0, 0, 0, 0, 0, 0, t2184, t2188, t2173, t2123, 0, 0, 0, 0, 0, 0, t2143, t2147, t2121, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, t2269, t2225, t2178, 0, 0, 0, 0, 0, 0, -t2198, -t2200, -t2220, -t2158, 0, 0, 0, 0, 0, 0, -t2164, -t2166, -t2189, -t2148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2222, -t2360, t2234, -t2219, 0, 0, 0, 0, 0, 0, t2183, t2187, t2172, t2122, 0, 0, 0, 0, 0, 0, t2142, t2146, t2120, t2086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2230, t2210, t2199, t2145, 0, 0, 0, 0, 0, 0, t2169, t2175, t2141, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2233, t2201, t2144, 0, 0, 0, 0, 0, 0, t2168, t2174, t2140, t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2198, t2200, t2220, t2158, 0, 0, 0, 0, 0, 0, t2164, t2166, t2189, t2148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2202, t2191, t2165, t2109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2190, t2211, t2167, t2108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2164, t2166, t2189, t2148;];
f_new_reg  = t1;
