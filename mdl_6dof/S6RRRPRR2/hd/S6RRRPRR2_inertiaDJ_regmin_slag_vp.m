% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR2_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR2_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR2_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR2_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:08:39
% EndTime: 2019-03-09 18:08:45
% DurationCPUTime: 1.92s
% Computational Cost: add. (4877->231), mult. (10943->402), div. (0->0), fcn. (11058->10), ass. (0->179)
t125 = sin(qJ(3));
t126 = sin(qJ(2));
t129 = cos(qJ(3));
t130 = cos(qJ(2));
t100 = t125 * t130 + t129 * t126;
t122 = sin(pkin(11));
t140 = t125 * t126 - t129 * t130;
t189 = cos(pkin(11));
t73 = t189 * t100 - t122 * t140;
t124 = sin(qJ(5));
t127 = cos(qJ(6));
t123 = sin(qJ(6));
t128 = cos(qJ(5));
t185 = t123 * t128;
t99 = t127 * t124 + t185;
t50 = t99 * t73;
t214 = pkin(7) + pkin(8);
t105 = t214 * t126;
t106 = t214 * t130;
t142 = -t129 * t105 - t125 * t106;
t135 = -qJ(4) * t100 + t142;
t121 = t128 ^ 2;
t183 = t124 ^ 2 - t121;
t156 = t183 * qJD(5);
t177 = qJD(5) + qJD(6);
t72 = t122 * t100 + t189 * t140;
t213 = pkin(5) * t72;
t137 = t100 * qJD(2);
t132 = -qJD(3) * t100 - t137;
t76 = (-qJD(2) - qJD(3)) * t140;
t52 = t122 * t76 - t189 * t132;
t212 = t52 * pkin(5);
t115 = t129 * pkin(2) + pkin(3);
t158 = t189 * t125;
t91 = pkin(2) * t158 + t122 * t115;
t85 = pkin(9) + t91;
t211 = -pkin(10) - t85;
t118 = qJD(5) * t128;
t169 = t73 * t118;
t53 = t122 * t132 + t189 * t76;
t196 = t124 * t53;
t139 = t169 + t196;
t182 = qJD(5) * t124;
t166 = qJD(2) * t214;
t101 = t126 * t166;
t102 = t130 * t166;
t141 = t125 * t105 - t129 * t106;
t55 = qJD(3) * t141 + t125 * t101 - t129 * t102;
t131 = -t76 * qJ(4) - t100 * qJD(4) + t55;
t143 = t129 * t101 + t125 * t102;
t36 = -qJ(4) * t137 + t135 * qJD(3) - t140 * qJD(4) - t143;
t20 = t122 * t131 + t189 * t36;
t179 = t126 * qJD(2);
t117 = pkin(2) * t179;
t67 = -pkin(3) * t132 + t117;
t24 = t52 * pkin(4) - t53 * pkin(9) + t67;
t116 = -t130 * pkin(2) - pkin(1);
t133 = pkin(3) * t140 + t116;
t45 = t72 * pkin(4) - t73 * pkin(9) + t133;
t66 = -t140 * qJ(4) - t141;
t47 = t122 * t135 + t189 * t66;
t7 = -t45 * t118 - t124 * t24 - t128 * t20 + t47 * t182;
t6 = -pkin(10) * t139 - t7;
t210 = t127 * t6;
t209 = t128 * pkin(5);
t112 = t122 * pkin(3) + pkin(9);
t208 = -pkin(10) - t112;
t19 = t122 * t36 - t189 * t131;
t12 = pkin(5) * t139 + t19;
t195 = t124 * t73;
t46 = t122 * t66 - t189 * t135;
t32 = pkin(5) * t195 + t46;
t75 = t177 * t99;
t186 = t123 * t124;
t98 = -t127 * t128 + t186;
t207 = t12 * t98 + t32 * t75;
t180 = qJD(6) * t127;
t74 = -t127 * t118 - t128 * t180 + t177 * t186;
t206 = t12 * t99 - t32 * t74;
t40 = t46 * t118;
t205 = t19 * t124 + t40;
t43 = t128 * t47;
t204 = t124 * t45 + t43;
t173 = pkin(5) * t182;
t198 = pkin(2) * qJD(3);
t88 = (t122 * t129 + t158) * t198;
t79 = t88 + t173;
t187 = t122 * t125;
t90 = -pkin(2) * t187 + t189 * t115;
t84 = -pkin(4) - t90;
t82 = t84 - t209;
t203 = t82 * t75 + t79 * t98;
t202 = -t82 * t74 + t79 * t99;
t201 = t84 * t118 + t88 * t124;
t113 = -t189 * pkin(3) - pkin(4);
t103 = t113 - t209;
t200 = t103 * t75 + t98 * t173;
t199 = -t103 * t74 + t99 * t173;
t16 = -pkin(10) * t195 + t204;
t197 = t123 * t16;
t89 = (t189 * t129 - t187) * t198;
t194 = t124 * t89;
t193 = t127 * t16;
t192 = t128 * t53;
t191 = t128 * t73;
t190 = t128 * t89;
t184 = t124 * t128;
t181 = qJD(6) * t123;
t178 = t130 * qJD(2);
t176 = -0.2e1 * pkin(1) * qJD(2);
t175 = t125 * t198;
t174 = t129 * t198;
t172 = pkin(5) * t181;
t171 = pkin(5) * t180;
t170 = t73 * t182;
t39 = t46 * t182;
t42 = t128 * t45;
t15 = -pkin(10) * t191 - t124 * t47 + t213 + t42;
t168 = -t15 - t213;
t161 = -t124 * t20 + t128 * t24;
t5 = -pkin(10) * t192 + t212 + (-t43 + (pkin(10) * t73 - t45) * t124) * qJD(5) + t161;
t167 = -t123 * t6 + t127 * t5;
t165 = t113 * t182;
t164 = t113 * t118;
t163 = t124 * t118;
t162 = qJD(5) * t211;
t160 = -t128 * t88 + t84 * t182;
t159 = qJD(5) * t208;
t157 = -0.4e1 * t73 * t184;
t155 = t19 * t73 + t46 * t53;
t154 = t52 * t73 + t53 * t72;
t30 = t52 * t99 - t72 * t74;
t153 = t72 * t85 - t73 * t84;
t152 = -t72 * t89 + t73 * t88;
t151 = -t112 * t52 + t113 * t53;
t150 = t112 * t72 - t113 * t73;
t149 = -t127 * t15 + t197;
t148 = t123 * t15 + t193;
t77 = t211 * t124;
t119 = t128 * pkin(10);
t78 = t128 * t85 + t119;
t147 = t123 * t78 - t127 * t77;
t146 = t123 * t77 + t127 * t78;
t95 = t208 * t124;
t96 = t128 * t112 + t119;
t145 = t123 * t96 - t127 * t95;
t144 = t123 * t95 + t127 * t96;
t34 = t72 * t118 + t124 * t52;
t138 = t116 * t100;
t136 = -t47 * t52 + t155;
t134 = -t52 * t85 + t53 * t84 + t152;
t107 = 0.2e1 * t163;
t97 = -0.2e1 * t156;
t93 = t128 * t159;
t92 = t124 * t159;
t70 = t73 ^ 2;
t60 = -0.2e1 * t99 * t74;
t59 = t128 * t162 - t194;
t58 = t124 * t162 + t190;
t54 = -t142 * qJD(3) + t143;
t51 = t98 * t73;
t49 = -t144 * qJD(6) - t123 * t92 + t127 * t93;
t48 = t145 * qJD(6) - t123 * t93 - t127 * t92;
t44 = 0.2e1 * t74 * t98 - 0.2e1 * t75 * t99;
t37 = 0.2e1 * t72 * t52;
t33 = t128 * t52 - t72 * t182;
t31 = -t52 * t98 - t72 * t75;
t29 = -t73 * t156 + t53 * t184;
t26 = -t146 * qJD(6) - t123 * t58 + t127 * t59;
t25 = t147 * qJD(6) - t123 * t59 - t127 * t58;
t21 = qJD(5) * t157 - t183 * t53;
t14 = t53 * t185 - t123 * t170 - t181 * t195 + (t177 * t191 + t196) * t127;
t13 = -t177 * t50 - t98 * t53;
t9 = t13 * t99 + t51 * t74;
t8 = -t204 * qJD(5) + t161;
t3 = -t13 * t98 - t14 * t99 + t50 * t74 + t51 * t75;
t2 = -t148 * qJD(6) + t167;
t1 = t149 * qJD(6) - t123 * t5 - t210;
t4 = [0, 0, 0, 0.2e1 * t126 * t178, 0.2e1 * (-t126 ^ 2 + t130 ^ 2) * qJD(2), 0, 0, 0, t126 * t176, t130 * t176, 0.2e1 * t100 * t76, 0.2e1 * t100 * t132 - 0.2e1 * t140 * t76, 0, 0, 0, 0.2e1 * qJD(3) * t138 + 0.2e1 * (pkin(2) * t126 * t140 + t138) * qJD(2), 0.2e1 * t100 * t117 + 0.2e1 * t116 * t76, -0.2e1 * t20 * t72 + 0.2e1 * t136, 0.2e1 * t133 * t67 + 0.2e1 * t46 * t19 + 0.2e1 * t47 * t20, 0.2e1 * t121 * t53 * t73 - 0.2e1 * t70 * t163, 0.2e1 * t70 * t156 + t53 * t157, 0.2e1 * t154 * t128 - 0.2e1 * t72 * t170, -0.2e1 * t154 * t124 - 0.2e1 * t72 * t169, t37, 0.2e1 * t124 * t136 + 0.2e1 * t73 * t40 + 0.2e1 * t42 * t52 + 0.2e1 * t8 * t72, 0.2e1 * t155 * t128 - 0.2e1 * t204 * t52 - 0.2e1 * t73 * t39 + 0.2e1 * t7 * t72, -0.2e1 * t51 * t13, -0.2e1 * t13 * t50 + 0.2e1 * t14 * t51, 0.2e1 * t13 * t72 - 0.2e1 * t51 * t52, -0.2e1 * t14 * t72 - 0.2e1 * t50 * t52, t37, 0.2e1 * t12 * t50 + 0.2e1 * t32 * t14 - 0.2e1 * t149 * t52 + 0.2e1 * t2 * t72, 0.2e1 * t1 * t72 - 0.2e1 * t12 * t51 + 0.2e1 * t32 * t13 - 0.2e1 * t148 * t52; 0, 0, 0, 0, 0, t178, -t179, 0, -pkin(7) * t178, pkin(7) * t179, 0, 0, t76, t132, 0, t55, t54, -t52 * t91 - t53 * t90 + t152, -t19 * t90 + t20 * t91 + t46 * t88 + t47 * t89, t29, t21, t34, t33, 0, t39 + (-t153 * qJD(5) - t19) * t128 + t134 * t124, t134 * t128 + t153 * t182 + t205, t9, t3, t30, t31, 0, t82 * t14 - t147 * t52 + t26 * t72 + t79 * t50 + t207, t82 * t13 - t146 * t52 + t25 * t72 - t79 * t51 + t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t175, -0.2e1 * t174, 0, -0.2e1 * t88 * t90 + 0.2e1 * t89 * t91, t107, t97, 0, 0, 0, 0.2e1 * t160, 0.2e1 * t201, t60, t44, 0, 0, 0, 0.2e1 * t203, 0.2e1 * t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, t132, 0, t55, t54 (-t122 * t52 - t189 * t53) * pkin(3) (t122 * t20 - t189 * t19) * pkin(3), t29, t21, t34, t33, 0, t39 + t151 * t124 + (-t150 * qJD(5) - t19) * t128, t128 * t151 + t150 * t182 + t205, t9, t3, t30, t31, 0, t103 * t14 - t145 * t52 + t173 * t50 + t49 * t72 + t207, t103 * t13 - t144 * t52 - t173 * t51 + t48 * t72 + t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t174, 0 (t122 * t89 - t189 * t88) * pkin(3), t107, t97, 0, 0, 0, t160 + t165, t164 + t201, t60, t44, 0, 0, 0, t200 + t203, t199 + t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, t97, 0, 0, 0, 0.2e1 * t165, 0.2e1 * t164, t60, t44, 0, 0, 0, 0.2e1 * t200, 0.2e1 * t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, t33, -t34, 0, 0, 0, 0, 0, t31, -t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170 + t192, -t139, t52, t8, t7, 0, 0, t13, -t14, t52, t127 * t212 + (t123 * t168 - t193) * qJD(6) + t167, -t210 + (-t5 - t212) * t123 + (t127 * t168 + t197) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, -t182, 0, -t85 * t118 - t194, t85 * t182 - t190, 0, 0, -t74, -t75, 0, t26, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, -t182, 0, -t112 * t118, t112 * t182, 0, 0, -t74, -t75, 0, t49, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t182, -t118, 0, 0, 0, 0, 0, -t75, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t172, -0.2e1 * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t14, t52, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, -t75, 0, t26, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, -t75, 0, t49, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, -t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
