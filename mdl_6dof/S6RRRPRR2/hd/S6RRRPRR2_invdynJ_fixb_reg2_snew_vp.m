% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 10:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPRR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:59:12
% EndTime: 2019-05-07 09:59:42
% DurationCPUTime: 16.50s
% Computational Cost: add. (139554->685), mult. (314814->998), div. (0->0), fcn. (240171->12), ass. (0->428)
t414 = cos(qJ(2));
t397 = t414 * qJDD(1);
t409 = sin(qJ(2));
t470 = qJD(1) * qJD(2);
t460 = t409 * t470;
t385 = t397 - t460;
t403 = t414 ^ 2;
t416 = qJD(1) ^ 2;
t410 = sin(qJ(1));
t515 = cos(qJ(1));
t458 = g(1) * t410 - t515 * g(2);
t431 = qJDD(1) * pkin(1) + t458;
t477 = qJD(1) * t409;
t432 = qJD(2) * pkin(2) - pkin(8) * t477;
t341 = pkin(2) * t385 - t432 * t477 + t431 + (pkin(8) * t403 + pkin(7)) * t416;
t531 = 2 * qJD(4);
t404 = sin(pkin(11));
t408 = sin(qJ(3));
t413 = cos(qJ(3));
t377 = qJD(1) * t413 * t414 - t408 * t477;
t378 = (t408 * t414 + t409 * t413) * qJD(1);
t405 = cos(pkin(11));
t356 = -t405 * t377 + t378 * t404;
t358 = t404 * t377 + t405 * t378;
t322 = t358 * t356;
t468 = qJDD(2) + qJDD(3);
t519 = -t322 + t468;
t530 = t404 * t519;
t529 = t405 * t519;
t406 = sin(qJ(6));
t401 = qJD(2) + qJD(3);
t407 = sin(qJ(5));
t412 = cos(qJ(5));
t335 = t358 * t407 - t412 * t401;
t337 = t358 * t412 + t401 * t407;
t411 = cos(qJ(6));
t300 = t411 * t335 + t337 * t406;
t302 = -t335 * t406 + t337 * t411;
t251 = t302 * t300;
t396 = t409 * qJDD(1);
t459 = t414 * t470;
t384 = t396 + t459;
t451 = t408 * t384 - t413 * t385;
t338 = -qJD(3) * t378 - t451;
t436 = t413 * t384 + t408 * t385;
t339 = qJD(3) * t377 + t436;
t453 = -t405 * t338 + t339 * t404;
t303 = qJDD(5) + t453;
t297 = qJDD(6) + t303;
t522 = -t251 + t297;
t528 = t406 * t522;
t307 = t337 * t335;
t520 = t303 - t307;
t527 = t407 * t520;
t364 = t377 * t378;
t518 = t364 + t468;
t526 = t408 * t518;
t525 = t411 * t522;
t524 = t412 * t520;
t523 = t413 * t518;
t375 = t377 ^ 2;
t442 = pkin(3) * t401 - qJ(4) * t378;
t265 = pkin(3) * t338 + qJ(4) * t375 - t378 * t442 - qJDD(4) + t341;
t489 = t358 * t401;
t276 = t453 + t489;
t433 = g(1) * t515 + t410 * g(2);
t509 = qJDD(1) * pkin(7);
t380 = -t416 * pkin(1) - t433 + t509;
t399 = t403 * t416;
t512 = t409 * g(3);
t420 = -pkin(2) * t399 + t385 * pkin(8) - qJD(2) * t432 - t512;
t480 = t409 * t416;
t424 = pkin(2) * t480 + pkin(8) * t470 - g(3);
t486 = t380 * t409;
t425 = qJDD(2) * pkin(2) - pkin(8) * t384 - t486;
t296 = t413 * t420 + t408 * t425 + (t413 * t380 + t408 * t424) * t414;
t252 = -t375 * pkin(3) + t338 * qJ(4) - t401 * t442 + t296;
t295 = t408 * t420 - t413 * t425 + (t408 * t380 - t413 * t424) * t414;
t371 = t401 * t377;
t328 = t339 - t371;
t417 = pkin(3) * t518 - qJ(4) * t328 - t295;
t187 = -0.2e1 * qJD(4) * t356 + t405 * t252 + t404 * t417;
t318 = pkin(4) * t356 - pkin(9) * t358;
t389 = t401 ^ 2;
t151 = -pkin(4) * t389 + pkin(9) * t468 - t356 * t318 + t187;
t305 = t338 * t404 + t339 * t405;
t345 = t401 * t356;
t280 = t305 - t345;
t194 = pkin(4) * t276 - pkin(9) * t280 - t265;
t120 = t151 * t407 - t412 * t194;
t121 = t412 * t151 + t407 * t194;
t70 = t407 * t120 + t412 * t121;
t426 = -t412 * t305 - t407 * t468;
t264 = -t335 * qJD(5) - t426;
t454 = t305 * t407 - t412 * t468;
t429 = qJD(5) * t337 + t454;
t196 = -t300 * qJD(6) + t411 * t264 - t406 * t429;
t352 = qJD(5) + t356;
t347 = qJD(6) + t352;
t274 = t347 * t300;
t521 = -t274 + t196;
t313 = t352 * t335;
t242 = t313 + t264;
t415 = qJD(2) ^ 2;
t447 = t399 + t415;
t457 = t252 * t404 - t405 * t417;
t186 = t358 * t531 + t457;
t456 = t264 * t406 + t411 * t429;
t166 = (qJD(6) - t347) * t302 + t456;
t238 = (qJD(5) - t352) * t337 + t454;
t298 = t300 ^ 2;
t299 = t302 ^ 2;
t517 = t335 ^ 2;
t334 = t337 ^ 2;
t346 = t347 ^ 2;
t351 = t352 ^ 2;
t353 = t356 ^ 2;
t354 = t358 ^ 2;
t376 = t378 ^ 2;
t88 = pkin(5) * t520 - pkin(10) * t242 - t120;
t308 = pkin(5) * t352 - pkin(10) * t337;
t96 = -pkin(5) * t517 - pkin(10) * t429 - t352 * t308 + t121;
t50 = t406 * t96 - t411 * t88;
t51 = t406 * t88 + t411 * t96;
t28 = t406 * t51 - t411 * t50;
t516 = pkin(5) * t28;
t514 = pkin(4) * t404;
t169 = t274 + t196;
t111 = -t166 * t406 - t169 * t411;
t513 = pkin(5) * t111;
t511 = t28 * t407;
t510 = t28 * t412;
t150 = -t468 * pkin(4) - t389 * pkin(9) + (t531 + t318) * t358 + t457;
t126 = pkin(5) * t429 - pkin(10) * t517 + t308 * t337 + t150;
t508 = t126 * t406;
t507 = t126 * t411;
t128 = -t186 * t405 + t187 * t404;
t506 = t128 * t408;
t505 = t128 * t413;
t214 = t251 + t297;
t504 = t214 * t406;
t503 = t214 * t411;
t245 = -t295 * t413 + t296 * t408;
t502 = t245 * t409;
t254 = t303 + t307;
t501 = t254 * t407;
t500 = t254 * t412;
t499 = t265 * t404;
t498 = t265 * t405;
t316 = t322 + t468;
t497 = t316 * t404;
t496 = t316 * t405;
t495 = t341 * t408;
t494 = t341 * t413;
t493 = t347 * t406;
t492 = t347 * t411;
t491 = t352 * t407;
t490 = t352 * t412;
t361 = -t364 + t468;
t488 = t361 * t408;
t487 = t361 * t413;
t485 = t401 * t404;
t484 = t401 * t405;
t483 = t401 * t408;
t482 = t401 * t413;
t146 = t407 * t150;
t391 = t414 * t480;
t469 = qJDD(2) + t391;
t481 = t409 * t469;
t147 = t412 * t150;
t479 = t414 * (qJDD(2) - t391);
t474 = qJD(3) + t401;
t472 = qJD(5) + t352;
t53 = -t150 * t405 + t404 * t70;
t467 = pkin(3) * t53 - pkin(4) * t150 + pkin(9) * t70;
t466 = t404 * t251;
t465 = t405 * t251;
t464 = t404 * t307;
t463 = t405 * t307;
t462 = -pkin(4) * t405 - pkin(3);
t29 = t406 * t50 + t411 * t51;
t129 = t186 * t404 + t405 * t187;
t246 = t295 * t408 + t413 * t296;
t367 = g(3) * t414 + t486;
t441 = -t414 * t380 + t512;
t452 = t409 * t367 - t414 * t441;
t292 = -t334 - t351;
t209 = -t292 * t407 - t500;
t243 = t335 * t472 + t426;
t157 = t209 * t404 + t243 * t405;
t450 = pkin(3) * t157 + pkin(4) * t243 + pkin(9) * t209 + t146;
t284 = -t351 - t517;
t204 = t284 * t412 - t527;
t239 = -t337 * t472 - t454;
t144 = t204 * t404 + t239 * t405;
t449 = pkin(3) * t144 + pkin(4) * t239 + pkin(9) * t204 - t147;
t342 = -t354 - t389;
t286 = t342 * t405 - t497;
t448 = pkin(3) * t286 - t187;
t212 = -t298 - t299;
t113 = -t166 * t411 + t169 * t406;
t22 = -pkin(5) * t212 + pkin(10) * t113 + t29;
t24 = -pkin(10) * t111 - t28;
t65 = -t111 * t407 + t113 * t412;
t56 = -t212 * t405 + t404 * t65;
t446 = pkin(3) * t56 - pkin(4) * t212 + pkin(9) * t65 + t412 * t22 + t407 * t24;
t244 = -t346 - t298;
t171 = t244 * t406 + t525;
t172 = t244 * t411 - t528;
t116 = -t171 * t407 + t172 * t412;
t165 = (qJD(6) + t347) * t302 + t456;
t67 = -pkin(5) * t165 + pkin(10) * t172 - t507;
t76 = t116 * t404 - t165 * t405;
t86 = -pkin(10) * t171 + t508;
t444 = pkin(3) * t76 - pkin(4) * t165 + pkin(9) * t116 + t407 * t86 + t412 * t67;
t256 = -t299 - t346;
t182 = t256 * t411 - t504;
t183 = -t256 * t406 - t503;
t124 = -t182 * t407 + t183 * t412;
t72 = -pkin(5) * t521 + pkin(10) * t183 + t508;
t79 = t124 * t404 - t405 * t521;
t90 = -pkin(10) * t182 + t507;
t443 = pkin(3) * t79 - pkin(4) * t521 + pkin(9) * t124 + t407 * t90 + t412 * t72;
t440 = -t384 + t459;
t439 = t385 + t460;
t181 = -t238 * t412 + t242 * t407;
t271 = t334 + t517;
t139 = t181 * t404 + t271 * t405;
t437 = pkin(3) * t139 + pkin(4) * t271 + pkin(9) * t181 + t70;
t69 = -t120 * t412 + t121 * t407;
t435 = pkin(5) * t171 - t50;
t314 = -t389 - t353;
t260 = t314 * t404 + t529;
t434 = pkin(3) * t260 - t186;
t430 = -t453 + t489;
t16 = t29 * t412 - t511;
t11 = -t126 * t405 + t16 * t404;
t27 = -pkin(5) * t126 + pkin(10) * t29;
t428 = pkin(3) * t11 - pkin(4) * t126 + pkin(9) * t16 - pkin(10) * t511 + t412 * t27;
t427 = pkin(5) * t182 - t51;
t423 = (-qJD(3) + t401) * t378 - t451;
t402 = t409 ^ 2;
t398 = t402 * t416;
t386 = t397 - 0.2e1 * t460;
t383 = t396 + 0.2e1 * t459;
t379 = pkin(7) * t416 + t431;
t370 = -t376 + t389;
t369 = t375 - t389;
t366 = -t376 - t389;
t363 = t376 - t375;
t359 = -t389 - t375;
t344 = -t354 + t389;
t343 = t353 - t389;
t340 = -t375 - t376;
t330 = -t366 * t408 - t487;
t329 = t366 * t413 - t488;
t327 = t339 + t371;
t326 = t377 * t474 + t436;
t323 = t378 * t474 + t451;
t321 = t359 * t413 - t526;
t320 = t359 * t408 + t523;
t319 = t354 - t353;
t312 = -t334 + t351;
t311 = -t351 + t517;
t310 = (-t356 * t405 + t358 * t404) * t401;
t309 = (-t356 * t404 - t358 * t405) * t401;
t306 = t334 - t517;
t294 = -t353 - t354;
t291 = t343 * t405 - t497;
t290 = -t344 * t404 + t529;
t289 = t343 * t404 + t496;
t288 = t344 * t405 + t530;
t287 = -t342 * t404 - t496;
t283 = t328 * t408 + t413 * t423;
t282 = -t328 * t413 + t408 * t423;
t281 = t305 + t345;
t273 = -t299 + t346;
t272 = t298 - t346;
t269 = t305 * t405 - t358 * t485;
t268 = t305 * t404 + t358 * t484;
t267 = t356 * t484 + t404 * t453;
t266 = t356 * t485 - t405 * t453;
t261 = t314 * t405 - t530;
t258 = (-t335 * t412 + t337 * t407) * t352;
t257 = (-t335 * t407 - t337 * t412) * t352;
t249 = t299 - t298;
t241 = -t313 + t264;
t235 = t264 * t412 - t337 * t491;
t234 = t264 * t407 + t337 * t490;
t233 = t335 * t490 + t407 * t429;
t232 = t335 * t491 - t412 * t429;
t231 = -t286 * t408 + t287 * t413;
t230 = t286 * t413 + t287 * t408;
t229 = -qJ(4) * t286 - t498;
t228 = t258 * t405 + t303 * t404;
t227 = t258 * t404 - t303 * t405;
t226 = t281 * t404 + t405 * t430;
t225 = -t276 * t405 - t280 * t404;
t224 = -t281 * t405 + t404 * t430;
t223 = -t276 * t404 + t280 * t405;
t222 = (-t300 * t411 + t302 * t406) * t347;
t221 = (-t300 * t406 - t302 * t411) * t347;
t220 = pkin(3) * t224;
t219 = t311 * t412 - t501;
t218 = -t312 * t407 + t524;
t217 = t311 * t407 + t500;
t216 = t312 * t412 + t527;
t210 = -qJ(4) * t260 - t499;
t208 = t292 * t412 - t501;
t206 = -t260 * t408 + t261 * t413;
t205 = t260 * t413 + t261 * t408;
t203 = t284 * t407 + t524;
t201 = t235 * t405 + t464;
t200 = t233 * t405 - t464;
t199 = t235 * t404 - t463;
t198 = t233 * t404 + t463;
t197 = -pkin(3) * t280 + qJ(4) * t287 - t499;
t195 = -qJD(6) * t302 - t456;
t191 = t272 * t411 - t504;
t190 = -t273 * t406 + t525;
t189 = t272 * t406 + t503;
t188 = t273 * t411 + t528;
t185 = -pkin(3) * t276 + qJ(4) * t261 + t498;
t180 = t239 * t412 - t241 * t407;
t179 = -t238 * t407 - t242 * t412;
t178 = t239 * t407 + t241 * t412;
t176 = t219 * t405 - t238 * t404;
t175 = t218 * t405 + t242 * t404;
t174 = t219 * t404 + t238 * t405;
t173 = t218 * t404 - t242 * t405;
t162 = t196 * t411 - t302 * t493;
t161 = t196 * t406 + t302 * t492;
t160 = -t195 * t406 + t300 * t492;
t159 = t195 * t411 + t300 * t493;
t158 = t209 * t405 - t243 * t404;
t155 = -t224 * t408 + t226 * t413;
t154 = t224 * t413 + t226 * t408;
t153 = -t221 * t407 + t222 * t412;
t152 = t221 * t412 + t222 * t407;
t145 = t204 * t405 - t239 * t404;
t142 = t180 * t405 + t306 * t404;
t141 = t180 * t404 - t306 * t405;
t140 = t181 * t405 - t271 * t404;
t137 = t153 * t405 + t297 * t404;
t136 = t153 * t404 - t297 * t405;
t135 = -t189 * t407 + t191 * t412;
t134 = -t188 * t407 + t190 * t412;
t133 = t189 * t412 + t191 * t407;
t132 = t188 * t412 + t190 * t407;
t131 = -pkin(9) * t208 + t147;
t130 = -pkin(9) * t203 + t146;
t127 = pkin(3) * t128;
t123 = t182 * t412 + t183 * t407;
t117 = pkin(3) * t265 + qJ(4) * t129;
t115 = t171 * t412 + t172 * t407;
t112 = -t165 * t411 - t406 * t521;
t110 = -t165 * t406 + t411 * t521;
t109 = -t161 * t407 + t162 * t412;
t108 = -t159 * t407 + t160 * t412;
t107 = t161 * t412 + t162 * t407;
t106 = t159 * t412 + t160 * t407;
t105 = -t157 * t408 + t158 * t413;
t104 = t157 * t413 + t158 * t408;
t103 = -t144 * t408 + t145 * t413;
t102 = t144 * t413 + t145 * t408;
t101 = -qJ(4) * t224 - t128;
t100 = -t139 * t408 + t140 * t413;
t99 = t139 * t413 + t140 * t408;
t98 = -pkin(3) * t294 + qJ(4) * t226 + t129;
t97 = -pkin(4) * t208 + t121;
t95 = -pkin(4) * t203 + t120;
t94 = t109 * t405 + t466;
t93 = t108 * t405 - t466;
t92 = t109 * t404 - t465;
t91 = t108 * t404 + t465;
t85 = t135 * t405 - t166 * t404;
t84 = t134 * t405 + t169 * t404;
t83 = t135 * t404 + t166 * t405;
t82 = t134 * t404 - t169 * t405;
t80 = t124 * t405 + t404 * t521;
t77 = t116 * t405 + t165 * t404;
t74 = t129 * t413 - t506;
t73 = t129 * t408 + t505;
t64 = -t110 * t407 + t112 * t412;
t63 = t111 * t412 + t113 * t407;
t62 = t110 * t412 + t112 * t407;
t60 = t249 * t404 + t405 * t64;
t59 = -t249 * t405 + t404 * t64;
t58 = -pkin(9) * t179 - t69;
t57 = t212 * t404 + t405 * t65;
t54 = t150 * t404 + t405 * t70;
t48 = -qJ(4) * t157 + t131 * t405 - t404 * t97;
t47 = -qJ(4) * t144 + t130 * t405 - t404 * t95;
t46 = -t408 * t79 + t413 * t80;
t45 = t408 * t80 + t413 * t79;
t44 = -pkin(3) * t208 + qJ(4) * t158 + t131 * t404 + t405 * t97;
t43 = -pkin(3) * t203 + qJ(4) * t145 + t130 * t404 + t405 * t95;
t42 = -t408 * t76 + t413 * t77;
t41 = t408 * t77 + t413 * t76;
t40 = -pkin(4) * t63 - t513;
t39 = -qJ(4) * t139 + t179 * t514 + t405 * t58;
t38 = qJ(4) * t140 + t179 * t462 + t404 * t58;
t37 = -pkin(4) * t123 - t427;
t36 = -pkin(9) * t123 - t407 * t72 + t412 * t90;
t35 = -pkin(4) * t115 - t435;
t34 = -pkin(9) * t115 - t407 * t67 + t412 * t86;
t33 = -t408 * t56 + t413 * t57;
t32 = t408 * t57 + t413 * t56;
t31 = -t408 * t53 + t413 * t54;
t30 = t408 * t54 + t413 * t53;
t25 = -qJ(4) * t53 + (-pkin(9) * t405 + t514) * t69;
t20 = qJ(4) * t54 + (-pkin(9) * t404 + t462) * t69;
t19 = -qJ(4) * t79 + t36 * t405 - t37 * t404;
t18 = -qJ(4) * t76 + t34 * t405 - t35 * t404;
t17 = -pkin(3) * t123 + qJ(4) * t80 + t36 * t404 + t37 * t405;
t15 = t29 * t407 + t510;
t13 = -pkin(3) * t115 + qJ(4) * t77 + t34 * t404 + t35 * t405;
t12 = t126 * t404 + t16 * t405;
t9 = -pkin(9) * t63 - t22 * t407 + t24 * t412;
t8 = -pkin(4) * t15 - t516;
t7 = -qJ(4) * t56 - t40 * t404 + t405 * t9;
t6 = -pkin(9) * t15 - pkin(10) * t510 - t27 * t407;
t5 = -t11 * t408 + t12 * t413;
t4 = t11 * t413 + t12 * t408;
t3 = -pkin(3) * t63 + qJ(4) * t57 + t40 * t405 + t404 * t9;
t2 = -qJ(4) * t11 - t404 * t8 + t405 * t6;
t1 = -pkin(3) * t15 + qJ(4) * t12 + t404 * t6 + t405 * t8;
t10 = [0, 0, 0, 0, 0, qJDD(1), t458, t433, 0, 0, (t384 + t459) * t409, t383 * t414 + t386 * t409, t481 + t414 * (-t398 + t415), (t385 - t460) * t414, t409 * (t399 - t415) + t479, 0, t414 * t379 + pkin(1) * t386 + pkin(7) * (-t414 * t447 - t481), -t409 * t379 - pkin(1) * t383 + pkin(7) * (-t479 - t409 * (-t398 - t415)), pkin(1) * (t398 + t399) + (t402 + t403) * t509 + t452, pkin(1) * t379 + pkin(7) * t452, t409 * (t339 * t413 - t378 * t483) + t414 * (t339 * t408 + t378 * t482), t409 * (-t323 * t413 - t327 * t408) + t414 * (-t323 * t408 + t327 * t413), t409 * (-t370 * t408 + t523) + t414 * (t370 * t413 + t526), t409 * (-t338 * t408 - t377 * t482) + t414 * (t338 * t413 - t377 * t483), t409 * (t369 * t413 - t488) + t414 * (t369 * t408 + t487), (t409 * (t377 * t413 + t378 * t408) + t414 * (t377 * t408 - t378 * t413)) * t401, t409 * (-pkin(8) * t320 - t495) + t414 * (-pkin(2) * t323 + pkin(8) * t321 + t494) - pkin(1) * t323 + pkin(7) * (-t320 * t409 + t321 * t414), t409 * (-pkin(8) * t329 - t494) + t414 * (-pkin(2) * t326 + pkin(8) * t330 - t495) - pkin(1) * t326 + pkin(7) * (-t329 * t409 + t330 * t414), t409 * (-pkin(8) * t282 - t245) + t414 * (-pkin(2) * t340 + pkin(8) * t283 + t246) - pkin(1) * t340 + pkin(7) * (-t282 * t409 + t283 * t414), -pkin(8) * t502 + t414 * (pkin(2) * t341 + pkin(8) * t246) + pkin(1) * t341 + pkin(7) * (t246 * t414 - t502), t409 * (-t268 * t408 + t269 * t413) + t414 * (t268 * t413 + t269 * t408), t409 * (-t223 * t408 + t225 * t413) + t414 * (t223 * t413 + t225 * t408), t409 * (-t288 * t408 + t290 * t413) + t414 * (t288 * t413 + t290 * t408), t409 * (-t266 * t408 + t267 * t413) + t414 * (t266 * t413 + t267 * t408), t409 * (-t289 * t408 + t291 * t413) + t414 * (t289 * t413 + t291 * t408), t409 * (-t309 * t408 + t310 * t413) + t414 * (t309 * t413 + t310 * t408), t409 * (-pkin(8) * t205 - t185 * t408 + t210 * t413) + t414 * (-pkin(2) * t276 + pkin(8) * t206 + t185 * t413 + t210 * t408) - pkin(1) * t276 + pkin(7) * (-t205 * t409 + t206 * t414), t409 * (-pkin(8) * t230 - t197 * t408 + t229 * t413) + t414 * (-pkin(2) * t280 + pkin(8) * t231 + t197 * t413 + t229 * t408) - pkin(1) * t280 + pkin(7) * (-t230 * t409 + t231 * t414), t409 * (-pkin(8) * t154 + t101 * t413 - t408 * t98) + t414 * (-pkin(2) * t294 + pkin(8) * t155 + t101 * t408 + t413 * t98) - pkin(1) * t294 + pkin(7) * (-t154 * t409 + t155 * t414), t409 * (-pkin(8) * t73 - qJ(4) * t505 - t117 * t408) + t414 * (pkin(2) * t265 + pkin(8) * t74 - qJ(4) * t506 + t117 * t413) + pkin(1) * t265 + pkin(7) * (-t409 * t73 + t414 * t74), t409 * (-t199 * t408 + t201 * t413) + t414 * (t199 * t413 + t201 * t408), t409 * (-t141 * t408 + t142 * t413) + t414 * (t141 * t413 + t142 * t408), t409 * (-t173 * t408 + t175 * t413) + t414 * (t173 * t413 + t175 * t408), t409 * (-t198 * t408 + t200 * t413) + t414 * (t198 * t413 + t200 * t408), t409 * (-t174 * t408 + t176 * t413) + t414 * (t174 * t413 + t176 * t408), t409 * (-t227 * t408 + t228 * t413) + t414 * (t227 * t413 + t228 * t408), t409 * (-pkin(8) * t102 - t408 * t43 + t413 * t47) + t414 * (-pkin(2) * t203 + pkin(8) * t103 + t408 * t47 + t413 * t43) - pkin(1) * t203 + pkin(7) * (-t102 * t409 + t103 * t414), t409 * (-pkin(8) * t104 - t408 * t44 + t413 * t48) + t414 * (-pkin(2) * t208 + pkin(8) * t105 + t408 * t48 + t413 * t44) - pkin(1) * t208 + pkin(7) * (-t104 * t409 + t105 * t414), t409 * (-pkin(8) * t99 - t38 * t408 + t39 * t413) + t414 * (-pkin(2) * t179 + pkin(8) * t100 + t38 * t413 + t39 * t408) - pkin(1) * t179 + pkin(7) * (t100 * t414 - t409 * t99), t409 * (-pkin(8) * t30 - t20 * t408 + t25 * t413) + t414 * (-pkin(2) * t69 + pkin(8) * t31 + t20 * t413 + t25 * t408) - pkin(1) * t69 + pkin(7) * (-t30 * t409 + t31 * t414), t409 * (-t408 * t92 + t413 * t94) + t414 * (t408 * t94 + t413 * t92), t409 * (-t408 * t59 + t413 * t60) + t414 * (t408 * t60 + t413 * t59), t409 * (-t408 * t82 + t413 * t84) + t414 * (t408 * t84 + t413 * t82), t409 * (-t408 * t91 + t413 * t93) + t414 * (t408 * t93 + t413 * t91), t409 * (-t408 * t83 + t413 * t85) + t414 * (t408 * t85 + t413 * t83), t409 * (-t136 * t408 + t137 * t413) + t414 * (t136 * t413 + t137 * t408), t409 * (-pkin(8) * t41 - t13 * t408 + t18 * t413) + t414 * (-pkin(2) * t115 + pkin(8) * t42 + t13 * t413 + t18 * t408) - pkin(1) * t115 + pkin(7) * (-t409 * t41 + t414 * t42), t409 * (-pkin(8) * t45 - t17 * t408 + t19 * t413) + t414 * (-pkin(2) * t123 + pkin(8) * t46 + t17 * t413 + t19 * t408) - pkin(1) * t123 + pkin(7) * (-t409 * t45 + t414 * t46), t409 * (-pkin(8) * t32 - t3 * t408 + t413 * t7) + t414 * (-pkin(2) * t63 + pkin(8) * t33 + t3 * t413 + t408 * t7) - pkin(1) * t63 + pkin(7) * (-t32 * t409 + t33 * t414), t409 * (-pkin(8) * t4 - t1 * t408 + t2 * t413) + t414 * (-pkin(2) * t15 + pkin(8) * t5 + t1 * t413 + t2 * t408) - pkin(1) * t15 + pkin(7) * (-t4 * t409 + t414 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, t398 - t399, t396, t391, t397, qJDD(2), -t367, t441, 0, 0, -t364, t363, t328, t364, t423, t468, t408 * t441 - t413 * t367 + (-t408 * t439 + t413 * t440) * pkin(8) + (t408 * t447 + t413 * t469 + t320) * pkin(2), t413 * t441 + t408 * t367 + (-t408 * t440 - t413 * t439) * pkin(8) + (-t408 * t469 + t413 * t447 + t329) * pkin(2), pkin(2) * t282, pkin(2) * t245, t322, t319, t281, -t322, t430, t468, pkin(2) * t205 + t434, pkin(2) * t230 + t448, pkin(2) * t154 + t220, pkin(2) * t73 + t127, t234, t178, t216, t232, t217, t257, pkin(2) * t102 + t449, pkin(2) * t104 + t450, pkin(2) * t99 + t437, pkin(2) * t30 + t467, t107, t62, t132, t106, t133, t152, pkin(2) * t41 + t444, pkin(2) * t45 + t443, pkin(2) * t32 + t446, pkin(2) * t4 + t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t364, t363, t328, t364, t423, t468, -t295, -t296, 0, 0, t322, t319, t281, -t322, t430, t468, t434, t448, t220, t127, t234, t178, t216, t232, t217, t257, t449, t450, t437, t467, t107, t62, t132, t106, t133, t152, t444, t443, t446, t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t276, t280, t294, -t265, 0, 0, 0, 0, 0, 0, t203, t208, t179, t69, 0, 0, 0, 0, 0, 0, t115, t123, t63, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, t306, t242, -t307, -t238, t303, -t120, -t121, 0, 0, t251, t249, t169, -t251, -t166, t297, t435, t427, t513, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, t249, t169, -t251, -t166, t297, -t50, -t51, 0, 0;];
tauJ_reg  = t10;
