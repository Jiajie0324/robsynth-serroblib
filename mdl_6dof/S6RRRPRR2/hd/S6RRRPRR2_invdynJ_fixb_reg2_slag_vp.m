% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:08:47
% EndTime: 2019-03-09 18:09:10
% DurationCPUTime: 11.92s
% Computational Cost: add. (30020->765), mult. (71408->959), div. (0->0), fcn. (54840->18), ass. (0->394)
t366 = cos(qJ(2));
t557 = cos(qJ(3));
t448 = t557 * t366;
t424 = qJD(1) * t448;
t361 = sin(qJ(3));
t362 = sin(qJ(2));
t467 = qJD(1) * t362;
t445 = t361 * t467;
t257 = t424 - t445;
t279 = t361 * t366 + t362 * t557;
t258 = t279 * qJD(1);
t358 = sin(pkin(11));
t526 = cos(pkin(11));
t202 = -t257 * t526 + t258 * t358;
t571 = qJD(5) + t202;
t558 = pkin(8) + pkin(7);
t305 = t558 * t366;
t290 = qJD(1) * t305;
t259 = t361 * t290;
t304 = t558 * t362;
t288 = qJD(1) * t304;
t535 = qJD(2) * pkin(2);
t266 = -t288 + t535;
t208 = t266 * t557 - t259;
t251 = t258 * qJ(4);
t180 = t208 - t251;
t353 = qJD(2) + qJD(3);
t170 = pkin(3) * t353 + t180;
t263 = t557 * t290;
t209 = t266 * t361 + t263;
t500 = t257 * qJ(4);
t181 = t209 + t500;
t432 = t526 * t181;
t112 = t170 * t358 + t432;
t110 = pkin(9) * t353 + t112;
t349 = t366 * pkin(2);
t340 = t349 + pkin(1);
t303 = t340 * qJD(1);
t223 = -t257 * pkin(3) + qJD(4) - t303;
t391 = t257 * t358 + t258 * t526;
t126 = t202 * pkin(4) - pkin(9) * t391 + t223;
t360 = sin(qJ(5));
t365 = cos(qJ(5));
t69 = t110 * t365 + t126 * t360;
t587 = t69 * t571;
t488 = t358 * t361;
t536 = pkin(2) * qJD(3);
t248 = (t526 * t557 - t488) * t536;
t216 = -t288 * t557 - t259;
t189 = -t251 + t216;
t215 = t288 * t361 - t263;
t395 = t215 - t500;
t137 = t189 * t526 + t358 * t395;
t556 = pkin(3) * t258;
t143 = pkin(4) * t391 + pkin(9) * t202 + t556;
t341 = pkin(2) * t467;
t138 = t143 + t341;
t76 = -t137 * t360 + t138 * t365;
t586 = -t360 * t248 - t76;
t77 = t137 * t365 + t138 * t360;
t585 = -t365 * t248 + t77;
t465 = qJD(5) * t360;
t505 = t202 * t360;
t584 = t465 + t505;
t357 = qJ(2) + qJ(3);
t345 = sin(t357);
t347 = cos(t357);
t363 = sin(qJ(1));
t367 = cos(qJ(1));
t416 = g(1) * t367 + g(2) * t363;
t583 = -g(3) * t347 + t345 * t416;
t351 = qJDD(2) + qJDD(3);
t460 = qJD(1) * qJD(2);
t440 = t366 * t460;
t459 = t362 * qJDD(1);
t222 = qJDD(2) * pkin(2) + t558 * (-t440 - t459);
t441 = t362 * t460;
t458 = t366 * qJDD(1);
t226 = t558 * (-t441 + t458);
t142 = -qJD(3) * t209 + t222 * t557 - t361 * t226;
t480 = t361 * t362;
t412 = t353 * t480;
t433 = qJDD(1) * t557;
t425 = -t353 * t424 - t361 * t458 - t362 * t433;
t182 = qJD(1) * t412 + t425;
t91 = pkin(3) * t351 + qJ(4) * t182 - qJD(4) * t258 + t142;
t220 = t353 * t279;
t411 = t361 * t459 - t366 * t433;
t183 = qJD(1) * t220 + t411;
t442 = qJD(3) * t557;
t466 = qJD(3) * t361;
t426 = -t222 * t361 - t226 * t557 - t266 * t442 + t290 * t466;
t98 = -qJ(4) * t183 + qJD(4) * t257 - t426;
t46 = t358 * t91 + t526 * t98;
t44 = pkin(9) * t351 + t46;
t464 = qJD(5) * t365;
t124 = -t182 * t526 - t183 * t358;
t254 = pkin(2) * t441 - qJDD(1) * t340;
t160 = t183 * pkin(3) + qJDD(4) + t254;
t429 = t182 * t358 - t183 * t526;
t60 = -pkin(4) * t429 - t124 * pkin(9) + t160;
t12 = -t110 * t465 + t126 * t464 + t360 * t60 + t365 * t44;
t68 = -t110 * t360 + t126 * t365;
t582 = -t571 * t68 + t12;
t339 = pkin(2) * t557 + pkin(3);
t431 = t526 * t361;
t250 = pkin(2) * t431 + t339 * t358;
t245 = pkin(9) + t250;
t541 = -pkin(10) - t245;
t435 = qJD(5) * t541;
t456 = pkin(10) * t505;
t581 = t360 * t435 - t456 - t585;
t504 = t202 * t365;
t422 = pkin(5) * t391 + pkin(10) * t504;
t580 = t365 * t435 - t422 + t586;
t332 = pkin(3) * t358 + pkin(9);
t540 = -pkin(10) - t332;
t434 = qJD(5) * t540;
t171 = t358 * t181;
t122 = t180 * t526 - t171;
t75 = t122 * t365 + t143 * t360;
t579 = t360 * t434 - t456 - t75;
t74 = -t122 * t360 + t143 * t365;
t578 = t365 * t434 - t422 - t74;
t186 = -t353 * t365 + t360 * t391;
t188 = t353 * t360 + t365 * t391;
t359 = sin(qJ(6));
t364 = cos(qJ(6));
t131 = t186 * t364 + t188 * t359;
t405 = t186 * t359 - t188 * t364;
t522 = t131 * t405;
t577 = t202 * t391;
t486 = t359 * t365;
t278 = t360 * t364 + t486;
t457 = qJD(5) + qJD(6);
t218 = t457 * t278;
t575 = t202 * t278 + t218;
t462 = qJD(6) * t364;
t487 = t359 * t360;
t478 = t364 * t365;
t562 = t478 - t487;
t574 = t202 * t562 + t364 * t464 + t365 * t462 - t457 * t487;
t343 = pkin(11) + t357;
t330 = sin(t343);
t496 = t330 * t367;
t497 = t330 * t363;
t573 = g(1) * t496 + g(2) * t497;
t427 = t571 * t365;
t120 = qJDD(5) - t429;
t485 = t360 * t120;
t572 = -t427 * t571 - t485;
t570 = -t131 ^ 2 + t405 ^ 2;
t195 = qJD(6) + t571;
t453 = t124 * t360 + t353 * t465 + t391 * t464;
t399 = t351 * t365 - t453;
t463 = qJD(6) * t359;
t94 = -t124 * t365 - t351 * t360 - t353 * t464 + t391 * t465;
t39 = t186 * t462 + t188 * t463 - t359 * t399 + t364 * t94;
t569 = t131 * t195 - t39;
t331 = cos(t343);
t356 = qJ(5) + qJ(6);
t346 = cos(t356);
t490 = t346 * t363;
t344 = sin(t356);
t491 = t344 * t367;
t232 = -t331 * t490 + t491;
t489 = t346 * t367;
t492 = t344 * t363;
t234 = t331 * t489 + t492;
t10 = pkin(10) * t399 + t12;
t61 = -pkin(10) * t188 + t68;
t50 = pkin(5) * t571 + t61;
t62 = -pkin(10) * t186 + t69;
t58 = t365 * t60;
t13 = -qJD(5) * t69 - t360 * t44 + t58;
t9 = t120 * pkin(5) + t94 * pkin(10) + t13;
t3 = (qJD(6) * t50 + t10) * t364 + t359 * t9 - t62 * t463;
t546 = g(3) * t346;
t111 = t170 * t526 - t171;
t109 = -pkin(4) * t353 - t111;
t95 = pkin(5) * t186 + t109;
t568 = g(1) * t234 - g(2) * t232 + t95 * t131 + t330 * t546 - t3;
t231 = t331 * t492 + t489;
t233 = -t331 * t491 + t490;
t531 = t364 * t62;
t22 = t359 * t50 + t531;
t4 = -qJD(6) * t22 - t359 * t10 + t364 * t9;
t547 = g(3) * t344;
t567 = -g(1) * t233 + g(2) * t231 + t330 * t547 + t405 * t95 + t4;
t381 = qJD(6) * t405 + t359 * t94 + t364 * t399;
t566 = -t195 * t405 + t381;
t228 = -t304 * t361 + t305 * t557;
t277 = -t448 + t480;
t200 = -qJ(4) * t277 + t228;
t227 = -t304 * t557 - t305 * t361;
t394 = -qJ(4) * t279 + t227;
t152 = t200 * t526 + t358 * t394;
t147 = t365 * t152;
t211 = t277 * t526 + t279 * t358;
t212 = -t277 * t358 + t279 * t526;
t236 = pkin(3) * t277 - t340;
t150 = pkin(4) * t211 - pkin(9) * t212 + t236;
t81 = t150 * t360 + t147;
t472 = -t189 * t358 + t526 * t395 + (t358 * t557 + t431) * t536;
t542 = t365 * pkin(5);
t338 = pkin(4) + t542;
t368 = -pkin(10) - pkin(9);
t404 = -t330 * t368 + t331 * t338;
t417 = pkin(4) * t331 + pkin(9) * t330;
t564 = g(1) * t363 - g(2) * t367;
t563 = t584 * pkin(5);
t476 = t365 * t367;
t482 = t360 * t363;
t240 = t331 * t482 + t476;
t479 = t363 * t365;
t481 = t360 * t367;
t242 = -t331 * t481 + t479;
t561 = -g(1) * t242 + g(2) * t240;
t560 = -t39 * t562 + t405 * t575;
t118 = qJDD(6) + t120;
t559 = t278 * t118 + t195 * t574;
t555 = pkin(3) * t345;
t335 = pkin(3) * t347;
t470 = t335 + t349;
t287 = pkin(1) + t470;
t265 = t367 * t287;
t550 = g(2) * t265;
t316 = g(3) * t330;
t548 = g(3) * t331;
t544 = g(3) * t360;
t543 = g(3) * t366;
t539 = t358 * t98 - t526 * t91;
t224 = t541 * t360;
t348 = t365 * pkin(10);
t225 = t245 * t365 + t348;
t165 = t224 * t364 - t225 * t359;
t538 = qJD(6) * t165 + t359 * t580 + t364 * t581;
t166 = t224 * t359 + t225 * t364;
t537 = -qJD(6) * t166 - t359 * t581 + t364 * t580;
t11 = t12 * t365;
t534 = t13 * t360;
t532 = t359 * t62;
t530 = t94 * t360;
t269 = t540 * t360;
t270 = t332 * t365 + t348;
t206 = t269 * t364 - t270 * t359;
t529 = qJD(6) * t206 + t359 * t578 + t364 * t579;
t207 = t269 * t359 + t270 * t364;
t528 = -qJD(6) * t207 - t359 * t579 + t364 * t578;
t88 = t360 * t399;
t527 = -t186 * t464 + t88;
t525 = pkin(7) * qJDD(1);
t524 = t109 * t202;
t523 = t131 * t391;
t521 = t405 * t391;
t219 = -qJD(2) * t448 - t366 * t442 + t412;
t164 = -t219 * t526 - t220 * t358;
t520 = t164 * t365;
t519 = t186 * t391;
t518 = t186 * t202;
t517 = t186 * t360;
t516 = t188 * t186;
t515 = t188 * t391;
t514 = t188 * t360;
t513 = t188 * t365;
t512 = t195 * t391;
t511 = t571 * t391;
t510 = t391 ^ 2;
t509 = t391 * t353;
t507 = t202 ^ 2;
t506 = t202 * t353;
t502 = t212 * t360;
t501 = t212 * t365;
t499 = t258 * t257;
t494 = t331 * t363;
t493 = t331 * t367;
t484 = t360 * t164;
t113 = t365 * t120;
t473 = t563 + t472;
t471 = t248 - t137;
t354 = t362 ^ 2;
t355 = t366 ^ 2;
t469 = t354 - t355;
t468 = t354 + t355;
t342 = t362 * t535;
t371 = qJD(1) ^ 2;
t454 = t362 * t371 * t366;
t452 = g(1) * t493 + g(2) * t494 + t316;
t451 = t335 + t417;
t449 = qJD(2) * t558;
t447 = t212 * t465;
t446 = qJD(5) * t332 * t571;
t43 = -t351 * pkin(4) + t539;
t444 = -t43 - t548;
t205 = pkin(3) * t220 + t342;
t352 = -qJ(4) - t558;
t439 = pkin(5) * t360 - t352;
t289 = t362 * t449;
t291 = t366 * t449;
t168 = -t289 * t557 - t291 * t361 - t304 * t442 - t305 * t466;
t135 = -qJ(4) * t220 - qJD(4) * t277 + t168;
t169 = -qJD(3) * t228 + t289 * t361 - t291 * t557;
t374 = qJ(4) * t219 - qJD(4) * t279 + t169;
t73 = t135 * t526 + t358 * t374;
t163 = -t219 * t358 + t220 * t526;
t86 = pkin(4) * t163 - pkin(9) * t164 + t205;
t436 = -t360 * t73 + t365 * t86;
t72 = t135 * t358 - t374 * t526;
t80 = t150 * t365 - t152 * t360;
t121 = t180 * t358 + t432;
t151 = t200 * t358 - t394 * t526;
t428 = t360 * t571;
t423 = t362 * t440;
t421 = -g(1) * t497 + g(2) * t496;
t333 = -pkin(3) * t526 - pkin(4);
t420 = -t121 + t563;
t419 = -t131 * t574 + t278 * t381;
t418 = -pkin(4) * t330 - t555;
t414 = t118 * t562 - t195 * t575;
t413 = t335 + t404;
t67 = pkin(5) * t211 - pkin(10) * t501 + t80;
t70 = -pkin(10) * t502 + t81;
t34 = -t359 * t70 + t364 * t67;
t35 = t359 * t67 + t364 * t70;
t410 = -t360 * t69 - t365 * t68;
t409 = t360 * t68 - t365 * t69;
t249 = -pkin(2) * t488 + t339 * t526;
t408 = -t120 * t245 + t524;
t407 = -t120 * t332 + t524;
t406 = -t111 * t202 + t112 * t391;
t403 = -t330 * t338 - t331 * t368;
t402 = t109 * t464 + t331 * t544 + t360 * t43 + t391 * t69;
t401 = t109 * t465 + t365 * t573 - t391 * t68;
t400 = -t504 * t68 - t505 * t69 + t11 - t452;
t244 = -pkin(4) - t249;
t398 = -t571 * t584 + t113;
t397 = t416 * t330;
t396 = -0.2e1 * pkin(1) * t460 - pkin(7) * qJDD(2);
t393 = t212 * t464 + t484;
t392 = -t447 + t520;
t23 = t150 * t464 - t152 * t465 + t360 * t86 + t365 * t73;
t388 = t399 * t365;
t387 = t202 * t223 + t452 - t46;
t385 = -t223 * t391 - t539 - t548 + t573;
t370 = qJD(2) ^ 2;
t384 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t370 + t564;
t383 = pkin(1) * t371 + t416 - t525;
t382 = g(3) * t345 + t303 * t257 + t347 * t416 + t426;
t21 = t364 * t50 - t532;
t380 = -t21 * t574 - t22 * t575 - t4 * t278 + t3 * t562 - t452;
t33 = -pkin(5) * t399 + t43;
t379 = -t21 * t391 - t33 * t562 - t331 * t546 + t346 * t573 + t575 * t95;
t378 = qJD(5) * t410 + t11 - t534;
t376 = t22 * t391 + t33 * t278 + t331 * t547 - t344 * t397 + t574 * t95;
t373 = t303 * t258 + t142 + t583;
t295 = pkin(9) * t493;
t294 = pkin(9) * t494;
t293 = t333 - t542;
t292 = -pkin(2) * t362 - t555;
t272 = t367 * t292;
t271 = t363 * t292;
t243 = t331 * t476 + t482;
t241 = -t331 * t479 + t481;
t235 = t244 - t542;
t230 = t341 + t556;
t190 = -t257 ^ 2 + t258 ^ 2;
t161 = -t425 + (-t257 - t445) * t353;
t157 = t562 * t212;
t156 = t278 * t212;
t108 = pkin(5) * t502 + t151;
t102 = t124 + t506;
t101 = t429 + t509;
t99 = -t507 + t510;
t54 = t164 * t486 - t359 * t447 - t463 * t502 + (t457 * t501 + t484) * t364;
t53 = -t164 * t478 + t212 * t218 + t359 * t484;
t52 = t186 * t428 + t388;
t51 = t188 * t427 - t530;
t49 = pkin(5) * t393 + t72;
t48 = -t515 - t572;
t47 = t398 + t519;
t37 = t414 + t523;
t36 = t521 + t559;
t26 = t364 * t61 - t532;
t25 = -t359 * t61 - t531;
t24 = -qJD(5) * t81 + t436;
t20 = (-t94 - t518) * t365 - t571 * t514 + t527;
t17 = -pkin(10) * t393 + t23;
t16 = -pkin(10) * t520 + t163 * pkin(5) + (-t147 + (pkin(10) * t212 - t150) * t360) * qJD(5) + t436;
t15 = t131 * t575 + t381 * t562;
t14 = -t39 * t278 - t405 * t574;
t7 = t419 + t560;
t6 = -qJD(6) * t35 + t364 * t16 - t359 * t17;
t5 = qJD(6) * t34 + t359 * t16 + t364 * t17;
t1 = [0, 0, 0, 0, 0, qJDD(1), t564, t416, 0, 0, qJDD(1) * t354 + 0.2e1 * t423, 0.2e1 * t362 * t458 - 0.2e1 * t460 * t469, qJDD(2) * t362 + t366 * t370, qJDD(1) * t355 - 0.2e1 * t423, qJDD(2) * t366 - t362 * t370, 0, t362 * t396 + t366 * t384, -t362 * t384 + t366 * t396, 0.2e1 * t468 * t525 - t416, -g(1) * (-pkin(1) * t363 + pkin(7) * t367) - g(2) * (pkin(1) * t367 + pkin(7) * t363) + (pkin(7) ^ 2 * t468 + pkin(1) ^ 2) * qJDD(1), -t182 * t279 - t219 * t258, t182 * t277 - t183 * t279 - t219 * t257 - t220 * t258, -t219 * t353 + t279 * t351, t183 * t277 - t220 * t257, -t220 * t353 - t277 * t351, 0, t169 * t353 - t340 * t183 - t303 * t220 + t227 * t351 + t254 * t277 - t257 * t342 + t347 * t564, -t168 * t353 + t340 * t182 + t303 * t219 - t228 * t351 + t254 * t279 + t258 * t342 - t345 * t564, -t142 * t279 + t168 * t257 - t169 * t258 + t182 * t227 - t183 * t228 + t208 * t219 - t209 * t220 + t277 * t426 - t416, -t426 * t228 + t209 * t168 + t142 * t227 + t208 * t169 - t254 * t340 - t303 * t342 - g(1) * (-t340 * t363 + t367 * t558) - g(2) * (t340 * t367 + t363 * t558) t124 * t212 + t164 * t391, -t124 * t211 - t163 * t391 - t164 * t202 + t212 * t429, t164 * t353 + t212 * t351, t163 * t202 - t211 * t429, -t163 * t353 - t211 * t351, 0, -t151 * t351 + t160 * t211 + t223 * t163 + t205 * t202 - t236 * t429 + t331 * t564 - t72 * t353, t124 * t236 - t152 * t351 + t160 * t212 + t164 * t223 + t205 * t391 - t353 * t73 + t421, -t111 * t164 - t112 * t163 + t124 * t151 + t152 * t429 - t202 * t73 - t211 * t46 + t212 * t539 + t391 * t72 - t416, t46 * t152 + t112 * t73 + t539 * t151 - t111 * t72 + t160 * t236 + t223 * t205 - g(1) * (-t287 * t363 - t367 * t352) - g(2) * (-t363 * t352 + t265) t188 * t392 - t501 * t94 (-t186 * t365 - t514) * t164 + (t388 + t530 + (-t513 + t517) * qJD(5)) * t212, t113 * t212 + t188 * t163 - t94 * t211 + t392 * t571, t186 * t393 - t212 * t88, -t163 * t186 + t211 * t399 - t212 * t485 - t393 * t571, t120 * t211 + t163 * t571, -g(1) * t241 - g(2) * t243 + t109 * t393 + t80 * t120 + t13 * t211 - t151 * t399 + t68 * t163 + t72 * t186 + t24 * t571 + t43 * t502, -g(1) * t240 - g(2) * t242 + t109 * t392 - t12 * t211 - t81 * t120 - t151 * t94 - t69 * t163 + t72 * t188 - t23 * t571 + t43 * t501, -t23 * t186 + t81 * t399 - t24 * t188 + t80 * t94 + t410 * t164 + (qJD(5) * t409 - t12 * t360 - t13 * t365) * t212 - t421, -t550 + t109 * t72 + t12 * t81 + t13 * t80 + t43 * t151 + t69 * t23 + t68 * t24 + (g(1) * t352 - g(2) * t417) * t367 + (-g(1) * (-t287 - t417) + g(2) * t352) * t363, -t157 * t39 + t405 * t53, t131 * t53 + t156 * t39 + t157 * t381 + t405 * t54, t118 * t157 - t163 * t405 - t195 * t53 - t211 * t39, t131 * t54 - t156 * t381, -t118 * t156 - t131 * t163 - t195 * t54 + t211 * t381, t118 * t211 + t163 * t195, -g(1) * t232 - g(2) * t234 - t108 * t381 + t118 * t34 + t131 * t49 + t156 * t33 + t163 * t21 + t195 * t6 + t211 * t4 + t54 * t95, -g(1) * t231 - g(2) * t233 - t108 * t39 - t118 * t35 + t157 * t33 - t163 * t22 - t195 * t5 - t211 * t3 - t405 * t49 - t53 * t95, -t131 * t5 - t156 * t3 - t157 * t4 + t21 * t53 - t22 * t54 + t34 * t39 + t35 * t381 + t405 * t6 - t421, -t550 + t33 * t108 + t21 * t6 + t22 * t5 + t3 * t35 + t4 * t34 + t95 * t49 + (-g(1) * t439 - g(2) * t404) * t367 + (-g(1) * (-t287 - t404) - g(2) * t439) * t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t454, t469 * t371, t459, t454, t458, qJDD(2), t362 * t383 - t543, g(3) * t362 + t366 * t383, 0, 0, -t499, t190, t161, t499, -t411, t351, -t215 * t353 + (t257 * t467 + t351 * t557 - t353 * t466) * pkin(2) + t373, t216 * t353 + (-t258 * t467 - t351 * t361 - t353 * t442) * pkin(2) + t382 (t209 + t215) * t258 + (t208 - t216) * t257 + (t557 * t182 - t183 * t361 + (t257 * t557 + t258 * t361) * qJD(3)) * pkin(2), -t208 * t215 - t209 * t216 + (t557 * t142 - t543 - t426 * t361 + (-t208 * t361 + t209 * t557) * qJD(3) + (qJD(1) * t303 + t416) * t362) * pkin(2), t577, t99, t102, -t577, t101, t351, -t230 * t202 + t249 * t351 - t353 * t472 + t385, -t230 * t391 - t250 * t351 - t353 * t471 + t387, -t124 * t249 - t202 * t471 + t250 * t429 + t391 * t472 + t406, -g(3) * t470 - t111 * t472 + t112 * t471 - t223 * t230 - t249 * t539 + t46 * t250 - t292 * t416, t51, t20, t48, t52, t47, -t511, t244 * t453 + (-t244 * t351 + t444) * t365 + t408 * t360 + t472 * t186 + (-t245 * t464 + t586) * t571 + t401, -t244 * t94 + t408 * t365 - t360 * t397 + t472 * t188 + (t245 * t465 + t585) * t571 + t402, t77 * t186 + t76 * t188 + (-qJD(5) * t68 - t248 * t186 + (qJD(5) * t188 + t399) * t245) * t365 + (t248 * t188 - t245 * t94 - t13 + (t186 * t245 - t69) * qJD(5)) * t360 + t400, t43 * t244 - t69 * t77 - t68 * t76 - g(1) * (-pkin(4) * t496 + t272 + t295) - g(2) * (-pkin(4) * t497 + t271 + t294) - g(3) * (t349 + t451) - t409 * t248 + t472 * t109 + t378 * t245, t14, t7, t36, t15, t37, -t512, t165 * t118 + t131 * t473 + t195 * t537 - t235 * t381 + t379, -t166 * t118 - t195 * t538 - t235 * t39 - t405 * t473 + t376, -t131 * t538 + t165 * t39 + t166 * t381 + t405 * t537 + t380, t3 * t166 + t4 * t165 + t33 * t235 - g(1) * (t367 * t403 + t272) - g(2) * (t363 * t403 + t271) - g(3) * (t349 + t413) + t473 * t95 + t538 * t22 + t537 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t499, t190, t161, t499, -t411, t351, t209 * t353 + t373, t208 * t353 + t382, 0, 0, t577, t99, t102, -t577, t101, t351, t121 * t353 + (-t202 * t258 + t351 * t526) * pkin(3) + t385, t122 * t353 + (-t258 * t391 - t351 * t358) * pkin(3) + t387, -t121 * t391 + t122 * t202 + (-t124 * t526 + t358 * t429) * pkin(3) + t406, t111 * t121 - t112 * t122 + (-t223 * t258 + t358 * t46 - t526 * t539 + t583) * pkin(3), t51, t20, t48, t52, t47, -t511, t333 * t453 - t74 * t571 - t121 * t186 + t407 * t360 + (-t333 * t351 + t444 - t446) * t365 + t401, -t121 * t188 + t75 * t571 - t333 * t94 + t407 * t365 + (-t397 + t446) * t360 + t402, -t534 + t75 * t186 + t74 * t188 + (t388 - t530) * t332 + ((t513 + t517) * t332 + t410) * qJD(5) + t400, t43 * t333 - t69 * t75 - t68 * t74 - t109 * t121 - g(1) * (t367 * t418 + t295) - g(2) * (t363 * t418 + t294) - g(3) * t451 + t378 * t332, t14, t7, t36, t15, t37, -t512, t206 * t118 + t131 * t420 + t195 * t528 - t293 * t381 + t379, -t207 * t118 - t195 * t529 - t293 * t39 - t405 * t420 + t376, -t131 * t529 + t206 * t39 + t207 * t381 + t405 * t528 + t380, -g(3) * t413 + t4 * t206 + t3 * t207 + t21 * t528 + t22 * t529 + t33 * t293 + t420 * t95 + t416 * (-t403 + t555); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t429 + t509, t124 - t506, -t507 - t510, t111 * t391 + t112 * t202 + t160 - t564, 0, 0, 0, 0, 0, 0, t398 - t519, -t515 + t572 (t94 - t518) * t365 + t188 * t428 + t527, -t109 * t391 + (t13 + t587) * t365 + t582 * t360 - t564, 0, 0, 0, 0, 0, 0, t414 - t523, t521 - t559, t419 - t560, -t21 * t575 + t22 * t574 + t3 * t278 - t391 * t95 + t4 * t562 - t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t516, -t186 ^ 2 + t188 ^ 2, t186 * t571 - t94, -t516, t188 * t571 + t399, t120, -t110 * t464 - t109 * t188 + t587 + t58 + (-qJD(5) * t126 + t316 - t44) * t360 + t561, g(1) * t243 - g(2) * t241 + t109 * t186 + t316 * t365 - t582, 0, 0, -t522, t570, t569, t522, t566, t118, -t25 * t195 + (t118 * t364 - t131 * t188 - t195 * t463) * pkin(5) + t567, t26 * t195 + (-t118 * t359 + t188 * t405 - t195 * t462) * pkin(5) + t568, -t22 * t405 + t26 * t131 - t21 * t131 - t25 * t405 + (t359 * t381 + t364 * t39 + (-t131 * t364 - t359 * t405) * qJD(6)) * pkin(5), -t21 * t25 - t22 * t26 + (t3 * t359 + t4 * t364 - t95 * t188 + t330 * t544 + (-t21 * t359 + t22 * t364) * qJD(6) + t561) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t522, t570, t569, t522, t566, t118, t22 * t195 + t567, t21 * t195 + t568, 0, 0;];
tau_reg  = t1;
