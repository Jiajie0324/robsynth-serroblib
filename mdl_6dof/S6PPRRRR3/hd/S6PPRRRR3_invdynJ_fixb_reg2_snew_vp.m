% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PPRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 21:20
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PPRRRR3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRR3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRR3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRR3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PPRRRR3_invdynJ_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 21:16:11
% EndTime: 2019-05-04 21:16:24
% DurationCPUTime: 6.74s
% Computational Cost: add. (43752->438), mult. (84242->708), div. (0->0), fcn. (72826->18), ass. (0->310)
t223 = sin(qJ(6));
t221 = cos(pkin(8));
t214 = qJD(3) * t221 + qJD(4);
t224 = sin(qJ(5));
t228 = cos(qJ(5));
t225 = sin(qJ(4));
t218 = sin(pkin(8));
t304 = qJD(3) * t218;
t290 = t225 * t304;
t190 = t214 * t224 + t228 * t290;
t229 = cos(qJ(4));
t303 = qJD(3) * t229;
t289 = t218 * t303;
t209 = -qJD(5) + t289;
t227 = cos(qJ(6));
t172 = t190 * t223 + t209 * t227;
t174 = t190 * t227 - t209 * t223;
t150 = t174 * t172;
t297 = qJDD(3) * t225;
t196 = (qJD(4) * t303 + t297) * t218;
t213 = qJDD(3) * t221 + qJDD(4);
t282 = t196 * t224 - t213 * t228;
t162 = -qJD(5) * t190 - t282;
t161 = qJDD(6) - t162;
t337 = -t150 + t161;
t344 = t223 * t337;
t343 = t227 * t337;
t226 = sin(qJ(3));
t230 = cos(qJ(3));
t219 = sin(pkin(7));
t220 = sin(pkin(6));
t321 = sin(pkin(13));
t323 = cos(pkin(13));
t245 = g(1) * t321 - g(2) * t323;
t306 = -g(3) + qJDD(1);
t324 = cos(pkin(6));
t241 = -t220 * t245 + t306 * t324 + qJDD(2);
t240 = t219 * t241;
t222 = cos(pkin(7));
t246 = -g(1) * t323 - g(2) * t321;
t320 = sin(pkin(14));
t322 = cos(pkin(14));
t334 = t220 * t306 + t245 * t324;
t238 = t320 * t246 - t322 * t334;
t340 = t222 * t238;
t236 = t240 - t340;
t239 = t322 * t246 + t320 * t334;
t126 = -t226 * t239 + t230 * t236;
t231 = qJD(3) ^ 2;
t330 = pkin(10) * t218;
t234 = qJDD(3) * pkin(3) + t231 * t330 + t126;
t237 = t219 * t238 + t222 * t241;
t342 = t218 * t237 + t221 * t234;
t215 = t218 ^ 2;
t341 = t215 * (qJD(3) * t214 - t221 * t231);
t298 = qJDD(3) * t218;
t278 = -qJD(4) * t290 + t229 * t298;
t192 = -qJDD(5) + t278;
t188 = -t214 * t228 + t224 * t290;
t313 = t190 * t188;
t243 = -t192 - t313;
t339 = t224 * t243;
t338 = t228 * t243;
t252 = -t196 * t228 - t213 * t224;
t163 = -qJD(5) * t188 - t252;
t181 = t188 * t209;
t143 = t163 + t181;
t203 = t214 * t289;
t336 = t196 + t203;
t202 = t214 * t290;
t335 = t202 - t278;
t184 = qJD(6) + t188;
t283 = t163 * t223 + t192 * t227;
t106 = (qJD(6) - t184) * t174 + t283;
t140 = (qJD(5) + t209) * t190 + t282;
t127 = t226 * t236 + t230 * t239;
t121 = -t231 * pkin(3) + pkin(10) * t298 + t127;
t78 = t229 * t121 + t225 * t342;
t170 = t172 ^ 2;
t171 = t174 ^ 2;
t182 = t184 ^ 2;
t186 = t188 ^ 2;
t187 = t190 ^ 2;
t333 = t209 ^ 2;
t332 = t214 ^ 2;
t331 = pkin(5) * t224;
t329 = t229 * pkin(4);
t96 = t218 * t234 - t221 * t237;
t232 = pkin(4) * t335 - pkin(11) * t336 - t96;
t280 = -pkin(11) * t225 - t329;
t288 = t280 * t304 ^ 2;
t70 = -t332 * pkin(4) + t213 * pkin(11) + t229 * t288 + t78;
t51 = t224 * t232 + t228 * t70;
t166 = pkin(5) * t188 - pkin(12) * t190;
t50 = t224 * t70 - t228 * t232;
t45 = pkin(5) * t192 - pkin(12) * t333 + t166 * t190 + t50;
t328 = t223 * t45;
t305 = t342 * t229;
t69 = -t213 * pkin(4) - t332 * pkin(11) + (t121 + t288) * t225 - t305;
t327 = t224 * t69;
t326 = t227 * t45;
t325 = t228 * t69;
t116 = t150 + t161;
t319 = t116 * t223;
t318 = t116 * t227;
t157 = t192 - t313;
t317 = t157 * t224;
t316 = t157 * t228;
t315 = t184 * t223;
t314 = t184 * t227;
t312 = t209 * t224;
t311 = t209 * t228;
t310 = t215 * t231;
t208 = t225 * t229 * t310;
t193 = t208 + t213;
t309 = t225 * t193;
t194 = -t208 + t213;
t307 = t229 * t194;
t302 = qJD(5) - t209;
t299 = qJD(6) + t184;
t296 = t224 * t150;
t295 = t228 * t150;
t216 = t225 ^ 2;
t294 = t216 * t310;
t217 = t229 ^ 2;
t293 = t217 * t310;
t292 = t229 * t313;
t291 = -pkin(5) * t228 - pkin(4);
t46 = -pkin(5) * t333 - pkin(12) * t192 - t166 * t188 + t51;
t56 = -t143 * pkin(12) + (-t190 * t209 - t162) * pkin(5) + t69;
t31 = t223 * t46 - t227 * t56;
t32 = t223 * t56 + t227 * t46;
t19 = t223 * t31 + t227 * t32;
t30 = t224 * t50 + t228 * t51;
t287 = t220 * t322;
t286 = t220 * t320;
t285 = t222 * t322;
t281 = -pkin(5) * t45 + pkin(12) * t19;
t10 = t19 * t228 + t224 * t45;
t18 = t223 * t32 - t227 * t31;
t277 = t10 * t225 - t18 * t229;
t9 = t19 * t224 - t228 * t45;
t4 = -t218 * t9 + t221 * t277;
t6 = t10 * t229 + t18 * t225;
t279 = t226 * t6 + t230 * t4;
t275 = t225 * t30 - t229 * t69;
t29 = t224 * t51 - t228 * t50;
t14 = -t218 * t29 + t221 * t275;
t21 = t225 * t69 + t229 * t30;
t276 = t14 * t230 + t21 * t226;
t128 = t170 + t171;
t256 = -t163 * t227 + t192 * t223;
t125 = -qJD(6) * t172 - t256;
t160 = t184 * t172;
t110 = t125 + t160;
t73 = -t106 * t227 + t110 * t223;
t58 = -t128 * t224 + t228 * t73;
t71 = -t106 * t223 - t110 * t227;
t274 = t225 * t58 - t229 * t71;
t108 = -t174 * t299 - t283;
t133 = -t182 - t170;
t90 = t133 * t227 - t344;
t63 = -t108 * t224 + t228 * t90;
t89 = t133 * t223 + t343;
t273 = t225 * t63 - t229 * t89;
t111 = t172 * t299 + t256;
t146 = -t171 - t182;
t92 = -t146 * t223 - t318;
t65 = -t111 * t224 + t228 * t92;
t91 = t146 * t227 - t319;
t272 = t225 * t65 - t229 * t91;
t77 = t121 * t225 - t305;
t271 = t225 * t78 - t229 * t77;
t47 = t225 * t77 + t229 * t78;
t57 = t128 * t228 + t224 * t73;
t27 = -t218 * t57 + t221 * t274;
t43 = t225 * t71 + t229 * t58;
t270 = t226 * t43 + t230 * t27;
t62 = t108 * t228 + t224 * t90;
t35 = -t218 * t62 + t221 * t273;
t48 = t225 * t89 + t229 * t63;
t269 = t226 * t48 + t230 * t35;
t64 = t111 * t228 + t224 * t92;
t37 = -t218 * t64 + t221 * t272;
t52 = t225 * t91 + t229 * t65;
t268 = t226 * t52 + t230 * t37;
t42 = t218 * t96 + t221 * t271;
t267 = t226 * t47 + t230 * t42;
t144 = t163 - t181;
t113 = -t140 * t224 - t144 * t228;
t114 = -t140 * t228 + t144 * t224;
t154 = t186 + t187;
t263 = t114 * t225 + t154 * t229;
t61 = -t113 * t218 + t221 * t263;
t87 = t114 * t229 - t154 * t225;
t266 = t226 * t87 + t230 * t61;
t164 = -t333 - t186;
t122 = t164 * t224 + t338;
t123 = t164 * t228 - t339;
t141 = -t190 * t302 - t282;
t262 = t123 * t225 + t141 * t229;
t76 = -t122 * t218 + t221 * t262;
t94 = t123 * t229 - t141 * t225;
t265 = t226 * t94 + t230 * t76;
t168 = -t187 - t333;
t129 = t168 * t228 + t317;
t130 = -t168 * t224 + t316;
t145 = t188 * t302 + t252;
t260 = t130 * t225 + t145 * t229;
t80 = -t129 * t218 + t221 * t260;
t95 = t130 * t229 - t145 * t225;
t264 = t226 * t95 + t230 * t80;
t261 = t230 * t126 + t226 * t127;
t201 = (-t216 - t217) * t310;
t178 = -t203 + t196;
t179 = t202 + t278;
t255 = -t178 * t229 + t179 * t225;
t135 = -t201 * t218 + t221 * t255;
t152 = t178 * t225 + t179 * t229;
t259 = t135 * t230 + t152 * t226;
t177 = (t297 + (qJD(4) + t214) * t303) * t218;
t183 = -t294 - t332;
t254 = t183 * t229 - t194 * t225;
t139 = -t177 * t218 + t221 * t254;
t165 = -t183 * t225 - t307;
t258 = t139 * t230 + t165 * t226;
t197 = -t293 - t332;
t253 = t193 * t229 + t197 * t225;
t148 = -t218 * t335 + t221 * t253;
t169 = t197 * t229 - t309;
t257 = t148 * t230 + t169 * t226;
t250 = qJDD(3) * t230 - t226 * t231;
t249 = -qJDD(3) * t226 - t230 * t231;
t248 = pkin(5) * t108 + pkin(12) * t90 - t326;
t247 = pkin(5) * t111 + pkin(12) * t92 + t328;
t244 = pkin(5) * t128 + pkin(12) * t73 + t19;
t200 = (t216 - t217) * t310;
t199 = t250 * t219;
t198 = t249 * t219;
t176 = -t187 + t333;
t175 = t186 - t333;
t167 = t187 - t186;
t156 = -t171 + t182;
t155 = t170 - t182;
t153 = (t188 * t224 + t190 * t228) * t209;
t149 = t171 - t170;
t147 = t218 * t253 + t221 * t335;
t138 = t177 * t221 + t218 * t254;
t137 = t163 * t224 - t190 * t311;
t136 = t162 * t228 - t188 * t312;
t134 = t201 * t221 + t218 * t255;
t132 = t175 * t224 - t316;
t131 = t176 * t228 + t339;
t124 = -qJD(6) * t174 - t283;
t120 = (-t172 * t227 + t174 * t223) * t184;
t119 = (-t172 * t223 - t174 * t227) * t184;
t112 = t141 * t224 + t143 * t228;
t109 = t125 - t160;
t105 = t125 * t227 - t174 * t315;
t104 = t125 * t223 + t174 * t314;
t103 = -t124 * t223 + t172 * t314;
t102 = -t124 * t227 - t172 * t315;
t101 = t120 * t224 - t161 * t228;
t100 = t155 * t227 - t319;
t99 = -t156 * t223 + t343;
t98 = t155 * t223 + t318;
t97 = t156 * t227 + t344;
t93 = t147 * t222 + t219 * t257;
t88 = t138 * t222 + t219 * t258;
t86 = t105 * t224 - t295;
t85 = t103 * t224 + t295;
t82 = t134 * t222 + t219 * t259;
t81 = t222 ^ 2 * t241 + (t261 + t340) * t219;
t79 = t129 * t221 + t218 * t260;
t75 = t122 * t221 + t218 * t262;
t74 = t108 * t227 - t109 * t223;
t72 = t108 * t223 + t109 * t227;
t67 = t100 * t224 + t106 * t228;
t66 = -t110 * t228 + t224 * t99;
t60 = t113 * t221 + t218 * t263;
t59 = -t149 * t228 + t224 * t74;
t54 = pkin(4) * t145 + pkin(11) * t130 + t327;
t53 = pkin(4) * t141 + pkin(11) * t123 - t325;
t44 = t219 * t264 + t222 * t79;
t41 = t218 * t271 - t221 * t96;
t40 = t219 * t265 + t222 * t75;
t39 = -pkin(12) * t91 + t326;
t38 = -pkin(12) * t89 + t328;
t36 = t218 * t272 + t221 * t64;
t34 = t218 * t273 + t221 * t62;
t33 = t219 * t266 + t222 * t60;
t26 = t218 * t274 + t221 * t57;
t25 = -pkin(5) * t91 + t32;
t24 = -pkin(5) * t89 + t31;
t23 = pkin(4) * t154 + pkin(11) * t114 + t30;
t22 = -pkin(4) * t69 + pkin(11) * t30;
t20 = t219 * t267 + t222 * t41;
t17 = t219 * t268 + t222 * t36;
t16 = t219 * t269 + t222 * t34;
t15 = -pkin(12) * t71 - t18;
t13 = t218 * t275 + t221 * t29;
t12 = -pkin(4) * t91 + pkin(11) * t65 + t224 * t39 + t228 * t25;
t11 = -pkin(4) * t89 + pkin(11) * t63 + t224 * t38 + t228 * t24;
t8 = t219 * t270 + t222 * t26;
t7 = pkin(11) * t58 + t15 * t224 + t291 * t71;
t5 = t13 * t222 + t219 * t276;
t3 = t218 * t277 + t221 * t9;
t2 = pkin(11) * t10 + (-pkin(12) * t224 + t291) * t18;
t1 = t219 * t279 + t222 * t3;
t28 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t306, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238 * t287 + t239 * t286 + t241 * t324, 0, 0, 0, 0, 0, 0, t324 * t199 + (t249 * t320 + t250 * t285) * t220, t324 * t198 + (t249 * t285 - t250 * t320) * t220, 0, (-t126 * t226 + t127 * t230) * t286 + (-t219 ^ 2 * t238 + (-t240 + t261) * t222) * t287 + t324 * t81, 0, 0, 0, 0, 0, 0, t324 * t93 + (t320 * (-t148 * t226 + t169 * t230) + t322 * (-t147 * t219 + t222 * t257)) * t220, t324 * t88 + (t320 * (-t139 * t226 + t165 * t230) + t322 * (-t138 * t219 + t222 * t258)) * t220, t324 * t82 + (t320 * (-t135 * t226 + t152 * t230) + t322 * (-t134 * t219 + t222 * t259)) * t220, t324 * t20 + (t320 * (-t226 * t42 + t230 * t47) + t322 * (-t219 * t41 + t222 * t267)) * t220, 0, 0, 0, 0, 0, 0, t324 * t40 + (t320 * (-t226 * t76 + t230 * t94) + t322 * (-t219 * t75 + t222 * t265)) * t220, t324 * t44 + (t320 * (-t226 * t80 + t230 * t95) + t322 * (-t219 * t79 + t222 * t264)) * t220, t324 * t33 + (t320 * (-t226 * t61 + t230 * t87) + t322 * (-t219 * t60 + t222 * t266)) * t220, t324 * t5 + (t320 * (-t14 * t226 + t21 * t230) + t322 * (-t13 * t219 + t222 * t276)) * t220, 0, 0, 0, 0, 0, 0, t324 * t16 + (t320 * (-t226 * t35 + t230 * t48) + t322 * (-t219 * t34 + t222 * t269)) * t220, t324 * t17 + (t320 * (-t226 * t37 + t230 * t52) + t322 * (-t219 * t36 + t222 * t268)) * t220, t324 * t8 + (t320 * (-t226 * t27 + t230 * t43) + t322 * (-t219 * t26 + t222 * t270)) * t220, t324 * t1 + (t320 * (-t226 * t4 + t230 * t6) + t322 * (-t219 * t3 + t222 * t279)) * t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241, 0, 0, 0, 0, 0, 0, t199, t198, 0, t81, 0, 0, 0, 0, 0, 0, t93, t88, t82, t20, 0, 0, 0, 0, 0, 0, t40, t44, t33, t5, 0, 0, 0, 0, 0, 0, t16, t17, t8, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t126, -t127, 0, 0, (t196 * t218 + t229 * t341) * t225, t221 * t200 + (-t225 * t335 + t229 * t336) * t218, t221 * t178 + (t309 + t229 * (-t294 + t332)) * t218, (t218 * t278 - t225 * t341) * t229, t221 * t179 + (t225 * (t293 - t332) + t307) * t218, t221 * t213, pkin(3) * t148 - t221 * t77 + (pkin(10) * t169 + t229 * t96) * t218, pkin(3) * t139 - t221 * t78 + (pkin(10) * t165 - t225 * t96) * t218, pkin(3) * t135 + (pkin(10) * t152 + t47) * t218, pkin(3) * t42 + t330 * t47, t221 * t137 + (t225 * (t163 * t228 + t190 * t312) - t292) * t218, t221 * t112 + (t225 * (t141 * t228 - t143 * t224) - t229 * t167) * t218, t221 * t131 + (t225 * (-t176 * t224 + t338) - t229 * t144) * t218, t221 * t136 + (t225 * (-t162 * t224 - t188 * t311) + t292) * t218, t221 * t132 + (t225 * (t175 * t228 + t317) + t229 * t140) * t218, t221 * t153 + (t229 * t192 + t225 * (t188 * t228 - t190 * t224) * t209) * t218, pkin(3) * t76 + t221 * t53 + (t225 * (-pkin(11) * t122 + t327) + t229 * (-pkin(4) * t122 + t50) + pkin(10) * t94) * t218, pkin(3) * t80 + t221 * t54 + (t225 * (-pkin(11) * t129 + t325) + t229 * (-pkin(4) * t129 + t51) + pkin(10) * t95) * t218, pkin(3) * t61 + t221 * t23 + (t225 * (-pkin(11) * t113 - t29) - t113 * t329 + pkin(10) * t87) * t218, pkin(3) * t14 + t22 * t221 + (pkin(10) * t21 + t280 * t29) * t218, t221 * t86 + (t225 * (t105 * t228 + t296) - t229 * t104) * t218, t221 * t59 + (t225 * (t149 * t224 + t228 * t74) - t229 * t72) * t218, t221 * t66 + (t225 * (t110 * t224 + t228 * t99) - t229 * t97) * t218, t221 * t85 + (t225 * (t103 * t228 - t296) + t229 * t102) * t218, t221 * t67 + (t225 * (t100 * t228 - t106 * t224) - t229 * t98) * t218, t221 * t101 + (t225 * (t120 * t228 + t161 * t224) - t229 * t119) * t218, pkin(3) * t35 + t221 * t11 + (t225 * (-pkin(11) * t62 - t224 * t24 + t228 * t38) + t229 * (-pkin(4) * t62 - t248) + pkin(10) * t48) * t218, pkin(3) * t37 + t221 * t12 + (t225 * (-pkin(11) * t64 - t224 * t25 + t228 * t39) + t229 * (-pkin(4) * t64 - t247) + pkin(10) * t52) * t218, pkin(3) * t27 + t221 * t7 + (t225 * (-pkin(11) * t57 + t15 * t228 + t331 * t71) + t229 * (-pkin(4) * t57 - t244) + pkin(10) * t43) * t218, pkin(3) * t4 + t221 * t2 + (t225 * (-pkin(11) * t9 + (-pkin(12) * t228 + t331) * t18) + t229 * (-pkin(4) * t9 - t281) + pkin(10) * t6) * t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, t200, t178, t208, t179, t213, -t77, -t78, 0, 0, t137, t112, t131, t136, t132, t153, t53, t54, t23, t22, t86, t59, t66, t85, t67, t101, t11, t12, t7, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, t167, t144, -t313, -t140, -t192, -t50, -t51, 0, 0, t104, t72, t97, -t102, t98, t119, t248, t247, t244, t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, t149, t110, -t150, -t106, t161, -t31, -t32, 0, 0;];
tauJ_reg  = t28;
