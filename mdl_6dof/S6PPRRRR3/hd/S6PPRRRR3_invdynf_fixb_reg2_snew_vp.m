% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PPRRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d3,d4,d5,d6,theta1,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 21:20
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PPRRRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PPRRRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 21:19:35
% EndTime: 2019-05-04 21:19:47
% DurationCPUTime: 12.07s
% Computational Cost: add. (145259->340), mult. (280075->578), div. (0->0), fcn. (242785->18), ass. (0->313)
t2397 = sin(pkin(13));
t2402 = cos(pkin(13));
t2382 = -g(1) * t2402 - g(2) * t2397;
t2396 = sin(pkin(14));
t2401 = cos(pkin(14));
t2381 = g(1) * t2397 - g(2) * t2402;
t2395 = -g(3) + qJDD(1);
t2400 = sin(pkin(6));
t2405 = cos(pkin(6));
t2421 = t2381 * t2405 + t2395 * t2400;
t2339 = -t2396 * t2382 + t2401 * t2421;
t2355 = -t2381 * t2400 + t2395 * t2405 + qJDD(2);
t2399 = sin(pkin(7));
t2404 = cos(pkin(7));
t2494 = t2339 * t2404 + t2355 * t2399;
t2403 = cos(pkin(8));
t2390 = qJD(3) * t2403 + qJD(4);
t2407 = sin(qJ(5));
t2411 = cos(qJ(5));
t2398 = sin(pkin(8));
t2408 = sin(qJ(4));
t2479 = t2398 * t2408;
t2471 = qJD(3) * t2479;
t2357 = -t2411 * t2390 + t2407 * t2471;
t2354 = qJD(6) + t2357;
t2493 = qJD(6) + t2354;
t2359 = t2390 * t2407 + t2411 * t2471;
t2412 = cos(qJ(4));
t2478 = t2398 * t2412;
t2470 = qJD(3) * t2478;
t2379 = -qJD(5) + t2470;
t2406 = sin(qJ(6));
t2410 = cos(qJ(6));
t2341 = t2359 * t2406 + t2410 * t2379;
t2492 = t2341 ^ 2;
t2343 = t2359 * t2410 - t2379 * t2406;
t2491 = t2343 ^ 2;
t2490 = t2354 ^ 2;
t2489 = t2357 ^ 2;
t2488 = t2359 ^ 2;
t2487 = t2379 ^ 2;
t2486 = t2390 ^ 2;
t2485 = qJD(3) * t2398;
t2483 = t2341 * t2343;
t2481 = t2357 * t2359;
t2414 = qJD(3) ^ 2;
t2480 = t2398 ^ 2 * t2414;
t2321 = -t2339 * t2399 + t2355 * t2404;
t2477 = t2403 * t2321;
t2476 = qJD(5) + t2379;
t2475 = qJD(6) - t2354;
t2340 = t2401 * t2382 + t2396 * t2421;
t2409 = sin(qJ(3));
t2413 = cos(qJ(3));
t2301 = t2413 * t2340 + t2409 * t2494;
t2472 = qJDD(3) * t2398;
t2295 = -pkin(3) * t2414 + pkin(10) * t2472 + t2301;
t2464 = t2409 * t2340 - t2413 * t2494;
t2417 = t2414 * t2398 * pkin(10) + qJDD(3) * pkin(3) - t2464;
t2416 = t2403 * t2417;
t2259 = t2412 * t2295 + t2321 * t2479 + t2408 * t2416;
t2363 = (-pkin(4) * t2412 - pkin(11) * t2408) * t2485;
t2389 = t2403 * qJDD(3) + qJDD(4);
t2252 = -pkin(4) * t2486 + pkin(11) * t2389 + t2363 * t2470 + t2259;
t2364 = qJD(4) * t2470 + t2408 * t2472;
t2473 = -qJD(4) * t2471 + t2412 * t2472;
t2415 = t2477 - t2364 * pkin(11) - t2473 * pkin(4) + ((pkin(4) * t2408 - pkin(11) * t2412) * t2390 * qJD(3) - t2417) * t2398;
t2230 = t2411 * t2252 + t2407 * t2415;
t2474 = -t2321 * t2478 - t2412 * t2416;
t2469 = -qJDD(5) + t2473;
t2229 = -t2252 * t2407 + t2411 * t2415;
t2424 = -t2411 * t2364 - t2407 * t2389;
t2330 = -qJD(5) * t2357 - t2424;
t2468 = -t2406 * t2330 - t2410 * t2469;
t2467 = -t2357 * t2379 - t2330;
t2466 = t2407 * t2364 - t2411 * t2389;
t2465 = t2390 * t2470;
t2333 = pkin(5) * t2357 - pkin(12) * t2359;
t2223 = -pkin(5) * t2487 - pkin(12) * t2469 - t2357 * t2333 + t2230;
t2251 = -t2389 * pkin(4) - t2486 * pkin(11) + (t2363 * t2485 + t2295) * t2408 + t2474;
t2311 = (qJD(5) - t2379) * t2359 + t2466;
t2238 = pkin(5) * t2311 + pkin(12) * t2467 + t2251;
t2205 = -t2223 * t2406 + t2238 * t2410;
t2206 = t2223 * t2410 + t2238 * t2406;
t2186 = -t2205 * t2406 + t2206 * t2410;
t2222 = pkin(5) * t2469 - pkin(12) * t2487 + t2333 * t2359 - t2229;
t2175 = t2186 * t2407 - t2222 * t2411;
t2176 = t2186 * t2411 + t2222 * t2407;
t2185 = t2205 * t2410 + t2206 * t2406;
t2459 = t2176 * t2408 - t2185 * t2412;
t2157 = t2403 * t2175 + t2398 * t2459;
t2158 = -t2398 * t2175 + t2403 * t2459;
t2167 = t2176 * t2412 + t2185 * t2408;
t2462 = t2158 * t2413 + t2167 * t2409;
t2150 = -t2399 * t2157 + t2404 * t2462;
t2153 = -t2158 * t2409 + t2167 * t2413;
t2463 = t2150 * t2401 + t2153 * t2396;
t2203 = t2229 * t2411 + t2230 * t2407;
t2204 = -t2229 * t2407 + t2230 * t2411;
t2453 = t2204 * t2408 - t2251 * t2412;
t2177 = t2403 * t2203 + t2398 * t2453;
t2178 = -t2398 * t2203 + t2403 * t2453;
t2197 = t2204 * t2412 + t2251 * t2408;
t2458 = t2178 * t2413 + t2197 * t2409;
t2160 = -t2399 * t2177 + t2404 * t2458;
t2169 = -t2178 * t2409 + t2197 * t2413;
t2461 = t2160 * t2401 + t2169 * t2396;
t2282 = -t2343 * t2475 + t2468;
t2418 = -t2410 * t2330 + t2406 * t2469;
t2284 = t2341 * t2475 + t2418;
t2254 = t2282 * t2410 - t2284 * t2406;
t2302 = -t2491 - t2492;
t2240 = t2254 * t2407 - t2302 * t2411;
t2241 = t2254 * t2411 + t2302 * t2407;
t2253 = t2282 * t2406 + t2284 * t2410;
t2446 = t2241 * t2408 - t2253 * t2412;
t2201 = t2403 * t2240 + t2398 * t2446;
t2202 = -t2398 * t2240 + t2403 * t2446;
t2219 = t2241 * t2412 + t2253 * t2408;
t2454 = t2202 * t2413 + t2219 * t2409;
t2174 = -t2399 * t2201 + t2404 * t2454;
t2193 = -t2202 * t2409 + t2219 * t2413;
t2460 = t2174 * t2401 + t2193 * t2396;
t2419 = -qJD(5) * t2359 - qJDD(6) - t2466;
t2289 = -t2419 - t2483;
t2305 = -t2490 - t2492;
t2273 = -t2289 * t2406 + t2305 * t2410;
t2281 = t2343 * t2493 - t2468;
t2245 = t2273 * t2407 - t2281 * t2411;
t2246 = t2273 * t2411 + t2281 * t2407;
t2272 = t2289 * t2410 + t2305 * t2406;
t2444 = t2246 * t2408 - t2272 * t2412;
t2209 = t2403 * t2245 + t2398 * t2444;
t2210 = -t2398 * t2245 + t2403 * t2444;
t2228 = t2246 * t2412 + t2272 * t2408;
t2451 = t2210 * t2413 + t2228 * t2409;
t2182 = -t2399 * t2209 + t2404 * t2451;
t2195 = -t2210 * t2409 + t2228 * t2413;
t2457 = t2182 * t2401 + t2195 * t2396;
t2290 = t2419 - t2483;
t2315 = -t2490 - t2491;
t2275 = t2290 * t2410 - t2315 * t2406;
t2283 = -t2341 * t2493 - t2418;
t2247 = t2275 * t2407 - t2283 * t2411;
t2248 = t2275 * t2411 + t2283 * t2407;
t2274 = t2290 * t2406 + t2315 * t2410;
t2443 = t2248 * t2408 - t2274 * t2412;
t2211 = t2403 * t2247 + t2398 * t2443;
t2212 = -t2398 * t2247 + t2403 * t2443;
t2231 = t2248 * t2412 + t2274 * t2408;
t2450 = t2212 * t2413 + t2231 * t2409;
t2184 = -t2399 * t2211 + t2404 * t2450;
t2196 = -t2212 * t2409 + t2231 * t2413;
t2456 = t2184 * t2401 + t2196 * t2396;
t2280 = -t2398 * t2417 + t2477;
t2258 = -t2408 * t2295 - t2474;
t2441 = t2258 * t2412 + t2259 * t2408;
t2217 = t2403 * t2280 + t2398 * t2441;
t2218 = -t2398 * t2280 + t2403 * t2441;
t2227 = -t2258 * t2408 + t2259 * t2412;
t2448 = t2218 * t2413 + t2227 * t2409;
t2188 = -t2399 * t2217 + t2404 * t2448;
t2198 = -t2218 * t2409 + t2227 * t2413;
t2455 = t2188 * t2401 + t2198 * t2396;
t2312 = -t2359 * t2476 - t2466;
t2314 = t2357 * t2476 + t2424;
t2285 = t2312 * t2407 + t2314 * t2411;
t2286 = t2312 * t2411 - t2314 * t2407;
t2322 = -t2488 - t2489;
t2435 = t2286 * t2408 - t2322 * t2412;
t2243 = t2403 * t2285 + t2398 * t2435;
t2244 = -t2398 * t2285 + t2403 * t2435;
t2268 = t2286 * t2412 + t2322 * t2408;
t2445 = t2244 * t2413 + t2268 * t2409;
t2208 = -t2399 * t2243 + t2404 * t2445;
t2226 = -t2244 * t2409 + t2268 * t2413;
t2452 = t2208 * t2401 + t2226 * t2396;
t2324 = -t2469 - t2481;
t2331 = -t2487 - t2489;
t2296 = t2324 * t2411 + t2331 * t2407;
t2297 = -t2324 * t2407 + t2331 * t2411;
t2434 = t2297 * t2408 - t2311 * t2412;
t2256 = t2403 * t2296 + t2398 * t2434;
t2257 = -t2398 * t2296 + t2403 * t2434;
t2278 = t2297 * t2412 + t2311 * t2408;
t2442 = t2257 * t2413 + t2278 * t2409;
t2214 = -t2399 * t2256 + t2404 * t2442;
t2236 = -t2257 * t2409 + t2278 * t2413;
t2449 = t2214 * t2401 + t2236 * t2396;
t2323 = t2469 - t2481;
t2337 = -t2487 - t2488;
t2303 = t2323 * t2407 + t2337 * t2411;
t2304 = t2323 * t2411 - t2337 * t2407;
t2432 = t2304 * t2408 + t2412 * t2467;
t2260 = t2403 * t2303 + t2398 * t2432;
t2261 = -t2398 * t2303 + t2403 * t2432;
t2279 = t2304 * t2412 - t2408 * t2467;
t2440 = t2261 * t2413 + t2279 * t2409;
t2221 = -t2399 * t2260 + t2404 * t2440;
t2239 = -t2261 * t2409 + t2279 * t2413;
t2447 = t2221 * t2401 + t2239 * t2396;
t2433 = t2301 * t2409 - t2413 * t2464;
t2263 = -t2399 * t2321 + t2404 * t2433;
t2269 = t2301 * t2413 + t2409 * t2464;
t2439 = t2263 * t2401 + t2269 * t2396;
t2393 = t2408 ^ 2;
t2394 = t2412 ^ 2;
t2370 = (-t2393 - t2394) * t2480;
t2347 = t2465 - t2364;
t2371 = t2390 * t2471;
t2348 = t2371 + t2473;
t2427 = t2347 * t2412 + t2348 * t2408;
t2306 = t2403 * t2370 + t2398 * t2427;
t2307 = -t2398 * t2370 + t2403 * t2427;
t2320 = -t2347 * t2408 + t2348 * t2412;
t2431 = t2307 * t2413 + t2320 * t2409;
t2265 = -t2399 * t2306 + t2404 * t2431;
t2287 = -t2307 * t2409 + t2320 * t2413;
t2438 = t2265 * t2401 + t2287 * t2396;
t2346 = t2465 + t2364;
t2353 = -t2393 * t2480 - t2486;
t2378 = t2408 * t2412 * t2480;
t2362 = t2378 - t2389;
t2426 = t2353 * t2412 + t2362 * t2408;
t2308 = t2403 * t2346 + t2398 * t2426;
t2309 = -t2398 * t2346 + t2403 * t2426;
t2332 = -t2353 * t2408 + t2362 * t2412;
t2430 = t2309 * t2413 + t2332 * t2409;
t2271 = -t2399 * t2308 + t2404 * t2430;
t2288 = -t2309 * t2409 + t2332 * t2413;
t2437 = t2271 * t2401 + t2288 * t2396;
t2349 = t2371 - t2473;
t2361 = t2378 + t2389;
t2365 = -t2394 * t2480 - t2486;
t2425 = t2361 * t2412 + t2365 * t2408;
t2316 = t2403 * t2349 + t2398 * t2425;
t2317 = -t2398 * t2349 + t2403 * t2425;
t2338 = -t2361 * t2408 + t2365 * t2412;
t2429 = t2317 * t2413 + t2338 * t2409;
t2277 = -t2399 * t2316 + t2404 * t2429;
t2293 = -t2317 * t2409 + t2338 * t2413;
t2436 = t2277 * t2401 + t2293 * t2396;
t2428 = t2339 * t2401 + t2340 * t2396;
t2377 = -qJDD(3) * t2409 - t2413 * t2414;
t2368 = t2377 * t2404;
t2420 = qJDD(3) * t2413 - t2409 * t2414;
t2423 = t2368 * t2401 - t2396 * t2420;
t2369 = t2420 * t2404;
t2422 = t2369 * t2401 + t2377 * t2396;
t2367 = t2420 * t2399;
t2366 = t2377 * t2399;
t2345 = -t2369 * t2396 + t2377 * t2401;
t2344 = -t2368 * t2396 - t2401 * t2420;
t2329 = -t2400 * t2367 + t2405 * t2422;
t2328 = -t2400 * t2366 + t2405 * t2423;
t2327 = t2405 * t2367 + t2400 * t2422;
t2326 = t2405 * t2366 + t2400 * t2423;
t2310 = -t2339 * t2396 + t2340 * t2401;
t2299 = -t2400 * t2355 + t2405 * t2428;
t2298 = t2405 * t2355 + t2400 * t2428;
t2276 = t2404 * t2316 + t2399 * t2429;
t2270 = t2404 * t2308 + t2399 * t2430;
t2264 = t2404 * t2306 + t2399 * t2431;
t2262 = t2404 * t2321 + t2399 * t2433;
t2255 = -t2277 * t2396 + t2293 * t2401;
t2249 = -t2271 * t2396 + t2288 * t2401;
t2242 = -t2265 * t2396 + t2287 * t2401;
t2237 = -t2263 * t2396 + t2269 * t2401;
t2235 = -t2400 * t2276 + t2405 * t2436;
t2234 = t2405 * t2276 + t2400 * t2436;
t2233 = -t2400 * t2270 + t2405 * t2437;
t2232 = t2405 * t2270 + t2400 * t2437;
t2225 = -t2400 * t2264 + t2405 * t2438;
t2224 = t2405 * t2264 + t2400 * t2438;
t2220 = t2404 * t2260 + t2399 * t2440;
t2216 = -t2400 * t2262 + t2405 * t2439;
t2215 = t2405 * t2262 + t2400 * t2439;
t2213 = t2404 * t2256 + t2399 * t2442;
t2207 = t2404 * t2243 + t2399 * t2445;
t2200 = -t2221 * t2396 + t2239 * t2401;
t2199 = -t2214 * t2396 + t2236 * t2401;
t2194 = -t2208 * t2396 + t2226 * t2401;
t2192 = -t2400 * t2220 + t2405 * t2447;
t2191 = t2405 * t2220 + t2400 * t2447;
t2190 = -t2400 * t2213 + t2405 * t2449;
t2189 = t2405 * t2213 + t2400 * t2449;
t2187 = t2404 * t2217 + t2399 * t2448;
t2183 = t2404 * t2211 + t2399 * t2450;
t2181 = t2404 * t2209 + t2399 * t2451;
t2180 = -t2400 * t2207 + t2405 * t2452;
t2179 = t2405 * t2207 + t2400 * t2452;
t2173 = t2404 * t2201 + t2399 * t2454;
t2172 = -t2188 * t2396 + t2198 * t2401;
t2171 = -t2184 * t2396 + t2196 * t2401;
t2170 = -t2182 * t2396 + t2195 * t2401;
t2168 = -t2174 * t2396 + t2193 * t2401;
t2166 = -t2400 * t2187 + t2405 * t2455;
t2165 = t2405 * t2187 + t2400 * t2455;
t2164 = -t2400 * t2183 + t2405 * t2456;
t2163 = t2405 * t2183 + t2400 * t2456;
t2162 = -t2400 * t2181 + t2405 * t2457;
t2161 = t2405 * t2181 + t2400 * t2457;
t2159 = t2404 * t2177 + t2399 * t2458;
t2156 = -t2400 * t2173 + t2405 * t2460;
t2155 = t2405 * t2173 + t2400 * t2460;
t2154 = -t2160 * t2396 + t2169 * t2401;
t2152 = -t2400 * t2159 + t2405 * t2461;
t2151 = t2405 * t2159 + t2400 * t2461;
t2149 = t2404 * t2157 + t2399 * t2462;
t2148 = -t2150 * t2396 + t2153 * t2401;
t2147 = -t2400 * t2149 + t2405 * t2463;
t2146 = t2405 * t2149 + t2400 * t2463;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2381 * t2397 + t2382 * t2402, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2299 * t2397 + t2310 * t2402, 0, 0, 0, 0, 0, 0, -t2329 * t2397 + t2345 * t2402, -t2328 * t2397 + t2344 * t2402, 0, -t2216 * t2397 + t2237 * t2402, 0, 0, 0, 0, 0, 0, -t2235 * t2397 + t2255 * t2402, -t2233 * t2397 + t2249 * t2402, -t2225 * t2397 + t2242 * t2402, -t2166 * t2397 + t2172 * t2402, 0, 0, 0, 0, 0, 0, -t2190 * t2397 + t2199 * t2402, -t2192 * t2397 + t2200 * t2402, -t2180 * t2397 + t2194 * t2402, -t2152 * t2397 + t2154 * t2402, 0, 0, 0, 0, 0, 0, -t2162 * t2397 + t2170 * t2402, -t2164 * t2397 + t2171 * t2402, -t2156 * t2397 + t2168 * t2402, -t2147 * t2397 + t2148 * t2402; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2381 * t2402 + t2382 * t2397, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299 * t2402 + t2310 * t2397, 0, 0, 0, 0, 0, 0, t2329 * t2402 + t2345 * t2397, t2328 * t2402 + t2344 * t2397, 0, t2216 * t2402 + t2237 * t2397, 0, 0, 0, 0, 0, 0, t2235 * t2402 + t2255 * t2397, t2233 * t2402 + t2249 * t2397, t2225 * t2402 + t2242 * t2397, t2166 * t2402 + t2172 * t2397, 0, 0, 0, 0, 0, 0, t2190 * t2402 + t2199 * t2397, t2192 * t2402 + t2200 * t2397, t2180 * t2402 + t2194 * t2397, t2152 * t2402 + t2154 * t2397, 0, 0, 0, 0, 0, 0, t2162 * t2402 + t2170 * t2397, t2164 * t2402 + t2171 * t2397, t2156 * t2402 + t2168 * t2397, t2147 * t2402 + t2148 * t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2298, 0, 0, 0, 0, 0, 0, t2327, t2326, 0, t2215, 0, 0, 0, 0, 0, 0, t2234, t2232, t2224, t2165, 0, 0, 0, 0, 0, 0, t2189, t2191, t2179, t2151, 0, 0, 0, 0, 0, 0, t2161, t2163, t2155, t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2382, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2310, 0, 0, 0, 0, 0, 0, t2345, t2344, 0, t2237, 0, 0, 0, 0, 0, 0, t2255, t2249, t2242, t2172, 0, 0, 0, 0, 0, 0, t2199, t2200, t2194, t2154, 0, 0, 0, 0, 0, 0, t2170, t2171, t2168, t2148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2381, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, 0, 0, 0, 0, 0, 0, t2329, t2328, 0, t2216, 0, 0, 0, 0, 0, 0, t2235, t2233, t2225, t2166, 0, 0, 0, 0, 0, 0, t2190, t2192, t2180, t2152, 0, 0, 0, 0, 0, 0, t2162, t2164, t2156, t2147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2298, 0, 0, 0, 0, 0, 0, t2327, t2326, 0, t2215, 0, 0, 0, 0, 0, 0, t2234, t2232, t2224, t2165, 0, 0, 0, 0, 0, 0, t2189, t2191, t2179, t2151, 0, 0, 0, 0, 0, 0, t2161, t2163, t2155, t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2340, 0, 0, 0, 0, 0, 0, t2377, -t2420, 0, t2269, 0, 0, 0, 0, 0, 0, t2293, t2288, t2287, t2198, 0, 0, 0, 0, 0, 0, t2236, t2239, t2226, t2169, 0, 0, 0, 0, 0, 0, t2195, t2196, t2193, t2153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2339, 0, 0, 0, 0, 0, 0, t2369, t2368, 0, t2263, 0, 0, 0, 0, 0, 0, t2277, t2271, t2265, t2188, 0, 0, 0, 0, 0, 0, t2214, t2221, t2208, t2160, 0, 0, 0, 0, 0, 0, t2182, t2184, t2174, t2150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2355, 0, 0, 0, 0, 0, 0, t2367, t2366, 0, t2262, 0, 0, 0, 0, 0, 0, t2276, t2270, t2264, t2187, 0, 0, 0, 0, 0, 0, t2213, t2220, t2207, t2159, 0, 0, 0, 0, 0, 0, t2181, t2183, t2173, t2149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2414, -qJDD(3), 0, t2301, 0, 0, 0, 0, 0, 0, t2338, t2332, t2320, t2227, 0, 0, 0, 0, 0, 0, t2278, t2279, t2268, t2197, 0, 0, 0, 0, 0, 0, t2228, t2231, t2219, t2167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t2414, 0, -t2464, 0, 0, 0, 0, 0, 0, t2317, t2309, t2307, t2218, 0, 0, 0, 0, 0, 0, t2257, t2261, t2244, t2178, 0, 0, 0, 0, 0, 0, t2210, t2212, t2202, t2158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2321, 0, 0, 0, 0, 0, 0, t2316, t2308, t2306, t2217, 0, 0, 0, 0, 0, 0, t2256, t2260, t2243, t2177, 0, 0, 0, 0, 0, 0, t2209, t2211, t2201, t2157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2365, t2362, t2348, t2259, 0, 0, 0, 0, 0, 0, t2297, t2304, t2286, t2204, 0, 0, 0, 0, 0, 0, t2246, t2248, t2241, t2176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2361, t2353, t2347, t2258, 0, 0, 0, 0, 0, 0, -t2311, t2467, -t2322, -t2251, 0, 0, 0, 0, 0, 0, -t2272, -t2274, -t2253, -t2185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2349, t2346, t2370, t2280, 0, 0, 0, 0, 0, 0, t2296, t2303, t2285, t2203, 0, 0, 0, 0, 0, 0, t2245, t2247, t2240, t2175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2331, t2323, t2312, t2230, 0, 0, 0, 0, 0, 0, t2273, t2275, t2254, t2186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2324, t2337, t2314, t2229, 0, 0, 0, 0, 0, 0, -t2281, -t2283, -t2302, -t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, -t2467, t2322, t2251, 0, 0, 0, 0, 0, 0, t2272, t2274, t2253, t2185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2305, t2290, t2282, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2289, t2315, t2284, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2281, t2283, t2302, t2222;];
f_new_reg  = t1;
