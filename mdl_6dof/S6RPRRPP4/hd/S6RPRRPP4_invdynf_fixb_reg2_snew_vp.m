% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:34:37
% EndTime: 2019-05-05 21:34:47
% DurationCPUTime: 10.77s
% Computational Cost: add. (40132->303), mult. (97191->376), div. (0->0), fcn. (74562->10), ass. (0->208)
t2497 = sin(pkin(9));
t2499 = cos(pkin(9));
t2502 = sin(qJ(3));
t2505 = cos(qJ(3));
t2475 = (t2497 * t2505 + t2499 * t2502) * qJD(1);
t2468 = t2475 * qJD(3);
t2490 = t2499 * qJDD(1);
t2529 = t2497 * qJDD(1);
t2522 = -t2505 * t2490 + t2502 * t2529;
t2519 = t2468 + t2522;
t2516 = qJDD(4) + t2519;
t2501 = sin(qJ(4));
t2504 = cos(qJ(4));
t2461 = -t2504 * qJD(3) + t2475 * t2501;
t2462 = qJD(3) * t2501 + t2475 * t2504;
t2496 = sin(pkin(10));
t2498 = cos(pkin(10));
t2436 = t2461 * t2498 + t2496 * t2462;
t2438 = -t2461 * t2496 + t2462 * t2498;
t2539 = t2436 * t2438;
t2390 = t2516 + t2539;
t2435 = t2438 ^ 2;
t2473 = (t2497 * t2502 - t2499 * t2505) * qJD(1);
t2470 = qJD(4) + t2473;
t2547 = t2470 ^ 2;
t2556 = -t2435 - t2547;
t2352 = t2390 * t2496 - t2498 * t2556;
t2354 = t2390 * t2498 + t2496 * t2556;
t2335 = t2352 * t2501 - t2354 * t2504;
t2472 = -t2502 * t2490 - t2505 * t2529;
t2534 = t2473 * qJD(3);
t2455 = -t2472 - t2534;
t2520 = -t2501 * qJDD(3) - t2504 * t2455;
t2425 = -qJD(4) * t2461 - t2520;
t2521 = t2504 * qJDD(3) - t2501 * t2455;
t2515 = -qJD(4) * t2462 + t2521;
t2513 = t2498 * t2425 + t2496 * t2515;
t2538 = t2436 * t2470;
t2512 = t2513 - t2538;
t2317 = t2335 * t2502 - t2505 * t2512;
t2319 = t2335 * t2505 + t2502 * t2512;
t2290 = t2317 * t2497 - t2319 * t2499;
t2325 = t2352 * t2504 + t2354 * t2501;
t2503 = sin(qJ(1));
t2506 = cos(qJ(1));
t2586 = t2290 * t2503 - t2325 * t2506;
t2585 = t2290 * t2506 + t2325 * t2503;
t2294 = t2317 * t2499 + t2319 * t2497;
t2391 = t2516 - t2539;
t2402 = t2436 ^ 2;
t2555 = -t2547 - t2402;
t2563 = -t2391 * t2496 + t2498 * t2555;
t2564 = t2498 * t2391 + t2496 * t2555;
t2565 = t2501 * t2563 + t2504 * t2564;
t2525 = -t2425 * t2496 + t2498 * t2515;
t2536 = t2470 * t2438;
t2517 = -t2525 + t2536;
t2566 = -t2501 * t2564 + t2504 * t2563;
t2573 = t2502 * t2517 + t2505 * t2566;
t2574 = t2502 * t2566 - t2505 * t2517;
t2578 = -t2497 * t2574 + t2499 * t2573;
t2582 = t2503 * t2578 - t2506 * t2565;
t2581 = t2503 * t2565 + t2506 * t2578;
t2370 = t2513 + t2538;
t2518 = t2525 + t2536;
t2552 = t2370 * t2496 + t2498 * t2518;
t2553 = -t2498 * t2370 + t2496 * t2518;
t2561 = t2501 * t2552 + t2504 * t2553;
t2377 = t2435 + t2402;
t2562 = -t2501 * t2553 + t2504 * t2552;
t2567 = -t2377 * t2502 + t2505 * t2562;
t2568 = t2377 * t2505 + t2502 * t2562;
t2572 = -t2497 * t2568 + t2499 * t2567;
t2580 = t2503 * t2572 - t2506 * t2561;
t2579 = t2503 * t2561 + t2506 * t2572;
t2577 = t2497 * t2573 + t2499 * t2574;
t2571 = t2497 * t2567 + t2499 * t2568;
t2507 = qJD(1) ^ 2;
t2482 = t2503 * g(1) - t2506 * g(2);
t2523 = -qJDD(2) + t2482;
t2527 = pkin(2) * t2499 + pkin(1);
t2493 = t2497 ^ 2;
t2494 = t2499 ^ 2;
t2530 = t2493 + t2494;
t2451 = t2527 * qJDD(1) + (pkin(7) * t2530 + qJ(2)) * t2507 + t2523;
t2479 = t2530 * t2507;
t2550 = qJD(3) ^ 2;
t2549 = t2461 ^ 2;
t2548 = t2462 ^ 2;
t2546 = t2473 ^ 2;
t2545 = t2475 ^ 2;
t2544 = -2 * qJD(5);
t2543 = t2499 * g(3);
t2542 = qJD(2) * qJD(1);
t2537 = t2461 * t2462;
t2535 = t2470 * t2461;
t2533 = t2473 * t2475;
t2532 = t2494 * t2507;
t2531 = qJD(4) - t2470;
t2524 = t2506 * g(1) + t2503 * g(2);
t2514 = -t2507 * pkin(1) + qJDD(1) * qJ(2) - t2524;
t2458 = -g(3) * t2497 + (t2514 + 0.2e1 * t2542) * t2499;
t2445 = -pkin(2) * t2532 + pkin(7) * t2490 + t2458;
t2528 = -0.2e1 * t2542;
t2511 = -t2543 + (t2528 + t2527 * t2507 + (-pkin(7) - qJ(2)) * qJDD(1) + t2524) * t2497;
t2408 = t2505 * t2445 + t2502 * t2511;
t2448 = pkin(3) * t2473 - pkin(8) * t2475;
t2389 = -pkin(3) * t2550 + qJDD(3) * pkin(8) - t2448 * t2473 + t2408;
t2396 = (-t2455 + t2534) * pkin(8) + (t2519 + t2468) * pkin(3) - t2451;
t2351 = t2504 * t2389 + t2501 * t2396;
t2443 = pkin(4) * t2470 - qJ(5) * t2462;
t2340 = -pkin(4) * t2549 + qJ(5) * t2515 - t2470 * t2443 + t2351;
t2350 = -t2501 * t2389 + t2504 * t2396;
t2411 = t2516 - t2537;
t2510 = (-t2425 - t2535) * qJ(5) + t2411 * pkin(4) + t2350;
t2305 = t2498 * t2340 + t2436 * t2544 + t2496 * t2510;
t2526 = t2496 * t2340 - t2498 * t2510;
t2407 = -t2502 * t2445 + t2505 * t2511;
t2388 = -qJDD(3) * pkin(3) - pkin(8) * t2550 + t2475 * t2448 - t2407;
t2347 = -t2515 * pkin(4) - t2549 * qJ(5) + t2462 * t2443 + qJDD(5) + t2388;
t2484 = t2497 * t2507 * t2499;
t2481 = -qJDD(1) * t2503 - t2506 * t2507;
t2480 = qJDD(1) * t2506 - t2503 * t2507;
t2478 = t2530 * qJDD(1);
t2477 = t2499 * t2479;
t2476 = t2497 * t2479;
t2471 = qJDD(1) * pkin(1) + t2507 * qJ(2) + t2523;
t2463 = -t2545 - t2550;
t2457 = -t2543 + (-t2514 + t2528) * t2497;
t2456 = t2472 + 0.2e1 * t2534;
t2454 = 0.2e1 * t2468 + t2522;
t2453 = -qJDD(3) - t2533;
t2452 = qJDD(3) - t2533;
t2449 = -t2546 - t2550;
t2440 = -t2545 - t2546;
t2439 = -t2519 + t2468;
t2431 = -t2547 - t2548;
t2430 = t2453 * t2505 - t2463 * t2502;
t2429 = t2453 * t2502 + t2463 * t2505;
t2428 = -t2547 - t2549;
t2427 = -t2457 * t2497 + t2458 * t2499;
t2426 = t2457 * t2499 + t2458 * t2497;
t2418 = -t2548 - t2549;
t2417 = t2439 * t2505 - t2472 * t2502;
t2416 = t2439 * t2502 + t2472 * t2505;
t2414 = t2449 * t2505 - t2452 * t2502;
t2413 = t2449 * t2502 + t2452 * t2505;
t2412 = -t2516 - t2537;
t2406 = t2461 * t2531 + t2520;
t2405 = t2425 - t2535;
t2404 = -t2462 * t2531 + t2521;
t2403 = (qJD(4) + t2470) * t2462 - t2521;
t2401 = pkin(5) * t2436 - qJ(6) * t2438;
t2400 = -t2429 * t2497 + t2430 * t2499;
t2399 = t2429 * t2499 + t2430 * t2497;
t2387 = t2412 * t2504 - t2431 * t2501;
t2386 = t2412 * t2501 + t2431 * t2504;
t2383 = -t2416 * t2497 + t2417 * t2499;
t2382 = t2416 * t2499 + t2417 * t2497;
t2381 = -t2411 * t2501 + t2428 * t2504;
t2380 = t2411 * t2504 + t2428 * t2501;
t2379 = -t2413 * t2497 + t2414 * t2499;
t2378 = t2413 * t2499 + t2414 * t2497;
t2375 = -t2407 * t2502 + t2408 * t2505;
t2374 = t2407 * t2505 + t2408 * t2502;
t2365 = t2404 * t2504 - t2406 * t2501;
t2364 = t2404 * t2501 + t2406 * t2504;
t2359 = t2387 * t2505 + t2405 * t2502;
t2358 = t2387 * t2502 - t2405 * t2505;
t2357 = t2381 * t2505 + t2403 * t2502;
t2356 = t2381 * t2502 - t2403 * t2505;
t2349 = t2365 * t2505 + t2418 * t2502;
t2348 = t2365 * t2502 - t2418 * t2505;
t2346 = -t2374 * t2497 + t2375 * t2499;
t2345 = t2374 * t2499 + t2375 * t2497;
t2332 = -t2358 * t2497 + t2359 * t2499;
t2331 = t2358 * t2499 + t2359 * t2497;
t2330 = -t2356 * t2497 + t2357 * t2499;
t2329 = t2356 * t2499 + t2357 * t2497;
t2324 = -t2350 * t2501 + t2351 * t2504;
t2323 = t2350 * t2504 + t2351 * t2501;
t2322 = -t2348 * t2497 + t2349 * t2499;
t2321 = t2348 * t2499 + t2349 * t2497;
t2316 = t2324 * t2505 + t2388 * t2502;
t2315 = t2324 * t2502 - t2388 * t2505;
t2310 = -t2525 * pkin(5) + (pkin(5) * t2470 - (2 * qJD(6))) * t2438 + t2347 - t2512 * qJ(6);
t2304 = t2438 * t2544 - t2526;
t2299 = qJDD(6) - t2516 * pkin(5) - t2547 * qJ(6) + ((2 * qJD(5)) + t2401) * t2438 + t2526;
t2298 = -pkin(5) * t2547 + qJ(6) * t2516 + 0.2e1 * qJD(6) * t2470 - t2436 * t2401 + t2305;
t2293 = -t2315 * t2497 + t2316 * t2499;
t2292 = t2315 * t2499 + t2316 * t2497;
t2287 = -t2304 * t2496 + t2305 * t2498;
t2286 = t2304 * t2498 + t2305 * t2496;
t2281 = t2298 * t2498 + t2299 * t2496;
t2280 = t2298 * t2496 - t2299 * t2498;
t2279 = -t2286 * t2501 + t2287 * t2504;
t2278 = t2286 * t2504 + t2287 * t2501;
t2277 = t2279 * t2505 + t2347 * t2502;
t2276 = t2279 * t2502 - t2347 * t2505;
t2275 = -t2280 * t2501 + t2281 * t2504;
t2274 = t2280 * t2504 + t2281 * t2501;
t2273 = t2275 * t2505 + t2310 * t2502;
t2272 = t2275 * t2502 - t2310 * t2505;
t2271 = -t2276 * t2497 + t2277 * t2499;
t2270 = t2276 * t2499 + t2277 * t2497;
t2269 = -t2272 * t2497 + t2273 * t2499;
t2268 = t2272 * t2499 + t2273 * t2497;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2481, -t2480, 0, -t2482 * t2503 - t2506 * t2524, 0, 0, 0, 0, 0, 0, -t2477 * t2506 - t2490 * t2503, t2476 * t2506 + t2503 * t2529, t2478 * t2506 - t2479 * t2503, t2427 * t2506 - t2471 * t2503, 0, 0, 0, 0, 0, 0, t2379 * t2506 + t2454 * t2503, t2400 * t2506 - t2456 * t2503, t2383 * t2506 + t2440 * t2503, t2346 * t2506 - t2451 * t2503, 0, 0, 0, 0, 0, 0, t2330 * t2506 + t2380 * t2503, t2332 * t2506 + t2386 * t2503, t2322 * t2506 + t2364 * t2503, t2293 * t2506 + t2323 * t2503, 0, 0, 0, 0, 0, 0, t2581, -t2585, t2579, t2271 * t2506 + t2278 * t2503, 0, 0, 0, 0, 0, 0, t2581, t2579, t2585, t2269 * t2506 + t2274 * t2503; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2480, t2481, 0, t2482 * t2506 - t2503 * t2524, 0, 0, 0, 0, 0, 0, -t2477 * t2503 + t2490 * t2506, t2476 * t2503 - t2506 * t2529, t2478 * t2503 + t2479 * t2506, t2427 * t2503 + t2471 * t2506, 0, 0, 0, 0, 0, 0, t2379 * t2503 - t2454 * t2506, t2400 * t2503 + t2456 * t2506, t2383 * t2503 - t2440 * t2506, t2346 * t2503 + t2451 * t2506, 0, 0, 0, 0, 0, 0, t2330 * t2503 - t2380 * t2506, t2332 * t2503 - t2386 * t2506, t2322 * t2503 - t2364 * t2506, t2293 * t2503 - t2323 * t2506, 0, 0, 0, 0, 0, 0, t2582, -t2586, t2580, t2271 * t2503 - t2278 * t2506, 0, 0, 0, 0, 0, 0, t2582, t2580, t2586, t2269 * t2503 - t2274 * t2506; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, 0, 0, 0, 0, 0, 0, t2378, t2399, t2382, t2345, 0, 0, 0, 0, 0, 0, t2329, t2331, t2321, t2292, 0, 0, 0, 0, 0, 0, t2577, t2294, t2571, t2270, 0, 0, 0, 0, 0, 0, t2577, t2571, -t2294, t2268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2507, -qJDD(1), 0, -t2524, 0, 0, 0, 0, 0, 0, -t2477, t2476, t2478, t2427, 0, 0, 0, 0, 0, 0, t2379, t2400, t2383, t2346, 0, 0, 0, 0, 0, 0, t2330, t2332, t2322, t2293, 0, 0, 0, 0, 0, 0, t2578, -t2290, t2572, t2271, 0, 0, 0, 0, 0, 0, t2578, t2572, t2290, t2269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2507, 0, t2482, 0, 0, 0, 0, 0, 0, t2490, -t2529, t2479, t2471, 0, 0, 0, 0, 0, 0, -t2454, t2456, -t2440, t2451, 0, 0, 0, 0, 0, 0, -t2380, -t2386, -t2364, -t2323, 0, 0, 0, 0, 0, 0, -t2565, t2325, -t2561, -t2278, 0, 0, 0, 0, 0, 0, -t2565, -t2561, -t2325, -t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, 0, 0, 0, 0, 0, 0, t2378, t2399, t2382, t2345, 0, 0, 0, 0, 0, 0, t2329, t2331, t2321, t2292, 0, 0, 0, 0, 0, 0, t2577, t2294, t2571, t2270, 0, 0, 0, 0, 0, 0, t2577, t2571, -t2294, t2268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2532, t2484, t2490, t2458, 0, 0, 0, 0, 0, 0, t2414, t2430, t2417, t2375, 0, 0, 0, 0, 0, 0, t2357, t2359, t2349, t2316, 0, 0, 0, 0, 0, 0, t2573, t2319, t2567, t2277, 0, 0, 0, 0, 0, 0, t2573, t2567, -t2319, t2273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2484, -t2493 * t2507, -t2529, t2457, 0, 0, 0, 0, 0, 0, t2413, t2429, t2416, t2374, 0, 0, 0, 0, 0, 0, t2356, t2358, t2348, t2315, 0, 0, 0, 0, 0, 0, t2574, t2317, t2568, t2276, 0, 0, 0, 0, 0, 0, t2574, t2568, -t2317, t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2490, t2529, -t2479, -t2471, 0, 0, 0, 0, 0, 0, t2454, -t2456, t2440, -t2451, 0, 0, 0, 0, 0, 0, t2380, t2386, t2364, t2323, 0, 0, 0, 0, 0, 0, t2565, -t2325, t2561, t2278, 0, 0, 0, 0, 0, 0, t2565, t2561, t2325, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2449, t2453, t2439, t2408, 0, 0, 0, 0, 0, 0, t2381, t2387, t2365, t2324, 0, 0, 0, 0, 0, 0, t2566, t2335, t2562, t2279, 0, 0, 0, 0, 0, 0, t2566, t2562, -t2335, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2452, t2463, t2472, t2407, 0, 0, 0, 0, 0, 0, -t2403, -t2405, -t2418, -t2388, 0, 0, 0, 0, 0, 0, -t2517, -t2512, t2377, -t2347, 0, 0, 0, 0, 0, 0, -t2517, t2377, t2512, -t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2454, -t2456, t2440, -t2451, 0, 0, 0, 0, 0, 0, t2380, t2386, t2364, t2323, 0, 0, 0, 0, 0, 0, t2565, -t2325, t2561, t2278, 0, 0, 0, 0, 0, 0, t2565, t2561, t2325, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2428, t2412, t2404, t2351, 0, 0, 0, 0, 0, 0, t2563, -t2354, t2552, t2287, 0, 0, 0, 0, 0, 0, t2563, t2552, t2354, t2281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2431, t2406, t2350, 0, 0, 0, 0, 0, 0, t2564, -t2352, t2553, t2286, 0, 0, 0, 0, 0, 0, t2564, t2553, t2352, t2280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2403, t2405, t2418, t2388, 0, 0, 0, 0, 0, 0, t2517, t2512, -t2377, t2347, 0, 0, 0, 0, 0, 0, t2517, -t2377, -t2512, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2555, -t2390, t2518, t2305, 0, 0, 0, 0, 0, 0, t2555, t2518, t2390, t2298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2391, t2556, -t2370, t2304, 0, 0, 0, 0, 0, 0, t2391, -t2370, -t2556, -t2299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, t2512, -t2377, t2347, 0, 0, 0, 0, 0, 0, t2517, -t2377, -t2512, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2555, t2518, t2390, t2298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, -t2377, -t2512, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2391, t2370, t2556, t2299;];
f_new_reg  = t1;
