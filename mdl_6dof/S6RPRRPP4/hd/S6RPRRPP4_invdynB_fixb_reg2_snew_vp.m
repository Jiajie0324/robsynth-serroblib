% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:32:51
% EndTime: 2019-05-05 21:33:38
% DurationCPUTime: 49.84s
% Computational Cost: add. (153486->778), mult. (371012->1124), div. (0->0), fcn. (284784->10), ass. (0->562)
t1093 = sin(qJ(1));
t1096 = cos(qJ(1));
t1087 = sin(pkin(9));
t1089 = cos(pkin(9));
t1092 = sin(qJ(3));
t1095 = cos(qJ(3));
t1086 = sin(pkin(10));
t1088 = cos(pkin(10));
t1058 = (t1087 * t1095 + t1089 * t1092) * qJD(1);
t1091 = sin(qJ(4));
t1094 = cos(qJ(4));
t1038 = qJD(3) * t1091 + t1058 * t1094;
t1136 = qJDD(1) * t1095;
t1138 = qJDD(1) * t1092;
t1055 = -t1087 * t1136 - t1089 * t1138;
t1056 = (t1087 * t1092 - t1089 * t1095) * qJD(1);
t1149 = t1056 * qJD(3);
t1018 = -t1055 - t1149;
t1121 = -t1094 * qJDD(3) + t1091 * t1018;
t1107 = qJD(4) * t1038 + t1121;
t1037 = -t1094 * qJD(3) + t1058 * t1091;
t1124 = t1037 * qJD(4) - t1091 * qJDD(3) - t1094 * t1018;
t1103 = -t1086 * t1107 - t1088 * t1124;
t1049 = qJD(4) + t1056;
t988 = t1088 * t1037 + t1038 * t1086;
t1164 = t988 * t1049;
t1215 = t1103 - t1164;
t1054 = t1087 * t1138 - t1089 * t1136;
t1146 = t1058 * qJD(3);
t1017 = -t1054 - t1146;
t1008 = qJDD(4) - t1017;
t990 = -t1037 * t1086 + t1038 * t1088;
t925 = t990 * t988;
t1219 = t1008 + t925;
t1175 = t1088 * t1219;
t1196 = t1049 ^ 2;
t987 = t990 ^ 2;
t937 = -t987 - t1196;
t806 = t1086 * t937 + t1175;
t1181 = t1086 * t1219;
t821 = t1088 * t937 - t1181;
t724 = t1091 * t821 + t1094 * t806;
t690 = t1092 * t724 + t1095 * t1215;
t692 = -t1092 * t1215 + t1095 * t724;
t641 = t1087 * t690 - t1089 * t692;
t722 = t1091 * t806 - t1094 * t821;
t619 = t1093 * t641 + t1096 * t722;
t1350 = pkin(6) * t619;
t621 = -t1093 * t722 + t1096 * t641;
t1349 = pkin(6) * t621;
t630 = t1087 * t692 + t1089 * t690;
t1348 = qJ(2) * t630;
t1347 = -pkin(1) * t630 - pkin(2) * t690 - pkin(3) * t1215 - pkin(8) * t724;
t1346 = -pkin(1) * t722 - qJ(2) * t641;
t1186 = t1049 * t990;
t897 = t1086 * t1124 - t1088 * t1107;
t1111 = t897 + t1186;
t1199 = t988 ^ 2;
t951 = t1199 - t1196;
t830 = t1086 * t951 + t1175;
t834 = t1088 * t951 - t1181;
t755 = t1091 * t830 - t1094 * t834;
t710 = t1092 * t755 + t1095 * t1111;
t714 = -t1092 * t1111 + t1095 * t755;
t648 = t1087 * t710 - t1089 * t714;
t751 = t1091 * t834 + t1094 * t830;
t1345 = t1093 * t648 - t1096 * t751;
t1110 = -t897 + t1186;
t772 = -t1086 * t1110 + t1088 * t1215;
t1183 = t1086 * t1215;
t775 = t1088 * t1110 + t1183;
t680 = t1091 * t772 + t1094 * t775;
t923 = t987 - t1199;
t672 = t1092 * t680 + t1095 * t923;
t674 = -t1092 * t923 + t1095 * t680;
t616 = t1087 * t672 - t1089 * t674;
t677 = t1091 * t775 - t1094 * t772;
t1344 = t1093 * t616 + t1096 * t677;
t1343 = t1093 * t751 + t1096 * t648;
t1342 = -t1093 * t677 + t1096 * t616;
t1341 = pkin(7) * t690;
t1339 = -pkin(2) * t722 + pkin(7) * t692;
t1338 = t1087 * t674 + t1089 * t672;
t1337 = t1087 * t714 + t1089 * t710;
t1334 = pkin(8) * t722;
t1220 = t1008 - t925;
t1180 = t1086 * t1220;
t1212 = -t1196 - t1199;
t1228 = t1088 * t1212 - t1180;
t883 = t1088 * t1220;
t1231 = t1086 * t1212 + t883;
t1255 = t1091 * t1228 + t1094 * t1231;
t1256 = -t1091 * t1231 + t1094 * t1228;
t1281 = t1092 * t1110 + t1095 * t1256;
t1285 = t1092 * t1256 - t1095 * t1110;
t1301 = -t1087 * t1285 + t1089 * t1281;
t1316 = t1093 * t1255 + t1096 * t1301;
t1333 = pkin(6) * t1316;
t1318 = t1093 * t1301 - t1096 * t1255;
t1332 = pkin(6) * t1318;
t1325 = -pkin(3) * t722 + pkin(4) * t821;
t1213 = -t1164 - t1103;
t1207 = -t1086 * t1213 + t1088 * t1111;
t1209 = t1086 * t1111 + t1088 * t1213;
t1222 = t1091 * t1207 + t1094 * t1209;
t1223 = -t1091 * t1209 + t1094 * t1207;
t868 = t987 + t1199;
t1261 = t1092 * t1223 + t1095 * t868;
t1262 = -t1092 * t868 + t1095 * t1223;
t1276 = -t1087 * t1261 + t1089 * t1262;
t1304 = t1093 * t1222 + t1096 * t1276;
t1323 = pkin(6) * t1304;
t1305 = t1093 * t1276 - t1096 * t1222;
t1322 = pkin(6) * t1305;
t1300 = t1087 * t1281 + t1089 * t1285;
t1321 = qJ(2) * t1300;
t1320 = -pkin(1) * t1300 - pkin(2) * t1285 + pkin(3) * t1110 - pkin(8) * t1256;
t1319 = -pkin(1) * t1255 + qJ(2) * t1301;
t952 = -t987 + t1196;
t1245 = t1088 * t952 + t1180;
t1246 = -t1086 * t952 + t883;
t1254 = -t1091 * t1246 - t1094 * t1245;
t1253 = -t1091 * t1245 + t1094 * t1246;
t1280 = -t1092 * t1213 + t1095 * t1253;
t1284 = t1092 * t1253 + t1095 * t1213;
t1303 = -t1087 * t1284 + t1089 * t1280;
t1317 = t1093 * t1303 + t1096 * t1254;
t1315 = -t1093 * t1254 + t1096 * t1303;
t1313 = pkin(7) * t1285;
t1312 = qJ(5) * t806;
t1311 = qJ(5) * t821;
t1277 = t1087 * t1262 + t1089 * t1261;
t1310 = qJ(2) * t1277;
t1309 = -pkin(1) * t1277 - pkin(2) * t1261 - pkin(3) * t868 - pkin(8) * t1223;
t1307 = -pkin(2) * t1255 + pkin(7) * t1281;
t1306 = -pkin(1) * t1222 + qJ(2) * t1276;
t1302 = t1087 * t1280 + t1089 * t1284;
t1297 = pkin(7) * t1261;
t1296 = pkin(8) * t1255;
t1288 = -pkin(3) * t1255 - pkin(4) * t1231;
t1287 = -pkin(2) * t1222 + pkin(7) * t1262;
t1105 = (-t1086 * t988 - t1088 * t990) * t1049;
t1154 = t1049 * t1088;
t1129 = t988 * t1154;
t1155 = t1049 * t1086;
t947 = t990 * t1155;
t1114 = t947 - t1129;
t1203 = -t1091 * t1114 - t1094 * t1105;
t1160 = t1008 * t1092;
t1202 = -t1091 * t1105 + t1094 * t1114;
t1225 = t1095 * t1202 + t1160;
t1005 = t1095 * t1008;
t1229 = t1092 * t1202 - t1005;
t1260 = -t1087 * t1229 + t1089 * t1225;
t1283 = t1093 * t1260 + t1096 * t1203;
t1109 = -t1086 * t897 + t1129;
t1115 = t1088 * t897 + t1155 * t988;
t1200 = -t1091 * t1109 - t1094 * t1115;
t1133 = t1092 * t925;
t1201 = -t1091 * t1115 + t1094 * t1109;
t1226 = t1095 * t1201 - t1133;
t1132 = t1095 * t925;
t1227 = t1092 * t1201 + t1132;
t1258 = -t1087 * t1227 + t1089 * t1226;
t1282 = t1093 * t1258 + t1096 * t1200;
t1279 = -t1093 * t1203 + t1096 * t1260;
t1278 = -t1093 * t1200 + t1096 * t1258;
t1272 = pkin(8) * t1222;
t1271 = qJ(5) * t1228;
t1270 = qJ(5) * t1231;
t1069 = t1096 * g(1) + t1093 * g(2);
t1265 = -0.2e1 * qJD(2) * qJD(1) + t1069;
t1264 = pkin(4) * t868 + qJ(5) * t1207;
t650 = -pkin(3) * t1222 - pkin(4) * t1209;
t1259 = t1087 * t1225 + t1089 * t1229;
t1257 = t1087 * t1226 + t1089 * t1227;
t1252 = 2 * qJD(6);
t1248 = qJ(5) * t1209;
t1247 = qJ(6) * t1215;
t994 = t1038 * t1037;
t1218 = t1008 - t994;
t1244 = t1091 * t1218;
t1022 = t1058 * t1056;
t1211 = -t1022 + qJDD(3);
t1243 = t1092 * t1211;
t1238 = t1094 * t1218;
t1237 = t1095 * t1211;
t1002 = t1049 * t1037;
t930 = -t1002 + t1124;
t1097 = qJD(1) ^ 2;
t1232 = -t1097 * pkin(1) + qJDD(1) * qJ(2) - t1265;
t843 = t1086 * t1103 + t1154 * t990;
t844 = t1088 * t1103 - t947;
t769 = -t1091 * t843 + t1094 * t844;
t1117 = t1092 * t769 - t1132;
t1118 = t1095 * t769 + t1133;
t1204 = -t1087 * t1117 + t1089 * t1118;
t766 = -t1091 * t844 - t1094 * t843;
t1230 = t1093 * t1204 + t1096 * t766;
t1224 = -t1093 * t766 + t1096 * t1204;
t1068 = t1093 * g(1) - t1096 * g(2);
t1113 = -qJDD(2) + t1068;
t1131 = pkin(2) * t1089 + pkin(1);
t1083 = t1087 ^ 2;
t1084 = t1089 ^ 2;
t1140 = t1083 + t1084;
t1012 = t1131 * qJDD(1) + (pkin(7) * t1140 + qJ(2)) * t1097 + t1113;
t1009 = pkin(3) * t1056 - pkin(8) * t1058;
t1198 = qJD(3) ^ 2;
t1024 = -g(3) * t1087 + t1089 * t1232;
t1077 = t1084 * t1097;
t1139 = qJDD(1) * t1089;
t1001 = -pkin(2) * t1077 + pkin(7) * t1139 + t1024;
t1193 = t1089 * g(3);
t1100 = -t1193 + (t1131 * t1097 + (-pkin(7) - qJ(2)) * qJDD(1) + t1265) * t1087;
t935 = t1095 * t1001 + t1092 * t1100;
t887 = -pkin(3) * t1198 + qJDD(3) * pkin(8) - t1009 * t1056 + t935;
t900 = (-t1018 + t1149) * pkin(8) + (-t1017 + t1146) * pkin(3) - t1012;
t802 = t1091 * t887 - t1094 * t900;
t748 = t1218 * pkin(4) + qJ(5) * t930 - t802;
t1197 = t1037 ^ 2;
t803 = t1091 * t900 + t1094 * t887;
t997 = pkin(4) * t1049 - qJ(5) * t1038;
t763 = -pkin(4) * t1197 - qJ(5) * t1107 - t1049 * t997 + t803;
t1191 = t1086 * t748 + t1088 * t763;
t920 = pkin(5) * t988 - qJ(6) * t990;
t1214 = t1008 * qJ(6) + t1049 * t1252 - t988 * t920 + t1191;
t929 = t1124 + t1002;
t1208 = t1097 * t1140;
t931 = (qJD(4) - t1049) * t1038 + t1121;
t1205 = t1087 * t1118 + t1089 * t1117;
t1036 = t1038 ^ 2;
t1052 = t1056 ^ 2;
t1053 = t1058 ^ 2;
t1195 = pkin(3) * t1092;
t1194 = pkin(5) * t1088;
t1192 = qJDD(1) * pkin(1);
t1190 = t1086 * t763 - t1088 * t748;
t1189 = qJ(6) * t1088;
t1188 = qJD(5) * t988;
t1187 = qJD(5) * t990;
t934 = t1001 * t1092 - t1095 * t1100;
t886 = -qJDD(3) * pkin(3) - t1198 * pkin(8) + t1009 * t1058 + t934;
t793 = t1107 * pkin(4) - t1197 * qJ(5) + t1038 * t997 + qJDD(5) + t886;
t1185 = t1086 * t793;
t859 = t1092 * t935 - t1095 * t934;
t1178 = t1087 * t859;
t1177 = t1088 * t793;
t1174 = t1089 * t859;
t980 = 0.2e1 * t1187;
t670 = t980 + t1190;
t978 = -0.2e1 * t1188;
t671 = t978 + t1191;
t613 = t1086 * t671 - t1088 * t670;
t1173 = t1091 * t613;
t1172 = t1091 * t886;
t944 = t1008 + t994;
t1171 = t1091 * t944;
t1168 = t1094 * t613;
t1167 = t1094 * t886;
t1166 = t1094 * t944;
t1163 = -t1196 + t868;
t1159 = t1012 * t1092;
t1158 = t1012 * t1095;
t1013 = qJDD(3) + t1022;
t1157 = t1013 * t1092;
t1156 = t1013 * t1095;
t1153 = t1049 * t1091;
t1152 = t1049 * t1094;
t1050 = t1097 * qJ(2) + t1113 + t1192;
t1151 = t1050 * t1093;
t1150 = t1050 * t1096;
t1148 = t1056 * t1092;
t1147 = t1056 * t1095;
t1145 = t1058 * t1092;
t1144 = t1058 * t1095;
t1143 = t1083 * t1097;
t1142 = t1087 * t1089;
t1137 = qJDD(1) * t1093;
t1135 = qJDD(1) * t1096;
t1130 = -pkin(3) * t1095 - pkin(2);
t1128 = t1092 * t994;
t1127 = t1095 * t994;
t1126 = t1093 * t1022;
t1125 = t1096 * t1022;
t1123 = -qJ(6) * t1086 - pkin(4);
t1122 = t1050 + t1192;
t614 = t1086 * t670 + t1088 * t671;
t860 = t1092 * t934 + t1095 * t935;
t1023 = t1087 * t1232 + t1193;
t968 = t1023 * t1087 + t1089 * t1024;
t1035 = -t1068 * t1093 - t1096 * t1069;
t1119 = t990 * t920 + qJDD(6) + t1190;
t1067 = -t1093 * t1097 + t1135;
t1116 = -pkin(6) * t1067 - g(3) * t1093;
t719 = t1091 * t803 - t1094 * t802;
t720 = t1091 * t802 + t1094 * t803;
t967 = t1023 * t1089 - t1024 * t1087;
t1034 = t1068 * t1096 - t1069 * t1093;
t1066 = t1096 * t1097 + t1137;
t1112 = t978 + t1214;
t1108 = -t1008 * pkin(5) + t1119;
t1060 = t1089 * t1208;
t1031 = -t1060 * t1093 + t1089 * t1135;
t1106 = t1060 * t1096 + t1089 * t1137;
t1102 = -t897 * pkin(5) - t1247 + t793;
t1101 = t1252 * t990 - t1102;
t1076 = t1084 * qJDD(1);
t1075 = t1083 * qJDD(1);
t1065 = t1077 - t1143;
t1064 = t1077 + t1143;
t1063 = t1076 - t1075;
t1062 = t1076 + t1075;
t1059 = t1087 * t1208;
t1051 = -pkin(6) * t1066 + g(3) * t1096;
t1044 = -t1053 - t1198;
t1043 = -t1053 + t1198;
t1042 = t1052 - t1198;
t1040 = t1067 * t1142;
t1039 = t1066 * t1142;
t1032 = t1059 * t1096 + t1087 * t1137;
t1030 = t1059 * t1093 - t1087 * t1135;
t1026 = t1062 * t1096 - t1064 * t1093;
t1025 = t1062 * t1093 + t1064 * t1096;
t1021 = -t1053 + t1052;
t1019 = t1055 + 0.2e1 * t1149;
t1016 = t1054 + 0.2e1 * t1146;
t1010 = -t1052 - t1198;
t1004 = (t1145 - t1147) * qJD(3);
t1003 = (-t1144 - t1148) * qJD(3);
t1000 = -t1036 + t1196;
t999 = -t1196 + t1197;
t993 = -t1052 - t1053;
t992 = -t1036 + t1197;
t984 = -qJD(3) * t1145 + t1018 * t1095;
t983 = qJD(3) * t1144 + t1018 * t1092;
t982 = qJD(3) * t1147 - t1017 * t1092;
t981 = qJD(3) * t1148 + t1017 * t1095;
t976 = -t1036 - t1196;
t975 = -t1044 * t1092 - t1156;
t974 = -t1043 * t1092 + t1237;
t973 = t1042 * t1095 - t1157;
t972 = t1044 * t1095 - t1157;
t971 = t1043 * t1095 + t1243;
t970 = t1042 * t1092 + t1156;
t969 = -t1196 - t1197;
t958 = t1036 + t1197;
t957 = -t1016 * t1095 + t1019 * t1092;
t956 = -t1054 * t1095 - t1055 * t1092;
t955 = -t1016 * t1092 - t1019 * t1095;
t954 = -t1054 * t1092 + t1055 * t1095;
t949 = t1010 * t1095 - t1243;
t948 = t1010 * t1092 + t1237;
t942 = (-t1037 * t1094 + t1038 * t1091) * t1049;
t941 = (t1037 * t1091 + t1038 * t1094) * t1049;
t940 = -t1003 * t1087 + t1004 * t1089;
t939 = t1096 * t968 - t1151;
t938 = t1093 * t968 + t1150;
t932 = -pkin(7) * t972 - t1158;
t926 = (-qJD(4) - t1049) * t1038 - t1121;
t921 = -pkin(7) * t948 - t1159;
t919 = -t1038 * t1153 - t1094 * t1124;
t918 = -t1038 * t1152 + t1091 * t1124;
t917 = t1037 * t1152 + t1091 * t1107;
t916 = -t1037 * t1153 + t1094 * t1107;
t915 = -t1087 * t983 + t1089 * t984;
t914 = -t1087 * t981 + t1089 * t982;
t913 = -t1087 * t972 + t1089 * t975;
t912 = -t1087 * t971 + t1089 * t974;
t911 = -t1087 * t970 + t1089 * t973;
t910 = t1087 * t975 + t1089 * t972;
t907 = t1095 * t942 + t1160;
t906 = t1092 * t942 - t1005;
t905 = t1094 * t999 - t1171;
t904 = -t1000 * t1091 + t1238;
t903 = -t1091 * t999 - t1166;
t902 = -t1000 * t1094 - t1244;
t901 = pkin(2) * t1019 + pkin(7) * t975 - t1159;
t888 = -pkin(2) * t1016 + pkin(7) * t949 + t1158;
t885 = -t1091 * t976 - t1166;
t884 = t1094 * t976 - t1171;
t877 = -t1087 * t955 + t1089 * t957;
t876 = -t1087 * t954 + t1089 * t956;
t875 = t1087 * t956 + t1089 * t954;
t874 = t1094 * t969 - t1244;
t873 = t1091 * t969 + t1238;
t872 = -t1087 * t948 + t1089 * t949;
t871 = t1087 * t949 + t1089 * t948;
t870 = -t1019 * t1093 + t1096 * t913;
t869 = t1019 * t1096 + t1093 * t913;
t866 = t1095 * t919 + t1128;
t865 = t1095 * t917 - t1128;
t864 = t1092 * t919 - t1127;
t863 = t1092 * t917 + t1127;
t858 = t1016 * t1093 + t1096 * t872;
t857 = -t1016 * t1096 + t1093 * t872;
t856 = t1093 * t993 + t1096 * t876;
t855 = t1093 * t876 - t1096 * t993;
t838 = -t1091 * t930 - t1094 * t931;
t837 = t1091 * t929 + t1094 * t926;
t836 = -t1091 * t931 + t1094 * t930;
t835 = -t1091 * t926 + t1094 * t929;
t826 = pkin(2) * t1012 + pkin(7) * t860;
t825 = -pkin(1) * t875 - pkin(2) * t954;
t820 = -t1092 * t931 + t1095 * t905;
t819 = -t1092 * t930 + t1095 * t904;
t818 = t1092 * t905 + t1095 * t931;
t817 = t1092 * t904 + t1095 * t930;
t816 = -t1092 * t929 + t1095 * t885;
t815 = t1092 * t885 + t1095 * t929;
t814 = -pkin(7) * t954 - t859;
t813 = -t1087 * t906 + t1089 * t907;
t812 = -t1092 * t926 + t1095 * t874;
t811 = t1092 * t874 + t1095 * t926;
t810 = -t1092 * t992 + t1095 * t837;
t809 = t1092 * t837 + t1095 * t992;
t808 = -pkin(1) * t910 - pkin(2) * t972 + t935;
t801 = -pkin(8) * t884 + t1167;
t800 = -t1092 * t958 + t1095 * t838;
t799 = t1092 * t838 + t1095 * t958;
t798 = -pkin(8) * t873 + t1172;
t792 = -pkin(2) * t993 + pkin(7) * t956 + t860;
t791 = -pkin(1) * t871 - pkin(2) * t948 + t934;
t790 = -t1087 * t864 + t1089 * t866;
t789 = -t1087 * t863 + t1089 * t865;
t784 = -qJ(2) * t910 - t1087 * t901 + t1089 * t932;
t783 = t1089 * t860 - t1178;
t782 = t1087 * t860 + t1174;
t781 = -qJ(2) * t871 - t1087 * t888 + t1089 * t921;
t780 = -t1012 * t1093 + t1096 * t783;
t779 = t1012 * t1096 + t1093 * t783;
t770 = -pkin(3) * t884 + t803;
t762 = -pkin(3) * t873 + t802;
t741 = -t1087 * t818 + t1089 * t820;
t740 = -t1087 * t817 + t1089 * t819;
t739 = -t1087 * t815 + t1089 * t816;
t738 = t1087 * t816 + t1089 * t815;
t737 = -t1087 * t811 + t1089 * t812;
t736 = t1087 * t812 + t1089 * t811;
t735 = t1177 - t1311;
t726 = -t1087 * t809 + t1089 * t810;
t721 = -pkin(1) * t782 - pkin(2) * t859;
t718 = t1185 - t1270;
t717 = -t1087 * t799 + t1089 * t800;
t716 = t1087 * t800 + t1089 * t799;
t707 = t1093 * t884 + t1096 * t739;
t706 = t1093 * t739 - t1096 * t884;
t703 = t1093 * t873 + t1096 * t737;
t702 = t1093 * t737 - t1096 * t873;
t697 = -qJ(2) * t875 - t1087 * t792 + t1089 * t814;
t696 = t1092 * t886 + t1095 * t720;
t695 = t1092 * t720 - t1095 * t886;
t694 = -pkin(4) * t1215 + t1185 - t1312;
t689 = (pkin(5) * t1049 - (2 * qJD(6))) * t990 + t1102;
t688 = -pkin(4) * t1110 - t1177 + t1271;
t687 = -pkin(7) * t1174 - qJ(2) * t782 - t1087 * t826;
t686 = -pkin(8) * t836 - t719;
t685 = t1093 * t836 + t1096 * t717;
t684 = t1093 * t717 - t1096 * t836;
t668 = -pkin(7) * t815 - t1092 * t770 + t1095 * t801;
t667 = t1101 + (-t1110 - t1186) * pkin(5);
t666 = -pkin(5) * t1186 + t1101 + t1247;
t665 = -pkin(7) * t811 - t1092 * t762 + t1095 * t798;
t656 = -pkin(2) * t884 + pkin(7) * t816 + t1092 * t801 + t1095 * t770;
t655 = -pkin(2) * t873 + pkin(7) * t812 + t1092 * t798 + t1095 * t762;
t654 = -pkin(1) * t738 - pkin(2) * t815 - pkin(3) * t929 - pkin(8) * t885 - t1172;
t653 = qJ(6) * t1196 - t1108 - 0.2e1 * t1187;
t652 = -pkin(1) * t736 - pkin(2) * t811 - pkin(3) * t926 - pkin(8) * t874 + t1167;
t651 = -pkin(5) * t1196 + t1112;
t649 = -pkin(7) * t799 + t1095 * t686 + t1195 * t836;
t644 = qJ(6) * t1163 + t1108 + t980;
t643 = pkin(5) * t1163 + t1112;
t638 = -t1086 * t667 - t1110 * t1189 - t1270;
t637 = -t1087 * t695 + t1089 * t696;
t636 = t1087 * t696 + t1089 * t695;
t635 = -pkin(5) * t1183 + t1088 * t666 + t1311;
t634 = pkin(7) * t800 + t1092 * t686 + t1130 * t836;
t629 = t1088 * t667 + t1110 * t1123 + t1271;
t628 = t1312 + t1086 * t666 + (pkin(4) + t1194) * t1215;
t627 = -t1325 + t671;
t626 = -pkin(5) * t1213 - qJ(6) * t1111 + t650;
t625 = -pkin(1) * t716 - pkin(2) * t799 - pkin(3) * t958 - pkin(8) * t838 - t720;
t624 = -t1091 * t694 + t1094 * t735 + t1334;
t623 = t1288 + t670;
t618 = -pkin(7) * t695 + (-pkin(8) * t1095 + t1195) * t719;
t617 = -t1091 * t688 + t1094 * t718 - t1296;
t612 = t1093 * t719 + t1096 * t637;
t611 = t1093 * t637 - t1096 * t719;
t602 = t980 + (-t1196 - t1212) * qJ(6) + (-t1008 - t1220) * pkin(5) + t1119 + t1288;
t601 = -pkin(4) * t793 + qJ(5) * t614;
t600 = -qJ(6) * t1219 + 0.2e1 * t1188 + (t1196 + t937) * pkin(5) - t1214 + t1325;
t599 = -t613 - t1248;
t598 = -t1086 * t653 + t1088 * t651;
t597 = t1086 * t651 + t1088 * t653;
t596 = pkin(7) * t696 + (-pkin(8) * t1092 + t1130) * t719;
t595 = t1264 + t614;
t594 = -qJ(2) * t738 - t1087 * t656 + t1089 * t668;
t593 = -qJ(2) * t736 - t1087 * t655 + t1089 * t665;
t588 = -pkin(1) * t636 - pkin(2) * t695 + pkin(3) * t886 - pkin(8) * t720;
t587 = -t1086 * t643 + t1088 * t644 - t1248;
t586 = t1086 * t644 + t1088 * t643 + t1264;
t585 = -qJ(2) * t716 - t1087 * t634 + t1089 * t649;
t584 = -t1091 * t629 + t1094 * t638 - t1296;
t583 = -t1091 * t628 + t1094 * t635 - t1334;
t582 = t1094 * t614 - t1173;
t581 = t1091 * t614 + t1168;
t580 = -qJ(5) * t597 + (pkin(5) * t1086 - t1189) * t689;
t579 = -t1091 * t735 - t1094 * t694 - t1347;
t578 = -t1092 * t627 + t1095 * t624 + t1341;
t577 = t1092 * t793 + t1095 * t582;
t576 = t1092 * t582 - t1095 * t793;
t575 = -t1091 * t718 - t1094 * t688 + t1320;
t574 = -t1092 * t623 + t1095 * t617 - t1313;
t573 = t1092 * t624 + t1095 * t627 - t1339;
t572 = qJ(5) * t598 + (t1123 - t1194) * t689;
t571 = -t1091 * t597 + t1094 * t598;
t570 = t1091 * t598 + t1094 * t597;
t569 = t1092 * t617 + t1095 * t623 + t1307;
t568 = t1092 * t689 + t1095 * t571;
t567 = t1092 * t571 - t1095 * t689;
t566 = -t1091 * t595 + t1094 * t599 - t1272;
t565 = -qJ(2) * t636 - t1087 * t596 + t1089 * t618;
t564 = -pkin(3) * t581 - pkin(4) * t613;
t563 = -t1091 * t638 - t1094 * t629 + t1320;
t562 = -t1091 * t635 - t1094 * t628 + t1347;
t561 = -t1092 * t602 + t1095 * t584 - t1313;
t560 = -t1092 * t600 + t1095 * t583 - t1341;
t559 = t1092 * t584 + t1095 * t602 + t1307;
t558 = -t1091 * t586 + t1094 * t587 - t1272;
t557 = t1092 * t583 + t1095 * t600 + t1339;
t556 = -t1092 * t650 + t1095 * t566 - t1297;
t555 = -pkin(8) * t581 - qJ(5) * t1168 - t1091 * t601;
t554 = -t1087 * t576 + t1089 * t577;
t553 = t1087 * t577 + t1089 * t576;
t552 = t1092 * t566 + t1095 * t650 + t1287;
t551 = -t1091 * t599 - t1094 * t595 + t1309;
t550 = -pkin(3) * t570 - pkin(4) * t597 - pkin(5) * t653 - qJ(6) * t651;
t549 = -t1092 * t626 + t1095 * t558 - t1297;
t548 = -t1087 * t573 + t1089 * t578 + t1348;
t547 = -t1091 * t587 - t1094 * t586 + t1309;
t546 = t1092 * t558 + t1095 * t626 + t1287;
t545 = -t1087 * t569 + t1089 * t574 - t1321;
t544 = -t1087 * t567 + t1089 * t568;
t543 = t1087 * t568 + t1089 * t567;
t542 = t1093 * t581 + t1096 * t554;
t541 = t1093 * t554 - t1096 * t581;
t540 = -pkin(8) * t570 - t1091 * t572 + t1094 * t580;
t539 = -t1087 * t559 + t1089 * t561 - t1321;
t538 = -t1087 * t557 + t1089 * t560 - t1348;
t537 = t1093 * t570 + t1096 * t544;
t536 = t1093 * t544 - t1096 * t570;
t535 = -pkin(7) * t576 - t1092 * t564 + t1095 * t555;
t534 = -t1087 * t552 + t1089 * t556 - t1310;
t533 = -pkin(1) * t553 - pkin(2) * t576 + pkin(3) * t793 - pkin(8) * t582 + qJ(5) * t1173 - t1094 * t601;
t532 = -pkin(2) * t581 + pkin(7) * t577 + t1092 * t555 + t1095 * t564;
t531 = -t1087 * t546 + t1089 * t549 - t1310;
t530 = -pkin(7) * t567 - t1092 * t550 + t1095 * t540;
t529 = -pkin(1) * t543 - pkin(2) * t567 + pkin(3) * t689 - pkin(8) * t571 - t1091 * t580 - t1094 * t572;
t528 = -pkin(2) * t570 + pkin(7) * t568 + t1092 * t540 + t1095 * t550;
t527 = -qJ(2) * t553 - t1087 * t532 + t1089 * t535;
t526 = -qJ(2) * t543 - t1087 * t528 + t1089 * t530;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1066, -t1067, 0, t1035, 0, 0, 0, 0, 0, 0, -t1106, t1032, t1026, t939, 0, 0, 0, 0, 0, 0, t858, t870, t856, t780, 0, 0, 0, 0, 0, 0, t703, t707, t685, t612, 0, 0, 0, 0, 0, 0, t1316, t621, t1304, t542, 0, 0, 0, 0, 0, 0, t1316, t1304, -t621, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1067, -t1066, 0, t1034, 0, 0, 0, 0, 0, 0, t1031, t1030, t1025, t938, 0, 0, 0, 0, 0, 0, t857, t869, t855, t779, 0, 0, 0, 0, 0, 0, t702, t706, t684, t611, 0, 0, 0, 0, 0, 0, t1318, t619, t1305, t541, 0, 0, 0, 0, 0, 0, t1318, t1305, -t619, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, 0, 0, 0, 0, 0, 0, t871, t910, t875, t782, 0, 0, 0, 0, 0, 0, t736, t738, t716, t636, 0, 0, 0, 0, 0, 0, t1300, -t630, t1277, t553, 0, 0, 0, 0, 0, 0, t1300, t1277, t630, t543; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1067, 0, -t1066, 0, t1116, -t1051, -t1034, -pkin(6) * t1034, t1040, t1063 * t1096 - t1065 * t1093, t1032, -t1040, t1106, 0, -pkin(6) * t1031 - t1023 * t1093 - t1087 * t1150, -pkin(6) * t1030 - t1024 * t1093 - t1089 * t1150, -pkin(6) * t1025 + t1096 * t967, -pkin(6) * t938 - (pkin(1) * t1093 - qJ(2) * t1096) * t967, t1096 * t915 + t1126, -t1021 * t1093 + t1096 * t877, -t1055 * t1093 + t1096 * t912, t1096 * t914 - t1126, -t1054 * t1093 + t1096 * t911, qJDD(3) * t1093 + t1096 * t940, -pkin(6) * t857 - t1093 * t791 + t1096 * t781, -pkin(6) * t869 - t1093 * t808 + t1096 * t784, -pkin(6) * t855 - t1093 * t825 + t1096 * t697, -pkin(6) * t779 - t1093 * t721 + t1096 * t687, -t1093 * t918 + t1096 * t790, -t1093 * t835 + t1096 * t726, -t1093 * t902 + t1096 * t740, -t1093 * t916 + t1096 * t789, -t1093 * t903 + t1096 * t741, -t1093 * t941 + t1096 * t813, -pkin(6) * t702 - t1093 * t652 + t1096 * t593, -pkin(6) * t706 - t1093 * t654 + t1096 * t594, -pkin(6) * t684 - t1093 * t625 + t1096 * t585, -pkin(6) * t611 - t1093 * t588 + t1096 * t565, t1224, t1342, t1315, t1278, t1343, t1279, -t1093 * t575 + t1096 * t545 - t1332, -t1093 * t579 + t1096 * t548 - t1350, -t1093 * t551 + t1096 * t534 - t1322, -pkin(6) * t541 - t1093 * t533 + t1096 * t527, t1224, t1315, -t1342, t1279, -t1343, t1278, -t1093 * t563 + t1096 * t539 - t1332, -t1093 * t547 + t1096 * t531 - t1322, -t1093 * t562 + t1096 * t538 + t1350, -pkin(6) * t536 - t1093 * t529 + t1096 * t526; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1066, 0, t1067, 0, t1051, t1116, t1035, pkin(6) * t1035, t1039, t1063 * t1093 + t1065 * t1096, t1030, -t1039, -t1031, 0, -pkin(6) * t1106 + t1023 * t1096 - t1087 * t1151, pkin(6) * t1032 + t1024 * t1096 - t1089 * t1151, pkin(6) * t1026 + t1093 * t967, pkin(6) * t939 - (-pkin(1) * t1096 - qJ(2) * t1093) * t967, t1093 * t915 - t1125, t1021 * t1096 + t1093 * t877, t1055 * t1096 + t1093 * t912, t1093 * t914 + t1125, t1054 * t1096 + t1093 * t911, -qJDD(3) * t1096 + t1093 * t940, pkin(6) * t858 + t1093 * t781 + t1096 * t791, pkin(6) * t870 + t1093 * t784 + t1096 * t808, pkin(6) * t856 + t1093 * t697 + t1096 * t825, pkin(6) * t780 + t1093 * t687 + t1096 * t721, t1093 * t790 + t1096 * t918, t1093 * t726 + t1096 * t835, t1093 * t740 + t1096 * t902, t1093 * t789 + t1096 * t916, t1093 * t741 + t1096 * t903, t1093 * t813 + t1096 * t941, pkin(6) * t703 + t1093 * t593 + t1096 * t652, pkin(6) * t707 + t1093 * t594 + t1096 * t654, pkin(6) * t685 + t1093 * t585 + t1096 * t625, pkin(6) * t612 + t1093 * t565 + t1096 * t588, t1230, t1344, t1317, t1282, t1345, t1283, t1093 * t545 + t1096 * t575 + t1333, t1093 * t548 + t1096 * t579 + t1349, t1093 * t534 + t1096 * t551 + t1323, pkin(6) * t542 + t1093 * t527 + t1096 * t533, t1230, t1317, -t1344, t1283, -t1345, t1282, t1093 * t539 + t1096 * t563 + t1333, t1093 * t531 + t1096 * t547 + t1323, t1093 * t538 + t1096 * t562 - t1349, pkin(6) * t537 + t1093 * t526 + t1096 * t529; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1068, t1069, 0, 0, t1075, 0.2e1 * t1087 * t1139, 0, t1076, 0, 0, -qJ(2) * t1060 + t1089 * t1122, qJ(2) * t1059 - t1087 * t1122, pkin(1) * t1064 + qJ(2) * t1062 + t968, pkin(1) * t1050 + qJ(2) * t968, t1087 * t984 + t1089 * t983, t1087 * t957 + t1089 * t955, t1087 * t974 + t1089 * t971, t1087 * t982 + t1089 * t981, t1087 * t973 + t1089 * t970, t1003 * t1089 + t1004 * t1087, -pkin(1) * t1016 + qJ(2) * t872 + t1087 * t921 + t1089 * t888, pkin(1) * t1019 + qJ(2) * t913 + t1087 * t932 + t1089 * t901, -pkin(1) * t993 + qJ(2) * t876 + t1087 * t814 + t1089 * t792, pkin(1) * t1012 - pkin(7) * t1178 + qJ(2) * t783 + t1089 * t826, t1087 * t866 + t1089 * t864, t1087 * t810 + t1089 * t809, t1087 * t819 + t1089 * t817, t1087 * t865 + t1089 * t863, t1087 * t820 + t1089 * t818, t1087 * t907 + t1089 * t906, -pkin(1) * t873 + qJ(2) * t737 + t1087 * t665 + t1089 * t655, -pkin(1) * t884 + qJ(2) * t739 + t1087 * t668 + t1089 * t656, -pkin(1) * t836 + qJ(2) * t717 + t1087 * t649 + t1089 * t634, -pkin(1) * t719 + qJ(2) * t637 + t1087 * t618 + t1089 * t596, t1205, -t1338, t1302, t1257, -t1337, t1259, t1087 * t574 + t1089 * t569 + t1319, t1087 * t578 + t1089 * t573 - t1346, t1087 * t556 + t1089 * t552 + t1306, -pkin(1) * t581 + qJ(2) * t554 + t1087 * t535 + t1089 * t532, t1205, t1302, t1338, t1259, t1337, t1257, t1087 * t561 + t1089 * t559 + t1319, t1087 * t549 + t1089 * t546 + t1306, t1087 * t560 + t1089 * t557 + t1346, -pkin(1) * t570 + qJ(2) * t544 + t1087 * t530 + t1089 * t528;];
tauB_reg  = t1;
