% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:28
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:26:20
% EndTime: 2019-05-05 10:27:14
% DurationCPUTime: 49.73s
% Computational Cost: add. (402386->1018), mult. (843727->1660), div. (0->0), fcn. (650003->14), ass. (0->727)
t1009 = sin(qJ(5));
t1014 = cos(qJ(5));
t1010 = sin(qJ(4));
t1015 = cos(qJ(4));
t1011 = sin(qJ(3));
t1118 = qJD(2) * t1011;
t1097 = qJD(3) * t1118;
t1016 = cos(qJ(3));
t1108 = qJDD(2) * t1016;
t1043 = t1097 - t1108;
t1117 = qJD(2) * t1016;
t1096 = qJD(3) * t1117;
t1110 = qJDD(2) * t1011;
t968 = t1096 + t1110;
t1091 = t1010 * t968 + t1015 * t1043;
t1051 = t1010 * t1016 + t1011 * t1015;
t961 = t1051 * qJD(2);
t885 = -qJD(4) * t961 - t1091;
t960 = -t1010 * t1118 + t1015 * t1117;
t886 = t960 * qJD(4) - t1010 * t1043 + t1015 * t968;
t905 = t1009 * t961 - t1014 * t960;
t1024 = qJD(5) * t905 - t1009 * t885 - t1014 * t886;
t1000 = qJD(3) + qJD(4);
t995 = qJD(5) + t1000;
t895 = t995 * t905;
t1172 = t1024 + t895;
t1008 = sin(qJ(6));
t1092 = t1009 * t886 - t1014 * t885;
t907 = t1009 * t960 + t1014 * t961;
t783 = -qJD(5) * t907 - t1092;
t1027 = qJDD(6) - t783;
t1013 = cos(qJ(6));
t879 = t1008 * t907 - t1013 * t995;
t881 = t1008 * t995 + t1013 * t907;
t816 = t881 * t879;
t1161 = t1027 - t816;
t1171 = t1008 * t1161;
t846 = t907 * t905;
t1106 = qJDD(3) + qJDD(4);
t994 = qJDD(5) + t1106;
t1164 = -t846 + t994;
t1170 = t1009 * t1164;
t923 = t960 * t961;
t1160 = t923 + t1106;
t1169 = t1010 * t1160;
t1168 = t1013 * t1161;
t1167 = t1014 * t1164;
t1166 = t1015 * t1160;
t1004 = sin(pkin(6));
t1006 = cos(pkin(6));
t1003 = sin(pkin(12));
t1005 = cos(pkin(12));
t1095 = g(1) * t1003 - t1005 * g(2);
t1150 = g(3) - qJDD(1);
t1165 = -t1004 * t1150 + t1006 * t1095;
t746 = -t879 * qJD(6) + t1008 * t994 - t1013 * t1024;
t900 = qJD(6) + t905;
t826 = t900 * t879;
t714 = -t826 + t746;
t951 = t1000 * t960;
t865 = t951 - t886;
t1163 = t951 + t886;
t1159 = t1003 * t1150;
t1158 = t1005 * t1150;
t975 = g(1) * t1005 + g(2) * t1003;
t929 = -t1003 * t1095 - t1005 * t975;
t866 = (qJD(4) - t1000) * t961 + t1091;
t762 = (qJD(5) - t995) * t907 + t1092;
t1093 = -t1008 * t1024 - t1013 * t994;
t711 = (qJD(6) - t900) * t881 + t1093;
t928 = -t1003 * t975 + t1005 * t1095;
t1154 = qJD(2) ^ 2;
t1012 = sin(qJ(2));
t1017 = cos(qJ(2));
t902 = t1012 * t1165 - t1017 * t975;
t890 = -pkin(2) * t1154 + qJDD(2) * pkin(8) + t902;
t947 = t1004 * t1095 + t1006 * t1150;
t853 = t1011 * t890 + t1016 * t947;
t1157 = -t853 + (-t968 + t1096) * pkin(9);
t877 = t879 ^ 2;
t878 = t881 ^ 2;
t899 = t900 ^ 2;
t903 = t905 ^ 2;
t904 = t907 ^ 2;
t1156 = t960 ^ 2;
t959 = t961 ^ 2;
t1155 = t995 ^ 2;
t999 = t1000 ^ 2;
t1153 = t1016 ^ 2;
t901 = -t1012 * t975 - t1017 * t1165;
t831 = t1012 * t901 + t1017 * t902;
t1152 = pkin(7) * t831;
t1151 = pkin(5) * t1009;
t1113 = t1016 * t1154;
t988 = t1011 * t1113;
t976 = qJDD(3) + t988;
t1020 = t976 * pkin(3) + t1157;
t854 = -t1011 * t947 + t1016 * t890;
t979 = qJD(3) * pkin(3) - pkin(9) * t1118;
t1022 = -pkin(9) * t1043 - qJD(3) * t979 + t854;
t997 = t1153 * t1154;
t1021 = -pkin(3) * t997 + t1022;
t736 = t1010 * t1021 - t1015 * t1020;
t1019 = pkin(4) * t1160 + pkin(10) * t865 - t736;
t737 = t1010 * t1020 + t1015 * t1021;
t943 = pkin(4) * t1000 - pkin(10) * t961;
t706 = -pkin(4) * t1156 + pkin(10) * t885 - t1000 * t943 + t737;
t624 = t1009 * t1019 + t1014 * t706;
t836 = pkin(5) * t905 - pkin(11) * t907;
t595 = -pkin(5) * t1155 + pkin(11) * t994 - t836 * t905 + t624;
t889 = -qJDD(2) * pkin(2) - t1154 * pkin(8) + t901;
t839 = t1043 * pkin(3) - pkin(9) * t997 + t1118 * t979 + t889;
t765 = -t885 * pkin(4) - t1156 * pkin(10) + t943 * t961 + t839;
t643 = t1172 * pkin(11) + (t907 * t995 - t783) * pkin(5) + t765;
t558 = t1008 * t643 + t1013 * t595;
t623 = t1009 * t706 - t1014 * t1019;
t594 = -t994 * pkin(5) - pkin(11) * t1155 + t836 * t907 + t623;
t1148 = t1008 * t594;
t728 = t1027 + t816;
t1147 = t1008 * t728;
t1146 = t1008 * t900;
t1145 = t1009 * t765;
t834 = t846 + t994;
t1144 = t1009 * t834;
t1143 = t1009 * t995;
t567 = t1009 * t624 - t1014 * t623;
t1142 = t1010 * t567;
t1141 = t1010 * t839;
t914 = -t923 + t1106;
t1140 = t1010 * t914;
t653 = t1010 * t737 - t1015 * t736;
t1139 = t1011 * t653;
t1138 = t1011 * t889;
t1137 = t1011 * t976;
t977 = qJDD(3) - t988;
t1136 = t1011 * t977;
t1135 = t1012 * t947;
t1134 = t1013 * t594;
t1133 = t1013 * t728;
t1132 = t1013 * t900;
t1131 = t1014 * t765;
t1130 = t1014 * t834;
t1129 = t1014 * t995;
t1128 = t1015 * t567;
t1127 = t1015 * t839;
t1126 = t1015 * t914;
t1125 = t1016 * t653;
t1124 = t1016 * t889;
t969 = -0.2e1 * t1097 + t1108;
t930 = t1016 * t969;
t1123 = t1016 * t977;
t1122 = t1017 * t947;
t1119 = qJD(2) * qJD(3);
t1001 = t1011 ^ 2;
t1116 = t1154 * t1001;
t1115 = t1000 * t1010;
t1114 = t1000 * t1015;
t1111 = qJDD(2) * t1004;
t1109 = qJDD(2) * t1012;
t1107 = qJDD(2) * t1017;
t1105 = t1001 + t1153;
t1104 = t1009 * t816;
t1103 = t1012 * t846;
t1102 = t1012 * t923;
t1101 = t1014 * t816;
t1100 = t1017 * t846;
t1099 = t1017 * t923;
t1098 = -pkin(5) * t1014 - pkin(4);
t557 = t1008 * t595 - t1013 * t643;
t568 = t1009 * t623 + t1014 * t624;
t654 = t1010 * t736 + t1015 * t737;
t778 = t1011 * t853 + t1016 * t854;
t1090 = t1012 * t988;
t1089 = t1017 * t988;
t776 = t1011 * t854 - t1016 * t853;
t970 = t1105 * qJDD(2);
t973 = t997 + t1116;
t926 = -t1012 * t973 + t1017 * t970;
t1088 = pkin(7) * t926 - t1012 * t776;
t971 = -t1012 * t1154 + t1107;
t1087 = -pkin(7) * t971 - t1135;
t1050 = t1017 * t1154 + t1109;
t1086 = -pkin(7) * t1050 + t1122;
t956 = t1050 * t1006;
t1084 = t1003 * t971 + t1005 * t956;
t918 = t1003 * t956 - t1005 * t971;
t498 = t1008 * t558 - t1013 * t557;
t499 = t1008 * t557 + t1013 * t558;
t472 = t1009 * t499 - t1014 * t594;
t473 = t1009 * t594 + t1014 * t499;
t437 = t1010 * t473 + t1015 * t472;
t438 = -t1010 * t472 + t1015 * t473;
t411 = -t1011 * t437 + t1016 * t438;
t1083 = t1012 * t411 - t1017 * t498;
t504 = t1010 * t568 + t1128;
t505 = t1015 * t568 - t1142;
t456 = -t1011 * t504 + t1016 * t505;
t1082 = t1012 * t456 - t1017 * t765;
t715 = -t826 - t746;
t630 = -t1008 * t715 - t1013 * t711;
t779 = t877 + t878;
t600 = t1009 * t630 + t1014 * t779;
t601 = -t1009 * t779 + t1014 * t630;
t542 = t1010 * t601 + t1015 * t600;
t543 = -t1010 * t600 + t1015 * t601;
t484 = -t1011 * t542 + t1016 * t543;
t628 = -t1008 * t711 + t1013 * t715;
t1081 = t1012 * t484 - t1017 * t628;
t713 = (-qJD(6) - t900) * t881 - t1093;
t631 = -t1008 * t714 + t1013 * t713;
t815 = -t878 + t877;
t604 = t1009 * t631 + t1014 * t815;
t605 = -t1009 * t815 + t1014 * t631;
t547 = t1010 * t605 + t1015 * t604;
t548 = -t1010 * t604 + t1015 * t605;
t490 = -t1011 * t547 + t1016 * t548;
t629 = -t1008 * t713 - t1013 * t714;
t1080 = t1012 * t490 + t1017 * t629;
t789 = -t899 - t877;
t668 = t1013 * t789 - t1171;
t608 = t1009 * t668 + t1014 * t713;
t609 = -t1009 * t713 + t1014 * t668;
t549 = t1010 * t609 + t1015 * t608;
t550 = -t1010 * t608 + t1015 * t609;
t494 = -t1011 * t549 + t1016 * t550;
t667 = t1008 * t789 + t1168;
t1079 = t1012 * t494 - t1017 * t667;
t802 = -t878 - t899;
t676 = -t1008 * t802 - t1133;
t610 = t1009 * t676 - t1014 * t714;
t611 = t1009 * t714 + t1014 * t676;
t551 = t1010 * t611 + t1015 * t610;
t552 = -t1010 * t610 + t1015 * t611;
t496 = -t1011 * t551 + t1016 * t552;
t675 = t1013 * t802 - t1147;
t1078 = t1012 * t496 - t1017 * t675;
t825 = -t878 + t899;
t697 = -t1008 * t825 + t1168;
t616 = t1009 * t697 + t1014 * t715;
t618 = -t1009 * t715 + t1014 * t697;
t563 = t1010 * t618 + t1015 * t616;
t565 = -t1010 * t616 + t1015 * t618;
t502 = -t1011 * t563 + t1016 * t565;
t695 = -t1013 * t825 - t1171;
t1077 = t1012 * t502 + t1017 * t695;
t824 = t877 - t899;
t698 = t1013 * t824 - t1147;
t617 = t1009 * t698 + t1014 * t711;
t619 = -t1009 * t711 + t1014 * t698;
t564 = t1010 * t619 + t1015 * t617;
t566 = -t1010 * t617 + t1015 * t619;
t503 = -t1011 * t564 + t1016 * t566;
t696 = -t1008 * t824 - t1133;
t1076 = t1012 * t503 + t1017 * t696;
t745 = -qJD(6) * t881 - t1093;
t708 = -t1008 * t745 + t1132 * t879;
t659 = t1009 * t708 + t1101;
t661 = t1014 * t708 - t1104;
t583 = t1010 * t661 + t1015 * t659;
t585 = -t1010 * t659 + t1015 * t661;
t528 = -t1011 * t583 + t1016 * t585;
t707 = -t1013 * t745 - t1146 * t879;
t1075 = t1012 * t528 + t1017 * t707;
t710 = t1013 * t746 - t1146 * t881;
t660 = t1009 * t710 - t1101;
t662 = t1014 * t710 + t1104;
t584 = t1010 * t662 + t1015 * t660;
t586 = -t1010 * t660 + t1015 * t662;
t529 = -t1011 * t584 + t1016 * t586;
t709 = -t1008 * t746 - t1132 * t881;
t1074 = t1012 * t529 + t1017 * t709;
t761 = t1024 - t895;
t677 = -t1009 * t762 + t1014 * t761;
t679 = -t1009 * t761 - t1014 * t762;
t596 = t1010 * t679 + t1015 * t677;
t598 = -t1010 * t677 + t1015 * t679;
t540 = -t1011 * t596 + t1016 * t598;
t809 = -t903 - t904;
t1073 = t1012 * t540 - t1017 * t809;
t757 = (qJD(5) + t995) * t907 + t1092;
t678 = -t1009 * t757 - t1014 * t1172;
t680 = t1009 * t1172 - t1014 * t757;
t597 = t1010 * t680 + t1015 * t678;
t599 = -t1010 * t678 + t1015 * t680;
t541 = -t1011 * t597 + t1016 * t599;
t840 = t903 - t904;
t1072 = t1012 * t541 + t1017 * t840;
t764 = (t1008 * t881 - t1013 * t879) * t900;
t699 = t1009 * t764 - t1014 * t1027;
t700 = t1009 * t1027 + t1014 * t764;
t612 = t1010 * t700 + t1015 * t699;
t613 = -t1010 * t699 + t1015 * t700;
t554 = -t1011 * t612 + t1016 * t613;
t763 = (t1008 * t879 + t1013 * t881) * t900;
t1071 = t1012 * t554 + t1017 * t763;
t580 = t1016 * t654 - t1139;
t1070 = t1012 * t580 - t1017 * t839;
t832 = -t1155 - t903;
t767 = t1009 * t832 + t1167;
t768 = t1014 * t832 - t1170;
t690 = t1010 * t768 + t1015 * t767;
t691 = -t1010 * t767 + t1015 * t768;
t607 = -t1011 * t690 + t1016 * t691;
t1069 = t1012 * t607 - t1017 * t757;
t882 = -t904 - t1155;
t792 = t1014 * t882 - t1144;
t793 = -t1009 * t882 - t1130;
t721 = t1010 * t793 + t1015 * t792;
t722 = -t1010 * t792 + t1015 * t793;
t639 = -t1011 * t721 + t1016 * t722;
t1068 = t1012 * t639 + t1017 * t1172;
t894 = -t904 + t1155;
t794 = t1014 * t894 + t1170;
t796 = -t1009 * t894 + t1167;
t723 = t1010 * t796 + t1015 * t794;
t725 = -t1010 * t794 + t1015 * t796;
t646 = -t1011 * t723 + t1016 * t725;
t1067 = t1012 * t646 + t1017 * t761;
t893 = t903 - t1155;
t795 = t1009 * t893 + t1130;
t797 = t1014 * t893 - t1144;
t724 = t1010 * t797 + t1015 * t795;
t726 = -t1010 * t795 + t1015 * t797;
t647 = -t1011 * t724 + t1016 * t726;
t1066 = t1012 * t647 + t1017 * t762;
t821 = (-t1009 * t905 - t1014 * t907) * t995;
t822 = (t1009 * t907 - t1014 * t905) * t995;
t755 = t1010 * t822 + t1015 * t821;
t756 = -t1010 * t821 + t1015 * t822;
t674 = -t1011 * t755 + t1016 * t756;
t1065 = t1012 * t674 - t1017 * t994;
t861 = (qJD(4) + t1000) * t961 + t1091;
t785 = -t1010 * t861 + t1015 * t1163;
t787 = -t1010 * t1163 - t1015 * t861;
t719 = -t1011 * t785 + t1016 * t787;
t922 = -t959 + t1156;
t1064 = t1012 * t719 + t1017 * t922;
t786 = -t1010 * t866 + t1015 * t865;
t788 = -t1010 * t865 - t1015 * t866;
t720 = -t1011 * t786 + t1016 * t788;
t888 = -t959 - t1156;
t1063 = t1012 * t720 - t1017 * t888;
t908 = -t999 - t1156;
t837 = t1010 * t908 + t1166;
t838 = t1015 * t908 - t1169;
t770 = -t1011 * t837 + t1016 * t838;
t1062 = t1012 * t770 - t1017 * t861;
t1061 = t1012 * t778 - t1017 * t889;
t940 = -t959 - t999;
t867 = t1015 * t940 - t1140;
t868 = -t1010 * t940 - t1126;
t791 = -t1011 * t867 + t1016 * t868;
t1060 = t1012 * t791 - t1017 * t1163;
t949 = -t959 + t999;
t871 = t1015 * t949 + t1169;
t873 = -t1010 * t949 + t1166;
t800 = -t1011 * t871 + t1016 * t873;
t1059 = t1012 * t800 + t1017 * t865;
t948 = -t999 + t1156;
t872 = t1010 * t948 + t1126;
t874 = t1015 * t948 - t1140;
t801 = -t1011 * t872 + t1016 * t874;
t1058 = t1012 * t801 + t1017 * t866;
t1057 = t1012 * t902 - t1017 * t901;
t967 = 0.2e1 * t1096 + t1110;
t925 = -t1011 * t967 + t930;
t974 = t997 - t1116;
t1056 = t1012 * t925 + t1017 * t974;
t1018 = qJD(3) ^ 2;
t986 = -t997 - t1018;
t937 = t1016 * t986 - t1137;
t1055 = t1012 * t937 + t1017 * t969;
t984 = -t1018 - t1116;
t939 = -t1011 * t984 - t1123;
t1054 = t1012 * t939 - t1017 * t967;
t1053 = t1012 * t970 + t1017 * t973;
t965 = t1105 * t1119;
t1052 = -qJDD(3) * t1017 + t1012 * t965;
t749 = t1014 * t783 + t1143 * t905;
t750 = -t1009 * t783 + t1129 * t905;
t669 = t1010 * t750 + t1015 * t749;
t671 = -t1010 * t749 + t1015 * t750;
t590 = -t1011 * t669 + t1016 * t671;
t1049 = t1012 * t590 + t1100;
t751 = -t1009 * t1024 + t1129 * t907;
t752 = -t1014 * t1024 - t1143 * t907;
t670 = t1010 * t752 + t1015 * t751;
t672 = -t1010 * t751 + t1015 * t752;
t591 = -t1011 * t670 + t1016 * t672;
t1048 = t1012 * t591 - t1100;
t849 = t1015 * t885 - t1115 * t960;
t850 = -t1010 * t885 - t1114 * t960;
t774 = -t1011 * t849 + t1016 * t850;
t1047 = t1012 * t774 - t1099;
t851 = t1010 * t886 + t1114 * t961;
t852 = t1015 * t886 - t1115 * t961;
t775 = -t1011 * t851 + t1016 * t852;
t1046 = t1012 * t775 + t1099;
t966 = t1016 * t976;
t983 = t1018 - t1116;
t938 = -t1011 * t983 + t966;
t1045 = -t1011 * t1107 + t1012 * t938;
t985 = t997 - t1018;
t936 = t1016 * t985 - t1136;
t1044 = t1012 * t936 - t1016 * t1107;
t891 = (t1010 * t960 - t1015 * t961) * t1000;
t892 = (t1010 * t961 + t1015 * t960) * t1000;
t820 = -t1011 * t891 + t1016 * t892;
t1042 = t1012 * t820 - t1017 * t1106;
t413 = pkin(10) * t473 + (-pkin(11) * t1009 + t1098) * t498;
t432 = -pkin(10) * t472 + (-pkin(11) * t1014 + t1151) * t498;
t394 = -pkin(3) * t498 + pkin(9) * t438 + t1010 * t432 + t1015 * t413;
t397 = -pkin(9) * t437 - t1010 * t413 + t1015 * t432;
t410 = t1011 * t438 + t1016 * t437;
t382 = -pkin(8) * t410 - t1011 * t394 + t1016 * t397;
t396 = -pkin(2) * t410 - pkin(3) * t437 - pkin(4) * t472 + pkin(5) * t594 - pkin(11) * t499;
t405 = t1012 * t498 + t1017 * t411;
t1041 = pkin(7) * t405 + t1012 * t382 + t1017 * t396;
t475 = -pkin(11) * t628 - t498;
t454 = pkin(10) * t601 + t1009 * t475 + t1098 * t628;
t459 = -pkin(10) * t600 + t1014 * t475 + t1151 * t628;
t412 = -pkin(3) * t628 + pkin(9) * t543 + t1010 * t459 + t1015 * t454;
t415 = -pkin(9) * t542 - t1010 * t454 + t1015 * t459;
t483 = t1011 * t543 + t1016 * t542;
t399 = -pkin(8) * t483 - t1011 * t412 + t1016 * t415;
t433 = -pkin(2) * t483 - pkin(3) * t542 - pkin(4) * t600 - pkin(5) * t779 - pkin(11) * t630 - t499;
t465 = t1012 * t628 + t1017 * t484;
t1040 = pkin(7) * t465 + t1012 * t399 + t1017 * t433;
t521 = -pkin(5) * t667 + t557;
t570 = -pkin(11) * t667 + t1148;
t463 = -pkin(4) * t667 + pkin(10) * t609 + t1009 * t570 + t1014 * t521;
t469 = -pkin(10) * t608 - t1009 * t521 + t1014 * t570;
t423 = -pkin(3) * t667 + pkin(9) * t550 + t1010 * t469 + t1015 * t463;
t429 = -pkin(9) * t549 - t1010 * t463 + t1015 * t469;
t493 = t1011 * t550 + t1016 * t549;
t402 = -pkin(8) * t493 - t1011 * t423 + t1016 * t429;
t442 = -pkin(2) * t493 - pkin(3) * t549 - pkin(4) * t608 - pkin(5) * t713 - pkin(11) * t668 + t1134;
t478 = t1012 * t667 + t1017 * t494;
t1039 = pkin(7) * t478 + t1012 * t402 + t1017 * t442;
t522 = -pkin(5) * t675 + t558;
t571 = -pkin(11) * t675 + t1134;
t464 = -pkin(4) * t675 + pkin(10) * t611 + t1009 * t571 + t1014 * t522;
t470 = -pkin(10) * t610 - t1009 * t522 + t1014 * t571;
t424 = -pkin(3) * t675 + pkin(9) * t552 + t1010 * t470 + t1015 * t464;
t431 = -pkin(9) * t551 - t1010 * t464 + t1015 * t470;
t495 = t1011 * t552 + t1016 * t551;
t403 = -pkin(8) * t495 - t1011 * t424 + t1016 * t431;
t444 = -pkin(2) * t495 - pkin(3) * t551 - pkin(4) * t610 + pkin(5) * t714 - pkin(11) * t676 - t1148;
t482 = t1012 * t675 + t1017 * t496;
t1038 = pkin(7) * t482 + t1012 * t403 + t1017 * t444;
t545 = -pkin(4) * t765 + pkin(10) * t568;
t451 = -pkin(3) * t765 + pkin(9) * t505 - pkin(10) * t1142 + t1015 * t545;
t453 = -pkin(9) * t504 - pkin(10) * t1128 - t1010 * t545;
t455 = t1011 * t505 + t1016 * t504;
t407 = -pkin(8) * t455 - t1011 * t451 + t1016 * t453;
t430 = -pkin(2) * t455 - pkin(3) * t504 - pkin(4) * t567;
t452 = t1012 * t765 + t1017 * t456;
t1037 = pkin(7) * t452 + t1012 * t407 + t1017 * t430;
t520 = -pkin(4) * t809 + pkin(10) * t679 + t568;
t531 = -pkin(10) * t677 - t567;
t461 = -pkin(3) * t809 + pkin(9) * t598 + t1010 * t531 + t1015 * t520;
t462 = -pkin(9) * t596 - t1010 * t520 + t1015 * t531;
t538 = t1011 * t598 + t1016 * t596;
t421 = -pkin(8) * t538 - t1011 * t461 + t1016 * t462;
t497 = -pkin(2) * t538 - pkin(3) * t596 - pkin(4) * t677;
t530 = t1012 * t809 + t1017 * t540;
t1036 = pkin(7) * t530 + t1012 * t421 + t1017 * t497;
t648 = -pkin(4) * t757 + pkin(10) * t768 - t1131;
t685 = -pkin(10) * t767 + t1145;
t546 = -pkin(3) * t757 + pkin(9) * t691 + t1010 * t685 + t1015 * t648;
t569 = -pkin(9) * t690 - t1010 * t648 + t1015 * t685;
t606 = t1011 * t691 + t1016 * t690;
t474 = -pkin(8) * t606 - t1011 * t546 + t1016 * t569;
t515 = -pkin(2) * t606 - pkin(3) * t690 - pkin(4) * t767 + t623;
t578 = t1012 * t757 + t1017 * t607;
t1035 = pkin(7) * t578 + t1012 * t474 + t1017 * t515;
t651 = pkin(4) * t1172 + pkin(10) * t793 + t1145;
t702 = -pkin(10) * t792 + t1131;
t560 = pkin(3) * t1172 + pkin(9) * t722 + t1010 * t702 + t1015 * t651;
t572 = -pkin(9) * t721 - t1010 * t651 + t1015 * t702;
t638 = t1011 * t722 + t1016 * t721;
t485 = -pkin(8) * t638 - t1011 * t560 + t1016 * t572;
t532 = -pkin(2) * t638 - pkin(3) * t721 - pkin(4) * t792 + t624;
t593 = -t1012 * t1172 + t1017 * t639;
t1034 = pkin(7) * t593 + t1012 * t485 + t1017 * t532;
t579 = t1011 * t654 + t1125;
t649 = -pkin(3) * t839 + pkin(9) * t654;
t519 = -pkin(8) * t579 - pkin(9) * t1125 - t1011 * t649;
t559 = -pkin(2) * t579 - pkin(3) * t653;
t577 = t1012 * t839 + t1017 * t580;
t1033 = pkin(7) * t577 + t1012 * t519 + t1017 * t559;
t627 = -pkin(3) * t888 + pkin(9) * t788 + t654;
t637 = -pkin(9) * t786 - t653;
t718 = t1011 * t788 + t1016 * t786;
t544 = -pkin(8) * t718 - t1011 * t627 + t1016 * t637;
t655 = -pkin(2) * t718 - pkin(3) * t786;
t692 = t1012 * t888 + t1017 * t720;
t1032 = pkin(7) * t692 + t1012 * t544 + t1017 * t655;
t733 = -pkin(3) * t861 + pkin(9) * t838 - t1127;
t769 = t1011 * t838 + t1016 * t837;
t771 = -pkin(9) * t837 + t1141;
t640 = -pkin(8) * t769 - t1011 * t733 + t1016 * t771;
t652 = -pkin(2) * t769 + t1010 * t1022 - t1015 * t1157 + (-t1015 * qJDD(3) - t1051 * t1113 - t837) * pkin(3);
t731 = t1012 * t861 + t1017 * t770;
t1031 = pkin(7) * t731 + t1012 * t640 + t1017 * t652;
t734 = -pkin(3) * t1163 + pkin(9) * t868 + t1141;
t780 = -pkin(9) * t867 + t1127;
t790 = t1011 * t868 + t1016 * t867;
t650 = -pkin(8) * t790 - t1011 * t734 + t1016 * t780;
t656 = -pkin(2) * t790 - pkin(3) * t867 + t737;
t738 = t1012 * t1163 + t1017 * t791;
t1030 = pkin(7) * t738 + t1012 * t650 + t1017 * t656;
t933 = t1011 * t986 + t966;
t817 = -pkin(2) * t933 + t853;
t847 = -pkin(8) * t933 + t1138;
t897 = -t1012 * t969 + t1017 * t937;
t1029 = pkin(7) * t897 + t1012 * t847 + t1017 * t817;
t935 = t1016 * t984 - t1136;
t818 = -pkin(2) * t935 + t854;
t848 = -pkin(8) * t935 + t1124;
t898 = t1012 * t967 + t1017 * t939;
t1028 = pkin(7) * t898 + t1012 * t848 + t1017 * t818;
t944 = t1011 * t1043 - t1119 * t1153;
t1026 = t1012 * t944 - t1089;
t945 = -t1001 * t1119 + t1016 * t968;
t1025 = t1012 * t945 + t1089;
t747 = t1012 * t889 + t1017 * t778;
t1023 = pkin(7) * t747 + (-pkin(2) * t1017 - pkin(8) * t1012) * t776;
t957 = t971 * t1006;
t955 = t971 * t1004;
t954 = t1050 * t1004;
t946 = qJDD(3) * t1012 + t1017 * t965;
t934 = t1016 * t983 + t1137;
t932 = t1011 * t985 + t1123;
t931 = (t968 + t1096) * t1011;
t927 = t1052 * t1006;
t924 = t1011 * t969 + t1016 * t967;
t921 = t1053 * t1006;
t920 = t1053 * t1004;
t919 = -t1003 * t957 - t1005 * t1050;
t917 = -t1003 * t1050 + t1005 * t957;
t912 = t1017 * t945 - t1090;
t911 = t1017 * t944 + t1090;
t910 = t1011 * t1109 + t1017 * t938;
t909 = t1012 * t1108 + t1017 * t936;
t887 = -t1012 * t974 + t1017 * t925;
t870 = -t1122 + (t1004 * t954 + t1006 * t956) * pkin(7);
t869 = -t1135 + (-t1004 * t955 - t1006 * t957) * pkin(7);
t860 = -t1003 * t921 + t1005 * t926;
t859 = t1003 * t926 + t1005 * t921;
t858 = -t1004 * t931 + t1006 * t1025;
t857 = -t1004 * t930 + t1006 * t1026;
t856 = -t1004 * t934 + t1006 * t1045;
t855 = -t1004 * t932 + t1006 * t1044;
t844 = -t1004 * t935 + t1006 * t1054;
t843 = -t1004 * t933 + t1006 * t1055;
t842 = t1004 * t1054 + t1006 * t935;
t841 = t1004 * t1055 + t1006 * t933;
t829 = -t1004 * t924 + t1006 * t1056;
t828 = pkin(2) * t969 + pkin(8) * t937 - t1124;
t827 = -pkin(2) * t967 + pkin(8) * t939 + t1138;
t823 = t831 * t1006;
t819 = t1011 * t892 + t1016 * t891;
t814 = -pkin(1) * t955 + t1004 * t901 + t1006 * t1086;
t813 = pkin(1) * t954 + t1004 * t902 + t1006 * t1087;
t810 = t1012 * t1106 + t1017 * t820;
t808 = t1004 * t947 + t1006 * t1057;
t807 = t1004 * t1057 - t1006 * t947;
t806 = -t1003 * t844 + t1005 * t898;
t805 = -t1003 * t843 + t1005 * t897;
t804 = t1003 * t898 + t1005 * t844;
t803 = t1003 * t897 + t1005 * t843;
t799 = t1011 * t874 + t1016 * t872;
t798 = t1011 * t873 + t1016 * t871;
t773 = t1011 * t852 + t1016 * t851;
t772 = t1011 * t850 + t1016 * t849;
t766 = pkin(2) * t973 + pkin(8) * t970 + t778;
t754 = t1017 * t775 - t1102;
t753 = t1017 * t774 + t1102;
t748 = -pkin(2) * t889 + pkin(8) * t778;
t744 = -pkin(1) * t807 + t1006 * t1152;
t743 = -t1012 * t866 + t1017 * t801;
t742 = -t1012 * t865 + t1017 * t800;
t741 = -t1003 * t808 + t1005 * t831;
t740 = t1003 * t831 + t1005 * t808;
t739 = -t1004 * t819 + t1006 * t1042;
t732 = -t1017 * t776 + (-t1004 * t920 - t1006 * t921) * pkin(7);
t730 = (-t1004 * t807 - t1006 * t808) * pkin(7);
t717 = t1011 * t787 + t1016 * t785;
t701 = -t1012 * t922 + t1017 * t719;
t694 = -t1012 * t818 + t1017 * t848 + (-t1004 * t842 - t1006 * t844) * pkin(7);
t693 = -t1012 * t817 + t1017 * t847 + (-t1004 * t841 - t1006 * t843) * pkin(7);
t689 = -t1004 * t799 + t1006 * t1058;
t688 = -t1004 * t798 + t1006 * t1059;
t687 = -t1004 * t773 + t1006 * t1046;
t686 = -t1004 * t772 + t1006 * t1047;
t684 = -t1004 * t790 + t1006 * t1060;
t683 = t1004 * t1060 + t1006 * t790;
t682 = -t1004 * t776 + t1006 * t1061;
t681 = t1004 * t1061 + t1006 * t776;
t673 = t1011 * t756 + t1016 * t755;
t666 = t1012 * t994 + t1017 * t674;
t665 = -pkin(1) * t842 - t1004 * t827 + t1006 * t1028;
t664 = -pkin(1) * t841 - t1004 * t828 + t1006 * t1029;
t663 = -pkin(1) * t920 - t1004 * t766 + t1006 * t1088;
t658 = -t1004 * t769 + t1006 * t1062;
t657 = t1004 * t1062 + t1006 * t769;
t645 = t1011 * t726 + t1016 * t724;
t644 = t1011 * t725 + t1016 * t723;
t636 = -t1003 * t682 + t1005 * t747;
t635 = t1003 * t747 + t1005 * t682;
t634 = -pkin(2) * t1163 + pkin(8) * t791 + t1011 * t780 + t1016 * t734;
t633 = -t1003 * t684 + t1005 * t738;
t632 = t1003 * t738 + t1005 * t684;
t626 = -t1004 * t717 + t1006 * t1064;
t625 = -pkin(2) * t861 + pkin(8) * t770 + t1011 * t771 + t1016 * t733;
t621 = -t1004 * t718 + t1006 * t1063;
t620 = t1004 * t1063 + t1006 * t718;
t615 = -t1003 * t658 + t1005 * t731;
t614 = t1003 * t731 + t1005 * t658;
t603 = -t1012 * t762 + t1017 * t647;
t602 = -t1012 * t761 + t1017 * t646;
t589 = t1011 * t672 + t1016 * t670;
t588 = t1011 * t671 + t1016 * t669;
t587 = -t1004 * t673 + t1006 * t1065;
t582 = t1017 * t591 + t1103;
t581 = t1017 * t590 - t1103;
t576 = -t1003 * t621 + t1005 * t692;
t575 = t1003 * t692 + t1005 * t621;
t574 = (pkin(2) * t1012 - pkin(8) * t1017) * t776 + (-t1004 * t681 - t1006 * t682) * pkin(7);
t573 = -pkin(1) * t681 - t1004 * t748 + t1006 * t1023;
t562 = -t1004 * t645 + t1006 * t1066;
t561 = -t1004 * t644 + t1006 * t1067;
t556 = -t1004 * t638 + t1006 * t1068;
t555 = t1004 * t1068 + t1006 * t638;
t553 = t1011 * t613 + t1016 * t612;
t539 = t1011 * t599 + t1016 * t597;
t537 = -pkin(2) * t888 + pkin(8) * t720 + t1011 * t637 + t1016 * t627;
t536 = -t1012 * t763 + t1017 * t554;
t535 = -t1004 * t606 + t1006 * t1069;
t534 = t1004 * t1069 + t1006 * t606;
t533 = -t1012 * t840 + t1017 * t541;
t527 = t1011 * t586 + t1016 * t584;
t526 = t1011 * t585 + t1016 * t583;
t525 = -t1004 * t589 + t1006 * t1048;
t524 = -t1004 * t588 + t1006 * t1049;
t523 = -t1012 * t656 + t1017 * t650 + (-t1004 * t683 - t1006 * t684) * pkin(7);
t518 = -t1004 * t579 + t1006 * t1070;
t517 = t1004 * t1070 + t1006 * t579;
t516 = -t1012 * t652 + t1017 * t640 + (-t1004 * t657 - t1006 * t658) * pkin(7);
t514 = -pkin(2) * t839 + pkin(8) * t580 - pkin(9) * t1139 + t1016 * t649;
t513 = -t1012 * t709 + t1017 * t529;
t512 = -t1012 * t707 + t1017 * t528;
t511 = -pkin(1) * t683 - t1004 * t634 + t1006 * t1030;
t510 = -t1003 * t556 + t1005 * t593;
t509 = t1003 * t593 + t1005 * t556;
t508 = -pkin(1) * t657 - t1004 * t625 + t1006 * t1031;
t507 = -t1003 * t535 + t1005 * t578;
t506 = t1003 * t578 + t1005 * t535;
t501 = t1011 * t566 + t1016 * t564;
t500 = t1011 * t565 + t1016 * t563;
t492 = -t1003 * t518 + t1005 * t577;
t491 = t1003 * t577 + t1005 * t518;
t489 = t1011 * t548 + t1016 * t547;
t488 = -t1004 * t553 + t1006 * t1071;
t487 = -t1012 * t696 + t1017 * t503;
t486 = -t1012 * t695 + t1017 * t502;
t481 = -t1004 * t539 + t1006 * t1072;
t480 = -t1004 * t538 + t1006 * t1073;
t479 = t1004 * t1073 + t1006 * t538;
t477 = pkin(2) * t1172 + pkin(8) * t639 + t1011 * t572 + t1016 * t560;
t476 = -t1012 * t655 + t1017 * t544 + (-t1004 * t620 - t1006 * t621) * pkin(7);
t471 = -t1012 * t629 + t1017 * t490;
t468 = -pkin(2) * t757 + pkin(8) * t607 + t1011 * t569 + t1016 * t546;
t467 = -t1004 * t527 + t1006 * t1074;
t466 = -t1004 * t526 + t1006 * t1075;
t460 = -pkin(1) * t620 - t1004 * t537 + t1006 * t1032;
t458 = -t1003 * t480 + t1005 * t530;
t457 = t1003 * t530 + t1005 * t480;
t450 = -t1004 * t501 + t1006 * t1076;
t449 = -t1004 * t500 + t1006 * t1077;
t448 = -t1004 * t495 + t1006 * t1078;
t447 = t1004 * t1078 + t1006 * t495;
t446 = -t1004 * t493 + t1006 * t1079;
t445 = t1004 * t1079 + t1006 * t493;
t443 = -t1004 * t489 + t1006 * t1080;
t441 = -t1004 * t483 + t1006 * t1081;
t440 = t1004 * t1081 + t1006 * t483;
t439 = -t1012 * t559 + t1017 * t519 + (-t1004 * t517 - t1006 * t518) * pkin(7);
t436 = -t1012 * t532 + t1017 * t485 + (-t1004 * t555 - t1006 * t556) * pkin(7);
t435 = -pkin(1) * t517 - t1004 * t514 + t1006 * t1033;
t434 = -t1012 * t515 + t1017 * t474 + (-t1004 * t534 - t1006 * t535) * pkin(7);
t428 = -t1003 * t448 + t1005 * t482;
t427 = t1003 * t482 + t1005 * t448;
t426 = -t1003 * t446 + t1005 * t478;
t425 = t1003 * t478 + t1005 * t446;
t422 = -pkin(1) * t555 - t1004 * t477 + t1006 * t1034;
t420 = -pkin(2) * t809 + pkin(8) * t540 + t1011 * t462 + t1016 * t461;
t419 = -t1003 * t441 + t1005 * t465;
t418 = t1003 * t465 + t1005 * t441;
t417 = -t1004 * t455 + t1006 * t1082;
t416 = t1004 * t1082 + t1006 * t455;
t414 = -pkin(1) * t534 - t1004 * t468 + t1006 * t1035;
t409 = -t1003 * t417 + t1005 * t452;
t408 = t1003 * t452 + t1005 * t417;
t406 = -pkin(2) * t765 + pkin(8) * t456 + t1011 * t453 + t1016 * t451;
t404 = -t1012 * t497 + t1017 * t421 + (-t1004 * t479 - t1006 * t480) * pkin(7);
t401 = -pkin(2) * t675 + pkin(8) * t496 + t1011 * t431 + t1016 * t424;
t400 = -pkin(2) * t667 + pkin(8) * t494 + t1011 * t429 + t1016 * t423;
t398 = -pkin(2) * t628 + pkin(8) * t484 + t1011 * t415 + t1016 * t412;
t395 = -pkin(1) * t479 - t1004 * t420 + t1006 * t1036;
t393 = -t1004 * t410 + t1006 * t1083;
t392 = t1004 * t1083 + t1006 * t410;
t391 = -t1012 * t444 + t1017 * t403 + (-t1004 * t447 - t1006 * t448) * pkin(7);
t390 = -t1012 * t442 + t1017 * t402 + (-t1004 * t445 - t1006 * t446) * pkin(7);
t389 = -t1012 * t430 + t1017 * t407 + (-t1004 * t416 - t1006 * t417) * pkin(7);
t388 = -t1003 * t393 + t1005 * t405;
t387 = t1003 * t405 + t1005 * t393;
t386 = -t1012 * t433 + t1017 * t399 + (-t1004 * t440 - t1006 * t441) * pkin(7);
t385 = -pkin(1) * t416 - t1004 * t406 + t1006 * t1037;
t384 = -pkin(1) * t447 - t1004 * t401 + t1006 * t1038;
t383 = -pkin(1) * t445 - t1004 * t400 + t1006 * t1039;
t381 = -pkin(1) * t440 - t1004 * t398 + t1006 * t1040;
t380 = -pkin(2) * t498 + pkin(8) * t411 + t1011 * t397 + t1016 * t394;
t379 = -t1012 * t396 + t1017 * t382 + (-t1004 * t392 - t1006 * t393) * pkin(7);
t378 = -pkin(1) * t392 - t1004 * t380 + t1006 * t1041;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, 0, 0, 0, 0, 0, 0, t919, t918, 0, t741, 0, 0, 0, 0, 0, 0, t805, t806, t860, t636, 0, 0, 0, 0, 0, 0, t615, t633, t576, t492, 0, 0, 0, 0, 0, 0, t507, t510, t458, t409, 0, 0, 0, 0, 0, 0, t426, t428, t419, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, 0, 0, 0, 0, 0, t917, -t1084, 0, t740, 0, 0, 0, 0, 0, 0, t803, t804, t859, t635, 0, 0, 0, 0, 0, 0, t614, t632, t575, t491, 0, 0, 0, 0, 0, 0, t506, t509, t457, t408, 0, 0, 0, 0, 0, 0, t425, t427, t418, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1150, 0, 0, 0, 0, 0, 0, t955, -t954, 0, t807, 0, 0, 0, 0, 0, 0, t841, t842, t920, t681, 0, 0, 0, 0, 0, 0, t657, t683, t620, t517, 0, 0, 0, 0, 0, 0, t534, t555, t479, t416, 0, 0, 0, 0, 0, 0, t445, t447, t440, t392; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1159, -t1158, -t928, -qJ(1) * t928, 0, 0, -t918, 0, t919, t1003 * t1111, -qJ(1) * t917 - t1003 * t814 + t1005 * t869, qJ(1) * t1084 - t1003 * t813 + t1005 * t870, -t1003 * t823 - t1005 * t1057, -qJ(1) * t740 - t1003 * t744 + t1005 * t730, -t1003 * t858 + t1005 * t912, -t1003 * t829 + t1005 * t887, -t1003 * t856 + t1005 * t910, -t1003 * t857 + t1005 * t911, -t1003 * t855 + t1005 * t909, -t1003 * t927 + t1005 * t946, -qJ(1) * t803 - t1003 * t664 + t1005 * t693, -qJ(1) * t804 - t1003 * t665 + t1005 * t694, -qJ(1) * t859 - t1003 * t663 + t1005 * t732, -qJ(1) * t635 - t1003 * t573 + t1005 * t574, -t1003 * t687 + t1005 * t754, -t1003 * t626 + t1005 * t701, -t1003 * t688 + t1005 * t742, -t1003 * t686 + t1005 * t753, -t1003 * t689 + t1005 * t743, -t1003 * t739 + t1005 * t810, -qJ(1) * t614 - t1003 * t508 + t1005 * t516, -qJ(1) * t632 - t1003 * t511 + t1005 * t523, -qJ(1) * t575 - t1003 * t460 + t1005 * t476, -qJ(1) * t491 - t1003 * t435 + t1005 * t439, -t1003 * t525 + t1005 * t582, -t1003 * t481 + t1005 * t533, -t1003 * t561 + t1005 * t602, -t1003 * t524 + t1005 * t581, -t1003 * t562 + t1005 * t603, -t1003 * t587 + t1005 * t666, -qJ(1) * t506 - t1003 * t414 + t1005 * t434, -qJ(1) * t509 - t1003 * t422 + t1005 * t436, -qJ(1) * t457 - t1003 * t395 + t1005 * t404, -qJ(1) * t408 - t1003 * t385 + t1005 * t389, -t1003 * t467 + t1005 * t513, -t1003 * t443 + t1005 * t471, -t1003 * t449 + t1005 * t486, -t1003 * t466 + t1005 * t512, -t1003 * t450 + t1005 * t487, -t1003 * t488 + t1005 * t536, -qJ(1) * t425 - t1003 * t383 + t1005 * t390, -qJ(1) * t427 - t1003 * t384 + t1005 * t391, -qJ(1) * t418 - t1003 * t381 + t1005 * t386, -qJ(1) * t387 - t1003 * t378 + t1005 * t379; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1158, -t1159, t929, qJ(1) * t929, 0, 0, t1084, 0, t917, -t1005 * t1111, qJ(1) * t919 + t1003 * t869 + t1005 * t814, qJ(1) * t918 + t1003 * t870 + t1005 * t813, -t1003 * t1057 + t1005 * t823, qJ(1) * t741 + t1003 * t730 + t1005 * t744, t1003 * t912 + t1005 * t858, t1003 * t887 + t1005 * t829, t1003 * t910 + t1005 * t856, t1003 * t911 + t1005 * t857, t1003 * t909 + t1005 * t855, t1003 * t946 + t1005 * t927, qJ(1) * t805 + t1003 * t693 + t1005 * t664, qJ(1) * t806 + t1003 * t694 + t1005 * t665, qJ(1) * t860 + t1003 * t732 + t1005 * t663, qJ(1) * t636 + t1003 * t574 + t1005 * t573, t1003 * t754 + t1005 * t687, t1003 * t701 + t1005 * t626, t1003 * t742 + t1005 * t688, t1003 * t753 + t1005 * t686, t1003 * t743 + t1005 * t689, t1003 * t810 + t1005 * t739, qJ(1) * t615 + t1003 * t516 + t1005 * t508, qJ(1) * t633 + t1003 * t523 + t1005 * t511, qJ(1) * t576 + t1003 * t476 + t1005 * t460, qJ(1) * t492 + t1003 * t439 + t1005 * t435, t1003 * t582 + t1005 * t525, t1003 * t533 + t1005 * t481, t1003 * t602 + t1005 * t561, t1003 * t581 + t1005 * t524, t1003 * t603 + t1005 * t562, t1003 * t666 + t1005 * t587, qJ(1) * t507 + t1003 * t434 + t1005 * t414, qJ(1) * t510 + t1003 * t436 + t1005 * t422, qJ(1) * t458 + t1003 * t404 + t1005 * t395, qJ(1) * t409 + t1003 * t389 + t1005 * t385, t1003 * t513 + t1005 * t467, t1003 * t471 + t1005 * t443, t1003 * t486 + t1005 * t449, t1003 * t512 + t1005 * t466, t1003 * t487 + t1005 * t450, t1003 * t536 + t1005 * t488, qJ(1) * t426 + t1003 * t390 + t1005 * t383, qJ(1) * t428 + t1003 * t391 + t1005 * t384, qJ(1) * t419 + t1003 * t386 + t1005 * t381, qJ(1) * t388 + t1003 * t379 + t1005 * t378; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1095, t975, 0, 0, 0, 0, t954, 0, t955, t1006 * qJDD(2), pkin(1) * t957 + t1004 * t1086 - t1006 * t901, -pkin(1) * t956 + t1004 * t1087 - t1006 * t902, t831 * t1004, pkin(1) * t808 + t1004 * t1152, t1004 * t1025 + t1006 * t931, t1004 * t1056 + t1006 * t924, t1004 * t1045 + t1006 * t934, t1004 * t1026 + t1006 * t930, t1004 * t1044 + t1006 * t932, t1052 * t1004, pkin(1) * t843 + t1004 * t1029 + t1006 * t828, pkin(1) * t844 + t1004 * t1028 + t1006 * t827, pkin(1) * t921 + t1004 * t1088 + t1006 * t766, pkin(1) * t682 + t1004 * t1023 + t1006 * t748, t1004 * t1046 + t1006 * t773, t1004 * t1064 + t1006 * t717, t1004 * t1059 + t1006 * t798, t1004 * t1047 + t1006 * t772, t1004 * t1058 + t1006 * t799, t1004 * t1042 + t1006 * t819, pkin(1) * t658 + t1004 * t1031 + t1006 * t625, pkin(1) * t684 + t1004 * t1030 + t1006 * t634, pkin(1) * t621 + t1004 * t1032 + t1006 * t537, pkin(1) * t518 + t1004 * t1033 + t1006 * t514, t1004 * t1048 + t1006 * t589, t1004 * t1072 + t1006 * t539, t1004 * t1067 + t1006 * t644, t1004 * t1049 + t1006 * t588, t1004 * t1066 + t1006 * t645, t1004 * t1065 + t1006 * t673, pkin(1) * t535 + t1004 * t1035 + t1006 * t468, pkin(1) * t556 + t1004 * t1034 + t1006 * t477, pkin(1) * t480 + t1004 * t1036 + t1006 * t420, pkin(1) * t417 + t1004 * t1037 + t1006 * t406, t1004 * t1074 + t1006 * t527, t1004 * t1080 + t1006 * t489, t1004 * t1077 + t1006 * t500, t1004 * t1075 + t1006 * t526, t1004 * t1076 + t1006 * t501, t1004 * t1071 + t1006 * t553, pkin(1) * t446 + t1004 * t1039 + t1006 * t400, pkin(1) * t448 + t1004 * t1038 + t1006 * t401, pkin(1) * t441 + t1004 * t1040 + t1006 * t398, pkin(1) * t393 + t1004 * t1041 + t1006 * t380;];
tauB_reg  = t1;
