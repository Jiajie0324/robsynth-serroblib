% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRRR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:39:59
% EndTime: 2019-03-09 00:40:22
% DurationCPUTime: 14.04s
% Computational Cost: add. (18785->729), mult. (43997->975), div. (0->0), fcn. (35014->18), ass. (0->348)
t280 = sin(qJ(3));
t285 = -pkin(9) - pkin(8);
t382 = qJD(3) * t285;
t226 = t280 * t382;
t283 = cos(qJ(3));
t227 = t283 * t382;
t235 = t285 * t280;
t236 = t285 * t283;
t279 = sin(qJ(4));
t479 = cos(qJ(4));
t380 = t479 * t283;
t318 = t279 * t280 - t380;
t371 = qJD(4) * t479;
t275 = sin(pkin(6));
t284 = cos(qJ(2));
t423 = t275 * t284;
t377 = qJD(1) * t423;
t406 = qJD(4) * t279;
t488 = t479 * t226 + t279 * t227 + t235 * t371 + t236 * t406 + t318 * t377;
t219 = t279 * t283 + t280 * t479;
t510 = t219 * t377 - t279 * t226 + t227 * t479;
t282 = cos(qJ(6));
t401 = qJD(6) * t282;
t346 = qJD(2) * t380;
t409 = qJD(2) * t280;
t372 = t279 * t409;
t213 = t346 - t372;
t214 = t219 * qJD(2);
t278 = sin(qJ(5));
t478 = cos(qJ(5));
t135 = -t478 * t213 + t214 * t278;
t503 = t135 * t282;
t509 = t401 + t503;
t269 = qJD(3) + qJD(4);
t501 = t269 * t219;
t508 = -pkin(10) * t501 + t488;
t293 = t269 * t318;
t507 = pkin(10) * t293 - t235 * t406 + t236 * t371 + t510;
t407 = qJD(3) * t280;
t263 = pkin(3) * t407;
t281 = sin(qJ(2));
t411 = qJD(1) * t281;
t378 = t275 * t411;
t486 = t263 - t378;
t277 = sin(qJ(6));
t315 = t278 * t213 + t214 * t478;
t356 = qJD(5) + t269;
t328 = t282 * t356;
t120 = t277 * t315 - t328;
t122 = t277 * t356 + t282 * t315;
t267 = qJDD(3) + qJDD(4);
t350 = qJDD(5) + t267;
t402 = qJD(6) * t277;
t360 = qJDD(2) * t479;
t395 = t283 * qJDD(2);
t347 = -t269 * t346 - t279 * t395 - t280 * t360;
t118 = t269 * t372 + t347;
t396 = t280 * qJDD(2);
t119 = qJD(2) * t501 + t279 * t396 - t283 * t360;
t370 = qJD(5) * t478;
t405 = qJD(5) * t278;
t67 = t118 * t478 + t278 * t119 - t213 * t370 + t214 * t405;
t46 = -qJD(6) * t328 - t277 * t350 + t282 * t67 + t315 * t402;
t404 = qJD(6) * t122;
t47 = -t277 * t67 - t282 * t350 + t404;
t498 = qJD(6) + t135;
t506 = t498 * t277;
t9 = -t120 * t509 - t122 * t506 - t277 * t47 - t46 * t282;
t353 = t278 * t118 - t478 * t119;
t68 = qJD(5) * t315 - t353;
t66 = qJDD(6) + t68;
t64 = t282 * t66;
t16 = t120 * t315 - t498 * t506 + t64;
t338 = pkin(4) * t501 + t486;
t43 = t46 * t277;
t18 = t122 * t509 - t43;
t17 = -t122 * t315 + t277 * t66 + t498 * t509;
t276 = cos(pkin(6));
t412 = qJD(1) * t276;
t248 = t283 * t412;
t228 = qJD(2) * pkin(8) + t378;
t355 = pkin(9) * qJD(2) + t228;
t170 = -t280 * t355 + t248;
t164 = qJD(3) * pkin(3) + t170;
t376 = t280 * t412;
t171 = t283 * t355 + t376;
t381 = t479 * t171;
t106 = t279 * t164 + t381;
t468 = t213 * pkin(10);
t93 = t106 + t468;
t456 = t278 * t93;
t162 = t279 * t171;
t105 = t479 * t164 - t162;
t203 = t214 * pkin(10);
t92 = t105 - t203;
t82 = pkin(4) * t269 + t92;
t56 = t478 * t82 - t456;
t52 = -pkin(5) * t356 - t56;
t462 = t135 * t52;
t177 = t479 * t235 + t236 * t279;
t129 = -pkin(10) * t219 + t177;
t178 = t279 * t235 - t479 * t236;
t130 = -pkin(10) * t318 + t178;
t450 = t129 * t370 - t130 * t405 + t507 * t278 + t478 * t508;
t304 = t478 * t318;
t74 = qJD(5) * t304 + t219 * t405 + t278 * t501 + t293 * t478;
t309 = t278 * t318;
t75 = -qJD(5) * t309 + t219 * t370 - t278 * t293 + t478 * t501;
t504 = t75 * pkin(5) + t74 * pkin(11) + t338;
t502 = t135 * t315;
t448 = cos(pkin(12));
t357 = t448 * t284;
t274 = sin(pkin(12));
t427 = t274 * t281;
t209 = -t276 * t427 + t357;
t273 = qJ(3) + qJ(4);
t264 = sin(t273);
t265 = cos(t273);
t428 = t274 * t275;
t500 = -t209 * t264 + t265 * t428;
t425 = t275 * t281;
t499 = -t264 * t425 + t265 * t276;
t62 = -t135 ^ 2 + t315 ^ 2;
t358 = t448 * t281;
t426 = t274 * t284;
t207 = t276 * t358 + t426;
t266 = qJ(5) + t273;
t256 = sin(t266);
t257 = cos(t266);
t359 = t275 * t448;
t145 = -t207 * t256 - t257 * t359;
t147 = -t209 * t256 + t257 * t428;
t184 = -t256 * t425 + t257 * t276;
t497 = g(1) * t147 + g(2) * t145 + g(3) * t184;
t95 = pkin(5) * t315 + pkin(11) * t135;
t50 = t135 * t356 - t67;
t467 = t283 * pkin(3);
t261 = pkin(2) + t467;
t202 = -qJD(2) * t261 - t377;
t150 = -pkin(4) * t213 + t202;
t146 = t207 * t257 - t256 * t359;
t148 = t209 * t257 + t256 * t428;
t185 = t256 * t276 + t257 * t425;
t313 = g(1) * t148 + g(2) * t146 + g(3) * t185;
t399 = qJD(1) * qJD(2);
t368 = t284 * t399;
t446 = qJDD(2) * pkin(8);
t187 = t446 + (qJDD(1) * t281 + t368) * t275;
t397 = qJDD(1) * t276;
t247 = t283 * t397;
t101 = qJDD(3) * pkin(3) + t247 + (-pkin(9) * qJDD(2) - t187) * t280 - t171 * qJD(3);
t383 = qJD(3) * t248 + t283 * t187 + t280 * t397;
t113 = -t228 * t407 + t383;
t398 = qJD(2) * qJD(3);
t367 = t280 * t398;
t102 = (-t367 + t395) * pkin(9) + t113;
t41 = -qJD(4) * t106 + t479 * t101 - t279 * t102;
t32 = t267 * pkin(4) + t118 * pkin(10) + t41;
t349 = -t279 * t101 - t479 * t102 - t164 * t371 + t171 * t406;
t36 = -pkin(10) * t119 - t349;
t7 = t278 * t32 + t478 * t36 + t82 * t370 - t93 * t405;
t296 = t150 * t135 + t313 - t7;
t361 = t278 * t36 - t478 * t32;
t389 = t478 * t93;
t57 = t278 * t82 + t389;
t8 = -qJD(5) * t57 - t361;
t6 = -pkin(5) * t350 - t8;
t495 = t6 * t277 + t52 * t401;
t369 = t281 * t399;
t336 = -qJDD(1) * t423 + t275 * t369;
t151 = pkin(3) * t367 - qJDD(2) * t261 + t336;
t88 = pkin(4) * t119 + t151;
t15 = pkin(5) * t68 + pkin(11) * t67 + t88;
t53 = pkin(11) * t356 + t57;
t69 = pkin(5) * t135 - pkin(11) * t315 + t150;
t329 = t277 * t53 - t282 * t69;
t5 = pkin(11) * t350 + t7;
t2 = -t329 * qJD(6) + t277 * t15 + t282 * t5;
t1 = t2 * t282;
t23 = t277 * t69 + t282 * t53;
t3 = -qJD(6) * t23 + t282 * t15 - t277 * t5;
t493 = -t3 * t277 + t1;
t492 = -t23 * t498 - t3;
t392 = t479 * pkin(3);
t260 = t392 + pkin(4);
t421 = t278 * t279;
t143 = t260 * t370 + (-t279 * t405 + (t478 * t479 - t421) * qJD(4)) * pkin(3);
t107 = -t279 * t170 - t381;
t306 = t107 - t468;
t108 = t479 * t170 - t162;
t94 = -t203 + t108;
t61 = t278 * t306 + t478 * t94;
t452 = t143 - t61;
t379 = t478 * t279;
t451 = -t278 * t94 + t306 * t478 + t260 * t405 + (t279 * t370 + (t278 * t479 + t379) * qJD(4)) * pkin(3);
t87 = t278 * t129 + t130 * t478;
t449 = qJD(5) * t87 + t278 * t508 - t507 * t478;
t58 = t278 * t92 + t389;
t344 = pkin(4) * t405 - t58;
t491 = t105 * t269;
t443 = t498 * t315;
t206 = -t276 * t357 + t427;
t208 = t276 * t426 + t358;
t340 = g(1) * t208 + g(2) * t206;
t485 = g(3) * t423 - t340;
t489 = t485 * t256;
t487 = -qJD(4) * t178 + t510;
t476 = pkin(4) * t278;
t258 = pkin(11) + t476;
t59 = t478 * t92 - t456;
t477 = pkin(4) * t214;
t78 = t477 + t95;
t29 = t277 * t78 + t282 * t59;
t348 = pkin(4) * t370;
t484 = -t258 * t402 + t282 * t348 - t29;
t48 = t52 * t402;
t362 = t315 * t329 + t48;
t312 = t315 * t23 + t277 * t497 + t495;
t297 = -t150 * t315 - t361 - t497;
t51 = t269 * t315 + t353;
t286 = qJD(3) ^ 2;
t447 = qJDD(2) * pkin(2);
t186 = t336 - t447;
t324 = -t186 + t340;
t480 = -pkin(8) * t286 + t275 * (-g(3) * t284 + t369) + t324 + t447;
t210 = t276 * t283 - t280 * t425;
t470 = g(3) * t210;
t469 = g(3) * t275;
t160 = t219 * t278 + t304;
t161 = t219 * t478 - t309;
t191 = pkin(4) * t318 - t261;
t84 = t160 * pkin(5) - t161 * pkin(11) + t191;
t54 = -t277 * t87 + t282 * t84;
t465 = qJD(6) * t54 + t277 * t504 + t282 * t450;
t55 = t277 * t84 + t282 * t87;
t464 = -qJD(6) * t55 - t277 * t450 + t282 * t504;
t463 = qJD(2) * pkin(2);
t461 = t329 * t498;
t460 = t329 * t277;
t458 = t23 * t277;
t457 = t277 * t74;
t455 = t282 * t74;
t45 = t47 * t282;
t445 = t120 * t277;
t444 = t122 * t120;
t436 = t161 * t277;
t435 = t161 * t282;
t433 = t214 * t213;
t432 = t228 * t280;
t431 = t257 * t277;
t430 = t257 * t282;
t424 = t275 * t283;
t422 = t277 * t284;
t420 = t282 * t284;
t419 = qJDD(1) - g(3);
t231 = pkin(4) * t265 + t467;
t225 = pkin(2) + t231;
t270 = -pkin(10) + t285;
t418 = -t206 * t225 - t207 * t270;
t417 = -t208 * t225 - t209 * t270;
t230 = -pkin(3) * t280 - pkin(4) * t264;
t416 = t209 * t230 + t231 * t428;
t415 = t230 * t425 + t276 * t231;
t205 = pkin(3) * t379 + t278 * t260;
t271 = t280 ^ 2;
t272 = t283 ^ 2;
t414 = t271 - t272;
t413 = t271 + t272;
t229 = -t377 - t463;
t410 = qJD(2) * t229;
t408 = qJD(2) * t281;
t403 = qJD(6) * t498;
t391 = t478 * pkin(4);
t262 = pkin(3) * t409;
t386 = t275 * t422;
t385 = t275 * t420;
t287 = qJD(2) ^ 2;
t384 = t280 * t287 * t283;
t375 = t275 * t408;
t374 = qJD(2) * t423;
t366 = t284 * t398;
t140 = t145 * pkin(5);
t365 = t146 * pkin(11) + t140;
t141 = t147 * pkin(5);
t364 = pkin(11) * t148 + t141;
t180 = t184 * pkin(5);
t363 = pkin(11) * t185 + t180;
t345 = t283 * t367;
t343 = t500 * pkin(4);
t341 = pkin(5) * t257 + pkin(11) * t256;
t339 = g(1) * t209 + g(2) * t207;
t334 = -t135 * t56 + t315 * t57;
t199 = pkin(11) + t205;
t333 = -t199 * t66 + t462;
t332 = -t258 * t66 + t462;
t331 = -t282 * t329 + t458;
t330 = -t23 * t282 - t460;
t326 = t499 * pkin(4);
t325 = qJDD(2) * t284 - t281 * t287;
t323 = t207 * t230 - t231 * t359;
t211 = t276 * t280 + t281 * t424;
t132 = t210 * t479 - t279 * t211;
t133 = t279 * t210 + t211 * t479;
t90 = t278 * t132 + t133 * t478;
t76 = -t277 * t90 - t385;
t322 = -t282 * t90 + t386;
t320 = t161 * t401 - t457;
t319 = -t161 * t402 - t455;
t316 = t132 * t478 - t278 * t133;
t183 = t228 * t283 + t376;
t204 = -pkin(3) * t421 + t260 * t478;
t152 = -t207 * t264 - t265 * t359;
t311 = t1 - t313;
t310 = -t497 - t6;
t307 = -g(3) * t425 - t339;
t305 = t152 * pkin(4);
t303 = -t135 * t458 + t329 * t503 + t311;
t299 = -qJD(6) * t331 + t493;
t298 = -pkin(8) * qJDD(3) + (t229 + t377 - t463) * qJD(3);
t295 = -g(1) * (-t209 * t265 - t264 * t428) - g(2) * (-t207 * t265 + t264 * t359) - g(3) * (-t264 * t276 - t265 * t425) - t202 * t213 + t349;
t114 = -t183 * qJD(3) - t280 * t187 + t247;
t182 = t248 - t432;
t290 = t113 * t283 - t114 * t280 + (-t182 * t283 - t183 * t280) * qJD(3) - t339;
t289 = -g(1) * t500 - g(2) * t152 - g(3) * t499 - t202 * t214 + t41;
t259 = -t391 - pkin(5);
t198 = -pkin(5) - t204;
t196 = t225 * t423;
t181 = t262 + t477;
t167 = -qJD(3) * t211 - t280 * t374;
t166 = qJD(3) * t210 + t283 * t374;
t123 = -t213 ^ 2 + t214 ^ 2;
t104 = t214 * t269 - t119;
t103 = -t347 + (-t213 - t372) * t269;
t86 = -t129 * t478 + t130 * t278;
t73 = t262 + t78;
t72 = -qJD(4) * t133 - t279 * t166 + t167 * t479;
t71 = qJD(4) * t132 + t166 * t479 + t279 * t167;
t38 = t277 * t95 + t282 * t56;
t37 = -t277 * t56 + t282 * t95;
t31 = t277 * t73 + t282 * t61;
t30 = -t277 * t61 + t282 * t73;
t28 = -t277 * t59 + t282 * t78;
t25 = qJD(5) * t90 + t278 * t71 - t478 * t72;
t24 = qJD(5) * t316 + t278 * t72 + t478 * t71;
t19 = t445 * t498 - t45;
t13 = qJD(6) * t322 - t24 * t277 + t282 * t375;
t12 = qJD(6) * t76 + t24 * t282 + t277 * t375;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t419, 0, 0, 0, 0, 0, 0, t325 * t275 (-qJDD(2) * t281 - t284 * t287) * t275, 0, -g(3) + (t276 ^ 2 + (t281 ^ 2 + t284 ^ 2) * t275 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, qJD(3) * t167 + qJDD(3) * t210 + (-t280 * t366 + t283 * t325) * t275, -qJD(3) * t166 - qJDD(3) * t211 + (-t280 * t325 - t283 * t366) * t275 (-t210 * t280 + t211 * t283) * qJDD(2) + (t166 * t283 - t167 * t280 + (-t210 * t283 - t211 * t280) * qJD(3)) * qJD(2), t113 * t211 + t114 * t210 + t166 * t183 + t167 * t182 - g(3) + (-t186 * t284 + t229 * t408) * t275, 0, 0, 0, 0, 0, 0, t132 * t267 + t269 * t72 + (-t119 * t284 - t213 * t408) * t275, -t133 * t267 - t269 * t71 + (t118 * t284 + t214 * t408) * t275, t118 * t132 - t119 * t133 + t213 * t71 - t214 * t72, t105 * t72 + t106 * t71 + t132 * t41 - t133 * t349 - g(3) + (-t151 * t284 + t202 * t408) * t275, 0, 0, 0, 0, 0, 0, -t25 * t356 + t316 * t350 + (t135 * t408 - t284 * t68) * t275, -t24 * t356 - t90 * t350 + (t284 * t67 + t315 * t408) * t275, -t135 * t24 + t25 * t315 + t316 * t67 - t68 * t90, t24 * t57 - t25 * t56 + t7 * t90 + t8 * t316 - g(3) + (t150 * t408 - t284 * t88) * t275, 0, 0, 0, 0, 0, 0, t120 * t25 + t13 * t498 - t316 * t47 + t66 * t76, -t12 * t498 + t122 * t25 + t316 * t46 + t322 * t66, -t12 * t120 - t122 * t13 + t322 * t47 + t46 * t76, t12 * t23 - t13 * t329 - t2 * t322 + t25 * t52 + t3 * t76 - t316 * t6 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t419 * t423 + t340, -t419 * t425 + t339, 0, 0, qJDD(2) * t271 + 0.2e1 * t345, 0.2e1 * t280 * t395 - 0.2e1 * t398 * t414, qJDD(3) * t280 + t283 * t286, qJDD(2) * t272 - 0.2e1 * t345, qJDD(3) * t283 - t280 * t286, 0, t298 * t280 + t283 * t480, -t280 * t480 + t298 * t283, t413 * t446 + (-g(3) * t281 - t368 * t413) * t275 + t290, t324 * pkin(2) + t290 * pkin(8) + (-g(3) * (pkin(2) * t284 + pkin(8) * t281) + (-t229 * t281 + (t182 * t280 - t183 * t283) * t284) * qJD(1)) * t275, -t118 * t219 - t214 * t293, t118 * t318 - t219 * t119 + t269 * (-t213 * t318 - t214 * t219) t219 * t267 - t269 * t293, t119 * t318 - t213 * t501, -t267 * t318 - t269 * t501, 0, -t261 * t119 + t151 * t318 + t177 * t267 + t202 * t501 - t213 * t486 - t265 * t485 + t269 * t487, t261 * t118 + t151 * t219 - t178 * t267 - t202 * t293 + t214 * t486 + t264 * t485 - t269 * t488, -t106 * t501 + t177 * t118 - t178 * t119 - t41 * t219 + t307 - t487 * t214 + t488 * t213 + (t349 + t491) * t318, -t349 * t178 + t41 * t177 - t151 * t261 + t202 * t263 - g(1) * (-t208 * t261 - t209 * t285) - g(2) * (-t206 * t261 - t207 * t285) + t488 * t106 + t487 * t105 + (-t202 * t411 - g(3) * (t261 * t284 - t281 * t285)) * t275, -t161 * t67 - t315 * t74, t135 * t74 + t160 * t67 - t161 * t68 - t315 * t75, t161 * t350 - t356 * t74, t135 * t75 + t160 * t68, -t160 * t350 - t356 * t75, 0, t135 * t338 + t150 * t75 + t88 * t160 + t191 * t68 - t257 * t485 - t350 * t86 - t356 * t449, -t150 * t74 + t88 * t161 - t191 * t67 + t315 * t338 - t350 * t87 - t356 * t450 + t489, -t135 * t450 - t160 * t7 - t161 * t8 + t315 * t449 + t56 * t74 - t57 * t75 - t67 * t86 - t68 * t87 + t307, t7 * t87 - t8 * t86 + t88 * t191 - g(1) * t417 - g(2) * t418 - g(3) * (-t270 * t425 + t196) + t450 * t57 - t449 * t56 + t338 * t150, t122 * t319 - t435 * t46 (t120 * t282 + t122 * t277) * t74 + (t43 - t45 + (-t122 * t282 + t445) * qJD(6)) * t161, t122 * t75 - t160 * t46 + t319 * t498 + t435 * t66, t120 * t320 + t436 * t47, -t120 * t75 - t160 * t47 - t320 * t498 - t436 * t66, t160 * t66 + t498 * t75, t54 * t66 + t3 * t160 - t329 * t75 + t86 * t47 - t52 * t457 - g(1) * (-t208 * t430 + t209 * t277) - g(2) * (-t206 * t430 + t207 * t277) - (t257 * t420 + t277 * t281) * t469 + t495 * t161 + t464 * t498 + t449 * t120, -t55 * t66 - t2 * t160 - t23 * t75 - t86 * t46 - t52 * t455 - g(1) * (t208 * t431 + t209 * t282) - g(2) * (t206 * t431 + t207 * t282) - (-t257 * t422 + t281 * t282) * t469 + (t6 * t282 - t48) * t161 - t465 * t498 + t449 * t122, t46 * t54 - t47 * t55 + t331 * t74 - t464 * t122 - t465 * t120 - t489 + (qJD(6) * t330 - t2 * t277 - t282 * t3) * t161, t2 * t55 + t3 * t54 + t6 * t86 - g(1) * (-t208 * t341 + t417) - g(2) * (-t206 * t341 + t418) - g(3) * t196 + t449 * t52 - (-t270 * t281 + t284 * t341) * t469 + t465 * t23 - t464 * t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t384, t414 * t287, t396, t384, t395, qJDD(3), -t470 + t247 + (-g(1) * t274 + g(2) * t448) * t424 + (-t187 + t339 - t410) * t280, -t283 * t410 - g(1) * (-t209 * t283 - t280 * t428) - g(2) * (-t207 * t283 + t280 * t359) + g(3) * t211 + (t182 + t432) * qJD(3) - t383, 0, 0, -t433, t123, t103, t433, t104, t267, -t107 * t269 + (t213 * t409 + t267 * t479 - t269 * t406) * pkin(3) + t289, t108 * t269 + (-t214 * t409 - t279 * t267 - t269 * t371) * pkin(3) + t295 (t106 + t107) * t214 + (t105 - t108) * t213 + (t118 * t479 - t119 * t279 + (t213 * t479 + t214 * t279) * qJD(4)) * pkin(3), -t105 * t107 - t106 * t108 - t202 * t262 + t41 * t392 + (-t349 * t279 + t106 * t371 - t105 * t406 - g(1) * (-t209 * t280 + t274 * t424) - g(2) * (-t207 * t280 - t283 * t359) - t470) * pkin(3), t502, t62, t50, -t502, t51, t350, t204 * t350 - t181 * t135 + (-t57 - t451) * qJD(5) + t297 - t451 * t269, -t181 * t315 - t205 * t350 - t356 * t452 + t296, -t135 * t452 + t204 * t67 - t205 * t68 + t315 * t451 + t334, -g(1) * t416 - g(2) * t323 - g(3) * t415 - t150 * t181 + t8 * t204 + t7 * t205 - t451 * t56 + t452 * t57, t18, t9, t17, t19, t16, -t443, -t498 * t30 + t198 * t47 + t451 * t120 + (-t143 * t498 + t333) * t277 + (-t199 * t403 + t310) * t282 + t362, -t198 * t46 + t333 * t282 + t451 * t122 + (-t143 * t282 + t199 * t402 + t31) * t498 + t312, t120 * t31 + t122 * t30 + (-t120 * t143 - t199 * t47 + (t122 * t199 + t329) * qJD(6)) * t282 + (t122 * t143 - t199 * t46 - t3 + (t120 * t199 - t23) * qJD(6)) * t277 + t303, t6 * t198 - t23 * t31 + t329 * t30 - g(1) * (t364 + t416) - g(2) * (t323 + t365) - g(3) * (t363 + t415) + t451 * t52 - t330 * t143 + t299 * t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t433, t123, t103, t433, t104, t267, t106 * t269 + t289, t295 + t491, 0, 0, t502, t62, t50, -t502, t51, t350, t58 * t269 + (t58 - t57) * qJD(5) + (-t214 * t135 + t350 * t478 - t356 * t405) * pkin(4) + t297, t59 * t356 + (-t214 * t315 - t278 * t350 - t356 * t370) * pkin(4) + t296, t59 * t135 - t58 * t315 + (t478 * t67 - t278 * t68 + (-t135 * t478 + t278 * t315) * qJD(5)) * pkin(4) + t334, -g(1) * t343 - g(2) * t305 - g(3) * t326 - t150 * t477 + t391 * t8 + t476 * t7 + (t348 - t59) * t57 - t344 * t56, t18, t9, t17, t19, t16, -t443, -t28 * t498 + t259 * t47 + t344 * t120 + (-t348 * t498 + t332) * t277 + (-t258 * t403 + t310) * t282 + t362, t344 * t122 - t259 * t46 + t332 * t282 - t484 * t498 + t312, t29 * t120 + t28 * t122 + (-t120 * t348 - t258 * t47 + (t122 * t258 + t329) * qJD(6)) * t282 + (t122 * t348 - t258 * t46 - t3 + (t120 * t258 - t23) * qJD(6)) * t277 + t303, t348 * t460 + t6 * t259 + t329 * t28 - g(1) * (t343 + t364) - g(2) * (t305 + t365) - g(3) * (t326 + t363) + t344 * t52 + (t329 * t401 + t493) * t258 + t484 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t502, t62, t50, -t502, t51, t350, t269 * t57 + t297, t356 * t56 + t296, 0, 0, t18, t9, t17, t120 * t506 - t45, t16, -t443, -pkin(5) * t47 - t120 * t57 - t498 * t37 + (-pkin(11) * t66 + t462) * t277 + (-pkin(11) * t403 + t310) * t282 + t362, t52 * t503 + pkin(5) * t46 - t122 * t57 + t498 * t38 + (t402 * t498 - t64) * pkin(11) + t312, t120 * t38 + t122 * t37 + (t461 + (-t47 + t404) * pkin(11)) * t282 + ((qJD(6) * t120 - t46) * pkin(11) + t492) * t277 + t311, -t6 * pkin(5) - g(1) * t141 - g(2) * t140 - g(3) * t180 + t329 * t37 - t23 * t38 - t52 * t57 + (t299 - t313) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, -t120 ^ 2 + t122 ^ 2, t120 * t498 - t46, -t444, t122 * t498 - t47, t66, -t52 * t122 - g(1) * (-t148 * t277 + t208 * t282) - g(2) * (-t146 * t277 + t206 * t282) - g(3) * (-t185 * t277 - t385) - t492, -t461 + t52 * t120 - g(1) * (-t148 * t282 - t208 * t277) - g(2) * (-t146 * t282 - t206 * t277) - g(3) * (-t185 * t282 + t386) - t2, 0, 0;];
tau_reg  = t4;
