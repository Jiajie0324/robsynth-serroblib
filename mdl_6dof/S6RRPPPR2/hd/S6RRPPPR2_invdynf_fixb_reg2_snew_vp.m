% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:26
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:26:25
% EndTime: 2019-05-06 08:26:33
% DurationCPUTime: 8.35s
% Computational Cost: add. (30085->317), mult. (72564->384), div. (0->0), fcn. (50890->10), ass. (0->220)
t2236 = sin(pkin(9));
t2238 = cos(pkin(9));
t2244 = cos(qJ(2));
t2291 = qJD(1) * t2244;
t2241 = sin(qJ(2));
t2292 = qJD(1) * t2241;
t2203 = t2236 * t2292 - t2238 * t2291;
t2205 = (t2236 * t2244 + t2238 * t2241) * qJD(1);
t2281 = t2205 * t2203;
t2170 = -qJDD(2) - t2281;
t2202 = t2205 ^ 2;
t2246 = qJD(2) ^ 2;
t2192 = t2246 + t2202;
t2138 = -t2170 * t2236 + t2192 * t2238;
t2141 = t2170 * t2238 + t2192 * t2236;
t2119 = t2138 * t2241 + t2141 * t2244;
t2242 = sin(qJ(1));
t2245 = cos(qJ(1));
t2271 = qJD(2) * t2291;
t2273 = t2241 * qJDD(1);
t2212 = t2271 + t2273;
t2228 = t2244 * qJDD(1);
t2272 = qJD(2) * t2292;
t2213 = t2228 - t2272;
t2175 = t2212 * t2238 + t2213 * t2236;
t2290 = qJD(2) * t2203;
t2268 = -t2175 + t2290;
t2324 = t2119 * t2242 + t2245 * t2268;
t2323 = t2119 * t2245 - t2242 * t2268;
t2201 = t2203 ^ 2;
t2301 = -t2201 - t2202;
t2157 = t2175 + t2290;
t2174 = t2212 * t2236 - t2238 * t2213;
t2289 = qJD(2) * t2205;
t2312 = -t2174 + t2289;
t2313 = t2157 * t2236 + t2238 * t2312;
t2314 = -t2157 * t2238 + t2236 * t2312;
t2318 = -t2241 * t2314 + t2244 * t2313;
t2322 = t2242 * t2318 - t2245 * t2301;
t2321 = t2242 * t2301 + t2245 * t2318;
t2166 = -t2246 - t2201;
t2265 = qJDD(2) - t2281;
t2131 = t2166 * t2236 + t2238 * t2265;
t2134 = -t2166 * t2238 + t2236 * t2265;
t2106 = t2131 * t2241 + t2134 * t2244;
t2311 = t2174 + t2289;
t2320 = t2106 * t2242 + t2245 * t2311;
t2319 = t2106 * t2245 - t2242 * t2311;
t2116 = t2138 * t2244 - t2141 * t2241;
t2317 = t2241 * t2313 + t2244 * t2314;
t2103 = t2131 * t2244 - t2134 * t2241;
t2233 = t2244 ^ 2;
t2247 = qJD(1) ^ 2;
t2255 = qJD(2) * pkin(2) - qJ(3) * t2292;
t2221 = t2242 * g(1) - t2245 * g(2);
t2256 = qJDD(1) * pkin(1) + t2221;
t2150 = t2213 * pkin(2) + (qJ(3) * t2233 + pkin(7)) * t2247 - t2255 * t2292 - qJDD(3) + t2256;
t2304 = pkin(3) * t2289 + t2268 * qJ(4) - 0.2e1 * qJD(4) * t2205 - t2150;
t2235 = sin(pkin(10));
t2237 = cos(pkin(10));
t2180 = qJD(2) * t2235 - t2237 * t2203;
t2182 = qJD(2) * t2237 + t2203 * t2235;
t2240 = sin(qJ(6));
t2243 = cos(qJ(6));
t2143 = t2243 * t2180 + t2182 * t2240;
t2299 = t2143 ^ 2;
t2145 = -t2180 * t2240 + t2182 * t2243;
t2298 = t2145 ^ 2;
t2179 = t2180 ^ 2;
t2297 = t2182 ^ 2;
t2200 = qJD(6) + t2205;
t2296 = t2200 ^ 2;
t2295 = 2 * qJD(3);
t2294 = 0.2e1 * qJD(4);
t2293 = -2 * qJD(5);
t2287 = t2143 * t2145;
t2284 = t2180 * t2182;
t2283 = t2180 * t2205;
t2282 = t2182 * t2205;
t2280 = t2233 * t2247;
t2222 = -g(1) * t2245 - g(2) * t2242;
t2209 = -pkin(1) * t2247 + qJDD(1) * pkin(7) + t2222;
t2279 = t2241 * t2209;
t2278 = t2241 * t2247;
t2277 = pkin(3) * t2203 - qJ(4) * t2205 + t2295;
t2276 = qJD(6) - t2200;
t2275 = qJD(6) + t2200;
t2232 = t2241 ^ 2;
t2274 = t2232 + t2233;
t2146 = qJDD(2) * pkin(2) - t2212 * qJ(3) - t2279 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t2278 - g(3)) * t2244;
t2188 = -t2241 * g(3) + t2244 * t2209;
t2147 = -pkin(2) * t2280 + t2213 * qJ(3) - qJD(2) * t2255 + t2188;
t2267 = -t2238 * t2146 + t2236 * t2147;
t2253 = -qJDD(2) * pkin(3) - t2246 * qJ(4) + qJDD(4) + t2267;
t2075 = -qJDD(2) * qJ(5) + t2157 * pkin(4) + (qJ(5) * t2203 + t2277) * t2205 + t2253;
t2189 = pkin(4) * t2205 - qJD(2) * qJ(5);
t2080 = -t2201 * pkin(4) - t2205 * t2189 + (pkin(3) + qJ(5)) * t2174 + t2304;
t2055 = t2235 * t2075 + t2237 * t2080 + t2180 * t2293;
t2270 = -t2202 - t2297;
t2163 = -qJDD(2) * t2235 + t2237 * t2174;
t2164 = qJDD(2) * t2237 + t2174 * t2235;
t2266 = t2243 * t2163 - t2240 * t2164;
t2250 = -t2164 - t2283;
t2251 = t2175 - t2284;
t2264 = t2237 * t2075 - t2235 * t2080 + t2182 * t2293;
t2048 = pkin(5) * t2251 + pkin(8) * t2250 + t2264;
t2161 = pkin(5) * t2205 - pkin(8) * t2182;
t2051 = -pkin(5) * t2179 + pkin(8) * t2163 - t2161 * t2205 + t2055;
t2034 = t2048 * t2243 - t2051 * t2240;
t2035 = t2048 * t2240 + t2051 * t2243;
t2263 = t2034 * t2243 + t2035 * t2240;
t2090 = -t2145 * t2276 + t2266;
t2258 = -t2240 * t2163 - t2243 * t2164;
t2092 = t2143 * t2276 + t2258;
t2262 = t2090 * t2240 + t2092 * t2243;
t2254 = -qJDD(6) - t2175;
t2111 = -t2254 - t2287;
t2115 = -t2296 - t2299;
t2261 = t2111 * t2243 + t2115 * t2240;
t2112 = t2254 - t2287;
t2124 = -t2296 - t2298;
t2260 = t2112 * t2240 + t2124 * t2243;
t2259 = t2236 * t2146 + t2238 * t2147;
t2248 = -t2246 * pkin(3) + qJDD(2) * qJ(4) - t2203 * t2277 + t2259;
t2078 = qJDD(5) - t2174 * pkin(4) - t2201 * qJ(5) + (t2294 + t2189) * qJD(2) + t2248;
t2226 = t2244 * t2278;
t2225 = -t2246 - t2280;
t2224 = -t2232 * t2247 - t2246;
t2220 = -qJDD(2) + t2226;
t2219 = qJDD(2) + t2226;
t2218 = t2274 * t2247;
t2217 = -qJDD(1) * t2242 - t2245 * t2247;
t2216 = qJDD(1) * t2245 - t2242 * t2247;
t2215 = t2274 * qJDD(1);
t2214 = t2228 - 0.2e1 * t2272;
t2211 = 0.2e1 * t2271 + t2273;
t2208 = t2247 * pkin(7) + t2256;
t2187 = -t2244 * g(3) - t2279;
t2186 = t2220 * t2244 - t2224 * t2241;
t2185 = -t2219 * t2241 + t2225 * t2244;
t2184 = t2220 * t2241 + t2224 * t2244;
t2183 = t2219 * t2244 + t2225 * t2241;
t2149 = -t2187 * t2241 + t2188 * t2244;
t2148 = t2187 * t2244 + t2188 * t2241;
t2136 = -t2202 - t2179;
t2135 = -t2179 - t2297;
t2130 = -t2175 - t2284;
t2129 = t2164 - t2283;
t2128 = t2163 + t2282;
t2127 = -t2163 + t2282;
t2114 = -0.2e1 * qJD(3) * t2203 + t2259;
t2113 = -t2205 * t2295 - t2267;
t2110 = t2237 * t2130 - t2235 * t2270;
t2109 = t2235 * t2130 + t2237 * t2270;
t2108 = t2237 * t2136 - t2235 * t2251;
t2107 = t2235 * t2136 + t2237 * t2251;
t2102 = -t2174 * pkin(3) - t2304;
t2101 = t2237 * t2128 - t2235 * t2250;
t2100 = t2235 * t2128 + t2237 * t2250;
t2099 = -t2298 - t2299;
t2098 = t2277 * t2205 + t2253;
t2097 = qJD(2) * t2294 + t2248;
t2091 = -t2143 * t2275 - t2258;
t2089 = t2145 * t2275 - t2266;
t2088 = t2109 * t2236 + t2129 * t2238;
t2087 = -t2109 * t2238 + t2129 * t2236;
t2086 = t2107 * t2236 + t2127 * t2238;
t2085 = -t2107 * t2238 + t2127 * t2236;
t2084 = t2112 * t2243 - t2124 * t2240;
t2082 = t2100 * t2236 + t2135 * t2238;
t2081 = -t2100 * t2238 + t2135 * t2236;
t2077 = -t2113 * t2236 + t2114 * t2238;
t2076 = t2113 * t2238 + t2114 * t2236;
t2072 = -t2111 * t2240 + t2115 * t2243;
t2070 = t2097 * t2238 + t2098 * t2236;
t2069 = t2097 * t2236 - t2098 * t2238;
t2068 = -t2163 * pkin(5) - t2179 * pkin(8) + t2182 * t2161 + t2078;
t2067 = t2090 * t2243 - t2092 * t2240;
t2065 = -t2087 * t2241 + t2088 * t2244;
t2064 = t2087 * t2244 + t2088 * t2241;
t2063 = -t2085 * t2241 + t2086 * t2244;
t2062 = t2085 * t2244 + t2086 * t2241;
t2061 = t2237 * t2084 - t2235 * t2260;
t2060 = t2235 * t2084 + t2237 * t2260;
t2059 = -t2081 * t2241 + t2082 * t2244;
t2058 = t2081 * t2244 + t2082 * t2241;
t2057 = -t2076 * t2241 + t2077 * t2244;
t2056 = t2076 * t2244 + t2077 * t2241;
t2053 = t2237 * t2072 - t2235 * t2261;
t2052 = t2235 * t2072 + t2237 * t2261;
t2050 = t2060 * t2236 + t2091 * t2238;
t2049 = -t2060 * t2238 + t2091 * t2236;
t2047 = -t2069 * t2241 + t2070 * t2244;
t2046 = t2069 * t2244 + t2070 * t2241;
t2045 = t2052 * t2236 + t2089 * t2238;
t2044 = -t2052 * t2238 + t2089 * t2236;
t2043 = t2237 * t2067 - t2235 * t2262;
t2042 = t2235 * t2067 + t2237 * t2262;
t2041 = t2042 * t2236 + t2099 * t2238;
t2040 = -t2042 * t2238 + t2099 * t2236;
t2039 = t2237 * t2055 - t2235 * t2264;
t2038 = t2235 * t2055 + t2237 * t2264;
t2037 = t2038 * t2236 + t2078 * t2238;
t2036 = -t2038 * t2238 + t2078 * t2236;
t2033 = -t2049 * t2241 + t2050 * t2244;
t2032 = t2049 * t2244 + t2050 * t2241;
t2031 = -t2044 * t2241 + t2045 * t2244;
t2030 = t2044 * t2244 + t2045 * t2241;
t2029 = -t2040 * t2241 + t2041 * t2244;
t2028 = t2040 * t2244 + t2041 * t2241;
t2027 = -t2036 * t2241 + t2037 * t2244;
t2026 = t2036 * t2244 + t2037 * t2241;
t2025 = -t2034 * t2240 + t2035 * t2243;
t2023 = t2237 * t2025 - t2235 * t2263;
t2022 = t2235 * t2025 + t2237 * t2263;
t2021 = t2022 * t2236 + t2068 * t2238;
t2020 = -t2022 * t2238 + t2068 * t2236;
t2019 = -t2020 * t2241 + t2021 * t2244;
t2018 = t2020 * t2244 + t2021 * t2241;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2217, -t2216, 0, -t2221 * t2242 + t2222 * t2245, 0, 0, 0, 0, 0, 0, t2185 * t2245 - t2214 * t2242, t2186 * t2245 + t2211 * t2242, t2215 * t2245 - t2218 * t2242, t2149 * t2245 - t2208 * t2242, 0, 0, 0, 0, 0, 0, -t2319, t2323, t2321, t2057 * t2245 - t2150 * t2242, 0, 0, 0, 0, 0, 0, t2321, t2319, -t2323, t2047 * t2245 - t2102 * t2242, 0, 0, 0, 0, 0, 0, t2063 * t2245 + t2108 * t2242, t2065 * t2245 + t2110 * t2242, t2059 * t2245 + t2101 * t2242, t2027 * t2245 + t2039 * t2242, 0, 0, 0, 0, 0, 0, t2031 * t2245 + t2053 * t2242, t2033 * t2245 + t2061 * t2242, t2029 * t2245 + t2043 * t2242, t2019 * t2245 + t2023 * t2242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2221 * t2245 + t2222 * t2242, 0, 0, 0, 0, 0, 0, t2185 * t2242 + t2214 * t2245, t2186 * t2242 - t2211 * t2245, t2215 * t2242 + t2218 * t2245, t2149 * t2242 + t2208 * t2245, 0, 0, 0, 0, 0, 0, -t2320, t2324, t2322, t2057 * t2242 + t2150 * t2245, 0, 0, 0, 0, 0, 0, t2322, t2320, -t2324, t2047 * t2242 + t2102 * t2245, 0, 0, 0, 0, 0, 0, t2063 * t2242 - t2108 * t2245, t2065 * t2242 - t2110 * t2245, t2059 * t2242 - t2101 * t2245, t2027 * t2242 - t2039 * t2245, 0, 0, 0, 0, 0, 0, t2031 * t2242 - t2053 * t2245, t2033 * t2242 - t2061 * t2245, t2029 * t2242 - t2043 * t2245, t2019 * t2242 - t2023 * t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2183, t2184, 0, t2148, 0, 0, 0, 0, 0, 0, t2103, -t2116, t2317, t2056, 0, 0, 0, 0, 0, 0, t2317, -t2103, t2116, t2046, 0, 0, 0, 0, 0, 0, t2062, t2064, t2058, t2026, 0, 0, 0, 0, 0, 0, t2030, t2032, t2028, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2247, -qJDD(1), 0, t2222, 0, 0, 0, 0, 0, 0, t2185, t2186, t2215, t2149, 0, 0, 0, 0, 0, 0, -t2106, t2119, t2318, t2057, 0, 0, 0, 0, 0, 0, t2318, t2106, -t2119, t2047, 0, 0, 0, 0, 0, 0, t2063, t2065, t2059, t2027, 0, 0, 0, 0, 0, 0, t2031, t2033, t2029, t2019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2247, 0, t2221, 0, 0, 0, 0, 0, 0, t2214, -t2211, t2218, t2208, 0, 0, 0, 0, 0, 0, -t2311, t2268, -t2301, t2150, 0, 0, 0, 0, 0, 0, -t2301, t2311, -t2268, t2102, 0, 0, 0, 0, 0, 0, -t2108, -t2110, -t2101, -t2039, 0, 0, 0, 0, 0, 0, -t2053, -t2061, -t2043, -t2023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2183, t2184, 0, t2148, 0, 0, 0, 0, 0, 0, t2103, -t2116, t2317, t2056, 0, 0, 0, 0, 0, 0, t2317, -t2103, t2116, t2046, 0, 0, 0, 0, 0, 0, t2062, t2064, t2058, t2026, 0, 0, 0, 0, 0, 0, t2030, t2032, t2028, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2225, t2220, t2228, t2188, 0, 0, 0, 0, 0, 0, -t2134, t2141, t2313, t2077, 0, 0, 0, 0, 0, 0, t2313, t2134, -t2141, t2070, 0, 0, 0, 0, 0, 0, t2086, t2088, t2082, t2037, 0, 0, 0, 0, 0, 0, t2045, t2050, t2041, t2021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2219, t2224, -t2273, t2187, 0, 0, 0, 0, 0, 0, t2131, -t2138, t2314, t2076, 0, 0, 0, 0, 0, 0, t2314, -t2131, t2138, t2069, 0, 0, 0, 0, 0, 0, t2085, t2087, t2081, t2036, 0, 0, 0, 0, 0, 0, t2044, t2049, t2040, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2214, t2211, -t2218, -t2208, 0, 0, 0, 0, 0, 0, t2311, -t2268, t2301, -t2150, 0, 0, 0, 0, 0, 0, t2301, -t2311, t2268, -t2102, 0, 0, 0, 0, 0, 0, t2108, t2110, t2101, t2039, 0, 0, 0, 0, 0, 0, t2053, t2061, t2043, t2023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2170, t2312, t2114, 0, 0, 0, 0, 0, 0, t2312, -t2166, -t2170, t2097, 0, 0, 0, 0, 0, 0, t2127, t2129, t2135, t2078, 0, 0, 0, 0, 0, 0, t2089, t2091, t2099, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2265, -t2192, -t2157, t2113, 0, 0, 0, 0, 0, 0, -t2157, -t2265, t2192, -t2098, 0, 0, 0, 0, 0, 0, -t2107, -t2109, -t2100, -t2038, 0, 0, 0, 0, 0, 0, -t2052, -t2060, -t2042, -t2022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, -t2268, t2301, -t2150, 0, 0, 0, 0, 0, 0, t2301, -t2311, t2268, -t2102, 0, 0, 0, 0, 0, 0, t2108, t2110, t2101, t2039, 0, 0, 0, 0, 0, 0, t2053, t2061, t2043, t2023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2301, -t2311, t2268, -t2102, 0, 0, 0, 0, 0, 0, t2108, t2110, t2101, t2039, 0, 0, 0, 0, 0, 0, t2053, t2061, t2043, t2023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2312, t2166, t2170, -t2097, 0, 0, 0, 0, 0, 0, -t2127, -t2129, -t2135, -t2078, 0, 0, 0, 0, 0, 0, -t2089, -t2091, -t2099, -t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2157, t2265, -t2192, t2098, 0, 0, 0, 0, 0, 0, t2107, t2109, t2100, t2038, 0, 0, 0, 0, 0, 0, t2052, t2060, t2042, t2022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2136, t2130, t2128, t2055, 0, 0, 0, 0, 0, 0, t2072, t2084, t2067, t2025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2251, t2270, t2250, t2264, 0, 0, 0, 0, 0, 0, t2261, t2260, t2262, t2263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2127, t2129, t2135, t2078, 0, 0, 0, 0, 0, 0, t2089, t2091, t2099, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2115, t2112, t2090, t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2111, t2124, t2092, t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2089, t2091, t2099, t2068;];
f_new_reg  = t1;
