% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:26
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPPR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:24:35
% EndTime: 2019-05-06 08:24:58
% DurationCPUTime: 12.30s
% Computational Cost: add. (36274->531), mult. (87285->716), div. (0->0), fcn. (60982->10), ass. (0->298)
t277 = qJD(2) ^ 2;
t268 = sin(pkin(9));
t276 = cos(qJ(2));
t270 = cos(pkin(9));
t273 = sin(qJ(2));
t327 = t273 * t270;
t242 = (t276 * t268 + t327) * qJD(1);
t366 = t242 ^ 2;
t226 = t366 + t277;
t324 = qJD(1) * t273;
t240 = -t270 * t276 * qJD(1) + t268 * t324;
t332 = t242 * t240;
t386 = qJDD(2) + t332;
t404 = t386 * t268;
t153 = t226 * t270 + t404;
t403 = t386 * t270;
t155 = -t226 * t268 + t403;
t422 = pkin(7) * (t153 * t273 - t155 * t276);
t421 = pkin(2) * t153;
t420 = qJ(3) * t153;
t419 = qJ(3) * t155;
t227 = t366 - t277;
t190 = t332 - qJDD(2);
t412 = t190 * t270;
t413 = t190 * t268;
t417 = t273 * (-t227 * t268 + t412) + t276 * (t227 * t270 + t413);
t237 = t240 ^ 2;
t225 = t277 - t237;
t416 = t273 * (t225 * t270 + t404) - t276 * (-t225 * t268 + t403);
t257 = t273 * qJDD(1);
t318 = qJD(1) * qJD(2);
t312 = t276 * t318;
t249 = t257 + t312;
t258 = t276 * qJDD(1);
t311 = t273 * t318;
t250 = t258 - t311;
t207 = t249 * t270 + t250 * t268;
t232 = t240 * qJD(2);
t371 = t207 + t232;
t206 = t249 * t268 - t270 * t250;
t323 = qJD(2) * t242;
t388 = -t206 + t323;
t402 = t268 * t388 - t270 * t371;
t415 = pkin(2) * t402;
t414 = qJ(3) * t402;
t369 = -t237 - t366;
t401 = t268 * t371 + t270 * t388;
t409 = -pkin(2) * t369 + qJ(3) * t401;
t406 = pkin(7) * (-t273 * t402 + t276 * t401) - pkin(1) * t369;
t189 = -t277 - t237;
t145 = t189 * t268 - t412;
t148 = -t189 * t270 - t413;
t405 = pkin(7) * (t145 * t273 + t148 * t276);
t177 = t207 - t232;
t387 = t206 + t323;
t400 = t273 * (-t177 * t268 - t270 * t387) + t276 * (t177 * t270 - t268 * t387);
t399 = pkin(2) * t145;
t398 = qJ(3) * t145;
t397 = qJ(3) * t148;
t374 = qJ(4) * t177;
t364 = 2 * qJD(4);
t384 = -2 * qJD(5);
t267 = sin(pkin(10));
t269 = cos(pkin(10));
t215 = qJD(2) * t267 - t269 * t240;
t217 = qJD(2) * t269 + t240 * t267;
t168 = t217 * t215;
t372 = -t168 + t207;
t381 = t267 * t372;
t379 = t269 * t372;
t272 = sin(qJ(6));
t275 = cos(qJ(6));
t162 = t275 * t215 + t217 * t272;
t164 = -t215 * t272 + t217 * t275;
t127 = t164 * t162;
t201 = qJDD(6) + t207;
t373 = -t127 + t201;
t377 = t272 * t373;
t376 = t275 * t373;
t265 = t276 ^ 2;
t278 = qJD(1) ^ 2;
t291 = qJD(2) * pkin(2) - qJ(3) * t324;
t274 = sin(qJ(1));
t363 = cos(qJ(1));
t308 = g(1) * t274 - t363 * g(2);
t292 = qJDD(1) * pkin(1) + t308;
t169 = pkin(2) * t250 + (qJ(3) * t265 + pkin(7)) * t278 - t291 * t324 - qJDD(3) + t292;
t375 = pkin(3) * t323 - t242 * t364 - t169;
t187 = t269 * qJDD(2) + t267 * t206;
t336 = t215 * t242;
t140 = -t187 - t336;
t326 = t273 * t278;
t293 = g(1) * t363 + t274 * g(2);
t350 = qJDD(1) * pkin(7);
t246 = -t278 * pkin(1) - t293 + t350;
t329 = t246 * t273;
t165 = qJDD(2) * pkin(2) - qJ(3) * t249 - t329 + (pkin(2) * t326 + qJ(3) * t318 - g(3)) * t276;
t219 = -t273 * g(3) + t276 * t246;
t260 = t265 * t278;
t166 = -pkin(2) * t260 + t250 * qJ(3) - qJD(2) * t291 + t219;
t306 = -t270 * t165 + t166 * t268;
t289 = -qJDD(2) * pkin(3) - t277 * qJ(4) + qJDD(4) + t306;
t319 = pkin(3) * t240 - qJ(4) * t242 + (2 * qJD(3));
t70 = -qJDD(2) * qJ(5) + t371 * pkin(4) + (qJ(5) * t240 + t319) * t242 + t289;
t220 = pkin(4) * t242 - qJD(2) * qJ(5);
t279 = -t374 + t375;
t360 = pkin(3) + qJ(5);
t75 = -pkin(4) * t237 + t206 * t360 - t220 * t242 + t279;
t299 = t217 * t384 - t267 * t75 + t269 * t70;
t50 = t215 * t384 + t267 * t70 + t269 * t75;
t368 = t366 - t237;
t367 = pkin(8) * t140 + t299;
t160 = t162 ^ 2;
t161 = t164 ^ 2;
t213 = t215 ^ 2;
t214 = t217 ^ 2;
t236 = qJD(6) + t242;
t234 = t236 ^ 2;
t365 = -2 * qJD(3);
t362 = pkin(3) * t268;
t361 = pkin(3) * t270;
t283 = pkin(5) * t372 + t367;
t180 = pkin(5) * t242 - pkin(8) * t217;
t301 = qJDD(2) * t267 - t269 * t206;
t42 = -t213 * pkin(5) - pkin(8) * t301 - t242 * t180 + t50;
t22 = t272 * t42 - t275 * t283;
t352 = t275 * t42;
t23 = t272 * t283 + t352;
t13 = -t22 * t275 + t23 * t272;
t358 = t13 * t267;
t357 = t13 * t269;
t296 = t165 * t268 + t166 * t270;
t287 = -t277 * pkin(3) - t240 * t319 + t296;
t317 = qJDD(2) * qJ(4);
t73 = t317 + qJDD(5) - t206 * pkin(4) - t237 * qJ(5) + (t364 + t220) * qJD(2) + t287;
t356 = t267 * t73;
t355 = t269 * t73;
t61 = pkin(5) * t301 - t213 * pkin(8) + t180 * t217 + t73;
t354 = t272 * t61;
t121 = -t242 * t365 + t306;
t122 = t240 * t365 + t296;
t71 = -t121 * t270 + t122 * t268;
t353 = t273 * t71;
t351 = t275 * t61;
t116 = t127 + t201;
t349 = t116 * t272;
t348 = t116 * t275;
t143 = t168 + t207;
t347 = t143 * t267;
t346 = t143 * t269;
t345 = t162 * t236;
t344 = t169 * t268;
t343 = t169 * t270;
t335 = t217 * t242;
t334 = t236 * t272;
t333 = t236 * t275;
t331 = t242 * t267;
t330 = t242 * t269;
t255 = t276 * t326;
t328 = t273 * (qJDD(2) + t255);
t325 = t276 * (qJDD(2) - t255);
t316 = t268 * t127;
t315 = t270 * t127;
t314 = t268 * t168;
t313 = t270 * t168;
t119 = -t162 * qJD(6) + t275 * t187 - t272 * t301;
t310 = qJ(4) * t268 + pkin(2);
t14 = t22 * t272 + t275 * t23;
t72 = t121 * t268 + t270 * t122;
t305 = t187 * t272 + t275 * t301;
t218 = g(3) * t276 + t329;
t304 = t273 * t218 + t276 * t219;
t298 = t187 - t336;
t26 = t267 * t50 + t269 * t299;
t27 = -t267 * t299 + t269 * t50;
t294 = t119 - t345;
t290 = -t301 + t335;
t288 = (-qJD(6) + t236) * t164 - t305;
t103 = t319 * t242 + t289;
t285 = qJD(2) * t364 + t287;
t197 = t268 * t207;
t200 = t270 * t207;
t284 = t273 * (-t268 * t323 + t200) + t276 * (t270 * t323 + t197);
t282 = t273 * (t206 * t268 + t232 * t270) + t276 * (-t270 * t206 + t232 * t268);
t102 = t285 + t317;
t281 = (t273 * (-t240 * t270 + t242 * t268) + t276 * (-t240 * t268 - t242 * t270)) * qJD(2);
t280 = -pkin(3) * t206 - t375;
t264 = t273 ^ 2;
t259 = t264 * t278;
t251 = t258 - 0.2e1 * t311;
t248 = t257 + 0.2e1 * t312;
t245 = pkin(7) * t278 + t292;
t185 = -t214 + t366;
t184 = t213 - t366;
t167 = t214 - t213;
t158 = -t214 - t366;
t152 = -t366 - t213;
t151 = -t161 + t234;
t150 = t160 - t234;
t149 = -t213 - t214;
t136 = t301 + t335;
t135 = -t187 * t267 - t217 * t330;
t134 = -t215 * t331 + t269 * t301;
t133 = (t215 * t267 + t217 * t269) * t242;
t132 = -t161 - t234;
t126 = t161 - t160;
t125 = -t184 * t267 - t346;
t124 = -t185 * t269 - t381;
t123 = -t234 - t160;
t118 = -qJD(6) * t164 - t305;
t114 = -t158 * t267 - t346;
t113 = t158 * t269 - t347;
t112 = (-t162 * t275 + t164 * t272) * t236;
t111 = (-t162 * t272 - t164 * t275) * t236;
t110 = t152 * t269 - t381;
t109 = t152 * t267 + t379;
t108 = t280 + t374;
t107 = -t140 * t267 + t269 * t290;
t106 = t140 * t269 + t267 * t290;
t105 = t136 * t267 - t269 * t298;
t104 = -t160 - t161;
t101 = (t387 + t206) * pkin(3) + t279;
t100 = t280 + 0.2e1 * t374;
t98 = -t119 - t345;
t94 = (qJD(6) + t236) * t164 + t305;
t93 = t119 * t275 - t164 * t334;
t92 = t119 * t272 + t164 * t333;
t91 = -t118 * t272 + t162 * t333;
t90 = t118 * t275 + t162 * t334;
t89 = t150 * t275 - t349;
t88 = -t151 * t272 + t376;
t87 = t150 * t272 + t348;
t86 = t151 * t275 + t377;
t85 = t113 * t268 + t270 * t298;
t84 = -t113 * t270 + t268 * t298;
t83 = -qJ(4) * t369 + t103;
t82 = -pkin(3) * t369 + t102;
t81 = t109 * t268 + t136 * t270;
t80 = -t109 * t270 + t136 * t268;
t79 = -t132 * t272 - t348;
t78 = t132 * t275 - t349;
t77 = t106 * t268 + t149 * t270;
t76 = -t106 * t270 + t149 * t268;
t67 = t123 * t275 - t377;
t66 = t123 * t272 + t376;
t65 = -t111 * t269 - t112 * t267;
t64 = pkin(4) * t106 - qJ(4) * t107;
t62 = t102 * t268 - t103 * t270;
t60 = -t272 * t98 + t275 * t288;
t59 = -t272 * t294 - t275 * t94;
t58 = t272 * t288 + t275 * t98;
t57 = -t272 * t94 + t275 * t294;
t56 = -t267 * t93 - t269 * t92;
t55 = -t267 * t91 - t269 * t90;
t54 = -t267 * t89 - t269 * t87;
t53 = -t267 * t88 - t269 * t86;
t52 = -t267 * t78 + t269 * t79;
t51 = t267 * t79 + t269 * t78;
t48 = -t267 * t66 + t269 * t67;
t47 = t267 * t67 + t269 * t66;
t46 = pkin(4) * t298 - t114 * t360 - t356;
t45 = -pkin(8) * t78 + t351;
t44 = pkin(4) * t136 - t110 * t360 + t355;
t43 = -pkin(8) * t66 + t354;
t41 = t268 * t51 + t270 * t294;
t40 = t268 * t294 - t270 * t51;
t38 = t268 * t47 + t270 * t94;
t37 = t268 * t94 - t270 * t47;
t36 = pkin(4) * t113 - qJ(4) * t114 - t50;
t35 = -pkin(5) * t294 + pkin(8) * t79 + t354;
t34 = pkin(4) * t109 - qJ(4) * t110 + t299;
t33 = -t267 * t58 + t269 * t60;
t32 = t267 * t60 + t269 * t58;
t31 = -t267 * t59 - t269 * t57;
t30 = -pkin(5) * t94 + pkin(8) * t67 - t351;
t29 = t104 * t270 + t268 * t32;
t28 = t104 * t268 - t270 * t32;
t25 = t26 * t268 + t270 * t73;
t24 = -t26 * t270 + t268 * t73;
t20 = pkin(4) * t149 - t107 * t360 - t27;
t19 = pkin(4) * t32 + pkin(5) * t58 - qJ(4) * t33;
t18 = pkin(4) * t26 - qJ(4) * t27;
t17 = pkin(4) * t73 - t27 * t360;
t16 = -qJ(4) * t52 + pkin(4) * t51 - t352 - t272 * t367 + (-t272 * t372 + t78) * pkin(5);
t15 = pkin(4) * t294 - t267 * t45 - t269 * t35 - t360 * t52;
t12 = pkin(4) * t47 + pkin(5) * t66 - qJ(4) * t48 - t22;
t11 = pkin(4) * t94 - t267 * t43 - t269 * t30 - t360 * t48;
t10 = -pkin(5) * t61 + pkin(8) * t14;
t9 = -pkin(8) * t58 - t13;
t8 = -pkin(5) * t104 + pkin(8) * t60 + t14;
t7 = t14 * t269 - t358;
t6 = t14 * t267 + t357;
t5 = t268 * t6 + t270 * t61;
t4 = t268 * t61 - t270 * t6;
t3 = pkin(4) * t104 - t267 * t9 - t269 * t8 - t33 * t360;
t2 = pkin(4) * t6 + pkin(5) * t13 - qJ(4) * t7;
t1 = pkin(4) * t61 + pkin(8) * t358 - t10 * t269 - t360 * t7;
t21 = [0, 0, 0, 0, 0, qJDD(1), t308, t293, 0, 0, (t249 + t312) * t273, t248 * t276 + t251 * t273, t328 + t276 * (-t259 + t277), (t250 - t311) * t276, t273 * (t260 - t277) + t325, 0, t276 * t245 + pkin(1) * t251 + pkin(7) * (t276 * (-t260 - t277) - t328), -t273 * t245 - pkin(1) * t248 + pkin(7) * (-t325 - t273 * (-t259 - t277)), pkin(1) * (t259 + t260) + (t264 + t265) * t350 + t304, pkin(1) * t245 + pkin(7) * t304, t284, t400, -t417, t282, -t416, t281, t273 * (-t344 - t398) + t276 * (-pkin(2) * t387 + t343 - t397) - pkin(1) * t387 - t405, t273 * (-t343 + t420) + t276 * (-pkin(2) * t177 - t344 - t419) - pkin(1) * t177 + t422, t273 * (-t71 - t414) + t276 * (t409 + t72) + t406, -qJ(3) * t353 + t276 * (pkin(2) * t169 + qJ(3) * t72) + pkin(1) * t169 + pkin(7) * (t276 * t72 - t353), t281, t417, t416, t284, t400, t282, t273 * (-t268 * t82 + t270 * t83 - t414) + t276 * (t268 * t83 + t270 * t82 + t409) + t406, t273 * (-t101 * t268 + t398) + t276 * (t101 * t270 + t397) + t405 + (qJ(4) * t327 + t276 * t310 + pkin(1)) * t387, t273 * (t100 * t270 - t420) + t276 * (t100 * t268 + t419) - t422 + (-t273 * t362 + t276 * (pkin(2) + t361) + pkin(1)) * t177, (t273 * (qJ(4) * t270 - t362) + t276 * (t310 + t361) + pkin(1)) * t108 + (pkin(7) + qJ(3)) * (-t273 * t62 + t276 * (t102 * t270 + t103 * t268)), t273 * (-t135 * t268 + t313) + t276 * (t135 * t270 + t314), t273 * (-t105 * t268 + t167 * t270) + t276 * (t105 * t270 + t167 * t268), t273 * (-t124 * t268 - t140 * t270) + t276 * (t124 * t270 - t140 * t268), t273 * (-t134 * t268 - t313) + t276 * (t134 * t270 - t314), t273 * (-t125 * t268 + t270 * t290) + t276 * (t125 * t270 + t268 * t290), t273 * (-t133 * t268 + t200) + t276 * (t133 * t270 + t197), t273 * (-qJ(3) * t80 - t268 * t44 + t270 * t34) + t276 * (-pkin(2) * t110 + qJ(3) * t81 + t268 * t34 + t270 * t44) - pkin(1) * t110 + pkin(7) * (-t273 * t80 + t276 * t81), t273 * (-qJ(3) * t84 - t268 * t46 + t270 * t36) + t276 * (-pkin(2) * t114 + qJ(3) * t85 + t268 * t36 + t270 * t46) - pkin(1) * t114 + pkin(7) * (-t273 * t84 + t276 * t85), t273 * (-qJ(3) * t76 - t20 * t268 + t270 * t64) + t276 * (-pkin(2) * t107 + qJ(3) * t77 + t20 * t270 + t268 * t64) - pkin(1) * t107 + pkin(7) * (-t273 * t76 + t276 * t77), t273 * (-qJ(3) * t24 - t17 * t268 + t18 * t270) + t276 * (-pkin(2) * t27 + qJ(3) * t25 + t17 * t270 + t18 * t268) - pkin(1) * t27 + pkin(7) * (-t24 * t273 + t25 * t276), t273 * (-t268 * t56 + t315) + t276 * (t270 * t56 + t316), t273 * (t126 * t270 - t268 * t31) + t276 * (t126 * t268 + t270 * t31), t273 * (-t268 * t53 - t270 * t98) + t276 * (-t268 * t98 + t270 * t53), t273 * (-t268 * t55 - t315) + t276 * (t270 * t55 - t316), t273 * (-t268 * t54 + t270 * t288) + t276 * (t268 * t288 + t270 * t54), t273 * (t201 * t270 - t268 * t65) + t276 * (t201 * t268 + t270 * t65), t273 * (-qJ(3) * t37 - t11 * t268 + t12 * t270) + t276 * (-pkin(2) * t48 + qJ(3) * t38 + t11 * t270 + t12 * t268) - pkin(1) * t48 + pkin(7) * (-t273 * t37 + t276 * t38), t273 * (-qJ(3) * t40 - t15 * t268 + t16 * t270) + t276 * (-pkin(2) * t52 + qJ(3) * t41 + t15 * t270 + t16 * t268) - pkin(1) * t52 + pkin(7) * (-t273 * t40 + t276 * t41), t273 * (-qJ(3) * t28 + t19 * t270 - t268 * t3) + t276 * (-pkin(2) * t33 + qJ(3) * t29 + t19 * t268 + t270 * t3) - pkin(1) * t33 + pkin(7) * (-t273 * t28 + t276 * t29), t273 * (-qJ(3) * t4 - t1 * t268 + t2 * t270) + t276 * (-pkin(2) * t7 + qJ(3) * t5 + t1 * t270 + t2 * t268) - pkin(1) * t7 + pkin(7) * (-t273 * t4 + t276 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t255, t259 - t260, t257, t255, t258, qJDD(2), -t218, -t219, 0, 0, t332, t368, t371, -t332, t388, qJDD(2), -t121 + t399, -t122 - t421, t415, pkin(2) * t71, qJDD(2), -t371, -t388, t332, t368, -t332, -pkin(3) * t371 + qJ(4) * t388 + t415, pkin(3) * t190 - qJ(4) * t189 + t103 - t399, t421 + pkin(3) * t226 + (qJDD(2) + t386) * qJ(4) + t285, pkin(2) * t62 - pkin(3) * t103 + qJ(4) * t102, t187 * t269 - t217 * t331, -t136 * t269 - t267 * t298, -t185 * t267 + t379, t215 * t330 + t267 * t301, t184 * t269 - t347, (-t215 * t269 + t217 * t267) * t242, pkin(2) * t80 + qJ(4) * t136 - t109 * t360 + t356, pkin(2) * t84 + qJ(4) * t298 - t113 * t360 + t355, pkin(2) * t76 + qJ(4) * t149 - t106 * t360 - t26, pkin(2) * t24 + qJ(4) * t73 - t26 * t360, -t267 * t92 + t269 * t93, -t267 * t57 + t269 * t59, -t267 * t86 + t269 * t88, -t267 * t90 + t269 * t91, -t267 * t87 + t269 * t89, -t111 * t267 + t112 * t269, pkin(2) * t37 + qJ(4) * t94 - t267 * t30 + t269 * t43 - t360 * t47, pkin(2) * t40 + qJ(4) * t294 - t267 * t35 + t269 * t45 - t360 * t51, pkin(2) * t28 + qJ(4) * t104 - t267 * t8 + t269 * t9 - t32 * t360, pkin(2) * t4 - pkin(8) * t357 + qJ(4) * t61 - t10 * t267 - t360 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, t177, t369, -t169, 0, 0, 0, 0, 0, 0, t369, -t387, -t177, -t108, 0, 0, 0, 0, 0, 0, t110, t114, t107, t27, 0, 0, 0, 0, 0, 0, t48, t52, t33, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t371, -t190, -t226, t103, 0, 0, 0, 0, 0, 0, t109, t113, t106, t26, 0, 0, 0, 0, 0, 0, t47, t51, t32, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, t298, t149, t73, 0, 0, 0, 0, 0, 0, t94, t294, t104, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, t126, -t98, -t127, t288, t201, -t22, -t23, 0, 0;];
tauJ_reg  = t21;
