% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:12
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:12:18
% EndTime: 2019-03-09 08:12:28
% DurationCPUTime: 7.57s
% Computational Cost: add. (9397->567), mult. (21644->683), div. (0->0), fcn. (16092->14), ass. (0->283)
t221 = cos(pkin(9));
t219 = sin(pkin(9));
t225 = sin(qJ(2));
t227 = cos(qJ(2));
t171 = t219 * t227 + t221 * t225;
t302 = qJD(1) * qJD(2);
t290 = t225 * t302;
t246 = qJDD(1) * t171 - t219 * t290;
t289 = t227 * t302;
t121 = t221 * t289 + t246;
t116 = qJDD(6) + t121;
t381 = t171 * qJD(1);
t148 = qJD(6) + t381;
t218 = sin(pkin(10));
t220 = cos(pkin(10));
t224 = sin(qJ(6));
t373 = cos(qJ(6));
t172 = -t224 * t218 + t373 * t220;
t252 = -t373 * t218 - t224 * t220;
t163 = t252 * qJD(6);
t401 = t252 * t381 + t163;
t390 = t172 * t116 + t401 * t148;
t319 = t221 * t227;
t292 = qJD(1) * t319;
t308 = qJD(1) * t225;
t157 = t219 * t308 - t292;
t133 = qJD(2) * t220 + t157 * t218;
t360 = t227 * pkin(2);
t202 = pkin(1) + t360;
t177 = -qJD(1) * t202 + qJD(3);
t243 = -qJ(4) * t381 + t177;
t358 = pkin(3) + qJ(5);
t59 = t358 * t157 + t243;
t355 = qJ(3) + pkin(7);
t179 = t355 * t227;
t175 = qJD(1) * t179;
t165 = t219 * t175;
t178 = t355 * t225;
t174 = qJD(1) * t178;
t168 = qJD(2) * pkin(2) - t174;
t118 = t221 * t168 - t165;
t272 = qJD(4) - t118;
t361 = t381 * pkin(4);
t63 = -t358 * qJD(2) + t272 + t361;
t31 = -t218 * t59 + t220 * t63;
t18 = pkin(5) * t381 - pkin(8) * t133 + t31;
t131 = t218 * qJD(2) - t157 * t220;
t32 = t218 * t63 + t220 * t59;
t23 = -pkin(8) * t131 + t32;
t255 = -t373 * t18 + t224 * t23;
t159 = t171 * qJD(2);
t299 = t227 * qJDD(1);
t300 = t225 * qJDD(1);
t271 = t219 * t300 - t221 * t299;
t120 = qJD(1) * t159 + t271;
t147 = pkin(2) * t290 - qJDD(1) * t202 + qJDD(3);
t338 = qJ(4) * t121;
t234 = -qJD(4) * t381 + t147 - t338;
t22 = qJD(5) * t157 + t358 * t120 + t234;
t285 = qJD(2) * t355;
t150 = -t225 * qJD(3) - t227 * t285;
t115 = qJDD(2) * pkin(2) + qJD(1) * t150 - qJDD(1) * t178;
t149 = t227 * qJD(3) - t225 * t285;
t124 = qJD(1) * t149 + qJDD(1) * t179;
t312 = -t221 * t115 + t219 * t124;
t288 = qJDD(4) + t312;
t35 = pkin(4) * t121 - qJD(2) * qJD(5) - t358 * qJDD(2) + t288;
t12 = -t218 * t22 + t220 * t35;
t98 = qJDD(2) * t220 + t120 * t218;
t6 = pkin(5) * t121 - pkin(8) * t98 + t12;
t13 = t218 * t35 + t220 * t22;
t97 = qJDD(2) * t218 - t120 * t220;
t9 = -pkin(8) * t97 + t13;
t1 = -qJD(6) * t255 + t224 * t6 + t373 * t9;
t8 = t224 * t18 + t373 * t23;
t2 = -qJD(6) * t8 - t224 * t9 + t373 * t6;
t212 = qJ(2) + pkin(9);
t209 = cos(t212);
t198 = g(3) * t209;
t207 = sin(t212);
t228 = cos(qJ(1));
t325 = t207 * t228;
t226 = sin(qJ(1));
t326 = t207 * t226;
t296 = -g(1) * t325 - g(2) * t326 + t198;
t291 = qJD(6) * t373;
t304 = qJD(6) * t224;
t164 = -t218 * t304 + t220 * t291;
t398 = t172 * t381 + t164;
t400 = -t1 * t252 + t172 * t2 - t255 * t401 + t398 * t8 + t296;
t277 = t252 * t116 - t148 * t398;
t286 = t224 * t98 + t373 * t97;
t72 = -t224 * t131 + t373 * t133;
t28 = qJD(6) * t72 + t286;
t69 = t373 * t131 + t133 * t224;
t399 = -t252 * t28 + t398 * t69;
t27 = t131 * t291 + t133 * t304 + t224 * t97 - t373 * t98;
t397 = -t172 * t27 + t401 * t72;
t395 = t69 ^ 2;
t394 = t72 ^ 2;
t393 = t148 * t69;
t130 = -t219 * t178 + t221 * t179;
t386 = g(1) * t226 - g(2) * t228;
t254 = t386 * t207;
t391 = -qJDD(2) * t130 - t254;
t112 = t220 * t121;
t375 = t381 ^ 2;
t385 = t375 * t218 - t112;
t389 = 0.2e1 * t381 * qJD(2) + t271;
t387 = -t209 * pkin(3) - t207 * qJ(4);
t384 = -g(1) * t228 - g(2) * t226;
t376 = t157 ^ 2;
t383 = -t376 - t375;
t382 = -t376 + t375;
t126 = -t221 * t174 - t165;
t380 = qJD(4) - t126;
t379 = -pkin(4) * t120 + qJDD(5);
t378 = -t252 * t27 - t398 * t72;
t244 = -g(3) * t207 + t209 * t384;
t335 = t121 * t218;
t264 = -t220 * t375 - t335;
t377 = qJD(2) * (-t157 + t292) + t246;
t374 = pkin(5) * t97;
t372 = pkin(2) * t225;
t371 = pkin(3) * t120;
t369 = pkin(4) * t157;
t368 = pkin(5) * t218;
t367 = pkin(8) * t220;
t362 = g(3) * t227;
t359 = t72 * t69;
t357 = pkin(4) + t355;
t201 = -pkin(2) * t221 - pkin(3);
t193 = -qJ(5) + t201;
t356 = -pkin(8) + t193;
t169 = t219 * t225 - t319;
t305 = qJD(2) * t225;
t162 = qJD(2) * t319 - t219 * t305;
t204 = pkin(2) * t305;
t251 = -t162 * qJ(4) - t171 * qJD(4) + t204;
t44 = t169 * qJD(5) + t358 * t159 + t251;
t100 = t149 * t219 - t221 * t150;
t66 = pkin(4) * t162 + t100;
t25 = t218 * t66 + t220 * t44;
t284 = pkin(2) * t308 + t157 * qJ(4);
t64 = t358 * t381 + t284;
t320 = t221 * t175;
t125 = -t174 * t219 + t320;
t82 = t125 - t369;
t39 = t218 * t82 + t220 * t64;
t155 = t356 * t218;
t156 = t356 * t220;
t107 = -t224 * t155 + t373 * t156;
t79 = t220 * t82;
t26 = -t157 * pkin(5) + t79 + (-pkin(8) * t381 - t64) * t218;
t328 = t381 * t220;
t29 = pkin(8) * t328 + t39;
t354 = qJD(5) * t252 + qJD(6) * t107 - t224 * t26 - t373 * t29;
t108 = t373 * t155 + t224 * t156;
t353 = -qJD(5) * t172 - qJD(6) * t108 + t224 * t29 - t373 * t26;
t129 = t221 * t178 + t179 * t219;
t102 = pkin(4) * t171 + t129;
t259 = -t171 * qJ(4) - t202;
t81 = t358 * t169 + t259;
t42 = t218 * t102 + t220 * t81;
t352 = t157 * t69;
t348 = t72 * t157;
t347 = t97 * t218;
t346 = t98 * t218;
t345 = t98 * t220;
t339 = pkin(7) * qJDD(1);
t337 = qJ(5) * t209;
t336 = qJDD(2) * pkin(3);
t334 = t131 * t157;
t333 = t131 * t218;
t332 = t133 * t157;
t331 = t133 * t218;
t330 = t133 * t220;
t329 = t157 * t381;
t211 = pkin(10) + qJ(6);
t208 = cos(t211);
t324 = t208 * t226;
t323 = t208 * t228;
t322 = t209 * t226;
t321 = t209 * t228;
t316 = t228 * t355;
t200 = pkin(5) * t220 + pkin(4);
t315 = t200 * t381 + t380;
t314 = t361 + t380;
t119 = t219 * t168 + t320;
t111 = -qJD(2) * qJ(4) - t119;
t75 = qJD(5) - t111 - t369;
t313 = qJD(5) - t75;
t53 = t219 * t115 + t221 * t124;
t311 = t200 + t355;
t216 = t225 ^ 2;
t217 = t227 ^ 2;
t310 = t216 - t217;
t309 = t216 + t217;
t307 = qJD(2) * t125;
t306 = qJD(2) * t126;
t230 = qJD(1) ^ 2;
t298 = t225 * t230 * t227;
t297 = qJDD(2) * qJ(4) + t53;
t196 = pkin(2) * t219 + qJ(4);
t214 = qJD(2) * qJD(4);
t48 = -t214 - t297;
t283 = -t172 * t28 - t401 * t69;
t188 = t228 * t202;
t282 = g(2) * (pkin(3) * t321 + qJ(4) * t325 + t188);
t280 = t225 * t289;
t279 = -g(1) * t322 + g(2) * t321;
t278 = t360 - t387;
t276 = -pkin(3) * t207 - t372;
t270 = t12 * t220 + t13 * t218;
t269 = -t12 * t218 + t13 * t220;
t268 = -t218 * t32 - t220 * t31;
t267 = -t218 * t31 + t220 * t32;
t266 = -t296 - t312;
t265 = t120 * t169 + t157 * t159;
t263 = t121 * t169 + t159 * t381;
t49 = t121 * t171 + t162 * t381;
t262 = -t330 + t333;
t101 = t221 * t149 + t219 * t150;
t261 = qJD(2) * t159 + qJDD(2) * t169;
t260 = qJD(2) * t162 + qJDD(2) * t171;
t223 = -pkin(8) - qJ(5);
t257 = t207 * t368 - t209 * t223;
t256 = -t202 + t387;
t96 = t220 * t102;
t30 = t171 * pkin(5) + t96 + (-pkin(8) * t169 - t81) * t218;
t37 = t169 * t367 + t42;
t14 = -t224 * t37 + t373 * t30;
t15 = t224 * t30 + t373 * t37;
t253 = -0.2e1 * pkin(1) * t302 - pkin(7) * qJDD(2);
t249 = -qJDD(2) * t129 - t279;
t36 = -t48 + t379;
t90 = t157 * pkin(3) + t243;
t245 = t381 * t90 + qJDD(4) - t266;
t229 = qJD(2) ^ 2;
t241 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t229 + t386;
t240 = pkin(1) * t230 - t339 - t384;
t239 = t159 * t75 + t169 * t36 - t384;
t238 = t36 + t244;
t237 = -t120 * t171 - t157 * t162 - t263;
t236 = t147 - t386;
t235 = t244 + t297;
t233 = t100 * t381 - t101 * t157 - t120 * t130 + t121 * t129 + t384;
t80 = (t157 + t292) * qJD(2) + t246;
t232 = t214 + t235 + t379;
t206 = sin(t211);
t182 = qJ(4) * t321;
t180 = qJ(4) * t322;
t176 = t196 + t368;
t142 = -t206 * t326 + t323;
t141 = t206 * t228 + t207 * t324;
t140 = t206 * t325 + t324;
t139 = -t206 * t226 + t207 * t323;
t117 = pkin(3) * t169 + t259;
t106 = t252 * t169;
t105 = t172 * t169;
t104 = -qJD(2) * pkin(3) + t272;
t103 = -pkin(4) * t169 + t130;
t99 = pkin(3) * t381 + t284;
t86 = t220 * t97;
t76 = pkin(3) * t159 + t251;
t67 = -pkin(4) * t159 + t101;
t65 = -t169 * t200 + t130;
t62 = t220 * t66;
t51 = -t159 * t200 + t101;
t50 = t288 - t336;
t47 = pkin(5) * t131 + t75;
t46 = -t172 * t159 - t163 * t169;
t45 = t252 * t159 - t164 * t169;
t41 = -t218 * t81 + t96;
t40 = t234 + t371;
t38 = -t218 * t64 + t79;
t24 = -t218 * t44 + t62;
t20 = t36 + t374;
t17 = t159 * t367 + t25;
t16 = t162 * pkin(5) + t62 + (-pkin(8) * t159 - t44) * t218;
t4 = -qJD(6) * t15 + t16 * t373 - t224 * t17;
t3 = qJD(6) * t14 + t224 * t16 + t17 * t373;
t5 = [0, 0, 0, 0, 0, qJDD(1), t386, -t384, 0, 0, qJDD(1) * t216 + 0.2e1 * t280, 0.2e1 * t225 * t299 - 0.2e1 * t302 * t310, qJDD(2) * t225 + t227 * t229, qJDD(1) * t217 - 0.2e1 * t280, qJDD(2) * t227 - t225 * t229, 0, t225 * t253 + t227 * t241, -t225 * t241 + t227 * t253, 0.2e1 * t309 * t339 + t384, -g(1) * (-pkin(1) * t226 + pkin(7) * t228) - g(2) * (pkin(1) * t228 + pkin(7) * t226) + (pkin(7) ^ 2 * t309 + pkin(1) ^ 2) * qJDD(1), t49, t237, t260, t265, -t261, 0, -t120 * t202 + t147 * t169 + t159 * t177 + (t157 * t372 - t100) * qJD(2) + t249, -t121 * t202 + t147 * t171 + t162 * t177 + (t372 * t381 - t101) * qJD(2) + t391, -t118 * t162 - t119 * t159 - t169 * t53 + t171 * t312 + t233, t53 * t130 + t119 * t101 + t312 * t129 - t118 * t100 - t147 * t202 + t177 * t204 - g(1) * (-t226 * t202 + t316) - g(2) * (t226 * t355 + t188) 0, -t260, t261, t49, t237, t265, t104 * t162 + t111 * t159 + t169 * t48 + t171 * t50 + t233, qJD(2) * t100 - t117 * t120 - t157 * t76 - t159 * t90 - t169 * t40 - t249, qJD(2) * t101 - t117 * t121 - t162 * t90 - t171 * t40 - t381 * t76 - t391, t40 * t117 + t90 * t76 - t48 * t130 - t111 * t101 + t50 * t129 + t104 * t100 - g(1) * t316 - t282 + (-g(1) * t256 - g(2) * t355) * t226 (t133 * t159 + t169 * t98) * t218 (t345 - t347) * t169 - t262 * t159, t133 * t162 + t98 * t171 + t218 * t263 (-t131 * t159 - t169 * t97) * t220, -t131 * t162 - t97 * t171 + t220 * t263, t49, t103 * t97 + t12 * t171 + t41 * t121 + t67 * t131 + t31 * t162 + t218 * t254 - t220 * t239 + t24 * t381, t103 * t98 - t42 * t121 - t13 * t171 + t67 * t133 - t32 * t162 + t218 * t239 + t220 * t254 - t25 * t381, -t131 * t25 - t133 * t24 + t159 * t267 + t169 * t269 - t41 * t98 - t42 * t97 - t279, t13 * t42 + t32 * t25 + t12 * t41 + t31 * t24 + t36 * t103 + t75 * t67 - t282 + (-g(1) * t357 - g(2) * t337) * t228 + (-g(1) * (t256 - t337) - g(2) * t357) * t226, t106 * t27 - t45 * t72, -t105 * t27 + t106 * t28 + t45 * t69 - t46 * t72, -t106 * t116 - t148 * t45 + t162 * t72 - t171 * t27, -t105 * t28 + t46 * t69, t105 * t116 - t148 * t46 - t162 * t69 - t171 * t28, t116 * t171 + t148 * t162, -g(1) * t142 - g(2) * t140 - t105 * t20 + t116 * t14 + t148 * t4 - t162 * t255 + t171 * t2 + t28 * t65 + t46 * t47 + t51 * t69, g(1) * t141 - g(2) * t139 - t1 * t171 - t106 * t20 - t116 * t15 - t148 * t3 - t162 * t8 - t27 * t65 - t45 * t47 + t51 * t72, t1 * t105 + t106 * t2 + t14 * t27 - t15 * t28 - t255 * t45 - t3 * t69 - t4 * t72 - t46 * t8 - t279, t1 * t15 + t8 * t3 + t2 * t14 - t255 * t4 + t20 * t65 + t47 * t51 - t282 + (-g(1) * t311 - g(2) * t257) * t228 + (-g(1) * (t256 - t257) - g(2) * t311) * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t298, t310 * t230, t300, t298, t299, qJDD(2), t225 * t240 - t362, g(3) * t225 + t227 * t240, 0, 0, t329, t382, t80, -t329, -t271, qJDD(2), t307 - t381 * t177 + (qJDD(2) * t221 - t157 * t308) * pkin(2) + t266, t306 + t157 * t177 + (-qJDD(2) * t219 - t308 * t381) * pkin(2) - t53 - t244 (t119 - t125) * t381 + (-t118 + t126) * t157 + (-t120 * t219 - t121 * t221) * pkin(2), t118 * t125 - t119 * t126 + (-t362 + t219 * t53 - t221 * t312 + (-qJD(1) * t177 - t384) * t225) * pkin(2), qJDD(2), -t80, t271, t329, t382, -t329, -t120 * t196 + t121 * t201 + (-t111 - t125) * t381 + (t104 - t380) * t157, -t307 + t157 * t99 + (-pkin(3) + t201) * qJDD(2) + t245, qJDD(2) * t196 - t157 * t90 + t381 * t99 + 0.2e1 * t214 + t235 - t306, -t48 * t196 + t50 * t201 - t90 * t99 - t104 * t125 - g(1) * (t228 * t276 + t182) - g(2) * (t226 * t276 + t180) - g(3) * t278 - t380 * t111, -t331 * t381 + t345, t262 * t381 - t346 - t86, t332 - t385, t131 * t328 + t347, t264 - t334, t329, t193 * t112 + t157 * t31 + t196 * t97 + t314 * t131 + (-t220 * t313 - t38) * t381 + t238 * t218, -t193 * t335 - t157 * t32 + t196 * t98 + t314 * t133 + (t218 * t313 + t39) * t381 + t238 * t220, t131 * t39 + t133 * t38 + (qJD(5) * t133 - t193 * t98 - t32 * t381 - t12) * t220 + (qJD(5) * t131 - t193 * t97 + t31 * t381 - t13) * t218 - t296, t36 * t196 - t32 * t39 - t31 * t38 - g(1) * (-t228 * t372 + t182) - g(2) * (-t226 * t372 + t180) - g(3) * (t278 + t337) + t314 * t75 + t270 * t193 + t268 * qJD(5) - t384 * t207 * t358, t397, t283 + t378, t348 + t390, t399, t277 - t352, t148 * t157, t107 * t116 + t148 * t353 - t157 * t255 + t176 * t28 - t20 * t252 + t206 * t244 + t315 * t69 + t398 * t47, -t108 * t116 - t148 * t354 - t157 * t8 + t172 * t20 - t176 * t27 + t208 * t244 + t315 * t72 + t401 * t47, t107 * t27 - t108 * t28 - t353 * t72 - t354 * t69 - t400, t1 * t108 + t2 * t107 + t20 * t176 - g(1) * t182 - g(2) * t180 - g(3) * (t257 + t278) + t354 * t8 - t353 * t255 + t315 * t47 + t384 * (t209 * t368 - t372 + (-pkin(3) + t223) * t207); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t389, t377, t383, t118 * t381 + t119 * t157 + t236, 0, 0, 0, 0, 0, 0, t383, -t389, -t377, t371 - t338 - t111 * t157 + (-qJD(4) - t104) * t381 + t236, 0, 0, 0, 0, 0, 0, t264 + t334, t332 + t385, t346 - t86 + (t330 + t333) * t381, t157 * t75 + t268 * t381 + t269 - t386, 0, 0, 0, 0, 0, 0, t277 + t352, t348 - t390, t283 - t378, t1 * t172 + t157 * t47 + t2 * t252 + t255 * t398 + t401 * t8 - t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, qJDD(2) - t329, -t375 - t229, qJD(2) * t111 + t245 - t336, 0, 0, 0, 0, 0, 0, -qJD(2) * t131 - t385, -qJD(2) * t133 + t264, -t347 - t345 + (-t131 * t220 + t331) * t381, -qJD(2) * t75 + t267 * t381 + t270 + t296, 0, 0, 0, 0, 0, 0, -qJD(2) * t69 + t390, -qJD(2) * t72 + t277, -t397 - t399, -qJD(2) * t47 + t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133 * t381 + t97, -t131 * t381 + t98, -t131 ^ 2 - t133 ^ 2, t131 * t32 + t133 * t31 + t232, 0, 0, 0, 0, 0, 0, t72 * t148 + t28, -t27 - t393, -t394 - t395, -t255 * t72 + t69 * t8 + t232 + t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, t394 - t395, -t27 + t393, -t359, -t286 + (-qJD(6) + t148) * t72, t116, -g(1) * t139 - g(2) * t141 + t8 * t148 + t198 * t208 - t47 * t72 + t2, g(1) * t140 - g(2) * t142 - t148 * t255 - t198 * t206 + t47 * t69 - t1, 0, 0;];
tau_reg  = t5;
