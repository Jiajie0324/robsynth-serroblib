% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:26
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:24:58
% EndTime: 2019-05-06 08:25:34
% DurationCPUTime: 38.35s
% Computational Cost: add. (116548->791), mult. (280317->1147), div. (0->0), fcn. (196030->10), ass. (0->549)
t961 = sin(qJ(2));
t1020 = qJD(1) * t961;
t956 = sin(pkin(9));
t958 = cos(pkin(9));
t964 = cos(qJ(2));
t913 = -t958 * t964 * qJD(1) + t1020 * t956;
t915 = (t956 * t964 + t958 * t961) * qJD(1);
t1039 = t915 * t913;
t1100 = qJDD(2) + t1039;
t1121 = t1100 * t956;
t1064 = t915 ^ 2;
t966 = qJD(2) ^ 2;
t896 = t1064 + t966;
t780 = t896 * t958 + t1121;
t1120 = t1100 * t958;
t786 = -t896 * t956 + t1120;
t728 = t780 * t961 - t786 * t964;
t1014 = qJD(1) * qJD(2);
t1000 = t964 * t1014;
t1012 = qJDD(1) * t961;
t925 = t1000 + t1012;
t1001 = t961 * t1014;
t946 = t964 * qJDD(1);
t926 = t946 - t1001;
t864 = t925 * t958 + t926 * t956;
t904 = t913 * qJD(2);
t820 = t864 - t904;
t962 = sin(qJ(1));
t965 = cos(qJ(1));
t682 = t728 * t962 - t820 * t965;
t1163 = pkin(6) * t682;
t684 = t728 * t965 + t820 * t962;
t1162 = pkin(6) * t684;
t721 = t780 * t964 + t786 * t961;
t1161 = pkin(7) * t721;
t967 = qJD(1) ^ 2;
t1024 = t961 * t967;
t936 = g(1) * t965 + g(2) * t962;
t919 = -pkin(1) * t967 + qJDD(1) * pkin(7) - t936;
t1025 = t961 * t919;
t804 = qJDD(2) * pkin(2) - t925 * qJ(3) - t1025 + (pkin(2) * t1024 + qJ(3) * t1014 - g(3)) * t964;
t887 = -t961 * g(3) + t964 * t919;
t953 = t964 ^ 2;
t948 = t953 * t967;
t981 = qJD(2) * pkin(2) - qJ(3) * t1020;
t805 = -pkin(2) * t948 + t926 * qJ(3) - qJD(2) * t981 + t887;
t985 = t956 * t804 + t958 * t805;
t972 = 0.2e1 * qJD(3) * t913 - t985;
t614 = pkin(1) * t721 + pkin(2) * t780 - t972;
t1160 = pkin(1) * t820 - pkin(7) * t728;
t1074 = t864 + t904;
t846 = t1039 - qJDD(2);
t1134 = t846 * t956;
t897 = t1064 - t966;
t776 = t897 * t958 + t1134;
t1133 = t846 * t958;
t782 = -t897 * t956 + t1133;
t724 = t776 * t961 - t782 * t964;
t1159 = -t1074 * t965 + t724 * t962;
t1158 = t1074 * t962 + t724 * t965;
t1019 = qJD(2) * t915;
t863 = t925 * t956 - t958 * t926;
t1102 = -t863 + t1019;
t910 = t913 ^ 2;
t895 = t966 - t910;
t778 = -t895 * t956 + t1120;
t785 = t895 * t958 + t1121;
t726 = t778 * t961 + t785 * t964;
t1157 = t1102 * t965 + t726 * t962;
t1156 = -t1102 * t962 + t726 * t965;
t1101 = t863 + t1019;
t845 = -t966 - t910;
t765 = t845 * t956 - t1133;
t768 = -t845 * t958 - t1134;
t696 = t765 * t961 + t768 * t964;
t672 = t1101 * t965 + t696 * t962;
t1155 = pkin(6) * t672;
t678 = -t1101 * t962 + t696 * t965;
t1154 = pkin(6) * t678;
t1071 = -t910 - t1064;
t1114 = t1074 * t956 + t1102 * t958;
t1115 = -t1074 * t958 + t1102 * t956;
t1127 = t1114 * t964 - t1115 * t961;
t1138 = t1071 * t962 + t1127 * t965;
t1153 = pkin(6) * t1138;
t1139 = -t1071 * t965 + t1127 * t962;
t1152 = pkin(6) * t1139;
t1151 = qJ(3) * t780;
t1150 = qJ(3) * t786;
t1073 = -t1064 + t910;
t1113 = -t1101 * t956 + t820 * t958;
t1050 = t820 * t956;
t1051 = t1101 * t958;
t1129 = -t1050 - t1051;
t1136 = -t1113 * t961 + t1129 * t964;
t1148 = t1073 * t965 + t1136 * t962;
t1147 = -t1073 * t962 + t1136 * t965;
t1146 = t776 * t964 + t782 * t961;
t1145 = t778 * t964 - t785 * t961;
t693 = t765 * t964 - t768 * t961;
t1144 = pkin(7) * t693;
t1126 = t1114 * t961 + t1115 * t964;
t1143 = pkin(7) * t1126;
t1142 = -pkin(1) * t693 - pkin(2) * t765;
t1141 = pkin(1) * t1101 + pkin(7) * t696;
t615 = -pkin(1) * t1126 - pkin(2) * t1115;
t1140 = -pkin(1) * t1071 + pkin(7) * t1127;
t1137 = t1113 * t964 + t1129 * t961;
t1132 = qJ(3) * t1115;
t1128 = -pkin(2) * t1071 + qJ(3) * t1114;
t1123 = qJ(3) * t765;
t1122 = qJ(3) * t768;
t1077 = qJ(4) * t820;
t1099 = 2 * qJD(4);
t955 = sin(pkin(10));
t957 = cos(pkin(10));
t875 = qJD(2) * t955 - t957 * t913;
t878 = qJD(2) * t957 + t913 * t955;
t811 = t878 * t875;
t1075 = -t811 + t864;
t1088 = t1075 * t955;
t1087 = t1075 * t957;
t960 = sin(qJ(6));
t963 = cos(qJ(6));
t792 = t963 * t875 + t878 * t960;
t794 = -t875 * t960 + t878 * t963;
t737 = t794 * t792;
t859 = qJDD(6) + t864;
t1076 = -t737 + t859;
t1086 = t1076 * t960;
t1085 = t1076 * t963;
t935 = t962 * g(1) - t965 * g(2);
t982 = qJDD(1) * pkin(1) + t935;
t812 = t926 * pkin(2) - t981 * t1020 + (qJ(3) * t953 + pkin(7)) * t967 - qJDD(3) + t982;
t1084 = pkin(3) * t1019 - t1099 * t915 - t812;
t976 = (-t913 * t956 - t915 * t958) * qJD(2);
t977 = (-t913 * t958 + t915 * t956) * qJD(2);
t1069 = -t961 * t976 + t964 * t977;
t945 = t962 * qJDD(2);
t1083 = t1069 * t965 + t945;
t1002 = t965 * t1039;
t856 = t958 * t864;
t986 = -t1019 * t956 + t856;
t853 = t956 * t864;
t988 = t1019 * t958 + t853;
t1066 = -t961 * t988 + t964 * t986;
t1082 = t1066 * t962 - t1002;
t979 = t863 * t956 + t904 * t958;
t987 = -t958 * t863 + t904 * t956;
t1068 = -t961 * t987 + t964 * t979;
t1081 = t1068 * t962 + t1002;
t1003 = t962 * t1039;
t1080 = t1066 * t965 + t1003;
t1079 = t1068 * t965 - t1003;
t1009 = qJDD(2) * t965;
t1078 = t1069 * t962 - t1009;
t1043 = t875 * t915;
t843 = t957 * qJDD(2) + t955 * t863;
t761 = -t843 - t1043;
t1018 = qJD(3) * t915;
t902 = 0.2e1 * t1018;
t1022 = -t958 * t804 + t956 * t805;
t844 = pkin(3) * t913 - qJ(4) * t915;
t980 = qJDD(2) * pkin(3) + t966 * qJ(4) - t915 * t844 - qJDD(4) - t1022;
t975 = t902 - t980;
t625 = pkin(4) * t1074 + qJ(5) * t846 + t975;
t1062 = pkin(3) + qJ(5);
t890 = pkin(4) * t915 - qJD(2) * qJ(5);
t968 = -t1077 + t1084;
t635 = -pkin(4) * t910 + t1062 * t863 - t915 * t890 + t968;
t567 = 0.2e1 * qJD(5) * t878 - t957 * t625 + t955 * t635;
t568 = -0.2e1 * qJD(5) * t875 + t955 * t625 + t957 * t635;
t1070 = t961 * t977 + t964 * t976;
t1067 = t961 * t979 + t964 * t987;
t1065 = t961 * t986 + t964 * t988;
t790 = t792 ^ 2;
t791 = t794 ^ 2;
t873 = t875 ^ 2;
t874 = t878 ^ 2;
t908 = qJD(6) + t915;
t906 = t908 ^ 2;
t1063 = pkin(3) * t958;
t537 = pkin(5) * t1075 + pkin(8) * t761 - t567;
t825 = pkin(5) * t915 - pkin(8) * t878;
t842 = -qJDD(2) * t955 + t957 * t863;
t541 = -pkin(5) * t873 + pkin(8) * t842 - t825 * t915 + t568;
t499 = -t963 * t537 + t541 * t960;
t500 = t537 * t960 + t541 * t963;
t467 = -t499 * t963 + t500 * t960;
t1061 = t467 * t957;
t959 = t966 * pkin(3);
t970 = qJDD(2) * qJ(4) + (-0.2e1 * qJD(3) - t844) * t913 - t959 + t985;
t632 = qJDD(5) - t863 * pkin(4) - t910 * qJ(5) + (t1099 + t890) * qJD(2) + t970;
t601 = -t842 * pkin(5) - t873 * pkin(8) + t878 * t825 + t632;
t1060 = t601 * t960;
t1059 = t601 * t963;
t713 = t902 + t1022;
t626 = -t713 * t958 - t956 * t972;
t1058 = t626 * t961;
t1057 = t626 * t964;
t704 = t737 + t859;
t1056 = t704 * t960;
t1055 = t704 * t963;
t1054 = t792 * t908;
t1053 = t812 * t956;
t1052 = t812 * t958;
t1042 = t878 * t915;
t1041 = t908 * t960;
t1040 = t908 * t963;
t1038 = t915 * t955;
t1037 = t915 * t957;
t918 = t967 * pkin(7) + t982;
t1036 = t918 * t961;
t1035 = t918 * t964;
t942 = t964 * t1024;
t933 = qJDD(2) + t942;
t1034 = t933 * t961;
t934 = qJDD(2) - t942;
t1033 = t934 * t961;
t1032 = t934 * t964;
t952 = t961 ^ 2;
t1031 = t952 * t967;
t1030 = t955 * t467;
t1029 = t955 * t632;
t764 = t811 + t864;
t1028 = t955 * t764;
t1027 = t957 * t632;
t1026 = t957 * t764;
t1021 = t952 + t953;
t1013 = qJD(4) * qJD(2);
t1011 = qJDD(1) * t962;
t1010 = qJDD(1) * t965;
t1008 = -t874 - t1064;
t1007 = t956 * t737;
t1006 = t958 * t737;
t1005 = t956 * t811;
t1004 = t958 * t811;
t707 = -t792 * qJD(6) + t960 * t842 + t963 * t843;
t999 = qJ(4) * t956 + pkin(2);
t468 = t499 * t960 + t963 * t500;
t627 = t713 * t956 - t958 * t972;
t996 = -t963 * t842 + t960 * t843;
t886 = t964 * g(3) + t1025;
t808 = t886 * t961 + t964 * t887;
t879 = -t935 * t962 - t965 * t936;
t993 = t962 * t942;
t992 = t965 * t942;
t930 = -t962 * t967 + t1010;
t991 = -pkin(6) * t930 - g(3) * t962;
t989 = t843 - t1043;
t510 = -t957 * t567 + t955 * t568;
t511 = t955 * t567 + t957 * t568;
t807 = t886 * t964 - t887 * t961;
t877 = t935 * t965 - t936 * t962;
t983 = t707 - t1054;
t978 = t842 + t1042;
t680 = -0.2e1 * t1018 + t980;
t973 = (-qJD(6) + t908) * t794 - t996;
t679 = t970 + 0.2e1 * t1013;
t969 = -t863 * pkin(3) - t1084;
t941 = -t948 - t966;
t940 = t948 - t966;
t939 = -t966 - t1031;
t938 = t966 - t1031;
t932 = t948 - t1031;
t931 = t948 + t1031;
t929 = t965 * t967 + t1011;
t928 = t1021 * qJDD(1);
t927 = t946 - 0.2e1 * t1001;
t924 = 0.2e1 * t1000 + t1012;
t922 = t964 * t933;
t921 = t1021 * t1014;
t909 = -pkin(6) * t929 + g(3) * t965;
t889 = -t1014 * t952 + t925 * t964;
t888 = -t1014 * t953 - t926 * t961;
t885 = -t939 * t961 - t1032;
t884 = -t938 * t961 + t922;
t883 = t941 * t964 - t1034;
t882 = t940 * t964 - t1033;
t881 = t939 * t964 - t1033;
t880 = t941 * t961 + t922;
t870 = t928 * t965 - t931 * t962;
t869 = t928 * t962 + t931 * t965;
t865 = -t924 * t961 + t927 * t964;
t836 = t885 * t965 + t924 * t962;
t835 = t883 * t965 - t927 * t962;
t834 = t885 * t962 - t924 * t965;
t833 = t883 * t962 + t927 * t965;
t832 = -t874 + t1064;
t831 = t873 - t1064;
t827 = -pkin(7) * t881 - t1035;
t826 = -pkin(7) * t880 - t1036;
t824 = -pkin(1) * t881 + t887;
t823 = -pkin(1) * t880 + t886;
t809 = t874 - t873;
t774 = -t1064 - t873;
t773 = t808 * t965 - t918 * t962;
t772 = t808 * t962 + t918 * t965;
t771 = -t791 + t906;
t770 = t790 - t906;
t769 = -t873 - t874;
t757 = -t842 + t1042;
t754 = t1038 * t878 - t843 * t957;
t753 = -t1037 * t878 - t843 * t955;
t752 = -t1037 * t875 + t842 * t955;
t751 = -t1038 * t875 - t842 * t957;
t750 = (t875 * t957 - t878 * t955) * t915;
t749 = (t875 * t955 + t878 * t957) * t915;
t746 = -t791 - t906;
t736 = t791 - t790;
t735 = -t1052 + t1151;
t730 = -t749 * t956 + t856;
t729 = t749 * t958 + t853;
t720 = -t831 * t957 + t1028;
t719 = t832 * t955 - t1087;
t718 = -t831 * t955 - t1026;
t717 = -t832 * t957 - t1088;
t716 = -t1053 - t1123;
t715 = -t906 - t790;
t711 = -t753 * t956 + t1004;
t710 = -t751 * t956 - t1004;
t709 = t753 * t958 + t1005;
t708 = t751 * t958 - t1005;
t706 = -qJD(6) * t794 - t996;
t702 = -t1008 * t955 - t1026;
t701 = t1008 * t957 - t1028;
t700 = (-t792 * t963 + t794 * t960) * t908;
t699 = (-t792 * t960 - t794 * t963) * t908;
t698 = t957 * t774 - t1088;
t697 = t955 * t774 + t1087;
t692 = -pkin(2) * t820 - t1053 - t1150;
t691 = t969 + t1077;
t690 = -t955 * t761 + t957 * t978;
t689 = t757 * t957 + t955 * t989;
t688 = t761 * t957 + t955 * t978;
t687 = t757 * t955 - t957 * t989;
t686 = -t790 - t791;
t685 = -pkin(2) * t1101 + t1052 - t1122;
t668 = (t1101 + t863) * pkin(3) + t968;
t667 = t969 + 0.2e1 * t1077;
t666 = -t718 * t956 + t958 * t978;
t665 = -t717 * t956 - t761 * t958;
t664 = t718 * t958 + t956 * t978;
t663 = t717 * t958 - t761 * t956;
t661 = -t707 - t1054;
t657 = (qJD(6) + t908) * t794 + t996;
t656 = -t1041 * t794 + t707 * t963;
t655 = t1040 * t794 + t707 * t960;
t654 = t1040 * t792 - t706 * t960;
t653 = t1041 * t792 + t706 * t963;
t652 = t770 * t963 - t1056;
t651 = -t771 * t960 + t1085;
t650 = t770 * t960 + t1055;
t649 = t771 * t963 + t1086;
t648 = -t687 * t956 + t809 * t958;
t647 = t687 * t958 + t809 * t956;
t646 = t701 * t956 + t958 * t989;
t645 = -t701 * t958 + t956 * t989;
t644 = -qJ(4) * t1071 + t975;
t643 = -pkin(3) * t1071 + t679;
t642 = t697 * t956 + t757 * t958;
t641 = -t697 * t958 + t757 * t956;
t640 = -t746 * t960 - t1055;
t639 = t746 * t963 - t1056;
t637 = t688 * t956 + t769 * t958;
t636 = -t688 * t958 + t769 * t956;
t633 = -t729 * t961 + t730 * t964;
t622 = t715 * t963 - t1086;
t621 = t715 * t960 + t1085;
t619 = -t709 * t961 + t711 * t964;
t618 = -t708 * t961 + t710 * t964;
t617 = t699 * t955 - t700 * t957;
t616 = -t699 * t957 - t700 * t955;
t613 = pkin(2) * t812 + qJ(3) * t627;
t612 = -pkin(3) * t1050 + t667 * t958 - t1151;
t611 = pkin(4) * t688 - qJ(4) * t690;
t610 = qJ(4) * t1051 - t668 * t956 + t1123;
t609 = -t616 * t956 + t859 * t958;
t608 = t616 * t958 + t859 * t956;
t607 = t1142 + t713;
t606 = -t626 - t1132;
t605 = t1150 + t956 * t667 + (pkin(2) + t1063) * t820;
t604 = t679 * t958 - t680 * t956;
t603 = t679 * t956 + t680 * t958;
t602 = t1101 * t999 + t958 * t668 + t1122;
t600 = -t692 * t961 + t735 * t964 + t1161;
t599 = pkin(3) * t1074 - qJ(4) * t1102 + t615;
t598 = t1128 + t627;
t597 = -pkin(3) * t896 + t913 * t844 - 0.2e1 * t1013 + t959 + (-qJDD(2) - t1100) * qJ(4) - t614;
t596 = -t664 * t961 + t666 * t964;
t595 = -t663 * t961 + t665 * t964;
t594 = -t661 * t960 + t963 * t973;
t593 = -t657 * t963 - t960 * t983;
t592 = t661 * t963 + t960 * t973;
t591 = -t657 * t960 + t963 * t983;
t589 = t655 * t955 - t656 * t957;
t588 = t653 * t955 - t654 * t957;
t587 = -t655 * t957 - t656 * t955;
t586 = -t653 * t957 - t654 * t955;
t585 = -t647 * t961 + t648 * t964;
t584 = t650 * t955 - t652 * t957;
t583 = t649 * t955 - t651 * t957;
t582 = -t650 * t957 - t652 * t955;
t581 = -t649 * t957 - t651 * t955;
t580 = -t645 * t961 + t646 * t964;
t579 = t645 * t964 + t646 * t961;
t578 = -t685 * t961 + t716 * t964 - t1144;
t577 = -t641 * t961 + t642 * t964;
t576 = t641 * t964 + t642 * t961;
t575 = -t955 * t639 + t640 * t957;
t574 = t639 * t957 + t640 * t955;
t573 = -pkin(3) * t846 + qJ(4) * t845 - t1142 + t680;
t572 = -t636 * t961 + t637 * t964;
t571 = t636 * t964 + t637 * t961;
t570 = t627 * t964 - t1058;
t569 = t627 * t961 + t1057;
t565 = -t955 * t621 + t622 * t957;
t564 = t621 * t957 + t622 * t955;
t563 = -t587 * t956 + t1006;
t562 = -t586 * t956 - t1006;
t561 = t587 * t958 + t1007;
t560 = t586 * t958 - t1007;
t559 = -t643 * t956 + t644 * t958 - t1132;
t558 = t570 * t965 - t812 * t962;
t557 = t570 * t962 + t812 * t965;
t556 = t580 * t965 + t702 * t962;
t555 = t580 * t962 - t702 * t965;
t554 = t643 * t958 + t644 * t956 + t1128;
t553 = pkin(4) * t989 - t1062 * t702 - t1029;
t552 = -pkin(8) * t639 + t1059;
t551 = t577 * t965 + t698 * t962;
t550 = t577 * t962 - t698 * t965;
t549 = pkin(4) * t757 - t1062 * t698 + t1027;
t548 = t572 * t965 + t690 * t962;
t547 = t572 * t962 - t690 * t965;
t546 = -t582 * t956 + t958 * t973;
t545 = -t581 * t956 - t661 * t958;
t544 = t582 * t958 + t956 * t973;
t543 = t581 * t958 - t661 * t956;
t542 = -pkin(8) * t621 + t1060;
t540 = -t608 * t961 + t609 * t964;
t539 = t574 * t956 + t958 * t983;
t538 = -t574 * t958 + t956 * t983;
t535 = -qJ(3) * t603 + (-pkin(3) * t956 + qJ(4) * t958) * t691;
t534 = -t603 * t961 + t604 * t964;
t533 = t603 * t964 + t604 * t961;
t532 = t564 * t956 + t657 * t958;
t531 = -t564 * t958 + t657 * t956;
t530 = -pkin(1) * t569 - pkin(2) * t626;
t529 = -t605 * t961 + t612 * t964 - t1161;
t528 = pkin(4) * t701 - qJ(4) * t702 - t568;
t527 = -pkin(5) * t983 + pkin(8) * t640 + t1060;
t526 = pkin(4) * t697 - qJ(4) * t698 - t567;
t525 = -t955 * t592 + t594 * t957;
t524 = t591 * t955 - t593 * t957;
t523 = t592 * t957 + t594 * t955;
t522 = -t591 * t957 - t593 * t955;
t521 = qJ(3) * t604 + (t999 + t1063) * t691;
t520 = -pkin(5) * t657 + pkin(8) * t622 - t1059;
t519 = -t602 * t961 + t610 * t964 + t1144;
t518 = t534 * t965 - t691 * t962;
t517 = t534 * t962 + t691 * t965;
t516 = -t522 * t956 + t736 * t958;
t515 = t522 * t958 + t736 * t956;
t514 = -t598 * t961 + t606 * t964 - t1143;
t513 = t523 * t956 + t686 * t958;
t512 = -t523 * t958 + t686 * t956;
t509 = -pkin(7) * t569 - qJ(3) * t1057 - t613 * t961;
t508 = -t561 * t961 + t563 * t964;
t507 = -t560 * t961 + t562 * t964;
t506 = -pkin(1) * t579 - pkin(2) * t645 - qJ(4) * t989 + t1062 * t701 - t1027;
t505 = -t544 * t961 + t546 * t964;
t504 = -t543 * t961 + t545 * t964;
t503 = -pkin(1) * t576 - pkin(2) * t641 - qJ(4) * t757 + t1062 * t697 - t1029;
t502 = t510 * t956 + t632 * t958;
t501 = -t510 * t958 + t632 * t956;
t497 = -t538 * t961 + t539 * t964;
t496 = t538 * t964 + t539 * t961;
t495 = -t554 * t961 + t559 * t964 - t1143;
t494 = pkin(4) * t769 - t1062 * t690 - t511;
t493 = -pkin(1) * t533 - pkin(2) * t603 - pkin(3) * t680 - qJ(4) * t679;
t492 = -t531 * t961 + t532 * t964;
t491 = t531 * t964 + t532 * t961;
t490 = -qJ(3) * t645 + t528 * t958 - t553 * t956;
t489 = -qJ(3) * t641 + t526 * t958 - t549 * t956;
t488 = -pkin(2) * t702 + qJ(3) * t646 + t528 * t956 + t553 * t958;
t487 = -pkin(2) * t698 + qJ(3) * t642 + t526 * t956 + t549 * t958;
t486 = t497 * t965 + t575 * t962;
t485 = t497 * t962 - t575 * t965;
t484 = -t515 * t961 + t516 * t964;
t483 = -t512 * t961 + t513 * t964;
t482 = t512 * t964 + t513 * t961;
t481 = -qJ(3) * t636 - t494 * t956 + t611 * t958;
t480 = t492 * t965 + t565 * t962;
t479 = t492 * t962 - t565 * t965;
t478 = pkin(4) * t523 + pkin(5) * t592 - qJ(4) * t525;
t477 = pkin(4) * t510 - qJ(4) * t511;
t476 = -pkin(1) * t571 - pkin(2) * t636 - qJ(4) * t769 + t1062 * t688 + t510;
t475 = -pkin(2) * t690 + qJ(3) * t637 + t494 * t958 + t611 * t956;
t474 = -pkin(7) * t533 - t521 * t961 + t535 * t964;
t473 = pkin(4) * t632 - t1062 * t511;
t472 = pkin(4) * t574 + pkin(5) * t639 - qJ(4) * t575 - t500;
t471 = pkin(4) * t983 - t1062 * t575 - t957 * t527 - t955 * t552;
t470 = -t501 * t961 + t502 * t964;
t469 = t501 * t964 + t502 * t961;
t466 = pkin(4) * t564 + pkin(5) * t621 - qJ(4) * t565 - t499;
t464 = pkin(4) * t657 - t1062 * t565 - t957 * t520 - t955 * t542;
t463 = t483 * t965 + t525 * t962;
t462 = t483 * t962 - t525 * t965;
t461 = -pkin(5) * t601 + pkin(8) * t468;
t460 = -pkin(8) * t592 - t467;
t459 = -pkin(5) * t686 + pkin(8) * t594 + t468;
t458 = t470 * t965 + t511 * t962;
t457 = t470 * t962 - t511 * t965;
t456 = -pkin(7) * t579 - t488 * t961 + t490 * t964;
t455 = -pkin(7) * t576 - t487 * t961 + t489 * t964;
t454 = -pkin(1) * t496 - pkin(2) * t538 - qJ(4) * t983 + t1062 * t574 + t955 * t527 - t957 * t552;
t453 = -pkin(7) * t571 - t475 * t961 + t481 * t964;
t452 = -pkin(1) * t491 - pkin(2) * t531 - qJ(4) * t657 + t1062 * t564 + t955 * t520 - t957 * t542;
t451 = t468 * t957 - t1030;
t450 = t468 * t955 + t1061;
t449 = t450 * t956 + t601 * t958;
t448 = -t450 * t958 + t601 * t956;
t447 = -qJ(3) * t538 - t471 * t956 + t472 * t958;
t446 = -qJ(3) * t501 - t473 * t956 + t477 * t958;
t445 = -pkin(2) * t575 + qJ(3) * t539 + t471 * t958 + t472 * t956;
t444 = -qJ(3) * t531 - t464 * t956 + t466 * t958;
t443 = -pkin(1) * t469 - pkin(2) * t501 - qJ(4) * t632 + t1062 * t510;
t442 = -pkin(2) * t565 + qJ(3) * t532 + t464 * t958 + t466 * t956;
t441 = -pkin(2) * t511 + qJ(3) * t502 + t473 * t958 + t477 * t956;
t440 = pkin(4) * t686 - t1062 * t525 - t957 * t459 - t955 * t460;
t439 = -pkin(1) * t482 - pkin(2) * t512 - qJ(4) * t686 + t1062 * t523 + t955 * t459 - t957 * t460;
t438 = -qJ(3) * t512 - t440 * t956 + t478 * t958;
t437 = -t448 * t961 + t449 * t964;
t436 = t448 * t964 + t449 * t961;
t435 = -pkin(2) * t525 + qJ(3) * t513 + t440 * t958 + t478 * t956;
t434 = -pkin(7) * t496 - t445 * t961 + t447 * t964;
t433 = pkin(4) * t450 + pkin(5) * t467 - qJ(4) * t451;
t432 = -pkin(7) * t491 - t442 * t961 + t444 * t964;
t431 = -pkin(7) * t469 - t441 * t961 + t446 * t964;
t430 = pkin(4) * t601 + pkin(8) * t1030 - t1062 * t451 - t957 * t461;
t429 = t437 * t965 + t451 * t962;
t428 = t437 * t962 - t451 * t965;
t427 = -pkin(7) * t482 - t435 * t961 + t438 * t964;
t426 = -pkin(1) * t436 - pkin(2) * t448 + pkin(8) * t1061 - qJ(4) * t601 + t1062 * t450 + t955 * t461;
t425 = -qJ(3) * t448 - t430 * t956 + t433 * t958;
t424 = -pkin(2) * t451 + qJ(3) * t449 + t430 * t958 + t433 * t956;
t423 = -pkin(7) * t436 - t424 * t961 + t425 * t964;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t929, -t930, 0, t879, 0, 0, 0, 0, 0, 0, t835, t836, t870, t773, 0, 0, 0, 0, 0, 0, -t678, t684, t1138, t558, 0, 0, 0, 0, 0, 0, t1138, t678, -t684, t518, 0, 0, 0, 0, 0, 0, t551, t556, t548, t458, 0, 0, 0, 0, 0, 0, t480, t486, t463, t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t930, -t929, 0, t877, 0, 0, 0, 0, 0, 0, t833, t834, t869, t772, 0, 0, 0, 0, 0, 0, -t672, t682, t1139, t557, 0, 0, 0, 0, 0, 0, t1139, t672, -t682, t517, 0, 0, 0, 0, 0, 0, t550, t555, t547, t457, 0, 0, 0, 0, 0, 0, t479, t485, t462, t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t880, t881, 0, -t807, 0, 0, 0, 0, 0, 0, t693, -t721, t1126, t569, 0, 0, 0, 0, 0, 0, t1126, -t693, t721, t533, 0, 0, 0, 0, 0, 0, t576, t579, t571, t469, 0, 0, 0, 0, 0, 0, t491, t496, t482, t436; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t930, 0, -t929, 0, t991, -t909, -t877, -pkin(6) * t877, t889 * t965 - t993, t865 * t965 - t932 * t962, t1011 * t961 + t884 * t965, t888 * t965 + t993, t882 * t965 + t946 * t962, t921 * t965 + t945, -pkin(6) * t833 - t823 * t962 + t826 * t965, -pkin(6) * t834 - t824 * t962 + t827 * t965, -pkin(6) * t869 + t807 * t965, -pkin(6) * t772 - (pkin(1) * t962 - pkin(7) * t965) * t807, t1080, t1147, t1158, t1079, -t1156, t1083, t578 * t965 - t607 * t962 + t1155, t600 * t965 - t614 * t962 - t1163, t514 * t965 - t615 * t962 - t1152, -pkin(6) * t557 + t509 * t965 - t530 * t962, t1083, -t1158, t1156, t1080, t1147, t1079, t495 * t965 - t599 * t962 - t1152, t519 * t965 - t573 * t962 - t1155, t529 * t965 - t597 * t962 + t1163, -pkin(6) * t517 + t474 * t965 - t493 * t962, t619 * t965 - t754 * t962, t585 * t965 - t689 * t962, t595 * t965 - t719 * t962, t618 * t965 - t752 * t962, t596 * t965 - t720 * t962, t633 * t965 - t750 * t962, -pkin(6) * t550 + t455 * t965 - t503 * t962, -pkin(6) * t555 + t456 * t965 - t506 * t962, -pkin(6) * t547 + t453 * t965 - t476 * t962, -pkin(6) * t457 + t431 * t965 - t443 * t962, t508 * t965 - t589 * t962, t484 * t965 - t524 * t962, t504 * t965 - t583 * t962, t507 * t965 - t588 * t962, t505 * t965 - t584 * t962, t540 * t965 - t617 * t962, -pkin(6) * t479 + t432 * t965 - t452 * t962, -pkin(6) * t485 + t434 * t965 - t454 * t962, -pkin(6) * t462 + t427 * t965 - t439 * t962, -pkin(6) * t428 + t423 * t965 - t426 * t962; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t929, 0, t930, 0, t909, t991, t879, pkin(6) * t879, t889 * t962 + t992, t865 * t962 + t932 * t965, -t1010 * t961 + t884 * t962, t888 * t962 - t992, t882 * t962 - t946 * t965, t921 * t962 - t1009, pkin(6) * t835 + t823 * t965 + t826 * t962, pkin(6) * t836 + t824 * t965 + t827 * t962, pkin(6) * t870 + t807 * t962, pkin(6) * t773 - (-pkin(1) * t965 - pkin(7) * t962) * t807, t1082, t1148, t1159, t1081, -t1157, t1078, t578 * t962 + t607 * t965 - t1154, t600 * t962 + t614 * t965 + t1162, t514 * t962 + t615 * t965 + t1153, pkin(6) * t558 + t509 * t962 + t530 * t965, t1078, -t1159, t1157, t1082, t1148, t1081, t495 * t962 + t599 * t965 + t1153, t519 * t962 + t573 * t965 + t1154, t529 * t962 + t597 * t965 - t1162, pkin(6) * t518 + t474 * t962 + t493 * t965, t619 * t962 + t754 * t965, t585 * t962 + t689 * t965, t595 * t962 + t719 * t965, t618 * t962 + t752 * t965, t596 * t962 + t720 * t965, t633 * t962 + t750 * t965, pkin(6) * t551 + t455 * t962 + t503 * t965, pkin(6) * t556 + t456 * t962 + t506 * t965, pkin(6) * t548 + t453 * t962 + t476 * t965, pkin(6) * t458 + t431 * t962 + t443 * t965, t508 * t962 + t589 * t965, t484 * t962 + t524 * t965, t504 * t962 + t583 * t965, t507 * t962 + t588 * t965, t505 * t962 + t584 * t965, t540 * t962 + t617 * t965, pkin(6) * t480 + t432 * t962 + t452 * t965, pkin(6) * t486 + t434 * t962 + t454 * t965, pkin(6) * t463 + t427 * t962 + t439 * t965, pkin(6) * t429 + t423 * t962 + t426 * t965; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t935, t936, 0, 0, (t925 + t1000) * t961, t924 * t964 + t927 * t961, t938 * t964 + t1034, (t926 - t1001) * t964, t940 * t961 + t1032, 0, pkin(1) * t927 + pkin(7) * t883 + t1035, -pkin(1) * t924 + pkin(7) * t885 - t1036, pkin(1) * t931 + pkin(7) * t928 + t808, pkin(1) * t918 + pkin(7) * t808, t1065, t1137, -t1146, t1067, t1145, t1070, t685 * t964 + t716 * t961 - t1141, t692 * t964 + t735 * t961 - t1160, t598 * t964 + t606 * t961 + t1140, pkin(1) * t812 + pkin(7) * t570 - qJ(3) * t1058 + t613 * t964, t1070, t1146, -t1145, t1065, t1137, t1067, t554 * t964 + t559 * t961 + t1140, t602 * t964 + t610 * t961 + t1141, t605 * t964 + t612 * t961 + t1160, pkin(1) * t691 + pkin(7) * t534 + t521 * t964 + t535 * t961, t709 * t964 + t711 * t961, t647 * t964 + t648 * t961, t663 * t964 + t665 * t961, t708 * t964 + t710 * t961, t664 * t964 + t666 * t961, t729 * t964 + t730 * t961, -pkin(1) * t698 + pkin(7) * t577 + t487 * t964 + t489 * t961, -pkin(1) * t702 + pkin(7) * t580 + t488 * t964 + t490 * t961, -pkin(1) * t690 + pkin(7) * t572 + t475 * t964 + t481 * t961, -pkin(1) * t511 + pkin(7) * t470 + t441 * t964 + t446 * t961, t561 * t964 + t563 * t961, t515 * t964 + t516 * t961, t543 * t964 + t545 * t961, t560 * t964 + t562 * t961, t544 * t964 + t546 * t961, t608 * t964 + t609 * t961, -pkin(1) * t565 + pkin(7) * t492 + t442 * t964 + t444 * t961, -pkin(1) * t575 + pkin(7) * t497 + t445 * t964 + t447 * t961, -pkin(1) * t525 + pkin(7) * t483 + t435 * t964 + t438 * t961, -pkin(1) * t451 + pkin(7) * t437 + t424 * t964 + t425 * t961;];
tauB_reg  = t1;
