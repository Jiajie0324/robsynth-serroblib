% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta3,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPPRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPPRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPPRR1_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:16:20
% EndTime: 2019-03-08 19:16:23
% DurationCPUTime: 1.57s
% Computational Cost: add. (2003->167), mult. (5128->298), div. (0->0), fcn. (5471->12), ass. (0->112)
t132 = cos(qJ(5));
t103 = t132 * qJD(4);
t63 = sin(qJ(5));
t113 = t63 * qJD(4);
t116 = qJD(5) * t63;
t59 = sin(pkin(11));
t52 = pkin(2) * t59 + qJ(4);
t134 = pkin(8) + t52;
t60 = cos(pkin(12));
t45 = t134 * t60;
t58 = sin(pkin(12));
t99 = t134 * t132;
t66 = (-qJD(5) * t99 - t113) * t58 + t60 * t103 - t45 * t116;
t64 = sin(qJ(2));
t117 = sin(pkin(6));
t118 = cos(pkin(11));
t81 = t118 * t117;
t133 = cos(qJ(2));
t85 = t117 * t133;
t41 = t59 * t85 + t64 * t81;
t38 = t41 * qJD(2);
t104 = t64 * t117;
t77 = t133 * t81;
t70 = t59 * t104 - t77;
t17 = t70 * t38;
t105 = qJD(5) * t132;
t43 = -t60 * t105 + t58 * t116;
t48 = t132 * t58 + t63 * t60;
t44 = t48 * qJD(5);
t78 = t132 * t60 - t63 * t58;
t142 = -t43 * t78 - t48 * t44;
t90 = -t118 * pkin(2) - pkin(3);
t49 = -t60 * pkin(4) + t90;
t72 = -pkin(5) * t78 - t48 * pkin(9) + t49;
t141 = -qJD(6) * t72 - t66;
t91 = qJD(2) * t104;
t37 = -qJD(2) * t77 + t59 * t91;
t61 = cos(pkin(6));
t31 = -t41 * t58 + t60 * t61;
t32 = t41 * t60 + t58 * t61;
t79 = t132 * t31 - t32 * t63;
t67 = qJD(5) * t79 - t37 * t78;
t140 = -t70 * qJD(6) - t67;
t62 = sin(qJ(6));
t56 = t62 ^ 2;
t65 = cos(qJ(6));
t57 = t65 ^ 2;
t102 = qJD(6) * (t56 - t57);
t115 = qJD(6) * t62;
t107 = t63 * t134;
t25 = -t58 * t107 + t132 * t45;
t136 = pkin(9) * t43;
t137 = pkin(5) * t44;
t98 = t136 + t137;
t3 = t25 * t115 + t141 * t65 - t62 * t98;
t114 = qJD(6) * t65;
t4 = -t25 * t114 + t141 * t62 + t65 * t98;
t10 = t65 * t25 + t62 * t72;
t9 = -t62 * t25 + t65 * t72;
t89 = t10 * t65 - t62 * t9;
t139 = qJD(6) * t89 - t3 * t62 + t4 * t65;
t12 = t132 * t32 + t63 * t31;
t1 = t12 * t115 + t140 * t65 - t38 * t62;
t2 = -t12 * t114 + t140 * t62 + t38 * t65;
t7 = -t62 * t12 + t65 * t70;
t8 = t65 * t12 + t62 * t70;
t92 = t62 * t7 - t65 * t8;
t138 = t92 * qJD(6) + t1 * t62 - t2 * t65;
t6 = qJD(5) * t12 - t37 * t48;
t135 = t79 * t6;
t15 = t45 * t105 + t60 * t113 + (-qJD(5) * t107 + t103) * t58;
t24 = t63 * t45 + t58 * t99;
t131 = t24 * t15;
t130 = t78 * t44;
t129 = t48 * t43;
t128 = t48 * t62;
t127 = t48 * t65;
t126 = t56 * t43;
t39 = t57 * t43;
t125 = t62 * t44;
t124 = t65 * t43;
t123 = t65 * t44;
t122 = t48 * t123 + t124 * t78;
t120 = t58 ^ 2 + t60 ^ 2;
t112 = -0.2e1 * t130;
t111 = -0.2e1 * pkin(5) * qJD(6);
t110 = t62 * t124;
t109 = t48 * t115;
t108 = t62 * t114;
t106 = t120 * t37;
t46 = t48 ^ 2;
t101 = t46 * t108;
t100 = 0.2e1 * t120 * qJD(4);
t97 = pkin(5) * t43 - pkin(9) * t44;
t96 = pkin(5) * t48 - pkin(9) * t78;
t93 = t62 * t8 + t65 * t7;
t88 = t10 * t62 + t65 * t9;
t87 = -t15 * t79 + t6 * t24;
t86 = -t44 * t79 - t6 * t78;
t84 = -t15 * t78 + t24 * t44;
t83 = t31 * t58 - t32 * t60;
t80 = t48 * t114 - t62 * t43;
t21 = t109 + t124;
t22 = -t114 * t78 + t125;
t73 = -t93 * qJD(6) - t1 * t65 - t2 * t62;
t71 = -qJD(6) * t88 - t3 * t65 - t4 * t62;
t28 = t48 * t39;
t27 = t48 * t126;
t20 = -t115 * t78 - t123;
t18 = t39 + t126;
t14 = t48 * t102 + t110;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t41 * t37 + 0.2e1 * t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t37 * t83 + 0.2e1 * t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t12 * t67 - 0.2e1 * t135 + 0.2e1 * t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t1 * t8 + 0.2e1 * t2 * t7 - 0.2e1 * t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t91, -qJD(2) * t85, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t37, 0 (-t118 * t38 - t37 * t59) * pkin(2), 0, 0, 0, 0, 0, 0, -t38 * t60, t38 * t58, -t106, -t83 * qJD(4) - t52 * t106 + t38 * t90, 0, 0, 0, 0, 0, 0, -t38 * t78 + t44 * t70, t38 * t48 - t43 * t70, -t12 * t44 + t43 * t79 + t6 * t48 + t67 * t78, t12 * t66 + t25 * t67 + t38 * t49 + t87, 0, 0, 0, 0, 0, 0, t6 * t128 - t2 * t78 + t7 * t44 - t79 * t80, -t1 * t78 + t6 * t127 + t21 * t79 - t8 * t44, t138 * t48 + t93 * t43, -t1 * t10 + t2 * t9 - t3 * t8 + t4 * t7 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t52 * t100, -0.2e1 * t129, 0.2e1 * t142, 0, t112, 0, 0, 0.2e1 * t49 * t44, -0.2e1 * t49 * t43, 0.2e1 * t15 * t48 - 0.2e1 * t24 * t43 - 0.2e1 * t25 * t44 + 0.2e1 * t66 * t78, 0.2e1 * t66 * t25 + 0.2e1 * t131, -0.2e1 * t28 - 0.2e1 * t101, 0.2e1 * t46 * t102 + 0.4e1 * t48 * t110, 0.2e1 * t109 * t78 + 0.2e1 * t122, -0.2e1 * t27 + 0.2e1 * t101, -0.2e1 * t48 * t125 + 0.2e1 * t78 * t80, t112, 0.2e1 * t15 * t128 + 0.2e1 * t24 * t80 - 0.2e1 * t4 * t78 + 0.2e1 * t9 * t44, -0.2e1 * t10 * t44 + 0.2e1 * t15 * t127 - 0.2e1 * t21 * t24 - 0.2e1 * t3 * t78, -0.2e1 * t139 * t48 + 0.2e1 * t88 * t43, -0.2e1 * t10 * t3 + 0.2e1 * t4 * t9 + 0.2e1 * t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12 * t43 + t48 * t67 + t86, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92 * t43 + t73 * t48 + t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25 * t43 + t66 * t48 + t84, 0, 0, 0, 0, 0, 0, 0, t142 * t65 + t122, 0, -t43 * t89 + t71 * t48 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t129 - 0.2e1 * t130, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t27 - 0.2e1 * t28 - 0.2e1 * t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t43, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, t18, t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t67, 0, 0, 0, 0, 0, 0, 0, 0, -t115 * t79 - t6 * t65, -t114 * t79 + t6 * t62, t73, -t6 * pkin(5) + pkin(9) * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, 0, -t44, 0, -t15, -t66, 0, 0, -t14, -0.4e1 * t48 * t108 + t126 - t39, t22, t14, -t20, 0, -t15 * t65 + t97 * t62 + (t24 * t62 - t96 * t65) * qJD(6), t15 * t62 + t97 * t65 + (t24 * t65 + t96 * t62) * qJD(6), t71, -t15 * pkin(5) + pkin(9) * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, t43, 0, 0, 0, 0, 0, 0, 0, 0, t20, t22, -t18, -t137 + (-t56 - t57) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t108, -0.2e1 * t102, 0, -0.2e1 * t108, 0, 0, t62 * t111, t65 * t111, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, 0, -t80, t44, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t21, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t114, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, -t115, 0, -pkin(9) * t114, pkin(9) * t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
