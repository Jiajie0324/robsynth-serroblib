% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPRR10_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR10_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR10_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR10_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:37:01
% EndTime: 2019-03-09 09:37:17
% DurationCPUTime: 6.26s
% Computational Cost: add. (11275->481), mult. (25406->661), div. (0->0), fcn. (17226->8), ass. (0->249)
t245 = cos(pkin(10));
t251 = cos(qJ(2));
t313 = qJD(1) * t251;
t293 = t245 * t313;
t244 = sin(pkin(10));
t307 = t244 * qJD(2);
t189 = t293 + t307;
t294 = t244 * t313;
t306 = t245 * qJD(2);
t191 = -t294 + t306;
t248 = sin(qJ(5));
t250 = cos(qJ(5));
t120 = t248 * t189 - t250 * t191;
t121 = t250 * t189 + t248 * t191;
t247 = sin(qJ(6));
t348 = cos(qJ(6));
t49 = t348 * t120 + t247 * t121;
t380 = t49 ^ 2;
t53 = t247 * t120 - t348 * t121;
t379 = t53 ^ 2;
t249 = sin(qJ(2));
t305 = t249 * qJD(1);
t227 = qJD(5) + t305;
t219 = qJD(6) + t227;
t378 = t219 * t53;
t377 = t49 * t219;
t296 = t245 * t305;
t297 = t244 * t305;
t309 = qJD(5) * t250;
t310 = qJD(5) * t248;
t316 = t244 * t310 - t245 * t309 + t248 * t297 - t250 * t296;
t193 = t250 * t244 + t248 * t245;
t177 = t193 * qJD(5);
t260 = t193 * t249;
t315 = qJD(1) * t260 + t177;
t246 = -pkin(2) - qJ(4);
t346 = -pkin(8) + t246;
t202 = t346 * t244;
t203 = t346 * t245;
t134 = t250 * t202 + t248 * t203;
t271 = t248 * t244 - t250 * t245;
t234 = pkin(2) * t305;
t272 = -qJ(3) * t251 + qJ(4) * t249;
t166 = t272 * qJD(1) + t234;
t231 = pkin(7) * t313;
t232 = pkin(3) * t313;
t200 = t231 + t232;
t114 = -t244 * t166 + t245 * t200;
t325 = t244 * t249;
t268 = pkin(4) * t251 - pkin(8) * t325;
t83 = t268 * qJD(1) + t114;
t115 = t245 * t166 + t244 * t200;
t281 = pkin(8) * t296;
t96 = t281 + t115;
t343 = -qJD(4) * t271 + t134 * qJD(5) - t248 * t96 + t250 * t83;
t342 = qJD(4) * t193 + t202 * t310 - t203 * t309 + t248 * t83 + t250 * t96;
t376 = t120 ^ 2;
t375 = t121 ^ 2;
t349 = pkin(3) + pkin(7);
t374 = pkin(5) * t313 - pkin(9) * t315 + t343;
t373 = -pkin(9) * t316 + t342;
t347 = t53 * t49;
t372 = t120 * t227;
t371 = t121 * t227;
t265 = -t247 * t193 - t271 * t348;
t359 = t265 * qJD(6) - t247 * t315 - t316 * t348;
t370 = t359 * t219;
t230 = pkin(7) * t305;
t369 = qJD(3) + t230;
t368 = -t379 + t380;
t292 = qJD(6) * t348;
t308 = qJD(6) * t247;
t301 = qJD(1) * qJD(2);
t291 = t249 * t301;
t279 = t250 * t291;
t280 = t248 * t291;
t77 = t189 * t309 + t191 * t310 - t244 * t279 - t245 * t280;
t78 = -t189 * t310 + t191 * t309 + t244 * t280 - t245 * t279;
t24 = -t120 * t308 + t121 * t292 + t247 * t78 + t348 * t77;
t367 = -t24 - t378;
t290 = -t249 * qJ(3) - pkin(1);
t188 = t246 * t251 + t290;
t150 = t188 * qJD(1);
t302 = pkin(3) * t305 + t369;
t156 = t246 * qJD(2) + t302;
t91 = -t244 * t150 + t245 * t156;
t63 = pkin(4) * t305 - t191 * pkin(8) + t91;
t92 = t245 * t150 + t244 * t156;
t70 = -t189 * pkin(8) + t92;
t30 = -t248 * t70 + t250 * t63;
t28 = pkin(9) * t120 + t30;
t26 = t227 * pkin(5) + t28;
t31 = t248 * t63 + t250 * t70;
t29 = -t121 * pkin(9) + t31;
t259 = t268 * qJD(2);
t226 = pkin(2) * t291;
t304 = t249 * qJD(3);
t256 = qJD(2) * t272 - t251 * qJD(4) - t304;
t119 = qJD(1) * t256 + t226;
t229 = t251 * t301;
t225 = pkin(7) * t229;
t165 = t225 + (-qJD(4) + t232) * qJD(2);
t75 = -t244 * t119 + t245 * t165;
t47 = qJD(1) * t259 + t75;
t76 = t245 * t119 + t244 * t165;
t62 = qJD(2) * t281 + t76;
t13 = -qJD(5) * t31 - t248 * t62 + t250 * t47;
t8 = pkin(5) * t229 + t77 * pkin(9) + t13;
t12 = t248 * t47 + t250 * t62 + t63 * t309 - t70 * t310;
t9 = -t78 * pkin(9) + t12;
t258 = -t247 * t8 - t26 * t292 + t29 * t308 - t348 * t9;
t241 = qJD(2) * qJ(3);
t357 = qJD(4) + t241;
t173 = t200 + t357;
t131 = t189 * pkin(4) + t173;
t64 = t121 * pkin(5) + t131;
t366 = -t53 * t64 + t258;
t300 = t348 * t29;
t7 = t247 * t26 + t300;
t2 = -qJD(6) * t7 - t247 * t9 + t348 * t8;
t262 = t348 * t193 - t247 * t271;
t365 = t2 * t265 - t258 * t262 + t359 * t7;
t25 = -qJD(6) * t49 - t247 * t77 + t348 * t78;
t364 = t25 * t262 - t359 * t53;
t362 = -0.2e1 * t301;
t361 = t24 * t265;
t358 = t247 * t316 - t315 * t348;
t298 = -pkin(4) * t245 - pkin(3);
t303 = -t298 * t305 + t369;
t356 = t49 * t64 + t2;
t355 = -t121 * t316 + t193 * t78;
t354 = t120 * t315 + t271 * t77;
t353 = -t25 - t377;
t311 = qJD(2) * t251;
t352 = t249 * (-t173 + t357) - t246 * t311;
t350 = t12 * t193 - t13 * t271 - t315 * t30 - t316 * t31;
t100 = -t193 * pkin(9) + t134;
t133 = -t248 * t202 + t250 * t203;
t99 = pkin(9) * t271 + t133;
t41 = t348 * t100 + t247 * t99;
t345 = t41 * qJD(6) - t247 * t373 + t348 * t374;
t40 = -t247 * t100 + t348 * t99;
t344 = -t40 * qJD(6) + t247 * t374 + t348 * t373;
t340 = t193 * t292 - t271 * t308 - t358;
t339 = -qJD(6) * t262 + t358;
t337 = qJD(2) * pkin(2);
t334 = t247 * t29;
t333 = t251 * t91;
t332 = t251 * t92;
t215 = t349 * t249;
t196 = t245 * t215;
t107 = t249 * pkin(4) + t196 + (pkin(8) * t251 - t188) * t244;
t130 = t245 * t188 + t244 * t215;
t323 = t245 * t251;
t111 = -pkin(8) * t323 + t130;
t44 = t248 * t107 + t250 * t111;
t331 = t120 * t121;
t312 = qJD(2) * t249;
t199 = t349 * t312;
t240 = qJD(2) * qJD(3);
t164 = -qJD(1) * t199 + t240;
t330 = t164 * t244;
t329 = t189 * t245;
t328 = t191 * t244;
t327 = t191 * t245;
t242 = t249 ^ 2;
t253 = qJD(1) ^ 2;
t326 = t242 * t253;
t324 = t245 * t249;
t320 = t251 * t253;
t252 = qJD(2) ^ 2;
t319 = t252 * t249;
t318 = t252 * t251;
t228 = t244 * pkin(4) + qJ(3);
t317 = -pkin(5) * t316 + t303;
t233 = pkin(2) * t312;
t136 = t233 + t256;
t201 = t349 * t311;
t95 = t245 * t136 + t244 * t201;
t216 = t349 * t251;
t243 = t251 ^ 2;
t314 = t242 - t243;
t209 = -t251 * pkin(2) + t290;
t184 = qJD(1) * t209;
t299 = t245 * t326;
t176 = pkin(4) * t323 + t216;
t43 = t250 * t107 - t248 * t111;
t288 = t316 * t227;
t287 = pkin(1) * t362;
t286 = qJD(3) - t337;
t94 = -t244 * t136 + t245 * t201;
t284 = qJD(1) * (0.2e1 * t242 - t243);
t283 = -t189 + t307;
t282 = -t191 + t306;
t278 = t245 * t229 - t244 * t326;
t277 = -t227 * t315 - t271 * t229;
t275 = t76 * t244 + t75 * t245;
t274 = -t244 * t91 + t245 * t92;
t270 = qJD(1) * t283;
t269 = -0.2e1 * qJD(2) * t184;
t162 = t193 * t251;
t36 = t249 * pkin(5) + t162 * pkin(9) + t43;
t161 = t271 * t251;
t37 = t161 * pkin(9) + t44;
t20 = -t247 * t37 + t348 * t36;
t21 = t247 * t36 + t348 * t37;
t261 = -qJ(3) * t311 - t304;
t151 = t261 * qJD(1) + t226;
t171 = t233 + t261;
t267 = pkin(7) * t252 + qJD(1) * t171 + t151;
t105 = t247 * t161 - t348 * t162;
t74 = t259 + t94;
t80 = t249 * pkin(8) * t306 + t95;
t22 = t107 * t309 - t111 * t310 + t248 * t74 + t250 * t80;
t153 = (-pkin(7) + t298) * t312;
t135 = qJD(1) * t153 + t240;
t23 = -t44 * qJD(5) - t248 * t80 + t250 * t74;
t42 = t78 * pkin(5) + t135;
t207 = pkin(7) * t291 - t240;
t208 = t230 + t286;
t212 = -t231 - t241;
t255 = -t207 * t251 + (t208 * t251 + (t212 + t231) * t249) * qJD(2);
t239 = t245 ^ 2;
t238 = t244 ^ 2;
t223 = t249 * t320;
t218 = t249 * t229;
t214 = -0.2e1 * t218;
t213 = 0.2e1 * t218;
t211 = t314 * t253;
t197 = -qJ(3) * t313 + t234;
t183 = t314 * t362;
t154 = t184 * t305;
t147 = t193 * pkin(5) + t228;
t129 = -t244 * t188 + t196;
t118 = -t161 * pkin(5) + t176;
t110 = t177 * t251 - t271 * t312;
t109 = qJD(2) * t260 + qJD(5) * t161;
t104 = -t348 * t161 - t247 * t162;
t69 = -t110 * pkin(5) + t153;
t33 = t105 * qJD(6) + t247 * t109 - t348 * t110;
t32 = -t348 * t109 - t247 * t110 - t161 * t292 - t162 * t308;
t17 = t110 * pkin(9) + t22;
t16 = pkin(5) * t311 - t109 * pkin(9) + t23;
t11 = t348 * t28 - t334;
t10 = -t247 * t28 - t300;
t6 = t348 * t26 - t334;
t4 = -t21 * qJD(6) + t348 * t16 - t247 * t17;
t3 = t20 * qJD(6) + t247 * t16 + t348 * t17;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, t183, t318, t214, -t319, 0, -pkin(7) * t318 + t249 * t287, pkin(7) * t319 + t251 * t287, 0, 0, 0, -t318, t319, t213, t183, t214, t255, t249 * t269 + t251 * t267, -t249 * t267 + t251 * t269, pkin(7) * t255 + t151 * t209 + t184 * t171 (-t238 * t313 + t328) * t312 (t327 + (-t189 - 0.2e1 * t293) * t244) * t312 (t191 * t251 + t244 * t284) * qJD(2) (-t239 * t313 - t329) * t312 (-t189 * t251 + t245 * t284) * qJD(2), t213, t164 * t323 - t199 * t189 + (qJD(1) * t94 + t75) * t249 + (-t173 * t324 + t333 + (t129 * t251 - t216 * t324) * qJD(1)) * qJD(2), -t251 * t330 - t199 * t191 + (-qJD(1) * t95 - t76) * t249 + (t173 * t325 - t332 + (-t130 * t251 + t216 * t325) * qJD(1)) * qJD(2), -t95 * t189 - t94 * t191 + (t244 * t75 - t245 * t76) * t251 + ((-t129 * t244 + t130 * t245) * qJD(1) + t274) * t312, t129 * t75 + t130 * t76 + t164 * t216 - t173 * t199 + t91 * t94 + t92 * t95, -t109 * t120 + t162 * t77, -t109 * t121 - t110 * t120 - t161 * t77 + t162 * t78, t109 * t227 - t77 * t249 + (-qJD(1) * t162 - t120) * t311, -t110 * t121 - t161 * t78, t110 * t227 - t78 * t249 + (qJD(1) * t161 - t121) * t311, t227 * t311 + t218, -t131 * t110 + t153 * t121 + t13 * t249 - t135 * t161 + t176 * t78 + t23 * t227 + (qJD(1) * t43 + t30) * t311, t131 * t109 - t12 * t249 - t153 * t120 - t135 * t162 - t176 * t77 - t22 * t227 + (-qJD(1) * t44 - t31) * t311, -t109 * t30 + t110 * t31 + t12 * t161 + t120 * t23 - t121 * t22 + t13 * t162 + t43 * t77 - t44 * t78, t12 * t44 + t13 * t43 + t131 * t153 + t135 * t176 + t22 * t31 + t23 * t30, -t105 * t24 + t32 * t49, t104 * t24 - t105 * t25 - t32 * t53 + t33 * t49, -t32 * t219 - t24 * t249 + (qJD(1) * t105 - t49) * t311, t104 * t25 - t33 * t53, -t33 * t219 - t25 * t249 + (-qJD(1) * t104 + t53) * t311, t219 * t311 + t218, t42 * t104 + t118 * t25 + t2 * t249 + t4 * t219 + t64 * t33 - t69 * t53 + (qJD(1) * t20 + t6) * t311, t258 * t249 + t42 * t105 - t118 * t24 - t3 * t219 - t64 * t32 - t69 * t49 + (-qJD(1) * t21 - t7) * t311, t104 * t258 - t105 * t2 + t20 * t24 - t21 * t25 + t3 * t53 + t32 * t6 - t33 * t7 + t4 * t49, t118 * t42 + t2 * t20 - t21 * t258 + t3 * t7 + t4 * t6 + t64 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t223, t211, 0, t223, 0, 0, t253 * pkin(1) * t249, pkin(1) * t320, 0, 0, 0, 0, 0, -t223, t211, t223 ((-t212 - t241) * t249 + (-t208 + t286) * t251) * qJD(1), -t197 * t313 + t154, 0.2e1 * t240 + (t184 * t251 + t197 * t249) * qJD(1), -t207 * qJ(3) - t212 * qJD(3) - t184 * t197 + (-t212 * t249 + (-t208 - t337) * t251) * qJD(1) * pkin(7), t282 * t297 (t189 * t244 - t327 + (-t238 + t239) * qJD(2)) * t305, -t191 * t313 + t278, -t270 * t324, -t251 * t270 - t299, -t223, t330 + t302 * t189 + (-t114 * t249 - t352 * t245 - t333) * qJD(1), t164 * t245 + t302 * t191 + (t115 * t249 + t352 * t244 + t332) * qJD(1), t114 * t191 + t115 * t189 + (qJD(4) * t191 - t92 * t305 - t75) * t245 + (qJD(4) * t189 + t91 * t305 - t76) * t244, t164 * qJ(3) - t91 * t114 - t92 * t115 + t275 * t246 + t302 * t173 + (-t244 * t92 - t245 * t91) * qJD(4), t354, -t120 * t316 + t315 * t121 + t77 * t193 + t271 * t78, t120 * t313 + t277, t355, t288 + (-qJD(2) * t193 + t121) * t313, -t227 * t313, t135 * t193 + t228 * t78 - t343 * t227 - t316 * t131 + t303 * t121 + (qJD(2) * t133 - t30) * t313, -t135 * t271 - t228 * t77 + t342 * t227 - t315 * t131 - t303 * t120 + (-qJD(2) * t134 + t31) * t313, -t120 * t343 + t342 * t121 + t133 * t77 - t134 * t78 - t350, t12 * t134 + t13 * t133 + t303 * t131 + t135 * t228 - t343 * t30 - t342 * t31, t340 * t49 - t361, t24 * t262 - t25 * t265 - t340 * t53 + t359 * t49, -t340 * t219 + (qJD(2) * t265 + t49) * t313, t364, -t370 + (-qJD(2) * t262 - t53) * t313, -t219 * t313, t42 * t262 + t147 * t25 + t359 * t64 - t317 * t53 - t345 * t219 + (qJD(2) * t40 - t6) * t313, t42 * t265 - t147 * t24 - t340 * t64 - t317 * t49 + t344 * t219 + (-qJD(2) * t41 + t7) * t313, t40 * t24 - t41 * t25 + t340 * t6 - t344 * t53 - t345 * t49 - t365, t42 * t147 + t2 * t40 - t258 * t41 + t317 * t64 - t344 * t7 - t345 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t223, -t252 - t326, qJD(2) * t212 + t154 + t225, 0, 0, 0, 0, 0, 0, -qJD(2) * t189 + t278, -t299 + (-t191 - t294) * qJD(2) (t328 - t329) * t305, -t173 * qJD(2) + t274 * t305 + t275, 0, 0, 0, 0, 0, 0, -qJD(2) * t121 + t277, t288 + (-t193 * t313 + t120) * qJD(2), -t354 - t355, -t131 * qJD(2) + t350, 0, 0, 0, 0, 0, 0, t339 * t219 + (t265 * t313 + t53) * qJD(2), -t370 + (-t262 * t313 + t49) * qJD(2), t339 * t49 + t361 - t364, -t64 * qJD(2) + t339 * t6 + t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t282 * t305, t283 * t305, -t189 ^ 2 - t191 ^ 2, t92 * t189 + t91 * t191 + t164, 0, 0, 0, 0, 0, 0, t78 - t372, -t77 - t371, -t375 - t376, -t30 * t120 + t121 * t31 + t135, 0, 0, 0, 0, 0, 0, t25 - t377, -t24 + t378, -t379 - t380, -t6 * t49 - t7 * t53 + t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t331, -t375 + t376, -t77 + t371, t331, -t78 - t372, t229, t120 * t131 + t31 * t227 + t13, t121 * t131 + t227 * t30 - t12, 0, 0, t347, t368, t367, -t347, t353, t229, -t10 * t219 + (-t120 * t53 - t219 * t308 + t348 * t229) * pkin(5) + t356, t11 * t219 + (-t120 * t49 - t219 * t292 - t229 * t247) * pkin(5) + t366, -t10 * t49 - t11 * t53 - t7 * t49 + t6 * t53 + (t348 * t24 - t247 * t25 + (-t247 * t49 + t348 * t53) * qJD(6)) * pkin(5), -t6 * t10 - t7 * t11 + (t348 * t2 - t258 * t247 + t120 * t64 + (-t247 * t6 + t348 * t7) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, t368, t367, -t347, t353, t229, t7 * t219 + t356, t6 * t219 + t366, 0, 0;];
tauc_reg  = t1;
