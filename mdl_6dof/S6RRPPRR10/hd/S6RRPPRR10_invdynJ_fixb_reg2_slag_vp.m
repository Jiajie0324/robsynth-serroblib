% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:37:09
% EndTime: 2019-03-09 09:37:26
% DurationCPUTime: 9.45s
% Computational Cost: add. (13742->674), mult. (28910->838), div. (0->0), fcn. (19646->14), ass. (0->321)
t288 = cos(pkin(10));
t287 = sin(pkin(10));
t388 = qJD(2) * t287;
t296 = cos(qJ(2));
t389 = qJD(1) * t296;
t207 = t288 * t389 + t388;
t364 = t287 * t389;
t387 = qJD(2) * t288;
t209 = -t364 + t387;
t292 = sin(qJ(5));
t295 = cos(qJ(5));
t126 = t207 * t292 - t209 * t295;
t127 = t207 * t295 + t209 * t292;
t291 = sin(qJ(6));
t441 = cos(qJ(6));
t58 = t126 * t441 + t127 * t291;
t475 = t58 ^ 2;
t62 = t126 * t291 - t127 * t441;
t474 = t62 ^ 2;
t293 = sin(qJ(2));
t390 = qJD(1) * t293;
t250 = qJD(5) + t390;
t237 = qJD(6) + t250;
t473 = t237 * t62;
t472 = t58 * t237;
t366 = t288 * t390;
t367 = t287 * t390;
t382 = qJD(5) * t295;
t383 = qJD(5) * t292;
t397 = t287 * t383 - t288 * t382 + t292 * t367 - t295 * t366;
t212 = t287 * t295 + t288 * t292;
t193 = t212 * qJD(5);
t320 = t293 * t212;
t396 = qJD(1) * t320 + t193;
t431 = pkin(2) + qJ(4);
t428 = -pkin(8) - t431;
t222 = t428 * t287;
t223 = t428 * t288;
t266 = pkin(2) * t390;
t415 = qJ(3) * t296;
t338 = qJ(4) * t293 - t415;
t182 = qJD(1) * t338 + t266;
t263 = pkin(7) * t389;
t220 = pkin(3) * t389 + t263;
t118 = -t182 * t287 + t220 * t288;
t406 = t287 * t293;
t333 = pkin(4) * t296 - pkin(8) * t406;
t86 = qJD(1) * t333 + t118;
t119 = t182 * t288 + t220 * t287;
t99 = pkin(8) * t366 + t119;
t421 = -qJD(4) * t212 - t222 * t383 + t223 * t382 - t292 * t86 - t295 * t99;
t140 = t222 * t295 + t223 * t292;
t335 = t287 * t292 - t288 * t295;
t420 = qJD(4) * t335 - t140 * qJD(5) + t292 * t99 - t295 * t86;
t471 = t126 ^ 2;
t470 = t127 ^ 2;
t443 = pkin(3) + pkin(7);
t469 = -pkin(5) * t389 + pkin(9) * t396 + t420;
t468 = -pkin(9) * t397 - t421;
t432 = t62 * t58;
t467 = t126 * t250;
t466 = t127 * t250;
t262 = pkin(7) * t390;
t465 = qJD(3) + t262;
t464 = -t474 + t475;
t363 = qJD(6) * t441;
t381 = qJD(6) * t291;
t375 = t296 * qJDD(1);
t359 = t288 * t375;
t377 = qJD(1) * qJD(2);
t362 = t293 * t377;
t153 = qJDD(2) * t287 - t288 * t362 + t359;
t238 = t287 * t375;
t351 = qJDD(2) * t288 - t238;
t154 = t287 * t362 + t351;
t55 = t153 * t292 - t154 * t295 + t207 * t382 + t209 * t383;
t56 = t153 * t295 + t154 * t292 - t207 * t383 + t209 * t382;
t17 = -t126 * t381 + t127 * t363 + t291 * t56 + t441 * t55;
t463 = -t17 - t473;
t271 = t293 * qJ(3);
t357 = -pkin(1) - t271;
t317 = -t296 * t431 + t357;
t164 = t317 * qJD(1);
t379 = pkin(3) * t390 + t465;
t174 = -qJD(2) * t431 + t379;
t94 = -t164 * t287 + t174 * t288;
t70 = pkin(4) * t390 - pkin(8) * t209 + t94;
t95 = t164 * t288 + t174 * t287;
t77 = -pkin(8) * t207 + t95;
t33 = -t292 * t77 + t295 * t70;
t28 = pkin(9) * t126 + t33;
t26 = pkin(5) * t250 + t28;
t34 = t292 * t70 + t295 * t77;
t29 = -pkin(9) * t127 + t34;
t361 = t296 * t377;
t376 = t293 * qJDD(1);
t318 = t361 + t376;
t211 = qJDD(5) + t318;
t248 = pkin(7) * t361;
t259 = pkin(7) * t376;
t358 = qJDD(3) + t248 + t259;
t120 = pkin(3) * t318 - qJD(2) * qJD(4) - qJDD(2) * t431 + t358;
t249 = pkin(2) * t362;
t384 = qJD(3) * t293;
t306 = qJD(2) * t338 - qJD(4) * t296 - t384;
t83 = qJD(1) * t306 + qJDD(1) * t317 + t249;
t46 = t120 * t288 - t287 * t83;
t35 = pkin(4) * t318 - pkin(8) * t154 + t46;
t47 = t120 * t287 + t288 * t83;
t41 = -pkin(8) * t153 + t47;
t9 = -qJD(5) * t34 - t292 * t41 + t295 * t35;
t6 = pkin(5) * t211 + pkin(9) * t55 + t9;
t8 = t292 * t35 + t295 * t41 + t382 * t70 - t383 * t77;
t7 = -pkin(9) * t56 + t8;
t1 = t26 * t363 - t29 * t381 + t291 * t6 + t441 * t7;
t281 = pkin(10) + qJ(5);
t269 = qJ(6) + t281;
t256 = sin(t269);
t257 = cos(t269);
t294 = sin(qJ(1));
t297 = cos(qJ(1));
t401 = t293 * t297;
t156 = t256 * t401 + t257 * t294;
t402 = t293 * t294;
t158 = -t256 * t402 + t257 * t297;
t279 = g(3) * t296;
t284 = qJD(2) * qJ(3);
t189 = qJD(4) + t284 + t220;
t137 = pkin(4) * t207 + t189;
t71 = pkin(5) * t127 + t137;
t462 = g(1) * t156 - g(2) * t158 - t256 * t279 - t62 * t71 - t1;
t372 = t441 * t29;
t11 = t26 * t291 + t372;
t2 = -qJD(6) * t11 - t291 * t7 + t441 * t6;
t324 = t212 * t441 - t291 * t335;
t327 = -t212 * t291 - t335 * t441;
t370 = -g(1) * t401 - g(2) * t402 + t279;
t453 = qJD(6) * t327 - t291 * t396 - t397 * t441;
t461 = t1 * t324 + t11 * t453 + t2 * t327 + t370;
t18 = -qJD(6) * t58 - t291 * t55 + t441 * t56;
t460 = t18 * t324 - t453 * t62;
t203 = qJDD(6) + t211;
t459 = -t203 * t324 - t237 * t453;
t258 = pkin(4) * t288 + pkin(3);
t457 = t17 * t327;
t454 = t203 * t327;
t276 = t296 * pkin(2);
t394 = t276 + t271;
t414 = qJ(4) * t296;
t341 = t394 + t414;
t204 = -pkin(1) - t341;
t233 = t443 * t293;
t215 = t288 * t233;
t110 = pkin(4) * t293 + t215 + (pkin(8) * t296 - t204) * t287;
t136 = t204 * t288 + t233 * t287;
t404 = t288 * t296;
t116 = -pkin(8) * t404 + t136;
t54 = t110 * t292 + t116 * t295;
t452 = t291 * t397 - t396 * t441;
t343 = g(1) * t297 + g(2) * t294;
t380 = t258 * t390 + t465;
t267 = sin(t281);
t268 = cos(t281);
t169 = -t267 * t294 + t268 * t401;
t171 = t267 * t297 + t268 * t402;
t451 = -g(1) * t169 - g(2) * t171 + t268 * t279;
t155 = -t256 * t294 + t257 * t401;
t157 = t256 * t297 + t257 * t402;
t450 = -g(1) * t155 - g(2) * t157 + t257 * t279 + t58 * t71 + t2;
t449 = -t127 * t397 + t212 * t56;
t448 = t126 * t396 + t335 * t55;
t447 = -t18 - t472;
t385 = qJD(2) * t296;
t446 = t431 * t385 + (qJD(4) - t189) * t293;
t444 = t212 * t8 - t33 * t396 - t335 * t9 - t34 * t397 + t370;
t442 = pkin(5) * t56;
t440 = pkin(4) * t153;
t438 = g(1) * t294;
t434 = g(2) * t297;
t433 = g(3) * t293;
t270 = t287 * pkin(4);
t289 = -pkin(8) - qJ(4);
t139 = -t222 * t292 + t223 * t295;
t102 = pkin(9) * t335 + t139;
t103 = -pkin(9) * t212 + t140;
t48 = t102 * t441 - t103 * t291;
t427 = qJD(6) * t48 + t291 * t469 - t441 * t468;
t49 = t102 * t291 + t103 * t441;
t426 = -qJD(6) * t49 + t291 * t468 + t441 * t469;
t424 = t212 * t363 - t335 * t381 - t452;
t423 = -qJD(6) * t324 + t452;
t417 = t291 * t29;
t416 = pkin(7) * qJDD(2);
t413 = qJDD(2) * pkin(2);
t412 = t126 * t127;
t411 = t153 * t287;
t410 = t154 * t288;
t280 = -pkin(9) + t289;
t409 = t280 * t296;
t285 = t293 ^ 2;
t299 = qJD(1) ^ 2;
t408 = t285 * t299;
t403 = t289 * t296;
t400 = t293 * t299;
t399 = t294 * t296;
t398 = t296 * t297;
t255 = qJ(3) + t270;
t386 = qJD(2) * t293;
t265 = pkin(2) * t386;
t141 = t265 + t306;
t221 = t443 * t385;
t98 = t141 * t288 + t221 * t287;
t395 = -pkin(5) * t397 + t380;
t234 = t443 * t296;
t393 = pkin(1) * t297 + pkin(7) * t294;
t286 = t296 ^ 2;
t392 = t285 - t286;
t391 = t285 + t286;
t374 = t297 * t270;
t260 = pkin(7) * t375;
t282 = qJDD(2) * qJ(3);
t283 = qJD(2) * qJD(3);
t371 = t260 + t282 + t283;
t192 = pkin(4) * t404 + t234;
t368 = t443 * qJD(2);
t360 = t287 * t376;
t239 = t288 * t376;
t355 = -qJD(2) * pkin(2) + qJD(3);
t53 = t110 * t295 - t116 * t292;
t97 = -t141 * t287 + t221 * t288;
t353 = qJD(1) * t392;
t352 = -t207 + t388;
t350 = pkin(2) * t398 + qJ(3) * t401 + t393;
t349 = -t259 - t370;
t348 = qJD(1) * t368;
t347 = t293 * t361;
t253 = g(1) * t399;
t346 = -g(2) * t398 + t253;
t345 = t391 * qJDD(1) * pkin(7);
t298 = qJD(2) ^ 2;
t344 = pkin(7) * t298 + t434;
t342 = -t434 + t438;
t340 = -t211 * t335 - t250 * t396;
t339 = t287 * t47 + t288 * t46;
t337 = t207 * t287 - t209 * t288;
t225 = t262 + t355;
t232 = -t263 - t284;
t336 = t225 * t296 + t232 * t293;
t334 = pkin(3) * t375 + qJDD(4) + t371;
t332 = t357 - t276;
t331 = -t287 * t408 + t288 * t361 + t239;
t179 = t212 * t296;
t42 = pkin(5) * t293 + pkin(9) * t179 + t53;
t178 = t335 * t296;
t43 = pkin(9) * t178 + t54;
t22 = -t291 * t43 + t42 * t441;
t23 = t291 * t42 + t43 * t441;
t330 = t343 * t296;
t329 = -0.2e1 * pkin(1) * t377 - t416;
t108 = t178 * t291 - t179 * t441;
t199 = t332 * qJD(1);
t323 = t199 * t390 + qJDD(3) - t349;
t78 = qJD(2) * t333 + t97;
t82 = pkin(8) * t288 * t386 + t98;
t24 = t110 * t382 - t116 * t383 + t292 * t78 + t295 * t82;
t322 = (-t287 * t94 + t288 * t95) * t293;
t167 = (-pkin(7) - t258) * t386;
t321 = -qJ(3) * t385 - t384;
t319 = -t211 * t212 + t250 * t397;
t316 = 0.2e1 * qJDD(1) * pkin(1) - t344;
t125 = -t293 * t348 + t334;
t315 = -t125 * t296 + t343;
t314 = -t288 * t408 - t360;
t226 = -pkin(1) - t394;
t312 = t416 + (-qJD(1) * t226 - t199) * qJD(2);
t311 = -t330 - t433;
t310 = t125 + t311;
t25 = -qJD(5) * t54 - t292 * t82 + t295 * t78;
t124 = qJD(1) * t321 + qJDD(1) * t332 + t249;
t187 = t265 + t321;
t309 = qJD(1) * t187 + qJDD(1) * t226 + t124 + t344;
t165 = pkin(7) * t362 - t371;
t181 = t358 - t413;
t307 = qJD(2) * t336 - t165 * t296 + t181 * t293;
t81 = t125 + t440;
t302 = (-g(3) - t348) * t293 - t330 + t334;
t301 = t302 + t440;
t277 = t297 * pkin(7);
t247 = qJ(3) * t398;
t244 = qJ(3) * t399;
t243 = t296 * t400;
t231 = t392 * t299;
t228 = qJDD(2) * t296 - t293 * t298;
t227 = qJDD(2) * t293 + t296 * t298;
t224 = pkin(5) * t267 + t270;
t219 = t293 * t368;
t217 = -qJ(3) * t389 + t266;
t216 = pkin(5) * t268 + t258;
t206 = qJDD(1) * t286 - 0.2e1 * t347;
t205 = qJDD(1) * t285 + 0.2e1 * t347;
t172 = -t267 * t402 + t268 * t297;
t170 = t267 * t401 + t268 * t294;
t161 = pkin(5) * t212 + t255;
t152 = 0.2e1 * t293 * t375 - 0.2e1 * t377 * t392;
t135 = -t204 * t287 + t215;
t123 = -pkin(5) * t178 + t192;
t113 = t193 * t296 - t335 * t386;
t112 = qJD(2) * t320 + qJD(5) * t178;
t107 = -t178 * t441 - t179 * t291;
t76 = -pkin(5) * t113 + t167;
t37 = qJD(6) * t108 + t112 * t291 - t113 * t441;
t36 = -t112 * t441 - t113 * t291 - t178 * t363 - t179 * t381;
t30 = t81 + t442;
t19 = pkin(9) * t113 + t24;
t16 = pkin(5) * t385 - pkin(9) * t112 + t25;
t13 = t28 * t441 - t417;
t12 = -t28 * t291 - t372;
t10 = t26 * t441 - t417;
t4 = -qJD(6) * t23 + t16 * t441 - t19 * t291;
t3 = qJD(6) * t22 + t16 * t291 + t19 * t441;
t5 = [0, 0, 0, 0, 0, qJDD(1), t342, t343, 0, 0, t205, t152, t227, t206, t228, 0, t293 * t329 + t296 * t316 + t253, t329 * t296 + (-t316 - t438) * t293, -t343 + 0.2e1 * t345, -g(1) * (-pkin(1) * t294 + t277) - g(2) * t393 + (pkin(7) ^ 2 * t391 + pkin(1) ^ 2) * qJDD(1), 0, -t227, -t228, t205, t152, t206, t345 + t307 - t343, t293 * t312 + t296 * t309 - t253, t312 * t296 + (-t309 + t438) * t293, pkin(7) * t307 - g(1) * t277 - g(2) * t350 + t124 * t226 + t199 * t187 - t332 * t438 (-t154 * t296 + t209 * t386) * t287 (-t410 + t411) * t296 - t337 * t386 (t154 - t238) * t293 + (t209 * t296 + t287 * t353) * qJD(2) (t153 * t296 - t207 * t386) * t288 (-t153 - t359) * t293 + (-t207 * t296 + t288 * t353) * qJD(2), t205, t234 * t153 - t219 * t207 + (qJD(1) * t135 + t94) * t385 - t315 * t288 + (qJD(1) * t97 + qJDD(1) * t135 - t189 * t387 + t287 * t342 + t46) * t293, t234 * t154 - t219 * t209 + (-qJD(1) * t136 - t95) * t385 + t315 * t287 + (-t98 * qJD(1) - t136 * qJDD(1) + t189 * t388 + t288 * t342 - t47) * t293, -t135 * t154 - t136 * t153 - t207 * t98 - t209 * t97 + t253 + qJD(2) * t322 + (t287 * t46 - t288 * t47 - t434) * t296, t47 * t136 + t95 * t98 + t46 * t135 + t94 * t97 + t125 * t234 - t189 * t219 - g(1) * (pkin(3) * t297 + t277) - g(2) * (qJ(4) * t398 + t350) + (-g(1) * (t332 - t414) - g(2) * pkin(3)) * t294, -t112 * t126 + t179 * t55, -t112 * t127 - t113 * t126 - t178 * t55 + t179 * t56, t112 * t250 - t126 * t385 - t179 * t211 - t293 * t55, -t113 * t127 - t178 * t56, t113 * t250 - t127 * t385 + t178 * t211 - t293 * t56, t211 * t293 + t250 * t385, -g(1) * t172 - g(2) * t170 - t113 * t137 + t127 * t167 - t178 * t81 + t192 * t56 + t211 * t53 + t25 * t250 + t293 * t9 + t33 * t385, g(1) * t171 - g(2) * t169 + t112 * t137 - t126 * t167 - t179 * t81 - t192 * t55 - t211 * t54 - t24 * t250 - t293 * t8 - t34 * t385, -t112 * t33 + t113 * t34 + t126 * t25 - t127 * t24 + t178 * t8 + t179 * t9 + t53 * t55 - t54 * t56 + t346, t8 * t54 + t34 * t24 + t9 * t53 + t33 * t25 + t81 * t192 + t137 * t167 - g(1) * (t258 * t297 + t277) - g(2) * (-t289 * t398 + t293 * t374 + t350) + (-g(1) * (-pkin(4) * t406 + t332 + t403) - g(2) * t258) * t294, -t108 * t17 + t36 * t58, t107 * t17 - t108 * t18 - t36 * t62 + t37 * t58, t108 * t203 - t17 * t293 - t237 * t36 - t385 * t58, t107 * t18 - t37 * t62, -t107 * t203 - t18 * t293 - t237 * t37 + t385 * t62, t203 * t293 + t237 * t385, -g(1) * t158 - g(2) * t156 + t10 * t385 + t107 * t30 + t123 * t18 + t2 * t293 + t203 * t22 + t237 * t4 + t37 * t71 - t62 * t76, g(1) * t157 - g(2) * t155 - t1 * t293 + t108 * t30 - t11 * t385 - t123 * t17 - t203 * t23 - t237 * t3 - t36 * t71 - t58 * t76, -t1 * t107 + t10 * t36 - t108 * t2 - t11 * t37 + t17 * t22 - t18 * t23 + t3 * t62 + t4 * t58 + t346, t1 * t23 + t11 * t3 + t2 * t22 + t10 * t4 + t30 * t123 + t71 * t76 - g(1) * (t216 * t297 + t277) - g(2) * (t224 * t401 - t280 * t398 + t350) + (-g(1) * (-t224 * t293 + t332 + t409) - g(2) * t216) * t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t243, t231, t376, t243, t375, qJDD(2), pkin(1) * t400 + t349, t433 - t260 + (pkin(1) * t299 + t343) * t296, 0, 0, qJDD(2), -t376, -t375, -t243, t231, t243 (-pkin(2) * t293 + t415) * qJDD(1) + ((-t232 - t284) * t293 + (-t225 + t355) * t296) * qJD(1), -t217 * t389 + t323 - 0.2e1 * t413, t260 + 0.2e1 * t282 + 0.2e1 * t283 + (qJD(1) * t217 - g(3)) * t293 + (qJD(1) * t199 - t343) * t296, -t165 * qJ(3) - t232 * qJD(3) - t181 * pkin(2) - t199 * t217 - g(1) * (-pkin(2) * t401 + t247) - g(2) * (-pkin(2) * t402 + t244) - g(3) * t394 - t336 * qJD(1) * pkin(7), -t209 * t367 + t410, -t153 * t288 - t154 * t287 + t337 * t390, -t209 * t389 + t331, t207 * t366 + t411, -t352 * t389 + t314, -t243, -t431 * t239 + qJ(3) * t153 + t379 * t207 + t310 * t287 + (-t118 * t293 - t288 * t446 - t296 * t94) * qJD(1), t431 * t360 + qJ(3) * t154 + t379 * t209 + t310 * t288 + (t119 * t293 + t287 * t446 + t296 * t95) * qJD(1), t118 * t209 + t119 * t207 + (qJD(4) * t209 + t154 * t431 - t390 * t95 - t46) * t288 + (qJD(4) * t207 + t153 * t431 + t390 * t94 - t47) * t287 - t370, t125 * qJ(3) - t95 * t119 - t94 * t118 - g(1) * t247 - g(2) * t244 - g(3) * t341 + t379 * t189 + (-t287 * t95 - t288 * t94) * qJD(4) + (t293 * t343 - t339) * t431, t448, -t126 * t397 + t127 * t396 + t212 * t55 + t335 * t56, t126 * t389 + t340, t449, t127 * t389 + t319, -t250 * t389, t127 * t380 - t137 * t397 + t139 * t211 + t212 * t81 + t250 * t420 + t255 * t56 + t267 * t311 - t33 * t389, -t126 * t380 - t137 * t396 - t140 * t211 - t250 * t421 - t255 * t55 + t268 * t311 - t335 * t81 + t34 * t389, t126 * t420 - t127 * t421 + t139 * t55 - t140 * t56 - t444, t8 * t140 + t9 * t139 + t81 * t255 - g(1) * (t296 * t374 + t247) - g(2) * (t270 * t399 + t244) - g(3) * (t394 - t403) + t421 * t34 + t420 * t33 + (-g(3) * t270 + t343 * (pkin(2) - t289)) * t293 + t380 * t137, t424 * t58 - t457, t17 * t324 - t18 * t327 - t424 * t62 + t453 * t58, -t237 * t424 + t389 * t58 + t454, t460, -t389 * t62 + t459, -t237 * t389, -t10 * t389 + t161 * t18 + t203 * t48 + t237 * t426 + t256 * t311 + t30 * t324 - t395 * t62 + t453 * t71, t11 * t389 - t161 * t17 - t203 * t49 - t237 * t427 + t257 * t311 + t30 * t327 - t395 * t58 - t424 * t71, t10 * t424 + t17 * t48 - t18 * t49 + t426 * t58 + t427 * t62 - t461, t1 * t49 + t2 * t48 + t30 * t161 - g(1) * (t224 * t398 + t247) - g(2) * (t224 * t399 + t244) - g(3) * (t394 - t409) + t395 * t71 + (-g(3) * t224 + t343 * (pkin(2) - t280)) * t293 + t427 * t11 + t426 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t376, qJDD(2) + t243, -t298 - t408, qJD(2) * t232 + t248 + t323 - t413, 0, 0, 0, 0, 0, 0, -qJD(2) * t207 + t331 (-t209 - t364) * qJD(2) + t314, -t411 - t410 + (-t207 * t288 + t209 * t287) * t390, qJD(1) * t322 - qJD(2) * t189 + t339 + t370, 0, 0, 0, 0, 0, 0, -qJD(2) * t127 + t340, qJD(2) * t126 + t319, -t448 - t449, -qJD(2) * t137 + t444, 0, 0, 0, 0, 0, 0, qJD(2) * t62 + t237 * t423 + t454, qJD(2) * t58 + t459, t423 * t58 + t457 - t460, -qJD(2) * t71 + t10 * t423 + t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209 * t390 + t153, t352 * t390 + t351, -t207 ^ 2 - t209 ^ 2, t207 * t95 + t209 * t94 + t302, 0, 0, 0, 0, 0, 0, t56 - t467, -t55 - t466, -t470 - t471, -t126 * t33 + t127 * t34 + t301, 0, 0, 0, 0, 0, 0, t18 - t472, -t17 + t473, -t474 - t475, -t10 * t58 - t11 * t62 + t301 + t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, -t470 + t471, -t55 + t466, t412, -t56 - t467, t211, t126 * t137 + t250 * t34 + t451 + t9, g(1) * t170 - g(2) * t172 + t127 * t137 + t250 * t33 - t267 * t279 - t8, 0, 0, t432, t464, t463, -t432, t447, t203, -t12 * t237 + (-t126 * t62 + t203 * t441 - t237 * t381) * pkin(5) + t450, t13 * t237 + (-t126 * t58 - t203 * t291 - t237 * t363) * pkin(5) + t462, t10 * t62 - t11 * t58 - t12 * t58 - t13 * t62 + (t441 * t17 - t18 * t291 + (-t291 * t58 + t441 * t62) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t291 + t2 * t441 + t71 * t126 + (-t10 * t291 + t11 * t441) * qJD(6) + t451) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t432, t464, t463, -t432, t447, t203, t11 * t237 + t450, t10 * t237 + t462, 0, 0;];
tau_reg  = t5;
