% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 11:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR10_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR10_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:49:45
% EndTime: 2019-05-06 11:50:04
% DurationCPUTime: 7.76s
% Computational Cost: add. (50252->496), mult. (111331->676), div. (0->0), fcn. (72872->10), ass. (0->296)
t379 = -2 * qJD(4);
t274 = sin(qJ(2));
t267 = t274 ^ 2;
t281 = qJD(1) ^ 2;
t262 = t267 * t281;
t280 = qJD(2) ^ 2;
t250 = -t262 - t280;
t278 = cos(qJ(2));
t327 = t274 * t281;
t313 = t278 * t327;
t244 = -qJDD(2) + t313;
t326 = t278 * t244;
t378 = pkin(7) * (-t250 * t274 + t326);
t269 = sin(pkin(10));
t270 = cos(pkin(10));
t321 = qJD(1) * t278;
t227 = qJD(2) * t269 + t270 * t321;
t229 = qJD(2) * t270 - t269 * t321;
t200 = t229 * t227;
t318 = qJD(1) * qJD(2);
t258 = t278 * t318;
t260 = t274 * qJDD(1);
t237 = t260 + t258;
t368 = -t200 + t237;
t377 = t269 * t368;
t376 = t270 * t368;
t272 = sin(qJ(6));
t273 = sin(qJ(5));
t277 = cos(qJ(5));
t195 = t277 * t227 + t229 * t273;
t197 = -t227 * t273 + t229 * t277;
t276 = cos(qJ(6));
t168 = t276 * t195 + t197 * t272;
t170 = -t195 * t272 + t197 * t276;
t123 = t170 * t168;
t230 = qJDD(5) + t237;
t225 = qJDD(6) + t230;
t370 = -t123 + t225;
t375 = t272 * t370;
t172 = t197 * t195;
t369 = -t172 + t230;
t374 = t273 * t369;
t373 = t276 * t370;
t372 = t277 * t369;
t299 = t237 + t258;
t371 = t299 * qJ(3);
t261 = t278 * qJDD(1);
t311 = t274 * t318;
t238 = t261 - t311;
t210 = qJDD(2) * t270 - t238 * t269;
t304 = qJDD(2) * t269 + t270 * t238;
t152 = -t195 * qJD(5) + t277 * t210 - t273 * t304;
t322 = qJD(1) * t274;
t255 = qJD(5) + t322;
t340 = t195 * t255;
t138 = -t152 - t340;
t215 = t227 * t322;
t183 = t210 + t215;
t245 = pkin(3) * t322 - qJD(2) * qJ(4);
t254 = pkin(2) * t311;
t310 = qJD(3) * t322;
t257 = -0.2e1 * t310;
t275 = sin(qJ(1));
t279 = cos(qJ(1));
t309 = t275 * g(1) - t279 * g(2);
t291 = -qJDD(1) * pkin(1) - t309;
t358 = -pkin(2) - qJ(4);
t363 = t278 ^ 2;
t142 = -t245 * t322 + t254 + t257 + (-pkin(3) * t363 - pkin(7)) * t281 + t358 * t238 - t371 + t291;
t330 = t274 * qJ(3);
t360 = pkin(2) * t278;
t300 = -t330 - t360;
t234 = t300 * qJD(1);
t302 = g(1) * t279 + g(2) * t275;
t351 = qJDD(1) * pkin(7);
t222 = -pkin(1) * t281 - t302 + t351;
t329 = t274 * t222;
t289 = -qJDD(2) * pkin(2) - t280 * qJ(3) + t234 * t322 + qJDD(3) + t329;
t161 = t237 * pkin(3) - qJDD(2) * qJ(4) + (-pkin(3) * t318 - qJ(4) * t327 + g(3)) * t278 + t289;
t301 = -t269 * t142 + t270 * t161 + t229 * t379;
t112 = t270 * t142 + t269 * t161 + t227 * t379;
t325 = t363 * t281;
t367 = t326 - (-t280 + t325) * t274;
t239 = t261 - 0.2e1 * t311;
t251 = t280 + t325;
t243 = qJDD(2) + t313;
t339 = t243 * t274;
t365 = pkin(7) * (t251 * t278 + t339) - pkin(1) * t239;
t166 = t168 ^ 2;
t167 = t170 ^ 2;
t193 = t195 ^ 2;
t194 = t197 ^ 2;
t364 = t227 ^ 2;
t226 = t229 ^ 2;
t247 = qJD(6) + t255;
t246 = t247 ^ 2;
t253 = t255 ^ 2;
t362 = 0.2e1 * qJD(3);
t264 = t274 * g(3);
t359 = t278 * g(3);
t95 = t368 * pkin(4) - t183 * pkin(8) + t301;
t211 = pkin(4) * t322 - pkin(8) * t229;
t99 = -t364 * pkin(4) - t304 * pkin(8) - t211 * t322 + t112;
t58 = t273 * t99 - t277 * t95;
t42 = t369 * pkin(5) + t138 * pkin(9) - t58;
t179 = pkin(5) * t255 - pkin(9) * t197;
t305 = t273 * t210 + t277 * t304;
t290 = qJD(5) * t197 + t305;
t59 = t273 * t95 + t277 * t99;
t43 = -t193 * pkin(5) - pkin(9) * t290 - t255 * t179 + t59;
t24 = t272 * t43 - t276 * t42;
t25 = t272 * t42 + t276 * t43;
t13 = -t24 * t276 + t25 * t272;
t357 = t13 * t273;
t356 = t13 * t277;
t35 = t273 * t59 - t277 * t58;
t355 = t269 * t35;
t354 = t270 * t35;
t285 = (qJD(1) * t234 + t222) * t278 - t264 - t280 * pkin(2);
t317 = qJDD(2) * qJ(3);
t157 = t317 + qJDD(4) + t238 * pkin(3) - qJ(4) * t325 + (t362 + t245) * qJD(2) + t285;
t121 = t304 * pkin(4) - t364 * pkin(8) + t229 * t211 + t157;
t72 = pkin(5) * t290 - t193 * pkin(9) + t197 * t179 + t121;
t353 = t272 * t72;
t352 = t276 * t72;
t116 = t123 + t225;
t350 = t116 * t272;
t349 = t116 * t276;
t348 = t121 * t273;
t347 = t121 * t277;
t312 = t229 * t322;
t185 = -t304 + t312;
t150 = -t183 * t270 + t185 * t269;
t346 = t150 * t274;
t159 = t172 + t230;
t345 = t159 * t273;
t344 = t159 * t277;
t343 = t168 * t247;
t188 = t200 + t237;
t342 = t188 * t269;
t341 = t188 * t270;
t338 = t247 * t272;
t337 = t247 * t276;
t334 = t255 * t273;
t333 = t255 * t277;
t332 = t269 * t157;
t331 = t270 * t157;
t328 = t274 * t239;
t241 = t262 + t325;
t323 = (t267 + t363) * t351 + pkin(1) * t241;
t316 = t274 * t123;
t315 = t274 * t172;
t314 = t274 * t200;
t109 = -t168 * qJD(6) + t276 * t152 - t272 * t290;
t14 = t24 * t272 + t276 * t25;
t36 = t273 * t58 + t277 * t59;
t307 = t272 * t152 + t276 * t290;
t207 = t329 + t359;
t208 = t278 * t222 - t264;
t306 = t207 * t274 + t278 * t208;
t120 = -t246 - t166;
t88 = t120 * t272 + t373;
t303 = pkin(5) * t88 - t24;
t70 = t269 * t112 + t270 * t301;
t297 = t270 * t112 - t269 * t301;
t296 = (-t262 + t280) * t278 + t339;
t294 = t109 - t343;
t293 = t152 - t340;
t143 = -t167 - t246;
t97 = t143 * t276 - t350;
t292 = pkin(5) * t97 - t25;
t288 = t278 * t358 - pkin(1) - t330;
t287 = (-qJD(6) + t247) * t170 - t307;
t286 = (-qJD(5) + t255) * t197 - t305;
t221 = t281 * pkin(7) - t291;
t178 = t289 + t359;
t284 = qJD(2) * t362 + t285;
t283 = t238 * pkin(2) + t221 - t254;
t176 = t284 + t317;
t282 = t283 + 0.2e1 * t310;
t242 = t262 - t325;
t236 = t260 + 0.2e1 * t258;
t223 = t274 * t237;
t214 = -t226 - t262;
t213 = -t226 + t262;
t212 = -t262 + t364;
t206 = t274 * t258 + t223;
t205 = (t238 - t311) * t278;
t199 = t236 * t278 + t328;
t198 = -t262 - t364;
t186 = t210 - t215;
t184 = t304 + t312;
t182 = -t226 - t364;
t181 = -t194 + t253;
t180 = t193 - t253;
t177 = -t194 - t253;
t173 = t214 * t270 - t342;
t171 = t194 - t193;
t165 = -t253 - t193;
t162 = t198 * t269 + t376;
t154 = -t167 + t246;
t153 = t166 - t246;
t148 = (-t195 * t277 + t197 * t273) * t255;
t147 = (-t195 * t273 - t197 * t277) * t255;
t140 = -t193 - t194;
t134 = (qJD(5) + t255) * t197 + t305;
t133 = t180 * t277 - t345;
t132 = -t181 * t273 + t372;
t131 = t180 * t273 + t344;
t130 = t181 * t277 + t374;
t129 = t152 * t277 - t197 * t334;
t128 = t152 * t273 + t197 * t333;
t127 = t195 * t333 + t273 * t290;
t126 = t195 * t334 - t277 * t290;
t125 = -t177 * t273 - t344;
t124 = t177 * t277 - t345;
t122 = t167 - t166;
t119 = t165 * t277 - t374;
t118 = t165 * t273 + t372;
t114 = (-t168 * t276 + t170 * t272) * t247;
t113 = (-t168 * t272 - t170 * t276) * t247;
t110 = -t166 - t167;
t108 = -qJD(6) * t170 - t307;
t107 = t153 * t276 - t350;
t106 = -t154 * t272 + t373;
t105 = t153 * t272 + t349;
t104 = t154 * t276 + t375;
t103 = -t138 * t273 + t277 * t286;
t102 = -t134 * t277 - t273 * t293;
t101 = t138 * t277 + t273 * t286;
t100 = -t134 * t273 + t277 * t293;
t98 = -t143 * t272 - t349;
t92 = t124 * t270 + t125 * t269;
t91 = -pkin(8) * t124 + t347;
t90 = -pkin(8) * t118 + t348;
t89 = t120 * t276 - t375;
t85 = t118 * t270 + t119 * t269;
t83 = -t109 - t343;
t79 = (qJD(6) + t247) * t170 + t307;
t78 = t109 * t276 - t170 * t338;
t77 = t109 * t272 + t170 * t337;
t76 = -t108 * t272 + t168 * t337;
t75 = t108 * t276 + t168 * t338;
t74 = -t113 * t273 + t114 * t277;
t73 = t113 * t277 + t114 * t273;
t69 = -pkin(4) * t293 + pkin(8) * t125 + t348;
t68 = -pkin(4) * t134 + pkin(8) * t119 - t347;
t67 = -t105 * t273 + t107 * t277;
t66 = -t104 * t273 + t106 * t277;
t65 = t105 * t277 + t107 * t273;
t64 = t104 * t277 + t106 * t273;
t62 = t101 * t270 + t103 * t269;
t61 = -t273 * t97 + t277 * t98;
t60 = t273 * t98 + t277 * t97;
t56 = -pkin(9) * t97 + t352;
t55 = -t273 * t88 + t277 * t89;
t54 = t273 * t89 + t277 * t88;
t53 = -t272 * t83 + t276 * t287;
t52 = -t272 * t294 - t276 * t79;
t51 = t272 * t287 + t276 * t83;
t50 = -t272 * t79 + t276 * t294;
t49 = pkin(5) * t51;
t48 = -pkin(9) * t88 + t353;
t47 = -t273 * t77 + t277 * t78;
t46 = -t273 * t75 + t277 * t76;
t45 = t273 * t78 + t277 * t77;
t44 = t273 * t76 + t277 * t75;
t40 = -pkin(5) * t294 + pkin(9) * t98 + t353;
t39 = -pkin(5) * t79 + pkin(9) * t89 - t352;
t37 = t269 * t61 + t270 * t60;
t34 = -pkin(4) * t121 + pkin(8) * t36;
t32 = t269 * t55 + t270 * t54;
t31 = -pkin(8) * t101 - t35;
t30 = -t273 * t51 + t277 * t53;
t29 = -t273 * t50 + t277 * t52;
t28 = t273 * t53 + t277 * t51;
t27 = t273 * t52 + t277 * t50;
t26 = -pkin(4) * t140 + pkin(8) * t103 + t36;
t22 = -pkin(8) * t60 - t273 * t40 + t277 * t56;
t20 = t269 * t36 + t354;
t19 = -pkin(8) * t54 - t273 * t39 + t277 * t48;
t18 = -pkin(4) * t294 + pkin(8) * t61 + t273 * t56 + t277 * t40;
t17 = -pkin(4) * t79 + pkin(8) * t55 + t273 * t48 + t277 * t39;
t15 = t269 * t30 + t270 * t28;
t12 = pkin(5) * t13;
t11 = -pkin(5) * t72 + pkin(9) * t14;
t10 = -pkin(9) * t51 - t13;
t9 = -pkin(5) * t110 + pkin(9) * t53 + t14;
t8 = t14 * t277 - t357;
t7 = t14 * t273 + t356;
t6 = -pkin(8) * t28 + t10 * t277 - t273 * t9;
t5 = -pkin(4) * t110 + pkin(8) * t30 + t10 * t273 + t277 * t9;
t3 = t269 * t8 + t270 * t7;
t2 = -pkin(8) * t7 - pkin(9) * t356 - t11 * t273;
t1 = -pkin(4) * t72 + pkin(8) * t8 - pkin(9) * t357 + t11 * t277;
t4 = [0, 0, 0, 0, 0, qJDD(1), t309, t302, 0, 0, t206, t199, t296, t205, -t367, 0, t278 * t221 - t365, -pkin(1) * t236 - t274 * t221 + t378, t306 + t323, pkin(1) * t221 + pkin(7) * t306, 0, -t296, t367, t206, t199, t205, t274 * (qJ(3) * t241 + t289) + (pkin(2) * t241 + t176 + t264) * t278 + t323, t278 * (-pkin(2) * t239 + t257 - t283) + (-t278 * t299 - t328) * qJ(3) + t365, t274 * t282 - t378 + (pkin(1) + t360) * t236 + (t236 + t299) * t330, pkin(7) * (t176 * t278 + t178 * t274) + (pkin(1) - t300) * (t282 + t371), t314 + t278 * (-t210 * t269 - t270 * t312), t274 * (t226 - t364) + t278 * (t184 * t269 - t186 * t270), t274 * t183 + t278 * (-t213 * t270 - t377), -t314 + t278 * (-t215 * t269 + t270 * t304), t274 * t185 + t278 * (-t212 * t269 - t341), t223 + (t227 * t269 + t229 * t270) * t274 * t321, t274 * (pkin(3) * t162 + t301) + t278 * (pkin(3) * t184 + t331) + pkin(7) * (t162 * t274 + t184 * t278) + t288 * (t198 * t270 - t377), t274 * (pkin(3) * t173 - t112) + t278 * (pkin(3) * t186 - t332) + pkin(7) * (t173 * t274 + t186 * t278) + t288 * (-t214 * t269 - t341), pkin(3) * t346 + t278 * (pkin(3) * t182 - t297) + pkin(7) * (t182 * t278 + t346) + t288 * (t183 * t269 + t185 * t270), t288 * t297 + (pkin(3) + pkin(7)) * (t157 * t278 + t274 * t70), t315 + t278 * (-t128 * t270 - t129 * t269), t274 * t171 + t278 * (-t100 * t270 - t102 * t269), -t274 * t138 + t278 * (-t130 * t270 - t132 * t269), -t315 + t278 * (-t126 * t270 - t127 * t269), t274 * t286 + t278 * (-t131 * t270 - t133 * t269), t274 * t230 + t278 * (-t147 * t270 - t148 * t269), t274 * (pkin(3) * t85 + pkin(4) * t118 - t58) + t278 * (pkin(3) * t134 - t269 * t90 - t270 * t68) + pkin(7) * (t134 * t278 + t274 * t85) + t288 * (-t118 * t269 + t119 * t270), t274 * (pkin(3) * t92 + pkin(4) * t124 - t59) + t278 * (pkin(3) * t293 - t269 * t91 - t270 * t69) + pkin(7) * (t274 * t92 + t278 * t293) + t288 * (-t124 * t269 + t125 * t270), t274 * (pkin(3) * t62 + pkin(4) * t101) + t278 * (pkin(3) * t140 - t270 * t26 - t269 * t31) + pkin(7) * (t140 * t278 + t274 * t62) + t288 * (-t101 * t269 + t103 * t270), t274 * (pkin(3) * t20 + pkin(4) * t35) + t278 * (pkin(3) * t121 + pkin(8) * t355 - t270 * t34) + pkin(7) * (t121 * t278 + t20 * t274) + t288 * (t270 * t36 - t355), t316 + t278 * (-t269 * t47 - t270 * t45), t274 * t122 + t278 * (-t269 * t29 - t27 * t270), -t274 * t83 + t278 * (-t269 * t66 - t270 * t64), -t316 + t278 * (-t269 * t46 - t270 * t44), t274 * t287 + t278 * (-t269 * t67 - t270 * t65), t274 * t225 + t278 * (-t269 * t74 - t270 * t73), t274 * (pkin(3) * t32 + pkin(4) * t54 + t303) + t278 * (pkin(3) * t79 - t270 * t17 - t269 * t19) + pkin(7) * (t274 * t32 + t278 * t79) + t288 * (-t269 * t54 + t270 * t55), t274 * (pkin(3) * t37 + pkin(4) * t60 + t292) + t278 * (pkin(3) * t294 - t270 * t18 - t269 * t22) + pkin(7) * (t274 * t37 + t278 * t294) + t288 * (-t269 * t60 + t270 * t61), t274 * (pkin(3) * t15 + pkin(4) * t28 + t49) + t278 * (pkin(3) * t110 - t269 * t6 - t270 * t5) + pkin(7) * (t110 * t278 + t15 * t274) + t288 * (-t269 * t28 + t270 * t30), t274 * (pkin(3) * t3 + pkin(4) * t7 + t12) + t278 * (pkin(3) * t72 - t270 * t1 - t269 * t2) + pkin(7) * (t274 * t3 + t278 * t72) + t288 * (-t269 * t7 + t270 * t8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, t242, t260, t313, t261, qJDD(2), -t207, -t208, 0, 0, qJDD(2), -t260, -t261, -t313, t242, t313, (-pkin(2) * t274 + qJ(3) * t278) * qJDD(1), -pkin(2) * t243 + qJ(3) * t251 + t178, -pkin(2) * t250 + (qJDD(2) - t244) * qJ(3) + t284, -pkin(2) * t178 + qJ(3) * t176, t210 * t270 - t269 * t312, -t184 * t270 - t186 * t269, -t213 * t269 + t376, t215 * t270 + t269 * t304, t212 * t270 - t342, (-t227 * t270 + t229 * t269) * t322, qJ(3) * t184 + t358 * t162 + t332, qJ(3) * t186 + t358 * t173 + t331, qJ(3) * t182 + t358 * t150 - t70, qJ(3) * t157 + t358 * t70, -t128 * t269 + t129 * t270, -t100 * t269 + t102 * t270, -t130 * t269 + t132 * t270, -t126 * t269 + t127 * t270, -t131 * t269 + t133 * t270, -t147 * t269 + t148 * t270, qJ(3) * t134 - t269 * t68 + t270 * t90 + t358 * t85, qJ(3) * t293 - t269 * t69 + t270 * t91 + t358 * t92, qJ(3) * t140 - t269 * t26 + t270 * t31 + t358 * t62, -pkin(8) * t354 + qJ(3) * t121 + t20 * t358 - t269 * t34, -t269 * t45 + t270 * t47, -t269 * t27 + t270 * t29, -t269 * t64 + t270 * t66, -t269 * t44 + t270 * t46, -t269 * t65 + t270 * t67, -t269 * t73 + t270 * t74, qJ(3) * t79 - t269 * t17 + t270 * t19 + t32 * t358, qJ(3) * t294 - t269 * t18 + t270 * t22 + t358 * t37, qJ(3) * t110 + t15 * t358 - t269 * t5 + t270 * t6, qJ(3) * t72 - t269 * t1 + t270 * t2 + t3 * t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t260, t243, t250, t178, 0, 0, 0, 0, 0, 0, t162, t173, t150, t70, 0, 0, 0, 0, 0, 0, t85, t92, t62, t20, 0, 0, 0, 0, 0, 0, t32, t37, t15, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t184, t186, t182, t157, 0, 0, 0, 0, 0, 0, t134, t293, t140, t121, 0, 0, 0, 0, 0, 0, t79, t294, t110, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, t171, -t138, -t172, t286, t230, -t58, -t59, 0, 0, t123, t122, -t83, -t123, t287, t225, t303, t292, t49, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t122, -t83, -t123, t287, t225, -t24, -t25, 0, 0;];
tauJ_reg  = t4;
