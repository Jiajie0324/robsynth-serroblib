% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 04:58
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR10_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 04:57:32
% EndTime: 2019-05-06 04:57:57
% DurationCPUTime: 26.29s
% Computational Cost: add. (320250->427), mult. (995477->690), div. (0->0), fcn. (866430->16), ass. (0->373)
t3044 = sin(pkin(13));
t3045 = sin(pkin(7));
t3048 = cos(pkin(7));
t3046 = sin(pkin(6));
t3047 = cos(pkin(13));
t3049 = cos(pkin(6));
t3054 = sin(qJ(1));
t3059 = cos(qJ(1));
t3037 = t3054 * g(1) - t3059 * g(2);
t3060 = qJD(1) ^ 2;
t3142 = t3046 * t3060;
t3073 = -qJ(2) * t3142 - t3037;
t3156 = pkin(9) * t3044;
t3078 = -pkin(2) * t3047 - t3045 * t3156;
t3125 = -t3049 * g(3) + qJDD(2);
t3144 = t3045 * t3049;
t3040 = t3044 ^ 2;
t3042 = t3047 ^ 2;
t3170 = -t3040 - t3042;
t3063 = ((-pkin(1) + t3078) * qJDD(1) + t3073) * t3046 + (t3044 * t3049 * pkin(2) + (t3046 * t3048 * t3170 - t3047 * t3144) * pkin(9)) * t3142 + t3125;
t3145 = t3044 * t3046;
t3133 = t3045 * t3145;
t3143 = t3046 * t3047;
t3141 = t3047 * t3048;
t3169 = t3046 * t3141 + t3144;
t3064 = (pkin(2) * t3143 * t3145 + (t3049 * t3169 + t3133 * t3145) * pkin(9)) * qJD(1);
t3071 = qJDD(1) * pkin(1) - t3073;
t3068 = t3049 * t3071;
t3066 = (-t3046 * g(3) + t3068) * t3047;
t3038 = -t3059 * g(1) - t3054 * g(2);
t3075 = t3060 * pkin(1) - t3038;
t3135 = qJDD(1) * t3049;
t3134 = pkin(2) * t3135;
t3136 = qJDD(1) * t3046;
t3173 = t3048 * (t3134 + t3066 + ((-pkin(9) * t3048 - qJ(2)) * t3136 + t3075) * t3044 + (-0.2e1 * qJD(2) * t3145 + t3064) * qJD(1)) + t3045 * t3063;
t3126 = t3048 * t3136;
t3172 = t3045 * t3135 + t3047 * t3126;
t3053 = sin(qJ(3));
t3058 = cos(qJ(3));
t3006 = (t3053 * t3144 + (t3044 * t3058 + t3053 * t3141) * t3046) * qJD(1);
t3140 = t3048 * t3049;
t3077 = t3045 * t3143 - t3140;
t3013 = qJD(1) * t3077 - qJD(3);
t3052 = sin(qJ(4));
t3057 = cos(qJ(4));
t2992 = t3006 * t3052 + t3013 * t3057;
t2994 = t3006 * t3057 - t3013 * t3052;
t3051 = sin(qJ(5));
t3056 = cos(qJ(5));
t2961 = t3056 * t2992 + t2994 * t3051;
t2960 = qJD(6) + t2961;
t3171 = qJD(6) + t2960;
t3072 = -qJDD(1) * t3077 + qJDD(3);
t2963 = -t2992 * t3051 + t2994 * t3056;
t3004 = (t3053 * t3145 - t3058 * t3169) * qJD(1);
t3003 = qJD(4) + t3004;
t3000 = qJD(5) + t3003;
t3050 = sin(qJ(6));
t3055 = cos(qJ(6));
t2942 = t2963 * t3050 - t3055 * t3000;
t3168 = t2942 ^ 2;
t2944 = t2963 * t3055 + t3000 * t3050;
t3167 = t2944 ^ 2;
t3166 = t2960 ^ 2;
t3165 = t2961 ^ 2;
t3164 = t2963 ^ 2;
t3163 = t2992 ^ 2;
t3162 = t2994 ^ 2;
t3161 = t3000 ^ 2;
t3160 = t3003 ^ 2;
t3159 = t3004 ^ 2;
t3158 = t3006 ^ 2;
t3157 = t3013 ^ 2;
t3043 = t3049 ^ 2;
t3155 = qJD(1) * qJD(2);
t3153 = t2942 * t2944;
t3152 = t2961 * t2963;
t3151 = t2992 * t2994;
t3150 = t3003 * t2992;
t3149 = t3004 * t3013;
t3148 = t3006 * t3004;
t3147 = t3006 * t3013;
t3041 = t3046 ^ 2;
t3146 = t3041 * t3060;
t3139 = qJD(4) - t3003;
t3138 = qJD(5) - t3000;
t3137 = qJD(6) - t2960;
t3070 = qJ(2) * t3136 - t3075;
t2991 = -g(3) * t3145 + t3044 * t3068 + t3047 * t3070 + 0.2e1 * t3143 * t3155;
t2958 = t3169 * qJDD(1) * pkin(9) + (-t3043 * pkin(2) + (t3078 * t3143 + t3140 * t3156) * t3046) * t3060 + t2991;
t2915 = t3058 * t2958 + t3053 * t3173;
t2980 = pkin(3) * t3004 - pkin(10) * t3006;
t2902 = -pkin(3) * t3157 + pkin(10) * t3072 - t3004 * t2980 + t2915;
t2936 = -t3045 * (-g(3) * t3143 - t3044 * t3070 + t3047 * t3068 - t3126 * t3156 + t3134) + t3048 * t3063 + (0.2e1 * qJD(2) * t3133 - t3045 * t3064) * qJD(1);
t3129 = t3044 * t3136;
t3119 = -t3006 * qJD(3) - t3053 * t3129 + t3058 * t3172;
t2964 = -t3119 - t3147;
t2983 = -t3004 * qJD(3) + t3053 * t3172 + t3058 * t3129;
t3121 = -t2983 - t3149;
t2908 = pkin(3) * t2964 + pkin(10) * t3121 + t2936;
t2867 = t3057 * t2902 + t3052 * t2908;
t3120 = t3052 * t2983 - t3057 * t3072;
t2951 = -qJD(4) * t2994 - t3120;
t2972 = pkin(4) * t3003 - pkin(11) * t2994;
t2853 = -pkin(4) * t3163 + pkin(11) * t2951 - t2972 * t3003 + t2867;
t2866 = -t3052 * t2902 + t3057 * t2908;
t3079 = qJDD(4) - t3119;
t2938 = t3079 - t3151;
t3067 = -t3057 * t2983 - t3052 * t3072;
t2952 = -t2992 * qJD(4) - t3067;
t3065 = (-t2952 - t3150) * pkin(11) + t2938 * pkin(4) + t2866;
t2821 = t3056 * t2853 + t3051 * t3065;
t3130 = t3049 * t3142;
t3127 = t3047 * t3136;
t2820 = -t2853 * t3051 + t3056 * t3065;
t3087 = -t3051 * t2951 - t3056 * t2952;
t2911 = -qJD(5) * t2961 - t3087;
t3124 = t3000 * t2961 - t2911;
t3076 = qJDD(5) + t3079;
t3123 = -t3050 * t2911 + t3055 * t3076;
t3122 = -t3056 * t2951 + t3051 * t2952;
t3117 = t3053 * t2958 - t3058 * t3173;
t2930 = pkin(5) * t2961 - pkin(12) * t2963;
t2814 = -pkin(5) * t3161 + pkin(12) * t3076 - t2961 * t2930 + t2821;
t2901 = -t3072 * pkin(3) - t3157 * pkin(10) + t3006 * t2980 + t3117;
t2880 = -t2951 * pkin(4) - t3163 * pkin(11) + t2994 * t2972 + t2901;
t2892 = (qJD(5) + t3000) * t2963 + t3122;
t2839 = pkin(5) * t2892 + pkin(12) * t3124 + t2880;
t2799 = -t2814 * t3050 + t2839 * t3055;
t2800 = t2814 * t3055 + t2839 * t3050;
t2783 = -t2799 * t3050 + t2800 * t3055;
t2813 = -pkin(5) * t3076 - pkin(12) * t3161 + t2930 * t2963 - t2820;
t2771 = t2783 * t3051 - t2813 * t3056;
t2772 = t2783 * t3056 + t2813 * t3051;
t2760 = t2771 * t3057 + t2772 * t3052;
t2761 = -t2771 * t3052 + t2772 * t3057;
t2782 = t2799 * t3055 + t2800 * t3050;
t3115 = t2761 * t3053 - t2782 * t3058;
t2753 = -t3045 * t2760 + t3048 * t3115;
t2756 = t2761 * t3058 + t2782 * t3053;
t3116 = t2753 * t3047 + t2756 * t3044;
t2797 = t2820 * t3056 + t2821 * t3051;
t2798 = -t2820 * t3051 + t2821 * t3056;
t2780 = t2797 * t3057 + t2798 * t3052;
t2781 = -t2797 * t3052 + t2798 * t3057;
t3112 = t2781 * t3053 - t2880 * t3058;
t2767 = -t3045 * t2780 + t3048 * t3112;
t2775 = t2781 * t3058 + t2880 * t3053;
t3114 = t2767 * t3047 + t2775 * t3044;
t2871 = -t2944 * t3137 + t3123;
t3069 = -t3055 * t2911 - t3050 * t3076;
t2873 = t2942 * t3137 + t3069;
t2843 = t2871 * t3055 - t2873 * t3050;
t2905 = -t3167 - t3168;
t2829 = t2843 * t3051 - t2905 * t3056;
t2830 = t2843 * t3056 + t2905 * t3051;
t2803 = t2829 * t3057 + t2830 * t3052;
t2804 = -t2829 * t3052 + t2830 * t3057;
t2842 = t2871 * t3050 + t2873 * t3055;
t3108 = t2804 * t3053 - t2842 * t3058;
t2777 = -t3045 * t2803 + t3048 * t3108;
t2794 = t2804 * t3058 + t2842 * t3053;
t3113 = t2777 * t3047 + t2794 * t3044;
t3074 = -qJD(5) * t2963 - qJDD(6) - t3122;
t2883 = -t3074 - t3153;
t2910 = -t3166 - t3168;
t2855 = -t2883 * t3050 + t2910 * t3055;
t2870 = t2944 * t3171 - t3123;
t2835 = t2855 * t3051 - t2870 * t3056;
t2836 = t2855 * t3056 + t2870 * t3051;
t2808 = t2835 * t3057 + t2836 * t3052;
t2809 = -t2835 * t3052 + t2836 * t3057;
t2854 = t2883 * t3055 + t2910 * t3050;
t3106 = t2809 * t3053 - t2854 * t3058;
t2785 = -t3045 * t2808 + t3048 * t3106;
t2795 = t2809 * t3058 + t2854 * t3053;
t3111 = t2785 * t3047 + t2795 * t3044;
t2884 = t3074 - t3153;
t2912 = -t3166 - t3167;
t2861 = t2884 * t3055 - t2912 * t3050;
t2872 = -t2942 * t3171 - t3069;
t2837 = t2861 * t3051 - t2872 * t3056;
t2838 = t2861 * t3056 + t2872 * t3051;
t2811 = t2837 * t3057 + t2838 * t3052;
t2812 = -t2837 * t3052 + t2838 * t3057;
t2860 = t2884 * t3050 + t2912 * t3055;
t3105 = t2812 * t3053 - t2860 * t3058;
t2787 = -t3045 * t2811 + t3048 * t3105;
t2796 = t2812 * t3058 + t2860 * t3053;
t3110 = t2787 * t3047 + t2796 * t3044;
t2893 = -t2963 * t3138 - t3122;
t2895 = t2961 * t3138 + t3087;
t2858 = t2893 * t3051 + t2895 * t3056;
t2859 = t2893 * t3056 - t2895 * t3051;
t2831 = t2858 * t3057 + t2859 * t3052;
t2832 = -t2858 * t3052 + t2859 * t3057;
t2913 = -t3164 - t3165;
t3102 = t2832 * t3053 - t2913 * t3058;
t2802 = -t3045 * t2831 + t3048 * t3102;
t2819 = t2832 * t3058 + t2913 * t3053;
t3109 = t2802 * t3047 + t2819 * t3044;
t2840 = t2866 * t3057 + t2867 * t3052;
t2841 = -t2866 * t3052 + t2867 * t3057;
t3101 = t2841 * t3053 - t2901 * t3058;
t2807 = -t3045 * t2840 + t3048 * t3101;
t2828 = t2841 * t3058 + t2901 * t3053;
t3107 = t2807 * t3047 + t2828 * t3044;
t2922 = t3076 - t3152;
t2929 = -t3161 - t3165;
t2889 = t2922 * t3056 + t2929 * t3051;
t2890 = -t2922 * t3051 + t2929 * t3056;
t2856 = t2889 * t3057 + t2890 * t3052;
t2857 = -t2889 * t3052 + t2890 * t3057;
t3100 = t2857 * t3053 - t2892 * t3058;
t2818 = -t3045 * t2856 + t3048 * t3100;
t2845 = t2857 * t3058 + t2892 * t3053;
t3104 = t2818 * t3047 + t2845 * t3044;
t2923 = -t3076 - t3152;
t2937 = -t3161 - t3164;
t2898 = t2923 * t3051 + t2937 * t3056;
t2899 = t2923 * t3056 - t2937 * t3051;
t2864 = t2898 * t3057 + t2899 * t3052;
t2865 = -t2898 * t3052 + t2899 * t3057;
t3098 = t2865 * t3053 + t3058 * t3124;
t2825 = -t3045 * t2864 + t3048 * t3098;
t2847 = t2865 * t3058 - t3053 * t3124;
t3103 = t2825 * t3047 + t2847 * t3044;
t2932 = -t2994 * t3139 - t3120;
t2934 = t2992 * t3139 + t3067;
t2903 = t2932 * t3052 + t2934 * t3057;
t2904 = t2932 * t3057 - t2934 * t3052;
t2941 = -t3162 - t3163;
t3094 = t2904 * t3053 - t2941 * t3058;
t2863 = -t3045 * t2903 + t3048 * t3094;
t2888 = t2904 * t3058 + t2941 * t3053;
t3099 = t2863 * t3047 + t2888 * t3044;
t3093 = t2915 * t3053 - t3058 * t3117;
t2869 = -t3045 * t2936 + t3048 * t3093;
t2887 = t2915 * t3058 + t3053 * t3117;
t3097 = t2869 * t3047 + t2887 * t3044;
t2953 = -t3160 - t3163;
t2918 = t2938 * t3057 + t2953 * t3052;
t2919 = -t2938 * t3052 + t2953 * t3057;
t2931 = (qJD(4) + t3003) * t2994 + t3120;
t3091 = t2919 * t3053 - t2931 * t3058;
t2877 = -t3045 * t2918 + t3048 * t3091;
t2896 = t2919 * t3058 + t2931 * t3053;
t3096 = t2877 * t3047 + t2896 * t3044;
t2939 = -t3079 - t3151;
t2957 = -t3160 - t3162;
t2920 = t2939 * t3052 + t2957 * t3057;
t2921 = t2939 * t3057 - t2957 * t3052;
t2933 = t2952 - t3150;
t3090 = t2921 * t3053 - t2933 * t3058;
t2879 = -t3045 * t2920 + t3048 * t3090;
t2897 = t2921 * t3058 + t2933 * t3053;
t3095 = t2879 * t3047 + t2897 * t3044;
t2971 = -t3158 - t3159;
t2965 = t3119 - t3147;
t2967 = -t2983 + t3149;
t3086 = t2965 * t3053 + t2967 * t3058;
t2917 = -t3045 * t2971 + t3048 * t3086;
t2935 = t2965 * t3058 - t2967 * t3053;
t3092 = t2917 * t3047 + t2935 * t3044;
t2974 = -t3157 - t3159;
t2976 = t3072 - t3148;
t3085 = t2974 * t3053 + t2976 * t3058;
t2925 = -t3045 * t2964 + t3048 * t3085;
t2940 = t2974 * t3058 - t2976 * t3053;
t3089 = t2925 * t3047 + t2940 * t3044;
t2975 = -t3072 - t3148;
t2978 = -t3157 - t3158;
t3084 = t2975 * t3053 + t2978 * t3058;
t2927 = t3045 * t3121 + t3048 * t3084;
t2945 = t2975 * t3058 - t2978 * t3053;
t3088 = t2927 * t3047 + t2945 * t3044;
t2990 = t3066 + ((-qJ(2) * qJDD(1) - 0.2e1 * t3155) * t3046 + t3075) * t3044;
t3083 = t2990 * t3047 + t2991 * t3044;
t3028 = t3047 * t3130;
t3015 = t3028 - t3129;
t3027 = t3044 * t3130;
t3016 = t3027 + t3127;
t3082 = t3015 * t3047 + t3016 * t3044;
t3026 = t3047 * t3044 * t3146;
t3018 = t3026 + t3135;
t3022 = (-t3041 * t3042 - t3043) * t3060;
t3081 = t3018 * t3047 + t3022 * t3044;
t3019 = t3026 - t3135;
t3021 = (-t3040 * t3041 - t3043) * t3060;
t3080 = t3019 * t3044 + t3021 * t3047;
t3035 = -qJDD(1) * t3054 - t3059 * t3060;
t3034 = qJDD(1) * t3059 - t3054 * t3060;
t3020 = t3170 * t3146;
t3017 = t3027 - t3127;
t3014 = t3028 + t3129;
t3007 = -t3046 * t3071 + t3125;
t2999 = t3019 * t3047 - t3021 * t3044;
t2998 = -t3018 * t3044 + t3022 * t3047;
t2995 = -t3015 * t3044 + t3016 * t3047;
t2987 = -t3046 * t3014 + t3049 * t3080;
t2986 = -t3046 * t3017 + t3049 * t3081;
t2985 = t3049 * t3014 + t3046 * t3080;
t2984 = t3049 * t3017 + t3046 * t3081;
t2982 = -t3046 * t3020 + t3049 * t3082;
t2981 = t3049 * t3020 + t3046 * t3082;
t2959 = -t2990 * t3044 + t2991 * t3047;
t2947 = -t3046 * t3007 + t3049 * t3083;
t2946 = t3049 * t3007 + t3046 * t3083;
t2926 = t3045 * t3084 - t3048 * t3121;
t2924 = t3048 * t2964 + t3045 * t3085;
t2916 = t3048 * t2971 + t3045 * t3086;
t2909 = -t2927 * t3044 + t2945 * t3047;
t2906 = -t2925 * t3044 + t2940 * t3047;
t2891 = -t2917 * t3044 + t2935 * t3047;
t2886 = -t3046 * t2926 + t3049 * t3088;
t2885 = t3049 * t2926 + t3046 * t3088;
t2882 = -t3046 * t2924 + t3049 * t3089;
t2881 = t3049 * t2924 + t3046 * t3089;
t2878 = t3048 * t2920 + t3045 * t3090;
t2876 = t3048 * t2918 + t3045 * t3091;
t2875 = -t3046 * t2916 + t3049 * t3092;
t2874 = t3049 * t2916 + t3046 * t3092;
t2868 = t3048 * t2936 + t3045 * t3093;
t2862 = t3048 * t2903 + t3045 * t3094;
t2849 = -t2879 * t3044 + t2897 * t3047;
t2848 = -t2877 * t3044 + t2896 * t3047;
t2846 = -t2869 * t3044 + t2887 * t3047;
t2844 = -t2863 * t3044 + t2888 * t3047;
t2834 = -t3046 * t2878 + t3049 * t3095;
t2833 = t3049 * t2878 + t3046 * t3095;
t2827 = -t3046 * t2876 + t3049 * t3096;
t2826 = t3049 * t2876 + t3046 * t3096;
t2824 = t3048 * t2864 + t3045 * t3098;
t2823 = -t3046 * t2868 + t3049 * t3097;
t2822 = t3049 * t2868 + t3046 * t3097;
t2817 = t3048 * t2856 + t3045 * t3100;
t2816 = -t3046 * t2862 + t3049 * t3099;
t2815 = t3049 * t2862 + t3046 * t3099;
t2810 = -t2825 * t3044 + t2847 * t3047;
t2806 = t3048 * t2840 + t3045 * t3101;
t2805 = -t2818 * t3044 + t2845 * t3047;
t2801 = t3048 * t2831 + t3045 * t3102;
t2793 = -t2807 * t3044 + t2828 * t3047;
t2792 = -t3046 * t2824 + t3049 * t3103;
t2791 = t3049 * t2824 + t3046 * t3103;
t2790 = -t3046 * t2817 + t3049 * t3104;
t2789 = t3049 * t2817 + t3046 * t3104;
t2788 = -t2802 * t3044 + t2819 * t3047;
t2786 = t3048 * t2811 + t3045 * t3105;
t2784 = t3048 * t2808 + t3045 * t3106;
t2779 = -t3046 * t2806 + t3049 * t3107;
t2778 = t3049 * t2806 + t3046 * t3107;
t2776 = t3048 * t2803 + t3045 * t3108;
t2774 = -t3046 * t2801 + t3049 * t3109;
t2773 = t3049 * t2801 + t3046 * t3109;
t2770 = -t2787 * t3044 + t2796 * t3047;
t2769 = -t2785 * t3044 + t2795 * t3047;
t2768 = -t2777 * t3044 + t2794 * t3047;
t2766 = t3048 * t2780 + t3045 * t3112;
t2765 = -t3046 * t2786 + t3049 * t3110;
t2764 = t3049 * t2786 + t3046 * t3110;
t2763 = -t3046 * t2784 + t3049 * t3111;
t2762 = t3049 * t2784 + t3046 * t3111;
t2759 = -t3046 * t2776 + t3049 * t3113;
t2758 = t3049 * t2776 + t3046 * t3113;
t2757 = -t2767 * t3044 + t2775 * t3047;
t2755 = -t3046 * t2766 + t3049 * t3114;
t2754 = t3049 * t2766 + t3046 * t3114;
t2752 = t3048 * t2760 + t3045 * t3115;
t2751 = -t2753 * t3044 + t2756 * t3047;
t2750 = -t3046 * t2752 + t3049 * t3116;
t2749 = t3049 * t2752 + t3046 * t3116;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3035, -t3034, 0, -t3037 * t3054 + t3038 * t3059, 0, 0, 0, 0, 0, 0, -t2986 * t3054 + t2998 * t3059, -t2987 * t3054 + t2999 * t3059, -t2982 * t3054 + t2995 * t3059, -t2947 * t3054 + t2959 * t3059, 0, 0, 0, 0, 0, 0, -t2882 * t3054 + t2906 * t3059, -t2886 * t3054 + t2909 * t3059, -t2875 * t3054 + t2891 * t3059, -t2823 * t3054 + t2846 * t3059, 0, 0, 0, 0, 0, 0, -t2827 * t3054 + t2848 * t3059, -t2834 * t3054 + t2849 * t3059, -t2816 * t3054 + t2844 * t3059, -t2779 * t3054 + t2793 * t3059, 0, 0, 0, 0, 0, 0, -t2790 * t3054 + t2805 * t3059, -t2792 * t3054 + t2810 * t3059, -t2774 * t3054 + t2788 * t3059, -t2755 * t3054 + t2757 * t3059, 0, 0, 0, 0, 0, 0, -t2763 * t3054 + t2769 * t3059, -t2765 * t3054 + t2770 * t3059, -t2759 * t3054 + t2768 * t3059, -t2750 * t3054 + t2751 * t3059; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3034, t3035, 0, t3037 * t3059 + t3038 * t3054, 0, 0, 0, 0, 0, 0, t2986 * t3059 + t2998 * t3054, t2987 * t3059 + t2999 * t3054, t2982 * t3059 + t2995 * t3054, t2947 * t3059 + t2959 * t3054, 0, 0, 0, 0, 0, 0, t2882 * t3059 + t2906 * t3054, t2886 * t3059 + t2909 * t3054, t2875 * t3059 + t2891 * t3054, t2823 * t3059 + t2846 * t3054, 0, 0, 0, 0, 0, 0, t2827 * t3059 + t2848 * t3054, t2834 * t3059 + t2849 * t3054, t2816 * t3059 + t2844 * t3054, t2779 * t3059 + t2793 * t3054, 0, 0, 0, 0, 0, 0, t2790 * t3059 + t2805 * t3054, t2792 * t3059 + t2810 * t3054, t2774 * t3059 + t2788 * t3054, t2755 * t3059 + t2757 * t3054, 0, 0, 0, 0, 0, 0, t2763 * t3059 + t2769 * t3054, t2765 * t3059 + t2770 * t3054, t2759 * t3059 + t2768 * t3054, t2750 * t3059 + t2751 * t3054; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2984, t2985, t2981, t2946, 0, 0, 0, 0, 0, 0, t2881, t2885, t2874, t2822, 0, 0, 0, 0, 0, 0, t2826, t2833, t2815, t2778, 0, 0, 0, 0, 0, 0, t2789, t2791, t2773, t2754, 0, 0, 0, 0, 0, 0, t2762, t2764, t2758, t2749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3060, -qJDD(1), 0, t3038, 0, 0, 0, 0, 0, 0, t2998, t2999, t2995, t2959, 0, 0, 0, 0, 0, 0, t2906, t2909, t2891, t2846, 0, 0, 0, 0, 0, 0, t2848, t2849, t2844, t2793, 0, 0, 0, 0, 0, 0, t2805, t2810, t2788, t2757, 0, 0, 0, 0, 0, 0, t2769, t2770, t2768, t2751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3060, 0, t3037, 0, 0, 0, 0, 0, 0, t2986, t2987, t2982, t2947, 0, 0, 0, 0, 0, 0, t2882, t2886, t2875, t2823, 0, 0, 0, 0, 0, 0, t2827, t2834, t2816, t2779, 0, 0, 0, 0, 0, 0, t2790, t2792, t2774, t2755, 0, 0, 0, 0, 0, 0, t2763, t2765, t2759, t2750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2984, t2985, t2981, t2946, 0, 0, 0, 0, 0, 0, t2881, t2885, t2874, t2822, 0, 0, 0, 0, 0, 0, t2826, t2833, t2815, t2778, 0, 0, 0, 0, 0, 0, t2789, t2791, t2773, t2754, 0, 0, 0, 0, 0, 0, t2762, t2764, t2758, t2749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3022, t3019, t3016, t2991, 0, 0, 0, 0, 0, 0, t2940, t2945, t2935, t2887, 0, 0, 0, 0, 0, 0, t2896, t2897, t2888, t2828, 0, 0, 0, 0, 0, 0, t2845, t2847, t2819, t2775, 0, 0, 0, 0, 0, 0, t2795, t2796, t2794, t2756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3018, t3021, t3015, t2990, 0, 0, 0, 0, 0, 0, t2925, t2927, t2917, t2869, 0, 0, 0, 0, 0, 0, t2877, t2879, t2863, t2807, 0, 0, 0, 0, 0, 0, t2818, t2825, t2802, t2767, 0, 0, 0, 0, 0, 0, t2785, t2787, t2777, t2753; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3017, t3014, t3020, t3007, 0, 0, 0, 0, 0, 0, t2924, t2926, t2916, t2868, 0, 0, 0, 0, 0, 0, t2876, t2878, t2862, t2806, 0, 0, 0, 0, 0, 0, t2817, t2824, t2801, t2766, 0, 0, 0, 0, 0, 0, t2784, t2786, t2776, t2752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2974, t2975, t2965, t2915, 0, 0, 0, 0, 0, 0, t2919, t2921, t2904, t2841, 0, 0, 0, 0, 0, 0, t2857, t2865, t2832, t2781, 0, 0, 0, 0, 0, 0, t2809, t2812, t2804, t2761; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2976, t2978, t2967, -t3117, 0, 0, 0, 0, 0, 0, -t2931, -t2933, -t2941, -t2901, 0, 0, 0, 0, 0, 0, -t2892, t3124, -t2913, -t2880, 0, 0, 0, 0, 0, 0, -t2854, -t2860, -t2842, -t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2964, -t3121, t2971, t2936, 0, 0, 0, 0, 0, 0, t2918, t2920, t2903, t2840, 0, 0, 0, 0, 0, 0, t2856, t2864, t2831, t2780, 0, 0, 0, 0, 0, 0, t2808, t2811, t2803, t2760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2953, t2939, t2932, t2867, 0, 0, 0, 0, 0, 0, t2890, t2899, t2859, t2798, 0, 0, 0, 0, 0, 0, t2836, t2838, t2830, t2772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2938, t2957, t2934, t2866, 0, 0, 0, 0, 0, 0, t2889, t2898, t2858, t2797, 0, 0, 0, 0, 0, 0, t2835, t2837, t2829, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2931, t2933, t2941, t2901, 0, 0, 0, 0, 0, 0, t2892, -t3124, t2913, t2880, 0, 0, 0, 0, 0, 0, t2854, t2860, t2842, t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2929, t2923, t2893, t2821, 0, 0, 0, 0, 0, 0, t2855, t2861, t2843, t2783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2922, t2937, t2895, t2820, 0, 0, 0, 0, 0, 0, -t2870, -t2872, -t2905, -t2813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2892, -t3124, t2913, t2880, 0, 0, 0, 0, 0, 0, t2854, t2860, t2842, t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2910, t2884, t2871, t2800; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2883, t2912, t2873, t2799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2870, t2872, t2905, t2813;];
f_new_reg  = t1;
