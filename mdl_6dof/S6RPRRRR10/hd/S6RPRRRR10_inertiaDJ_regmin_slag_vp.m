% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR10_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR10_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR10_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR10_inertiaDJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:34:09
% EndTime: 2019-03-09 07:34:23
% DurationCPUTime: 4.54s
% Computational Cost: add. (10613->357), mult. (30871->647), div. (0->0), fcn. (33910->14), ass. (0->189)
t152 = sin(pkin(13));
t154 = sin(pkin(6));
t155 = cos(pkin(13));
t160 = sin(qJ(3));
t164 = cos(qJ(3));
t153 = sin(pkin(7));
t240 = cos(pkin(6));
t194 = t240 * t153;
t156 = cos(pkin(7));
t227 = t156 * t164;
t259 = (-t152 * t160 + t155 * t227) * t154 + t164 * t194;
t158 = sin(qJ(5));
t162 = cos(qJ(5));
t159 = sin(qJ(4));
t163 = cos(qJ(4));
t228 = t155 * t160;
t103 = t160 * t194 + (t152 * t164 + t156 * t228) * t154;
t205 = pkin(1) * t240;
t142 = t155 * t205;
t233 = t152 * t154;
t104 = t240 * pkin(2) + t142 + (-pkin(9) * t156 - qJ(2)) * t233;
t114 = (-pkin(9) * t152 * t153 - pkin(2) * t155 - pkin(1)) * t154;
t74 = -t104 * t153 + t156 * t114;
t53 = -pkin(3) * t259 - pkin(10) * t103 + t74;
t229 = t154 * t155;
t117 = t153 * t229 - t156 * t240;
t239 = t104 * t156;
t181 = t114 * t153 + t239;
t224 = qJ(2) * t229 + t152 * t205;
t97 = (t156 * t229 + t194) * pkin(9) + t224;
t168 = t181 * t160 + t164 * t97;
t56 = -t117 * pkin(10) + t168;
t195 = -t159 * t56 + t163 * t53;
t249 = pkin(4) * t259;
t81 = t103 * t163 - t117 * t159;
t32 = -pkin(11) * t81 + t195 - t249;
t246 = t159 * t53 + t163 * t56;
t80 = t103 * t159 + t117 * t163;
t36 = -pkin(11) * t80 + t246;
t185 = -t158 * t36 + t162 * t32;
t14 = pkin(5) * t259 - t185;
t161 = cos(qJ(6));
t157 = sin(qJ(6));
t214 = qJD(6) * t157;
t35 = t162 * t36;
t184 = t158 * t32 + t35;
t222 = qJD(2) * t154;
t203 = t152 * t222;
t188 = t156 * t203;
t220 = qJD(3) * t164;
t199 = t153 * t220;
t202 = t155 * t222;
t48 = -t114 * t199 - t164 * t202 - t220 * t239 + (qJD(3) * t97 + t188) * t160;
t189 = t153 * t203;
t94 = t259 * qJD(3);
t95 = t103 * qJD(3);
t68 = pkin(3) * t95 - pkin(10) * t94 + t189;
t25 = -t246 * qJD(4) + t159 * t48 + t163 * t68;
t64 = -t80 * qJD(4) + t94 * t163;
t19 = t95 * pkin(4) - t64 * pkin(11) + t25;
t218 = qJD(4) * t163;
t219 = qJD(4) * t159;
t24 = -t159 * t68 + t163 * t48 - t53 * t218 + t56 * t219;
t63 = t103 * t218 - t117 * t219 + t94 * t159;
t21 = -pkin(11) * t63 - t24;
t196 = t158 * t21 - t162 * t19;
t7 = -t184 * qJD(5) - t196;
t5 = -t95 * pkin(5) - t7;
t197 = t14 * t214 - t5 * t161;
t57 = t158 * t81 + t162 * t80;
t33 = -t57 * qJD(5) - t158 * t63 + t162 * t64;
t58 = -t158 * t80 + t162 * t81;
t34 = t58 * qJD(5) + t158 * t64 + t162 * t63;
t257 = t34 * pkin(5) - t33 * pkin(12);
t151 = t161 ^ 2;
t223 = t157 ^ 2 - t151;
t192 = t223 * qJD(6);
t256 = qJD(4) + qJD(5);
t255 = 0.2e1 * t95;
t254 = pkin(10) + pkin(11);
t251 = t63 * pkin(4);
t148 = qJD(6) * t161;
t250 = t14 * t148 + t5 * t157;
t248 = pkin(4) * t162;
t245 = pkin(4) * qJD(5);
t244 = t162 * t57;
t183 = -t157 * t58 - t161 * t259;
t22 = t183 * qJD(6) + t95 * t157 + t161 * t33;
t243 = t22 * t157;
t242 = t22 * t161;
t135 = t254 * t159;
t136 = t254 * t163;
t112 = t135 * t162 + t136 * t158;
t113 = -t135 * t158 + t136 * t162;
t204 = qJD(4) * t254;
t190 = t163 * t204;
t191 = t159 * t204;
t79 = t113 * qJD(5) - t158 * t191 + t162 * t190;
t241 = t112 * t148 + t79 * t157;
t126 = t158 * t159 - t162 * t163;
t108 = t256 * t126;
t238 = t108 * t157;
t237 = t108 * t161;
t127 = t158 * t163 + t159 * t162;
t236 = t127 * t108;
t235 = t127 * t157;
t234 = t127 * t161;
t231 = t153 * t160;
t230 = t153 * t164;
t226 = t157 * t161;
t146 = -pkin(5) - t248;
t216 = qJD(5) * t158;
t209 = pkin(4) * t216;
t225 = t146 * t148 + t157 * t209;
t221 = qJD(3) * t160;
t217 = qJD(4) * t164;
t215 = qJD(5) * t162;
t213 = -0.2e1 * pkin(3) * qJD(4);
t212 = pkin(4) * t219;
t211 = pkin(5) * t214;
t210 = pkin(5) * t148;
t208 = pkin(4) * t215;
t207 = t159 * t231;
t147 = -pkin(4) * t163 - pkin(3);
t201 = t259 * t219;
t200 = t153 * t221;
t198 = t157 * t148;
t193 = -0.4e1 * t127 * t226;
t15 = -pkin(12) * t259 + t184;
t55 = t117 * pkin(3) + t160 * t97 - t181 * t164;
t40 = t80 * pkin(4) + t55;
t29 = t57 * pkin(5) - t58 * pkin(12) + t40;
t10 = t15 * t161 + t157 * t29;
t44 = -t157 * t259 + t161 * t58;
t186 = -t157 * t44 + t161 * t183;
t98 = pkin(5) * t126 - pkin(12) * t127 + t147;
t73 = t113 * t161 + t157 * t98;
t182 = -0.2e1 * t240 * t222;
t118 = t156 * t163 - t207;
t119 = t156 * t159 + t163 * t231;
t87 = t118 * t158 + t119 * t162;
t145 = pkin(4) * t158 + pkin(12);
t180 = t126 * t145 - t127 * t146;
t179 = t146 * t214 - t161 * t209;
t27 = t57 * t148 + t157 * t34;
t178 = -t161 * t34 + t57 * t214;
t110 = qJD(4) * t207 - t156 * t218 - t163 * t199;
t166 = qJD(4) * t119 + t159 * t199;
t61 = t87 * qJD(5) - t158 * t110 + t162 * t166;
t86 = -t118 * t162 + t119 * t158;
t45 = t86 * t148 + t157 * t61;
t46 = -t161 * t61 + t86 * t214;
t177 = t157 * t87 + t161 * t230;
t176 = t157 * t230 - t161 * t87;
t175 = t159 * t95 - t218 * t259;
t174 = -t163 * t95 - t201;
t6 = -t158 * t19 - t162 * t21 - t32 * t215 + t36 * t216;
t173 = t127 * t148 - t238;
t172 = t127 * t214 + t237;
t109 = t256 * t127;
t171 = -t109 * t161 + t126 * t214;
t170 = pkin(5) * t109 + pkin(12) * t108 + t212;
t169 = -pkin(12) * t95 + t6;
t167 = t168 * qJD(3);
t165 = -t108 * t146 - t109 * t145 + (-t126 * t162 + t127 * t158) * t245;
t49 = (t152 * t227 + t228) * t222 + t167;
t37 = t49 + t251;
t138 = 0.2e1 * t198;
t125 = -0.2e1 * t192;
t124 = t127 ^ 2;
t106 = t112 * t214;
t85 = t109 * t157 + t126 * t148;
t78 = t135 * t215 + t136 * t216 + t158 * t190 + t162 * t191;
t72 = -t113 * t157 + t161 * t98;
t71 = t259 * t255;
t70 = -t108 * t226 - t127 * t192;
t67 = qJD(6) * t193 + t223 * t108;
t60 = t162 * t110 - t118 * t215 + t119 * t216 + t158 * t166;
t42 = qJD(6) * t176 + t157 * t60 + t161 * t200;
t41 = qJD(6) * t177 - t157 * t200 + t161 * t60;
t39 = -t73 * qJD(6) + t157 * t78 + t161 * t170;
t38 = t113 * t214 - t98 * t148 - t157 * t170 + t161 * t78;
t23 = qJD(6) * t44 + t157 * t33 - t95 * t161;
t16 = t44 * t148 + t243;
t9 = -t15 * t157 + t161 * t29;
t8 = t186 * qJD(6) - t157 * t23 + t242;
t2 = -t10 * qJD(6) + t157 * t169 + (t160 * t202 + t164 * t188 + t167 + t251 + t257) * t161;
t1 = t15 * t214 - t157 * (t37 + t257) - t29 * t148 + t161 * t169;
t3 = [0, 0, 0, t152 * t182, t155 * t182, 0.2e1 * (t152 ^ 2 + t155 ^ 2) * t154 ^ 2 * qJD(2), 0.2e1 * (t224 * t155 + (qJ(2) * t233 - t142) * t152) * t222, 0.2e1 * t103 * t94, -0.2e1 * t103 * t95 + 0.2e1 * t259 * t94, -0.2e1 * t94 * t117, t117 * t255, 0, 0.2e1 * t117 * t49 - 0.2e1 * t189 * t259 + 0.2e1 * t74 * t95, 0.2e1 * t103 * t189 - 0.2e1 * t117 * t48 + 0.2e1 * t74 * t94, 0.2e1 * t81 * t64, -0.2e1 * t63 * t81 - 0.2e1 * t64 * t80, -0.2e1 * t259 * t64 + 0.2e1 * t81 * t95, 0.2e1 * t259 * t63 - 0.2e1 * t80 * t95, -t71, 0.2e1 * t195 * t95 - 0.2e1 * t25 * t259 + 0.2e1 * t49 * t80 + 0.2e1 * t55 * t63, -0.2e1 * t24 * t259 - 0.2e1 * t246 * t95 + 0.2e1 * t49 * t81 + 0.2e1 * t55 * t64, 0.2e1 * t58 * t33, -0.2e1 * t33 * t57 - 0.2e1 * t34 * t58, -0.2e1 * t259 * t33 + 0.2e1 * t58 * t95, 0.2e1 * t259 * t34 - 0.2e1 * t57 * t95, -t71, 0.2e1 * t185 * t95 - 0.2e1 * t259 * t7 + 0.2e1 * t40 * t34 + 0.2e1 * t37 * t57, -0.2e1 * t184 * t95 - 0.2e1 * t259 * t6 + 0.2e1 * t40 * t33 + 0.2e1 * t37 * t58, 0.2e1 * t44 * t22, 0.2e1 * t183 * t22 - 0.2e1 * t23 * t44, 0.2e1 * t22 * t57 + 0.2e1 * t34 * t44, 0.2e1 * t183 * t34 - 0.2e1 * t23 * t57, 0.2e1 * t57 * t34, 0.2e1 * t14 * t23 - 0.2e1 * t183 * t5 + 0.2e1 * t2 * t57 + 0.2e1 * t34 * t9, 0.2e1 * t1 * t57 - 0.2e1 * t10 * t34 + 0.2e1 * t14 * t22 + 0.2e1 * t44 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117 * t200 + t156 * t95, t117 * t199 + t156 * t94, 0, 0, 0, 0, 0, t156 * t201 + t118 * t95 + (-(-t159 * t220 - t160 * t218) * t259 + t80 * t221 - t164 * t63) * t153, -t110 * t259 - t119 * t95 + (-t164 * t64 + t81 * t221) * t153, 0, 0, 0, 0, 0, t61 * t259 - t86 * t95 + (-t164 * t34 + t57 * t221) * t153, -t60 * t259 - t87 * t95 + (-t164 * t33 + t58 * t221) * t153, 0, 0, 0, 0, 0, -t177 * t34 - t183 * t61 + t23 * t86 + t42 * t57, t176 * t34 + t22 * t86 + t41 * t57 + t44 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t95, 0, -t49, t48, t159 * t64 + t81 * t218, -t159 * t63 + t64 * t163 + (-t159 * t81 - t163 * t80) * qJD(4), t175, -t174, 0, -pkin(3) * t63 - pkin(10) * t175 - t49 * t163 + t55 * t219, -pkin(3) * t64 + pkin(10) * t174 + t49 * t159 + t55 * t218, -t108 * t58 + t127 * t33, t108 * t57 - t109 * t58 - t126 * t33 - t127 * t34, t108 * t259 + t127 * t95, t109 * t259 - t126 * t95, 0, t109 * t40 - t112 * t95 + t126 * t37 + t147 * t34 + t57 * t212 + t259 * t79, -t108 * t40 - t113 * t95 + t127 * t37 + t147 * t33 + t58 * t212 - t259 * t78, -t44 * t237 + (-t214 * t44 + t242) * t127, -t186 * t108 + (-t243 - t161 * t23 + (-t157 * t183 - t161 * t44) * qJD(6)) * t127, t44 * t109 + t22 * t126 - t127 * t178 - t57 * t237, t109 * t183 - t23 * t126 - t127 * t27 + t57 * t238, t109 * t57 + t126 * t34, t9 * t109 + t112 * t23 + t2 * t126 + t250 * t127 - t14 * t238 - t183 * t79 + t72 * t34 + t39 * t57, t1 * t126 - t10 * t109 + t112 * t22 - t197 * t127 - t14 * t237 - t73 * t34 + t38 * t57 + t79 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t200, -t199, 0, 0, 0, 0, 0 (-t159 * t217 - t163 * t221) * t153 (t159 * t221 - t163 * t217) * t153, 0, 0, 0, 0, 0 (-t109 * t164 + t126 * t221) * t153 (t108 * t164 + t127 * t221) * t153, 0, 0, 0, 0, 0, -t109 * t177 + t42 * t126 + t127 * t45 - t86 * t238, t109 * t176 + t41 * t126 - t127 * t46 - t86 * t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t159 * t218, 0.2e1 * (-t159 ^ 2 + t163 ^ 2) * qJD(4), 0, 0, 0, t159 * t213, t163 * t213, -0.2e1 * t236, 0.2e1 * t108 * t126 - 0.2e1 * t109 * t127, 0, 0, 0, 0.2e1 * t109 * t147 + 0.2e1 * t126 * t212, -0.2e1 * t108 * t147 + 0.2e1 * t127 * t212, -0.2e1 * t124 * t198 - 0.2e1 * t151 * t236, -t108 * t193 + 0.2e1 * t124 * t192, 0.2e1 * t109 * t234 - 0.2e1 * t126 * t172, -0.2e1 * t109 * t235 - 0.2e1 * t126 * t173, 0.2e1 * t126 * t109, 0.2e1 * t72 * t109 + 0.2e1 * t112 * t173 + 0.2e1 * t39 * t126 + 0.2e1 * t79 * t235, -0.2e1 * t73 * t109 - 0.2e1 * t112 * t172 + 0.2e1 * t38 * t126 + 0.2e1 * t79 * t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t63, t95, t25, t24, 0, 0, t33, -t34, t95, t95 * t248 + (-t35 + (-t32 + t249) * t158) * qJD(5) - t196 (-t158 * t95 + t215 * t259) * pkin(4) + t6, t16, t8, t27, -t178, 0, t146 * t23 - t27 * t145 + (-t157 * t244 - t158 * t183) * t245 + t197, t146 * t22 + t178 * t145 + (t158 * t44 - t161 * t244) * t245 + t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, t110, 0, 0, 0, 0, 0, -t61, t60, 0, 0, 0, 0, 0, t46, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, -t219, 0, -pkin(10) * t218, pkin(10) * t219, 0, 0, -t108, -t109, 0, -t79, t78, t70, t67, t85, -t171, 0, t106 + (-qJD(6) * t180 - t79) * t161 + t165 * t157, t161 * t165 + t180 * t214 + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t209, -0.2e1 * t208, t138, t125, 0, 0, 0, 0.2e1 * t179, 0.2e1 * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t34, t95, t7, t6, t16, t8, t27, -t178, 0, -pkin(5) * t23 - pkin(12) * t27 + t197, -pkin(5) * t22 + pkin(12) * t178 + t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t60, 0, 0, 0, 0, 0, t46, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, -t109, 0, -t79, t78, t70, t67, t85, -t171, 0, t106 + (pkin(5) * t108 - pkin(12) * t109) * t157 + (-t79 + (-pkin(5) * t127 - pkin(12) * t126) * qJD(6)) * t161, pkin(5) * t172 + pkin(12) * t171 + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t209, -t208, t138, t125, 0, 0, 0, t179 - t211, -t210 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, t125, 0, 0, 0, -0.2e1 * t211, -0.2e1 * t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t23, t34, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, -t173, t109, t39, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, -t214, 0, -t145 * t148 - t157 * t208, t145 * t214 - t161 * t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, -t214, 0, -pkin(12) * t148, pkin(12) * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
