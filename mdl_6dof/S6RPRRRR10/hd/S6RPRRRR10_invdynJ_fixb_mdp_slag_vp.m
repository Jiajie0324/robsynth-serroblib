% Calculate vector of inverse dynamics joint torques for
% S6RPRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRRR10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRRR10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RPRRRR10_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:34:47
% EndTime: 2019-03-09 07:35:17
% DurationCPUTime: 21.39s
% Computational Cost: add. (24118->754), mult. (76036->1042), div. (0->0), fcn. (67578->18), ass. (0->319)
t1018 = cos(qJ(3));
t1011 = cos(pkin(7));
t1017 = sin(qJ(1));
t842 = sin(pkin(13));
t845 = cos(pkin(13));
t1012 = cos(pkin(6));
t853 = cos(qJ(1));
t948 = t853 * t1012;
t886 = t1017 * t842 - t845 * t948;
t1029 = t886 * t1011;
t790 = t1017 * t845 + t842 * t948;
t849 = sin(qJ(3));
t844 = sin(pkin(6));
t992 = t844 * t853;
t843 = sin(pkin(7));
t994 = t843 * t849;
t708 = -t1018 * t790 + t1029 * t849 + t992 * t994;
t950 = t844 * t1011;
t764 = t843 * t886 - t853 * t950;
t841 = qJ(4) + qJ(5);
t836 = sin(t841);
t837 = cos(t841);
t665 = t708 * t837 - t764 * t836;
t958 = t843 * t1018;
t705 = t1018 * t1029 + t790 * t849 + t958 * t992;
t846 = sin(qJ(6));
t850 = cos(qJ(6));
t1070 = t665 * t846 + t705 * t850;
t1069 = t665 * t850 - t705 * t846;
t949 = t849 * t1011;
t865 = t844 * (t1018 * t845 - t842 * t949);
t778 = qJD(1) * t865;
t954 = qJD(3) * t1018;
t924 = t843 * t954;
t1068 = t778 - t924;
t915 = t1011 * t1018;
t889 = t845 * t915;
t946 = t1012 * t843;
t892 = t1018 * t946;
t1063 = t844 * t889 + t892;
t978 = qJD(1) * t844;
t957 = t842 * t978;
t1044 = qJD(1) * t1063 - t849 * t957;
t740 = qJD(4) - t1044;
t1067 = qJD(5) + t740;
t920 = t845 * t949;
t921 = t849 * t946;
t758 = t844 * (t1018 * t842 + t920) + t921;
t750 = t758 * qJD(1);
t908 = t1012 * t1011;
t956 = t845 * t978;
t785 = -qJD(1) * t908 + t843 * t956 - qJD(3);
t848 = sin(qJ(4));
t852 = cos(qJ(4));
t694 = -t848 * t750 - t785 * t852;
t695 = t750 * t852 - t785 * t848;
t847 = sin(qJ(5));
t851 = cos(qJ(5));
t636 = -t851 * t694 + t695 * t847;
t1048 = t636 * t850;
t970 = qJD(6) * t850;
t1066 = t1048 + t970;
t1061 = t708 * t848 + t764 * t852;
t1060 = t708 * t852 - t764 * t848;
t1059 = t708 * t836 + t764 * t837;
t945 = qJD(1) * t1012;
t925 = pkin(1) * t945;
t788 = qJ(2) * t956 + t842 * t925;
t864 = (t845 * t950 + t946) * pkin(9);
t728 = qJD(1) * t864 + t788;
t997 = t842 * t843;
t781 = (-pkin(2) * t845 - pkin(9) * t997 - pkin(1)) * t844;
t770 = qJD(1) * t781 + qJD(2);
t823 = t845 * t925;
t996 = t842 * t844;
t858 = t1012 * pkin(2) + (-pkin(9) * t1011 - qJ(2)) * t996;
t741 = qJD(1) * t858 + t823;
t891 = t741 * t915;
t652 = -t849 * t728 + t770 * t958 + t891;
t688 = pkin(3) * t750 - pkin(10) * t1044;
t684 = t852 * t688;
t1019 = pkin(10) + pkin(11);
t959 = qJD(4) * t1019;
t1054 = pkin(4) * t750 - t652 * t848 + t684 + (-pkin(11) * t1044 + t959) * t852;
t1002 = t1044 * t848;
t985 = t852 * t652 + t848 * t688;
t1053 = -pkin(11) * t1002 + t848 * t959 + t985;
t795 = t1011 * t848 + t852 * t994;
t928 = t843 * t957;
t1052 = qJD(4) * t795 - t1068 * t848 + t852 * t928;
t794 = t1011 * t852 - t848 * t994;
t1051 = -qJD(4) * t794 + t1068 * t852 + t848 * t928;
t968 = -qJD(6) - t636;
t1047 = t968 * t846;
t896 = t694 * t847 + t851 * t695;
t966 = qJDD(1) * t844;
t952 = t842 * t966;
t686 = qJD(3) * t1044 + qJDD(1) * t921 + t1018 * t952 + t920 * t966;
t965 = qJDD(1) * t845;
t951 = t844 * t965;
t784 = -qJDD(1) * t908 + t843 * t951 - qJDD(3);
t974 = qJD(4) * t852;
t975 = qJD(4) * t848;
t620 = t852 * t686 - t750 * t975 - t848 * t784 - t785 * t974;
t621 = qJD(4) * t695 + t686 * t848 + t852 * t784;
t972 = qJD(5) * t851;
t973 = qJD(5) * t847;
t577 = t851 * t620 - t847 * t621 + t694 * t972 - t695 * t973;
t749 = t758 * qJD(3);
t687 = qJD(1) * t749 - qJDD(1) * t1063 + t849 * t952;
t685 = qJDD(4) + t687;
t682 = qJDD(5) + t685;
t962 = t1067 * t970 + t850 * t577 + t846 * t682;
t971 = qJD(6) * t846;
t559 = -t896 * t971 + t962;
t557 = t559 * t846;
t615 = t1067 * t846 + t850 * t896;
t942 = t577 * t846 - t850 * t682;
t560 = qJD(6) * t615 + t942;
t578 = qJD(5) * t896 + t620 * t847 + t851 * t621;
t576 = qJDD(6) + t578;
t573 = t846 * t576;
t574 = t850 * t576;
t1006 = t896 * t846;
t613 = -t1067 * t850 + t1006;
t1050 = t682 * MDP(26) - t578 * MDP(25) - t636 ^ 2 * MDP(23) + (t1067 * t636 + t577) * MDP(24) + (MDP(22) * t636 + MDP(23) * t896 + MDP(25) * t1067 + MDP(33) * t968) * t896 + (-t1066 * t968 - t615 * t896 + t573) * MDP(31) + (-t1047 * t968 + t613 * t896 + t574) * MDP(32) + (t1066 * t615 + t557) * MDP(29) + (t1047 * t615 - t1066 * t613 + t559 * t850 - t846 * t560) * MDP(30);
t689 = t1011 * t770 - t741 * t843;
t629 = -pkin(3) * t1044 - pkin(10) * t750 + t689;
t653 = t1018 * t728 + t741 * t949 + t770 * t994;
t631 = -pkin(10) * t785 + t653;
t597 = t629 * t848 + t631 * t852;
t586 = pkin(11) * t694 + t597;
t1010 = t586 * t847;
t596 = t852 * t629 - t631 * t848;
t585 = -pkin(11) * t695 + t596;
t583 = pkin(4) * t740 + t585;
t554 = t583 * t851 - t1010;
t552 = -pkin(5) * t1067 - t554;
t1049 = t552 * t636;
t801 = t847 * t848 - t851 * t852;
t983 = t1067 * t801;
t802 = t847 * t852 + t848 * t851;
t982 = t1067 * t802;
t1045 = t842 * t915 + t845 * t849;
t916 = t1012 * t1017;
t870 = t853 * t842 + t845 * t916;
t1031 = -t1017 * t844 * t843 + t870 * t1011;
t791 = -t842 * t916 + t853 * t845;
t710 = t791 * t1018 - t1031 * t849;
t765 = t1017 * t950 + t843 * t870;
t666 = -t710 * t836 + t765 * t837;
t993 = t844 * t845;
t789 = t843 * t993 - t908;
t1043 = g(3) * (-t758 * t836 - t789 * t837) + g(2) * t1059 + g(1) * t666;
t603 = pkin(5) * t896 + pkin(12) * t636;
t630 = t785 * pkin(3) - t652;
t610 = -t694 * pkin(4) + t630;
t667 = t710 * t837 + t765 * t836;
t699 = t758 * t837 - t789 * t836;
t960 = pkin(1) * t1012;
t923 = qJDD(1) * t960;
t967 = qJD(1) * qJD(2);
t953 = t844 * t967;
t772 = qJ(2) * t951 + t842 * t923 + t845 * t953;
t715 = qJDD(1) * t864 + t772;
t821 = t845 * t923;
t716 = qJDD(1) * t858 - t842 * t953 + t821;
t766 = qJDD(1) * t781 + qJDD(2);
t976 = qJD(3) * t849;
t868 = qJD(3) * t891 + t1018 * t715 + t716 * t949 - t728 * t976 + t766 * t994 + t770 * t924;
t599 = -pkin(10) * t784 + t868;
t675 = t1011 * t766 - t716 * t843;
t608 = pkin(3) * t687 - pkin(10) * t686 + t675;
t941 = -t848 * t599 + t852 * t608;
t861 = -qJD(4) * t597 + t941;
t546 = pkin(4) * t685 - pkin(11) * t620 + t861;
t882 = -t852 * t599 - t848 * t608 - t629 * t974 + t631 * t975;
t548 = -pkin(11) * t621 - t882;
t930 = -t847 * t546 - t851 * t548 - t583 * t972 + t586 * t973;
t1042 = g(1) * t667 - g(2) * t665 + g(3) * t699 + t610 * t636 + t930;
t839 = t844 ^ 2;
t1038 = t839 * (t842 ^ 2 + t845 ^ 2);
t704 = t758 * t852 - t789 * t848;
t995 = t842 * t849;
t757 = t844 * t995 - t1063;
t829 = t845 * t960;
t759 = t829 + t858;
t697 = t1011 * t781 - t759 * t843;
t645 = pkin(3) * t757 - pkin(10) * t758 + t697;
t793 = qJ(2) * t993 + t842 * t960;
t753 = t864 + t793;
t961 = t1018 * t753 + t759 * t949 + t781 * t994;
t651 = -pkin(10) * t789 + t961;
t938 = t852 * t645 - t651 * t848;
t589 = pkin(4) * t757 - pkin(11) * t704 + t938;
t703 = t758 * t848 + t789 * t852;
t986 = t848 * t645 + t852 * t651;
t595 = -pkin(11) * t703 + t986;
t1037 = t847 * t589 + t851 * t595;
t919 = -t653 + (-t1002 + t975) * pkin(4);
t894 = t794 * t851 - t795 * t847;
t1036 = -qJD(5) * t894 + t1051 * t851 + t1052 * t847;
t730 = t794 * t847 + t795 * t851;
t1035 = qJD(5) * t730 - t1051 * t847 + t1052 * t851;
t818 = t1019 * t848;
t819 = t1019 * t852;
t893 = -t818 * t851 - t819 * t847;
t1034 = -qJD(5) * t893 + t1053 * t851 + t1054 * t847;
t776 = -t818 * t847 + t819 * t851;
t1033 = -qJD(5) * t776 + t1053 * t847 - t1054 * t851;
t856 = -t849 * t753 + t759 * t915 + t781 * t958;
t777 = t1045 * t978;
t955 = t843 * t976;
t1032 = t777 - t955;
t655 = -t703 * t847 + t704 * t851;
t752 = t757 * t850;
t1028 = -t655 * t846 + t752;
t1009 = t586 * t851;
t555 = t583 * t847 + t1009;
t553 = pkin(12) * t1067 + t555;
t579 = t636 * pkin(5) - pkin(12) * t896 + t610;
t904 = t553 * t846 - t579 * t850;
t1026 = t552 * t971 + t896 * t904;
t943 = -t851 * t546 + t548 * t847;
t1021 = -qJD(5) * t555 - t943;
t537 = -pkin(5) * t682 - t1021;
t535 = t537 * t846;
t543 = t553 * t850 + t579 * t846;
t1025 = t1043 * t846 + t543 * t896 + t552 * t970 + t535;
t1023 = -t610 * t896 + t1021 - t1043;
t1016 = pkin(1) * t839;
t1004 = t694 * t740;
t1003 = t695 * t740;
t1001 = t757 * t846;
t1000 = t802 * t850;
t999 = t837 * t846;
t998 = t837 * t850;
t984 = pkin(5) * t750 - t1033;
t977 = qJD(2) * t844;
t969 = t784 * MDP(12);
t835 = -pkin(4) * t852 - pkin(3);
t854 = qJD(1) ^ 2;
t947 = t854 * t1012;
t536 = pkin(12) * t682 - t930;
t914 = qJD(3) * t949;
t885 = t849 * t715 - t716 * t915 + t728 * t954 + t741 * t914 - t766 * t958 + t770 * t955;
t600 = pkin(3) * t784 + t885;
t580 = pkin(4) * t621 + t600;
t541 = pkin(5) * t578 - pkin(12) * t577 + t580;
t944 = -t846 * t536 + t850 * t541;
t640 = qJD(2) * t865 + qJD(3) * t856;
t748 = (t892 + (t889 - t995) * t844) * qJD(3);
t926 = t977 * t997;
t674 = pkin(3) * t749 - pkin(10) * t748 + t926;
t939 = -t640 * t848 + t852 * t674;
t937 = -t850 * t750 + t846 * t983;
t936 = t750 * t846 + t850 * t983;
t934 = t740 * t852;
t833 = pkin(4) * t847 + pkin(12);
t931 = pkin(4) * t695 + qJD(6) * t833 + t603;
t561 = t585 * t847 + t1009;
t918 = pkin(4) * t973 - t561;
t562 = t585 * t851 - t1010;
t917 = -pkin(4) * t972 + t562;
t913 = qJD(2) * t945;
t754 = pkin(5) * t801 - pkin(12) * t802 + t835;
t910 = pkin(12) * t750 - qJD(6) * t754 + t1034;
t909 = -pkin(5) * t982 - pkin(12) * t983 + qJD(6) * t776 - t919;
t641 = t1045 * t977 + t753 * t954 + t759 * t914 + t781 * t955;
t906 = t850 * t536 + t846 * t541;
t905 = -t833 * t576 + t1049;
t564 = pkin(12) * t757 + t1037;
t650 = t789 * pkin(3) - t856;
t616 = t703 * pkin(4) + t650;
t654 = t851 * t703 + t704 * t847;
t581 = t654 * pkin(5) - t655 * pkin(12) + t616;
t903 = t564 * t850 + t581 * t846;
t902 = -t564 * t846 + t581 * t850;
t662 = -qJD(4) * t703 + t748 * t852;
t566 = pkin(4) * t749 - pkin(11) * t662 - qJD(4) * t986 + t939;
t661 = qJD(4) * t704 + t748 * t848;
t881 = t852 * t640 + t645 * t974 - t651 * t975 + t848 * t674;
t568 = -pkin(11) * t661 + t881;
t901 = t566 * t851 - t568 * t847;
t900 = t589 * t851 - t595 * t847;
t626 = t655 * t850 + t1001;
t895 = (-qJ(2) * t957 + t823) * t842 - t788 * t845;
t888 = g(1) * t1017 - g(2) * t853;
t887 = -g(1) * t853 - g(2) * t1017;
t883 = -pkin(10) * t685 + t630 * t740;
t880 = t847 * t566 + t851 * t568 + t589 * t972 - t595 * t973;
t709 = t1018 * t1031 + t791 * t849;
t878 = g(1) * t709 + g(2) * t705 + g(3) * t757;
t876 = -t846 * t730 - t850 * t958;
t875 = -t850 * t730 + t846 * t958;
t874 = t802 * t970 - t937;
t873 = -t802 * t971 - t936;
t609 = pkin(4) * t661 + t641;
t872 = -t537 - t1043;
t859 = pkin(10) * qJD(4) * t740 + t600 - t878;
t834 = -pkin(4) * t851 - pkin(5);
t824 = -pkin(1) * t966 + qJDD(2);
t792 = -qJ(2) * t996 + t829;
t771 = t821 + (-qJ(2) * qJDD(1) - t967) * t996;
t671 = t710 * t852 + t765 * t848;
t670 = -t710 * t848 + t765 * t852;
t624 = t667 * t850 + t709 * t846;
t623 = -t667 * t846 + t709 * t850;
t593 = qJD(5) * t655 + t851 * t661 + t662 * t847;
t592 = -qJD(5) * t654 - t661 * t847 + t662 * t851;
t572 = qJD(6) * t626 + t592 * t846 - t749 * t850;
t571 = qJD(6) * t1028 + t592 * t850 + t749 * t846;
t563 = -pkin(5) * t757 - t900;
t549 = pkin(5) * t593 - pkin(12) * t592 + t609;
t539 = -pkin(5) * t749 + qJD(5) * t1037 - t901;
t538 = pkin(12) * t749 + t880;
t534 = -t543 * qJD(6) + t944;
t533 = -t904 * qJD(6) + t906;
t1 = [(-t772 * t1012 - g(1) * t886 + g(2) * t870 + (t824 * t842 - t845 * t913) * t844 + (-t1012 * t793 - t1016 * t842) * qJDD(1)) * MDP(5) + (t771 * t1012 + g(1) * t790 - g(2) * t791 + (-t824 * t845 - t842 * t913) * t844 + (t1012 * t792 + t1016 * t845) * qJDD(1)) * MDP(4) + (t939 * t740 + t938 * t685 + t941 * t757 + t596 * t749 - t641 * t694 + t650 * t621 + t600 * t703 + t630 * t661 - g(1) * t1060 - g(2) * t671 + (-t597 * t757 - t740 * t986) * qJD(4)) * MDP(20) + (g(1) * t1061 - g(2) * t670 - t597 * t749 + t600 * t704 + t650 * t620 + t630 * t662 + t641 * t695 - t986 * t685 - t881 * t740 + t882 * t757) * MDP(21) - t887 * MDP(3) + t888 * MDP(2) + (t771 * t792 + t772 * t793 + t888 * pkin(1) + (-t824 * pkin(1) + qJ(2) * t887 - qJD(2) * t895) * t844) * MDP(7) + (t577 * t655 + t592 * t896) * MDP(22) + (-t577 * t654 - t578 * t655 - t592 * t636 - t593 * t896) * MDP(23) + (-g(1) * t705 + g(2) * t709 + t640 * t785 + t675 * t758 + t697 * t686 + t689 * t748 + t750 * t926 + t784 * t961 + t789 * t868) * MDP(14) + (-g(1) * t708 - g(2) * t710 - t1044 * t926 + t641 * t785 + t675 * t757 + t697 * t687 + t689 * t749 - t784 * t856 + t789 * t885) * MDP(13) + (t1044 * t748 - t686 * t757 - t687 * t758 - t749 * t750) * MDP(9) + (-(-qJD(6) * t903 - t538 * t846 + t549 * t850) * t968 + t902 * t576 + t534 * t654 - t904 * t593 + t539 * t613 + t563 * t560 - t537 * t1028 + t552 * t572 - g(1) * t1069 - g(2) * t624) * MDP(34) + ((qJD(6) * t902 + t538 * t850 + t549 * t846) * t968 - t903 * t576 - t533 * t654 - t543 * t593 + t539 * t615 + t563 * t559 + t537 * t626 + t552 * t571 + g(1) * t1070 - g(2) * t623) * MDP(35) + qJDD(1) * MDP(1) + (t685 * t757 + t740 * t749) * MDP(19) + (-t621 * t757 - t661 * t740 - t685 * t703 + t694 * t749) * MDP(18) + (t620 * t757 + t662 * t740 + t685 * t704 + t695 * t749) * MDP(17) + (t686 * t758 + t748 * t750) * MDP(8) + (t901 * t1067 + t900 * t682 - t943 * t757 + t554 * t749 + t609 * t636 + t616 * t578 + t580 * t654 + t610 * t593 - g(1) * t665 - g(2) * t667 + (-t1037 * t1067 - t555 * t757) * qJD(5)) * MDP(27) + (g(1) * t1059 - g(2) * t666 - t1037 * t682 - t1067 * t880 - t555 * t749 + t616 * t577 + t580 * t655 + t610 * t592 + t609 * t896 + t930 * t757) * MDP(28) + (t1067 * t592 + t577 * t757 + t655 * t682 + t749 * t896) * MDP(24) + (t1067 * t749 + t682 * t757) * MDP(26) + (-t1067 * t593 - t578 * t757 - t636 * t749 - t654 * t682) * MDP(25) + (t687 * t789 + t749 * t785 + t757 * t784) * MDP(11) + (-t686 * t789 - t748 * t785 - t758 * t784) * MDP(10) + (-t620 * t703 - t621 * t704 - t661 * t695 + t662 * t694) * MDP(16) + (t620 * t704 + t662 * t695) * MDP(15) + (t967 * t1038 + (-t771 * t842 + t772 * t845 + (-t792 * t842 + t793 * t845) * qJDD(1) + t887) * t844) * MDP(6) + (t576 * t654 - t593 * t968) * MDP(33) + (t559 * t654 - t571 * t968 + t576 * t626 + t593 * t615) * MDP(31) + (t559 * t626 + t571 * t615) * MDP(29) + (t1028 * t576 - t560 * t654 + t572 * t968 - t593 * t613) * MDP(32) + (t1028 * t559 - t560 * t626 - t571 * t613 - t572 * t615) * MDP(30) + t789 * t969; -t854 * MDP(6) * t1038 + (-g(3) * t1012 + qJDD(2)) * MDP(7) + (t1011 * t687 - t777 * t785 + (-t1018 * t784 + t1044 * t957 + t785 * t976) * t843) * MDP(13) + (t1011 * t686 - t778 * t785 + (-t750 * t957 + t784 * t849 + t785 * t954) * t843) * MDP(14) + (t1032 * t694 - t1052 * t740 - t621 * t958 + t794 * t685) * MDP(20) + (-t1032 * t695 + t1051 * t740 - t620 * t958 - t795 * t685) * MDP(21) + (-t1032 * t636 - t1035 * t1067 - t578 * t958 + t682 * t894) * MDP(27) + (-t1032 * t896 + t1036 * t1067 - t577 * t958 - t730 * t682) * MDP(28) + (-t894 * t560 + t876 * t576 - (t875 * qJD(6) - t1032 * t850 + t1036 * t846) * t968 + t1035 * t613) * MDP(34) + (-t894 * t559 + t875 * t576 - (-t876 * qJD(6) + t1032 * t846 + t1036 * t850) * t968 + t1035 * t615) * MDP(35) + ((t842 * t947 - t965) * MDP(4) + (qJDD(1) * t842 + t845 * t947) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t895 - t888) * MDP(7)) * t844; (-pkin(3) * t621 + t653 * t694 - t684 * t740 + (t652 * t740 + t883) * t848 - t859 * t852) * MDP(20) + (-pkin(3) * t620 - t653 * t695 + t740 * t985 + t848 * t859 + t852 * t883) * MDP(21) + (t937 * t615 + t936 * t613 + (-t557 - t560 * t850 + (t613 * t846 - t615 * t850) * qJD(6)) * t802) * MDP(30) - t687 * MDP(11) + (-t653 * t785 + t878 - t885) * MDP(13) + (t577 * t802 - t896 * t983) * MDP(22) + (-t577 * t801 - t578 * t802 + t636 * t983 - t896 * t982) * MDP(23) + (t848 * t685 + t740 * t934) * MDP(17) + ((t754 * t850 - t776 * t846) * t576 + t534 * t801 - t893 * t560 + t802 * t535 - g(1) * (-t709 * t998 + t710 * t846) - g(2) * (-t705 * t998 - t708 * t846) - g(3) * (-t757 * t998 + t758 * t846) - (t846 * t910 - t850 * t909) * t968 + t984 * t613 - t982 * t904 + t874 * t552) * MDP(34) + (-(t754 * t846 + t776 * t850) * t576 - t533 * t801 - t893 * t559 + t537 * t1000 - g(1) * (t709 * t999 + t710 * t850) - g(2) * (t705 * t999 - t708 * t850) - g(3) * (t757 * t999 + t758 * t850) - (t846 * t909 + t850 * t910) * t968 + t984 * t615 - t982 * t543 + t873 * t552) * MDP(35) - t1044 ^ 2 * MDP(9) + (g(1) * t710 - g(2) * t708 + g(3) * t758 - t1044 * t689 - t652 * t785 - t868) * MDP(14) + (t1044 * t785 + t686) * MDP(10) + (t1000 * t559 + t615 * t873) * MDP(29) + (t1033 * t1067 + t835 * t578 + t580 * t801 + t982 * t610 + t919 * t636 + t682 * t893 + t878 * t837) * MDP(27) + (-t1067 * t983 + t682 * t802) * MDP(24) + (t1034 * t1067 + t835 * t577 + t580 * t802 - t983 * t610 - t776 * t682 - t878 * t836 + t919 * t896) * MDP(28) + (-t1067 * t982 - t682 * t801) * MDP(25) + (-MDP(11) * t785 - MDP(13) * t689 - MDP(17) * t695 - MDP(18) * t694 - MDP(19) * t740 - MDP(20) * t596 + MDP(21) * t597 - MDP(24) * t896 + MDP(25) * t636 - MDP(26) * t1067 - MDP(27) * t554 + MDP(28) * t555 - MDP(8) * t1044 + MDP(9) * t750) * t750 - t969 + (-t740 ^ 2 * t848 + t685 * t852) * MDP(18) + (t620 * t848 + t695 * t934) * MDP(15) + (t576 * t801 - t968 * t982) * MDP(33) + (t559 * t801 + t574 * t802 + t615 * t982 - t873 * t968) * MDP(31) + (-t560 * t801 - t573 * t802 - t613 * t982 + t874 * t968) * MDP(32) + ((t620 + t1004) * t852 + (-t621 - t1003) * t848) * MDP(16); (-g(1) * t670 - g(2) * t1061 + g(3) * t703 + t597 * t740 - t630 * t695 + t861) * MDP(20) + (g(1) * t671 - g(2) * t1060 + g(3) * t704 + t596 * t740 - t630 * t694 + t882) * MDP(21) + (t561 * t1067 + (-t1067 * t973 - t636 * t695 + t682 * t851) * pkin(4) + t1023) * MDP(27) + (t834 * t560 + t918 * t613 + (-t917 * t968 + t905) * t846 + (t931 * t968 + t872) * t850 + t1026) * MDP(34) + (t834 * t559 + t905 * t850 + t918 * t615 - (t846 * t931 + t850 * t917) * t968 + t1025) * MDP(35) + t685 * MDP(19) + (-t694 ^ 2 + t695 ^ 2) * MDP(16) + (t562 * t1067 + (-t1067 * t972 - t682 * t847 - t695 * t896) * pkin(4) + t1042) * MDP(28) - t695 * t694 * MDP(15) + (t1003 - t621) * MDP(18) + (t620 - t1004) * MDP(17) + t1050; (t1067 * t555 + t1023) * MDP(27) + (t1067 * t554 + t1042) * MDP(28) + (-pkin(5) * t560 - t555 * t613 + (-pkin(12) * t576 - t554 * t968 + t1049) * t846 + (-(-pkin(12) * qJD(6) - t603) * t968 + t872) * t850 + t1026) * MDP(34) + (-pkin(5) * t559 - (t554 * t850 + t603 * t846) * t968 - t555 * t615 + t552 * t1048 + (-t968 * t971 - t574) * pkin(12) + t1025) * MDP(35) + t1050; t615 * t613 * MDP(29) + (-t613 ^ 2 + t615 ^ 2) * MDP(30) + (-t613 * t968 + t962) * MDP(31) + (-t615 * t968 - t942) * MDP(32) + t576 * MDP(33) + (-t543 * t968 - t552 * t615 - g(1) * t623 - g(2) * t1070 - g(3) * (-t699 * t846 + t752) + t944) * MDP(34) + (t904 * t968 + t552 * t613 + g(1) * t624 - g(2) * t1069 - g(3) * (-t699 * t850 - t1001) - t906) * MDP(35) + (-MDP(31) * t1006 - MDP(32) * t615 - MDP(34) * t543 + MDP(35) * t904) * qJD(6);];
tau  = t1;
