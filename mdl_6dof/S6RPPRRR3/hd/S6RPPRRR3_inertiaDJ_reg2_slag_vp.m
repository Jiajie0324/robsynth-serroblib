% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR3_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:23:49
% EndTime: 2019-03-09 02:23:55
% DurationCPUTime: 2.34s
% Computational Cost: add. (2554->257), mult. (5424->454), div. (0->0), fcn. (4638->8), ass. (0->137)
t77 = cos(qJ(5));
t78 = cos(qJ(4));
t158 = pkin(4) * t78;
t76 = sin(qJ(4));
t96 = pkin(8) * t76 + t158;
t165 = t77 * t96;
t153 = sin(qJ(6));
t75 = sin(qJ(5));
t119 = t153 * t75;
t154 = cos(qJ(6));
t120 = t154 * t77;
t88 = t120 - t119;
t38 = t88 * t76;
t71 = t75 ^ 2;
t73 = t77 ^ 2;
t142 = t71 + t73;
t159 = -pkin(9) - pkin(8);
t164 = t159 * t78;
t111 = t154 * qJD(6);
t163 = t154 * qJD(5) + t111;
t72 = t76 ^ 2;
t74 = t78 ^ 2;
t141 = t72 - t74;
t162 = qJD(4) * t141;
t143 = t71 - t73;
t110 = qJD(5) * t143;
t161 = qJD(5) + qJD(6);
t160 = 2 * qJD(3);
t157 = t76 * pkin(4);
t156 = t77 * pkin(4);
t155 = t78 * pkin(8);
t115 = qJD(4) * t154;
t100 = t76 * t115;
t114 = qJD(4) * t153;
t101 = t76 * t114;
t106 = t78 * t119;
t147 = t77 * t78;
t17 = -t75 * t100 - t77 * t101 - t161 * t106 + t163 * t147;
t52 = t153 * t77 + t154 * t75;
t37 = t52 * t78;
t152 = t37 * t17;
t27 = t161 * t52;
t146 = t78 * t27;
t15 = t77 * t100 - t75 * t101 + t146;
t39 = t78 * t120 - t106;
t151 = t39 * t15;
t65 = -cos(pkin(10)) * pkin(1) - pkin(2) - pkin(7);
t150 = t75 * t65;
t149 = t76 * t27;
t148 = t76 * t65;
t145 = t78 * t65;
t144 = -t15 * t88 - t39 * t27;
t50 = t77 * t148;
t66 = sin(pkin(10)) * pkin(1) + qJ(3);
t89 = -t66 - t157;
t87 = -t89 - t155;
t25 = t75 * t87 + t50;
t140 = t72 + t74;
t139 = qJD(5) * t75;
t138 = qJD(5) * t77;
t137 = qJD(5) * t78;
t136 = t76 * qJD(4);
t135 = t77 * qJD(3);
t69 = t78 * qJD(4);
t134 = -0.2e1 * pkin(4) * qJD(5);
t133 = t75 * t148;
t132 = t75 * t145;
t131 = t66 * t160;
t130 = pkin(5) * t139;
t129 = qJD(5) * t65 * t74;
t128 = t76 * t139;
t127 = t75 * t137;
t126 = t77 * t137;
t125 = t52 * t69;
t124 = t75 * t138;
t123 = t65 * t136;
t122 = t77 * t136;
t63 = t76 * t69;
t121 = t65 * t69;
t118 = pkin(5) - t150;
t117 = t142 * t76;
t116 = t142 * t78;
t113 = qJD(6) * t153;
t70 = qJD(4) * t72;
t109 = -t74 * qJD(4) + t70;
t108 = t75 * t122;
t107 = t74 * t124;
t105 = pkin(5) * t111;
t104 = pkin(5) * t113;
t103 = t159 * t154;
t102 = t159 * t153;
t99 = t78 * t115;
t98 = t78 * t114;
t97 = qJD(4) * t116;
t26 = (t153 * qJD(5) + t113) * t75 - t163 * t77;
t95 = -t17 * t52 + t26 * t37;
t86 = t77 * t87;
t24 = t86 - t133;
t94 = t24 * t77 + t25 * t75;
t93 = t24 * t75 - t25 * t77;
t92 = t75 * t103;
t91 = t75 * t102;
t90 = -t69 * t88 + t149;
t45 = t75 * t136 - t126;
t11 = -qJD(5) * t86 + t65 * t128 - t75 * (t96 * qJD(4) + qJD(3)) - t77 * t121;
t23 = -t75 * t78 * pkin(9) + t25;
t79 = t135 + (-t50 + (t89 - t164) * t75) * qJD(5) + (t118 * t78 + (-t159 * t76 + t158) * t77) * qJD(4);
t83 = (t66 + t164) * t77 + (t118 + t156) * t76;
t81 = t154 * t83;
t84 = t45 * pkin(9) - t11;
t1 = -qJD(6) * t81 + t23 * t113 - t153 * t79 - t154 * t84;
t59 = t159 * t77;
t31 = -t154 * t59 + t91;
t12 = t135 - t25 * qJD(5) + (-t132 + t165) * qJD(4);
t85 = -t94 * qJD(5) - t11 * t77 - t12 * t75;
t82 = -t153 * t84 + t154 * t79;
t80 = t153 * t83;
t6 = t154 * t23 + t80;
t68 = -t77 * pkin(5) - pkin(4);
t61 = 0.2e1 * t63;
t44 = t76 * t138 + t75 * t69;
t43 = t122 + t127;
t42 = -t77 * t69 + t128;
t40 = (pkin(5) * t75 - t65) * t78;
t36 = t52 * t76;
t32 = t78 * t110 + t108;
t30 = t153 * t59 + t92;
t29 = t76 * t97 - t63;
t28 = -t45 * pkin(5) + t123;
t20 = -t26 * t76 + t125;
t19 = -t31 * qJD(6) + (t77 * t103 - t91) * qJD(5);
t18 = -t102 * t138 - t59 * t113 - t161 * t92;
t16 = -t161 * t38 - t125;
t14 = t75 * t98 - t77 * t99 + t149;
t5 = -t153 * t23 + t81;
t2 = -t6 * qJD(6) + t82;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t160, t131, -0.2e1 * t63, 0.2e1 * t109, 0, t61, 0, 0, 0.2e1 * qJD(3) * t76 + 0.2e1 * t66 * t69, 0.2e1 * qJD(3) * t78 - 0.2e1 * t66 * t136, 0, t131, -0.2e1 * t73 * t63 - 0.2e1 * t107, 0.4e1 * t78 * t108 + 0.2e1 * t74 * t110, -0.2e1 * t76 * t127 - 0.2e1 * t77 * t162, -0.2e1 * t71 * t63 + 0.2e1 * t107, -0.2e1 * t76 * t126 + 0.2e1 * t75 * t162, t61, -0.2e1 * t77 * t129 + 0.2e1 * t12 * t76 + 0.2e1 * (t24 + 0.2e1 * t133) * t69, 0.2e1 * t75 * t129 + 0.2e1 * t11 * t76 + 0.2e1 * (-t25 + 0.2e1 * t50) * t69, 0.2e1 * t94 * t136 + 0.2e1 * (t93 * qJD(5) + t11 * t75 - t12 * t77) * t78, -0.2e1 * t65 ^ 2 * t63 - 0.2e1 * t25 * t11 + 0.2e1 * t24 * t12, -0.2e1 * t151, 0.2e1 * t37 * t15 - 0.2e1 * t39 * t17, -0.2e1 * t15 * t76 + 0.2e1 * t39 * t69, 0.2e1 * t152, -0.2e1 * t76 * t17 - 0.2e1 * t37 * t69, t61, 0.2e1 * t40 * t17 + 0.2e1 * t2 * t76 + 0.2e1 * t28 * t37 + 0.2e1 * t5 * t69, 0.2e1 * t1 * t76 - 0.2e1 * t40 * t15 + 0.2e1 * t28 * t39 - 0.2e1 * t6 * t69, 0.2e1 * t1 * t37 + 0.2e1 * t15 * t5 - 0.2e1 * t17 * t6 - 0.2e1 * t2 * t39, -0.2e1 * t1 * t6 + 0.2e1 * t2 * t5 + 0.2e1 * t28 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85 * t78 + (t141 * t65 + t93 * t76) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t39 - t6 * t15 - t5 * t17 - t2 * t37 + t28 * t76 + t40 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t151 + 0.2e1 * t63 + 0.2e1 * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t140 * t138, t140 * t139, 0, -t93 * t69 + (t85 - 0.2e1 * t121) * t76, 0, 0, 0, 0, 0, 0, t16 * t76 - t78 * t17 + (-t36 * t78 + t37 * t76) * qJD(4), t14 * t76 + t78 * t15 + (-t38 * t78 + t39 * t76) * qJD(4), t14 * t37 - t15 * t36 - t16 * t39 - t17 * t38, -t1 * t38 + t136 * t40 - t6 * t14 + t5 * t16 - t2 * t36 - t28 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 + (-t142 * t141 - t74) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39 * t14 - t15 * t38 - t37 * t16 + t17 * t36 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t38 * t14 - 0.2e1 * t36 * t16 - 0.2e1 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, 0, -t69, 0, -t123, -t121, 0, 0, -t32, -0.4e1 * t78 * t124 + t143 * t136, t44, t32, -t42, 0 (-t132 - t165) * qJD(5) + (-t50 + (-t155 + t157) * t75) * qJD(4) (-t77 * t145 + t96 * t75) * qJD(5) + (-pkin(8) * t147 + (t150 + t156) * t76) * qJD(4), t85, -pkin(4) * t123 + pkin(8) * t85, -t15 * t52 - t26 * t39, t95 + t144, t20, -t17 * t88 + t27 * t37, -t90, 0, t37 * t130 + t68 * t17 + t19 * t76 + t40 * t27 - t28 * t88 + t30 * t69, t39 * t130 - t68 * t15 + t18 * t76 - t40 * t26 + t28 * t52 - t31 * t69, -t1 * t88 + t15 * t30 - t17 * t31 + t18 * t37 - t19 * t39 - t2 * t52 + t26 * t5 - t27 * t6, -t1 * t31 + t130 * t40 - t6 * t18 + t5 * t19 + t2 * t30 + t28 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t136, 0, 0, 0, 0, 0, 0, 0, 0, t42, t44, -qJD(4) * t117 (-pkin(8) * t117 - t158) * qJD(4), 0, 0, 0, 0, 0, 0, t90, t20, -t95 + t144, pkin(5) * t128 - t15 * t31 - t17 * t30 - t39 * t18 - t37 * t19 + t68 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, -t69, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t45, t97 (pkin(8) * t116 - t157) * qJD(4), 0, 0, 0, 0, 0, 0, -t136 * t88 - t146, t52 * t136 + t78 * t26, -t14 * t88 - t16 * t52 - t26 * t36 - t27 * t38, -pkin(5) * t127 + t136 * t68 - t14 * t31 + t16 * t30 - t38 * t18 - t36 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t124, -0.2e1 * t110, 0, -0.2e1 * t124, 0, 0, t75 * t134, t77 * t134, 0, 0, -0.2e1 * t52 * t26, -0.2e1 * t26 * t88 - 0.2e1 * t27 * t52, 0, -0.2e1 * t88 * t27, 0, 0, -0.2e1 * t130 * t88 + 0.2e1 * t68 * t27, 0.2e1 * t52 * t130 - 0.2e1 * t68 * t26, -0.2e1 * t18 * t88 - 0.2e1 * t19 * t52 + 0.2e1 * t26 * t30 - 0.2e1 * t27 * t31, 0.2e1 * t130 * t68 - 0.2e1 * t31 * t18 + 0.2e1 * t30 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, 0, t45, t69, t12, t11, 0, 0, 0, 0, -t15, 0, -t17, t69, pkin(5) * t99 - qJD(6) * t80 - t76 * t104 - t111 * t23 + t82 (-t76 * t111 - t98) * pkin(5) + t1 (t154 * t15 - t153 * t17 + (t153 * t39 - t154 * t37) * qJD(6)) * pkin(5) (t154 * t2 - t153 * t1 + (-t153 * t5 + t154 * t6) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t43, 0, 0, 0, 0, 0, 0, 0, 0, -t17, t15, 0 (-t154 * t17 - t153 * t15 + (t153 * t37 + t154 * t39) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, t42, 0, 0, 0, 0, 0, 0, 0, 0, t16, t14, 0 (t154 * t16 - t153 * t14 + (t153 * t36 + t154 * t38) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, 0, -t139, 0, -pkin(8) * t138, pkin(8) * t139, 0, 0, 0, 0, -t26, 0, -t27, 0, t19, t18 (t154 * t26 - t153 * t27 + (t153 * t52 + t154 * t88) * qJD(6)) * pkin(5) (t154 * t19 - t153 * t18 + (-t153 * t30 + t154 * t31) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t104, -0.2e1 * t105, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, -t17, t69, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, 0, -t27, 0, t19, t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, -t105, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
