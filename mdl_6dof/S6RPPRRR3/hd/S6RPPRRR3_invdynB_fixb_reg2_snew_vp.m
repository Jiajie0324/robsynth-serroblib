% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:31:55
% EndTime: 2019-05-05 15:32:21
% DurationCPUTime: 18.46s
% Computational Cost: add. (64423->660), mult. (122364->975), div. (0->0), fcn. (78253->10), ass. (0->436)
t657 = sin(pkin(10));
t670 = qJD(1) ^ 2;
t658 = cos(pkin(10));
t703 = t658 * qJDD(1);
t622 = t657 * t670 - t703;
t654 = g(3) - qJDD(2);
t589 = qJ(2) * t622 - t654 * t657;
t665 = sin(qJ(1));
t669 = cos(qJ(1));
t621 = qJDD(1) * t657 + t658 * t670;
t687 = t621 * t669 - t622 * t665;
t693 = -qJ(2) * t621 + t654 * t658;
t778 = -pkin(6) * t687 + t589 * t665 + t669 * t693;
t631 = g(1) * t669 + g(2) * t665;
t615 = -pkin(1) * t670 - t631;
t630 = g(1) * t665 - g(2) * t669;
t676 = qJDD(1) * pkin(1) + t630;
t557 = t615 * t657 - t658 * t676;
t558 = t615 * t658 + t657 * t676;
t688 = t557 * t657 + t558 * t658;
t492 = t557 * t658 - t558 * t657;
t740 = t492 * t665;
t432 = t669 * t688 + t740;
t739 = t492 * t669;
t775 = -t665 * t688 + t739;
t685 = t621 * t665 + t622 * t669;
t756 = pkin(6) * t685 + t589 * t669 - t665 * t693;
t662 = sin(qJ(6));
t663 = sin(qJ(5));
t667 = cos(qJ(5));
t668 = cos(qJ(4));
t710 = qJD(1) * t668;
t611 = -qJD(4) * t667 + t663 * t710;
t613 = qJD(4) * t663 + t667 * t710;
t666 = cos(qJ(6));
t554 = t611 * t666 + t613 * t662;
t556 = -t611 * t662 + t613 * t666;
t500 = t556 * t554;
t707 = qJD(1) * qJD(4);
t694 = t668 * t707;
t664 = sin(qJ(4));
t705 = qJDD(1) * t664;
t618 = -t694 - t705;
t609 = qJDD(5) - t618;
t672 = qJDD(6) + t609;
t762 = -t500 + t672;
t772 = t662 * t762;
t572 = t613 * t611;
t760 = -t572 + t609;
t771 = t663 * t760;
t770 = t666 * t762;
t769 = t667 * t760;
t711 = qJD(1) * t664;
t639 = qJD(5) + t711;
t594 = t639 * t611;
t695 = t664 * t707;
t704 = qJDD(1) * t668;
t619 = -t695 + t704;
t696 = qJD(5) * t611 - qJDD(4) * t663 - t619 * t667;
t512 = -t594 + t696;
t706 = qJDD(1) * qJ(3);
t674 = -pkin(2) * t670 + t558 + t706;
t753 = 2 * qJD(3);
t702 = qJD(1) * t753;
t530 = t674 + t702;
t656 = qJDD(1) * pkin(2);
t533 = -qJ(3) * t670 + qJDD(3) + t557 - t656;
t470 = t530 * t657 - t533 * t658;
t690 = t530 * t658 + t533 * t657;
t399 = -t470 * t665 + t669 * t690;
t398 = t470 * t669 + t665 * t690;
t633 = qJD(6) + t639;
t531 = t633 * t554;
t683 = -qJDD(4) * t667 + t663 * t619;
t549 = -qJD(5) * t613 - t683;
t673 = qJD(6) * t554 - t549 * t662 + t666 * t696;
t761 = -t531 - t673;
t511 = t696 + t594;
t689 = -t549 * t666 - t662 * t696;
t425 = (qJD(6) - t633) * t556 + t689;
t507 = (qJD(5) - t639) * t613 + t683;
t552 = t554 ^ 2;
t553 = t556 ^ 2;
t755 = t611 ^ 2;
t608 = t613 ^ 2;
t632 = t633 ^ 2;
t638 = t639 ^ 2;
t754 = qJD(4) ^ 2;
t752 = pkin(2) + pkin(7);
t751 = pkin(4) * t664;
t750 = pkin(4) * t668;
t660 = t670 * pkin(7);
t679 = pkin(8) * t664 + t750;
t477 = -t618 * pkin(4) - t619 * pkin(8) - t660 + (qJD(4) * t679 + t753) * qJD(1) + t674;
t678 = -pkin(8) * t668 + t751;
t616 = t678 * qJD(1);
t671 = -qJDD(1) * pkin(7) + t533;
t713 = t654 * t668 - t664 * t671;
t486 = -pkin(4) * t754 + qJDD(4) * pkin(8) - t616 * t711 - t713;
t405 = -t477 * t667 + t663 * t486;
t383 = pkin(5) * t760 + pkin(9) * t512 - t405;
t406 = t477 * t663 + t486 * t667;
t581 = pkin(5) * t639 - pkin(9) * t613;
t386 = -pkin(5) * t755 + pkin(9) * t549 - t581 * t639 + t406;
t327 = -t383 * t666 + t386 * t662;
t328 = t383 * t662 + t386 * t666;
t292 = -t327 * t666 + t328 * t662;
t748 = t292 * t663;
t747 = t292 * t667;
t691 = t654 * t664 + t668 * t671;
t485 = -qJDD(4) * pkin(4) - pkin(8) * t754 + t616 * t710 - t691;
t415 = -pkin(5) * t549 - pkin(9) * t755 + t581 * t613 + t485;
t746 = t415 * t662;
t745 = t415 * t666;
t479 = t500 + t672;
t744 = t479 * t662;
t743 = t479 * t666;
t742 = t485 * t663;
t741 = t485 * t667;
t536 = t572 + t609;
t738 = t536 * t663;
t737 = t536 * t667;
t652 = t664 ^ 2;
t653 = t668 ^ 2;
t712 = t652 + t653;
t623 = t712 * qJDD(1);
t730 = t623 * t657;
t729 = t623 * t658;
t697 = t664 * t668 * t670;
t628 = qJDD(4) + t697;
t728 = t628 * t664;
t727 = t628 * t668;
t629 = qJDD(4) - t697;
t726 = t629 * t664;
t725 = t629 * t668;
t724 = t633 * t662;
t723 = t633 * t666;
t722 = t639 * t663;
t721 = t639 * t667;
t720 = t652 * t670;
t719 = t653 * t670;
t523 = t530 - t660;
t717 = t664 * t523;
t716 = t668 * t523;
t701 = t664 * t500;
t700 = t668 * t500;
t699 = t664 * t572;
t698 = t668 * t572;
t293 = t327 * t662 + t328 * t666;
t351 = t405 * t663 + t406 * t667;
t574 = -t630 * t665 - t631 * t669;
t682 = t657 * t697;
t681 = t658 * t697;
t680 = -pkin(1) * t621 - t558;
t625 = qJDD(1) * t669 - t665 * t670;
t677 = -pkin(6) * t625 - g(3) * t665;
t350 = -t405 * t667 + t406 * t663;
t452 = -t664 * t713 + t668 * t691;
t453 = -t664 * t691 - t668 * t713;
t573 = t630 * t669 - t631 * t665;
t675 = -pkin(1) * t622 - t557;
t637 = -t719 - t754;
t636 = -t719 + t754;
t635 = -t720 - t754;
t634 = t720 - t754;
t627 = (-t652 + t653) * t670;
t626 = t712 * t670;
t624 = qJDD(1) * t665 + t669 * t670;
t620 = -0.2e1 * t695 + t704;
t617 = 0.2e1 * t694 + t705;
t610 = t712 * t707;
t595 = -pkin(6) * t624 + g(3) * t669;
t587 = -t608 + t638;
t586 = -t638 + t755;
t585 = -t619 * t664 - t653 * t707;
t584 = -t618 * t668 - t652 * t707;
t583 = qJDD(4) * t658 - t610 * t657;
t582 = qJDD(4) * t657 + t610 * t658;
t580 = -t637 * t664 - t727;
t579 = t635 * t668 - t726;
t578 = t637 * t668 - t728;
t577 = -t636 * t668 - t726;
t576 = t635 * t664 + t725;
t575 = -t634 * t664 - t727;
t571 = -t608 + t755;
t570 = -t608 - t638;
t569 = -t626 * t658 - t730;
t568 = -t626 * t657 + t729;
t559 = t617 * t664 - t620 * t668;
t551 = -t638 - t755;
t547 = -t584 * t657 - t681;
t546 = -t585 * t657 + t681;
t545 = t584 * t658 - t682;
t544 = t585 * t658 + t682;
t543 = -t577 * t657 + t668 * t703;
t542 = -t575 * t657 - t664 * t703;
t541 = t577 * t658 + t657 * t704;
t540 = t575 * t658 - t657 * t705;
t534 = t608 + t755;
t529 = -t553 + t632;
t528 = t552 - t632;
t527 = t578 * t657 + t620 * t658;
t526 = t576 * t657 + t617 * t658;
t525 = -t578 * t658 + t620 * t657;
t524 = -t576 * t658 + t617 * t657;
t521 = (-t611 * t667 + t613 * t663) * t639;
t520 = (-t611 * t663 - t613 * t667) * t639;
t517 = -t559 * t657 + t627 * t658;
t516 = t559 * t658 + t627 * t657;
t515 = -t553 - t632;
t508 = (-qJD(5) - t639) * t613 - t683;
t506 = -t613 * t722 - t667 * t696;
t505 = t613 * t721 - t663 * t696;
t504 = -t549 * t663 + t611 * t721;
t503 = t549 * t667 + t611 * t722;
t502 = -t568 * t665 + t569 * t669;
t501 = t568 * t669 + t569 * t665;
t499 = -t521 * t664 + t609 * t668;
t498 = -t553 + t552;
t497 = t586 * t667 - t738;
t496 = -t587 * t663 + t769;
t495 = t586 * t663 + t737;
t494 = t587 * t667 + t771;
t489 = -t570 * t663 - t737;
t488 = t570 * t667 - t738;
t487 = -t632 - t552;
t483 = pkin(1) * t654 + qJ(2) * t688;
t482 = t551 * t667 - t771;
t481 = t551 * t663 + t769;
t474 = (-t554 * t666 + t556 * t662) * t633;
t473 = (-t554 * t662 - t556 * t666) * t633;
t468 = -t506 * t664 + t698;
t467 = -t504 * t664 - t698;
t466 = -t525 * t665 + t527 * t669;
t465 = -t524 * t665 + t526 * t669;
t464 = t525 * t669 + t527 * t665;
t463 = t524 * t669 + t526 * t665;
t462 = -t552 - t553;
t461 = pkin(3) * t578 - qJ(3) * t580 + t713;
t460 = pkin(3) * t576 - qJ(3) * t579 + t691;
t459 = -qJ(2) * t470 + (-pkin(2) * t657 + qJ(3) * t658) * t654;
t457 = -qJD(6) * t556 - t689;
t456 = qJ(2) * t690 + (pkin(2) * t658 + qJ(3) * t657 + pkin(1)) * t654;
t455 = pkin(3) * t617 - t579 * t752 + t716;
t454 = pkin(3) * t620 - t580 * t752 - t717;
t451 = -t507 * t667 - t512 * t663;
t450 = t508 * t667 + t511 * t663;
t449 = -t507 * t663 + t512 * t667;
t448 = t508 * t663 - t511 * t667;
t447 = -t499 * t657 + t520 * t658;
t446 = t499 * t658 + t520 * t657;
t445 = -pkin(3) * t626 - t453;
t444 = -t497 * t664 - t507 * t668;
t443 = -t496 * t664 - t512 * t668;
t442 = t528 * t666 - t744;
t441 = -t529 * t662 + t770;
t440 = t528 * t662 + t743;
t439 = t529 * t666 + t772;
t438 = t489 * t668 - t511 * t664;
t437 = t489 * t664 + t511 * t668;
t436 = -t515 * t662 - t743;
t435 = t515 * t666 - t744;
t434 = t482 * t668 - t508 * t664;
t433 = t482 * t664 + t508 * t668;
t430 = -t450 * t664 - t571 * t668;
t429 = -t531 + t673;
t424 = (qJD(6) + t633) * t556 + t689;
t423 = -pkin(8) * t488 + t741;
t422 = -t556 * t724 - t666 * t673;
t421 = t556 * t723 - t662 * t673;
t420 = -t457 * t662 + t554 * t723;
t419 = t457 * t666 + t554 * t724;
t418 = -pkin(8) * t481 + t742;
t417 = t487 * t666 - t772;
t416 = t487 * t662 + t770;
t414 = -t468 * t657 + t505 * t658;
t413 = -t467 * t657 + t503 * t658;
t412 = t468 * t658 + t505 * t657;
t411 = t467 * t658 + t503 * t657;
t410 = t451 * t668 - t534 * t664;
t409 = t451 * t664 + t534 * t668;
t408 = t452 * t657 + t523 * t658;
t407 = -t452 * t658 + t523 * t657;
t403 = -pkin(3) * t729 - qJ(2) * t568 - t445 * t657;
t402 = -pkin(3) * t730 + qJ(2) * t569 + t445 * t658;
t401 = -t473 * t663 + t474 * t667;
t400 = t473 * t667 + t474 * t663;
t397 = -t444 * t657 + t495 * t658;
t396 = -t443 * t657 + t494 * t658;
t395 = t444 * t658 + t495 * t657;
t394 = t443 * t658 + t494 * t657;
t393 = -t401 * t664 + t668 * t672;
t392 = t437 * t657 + t488 * t658;
t391 = -t437 * t658 + t488 * t657;
t390 = t433 * t657 + t481 * t658;
t389 = -t433 * t658 + t481 * t657;
t388 = pkin(3) * t452 - qJ(3) * t453;
t387 = -pkin(4) * t488 + t406;
t385 = -pkin(4) * t481 + t405;
t382 = -t440 * t663 + t442 * t667;
t381 = -t439 * t663 + t441 * t667;
t380 = t440 * t667 + t442 * t663;
t379 = t439 * t667 + t441 * t663;
t376 = -qJ(2) * t525 - t454 * t657 + t461 * t658;
t375 = -qJ(2) * t524 - t455 * t657 + t460 * t658;
t374 = -t430 * t657 + t448 * t658;
t373 = t430 * t658 + t448 * t657;
t372 = pkin(3) * t523 - t453 * t752;
t371 = -t435 * t663 + t436 * t667;
t370 = t435 * t667 + t436 * t663;
t369 = t409 * t657 + t449 * t658;
t368 = -t409 * t658 + t449 * t657;
t367 = -pkin(1) * t580 + qJ(2) * t527 + t454 * t658 + t461 * t657;
t366 = -pkin(1) * t579 + qJ(2) * t526 + t455 * t658 + t460 * t657;
t365 = -pkin(9) * t435 + t745;
t364 = -t425 * t666 - t429 * t662;
t363 = -t424 * t666 - t662 * t761;
t362 = -t425 * t662 + t429 * t666;
t361 = -t424 * t662 + t666 * t761;
t360 = -t421 * t663 + t422 * t667;
t359 = -t419 * t663 + t420 * t667;
t358 = t421 * t667 + t422 * t663;
t357 = t419 * t667 + t420 * t663;
t356 = -pkin(9) * t416 + t746;
t355 = -t416 * t663 + t417 * t667;
t354 = t416 * t667 + t417 * t663;
t353 = -t407 * t665 + t408 * t669;
t352 = t407 * t669 + t408 * t665;
t349 = -t393 * t657 + t400 * t658;
t348 = t393 * t658 + t400 * t657;
t347 = -t360 * t664 + t700;
t346 = -t359 * t664 - t700;
t345 = t351 * t668 + t485 * t664;
t344 = t351 * t664 - t485 * t668;
t343 = -t382 * t664 - t425 * t668;
t342 = -t381 * t664 - t429 * t668;
t341 = t371 * t668 + t664 * t761;
t340 = t371 * t664 - t668 * t761;
t339 = -t391 * t665 + t392 * t669;
t338 = t391 * t669 + t392 * t665;
t337 = -pkin(5) * t761 + pkin(9) * t436 + t746;
t336 = -pkin(8) * t449 - t350;
t335 = -t389 * t665 + t390 * t669;
t334 = t389 * t669 + t390 * t665;
t333 = -pkin(5) * t424 + pkin(9) * t417 - t745;
t332 = pkin(3) * t437 + pkin(4) * t511 + pkin(8) * t489 - qJ(3) * t438 + t742;
t331 = t355 * t668 + t424 * t664;
t330 = t355 * t664 - t424 * t668;
t329 = pkin(3) * t433 + pkin(4) * t508 + pkin(8) * t482 - qJ(3) * t434 - t741;
t325 = -t368 * t665 + t369 * t669;
t324 = t368 * t669 + t369 * t665;
t323 = -t362 * t663 + t364 * t667;
t322 = -t361 * t663 + t363 * t667;
t321 = t362 * t667 + t364 * t663;
t320 = t361 * t667 + t363 * t663;
t319 = -qJ(2) * t407 - t372 * t657 + t388 * t658;
t318 = -t343 * t657 + t380 * t658;
t317 = -t342 * t657 + t379 * t658;
t316 = t343 * t658 + t380 * t657;
t315 = t342 * t658 + t379 * t657;
t314 = -t322 * t664 - t498 * t668;
t313 = -t347 * t657 + t358 * t658;
t312 = -t346 * t657 + t357 * t658;
t311 = t347 * t658 + t358 * t657;
t310 = t346 * t658 + t357 * t657;
t309 = t340 * t657 + t370 * t658;
t308 = -t340 * t658 + t370 * t657;
t307 = t323 * t668 + t462 * t664;
t306 = t323 * t664 - t462 * t668;
t305 = pkin(3) * t488 - t668 * t387 - t664 * t423 - t438 * t752;
t304 = t344 * t657 + t350 * t658;
t303 = -t344 * t658 + t350 * t657;
t302 = pkin(3) * t481 - t668 * t385 - t664 * t418 - t434 * t752;
t301 = -pkin(1) * t453 + qJ(2) * t408 + t372 * t658 + t388 * t657;
t300 = t330 * t657 + t354 * t658;
t299 = -t330 * t658 + t354 * t657;
t298 = pkin(3) * t409 + pkin(4) * t534 + pkin(8) * t451 - qJ(3) * t410 + t351;
t297 = -pkin(4) * t370 - pkin(5) * t435 + t328;
t296 = -pkin(4) * t321 - pkin(5) * t362;
t295 = -pkin(4) * t354 - pkin(5) * t416 + t327;
t294 = -t664 * t336 + (pkin(3) + t750) * t449 - t752 * t410;
t291 = -pkin(8) * t370 - t337 * t663 + t365 * t667;
t290 = -pkin(8) * t354 - t333 * t663 + t356 * t667;
t289 = -pkin(5) * t415 + pkin(9) * t293;
t288 = pkin(3) * t344 - pkin(4) * t485 + pkin(8) * t351 - qJ(3) * t345;
t287 = -t314 * t657 + t320 * t658;
t286 = t314 * t658 + t320 * t657;
t285 = -pkin(9) * t362 - t292;
t284 = t306 * t657 + t321 * t658;
t283 = -t306 * t658 + t321 * t657;
t282 = -pkin(5) * t462 + pkin(9) * t364 + t293;
t281 = -qJ(2) * t391 - t305 * t657 + t332 * t658;
t280 = -t308 * t665 + t309 * t669;
t279 = t308 * t669 + t309 * t665;
t278 = -qJ(2) * t389 - t302 * t657 + t329 * t658;
t277 = -t303 * t665 + t304 * t669;
t276 = t303 * t669 + t304 * t665;
t275 = -pkin(1) * t438 + qJ(2) * t392 + t305 * t658 + t332 * t657;
t274 = -t299 * t665 + t300 * t669;
t273 = t299 * t669 + t300 * t665;
t272 = -pkin(1) * t434 + qJ(2) * t390 + t302 * t658 + t329 * t657;
t271 = -t752 * t345 + (pkin(3) + t679) * t350;
t270 = pkin(3) * t340 - pkin(4) * t761 + pkin(8) * t371 - qJ(3) * t341 + t337 * t667 + t365 * t663;
t269 = t293 * t667 - t748;
t268 = t293 * t663 + t747;
t267 = -qJ(2) * t368 - t294 * t657 + t298 * t658;
t266 = t269 * t668 + t415 * t664;
t265 = t269 * t664 - t415 * t668;
t264 = pkin(3) * t330 - pkin(4) * t424 + pkin(8) * t355 - qJ(3) * t331 + t333 * t667 + t356 * t663;
t263 = -pkin(1) * t410 + qJ(2) * t369 + t294 * t658 + t298 * t657;
t262 = -t283 * t665 + t284 * t669;
t261 = t283 * t669 + t284 * t665;
t260 = -pkin(4) * t268 - pkin(5) * t292;
t259 = pkin(3) * t370 - t664 * t291 - t668 * t297 - t341 * t752;
t258 = -pkin(8) * t321 - t282 * t663 + t285 * t667;
t257 = pkin(3) * t354 - t664 * t290 - t668 * t295 - t331 * t752;
t256 = -qJ(2) * t303 - t271 * t657 + t288 * t658;
t255 = -pkin(1) * t345 + qJ(2) * t304 + t271 * t658 + t288 * t657;
t254 = -pkin(8) * t268 - pkin(9) * t747 - t289 * t663;
t253 = t265 * t657 + t268 * t658;
t252 = -t265 * t658 + t268 * t657;
t251 = pkin(3) * t306 - pkin(4) * t462 + pkin(8) * t323 - qJ(3) * t307 + t282 * t667 + t285 * t663;
t250 = -qJ(2) * t308 - t259 * t657 + t270 * t658;
t249 = -pkin(1) * t341 + qJ(2) * t309 + t259 * t658 + t270 * t657;
t248 = pkin(3) * t321 - t664 * t258 - t668 * t296 - t307 * t752;
t247 = -qJ(2) * t299 - t257 * t657 + t264 * t658;
t246 = -pkin(1) * t331 + qJ(2) * t300 + t257 * t658 + t264 * t657;
t245 = -t252 * t665 + t253 * t669;
t244 = t252 * t669 + t253 * t665;
t243 = pkin(3) * t265 - pkin(4) * t415 + pkin(8) * t269 - pkin(9) * t748 - qJ(3) * t266 + t289 * t667;
t242 = -qJ(2) * t283 - t248 * t657 + t251 * t658;
t241 = -pkin(1) * t307 + qJ(2) * t284 + t248 * t658 + t251 * t657;
t240 = pkin(3) * t268 - t664 * t254 - t668 * t260 - t266 * t752;
t239 = -qJ(2) * t252 - t240 * t657 + t243 * t658;
t238 = -pkin(1) * t266 + qJ(2) * t253 + t240 * t658 + t243 * t657;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t624, -t625, 0, t574, 0, 0, 0, 0, 0, 0, -t687, t685, 0, t432, 0, 0, 0, 0, 0, 0, 0, t687, -t685, t399, 0, 0, 0, 0, 0, 0, t465, t466, t502, t353, 0, 0, 0, 0, 0, 0, t335, t339, t325, t277, 0, 0, 0, 0, 0, 0, t274, t280, t262, t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t625, -t624, 0, t573, 0, 0, 0, 0, 0, 0, -t685, -t687, 0, -t775, 0, 0, 0, 0, 0, 0, 0, t685, t687, t398, 0, 0, 0, 0, 0, 0, t463, t464, t501, t352, 0, 0, 0, 0, 0, 0, t334, t338, t324, t276, 0, 0, 0, 0, 0, 0, t273, t279, t261, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t654, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t654, 0, 0, 0, 0, 0, 0, t579, t580, 0, t453, 0, 0, 0, 0, 0, 0, t434, t438, t410, t345, 0, 0, 0, 0, 0, 0, t331, t341, t307, t266; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t625, 0, -t624, 0, t677, -t595, -t573, -pkin(6) * t573, 0, 0, -t685, 0, -t687, 0, t756, -t778, t775, pkin(6) * t775 + qJ(2) * t739 - t483 * t665, 0, t685, t687, 0, 0, 0, -t398, -t756, t778, -pkin(6) * t398 - t456 * t665 + t459 * t669, -t544 * t665 + t546 * t669, -t516 * t665 + t517 * t669, -t541 * t665 + t543 * t669, -t545 * t665 + t547 * t669, -t540 * t665 + t542 * t669, -t582 * t665 + t583 * t669, -pkin(6) * t463 - t366 * t665 + t375 * t669, -pkin(6) * t464 - t367 * t665 + t376 * t669, -pkin(6) * t501 - t402 * t665 + t403 * t669, -pkin(6) * t352 - t301 * t665 + t319 * t669, -t412 * t665 + t414 * t669, -t373 * t665 + t374 * t669, -t394 * t665 + t396 * t669, -t411 * t665 + t413 * t669, -t395 * t665 + t397 * t669, -t446 * t665 + t447 * t669, -pkin(6) * t334 - t272 * t665 + t278 * t669, -pkin(6) * t338 - t275 * t665 + t281 * t669, -pkin(6) * t324 - t263 * t665 + t267 * t669, -pkin(6) * t276 - t255 * t665 + t256 * t669, -t311 * t665 + t313 * t669, -t286 * t665 + t287 * t669, -t315 * t665 + t317 * t669, -t310 * t665 + t312 * t669, -t316 * t665 + t318 * t669, -t348 * t665 + t349 * t669, -pkin(6) * t273 - t246 * t665 + t247 * t669, -pkin(6) * t279 - t249 * t665 + t250 * t669, -pkin(6) * t261 - t241 * t665 + t242 * t669, -pkin(6) * t244 - t238 * t665 + t239 * t669; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t624, 0, t625, 0, t595, t677, t574, pkin(6) * t574, 0, 0, t687, 0, -t685, 0, t778, t756, t432, pkin(6) * t432 + qJ(2) * t740 + t483 * t669, 0, -t687, t685, 0, 0, 0, t399, -t778, -t756, pkin(6) * t399 + t456 * t669 + t459 * t665, t544 * t669 + t546 * t665, t516 * t669 + t517 * t665, t541 * t669 + t543 * t665, t545 * t669 + t547 * t665, t540 * t669 + t542 * t665, t582 * t669 + t583 * t665, pkin(6) * t465 + t366 * t669 + t375 * t665, pkin(6) * t466 + t367 * t669 + t376 * t665, pkin(6) * t502 + t402 * t669 + t403 * t665, pkin(6) * t353 + t301 * t669 + t319 * t665, t412 * t669 + t414 * t665, t373 * t669 + t374 * t665, t394 * t669 + t396 * t665, t411 * t669 + t413 * t665, t395 * t669 + t397 * t665, t446 * t669 + t447 * t665, pkin(6) * t335 + t272 * t669 + t278 * t665, pkin(6) * t339 + t275 * t669 + t281 * t665, pkin(6) * t325 + t263 * t669 + t267 * t665, pkin(6) * t277 + t255 * t669 + t256 * t665, t311 * t669 + t313 * t665, t286 * t669 + t287 * t665, t315 * t669 + t317 * t665, t310 * t669 + t312 * t665, t316 * t669 + t318 * t665, t348 * t669 + t349 * t665, pkin(6) * t274 + t246 * t669 + t247 * t665, pkin(6) * t280 + t249 * t669 + t250 * t665, pkin(6) * t262 + t241 * t669 + t242 * t665, pkin(6) * t245 + t238 * t669 + t239 * t665; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t630, t631, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t675, t680, 0, -pkin(1) * t492, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) - 0.2e1 * t656 - t675, -t680 + t702 + 0.2e1 * t706, pkin(1) * t470 - pkin(2) * t533 + qJ(3) * t530, (t619 - t695) * t668, -t617 * t668 - t620 * t664, -t636 * t664 + t725, (-t618 + t694) * t664, t634 * t668 - t728, 0, pkin(1) * t524 + qJ(3) * t617 - t576 * t752 + t717, pkin(1) * t525 + qJ(3) * t620 - t578 * t752 + t716, pkin(1) * t568 - qJ(3) * t626 + t623 * t752 - t452, pkin(1) * t407 + qJ(3) * t523 - t452 * t752, t506 * t668 + t699, t450 * t668 - t571 * t664, t496 * t668 - t512 * t664, t504 * t668 - t699, t497 * t668 - t507 * t664, t521 * t668 + t609 * t664, pkin(1) * t389 + qJ(3) * t481 - t664 * t385 + t668 * t418 - t433 * t752, pkin(1) * t391 + qJ(3) * t488 - t664 * t387 + t668 * t423 - t437 * t752, pkin(1) * t368 + t668 * t336 + (qJ(3) + t751) * t449 - t752 * t409, pkin(1) * t303 - t752 * t344 + (qJ(3) + t678) * t350, t360 * t668 + t701, t322 * t668 - t498 * t664, t381 * t668 - t429 * t664, t359 * t668 - t701, t382 * t668 - t425 * t664, t401 * t668 + t664 * t672, pkin(1) * t299 + qJ(3) * t354 + t668 * t290 - t664 * t295 - t330 * t752, pkin(1) * t308 + qJ(3) * t370 + t668 * t291 - t664 * t297 - t340 * t752, pkin(1) * t283 + qJ(3) * t321 + t668 * t258 - t664 * t296 - t306 * t752, pkin(1) * t252 + qJ(3) * t268 + t668 * t254 - t664 * t260 - t265 * t752;];
tauB_reg  = t1;
