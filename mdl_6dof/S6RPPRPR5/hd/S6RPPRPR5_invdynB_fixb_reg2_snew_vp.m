% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:22:01
% EndTime: 2019-05-05 14:22:12
% DurationCPUTime: 7.14s
% Computational Cost: add. (29915->513), mult. (61312->733), div. (0->0), fcn. (36986->8), ass. (0->343)
t517 = sin(pkin(9));
t518 = cos(pkin(9));
t524 = cos(qJ(4));
t567 = qJD(1) * t524;
t478 = -t518 * qJD(4) + t517 * t567;
t480 = qJD(4) * t517 + t518 * t567;
t440 = t480 * t478;
t565 = qJD(1) * qJD(4);
t548 = t524 * t565;
t521 = sin(qJ(4));
t563 = qJDD(1) * t521;
t485 = t548 + t563;
t600 = -t440 + t485;
t606 = t517 * t600;
t605 = t518 * t600;
t520 = sin(qJ(6));
t523 = cos(qJ(6));
t429 = t523 * t478 + t480 * t520;
t431 = -t478 * t520 + t480 * t523;
t383 = t431 * t429;
t529 = qJDD(6) + t485;
t602 = -t383 + t529;
t604 = t520 * t602;
t603 = t523 * t602;
t568 = qJD(1) * t521;
t503 = qJD(6) + t568;
t414 = t503 * t429;
t549 = t521 * t565;
t561 = qJDD(1) * t524;
t486 = -t549 + t561;
t460 = t518 * qJDD(4) - t486 * t517;
t461 = qJDD(4) * t517 + t486 * t518;
t530 = qJD(6) * t429 - t460 * t520 - t461 * t523;
t601 = -t414 - t530;
t545 = -t523 * t460 + t520 * t461;
t344 = (qJD(6) - t503) * t431 + t545;
t527 = qJD(1) ^ 2;
t522 = sin(qJ(1));
t525 = cos(qJ(1));
t496 = t525 * g(1) + t522 * g(2);
t514 = qJDD(1) * qJ(2);
t537 = t496 - t514;
t592 = pkin(1) + qJ(3);
t599 = t527 * t592 - qJDD(3) + t537;
t427 = t429 ^ 2;
t428 = t431 ^ 2;
t476 = t478 ^ 2;
t477 = t480 ^ 2;
t502 = t503 ^ 2;
t598 = 2 * qJD(3);
t597 = pkin(2) + pkin(3);
t596 = pkin(4) * t521;
t595 = pkin(4) * t524;
t560 = qJDD(1) * t525;
t489 = -t522 * t527 + t560;
t594 = pkin(6) * t489;
t562 = qJDD(1) * t522;
t490 = t525 * t527 + t562;
t593 = pkin(6) * t490;
t591 = qJ(2) - pkin(7);
t590 = qJDD(1) * pkin(1);
t519 = t527 * pkin(7);
t495 = t522 * g(1) - t525 * g(2);
t540 = -qJDD(2) + t495;
t531 = t527 * qJ(2) + t540;
t546 = t592 * qJDD(1);
t528 = t546 + t531;
t539 = qJ(5) * t521 + t595;
t384 = t485 * pkin(4) - t486 * qJ(5) - t519 + (qJD(4) * t539 + t598) * qJD(1) + t528;
t526 = qJD(4) ^ 2;
t538 = -qJ(5) * t524 + t596;
t535 = t527 * t538;
t564 = qJD(2) * qJD(1);
t512 = 0.2e1 * t564;
t443 = -qJDD(1) * pkin(7) + t512 - t599;
t547 = t524 * g(3) - t521 * t443;
t394 = -t526 * pkin(4) + qJDD(4) * qJ(5) - t521 * t535 - t547;
t324 = 0.2e1 * qJD(5) * t480 - t518 * t384 + t517 * t394;
t553 = t478 * t568;
t419 = -t461 - t553;
t306 = pkin(5) * t600 + pkin(8) * t419 - t324;
t325 = -0.2e1 * qJD(5) * t478 + t517 * t384 + t518 * t394;
t536 = pkin(5) * t568 - pkin(8) * t480;
t315 = -t476 * pkin(5) + t460 * pkin(8) - t536 * t568 + t325;
t270 = -t523 * t306 + t315 * t520;
t271 = t520 * t306 + t523 * t315;
t246 = -t270 * t523 + t271 * t520;
t589 = t246 * t517;
t588 = t246 * t518;
t425 = t521 * g(3) + t524 * t443;
t393 = qJDD(4) * pkin(4) + qJ(5) * t526 - t524 * t535 - qJDD(5) + t425;
t337 = pkin(5) * t460 + pkin(8) * t476 - t480 * t536 + t393;
t587 = t337 * t520;
t586 = t337 * t523;
t371 = t383 + t529;
t585 = t371 * t520;
t584 = t371 * t523;
t421 = t440 + t485;
t583 = t421 * t517;
t582 = t421 * t518;
t554 = t521 * t524 * t527;
t493 = qJDD(4) + t554;
t581 = t493 * t521;
t580 = t493 * t524;
t494 = qJDD(4) - t554;
t579 = t494 * t521;
t578 = t494 * t524;
t577 = t503 * t520;
t576 = t503 * t523;
t515 = t521 ^ 2;
t575 = t515 * t527;
t516 = t524 ^ 2;
t574 = t516 * t527;
t573 = t517 * t393;
t572 = t518 * t393;
t559 = qJD(1) * t598;
t455 = t528 + t559;
t442 = -t519 + t455;
t571 = t521 * t442;
t570 = t524 * t442;
t569 = t515 + t516;
t558 = t521 * t383;
t557 = t524 * t383;
t556 = t521 * t440;
t555 = t524 * t440;
t552 = t480 * t568;
t551 = t517 * t568;
t550 = t518 * t568;
t247 = t270 * t520 + t523 * t271;
t287 = t517 * t324 + t518 * t325;
t378 = -t521 * t425 - t524 * t547;
t456 = -0.2e1 * t564 + t599;
t396 = -t455 * t522 - t525 * t456;
t465 = -pkin(1) * t527 + t512 - t537;
t466 = t531 + t590;
t405 = t525 * t465 - t466 * t522;
t446 = -t495 * t522 - t525 * t496;
t544 = t522 * t554;
t543 = t525 * t554;
t542 = g(3) * t522 + t594;
t541 = g(3) * t525 - t593;
t286 = -t324 * t518 + t325 * t517;
t377 = t524 * t425 - t521 * t547;
t395 = t455 * t525 - t456 * t522;
t402 = t465 * t522 + t466 * t525;
t445 = t495 * t525 - t496 * t522;
t534 = -t496 + 0.2e1 * t514 + t512;
t509 = -pkin(2) * t527 + g(3);
t533 = -pkin(2) * t562 + t525 * t509 - t593;
t417 = t460 + t552;
t501 = -t526 - t574;
t500 = t526 - t574;
t499 = -t526 - t575;
t498 = -t526 + t575;
t492 = (-t515 + t516) * t527;
t491 = t569 * t527;
t488 = t569 * qJDD(1);
t487 = -0.2e1 * t549 + t561;
t484 = 0.2e1 * t548 + t563;
t482 = t569 * t565;
t475 = t524 * t485;
t464 = -t477 - t575;
t463 = -t477 + t575;
t462 = t476 - t575;
t459 = t486 * t521 + t516 * t565;
t458 = t515 * t565 - t475;
t454 = -t501 * t521 - t580;
t453 = t499 * t524 - t579;
t452 = t501 * t524 - t581;
t451 = t500 * t524 + t579;
t450 = t499 * t521 + t578;
t449 = t498 * t521 + t580;
t447 = t597 * t488;
t444 = -pkin(2) * t560 - t509 * t522 - t594;
t439 = -t488 * t525 + t491 * t522;
t438 = -t488 * t522 - t491 * t525;
t437 = -t477 + t476;
t436 = -pkin(2) * t455 + qJ(2) * g(3);
t434 = -t484 * t521 + t487 * t524;
t433 = -pkin(2) * t456 + g(3) * t592;
t432 = -t575 - t476;
t418 = t461 - t553;
t416 = t460 - t552;
t412 = t476 + t477;
t411 = (-t478 * t518 + t480 * t517) * t568;
t410 = (-t478 * t517 - t480 * t518) * t568;
t409 = -t428 + t502;
t408 = t427 - t502;
t407 = t452 * t525 - t487 * t522;
t406 = t450 * t525 - t484 * t522;
t404 = t452 * t522 + t487 * t525;
t403 = t450 * t522 + t484 * t525;
t401 = t461 * t518 - t480 * t551;
t400 = t461 * t517 + t480 * t550;
t399 = -t460 * t517 + t478 * t550;
t398 = t460 * t518 + t478 * t551;
t397 = -t428 - t502;
t392 = t411 * t521 - t475;
t390 = t462 * t518 - t583;
t389 = -t464 * t517 - t582;
t388 = -t463 * t517 + t605;
t387 = t462 * t517 + t582;
t386 = t464 * t518 - t583;
t385 = t463 * t518 + t606;
t382 = -t428 + t427;
t379 = -t502 - t427;
t376 = t432 * t518 - t606;
t375 = t432 * t517 + t605;
t374 = t401 * t521 - t555;
t373 = t399 * t521 + t555;
t368 = -qJD(6) * t431 - t545;
t367 = t417 * t518 - t419 * t517;
t366 = t416 * t518 - t418 * t517;
t365 = t417 * t517 + t419 * t518;
t364 = t416 * t517 + t418 * t518;
t363 = (-t429 * t523 + t431 * t520) * t503;
t362 = (-t429 * t520 - t431 * t523) * t503;
t361 = t491 * t597 + t378;
t360 = -t427 - t428;
t359 = -t454 * t591 - t487 * t597 + t571;
t358 = -t453 * t591 - t484 * t597 - t570;
t357 = t377 * t525 - t442 * t522;
t356 = t377 * t522 + t442 * t525;
t355 = t389 * t524 + t418 * t521;
t354 = t390 * t521 - t417 * t524;
t353 = t389 * t521 - t418 * t524;
t352 = t388 * t521 + t419 * t524;
t351 = t366 * t521 + t437 * t524;
t350 = t376 * t524 - t416 * t521;
t349 = t376 * t521 + t416 * t524;
t348 = -t414 + t530;
t343 = (qJD(6) + t503) * t431 + t545;
t342 = t408 * t523 - t585;
t341 = -t409 * t520 + t603;
t340 = t408 * t520 + t584;
t339 = t409 * t523 + t604;
t338 = -qJ(5) * t386 - t572;
t336 = -t431 * t577 - t523 * t530;
t335 = t431 * t576 - t520 * t530;
t334 = -t368 * t520 + t429 * t576;
t333 = t368 * t523 + t429 * t577;
t332 = t367 * t524 - t412 * t521;
t331 = t367 * t521 + t412 * t524;
t330 = -t397 * t520 - t584;
t329 = t397 * t523 - t585;
t328 = t452 * t597 - t454 * t592 + t547;
t327 = t450 * t597 - t453 * t592 + t425;
t326 = -qJ(5) * t375 - t573;
t322 = t379 * t523 - t604;
t321 = t379 * t520 + t603;
t320 = -t362 * t517 + t363 * t518;
t319 = t362 * t518 + t363 * t517;
t318 = t353 * t525 - t386 * t522;
t317 = t353 * t522 + t386 * t525;
t316 = t320 * t521 - t524 * t529;
t314 = t349 * t525 - t375 * t522;
t313 = t349 * t522 + t375 * t525;
t312 = -t378 * t591 - t442 * t597;
t310 = -pkin(4) * t386 + t325;
t309 = t331 * t525 - t365 * t522;
t308 = t331 * t522 + t365 * t525;
t307 = -pkin(4) * t375 + t324;
t303 = -t344 * t523 - t348 * t520;
t302 = -t343 * t523 - t520 * t601;
t301 = -t344 * t520 + t348 * t523;
t300 = -t343 * t520 + t523 * t601;
t299 = -t340 * t517 + t342 * t518;
t298 = -t339 * t517 + t341 * t518;
t297 = t340 * t518 + t342 * t517;
t296 = t339 * t518 + t341 * t517;
t295 = -t335 * t517 + t336 * t518;
t294 = -t333 * t517 + t334 * t518;
t293 = t335 * t518 + t336 * t517;
t292 = t333 * t518 + t334 * t517;
t291 = -pkin(8) * t329 - t586;
t290 = -t329 * t517 + t330 * t518;
t289 = t329 * t518 + t330 * t517;
t288 = -pkin(8) * t321 - t587;
t285 = t377 * t597 - t378 * t592;
t284 = -t321 * t517 + t322 * t518;
t283 = t321 * t518 + t322 * t517;
t282 = t295 * t521 - t557;
t281 = t294 * t521 + t557;
t280 = t287 * t524 - t393 * t521;
t279 = t287 * t521 + t393 * t524;
t278 = -qJ(5) * t365 - t286;
t277 = -pkin(5) * t601 + pkin(8) * t330 - t587;
t276 = t299 * t521 + t344 * t524;
t275 = t298 * t521 + t348 * t524;
t274 = t290 * t524 + t521 * t601;
t273 = t290 * t521 - t524 * t601;
t272 = -pkin(5) * t343 + pkin(8) * t322 + t586;
t268 = t284 * t524 + t343 * t521;
t267 = t284 * t521 - t343 * t524;
t266 = -t301 * t517 + t303 * t518;
t265 = -t300 * t517 + t302 * t518;
t264 = t301 * t518 + t303 * t517;
t263 = t300 * t518 + t302 * t517;
t262 = t265 * t521 + t382 * t524;
t261 = -pkin(4) * t418 + qJ(5) * t389 + t353 * t597 - t355 * t592 - t573;
t260 = t266 * t524 + t360 * t521;
t259 = t266 * t521 - t360 * t524;
t258 = t279 * t525 - t286 * t522;
t257 = t279 * t522 + t286 * t525;
t256 = pkin(4) * t416 + qJ(5) * t376 + t349 * t597 - t350 * t592 + t572;
t255 = t273 * t525 - t289 * t522;
t254 = t273 * t522 + t289 * t525;
t253 = t524 * t310 + t521 * t338 - t355 * t591 - t386 * t597;
t252 = -pkin(4) * t264 - pkin(5) * t301;
t251 = t524 * t307 + t521 * t326 - t350 * t591 - t375 * t597;
t250 = t267 * t525 - t283 * t522;
t249 = t267 * t522 + t283 * t525;
t248 = -pkin(4) * t289 - pkin(5) * t329 + t271;
t245 = t521 * t278 - t591 * t332 + (-t595 - t597) * t365;
t244 = -pkin(4) * t283 - pkin(5) * t321 + t270;
t243 = -qJ(5) * t289 - t277 * t517 + t291 * t518;
t242 = pkin(4) * t412 + qJ(5) * t367 + t331 * t597 - t332 * t592 + t287;
t241 = pkin(5) * t337 + pkin(8) * t247;
t240 = -qJ(5) * t283 - t272 * t517 + t288 * t518;
t239 = -pkin(8) * t301 - t246;
t238 = t259 * t525 - t264 * t522;
t237 = t259 * t522 + t264 * t525;
t236 = -pkin(5) * t360 + pkin(8) * t303 + t247;
t235 = t247 * t518 - t589;
t234 = t247 * t517 + t588;
t233 = pkin(4) * t393 + qJ(5) * t287 + t279 * t597 - t280 * t592;
t232 = t235 * t524 - t337 * t521;
t231 = t235 * t521 + t337 * t524;
t230 = -t591 * t280 + (-t539 - t597) * t286;
t229 = -pkin(4) * t234 - pkin(5) * t246;
t228 = -pkin(4) * t601 + qJ(5) * t290 + t273 * t597 - t274 * t592 + t518 * t277 + t517 * t291;
t227 = -qJ(5) * t264 - t236 * t517 + t239 * t518;
t226 = -pkin(4) * t343 + qJ(5) * t284 + t267 * t597 - t268 * t592 + t518 * t272 + t517 * t288;
t225 = t521 * t243 + t524 * t248 - t274 * t591 - t289 * t597;
t224 = t521 * t240 + t524 * t244 - t268 * t591 - t283 * t597;
t223 = -pkin(8) * t588 - qJ(5) * t234 - t241 * t517;
t222 = t231 * t525 - t234 * t522;
t221 = t231 * t522 + t234 * t525;
t220 = -pkin(4) * t360 + qJ(5) * t266 + t518 * t236 + t517 * t239 + t259 * t597 - t260 * t592;
t219 = t521 * t227 + t524 * t252 - t260 * t591 - t264 * t597;
t218 = pkin(4) * t337 - pkin(8) * t589 + qJ(5) * t235 + t231 * t597 - t232 * t592 + t518 * t241;
t217 = t521 * t223 + t524 * t229 - t232 * t591 - t234 * t597;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t490, -t489, 0, t446, 0, 0, 0, 0, 0, 0, 0, t490, t489, t405, 0, 0, 0, 0, 0, 0, 0, t489, -t490, t396, 0, 0, 0, 0, 0, 0, t406, t407, t439, t357, 0, 0, 0, 0, 0, 0, t314, t318, t309, t258, 0, 0, 0, 0, 0, 0, t250, t255, t238, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t489, -t490, 0, t445, 0, 0, 0, 0, 0, 0, 0, -t489, t490, t402, 0, 0, 0, 0, 0, 0, 0, t490, t489, t395, 0, 0, 0, 0, 0, 0, t403, t404, t438, t356, 0, 0, 0, 0, 0, 0, t313, t317, t308, t257, 0, 0, 0, 0, 0, 0, t249, t254, t237, t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t453, t454, 0, t378, 0, 0, 0, 0, 0, 0, t350, t355, t332, t280, 0, 0, 0, 0, 0, 0, t268, t274, t260, t232; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t489, 0, -t490, 0, -t542, -t541, -t445, -pkin(6) * t445, 0, -t489, t490, 0, 0, 0, -t402, t542, t541, -pkin(6) * t402 + (-pkin(1) * t522 + qJ(2) * t525) * g(3), 0, t490, t489, 0, 0, 0, -t395, t533, t444, -pkin(6) * t395 - t433 * t522 + t436 * t525, t459 * t525 - t544, t434 * t525 - t492 * t522, t451 * t525 - t522 * t561, t458 * t525 + t544, t449 * t525 + t521 * t562, -qJDD(4) * t522 - t482 * t525, -pkin(6) * t403 - t327 * t522 + t358 * t525, -pkin(6) * t404 - t328 * t522 + t359 * t525, -pkin(6) * t438 + t361 * t525 + t447 * t522, -pkin(6) * t356 - t285 * t522 + t312 * t525, t374 * t525 - t400 * t522, t351 * t525 - t364 * t522, t352 * t525 - t385 * t522, t373 * t525 - t398 * t522, t354 * t525 - t387 * t522, t392 * t525 - t410 * t522, -pkin(6) * t313 + t251 * t525 - t256 * t522, -pkin(6) * t317 + t253 * t525 - t261 * t522, -pkin(6) * t308 - t242 * t522 + t245 * t525, -pkin(6) * t257 + t230 * t525 - t233 * t522, t282 * t525 - t293 * t522, t262 * t525 - t263 * t522, t275 * t525 - t296 * t522, t281 * t525 - t292 * t522, t276 * t525 - t297 * t522, t316 * t525 - t319 * t522, -pkin(6) * t249 + t224 * t525 - t226 * t522, -pkin(6) * t254 + t225 * t525 - t228 * t522, -pkin(6) * t237 + t219 * t525 - t220 * t522, -pkin(6) * t221 + t217 * t525 - t218 * t522; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t490, 0, t489, 0, t541, -t542, t446, pkin(6) * t446, 0, -t490, -t489, 0, 0, 0, t405, -t541, t542, pkin(6) * t405 + (pkin(1) * t525 + qJ(2) * t522) * g(3), 0, -t489, t490, 0, 0, 0, t396, -t444, t533, pkin(6) * t396 + t433 * t525 + t436 * t522, t459 * t522 + t543, t434 * t522 + t492 * t525, t451 * t522 + t524 * t560, t458 * t522 - t543, t449 * t522 - t521 * t560, qJDD(4) * t525 - t482 * t522, pkin(6) * t406 + t327 * t525 + t358 * t522, pkin(6) * t407 + t328 * t525 + t359 * t522, pkin(6) * t439 + t361 * t522 - t447 * t525, pkin(6) * t357 + t285 * t525 + t312 * t522, t374 * t522 + t400 * t525, t351 * t522 + t364 * t525, t352 * t522 + t385 * t525, t373 * t522 + t398 * t525, t354 * t522 + t387 * t525, t392 * t522 + t410 * t525, pkin(6) * t314 + t251 * t522 + t256 * t525, pkin(6) * t318 + t253 * t522 + t261 * t525, pkin(6) * t309 + t242 * t525 + t245 * t522, pkin(6) * t258 + t230 * t522 + t233 * t525, t282 * t522 + t293 * t525, t262 * t522 + t263 * t525, t275 * t522 + t296 * t525, t281 * t522 + t292 * t525, t276 * t522 + t297 * t525, t316 * t522 + t319 * t525, pkin(6) * t250 + t224 * t522 + t226 * t525, pkin(6) * t255 + t225 * t522 + t228 * t525, pkin(6) * t238 + t219 * t522 + t220 * t525, pkin(6) * t222 + t217 * t522 + t218 * t525; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t495, t496, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t540 - 0.2e1 * t590, t534, pkin(1) * t466 + qJ(2) * t465, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) + t534, t540 + 0.2e1 * t546 + t559, -qJ(2) * t456 + t455 * t592, (t486 - t549) * t524, -t484 * t524 - t487 * t521, -t500 * t521 + t578, (t485 + t548) * t521, t498 * t524 - t581, 0, t450 * t591 + t484 * t592 + t571, t452 * t591 + t487 * t592 + t570, -t488 * t591 - t491 * t592 - t377, t377 * t591 + t442 * t592, t401 * t524 + t556, t366 * t524 - t437 * t521, t388 * t524 - t419 * t521, t399 * t524 - t556, t390 * t524 + t417 * t521, t411 * t524 + t485 * t521, -t521 * t307 + t524 * t326 + t349 * t591 + t375 * t592, -t521 * t310 + t524 * t338 + t353 * t591 + t386 * t592, t524 * t278 + t591 * t331 + (t592 + t596) * t365, t591 * t279 + (t538 + t592) * t286, t295 * t524 + t558, t265 * t524 - t382 * t521, t298 * t524 - t348 * t521, t294 * t524 - t558, t299 * t524 - t344 * t521, t320 * t524 + t521 * t529, t524 * t240 - t521 * t244 + t267 * t591 + t283 * t592, t524 * t243 - t521 * t248 + t273 * t591 + t289 * t592, t524 * t227 - t521 * t252 + t259 * t591 + t264 * t592, t524 * t223 - t521 * t229 + t231 * t591 + t234 * t592;];
tauB_reg  = t1;
