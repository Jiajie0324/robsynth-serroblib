% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 22:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:36:28
% EndTime: 2019-05-04 22:37:01
% DurationCPUTime: 31.65s
% Computational Cost: add. (67927->747), mult. (131272->1134), div. (0->0), fcn. (89289->12), ass. (0->544)
t725 = sin(qJ(4));
t712 = t725 ^ 2;
t731 = qJD(2) ^ 2;
t706 = t712 * t731;
t730 = qJD(4) ^ 2;
t691 = -t706 - t730;
t728 = cos(qJ(4));
t807 = t725 * t728 * t731;
t686 = qJDD(4) - t807;
t836 = t686 * t725;
t625 = -t691 * t728 + t836;
t718 = sin(pkin(6));
t721 = cos(pkin(6));
t823 = t728 * t686;
t633 = t691 * t725 + t823;
t815 = qJD(2) * qJD(4);
t799 = t728 * t815;
t813 = qJDD(2) * t725;
t671 = 0.2e1 * t799 + t813;
t716 = sin(pkin(11));
t719 = cos(pkin(11));
t561 = t633 * t716 + t671 * t719;
t565 = t633 * t719 - t671 * t716;
t726 = sin(qJ(2));
t729 = cos(qJ(2));
t767 = t561 * t729 + t565 * t726;
t463 = -t718 * t625 + t721 * t767;
t500 = t561 * t726 - t565 * t729;
t717 = sin(pkin(10));
t720 = cos(pkin(10));
t390 = t463 * t720 - t500 * t717;
t923 = qJ(1) * t390;
t396 = t463 * t717 + t500 * t720;
t922 = qJ(1) * t396;
t459 = t721 * t625 + t718 * t767;
t921 = pkin(7) * (t459 * t718 + t463 * t721);
t713 = t728 ^ 2;
t708 = t713 * t731;
t693 = -t708 - t730;
t685 = qJDD(4) + t807;
t824 = t728 * t685;
t621 = t693 * t725 + t824;
t837 = t685 * t725;
t630 = -t693 * t728 + t837;
t800 = t725 * t815;
t812 = qJDD(2) * t728;
t674 = -0.2e1 * t800 + t812;
t560 = t630 * t716 - t674 * t719;
t564 = t630 * t719 + t674 * t716;
t768 = t560 * t729 + t564 * t726;
t462 = t718 * t621 + t721 * t768;
t497 = t560 * t726 - t564 * t729;
t389 = t462 * t720 - t497 * t717;
t920 = qJ(1) * t389;
t393 = t462 * t717 + t497 * t720;
t919 = qJ(1) * t393;
t918 = pkin(1) * t459;
t917 = pkin(1) * t463;
t458 = -t721 * t621 + t718 * t768;
t916 = pkin(7) * (t458 * t718 + t462 * t721);
t690 = -t706 + t730;
t624 = t690 * t728 + t837;
t632 = -t690 * t725 + t824;
t580 = t632 * t716 - t719 * t813;
t584 = t632 * t719 + t716 * t813;
t763 = t580 * t729 + t584 * t726;
t481 = -t718 * t624 + t721 * t763;
t515 = t580 * t726 - t584 * t729;
t915 = t481 * t717 + t515 * t720;
t914 = t481 * t720 - t515 * t717;
t912 = pkin(1) * t458;
t911 = pkin(1) * t462;
t692 = t708 - t730;
t620 = t692 * t725 + t823;
t631 = -t692 * t728 + t836;
t579 = t631 * t716 + t719 * t812;
t583 = t631 * t719 - t716 * t812;
t764 = t579 * t729 + t583 * t726;
t480 = t718 * t620 + t721 * t764;
t512 = t579 * t726 - t583 * t729;
t910 = t480 * t717 + t512 * t720;
t909 = t480 * t720 - t512 * t717;
t907 = pkin(7) * t500;
t902 = t721 * t624 + t718 * t763;
t901 = pkin(7) * t497;
t896 = -t721 * t620 + t718 * t764;
t895 = qJ(3) * t561;
t894 = pkin(2) * t561 + pkin(8) * t633;
t893 = -pkin(2) * t625 + qJ(3) * t565;
t892 = qJ(3) * t560;
t891 = pkin(2) * t560 + pkin(8) * t630;
t890 = pkin(2) * t621 + qJ(3) * t564;
t888 = pkin(3) * t621;
t887 = pkin(8) * t621;
t684 = g(1) * t720 + g(2) * t717;
t683 = g(1) * t717 - t720 * g(2);
t821 = g(3) - qJDD(1);
t869 = -t721 * t683 + t718 * t821;
t577 = -t729 * t684 - t726 * t869;
t568 = -t731 * pkin(2) + t577;
t576 = -t684 * t726 + t729 * t869;
t750 = qJDD(2) * pkin(2) - t576;
t505 = t716 * t568 - t719 * t750;
t506 = t719 * t568 + t716 * t750;
t795 = t505 * t716 + t719 * t506;
t417 = t505 * t719 - t506 * t716;
t849 = t417 * t726;
t881 = t729 * t795 + t849;
t848 = t417 * t729;
t349 = -t726 * t795 + t848;
t879 = pkin(3) * t625;
t878 = pkin(8) * t625;
t724 = sin(qJ(6));
t727 = cos(qJ(6));
t816 = qJD(2) * t728;
t665 = qJD(4) * t724 + t727 * t816;
t667 = qJD(4) * t727 - t724 * t816;
t615 = t667 * t665;
t672 = t799 + t813;
t657 = qJDD(6) + t672;
t859 = -t615 + t657;
t872 = t724 * t859;
t871 = t727 * t859;
t870 = t672 + t799;
t643 = t683 * t718 + t721 * t821;
t636 = -qJDD(3) + t643;
t676 = qJDD(2) * t716 + t719 * t731;
t573 = qJ(3) * t676 - t636 * t719;
t677 = qJDD(2) * t719 - t716 * t731;
t787 = -qJ(3) * t677 - t636 * t716;
t868 = t573 * t726 + t729 * t787;
t867 = t729 * t573 - t726 * t787;
t608 = t676 * t726 - t677 * t729;
t756 = t676 * t729 + t677 * t726;
t860 = t756 * t721;
t522 = t608 * t720 + t717 * t860;
t520 = t608 * t717 - t720 * t860;
t866 = t717 * t821;
t865 = t720 * t821;
t592 = t756 * t718;
t655 = t665 ^ 2;
t656 = t667 ^ 2;
t817 = qJD(2) * t725;
t697 = qJD(6) + t817;
t694 = t697 ^ 2;
t858 = -2 * qJD(5);
t857 = pkin(4) + pkin(9);
t856 = pkin(2) * t417;
t855 = pkin(4) * t728;
t854 = pkin(7) * t718;
t853 = pkin(7) * t721;
t818 = t712 + t713;
t678 = t818 * qJDD(2);
t681 = t706 + t708;
t610 = t678 * t716 + t681 * t719;
t611 = t678 * t719 - t681 * t716;
t759 = t610 * t729 + t611 * t726;
t526 = t759 * t721;
t537 = -t610 * t726 + t611 * t729;
t448 = t526 * t720 + t537 * t717;
t852 = qJ(1) * t448;
t851 = qJ(3) * t610;
t850 = qJ(5) * t725;
t494 = -qJDD(2) * pkin(3) - t731 * pkin(8) + t505;
t847 = t494 * t725;
t846 = t494 * t728;
t575 = t615 + t657;
t845 = t575 * t727;
t844 = t665 * t697;
t841 = t671 * t725;
t838 = t674 * t728;
t831 = t697 * t724;
t830 = t697 * t727;
t673 = -t800 + t812;
t688 = pkin(5) * t817 - qJD(4) * pkin(9);
t791 = -t850 - t855;
t669 = t791 * qJD(2);
t495 = -pkin(3) * t731 + qJDD(2) * pkin(8) + t506;
t819 = -t728 * t495 + t725 * t636;
t751 = t730 * pkin(4) - t669 * t816 + t819;
t811 = qJDD(4) * qJ(5);
t421 = t811 + t673 * pkin(5) - pkin(9) * t708 + ((2 * qJD(5)) + t688) * qJD(4) - t751;
t828 = t724 * t421;
t827 = t724 * t575;
t826 = t726 * t643;
t825 = t727 * t421;
t822 = t729 * t643;
t467 = t725 * t495 + t728 * t636;
t820 = pkin(1) * t526 + t537 * t854;
t814 = qJDD(2) * t718;
t810 = -t656 - t694;
t809 = t725 * t615;
t808 = t728 * t615;
t806 = pkin(2) * t610 + pkin(3) * t681 + pkin(8) * t678;
t591 = -t665 * qJD(6) + t727 * qJDD(4) - t724 * t673;
t801 = t720 * t814;
t525 = t759 * t718;
t798 = -pkin(1) * t525 + t537 * t853;
t796 = pkin(4) * qJD(4) + t858;
t381 = t467 * t725 - t728 * t819;
t613 = -t683 * t717 - t720 * t684;
t794 = t724 * qJDD(4) + t727 * t673;
t793 = t716 * t807;
t792 = t719 * t807;
t790 = pkin(4) * t725 - qJ(5) * t728;
t679 = qJDD(2) * t729 - t726 * t731;
t789 = -pkin(7) * t679 - t826;
t755 = qJDD(2) * t726 + t729 * t731;
t788 = -pkin(7) * t755 + t822;
t753 = -qJDD(4) * pkin(4) - t730 * qJ(5) + t669 * t817 + qJDD(5) + t467;
t422 = -t685 * pkin(9) + (t672 - t799) * pkin(5) + t753;
t735 = -t673 * pkin(4) - qJ(5) * t870 + t494;
t423 = -pkin(5) * t708 - t673 * pkin(9) + (-t688 + t796) * t817 + t735;
t355 = -t422 * t727 + t423 * t724;
t357 = t422 * t724 + t423 * t727;
t312 = -t727 * t355 + t724 * t357;
t304 = t312 * t725 + t421 * t728;
t313 = t724 * t355 + t727 * t357;
t267 = t304 * t716 - t313 * t719;
t268 = t304 * t719 + t313 * t716;
t786 = t267 * t729 + t268 * t726;
t734 = qJD(4) * t858 + t751;
t436 = -t734 + t811;
t368 = t436 * t728 + t725 * t753;
t442 = t796 * t817 + t735;
t334 = t368 * t716 - t442 * t719;
t335 = t368 * t719 + t442 * t716;
t785 = t334 * t729 + t335 * t726;
t424 = pkin(4) * t681 + t436;
t429 = qJ(5) * t681 + t753;
t360 = -t424 * t725 + t429 * t728;
t605 = qJ(3) * t611;
t668 = t790 * qJDD(2);
t351 = t360 * t716 + t668 * t719 + t605;
t352 = t360 * t719 - t668 * t716 - t851;
t784 = t351 * t729 + t352 * t726;
t354 = t381 * t716 - t494 * t719;
t356 = t381 * t719 + t494 * t716;
t783 = t354 * t729 + t356 * t726;
t380 = t467 * t728 + t725 * t819;
t369 = t380 * t716 + t605;
t370 = t380 * t719 - t851;
t782 = t369 * t729 + t370 * t726;
t550 = t591 + t844;
t737 = (-qJD(6) + t697) * t667 - t794;
t472 = -t550 * t727 + t724 * t737;
t569 = -t655 - t656;
t428 = t472 * t725 + t569 * t728;
t475 = t724 * t550 + t727 * t737;
t371 = t428 * t716 - t475 * t719;
t372 = t428 * t719 + t475 * t716;
t781 = t371 * t729 + t372 * t726;
t545 = (qJD(6) + t697) * t667 + t794;
t754 = t591 - t844;
t473 = t545 * t724 - t727 * t754;
t614 = t656 - t655;
t441 = -t473 * t725 + t614 * t728;
t476 = t545 * t727 + t724 * t754;
t373 = t441 * t716 + t476 * t719;
t374 = t441 * t719 - t476 * t716;
t780 = t373 * t729 + t374 * t726;
t601 = -t694 - t655;
t510 = t724 * t601 + t871;
t447 = t510 * t725 + t545 * t728;
t511 = t601 * t727 - t872;
t387 = t447 * t716 - t511 * t719;
t392 = t447 * t719 + t511 * t716;
t779 = t387 * t729 + t392 * t726;
t518 = t727 * t810 - t827;
t451 = t518 * t725 + t728 * t754;
t519 = -t724 * t810 - t845;
t397 = t451 * t716 - t519 * t719;
t398 = t451 * t719 + t519 * t716;
t778 = t397 * t729 + t398 * t726;
t641 = t655 - t694;
t530 = -t641 * t724 - t845;
t455 = -t530 * t725 + t728 * t737;
t532 = -t641 * t727 + t827;
t403 = t455 * t716 + t532 * t719;
t405 = t455 * t719 - t532 * t716;
t777 = t403 * t729 + t405 * t726;
t642 = -t656 + t694;
t529 = -t642 * t727 - t872;
t456 = -t529 * t725 + t550 * t728;
t531 = t642 * t724 - t871;
t404 = t456 * t716 + t531 * t719;
t406 = t456 * t719 - t531 * t716;
t776 = t404 * t729 + t406 * t726;
t590 = -qJD(6) * t667 - t794;
t538 = -t590 * t727 - t665 * t831;
t503 = -t538 * t725 - t808;
t539 = t590 * t724 - t665 * t830;
t430 = t503 * t716 + t539 * t719;
t432 = t503 * t719 - t539 * t716;
t773 = t430 * t729 + t432 * t726;
t540 = -t591 * t724 - t667 * t830;
t504 = -t540 * t725 + t808;
t541 = -t591 * t727 + t667 * t831;
t431 = t504 * t716 + t541 * t719;
t433 = t504 * t719 - t541 * t716;
t772 = t431 * t729 + t433 * t726;
t554 = (t665 * t724 + t667 * t727) * t697;
t534 = -t554 * t725 + t657 * t728;
t555 = (t665 * t727 - t667 * t724) * t697;
t469 = t534 * t716 + t555 * t719;
t470 = t534 * t719 - t555 * t716;
t771 = t469 * t729 + t470 * t726;
t604 = t838 - t841;
t682 = -t706 + t708;
t552 = t604 * t716 + t682 * t719;
t553 = t604 * t719 - t682 * t716;
t770 = t552 * t729 + t553 * t726;
t508 = t576 * t729 - t577 * t726;
t509 = t576 * t726 + t577 * t729;
t639 = -t673 * t725 - t713 * t815;
t586 = t639 * t716 - t792;
t588 = t639 * t719 + t793;
t761 = t586 * t729 + t588 * t726;
t640 = t672 * t728 - t712 * t815;
t587 = t640 * t716 + t792;
t589 = t640 * t719 - t793;
t760 = t587 * t729 + t589 * t726;
t660 = t818 * t815;
t637 = -qJDD(4) * t719 + t660 * t716;
t638 = qJDD(4) * t716 + t660 * t719;
t758 = t637 * t729 + t638 * t726;
t647 = t755 * t721;
t757 = t647 * t720 + t679 * t717;
t599 = t647 * t717 - t679 * t720;
t612 = t683 * t720 - t684 * t717;
t752 = (-t525 * t718 - t526 * t721) * pkin(7);
t269 = pkin(5) * t421 - t313 * t857;
t270 = pkin(5) * t312 - qJ(5) * t313;
t303 = -t312 * t728 + t421 * t725;
t251 = -pkin(8) * t303 - t269 * t725 + t270 * t728;
t255 = -pkin(3) * t303 - qJ(5) * t421 + t312 * t857;
t234 = -pkin(2) * t303 + qJ(3) * t268 + t251 * t716 + t255 * t719;
t236 = -qJ(3) * t267 + t251 * t719 - t255 * t716;
t252 = -t267 * t726 + t268 * t729;
t749 = pkin(7) * t252 + t234 * t729 + t236 * t726;
t297 = pkin(5) * t569 - t475 * t857 - t313;
t386 = pkin(5) * t472 - qJ(5) * t475;
t427 = -t472 * t728 + t569 * t725;
t274 = -pkin(8) * t427 - t297 * t725 + t386 * t728;
t286 = -pkin(3) * t427 - qJ(5) * t569 + t472 * t857 + t312;
t253 = -pkin(2) * t427 + qJ(3) * t372 + t274 * t716 + t286 * t719;
t254 = -qJ(3) * t371 + t274 * t719 - t286 * t716;
t323 = -t371 * t726 + t372 * t729;
t748 = pkin(7) * t323 + t253 * t729 + t254 * t726;
t329 = pkin(5) * t510 - qJ(5) * t511 - t355;
t345 = pkin(5) * t545 - t511 * t857 + t825;
t446 = -t510 * t728 + t545 * t725;
t292 = -pkin(8) * t446 + t329 * t728 - t345 * t725;
t327 = -pkin(3) * t446 - qJ(5) * t545 + t510 * t857 - t828;
t258 = -pkin(2) * t446 + qJ(3) * t392 + t292 * t716 + t327 * t719;
t261 = -qJ(3) * t387 + t292 * t719 - t327 * t716;
t333 = -t387 * t726 + t392 * t729;
t747 = pkin(7) * t333 + t258 * t729 + t261 * t726;
t367 = t436 * t725 - t728 * t753;
t317 = -pkin(3) * t367 + pkin(4) * t753 - qJ(5) * t436;
t320 = -pkin(8) * t367 + t442 * t790;
t259 = -pkin(2) * t367 + qJ(3) * t335 + t317 * t719 + t320 * t716;
t266 = -qJ(3) * t334 - t317 * t716 + t320 * t719;
t302 = -t334 * t726 + t335 * t729;
t746 = pkin(7) * t302 + t259 * t729 + t266 * t726;
t330 = pkin(5) * t518 - qJ(5) * t519 - t357;
t346 = pkin(5) * t754 - t519 * t857 - t828;
t450 = -t518 * t728 + t725 * t754;
t294 = -pkin(8) * t450 + t330 * t728 - t346 * t725;
t328 = -pkin(3) * t450 - qJ(5) * t754 + t518 * t857 - t825;
t260 = -pkin(2) * t450 + qJ(3) * t398 + t294 * t716 + t328 * t719;
t263 = -qJ(3) * t397 + t294 * t719 - t328 * t716;
t338 = -t397 * t726 + t398 * t729;
t745 = pkin(7) * t338 + t260 * t729 + t263 * t726;
t287 = qJ(3) * t356 - (-pkin(3) * t719 - pkin(8) * t716 - pkin(2)) * t380;
t306 = -qJ(3) * t354 - (pkin(3) * t716 - pkin(8) * t719) * t380;
t314 = -t354 * t726 + t356 * t729;
t744 = pkin(7) * t314 + t287 * t729 + t306 * t726;
t732 = t817 * t858 + t735;
t434 = -pkin(4) * t800 + qJ(5) * t671 - t732;
t408 = -pkin(4) * t841 + t434 * t728 - t878;
t413 = -t879 + pkin(4) * t691 + (-qJDD(4) - t686) * qJ(5) + t734;
t331 = t408 * t716 + t413 * t719 + t893;
t336 = t408 * t719 - t413 * t716 - t895;
t743 = t331 * t729 + t336 * t726 - t907;
t435 = (-t674 + t800) * pkin(4) + t732;
t407 = -qJ(5) * t838 - t435 * t725 + t887;
t414 = pkin(4) * t685 + qJ(5) * t693 - t753 + t888;
t332 = t407 * t716 + t414 * t719 + t890;
t337 = t407 * t719 - t414 * t716 - t892;
t742 = t332 * t729 + t337 * t726 - t901;
t437 = t467 - t888;
t465 = t847 - t887;
t358 = t437 * t719 + t465 * t716 - t890;
t363 = -t437 * t716 + t465 * t719 + t892;
t741 = t358 * t729 + t363 * t726 + t901;
t438 = -t819 + t879;
t466 = t846 + t878;
t359 = t438 * t719 + t466 * t716 - t893;
t364 = -t438 * t716 + t466 * t719 + t895;
t740 = t359 * t729 + t364 * t726 + t907;
t739 = -pkin(7) * t756 - t867;
t738 = pkin(7) * t608 + t868;
t399 = pkin(2) * t636 + qJ(3) * t795;
t736 = pkin(7) * t881 + qJ(3) * t849 + t399 * t729;
t703 = t721 * qJDD(2);
t689 = t717 * t814;
t648 = t679 * t721;
t646 = t679 * t718;
t645 = t755 * t718;
t619 = t870 * t725;
t618 = (t673 - t800) * t728;
t603 = t671 * t728 + t674 * t725;
t600 = -t648 * t717 - t720 * t755;
t598 = t648 * t720 - t717 * t755;
t596 = t608 * t721;
t593 = t608 * t718;
t551 = -t637 * t726 + t638 * t729;
t544 = t758 * t721;
t543 = t758 * t718;
t536 = -t822 + (t645 * t718 + t647 * t721) * pkin(7);
t535 = -t826 + (-t646 * t718 - t648 * t721) * pkin(7);
t533 = t554 * t728 + t657 * t725;
t523 = t596 * t717 - t720 * t756;
t521 = -t596 * t720 - t717 * t756;
t517 = -t587 * t726 + t589 * t729;
t516 = -t586 * t726 + t588 * t729;
t507 = t509 * t721;
t502 = t540 * t728 + t809;
t501 = t538 * t728 - t809;
t491 = -pkin(1) * t646 + t718 * t576 + t721 * t788;
t490 = pkin(1) * t645 + t718 * t577 + t721 * t789;
t489 = -t552 * t726 + t553 * t729;
t488 = -pkin(2) * t676 - t506;
t487 = pkin(2) * t677 - t505;
t486 = -t718 * t619 + t721 * t760;
t485 = -t718 * t618 + t721 * t761;
t484 = t721 * t619 + t718 * t760;
t483 = t721 * t618 + t718 * t761;
t478 = -t508 * t721 + t718 * t643;
t477 = -t508 * t718 - t721 * t643;
t474 = -t544 * t717 + t551 * t720;
t471 = t544 * t720 + t551 * t717;
t454 = t529 * t728 + t550 * t725;
t453 = t530 * t728 + t725 * t737;
t449 = -t526 * t717 + t537 * t720;
t445 = qJ(1) * t449;
t444 = -t718 * t603 + t721 * t770;
t443 = t721 * t603 + t718 * t770;
t440 = t473 * t728 + t614 * t725;
t426 = (t592 * t718 + t721 * t860) * pkin(7) + t867;
t425 = (t593 * t718 + t596 * t721) * pkin(7) + t868;
t420 = pkin(3) * t674 - t846 - t891;
t419 = -pkin(3) * t671 + t847 - t894;
t412 = -t486 * t717 + t517 * t720;
t411 = -t485 * t717 + t516 * t720;
t410 = t486 * t720 + t517 * t717;
t409 = t485 * t720 + t516 * t717;
t402 = -pkin(1) * t477 + t509 * t853;
t401 = -t478 * t717 + t509 * t720;
t400 = t478 * t720 + t509 * t717;
t385 = (-t477 * t718 - t478 * t721) * pkin(7);
t384 = -t469 * t726 + t470 * t729;
t383 = -t444 * t717 + t489 * t720;
t382 = t444 * t720 + t489 * t717;
t378 = t725 * t434 + (pkin(3) + t855) * t671 + t894;
t377 = t728 * t435 + (-pkin(3) - t850) * t674 + t891;
t376 = pkin(1) * t592 - t718 * t488 + t721 * t738;
t375 = pkin(1) * t593 - t718 * t487 + t721 * t739;
t366 = t381 + t806;
t365 = -t718 * t533 + t721 * t771;
t362 = -t431 * t726 + t433 * t729;
t361 = -t430 * t726 + t432 * t729;
t348 = t424 * t728 + t429 * t725 + t806;
t347 = t881 * t721;
t344 = -t404 * t726 + t406 * t729;
t343 = -t403 * t726 + t405 * t729;
t342 = -t349 * t721 + t718 * t636;
t341 = -t349 * t718 - t721 * t636;
t340 = -t718 * t502 + t721 * t772;
t339 = -t718 * t501 + t721 * t773;
t326 = -t718 * t454 + t721 * t776;
t325 = -t718 * t453 + t721 * t777;
t324 = -t373 * t726 + t374 * t729;
t322 = -t718 * t450 + t721 * t778;
t321 = t721 * t450 + t718 * t778;
t319 = -t718 * t446 + t721 * t779;
t318 = t721 * t446 + t718 * t779;
t316 = -t718 * t440 + t721 * t780;
t315 = pkin(2) * t354 - pkin(3) * t494 + pkin(8) * t381;
t311 = -t726 * t369 + t729 * t370 + t752;
t310 = -t718 * t427 + t721 * t781;
t309 = t721 * t427 + t718 * t781;
t308 = -t342 * t717 + t720 * t881;
t307 = t342 * t720 + t717 * t881;
t305 = -t726 * t351 + t729 * t352 + t752;
t301 = -t726 * t359 + t729 * t364 + t921;
t300 = -t726 * t358 + t729 * t363 + t916;
t299 = t380 * t718 + t721 * t783;
t298 = -t380 * t721 + t718 * t783;
t296 = -t322 * t717 + t338 * t720;
t295 = t322 * t720 + t338 * t717;
t293 = -t718 * t366 + t721 * t782 + t798;
t291 = -t319 * t717 + t333 * t720;
t290 = t319 * t720 + t333 * t717;
t289 = -t718 * t419 + t721 * t740 + t918;
t288 = -t718 * t420 + t721 * t741 + t912;
t285 = -t726 * t332 + t729 * t337 - t916;
t284 = -t726 * t331 + t729 * t336 - t921;
t283 = pkin(2) * t334 + pkin(8) * t368 + (-pkin(3) + t791) * t442;
t282 = -t718 * t367 + t721 * t785;
t281 = t721 * t367 + t718 * t785;
t280 = qJ(3) * t848 - t726 * t399 + (-t341 * t718 - t342 * t721) * pkin(7);
t279 = -t718 * t348 + t721 * t784 + t798;
t278 = -t310 * t717 + t323 * t720;
t277 = t310 * t720 + t323 * t717;
t276 = pkin(2) * t397 - pkin(3) * t519 + pkin(8) * t451 + t330 * t725 + t346 * t728;
t275 = pkin(2) * t387 - pkin(3) * t511 + pkin(8) * t447 + t329 * t725 + t345 * t728;
t273 = -pkin(1) * t341 + t718 * t856 + t721 * t736;
t272 = -t718 * t377 + t721 * t742 - t912;
t271 = -t718 * t378 + t721 * t743 - t918;
t265 = -t299 * t717 + t314 * t720;
t264 = t299 * t720 + t314 * t717;
t262 = pkin(2) * t371 - pkin(3) * t475 + pkin(8) * t428 + t297 * t728 + t386 * t725;
t257 = -t282 * t717 + t302 * t720;
t256 = t282 * t720 + t302 * t717;
t250 = -t726 * t287 + t729 * t306 + (-t298 * t718 - t299 * t721) * pkin(7);
t249 = -t718 * t303 + t721 * t786;
t248 = t721 * t303 + t718 * t786;
t247 = -pkin(1) * t298 - t718 * t315 + t721 * t744;
t246 = -t726 * t260 + t729 * t263 + (-t321 * t718 - t322 * t721) * pkin(7);
t245 = -t726 * t258 + t729 * t261 + (-t318 * t718 - t319 * t721) * pkin(7);
t244 = -pkin(1) * t321 - t718 * t276 + t721 * t745;
t243 = -t726 * t259 + t729 * t266 + (-t281 * t718 - t282 * t721) * pkin(7);
t242 = -pkin(1) * t318 - t718 * t275 + t721 * t747;
t241 = pkin(2) * t267 - pkin(3) * t313 + pkin(8) * t304 + t269 * t728 + t270 * t725;
t240 = -pkin(1) * t281 - t718 * t283 + t721 * t746;
t239 = -t726 * t253 + t729 * t254 + (-t309 * t718 - t310 * t721) * pkin(7);
t238 = -t249 * t717 + t252 * t720;
t237 = t249 * t720 + t252 * t717;
t235 = -pkin(1) * t309 - t718 * t262 + t721 * t748;
t233 = -t726 * t234 + t729 * t236 + (-t248 * t718 - t249 * t721) * pkin(7);
t232 = -pkin(1) * t248 - t718 * t241 + t721 * t749;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, 0, 0, 0, 0, 0, 0, t600, t599, 0, t401, 0, 0, 0, 0, 0, 0, t523, t522, 0, t308, 0, 0, 0, 0, 0, 0, t393, t396, t449, t265, 0, 0, 0, 0, 0, 0, t449, -t393, -t396, t257, 0, 0, 0, 0, 0, 0, t291, t296, t278, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t612, 0, 0, 0, 0, 0, 0, t598, -t757, 0, t400, 0, 0, 0, 0, 0, 0, t521, t520, 0, t307, 0, 0, 0, 0, 0, 0, -t389, -t390, t448, t264, 0, 0, 0, 0, 0, 0, t448, t389, t390, t256, 0, 0, 0, 0, 0, 0, t290, t295, t277, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t821, 0, 0, 0, 0, 0, 0, t646, -t645, 0, t477, 0, 0, 0, 0, 0, 0, -t593, -t592, 0, t341, 0, 0, 0, 0, 0, 0, -t458, -t459, t525, t298, 0, 0, 0, 0, 0, 0, t525, t458, t459, t281, 0, 0, 0, 0, 0, 0, t318, t321, t309, t248; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t866, -t865, -t612, -qJ(1) * t612, 0, 0, -t599, 0, t600, t689, -qJ(1) * t598 - t491 * t717 + t535 * t720, qJ(1) * t757 - t490 * t717 + t536 * t720, -t507 * t717 + t508 * t720, -qJ(1) * t400 + t385 * t720 - t402 * t717, 0, 0, -t522, 0, t523, t689, -qJ(1) * t521 - t375 * t717 + t425 * t720, -qJ(1) * t520 - t376 * t717 + t426 * t720, -t347 * t717 + t349 * t720, -qJ(1) * t307 - t273 * t717 + t280 * t720, t412, t383, -t915, t411, t910, t474, -t288 * t717 + t300 * t720 + t920, -t289 * t717 + t301 * t720 + t923, -t293 * t717 + t311 * t720 - t852, -qJ(1) * t264 - t247 * t717 + t250 * t720, t474, t915, -t910, t412, t383, t411, -t279 * t717 + t305 * t720 - t852, -t272 * t717 + t285 * t720 - t920, -t271 * t717 + t284 * t720 - t923, -qJ(1) * t256 - t240 * t717 + t243 * t720, -t340 * t717 + t362 * t720, -t316 * t717 + t324 * t720, -t326 * t717 + t344 * t720, -t339 * t717 + t361 * t720, -t325 * t717 + t343 * t720, -t365 * t717 + t384 * t720, -qJ(1) * t290 - t242 * t717 + t245 * t720, -qJ(1) * t295 - t244 * t717 + t246 * t720, -qJ(1) * t277 - t235 * t717 + t239 * t720, -qJ(1) * t237 - t232 * t717 + t233 * t720; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t865, -t866, t613, qJ(1) * t613, 0, 0, t757, 0, t598, -t801, qJ(1) * t600 + t491 * t720 + t535 * t717, qJ(1) * t599 + t490 * t720 + t536 * t717, t507 * t720 + t508 * t717, qJ(1) * t401 + t385 * t717 + t402 * t720, 0, 0, -t520, 0, t521, -t801, qJ(1) * t523 + t375 * t720 + t425 * t717, qJ(1) * t522 + t376 * t720 + t426 * t717, t347 * t720 + t349 * t717, qJ(1) * t308 + t273 * t720 + t280 * t717, t410, t382, t914, t409, -t909, t471, t288 * t720 + t300 * t717 + t919, t289 * t720 + t301 * t717 + t922, t293 * t720 + t311 * t717 + t445, qJ(1) * t265 + t247 * t720 + t250 * t717, t471, -t914, t909, t410, t382, t409, t279 * t720 + t305 * t717 + t445, t272 * t720 + t285 * t717 - t919, t271 * t720 + t284 * t717 - t922, qJ(1) * t257 + t240 * t720 + t243 * t717, t340 * t720 + t362 * t717, t316 * t720 + t324 * t717, t326 * t720 + t344 * t717, t339 * t720 + t361 * t717, t325 * t720 + t343 * t717, t365 * t720 + t384 * t717, qJ(1) * t291 + t242 * t720 + t245 * t717, qJ(1) * t296 + t244 * t720 + t246 * t717, qJ(1) * t278 + t235 * t720 + t239 * t717, qJ(1) * t238 + t232 * t720 + t233 * t717; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t683, t684, 0, 0, 0, 0, t645, 0, t646, t703, pkin(1) * t648 - t721 * t576 + t718 * t788, -pkin(1) * t647 - t721 * t577 + t718 * t789, t509 * t718, pkin(1) * t478 + t509 * t854, 0, 0, t592, 0, -t593, t703, -pkin(1) * t596 + t721 * t487 + t718 * t739, -pkin(1) * t860 + t721 * t488 + t718 * t738, t881 * t718, pkin(1) * t342 + t718 * t736 - t721 * t856, t484, t443, t902, t483, -t896, t543, t721 * t420 + t718 * t741 - t911, t721 * t419 + t718 * t740 - t917, t721 * t366 + t718 * t782 + t820, pkin(1) * t299 + t721 * t315 + t718 * t744, t543, -t902, t896, t484, t443, t483, t721 * t348 + t718 * t784 + t820, t721 * t377 + t718 * t742 + t911, t721 * t378 + t718 * t743 + t917, pkin(1) * t282 + t721 * t283 + t718 * t746, t721 * t502 + t718 * t772, t721 * t440 + t718 * t780, t721 * t454 + t718 * t776, t721 * t501 + t718 * t773, t721 * t453 + t718 * t777, t721 * t533 + t718 * t771, pkin(1) * t319 + t721 * t275 + t718 * t747, pkin(1) * t322 + t721 * t276 + t718 * t745, pkin(1) * t310 + t721 * t262 + t718 * t748, pkin(1) * t249 + t721 * t241 + t718 * t749;];
tauB_reg  = t1;
