% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RRRPPP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_invdynm_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:03:51
% EndTime: 2019-05-07 04:05:02
% DurationCPUTime: 77.88s
% Computational Cost: add. (357107->994), mult. (761934->1144), div. (0->0), fcn. (570103->10), ass. (0->617)
t2189 = sin(qJ(1));
t2192 = cos(qJ(1));
t2187 = sin(qJ(3));
t2190 = cos(qJ(3));
t2188 = sin(qJ(2));
t2379 = qJD(1) * t2188;
t2152 = qJD(2) * t2190 - t2187 * t2379;
t2185 = sin(pkin(6));
t2191 = cos(qJ(2));
t2336 = t2191 * qJD(1);
t2175 = qJD(3) - t2336;
t2385 = cos(pkin(6));
t2306 = t2385 * t2175;
t2116 = t2152 * t2185 - t2306;
t2115 = t2116 ^ 2;
t2153 = qJD(2) * t2187 + t2190 * t2379;
t2184 = sin(pkin(10));
t2307 = t2385 * t2152;
t2340 = t2184 * t2185;
t2384 = cos(pkin(10));
t2089 = t2153 * t2384 + t2175 * t2340 + t2184 * t2307;
t2399 = t2089 ^ 2;
t2009 = -t2399 - t2115;
t2320 = qJD(2) * t2336;
t2331 = t2188 * qJDD(1);
t2250 = t2320 + t2331;
t2216 = t2190 * qJDD(2) - t2187 * t2250;
t2214 = t2153 * qJD(3) - t2216;
t2177 = t2191 * qJDD(1);
t2321 = qJD(2) * t2379;
t2156 = t2177 - t2321;
t2266 = qJDD(3) - t2156;
t2205 = -t2185 * t2214 - t2385 * t2266;
t2283 = t2385 * t2384;
t2318 = t2185 * t2384;
t2087 = -t2152 * t2283 + t2153 * t2184 - t2175 * t2318;
t2364 = t2089 * t2087;
t2201 = t2205 - t2364;
t2319 = t2184 * t2385;
t2217 = -t2187 * qJDD(2) - t2190 * t2250;
t2213 = t2152 * qJD(3) - t2217;
t2455 = -t2185 * t2266 + t2385 * t2214;
t2020 = -t2184 * t2455 + t2384 * t2213;
t2365 = t2087 * t2116;
t2431 = t2020 + t2365;
t1869 = -t2009 * t2283 + t2185 * t2431 - t2201 * t2319;
t2434 = t2384 * t2201;
t2491 = t2184 * t2009 - t2434;
t2600 = t1869 * t2190 + t2187 * t2491;
t2442 = t2184 * t2201;
t1865 = t2385 * t2431 + (t2009 * t2384 + t2442) * t2185;
t2601 = -t1869 * t2187 + t2190 * t2491;
t2606 = -t1865 * t2188 + t2191 * t2601;
t2622 = pkin(7) * (t2189 * t2600 + t2192 * t2606);
t2623 = pkin(7) * (t2189 * t2606 - t2192 * t2600);
t2607 = t1865 * t2191 + t2188 * t2601;
t2630 = pkin(1) * t2607;
t2627 = pkin(8) * t2607;
t2626 = -pkin(1) * t2600 + pkin(8) * t2606;
t2200 = t2205 + t2364;
t2426 = -t2399 + t2115;
t2427 = -t2365 + t2020;
t1878 = t2185 * t2427 + t2200 * t2319 - t2426 * t2283;
t2299 = t2384 * t2200;
t1924 = t2184 * t2426 + t2299;
t1814 = -t1878 * t2187 + t1924 * t2190;
t2342 = t2184 * t2200;
t1872 = t2185 * (-t2384 * t2426 + t2342) - t2385 * t2427;
t1756 = t1814 * t2191 + t1872 * t2188;
t1808 = t1878 * t2190 + t1924 * t2187;
t2634 = t2189 * t1756 - t1808 * t2192;
t2633 = t1756 * t2192 + t2189 * t1808;
t2400 = t2087 ^ 2;
t2430 = -t2115 - t2400;
t2019 = t2184 * t2213 + t2384 * t2455;
t2363 = t2089 * t2116;
t2432 = t2019 - t2363;
t1870 = -t2185 * t2432 - t2200 * t2283 + t2430 * t2319;
t2498 = t2384 * t2430 + t2342;
t1797 = t1870 * t2187 - t2190 * t2498;
t2460 = t2385 * t2432;
t1867 = t2460 - t2185 * (-t2430 * t2184 + t2299);
t1737 = t1797 * t2188 + t1867 * t2191;
t2621 = pkin(1) * t1737;
t1740 = t1797 * t2191 - t1867 * t2188;
t2554 = t1870 * t2190 + t2187 * t2498;
t2629 = pkin(7) * (t1740 * t2192 - t2189 * t2554);
t2628 = pkin(7) * (t2189 * t1740 + t2192 * t2554);
t2618 = pkin(8) * t1737;
t2599 = (-t1865 * t2185 + t1869 * t2385) * qJ(4);
t2611 = pkin(1) * t2554 + pkin(8) * t1740;
t2464 = t2384 * t2432;
t1890 = t2184 * t2431 + t2464;
t2016 = t2400 - t2399;
t2505 = t2184 * t2460;
t2519 = t2185 * t2016 + t2431 * t2283 - t2505;
t1777 = t1890 * t2190 + t2187 * t2519;
t2459 = t2432 * t2184;
t2480 = t2185 * (t2384 * t2431 - t2459) - t2385 * t2016;
t1729 = t1777 * t2191 - t2188 * t2480;
t1774 = t1890 * t2187 - t2190 * t2519;
t2625 = t2189 * t1729 - t1774 * t2192;
t2624 = t1729 * t2192 + t2189 * t1774;
t2037 = t2400 - t2115;
t2428 = t2363 + t2019;
t1881 = t2037 * t2319 + t2185 * t2428 - t2201 * t2283;
t1927 = t2037 * t2384 + t2442;
t1811 = t1881 * t2190 + t1927 * t2187;
t2462 = t2385 * t2428;
t1875 = (t2037 * t2184 - t2434) * t2185 - t2462;
t2482 = t1881 * t2187 - t1927 * t2190;
t2513 = -t1875 * t2188 + t2191 * t2482;
t2549 = t1811 * t2192 + t2189 * t2513;
t2546 = -t2189 * t1811 + t2192 * t2513;
t2619 = pkin(2) * t2600;
t2617 = pkin(9) * t2600;
t2610 = pkin(2) * t1865 + pkin(9) * t2601;
t1750 = t1814 * t2188 - t1872 * t2191;
t2425 = -t2399 - t2400;
t2483 = t2385 * t2425 + (-t2428 * t2184 - t2384 * t2427) * t2185;
t2499 = t2184 * t2427 - t2384 * t2428;
t2521 = -t2184 * t2462 - t2185 * t2425 - t2427 * t2283;
t2551 = -t2187 * t2521 + t2190 * t2499;
t2581 = t2188 * t2551 - t2191 * t2483;
t2596 = pkin(1) * t2581;
t2593 = pkin(8) * t2581;
t2327 = qJ(4) * t2385;
t2557 = pkin(3) * t1865 + t2327 * t2491;
t2548 = t2187 * t2499 + t2190 * t2521;
t2579 = t2188 * t2483 + t2191 * t2551;
t2584 = -pkin(1) * t2548 + pkin(8) * t2579;
t2583 = pkin(2) * t1867 + pkin(9) * t1797;
t1726 = t1777 * t2188 + t2191 * t2480;
t2512 = t1875 * t2191 + t2188 * t2482;
t2578 = pkin(7) * (t2189 * t2579 - t2192 * t2548);
t2577 = pkin(7) * (t2189 * t2548 + t2192 * t2579);
t2574 = pkin(2) * t2548;
t2594 = pkin(2) * t2554;
t2572 = pkin(3) * t1869;
t2571 = pkin(9) * t2548;
t2592 = pkin(9) * t2554;
t2591 = qJ(4) * (t1867 * t2185 + t1870 * t2385);
t2558 = -pkin(3) * t1867 + t2327 * t2498;
t2556 = -pkin(2) * t2483 + pkin(9) * t2551;
t2544 = pkin(3) * t1870;
t2543 = pkin(3) * t2521;
t2542 = qJ(4) * t2491;
t2166 = t2189 * g(1) - t2192 * g(2);
t2387 = pkin(9) * t2191;
t2388 = pkin(9) * t2188;
t2397 = pkin(2) * t2188;
t2068 = -t2156 * pkin(2) + (-pkin(1) - t2388) * qJDD(1) + (-pkin(8) * qJD(1) + (-0.2e1 * t2387 + t2397) * qJD(2)) * qJD(1) - t2166;
t2167 = g(1) * t2192 + t2189 * g(2);
t2249 = qJDD(1) * pkin(8) - t2167;
t2402 = qJD(1) ^ 2;
t2233 = -pkin(1) * t2402 + t2249;
t2131 = -t2188 * g(3) + t2191 * t2233;
t2396 = pkin(2) * t2191;
t2281 = -t2388 - t2396;
t2264 = t2402 * t2281;
t2401 = qJD(2) ^ 2;
t2097 = -pkin(2) * t2401 + qJDD(2) * pkin(9) + t2191 * t2264 + t2131;
t2003 = -t2190 * t2068 + t2187 * t2097;
t2382 = qJ(4) * t2185;
t2106 = -pkin(3) * t2152 - t2153 * t2382;
t2210 = t2213 * qJ(4);
t2244 = qJ(4) * (t2175 * t2185 + t2307);
t1922 = pkin(3) * t2266 - t2153 * t2106 + t2175 * t2244 - t2210 * t2385 - t2003;
t2386 = t2191 * g(3);
t2130 = t2188 * t2233 + t2386;
t2429 = -qJDD(2) * pkin(2) - t2401 * pkin(9);
t2198 = t2188 * t2264 + t2153 * (t2175 * pkin(3) - t2153 * t2327) - t2152 * t2244 - t2185 * t2210 + t2214 * pkin(3) + t2130 + t2429;
t1864 = t1922 * t2185 - t2385 * t2198 - qJDD(4);
t2240 = pkin(4) * t2363 + 0.2e1 * qJD(5) * t2089 + t1864;
t2443 = qJ(5) * t2431;
t2212 = t2240 + t2443;
t2033 = pkin(5) * t2089 + qJ(6) * t2116;
t2510 = -0.2e1 * t2087;
t2424 = -t2019 * qJ(6) + qJD(6) * t2510 + t2089 * t2033;
t2203 = t2212 + t2424;
t2394 = pkin(4) * t2019;
t2204 = t2394 - t2203;
t2511 = (-t2185 * t2483 - t2385 * t2521) * qJ(4);
t2541 = qJ(4) * t2498;
t2540 = qJ(4) * t2499;
t1762 = t2240 - t2394 + 0.2e1 * t2443;
t2357 = t2116 * t2184;
t2036 = t2089 * t2357;
t2295 = t2384 * t2087;
t2285 = t2116 * t2295;
t2267 = t2285 - t2036;
t2289 = t2116 * t2319;
t2030 = t2087 * t2289;
t2272 = t2116 * t2283;
t2031 = t2089 * t2272;
t2278 = t2185 * t2205 + t2030 + t2031;
t2437 = t2190 * t2278;
t2403 = t2187 * t2267 + t2437;
t2294 = t2384 * t2089;
t2309 = t2385 * t2205;
t1932 = (t2087 * t2184 + t2294) * t2116 * t2185 - t2309;
t2440 = t2187 * t2278;
t2404 = t2190 * t2267 - t2440;
t2493 = t1932 * t2188 + t2191 * t2404;
t2518 = t2189 * t2493 - t2192 * t2403;
t2517 = t2189 * t2403 + t2192 * t2493;
t2516 = -pkin(3) * t2483 + t2327 * t2499;
t2508 = pkin(4) * (t2432 + t2019);
t2507 = qJ(6) * t2200;
t2494 = -pkin(4) * t2009 - qJ(5) * t2201;
t2492 = -t1932 * t2191 + t2188 * t2404;
t2006 = t2019 * t2283;
t2362 = t2089 * t2185;
t2323 = t2087 * t2362;
t2269 = -t2006 - t2030 + t2323;
t2245 = t2184 * t2019 - t2285;
t2372 = t2245 * t2187;
t2408 = t2190 * t2269 + t2372;
t2297 = t2384 * t2019;
t2308 = t2385 * t2089;
t2326 = t2116 * t2340;
t2211 = -t2185 * t2297 + (-t2308 - t2326) * t2087;
t1941 = t2190 * t2245;
t2420 = -t2187 * t2269 + t1941;
t2446 = t2188 * t2211 + t2191 * t2420;
t2487 = t2189 * t2446 - t2192 * t2408;
t2486 = t2189 * t2408 + t2192 * t2446;
t2479 = pkin(4) * t2425;
t2478 = qJ(5) * t2425;
t2477 = qJ(5) * t2430;
t2476 = qJ(5) * t2432;
t2333 = t2384 * t2020 + t2036;
t1942 = t2190 * t2333;
t2005 = t2020 * t2319;
t2270 = t2005 - t2031 - t2323;
t2419 = -t2187 * t2270 + t1942;
t2473 = t2188 * t2419;
t2371 = t2333 * t2187;
t2407 = t2190 * t2270 + t2371;
t2471 = t2189 * t2407;
t2468 = t2191 * t2419;
t2466 = t2192 * t2407;
t2375 = qJD(5) * t2116;
t2111 = -0.2e1 * t2375;
t2004 = t2187 * t2068 + t2190 * t2097;
t2172 = t2175 ^ 2;
t1923 = -t2172 * pkin(3) + t2152 * t2106 + (t2153 * t2306 - t2455) * qJ(4) + t2004;
t2197 = t2185 * t2198;
t1799 = qJD(4) * t2510 + t1922 * t2319 + t1923 * t2384 + t2184 * t2197;
t2011 = pkin(4) * t2087 - qJ(5) * t2089;
t2196 = -t2115 * pkin(4) - qJ(5) * t2205 - t2087 * t2011 + t1799;
t1764 = t2111 + t2196;
t2279 = -t1922 * t2283 + t1923 * t2184 - t2384 * t2197;
t2243 = pkin(4) * t2205 - t2115 * qJ(5) + qJDD(5) + t2279;
t1765 = (0.2e1 * qJD(4) + t2011) * t2089 + t2243;
t1773 = t2212 - t2394;
t1695 = t1764 * t2319 - t1765 * t2283 + t2185 * t1773;
t1704 = t1764 * t2384 + t2184 * t1765;
t1705 = -pkin(4) * t1765 + qJ(5) * t1764;
t2328 = t2384 * pkin(4);
t2448 = pkin(3) * t1695 + t1705 * t2385 + t2185 * (t1773 * (qJ(5) * t2184 + t2328) + qJ(4) * t1704);
t2447 = t2188 * t2420 - t2191 * t2211;
t2445 = pkin(5) * (-t2427 + t2365);
t2444 = (-t2009 - t2400) * pkin(5);
t2353 = t2152 * t2153;
t2241 = t2266 + t2353;
t2441 = t2187 * t2241;
t2438 = t2190 * t2241;
t2423 = t2020 * pkin(5) + t2507;
t2422 = (t2430 + t2400) * pkin(5) - qJ(6) * t2432;
t1734 = pkin(4) * t2200 + t1765 - t2477;
t1763 = -t2212 + t2508;
t2418 = t2185 * (qJ(5) * t2459 + t1763 * t2384 - t2541) - t2544 + t1734 * t2385;
t1732 = t1764 + t2494;
t2417 = -t2185 * (-t1762 * t2184 - t2328 * t2431 - t2542) + t2572 + t1732 * t2385;
t2195 = t2019 * pkin(5) + qJ(6) * t2400 + t2116 * t2033 - qJDD(6) - t2196;
t1733 = t2111 - t2195;
t2194 = -qJ(6) * t2009 + t1733;
t1712 = t2194 + t2494;
t1716 = t2424 - t2444 + t1762;
t2390 = pkin(5) * t2201;
t2398 = pkin(4) + qJ(6);
t1838 = t2398 * t2431 - t2390;
t2416 = t2185 * (t1716 * t2184 + t1838 * t2384 + t2542) + t2572 + t1712 * t2385;
t2377 = qJD(4) * t2089;
t1798 = t2279 + 0.2e1 * t2377;
t1715 = t2184 * t1798 + t1799 * t2384;
t2415 = t2185 * (t1715 + t2540) + t2543;
t1748 = t1764 - t2479;
t1749 = t1765 - t2478;
t1951 = qJ(5) * t2428;
t1896 = -pkin(4) * t2427 - t1951;
t2414 = t2185 * (t1748 * t2384 + t1749 * t2184 + t2540) + t2543 + t1896 * t2385;
t2373 = qJD(6) * t2116;
t2208 = -t2011 * t2089 - t2243 - 0.2e1 * t2373 - 0.2e1 * t2377 - t2423;
t2202 = pkin(5) * t2365 + t2208;
t1710 = -t2200 * t2398 + t2202 + t2477;
t1714 = t2203 + t2422 - t2508;
t2389 = pkin(5) * t2200;
t1898 = t2389 - t2476;
t2413 = t2185 * (t1714 * t2384 + t1898 * t2184 + t2541) + t2544 + t1710 * t2385;
t2193 = pkin(5) * t2428 + qJ(6) * t2425 + t2195;
t1711 = t2111 - t2193 - t2479;
t2209 = t1765 + t2423;
t1713 = t2209 + 0.2e1 * t2373 - t2445 - t2478;
t1830 = -t2398 * t2427 - t1951;
t2412 = t2185 * (t1711 * t2384 + t1713 * t2184 + t2540) + t2543 + t1830 * t2385;
t1725 = (-pkin(5) * t2087 + 0.2e1 * qJD(6)) * t2116 + t2209;
t1678 = qJ(5) * t1733 - t1725 * t2398;
t1741 = pkin(5) * t2400 - t2204;
t1682 = -t1725 * t2283 + t1733 * t2319 + t2185 * t1741;
t2391 = pkin(5) * t1733;
t1683 = t1741 * t2398 + t2391;
t1698 = t2184 * t1725 + t1733 * t2384;
t2392 = pkin(5) * t1725;
t1700 = qJ(5) * t1741 + t2392;
t2411 = t2185 * (qJ(4) * t1698 + t1683 * t2384 + t1700 * t2184) + pkin(3) * t1682 + t1678 * t2385;
t2305 = t2384 * t1864;
t2317 = t2385 * t1798;
t2410 = t2185 * (t2305 + t2541) + t2544 - t2317;
t2316 = t2385 * t1799;
t2347 = t2184 * t1864;
t2409 = -t2572 + t2185 * (-t2347 - t2542) - t2316;
t2148 = t2152 ^ 2;
t2149 = t2153 ^ 2;
t2393 = pkin(4) * t2184;
t2380 = qJD(1) * qJD(2);
t2181 = t2188 ^ 2;
t2378 = t2402 * t2181;
t2275 = -pkin(1) + t2281;
t2337 = t2188 * t2402;
t2096 = t2188 * t2249 + t2275 * t2337 + t2386 + t2429;
t2361 = t2096 * t2187;
t2360 = t2096 * t2190;
t2102 = -t2266 + t2353;
t2359 = t2102 * t2187;
t2358 = t2102 * t2190;
t2145 = qJDD(1) * pkin(1) + pkin(8) * t2402 + t2166;
t2355 = t2145 * t2188;
t2354 = t2145 * t2191;
t2155 = 0.2e1 * t2320 + t2331;
t2121 = t2155 * t2188;
t2174 = t2191 * t2337;
t2164 = qJDD(2) + t2174;
t2352 = t2164 * t2188;
t2165 = qJDD(2) - t2174;
t2351 = t2165 * t2188;
t2350 = t2165 * t2191;
t2349 = t2175 * t2187;
t2348 = t2175 * t2190;
t2182 = t2191 ^ 2;
t2332 = t2181 + t2182;
t2330 = t2189 * qJDD(1);
t2325 = t2188 * t2353;
t2324 = t2191 * t2353;
t2322 = t2020 * t2340;
t2315 = t2385 * t1864;
t1937 = t2003 * t2187 + t2190 * t2004;
t2077 = t2130 * t2188 + t2191 * t2131;
t2292 = -t2166 * t2189 - t2192 * t2167;
t2291 = t2192 * t2174;
t2290 = t2189 * t2174;
t2013 = t2087 * t2308;
t2284 = t2116 * t2318;
t2282 = -pkin(2) * t2096 + pkin(9) * t1937;
t2161 = qJDD(1) * t2192 - t2189 * t2402;
t2280 = -pkin(7) * t2161 - g(3) * t2189;
t2277 = pkin(4) * t2283;
t1936 = -t2003 * t2190 + t2004 * t2187;
t2076 = t2130 * t2191 - t2131 * t2188;
t2274 = t2166 * t2192 - t2189 * t2167;
t1708 = -t1798 * t2283 + t2185 * t1864 + t2184 * t2316;
t2271 = pkin(3) * t1708 + t1715 * t2382;
t2252 = -t1798 * t2384 + t2184 * t1799;
t2105 = -t2172 - t2148;
t2035 = t2105 * t2190 - t2441;
t2137 = t2175 * t2153;
t2070 = -t2137 - t2214;
t2248 = pkin(2) * t2070 + pkin(9) * t2035 - t2360;
t2114 = -t2149 - t2172;
t2048 = -t2114 * t2187 + t2358;
t2074 = (-qJD(3) - t2175) * t2152 + t2217;
t2247 = pkin(2) * t2074 + pkin(9) * t2048 + t2361;
t2071 = (-qJD(3) + t2175) * t2153 + t2216;
t2136 = t2175 * t2152;
t2073 = -t2136 + t2213;
t2001 = t2071 * t2190 + t2073 * t2187;
t2101 = t2148 + t2149;
t2242 = pkin(2) * t2101 + pkin(9) * t2001 + t1937;
t1681 = -t2385 * t1741 + (-t1725 * t2384 + t1733 * t2184) * t2185;
t1618 = -pkin(3) * t1681 - t2185 * t1678 + t1683 * t2283 + t1698 * t2327 + t1700 * t2319;
t1624 = t2384 * t1700 - t2184 * t1683 + (-t1681 * t2185 - t1682 * t2385) * qJ(4);
t1657 = -t1682 * t2187 + t1698 * t2190;
t2231 = -pkin(2) * t1681 + pkin(9) * t1657 + t1618 * t2190 + t1624 * t2187;
t1694 = -t2385 * t1773 + (t1764 * t2184 - t1765 * t2384) * t2185;
t1642 = t1704 * t2327 - pkin(3) * t1694 - t2185 * t1705 + (qJ(5) * t2319 + t2277) * t1773;
t1654 = (qJ(5) * t2384 - t2393) * t1773 + (-t1694 * t2185 - t1695 * t2385) * qJ(4);
t1669 = -t1695 * t2187 + t1704 * t2190;
t2230 = -pkin(2) * t1694 + pkin(9) * t1669 + t1642 * t2190 + t1654 * t2187;
t1670 = t1711 * t2283 + t1713 * t2319 - t2185 * t1830 + t2516;
t1672 = -t2184 * t1711 + t2384 * t1713 + t2511;
t2229 = t1670 * t2190 + t1672 * t2187 + t2556;
t1671 = -t2185 * t1710 + t1714 * t2283 + t1898 * t2319 + t2558;
t1693 = -t2184 * t1714 + t2384 * t1898 - t2591;
t2228 = t1671 * t2190 + t1693 * t2187 - t2583;
t1673 = -t2185 * t1712 + t1716 * t2319 + t1838 * t2283 + t2557;
t1692 = t2384 * t1716 - t2184 * t1838 - t2599;
t2227 = t1673 * t2190 + t1692 * t2187 + t2610;
t1707 = t2185 * t2252 - t2315;
t1679 = (-t1707 * t2185 - t1708 * t2385) * qJ(4);
t1686 = -t1708 * t2187 + t1715 * t2190;
t1687 = -pkin(3) * t1707 + t1715 * t2327;
t2226 = -pkin(2) * t1707 + pkin(9) * t1686 + t1679 * t2187 + t1687 * t2190;
t1684 = t1748 * t2283 + t1749 * t2319 - t2185 * t1896 + t2516;
t1688 = -t2184 * t1748 + t2384 * t1749 + t2511;
t2225 = t1684 * t2190 + t1688 * t2187 + t2556;
t1690 = qJ(5) * t2505 - t2185 * t1734 + t1763 * t2283 - t2558;
t1702 = qJ(5) * t2464 - t2184 * t1763 + t2591;
t2224 = t1690 * t2190 + t1702 * t2187 + t2583;
t1691 = -t2185 * t1732 + t1762 * t2319 + t2277 * t2431 + t2557;
t1703 = t2384 * t1762 - t2431 * t2393 - t2599;
t2223 = t1691 * t2190 + t1703 * t2187 + t2610;
t1699 = t2511 - t2252;
t1701 = t1799 * t2283 + t2184 * t2317 + t2516;
t2222 = t1699 * t2187 + t1701 * t2190 + t2556;
t1706 = t2185 * t1798 + t1864 * t2283 + t2558;
t1717 = -t2347 - t2591;
t2221 = t1706 * t2190 + t1717 * t2187 - t2583;
t1709 = t2185 * t1799 - t2184 * t2315 - t2557;
t1724 = -t2305 + t2599;
t2220 = t1709 * t2190 + t1724 * t2187 - t2610;
t2178 = t2182 * t2402;
t2171 = -t2178 - t2401;
t2170 = t2178 - t2401;
t2169 = -t2378 - t2401;
t2168 = -t2378 + t2401;
t2163 = -t2178 + t2378;
t2162 = t2178 + t2378;
t2160 = t2192 * t2402 + t2330;
t2158 = t2332 * qJDD(1);
t2157 = t2177 - 0.2e1 * t2321;
t2151 = t2191 * t2164;
t2150 = t2332 * t2380;
t2143 = -pkin(7) * t2160 + g(3) * t2192;
t2135 = -t2149 + t2172;
t2134 = t2148 - t2172;
t2133 = -t2181 * t2380 + t2191 * t2250;
t2132 = -t2156 * t2188 - t2182 * t2380;
t2129 = -t2169 * t2188 - t2350;
t2128 = -t2168 * t2188 + t2151;
t2127 = t2171 * t2191 - t2352;
t2126 = t2170 * t2191 - t2351;
t2125 = t2169 * t2191 - t2351;
t2124 = t2168 * t2191 + t2352;
t2123 = t2171 * t2188 + t2151;
t2122 = t2170 * t2188 + t2350;
t2120 = (t2156 - t2321) * t2191;
t2118 = t2149 - t2148;
t2108 = t2157 * t2191 - t2121;
t2107 = t2155 * t2191 + t2157 * t2188;
t2099 = -pkin(8) * t2125 - t2354;
t2098 = -pkin(8) * t2123 - t2355;
t2095 = (t2152 * t2190 + t2153 * t2187) * t2175;
t2094 = (t2152 * t2187 - t2153 * t2190) * t2175;
t2092 = -pkin(1) * t2125 + t2131;
t2091 = -pkin(1) * t2123 + t2130;
t2072 = t2136 + t2213;
t2069 = -t2137 + t2214;
t2065 = pkin(1) * t2157 + pkin(8) * t2127 + t2354;
t2064 = -pkin(1) * t2155 + pkin(8) * t2129 - t2355;
t2059 = -t2153 * t2349 + t2190 * t2213;
t2058 = t2153 * t2348 + t2187 * t2213;
t2057 = -t2152 * t2348 + t2187 * t2214;
t2056 = t2152 * t2349 + t2190 * t2214;
t2055 = t2191 * t2095 + t2188 * t2266;
t2054 = t2188 * t2095 - t2191 * t2266;
t2053 = t2134 * t2190 + t2359;
t2052 = -t2135 * t2187 + t2438;
t2051 = t2134 * t2187 - t2358;
t2050 = t2135 * t2190 + t2441;
t2049 = pkin(1) * t2145 + pkin(8) * t2077;
t2047 = t2114 * t2190 + t2359;
t2046 = pkin(1) * t2162 + pkin(8) * t2158 + t2077;
t2034 = t2105 * t2187 + t2438;
t2029 = t2089 * t2284;
t2026 = t2059 * t2191 - t2325;
t2025 = t2057 * t2191 + t2325;
t2024 = t2059 * t2188 + t2324;
t2023 = t2057 * t2188 - t2324;
t2000 = t2070 * t2190 - t2072 * t2187;
t1999 = t2071 * t2187 - t2073 * t2190;
t1998 = t2070 * t2187 + t2072 * t2190;
t1997 = -pkin(9) * t2047 + t2360;
t1994 = t2053 * t2191 - t2069 * t2188;
t1993 = t2052 * t2191 + t2073 * t2188;
t1992 = t2053 * t2188 + t2069 * t2191;
t1991 = t2052 * t2188 - t2073 * t2191;
t1989 = -pkin(9) * t2034 + t2361;
t1988 = t2048 * t2191 - t2074 * t2188;
t1987 = t2048 * t2188 + t2074 * t2191;
t1986 = t2035 * t2191 - t2070 * t2188;
t1985 = t2035 * t2188 + t2070 * t2191;
t1981 = t2000 * t2191 + t2118 * t2188;
t1980 = t2000 * t2188 - t2118 * t2191;
t1968 = (-t2089 * t2184 + t2295) * t2116;
t1964 = t2001 * t2191 - t2101 * t2188;
t1963 = t2001 * t2188 + t2101 * t2191;
t1949 = -pkin(2) * t2047 + t2004;
t1940 = -pkin(2) * t2034 + t2003;
t1931 = -t2087 * t2326 - t2029 + t2309;
t1917 = t1937 * t2191 + t2096 * t2188;
t1916 = t1937 * t2188 - t2096 * t2191;
t1912 = t2005 + (-t2087 * t2185 - t2272) * t2089;
t1909 = t2013 - t2029 + t2322;
t1908 = t2322 + (t2087 * t2385 - t2284) * t2089;
t1907 = t2013 + (t2020 * t2184 - t2116 * t2294) * t2185;
t1906 = -t2006 + (-t2289 + t2362) * t2087;
t1903 = t2013 + (t2087 * t2357 + t2297) * t2185;
t1900 = -pkin(1) * t1987 - t2247;
t1899 = -pkin(1) * t1985 - t2248;
t1897 = -pkin(9) * t1999 - t1936;
t1888 = t1968 * t2190 - t2440;
t1885 = t1968 * t2187 + t2437;
t1871 = -pkin(8) * t1987 - t1949 * t2188 + t1997 * t2191;
t1863 = -pkin(8) * t1985 - t1940 * t2188 + t1989 * t2191;
t1850 = -t1912 * t2187 + t1942;
t1847 = -t1906 * t2187 + t1941;
t1844 = t1912 * t2190 + t2371;
t1841 = t1906 * t2190 + t2372;
t1831 = -pkin(1) * t2047 + pkin(8) * t1988 + t1949 * t2191 + t1997 * t2188;
t1829 = -pkin(1) * t1963 - t2242;
t1828 = -pkin(1) * t1916 - t2282;
t1827 = -pkin(1) * t2034 + pkin(8) * t1986 + t1940 * t2191 + t1989 * t2188;
t1825 = t1888 * t2191 - t1931 * t2188;
t1822 = t1888 * t2188 + t1931 * t2191;
t1820 = -pkin(8) * t1963 + t1897 * t2191 + t1999 * t2397;
t1807 = -pkin(8) * t1916 + (-t2387 + t2397) * t1936;
t1800 = pkin(8) * t1964 + t1897 * t2188 + (-pkin(1) - t2396) * t1999;
t1791 = t1850 * t2191 + t1909 * t2188;
t1790 = t1908 * t2188 + t2468;
t1789 = t1907 * t2188 + t2468;
t1788 = t1847 * t2191 - t1903 * t2188;
t1785 = t1850 * t2188 - t1909 * t2191;
t1784 = -t1908 * t2191 + t2473;
t1783 = -t1907 * t2191 + t2473;
t1782 = t1847 * t2188 + t1903 * t2191;
t1766 = pkin(8) * t1917 + t1936 * t2275;
t1697 = -t2409 + t2619;
t1696 = -t2410 - t2594;
t1689 = -t2415 - t2574;
t1685 = t1708 * t2190 + t1715 * t2187;
t1680 = -t2417 - t2619;
t1677 = -t1709 * t2187 + t1724 * t2190 + t2617;
t1676 = -t2418 + t2594;
t1675 = -t1706 * t2187 + t1717 * t2190 - t2592;
t1674 = -t2414 - t2574;
t1668 = t1695 * t2190 + t1704 * t2187;
t1667 = -t2413 - t2594;
t1666 = -t2416 - t2619;
t1665 = t1686 * t2191 + t1707 * t2188;
t1664 = t1686 * t2188 - t1707 * t2191;
t1663 = -t2220 + t2630;
t1662 = -t2412 - t2574;
t1661 = t1699 * t2190 - t1701 * t2187 - t2571;
t1660 = -t2221 + t2621;
t1659 = -t1691 * t2187 + t1703 * t2190 - t2617;
t1658 = -t1690 * t2187 + t1702 * t2190 + t2592;
t1656 = t1682 * t2190 + t1698 * t2187;
t1655 = -pkin(2) * t1685 - t2271;
t1653 = -t2223 - t2630;
t1652 = -t2222 - t2596;
t1651 = t1669 * t2191 + t1694 * t2188;
t1650 = t1669 * t2188 - t1694 * t2191;
t1649 = -t1684 * t2187 + t1688 * t2190 - t2571;
t1648 = t1677 * t2191 - t1697 * t2188 + t2627;
t1647 = -t2224 - t2621;
t1646 = -t1671 * t2187 + t1693 * t2190 - t2592;
t1645 = t1675 * t2191 - t1696 * t2188 + t2618;
t1644 = -t1673 * t2187 + t1692 * t2190 - t2617;
t1643 = t1677 * t2188 + t1697 * t2191 - t2626;
t1641 = t1675 * t2188 + t1696 * t2191 - t2611;
t1640 = -t2225 - t2596;
t1639 = -t2228 + t2621;
t1638 = -t2227 - t2630;
t1637 = -t1670 * t2187 + t1672 * t2190 - t2571;
t1636 = t1657 * t2191 + t1681 * t2188;
t1635 = t1657 * t2188 - t1681 * t2191;
t1634 = t1661 * t2191 - t1689 * t2188 - t2593;
t1633 = -pkin(9) * t1685 + t1679 * t2190 - t1687 * t2187;
t1632 = t1659 * t2191 - t1680 * t2188 - t2627;
t1631 = t1661 * t2188 + t1689 * t2191 + t2584;
t1630 = t1658 * t2191 - t1676 * t2188 - t2618;
t1629 = t1659 * t2188 + t1680 * t2191 + t2626;
t1628 = -t2229 - t2596;
t1627 = t1658 * t2188 + t1676 * t2191 + t2611;
t1626 = -pkin(2) * t1668 - t2448;
t1625 = t1649 * t2191 - t1674 * t2188 - t2593;
t1623 = t1646 * t2191 - t1667 * t2188 + t2618;
t1622 = t1649 * t2188 + t1674 * t2191 + t2584;
t1621 = t1644 * t2191 - t1666 * t2188 - t2627;
t1620 = t1646 * t2188 + t1667 * t2191 - t2611;
t1619 = t1644 * t2188 + t1666 * t2191 + t2626;
t1617 = t1637 * t2191 - t1662 * t2188 - t2593;
t1616 = t1637 * t2188 + t1662 * t2191 + t2584;
t1615 = -pkin(1) * t1664 - t2226;
t1614 = -pkin(9) * t1668 - t1642 * t2187 + t1654 * t2190;
t1613 = -pkin(2) * t1656 - t2411;
t1612 = -pkin(8) * t1664 + t1633 * t2191 - t1655 * t2188;
t1611 = -pkin(1) * t1685 + pkin(8) * t1665 + t1633 * t2188 + t1655 * t2191;
t1610 = -pkin(1) * t1650 - t2230;
t1609 = -pkin(9) * t1656 - t1618 * t2187 + t1624 * t2190;
t1608 = -pkin(8) * t1650 + t1614 * t2191 - t1626 * t2188;
t1607 = -pkin(1) * t1668 + pkin(8) * t1651 + t1614 * t2188 + t1626 * t2191;
t1606 = -pkin(1) * t1635 - t2231;
t1605 = -pkin(8) * t1635 + t1609 * t2191 - t1613 * t2188;
t1604 = -pkin(1) * t1656 + pkin(8) * t1636 + t1609 * t2188 + t1613 * t2191;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t2161, 0, -t2160, 0, t2280, -t2143, -t2274, -pkin(7) * t2274, t2133 * t2192 - t2290, t2108 * t2192 + t2189 * t2163, t2128 * t2192 + t2188 * t2330, t2132 * t2192 + t2290, t2126 * t2192 + t2177 * t2189, t2189 * qJDD(2) + t2150 * t2192, t2192 * t2098 - t2189 * t2091 - pkin(7) * (t2189 * t2127 + t2157 * t2192), t2192 * t2099 - t2189 * t2092 - pkin(7) * (t2189 * t2129 - t2155 * t2192), t2192 * t2076 - pkin(7) * (t2189 * t2158 + t2162 * t2192), -pkin(7) * (t2189 * t2077 + t2145 * t2192) - (pkin(1) * t2189 - pkin(8) * t2192) * t2076, t2026 * t2192 + t2189 * t2058, t1981 * t2192 + t2189 * t1998, t1993 * t2192 + t2189 * t2050, t2025 * t2192 - t2189 * t2056, t1994 * t2192 + t2189 * t2051, t2055 * t2192 + t2189 * t2094, t2192 * t1863 - t2189 * t1899 - pkin(7) * (t2189 * t1986 - t2034 * t2192), t2192 * t1871 - t2189 * t1900 - pkin(7) * (t2189 * t1988 - t2047 * t2192), t2192 * t1820 - t2189 * t1829 - pkin(7) * (t2189 * t1964 - t1999 * t2192), t2192 * t1807 - t2189 * t1828 - pkin(7) * (t2189 * t1917 - t1936 * t2192), t1789 * t2192 + t2471, -t2624, -t2633, t1788 * t2192 + t2189 * t1841, -t2546, t2517, t2192 * t1645 - t2189 * t1660 + t2628, t2192 * t1648 - t2189 * t1663 + t2623, t2192 * t1634 - t2189 * t1652 - t2578, t2192 * t1612 - t2189 * t1615 - pkin(7) * (t2189 * t1665 - t1685 * t2192), t1825 * t2192 + t2189 * t1885, t2633, t2546, t1791 * t2192 + t2189 * t1844, -t2624, t2486, t2192 * t1625 - t2189 * t1640 - t2578, t2192 * t1630 - t2189 * t1647 - t2628, t2192 * t1632 - t2189 * t1653 - t2623, t2192 * t1608 - t2189 * t1610 - pkin(7) * (t2189 * t1651 - t1668 * t2192), t2517, t2546, -t2633, t2486, t2624, t1790 * t2192 + t2471, t2192 * t1617 - t2189 * t1628 - t2578, t2192 * t1621 - t2189 * t1638 - t2623, t2192 * t1623 - t2189 * t1639 + t2628, t2192 * t1605 - t2189 * t1606 - pkin(7) * (t2189 * t1636 - t1656 * t2192); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t2160, 0, t2161, 0, t2143, t2280, t2292, pkin(7) * t2292, t2189 * t2133 + t2291, t2189 * t2108 - t2163 * t2192, t2189 * t2128 - t2192 * t2331, t2189 * t2132 - t2291, t2189 * t2126 - t2177 * t2192, -qJDD(2) * t2192 + t2189 * t2150, t2189 * t2098 + t2192 * t2091 + pkin(7) * (t2127 * t2192 - t2189 * t2157), t2189 * t2099 + t2192 * t2092 + pkin(7) * (t2129 * t2192 + t2189 * t2155), t2189 * t2076 + pkin(7) * (t2158 * t2192 - t2189 * t2162), pkin(7) * (t2077 * t2192 - t2189 * t2145) - (-pkin(1) * t2192 - pkin(8) * t2189) * t2076, t2189 * t2026 - t2058 * t2192, t2189 * t1981 - t1998 * t2192, t2189 * t1993 - t2050 * t2192, t2189 * t2025 + t2056 * t2192, t2189 * t1994 - t2051 * t2192, t2189 * t2055 - t2094 * t2192, t2189 * t1863 + t2192 * t1899 + pkin(7) * (t1986 * t2192 + t2189 * t2034), t2189 * t1871 + t2192 * t1900 + pkin(7) * (t1988 * t2192 + t2189 * t2047), t2189 * t1820 + t2192 * t1829 + pkin(7) * (t1964 * t2192 + t2189 * t1999), t2189 * t1807 + t2192 * t1828 + pkin(7) * (t1917 * t2192 + t2189 * t1936), t2189 * t1789 - t2466, -t2625, -t2634, t2189 * t1788 - t1841 * t2192, -t2549, t2518, t2189 * t1645 + t2192 * t1660 - t2629, t2189 * t1648 + t2192 * t1663 - t2622, t2189 * t1634 + t2192 * t1652 + t2577, t2189 * t1612 + t2192 * t1615 + pkin(7) * (t1665 * t2192 + t2189 * t1685), t2189 * t1825 - t1885 * t2192, t2634, t2549, t2189 * t1791 - t1844 * t2192, -t2625, t2487, t2189 * t1625 + t2192 * t1640 + t2577, t2189 * t1630 + t2192 * t1647 + t2629, t2189 * t1632 + t2192 * t1653 + t2622, t2189 * t1608 + t2192 * t1610 + pkin(7) * (t1651 * t2192 + t2189 * t1668), t2518, t2549, -t2634, t2487, t2625, t2189 * t1790 - t2466, t2189 * t1617 + t2192 * t1628 + t2577, t2189 * t1621 + t2192 * t1638 + t2622, t2189 * t1623 + t2192 * t1639 - t2629, t2189 * t1605 + t2192 * t1606 + pkin(7) * (t1636 * t2192 + t2189 * t1656); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2166, t2167, 0, 0, t2121, t2107, t2124, t2120, t2122, 0, t2065, t2064, t2046, t2049, t2024, t1980, t1991, t2023, t1992, t2054, t1827, t1831, t1800, t1766, t1783, -t1726, -t1750, t1782, -t2512, t2492, t1641, t1643, t1631, t1611, t1822, t1750, t2512, t1785, -t1726, t2447, t1622, t1627, t1629, t1607, t2492, t2512, -t1750, t2447, t1726, t1784, t1616, t1619, t1620, t1604; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t2402, 0, 0, -g(3), -t2166, 0, t2133, t2108, t2128, t2132, t2126, t2150, t2098, t2099, t2076, pkin(8) * t2076, t2026, t1981, t1993, t2025, t1994, t2055, t1863, t1871, t1820, t1807, t1789, -t1729, -t1756, t1788, -t2513, t2493, t1645, t1648, t1634, t1612, t1825, t1756, t2513, t1791, -t1729, t2446, t1625, t1630, t1632, t1608, t2493, t2513, -t1756, t2446, t1729, t1790, t1617, t1621, t1623, t1605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2402, 0, qJDD(1), 0, g(3), 0, -t2167, 0, t2174, -t2163, -t2331, -t2174, -t2177, -qJDD(2), t2091, t2092, 0, pkin(1) * t2076, -t2058, -t1998, -t2050, t2056, -t2051, -t2094, t1899, t1900, t1829, t1828, -t2407, t1774, t1808, -t1841, -t1811, -t2403, t1660, t1663, t1652, t1615, -t1885, -t1808, t1811, -t1844, t1774, -t2408, t1640, t1647, t1653, t1610, -t2403, t1811, t1808, -t2408, -t1774, -t2407, t1628, t1638, t1639, t1606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2166, t2167, 0, 0, t2121, t2107, t2124, t2120, t2122, 0, t2065, t2064, t2046, t2049, t2024, t1980, t1991, t2023, t1992, t2054, t1827, t1831, t1800, t1766, t1783, -t1726, -t1750, t1782, -t2512, t2492, t1641, t1643, t1631, t1611, t1822, t1750, t2512, t1785, -t1726, t2447, t1622, t1627, t1629, t1607, t2492, t2512, -t1750, t2447, t1726, t1784, t1616, t1619, t1620, t1604; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2250, t2157, t2164, -t2320, t2170, t2320, 0, -t2145, t2130, 0, t2059, t2000, t2052, t2057, t2053, t2095, t1989, t1997, t1897, -pkin(9) * t1936, t2419, -t1777, -t1814, t1847, -t2482, t2404, t1675, t1677, t1661, t1633, t1888, t1814, t2482, t1850, -t1777, t2420, t1649, t1658, t1659, t1614, t2404, t2482, -t1814, t2420, t1777, t2419, t1637, t1644, t1646, t1609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2321, t2155, t2168, t2156, t2165, -t2321, t2145, 0, t2131, 0, t2353, -t2118, -t2073, -t2353, t2069, -t2266, t1940, t1949, -pkin(2) * t1999, -pkin(2) * t1936, -t1907, -t2480, t1872, t1903, -t1875, -t1932, t1696, t1697, t1689, t1655, t1931, -t1872, t1875, -t1909, -t2480, -t2211, t1674, t1676, t1680, t1626, -t1932, t1875, t1872, -t2211, t2480, -t1908, t1662, t1666, t1667, t1613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2174, t2163, t2331, t2174, t2177, qJDD(2), -t2130, -t2131, 0, 0, t2058, t1998, t2050, -t2056, t2051, t2094, t2248, t2247, t2242, t2282, t2407, -t1774, -t1808, t1841, t1811, t2403, t2221, t2220, t2222, t2226, t1885, t1808, -t1811, t1844, -t1774, t2408, t2225, t2224, t2223, t2230, t2403, -t1811, -t1808, t2408, t1774, t2407, t2229, t2227, t2228, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2213, t2070, t2241, -t2136, t2134, t2136, 0, t2096, t2003, 0, t2333, -t1890, -t1924, t2245, t1927, t2267, t1717, t1724, t1699, t1679, t1968, t1924, -t1927, t2333, -t1890, t2245, t1688, t1702, t1703, t1654, t2267, -t1927, -t1924, t2245, t1890, t2333, t1672, t1692, t1693, t1624; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2137, t2072, t2135, -t2214, -t2102, -t2137, -t2096, 0, t2004, 0, t2270, t2519, -t1878, t1906, t1881, t2278, t1706, t1709, t1701, t1687, t2278, t1878, -t1881, t1912, t2519, t2269, t1684, t1690, t1691, t1642, t2278, -t1881, -t1878, t2269, -t2519, t2270, t1670, t1673, t1671, t1618; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2353, t2118, t2073, t2353, -t2069, t2266, -t2003, -t2004, 0, 0, t1907, t2480, -t1872, -t1903, t1875, t1932, t2410, t2409, t2415, t2271, -t1931, t1872, -t1875, t1909, t2480, t2211, t2414, t2418, t2417, t2448, t1932, -t1875, -t1872, t2211, -t2480, t1908, t2412, t2416, t2413, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2020, -t2432, -t2200, -t2365, t2037, t2365, 0, -t1864, t1798, 0, t2365, t2200, -t2037, t2020, -t2432, -t2365, t1749, t2476, t1762, qJ(5) * t1773, t2365, -t2037, -t2200, -t2365, t2432, t2020, t1713, t1716, t1898, t1700; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2363, t2431, t2426, -t2019, -t2201, t2363, t1864, 0, t1799, 0, t2363, -t2426, t2201, -t2363, t2431, -t2019, t1748, t1763, pkin(4) * t2431, pkin(4) * t1773, t2363, t2201, t2426, -t2019, -t2431, -t2363, t1711, t1838, t1714, t1683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, -t2016, t2427, -t2364, -t2428, -t2205, -t1798, -t1799, 0, 0, -t2205, -t2427, t2428, t2364, -t2016, -t2364, t1896, t1734, t1732, t1705, -t2205, t2428, t2427, -t2364, t2016, t2364, t1830, t1712, t1710, t1678; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2205, -t2427, t2428, t2364, -t2016, -t2364, 0, t1765, t1764, 0, -t2205, t2428, t2427, -t2364, t2016, t2364, -qJ(6) * t2427, t2194, t2202 - t2507, -qJ(6) * t1725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2365, -t2200, t2037, -t2020, t2432, t2365, -t1765, 0, -t1773, 0, -t2365, t2037, t2200, t2365, -t2432, -t2020, t2208 + t2445, t2204 + t2444, -t2389, -t2392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2363, t2426, -t2201, t2363, -t2431, t2019, -t1764, t1773, 0, 0, -t2363, -t2201, -t2426, t2019, t2431, t2363, t2193 + 0.2e1 * t2375, -qJ(6) * t2431 + t2390, t2204 - t2422, -qJ(6) * t1741 - t2391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2205, t2428, t2427, -t2364, t2016, t2364, 0, t1733, -t1725, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2363, -t2201, -t2426, t2019, t2431, t2363, -t1733, 0, -t1741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2365, -t2037, -t2200, -t2365, t2432, t2020, t1725, t1741, 0, 0;];
m_new_reg  = t1;
