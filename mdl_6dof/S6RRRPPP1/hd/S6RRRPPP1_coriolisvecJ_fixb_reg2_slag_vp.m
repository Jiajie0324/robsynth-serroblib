% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPPP1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:18:29
% EndTime: 2019-03-09 15:18:55
% DurationCPUTime: 10.26s
% Computational Cost: add. (13355->670), mult. (36355->893), div. (0->0), fcn. (26255->8), ass. (0->304)
t268 = sin(qJ(2));
t270 = cos(qJ(2));
t333 = pkin(2) * t268 - pkin(9) * t270;
t234 = t333 * qJD(1);
t267 = sin(qJ(3));
t213 = t267 * t234;
t424 = cos(pkin(6));
t361 = t424 * qJ(4);
t331 = t361 + pkin(9);
t308 = qJD(3) * t331;
t269 = cos(qJ(3));
t352 = qJD(4) * t424;
t335 = t269 * t352;
t403 = t268 * t269;
t266 = sin(pkin(6));
t363 = t270 * t424;
t457 = t266 * t268 - t267 * t363;
t460 = t213 + (-pkin(8) * t403 + qJ(4) * t457) * qJD(1) + t267 * t308 - t335;
t392 = qJD(1) * t268;
t370 = t267 * t392;
t178 = pkin(8) * t370 + t269 * t234;
t402 = t269 * t270;
t293 = pkin(3) * t268 - t361 * t402;
t336 = t267 * t352;
t459 = qJD(1) * t293 + t269 * t308 + t178 + t336;
t262 = t270 * qJD(1);
t261 = pkin(8) * t262;
t407 = t266 * t269;
t318 = pkin(3) * t267 - qJ(4) * t407;
t174 = t262 * t318 + t261;
t382 = t266 * qJD(4);
t180 = qJD(3) * t318 - t267 * t382;
t458 = t174 - t180;
t423 = cos(pkin(10));
t353 = qJD(3) * t423;
t354 = qJD(3) * t424;
t265 = sin(pkin(10));
t409 = t265 * t267;
t362 = t270 * t423;
t448 = t265 * t457 + t269 * t362;
t397 = t448 * qJD(1) - t269 * t353 + t354 * t409;
t366 = t265 * t424;
t410 = t265 * t266;
t432 = t459 * t366 + t458 * t410 + t423 * t460;
t429 = t266 * t459 - t424 * t458;
t389 = qJD(2) * t269;
t228 = -t370 + t389;
t444 = t262 - qJD(3);
t456 = t228 * t444;
t375 = t269 * t392;
t391 = qJD(2) * t267;
t229 = t375 + t391;
t455 = t229 * t444;
t329 = t424 * t423;
t288 = t265 * t269 + t267 * t329;
t284 = t270 * t288;
t364 = t268 * t423;
t340 = t266 * t364;
t320 = qJD(1) * t340;
t398 = qJD(1) * t284 - t288 * qJD(3) - t320;
t242 = -pkin(2) * t270 - pkin(9) * t268 - pkin(1);
t216 = t242 * qJD(1);
t245 = qJD(2) * pkin(9) + t261;
t154 = t269 * t216 - t267 * t245;
t233 = t333 * qJD(2);
t217 = qJD(1) * t233;
t380 = qJD(1) * qJD(2);
t367 = t268 * t380;
t342 = pkin(8) * t367;
t385 = qJD(3) * t269;
t387 = qJD(3) * t267;
t283 = -t216 * t385 - t267 * t217 + t245 * t387 + t269 * t342;
t454 = t444 * t154 - t283;
t453 = -0.2e1 * t380;
t351 = qJD(4) * t423;
t415 = t229 * t266;
t125 = -t229 * t361 + t154;
t155 = t267 * t216 + t269 * t245;
t126 = -t228 * t361 - t155;
t419 = t228 * t266;
t152 = pkin(3) * t229 - qJ(4) * t419;
t56 = t423 * t125 + t126 * t366 + t152 * t410;
t426 = qJ(5) * t415 - qJD(5) * t424 - t266 * t351 + t56;
t168 = t424 * t444 + t419;
t369 = t270 * t380;
t379 = qJD(2) * qJD(3);
t176 = qJD(3) * t370 + (-t369 - t379) * t269;
t373 = t268 * t385;
t388 = qJD(2) * t270;
t295 = t267 * t388 + t373;
t177 = qJD(1) * t295 + t267 * t379;
t290 = -t177 * t424 + t266 * t367;
t95 = -t423 * t176 + t265 * t290;
t347 = t444 * t266;
t170 = t228 * t424 - t347;
t416 = t229 * t265;
t445 = t266 ^ 2 + t424 ^ 2;
t97 = t170 * t423 - t416 * t445;
t452 = -t97 * t168 + t95;
t451 = t229 * t423;
t411 = t265 * t170;
t123 = t411 + t451;
t167 = t168 ^ 2;
t450 = -t123 ^ 2 - t167;
t257 = pkin(8) * t402;
t186 = t267 * t242 + t257;
t365 = t266 * t423;
t449 = -t174 * t365 + t265 * t460 - t459 * t329;
t206 = t267 * t423 + t269 * t366;
t447 = -qJ(5) * t397 + t206 * qJD(5) - t429;
t360 = t424 * t268;
t446 = -t266 * t270 - t267 * t360;
t122 = -t228 * t329 + t347 * t423 + t416;
t144 = t228 * t265 + t229 * t329;
t332 = qJD(2) * t320 + t176 * t265 - t177 * t329;
t355 = qJD(2) * t424;
t349 = t177 * t266 + t355 * t392;
t25 = t266 * (-t122 * t229 - t349 * t423) + t168 * t144 - t424 * t332;
t145 = t228 * t423 - t229 * t366;
t443 = -t145 * t168 + t266 * (t123 * t229 - t265 * t349) - t424 * t95;
t277 = t266 * (t265 * t332 + t423 * t95) + t122 * t145 + t144 * t123;
t404 = t267 * t270;
t294 = t266 * t404 + t360;
t198 = t294 * qJD(1);
t436 = qJ(5) * t198 - t266 * (qJ(5) * t387 - qJD(5) * t269) + t432;
t319 = t269 * t329;
t205 = -t319 + t409;
t278 = t122 * t397 + t123 * t398 - t205 * t95 + t206 * t332;
t330 = t266 * t387 - t198;
t9 = t122 * t330 + t168 * t398 + t205 * t349 + t332 * t407;
t10 = t123 * t330 + t168 * t397 + t206 * t349 - t407 * t95;
t441 = pkin(8) * t267;
t440 = pkin(4) + qJ(6);
t357 = t423 * t180;
t439 = t440 * t198 + (qJD(6) * t269 - t387 * t440 - t357) * t266 - t449 - t397 * pkin(5);
t438 = -pkin(5) * t398 + t436;
t437 = -t205 * qJD(6) + t398 * t440 + t447;
t435 = -t198 * pkin(4) - (-pkin(4) * t387 - t357) * t266 + t449;
t434 = pkin(4) * t398 + t447;
t433 = -t266 * t357 - t449;
t431 = qJD(2) * pkin(2);
t81 = -t266 * t126 + t424 * t152;
t314 = -t145 * qJ(5) + t81;
t428 = -t440 * t144 + (-qJD(5) * t265 - qJD(6) * t423) * t266 - t314;
t202 = pkin(4) * t415;
t298 = -t265 * t125 + t126 * t329;
t359 = t423 * t152;
t427 = -qJD(6) * t424 + t265 * t382 - t145 * pkin(5) + t202 - (-qJ(6) * t229 - t359) * t266 + t298;
t425 = pkin(5) * t144 - t426;
t422 = t122 * t123;
t421 = t176 * t267;
t420 = t177 * t269;
t418 = t228 * t267;
t417 = t229 * t228;
t414 = t229 * t269;
t260 = pkin(8) * t392;
t244 = t260 - t431;
t413 = t244 * t267;
t412 = t244 * t269;
t405 = t267 * t268;
t272 = qJD(1) ^ 2;
t401 = t270 * t272;
t271 = qJD(2) ^ 2;
t400 = t271 * t268;
t399 = t271 * t270;
t396 = t269 * t217 + t267 * t342;
t395 = t267 * t233 + t242 * t385;
t390 = qJD(2) * t268;
t394 = t269 * t233 + t390 * t441;
t208 = pkin(3) * t366 + qJ(4) * t365;
t263 = t268 ^ 2;
t393 = -t270 ^ 2 + t263;
t386 = qJD(3) * t268;
t384 = qJD(4) * t168;
t383 = qJD(5) * t123;
t60 = qJ(4) * t290 + qJD(4) * t170 - t283;
t107 = -qJD(3) * t155 + t396;
t69 = pkin(3) * t367 + t176 * t361 - t229 * t352 + t107;
t91 = pkin(8) * t369 + t177 * pkin(3) + (qJ(4) * t176 - qJD(4) * t229) * t266;
t13 = t69 * t366 + t91 * t410 + t423 * t60;
t377 = pkin(8) * t404;
t303 = pkin(8) + t318;
t317 = qJ(4) * t266 * t267 + pkin(3) * t269;
t113 = (qJD(3) * t317 - t269 * t382) * t268 + t303 * t388;
t334 = t269 * t354;
t78 = (-t382 + (-pkin(8) * qJD(3) - qJ(4) * t355) * t267) * t270 + (-t336 - pkin(8) * t389 + (qJD(2) * t266 - t334) * qJ(4)) * t268 + t395;
t339 = qJ(4) * t360;
t88 = -t268 * t335 + t293 * qJD(2) + (-t257 + (t339 - t242) * t267) * qJD(3) + t394;
t23 = t113 * t410 + t88 * t366 + t423 * t78;
t376 = t268 * t401;
t108 = qJ(4) * t170 + t155;
t112 = -pkin(3) * t444 + t125;
t139 = -pkin(3) * t228 - qJ(4) * t415 + t244;
t42 = t423 * t108 + t112 * t366 + t139 * t410;
t142 = qJ(4) * t446 + t186;
t227 = t269 * t242;
t147 = -t269 * t339 + t227 + (-pkin(3) - t441) * t270;
t183 = t303 * t268;
t72 = t423 * t142 + t147 * t366 + t183 * t410;
t222 = -pkin(2) - t317;
t230 = t331 * t267;
t231 = t331 * t269;
t115 = t222 * t410 - t230 * t366 + t423 * t231;
t374 = t267 * t386;
t372 = t244 * t387;
t371 = t244 * t385;
t36 = -t266 * t69 + t424 * t91;
t356 = t423 * t222;
t52 = t424 * t113 - t266 * t88;
t350 = pkin(1) * t453;
t99 = -t266 * t147 + t424 * t183;
t150 = t424 * t222 + t266 * t230;
t348 = t270 * t444;
t346 = -t228 + t389;
t345 = -t229 + t391;
t344 = qJD(3) * t444;
t341 = t270 * t367;
t4 = -qJ(5) * t349 + t168 * qJD(5) - t13;
t74 = -t266 * t112 + t424 * t139 + qJD(4);
t328 = t267 * t344;
t327 = t269 * t344;
t96 = t445 * t451 + t411;
t326 = t122 * t97 - t123 * t96;
t110 = -t265 * t374 + t319 * t386 + (t284 - t340) * qJD(2);
t157 = t266 * t362 + t268 * t288;
t29 = t110 * t122 - t157 * t332;
t111 = -t265 * t268 * t334 + qJD(2) * t448 - t353 * t405;
t158 = t265 * t446 + t269 * t364;
t30 = t111 * t123 + t158 * t95;
t322 = -t154 * t269 - t155 * t267;
t34 = qJ(5) * t168 - t42;
t211 = t266 * t405 - t363;
t61 = -qJ(5) * t211 - t72;
t184 = -qJ(5) * t424 - t208;
t46 = -t123 * t145 + t410 * t95;
t312 = -t158 * qJ(5) + t99;
t311 = -t206 * qJ(5) + t150;
t310 = -t349 + t422;
t26 = -t122 * t398 - t205 * t332;
t27 = -t123 * t397 + t95 * t206;
t103 = qJ(5) * t407 - t115;
t3 = pkin(5) * t332 - t4;
t302 = t263 * qJD(1) - t348;
t301 = -pkin(4) * t423 - qJ(5) * t265 - pkin(3);
t300 = t168 * t96 + t332;
t207 = pkin(3) * t329 - qJ(4) * t410;
t299 = -t123 * qJ(5) + t74;
t45 = -t122 * t144 + t332 * t365;
t296 = -t230 * t329 - t265 * t231;
t163 = qJD(2) * t294 + t266 * t373;
t16 = -qJ(5) * t163 - qJD(5) * t211 - t23;
t291 = -t111 * qJ(5) - t158 * qJD(5) + t52;
t287 = t110 * t123 + t111 * t122 + t157 * t95 - t158 * t332;
t286 = t110 * t168 - t122 * t163 - t157 * t349 + t211 * t332;
t285 = t111 * t168 - t123 * t163 - t158 * t349 - t211 * t95;
t5 = -pkin(4) * t332 - qJ(5) * t95 + t36 - t383;
t187 = -pkin(4) * t424 - t207;
t282 = t265 * t60 - t329 * t69 - t365 * t91;
t281 = -t113 * t365 + t265 * t78 - t329 * t88;
t41 = -t265 * t108 + t112 * t329 + t139 * t365;
t55 = t266 * t359 + t298;
t279 = t265 * t142 - t147 * t329 - t183 * t365;
t114 = t266 * t356 + t296;
t1 = -qJ(6) * t332 + t122 * qJD(6) + t5;
t276 = qJD(5) - t41;
t8 = -pkin(4) * t349 + t282;
t274 = -t168 * t122 + t95;
t273 = t95 * pkin(5) - t349 * t440 + t282;
t256 = pkin(4) * t407;
t188 = t301 * t266;
t185 = t227 - t377;
t179 = -pkin(8) * t375 + t213;
t165 = (-qJ(6) * t423 + t301) * t266;
t164 = pkin(5) * t365 - t184;
t151 = pkin(5) * t410 - qJ(6) * t424 + t187;
t132 = -qJD(3) * t186 + t394;
t131 = (-t268 * t389 - t270 * t387) * pkin(8) + t395;
t104 = t256 - t114;
t98 = pkin(4) * t205 + t311;
t90 = -pkin(5) * t205 - t103;
t87 = t168 * t415 + t349 * t424;
t83 = t205 * t440 + t311;
t82 = t206 * pkin(5) + t256 + (qJ(6) * t269 - t356) * t266 - t296;
t73 = -t163 * t168 + t211 * t349;
t66 = -t168 * t330 - t349 * t407;
t63 = pkin(4) * t157 + t312;
t62 = -t211 * pkin(4) + t279;
t49 = t157 * t440 + t312;
t48 = -pkin(5) * t157 - t61;
t47 = -t202 - t55;
t43 = pkin(4) * t144 + t314;
t40 = t158 * pkin(5) - t211 * t440 + t279;
t32 = t168 * pkin(4) + t276;
t31 = pkin(4) * t122 + t299;
t21 = -pkin(5) * t122 + qJD(6) - t34;
t20 = t122 * t440 + t299;
t19 = -t163 * pkin(4) + t281;
t18 = t123 * pkin(5) + t168 * t440 + t276;
t17 = pkin(4) * t110 + t291;
t11 = -pkin(5) * t110 - t16;
t7 = t111 * pkin(5) - t211 * qJD(6) - t163 * t440 + t281;
t6 = t157 * qJD(6) + t110 * t440 + t291;
t2 = t168 * qJD(6) + t273;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t341, t393 * t453, t399, -0.2e1 * t341, -t400, 0, -pkin(8) * t399 + t268 * t350, pkin(8) * t400 + t270 * t350, 0, 0, -t176 * t403 + (t269 * t388 - t374) * t229 (t228 * t269 - t229 * t267) * t388 + (t421 - t420 + (-t414 - t418) * qJD(3)) * t268, t268 * t328 + t176 * t270 + (t229 * t268 + t269 * t302) * qJD(2), t177 * t405 - t228 * t295, t268 * t327 + t177 * t270 + (t228 * t268 - t267 * t302) * qJD(2) (-t262 - t444) * t390, -t132 * t444 - t107 * t270 + (pkin(8) * t177 + t371) * t268 + ((-pkin(8) * t228 + t413) * t270 + (t154 + (t185 + t377) * qJD(1)) * t268) * qJD(2), t131 * t444 - t283 * t270 + (-pkin(8) * t176 - t372) * t268 + ((pkin(8) * t229 + t412) * t270 + (-t155 + (-t186 + t257) * qJD(1)) * t268) * qJD(2), t131 * t228 - t132 * t229 + t185 * t176 - t186 * t177 + t322 * t388 + (t283 * t267 - t107 * t269 + (t154 * t267 - t155 * t269) * qJD(3)) * t268, -t283 * t186 + t107 * t185 + t155 * t131 + t154 * t132 + (t244 + t260) * pkin(8) * t388, t30, -t287, -t285, t29, t286, t73, t110 * t74 + t122 * t52 + t157 * t36 + t163 * t41 + t168 * t281 - t211 * t282 - t279 * t349 - t332 * t99, t111 * t74 + t123 * t52 - t13 * t211 + t158 * t36 - t163 * t42 + t168 * t23 - t349 * t72 + t95 * t99, -t110 * t42 - t111 * t41 - t122 * t23 + t123 * t281 - t13 * t157 + t158 * t282 + t279 * t95 + t332 * t72, t13 * t72 + t23 * t42 + t279 * t282 - t281 * t41 + t36 * t99 + t52 * t74, t73, t285, -t286, t30, -t287, t29, t110 * t34 + t111 * t32 + t122 * t16 + t123 * t19 + t157 * t4 + t158 * t8 - t332 * t61 + t62 * t95, -t110 * t31 - t122 * t17 - t157 * t5 + t163 * t32 - t168 * t19 + t211 * t8 + t332 * t63 + t349 * t62, -t111 * t31 - t123 * t17 - t158 * t5 + t16 * t168 - t163 * t34 - t211 * t4 - t349 * t61 - t63 * t95, t16 * t34 + t17 * t31 + t19 * t32 + t4 * t61 + t5 * t63 + t62 * t8, t73, -t286, -t285, t29, t287, t30, -t11 * t122 - t110 * t21 + t111 * t18 + t123 * t7 - t157 * t3 + t158 * t2 + t332 * t48 + t40 * t95, -t1 * t158 - t11 * t168 - t111 * t20 - t123 * t6 + t163 * t21 + t211 * t3 + t349 * t48 - t49 * t95, t1 * t157 + t110 * t20 + t122 * t6 - t163 * t18 + t168 * t7 - t2 * t211 - t332 * t49 - t349 * t40, t1 * t49 + t11 * t21 + t18 * t7 + t2 * t40 + t20 * t6 + t3 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t376, t393 * t272, 0, t376, 0, 0, t272 * pkin(1) * t268, pkin(1) * t401, 0, 0, -t414 * t444 - t421 (-t176 - t456) * t269 + (-t177 + t455) * t267, -t327 + (t268 * t345 + t269 * t348) * qJD(1), t418 * t444 - t420, t328 + (-t267 * t348 + t268 * t346) * qJD(1), t444 * t392, pkin(9) * t327 - pkin(2) * t177 + t372 + t178 * t444 + ((-pkin(9) * t391 - t154) * t268 + (-pkin(8) * t346 - t413) * t270) * qJD(1), pkin(2) * t176 + t371 + ((-pkin(9) * t389 + t155) * t268 + (pkin(8) * t345 - t412) * t270) * qJD(1) + (-pkin(9) * t387 - t179) * t444, t178 * t229 - t179 * t228 + ((qJD(3) * t229 - t177) * pkin(9) + t454) * t269 + (-t107 + t444 * t155 + (-qJD(3) * t228 - t176) * pkin(9)) * t267, -t154 * t178 - t155 * t179 + (-t244 - t431) * t261 + (qJD(3) * t322 - t107 * t267 - t269 * t283) * pkin(9), t27, t278, t10, t26, -t9, t66, t114 * t349 - t150 * t332 - t41 * t198 + t36 * t205 - t398 * t74 + (t269 * t282 + t387 * t41) * t266 + t433 * t168 + t429 * t122, -t115 * t349 + t150 * t95 + t42 * t198 + t36 * t206 - t397 * t74 + (t13 * t269 - t387 * t42) * t266 - t432 * t168 + t429 * t123, -t114 * t95 + t115 * t332 + t122 * t432 + t123 * t433 - t13 * t205 + t206 * t282 + t397 * t41 + t398 * t42, -t114 * t282 + t13 * t115 + t36 * t150 - t41 * t433 - t42 * t432 + t429 * t74, t66, -t10, t9, t27, t278, t26, -t103 * t332 + t104 * t95 + t122 * t436 - t123 * t435 + t4 * t205 + t8 * t206 - t32 * t397 - t34 * t398, t104 * t349 - t32 * t198 - t5 * t205 + t98 * t332 + t398 * t31 + (-t269 * t8 + t32 * t387) * t266 + t435 * t168 + t434 * t122, -t103 * t349 + t34 * t198 - t5 * t206 - t98 * t95 + t397 * t31 + (t269 * t4 - t34 * t387) * t266 + t436 * t168 + t434 * t123, t4 * t103 + t8 * t104 - t31 * t434 - t32 * t435 + t34 * t436 + t5 * t98, t66, t9, t10, t26, -t278, t27, t122 * t438 + t123 * t439 - t18 * t397 + t2 * t206 - t3 * t205 + t21 * t398 + t332 * t90 + t82 * t95, -t1 * t206 + t123 * t437 + t168 * t438 + t20 * t397 + t21 * t330 - t3 * t407 + t349 * t90 - t83 * t95, t1 * t205 - t122 * t437 + t168 * t439 - t18 * t330 + t2 * t407 - t20 * t398 - t332 * t83 - t349 * t82, t1 * t83 + t18 * t439 + t2 * t82 - t20 * t437 - t21 * t438 + t3 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t417, -t228 ^ 2 + t229 ^ 2, -t176 + t456, t417, -t177 - t455, t367, -t155 * t262 - t244 * t229 + t396, -t244 * t228 - t454, 0, 0, t46, t277, -t443, t45, -t25, t87, -t282 * t424 - t81 * t122 + t207 * t349 - t74 * t144 + t55 * t168 + (pkin(3) * t332 - t229 * t41 + t265 * t384 - t36 * t423) * t266, -t13 * t424 - t81 * t123 - t208 * t349 - t74 * t145 - t56 * t168 + (-pkin(3) * t95 + t168 * t351 + t229 * t42 + t265 * t36) * t266, t56 * t122 + t55 * t123 + t42 * t144 + t41 * t145 - t207 * t95 + t208 * t332 + (t423 * t13 + t282 * t265 + (-t122 * t423 + t123 * t265) * qJD(4)) * t266, -t282 * t207 + t13 * t208 - t41 * t55 - t42 * t56 - t74 * t81 + (-pkin(3) * t36 + (-t265 * t41 + t42 * t423) * qJD(4)) * t266, t87, t443, t25, t46, t277, t45, -t47 * t123 - t34 * t144 - t32 * t145 - t184 * t332 + t187 * t95 + t426 * t122 + (-t423 * t4 + (qJD(4) * t123 + t8) * t265) * t266, t8 * t424 + t43 * t122 + t187 * t349 + t31 * t144 + t47 * t168 + t188 * t332 + (t423 * t5 - t229 * t32 + (qJD(5) * t122 - t384) * t265) * t266, -t4 * t424 + t43 * t123 - t184 * t349 + t31 * t145 - t188 * t95 + t426 * t168 + (t229 * t34 + (-t5 + t383) * t265) * t266, t4 * t184 + t8 * t187 + t5 * t188 - t31 * t43 - t32 * t47 + t426 * t34 + (qJD(4) * t32 - qJD(5) * t31) * t410, t87, t25, -t443, t45, -t277, t46, t21 * t144 - t18 * t145 + t151 * t95 + t164 * t332 + (t2 * t265 + t3 * t423) * t266 + t427 * t123 - t425 * t122, t3 * t424 + t164 * t349 + t20 * t145 - t165 * t95 + (-t1 * t265 - t21 * t229) * t266 - t425 * t168 - t428 * t123, -t2 * t424 - t151 * t349 - t20 * t144 - t165 * t332 + (-t1 * t423 + t18 * t229) * t266 + t427 * t168 + t428 * t122, t1 * t165 + t2 * t151 + t3 * t164 + t18 * t427 + t20 * t428 + t21 * t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, t452, t326, t41 * t96 - t42 * t97 + t36, 0, 0, 0, 0, 0, 0, t326, t300, -t452, -t32 * t96 + t34 * t97 + t5, 0, 0, 0, 0, 0, 0, t326, -t452, -t300, -t18 * t96 - t21 * t97 + t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274, -t310, t450, t31 * t123 - t34 * t168 + t8, 0, 0, 0, 0, 0, 0, t274, t450, t310, t20 * t123 + (qJD(6) + t21) * t168 + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123 * t168 + t332, t349 + t422, -t122 ^ 2 - t167, -t122 * t20 - t168 * t18 + t3;];
tauc_reg  = t12;
