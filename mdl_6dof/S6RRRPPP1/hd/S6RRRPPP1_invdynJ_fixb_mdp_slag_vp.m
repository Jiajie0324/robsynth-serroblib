% Calculate vector of inverse dynamics joint torques for
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
% MDP [29x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPP1_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPPP1_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(29,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [29 1]), ...
  'S6RRRPPP1_invdynJ_fixb_mdp_slag_vp: MDP has to be [29x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:19:06
% EndTime: 2019-03-09 15:19:31
% DurationCPUTime: 20.32s
% Computational Cost: add. (15445->879), mult. (37084->1090), div. (0->0), fcn. (27132->10), ass. (0->364)
t906 = sin(qJ(2));
t1050 = qJD(1) * t906;
t905 = sin(qJ(3));
t1016 = t905 * t1050;
t909 = cos(qJ(2));
t989 = pkin(2) * t906 - pkin(9) * t909;
t842 = t989 * qJD(1);
t908 = cos(qJ(3));
t1054 = pkin(8) * t1016 + t908 * t842;
t904 = cos(pkin(6));
t1079 = t909 * t904;
t1027 = qJ(4) * t1079;
t946 = pkin(3) * t906 - t1027 * t908;
t715 = qJD(1) * t946 + t1054;
t1039 = qJD(4) * t905;
t1011 = t904 * t1039;
t1114 = qJ(4) * t904;
t1004 = pkin(9) + t1114;
t977 = qJD(3) * t1004;
t770 = -t908 * t977 - t1011;
t1163 = t715 - t770;
t893 = t909 * qJD(1);
t889 = pkin(8) * t893;
t902 = sin(pkin(6));
t1095 = t902 * t908;
t1028 = qJ(4) * t1095;
t1132 = pkin(3) * t905;
t962 = -t1028 + t1132;
t765 = t893 * t962 + t889;
t768 = qJD(3) * t962 - t1039 * t902;
t1162 = -t765 + t768;
t1038 = qJD(4) * t908;
t1010 = t904 * t1038;
t1083 = t906 * t908;
t1096 = t902 * t906;
t1160 = -t905 * t1079 + t1096;
t820 = t905 * t842;
t1161 = t905 * t977 - t1010 + t820 + (-pkin(8) * t1083 + qJ(4) * t1160) * qJD(1);
t1043 = qJD(3) * t908;
t1045 = qJD(3) * t905;
t901 = sin(pkin(10));
t1098 = t901 * t904;
t1080 = t908 * t909;
t903 = cos(pkin(10));
t745 = t1080 * t903 + t1160 * t901;
t1065 = t745 * qJD(1) - t1043 * t903 + t1045 * t1098;
t1086 = t905 * t906;
t957 = t904 * t1086 + t902 * t909;
t1047 = qJD(2) * t908;
t837 = t1016 - t1047;
t1103 = t837 * t904;
t1143 = t893 - qJD(3);
t999 = t1143 * t902;
t947 = t999 + t1103;
t1159 = t901 * t947;
t1099 = t901 * t902;
t1069 = -t1098 * t1163 + t1162 * t1099 - t1161 * t903;
t1068 = t1162 * t904 + t1163 * t902;
t1020 = t903 * t1096;
t1090 = t903 * t905;
t958 = t1090 * t904 + t901 * t908;
t744 = t958 * t909 - t1020;
t1066 = t744 * qJD(1) - t958 * qJD(3);
t1158 = -t903 * (t715 * t904 + t765 * t902) + t1161 * t901;
t1142 = qJD(3) * t1143;
t1157 = t1142 * t905;
t1156 = t1143 * t837;
t1015 = t908 * t1050;
t1049 = qJD(2) * t905;
t839 = t1015 + t1049;
t1155 = t1143 * t839;
t1032 = t906 * qJDD(1);
t1044 = qJD(3) * t906;
t1153 = -qJD(1) * t1044 + qJDD(2);
t726 = (qJD(2) * (qJD(3) + t893) + t1032) * t905 - t1153 * t908;
t1033 = qJD(1) * qJD(2);
t1008 = t906 * t1033;
t892 = t909 * qJDD(1);
t1031 = qJDD(3) - t892;
t952 = t1008 + t1031;
t920 = t904 * t726 - t902 * t952;
t1154 = MDP(24) + MDP(27);
t1118 = g(3) * t909;
t907 = sin(qJ(1));
t910 = cos(qJ(1));
t984 = g(1) * t910 + g(2) * t907;
t1149 = t906 * t984;
t1007 = t909 * t1033;
t887 = pkin(8) * t1032;
t807 = -qJDD(2) * pkin(2) + pkin(8) * t1007 + t887;
t1152 = pkin(9) * t1142 - t1118 + t1149 - t807;
t840 = t1004 * t905;
t961 = qJ(4) * t902 * t905 + pkin(3) * t908;
t949 = pkin(2) + t961;
t1151 = t903 * (-t840 * t904 - t902 * t949);
t896 = t909 * pkin(2);
t1018 = -pkin(1) - t896;
t894 = t906 * pkin(9);
t966 = t1018 - t894;
t824 = t966 * qJD(1);
t1115 = qJD(2) * pkin(9);
t864 = t889 + t1115;
t741 = t905 * t824 + t908 * t864;
t698 = qJ(4) * t1103 - t741;
t1104 = t837 * t902;
t735 = pkin(3) * t839 + qJ(4) * t1104;
t1150 = t903 * (t698 * t904 + t735 * t902);
t725 = qJD(2) * t1043 + (t1007 + t1032) * t908 + t1153 * t905;
t645 = t725 * t901 + t903 * t920;
t1091 = t903 * t904;
t1102 = t839 * t901;
t694 = t1091 * t837 + t903 * t999 + t1102;
t1148 = t645 * qJ(6) + t694 * qJD(6);
t1040 = qJD(4) * t903;
t1101 = t839 * t902;
t740 = t908 * t824 - t905 * t864;
t697 = -t1114 * t839 + t740;
t629 = t698 * t1098 + t735 * t1099 + t903 * t697;
t1058 = qJ(5) * t1101 - qJD(5) * t904 - t1040 * t902 + t629;
t1052 = -t894 - t896;
t862 = -pkin(1) + t1052;
t879 = pkin(8) * t1080;
t1053 = t905 * t862 + t879;
t1087 = t904 * t908;
t809 = t1087 * t901 + t1090;
t1146 = qJ(5) * t1065 - qJD(5) * t809 + t1068;
t1145 = -t1091 * t770 - t1158;
t1141 = MDP(22) + MDP(26);
t1140 = -MDP(23) + MDP(28);
t1077 = t910 * t905;
t817 = t1080 * t907 - t1077;
t1078 = t909 * t910;
t819 = t1078 * t908 + t905 * t907;
t985 = -g(1) * t819 - g(2) * t817;
t1001 = t726 * t902 + t904 * t952;
t1117 = pkin(4) + qJ(6);
t646 = t903 * t725 - t901 * t920;
t1139 = pkin(5) * t646 - t1001 * t1117;
t1138 = t902 ^ 2 + t904 ^ 2;
t743 = t903 * t1083 - t901 * t957;
t1084 = t906 * t907;
t1081 = t907 * t909;
t816 = t1081 * t905 + t908 * t910;
t1109 = t816 * t902;
t755 = t1084 * t904 + t1109;
t1082 = t906 * t910;
t818 = -t1077 * t909 + t907 * t908;
t1106 = t818 * t902;
t756 = t1082 * t904 - t1106;
t814 = t1086 * t902 - t1079;
t1137 = -g(1) * t756 - g(2) * t755 - g(3) * t814;
t843 = t989 * qJD(2);
t750 = qJD(1) * t843 + qJDD(1) * t966;
t806 = qJDD(2) * pkin(9) + (-t1008 + t892) * pkin(8);
t948 = t824 * t1043 - t1045 * t864 + t905 * t750 + t908 * t806;
t615 = -qJ(4) * t920 - qJD(4) * t947 + t948;
t738 = t908 * t750;
t919 = -qJD(3) * t741 - t905 * t806 + t738;
t967 = -qJ(4) * t725 - qJD(4) * t839;
t622 = pkin(3) * t952 + t904 * t967 + t919;
t639 = pkin(3) * t726 + t902 * t967 + t807;
t587 = -t901 * t615 + t903 * (t622 * t904 + t639 * t902);
t1041 = qJD(4) * t902;
t1061 = t862 * t1043 + t905 * t843;
t650 = (-t1041 + (-pkin(8) * qJD(3) - qJD(2) * t1114) * t905) * t909 + (-pkin(8) * t1047 - t1011 + (qJD(2) * t902 - t1043 * t904) * qJ(4)) * t906 + t1061;
t1048 = qJD(2) * t906;
t1129 = pkin(8) * t905;
t1060 = t1048 * t1129 + t908 * t843;
t1088 = t904 * t906;
t873 = qJ(4) * t1088;
t658 = -t906 * t1010 + t946 * qJD(2) + (-t879 + (-t862 + t873) * t905) * qJD(3) + t1060;
t1046 = qJD(2) * t909;
t678 = (qJD(3) * t961 - t1038 * t902) * t906 + (pkin(8) + t962) * t1046;
t599 = -t901 * t650 + t903 * (t658 * t904 + t678 * t902);
t671 = -qJ(4) * t947 + t741;
t677 = -pkin(3) * t1143 + t697;
t863 = -qJD(2) * pkin(2) + pkin(8) * t1050;
t716 = pkin(3) * t837 - qJ(4) * t1101 + t863;
t613 = -t901 * t671 + t903 * (t677 * t904 + t716 * t902);
t724 = -qJ(4) * t957 + t1053;
t836 = t908 * t862;
t730 = -t908 * t873 + t836 + (-pkin(3) - t1129) * t909;
t858 = t906 * t1028;
t771 = -t858 + (pkin(8) + t1132) * t906;
t641 = -t901 * t724 + t903 * (t730 * t904 + t771 * t902);
t1085 = t905 * t909;
t1026 = t902 * t1085;
t815 = t1026 + t1088;
t796 = t815 * qJD(1);
t1072 = qJ(5) * t796 - t902 * (qJ(5) * t1045 - qJD(5) * t908) - t1069;
t759 = t1143 * t904 - t1104;
t758 = t759 ^ 2;
t1131 = pkin(4) * t1001;
t1128 = pkin(8) * t909;
t1125 = g(1) * t907;
t1119 = g(3) * t906;
t1092 = t903 * t839;
t695 = t1092 - t1159;
t1112 = t694 * t695;
t1111 = t725 * t905;
t1110 = t768 * t903;
t1108 = t817 * t901;
t1107 = t817 * t902;
t1105 = t819 * t902;
t1100 = t839 * t908;
t1097 = t902 * t903;
t1023 = t903 * t1087;
t808 = t901 * t905 - t1023;
t1076 = qJD(6) * t808 - t1066 * t1117 + t1146;
t1075 = t1117 * t796 + (qJD(6) * t908 - t1045 * t1117 - t1110) * t902 + t1145 - t1065 * pkin(5);
t1074 = pkin(5) * t1066 - t1072;
t1073 = -pkin(4) * t1066 + t1146;
t1071 = pkin(4) * t796 + (-pkin(4) * t1045 - t1110) * t902 + t1145;
t1070 = (t768 * t902 + t770 * t904) * t903 + t1158;
t690 = t901 * t697;
t1067 = -pkin(4) * t1101 + t690;
t1064 = -g(1) * t1105 - g(2) * t1107;
t1036 = qJD(5) * t901;
t727 = t1091 * t839 - t837 * t901;
t653 = -t698 * t902 + t904 * t735;
t728 = -t1098 * t839 - t837 * t903;
t956 = -qJ(5) * t728 + t653;
t1063 = -t1117 * t727 + (-qJD(6) * t903 - t1036) * t902 - t956;
t841 = t1004 * t908;
t812 = t901 * t841;
t1062 = pkin(4) * t1095 + t812;
t1012 = t901 * t1041;
t1059 = -qJD(6) * t904 + t1012 + t698 * t1091 - pkin(5) * t728 - (-qJ(6) * t839 - t735 * t903) * t902 - t1067;
t1057 = pkin(5) * t727 - t1058;
t1056 = pkin(9) * t1081 + t907 * t1027;
t1055 = pkin(9) * t1078 + t910 * t1027;
t811 = pkin(3) * t1098 + qJ(4) * t1097;
t899 = t906 ^ 2;
t1051 = -t909 ^ 2 + t899;
t1042 = qJD(4) * t759;
t1037 = qJD(5) * t695;
t1035 = t863 * qJD(3);
t1030 = t837 * t1128;
t1029 = g(3) * t1083;
t1025 = t902 * t1084;
t588 = t622 * t1098 + t639 * t1099 + t903 * t615;
t600 = t658 * t1098 + t678 * t1099 + t903 * t650;
t614 = t677 * t1098 + t716 * t1099 + t903 * t671;
t642 = t730 * t1098 + t771 * t1099 + t903 * t724;
t680 = -t840 * t1098 - t1099 * t949 + t903 * t841;
t1017 = -pkin(3) * t903 - pkin(4);
t1014 = t905 * t1044;
t1013 = t906 * t1043;
t1005 = -qJ(5) * t901 - pkin(3);
t1002 = pkin(8) * t1143;
t625 = -t658 * t902 + t904 * t678;
t664 = -t730 * t902 + t904 * t771;
t733 = t840 * t902 - t904 * t949;
t1000 = t909 * t1143;
t996 = t1143 * qJD(2);
t991 = t904 * t1013;
t990 = -pkin(3) * t1086 + t858;
t686 = t1020 * t907 - t1091 * t816 - t1108;
t688 = -t1020 * t910 - t1091 * t818 + t819 * t901;
t988 = -g(1) * t686 - g(2) * t688;
t687 = -t901 * t1025 + t1098 * t816 - t817 * t903;
t689 = t819 * t903 + (t1082 * t902 + t818 * t904) * t901;
t987 = g(1) * t687 + g(2) * t689;
t986 = g(1) * t755 - g(2) * t756;
t983 = -g(2) * t910 + t1125;
t711 = t1091 * t817 - t816 * t901;
t712 = -t1098 * t817 - t816 * t903;
t802 = t816 * pkin(3);
t981 = t712 * pkin(4) + qJ(5) * t711 - t802;
t713 = t1091 * t819 + t818 * t901;
t714 = -t1098 * t819 + t818 * t903;
t804 = t818 * pkin(3);
t980 = t714 * pkin(4) + qJ(5) * t713 + t804;
t780 = -qJ(5) * t904 - t811;
t979 = t1045 * t902 - t796;
t643 = -t677 * t902 + t904 * t716 + qJD(4);
t978 = t908 * t1142;
t596 = -t622 * t902 + t904 * t639 + qJDD(4);
t584 = -qJ(5) * t1001 + t759 * qJD(5) - t588;
t976 = pkin(3) * t1080 + qJ(4) * t1026 - t1052 + t873;
t965 = -t817 * pkin(3) + t910 * pkin(8) - qJ(4) * t1109;
t605 = qJ(5) * t759 - t614;
t631 = -qJ(5) * t814 - t642;
t742 = t1083 * t901 + t903 * t957;
t720 = t742 * t907;
t721 = t743 * t907;
t964 = -t721 * pkin(4) - qJ(5) * t720 + t1056;
t722 = t742 * t910;
t723 = t743 * t910;
t963 = -t723 * pkin(4) - qJ(5) * t722 + t1055;
t959 = -0.2e1 * pkin(1) * t1033 - pkin(8) * qJDD(2);
t954 = -qJ(5) * t743 + t664;
t953 = -qJ(5) * t809 + t733;
t668 = qJ(5) * t1095 - t680;
t912 = qJD(1) ^ 2;
t945 = pkin(1) * t912 + t984;
t776 = -t1023 * t906 + t1086 * t901;
t944 = g(1) * t713 + g(2) * t711 - g(3) * t776;
t777 = t809 * t906;
t943 = -g(1) * t714 - g(2) * t712 + g(3) * t777;
t942 = g(1) * t722 + g(2) * t720 - g(3) * t744;
t941 = g(1) * t723 + g(2) * t721 - g(3) * t745;
t778 = t814 * t907;
t779 = t814 * t910;
t940 = g(1) * t779 + g(2) * t778 - g(3) * t815;
t937 = -qJ(5) * t695 + t643;
t934 = -t777 * pkin(4) - qJ(5) * t776 + t990;
t751 = qJD(2) * t815 + t1013 * t902;
t592 = -qJ(5) * t751 - qJD(5) * t814 - t600;
t583 = -t645 * pkin(5) + qJDD(6) - t584;
t930 = t745 * pkin(4) + qJ(5) * t744 + t976;
t675 = qJD(2) * t745 - t1014 * t903 - t901 * t991;
t929 = -qJ(5) * t675 - qJD(5) * t743 + t625;
t927 = t687 * pkin(4) + qJ(5) * t686 + t965;
t926 = qJD(5) - t613;
t911 = qJD(2) ^ 2;
t925 = 0.2e1 * qJDD(1) * pkin(1) - pkin(8) * t911 + t983;
t924 = qJDD(5) - t587;
t923 = pkin(2) * t1078 + t819 * pkin(3) + t907 * pkin(8) + pkin(9) * t1082 - qJ(4) * t1106 + (pkin(1) + t873) * t910;
t922 = t1031 * t908 + t1157;
t921 = (-t1004 * t906 + t1018) * t1125;
t585 = pkin(4) * t645 - qJ(5) * t646 - t1037 + t596;
t918 = t689 * pkin(4) + qJ(5) * t688 + t923;
t917 = -g(1) * t688 - g(2) * (t1108 + (t816 * t904 - t1025) * t903) - g(3) * t742 + t924;
t914 = t585 + t1137;
t913 = t949 * t1149;
t871 = qJ(4) * t1099;
t810 = pkin(3) * t1091 - t871;
t782 = (-pkin(4) * t903 + t1005) * t902;
t781 = t1017 * t904 + t871;
t753 = (-t1117 * t903 + t1005) * t902;
t752 = pkin(5) * t1097 - t780;
t734 = pkin(5) * t1099 + t871 + (-qJ(6) + t1017) * t904;
t679 = -t812 + t1151;
t674 = qJD(2) * t744 - t1014 * t901 + t903 * t991;
t669 = t1062 - t1151;
t663 = pkin(4) * t808 + t953;
t662 = -t1102 * t1138 - t903 * t947;
t661 = t1092 * t1138 - t1159;
t659 = -pkin(5) * t808 - t668;
t655 = t1117 * t808 + t953;
t654 = t840 * t1091 + pkin(5) * t809 + (qJ(6) * t908 + t903 * t949) * t902 + t1062;
t633 = pkin(4) * t742 + t954;
t632 = -pkin(4) * t814 - t641;
t628 = -t690 + t1150;
t621 = t1117 * t742 + t954;
t620 = -pkin(5) * t742 - t631;
t619 = t1067 - t1150;
t617 = pkin(4) * t727 + t956;
t610 = pkin(5) * t743 - t1117 * t814 - t641;
t603 = pkin(4) * t759 + t926;
t602 = pkin(4) * t694 + t937;
t598 = -pkin(5) * t694 + qJD(6) - t605;
t597 = t1117 * t694 + t937;
t595 = -pkin(4) * t751 - t599;
t594 = pkin(5) * t695 + t1117 * t759 + t926;
t593 = pkin(4) * t674 + t929;
t591 = -pkin(5) * t674 - t592;
t590 = pkin(5) * t675 - qJD(6) * t814 - t1117 * t751 - t599;
t589 = qJD(6) * t742 + t1117 * t674 + t929;
t586 = t924 - t1131;
t582 = t585 + t1148;
t581 = qJD(6) * t759 + t1139 + t924;
t1 = [((-t837 * t908 - t839 * t905) * t1046 + (-t1111 - t726 * t908 + (t837 * t905 - t1100) * qJD(3)) * t906) * MDP(12) + (t1061 * t1143 - t1053 * t1031 - g(1) * t816 - g(2) * t818 + (t863 * t1047 + (t839 * qJD(2) - t1157) * pkin(8) + t948) * t909 + (-t905 * t1035 + pkin(8) * t725 + t807 * t908 + (-qJD(1) * t1053 - t1002 * t908 - t741) * qJD(2)) * t906) * MDP(17) + (t1001 * t641 + t587 * t814 + t596 * t742 - t599 * t759 + t613 * t751 + t625 * t694 + t643 * t674 + t645 * t664 - t987) * MDP(18) + (t1001 * t632 - t585 * t742 + t586 * t814 - t593 * t694 - t595 * t759 - t602 * t674 + t603 * t751 - t633 * t645 + t987) * MDP(23) + (-t1001 * t610 - t581 * t814 + t582 * t742 + t589 * t694 + t590 * t759 - t594 * t751 + t597 * t674 + t621 * t645 - t987) * MDP(28) + (-t1001 * t642 - t588 * t814 + t596 * t743 + t600 * t759 - t614 * t751 + t625 * t695 + t643 * t675 + t646 * t664 - t988) * MDP(19) + (-t1001 * t631 - t584 * t814 - t585 * t743 + t592 * t759 - t593 * t695 - t602 * t675 - t605 * t751 - t633 * t646 + t988) * MDP(24) + (t1001 * t620 - t582 * t743 + t583 * t814 - t589 * t695 - t591 * t759 - t597 * t675 + t598 * t751 - t621 * t646 + t988) * MDP(27) + (t582 * t621 + t597 * t589 + t581 * t610 + t594 * t590 + t583 * t620 + t598 * t591 - g(1) * (-pkin(5) * t755 + qJ(6) * t687 + t927) - g(2) * (pkin(5) * t756 + qJ(6) * t689 + t918) - t921) * MDP(29) + (-g(1) * t965 - g(2) * t923 + t587 * t641 + t588 * t642 + t596 * t664 + t613 * t599 + t614 * t600 + t643 * t625 - t921) * MDP(21) + t983 * MDP(2) + t984 * MDP(3) + (-t587 * t743 - t588 * t742 - t599 * t695 - t600 * t694 - t613 * t675 - t614 * t674 - t641 * t646 - t642 * t645 + t986) * MDP(20) + (t584 * t742 + t586 * t743 + t592 * t694 + t595 * t695 + t603 * t675 + t605 * t674 + t631 * t645 + t632 * t646 + t986) * MDP(22) + (t581 * t743 - t583 * t742 + t590 * t695 - t591 * t694 + t594 * t675 - t598 * t674 + t610 * t646 - t620 * t645 + t986) * MDP(26) + (-g(1) * t927 - g(2) * t918 + t584 * t631 + t585 * t633 + t586 * t632 + t605 * t592 + t602 * t593 + t603 * t595 - t921) * MDP(25) + (t725 * t1083 + (t1046 * t908 - t1014) * t839) * MDP(11) + qJDD(1) * MDP(1) + ((-t908 * t996 - t725) * t909 + ((t839 + t1015) * qJD(2) + t922) * t906) * MDP(13) + (-t906 * t996 - t909 * t952) * MDP(15) + 0.2e1 * (-t1033 * t1051 + t892 * t906) * MDP(5) + (qJDD(1) * t899 + 0.2e1 * t1007 * t906) * MDP(4) + (t906 * t959 + t909 * t925) * MDP(9) + (-t906 * t925 + t909 * t959) * MDP(10) + (qJDD(2) * t906 + t909 * t911) * MDP(6) + (qJDD(2) * t909 - t906 * t911) * MDP(7) + (-(-qJD(3) * t1053 + t1060) * t1143 + (-pkin(8) * t1085 + t836) * t952 - t919 * t909 + t740 * t1048 + qJD(2) * t1030 + t906 * pkin(8) * t726 + t807 * t1086 + g(1) * t817 - g(2) * t819 + (t1046 * t905 + t1013) * t863) * MDP(16) + (t726 * t909 + (-t837 * qJD(2) + t978) * t906 + (-t906 * t952 + t909 * t996) * t905) * MDP(14); (t906 * t945 - t1118 - t887) * MDP(9) + (t1119 + (-pkin(8) * qJDD(1) + t945) * t909) * MDP(10) + ((t725 + t1156) * t908 + (-t726 + t1155) * t905) * MDP(12) + (t1001 * t659 + t1065 * t597 - t1074 * t759 - t1076 * t695 - t1095 * t583 - t582 * t809 + t598 * t979 - t646 * t655 + t942) * MDP(27) + (-t1001 * t680 - t1065 * t643 + t1068 * t695 + t1069 * t759 + t1095 * t588 + t596 * t809 - t614 * t979 + t646 * t733 - t942) * MDP(19) + (-t1001 * t668 + t1065 * t602 + t1072 * t759 - t1073 * t695 + t1095 * t584 - t585 * t809 - t605 * t979 - t646 * t663 + t942) * MDP(24) + (-t1001 * t654 - t1066 * t597 + t1075 * t759 + t1076 * t694 + t1095 * t581 + t582 * t808 - t594 * t979 + t645 * t655 + t941) * MDP(28) + (t1001 * t679 - t1066 * t643 + t1068 * t694 - t1070 * t759 - t1095 * t587 + t596 * t808 + t613 * t979 + t645 * t733 + t941) * MDP(18) + (t1001 * t669 + t1066 * t602 - t1071 * t759 - t1073 * t694 - t1095 * t586 - t585 * t808 + t603 * t979 - t645 * t663 - t941) * MDP(23) + (-t1100 * t1143 + t1111) * MDP(11) + (-pkin(2) * t726 + t1054 * t1143 + (-t740 * t906 - t1030) * qJD(1) + (-pkin(9) * t952 - t1143 * t863) * t905 + t1152 * t908) * MDP(16) + (-pkin(2) * t725 - t820 * t1143 + (-t839 * t1128 + t741 * t906) * qJD(1) + (-pkin(9) * t1031 + t1035 + (-t863 * t909 + (t1002 - t1115) * t906) * qJD(1)) * t908 - t1152 * t905) * MDP(17) + qJDD(2) * MDP(8) + t1143 * MDP(15) * t1050 + ((-t905 * t1000 + (t837 + t1047) * t906) * qJD(1) + t922) * MDP(14) + (t582 * t655 + t581 * t654 + t583 * t659 - g(1) * (-pkin(5) * t779 - qJ(6) * t723 + t963) - g(2) * (-pkin(5) * t778 - qJ(6) * t721 + t964) - g(3) * (pkin(5) * t815 + qJ(6) * t745 + t930) + t1074 * t598 + t1076 * t597 + t1075 * t594 + t913) * MDP(29) + (-g(1) * t1055 - g(2) * t1056 - g(3) * t976 + t1068 * t643 + t1069 * t614 + t1070 * t613 + t587 * t679 + t588 * t680 + t596 * t733 + t913) * MDP(21) + (t1065 * t613 + t1066 * t614 - t1069 * t694 - t1070 * t695 - t587 * t809 - t588 * t808 - t645 * t680 - t646 * t679 + t940) * MDP(20) + (-t1065 * t603 - t1066 * t605 + t1071 * t695 + t1072 * t694 + t584 * t808 + t586 * t809 + t645 * t668 + t646 * t669 + t940) * MDP(22) + (-g(1) * t963 - g(2) * t964 - g(3) * t930 + t1071 * t603 + t1072 * t605 + t1073 * t602 + t584 * t668 + t585 * t663 + t586 * t669 + t913) * MDP(25) + (-t1065 * t594 + t1066 * t598 - t1074 * t694 + t1075 * t695 + t581 * t809 - t583 * t808 - t645 * t659 + t646 * t654 + t940) * MDP(26) + (-t978 + t905 * t1031 + (t908 * t1000 + (-t839 + t1049) * t906) * qJD(1)) * MDP(13) + MDP(7) * t892 + MDP(6) * t1032 + (-MDP(4) * t906 * t909 + MDP(5) * t1051) * t912; t839 * t837 * MDP(11) + (-t837 ^ 2 + t839 ^ 2) * MDP(12) + (t725 - t1156) * MDP(13) + (-t726 - t1155) * MDP(14) + t952 * MDP(15) + (-t864 * t1043 + t738 - t741 * t1143 - t863 * t839 - g(1) * t818 + g(2) * t816 + (-qJD(3) * t824 + t1119 - t806) * t905) * MDP(16) + (-t1143 * t740 + t863 * t837 + t1029 - t948 - t985) * MDP(17) + (t587 * t904 + t628 * t759 - t643 * t727 - t653 * t694 + t1001 * t810 + (-pkin(3) * t645 + t1042 * t901 - t596 * t903 - t613 * t839) * t902 + t943) * MDP(18) + (-t588 * t904 - t629 * t759 - t643 * t728 - t653 * t695 - t1001 * t811 + (-pkin(3) * t646 + t1040 * t759 + t596 * t901 + t614 * t839) * t902 + t944) * MDP(19) + (t613 * t728 + t614 * t727 + t628 * t695 + t629 * t694 - t645 * t811 - t646 * t810 + (-t1029 - t587 * t901 + t588 * t903 + (-t694 * t903 + t695 * t901) * qJD(4)) * t902 + t1064) * MDP(20) + (t588 * t811 + t587 * t810 - t614 * t629 - t613 * t628 - t643 * t653 - g(1) * t804 + g(2) * t802 - g(3) * t990 + (-t596 * pkin(3) + (-t613 * t901 + t614 * t903) * qJD(4) + t985 * qJ(4)) * t902) * MDP(21) + (-t603 * t728 - t605 * t727 - t619 * t695 + t645 * t780 + t646 * t781 + t1058 * t694 + (-t1029 - t584 * t903 + (qJD(4) * t695 + t586) * t901) * t902 + t1064) * MDP(22) + (t586 * t904 + t602 * t727 + t617 * t694 + t619 * t759 - t645 * t782 + t1001 * t781 + (t585 * t903 - t603 * t839 + (qJD(5) * t694 - t1042) * t901) * t902 - t943) * MDP(23) + (-t584 * t904 + t602 * t728 + t617 * t695 - t646 * t782 - t1001 * t780 + t1058 * t759 + (t605 * t839 + (-t585 + t1037) * t901) * t902 - t944) * MDP(24) + (t585 * t782 + t584 * t780 + t586 * t781 - g(1) * (qJ(4) * t1105 + t980) - g(2) * (qJ(4) * t1107 + t981) - g(3) * t934 + t1058 * t605 + (-t619 + t1012) * t603 + (-t1036 * t902 - t617) * t602) * MDP(25) + (-t594 * t728 + t598 * t727 - t645 * t752 + t646 * t734 + t1059 * t695 - t1057 * t694 + (t581 * t901 + t583 * t903 - t1029) * t902 + t1064) * MDP(26) + (t583 * t904 + t597 * t728 - t646 * t753 + t1001 * t752 + (-t582 * t901 - t598 * t839) * t902 - t1057 * t759 - t1063 * t695 - t944) * MDP(27) + (-t581 * t904 - t597 * t727 + t645 * t753 - t1001 * t734 + (-t582 * t903 + t594 * t839) * t902 + t1059 * t759 + t1063 * t694 + t943) * MDP(28) + (t582 * t753 + t581 * t734 + t583 * t752 - g(1) * (qJ(6) * t714 + t980) - g(2) * (qJ(6) * t712 + t981) - g(3) * (-qJ(6) * t777 + t934) + (-pkin(5) * t1029 + t985 * (pkin(5) + qJ(4))) * t902 + t1057 * t598 + t1063 * t597 + t1059 * t594) * MDP(29); (t613 * t661 - t614 * t662 + t1137 + t596) * MDP(21) + (-t603 * t661 + t605 * t662 + t914) * MDP(25) + (-t594 * t661 - t598 * t662 + t1148 + t914) * MDP(29) + (MDP(20) + t1141) * (-t661 * t695 + t662 * t694) + (-MDP(18) - t1140) * (t661 * t759 - t645) + (MDP(19) - t1154) * (-t662 * t759 + t646); (t602 * t695 - t605 * t759 - t1131 + t917) * MDP(25) + (t597 * t695 + (qJD(6) + t598) * t759 + t917 + t1139) * MDP(29) + t1140 * (-t1001 + t1112) + t1141 * (-t759 * t694 + t646) + t1154 * (-t695 ^ 2 - t758); (-t695 * t759 - t645) * MDP(26) + (t1001 + t1112) * MDP(27) + (-t694 ^ 2 - t758) * MDP(28) + (-g(1) * t689 + g(2) * t687 - g(3) * t743 - t594 * t759 - t597 * t694 + t583) * MDP(29);];
tau  = t1;
