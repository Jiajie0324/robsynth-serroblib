% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPPP1_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:15
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPPP1_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPPP1_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_jacobiaD_rot_sym_varpar: pkin has to be [10x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:12
	% EndTime: 2019-10-10 11:15:12
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:12
	% EndTime: 2019-10-10 11:15:12
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:12
	% EndTime: 2019-10-10 11:15:12
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:12
	% EndTime: 2019-10-10 11:15:13
	% DurationCPUTime: 1.02s
	% Computational Cost: add. (1002->94), mult. (2519->211), div. (480->12), fcn. (2968->9), ass. (0->92)
	t126 = sin(qJ(1));
	t119 = t126 ^ 2;
	t125 = sin(qJ(2));
	t118 = t125 ^ 2;
	t128 = cos(qJ(2));
	t121 = 0.1e1 / t128 ^ 2;
	t173 = t118 * t121;
	t113 = t119 * t173 + 0.1e1;
	t117 = t125 * t118;
	t120 = 0.1e1 / t128;
	t172 = t120 * t125;
	t137 = qJD(2) * (t117 * t120 * t121 + t172);
	t129 = cos(qJ(1));
	t163 = qJD(1) * t129;
	t151 = t126 * t163;
	t181 = 0.1e1 / t113 ^ 2 * (t119 * t137 + t151 * t173);
	t193 = -0.2e1 * t181;
	t111 = 0.1e1 / t113;
	t146 = 0.1e1 + t173;
	t190 = t126 * t146;
	t98 = t111 * t190;
	t192 = t126 * t98 - 0.1e1;
	t124 = sin(qJ(3));
	t127 = cos(qJ(3));
	t165 = t129 * t127;
	t107 = t126 * t124 + t128 * t165;
	t102 = 0.1e1 / t107 ^ 2;
	t166 = t129 * t124;
	t168 = t126 * t127;
	t106 = t128 * t166 - t168;
	t175 = t106 * t127;
	t101 = 0.1e1 / t107;
	t177 = t101 * t124;
	t139 = t102 * t175 - t177;
	t100 = t106 ^ 2;
	t99 = t100 * t102 + 0.1e1;
	t96 = 0.1e1 / t99;
	t191 = t139 * t96;
	t169 = t126 * t125;
	t110 = atan2(-t169, -t128);
	t109 = cos(t110);
	t108 = sin(t110);
	t154 = t108 * t169;
	t94 = -t109 * t128 - t154;
	t91 = 0.1e1 / t94;
	t92 = 0.1e1 / t94 ^ 2;
	t189 = t111 - 0.1e1;
	t123 = t129 ^ 2;
	t161 = qJD(2) * t128;
	t155 = t92 * t161;
	t150 = t125 * t163;
	t162 = qJD(2) * t126;
	t174 = t109 * t125;
	t149 = t121 * t162;
	t85 = (-(-t126 * t161 - t150) * t120 + t118 * t149) * t111;
	t80 = (-t126 * t85 + qJD(2)) * t174 + (-t150 + (t85 - t162) * t128) * t108;
	t187 = t80 * t91 * t92;
	t90 = t123 * t118 * t92 + 0.1e1;
	t188 = (t123 * t125 * t155 + (-t123 * t187 - t92 * t151) * t118) / t90 ^ 2;
	t176 = t102 * t106;
	t143 = -qJD(1) * t128 + qJD(3);
	t144 = qJD(3) * t128 - qJD(1);
	t160 = qJD(2) * t129;
	t148 = t125 * t160;
	t87 = -t144 * t166 + (t143 * t126 - t148) * t127;
	t183 = t101 * t102 * t87;
	t167 = t126 * t128;
	t138 = t124 * t167 + t165;
	t86 = t138 * qJD(1) - t107 * qJD(3) + t124 * t148;
	t186 = (-t100 * t183 - t86 * t176) / t99 ^ 2;
	t88 = 0.1e1 / t90;
	t185 = t88 * t91;
	t184 = t88 * t92;
	t179 = t129 * t92;
	t178 = qJD(2) * t98;
	t171 = t125 * t129;
	t164 = qJD(1) * t126;
	t159 = 0.2e1 * t187;
	t158 = -0.2e1 * t186;
	t157 = t91 * t188;
	t156 = t106 * t183;
	t153 = t111 * t118 * t120;
	t147 = 0.2e1 * t92 * t188;
	t145 = t120 * t193;
	t142 = t126 * t153;
	t141 = t146 * t129;
	t140 = t143 * t129;
	t105 = -t127 * t167 + t166;
	t84 = (t189 * t125 * t108 - t109 * t142) * t129;
	t83 = -t192 * t174 + (-t126 + t98) * t128 * t108;
	t81 = t190 * t193 + (qJD(1) * t141 + 0.2e1 * t126 * t137) * t111;
	t1 = [t145 * t171 + (qJD(2) * t141 - t164 * t172) * t111, t81, 0, 0, 0, 0; (-t161 * t185 + (0.2e1 * t157 + (qJD(1) * t84 + t80) * t184) * t125) * t126 + (t84 * t147 * t125 + (-t84 * t155 + (t84 * t159 + ((0.2e1 * t125 * t181 - t85 * t142 - t189 * t161) * t108 + (t118 * t126 * t145 + t125 * t85 + (t117 * t149 - (t85 - 0.2e1 * t162) * t125) * t111) * t109) * t179) * t125 + (-t91 + (-(t119 - t123) * t109 * t153 + t189 * t154) * t92) * t125 * qJD(1)) * t88) * t129, (-t164 * t185 + (-0.2e1 * t157 + (-qJD(2) * t83 - t80) * t184) * t129) * t128 + (t83 * t129 * t147 + (-t91 * t160 - ((-t126 * t81 - t163 * t98) * t109 + (t192 * t85 + t162 - t178) * t108) * t92 * t171 + (t129 * t159 + t92 * t164) * t83 - ((t81 - t163) * t108 + (t85 * t98 + qJD(2) + (-t85 - t178) * t126) * t109) * t128 * t179) * t88) * t125, 0, 0, 0, 0; 0.2e1 * (t101 * t138 + t105 * t176) * t186 + (0.2e1 * t105 * t156 - t144 * t101 * t168 + (t125 * t162 + t140) * t177 + (t138 * t87 + t105 * t86 - t140 * t175 - (qJD(2) * t125 * t127 + t144 * t124) * t106 * t126) * t102) * t96, t128 * t160 * t191 + (-t164 * t191 + (t139 * t158 + ((-qJD(3) * t101 - 0.2e1 * t156) * t127 + (-t127 * t86 + (-qJD(3) * t106 + t87) * t124) * t102) * t96) * t129) * t125, t158 + 0.2e1 * (-t86 * t102 * t96 + (-t102 * t186 - t96 * t183) * t106) * t106, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:13
	% EndTime: 2019-10-10 11:15:15
	% DurationCPUTime: 2.22s
	% Computational Cost: add. (3960->153), mult. (12250->321), div. (690->12), fcn. (15383->13), ass. (0->139)
	t218 = sin(qJ(2));
	t219 = sin(qJ(1));
	t221 = cos(qJ(2));
	t272 = qJD(2) * t221;
	t222 = cos(qJ(1));
	t275 = qJD(1) * t222;
	t232 = t218 * t275 + t219 * t272;
	t216 = cos(pkin(6));
	t217 = sin(qJ(3));
	t214 = sin(pkin(6));
	t288 = t214 * t221;
	t200 = t216 * t218 + t217 * t288;
	t220 = cos(qJ(3));
	t269 = qJD(3) * t220;
	t250 = t218 * t269;
	t189 = t200 * qJD(2) + t214 * t250;
	t285 = t217 * t218;
	t199 = t214 * t285 - t216 * t221;
	t197 = 0.1e1 / t199 ^ 2;
	t309 = t189 * t197;
	t271 = qJD(2) * t222;
	t277 = qJD(1) * t219;
	t286 = t216 * t217;
	t308 = -t214 * t277 + t271 * t286;
	t307 = -qJD(2) * t214 + t216 * t269;
	t231 = t218 * t277 - t221 * t271;
	t276 = qJD(1) * t221;
	t242 = -qJD(3) + t276;
	t268 = qJD(3) * t221;
	t243 = -qJD(1) + t268;
	t255 = t218 * t271;
	t279 = t220 * t222;
	t178 = -t243 * t279 + (t242 * t219 + t255) * t217;
	t306 = -t178 * t216 + t231 * t214;
	t273 = qJD(2) * t218;
	t256 = t219 * t273;
	t281 = t219 * t220;
	t180 = t243 * t281 + (t242 * t222 - t256) * t217;
	t305 = -t180 * t216 + t232 * t214;
	t280 = t219 * t221;
	t201 = t217 * t280 + t279;
	t284 = t218 * t219;
	t244 = -t201 * t214 - t216 * t284;
	t177 = atan2(t244, t199);
	t172 = sin(t177);
	t173 = cos(t177);
	t155 = t172 * t244 + t173 * t199;
	t152 = 0.1e1 / t155;
	t278 = t221 * t222;
	t204 = t219 * t217 + t220 * t278;
	t213 = sin(pkin(10));
	t215 = cos(pkin(10));
	t260 = t217 * t278;
	t203 = -t260 + t281;
	t282 = t218 * t222;
	t236 = t203 * t216 + t214 * t282;
	t171 = t204 * t215 + t236 * t213;
	t165 = 0.1e1 / t171;
	t196 = 0.1e1 / t199;
	t153 = 0.1e1 / t155 ^ 2;
	t166 = 0.1e1 / t171 ^ 2;
	t192 = t203 * t214 - t216 * t282;
	t187 = t192 ^ 2;
	t151 = t153 * t187 + 0.1e1;
	t161 = t178 * t214 + t231 * t216;
	t299 = t153 * t192;
	t186 = t244 ^ 2;
	t176 = t186 * t197 + 0.1e1;
	t174 = 0.1e1 / t176;
	t162 = -t180 * t214 - t232 * t216;
	t290 = t244 * t197;
	t239 = t162 * t196 - t189 * t290;
	t145 = t239 * t174;
	t240 = -t172 * t199 + t173 * t244;
	t140 = t240 * t145 + t172 * t162 + t173 * t189;
	t303 = t140 * t152 * t153;
	t304 = (t161 * t299 - t187 * t303) / t151 ^ 2;
	t292 = t196 * t309;
	t302 = (t162 * t290 - t186 * t292) / t176 ^ 2;
	t301 = t152 * t214;
	t300 = t153 * t161;
	t170 = t204 * t213 - t236 * t215;
	t298 = t166 * t170;
	t235 = t216 * t285 + t288;
	t283 = t218 * t220;
	t185 = (t235 * t213 - t215 * t283) * t222;
	t297 = t166 * t185;
	t296 = t172 * t192;
	t295 = t173 * t192;
	t291 = t244 * t196;
	t289 = t213 * t216;
	t287 = t215 * t216;
	t270 = qJD(3) * t217;
	t267 = -0.2e1 * t304;
	t266 = 0.2e1 * t304;
	t265 = -0.2e1 * t303;
	t233 = t219 * t276 + t255;
	t249 = t219 * t269;
	t179 = qJD(3) * t260 - t217 * t275 + t233 * t220 - t249;
	t156 = -t179 * t213 + t306 * t215;
	t157 = -t179 * t215 - t306 * t213;
	t164 = t170 ^ 2;
	t160 = t164 * t166 + 0.1e1;
	t167 = t165 * t166;
	t264 = 0.2e1 * (-t157 * t164 * t167 + t156 * t298) / t160 ^ 2;
	t263 = 0.2e1 * t302;
	t262 = 0.2e1 * t167 * t170;
	t261 = t214 * t284;
	t253 = t220 * t271;
	t248 = t192 * t265;
	t247 = -0.2e1 * t196 * t302;
	t246 = t157 * t262;
	t245 = 0.2e1 * t244 * t292;
	t194 = -t216 * t280 + t217 * t261;
	t238 = -t194 * t196 + t200 * t290;
	t237 = -t201 * t216 + t261;
	t202 = t217 * t222 - t220 * t280;
	t234 = -t196 * t202 + t283 * t290;
	t230 = t218 * t270 - t220 * t272;
	t229 = t172 + (t173 * t291 - t172) * t174;
	t195 = t199 * t222;
	t188 = t220 * t214 * t268 - t199 * qJD(2);
	t184 = (-t213 * t283 - t235 * t215) * t222;
	t183 = t203 * t215 - t204 * t289;
	t182 = t203 * t213 + t204 * t287;
	t181 = -t242 * t279 + (t243 * t217 + t220 * t273) * t219;
	t169 = t202 * t215 - t237 * t213;
	t168 = t202 * t213 + t237 * t215;
	t163 = (-t221 * t275 + t256) * t216 + (t232 * t217 + t218 * t249) * t214;
	t158 = 0.1e1 / t160;
	t149 = 0.1e1 / t151;
	t148 = t234 * t214 * t174;
	t146 = t238 * t174;
	t144 = t229 * t192;
	t142 = (t172 * t202 + t173 * t283) * t214 - t240 * t148;
	t141 = -t240 * t146 + t172 * t194 + t173 * t200;
	t139 = t238 * t263 + (t200 * t245 + t163 * t196 + (-t162 * t200 - t188 * t244 - t189 * t194) * t197) * t174;
	t137 = (t234 * t263 + (t245 * t283 + t181 * t196 + (-t162 * t283 - t189 * t202 + t230 * t244) * t197) * t174) * t214;
	t1 = [t192 * t247 + (t161 * t196 - t192 * t309) * t174, t139, t137, 0, 0, 0; t244 * t152 * t267 + (t162 * t152 + (-t140 * t244 + t144 * t161) * t153) * t149 + ((t144 * t265 + t229 * t300) * t149 + (t144 * t267 + ((-t145 * t174 * t291 + t263) * t296 + (t244 * t247 + t145 + (-t145 + t239) * t174) * t295) * t149) * t153) * t192, (-t141 * t299 + t152 * t195) * t266 + (t141 * t248 - t233 * t152 * t216 + (t231 * t217 - t222 * t250) * t301 + (t195 * t140 + t141 * t161 + (t139 * t244 - t146 * t162 + t188 + (t146 * t199 + t194) * t145) * t295 + (-t139 * t199 + t146 * t189 + t163 + (t146 * t244 - t200) * t145) * t296) * t153) * t149, (-t142 * t299 - t204 * t301) * t266 + ((t240 * t137 - (-t155 * t145 + t162 * t173 - t172 * t189) * t148) * t299 + (t248 + t300) * t142 + (-t179 * t152 + (-t204 * t140 + (-t145 * t283 + t181) * t296 + (t145 * t202 - t230) * t295) * t153) * t214) * t149, 0, 0, 0; (-t165 * t168 + t169 * t298) * t264 + (t169 * t246 + (-t169 * t156 - t168 * t157 + (-t181 * t215 + t305 * t213) * t170) * t166 + (t181 * t213 + t305 * t215) * t165) * t158, (-t165 * t184 + t170 * t297) * t264 + (-t156 * t297 + (-t166 * t184 + t185 * t262) * t157 + ((-t213 * t253 - t308 * t215) * t165 - (t308 * t213 - t215 * t253) * t298) * t221 + (((t213 * t220 + t215 * t286) * t165 - (-t213 * t286 + t215 * t220) * t298) * t277 + ((t213 * t270 - t307 * t215) * t165 - (t307 * t213 + t215 * t270) * t298) * t222) * t218) * t158, (-t165 * t182 + t183 * t298) * t264 + ((t178 * t213 - t179 * t287) * t165 + t183 * t246 + (-t182 * t157 - (t178 * t215 + t179 * t289) * t170 - t183 * t156) * t166) * t158, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:13
	% EndTime: 2019-10-10 11:15:16
	% DurationCPUTime: 3.01s
	% Computational Cost: add. (6418->168), mult. (20749->342), div. (681->12), fcn. (25776->13), ass. (0->151)
	t278 = cos(qJ(2));
	t275 = sin(qJ(2));
	t271 = sin(pkin(10));
	t273 = cos(pkin(6));
	t277 = cos(qJ(3));
	t274 = sin(qJ(3));
	t363 = cos(pkin(10));
	t316 = t274 * t363;
	t293 = t271 * t277 + t273 * t316;
	t290 = t293 * t275;
	t272 = sin(pkin(6));
	t318 = t272 * t363;
	t243 = t278 * t318 + t290;
	t307 = t275 * t318;
	t244 = t293 * t278 - t307;
	t315 = t277 * t363;
	t292 = -t271 * t274 + t273 * t315;
	t287 = t292 * qJD(3);
	t217 = t244 * qJD(2) + t275 * t287;
	t241 = 0.1e1 / t243 ^ 2;
	t369 = t217 * t241;
	t279 = cos(qJ(1));
	t270 = t279 * t277;
	t276 = sin(qJ(1));
	t256 = t278 * t270 + t276 * t274;
	t368 = t256 * t272;
	t313 = qJD(2) * t363;
	t304 = t272 * t313;
	t367 = -t304 + t287;
	t333 = qJD(3) * t279;
	t319 = t277 * t333;
	t340 = qJD(1) * t276;
	t366 = -t274 * t340 + t319;
	t338 = qJD(1) * t279;
	t343 = t276 * t277;
	t365 = qJD(3) * t343 + t274 * t338;
	t342 = t276 * t278;
	t346 = t274 * t279;
	t255 = t277 * t342 - t346;
	t308 = -t255 * t271 + t276 * t307;
	t317 = t273 * t363;
	t341 = t274 * t342 + t270;
	t221 = t341 * t317 - t308;
	t211 = atan2(-t221, t243);
	t206 = sin(t211);
	t207 = cos(t211);
	t200 = -t206 * t221 + t207 * t243;
	t197 = 0.1e1 / t200;
	t240 = 0.1e1 / t243;
	t296 = t278 * t346 - t343;
	t344 = t275 * t279;
	t249 = t296 * t272 + t273 * t344;
	t245 = 0.1e1 / t249;
	t198 = 0.1e1 / t200 ^ 2;
	t246 = 0.1e1 / t249 ^ 2;
	t364 = -0.2e1 * t221;
	t289 = t296 * t363;
	t225 = t256 * t271 + t273 * t289 - t279 * t307;
	t219 = t225 ^ 2;
	t196 = t198 * t219 + 0.1e1;
	t335 = qJD(2) * t279;
	t322 = t275 * t335;
	t334 = qJD(3) * t278;
	t339 = qJD(1) * t278;
	t230 = (qJD(1) - t334) * t270 + (t322 + (-qJD(3) + t339) * t276) * t274;
	t321 = t274 * t334;
	t231 = t279 * t321 + (t276 * t339 + t322) * t277 - t365;
	t314 = qJD(1) * t363;
	t305 = t276 * t314;
	t301 = t272 * t305;
	t302 = t278 * t304;
	t201 = -t230 * t317 - t231 * t271 + t275 * t301 - t279 * t302;
	t357 = t201 * t198;
	t218 = t221 ^ 2;
	t210 = t218 * t241 + 0.1e1;
	t208 = 0.1e1 / t210;
	t337 = qJD(2) * t276;
	t323 = t275 * t337;
	t232 = -t277 * t340 + (-t323 - t333) * t274 + t365 * t278;
	t233 = t256 * qJD(1) - t276 * t321 - t277 * t323 - t319;
	t300 = t272 * t279 * t314;
	t203 = t232 * t317 + t233 * t271 - t275 * t300 - t276 * t302;
	t352 = t221 * t241;
	t299 = -t203 * t240 + t217 * t352;
	t189 = t299 * t208;
	t303 = -t206 * t243 - t207 * t221;
	t185 = t303 * t189 - t203 * t206 + t207 * t217;
	t361 = t185 * t197 * t198;
	t362 = (-t219 * t361 + t225 * t357) / t196 ^ 2;
	t294 = -t275 * t340 + t278 * t335;
	t202 = -t231 * t363 + (t230 * t273 + t294 * t272) * t271;
	t226 = t256 * t363 + (t272 * t344 - t296 * t273) * t271;
	t220 = t226 ^ 2;
	t214 = t220 * t246 + 0.1e1;
	t215 = -t230 * t272 + t294 * t273;
	t247 = t245 * t246;
	t351 = t226 * t246;
	t360 = (-t215 * t220 * t247 + t202 * t351) / t214 ^ 2;
	t354 = t240 * t369;
	t359 = (t203 * t352 - t218 * t354) / t210 ^ 2;
	t358 = t198 * t225;
	t356 = t206 * t225;
	t355 = t207 * t225;
	t353 = t221 * t240;
	t345 = t275 * t276;
	t248 = -t341 * t272 - t273 * t345;
	t350 = t246 * t248;
	t347 = t274 * t275;
	t254 = (-t272 * t347 + t273 * t278) * t279;
	t349 = t246 * t254;
	t348 = t271 * t273;
	t336 = qJD(2) * t278;
	t332 = 0.2e1 * t362;
	t331 = 0.2e1 * t361;
	t330 = 0.2e1 * t360;
	t329 = -0.2e1 * t359;
	t328 = 0.2e1 * t226 * t247;
	t327 = t240 * t359;
	t324 = t274 * t335;
	t312 = t341 * t273;
	t311 = t225 * t331;
	t310 = t215 * t328;
	t309 = t354 * t364;
	t234 = t255 * t317 - t341 * t271;
	t253 = t292 * t275;
	t298 = -t234 * t240 + t253 * t352;
	t237 = t243 * t276;
	t297 = t237 * t240 + t244 * t352;
	t295 = -t275 * t338 - t276 * t336;
	t291 = -t206 + (t207 * t353 + t206) * t208;
	t288 = qJD(1) * t293;
	t239 = (-t275 * t315 + (t272 * t278 + t273 * t347) * t271) * t279;
	t238 = t243 * t279;
	t236 = -t256 * t348 - t289;
	t235 = t256 * t317 - t296 * t271;
	t229 = -qJD(3) * t290 + t292 * t336;
	t224 = -t255 * t363 + (-t272 * t345 + t312) * t271;
	t223 = -t363 * t312 + t308;
	t216 = -qJD(2) * t243 + t278 * t287;
	t212 = 0.1e1 / t214;
	t205 = -t232 * t271 + t233 * t317;
	t204 = (t293 * t337 + t300) * t278 + (t367 * t276 + t279 * t288) * t275;
	t194 = 0.1e1 / t196;
	t193 = t298 * t208;
	t191 = t297 * t208;
	t188 = t291 * t225;
	t187 = t303 * t193 - t206 * t234 + t207 * t253;
	t186 = t303 * t191 + t206 * t237 + t207 * t244;
	t184 = t298 * t329 + (t253 * t309 - t205 * t240 + (t203 * t253 + t217 * t234 + t221 * t229) * t241) * t208;
	t183 = t297 * t329 + (t244 * t309 + t204 * t240 + (t203 * t244 + t216 * t221 - t217 * t237) * t241) * t208;
	t1 = [0.2e1 * t225 * t327 + (-t201 * t240 + t225 * t369) * t208, t183, t184, 0, 0, 0; -0.2e1 * t223 * t197 * t362 + (-t203 * t197 + (-t185 * t223 - t188 * t201) * t198) * t194 + ((t188 * t331 - t291 * t357) * t194 + (t188 * t332 + (-(-t189 * t208 * t353 + t329) * t356 - (t327 * t364 - t189 + (t189 - t299) * t208) * t355) * t194) * t198) * t225, (t186 * t358 + t197 * t238) * t332 + (t186 * t311 + (t238 * t185 - t186 * t201 - (-t183 * t221 - t191 * t203 + t216 + (-t191 * t243 + t237) * t189) * t355 - (-t183 * t243 - t191 * t217 + t204 + (t191 * t221 - t244) * t189) * t356) * t198 + ((-t293 * t335 + t301) * t278 + (t276 * t288 - t367 * t279) * t275) * t197) * t194, (t187 * t358 - t197 * t235) * t332 + ((t230 * t271 - t231 * t317) * t197 + t187 * t311 + (-t235 * t185 - t187 * t201 - (-t184 * t221 - t193 * t203 + t229 + (-t193 * t243 - t234) * t189) * t355 - (-t184 * t243 - t193 * t217 - t205 + (t193 * t221 - t253) * t189) * t356) * t198) * t194, 0, 0, 0; -0.2e1 * t224 * t245 * t360 + t226 * t330 * t350 + ((-t233 * t363 + (t232 * t273 + t295 * t272) * t271) * t245 - t224 * t246 * t215 - (-t232 * t272 + t295 * t273) * t351 - t202 * t350 + t248 * t310) * t212, (t226 * t349 - t239 * t245) * t330 + (-t202 * t349 + (-t239 * t246 + t254 * t328) * t215 + ((-t271 * t272 * t340 - t313 * t270 + t324 * t348) * t245 - (-t272 * t324 - t273 * t340) * t351) * t278 + (-(-t366 * t272 - t273 * t335) * t351 + (t277 * t305 + t316 * t333 + (-t272 * t335 + t366 * t273) * t271) * t245) * t275) * t212, (-t236 * t245 + t351 * t368) * t330 + ((t230 * t363 + t231 * t348) * t245 + t310 * t368 + (-t236 * t215 + (-t202 * t256 + t226 * t231) * t272) * t246) * t212, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:15:13
	% EndTime: 2019-10-10 11:15:16
	% DurationCPUTime: 2.97s
	% Computational Cost: add. (6418->167), mult. (20749->336), div. (681->12), fcn. (25776->13), ass. (0->145)
	t284 = sin(qJ(3));
	t286 = sin(qJ(1));
	t288 = cos(qJ(2));
	t287 = cos(qJ(3));
	t289 = cos(qJ(1));
	t343 = t287 * t289;
	t267 = t286 * t284 + t288 * t343;
	t335 = qJD(3) * t289;
	t317 = t287 * t335;
	t336 = qJD(3) * t286;
	t320 = t284 * t336;
	t285 = sin(qJ(2));
	t348 = t285 * t286;
	t324 = qJD(2) * t348;
	t245 = t267 * qJD(1) - t287 * t324 - t288 * t320 - t317;
	t280 = sin(pkin(10));
	t282 = cos(pkin(10));
	t319 = t287 * t336;
	t339 = qJD(1) * t289;
	t301 = t284 * t339 + t319;
	t318 = t284 * t335;
	t341 = qJD(1) * t286;
	t302 = t287 * t341 + t318;
	t244 = -t284 * t324 + t301 * t288 - t302;
	t281 = sin(pkin(6));
	t283 = cos(pkin(6));
	t338 = qJD(2) * t288;
	t322 = t286 * t338;
	t304 = t285 * t339 + t322;
	t371 = -t244 * t283 + t304 * t281;
	t217 = t245 * t282 + t371 * t280;
	t337 = qJD(2) * t289;
	t323 = t285 * t337;
	t340 = qJD(1) * t288;
	t242 = (-qJD(3) * t288 + qJD(1)) * t343 + (t323 + (-qJD(3) + t340) * t286) * t284;
	t321 = t288 * t337;
	t303 = -t285 * t341 + t321;
	t375 = t242 * t283 + t303 * t281;
	t342 = t289 * t284;
	t344 = t287 * t288;
	t265 = t286 * t344 - t342;
	t345 = t286 * t288;
	t264 = t284 * t345 + t343;
	t309 = t264 * t283 - t281 * t348;
	t235 = t265 * t282 - t309 * t280;
	t349 = t284 * t285;
	t306 = t281 * t288 + t283 * t349;
	t347 = t285 * t287;
	t327 = t282 * t347;
	t297 = t306 * t280 - t327;
	t225 = atan2(-t235, -t297);
	t220 = sin(t225);
	t221 = cos(t225);
	t214 = -t220 * t235 - t221 * t297;
	t212 = 0.1e1 / t214 ^ 2;
	t266 = t286 * t287 - t288 * t342;
	t346 = t285 * t289;
	t308 = t266 * t283 + t281 * t346;
	t240 = t267 * t282 + t308 * t280;
	t234 = t240 ^ 2;
	t210 = t212 * t234 + 0.1e1;
	t305 = t286 * t340 + t323;
	t243 = t305 * t287 + t288 * t318 - t301;
	t216 = -t243 * t282 + t280 * t375;
	t366 = t212 * t240;
	t232 = t235 ^ 2;
	t253 = 0.1e1 / t297 ^ 2;
	t224 = t232 * t253 + 0.1e1;
	t222 = 0.1e1 / t224;
	t350 = t283 * t288;
	t256 = t282 * t344 + (t281 * t285 - t284 * t350) * t280;
	t352 = t280 * t287;
	t307 = -t282 * t284 - t283 * t352;
	t298 = qJD(3) * t307;
	t231 = t256 * qJD(2) + t285 * t298;
	t252 = 0.1e1 / t297;
	t361 = t235 * t253;
	t312 = t217 * t252 + t231 * t361;
	t203 = t312 * t222;
	t313 = t220 * t297 - t221 * t235;
	t199 = t313 * t203 - t220 * t217 + t221 * t231;
	t211 = 0.1e1 / t214;
	t368 = t199 * t211 * t212;
	t334 = 0.2e1 * (t216 * t366 - t234 * t368) / t210 ^ 2;
	t374 = t231 * t253;
	t373 = t267 * t281;
	t261 = -t266 * t281 + t283 * t346;
	t257 = 0.1e1 / t261;
	t258 = 0.1e1 / t261 ^ 2;
	t370 = -0.2e1 * t235;
	t363 = t252 * t374;
	t367 = (t217 * t361 + t232 * t363) / t224 ^ 2;
	t365 = t220 * t240;
	t364 = t221 * t240;
	t362 = t235 * t252;
	t239 = -t267 * t280 + t308 * t282;
	t360 = t239 * t258;
	t356 = t257 * t280;
	t355 = t257 * t282;
	t263 = (-t281 * t349 + t350) * t289;
	t354 = t258 * t263;
	t353 = t280 * t283;
	t351 = t282 * t283;
	t333 = 0.2e1 * t368;
	t215 = t243 * t280 + t282 * t375;
	t233 = t239 ^ 2;
	t228 = t233 * t258 + 0.1e1;
	t229 = -t242 * t281 + t303 * t283;
	t259 = t257 * t258;
	t332 = 0.2e1 * (-t229 * t233 * t259 + t215 * t360) / t228 ^ 2;
	t331 = -0.2e1 * t367;
	t330 = 0.2e1 * t239 * t259;
	t329 = t252 * t367;
	t328 = t283 * t348;
	t325 = t284 * t337;
	t316 = t240 * t333;
	t315 = t229 * t330;
	t314 = t363 * t370;
	t246 = -t264 * t282 - t265 * t353;
	t262 = t307 * t285;
	t311 = t246 * t252 + t262 * t361;
	t249 = t286 * t327 + (-t281 * t345 - t284 * t328) * t280;
	t310 = -t249 * t252 + t256 * t361;
	t300 = t284 * t341 - t317;
	t299 = -t220 + (-t221 * t362 + t220) * t222;
	t260 = -t264 * t281 - t328;
	t251 = t297 * t289;
	t250 = (t280 * t347 + t306 * t282) * t289;
	t248 = t266 * t282 - t267 * t353;
	t247 = -t266 * t280 - t267 * t351;
	t241 = (-t282 * t287 + t284 * t353) * t285 * qJD(3) + t307 * t338;
	t237 = t265 * t280 + t309 * t282;
	t230 = t297 * qJD(2) + t288 * t298;
	t226 = 0.1e1 / t228;
	t219 = -t244 * t282 - t245 * t353;
	t218 = (t287 * t322 + (t287 * t339 - t320) * t285) * t282 + ((-t288 * t339 + t324) * t281 + (-t304 * t284 - t285 * t319) * t283) * t280;
	t208 = 0.1e1 / t210;
	t207 = t311 * t222;
	t205 = t310 * t222;
	t202 = t299 * t240;
	t201 = t313 * t207 - t220 * t246 + t221 * t262;
	t200 = t313 * t205 + t220 * t249 + t221 * t256;
	t198 = t311 * t331 + (-t262 * t314 + t219 * t252 + (t217 * t262 + t231 * t246 + t235 * t241) * t253) * t222;
	t197 = t310 * t331 + (-t256 * t314 - t218 * t252 + (t217 * t256 + t230 * t235 - t231 * t249) * t253) * t222;
	t1 = [-0.2e1 * t240 * t329 + (t216 * t252 + t240 * t374) * t222, t197, t198, 0, 0, 0; t235 * t211 * t334 + (-t217 * t211 + (t199 * t235 - t202 * t216) * t212) * t208 + (t202 * t333 * t208 + (t202 * t334 + (-(t203 * t222 * t362 + t331) * t365 - (-t329 * t370 - t203 + (t203 - t312) * t222) * t364 - t299 * t216) * t208) * t212) * t240, (t200 * t366 - t211 * t251) * t334 + (t200 * t316 + (-t251 * t199 - t200 * t216 - (-t197 * t235 - t205 * t217 + t230 + (t205 * t297 + t249) * t203) * t364 - (t197 * t297 - t205 * t231 + t218 + (t205 * t235 - t256) * t203) * t365) * t212 + ((t302 * t285 - t287 * t321) * t282 + (-t305 * t281 + (t303 * t284 + t285 * t317) * t283) * t280) * t211) * t208, (t201 * t366 - t211 * t248) * t334 + ((t242 * t282 + t243 * t353) * t211 + t201 * t316 + (-t248 * t199 - t201 * t216 - (-t198 * t235 - t207 * t217 + t241 + (t207 * t297 - t246) * t203) * t364 - (t198 * t297 - t207 * t231 - t219 + (t207 * t235 - t262) * t203) * t365) * t212) * t208, 0, 0, 0; (-t237 * t257 + t260 * t360) * t332 + (t260 * t315 + t245 * t356 - t371 * t355 + (-t237 * t229 - (-t244 * t281 - t304 * t283) * t239 - t260 * t215) * t258) * t226, (t239 * t354 - t250 * t257) * t332 + (-t215 * t354 + (-t250 * t258 + t263 * t330) * t229 + ((-t281 * t282 * t341 + t325 * t351 + t337 * t352) * t257 - (-t281 * t325 - t283 * t341) * t360) * t288 + (-(t300 * t281 - t283 * t337) * t360 - t302 * t356 + (-t281 * t337 - t300 * t283) * t355) * t285) * t226, (-t247 * t257 + t360 * t373) * t332 + ((-t242 * t280 + t243 * t351) * t257 + t315 * t373 + (-t247 * t229 + (-t215 * t267 + t239 * t243) * t281) * t258) * t226, 0, 0, 0;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end