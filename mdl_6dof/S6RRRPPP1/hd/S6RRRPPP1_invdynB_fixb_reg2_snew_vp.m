% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:02:41
% EndTime: 2019-05-07 04:03:51
% DurationCPUTime: 61.01s
% Computational Cost: add. (194036->813), mult. (414012->1146), div. (0->0), fcn. (309810->10), ass. (0->610)
t1230 = sin(qJ(1));
t1233 = cos(qJ(1));
t1228 = sin(qJ(3));
t1231 = cos(qJ(3));
t1229 = sin(qJ(2));
t1352 = qJD(1) * t1229;
t1187 = qJD(2) * t1228 + t1231 * t1352;
t1223 = sin(pkin(10));
t1225 = cos(pkin(10));
t1185 = -t1231 * qJD(2) + t1228 * t1352;
t1232 = cos(qJ(2));
t1312 = t1232 * qJD(1);
t1210 = qJD(3) - t1312;
t1224 = sin(pkin(6));
t1226 = cos(pkin(6));
t1266 = t1185 * t1226 - t1210 * t1224;
t1118 = t1225 * t1187 - t1223 * t1266;
t1381 = t1118 ^ 2;
t1314 = t1225 * t1226;
t1316 = t1224 * t1225;
t1116 = t1185 * t1314 + t1187 * t1223 - t1210 * t1316;
t1382 = t1116 ^ 2;
t1047 = t1382 - t1381;
t1293 = qJD(2) * t1312;
t1308 = qJDD(1) * t1229;
t1191 = t1293 + t1308;
t1288 = -t1231 * qJDD(2) + t1228 * t1191;
t1138 = -qJD(3) * t1187 - t1288;
t1214 = t1232 * qJDD(1);
t1305 = qJD(2) * t1352;
t1192 = t1214 - t1305;
t1263 = qJDD(3) - t1192;
t1243 = t1226 * t1138 + t1224 * t1263;
t1292 = t1185 * qJD(3) - t1228 * qJDD(2) - t1231 * t1191;
t1051 = t1223 * t1243 - t1225 * t1292;
t1151 = -t1185 * t1224 - t1226 * t1210;
t1336 = t1116 * t1151;
t1396 = t1051 + t1336;
t1050 = -t1292 * t1223 - t1225 * t1243;
t1075 = t1118 * t1151;
t989 = t1050 - t1075;
t1471 = t1223 * t989;
t1271 = t1225 * t1396 - t1471;
t889 = t1224 * t1047 + t1226 * t1271;
t1470 = t1225 * t989;
t917 = t1223 * t1396 + t1470;
t1592 = t1228 * t917 - t1231 * t889;
t1548 = t1226 * t1047 - t1224 * t1271;
t1594 = -t1228 * t889 - t1231 * t917;
t1601 = -t1229 * t1548 + t1232 * t1594;
t1603 = t1230 * t1601 + t1233 * t1592;
t1602 = -t1230 * t1592 + t1233 * t1601;
t1593 = t1229 * t1594 + t1232 * t1548;
t1289 = t1138 * t1224 - t1226 * t1263;
t1337 = t1116 * t1118;
t1260 = t1289 + t1337;
t1317 = t1223 * t1226;
t1148 = t1151 ^ 2;
t1392 = -t1148 - t1382;
t1435 = t1224 * t989;
t1485 = -t1260 * t1314 + t1317 * t1392 - t1435;
t1344 = t1260 * t1223;
t1457 = t1392 * t1225 + t1344;
t1494 = t1228 * t1457;
t1507 = t1231 * t1485 + t1494;
t1489 = t1231 * t1457;
t1512 = -t1228 * t1485 + t1489;
t1343 = t1260 * t1225;
t1419 = t1392 * t1223 - t1343;
t1482 = t1224 * t1419 + t1226 * t989;
t1578 = t1229 * t1482;
t1542 = t1232 * t1512 + t1578;
t1568 = t1230 * t1507 + t1233 * t1542;
t1600 = pkin(7) * t1568;
t1041 = -t1381 - t1148;
t1261 = t1289 - t1337;
t1431 = t1224 * t1396;
t1483 = -t1041 * t1314 - t1261 * t1317 + t1431;
t1407 = t1225 * t1261;
t1451 = t1041 * t1223 - t1407;
t1495 = t1228 * t1451;
t1508 = t1231 * t1483 + t1495;
t1490 = t1231 * t1451;
t1513 = -t1228 * t1483 + t1490;
t1398 = t1261 * t1223;
t1269 = t1041 * t1225 + t1398;
t892 = t1224 * t1269 + t1226 * t1396;
t1584 = t1229 * t892;
t1541 = t1232 * t1513 - t1584;
t1569 = t1230 * t1508 + t1233 * t1541;
t1599 = pkin(7) * t1569;
t1570 = t1230 * t1542 - t1233 * t1507;
t1598 = pkin(7) * t1570;
t1571 = t1230 * t1541 - t1233 * t1508;
t1597 = pkin(7) * t1571;
t1591 = pkin(2) * t892;
t1532 = pkin(3) * t892;
t1590 = pkin(2) * t1482;
t1534 = pkin(3) * t1482;
t1391 = -t1336 + t1051;
t1397 = t1050 + t1075;
t1433 = t1223 * t1391 - t1225 * t1397;
t1390 = -t1381 - t1382;
t1469 = -t1224 * t1390 - t1391 * t1314 - t1397 * t1317;
t1477 = t1228 * t1433 + t1231 * t1469;
t1440 = t1226 * t1390 + (-t1223 * t1397 - t1225 * t1391) * t1224;
t1480 = -t1228 * t1469 + t1231 * t1433;
t1505 = t1229 * t1440 + t1232 * t1480;
t1539 = t1230 * t1477 + t1233 * t1505;
t1589 = pkin(7) * t1539;
t1544 = t1230 * t1505 - t1233 * t1477;
t1588 = pkin(7) * t1544;
t1582 = t1232 * t892;
t1546 = t1229 * t1513 + t1582;
t1587 = pkin(8) * t1546;
t1576 = t1232 * t1482;
t1547 = t1229 * t1512 - t1576;
t1586 = pkin(8) * t1547;
t1585 = t1224 * t892;
t1068 = -t1381 + t1148;
t1270 = -t1068 * t1225 + t1344;
t899 = -t1224 * t1270 + t1226 * t1391;
t1583 = t1229 * t899;
t1581 = t1232 * t899;
t1580 = t1224 * t1482;
t1067 = t1382 - t1148;
t1450 = t1067 * t1223 - t1407;
t1456 = t1450 * t1224 - t1226 * t1397;
t1579 = t1229 * t1456;
t1577 = t1232 * t1456;
t1575 = -pkin(1) * t1546 - pkin(9) * t1513 - t1591;
t1574 = -pkin(1) * t1547 - pkin(9) * t1512 + t1590;
t1573 = -pkin(1) * t1508 + pkin(8) * t1541;
t1572 = -pkin(1) * t1507 + pkin(8) * t1542;
t1510 = t1229 * t1480 - t1232 * t1440;
t1565 = pkin(8) * t1510;
t1564 = pkin(9) * t1507;
t1563 = pkin(9) * t1508;
t955 = t1068 * t1223 + t1343;
t1562 = t1228 * t955;
t1560 = t1231 * t955;
t1554 = -pkin(1) * t1510 + pkin(2) * t1440 - pkin(9) * t1480;
t1553 = -pkin(2) * t1507 - pkin(3) * t1485;
t1552 = -pkin(2) * t1508 - pkin(3) * t1483;
t1551 = -pkin(1) * t1477 + pkin(8) * t1505;
t1364 = t1224 * t1397;
t1453 = -t1067 * t1317 + t1261 * t1314 - t1364;
t958 = t1067 * t1225 + t1398;
t1528 = t1228 * t958;
t1478 = -t1231 * t1453 + t1528;
t1526 = t1231 * t958;
t1481 = -t1228 * t1453 - t1526;
t1504 = t1232 * t1481 - t1579;
t1545 = t1230 * t1504 + t1233 * t1478;
t1363 = t1224 * t1391;
t1454 = t1068 * t1314 - t1260 * t1317 - t1363;
t1475 = -t1231 * t1454 + t1562;
t1474 = -t1228 * t1454 - t1560;
t1506 = t1232 * t1474 + t1583;
t1543 = t1230 * t1506 + t1233 * t1475;
t1540 = -t1230 * t1478 + t1233 * t1504;
t1538 = -t1230 * t1475 + t1233 * t1506;
t1530 = pkin(9) * t1477;
t1498 = qJ(4) * t1451;
t1515 = -pkin(2) * t1477 - pkin(3) * t1469;
t1511 = t1229 * t1474 - t1581;
t1509 = t1229 * t1481 + t1577;
t1503 = (-t1226 * t1485 - t1580) * qJ(4);
t1502 = (-t1226 * t1483 + t1585) * qJ(4);
t1500 = pkin(3) * t1440;
t1497 = qJ(4) * t1457;
t1334 = t1118 * t1223;
t1066 = t1151 * t1334;
t1335 = t1116 * t1225;
t1303 = t1151 * t1335;
t1279 = -t1066 + t1303;
t1301 = t1151 * t1317;
t1060 = t1116 * t1301;
t1299 = t1151 * t1314;
t1061 = t1118 * t1299;
t1394 = t1224 * t1289 + t1060 + t1061;
t1424 = t1231 * t1394;
t1410 = -t1228 * t1279 - t1424;
t1428 = t1228 * t1394;
t1413 = t1231 * t1279 - t1428;
t1318 = t1223 * t1224;
t1302 = t1151 * t1318;
t1058 = t1116 * t1302;
t1300 = t1151 * t1316;
t1059 = t1118 * t1300;
t1395 = t1226 * t1289 - t1058 - t1059;
t1427 = t1229 * t1395;
t1446 = t1232 * t1413 - t1427;
t1479 = t1230 * t1446 + t1233 * t1410;
t1476 = -t1230 * t1410 + t1233 * t1446;
t1473 = (-t1224 * t1440 - t1226 * t1469) * qJ(4);
t1439 = t989 * pkin(4);
t1472 = qJ(4) * t1433;
t1436 = qJ(5) * t1396;
t1423 = t1232 * t1395;
t1449 = t1229 * t1413 + t1423;
t1038 = t1050 * t1314;
t1333 = t1118 * t1224;
t1304 = t1116 * t1333;
t1264 = -t1038 - t1060 + t1304;
t1262 = t1050 * t1223 - t1303;
t1355 = t1228 * t1262;
t1384 = -t1231 * t1264 - t1355;
t1332 = t1118 * t1226;
t1294 = t1116 * t1332;
t1295 = t1050 * t1316;
t1248 = t1058 + t1294 + t1295;
t977 = t1231 * t1262;
t1388 = -t1228 * t1264 + t977;
t1408 = -t1229 * t1248 + t1232 * t1388;
t1448 = t1230 * t1408 + t1233 * t1384;
t1037 = t1051 * t1317;
t1265 = t1037 - t1061 - t1304;
t1310 = t1225 * t1051 + t1066;
t1354 = t1228 * t1310;
t1383 = -t1231 * t1265 - t1354;
t1296 = t1051 * t1318;
t1247 = t1059 - t1294 - t1296;
t978 = t1231 * t1310;
t1387 = -t1228 * t1265 + t978;
t1409 = -t1229 * t1247 + t1232 * t1387;
t1447 = t1230 * t1409 + t1233 * t1383;
t1445 = -t1230 * t1384 + t1233 * t1408;
t1444 = -t1230 * t1383 + t1233 * t1409;
t1443 = (-t1041 - t1148) * pkin(4) - qJ(5) * t1261;
t1438 = qJ(5) * t1390;
t1437 = qJ(5) * t1392;
t1418 = (-t1390 - t1148) * pkin(4);
t1412 = t1229 * t1387 + t1232 * t1247;
t1411 = t1229 * t1388 + t1232 * t1248;
t1325 = t1185 * t1187;
t1246 = t1263 - t1325;
t1406 = t1228 * t1246;
t1402 = t1231 * t1246;
t1350 = qJD(5) * t1118;
t1107 = 0.2e1 * t1350;
t1349 = qJD(6) * t1116;
t1393 = -0.2e1 * t1349 + t1107;
t1170 = t1210 * t1185;
t1100 = t1292 + t1170;
t1389 = t1051 * pkin(5) + qJ(6) * t1260;
t1376 = pkin(4) * t1225;
t1043 = pkin(4) * t1116 - qJ(5) * t1118;
t1203 = g(1) * t1233 + g(2) * t1230;
t1235 = qJD(1) ^ 2;
t1177 = -pkin(1) * t1235 + qJDD(1) * pkin(8) - t1203;
t1378 = pkin(2) * t1232;
t1284 = -pkin(9) * t1229 - t1378;
t1189 = t1284 * qJD(1);
t1234 = qJD(2) ^ 2;
t1374 = t1232 * g(3);
t1125 = t1374 - qJDD(2) * pkin(2) - t1234 * pkin(9) + (qJD(1) * t1189 + t1177) * t1229;
t1145 = t1266 * qJ(4);
t1371 = qJ(4) * t1226;
t1154 = pkin(3) * t1210 - t1187 * t1371;
t1372 = qJ(4) * t1224;
t1237 = -t1138 * pkin(3) - t1185 * t1145 + t1187 * t1154 + t1292 * t1372 + t1125;
t1236 = t1224 * t1237;
t1202 = t1230 * g(1) - t1233 * g(2);
t1176 = qJDD(1) * pkin(1) + t1235 * pkin(8) + t1202;
t1280 = -t1192 + t1305;
t1281 = t1191 + t1293;
t1095 = pkin(2) * t1280 - pkin(9) * t1281 - t1176;
t1165 = -g(3) * t1229 + t1232 * t1177;
t1126 = -pkin(2) * t1234 + qJDD(2) * pkin(9) + t1189 * t1312 + t1165;
t1035 = -t1231 * t1095 + t1228 * t1126;
t1141 = pkin(3) * t1185 - t1187 * t1372;
t953 = pkin(3) * t1263 - t1187 * t1141 - t1210 * t1145 + t1292 * t1371 - t1035;
t1036 = t1228 * t1095 + t1231 * t1126;
t954 = qJ(4) * t1243 - t1185 * t1141 - t1210 * t1154 + t1036;
t830 = -0.2e1 * qJD(4) * t1116 + t1223 * t1236 + t1225 * t954 + t953 * t1317;
t1259 = -qJ(5) * t1289 - 0.2e1 * qJD(5) * t1151 - t1116 * t1043 + t830;
t1375 = t1148 * pkin(4);
t802 = t1259 - t1375;
t1285 = t1223 * t954 - t1225 * t1236 - t953 * t1314;
t1251 = pkin(4) * t1289 - t1148 * qJ(5) + qJDD(5) + t1285;
t1351 = qJD(4) * t1118;
t803 = -t1118 * t1043 - t1251 - 0.2e1 * t1351;
t745 = -t1223 * t803 + t1225 * t802;
t1106 = -0.2e1 * t1350;
t891 = t1224 * t953 - t1226 * t1237 - qJDD(4);
t1245 = t1436 + t891 - t1439;
t810 = t1106 - t1245;
t1386 = (qJ(5) * t1223 + t1376) * t810 - qJ(4) * t745;
t1096 = (qJD(3) - t1210) * t1187 + t1288;
t1181 = t1185 ^ 2;
t1182 = t1187 ^ 2;
t1208 = t1210 ^ 2;
t1380 = pkin(4) + qJ(6);
t1379 = pkin(2) * t1229;
t1377 = pkin(4) * t1223;
t1370 = t1223 * t891;
t1362 = t1225 * t891;
t1353 = qJD(1) * qJD(2);
t1348 = qJD(6) * t1151;
t1331 = t1125 * t1228;
t1330 = t1125 * t1231;
t1135 = -t1263 - t1325;
t1329 = t1135 * t1228;
t1328 = t1135 * t1231;
t1327 = t1176 * t1229;
t1326 = t1176 * t1232;
t1209 = t1232 * t1235 * t1229;
t1200 = qJDD(2) + t1209;
t1324 = t1200 * t1229;
t1201 = qJDD(2) - t1209;
t1323 = t1201 * t1229;
t1322 = t1201 * t1232;
t1321 = t1210 * t1228;
t1320 = t1210 * t1231;
t1220 = t1229 ^ 2;
t1319 = t1220 * t1235;
t1221 = t1232 ^ 2;
t1309 = t1220 + t1221;
t1307 = qJDD(1) * t1230;
t1306 = qJDD(1) * t1233;
t1298 = t1229 * t1325;
t1297 = t1232 * t1325;
t1164 = t1177 * t1229 + t1374;
t1104 = t1164 * t1229 + t1232 * t1165;
t1157 = -t1202 * t1230 - t1233 * t1203;
t1287 = t1230 * t1209;
t1286 = t1233 * t1209;
t1197 = -t1230 * t1235 + t1306;
t1283 = -pkin(7) * t1197 - g(3) * t1230;
t1278 = -t1370 - t1498;
t1277 = t1362 + t1497;
t1241 = (0.2e1 * qJD(4) + t1043) * t1118 + t1251;
t1239 = t1241 + t1389;
t772 = (-pkin(5) * t1116 + 0.2e1 * qJD(6)) * t1151 + t1239;
t1063 = pkin(5) * t1118 + qJ(6) * t1151;
t1244 = -t1151 * t1063 + qJDD(6) + t1259;
t1242 = -t1050 * pkin(5) + t1244;
t777 = -qJ(6) * t1382 + t1242 - t1375;
t1276 = t1223 * t777 - t1225 * t772;
t1275 = t1223 * t802 + t1225 * t803;
t829 = t1285 + 0.2e1 * t1351;
t1274 = t1223 * t830 - t1225 * t829;
t762 = t1223 * t829 + t1225 * t830;
t969 = -t1035 * t1231 + t1036 * t1228;
t970 = t1035 * t1228 + t1036 * t1231;
t1103 = t1164 * t1232 - t1165 * t1229;
t1156 = t1202 * t1233 - t1203 * t1230;
t1240 = pkin(5) * t1382 + t1118 * t1063 + t1245;
t1238 = t1050 * qJ(6) - t1240;
t785 = t1106 + t1238 + 0.2e1 * t1349;
t712 = pkin(5) * t777 - t1380 * t785;
t727 = t1223 * t772 + t1225 * t777;
t729 = pkin(5) * t772 - qJ(5) * t785;
t1258 = qJ(4) * t727 + t1223 * t729 + t1225 * t712;
t758 = (-t1390 - t1382) * qJ(6) + (-t1050 - t1397) * pkin(5) + t1418 + t1244;
t760 = -t1438 + 0.2e1 * t1348 + (t1391 - t1336) * pkin(5) + t1239;
t1257 = t1223 * t760 + t1225 * t758 + t1472;
t761 = -t1439 + pkin(5) * t1392 + (-t1050 - t989) * qJ(6) + t1240 + t1393;
t925 = pkin(5) * t1260 - qJ(5) * t989;
t1256 = t1223 * t925 + t1225 * t761 + t1497;
t763 = pkin(5) * t1041 - t1238 + t1393 + t1436;
t863 = -pkin(5) * t1261 + t1380 * t1396;
t1255 = t1223 * t763 + t1225 * t863 + t1498;
t792 = t1418 + t1259;
t793 = t1241 - t1438;
t1254 = t1223 * t793 + t1225 * t792 + t1472;
t1253 = t762 + t1472;
t800 = t1107 + t1245 + t1436;
t1250 = -t1223 * t800 - t1376 * t1396 - t1498;
t801 = t810 + t1439;
t1249 = -qJ(5) * t1471 - t1225 * t801 + t1497;
t1217 = t1221 * t1235;
t1207 = -t1217 - t1234;
t1206 = t1217 - t1234;
t1205 = -t1234 - t1319;
t1204 = t1234 - t1319;
t1199 = t1217 - t1319;
t1198 = t1217 + t1319;
t1196 = t1233 * t1235 + t1307;
t1194 = t1309 * qJDD(1);
t1193 = t1214 - 0.2e1 * t1305;
t1190 = 0.2e1 * t1293 + t1308;
t1184 = t1232 * t1200;
t1183 = t1309 * t1353;
t1175 = -pkin(7) * t1196 + g(3) * t1233;
t1169 = -t1182 + t1208;
t1168 = t1181 - t1208;
t1167 = t1191 * t1232 - t1220 * t1353;
t1166 = -t1192 * t1229 - t1221 * t1353;
t1163 = -t1205 * t1229 - t1322;
t1162 = -t1204 * t1229 + t1184;
t1161 = t1207 * t1232 - t1324;
t1160 = t1206 * t1232 - t1323;
t1159 = t1205 * t1232 - t1323;
t1158 = t1207 * t1229 + t1184;
t1153 = -t1182 + t1181;
t1150 = t1194 * t1233 - t1198 * t1230;
t1149 = t1194 * t1230 + t1198 * t1233;
t1147 = -t1182 - t1208;
t1142 = -t1190 * t1229 + t1193 * t1232;
t1140 = -t1208 - t1181;
t1134 = t1181 + t1182;
t1132 = t1163 * t1233 + t1190 * t1230;
t1131 = t1161 * t1233 - t1193 * t1230;
t1130 = t1163 * t1230 - t1190 * t1233;
t1129 = t1161 * t1230 + t1193 * t1233;
t1128 = -pkin(8) * t1159 - t1326;
t1127 = -pkin(8) * t1158 - t1327;
t1124 = (-t1185 * t1231 + t1187 * t1228) * t1210;
t1123 = (t1185 * t1228 + t1187 * t1231) * t1210;
t1121 = -pkin(1) * t1159 + t1165;
t1120 = -pkin(1) * t1158 + t1164;
t1101 = -t1170 + t1292;
t1097 = (-qJD(3) - t1210) * t1187 - t1288;
t1088 = -t1187 * t1321 - t1231 * t1292;
t1087 = -t1187 * t1320 + t1228 * t1292;
t1086 = -t1138 * t1228 + t1185 * t1320;
t1085 = -t1138 * t1231 - t1185 * t1321;
t1084 = t1232 * t1124 + t1229 * t1263;
t1083 = t1168 * t1231 + t1329;
t1082 = -t1169 * t1228 + t1402;
t1081 = -t1168 * t1228 + t1328;
t1080 = -t1169 * t1231 - t1406;
t1079 = -t1147 * t1228 + t1328;
t1078 = t1147 * t1231 + t1329;
t1077 = t1104 * t1233 - t1176 * t1230;
t1076 = t1104 * t1230 + t1176 * t1233;
t1065 = t1140 * t1231 - t1406;
t1064 = t1140 * t1228 + t1402;
t1055 = t1088 * t1232 + t1298;
t1054 = t1086 * t1232 - t1298;
t1033 = -t1096 * t1231 - t1101 * t1228;
t1032 = t1097 * t1231 + t1100 * t1228;
t1031 = -t1096 * t1228 + t1101 * t1231;
t1030 = -t1097 * t1228 + t1100 * t1231;
t1029 = -pkin(9) * t1078 + t1330;
t1026 = t1083 * t1232 - t1096 * t1229;
t1025 = t1082 * t1232 - t1101 * t1229;
t1024 = -pkin(9) * t1064 + t1331;
t1023 = t1079 * t1232 - t1100 * t1229;
t1022 = t1079 * t1229 + t1100 * t1232;
t1021 = t1065 * t1232 - t1097 * t1229;
t1020 = t1065 * t1229 + t1097 * t1232;
t1016 = t1032 * t1232 - t1153 * t1229;
t1004 = (-t1334 + t1335) * t1151;
t1000 = t1033 * t1232 - t1134 * t1229;
t999 = t1033 * t1229 + t1134 * t1232;
t987 = qJ(5) * t1397;
t985 = -pkin(2) * t1078 + t1036;
t976 = -pkin(2) * t1064 + t1035;
t972 = t1023 * t1233 + t1078 * t1230;
t971 = t1023 * t1230 - t1078 * t1233;
t962 = t1021 * t1233 + t1064 * t1230;
t961 = t1021 * t1230 - t1064 * t1233;
t946 = t1125 * t1229 + t1232 * t970;
t945 = -t1125 * t1232 + t1229 * t970;
t944 = t1000 * t1233 + t1031 * t1230;
t943 = t1000 * t1230 - t1031 * t1233;
t939 = t1037 + (-t1116 * t1224 - t1299) * t1118;
t936 = -t1296 + (-t1116 * t1226 + t1300) * t1118;
t933 = -t1038 + (-t1301 + t1333) * t1116;
t930 = t1295 + (t1302 + t1332) * t1116;
t927 = -pkin(1) * t1022 - pkin(2) * t1100 - pkin(9) * t1079 - t1331;
t926 = -pkin(1) * t1020 - pkin(2) * t1097 - pkin(9) * t1065 + t1330;
t924 = -pkin(9) * t1031 - t969;
t923 = -pkin(4) * t1391 - t987;
t915 = t1004 * t1231 - t1428;
t912 = -t1004 * t1228 - t1424;
t908 = t1226 * t1450 + t1364;
t905 = t1226 * t1270 + t1363;
t898 = -pkin(8) * t1022 + t1029 * t1232 - t1229 * t985;
t895 = t1226 * t1269 - t1431;
t890 = -pkin(8) * t1020 + t1024 * t1232 - t1229 * t976;
t883 = -t1226 * t1419 + t1435;
t877 = -t1228 * t939 + t978;
t874 = -t1228 * t933 + t977;
t871 = -t1231 * t939 - t1354;
t868 = -t1231 * t933 - t1355;
t865 = t1230 * t969 + t1233 * t946;
t864 = t1230 * t946 - t1233 * t969;
t856 = -t1380 * t1391 - t987;
t855 = -pkin(1) * t999 - pkin(2) * t1134 - pkin(9) * t1033 - t970;
t854 = -pkin(1) * t945 + pkin(2) * t1125 - pkin(9) * t970;
t852 = t1232 * t915 - t1427;
t850 = -pkin(8) * t999 + t1031 * t1379 + t1232 * t924;
t847 = -t1228 * t908 + t1526;
t844 = -t1228 * t905 + t1560;
t841 = -t1231 * t908 - t1528;
t838 = -t1231 * t905 - t1562;
t837 = -pkin(8) * t945 + (-pkin(9) * t1232 + t1379) * t969;
t834 = -t1228 * t895 - t1490;
t831 = t1231 * t895 - t1495;
t828 = -t1228 * t883 - t1489;
t825 = t1231 * t883 - t1494;
t822 = -t1229 * t936 + t1232 * t877;
t819 = -t1229 * t930 + t1232 * t874;
t797 = t1232 * t847 + t1579;
t794 = t1232 * t844 - t1583;
t789 = t1232 * t834 + t1584;
t786 = t1229 * t834 - t1582;
t784 = t1232 * t828 - t1578;
t781 = t1229 * t828 + t1576;
t778 = pkin(4) * t1260 + t1241 - t1437;
t776 = t1259 + t1443;
t771 = -t1362 + (-t1226 * t895 - t1585) * qJ(4);
t764 = -t1370 + t1503;
t759 = (-t1041 - t1382) * qJ(6) + t1242 + t1443;
t757 = pkin(5) * t1336 - t1260 * t1380 - 0.2e1 * t1348 - t1389 + t1437 + t803;
t754 = t1230 * t831 + t1233 * t789;
t751 = t1230 * t789 - t1233 * t831;
t750 = t1224 * t830 + t1226 * t1278 - t1532;
t749 = t1224 * t891 + t1226 * t1274;
t748 = t1224 * t1274 - t1226 * t891;
t747 = t1224 * t829 + t1226 * t1277 - t1534;
t746 = pkin(4) * t803 + qJ(5) * t802;
t744 = t1230 * t825 + t1233 * t784;
t741 = t1230 * t784 - t1233 * t825;
t738 = t1225 * t800 - t1396 * t1377 + t1502;
t737 = qJ(5) * t1470 - t1223 * t801 + (-t1226 * t883 + t1580) * qJ(4);
t730 = t1226 * t1253 - t1500;
t728 = t1473 - t1274;
t726 = -pkin(2) * t831 - pkin(3) * t895 - t1224 * t1278 + t1226 * t830;
t725 = -t1224 * t1277 + t1226 * t829 + t1553;
t724 = -t1224 * t810 + t1226 * t1275;
t723 = t1224 * t1275 + t1226 * t810;
t722 = -t1223 * t761 + t1225 * t925 + t1503;
t721 = -t1223 * t863 + t1225 * t763 + t1502;
t720 = -t1224 * t776 - t1226 * t1250 + t1532;
t719 = -t1224 * t778 - t1226 * t1249 + t1534;
t718 = -t1224 * t1253 + t1515;
t717 = -t1223 * t792 + t1225 * t793 + t1473;
t716 = -pkin(3) * t748 + t1371 * t762;
t715 = -t1228 * t749 + t1231 * t762;
t714 = t1228 * t762 + t1231 * t749;
t713 = -t1224 * t923 + t1226 * t1254 - t1500;
t711 = -t1224 * t785 + t1226 * t1276;
t710 = t1224 * t1276 + t1226 * t785;
t709 = t1224 * t1250 - t1226 * t776 + t1552;
t708 = (-t1224 * t748 - t1226 * t749) * qJ(4);
t707 = qJ(5) * t777 - t1380 * t772;
t706 = -pkin(9) * t831 - t1228 * t750 + t1231 * t771;
t705 = -pkin(2) * t825 - pkin(3) * t883 + t1224 * t1249 - t1226 * t778;
t704 = -t1228 * t747 + t1231 * t764 - t1564;
t703 = -t1224 * t1254 - t1226 * t923 + t1515;
t702 = -t1224 * t759 + t1226 * t1255 + t1532;
t701 = -t1223 * t758 + t1225 * t760 + t1473;
t700 = -t1224 * t757 + t1226 * t1256 - t1534;
t699 = -t1224 * t856 + t1226 * t1257 - t1500;
t698 = -t1228 * t724 + t1231 * t745;
t697 = t1228 * t745 + t1231 * t724;
t696 = -t1224 * t1256 - t1226 * t757 + t1553;
t695 = -t1224 * t1255 - t1226 * t759 + t1552;
t694 = t1229 * t748 + t1232 * t715;
t693 = t1229 * t715 - t1232 * t748;
t692 = -pkin(1) * t786 - pkin(9) * t834 - t1228 * t771 - t1231 * t750 + t1591;
t691 = -t1224 * t1257 - t1226 * t856 + t1515;
t690 = -t1228 * t730 + t1231 * t728 - t1530;
t689 = -t1228 * t764 - t1231 * t747 + t1574;
t688 = -t1228 * t720 + t1231 * t738 - t1563;
t687 = -pkin(9) * t825 - t1228 * t719 + t1231 * t737;
t686 = -t1228 * t711 + t1231 * t727;
t685 = t1228 * t727 + t1231 * t711;
t684 = -pkin(2) * t714 - pkin(3) * t749 - t1372 * t762;
t683 = (-qJ(5) * t1225 + t1377) * t810 + (-t1224 * t723 - t1226 * t724) * qJ(4);
t682 = -t1228 * t738 - t1231 * t720 + t1575;
t681 = -t1228 * t728 - t1231 * t730 + t1554;
t680 = t1229 * t723 + t1232 * t698;
t679 = t1229 * t698 - t1232 * t723;
t678 = -t1228 * t713 + t1231 * t717 - t1530;
t677 = -pkin(8) * t786 - t1229 * t726 + t1232 * t706;
t676 = -pkin(1) * t781 - pkin(9) * t828 - t1228 * t737 - t1231 * t719 - t1590;
t675 = -t1228 * t700 + t1231 * t722 - t1564;
t674 = -t1229 * t725 + t1232 * t704 - t1586;
t673 = -t1228 * t702 + t1231 * t721 - t1563;
t672 = -pkin(3) * t723 - t1224 * t746 - t1226 * t1386;
t671 = t1230 * t714 + t1233 * t694;
t670 = t1230 * t694 - t1233 * t714;
t669 = -t1228 * t717 - t1231 * t713 + t1554;
t668 = -t1228 * t722 - t1231 * t700 + t1574;
t667 = -t1228 * t721 - t1231 * t702 + t1575;
t666 = -t1228 * t699 + t1231 * t701 - t1530;
t665 = t1229 * t710 + t1232 * t686;
t664 = t1229 * t686 - t1232 * t710;
t663 = -t1229 * t718 + t1232 * t690 - t1565;
t662 = -pkin(9) * t714 - t1228 * t716 + t1231 * t708;
t661 = -t1229 * t709 + t1232 * t688 - t1587;
t660 = -pkin(8) * t781 - t1229 * t705 + t1232 * t687;
t659 = -t1228 * t701 - t1231 * t699 + t1554;
t658 = t1230 * t697 + t1233 * t680;
t657 = t1230 * t680 - t1233 * t697;
t656 = -pkin(2) * t697 - pkin(3) * t724 + t1224 * t1386 - t1226 * t746;
t655 = -t1229 * t703 + t1232 * t678 - t1565;
t654 = -t1223 * t712 + t1225 * t729 + (-t1224 * t710 - t1226 * t711) * qJ(4);
t653 = -t1229 * t696 + t1232 * t675 - t1586;
t652 = -t1229 * t695 + t1232 * t673 - t1587;
t651 = -pkin(3) * t710 - t1224 * t707 + t1226 * t1258;
t650 = t1230 * t685 + t1233 * t665;
t649 = t1230 * t665 - t1233 * t685;
t648 = -t1229 * t691 + t1232 * t666 - t1565;
t647 = -pkin(1) * t693 + pkin(2) * t748 - pkin(9) * t715 - t1228 * t708 - t1231 * t716;
t646 = -pkin(9) * t697 - t1228 * t672 + t1231 * t683;
t645 = -pkin(2) * t685 - pkin(3) * t711 - t1224 * t1258 - t1226 * t707;
t644 = -pkin(8) * t693 - t1229 * t684 + t1232 * t662;
t643 = -pkin(1) * t679 + pkin(2) * t723 - pkin(9) * t698 - t1228 * t683 - t1231 * t672;
t642 = -pkin(9) * t685 - t1228 * t651 + t1231 * t654;
t641 = -pkin(8) * t679 - t1229 * t656 + t1232 * t646;
t640 = -pkin(1) * t664 + pkin(2) * t710 - pkin(9) * t686 - t1228 * t654 - t1231 * t651;
t639 = -pkin(8) * t664 - t1229 * t645 + t1232 * t642;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1196, -t1197, 0, t1157, 0, 0, 0, 0, 0, 0, t1131, t1132, t1150, t1077, 0, 0, 0, 0, 0, 0, t962, t972, t944, t865, 0, 0, 0, 0, 0, 0, t1568, t754, t1539, t671, 0, 0, 0, 0, 0, 0, t1539, t744, t1569, t658, 0, 0, 0, 0, 0, 0, t1539, t1569, t1568, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1197, -t1196, 0, t1156, 0, 0, 0, 0, 0, 0, t1129, t1130, t1149, t1076, 0, 0, 0, 0, 0, 0, t961, t971, t943, t864, 0, 0, 0, 0, 0, 0, t1570, t751, t1544, t670, 0, 0, 0, 0, 0, 0, t1544, t741, t1571, t657, 0, 0, 0, 0, 0, 0, t1544, t1571, t1570, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1158, t1159, 0, -t1103, 0, 0, 0, 0, 0, 0, t1020, t1022, t999, t945, 0, 0, 0, 0, 0, 0, t1547, t786, t1510, t693, 0, 0, 0, 0, 0, 0, t1510, t781, t1546, t679, 0, 0, 0, 0, 0, 0, t1510, t1546, t1547, t664; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1197, 0, -t1196, 0, t1283, -t1175, -t1156, -pkin(7) * t1156, t1167 * t1233 - t1287, t1142 * t1233 - t1199 * t1230, t1162 * t1233 + t1229 * t1307, t1166 * t1233 + t1287, t1160 * t1233 + t1214 * t1230, qJDD(2) * t1230 + t1183 * t1233, -pkin(7) * t1129 - t1120 * t1230 + t1127 * t1233, -pkin(7) * t1130 - t1121 * t1230 + t1128 * t1233, -pkin(7) * t1149 + t1103 * t1233, -pkin(7) * t1076 - (pkin(1) * t1230 - pkin(8) * t1233) * t1103, t1055 * t1233 - t1087 * t1230, t1016 * t1233 - t1030 * t1230, t1025 * t1233 - t1080 * t1230, t1054 * t1233 - t1085 * t1230, t1026 * t1233 - t1081 * t1230, t1084 * t1233 - t1123 * t1230, -pkin(7) * t961 - t1230 * t926 + t1233 * t890, -pkin(7) * t971 - t1230 * t927 + t1233 * t898, -pkin(7) * t943 - t1230 * t855 + t1233 * t850, -pkin(7) * t864 - t1230 * t854 + t1233 * t837, t1444, t1602, t1538, -t1230 * t868 + t1233 * t819, -t1230 * t841 + t1233 * t797, t1476, -t1230 * t689 + t1233 * t674 - t1598, -pkin(7) * t751 - t1230 * t692 + t1233 * t677, -t1230 * t681 + t1233 * t663 - t1588, -pkin(7) * t670 - t1230 * t647 + t1233 * t644, -t1230 * t912 + t1233 * t852, -t1230 * t838 + t1233 * t794, t1540, -t1230 * t871 + t1233 * t822, t1602, t1445, -t1230 * t669 + t1233 * t655 - t1588, -pkin(7) * t741 - t1230 * t676 + t1233 * t660, -t1230 * t682 + t1233 * t661 - t1597, -pkin(7) * t657 - t1230 * t643 + t1233 * t641, t1476, t1540, t1538, t1445, -t1602, t1444, -t1230 * t659 + t1233 * t648 - t1588, -t1230 * t667 + t1233 * t652 - t1597, -t1230 * t668 + t1233 * t653 - t1598, -pkin(7) * t649 - t1230 * t640 + t1233 * t639; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1196, 0, t1197, 0, t1175, t1283, t1157, pkin(7) * t1157, t1167 * t1230 + t1286, t1142 * t1230 + t1199 * t1233, t1162 * t1230 - t1229 * t1306, t1166 * t1230 - t1286, t1160 * t1230 - t1214 * t1233, -qJDD(2) * t1233 + t1183 * t1230, pkin(7) * t1131 + t1120 * t1233 + t1127 * t1230, pkin(7) * t1132 + t1121 * t1233 + t1128 * t1230, pkin(7) * t1150 + t1103 * t1230, pkin(7) * t1077 - (-pkin(1) * t1233 - pkin(8) * t1230) * t1103, t1055 * t1230 + t1087 * t1233, t1016 * t1230 + t1030 * t1233, t1025 * t1230 + t1080 * t1233, t1054 * t1230 + t1085 * t1233, t1026 * t1230 + t1081 * t1233, t1084 * t1230 + t1123 * t1233, pkin(7) * t962 + t1230 * t890 + t1233 * t926, pkin(7) * t972 + t1230 * t898 + t1233 * t927, pkin(7) * t944 + t1230 * t850 + t1233 * t855, pkin(7) * t865 + t1230 * t837 + t1233 * t854, t1447, t1603, t1543, t1230 * t819 + t1233 * t868, t1230 * t797 + t1233 * t841, t1479, t1230 * t674 + t1233 * t689 + t1600, pkin(7) * t754 + t1230 * t677 + t1233 * t692, t1230 * t663 + t1233 * t681 + t1589, pkin(7) * t671 + t1230 * t644 + t1233 * t647, t1230 * t852 + t1233 * t912, t1230 * t794 + t1233 * t838, t1545, t1230 * t822 + t1233 * t871, t1603, t1448, t1230 * t655 + t1233 * t669 + t1589, pkin(7) * t744 + t1230 * t660 + t1233 * t676, t1230 * t661 + t1233 * t682 + t1599, pkin(7) * t658 + t1230 * t641 + t1233 * t643, t1479, t1545, t1543, t1448, -t1603, t1447, t1230 * t648 + t1233 * t659 + t1589, t1230 * t652 + t1233 * t667 + t1599, t1230 * t653 + t1233 * t668 + t1600, pkin(7) * t650 + t1230 * t639 + t1233 * t640; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1202, t1203, 0, 0, t1281 * t1229, t1190 * t1232 + t1193 * t1229, t1204 * t1232 + t1324, -t1280 * t1232, t1206 * t1229 + t1322, 0, pkin(1) * t1193 + pkin(8) * t1161 + t1326, -pkin(1) * t1190 + pkin(8) * t1163 - t1327, pkin(1) * t1198 + pkin(8) * t1194 + t1104, pkin(1) * t1176 + pkin(8) * t1104, t1088 * t1229 - t1297, t1032 * t1229 + t1153 * t1232, t1082 * t1229 + t1101 * t1232, t1086 * t1229 + t1297, t1083 * t1229 + t1096 * t1232, t1229 * t1124 - t1232 * t1263, -pkin(1) * t1064 + pkin(8) * t1021 + t1024 * t1229 + t1232 * t976, -pkin(1) * t1078 + pkin(8) * t1023 + t1029 * t1229 + t1232 * t985, pkin(8) * t1000 + t1229 * t924 + (-pkin(1) - t1378) * t1031, pkin(8) * t946 + (-pkin(1) + t1284) * t969, t1412, t1593, t1511, t1229 * t874 + t1232 * t930, t1229 * t847 - t1577, t1449, t1229 * t704 + t1232 * t725 + t1572, -pkin(1) * t831 + pkin(8) * t789 + t1229 * t706 + t1232 * t726, t1229 * t690 + t1232 * t718 + t1551, -pkin(1) * t714 + pkin(8) * t694 + t1229 * t662 + t1232 * t684, t1229 * t915 + t1423, t1229 * t844 + t1581, t1509, t1229 * t877 + t1232 * t936, t1593, t1411, t1229 * t678 + t1232 * t703 + t1551, -pkin(1) * t825 + pkin(8) * t784 + t1229 * t687 + t1232 * t705, t1229 * t688 + t1232 * t709 + t1573, -pkin(1) * t697 + pkin(8) * t680 + t1229 * t646 + t1232 * t656, t1449, t1509, t1511, t1411, -t1593, t1412, t1229 * t666 + t1232 * t691 + t1551, t1229 * t673 + t1232 * t695 + t1573, t1229 * t675 + t1232 * t696 + t1572, -pkin(1) * t685 + pkin(8) * t665 + t1229 * t642 + t1232 * t645;];
tauB_reg  = t1;
