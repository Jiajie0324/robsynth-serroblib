% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha4,d1,d2,d3,theta4]';
% 
% Output:
% tau_reg [6x29]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPP1_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPP1_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPP1_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPP1_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:18:43
% EndTime: 2019-03-09 15:19:06
% DurationCPUTime: 12.71s
% Computational Cost: add. (15357->798), mult. (36987->1008), div. (0->0), fcn. (27132->10), ass. (0->367)
t326 = sin(qJ(2));
t328 = cos(qJ(3));
t324 = cos(pkin(6));
t329 = cos(qJ(2));
t486 = t329 * t324;
t447 = qJ(4) * t486;
t366 = pkin(3) * t326 - t328 * t447;
t409 = pkin(2) * t326 - pkin(9) * t329;
t262 = t409 * qJD(1);
t325 = sin(qJ(3));
t470 = qJD(1) * t326;
t435 = t325 * t470;
t474 = pkin(8) * t435 + t328 * t262;
t135 = qJD(1) * t366 + t474;
t520 = qJ(4) * t324;
t424 = pkin(9) + t520;
t394 = qJD(3) * t424;
t459 = qJD(4) * t325;
t430 = t324 * t459;
t190 = -t328 * t394 - t430;
t580 = t135 - t190;
t313 = t329 * qJD(1);
t309 = pkin(8) * t313;
t322 = sin(pkin(6));
t502 = t322 * t328;
t448 = qJ(4) * t502;
t550 = pkin(3) * t325;
t382 = -t448 + t550;
t185 = t313 * t382 + t309;
t188 = qJD(3) * t382 - t322 * t459;
t579 = -t185 + t188;
t240 = t325 * t262;
t458 = qJD(4) * t328;
t429 = t324 * t458;
t490 = t326 * t328;
t503 = t322 * t326;
t577 = -t325 * t486 + t503;
t578 = t325 * t394 - t429 + t240 + (-pkin(8) * t490 + qJ(4) * t577) * qJD(1);
t321 = sin(pkin(10));
t323 = cos(pkin(10));
t487 = t328 * t329;
t165 = t321 * t577 + t323 * t487;
t463 = qJD(3) * t328;
t465 = qJD(3) * t325;
t505 = t321 * t324;
t481 = t165 * qJD(1) - t323 * t463 + t465 * t505;
t493 = t325 * t326;
t377 = t322 * t329 + t324 * t493;
t506 = t321 * t322;
t528 = -t578 * t323 - t505 * t580 + t579 * t506;
t525 = t322 * t580 + t579 * t324;
t467 = qJD(2) * t328;
t257 = t435 - t467;
t558 = t313 - qJD(3);
t576 = t257 * t558;
t434 = t328 * t470;
t469 = qJD(2) * t325;
t259 = t434 + t469;
t575 = t259 * t558;
t419 = t558 * t322;
t510 = t257 * t324;
t367 = t419 + t510;
t574 = t321 * t367;
t559 = qJD(3) * t558;
t573 = t325 * t559;
t497 = t323 * t325;
t378 = t321 * t328 + t324 * t497;
t440 = t323 * t503;
t164 = t378 * t329 - t440;
t482 = t164 * qJD(1) - t378 * qJD(3);
t572 = -t323 * (t135 * t324 + t185 * t322) + t578 * t321;
t452 = t326 * qJDD(1);
t464 = qJD(3) * t326;
t571 = -qJD(1) * t464 + qJDD(2);
t146 = t325 * (qJD(2) * (qJD(3) + t313) + t452) - t571 * t328;
t453 = qJD(1) * qJD(2);
t428 = t326 * t453;
t312 = t329 * qJDD(1);
t451 = qJDD(3) - t312;
t372 = t428 + t451;
t340 = t324 * t146 - t322 * t372;
t307 = pkin(8) * t452;
t427 = t329 * t453;
t227 = -qJDD(2) * pkin(2) + pkin(8) * t427 + t307;
t538 = g(3) * t329;
t327 = sin(qJ(1));
t330 = cos(qJ(1));
t404 = g(1) * t330 + g(2) * t327;
t565 = t326 * t404;
t570 = pkin(9) * t559 - t227 - t538 + t565;
t498 = t323 * t324;
t509 = t259 * t321;
t114 = t257 * t498 + t323 * t419 + t509;
t145 = qJD(2) * t463 + (t427 + t452) * t328 + t571 * t325;
t65 = t145 * t321 + t323 * t340;
t569 = t65 * qJ(6) + t114 * qJD(6);
t460 = qJD(4) * t323;
t314 = t326 * pkin(9);
t316 = t329 * pkin(2);
t438 = -pkin(1) - t316;
t386 = t438 - t314;
t244 = t386 * qJD(1);
t527 = qJD(2) * pkin(9);
t284 = t309 + t527;
t160 = t328 * t244 - t325 * t284;
t117 = -t259 * t520 + t160;
t161 = t325 * t244 + t328 * t284;
t118 = qJ(4) * t510 - t161;
t511 = t257 * t322;
t155 = pkin(3) * t259 + qJ(4) * t511;
t49 = t323 * t117 + t118 * t505 + t155 * t506;
t508 = t259 * t322;
t522 = qJ(5) * t508 - qJD(5) * t324 - t322 * t460 + t49;
t179 = t324 * t558 - t511;
t66 = t323 * t145 - t321 * t340;
t560 = t322 ^ 2 + t324 ^ 2;
t82 = -t323 * t367 - t509 * t560;
t568 = -t82 * t179 + t66;
t260 = t424 * t325;
t381 = qJ(4) * t322 * t325 + pkin(3) * t328;
t369 = pkin(2) + t381;
t567 = (-t260 * t324 - t322 * t369) * t323;
t566 = (t118 * t324 + t155 * t322) * t323;
t499 = t323 * t259;
t115 = t499 - t574;
t178 = t179 ^ 2;
t564 = -t115 ^ 2 - t178;
t472 = -t314 - t316;
t282 = -pkin(1) + t472;
t299 = pkin(8) * t487;
t473 = t325 * t282 + t299;
t494 = t324 * t328;
t229 = t321 * t494 + t497;
t563 = qJ(5) * t481 - qJD(5) * t229 + t525;
t562 = -t190 * t498 - t572;
t484 = t330 * t325;
t237 = t327 * t487 - t484;
t485 = t329 * t330;
t239 = t325 * t327 + t328 * t485;
t405 = -g(1) * t239 - g(2) * t237;
t421 = t146 * t322 + t324 * t372;
t537 = pkin(4) + qJ(6);
t561 = pkin(5) * t66 - t421 * t537;
t163 = -t321 * t377 + t323 * t490;
t491 = t326 * t327;
t488 = t327 * t329;
t236 = t325 * t488 + t328 * t330;
t516 = t236 * t322;
t175 = t324 * t491 + t516;
t489 = t326 * t330;
t238 = t327 * t328 - t329 * t484;
t513 = t238 * t322;
t176 = t324 * t489 - t513;
t234 = t322 * t493 - t486;
t557 = -g(1) * t176 - g(2) * t175 - g(3) * t234;
t263 = t409 * qJD(2);
t170 = qJD(1) * t263 + qJDD(1) * t386;
t226 = qJDD(2) * pkin(9) + (-t428 + t312) * pkin(8);
t368 = t325 * t170 + t328 * t226 + t244 * t463 - t284 * t465;
t35 = -qJ(4) * t340 - qJD(4) * t367 + t368;
t158 = t328 * t170;
t339 = -qJD(3) * t161 - t325 * t226 + t158;
t387 = -qJ(4) * t145 - qJD(4) * t259;
t42 = pkin(3) * t372 + t324 * t387 + t339;
t59 = pkin(3) * t146 + t322 * t387 + t227;
t7 = -t321 * t35 + t323 * (t322 * t59 + t324 * t42);
t283 = -qJD(2) * pkin(2) + pkin(8) * t470;
t136 = pkin(3) * t257 - qJ(4) * t508 + t283;
t91 = -qJ(4) * t367 + t161;
t97 = -pkin(3) * t558 + t117;
t33 = -t321 * t91 + t323 * (t136 * t322 + t324 * t97);
t461 = qJD(4) * t322;
t478 = t325 * t263 + t282 * t463;
t70 = (-t461 + (-pkin(8) * qJD(3) - qJD(2) * t520) * t325) * t329 + (-pkin(8) * t467 - t430 + (qJD(2) * t322 - t324 * t463) * qJ(4)) * t326 + t478;
t495 = t324 * t326;
t293 = qJ(4) * t495;
t468 = qJD(2) * t326;
t549 = pkin(8) * t325;
t477 = t328 * t263 + t468 * t549;
t78 = -t326 * t429 + t366 * qJD(2) + (-t299 + (-t282 + t293) * t325) * qJD(3) + t477;
t466 = qJD(2) * t329;
t98 = (qJD(3) * t381 - t322 * t458) * t326 + (pkin(8) + t382) * t466;
t19 = -t321 * t70 + (t322 * t98 + t324 * t78) * t323;
t144 = -qJ(4) * t377 + t473;
t256 = t328 * t282;
t150 = -t328 * t293 + t256 + (-pkin(3) - t549) * t329;
t278 = t326 * t448;
t191 = -t278 + (pkin(8) + t550) * t326;
t61 = -t321 * t144 + (t150 * t324 + t191 * t322) * t323;
t492 = t325 * t329;
t446 = t322 * t492;
t235 = t446 + t495;
t216 = t235 * qJD(1);
t531 = qJ(5) * t216 - t322 * (qJ(5) * t465 - qJD(5) * t328) - t528;
t552 = pkin(4) * t421;
t548 = pkin(8) * t329;
t545 = g(1) * t327;
t539 = g(3) * t326;
t443 = t323 * t494;
t228 = t321 * t325 - t443;
t535 = qJD(6) * t228 - t482 * t537 + t563;
t517 = t188 * t323;
t534 = t537 * t216 + (qJD(6) * t328 - t465 * t537 - t517) * t322 + t562 - t481 * pkin(5);
t533 = pkin(5) * t482 - t531;
t532 = -pkin(4) * t482 + t563;
t530 = pkin(4) * t216 + (-pkin(4) * t465 - t517) * t322 + t562;
t529 = (t188 * t322 + t190 * t324) * t323 + t572;
t147 = -t257 * t321 + t259 * t498;
t148 = -t257 * t323 - t259 * t505;
t73 = -t118 * t322 + t324 * t155;
t376 = -qJ(5) * t148 + t73;
t456 = qJD(5) * t321;
t524 = -t537 * t147 + (-qJD(6) * t323 - t456) * t322 - t376;
t431 = t321 * t461;
t110 = t321 * t117;
t483 = -pkin(4) * t508 + t110;
t523 = -qJD(6) * t324 + t431 + t118 * t498 - pkin(5) * t148 - (-qJ(6) * t259 - t155 * t323) * t322 - t483;
t521 = pkin(5) * t147 - t522;
t519 = t114 * t115;
t518 = t145 * t325;
t515 = t237 * t321;
t514 = t237 * t322;
t512 = t239 * t322;
t507 = t259 * t328;
t504 = t322 * t323;
t480 = -g(1) * t512 - g(2) * t514;
t261 = t424 * t328;
t232 = t321 * t261;
t479 = pkin(4) * t502 + t232;
t476 = pkin(9) * t488 + t327 * t447;
t475 = pkin(9) * t485 + t330 * t447;
t231 = pkin(3) * t505 + qJ(4) * t504;
t319 = t326 ^ 2;
t471 = -t329 ^ 2 + t319;
t462 = qJD(4) * t179;
t457 = qJD(5) * t115;
t455 = t283 * qJD(3);
t8 = t323 * t35 + t42 * t505 + t59 * t506;
t20 = t323 * t70 + t78 * t505 + t98 * t506;
t450 = g(3) * t490;
t449 = t257 * t548;
t34 = t136 * t506 + t323 * t91 + t97 * t505;
t445 = t322 * t491;
t62 = t323 * t144 + t150 * t505 + t191 * t506;
t100 = -t260 * t505 + t323 * t261 - t369 * t506;
t437 = -pkin(3) * t323 - pkin(4);
t433 = t325 * t464;
t432 = t326 * t463;
t425 = -qJ(5) * t321 - pkin(3);
t45 = -t322 * t78 + t324 * t98;
t422 = pkin(8) * t558;
t84 = -t150 * t322 + t324 * t191;
t153 = t260 * t322 - t324 * t369;
t420 = t329 * t558;
t418 = qJD(2) * t558;
t411 = t324 * t432;
t410 = -pkin(3) * t493 + t278;
t4 = -qJ(5) * t421 + t179 * qJD(5) - t8;
t106 = -t236 * t498 + t327 * t440 - t515;
t108 = -t238 * t498 + t239 * t321 - t330 * t440;
t408 = -g(1) * t106 - g(2) * t108;
t107 = t236 * t505 - t237 * t323 - t321 * t445;
t109 = t239 * t323 + (t238 * t324 + t322 * t489) * t321;
t407 = g(1) * t107 + g(2) * t109;
t406 = g(1) * t175 - g(2) * t176;
t403 = -g(2) * t330 + t545;
t131 = -t236 * t321 + t237 * t498;
t132 = -t236 * t323 - t237 * t505;
t222 = t236 * pkin(3);
t401 = t132 * pkin(4) + qJ(5) * t131 - t222;
t133 = t238 * t321 + t239 * t498;
t134 = t238 * t323 - t239 * t505;
t224 = t238 * pkin(3);
t400 = t134 * pkin(4) + qJ(5) * t133 + t224;
t200 = -qJ(5) * t324 - t231;
t63 = t324 * t136 - t322 * t97 + qJD(4);
t16 = -t322 * t42 + t324 * t59 + qJDD(4);
t399 = t322 * t465 - t216;
t398 = t328 * t559;
t81 = t499 * t560 - t574;
t397 = t114 * t82 - t115 * t81;
t393 = pkin(3) * t487 + qJ(4) * t446 + t293 - t472;
t25 = qJ(5) * t179 - t34;
t385 = -t237 * pkin(3) + t330 * pkin(8) - qJ(4) * t516;
t51 = -qJ(5) * t234 - t62;
t162 = t321 * t490 + t323 * t377;
t140 = t162 * t327;
t141 = t163 * t327;
t384 = -t141 * pkin(4) - qJ(5) * t140 + t476;
t142 = t162 * t330;
t143 = t163 * t330;
t383 = -t143 * pkin(4) - qJ(5) * t142 + t475;
t379 = -0.2e1 * pkin(1) * t453 - pkin(8) * qJDD(2);
t374 = -qJ(5) * t163 + t84;
t373 = -qJ(5) * t229 + t153;
t371 = -t421 + t519;
t88 = qJ(5) * t502 - t100;
t332 = qJD(1) ^ 2;
t365 = pkin(1) * t332 + t404;
t196 = t321 * t493 - t326 * t443;
t364 = g(1) * t133 + g(2) * t131 - g(3) * t196;
t197 = t229 * t326;
t363 = -g(1) * t134 - g(2) * t132 + g(3) * t197;
t362 = g(1) * t142 + g(2) * t140 - g(3) * t164;
t361 = g(1) * t143 + g(2) * t141 - g(3) * t165;
t198 = t234 * t327;
t199 = t234 * t330;
t360 = g(1) * t199 + g(2) * t198 - g(3) * t235;
t359 = -t179 * t81 + t65;
t357 = -qJ(5) * t115 + t63;
t353 = -t197 * pkin(4) - qJ(5) * t196 + t410;
t171 = qJD(2) * t235 + t322 * t432;
t12 = -qJ(5) * t171 - qJD(5) * t234 - t20;
t3 = -t65 * pkin(5) + qJDD(6) - t4;
t95 = qJD(2) * t165 - t321 * t411 - t323 * t433;
t350 = -qJ(5) * t95 - qJD(5) * t163 + t45;
t349 = t165 * pkin(4) + qJ(5) * t164 + t393;
t347 = qJD(5) - t33;
t346 = qJDD(5) - t7;
t345 = t107 * pkin(4) + qJ(5) * t106 + t385;
t331 = qJD(2) ^ 2;
t344 = 0.2e1 * qJDD(1) * pkin(1) - pkin(8) * t331 + t403;
t343 = pkin(2) * t485 + t239 * pkin(3) + t327 * pkin(8) + pkin(9) * t489 - qJ(4) * t513 + (pkin(1) + t293) * t330;
t342 = t328 * t451 + t573;
t341 = (-t326 * t424 + t438) * t545;
t5 = pkin(4) * t65 - qJ(5) * t66 + t16 - t457;
t338 = t109 * pkin(4) + qJ(5) * t108 + t343;
t337 = -g(1) * t108 - g(2) * (t515 + (t236 * t324 - t445) * t323) - g(3) * t162 + t346;
t335 = -t179 * t114 + t66;
t334 = t5 + t557;
t333 = t369 * t565;
t291 = qJ(4) * t506;
t230 = pkin(3) * t498 - t291;
t202 = (-pkin(4) * t323 + t425) * t322;
t201 = t324 * t437 + t291;
t173 = (-t323 * t537 + t425) * t322;
t172 = pkin(5) * t504 - t200;
t154 = pkin(5) * t506 + t291 + (-qJ(6) + t437) * t324;
t99 = -t232 + t567;
t94 = qJD(2) * t164 - t321 * t433 + t323 * t411;
t89 = t479 - t567;
t83 = pkin(4) * t228 + t373;
t79 = -pkin(5) * t228 - t88;
t75 = t228 * t537 + t373;
t74 = t260 * t498 + pkin(5) * t229 + (qJ(6) * t328 + t323 * t369) * t322 + t479;
t53 = pkin(4) * t162 + t374;
t52 = -pkin(4) * t234 - t61;
t48 = -t110 + t566;
t41 = t162 * t537 + t374;
t40 = -pkin(5) * t162 - t51;
t39 = t483 - t566;
t37 = pkin(4) * t147 + t376;
t30 = pkin(5) * t163 - t234 * t537 - t61;
t23 = pkin(4) * t179 + t347;
t22 = pkin(4) * t114 + t357;
t18 = -pkin(5) * t114 + qJD(6) - t25;
t17 = t114 * t537 + t357;
t15 = -pkin(4) * t171 - t19;
t14 = pkin(5) * t115 + t179 * t537 + t347;
t13 = pkin(4) * t94 + t350;
t11 = -pkin(5) * t94 - t12;
t10 = pkin(5) * t95 - qJD(6) * t234 - t171 * t537 - t19;
t9 = qJD(6) * t162 + t537 * t94 + t350;
t6 = t346 - t552;
t2 = t5 + t569;
t1 = qJD(6) * t179 + t346 + t561;
t21 = [qJDD(1), t403, t404, qJDD(1) * t319 + 0.2e1 * t326 * t427, 0.2e1 * t312 * t326 - 0.2e1 * t453 * t471, qJDD(2) * t326 + t329 * t331, qJDD(2) * t329 - t326 * t331, 0, t326 * t379 + t329 * t344, -t326 * t344 + t329 * t379, t145 * t490 + (t328 * t466 - t433) * t259 (-t257 * t328 - t259 * t325) * t466 + (-t518 - t146 * t328 + (t257 * t325 - t507) * qJD(3)) * t326 (-t328 * t418 - t145) * t329 + ((t259 + t434) * qJD(2) + t342) * t326, t146 * t329 + (-t257 * qJD(2) + t398) * t326 + (-t326 * t372 + t329 * t418) * t325, -t326 * t418 - t329 * t372 -(-qJD(3) * t473 + t477) * t558 + (-pkin(8) * t492 + t256) * t372 - t339 * t329 + t160 * t468 + qJD(2) * t449 + t326 * pkin(8) * t146 + t227 * t493 + g(1) * t237 - g(2) * t239 + (t325 * t466 + t432) * t283, t478 * t558 - t473 * t451 - g(1) * t236 - g(2) * t238 + (t283 * t467 + (t259 * qJD(2) - t573) * pkin(8) + t368) * t329 + (-t325 * t455 + pkin(8) * t145 + t227 * t328 + (-qJD(1) * t473 - t328 * t422 - t161) * qJD(2)) * t326, t114 * t45 + t16 * t162 + t171 * t33 - t179 * t19 + t234 * t7 + t421 * t61 + t63 * t94 + t65 * t84 - t407, t115 * t45 + t16 * t163 - t171 * t34 + t179 * t20 - t234 * t8 - t421 * t62 + t63 * t95 + t66 * t84 - t408, -t114 * t20 - t115 * t19 - t162 * t8 - t163 * t7 - t33 * t95 - t34 * t94 - t61 * t66 - t62 * t65 + t406, -g(1) * t385 - g(2) * t343 + t16 * t84 + t33 * t19 + t34 * t20 + t63 * t45 + t7 * t61 + t8 * t62 - t341, t114 * t12 + t115 * t15 + t162 * t4 + t163 * t6 + t23 * t95 + t25 * t94 + t51 * t65 + t52 * t66 + t406, -t114 * t13 - t15 * t179 - t162 * t5 + t171 * t23 - t22 * t94 + t234 * t6 + t421 * t52 - t53 * t65 + t407, -t115 * t13 + t12 * t179 - t163 * t5 - t171 * t25 - t22 * t95 - t234 * t4 - t421 * t51 - t53 * t66 + t408, -g(1) * t345 - g(2) * t338 + t25 * t12 + t22 * t13 + t23 * t15 + t4 * t51 + t5 * t53 + t6 * t52 - t341, t1 * t163 + t10 * t115 - t11 * t114 + t14 * t95 - t162 * t3 - t18 * t94 + t30 * t66 - t40 * t65 + t406, -t11 * t179 - t115 * t9 - t163 * t2 - t17 * t95 + t171 * t18 + t234 * t3 + t40 * t421 - t41 * t66 + t408, -t1 * t234 + t10 * t179 + t114 * t9 - t14 * t171 + t162 * t2 + t17 * t94 - t30 * t421 + t41 * t65 - t407, t2 * t41 + t17 * t9 + t1 * t30 + t14 * t10 + t3 * t40 + t18 * t11 - g(1) * (-pkin(5) * t175 + qJ(6) * t107 + t345) - g(2) * (pkin(5) * t176 + qJ(6) * t109 + t338) - t341; 0, 0, 0, -t326 * t332 * t329, t471 * t332, t452, t312, qJDD(2), t326 * t365 - t307 - t538, t539 + (-pkin(8) * qJDD(1) + t365) * t329, -t507 * t558 + t518 (t145 + t576) * t328 + (-t146 + t575) * t325, -t398 + t325 * t451 + (t328 * t420 + (-t259 + t469) * t326) * qJD(1) (-t325 * t420 + (t257 + t467) * t326) * qJD(1) + t342, t558 * t470, -pkin(2) * t146 + t474 * t558 + (-t160 * t326 - t449) * qJD(1) + (-pkin(9) * t372 - t283 * t558) * t325 + t570 * t328, -pkin(2) * t145 - t240 * t558 + (t161 * t326 - t259 * t548) * qJD(1) + (-pkin(9) * t451 + t455 + (-t283 * t329 + (t422 - t527) * t326) * qJD(1)) * t328 - t570 * t325, t153 * t65 + t16 * t228 - t216 * t33 + t421 * t99 - t482 * t63 + (-t328 * t7 + t33 * t465) * t322 - t529 * t179 + t525 * t114 + t361, -t100 * t421 + t153 * t66 + t16 * t229 + t216 * t34 - t481 * t63 + (t328 * t8 - t34 * t465) * t322 + t528 * t179 + t525 * t115 - t362, -t100 * t65 - t114 * t528 - t115 * t529 - t228 * t8 - t229 * t7 + t33 * t481 + t34 * t482 - t66 * t99 + t360, -g(1) * t475 - g(2) * t476 - g(3) * t393 + t8 * t100 + t16 * t153 + t33 * t529 + t34 * t528 + t525 * t63 + t7 * t99 + t333, t114 * t531 + t115 * t530 + t228 * t4 + t229 * t6 - t23 * t481 - t25 * t482 + t65 * t88 + t66 * t89 + t360, -t114 * t532 - t179 * t530 + t22 * t482 - t228 * t5 + t23 * t399 + t421 * t89 - t502 * t6 - t65 * t83 - t361, -t115 * t532 + t179 * t531 + t22 * t481 - t229 * t5 - t25 * t399 + t4 * t502 - t421 * t88 - t66 * t83 + t362, -g(1) * t383 - g(2) * t384 - g(3) * t349 + t22 * t532 + t23 * t530 + t25 * t531 + t4 * t88 + t5 * t83 + t6 * t89 + t333, t1 * t229 - t114 * t533 + t115 * t534 - t14 * t481 + t18 * t482 - t228 * t3 - t65 * t79 + t66 * t74 + t360, -t115 * t535 + t17 * t481 - t179 * t533 + t18 * t399 - t2 * t229 - t3 * t502 + t421 * t79 - t66 * t75 + t362, t1 * t502 + t114 * t535 - t14 * t399 - t17 * t482 + t179 * t534 + t2 * t228 - t421 * t74 + t65 * t75 + t361, t2 * t75 + t1 * t74 + t3 * t79 - g(1) * (-pkin(5) * t199 - qJ(6) * t143 + t383) - g(2) * (-pkin(5) * t198 - qJ(6) * t141 + t384) - g(3) * (pkin(5) * t235 + qJ(6) * t165 + t349) + t533 * t18 + t535 * t17 + t534 * t14 + t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t259 * t257, -t257 ^ 2 + t259 ^ 2, t145 - t576, -t146 - t575, t372, -t284 * t463 + t158 - t161 * t558 - t283 * t259 - g(1) * t238 + g(2) * t236 + (-qJD(3) * t244 - t226 + t539) * t325, -t160 * t558 + t283 * t257 - t368 - t405 + t450, -t114 * t73 - t147 * t63 + t179 * t48 + t230 * t421 + t324 * t7 + (-pkin(3) * t65 - t16 * t323 - t259 * t33 + t321 * t462) * t322 + t363, -t115 * t73 - t148 * t63 - t179 * t49 - t231 * t421 - t324 * t8 + (-pkin(3) * t66 + t16 * t321 + t179 * t460 + t259 * t34) * t322 + t364, t114 * t49 + t115 * t48 + t147 * t34 + t148 * t33 - t230 * t66 - t231 * t65 + (-t450 - t321 * t7 + t323 * t8 + (-t114 * t323 + t115 * t321) * qJD(4)) * t322 + t480, t8 * t231 + t7 * t230 - t34 * t49 - t33 * t48 - t63 * t73 - g(1) * t224 + g(2) * t222 - g(3) * t410 + (-t16 * pkin(3) + (-t321 * t33 + t323 * t34) * qJD(4) + t405 * qJ(4)) * t322, -t115 * t39 - t147 * t25 - t148 * t23 + t200 * t65 + t201 * t66 + t522 * t114 + (-t450 - t323 * t4 + (qJD(4) * t115 + t6) * t321) * t322 + t480, t114 * t37 + t147 * t22 + t179 * t39 + t201 * t421 - t202 * t65 + t324 * t6 + (-t23 * t259 + t323 * t5 + (qJD(5) * t114 - t462) * t321) * t322 - t363, t115 * t37 + t148 * t22 - t200 * t421 - t202 * t66 - t324 * t4 + t522 * t179 + (t25 * t259 + (-t5 + t457) * t321) * t322 - t364, t5 * t202 + t4 * t200 + t6 * t201 - g(1) * (qJ(4) * t512 + t400) - g(2) * (qJ(4) * t514 + t401) - g(3) * t353 + t522 * t25 + (-t39 + t431) * t23 + (-t322 * t456 - t37) * t22, -t14 * t148 + t147 * t18 + t154 * t66 - t172 * t65 + t523 * t115 - t521 * t114 + (t1 * t321 + t3 * t323 - t450) * t322 + t480, t148 * t17 + t172 * t421 - t173 * t66 + t3 * t324 + (-t18 * t259 - t2 * t321) * t322 - t521 * t179 - t524 * t115 - t364, -t1 * t324 - t147 * t17 - t154 * t421 + t173 * t65 + (t14 * t259 - t2 * t323) * t322 + t523 * t179 + t524 * t114 + t363, t2 * t173 + t1 * t154 + t3 * t172 - g(1) * (qJ(6) * t134 + t400) - g(2) * (qJ(6) * t132 + t401) - g(3) * (-qJ(6) * t197 + t353) + (-pkin(5) * t450 + t405 * (pkin(5) + qJ(4))) * t322 + t521 * t18 + t524 * t17 + t523 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, t568, t397, t33 * t81 - t34 * t82 + t16 + t557, t397, -t359, -t568, -t23 * t81 + t25 * t82 + t334, t397, -t568, t359, -t14 * t81 - t18 * t82 + t334 + t569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, -t371, t564, t115 * t22 - t179 * t25 + t337 - t552, t335, t564, t371, t115 * t17 + (qJD(6) + t18) * t179 + t337 + t561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115 * t179 - t65, t421 + t519, -t114 ^ 2 - t178, -g(1) * t109 + g(2) * t107 - g(3) * t163 - t17 * t114 - t14 * t179 + t3;];
tau_reg  = t21;
