% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RPRRPR11
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RPRRPR11_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 01:41
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RPRRPR11_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR11_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR11_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RPRRPR11_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR11_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:20
	% EndTime: 2019-10-10 01:41:20
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:20
	% EndTime: 2019-10-10 01:41:20
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:20
	% EndTime: 2019-10-10 01:41:20
	% DurationCPUTime: 0.31s
	% Computational Cost: add. (137->30), mult. (614->95), div. (108->12), fcn. (792->9), ass. (0->49)
	t86 = sin(pkin(6));
	t79 = t86 ^ 2;
	t88 = cos(pkin(6));
	t81 = 0.1e1 / t88 ^ 2;
	t90 = cos(qJ(1));
	t84 = t90 ^ 2;
	t77 = t79 * t81 * t84 + 0.1e1;
	t89 = sin(qJ(1));
	t83 = t89 ^ 2;
	t108 = 0.1e1 / t77 ^ 2 * t83;
	t112 = t108 * t81;
	t103 = t90 * t86;
	t76 = atan2(t103, t88);
	t72 = sin(t76);
	t73 = cos(t76);
	t58 = t72 * t103 + t73 * t88;
	t55 = 0.1e1 / t58;
	t85 = sin(pkin(12));
	t105 = t89 * t85;
	t87 = cos(pkin(12));
	t99 = t88 * t105 - t87 * t90;
	t65 = 0.1e1 / t99;
	t80 = 0.1e1 / t88;
	t56 = 0.1e1 / t58 ^ 2;
	t66 = 0.1e1 / t99 ^ 2;
	t111 = t56 * t89;
	t104 = t89 * t87;
	t70 = t88 * t104 + t85 * t90;
	t110 = t66 * t70;
	t106 = t88 * t90;
	t69 = -t85 * t106 - t104;
	t109 = t69 * t70;
	t107 = t79 * t80;
	t102 = qJD(1) * t90;
	t74 = 0.1e1 / t77;
	t101 = (t74 - 0.1e1) * t86;
	t100 = -0.2e1 * t80 * t112;
	t68 = t87 * t106 - t105;
	t51 = (-t73 * t74 * t90 * t107 + t72 * t101) * t89;
	t78 = t86 * t79;
	t67 = t65 * t66;
	t64 = t70 ^ 2;
	t63 = t69 * qJD(1);
	t62 = t68 * qJD(1);
	t61 = t64 * t66 + 0.1e1;
	t57 = t55 * t56;
	t54 = t56 * t79 * t83 + 0.1e1;
	t50 = qJD(1) * t51;
	t1 = [(-t74 * t80 * t86 + t78 * t100) * t102, 0, 0, 0, 0, 0; (0.2e1 * (t51 * t111 - t55 * t90) / t54 ^ 2 * (-t50 * t57 * t83 + t102 * t111) * t79 + ((0.2e1 * t51 * t57 * t89 - t56 * t90) * t50 + (-t89 * t55 + ((-t51 + (-t78 * t112 - t101) * t89 * t72) * t90 - (t84 * t79 ^ 2 * t100 + (-t108 + (0.2e1 * t83 - t84) * t74) * t107) * t89 * t73) * t56) * qJD(1)) / t54) * t86, 0, 0, 0, 0, 0; 0.2e1 * (t66 * t109 + t65 * t68) / t61 ^ 2 * (t63 * t64 * t67 + t62 * t110) + (-t69 * t62 * t66 + (-0.2e1 * t67 * t109 - t68 * t66) * t63 + (-t99 * t110 + t70 * t65) * qJD(1)) / t61, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:20
	% EndTime: 2019-10-10 01:41:21
	% DurationCPUTime: 0.60s
	% Computational Cost: add. (994->58), mult. (3107->139), div. (132->12), fcn. (4021->13), ass. (0->80)
	t183 = sin(pkin(7));
	t184 = sin(pkin(6));
	t185 = cos(pkin(12));
	t186 = cos(pkin(7));
	t187 = cos(pkin(6));
	t173 = -t184 * t185 * t183 + t187 * t186;
	t191 = cos(qJ(1));
	t211 = t191 * t185;
	t182 = sin(pkin(12));
	t189 = sin(qJ(1));
	t214 = t189 * t182;
	t174 = -t187 * t211 + t214;
	t216 = t184 * t191;
	t204 = -t174 * t183 + t186 * t216;
	t157 = atan2(t204, t173);
	t152 = sin(t157);
	t153 = cos(t157);
	t138 = t152 * t204 + t153 * t173;
	t135 = 0.1e1 / t138;
	t188 = sin(qJ(3));
	t190 = cos(qJ(3));
	t200 = t187 * t214 - t211;
	t212 = t191 * t182;
	t213 = t189 * t185;
	t201 = t187 * t213 + t212;
	t217 = t184 * t189;
	t209 = t183 * t217;
	t202 = -t186 * t201 + t209;
	t151 = t202 * t188 - t190 * t200;
	t145 = 0.1e1 / t151;
	t230 = t204 ^ 2;
	t170 = 0.1e1 / t173;
	t136 = 0.1e1 / t138 ^ 2;
	t146 = 0.1e1 / t151 ^ 2;
	t171 = 0.1e1 / t173 ^ 2;
	t229 = -0.2e1 * t170 * t171;
	t175 = -t187 * t212 - t213;
	t167 = t175 * qJD(1);
	t166 = t174 * qJD(1);
	t210 = qJD(1) * t184;
	t206 = t191 * t210;
	t199 = t166 * t186 + t183 * t206;
	t139 = t151 * qJD(3) + t167 * t188 - t199 * t190;
	t215 = t186 * t190;
	t218 = t200 * t188;
	t150 = -t190 * t209 + t201 * t215 - t218;
	t144 = t150 ^ 2;
	t143 = t144 * t146 + 0.1e1;
	t225 = t146 * t150;
	t140 = t167 * t190 + t199 * t188 + (t202 * t190 + t218) * qJD(3);
	t226 = t140 * t145 * t146;
	t228 = (t139 * t225 - t144 * t226) / t143 ^ 2;
	t168 = t201 * qJD(1);
	t207 = t189 * t210;
	t159 = -t168 * t183 - t186 * t207;
	t156 = t230 * t171 + 0.1e1;
	t154 = 0.1e1 / t156;
	t198 = t152 + (t153 * t170 * t204 - t152) * t154;
	t130 = t198 * t159;
	t227 = t130 * t135 * t136;
	t208 = t183 * t216;
	t203 = t174 * t186 + t208;
	t149 = t175 * t190 + t203 * t188;
	t224 = t149 * t150;
	t223 = t154 * t170;
	t155 = 0.1e1 / t156 ^ 2;
	t222 = t155 * t204;
	t158 = t166 * t183 - t186 * t206;
	t221 = t158 * t136;
	t163 = -t183 * t201 - t186 * t217;
	t220 = t159 * t163;
	t219 = t175 * t188;
	t205 = t183 * t207;
	t169 = t200 * qJD(1);
	t160 = t163 ^ 2;
	t148 = -t203 * t190 + t219;
	t141 = 0.1e1 / t143;
	t134 = t160 * t136 + 0.1e1;
	t131 = t198 * t163;
	t1 = [t220 * t222 * t229 + t158 * t223, 0, 0, 0, 0, 0; 0.2e1 * (-t131 * t136 * t163 - t135 * t204) / t134 ^ 2 * (-t160 * t227 + t163 * t221) + (t159 * t135 + (-t130 * t204 + t131 * t158) * t136 + (-0.2e1 * t131 * t227 + t198 * t221 + (t152 * t171 * t222 + (0.2e1 * t223 + (t230 * t229 - t170) * t155) * t153) * t136 * t220) * t163) / t134, 0, 0, 0, 0, 0; 0.2e1 * (-t145 * t148 + t146 * t224) * t228 + ((-t168 * t215 + t169 * t188 + t190 * t205) * t145 + 0.2e1 * t224 * t226 + (-t148 * t140 - (t169 * t190 + (t168 * t186 - t205) * t188) * t150 - t149 * t139) * t146 + (t149 * t145 - (t174 * t215 + t190 * t208 - t219) * t225) * qJD(3)) * t141, 0, -0.2e1 * t228 + 0.2e1 * (t139 * t146 * t141 + (-t141 * t226 - t146 * t228) * t150) * t150, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:21
	% EndTime: 2019-10-10 01:41:23
	% DurationCPUTime: 1.92s
	% Computational Cost: add. (4837->111), mult. (15324->224), div. (448->12), fcn. (19446->15), ass. (0->108)
	t347 = sin(pkin(12));
	t352 = cos(pkin(6));
	t320 = t352 * t347;
	t350 = cos(pkin(12));
	t353 = sin(qJ(1));
	t355 = cos(qJ(1));
	t276 = t320 * t355 + t350 * t353;
	t287 = sin(qJ(3));
	t348 = sin(pkin(7));
	t349 = sin(pkin(6));
	t318 = t349 * t348;
	t311 = t355 * t318;
	t283 = t287 * t311;
	t322 = t352 * t350;
	t275 = -t322 * t355 + t347 * t353;
	t351 = cos(pkin(7));
	t326 = t275 * t351;
	t354 = cos(qJ(3));
	t362 = -t276 * t354 + t287 * t326 + t283;
	t304 = t354 * t311;
	t324 = t351 * t354;
	t361 = -t275 * t324 - t304;
	t249 = t276 * t287 - t361;
	t317 = t349 * t347;
	t319 = t351 * t349;
	t359 = t350 * t319 + t352 * t348;
	t295 = -t287 * t317 + t359 * t354;
	t246 = atan2(-t249, -t295);
	t241 = sin(t246);
	t242 = cos(t246);
	t222 = -t241 * t249 - t242 * t295;
	t220 = 0.1e1 / t222 ^ 2;
	t277 = -t353 * t320 + t355 * t350;
	t300 = t322 * t353 + t347 * t355;
	t298 = t300 * t351;
	t308 = t353 * t318;
	t303 = t354 * t308;
	t358 = -t277 * t287 - t354 * t298 + t303;
	t248 = t358 ^ 2;
	t218 = t248 * t220 + 0.1e1;
	t255 = t277 * t354 + (-t298 + t308) * t287;
	t272 = t276 * qJD(1);
	t297 = qJD(1) * t326;
	t228 = -qJD(1) * t304 + qJD(3) * t255 - t272 * t287 - t297 * t354;
	t339 = t228 * t220;
	t219 = 0.1e1 / t222;
	t247 = t249 ^ 2;
	t262 = 0.1e1 / t295 ^ 2;
	t245 = t247 * t262 + 0.1e1;
	t243 = 0.1e1 / t245;
	t261 = 0.1e1 / t295;
	t265 = t359 * t287 + t354 * t317;
	t257 = t265 * qJD(3);
	t335 = t257 * t262;
	t273 = t300 * qJD(1);
	t274 = t277 * qJD(1);
	t357 = qJD(1) * t303 + t362 * qJD(3) - t273 * t324 - t274 * t287;
	t314 = t249 * t335 - t261 * t357;
	t213 = t314 * t243;
	t316 = t241 * t295 - t242 * t249;
	t209 = t213 * t316 + t241 * t357 + t242 * t257;
	t360 = t209 * t220;
	t345 = t219 * t360;
	t331 = 0.2e1 * (-t248 * t345 - t339 * t358) / t218 ^ 2;
	t231 = t287 * (qJD(1) * t308 - qJD(3) * t276 - t273 * t351) + t274 * t354 + t361 * qJD(3);
	t309 = t353 * t319;
	t267 = t300 * t348 + t309;
	t286 = sin(qJ(4));
	t288 = cos(qJ(4));
	t240 = t255 * t288 + t267 * t286;
	t234 = 0.1e1 / t240;
	t235 = 0.1e1 / t240 ^ 2;
	t356 = -0.2e1 * t358;
	t229 = qJD(1) * t283 + t358 * qJD(3) - t272 * t354 + t287 * t297;
	t266 = -t275 * t348 + t319 * t355;
	t258 = t266 * qJD(1);
	t223 = qJD(4) * t240 + t229 * t286 - t258 * t288;
	t239 = t255 * t286 - t267 * t288;
	t233 = t239 ^ 2;
	t227 = t233 * t235 + 0.1e1;
	t338 = t235 * t239;
	t332 = qJD(4) * t239;
	t224 = t229 * t288 + t258 * t286 - t332;
	t340 = t224 * t234 * t235;
	t344 = (t223 * t338 - t233 * t340) / t227 ^ 2;
	t334 = t261 * t335;
	t342 = (-t249 * t262 * t357 + t247 * t334) / t245 ^ 2;
	t341 = t220 * t358;
	t337 = t249 * t261;
	t336 = t249 * t265;
	t330 = -0.2e1 * t344;
	t329 = -0.2e1 * t342;
	t328 = t261 * t342;
	t327 = t239 * t340;
	t325 = t345 * t356;
	t238 = t266 * t286 + t288 * t362;
	t237 = -t266 * t288 + t286 * t362;
	t313 = -t286 * t234 + t288 * t338;
	t312 = -t261 * t362 + t262 * t336;
	t306 = -t241 + (-t242 * t337 + t241) * t243;
	t259 = -qJD(1) * t309 - t273 * t348;
	t256 = t295 * qJD(3);
	t225 = 0.1e1 / t227;
	t216 = 0.1e1 / t218;
	t214 = t312 * t243;
	t210 = t214 * t316 + t241 * t362 + t242 * t265;
	t208 = t312 * t329 + (0.2e1 * t334 * t336 + t231 * t261 + (t249 * t256 - t257 * t362 - t265 * t357) * t262) * t243;
	t1 = [-t328 * t356 + (t228 * t261 - t335 * t358) * t243, 0, t208, 0, 0, 0; t249 * t219 * t331 + (t357 * t219 + t249 * t360 + (t306 * t228 - ((t213 * t243 * t337 + t329) * t241 + (0.2e1 * t249 * t328 - t213 + (t213 - t314) * t243) * t242) * t358) * t341) * t216 - (-t341 * t331 + (-t339 + t325) * t216) * t306 * t358, 0, (-t210 * t341 - t219 * t255) * t331 + (t210 * t325 + t229 * t219 + (-t255 * t209 - t210 * t228 - (-(-t208 * t249 + t214 * t357 + t256 + (t214 * t295 + t362) * t213) * t242 - (t208 * t295 - t214 * t257 - t231 + (t214 * t249 - t265) * t213) * t241) * t358) * t220) * t216, 0, 0, 0; 0.2e1 * (-t234 * t237 + t238 * t338) * t344 + ((qJD(4) * t238 - t231 * t286 - t259 * t288) * t234 + 0.2e1 * t238 * t327 + (-t237 * t224 - (-qJD(4) * t237 - t231 * t288 + t259 * t286) * t239 - t238 * t223) * t235) * t225, 0, -t313 * t358 * t330 + (t313 * t228 - ((-qJD(4) * t234 - 0.2e1 * t327) * t288 + (t223 * t288 + (t224 - t332) * t286) * t235) * t358) * t225, t330 + 0.2e1 * (t223 * t235 * t225 + (-t225 * t340 - t235 * t344) * t239) * t239, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:21
	% EndTime: 2019-10-10 01:41:26
	% DurationCPUTime: 4.87s
	% Computational Cost: add. (12717->155), mult. (38126->312), div. (702->12), fcn. (49058->17), ass. (0->144)
	t433 = sin(pkin(12));
	t438 = cos(pkin(6));
	t394 = t438 * t433;
	t436 = cos(pkin(12));
	t439 = sin(qJ(1));
	t441 = cos(qJ(1));
	t337 = -t439 * t394 + t441 * t436;
	t334 = t337 * qJD(1);
	t347 = sin(qJ(3));
	t348 = cos(qJ(3));
	t336 = t441 * t394 + t439 * t436;
	t434 = sin(pkin(7));
	t435 = sin(pkin(6));
	t392 = t435 * t434;
	t381 = t441 * t392;
	t437 = cos(pkin(7));
	t395 = t438 * t436;
	t448 = -t441 * t395 + t439 * t433;
	t449 = t448 * t437;
	t358 = t449 + t381;
	t444 = t336 * t347 + t358 * t348;
	t367 = t439 * t395 + t441 * t433;
	t333 = t367 * qJD(1);
	t378 = t439 * t392;
	t455 = qJD(1) * t378 - t333 * t437;
	t297 = t444 * qJD(3) - t334 * t348 - t455 * t347;
	t346 = sin(qJ(4));
	t393 = t437 * t435;
	t379 = t439 * t393;
	t368 = qJD(1) * t379 + t333 * t434;
	t440 = cos(qJ(4));
	t414 = t336 * t348;
	t317 = t358 * t347 - t414;
	t359 = -t441 * t393 + t434 * t448;
	t463 = -t317 * t346 - t359 * t440;
	t275 = qJD(4) * t463 + t297 * t440 - t368 * t346;
	t306 = t317 * t440 - t359 * t346;
	t465 = t306 * qJD(4) + t297 * t346 + t368 * t440;
	t300 = t463 ^ 2;
	t364 = t436 * t393 + t434 * t438;
	t391 = t435 * t433;
	t328 = t364 * t347 + t348 * t391;
	t335 = -t436 * t392 + t438 * t437;
	t384 = -t328 * t346 + t335 * t440;
	t310 = 0.1e1 / t384 ^ 2;
	t288 = t300 * t310 + 0.1e1;
	t286 = 0.1e1 / t288;
	t313 = t328 * t440 + t335 * t346;
	t327 = -t347 * t391 + t364 * t348;
	t322 = t327 * qJD(3);
	t298 = t313 * qJD(4) + t322 * t346;
	t309 = 0.1e1 / t384;
	t419 = t463 * t310;
	t388 = t298 * t419 - t309 * t465;
	t255 = t388 * t286;
	t289 = atan2(-t463, -t384);
	t284 = sin(t289);
	t285 = cos(t289);
	t390 = t284 * t384 - t285 * t463;
	t250 = t390 * t255 + t284 * t465 + t285 * t298;
	t265 = -t284 * t463 - t285 * t384;
	t263 = 0.1e1 / t265 ^ 2;
	t462 = t250 * t263;
	t459 = -t367 * t437 + t378;
	t262 = 0.1e1 / t265;
	t458 = t262 * t462;
	t319 = t337 * t348 + t459 * t347;
	t357 = t367 * t434 + t379;
	t355 = t357 * t440;
	t307 = t319 * t346 - t355;
	t442 = 0.2e1 * t307;
	t397 = t442 * t458;
	t332 = t336 * qJD(1);
	t411 = qJD(3) * t347;
	t446 = t459 * t348;
	t447 = t358 * qJD(1);
	t293 = t446 * qJD(3) - t332 * t348 - t337 * t411 + t447 * t347;
	t308 = t319 * t440 + t357 * t346;
	t356 = qJD(1) * t359;
	t271 = t308 * qJD(4) + t293 * t346 + t440 * t356;
	t426 = t271 * t263;
	t454 = -t426 + t397;
	t453 = (t347 * t449 - t414) * qJD(3) - t334 * t347 + t455 * t348 + t381 * t411;
	t301 = t307 ^ 2;
	t261 = t263 * t301 + 0.1e1;
	t409 = 0.2e1 * (-t301 * t458 + t307 * t426) / t261 ^ 2;
	t410 = qJD(4) * t346;
	t272 = qJD(4) * t355 + t293 * t440 - t319 * t410 - t346 * t356;
	t292 = t319 * qJD(3) - t332 * t347 - t447 * t348;
	t344 = sin(pkin(13));
	t345 = cos(pkin(13));
	t267 = t272 * t345 + t292 * t344;
	t318 = t337 * t347 - t446;
	t283 = t308 * t345 + t318 * t344;
	t278 = 0.1e1 / t283 ^ 2;
	t452 = t267 * t278;
	t451 = t298 * t310;
	t386 = -t309 * t444 + t327 * t419;
	t450 = t346 * t386;
	t401 = qJD(4) * t440;
	t277 = 0.1e1 / t283;
	t443 = -0.2e1 * t463;
	t266 = t272 * t344 - t292 * t345;
	t282 = t308 * t344 - t318 * t345;
	t276 = t282 ^ 2;
	t270 = t276 * t278 + 0.1e1;
	t425 = t278 * t282;
	t427 = t277 * t452;
	t431 = (t266 * t425 - t276 * t427) / t270 ^ 2;
	t421 = t309 * t451;
	t429 = (t300 * t421 - t419 * t465) / t288 ^ 2;
	t428 = t263 * t307;
	t402 = t318 * t440;
	t291 = t319 * t344 - t345 * t402;
	t424 = t278 * t291;
	t423 = t284 * t307;
	t422 = t285 * t307;
	t420 = t463 * t309;
	t417 = t318 * t346;
	t413 = t344 * t277;
	t412 = t345 * t282;
	t408 = 0.2e1 * t431;
	t407 = -0.2e1 * t429;
	t405 = t309 * t429;
	t404 = t282 * t427;
	t399 = 0.2e1 * t404;
	t398 = t421 * t443;
	t387 = -t306 * t309 + t313 * t419;
	t377 = -t440 * t292 + t318 * t410;
	t376 = -t284 + (-t285 * t420 + t284) * t286;
	t323 = t328 * qJD(3);
	t299 = t384 * qJD(4) + t322 * t440;
	t290 = -t319 * t345 - t344 * t402;
	t281 = t306 * t345 - t344 * t444;
	t280 = t306 * t344 + t345 * t444;
	t268 = 0.1e1 / t270;
	t259 = 0.1e1 / t261;
	t258 = t286 * t450;
	t256 = t387 * t286;
	t252 = (t284 * t444 + t285 * t327) * t346 + t390 * t258;
	t251 = t390 * t256 + t284 * t306 + t285 * t313;
	t248 = t387 * t407 + (-t313 * t398 - t275 * t309 + (-t298 * t306 + t299 * t463 - t313 * t465) * t310) * t286;
	t247 = t407 * t450 + ((-t327 * t398 + t453 * t309 + (-t298 * t444 - t323 * t463 - t327 * t465) * t310) * t346 + t386 * t401) * t286;
	t1 = [-t405 * t442 + (t271 * t309 + t307 * t451) * t286, 0, t247, t248, 0, 0; t463 * t262 * t409 + (t465 * t262 + t463 * t462 - (t376 * t271 + ((t255 * t286 * t420 + t407) * t284 + (-t405 * t443 - t255 + (t255 - t388) * t286) * t285) * t307) * t428) * t259 + (t454 * t259 + t428 * t409) * t376 * t307, 0, (t252 * t428 + t262 * t417) * t409 + ((-t292 * t346 - t318 * t401) * t262 + t454 * t252 + (t417 * t250 - (t327 * t401 - t247 * t463 + t258 * t465 - t323 * t346 + (t258 * t384 + t346 * t444) * t255) * t422 - (t444 * t401 + t247 * t384 - t258 * t298 - t453 * t346 + (t258 * t463 - t327 * t346) * t255) * t423) * t263) * t259, (t251 * t428 - t262 * t308) * t409 + (t251 * t397 + t272 * t262 + (-t308 * t250 - t251 * t271 - (-t248 * t463 + t256 * t465 + t299 + (t256 * t384 + t306) * t255) * t422 - (t248 * t384 - t256 * t298 + t275 + (t256 * t463 - t313) * t255) * t423) * t263) * t259, 0, 0; (-t277 * t280 + t281 * t425) * t408 + ((t275 * t344 - t345 * t453) * t277 + t281 * t399 + (-t280 * t267 - (t275 * t345 + t344 * t453) * t282 - t281 * t266) * t278) * t268, 0, -0.2e1 * t290 * t277 * t431 + t282 * t408 * t424 + ((-t293 * t345 + t377 * t344) * t277 - t290 * t452 - (t293 * t344 + t377 * t345) * t425 - t266 * t424 + t291 * t399) * t268, (-t278 * t412 + t413) * t307 * t408 + (-0.2e1 * t307 * t345 * t404 - t271 * t413 + (t271 * t412 + (t266 * t345 + t267 * t344) * t307) * t278) * t268, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:41:22
	% EndTime: 2019-10-10 01:41:27
	% DurationCPUTime: 5.34s
	% Computational Cost: add. (14207->166), mult. (41237->320), div. (726->12), fcn. (53008->17), ass. (0->146)
	t496 = sin(pkin(12));
	t501 = cos(pkin(6));
	t456 = t501 * t496;
	t499 = cos(pkin(12));
	t502 = sin(qJ(1));
	t504 = cos(qJ(1));
	t396 = -t456 * t502 + t499 * t504;
	t393 = t396 * qJD(1);
	t407 = sin(qJ(3));
	t408 = cos(qJ(3));
	t395 = t456 * t504 + t499 * t502;
	t497 = sin(pkin(7));
	t498 = sin(pkin(6));
	t454 = t498 * t497;
	t441 = t504 * t454;
	t500 = cos(pkin(7));
	t457 = t501 * t499;
	t511 = -t457 * t504 + t496 * t502;
	t512 = t511 * t500;
	t418 = t512 + t441;
	t507 = t395 * t407 + t408 * t418;
	t427 = t457 * t502 + t496 * t504;
	t392 = t427 * qJD(1);
	t438 = t502 * t454;
	t517 = qJD(1) * t438 - t392 * t500;
	t355 = qJD(3) * t507 - t393 * t408 - t407 * t517;
	t406 = sin(qJ(4));
	t455 = t500 * t498;
	t439 = t502 * t455;
	t428 = qJD(1) * t439 + t392 * t497;
	t503 = cos(qJ(4));
	t477 = t395 * t408;
	t376 = t407 * t418 - t477;
	t419 = -t455 * t504 + t497 * t511;
	t526 = -t376 * t406 - t419 * t503;
	t333 = qJD(4) * t526 + t355 * t503 - t428 * t406;
	t364 = t376 * t503 - t419 * t406;
	t528 = qJD(4) * t364 + t355 * t406 + t428 * t503;
	t358 = t526 ^ 2;
	t424 = t455 * t499 + t497 * t501;
	t453 = t498 * t496;
	t387 = t407 * t424 + t408 * t453;
	t394 = -t454 * t499 + t500 * t501;
	t444 = -t387 * t406 + t394 * t503;
	t369 = 0.1e1 / t444 ^ 2;
	t346 = t358 * t369 + 0.1e1;
	t344 = 0.1e1 / t346;
	t372 = t387 * t503 + t394 * t406;
	t386 = -t407 * t453 + t408 * t424;
	t381 = t386 * qJD(3);
	t356 = qJD(4) * t372 + t381 * t406;
	t368 = 0.1e1 / t444;
	t482 = t526 * t369;
	t449 = t356 * t482 - t368 * t528;
	t313 = t449 * t344;
	t347 = atan2(-t526, -t444);
	t342 = sin(t347);
	t343 = cos(t347);
	t452 = t342 * t444 - t343 * t526;
	t308 = t313 * t452 + t342 * t528 + t343 * t356;
	t325 = -t342 * t526 - t343 * t444;
	t323 = 0.1e1 / t325 ^ 2;
	t525 = t308 * t323;
	t522 = -t427 * t500 + t438;
	t378 = t396 * t408 + t407 * t522;
	t417 = t427 * t497 + t439;
	t366 = t378 * t503 + t406 * t417;
	t509 = t522 * t408;
	t377 = t396 * t407 - t509;
	t405 = pkin(13) + qJ(6);
	t403 = sin(t405);
	t404 = cos(t405);
	t340 = t366 * t403 - t377 * t404;
	t521 = 0.2e1 * t340;
	t322 = 0.1e1 / t325;
	t520 = t322 * t525;
	t391 = t395 * qJD(1);
	t476 = qJD(3) * t407;
	t510 = t418 * qJD(1);
	t351 = qJD(3) * t509 - t391 * t408 - t396 * t476 + t407 * t510;
	t416 = qJD(1) * t419;
	t329 = qJD(4) * t366 + t351 * t406 + t416 * t503;
	t415 = t417 * t503;
	t365 = t378 * t406 - t415;
	t505 = 0.2e1 * t365;
	t461 = t505 * t520;
	t516 = -t323 * t329 + t461;
	t515 = (t407 * t512 - t477) * qJD(3) - t393 * t407 + t517 * t408 + t441 * t476;
	t359 = t365 ^ 2;
	t321 = t323 * t359 + 0.1e1;
	t489 = t323 * t365;
	t473 = 0.2e1 * (t329 * t489 - t359 * t520) / t321 ^ 2;
	t514 = t356 * t369;
	t446 = -t368 * t507 + t386 * t482;
	t513 = t406 * t446;
	t463 = qJD(4) * t503;
	t341 = t366 * t404 + t377 * t403;
	t335 = 0.1e1 / t341;
	t336 = 0.1e1 / t341 ^ 2;
	t506 = -0.2e1 * t526;
	t475 = qJD(4) * t406;
	t330 = qJD(4) * t415 + t351 * t503 - t378 * t475 - t406 * t416;
	t350 = t378 * qJD(3) - t391 * t407 - t408 * t510;
	t317 = qJD(6) * t341 + t330 * t403 - t350 * t404;
	t334 = t340 ^ 2;
	t328 = t334 * t336 + 0.1e1;
	t487 = t336 * t340;
	t474 = qJD(6) * t340;
	t318 = t330 * t404 + t350 * t403 - t474;
	t491 = t318 * t335 * t336;
	t494 = (t317 * t487 - t334 * t491) / t328 ^ 2;
	t484 = t368 * t514;
	t492 = (t358 * t484 - t482 * t528) / t346 ^ 2;
	t326 = 0.1e1 / t328;
	t488 = t326 * t336;
	t486 = t342 * t365;
	t485 = t343 * t365;
	t483 = t526 * t368;
	t480 = t377 * t406;
	t472 = -0.2e1 * t494;
	t471 = -0.2e1 * t492;
	t469 = t336 * t494;
	t468 = t368 * t492;
	t467 = t317 * t488;
	t466 = t340 * t491;
	t464 = t377 * t503;
	t460 = 0.2e1 * t466;
	t459 = t484 * t506;
	t339 = t364 * t404 - t403 * t507;
	t338 = t364 * t403 + t404 * t507;
	t450 = qJD(6) * t464 + t351;
	t448 = -t335 * t403 + t404 * t487;
	t447 = -t364 * t368 + t372 * t482;
	t437 = -t342 + (-t343 * t483 + t342) * t344;
	t431 = qJD(6) * t378 - t350 * t503 + t377 * t475;
	t382 = t387 * qJD(3);
	t357 = qJD(4) * t444 + t381 * t503;
	t349 = t378 * t403 - t404 * t464;
	t319 = 0.1e1 / t321;
	t316 = t344 * t513;
	t314 = t447 * t344;
	t310 = (t342 * t507 + t343 * t386) * t406 + t452 * t316;
	t309 = t314 * t452 + t342 * t364 + t343 * t372;
	t306 = t447 * t471 + (-t372 * t459 - t333 * t368 + (-t356 * t364 + t357 * t526 - t372 * t528) * t369) * t344;
	t305 = t471 * t513 + ((-t386 * t459 + t515 * t368 + (-t356 * t507 - t382 * t526 - t386 * t528) * t369) * t406 + t446 * t463) * t344;
	t1 = [-t468 * t505 + (t329 * t368 + t365 * t514) * t344, 0, t305, t306, 0, 0; t526 * t322 * t473 + (t528 * t322 + t526 * t525 - (t437 * t329 + ((t313 * t344 * t483 + t471) * t342 + (-t468 * t506 - t313 + (t313 - t449) * t344) * t343) * t365) * t489) * t319 + (t319 * t516 + t489 * t473) * t437 * t365, 0, (t310 * t489 + t322 * t480) * t473 + ((-t350 * t406 - t377 * t463) * t322 + t516 * t310 + (t480 * t308 - (t386 * t463 - t305 * t526 + t316 * t528 - t382 * t406 + (t316 * t444 + t406 * t507) * t313) * t485 - (t507 * t463 + t305 * t444 - t316 * t356 - t515 * t406 + (t316 * t526 - t386 * t406) * t313) * t486) * t323) * t319, (t309 * t489 - t322 * t366) * t473 + (t309 * t461 + t330 * t322 + (-t366 * t308 - t309 * t329 - (-t306 * t526 + t314 * t528 + t357 + (t314 * t444 + t364) * t313) * t485 - (t306 * t444 - t314 * t356 + t333 + (t314 * t526 - t372) * t313) * t486) * t323) * t319, 0, 0; 0.2e1 * (-t335 * t338 + t339 * t487) * t494 + ((qJD(6) * t339 + t333 * t403 - t404 * t515) * t335 + t339 * t460 + (-t338 * t318 - (-qJD(6) * t338 + t333 * t404 + t403 * t515) * t340 - t339 * t317) * t336) * t326, 0, (t469 * t521 - t467) * t349 + (-t318 * t488 + t335 * t472) * (-t378 * t404 - t403 * t464) + ((t403 * t431 - t404 * t450) * t335 - (t403 * t450 + t404 * t431) * t487 + t349 * t460) * t326, t448 * t365 * t472 + (t448 * t329 + ((-qJD(6) * t335 - 0.2e1 * t466) * t404 + (t317 * t404 + (t318 - t474) * t403) * t336) * t365) * t326, 0, t472 + (t467 + (-t326 * t491 - t469) * t340) * t521;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end