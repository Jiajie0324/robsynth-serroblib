% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 00:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR11_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR11_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR11_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 00:21:48
% EndTime: 2019-05-06 00:22:15
% DurationCPUTime: 28.86s
% Computational Cost: add. (324527->431), mult. (1018474->694), div. (0->0), fcn. (880621->16), ass. (0->373)
t2998 = sin(pkin(12));
t3000 = sin(pkin(6));
t3007 = sin(qJ(3));
t3011 = cos(qJ(3));
t2999 = sin(pkin(7));
t3004 = cos(pkin(6));
t3095 = t2999 * t3004;
t3082 = t3007 * t3095;
t3002 = cos(pkin(12));
t3003 = cos(pkin(7));
t3092 = t3002 * t3003;
t2957 = (t3082 + (t2998 * t3011 + t3007 * t3092) * t3000) * qJD(1);
t3031 = t3000 * t3092 + t3095;
t3026 = t3031 * qJDD(1);
t3088 = qJDD(1) * t3000;
t3077 = t3007 * t3088;
t3021 = t2957 * qJD(3) + t2998 * t3077 - t3011 * t3026;
t3019 = qJDD(4) + t3021;
t3027 = t3031 * pkin(9);
t3096 = t2998 * t3000;
t3083 = t2999 * t3096;
t3094 = t3000 * t3002;
t3017 = -(-pkin(2) * t3094 - pkin(9) * t3083) * t3096 + t3004 * t3027;
t3008 = sin(qJ(1));
t3012 = cos(qJ(1));
t2989 = t3008 * g(1) - t3012 * g(2);
t3013 = qJD(1) ^ 2;
t3093 = t3000 * t3013;
t3029 = -qJ(2) * t3093 - t2989;
t3024 = qJDD(1) * pkin(1) - t3029;
t3022 = t3004 * t3024;
t3018 = (-t3000 * g(3) + t3022) * t3002;
t2990 = -t3012 * g(1) - t3008 * g(2);
t3030 = t3013 * pkin(1) - t2990;
t3032 = -pkin(9) * t2998 * t2999 - pkin(2) * t3002;
t3076 = -t3004 * g(3) + qJDD(2);
t3087 = qJDD(1) * t3004;
t3085 = pkin(2) * t3087;
t3107 = pkin(9) * t3003;
t3108 = pkin(2) * t3004;
t3110 = -2 * qJD(2);
t2993 = t2998 ^ 2;
t2995 = t3002 ^ 2;
t3121 = -t2993 - t2995;
t3125 = t3003 * (t3085 + t3018 + ((-qJ(2) - t3107) * t3088 + t3030) * t2998 + (qJD(1) * t3017 + t3096 * t3110) * qJD(1)) + t2999 * (((-pkin(1) + t3032) * qJDD(1) + t3029) * t3000 + (t2998 * t3108 + (t3000 * t3003 * t3121 - t3002 * t3095) * pkin(9)) * t3093 + t3076);
t3124 = 2 * qJD(2);
t3084 = qJD(1) * t3094;
t2966 = qJD(1) * t3003 * t3004 - t2999 * t3084 + qJD(3);
t3006 = sin(qJ(4));
t3010 = cos(qJ(4));
t2944 = t2957 * t3006 - t3010 * t2966;
t2941 = qJD(6) + t2944;
t3122 = qJD(6) + t2941;
t2946 = t2957 * t3010 + t2966 * t3006;
t2955 = (t3007 * t3096 - t3011 * t3031) * qJD(1);
t2954 = qJD(4) + t2955;
t2997 = sin(pkin(13));
t3001 = cos(pkin(13));
t2922 = t2946 * t2997 - t3001 * t2954;
t2924 = t2946 * t3001 + t2954 * t2997;
t3005 = sin(qJ(6));
t3009 = cos(qJ(6));
t2889 = t3009 * t2922 + t2924 * t3005;
t3120 = t2889 ^ 2;
t2891 = -t2922 * t3005 + t2924 * t3009;
t3119 = t2891 ^ 2;
t3118 = t2922 ^ 2;
t3117 = t2924 ^ 2;
t3116 = t2941 ^ 2;
t2915 = t2944 ^ 2;
t3115 = t2946 ^ 2;
t3114 = t2954 ^ 2;
t3113 = t2955 ^ 2;
t3112 = t2957 ^ 2;
t3111 = t2966 ^ 2;
t2996 = t3004 ^ 2;
t3109 = -2 * qJD(5);
t3105 = t2889 * t2891;
t3104 = t2922 * t2924;
t3103 = t2924 * t2944;
t3102 = t2944 * t2922;
t3101 = t2946 * t2944;
t3100 = t2955 * t2957;
t3099 = t2955 * t2966;
t3098 = t2966 * t2957;
t2994 = t3000 ^ 2;
t3097 = t2994 * t3013;
t3091 = qJD(4) - t2954;
t3090 = qJD(6) - t2941;
t3023 = qJ(2) * t3088 - t3030;
t2943 = -g(3) * t3096 + t2998 * t3022 + t3002 * t3023 + t3084 * t3124;
t3086 = t2998 * t3107;
t2908 = pkin(9) * t3026 + (-pkin(2) * t2996 + (t3004 * t3086 + t3032 * t3094) * t3000) * t3013 + t2943;
t2862 = t3011 * t2908 + t3007 * t3125;
t2933 = pkin(3) * t2955 - pkin(10) * t2957;
t3078 = t3002 * t3088;
t2965 = -t2999 * t3078 + t3003 * t3087 + qJDD(3);
t2849 = -pkin(3) * t3111 + pkin(10) * t2965 - t2933 * t2955 + t2862;
t2958 = -t3000 * t3024 + t3076;
t2886 = -t2999 * (-g(3) * t3094 - t2998 * t3023 + t3002 * t3022 + t3085) + t3003 * (-pkin(2) * t3078 + t2958) + (t3083 * t3124 + (-t2999 * t3017 + t3003 * ((-t3000 * t3086 + t3108) * t3096 - t3027 * t3094)) * qJD(1)) * qJD(1);
t2911 = t3021 + t3098;
t3079 = t2998 * t3088;
t2936 = -t2955 * qJD(3) + qJDD(1) * t3082 + t3011 * t3079 + t3077 * t3092;
t3072 = -t2936 + t3099;
t3014 = pkin(3) * t2911 + pkin(10) * t3072 + t2886;
t2812 = t3010 * t2849 + t3006 * t3014;
t3080 = t3004 * t3093;
t2910 = pkin(4) * t2944 - qJ(5) * t2946;
t2799 = -pkin(4) * t3114 + qJ(5) * t3019 - t2944 * t2910 + t2812;
t3070 = t3007 * t2908 - t3011 * t3125;
t2848 = -t2965 * pkin(3) - t3111 * pkin(10) + t2957 * t2933 + t3070;
t3071 = t3006 * t2936 - t3010 * t2965;
t2901 = qJD(4) * t2946 + t3071;
t3037 = -t3010 * t2936 - t3006 * t2965;
t2902 = -qJD(4) * t2944 - t3037;
t3073 = t2954 * t2944 - t2902;
t2810 = t3073 * qJ(5) + (t2946 * t2954 + t2901) * pkin(4) + t2848;
t2780 = t3001 * t2799 + t2997 * t2810 + t2922 * t3109;
t2811 = -t3006 * t2849 + t3010 * t3014;
t2887 = t3001 * t2902 + t2997 * t3019;
t3074 = t2902 * t2997 - t3001 * t3019;
t3075 = -t3005 * t2887 - t3009 * t3074;
t2860 = -t2887 - t3102;
t2865 = t2901 - t3104;
t2779 = -t2997 * t2799 + t3001 * t2810 + t2924 * t3109;
t2758 = pkin(5) * t2865 + pkin(11) * t2860 + t2779;
t2897 = pkin(5) * t2944 - pkin(11) * t2924;
t2765 = -pkin(5) * t3118 - pkin(11) * t3074 - t2944 * t2897 + t2780;
t2741 = t2758 * t3009 - t2765 * t3005;
t2742 = t2758 * t3005 + t2765 * t3009;
t2723 = t2741 * t3009 + t2742 * t3005;
t2724 = -t2741 * t3005 + t2742 * t3009;
t2712 = -t2723 * t2997 + t2724 * t3001;
t2798 = -t3019 * pkin(4) - t3114 * qJ(5) + t2946 * t2910 + qJDD(5) - t2811;
t2789 = pkin(5) * t3074 - pkin(11) * t3118 + t2924 * t2897 + t2798;
t2709 = t2712 * t3006 - t2789 * t3010;
t2710 = t2712 * t3010 + t2789 * t3006;
t2711 = t2723 * t3001 + t2724 * t2997;
t3068 = t2710 * t3007 - t2711 * t3011;
t2702 = -t2999 * t2709 + t3003 * t3068;
t2703 = t2710 * t3011 + t2711 * t3007;
t3069 = t2702 * t3002 + t2703 * t2998;
t2748 = -t2779 * t2997 + t2780 * t3001;
t2743 = t2748 * t3006 - t2798 * t3010;
t2744 = t2748 * t3010 + t2798 * t3006;
t2747 = t2779 * t3001 + t2780 * t2997;
t3063 = t2744 * t3007 - t2747 * t3011;
t2719 = -t2999 * t2743 + t3003 * t3063;
t2728 = t2744 * t3011 + t2747 * t3007;
t3067 = t2719 * t3002 + t2728 * t2998;
t2822 = -t2891 * t3090 + t3075;
t3025 = -t3009 * t2887 + t3005 * t3074;
t2824 = t2889 * t3090 + t3025;
t2785 = t2822 * t3005 + t2824 * t3009;
t2786 = t2822 * t3009 - t2824 * t3005;
t2757 = -t2785 * t2997 + t2786 * t3001;
t2839 = -t3119 - t3120;
t2752 = t2757 * t3006 - t2839 * t3010;
t2753 = t2757 * t3010 + t2839 * t3006;
t2756 = t2785 * t3001 + t2786 * t2997;
t3061 = t2753 * t3007 - t2756 * t3011;
t2722 = -t2999 * t2752 + t3003 * t3061;
t2731 = t2753 * t3011 + t2756 * t3007;
t3066 = t2722 * t3002 + t2731 * t2998;
t3028 = -qJDD(6) - t2901;
t2845 = -t3028 - t3105;
t2855 = -t3116 - t3120;
t2804 = t2845 * t3009 + t2855 * t3005;
t2805 = -t2845 * t3005 + t2855 * t3009;
t2782 = -t2804 * t2997 + t2805 * t3001;
t2821 = t2891 * t3122 - t3075;
t2761 = t2782 * t3006 - t2821 * t3010;
t2762 = t2782 * t3010 + t2821 * t3006;
t2781 = t2804 * t3001 + t2805 * t2997;
t3060 = t2762 * t3007 - t2781 * t3011;
t2730 = -t2999 * t2761 + t3003 * t3060;
t2745 = t2762 * t3011 + t2781 * t3007;
t3065 = t2730 * t3002 + t2745 * t2998;
t2846 = t3028 - t3105;
t2869 = -t3116 - t3119;
t2827 = t2846 * t3005 + t2869 * t3009;
t2828 = t2846 * t3009 - t2869 * t3005;
t2791 = -t2827 * t2997 + t2828 * t3001;
t2823 = -t2889 * t3122 - t3025;
t2766 = t2791 * t3006 - t2823 * t3010;
t2767 = t2791 * t3010 + t2823 * t3006;
t2790 = t2827 * t3001 + t2828 * t2997;
t3058 = t2767 * t3007 - t2790 * t3011;
t2735 = -t2999 * t2766 + t3003 * t3058;
t2749 = t2767 * t3011 + t2790 * t3007;
t3064 = t2735 * t3002 + t2749 * t2998;
t2783 = t2811 * t3010 + t2812 * t3006;
t2784 = -t2811 * t3006 + t2812 * t3010;
t3055 = t2784 * t3007 - t2848 * t3011;
t2751 = -t2999 * t2783 + t3003 * t3055;
t2776 = t2784 * t3011 + t2848 * t3007;
t3062 = t2751 * t3002 + t2776 * t2998;
t2858 = -t3074 + t3103;
t2832 = t2858 * t3001 - t2860 * t2997;
t2874 = -t3117 - t3118;
t2802 = t2832 * t3006 - t2874 * t3010;
t2803 = t2832 * t3010 + t2874 * t3006;
t2831 = t2858 * t2997 + t2860 * t3001;
t3053 = t2803 * t3007 - t2831 * t3011;
t2764 = -t2999 * t2802 + t3003 * t3053;
t2788 = t2803 * t3011 + t2831 * t3007;
t3059 = t2764 * t3002 + t2788 * t2998;
t2878 = -t2915 - t3118;
t2838 = -t2865 * t2997 + t2878 * t3001;
t2857 = t3074 + t3103;
t2806 = t2838 * t3006 - t2857 * t3010;
t2807 = t2838 * t3010 + t2857 * t3006;
t2837 = t2865 * t3001 + t2878 * t2997;
t3052 = t2807 * t3007 - t2837 * t3011;
t2771 = -t2999 * t2806 + t3003 * t3052;
t2793 = t2807 * t3011 + t2837 * t3007;
t3057 = t2771 * t3002 + t2793 * t2998;
t2866 = -t2901 - t3104;
t2888 = -t2915 - t3117;
t2843 = t2866 * t3001 - t2888 * t2997;
t2859 = t2887 - t3102;
t2815 = t2843 * t3006 - t2859 * t3010;
t2816 = t2843 * t3010 + t2859 * t3006;
t2842 = t2866 * t2997 + t2888 * t3001;
t3050 = t2816 * t3007 - t2842 * t3011;
t2773 = -t2999 * t2815 + t3003 * t3050;
t2794 = t2816 * t3011 + t2842 * t3007;
t3056 = t2773 * t3002 + t2794 * t2998;
t2880 = -t2946 * t3091 - t3071;
t2882 = t2944 * t3091 + t3037;
t2850 = t2880 * t3006 + t2882 * t3010;
t2851 = t2880 * t3010 - t2882 * t3006;
t2895 = -t3115 - t2915;
t3047 = t2851 * t3007 - t2895 * t3011;
t2801 = -t2999 * t2850 + t3003 * t3047;
t2836 = t2851 * t3011 + t2895 * t3007;
t3054 = t2801 * t3002 + t2836 * t2998;
t3046 = t2862 * t3007 - t3011 * t3070;
t2814 = -t2999 * t2886 + t3003 * t3046;
t2835 = t2862 * t3011 + t3007 * t3070;
t3051 = t2814 * t3002 + t2835 * t2998;
t2892 = t3019 - t3101;
t2903 = -t2915 - t3114;
t2867 = t2892 * t3010 + t2903 * t3006;
t2868 = -t2892 * t3006 + t2903 * t3010;
t2879 = (qJD(4) + t2954) * t2946 + t3071;
t3044 = t2868 * t3007 - t2879 * t3011;
t2820 = -t2999 * t2867 + t3003 * t3044;
t2841 = t2868 * t3011 + t2879 * t3007;
t3049 = t2820 * t3002 + t2841 * t2998;
t2893 = -t3101 - t3019;
t2907 = -t3114 - t3115;
t2870 = t2893 * t3006 + t2907 * t3010;
t2871 = t2893 * t3010 - t2907 * t3006;
t3043 = t2871 * t3007 + t3011 * t3073;
t2826 = -t2999 * t2870 + t3003 * t3043;
t2844 = t2871 * t3011 - t3007 * t3073;
t3048 = t2826 * t3002 + t2844 * t2998;
t2925 = -t3112 - t3113;
t2912 = -t3021 + t3098;
t2914 = -t2936 - t3099;
t3040 = t2912 * t3007 + t2914 * t3011;
t2864 = -t2999 * t2925 + t3003 * t3040;
t2883 = t2912 * t3011 - t2914 * t3007;
t3045 = t2864 * t3002 + t2883 * t2998;
t2927 = -t3111 - t3113;
t2929 = t2965 - t3100;
t3039 = t2927 * t3007 + t2929 * t3011;
t2873 = -t2999 * t2911 + t3003 * t3039;
t2894 = t2927 * t3011 - t2929 * t3007;
t3042 = t2873 * t3002 + t2894 * t2998;
t2928 = -t2965 - t3100;
t2930 = -t3111 - t3112;
t3038 = t2928 * t3007 + t2930 * t3011;
t2876 = t2999 * t3072 + t3003 * t3038;
t2896 = t2928 * t3011 - t2930 * t3007;
t3041 = t2876 * t3002 + t2896 * t2998;
t2942 = t3018 + ((-qJ(2) * qJDD(1) + qJD(1) * t3110) * t3000 + t3030) * t2998;
t3036 = t2942 * t3002 + t2943 * t2998;
t2981 = t3002 * t3080;
t2968 = t2981 - t3079;
t2980 = t2998 * t3080;
t2969 = t2980 + t3078;
t3035 = t2968 * t3002 + t2969 * t2998;
t2979 = t3002 * t2998 * t3097;
t2971 = t2979 + t3087;
t2975 = (-t2994 * t2995 - t2996) * t3013;
t3034 = t2971 * t3002 + t2975 * t2998;
t2972 = t2979 - t3087;
t2974 = (-t2993 * t2994 - t2996) * t3013;
t3033 = t2972 * t2998 + t2974 * t3002;
t2987 = -qJDD(1) * t3008 - t3012 * t3013;
t2986 = qJDD(1) * t3012 - t3008 * t3013;
t2973 = t3121 * t3097;
t2970 = t2980 - t3078;
t2967 = t2981 + t3079;
t2951 = t2972 * t3002 - t2974 * t2998;
t2950 = -t2971 * t2998 + t2975 * t3002;
t2947 = -t2968 * t2998 + t2969 * t3002;
t2940 = -t3000 * t2967 + t3004 * t3033;
t2939 = -t3000 * t2970 + t3004 * t3034;
t2938 = t3004 * t2967 + t3000 * t3033;
t2937 = t3004 * t2970 + t3000 * t3034;
t2935 = -t3000 * t2973 + t3004 * t3035;
t2934 = t3004 * t2973 + t3000 * t3035;
t2909 = -t2942 * t2998 + t2943 * t3002;
t2899 = -t3000 * t2958 + t3004 * t3036;
t2898 = t3004 * t2958 + t3000 * t3036;
t2875 = t2999 * t3038 - t3003 * t3072;
t2872 = t3003 * t2911 + t2999 * t3039;
t2863 = t3003 * t2925 + t2999 * t3040;
t2856 = -t2876 * t2998 + t2896 * t3002;
t2852 = -t2873 * t2998 + t2894 * t3002;
t2840 = -t2864 * t2998 + t2883 * t3002;
t2834 = -t3000 * t2875 + t3004 * t3041;
t2833 = t3004 * t2875 + t3000 * t3041;
t2830 = -t3000 * t2872 + t3004 * t3042;
t2829 = t3004 * t2872 + t3000 * t3042;
t2825 = t3003 * t2870 + t2999 * t3043;
t2819 = t3003 * t2867 + t2999 * t3044;
t2818 = -t3000 * t2863 + t3004 * t3045;
t2817 = t3004 * t2863 + t3000 * t3045;
t2813 = t3003 * t2886 + t2999 * t3046;
t2800 = t3003 * t2850 + t2999 * t3047;
t2796 = -t2826 * t2998 + t2844 * t3002;
t2795 = -t2820 * t2998 + t2841 * t3002;
t2792 = -t2814 * t2998 + t2835 * t3002;
t2787 = -t2801 * t2998 + t2836 * t3002;
t2778 = -t3000 * t2825 + t3004 * t3048;
t2777 = t3004 * t2825 + t3000 * t3048;
t2775 = -t3000 * t2819 + t3004 * t3049;
t2774 = t3004 * t2819 + t3000 * t3049;
t2772 = t3003 * t2815 + t2999 * t3050;
t2770 = t3003 * t2806 + t2999 * t3052;
t2769 = -t3000 * t2813 + t3004 * t3051;
t2768 = t3004 * t2813 + t3000 * t3051;
t2763 = t3003 * t2802 + t2999 * t3053;
t2760 = -t3000 * t2800 + t3004 * t3054;
t2759 = t3004 * t2800 + t3000 * t3054;
t2755 = -t2773 * t2998 + t2794 * t3002;
t2754 = -t2771 * t2998 + t2793 * t3002;
t2750 = t3003 * t2783 + t2999 * t3055;
t2746 = -t2764 * t2998 + t2788 * t3002;
t2740 = -t3000 * t2772 + t3004 * t3056;
t2739 = t3004 * t2772 + t3000 * t3056;
t2738 = -t3000 * t2770 + t3004 * t3057;
t2737 = t3004 * t2770 + t3000 * t3057;
t2736 = -t2751 * t2998 + t2776 * t3002;
t2734 = t3003 * t2766 + t2999 * t3058;
t2733 = -t3000 * t2763 + t3004 * t3059;
t2732 = t3004 * t2763 + t3000 * t3059;
t2729 = t3003 * t2761 + t2999 * t3060;
t2727 = -t3000 * t2750 + t3004 * t3062;
t2726 = t3004 * t2750 + t3000 * t3062;
t2725 = -t2735 * t2998 + t2749 * t3002;
t2721 = t3003 * t2752 + t2999 * t3061;
t2720 = -t2730 * t2998 + t2745 * t3002;
t2718 = t3003 * t2743 + t2999 * t3063;
t2717 = -t3000 * t2734 + t3004 * t3064;
t2716 = t3004 * t2734 + t3000 * t3064;
t2715 = -t2722 * t2998 + t2731 * t3002;
t2714 = -t3000 * t2729 + t3004 * t3065;
t2713 = t3004 * t2729 + t3000 * t3065;
t2708 = -t2719 * t2998 + t2728 * t3002;
t2707 = -t3000 * t2721 + t3004 * t3066;
t2706 = t3004 * t2721 + t3000 * t3066;
t2705 = -t3000 * t2718 + t3004 * t3067;
t2704 = t3004 * t2718 + t3000 * t3067;
t2701 = t3003 * t2709 + t2999 * t3068;
t2700 = -t2702 * t2998 + t2703 * t3002;
t2699 = -t3000 * t2701 + t3004 * t3069;
t2698 = t3004 * t2701 + t3000 * t3069;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2987, -t2986, 0, -t2989 * t3008 + t2990 * t3012, 0, 0, 0, 0, 0, 0, -t2939 * t3008 + t2950 * t3012, -t2940 * t3008 + t2951 * t3012, -t2935 * t3008 + t2947 * t3012, -t2899 * t3008 + t2909 * t3012, 0, 0, 0, 0, 0, 0, -t2830 * t3008 + t2852 * t3012, -t2834 * t3008 + t2856 * t3012, -t2818 * t3008 + t2840 * t3012, -t2769 * t3008 + t2792 * t3012, 0, 0, 0, 0, 0, 0, -t2775 * t3008 + t2795 * t3012, -t2778 * t3008 + t2796 * t3012, -t2760 * t3008 + t2787 * t3012, -t2727 * t3008 + t2736 * t3012, 0, 0, 0, 0, 0, 0, -t2738 * t3008 + t2754 * t3012, -t2740 * t3008 + t2755 * t3012, -t2733 * t3008 + t2746 * t3012, -t2705 * t3008 + t2708 * t3012, 0, 0, 0, 0, 0, 0, -t2714 * t3008 + t2720 * t3012, -t2717 * t3008 + t2725 * t3012, -t2707 * t3008 + t2715 * t3012, -t2699 * t3008 + t2700 * t3012; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2986, t2987, 0, t2989 * t3012 + t2990 * t3008, 0, 0, 0, 0, 0, 0, t2939 * t3012 + t2950 * t3008, t2940 * t3012 + t2951 * t3008, t2935 * t3012 + t2947 * t3008, t2899 * t3012 + t2909 * t3008, 0, 0, 0, 0, 0, 0, t2830 * t3012 + t2852 * t3008, t2834 * t3012 + t2856 * t3008, t2818 * t3012 + t2840 * t3008, t2769 * t3012 + t2792 * t3008, 0, 0, 0, 0, 0, 0, t2775 * t3012 + t2795 * t3008, t2778 * t3012 + t2796 * t3008, t2760 * t3012 + t2787 * t3008, t2727 * t3012 + t2736 * t3008, 0, 0, 0, 0, 0, 0, t2738 * t3012 + t2754 * t3008, t2740 * t3012 + t2755 * t3008, t2733 * t3012 + t2746 * t3008, t2705 * t3012 + t2708 * t3008, 0, 0, 0, 0, 0, 0, t2714 * t3012 + t2720 * t3008, t2717 * t3012 + t2725 * t3008, t2707 * t3012 + t2715 * t3008, t2699 * t3012 + t2700 * t3008; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2937, t2938, t2934, t2898, 0, 0, 0, 0, 0, 0, t2829, t2833, t2817, t2768, 0, 0, 0, 0, 0, 0, t2774, t2777, t2759, t2726, 0, 0, 0, 0, 0, 0, t2737, t2739, t2732, t2704, 0, 0, 0, 0, 0, 0, t2713, t2716, t2706, t2698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3013, -qJDD(1), 0, t2990, 0, 0, 0, 0, 0, 0, t2950, t2951, t2947, t2909, 0, 0, 0, 0, 0, 0, t2852, t2856, t2840, t2792, 0, 0, 0, 0, 0, 0, t2795, t2796, t2787, t2736, 0, 0, 0, 0, 0, 0, t2754, t2755, t2746, t2708, 0, 0, 0, 0, 0, 0, t2720, t2725, t2715, t2700; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3013, 0, t2989, 0, 0, 0, 0, 0, 0, t2939, t2940, t2935, t2899, 0, 0, 0, 0, 0, 0, t2830, t2834, t2818, t2769, 0, 0, 0, 0, 0, 0, t2775, t2778, t2760, t2727, 0, 0, 0, 0, 0, 0, t2738, t2740, t2733, t2705, 0, 0, 0, 0, 0, 0, t2714, t2717, t2707, t2699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2937, t2938, t2934, t2898, 0, 0, 0, 0, 0, 0, t2829, t2833, t2817, t2768, 0, 0, 0, 0, 0, 0, t2774, t2777, t2759, t2726, 0, 0, 0, 0, 0, 0, t2737, t2739, t2732, t2704, 0, 0, 0, 0, 0, 0, t2713, t2716, t2706, t2698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2975, t2972, t2969, t2943, 0, 0, 0, 0, 0, 0, t2894, t2896, t2883, t2835, 0, 0, 0, 0, 0, 0, t2841, t2844, t2836, t2776, 0, 0, 0, 0, 0, 0, t2793, t2794, t2788, t2728, 0, 0, 0, 0, 0, 0, t2745, t2749, t2731, t2703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2971, t2974, t2968, t2942, 0, 0, 0, 0, 0, 0, t2873, t2876, t2864, t2814, 0, 0, 0, 0, 0, 0, t2820, t2826, t2801, t2751, 0, 0, 0, 0, 0, 0, t2771, t2773, t2764, t2719, 0, 0, 0, 0, 0, 0, t2730, t2735, t2722, t2702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2970, t2967, t2973, t2958, 0, 0, 0, 0, 0, 0, t2872, t2875, t2863, t2813, 0, 0, 0, 0, 0, 0, t2819, t2825, t2800, t2750, 0, 0, 0, 0, 0, 0, t2770, t2772, t2763, t2718, 0, 0, 0, 0, 0, 0, t2729, t2734, t2721, t2701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2927, t2928, t2912, t2862, 0, 0, 0, 0, 0, 0, t2868, t2871, t2851, t2784, 0, 0, 0, 0, 0, 0, t2807, t2816, t2803, t2744, 0, 0, 0, 0, 0, 0, t2762, t2767, t2753, t2710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2929, t2930, t2914, -t3070, 0, 0, 0, 0, 0, 0, -t2879, t3073, -t2895, -t2848, 0, 0, 0, 0, 0, 0, -t2837, -t2842, -t2831, -t2747, 0, 0, 0, 0, 0, 0, -t2781, -t2790, -t2756, -t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2911, -t3072, t2925, t2886, 0, 0, 0, 0, 0, 0, t2867, t2870, t2850, t2783, 0, 0, 0, 0, 0, 0, t2806, t2815, t2802, t2743, 0, 0, 0, 0, 0, 0, t2761, t2766, t2752, t2709; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2903, t2893, t2880, t2812, 0, 0, 0, 0, 0, 0, t2838, t2843, t2832, t2748, 0, 0, 0, 0, 0, 0, t2782, t2791, t2757, t2712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2892, t2907, t2882, t2811, 0, 0, 0, 0, 0, 0, -t2857, -t2859, -t2874, -t2798, 0, 0, 0, 0, 0, 0, -t2821, -t2823, -t2839, -t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2879, -t3073, t2895, t2848, 0, 0, 0, 0, 0, 0, t2837, t2842, t2831, t2747, 0, 0, 0, 0, 0, 0, t2781, t2790, t2756, t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2878, t2866, t2858, t2780, 0, 0, 0, 0, 0, 0, t2805, t2828, t2786, t2724; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2865, t2888, t2860, t2779, 0, 0, 0, 0, 0, 0, t2804, t2827, t2785, t2723; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2857, t2859, t2874, t2798, 0, 0, 0, 0, 0, 0, t2821, t2823, t2839, t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2855, t2846, t2822, t2742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2845, t2869, t2824, t2741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2821, t2823, t2839, t2789;];
f_new_reg  = t1;
