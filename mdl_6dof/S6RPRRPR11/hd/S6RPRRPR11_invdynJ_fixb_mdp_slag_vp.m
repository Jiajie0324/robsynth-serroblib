% Calculate vector of inverse dynamics joint torques for
% S6RPRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRPR11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRPR11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RPRRPR11_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:45:09
% EndTime: 2019-03-09 05:45:42
% DurationCPUTime: 24.51s
% Computational Cost: add. (23108->793), mult. (73712->1086), div. (0->0), fcn. (64514->18), ass. (0->308)
t826 = sin(pkin(12));
t829 = cos(pkin(12));
t975 = cos(pkin(6));
t986 = cos(qJ(1));
t904 = t975 * t986;
t984 = sin(qJ(1));
t856 = t984 * t826 - t829 * t904;
t827 = sin(pkin(6));
t973 = sin(pkin(7));
t924 = t827 * t973;
t974 = cos(pkin(7));
t1007 = t856 * t974 + t986 * t924;
t767 = t826 * t904 + t829 * t984;
t832 = sin(qJ(3));
t985 = cos(qJ(3));
t679 = t1007 * t832 - t767 * t985;
t831 = sin(qJ(4));
t834 = cos(qJ(4));
t925 = t827 * t974;
t987 = t856 * t973 - t986 * t925;
t650 = t679 * t834 - t831 * t987;
t676 = t1007 * t985 + t767 * t832;
t824 = pkin(13) + qJ(6);
t818 = sin(t824);
t819 = cos(t824);
t1014 = t650 * t818 + t676 * t819;
t1013 = t650 * t819 - t676 * t818;
t889 = t973 * t975;
t857 = t985 * t889;
t902 = t974 * t985;
t880 = t829 * t902;
t1008 = t827 * t880 + t857;
t963 = t826 * t827;
t928 = qJD(1) * t963;
t995 = qJD(1) * t1008 - t832 * t928;
t1012 = t995 - qJD(4);
t923 = t832 * t974;
t847 = t827 * (-t826 * t923 + t829 * t985);
t901 = t973 * t985;
t873 = qJD(3) * t901;
t1009 = qJD(1) * t847 - t873;
t649 = t679 * t831 + t834 * t987;
t872 = t832 * t889;
t906 = t829 * t923;
t730 = t827 * (t826 * t985 + t906) + t872;
t719 = t730 * qJD(1);
t890 = t975 * t974;
t900 = qJD(1) * t924;
t994 = qJD(1) * t890 - t829 * t900 + qJD(3);
t672 = t834 * t719 + t831 * t994;
t825 = sin(pkin(13));
t828 = cos(pkin(13));
t639 = t1012 * t828 + t672 * t825;
t833 = cos(qJ(6));
t641 = -t1012 * t825 + t672 * t828;
t830 = sin(qJ(6));
t971 = t641 * t830;
t587 = t833 * t639 + t971;
t750 = t834 * t994;
t670 = t719 * t831 - t750;
t669 = qJD(6) + t670;
t1006 = t587 * t669;
t808 = t829 * t827 * qJ(2);
t918 = qJD(1) * t975;
t908 = pkin(1) * t918;
t762 = qJD(1) * t808 + t826 * t908;
t842 = (t829 * t925 + t889) * pkin(9);
t702 = qJD(1) * t842 + t762;
t805 = t829 * t908;
t843 = t975 * pkin(2) + (-pkin(9) * t974 - qJ(2)) * t963;
t710 = qJD(1) * t843 + t805;
t1000 = -t985 * t702 - t710 * t923;
t751 = (-pkin(9) * t826 * t973 - pkin(2) * t829 - pkin(1)) * t827;
t741 = qJD(1) * t751 + qJD(2);
t922 = t832 * t973;
t635 = t741 * t922 - t1000;
t1005 = qJD(5) * t831 + t635 + t1012 * (pkin(4) * t831 - qJ(5) * t834);
t884 = t639 * t830 - t641 * t833;
t1004 = t669 * t884;
t999 = t832 * t702 - t710 * t902;
t773 = t831 * t922 - t834 * t974;
t877 = t826 * t900;
t998 = qJD(4) * t773 + t1009 * t834 + t831 * t877;
t846 = t827 * (t826 * t902 + t829 * t832);
t899 = qJD(3) * t922;
t870 = -qJD(1) * t846 + t899;
t718 = t730 * qJD(3);
t937 = qJDD(1) * t827;
t926 = t826 * t937;
t666 = qJD(1) * t718 - qJDD(1) * t1008 + t832 * t926;
t931 = pkin(1) * t975;
t770 = t826 * t931 + t808;
t722 = t842 + t770;
t812 = t829 * t931;
t731 = t812 + t843;
t933 = t985 * t722 + (t974 * t731 + t973 * t751) * t832;
t993 = t1012 * t831;
t822 = t827 ^ 2;
t992 = t822 * (t826 ^ 2 + t829 ^ 2);
t634 = t741 * t901 - t999;
t667 = pkin(3) * t719 - pkin(10) * t995;
t958 = t834 * t634 + t831 * t667;
t581 = qJ(5) * t719 + t958;
t990 = t1005 * t825 + t828 * t581;
t839 = -t832 * t722 + t731 * t902 + t751 * t901;
t945 = qJD(4) * t831;
t935 = pkin(10) * t945;
t953 = -t1005 * t828 + (t581 + t935) * t825;
t903 = t975 * t984;
t850 = t826 * t986 + t829 * t903;
t989 = t850 * t974 - t984 * t924;
t662 = qJDD(4) + t666;
t988 = -pkin(4) * t662 + qJDD(5);
t768 = -t826 * t903 + t829 * t986;
t680 = t768 * t832 + t985 * t989;
t962 = t826 * t832;
t729 = t827 * t962 - t1008;
t860 = g(1) * t680 + g(2) * t676 + g(3) * t729;
t983 = pkin(1) * t822;
t981 = pkin(5) * t831;
t977 = pkin(11) + qJ(5);
t976 = pkin(10) * qJD(4);
t665 = qJD(3) * t995 + qJDD(1) * t872 + t906 * t937 + t985 * t926;
t766 = t829 * t924 - t890;
t757 = qJDD(1) * t766 - qJDD(3);
t914 = t831 * t665 + t834 * t757;
t599 = qJD(4) * t672 + t914;
t972 = qJ(5) * t599;
t970 = t670 * t1012;
t969 = t670 * t825;
t968 = t672 * t1012;
t967 = t818 * t834;
t966 = t819 * t834;
t965 = t825 * t830;
t964 = t825 * t834;
t961 = t828 * t831;
t960 = t828 * t834;
t907 = qJDD(1) * t931;
t938 = qJD(1) * qJD(2);
t927 = t827 * t938;
t743 = qJDD(1) * t808 + t826 * t907 + t829 * t927;
t686 = qJDD(1) * t842 + t743;
t803 = t829 * t907;
t687 = qJDD(1) * t843 - t826 * t927 + t803;
t734 = qJDD(1) * t751 + qJDD(2);
t851 = qJD(3) * t999 - t985 * t686 - t687 * t923 - t734 * t922 - t741 * t873;
t568 = -pkin(10) * t757 - t851;
t656 = -t687 * t973 + t974 * t734;
t586 = t666 * pkin(3) - t665 * pkin(10) + t656;
t668 = -t710 * t973 + t974 * t741;
t606 = -pkin(3) * t995 - t719 * pkin(10) + t668;
t610 = pkin(10) * t994 + t635;
t944 = qJD(4) * t834;
t865 = t834 * t568 + t831 * t586 + t606 * t944 - t610 * t945;
t521 = qJ(5) * t662 - qJD(5) * t1012 + t865;
t871 = qJD(3) * t1000 - t832 * t686 + t687 * t902 + t734 * t901 - t741 * t899;
t569 = pkin(3) * t757 - t871;
t598 = qJD(4) * t750 + t834 * t665 - t719 * t945 - t831 * t757;
t529 = pkin(4) * t599 - qJ(5) * t598 - qJD(5) * t672 + t569;
t512 = t828 * t521 + t825 * t529;
t620 = qJD(2) * t847 + qJD(3) * t839;
t673 = -t731 * t973 + t974 * t751;
t626 = t729 * pkin(3) - t730 * pkin(10) + t673;
t633 = -pkin(10) * t766 + t933;
t717 = (t857 + (t880 - t962) * t827) * qJD(3);
t876 = t826 * qJD(2) * t924;
t654 = t718 * pkin(3) - t717 * pkin(10) + t876;
t864 = t834 * t620 + t626 * t944 - t633 * t945 + t831 * t654;
t538 = qJ(5) * t718 + qJD(5) * t729 + t864;
t621 = qJD(2) * t846 + qJD(3) * t933;
t675 = t730 * t834 - t766 * t831;
t643 = qJD(4) * t675 + t717 * t831;
t674 = t730 * t831 + t766 * t834;
t644 = -qJD(4) * t674 + t717 * t834;
t553 = t643 * pkin(4) - t644 * qJ(5) - t675 * qJD(5) + t621;
t520 = t828 * t538 + t825 * t553;
t562 = t831 * t606 + t834 * t610;
t558 = -qJ(5) * t1012 + t562;
t609 = -pkin(3) * t994 - t634;
t572 = t670 * pkin(4) - t672 * qJ(5) + t609;
t534 = t828 * t558 + t825 * t572;
t561 = t606 * t834 - t831 * t610;
t624 = pkin(4) * t672 + qJ(5) * t670;
t550 = t828 * t561 + t825 * t624;
t959 = t831 * t626 + t834 * t633;
t566 = qJ(5) * t729 + t959;
t632 = t766 * pkin(3) - t839;
t585 = t674 * pkin(4) - t675 * qJ(5) + t632;
t540 = t828 * t566 + t825 * t585;
t957 = -t825 * t998 - t828 * t870;
t956 = -t825 * t870 + t828 * t998;
t657 = -t828 * t719 + t964 * t995;
t658 = t719 * t825 + t960 * t995;
t782 = -t833 * t828 + t965;
t783 = t825 * t833 + t828 * t830;
t943 = qJD(6) * t831;
t955 = t657 * t830 - t658 * t833 - t782 * t944 - t783 * t943;
t942 = qJD(6) * t833;
t954 = -t833 * t657 - t658 * t830 + t783 * t944 + t942 * t961 - t943 * t965;
t952 = -t828 * t935 - t990;
t774 = t831 * t974 + t834 * t922;
t951 = qJD(4) * t774 - t1009 * t831 + t834 * t877;
t950 = t669 * t782;
t949 = t669 * t783;
t630 = t831 * t634;
t582 = -pkin(4) * t719 - t667 * t834 + t630;
t932 = pkin(5) * t825 + pkin(10);
t948 = -pkin(5) * t657 + t932 * t944 - t582;
t875 = pkin(4) * t834 + qJ(5) * t831 + pkin(3);
t756 = pkin(10) * t960 - t825 * t875;
t929 = t827 * t984;
t947 = t986 * pkin(1) + qJ(2) * t929;
t941 = t757 * MDP(12);
t557 = pkin(4) * t1012 + qJD(5) - t561;
t939 = -qJD(5) + t557;
t936 = g(1) * t984;
t576 = t598 * t825 - t828 * t662;
t577 = t598 * t828 + t662 * t825;
t934 = -t830 * t576 + t833 * t577 - t639 * t942;
t930 = t827 * t986;
t835 = qJD(1) ^ 2;
t921 = t835 * t975;
t511 = -t521 * t825 + t828 * t529;
t509 = pkin(5) * t599 - pkin(11) * t577 + t511;
t510 = -pkin(11) * t576 + t512;
t917 = t833 * t509 - t830 * t510;
t519 = -t538 * t825 + t828 * t553;
t533 = -t558 * t825 + t828 * t572;
t549 = -t561 * t825 + t828 * t624;
t539 = -t566 * t825 + t828 * t585;
t916 = t833 * t576 + t830 * t577;
t915 = t626 * t834 - t831 * t633;
t911 = t1012 * t834;
t910 = t831 * t568 - t834 * t586 + t606 * t945 + t610 * t944;
t905 = -pkin(1) * t984 + qJ(2) * t930;
t681 = t768 * t985 - t832 * t989;
t836 = -t850 * t973 - t925 * t984;
t651 = t681 * t831 + t834 * t836;
t898 = g(1) * t649 + g(2) * t651;
t897 = qJD(2) * t918;
t895 = g(2) * t930 - g(3) * t975;
t740 = -pkin(11) * t825 * t831 + t756;
t894 = -pkin(11) * t658 + qJD(6) * t740 + t995 * t981 - (-pkin(11) * t960 + t981) * qJD(4) - t953;
t778 = t828 * t875;
t723 = -pkin(11) * t961 - t778 + (-pkin(10) * t825 - pkin(5)) * t834;
t893 = -pkin(11) * t657 - qJD(6) * t723 - (-pkin(10) * t961 - pkin(11) * t964) * qJD(4) + t990;
t736 = t828 * t774 - t825 * t901;
t892 = qJD(6) * t736 + t957;
t735 = -t825 * t774 - t828 * t901;
t891 = -qJD(6) * t735 + t956;
t887 = t830 * t509 + t833 * t510;
t523 = pkin(5) * t670 - pkin(11) * t641 + t533;
t526 = -pkin(11) * t639 + t534;
t513 = t523 * t833 - t526 * t830;
t514 = t523 * t830 + t526 * t833;
t646 = t675 * t828 + t729 * t825;
t530 = pkin(5) * t674 - pkin(11) * t646 + t539;
t645 = t675 * t825 - t729 * t828;
t532 = -pkin(11) * t645 + t540;
t886 = t530 * t833 - t532 * t830;
t885 = t530 * t830 + t532 * t833;
t593 = t833 * t645 + t646 * t830;
t594 = -t645 * t830 + t646 * t833;
t883 = (-qJ(2) * t928 + t805) * t826 - t762 * t829;
t874 = -t831 * t620 - t626 * t945 - t633 * t944 + t654 * t834;
t567 = -pkin(4) * t729 - t915;
t797 = t977 * t828;
t869 = pkin(11) * t670 * t828 + pkin(5) * t672 + qJD(5) * t825 + qJD(6) * t797 + t549;
t796 = t977 * t825;
t868 = pkin(11) * t969 - qJD(5) * t828 + qJD(6) * t796 + t550;
t866 = -pkin(10) * t662 - t1012 * t609;
t524 = -qJD(6) * t971 + t934;
t863 = g(1) * t986 + g(2) * t984;
t862 = g(1) * t651 - g(2) * t649 + g(3) * t674;
t652 = t681 * t834 - t831 * t836;
t861 = -g(1) * t652 + g(2) * t650 - g(3) * t675;
t859 = g(1) * t681 - g(2) * t679 + g(3) * t730;
t522 = t910 + t988;
t855 = -t522 + t862;
t854 = -t569 + t860;
t542 = -pkin(4) * t718 - t874;
t844 = t862 - t910;
t525 = -qJD(6) * t884 + t916;
t817 = -pkin(5) * t828 - pkin(4);
t807 = -pkin(1) * t937 + qJDD(2);
t785 = t932 * t831;
t769 = -qJ(2) * t963 + t812;
t764 = t782 * t831;
t763 = t783 * t831;
t755 = -pkin(10) * t964 - t778;
t742 = t803 + (-qJ(2) * qJDD(1) - t938) * t963;
t615 = t644 * t828 + t718 * t825;
t614 = t644 * t825 - t718 * t828;
t601 = t652 * t819 + t680 * t818;
t600 = -t652 * t818 + t680 * t819;
t595 = qJDD(6) + t599;
t555 = -pkin(5) * t969 + t562;
t554 = pkin(5) * t645 + t567;
t548 = pkin(5) * t639 + t557;
t545 = qJD(6) * t594 + t833 * t614 + t615 * t830;
t544 = -qJD(6) * t593 - t614 * t830 + t615 * t833;
t531 = pkin(5) * t614 + t542;
t517 = -pkin(11) * t614 + t520;
t516 = pkin(5) * t576 + t522;
t515 = pkin(5) * t643 - pkin(11) * t615 + t519;
t507 = -qJD(6) * t514 + t917;
t506 = qJD(6) * t513 + t887;
t1 = [(-t524 * t593 - t525 * t594 - t544 * t587 + t545 * t884) * MDP(27) + (t524 * t594 - t544 * t884) * MDP(26) + (t524 * t674 + t544 * t669 + t594 * t595 - t643 * t884) * MDP(28) + (-t743 * t975 - g(1) * t856 + g(2) * t850 + (t807 * t826 - t829 * t897) * t827 + (-t770 * t975 - t826 * t983) * qJDD(1)) * MDP(5) + (t742 * t975 + g(1) * t767 - g(2) * t768 + (-t807 * t829 - t826 * t897) * t827 + (t769 * t975 + t829 * t983) * qJDD(1)) * MDP(4) + (-g(2) * t986 + t936) * MDP(2) + (t512 * t540 + t534 * t520 + t511 * t539 + t533 * t519 + t522 * t567 + t557 * t542 - g(1) * (-t767 * pkin(2) + t679 * pkin(3) + t650 * pkin(4) - pkin(10) * t676 + t649 * qJ(5) + t905) - g(2) * (t768 * pkin(2) + t681 * pkin(3) + t652 * pkin(4) + t680 * pkin(10) + t651 * qJ(5) + t947) + (g(1) * t987 + g(2) * t836) * pkin(9)) * MDP(25) + (t519 * t670 + t539 * t599 + t511 * t674 + t533 * t643 + t542 * t639 + t567 * t576 + t522 * t645 + t557 * t614 - g(1) * (t650 * t828 - t676 * t825) - g(2) * (t652 * t828 + t680 * t825)) * MDP(22) + (-t520 * t670 - t540 * t599 - t512 * t674 - t534 * t643 + t542 * t641 + t567 * t577 + t522 * t646 + t557 * t615 - g(1) * (-t650 * t825 - t676 * t828) - g(2) * (-t652 * t825 + t680 * t828)) * MDP(23) + (-t665 * t729 - t666 * t730 + t717 * t995 - t718 * t719) * MDP(9) + (-g(1) * t676 + g(2) * t680 - t620 * t994 + t656 * t730 + t673 * t665 + t668 * t717 + t719 * t876 + t757 * t933 - t766 * t851) * MDP(14) + (-g(1) * t679 - g(2) * t681 - t621 * t994 + t656 * t729 + t673 * t666 + t668 * t718 - t757 * t839 - t766 * t871 - t876 * t995) * MDP(13) + (-t665 * t766 + t717 * t994 - t730 * t757) * MDP(10) + (t666 * t766 - t718 * t994 + t729 * t757) * MDP(11) + ((-qJD(6) * t885 + t515 * t833 - t517 * t830) * t669 + t886 * t595 + t507 * t674 + t513 * t643 + t531 * t587 + t554 * t525 + t516 * t593 + t548 * t545 - g(1) * t1013 - g(2) * t601) * MDP(31) + (-(qJD(6) * t886 + t515 * t830 + t517 * t833) * t669 - t885 * t595 - t506 * t674 - t514 * t643 - t531 * t884 + t554 * t524 + t516 * t594 + t548 * t544 + g(1) * t1014 - g(2) * t600) * MDP(32) + (-t511 * t646 - t512 * t645 - t519 * t641 - t520 * t639 - t533 * t615 - t534 * t614 - t539 * t577 - t540 * t576 - t898) * MDP(24) + t863 * MDP(3) + (t938 * t992 + (-t742 * t826 + t743 * t829 + (-t769 * t826 + t770 * t829) * qJDD(1) - t863) * t827) * MDP(6) + (t743 * t770 + t742 * t769 - g(1) * t905 - g(2) * t947 + (-t807 * pkin(1) - qJD(2) * t883) * t827) * MDP(7) + (-g(1) * t650 - g(2) * t652 - t1012 * t874 + t561 * t718 + t569 * t674 + t632 * t599 + t609 * t643 + t621 * t670 + t662 * t915 - t729 * t910) * MDP(20) + (t1012 * t864 - t562 * t718 + t569 * t675 + t632 * t598 + t609 * t644 + t621 * t672 - t662 * t959 - t729 * t865 + t898) * MDP(21) + (-t1012 * t644 + t598 * t729 + t662 * t675 + t672 * t718) * MDP(17) + (t1012 * t643 - t599 * t729 - t662 * t674 - t670 * t718) * MDP(18) + (-t1012 * t718 + t662 * t729) * MDP(19) + (t665 * t730 + t717 * t719) * MDP(8) + (-t598 * t674 - t599 * t675 - t643 * t672 - t644 * t670) * MDP(16) + (t598 * t675 + t644 * t672) * MDP(15) + (-t525 * t674 - t545 * t669 - t587 * t643 - t593 * t595) * MDP(29) + (t595 * t674 + t643 * t669) * MDP(30) + t766 * t941 + qJDD(1) * MDP(1); -t835 * MDP(6) * t992 + (qJDD(2) + t895) * MDP(7) + (t666 * t974 - t757 * t901 + t877 * t995) * MDP(13) + (t665 * t974 - t719 * t877 + t757 * t922) * MDP(14) + (t1012 * t951 - t599 * t901 - t773 * t662 + t670 * t870) * MDP(20) + (-t1012 * t998 - t598 * t901 - t774 * t662 + t870 * t672) * MDP(21) + (t576 * t773 + t599 * t735 + t639 * t951 - t670 * t957) * MDP(22) + (t577 * t773 - t599 * t736 + t641 * t951 + t670 * t956) * MDP(23) + (-t576 * t736 - t577 * t735 + t639 * t956 + t641 * t957) * MDP(24) + (-g(1) * t929 + t511 * t735 + t512 * t736 + t522 * t773 - t533 * t957 - t534 * t956 + t557 * t951 + t895) * MDP(25) + ((t735 * t833 - t736 * t830) * t595 + t773 * t525 + (t830 * t891 - t833 * t892) * t669 + t951 * t587) * MDP(31) + (-(t735 * t830 + t736 * t833) * t595 + t773 * t524 + (t830 * t892 + t833 * t891) * t669 - t951 * t884) * MDP(32) - (t870 * MDP(13) - MDP(14) * t1009) * t994 + ((-qJDD(1) * t829 + t826 * t921) * MDP(4) + (qJDD(1) * t826 + t829 * t921) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t883 - t936) * MDP(7)) * t827; (-t557 * t658 - t582 * t641 - t756 * t599 - t952 * t670 - t859 * t828 + (t512 + (pkin(10) * t641 + t557 * t828) * qJD(4) - t860 * t825) * t834 + (pkin(10) * t577 + t1012 * t534 + t522 * t828) * t831) * MDP(23) + (-t557 * t657 - t582 * t639 + t755 * t599 + t953 * t670 - t859 * t825 + (-t511 + (pkin(10) * t639 + t557 * t825) * qJD(4) + t860 * t828) * t834 + (pkin(10) * t576 - t1012 * t533 + t522 * t825) * t831) * MDP(22) + (t533 * t658 + t534 * t657 - t576 * t756 - t577 * t755 - t953 * t641 - t952 * t639 + (-t533 * t828 - t534 * t825) * t944 + (-t511 * t828 - t512 * t825 + t860) * t831) * MDP(24) + ((t723 * t833 - t740 * t830) * t595 - t507 * t834 + t785 * t525 + t516 * t763 - g(1) * (-t680 * t966 + t681 * t818) - g(2) * (-t676 * t966 - t679 * t818) - g(3) * (-t729 * t966 + t730 * t818) + (t830 * t893 - t833 * t894) * t669 + t948 * t587 + t954 * t548 - t513 * t993) * MDP(31) + (-t994 * t995 + t665) * MDP(10) + ((t598 + t970) * t834 + (-t599 + t968) * t831) * MDP(16) + (t635 * t994 + t860 + t871) * MDP(13) - t941 + (t1012 * t911 + t662 * t831) * MDP(17) + (t598 * t831 - t672 * t911) * MDP(15) + (-t595 * t834 - t669 * t993) * MDP(30) + (t634 * t994 - t668 * t995 + t851 + t859) * MDP(14) + (-pkin(3) * t598 - t958 * t1012 - t635 * t672 + t866 * t834 + (-t1012 * t976 - t854) * t831) * MDP(21) + (-pkin(3) * t599 - t630 * t1012 - t635 * t670 + t866 * t831 + (-(-t667 - t976) * t1012 + t854) * t834) * MDP(20) + (t511 * t755 + t512 * t756 - t557 * t582 + t952 * t534 + t953 * t533 + (t522 * t831 + t557 * t944 - t859) * pkin(10) + t860 * t875) * MDP(25) - t666 * MDP(11) + (-t524 * t834 - t595 * t764 + t669 * t955 + t884 * t993) * MDP(28) + (-t524 * t764 - t884 * t955) * MDP(26) + (-t524 * t763 + t525 * t764 - t587 * t955 + t884 * t954) * MDP(27) - t995 ^ 2 * MDP(9) + (t525 * t834 + t587 * t993 - t595 * t763 - t669 * t954) * MDP(29) + (-t1012 * t993 + t662 * t834) * MDP(18) + (-(t723 * t830 + t740 * t833) * t595 + t506 * t834 + t785 * t524 - t516 * t764 - g(1) * (t680 * t967 + t681 * t819) - g(2) * (t676 * t967 - t679 * t819) - g(3) * (t729 * t967 + t730 * t819) + (t830 * t894 + t833 * t893) * t669 - t948 * t884 + t955 * t548 + t514 * t993) * MDP(32) + (MDP(11) * t994 - t668 * MDP(13) - t672 * MDP(17) + t670 * MDP(18) + MDP(19) * t1012 - t561 * MDP(20) + t562 * MDP(21) - MDP(8) * t995 + MDP(9) * t719) * t719; -t670 ^ 2 * MDP(16) + (t598 - t970) * MDP(17) + (-t914 - t968) * MDP(18) + t662 * MDP(19) + (-t1012 * t562 + t844) * MDP(20) + (-t1012 * t561 + t609 * t670 - t861 - t865) * MDP(21) + (-t825 * t972 - pkin(4) * t576 - t562 * t639 + (t825 * t939 - t549) * t670 + t855 * t828) * MDP(22) + (-t828 * t972 - pkin(4) * t577 - t562 * t641 + (t828 * t939 + t550) * t670 - t855 * t825) * MDP(23) + (t549 * t641 + t550 * t639 + (-qJ(5) * t576 - qJD(5) * t639 - t533 * t670 + t512) * t828 + (qJ(5) * t577 + qJD(5) * t641 - t534 * t670 - t511) * t825 + t861) * MDP(24) + (-t533 * t549 - t534 * t550 - t557 * t562 + (-t533 * t825 + t534 * t828) * qJD(5) + t855 * pkin(4) + (-t511 * t825 + t512 * t828 + t861) * qJ(5)) * MDP(25) + (t524 * t783 + t884 * t950) * MDP(26) + (-t524 * t782 - t525 * t783 + t587 * t950 + t884 * t949) * MDP(27) + (t595 * t783 - t669 * t950) * MDP(28) + (-t595 * t782 - t669 * t949) * MDP(29) + ((-t796 * t833 - t797 * t830) * t595 + t817 * t525 + t516 * t782 - t555 * t587 + (t830 * t868 - t833 * t869) * t669 + t949 * t548 + t862 * t819) * MDP(31) + (-(-t796 * t830 + t797 * t833) * t595 + t817 * t524 + t516 * t783 + t555 * t884 + (t830 * t869 + t833 * t868) * t669 - t950 * t548 - t862 * t818) * MDP(32) + (MDP(15) * t670 + MDP(16) * t672 - MDP(18) * qJD(4) - MDP(20) * t609 - MDP(22) * t533 + MDP(23) * t534 + MDP(28) * t884 + MDP(29) * t587 - MDP(30) * t669 - MDP(31) * t513 + MDP(32) * t514) * t672; (t641 * t670 + t576) * MDP(22) + (-t639 * t670 + t577) * MDP(23) + (-t639 ^ 2 - t641 ^ 2) * MDP(24) + (t533 * t641 + t534 * t639 - t844 + t988) * MDP(25) + (t525 - t1004) * MDP(31) + (t524 - t1006) * MDP(32); -t884 * t587 * MDP(26) + (-t587 ^ 2 + t884 ^ 2) * MDP(27) + (t934 + t1006) * MDP(28) + (-t916 - t1004) * MDP(29) + t595 * MDP(30) + (t514 * t669 + t548 * t884 - g(1) * t600 - g(2) * t1014 - g(3) * (-t675 * t818 + t729 * t819) + t917) * MDP(31) + (t513 * t669 + t548 * t587 + g(1) * t601 - g(2) * t1013 - g(3) * (-t675 * t819 - t729 * t818) - t887) * MDP(32) + (-MDP(28) * t971 + MDP(29) * t884 - MDP(31) * t514 - MDP(32) * t513) * qJD(6);];
tau  = t1;
