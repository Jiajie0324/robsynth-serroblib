% Calculate vector of inverse dynamics joint torques for
% S6RRRPRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRP11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRP11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPRP11_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:49:30
% EndTime: 2019-03-09 17:49:53
% DurationCPUTime: 17.85s
% Computational Cost: add. (8773->729), mult. (21130->929), div. (0->0), fcn. (16427->10), ass. (0->299)
t708 = sin(qJ(3));
t713 = cos(qJ(2));
t705 = sin(pkin(6));
t840 = qJD(1) * t705;
t811 = t713 * t840;
t778 = t708 * t811;
t837 = qJD(3) * t708;
t904 = t778 - t837;
t668 = -qJD(3) + t811;
t709 = sin(qJ(2));
t886 = cos(pkin(6));
t795 = t886 * qJD(1);
t775 = pkin(1) * t795;
t625 = pkin(8) * t811 + t709 * t775;
t921 = -t904 * pkin(3) - qJD(4) * t708 - t625;
t812 = t709 * t840;
t622 = -pkin(8) * t812 + t713 * t775;
t768 = pkin(2) * t709 - pkin(9) * t713;
t623 = t768 * t840;
t712 = cos(qJ(3));
t789 = -t708 * t622 + t623 * t712;
t836 = qJD(3) * t712;
t859 = t712 * t713;
t895 = pkin(4) + pkin(9);
t896 = pkin(3) + pkin(10);
t920 = (pkin(4) * t859 - t709 * t896) * t840 - t789 - t895 * t836;
t919 = -t921 + t668 * (pkin(10) * t708 - qJ(4) * t712);
t905 = t712 * t811 - t836;
t799 = -qJ(4) * t708 - pkin(2);
t758 = t795 + qJD(2);
t738 = qJD(3) * t758;
t786 = t886 * qJDD(1);
t752 = t786 + qJDD(2);
t868 = t705 * t709;
t820 = t708 * t868;
t776 = qJD(3) * t820;
t825 = qJDD(1) * t709;
t801 = t705 * t825;
t826 = qJD(1) * qJD(2);
t802 = t713 * t826;
t914 = t705 * t802 + t801;
t535 = qJD(1) * t776 - t708 * t752 + (-t738 - t914) * t712;
t824 = qJDD(1) * t713;
t687 = t705 * t824;
t803 = t709 * t826;
t773 = t705 * t803;
t618 = qJDD(3) - t687 + t773;
t774 = pkin(1) * qJD(2) * t886;
t753 = qJD(1) * t774;
t771 = pkin(1) * t786;
t814 = pkin(8) * t687 + t709 * t771 + t713 * t753;
t729 = -pkin(8) * t773 + t814;
t549 = pkin(9) * t752 + t729;
t747 = t768 * qJD(2);
t755 = -pkin(2) * t713 - pkin(9) * t709 - pkin(1);
t552 = (qJD(1) * t747 + qJDD(1) * t755) * t705;
t584 = pkin(9) * t758 + t625;
t593 = t755 * t840;
t782 = t708 * t549 - t712 * t552 + t584 * t836 + t593 * t837;
t756 = qJDD(4) + t782;
t471 = -pkin(4) * t535 - t618 * t896 + t756;
t780 = pkin(8) * t914 + t709 * t753 - t713 * t771;
t550 = -pkin(2) * t752 + t780;
t602 = t708 * t758 + t712 * t812;
t728 = t708 * t738 - t712 * t752;
t800 = t708 * t825;
t807 = t709 * t836;
t838 = qJD(2) * t713;
t716 = (qJD(1) * (t708 * t838 + t807) + t800) * t705 + t728;
t482 = pkin(3) * t716 + t535 * qJ(4) - t602 * qJD(4) + t550;
t476 = pkin(10) * t716 + t482;
t533 = t584 * t708 - t712 * t593;
t828 = -qJD(4) - t533;
t902 = pkin(4) * t602 - t828;
t501 = t668 * t896 + t902;
t600 = t708 * t812 - t712 * t758;
t583 = -pkin(2) * t758 - t622;
t719 = -t602 * qJ(4) + t583;
t505 = t600 * t896 + t719;
t707 = sin(qJ(5));
t711 = cos(qJ(5));
t478 = t501 * t707 + t505 * t711;
t464 = -qJD(5) * t478 + t711 * t471 - t707 * t476;
t833 = qJD(5) * t711;
t834 = qJD(5) * t707;
t495 = -t600 * t833 - t711 * t618 - t668 * t834 - t707 * t716;
t532 = -qJDD(5) + t535;
t558 = t600 * t707 - t668 * t711;
t461 = -pkin(5) * t532 + qJ(6) * t495 - qJD(6) * t558 + t464;
t556 = -t711 * t600 - t668 * t707;
t475 = -qJ(6) * t556 + t478;
t594 = qJD(5) + t602;
t918 = t475 * t594 + t461;
t835 = qJD(5) * t558;
t496 = t618 * t707 - t711 * t716 + t835;
t743 = -t707 * t471 - t711 * t476 - t501 * t833 + t505 * t834;
t462 = -qJ(6) * t496 - qJD(6) * t556 - t743;
t477 = t711 * t501 - t505 * t707;
t474 = -qJ(6) * t558 + t477;
t468 = pkin(5) * t594 + t474;
t917 = -t468 * t594 + t462;
t878 = t556 * t594;
t916 = t495 - t878;
t670 = t895 * t708;
t915 = -qJD(5) * t670 + t919;
t591 = t707 * t812 - t711 * t778;
t763 = t711 * t837 + t591;
t710 = sin(qJ(1));
t894 = cos(qJ(1));
t770 = t886 * t894;
t638 = t709 * t770 + t710 * t713;
t813 = t705 * t894;
t573 = t638 * t708 + t712 * t813;
t637 = t709 * t710 - t713 * t770;
t913 = t573 * t707 + t637 * t711;
t912 = t573 * t711 - t637 * t707;
t909 = t558 * t668;
t797 = t709 * t886;
t865 = t705 * t713;
t842 = pkin(1) * t797 + pkin(8) * t865;
t616 = pkin(9) * t886 + t842;
t843 = pkin(2) * t865 + pkin(9) * t868;
t617 = -pkin(1) * t705 - t843;
t790 = -t708 * t616 + t617 * t712;
t539 = pkin(3) * t865 - t790;
t866 = t705 * t712;
t636 = t708 * t886 + t709 * t866;
t514 = pkin(4) * t636 + pkin(10) * t865 + t539;
t796 = t713 * t886;
t750 = pkin(1) * t796 - pkin(8) * t868;
t615 = -pkin(2) * t886 - t750;
t635 = -t712 * t886 + t820;
t629 = t635 * pkin(3);
t794 = t636 * qJ(4) - t629;
t537 = t615 - t794;
t522 = t635 * pkin(10) + t537;
t853 = t707 * t514 + t711 * t522;
t845 = qJ(4) * t905 + t921;
t908 = t920 * t711;
t643 = -t712 * t896 + t799;
t907 = t643 * t834 - t670 * t833 + t707 * t920 + t919 * t711;
t906 = (qJDD(2) + 0.2e1 * t786) * t705;
t903 = -t618 * t708 + t668 * t836;
t640 = -t710 * t797 + t713 * t894;
t577 = t640 * t708 - t710 * t866;
t639 = t709 * t894 + t710 * t796;
t543 = t577 * t711 - t639 * t707;
t571 = t635 * t711 + t707 * t865;
t901 = -g(1) * t543 - g(2) * t912 - g(3) * t571;
t534 = t712 * t584 + t708 * t593;
t513 = -pkin(4) * t600 + t534;
t653 = t668 * qJ(4);
t506 = t513 - t653;
t900 = t506 * t594 + t532 * t896;
t898 = t558 ^ 2;
t897 = t602 ^ 2;
t715 = qJD(1) ^ 2;
t893 = pkin(3) * t618;
t892 = pkin(5) * t711;
t891 = pkin(9) * t618;
t888 = g(3) * t705;
t699 = t712 * pkin(9);
t697 = pkin(4) + t892;
t887 = pkin(9) + t697;
t885 = qJ(4) * t600;
t883 = qJ(6) * t602;
t882 = t495 * t711;
t881 = t532 * t707;
t880 = t534 * t668;
t879 = t535 * t708;
t877 = t556 * t668;
t876 = t558 * t594;
t875 = t600 * t602;
t610 = t618 * qJ(4);
t871 = t637 * t712;
t870 = t639 * t712;
t702 = t705 ^ 2;
t869 = t702 * t715;
t867 = t705 * t710;
t864 = t707 * t708;
t863 = t708 * t711;
t862 = t708 * t713;
t529 = t711 * t532;
t861 = t711 * t712;
t860 = t711 * t713;
t857 = qJ(6) + t896;
t856 = -t474 + t468;
t733 = (t707 * t862 + t709 * t711) * t705;
t592 = qJD(1) * t733;
t793 = qJ(6) * t712 - t643;
t830 = qJD(6) * t712;
t855 = qJ(6) * t592 + t793 * t833 - t908 + (-qJ(6) * t837 + t830 + t915) * t707 - t905 * pkin(5);
t832 = qJD(5) * t712;
t806 = t707 * t832;
t854 = -t711 * t830 - t907 + (t806 + t763) * qJ(6);
t526 = t602 * t896 + t885;
t852 = t707 * t513 + t711 * t526;
t850 = t712 * t616 + t708 * t617;
t849 = t712 * t622 + t708 * t623;
t508 = t711 * t513;
t848 = -qJD(6) * t711 + t834 * t857 + pkin(5) * t600 - t508 - (-t526 - t883) * t707;
t656 = t857 * t711;
t847 = -qJD(5) * t656 - qJD(6) * t707 - t711 * t883 - t852;
t846 = t711 * t643 + t707 * t670;
t540 = -qJ(4) * t812 - t849;
t730 = pkin(4) * t778 + t540;
t844 = -t895 * t837 + t730;
t805 = t705 * t838;
t627 = pkin(8) * t805 + t709 * t774;
t671 = t712 * pkin(4) + t699;
t703 = t709 ^ 2;
t841 = -t713 ^ 2 + t703;
t839 = qJD(2) * t709;
t831 = qJD(5) * t896;
t829 = t602 * qJD(3);
t822 = qJ(4) * t865;
t821 = t713 * t869;
t819 = t705 * t860;
t818 = t705 * t859;
t817 = -pkin(3) * t871 + t637 * t799;
t816 = -pkin(3) * t870 + t639 * t799;
t810 = t705 * t839;
t804 = 0.2e1 * pkin(1) * t702;
t798 = pkin(5) * t707 + qJ(4);
t792 = t711 * t514 - t522 * t707;
t574 = t638 * t712 - t708 * t813;
t788 = t594 ^ 2;
t783 = -t712 * t549 - t708 * t552 + t584 * t837 - t593 * t836;
t578 = t640 * t712 + t708 * t867;
t781 = t894 * pkin(1) + t640 * pkin(2) + t578 * pkin(3) + pkin(8) * t867;
t769 = t705 * t715 * t886;
t767 = g(1) * t573 - g(2) * t577;
t766 = -g(1) * t574 + g(2) * t578;
t765 = -g(1) * t637 + g(2) * t639;
t764 = g(1) * t640 + g(2) * t638;
t762 = t707 * t837 - t592;
t760 = g(3) * (pkin(3) * t818 + t708 * t822 + t843);
t757 = 0.2e1 * t795 + qJD(2);
t754 = -pkin(1) * t710 - t638 * pkin(2) - pkin(3) * t574 + pkin(8) * t813;
t538 = t822 - t850;
t624 = t705 * t747;
t626 = t750 * qJD(2);
t751 = -t616 * t836 - t617 * t837 + t624 * t712 - t708 * t626;
t706 = -qJ(6) - pkin(10);
t749 = pkin(5) * t864 - t706 * t712;
t651 = qJD(4) * t668;
t481 = -t610 + t651 + t783;
t745 = t668 * t712;
t744 = -t616 * t837 + t617 * t836 + t708 * t624 + t712 * t626;
t570 = -t776 + (qJD(3) * t886 + t805) * t712;
t490 = pkin(4) * t570 - t810 * t896 - t751;
t569 = qJD(3) * t636 + t708 * t805;
t735 = -qJ(4) * t570 - qJD(4) * t636 + t627;
t494 = t569 * t896 + t735;
t742 = t707 * t490 + t711 * t494 + t514 * t833 - t522 * t834;
t740 = g(1) * t577 + g(2) * t573 + g(3) * t635;
t739 = -g(1) * t578 - g(2) * t574 - g(3) * t636;
t736 = t752 * MDP(8);
t732 = g(1) * t639 + g(2) * t637 - g(3) * t865;
t523 = -pkin(4) * t635 - t538;
t473 = -pkin(4) * t716 - t481;
t731 = t473 + t739;
t485 = t756 - t893;
t727 = -t481 * t712 + t485 * t708 - t764;
t726 = t740 - t782;
t725 = t739 - t783;
t724 = -qJD(5) * t853 + t711 * t490 - t494 * t707;
t723 = pkin(9) * qJD(3) * t668 + t732;
t498 = -qJ(4) * t810 + qJD(4) * t865 - t744;
t722 = -t600 * t668 - t535;
t491 = -pkin(4) * t569 - t498;
t521 = t600 * pkin(3) + t719;
t721 = t521 * t602 + qJDD(4) - t726;
t718 = pkin(9) * t903 + g(1) * t870 + g(2) * t871 - g(3) * t818;
t467 = t496 * pkin(5) + qJDD(6) + t473;
t661 = -pkin(3) * t712 + t799;
t655 = t857 * t707;
t647 = t711 * t670;
t572 = -t635 * t707 + t819;
t566 = t577 * pkin(3);
t564 = t573 * pkin(3);
t560 = -qJ(6) * t861 + t846;
t555 = t556 ^ 2;
t553 = pkin(5) * t708 + t707 * t793 + t647;
t551 = pkin(3) * t602 + t885;
t544 = t577 * t707 + t639 * t711;
t542 = -pkin(3) * t812 - t789;
t527 = t653 - t534;
t525 = pkin(3) * t668 - t828;
t519 = qJD(5) * t571 + t569 * t707 + t711 * t810;
t518 = -t569 * t711 - qJD(5) * t819 + (qJD(5) * t635 + t810) * t707;
t504 = pkin(3) * t569 + t735;
t502 = -pkin(3) * t810 - t751;
t492 = pkin(5) * t556 + qJD(6) + t506;
t483 = qJ(6) * t571 + t853;
t480 = pkin(5) * t636 + qJ(6) * t572 + t792;
t466 = -qJ(6) * t518 + qJD(6) * t571 + t742;
t465 = pkin(5) * t570 - qJ(6) * t519 + qJD(6) * t572 + t724;
t1 = [((qJDD(1) * t703 + 0.2e1 * t709 * t802) * MDP(4) + 0.2e1 * (t709 * t824 - t826 * t841) * MDP(5)) * t702 + (g(1) * t912 - g(2) * t543 - t473 * t572 - t478 * t570 + t491 * t558 - t523 * t495 + t506 * t519 + t853 * t532 - t742 * t594 + t743 * t636) * MDP(28) + (g(1) * t913 - g(2) * t544 + t464 * t636 - t473 * t571 + t477 * t570 + t491 * t556 + t523 * t496 + t506 * t518 - t792 * t532 + t724 * t594) * MDP(27) + (t482 * t537 + t521 * t504 + t481 * t538 + t527 * t498 + t485 * t539 + t525 * t502 - g(1) * (-pkin(9) * t637 - qJ(4) * t573 + t754) - g(2) * (pkin(9) * t639 + qJ(4) * t577 + t781)) * MDP(21) + (t462 * t483 + t475 * t466 + t461 * t480 + t468 * t465 + t467 * (-pkin(5) * t571 + t523) + t492 * (pkin(5) * t518 + t491) - g(1) * (-t573 * t798 + t574 * t706 - t637 * t887 + t754) - g(2) * (t577 * t798 - t578 * t706 + t639 * t887 + t781)) * MDP(30) + (t569 * t668 - t635 * t618 + (t728 * t713 - t600 * t839 - (-qJD(1) * t807 - t708 * t802 - t800) * t865) * t705) * MDP(14) + (-t533 * t810 + t550 * t635 + t583 * t569 + t627 * t600 + t615 * t716 + t618 * t790 - t668 * t751 + t782 * t865 - t766) * MDP(16) + (t744 * t668 - t850 * t618 + t627 * t602 - t615 * t535 + t550 * t636 + t583 * t570 + (-t534 * t839 - t713 * t783) * t705 - t767) * MDP(17) + (g(1) * t710 - g(2) * t894) * MDP(2) + (g(1) * t894 + g(2) * t710) * MDP(3) + (-t627 * t758 + t750 * t752 - t780 * t886 + g(1) * t638 - g(2) * t640 + (-t803 + t824) * t804) * MDP(9) + (-t626 * t758 - t842 * t752 - t729 * t886 + (-t802 - t825) * t804 + t765) * MDP(10) + t886 * t736 + (-t482 * t636 + t498 * t668 - t504 * t602 - t521 * t570 + t535 * t537 - t538 * t618 + (t481 * t713 - t527 * t839) * t705 + t767) * MDP(20) + (-t570 * t668 + t618 * t636 + (t535 * t713 + t602 * t839) * t705) * MDP(13) + (t713 * t906 - t757 * t810) * MDP(7) + (t709 * t906 + t757 * t805) * MDP(6) + qJDD(1) * MDP(1) + (-t482 * t635 - t485 * t865 - t502 * t668 - t504 * t600 - t521 * t569 + t525 * t810 - t537 * t716 + t539 * t618 + t766) * MDP(19) + (t535 * t635 - t602 * t569 - t570 * t600 - t636 * t716) * MDP(12) + (t481 * t635 + t485 * t636 + t498 * t600 + t502 * t602 + t525 * t570 + t527 * t569 - t539 * t535 + t538 * t716 - t765) * MDP(18) + (t461 * t572 + t462 * t571 - t465 * t558 - t466 * t556 - t468 * t519 - t475 * t518 + t480 * t495 - t483 * t496 - t766) * MDP(29) + (-t618 * t713 - t668 * t839) * t705 * MDP(15) + (-t535 * t636 + t570 * t602) * MDP(11) + (-t532 * t636 + t570 * t594) * MDP(26) + (-t496 * t636 - t518 * t594 - t532 * t571 - t556 * t570) * MDP(25) + (-t495 * t636 + t519 * t594 + t532 * t572 + t558 * t570) * MDP(24) + (t495 * t572 + t519 * t558) * MDP(22) + (-t495 * t571 + t496 * t572 - t518 * t558 - t519 * t556) * MDP(23); ((-t602 * t709 + t668 * t859) * t840 - t903) * MDP(13) + (-pkin(2) * t716 + t533 * t812 - t550 * t712 - t583 * t904 - t625 * t600 + t668 * t789 + t718) * MDP(16) + (t846 * t532 + t743 * t708 - t671 * t495 - g(1) * (-t639 * t863 - t640 * t707) - g(2) * (-t637 * t863 - t638 * t707) - (-t707 * t709 + t708 * t860) * t888 + t907 * t594 + t844 * t558 + t762 * t506 + (-t473 * t707 + t478 * t668 - t506 * t833) * t712) * MDP(28) + (t462 * t560 + t461 * t553 + t467 * (pkin(5) * t861 + t671) - g(1) * (-t639 * t749 + t640 * t887 + t816) - g(2) * (-t637 * t749 + t638 * t887 + t817) - t760 - (t697 * t709 + t713 * t749) * t888 + t854 * t475 + t855 * t468 + ((-t591 - t806) * pkin(5) + t730 - t887 * t837) * t492) * MDP(30) + (pkin(1) * t821 + t622 * t758 + (pkin(8) * t826 + g(3)) * t868 + t764 - t814) * MDP(10) + (pkin(2) * t535 - t849 * t668 + t534 * t812 - t625 * t602 + (-t583 * t668 - t891) * t712 + (t550 - t723) * t708) * MDP(17) + (t527 * t812 + t535 * t661 - t540 * t668 - t845 * t602 + (t521 * t668 + t891) * t712 + (-t482 + t723) * t708) * MDP(20) + (t482 * t661 - t527 * t540 - t525 * t542 - g(1) * t816 - g(2) * t817 - t760 + t845 * t521 + ((t525 * t712 + t527 * t708) * qJD(3) + t727) * pkin(9)) * MDP(21) + (-g(3) * t868 - t540 * t600 - t542 * t602 + t727 + (-t716 + t829) * t699 - t904 * t527 - t905 * t525 + (t600 * t837 - t879) * pkin(9)) * MDP(18) + (-t602 * t745 - t879) * MDP(11) + (-t532 * t708 - t594 * t745) * MDP(26) + (pkin(1) * t709 * t869 + t625 * t758 + t732 - t780) * MDP(9) + (-t495 * t708 + t762 * t594 + (-t594 * t833 + t881 - t909) * t712) * MDP(24) + (-t713 * t769 + t801) * MDP(6) + t736 + (t709 * t769 + t687) * MDP(7) + (-t496 * t708 + t763 * t594 + (t594 * t834 + t529 + t877) * t712) * MDP(25) + t668 * MDP(15) * t812 + (t668 * t837 + t618 * t712 + (t600 * t709 - t668 * t862) * t840) * MDP(14) + (t468 * t592 + t475 * t591 + t495 * t553 - t496 * t560 - t855 * t558 - t854 * t556 + (-t468 * t707 + t475 * t711) * t837 + (t461 * t707 - t462 * t711 + (t468 * t711 + t475 * t707) * qJD(5) + t732) * t712) * MDP(29) + (t495 * t707 * t712 + (-t711 * t832 + t762) * t558) * MDP(22) + (-t535 * t712 + t602 * t778 + (-t716 - t829) * t708 + t905 * t600) * MDP(12) + (t482 * t712 + t521 * t904 - t525 * t812 + t542 * t668 - t600 * t845 - t661 * t716 - t718) * MDP(19) + (-(-t643 * t707 + t647) * t532 + t464 * t708 + t671 * t496 - g(1) * (-t639 * t864 + t640 * t711) - g(2) * (-t637 * t864 + t638 * t711) - g(3) * t733 + (-t643 * t833 + t707 * t915 - t908) * t594 + t844 * t556 - t763 * t506 + (t473 * t711 - t477 * t668 - t506 * t834) * t712) * MDP(27) + (t556 * t592 + t558 * t591 + (-t556 * t707 + t558 * t711) * t837 + (t882 + t496 * t707 + (t556 * t711 + t558 * t707) * qJD(5)) * t712) * MDP(23) - t709 * MDP(4) * t821 + t841 * MDP(5) * t869; MDP(11) * t875 + t897 * MDP(12) + t722 * MDP(13) + (-t602 * t668 - t716) * MDP(14) + t618 * MDP(15) + (-t583 * t602 + t726 - t880) * MDP(16) + (t533 * t668 - t725) * MDP(17) + (pkin(3) * t535 - qJ(4) * t716 + (-t527 - t534) * t602) * MDP(18) + (t721 + t880 - 0.2e1 * t893) * MDP(19) + (t551 * t602 + t668 * t828 + 0.2e1 * t610 - t651 + t725) * MDP(20) + (-t481 * qJ(4) - t485 * pkin(3) - t521 * t551 - t525 * t534 - g(1) * (qJ(4) * t578 - t566) - g(2) * (qJ(4) * t574 - t564) - g(3) * t794 + t828 * t527) * MDP(21) + (-t707 * t876 - t882) * MDP(22) + ((-t496 - t876) * t711 + (t495 + t878) * t707) * MDP(23) + (-t707 * t788 - t529) * MDP(24) + (-t711 * t788 + t881) * MDP(25) + (qJ(4) * t496 - t508 * t594 + t902 * t556 + t900 * t711 + ((t526 + t831) * t594 + t731) * t707) * MDP(27) + (-qJ(4) * t495 + t852 * t594 + t902 * t558 - t900 * t707 + (t594 * t831 + t731) * t711) * MDP(28) + (-t495 * t656 + t496 * t655 - t847 * t556 - t848 * t558 - t707 * t917 - t711 * t918 + t740) * MDP(29) + (-t462 * t655 - t461 * t656 + t467 * t798 - g(1) * (t577 * t706 + t578 * t798 - t566) - g(2) * (t573 * t706 + t574 * t798 - t564) - g(3) * (t635 * t706 + t636 * t798 - t629) + (t594 * t892 + t902) * t492 + t847 * t475 + t848 * t468) * MDP(30) + (t583 * MDP(17) + (t525 + t828) * MDP(18) + t551 * MDP(19) - t521 * MDP(20) + t558 * MDP(24) - t556 * MDP(25) + t594 * MDP(26) + t477 * MDP(27) - t478 * MDP(28) - MDP(12) * t600) * t600; t722 * MDP(18) + (t618 - t875) * MDP(19) + (-t668 ^ 2 - t897) * MDP(20) + (-t527 * t668 + t721 - t893) * MDP(21) + (-t529 + t877) * MDP(27) + MDP(28) * t909 + (t492 * t668 - t740) * MDP(30) + (-MDP(28) * t788 + MDP(29) * t916 + MDP(30) * t918) * t711 + (t532 * MDP(28) + (t558 * t602 - t496 + t835) * MDP(29) + t917 * MDP(30) - MDP(27) * t788) * t707; t558 * t556 * MDP(22) + (-t555 + t898) * MDP(23) - t916 * MDP(24) + (t876 - t496) * MDP(25) - t532 * MDP(26) + (t478 * t594 - t506 * t558 + t464 + t901) * MDP(27) + (g(1) * t544 + g(2) * t913 - g(3) * t572 + t477 * t594 + t506 * t556 + t743) * MDP(28) + (pkin(5) * t495 - t556 * t856) * MDP(29) + (t856 * t475 + (-t492 * t558 + t461 + t901) * pkin(5)) * MDP(30); (-t555 - t898) * MDP(29) + (t468 * t558 + t475 * t556 + t467 + t739) * MDP(30);];
tau  = t1;
