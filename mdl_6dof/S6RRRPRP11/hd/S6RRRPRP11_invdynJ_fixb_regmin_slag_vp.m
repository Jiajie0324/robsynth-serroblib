% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP11_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:49:06
% EndTime: 2019-03-09 17:49:30
% DurationCPUTime: 10.89s
% Computational Cost: add. (8688->635), mult. (21034->829), div. (0->0), fcn. (16427->10), ass. (0->299)
t248 = sin(qJ(3));
t253 = cos(qJ(2));
t245 = sin(pkin(6));
t377 = qJD(1) * t245;
t350 = t253 * t377;
t318 = t248 * t350;
t374 = qJD(3) * t248;
t444 = t318 - t374;
t208 = -qJD(3) + t350;
t249 = sin(qJ(2));
t405 = cos(pkin(6));
t332 = t405 * qJD(1);
t315 = pkin(1) * t332;
t165 = pkin(8) * t350 + t249 * t315;
t460 = -pkin(3) * t444 - qJD(4) * t248 - t165;
t252 = cos(qJ(3));
t459 = -t460 + t208 * (pkin(10) * t248 - qJ(4) * t252);
t351 = t249 * t377;
t162 = -pkin(8) * t351 + t253 * t315;
t308 = pkin(2) * t249 - pkin(9) * t253;
t163 = t308 * t377;
t328 = -t248 * t162 + t163 * t252;
t372 = qJD(3) * t252;
t387 = t252 * t253;
t433 = pkin(4) + pkin(9);
t434 = pkin(3) + pkin(10);
t458 = t433 * t372 - (pkin(4) * t387 - t249 * t434) * t377 + t328;
t445 = t252 * t350 - t372;
t338 = -qJ(4) * t248 - pkin(2);
t210 = t433 * t248;
t457 = -qJD(5) * t210 + t459;
t297 = t332 + qJD(2);
t124 = pkin(9) * t297 + t165;
t295 = -pkin(2) * t253 - pkin(9) * t249 - pkin(1);
t133 = t295 * t377;
t73 = t248 * t124 - t252 * t133;
t385 = -qJD(4) - t73;
t247 = sin(qJ(5));
t251 = cos(qJ(5));
t131 = t247 * t351 - t251 * t318;
t373 = qJD(3) * t251;
t456 = t248 * t373 + t131;
t362 = t249 * qJDD(1);
t340 = t245 * t362;
t365 = qJD(1) * qJD(2);
t341 = t253 * t365;
t455 = t245 * t341 + t340;
t250 = sin(qJ(1));
t430 = cos(qJ(1));
t310 = t405 * t430;
t178 = t249 * t310 + t250 * t253;
t352 = t245 * t430;
t113 = t178 * t248 + t252 * t352;
t177 = t249 * t250 - t253 * t310;
t454 = t113 * t247 + t177 * t251;
t453 = t113 * t251 - t177 * t247;
t277 = qJD(3) * t297;
t326 = t405 * qJDD(1);
t292 = t326 + qJDD(2);
t267 = t248 * t277 - t252 * t292;
t339 = t248 * t362;
t347 = t249 * t372;
t375 = qJD(2) * t253;
t256 = (qJD(1) * (t248 * t375 + t347) + t339) * t245 + t267;
t140 = t248 * t351 - t252 * t297;
t364 = qJDD(1) * t253;
t227 = t245 * t364;
t342 = t249 * t365;
t313 = t245 * t342;
t158 = qJDD(3) - t227 + t313;
t370 = qJD(5) * t251;
t371 = qJD(5) * t247;
t35 = -t140 * t370 - t251 * t158 - t208 * t371 - t247 * t256;
t314 = pkin(1) * qJD(2) * t405;
t293 = qJD(1) * t314;
t311 = pkin(1) * t326;
t353 = pkin(8) * t227 + t249 * t311 + t253 * t293;
t269 = -pkin(8) * t313 + t353;
t89 = pkin(9) * t292 + t269;
t284 = t308 * qJD(2);
t92 = (qJD(1) * t284 + qJDD(1) * t295) * t245;
t324 = t124 * t372 + t133 * t374 + t248 * t89 - t252 * t92;
t300 = qJDD(4) + t324;
t394 = t245 * t249;
t359 = t248 * t394;
t316 = qJD(3) * t359;
t75 = qJD(1) * t316 - t248 * t292 + (-t277 - t455) * t252;
t11 = -pkin(4) * t75 - t158 * t434 + t300;
t142 = t248 * t297 + t252 * t351;
t320 = pkin(8) * t455 + t249 * t293 - t253 * t311;
t90 = -pkin(2) * t292 + t320;
t22 = pkin(3) * t256 + t75 * qJ(4) - t142 * qJD(4) + t90;
t16 = pkin(10) * t256 + t22;
t442 = t142 * pkin(4) - t385;
t41 = t208 * t434 + t442;
t123 = -pkin(2) * t297 - t162;
t259 = -t142 * qJ(4) + t123;
t45 = t140 * t434 + t259;
t18 = t247 * t41 + t251 * t45;
t4 = -qJD(5) * t18 + t251 * t11 - t247 * t16;
t72 = -qJDD(5) + t75;
t98 = t140 * t247 - t208 * t251;
t1 = -pkin(5) * t72 + qJ(6) * t35 - qJD(6) * t98 + t4;
t134 = qJD(5) + t142;
t96 = -t251 * t140 - t208 * t247;
t15 = -qJ(6) * t96 + t18;
t287 = -t247 * t11 - t251 * t16 - t41 * t370 + t371 * t45;
t36 = qJD(5) * t98 + t158 * t247 - t251 * t256;
t2 = -qJ(6) * t36 - qJD(6) * t96 - t287;
t335 = t249 * t405;
t180 = -t250 * t335 + t253 * t430;
t392 = t245 * t252;
t117 = t180 * t248 - t250 * t392;
t175 = -t252 * t405 + t359;
t279 = g(1) * t117 + g(2) * t113 + g(3) * t175;
t17 = -t247 * t45 + t251 * t41;
t14 = -qJ(6) * t98 + t17;
t8 = pkin(5) * t134 + t14;
t452 = -(t134 * t8 - t2) * t247 + (t134 * t15 + t1) * t251 - t279;
t242 = t245 ^ 2;
t451 = 0.2e1 * t242;
t407 = qJ(4) * t445 + t460;
t450 = t458 * t251;
t418 = t134 * t96;
t449 = t35 - t418;
t417 = t134 * t98;
t448 = -t36 + t417;
t334 = t253 * t405;
t290 = pkin(1) * t334 - pkin(8) * t394;
t183 = -t252 * t434 + t338;
t447 = t183 * t371 - t210 * t370 - t458 * t247 + t251 * t459;
t446 = (qJDD(2) + 0.2e1 * t326) * t245;
t443 = -t158 * t248 + t208 * t372;
t391 = t245 * t253;
t111 = t175 * t251 + t247 * t391;
t179 = t249 * t430 + t250 * t334;
t83 = t117 * t251 - t179 * t247;
t441 = -g(1) * t83 - g(2) * t453 - g(3) * t111;
t193 = t208 * qJ(4);
t74 = t252 * t124 + t248 * t133;
t53 = -pkin(4) * t140 + t74;
t46 = -t193 + t53;
t438 = t134 * t46 + t434 * t72;
t436 = t98 ^ 2;
t435 = t142 ^ 2;
t255 = qJD(1) ^ 2;
t431 = t14 - t8;
t429 = pkin(3) * t158;
t428 = pkin(5) * t248;
t427 = pkin(5) * t251;
t426 = pkin(9) * t158;
t239 = t252 * pkin(9);
t237 = pkin(4) + t427;
t424 = pkin(9) + t237;
t390 = t248 * t253;
t273 = (t247 * t390 + t249 * t251) * t245;
t132 = qJD(1) * t273;
t330 = qJ(6) * t252 - t183;
t367 = qJD(6) * t252;
t423 = qJ(6) * t132 + t330 * t370 + t450 + (-qJ(6) * t374 + t367 + t457) * t247 - t445 * pkin(5);
t369 = qJD(5) * t252;
t346 = t247 * t369;
t422 = -t251 * t367 - t447 + (t346 + t456) * qJ(6);
t176 = t248 * t405 + t249 * t392;
t379 = pkin(1) * t335 + pkin(8) * t391;
t156 = pkin(9) * t405 + t379;
t380 = pkin(2) * t391 + pkin(9) * t394;
t157 = -pkin(1) * t245 - t380;
t329 = -t248 * t156 + t157 * t252;
t79 = pkin(3) * t391 - t329;
t54 = pkin(4) * t176 + pkin(10) * t391 + t79;
t155 = -pkin(2) * t405 - t290;
t169 = t175 * pkin(3);
t331 = t176 * qJ(4) - t169;
t77 = t155 - t331;
t62 = t175 * pkin(10) + t77;
t421 = t247 * t54 + t251 * t62;
t404 = qJ(4) * t140;
t66 = t142 * t434 + t404;
t420 = t247 * t53 + t251 * t66;
t416 = t208 * t74;
t415 = t208 * t96;
t414 = t208 * t98;
t413 = t247 * t72;
t412 = t251 * t35;
t69 = t251 * t72;
t410 = t75 * t248;
t386 = qJ(6) + t434;
t402 = qJ(6) * t142;
t48 = t251 * t53;
t409 = -qJD(6) * t251 + t386 * t371 + pkin(5) * t140 - t48 - (-t66 - t402) * t247;
t196 = t386 * t251;
t408 = -qJD(5) * t196 - qJD(6) * t247 - t251 * t402 - t420;
t382 = t252 * t162 + t248 * t163;
t80 = -qJ(4) * t351 - t382;
t406 = pkin(4) * t318 - t433 * t374 + t80;
t401 = t142 * t140;
t150 = t158 * qJ(4);
t397 = t177 * t252;
t396 = t179 * t252;
t395 = t242 * t255;
t393 = t245 * t250;
t389 = t251 * t252;
t388 = t251 * t253;
t383 = t252 * t156 + t248 * t157;
t381 = t251 * t183 + t247 * t210;
t345 = t245 * t375;
t167 = pkin(8) * t345 + t249 * t314;
t211 = t252 * pkin(4) + t239;
t243 = t249 ^ 2;
t378 = -t253 ^ 2 + t243;
t376 = qJD(2) * t249;
t368 = qJD(5) * t434;
t366 = t142 * qJD(3);
t361 = qJ(4) * t391;
t360 = t253 * t395;
t358 = t245 * t388;
t357 = t245 * t387;
t356 = -pkin(3) * t397 + t177 * t338;
t355 = -pkin(3) * t396 + t179 * t338;
t349 = t245 * t376;
t343 = pkin(1) * t451;
t337 = pkin(5) * t247 + qJ(4);
t336 = -t247 * t62 + t251 * t54;
t114 = t178 * t252 - t248 * t352;
t327 = t134 * t247;
t325 = t124 * t374 - t133 * t372 - t248 * t92 - t252 * t89;
t118 = t180 * t252 + t248 * t393;
t321 = t430 * pkin(1) + t180 * pkin(2) + t118 * pkin(3) + pkin(8) * t393;
t309 = t245 * t255 * t405;
t307 = g(1) * t113 - g(2) * t117;
t306 = -g(1) * t114 + g(2) * t118;
t305 = g(1) * t179 + g(2) * t177;
t304 = -g(1) * t177 + g(2) * t179;
t303 = g(1) * t180 + g(2) * t178;
t302 = t247 * t374 - t132;
t299 = g(3) * (pkin(3) * t357 + t248 * t361 + t380);
t296 = 0.2e1 * t332 + qJD(2);
t294 = -pkin(1) * t250 - t178 * pkin(2) - pkin(3) * t114 + pkin(8) * t352;
t78 = t361 - t383;
t164 = t245 * t284;
t166 = t290 * qJD(2);
t291 = -t156 * t372 - t157 * t374 + t164 * t252 - t248 * t166;
t191 = qJD(4) * t208;
t21 = -t150 + t191 + t325;
t246 = -qJ(6) - pkin(10);
t289 = -t246 * t252 + t247 * t428;
t286 = -t134 * t327 - t69;
t110 = -t316 + (qJD(3) * t405 + t345) * t252;
t30 = pkin(4) * t110 - t349 * t434 - t291;
t109 = qJD(3) * t176 + t248 * t345;
t275 = -qJ(4) * t110 - qJD(4) * t176 + t167;
t34 = t109 * t434 + t275;
t285 = t247 * t30 + t251 * t34 + t54 * t370 - t371 * t62;
t282 = t208 * t252;
t281 = -t156 * t374 + t157 * t372 + t248 * t164 + t252 * t166;
t278 = -g(1) * t118 - g(2) * t114 - g(3) * t176;
t272 = -t134 ^ 2 * t251 + t413;
t13 = -pkin(4) * t256 - t21;
t271 = t13 + t278;
t270 = -g(3) * t391 + t305;
t63 = -pkin(4) * t175 - t78;
t25 = t300 - t429;
t268 = -t21 * t252 + t25 * t248 - t303;
t266 = -qJD(5) * t421 - t247 * t34 + t251 * t30;
t265 = t278 - t325;
t264 = t279 - t324;
t263 = pkin(9) * qJD(3) * t208 + t270;
t38 = -qJ(4) * t349 + qJD(4) * t391 - t281;
t262 = -t140 * t208 - t75;
t31 = -pkin(4) * t109 - t38;
t61 = t140 * pkin(3) + t259;
t261 = t142 * t61 + qJDD(4) - t264;
t258 = pkin(9) * t443 + g(1) * t396 + g(2) * t397 - g(3) * t357;
t7 = t36 * pkin(5) + qJDD(6) + t13;
t201 = -pkin(3) * t252 + t338;
t195 = t386 * t247;
t187 = t251 * t210;
t112 = -t175 * t247 + t358;
t106 = t117 * pkin(3);
t104 = t113 * pkin(3);
t100 = -qJ(6) * t389 + t381;
t95 = t96 ^ 2;
t93 = t247 * t330 + t187 + t428;
t91 = pkin(3) * t142 + t404;
t84 = t117 * t247 + t179 * t251;
t82 = -pkin(3) * t351 - t328;
t67 = t193 - t74;
t65 = pkin(3) * t208 - t385;
t59 = qJD(5) * t111 + t109 * t247 + t251 * t349;
t58 = -t109 * t251 - qJD(5) * t358 + (qJD(5) * t175 + t349) * t247;
t44 = pkin(3) * t109 + t275;
t42 = -pkin(3) * t349 - t291;
t32 = pkin(5) * t96 + qJD(6) + t46;
t23 = qJ(6) * t111 + t421;
t20 = pkin(5) * t176 + qJ(6) * t112 + t336;
t6 = -qJ(6) * t58 + qJD(6) * t111 + t285;
t5 = pkin(5) * t110 - qJ(6) * t59 + qJD(6) * t112 + t266;
t3 = [qJDD(1), g(1) * t250 - g(2) * t430, g(1) * t430 + g(2) * t250 (qJDD(1) * t243 + 0.2e1 * t249 * t341) * t242 (t253 * t362 - t365 * t378) * t451, t249 * t446 + t296 * t345, t253 * t446 - t296 * t349, t292 * t405, -t167 * t297 + t290 * t292 - t320 * t405 + g(1) * t178 - g(2) * t180 + (-t342 + t364) * t343, -t166 * t297 - t379 * t292 - t269 * t405 + (-t341 - t362) * t343 + t304, t110 * t142 - t176 * t75, -t142 * t109 - t110 * t140 + t75 * t175 - t176 * t256, -t110 * t208 + t158 * t176 + (t142 * t376 + t253 * t75) * t245, t109 * t208 - t175 * t158 + (t267 * t253 - t140 * t376 - (-qJD(1) * t347 - t248 * t341 - t339) * t391) * t245 (-t158 * t253 - t208 * t376) * t245, t123 * t109 + t167 * t140 + t155 * t256 + t158 * t329 + t90 * t175 - t208 * t291 + t324 * t391 - t349 * t73 - t306, t281 * t208 - t383 * t158 + t167 * t142 - t155 * t75 + t90 * t176 + t123 * t110 + (-t253 * t325 - t376 * t74) * t245 - t307, t67 * t109 + t65 * t110 + t38 * t140 + t42 * t142 + t21 * t175 + t25 * t176 + t256 * t78 - t79 * t75 - t304, -t61 * t109 - t44 * t140 + t79 * t158 - t22 * t175 - t42 * t208 - t25 * t391 - t256 * t77 + t349 * t65 + t306, -t110 * t61 - t142 * t44 - t158 * t78 - t176 * t22 + t208 * t38 + t75 * t77 + (t21 * t253 - t376 * t67) * t245 + t307, t22 * t77 + t61 * t44 + t21 * t78 + t67 * t38 + t25 * t79 + t65 * t42 - g(1) * (-pkin(9) * t177 - qJ(4) * t113 + t294) - g(2) * (pkin(9) * t179 + qJ(4) * t117 + t321) t112 * t35 + t59 * t98, -t111 * t35 + t112 * t36 - t58 * t98 - t59 * t96, t110 * t98 + t112 * t72 + t134 * t59 - t176 * t35, -t110 * t96 - t111 * t72 - t134 * t58 - t176 * t36, t110 * t134 - t176 * t72, g(1) * t454 - g(2) * t84 + t17 * t110 - t13 * t111 + t266 * t134 + t4 * t176 + t31 * t96 - t336 * t72 + t63 * t36 + t46 * t58, g(1) * t453 - g(2) * t83 - t18 * t110 - t13 * t112 - t285 * t134 + t287 * t176 + t31 * t98 - t63 * t35 + t421 * t72 + t46 * t59, t1 * t112 + t111 * t2 - t15 * t58 + t20 * t35 - t23 * t36 - t5 * t98 - t59 * t8 - t6 * t96 - t306, t2 * t23 + t15 * t6 + t1 * t20 + t8 * t5 + t7 * (-pkin(5) * t111 + t63) + t32 * (pkin(5) * t58 + t31) - g(1) * (-t113 * t337 + t114 * t246 - t177 * t424 + t294) - g(2) * (t117 * t337 - t118 * t246 + t179 * t424 + t321); 0, 0, 0, -t249 * t360, t378 * t395, -t253 * t309 + t340, t249 * t309 + t227, t292, pkin(1) * t249 * t395 + t165 * t297 + t270 - t320, pkin(1) * t360 + t162 * t297 + (pkin(8) * t365 + g(3)) * t394 + t303 - t353, -t142 * t282 - t410, t142 * t318 - t75 * t252 + (-t256 - t366) * t248 + t445 * t140 (-t142 * t249 + t208 * t387) * t377 - t443, t208 * t374 + t158 * t252 + (t140 * t249 - t208 * t390) * t377, t208 * t351, -pkin(2) * t256 - t123 * t444 - t165 * t140 + t208 * t328 - t90 * t252 + t351 * t73 + t258, pkin(2) * t75 - t382 * t208 + t74 * t351 - t165 * t142 + (-t123 * t208 - t426) * t252 + (-t263 + t90) * t248, -g(3) * t394 - t80 * t140 - t82 * t142 + t268 - t444 * t67 - t445 * t65 + (-t256 + t366) * t239 + (t140 * t374 - t410) * pkin(9), -t140 * t407 - t201 * t256 + t82 * t208 + t22 * t252 - t351 * t65 + t444 * t61 - t258, t67 * t351 + t201 * t75 - t208 * t80 - t407 * t142 + (t208 * t61 + t426) * t252 + (-t22 + t263) * t248, t22 * t201 - t67 * t80 - t65 * t82 - g(1) * t355 - g(2) * t356 - t299 + t407 * t61 + ((t248 * t67 + t252 * t65) * qJD(3) + t268) * pkin(9), t247 * t252 * t35 + (-t251 * t369 + t302) * t98, t131 * t98 + t132 * t96 + (-t247 * t96 + t251 * t98) * t374 + (t247 * t36 + t412 + (t247 * t98 + t251 * t96) * qJD(5)) * t252, -t248 * t35 + t302 * t134 + (-t134 * t370 + t413 - t414) * t252, -t248 * t36 + t456 * t134 + (t134 * t371 + t415 + t69) * t252, -t134 * t282 - t248 * t72 -(-t183 * t247 + t187) * t72 + t211 * t36 - t46 * t131 + t406 * t96 - t303 * t251 + (t247 * t305 - t373 * t46 + t4) * t248 - g(3) * t273 + (-t183 * t370 + t247 * t457 + t450) * t134 + (t13 * t251 - t17 * t208 - t371 * t46) * t252, t381 * t72 - t211 * t35 - t46 * t132 + t406 * t98 + t303 * t247 + (t46 * t247 * qJD(3) + t251 * t305 + t287) * t248 - g(3) * (-t247 * t249 + t248 * t388) * t245 + t447 * t134 + (-t13 * t247 + t18 * t208 - t370 * t46) * t252, -t100 * t36 + t131 * t15 + t132 * t8 + t35 * t93 - t423 * t98 - t422 * t96 + (t15 * t251 - t247 * t8) * t374 + (t1 * t247 - t2 * t251 + (t15 * t247 + t251 * t8) * qJD(5) + t270) * t252, t2 * t100 + t1 * t93 + t7 * (pkin(5) * t389 + t211) - g(1) * (-t179 * t289 + t180 * t424 + t355) - g(2) * (-t177 * t289 + t178 * t424 + t356) - t299 + t423 * t8 + ((-t131 - t346) * pkin(5) + t80) * t32 + (-g(3) * t237 * t249 + (t32 * pkin(4) * qJD(1) * t248 - g(3) * t289) * t253) * t245 + t422 * t15 - t32 * t424 * t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, -t140 ^ 2 + t435, t262, -t142 * t208 - t256, t158, -t123 * t142 + t264 - t416, t123 * t140 + t208 * t73 - t265, pkin(3) * t75 - qJ(4) * t256 + (-t67 - t74) * t142 + (t65 + t385) * t140, t140 * t91 + t261 + t416 - 0.2e1 * t429, -t140 * t61 + t142 * t91 + t208 * t385 + 0.2e1 * t150 - t191 + t265, -t21 * qJ(4) - t25 * pkin(3) - t61 * t91 - t65 * t74 - g(1) * (qJ(4) * t118 - t106) - g(2) * (qJ(4) * t114 - t104) - g(3) * t331 + t385 * t67, -t327 * t98 - t412 (-t36 - t417) * t251 + (t35 + t418) * t247, t140 * t98 + t286, -t140 * t96 + t272, t134 * t140, qJ(4) * t36 - t48 * t134 + t17 * t140 + t442 * t96 + t438 * t251 + ((t66 + t368) * t134 + t271) * t247, -qJ(4) * t35 + t420 * t134 - t18 * t140 + t442 * t98 - t438 * t247 + (t134 * t368 + t271) * t251, t195 * t36 - t196 * t35 - t408 * t96 - t409 * t98 - t452, -t2 * t195 - t1 * t196 + t7 * t337 - g(1) * (t117 * t246 + t118 * t337 - t106) - g(2) * (t113 * t246 + t114 * t337 - t104) - g(3) * (t175 * t246 + t176 * t337 - t169) + t409 * t8 + (t134 * t427 + t442) * t32 + t408 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262, t158 - t401, -t208 ^ 2 - t435, -t208 * t67 + t261 - t429, 0, 0, 0, 0, 0, t286 + t415, t272 + t414, t247 * t448 + t251 * t449, t208 * t32 + t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98 * t96, -t95 + t436, -t449, t448, -t72, t18 * t134 - t46 * t98 + t4 + t441, g(1) * t84 + g(2) * t454 - g(3) * t112 + t17 * t134 + t46 * t96 + t287, pkin(5) * t35 + t431 * t96, -t431 * t15 + (-t32 * t98 + t1 + t441) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95 - t436, t15 * t96 + t8 * t98 + t278 + t7;];
tau_reg  = t3;
