% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP11_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP11_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP11_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP11_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:49:08
% EndTime: 2019-03-09 17:49:25
% DurationCPUTime: 7.29s
% Computational Cost: add. (6189->462), mult. (16309->797), div. (0->0), fcn. (15026->8), ass. (0->232)
t143 = sin(qJ(3));
t141 = sin(pkin(6));
t147 = cos(qJ(2));
t245 = qJD(2) * t147;
t215 = t141 * t245;
t202 = t143 * t215;
t146 = cos(qJ(3));
t144 = sin(qJ(2));
t257 = t141 * t144;
t261 = cos(pkin(6));
t93 = t143 * t261 + t146 * t257;
t156 = t93 * qJD(3) + t202;
t226 = t143 * t257;
t92 = -t146 * t261 + t226;
t295 = 0.2e1 * t92 * t156;
t133 = t146 * pkin(9);
t243 = qJD(3) * t143;
t230 = pkin(9) * t243;
t132 = qJD(3) * t146;
t210 = t261 * qJD(3);
t66 = -qJD(3) * t226 + (t210 + t215) * t146;
t54 = t93 * t132 + t66 * t143;
t294 = pkin(9) * t54 - t156 * t133 + t230 * t92;
t293 = -t132 * t92 - t143 * t156 + t66 * t146 - t243 * t93;
t292 = -0.2e1 * t156 * t93 - 0.2e1 * t66 * t92;
t246 = qJD(2) * t144;
t253 = t143 * t147;
t256 = t141 * t147;
t276 = 0.2e1 * t141;
t290 = ((t132 * t144 + t143 * t245) * t256 + t210 * t253 - t246 * t92) * t276;
t274 = pkin(3) + pkin(10);
t249 = qJ(6) + t274;
t223 = pkin(1) * t261;
t206 = t144 * t223;
t170 = pkin(9) * t261 + t206;
t164 = t143 * t170;
t183 = pkin(2) * t146 + pkin(8) * t143 + pkin(3);
t224 = -pkin(9) * t144 - pkin(1);
t200 = t146 * t224;
t154 = t164 + t93 * pkin(4) + (-t200 + (pkin(10) + t183) * t147) * t141;
t211 = qJD(2) * t261;
t199 = t144 * t211;
t34 = pkin(1) * t199 + pkin(3) * t156 + pkin(8) * t215 - t66 * qJ(4) - t93 * qJD(4);
t289 = -pkin(10) * t156 - qJD(5) * t154 - t34;
t231 = pkin(8) * t256;
t161 = t170 + t231;
t288 = qJD(3) * t161 - qJD(2) * t141 * (pkin(2) * t144 - pkin(9) * t147);
t284 = -pkin(8) * t257 + t147 * t223;
t167 = qJD(2) * t284;
t184 = -pkin(2) * t147 + t224;
t177 = t184 * t141;
t287 = qJD(3) * t177 + t167;
t258 = qJ(4) * t146;
t286 = t274 * t143 - t258;
t259 = qJ(4) * t143;
t285 = t274 * t146 + t259;
t142 = sin(qJ(5));
t137 = t142 ^ 2;
t145 = cos(qJ(5));
t139 = t145 ^ 2;
t248 = t137 - t139;
t237 = qJD(5) * t146;
t217 = t142 * t237;
t242 = qJD(3) * t145;
t220 = t143 * t242;
t95 = t217 + t220;
t283 = -qJD(5) * t256 - t156;
t140 = t146 ^ 2;
t209 = qJD(3) * (t143 ^ 2 - t140);
t282 = t248 * qJD(5);
t116 = t146 * pkin(4) + t133;
t240 = qJD(4) * t146;
t280 = qJD(3) * t285 - qJD(5) * t116 - t240;
t126 = t141 * t246;
t152 = t143 * t287 + t146 * t288;
t208 = pkin(3) * t126;
t32 = t152 - t208;
t150 = t66 * pkin(4) - pkin(10) * t126 + t32;
t238 = qJD(5) * t145;
t84 = -pkin(2) * t261 - t284;
t159 = -t93 * qJ(4) + t84;
t47 = t274 * t92 + t159;
t4 = t142 * t289 + t145 * t150 - t238 * t47;
t46 = t126 * t145 - t142 * t283 + t238 * t92;
t68 = -t92 * t142 + t145 * t256;
t149 = -t46 * qJ(6) + t68 * qJD(6) + t4;
t272 = t66 * pkin(5);
t1 = t149 + t272;
t15 = -t142 * t47 + t145 * t154;
t11 = pkin(5) * t93 + qJ(6) * t68 + t15;
t16 = t142 * t154 + t145 * t47;
t67 = t142 * t256 + t145 * t92;
t14 = qJ(6) * t67 + t16;
t193 = t11 * t142 - t14 * t145;
t239 = qJD(5) * t142;
t3 = -t142 * t150 + t145 * t289 + t239 * t47;
t45 = (qJD(5) * t92 + t126) * t142 + t283 * t145;
t2 = t45 * qJ(6) - t67 * qJD(6) + t3;
t279 = -qJD(5) * t193 + t1 * t145 - t142 * t2;
t278 = -t146 * t202 + (t92 * t143 - t93 * t146) * qJD(3);
t277 = -0.2e1 * t141;
t275 = 0.2e1 * qJD(4);
t273 = pkin(4) + pkin(9);
t271 = pkin(9) * t141;
t57 = t143 * t177 + t146 * t161;
t269 = t142 * t45;
t268 = t142 * t68;
t267 = t145 * t46;
t266 = t145 * t67;
t117 = qJ(4) * t126;
t214 = qJD(4) * t256;
t35 = t143 * t288 - t146 * t287;
t27 = -t117 + t35 + t214;
t23 = -pkin(4) * t156 - t27;
t265 = t23 * t142;
t264 = t23 * t145;
t102 = -pkin(2) - t285;
t227 = t143 * t273;
t63 = t145 * t102 + t142 * t227;
t260 = qJ(4) * t142;
t255 = t142 * t143;
t254 = t142 * t274;
t252 = t145 * t146;
t251 = t145 * t274;
t244 = qJD(3) * t142;
t241 = qJD(3) * t147;
t236 = qJD(5) * t274;
t235 = t142 * qJD(6);
t234 = t143 * qJD(4);
t233 = t145 * qJD(6);
t58 = 0.2e1 * t93 * t66;
t232 = -0.2e1 * pkin(2) * qJD(3);
t229 = pkin(9) * t132;
t228 = pkin(5) * t239;
t136 = t141 ^ 2;
t222 = t136 * t245;
t221 = t142 * t132;
t219 = t146 * t241;
t216 = t145 * t237;
t213 = t143 * t132;
t212 = t142 * t238;
t110 = t249 * t145;
t107 = t145 * t227;
t207 = t273 * t132;
t204 = t140 * t212;
t203 = t144 * t222;
t201 = t142 * t220;
t198 = -t102 * t238 + t145 * t207;
t131 = pkin(5) * t142 + qJ(4);
t69 = -pkin(5) * t217 + (-pkin(5) * t145 - t273) * t243;
t197 = -t131 * t237 + t69;
t195 = -qJD(5) * t273 + qJD(4);
t194 = -pkin(3) * t146 - t259;
t192 = -t142 * t15 + t145 * t16;
t59 = pkin(5) * t143 + t107 + (qJ(6) * t146 - t102) * t142;
t60 = -qJ(6) * t252 + t63;
t191 = -t142 * t59 + t145 * t60;
t62 = -t102 * t142 + t107;
t190 = -t142 * t62 + t145 * t63;
t189 = t142 * t67 - t145 * t68;
t188 = t32 * t143 - t27 * t146;
t187 = t143 * t152 - t35 * t146;
t50 = qJ(4) * t256 - t57;
t48 = -pkin(4) * t92 - t50;
t31 = -pkin(5) * t67 + t48;
t9 = t45 * pkin(5) + t23;
t181 = -t142 * t9 - t238 * t31;
t180 = t145 * t9 - t239 * t31;
t179 = -t147 * t66 + t246 * t93;
t178 = -t142 * t66 - t238 * t93;
t55 = t145 * t66 - t239 * t93;
t43 = t102 * t239 - qJD(5) * t107 - t145 * (qJD(3) * t286 - t234) - t142 * t207;
t175 = t143 * t241 + t146 * t246;
t97 = t142 * t243 - t216;
t101 = t206 + t231;
t108 = t273 * t243;
t171 = qJD(5) * t286 - t108;
t125 = pkin(5) * t238 + qJD(4);
t91 = pkin(5) * t252 + t116;
t169 = -qJD(5) * t91 - t125 * t146 + t131 * t243;
t81 = t175 * t141;
t165 = qJD(3) * t194 + t240;
t163 = -pkin(9) * t126 * t143 + t219 * t271;
t162 = qJD(5) * t192 - t3 * t142 + t4 * t145;
t44 = qJ(4) * t221 + (-t274 * qJD(3) + t195) * t255 + t198;
t6 = qJD(5) * t190 - t142 * t43 + t145 * t44;
t155 = qJ(6) * t216 + t146 * t235 + (-qJD(3) * t249 + t195) * t255 + t198;
t135 = qJ(4) * t275;
t124 = -0.2e1 * t212;
t123 = 0.2e1 * t212;
t122 = -0.2e1 * t213;
t121 = 0.2e1 * t213;
t112 = -pkin(2) + t194;
t111 = -0.2e1 * t203;
t109 = t249 * t142;
t105 = -0.2e1 * t209;
t104 = 0.2e1 * t282;
t96 = -t143 * t238 - t221;
t94 = t132 * t145 - t143 * t239;
t90 = -t234 + (pkin(3) * t143 - t258) * qJD(3);
t88 = qJD(2) * t101;
t87 = -qJD(5) * t110 - t235;
t86 = t239 * t249 - t233;
t80 = (t143 * t246 - t219) * t141;
t77 = -0.2e1 * t139 * t213 - 0.2e1 * t204;
t76 = -0.2e1 * t137 * t213 + 0.2e1 * t204;
t74 = -t237 * t248 - t201;
t73 = 0.4e1 * t146 * t212 - t243 * t248;
t71 = 0.2e1 * t142 * t209 - 0.2e1 * t143 * t216;
t70 = 0.2e1 * t143 * t217 + 0.2e1 * t145 * t209;
t65 = -0.2e1 * t140 * t282 - 0.4e1 * t146 * t201;
t56 = -t164 + (-pkin(8) * t253 + t146 * t184) * t141;
t51 = t164 + (t147 * t183 - t200) * t141;
t49 = t92 * pkin(3) + t159;
t41 = t142 * t87 + t145 * t86 + (-t109 * t145 + t110 * t142) * qJD(5);
t33 = -qJ(6) * t95 + t146 * t233 + t43;
t30 = -0.2e1 * t68 * t46;
t29 = -0.2e1 * t67 * t45;
t28 = (pkin(5) + t260) * t132 + t155;
t26 = t239 * t68 + t267;
t25 = -t238 * t67 + t269;
t20 = 0.2e1 * t46 * t93 - 0.2e1 * t66 * t68;
t19 = -0.2e1 * t45 * t93 + 0.2e1 * t66 * t67;
t18 = t68 * t216 + (-t146 * t46 - t243 * t68) * t142;
t17 = t67 * t217 + (t146 * t45 + t243 * t67) * t145;
t13 = (t244 * t93 + t46) * t143 + (-qJD(3) * t68 + t178) * t146;
t12 = (t242 * t93 - t45) * t143 + (qJD(3) * t67 - t55) * t146;
t10 = 0.2e1 * t45 * t68 + 0.2e1 * t46 * t67;
t8 = -t269 - t267 + (t266 - t268) * qJD(5);
t7 = -qJD(5) * t189 - t142 * t46 - t145 * t45;
t5 = t189 * t243 + (t269 - t267 + (-t266 - t268) * qJD(5)) * t146;
t21 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t203, 0.2e1 * (-t144 ^ 2 + t147 ^ 2) * t136 * qJD(2), 0.2e1 * t211 * t256, t111, t199 * t277, 0, -0.2e1 * t136 * pkin(1) * t246 - 0.2e1 * t261 * t88, -0.2e1 * pkin(1) * t222 - 0.2e1 * t167 * t261, -0.2e1 * t101 * t126 + 0.2e1 * t167 * t256 - 0.2e1 * t215 * t284 + 0.2e1 * t257 * t88, 0.2e1 * t101 * t167 - 0.2e1 * t284 * t88, t58, t292, t179 * t276, t295, t290, t111, 0.2e1 * t126 * t56 + 0.2e1 * t152 * t256 + 0.2e1 * t156 * t84 + 0.2e1 * t88 * t92, 0.2e1 * t66 * t84 + 0.2e1 * t88 * t93 + 0.2e1 * (-t147 * t35 - t246 * t57) * t141, 0.2e1 * t152 * t93 - 0.2e1 * t156 * t57 + 0.2e1 * t35 * t92 - 0.2e1 * t56 * t66, -0.2e1 * t152 * t56 - 0.2e1 * t35 * t57 + 0.2e1 * t84 * t88, t111, t179 * t277, -t290, t58, t292, t295, 0.2e1 * t156 * t50 + 0.2e1 * t27 * t92 + 0.2e1 * t32 * t93 + 0.2e1 * t51 * t66, 0.2e1 * t126 * t51 - 0.2e1 * t156 * t49 - 0.2e1 * t256 * t32 - 0.2e1 * t34 * t92, -0.2e1 * t34 * t93 - 0.2e1 * t49 * t66 + 0.2e1 * (t147 * t27 - t246 * t50) * t141, 0.2e1 * t27 * t50 + 0.2e1 * t32 * t51 + 0.2e1 * t34 * t49, t30, t10, t20, t29, t19, t58, 0.2e1 * t15 * t66 - 0.2e1 * t23 * t67 + 0.2e1 * t4 * t93 + 0.2e1 * t45 * t48, -0.2e1 * t16 * t66 - 0.2e1 * t23 * t68 + 0.2e1 * t3 * t93 + 0.2e1 * t46 * t48, -0.2e1 * t15 * t46 - 0.2e1 * t16 * t45 - 0.2e1 * t3 * t67 + 0.2e1 * t4 * t68, 0.2e1 * t15 * t4 - 0.2e1 * t16 * t3 + 0.2e1 * t23 * t48, t30, t10, t20, t29, t19, t58, 0.2e1 * t1 * t93 + 0.2e1 * t11 * t66 + 0.2e1 * t31 * t45 - 0.2e1 * t67 * t9, -0.2e1 * t14 * t66 + 0.2e1 * t2 * t93 + 0.2e1 * t31 * t46 - 0.2e1 * t68 * t9, 0.2e1 * t1 * t68 - 0.2e1 * t11 * t46 - 0.2e1 * t14 * t45 - 0.2e1 * t2 * t67, 0.2e1 * t1 * t11 - 0.2e1 * t14 * t2 + 0.2e1 * t31 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, 0, -t126, 0, -t88, -t167, 0, 0, t54, t293, t80, t278, t81, 0, -pkin(2) * t156 - t88 * t146 + t243 * t84 + t163, -pkin(2) * t66 + t132 * t84 + t143 * t88 - t175 * t271, -t132 * t56 - t243 * t57 + t187 + t294, -pkin(2) * t88 + ((-t57 * t143 - t56 * t146) * qJD(3) + t187) * pkin(9), 0, -t80, -t81, t54, t293, t278, t132 * t51 + t243 * t50 + t188 + t294, -t112 * t156 + t34 * t146 - t243 * t49 - t90 * t92 - t163, pkin(9) * t81 - t112 * t66 - t132 * t49 - t143 * t34 - t90 * t93, t112 * t34 + t49 * t90 + ((t50 * t143 + t51 * t146) * qJD(3) + t188) * pkin(9), t18, t5, t13, t17, t12, t54, t108 * t67 + t116 * t45 + t44 * t93 + t62 * t66 + (-t242 * t48 + t4) * t143 + (qJD(3) * t15 - t239 * t48 + t264) * t146, t108 * t68 + t116 * t46 + t43 * t93 - t63 * t66 + (t244 * t48 + t3) * t143 + (-qJD(3) * t16 - t238 * t48 - t265) * t146, -t43 * t67 + t44 * t68 - t45 * t63 - t46 * t62 + t192 * t243 + (t142 * t4 + t145 * t3 + (t142 * t16 + t145 * t15) * qJD(5)) * t146, -t108 * t48 + t116 * t23 + t15 * t44 - t16 * t43 - t3 * t63 + t4 * t62, t18, t5, t13, t17, t12, t54, t28 * t93 + t45 * t91 + t59 * t66 - t67 * t69 + (-t242 * t31 + t1) * t143 + (qJD(3) * t11 + t180) * t146, t33 * t93 + t46 * t91 - t60 * t66 - t68 * t69 + (t244 * t31 + t2) * t143 + (-qJD(3) * t14 + t181) * t146, t28 * t68 - t33 * t67 - t45 * t60 - t46 * t59 - t193 * t243 + (t1 * t142 + t145 * t2 + (t11 * t145 + t14 * t142) * qJD(5)) * t146, t1 * t59 + t11 * t28 - t14 * t33 - t2 * t60 + t31 * t69 + t9 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t105, 0, t122, 0, 0, t143 * t232, t146 * t232, 0, 0, 0, 0, 0, t121, t105, t122, 0, -0.2e1 * t112 * t243 + 0.2e1 * t146 * t90, -0.2e1 * t112 * t132 - 0.2e1 * t143 * t90, 0.2e1 * t112 * t90, t76, t65, t71, t77, t70, t121, 0.2e1 * (-t116 * t242 + t44) * t143 + 0.2e1 * (qJD(3) * t62 - t108 * t145 - t116 * t239) * t146, 0.2e1 * (t116 * t244 + t43) * t143 + 0.2e1 * (-qJD(3) * t63 + t108 * t142 - t116 * t238) * t146, 0.2e1 * t190 * t243 + 0.2e1 * (t142 * t44 + t145 * t43 + (t142 * t63 + t145 * t62) * qJD(5)) * t146, -0.2e1 * t108 * t116 - 0.2e1 * t43 * t63 + 0.2e1 * t44 * t62, t76, t65, t71, t77, t70, t121, 0.2e1 * (-t242 * t91 + t28) * t143 + 0.2e1 * (qJD(3) * t59 + t145 * t69 - t239 * t91) * t146, 0.2e1 * (t244 * t91 + t33) * t143 + 0.2e1 * (-qJD(3) * t60 - t142 * t69 - t238 * t91) * t146, 0.2e1 * t191 * t243 + 0.2e1 * (t142 * t28 + t145 * t33 + (t142 * t60 + t145 * t59) * qJD(5)) * t146, 0.2e1 * t28 * t59 - 0.2e1 * t33 * t60 + 0.2e1 * t69 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t156, t126, -t152, t35, 0, 0, t126, -t66, t156, 0, 0, 0, -t66 * pkin(3) - qJ(4) * t156 - qJD(4) * t92, t152 - 0.2e1 * t208, 0.2e1 * t117 - t35 - 0.2e1 * t214, -pkin(3) * t32 - qJ(4) * t27 - qJD(4) * t50, t26, t7, t55, t25, t178, 0, -t66 * t251 + qJ(4) * t45 - qJD(4) * t67 + t265 + (t145 * t48 + t254 * t93) * qJD(5), t66 * t254 + qJ(4) * t46 - qJD(4) * t68 + t264 + (-t142 * t48 + t251 * t93) * qJD(5) (t274 * t46 - t4) * t145 + (t274 * t45 + t3) * t142 + ((-t274 * t67 - t16) * t145 + (t274 * t68 + t15) * t142) * qJD(5), t23 * qJ(4) + t48 * qJD(4) - t162 * t274, t26, t7, t55, t25, t178, 0, -t110 * t66 - t125 * t67 + t131 * t45 + t86 * t93 - t181, t109 * t66 - t125 * t68 + t131 * t46 - t87 * t93 + t180, t109 * t45 + t110 * t46 + t67 * t87 + t68 * t86 - t279, -t1 * t110 + t109 * t2 + t11 * t86 + t125 * t31 + t131 * t9 + t14 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, -t243, 0, -t229, t230, 0, 0, 0, -t132, t243, 0, 0, 0, t165, t229, -t230, t165 * pkin(9), -t74, t73, t94, t74, t96, 0, t171 * t142 - t145 * t280, t142 * t280 + t171 * t145, -t6, -t108 * qJ(4) + t116 * qJD(4) - t274 * t6, -t74, t73, t94, t74, t96, 0, -t110 * t132 + t142 * t197 + t143 * t86 - t145 * t169, t109 * t132 + t142 * t169 - t143 * t87 + t145 * t197 (-t109 * t243 - t146 * t87 - t28 + (-t110 * t146 - t60) * qJD(5)) * t145 + (t110 * t243 + t146 * t86 + t33 + (-t109 * t146 + t59) * qJD(5)) * t142, t109 * t33 - t110 * t28 + t125 * t91 + t131 * t69 + t59 * t86 + t60 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t275, t135, t124, t104, 0, t123, 0, 0, 0.2e1 * qJ(4) * t238 + 0.2e1 * qJD(4) * t142, -0.2e1 * qJ(4) * t239 + 0.2e1 * qJD(4) * t145, 0, t135, t124, t104, 0, t123, 0, 0, 0.2e1 * t125 * t142 + 0.2e1 * t131 * t238, 0.2e1 * t125 * t145 - 0.2e1 * t131 * t239, -0.2e1 * t41, -0.2e1 * t109 * t87 - 0.2e1 * t110 * t86 + 0.2e1 * t125 * t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t126, 0, t32, 0, 0, 0, 0, 0, 0, t55, t178, t8, t162, 0, 0, 0, 0, 0, 0, t55, t178, t8, t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, 0, t229, 0, 0, 0, 0, 0, 0, t94, t96, 0, t6, 0, 0, 0, 0, 0, 0, t94, t96, 0, qJD(5) * t191 - t142 * t33 + t145 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t45, t66, t4, t3, 0, 0, 0, 0, t46, 0, -t45, t66, t149 + 0.2e1 * t272, t2, -t46 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, t95, t132, t44, t43, 0, 0, 0, 0, t97, 0, t95, t132 (0.2e1 * pkin(5) + t260) * t132 + t155, t33, -t97 * pkin(5), t28 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, 0, -t238, 0, t142 * t236, t145 * t236, 0, 0, 0, 0, -t239, 0, -t238, 0, t86, -t87, t228, t86 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, -t238, 0, 0, 0, 0, 0, 0, 0, 0, -t239, -t238, 0, -t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t46, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t97, 0, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238, -t239, 0, t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t21;
