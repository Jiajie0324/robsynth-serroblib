% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 09:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:19:16
% EndTime: 2019-05-07 09:20:39
% DurationCPUTime: 54.94s
% Computational Cost: add. (148814->827), mult. (322143->1220), div. (0->0), fcn. (251215->10), ass. (0->629)
t1050 = sin(qJ(1));
t1054 = cos(qJ(1));
t1045 = sin(pkin(6));
t1046 = cos(pkin(6));
t1049 = sin(qJ(2));
t1053 = cos(qJ(2));
t1052 = cos(qJ(3));
t1048 = sin(qJ(3));
t1179 = t1045 * t1049;
t1166 = qJD(1) * t1179;
t1174 = qJDD(1) * t1045;
t1011 = -qJD(2) * t1166 + t1053 * t1174;
t1005 = -qJDD(3) + t1011;
t1194 = qJD(1) * t1046;
t1156 = qJD(2) + t1194;
t1000 = t1048 * t1166 - t1052 * t1156;
t1002 = t1048 * t1156 + t1052 * t1166;
t1190 = t1000 * t1002;
t1065 = t1005 + t1190;
t1260 = t1048 * t1065;
t1178 = t1045 * t1053;
t1030 = qJD(1) * t1178 - qJD(3);
t1026 = t1030 ^ 2;
t1247 = t1000 ^ 2;
t947 = -t1026 - t1247;
t853 = t1052 * t947 + t1260;
t1184 = t1030 * t1002;
t1173 = t1049 * qJDD(1);
t1193 = qJD(1) * t1053;
t1010 = (qJD(2) * t1193 + t1173) * t1045;
t1037 = qJDD(1) * t1046 + qJDD(2);
t943 = qJD(3) * t1002 + t1010 * t1048 - t1052 * t1037;
t897 = t943 - t1184;
t1123 = t1049 * t853 - t1053 * t897;
t1258 = t1052 * t1065;
t851 = t1048 * t947 - t1258;
t741 = -t1045 * t851 + t1046 * t1123;
t792 = t1049 * t897 + t1053 * t853;
t681 = t1050 * t792 + t1054 * t741;
t1340 = pkin(7) * t681;
t684 = t1050 * t741 - t1054 * t792;
t1339 = pkin(7) * t684;
t1066 = t1005 - t1190;
t1257 = t1052 * t1066;
t1246 = t1002 ^ 2;
t954 = t1246 + t1026;
t862 = t1048 * t954 + t1257;
t1106 = t1052 * t1010 + t1048 * t1037;
t904 = (qJD(3) - t1030) * t1000 - t1106;
t1121 = t1049 * t862 + t1053 * t904;
t1259 = t1048 * t1066;
t861 = t1052 * t954 - t1259;
t746 = t1045 * t861 + t1046 * t1121;
t795 = -t1049 * t904 + t1053 * t862;
t686 = t1050 * t795 + t1054 * t746;
t1338 = pkin(7) * t686;
t689 = t1050 * t746 - t1054 * t795;
t1337 = pkin(7) * t689;
t744 = t1045 * t1121 - t1046 * t861;
t1336 = pkin(8) * (t1045 * t744 + t1046 * t746);
t739 = t1045 * t1123 + t1046 * t851;
t1335 = pkin(8) * (t1045 * t739 + t1046 * t741);
t1334 = pkin(1) * t739;
t1333 = pkin(1) * t741;
t1332 = pkin(1) * t744;
t1331 = pkin(1) * t746;
t970 = t1247 - t1026;
t870 = t1052 * t970 + t1259;
t896 = t943 + t1184;
t1117 = t1049 * t870 + t1053 * t896;
t866 = t1048 * t970 - t1257;
t757 = -t1045 * t866 + t1046 * t1117;
t807 = -t1049 * t896 + t1053 * t870;
t1330 = t1050 * t757 - t1054 * t807;
t1329 = t1050 * t807 + t1054 * t757;
t1326 = pkin(8) * t792;
t1325 = pkin(8) * t795;
t1318 = t1045 * t1117 + t1046 * t866;
t1317 = pkin(2) * t851;
t1316 = pkin(2) * t861;
t1315 = pkin(9) * t851;
t1314 = pkin(9) * t853;
t1313 = pkin(9) * t861;
t1312 = pkin(9) * t862;
t971 = -t1246 + t1026;
t865 = t1052 * t971 - t1260;
t1309 = t1045 * t865;
t1305 = t1046 * t865;
t868 = t1048 * t971 + t1258;
t1303 = t1049 * t868;
t1302 = t1053 * t868;
t1047 = sin(qJ(5));
t1051 = cos(qJ(5));
t964 = -t1051 * t1000 - t1030 * t1047;
t966 = t1000 * t1047 - t1030 * t1051;
t912 = t966 * t964;
t1070 = qJD(3) * t1000 - t1106;
t940 = qJDD(5) - t1070;
t1283 = t912 - t940;
t1301 = pkin(5) * t1283;
t1245 = -2 * qJD(4);
t921 = t1247 + t1246;
t1300 = pkin(2) * t921;
t1299 = t1048 * t896;
t1298 = t1048 * t897;
t1294 = t1049 * t921;
t1293 = t1052 * t896;
t1200 = t1052 * t897;
t1289 = t1053 * t921;
t980 = t1000 * t1030;
t1288 = t1070 - t980;
t1182 = t1030 * t1052;
t1090 = -t1000 * t1182 + t1048 * t943;
t1165 = t1049 * t1190;
t1251 = t1053 * t1090 - t1165;
t1183 = t1030 * t1048;
t1149 = -t1000 * t1183 - t1052 * t943;
t1164 = t1053 * t1190;
t1254 = t1049 * t1090 + t1164;
t1272 = -t1045 * t1149 + t1046 * t1254;
t1287 = -t1050 * t1272 + t1054 * t1251;
t1148 = t1002 * t1183 - t1052 * t1070;
t1250 = t1053 * t1148 + t1165;
t1147 = -t1002 * t1182 - t1048 * t1070;
t1253 = t1049 * t1148 - t1164;
t1273 = -t1045 * t1147 + t1046 * t1253;
t1286 = -t1050 * t1273 + t1054 * t1250;
t1285 = t1050 * t1251 + t1054 * t1272;
t1284 = t1050 * t1250 + t1054 * t1273;
t1244 = pkin(3) + pkin(10);
t905 = t1070 + t980;
t1214 = t1047 * t1283;
t1255 = -t1246 + t1247;
t1282 = t1049 * t1255;
t1203 = t1051 * t1283;
t1279 = t1053 * t1255;
t1236 = pkin(2) * t1053;
t1154 = -pkin(9) * t1049 - t1236;
t1195 = qJD(1) * t1045;
t1009 = t1154 * t1195;
t1155 = t1156 ^ 2;
t1033 = g(1) * t1054 + g(2) * t1050;
t1055 = qJD(1) ^ 2;
t1006 = -pkin(1) * t1055 + pkin(8) * t1174 - t1033;
t1032 = t1050 * g(1) - t1054 * g(2);
t1233 = pkin(8) * t1045;
t1064 = qJDD(1) * pkin(1) + t1055 * t1233 + t1032;
t1061 = t1046 * t1064;
t1157 = t1049 * t1006 - t1053 * t1061;
t880 = (qJD(1) * t1009 * t1049 + g(3) * t1053) * t1045 - t1037 * pkin(2) - t1155 * pkin(9) + t1157;
t1057 = t943 * pkin(3) + qJ(4) * t1288 + t880;
t1276 = t1002 * t1245 + t1057;
t1275 = t1045 * t1253 + t1046 * t1147;
t1274 = t1045 * t1254 + t1046 * t1149;
t1085 = (t1000 * t1048 + t1002 * t1052) * t1030;
t1086 = (t1000 * t1052 - t1002 * t1048) * t1030;
t1249 = -t1045 * t1085 + (t1005 * t1053 + t1049 * t1086) * t1046;
t1252 = -t1005 * t1049 + t1053 * t1086;
t1271 = t1050 * t1252 + t1054 * t1249;
t1270 = -t1050 * t1249 + t1054 * t1252;
t857 = -qJD(5) * t964 - t1005 * t1051 + t1047 * t943;
t995 = qJD(5) + t1002;
t932 = t995 * t964;
t1269 = t857 - t932;
t962 = t964 ^ 2;
t992 = t995 ^ 2;
t872 = -t992 - t962;
t779 = t1047 * t872 - t1203;
t780 = t1051 * t872 + t1214;
t1267 = pkin(4) * t779 - qJ(4) * t780;
t963 = t966 ^ 2;
t1172 = t963 + t992;
t844 = t912 + t940;
t1215 = t1047 * t844;
t787 = -t1051 * t1172 - t1215;
t1204 = t1051 * t844;
t788 = t1047 * t1172 - t1204;
t1266 = pkin(4) * t787 - qJ(4) * t788;
t1042 = t1045 ^ 2;
t1180 = t1042 * t1055;
t1110 = t1156 * qJD(1);
t1265 = t1042 * (-t1046 * t1055 + t1110);
t1059 = -g(3) * t1179 + t1049 * t1061;
t881 = t1037 * pkin(9) - t1155 * pkin(2) + (t1009 * t1195 + t1006) * t1053 + t1059;
t1087 = t1049 * t1110;
t1088 = t1053 * t1110;
t1231 = t1046 * g(3);
t882 = -t1011 * pkin(2) - t1010 * pkin(9) - t1231 + (pkin(2) * t1087 - pkin(9) * t1088 - t1064) * t1045;
t1221 = -t1048 * t881 + t1052 * t882;
t951 = pkin(3) * t1000 - qJ(4) * t1002;
t1099 = t1005 * pkin(3) - t1026 * qJ(4) + t1002 * t951 + qJDD(4) - t1221;
t704 = -pkin(4) * t905 + t1065 * pkin(10) + t1099;
t1160 = -pkin(3) * t1030 + t1245;
t969 = pkin(4) * t1002 + pkin(10) * t1030;
t712 = -t1247 * pkin(4) + t943 * pkin(10) + (t1160 - t969) * t1002 + t1057;
t647 = t1047 * t704 + t1051 * t712;
t1158 = t1047 * t1005 + t1051 * t943;
t856 = -qJD(5) * t966 + t1158;
t922 = pkin(5) * t995 - qJ(6) * t966;
t1098 = t856 * qJ(6) - 0.2e1 * qJD(6) * t964 - t995 * t922 + t647;
t1224 = t1047 * t712 - t1051 * t704;
t1256 = qJ(6) * t932 + 0.2e1 * qJD(6) * t966 + t1224 + t1301;
t586 = t1047 * t1224 + t1051 * t647;
t585 = t1047 * t647 - t1051 * t1224;
t1248 = t1005 * t1178 + t1046 * t1085 + t1086 * t1179;
t1075 = (-qJD(5) + t995) * t966 + t1158;
t820 = t857 + t932;
t734 = t1047 * t1075 - t1051 * t820;
t858 = -t962 - t963;
t697 = t1048 * t734 + t1052 * t858;
t736 = t1047 * t820 + t1051 * t1075;
t1137 = t1049 * t697 - t1053 * t736;
t696 = t1048 * t858 - t1052 * t734;
t610 = -t1045 * t696 + t1046 * t1137;
t650 = t1049 * t736 + t1053 * t697;
t568 = t1050 * t650 + t1054 * t610;
t1243 = pkin(7) * t568;
t816 = (qJD(5) + t995) * t966 - t1158;
t715 = t1048 * t779 + t1052 * t816;
t1135 = t1049 * t715 - t1053 * t780;
t714 = t1048 * t816 - t1052 * t779;
t629 = -t1045 * t714 + t1046 * t1135;
t669 = t1049 * t780 + t1053 * t715;
t582 = t1050 * t669 + t1054 * t629;
t1242 = pkin(7) * t582;
t720 = t1048 * t787 + t1052 * t1269;
t1134 = t1049 * t720 - t1053 * t788;
t719 = t1048 * t1269 - t1052 * t787;
t634 = -t1045 * t719 + t1046 * t1134;
t673 = t1049 * t788 + t1053 * t720;
t590 = t1050 * t673 + t1054 * t634;
t1241 = pkin(7) * t590;
t1240 = pkin(9) * t696;
t1239 = pkin(9) * t714;
t1238 = pkin(9) * t719;
t1237 = pkin(2) * t1049;
t1235 = pkin(3) * t1048;
t1234 = pkin(3) * t1052;
t1232 = pkin(8) * t1046;
t1228 = pkin(1) * t610 + t650 * t1233;
t1227 = pkin(1) * t629 + t669 * t1233;
t1226 = pkin(1) * t634 + t673 * t1233;
t1225 = -pkin(2) * t736 + pkin(9) * t697;
t1223 = -pkin(2) * t780 + pkin(9) * t715;
t1222 = -pkin(2) * t788 + pkin(9) * t720;
t804 = t1048 * t882 + t1052 * t881;
t618 = -qJ(6) * t857 - t1256;
t1218 = t1047 * t618;
t1102 = t1026 * pkin(3) + t1000 * t951 - t804;
t1069 = -t1005 * qJ(4) - t1102;
t1062 = -t943 * pkin(4) - pkin(10) * t1247 + t1069;
t1159 = (t1245 - t969) * t1030;
t711 = t1159 + t1062;
t1216 = t1047 * t711;
t1213 = t1047 * t995;
t1212 = t1048 * t880;
t984 = t1045 * t1064 + t1231;
t1208 = t1049 * t984;
t1207 = t1051 * t618;
t1205 = t1051 * t711;
t1202 = t1051 * t995;
t1201 = t1052 * t880;
t1196 = t1053 * t984;
t1191 = qJD(4) * t1030;
t1029 = t1053 * t1049 * t1180;
t1007 = -t1029 + t1037;
t1188 = t1007 * t1049;
t1187 = t1007 * t1053;
t1008 = t1029 + t1037;
t1186 = t1008 * t1049;
t1185 = t1008 * t1053;
t1181 = t1037 * t1045;
t1043 = t1049 ^ 2;
t1044 = t1053 ^ 2;
t1175 = t1043 + t1044;
t1171 = t1048 * t912;
t1170 = t1052 * t912;
t609 = t1045 * t1137 + t1046 * t696;
t1169 = -pkin(1) * t609 + t650 * t1232;
t628 = t1045 * t1135 + t1046 * t714;
t1168 = -pkin(1) * t628 + t669 * t1232;
t633 = t1045 * t1134 + t1046 * t719;
t1167 = -pkin(1) * t633 + t673 * t1232;
t1163 = t1043 * t1180;
t1162 = t1044 * t1180;
t1161 = qJ(4) * t1048 + pkin(2);
t659 = pkin(4) * t734 - qJ(4) * t736;
t722 = -t1048 * t1221 + t1052 * t804;
t986 = -t1032 * t1050 - t1054 * t1033;
t1028 = qJDD(1) * t1054 - t1050 * t1055;
t1153 = -pkin(7) * t1028 - g(3) * t1050;
t993 = -t1163 - t1155;
t950 = -t1049 * t993 - t1187;
t1151 = pkin(8) * t950 - t1208;
t1015 = -t1155 - t1162;
t958 = t1015 * t1053 - t1186;
t1150 = pkin(8) * t958 + t1196;
t721 = t1048 * t804 + t1052 * t1221;
t1103 = pkin(4) * t858 - t1244 * t736;
t603 = qJ(6) * t1075 + (-t858 - t962) * pkin(5) + t1098;
t605 = (t820 + t857) * qJ(6) + t1256;
t548 = -t1047 * t605 - t1051 * t603 + t1103;
t642 = -pkin(5) * t820 + t659;
t538 = -t1048 * t548 + t1052 * t642 - t1240;
t1074 = -pkin(2) * t696 - qJ(4) * t858 + t1244 * t734;
t540 = t1047 * t603 - t1051 * t605 + t1074;
t1146 = t1049 * t538 + t1053 * t540;
t579 = t1267 + t618 - t1301;
t1105 = pkin(4) * t816 - t1244 * t780;
t1020 = 0.2e1 * t1191;
t1058 = -t856 * pkin(5) - t962 * qJ(6) + t966 * t922 + qJDD(6) + t1062;
t640 = -pkin(5) * t816 + qJ(6) * t872 + t1030 * t969 + t1020 - t1058;
t584 = -qJ(6) * t1214 - t1051 * t640 + t1105;
t543 = -t1048 * t584 + t1052 * t579 - t1239;
t1073 = -pkin(2) * t714 - qJ(4) * t816 + t1244 * t779;
t572 = -qJ(6) * t1203 + t1047 * t640 + t1073;
t1145 = t1049 * t543 + t1053 * t572;
t560 = t1103 - t586;
t546 = -t1048 * t560 + t1052 * t659 - t1240;
t551 = t1074 + t585;
t1144 = t1049 * t546 + t1053 * t551;
t1104 = pkin(4) * t1269 - t1244 * t788;
t664 = t1159 + t1058;
t654 = qJ(6) * t1172 + t664;
t749 = -pkin(5) * t1269 - qJ(6) * t844;
t588 = -t1047 * t654 - t1051 * t749 + t1104;
t592 = (-t1172 + t962) * pkin(5) - t1098 + t1266;
t547 = -t1048 * t588 + t1052 * t592 - t1238;
t1072 = -pkin(2) * t719 - qJ(4) * t1269 + t1244 * t787;
t574 = t1047 * t749 - t1051 * t654 + t1072;
t1143 = t1049 * t547 + t1053 * t574;
t626 = -t962 * pkin(5) + t1098;
t563 = t1047 * t626 + t1207;
t553 = t1048 * t563 + t1052 * t664;
t564 = t1051 * t626 - t1218;
t1142 = t1049 * t553 - t1053 * t564;
t611 = -t1224 + t1267;
t630 = t1105 + t1205;
t556 = -t1048 * t630 + t1052 * t611 - t1239;
t600 = t1073 - t1216;
t1141 = t1049 * t556 + t1053 * t600;
t613 = -t647 + t1266;
t631 = t1104 - t1216;
t557 = -t1048 * t631 + t1052 * t613 - t1238;
t602 = t1072 - t1205;
t1140 = t1049 * t557 + t1053 * t602;
t571 = t1048 * t585 + t1052 * t711;
t1139 = t1049 * t571 - t1053 * t586;
t753 = t1069 - 0.2e1 * t1191;
t675 = t1048 * t1099 + t1052 * t753;
t761 = t1002 * t1160 + t1057;
t1138 = t1049 * t675 - t1053 * t761;
t733 = t1047 * t816 - t1051 * t1269;
t910 = -t962 + t963;
t701 = -t1048 * t733 + t1052 * t910;
t735 = t1047 * t1269 + t1051 * t816;
t1136 = t1049 * t701 + t1053 * t735;
t1133 = t1049 * t722 - t1053 * t880;
t923 = t962 - t992;
t799 = -t1047 * t923 - t1204;
t725 = -t1048 * t799 + t1052 * t1075;
t801 = -t1051 * t923 + t1215;
t1132 = t1049 * t725 + t1053 * t801;
t924 = -t963 + t992;
t798 = -t1051 * t924 + t1214;
t726 = -t1048 * t798 + t1052 * t820;
t800 = t1047 * t924 + t1203;
t1131 = t1049 * t726 + t1053 * t800;
t811 = -t1051 * t856 - t1213 * t964;
t765 = -t1048 * t811 - t1170;
t812 = t1047 * t856 - t1202 * t964;
t1130 = t1049 * t765 + t1053 * t812;
t813 = -t1047 * t857 - t1202 * t966;
t766 = -t1048 * t813 + t1170;
t814 = -t1051 * t857 + t1213 * t966;
t1129 = t1049 * t766 + t1053 * t814;
t848 = (t1047 * t964 + t1051 * t966) * t995;
t810 = -t1048 * t848 + t1052 * t940;
t849 = (-t1047 * t966 + t1051 * t964) * t995;
t1128 = t1049 * t810 + t1053 * t849;
t901 = (-qJD(3) - t1030) * t1000 + t1106;
t826 = t1048 * t901 - t1293;
t1127 = t1049 * t826 + t1289;
t827 = t1048 * t1288 - t1200;
t1126 = t1049 * t827 + t1279;
t828 = t1048 * t904 - t1200;
t1125 = t1049 * t828 + t1279;
t829 = -t1048 * t905 - t1293;
t1124 = t1049 * t829 + t1289;
t1119 = t1053 * t901 + t1303;
t1118 = t1053 * t905 - t1303;
t948 = g(3) * t1178 + t1157;
t949 = t1053 * t1006 + t1059;
t1115 = t1049 * t949 - t1053 * t948;
t859 = t1049 * t948 + t1053 * t949;
t1019 = t1045 * t1088;
t976 = t1019 + t1010;
t1018 = t1045 * t1087;
t979 = t1011 - t1018;
t1114 = t1049 * t979 + t1053 * t976;
t977 = -t1019 + t1010;
t978 = t1011 + t1018;
t1113 = t1049 * t978 - t1053 * t977;
t1112 = t1053 * t993 - t1188;
t1014 = -t1155 + t1162;
t1109 = t1014 * t1049 + t1187;
t1013 = t1155 - t1163;
t1108 = t1013 * t1053 + t1186;
t1107 = t1015 * t1049 + t1185;
t985 = t1032 * t1054 - t1033 * t1050;
t1097 = (-t1045 * t609 - t1046 * t610) * pkin(8);
t1096 = (-t1045 * t628 - t1046 * t629) * pkin(8);
t1095 = (-t1045 * t633 - t1046 * t634) * pkin(8);
t1089 = t1045 * t1110;
t578 = -pkin(5) * t664 + qJ(6) * t626;
t525 = pkin(4) * t664 + qJ(6) * t1218 - t1051 * t578 - t1244 * t564;
t534 = pkin(4) * t563 + pkin(5) * t618 - qJ(4) * t564;
t552 = t1048 * t664 - t1052 * t563;
t507 = -pkin(9) * t552 - t1048 * t525 + t1052 * t534;
t515 = -pkin(2) * t552 - qJ(4) * t664 + qJ(6) * t1207 + t1047 * t578 + t1244 * t563;
t535 = t1049 * t564 + t1053 * t553;
t1084 = pkin(8) * t535 + t1049 * t507 + t1053 * t515;
t545 = pkin(4) * t711 - t1244 * t586;
t549 = pkin(4) * t585 - qJ(4) * t586;
t570 = t1048 * t711 - t1052 * t585;
t519 = -pkin(9) * t570 - t1048 * t545 + t1052 * t549;
t533 = -pkin(2) * t570 - qJ(4) * t711 + t1244 * t585;
t544 = t1049 * t586 + t1053 * t571;
t1083 = pkin(8) * t544 + t1049 * t519 + t1053 * t533;
t674 = t1048 * t753 - t1052 * t1099;
t619 = -pkin(2) * t674 + pkin(3) * t1099 - qJ(4) * t753;
t624 = -pkin(9) * t674 + (-qJ(4) * t1052 + t1235) * t761;
t643 = t1049 * t761 + t1053 * t675;
t1082 = pkin(8) * t643 + t1049 * t624 + t1053 * t619;
t729 = pkin(3) * t921 + t753;
t737 = qJ(4) * t921 + t1099;
t822 = -t1052 * t901 - t1299;
t641 = -pkin(9) * t822 - t1048 * t729 + t1052 * t737;
t738 = -pkin(2) * t822 + pkin(3) * t901 + qJ(4) * t896;
t770 = t1053 * t826 - t1294;
t1081 = pkin(8) * t770 + t1049 * t641 + t1053 * t738;
t728 = (t897 - t1184) * pkin(3) + t1276;
t676 = qJ(4) * t1200 - t1048 * t728 + t1315;
t685 = -pkin(3) * t1065 + qJ(4) * t947 - t1099 + t1317;
t1080 = t1049 * t676 + t1053 * t685 - t1326;
t727 = pkin(3) * t1184 - qJ(4) * t904 - t1276;
t679 = t1052 * t727 + t1235 * t904 - t1313;
t690 = -t1316 - pkin(3) * t954 + t1020 + (t1005 + t1066) * qJ(4) + t1102;
t1079 = t1049 * t679 + t1053 * t690 - t1325;
t748 = -t1221 - t1317;
t789 = t1212 - t1315;
t1078 = t1049 * t789 + t1053 * t748 + t1326;
t752 = t804 + t1316;
t794 = t1201 + t1313;
t1077 = t1049 * t794 + t1053 * t752 + t1325;
t913 = t1049 * t977 + t1053 * t978;
t1076 = pkin(8) * t913 + t859;
t825 = t1052 * t905 - t1299;
t680 = -pkin(9) * t825 - t721;
t771 = t1053 * t829 - t1294;
t1071 = pkin(8) * t771 + t1049 * t680 - t1236 * t825;
t693 = t1049 * t880 + t1053 * t722;
t1067 = pkin(8) * t693 + t1154 * t721;
t1060 = t1045 * t1180 + t1046 * t1089;
t1027 = qJDD(1) * t1050 + t1054 * t1055;
t1017 = t1175 * t1180;
t1016 = (t1043 - t1044) * t1180;
t1012 = -pkin(7) * t1027 + g(3) * t1054;
t983 = t1156 * t1175 * t1195;
t975 = (t1173 + (0.2e1 * qJD(2) + t1194) * t1193) * t1045;
t968 = t1053 * t1010 - t1043 * t1089;
t967 = -t1049 * t1011 - t1044 * t1089;
t957 = t1014 * t1053 - t1188;
t956 = -t1013 * t1049 + t1185;
t946 = (t1046 * t1010 + t1053 * t1060) * t1049;
t945 = (t1046 * t1011 - t1049 * t1060) * t1053;
t914 = -t1049 * t976 + t1053 * t979;
t909 = t1045 * t979 + t1046 * t1107;
t908 = -t1045 * t978 + t1046 * t1109;
t907 = -t1045 * t977 + t1046 * t1108;
t906 = t1045 * t1107 - t1046 * t979;
t894 = -t1045 * t975 + t1046 * t1112;
t893 = t1045 * t1112 + t1046 * t975;
t879 = -t1045 * t1016 + t1046 * t1114;
t878 = t1045 * t1017 + t1046 * t1113;
t877 = -t1046 * t1017 + t1045 * t1113;
t847 = -t1050 * t909 + t1054 * t958;
t846 = t1050 * t958 + t1054 * t909;
t837 = -t1050 * t894 + t1054 * t950;
t836 = t1050 * t950 + t1054 * t894;
t835 = t1045 * t984 + t1046 * t1115;
t834 = t1045 * t1115 - t1046 * t984;
t831 = -t1050 * t878 + t1054 * t913;
t830 = t1050 * t913 + t1054 * t878;
t824 = -t1052 * t904 - t1298;
t823 = -t1052 * t1288 - t1298;
t809 = t1048 * t940 + t1052 * t848;
t806 = -t1049 * t905 - t1302;
t805 = -t1049 * t901 + t1302;
t797 = -t1208 + (-t1045 * t906 - t1046 * t909) * pkin(8);
t791 = -t1196 + (-t1045 * t893 - t1046 * t894) * pkin(8);
t790 = -pkin(1) * t906 + t1045 * t948 + t1046 * t1150;
t783 = t1053 * t828 - t1282;
t782 = t1053 * t827 - t1282;
t781 = -pkin(1) * t893 + t1045 * t949 + t1046 * t1151;
t769 = -pkin(1) * t834 + t1232 * t859;
t768 = -t1050 * t835 + t1054 * t859;
t767 = t1050 * t859 + t1054 * t835;
t764 = t1052 * t813 + t1171;
t763 = t1052 * t811 - t1171;
t762 = -pkin(1) * t877 + t1046 * t1076;
t759 = pkin(2) * t904 + t1212 + t1312;
t756 = t1046 * t1118 - t1309;
t755 = t1046 * t1119 + t1309;
t754 = (-t1045 * t834 - t1046 * t835) * pkin(8);
t751 = -pkin(2) * t897 - t1201 + t1314;
t750 = (-t1045 * t877 - t1046 * t878) * pkin(8) - t1115;
t743 = -t1049 * t849 + t1053 * t810;
t724 = t1048 * t820 + t1052 * t798;
t723 = t1048 * t1075 + t1052 * t799;
t717 = -t1045 * t824 + t1046 * t1125;
t716 = -t1045 * t823 + t1046 * t1126;
t708 = -t1045 * t825 + t1046 * t1124;
t707 = -t1045 * t822 + t1046 * t1127;
t706 = t1045 * t1124 + t1046 * t825;
t705 = t1045 * t1127 + t1046 * t822;
t700 = t1048 * t910 + t1052 * t733;
t699 = -t1049 * t814 + t1053 * t766;
t698 = -t1049 * t812 + t1053 * t765;
t694 = -pkin(2) * t880 + pkin(9) * t722;
t692 = -t1045 * t809 + t1046 * t1128;
t691 = t1045 * t1128 + t1046 * t809;
t678 = -t1049 * t800 + t1053 * t726;
t677 = -t1049 * t801 + t1053 * t725;
t672 = pkin(9) * t829 + t1300 + t722;
t668 = -t1312 + t1048 * t727 - (pkin(2) + t1234) * t904;
t665 = t1052 * t728 + t1161 * t897 - t1314;
t663 = -t1050 * t708 + t1054 * t771;
t662 = -t1050 * t707 + t1054 * t770;
t661 = t1050 * t771 + t1054 * t708;
t660 = t1050 * t770 + t1054 * t707;
t658 = -t1045 * t764 + t1046 * t1129;
t657 = -t1045 * t763 + t1046 * t1130;
t656 = t1045 * t1129 + t1046 * t764;
t655 = t1045 * t1130 + t1046 * t763;
t653 = -t1049 * t735 + t1053 * t701;
t652 = -t1050 * t692 + t1054 * t743;
t651 = t1050 * t743 + t1054 * t692;
t645 = -t1045 * t721 + t1046 * t1133;
t644 = t1045 * t1133 + t1046 * t721;
t639 = pkin(9) * t826 + t1048 * t737 + t1052 * t729 + t1300;
t638 = -t1045 * t724 + t1046 * t1131;
t637 = -t1045 * t723 + t1046 * t1132;
t636 = t1045 * t1131 + t1046 * t724;
t635 = t1045 * t1132 + t1046 * t723;
t625 = -t1049 * t752 + t1053 * t794 - t1336;
t623 = -t1050 * t658 + t1054 * t699;
t622 = -t1050 * t657 + t1054 * t698;
t621 = t1050 * t699 + t1054 * t658;
t620 = t1050 * t698 + t1054 * t657;
t616 = -t1049 * t748 + t1053 * t789 - t1335;
t615 = -t1045 * t700 + t1046 * t1136;
t614 = t1045 * t1136 + t1046 * t700;
t612 = -t1045 * t759 + t1046 * t1077 - t1332;
t607 = -t1050 * t645 + t1054 * t693;
t606 = t1050 * t693 + t1054 * t645;
t604 = -t1045 * t751 + t1046 * t1078 - t1334;
t601 = pkin(9) * t675 + (-t1161 - t1234) * t761;
t599 = -t1045 * t674 + t1046 * t1138;
t598 = t1045 * t1138 + t1046 * t674;
t597 = -t1050 * t638 + t1054 * t678;
t596 = -t1050 * t637 + t1054 * t677;
t595 = t1050 * t678 + t1054 * t638;
t594 = t1050 * t677 + t1054 * t637;
t593 = t825 * t1237 + t1053 * t680 + (-t1045 * t706 - t1046 * t708) * pkin(8);
t591 = -t1050 * t634 + t1054 * t673;
t589 = pkin(7) * t591;
t587 = -t1049 * t690 + t1053 * t679 + t1336;
t583 = -t1050 * t629 + t1054 * t669;
t581 = pkin(7) * t583;
t580 = -t1049 * t685 + t1053 * t676 + t1335;
t577 = -pkin(1) * t706 - t1045 * t672 + t1046 * t1071;
t576 = -t1050 * t615 + t1054 * t653;
t575 = t1050 * t653 + t1054 * t615;
t573 = -t1049 * t738 + t1053 * t641 + (-t1045 * t705 - t1046 * t707) * pkin(8);
t569 = -t1050 * t610 + t1054 * t650;
t567 = pkin(7) * t569;
t566 = -t1045 * t668 + t1046 * t1079 + t1332;
t565 = -t1045 * t665 + t1046 * t1080 + t1334;
t562 = -t1050 * t599 + t1054 * t643;
t561 = t1050 * t643 + t1054 * t599;
t559 = (-pkin(9) * t1053 + t1237) * t721 + (-t1045 * t644 - t1046 * t645) * pkin(8);
t558 = -pkin(1) * t644 - t1045 * t694 + t1046 * t1067;
t555 = -pkin(1) * t705 - t1045 * t639 + t1046 * t1081;
t554 = t1048 * t613 + t1052 * t631 + t1222;
t550 = t1048 * t611 + t1052 * t630 + t1223;
t542 = t1048 * t592 + t1052 * t588 + t1222;
t541 = t1048 * t659 + t1052 * t560 + t1225;
t539 = t1048 * t579 + t1052 * t584 + t1223;
t537 = -t1049 * t619 + t1053 * t624 + (-t1045 * t598 - t1046 * t599) * pkin(8);
t536 = t1048 * t642 + t1052 * t548 + t1225;
t532 = -t1045 * t570 + t1046 * t1139;
t531 = t1045 * t1139 + t1046 * t570;
t530 = -pkin(1) * t598 - t1045 * t601 + t1046 * t1082;
t529 = -t1049 * t602 + t1053 * t557 + t1095;
t528 = -t1049 * t600 + t1053 * t556 + t1096;
t527 = -t1049 * t574 + t1053 * t547 + t1095;
t526 = -t1049 * t572 + t1053 * t543 + t1096;
t524 = -t1045 * t552 + t1046 * t1142;
t523 = t1045 * t1142 + t1046 * t552;
t522 = -t1045 * t554 + t1046 * t1140 + t1167;
t521 = -t1045 * t550 + t1046 * t1141 + t1168;
t520 = -t1049 * t551 + t1053 * t546 + t1097;
t518 = -t1050 * t532 + t1054 * t544;
t517 = t1050 * t544 + t1054 * t532;
t516 = -pkin(2) * t586 + pkin(9) * t571 + t1048 * t549 + t1052 * t545;
t514 = -t1045 * t542 + t1046 * t1143 + t1167;
t513 = -t1049 * t540 + t1053 * t538 + t1097;
t512 = -t1045 * t539 + t1046 * t1145 + t1168;
t511 = -t1045 * t541 + t1046 * t1144 + t1169;
t510 = -t1050 * t524 + t1054 * t535;
t509 = t1050 * t535 + t1054 * t524;
t508 = -t1045 * t536 + t1046 * t1146 + t1169;
t506 = -pkin(2) * t564 + pkin(9) * t553 + t1048 * t534 + t1052 * t525;
t505 = -t1049 * t533 + t1053 * t519 + (-t1045 * t531 - t1046 * t532) * pkin(8);
t504 = -pkin(1) * t531 - t1045 * t516 + t1046 * t1083;
t503 = -t1049 * t515 + t1053 * t507 + (-t1045 * t523 - t1046 * t524) * pkin(8);
t502 = -pkin(1) * t523 - t1045 * t506 + t1046 * t1084;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1027, -t1028, 0, t986, 0, 0, 0, 0, 0, 0, t847, t837, t831, t768, 0, 0, 0, 0, 0, 0, -t684, -t689, t663, t607, 0, 0, 0, 0, 0, 0, t662, t684, t689, t562, 0, 0, 0, 0, 0, 0, t583, t591, t569, t518, 0, 0, 0, 0, 0, 0, t583, t591, t569, t510; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1028, -t1027, 0, t985, 0, 0, 0, 0, 0, 0, t846, t836, t830, t767, 0, 0, 0, 0, 0, 0, t681, t686, t661, t606, 0, 0, 0, 0, 0, 0, t660, -t681, -t686, t561, 0, 0, 0, 0, 0, 0, t582, t590, t568, t517, 0, 0, 0, 0, 0, 0, t582, t590, t568, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t906, t893, t877, t834, 0, 0, 0, 0, 0, 0, t739, t744, t706, t644, 0, 0, 0, 0, 0, 0, t705, -t739, -t744, t598, 0, 0, 0, 0, 0, 0, t628, t633, t609, t531, 0, 0, 0, 0, 0, 0, t628, t633, t609, t523; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1028, 0, -t1027, 0, t1153, -t1012, -t985, -pkin(7) * t985, -t1050 * t946 + t1054 * t968, -t1050 * t879 + t1054 * t914, -t1050 * t907 + t1054 * t956, -t1050 * t945 + t1054 * t967, -t1050 * t908 + t1054 * t957, t1050 * t1181 + t1054 * t983, -pkin(7) * t846 - t1050 * t790 + t1054 * t797, -pkin(7) * t836 - t1050 * t781 + t1054 * t791, -pkin(7) * t830 - t1050 * t762 + t1054 * t750, -pkin(7) * t767 - t1050 * t769 + t1054 * t754, t1286, -t1050 * t716 + t1054 * t782, -t1050 * t756 + t1054 * t806, t1287, -t1330, t1270, -t1050 * t604 + t1054 * t616 - t1340, -t1050 * t612 + t1054 * t625 - t1338, -pkin(7) * t661 - t1050 * t577 + t1054 * t593, -pkin(7) * t606 - t1050 * t558 + t1054 * t559, t1270, -t1050 * t755 + t1054 * t805, t1330, t1286, -t1050 * t717 + t1054 * t783, t1287, -pkin(7) * t660 - t1050 * t555 + t1054 * t573, -t1050 * t565 + t1054 * t580 + t1340, -t1050 * t566 + t1054 * t587 + t1338, -pkin(7) * t561 - t1050 * t530 + t1054 * t537, t623, t576, t597, t622, t596, t652, -t1050 * t521 + t1054 * t528 - t1242, -t1050 * t522 + t1054 * t529 - t1241, -t1050 * t511 + t1054 * t520 - t1243, -pkin(7) * t517 - t1050 * t504 + t1054 * t505, t623, t576, t597, t622, t596, t652, -t1050 * t512 + t1054 * t526 - t1242, -t1050 * t514 + t1054 * t527 - t1241, -t1050 * t508 + t1054 * t513 - t1243, -pkin(7) * t509 - t1050 * t502 + t1054 * t503; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1027, 0, t1028, 0, t1012, t1153, t986, pkin(7) * t986, t1050 * t968 + t1054 * t946, t1050 * t914 + t1054 * t879, t1050 * t956 + t1054 * t907, t1050 * t967 + t1054 * t945, t1050 * t957 + t1054 * t908, t1050 * t983 - t1054 * t1181, pkin(7) * t847 + t1050 * t797 + t1054 * t790, pkin(7) * t837 + t1050 * t791 + t1054 * t781, pkin(7) * t831 + t1050 * t750 + t1054 * t762, pkin(7) * t768 + t1050 * t754 + t1054 * t769, t1284, t1050 * t782 + t1054 * t716, t1050 * t806 + t1054 * t756, t1285, t1329, t1271, t1050 * t616 + t1054 * t604 - t1339, t1050 * t625 + t1054 * t612 - t1337, pkin(7) * t663 + t1050 * t593 + t1054 * t577, pkin(7) * t607 + t1050 * t559 + t1054 * t558, t1271, t1050 * t805 + t1054 * t755, -t1329, t1284, t1050 * t783 + t1054 * t717, t1285, pkin(7) * t662 + t1050 * t573 + t1054 * t555, t1050 * t580 + t1054 * t565 + t1339, t1050 * t587 + t1054 * t566 + t1337, pkin(7) * t562 + t1050 * t537 + t1054 * t530, t621, t575, t595, t620, t594, t651, t1050 * t528 + t1054 * t521 + t581, t1050 * t529 + t1054 * t522 + t589, t1050 * t520 + t1054 * t511 + t567, pkin(7) * t518 + t1050 * t505 + t1054 * t504, t621, t575, t595, t620, t594, t651, t1050 * t526 + t1054 * t512 + t581, t1050 * t527 + t1054 * t514 + t589, t1050 * t513 + t1054 * t508 + t567, pkin(7) * t510 + t1050 * t503 + t1054 * t502; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1032, t1033, 0, 0, (t1045 * t1010 + t1053 * t1265) * t1049, t1046 * t1016 + t1045 * t1114, t1045 * t1108 + t1046 * t977, (t1045 * t1011 - t1049 * t1265) * t1053, t1045 * t1109 + t1046 * t978, t1046 * t1037, pkin(1) * t909 + t1045 * t1150 - t1046 * t948, pkin(1) * t894 + t1045 * t1151 - t1046 * t949, pkin(1) * t878 + t1045 * t1076, pkin(1) * t835 + t1233 * t859, t1275, t1045 * t1126 + t1046 * t823, t1045 * t1118 + t1305, t1274, t1318, t1248, t1045 * t1078 + t1046 * t751 + t1333, t1045 * t1077 + t1046 * t759 + t1331, pkin(1) * t708 + t1045 * t1071 + t1046 * t672, pkin(1) * t645 + t1045 * t1067 + t1046 * t694, t1248, t1045 * t1119 - t1305, -t1318, t1275, t1045 * t1125 + t1046 * t824, t1274, pkin(1) * t707 + t1045 * t1081 + t1046 * t639, t1045 * t1080 + t1046 * t665 - t1333, t1045 * t1079 + t1046 * t668 - t1331, pkin(1) * t599 + t1045 * t1082 + t1046 * t601, t656, t614, t636, t655, t635, t691, t1045 * t1141 + t1046 * t550 + t1227, t1045 * t1140 + t1046 * t554 + t1226, t1045 * t1144 + t1046 * t541 + t1228, pkin(1) * t532 + t1045 * t1083 + t1046 * t516, t656, t614, t636, t655, t635, t691, t1045 * t1145 + t1046 * t539 + t1227, t1045 * t1143 + t1046 * t542 + t1226, t1045 * t1146 + t1046 * t536 + t1228, pkin(1) * t524 + t1045 * t1084 + t1046 * t506;];
tauB_reg  = t1;
