% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:58
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:57:09
% EndTime: 2019-05-04 23:57:27
% DurationCPUTime: 12.90s
% Computational Cost: add. (45158->638), mult. (86018->950), div. (0->0), fcn. (58707->10), ass. (0->479)
t620 = sin(qJ(5));
t623 = cos(qJ(5));
t624 = cos(qJ(4));
t712 = qJD(2) * t624;
t573 = -t623 * qJD(4) + t620 * t712;
t575 = qJD(4) * t620 + t623 * t712;
t538 = t575 * t573;
t709 = qJD(2) * qJD(4);
t694 = t624 * t709;
t621 = sin(qJ(4));
t706 = qJDD(2) * t621;
t578 = -t694 - t706;
t571 = qJDD(5) - t578;
t688 = -t571 + t538;
t739 = t688 * t620;
t738 = t688 * t623;
t625 = cos(qJ(2));
t703 = qJDD(2) * t625;
t622 = sin(qJ(2));
t626 = qJD(2) ^ 2;
t723 = t622 * t626;
t582 = t703 - t723;
t614 = sin(pkin(6));
t561 = t582 * t614;
t616 = cos(pkin(6));
t602 = t616 * qJDD(2);
t563 = -t602 * t625 + t616 * t723;
t613 = sin(pkin(10));
t615 = cos(pkin(10));
t586 = g(1) * t613 - t615 * g(2);
t720 = g(3) - qJDD(1);
t557 = t614 * t586 + t616 * t720;
t724 = t622 * t557;
t475 = (-t561 * t614 + t563 * t616) * pkin(7) - t724;
t705 = qJDD(2) * t622;
t583 = t625 * t626 + t705;
t526 = t563 * t613 - t583 * t615;
t781 = -qJ(1) * t526 - t475 * t613;
t521 = t563 * t615 + t583 * t613;
t780 = -qJ(1) * t521 - t475 * t615;
t560 = t583 * t614;
t562 = t583 * t616;
t721 = t625 * t557;
t478 = (t560 * t614 + t562 * t616) * pkin(7) - t721;
t524 = t562 * t613 - t582 * t615;
t779 = -qJ(1) * t524 - t478 * t613;
t519 = t562 * t615 + t582 * t613;
t778 = -qJ(1) * t519 - t478 * t615;
t762 = -pkin(8) - pkin(2);
t772 = t688 * pkin(5);
t773 = -t616 * t586 + t614 * t720;
t771 = t613 * t720;
t770 = t615 * t720;
t713 = qJD(2) * t621;
t599 = qJD(5) + t713;
t559 = t599 * t573;
t696 = t621 * t709;
t704 = qJDD(2) * t624;
t579 = -t696 + t704;
t631 = qJD(5) * t573 - qJDD(4) * t620 - t579 * t623;
t769 = -t559 - t631;
t687 = -t623 * qJDD(4) + t620 * t579;
t486 = (qJD(5) - t599) * t575 + t687;
t678 = pkin(7) * t583 - t721;
t768 = pkin(1) * t563 + t614 * t678;
t679 = pkin(7) * t582 + t724;
t767 = pkin(1) * t562 + t614 * t679;
t766 = pkin(1) * t561 + t616 * t678;
t765 = -pkin(1) * t560 + t616 * t679;
t569 = t573 ^ 2;
t570 = t575 ^ 2;
t598 = t599 ^ 2;
t764 = qJD(4) ^ 2;
t763 = 2 * qJD(3);
t527 = -t598 - t569;
t451 = t527 * t620 - t738;
t757 = pkin(4) * t451;
t532 = -t570 - t598;
t506 = t538 + t571;
t741 = t506 * t620;
t461 = t532 * t623 - t741;
t756 = pkin(4) * t461;
t755 = pkin(4) * t621;
t754 = pkin(4) * t624;
t753 = pkin(7) * t614;
t752 = pkin(7) * t616;
t490 = -t559 + t631;
t420 = -t486 * t620 + t490 * t623;
t751 = pkin(9) * t420;
t750 = pkin(9) * t451;
t749 = pkin(9) * t461;
t422 = -t486 * t623 - t490 * t620;
t504 = -t569 - t570;
t385 = t422 * t624 + t504 * t621;
t384 = t422 * t621 - t504 * t624;
t669 = -t384 * t625 + t420 * t622;
t305 = -t614 * t385 + t616 * t669;
t345 = t384 * t622 + t420 * t625;
t274 = t305 * t615 + t345 * t613;
t748 = qJ(1) * t274;
t452 = t527 * t623 + t739;
t485 = (qJD(5) + t599) * t575 + t687;
t395 = t452 * t624 + t485 * t621;
t394 = t452 * t621 - t485 * t624;
t666 = -t394 * t625 + t451 * t622;
t328 = -t614 * t395 + t616 * t666;
t360 = t394 * t622 + t451 * t625;
t283 = t328 * t615 + t360 * t613;
t747 = qJ(1) * t283;
t740 = t506 * t623;
t462 = -t532 * t620 - t740;
t399 = t462 * t624 + t621 * t769;
t398 = t462 * t621 - t624 * t769;
t665 = -t398 * t625 + t461 * t622;
t332 = -t614 * t399 + t616 * t665;
t365 = t398 * t622 + t461 * t625;
t288 = t332 * t615 + t365 * t613;
t746 = qJ(1) * t288;
t680 = -pkin(9) * t624 + t755;
t576 = t680 * qJD(2);
t612 = qJDD(2) * pkin(2);
t587 = g(1) * t615 + g(2) * t613;
t508 = -t587 * t622 + t625 * t773;
t646 = qJDD(3) + t508;
t496 = -t626 * qJ(3) - t612 + t646;
t628 = -qJDD(2) * pkin(8) + t496;
t715 = t624 * t557 - t621 * t628;
t435 = -pkin(4) * t764 + qJDD(4) * pkin(9) - t576 * t713 - t715;
t618 = t626 * pkin(8);
t509 = -t625 * t587 - t622 * t773;
t708 = qJDD(2) * qJ(3);
t627 = -t626 * pkin(2) + t509 + t708;
t681 = pkin(9) * t621 + t754;
t444 = -t578 * pkin(4) - t579 * pkin(9) - t618 + (qJD(4) * t681 + t763) * qJD(2) + t627;
t716 = -t620 * t435 + t623 * t444;
t697 = -qJ(6) * t631 - t716;
t640 = -qJ(6) * t559 - t697;
t711 = qJD(6) * t575;
t341 = t640 - 0.2e1 * t711 - t772;
t745 = t341 * t620;
t744 = t341 * t623;
t689 = t557 * t621 + t624 * t628;
t434 = -qJDD(4) * pkin(4) - t764 * pkin(9) + t576 * t712 - t689;
t743 = t434 * t620;
t742 = t434 * t623;
t609 = t621 ^ 2;
t610 = t624 ^ 2;
t714 = t609 + t610;
t581 = t714 * qJDD(2);
t737 = t581 * t622;
t736 = t581 * t625;
t698 = t621 * t624 * t626;
t588 = qJDD(4) + t698;
t735 = t588 * t621;
t734 = t588 * t624;
t589 = qJDD(4) - t698;
t733 = t589 * t621;
t732 = t589 * t624;
t731 = t599 * t620;
t730 = t599 * t623;
t729 = t609 * t626;
t728 = t610 * t626;
t727 = t614 * t557;
t702 = qJD(2) * t763;
t494 = t627 + t702;
t493 = -t618 + t494;
t725 = t621 * t493;
t722 = t624 * t493;
t719 = pkin(1) * t305 + t345 * t753;
t718 = pkin(1) * t328 + t360 * t753;
t717 = pkin(1) * t332 + t365 * t753;
t373 = t623 * t435 + t620 * t444;
t707 = qJDD(2) * t614;
t701 = t762 * t385;
t700 = t621 * t538;
t699 = t624 * t538;
t695 = t615 * t707;
t304 = t616 * t385 + t614 * t669;
t693 = -pkin(1) * t304 + t345 * t752;
t327 = t616 * t395 + t614 * t666;
t692 = -pkin(1) * t327 + t360 * t752;
t331 = t616 * t399 + t614 * t665;
t691 = -pkin(1) * t331 + t365 * t752;
t317 = t623 * t373 - t620 * t716;
t536 = -t586 * t613 - t615 * t587;
t686 = t622 * t698;
t685 = t625 * t698;
t684 = qJ(3) * t420 + t384 * t762;
t683 = qJ(3) * t451 + t394 * t762;
t682 = qJ(3) * t461 + t398 * t762;
t517 = -qJD(5) * t575 - t687;
t551 = pkin(5) * t599 - qJ(6) * t575;
t639 = t517 * qJ(6) - 0.2e1 * qJD(6) * t573 - t599 * t551 + t373;
t321 = -qJ(6) * t486 + (-t504 - t569) * pkin(5) + t639;
t566 = 0.2e1 * t711;
t329 = t566 + (-t490 + t559) * qJ(6) + t772 + t697;
t266 = -t321 * t620 + t329 * t623 - t751;
t380 = -pkin(4) * t420 - pkin(5) * t490;
t250 = pkin(3) * t420 - t621 * t266 - t624 * t380 + t701;
t651 = pkin(3) * t384 - pkin(4) * t504 + pkin(9) * t422 - qJ(3) * t385;
t256 = t321 * t623 + t329 * t620 + t651;
t677 = t250 * t625 + t256 * t622;
t312 = t566 - t640 - t757 + 0.2e1 * t772;
t377 = -t517 * pkin(5) - t569 * qJ(6) + t551 * t575 + qJDD(6) + t434;
t346 = -pkin(5) * t485 + qJ(6) * t527 - t377;
t315 = qJ(6) * t738 - t346 * t620 - t750;
t648 = pkin(3) * t451 + t395 * t762;
t258 = -t624 * t312 - t621 * t315 + t648;
t650 = pkin(3) * t394 - pkin(4) * t485 + pkin(9) * t452 - qJ(3) * t395;
t276 = qJ(6) * t739 + t346 * t623 + t650;
t676 = t258 * t625 + t276 * t622;
t318 = -t756 + (-t532 - t569) * pkin(5) + t639;
t364 = -qJ(6) * t532 + t377;
t437 = -pkin(5) * t769 - qJ(6) * t506;
t320 = t364 * t623 - t437 * t620 - t749;
t647 = pkin(3) * t461 + t399 * t762;
t260 = -t624 * t318 - t621 * t320 + t647;
t649 = pkin(3) * t398 - pkin(4) * t769 + pkin(9) * t462 - qJ(3) * t399;
t277 = t364 * t620 + t437 * t623 + t649;
t675 = t260 * t625 + t277 * t622;
t316 = t373 * t620 + t623 * t716;
t295 = -t316 - t751;
t262 = -t621 * t295 + (pkin(3) + t754) * t420 + t701;
t265 = t317 + t651;
t674 = t262 * t625 + t265 * t622;
t347 = -t716 - t757;
t378 = t743 - t750;
t268 = -t624 * t347 - t621 * t378 + t648;
t294 = t650 - t742;
t673 = t268 * t625 + t294 * t622;
t349 = t373 - t756;
t379 = t742 - t749;
t270 = -t624 * t349 - t621 * t379 + t647;
t296 = t649 + t743;
t672 = t270 * t625 + t296 * t622;
t342 = -pkin(5) * t569 + t639;
t286 = t342 * t623 - t745;
t271 = t286 * t621 - t377 * t624;
t285 = t342 * t620 + t744;
t671 = -t271 * t625 + t285 * t622;
t297 = t317 * t621 - t434 * t624;
t670 = -t297 * t625 + t316 * t622;
t386 = -t621 * t715 + t624 * t689;
t668 = -t386 * t625 + t493 * t622;
t421 = -t485 * t623 - t620 * t769;
t537 = -t570 + t569;
t390 = -t421 * t621 - t537 * t624;
t419 = -t485 * t620 + t623 * t769;
t667 = t390 * t625 + t419 * t622;
t556 = -t570 + t598;
t471 = -t556 * t620 - t738;
t402 = -t471 * t621 - t490 * t624;
t469 = t556 * t623 - t739;
t664 = t402 * t625 + t469 * t622;
t555 = t569 - t598;
t472 = t555 * t623 - t741;
t403 = -t472 * t621 - t486 * t624;
t470 = t555 * t620 + t740;
t663 = t403 * t625 + t470 * t622;
t480 = -t517 * t620 + t573 * t730;
t440 = -t480 * t621 - t699;
t479 = t517 * t623 + t573 * t731;
t662 = t440 * t625 + t479 * t622;
t482 = -t575 * t731 - t623 * t631;
t441 = -t482 * t621 + t699;
t481 = t575 * t730 - t620 * t631;
t661 = t441 * t625 + t481 * t622;
t387 = -t621 * t689 - t624 * t715;
t498 = (-t573 * t623 + t575 * t620) * t599;
t473 = -t498 * t621 + t571 * t624;
t497 = (-t573 * t620 - t575 * t623) * t599;
t660 = t473 * t625 + t497 * t622;
t431 = t494 * t625 + t496 * t622;
t659 = t494 * t622 - t496 * t625;
t447 = t508 * t625 - t509 * t622;
t448 = t508 * t622 + t509 * t625;
t577 = 0.2e1 * t694 + t706;
t580 = -0.2e1 * t696 + t704;
t530 = t577 * t621 - t580 * t624;
t585 = (-t609 + t610) * t626;
t658 = t530 * t625 + t585 * t622;
t595 = -t729 - t764;
t542 = t595 * t621 + t732;
t657 = -t542 * t625 + t577 * t622;
t597 = -t728 - t764;
t544 = t597 * t624 - t735;
t656 = -t544 * t625 + t580 * t622;
t584 = t714 * t626;
t653 = -t584 * t622 + t736;
t535 = t586 * t615 - t587 * t613;
t572 = t714 * t709;
t652 = qJDD(4) * t622 + t572 * t625;
t645 = (-t304 * t614 - t305 * t616) * pkin(7);
t644 = (-t327 * t614 - t328 * t616) * pkin(7);
t643 = (-t331 * t614 - t332 * t616) * pkin(7);
t594 = t729 - t764;
t541 = -t594 * t621 - t734;
t642 = t541 * t625 - t621 * t705;
t596 = -t728 + t764;
t543 = -t596 * t624 - t733;
t641 = t543 * t625 + t622 * t704;
t552 = -t578 * t624 - t609 * t709;
t638 = t552 * t625 - t686;
t553 = -t579 * t621 - t610 * t709;
t637 = t553 * t625 + t686;
t301 = -pkin(5) * t377 + qJ(6) * t342;
t255 = -pkin(9) * t285 - qJ(6) * t744 - t301 * t620;
t263 = -pkin(4) * t285 - pkin(5) * t341;
t272 = t286 * t624 + t377 * t621;
t226 = pkin(3) * t285 - t621 * t255 - t624 * t263 + t272 * t762;
t233 = pkin(3) * t271 - pkin(4) * t377 + pkin(9) * t286 - qJ(3) * t272 - qJ(6) * t745 + t301 * t623;
t254 = t271 * t622 + t285 * t625;
t636 = pkin(7) * t254 + t226 * t625 + t233 * t622;
t298 = t317 * t624 + t434 * t621;
t244 = t762 * t298 + (pkin(3) + t681) * t316;
t248 = pkin(3) * t297 - pkin(4) * t434 + pkin(9) * t317 - qJ(3) * t298;
t264 = t297 * t622 + t316 * t625;
t635 = pkin(7) * t264 + t244 * t625 + t248 * t622;
t326 = pkin(3) * t493 + t387 * t762;
t337 = pkin(3) * t386 - qJ(3) * t387;
t363 = t386 * t622 + t493 * t625;
t634 = pkin(7) * t363 + t326 * t625 + t337 * t622;
t546 = t595 * t624 - t733;
t406 = pkin(3) * t542 - qJ(3) * t546 + t689;
t415 = pkin(3) * t577 + t546 * t762 + t722;
t501 = t542 * t622 + t577 * t625;
t633 = pkin(7) * t501 + t406 * t622 + t415 * t625;
t549 = -t597 * t621 - t734;
t407 = pkin(3) * t544 - qJ(3) * t549 + t715;
t414 = pkin(3) * t580 + t549 * t762 - t725;
t502 = t544 * t622 + t580 * t625;
t632 = pkin(7) * t502 + t407 * t622 + t414 * t625;
t381 = -pkin(3) * t584 - t387;
t533 = -t584 * t625 - t737;
t630 = -pkin(3) * t737 + pkin(7) * t533 + t381 * t625;
t629 = pkin(7) * t431 + (pkin(2) * t625 + qJ(3) * t622) * t557;
t591 = t613 * t707;
t554 = qJDD(4) * t625 - t572 * t622;
t548 = -t596 * t621 + t732;
t547 = (t579 - t696) * t624;
t545 = t594 * t624 - t735;
t540 = (-t578 + t694) * t621;
t539 = t616 * t557;
t534 = t652 * t616;
t531 = -t577 * t624 - t580 * t621;
t529 = t653 * t616;
t528 = t653 * t614;
t516 = -t552 * t622 - t685;
t515 = -t553 * t622 + t685;
t514 = -t543 * t622 + t624 * t703;
t513 = -t541 * t622 - t621 * t703;
t500 = -0.2e1 * t612 + t646;
t499 = t509 + t702 + 0.2e1 * t708;
t495 = -t530 * t622 + t585 * t625;
t474 = t498 * t624 + t571 * t621;
t468 = -t529 * t613 + t533 * t615;
t467 = t529 * t615 + t533 * t613;
t466 = -t614 * t540 + t616 * t638;
t465 = -t614 * t547 + t616 * t637;
t464 = -t614 * t548 + t616 * t641;
t463 = -t614 * t545 + t616 * t642;
t458 = -t614 * t549 + t616 * t656;
t457 = -t614 * t546 + t616 * t657;
t456 = t616 * t549 + t614 * t656;
t455 = t616 * t546 + t614 * t657;
t446 = -t614 * t531 + t616 * t658;
t445 = t448 * t616;
t443 = t482 * t624 + t700;
t442 = t480 * t624 - t700;
t436 = -pkin(2) * t496 + qJ(3) * t494;
t433 = t614 * t508 - t766;
t432 = t614 * t509 - t765;
t427 = -t614 * t500 + t766;
t426 = t431 * t616;
t425 = -t614 * t499 + t765;
t424 = -t447 * t616 + t727;
t423 = -t447 * t614 - t539;
t416 = -t473 * t622 + t497 * t625;
t413 = qJ(3) * t580 + t544 * t762 + t722;
t412 = qJ(3) * t577 + t542 * t762 + t725;
t411 = -t458 * t613 + t502 * t615;
t410 = -t457 * t613 + t501 * t615;
t409 = t458 * t615 + t502 * t613;
t408 = t457 * t615 + t501 * t613;
t405 = t472 * t624 - t486 * t621;
t404 = t471 * t624 - t490 * t621;
t401 = t616 * t659 + t727;
t400 = t614 * t659 - t539;
t391 = t421 * t624 - t537 * t621;
t389 = -t441 * t622 + t481 * t625;
t388 = -t440 * t622 + t479 * t625;
t376 = -t614 * t474 + t616 * t660;
t375 = t616 * t474 + t614 * t660;
t374 = -qJ(3) * t584 - t581 * t762 - t386;
t370 = -t403 * t622 + t470 * t625;
t369 = -t402 * t622 + t469 * t625;
t368 = -pkin(1) * t423 + t448 * t752;
t367 = -t424 * t613 + t448 * t615;
t366 = t424 * t615 + t448 * t613;
t357 = (-t423 * t614 - t424 * t616) * pkin(7);
t356 = -t401 * t613 + t431 * t615;
t355 = t401 * t615 + t431 * t613;
t354 = -t614 * t443 + t616 * t661;
t353 = -t614 * t442 + t616 * t662;
t352 = t616 * t443 + t614 * t661;
t351 = t616 * t442 + t614 * t662;
t350 = -pkin(3) * t736 - t622 * t381 + (-t528 * t614 - t529 * t616) * pkin(7);
t348 = -t390 * t622 + t419 * t625;
t340 = -t376 * t613 + t416 * t615;
t339 = t376 * t615 + t416 * t613;
t338 = (-pkin(2) * t622 + qJ(3) * t625) * t557 + (-t400 * t614 - t401 * t616) * pkin(7);
t336 = -t614 * t405 + t616 * t663;
t335 = -t614 * t404 + t616 * t664;
t334 = t616 * t405 + t614 * t663;
t333 = t616 * t404 + t614 * t664;
t325 = qJ(3) * t493 + t386 * t762;
t323 = -t614 * t387 + t616 * t668;
t322 = t616 * t387 + t614 * t668;
t319 = -pkin(1) * t400 - t614 * t436 + t616 * t629;
t314 = t625 * t407 - t622 * t414 + (-t456 * t614 - t458 * t616) * pkin(7);
t313 = t625 * t406 - t622 * t415 + (-t455 * t614 - t457 * t616) * pkin(7);
t311 = -t354 * t613 + t389 * t615;
t310 = -t353 * t613 + t388 * t615;
t309 = t354 * t615 + t389 * t613;
t308 = t353 * t615 + t388 * t613;
t307 = -t614 * t391 + t616 * t667;
t306 = t616 * t391 + t614 * t667;
t302 = -pkin(1) * t528 - t614 * t374 + t616 * t630;
t300 = -pkin(1) * t456 - t614 * t413 + t616 * t632;
t299 = -pkin(1) * t455 - t614 * t412 + t616 * t633;
t293 = -t336 * t613 + t370 * t615;
t292 = -t335 * t613 + t369 * t615;
t291 = t336 * t615 + t370 * t613;
t290 = t335 * t615 + t369 * t613;
t289 = -t332 * t613 + t365 * t615;
t287 = qJ(1) * t289;
t284 = -t328 * t613 + t360 * t615;
t282 = qJ(1) * t284;
t281 = -t323 * t613 + t363 * t615;
t280 = t323 * t615 + t363 * t613;
t279 = -t307 * t613 + t348 * t615;
t278 = t307 * t615 + t348 * t613;
t275 = -t305 * t613 + t345 * t615;
t273 = qJ(1) * t275;
t269 = -t349 * t621 + t379 * t624 + t682;
t267 = -t347 * t621 + t378 * t624 + t683;
t261 = t295 * t624 + t420 * t755 + t684;
t259 = -t318 * t621 + t320 * t624 + t682;
t257 = -t312 * t621 + t315 * t624 + t683;
t253 = -t614 * t298 + t616 * t670;
t252 = t616 * t298 + t614 * t670;
t251 = -t622 * t326 + t625 * t337 + (-t322 * t614 - t323 * t616) * pkin(7);
t249 = t266 * t624 - t380 * t621 + t684;
t247 = -pkin(1) * t322 - t614 * t325 + t616 * t634;
t246 = -t622 * t270 + t625 * t296 + t643;
t245 = -t622 * t268 + t625 * t294 + t644;
t243 = t762 * t297 + (qJ(3) + t680) * t316;
t242 = -t614 * t272 + t616 * t671;
t241 = t616 * t272 + t614 * t671;
t240 = -t253 * t613 + t264 * t615;
t239 = t253 * t615 + t264 * t613;
t238 = -t622 * t260 + t625 * t277 + t643;
t237 = -t614 * t269 + t616 * t672 + t691;
t236 = -t622 * t258 + t625 * t276 + t644;
t235 = -t614 * t267 + t616 * t673 + t692;
t234 = -t622 * t262 + t625 * t265 + t645;
t232 = -t614 * t259 + t616 * t675 + t691;
t231 = -t242 * t613 + t254 * t615;
t230 = t242 * t615 + t254 * t613;
t229 = -t622 * t250 + t625 * t256 + t645;
t228 = -t614 * t257 + t616 * t676 + t692;
t227 = -t614 * t261 + t616 * t674 + t693;
t225 = qJ(3) * t285 + t624 * t255 - t621 * t263 + t271 * t762;
t224 = -t614 * t249 + t616 * t677 + t693;
t223 = -t622 * t244 + t625 * t248 + (-t252 * t614 - t253 * t616) * pkin(7);
t222 = -pkin(1) * t252 - t614 * t243 + t616 * t635;
t221 = -t622 * t226 + t625 * t233 + (-t241 * t614 - t242 * t616) * pkin(7);
t220 = -pkin(1) * t241 - t614 * t225 + t616 * t636;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t536, 0, 0, 0, 0, 0, 0, t526, t524, 0, t367, 0, 0, 0, 0, 0, 0, 0, -t526, -t524, t356, 0, 0, 0, 0, 0, 0, t410, t411, t468, t281, 0, 0, 0, 0, 0, 0, t284, t289, t275, t240, 0, 0, 0, 0, 0, 0, t284, t289, t275, t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t535, 0, 0, 0, 0, 0, 0, -t521, -t519, 0, t366, 0, 0, 0, 0, 0, 0, 0, t521, t519, t355, 0, 0, 0, 0, 0, 0, t408, t409, t467, t280, 0, 0, 0, 0, 0, 0, t283, t288, t274, t239, 0, 0, 0, 0, 0, 0, t283, t288, t274, t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t720, 0, 0, 0, 0, 0, 0, t561, -t560, 0, t423, 0, 0, 0, 0, 0, 0, 0, -t561, t560, t400, 0, 0, 0, 0, 0, 0, t455, t456, t528, t322, 0, 0, 0, 0, 0, 0, t327, t331, t304, t252, 0, 0, 0, 0, 0, 0, t327, t331, t304, t241; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t771, -t770, -t535, -qJ(1) * t535, 0, 0, -t524, 0, t526, t591, -t433 * t613 - t780, -t432 * t613 - t778, -t445 * t613 + t447 * t615, -qJ(1) * t366 + t357 * t615 - t368 * t613, t591, t524, -t526, 0, 0, 0, -t426 * t613 - t615 * t659, -t427 * t613 + t780, -t425 * t613 + t778, -qJ(1) * t355 - t319 * t613 + t338 * t615, -t465 * t613 + t515 * t615, -t446 * t613 + t495 * t615, -t464 * t613 + t514 * t615, -t466 * t613 + t516 * t615, -t463 * t613 + t513 * t615, -t534 * t613 + t554 * t615, -qJ(1) * t408 - t299 * t613 + t313 * t615, -qJ(1) * t409 - t300 * t613 + t314 * t615, -qJ(1) * t467 - t302 * t613 + t350 * t615, -qJ(1) * t280 - t247 * t613 + t251 * t615, t311, t279, t292, t310, t293, t340, -t235 * t613 + t245 * t615 - t747, -t237 * t613 + t246 * t615 - t746, -t227 * t613 + t234 * t615 - t748, -qJ(1) * t239 - t222 * t613 + t223 * t615, t311, t279, t292, t310, t293, t340, -t228 * t613 + t236 * t615 - t747, -t232 * t613 + t238 * t615 - t746, -t224 * t613 + t229 * t615 - t748, -qJ(1) * t230 - t220 * t613 + t221 * t615; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t770, -t771, t536, qJ(1) * t536, 0, 0, t519, 0, -t521, -t695, t433 * t615 - t781, t432 * t615 - t779, t445 * t615 + t447 * t613, qJ(1) * t367 + t357 * t613 + t368 * t615, -t695, -t519, t521, 0, 0, 0, t426 * t615 - t613 * t659, t427 * t615 + t781, t425 * t615 + t779, qJ(1) * t356 + t319 * t615 + t338 * t613, t465 * t615 + t515 * t613, t446 * t615 + t495 * t613, t464 * t615 + t514 * t613, t466 * t615 + t516 * t613, t463 * t615 + t513 * t613, t534 * t615 + t554 * t613, qJ(1) * t410 + t299 * t615 + t313 * t613, qJ(1) * t411 + t300 * t615 + t314 * t613, qJ(1) * t468 + t302 * t615 + t350 * t613, qJ(1) * t281 + t247 * t615 + t251 * t613, t309, t278, t290, t308, t291, t339, t235 * t615 + t245 * t613 + t282, t237 * t615 + t246 * t613 + t287, t227 * t615 + t234 * t613 + t273, qJ(1) * t240 + t222 * t615 + t223 * t613, t309, t278, t290, t308, t291, t339, t228 * t615 + t236 * t613 + t282, t232 * t615 + t238 * t613 + t287, t224 * t615 + t229 * t613 + t273, qJ(1) * t231 + t220 * t615 + t221 * t613; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t586, t587, 0, 0, 0, 0, t560, 0, t561, t602, -t616 * t508 - t768, -t616 * t509 - t767, t448 * t614, pkin(1) * t424 + t448 * t753, t602, -t560, -t561, 0, 0, 0, t431 * t614, t616 * t500 + t768, t616 * t499 + t767, pkin(1) * t401 + t616 * t436 + t614 * t629, t616 * t547 + t614 * t637, t616 * t531 + t614 * t658, t616 * t548 + t614 * t641, t616 * t540 + t614 * t638, t616 * t545 + t614 * t642, t652 * t614, pkin(1) * t457 + t616 * t412 + t614 * t633, pkin(1) * t458 + t616 * t413 + t614 * t632, pkin(1) * t529 + t616 * t374 + t614 * t630, pkin(1) * t323 + t616 * t325 + t614 * t634, t352, t306, t333, t351, t334, t375, t616 * t267 + t614 * t673 + t718, t616 * t269 + t614 * t672 + t717, t616 * t261 + t614 * t674 + t719, pkin(1) * t253 + t616 * t243 + t614 * t635, t352, t306, t333, t351, t334, t375, t616 * t257 + t614 * t676 + t718, t616 * t259 + t614 * t675 + t717, t616 * t249 + t614 * t677 + t719, pkin(1) * t242 + t616 * t225 + t614 * t636;];
tauB_reg  = t1;
