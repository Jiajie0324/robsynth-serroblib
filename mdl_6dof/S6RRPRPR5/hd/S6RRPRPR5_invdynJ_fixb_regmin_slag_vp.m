% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR5_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR5_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR5_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR5_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR5_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR5_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:35:16
% EndTime: 2019-03-09 10:35:40
% DurationCPUTime: 11.21s
% Computational Cost: add. (14719->669), mult. (42003->933), div. (0->0), fcn. (34937->16), ass. (0->319)
t295 = sin(pkin(6));
t294 = sin(pkin(11));
t297 = cos(pkin(11));
t301 = sin(qJ(2));
t305 = cos(qJ(2));
t332 = t294 * t305 + t297 * t301;
t321 = qJD(1) * t332;
t223 = t295 * t321;
t304 = cos(qJ(4));
t298 = cos(pkin(6));
t395 = qJD(1) * t298;
t353 = qJD(2) + t395;
t257 = t304 * t353;
t300 = sin(qJ(4));
t191 = t223 * t300 - t257;
t190 = qJD(6) + t191;
t394 = qJD(1) * t301;
t373 = t295 * t394;
t406 = t305 * t297;
t377 = t295 * t406;
t220 = qJD(1) * t377 - t294 * t373;
t215 = qJD(4) - t220;
t293 = sin(pkin(12));
t296 = cos(pkin(12));
t309 = -t304 * t223 - t300 * t353;
t130 = -t296 * t215 - t293 * t309;
t303 = cos(qJ(6));
t132 = t215 * t293 - t296 * t309;
t299 = sin(qJ(6));
t434 = t132 * t299;
t470 = -t303 * t130 - t434;
t472 = t470 * t190;
t412 = t298 * t305;
t278 = pkin(1) * t412;
t273 = qJD(1) * t278;
t445 = pkin(8) + qJ(3);
t369 = t445 * t295;
t349 = t301 * t369;
t209 = -qJD(1) * t349 + t273;
t413 = t298 * t301;
t277 = pkin(1) * t413;
t418 = t295 * t305;
t210 = (t418 * t445 + t277) * qJD(1);
t414 = t297 * t210;
t143 = t209 * t294 + t414;
t471 = -qJD(5) * t300 - t143 + t215 * (pkin(4) * t300 - qJ(5) * t304);
t421 = t293 * t304;
t160 = t220 * t421 - t296 * t223;
t415 = t296 * t304;
t161 = t220 * t415 + t223 * t293;
t248 = t293 * t303 + t296 * t299;
t387 = qJD(6) * t303;
t388 = qJD(6) * t300;
t389 = qJD(4) * t304;
t416 = t296 * t300;
t422 = t293 * t299;
t440 = -t303 * t160 - t161 * t299 + t248 * t389 + t387 * t416 - t388 * t422;
t334 = t130 * t299 - t132 * t303;
t469 = t190 * t334;
t286 = pkin(2) * t305 + pkin(1);
t339 = t286 * qJDD(1);
t393 = qJD(2) * t301;
t372 = t295 * t393;
t348 = qJD(1) * t372;
t382 = pkin(2) * t348 + qJDD(3);
t467 = t295 * t339 - t382;
t390 = qJD(4) * t300;
t426 = t220 * t300;
t466 = -t390 + t426;
t383 = qJDD(1) * t305;
t365 = t295 * t383;
t253 = t297 * t365;
t320 = t332 * qJD(2);
t384 = qJDD(1) * t301;
t367 = t294 * t384;
t174 = qJDD(4) - t253 + (qJD(1) * t320 + t367) * t295;
t386 = qJD(1) * qJD(2);
t368 = t305 * t386;
t176 = -t294 * t348 + (qJDD(1) * t332 + t297 * t368) * t295;
t385 = qJDD(1) * t298;
t275 = qJDD(2) + t385;
t99 = qJD(4) * t257 + t304 * t176 - t223 * t390 + t300 * t275;
t64 = -t296 * t174 + t293 * t99;
t65 = t174 * t293 + t296 * t99;
t19 = -qJD(6) * t334 + t299 * t65 + t303 * t64;
t356 = t215 * t300;
t465 = t19 * t304 + t356 * t470;
t247 = t294 * t301 - t406;
t302 = sin(qJ(1));
t306 = cos(qJ(1));
t398 = -t294 * t412 - t297 * t413;
t181 = t302 * t247 + t306 * t398;
t417 = t295 * t306;
t164 = -t181 * t304 - t300 * t417;
t324 = t247 * t298;
t182 = -t302 * t332 - t306 * t324;
t290 = pkin(12) + qJ(6);
t287 = sin(t290);
t288 = cos(t290);
t464 = t164 * t287 + t182 * t288;
t463 = t164 * t288 - t182 * t287;
t283 = pkin(2) * t294 + pkin(9);
t371 = t283 * t390;
t202 = t294 * t210;
t144 = t209 * t297 - t202;
t158 = pkin(2) * t373 + pkin(3) * t223 - pkin(9) * t220;
t401 = t304 * t144 + t300 * t158;
t73 = qJ(5) * t223 + t401;
t439 = t471 * t296 + (t371 + t73) * t293;
t462 = -t471 * t293 + t296 * t73;
t407 = t302 * t305;
t409 = t301 * t306;
t242 = -t298 * t407 - t409;
t397 = pkin(8) * t418 + t277;
t289 = t295 ^ 2;
t455 = pkin(1) * t289;
t460 = t298 * t397 + t301 * t455;
t459 = -pkin(4) * t174 + qJDD(5);
t185 = t302 * t324 - t306 * t332;
t420 = t295 * t301;
t228 = t294 * t420 - t377;
t458 = -g(1) * t185 - g(2) * t182 + g(3) * t228;
t246 = -t303 * t296 + t422;
t231 = t246 * t300;
t441 = t160 * t299 - t161 * t303 - t246 * t389 - t248 * t388;
t100 = -qJD(4) * t309 + t300 * t176 - t304 * t275;
t98 = qJDD(6) + t100;
t457 = -t190 * t441 + t231 * t98;
t186 = -t306 * t247 + t302 * t398;
t456 = 0.2e1 * t289;
t307 = qJD(1) ^ 2;
t454 = pkin(2) * t297;
t229 = t332 * t295;
t452 = pkin(9) * t229;
t450 = g(1) * t242;
t449 = g(1) * t302;
t446 = g(3) * t305;
t444 = pkin(10) + qJ(5);
t314 = t298 * pkin(2) - t349;
t194 = qJD(2) * pkin(2) + qJD(1) * t314 + t273;
t124 = t294 * t194 + t414;
t116 = pkin(9) * t353 + t124;
t346 = t286 * t295;
t237 = -qJD(1) * t346 + qJD(3);
t140 = -pkin(3) * t220 - pkin(9) * t223 + t237;
t379 = pkin(1) * t383;
t272 = t298 * t379;
t380 = pkin(1) * qJD(2) * t298;
t350 = qJD(1) * t380;
t361 = qJD(2) * t445;
t392 = qJD(3) * t301;
t120 = -t301 * t350 + pkin(2) * t275 + t272 + (-t445 * t384 + (-t305 * t361 - t392) * qJD(1)) * t295;
t313 = qJD(3) * t305 - t301 * t361;
t374 = pkin(8) * t365 + qJDD(1) * t277 + t305 * t350;
t135 = (qJ(3) * t383 + qJD(1) * t313) * t295 + t374;
t70 = t294 * t120 + t297 * t135;
t58 = pkin(9) * t275 + t70;
t175 = t253 + (-qJD(2) * t321 - t367) * t295;
t87 = -pkin(3) * t175 - pkin(9) * t176 - t467;
t326 = -t116 * t390 + t140 * t389 + t300 * t87 + t304 * t58;
t16 = qJ(5) * t174 + qJD(5) * t215 + t326;
t69 = t120 * t297 - t294 * t135;
t57 = -pkin(3) * t275 - t69;
t24 = pkin(4) * t100 - qJ(5) * t99 + qJD(5) * t309 + t57;
t7 = t296 * t16 + t293 * t24;
t221 = t295 * t320;
t274 = t305 * t380;
t197 = t295 * t313 + t274;
t198 = -t295 * t392 + (-t305 * t369 - t277) * qJD(2);
t119 = t197 * t297 + t198 * t294;
t207 = t278 + t314;
t217 = qJ(3) * t418 + t397;
t154 = t294 * t207 + t297 * t217;
t142 = pkin(9) * t298 + t154;
t222 = t247 * t295 * qJD(2);
t159 = pkin(2) * t372 + pkin(3) * t221 + pkin(9) * t222;
t162 = pkin(3) * t228 - t346 - t452;
t322 = t304 * t119 - t142 * t390 + t300 * t159 + t162 * t389;
t34 = qJ(5) * t221 + qJD(5) * t228 + t322;
t118 = t197 * t294 - t297 * t198;
t206 = t229 * t304 + t298 * t300;
t151 = qJD(4) * t206 - t222 * t300;
t205 = t229 * t300 - t298 * t304;
t152 = -qJD(4) * t205 - t222 * t304;
t48 = pkin(4) * t151 - qJ(5) * t152 - qJD(5) * t206 + t118;
t14 = t293 * t48 + t296 * t34;
t72 = t304 * t116 + t300 * t140;
t54 = qJ(5) * t215 + t72;
t123 = t297 * t194 - t202;
t115 = -pkin(3) * t353 - t123;
t66 = t191 * pkin(4) + qJ(5) * t309 + t115;
t29 = t293 * t66 + t296 * t54;
t402 = t304 * t142 + t300 * t162;
t77 = qJ(5) * t228 + t402;
t153 = t207 * t297 - t294 * t217;
t141 = -pkin(3) * t298 - t153;
t86 = pkin(4) * t205 - qJ(5) * t206 + t141;
t39 = t293 * t86 + t296 * t77;
t438 = -t296 * t371 - t462;
t364 = pkin(5) * t293 + t283;
t138 = t300 * t144;
t74 = -pkin(4) * t223 - t158 * t304 + t138;
t437 = -pkin(5) * t160 + t364 * t389 - t74;
t117 = -pkin(4) * t309 + qJ(5) * t191;
t71 = -t300 * t116 + t140 * t304;
t45 = t293 * t117 + t296 * t71;
t436 = t100 * t293;
t435 = t100 * t296;
t431 = t191 * t215;
t430 = t191 * t223;
t429 = t191 * t293;
t428 = t309 * t215;
t427 = t309 * t223;
t425 = t287 * t304;
t424 = t288 * t304;
t423 = t289 * t307;
t419 = t295 * t302;
t411 = t300 * t174;
t410 = t301 * t302;
t405 = t305 * t306;
t53 = -pkin(4) * t215 + qJD(5) - t71;
t403 = -qJD(5) + t53;
t400 = t190 * t246;
t399 = t190 * t248;
t331 = pkin(4) * t304 + qJ(5) * t300 + pkin(3);
t244 = -t331 - t454;
t200 = t293 * t244 + t283 * t415;
t291 = t301 ^ 2;
t396 = -t305 ^ 2 + t291;
t391 = qJD(4) * t283;
t378 = t305 * t423;
t375 = t298 * t405;
t370 = t295 * t298 * t307;
t366 = t295 * t384;
t363 = g(2) * t417 - g(3) * t298;
t6 = -t16 * t293 + t296 * t24;
t13 = -t293 * t34 + t296 * t48;
t28 = -t293 * t54 + t296 * t66;
t38 = -t293 * t77 + t296 * t86;
t44 = t296 * t117 - t293 * t71;
t360 = -t300 * t142 + t162 * t304;
t234 = pkin(2) * t413 - t369;
t358 = -t234 * t302 + t306 * t286;
t355 = t215 * t304;
t354 = t116 * t389 + t140 * t390 + t300 * t58 - t304 * t87;
t352 = qJD(2) + 0.2e1 * t395;
t351 = t275 + t385;
t230 = t248 * t300;
t347 = -t440 * t190 - t230 * t98;
t163 = -t181 * t300 + t304 * t417;
t167 = t186 * t300 - t304 * t419;
t345 = -g(1) * t163 + g(2) * t167;
t344 = g(1) * t306 + g(2) * t302;
t343 = -t293 * t6 + t296 * t7;
t4 = pkin(5) * t100 - pkin(10) * t65 + t6;
t5 = -pkin(10) * t64 + t7;
t342 = t299 * t4 + t303 * t5;
t188 = -pkin(10) * t293 * t300 + t200;
t341 = pkin(5) * t426 - pkin(10) * t161 + qJD(6) * t188 - (pkin(5) * t300 - pkin(10) * t415) * qJD(4) - t439;
t233 = t296 * t244;
t178 = -pkin(10) * t416 + t233 + (-t283 * t293 - pkin(5)) * t304;
t340 = -pkin(10) * t160 - qJD(6) * t178 - (-pkin(10) * t421 - t283 * t416) * qJD(4) + t462;
t20 = pkin(5) * t191 - pkin(10) * t132 + t28;
t21 = -pkin(10) * t130 + t29;
t8 = t20 * t303 - t21 * t299;
t9 = t20 * t299 + t21 * t303;
t157 = t206 * t296 + t228 * t293;
t26 = pkin(5) * t205 - pkin(10) * t157 + t38;
t156 = t206 * t293 - t228 * t296;
t30 = -pkin(10) * t156 + t39;
t337 = t26 * t303 - t299 * t30;
t336 = t26 * t299 + t30 * t303;
t335 = -t28 * t293 + t29 * t296;
t88 = t303 * t156 + t157 * t299;
t89 = -t156 * t299 + t157 * t303;
t333 = -t234 * t306 - t286 * t302;
t330 = -t300 * t119 - t142 * t389 + t159 * t304 - t162 * t390;
t329 = t304 * t174 + t466 * t215;
t78 = -pkin(4) * t228 - t360;
t259 = t444 * t293;
t328 = pkin(10) * t429 - qJD(5) * t296 + qJD(6) * t259 + t45;
t260 = t444 * t296;
t327 = pkin(10) * t191 * t296 - pkin(5) * t309 + qJD(5) * t293 + qJD(6) * t260 + t44;
t18 = -qJD(6) * t434 - t130 * t387 - t299 * t64 + t303 * t65;
t323 = -t18 * t304 + t334 * t466;
t319 = t115 * t215 - t283 * t174;
t318 = g(1) * t167 + g(2) * t163 + g(3) * t205;
t168 = t186 * t304 + t300 * t419;
t317 = -g(1) * t168 - g(2) * t164 - g(3) * t206;
t316 = -g(1) * t186 + g(2) * t181 - g(3) * t229;
t17 = t354 + t459;
t312 = -t17 + t318;
t311 = t458 - t57;
t37 = -pkin(4) * t221 - t330;
t2 = -qJD(6) * t9 - t299 * t5 + t303 * t4;
t308 = t318 - t354;
t285 = -pkin(5) * t296 - pkin(4);
t284 = -pkin(3) - t454;
t263 = pkin(2) * t375;
t243 = -t298 * t410 + t405;
t241 = -t298 * t409 - t407;
t240 = -t375 + t410;
t235 = t364 * t300;
t199 = -t283 * t421 + t233;
t103 = t152 * t296 + t221 * t293;
t102 = t152 * t293 - t221 * t296;
t97 = t168 * t288 - t185 * t287;
t96 = -t168 * t287 - t185 * t288;
t51 = -pkin(5) * t429 + t72;
t50 = pkin(5) * t156 + t78;
t43 = pkin(5) * t130 + t53;
t36 = qJD(6) * t89 + t303 * t102 + t103 * t299;
t35 = -qJD(6) * t88 - t102 * t299 + t103 * t303;
t25 = pkin(5) * t102 + t37;
t12 = -pkin(10) * t102 + t14;
t11 = pkin(5) * t64 + t17;
t10 = pkin(5) * t151 - pkin(10) * t103 + t13;
t1 = t8 * qJD(6) + t342;
t3 = [qJDD(1), -g(2) * t306 + t449, t344 (qJDD(1) * t291 + 0.2e1 * t301 * t368) * t289 (t301 * t383 - t386 * t396) * t456 (qJD(2) * t305 * t352 + t301 * t351) * t295 (t305 * t351 - t352 * t393) * t295, t275 * t298, t379 * t456 + (-pkin(8) * t420 + t278) * t275 + (-pkin(8) * t366 + t272) * t298 - g(1) * t241 - g(2) * t243 - t397 * qJD(2) ^ 2 - 0.2e1 * t460 * t386 -(-pkin(8) * t372 + t274) * t353 - t397 * t275 - (-pkin(8) * t348 + t374) * t298 - g(1) * t240 - g(2) * t242 + 0.2e1 * (-t368 - t384) * t455, t118 * t223 + t119 * t220 + t123 * t222 - t124 * t221 - t153 * t176 + t154 * t175 - t228 * t70 - t229 * t69 - t295 * t344, t70 * t154 + t124 * t119 + t69 * t153 - t123 * t118 - g(1) * t333 - g(2) * t358 + (pkin(2) * t237 * t393 + t286 * t467) * t295, -t152 * t309 + t206 * t99, -t100 * t206 + t151 * t309 - t152 * t191 - t205 * t99, t152 * t215 + t174 * t206 - t221 * t309 + t228 * t99, -t100 * t228 - t151 * t215 - t174 * t205 - t191 * t221, t174 * t228 + t215 * t221, g(1) * t164 - g(2) * t168 + t141 * t100 + t115 * t151 + t118 * t191 + t174 * t360 + t57 * t205 + t215 * t330 + t71 * t221 - t228 * t354, t115 * t152 - t118 * t309 + t141 * t99 - t174 * t402 + t57 * t206 - t215 * t322 - t72 * t221 - t228 * t326 + t345, t13 * t191 + t38 * t100 + t6 * t205 + t28 * t151 + t37 * t130 + t78 * t64 + t17 * t156 + t53 * t102 - g(1) * (-t164 * t296 + t182 * t293) - g(2) * (t168 * t296 - t185 * t293) -t14 * t191 - t39 * t100 - t7 * t205 - t29 * t151 + t37 * t132 + t78 * t65 + t17 * t157 + t53 * t103 - g(1) * (t164 * t293 + t182 * t296) - g(2) * (-t168 * t293 - t185 * t296) -t102 * t29 - t103 * t28 - t13 * t132 - t130 * t14 - t156 * t7 - t157 * t6 - t38 * t65 - t39 * t64 - t345, t7 * t39 + t29 * t14 + t6 * t38 + t28 * t13 + t17 * t78 + t53 * t37 - g(1) * (pkin(3) * t181 - pkin(4) * t164 + pkin(9) * t182 - qJ(5) * t163 + t333) - g(2) * (pkin(3) * t186 + pkin(4) * t168 - pkin(9) * t185 + qJ(5) * t167 + t358) t18 * t89 - t334 * t35, -t18 * t88 - t19 * t89 + t334 * t36 + t35 * t470, -t151 * t334 + t18 * t205 + t190 * t35 + t89 * t98, t151 * t470 - t19 * t205 - t190 * t36 - t88 * t98, t151 * t190 + t205 * t98 (-qJD(6) * t336 + t10 * t303 - t12 * t299) * t190 + t337 * t98 + t2 * t205 + t8 * t151 - t25 * t470 + t50 * t19 + t11 * t88 + t43 * t36 + g(1) * t463 - g(2) * t97 -(qJD(6) * t337 + t10 * t299 + t12 * t303) * t190 - t336 * t98 - t1 * t205 - t9 * t151 - t25 * t334 + t50 * t18 + t11 * t89 + t43 * t35 - g(1) * t464 - g(2) * t96; 0, 0, 0, -t301 * t378, t396 * t423, -t305 * t370 + t366, t301 * t370 + t365, t275, -t450 + g(2) * t240 + t272 + (-pkin(8) * t384 - t446) * t295 + t460 * t307, pkin(1) * t378 + (-pkin(8) * t373 + t273) * t395 + g(1) * t243 - g(2) * t241 + g(3) * t420 + t273 * qJD(2) - t374 (t124 - t143) * t223 + (t123 - t144) * t220 + (t175 * t294 - t176 * t297) * pkin(2), -g(2) * t263 + t123 * t143 - t124 * t144 + (t70 * t294 + t69 * t297 - t450 + g(2) * t410 + (-t237 * t394 - t446) * t295) * pkin(2), t300 * t99 - t309 * t355 (t99 - t431) * t304 + (-t100 + t428) * t300, t215 * t355 + t411 + t427, t329 + t430, -t215 * t223, t284 * t100 + t138 * t215 - t143 * t191 - t71 * t223 + t319 * t300 + ((-t158 - t391) * t215 + t311) * t304, t284 * t99 + t401 * t215 + t72 * t223 + t143 * t309 + t319 * t304 + (t215 * t391 - t311) * t300, t199 * t100 - t74 * t130 - t53 * t160 + t439 * t191 + t316 * t293 + (-t6 + (t130 * t283 + t293 * t53) * qJD(4) + t458 * t296) * t304 + (t17 * t293 + t215 * t28 + t283 * t64) * t300, -t200 * t100 - t74 * t132 - t53 * t161 - t438 * t191 + t316 * t296 + (t7 + (t132 * t283 + t296 * t53) * qJD(4) - t458 * t293) * t304 + (t17 * t296 - t215 * t29 + t283 * t65) * t300, t160 * t29 + t161 * t28 - t199 * t65 - t200 * t64 - t439 * t132 - t438 * t130 + (-t28 * t296 - t29 * t293) * t389 + (-t293 * t7 - t296 * t6 + t458) * t300, t7 * t200 + t6 * t199 - t53 * t74 - g(1) * (pkin(2) * t242 + pkin(9) * t186) - g(2) * (-pkin(2) * t410 - pkin(9) * t181 + t263) - g(3) * (pkin(2) * t418 + t452) + t438 * t29 + (t17 * t300 + t389 * t53) * t283 + t439 * t28 + t458 * t331, -t18 * t231 - t334 * t441, -t18 * t230 + t19 * t231 + t334 * t440 + t441 * t470, t323 - t457, t347 + t465, t190 * t356 - t304 * t98 (t178 * t303 - t188 * t299) * t98 - t2 * t304 + t235 * t19 + t11 * t230 - g(1) * (t185 * t424 + t186 * t287) - g(2) * (-t181 * t287 + t182 * t424) - g(3) * (-t228 * t424 + t229 * t287) - t437 * t470 + t440 * t43 + t8 * t356 + (t299 * t340 - t303 * t341) * t190 -(t178 * t299 + t188 * t303) * t98 + t1 * t304 + t235 * t18 - t11 * t231 - g(1) * (-t185 * t425 + t186 * t288) - g(2) * (-t181 * t288 - t182 * t425) - g(3) * (t228 * t425 + t229 * t288) - t437 * t334 + t441 * t43 - t9 * t356 + (t299 * t341 + t303 * t340) * t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220 ^ 2 - t223 ^ 2, t123 * t223 - t124 * t220 + (-t339 - t449) * t295 + t363 + t382, 0, 0, 0, 0, 0, t329 - t430, -t215 ^ 2 * t304 - t411 + t427, -t304 * t64 + (-t293 * t389 + t160) * t191 + (t130 * t215 - t436) * t300, -t304 * t65 + (-t296 * t389 + t161) * t191 + (t132 * t215 - t435) * t300, t130 * t161 - t132 * t160 + (t293 * t65 - t296 * t64) * t300 + (-t130 * t296 + t132 * t293) * t389, -g(1) * t419 + t160 * t28 - t161 * t29 + (qJD(4) * t335 - t17) * t304 + (t215 * t53 + t343) * t300 + t363, 0, 0, 0, 0, 0, t347 - t465, t323 + t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309 * t191, -t191 ^ 2 + t309 ^ 2, t99 + t431, -t100 - t428, t174, t115 * t309 + t215 * t72 + t308, t115 * t191 + t215 * t71 - t317 - t326, -qJ(5) * t436 - pkin(4) * t64 - t130 * t72 + t309 * t28 + (t293 * t403 - t44) * t191 + t312 * t296, -qJ(5) * t435 - pkin(4) * t65 - t132 * t72 - t309 * t29 + (t296 * t403 + t45) * t191 - t312 * t293, t130 * t45 + t132 * t44 + (-qJ(5) * t64 - qJD(5) * t130 - t191 * t28 + t7) * t296 + (qJ(5) * t65 + qJD(5) * t132 - t191 * t29 - t6) * t293 + t317, -t28 * t44 - t29 * t45 - t53 * t72 + t335 * qJD(5) + t312 * pkin(4) + (t317 + t343) * qJ(5), t18 * t248 + t334 * t400, -t18 * t246 - t19 * t248 + t334 * t399 - t400 * t470, -t190 * t400 + t248 * t98 - t309 * t334, -t190 * t399 - t246 * t98 + t309 * t470, t190 * t309 (-t259 * t303 - t260 * t299) * t98 + t285 * t19 + t11 * t246 + t8 * t309 + t51 * t470 + t399 * t43 + (t299 * t328 - t303 * t327) * t190 + t318 * t288 -(-t259 * t299 + t260 * t303) * t98 + t285 * t18 + t11 * t248 - t9 * t309 + t51 * t334 - t400 * t43 + (t299 * t327 + t303 * t328) * t190 - t318 * t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132 * t191 + t64, -t130 * t191 + t65, -t130 ^ 2 - t132 ^ 2, t130 * t29 + t132 * t28 - t308 + t459, 0, 0, 0, 0, 0, t19 - t469, t18 + t472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t334 * t470, t334 ^ 2 - t470 ^ 2, t18 - t472, -t19 - t469, t98, t9 * t190 + t43 * t334 - g(1) * t96 + g(2) * t464 - g(3) * (-t206 * t287 + t228 * t288) + t2, -t43 * t470 + g(1) * t97 + g(2) * t463 - g(3) * (-t206 * t288 - t228 * t287) - t342 + (t190 - qJD(6)) * t8;];
tau_reg  = t3;
