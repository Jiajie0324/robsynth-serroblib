% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRPR5_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR5_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR5_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR5_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:35:12
% EndTime: 2019-03-09 10:35:44
% DurationCPUTime: 14.50s
% Computational Cost: add. (23027->670), mult. (69159->914), div. (0->0), fcn. (56166->12), ass. (0->299)
t292 = sin(pkin(6));
t298 = cos(qJ(2));
t388 = t292 * t298;
t408 = cos(pkin(11));
t334 = t408 * t388;
t267 = qJD(1) * t334;
t291 = sin(pkin(11));
t296 = sin(qJ(2));
t389 = t292 * t296;
t364 = qJD(1) * t389;
t230 = t291 * t364 - t267;
t226 = qJD(4) + t230;
t290 = sin(pkin(12));
t293 = cos(pkin(12));
t438 = (t291 * t298 + t296 * t408) * t292;
t234 = qJD(1) * t438;
t295 = sin(qJ(4));
t297 = cos(qJ(4));
t409 = cos(pkin(6));
t350 = t409 * qJD(1);
t322 = t350 + qJD(2);
t302 = -t297 * t234 - t295 * t322;
t147 = t226 * t290 - t293 * t302;
t294 = sin(qJ(6));
t426 = cos(qJ(6));
t192 = t290 * t302;
t434 = t226 * t293 + t192;
t315 = t426 * t434;
t87 = -t294 * t147 + t315;
t456 = t87 ^ 2;
t268 = t297 * t322;
t198 = t234 * t295 - t268;
t197 = qJD(6) + t198;
t455 = t197 * t87;
t365 = pkin(1) * t409;
t281 = t298 * t365;
t276 = qJD(1) * t281;
t424 = pkin(8) + qJ(3);
t356 = t296 * t424;
t336 = t292 * t356;
t218 = -qJD(1) * t336 + t276;
t280 = t296 * t365;
t429 = t388 * t424 + t280;
t219 = t429 * qJD(1);
t351 = t408 * t219;
t161 = t291 * t218 + t351;
t454 = -t295 * qJD(5) - t161 + t226 * (pkin(4) * t295 - qJ(5) * t297);
t88 = t147 * t426 + t294 * t434;
t453 = t88 ^ 2;
t390 = t290 * t297;
t179 = -t230 * t390 - t293 * t234;
t371 = qJD(4) * t297;
t330 = t290 * t371 - t179;
t385 = t293 * t297;
t180 = -t230 * t385 + t234 * t290;
t452 = -t293 * t371 + t180;
t284 = pkin(2) * t291 + pkin(9);
t372 = qJD(4) * t295;
t362 = t284 * t372;
t208 = t291 * t219;
t162 = t218 * t408 - t208;
t342 = pkin(2) * t364;
t177 = pkin(3) * t234 + pkin(9) * t230 + t342;
t92 = t297 * t162 + t295 * t177;
t78 = qJ(5) * t234 + t92;
t412 = t454 * t293 + (t362 + t78) * t290;
t451 = t290 * t454 - t293 * t78;
t396 = t230 * t295;
t450 = -pkin(5) * t396 - pkin(10) * t180 - (pkin(5) * t295 - pkin(10) * t385) * qJD(4) - t412;
t386 = t293 * t295;
t449 = pkin(10) * t179 + (-pkin(10) * t390 - t284 * t386) * qJD(4) + t451;
t300 = -t429 * qJD(2) - qJD(3) * t389;
t448 = t291 * t300;
t344 = t226 * t295;
t446 = t302 * t344;
t261 = t290 * t426 + t294 * t293;
t357 = qJD(6) * t426;
t370 = qJD(6) * t294;
t433 = -t290 * t370 + t293 * t357;
t381 = t179 * t426 + t294 * t180 - t261 * t371 - t295 * t433;
t255 = t261 * qJD(6);
t380 = t255 * t295 + t294 * t330 + t426 * t452;
t324 = t434 * qJD(4);
t368 = qJD(1) * qJD(2);
t354 = t292 * t368;
t335 = t296 * t354;
t225 = qJD(2) * t267 - t291 * t335;
t148 = -qJD(4) * t268 - t297 * t225 + t234 * t372;
t139 = t290 * t148;
t233 = qJD(2) * t438;
t224 = qJD(1) * t233;
t347 = t224 * t293 + t139;
t445 = -t347 * t295 - t297 * t324;
t274 = qJD(2) * t276;
t303 = (-qJD(2) * t356 + qJD(3) * t298) * t292;
t193 = qJD(1) * t303 + t274;
t117 = qJD(1) * t448 + t193 * t408;
t304 = pkin(2) * t409 - t336;
t201 = qJD(2) * pkin(2) + qJD(1) * t304 + t276;
t142 = t291 * t201 + t351;
t131 = pkin(9) * t322 + t142;
t262 = (-pkin(2) * t298 - pkin(1)) * t292;
t374 = qJD(1) * t262;
t253 = qJD(3) + t374;
t157 = t230 * pkin(3) - t234 * pkin(9) + t253;
t273 = pkin(2) * t335;
t158 = pkin(3) * t224 - pkin(9) * t225 + t273;
t339 = t295 * t117 + t131 * t371 + t157 * t372 - t297 * t158;
t77 = t131 * t297 + t157 * t295;
t444 = t226 * t77 - t339;
t443 = t372 + t396;
t107 = -t148 * t293 + t224 * t290;
t349 = t294 * t107 - t426 * t347;
t32 = qJD(6) * t88 + t349;
t442 = t297 * t32 + t344 * t87;
t287 = t292 ^ 2;
t355 = t287 * t368;
t441 = -0.2e1 * t355;
t411 = -t293 * t362 + t451;
t41 = t297 * t117 - t131 * t372 + t157 * t371 + t295 * t158;
t76 = -t295 * t131 + t297 * t157;
t440 = -t226 * t76 + t41;
t439 = t230 * t322;
t437 = t452 * t198;
t436 = t347 * t297;
t149 = -qJD(4) * t302 + t295 * t225;
t312 = -t295 * t438 + t297 * t409;
t108 = t149 * t312;
t212 = t295 * t409 + t297 * t438;
t373 = qJD(2) * t292;
t363 = t296 * t373;
t232 = -qJD(2) * t334 + t291 * t363;
t170 = qJD(4) * t212 - t232 * t295;
t435 = t170 * t198 - t108;
t243 = t261 * t295;
t31 = -qJD(6) * t315 - t426 * t107 + t147 * t370 - t294 * t347;
t432 = -t243 * t31 - t381 * t88;
t391 = t290 * t295;
t431 = -t107 * t391 - t147 * t330;
t313 = -t294 * t290 + t293 * t426;
t244 = t313 * t295;
t430 = t244 * t149 - t197 * t380;
t70 = qJ(5) * t226 + t77;
t141 = t201 * t408 - t208;
t130 = -pkin(3) * t322 - t141;
t73 = t198 * pkin(4) + qJ(5) * t302 + t130;
t33 = -t290 * t70 + t293 * t73;
t22 = pkin(5) * t198 - pkin(10) * t147 + t33;
t34 = t290 * t73 + t293 * t70;
t24 = pkin(10) * t434 + t34;
t317 = -t22 * t426 + t294 * t24;
t320 = qJ(5) * t224 + qJD(5) * t226;
t29 = t320 + t41;
t196 = t408 * t300;
t116 = -qJD(1) * t196 + t291 * t193;
t55 = pkin(4) * t149 + qJ(5) * t148 + qJD(5) * t302 + t116;
t15 = -t29 * t290 + t293 * t55;
t8 = pkin(5) * t149 - pkin(10) * t107 + t15;
t16 = t293 * t29 + t290 * t55;
t9 = pkin(10) * t347 + t16;
t1 = -qJD(6) * t317 + t294 * t8 + t426 * t9;
t428 = t198 ^ 2;
t427 = t234 ^ 2;
t299 = qJD(1) ^ 2;
t425 = t88 * t87;
t423 = pkin(10) + qJ(5);
t285 = -pkin(2) * t408 - pkin(3);
t258 = -t297 * pkin(4) - t295 * qJ(5) + t285;
t246 = t293 * t258;
t188 = -pkin(10) * t386 + t246 + (-t284 * t290 - pkin(5)) * t297;
t206 = t290 * t258 + t284 * t385;
t195 = -pkin(10) * t391 + t206;
t115 = t294 * t188 + t195 * t426;
t422 = qJD(6) * t115 + t449 * t294 + t426 * t450;
t114 = t188 * t426 - t294 * t195;
t421 = -qJD(6) * t114 + t294 * t450 - t449 * t426;
t241 = t291 * t389 - t334;
t277 = qJD(2) * t281;
t204 = t277 + t303;
t134 = t408 * t204 + t448;
t217 = t281 + t304;
t376 = pkin(8) * t388 + t280;
t229 = qJ(3) * t388 + t376;
t173 = t291 * t217 + t408 * t229;
t160 = pkin(9) * t409 + t173;
t341 = pkin(2) * t363;
t178 = pkin(3) * t233 + pkin(9) * t232 + t341;
t181 = t241 * pkin(3) - pkin(9) * t438 + t262;
t53 = t297 * t134 - t160 * t372 + t295 * t178 + t181 * t371;
t40 = qJ(5) * t233 + qJD(5) * t241 + t53;
t133 = t204 * t291 - t196;
t171 = qJD(4) * t312 - t232 * t297;
t61 = pkin(4) * t170 - qJ(5) * t171 - qJD(5) * t212 + t133;
t21 = t290 * t61 + t293 * t40;
t95 = t297 * t160 + t295 * t181;
t82 = qJ(5) * t241 + t95;
t172 = t217 * t408 - t291 * t229;
t159 = -pkin(3) * t409 - t172;
t93 = -pkin(4) * t312 - t212 * qJ(5) + t159;
t47 = t290 * t93 + t293 * t82;
t35 = -t224 * pkin(4) + t339;
t416 = t35 * t290;
t415 = t35 * t293;
t271 = t423 * t290;
t272 = t423 * t293;
t216 = -t294 * t271 + t272 * t426;
t400 = t198 * t293;
t132 = -pkin(4) * t302 + qJ(5) * t198;
t57 = t293 * t132 - t290 * t76;
t39 = -pkin(5) * t302 + pkin(10) * t400 + t57;
t401 = t198 * t290;
t58 = t290 * t132 + t293 * t76;
t48 = pkin(10) * t401 + t58;
t414 = qJD(5) * t261 + qJD(6) * t216 - t294 * t48 + t39 * t426;
t215 = -t271 * t426 - t294 * t272;
t413 = qJD(5) * t313 + qJD(6) * t215 - t294 * t39 - t426 * t48;
t353 = pkin(5) * t290 + t284;
t91 = -t295 * t162 + t177 * t297;
t79 = -pkin(4) * t234 - t91;
t410 = -pkin(5) * t179 + t353 * t371 - t79;
t407 = t147 * t230;
t406 = t149 * t297;
t404 = t198 * t302;
t403 = t198 * t230;
t402 = t198 * t234;
t399 = t302 * t234;
t398 = t224 * t241;
t395 = t234 * t230;
t393 = t287 * t299;
t392 = t290 * t149;
t387 = t293 * t149;
t384 = t295 * t224;
t69 = -t226 * pkin(4) + qJD(5) - t76;
t382 = -qJD(5) + t69;
t379 = -t261 * t198 - t255;
t378 = -t313 * t198 - t433;
t377 = -t295 * t149 - t198 * t371;
t375 = t296 ^ 2 - t298 ^ 2;
t369 = t234 * qJD(2);
t366 = t298 * t393;
t20 = -t290 * t40 + t293 * t61;
t46 = -t290 * t82 + t293 * t93;
t352 = t234 * t409;
t348 = -t107 * t297 + t147 * t372;
t94 = -t295 * t160 + t181 * t297;
t343 = t226 * t297;
t340 = t296 * t366;
t338 = -t244 * t32 - t380 * t87;
t333 = t292 * t299 * t409;
t332 = pkin(1) * t441;
t331 = -t243 * t149 + t197 * t381;
t327 = -t15 * t290 + t16 * t293;
t326 = -t290 * t33 + t293 * t34;
t323 = t296 * t298 * t355;
t321 = 0.2e1 * t350 + qJD(2);
t54 = -t295 * t134 - t160 * t371 + t178 * t297 - t181 * t372;
t318 = t297 * t224 - t226 * t443;
t83 = -pkin(4) * t241 - t94;
t176 = t212 * t293 + t241 * t290;
t27 = -pkin(5) * t312 - pkin(10) * t176 + t46;
t175 = t212 * t290 - t241 * t293;
t36 = -pkin(10) * t175 + t47;
t10 = t27 * t426 - t294 * t36;
t6 = t294 * t22 + t24 * t426;
t11 = t294 * t27 + t36 * t426;
t316 = t330 * t198;
t97 = -t294 * t175 + t176 * t426;
t236 = -pkin(8) * t335 + t274;
t310 = t31 * t297 + t443 * t88;
t309 = t130 * t226 - t224 * t284;
t308 = -t180 * t434 - t293 * t445;
t307 = t198 * t344 - t406;
t45 = -pkin(4) * t233 - t54;
t250 = t376 * qJD(2);
t2 = -qJD(6) * t6 - t294 * t9 + t426 * t8;
t23 = -pkin(5) * t347 + t35;
t286 = -pkin(5) * t293 - pkin(4);
t256 = -pkin(8) * t389 + t281;
t251 = t353 * t295;
t249 = -pkin(8) * t363 + t277;
t248 = t376 * qJD(1);
t247 = -pkin(8) * t364 + t276;
t237 = qJD(1) * t250;
t228 = t230 ^ 2;
t205 = -t284 * t390 + t246;
t119 = t171 * t293 + t233 * t290;
t118 = t171 * t290 - t233 * t293;
t96 = t175 * t426 + t294 * t176;
t66 = -pkin(5) * t401 + t77;
t63 = pkin(5) * t175 + t83;
t56 = -pkin(5) * t434 + t69;
t44 = qJD(6) * t97 + t118 * t426 + t294 * t119;
t43 = t294 * t118 - t119 * t426 + t175 * t357 + t176 * t370;
t25 = pkin(5) * t118 + t45;
t17 = -pkin(10) * t118 + t21;
t12 = pkin(5) * t170 - pkin(10) * t119 + t20;
t4 = -qJD(6) * t11 + t12 * t426 - t294 * t17;
t3 = qJD(6) * t10 + t294 * t12 + t17 * t426;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t323, t375 * t441, t321 * t298 * t373, -0.2e1 * t323, -t321 * t363, 0, -t237 * t409 - t250 * t322 + t296 * t332, -t236 * t409 - t249 * t322 + t298 * t332 (t236 * t298 + t237 * t296 + (-t247 * t298 - t248 * t296) * qJD(2) + (t249 * t298 + t250 * t296 + (-t256 * t298 - t296 * t376) * qJD(2)) * qJD(1)) * t292, t236 * t376 - t237 * t256 - t247 * t250 + t248 * t249, t225 * t438 - t232 * t234, -t224 * t438 - t225 * t241 + t230 * t232 - t233 * t234, t225 * t409 - t232 * t322, t230 * t233 + t398, -t224 * t409 - t233 * t322, 0, -t133 * t322 - t116 * t409 + t262 * t224 + t253 * t233 + (qJD(1) * t241 + t230) * t341, -t117 * t409 - t134 * t322 + t262 * t225 - t253 * t232 + 0.2e1 * t234 * t341, t116 * t438 - t117 * t241 + t133 * t234 - t134 * t230 + t141 * t232 - t142 * t233 - t172 * t225 - t173 * t224, -t116 * t172 + t117 * t173 - t141 * t133 + t142 * t134 + (t253 + t374) * t341, -t148 * t212 - t171 * t302, -t148 * t312 - t149 * t212 + t170 * t302 - t171 * t198, -t148 * t241 + t171 * t226 + t212 * t224 - t233 * t302, t435, -t149 * t241 - t170 * t226 - t198 * t233 + t224 * t312, t226 * t233 + t398, -t116 * t312 + t130 * t170 + t133 * t198 + t149 * t159 + t224 * t94 + t226 * t54 + t233 * t76 - t241 * t339, t116 * t212 + t130 * t171 - t133 * t302 - t148 * t159 - t224 * t95 - t226 * t53 - t233 * t77 - t241 * t41, t148 * t94 - t149 * t95 - t170 * t77 - t171 * t76 - t198 * t53 + t212 * t339 + t302 * t54 + t312 * t41, t116 * t159 + t130 * t133 - t339 * t94 + t41 * t95 + t53 * t77 + t54 * t76, t107 * t176 + t119 * t147, -t107 * t175 - t147 * t118 + t119 * t434 + t176 * t347, -t107 * t312 + t119 * t198 + t147 * t170 + t149 * t176, -t118 * t434 - t175 * t347, -t118 * t198 - t175 * t149 + t170 * t434 - t312 * t347, t435, t69 * t118 + t46 * t149 - t15 * t312 + t33 * t170 + t35 * t175 + t20 * t198 - t347 * t83 - t434 * t45, t107 * t83 + t119 * t69 + t147 * t45 - t149 * t47 + t16 * t312 - t170 * t34 + t176 * t35 - t198 * t21, -t46 * t107 - t34 * t118 - t33 * t119 - t20 * t147 - t15 * t176 - t16 * t175 + t21 * t434 + t347 * t47, t15 * t46 + t16 * t47 + t20 * t33 + t21 * t34 + t35 * t83 + t45 * t69, -t31 * t97 - t43 * t88, t31 * t96 - t32 * t97 - t43 * t87 - t44 * t88, t149 * t97 + t170 * t88 - t197 * t43 + t31 * t312, t32 * t96 - t44 * t87, -t149 * t96 + t170 * t87 - t197 * t44 + t312 * t32, t170 * t197 - t108, t10 * t149 - t170 * t317 + t197 * t4 - t2 * t312 + t23 * t96 - t25 * t87 + t32 * t63 + t44 * t56, t1 * t312 - t11 * t149 - t170 * t6 - t197 * t3 + t23 * t97 + t25 * t88 - t31 * t63 - t43 * t56, -t1 * t96 + t10 * t31 - t11 * t32 - t2 * t97 + t3 * t87 - t317 * t43 - t4 * t88 - t44 * t6, t1 * t11 + t10 * t2 + t23 * t63 + t25 * t56 + t3 * t6 - t317 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t340, t375 * t393, -t298 * t333, t340, t296 * t333, 0, -t298 * pkin(8) * t354 + t248 * t322 + (-qJD(2) * t350 + t393) * t296 * pkin(1), pkin(1) * t366 + t247 * t322 - t236, 0, 0, t395, -t228 + t427, t225 + t439, -t395, t369 + (t352 - t233) * qJD(1), 0, t161 * t322 - t230 * t342 - t253 * t234 - t116, t162 * t322 + t253 * t230 - t234 * t342 - t117 (t142 - t161) * t234 + (-t141 + t162) * t230 + (-t224 * t291 - t225 * t408) * pkin(2), t141 * t161 - t142 * t162 + (-t116 * t408 + t117 * t291 - t253 * t364) * pkin(2), -t148 * t295 - t302 * t343 (-t148 - t403) * t297 + t446 + t377, t226 * t343 + t384 + t399, t307, t318 + t402, -t226 * t234, -t116 * t297 + t285 * t149 - t161 * t198 - t76 * t234 + (-t284 * t371 - t91) * t226 + t309 * t295, t116 * t295 - t285 * t148 + t161 * t302 + t77 * t234 + (t92 + t362) * t226 + t309 * t297, t92 * t198 - t91 * t302 + (-t149 * t284 - t230 * t76 + t41 + (-t284 * t302 - t76) * qJD(4)) * t297 + (-t148 * t284 - t230 * t77 + t339 + (t198 * t284 - t77) * qJD(4)) * t295, t116 * t285 - t130 * t161 - t76 * t91 - t77 * t92 + (t339 * t295 + t41 * t297 + (-t295 * t77 - t297 * t76) * qJD(4)) * t284, t107 * t386 - t147 * t452, t308 + t431 (t387 + t407) * t295 - t437 + t348, t434 * t179 + t290 * t445, -t436 - t316 + (t230 * t434 + t324 - t392) * t295, t307, t205 * t149 + t79 * t434 - t69 * t179 + t412 * t198 + (-t15 + (-t284 * t434 + t69 * t290) * qJD(4)) * t297 + (t226 * t33 - t284 * t347 + t416) * t295, -t79 * t147 - t206 * t149 - t69 * t180 - t411 * t198 + (t16 + (t147 * t284 + t293 * t69) * qJD(4)) * t297 + (t107 * t284 - t226 * t34 + t415) * t295, t206 * t347 - t205 * t107 + t34 * t179 + t33 * t180 + (-t15 * t293 - t16 * t290) * t295 - t412 * t147 + (-t290 * t34 - t293 * t33) * t371 + t411 * t434, t15 * t205 + t16 * t206 - t69 * t79 + t411 * t34 + t412 * t33 + (t295 * t35 + t371 * t69) * t284, -t31 * t244 - t380 * t88, t338 - t432, t310 + t430, t32 * t243 + t381 * t87, t331 + t442, t197 * t344 - t406, t114 * t149 - t197 * t422 - t2 * t297 + t23 * t243 + t251 * t32 - t317 * t344 - t381 * t56 - t410 * t87, t1 * t297 - t115 * t149 + t197 * t421 + t23 * t244 - t251 * t31 - t344 * t6 - t380 * t56 + t410 * t88, -t1 * t243 + t114 * t31 - t115 * t32 - t2 * t244 - t317 * t380 + t381 * t6 - t421 * t87 + t422 * t88, t1 * t115 + t2 * t114 + t23 * t251 + t317 * t422 + t410 * t56 - t421 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t369 + (t352 + t233) * qJD(1), t225 - t439, -t228 - t427, t141 * t234 + t142 * t230 + t273, 0, 0, 0, 0, 0, 0, t318 - t402, -t226 ^ 2 * t297 - t384 + t399 (t148 - t403) * t297 - t446 + t377, -t130 * t234 + t440 * t295 + t297 * t444, 0, 0, 0, 0, 0, 0, t436 - t316 + (-t226 * t434 - t392) * t295 (-t387 + t407) * t295 + t437 + t348, t308 - t431, t33 * t179 - t34 * t180 + (qJD(4) * t326 - t35) * t297 + (t226 * t69 + t327) * t295, 0, 0, 0, 0, 0, 0, t331 - t442, t310 - t430, t338 + t432, t1 * t244 - t2 * t243 - t23 * t297 - t317 * t381 + t344 * t56 - t380 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t404, t302 ^ 2 - t428, t198 * t226 - t148, t404, -t226 * t302 - t149, t224, t130 * t302 + t444, t130 * t198 - t440, 0, 0, t107 * t290 + t147 * t400, t290 * t347 + t107 * t293 + (-t147 * t290 + t293 * t434) * t198, t147 * t302 + t293 * t428 + t392, t293 * t347 - t401 * t434, -t290 * t428 + t302 * t434 + t387, t404, -qJ(5) * t392 + pkin(4) * t347 - t415 + t33 * t302 + t77 * t434 + (t290 * t382 - t57) * t198, -qJ(5) * t387 - pkin(4) * t107 - t77 * t147 - t34 * t302 + t416 + (t293 * t382 + t58) * t198, t57 * t147 - t58 * t192 + (qJ(5) * t139 + qJD(5) * t192 - t33 * t198 - t58 * t226 + t293 * t320 + t16) * t293 + (qJ(5) * t107 + qJD(5) * t147 - t198 * t34 - t15) * t290, -t35 * pkin(4) + qJ(5) * t327 + qJD(5) * t326 - t33 * t57 - t34 * t58 - t69 * t77, -t31 * t261 - t378 * t88, -t261 * t32 - t31 * t313 - t378 * t87 + t379 * t88, t261 * t149 - t197 * t378 + t302 * t88, -t313 * t32 + t379 * t87, t149 * t313 + t197 * t379 + t302 * t87, t197 * t302, t215 * t149 - t197 * t414 - t23 * t313 + t286 * t32 - t302 * t317 - t379 * t56 + t66 * t87, -t216 * t149 - t197 * t413 + t23 * t261 - t286 * t31 - t302 * t6 - t378 * t56 - t66 * t88, t1 * t313 - t2 * t261 + t215 * t31 - t216 * t32 - t317 * t378 + t379 * t6 + t413 * t87 + t414 * t88, t1 * t216 + t2 * t215 + t23 * t286 + t317 * t414 + t413 * t6 - t56 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147 * t198 - t347, t198 * t434 + t107, -t147 ^ 2 - t434 ^ 2, t147 * t33 - t34 * t434 + t35, 0, 0, 0, 0, 0, 0, t88 * t197 + t32, -t31 + t455, -t453 - t456, -t317 * t88 - t6 * t87 + t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t425, t453 - t456, -t31 - t455, t425, -t349 + (-qJD(6) + t197) * t88, t149, t6 * t197 - t56 * t88 + t2, -t197 * t317 - t56 * t87 - t1, 0, 0;];
tauc_reg  = t5;
