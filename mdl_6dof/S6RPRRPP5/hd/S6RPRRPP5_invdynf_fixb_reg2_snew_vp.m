% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:40:00
% EndTime: 2019-05-05 21:40:07
% DurationCPUTime: 7.48s
% Computational Cost: add. (15831->292), mult. (37878->304), div. (0->0), fcn. (28364->8), ass. (0->171)
t2316 = sin(pkin(9));
t2317 = cos(pkin(9));
t2320 = sin(qJ(3));
t2323 = cos(qJ(3));
t2343 = t2316 * t2323 + t2317 * t2320;
t2298 = t2343 * qJD(1);
t2319 = sin(qJ(4));
t2322 = cos(qJ(4));
t2284 = qJD(3) * t2319 + t2298 * t2322;
t2355 = t2316 * t2320;
t2296 = (-t2317 * t2323 + t2355) * qJD(1);
t2292 = qJD(4) + t2296;
t2359 = t2296 * qJD(3);
t2379 = t2343 * qJDD(1);
t2337 = t2379 - t2359;
t2335 = -t2322 * qJDD(3) + t2319 * t2337;
t2213 = (qJD(4) - t2292) * t2284 + t2335;
t2282 = -qJD(3) * t2322 + t2319 * t2298;
t2332 = -t2282 * qJD(4) + t2319 * qJDD(3) + t2322 * t2337;
t2360 = t2282 * t2292;
t2329 = t2332 + t2360;
t2179 = t2213 * t2319 + t2329 * t2322;
t2321 = sin(qJ(1));
t2324 = cos(qJ(1));
t2182 = t2213 * t2322 - t2329 * t2319;
t2281 = t2284 ^ 2;
t2374 = t2282 ^ 2;
t2235 = t2281 + t2374;
t2159 = t2182 * t2320 - t2235 * t2323;
t2162 = t2182 * t2323 + t2235 * t2320;
t2401 = t2159 * t2316 - t2162 * t2317;
t2418 = t2179 * t2324 + t2321 * t2401;
t2417 = -t2179 * t2321 + t2324 * t2401;
t2330 = t2332 - t2360;
t2270 = t2292 ^ 2;
t2248 = t2281 + t2270;
t2253 = t2284 * t2282;
t2311 = t2317 * qJDD(1);
t2308 = t2323 * t2311;
t2352 = t2316 * qJDD(1);
t2345 = t2320 * t2352 - t2308;
t2357 = t2298 * qJD(3);
t2339 = qJDD(4) + t2345 + t2357;
t2381 = t2253 + t2339;
t2394 = -t2248 * t2319 + t2322 * t2381;
t2404 = -t2330 * t2320 + t2323 * t2394;
t2405 = t2320 * t2394 + t2323 * t2330;
t2152 = t2316 * t2405 - t2317 * t2404;
t2393 = t2248 * t2322 + t2319 * t2381;
t2424 = t2152 * t2321 + t2324 * t2393;
t2423 = t2152 * t2324 - t2321 * t2393;
t2133 = t2159 * t2317 + t2162 * t2316;
t2380 = -t2374 - t2270;
t2382 = -t2253 + t2339;
t2398 = t2319 * t2380 + t2382 * t2322;
t2407 = t2324 * t2398;
t2334 = t2284 * qJD(4) + t2335;
t2214 = t2292 * t2284 + t2334;
t2397 = -t2382 * t2319 + t2322 * t2380;
t2409 = t2323 * t2397;
t2403 = t2214 * t2320 + t2409;
t2412 = t2320 * t2397;
t2406 = -t2323 * t2214 + t2412;
t2416 = -t2316 * t2406 + t2317 * t2403;
t2422 = t2321 * t2416 - t2407;
t2410 = t2321 * t2398;
t2420 = t2324 * t2416 + t2410;
t2413 = t2316 * t2404 + t2317 * t2405;
t2415 = t2316 * t2403 + t2317 * t2406;
t2325 = qJD(1) ^ 2;
t2305 = t2321 * g(1) - t2324 * g(2);
t2342 = -qJDD(2) + t2305;
t2313 = t2316 ^ 2;
t2314 = t2317 ^ 2;
t2353 = t2313 + t2314;
t2386 = -(pkin(7) * t2353 + qJ(2)) * t2325 - t2342;
t2302 = t2353 * t2325;
t2383 = qJD(4) + t2292;
t2375 = qJD(3) ^ 2;
t2373 = t2296 ^ 2;
t2372 = t2298 ^ 2;
t2371 = t2317 * g(3);
t2370 = t2284 * qJ(6);
t2369 = qJD(2) * qJD(1);
t2358 = t2296 * t2298;
t2356 = t2314 * t2325;
t2346 = t2324 * g(1) + t2321 * g(2);
t2338 = -t2325 * pkin(1) + qJDD(1) * qJ(2) - t2346;
t2277 = -g(3) * t2316 + (t2338 + 0.2e1 * t2369) * t2317;
t2259 = -pkin(2) * t2356 + pkin(7) * t2311 + t2277;
t2348 = pkin(2) * t2317 + pkin(1);
t2351 = -0.2e1 * t2369;
t2331 = -t2371 + (t2351 + t2348 * t2325 + (-pkin(7) - qJ(2)) * qJDD(1) + t2346) * t2316;
t2222 = t2323 * t2259 + t2320 * t2331;
t2268 = pkin(3) * t2296 - pkin(8) * t2298;
t2205 = -pkin(3) * t2375 + qJDD(3) * pkin(8) - t2268 * t2296 + t2222;
t2350 = 0.2e1 * t2357;
t2328 = 0.2e1 * pkin(8) * t2359 + (-t2308 + t2350) * pkin(3) + (pkin(3) * t2355 - pkin(8) * t2343 - t2348) * qJDD(1) + t2386;
t2166 = t2322 * t2205 + t2319 * t2328;
t2347 = pkin(4) * t2292 - (2 * qJD(5));
t2165 = -t2319 * t2205 + t2322 * t2328;
t2221 = -t2320 * t2259 + t2323 * t2331;
t2249 = pkin(4) * t2282 - qJ(5) * t2284;
t2344 = t2339 * qJ(5) + 0.2e1 * qJD(5) * t2292 - t2282 * t2249 + t2166;
t2340 = -t2339 * pkin(4) - t2270 * qJ(5) + qJDD(5) - t2165;
t2204 = -qJDD(3) * pkin(3) - pkin(8) * t2375 + t2298 * t2268 - t2221;
t2336 = t2334 * pkin(4) - qJ(5) * t2330 + t2204;
t2307 = t2317 * t2325 * t2316;
t2304 = -qJDD(1) * t2321 - t2324 * t2325;
t2303 = qJDD(1) * t2324 - t2321 * t2325;
t2301 = t2353 * qJDD(1);
t2300 = t2317 * t2302;
t2299 = t2316 * t2302;
t2294 = qJDD(1) * pkin(1) + t2325 * qJ(2) + t2342;
t2286 = -t2372 - t2375;
t2276 = -t2371 + (-t2338 + t2351) * t2316;
t2275 = t2379 - 0.2e1 * t2359;
t2274 = t2345 + t2350;
t2273 = -qJDD(3) - t2358;
t2272 = qJDD(3) - t2358;
t2271 = t2348 * qJDD(1) - t2386;
t2269 = -t2373 - t2375;
t2251 = -t2372 - t2373;
t2246 = t2273 * t2323 - t2286 * t2320;
t2245 = t2273 * t2320 + t2286 * t2323;
t2241 = -t2276 * t2316 + t2277 * t2317;
t2240 = t2276 * t2317 + t2277 * t2316;
t2232 = t2320 * t2379 - t2323 * t2345;
t2231 = -t2320 * t2345 - t2323 * t2379;
t2230 = t2269 * t2323 - t2272 * t2320;
t2229 = t2269 * t2320 + t2272 * t2323;
t2212 = t2284 * t2383 + t2335;
t2209 = -t2245 * t2316 + t2246 * t2317;
t2208 = t2245 * t2317 + t2246 * t2316;
t2196 = -t2231 * t2316 + t2232 * t2317;
t2195 = t2231 * t2317 + t2232 * t2316;
t2188 = -t2229 * t2316 + t2230 * t2317;
t2187 = t2229 * t2317 + t2230 * t2316;
t2186 = -t2221 * t2320 + t2222 * t2323;
t2185 = t2221 * t2323 + t2222 * t2320;
t2171 = t2212 * t2320 + t2409;
t2168 = -t2212 * t2323 + t2412;
t2158 = -t2185 * t2316 + t2186 * t2317;
t2157 = t2185 * t2317 + t2186 * t2316;
t2156 = t2347 * t2284 + t2336;
t2155 = t2249 * t2284 + t2340;
t2154 = -pkin(4) * t2270 + t2344;
t2146 = -t2168 * t2316 + t2171 * t2317;
t2143 = t2168 * t2317 + t2171 * t2316;
t2141 = t2335 * pkin(5) + t2374 * qJ(6) - qJDD(6) + t2336 + (pkin(5) * t2383 + t2347 + t2370) * t2284;
t2140 = -t2165 * t2319 + t2166 * t2322;
t2139 = t2165 * t2322 + t2166 * t2319;
t2132 = -t2374 * pkin(5) + t2334 * qJ(6) + 0.2e1 * qJD(6) * t2282 + (-t2370 + (-pkin(4) - pkin(5)) * t2292) * t2292 + t2344;
t2131 = -t2339 * pkin(5) + (pkin(5) * t2282 - 0.2e1 * qJD(6) + t2249) * t2284 + t2340 - t2329 * qJ(6);
t2130 = t2140 * t2323 + t2204 * t2320;
t2129 = t2140 * t2320 - t2204 * t2323;
t2128 = t2154 * t2322 + t2155 * t2319;
t2127 = t2154 * t2319 - t2155 * t2322;
t2126 = t2128 * t2323 + t2156 * t2320;
t2125 = t2128 * t2320 - t2156 * t2323;
t2124 = t2131 * t2319 + t2132 * t2322;
t2123 = -t2131 * t2322 + t2132 * t2319;
t2122 = -t2129 * t2316 + t2130 * t2317;
t2121 = t2129 * t2317 + t2130 * t2316;
t2120 = t2124 * t2323 + t2141 * t2320;
t2119 = t2124 * t2320 - t2141 * t2323;
t2118 = -t2125 * t2316 + t2126 * t2317;
t2117 = t2125 * t2317 + t2126 * t2316;
t2116 = -t2119 * t2316 + t2120 * t2317;
t2115 = t2119 * t2317 + t2120 * t2316;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2304, -t2303, 0, -t2305 * t2321 - t2324 * t2346, 0, 0, 0, 0, 0, 0, -t2300 * t2324 - t2311 * t2321, t2299 * t2324 + t2321 * t2352, t2301 * t2324 - t2302 * t2321, t2241 * t2324 - t2294 * t2321, 0, 0, 0, 0, 0, 0, t2188 * t2324 + t2274 * t2321, t2209 * t2324 + t2275 * t2321, t2196 * t2324 + t2251 * t2321, t2158 * t2324 - t2271 * t2321, 0, 0, 0, 0, 0, 0, t2146 * t2324 + t2410, t2423, t2417, t2122 * t2324 + t2139 * t2321, 0, 0, 0, 0, 0, 0, t2420, t2417, -t2423, t2118 * t2324 + t2127 * t2321, 0, 0, 0, 0, 0, 0, t2420, -t2423, -t2417, t2116 * t2324 + t2123 * t2321; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2303, t2304, 0, t2305 * t2324 - t2321 * t2346, 0, 0, 0, 0, 0, 0, -t2300 * t2321 + t2311 * t2324, t2299 * t2321 - t2324 * t2352, t2301 * t2321 + t2302 * t2324, t2241 * t2321 + t2294 * t2324, 0, 0, 0, 0, 0, 0, t2188 * t2321 - t2274 * t2324, t2209 * t2321 - t2275 * t2324, t2196 * t2321 - t2251 * t2324, t2158 * t2321 + t2271 * t2324, 0, 0, 0, 0, 0, 0, t2146 * t2321 - t2407, t2424, t2418, t2122 * t2321 - t2139 * t2324, 0, 0, 0, 0, 0, 0, t2422, t2418, -t2424, t2118 * t2321 - t2127 * t2324, 0, 0, 0, 0, 0, 0, t2422, -t2424, -t2418, t2116 * t2321 - t2123 * t2324; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2240, 0, 0, 0, 0, 0, 0, t2187, t2208, t2195, t2157, 0, 0, 0, 0, 0, 0, t2143, -t2413, -t2133, t2121, 0, 0, 0, 0, 0, 0, t2415, -t2133, t2413, t2117, 0, 0, 0, 0, 0, 0, t2415, t2413, t2133, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2325, -qJDD(1), 0, -t2346, 0, 0, 0, 0, 0, 0, -t2300, t2299, t2301, t2241, 0, 0, 0, 0, 0, 0, t2188, t2209, t2196, t2158, 0, 0, 0, 0, 0, 0, t2146, t2152, t2401, t2122, 0, 0, 0, 0, 0, 0, t2416, t2401, -t2152, t2118, 0, 0, 0, 0, 0, 0, t2416, -t2152, -t2401, t2116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2325, 0, t2305, 0, 0, 0, 0, 0, 0, t2311, -t2352, t2302, t2294, 0, 0, 0, 0, 0, 0, -t2274, -t2275, -t2251, t2271, 0, 0, 0, 0, 0, 0, -t2398, t2393, t2179, -t2139, 0, 0, 0, 0, 0, 0, -t2398, t2179, -t2393, -t2127, 0, 0, 0, 0, 0, 0, -t2398, -t2393, -t2179, -t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2240, 0, 0, 0, 0, 0, 0, t2187, t2208, t2195, t2157, 0, 0, 0, 0, 0, 0, t2143, -t2413, -t2133, t2121, 0, 0, 0, 0, 0, 0, t2415, -t2133, t2413, t2117, 0, 0, 0, 0, 0, 0, t2415, t2413, t2133, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2356, t2307, t2311, t2277, 0, 0, 0, 0, 0, 0, t2230, t2246, t2232, t2186, 0, 0, 0, 0, 0, 0, t2171, -t2404, -t2162, t2130, 0, 0, 0, 0, 0, 0, t2403, -t2162, t2404, t2126, 0, 0, 0, 0, 0, 0, t2403, t2404, t2162, t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2307, -t2313 * t2325, -t2352, t2276, 0, 0, 0, 0, 0, 0, t2229, t2245, t2231, t2185, 0, 0, 0, 0, 0, 0, t2168, -t2405, -t2159, t2129, 0, 0, 0, 0, 0, 0, t2406, -t2159, t2405, t2125, 0, 0, 0, 0, 0, 0, t2406, t2405, t2159, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2311, t2352, -t2302, -t2294, 0, 0, 0, 0, 0, 0, t2274, t2275, t2251, -t2271, 0, 0, 0, 0, 0, 0, t2398, -t2393, -t2179, t2139, 0, 0, 0, 0, 0, 0, t2398, -t2179, t2393, t2127, 0, 0, 0, 0, 0, 0, t2398, t2393, t2179, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2269, t2273, -t2345, t2222, 0, 0, 0, 0, 0, 0, t2397, -t2394, -t2182, t2140, 0, 0, 0, 0, 0, 0, t2397, -t2182, t2394, t2128, 0, 0, 0, 0, 0, 0, t2397, t2394, t2182, t2124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2272, t2286, -t2379, t2221, 0, 0, 0, 0, 0, 0, -t2212, -t2330, t2235, -t2204, 0, 0, 0, 0, 0, 0, -t2214, t2235, t2330, -t2156, 0, 0, 0, 0, 0, 0, -t2214, t2330, -t2235, -t2141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2274, t2275, t2251, -t2271, 0, 0, 0, 0, 0, 0, t2398, -t2393, -t2179, t2139, 0, 0, 0, 0, 0, 0, t2398, -t2179, t2393, t2127, 0, 0, 0, 0, 0, 0, t2398, t2393, t2179, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2380, -t2381, -t2213, t2166, 0, 0, 0, 0, 0, 0, t2380, -t2213, t2381, t2154, 0, 0, 0, 0, 0, 0, t2380, t2381, t2213, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2382, -t2248, -t2329, t2165, 0, 0, 0, 0, 0, 0, t2382, -t2329, t2248, -t2155, 0, 0, 0, 0, 0, 0, t2382, t2248, t2329, -t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2212, t2330, -t2235, t2204, 0, 0, 0, 0, 0, 0, t2214, -t2235, -t2330, t2156, 0, 0, 0, 0, 0, 0, t2214, -t2330, t2235, t2141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2380, -t2213, t2381, t2154, 0, 0, 0, 0, 0, 0, t2380, t2381, t2213, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2214, -t2235, -t2330, t2156, 0, 0, 0, 0, 0, 0, t2214, -t2330, t2235, t2141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2382, t2329, -t2248, t2155, 0, 0, 0, 0, 0, 0, -t2382, -t2248, -t2329, t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2380, t2381, t2213, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2382, -t2248, -t2329, t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2214, t2330, -t2235, -t2141;];
f_new_reg  = t1;
