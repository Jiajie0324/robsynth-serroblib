% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRP5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP5_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:30:09
% EndTime: 2019-05-06 01:30:38
% DurationCPUTime: 16.04s
% Computational Cost: add. (49634->568), mult. (119948->772), div. (0->0), fcn. (95373->10), ass. (0->368)
t339 = sin(pkin(10));
t340 = cos(pkin(10));
t343 = sin(qJ(3));
t347 = cos(qJ(3));
t324 = (-t339 * t343 + t340 * t347) * qJD(1);
t379 = t339 * t347 + t340 * t343;
t325 = t379 * qJD(1);
t342 = sin(qJ(4));
t346 = cos(qJ(4));
t298 = -t346 * t324 + t325 * t342;
t295 = qJD(5) + t298;
t467 = t295 ^ 2;
t300 = t324 * t342 + t325 * t346;
t338 = qJD(3) + qJD(4);
t341 = sin(qJ(5));
t345 = cos(qJ(5));
t284 = t300 * t341 - t345 * t338;
t468 = t284 ^ 2;
t258 = t468 - t467;
t410 = t340 * qJDD(1);
t411 = t339 * qJDD(1);
t280 = -t343 * t411 + t347 * t410;
t413 = t325 * qJD(3);
t309 = t280 - t413;
t323 = t379 * qJDD(1);
t415 = qJD(3) * t324;
t311 = t323 + t415;
t395 = -t346 * t309 + t311 * t342;
t242 = -qJD(4) * t300 - t395;
t241 = qJDD(5) - t242;
t286 = t300 * t345 + t338 * t341;
t428 = t286 * t284;
t490 = t241 + t428;
t440 = t490 * t341;
t161 = -t258 * t345 + t440;
t262 = t295 * t286;
t380 = t309 * t342 + t311 * t346;
t243 = -qJD(4) * t298 + t380;
t409 = qJDD(3) + qJDD(4);
t396 = -t341 * t243 + t345 * t409;
t374 = qJD(5) * t286 - t396;
t183 = -t262 + t374;
t103 = t161 * t346 + t183 * t342;
t99 = t161 * t342 - t183 * t346;
t549 = t339 * (t103 * t347 - t343 * t99) + t340 * (t103 * t343 + t347 * t99);
t370 = -t345 * t243 - t341 * t409;
t366 = -t284 * qJD(5) - t370;
t429 = t284 * t295;
t484 = -t429 + t366;
t442 = t484 * t341;
t489 = t262 + t374;
t113 = -t489 * t345 - t442;
t283 = t286 ^ 2;
t486 = t283 - t468;
t86 = t113 * t342 - t346 * t486;
t88 = t113 * t346 + t342 * t486;
t546 = t339 * (t343 * t86 - t347 * t88) - t340 * (t343 * t88 + t347 * t86);
t487 = -t283 - t467;
t137 = -t345 * t487 + t440;
t543 = pkin(1) * t137;
t542 = pkin(2) * t137;
t541 = pkin(3) * t137;
t540 = pkin(4) * t137;
t491 = t241 - t428;
t438 = t491 * t341;
t482 = -t467 - t468;
t494 = t345 * t482 - t438;
t513 = t342 * t489 + t346 * t494;
t514 = t342 * t494 - t346 * t489;
t525 = t343 * t513 + t347 * t514;
t539 = pkin(7) * t525;
t538 = pkin(9) * t137;
t439 = t490 * t345;
t139 = t341 * t487 + t439;
t537 = pkin(9) * t139;
t536 = t139 * t342;
t535 = t139 * t346;
t437 = t491 * t345;
t495 = t341 * t482 + t437;
t526 = -t343 * t514 + t347 * t513;
t534 = -pkin(2) * t495 + pkin(7) * t526;
t533 = qJ(2) * (-t339 * t525 + t340 * t526) - pkin(1) * t495;
t483 = t429 + t366;
t259 = -t283 + t467;
t515 = -t259 * t341 + t437;
t527 = t342 * t483 + t346 * t515;
t528 = t342 * t515 - t346 * t483;
t532 = t339 * (-t343 * t528 + t347 * t527) + t340 * (t343 * t527 + t347 * t528);
t531 = pkin(3) * t514;
t530 = pkin(8) * t514;
t158 = t258 * t341 + t439;
t529 = -pkin(3) * t495 + pkin(8) * t513;
t521 = pkin(4) * t495;
t520 = pkin(9) * t494;
t519 = pkin(9) * t495;
t516 = t345 * t259 + t438;
t441 = t484 * t345;
t109 = -t489 * t341 + t441;
t485 = t283 + t468;
t512 = pkin(4) * t485;
t511 = -qJ(6) * t341 - pkin(4);
t510 = qJ(6) * t484;
t507 = t342 * t485;
t272 = t300 * t298;
t488 = -t272 + t409;
t505 = t342 * t488;
t313 = t324 * t325;
t480 = qJDD(3) + t313;
t503 = t343 * t480;
t500 = t346 * t485;
t498 = t346 * t488;
t496 = t347 * t480;
t349 = qJD(1) ^ 2;
t344 = sin(qJ(1));
t465 = cos(qJ(1));
t398 = g(1) * t344 - t465 * g(2);
t384 = -qJDD(2) + t398;
t464 = pkin(2) * t340;
t400 = pkin(1) + t464;
t336 = t339 ^ 2;
t337 = t340 ^ 2;
t416 = t336 + t337;
t304 = t400 * qJDD(1) + (pkin(7) * t416 + qJ(2)) * t349 + t384;
t321 = t324 ^ 2;
t383 = qJD(3) * pkin(3) - pkin(8) * t325;
t236 = pkin(3) * t309 + pkin(8) * t321 - t325 * t383 + t304;
t427 = t295 * t341;
t254 = t286 * t427;
t426 = t295 * t345;
t403 = t284 * t426;
t385 = t254 - t403;
t472 = t241 * t342 + t346 * t385;
t475 = -t346 * t241 + t342 * t385;
t493 = t339 * (-t343 * t475 + t347 * t472) + t340 * (t343 * t472 + t347 * t475);
t376 = t341 * t374 + t403;
t405 = t342 * t428;
t473 = t346 * t376 - t405;
t404 = t346 * t428;
t474 = t342 * t376 + t404;
t492 = t339 * (-t343 * t474 + t347 * t473) + t340 * (t343 * t473 + t347 * t474);
t269 = pkin(4) * t298 - pkin(9) * t300;
t378 = g(1) * t465 + t344 * g(2);
t367 = -0.2e1 * qJD(2) * qJD(1) + t378;
t365 = -t349 * pkin(1) - t367;
t421 = t337 * t349;
t408 = pkin(2) * t421;
t460 = t339 * g(3);
t481 = (pkin(7) + qJ(2)) * qJDD(1);
t355 = -t408 - t460 + (t365 + t481) * t340;
t459 = t340 * g(3);
t356 = -t459 + (t349 * t400 + t367 - t481) * t339;
t377 = (-t311 + t415) * pkin(8);
t363 = pkin(3) * t480 + t377;
t352 = -t343 * t355 + t347 * t356 + t363;
t210 = -t321 * pkin(3) + t309 * pkin(8) - qJD(3) * t383 + t343 * t356 + t347 * t355;
t418 = t346 * t210;
t466 = t338 ^ 2;
t120 = -pkin(4) * t466 + pkin(9) * t409 - t298 * t269 + t342 * t352 + t418;
t292 = t338 * t298;
t219 = t243 - t292;
t124 = -t219 * pkin(9) + (t300 * t338 - t242) * pkin(4) - t236;
t72 = t120 * t341 - t345 * t124;
t73 = t345 * t120 + t341 * t124;
t38 = t341 * t72 + t345 * t73;
t449 = qJDD(1) * pkin(1);
t452 = qJ(2) * t349;
t320 = t384 + t449 + t452;
t479 = qJ(2) * t421 + t336 * t452 - t320 - t449;
t244 = pkin(5) * t284 - qJ(6) * t286;
t390 = -t241 * qJ(6) + t284 * t244 - t73;
t477 = -pkin(5) * (t487 + t467) + qJ(6) * t490 - t390;
t361 = qJDD(1) * qJ(2) + t365;
t359 = qJDD(1) * pkin(7) + t361;
t358 = t349 * t464 - t359;
t457 = t347 * g(3);
t458 = t343 * g(3);
t470 = t339 * (t347 * t358 + t458) - t340 * (t343 * t359 + t457);
t177 = t345 * t366 - t254;
t387 = t346 * t177 + t405;
t388 = t342 * t177 - t404;
t469 = t339 * (-t343 * t388 + t347 * t387) + t340 * (t343 * t387 + t347 * t388);
t296 = t298 ^ 2;
t297 = t300 ^ 2;
t322 = t325 ^ 2;
t462 = pkin(4) * t342;
t141 = t210 * t342 - t346 * t352;
t353 = t342 * t470 + t418;
t393 = t343 * t408;
t142 = t342 * (t363 + t393) + t353;
t77 = -t141 * t346 + t142 * t342;
t455 = t343 * t77;
t454 = t347 * t77;
t119 = -t409 * pkin(4) - t466 * pkin(9) + t269 * t300 + t141;
t453 = -pkin(4) * t119 + pkin(9) * t38;
t450 = qJ(6) * t345;
t444 = t483 * t341;
t443 = t483 * t345;
t252 = -t393 - t470;
t253 = -t347 * t408 + (t347 * t359 - t458) * t340 + (t343 * t358 - t457) * t339;
t197 = -t252 * t347 + t253 * t343;
t436 = t197 * t339;
t435 = t236 * t342;
t434 = t236 * t346;
t267 = t272 + t409;
t431 = t267 * t342;
t430 = t267 * t346;
t425 = t304 * t343;
t424 = t304 * t347;
t306 = qJDD(3) - t313;
t423 = t306 * t343;
t422 = t306 * t347;
t420 = t338 * t342;
t419 = t338 * t346;
t115 = t341 * t119;
t116 = t345 * t119;
t414 = qJD(6) * t295;
t412 = qJD(4) + t338;
t190 = (qJD(5) + t295) * t284 + t370;
t402 = pkin(4) * t190 + t115 - t537;
t401 = -pkin(4) * t489 - t116 + t520;
t399 = -pkin(4) * t346 - pkin(3);
t78 = t141 * t342 + t346 * t142;
t198 = t252 * t343 + t347 * t253;
t394 = t339 * (t339 * t361 + t459) + t340 * (t340 * t361 - t460);
t112 = -t183 * t345 + t444;
t291 = 0.2e1 * t414;
t381 = t291 - t390;
t42 = (t485 - t467) * pkin(5) + t381;
t64 = -t241 * pkin(5) - qJ(6) * t467 + t244 * t286 + qJDD(6) + t72;
t44 = qJ(6) * t485 + t64;
t392 = pkin(9) * t112 + t341 * t44 + t345 * t42 + t512;
t185 = (-qJD(5) + t295) * t286 + t396;
t114 = t185 * t345 + t444;
t391 = pkin(9) * t114 + t38 + t512;
t55 = -pkin(5) * t467 + t381;
t389 = -pkin(5) * t64 + qJ(6) * t55;
t386 = t284 * t427 - t345 * t374;
t382 = -pkin(5) * t483 - qJ(6) * t183;
t37 = t341 * t73 - t345 * t72;
t364 = t374 * pkin(5) + t119 - t510;
t362 = 0.2e1 * qJD(6) * t286 - t364;
t51 = -pkin(5) * t262 + t362 + t510;
t375 = pkin(4) * t484 + pkin(5) * t441 + t341 * t51 + t537;
t52 = (-t489 - t262) * pkin(5) + t362;
t373 = t345 * t52 + t489 * t511 + t520;
t371 = (-t284 * t341 - t286 * t345) * t295;
t369 = (-qJD(4) + t338) * t300 - t395;
t28 = t341 * t64 + t345 * t55;
t67 = (pkin(5) * t295 - 0.2e1 * qJD(6)) * t286 + t364;
t368 = pkin(9) * t28 + (-pkin(5) * t345 + t511) * t67;
t360 = pkin(5) * t491 + qJ(6) * t482 - t64;
t348 = qJD(3) ^ 2;
t333 = t337 * qJDD(1);
t332 = t336 * qJDD(1);
t326 = t416 * t349;
t317 = -t322 - t348;
t316 = -t322 + t348;
t315 = t321 - t348;
t310 = t323 + 0.2e1 * t415;
t308 = -t280 + 0.2e1 * t413;
t303 = -t348 - t321;
t290 = -t297 + t466;
t289 = t296 - t466;
t288 = -t297 - t466;
t287 = -t321 - t322;
t278 = -t317 * t343 - t422;
t277 = t317 * t347 - t423;
t276 = t280 * t347 + t323 * t343;
t275 = t280 * t343 - t323 * t347;
t274 = t303 * t347 - t503;
t273 = t303 * t343 + t496;
t271 = t297 - t296;
t265 = -t466 - t296;
t256 = (-t298 * t346 + t300 * t342) * t338;
t255 = (-t298 * t342 - t300 * t346) * t338;
t240 = -t296 - t297;
t233 = t289 * t346 - t431;
t232 = -t290 * t342 + t498;
t231 = t289 * t342 + t430;
t230 = t290 * t346 + t505;
t229 = -t288 * t342 - t430;
t228 = t288 * t346 - t431;
t220 = t243 + t292;
t218 = -t298 * t412 + t380;
t215 = t300 * t412 + t395;
t214 = t243 * t346 - t300 * t420;
t213 = t243 * t342 + t300 * t419;
t212 = -t242 * t342 + t298 * t419;
t211 = t242 * t346 + t298 * t420;
t209 = t265 * t346 - t505;
t208 = t265 * t342 + t498;
t191 = -pkin(8) * t228 - t434;
t176 = t286 * t426 + t341 * t366;
t169 = -t228 * t343 + t229 * t347;
t168 = t228 * t347 + t229 * t343;
t167 = -pkin(8) * t208 - t435;
t154 = t220 * t342 + t346 * t369;
t153 = -t215 * t346 - t219 * t342;
t152 = -t220 * t346 + t342 * t369;
t151 = -t215 * t342 + t219 * t346;
t150 = -t208 * t343 + t209 * t347;
t149 = t208 * t347 + t209 * t343;
t125 = -pkin(3) * t218 + pkin(8) * t229 - t435;
t121 = -pkin(3) * t215 + pkin(8) * t209 + t434;
t110 = t185 * t341 - t443;
t108 = -t183 * t341 - t443;
t95 = -t190 * t342 - t535;
t93 = t190 * t346 - t536;
t91 = -t342 * t484 + t535;
t89 = t346 * t484 + t536;
t84 = -t152 * t343 + t154 * t347;
t83 = t152 * t347 + t154 * t343;
t82 = t114 * t346 - t507;
t81 = t112 * t346 - t507;
t80 = t114 * t342 + t500;
t79 = t112 * t342 + t500;
t76 = t116 + t538;
t75 = pkin(3) * t236 + pkin(8) * t78;
t74 = t115 - t519;
t69 = -pkin(8) * t152 - t77;
t68 = -pkin(4) * t108 - t382;
t65 = -pkin(3) * t240 + pkin(8) * t154 + t78;
t62 = -t343 * t93 + t347 * t95;
t60 = t343 * t95 + t347 * t93;
t58 = -t343 * t89 + t347 * t91;
t56 = t343 * t91 + t347 * t89;
t54 = t73 + t540;
t53 = t72 - t521;
t48 = -t343 * t80 + t347 * t82;
t47 = -t343 * t79 + t347 * t81;
t46 = t343 * t82 + t347 * t80;
t45 = t343 * t81 + t347 * t79;
t40 = t347 * t78 - t455;
t39 = t343 * t78 + t454;
t35 = -t360 - t521;
t34 = -t341 * t52 - t450 * t489 - t519;
t33 = -pkin(5) * t442 + t345 * t51 - t538;
t32 = -0.2e1 * t414 - t477 - t540;
t31 = t119 * t342 + t346 * t38;
t30 = -t119 * t346 + t342 * t38;
t29 = -pkin(9) * t110 - t37;
t27 = t341 * t55 - t345 * t64;
t25 = -pkin(8) * t93 - t342 * t54 + t346 * t76;
t24 = -t342 * t53 + t346 * t74 - t530;
t23 = pkin(8) * t95 + t342 * t76 + t346 * t54 + t541;
t22 = t342 * t74 + t346 * t53 + t529;
t21 = -pkin(9) * t108 - t341 * t42 + t345 * t44;
t20 = t28 * t346 + t342 * t67;
t19 = t28 * t342 - t346 * t67;
t18 = -pkin(8) * t80 + t110 * t462 + t29 * t346;
t17 = pkin(8) * t82 + t110 * t399 + t29 * t342;
t16 = t34 * t346 - t342 * t35 - t530;
t15 = -pkin(8) * t89 - t32 * t342 + t33 * t346;
t14 = -pkin(9) * t27 + (pkin(5) * t341 - t450) * t67;
t13 = -t30 * t343 + t31 * t347;
t12 = t30 * t347 + t31 * t343;
t11 = t34 * t342 + t346 * t35 + t529;
t10 = pkin(8) * t91 + t32 * t346 + t33 * t342 - t541;
t9 = -pkin(4) * t27 - t389;
t8 = -pkin(8) * t79 + t21 * t346 - t342 * t68;
t7 = -pkin(3) * t108 + pkin(8) * t81 + t21 * t342 + t346 * t68;
t6 = -pkin(8) * t30 + (-pkin(9) * t346 + t462) * t37;
t5 = -t19 * t343 + t20 * t347;
t4 = t19 * t347 + t20 * t343;
t3 = pkin(8) * t31 + (-pkin(9) * t342 + t399) * t37;
t2 = -pkin(8) * t19 + t14 * t346 - t342 * t9;
t1 = -pkin(3) * t27 + pkin(8) * t20 + t14 * t342 + t346 * t9;
t26 = [0, 0, 0, 0, 0, qJDD(1), t398, t378, 0, 0, t332, 0.2e1 * t339 * t410, 0, t333, 0, 0, -t479 * t340, t479 * t339, pkin(1) * t326 + qJ(2) * (t333 + t332) + t394, pkin(1) * t320 + qJ(2) * t394, t339 * (t311 * t347 - t343 * t413) + t340 * (t311 * t343 + t347 * t413), t339 * (-t308 * t347 - t310 * t343) + t340 * (-t308 * t343 + t310 * t347), t339 * (-t316 * t343 + t496) + t340 * (t316 * t347 + t503), t339 * (-t309 * t343 - t347 * t415) + t340 * (t309 * t347 - t343 * t415), t339 * (t315 * t347 - t423) + t340 * (t315 * t343 + t422), (t339 * (t324 * t347 + t325 * t343) + t340 * (t324 * t343 - t325 * t347)) * qJD(3), t339 * (-pkin(7) * t273 - t425) + t340 * (-pkin(2) * t308 + pkin(7) * t274 + t424) - pkin(1) * t308 + qJ(2) * (-t273 * t339 + t274 * t340), t339 * (-pkin(7) * t277 - t424) + t340 * (-pkin(2) * t310 + pkin(7) * t278 - t425) - pkin(1) * t310 + qJ(2) * (-t277 * t339 + t278 * t340), t339 * (-pkin(7) * t275 - t197) + t340 * (-pkin(2) * t287 + pkin(7) * t276 + t198) - pkin(1) * t287 + qJ(2) * (-t275 * t339 + t276 * t340), -pkin(7) * t436 + t340 * (pkin(2) * t304 + pkin(7) * t198) + pkin(1) * t304 + qJ(2) * (t198 * t340 - t436), t339 * (-t213 * t343 + t214 * t347) + t340 * (t213 * t347 + t214 * t343), t339 * (-t151 * t343 + t153 * t347) + t340 * (t151 * t347 + t153 * t343), t339 * (-t230 * t343 + t232 * t347) + t340 * (t230 * t347 + t232 * t343), t339 * (-t211 * t343 + t212 * t347) + t340 * (t211 * t347 + t212 * t343), t339 * (-t231 * t343 + t233 * t347) + t340 * (t231 * t347 + t233 * t343), t339 * (-t255 * t343 + t256 * t347) + t340 * (t255 * t347 + t256 * t343), t339 * (-pkin(7) * t149 - t121 * t343 + t167 * t347) + t340 * (-pkin(2) * t215 + pkin(7) * t150 + t121 * t347 + t167 * t343) - pkin(1) * t215 + qJ(2) * (-t149 * t339 + t150 * t340), t339 * (-pkin(7) * t168 - t125 * t343 + t191 * t347) + t340 * (-pkin(2) * t218 + pkin(7) * t169 + t125 * t347 + t191 * t343) - pkin(1) * t218 + qJ(2) * (-t168 * t339 + t169 * t340), t339 * (-pkin(7) * t83 - t343 * t65 + t347 * t69) + t340 * (-pkin(2) * t240 + pkin(7) * t84 + t343 * t69 + t347 * t65) - pkin(1) * t240 + qJ(2) * (-t339 * t83 + t340 * t84), t339 * (-pkin(7) * t39 - pkin(8) * t454 - t343 * t75) + t340 * (pkin(2) * t236 + pkin(7) * t40 - pkin(8) * t455 + t347 * t75) + pkin(1) * t236 + qJ(2) * (-t339 * t39 + t340 * t40), t469, -t546, t532, t492, -t549, t493, t339 * (-t22 * t343 + t24 * t347 - t539) + t340 * (t22 * t347 + t24 * t343 + t534) + t533, t339 * (-pkin(7) * t60 - t23 * t343 + t25 * t347) + t340 * (pkin(7) * t62 + t23 * t347 + t25 * t343 + t542) + t543 + qJ(2) * (-t339 * t60 + t340 * t62), t339 * (-pkin(7) * t46 - t17 * t343 + t18 * t347) + t340 * (-pkin(2) * t110 + pkin(7) * t48 + t17 * t347 + t18 * t343) - pkin(1) * t110 + qJ(2) * (-t339 * t46 + t340 * t48), t339 * (-pkin(7) * t12 - t3 * t343 + t347 * t6) + t340 * (-pkin(2) * t37 + pkin(7) * t13 + t3 * t347 + t343 * t6) - pkin(1) * t37 + qJ(2) * (-t12 * t339 + t13 * t340), t469, t532, t546, t493, t549, t492, t339 * (-t11 * t343 + t16 * t347 - t539) + t340 * (t11 * t347 + t16 * t343 + t534) + t533, t339 * (-pkin(7) * t45 - t343 * t7 + t347 * t8) + t340 * (-pkin(2) * t108 + pkin(7) * t47 + t343 * t8 + t347 * t7) - pkin(1) * t108 + qJ(2) * (-t339 * t45 + t340 * t47), t339 * (-pkin(7) * t56 - t10 * t343 + t15 * t347) + t340 * (pkin(7) * t58 + t10 * t347 + t15 * t343 - t542) - t543 + qJ(2) * (-t339 * t56 + t340 * t58), t339 * (-pkin(7) * t4 - t1 * t343 + t2 * t347) + t340 * (-pkin(2) * t27 + pkin(7) * t5 + t1 * t347 + t2 * t343) - pkin(1) * t27 + qJ(2) * (-t339 * t4 + t340 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t410, t411, -t326, -t320, 0, 0, 0, 0, 0, 0, t308, t310, t287, -t304, 0, 0, 0, 0, 0, 0, t215, t218, t240, -t236, 0, 0, 0, 0, 0, 0, t495, -t137, t110, t37, 0, 0, 0, 0, 0, 0, t495, t108, t137, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, t322 - t321, t323, t313, t280, qJDD(3), -t252, -t253, 0, 0, t272, t271, t220, -t272, t369, t409, pkin(3) * t208 - t141, -t342 * (t377 + t393) + (-t342 * t480 + t228) * pkin(3) - t353, pkin(3) * t152, pkin(3) * t77, t176, t109, t516, t386, t158, t371, t401 + t531, pkin(3) * t93 + t402, pkin(3) * t80 + t391, pkin(3) * t30 + t453, t176, t516, -t109, t371, -t158, t386, t373 + t531, pkin(3) * t79 + t392, pkin(3) * t89 + t375, pkin(3) * t19 + t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t272, t271, t220, -t272, t369, t409, -t141, -t142, 0, 0, t176, t109, t516, t386, t158, t371, t401, t402, t391, t453, t176, t516, -t109, t371, -t158, t386, t373, t392, t375, t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t428, t486, t483, -t428, -t183, t241, -t72, -t73, 0, 0, t428, t483, -t486, t241, t183, -t428, t360, t382, t291 + t477, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t491, t483, t487, t64;];
tauJ_reg  = t26;
