% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:32:26
% EndTime: 2019-05-06 01:32:37
% DurationCPUTime: 10.83s
% Computational Cost: add. (44251->307), mult. (107117->393), div. (0->0), fcn. (85325->10), ass. (0->216)
t2446 = sin(pkin(10));
t2447 = cos(pkin(10));
t2450 = sin(qJ(3));
t2454 = cos(qJ(3));
t2424 = (-t2446 * t2450 + t2447 * t2454) * qJD(1);
t2470 = t2446 * t2454 + t2447 * t2450;
t2425 = t2470 * qJD(1);
t2449 = sin(qJ(4));
t2453 = cos(qJ(4));
t2404 = t2424 * t2449 + t2425 * t2453;
t2440 = t2447 * qJDD(1);
t2481 = t2446 * qJDD(1);
t2389 = t2454 * t2440 - t2450 * t2481;
t2486 = t2425 * qJD(3);
t2412 = t2389 - t2486;
t2488 = t2424 * qJD(3);
t2510 = t2470 * qJDD(1);
t2414 = t2510 + t2488;
t2474 = -t2453 * t2412 + t2449 * t2414;
t2466 = qJD(4) * t2404 + qJDD(5) + t2474;
t2445 = qJD(3) + qJD(4);
t2448 = sin(qJ(5));
t2452 = cos(qJ(5));
t2391 = t2404 * t2448 - t2445 * t2452;
t2393 = t2404 * t2452 + t2445 * t2448;
t2491 = t2391 * t2393;
t2331 = t2466 + t2491;
t2390 = t2393 ^ 2;
t2402 = -t2453 * t2424 + t2425 * t2449;
t2401 = qJD(5) + t2402;
t2504 = t2401 ^ 2;
t2512 = -t2390 - t2504;
t2310 = t2331 * t2452 + t2448 * t2512;
t2471 = -t2449 * t2412 - t2453 * t2414;
t2365 = -qJD(4) * t2402 - t2471;
t2480 = qJDD(3) + qJDD(4);
t2463 = -t2391 * qJD(5) + t2452 * t2365 + t2448 * t2480;
t2490 = t2391 * t2401;
t2462 = t2463 - t2490;
t2287 = t2310 * t2449 + t2453 * t2462;
t2289 = t2310 * t2453 - t2449 * t2462;
t2265 = t2287 * t2454 + t2289 * t2450;
t2271 = t2287 * t2450 - t2289 * t2454;
t2250 = t2265 * t2446 + t2271 * t2447;
t2308 = t2331 * t2448 - t2452 * t2512;
t2451 = sin(qJ(1));
t2455 = cos(qJ(1));
t2536 = t2250 * t2451 + t2308 * t2455;
t2535 = t2250 * t2455 - t2308 * t2451;
t2242 = t2265 * t2447 - t2271 * t2446;
t2328 = t2463 + t2490;
t2475 = t2448 * t2365 - t2452 * t2480;
t2465 = (-qJD(5) + t2401) * t2393 - t2475;
t2507 = -t2328 * t2452 + t2448 * t2465;
t2367 = t2391 ^ 2;
t2353 = t2390 + t2367;
t2506 = t2328 * t2448 + t2452 * t2465;
t2521 = t2353 * t2453 + t2449 * t2506;
t2522 = -t2353 * t2449 + t2453 * t2506;
t2527 = -t2450 * t2521 + t2454 * t2522;
t2528 = t2450 * t2522 + t2454 * t2521;
t2532 = -t2446 * t2528 + t2447 * t2527;
t2534 = t2451 * t2532 - t2455 * t2507;
t2533 = t2451 * t2507 + t2455 * t2532;
t2531 = t2446 * t2527 + t2447 * t2528;
t2332 = t2466 - t2491;
t2511 = -t2504 - t2367;
t2515 = -t2332 * t2448 + t2452 * t2511;
t2526 = t2449 * t2515;
t2516 = t2332 * t2452 + t2448 * t2511;
t2525 = t2451 * t2516;
t2524 = t2453 * t2515;
t2523 = t2455 * t2516;
t2457 = qJD(1) ^ 2;
t2433 = t2451 * g(1) - t2455 * g(2);
t2472 = -qJDD(2) + t2433;
t2443 = t2446 ^ 2;
t2444 = t2447 ^ 2;
t2482 = t2443 + t2444;
t2408 = t2457 * (pkin(7) * t2482 + qJ(2)) + (pkin(2) * t2447 + pkin(1)) * qJDD(1) + t2472;
t2422 = t2424 ^ 2;
t2473 = qJD(3) * pkin(3) - pkin(8) * t2425;
t2362 = t2412 * pkin(3) + t2422 * pkin(8) - t2425 * t2473 + t2408;
t2430 = t2482 * t2457;
t2503 = t2402 ^ 2;
t2502 = t2404 ^ 2;
t2501 = t2425 ^ 2;
t2500 = t2445 ^ 2;
t2497 = t2446 * g(3);
t2496 = t2447 * g(3);
t2489 = t2402 * t2404;
t2487 = t2424 * t2425;
t2485 = t2444 * t2457;
t2484 = t2447 * t2457;
t2483 = qJD(4) - t2445;
t2434 = -g(1) * t2455 - g(2) * t2451;
t2477 = -pkin(1) * t2457 + qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t2434;
t2469 = qJDD(1) * pkin(7) + t2477;
t2464 = pkin(2) * t2484 - t2469;
t2479 = pkin(2) * t2485;
t2369 = t2454 * (t2447 * t2469 - t2479 - t2497) + t2450 * (t2446 * t2464 - t2496);
t2343 = -t2422 * pkin(3) + t2412 * pkin(8) - qJD(3) * t2473 + t2369;
t2368 = t2450 * t2479 + (-t2454 * g(3) - t2450 * t2469) * t2447 + (t2450 * g(3) + t2454 * t2464) * t2446;
t2409 = qJDD(3) + t2487;
t2460 = (-t2414 + t2488) * pkin(8) + t2409 * pkin(3) + t2368;
t2313 = t2453 * t2343 + t2449 * t2460;
t2378 = pkin(4) * t2402 - pkin(9) * t2404;
t2303 = -pkin(4) * t2500 + pkin(9) * t2480 - t2402 * t2378 + t2313;
t2346 = (qJD(4) + t2445) * t2404 + t2474;
t2476 = t2445 * t2402 - t2365;
t2461 = t2346 * pkin(4) + t2476 * pkin(9) - t2362;
t2276 = t2452 * t2303 + t2448 * t2461;
t2275 = -t2448 * t2303 + t2452 * t2461;
t2312 = -t2449 * t2343 + t2453 * t2460;
t2468 = -qJD(5) * t2393 - t2475;
t2302 = -t2480 * pkin(4) - t2500 * pkin(9) + t2404 * t2378 - t2312;
t2456 = qJD(3) ^ 2;
t2435 = t2446 * t2484;
t2432 = -qJDD(1) * t2451 - t2455 * t2457;
t2431 = qJDD(1) * t2455 - t2451 * t2457;
t2429 = t2482 * qJDD(1);
t2428 = t2447 * t2430;
t2427 = t2446 * t2430;
t2421 = qJDD(1) * pkin(1) + t2457 * qJ(2) + t2472;
t2417 = -t2456 - t2501;
t2416 = t2447 * t2477 - t2497;
t2415 = -t2446 * t2477 - t2496;
t2413 = t2510 + 0.2e1 * t2488;
t2411 = -t2389 + 0.2e1 * t2486;
t2410 = -qJDD(3) + t2487;
t2407 = -t2456 - t2422;
t2396 = -t2500 - t2502;
t2394 = -t2422 - t2501;
t2387 = t2410 * t2454 - t2417 * t2450;
t2386 = t2410 * t2450 + t2417 * t2454;
t2385 = -t2415 * t2446 + t2416 * t2447;
t2384 = t2415 * t2447 + t2416 * t2446;
t2383 = t2389 * t2454 + t2450 * t2510;
t2382 = t2389 * t2450 - t2454 * t2510;
t2381 = t2407 * t2454 - t2409 * t2450;
t2380 = t2407 * t2450 + t2409 * t2454;
t2377 = -t2480 - t2489;
t2376 = t2480 - t2489;
t2375 = -t2500 - t2503;
t2366 = pkin(5) * t2391 - qJ(6) * t2393;
t2364 = -t2502 - t2503;
t2361 = -t2386 * t2446 + t2387 * t2447;
t2360 = t2386 * t2447 + t2387 * t2446;
t2357 = t2377 * t2453 - t2396 * t2449;
t2356 = t2377 * t2449 + t2396 * t2453;
t2351 = -t2382 * t2446 + t2383 * t2447;
t2350 = t2382 * t2447 + t2383 * t2446;
t2349 = t2402 * t2483 + t2471;
t2347 = -t2404 * t2483 - t2474;
t2345 = -t2380 * t2446 + t2381 * t2447;
t2344 = t2380 * t2447 + t2381 * t2446;
t2342 = t2375 * t2453 - t2376 * t2449;
t2341 = t2375 * t2449 + t2376 * t2453;
t2335 = -t2368 * t2450 + t2369 * t2454;
t2334 = t2368 * t2454 + t2369 * t2450;
t2325 = t2401 * t2393 - t2468;
t2324 = (qJD(5) + t2401) * t2393 + t2475;
t2323 = -t2356 * t2450 + t2357 * t2454;
t2322 = t2356 * t2454 + t2357 * t2450;
t2321 = t2347 * t2453 - t2349 * t2449;
t2320 = t2347 * t2449 + t2349 * t2453;
t2319 = -t2341 * t2450 + t2342 * t2454;
t2318 = t2341 * t2454 + t2342 * t2450;
t2307 = -t2334 * t2446 + t2335 * t2447;
t2306 = t2334 * t2447 + t2335 * t2446;
t2296 = -t2322 * t2446 + t2323 * t2447;
t2295 = t2322 * t2447 + t2323 * t2446;
t2294 = t2325 * t2449 + t2524;
t2292 = -t2325 * t2453 + t2526;
t2290 = t2324 * t2449 + t2524;
t2288 = -t2324 * t2453 + t2526;
t2286 = -t2320 * t2450 + t2321 * t2454;
t2285 = t2320 * t2454 + t2321 * t2450;
t2280 = -t2318 * t2446 + t2319 * t2447;
t2279 = t2318 * t2447 + t2319 * t2446;
t2278 = -t2312 * t2449 + t2313 * t2453;
t2277 = t2312 * t2453 + t2313 * t2449;
t2274 = -t2468 * pkin(5) + (pkin(5) * t2401 - (2 * qJD(6))) * t2393 + t2302 - t2462 * qJ(6);
t2273 = -pkin(5) * t2466 - qJ(6) * t2504 + t2393 * t2366 + qJDD(6) - t2275;
t2272 = -t2292 * t2450 + t2294 * t2454;
t2270 = t2292 * t2454 + t2294 * t2450;
t2268 = -t2288 * t2450 + t2290 * t2454;
t2266 = t2288 * t2454 + t2290 * t2450;
t2264 = -pkin(5) * t2504 + qJ(6) * t2466 + 0.2e1 * qJD(6) * t2401 - t2391 * t2366 + t2276;
t2263 = -t2285 * t2446 + t2286 * t2447;
t2262 = t2285 * t2447 + t2286 * t2446;
t2257 = -t2277 * t2450 + t2278 * t2454;
t2256 = t2277 * t2454 + t2278 * t2450;
t2255 = -t2275 * t2448 + t2276 * t2452;
t2254 = t2275 * t2452 + t2276 * t2448;
t2253 = t2255 * t2453 + t2302 * t2449;
t2252 = t2255 * t2449 - t2302 * t2453;
t2251 = -t2270 * t2446 + t2272 * t2447;
t2249 = t2270 * t2447 + t2272 * t2446;
t2247 = t2264 * t2452 + t2273 * t2448;
t2246 = t2264 * t2448 - t2273 * t2452;
t2245 = -t2266 * t2446 + t2268 * t2447;
t2243 = t2266 * t2447 + t2268 * t2446;
t2237 = -t2256 * t2446 + t2257 * t2447;
t2236 = t2256 * t2447 + t2257 * t2446;
t2235 = t2247 * t2453 + t2274 * t2449;
t2234 = t2247 * t2449 - t2274 * t2453;
t2233 = -t2252 * t2450 + t2253 * t2454;
t2232 = t2252 * t2454 + t2253 * t2450;
t2231 = -t2234 * t2450 + t2235 * t2454;
t2230 = t2234 * t2454 + t2235 * t2450;
t2229 = -t2232 * t2446 + t2233 * t2447;
t2228 = t2232 * t2447 + t2233 * t2446;
t2227 = -t2230 * t2446 + t2231 * t2447;
t2226 = t2230 * t2447 + t2231 * t2446;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2432, -t2431, 0, -t2433 * t2451 + t2434 * t2455, 0, 0, 0, 0, 0, 0, -t2428 * t2455 - t2440 * t2451, t2427 * t2455 + t2451 * t2481, t2429 * t2455 - t2430 * t2451, t2385 * t2455 - t2421 * t2451, 0, 0, 0, 0, 0, 0, t2345 * t2455 + t2411 * t2451, t2361 * t2455 + t2413 * t2451, t2351 * t2455 + t2394 * t2451, t2307 * t2455 - t2408 * t2451, 0, 0, 0, 0, 0, 0, t2280 * t2455 + t2346 * t2451, t2296 * t2455 - t2451 * t2476, t2263 * t2455 + t2364 * t2451, t2237 * t2455 - t2362 * t2451, 0, 0, 0, 0, 0, 0, t2245 * t2455 + t2525, t2535, t2533, t2229 * t2455 + t2254 * t2451, 0, 0, 0, 0, 0, 0, t2251 * t2455 + t2525, t2533, -t2535, t2227 * t2455 + t2246 * t2451; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2431, t2432, 0, t2433 * t2455 + t2434 * t2451, 0, 0, 0, 0, 0, 0, -t2428 * t2451 + t2440 * t2455, t2427 * t2451 - t2455 * t2481, t2429 * t2451 + t2430 * t2455, t2385 * t2451 + t2421 * t2455, 0, 0, 0, 0, 0, 0, t2345 * t2451 - t2411 * t2455, t2361 * t2451 - t2413 * t2455, t2351 * t2451 - t2394 * t2455, t2307 * t2451 + t2408 * t2455, 0, 0, 0, 0, 0, 0, t2280 * t2451 - t2346 * t2455, t2296 * t2451 + t2455 * t2476, t2263 * t2451 - t2364 * t2455, t2237 * t2451 + t2362 * t2455, 0, 0, 0, 0, 0, 0, t2245 * t2451 - t2523, t2536, t2534, t2229 * t2451 - t2254 * t2455, 0, 0, 0, 0, 0, 0, t2251 * t2451 - t2523, t2534, -t2536, t2227 * t2451 - t2246 * t2455; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2384, 0, 0, 0, 0, 0, 0, t2344, t2360, t2350, t2306, 0, 0, 0, 0, 0, 0, t2279, t2295, t2262, t2236, 0, 0, 0, 0, 0, 0, t2243, -t2242, t2531, t2228, 0, 0, 0, 0, 0, 0, t2249, t2531, t2242, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2457, -qJDD(1), 0, t2434, 0, 0, 0, 0, 0, 0, -t2428, t2427, t2429, t2385, 0, 0, 0, 0, 0, 0, t2345, t2361, t2351, t2307, 0, 0, 0, 0, 0, 0, t2280, t2296, t2263, t2237, 0, 0, 0, 0, 0, 0, t2245, t2250, t2532, t2229, 0, 0, 0, 0, 0, 0, t2251, t2532, -t2250, t2227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2457, 0, t2433, 0, 0, 0, 0, 0, 0, t2440, -t2481, t2430, t2421, 0, 0, 0, 0, 0, 0, -t2411, -t2413, -t2394, t2408, 0, 0, 0, 0, 0, 0, -t2346, t2476, -t2364, t2362, 0, 0, 0, 0, 0, 0, -t2516, t2308, -t2507, -t2254, 0, 0, 0, 0, 0, 0, -t2516, -t2507, -t2308, -t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2384, 0, 0, 0, 0, 0, 0, t2344, t2360, t2350, t2306, 0, 0, 0, 0, 0, 0, t2279, t2295, t2262, t2236, 0, 0, 0, 0, 0, 0, t2243, -t2242, t2531, t2228, 0, 0, 0, 0, 0, 0, t2249, t2531, t2242, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2485, t2435, t2440, t2416, 0, 0, 0, 0, 0, 0, t2381, t2387, t2383, t2335, 0, 0, 0, 0, 0, 0, t2319, t2323, t2286, t2257, 0, 0, 0, 0, 0, 0, t2268, t2271, t2527, t2233, 0, 0, 0, 0, 0, 0, t2272, t2527, -t2271, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2435, -t2443 * t2457, -t2481, t2415, 0, 0, 0, 0, 0, 0, t2380, t2386, t2382, t2334, 0, 0, 0, 0, 0, 0, t2318, t2322, t2285, t2256, 0, 0, 0, 0, 0, 0, t2266, -t2265, t2528, t2232, 0, 0, 0, 0, 0, 0, t2270, t2528, t2265, t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2440, t2481, -t2430, -t2421, 0, 0, 0, 0, 0, 0, t2411, t2413, t2394, -t2408, 0, 0, 0, 0, 0, 0, t2346, -t2476, t2364, -t2362, 0, 0, 0, 0, 0, 0, t2516, -t2308, t2507, t2254, 0, 0, 0, 0, 0, 0, t2516, t2507, t2308, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2407, t2410, t2389, t2369, 0, 0, 0, 0, 0, 0, t2342, t2357, t2321, t2278, 0, 0, 0, 0, 0, 0, t2290, -t2289, t2522, t2253, 0, 0, 0, 0, 0, 0, t2294, t2522, t2289, t2235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2409, t2417, -t2510, t2368, 0, 0, 0, 0, 0, 0, t2341, t2356, t2320, t2277, 0, 0, 0, 0, 0, 0, t2288, -t2287, t2521, t2252, 0, 0, 0, 0, 0, 0, t2292, t2521, t2287, t2234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2413, t2394, -t2408, 0, 0, 0, 0, 0, 0, t2346, -t2476, t2364, -t2362, 0, 0, 0, 0, 0, 0, t2516, -t2308, t2507, t2254, 0, 0, 0, 0, 0, 0, t2516, t2507, t2308, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2375, t2377, t2347, t2313, 0, 0, 0, 0, 0, 0, t2515, -t2310, t2506, t2255, 0, 0, 0, 0, 0, 0, t2515, t2506, t2310, t2247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2376, t2396, t2349, t2312, 0, 0, 0, 0, 0, 0, -t2324, -t2462, t2353, -t2302, 0, 0, 0, 0, 0, 0, -t2325, t2353, t2462, -t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2346, -t2476, t2364, -t2362, 0, 0, 0, 0, 0, 0, t2516, -t2308, t2507, t2254, 0, 0, 0, 0, 0, 0, t2516, t2507, t2308, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2511, -t2331, t2465, t2276, 0, 0, 0, 0, 0, 0, t2511, t2465, t2331, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2332, t2512, -t2328, t2275, 0, 0, 0, 0, 0, 0, t2332, -t2328, -t2512, -t2273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2324, t2462, -t2353, t2302, 0, 0, 0, 0, 0, 0, t2325, -t2353, -t2462, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2511, t2465, t2331, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2325, -t2353, -t2462, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2332, t2328, t2512, t2273;];
f_new_reg  = t1;
