% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:30:38
% EndTime: 2019-05-06 01:31:27
% DurationCPUTime: 48.51s
% Computational Cost: add. (174238->810), mult. (420950->1172), div. (0->0), fcn. (334700->10), ass. (0->587)
t1102 = sin(qJ(1));
t1106 = cos(qJ(1));
t1097 = sin(pkin(10));
t1098 = cos(pkin(10));
t1101 = sin(qJ(3));
t1105 = cos(qJ(3));
t1100 = sin(qJ(4));
t1104 = cos(qJ(4));
t1103 = cos(qJ(5));
t1099 = sin(qJ(5));
t1168 = t1097 * t1101;
t1071 = (t1098 * t1105 - t1168) * qJD(1);
t1128 = t1097 * t1105 + t1098 * t1101;
t1072 = t1128 * qJD(1);
t1032 = t1071 * t1100 + t1072 * t1104;
t1167 = qJD(3) + qJD(4);
t1012 = t1032 * t1099 - t1103 * t1167;
t1160 = qJDD(3) + qJDD(4);
t1030 = -t1104 * t1071 + t1072 * t1100;
t1163 = qJDD(1) * t1098;
t1069 = qJDD(1) * t1168 - t1105 * t1163;
t1173 = t1072 * qJD(3);
t1041 = -t1069 - t1173;
t1176 = t1071 * qJD(3);
t1237 = t1128 * qJDD(1);
t1043 = t1237 + t1176;
t956 = -qJD(4) * t1030 + t1041 * t1100 + t1043 * t1104;
t1122 = -t1099 * t1160 - t1103 * t956;
t1119 = -t1012 * qJD(5) - t1122;
t1027 = qJD(5) + t1030;
t1186 = t1012 * t1027;
t1240 = -t1186 + t1119;
t1209 = t1099 * t1240;
t1014 = t1103 * t1032 + t1099 * t1167;
t1145 = t1099 * t956 - t1103 * t1160;
t1165 = qJD(5) + t1027;
t872 = t1014 * t1165 + t1145;
t791 = t1103 * t872 + t1209;
t1011 = t1014 ^ 2;
t1225 = t1012 ^ 2;
t959 = t1011 - t1225;
t758 = t1100 * t791 + t1104 * t959;
t760 = -t1100 * t959 + t1104 * t791;
t692 = t1101 * t760 + t1105 * t758;
t695 = t1101 * t758 - t1105 * t760;
t645 = t1097 * t692 + t1098 * t695;
t787 = -t1099 * t872 + t1103 * t1240;
t1350 = t1102 * t645 - t1106 * t787;
t1142 = -t1104 * t1041 + t1100 * t1043;
t955 = -t1032 * qJD(4) - t1142;
t953 = qJDD(5) - t955;
t962 = t1014 * t1012;
t1249 = t953 + t962;
t1207 = t1099 * t1249;
t1224 = t1027 ^ 2;
t973 = t1225 - t1224;
t849 = t1103 * t973 - t1207;
t873 = (qJD(5) - t1027) * t1014 + t1145;
t778 = t1100 * t849 + t1104 * t873;
t782 = -t1100 * t873 + t1104 * t849;
t713 = t1101 * t782 + t1105 * t778;
t716 = t1101 * t778 - t1105 * t782;
t661 = t1097 * t713 + t1098 * t716;
t1195 = t1103 * t1249;
t844 = t1099 * t973 + t1195;
t1349 = t1102 * t661 + t1106 * t844;
t1348 = t1102 * t787 + t1106 * t645;
t1347 = -t1102 * t844 + t1106 * t661;
t1346 = t1097 * t695 - t1098 * t692;
t1345 = t1097 * t716 - t1098 * t713;
t1241 = -t1186 - t1119;
t1277 = -t1099 * t873 + t1103 * t1241;
t1242 = t1011 + t1225;
t1275 = -t1099 * t1241 - t1103 * t873;
t1295 = -t1100 * t1242 + t1104 * t1275;
t1299 = t1100 * t1275 + t1104 * t1242;
t1310 = t1101 * t1295 + t1105 * t1299;
t1311 = -t1101 * t1299 + t1105 * t1295;
t1331 = -t1097 * t1310 + t1098 * t1311;
t1336 = t1102 * t1277 + t1106 * t1331;
t1344 = pkin(6) * t1336;
t1338 = t1102 * t1331 - t1106 * t1277;
t1343 = pkin(6) * t1338;
t1332 = t1097 * t1311 + t1098 * t1310;
t1342 = qJ(2) * t1332;
t1341 = -pkin(1) * t1332 - pkin(2) * t1310 - pkin(3) * t1299 - pkin(4) * t1242 - pkin(9) * t1275;
t1340 = -pkin(1) * t1277 + qJ(2) * t1331;
t1250 = t953 - t962;
t1206 = t1099 * t1250;
t974 = -t1011 + t1224;
t1279 = -t1103 * t974 - t1206;
t1194 = t1103 * t1250;
t1278 = -t1099 * t974 + t1194;
t1294 = -t1100 * t1241 + t1104 * t1278;
t1298 = t1100 * t1278 + t1104 * t1241;
t1312 = t1101 * t1294 + t1105 * t1298;
t1313 = -t1101 * t1298 + t1105 * t1294;
t1329 = -t1097 * t1312 + t1098 * t1313;
t1339 = t1102 * t1329 + t1106 * t1279;
t1337 = -t1102 * t1279 + t1106 * t1329;
t1335 = pkin(7) * t1310;
t1333 = -pkin(2) * t1277 + pkin(7) * t1311;
t1330 = t1097 * t1313 + t1098 * t1312;
t933 = t1224 + t1011;
t820 = t1103 * t933 + t1207;
t1328 = pkin(1) * t820;
t1327 = pkin(2) * t820;
t1326 = pkin(3) * t820;
t1325 = pkin(4) * t820;
t1324 = pkin(9) * t820;
t828 = t1099 * t933 - t1195;
t1323 = pkin(9) * t828;
t1322 = pkin(8) * t1295;
t1321 = pkin(8) * t1299;
t1320 = t1100 * t828;
t1319 = t1102 * t820;
t1317 = t1104 * t828;
t1316 = t1106 * t820;
t1307 = pkin(9) * t1277;
t1184 = t1027 * t1099;
t1154 = t1012 * t1184;
t1183 = t1027 * t1103;
t967 = t1014 * t1183;
t1135 = t967 + t1154;
t1153 = t1012 * t1183;
t966 = t1014 * t1184;
t1134 = t966 - t1153;
t1229 = t1100 * t953 + t1104 * t1134;
t1233 = t1100 * t1134 - t1104 * t953;
t1253 = t1101 * t1229 + t1105 * t1233;
t1254 = -t1101 * t1233 + t1105 * t1229;
t1270 = -t1097 * t1253 + t1098 * t1254;
t1297 = t1102 * t1270 + t1106 * t1135;
t905 = -qJD(5) * t1014 - t1145;
t1125 = -t1103 * t905 - t1154;
t1126 = -t1099 * t905 + t1153;
t1156 = t1100 * t962;
t1230 = t1104 * t1126 - t1156;
t1155 = t1104 * t962;
t1231 = t1100 * t1126 + t1155;
t1251 = t1101 * t1230 + t1105 * t1231;
t1252 = -t1101 * t1231 + t1105 * t1230;
t1272 = -t1097 * t1251 + t1098 * t1252;
t1296 = t1102 * t1272 + t1106 * t1125;
t1293 = -t1102 * t1135 + t1106 * t1270;
t1292 = -t1102 * t1125 + t1106 * t1272;
t1239 = -t1224 - t1225;
t1258 = t1099 * t1239 + t1194;
t1291 = pkin(1) * t1258;
t1290 = pkin(2) * t1258;
t1289 = pkin(3) * t1258;
t1288 = pkin(4) * t1258;
t1257 = t1103 * t1239 - t1206;
t1287 = pkin(9) * t1257;
t1286 = pkin(9) * t1258;
t1283 = t1100 * t1257;
t1282 = t1102 * t1258;
t1281 = t1104 * t1257;
t1280 = t1106 * t1258;
t866 = t1103 * t1119 - t966;
t1136 = t1100 * t866 - t1155;
t1137 = t1104 * t866 + t1156;
t1226 = -t1101 * t1136 + t1105 * t1137;
t1227 = t1101 * t1137 + t1105 * t1136;
t1256 = -t1097 * t1227 + t1098 * t1226;
t865 = -t1099 * t1119 - t967;
t1276 = t1102 * t1256 + t1106 * t865;
t1274 = -t1102 * t865 + t1106 * t1256;
t1273 = t1097 * t1252 + t1098 * t1251;
t1271 = t1097 * t1254 + t1098 * t1253;
t1269 = 2 * qJD(6);
t1267 = qJ(6) * t1240;
t987 = t1032 * t1030;
t1247 = -t987 + t1160;
t1264 = t1100 * t1247;
t1046 = t1071 * t1072;
t1236 = qJDD(3) + t1046;
t1263 = t1101 * t1236;
t1260 = t1104 * t1247;
t1259 = t1105 * t1236;
t1108 = qJD(1) ^ 2;
t1082 = t1102 * g(1) - t1106 * g(2);
t1138 = -qJDD(2) + t1082;
t1222 = pkin(2) * t1098;
t1158 = pkin(1) + t1222;
t1095 = t1097 ^ 2;
t1096 = t1098 ^ 2;
t1164 = t1095 + t1096;
t1036 = t1158 * qJDD(1) + (pkin(7) * t1164 + qJ(2)) * t1108 + t1138;
t1067 = t1071 ^ 2;
t1140 = qJD(3) * pkin(3) - pkin(8) * t1072;
t947 = t1041 * pkin(3) + t1067 * pkin(8) - t1072 * t1140 + t1036;
t1255 = t1097 * t1226 + t1098 * t1227;
t1159 = t1167 ^ 2;
t1023 = t1167 * t1030;
t1248 = -t956 + t1023;
t1091 = t1096 * t1108;
t1083 = t1106 * g(1) + t1102 * g(2);
t1121 = -0.2e1 * qJD(2) * qJD(1) + t1083;
t1120 = -t1108 * pkin(1) - t1121;
t1217 = t1097 * g(3);
t1238 = (pkin(7) + qJ(2)) * qJDD(1);
t1113 = -pkin(2) * t1091 - t1217 + (t1120 + t1238) * t1098;
t1216 = t1098 * g(3);
t1114 = -t1216 + (t1108 * t1158 + t1121 - t1238) * t1097;
t1111 = -t1101 * t1113 + t1105 * t1114 + (-t1043 + t1176) * pkin(8) + t1236 * pkin(3);
t965 = t1101 * t1114 + t1105 * t1113;
t911 = -t1067 * pkin(3) + t1041 * pkin(8) - qJD(3) * t1140 + t965;
t825 = t1100 * t1111 + t1104 * t911;
t984 = pkin(4) * t1030 - pkin(9) * t1032;
t798 = -pkin(4) * t1159 + pkin(9) * t1160 - t1030 * t984 + t825;
t1144 = t1167 * t1032;
t802 = t1248 * pkin(9) + (-t955 + t1144) * pkin(4) - t947;
t726 = t1099 * t802 + t1103 * t798;
t957 = pkin(5) * t1012 - qJ(6) * t1014;
t1129 = t953 * qJ(6) - t1012 * t957 + t1027 * t1269 + t726;
t1232 = t1108 * t1164;
t1028 = t1030 ^ 2;
t1029 = t1032 ^ 2;
t1068 = t1072 ^ 2;
t1221 = pkin(4) * t1100;
t1220 = pkin(5) * t1103;
t1215 = qJDD(1) * pkin(1);
t725 = t1099 * t798 - t1103 * t802;
t1214 = qJ(6) * t1103;
t1116 = qJDD(1) * qJ(2) + t1120;
t1115 = qJDD(1) * pkin(7) + t1116;
t1112 = (-t1101 * g(3) - t1105 * (t1108 * t1222 - t1115)) * t1097 + (t1105 * g(3) + t1101 * t1115) * t1098;
t1148 = t1101 * t1091;
t964 = -pkin(2) * t1148 + t1112;
t893 = t1101 * t965 - t1105 * t964;
t1213 = t1097 * t893;
t1212 = t1098 * t893;
t824 = t1100 * t911 - t1104 * t1111;
t797 = -t1160 * pkin(4) - t1159 * pkin(9) + t1032 * t984 + t824;
t1211 = t1099 * t797;
t1203 = t1100 * t947;
t982 = t987 + t1160;
t1201 = t1100 * t982;
t744 = t1100 * t825 - t1104 * t824;
t1200 = t1101 * t744;
t1198 = t1103 * t797;
t1191 = t1104 * t947;
t1190 = t1104 * t982;
t1189 = t1105 * t744;
t1188 = -t1224 + t1242;
t1185 = t1027 * t1014;
t1182 = t1036 * t1101;
t1181 = t1036 * t1105;
t1038 = qJDD(3) - t1046;
t1180 = t1038 * t1101;
t1179 = t1038 * t1105;
t1065 = t1108 * qJ(2) + t1138 + t1215;
t1178 = t1065 * t1102;
t1177 = t1065 * t1106;
t1175 = t1071 * t1101;
t1174 = t1071 * t1105;
t1172 = t1072 * t1101;
t1171 = t1072 * t1105;
t1170 = t1095 * t1108;
t1169 = t1097 * t1098;
t1162 = qJDD(1) * t1102;
t1161 = qJDD(1) * t1106;
t1157 = -pkin(4) * t1104 - pkin(3);
t1152 = t1102 * t987;
t1151 = t1106 * t987;
t1150 = t1102 * t1046;
t1149 = t1106 * t1046;
t1147 = qJ(6) * t1099 + pkin(4);
t1146 = t1065 + t1215;
t745 = t1100 * t824 + t1104 * t825;
t894 = t1101 * t964 + t1105 * t965;
t1047 = t1097 * t1116 + t1216;
t1048 = t1098 * t1116 - t1217;
t996 = t1047 * t1097 + t1098 * t1048;
t1056 = -t1082 * t1102 - t1106 * t1083;
t1141 = t1014 * t957 + qJDD(6) + t725;
t1081 = -t1102 * t1108 + t1161;
t1139 = -pkin(6) * t1081 - g(3) * t1102;
t1133 = t1100 * t1023;
t1132 = t1100 * t1144;
t1131 = t1104 * t1023;
t1130 = t1104 * t1144;
t668 = t1099 * t726 - t1103 * t725;
t669 = t1099 * t725 + t1103 * t726;
t995 = t1047 * t1098 - t1048 * t1097;
t1055 = t1082 * t1106 - t1083 * t1102;
t1080 = t1106 * t1108 + t1162;
t1127 = -t953 * pkin(5) + t1141;
t919 = qJD(3) * t1032 - t1142;
t1074 = t1098 * t1232;
t1052 = -t1074 * t1102 + t1098 * t1161;
t1124 = t1074 * t1106 + t1098 * t1162;
t1118 = -t905 * pkin(5) - t1267 + t797;
t1117 = t1014 * t1269 - t1118;
t1107 = qJD(3) ^ 2;
t1090 = t1096 * qJDD(1);
t1089 = t1095 * qJDD(1);
t1079 = t1091 - t1170;
t1078 = t1091 + t1170;
t1077 = t1090 - t1089;
t1076 = t1090 + t1089;
t1073 = t1097 * t1232;
t1066 = -pkin(6) * t1080 + g(3) * t1106;
t1061 = -t1068 - t1107;
t1060 = -t1068 + t1107;
t1059 = t1067 - t1107;
t1058 = t1081 * t1169;
t1057 = t1080 * t1169;
t1053 = t1073 * t1106 + t1097 * t1162;
t1051 = t1073 * t1102 - t1097 * t1161;
t1050 = t1076 * t1106 - t1078 * t1102;
t1049 = t1076 * t1102 + t1078 * t1106;
t1045 = -t1068 + t1067;
t1042 = t1237 + 0.2e1 * t1176;
t1040 = t1069 + 0.2e1 * t1173;
t1035 = -t1107 - t1067;
t1025 = (t1172 + t1174) * qJD(3);
t1024 = (-t1171 + t1175) * qJD(3);
t1020 = -t1029 + t1159;
t1019 = t1028 - t1159;
t1017 = -t1029 - t1159;
t1015 = -t1067 - t1068;
t1006 = -qJD(3) * t1172 + t1043 * t1105;
t1005 = qJD(3) * t1171 + t1043 * t1101;
t1004 = -qJD(3) * t1174 - t1041 * t1101;
t1003 = -qJD(3) * t1175 + t1041 * t1105;
t1002 = -t1061 * t1101 - t1179;
t1001 = -t1060 * t1101 + t1259;
t1000 = t1059 * t1105 - t1180;
t999 = t1061 * t1105 - t1180;
t998 = t1060 * t1105 + t1263;
t997 = t1059 * t1101 + t1179;
t993 = -t1040 * t1105 - t1042 * t1101;
t992 = -t1069 * t1105 + t1101 * t1237;
t991 = -t1040 * t1101 + t1042 * t1105;
t990 = -t1069 * t1101 - t1105 * t1237;
t989 = t1035 * t1105 - t1263;
t988 = t1035 * t1101 + t1259;
t986 = -t1029 + t1028;
t980 = -t1159 - t1028;
t976 = -t1024 * t1097 + t1025 * t1098;
t971 = -t1131 + t1132;
t970 = -t1133 - t1130;
t969 = t1106 * t996 - t1178;
t968 = t1102 * t996 + t1177;
t958 = -pkin(7) * t999 - t1181;
t954 = -pkin(7) * t988 - t1182;
t952 = -t1028 - t1029;
t949 = -t1005 * t1097 + t1006 * t1098;
t948 = -t1003 * t1097 + t1004 * t1098;
t946 = t1002 * t1098 - t1097 * t999;
t945 = t1001 * t1098 - t1097 * t998;
t944 = t1000 * t1098 - t1097 * t997;
t943 = t1002 * t1097 + t1098 * t999;
t940 = t1019 * t1104 - t1201;
t939 = -t1020 * t1100 + t1260;
t938 = t1019 * t1100 + t1190;
t937 = t1020 * t1104 + t1264;
t936 = -pkin(2) * t1042 + pkin(7) * t1002 - t1182;
t935 = -t1017 * t1100 - t1190;
t934 = t1017 * t1104 - t1201;
t929 = -pkin(2) * t1040 + pkin(7) * t989 + t1181;
t926 = -t1097 * t991 + t1098 * t993;
t925 = -t1097 * t990 + t1098 * t992;
t924 = t1097 * t992 + t1098 * t990;
t922 = -t1023 - t956;
t918 = (0.2e1 * qJD(4) + qJD(3)) * t1032 + t1142;
t917 = -t1097 * t988 + t1098 * t989;
t916 = t1097 * t989 + t1098 * t988;
t915 = t1104 * t956 - t1132;
t914 = t1100 * t956 + t1130;
t913 = -t1100 * t955 + t1131;
t912 = t1104 * t955 + t1133;
t910 = t1042 * t1102 + t1106 * t946;
t909 = -t1042 * t1106 + t1102 * t946;
t908 = t1104 * t980 - t1264;
t907 = t1100 * t980 + t1260;
t896 = -t1101 * t970 + t1105 * t971;
t895 = t1101 * t971 + t1105 * t970;
t892 = t1040 * t1102 + t1106 * t917;
t891 = -t1040 * t1106 + t1102 * t917;
t890 = t1015 * t1102 + t1106 * t925;
t889 = -t1015 * t1106 + t1102 * t925;
t883 = pkin(2) * t1036 + pkin(7) * t894;
t882 = -pkin(1) * t924 - pkin(2) * t990;
t881 = -pkin(8) * t934 - t1191;
t880 = t1012 * t1165 + t1122;
t874 = -t905 + t1185;
t871 = -pkin(7) * t990 - t893;
t870 = -t1101 * t938 + t1105 * t940;
t869 = -t1101 * t937 + t1105 * t939;
t868 = t1101 * t940 + t1105 * t938;
t867 = t1101 * t939 + t1105 * t937;
t857 = -t1101 * t934 + t1105 * t935;
t856 = t1101 * t935 + t1105 * t934;
t855 = -pkin(1) * t943 - pkin(2) * t999 + t965;
t854 = -pkin(8) * t907 - t1203;
t841 = -pkin(2) * t1015 + pkin(7) * t992 + t894;
t840 = -t1100 * t922 + t1104 * t919;
t839 = t1100 * t1248 - t1104 * t918;
t838 = t1100 * t919 + t1104 * t922;
t837 = -t1100 * t918 - t1104 * t1248;
t836 = -pkin(1) * t916 + (-t988 - t1148) * pkin(2) + t1112;
t835 = -t1101 * t914 + t1105 * t915;
t834 = -t1101 * t912 + t1105 * t913;
t833 = t1101 * t915 + t1105 * t914;
t832 = t1101 * t913 + t1105 * t912;
t831 = -t1101 * t907 + t1105 * t908;
t830 = t1101 * t908 + t1105 * t907;
t818 = -qJ(2) * t943 - t1097 * t936 + t1098 * t958;
t809 = -t1097 * t895 + t1098 * t896;
t808 = t1098 * t894 - t1213;
t807 = t1097 * t894 + t1212;
t806 = pkin(3) * t1248 + pkin(8) * t935 - t1203;
t805 = -qJ(2) * t916 - t1097 * t929 + t1098 * t954;
t804 = -t1036 * t1102 + t1106 * t808;
t803 = t1036 * t1106 + t1102 * t808;
t799 = -pkin(3) * t918 + pkin(8) * t908 + t1191;
t786 = -t1097 * t868 + t1098 * t870;
t785 = -t1097 * t867 + t1098 * t869;
t784 = -t1097 * t856 + t1098 * t857;
t783 = t1097 * t857 + t1098 * t856;
t774 = -pkin(1) * t807 - pkin(2) * t893;
t769 = t1100 * t874 + t1281;
t768 = -t1100 * t880 + t1317;
t767 = -t1104 * t874 + t1283;
t766 = t1104 * t880 + t1320;
t765 = t1100 * t872 + t1281;
t764 = -t1100 * t1240 - t1317;
t763 = -t1104 * t872 + t1283;
t762 = t1104 * t1240 - t1320;
t757 = -t1101 * t838 + t1105 * t840;
t756 = -t1101 * t837 + t1105 * t839;
t755 = t1101 * t840 + t1105 * t838;
t754 = t1101 * t839 + t1105 * t837;
t753 = -t1097 * t833 + t1098 * t835;
t752 = -t1097 * t832 + t1098 * t834;
t747 = -t1097 * t830 + t1098 * t831;
t746 = t1097 * t831 + t1098 * t830;
t743 = -t1102 * t1248 + t1106 * t784;
t742 = t1102 * t784 + t1106 * t1248;
t741 = -qJ(2) * t924 - t1097 * t841 + t1098 * t871;
t732 = -pkin(7) * t1212 - qJ(2) * t807 - t1097 * t883;
t731 = t1198 + t1324;
t730 = pkin(3) * t947 + pkin(8) * t745;
t729 = t1211 - t1286;
t728 = t1102 * t918 + t1106 * t747;
t727 = t1102 * t747 - t1106 * t918;
t724 = -pkin(7) * t856 - t1101 * t806 + t1105 * t881;
t723 = -pkin(8) * t838 - t744;
t722 = -pkin(4) * t1277 - pkin(5) * t1241 + qJ(6) * t873;
t721 = (pkin(5) * t1027 - (2 * qJD(6))) * t1014 + t1118;
t720 = -pkin(7) * t830 - t1101 * t799 + t1105 * t854;
t719 = pkin(2) * t1248 + pkin(7) * t857 + t1101 * t881 + t1105 * t806;
t718 = -pkin(3) * t952 + pkin(8) * t840 + t745;
t709 = qJ(6) * t1224 - t1127;
t706 = -t1101 * t767 + t1105 * t769;
t705 = -t1101 * t766 + t1105 * t768;
t704 = t1101 * t769 + t1105 * t767;
t703 = t1101 * t768 + t1105 * t766;
t702 = -pkin(2) * t918 + pkin(7) * t831 + t1101 * t854 + t1105 * t799;
t701 = -t1101 * t763 + t1105 * t765;
t700 = -t1101 * t762 + t1105 * t764;
t699 = t1101 * t765 + t1105 * t763;
t698 = t1101 * t764 + t1105 * t762;
t697 = -pkin(5) * t1224 + t1129;
t696 = t726 + t1325;
t691 = t725 - t1288;
t690 = -t1097 * t755 + t1098 * t757;
t689 = -t1097 * t754 + t1098 * t756;
t688 = t1097 * t757 + t1098 * t755;
t687 = -pkin(1) * t783 - pkin(2) * t856 - pkin(3) * t934 + t825;
t686 = (-t874 - t1185) * pkin(5) + t1117;
t685 = -pkin(5) * t1185 + t1117 + t1267;
t680 = qJ(6) * t1188 + t1127;
t679 = t1102 * t952 + t1106 * t690;
t678 = t1102 * t690 - t1106 * t952;
t677 = pkin(5) * t1188 + t1129;
t676 = t1105 * t745 - t1200;
t675 = t1101 * t745 + t1189;
t670 = -pkin(1) * t746 - pkin(2) * t830 - pkin(3) * t907 + t824;
t667 = -t1288 + (-t1224 - t1239) * qJ(6) + (-t1250 - t953) * pkin(5) + t1141;
t666 = -t1099 * t686 - t1214 * t874 - t1286;
t665 = -pkin(5) * t1209 + t1103 * t685 - t1324;
t664 = -t1325 - qJ(6) * t1249 + (t1224 - t933) * pkin(5) - t1129;
t663 = -pkin(1) * t688 - pkin(2) * t755 - pkin(3) * t838;
t658 = t1100 * t797 + t1104 * t669;
t657 = t1100 * t669 - t1104 * t797;
t656 = -t668 - t1307;
t655 = -t1097 * t704 + t1098 * t706;
t654 = -t1097 * t703 + t1098 * t705;
t653 = t1097 * t706 + t1098 * t704;
t652 = t1097 * t705 + t1098 * t703;
t651 = -t1099 * t709 + t1103 * t697;
t650 = t1099 * t697 + t1103 * t709;
t649 = -t1097 * t699 + t1098 * t701;
t648 = -t1097 * t698 + t1098 * t700;
t647 = t1097 * t701 + t1098 * t699;
t646 = t1097 * t700 + t1098 * t698;
t643 = -qJ(2) * t783 - t1097 * t719 + t1098 * t724;
t642 = -pkin(8) * t766 - t1100 * t696 + t1104 * t731;
t641 = -pkin(8) * t763 - t1100 * t691 + t1104 * t729;
t636 = -pkin(7) * t755 - t1101 * t718 + t1105 * t723;
t635 = t1106 * t655 + t1282;
t634 = t1106 * t654 - t1319;
t633 = t1102 * t655 - t1280;
t632 = t1102 * t654 + t1316;
t631 = -t1097 * t675 + t1098 * t676;
t630 = t1097 * t676 + t1098 * t675;
t629 = t1106 * t649 + t1282;
t628 = t1106 * t648 + t1319;
t627 = t1102 * t649 - t1280;
t626 = t1102 * t648 - t1316;
t625 = -pkin(2) * t952 + pkin(7) * t757 + t1101 * t723 + t1105 * t718;
t624 = -pkin(7) * t675 - pkin(8) * t1189 - t1101 * t730;
t623 = -t1102 * t947 + t1106 * t631;
t622 = t1102 * t631 + t1106 * t947;
t621 = -qJ(2) * t746 - t1097 * t702 + t1098 * t720;
t620 = pkin(8) * t768 + t1100 * t731 + t1104 * t696 + t1326;
t619 = pkin(8) * t765 + t1100 * t729 + t1104 * t691 - t1289;
t618 = pkin(2) * t947 + pkin(7) * t676 - pkin(8) * t1200 + t1105 * t730;
t613 = -t1099 * t677 + t1103 * t680 - t1307;
t612 = t1100 * t721 + t1104 * t651;
t611 = t1100 * t651 - t1104 * t721;
t610 = t1104 * t656 + t1221 * t1277 - t1321;
t609 = t1100 * t656 + t1157 * t1277 + t1322;
t608 = -pkin(8) * t767 - t1100 * t667 + t1104 * t666;
t607 = -pkin(8) * t762 - t1100 * t664 + t1104 * t665;
t606 = -pkin(9) * t650 + (pkin(5) * t1099 - t1214) * t721;
t605 = -t1101 * t657 + t1105 * t658;
t604 = t1101 * t658 + t1105 * t657;
t603 = pkin(8) * t769 + t1100 * t666 + t1104 * t667 - t1289;
t602 = pkin(8) * t764 + t1100 * t665 + t1104 * t664 - t1326;
t601 = -pkin(4) * t650 - pkin(5) * t709 - qJ(6) * t697;
t600 = -pkin(1) * t630 - pkin(2) * t675 - pkin(3) * t744;
t599 = -t1100 * t722 + t1104 * t613 - t1321;
t598 = -pkin(1) * t652 - pkin(2) * t703 - pkin(3) * t766 - pkin(4) * t880 - t1211 - t1323;
t597 = -pkin(1) * t647 - pkin(2) * t699 - pkin(3) * t763 + pkin(4) * t872 + t1198 - t1287;
t596 = -pkin(3) * t1277 + t1100 * t613 + t1104 * t722 + t1322;
t595 = -pkin(8) * t657 + (-pkin(9) * t1104 + t1221) * t668;
t594 = -pkin(1) * t653 - pkin(2) * t704 - pkin(3) * t767 - t1103 * t686 + t1147 * t874 - t1287;
t593 = -pkin(1) * t646 - pkin(2) * t698 - pkin(3) * t762 + t1323 - t1099 * t685 + (-pkin(4) - t1220) * t1240;
t592 = -pkin(7) * t703 - t1101 * t620 + t1105 * t642;
t591 = -qJ(2) * t688 - t1097 * t625 + t1098 * t636;
t590 = -pkin(7) * t699 - t1101 * t619 + t1105 * t641;
t589 = -t1101 * t611 + t1105 * t612;
t588 = t1101 * t612 + t1105 * t611;
t587 = t1341 - t669;
t586 = pkin(7) * t705 + t1101 * t642 + t1105 * t620 + t1327;
t585 = pkin(7) * t701 + t1101 * t641 + t1105 * t619 - t1290;
t584 = pkin(8) * t658 + (-pkin(9) * t1100 + t1157) * t668;
t583 = -t1099 * t680 - t1103 * t677 + t1341;
t582 = -qJ(2) * t630 - t1097 * t618 + t1098 * t624;
t581 = -t1101 * t609 + t1105 * t610 - t1335;
t580 = -t1097 * t604 + t1098 * t605;
t579 = t1097 * t605 + t1098 * t604;
t578 = t1101 * t610 + t1105 * t609 + t1333;
t577 = -pkin(7) * t704 - t1101 * t603 + t1105 * t608;
t576 = -pkin(7) * t698 - t1101 * t602 + t1105 * t607;
t575 = pkin(7) * t706 + t1101 * t608 + t1105 * t603 - t1290;
t574 = pkin(7) * t700 + t1101 * t607 + t1105 * t602 - t1327;
t573 = t1102 * t668 + t1106 * t580;
t572 = t1102 * t580 - t1106 * t668;
t571 = -t1101 * t596 + t1105 * t599 - t1335;
t570 = t1101 * t599 + t1105 * t596 + t1333;
t569 = -pkin(8) * t611 - t1100 * t601 + t1104 * t606;
t568 = -t1097 * t588 + t1098 * t589;
t567 = t1097 * t589 + t1098 * t588;
t566 = -pkin(3) * t650 + pkin(8) * t612 + t1100 * t606 + t1104 * t601;
t565 = t1102 * t650 + t1106 * t568;
t564 = t1102 * t568 - t1106 * t650;
t563 = -qJ(2) * t652 - t1097 * t586 + t1098 * t592;
t562 = -qJ(2) * t647 - t1097 * t585 + t1098 * t590;
t561 = -pkin(7) * t604 - t1101 * t584 + t1105 * t595;
t560 = -pkin(1) * t579 - pkin(2) * t604 - pkin(3) * t657 + pkin(4) * t797 - pkin(9) * t669;
t559 = -pkin(2) * t668 + pkin(7) * t605 + t1101 * t595 + t1105 * t584;
t558 = -t1097 * t578 + t1098 * t581 - t1342;
t557 = -qJ(2) * t653 - t1097 * t575 + t1098 * t577;
t556 = -qJ(2) * t646 - t1097 * t574 + t1098 * t576;
t555 = -t1097 * t570 + t1098 * t571 - t1342;
t554 = -pkin(1) * t567 - pkin(2) * t588 - pkin(3) * t611 - pkin(9) * t651 + (t1147 + t1220) * t721;
t553 = -pkin(7) * t588 - t1101 * t566 + t1105 * t569;
t552 = -pkin(2) * t650 + pkin(7) * t589 + t1101 * t569 + t1105 * t566;
t551 = -qJ(2) * t579 - t1097 * t559 + t1098 * t561;
t550 = -qJ(2) * t567 - t1097 * t552 + t1098 * t553;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1080, -t1081, 0, t1056, 0, 0, 0, 0, 0, 0, -t1124, t1053, t1050, t969, 0, 0, 0, 0, 0, 0, t892, t910, t890, t804, 0, 0, 0, 0, 0, 0, t728, t743, t679, t623, 0, 0, 0, 0, 0, 0, t629, t634, t1336, t573, 0, 0, 0, 0, 0, 0, t635, t1336, t628, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1081, -t1080, 0, t1055, 0, 0, 0, 0, 0, 0, t1052, t1051, t1049, t968, 0, 0, 0, 0, 0, 0, t891, t909, t889, t803, 0, 0, 0, 0, 0, 0, t727, t742, t678, t622, 0, 0, 0, 0, 0, 0, t627, t632, t1338, t572, 0, 0, 0, 0, 0, 0, t633, t1338, t626, t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t995, 0, 0, 0, 0, 0, 0, t916, t943, t924, t807, 0, 0, 0, 0, 0, 0, t746, t783, t688, t630, 0, 0, 0, 0, 0, 0, t647, t652, t1332, t579, 0, 0, 0, 0, 0, 0, t653, t1332, t646, t567; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1081, 0, -t1080, 0, t1139, -t1066, -t1055, -pkin(6) * t1055, t1058, t1077 * t1106 - t1079 * t1102, t1053, -t1058, t1124, 0, -pkin(6) * t1052 - t1047 * t1102 - t1097 * t1177, -pkin(6) * t1051 - t1048 * t1102 - t1098 * t1177, -pkin(6) * t1049 + t1106 * t995, -pkin(6) * t968 - (pkin(1) * t1102 - qJ(2) * t1106) * t995, t1106 * t949 - t1150, -t1045 * t1102 + t1106 * t926, t1102 * t1237 + t1106 * t945, t1106 * t948 + t1150, -t1069 * t1102 + t1106 * t944, qJDD(3) * t1102 + t1106 * t976, -pkin(6) * t891 - t1102 * t836 + t1106 * t805, -pkin(6) * t909 - t1102 * t855 + t1106 * t818, -pkin(6) * t889 - t1102 * t882 + t1106 * t741, -pkin(6) * t803 - t1102 * t774 + t1106 * t732, t1106 * t753 + t1152, -t1102 * t986 + t1106 * t689, -t1102 * t922 + t1106 * t785, t1106 * t752 - t1152, t1102 * t919 + t1106 * t786, t1102 * t1160 + t1106 * t809, -pkin(6) * t727 - t1102 * t670 + t1106 * t621, -pkin(6) * t742 - t1102 * t687 + t1106 * t643, -pkin(6) * t678 - t1102 * t663 + t1106 * t591, -pkin(6) * t622 - t1102 * t600 + t1106 * t582, t1274, t1348, t1337, t1292, -t1347, t1293, -pkin(6) * t627 - t1102 * t597 + t1106 * t562, -pkin(6) * t632 - t1102 * t598 + t1106 * t563, -t1102 * t587 + t1106 * t558 - t1343, -pkin(6) * t572 - t1102 * t560 + t1106 * t551, t1274, t1337, -t1348, t1293, t1347, t1292, -pkin(6) * t633 - t1102 * t594 + t1106 * t557, -t1102 * t583 + t1106 * t555 - t1343, -pkin(6) * t626 - t1102 * t593 + t1106 * t556, -pkin(6) * t564 - t1102 * t554 + t1106 * t550; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1080, 0, t1081, 0, t1066, t1139, t1056, pkin(6) * t1056, t1057, t1077 * t1102 + t1079 * t1106, t1051, -t1057, -t1052, 0, -pkin(6) * t1124 + t1047 * t1106 - t1097 * t1178, pkin(6) * t1053 + t1048 * t1106 - t1098 * t1178, pkin(6) * t1050 + t1102 * t995, pkin(6) * t969 - (-pkin(1) * t1106 - qJ(2) * t1102) * t995, t1102 * t949 + t1149, t1045 * t1106 + t1102 * t926, t1102 * t945 - t1106 * t1237, t1102 * t948 - t1149, t1069 * t1106 + t1102 * t944, -qJDD(3) * t1106 + t1102 * t976, pkin(6) * t892 + t1102 * t805 + t1106 * t836, pkin(6) * t910 + t1102 * t818 + t1106 * t855, pkin(6) * t890 + t1102 * t741 + t1106 * t882, pkin(6) * t804 + t1102 * t732 + t1106 * t774, t1102 * t753 - t1151, t1102 * t689 + t1106 * t986, t1102 * t785 + t1106 * t922, t1102 * t752 + t1151, t1102 * t786 - t1106 * t919, t1102 * t809 - t1106 * t1160, pkin(6) * t728 + t1102 * t621 + t1106 * t670, pkin(6) * t743 + t1102 * t643 + t1106 * t687, pkin(6) * t679 + t1102 * t591 + t1106 * t663, pkin(6) * t623 + t1102 * t582 + t1106 * t600, t1276, t1350, t1339, t1296, -t1349, t1297, pkin(6) * t629 + t1102 * t562 + t1106 * t597, pkin(6) * t634 + t1102 * t563 + t1106 * t598, t1102 * t558 + t1106 * t587 + t1344, pkin(6) * t573 + t1102 * t551 + t1106 * t560, t1276, t1339, -t1350, t1297, t1349, t1296, pkin(6) * t635 + t1102 * t557 + t1106 * t594, t1102 * t555 + t1106 * t583 + t1344, pkin(6) * t628 + t1102 * t556 + t1106 * t593, pkin(6) * t565 + t1102 * t550 + t1106 * t554; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1082, t1083, 0, 0, t1089, 0.2e1 * t1097 * t1163, 0, t1090, 0, 0, -qJ(2) * t1074 + t1098 * t1146, qJ(2) * t1073 - t1097 * t1146, pkin(1) * t1078 + qJ(2) * t1076 + t996, pkin(1) * t1065 + qJ(2) * t996, t1005 * t1098 + t1006 * t1097, t1097 * t993 + t1098 * t991, t1001 * t1097 + t1098 * t998, t1003 * t1098 + t1004 * t1097, t1000 * t1097 + t1098 * t997, t1024 * t1098 + t1025 * t1097, -pkin(1) * t1040 + qJ(2) * t917 + t1097 * t954 + t1098 * t929, -pkin(1) * t1042 + qJ(2) * t946 + t1097 * t958 + t1098 * t936, -pkin(1) * t1015 + qJ(2) * t925 + t1097 * t871 + t1098 * t841, pkin(1) * t1036 - pkin(7) * t1213 + qJ(2) * t808 + t1098 * t883, t1097 * t835 + t1098 * t833, t1097 * t756 + t1098 * t754, t1097 * t869 + t1098 * t867, t1097 * t834 + t1098 * t832, t1097 * t870 + t1098 * t868, t1097 * t896 + t1098 * t895, -pkin(1) * t918 + qJ(2) * t747 + t1097 * t720 + t1098 * t702, pkin(1) * t1248 + qJ(2) * t784 + t1097 * t724 + t1098 * t719, -pkin(1) * t952 + qJ(2) * t690 + t1097 * t636 + t1098 * t625, pkin(1) * t947 + qJ(2) * t631 + t1097 * t624 + t1098 * t618, t1255, t1346, t1330, t1273, -t1345, t1271, qJ(2) * t649 + t1097 * t590 + t1098 * t585 - t1291, qJ(2) * t654 + t1097 * t592 + t1098 * t586 + t1328, t1097 * t581 + t1098 * t578 + t1340, -pkin(1) * t668 + qJ(2) * t580 + t1097 * t561 + t1098 * t559, t1255, t1330, -t1346, t1271, t1345, t1273, qJ(2) * t655 + t1097 * t577 + t1098 * t575 - t1291, t1097 * t571 + t1098 * t570 + t1340, qJ(2) * t648 + t1097 * t576 + t1098 * t574 - t1328, -pkin(1) * t650 + qJ(2) * t568 + t1097 * t553 + t1098 * t552;];
tauB_reg  = t1;
