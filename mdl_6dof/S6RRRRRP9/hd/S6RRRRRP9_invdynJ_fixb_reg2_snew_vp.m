% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 06:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRRP9_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP9_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 06:11:51
% EndTime: 2019-05-08 06:12:39
% DurationCPUTime: 16.79s
% Computational Cost: add. (137909->638), mult. (294140->907), div. (0->0), fcn. (239074->12), ass. (0->429)
t362 = cos(pkin(6));
t443 = qJD(1) * t362;
t356 = qJD(2) + t443;
t365 = sin(qJ(3));
t369 = cos(qJ(3));
t361 = sin(pkin(6));
t366 = sin(qJ(2));
t442 = qJD(1) * t366;
t425 = t361 * t442;
t334 = t356 * t365 + t369 * t425;
t370 = cos(qJ(2));
t441 = qJD(1) * t370;
t424 = t361 * t441;
t349 = -qJD(3) + t424;
t364 = sin(qJ(4));
t368 = cos(qJ(4));
t315 = t334 * t368 - t349 * t364;
t363 = sin(qJ(5));
t367 = cos(qJ(5));
t417 = t364 * t334 + t349 * t368;
t285 = t363 * t315 + t367 * t417;
t287 = t367 * t315 - t363 * t417;
t237 = t287 * t285;
t434 = qJDD(1) * t361;
t340 = qJD(2) * t424 + t366 * t434;
t355 = qJDD(1) * t362 + qJDD(2);
t415 = t365 * t340 - t369 * t355;
t400 = t334 * qJD(3) + t415;
t302 = qJDD(4) + t400;
t301 = qJDD(5) + t302;
t515 = t237 - t301;
t520 = pkin(5) * t515;
t289 = t315 * t417;
t514 = -t289 + t302;
t519 = t364 * t514;
t518 = t368 * t514;
t283 = t285 ^ 2;
t332 = -t369 * t356 + t365 * t425;
t329 = qJD(4) + t332;
t326 = qJD(5) + t329;
t323 = t326 ^ 2;
t220 = -t323 - t283;
t467 = t515 * t367;
t166 = t220 * t363 - t467;
t165 = pkin(4) * t166;
t405 = -t369 * t340 - t365 * t355;
t304 = -qJD(3) * t332 - t405;
t433 = qJDD(1) * t370;
t384 = (qJD(2) * t442 - t433) * t361;
t378 = qJDD(3) + t384;
t250 = -qJD(4) * t417 + t368 * t304 + t364 * t378;
t375 = t315 * qJD(4) + t364 * t304 - t368 * t378;
t190 = -t285 * qJD(5) + t367 * t250 - t363 * t375;
t258 = t326 * t285;
t160 = t258 + t190;
t516 = qJ(6) * t160;
t497 = sin(qJ(1));
t498 = cos(qJ(1));
t396 = g(1) * t498 + g(2) * t497;
t507 = qJD(1) ^ 2;
t336 = -pkin(1) * t507 + pkin(8) * t434 - t396;
t496 = pkin(2) * t370;
t411 = -pkin(9) * t366 - t496;
t444 = qJD(1) * t361;
t339 = t411 * t444;
t354 = t356 ^ 2;
t395 = g(1) * t497 - g(2) * t498;
t437 = t361 * t507;
t376 = qJDD(1) * pkin(1) + pkin(8) * t437 + t395;
t374 = t362 * t376;
t454 = t361 * t366;
t372 = -g(3) * t454 + t366 * t374;
t267 = t355 * pkin(9) - t354 * pkin(2) + (t339 * t444 + t336) * t370 + t372;
t486 = t362 * g(3);
t371 = -t340 * pkin(9) - t486 + ((-pkin(1) - t496) * qJDD(1) + (-pkin(8) * t444 - t370 * t356 * pkin(9) + (qJD(2) + t356) * t366 * pkin(2)) * qJD(1) - t395) * t361;
t219 = t369 * t267 + t365 * t371;
t308 = pkin(3) * t332 - pkin(10) * t334;
t508 = t349 ^ 2;
t195 = -pkin(3) * t508 + pkin(10) * t378 - t332 * t308 + t219;
t416 = t366 * t336 - t370 * t374;
t266 = -t355 * pkin(2) - t354 * pkin(9) + (g(3) * t370 + t339 * t442) * t361 + t416;
t321 = t332 * t349;
t275 = t304 + t321;
t198 = -t275 * pkin(10) + (-t334 * t349 + t400) * pkin(3) + t266;
t137 = t364 * t195 - t368 * t198;
t298 = t329 * t417;
t230 = t298 + t250;
t111 = pkin(4) * t514 - pkin(11) * t230 - t137;
t138 = t368 * t195 + t364 * t198;
t292 = pkin(4) * t329 - pkin(11) * t315;
t413 = t417 ^ 2;
t123 = -pkin(4) * t413 - pkin(11) * t375 - t329 * t292 + t138;
t81 = -t367 * t111 + t123 * t363;
t383 = 0.2e1 * qJD(6) * t287 + t516 + t520 + t81;
t381 = -t383 - t520;
t517 = t165 + t381;
t468 = t515 * t363;
t457 = t334 * t332;
t377 = t378 - t457;
t513 = t365 * t377;
t512 = t369 * t377;
t510 = -t258 + t190;
t229 = -t298 + t250;
t453 = t361 * t370;
t306 = g(3) * t453 + t416;
t307 = t370 * t336 + t372;
t509 = t366 * t306 + t370 * t307;
t270 = (qJD(3) + t349) * t334 + t415;
t284 = t287 ^ 2;
t314 = t315 ^ 2;
t327 = t329 ^ 2;
t330 = t332 ^ 2;
t331 = t334 ^ 2;
t358 = t361 ^ 2;
t202 = -t283 - t284;
t418 = t363 * t250 + t367 * t375;
t386 = (-qJD(5) + t326) * t287 - t418;
t115 = -t160 * t367 + t363 * t386;
t117 = t160 * t363 + t367 * t386;
t79 = -t115 * t364 + t117 * t368;
t67 = -t202 * t369 + t365 * t79;
t506 = pkin(2) * t67;
t167 = t220 * t367 + t468;
t121 = -t166 * t364 + t167 * t368;
t156 = (qJD(5) + t326) * t287 + t418;
t91 = t121 * t365 - t156 * t369;
t505 = pkin(2) * t91;
t243 = -t284 - t323;
t209 = t237 + t301;
t470 = t209 * t363;
t180 = t243 * t367 - t470;
t469 = t209 * t367;
t181 = -t243 * t363 - t469;
t129 = -t180 * t364 + t181 * t368;
t94 = t129 * t365 - t369 * t510;
t504 = pkin(2) * t94;
t82 = t363 * t111 + t367 * t123;
t42 = t363 * t82 - t367 * t81;
t503 = pkin(4) * t42;
t502 = pkin(9) * t67;
t501 = pkin(9) * t91;
t500 = pkin(9) * t94;
t77 = t115 * t368 + t117 * t364;
t499 = pkin(10) * t77;
t120 = t166 * t368 + t167 * t364;
t495 = pkin(3) * t120;
t128 = t180 * t368 + t181 * t364;
t494 = pkin(3) * t128;
t493 = pkin(3) * t365;
t492 = pkin(8) * t361;
t491 = pkin(10) * t120;
t490 = pkin(10) * t128;
t489 = pkin(11) * t115;
t488 = pkin(11) * t166;
t487 = pkin(11) * t180;
t68 = t202 * t365 + t369 * t79;
t485 = pkin(1) * (-t361 * t67 + (t366 * t68 - t370 * t77) * t362) + (t366 * t77 + t370 * t68) * t492;
t92 = t121 * t369 + t156 * t365;
t484 = pkin(1) * (-t361 * t91 + (-t120 * t370 + t366 * t92) * t362) + (t366 * t120 + t370 * t92) * t492;
t95 = t129 * t369 + t365 * t510;
t483 = pkin(1) * (-t361 * t94 + (-t128 * t370 + t366 * t95) * t362) + (t366 * t128 + t370 * t95) * t492;
t482 = -pkin(2) * t77 + pkin(9) * t68;
t481 = t363 * t383;
t480 = t364 * t42;
t479 = t367 * t383;
t478 = t368 * t42;
t477 = -pkin(3) * t202 + pkin(10) * t79;
t476 = -pkin(2) * t120 + pkin(9) * t92;
t475 = -pkin(2) * t128 + pkin(9) * t95;
t218 = t267 * t365 - t369 * t371;
t194 = -t378 * pkin(3) - t508 * pkin(10) + t308 * t334 + t218;
t139 = t375 * pkin(4) - t413 * pkin(11) + t292 * t315 + t194;
t474 = t139 * t363;
t473 = t139 * t367;
t472 = t194 * t364;
t471 = t194 * t368;
t241 = t289 + t302;
t466 = t241 * t364;
t465 = t241 * t368;
t464 = t266 * t365;
t463 = t266 * t369;
t295 = -t378 - t457;
t462 = t295 * t365;
t461 = t295 * t369;
t460 = t326 * t363;
t459 = t326 * t367;
t458 = t329 * t315;
t456 = t349 * t365;
t455 = t349 * t369;
t452 = t364 * t315;
t438 = t358 * t507;
t348 = t370 * t366 * t438;
t337 = t348 + t355;
t450 = t366 * t337;
t449 = t368 * t315;
t338 = -t348 + t355;
t447 = t370 * t338;
t446 = -pkin(3) * t156 + pkin(10) * t121;
t445 = -pkin(3) * t510 + pkin(10) * t129;
t440 = qJD(6) * t285;
t436 = qJD(3) - t349;
t432 = t365 * t237;
t431 = t369 * t237;
t430 = t370 * t457;
t179 = pkin(4) * t180;
t429 = t179 - t82;
t344 = t356 * t424;
t428 = t344 + t340;
t427 = -pkin(3) * t369 - pkin(2);
t276 = -0.2e1 * t440;
t189 = -qJD(5) * t287 - t418;
t254 = pkin(5) * t326 - qJ(6) * t287;
t409 = t283 * pkin(5) - t189 * qJ(6) + t326 * t254 - t82;
t63 = t276 - t409;
t32 = t363 * t63 - t479;
t60 = pkin(5) * t383;
t426 = pkin(4) * t32 - t60;
t359 = t366 ^ 2;
t423 = t359 * t438;
t360 = t370 ^ 2;
t422 = t360 * t438;
t113 = pkin(4) * t115;
t59 = -pkin(3) * t77 - t113;
t421 = -pkin(4) * t202 + pkin(11) * t117;
t420 = -pkin(4) * t156 + pkin(11) * t167;
t419 = -pkin(4) * t510 + pkin(11) * t181;
t43 = t363 * t81 + t367 * t82;
t98 = t137 * t364 + t368 * t138;
t171 = t218 * t365 + t369 * t219;
t414 = -t356 + t443;
t412 = -pkin(3) * t194 + pkin(10) * t98;
t410 = -t165 + t81;
t408 = t364 * t417;
t407 = t368 * t417;
t97 = -t137 * t368 + t138 * t364;
t406 = t218 * t369 - t219 * t365;
t404 = -pkin(1) + t411;
t403 = pkin(5) * t243 + t409;
t402 = t365 * t289;
t401 = t369 * t289;
t49 = -pkin(5) * t202 + qJ(6) * t386 + t63;
t54 = t383 + t516;
t23 = t363 * t54 + t367 * t49 + t421;
t26 = -t363 * t49 + t367 * t54 - t489;
t398 = t23 * t368 + t26 * t364 + t477;
t34 = t421 + t43;
t35 = -t42 - t489;
t397 = t34 * t368 + t35 * t364 + t477;
t96 = -t189 * pkin(5) - t283 * qJ(6) + t254 * t287 + qJDD(6) + t139;
t73 = -pkin(5) * t156 + qJ(6) * t220 - t96;
t55 = qJ(6) * t468 + t367 * t73 + t420;
t62 = qJ(6) * t467 - t363 * t73 - t488;
t394 = t364 * t62 + t368 * t55 + t446;
t134 = -pkin(5) * t510 - qJ(6) * t209;
t89 = -qJ(6) * t243 + t96;
t57 = t134 * t367 + t363 * t89 + t419;
t64 = -t134 * t363 + t367 * t89 - t487;
t393 = t364 * t64 + t368 * t57 + t445;
t392 = t179 + t403;
t103 = t474 - t488;
t87 = t420 - t473;
t391 = t103 * t364 + t368 * t87 + t446;
t104 = t473 - t487;
t88 = t419 + t474;
t390 = t104 * t364 + t368 * t88 + t445;
t262 = -t327 - t413;
t204 = t262 * t368 - t519;
t227 = -t375 - t458;
t389 = pkin(3) * t227 + pkin(10) * t204 - t471;
t280 = -t314 - t327;
t207 = -t280 * t364 - t465;
t388 = -pkin(3) * t229 + pkin(10) * t207 + t472;
t373 = -t375 + t458;
t177 = t230 * t364 + t368 * t373;
t251 = t413 + t314;
t385 = pkin(3) * t251 + pkin(10) * t177 + t98;
t33 = t367 * t63 + t481;
t40 = -pkin(5) * t96 + qJ(6) * t63;
t10 = -pkin(4) * t96 + pkin(11) * t33 + qJ(6) * t481 + t367 * t40;
t14 = -pkin(11) * t32 + qJ(6) * t479 - t363 * t40;
t18 = -t32 * t364 + t33 * t368;
t382 = -pkin(3) * t96 + pkin(10) * t18 + t10 * t368 + t14 * t364;
t25 = t368 * t43 - t480;
t36 = -pkin(4) * t139 + pkin(11) * t43;
t380 = -pkin(3) * t139 + pkin(10) * t25 - pkin(11) * t480 + t36 * t368;
t343 = t356 * t425;
t342 = (t359 - t360) * t438;
t341 = -t354 - t422;
t328 = -t423 - t354;
t322 = t361 * t376 + t486;
t320 = -t343 - t384;
t319 = t343 - t384;
t318 = -t344 + t340;
t317 = -t331 + t508;
t316 = t330 - t508;
t310 = -t331 - t508;
t309 = t331 - t330;
t305 = -t508 - t330;
t294 = -t314 + t327;
t293 = t413 - t327;
t291 = t330 + t331;
t290 = (t332 * t365 + t334 * t369) * t349;
t288 = t314 - t413;
t277 = 0.2e1 * t440;
t274 = t332 * t436 + t405;
t273 = t304 - t321;
t271 = -t334 * t436 - t415;
t269 = t304 * t365 - t334 * t455;
t268 = -t332 * t456 - t369 * t400;
t261 = t316 * t365 - t461;
t260 = t317 * t369 + t513;
t256 = -t284 + t323;
t255 = t283 - t323;
t253 = -t310 * t365 + t461;
t252 = t310 * t369 + t462;
t248 = t305 * t369 - t513;
t247 = t305 * t365 + t512;
t245 = (-t407 + t452) * t329;
t244 = (-t408 - t449) * t329;
t235 = t284 - t283;
t234 = -t270 * t369 + t273 * t365;
t232 = t271 * t365 + t275 * t369;
t225 = t250 * t368 - t329 * t452;
t224 = t250 * t364 + t329 * t449;
t223 = t329 * t407 + t364 * t375;
t222 = -t329 * t408 + t368 * t375;
t221 = t245 * t365 - t302 * t369;
t216 = t293 * t368 - t466;
t215 = -t294 * t364 + t518;
t214 = t293 * t364 + t465;
t213 = t294 * t368 + t519;
t212 = (-t285 * t367 + t287 * t363) * t326;
t211 = (-t285 * t363 - t287 * t367) * t326;
t206 = t280 * t368 - t466;
t203 = t262 * t364 + t518;
t200 = t365 * t225 - t401;
t199 = t365 * t223 + t401;
t193 = pkin(2) * t274 + pkin(9) * t253 + t464;
t191 = pkin(2) * t271 + pkin(9) * t248 - t463;
t185 = t255 * t367 - t470;
t184 = -t256 * t363 - t467;
t183 = t255 * t363 + t469;
t182 = t256 * t367 - t468;
t176 = t227 * t368 - t229 * t364;
t175 = -t230 * t368 + t364 * t373;
t174 = t227 * t364 + t229 * t368;
t173 = t216 * t365 - t369 * t373;
t172 = t215 * t365 - t230 * t369;
t169 = t207 * t369 + t229 * t365;
t168 = t207 * t365 - t229 * t369;
t163 = t204 * t369 - t227 * t365;
t162 = t204 * t365 + t227 * t369;
t153 = pkin(5) * t160;
t152 = t190 * t367 - t287 * t460;
t151 = t190 * t363 + t287 * t459;
t150 = -t189 * t363 + t285 * t459;
t149 = t189 * t367 + t285 * t460;
t148 = -t211 * t364 + t212 * t368;
t147 = t211 * t368 + t212 * t364;
t146 = t176 * t365 - t288 * t369;
t145 = t177 * t369 - t251 * t365;
t144 = t177 * t365 + t251 * t369;
t143 = -pkin(2) * t266 + pkin(9) * t171;
t142 = t148 * t365 - t301 * t369;
t141 = -pkin(10) * t206 + t471;
t140 = -pkin(10) * t203 + t472;
t135 = pkin(2) * t291 + pkin(9) * t234 + t171;
t133 = -t183 * t364 + t185 * t368;
t132 = -t182 * t364 + t184 * t368;
t131 = t183 * t368 + t185 * t364;
t130 = t182 * t368 + t184 * t364;
t125 = -pkin(3) * t206 + t138;
t124 = -pkin(3) * t203 + t137;
t116 = -t156 * t367 - t363 * t510;
t114 = -t156 * t363 + t367 * t510;
t108 = -t151 * t364 + t152 * t368;
t107 = -t149 * t364 + t150 * t368;
t106 = t151 * t368 + t152 * t364;
t105 = t149 * t368 + t150 * t364;
t102 = t108 * t365 - t431;
t101 = t107 * t365 + t431;
t100 = t133 * t365 - t369 * t386;
t99 = t132 * t365 - t160 * t369;
t86 = t194 * t365 + t369 * t98;
t85 = -t194 * t369 + t365 * t98;
t84 = t362 * t142 + (t366 * (t148 * t369 + t301 * t365) - t370 * t147) * t361;
t83 = -pkin(10) * t175 - t97;
t78 = -t114 * t364 + t116 * t368;
t76 = t114 * t368 + t116 * t364;
t71 = -t235 * t369 + t365 * t78;
t70 = -pkin(2) * t206 + pkin(9) * t169 + t125 * t369 + t141 * t365;
t69 = -pkin(2) * t203 + pkin(9) * t163 + t124 * t369 + t140 * t365;
t58 = pkin(9) * t145 + t175 * t427 + t365 * t83;
t56 = -t429 - t494;
t53 = t362 * t100 + (t366 * (t133 * t369 + t365 * t386) - t370 * t131) * t361;
t52 = t362 * t99 + (t366 * (t132 * t369 + t160 * t365) - t370 * t130) * t361;
t51 = t410 - t495;
t50 = t104 * t368 - t364 * t88 - t490;
t48 = t362 * t102 + (t366 * (t108 * t369 + t432) - t370 * t106) * t361;
t47 = t362 * t101 + (t366 * (t107 * t369 - t432) - t370 * t105) * t361;
t45 = t153 + t59;
t44 = t103 * t368 - t364 * t87 - t491;
t39 = t276 - t392 - t494;
t37 = -t495 - t517;
t31 = pkin(9) * t86 + (-pkin(10) * t365 + t427) * t97;
t30 = t362 * t71 + (t366 * (t235 * t365 + t369 * t78) - t370 * t76) * t361;
t28 = -t364 * t57 + t368 * t64 - t490;
t27 = -t364 * t55 + t368 * t62 - t491;
t24 = t364 * t43 + t478;
t22 = t139 * t365 + t25 * t369;
t21 = -t139 * t369 + t25 * t365;
t20 = t365 * t50 + t369 * t56 + t475;
t19 = t365 * t44 + t369 * t51 + t476;
t17 = t32 * t368 + t33 * t364;
t16 = -pkin(3) * t24 - t503;
t15 = -t34 * t364 + t35 * t368 - t499;
t13 = t18 * t369 + t365 * t96;
t12 = t18 * t365 - t369 * t96;
t11 = t28 * t365 + t369 * t39 + t475;
t9 = t27 * t365 + t369 * t37 + t476;
t8 = -pkin(10) * t24 - pkin(11) * t478 - t36 * t364;
t7 = -t23 * t364 + t26 * t368 - t499;
t6 = -pkin(3) * t17 - t426;
t5 = t15 * t365 + t369 * t59 + t482;
t4 = t365 * t7 + t369 * t45 + t482;
t3 = -pkin(10) * t17 - t10 * t364 + t14 * t368;
t2 = -pkin(2) * t24 + pkin(9) * t22 + t16 * t369 + t365 * t8;
t1 = -pkin(2) * t17 + pkin(9) * t13 + t3 * t365 + t369 * t6;
t29 = [0, 0, 0, 0, 0, qJDD(1), t395, t396, 0, 0, (-t358 * t414 * t441 + t340 * t361) * t366, t362 * t342 + (t366 * t320 + t370 * t428) * t361, t362 * t318 + (t450 + t370 * (t354 - t423)) * t361, (t433 + (-qJD(2) + t414) * t442) * t358 * t370, t362 * t319 + (t366 * (-t354 + t422) + t447) * t361, t362 * t355, (-t306 + pkin(1) * (t337 * t370 + t341 * t366)) * t362 + (t370 * t322 + pkin(1) * t320 + pkin(8) * (t341 * t370 - t450)) * t361, -t322 * t454 - t362 * t307 + pkin(1) * (-t361 * t428 + (t328 * t370 - t338 * t366) * t362) + (-t366 * t328 - t447) * t492, pkin(1) * ((-t318 * t370 + t319 * t366) * t362 - (-t359 - t360) * t358 * t437) + (t366 * t318 + t319 * t370) * t492 + t509 * t361, pkin(1) * (t361 * t322 + (-t306 * t370 + t307 * t366) * t362) + t509 * t492, t362 * t269 + (t366 * (t304 * t369 + t334 * t456) - t430) * t361, t362 * t232 + (t366 * (t271 * t369 - t275 * t365) - t370 * t309) * t361, t362 * t260 + (t366 * (-t317 * t365 + t512) - t370 * t273) * t361, t362 * t268 + (t366 * (-t332 * t455 + t365 * t400) + t430) * t361, t362 * t261 + (t366 * (t316 * t369 + t462) + t370 * t270) * t361, -t378 * t453 + t362 * t290 + (t332 * t369 - t334 * t365) * t349 * t454, (t191 + pkin(1) * (t248 * t366 + t271 * t370)) * t362 + (t366 * (-pkin(9) * t247 + t464) + t370 * (-pkin(2) * t247 + t218) - pkin(1) * t247 + pkin(8) * (t248 * t370 - t366 * t271)) * t361, (t193 + pkin(1) * (t253 * t366 + t274 * t370)) * t362 + (t366 * (-pkin(9) * t252 + t463) + t370 * (-pkin(2) * t252 + t219) - pkin(1) * t252 + pkin(8) * (t253 * t370 - t366 * t274)) * t361, (t135 + pkin(1) * (t234 * t366 + t291 * t370)) * t362 + (t366 * t406 + pkin(8) * (t234 * t370 - t366 * t291) + t404 * (-t270 * t365 - t273 * t369)) * t361, (t143 + pkin(1) * (t171 * t366 - t266 * t370)) * t362 + (pkin(8) * (t171 * t370 + t366 * t266) - t404 * t406) * t361, t362 * t200 + (t366 * (t369 * t225 + t402) - t370 * t224) * t361, t362 * t146 + (t366 * (t176 * t369 + t288 * t365) - t370 * t174) * t361, t362 * t172 + (t366 * (t215 * t369 + t230 * t365) - t370 * t213) * t361, t362 * t199 + (t366 * (t369 * t223 - t402) + t370 * t222) * t361, t362 * t173 + (t366 * (t216 * t369 + t365 * t373) - t370 * t214) * t361, t362 * t221 + (t366 * (t245 * t369 + t302 * t365) - t370 * t244) * t361, (t69 + pkin(1) * (t163 * t366 - t203 * t370)) * t362 + (t366 * (-pkin(9) * t162 - t124 * t365 + t140 * t369) + t370 * (-pkin(2) * t162 - t389) - pkin(1) * t162 + pkin(8) * (t163 * t370 + t366 * t203)) * t361, (t70 + pkin(1) * (t169 * t366 - t206 * t370)) * t362 + (t366 * (-pkin(9) * t168 - t125 * t365 + t141 * t369) + t370 * (-pkin(2) * t168 - t388) - pkin(1) * t168 + pkin(8) * (t169 * t370 + t366 * t206)) * t361, (t58 + pkin(1) * (t145 * t366 - t175 * t370)) * t362 + (t366 * (-pkin(9) * t144 + t175 * t493 + t369 * t83) + t370 * (-pkin(2) * t144 - t385) - pkin(1) * t144 + pkin(8) * (t145 * t370 + t366 * t175)) * t361, (t31 + pkin(1) * (t366 * t86 - t370 * t97)) * t362 + (t366 * (-pkin(9) * t85 + (-pkin(10) * t369 + t493) * t97) + t370 * (-pkin(2) * t85 - t412) - pkin(1) * t85 + pkin(8) * (t366 * t97 + t370 * t86)) * t361, t48, t30, t52, t47, t53, t84, t362 * t19 + (t366 * (-t365 * t51 + t369 * t44 - t501) + t370 * (-t391 - t505)) * t361 + t484, t362 * t20 + (t366 * (-t365 * t56 + t369 * t50 - t500) + t370 * (-t390 - t504)) * t361 + t483, t362 * t5 + (t366 * (t15 * t369 - t365 * t59 - t502) + t370 * (-t397 - t506)) * t361 + t485, (t2 + pkin(1) * (t22 * t366 - t24 * t370)) * t362 + (t366 * (-pkin(9) * t21 - t16 * t365 + t369 * t8) + t370 * (-pkin(2) * t21 - t380) - pkin(1) * t21 + pkin(8) * (t22 * t370 + t366 * t24)) * t361, t48, t30, t52, t47, t53, t84, t362 * t9 + (t366 * (t27 * t369 - t365 * t37 - t501) + t370 * (-t394 - t505)) * t361 + t484, t362 * t11 + (t366 * (t28 * t369 - t365 * t39 - t500) + t370 * (-t393 - t504)) * t361 + t483, t362 * t4 + (t366 * (-t365 * t45 + t369 * t7 - t502) + t370 * (-t398 - t506)) * t361 + t485, (t1 + pkin(1) * (t13 * t366 - t17 * t370)) * t362 + (t366 * (-pkin(9) * t12 + t3 * t369 - t365 * t6) + t370 * (-pkin(2) * t12 - t382) - pkin(1) * t12 + pkin(8) * (t13 * t370 + t366 * t17)) * t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t348, t342, t318, t348, t319, t355, -t306, -t307, 0, 0, t269, t232, t260, t268, t261, t290, t191, t193, t135, t143, t200, t146, t172, t199, t173, t221, t69, t70, t58, t31, t102, t71, t99, t101, t100, t142, t19, t20, t5, t2, t102, t71, t99, t101, t100, t142, t9, t11, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, t309, t273, -t457, -t270, t378, -t218, -t219, 0, 0, t224, t174, t213, -t222, t214, t244, t389, t388, t385, t412, t106, t76, t130, t105, t131, t147, t391, t390, t397, t380, t106, t76, t130, t105, t131, t147, t394, t393, t398, t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t289, t288, t230, -t289, t373, t302, -t137, -t138, 0, 0, t237, t235, t160, -t237, t386, t301, -t410, t429, t113, t503, t237, t235, t160, -t237, t386, t301, t517, t277 + t392, -t153 + t113, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t235, t160, -t237, t386, t301, -t81, -t82, 0, 0, t237, t235, t160, -t237, t386, t301, t381, t277 + t403, -t153, -t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t156, t510, t202, t96;];
tauJ_reg  = t29;
