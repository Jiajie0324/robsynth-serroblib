% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRP9_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:11:39
% EndTime: 2019-03-10 02:12:10
% DurationCPUTime: 12.01s
% Computational Cost: add. (14355->577), mult. (36701->799), div. (0->0), fcn. (29100->10), ass. (0->269)
t269 = sin(pkin(6));
t277 = cos(qJ(2));
t363 = qJD(1) * t277;
t348 = t269 * t363;
t245 = -qJD(3) + t348;
t274 = sin(qJ(2));
t270 = cos(pkin(6));
t364 = qJD(1) * t270;
t352 = pkin(1) * t364;
t250 = t274 * t352;
t211 = pkin(8) * t348 + t250;
t273 = sin(qJ(3));
t276 = cos(qJ(3));
t451 = t211 + t245 * (pkin(3) * t273 - pkin(10) * t276);
t272 = sin(qJ(4));
t275 = cos(qJ(4));
t316 = t276 * t348;
t365 = qJD(1) * t269;
t349 = t274 * t365;
t181 = t272 * t316 - t275 * t349;
t359 = qJD(3) * t276;
t447 = -t272 * t359 + t181;
t357 = qJD(4) * t275;
t450 = t273 * t357 - t447;
t413 = cos(qJ(5));
t337 = t413 * qJD(5);
t449 = (t413 * qJD(4) + t337) * t275;
t361 = qJD(3) * t273;
t410 = pkin(9) * t272;
t448 = -t451 * t275 + t361 * t410;
t381 = t276 * t277;
t182 = (t272 * t274 + t275 * t381) * t365;
t309 = t275 * t359 - t182;
t358 = qJD(4) * t272;
t446 = -t273 * t358 + t309;
t208 = -pkin(8) * t349 + t277 * t352;
t304 = (pkin(2) * t274 - pkin(9) * t277) * t269;
t209 = qJD(1) * t304;
t371 = t276 * t208 + t273 * t209;
t135 = pkin(10) * t349 + t371;
t241 = -pkin(3) * t276 - pkin(10) * t273 - pkin(2);
t445 = t275 * t135 - t241 * t357 + t451 * t272;
t382 = t275 * t276;
t259 = pkin(9) * t382;
t317 = t273 * t348;
t444 = -pkin(4) * t317 + pkin(11) * t182 + t135 * t272 + (pkin(4) * t273 - pkin(11) * t382) * qJD(3) + (-t259 + (pkin(11) * t273 - t241) * t272) * qJD(4) + t448;
t360 = qJD(3) * t275;
t443 = -(-t273 * t360 - t276 * t358) * pkin(9) + t445 + t450 * pkin(11);
t415 = pkin(10) + pkin(11);
t350 = qJD(4) * t415;
t320 = qJD(2) + t364;
t173 = pkin(9) * t320 + t211;
t207 = (-pkin(2) * t277 - pkin(9) * t274 - pkin(1)) * t269;
t187 = qJD(1) * t207;
t122 = -t273 * t173 + t187 * t276;
t195 = t273 * t320 + t276 * t349;
t427 = -t273 * t349 + t276 * t320;
t138 = pkin(3) * t195 - pkin(10) * t427;
t380 = t275 * t122 + t272 * t138;
t393 = t427 * t272;
t442 = -pkin(11) * t393 + t272 * t350 + t380;
t137 = t275 * t138;
t441 = pkin(4) * t195 - t122 * t272 + t137 + (-pkin(11) * t427 + t350) * t275;
t149 = -t272 * t195 - t245 * t275;
t150 = t195 * t275 - t245 * t272;
t271 = sin(qJ(5));
t300 = t271 * t149 + t150 * t413;
t416 = t300 ^ 2;
t89 = -t413 * t149 + t150 * t271;
t87 = t89 ^ 2;
t440 = -t87 + t416;
t390 = t269 * t274;
t217 = t270 * t273 + t276 * t390;
t389 = t269 * t277;
t302 = -t217 * t275 + t272 * t389;
t439 = pkin(11) * t302;
t438 = t300 * t89;
t437 = t89 * qJ(6);
t230 = t271 * t275 + t272 * t413;
t419 = qJD(4) + qJD(5);
t161 = t419 * t230;
t314 = t413 * t359;
t379 = t161 * t273 + t182 * t413 - t447 * t271 - t275 * t314;
t356 = qJD(5) * t271;
t385 = t272 * t273;
t378 = -t181 * t413 + t446 * t271 + t272 * t314 + t273 * t449 - t356 * t385;
t429 = -t230 * t427 + t161;
t388 = t271 * t272;
t299 = t275 * t413 - t388;
t373 = -t299 * t427 - t419 * t388 + t449;
t324 = -t273 * t208 + t276 * t209;
t288 = pkin(3) * t349 + t324;
t428 = t450 * pkin(4) + pkin(9) * t359 + t288;
t421 = t317 - t361;
t188 = qJD(4) - t427;
t177 = qJD(5) + t188;
t355 = qJD(1) * qJD(2);
t335 = t269 * t355;
t312 = t277 * t335;
t279 = t427 * qJD(3) + t276 * t312;
t313 = t274 * t335;
t286 = -t195 * t357 + t245 * t358 - t272 * t279 + t275 * t313;
t84 = -t195 * t358 - t245 * t357 + t272 * t313 + t275 * t279;
t35 = -t149 * t337 + t150 * t356 - t271 * t286 - t413 * t84;
t435 = t177 * t89 - t35;
t152 = qJD(3) * t195 + t273 * t312;
t172 = -pkin(2) * t320 - t208;
t106 = -pkin(3) * t427 - t195 * pkin(10) + t172;
t123 = t276 * t173 + t273 * t187;
t111 = -pkin(10) * t245 + t123;
t60 = t106 * t272 + t111 * t275;
t210 = qJD(2) * t304;
t202 = qJD(1) * t210;
t256 = pkin(8) * t390;
t411 = pkin(1) * t277;
t212 = (t270 * t411 - t256) * qJD(2);
t203 = qJD(1) * t212;
t294 = -t173 * t361 + t187 * t359 + t273 * t202 + t276 * t203;
t70 = pkin(10) * t313 + t294;
t308 = pkin(8) * t312;
t80 = t152 * pkin(3) - pkin(10) * t279 + qJD(2) * t250 + t308;
t29 = -qJD(4) * t60 - t272 * t70 + t275 * t80;
t10 = pkin(4) * t152 - pkin(11) * t84 + t29;
t28 = t106 * t357 - t111 * t358 + t272 * t80 + t275 * t70;
t17 = pkin(11) * t286 + t28;
t59 = t275 * t106 - t111 * t272;
t48 = -pkin(11) * t150 + t59;
t41 = pkin(4) * t188 + t48;
t49 = pkin(11) * t149 + t60;
t334 = -t271 * t10 - t413 * t17 - t41 * t337 + t49 * t356;
t110 = pkin(3) * t245 - t122;
t72 = -pkin(4) * t149 + t110;
t434 = t72 * t89 + t334;
t43 = pkin(5) * t89 + qJD(6) + t72;
t433 = t300 * t43;
t432 = -t123 + (t358 - t393) * pkin(4);
t431 = qJ(6) * t300;
t430 = t274 * t277;
t205 = t256 + (-pkin(2) - t411) * t270;
t216 = -t270 * t276 + t273 * t390;
t130 = t216 * pkin(3) - t217 * pkin(10) + t205;
t354 = pkin(8) * t389;
t412 = pkin(1) * t274;
t206 = t354 + (pkin(9) + t412) * t270;
t372 = t276 * t206 + t273 * t207;
t132 = -pkin(10) * t389 + t372;
t377 = t272 * t130 + t275 * t132;
t228 = t275 * t241;
t384 = t273 * t275;
t157 = -pkin(11) * t384 + t228 + (-pkin(4) - t410) * t276;
t367 = t272 * t241 + t259;
t169 = -pkin(11) * t385 + t367;
t374 = t271 * t157 + t413 * t169;
t246 = t415 * t272;
t247 = t415 * t275;
t368 = -t271 * t246 + t413 * t247;
t426 = -t368 * qJD(5) + t442 * t271 - t441 * t413;
t425 = -t374 * qJD(5) + t443 * t271 + t444 * t413;
t424 = t246 * t337 + t247 * t356 + t441 * t271 + t442 * t413;
t423 = -t157 * t337 + t169 * t356 - t444 * t271 + t443 * t413;
t422 = t316 - t359;
t47 = t413 * t49;
t22 = t271 * t41 + t47;
t6 = -qJD(5) * t22 + t413 * t10 - t271 * t17;
t418 = -t72 * t300 + t6;
t36 = qJD(5) * t300 + t271 * t84 - t413 * t286;
t417 = t177 * t300 - t36;
t278 = qJD(1) ^ 2;
t45 = t271 * t49;
t21 = t413 * t41 - t45;
t11 = t21 - t431;
t7 = pkin(5) * t177 + t11;
t414 = t11 - t7;
t409 = pkin(9) * t276;
t215 = t299 * t273;
t408 = -pkin(5) * t421 + qJ(6) * t379 - t215 * qJD(6) + t425;
t214 = t230 * t273;
t407 = -qJ(6) * t378 - qJD(6) * t214 - t423;
t406 = t413 * t48 - t45;
t387 = t272 * t132;
t327 = t275 * t130 - t387;
t56 = pkin(4) * t216 + t327 + t439;
t303 = t217 * t272 + t275 * t389;
t61 = -pkin(11) * t303 + t377;
t405 = t271 * t56 + t413 * t61;
t402 = -qJ(6) * t429 + qJD(6) * t299 - t424;
t401 = -pkin(5) * t195 - qJ(6) * t373 - t230 * qJD(6) + t426;
t318 = t173 * t359 + t187 * t361 - t276 * t202 + t273 * t203;
t71 = -pkin(3) * t313 + t318;
t400 = t71 * t272;
t399 = t71 * t275;
t398 = t84 * t272;
t397 = t149 * t188;
t396 = t150 * t188;
t395 = t152 * t276;
t346 = qJD(2) * t389;
t165 = -qJD(3) * t216 + t276 * t346;
t394 = t165 * t272;
t392 = t195 * t245;
t296 = t245 * t273;
t266 = t269 ^ 2;
t391 = t266 * t278;
t386 = t272 * t152;
t383 = t275 * t152;
t237 = pkin(4) * t385 + t273 * pkin(9);
t366 = t274 ^ 2 - t277 ^ 2;
t362 = qJD(2) * t274;
t293 = -t206 * t361 + t207 * t359 + t273 * t210 + t276 * t212;
t347 = t269 * t362;
t76 = pkin(10) * t347 + t293;
t164 = qJD(3) * t217 + t273 * t346;
t213 = (t270 * t412 + t354) * qJD(2);
t98 = t164 * pkin(3) - t165 * pkin(10) + t213;
t353 = t130 * t357 + t272 * t98 + t275 * t76;
t263 = -pkin(4) * t275 - pkin(3);
t345 = t275 * t362;
t343 = t245 * t361;
t342 = t188 * t358;
t339 = t269 * t270 * t278;
t336 = t266 * t355;
t333 = -t271 * t48 - t47;
t332 = -t271 * t61 + t413 * t56;
t328 = -t272 * t76 + t275 * t98;
t326 = t413 * t157 - t169 * t271;
t325 = -t273 * t206 + t276 * t207;
t323 = -t413 * t246 - t247 * t271;
t322 = t188 * t275;
t321 = 0.2e1 * t336;
t319 = qJD(2) + 0.2e1 * t364;
t311 = -0.2e1 * pkin(1) * t336;
t131 = pkin(3) * t389 - t325;
t305 = -t206 * t359 - t207 * t361 + t276 * t210 - t273 * t212;
t105 = -qJD(4) * t303 + t165 * t275 + t272 * t347;
t20 = t164 * pkin(4) - t105 * pkin(11) - qJD(4) * t377 + t328;
t290 = t269 * t345 - t394;
t27 = t290 * pkin(11) + (-t387 + t439) * qJD(4) + t353;
t301 = t271 * t20 + t413 * t27 + t56 * t337 - t356 * t61;
t298 = -t188 * t357 - t386;
t295 = -pkin(10) * t152 + t110 * t188;
t289 = pkin(1) * (-t270 * t355 + t391);
t287 = t413 * t303;
t284 = -qJD(5) * t405 + t413 * t20 - t271 * t27;
t114 = -t271 * t303 - t302 * t413;
t94 = pkin(4) * t303 + t131;
t280 = qJD(4) * t302 + t290;
t42 = -pkin(4) * t286 + t71;
t13 = t36 * pkin(5) + t42;
t50 = -(-t217 * t357 - t394) * pkin(4) + (-pkin(3) * t362 - (t277 * t358 + t345) * pkin(4)) * t269 - t305;
t262 = pkin(4) * t413 + pkin(5);
t204 = qJD(1) * t213;
t146 = qJ(6) * t299 + t368;
t145 = -qJ(6) * t230 + t323;
t133 = t152 * t216;
t113 = -t271 * t302 + t287;
t86 = -qJ(6) * t214 + t374;
t85 = -pkin(5) * t276 - qJ(6) * t215 + t326;
t77 = -pkin(3) * t347 - t305;
t38 = qJD(5) * t114 + t271 * t105 - t280 * t413;
t37 = qJD(5) * t287 - t105 * t413 - t271 * t280 - t302 * t356;
t25 = -qJ(6) * t113 + t405;
t23 = pkin(5) * t216 - qJ(6) * t114 + t332;
t15 = t406 - t431;
t14 = t333 + t437;
t12 = t22 - t437;
t4 = -qJ(6) * t38 - qJD(6) * t113 + t301;
t3 = t164 * pkin(5) + t37 * qJ(6) - t114 * qJD(6) + t284;
t2 = -qJ(6) * t36 - qJD(6) * t89 - t334;
t1 = t152 * pkin(5) + t35 * qJ(6) - qJD(6) * t300 + t6;
t5 = [0, 0, 0, t321 * t430, -t366 * t321, t319 * t346, -t319 * t347, 0, -t204 * t270 - t213 * t320 + t274 * t311, -t203 * t270 - t212 * t320 + t277 * t311, t195 * t165 + t217 * t279, -t217 * t152 - t195 * t164 + t165 * t427 - t216 * t279, -t165 * t245 + t195 * t347 + t217 * t313 - t279 * t389, t164 * t245 + (t152 * t277 + (-qJD(1) * t216 + t427) * t362) * t269 (-t245 * t269 - t266 * t363) * t362, -t305 * t245 - t213 * t427 + t205 * t152 + t204 * t216 + t172 * t164 + (t318 * t277 + (qJD(1) * t325 + t122) * t362) * t269, -t123 * t347 + t172 * t165 + t213 * t195 + t204 * t217 + t205 * t279 + t245 * t293 + t294 * t389 - t313 * t372, t105 * t150 - t302 * t84, t105 * t149 + t150 * t280 - t286 * t302 - t303 * t84, t105 * t188 + t150 * t164 - t152 * t302 + t216 * t84, t149 * t164 - t152 * t303 + t188 * t280 + t216 * t286, t164 * t188 + t133, t328 * t188 + t327 * t152 + t29 * t216 + t59 * t164 - t77 * t149 - t131 * t286 + t71 * t303 - t110 * t290 + (-t110 * t302 - t188 * t377) * qJD(4) -(-t132 * t358 + t353) * t188 - t377 * t152 - t28 * t216 - t60 * t164 + t77 * t150 + t131 * t84 - t71 * t302 + t110 * t105, -t114 * t35 - t300 * t37, t113 * t35 - t114 * t36 - t300 * t38 + t37 * t89, t114 * t152 + t164 * t300 - t177 * t37 - t216 * t35, -t113 * t152 - t164 * t89 - t177 * t38 - t216 * t36, t164 * t177 + t133, t42 * t113 + t152 * t332 + t21 * t164 + t177 * t284 + t6 * t216 + t94 * t36 + t72 * t38 + t50 * t89, t42 * t114 - t152 * t405 - t22 * t164 - t177 * t301 + t216 * t334 + t300 * t50 - t94 * t35 - t72 * t37, -t1 * t114 - t113 * t2 - t12 * t38 + t23 * t35 - t25 * t36 - t3 * t300 + t37 * t7 - t4 * t89, t2 * t25 + t12 * t4 + t1 * t23 + t7 * t3 + t13 * (t113 * pkin(5) + t94) + t43 * (t38 * pkin(5) + t50); 0, 0, 0, -t391 * t430, t366 * t391, -t277 * t339, t274 * t339, 0, t211 * t320 + t274 * t289 - t308, pkin(8) * t313 + t208 * t320 + t277 * t289, -qJD(3) * t273 ^ 2 * t349 + ((qJD(3) * t320 + t312) * t273 - t392) * t276, -t273 * t152 + t421 * t195 + t276 * t279 - t422 * t427, -t245 * t359 + (t245 * t381 + (t273 * qJD(2) - t195) * t274) * t365, t343 + (-t277 * t296 + (qJD(2) * t276 - t427) * t274) * t365, t245 * t349, -pkin(2) * t152 - t204 * t276 + t324 * t245 + t211 * t427 + (t172 * t273 + t245 * t409) * qJD(3) + (-t122 * t274 + (-pkin(9) * t362 - t172 * t277) * t273) * t365, -pkin(2) * t279 - pkin(9) * t343 + t123 * t349 - t422 * t172 - t211 * t195 + t204 * t273 - t245 * t371 - t313 * t409, t446 * t150 + t84 * t384, -t182 * t149 + t150 * t181 + (t149 * t275 - t150 * t272) * t359 + (t275 * t286 - t398 + (-t149 * t272 - t150 * t275) * qJD(4)) * t273, -t276 * t84 + t309 * t188 + (-t150 * t245 - t342 + t383) * t273, -t286 * t276 + t447 * t188 + (-t149 * t245 + t298) * t273, -t188 * t296 - t395, -t110 * t181 - t288 * t149 + t228 * t152 + ((-qJD(4) * t241 + t135) * t272 + t448) * t188 + (t110 * t272 * qJD(3) - t29 + (-qJD(3) * t149 + t298) * pkin(9)) * t276 + (-pkin(9) * t286 + t110 * t357 - t245 * t59 + t400) * t273, -t367 * t152 + t288 * t150 - t110 * t182 + t445 * t188 + (t110 * t360 + t28 + (qJD(3) * t150 + t342) * pkin(9)) * t276 + (-t110 * t358 + t399 + t245 * t60 + (t188 * t360 + t84) * pkin(9)) * t273, -t35 * t215 - t300 * t379, t35 * t214 - t215 * t36 - t300 * t378 + t379 * t89, t152 * t215 - t177 * t379 + t276 * t35 - t296 * t300, -t152 * t214 - t177 * t378 + t276 * t36 + t296 * t89, -t177 * t296 - t395, t152 * t326 + t425 * t177 - t421 * t21 + t42 * t214 + t237 * t36 - t6 * t276 + t378 * t72 + t428 * t89, -t374 * t152 + t423 * t177 + t42 * t215 + t22 * t296 - t237 * t35 - t276 * t334 + t428 * t300 - t379 * t72, -t1 * t215 - t12 * t378 - t2 * t214 - t300 * t408 + t35 * t85 - t36 * t86 + t379 * t7 - t407 * t89, t2 * t86 + t1 * t85 + t13 * (pkin(5) * t214 + t237) + t408 * t7 + (pkin(5) * t378 + t428) * t43 + t407 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195 * t427, t195 ^ 2 - t427 ^ 2, t245 * t427 + t279, -t152 - t392, t313, -t123 * t245 - t172 * t195 - t318, -t122 * t245 - t172 * t427 - t294, t150 * t322 + t398 (t84 + t397) * t275 + (t286 - t396) * t272, -t150 * t195 + t188 * t322 + t386, -t188 ^ 2 * t272 - t149 * t195 + t383, -t188 * t195, pkin(3) * t286 - t399 - t59 * t195 + t123 * t149 + (-pkin(10) * t357 - t137) * t188 + (t122 * t188 + t295) * t272, -pkin(3) * t84 - t123 * t150 + t60 * t195 + t400 + (pkin(10) * t358 + t380) * t188 + t295 * t275, -t35 * t230 + t300 * t373, -t230 * t36 - t299 * t35 - t300 * t429 - t373 * t89, t230 * t152 + t177 * t373 - t195 * t300, t152 * t299 - t177 * t429 + t89 * t195, -t177 * t195, t152 * t323 + t426 * t177 - t21 * t195 + t263 * t36 - t299 * t42 + t429 * t72 + t432 * t89, -t368 * t152 + t424 * t177 + t22 * t195 + t42 * t230 - t263 * t35 + t432 * t300 + t373 * t72, -t1 * t230 - t12 * t429 + t145 * t35 - t146 * t36 + t2 * t299 - t300 * t401 - t373 * t7 - t402 * t89, t2 * t146 + t1 * t145 + t13 * (-pkin(5) * t299 + t263) + t401 * t7 + (pkin(5) * t429 + t432) * t43 + t402 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150 * t149, -t149 ^ 2 + t150 ^ 2, t84 - t397, t286 + t396, t152, -t110 * t150 + t188 * t60 + t29, -t110 * t149 + t188 * t59 - t28, t438, t440, t435, t417, t152, -t333 * t177 + (-t150 * t89 + t152 * t413 - t177 * t356) * pkin(4) + t418, t406 * t177 + (-t150 * t300 - t271 * t152 - t177 * t337) * pkin(4) + t434, t12 * t300 + t14 * t300 + t15 * t89 + t262 * t35 - t7 * t89 + (-t271 * t36 + (t271 * t300 - t413 * t89) * qJD(5)) * pkin(4), -pkin(5) * t433 + t1 * t262 - t12 * t15 - t7 * t14 + (-t43 * t150 + t2 * t271 + (t12 * t413 - t271 * t7) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t438, t440, t435, t417, t152, t22 * t177 + t418, t177 * t21 + t434, pkin(5) * t35 + t414 * t89, -t414 * t12 + (t1 - t433) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87 - t416, t12 * t89 + t300 * t7 + t13;];
tauc_reg  = t5;
