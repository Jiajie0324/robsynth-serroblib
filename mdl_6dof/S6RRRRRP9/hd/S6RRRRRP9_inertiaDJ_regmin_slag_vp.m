% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:11:39
% EndTime: 2019-03-10 02:11:56
% DurationCPUTime: 5.69s
% Computational Cost: add. (7740->437), mult. (20563->781), div. (0->0), fcn. (19965->10), ass. (0->213)
t167 = sin(qJ(3));
t166 = sin(qJ(4));
t170 = cos(qJ(3));
t244 = qJD(3) * t170;
t224 = t166 * t244;
t169 = cos(qJ(4));
t241 = qJD(4) * t169;
t280 = t167 * t241 + t224;
t279 = -0.4e1 * t167;
t274 = pkin(10) + pkin(11);
t137 = t274 * t166;
t138 = t274 * t169;
t165 = sin(qJ(5));
t273 = cos(qJ(5));
t92 = -t165 * t137 + t273 * t138;
t193 = -pkin(3) * t170 - pkin(10) * t167;
t133 = -pkin(2) + t193;
t256 = t169 * t170;
t151 = pkin(9) * t256;
t104 = t166 * t133 + t151;
t162 = t169 ^ 2;
t252 = t166 ^ 2 - t162;
t204 = t252 * qJD(4);
t278 = qJD(4) + qJD(5);
t240 = qJD(4) * t170;
t220 = t166 * t240;
t245 = qJD(3) * t169;
t181 = t167 * t245 + t220;
t192 = pkin(3) * t167 - pkin(10) * t170;
t186 = t192 * qJD(3);
t71 = pkin(9) * t181 - t133 * t241 - t166 * t186;
t164 = sin(pkin(6));
t171 = cos(qJ(2));
t242 = qJD(4) * t166;
t168 = sin(qJ(2));
t250 = qJD(2) * t168;
t182 = t169 * t250 + t171 * t242;
t248 = qJD(2) * t171;
t216 = t164 * t248;
t263 = cos(pkin(6));
t208 = t263 * t170;
t262 = t164 * t168;
t116 = t167 * t262 - t208;
t247 = qJD(3) * t116;
t173 = t170 * t216 - t247;
t179 = t167 * t263 + t170 * t262;
t177 = qJD(4) * t179;
t264 = t173 * t166 + t169 * t177;
t277 = -t164 * t182 + t264;
t276 = t168 ^ 2;
t163 = t170 ^ 2;
t275 = 0.2e1 * t164;
t272 = pkin(4) * t116;
t271 = pkin(4) * t167;
t270 = pkin(9) * t164;
t269 = pkin(9) * t166;
t268 = pkin(9) * t170;
t229 = pkin(1) * t263;
t107 = -pkin(2) * t263 + pkin(8) * t262 - t171 * t229;
t67 = t116 * pkin(3) - pkin(10) * t179 + t107;
t261 = t164 * t171;
t178 = pkin(8) * t261 + t168 * t229;
t108 = pkin(9) * t263 + t178;
t109 = (-pkin(2) * t171 - pkin(9) * t168 - pkin(1)) * t164;
t267 = t170 * t108 + t167 * t109;
t69 = -pkin(10) * t261 + t267;
t31 = -t166 * t69 + t169 * t67;
t231 = t166 * t261;
t89 = t169 * t179 - t231;
t27 = -pkin(11) * t89 + t272 + t31;
t110 = t179 * t166;
t139 = t169 * t261;
t255 = t110 + t139;
t32 = t166 * t67 + t169 * t69;
t30 = -pkin(11) * t255 + t32;
t29 = t273 * t30;
t14 = t165 * t27 + t29;
t125 = t169 * t133;
t257 = t167 * t169;
t83 = -pkin(11) * t257 + t125 + (-pkin(4) - t269) * t170;
t258 = t166 * t167;
t90 = -pkin(11) * t258 + t104;
t85 = t273 * t90;
t54 = t165 * t83 + t85;
t217 = t164 * t250;
t49 = -qJD(4) * t139 + t169 * t173 + (-t177 + t217) * t166;
t266 = t49 * t166;
t265 = t49 * t169;
t260 = t165 * t166;
t259 = t165 * t169;
t157 = qJD(3) * t167;
t225 = t166 * t157;
t253 = pkin(9) * t225 + t169 * t186;
t132 = pkin(4) * t258 + t167 * pkin(9);
t161 = t167 ^ 2;
t251 = t161 - t163;
t249 = qJD(2) * t170;
t246 = qJD(3) * t168;
t243 = qJD(3) * t171;
t239 = qJD(5) * t165;
t238 = t107 * qJD(3);
t237 = -0.2e1 * pkin(2) * qJD(3);
t236 = -0.2e1 * pkin(3) * qJD(4);
t235 = t166 * t268;
t234 = t273 * pkin(4);
t233 = pkin(4) * t242;
t232 = pkin(4) * t239;
t230 = t165 * t258;
t156 = pkin(9) * t244;
t99 = t280 * pkin(4) + t156;
t155 = -pkin(4) * t169 - pkin(3);
t228 = qJD(4) * t274;
t227 = t273 * t169;
t159 = t164 ^ 2;
t226 = t159 * t248;
t223 = t167 * t243;
t222 = t169 * t244;
t221 = t167 * t242;
t218 = t169 * t240;
t215 = t166 * t241;
t214 = t167 * t244;
t206 = qJD(2) * t263;
t196 = t168 * t206;
t176 = t179 * qJD(3);
t88 = t167 * t216 + t176;
t172 = pkin(1) * t196 + t88 * pkin(3) + pkin(8) * t216 - pkin(10) * t173;
t111 = (pkin(2) * t168 - pkin(9) * t171) * t164 * qJD(2);
t195 = t171 * t206;
t112 = -pkin(1) * t195 + pkin(8) * t217;
t38 = t108 * t157 - t109 * t244 - t167 * t111 + t170 * t112;
t36 = pkin(10) * t217 - t38;
t15 = -t166 * t172 - t169 * t36 - t67 * t241 + t242 * t69;
t12 = -pkin(11) * t277 - t15;
t16 = -qJD(4) * t32 - t166 * t36 + t169 * t172;
t7 = pkin(4) * t88 - pkin(11) * t49 + t16;
t213 = -t165 * t12 + t273 * t7;
t212 = qJD(3) * t273;
t211 = t273 * qJD(4);
t210 = t273 * qJD(5);
t13 = -t165 * t30 + t273 * t27;
t52 = (-pkin(11) * t256 + t271) * qJD(3) + (-t151 + (pkin(11) * t167 - t133) * t166) * qJD(4) + t253;
t58 = -pkin(11) * t280 - t71;
t209 = -t165 * t58 + t273 * t52;
t53 = -t165 * t90 + t273 * t83;
t207 = -t167 * t108 + t170 * t109;
t205 = t169 * t255;
t91 = -t273 * t137 - t138 * t165;
t203 = t251 * qJD(3);
t202 = 0.2e1 * t214;
t201 = pkin(4) * t210;
t200 = t168 * t226;
t199 = t166 * t222;
t198 = t170 * t212;
t197 = t169 * t211;
t68 = pkin(3) * t261 - t207;
t194 = qJD(3) * t208;
t191 = t273 * t255;
t39 = -t108 * t244 - t109 * t157 + t170 * t111 + t167 * t112;
t37 = -pkin(3) * t217 - t39;
t190 = t37 * t166 + t241 * t68;
t189 = -t37 * t169 + t242 * t68;
t3 = -t273 * t12 - t165 * t7 - t27 * t210 + t239 * t30;
t188 = t116 * t241 + t166 * t88;
t187 = t116 * t242 - t169 * t88;
t21 = -t165 * t52 - t83 * t210 + t239 * t90 - t273 * t58;
t127 = t166 * t273 + t259;
t185 = t169 * t217 - t264;
t131 = t166 * t228;
t62 = t273 * t131 + t137 * t210 + t138 * t239 + t228 * t259;
t184 = -t167 * t246 + t170 * t248;
t183 = t167 * t250 - t170 * t243;
t57 = -t165 * t255 + t273 * t89;
t43 = pkin(4) * t255 + t68;
t4 = -qJD(5) * t14 + t213;
t22 = -qJD(5) * t54 + t209;
t63 = -t92 * qJD(5) + t165 * t131 - t274 * t197;
t87 = t278 * t127;
t23 = t264 * pkin(4) + (-pkin(3) * t250 - pkin(4) * t182) * t164 - t39;
t154 = t234 + pkin(5);
t145 = -0.2e1 * t214;
t126 = -t227 + t260;
t115 = t167 * t227 - t230;
t114 = t127 * t167;
t113 = t178 * qJD(2);
t106 = pkin(5) * t126 + t155;
t103 = t125 - t235;
t86 = -t169 * t210 + t278 * t260 - t197;
t84 = pkin(5) * t114 + t132;
t76 = pkin(5) * t87 + t233;
t75 = -qJ(6) * t126 + t92;
t74 = -qJ(6) * t127 + t91;
t73 = 0.2e1 * t116 * t88;
t72 = -t104 * qJD(4) + t253;
t70 = t116 * t157 - t170 * t88;
t60 = t166 * t198 - t165 * t221 - qJD(5) * t230 + (t165 * t244 + (t211 + t210) * t167) * t169;
t59 = t165 * t224 + t167 * t87 - t169 * t198;
t56 = t165 * t89 + t191;
t42 = pkin(5) * t60 + t99;
t41 = -qJ(6) * t114 + t54;
t40 = -pkin(5) * t170 - qJ(6) * t115 + t53;
t34 = t86 * qJ(6) - t127 * qJD(6) + t63;
t33 = -qJ(6) * t87 - qJD(6) * t126 - t62;
t28 = t56 * pkin(5) + t43;
t20 = qJD(5) * t57 + t165 * t49 + t273 * t277;
t19 = qJD(5) * t191 + t165 * t277 + t239 * t89 - t273 * t49;
t18 = -qJ(6) * t60 - qJD(6) * t114 - t21;
t17 = pkin(5) * t157 + t59 * qJ(6) - t115 * qJD(6) + t22;
t10 = -qJ(6) * t56 + t14;
t9 = t20 * pkin(5) + t23;
t8 = pkin(5) * t116 - qJ(6) * t57 + t13;
t2 = -qJ(6) * t20 - qJD(6) * t56 - t3;
t1 = t88 * pkin(5) + t19 * qJ(6) - t57 * qJD(6) + t4;
t5 = [0, 0, 0, 0.2e1 * t200, 0.2e1 * (t171 ^ 2 - t276) * t159 * qJD(2), t195 * t275, -0.2e1 * t164 * t196, 0, -0.2e1 * pkin(1) * t159 * t250 - 0.2e1 * t113 * t263, -0.2e1 * pkin(1) * t226 + 0.2e1 * t112 * t263, 0.2e1 * t179 * t173, -0.2e1 * t116 * t173 - 0.2e1 * t179 * t88 (t167 * t196 - t171 * t194 + (-t171 * t184 + t276 * t249) * t164) * t275 (-t116 * t250 + t171 * t88) * t275, -0.2e1 * t200, 0.2e1 * t107 * t88 + 0.2e1 * t113 * t116 + 0.2e1 * (-t39 * t171 + t207 * t250) * t164, 0.2e1 * t107 * t173 + 0.2e1 * t113 * t179 - 0.2e1 * t217 * t267 - 0.2e1 * t261 * t38, 0.2e1 * t89 * t49, -0.2e1 * t255 * t49 - 0.2e1 * t277 * t89, 0.2e1 * t116 * t49 + 0.2e1 * t88 * t89, -0.2e1 * t116 * t277 - 0.2e1 * t255 * t88, t73, 0.2e1 * t16 * t116 + 0.2e1 * t255 * t37 + 0.2e1 * t277 * t68 + 0.2e1 * t31 * t88, 0.2e1 * t116 * t15 - 0.2e1 * t32 * t88 + 0.2e1 * t37 * t89 + 0.2e1 * t49 * t68, -0.2e1 * t57 * t19, 0.2e1 * t19 * t56 - 0.2e1 * t20 * t57, -0.2e1 * t116 * t19 + 0.2e1 * t57 * t88, -0.2e1 * t116 * t20 - 0.2e1 * t56 * t88, t73, 0.2e1 * t116 * t4 + 0.2e1 * t13 * t88 + 0.2e1 * t20 * t43 + 0.2e1 * t23 * t56, 0.2e1 * t116 * t3 - 0.2e1 * t14 * t88 - 0.2e1 * t19 * t43 + 0.2e1 * t23 * t57, -0.2e1 * t1 * t57 - 0.2e1 * t10 * t20 + 0.2e1 * t19 * t8 - 0.2e1 * t2 * t56, 0.2e1 * t1 * t8 + 0.2e1 * t10 * t2 + 0.2e1 * t28 * t9; 0, 0, 0, 0, 0, t216, -t217, 0, -t113, t112, 0.2e1 * t167 * t194 + (t163 * t246 + t167 * t184) * t164, -t116 * t244 + t170 * t173 + (-t176 - t88) * t167, t183 * t164 (t168 * t249 + t223) * t164, 0, -pkin(2) * t88 - t113 * t170 + t167 * t238 - t183 * t270, -pkin(2) * t173 + t113 * t167 + t170 * t238 - t217 * t268 - t223 * t270, t89 * t222 + (-t242 * t89 + t265) * t167 (-t89 * t166 - t205) * t244 + (t169 * t185 - t266 + (-t89 * t169 + (t110 + 0.2e1 * t139) * t166) * qJD(4)) * t167 (t116 * t245 - t49) * t170 + (qJD(3) * t89 - t187) * t167 (-t166 * t247 + t277) * t170 + (-qJD(3) * t255 - t188) * t167, t70, t103 * t88 + t72 * t116 + (-t16 + (pkin(9) * t255 + t68 * t166) * qJD(3)) * t170 + (pkin(9) * t277 + t31 * qJD(3) + t190) * t167, -t104 * t88 + t116 * t71 + (-t15 + (pkin(9) * t89 + t169 * t68) * qJD(3)) * t170 + (pkin(9) * t49 - qJD(3) * t32 - t189) * t167, -t115 * t19 - t57 * t59, t114 * t19 - t115 * t20 + t56 * t59 - t57 * t60, t115 * t88 - t116 * t59 + t157 * t57 + t170 * t19, -t114 * t88 - t116 * t60 - t157 * t56 + t170 * t20, t70, t114 * t23 + t116 * t22 + t13 * t157 + t132 * t20 - t170 * t4 + t43 * t60 + t53 * t88 + t56 * t99, t115 * t23 + t116 * t21 - t132 * t19 - t14 * t157 - t170 * t3 - t43 * t59 - t54 * t88 + t57 * t99, -t1 * t115 - t10 * t60 - t114 * t2 - t17 * t57 - t18 * t56 + t19 * t40 - t20 * t41 + t59 * t8, t1 * t40 + t10 * t18 + t17 * t8 + t2 * t41 + t28 * t42 + t84 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, -0.2e1 * t203, 0, 0, 0, t167 * t237, t170 * t237, -0.2e1 * t161 * t215 + 0.2e1 * t162 * t214, 0.2e1 * t161 * t204 + t199 * t279, 0.2e1 * t167 * t220 + 0.2e1 * t245 * t251, -0.2e1 * t166 * t203 + 0.2e1 * t167 * t218, t145, 0.2e1 * t103 * t157 - 0.2e1 * t72 * t170 + 0.2e1 * (t161 * t241 + t166 * t202) * pkin(9), -0.2e1 * t104 * t157 - 0.2e1 * t71 * t170 + 0.2e1 * (-t161 * t242 + t169 * t202) * pkin(9), -0.2e1 * t115 * t59, 0.2e1 * t114 * t59 - 0.2e1 * t115 * t60, 0.2e1 * t115 * t157 + 0.2e1 * t170 * t59, -0.2e1 * t114 * t157 + 0.2e1 * t170 * t60, t145, 0.2e1 * t114 * t99 + 0.2e1 * t132 * t60 + 0.2e1 * t157 * t53 - 0.2e1 * t170 * t22, 0.2e1 * t115 * t99 - 0.2e1 * t132 * t59 - 0.2e1 * t157 * t54 - 0.2e1 * t170 * t21, -0.2e1 * t114 * t18 - 0.2e1 * t115 * t17 + 0.2e1 * t40 * t59 - 0.2e1 * t41 * t60, 0.2e1 * t17 * t40 + 0.2e1 * t18 * t41 + 0.2e1 * t42 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, -t88, t217, t39, t38, t241 * t89 + t266, t166 * t185 + t265 + (-t205 + (-t89 + t231) * t166) * qJD(4), t188, -t187, 0, -pkin(3) * t277 - pkin(10) * t188 + t189, -pkin(3) * t49 + pkin(10) * t187 + t190, -t127 * t19 - t57 * t86, t126 * t19 - t127 * t20 + t56 * t86 - t57 * t87, -t116 * t86 + t127 * t88, -t116 * t87 - t126 * t88, 0, t116 * t63 + t126 * t23 + t155 * t20 + t233 * t56 + t43 * t87 + t88 * t91, t116 * t62 + t127 * t23 - t155 * t19 + t233 * t57 - t43 * t86 - t88 * t92, -t1 * t127 - t10 * t87 - t126 * t2 + t19 * t74 - t20 * t75 - t33 * t56 - t34 * t57 + t8 * t86, t1 * t74 + t10 * t33 + t106 * t9 + t2 * t75 + t28 * t76 + t34 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, -t157, 0, -t156, pkin(9) * t157, -t167 * t204 + t199, t215 * t279 - t244 * t252, -t218 + t225, t181, 0 (pkin(10) * t256 + (-pkin(3) * t169 + t269) * t167) * qJD(4) + (t166 * t193 - t151) * qJD(3) (pkin(9) * t257 + t166 * t192) * qJD(4) + (t169 * t193 + t235) * qJD(3), -t115 * t86 - t127 * t59, t114 * t86 - t115 * t87 + t126 * t59 - t127 * t60, t127 * t157 + t170 * t86, -t126 * t157 + t170 * t87, 0, t114 * t233 + t126 * t99 + t132 * t87 + t155 * t60 + t157 * t91 - t170 * t63, t115 * t233 + t127 * t99 - t132 * t86 - t155 * t59 - t157 * t92 - t170 * t62, -t114 * t33 - t115 * t34 - t126 * t18 - t127 * t17 + t40 * t86 - t41 * t87 + t59 * t74 - t60 * t75, t106 * t42 + t17 * t74 + t18 * t75 + t33 * t41 + t34 * t40 + t76 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t215, -0.2e1 * t204, 0, 0, 0, t166 * t236, t169 * t236, -0.2e1 * t127 * t86, 0.2e1 * t126 * t86 - 0.2e1 * t127 * t87, 0, 0, 0, 0.2e1 * t126 * t233 + 0.2e1 * t155 * t87, 0.2e1 * t127 * t233 - 0.2e1 * t155 * t86, -0.2e1 * t126 * t33 - 0.2e1 * t127 * t34 + 0.2e1 * t74 * t86 - 0.2e1 * t75 * t87, 0.2e1 * t106 * t76 + 0.2e1 * t33 * t75 + 0.2e1 * t34 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t277, t88, t16, t15, 0, 0, -t19, -t20, t88, t88 * t234 + (-t29 + (-t27 - t272) * t165) * qJD(5) + t213 (-t116 * t210 - t165 * t88) * pkin(4) + t3, t154 * t19 + (-t165 * t20 + (t165 * t57 - t273 * t56) * qJD(5)) * pkin(4), t1 * t154 + (t165 * t2 + (t10 * t273 - t165 * t8) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t221 + t222, -t280, t157, t72, t71, 0, 0, -t59, -t60, t157, t212 * t271 + (-t85 + (pkin(4) * t170 - t83) * t165) * qJD(5) + t209 (-t157 * t165 + t170 * t210) * pkin(4) + t21, t154 * t59 + (-t165 * t60 + (-t114 * t273 + t115 * t165) * qJD(5)) * pkin(4), t17 * t154 + (t165 * t18 + (-t165 * t40 + t273 * t41) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241, -t242, 0, -pkin(10) * t241, pkin(10) * t242, 0, 0, -t86, -t87, 0, t63, t62, t154 * t86 + (-t165 * t87 + (-t126 * t273 + t127 * t165) * qJD(5)) * pkin(4), t34 * t154 + (t165 * t33 + (-t165 * t74 + t273 * t75) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t232, -0.2e1 * t201, 0, 0.2e1 * (t234 - t154) * t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t20, t88, t4, t3, pkin(5) * t19, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, -t60, t157, t22, t21, pkin(5) * t59, t17 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t87, 0, t63, t62, pkin(5) * t86, t34 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, -t201, 0, -pkin(5) * t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
