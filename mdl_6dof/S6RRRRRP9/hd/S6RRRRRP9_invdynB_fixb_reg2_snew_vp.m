% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 06:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 06:12:39
% EndTime: 2019-05-08 06:14:19
% DurationCPUTime: 54.79s
% Computational Cost: add. (486424->958), mult. (1038047->1497), div. (0->0), fcn. (843684->12), ass. (0->718)
t1119 = sin(qJ(5));
t1118 = cos(pkin(6));
t1109 = qJD(1) * t1118 + qJD(2);
t1121 = sin(qJ(3));
t1126 = cos(qJ(3));
t1117 = sin(pkin(6));
t1122 = sin(qJ(2));
t1244 = t1117 * t1122;
t1223 = qJD(1) * t1244;
t1078 = t1109 * t1121 + t1126 * t1223;
t1234 = qJDD(1) * t1122;
t1127 = cos(qJ(2));
t1262 = qJD(1) * t1127;
t1085 = (qJD(2) * t1262 + t1234) * t1117;
t1108 = qJDD(1) * t1118 + qJDD(2);
t1208 = t1121 * t1085 - t1126 * t1108;
t1031 = -qJD(3) * t1078 - t1208;
t1030 = qJDD(4) - t1031;
t1029 = qJDD(5) + t1030;
t1243 = t1117 * t1127;
t1222 = qJD(1) * t1243;
t1102 = -qJD(3) + t1222;
t1120 = sin(qJ(4));
t1125 = cos(qJ(4));
t1049 = t1078 * t1120 + t1102 * t1125;
t1050 = t1078 * t1125 - t1102 * t1120;
t1124 = cos(qJ(5));
t1007 = t1124 * t1049 + t1050 * t1119;
t1009 = -t1049 * t1119 + t1050 * t1124;
t946 = t1009 * t1007;
t904 = t1029 - t946;
t1277 = t1119 * t904;
t1269 = t1124 * t904;
t1319 = t904 * pkin(5);
t1015 = t1050 * t1049;
t1315 = -t1015 + t1030;
t1321 = t1120 * t1315;
t1320 = t1125 * t1315;
t1076 = -t1126 * t1109 + t1121 * t1223;
t1071 = qJD(4) + t1076;
t1027 = t1071 * t1049;
t1032 = -t1076 * qJD(3) + t1126 * t1085 + t1121 * t1108;
t1105 = qJD(2) * t1223;
t1233 = qJDD(1) * t1127;
t1203 = t1117 * t1233 - t1105;
t1160 = -qJDD(3) + t1203;
t1213 = t1049 * qJD(4) - t1125 * t1032 + t1120 * t1160;
t936 = -t1027 + t1213;
t1210 = t1120 * t1032 + t1125 * t1160;
t1154 = qJD(4) * t1050 + t1210;
t868 = -t1007 * qJD(5) - t1119 * t1154 - t1124 * t1213;
t1067 = qJD(5) + t1071;
t973 = t1067 * t1007;
t1318 = -t973 + t868;
t1254 = t1076 * t1078;
t1135 = -t1160 - t1254;
t1317 = t1121 * t1135;
t1316 = t1126 * t1135;
t1060 = t1076 * t1102;
t1000 = t1060 + t1032;
t1093 = t1109 * t1222;
t1056 = t1093 + t1085;
t1019 = (t1076 * t1126 - t1078 * t1121) * t1102;
t1314 = t1122 * t1019 + t1127 * t1160;
t935 = t1213 + t1027;
t905 = t1029 + t946;
t1278 = t1119 * t905;
t1006 = t1009 ^ 2;
t1065 = t1067 ^ 2;
t956 = -t1006 - t1065;
t856 = t1124 * t956 - t1278;
t1270 = t1124 * t905;
t857 = -t1119 * t956 - t1270;
t788 = t1120 * t857 + t1125 * t856;
t1313 = -pkin(3) * t788 - pkin(4) * t856;
t1005 = t1007 ^ 2;
t925 = -t1065 - t1005;
t840 = t1119 * t925 + t1269;
t841 = t1124 * t925 - t1277;
t777 = t1120 * t841 + t1125 * t840;
t1312 = -pkin(3) * t777 - pkin(4) * t840;
t1212 = -t1119 * t1213 + t1124 * t1154;
t836 = (qJD(5) - t1067) * t1009 + t1212;
t937 = (qJD(4) - t1071) * t1050 + t1210;
t995 = (qJD(3) + t1102) * t1078 + t1208;
t1311 = t1049 ^ 2;
t1048 = t1050 ^ 2;
t1069 = t1071 ^ 2;
t1074 = t1076 ^ 2;
t1075 = t1078 ^ 2;
t1310 = t1102 ^ 2;
t1309 = t1109 ^ 2;
t1123 = sin(qJ(1));
t1128 = cos(qJ(1));
t835 = -t973 - t868;
t772 = -t1119 * t836 + t1124 * t835;
t774 = -t1119 * t835 - t1124 * t836;
t708 = -t1120 * t772 + t1125 * t774;
t895 = -t1005 - t1006;
t688 = t1121 * t895 + t1126 * t708;
t706 = t1120 * t774 + t1125 * t772;
t1194 = t1122 * t688 - t1127 * t706;
t687 = t1121 * t708 - t1126 * t895;
t604 = -t1117 * t687 + t1118 * t1194;
t636 = t1122 * t706 + t1127 * t688;
t576 = t1123 * t636 + t1128 * t604;
t1304 = pkin(7) * t576;
t778 = -t1120 * t840 + t1125 * t841;
t831 = (qJD(5) + t1067) * t1009 + t1212;
t732 = t1121 * t831 + t1126 * t778;
t1191 = t1122 * t732 - t1127 * t777;
t731 = t1121 * t778 - t1126 * t831;
t643 = -t1117 * t731 + t1118 * t1191;
t683 = t1122 * t777 + t1127 * t732;
t608 = t1123 * t683 + t1128 * t643;
t1303 = pkin(7) * t608;
t789 = -t1120 * t856 + t1125 * t857;
t738 = t1121 * t1318 + t1126 * t789;
t1190 = t1122 * t738 - t1127 * t788;
t737 = t1121 * t789 - t1126 * t1318;
t650 = -t1117 * t737 + t1118 * t1190;
t697 = t1122 * t788 + t1127 * t738;
t616 = t1123 * t697 + t1128 * t650;
t1302 = pkin(7) * t616;
t1301 = pkin(9) * t687;
t1300 = pkin(9) * t731;
t1299 = pkin(9) * t737;
t1298 = pkin(10) * t706;
t1297 = pkin(10) * t777;
t1296 = pkin(10) * t788;
t1295 = pkin(11) * t772;
t1294 = pkin(11) * t840;
t1293 = pkin(11) * t856;
t1292 = pkin(2) * t1122;
t1291 = pkin(2) * t1127;
t1290 = pkin(3) * t1121;
t1289 = pkin(8) * t1117;
t1288 = pkin(8) * t1118;
t1287 = t1118 * g(3);
t1286 = pkin(1) * t604 + t636 * t1289;
t1285 = pkin(1) * t643 + t683 * t1289;
t1284 = pkin(1) * t650 + t697 * t1289;
t1283 = -pkin(2) * t706 + pkin(9) * t688;
t1282 = -pkin(2) * t777 + pkin(9) * t732;
t1281 = -pkin(2) * t788 + pkin(9) * t738;
t1039 = pkin(3) * t1076 - pkin(10) * t1078;
t1103 = t1123 * g(1) - t1128 * g(2);
t1129 = qJD(1) ^ 2;
t1134 = qJDD(1) * pkin(1) + t1129 * t1289 + t1103;
t1263 = qJD(1) * t1122;
t1148 = t1109 * t1263 - t1233;
t1131 = t1105 * pkin(2) - t1085 * pkin(9) - t1287 + (-pkin(9) * t1109 * t1262 + pkin(2) * t1148 - t1134) * t1117;
t1104 = g(1) * t1128 + g(2) * t1123;
t1081 = -pkin(1) * t1129 + qJDD(1) * t1289 - t1104;
t1207 = -pkin(9) * t1122 - t1291;
t1264 = qJD(1) * t1117;
t1084 = t1207 * t1264;
t1133 = t1118 * t1134;
t1132 = -g(3) * t1244 + t1122 * t1133;
t987 = t1108 * pkin(9) - t1309 * pkin(2) + (t1084 * t1264 + t1081) * t1127 + t1132;
t922 = t1121 * t1131 + t1126 * t987;
t882 = -pkin(3) * t1310 - pkin(10) * t1160 - t1076 * t1039 + t922;
t1209 = t1122 * t1081 - t1127 * t1133;
t986 = -t1108 * pkin(2) - t1309 * pkin(9) + (g(3) * t1127 + t1084 * t1263) * t1117 + t1209;
t886 = -t1000 * pkin(10) + (-t1078 * t1102 - t1031) * pkin(3) + t986;
t803 = t1120 * t882 - t1125 * t886;
t769 = t1315 * pkin(4) + pkin(11) * t936 - t803;
t1021 = pkin(4) * t1071 - pkin(11) * t1050;
t804 = t1120 * t886 + t1125 * t882;
t782 = -pkin(4) * t1311 - pkin(11) * t1154 - t1071 * t1021 + t804;
t711 = t1119 * t782 - t1124 * t769;
t712 = t1119 * t769 + t1124 * t782;
t1232 = t868 * qJ(6) + t711;
t1150 = -qJ(6) * t973 - t1232;
t1261 = qJD(6) * t1009;
t672 = t1150 - 0.2e1 * t1261 + t1319;
t1280 = t1119 * t672;
t921 = t1121 * t987 - t1126 * t1131;
t881 = t1160 * pkin(3) - t1310 * pkin(10) + t1039 * t1078 + t921;
t807 = t1154 * pkin(4) - t1311 * pkin(11) + t1021 * t1050 + t881;
t1279 = t1119 * t807;
t644 = t1119 * t712 - t1124 * t711;
t1276 = t1120 * t644;
t1275 = t1120 * t881;
t954 = t1015 + t1030;
t1274 = t1120 * t954;
t1273 = t1121 * t986;
t1272 = t1124 * t672;
t1271 = t1124 * t807;
t1268 = t1125 * t644;
t1267 = t1125 * t881;
t1266 = t1125 * t954;
t1265 = t1126 * t986;
t1024 = t1160 - t1254;
t1260 = t1024 * t1121;
t1259 = t1024 * t1126;
t1258 = t1067 * t1119;
t1257 = t1067 * t1124;
t1256 = t1071 * t1120;
t1255 = t1071 * t1125;
t1239 = t1127 * t1129;
t1114 = t1117 ^ 2;
t1246 = t1114 * t1122;
t1101 = t1239 * t1246;
t1082 = t1101 + t1108;
t1253 = t1082 * t1122;
t1252 = t1082 * t1127;
t1083 = -t1101 + t1108;
t1251 = t1083 * t1122;
t1250 = t1083 * t1127;
t1249 = t1102 * t1121;
t1248 = t1102 * t1126;
t1247 = t1108 * t1117;
t1245 = t1114 * t1129;
t1062 = t1117 * t1134 + t1287;
t1241 = t1122 * t1062;
t1240 = t1127 * t1062;
t1115 = t1122 ^ 2;
t1116 = t1127 ^ 2;
t1235 = t1115 + t1116;
t1231 = -pkin(3) * t1126 - pkin(2);
t603 = t1117 * t1194 + t1118 * t687;
t1230 = -pkin(1) * t603 + t636 * t1288;
t642 = t1117 * t1191 + t1118 * t731;
t1229 = -pkin(1) * t642 + t683 * t1288;
t649 = t1117 * t1190 + t1118 * t737;
t1228 = -pkin(1) * t649 + t697 * t1288;
t1227 = -pkin(4) * t895 + pkin(11) * t774;
t1226 = -pkin(4) * t831 + pkin(11) * t841;
t1225 = -pkin(4) * t1318 + pkin(11) * t857;
t1224 = t1109 * t1264;
t1221 = t1121 * t946;
t1220 = t1126 * t946;
t1219 = t1121 * t1015;
t1218 = t1126 * t1015;
t1217 = t1122 * t1254;
t1216 = t1127 * t1254;
t1215 = t1115 * t1245;
t1214 = t1116 * t1245;
t645 = t1119 * t711 + t1124 * t712;
t846 = t1121 * t921 + t1126 * t922;
t1064 = -t1103 * t1123 - t1128 * t1104;
t669 = -pkin(3) * t706 - pkin(4) * t772;
t1100 = qJDD(1) * t1128 - t1123 * t1129;
t1206 = -pkin(7) * t1100 - g(3) * t1123;
t1070 = -t1215 - t1309;
t1038 = -t1070 * t1122 - t1250;
t1205 = pkin(8) * t1038 - t1241;
t1089 = -t1214 - t1309;
t1045 = t1089 * t1127 - t1253;
t1204 = pkin(8) * t1045 + t1240;
t740 = t1120 * t804 - t1125 * t803;
t741 = t1120 * t803 + t1125 * t804;
t845 = t1121 * t922 - t1126 * t921;
t867 = -qJD(5) * t1009 - t1212;
t970 = pkin(5) * t1067 - qJ(6) * t1009;
t1149 = t867 * qJ(6) - 0.2e1 * qJD(6) * t1007 - t1067 * t970 + t712;
t655 = -qJ(6) * t836 + (-t1005 - t895) * pkin(5) + t1149;
t1002 = 0.2e1 * t1261;
t662 = t1002 + (-t835 + t973) * qJ(6) - t1319 + t1232;
t591 = t1119 * t662 + t1124 * t655 + t1227;
t595 = -t1119 * t655 + t1124 * t662 - t1295;
t559 = -t1120 * t591 + t1125 * t595 - t1298;
t647 = -pkin(5) * t835 + t669;
t551 = -t1121 * t647 + t1126 * t559 - t1301;
t1153 = -pkin(2) * t687 + pkin(3) * t895 - pkin(10) * t708;
t555 = -t1120 * t595 - t1125 * t591 + t1153;
t1202 = t1122 * t551 + t1127 * t555;
t628 = t1227 + t645;
t629 = -t644 - t1295;
t572 = -t1120 * t628 + t1125 * t629 - t1298;
t560 = -t1121 * t669 + t1126 * t572 - t1301;
t564 = -t1120 * t629 - t1125 * t628 + t1153;
t1201 = t1122 * t560 + t1127 * t564;
t739 = -t867 * pkin(5) - t1005 * qJ(6) + t1009 * t970 + qJDD(6) + t807;
t700 = -pkin(5) * t831 + qJ(6) * t925 - t739;
t664 = -qJ(6) * t1277 + t1124 * t700 + t1226;
t673 = -qJ(6) * t1269 - t1119 * t700 - t1294;
t600 = -t1120 * t664 + t1125 * t673 - t1297;
t633 = t1002 - t1150 + t1312 - 0.2e1 * t1319;
t567 = -t1121 * t633 + t1126 * t600 - t1300;
t1152 = -pkin(2) * t731 + pkin(3) * t831 - pkin(10) * t778;
t584 = -t1120 * t673 - t1125 * t664 + t1152;
t1200 = t1122 * t567 + t1127 * t584;
t677 = -pkin(5) * t1005 + t1149;
t621 = t1119 * t677 + t1272;
t622 = t1124 * t677 - t1280;
t579 = -t1120 * t621 + t1125 * t622;
t570 = t1121 * t739 + t1126 * t579;
t578 = t1120 * t622 + t1125 * t621;
t1199 = t1122 * t570 - t1127 * t578;
t729 = -qJ(6) * t956 + t739;
t797 = -pkin(5) * t1318 - qJ(6) * t905;
t666 = t1119 * t729 + t1124 * t797 + t1225;
t678 = -t1119 * t797 + t1124 * t729 - t1293;
t601 = -t1120 * t666 + t1125 * t678 - t1296;
t639 = (-t1005 - t956) * pkin(5) + t1149 + t1313;
t573 = -t1121 * t639 + t1126 * t601 - t1299;
t1151 = -pkin(2) * t737 + pkin(3) * t1318 - pkin(10) * t789;
t587 = -t1120 * t678 - t1125 * t666 + t1151;
t1198 = t1122 * t573 + t1127 * t587;
t722 = t1226 - t1271;
t758 = t1279 - t1294;
t646 = -t1120 * t722 + t1125 * t758 - t1297;
t657 = t711 + t1312;
t586 = -t1121 * t657 + t1126 * t646 - t1300;
t619 = -t1120 * t758 - t1125 * t722 + t1152;
t1197 = t1122 * t586 + t1127 * t619;
t594 = t1125 * t645 - t1276;
t589 = t1121 * t807 + t1126 * t594;
t593 = t1120 * t645 + t1268;
t1196 = t1122 * t589 - t1127 * t593;
t728 = t1225 + t1279;
t760 = t1271 - t1293;
t656 = -t1120 * t728 + t1125 * t760 - t1296;
t665 = t712 + t1313;
t592 = -t1121 * t665 + t1126 * t656 - t1299;
t627 = -t1120 * t760 - t1125 * t728 + t1151;
t1195 = t1122 * t592 + t1127 * t627;
t771 = -t1119 * t831 + t1124 * t1318;
t773 = -t1119 * t1318 - t1124 * t831;
t707 = -t1120 * t771 + t1125 * t773;
t945 = -t1006 + t1005;
t694 = -t1121 * t945 + t1126 * t707;
t705 = -t1120 * t773 - t1125 * t771;
t1193 = t1122 * t694 + t1127 * t705;
t720 = t1121 * t881 + t1126 * t741;
t1192 = t1122 * t720 - t1127 * t740;
t972 = -t1006 + t1065;
t860 = t1124 * t972 + t1277;
t862 = -t1119 * t972 + t1269;
t794 = -t1120 * t860 + t1125 * t862;
t745 = -t1121 * t835 + t1126 * t794;
t792 = -t1120 * t862 - t1125 * t860;
t1189 = t1122 * t745 + t1127 * t792;
t971 = t1005 - t1065;
t861 = t1119 * t971 + t1270;
t863 = t1124 * t971 - t1278;
t795 = -t1120 * t861 + t1125 * t863;
t746 = -t1121 * t836 + t1126 * t795;
t793 = -t1120 * t863 - t1125 * t861;
t1188 = t1122 * t746 + t1127 * t793;
t825 = t1007 * t1258 + t1124 * t867;
t826 = t1007 * t1257 - t1119 * t867;
t765 = -t1120 * t825 + t1125 * t826;
t752 = t1126 * t765 - t1221;
t763 = -t1120 * t826 - t1125 * t825;
t1187 = t1122 * t752 + t1127 * t763;
t827 = t1009 * t1257 + t1119 * t868;
t828 = -t1009 * t1258 + t1124 * t868;
t766 = -t1120 * t827 + t1125 * t828;
t753 = t1126 * t766 + t1221;
t764 = -t1120 * t828 - t1125 * t827;
t1186 = t1122 * t753 + t1127 * t764;
t908 = (-t1007 * t1119 - t1009 * t1124) * t1067;
t909 = (-t1007 * t1124 + t1009 * t1119) * t1067;
t824 = -t1120 * t908 + t1125 * t909;
t814 = t1029 * t1121 + t1126 * t824;
t823 = -t1120 * t909 - t1125 * t908;
t1185 = t1122 * t814 + t1127 * t823;
t854 = -t1120 * t936 - t1125 * t937;
t966 = t1048 + t1311;
t818 = -t1121 * t966 + t1126 * t854;
t852 = -t1120 * t937 + t1125 * t936;
t1184 = t1122 * t818 - t1127 * t852;
t1014 = -t1048 + t1311;
t932 = (-qJD(4) - t1071) * t1050 - t1210;
t853 = t1120 * t935 + t1125 * t932;
t822 = -t1014 * t1121 + t1126 * t853;
t851 = -t1120 * t932 + t1125 * t935;
t1183 = t1122 * t822 + t1127 * t851;
t979 = -t1069 - t1311;
t899 = t1125 * t979 - t1321;
t838 = -t1121 * t932 + t1126 * t899;
t898 = t1120 * t979 + t1320;
t1182 = t1122 * t838 - t1127 * t898;
t1003 = -t1048 - t1069;
t903 = -t1003 * t1120 - t1266;
t844 = -t1121 * t935 + t1126 * t903;
t902 = t1003 * t1125 - t1274;
t1181 = t1122 * t844 - t1127 * t902;
t1180 = t1122 * t846 - t1127 * t986;
t1023 = -t1048 + t1069;
t918 = -t1023 * t1120 + t1320;
t849 = -t1121 * t936 + t1126 * t918;
t916 = -t1023 * t1125 - t1321;
t1179 = t1122 * t849 + t1127 * t916;
t1022 = -t1069 + t1311;
t919 = t1022 * t1125 - t1274;
t850 = -t1121 * t937 + t1126 * t919;
t917 = -t1022 * t1120 - t1266;
t1178 = t1122 * t850 + t1127 * t917;
t929 = t1049 * t1255 + t1120 * t1154;
t889 = t1126 * t929 - t1219;
t928 = -t1049 * t1256 + t1125 * t1154;
t1177 = t1122 * t889 + t1127 * t928;
t931 = -t1050 * t1256 - t1125 * t1213;
t890 = t1126 * t931 + t1219;
t930 = -t1050 * t1255 + t1120 * t1213;
t1176 = t1122 * t890 + t1127 * t930;
t960 = (-t1049 * t1125 + t1050 * t1120) * t1071;
t927 = t1030 * t1121 + t1126 * t960;
t959 = (t1049 * t1120 + t1050 * t1125) * t1071;
t1175 = t1122 * t927 + t1127 * t959;
t1035 = -t1310 - t1074;
t963 = t1035 * t1126 - t1317;
t996 = (-qJD(3) + t1102) * t1078 - t1208;
t1174 = t1122 * t963 + t1127 * t996;
t1041 = -t1075 - t1310;
t969 = -t1041 * t1121 + t1259;
t1173 = -t1000 * t1127 + t1122 * t969;
t1054 = -t1075 + t1310;
t977 = -t1054 * t1121 + t1316;
t999 = t1060 - t1032;
t1172 = t1122 * t977 + t1127 * t999;
t1053 = t1074 - t1310;
t978 = t1053 * t1126 + t1260;
t1171 = t1122 * t978 + t1127 * t995;
t1020 = t1074 + t1075;
t941 = -t1121 * t999 - t1126 * t995;
t1170 = t1020 * t1127 + t1122 * t941;
t1040 = -t1075 + t1074;
t940 = -t1000 * t1121 + t1126 * t996;
t1169 = t1040 * t1127 + t1122 * t940;
t1168 = qJD(1) * t1109 - t1118 * t1129;
t1036 = g(3) * t1243 + t1209;
t1037 = t1127 * t1081 + t1132;
t1167 = -t1127 * t1036 + t1122 * t1037;
t967 = t1036 * t1122 + t1037 * t1127;
t1092 = t1109 * t1223;
t1059 = -t1092 + t1203;
t1166 = t1056 * t1127 + t1059 * t1122;
t1057 = -t1093 + t1085;
t1058 = t1092 + t1203;
t1165 = -t1057 * t1127 + t1058 * t1122;
t1164 = t1070 * t1127 - t1251;
t1087 = -t1215 + t1309;
t1163 = t1087 * t1127 + t1253;
t1162 = t1089 * t1122 + t1252;
t1088 = t1214 - t1309;
t1161 = t1088 * t1122 + t1250;
t1063 = t1103 * t1128 - t1104 * t1123;
t1159 = (-t1117 * t603 - t1118 * t604) * pkin(8);
t1158 = (-t1117 * t642 - t1118 * t643) * pkin(8);
t1157 = (-t1117 * t649 - t1118 * t650) * pkin(8);
t990 = -t1031 * t1121 - t1076 * t1248;
t1156 = t1122 * t990 + t1216;
t992 = t1032 * t1126 + t1078 * t1249;
t1155 = t1122 * t992 - t1216;
t640 = -pkin(5) * t739 + qJ(6) * t677;
t566 = -pkin(4) * t739 + pkin(11) * t622 - qJ(6) * t1280 + t1124 * t640;
t571 = -pkin(11) * t621 - qJ(6) * t1272 - t1119 * t640;
t539 = -pkin(10) * t578 - t1120 * t566 + t1125 * t571;
t558 = -pkin(3) * t578 - pkin(4) * t621 - pkin(5) * t672;
t569 = t1121 * t579 - t1126 * t739;
t527 = -pkin(9) * t569 - t1121 * t558 + t1126 * t539;
t532 = -pkin(2) * t569 + pkin(3) * t739 - pkin(10) * t579 - t1120 * t571 - t1125 * t566;
t552 = t1122 * t578 + t1127 * t570;
t1147 = pkin(8) * t552 + t1122 * t527 + t1127 * t532;
t632 = -pkin(4) * t807 + pkin(11) * t645;
t563 = -pkin(10) * t593 - pkin(11) * t1268 - t1120 * t632;
t574 = -pkin(3) * t593 - pkin(4) * t644;
t588 = t1121 * t594 - t1126 * t807;
t540 = -pkin(9) * t588 - t1121 * t574 + t1126 * t563;
t548 = -pkin(2) * t588 + pkin(3) * t807 - pkin(10) * t594 + pkin(11) * t1276 - t1125 * t632;
t562 = t1122 * t593 + t1127 * t589;
t1146 = pkin(8) * t562 + t1122 * t540 + t1127 * t548;
t719 = t1121 * t741 - t1126 * t881;
t637 = -pkin(9) * t719 + (-pkin(10) * t1126 + t1290) * t740;
t663 = -pkin(2) * t719 + pkin(3) * t881 - pkin(10) * t741;
t671 = t1122 * t740 + t1127 * t720;
t1145 = pkin(8) * t671 + t1122 * t637 + t1127 * t663;
t716 = -pkin(10) * t852 - t740;
t817 = t1121 * t854 + t1126 * t966;
t676 = -pkin(9) * t817 + t1126 * t716 + t1290 * t852;
t684 = -pkin(2) * t817 - pkin(3) * t966 - pkin(10) * t854 - t741;
t775 = t1122 * t852 + t1127 * t818;
t1144 = pkin(8) * t775 + t1122 * t676 + t1127 * t684;
t783 = -pkin(3) * t898 + t803;
t808 = -pkin(10) * t898 + t1275;
t837 = t1121 * t899 + t1126 * t932;
t703 = -pkin(9) * t837 - t1121 * t783 + t1126 * t808;
t742 = -pkin(2) * t837 - pkin(3) * t932 - pkin(10) * t899 + t1267;
t796 = t1122 * t898 + t1127 * t838;
t1143 = pkin(8) * t796 + t1122 * t703 + t1127 * t742;
t784 = -pkin(3) * t902 + t804;
t812 = -pkin(10) * t902 + t1267;
t843 = t1121 * t903 + t1126 * t935;
t709 = -pkin(9) * t843 - t1121 * t784 + t1126 * t812;
t747 = -pkin(2) * t843 - pkin(3) * t935 - pkin(10) * t903 - t1275;
t799 = t1122 * t902 + t1127 * t844;
t1142 = pkin(8) * t799 + t1122 * t709 + t1127 * t747;
t962 = t1035 * t1121 + t1316;
t872 = -pkin(2) * t962 + t921;
t907 = -pkin(9) * t962 + t1273;
t912 = -t1122 * t996 + t1127 * t963;
t1141 = pkin(8) * t912 + t1122 * t907 + t1127 * t872;
t968 = t1041 * t1126 + t1260;
t875 = -pkin(2) * t968 + t922;
t913 = -pkin(9) * t968 + t1265;
t914 = t1000 * t1122 + t1127 * t969;
t1140 = pkin(8) * t914 + t1122 * t913 + t1127 * t875;
t1016 = t1057 * t1122 + t1058 * t1127;
t1139 = pkin(8) * t1016 + t967;
t939 = -t1121 * t995 + t1126 * t999;
t802 = -pkin(9) * t939 - t845;
t894 = -t1020 * t1122 + t1127 * t941;
t1137 = pkin(8) * t894 + t1122 * t802 - t1291 * t939;
t815 = t1122 * t986 + t1127 * t846;
t1136 = pkin(8) * t815 + t1207 * t845;
t1113 = t1117 * t1114;
t1099 = qJDD(1) * t1123 + t1128 * t1129;
t1091 = t1235 * t1245;
t1090 = (t1115 - t1116) * t1245;
t1086 = -pkin(7) * t1099 + g(3) * t1128;
t1061 = t1235 * t1224;
t1055 = (t1234 + (qJD(2) + t1109) * t1262) * t1117;
t1052 = t1085 * t1127 - t1115 * t1224;
t1051 = -t1116 * t1224 - t1122 * t1203;
t1044 = t1088 * t1127 - t1251;
t1043 = -t1087 * t1122 + t1252;
t1034 = (t1056 * t1118 + t1113 * t1239) * t1122;
t1033 = (-t1113 * t1129 * t1122 + (-t1117 * t1148 - t1105) * t1118) * t1127;
t1018 = (t1076 * t1121 + t1078 * t1126) * t1102;
t1017 = -t1056 * t1122 + t1059 * t1127;
t1013 = t1117 * t1059 + t1118 * t1162;
t1012 = -t1117 * t1058 + t1118 * t1161;
t1011 = -t1117 * t1057 + t1118 * t1163;
t1010 = -t1118 * t1059 + t1117 * t1162;
t994 = -t1117 * t1055 + t1118 * t1164;
t993 = t1118 * t1055 + t1117 * t1164;
t991 = t1032 * t1121 - t1078 * t1248;
t989 = t1031 * t1126 - t1076 * t1249;
t988 = t1127 * t1019 - t1122 * t1160;
t985 = -t1117 * t1090 + t1118 * t1166;
t984 = t1117 * t1091 + t1118 * t1165;
t983 = -t1118 * t1091 + t1117 * t1165;
t976 = t1053 * t1121 - t1259;
t975 = t1054 * t1126 + t1317;
t958 = -t1013 * t1123 + t1045 * t1128;
t957 = t1013 * t1128 + t1045 * t1123;
t952 = t1127 * t992 + t1217;
t951 = t1127 * t990 - t1217;
t950 = t1038 * t1128 - t1123 * t994;
t949 = t1038 * t1123 + t1128 * t994;
t948 = t1117 * t1062 + t1118 * t1167;
t947 = -t1118 * t1062 + t1117 * t1167;
t944 = -t1117 * t1018 + t1118 * t1314;
t943 = t1016 * t1128 - t1123 * t984;
t942 = t1016 * t1123 + t1128 * t984;
t938 = t1000 * t1126 + t1121 * t996;
t926 = -t1030 * t1126 + t1121 * t960;
t924 = -t1122 * t995 + t1127 * t978;
t923 = -t1122 * t999 + t1127 * t977;
t915 = -t1241 + (-t1010 * t1117 - t1013 * t1118) * pkin(8);
t911 = -t1240 + (-t1117 * t993 - t1118 * t994) * pkin(8);
t910 = -pkin(1) * t1010 + t1117 * t1036 + t1118 * t1204;
t901 = -t1040 * t1122 + t1127 * t940;
t900 = -pkin(1) * t993 + t1117 * t1037 + t1118 * t1205;
t897 = -t1117 * t991 + t1118 * t1155;
t896 = -t1117 * t989 + t1118 * t1156;
t893 = -pkin(1) * t947 + t1288 * t967;
t892 = -t1123 * t948 + t1128 * t967;
t891 = t1123 * t967 + t1128 * t948;
t888 = t1121 * t931 - t1218;
t887 = t1121 * t929 + t1218;
t883 = -pkin(1) * t983 + t1118 * t1139;
t880 = -pkin(2) * t1000 + pkin(9) * t969 + t1273;
t878 = -t1117 * t976 + t1118 * t1171;
t877 = -t1117 * t975 + t1118 * t1172;
t876 = (-t1117 * t947 - t1118 * t948) * pkin(8);
t874 = pkin(2) * t996 + pkin(9) * t963 - t1265;
t873 = (-t1117 * t983 - t1118 * t984) * pkin(8) - t1167;
t871 = -t1117 * t968 + t1118 * t1173;
t870 = t1117 * t1173 + t1118 * t968;
t869 = -t1122 * t959 + t1127 * t927;
t859 = -t1117 * t962 + t1118 * t1174;
t858 = t1117 * t1174 + t1118 * t962;
t848 = t1121 * t919 + t1126 * t937;
t847 = t1121 * t918 + t1126 * t936;
t842 = -t1117 * t938 + t1118 * t1169;
t830 = -t1117 * t939 + t1118 * t1170;
t829 = t1117 * t1170 + t1118 * t939;
t821 = t1014 * t1126 + t1121 * t853;
t820 = -t1122 * t930 + t1127 * t890;
t819 = -t1122 * t928 + t1127 * t889;
t816 = -pkin(2) * t986 + pkin(9) * t846;
t813 = -t1029 * t1126 + t1121 * t824;
t811 = -t1117 * t926 + t1118 * t1175;
t810 = -t1123 * t871 + t1128 * t914;
t809 = t1123 * t914 + t1128 * t871;
t806 = -t1123 * t859 + t1128 * t912;
t805 = t1123 * t912 + t1128 * t859;
t801 = -t1122 * t917 + t1127 * t850;
t800 = -t1122 * t916 + t1127 * t849;
t798 = pkin(2) * t1020 + pkin(9) * t941 + t846;
t791 = -t1123 * t830 + t1128 * t894;
t790 = t1123 * t894 + t1128 * t830;
t786 = -t1117 * t888 + t1118 * t1176;
t785 = -t1117 * t887 + t1118 * t1177;
t779 = -t1122 * t851 + t1127 * t822;
t762 = -t1117 * t845 + t1118 * t1180;
t761 = t1117 * t1180 + t1118 * t845;
t759 = -t1122 * t823 + t1127 * t814;
t757 = -t1117 * t848 + t1118 * t1178;
t756 = -t1117 * t847 + t1118 * t1179;
t755 = -t1117 * t843 + t1118 * t1181;
t754 = t1117 * t1181 + t1118 * t843;
t751 = t1121 * t766 - t1220;
t750 = t1121 * t765 + t1220;
t749 = -t1117 * t837 + t1118 * t1182;
t748 = t1117 * t1182 + t1118 * t837;
t744 = t1121 * t795 + t1126 * t836;
t743 = t1121 * t794 + t1126 * t835;
t735 = -t1122 * t875 + t1127 * t913 + (-t1117 * t870 - t1118 * t871) * pkin(8);
t734 = -t1122 * t872 + t1127 * t907 + (-t1117 * t858 - t1118 * t859) * pkin(8);
t733 = -t1117 * t821 + t1118 * t1183;
t727 = -pkin(1) * t870 - t1117 * t880 + t1118 * t1140;
t726 = -t1117 * t817 + t1118 * t1184;
t725 = t1117 * t1184 + t1118 * t817;
t724 = -t1123 * t762 + t1128 * t815;
t723 = t1123 * t815 + t1128 * t762;
t721 = -pkin(1) * t858 - t1117 * t874 + t1118 * t1141;
t718 = -t1117 * t813 + t1118 * t1185;
t717 = t1117 * t1185 + t1118 * t813;
t715 = t939 * t1292 + t1127 * t802 + (-t1117 * t829 - t1118 * t830) * pkin(8);
t714 = -t1123 * t755 + t1128 * t799;
t713 = t1123 * t799 + t1128 * t755;
t702 = -t1123 * t749 + t1128 * t796;
t701 = t1123 * t796 + t1128 * t749;
t699 = -t1122 * t793 + t1127 * t746;
t698 = -t1122 * t792 + t1127 * t745;
t693 = t1121 * t707 + t1126 * t945;
t692 = -pkin(2) * t902 + pkin(9) * t844 + t1121 * t812 + t1126 * t784;
t691 = -t1122 * t764 + t1127 * t753;
t690 = -t1122 * t763 + t1127 * t752;
t689 = -pkin(2) * t898 + pkin(9) * t838 + t1121 * t808 + t1126 * t783;
t685 = -pkin(1) * t829 - t1117 * t798 + t1118 * t1137;
t680 = -t1123 * t726 + t1128 * t775;
t679 = t1123 * t775 + t1128 * t726;
t675 = -t1123 * t718 + t1128 * t759;
t674 = t1123 * t759 + t1128 * t718;
t670 = (-pkin(9) * t1127 + t1292) * t845 + (-t1117 * t761 - t1118 * t762) * pkin(8);
t668 = -pkin(1) * t761 - t1117 * t816 + t1118 * t1136;
t667 = pkin(9) * t818 + t1121 * t716 + t1231 * t852;
t661 = -t1117 * t744 + t1118 * t1188;
t660 = -t1117 * t743 + t1118 * t1189;
t659 = t1117 * t1188 + t1118 * t744;
t658 = t1117 * t1189 + t1118 * t743;
t654 = -t1117 * t751 + t1118 * t1186;
t653 = -t1117 * t750 + t1118 * t1187;
t652 = t1117 * t1186 + t1118 * t751;
t651 = t1117 * t1187 + t1118 * t750;
t638 = -t1122 * t705 + t1127 * t694;
t631 = -t1117 * t719 + t1118 * t1192;
t630 = t1117 * t1192 + t1118 * t719;
t626 = -t1123 * t661 + t1128 * t699;
t625 = -t1123 * t660 + t1128 * t698;
t624 = t1123 * t699 + t1128 * t661;
t623 = t1123 * t698 + t1128 * t660;
t620 = pkin(9) * t720 + (-pkin(10) * t1121 + t1231) * t740;
t618 = -t1122 * t747 + t1127 * t709 + (-t1117 * t754 - t1118 * t755) * pkin(8);
t617 = -t1123 * t650 + t1128 * t697;
t615 = pkin(7) * t617;
t614 = -t1123 * t654 + t1128 * t691;
t613 = -t1123 * t653 + t1128 * t690;
t612 = t1123 * t691 + t1128 * t654;
t611 = t1123 * t690 + t1128 * t653;
t610 = -t1122 * t742 + t1127 * t703 + (-t1117 * t748 - t1118 * t749) * pkin(8);
t609 = -t1123 * t643 + t1128 * t683;
t607 = pkin(7) * t609;
t606 = -t1117 * t693 + t1118 * t1193;
t605 = t1117 * t1193 + t1118 * t693;
t599 = -pkin(1) * t754 - t1117 * t692 + t1118 * t1142;
t598 = -t1123 * t631 + t1128 * t671;
t597 = t1123 * t671 + t1128 * t631;
t596 = -pkin(1) * t748 - t1117 * t689 + t1118 * t1143;
t590 = -t1122 * t684 + t1127 * t676 + (-t1117 * t725 - t1118 * t726) * pkin(8);
t585 = t1121 * t656 + t1126 * t665 + t1281;
t583 = t1121 * t646 + t1126 * t657 + t1282;
t582 = -t1123 * t606 + t1128 * t638;
t581 = t1123 * t638 + t1128 * t606;
t580 = -pkin(1) * t725 - t1117 * t667 + t1118 * t1144;
t577 = -t1123 * t604 + t1128 * t636;
t575 = pkin(7) * t577;
t568 = t1121 * t601 + t1126 * t639 + t1281;
t565 = t1121 * t600 + t1126 * t633 + t1282;
t561 = -t1122 * t663 + t1127 * t637 + (-t1117 * t630 - t1118 * t631) * pkin(8);
t557 = t1121 * t572 + t1126 * t669 + t1283;
t556 = -t1122 * t627 + t1127 * t592 + t1157;
t554 = -pkin(1) * t630 - t1117 * t620 + t1118 * t1145;
t553 = -t1122 * t619 + t1127 * t586 + t1158;
t550 = -t1117 * t588 + t1118 * t1196;
t549 = t1117 * t1196 + t1118 * t588;
t547 = t1121 * t559 + t1126 * t647 + t1283;
t546 = -t1122 * t587 + t1127 * t573 + t1157;
t545 = -t1117 * t585 + t1118 * t1195 + t1228;
t544 = -t1122 * t584 + t1127 * t567 + t1158;
t543 = -t1117 * t583 + t1118 * t1197 + t1229;
t542 = -t1117 * t569 + t1118 * t1199;
t541 = t1117 * t1199 + t1118 * t569;
t538 = -t1117 * t568 + t1118 * t1198 + t1228;
t537 = -t1123 * t550 + t1128 * t562;
t536 = t1123 * t562 + t1128 * t550;
t535 = -t1117 * t565 + t1118 * t1200 + t1229;
t534 = -pkin(2) * t593 + pkin(9) * t589 + t1121 * t563 + t1126 * t574;
t533 = -t1122 * t564 + t1127 * t560 + t1159;
t531 = -t1122 * t555 + t1127 * t551 + t1159;
t530 = -t1123 * t542 + t1128 * t552;
t529 = t1123 * t552 + t1128 * t542;
t528 = -t1117 * t557 + t1118 * t1201 + t1230;
t526 = -pkin(2) * t578 + pkin(9) * t570 + t1121 * t539 + t1126 * t558;
t525 = -t1117 * t547 + t1118 * t1202 + t1230;
t524 = -t1122 * t548 + t1127 * t540 + (-t1117 * t549 - t1118 * t550) * pkin(8);
t523 = -pkin(1) * t549 - t1117 * t534 + t1118 * t1146;
t522 = -t1122 * t532 + t1127 * t527 + (-t1117 * t541 - t1118 * t542) * pkin(8);
t521 = -pkin(1) * t541 - t1117 * t526 + t1118 * t1147;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1099, -t1100, 0, t1064, 0, 0, 0, 0, 0, 0, t958, t950, t943, t892, 0, 0, 0, 0, 0, 0, t806, t810, t791, t724, 0, 0, 0, 0, 0, 0, t702, t714, t680, t598, 0, 0, 0, 0, 0, 0, t609, t617, t577, t537, 0, 0, 0, 0, 0, 0, t609, t617, t577, t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1100, -t1099, 0, t1063, 0, 0, 0, 0, 0, 0, t957, t949, t942, t891, 0, 0, 0, 0, 0, 0, t805, t809, t790, t723, 0, 0, 0, 0, 0, 0, t701, t713, t679, t597, 0, 0, 0, 0, 0, 0, t608, t616, t576, t536, 0, 0, 0, 0, 0, 0, t608, t616, t576, t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1010, t993, t983, t947, 0, 0, 0, 0, 0, 0, t858, t870, t829, t761, 0, 0, 0, 0, 0, 0, t748, t754, t725, t630, 0, 0, 0, 0, 0, 0, t642, t649, t603, t549, 0, 0, 0, 0, 0, 0, t642, t649, t603, t541; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1100, 0, -t1099, 0, t1206, -t1086, -t1063, -pkin(7) * t1063, -t1034 * t1123 + t1052 * t1128, t1017 * t1128 - t1123 * t985, -t1011 * t1123 + t1043 * t1128, -t1033 * t1123 + t1051 * t1128, -t1012 * t1123 + t1044 * t1128, t1061 * t1128 + t1123 * t1247, -pkin(7) * t957 - t1123 * t910 + t1128 * t915, -pkin(7) * t949 - t1123 * t900 + t1128 * t911, -pkin(7) * t942 - t1123 * t883 + t1128 * t873, -pkin(7) * t891 - t1123 * t893 + t1128 * t876, -t1123 * t897 + t1128 * t952, -t1123 * t842 + t1128 * t901, -t1123 * t877 + t1128 * t923, -t1123 * t896 + t1128 * t951, -t1123 * t878 + t1128 * t924, -t1123 * t944 + t1128 * t988, -pkin(7) * t805 - t1123 * t721 + t1128 * t734, -pkin(7) * t809 - t1123 * t727 + t1128 * t735, -pkin(7) * t790 - t1123 * t685 + t1128 * t715, -pkin(7) * t723 - t1123 * t668 + t1128 * t670, -t1123 * t786 + t1128 * t820, -t1123 * t733 + t1128 * t779, -t1123 * t756 + t1128 * t800, -t1123 * t785 + t1128 * t819, -t1123 * t757 + t1128 * t801, -t1123 * t811 + t1128 * t869, -pkin(7) * t701 - t1123 * t596 + t1128 * t610, -pkin(7) * t713 - t1123 * t599 + t1128 * t618, -pkin(7) * t679 - t1123 * t580 + t1128 * t590, -pkin(7) * t597 - t1123 * t554 + t1128 * t561, t614, t582, t625, t613, t626, t675, -t1123 * t543 + t1128 * t553 - t1303, -t1123 * t545 + t1128 * t556 - t1302, -t1123 * t528 + t1128 * t533 - t1304, -pkin(7) * t536 - t1123 * t523 + t1128 * t524, t614, t582, t625, t613, t626, t675, -t1123 * t535 + t1128 * t544 - t1303, -t1123 * t538 + t1128 * t546 - t1302, -t1123 * t525 + t1128 * t531 - t1304, -pkin(7) * t529 - t1123 * t521 + t1128 * t522; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1099, 0, t1100, 0, t1086, t1206, t1064, pkin(7) * t1064, t1034 * t1128 + t1052 * t1123, t1017 * t1123 + t1128 * t985, t1011 * t1128 + t1043 * t1123, t1033 * t1128 + t1051 * t1123, t1012 * t1128 + t1044 * t1123, t1061 * t1123 - t1128 * t1247, pkin(7) * t958 + t1123 * t915 + t1128 * t910, pkin(7) * t950 + t1123 * t911 + t1128 * t900, pkin(7) * t943 + t1123 * t873 + t1128 * t883, pkin(7) * t892 + t1123 * t876 + t1128 * t893, t1123 * t952 + t1128 * t897, t1123 * t901 + t1128 * t842, t1123 * t923 + t1128 * t877, t1123 * t951 + t1128 * t896, t1123 * t924 + t1128 * t878, t1123 * t988 + t1128 * t944, pkin(7) * t806 + t1123 * t734 + t1128 * t721, pkin(7) * t810 + t1123 * t735 + t1128 * t727, pkin(7) * t791 + t1123 * t715 + t1128 * t685, pkin(7) * t724 + t1123 * t670 + t1128 * t668, t1123 * t820 + t1128 * t786, t1123 * t779 + t1128 * t733, t1123 * t800 + t1128 * t756, t1123 * t819 + t1128 * t785, t1123 * t801 + t1128 * t757, t1123 * t869 + t1128 * t811, pkin(7) * t702 + t1123 * t610 + t1128 * t596, pkin(7) * t714 + t1123 * t618 + t1128 * t599, pkin(7) * t680 + t1123 * t590 + t1128 * t580, pkin(7) * t598 + t1123 * t561 + t1128 * t554, t612, t581, t623, t611, t624, t674, t1123 * t553 + t1128 * t543 + t607, t1123 * t556 + t1128 * t545 + t615, t1123 * t533 + t1128 * t528 + t575, pkin(7) * t537 + t1123 * t524 + t1128 * t523, t612, t581, t623, t611, t624, t674, t1123 * t544 + t1128 * t535 + t607, t1123 * t546 + t1128 * t538 + t615, t1123 * t531 + t1128 * t525 + t575, pkin(7) * t530 + t1123 * t522 + t1128 * t521; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1103, t1104, 0, 0, (t1114 * t1127 * t1168 + t1085 * t1117) * t1122, t1118 * t1090 + t1117 * t1166, t1118 * t1057 + t1117 * t1163, (t1117 * t1203 - t1168 * t1246) * t1127, t1118 * t1058 + t1117 * t1161, t1118 * t1108, pkin(1) * t1013 - t1118 * t1036 + t1117 * t1204, pkin(1) * t994 - t1118 * t1037 + t1117 * t1205, pkin(1) * t984 + t1117 * t1139, pkin(1) * t948 + t1289 * t967, t1117 * t1155 + t1118 * t991, t1117 * t1169 + t1118 * t938, t1117 * t1172 + t1118 * t975, t1117 * t1156 + t1118 * t989, t1117 * t1171 + t1118 * t976, t1118 * t1018 + t1117 * t1314, pkin(1) * t859 + t1117 * t1141 + t1118 * t874, pkin(1) * t871 + t1117 * t1140 + t1118 * t880, pkin(1) * t830 + t1117 * t1137 + t1118 * t798, pkin(1) * t762 + t1117 * t1136 + t1118 * t816, t1117 * t1176 + t1118 * t888, t1117 * t1183 + t1118 * t821, t1117 * t1179 + t1118 * t847, t1117 * t1177 + t1118 * t887, t1117 * t1178 + t1118 * t848, t1117 * t1175 + t1118 * t926, pkin(1) * t749 + t1117 * t1143 + t1118 * t689, pkin(1) * t755 + t1117 * t1142 + t1118 * t692, pkin(1) * t726 + t1117 * t1144 + t1118 * t667, pkin(1) * t631 + t1117 * t1145 + t1118 * t620, t652, t605, t658, t651, t659, t717, t1117 * t1197 + t1118 * t583 + t1285, t1117 * t1195 + t1118 * t585 + t1284, t1117 * t1201 + t1118 * t557 + t1286, pkin(1) * t550 + t1117 * t1146 + t1118 * t534, t652, t605, t658, t651, t659, t717, t1117 * t1200 + t1118 * t565 + t1285, t1117 * t1198 + t1118 * t568 + t1284, t1117 * t1202 + t1118 * t547 + t1286, pkin(1) * t542 + t1117 * t1147 + t1118 * t526;];
tauB_reg  = t1;
