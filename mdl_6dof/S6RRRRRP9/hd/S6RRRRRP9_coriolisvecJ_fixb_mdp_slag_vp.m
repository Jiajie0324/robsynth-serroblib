% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP9_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRRP9_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRRP9_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:12:10
% EndTime: 2019-03-10 02:12:36
% DurationCPUTime: 17.81s
% Computational Cost: add. (14449->668), mult. (36809->896), div. (0->0), fcn. (29100->10), ass. (0->264)
t721 = sin(pkin(6));
t729 = cos(qJ(2));
t815 = qJD(1) * t729;
t800 = t721 * t815;
t697 = -qJD(3) + t800;
t726 = sin(qJ(2));
t722 = cos(pkin(6));
t816 = qJD(1) * t722;
t805 = pkin(1) * t816;
t702 = t726 * t805;
t663 = pkin(8) * t800 + t702;
t725 = sin(qJ(3));
t728 = cos(qJ(3));
t904 = t663 + t697 * (pkin(3) * t725 - pkin(10) * t728);
t724 = sin(qJ(4));
t727 = cos(qJ(4));
t768 = t728 * t800;
t817 = qJD(1) * t721;
t801 = t726 * t817;
t633 = t724 * t768 - t727 * t801;
t811 = qJD(3) * t728;
t898 = -t724 * t811 + t633;
t809 = qJD(4) * t727;
t903 = t725 * t809 - t898;
t867 = cos(qJ(5));
t789 = t867 * qJD(5);
t902 = t727 * (t867 * qJD(4) + t789);
t774 = qJD(2) + t816;
t625 = pkin(9) * t774 + t663;
t659 = (-pkin(2) * t729 - pkin(9) * t726 - pkin(1)) * t721;
t639 = qJD(1) * t659;
t573 = -t725 * t625 + t639 * t728;
t647 = t725 * t774 + t728 * t801;
t879 = -t725 * t801 + t728 * t774;
t589 = pkin(3) * t647 - pkin(10) * t879;
t588 = t727 * t589;
t868 = pkin(10) + pkin(11);
t802 = qJD(4) * t868;
t901 = pkin(4) * t647 - t573 * t724 + t588 + (-pkin(11) * t879 + t802) * t727;
t833 = t727 * t573 + t724 * t589;
t854 = t879 * t724;
t900 = -pkin(11) * t854 + t724 * t802 + t833;
t813 = qJD(3) * t725;
t864 = pkin(9) * t724;
t899 = -t727 * t904 + t813 * t864;
t843 = t728 * t729;
t634 = (t724 * t726 + t727 * t843) * t817;
t761 = t727 * t811 - t634;
t810 = qJD(4) * t724;
t897 = -t725 * t810 + t761;
t660 = -pkin(8) * t801 + t729 * t805;
t756 = (pkin(2) * t726 - pkin(9) * t729) * t721;
t661 = qJD(1) * t756;
t824 = t728 * t660 + t725 * t661;
t586 = pkin(10) * t801 + t824;
t693 = -pkin(3) * t728 - pkin(10) * t725 - pkin(2);
t896 = t727 * t586 - t693 * t809 + t724 * t904;
t844 = t727 * t728;
t711 = pkin(9) * t844;
t769 = t725 * t800;
t895 = pkin(4) * t769 - pkin(11) * t634 - t586 * t724 - (pkin(4) * t725 - pkin(11) * t844) * qJD(3) - (-t711 + (pkin(11) * t725 - t693) * t724) * qJD(4) - t899;
t812 = qJD(3) * t727;
t894 = -(-t725 * t812 - t728 * t810) * pkin(9) + t896 + t903 * pkin(11);
t807 = qJD(1) * qJD(2);
t787 = t721 * t807;
t764 = t729 * t787;
t731 = qJD(3) * t879 + t728 * t764;
t765 = t726 * t787;
t535 = -t647 * t810 - t697 * t809 + t724 * t765 + t727 * t731;
t600 = -t724 * t647 - t697 * t727;
t601 = t647 * t727 - t697 * t724;
t723 = sin(qJ(5));
t738 = -t647 * t809 + t697 * t810 - t724 * t731 + t727 * t765;
t808 = qJD(5) * t723;
t486 = -t867 * t535 - t600 * t789 + t601 * t808 - t723 * t738;
t753 = t723 * t600 + t601 * t867;
t487 = qJD(5) * t753 + t723 * t535 - t867 * t738;
t540 = -t867 * t600 + t601 * t723;
t538 = t540 ^ 2;
t758 = t725 * t764;
t604 = qJD(3) * t647 + t758;
t640 = qJD(4) - t879;
t629 = qJD(5) + t640;
t869 = t753 ^ 2;
t893 = t604 * MDP(29) + (t629 * t753 - t487) * MDP(28) + t540 * MDP(25) * t753 + (t540 * t629 - t486) * MDP(27) + (-t538 + t869) * MDP(26);
t851 = t721 * t726;
t669 = t722 * t725 + t728 * t851;
t850 = t721 * t729;
t754 = -t669 * t727 + t724 * t850;
t892 = pkin(11) * t754;
t891 = t540 * qJ(6);
t574 = t728 * t625 + t725 * t639;
t881 = -t574 + (t810 - t854) * pkin(4);
t682 = t723 * t727 + t724 * t867;
t872 = qJD(4) + qJD(5);
t613 = t872 * t682;
t766 = t867 * t811;
t832 = t613 * t725 + t634 * t867 - t723 * t898 - t727 * t766;
t846 = t724 * t725;
t831 = -t633 * t867 + t723 * t897 + t724 * t766 + t725 * t902 - t808 * t846;
t890 = -t682 * t879 + t613;
t849 = t723 * t724;
t752 = t727 * t867 - t849;
t826 = -t752 * t879 - t849 * t872 + t902;
t777 = -t725 * t660 + t661 * t728;
t740 = pkin(3) * t801 + t777;
t880 = t903 * pkin(4) + pkin(9) * t811 + t740;
t698 = t868 * t724;
t699 = t868 * t727;
t821 = -t723 * t698 + t867 * t699;
t889 = -qJD(5) * t821 + t723 * t900 - t867 * t901;
t874 = t769 - t813;
t561 = pkin(3) * t697 - t573;
t523 = -pkin(4) * t600 + t561;
t624 = -pkin(2) * t774 - t660;
t557 = -pkin(3) * t879 - t647 * pkin(10) + t624;
t562 = -pkin(10) * t697 + t574;
t511 = t557 * t724 + t562 * t727;
t662 = qJD(2) * t756;
t654 = qJD(1) * t662;
t708 = pkin(8) * t851;
t865 = pkin(1) * t729;
t664 = (t722 * t865 - t708) * qJD(2);
t655 = qJD(1) * t664;
t747 = -t625 * t813 + t639 * t811 + t725 * t654 + t728 * t655;
t521 = pkin(10) * t765 + t747;
t760 = pkin(8) * t764;
t531 = t604 * pkin(3) - pkin(10) * t731 + qJD(2) * t702 + t760;
t480 = -qJD(4) * t511 - t521 * t724 + t727 * t531;
t461 = pkin(4) * t604 - pkin(11) * t535 + t480;
t479 = t727 * t521 + t724 * t531 + t557 * t809 - t562 * t810;
t468 = pkin(11) * t738 + t479;
t510 = t727 * t557 - t562 * t724;
t499 = -pkin(11) * t601 + t510;
t492 = pkin(4) * t640 + t499;
t500 = pkin(11) * t600 + t511;
t771 = -t723 * t461 - t867 * t468 - t492 * t789 + t500 * t808;
t887 = t523 * t540 + t771;
t718 = t721 ^ 2;
t885 = -0.2e1 * t718 * t807;
t884 = MDP(5) * (t726 ^ 2 - t729 ^ 2);
t883 = qJ(6) * t753;
t494 = pkin(5) * t540 + qJD(6) + t523;
t882 = t494 * t753;
t668 = -t722 * t728 + t725 * t851;
t657 = t708 + (-pkin(2) - t865) * t722;
t581 = pkin(3) * t668 - pkin(10) * t669 + t657;
t806 = pkin(8) * t850;
t866 = pkin(1) * t726;
t658 = t806 + (pkin(9) + t866) * t722;
t825 = t728 * t658 + t725 * t659;
t583 = -pkin(10) * t850 + t825;
t848 = t724 * t583;
t780 = t727 * t581 - t848;
t507 = pkin(4) * t668 + t780 + t892;
t755 = t669 * t724 + t727 * t850;
t830 = t724 * t581 + t727 * t583;
t512 = -pkin(11) * t755 + t830;
t838 = t723 * t507 + t867 * t512;
t680 = t727 * t693;
t845 = t725 * t727;
t609 = -pkin(11) * t845 + t680 + (-pkin(4) - t864) * t728;
t820 = t724 * t693 + t711;
t621 = -pkin(11) * t846 + t820;
t827 = t723 * t609 + t867 * t621;
t878 = -qJD(5) * t827 + t894 * t723 - t867 * t895;
t877 = t698 * t789 + t699 * t808 + t723 * t901 + t867 * t900;
t876 = -t609 * t789 + t621 * t808 + t723 * t895 + t894 * t867;
t875 = t768 - t811;
t498 = t867 * t500;
t473 = t723 * t492 + t498;
t457 = -qJD(5) * t473 + t867 * t461 - t723 * t468;
t871 = -t523 * t753 + t457;
t730 = qJD(1) ^ 2;
t863 = pkin(9) * t728;
t770 = t625 * t811 + t639 * t813 - t728 * t654 + t725 * t655;
t522 = -pkin(3) * t765 + t770;
t862 = t522 * t724;
t861 = t522 * t727;
t860 = t535 * t724;
t859 = t600 * t640;
t858 = t601 * t640;
t857 = t604 * t727;
t856 = t604 * t728;
t798 = qJD(2) * t850;
t617 = -qJD(3) * t668 + t728 * t798;
t855 = t617 * t724;
t853 = t647 * t697;
t749 = t697 * t725;
t852 = t718 * t730;
t496 = t723 * t500;
t847 = t724 * t604;
t472 = t867 * t492 - t496;
t462 = t472 - t883;
t458 = pkin(5) * t629 + t462;
t842 = t458 - t462;
t667 = t752 * t725;
t841 = -pkin(5) * t874 + qJ(6) * t832 - t667 * qJD(6) + t878;
t666 = t682 * t725;
t840 = -qJ(6) * t831 - qJD(6) * t666 - t876;
t839 = t867 * t499 - t496;
t835 = -qJ(6) * t890 + qJD(6) * t752 - t877;
t834 = -pkin(5) * t647 - qJ(6) * t826 - t682 * qJD(6) + t889;
t689 = pkin(4) * t846 + t725 * pkin(9);
t814 = qJD(2) * t726;
t746 = -t658 * t813 + t659 * t811 + t725 * t662 + t728 * t664;
t799 = t721 * t814;
t527 = pkin(10) * t799 + t746;
t616 = qJD(3) * t669 + t725 * t798;
t665 = (t722 * t866 + t806) * qJD(2);
t549 = pkin(3) * t616 - pkin(10) * t617 + t665;
t803 = t727 * t527 + t724 * t549 + t581 * t809;
t715 = -pkin(4) * t727 - pkin(3);
t797 = t727 * t814;
t796 = t697 * t813;
t794 = t640 * t810;
t786 = -t499 * t723 - t498;
t785 = t867 * t507 - t512 * t723;
t782 = -t527 * t724 + t727 * t549;
t779 = t867 * t609 - t621 * t723;
t778 = -t725 * t658 + t728 * t659;
t776 = -t867 * t698 - t699 * t723;
t775 = t640 * t727;
t772 = t718 * t726 * t729 * MDP(4);
t763 = pkin(1) * t885;
t582 = pkin(3) * t850 - t778;
t757 = -t658 * t811 - t659 * t813 + t728 * t662 - t725 * t664;
t751 = -t640 * t809 - t847;
t748 = -pkin(10) * t604 + t561 * t640;
t556 = -qJD(4) * t755 + t617 * t727 + t724 * t799;
t471 = pkin(4) * t616 - pkin(11) * t556 - qJD(4) * t830 + t782;
t742 = t721 * t797 - t855;
t478 = t742 * pkin(11) + (-t848 + t892) * qJD(4) + t803;
t745 = t723 * t471 + t867 * t478 + t507 * t789 - t512 * t808;
t741 = pkin(1) * (-t722 * t807 + t852);
t739 = t867 * t755;
t565 = -t723 * t755 - t754 * t867;
t735 = -qJD(5) * t838 + t867 * t471 - t723 * t478;
t545 = pkin(4) * t755 + t582;
t732 = qJD(4) * t754 + t742;
t493 = -pkin(4) * t738 + t522;
t464 = t487 * pkin(5) + t493;
t501 = -(-t669 * t809 - t855) * pkin(4) + (-pkin(3) * t814 - (t729 * t810 + t797) * pkin(4)) * t721 - t757;
t714 = pkin(4) * t867 + pkin(5);
t656 = qJD(1) * t665;
t597 = qJ(6) * t752 + t821;
t596 = -qJ(6) * t682 + t776;
t584 = t604 * t668;
t564 = -t723 * t754 + t739;
t537 = -qJ(6) * t666 + t827;
t536 = -pkin(5) * t728 - qJ(6) * t667 + t779;
t528 = -pkin(3) * t799 - t757;
t489 = qJD(5) * t565 + t723 * t556 - t732 * t867;
t488 = qJD(5) * t739 - t556 * t867 - t723 * t732 - t754 * t808;
t476 = -qJ(6) * t564 + t838;
t474 = pkin(5) * t668 - qJ(6) * t565 + t785;
t466 = t839 - t883;
t465 = t786 + t891;
t463 = t473 - t891;
t455 = -qJ(6) * t489 - qJD(6) * t564 + t745;
t454 = t616 * pkin(5) + t488 * qJ(6) - t565 * qJD(6) + t735;
t453 = -qJ(6) * t487 - qJD(6) * t540 - t771;
t452 = t604 * pkin(5) + t486 * qJ(6) - qJD(6) * t753 + t457;
t1 = [(t647 * t617 + t669 * t731) * MDP(11) + (t453 * t476 + t463 * t455 + t452 * t474 + t458 * t454 + t464 * (t564 * pkin(5) + t545) + t494 * (t489 * pkin(5) + t501)) * MDP(33) + (-t473 * t616 - t545 * t486 - t523 * t488 + t493 * t565 + t501 * t753 - t604 * t838 - t629 * t745 + t668 * t771) * MDP(31) + (-(-t583 * t810 + t803) * t640 - t830 * t604 - t479 * t668 - t511 * t616 + t528 * t601 + t582 * t535 - t522 * t754 + t561 * t556) * MDP(24) + (-t535 * t754 + t556 * t601) * MDP(18) + (-t535 * t755 + t556 * t600 + t601 * t732 - t738 * t754) * MDP(19) + (t535 * t668 + t556 * t640 + t601 * t616 - t604 * t754) * MDP(20) + (MDP(6) * t798 - MDP(7) * t799) * (qJD(2) + 0.2e1 * t816) + (-t486 * t565 - t488 * t753) * MDP(25) + (t486 * t564 - t487 * t565 + t488 * t540 - t489 * t753) * MDP(26) + (-t452 * t565 - t453 * t564 - t454 * t753 - t455 * t540 + t458 * t488 - t463 * t489 + t474 * t486 - t476 * t487) * MDP(32) + (-t486 * t668 - t488 * t629 + t565 * t604 + t616 * t753) * MDP(27) + (-t656 * t722 - t665 * t774 + t726 * t763) * MDP(9) + (-t655 * t722 - t664 * t774 + t729 * t763) * MDP(10) + (t457 * t668 + t472 * t616 + t545 * t487 + t523 * t489 + t493 * t564 + t501 * t540 + t604 * t785 + t629 * t735) * MDP(30) + t884 * t885 + (-t697 * t721 - t718 * t815) * MDP(15) * t814 + 0.2e1 * t772 * t807 + (-t617 * t697 + t647 * t799 + t669 * t765 - t731 * t850) * MDP(13) + (-t574 * t799 + t624 * t617 + t665 * t647 + t656 * t669 + t657 * t731 + t697 * t746 + t747 * t850 - t765 * t825) * MDP(17) + (t616 * t640 + t584) * MDP(22) + (t616 * t629 + t584) * MDP(29) + (t600 * t616 - t604 * t755 + t640 * t732 + t668 * t738) * MDP(21) + (t616 * t697 + (t604 * t729 + (-qJD(1) * t668 + t879) * t814) * t721) * MDP(14) + (-t757 * t697 - t665 * t879 + t657 * t604 + t656 * t668 + t624 * t616 + (t770 * t729 + (qJD(1) * t778 + t573) * t814) * t721) * MDP(16) + (-t669 * t604 - t647 * t616 + t617 * t879 - t668 * t731) * MDP(12) + (t782 * t640 + t780 * t604 + t480 * t668 + t510 * t616 - t528 * t600 - t582 * t738 + t522 * t755 - t561 * t742 + (-t561 * t754 - t640 * t830) * qJD(4)) * MDP(23) + (-t487 * t668 - t489 * t629 - t540 * t616 - t564 * t604) * MDP(28); (-t820 * t604 + t740 * t601 - t561 * t634 + t896 * t640 + (t561 * t812 + t479 + (qJD(3) * t601 + t794) * pkin(9)) * t728 + (-t561 * t810 + t861 + t697 * t511 + (t640 * t812 + t535) * pkin(9)) * t725) * MDP(24) + (t487 * t728 + t540 * t749 - t604 * t666 - t629 * t831) * MDP(28) + (-t457 * t728 - t472 * t874 + t689 * t487 + t493 * t666 + t523 * t831 + t540 * t880 + t604 * t779 + t629 * t878) * MDP(30) + (t473 * t749 - t689 * t486 + t493 * t667 - t832 * t523 - t827 * t604 + t629 * t876 - t728 * t771 + t753 * t880) * MDP(31) + (t486 * t728 + t604 * t667 - t629 * t832 - t749 * t753) * MDP(27) + (-t640 * t749 - t856) * MDP(22) + (-t629 * t749 - t856) * MDP(29) + (t486 * t666 - t487 * t667 + t540 * t832 - t753 * t831) * MDP(26) + (-t486 * t667 - t753 * t832) * MDP(25) + (-t452 * t667 - t453 * t666 + t458 * t832 - t463 * t831 + t486 * t536 - t487 * t537 - t540 * t840 - t753 * t841) * MDP(32) + (t663 * t774 + t726 * t741 - t760) * MDP(9) + (pkin(8) * t765 + t660 * t774 + t729 * t741) * MDP(10) + t852 * t884 + (-t634 * t600 + t601 * t633 + (t600 * t727 - t601 * t724) * t811 + (t727 * t738 - t860 + (-t600 * t724 - t601 * t727) * qJD(4)) * t725) * MDP(19) + (-t697 * t811 + (t697 * t843 + (qJD(2) * t725 - t647) * t726) * t817) * MDP(13) + (-qJD(3) * t725 ^ 2 * t801 + ((qJD(3) * t774 + t764) * t725 - t853) * t728) * MDP(11) + (t535 * t845 + t601 * t897) * MDP(18) + (-t738 * t728 + t898 * t640 + (-t600 * t697 + t751) * t725) * MDP(21) + (-t561 * t633 - t740 * t600 + t680 * t604 + ((-qJD(4) * t693 + t586) * t724 + t899) * t640 + (t561 * t724 * qJD(3) - t480 + (-qJD(3) * t600 + t751) * pkin(9)) * t728 + (-pkin(9) * t738 - t510 * t697 + t561 * t809 + t862) * t725) * MDP(23) + (-t535 * t728 + t761 * t640 + (-t601 * t697 - t794 + t857) * t725) * MDP(20) + (t796 + (-t729 * t749 + (qJD(2) * t728 - t879) * t726) * t817) * MDP(14) + (-pkin(2) * t604 - t656 * t728 + t777 * t697 + t663 * t879 + (t624 * t725 + t697 * t863) * qJD(3) + (-t573 * t726 + (-pkin(9) * t814 - t624 * t729) * t725) * t817) * MDP(16) + (-t725 * t604 + t647 * t874 + t728 * t731 - t875 * t879) * MDP(12) + (-pkin(2) * t731 - pkin(9) * t796 + t574 * t801 - t624 * t875 - t663 * t647 + t656 * t725 - t697 * t824 - t765 * t863) * MDP(17) + (-t772 + (-MDP(6) * t729 + MDP(7) * t726) * t721 * t722) * t730 + (t453 * t537 + t452 * t536 + t464 * (pkin(5) * t666 + t689) + (pkin(5) * t831 + t880) * t494 + t840 * t463 + t841 * t458) * MDP(33) + t697 * MDP(15) * t801; -t879 ^ 2 * MDP(12) + (t697 * t879 + t731) * MDP(13) + (-t758 - t853) * MDP(14) + MDP(15) * t765 + (-t574 * t697 - t770) * MDP(16) + (-t573 * t697 - t624 * t879 - t747) * MDP(17) + (t601 * t775 + t860) * MDP(18) + ((t535 + t859) * t727 + (t738 - t858) * t724) * MDP(19) + (t640 * t775 + t847) * MDP(20) + (-t640 ^ 2 * t724 + t857) * MDP(21) + (pkin(3) * t738 - t861 + t574 * t600 + (-pkin(10) * t809 - t588) * t640 + (t573 * t640 + t748) * t724) * MDP(23) + (-pkin(3) * t535 + t862 - t574 * t601 + (pkin(10) * t810 + t833) * t640 + t748 * t727) * MDP(24) + (-t486 * t682 + t753 * t826) * MDP(25) + (-t486 * t752 - t487 * t682 - t540 * t826 - t753 * t890) * MDP(26) + (t604 * t682 + t629 * t826) * MDP(27) + (t604 * t752 - t629 * t890) * MDP(28) + (t715 * t487 - t493 * t752 + t523 * t890 + t540 * t881 + t604 * t776 + t629 * t889) * MDP(30) + (-t715 * t486 + t493 * t682 + t826 * t523 - t821 * t604 + t629 * t877 + t753 * t881) * MDP(31) + (-t452 * t682 + t453 * t752 - t458 * t826 - t463 * t890 + t486 * t596 - t487 * t597 - t540 * t835 - t753 * t834) * MDP(32) + (t453 * t597 + t452 * t596 + t464 * (-pkin(5) * t752 + t715) + (pkin(5) * t890 + t881) * t494 + t835 * t463 + t834 * t458) * MDP(33) + (-MDP(11) * t879 + t647 * MDP(12) - MDP(14) * qJD(3) - t624 * MDP(16) - t601 * MDP(20) - t600 * MDP(21) - t640 * MDP(22) - t510 * MDP(23) + t511 * MDP(24) - MDP(27) * t753 + t540 * MDP(28) - t629 * MDP(29) - t472 * MDP(30) + t473 * MDP(31)) * t647; -t601 * t600 * MDP(18) + (-t600 ^ 2 + t601 ^ 2) * MDP(19) + (t535 - t859) * MDP(20) + (t738 + t858) * MDP(21) + t604 * MDP(22) + (t511 * t640 - t561 * t601 + t480) * MDP(23) + (t510 * t640 - t561 * t600 - t479) * MDP(24) + (-t786 * t629 + (-t601 * t540 + t604 * t867 - t629 * t808) * pkin(4) + t871) * MDP(30) + (t839 * t629 + (-t601 * t753 - t723 * t604 - t629 * t789) * pkin(4) + t887) * MDP(31) + (-t458 * t540 + t463 * t753 + t465 * t753 + t466 * t540 + t714 * t486 + (-t487 * t723 + (-t540 * t867 + t723 * t753) * qJD(5)) * pkin(4)) * MDP(32) + (-pkin(5) * t882 + t452 * t714 - t458 * t465 - t463 * t466 + (t453 * t723 - t494 * t601 + (-t458 * t723 + t463 * t867) * qJD(5)) * pkin(4)) * MDP(33) + t893; (t473 * t629 + t871) * MDP(30) + (t472 * t629 + t887) * MDP(31) + (pkin(5) * t486 - t540 * t842) * MDP(32) + (t842 * t463 + (t452 - t882) * pkin(5)) * MDP(33) + t893; (-t538 - t869) * MDP(32) + (t458 * t753 + t463 * t540 + t464) * MDP(33);];
tauc  = t1;
