% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRRP9_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:12:22
% EndTime: 2019-03-10 02:13:00
% DurationCPUTime: 28.51s
% Computational Cost: add. (17389->827), mult. (41734->1106), div. (0->0), fcn. (33621->14), ass. (0->331)
t884 = cos(qJ(2));
t1003 = qJD(1) * t884;
t876 = sin(pkin(6));
t979 = t876 * t1003;
t834 = -qJD(3) + t979;
t846 = pkin(8) * t979;
t880 = sin(qJ(2));
t1059 = cos(pkin(6));
t959 = t1059 * qJD(1);
t939 = pkin(1) * t959;
t790 = t880 * t939 + t846;
t879 = sin(qJ(3));
t883 = cos(qJ(3));
t1122 = t790 + t834 * (pkin(3) * t879 - pkin(10) * t883);
t878 = sin(qJ(4));
t882 = cos(qJ(4));
t940 = t883 * t979;
t1004 = qJD(1) * t876;
t980 = t880 * t1004;
t765 = t878 * t940 - t882 * t980;
t997 = qJD(3) * t883;
t1118 = -t878 * t997 + t765;
t994 = qJD(4) * t882;
t1121 = t879 * t994 - t1118;
t927 = t959 + qJD(2);
t757 = pkin(9) * t927 + t790;
t925 = -pkin(2) * t884 - pkin(9) * t880 - pkin(1);
t785 = t925 * t876;
t767 = qJD(1) * t785;
t687 = -t879 * t757 + t767 * t883;
t774 = t879 * t980 - t883 * t927;
t776 = t879 * t927 + t883 * t980;
t715 = pkin(3) * t776 + pkin(10) * t774;
t710 = t882 * t715;
t1077 = pkin(10) + pkin(11);
t982 = qJD(4) * t1077;
t1120 = pkin(4) * t776 - t687 * t878 + t710 + (pkin(11) * t774 + t982) * t882;
t1021 = t882 * t687 + t878 * t715;
t1053 = t774 * t878;
t1119 = pkin(11) * t1053 + t878 * t982 + t1021;
t1031 = t883 * t884;
t766 = (t1031 * t882 + t878 * t880) * t1004;
t929 = t882 * t997 - t766;
t995 = qJD(4) * t878;
t1117 = -t879 * t995 + t929;
t1075 = cos(qJ(5));
t968 = t1075 * qJD(5);
t1116 = (t1075 * qJD(4) + t968) * t882;
t1000 = qJD(3) * t879;
t1074 = pkin(9) * t878;
t1115 = t1000 * t1074 - t1122 * t882;
t787 = -pkin(8) * t980 + t884 * t939;
t933 = pkin(2) * t880 - pkin(9) * t884;
t788 = t933 * t1004;
t1012 = t883 * t787 + t879 * t788;
t704 = pkin(10) * t980 + t1012;
t827 = -pkin(3) * t883 - pkin(10) * t879 - pkin(2);
t1114 = t1122 * t878 + t882 * t704 - t827 * t994;
t1033 = t882 * t883;
t860 = pkin(9) * t1033;
t978 = t879 * t1003;
t941 = t876 * t978;
t1113 = pkin(4) * t941 - pkin(11) * t766 - t704 * t878 - (pkin(4) * t879 - pkin(11) * t1033) * qJD(3) - (-t860 + (pkin(11) * t879 - t827) * t878) * qJD(4) - t1115;
t998 = qJD(3) * t882;
t1112 = -(-t879 * t998 - t883 * t995) * pkin(9) + t1114 + t1121 * pkin(11);
t1042 = t876 * t880;
t881 = sin(qJ(1));
t1076 = cos(qJ(1));
t935 = t1059 * t1076;
t798 = t880 * t935 + t881 * t884;
t961 = t880 * t1059;
t800 = t1076 * t884 - t881 * t961;
t930 = g(1) * t800 + g(2) * t798;
t900 = -g(3) * t1042 - t930;
t725 = -t878 * t776 - t834 * t882;
t726 = t776 * t882 - t834 * t878;
t877 = sin(qJ(5));
t918 = t1075 * t726 + t877 * t725;
t1078 = t918 ^ 2;
t990 = qJDD(1) * t884;
t851 = t876 * t990;
t992 = qJD(1) * qJD(2);
t967 = t880 * t992;
t937 = t876 * t967;
t786 = qJDD(3) - t851 + t937;
t946 = t1059 * qJDD(1);
t852 = t946 + qJDD(2);
t904 = qJD(3) * t927;
t896 = t879 * t852 + t883 * t904;
t991 = qJDD(1) * t880;
t962 = t883 * t991;
t1001 = qJD(2) * t884;
t974 = t883 * t1001;
t999 = qJD(3) * t880;
t886 = (t962 + (-t879 * t999 + t974) * qJD(1)) * t876 + t896;
t637 = -t776 * t995 + t878 * t786 - t834 * t994 + t882 * t886;
t984 = t776 * t994 - t834 * t995 + t878 * t886;
t923 = t882 * t786 - t984;
t993 = qJD(5) * t877;
t591 = -t1075 * t637 - t725 * t968 + t726 * t993 - t877 * t923;
t592 = qJD(5) * t918 - t1075 * t923 + t877 * t637;
t649 = -t1075 * t725 + t726 * t877;
t647 = t649 ^ 2;
t976 = t879 * t1001;
t689 = (qJD(1) * (t880 * t997 + t976) + t879 * t991) * t876 - t883 * t852 + t879 * t904;
t684 = qJDD(4) + t689;
t680 = qJDD(5) + t684;
t768 = qJD(4) + t774;
t761 = qJD(5) + t768;
t1111 = t680 * MDP(29) + (t761 * t918 - t592) * MDP(28) + t649 * MDP(25) * t918 + (t649 * t761 - t591) * MDP(27) + (-t647 + t1078) * MDP(26);
t1039 = t876 * t884;
t1040 = t876 * t883;
t796 = t1040 * t880 + t1059 * t879;
t920 = t1039 * t878 - t796 * t882;
t1110 = pkin(11) * t920;
t1108 = t649 * qJ(6);
t688 = t883 * t757 + t879 * t767;
t1094 = -t688 + (t1053 + t995) * pkin(4);
t1084 = qJD(4) + qJD(5);
t813 = t1075 * t878 + t877 * t882;
t738 = t1084 * t813;
t938 = t1075 * t997;
t1020 = t1075 * t766 - t1118 * t877 + t738 * t879 - t882 * t938;
t1035 = t878 * t879;
t1019 = -t993 * t1035 - t1075 * t765 + t1116 * t879 + t1117 * t877 + t878 * t938;
t1107 = t813 * t774 + t738;
t924 = qJD(2) * t939;
t936 = pkin(1) * t946;
t964 = t876 * t991;
t943 = pkin(8) * t964 + qJD(2) * t846 + t880 * t924 - t884 * t936;
t714 = -t852 * pkin(2) + t943;
t797 = t880 * t881 - t884 * t935;
t960 = t884 * t1059;
t799 = t1076 * t880 + t881 * t960;
t901 = g(1) * t799 + g(2) * t797 - g(3) * t1039;
t1106 = t714 - t901;
t1038 = t877 * t878;
t917 = t1075 * t882 - t1038;
t1014 = -t1038 * t1084 + t917 * t774 + t1116;
t835 = t1077 * t878;
t836 = t1077 * t882;
t1009 = t1075 * t836 - t877 * t835;
t1105 = -qJD(5) * t1009 - t1075 * t1120 + t1119 * t877;
t1088 = t1000 - t941;
t1103 = pkin(4) * t1121 + pkin(9) * t997;
t981 = t876 * t1076;
t746 = t798 * t883 - t879 * t981;
t875 = qJ(4) + qJ(5);
t867 = sin(t875);
t868 = cos(t875);
t1098 = t746 * t868 + t797 * t867;
t670 = pkin(3) * t834 - t687;
t639 = -pkin(4) * t725 + t670;
t1041 = t876 * t881;
t750 = t1041 * t879 + t800 * t883;
t698 = t750 * t868 + t799 * t867;
t983 = -pkin(8) * t851 - t880 * t936 - t884 * t924;
t899 = -pkin(8) * t937 - t983;
t713 = pkin(9) * t852 + t899;
t919 = t933 * qJD(2);
t716 = (qJD(1) * t919 + qJDD(1) * t925) * t876;
t913 = -t1000 * t757 + t883 * t713 + t879 * t716 + t767 * t997;
t611 = pkin(10) * t786 + t913;
t619 = t689 * pkin(3) - pkin(10) * t886 + t714;
t756 = -pkin(2) * t927 - t787;
t666 = t774 * pkin(3) - t776 * pkin(10) + t756;
t671 = -pkin(10) * t834 + t688;
t626 = t666 * t878 + t671 * t882;
t575 = -qJD(4) * t626 - t878 * t611 + t882 * t619;
t569 = pkin(4) * t684 - pkin(11) * t637 + t575;
t911 = -t882 * t611 - t878 * t619 - t666 * t994 + t671 * t995;
t572 = pkin(11) * t923 - t911;
t625 = t882 * t666 - t671 * t878;
t608 = -pkin(11) * t726 + t625;
t602 = pkin(4) * t768 + t608;
t609 = pkin(11) * t725 + t626;
t945 = -t1075 * t572 - t877 * t569 - t602 * t968 + t609 * t993;
t1102 = t639 * t649 + g(1) * t698 + g(2) * t1098 - g(3) * (t1039 * t867 - t796 * t868) + t945;
t1101 = t746 * t878 - t797 * t882;
t1100 = t746 * t882 + t797 * t878;
t1099 = t746 * t867 - t797 * t868;
t1096 = qJ(6) * t918;
t603 = pkin(5) * t649 + qJD(6) + t639;
t1095 = t603 * t918;
t795 = t1042 * t879 - t1059 * t883;
t1008 = pkin(1) * t961 + pkin(8) * t1039;
t784 = pkin(9) * t1059 + t1008;
t1013 = t883 * t784 + t879 * t785;
t702 = -pkin(10) * t1039 + t1013;
t1036 = t878 * t702;
t855 = pkin(8) * t1042;
t1090 = pkin(1) * t960 - t855;
t783 = -pkin(2) * t1059 - t1090;
t700 = t795 * pkin(3) - t796 * pkin(10) + t783;
t952 = t882 * t700 - t1036;
t622 = pkin(4) * t795 + t1110 + t952;
t1018 = t878 * t700 + t882 * t702;
t743 = t1039 * t882 + t796 * t878;
t627 = -pkin(11) * t743 + t1018;
t1026 = t1075 * t627 + t877 * t622;
t1034 = t879 * t882;
t811 = t882 * t827;
t734 = -pkin(11) * t1034 + t811 + (-pkin(4) - t1074) * t883;
t1007 = t878 * t827 + t860;
t753 = -pkin(11) * t1035 + t1007;
t1015 = t1075 * t753 + t877 * t734;
t777 = t879 * t787;
t949 = t883 * t788 - t777;
t703 = -pkin(3) * t980 - t949;
t1093 = -t703 + t1103;
t1092 = -qJD(5) * t1015 - t1075 * t1113 + t1112 * t877;
t1091 = t940 - t997;
t1087 = -t834 * t1000 - t883 * t786;
t1086 = t1119 * t1075 + t1120 * t877 + t835 * t968 + t836 * t993;
t1085 = t1112 * t1075 + t1113 * t877 - t734 * t968 + t753 * t993;
t745 = t798 * t879 + t883 * t981;
t749 = -t1040 * t881 + t800 * t879;
t906 = g(1) * t749 + g(2) * t745 + g(3) * t795;
t697 = -t750 * t867 + t799 * t868;
t1082 = -g(3) * (-t1039 * t868 - t796 * t867) + g(2) * t1099 - g(1) * t697;
t607 = t1075 * t609;
t584 = t877 * t602 + t607;
t564 = -qJD(5) * t584 + t1075 * t569 - t877 * t572;
t1081 = -t639 * t918 + t1082 + t564;
t885 = qJD(1) ^ 2;
t1062 = t786 * pkin(3);
t870 = t882 * pkin(4);
t1061 = pkin(3) + t870;
t822 = pkin(4) * t878 + pkin(5) * t867;
t1060 = pkin(9) + t822;
t1058 = t637 * t878;
t1057 = t684 * t882;
t1056 = t725 * t768;
t1055 = t726 * t768;
t742 = -qJD(3) * t795 + t876 * t974;
t1054 = t742 * t878;
t1052 = t776 * t834;
t1047 = t834 * t879;
t1046 = t852 * MDP(8);
t1045 = t867 * t883;
t1044 = t868 * t883;
t872 = t876 ^ 2;
t1043 = t872 * t885;
t605 = t877 * t609;
t1037 = t878 * t684;
t583 = t1075 * t602 - t605;
t576 = t583 - t1096;
t573 = pkin(5) * t761 + t576;
t1030 = -t576 + t573;
t794 = t917 * t879;
t1029 = pkin(5) * t1088 + qJ(6) * t1020 - t794 * qJD(6) + t1092;
t793 = t813 * t879;
t1028 = -qJ(6) * t1019 - qJD(6) * t793 - t1085;
t1027 = t1075 * t608 - t605;
t1023 = -qJ(6) * t1107 + qJD(6) * t917 - t1086;
t1022 = -pkin(5) * t776 - qJ(6) * t1014 - t813 * qJD(6) + t1105;
t823 = pkin(5) * t868 + t870;
t821 = pkin(4) * t1035 + t879 * pkin(9);
t873 = t880 ^ 2;
t1006 = -t884 ^ 2 + t873;
t1002 = qJD(2) * t880;
t996 = qJD(4) * t768;
t989 = 0.2e1 * t872;
t986 = t884 * t1043;
t789 = t876 * t919;
t791 = t1090 * qJD(2);
t912 = -t1000 * t784 + t785 * t997 + t879 * t789 + t883 * t791;
t977 = t876 * t1002;
t643 = pkin(10) * t977 + t912;
t741 = qJD(3) * t796 + t876 * t976;
t792 = t1008 * qJD(2);
t658 = t741 * pkin(3) - t742 * pkin(10) + t792;
t985 = t882 * t643 + t878 * t658 + t700 * t994;
t975 = t882 * t1002;
t966 = t884 * t992;
t965 = qJD(1) * t999;
t958 = -t608 * t877 - t607;
t957 = t1075 * t622 - t627 * t877;
t953 = -t643 * t878 + t882 * t658;
t951 = t1075 * t734 - t753 * t877;
t950 = -t879 * t784 + t785 * t883;
t948 = -t1075 * t835 - t836 * t877;
t947 = t768 * t882;
t944 = t767 * t1000 + t879 * t713 - t883 * t716 + t757 * t997;
t934 = t876 * t885 * t1059;
t931 = -g(1) * t745 + g(2) * t749;
t701 = pkin(3) * t1039 - t950;
t926 = 0.2e1 * t959 + qJD(2);
t922 = -t785 * t1000 - t784 * t997 + t883 * t789 - t879 * t791;
t674 = -t1075 * t920 - t877 * t743;
t612 = t944 - t1062;
t915 = -pkin(10) * t684 + t670 * t768;
t914 = t966 + t991;
t665 = -qJD(4) * t743 + t742 * t882 + t878 * t977;
t582 = pkin(4) * t741 - pkin(11) * t665 - qJD(4) * t1018 + t953;
t903 = t876 * t975 - t1054;
t589 = t903 * pkin(11) + (-t1036 + t1110) * qJD(4) + t985;
t910 = t1075 * t589 + t877 * t582 + t622 * t968 - t627 * t993;
t907 = t876 * (t946 + t852);
t905 = -g(1) * t750 - g(2) * t746 - g(3) * t796;
t654 = pkin(4) * t743 + t701;
t895 = pkin(9) * t996 - t901;
t894 = pkin(10) * t996 + t612 - t906;
t892 = -qJD(5) * t1026 + t1075 * t582 - t877 * t589;
t595 = -pkin(4) * t923 + t612;
t888 = qJD(4) * t920 + t903;
t570 = t592 * pkin(5) + qJDD(6) + t595;
t613 = -(-t796 * t994 - t1054) * pkin(4) + (-pkin(3) * t1002 - (t884 * t995 + t975) * pkin(4)) * t876 - t922;
t871 = -qJ(6) - t1077;
t864 = pkin(4) * t1075 + pkin(5);
t817 = pkin(3) + t823;
t724 = qJ(6) * t917 + t1009;
t723 = -qJ(6) * t813 + t948;
t706 = t750 * t882 + t799 * t878;
t705 = -t750 * t878 + t799 * t882;
t673 = t1075 * t743 - t877 * t920;
t646 = -qJ(6) * t793 + t1015;
t645 = -pkin(5) * t883 - qJ(6) * t794 + t951;
t644 = -pkin(3) * t977 - t922;
t599 = qJD(5) * t674 - t1075 * t888 + t877 * t665;
t598 = -t1075 * t665 + t743 * t968 - t877 * t888 - t920 * t993;
t587 = -qJ(6) * t673 + t1026;
t585 = pkin(5) * t795 - qJ(6) * t674 + t957;
t579 = t1027 - t1096;
t578 = t958 + t1108;
t577 = t584 - t1108;
t566 = -qJ(6) * t599 - qJD(6) * t673 + t910;
t565 = t741 * pkin(5) + t598 * qJ(6) - t674 * qJD(6) + t892;
t562 = -qJ(6) * t592 - qJD(6) * t649 - t945;
t561 = t680 * pkin(5) + t591 * qJ(6) - qJD(6) * t918 + t564;
t1 = [(-pkin(1) * t914 * t989 - g(1) * t797 + g(2) * t799 - t1008 * t852 - t1059 * t899 - t791 * t927) * MDP(10) + (-t792 * t927 - t855 * t852 - t943 * t1059 + g(1) * t798 - g(2) * t800 + (t852 * t960 + (-t967 + t990) * t989) * pkin(1)) * MDP(9) + t1059 * t1046 + (-t1013 * t786 + t1039 * t913 - t688 * t977 + t714 * t796 + t756 * t742 + t792 * t776 + t783 * t886 + t834 * t912 + t931) * MDP(17) + (g(1) * t881 - g(2) * t1076) * MDP(2) + (g(1) * t1076 + g(2) * t881) * MDP(3) + (t953 * t768 + t952 * t684 + t575 * t795 + t625 * t741 - t644 * t725 - t701 * t923 + t612 * t743 - t670 * t903 + g(1) * t1100 - g(2) * t706 + (-t1018 * t768 - t670 * t920) * qJD(4)) * MDP(23) + (-t1002 * t834 - t786 * t884) * t876 * MDP(15) + (-t561 * t674 - t562 * t673 - t565 * t918 - t566 * t649 + t573 * t598 - t577 * t599 + t585 * t591 - t587 * t592 - t931) * MDP(32) + (-t591 * t795 - t598 * t761 + t674 * t680 + t741 * t918) * MDP(27) + (-t591 * t674 - t598 * t918) * MDP(25) + (t591 * t673 - t592 * t674 + t598 * t649 - t599 * t918) * MDP(26) + (0.2e1 * (-t1006 * t992 + t880 * t990) * MDP(5) + (qJDD(1) * t873 + 0.2e1 * t880 * t966) * MDP(4)) * t872 + (t741 * t834 - t786 * t795 + (-t1002 * t774 + t689 * t884) * t876) * MDP(14) + (-t743 * t684 + t725 * t741 + t768 * t888 + t795 * t923) * MDP(21) + (t776 * t742 + t796 * t886) * MDP(11) + (-t796 * t689 - t776 * t741 - t742 * t774 - t795 * t886) * MDP(12) + (-t742 * t834 + t796 * t786 + (-t896 * t884 + t776 * t1002 - (-t879 * t965 + t883 * t966 + t962) * t1039) * t876) * MDP(13) + (-t637 * t743 + t665 * t725 + t726 * t888 - t920 * t923) * MDP(19) + (t637 * t795 + t665 * t768 - t684 * t920 + t726 * t741) * MDP(20) + (-t637 * t920 + t665 * t726) * MDP(18) + (t562 * t587 + t577 * t566 + t561 * t585 + t573 * t565 + t570 * (pkin(5) * t673 + t654) + t603 * (t599 * pkin(5) + t613) - g(1) * (-t881 * pkin(1) - t798 * pkin(2) + pkin(8) * t981 - t1060 * t797 + t745 * t871 - t746 * t817) - g(2) * (pkin(1) * t1076 + t800 * pkin(2) + pkin(8) * t1041 + t1060 * t799 - t749 * t871 + t750 * t817)) * MDP(33) + (-t922 * t834 + t950 * t786 + t792 * t774 + t783 * t689 + t714 * t795 + t756 * t741 + g(1) * t746 - g(2) * t750 + (t1002 * t687 + t884 * t944) * t876) * MDP(16) + (t884 * t907 - t926 * t977) * MDP(7) + (t1001 * t876 * t926 + t880 * t907) * MDP(6) + (g(1) * t1098 - g(2) * t698 + t564 * t795 + t583 * t741 + t654 * t592 + t595 * t673 + t639 * t599 + t613 * t649 + t957 * t680 + t892 * t761) * MDP(30) + (-g(1) * t1099 - g(2) * t697 - t1026 * t680 - t584 * t741 - t654 * t591 + t595 * t674 - t639 * t598 + t613 * t918 - t910 * t761 + t945 * t795) * MDP(31) + (-(-t702 * t995 + t985) * t768 - t1018 * t684 + t911 * t795 - t626 * t741 + t644 * t726 + t701 * t637 - t612 * t920 + t670 * t665 - g(1) * t1101 - g(2) * t705) * MDP(24) + qJDD(1) * MDP(1) + (t680 * t795 + t741 * t761) * MDP(29) + (-t592 * t795 - t599 * t761 - t649 * t741 - t673 * t680) * MDP(28) + (t684 * t795 + t741 * t768) * MDP(22); (-t1047 * t761 - t680 * t883) * MDP(29) + (-t1020 * t761 - t1047 * t918 + t591 * t883 + t680 * t794) * MDP(27) + ((-t876 * t965 + t852) * t879 ^ 2 + ((t876 * t914 + t904) * t879 - t1052) * t883) * MDP(11) + (-t1019 * t761 + t1047 * t649 + t592 * t883 - t680 * t793) * MDP(28) + (-t1007 * t684 - t703 * t726 - t670 * t766 + t1114 * t768 + t900 * t882 + (-t911 + (pkin(9) * t726 + t670 * t882) * qJD(3) + t895 * t878) * t883 + (-t670 * t995 + t612 * t882 + t834 * t626 + (t768 * t998 + t637) * pkin(9)) * t879) * MDP(24) + (-t670 * t765 + t811 * t684 + t703 * t725 + t1115 * t768 + ((-qJD(4) * t827 + t704) * t768 + t900) * t878 + (t670 * t878 * qJD(3) - t575 + (-qJD(3) * t725 - t1037) * pkin(9) - t895 * t882) * t883 + (-pkin(9) * t923 + t612 * t878 - t625 * t834 + t670 * t994) * t879) * MDP(23) + (pkin(1) * t986 + t787 * t927 + (pkin(8) * t992 + g(3)) * t1042 + t930 + t983) * MDP(10) + (pkin(1) * t1043 * t880 + t790 * t927 + t901 - t943) * MDP(9) + (t637 * t1034 + t1117 * t726) * MDP(18) + (-t923 * t883 + t1118 * t768 + (-t725 * t834 - t768 * t994 - t1037) * t879) * MDP(21) + (-t637 * t883 + t929 * t768 + (-t726 * t834 - t768 * t995 + t1057) * t879) * MDP(20) + (-t834 * t997 + t786 * t879 + (t1031 * t834 - t776 * t880) * t1004) * MDP(13) + (t880 * t934 + t851) * MDP(7) + (-t884 * t934 + t964) * MDP(6) + (-t1019 * t577 + t1020 * t573 - t1028 * t649 - t1029 * t918 - t561 * t794 - t562 * t793 + t591 * t645 - t592 * t646 + t879 * t901) * MDP(32) + (-t1019 * t918 + t1020 * t649 + t591 * t793 - t592 * t794) * MDP(26) + (-t1020 * t918 - t591 * t794) * MDP(25) + t834 * MDP(15) * t980 + (-t1088 * t776 + t1091 * t774 - t879 * t689 + t883 * t886) * MDP(12) - t880 * MDP(4) * t986 + (-t766 * t725 + t726 * t765 + (t725 * t882 - t726 * t878) * t997 + (t882 * t923 - t1058 + (-t725 * t878 - t726 * t882) * qJD(4)) * t879) * MDP(19) + (-t1015 * t680 - t945 * t883 - t584 * t1000 - t821 * t591 + t595 * t794 - g(1) * (t1045 * t799 + t800 * t868) - g(2) * (t1045 * t797 + t798 * t868) + t1085 * t761 + t1093 * t918 - t1020 * t639 + (t584 * t978 - g(3) * (-t1031 * t867 + t868 * t880)) * t876) * MDP(31) + (-t1047 * t768 - t684 * t883) * MDP(22) + t1046 + ((-t1047 * t884 + t774 * t880) * t1004 - t1087) * MDP(14) + (-t687 * t980 - pkin(2) * t689 - t790 * t774 - t777 * t834 + (-pkin(9) * t786 - t756 * t834) * t879 + ((pkin(9) * qJD(3) + t788) * t834 - t1106) * t883) * MDP(16) + (-pkin(2) * t886 + t1087 * pkin(9) - t1012 * t834 - t1091 * t756 + t1106 * t879 + t688 * t980 - t790 * t776) * MDP(17) + (t562 * t646 + t561 * t645 + t570 * (pkin(5) * t793 + t821) + t1028 * t577 + t1029 * t573 + t901 * (t817 * t883 - t871 * t879 + pkin(2)) + (pkin(3) * qJD(1) * t1042 + pkin(5) * t1019 + t1103 + t949) * t603 + t900 * t1060) * MDP(33) + (t951 * t680 - t564 * t883 + t821 * t592 + t595 * t793 - g(1) * (-t1044 * t799 + t800 * t867) - g(2) * (-t1044 * t797 + t798 * t867) - g(3) * (t1031 * t868 + t867 * t880) * t876 + t1092 * t761 + t1093 * t649 + t1019 * t639 + t1088 * t583) * MDP(30) + t1006 * MDP(5) * t1043; -t774 ^ 2 * MDP(12) + (-t774 * t834 + t886) * MDP(13) + (-t1052 - t689) * MDP(14) + t786 * MDP(15) + (-t688 * t834 + t906 - t944) * MDP(16) + (-t687 * t834 + t756 * t774 - t905 - t913) * MDP(17) + (t726 * t947 + t1058) * MDP(18) + ((t637 + t1056) * t882 + (t923 - t1055) * t878) * MDP(19) + (t768 * t947 + t1037) * MDP(20) + (-t768 ^ 2 * t878 + t1057) * MDP(21) + (-pkin(3) * t984 - t710 * t768 + t688 * t725 + (t687 * t768 + t915) * t878 + (-t894 + t1062) * t882) * MDP(23) + (-pkin(3) * t637 + t1021 * t768 - t688 * t726 + t878 * t894 + t882 * t915) * MDP(24) + (t1014 * t918 - t591 * t813) * MDP(25) + (-t1014 * t649 - t1107 * t918 - t591 * t917 - t592 * t813) * MDP(26) + (t1014 * t761 + t680 * t813) * MDP(27) + (-t1107 * t761 + t680 * t917) * MDP(28) + (-t1009 * t680 + t1014 * t639 + t1061 * t591 + t1086 * t761 + t1094 * t918 + t595 * t813 - t906 * t867) * MDP(31) + (-t1014 * t573 - t1022 * t918 - t1023 * t649 - t1107 * t577 - t561 * t813 + t562 * t917 + t591 * t723 - t592 * t724 + t905) * MDP(32) + (t562 * t724 + t561 * t723 + t570 * (-pkin(5) * t917 - t1061) - g(1) * (-t749 * t817 - t750 * t871) - g(2) * (-t745 * t817 - t746 * t871) - g(3) * (-t795 * t817 - t796 * t871) + (pkin(5) * t1107 + t1094) * t603 + t1023 * t577 + t1022 * t573) * MDP(33) + (MDP(11) * t774 + MDP(12) * t776 - MDP(16) * t756 - MDP(20) * t726 - MDP(21) * t725 - MDP(22) * t768 - MDP(23) * t625 + MDP(24) * t626 - MDP(27) * t918 + MDP(28) * t649 - MDP(29) * t761 + MDP(31) * t584) * t776 + (-t1061 * t592 + t1094 * t649 + t1105 * t761 + t1107 * t639 - t583 * t776 - t595 * t917 + t680 * t948 + t906 * t868) * MDP(30); -t726 * t725 * MDP(18) + (-t725 ^ 2 + t726 ^ 2) * MDP(19) + (t637 - t1056) * MDP(20) + (t923 + t1055) * MDP(21) + t684 * MDP(22) + (-g(1) * t705 + g(2) * t1101 + g(3) * t743 + t626 * t768 - t670 * t726 + t575) * MDP(23) + (g(1) * t706 + g(2) * t1100 - g(3) * t920 + t625 * t768 - t670 * t725 + t911) * MDP(24) + (-t958 * t761 + (t1075 * t680 - t726 * t649 - t761 * t993) * pkin(4) + t1081) * MDP(30) + (t1027 * t761 + (-t877 * t680 - t726 * t918 - t761 * t968) * pkin(4) + t1102) * MDP(31) + (-t573 * t649 + t577 * t918 + t578 * t918 + t579 * t649 + t864 * t591 + (-t592 * t877 + (-t1075 * t649 + t877 * t918) * qJD(5)) * pkin(4)) * MDP(32) + (t561 * t864 - t577 * t579 - t573 * t578 - pkin(5) * t1095 - g(1) * (-t750 * t822 + t799 * t823) - g(2) * (-t746 * t822 + t797 * t823) - g(3) * (-t1039 * t823 - t796 * t822) + (t562 * t877 - t603 * t726 + (t1075 * t577 - t573 * t877) * qJD(5)) * pkin(4)) * MDP(33) + t1111; (t584 * t761 + t1081) * MDP(30) + (t583 * t761 + t1102) * MDP(31) + (pkin(5) * t591 - t1030 * t649) * MDP(32) + (t1030 * t577 + (t1082 + t561 - t1095) * pkin(5)) * MDP(33) + t1111; (-t647 - t1078) * MDP(32) + (t573 * t918 + t577 * t649 + t570 - t906) * MDP(33);];
tau  = t1;
