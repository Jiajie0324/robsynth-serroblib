% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:43
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:42:53
% EndTime: 2019-05-05 16:43:08
% DurationCPUTime: 12.93s
% Computational Cost: add. (22834->601), mult. (46968->786), div. (0->0), fcn. (24727->8), ass. (0->398)
t616 = qJD(3) ^ 2;
t611 = sin(qJ(3));
t599 = t611 ^ 2;
t617 = qJD(1) ^ 2;
t679 = t599 * t617;
t578 = t616 + t679;
t614 = cos(qJ(3));
t732 = t614 * t617;
t657 = t611 * t732;
t574 = qJDD(3) - t657;
t675 = t614 * t574;
t514 = -t578 * t611 + t675;
t667 = qJD(1) * qJD(3);
t648 = t614 * t667;
t665 = qJDD(1) * t611;
t561 = 0.2e1 * t648 + t665;
t605 = sin(pkin(9));
t606 = cos(pkin(9));
t452 = t514 * t605 + t561 * t606;
t456 = t514 * t606 - t561 * t605;
t612 = sin(qJ(1));
t615 = cos(qJ(1));
t380 = t452 * t615 + t456 * t612;
t719 = pkin(6) * t380;
t387 = t452 * t612 - t456 * t615;
t378 = pkin(6) * t387;
t600 = t614 ^ 2;
t678 = t600 * t617;
t580 = t616 + t678;
t573 = qJDD(3) + t657;
t686 = t573 * t611;
t515 = t580 * t614 + t686;
t592 = t611 * t667;
t664 = qJDD(1) * t614;
t563 = -0.2e1 * t592 + t664;
t453 = t515 * t605 - t563 * t606;
t457 = t515 * t606 + t563 * t605;
t381 = t453 * t615 + t457 * t612;
t718 = pkin(6) * t381;
t386 = t453 * t612 - t457 * t615;
t379 = pkin(6) * t386;
t712 = qJ(2) * t452;
t656 = pkin(1) * t452 + pkin(2) * t561 + pkin(7) * t514;
t685 = t574 * t611;
t507 = t578 * t614 + t685;
t647 = -pkin(1) * t507 + qJ(2) * t456;
t673 = t599 + t600;
t567 = t673 * qJDD(1);
t570 = t673 * t617;
t494 = t567 * t605 + t570 * t606;
t496 = t567 * t606 - t570 * t605;
t422 = t494 * t615 + t496 * t612;
t717 = pkin(6) * t422;
t425 = t494 * t612 - t496 * t615;
t421 = pkin(6) * t425;
t711 = qJ(2) * t453;
t550 = t614 * t573;
t511 = -t580 * t611 + t550;
t720 = pkin(2) * t511;
t748 = -qJ(4) * t580 + t720;
t655 = -pkin(1) * t453 + pkin(2) * t563 - pkin(7) * t515;
t646 = -pkin(1) * t511 - qJ(2) * t457;
t508 = t561 * t611;
t691 = t563 * t614;
t487 = -t691 + t508;
t571 = (t599 - t600) * t617;
t441 = t487 * t605 + t571 * t606;
t444 = t487 * t606 - t571 * t605;
t747 = t441 * t615 + t444 * t612;
t375 = t441 * t612 - t444 * t615;
t581 = -t616 + t678;
t517 = -t581 * t614 + t685;
t470 = t517 * t605 + t606 * t664;
t473 = t517 * t606 - t605 * t664;
t746 = t470 * t615 + t473 * t612;
t398 = t470 * t612 - t473 * t615;
t715 = pkin(7) * t511;
t576 = g(1) * t615 + g(2) * t612;
t559 = -pkin(1) * t617 - t576;
t575 = g(1) * t612 - t615 * g(2);
t632 = qJDD(1) * pkin(1) + t575;
t482 = t605 * t559 - t606 * t632;
t483 = t606 * t559 + t605 * t632;
t645 = t482 * t605 + t606 * t483;
t412 = t482 * t606 - t483 * t605;
t702 = t412 * t615;
t744 = -t612 * t645 + t702;
t703 = t412 * t612;
t342 = t615 * t645 + t703;
t565 = qJDD(1) * t605 + t606 * t617;
t566 = qJDD(1) * t606 - t605 * t617;
t490 = -t565 * t612 + t615 * t566;
t601 = g(3) - qJDD(2);
t529 = qJ(2) * t565 - t601 * t606;
t634 = -qJ(2) * t566 - t601 * t605;
t743 = -pkin(6) * t490 + t529 * t612 + t615 * t634;
t740 = pkin(2) * t507;
t716 = pkin(7) * t507;
t710 = qJ(2) * t494;
t488 = qJ(2) * t496;
t610 = sin(qJ(6));
t613 = cos(qJ(6));
t671 = qJD(1) * t614;
t553 = -qJD(3) * t613 + t610 * t671;
t554 = qJD(3) * t610 + t613 * t671;
t499 = t553 * t554;
t631 = t648 + t665;
t545 = qJDD(6) + t631;
t729 = -t499 + t545;
t739 = t610 * t729;
t738 = t613 * t729;
t654 = pkin(1) * t494 + pkin(2) * t570 + pkin(7) * t567;
t728 = t615 * t565 + t566 * t612;
t735 = pkin(6) * t728 + t529 * t615 - t612 * t634;
t734 = (-t563 + t592) * pkin(3);
t510 = t581 * t611 + t675;
t672 = qJD(1) * t611;
t572 = -qJD(3) * pkin(4) - qJ(5) * t672;
t726 = -t572 * t672 - qJDD(5);
t593 = pkin(4) * t678;
t661 = 0.2e1 * qJD(5) * qJD(1);
t725 = -qJD(3) * t572 + t614 * t661 + t593;
t562 = -t592 + t664;
t724 = -t562 * pkin(4) + t726;
t591 = t614 * t601;
t640 = qJDD(3) * pkin(3) + t616 * qJ(4) - qJDD(4) - t591;
t467 = -pkin(2) * t617 + qJDD(1) * pkin(7) + t483;
t637 = -pkin(3) * t614 - qJ(4) * t611;
t558 = t637 * qJD(1);
t643 = qJD(1) * t558 + t467;
t622 = t611 * t643 - t640;
t543 = t553 ^ 2;
t544 = t554 ^ 2;
t584 = qJD(6) + t672;
t582 = t584 ^ 2;
t722 = pkin(3) + pkin(4);
t721 = pkin(4) + pkin(8);
t713 = pkin(5) + qJ(4);
t709 = qJ(4) * t570;
t707 = qJ(4) * t614;
t706 = qJ(5) * t562;
t674 = -t614 * t467 + t611 * t601;
t653 = t616 * pkin(3) + t674;
t669 = -0.2e1 * qJD(5) + t558;
t618 = ((2 * qJD(4)) + t572) * qJD(3) + t669 * t671 - t593 - t706 - t653;
t639 = pkin(5) * t611 + pkin(8) * t614;
t355 = -t616 * pkin(8) + qJDD(3) * t713 - t639 * t732 + t618;
t705 = t355 * t610;
t704 = t355 * t613;
t464 = t499 + t545;
t701 = t464 * t613;
t466 = -qJDD(1) * pkin(2) - t617 * pkin(7) + t482;
t700 = t466 * t611;
t699 = t466 * t614;
t698 = t553 * t584;
t695 = t561 * t614;
t692 = t563 * t611;
t681 = t584 * t610;
t680 = t584 * t613;
t677 = t610 * t464;
t676 = t611 * t467;
t668 = pkin(3) + t721;
t666 = qJD(4) * qJD(3);
t663 = qJDD(3) * qJ(4);
t662 = -t544 - t582;
t660 = t611 * t499;
t659 = t614 * t499;
t658 = qJ(5) * t678;
t652 = qJD(3) * t614 * qJ(5);
t651 = qJD(4) * t672;
t442 = t591 + t676;
t374 = t442 * t611 - t614 * t674;
t504 = -t575 * t612 - t615 * t576;
t642 = t605 * t657;
t641 = t606 * t657;
t569 = qJDD(1) * t615 - t612 * t617;
t638 = -pkin(6) * t569 - g(3) * t612;
t636 = pkin(3) * t611 - t707;
t480 = t553 * qJD(6) - qJDD(3) * t610 - t613 * t562;
t589 = 0.2e1 * t651;
t627 = -t562 * pkin(3) + t466 + (-t631 - t648) * qJ(4);
t620 = t627 + t726;
t336 = pkin(5) * t665 - t658 + t589 + t721 * t562 + (0.2e1 * pkin(5) * t614 + (-pkin(3) - pkin(8)) * t611) * t667 - t620;
t629 = -pkin(4) * t573 - t631 * qJ(5) - t640;
t623 = t629 + t676;
t356 = -t616 * pkin(5) - qJDD(3) * pkin(8) + (t652 + (-qJD(1) * t639 + t669) * t611) * qJD(1) + t623;
t299 = -t336 * t613 + t356 * t610;
t300 = t336 * t610 + t356 * t613;
t263 = -t299 * t613 + t300 * t610;
t264 = t610 * t299 + t300 * t613;
t373 = t442 * t614 + t611 * t674;
t485 = t692 + t695;
t503 = t575 * t615 - t576 * t612;
t633 = qJDD(3) * t613 - t562 * t610;
t630 = -t558 * t671 + t653;
t628 = t480 + t698;
t626 = t630 - t663;
t625 = t589 - t627;
t624 = (qJD(6) - t584) * t554 - t633;
t404 = -t626 + 0.2e1 * t666;
t596 = -0.2e1 * t666;
t619 = t596 + (-qJDD(3) - t574) * qJ(4) - t740 + t630;
t392 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t672 + t627;
t376 = -pkin(3) * t592 + qJ(4) * t561 + t625;
t587 = t611 * t661;
t579 = t616 - t679;
t568 = qJDD(1) * t612 + t615 * t617;
t556 = t636 * qJDD(1);
t549 = t673 * t667;
t531 = -pkin(6) * t568 + g(3) * t615;
t530 = (-t611 * t722 + t707) * qJDD(1);
t525 = -t544 + t582;
t524 = t543 - t582;
t523 = -t599 * t667 + t614 * t631;
t522 = -t562 * t611 - t600 * t667;
t521 = qJDD(3) * t605 + t549 * t606;
t520 = -qJDD(3) * t606 + t549 * t605;
t513 = -t579 * t611 + t550;
t506 = t579 * t614 + t686;
t505 = (t562 - t592) * t614;
t502 = -qJ(4) * t563 - qJ(5) * t573;
t498 = t544 - t543;
t481 = -t582 - t543;
t479 = qJD(6) * t554 - t633;
t477 = t523 * t606 - t642;
t476 = t522 * t606 + t642;
t475 = t523 * t605 + t641;
t474 = t522 * t605 - t641;
t471 = t513 * t606 + t605 * t665;
t468 = t513 * t605 - t606 * t665;
t465 = -qJ(5) * t574 + t561 * t722;
t462 = -t543 - t544;
t447 = (t553 * t610 + t554 * t613) * t584;
t446 = (-t553 * t613 + t554 * t610) * t584;
t438 = -t520 * t612 + t521 * t615;
t437 = t520 * t615 + t521 * t612;
t436 = t480 - t698;
t431 = (-qJD(6) - t584) * t554 + t633;
t429 = t479 * t613 - t553 * t681;
t428 = t479 * t610 + t553 * t680;
t427 = t480 * t610 - t554 * t680;
t426 = -t480 * t613 - t554 * t681;
t420 = -t446 * t611 + t545 * t614;
t419 = t699 + t716;
t418 = t525 * t613 + t739;
t417 = t524 * t610 + t701;
t416 = t700 - t715;
t415 = t525 * t610 - t738;
t414 = -t524 * t613 + t677;
t408 = -t674 + t740;
t407 = t442 - t720;
t406 = -t610 * t662 - t701;
t405 = t613 * t662 - t677;
t403 = pkin(1) * t601 + qJ(2) * t645;
t402 = -t475 * t612 + t477 * t615;
t401 = -t474 * t612 + t476 * t615;
t400 = t475 * t615 + t477 * t612;
t399 = t474 * t615 + t476 * t612;
t397 = -t468 * t612 + t471 * t615;
t395 = t468 * t615 + t471 * t612;
t394 = t481 * t613 - t739;
t393 = t610 * t481 + t738;
t391 = t622 + t709;
t390 = pkin(3) * t570 + t404;
t389 = -t426 * t611 + t659;
t388 = -t428 * t611 - t659;
t377 = t625 - t734;
t370 = (t611 * t669 + t652) * qJD(1) + t623;
t369 = t618 + t663;
t368 = -t431 * t610 + t613 * t628;
t367 = t610 * t436 + t613 * t624;
t366 = t431 * t613 + t610 * t628;
t365 = -t436 * t613 + t610 * t624;
t364 = -pkin(3) * t573 + t622 - t748;
t363 = t392 + t658 + t724;
t362 = t420 * t606 - t447 * t605;
t361 = t420 * t605 + t447 * t606;
t360 = -pkin(3) * t578 + t619;
t359 = -qJ(5) * t648 - t709 + t587 + (qJ(5) * qJDD(1) - t643) * t611 - t629;
t358 = -t415 * t611 + t436 * t614;
t357 = -t414 * t611 + t614 * t624;
t354 = t406 * t611 + t614 * t628;
t353 = -t406 * t614 + t611 * t628;
t352 = t373 * t606 - t710;
t351 = t373 * t605 + t488;
t350 = t596 - t722 * t570 + (t562 + t664) * qJ(5) + t626 + t725;
t349 = (t578 - t678) * qJ(5) + t376 - t724;
t348 = t394 * t611 + t431 * t614;
t347 = -t394 * t614 + t431 * t611;
t346 = -pkin(3) * t508 + t376 * t614 - t716;
t345 = qJ(4) * t691 - t377 * t611 - t715;
t344 = t374 * t606 + t466 * t605;
t343 = t374 * t605 - t466 * t606;
t340 = -t366 * t611 + t498 * t614;
t339 = -0.2e1 * t651 + (-t580 + t678) * qJ(5) + (-t562 - t563) * pkin(4) + t734 + t620;
t338 = t404 * t614 + t611 * t622;
t337 = t404 * t611 - t614 * t622;
t335 = t389 * t606 - t427 * t605;
t334 = t388 * t606 - t429 * t605;
t333 = t389 * t605 + t427 * t606;
t332 = t388 * t605 + t429 * t606;
t331 = t367 * t611 + t462 * t614;
t330 = -t367 * t614 + t462 * t611;
t329 = -t578 * t722 + t619 + t706 + t725;
t328 = t587 + t722 * t573 + (-t611 * t558 - t652) * qJD(1) - t623 + t748;
t327 = -t390 * t611 + t391 * t614;
t326 = -t408 * t605 + t419 * t606 + t712;
t325 = -t407 * t605 + t416 * t606 + t711;
t324 = t358 * t606 - t418 * t605;
t323 = t357 * t606 - t417 * t605;
t322 = t358 * t605 + t418 * t606;
t321 = t357 * t605 + t417 * t606;
t320 = -t339 * t611 + t502 * t614 + t715;
t319 = t349 * t614 - t465 * t611 - t716;
t318 = t354 * t606 - t405 * t605;
t317 = t354 * t605 + t405 * t606;
t316 = t408 * t606 + t419 * t605 - t647;
t315 = t407 * t606 + t416 * t605 + t646;
t314 = t327 * t606 - t556 * t605 - t710;
t313 = t327 * t605 + t556 * t606 + t488;
t312 = t369 * t614 + t370 * t611;
t311 = t369 * t611 - t370 * t614;
t310 = t348 * t606 - t393 * t605;
t309 = t348 * t605 + t393 * t606;
t308 = -qJ(4) * t363 - qJ(5) * t370;
t307 = t338 * t606 + t392 * t605;
t306 = t338 * t605 - t392 * t606;
t305 = -t350 * t611 + t359 * t614;
t304 = t340 * t606 - t368 * t605;
t303 = t340 * t605 + t368 * t606;
t302 = t331 * t606 - t365 * t605;
t301 = t331 * t605 + t365 * t606;
t297 = -t343 * t612 + t344 * t615;
t296 = t343 * t615 + t344 * t612;
t295 = -pkin(2) * t337 + pkin(3) * t622 - qJ(4) * t404;
t294 = t345 * t606 - t364 * t605 + t711;
t293 = t346 * t606 - t360 * t605 - t712;
t292 = t305 * t606 - t530 * t605 + t710;
t291 = t305 * t605 + t530 * t606 - t488;
t290 = -pkin(7) * t337 + t392 * t636;
t289 = t345 * t605 + t364 * t606 + t646;
t288 = t346 * t605 + t360 * t606 + t647;
t287 = -qJ(5) * t369 - t363 * t722;
t286 = t312 * t606 + t363 * t605;
t285 = t312 * t605 - t363 * t606;
t284 = -qJ(5) * t367 + t365 * t713;
t283 = -qJ(2) * t343 - (pkin(2) * t605 - pkin(7) * t606) * t373;
t282 = -qJ(5) * t628 + t405 * t668 - t704;
t281 = t319 * t606 - t329 * t605 - t712;
t280 = t320 * t606 - t328 * t605 - t711;
t279 = -qJ(5) * t431 + t393 * t668 - t705;
t278 = -t317 * t612 + t318 * t615;
t277 = t317 * t615 + t318 * t612;
t276 = t319 * t605 + t329 * t606 + t647;
t275 = t320 * t605 + t328 * t606 - t646;
t274 = -t309 * t612 + t310 * t615;
t273 = t309 * t615 + t310 * t612;
t272 = qJ(2) * t344 - (-pkin(2) * t606 - pkin(7) * t605 - pkin(1)) * t373;
t271 = -t306 * t612 + t307 * t615;
t270 = t306 * t615 + t307 * t612;
t269 = -qJ(5) * t406 + t405 * t713 - t300;
t268 = -qJ(5) * t394 + t393 * t713 - t299;
t267 = -pkin(2) * t311 - qJ(4) * t369 + t370 * t722;
t266 = -t301 * t612 + t302 * t615;
t265 = t301 * t615 + t302 * t612;
t262 = -pkin(2) * t353 + t406 * t668 - t628 * t713 + t705;
t261 = -pkin(2) * t347 + t394 * t668 - t431 * t713 - t704;
t260 = -t285 * t612 + t286 * t615;
t259 = t285 * t615 + t286 * t612;
t258 = t264 * t611 + t355 * t614;
t257 = -t264 * t614 + t355 * t611;
t256 = -pkin(7) * t311 - t287 * t611 + t308 * t614;
t255 = -qJ(2) * t306 + t290 * t606 - t295 * t605;
t254 = -qJ(5) * t462 + t365 * t668 + t263;
t253 = -pkin(1) * t337 + qJ(2) * t307 + t290 * t605 + t295 * t606;
t252 = -pkin(7) * t353 + t269 * t614 - t282 * t611;
t251 = -pkin(7) * t347 + t268 * t614 - t279 * t611;
t250 = -pkin(2) * t330 + t367 * t668 - t462 * t713 + t264;
t249 = t258 * t606 - t263 * t605;
t248 = t258 * t605 + t263 * t606;
t247 = -pkin(7) * t330 - t254 * t611 + t284 * t614;
t246 = -qJ(2) * t285 + t256 * t606 - t267 * t605;
t245 = -qJ(5) * t264 + t263 * t713;
t244 = -qJ(2) * t317 + t252 * t606 - t262 * t605;
t243 = -qJ(5) * t355 + t263 * t668;
t242 = -pkin(1) * t311 + qJ(2) * t286 + t256 * t605 + t267 * t606;
t241 = -qJ(2) * t309 + t251 * t606 - t261 * t605;
t240 = -pkin(1) * t353 + qJ(2) * t318 + t252 * t605 + t262 * t606;
t239 = -pkin(1) * t347 + qJ(2) * t310 + t251 * t605 + t261 * t606;
t238 = -t248 * t612 + t249 * t615;
t237 = t248 * t615 + t249 * t612;
t236 = -pkin(2) * t257 + t264 * t668 - t355 * t713;
t235 = -qJ(2) * t301 + t247 * t606 - t250 * t605;
t234 = -pkin(1) * t330 + qJ(2) * t302 + t247 * t605 + t250 * t606;
t233 = -pkin(7) * t257 - t243 * t611 + t245 * t614;
t232 = -qJ(2) * t248 + t233 * t606 - t236 * t605;
t231 = -pkin(1) * t257 + qJ(2) * t249 + t233 * t605 + t236 * t606;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t568, -t569, 0, t504, 0, 0, 0, 0, 0, 0, -t728, -t490, 0, t342, 0, 0, 0, 0, 0, 0, t386, t387, -t425, t297, 0, 0, 0, 0, 0, 0, t386, -t425, -t387, t271, 0, 0, 0, 0, 0, 0, -t387, -t386, t425, t260, 0, 0, 0, 0, 0, 0, t274, t278, t266, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t569, -t568, 0, t503, 0, 0, 0, 0, 0, 0, t490, -t728, 0, -t744, 0, 0, 0, 0, 0, 0, -t381, -t380, t422, t296, 0, 0, 0, 0, 0, 0, -t381, t422, t380, t270, 0, 0, 0, 0, 0, 0, t380, t381, -t422, t259, 0, 0, 0, 0, 0, 0, t273, t277, t265, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t601, 0, 0, 0, 0, 0, 0, t511, -t507, 0, -t373, 0, 0, 0, 0, 0, 0, t511, 0, t507, t337, 0, 0, 0, 0, 0, 0, t507, -t511, 0, t311, 0, 0, 0, 0, 0, 0, t347, t353, t330, t257; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t569, 0, -t568, 0, t638, -t531, -t503, -pkin(6) * t503, 0, 0, t490, 0, -t728, 0, t743, t735, t744, pkin(6) * t744 + qJ(2) * t702 - t403 * t612, t402, t375, t397, t401, t398, t438, -t315 * t612 + t325 * t615 + t718, -t316 * t612 + t326 * t615 + t719, -t351 * t612 + t352 * t615 - t717, -pkin(6) * t296 - t272 * t612 + t283 * t615, t402, t397, -t375, t438, -t398, t401, -t289 * t612 + t294 * t615 + t718, -t313 * t612 + t314 * t615 - t717, -t288 * t612 + t293 * t615 - t719, -pkin(6) * t270 - t253 * t612 + t255 * t615, t401, t375, t398, t402, t397, t438, -t276 * t612 + t281 * t615 - t719, -t275 * t612 + t280 * t615 - t718, -t291 * t612 + t292 * t615 + t717, -pkin(6) * t259 - t242 * t612 + t246 * t615, -t333 * t612 + t335 * t615, -t303 * t612 + t304 * t615, -t322 * t612 + t324 * t615, -t332 * t612 + t334 * t615, -t321 * t612 + t323 * t615, -t361 * t612 + t362 * t615, -pkin(6) * t273 - t239 * t612 + t241 * t615, -pkin(6) * t277 - t240 * t612 + t244 * t615, -pkin(6) * t265 - t234 * t612 + t235 * t615, -pkin(6) * t237 - t231 * t612 + t232 * t615; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t568, 0, t569, 0, t531, t638, t504, pkin(6) * t504, 0, 0, t728, 0, t490, 0, -t735, t743, t342, pkin(6) * t342 + qJ(2) * t703 + t403 * t615, t400, -t747, t395, t399, -t746, t437, t315 * t615 + t325 * t612 + t379, t316 * t615 + t326 * t612 + t378, t351 * t615 + t352 * t612 - t421, pkin(6) * t297 + t272 * t615 + t283 * t612, t400, t395, t747, t437, t746, t399, t289 * t615 + t294 * t612 + t379, t313 * t615 + t314 * t612 - t421, t288 * t615 + t293 * t612 - t378, pkin(6) * t271 + t253 * t615 + t255 * t612, t399, -t747, -t746, t400, t395, t437, t276 * t615 + t281 * t612 - t378, t275 * t615 + t280 * t612 - t379, t291 * t615 + t292 * t612 + t421, pkin(6) * t260 + t242 * t615 + t246 * t612, t333 * t615 + t335 * t612, t303 * t615 + t304 * t612, t322 * t615 + t324 * t612, t332 * t615 + t334 * t612, t321 * t615 + t323 * t612, t361 * t615 + t362 * t612, pkin(6) * t274 + t239 * t615 + t241 * t612, pkin(6) * t278 + t240 * t615 + t244 * t612, pkin(6) * t266 + t234 * t615 + t235 * t612, pkin(6) * t238 + t231 * t615 + t232 * t612; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t575, t576, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t566 - t482, -pkin(1) * t565 - t483, 0, -pkin(1) * t412, t508, t485, t506, t505, t510, 0, t655 - t699, -t656 + t700, t374 + t654, pkin(1) * t343 - pkin(2) * t466 + pkin(7) * t374, t508, t506, -t485, 0, -t510, t505, qJ(4) * t692 + t377 * t614 + t655, t390 * t614 + t391 * t611 + t654, pkin(3) * t695 + t376 * t611 + t656, pkin(1) * t306 + pkin(7) * t338 + (-pkin(2) + t637) * t392, t505, t485, t510, t508, t506, 0, t349 * t611 + t465 * t614 + t656, t339 * t614 + t502 * t611 - t655, t350 * t614 + t359 * t611 - t654, pkin(1) * t285 - pkin(2) * t363 + pkin(7) * t312 + t287 * t614 + t308 * t611, t426 * t614 + t660, t366 * t614 + t498 * t611, t415 * t614 + t436 * t611, t428 * t614 - t660, t414 * t614 + t611 * t624, t446 * t614 + t545 * t611, pkin(1) * t309 + pkin(2) * t393 + pkin(7) * t348 + t268 * t611 + t279 * t614, pkin(1) * t317 + pkin(2) * t405 + pkin(7) * t354 + t269 * t611 + t282 * t614, pkin(1) * t301 + pkin(2) * t365 + pkin(7) * t331 + t254 * t614 + t284 * t611, pkin(1) * t248 + pkin(2) * t263 + pkin(7) * t258 + t243 * t614 + t245 * t611;];
tauB_reg  = t1;
