% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:43
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:43:27
% EndTime: 2019-05-05 16:43:30
% DurationCPUTime: 3.87s
% Computational Cost: add. (5962->268), mult. (12379->266), div. (0->0), fcn. (6610->8), ass. (0->153)
t1560 = sin(qJ(3));
t1563 = cos(qJ(3));
t1566 = qJD(1) ^ 2;
t1585 = t1560 * t1563 * t1566;
t1527 = qJDD(3) - t1585;
t1549 = t1560 ^ 2;
t1565 = qJD(3) ^ 2;
t1531 = t1549 * t1566 + t1565;
t1499 = t1527 * t1563 - t1531 * t1560;
t1603 = qJD(3) * t1563;
t1584 = qJD(1) * t1603;
t1590 = t1560 * qJDD(1);
t1517 = 0.2e1 * t1584 + t1590;
t1555 = sin(pkin(9));
t1556 = cos(pkin(9));
t1473 = t1499 * t1555 + t1517 * t1556;
t1477 = t1499 * t1556 - t1517 * t1555;
t1561 = sin(qJ(1));
t1564 = cos(qJ(1));
t1452 = t1473 * t1564 + t1477 * t1561;
t1615 = t1473 * t1561 - t1477 * t1564;
t1526 = qJDD(3) + t1585;
t1550 = t1563 ^ 2;
t1596 = t1550 * t1566;
t1532 = t1565 + t1596;
t1500 = t1526 * t1560 + t1532 * t1563;
t1604 = qJD(3) * t1560;
t1542 = qJD(1) * t1604;
t1589 = t1563 * qJDD(1);
t1519 = -0.2e1 * t1542 + t1589;
t1474 = t1500 * t1555 - t1519 * t1556;
t1478 = t1500 * t1556 + t1519 * t1555;
t1614 = t1474 * t1564 + t1478 * t1561;
t1455 = t1474 * t1561 - t1478 * t1564;
t1591 = t1549 + t1550;
t1522 = t1591 * qJDD(1);
t1525 = t1591 * t1566;
t1491 = t1522 * t1555 + t1525 * t1556;
t1493 = t1522 * t1556 - t1525 * t1555;
t1465 = t1491 * t1564 + t1493 * t1561;
t1613 = t1491 * t1561 - t1493 * t1564;
t1606 = qJD(1) * t1560;
t1607 = qJD(3) * pkin(4);
t1612 = qJDD(5) + (-qJ(5) * t1606 - t1607) * t1606 - qJ(5) * t1596;
t1559 = sin(qJ(6));
t1562 = cos(qJ(6));
t1605 = qJD(1) * t1563;
t1511 = -t1562 * qJD(3) + t1559 * t1605;
t1611 = t1511 ^ 2;
t1512 = qJD(3) * t1559 + t1562 * t1605;
t1610 = t1512 ^ 2;
t1534 = qJD(6) + t1606;
t1609 = t1534 ^ 2;
t1608 = 2 * qJD(4);
t1602 = qJDD(3) * qJ(4);
t1601 = t1511 * t1512;
t1529 = -g(1) * t1564 - g(2) * t1561;
t1515 = -pkin(1) * t1566 + t1529;
t1528 = g(1) * t1561 - g(2) * t1564;
t1573 = qJDD(1) * pkin(1) + t1528;
t1489 = t1556 * t1515 + t1555 * t1573;
t1486 = -pkin(2) * t1566 + qJDD(1) * pkin(7) + t1489;
t1595 = t1560 * t1486;
t1514 = (-pkin(3) * t1563 - qJ(4) * t1560) * qJD(1);
t1594 = -(2 * qJD(5)) + t1514;
t1593 = qJD(6) - t1534;
t1592 = qJD(6) + t1534;
t1551 = -g(3) + qJDD(2);
t1472 = t1563 * t1486 + t1560 * t1551;
t1588 = qJ(5) * t1603;
t1587 = qJ(5) * t1604;
t1583 = -(pkin(5) * t1560 + pkin(8) * t1563) * qJD(1) + t1594;
t1582 = -t1565 * pkin(3) + t1472;
t1581 = -t1609 - t1610;
t1488 = -t1555 * t1515 + t1556 * t1573;
t1520 = -qJDD(1) * t1555 - t1556 * t1566;
t1521 = qJDD(1) * t1556 - t1555 * t1566;
t1580 = t1564 * t1520 - t1521 * t1561;
t1518 = -t1542 + t1589;
t1579 = -t1559 * qJDD(3) - t1562 * t1518;
t1541 = t1563 * t1551;
t1578 = -qJDD(3) * pkin(3) - t1565 * qJ(4) + qJDD(4) - t1541;
t1485 = -qJDD(1) * pkin(2) - t1566 * pkin(7) - t1488;
t1574 = t1584 + t1590;
t1570 = -t1518 * pkin(3) + t1485 + (-t1574 - t1584) * qJ(4);
t1434 = pkin(5) * t1590 + t1606 * t1608 + (pkin(4) + pkin(8)) * t1518 + (0.2e1 * pkin(5) * t1563 + (-pkin(3) - pkin(8)) * t1560) * qJD(3) * qJD(1) - t1570 + t1612;
t1569 = -pkin(4) * t1526 - t1574 * qJ(5) + t1578 + t1595;
t1444 = -t1565 * pkin(5) - qJDD(3) * pkin(8) + (t1560 * t1583 + t1588) * qJD(1) + t1569;
t1577 = t1434 * t1562 - t1444 * t1559;
t1576 = t1520 * t1561 + t1521 * t1564;
t1497 = t1526 * t1563 - t1532 * t1560;
t1495 = t1527 * t1560 + t1531 * t1563;
t1575 = -t1562 * qJDD(3) + t1559 * t1518;
t1572 = -qJDD(6) - t1574;
t1571 = -t1511 * t1593 - t1579;
t1568 = -t1572 - t1601;
t1567 = (t1608 - t1607) * qJD(3) - pkin(4) * t1596 - t1518 * qJ(5) + t1582;
t1456 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t1606 + t1570;
t1524 = -qJDD(1) * t1561 - t1564 * t1566;
t1523 = qJDD(1) * t1564 - t1561 * t1566;
t1487 = -t1609 - t1611;
t1484 = t1572 - t1601;
t1483 = -t1610 - t1611;
t1471 = t1541 - t1595;
t1470 = t1511 * t1592 + t1579;
t1469 = t1512 * t1593 + t1575;
t1468 = -t1512 * t1592 - t1575;
t1464 = -t1488 * t1555 + t1489 * t1556;
t1463 = t1488 * t1556 + t1489 * t1555;
t1462 = (qJD(1) * t1514 + t1486) * t1560 + t1578;
t1461 = t1562 * t1484 - t1559 * t1581;
t1460 = t1559 * t1484 + t1562 * t1581;
t1459 = qJD(3) * t1608 + t1514 * t1605 + t1582 + t1602;
t1458 = t1562 * t1487 - t1559 * t1568;
t1457 = t1559 * t1487 + t1562 * t1568;
t1451 = -t1471 * t1560 + t1472 * t1563;
t1450 = t1471 * t1563 + t1472 * t1560;
t1449 = (t1560 * t1594 + t1588) * qJD(1) + t1569;
t1448 = t1602 + (t1563 * t1594 - t1587) * qJD(1) + t1567;
t1447 = t1562 * t1469 - t1559 * t1571;
t1446 = t1559 * t1469 + t1562 * t1571;
t1445 = -t1518 * pkin(4) + t1456 - t1612;
t1443 = -t1565 * pkin(8) + (pkin(5) + qJ(4)) * qJDD(3) + (t1563 * t1583 - t1587) * qJD(1) + t1567;
t1442 = t1461 * t1560 + t1470 * t1563;
t1441 = -t1461 * t1563 + t1470 * t1560;
t1440 = t1458 * t1560 + t1468 * t1563;
t1439 = -t1458 * t1563 + t1468 * t1560;
t1438 = t1451 * t1556 + t1485 * t1555;
t1437 = t1451 * t1555 - t1485 * t1556;
t1436 = t1459 * t1563 + t1462 * t1560;
t1435 = t1459 * t1560 - t1462 * t1563;
t1433 = t1447 * t1560 + t1483 * t1563;
t1432 = -t1447 * t1563 + t1483 * t1560;
t1431 = t1442 * t1556 - t1460 * t1555;
t1430 = t1442 * t1555 + t1460 * t1556;
t1429 = t1448 * t1563 + t1449 * t1560;
t1428 = t1448 * t1560 - t1449 * t1563;
t1427 = t1440 * t1556 - t1457 * t1555;
t1426 = t1440 * t1555 + t1457 * t1556;
t1425 = t1436 * t1556 + t1456 * t1555;
t1424 = t1436 * t1555 - t1456 * t1556;
t1423 = t1433 * t1556 - t1446 * t1555;
t1422 = t1433 * t1555 + t1446 * t1556;
t1421 = t1434 * t1559 + t1444 * t1562;
t1419 = t1429 * t1556 + t1445 * t1555;
t1418 = t1429 * t1555 - t1445 * t1556;
t1417 = t1562 * t1421 - t1559 * t1577;
t1416 = t1559 * t1421 + t1562 * t1577;
t1415 = t1417 * t1560 + t1443 * t1563;
t1414 = -t1417 * t1563 + t1443 * t1560;
t1413 = t1415 * t1556 - t1416 * t1555;
t1412 = t1415 * t1555 + t1416 * t1556;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1524, -t1523, 0, -t1528 * t1561 + t1529 * t1564, 0, 0, 0, 0, 0, 0, t1580, -t1576, 0, -t1463 * t1561 + t1464 * t1564, 0, 0, 0, 0, 0, 0, t1455, t1615, -t1613, -t1437 * t1561 + t1438 * t1564, 0, 0, 0, 0, 0, 0, t1455, -t1613, -t1615, -t1424 * t1561 + t1425 * t1564, 0, 0, 0, 0, 0, 0, -t1615, -t1455, t1613, -t1418 * t1561 + t1419 * t1564, 0, 0, 0, 0, 0, 0, -t1426 * t1561 + t1427 * t1564, -t1430 * t1561 + t1431 * t1564, -t1422 * t1561 + t1423 * t1564, -t1412 * t1561 + t1413 * t1564; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1523, t1524, 0, t1528 * t1564 + t1529 * t1561, 0, 0, 0, 0, 0, 0, t1576, t1580, 0, t1463 * t1564 + t1464 * t1561, 0, 0, 0, 0, 0, 0, -t1614, -t1452, t1465, t1437 * t1564 + t1438 * t1561, 0, 0, 0, 0, 0, 0, -t1614, t1465, t1452, t1424 * t1564 + t1425 * t1561, 0, 0, 0, 0, 0, 0, t1452, t1614, -t1465, t1418 * t1564 + t1419 * t1561, 0, 0, 0, 0, 0, 0, t1426 * t1564 + t1427 * t1561, t1430 * t1564 + t1431 * t1561, t1422 * t1564 + t1423 * t1561, t1412 * t1564 + t1413 * t1561; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1551, 0, 0, 0, 0, 0, 0, t1497, -t1495, 0, t1450, 0, 0, 0, 0, 0, 0, t1497, 0, t1495, t1435, 0, 0, 0, 0, 0, 0, t1495, -t1497, 0, t1428, 0, 0, 0, 0, 0, 0, t1439, t1441, t1432, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1566, -qJDD(1), 0, t1529, 0, 0, 0, 0, 0, 0, t1520, -t1521, 0, t1464, 0, 0, 0, 0, 0, 0, -t1478, -t1477, t1493, t1438, 0, 0, 0, 0, 0, 0, -t1478, t1493, t1477, t1425, 0, 0, 0, 0, 0, 0, t1477, t1478, -t1493, t1419, 0, 0, 0, 0, 0, 0, t1427, t1431, t1423, t1413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1566, 0, t1528, 0, 0, 0, 0, 0, 0, t1521, t1520, 0, t1463, 0, 0, 0, 0, 0, 0, -t1474, -t1473, t1491, t1437, 0, 0, 0, 0, 0, 0, -t1474, t1491, t1473, t1424, 0, 0, 0, 0, 0, 0, t1473, t1474, -t1491, t1418, 0, 0, 0, 0, 0, 0, t1426, t1430, t1422, t1412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1551, 0, 0, 0, 0, 0, 0, t1497, -t1495, 0, t1450, 0, 0, 0, 0, 0, 0, t1497, 0, t1495, t1435, 0, 0, 0, 0, 0, 0, t1495, -t1497, 0, t1428, 0, 0, 0, 0, 0, 0, t1439, t1441, t1432, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1566, -qJDD(1), 0, t1489, 0, 0, 0, 0, 0, 0, -t1500, -t1499, t1522, t1451, 0, 0, 0, 0, 0, 0, -t1500, t1522, t1499, t1436, 0, 0, 0, 0, 0, 0, t1499, t1500, -t1522, t1429, 0, 0, 0, 0, 0, 0, t1440, t1442, t1433, t1415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1566, 0, t1488, 0, 0, 0, 0, 0, 0, t1519, -t1517, t1525, -t1485, 0, 0, 0, 0, 0, 0, t1519, t1525, t1517, -t1456, 0, 0, 0, 0, 0, 0, t1517, -t1519, -t1525, -t1445, 0, 0, 0, 0, 0, 0, t1457, t1460, t1446, t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1551, 0, 0, 0, 0, 0, 0, t1497, -t1495, 0, t1450, 0, 0, 0, 0, 0, 0, t1497, 0, t1495, t1435, 0, 0, 0, 0, 0, 0, t1495, -t1497, 0, t1428, 0, 0, 0, 0, 0, 0, t1439, t1441, t1432, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1532, -t1527, t1589, t1472, 0, 0, 0, 0, 0, 0, -t1532, t1589, t1527, t1459, 0, 0, 0, 0, 0, 0, t1527, t1532, -t1589, t1448, 0, 0, 0, 0, 0, 0, t1468, t1470, t1483, t1443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1526, -t1531, -t1590, t1471, 0, 0, 0, 0, 0, 0, t1526, -t1590, t1531, -t1462, 0, 0, 0, 0, 0, 0, t1531, -t1526, t1590, -t1449, 0, 0, 0, 0, 0, 0, -t1458, -t1461, -t1447, -t1417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1519, t1517, -t1525, t1485, 0, 0, 0, 0, 0, 0, -t1519, -t1525, -t1517, t1456, 0, 0, 0, 0, 0, 0, -t1517, t1519, t1525, t1445, 0, 0, 0, 0, 0, 0, -t1457, -t1460, -t1446, -t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1532, t1589, t1527, t1459, 0, 0, 0, 0, 0, 0, t1527, t1532, -t1589, t1448, 0, 0, 0, 0, 0, 0, t1468, t1470, t1483, t1443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1519, -t1525, -t1517, t1456, 0, 0, 0, 0, 0, 0, -t1517, t1519, t1525, t1445, 0, 0, 0, 0, 0, 0, -t1457, -t1460, -t1446, -t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1526, t1590, -t1531, t1462, 0, 0, 0, 0, 0, 0, -t1531, t1526, -t1590, t1449, 0, 0, 0, 0, 0, 0, t1458, t1461, t1447, t1417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1531, t1526, -t1590, t1449, 0, 0, 0, 0, 0, 0, t1458, t1461, t1447, t1417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1527, -t1532, t1589, -t1448, 0, 0, 0, 0, 0, 0, -t1468, -t1470, -t1483, -t1443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1517, -t1519, -t1525, -t1445, 0, 0, 0, 0, 0, 0, t1457, t1460, t1446, t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1487, t1484, t1469, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1568, t1581, t1571, t1577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1468, t1470, t1483, t1443;];
f_new_reg  = t1;
