% Calculate minimal parameter regressor of coriolis matrix for
% S6RPRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPRPPR3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPPR3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:45:28
% EndTime: 2019-03-09 02:45:32
% DurationCPUTime: 1.59s
% Computational Cost: add. (815->179), mult. (1484->240), div. (0->0), fcn. (1214->6), ass. (0->149)
t96 = cos(qJ(3));
t134 = t96 * qJD(4);
t94 = sin(qJ(3));
t79 = t94 * qJ(4);
t162 = -t96 * pkin(3) - t79;
t178 = t162 * qJD(3) + t134;
t66 = sin(pkin(9)) * pkin(1) + pkin(7);
t177 = -qJ(5) + t66;
t157 = t96 * qJ(4);
t81 = t94 * pkin(3);
t53 = -t81 + t157;
t74 = t94 * qJD(4);
t176 = t53 * qJD(3) + t74;
t95 = cos(qJ(6));
t165 = t95 * t96;
t93 = sin(qJ(6));
t131 = t93 * t165;
t113 = 0.2e1 * t131;
t87 = t93 ^ 2;
t89 = t95 ^ 2;
t55 = t89 - t87;
t102 = qJD(1) * t113 - t55 * qJD(3);
t175 = -t81 / 0.2e1;
t174 = -pkin(4) - pkin(8);
t173 = t94 * pkin(4);
t67 = -cos(pkin(9)) * pkin(1) - pkin(2);
t38 = t177 * t96;
t32 = t38 * t96;
t92 = qJ(4) + pkin(5);
t171 = t92 * t96;
t24 = t174 * t94 + t171 - t81;
t170 = t93 * t24;
t37 = t177 * t94;
t169 = t93 * t37;
t88 = t94 ^ 2;
t168 = t93 * t88;
t90 = t96 ^ 2;
t69 = t93 * t90;
t167 = t95 * t24;
t166 = t95 * t37;
t97 = -pkin(3) - pkin(4);
t164 = t97 * t94;
t77 = t96 * qJD(3);
t62 = t95 * t77;
t153 = qJD(6) * t94;
t63 = t93 * t153;
t163 = -t63 + t62;
t54 = t88 + t90;
t56 = t90 - t88;
t36 = t162 + t67;
t30 = t96 * pkin(4) - t36;
t99 = t94 * pkin(5) + t96 * pkin(8) + t30;
t8 = -t95 * t99 + t169;
t1 = t94 * t167 + (-t8 + t169) * t96;
t161 = t1 * qJD(1);
t9 = t93 * t99 + t166;
t2 = t170 * t94 + (t9 - t166) * t96;
t160 = t2 * qJD(1);
t4 = -t93 * t32 - t8 * t94;
t159 = t4 * qJD(1);
t5 = -t38 * t165 - t9 * t94;
t158 = t5 * qJD(1);
t156 = qJD(4) * t93;
t155 = qJD(4) * t95;
t154 = qJD(6) * t93;
t152 = qJD(6) * t95;
t40 = t53 - t173;
t13 = t30 * t96 + t40 * t94;
t151 = t13 * qJD(1);
t14 = -t30 * t94 + t40 * t96;
t150 = t14 * qJD(1);
t16 = t37 * t94 + t32;
t148 = t16 * qJD(1);
t18 = t36 * t96 - t53 * t94;
t147 = t18 * qJD(1);
t19 = -t36 * t94 - t53 * t96;
t146 = t19 * qJD(1);
t25 = t157 + t175 + (-pkin(4) / 0.2e1 + t97 / 0.2e1) * t94;
t145 = t25 * qJD(1);
t45 = t69 + t168;
t144 = t45 * qJD(1);
t46 = -t69 + t168;
t143 = t46 * qJD(1);
t47 = t54 * t95;
t142 = t47 * qJD(1);
t48 = t56 * t95;
t141 = t48 * qJD(1);
t139 = t54 * qJD(1);
t138 = t56 * qJD(1);
t73 = t88 * qJD(1);
t72 = t88 * qJD(4);
t137 = t93 * qJD(3);
t76 = t94 * qJD(1);
t75 = t94 * qJD(3);
t136 = t95 * qJD(3);
t135 = t96 * qJD(1);
t133 = t96 * qJD(5);
t132 = t96 * qJD(6);
t130 = t93 * t132;
t129 = t94 * t152;
t64 = t95 * t132;
t128 = t36 * t53 * qJD(1);
t127 = t36 * t76;
t126 = t67 * t76;
t125 = t67 * t135;
t124 = t93 * t77;
t123 = t93 * t152;
t122 = t93 * t73;
t121 = t93 * t76;
t120 = t93 * t136;
t119 = t93 * t135;
t60 = t94 * t77;
t118 = t66 * t75;
t59 = t94 * t135;
t117 = t94 * t134;
t116 = t95 * t135;
t115 = t66 * t77;
t114 = -0.2e1 * t131;
t112 = qJD(6) + t76;
t110 = qJD(3) * t113;
t3 = t30 * t40;
t109 = t3 * qJD(1);
t42 = t112 * t93;
t84 = -pkin(3) + t174;
t108 = t84 * t94 / 0.2e1 + t171 / 0.2e1;
t100 = t24 / 0.2e1 + t108;
t10 = t100 * t93;
t107 = -t10 * qJD(1) + t92 * t136;
t11 = t100 * t95;
t106 = t11 * qJD(1) + t92 * t137;
t39 = (t87 / 0.2e1 - t89 / 0.2e1) * t96;
t105 = -t39 * qJD(1) + t120;
t104 = t95 * qJD(1) * t69 + t39 * qJD(3);
t44 = t55 * t90;
t103 = t44 * qJD(1) + t110;
t101 = -t124 - t129;
t98 = (-t84 * t96 + t92 * t94) * qJD(3) - t134;
t86 = qJ(4) * qJD(4);
t85 = qJD(3) * qJ(4);
t68 = t77 / 0.2e1;
t61 = t95 * t76;
t43 = -t61 - t152;
t41 = t59 + t132 / 0.2e1;
t35 = t39 * qJD(6);
t34 = t38 * qJD(3);
t33 = -t164 / 0.2e1 + t175 - t173 / 0.2e1;
t7 = -t38 * t93 + t167 / 0.2e1 - t108 * t95;
t6 = -t38 * t95 - t170 / 0.2e1 + t108 * t93;
t12 = [0, 0, 0, 0, t60, t56 * qJD(3), 0, 0, 0, t67 * t75, t67 * t77, -t19 * qJD(3) + t117, 0, -t18 * qJD(3) + t72, -t176 * t36, t13 * qJD(3) + t72, -t14 * qJD(3) - t117, t54 * qJD(5), t3 * qJD(3) - t16 * qJD(5) + t30 * t74, -t123 * t90 - t60 * t89, -t44 * qJD(6) + t110 * t94, -t48 * qJD(3) + t130 * t94, -t46 * qJD(3) + t64 * t94, t60, t1 * qJD(3) + t45 * qJD(5) + t5 * qJD(6) + t95 * t72, -t2 * qJD(3) + t47 * qJD(5) - t4 * qJD(6) - t72 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, t59, t138, t77, -t75, 0, -t115 + t126, t118 + t125, -t115 - t146, t178, -t118 - t147, t178 * t66 - t128, -t37 * qJD(3) + t151, t34 - t150 (-t96 * t97 + t79) * qJD(3) - t134 (-t37 * qJ(4) + t38 * t97) * qJD(3) + t38 * qJD(4) + t33 * qJD(5) + t109, -t35 + (-t89 * t135 - t120) * t94, qJD(6) * t114 + t102 * t94, -t124 - t141, -t62 - t143, t41, t7 * qJD(6) - t37 * t136 + t93 * t98 + t161, t6 * qJD(6) + t137 * t37 + t95 * t98 - t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, t77, t73, t115 - t127, t73, -t59, -t77, t30 * t76 + t34, 0, 0, 0, 0, 0, t95 * t73 - t124, -t62 - t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, t33 * qJD(3) - t148, 0, 0, 0, 0, 0, t144, t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, -t103, t96 * t42, t116 * t94 + t64, t68, t7 * qJD(3) - t9 * qJD(6) + t158, t6 * qJD(3) + t8 * qJD(6) - t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t77, -t75, 0, t77, t176, t77, t75, 0 (t157 + t164) * qJD(3) + t74, 0, 0, 0, 0, 0, t163, t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, 0, t75, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75 * t93 + t64, -t136 * t94 - t130; 0, 0, 0, 0, -t59, -t138, 0, 0, 0, -t126, -t125, t146, 0, t147, t128, -t133 - t151, -t94 * qJD(5) + t150, 0, -t25 * qJD(5) - t109, t59 * t89 - t35, t112 * t114, -t129 + t141, t63 + t143, -t41, -t11 * qJD(6) - t133 * t95 - t161, t10 * qJD(6) + t133 * t93 + t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t86, qJD(4), 0, 0, t86, t123, t55 * qJD(6), 0, 0, 0, -t92 * t154 + t155, -t152 * t92 - t156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t85, qJD(3), 0, 0, t85, 0, 0, 0, 0, 0, t136, -t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t76, 0, -t145, 0, 0, 0, 0, 0, -t116, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t102, t43, t42, -t135 / 0.2e1, -t152 * t84 - t106, t154 * t84 - t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, 0, -t73, t127, -t73, t59, 0 (-qJD(1) * t30 - qJD(5)) * t94, 0, 0, 0, 0, 0 (-t73 - t153) * t95, t63 + t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t85, -qJD(3), 0, 0, -t85, 0, 0, 0, 0, 0, -t136, t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t75, -t139, t25 * qJD(3) + t148 + t74, 0, 0, 0, 0, 0, -t144 + t163, t101 - t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, t76, 0, t145, 0, 0, 0, 0, 0, t116, -t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t103 (-t119 + t136) * t94 (-t116 - t137) * t94, t68, -t158 + t11 * qJD(3) + (qJD(5) * t93 + t155) * t94, t159 - t10 * qJD(3) + (qJD(5) * t95 - t156) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t105, t102, t61, -t121, t135 / 0.2e1, t106, t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t12;
