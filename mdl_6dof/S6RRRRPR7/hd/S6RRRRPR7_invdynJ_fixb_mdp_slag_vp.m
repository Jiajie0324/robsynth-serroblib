% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRPR7_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:34:56
% EndTime: 2019-03-09 22:35:35
% DurationCPUTime: 29.62s
% Computational Cost: add. (21947->770), mult. (53968->1045), div. (0->0), fcn. (44153->18), ass. (0->345)
t905 = cos(qJ(2));
t1010 = qJD(1) * t905;
t894 = sin(pkin(6));
t983 = t894 * t1010;
t851 = -qJD(3) + t983;
t1118 = qJD(4) - t851;
t1012 = qJD(1) * t894;
t904 = cos(qJ(3));
t1035 = t904 * t905;
t900 = sin(qJ(2));
t950 = pkin(2) * t900 - pkin(9) * t905;
t805 = t950 * t1012;
t790 = t904 * t805;
t984 = t900 * t1012;
t896 = cos(pkin(6));
t1011 = qJD(1) * t896;
t994 = pkin(1) * t1011;
t804 = -pkin(8) * t984 + t905 * t994;
t899 = sin(qJ(3));
t1080 = pkin(9) + pkin(10);
t985 = qJD(3) * t1080;
t1117 = -t804 * t899 + t790 + (pkin(3) * t900 - pkin(10) * t1035) * t1012 + t904 * t985;
t1020 = t904 * t804 + t899 * t805;
t954 = t899 * t983;
t1115 = -pkin(10) * t954 + t899 * t985 + t1020;
t902 = cos(qJ(6));
t1002 = qJD(6) * t902;
t869 = qJD(2) + t1011;
t955 = t899 * t984;
t784 = -t904 * t869 + t955;
t786 = t869 * t899 + t904 * t984;
t898 = sin(qJ(4));
t903 = cos(qJ(4));
t724 = t903 * t784 + t786 * t898;
t893 = sin(pkin(12));
t895 = cos(pkin(12));
t935 = t784 * t898 - t903 * t786;
t1087 = -t895 * t724 + t893 * t935;
t1116 = -t1087 * t902 + t1002;
t826 = t898 * t899 - t903 * t904;
t1114 = t1118 * t826;
t827 = t898 * t904 + t899 * t903;
t1022 = t1118 * t827;
t1113 = t1117 * t903;
t999 = qJD(1) * qJD(2);
t978 = t905 * t999;
t997 = qJDD(1) * t900;
t1112 = t978 + t997;
t1004 = qJD(4) * t903;
t1005 = qJD(4) * t898;
t853 = t1080 * t899;
t854 = t1080 * t904;
t1111 = -t853 * t1004 - t1005 * t854 - t1115 * t903 - t1117 * t898;
t897 = sin(qJ(6));
t1003 = qJD(6) * t897;
t1086 = -t724 * t893 - t895 * t935;
t1006 = qJD(3) * t904;
t1093 = t1112 * t894;
t998 = qJDD(1) * t896;
t868 = qJDD(2) + t998;
t716 = -qJD(3) * t955 + t869 * t1006 + t1093 * t904 + t899 * t868;
t1007 = qJD(3) * t899;
t1008 = qJD(2) * t905;
t980 = t899 * t1008;
t717 = t1007 * t869 + (qJD(1) * (t1006 * t900 + t980) + t899 * t997) * t894 - t904 * t868;
t646 = -t784 * t1004 - t1005 * t786 + t903 * t716 - t898 * t717;
t911 = qJD(4) * t935 - t716 * t898 - t903 * t717;
t607 = t646 * t895 + t893 * t911;
t996 = qJDD(1) * t905;
t867 = t894 * t996;
t979 = t900 * t999;
t953 = t894 * t979;
t799 = qJDD(3) - t867 + t953;
t793 = qJDD(4) + t799;
t987 = t1002 * t1118 + t902 * t607 + t897 * t793;
t586 = -t1003 * t1086 + t987;
t659 = t1086 * t902 + t1118 * t897;
t974 = t607 * t897 - t902 * t793;
t587 = qJD(6) * t659 + t974;
t1060 = t1086 * t897;
t657 = -t1118 * t902 + t1060;
t1110 = -t1116 * t657 + t586 * t902 - t897 * t587;
t1063 = t659 * t1086;
t584 = t586 * t897;
t606 = -t646 * t893 + t895 * t911;
t605 = qJDD(6) - t606;
t602 = t897 * t605;
t664 = qJD(6) - t1087;
t1109 = t793 * MDP(22) + (-t724 ^ 2 + t935 ^ 2) * MDP(19) + (t1118 * t724 + t646) * MDP(20) + (-t1118 * t935 + t911) * MDP(21) - t724 * MDP(18) * t935 + (t1116 * t659 + t584) * MDP(27) + (-t1063 + t602) * MDP(29) + (MDP(29) * t1116 - t1086 * MDP(31)) * t664;
t1108 = t659 * t664;
t1017 = -t898 * t853 + t903 * t854;
t1107 = -pkin(4) * t984 + t1114 * qJ(5) - qJD(4) * t1017 - qJD(5) * t827 + t1115 * t898 - t1113;
t1106 = qJ(5) * t1022 + qJD(5) * t826 - t1111;
t1096 = qJ(5) * t724;
t808 = pkin(8) * t983 + t900 * t994;
t768 = pkin(9) * t869 + t808;
t934 = -pkin(2) * t905 - pkin(9) * t900 - pkin(1);
t798 = t934 * t894;
t777 = qJD(1) * t798;
t713 = -t768 * t899 + t904 * t777;
t691 = -pkin(10) * t786 + t713;
t681 = -pkin(3) * t851 + t691;
t714 = t768 * t904 + t777 * t899;
t692 = -pkin(10) * t784 + t714;
t690 = t903 * t692;
t643 = t681 * t898 + t690;
t627 = t643 - t1096;
t1065 = t627 * t893;
t1095 = qJ(5) * t935;
t688 = t898 * t692;
t642 = t903 * t681 - t688;
t626 = t642 + t1095;
t620 = pkin(4) * t1118 + t626;
t592 = t620 * t895 - t1065;
t590 = -pkin(5) * t1118 - t592;
t1105 = t1087 * t590;
t1064 = t657 * t1086;
t951 = -t808 + (t1007 - t954) * pkin(3);
t1103 = pkin(4) * t1022 + t951;
t906 = cos(qJ(1));
t1043 = t894 * t906;
t901 = sin(qJ(1));
t1046 = t894 * t901;
t1047 = t894 * t900;
t1037 = t901 * t905;
t1038 = t900 * t906;
t818 = t1038 * t896 + t1037;
t1033 = t905 * t906;
t1039 = t900 * t901;
t820 = -t1039 * t896 + t1033;
t892 = qJ(3) + qJ(4);
t884 = pkin(12) + t892;
t875 = sin(t884);
t876 = cos(t884);
t1092 = g(3) * (-t1047 * t875 + t876 * t896) + g(2) * (-t1043 * t876 - t818 * t875) + g(1) * (t1046 * t876 - t820 * t875);
t993 = pkin(1) * qJD(2) * t896;
t959 = qJD(1) * t993;
t992 = pkin(1) * t998;
t986 = -pkin(8) * t867 - t900 * t992 - t905 * t959;
t919 = -pkin(8) * t953 - t986;
t732 = pkin(9) * t868 + t919;
t930 = t950 * qJD(2);
t734 = (qJD(1) * t930 + qJDD(1) * t934) * t894;
t912 = -qJD(3) * t714 - t899 * t732 + t904 * t734;
t623 = pkin(3) * t799 - pkin(10) * t716 + t912;
t928 = -t777 * t1006 + t1007 * t768 - t904 * t732 - t899 * t734;
t636 = -pkin(10) * t717 - t928;
t913 = -qJD(4) * t643 + t903 * t623 - t898 * t636;
t573 = pkin(4) * t793 - qJ(5) * t646 + qJD(5) * t935 + t913;
t958 = -t681 * t1004 + t692 * t1005 - t898 * t623 - t903 * t636;
t575 = qJ(5) * t911 - qJD(5) * t724 - t958;
t564 = t573 * t895 - t575 * t893;
t562 = -pkin(5) * t793 - t564;
t561 = t562 * t897;
t624 = t895 * t627;
t593 = t893 * t620 + t624;
t591 = pkin(11) * t1118 + t593;
t767 = -pkin(2) * t869 - t804;
t728 = pkin(3) * t784 + t767;
t676 = pkin(4) * t724 + qJD(5) + t728;
t612 = -pkin(5) * t1087 - pkin(11) * t1086 + t676;
t577 = t591 * t902 + t612 * t897;
t1102 = t590 * t1002 + t577 * t1086 + t1092 * t897 + t561;
t939 = t591 * t897 - t612 * t902;
t1101 = t590 * t1003 + t939 * t1086;
t1099 = pkin(5) * t1086 - pkin(11) * t1087;
t1098 = pkin(4) * t935;
t1026 = t1022 * t895 - t1114 * t893;
t1094 = -t1022 * t893 - t1114 * t895;
t885 = sin(t892);
t886 = cos(t892);
t752 = t885 * t1043 - t818 * t886;
t754 = t1046 * t885 + t820 * t886;
t1091 = t724 * t728 + g(1) * t754 - g(2) * t752 - g(3) * (-t1047 * t886 - t885 * t896) + t958;
t1054 = t818 * t885;
t753 = t1046 * t886 - t820 * t885;
t1082 = -g(3) * (-t1047 * t885 + t886 * t896) - g(2) * (-t1043 * t886 - t1054) - g(1) * t753;
t1090 = t728 * t935 + t1082 + t913;
t745 = t1043 * t875 - t818 * t876;
t817 = -t1033 * t896 + t1039;
t1089 = t745 * t897 + t817 * t902;
t1088 = t745 * t902 - t817 * t897;
t889 = t894 ^ 2;
t995 = 0.2e1 * t889;
t1030 = t1106 * t893 + t1107 * t895;
t1028 = -t1106 * t895 + t1107 * t893;
t1044 = t894 * t905;
t1045 = t894 * t904;
t815 = t1045 * t900 + t896 * t899;
t1079 = pkin(1) * t900;
t1016 = pkin(8) * t1044 + t896 * t1079;
t797 = pkin(9) * t896 + t1016;
t967 = -t797 * t899 + t904 * t798;
t698 = -pkin(3) * t1044 - pkin(10) * t815 + t967;
t1021 = t904 * t797 + t899 * t798;
t814 = t1047 * t899 - t896 * t904;
t704 = -pkin(10) * t814 + t1021;
t1025 = t898 * t698 + t903 * t704;
t1076 = g(1) * t906;
t1083 = g(2) * t901 + t1076;
t1070 = g(3) * t894;
t887 = t904 * pkin(3);
t1069 = pkin(2) + t887;
t1067 = pkin(3) * qJD(4);
t1066 = MDP(6) * t894;
t750 = -t826 * t893 + t827 * t895;
t1059 = t750 * t902;
t1058 = t784 * t851;
t1057 = t786 * t851;
t1053 = t818 * t899;
t1052 = t868 * MDP(8);
t1051 = t876 * t897;
t1050 = t876 * t902;
t1049 = t889 * qJD(1) ^ 2;
t1048 = t893 * t898;
t1042 = t895 * t898;
t1041 = t896 * t905;
t1040 = t897 * t905;
t603 = t902 * t605;
t1036 = t902 * t905;
t1034 = t904 * t906;
t565 = t893 * t573 + t895 * t575;
t740 = t903 * t814 + t815 * t898;
t759 = qJD(3) * t815 + t894 * t980;
t981 = t894 * t1008;
t760 = -qJD(3) * t814 + t904 * t981;
t672 = -qJD(4) * t740 - t759 * t898 + t760 * t903;
t741 = -t814 * t898 + t815 * t903;
t806 = t894 * t930;
t870 = pkin(8) * t1047;
t809 = (pkin(1) * t1041 - t870) * qJD(2);
t914 = -qJD(3) * t1021 + t904 * t806 - t809 * t899;
t1009 = qJD(2) * t900;
t982 = t894 * t1009;
t656 = pkin(3) * t982 - pkin(10) * t760 + t914;
t927 = t798 * t1006 - t1007 * t797 + t899 * t806 + t904 * t809;
t661 = -pkin(10) * t759 + t927;
t915 = -qJD(4) * t1025 + t903 * t656 - t661 * t898;
t580 = pkin(4) * t982 - qJ(5) * t672 - qJD(5) * t741 + t915;
t673 = qJD(4) * t741 + t903 * t759 + t760 * t898;
t926 = t698 * t1004 - t1005 * t704 + t898 * t656 + t903 * t661;
t582 = -qJ(5) * t673 - qJD(5) * t740 + t926;
t569 = t893 * t580 + t895 * t582;
t1029 = pkin(5) * t984 - t1030;
t970 = t903 * t698 - t704 * t898;
t638 = -pkin(4) * t1044 - qJ(5) * t741 + t970;
t640 = -qJ(5) * t740 + t1025;
t601 = t893 * t638 + t895 * t640;
t1027 = t903 * t691 - t688;
t632 = t1027 + t1095;
t973 = -t691 * t898 - t690;
t932 = t973 + t1096;
t1019 = -t632 * t893 + t895 * t932 + (t893 * t903 + t1042) * t1067;
t1018 = -t895 * t632 - t893 * t932 + (t895 * t903 - t1048) * t1067;
t810 = pkin(8) * t981 + t900 * t993;
t881 = pkin(3) * t903 + pkin(4);
t812 = pkin(3) * t1042 + t893 * t881;
t839 = pkin(4) * t886 + t887;
t890 = t900 ^ 2;
t1015 = -t905 ^ 2 + t890;
t1001 = qJD(2) - t869;
t991 = t905 * t1049;
t990 = t894 * t1040;
t989 = t894 * t1036;
t563 = pkin(11) * t793 + t565;
t957 = pkin(8) * t1093 + t900 * t959 - t905 * t992;
t733 = -pkin(2) * t868 + t957;
t674 = pkin(3) * t717 + t733;
t616 = -pkin(4) * t911 + qJDD(5) + t674;
t571 = -pkin(5) * t606 - pkin(11) * t607 + t616;
t975 = -t897 * t563 + t902 * t571;
t972 = -t1094 * t897 - t902 * t984;
t971 = -t1094 * t902 + t897 * t984;
t966 = -t899 * t1043 + t818 * t904;
t965 = -t903 * t853 - t854 * t898;
t964 = t664 * t897;
t963 = t869 + t1011;
t802 = pkin(11) + t812;
t949 = pkin(3) * t786 - t1098;
t962 = qJD(6) * t802 + t1099 + t949;
t877 = pkin(4) * t893 + pkin(11);
t961 = qJD(6) * t877 - t1098 + t1099;
t960 = t868 + t998;
t956 = pkin(4) * t826 - t1069;
t729 = pkin(3) * t759 + t810;
t819 = t1037 * t896 + t1038;
t948 = -g(1) * t817 + g(2) * t819;
t947 = g(1) * t820 + g(2) * t818;
t749 = t895 * t826 + t827 * t893;
t682 = pkin(5) * t749 - pkin(11) * t750 + t956;
t945 = pkin(11) * t984 - qJD(6) * t682 - t1028;
t737 = -qJ(5) * t826 + t1017;
t931 = -qJ(5) * t827 + t965;
t684 = t895 * t737 + t893 * t931;
t944 = -pkin(5) * t1026 + pkin(11) * t1094 + qJD(6) * t684 - t1103;
t942 = t902 * t563 + t897 * t571;
t568 = t580 * t895 - t582 * t893;
t941 = -t605 * t877 - t1105;
t940 = -t802 * t605 - t1105;
t599 = -pkin(11) * t1044 + t601;
t685 = t895 * t740 + t741 * t893;
t686 = -t740 * t893 + t741 * t895;
t796 = t870 + (-pkin(1) * t905 - pkin(2)) * t896;
t742 = pkin(3) * t814 + t796;
t917 = pkin(4) * t740 + t742;
t618 = pkin(5) * t685 - pkin(11) * t686 + t917;
t938 = t599 * t902 + t618 * t897;
t937 = -t599 * t897 + t618 * t902;
t600 = t638 * t895 - t640 * t893;
t933 = t603 + (t1087 * t897 - t1003) * t664;
t811 = -pkin(3) * t1048 + t881 * t895;
t677 = t686 * t897 + t989;
t929 = pkin(4) * t673 + t729;
t924 = t1002 * t750 - t972;
t923 = -t1003 * t750 - t971;
t921 = -g(1) * t819 - g(2) * t817 + g(3) * t1044;
t920 = -t562 - t1092;
t918 = -pkin(9) * t799 - t767 * t851;
t910 = pkin(9) * qJD(3) * t851 - t733 - t921;
t888 = -qJ(5) - t1080;
t878 = -pkin(4) * t895 - pkin(5);
t838 = pkin(3) * t899 + pkin(4) * t885;
t831 = pkin(2) + t839;
t801 = -pkin(5) - t811;
t779 = t1047 * t876 + t875 * t896;
t763 = t1046 * t899 + t820 * t904;
t762 = t1045 * t901 - t820 * t899;
t747 = t1046 * t875 + t820 * t876;
t712 = t747 * t902 + t819 * t897;
t711 = -t747 * t897 + t819 * t902;
t683 = t737 * t893 - t895 * t931;
t678 = t686 * t902 - t990;
t631 = t672 * t895 - t673 * t893;
t630 = t672 * t893 + t895 * t673;
t609 = -qJD(6) * t990 + t1002 * t686 + t631 * t897 - t902 * t982;
t608 = -qJD(6) * t677 + t631 * t902 + t897 * t982;
t598 = pkin(5) * t1044 - t600;
t595 = t626 * t895 - t1065;
t594 = t626 * t893 + t624;
t578 = pkin(5) * t630 - pkin(11) * t631 + t929;
t567 = pkin(11) * t982 + t569;
t566 = -pkin(5) * t982 - t568;
t560 = -qJD(6) * t577 + t975;
t559 = -t939 * qJD(6) + t942;
t1 = [(-t646 * t740 - t672 * t724 + t673 * t935 + t741 * t911) * MDP(19) + (-t1086 * t568 + t1087 * t569 - t564 * t686 - t565 * t685 - t592 * t631 - t593 * t630 - t600 * t607 + t601 * t606 - t948) * MDP(25) + (g(1) * t966 - g(2) * t763 + t796 * t717 + t733 * t814 + t767 * t759 + t810 * t784 + t967 * t799 - t914 * t851) * MDP(16) + (-g(1) * t1053 - g(2) * t762 - t1021 * t799 + t796 * t716 + t733 * t815 + t767 * t760 + t810 * t786 + t927 * t851) * MDP(17) + (t646 * t741 - t672 * t935) * MDP(18) + ((-qJD(6) * t938 - t567 * t897 + t578 * t902) * t664 + t937 * t605 + t560 * t685 - t939 * t630 + t566 * t657 + t598 * t587 + t562 * t677 + t590 * t609 - g(1) * t1088 - g(2) * t712) * MDP(32) + (-(qJD(6) * t937 + t567 * t902 + t578 * t897) * t664 - t938 * t605 - t559 * t685 - t577 * t630 + t566 * t659 + t598 * t586 + t562 * t678 + t590 * t608 + g(1) * t1089 - g(2) * t711) * MDP(33) + (-t1015 * t999 + t900 * t996) * MDP(5) * t995 + t1083 * MDP(3) + (-t760 * t851 + t799 * t815) * MDP(13) + (t759 * t851 - t799 * t814) * MDP(14) + (t565 * t601 + t593 * t569 + t564 * t600 + t592 * t568 + t616 * t917 + t676 * t929 - g(1) * (-pkin(1) * t901 + t817 * t888 - t818 * t831) - g(2) * (pkin(1) * t906 - t819 * t888 + t820 * t831)) * MDP(26) + (g(1) * t901 - g(2) * t906) * MDP(2) + (-t716 * t814 - t717 * t815 - t759 * t786 - t760 * t784) * MDP(12) + (t716 * t815 + t760 * t786) * MDP(11) + (qJDD(1) * t890 + 0.2e1 * t900 * t978) * t889 * MDP(4) + (-t587 * t685 - t605 * t677 - t609 * t664 - t630 * t657) * MDP(30) + (t586 * t685 + t605 * t678 + t608 * t664 + t630 * t659) * MDP(29) + (t605 * t685 + t630 * t664) * MDP(31) + (t586 * t678 + t608 * t659) * MDP(27) + (-t586 * t677 - t587 * t678 - t608 * t657 - t609 * t659) * MDP(28) + qJDD(1) * MDP(1) + (-g(1) * t752 - g(2) * t754 + t1118 * t915 + t728 * t673 + t674 * t740 + t729 * t724 - t742 * t911 + t970 * t793) * MDP(23) + ((-t1009 * t963 + t905 * t960) * MDP(7) + (-t1009 * t851 - t799 * t905) * MDP(15) + (t1009 * t1118 - t793 * t905) * MDP(22) - t1083 * (pkin(8) + t838) * MDP(26) + (-t1009 * t935 - t646 * t905) * MDP(20) + (-t1009 * t643 - t1076 * t886 - t905 * t958) * MDP(24) + (-t1009 * t784 + t717 * t905) * MDP(14) + (-t1009 * t724 - t905 * t911) * MDP(21) + (t1009 * t713 - t905 * t912) * MDP(16) + (t1009 * t642 - t905 * t913) * MDP(23) + (t1009 * t786 - t716 * t905) * MDP(13) + (-g(1) * t1034 - t1009 * t714 - t905 * t928) * MDP(17)) * t894 + (-g(1) * t1054 - g(2) * t753 - t1025 * t793 - t1118 * t926 + t742 * t646 + t728 * t672 + t674 * t741 - t729 * t935) * MDP(24) + (-t1118 * t673 - t740 * t793) * MDP(21) + (t1118 * t672 + t741 * t793) * MDP(20) + (-t810 * t869 - t870 * t868 - t957 * t896 + g(1) * t818 - g(2) * t820 + (t868 * t1041 + (-t979 + t996) * t995) * pkin(1)) * MDP(9) + (-pkin(1) * t1112 * t995 - t1016 * t868 - t809 * t869 - t919 * t896 + t948) * MDP(10) + t896 * t1052 + (t1008 * t963 + t900 * t960) * t1066; (-g(3) * t1047 - t1026 * t593 + t1028 * t1087 - t1030 * t1086 - t1094 * t592 - t564 * t750 - t565 * t749 + t606 * t684 + t607 * t683 - t947) * MDP(25) + ((t682 * t902 - t684 * t897) * t605 + t560 * t749 + t683 * t587 + t750 * t561 - g(1) * (-t1050 * t819 + t820 * t897) - g(2) * (-t1050 * t817 + t818 * t897) - (t1036 * t876 + t897 * t900) * t1070 + (t897 * t945 - t902 * t944) * t664 + t1029 * t657 - t1026 * t939 + t924 * t590) * MDP(32) + t867 * MDP(7) + t1015 * MDP(5) * t1049 - t900 * MDP(4) * t991 + (t1022 * t935 + t1114 * t724 - t646 * t826 + t827 * t911) * MDP(19) + (t1114 * t935 + t646 * t827) * MDP(18) + t1052 + (-pkin(2) * t716 - t1020 * t851 - t808 * t786 - t899 * t910 + t904 * t918) * MDP(17) + (-pkin(2) * t717 - t808 * t784 + t790 * t851 + (-t804 * t851 + t918) * t899 + t910 * t904) * MDP(16) + (t851 * t1007 + t799 * t904 + (-t851 * t899 * t905 + t784 * t900) * t1012) * MDP(14) + (t1049 * t1079 + t808 * t869 - t921 - t957) * MDP(9) + (-(t682 * t897 + t684 * t902) * t605 - t559 * t749 + t683 * t586 + t562 * t1059 - g(1) * (t1051 * t819 + t820 * t902) - g(2) * (t1051 * t817 + t818 * t902) - (-t1040 * t876 + t900 * t902) * t1070 + (t897 * t944 + t902 * t945) * t664 + t1029 * t659 - t1026 * t577 + t923 * t590) * MDP(33) + (t972 * t659 + t971 * t657 + (-t584 - t587 * t902 + (t657 * t897 - t659 * t902) * qJD(6)) * t750) * MDP(28) + (t565 * t684 - t564 * t683 + t616 * t956 - g(1) * (-t819 * t831 - t820 * t888) - g(2) * (-t817 * t831 - t818 * t888) - (t831 * t905 - t888 * t900) * t1070 + t1103 * t676 + t1028 * t593 + t1030 * t592) * MDP(26) + (t1001 * t1010 + t997) * t1066 + (-t1057 * t904 + t716 * t899) * MDP(11) + ((t716 + t1058) * t904 + (-t717 + t1057) * t899) * MDP(12) + (t1059 * t586 + t659 * t923) * MDP(27) + (pkin(1) * t991 + t804 * t869 + (pkin(8) * t999 + g(3)) * t1047 + t947 + t986) * MDP(10) + (t851 * MDP(15) - t713 * MDP(16) + t714 * MDP(17) + MDP(20) * t935 + t724 * MDP(21) - MDP(22) * t1118 - t642 * MDP(23) + t643 * MDP(24) - MDP(7) * t1001) * t984 + (-t1022 * t1118 - t793 * t826) * MDP(21) + (-t1114 * t1118 + t793 * t827) * MDP(20) + (-t1017 * t793 - t1069 * t646 - t1111 * t1118 - t1114 * t728 + t674 * t827 + t921 * t885 - t951 * t935) * MDP(24) + (t965 * t793 + t1069 * t911 + t674 * t826 - (t854 * t1004 + (-qJD(4) * t853 - t1115) * t898 + t1113) * t1118 + t1022 * t728 + t951 * t724 - t921 * t886) * MDP(23) + (-t1026 * t657 - t587 * t749 - t602 * t750 - t664 * t924) * MDP(30) + (t1026 * t659 + t586 * t749 + t603 * t750 + t664 * t923) * MDP(29) + (-t851 * t1006 + t899 * t799 + (t1035 * t851 - t786 * t900) * t1012) * MDP(13) + (t1026 * t664 + t605 * t749) * MDP(31); (t801 * t587 + t1019 * t657 + (-t1018 * t664 + t940) * t897 + (-t664 * t962 + t920) * t902 + t1101) * MDP(32) + (-t973 * t1118 + (-t1005 * t1118 - t724 * t786 + t793 * t903) * pkin(3) + t1090) * MDP(23) + (t1027 * t1118 + (-t1004 * t1118 + t786 * t935 - t793 * t898) * pkin(3) + t1091) * MDP(24) + (t606 * t812 - t607 * t811 + (t1018 + t592) * t1087 + (t1019 + t593) * t1086) * MDP(25) + (-t1057 - t717) * MDP(14) + (t801 * t586 + t940 * t902 + t1019 * t659 + (-t1018 * t902 + t897 * t962) * t664 + t1102) * MDP(33) + (-t659 * t964 + t1110) * MDP(28) + (g(1) * t763 + g(2) * t966 + g(3) * t815 - t713 * t851 + t767 * t784 + t928) * MDP(17) + (-t664 * t964 + t1064 + t603) * MDP(30) + t799 * MDP(15) + (-t784 ^ 2 + t786 ^ 2) * MDP(12) + t786 * t784 * MDP(11) + (t716 - t1058) * MDP(13) + (-t714 * t851 - t767 * t786 - g(1) * t762 - g(2) * (-t1034 * t894 - t1053) + g(3) * t814 + t912) * MDP(16) + (t565 * t812 + t564 * t811 - t676 * t949 - g(1) * (t1046 * t839 - t820 * t838) - g(2) * (-t1043 * t839 - t818 * t838) - g(3) * (-t1047 * t838 + t839 * t896) + t1018 * t593 - t1019 * t592) * MDP(26) + t1109; (t1118 * t643 + t1090) * MDP(23) + (t1118 * t642 + t1091) * MDP(24) + ((t606 * t893 - t607 * t895) * pkin(4) + (t592 - t595) * t1087 + (t593 - t594) * t1086) * MDP(25) + (t592 * t594 - t593 * t595 + (t564 * t895 + t565 * t893 + t676 * t935 + t1082) * pkin(4)) * MDP(26) + (-t1108 * t897 + t1110) * MDP(28) + (t933 + t1064) * MDP(30) + (t878 * t587 - t594 * t657 + (t595 * t664 + t941) * t897 + (-t664 * t961 + t920) * t902 + t1101) * MDP(32) + (t878 * t586 - t594 * t659 + t941 * t902 + (t902 * t595 + t897 * t961) * t664 + t1102) * MDP(33) + t1109; (-t1086 ^ 2 - t1087 ^ 2) * MDP(25) + (t1086 * t592 - t1087 * t593 + t616 + t921) * MDP(26) + (t933 - t1064) * MDP(32) + (-t664 ^ 2 * t902 - t1063 - t602) * MDP(33); t659 * t657 * MDP(27) + (-t657 ^ 2 + t659 ^ 2) * MDP(28) + (t657 * t664 + t987) * MDP(29) + (-t974 + t1108) * MDP(30) + t605 * MDP(31) + (t577 * t664 - t590 * t659 - g(1) * t711 - g(2) * t1089 - g(3) * (-t779 * t897 - t989) + t975) * MDP(32) + (-t939 * t664 + t590 * t657 + g(1) * t712 - g(2) * t1088 - g(3) * (-t779 * t902 + t990) - t942) * MDP(33) + (-MDP(29) * t1060 - MDP(30) * t659 - MDP(32) * t577 + MDP(33) * t939) * qJD(6);];
tau  = t1;
