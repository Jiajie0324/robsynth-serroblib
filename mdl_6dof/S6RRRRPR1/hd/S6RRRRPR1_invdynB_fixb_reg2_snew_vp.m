% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:29:53
% EndTime: 2019-05-07 19:30:50
% DurationCPUTime: 57.34s
% Computational Cost: add. (522248->954), mult. (1214175->1476), div. (0->0), fcn. (941014->12), ass. (0->653)
t1142 = cos(qJ(2));
t1123 = t1142 * qJDD(1);
t1137 = sin(qJ(2));
t1208 = qJD(1) * t1137;
t1175 = qJD(2) * t1208;
t1095 = t1123 - t1175;
t1131 = t1142 ^ 2;
t1145 = qJD(1) ^ 2;
t1138 = sin(qJ(1));
t1143 = cos(qJ(1));
t1105 = t1138 * g(1) - t1143 * g(2);
t1153 = qJDD(1) * pkin(1) + t1105;
t1154 = qJD(2) * pkin(2) - pkin(8) * t1208;
t1030 = t1095 * pkin(2) - t1154 * t1208 + t1153 + (pkin(8) * t1131 + pkin(7)) * t1145;
t1136 = sin(qJ(3));
t1141 = cos(qJ(3));
t1085 = (t1136 * t1142 + t1137 * t1141) * qJD(1);
t1207 = qJD(1) * t1142;
t1170 = qJD(2) * t1207;
t1184 = qJDD(1) * t1137;
t1094 = t1170 + t1184;
t1162 = t1136 * t1094 - t1141 * t1095;
t1027 = -qJD(3) * t1085 - t1162;
t1083 = t1136 * t1208 - t1141 * t1207;
t1081 = t1083 ^ 2;
t1129 = qJD(2) + qJD(3);
t1158 = pkin(3) * t1129 - pkin(9) * t1085;
t941 = t1027 * pkin(3) + t1081 * pkin(9) - t1085 * t1158 + t1030;
t1132 = sin(pkin(11));
t1128 = qJDD(2) + qJDD(3);
t1121 = qJDD(4) + t1128;
t1135 = sin(qJ(4));
t1140 = cos(qJ(4));
t1049 = -t1083 * t1140 - t1135 * t1085;
t1050 = -t1083 * t1135 + t1085 * t1140;
t1133 = cos(pkin(11));
t986 = -t1133 * t1049 + t1050 * t1132;
t988 = t1132 * t1049 + t1133 * t1050;
t936 = t988 * t986;
t1238 = -t936 + t1121;
t1249 = t1132 * t1238;
t1248 = t1133 * t1238;
t1134 = sin(qJ(6));
t1152 = qJD(3) * t1083 - t1094 * t1141 - t1095 * t1136;
t1165 = -t1140 * t1027 - t1135 * t1152;
t943 = -qJD(4) * t1050 - t1165;
t944 = qJD(4) * t1049 + t1135 * t1027 - t1140 * t1152;
t1167 = t1132 * t944 - t1133 * t943;
t1156 = qJDD(6) + t1167;
t1122 = qJD(4) + t1129;
t1139 = cos(qJ(6));
t969 = -t1139 * t1122 + t1134 * t988;
t971 = t1122 * t1134 + t1139 * t988;
t915 = t971 * t969;
t1239 = t1156 - t915;
t1247 = t1134 * t1239;
t996 = t1049 * t1050;
t1237 = t996 + t1121;
t1246 = t1135 * t1237;
t1056 = t1085 * t1083;
t1236 = -t1056 + t1128;
t1245 = t1136 * t1236;
t1244 = t1139 * t1239;
t1243 = t1140 * t1237;
t1242 = t1141 * t1236;
t1077 = t1129 * t1083;
t1241 = -t1077 + t1152;
t1047 = t1049 ^ 2;
t1155 = pkin(4) * t1122 - qJ(5) * t1050;
t838 = t943 * pkin(4) + t1047 * qJ(5) - t1050 * t1155 - qJDD(5) + t941;
t1231 = t1122 * t988;
t850 = t1167 + t1231;
t878 = t1132 * t943 + t1133 * t944;
t977 = t1122 * t986;
t853 = t878 - t977;
t840 = -t969 * qJD(6) + t1134 * t1121 + t1139 * t878;
t983 = qJD(6) + t986;
t927 = t983 * t969;
t809 = -t927 + t840;
t1037 = t1122 * t1049;
t922 = t1037 - t944;
t1240 = t1037 + t944;
t1235 = -t1077 - t1152;
t1127 = t1129 ^ 2;
t1051 = -t1081 - t1127;
t1166 = -t1139 * t1121 + t1134 * t878;
t806 = (qJD(6) - t983) * t971 + t1166;
t918 = (qJD(4) - t1122) * t1050 + t1165;
t1004 = (qJD(3) - t1129) * t1085 + t1162;
t967 = t969 ^ 2;
t968 = t971 ^ 2;
t981 = t983 ^ 2;
t984 = t986 ^ 2;
t985 = t988 ^ 2;
t1048 = t1050 ^ 2;
t1082 = t1085 ^ 2;
t1234 = t1122 ^ 2;
t1233 = 2 * qJD(5);
t1232 = pkin(5) * t1132;
t1188 = t1137 * t1145;
t1106 = g(1) * t1143 + g(2) * t1138;
t1087 = -pkin(1) * t1145 + qJDD(1) * pkin(7) - t1106;
t1189 = t1137 * t1087;
t1209 = qJD(1) * qJD(2);
t1018 = qJDD(2) * pkin(2) - t1094 * pkin(8) - t1189 + (pkin(2) * t1188 + pkin(8) * t1209 - g(3)) * t1142;
t1071 = -t1137 * g(3) + t1142 * t1087;
t1125 = t1131 * t1145;
t1022 = -pkin(2) * t1125 + t1095 * pkin(8) - qJD(2) * t1154 + t1071;
t963 = -t1141 * t1018 + t1136 * t1022;
t1149 = pkin(3) * t1236 + pkin(9) * t1241 - t963;
t964 = t1136 * t1018 + t1141 * t1022;
t1150 = -t1081 * pkin(3) + t1027 * pkin(9) - t1129 * t1158 + t964;
t834 = t1135 * t1150 - t1140 * t1149;
t1146 = pkin(4) * t1237 + qJ(5) * t922 - t834;
t835 = t1135 * t1149 + t1140 * t1150;
t799 = -t1047 * pkin(4) + t943 * qJ(5) - t1122 * t1155 + t835;
t713 = -0.2e1 * qJD(5) * t986 + t1132 * t1146 + t1133 * t799;
t934 = pkin(5) * t986 - pkin(10) * t988;
t691 = -pkin(5) * t1234 + pkin(10) * t1121 - t934 * t986 + t713;
t738 = pkin(5) * t850 - pkin(10) * t853 - t838;
t659 = t1134 * t738 + t1139 * t691;
t1230 = t1132 * t838;
t930 = t936 + t1121;
t1229 = t1132 * t930;
t1228 = t1133 * t838;
t1227 = t1133 * t930;
t1168 = t1132 * t799 - t1133 * t1146;
t690 = -t1121 * pkin(5) - t1234 * pkin(10) + (t1233 + t934) * t988 + t1168;
t1226 = t1134 * t690;
t827 = t1156 + t915;
t1225 = t1134 * t827;
t1224 = t1134 * t983;
t712 = t1233 * t988 + t1168;
t654 = t1132 * t713 - t1133 * t712;
t1223 = t1135 * t654;
t1222 = t1135 * t941;
t991 = -t996 + t1121;
t1221 = t1135 * t991;
t757 = t1135 * t835 - t1140 * t834;
t1220 = t1136 * t757;
t901 = t1136 * t964 - t1141 * t963;
t1219 = t1137 * t901;
t1218 = t1139 * t690;
t1217 = t1139 * t827;
t1216 = t1139 * t983;
t1215 = t1140 * t654;
t1214 = t1140 * t941;
t1213 = t1140 * t991;
t1212 = t1141 * t757;
t1211 = t1142 * t901;
t1206 = t1030 * t1136;
t1205 = t1030 * t1141;
t1053 = t1056 + t1128;
t1204 = t1053 * t1136;
t1203 = t1053 * t1141;
t1086 = t1145 * pkin(7) + t1153;
t1202 = t1086 * t1137;
t1201 = t1086 * t1142;
t1116 = t1142 * t1188;
t1103 = qJDD(2) + t1116;
t1200 = t1103 * t1137;
t1104 = qJDD(2) - t1116;
t1199 = t1104 * t1137;
t1198 = t1104 * t1142;
t1197 = t1121 * t1138;
t1196 = t1122 * t1132;
t1195 = t1122 * t1133;
t1194 = t1122 * t1135;
t1193 = t1122 * t1140;
t1192 = t1129 * t1136;
t1191 = t1129 * t1141;
t1130 = t1137 ^ 2;
t1190 = t1130 * t1145;
t1185 = t1130 + t1131;
t1183 = qJDD(1) * t1138;
t1182 = qJDD(1) * t1143;
t1181 = t1132 * t915;
t1180 = t1133 * t915;
t1179 = t1138 * t936;
t1178 = t1143 * t936;
t1177 = -pkin(5) * t1133 - pkin(4);
t1174 = t1138 * t996;
t1173 = t1143 * t996;
t1172 = t1138 * t1056;
t1171 = t1143 * t1056;
t655 = t1132 * t712 + t1133 * t713;
t658 = t1134 * t691 - t1139 * t738;
t758 = t1135 * t834 + t1140 * t835;
t902 = t1136 * t963 + t1141 * t964;
t1070 = t1142 * g(3) + t1189;
t1021 = t1070 * t1137 + t1142 * t1071;
t1062 = -t1105 * t1138 - t1143 * t1106;
t1161 = t1138 * t1116;
t1160 = t1143 * t1116;
t1100 = -t1138 * t1145 + t1182;
t1157 = -pkin(6) * t1100 - g(3) * t1138;
t613 = t1134 * t659 - t1139 * t658;
t614 = t1134 * t658 + t1139 * t659;
t1020 = t1070 * t1142 - t1071 * t1137;
t1061 = t1105 * t1143 - t1106 * t1138;
t852 = -t1167 + t1231;
t1144 = qJD(2) ^ 2;
t1114 = -t1125 - t1144;
t1113 = t1125 - t1144;
t1112 = -t1144 - t1190;
t1111 = t1144 - t1190;
t1109 = t1143 * t1121;
t1102 = t1125 - t1190;
t1101 = t1125 + t1190;
t1099 = t1143 * t1145 + t1183;
t1097 = t1185 * qJDD(1);
t1096 = t1123 - 0.2e1 * t1175;
t1093 = 0.2e1 * t1170 + t1184;
t1091 = t1142 * t1103;
t1090 = t1185 * t1209;
t1080 = -pkin(6) * t1099 + g(3) * t1143;
t1075 = -t1082 + t1127;
t1074 = t1081 - t1127;
t1073 = t1094 * t1142 - t1130 * t1209;
t1072 = -t1095 * t1137 - t1131 * t1209;
t1069 = -t1082 - t1127;
t1068 = -t1112 * t1137 - t1198;
t1067 = -t1111 * t1137 + t1091;
t1066 = t1114 * t1142 - t1200;
t1065 = t1113 * t1142 - t1199;
t1064 = t1112 * t1142 - t1199;
t1063 = t1114 * t1137 + t1091;
t1059 = t1097 * t1143 - t1101 * t1138;
t1058 = t1097 * t1138 + t1101 * t1143;
t1057 = -t1093 * t1137 + t1096 * t1142;
t1055 = t1081 - t1082;
t1042 = t1068 * t1143 + t1093 * t1138;
t1041 = t1066 * t1143 - t1096 * t1138;
t1040 = t1068 * t1138 - t1093 * t1143;
t1039 = t1066 * t1138 + t1096 * t1143;
t1036 = -t1048 + t1234;
t1035 = t1047 - t1234;
t1034 = (-t1083 * t1141 + t1085 * t1136) * t1129;
t1033 = (-t1083 * t1136 - t1085 * t1141) * t1129;
t1032 = -pkin(7) * t1064 - t1201;
t1031 = -pkin(7) * t1063 - t1202;
t1029 = -t1081 - t1082;
t1026 = -pkin(1) * t1064 + t1071;
t1025 = -pkin(1) * t1063 + t1070;
t1024 = -t1048 - t1234;
t1014 = t1074 * t1141 - t1204;
t1013 = -t1075 * t1136 + t1242;
t1012 = t1074 * t1136 + t1203;
t1011 = t1075 * t1141 + t1245;
t1010 = -t1069 * t1136 - t1203;
t1009 = t1069 * t1141 - t1204;
t1003 = (qJD(3) + t1129) * t1085 + t1162;
t1002 = -t1085 * t1192 - t1141 * t1152;
t1001 = t1085 * t1191 - t1136 * t1152;
t1000 = -t1027 * t1136 + t1083 * t1191;
t999 = t1027 * t1141 + t1083 * t1192;
t998 = t1021 * t1143 - t1086 * t1138;
t997 = t1021 * t1138 + t1086 * t1143;
t995 = -t1048 + t1047;
t994 = t1051 * t1141 - t1245;
t993 = t1051 * t1136 + t1242;
t989 = -t1234 - t1047;
t976 = -t985 + t1234;
t975 = t984 - t1234;
t974 = (t1049 * t1140 + t1050 * t1135) * t1122;
t973 = (t1049 * t1135 - t1050 * t1140) * t1122;
t972 = -t985 - t1234;
t966 = -t1033 * t1137 + t1034 * t1142;
t962 = -t1047 - t1048;
t960 = -pkin(8) * t1009 - t1205;
t959 = -pkin(8) * t993 - t1206;
t958 = -t1012 * t1137 + t1014 * t1142;
t957 = -t1011 * t1137 + t1013 * t1142;
t956 = t1035 * t1140 - t1221;
t955 = -t1036 * t1135 + t1243;
t954 = t1035 * t1135 + t1213;
t953 = t1036 * t1140 + t1246;
t952 = -t1024 * t1135 - t1213;
t951 = t1024 * t1140 - t1221;
t950 = -t1009 * t1137 + t1010 * t1142;
t949 = t1009 * t1142 + t1010 * t1137;
t948 = -t1004 * t1141 - t1136 * t1241;
t947 = -t1003 * t1141 - t1136 * t1235;
t946 = -t1004 * t1136 + t1141 * t1241;
t945 = -t1003 * t1136 + t1141 * t1235;
t940 = -t1001 * t1137 + t1002 * t1142;
t939 = t1000 * t1142 - t1137 * t999;
t938 = -t1137 * t993 + t1142 * t994;
t937 = t1137 * t994 + t1142 * t993;
t935 = -t985 + t984;
t933 = t1140 * t989 - t1246;
t932 = t1135 * t989 + t1243;
t928 = -t1234 - t984;
t926 = -t968 + t981;
t925 = t967 - t981;
t924 = (t1132 * t988 - t1133 * t986) * t1122;
t923 = (-t1132 * t986 - t1133 * t988) * t1122;
t917 = (qJD(4) + t1122) * t1050 + t1165;
t916 = -pkin(2) * t1235 + pkin(8) * t1010 - t1206;
t914 = -t1136 * t973 + t1141 * t974;
t913 = t1136 * t974 + t1141 * t973;
t912 = -t1050 * t1194 + t1140 * t944;
t911 = t1050 * t1193 + t1135 * t944;
t910 = -t1049 * t1193 - t1135 * t943;
t909 = -t1049 * t1194 + t1140 * t943;
t908 = -t968 + t967;
t907 = -pkin(2) * t1003 + pkin(8) * t994 + t1205;
t905 = t1138 * t1235 + t1143 * t950;
t904 = t1138 * t950 - t1143 * t1235;
t900 = t1003 * t1138 + t1143 * t938;
t899 = -t1003 * t1143 + t1138 * t938;
t898 = -t984 - t985;
t897 = -t968 - t981;
t896 = t1133 * t975 - t1229;
t895 = -t1132 * t976 + t1248;
t894 = t1132 * t975 + t1227;
t893 = t1133 * t976 + t1249;
t892 = -t1136 * t954 + t1141 * t956;
t891 = -t1136 * t953 + t1141 * t955;
t890 = t1136 * t956 + t1141 * t954;
t889 = t1136 * t955 + t1141 * t953;
t888 = -t1132 * t972 - t1227;
t887 = t1133 * t972 - t1229;
t886 = -t981 - t967;
t885 = -t1136 * t951 + t1141 * t952;
t884 = t1136 * t952 + t1141 * t951;
t883 = pkin(2) * t1030 + pkin(8) * t902;
t882 = t967 + t968;
t881 = -t1137 * t946 + t1142 * t948;
t880 = -t1137 * t945 + t1142 * t947;
t879 = t1137 * t948 + t1142 * t946;
t875 = -pkin(9) * t951 - t1214;
t873 = -pkin(1) * t949 - pkin(2) * t1009 + t964;
t872 = -pkin(9) * t932 - t1222;
t871 = t1029 * t1138 + t1143 * t881;
t870 = -t1029 * t1143 + t1138 * t881;
t869 = -t1136 * t932 + t1141 * t933;
t868 = t1136 * t933 + t1141 * t932;
t867 = t1133 * t928 - t1249;
t866 = t1132 * t928 + t1248;
t865 = -pkin(1) * t937 - pkin(2) * t993 + t963;
t864 = (t1134 * t971 - t1139 * t969) * t983;
t863 = (t1134 * t969 + t1139 * t971) * t983;
t862 = -t1135 * t923 + t1140 * t924;
t861 = t1135 * t924 + t1140 * t923;
t860 = -t1135 * t922 - t1140 * t918;
t859 = -t1135 * t1240 - t1140 * t917;
t858 = -t1135 * t918 + t1140 * t922;
t857 = -t1135 * t917 + t1140 * t1240;
t856 = -pkin(8) * t946 - t901;
t855 = -t878 - t977;
t849 = t1133 * t878 - t1196 * t988;
t848 = t1132 * t878 + t1195 * t988;
t847 = t1132 * t1167 + t1195 * t986;
t846 = -t1133 * t1167 + t1196 * t986;
t845 = -t1137 * t913 + t1142 * t914;
t844 = -t1136 * t911 + t1141 * t912;
t843 = -t1136 * t909 + t1141 * t910;
t842 = t1136 * t912 + t1141 * t911;
t841 = t1136 * t910 + t1141 * t909;
t839 = -qJD(6) * t971 - t1166;
t837 = -pkin(2) * t1029 + pkin(8) * t948 + t902;
t836 = -pkin(1) * t879 - pkin(2) * t946;
t832 = -pkin(7) * t949 - t1137 * t916 + t1142 * t960;
t831 = t1142 * t902 - t1219;
t830 = t1137 * t902 + t1211;
t829 = -pkin(3) * t1240 + pkin(9) * t952 - t1222;
t825 = -pkin(7) * t937 - t1137 * t907 + t1142 * t959;
t824 = -pkin(3) * t917 + pkin(9) * t933 + t1214;
t823 = -t1030 * t1138 + t1143 * t831;
t822 = t1030 * t1143 + t1138 * t831;
t821 = -t1135 * t894 + t1140 * t896;
t820 = -t1135 * t893 + t1140 * t895;
t819 = t1135 * t896 + t1140 * t894;
t818 = t1135 * t895 + t1140 * t893;
t817 = -t1137 * t890 + t1142 * t892;
t816 = -t1137 * t889 + t1142 * t891;
t815 = -t1135 * t887 + t1140 * t888;
t814 = t1135 * t888 + t1140 * t887;
t813 = -t1137 * t884 + t1142 * t885;
t812 = t1137 * t885 + t1142 * t884;
t810 = -t927 - t840;
t807 = (-qJD(6) - t983) * t971 - t1166;
t805 = t1139 * t840 - t1224 * t971;
t804 = -t1134 * t840 - t1216 * t971;
t803 = -t1134 * t839 + t1216 * t969;
t802 = -t1139 * t839 - t1224 * t969;
t801 = t1132 * t1156 + t1133 * t864;
t800 = t1132 * t864 - t1133 * t1156;
t798 = t1139 * t925 - t1225;
t797 = -t1134 * t926 + t1244;
t796 = -t1134 * t925 - t1217;
t795 = -t1139 * t926 - t1247;
t793 = -qJ(5) * t887 - t1228;
t792 = -t1137 * t868 + t1142 * t869;
t791 = t1137 * t869 + t1142 * t868;
t788 = -t1135 * t866 + t1140 * t867;
t787 = t1135 * t867 + t1140 * t866;
t786 = -pkin(1) * t830 - pkin(2) * t901;
t785 = -t1136 * t861 + t1141 * t862;
t784 = t1136 * t862 + t1141 * t861;
t783 = -t1134 * t897 - t1217;
t782 = t1139 * t897 - t1225;
t781 = -t1136 * t858 + t1141 * t860;
t780 = -t1136 * t857 + t1141 * t859;
t779 = t1136 * t860 + t1141 * t858;
t778 = t1136 * t859 + t1141 * t857;
t777 = t1138 * t1240 + t1143 * t813;
t776 = t1138 * t813 - t1143 * t1240;
t775 = t1139 * t886 - t1247;
t774 = t1134 * t886 + t1244;
t773 = -t1132 * t855 + t1133 * t852;
t772 = -t1132 * t853 - t1133 * t850;
t771 = t1132 * t852 + t1133 * t855;
t770 = -t1132 * t850 + t1133 * t853;
t769 = -qJ(5) * t866 - t1230;
t768 = -t1135 * t848 + t1140 * t849;
t767 = -t1135 * t846 + t1140 * t847;
t766 = t1135 * t849 + t1140 * t848;
t765 = t1135 * t847 + t1140 * t846;
t764 = t1133 * t805 + t1181;
t763 = t1133 * t803 - t1181;
t762 = t1132 * t805 - t1180;
t761 = t1132 * t803 + t1180;
t760 = -t1137 * t842 + t1142 * t844;
t759 = -t1137 * t841 + t1142 * t843;
t756 = t1138 * t917 + t1143 * t792;
t755 = t1138 * t792 - t1143 * t917;
t754 = -pkin(7) * t830 - pkin(8) * t1211 - t1137 * t883;
t753 = pkin(3) * t941 + pkin(9) * t758;
t752 = -pkin(8) * t884 - t1136 * t829 + t1141 * t875;
t751 = -pkin(4) * t853 + qJ(5) * t888 - t1230;
t750 = -t1136 * t819 + t1141 * t821;
t749 = -t1136 * t818 + t1141 * t820;
t748 = t1136 * t821 + t1141 * t819;
t747 = t1136 * t820 + t1141 * t818;
t746 = -pkin(7) * t879 - t1137 * t837 + t1142 * t856;
t745 = -t1136 * t814 + t1141 * t815;
t744 = t1136 * t815 + t1141 * t814;
t743 = -pkin(4) * t850 + qJ(5) * t867 + t1228;
t742 = -t1134 * t810 - t1139 * t806;
t741 = -t1134 * t809 + t1139 * t807;
t740 = -t1134 * t806 + t1139 * t810;
t739 = -t1134 * t807 - t1139 * t809;
t735 = -pkin(8) * t868 - t1136 * t824 + t1141 * t872;
t734 = -pkin(2) * t1240 + pkin(8) * t885 + t1136 * t875 + t1141 * t829;
t733 = -pkin(9) * t858 - t757;
t732 = -t1132 * t806 + t1133 * t798;
t731 = -t1132 * t810 + t1133 * t797;
t730 = t1132 * t798 + t1133 * t806;
t729 = t1132 * t797 + t1133 * t810;
t728 = -t1135 * t800 + t1140 * t801;
t727 = t1135 * t801 + t1140 * t800;
t726 = t1132 * t809 + t1133 * t783;
t725 = t1132 * t783 - t1133 * t809;
t724 = -t1132 * t807 + t1133 * t775;
t723 = t1132 * t775 + t1133 * t807;
t722 = -t1132 * t908 + t1133 * t741;
t721 = t1132 * t741 + t1133 * t908;
t720 = -pkin(3) * t962 + pkin(9) * t860 + t758;
t719 = -pkin(2) * t917 + pkin(8) * t869 + t1136 * t872 + t1141 * t824;
t718 = -pkin(1) * t812 - pkin(2) * t884 - pkin(3) * t951 + t835;
t717 = -t1136 * t787 + t1141 * t788;
t716 = t1136 * t788 + t1141 * t787;
t715 = -t1132 * t882 + t1133 * t742;
t714 = t1132 * t742 + t1133 * t882;
t710 = -t1137 * t784 + t1142 * t785;
t709 = -t1137 * t779 + t1142 * t781;
t708 = -t1137 * t778 + t1142 * t780;
t707 = t1137 * t781 + t1142 * t779;
t706 = -t1135 * t771 + t1140 * t773;
t705 = -t1135 * t770 + t1140 * t772;
t704 = t1135 * t773 + t1140 * t771;
t703 = t1135 * t772 + t1140 * t770;
t702 = -t1136 * t766 + t1141 * t768;
t701 = -t1136 * t765 + t1141 * t767;
t700 = t1136 * t768 + t1141 * t766;
t699 = t1136 * t767 + t1141 * t765;
t698 = -t1135 * t762 + t1140 * t764;
t697 = -t1135 * t761 + t1140 * t763;
t696 = t1135 * t764 + t1140 * t762;
t695 = t1135 * t763 + t1140 * t761;
t694 = t1138 * t962 + t1143 * t709;
t693 = t1138 * t709 - t1143 * t962;
t692 = -pkin(1) * t791 - pkin(2) * t868 + t1135 * t964 + t1140 * t963 + (t1135 * (t1085 * t1129 + t1027) - t1140 * t1241) * pkin(9) + (t1051 * t1135 - t1140 * t1236 - t932) * pkin(3);
t688 = t1141 * t758 - t1220;
t687 = t1136 * t758 + t1212;
t686 = -t1137 * t748 + t1142 * t750;
t685 = -t1137 * t747 + t1142 * t749;
t684 = -t1137 * t744 + t1142 * t745;
t683 = t1137 * t745 + t1142 * t744;
t682 = -pkin(9) * t814 - t1135 * t751 + t1140 * t793;
t681 = -pkin(10) * t782 + t1218;
t680 = -pkin(10) * t774 + t1226;
t679 = -t1135 * t730 + t1140 * t732;
t678 = -t1135 * t729 + t1140 * t731;
t677 = t1135 * t732 + t1140 * t730;
t676 = t1135 * t731 + t1140 * t729;
t675 = t1138 * t853 + t1143 * t684;
t674 = t1138 * t684 - t1143 * t853;
t673 = -pkin(9) * t787 - t1135 * t743 + t1140 * t769;
t672 = -pkin(1) * t707 - pkin(2) * t779 - pkin(3) * t858;
t671 = -t1136 * t727 + t1141 * t728;
t670 = t1136 * t728 + t1141 * t727;
t669 = -t1135 * t725 + t1140 * t726;
t668 = t1135 * t726 + t1140 * t725;
t667 = -t1135 * t723 + t1140 * t724;
t666 = t1135 * t724 + t1140 * t723;
t665 = -pkin(3) * t853 + pkin(9) * t815 + t1135 * t793 + t1140 * t751;
t664 = -t1135 * t721 + t1140 * t722;
t663 = t1135 * t722 + t1140 * t721;
t662 = -t1137 * t716 + t1142 * t717;
t661 = t1137 * t717 + t1142 * t716;
t660 = -pkin(7) * t812 - t1137 * t734 + t1142 * t752;
t657 = -t1135 * t714 + t1140 * t715;
t656 = t1135 * t715 + t1140 * t714;
t653 = -pkin(3) * t850 + pkin(9) * t788 + t1135 * t769 + t1140 * t743;
t652 = -t1136 * t704 + t1141 * t706;
t651 = -t1136 * t703 + t1141 * t705;
t650 = t1136 * t706 + t1141 * t704;
t649 = t1136 * t705 + t1141 * t703;
t648 = -t1137 * t700 + t1142 * t702;
t647 = -t1137 * t699 + t1142 * t701;
t646 = -t1136 * t696 + t1141 * t698;
t645 = -t1136 * t695 + t1141 * t697;
t644 = t1136 * t698 + t1141 * t696;
t643 = t1136 * t697 + t1141 * t695;
t642 = t1138 * t850 + t1143 * t662;
t641 = t1138 * t662 - t1143 * t850;
t640 = -pkin(7) * t791 - t1137 * t719 + t1142 * t735;
t639 = pkin(4) * t838 + qJ(5) * t655;
t638 = -pkin(8) * t779 - t1136 * t720 + t1141 * t733;
t637 = -pkin(2) * t962 + pkin(8) * t781 + t1136 * t733 + t1141 * t720;
t636 = -t1137 * t687 + t1142 * t688;
t635 = t1137 * t688 + t1142 * t687;
t634 = -pkin(8) * t687 - pkin(9) * t1212 - t1136 * t753;
t633 = -t1138 * t941 + t1143 * t636;
t632 = t1138 * t636 + t1143 * t941;
t631 = -pkin(5) * t782 + t659;
t630 = -pkin(5) * t774 + t658;
t629 = -qJ(5) * t771 - t654;
t628 = pkin(2) * t941 + pkin(8) * t688 - pkin(9) * t1220 + t1141 * t753;
t627 = -pkin(4) * t898 + qJ(5) * t773 + t655;
t626 = -t1136 * t677 + t1141 * t679;
t625 = -t1136 * t676 + t1141 * t678;
t624 = t1136 * t679 + t1141 * t677;
t623 = t1136 * t678 + t1141 * t676;
t622 = -t1137 * t670 + t1142 * t671;
t621 = -t1136 * t668 + t1141 * t669;
t620 = t1136 * t669 + t1141 * t668;
t619 = -t1136 * t666 + t1141 * t667;
t618 = t1136 * t667 + t1141 * t666;
t617 = -t1136 * t663 + t1141 * t664;
t616 = t1136 * t664 + t1141 * t663;
t615 = -pkin(1) * t683 - pkin(2) * t744 - pkin(3) * t814 - pkin(4) * t887 + t713;
t612 = -t1136 * t656 + t1141 * t657;
t611 = t1136 * t657 + t1141 * t656;
t610 = t1140 * t655 - t1223;
t609 = t1135 * t655 + t1215;
t608 = -pkin(1) * t635 - pkin(2) * t687 - pkin(3) * t757;
t607 = -t1137 * t650 + t1142 * t652;
t606 = -t1137 * t649 + t1142 * t651;
t605 = t1137 * t652 + t1142 * t650;
t604 = -pkin(8) * t744 - t1136 * t665 + t1141 * t682;
t603 = -t1137 * t644 + t1142 * t646;
t602 = -t1137 * t643 + t1142 * t645;
t601 = t1138 * t898 + t1143 * t607;
t600 = t1138 * t607 - t1143 * t898;
t599 = -pkin(2) * t853 + pkin(8) * t745 + t1136 * t682 + t1141 * t665;
t598 = -pkin(1) * t661 - pkin(2) * t716 - pkin(3) * t787 - pkin(4) * t866 + t712;
t597 = -pkin(10) * t740 - t613;
t596 = -pkin(8) * t716 - t1136 * t653 + t1141 * t673;
t595 = -pkin(2) * t850 + pkin(8) * t717 + t1136 * t673 + t1141 * t653;
t594 = -qJ(5) * t725 - t1132 * t631 + t1133 * t681;
t593 = -qJ(5) * t723 - t1132 * t630 + t1133 * t680;
t592 = t1132 * t690 + t1133 * t614;
t591 = t1132 * t614 - t1133 * t690;
t590 = -pkin(4) * t782 + qJ(5) * t726 + t1132 * t681 + t1133 * t631;
t589 = -pkin(4) * t774 + qJ(5) * t724 + t1132 * t680 + t1133 * t630;
t588 = -pkin(7) * t707 - t1137 * t637 + t1142 * t638;
t587 = -pkin(9) * t704 - t1135 * t627 + t1140 * t629;
t586 = -pkin(3) * t898 + pkin(9) * t706 + t1135 * t629 + t1140 * t627;
t585 = -qJ(5) * t714 + t1133 * t597 + t1232 * t740;
t584 = -t1137 * t624 + t1142 * t626;
t583 = -t1137 * t623 + t1142 * t625;
t582 = -t1137 * t620 + t1142 * t621;
t581 = t1137 * t621 + t1142 * t620;
t580 = qJ(5) * t715 + t1132 * t597 + t1177 * t740;
t579 = -t1137 * t618 + t1142 * t619;
t578 = t1137 * t619 + t1142 * t618;
t577 = -t1137 * t616 + t1142 * t617;
t576 = -pkin(7) * t635 - t1137 * t628 + t1142 * t634;
t575 = t1138 * t782 + t1143 * t582;
t574 = t1138 * t582 - t1143 * t782;
t573 = -pkin(1) * t605 - pkin(2) * t650 - pkin(3) * t704 - pkin(4) * t771;
t572 = t1138 * t774 + t1143 * t579;
t571 = t1138 * t579 - t1143 * t774;
t570 = -t1137 * t611 + t1142 * t612;
t569 = t1137 * t612 + t1142 * t611;
t568 = -t1136 * t609 + t1141 * t610;
t567 = t1136 * t610 + t1141 * t609;
t566 = -pkin(9) * t609 - qJ(5) * t1215 - t1135 * t639;
t565 = pkin(3) * t838 + pkin(9) * t610 - qJ(5) * t1223 + t1140 * t639;
t564 = t1138 * t740 + t1143 * t570;
t563 = t1138 * t570 - t1143 * t740;
t562 = -pkin(7) * t683 - t1137 * t599 + t1142 * t604;
t561 = -t1135 * t591 + t1140 * t592;
t560 = t1135 * t592 + t1140 * t591;
t559 = -pkin(7) * t661 - t1137 * t595 + t1142 * t596;
t558 = -pkin(9) * t668 - t1135 * t590 + t1140 * t594;
t557 = -pkin(9) * t666 - t1135 * t589 + t1140 * t593;
t556 = -pkin(3) * t782 + pkin(9) * t669 + t1135 * t594 + t1140 * t590;
t555 = -qJ(5) * t591 + (-pkin(10) * t1133 + t1232) * t613;
t554 = -pkin(3) * t774 + pkin(9) * t667 + t1135 * t593 + t1140 * t589;
t553 = -pkin(8) * t650 - t1136 * t586 + t1141 * t587;
t552 = -pkin(2) * t898 + pkin(8) * t652 + t1136 * t587 + t1141 * t586;
t551 = -pkin(1) * t581 - pkin(2) * t620 - pkin(3) * t668 - pkin(4) * t725 + pkin(5) * t809 - pkin(10) * t783 - t1226;
t550 = -pkin(9) * t656 - t1135 * t580 + t1140 * t585;
t549 = -pkin(1) * t578 - pkin(2) * t618 - pkin(3) * t666 - pkin(4) * t723 - pkin(5) * t807 - pkin(10) * t775 + t1218;
t548 = -t1137 * t567 + t1142 * t568;
t547 = t1137 * t568 + t1142 * t567;
t546 = -t1138 * t838 + t1143 * t548;
t545 = t1138 * t548 + t1143 * t838;
t544 = -pkin(3) * t740 + pkin(9) * t657 + t1135 * t585 + t1140 * t580;
t543 = qJ(5) * t592 + (-pkin(10) * t1132 + t1177) * t613;
t542 = -pkin(1) * t569 - pkin(2) * t611 - pkin(3) * t656 - pkin(4) * t714 - pkin(5) * t882 - pkin(10) * t742 - t614;
t541 = -t1136 * t560 + t1141 * t561;
t540 = t1136 * t561 + t1141 * t560;
t539 = -pkin(8) * t567 - t1136 * t565 + t1141 * t566;
t538 = pkin(2) * t838 + pkin(8) * t568 + t1136 * t566 + t1141 * t565;
t537 = -pkin(8) * t620 - t1136 * t556 + t1141 * t558;
t536 = -pkin(8) * t618 - t1136 * t554 + t1141 * t557;
t535 = -pkin(2) * t782 + pkin(8) * t621 + t1136 * t558 + t1141 * t556;
t534 = -pkin(1) * t547 - pkin(2) * t567 - pkin(3) * t609 - pkin(4) * t654;
t533 = -pkin(2) * t774 + pkin(8) * t619 + t1136 * t557 + t1141 * t554;
t532 = -pkin(7) * t605 - t1137 * t552 + t1142 * t553;
t531 = -pkin(8) * t611 - t1136 * t544 + t1141 * t550;
t530 = -pkin(2) * t740 + pkin(8) * t612 + t1136 * t550 + t1141 * t544;
t529 = -pkin(9) * t560 - t1135 * t543 + t1140 * t555;
t528 = -t1137 * t540 + t1142 * t541;
t527 = t1137 * t541 + t1142 * t540;
t526 = -pkin(3) * t613 + pkin(9) * t561 + t1135 * t555 + t1140 * t543;
t525 = t1138 * t613 + t1143 * t528;
t524 = t1138 * t528 - t1143 * t613;
t523 = -pkin(7) * t547 - t1137 * t538 + t1142 * t539;
t522 = -pkin(7) * t581 - t1137 * t535 + t1142 * t537;
t521 = -pkin(7) * t578 - t1137 * t533 + t1142 * t536;
t520 = -pkin(7) * t569 - t1137 * t530 + t1142 * t531;
t519 = -pkin(1) * t527 - pkin(2) * t540 - pkin(3) * t560 - pkin(4) * t591 + pkin(5) * t690 - pkin(10) * t614;
t518 = -pkin(8) * t540 - t1136 * t526 + t1141 * t529;
t517 = -pkin(2) * t613 + pkin(8) * t541 + t1136 * t529 + t1141 * t526;
t516 = -pkin(7) * t527 - t1137 * t517 + t1142 * t518;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1099, -t1100, 0, t1062, 0, 0, 0, 0, 0, 0, t1041, t1042, t1059, t998, 0, 0, 0, 0, 0, 0, t900, t905, t871, t823, 0, 0, 0, 0, 0, 0, t756, t777, t694, t633, 0, 0, 0, 0, 0, 0, t642, t675, t601, t546, 0, 0, 0, 0, 0, 0, t572, t575, t564, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1100, -t1099, 0, t1061, 0, 0, 0, 0, 0, 0, t1039, t1040, t1058, t997, 0, 0, 0, 0, 0, 0, t899, t904, t870, t822, 0, 0, 0, 0, 0, 0, t755, t776, t693, t632, 0, 0, 0, 0, 0, 0, t641, t674, t600, t545, 0, 0, 0, 0, 0, 0, t571, t574, t563, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1063, t1064, 0, -t1020, 0, 0, 0, 0, 0, 0, t937, t949, t879, t830, 0, 0, 0, 0, 0, 0, t791, t812, t707, t635, 0, 0, 0, 0, 0, 0, t661, t683, t605, t547, 0, 0, 0, 0, 0, 0, t578, t581, t569, t527; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1100, 0, -t1099, 0, t1157, -t1080, -t1061, -pkin(6) * t1061, t1073 * t1143 - t1161, t1057 * t1143 - t1102 * t1138, t1067 * t1143 + t1137 * t1183, t1072 * t1143 + t1161, t1065 * t1143 + t1123 * t1138, qJDD(2) * t1138 + t1090 * t1143, -pkin(6) * t1039 - t1025 * t1138 + t1031 * t1143, -pkin(6) * t1040 - t1026 * t1138 + t1032 * t1143, -pkin(6) * t1058 + t1020 * t1143, -pkin(6) * t997 - (pkin(1) * t1138 - pkin(7) * t1143) * t1020, t1143 * t940 + t1172, -t1055 * t1138 + t1143 * t880, -t1138 * t1241 + t1143 * t957, t1143 * t939 - t1172, -t1004 * t1138 + t1143 * t958, t1128 * t1138 + t1143 * t966, -pkin(6) * t899 - t1138 * t865 + t1143 * t825, -pkin(6) * t904 - t1138 * t873 + t1143 * t832, -pkin(6) * t870 - t1138 * t836 + t1143 * t746, -pkin(6) * t822 - t1138 * t786 + t1143 * t754, t1143 * t760 - t1174, -t1138 * t995 + t1143 * t708, -t1138 * t922 + t1143 * t816, t1143 * t759 + t1174, -t1138 * t918 + t1143 * t817, t1143 * t845 + t1197, -pkin(6) * t755 - t1138 * t692 + t1143 * t640, -pkin(6) * t776 - t1138 * t718 + t1143 * t660, -pkin(6) * t693 - t1138 * t672 + t1143 * t588, -pkin(6) * t632 - t1138 * t608 + t1143 * t576, t1143 * t648 + t1179, -t1138 * t935 + t1143 * t606, -t1138 * t855 + t1143 * t685, t1143 * t647 - t1179, t1138 * t852 + t1143 * t686, t1143 * t710 + t1197, -pkin(6) * t641 - t1138 * t598 + t1143 * t559, -pkin(6) * t674 - t1138 * t615 + t1143 * t562, -pkin(6) * t600 - t1138 * t573 + t1143 * t532, -pkin(6) * t545 - t1138 * t534 + t1143 * t523, -t1138 * t804 + t1143 * t603, -t1138 * t739 + t1143 * t577, -t1138 * t795 + t1143 * t583, -t1138 * t802 + t1143 * t602, -t1138 * t796 + t1143 * t584, -t1138 * t863 + t1143 * t622, -pkin(6) * t571 - t1138 * t549 + t1143 * t521, -pkin(6) * t574 - t1138 * t551 + t1143 * t522, -pkin(6) * t563 - t1138 * t542 + t1143 * t520, -pkin(6) * t524 - t1138 * t519 + t1143 * t516; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1099, 0, t1100, 0, t1080, t1157, t1062, pkin(6) * t1062, t1073 * t1138 + t1160, t1057 * t1138 + t1102 * t1143, t1067 * t1138 - t1137 * t1182, t1072 * t1138 - t1160, t1065 * t1138 - t1123 * t1143, -qJDD(2) * t1143 + t1090 * t1138, pkin(6) * t1041 + t1025 * t1143 + t1031 * t1138, pkin(6) * t1042 + t1026 * t1143 + t1032 * t1138, pkin(6) * t1059 + t1020 * t1138, pkin(6) * t998 - (-pkin(1) * t1143 - pkin(7) * t1138) * t1020, t1138 * t940 - t1171, t1055 * t1143 + t1138 * t880, t1138 * t957 + t1143 * t1241, t1138 * t939 + t1171, t1004 * t1143 + t1138 * t958, -t1128 * t1143 + t1138 * t966, pkin(6) * t900 + t1138 * t825 + t1143 * t865, pkin(6) * t905 + t1138 * t832 + t1143 * t873, pkin(6) * t871 + t1138 * t746 + t1143 * t836, pkin(6) * t823 + t1138 * t754 + t1143 * t786, t1138 * t760 + t1173, t1138 * t708 + t1143 * t995, t1138 * t816 + t1143 * t922, t1138 * t759 - t1173, t1138 * t817 + t1143 * t918, t1138 * t845 - t1109, pkin(6) * t756 + t1138 * t640 + t1143 * t692, pkin(6) * t777 + t1138 * t660 + t1143 * t718, pkin(6) * t694 + t1138 * t588 + t1143 * t672, pkin(6) * t633 + t1138 * t576 + t1143 * t608, t1138 * t648 - t1178, t1138 * t606 + t1143 * t935, t1138 * t685 + t1143 * t855, t1138 * t647 + t1178, t1138 * t686 - t1143 * t852, t1138 * t710 - t1109, pkin(6) * t642 + t1138 * t559 + t1143 * t598, pkin(6) * t675 + t1138 * t562 + t1143 * t615, pkin(6) * t601 + t1138 * t532 + t1143 * t573, pkin(6) * t546 + t1138 * t523 + t1143 * t534, t1138 * t603 + t1143 * t804, t1138 * t577 + t1143 * t739, t1138 * t583 + t1143 * t795, t1138 * t602 + t1143 * t802, t1138 * t584 + t1143 * t796, t1138 * t622 + t1143 * t863, pkin(6) * t572 + t1138 * t521 + t1143 * t549, pkin(6) * t575 + t1138 * t522 + t1143 * t551, pkin(6) * t564 + t1138 * t520 + t1143 * t542, pkin(6) * t525 + t1138 * t516 + t1143 * t519; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1105, t1106, 0, 0, (t1094 + t1170) * t1137, t1093 * t1142 + t1096 * t1137, t1111 * t1142 + t1200, (t1095 - t1175) * t1142, t1113 * t1137 + t1198, 0, pkin(1) * t1096 + pkin(7) * t1066 + t1201, -pkin(1) * t1093 + pkin(7) * t1068 - t1202, pkin(1) * t1101 + pkin(7) * t1097 + t1021, pkin(1) * t1086 + pkin(7) * t1021, t1001 * t1142 + t1002 * t1137, t1137 * t947 + t1142 * t945, t1011 * t1142 + t1013 * t1137, t1000 * t1137 + t1142 * t999, t1012 * t1142 + t1014 * t1137, t1033 * t1142 + t1034 * t1137, -pkin(1) * t1003 + pkin(7) * t938 + t1137 * t959 + t1142 * t907, -pkin(1) * t1235 + pkin(7) * t950 + t1137 * t960 + t1142 * t916, -pkin(1) * t1029 + pkin(7) * t881 + t1137 * t856 + t1142 * t837, pkin(1) * t1030 + pkin(7) * t831 - pkin(8) * t1219 + t1142 * t883, t1137 * t844 + t1142 * t842, t1137 * t780 + t1142 * t778, t1137 * t891 + t1142 * t889, t1137 * t843 + t1142 * t841, t1137 * t892 + t1142 * t890, t1137 * t914 + t1142 * t913, -pkin(1) * t917 + pkin(7) * t792 + t1137 * t735 + t1142 * t719, -pkin(1) * t1240 + pkin(7) * t813 + t1137 * t752 + t1142 * t734, -pkin(1) * t962 + pkin(7) * t709 + t1137 * t638 + t1142 * t637, pkin(1) * t941 + pkin(7) * t636 + t1137 * t634 + t1142 * t628, t1137 * t702 + t1142 * t700, t1137 * t651 + t1142 * t649, t1137 * t749 + t1142 * t747, t1137 * t701 + t1142 * t699, t1137 * t750 + t1142 * t748, t1137 * t785 + t1142 * t784, -pkin(1) * t850 + pkin(7) * t662 + t1137 * t596 + t1142 * t595, -pkin(1) * t853 + pkin(7) * t684 + t1137 * t604 + t1142 * t599, -pkin(1) * t898 + pkin(7) * t607 + t1137 * t553 + t1142 * t552, pkin(1) * t838 + pkin(7) * t548 + t1137 * t539 + t1142 * t538, t1137 * t646 + t1142 * t644, t1137 * t617 + t1142 * t616, t1137 * t625 + t1142 * t623, t1137 * t645 + t1142 * t643, t1137 * t626 + t1142 * t624, t1137 * t671 + t1142 * t670, -pkin(1) * t774 + pkin(7) * t579 + t1137 * t536 + t1142 * t533, -pkin(1) * t782 + pkin(7) * t582 + t1137 * t537 + t1142 * t535, -pkin(1) * t740 + pkin(7) * t570 + t1137 * t531 + t1142 * t530, -pkin(1) * t613 + pkin(7) * t528 + t1137 * t518 + t1142 * t517;];
tauB_reg  = t1;
