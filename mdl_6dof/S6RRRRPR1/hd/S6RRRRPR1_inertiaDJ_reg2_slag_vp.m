% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:54:56
% EndTime: 2019-03-09 21:55:08
% DurationCPUTime: 4.40s
% Computational Cost: add. (14359->288), mult. (31109->507), div. (0->0), fcn. (31490->10), ass. (0->170)
t111 = sin(qJ(6));
t108 = t111 ^ 2;
t114 = cos(qJ(6));
t109 = t114 ^ 2;
t194 = t108 + t109;
t110 = sin(pkin(11));
t198 = cos(pkin(11));
t112 = sin(qJ(4));
t210 = cos(qJ(3));
t175 = t210 * qJD(3);
t166 = pkin(2) * t175;
t208 = sin(qJ(3));
t173 = t208 * qJD(3);
t209 = cos(qJ(4));
t187 = t210 * pkin(2);
t160 = t187 + pkin(3);
t94 = t209 * t160;
t62 = -qJD(4) * t94 - t209 * t166 + (t208 * qJD(4) + t173) * t112 * pkin(2);
t159 = t209 * t208;
t122 = (qJD(3) + qJD(4)) * (-t112 * t210 - t159) * pkin(2);
t191 = qJD(4) * t112;
t183 = pkin(3) * t191;
t63 = t122 - t183;
t41 = t110 * t63 - t198 * t62;
t27 = t194 * t41;
t176 = qJD(4) * t209;
t164 = pkin(3) * t176;
t80 = -t110 * t183 + t198 * t164;
t54 = t194 * t80;
t113 = sin(qJ(2));
t213 = -pkin(8) - pkin(7);
t162 = t210 * t213;
t145 = t113 * t162;
t115 = cos(qJ(2));
t179 = t208 * t115;
t217 = t213 * t179 + t145;
t223 = t217 * qJD(3);
t89 = t210 * t113 + t179;
t128 = -t89 * pkin(9) + t217;
t161 = t208 * t213;
t143 = t113 * t161;
t180 = t210 * t115;
t68 = -t213 * t180 + t143;
t88 = t208 * t113 - t180;
t129 = t88 * pkin(9) - t68;
t35 = t112 * t129 + t209 * t128;
t222 = -t208 * qJD(2) - t173;
t195 = t108 - t109;
t216 = t195 * qJD(6);
t140 = t112 * t89 + t209 * t88;
t66 = -t112 * t88 + t209 * t89;
t44 = t110 * t66 + t198 * t140;
t45 = -t110 * t140 + t198 * t66;
t106 = -t115 * pkin(2) - pkin(1);
t76 = t88 * pkin(3) + t106;
t48 = t140 * pkin(4) + t76;
t125 = t44 * pkin(5) - t45 * pkin(10) + t48;
t135 = t89 * qJD(3);
t123 = -t89 * qJD(2) - t135;
t141 = qJD(2) * t161;
t142 = qJD(2) * t162;
t118 = t123 * pkin(9) + t113 * t142 + t115 * t141 + t223;
t139 = t210 * qJD(2) + t175;
t199 = t222 * t113;
t215 = -t139 * t115 - t199;
t218 = t68 * qJD(3);
t120 = pkin(9) * t215 - t113 * t141 + t115 * t142 - t218;
t219 = -t112 * t128 + t209 * t129;
t18 = t219 * qJD(4) - t112 * t118 + t209 * t120;
t32 = -t112 * t123 + t88 * t176 + t89 * t191 + t209 * t215;
t116 = t32 * qJ(5) - t66 * qJD(5) + t18;
t119 = -t112 * t215 - t209 * t123 + t89 * t176 - t88 * t191;
t17 = -t35 * qJD(4) - t112 * t120 - t209 * t118;
t13 = -t119 * qJ(5) - t140 * qJD(5) - t17;
t7 = t110 * t116 + t198 * t13;
t221 = -qJD(6) * t125 - t7;
t40 = -t110 * t62 - t198 * t63;
t170 = t198 * t112;
t79 = (t209 * t110 + t170) * qJD(4) * pkin(3);
t220 = -t40 - t79;
t121 = -t66 * qJ(5) + t35;
t30 = -t140 * qJ(5) - t219;
t22 = t110 * t121 + t198 * t30;
t10 = -t111 * t22 + t114 * t125;
t11 = t111 * t125 + t114 * t22;
t149 = t10 * t111 - t11 * t114;
t24 = -t110 * t32 + t198 * t119;
t25 = -t110 * t119 - t198 * t32;
t193 = qJD(2) * t113;
t184 = pkin(2) * t193;
t28 = -t123 * pkin(3) + t119 * pkin(4) + t184;
t117 = t24 * pkin(5) - t25 * pkin(10) + t28;
t190 = qJD(6) * t111;
t2 = -t111 * t117 + t221 * t114 + t22 * t190;
t107 = qJD(6) * t114;
t3 = -t22 * t107 + t221 * t111 + t114 * t117;
t214 = qJD(6) * t149 + t111 * t2 - t114 * t3;
t21 = t110 * t30 - t198 * t121;
t6 = t110 * t13 - t198 * t116;
t212 = t21 * t6;
t20 = t21 * t107;
t211 = t6 * t111 + t20;
t207 = t112 * pkin(3);
t206 = t113 * pkin(2);
t205 = t21 * t40;
t204 = t21 * t79;
t203 = t45 * t25;
t185 = t208 * pkin(2);
t85 = -t112 * t185 + t94;
t81 = pkin(4) + t85;
t86 = pkin(2) * t159 + t112 * t160;
t57 = -t110 * t86 + t198 * t81;
t52 = -pkin(5) - t57;
t202 = t52 * t107 + t40 * t111;
t186 = t209 * pkin(3);
t105 = t186 + pkin(4);
t82 = t198 * t105 - t110 * t207;
t77 = -pkin(5) - t82;
t201 = t77 * t107 + t79 * t111;
t58 = t110 * t81 + t198 * t86;
t83 = pkin(3) * t170 + t110 * t105;
t196 = t111 * t114;
t192 = qJD(2) * t115;
t189 = 0.2e1 * t44 * t24;
t188 = -0.2e1 * pkin(1) * qJD(2);
t182 = t45 * t190;
t181 = t45 * t107;
t19 = t21 * t190;
t178 = t111 * t107;
t177 = t113 * t192;
t49 = t52 * t190;
t172 = -t114 * t40 + t49;
t69 = t77 * t190;
t171 = -t114 * t79 + t69;
t169 = -0.2e1 * t183;
t168 = -0.4e1 * t45 * t196;
t102 = pkin(4) * t110 + pkin(10);
t167 = t102 * t194;
t165 = pkin(2) * t173;
t43 = t45 ^ 2;
t163 = t43 * t178;
t158 = t21 * t25 + t45 * t6;
t156 = t24 * t45 + t25 * t44;
t155 = t40 * t45 - t41 * t44;
t53 = pkin(10) + t58;
t153 = t44 * t53 - t45 * t52;
t78 = pkin(10) + t83;
t152 = t44 * t78 - t45 * t77;
t151 = -t44 * t80 + t45 * t79;
t150 = -t10 * t114 - t11 * t111;
t103 = -t198 * pkin(4) - pkin(5);
t148 = -t102 * t24 + t103 * t25;
t147 = t102 * t44 - t103 * t45;
t16 = t44 * t107 + t111 * t24;
t136 = t106 * t89;
t134 = -t24 * t53 + t25 * t52 + t155;
t133 = -t24 * t78 + t25 * t77 + t151;
t1 = t150 * qJD(6) - t111 * t3 - t114 * t2;
t98 = -0.2e1 * t178;
t97 = 0.2e1 * t178;
t91 = t103 * t107;
t90 = t103 * t190;
t87 = -0.2e1 * t216;
t60 = pkin(3) * t135 + (t89 * pkin(3) + t206) * qJD(2);
t47 = -t218 + (t115 * t162 - t143) * qJD(2);
t46 = -t223 + (-t115 * t161 - t145) * qJD(2);
t15 = t114 * t24 - t44 * t190;
t14 = -t25 * t196 + t45 * t216;
t9 = qJD(6) * t168 - t195 * t25;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t177, 0.2e1 * (-t113 ^ 2 + t115 ^ 2) * qJD(2), 0, -0.2e1 * t177, 0, 0, t113 * t188, t115 * t188, 0, 0, -0.2e1 * t89 * t215, -0.2e1 * t199 * t88 - 0.2e1 * t89 * t139 * t113 + 0.2e1 * (-t139 * t88 + t89 * t222) * t115, 0, -0.2e1 * t88 * t123, 0, 0, 0.2e1 * qJD(3) * t136 + 0.2e1 * (t88 * t206 + t136) * qJD(2), -0.2e1 * t106 * t215 + 0.2e1 * t89 * t184, 0.2e1 * t68 * t123 + 0.2e1 * t215 * t217 + 0.2e1 * t46 * t88 - 0.2e1 * t47 * t89, 0.2e1 * t106 * t184 + 0.2e1 * t217 * t47 - 0.2e1 * t46 * t68, -0.2e1 * t66 * t32, -0.2e1 * t119 * t66 + 0.2e1 * t140 * t32, 0, 0.2e1 * t140 * t119, 0, 0, 0.2e1 * t119 * t76 + 0.2e1 * t140 * t60, -0.2e1 * t32 * t76 + 0.2e1 * t60 * t66, 0.2e1 * t119 * t219 + 0.2e1 * t140 * t17 - 0.2e1 * t18 * t66 + 0.2e1 * t35 * t32, 0.2e1 * t17 * t219 + 0.2e1 * t18 * t35 + 0.2e1 * t60 * t76, 0.2e1 * t203, -0.2e1 * t156, 0, t189, 0, 0, 0.2e1 * t24 * t48 + 0.2e1 * t28 * t44, 0.2e1 * t25 * t48 + 0.2e1 * t28 * t45, -0.2e1 * t22 * t24 - 0.2e1 * t44 * t7 + 0.2e1 * t158, 0.2e1 * t22 * t7 + 0.2e1 * t28 * t48 + 0.2e1 * t212, 0.2e1 * t109 * t203 - 0.2e1 * t163, t168 * t25 + 0.2e1 * t43 * t216, 0.2e1 * t114 * t156 - 0.2e1 * t182 * t44, 0.2e1 * t108 * t203 + 0.2e1 * t163, -0.2e1 * t111 * t156 - 0.2e1 * t181 * t44, t189, 0.2e1 * t10 * t24 + 0.2e1 * t111 * t158 + 0.2e1 * t20 * t45 + 0.2e1 * t3 * t44, -0.2e1 * t11 * t24 + 0.2e1 * t114 * t158 - 0.2e1 * t19 * t45 + 0.2e1 * t2 * t44, 0.2e1 * t150 * t25 + 0.2e1 * t214 * t45, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, 0, -t193, 0, -pkin(7) * t192, pkin(7) * t193, 0, 0, 0, 0, -t215, 0, t123, 0, t47, t46, t123 * t185 + t89 * t165 - t88 * t166 + t187 * t215 (t210 * t47 - t208 * t46 + (-t208 * t217 + t210 * t68) * qJD(3)) * pkin(2), 0, 0, -t32, 0, -t119, 0, t18, t17, -t119 * t86 + t140 * t62 + t85 * t32 - t63 * t66, -t17 * t86 + t18 * t85 + t219 * t62 + t35 * t63, 0, 0, t25, 0, -t24, 0, -t6, -t7, -t24 * t58 - t25 * t57 + t155, t22 * t41 - t57 * t6 + t58 * t7 + t205, -t14, t9, t16, t14, t15, 0, t19 + (-qJD(6) * t153 - t6) * t114 + t134 * t111, t114 * t134 + t153 * t190 + t211, t1, t1 * t53 - t149 * t41 + t52 * t6 + t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t165, -0.2e1 * t166, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t63, 0.2e1 * t62, 0, -0.2e1 * t62 * t86 + 0.2e1 * t63 * t85, 0, 0, 0, 0, 0, 0, -0.2e1 * t40, -0.2e1 * t41, 0, -0.2e1 * t40 * t57 + 0.2e1 * t41 * t58, t97, t87, 0, t98, 0, 0, 0.2e1 * t172, 0.2e1 * t202, 0.2e1 * t27, 0.2e1 * t53 * t27 + 0.2e1 * t40 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, 0, t123, 0, t47, t46, 0, 0, 0, 0, -t32, 0, -t119, 0, t18, t17, -t119 * t207 - t140 * t164 + t66 * t183 + t32 * t186 (t209 * t18 - t17 * t112 + (-t112 * t35 - t209 * t219) * qJD(4)) * pkin(3), 0, 0, t25, 0, -t24, 0, -t6, -t7, -t24 * t83 - t25 * t82 + t151, t22 * t80 - t6 * t82 + t7 * t83 + t204, -t14, t9, t16, t14, t15, 0, t19 + (-qJD(6) * t152 - t6) * t114 + t133 * t111, t114 * t133 + t152 * t190 + t211, t1, t1 * t78 - t149 * t80 + t6 * t77 + t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165, -t166, 0, 0, 0, 0, 0, 0, 0, 0, t122 + t169, -t164 + t62, 0 (t209 * t63 - t62 * t112 + (-t112 * t85 + t209 * t86) * qJD(4)) * pkin(3), 0, 0, 0, 0, 0, 0, t220, -t80 - t41, 0, -t40 * t82 + t41 * t83 - t57 * t79 + t58 * t80, t97, t87, 0, t98, 0, 0, t220 * t114 + t49 + t69, t201 + t202, t54 + t27, t40 * t77 + t52 * t79 + t194 * (t41 * t78 + t53 * t80); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, -0.2e1 * t164, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t79, -0.2e1 * t80, 0, -0.2e1 * t79 * t82 + 0.2e1 * t80 * t83, t97, t87, 0, t98, 0, 0, 0.2e1 * t171, 0.2e1 * t201, 0.2e1 * t54, 0.2e1 * t78 * t54 + 0.2e1 * t77 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t119, 0, t18, t17, 0, 0, 0, 0, t25, 0, -t24, 0, -t6, -t7 (-t110 * t24 - t198 * t25) * pkin(4) (t110 * t7 - t198 * t6) * pkin(4), -t14, t9, t16, t14, t15, 0, t19 + t148 * t111 + (-qJD(6) * t147 - t6) * t114, t114 * t148 + t147 * t190 + t211, t1, t1 * t102 + t103 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t62, 0, 0, 0, 0, 0, 0, 0, 0, -t40, -t41, 0 (t110 * t41 - t198 * t40) * pkin(4), t97, t87, 0, t98, 0, 0, t172 + t90, t91 + t202, t27, t103 * t40 + t167 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t164, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t80, 0 (t110 * t80 - t198 * t79) * pkin(4), t97, t87, 0, t98, 0, 0, t171 + t90, t91 + t201, t54, t103 * t79 + t167 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t87, 0, t98, 0, 0, 0.2e1 * t90, 0.2e1 * t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, t25, 0, t28, 0, 0, 0, 0, 0, 0, t15, -t16, -t194 * t25, -t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114 * t25 - t182, 0, -t111 * t25 - t181, t24, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t190, 0, -t107 * t53 - t111 * t41, -t114 * t41 + t190 * t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t190, 0, -t107 * t78 - t111 * t80, -t114 * t80 + t190 * t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t190, 0, -t102 * t107, t102 * t190, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t190, -t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
