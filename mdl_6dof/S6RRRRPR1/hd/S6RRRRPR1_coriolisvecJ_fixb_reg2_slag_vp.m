% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPR1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:54:56
% EndTime: 2019-03-09 21:55:20
% DurationCPUTime: 10.87s
% Computational Cost: add. (28311->583), mult. (74158->763), div. (0->0), fcn. (56673->10), ass. (0->301)
t275 = cos(qJ(6));
t339 = qJD(6) * t275;
t277 = cos(qJ(3));
t273 = sin(qJ(3));
t274 = sin(qJ(2));
t346 = qJD(1) * t274;
t331 = t273 * t346;
t278 = cos(qJ(2));
t345 = qJD(1) * t278;
t222 = -t277 * t345 + t331;
t236 = t273 * t278 + t274 * t277;
t224 = qJD(1) * t236;
t272 = sin(qJ(4));
t276 = cos(qJ(4));
t175 = t222 * t276 + t272 * t224;
t270 = sin(pkin(11));
t301 = t222 * t272 - t276 * t224;
t384 = cos(pkin(11));
t124 = t384 * t175 - t270 * t301;
t426 = t124 * t275;
t430 = t339 + t426;
t267 = qJD(2) + qJD(3);
t266 = qJD(4) + t267;
t271 = sin(qJ(6));
t412 = -t270 * t175 - t301 * t384;
t113 = t266 * t271 + t275 * t412;
t423 = qJD(6) + t124;
t428 = t423 * t271;
t429 = t113 * t428;
t373 = t124 ^ 2;
t376 = t412 ^ 2;
t43 = -t373 + t376;
t111 = -t275 * t266 + t271 * t412;
t340 = qJD(6) * t271;
t336 = qJD(1) * qJD(2);
t329 = t274 * t336;
t348 = qJD(3) * t331 + t273 * t329;
t408 = t278 * t267;
t414 = t277 * t408;
t288 = qJD(1) * t414 - t348;
t409 = t224 * t267;
t282 = qJD(4) * t301 - t272 * t288 - t276 * t409;
t341 = qJD(4) * t276;
t342 = qJD(4) * t272;
t93 = t222 * t341 + t224 * t342 + t272 * t409 - t276 * t288;
t66 = t270 * t282 - t384 * t93;
t39 = -t266 * t339 - t275 * t66 + t340 * t412;
t394 = t271 * t66;
t40 = qJD(6) * t113 + t394;
t390 = -t111 * t339 - t271 * t40;
t427 = -t111 * t426 - t275 * t39 + t390;
t36 = t39 * t271;
t18 = t113 * t430 - t36;
t379 = t113 * t412;
t327 = t270 * t93 + t282 * t384;
t62 = t271 * t327;
t13 = t423 * t430 - t379 - t62;
t383 = qJ(5) * t175;
t407 = -pkin(8) - pkin(7);
t248 = t407 * t278;
t242 = qJD(1) * t248;
t225 = t273 * t242;
t247 = t407 * t274;
t240 = qJD(1) * t247;
t399 = qJD(2) * pkin(2);
t231 = t240 + t399;
t183 = t277 * t231 + t225;
t217 = t224 * pkin(9);
t150 = t183 - t217;
t141 = pkin(3) * t267 + t150;
t229 = t277 * t242;
t358 = t273 * t231;
t184 = -t229 + t358;
t402 = pkin(9) * t222;
t151 = t184 - t402;
t355 = t276 * t151;
t96 = t141 * t272 + t355;
t83 = t96 - t383;
t395 = t270 * t83;
t167 = t301 * qJ(5);
t145 = t272 * t151;
t95 = t276 * t141 - t145;
t82 = t95 + t167;
t79 = pkin(4) * t266 + t82;
t50 = t384 * t79 - t395;
t48 = -t266 * pkin(5) - t50;
t398 = t124 * t48;
t372 = t124 * t266;
t45 = t66 + t372;
t425 = t124 * t412;
t375 = t412 * t266;
t44 = t327 + t375;
t422 = pkin(5) * t412 + pkin(10) * t124;
t263 = -pkin(2) * t278 - pkin(1);
t246 = qJD(1) * t263;
t194 = t222 * pkin(3) + t246;
t134 = t175 * pkin(4) + qJD(5) + t194;
t332 = qJD(2) * t407;
t313 = qJD(1) * t332;
t232 = t274 * t313;
t233 = t278 * t313;
t343 = qJD(3) * t277;
t344 = qJD(3) * t273;
t132 = t231 * t343 + t277 * t232 + t273 * t233 + t242 * t344;
t100 = -pkin(9) * t409 + t132;
t321 = -t273 * t232 + t277 * t233;
t328 = t278 * t336;
t101 = -(t277 * t328 - t348) * pkin(9) + (-t358 + (-pkin(9) * t345 + t242) * t277) * qJD(3) + t321;
t325 = -t272 * t100 + t276 * t101;
t42 = -qJD(4) * t96 + t325;
t285 = t93 * qJ(5) + qJD(5) * t301 + t42;
t318 = -t276 * t100 - t272 * t101 - t141 * t341 + t151 * t342;
t30 = qJ(5) * t282 - qJD(5) * t175 - t318;
t9 = t270 * t285 + t30 * t384;
t281 = t124 * t134 - t9;
t363 = t194 * t301;
t420 = t363 + t42;
t382 = t111 * t412;
t377 = t423 * t412;
t80 = t384 * t83;
t51 = t270 * t79 + t80;
t49 = pkin(10) * t266 + t51;
t67 = t124 * pkin(5) - pkin(10) * t412 + t134;
t21 = t271 * t67 + t275 * t49;
t155 = pkin(2) * t329 + pkin(3) * t409;
t75 = -pkin(4) * t282 + t155;
t17 = -pkin(5) * t327 - t66 * pkin(10) + t75;
t3 = -qJD(6) * t21 + t275 * t17 - t271 * t9;
t418 = t21 * t423 + t3;
t8 = t270 * t30 - t384 * t285;
t298 = -t134 * t412 - t8;
t302 = t271 * t49 - t275 * t67;
t2 = -qJD(6) * t302 + t271 * t17 + t275 * t9;
t417 = t302 * t423 + t2;
t405 = t8 * t271 + t48 * t339;
t314 = t21 * t412 + t405;
t330 = -t8 * t275 + t48 * t340;
t299 = t302 * t412 + t330;
t403 = pkin(4) * t301;
t415 = t175 * t301;
t84 = -t175 ^ 2 + t301 ^ 2;
t77 = t175 * t266 - t93;
t294 = t175 * t194 + t318;
t78 = -t266 * t301 + t282;
t265 = t274 * t399;
t411 = 0.2e1 * t265;
t410 = -0.2e1 * t336;
t195 = t277 * t247 + t248 * t273;
t168 = -pkin(9) * t236 + t195;
t196 = t273 * t247 - t277 * t248;
t354 = t277 * t278;
t357 = t273 * t274;
t235 = -t354 + t357;
t169 = -pkin(9) * t235 + t196;
t120 = t272 * t168 + t276 * t169;
t119 = t276 * t168 - t169 * t272;
t189 = -t235 * t272 + t236 * t276;
t295 = -qJ(5) * t189 + t119;
t188 = t276 * t235 + t236 * t272;
t92 = -qJ(5) * t188 + t120;
t60 = t270 * t92 - t295 * t384;
t406 = t60 * t8;
t404 = pkin(3) * t224;
t1 = t2 * t275;
t400 = pkin(3) * qJD(4);
t130 = t188 * t384 + t189 * t270;
t397 = t130 * t327;
t396 = t21 * t271;
t192 = -qJD(2) * t354 + t267 * t357 - t278 * t343;
t291 = t236 * qJD(3);
t193 = qJD(2) * t236 + t291;
t107 = t276 * t192 + t272 * t193 + t235 * t341 + t236 * t342;
t108 = qJD(4) * t189 - t272 * t192 + t276 * t193;
t71 = -t107 * t384 - t270 * t108;
t393 = t271 * t71;
t392 = t275 * t71;
t38 = t40 * t275;
t262 = pkin(2) * t277 + pkin(3);
t359 = t272 * t273;
t181 = t262 * t341 + (-t273 * t342 + (t276 * t277 - t359) * qJD(3)) * pkin(2);
t356 = t273 * t276;
t182 = -t262 * t342 + (-t273 * t341 + (-t272 * t277 - t356) * qJD(3)) * pkin(2);
t190 = -t240 * t273 + t229;
t153 = t190 + t402;
t191 = t277 * t240 + t225;
t154 = -t217 + t191;
t105 = t153 * t276 - t154 * t272;
t289 = t105 + t383;
t106 = t272 * t153 + t276 * t154;
t88 = t167 + t106;
t388 = (-t182 + t289) * t384 + (t181 - t88) * t270;
t129 = t181 * t384 + t270 * t182;
t57 = t270 * t289 + t384 * t88;
t387 = t129 - t57;
t102 = -t150 * t272 - t355;
t290 = t102 + t383;
t326 = t384 * t272;
t103 = t276 * t150 - t145;
t86 = t167 + t103;
t386 = -t270 * t86 + t384 * t290 + (t270 * t276 + t326) * t400;
t360 = t270 * t272;
t212 = (t276 * t384 - t360) * t400;
t55 = t270 * t290 + t384 * t86;
t385 = t212 - t55;
t381 = t111 * t271;
t380 = t113 * t111;
t378 = t113 * t271;
t131 = -t270 * t188 + t189 * t384;
t368 = t131 * t271;
t367 = t131 * t275;
t362 = t224 * t222;
t361 = t246 * t224;
t280 = qJD(1) ^ 2;
t353 = t278 * t280;
t279 = qJD(2) ^ 2;
t352 = t279 * t274;
t351 = t279 * t278;
t350 = t105 - t182;
t349 = t106 - t181;
t218 = -pkin(2) * t359 + t276 * t262;
t213 = pkin(4) + t218;
t219 = pkin(2) * t356 + t262 * t272;
t163 = t270 * t213 + t384 * t219;
t261 = pkin(3) * t276 + pkin(4);
t215 = pkin(3) * t326 + t270 * t261;
t347 = t274 ^ 2 - t278 ^ 2;
t335 = -t124 * t396 + t302 * t426 + t1;
t264 = pkin(2) * t346;
t333 = t274 * t353;
t179 = pkin(3) * t193 + t265;
t140 = t404 - t403;
t69 = t140 + t422;
t23 = -t271 * t55 + t275 * t69;
t324 = -t212 * t271 - t23;
t24 = t271 * t69 + t275 * t55;
t323 = t212 * t275 - t24;
t322 = pkin(1) * t410;
t317 = t274 * t267;
t312 = t274 * t328;
t310 = t273 * t408;
t309 = -t50 * t124 + t412 * t51;
t258 = pkin(4) * t270 + pkin(10);
t308 = t258 * t327 + t398;
t158 = pkin(10) + t163;
t307 = t158 * t327 + t398;
t206 = pkin(10) + t215;
t306 = t206 * t327 + t398;
t305 = -t175 * t95 - t301 * t96;
t304 = t275 * t302 - t396;
t303 = -t21 * t275 - t271 * t302;
t61 = t270 * t295 + t384 * t92;
t201 = pkin(3) * t235 + t263;
t147 = pkin(4) * t188 + t201;
t73 = pkin(5) * t130 - pkin(10) * t131 + t147;
t32 = t271 * t73 + t275 * t61;
t31 = -t271 * t61 + t275 * t73;
t63 = t275 * t327;
t300 = -t63 + (-t124 * t271 - t340) * t423;
t89 = pkin(4) * t108 + t179;
t297 = t131 * t339 + t393;
t296 = -t131 * t340 + t392;
t162 = t213 * t384 - t270 * t219;
t292 = t246 * t222 - t132;
t241 = t274 * t332;
t243 = t278 * t332;
t138 = t277 * t241 + t273 * t243 + t247 * t343 + t248 * t344;
t116 = -pkin(9) * t193 + t138;
t139 = -qJD(3) * t196 - t273 * t241 + t277 * t243;
t117 = t192 * pkin(9) + t139;
t58 = t276 * t116 + t272 * t117 + t168 * t341 - t169 * t342;
t214 = -pkin(3) * t360 + t261 * t384;
t133 = -qJD(3) * t184 + t321;
t286 = qJD(6) * t304 - t3 * t271 + t1;
t59 = -qJD(4) * t120 - t272 * t116 + t276 * t117;
t283 = t107 * qJ(5) - t189 * qJD(5) + t59;
t259 = -pkin(4) * t384 - pkin(5);
t205 = -pkin(5) - t214;
t197 = t264 + t404;
t157 = -pkin(5) - t162;
t152 = -t222 ^ 2 + t224 ^ 2;
t143 = t222 * t267 + t288;
t135 = t140 + t264;
t72 = -t403 + t422;
t70 = -t107 * t270 + t108 * t384;
t68 = t264 + t69;
t53 = t384 * t82 - t395;
t52 = t270 * t82 + t80;
t34 = -qJ(5) * t108 - qJD(5) * t188 + t58;
t28 = t271 * t72 + t275 * t53;
t27 = -t271 * t53 + t275 * t72;
t26 = t271 * t68 + t275 * t57;
t25 = -t271 * t57 + t275 * t68;
t22 = pkin(5) * t70 - pkin(10) * t71 + t89;
t19 = t381 * t423 - t38;
t12 = -t423 * t428 + t382 - t63;
t11 = t270 * t283 + t34 * t384;
t10 = t270 * t34 - t283 * t384;
t6 = t427 - t429;
t5 = -qJD(6) * t32 - t271 * t11 + t275 * t22;
t4 = qJD(6) * t31 + t275 * t11 + t271 * t22;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t312, t347 * t410, t351, -0.2e1 * t312, -t352, 0, -pkin(7) * t351 + t274 * t322, pkin(7) * t352 + t278 * t322, 0, 0, -t224 * t192 + t236 * t288, t192 * t222 + t348 * t235 - t224 * t193 + (-t236 * t310 + (-t235 * t408 - t236 * t317) * t277) * qJD(1), -t192 * t267, t222 * t193 + t235 * t409, -t193 * t267, 0, t222 * t265 + t139 * t267 + t246 * t193 + (t263 * t291 + (t274 * pkin(2) * t235 + t236 * t263) * qJD(2)) * qJD(1), -t138 * t267 - t246 * t192 + t224 * t411 + t263 * t288, -t138 * t222 - t132 * t235 - t184 * t193 - t139 * t224 + t195 * t348 - t133 * t236 + t183 * t192 + (-t196 * t310 + (-t195 * t408 - t196 * t317) * t277) * qJD(1), t132 * t196 + t133 * t195 + t184 * t138 + t183 * t139 + t246 * t411, t107 * t301 - t189 * t93, t107 * t175 + t108 * t301 + t188 * t93 + t189 * t282, -t107 * t266, t108 * t175 - t188 * t282, -t108 * t266, 0, t108 * t194 + t155 * t188 + t175 * t179 - t201 * t282 + t266 * t59, -t107 * t194 + t155 * t189 - t179 * t301 - t201 * t93 - t266 * t58, t107 * t95 - t108 * t96 + t119 * t93 + t120 * t282 - t175 * t58 + t188 * t318 - t189 * t42 + t301 * t59, t119 * t42 - t120 * t318 + t155 * t201 + t179 * t194 + t58 * t96 + t59 * t95, t131 * t66 + t412 * t71, -t124 * t71 - t130 * t66 + t131 * t327 - t412 * t70, t71 * t266, t124 * t70 - t397, -t70 * t266, 0, -t10 * t266 + t124 * t89 + t130 * t75 + t134 * t70 - t147 * t327, -t11 * t266 + t131 * t75 + t134 * t71 + t147 * t66 + t412 * t89, t10 * t412 - t11 * t124 - t130 * t9 + t131 * t8 + t327 * t61 - t50 * t71 - t51 * t70 + t60 * t66, -t10 * t50 + t11 * t51 + t134 * t89 + t147 * t75 + t61 * t9 + t406, t113 * t296 - t367 * t39 (-t111 * t275 - t378) * t71 + (t36 - t38 + (-t113 * t275 + t381) * qJD(6)) * t131, t113 * t70 - t39 * t130 + t296 * t423 - t327 * t367, t111 * t297 + t368 * t40, -t111 * t70 - t40 * t130 - t297 * t423 + t327 * t368, t423 * t70 - t397, t10 * t111 + t3 * t130 + t131 * t405 - t302 * t70 - t31 * t327 + t393 * t48 + t60 * t40 + t423 * t5, t10 * t113 - t2 * t130 - t131 * t330 - t21 * t70 + t32 * t327 - t60 * t39 + t48 * t392 - t4 * t423, -t4 * t111 - t5 * t113 + t31 * t39 - t32 * t40 + t304 * t71 + (qJD(6) * t303 - t2 * t271 - t3 * t275) * t131, t10 * t48 + t2 * t32 + t21 * t4 + t3 * t31 - t302 * t5 + t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t333, t347 * t280, 0, t333, 0, 0, t280 * pkin(1) * t274, pkin(1) * t353, 0, 0, t362, t152, t143, -t362, 0, 0, -t222 * t264 - t190 * t267 - t361 + (t229 + (-pkin(2) * t267 - t231) * t273) * qJD(3) + t321, t191 * t267 + (-t224 * t346 - t267 * t343) * pkin(2) + t292 (t184 + t190) * t224 + (-t183 + t191) * t222 + (t277 * t348 + (-t277 * t222 + t273 * t224) * qJD(3) + (-t273 ^ 2 * t408 + (-t273 * t317 - t414) * t277) * qJD(1)) * pkin(2), -t183 * t190 - t184 * t191 + (-t246 * t346 + t132 * t273 + t133 * t277 + (-t183 * t273 + t184 * t277) * qJD(3)) * pkin(2), -t415, t84, t77, t415, t78, 0, -t197 * t175 - t266 * t350 + t420, t197 * t301 + t266 * t349 + t294, t175 * t349 + t218 * t93 + t219 * t282 - t301 * t350 + t305, -t194 * t197 + t218 * t42 - t219 * t318 - t349 * t96 - t350 * t95, t425, t43, t45, -t425, t44, 0, -t124 * t135 - t266 * t388 + t298, -t135 * t412 - t266 * t387 + t281, -t124 * t387 - t162 * t66 + t163 * t327 + t388 * t412 + t309, -t134 * t135 - t162 * t8 + t163 * t9 + t387 * t51 - t388 * t50, t18, t6, t13, t19, t12, -t377, t157 * t40 + t307 * t271 + t388 * t111 + (-t129 * t271 - t158 * t339 - t25) * t423 + t299, -t157 * t39 + t307 * t275 + t388 * t113 + (-t129 * t275 + t158 * t340 + t26) * t423 + t314, t26 * t111 + t25 * t113 + (-t111 * t129 - t158 * t40 + (t113 * t158 + t302) * qJD(6)) * t275 + (t113 * t129 - t158 * t39 - t3 + (t111 * t158 - t21) * qJD(6)) * t271 + t335, -t129 * t303 + t8 * t157 + t158 * t286 - t21 * t26 + t25 * t302 + t388 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, t152, t143, -t362, 0, 0, t184 * t267 + t133 - t361, t183 * t267 + t292, 0, 0, -t415, t84, t77, t415, t78, 0, -t175 * t404 - t102 * t266 + t363 + (-t355 + (-pkin(3) * t266 - t141) * t272) * qJD(4) + t325, t103 * t266 + (t224 * t301 - t266 * t341) * pkin(3) + t294, -t102 * t301 + t103 * t175 + (t272 * t282 + t276 * t93 + (-t175 * t276 - t272 * t301) * qJD(4)) * pkin(3) + t305, -t95 * t102 - t96 * t103 + (-t194 * t224 - t272 * t318 + t276 * t42 + (-t272 * t95 + t276 * t96) * qJD(4)) * pkin(3), t425, t43, t45, -t425, t44, 0, -t124 * t140 - t266 * t386 + t298, -t140 * t412 - t266 * t385 + t281, -t124 * t385 - t214 * t66 + t215 * t327 + t386 * t412 + t309, -t134 * t140 - t214 * t8 + t215 * t9 + t385 * t51 - t386 * t50, t18, t6, t13, t19, t12, -t377, t205 * t40 + t306 * t271 + t386 * t111 + (-t206 * t339 + t324) * t423 + t299, -t205 * t39 + t306 * t275 + t386 * t113 + (t206 * t340 - t323) * t423 + t314, t24 * t111 + t23 * t113 + (-t111 * t212 - t206 * t40 + (t113 * t206 + t302) * qJD(6)) * t275 + (t113 * t212 - t206 * t39 - t3 + (t111 * t206 - t21) * qJD(6)) * t271 + t335, t8 * t205 + t206 * t286 + t21 * t323 - t302 * t324 + t386 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t415, t84, t77, t415, t78, 0, t96 * t266 + t420, t266 * t95 + t294, 0, 0, t425, t43, t45, -t425, t44, 0, t124 * t403 + t266 * t52 + t298, t53 * t266 + t403 * t412 + t281 (t270 * t327 - t384 * t66) * pkin(4) + (t51 - t52) * t412 + (t53 - t50) * t124, t50 * t52 - t51 * t53 + (t134 * t301 + t270 * t9 - t384 * t8) * pkin(4), t18, -t378 * t423 + t427, t13, t111 * t428 - t38, t300 + t382, -t377, -t52 * t111 + t259 * t40 + t308 * t271 + (-t258 * t339 - t27) * t423 + t299, -t52 * t113 - t259 * t39 + t308 * t275 + (t258 * t340 + t28) * t423 + t314, t28 * t111 + t27 * t113 + t1 + (t124 * t302 - t258 * t40 + (t113 * t258 + t302) * qJD(6)) * t275 + (-t124 * t21 - t258 * t39 - t3 + (t111 * t258 - t21) * qJD(6)) * t271, -t21 * t28 + t258 * t286 + t8 * t259 + t27 * t302 - t48 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327 + t375, t66 - t372, -t373 - t376, t124 * t51 + t412 * t50 + t75, 0, 0, 0, 0, 0, 0, t300 - t382, -t275 * t423 ^ 2 - t379 + t62 (-t111 * t124 + t39) * t275 + t429 + t390, t417 * t271 + t275 * t418 - t48 * t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, -t111 ^ 2 + t113 ^ 2, t111 * t423 - t39, -t380, -t394 + (-qJD(6) + t423) * t113, -t327, -t48 * t113 + t418, t48 * t111 - t417, 0, 0;];
tauc_reg  = t7;
