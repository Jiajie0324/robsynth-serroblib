% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPR1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR1_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:29:19
% EndTime: 2019-05-07 19:29:53
% DurationCPUTime: 18.73s
% Computational Cost: add. (157806->672), mult. (367251->982), div. (0->0), fcn. (284741->12), ass. (0->427)
t409 = cos(qJ(2));
t390 = t409 * qJDD(1);
t404 = sin(qJ(2));
t456 = qJD(1) * qJD(2);
t450 = t404 * t456;
t375 = t390 - t450;
t398 = t409 ^ 2;
t411 = qJD(1) ^ 2;
t405 = sin(qJ(1));
t501 = cos(qJ(1));
t448 = g(1) * t405 - t501 * g(2);
t421 = qJDD(1) * pkin(1) + t448;
t463 = qJD(1) * t404;
t422 = qJD(2) * pkin(2) - pkin(8) * t463;
t338 = pkin(2) * t375 - t422 * t463 + t421 + (pkin(8) * t398 + pkin(7)) * t411;
t403 = sin(qJ(3));
t408 = cos(qJ(3));
t368 = (t403 * t409 + t404 * t408) * qJD(1);
t389 = t404 * qJDD(1);
t449 = t409 * t456;
t374 = t389 + t449;
t440 = t374 * t403 - t408 * t375;
t335 = -qJD(3) * t368 - t440;
t366 = -t408 * t409 * qJD(1) + t403 * t463;
t364 = t366 ^ 2;
t396 = qJD(2) + qJD(3);
t434 = pkin(3) * t396 - pkin(9) * t368;
t275 = pkin(3) * t335 + pkin(9) * t364 - t368 * t434 + t338;
t515 = 2 * qJD(5);
t399 = sin(pkin(11));
t402 = sin(qJ(4));
t407 = cos(qJ(4));
t348 = -t366 * t407 - t402 * t368;
t349 = -t366 * t402 + t368 * t407;
t400 = cos(pkin(11));
t311 = -t400 * t348 + t349 * t399;
t313 = t399 * t348 + t400 * t349;
t274 = t313 * t311;
t395 = qJDD(2) + qJDD(3);
t387 = qJDD(4) + t395;
t505 = -t274 + t387;
t514 = t399 * t505;
t513 = t400 * t505;
t401 = sin(qJ(6));
t426 = t374 * t408 + t375 * t403;
t336 = -qJD(3) * t366 + t426;
t442 = -t407 * t335 + t336 * t402;
t277 = -qJD(4) * t349 - t442;
t427 = t335 * t402 + t336 * t407;
t278 = qJD(4) * t348 + t427;
t443 = -t400 * t277 + t278 * t399;
t226 = qJDD(6) + t443;
t388 = qJD(4) + t396;
t406 = cos(qJ(6));
t294 = t313 * t401 - t406 * t388;
t296 = t313 * t406 + t388 * t401;
t253 = t296 * t294;
t506 = t226 - t253;
t512 = t401 * t506;
t321 = t348 * t349;
t504 = t321 + t387;
t511 = t402 * t504;
t355 = t368 * t366;
t503 = -t355 + t395;
t510 = t403 * t503;
t509 = t406 * t506;
t508 = t407 * t504;
t507 = t408 * t503;
t346 = t348 ^ 2;
t430 = pkin(4) * t388 - qJ(5) * t349;
t197 = pkin(4) * t277 + qJ(5) * t346 - t349 * t430 - qJDD(5) + t275;
t481 = t313 * t388;
t204 = t443 + t481;
t228 = t277 * t399 + t278 * t400;
t302 = t388 * t311;
t207 = t228 - t302;
t120 = pkin(5) * t204 - pkin(10) * t207 - t197;
t272 = pkin(5) * t311 - pkin(10) * t313;
t502 = t388 ^ 2;
t466 = t404 * t411;
t423 = g(1) * t501 + t405 * g(2);
t495 = qJDD(1) * pkin(7);
t370 = -t411 * pkin(1) - t423 + t495;
t474 = t370 * t404;
t331 = qJDD(2) * pkin(2) - pkin(8) * t374 - t474 + (pkin(2) * t466 + pkin(8) * t456 - g(3)) * t409;
t359 = -t404 * g(3) + t409 * t370;
t392 = t398 * t411;
t332 = -pkin(2) * t392 + t375 * pkin(8) - qJD(2) * t422 + t359;
t290 = -t408 * t331 + t332 * t403;
t362 = t396 * t366;
t327 = t336 + t362;
t246 = pkin(3) * t503 - pkin(9) * t327 - t290;
t291 = t403 * t331 + t408 * t332;
t247 = -t364 * pkin(3) + t335 * pkin(9) - t396 * t434 + t291;
t196 = t402 * t246 + t407 * t247;
t167 = -t346 * pkin(4) + t277 * qJ(5) - t388 * t430 + t196;
t195 = -t407 * t246 + t247 * t402;
t341 = t388 * t348;
t258 = t278 - t341;
t414 = pkin(4) * t504 - qJ(5) * t258 - t195;
t97 = -0.2e1 * qJD(5) * t311 + t400 * t167 + t399 * t414;
t85 = -pkin(5) * t502 + pkin(10) * t387 - t272 * t311 + t97;
t60 = -t406 * t120 + t401 * t85;
t61 = t120 * t401 + t406 * t85;
t39 = t401 * t60 + t406 * t61;
t446 = t167 * t399 - t400 * t414;
t96 = t313 * t515 + t446;
t308 = qJD(6) + t311;
t444 = t228 * t401 - t406 * t387;
t176 = (qJD(6) - t308) * t296 + t444;
t292 = t294 ^ 2;
t293 = t296 ^ 2;
t306 = t308 ^ 2;
t309 = t311 ^ 2;
t310 = t313 ^ 2;
t347 = t349 ^ 2;
t365 = t368 ^ 2;
t394 = t396 ^ 2;
t500 = pkin(5) * t399;
t53 = t399 * t97 - t400 * t96;
t497 = t407 * t53;
t54 = t399 * t96 + t400 * t97;
t33 = t402 * t54 + t497;
t52 = pkin(4) * t53;
t499 = pkin(3) * t33 + t52;
t84 = -t387 * pkin(5) - t502 * pkin(10) + (t515 + t272) * t313 + t446;
t81 = t401 * t84;
t498 = t402 * t53;
t82 = t406 * t84;
t208 = t228 + t302;
t419 = -t443 + t481;
t146 = -t208 * t400 + t399 * t419;
t143 = pkin(4) * t146;
t148 = t208 * t399 + t400 * t419;
t92 = t146 * t407 + t148 * t402;
t496 = pkin(3) * t92 + t143;
t132 = -t195 * t407 + t196 * t402;
t494 = t132 * t403;
t493 = t132 * t408;
t191 = t226 + t253;
t492 = t191 * t401;
t491 = t191 * t406;
t490 = t197 * t399;
t489 = t197 * t400;
t243 = -t290 * t408 + t291 * t403;
t488 = t243 * t404;
t267 = t274 + t387;
t487 = t267 * t399;
t486 = t267 * t400;
t485 = t275 * t402;
t484 = t275 * t407;
t483 = t308 * t401;
t482 = t308 * t406;
t316 = -t321 + t387;
t480 = t316 * t402;
t479 = t316 * t407;
t478 = t338 * t403;
t477 = t338 * t408;
t352 = t355 + t395;
t476 = t352 * t403;
t475 = t352 * t408;
t473 = t388 * t399;
t472 = t388 * t400;
t471 = t388 * t402;
t470 = t388 * t407;
t469 = t396 * t403;
t468 = t396 * t408;
t383 = t409 * t466;
t467 = t404 * (qJDD(2) + t383);
t465 = t409 * (qJDD(2) - t383);
t460 = qJD(3) + t396;
t459 = qJD(4) + t388;
t457 = qJD(6) + t308;
t27 = t39 * t399 - t400 * t84;
t455 = pkin(4) * t27 - pkin(5) * t84 + pkin(10) * t39;
t454 = t399 * t253;
t453 = t400 * t253;
t452 = -pkin(5) * t400 - pkin(4);
t28 = t39 * t400 + t399 * t84;
t14 = t27 * t407 + t28 * t402;
t447 = pkin(3) * t14 + t455;
t133 = t195 * t402 + t407 * t196;
t244 = t290 * t403 + t408 * t291;
t358 = g(3) * t409 + t474;
t441 = t404 * t358 + t409 * t359;
t241 = -t293 - t306;
t155 = -t241 * t401 - t491;
t428 = -t228 * t406 - t387 * t401;
t181 = t294 * t457 + t428;
t110 = t155 * t399 + t181 * t400;
t439 = pkin(4) * t110 + pkin(5) * t181 + pkin(10) * t155 + t81;
t233 = -t306 - t292;
t150 = t233 * t406 - t512;
t177 = -t296 * t457 - t444;
t107 = t150 * t399 + t177 * t400;
t438 = pkin(4) * t107 + pkin(5) * t177 + pkin(10) * t150 - t82;
t297 = -t310 - t502;
t235 = t297 * t400 - t487;
t437 = pkin(4) * t235 - t97;
t199 = -qJD(6) * t294 - t428;
t264 = t308 * t294;
t180 = t199 + t264;
t125 = -t176 * t406 + t180 * t401;
t230 = t292 + t293;
t99 = t125 * t399 + t230 * t400;
t435 = pkin(4) * t99 + pkin(5) * t230 + pkin(10) * t125 + t39;
t314 = -t502 - t346;
t270 = t314 * t402 + t508;
t433 = pkin(3) * t270 - t195;
t108 = t150 * t400 - t177 * t399;
t66 = t107 * t407 + t108 * t402;
t432 = pkin(3) * t66 + t438;
t111 = t155 * t400 - t181 * t399;
t69 = t110 * t407 + t111 * t402;
t431 = pkin(3) * t69 + t439;
t38 = t401 * t61 - t406 * t60;
t236 = -t297 * t399 - t486;
t183 = t235 * t407 + t236 * t402;
t429 = pkin(3) * t183 + t437;
t100 = t125 * t400 - t230 * t399;
t56 = t100 * t402 + t407 * t99;
t425 = pkin(3) * t56 + t435;
t265 = -t502 - t309;
t220 = t265 * t399 + t513;
t424 = pkin(4) * t220 - t96;
t334 = -t347 - t502;
t282 = t334 * t407 - t480;
t420 = pkin(3) * t282 - t196;
t221 = t265 * t400 - t514;
t157 = t220 * t407 + t221 * t402;
t418 = pkin(3) * t157 + t424;
t417 = (-qJD(4) + t388) * t349 - t442;
t416 = (-qJD(3) + t396) * t368 - t440;
t410 = qJD(2) ^ 2;
t397 = t404 ^ 2;
t391 = t397 * t411;
t376 = t390 - 0.2e1 * t450;
t373 = t389 + 0.2e1 * t449;
t369 = pkin(7) * t411 + t421;
t361 = -t365 + t394;
t360 = t364 - t394;
t357 = -t365 - t394;
t354 = -t364 + t365;
t350 = -t394 - t364;
t340 = -t347 + t502;
t339 = t346 - t502;
t337 = -t364 - t365;
t329 = -t357 * t403 - t475;
t328 = t357 * t408 - t476;
t326 = t336 - t362;
t325 = -t366 * t460 + t426;
t322 = t368 * t460 + t440;
t320 = t347 - t346;
t319 = t350 * t408 - t510;
t318 = t350 * t403 + t507;
t301 = -t310 + t502;
t300 = t309 - t502;
t299 = (t348 * t407 + t349 * t402) * t388;
t298 = (t348 * t402 - t349 * t407) * t388;
t289 = -t346 - t347;
t287 = t339 * t407 - t480;
t286 = -t340 * t402 + t508;
t285 = t339 * t402 + t479;
t284 = t340 * t407 + t511;
t283 = -t334 * t402 - t479;
t280 = t327 * t403 + t408 * t416;
t279 = -t327 * t408 + t403 * t416;
t273 = t310 - t309;
t271 = t314 * t407 - t511;
t263 = -t293 + t306;
t262 = t292 - t306;
t261 = (-t311 * t400 + t313 * t399) * t388;
t260 = (-t311 * t399 - t313 * t400) * t388;
t259 = t348 * t459 + t427;
t257 = t278 + t341;
t254 = t349 * t459 + t442;
t252 = t278 * t407 - t349 * t471;
t251 = t278 * t402 + t349 * t470;
t250 = -t277 * t402 - t348 * t470;
t249 = t277 * t407 - t348 * t471;
t248 = t293 - t292;
t242 = -t309 - t310;
t240 = t300 * t400 - t487;
t239 = -t301 * t399 + t513;
t238 = t300 * t399 + t486;
t237 = t301 * t400 + t514;
t232 = -t282 * t403 + t283 * t408;
t231 = t282 * t408 + t283 * t403;
t225 = -pkin(9) * t282 - t484;
t224 = -pkin(9) * t270 - t485;
t223 = -t270 * t403 + t271 * t408;
t222 = t270 * t408 + t271 * t403;
t218 = (-t294 * t406 + t296 * t401) * t308;
t217 = (-t294 * t401 - t296 * t406) * t308;
t216 = -t260 * t402 + t261 * t407;
t215 = t260 * t407 + t261 * t402;
t214 = t258 * t402 + t407 * t417;
t213 = -t254 * t407 - t257 * t402;
t212 = -t258 * t407 + t402 * t417;
t211 = -t254 * t402 + t257 * t407;
t210 = pkin(3) * t212;
t203 = t228 * t400 - t313 * t473;
t202 = t228 * t399 + t313 * t472;
t201 = t311 * t472 + t399 * t443;
t200 = t311 * t473 - t400 * t443;
t198 = -qJD(6) * t296 - t444;
t193 = -pkin(3) * t259 + pkin(9) * t283 - t485;
t189 = -pkin(3) * t254 + pkin(9) * t271 + t484;
t188 = -t238 * t402 + t240 * t407;
t187 = -t237 * t402 + t239 * t407;
t186 = t238 * t407 + t240 * t402;
t185 = t237 * t407 + t239 * t402;
t184 = -t235 * t402 + t236 * t407;
t179 = t199 - t264;
t173 = t199 * t406 - t296 * t483;
t172 = t199 * t401 + t296 * t482;
t171 = -t198 * t401 + t294 * t482;
t170 = t198 * t406 + t294 * t483;
t169 = t218 * t400 + t226 * t399;
t168 = t218 * t399 - t226 * t400;
t166 = t262 * t406 - t492;
t165 = -t263 * t401 + t509;
t164 = t262 * t401 + t491;
t163 = t263 * t406 + t512;
t161 = -qJ(5) * t235 - t489;
t158 = -t220 * t402 + t221 * t407;
t154 = t241 * t406 - t492;
t152 = -t212 * t403 + t214 * t408;
t151 = t212 * t408 + t214 * t403;
t149 = t233 * t401 + t509;
t147 = -t204 * t400 - t207 * t399;
t145 = -t204 * t399 + t207 * t400;
t142 = -qJ(5) * t220 - t490;
t141 = -t202 * t402 + t203 * t407;
t140 = -t200 * t402 + t201 * t407;
t139 = t202 * t407 + t203 * t402;
t138 = t200 * t407 + t201 * t402;
t137 = t173 * t400 + t454;
t136 = t171 * t400 - t454;
t135 = t173 * t399 - t453;
t134 = t171 * t399 + t453;
t131 = pkin(3) * t132;
t130 = pkin(3) * t275 + pkin(9) * t133;
t129 = -pkin(4) * t207 + qJ(5) * t236 - t490;
t128 = -t183 * t403 + t184 * t408;
t127 = t183 * t408 + t184 * t403;
t126 = -pkin(4) * t204 + qJ(5) * t221 + t489;
t124 = t177 * t406 - t179 * t401;
t123 = -t176 * t401 - t180 * t406;
t122 = t177 * t401 + t179 * t406;
t118 = -pkin(9) * t212 - t132;
t117 = t166 * t400 - t176 * t399;
t116 = t165 * t400 + t180 * t399;
t115 = t166 * t399 + t176 * t400;
t114 = t165 * t399 - t180 * t400;
t113 = -t168 * t402 + t169 * t407;
t112 = t168 * t407 + t169 * t402;
t105 = t124 * t400 + t248 * t399;
t104 = t124 * t399 - t248 * t400;
t103 = -pkin(3) * t289 + pkin(9) * t214 + t133;
t102 = -t157 * t403 + t158 * t408;
t101 = t157 * t408 + t158 * t403;
t94 = -t146 * t402 + t148 * t407;
t93 = -t145 * t402 + t147 * t407;
t91 = t145 * t407 + t147 * t402;
t89 = -t135 * t402 + t137 * t407;
t88 = -t134 * t402 + t136 * t407;
t87 = t135 * t407 + t137 * t402;
t86 = t134 * t407 + t136 * t402;
t80 = t133 * t408 - t494;
t79 = t133 * t403 + t493;
t78 = -pkin(9) * t183 - t129 * t402 + t161 * t407;
t77 = -pkin(10) * t154 + t82;
t76 = -pkin(10) * t149 + t81;
t75 = -t115 * t402 + t117 * t407;
t74 = -t114 * t402 + t116 * t407;
t73 = t115 * t407 + t117 * t402;
t72 = t114 * t407 + t116 * t402;
t71 = -pkin(9) * t157 - t126 * t402 + t142 * t407;
t70 = -t110 * t402 + t111 * t407;
t67 = -t107 * t402 + t108 * t407;
t64 = -pkin(3) * t207 + pkin(9) * t184 + t129 * t407 + t161 * t402;
t63 = -t104 * t402 + t105 * t407;
t62 = t104 * t407 + t105 * t402;
t57 = t100 * t407 - t402 * t99;
t51 = -pkin(3) * t204 + pkin(9) * t158 + t126 * t407 + t142 * t402;
t50 = -t403 * t92 + t408 * t94;
t49 = t403 * t94 + t408 * t92;
t48 = pkin(4) * t197 + qJ(5) * t54;
t47 = -pkin(5) * t154 + t61;
t46 = -pkin(5) * t149 + t60;
t45 = -qJ(5) * t146 - t53;
t44 = -pkin(4) * t242 + qJ(5) * t148 + t54;
t43 = -t403 * t69 + t408 * t70;
t42 = t403 * t70 + t408 * t69;
t41 = -t403 * t66 + t408 * t67;
t40 = t403 * t67 + t408 * t66;
t36 = -t403 * t56 + t408 * t57;
t35 = t403 * t57 + t408 * t56;
t34 = t407 * t54 - t498;
t31 = -pkin(10) * t123 - t38;
t30 = -qJ(5) * t110 - t399 * t47 + t400 * t77;
t29 = -qJ(5) * t107 - t399 * t46 + t400 * t76;
t25 = -pkin(4) * t154 + qJ(5) * t111 + t399 * t77 + t400 * t47;
t24 = -pkin(4) * t149 + qJ(5) * t108 + t399 * t76 + t400 * t46;
t23 = -pkin(9) * t92 - t402 * t44 + t407 * t45;
t22 = -pkin(3) * t242 + pkin(9) * t94 + t402 * t45 + t407 * t44;
t21 = -qJ(5) * t99 + t123 * t500 + t31 * t400;
t20 = qJ(5) * t100 + t123 * t452 + t31 * t399;
t19 = -t33 * t403 + t34 * t408;
t18 = t33 * t408 + t34 * t403;
t17 = -pkin(9) * t33 - qJ(5) * t497 - t402 * t48;
t16 = pkin(3) * t197 + pkin(9) * t34 - qJ(5) * t498 + t407 * t48;
t15 = -t27 * t402 + t28 * t407;
t12 = -pkin(9) * t69 - t25 * t402 + t30 * t407;
t11 = -pkin(9) * t66 - t24 * t402 + t29 * t407;
t10 = -pkin(3) * t154 + pkin(9) * t70 + t25 * t407 + t30 * t402;
t9 = -qJ(5) * t27 + (-pkin(10) * t400 + t500) * t38;
t8 = -pkin(3) * t149 + pkin(9) * t67 + t24 * t407 + t29 * t402;
t7 = -pkin(9) * t56 - t20 * t402 + t21 * t407;
t6 = -pkin(3) * t123 + pkin(9) * t57 + t20 * t407 + t21 * t402;
t5 = qJ(5) * t28 + (-pkin(10) * t399 + t452) * t38;
t4 = -t14 * t403 + t15 * t408;
t3 = t14 * t408 + t15 * t403;
t2 = -pkin(9) * t14 - t402 * t5 + t407 * t9;
t1 = -pkin(3) * t38 + pkin(9) * t15 + t402 * t9 + t407 * t5;
t13 = [0, 0, 0, 0, 0, qJDD(1), t448, t423, 0, 0, (t374 + t449) * t404, t373 * t409 + t376 * t404, t467 + t409 * (-t391 + t410), (t375 - t450) * t409, t404 * (t392 - t410) + t465, 0, t409 * t369 + pkin(1) * t376 + pkin(7) * (t409 * (-t392 - t410) - t467), -t404 * t369 - pkin(1) * t373 + pkin(7) * (-t465 - t404 * (-t391 - t410)), pkin(1) * (t391 + t392) + (t397 + t398) * t495 + t441, pkin(1) * t369 + pkin(7) * t441, t404 * (t336 * t408 - t368 * t469) + t409 * (t336 * t403 + t368 * t468), t404 * (-t322 * t408 - t326 * t403) + t409 * (-t322 * t403 + t326 * t408), t404 * (-t361 * t403 + t507) + t409 * (t361 * t408 + t510), t404 * (-t335 * t403 + t366 * t468) + t409 * (t335 * t408 + t366 * t469), t404 * (t360 * t408 - t476) + t409 * (t360 * t403 + t475), (t404 * (-t366 * t408 + t368 * t403) + t409 * (-t366 * t403 - t368 * t408)) * t396, t404 * (-pkin(8) * t318 - t478) + t409 * (-pkin(2) * t322 + pkin(8) * t319 + t477) - pkin(1) * t322 + pkin(7) * (-t318 * t404 + t319 * t409), t404 * (-pkin(8) * t328 - t477) + t409 * (-pkin(2) * t325 + pkin(8) * t329 - t478) - pkin(1) * t325 + pkin(7) * (-t328 * t404 + t329 * t409), t404 * (-pkin(8) * t279 - t243) + t409 * (-pkin(2) * t337 + pkin(8) * t280 + t244) - pkin(1) * t337 + pkin(7) * (-t279 * t404 + t280 * t409), -pkin(8) * t488 + t409 * (pkin(2) * t338 + pkin(8) * t244) + pkin(1) * t338 + pkin(7) * (t244 * t409 - t488), t404 * (-t251 * t403 + t252 * t408) + t409 * (t251 * t408 + t252 * t403), t404 * (-t211 * t403 + t213 * t408) + t409 * (t211 * t408 + t213 * t403), t404 * (-t284 * t403 + t286 * t408) + t409 * (t284 * t408 + t286 * t403), t404 * (-t249 * t403 + t250 * t408) + t409 * (t249 * t408 + t250 * t403), t404 * (-t285 * t403 + t287 * t408) + t409 * (t285 * t408 + t287 * t403), t404 * (-t298 * t403 + t299 * t408) + t409 * (t298 * t408 + t299 * t403), t404 * (-pkin(8) * t222 - t189 * t403 + t224 * t408) + t409 * (-pkin(2) * t254 + pkin(8) * t223 + t189 * t408 + t224 * t403) - pkin(1) * t254 + pkin(7) * (-t222 * t404 + t223 * t409), t404 * (-pkin(8) * t231 - t193 * t403 + t225 * t408) + t409 * (-pkin(2) * t259 + pkin(8) * t232 + t193 * t408 + t225 * t403) - pkin(1) * t259 + pkin(7) * (-t231 * t404 + t232 * t409), t404 * (-pkin(8) * t151 - t103 * t403 + t118 * t408) + t409 * (-pkin(2) * t289 + pkin(8) * t152 + t103 * t408 + t118 * t403) - pkin(1) * t289 + pkin(7) * (-t151 * t404 + t152 * t409), t404 * (-pkin(8) * t79 - pkin(9) * t493 - t130 * t403) + t409 * (pkin(2) * t275 + pkin(8) * t80 - pkin(9) * t494 + t130 * t408) + pkin(1) * t275 + pkin(7) * (-t404 * t79 + t409 * t80), t404 * (-t139 * t403 + t141 * t408) + t409 * (t139 * t408 + t141 * t403), t404 * (-t403 * t91 + t408 * t93) + t409 * (t403 * t93 + t408 * t91), t404 * (-t185 * t403 + t187 * t408) + t409 * (t185 * t408 + t187 * t403), t404 * (-t138 * t403 + t140 * t408) + t409 * (t138 * t408 + t140 * t403), t404 * (-t186 * t403 + t188 * t408) + t409 * (t186 * t408 + t188 * t403), t404 * (-t215 * t403 + t216 * t408) + t409 * (t215 * t408 + t216 * t403), t404 * (-pkin(8) * t101 - t403 * t51 + t408 * t71) + t409 * (-pkin(2) * t204 + pkin(8) * t102 + t403 * t71 + t408 * t51) - pkin(1) * t204 + pkin(7) * (-t101 * t404 + t102 * t409), t404 * (-pkin(8) * t127 - t403 * t64 + t408 * t78) + t409 * (-pkin(2) * t207 + pkin(8) * t128 + t403 * t78 + t408 * t64) - pkin(1) * t207 + pkin(7) * (-t127 * t404 + t128 * t409), t404 * (-pkin(8) * t49 - t22 * t403 + t23 * t408) + t409 * (-pkin(2) * t242 + pkin(8) * t50 + t22 * t408 + t23 * t403) - pkin(1) * t242 + pkin(7) * (-t404 * t49 + t409 * t50), t404 * (-pkin(8) * t18 - t16 * t403 + t17 * t408) + t409 * (pkin(2) * t197 + pkin(8) * t19 + t16 * t408 + t17 * t403) + pkin(1) * t197 + pkin(7) * (-t18 * t404 + t19 * t409), t404 * (-t403 * t87 + t408 * t89) + t409 * (t403 * t89 + t408 * t87), t404 * (-t403 * t62 + t408 * t63) + t409 * (t403 * t63 + t408 * t62), t404 * (-t403 * t72 + t408 * t74) + t409 * (t403 * t74 + t408 * t72), t404 * (-t403 * t86 + t408 * t88) + t409 * (t403 * t88 + t408 * t86), t404 * (-t403 * t73 + t408 * t75) + t409 * (t403 * t75 + t408 * t73), t404 * (-t112 * t403 + t113 * t408) + t409 * (t112 * t408 + t113 * t403), t404 * (-pkin(8) * t40 + t11 * t408 - t403 * t8) + t409 * (-pkin(2) * t149 + pkin(8) * t41 + t11 * t403 + t408 * t8) - pkin(1) * t149 + pkin(7) * (-t40 * t404 + t409 * t41), t404 * (-pkin(8) * t42 - t10 * t403 + t12 * t408) + t409 * (-pkin(2) * t154 + pkin(8) * t43 + t10 * t408 + t12 * t403) - pkin(1) * t154 + pkin(7) * (-t404 * t42 + t409 * t43), t404 * (-pkin(8) * t35 - t403 * t6 + t408 * t7) + t409 * (-pkin(2) * t123 + pkin(8) * t36 + t403 * t7 + t408 * t6) - pkin(1) * t123 + pkin(7) * (-t35 * t404 + t36 * t409), t404 * (-pkin(8) * t3 - t1 * t403 + t2 * t408) + t409 * (-pkin(2) * t38 + pkin(8) * t4 + t1 * t408 + t2 * t403) - pkin(1) * t38 + pkin(7) * (-t3 * t404 + t4 * t409); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t383, -t392 + t391, t389, t383, t390, qJDD(2), -t358, -t359, 0, 0, t355, t354, t327, -t355, t416, t395, pkin(2) * t318 - t290, pkin(2) * t328 - t291, pkin(2) * t279, pkin(2) * t243, -t321, t320, t258, t321, t417, t387, pkin(2) * t222 + t433, pkin(2) * t231 + t420, pkin(2) * t151 + t210, pkin(2) * t79 + t131, t274, t273, t208, -t274, t419, t387, pkin(2) * t101 + t418, pkin(2) * t127 + t429, pkin(2) * t49 + t496, pkin(2) * t18 + t499, t172, t122, t163, t170, t164, t217, pkin(2) * t40 + t432, pkin(2) * t42 + t431, pkin(2) * t35 + t425, pkin(2) * t3 + t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t355, t354, t327, -t355, t416, t395, -t290, -t291, 0, 0, -t321, t320, t258, t321, t417, t387, t433, t420, t210, t131, t274, t273, t208, -t274, t419, t387, t418, t429, t496, t499, t172, t122, t163, t170, t164, t217, t432, t431, t425, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, t320, t258, t321, t417, t387, -t195, -t196, 0, 0, t274, t273, t208, -t274, t419, t387, t424, t437, t143, t52, t172, t122, t163, t170, t164, t217, t438, t439, t435, t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, t207, t242, -t197, 0, 0, 0, 0, 0, 0, t149, t154, t123, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t253, t248, t180, -t253, -t176, t226, -t60, -t61, 0, 0;];
tauJ_reg  = t13;
