% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:39:03
% EndTime: 2019-03-08 20:39:19
% DurationCPUTime: 9.67s
% Computational Cost: add. (12421->624), mult. (29224->847), div. (0->0), fcn. (24020->18), ass. (0->292)
t243 = cos(pkin(12));
t406 = cos(qJ(4));
t321 = t406 * t243;
t240 = sin(pkin(12));
t248 = sin(qJ(4));
t353 = t248 * t240;
t276 = t321 - t353;
t242 = sin(pkin(6));
t252 = cos(qJ(2));
t359 = t242 * t252;
t264 = t276 * t359;
t402 = pkin(8) + qJ(3);
t203 = t402 * t240;
t204 = t402 * t243;
t416 = -t203 * t406 - t204 * t248;
t386 = -qJD(1) * t264 + qJD(3) * t276 + qJD(4) * t416;
t313 = qJD(4) * t406;
t340 = qJD(4) * t248;
t316 = t240 * t340;
t189 = -t243 * t313 + t316;
t194 = t240 * t406 + t243 * t248;
t190 = t194 * qJD(4);
t249 = sin(qJ(2));
t343 = qJD(1) * t242;
t320 = t249 * t343;
t431 = pkin(4) * t190 + pkin(9) * t189 - t320;
t224 = pkin(3) * t243 + pkin(2);
t129 = -pkin(4) * t276 - pkin(9) * t194 - t224;
t152 = -t203 * t248 + t204 * t406;
t247 = sin(qJ(5));
t251 = cos(qJ(5));
t338 = qJD(5) * t251;
t339 = qJD(5) * t247;
t390 = t129 * t338 - t152 * t339 + t247 * t431 + t251 * t386;
t430 = -t247 * t386 + t251 * t431;
t187 = t194 * qJD(2);
t157 = -qJD(4) * t251 + t187 * t247;
t159 = qJD(4) * t247 + t187 * t251;
t246 = sin(qJ(6));
t250 = cos(qJ(6));
t289 = t157 * t246 - t159 * t250;
t83 = t157 * t250 + t159 * t246;
t403 = t83 * t289;
t140 = t251 * t152;
t352 = t251 * t189;
t429 = pkin(10) * t352 + pkin(5) * t190 + (-t140 + (pkin(10) * t194 - t129) * t247) * qJD(5) + t430;
t356 = t247 * t189;
t275 = t194 * t338 - t356;
t428 = pkin(10) * t275 - t390;
t253 = -pkin(10) - pkin(9);
t322 = qJD(5) * t253;
t218 = qJD(2) * t321;
t318 = qJD(2) * t353;
t185 = -t218 + t318;
t373 = t185 * t247;
t127 = pkin(4) * t187 + pkin(9) * t185;
t201 = qJD(2) * qJ(3) + t320;
t244 = cos(pkin(6));
t342 = qJD(1) * t244;
t162 = t201 * t243 + t240 * t342;
t399 = pkin(8) * qJD(2);
t144 = t243 * t399 + t162;
t139 = t248 * t144;
t214 = t243 * t342;
t143 = t214 + (-t201 - t399) * t240;
t72 = t143 * t406 - t139;
t48 = t127 * t247 + t251 * t72;
t427 = -pkin(10) * t373 + t247 * t322 - t48;
t47 = t127 * t251 - t247 * t72;
t426 = -pkin(5) * t187 - t47 + (-pkin(10) * t185 + t322) * t251;
t197 = t246 * t251 + t247 * t250;
t329 = qJD(5) + qJD(6);
t142 = t329 * t197;
t348 = -t185 * t197 - t142;
t357 = t246 * t247;
t196 = -t250 * t251 + t357;
t336 = qJD(6) * t250;
t347 = t185 * t196 - t250 * t338 - t251 * t336 + t329 * t357;
t308 = qJDD(2) * t406;
t330 = t243 * qJDD(2);
t323 = qJD(4) * t218 + t240 * t308 + t248 * t330;
t133 = qJD(2) * t316 - t323;
t425 = -qJD(4) * qJD(5) + t133;
t177 = qJD(5) + t185;
t319 = t252 * t343;
t332 = qJDD(2) * qJ(3);
t334 = qJDD(1) * t242;
t160 = t249 * t334 + t332 + (qJD(3) + t319) * qJD(2);
t333 = qJDD(1) * t244;
t212 = t243 * t333;
t102 = t212 + (-pkin(8) * qJDD(2) - t160) * t240;
t122 = t160 * t243 + t240 * t333;
t103 = pkin(8) * t330 + t122;
t327 = -t102 * t248 - t103 * t406 - t143 * t313;
t30 = -t144 * t340 - t327;
t28 = qJDD(4) * pkin(9) + t30;
t331 = t240 * qJDD(2);
t291 = -t243 * t308 + t248 * t331;
t134 = qJD(2) * t190 + t291;
t311 = t252 * t334;
t341 = qJD(2) * t249;
t312 = qJD(1) * t341;
t414 = t242 * t312 + qJDD(3);
t279 = -t311 + t414;
t294 = t224 * qJDD(2);
t147 = -t294 + t279;
t52 = pkin(4) * t134 + pkin(9) * t133 + t147;
t73 = t143 * t248 + t144 * t406;
t69 = qJD(4) * pkin(9) + t73;
t292 = qJD(3) - t319;
t176 = -qJD(2) * t224 + t292;
t87 = pkin(4) * t185 - pkin(9) * t187 + t176;
t278 = -t247 * t52 - t251 * t28 - t338 * t87 + t339 * t69;
t40 = -t247 * t69 + t251 * t87;
t293 = -t177 * t40 - t278;
t424 = t339 + t373;
t423 = t289 ^ 2 - t83 ^ 2;
t175 = qJD(6) + t177;
t324 = t187 * t338 - t247 * t425;
t282 = qJDD(4) * t251 - t324;
t337 = qJD(6) * t246;
t67 = -t247 * qJDD(4) + t187 * t339 + t251 * t425;
t21 = t157 * t336 + t159 * t337 - t246 * t282 + t250 * t67;
t422 = t175 * t83 - t21;
t35 = -pkin(10) * t159 + t40;
t26 = pkin(5) * t177 + t35;
t41 = t247 * t87 + t251 * t69;
t36 = -pkin(10) * t157 + t41;
t126 = qJDD(5) + t134;
t9 = -qJD(5) * t41 - t247 * t28 + t251 * t52;
t6 = pkin(5) * t126 + pkin(10) * t67 + t9;
t7 = pkin(10) * t282 - t278;
t1 = t250 * (qJD(6) * t26 + t7) + t246 * t6 - t36 * t337;
t384 = cos(pkin(11));
t306 = t384 * t249;
t241 = sin(pkin(11));
t361 = t241 * t252;
t182 = t244 * t306 + t361;
t238 = pkin(12) + qJ(4);
t229 = sin(t238);
t230 = cos(t238);
t307 = t242 * t384;
t136 = t182 * t230 - t229 * t307;
t305 = t384 * t252;
t362 = t241 * t249;
t184 = -t244 * t362 + t305;
t363 = t241 * t242;
t138 = t184 * t230 + t229 * t363;
t360 = t242 * t249;
t171 = t229 * t244 + t230 * t360;
t181 = -t244 * t305 + t362;
t183 = t244 * t361 + t306;
t239 = qJ(5) + qJ(6);
t233 = sin(t239);
t234 = cos(t239);
t68 = -qJD(4) * pkin(4) - t72;
t53 = pkin(5) * t157 + t68;
t421 = t53 * t83 - g(1) * (-t138 * t234 - t183 * t233) - g(2) * (-t136 * t234 - t181 * t233) - g(3) * (-t171 * t234 + t233 * t359) - t1;
t394 = t250 * t36;
t13 = t246 * t26 + t394;
t2 = -qJD(6) * t13 - t246 * t7 + t250 * t6;
t420 = t53 * t289 - g(1) * (-t138 * t233 + t183 * t234) - g(2) * (-t136 * t233 + t181 * t234) - g(3) * (-t171 * t233 - t234 * t359) + t2;
t260 = qJD(6) * t289 + t246 * t67 + t250 * t282;
t419 = -t175 * t289 + t260;
t418 = t41 * t177 + t9;
t265 = t194 * t359;
t385 = -qJD(1) * t265 + qJD(3) * t194 + qJD(4) * t152;
t303 = t177 * t247;
t417 = t159 * t303;
t296 = g(1) * t183 + g(2) * t181;
t415 = g(3) * t359 - t296;
t263 = t415 * t229;
t254 = qJD(2) ^ 2;
t270 = (qJDD(2) * t252 - t249 * t254) * t242;
t65 = t129 * t247 + t140;
t274 = -t194 * t339 - t352;
t413 = t196 * t21 - t289 * t348;
t120 = qJDD(6) + t126;
t412 = t120 * t197 - t175 * t347;
t383 = qJDD(2) * pkin(2);
t165 = t279 - t383;
t285 = -t165 + t296;
t411 = t242 * (-g(3) * t252 + t312) + t285 + t383;
t288 = (-t201 * t240 + t214) * t240 - t162 * t243;
t410 = t252 * t288 - (-qJD(2) * pkin(2) + t292) * t249;
t409 = t187 ^ 2;
t370 = t194 * t251;
t64 = t129 * t251 - t152 * t247;
t51 = -pkin(5) * t276 - pkin(10) * t370 + t64;
t371 = t194 * t247;
t56 = -pkin(10) * t371 + t65;
t24 = -t246 * t56 + t250 * t51;
t408 = qJD(6) * t24 + t246 * t429 - t250 * t428;
t25 = t246 * t51 + t250 * t56;
t407 = -qJD(6) * t25 + t246 * t428 + t250 * t429;
t198 = t224 * t359;
t405 = g(3) * t198;
t404 = g(3) * t242;
t207 = t253 * t247;
t208 = t253 * t251;
t155 = t207 * t250 + t208 * t246;
t401 = qJD(6) * t155 + t246 * t426 + t250 * t427;
t156 = t207 * t246 - t208 * t250;
t400 = -qJD(6) * t156 - t246 * t427 + t250 * t426;
t398 = t187 * t83;
t397 = t187 * t289;
t395 = t246 * t36;
t391 = t67 * t247;
t389 = -qJD(5) * t65 + t430;
t388 = pkin(5) * t275 + t385;
t61 = t247 * t282;
t387 = -t157 * t338 + t61;
t382 = qJDD(4) * pkin(4);
t380 = t126 * t247;
t379 = t157 * t185;
t378 = t157 * t187;
t377 = t159 * t157;
t376 = t159 * t187;
t375 = t182 * t247;
t374 = t184 * t247;
t372 = t187 * t185;
t368 = t230 * t233;
t367 = t230 * t234;
t366 = t230 * t247;
t365 = t230 * t251;
t364 = t230 * t252;
t358 = t402 * t249;
t355 = t247 * t252;
t109 = t251 * t126;
t351 = t251 * t252;
t350 = t252 * t254;
t349 = qJDD(1) - g(3);
t346 = -t181 * t224 + t182 * t402;
t345 = -t183 * t224 + t184 * t402;
t235 = t240 ^ 2;
t237 = t243 ^ 2;
t344 = t235 + t237;
t328 = g(3) * t360;
t326 = t242 * t355;
t325 = t242 * t351;
t317 = t242 * t341;
t302 = t177 * t251;
t301 = -t102 * t406 + t103 * t248 + t143 * t340 + t144 * t313;
t300 = t197 * t260 + t347 * t83;
t299 = pkin(5) * t424 - t73;
t298 = -t196 * t120 + t175 * t348;
t297 = pkin(4) * t230 + pkin(9) * t229;
t295 = g(1) * t184 + g(2) * t182;
t179 = -t240 * t360 + t243 * t244;
t180 = t240 * t244 + t243 * t360;
t107 = t179 * t248 + t180 * t406;
t280 = -t107 * t251 + t326;
t88 = -t107 * t247 - t325;
t45 = t246 * t280 + t250 * t88;
t46 = t246 * t88 - t250 * t280;
t290 = t247 * t41 + t251 * t40;
t228 = pkin(5) * t251 + pkin(4);
t287 = t228 * t230 - t229 * t253;
t283 = -t177 * t424 + t109;
t277 = t179 * t406 - t180 * t248;
t29 = t301 - t382;
t273 = -pkin(9) * t126 + t177 * t68;
t135 = -t182 * t229 - t230 * t307;
t137 = -t184 * t229 + t230 * t363;
t170 = -t229 * t360 + t230 * t244;
t272 = g(1) * t137 + g(2) * t135 + g(3) * t170;
t271 = g(1) * t138 + g(2) * t136 + g(3) * t171;
t269 = t282 * t251;
t268 = -t272 - t29;
t262 = -t415 + t311;
t121 = -t160 * t240 + t212;
t261 = -t121 * t240 + t122 * t243 - t295;
t259 = pkin(9) * qJD(5) * t177 - t268;
t258 = -t262 + t414;
t255 = -g(1) * (-t138 * t247 + t183 * t251) - g(2) * (-t136 * t247 + t181 * t251) - g(3) * (-t171 * t247 - t325);
t178 = t185 ^ 2;
t115 = t196 * t194;
t114 = t197 * t194;
t99 = pkin(5) * t371 - t416;
t71 = qJD(2) * t265 + qJD(4) * t107;
t70 = qJD(2) * t264 + qJD(4) * t277;
t44 = -t337 * t371 + (t329 * t370 - t356) * t250 + t274 * t246;
t43 = t142 * t194 - t246 * t356 + t250 * t352;
t39 = qJD(5) * t280 - t247 * t70 + t251 * t317;
t38 = qJD(5) * t88 + t247 * t317 + t251 * t70;
t18 = -pkin(5) * t282 + t29;
t15 = t250 * t35 - t395;
t14 = -t246 * t35 - t394;
t12 = t250 * t26 - t395;
t11 = -qJD(6) * t46 - t246 * t38 + t250 * t39;
t10 = qJD(6) * t45 + t246 * t39 + t250 * t38;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t349, 0, 0, 0, 0, 0, 0, t270 (-qJDD(2) * t249 - t350) * t242, 0, -g(3) + (t244 ^ 2 + (t249 ^ 2 + t252 ^ 2) * t242 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t243 * t270, -t240 * t270, t344 * t242 * t350 + (-t179 * t240 + t180 * t243) * qJDD(2), t121 * t179 + t122 * t180 - g(3) + (-qJD(2) * t410 - t165 * t252) * t242, 0, 0, 0, 0, 0, 0, -qJD(4) * t71 + qJDD(4) * t277 + (-t134 * t252 + t185 * t341) * t242, -qJD(4) * t70 - qJDD(4) * t107 + (t133 * t252 + t187 * t341) * t242, -t107 * t134 + t133 * t277 - t185 * t70 + t187 * t71, -t277 * t301 + t107 * t30 + t70 * t73 - t71 * t72 - g(3) + (-t147 * t252 + t176 * t341) * t242, 0, 0, 0, 0, 0, 0, t126 * t88 + t157 * t71 + t177 * t39 + t277 * t282, t126 * t280 + t159 * t71 - t177 * t38 + t277 * t67, -t157 * t38 - t159 * t39 - t280 * t282 + t67 * t88, -t277 * t29 + t278 * t280 + t38 * t41 + t39 * t40 + t68 * t71 + t88 * t9 - g(3), 0, 0, 0, 0, 0, 0, t11 * t175 + t120 * t45 + t260 * t277 + t71 * t83, -t10 * t175 - t120 * t46 + t21 * t277 - t289 * t71, -t10 * t83 + t11 * t289 + t21 * t45 + t260 * t46, t1 * t46 + t10 * t13 + t11 * t12 - t18 * t277 + t2 * t45 + t53 * t71 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t262, -t349 * t360 + t295, 0, 0, t235 * qJDD(2), 0.2e1 * t240 * t330, 0, t237 * qJDD(2), 0, 0, t411 * t243, -t411 * t240, -t328 + t261 + (qJD(2) * t292 + t332) * t344, -t288 * qJD(3) + t285 * pkin(2) + t261 * qJ(3) + (-g(3) * (pkin(2) * t252 + qJ(3) * t249) + t410 * qJD(1)) * t242, -t133 * t194 - t187 * t189, -t133 * t276 - t134 * t194 + t185 * t189 - t187 * t190, -qJD(4) * t189 + qJDD(4) * t194, -t134 * t276 + t185 * t190, -qJD(4) * t190 + qJDD(4) * t276, 0, -qJD(4) * t385 + qJDD(4) * t416 - t134 * t224 - t147 * t276 + t176 * t190 - t185 * t320 - t230 * t415, -qJD(4) * t386 - qJDD(4) * t152 + t133 * t224 + t147 * t194 - t176 * t189 - t187 * t320 + t263, t133 * t416 - t134 * t152 - t185 * t386 + t187 * t385 + t189 * t72 - t190 * t73 + t194 * t301 + t276 * t30 - t295 - t328, t30 * t152 - t301 * t416 - t147 * t224 - t176 * t320 - g(1) * t345 - g(2) * t346 - g(3) * (t242 * t358 + t198) + t386 * t73 - t385 * t72, t159 * t274 - t370 * t67 (t157 * t251 + t159 * t247) * t189 + (t269 + t391 + (t157 * t247 - t159 * t251) * qJD(5)) * t194, t109 * t194 + t159 * t190 + t177 * t274 + t276 * t67, t157 * t275 - t194 * t61, -t126 * t371 - t157 * t190 - t177 * t275 - t276 * t282, -t126 * t276 + t177 * t190, t64 * t126 - t9 * t276 + t40 * t190 + t416 * t282 - t68 * t356 - g(1) * (-t183 * t365 + t374) - g(2) * (-t181 * t365 + t375) - (t230 * t351 + t247 * t249) * t404 + (t29 * t247 + t338 * t68) * t194 + t389 * t177 + t385 * t157, -t65 * t126 - t278 * t276 - t41 * t190 + t416 * t67 - t68 * t352 - g(1) * (t183 * t366 + t184 * t251) - g(2) * (t181 * t366 + t182 * t251) - (-t230 * t355 + t249 * t251) * t404 + (t29 * t251 - t339 * t68) * t194 - t390 * t177 + t385 * t159, t65 * t282 + t64 * t67 + t290 * t189 - t389 * t159 - t390 * t157 - t263 + (t278 * t247 - t9 * t251 + (t247 * t40 - t251 * t41) * qJD(5)) * t194, -t278 * t65 + t9 * t64 - t29 * t416 - g(1) * (-t183 * t297 + t345) - g(2) * (-t181 * t297 + t346) - t405 + t385 * t68 + t390 * t41 + t389 * t40 - (t252 * t297 + t358) * t404, t115 * t21 + t289 * t43, t114 * t21 - t115 * t260 + t289 * t44 + t43 * t83, -t115 * t120 - t175 * t43 - t190 * t289 + t21 * t276, -t114 * t260 + t44 * t83, -t114 * t120 - t175 * t44 - t190 * t83 - t260 * t276, -t120 * t276 + t175 * t190, t24 * t120 - t2 * t276 + t12 * t190 - t99 * t260 + t18 * t114 + t53 * t44 - g(1) * (-t183 * t367 + t184 * t233) - g(2) * (-t181 * t367 + t182 * t233) + t388 * t83 - (t233 * t249 + t234 * t364) * t404 + t407 * t175, -t25 * t120 + t1 * t276 - t13 * t190 - t99 * t21 - t18 * t115 - t53 * t43 - g(1) * (t183 * t368 + t184 * t234) - g(2) * (t181 * t368 + t182 * t234) - t388 * t289 - (-t233 * t364 + t234 * t249) * t404 - t408 * t175, -t1 * t114 + t115 * t2 + t12 * t43 - t13 * t44 + t21 * t24 + t25 * t260 + t289 * t407 - t408 * t83 - t263, t1 * t25 + t2 * t24 + t18 * t99 - g(1) * (pkin(5) * t374 - t183 * t287 + t345) - g(2) * (pkin(5) * t375 - t181 * t287 + t346) - t405 + t388 * t53 + t408 * t13 + t407 * t12 - (t287 * t252 + (pkin(5) * t247 + t402) * t249) * t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, t331, -t344 * t254, qJD(2) * t288 + t258 - t383, 0, 0, 0, 0, 0, 0, 0.2e1 * qJD(4) * t187 + t291 (-t185 - t318) * qJD(4) + t323, -t178 - t409, t185 * t73 + t187 * t72 + t258 - t294, 0, 0, 0, 0, 0, 0, t283 - t378, -t177 ^ 2 * t251 - t376 - t380 (t67 - t379) * t251 + t417 + t387, -t187 * t68 + t247 * t293 + t251 * t418 + t415, 0, 0, 0, 0, 0, 0, t298 - t398, t397 - t412, t300 - t413, t1 * t197 + t12 * t348 - t13 * t347 - t187 * t53 - t196 * t2 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, -t178 + t409 (t185 - t318) * qJD(4) + t323, -t372, -t291, qJDD(4), qJD(4) * t73 - t176 * t187 - t272 - t301, t176 * t185 + (t72 + t139) * qJD(4) + t271 + t327, 0, 0, t159 * t302 - t391 (-t67 - t379) * t251 - t417 + t387, t177 * t302 - t376 + t380, t157 * t303 + t269, t283 + t378, -t177 * t187, -pkin(4) * t324 - t47 * t177 - t40 * t187 - t73 * t157 + t273 * t247 + (-t259 + t382) * t251, pkin(4) * t67 - t159 * t73 + t177 * t48 + t187 * t41 + t247 * t259 + t251 * t273, t48 * t157 + t47 * t159 + ((qJD(5) * t159 + t282) * pkin(9) + t293) * t251 + ((qJD(5) * t157 - t67) * pkin(9) - t418) * t247 - t271, -t40 * t47 - t41 * t48 - t68 * t73 + t268 * pkin(4) + (-qJD(5) * t290 - t9 * t247 - t251 * t278 - t271) * pkin(9), -t197 * t21 + t289 * t347, t300 + t413, t397 + t412, -t196 * t260 - t348 * t83, t298 + t398, -t175 * t187, -t12 * t187 + t120 * t155 + t175 * t400 + t18 * t196 + t228 * t260 - t234 * t272 + t299 * t83 - t348 * t53, -t120 * t156 + t13 * t187 - t175 * t401 + t18 * t197 + t21 * t228 + t233 * t272 - t289 * t299 - t347 * t53, -t1 * t196 + t12 * t347 + t13 * t348 + t155 * t21 + t156 * t260 - t197 * t2 + t289 * t400 - t401 * t83 - t271, t1 * t156 + t2 * t155 - t18 * t228 - g(1) * (t137 * t228 - t138 * t253) - g(2) * (t135 * t228 - t136 * t253) - g(3) * (t170 * t228 - t171 * t253) + t299 * t53 + t401 * t13 + t400 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t377, -t157 ^ 2 + t159 ^ 2, t157 * t177 - t67, -t377, t159 * t177 + t282, t126, -t68 * t159 + t255 + t418, t68 * t157 - g(1) * (-t138 * t251 - t183 * t247) - g(2) * (-t136 * t251 - t181 * t247) - g(3) * (-t171 * t251 + t326) - t293, 0, 0, -t403, t423, t422, t403, t419, t120, -t14 * t175 + (t120 * t250 - t159 * t83 - t175 * t337) * pkin(5) + t420, t15 * t175 + (-t120 * t246 + t159 * t289 - t175 * t336) * pkin(5) + t421, -t12 * t83 - t13 * t289 - t14 * t289 + t15 * t83 + (t21 * t250 + t260 * t246 + (-t246 * t289 - t250 * t83) * qJD(6)) * pkin(5), -t12 * t14 - t13 * t15 + (t1 * t246 + t2 * t250 - t53 * t159 + (-t12 * t246 + t13 * t250) * qJD(6) + t255) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t403, t423, t422, t403, t419, t120, t13 * t175 + t420, t12 * t175 + t421, 0, 0;];
tau_reg  = t3;
