% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:33:38
% EndTime: 2019-05-06 09:34:03
% DurationCPUTime: 10.30s
% Computational Cost: add. (35476->555), mult. (83624->712), div. (0->0), fcn. (60078->10), ass. (0->319)
t278 = cos(pkin(10));
t277 = sin(pkin(10));
t285 = cos(qJ(2));
t337 = qJD(1) * t285;
t281 = sin(qJ(2));
t338 = qJD(1) * t281;
t246 = -t277 * t338 + t278 * t337;
t247 = t277 * t337 + t278 * t338;
t344 = t246 * t247;
t375 = qJDD(2) - t344;
t348 = t375 * t277;
t245 = t247 ^ 2;
t286 = qJD(2) ^ 2;
t378 = -t245 - t286;
t168 = -t278 * t378 + t348;
t347 = t375 * t278;
t170 = t277 * t378 + t347;
t418 = pkin(7) * (t168 * t281 - t170 * t285);
t417 = pkin(2) * t168;
t416 = qJ(3) * t168;
t415 = qJ(3) * t170;
t373 = t246 ^ 2;
t230 = t373 - t286;
t413 = t281 * (-t230 * t278 + t348) - t285 * (t230 * t277 + t347);
t265 = t281 * qJDD(1);
t329 = qJD(1) * qJD(2);
t322 = t285 * t329;
t252 = t265 + t322;
t266 = t285 * qJDD(1);
t323 = t281 * t329;
t253 = t266 - t323;
t222 = t252 * t277 - t278 * t253;
t242 = qJD(2) * t247;
t191 = t222 - t242;
t223 = t252 * t278 + t253 * t277;
t336 = qJD(2) * t246;
t195 = t223 - t336;
t399 = -t191 * t277 - t278 * t195;
t412 = pkin(2) * t399;
t411 = qJ(3) * t399;
t188 = -t373 - t245;
t398 = -t191 * t278 + t195 * t277;
t408 = -pkin(2) * t188 + qJ(3) * t398;
t407 = pkin(7) * (-t281 * t399 + t285 * t398) - pkin(1) * t188;
t374 = qJDD(2) + t344;
t346 = t374 * t277;
t377 = -t286 - t373;
t384 = t278 * t377 - t346;
t404 = qJ(3) * t384;
t208 = t278 * t374;
t386 = t277 * t377 + t208;
t403 = qJ(3) * t386;
t332 = qJD(3) * t247;
t400 = pkin(2) * t386 - 0.2e1 * t332;
t190 = t222 + t242;
t352 = t190 * t278;
t379 = t223 + t336;
t397 = t281 * (t277 * t379 + t352) - t285 * (-t190 * t277 + t278 * t379);
t396 = pkin(7) * (-t281 * t386 + t285 * t384) - pkin(1) * t190;
t231 = -t245 + t286;
t395 = t281 * (-t231 * t277 + t208) + t285 * (t278 * t231 + t346);
t372 = 0.2e1 * qJD(3);
t279 = sin(qJ(6));
t280 = sin(qJ(5));
t284 = cos(qJ(5));
t207 = -t246 * t280 + t247 * t284;
t316 = -t284 * t222 + t280 * t223;
t147 = -t207 * qJD(5) - t316;
t146 = qJDD(6) - t147;
t283 = cos(qJ(6));
t328 = qJD(2) - qJD(5);
t185 = t207 * t279 + t283 * t328;
t187 = t283 * t207 - t279 * t328;
t154 = t187 * t185;
t382 = t146 - t154;
t392 = t279 * t382;
t205 = t284 * t246 + t247 * t280;
t166 = t207 * t205;
t271 = qJDD(2) - qJDD(5);
t381 = -t166 - t271;
t391 = t280 * t381;
t390 = t283 * t382;
t389 = t284 * t381;
t388 = t379 * qJ(4);
t148 = -qJD(5) * t205 + t222 * t280 + t223 * t284;
t200 = t205 * t328;
t387 = t148 + t200;
t326 = t328 ^ 2;
t275 = t285 ^ 2;
t287 = qJD(1) ^ 2;
t300 = qJD(2) * pkin(2) - qJ(3) * t338;
t282 = sin(qJ(1));
t369 = cos(qJ(1));
t319 = t282 * g(1) - t369 * g(2);
t302 = qJDD(1) * pkin(1) + t319;
t184 = t253 * pkin(2) - qJDD(3) - t300 * t338 + (qJ(3) * t275 + pkin(7)) * t287 + t302;
t380 = -pkin(3) * t242 + t184;
t303 = t369 * g(1) + t282 * g(2);
t362 = qJDD(1) * pkin(7);
t295 = -t287 * pkin(1) - t303 + t362;
t226 = -t281 * g(3) + t285 * t295;
t268 = t275 * t287;
t178 = -pkin(2) * t268 + t253 * qJ(3) - qJD(2) * t300 + t226;
t294 = t281 * t295;
t341 = t281 * t287;
t288 = -t294 - t252 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t341 + qJ(3) * t329 - g(3)) * t285;
t138 = t278 * t178 + t246 * t372 + t277 * t288;
t376 = -t373 + t245;
t202 = qJD(6) + t205;
t318 = t148 * t279 + t283 * t271;
t99 = (qJD(6) - t202) * t187 + t318;
t182 = t185 ^ 2;
t183 = t187 ^ 2;
t201 = t202 ^ 2;
t203 = t205 ^ 2;
t204 = t207 ^ 2;
t371 = 2 * qJD(4);
t370 = pkin(3) + pkin(4);
t368 = pkin(3) * t277;
t367 = pkin(3) * t278;
t366 = t222 * pkin(3);
t317 = t277 * t178 - t278 * t288;
t297 = -qJDD(2) * pkin(3) - t286 * qJ(4) + qJDD(4) + t317;
t343 = t247 * qJ(4);
t290 = -qJDD(2) * pkin(4) - t195 * pkin(8) + (-t370 * t246 - t343 + t372) * t247 + t297;
t306 = -pkin(3) * t246 - t343;
t301 = qJDD(2) * qJ(4) + qJD(2) * t371 + t246 * t306 + t138;
t113 = -pkin(3) * t286 + t301;
t228 = -qJD(2) * pkin(4) - pkin(8) * t247;
t98 = -pkin(4) * t373 + pkin(8) * t222 + qJD(2) * t228 + t113;
t59 = t280 * t290 + t284 * t98;
t164 = pkin(5) * t205 - pkin(9) * t207;
t58 = t280 * t98 - t284 * t290;
t41 = t271 * pkin(5) - pkin(9) * t326 + t164 * t207 + t58;
t365 = t279 * t41;
t137 = t317 + 0.2e1 * t332;
t91 = -t137 * t278 + t138 * t277;
t364 = t281 * t91;
t363 = t283 * t41;
t291 = t380 + t388;
t105 = -t366 - t222 * pkin(4) - t373 * pkin(8) + (t371 + t228) * t247 + t291;
t361 = t105 * t280;
t360 = t105 * t284;
t111 = t146 + t154;
t359 = t111 * t279;
t358 = t111 * t283;
t161 = -t166 + t271;
t357 = t161 * t280;
t356 = t161 * t284;
t355 = t184 * t277;
t354 = t184 * t278;
t350 = t202 * t279;
t349 = t202 * t283;
t260 = t285 * t341;
t342 = t281 * (qJDD(2) + t260);
t340 = t285 * (qJDD(2) - t260);
t335 = qJD(2) * t277;
t334 = qJD(2) * t278;
t330 = qJD(6) + t202;
t327 = t247 * t371;
t325 = t280 * t154;
t324 = t284 * t154;
t321 = -qJ(4) * t277 - pkin(2);
t320 = pkin(5) * t280 + qJ(4);
t42 = -pkin(5) * t326 - t271 * pkin(9) - t205 * t164 + t59;
t312 = t328 * t207;
t57 = (-t147 - t312) * pkin(5) - t387 * pkin(9) + t105;
t29 = t279 * t42 - t283 * t57;
t30 = t279 * t57 + t283 * t42;
t15 = t279 * t29 + t283 * t30;
t92 = t137 * t277 + t278 * t138;
t225 = t285 * g(3) + t294;
t315 = t281 * t225 + t285 * t226;
t313 = pkin(5) * t284 + t370;
t311 = -pkin(5) * t41 + pkin(9) * t15;
t310 = t280 * t200;
t309 = t280 * t312;
t308 = t284 * t200;
t307 = t284 * t312;
t14 = t279 * t30 - t283 * t29;
t33 = t280 * t59 - t284 * t58;
t34 = t280 * t58 + t284 * t59;
t304 = -t148 * t283 + t271 * t279;
t127 = qJD(2) * t207 + t316;
t100 = -t187 * t330 - t318;
t133 = -t201 - t182;
t72 = t133 * t283 - t392;
t299 = pkin(5) * t100 + pkin(9) * t72 - t363;
t104 = t185 * t330 + t304;
t143 = -t183 - t201;
t76 = -t143 * t279 - t358;
t298 = pkin(5) * t104 + pkin(9) * t76 + t365;
t132 = t182 + t183;
t118 = -qJD(6) * t185 - t304;
t159 = t202 * t185;
t103 = t118 + t159;
t64 = t103 * t279 - t283 * t99;
t296 = pkin(5) * t132 + pkin(9) * t64 + t15;
t114 = (t372 + t306) * t247 + t297;
t293 = t281 * (t222 * t277 - t246 * t334) + t285 * (-t278 * t222 - t246 * t335);
t229 = t247 * t335;
t292 = t281 * t229 + (t281 * t246 * t278 + t285 * (t246 * t277 - t247 * t278)) * qJD(2);
t289 = t291 + t327;
t274 = t281 ^ 2;
t267 = t274 * t287;
t254 = t266 - 0.2e1 * t323;
t251 = t265 + 0.2e1 * t322;
t249 = t287 * pkin(7) + t302;
t198 = -t204 + t326;
t197 = t203 - t326;
t196 = -t204 - t326;
t165 = t204 - t203;
t160 = -t326 - t203;
t158 = -t183 + t201;
t157 = t182 - t201;
t156 = t308 - t309;
t155 = -t310 - t307;
t153 = t183 - t182;
t145 = -t203 - t204;
t144 = t281 * (t223 * t278 - t229) + t285 * (t223 * t277 + t247 * t334);
t142 = t197 * t284 + t357;
t141 = -t198 * t280 + t389;
t140 = -t197 * t280 + t356;
t139 = -t198 * t284 - t391;
t136 = -t196 * t280 + t356;
t135 = t196 * t284 + t357;
t131 = t148 - t200;
t126 = (0.2e1 * qJD(5) - qJD(2)) * t207 + t316;
t125 = t284 * t148 + t309;
t124 = -t280 * t148 + t307;
t123 = -t280 * t147 - t308;
t122 = -t284 * t147 + t310;
t121 = t289 - t366;
t120 = t160 * t284 - t391;
t119 = t160 * t280 + t389;
t117 = -qJD(6) * t187 - t318;
t116 = (-t185 * t283 + t187 * t279) * t202;
t115 = (-t185 * t279 - t187 * t283) * t202;
t109 = (-t190 - t222) * pkin(3) + t289;
t108 = t327 - t366 + t380 + 0.2e1 * t388;
t107 = -qJ(4) * t188 + t114;
t106 = (-t188 - t286) * pkin(3) + t301;
t102 = t118 - t159;
t97 = t118 * t283 - t187 * t350;
t96 = t118 * t279 + t187 * t349;
t95 = -t117 * t279 + t185 * t349;
t94 = -t117 * t283 - t185 * t350;
t90 = t135 * t277 + t136 * t278;
t89 = -t135 * t278 + t136 * t277;
t86 = t116 * t284 + t146 * t280;
t85 = -t116 * t280 + t146 * t284;
t84 = t157 * t283 - t359;
t83 = -t158 * t279 + t390;
t82 = t157 * t279 + t358;
t81 = t158 * t283 + t392;
t80 = -t127 * t284 + t131 * t280;
t79 = -t126 * t284 - t280 * t387;
t78 = -t127 * t280 - t131 * t284;
t77 = t126 * t280 - t284 * t387;
t75 = t143 * t283 - t359;
t74 = t119 * t277 + t120 * t278;
t73 = -t119 * t278 + t120 * t277;
t71 = t133 * t279 + t390;
t70 = t284 * t97 + t325;
t69 = t284 * t95 - t325;
t68 = -t280 * t97 + t324;
t67 = -t280 * t95 - t324;
t65 = t113 * t277 - t114 * t278;
t63 = t100 * t283 - t102 * t279;
t62 = -t103 * t283 - t279 * t99;
t61 = t100 * t279 + t102 * t283;
t60 = -pkin(8) * t135 + qJ(4) * t387 + t360;
t55 = -t280 * t99 + t284 * t84;
t54 = t103 * t280 + t284 * t83;
t53 = -t280 * t84 - t284 * t99;
t52 = t103 * t284 - t280 * t83;
t51 = -pkin(8) * t119 + qJ(4) * t126 + t361;
t50 = -t104 * t280 + t284 * t76;
t49 = t104 * t284 + t280 * t76;
t48 = -t100 * t280 + t284 * t72;
t47 = t100 * t284 + t280 * t72;
t46 = t277 * t78 + t278 * t80;
t45 = t277 * t80 - t278 * t78;
t44 = t153 * t280 + t284 * t63;
t43 = t153 * t284 - t280 * t63;
t40 = -t132 * t280 + t284 * t64;
t39 = t132 * t284 + t280 * t64;
t38 = -pkin(8) * t136 + t370 * t387 - t361;
t37 = -pkin(8) * t120 + t370 * t126 + t360;
t36 = -pkin(9) * t75 + t363;
t35 = -pkin(9) * t71 + t365;
t32 = t277 * t49 + t278 * t50;
t31 = t277 * t50 - t278 * t49;
t28 = t277 * t47 + t278 * t48;
t27 = t277 * t48 - t278 * t47;
t25 = -pkin(8) * t33 + qJ(4) * t105;
t24 = t277 * t39 + t278 * t40;
t23 = t277 * t40 - t278 * t39;
t22 = -pkin(8) * t78 + qJ(4) * t145 - t33;
t21 = -pkin(5) * t75 + t30;
t20 = -pkin(5) * t71 + t29;
t19 = -pkin(8) * t34 + t370 * t105;
t18 = -pkin(8) * t80 + t370 * t145 - t34;
t17 = t277 * t33 + t278 * t34;
t16 = t277 * t34 - t278 * t33;
t13 = -pkin(9) * t62 - t14;
t12 = t15 * t284 + t280 * t41;
t11 = t15 * t280 - t284 * t41;
t10 = -pkin(8) * t49 + qJ(4) * t75 - t21 * t280 + t284 * t36;
t9 = -pkin(8) * t47 + qJ(4) * t71 - t20 * t280 + t284 * t35;
t8 = -pkin(8) * t50 - t21 * t284 - t280 * t36 + t370 * t75;
t7 = -pkin(8) * t48 - t20 * t284 - t280 * t35 + t370 * t71;
t6 = -pkin(8) * t39 + t13 * t284 + t320 * t62;
t5 = -pkin(8) * t40 - t13 * t280 + t313 * t62;
t4 = t11 * t277 + t12 * t278;
t3 = -t11 * t278 + t12 * t277;
t2 = -pkin(8) * t11 + (-pkin(9) * t284 + t320) * t14;
t1 = -pkin(8) * t12 + (pkin(9) * t280 + t313) * t14;
t26 = [0, 0, 0, 0, 0, qJDD(1), t319, t303, 0, 0, (t252 + t322) * t281, t251 * t285 + t254 * t281, t342 + t285 * (-t267 + t286), (t253 - t323) * t285, t281 * (t268 - t286) + t340, 0, t285 * t249 + pkin(1) * t254 + pkin(7) * (t285 * (-t268 - t286) - t342), -t281 * t249 - pkin(1) * t251 + pkin(7) * (-t340 - t281 * (-t267 - t286)), pkin(1) * (t267 + t268) + (t274 + t275) * t362 + t315, pkin(1) * t249 + pkin(7) * t315, t144, -t397, t395, t293, -t413, t292, t281 * (-t355 - t403) + t285 * (-pkin(2) * t190 + t354 + t404) + t396, t281 * (-t354 + t416) + t285 * (-pkin(2) * t379 - t355 - t415) - pkin(1) * t379 + t418, t281 * (-t91 - t411) + t285 * (t408 + t92) + t407, -qJ(3) * t364 + t285 * (pkin(2) * t184 + qJ(3) * t92) + pkin(1) * t184 + pkin(7) * (t285 * t92 - t364), t144, t395, t397, t292, t413, t293, t281 * (-qJ(4) * t352 - t109 * t277 - t403) + t285 * (t109 * t278 + t190 * t321 + t404) + t396, t281 * (-t106 * t277 + t107 * t278 - t411) + t285 * (t106 * t278 + t107 * t277 + t408) + t407, t281 * (t108 * t278 - t416) + t285 * (t108 * t277 + t415) - t418 + (-t281 * t368 + t285 * (pkin(2) + t367) + pkin(1)) * t379, (t281 * (qJ(4) * t278 - t368) + t285 * (-t321 + t367) + pkin(1)) * t121 + (pkin(7) + qJ(3)) * (-t281 * t65 + t285 * (t113 * t278 + t114 * t277)), t281 * (-t124 * t277 + t125 * t278) + t285 * (t124 * t278 + t125 * t277), t281 * (-t277 * t77 + t278 * t79) + t285 * (t277 * t79 + t278 * t77), t281 * (-t139 * t277 + t141 * t278) + t285 * (t139 * t278 + t141 * t277), t281 * (-t122 * t277 + t123 * t278) + t285 * (t122 * t278 + t123 * t277), t281 * (-t140 * t277 + t142 * t278) + t285 * (t140 * t278 + t142 * t277), t281 * (-t155 * t277 + t156 * t278) + t285 * (t155 * t278 + t156 * t277), t281 * (-qJ(3) * t73 - t277 * t37 + t278 * t51) + t285 * (pkin(2) * t126 + qJ(3) * t74 + t277 * t51 + t278 * t37) + pkin(1) * t126 + pkin(7) * (-t281 * t73 + t285 * t74), t281 * (-qJ(3) * t89 - t277 * t38 + t278 * t60) + t285 * (pkin(2) * t387 + qJ(3) * t90 + t277 * t60 + t278 * t38) + pkin(1) * t387 + pkin(7) * (-t281 * t89 + t285 * t90), t281 * (-qJ(3) * t45 - t18 * t277 + t22 * t278) + t285 * (pkin(2) * t145 + qJ(3) * t46 + t18 * t278 + t22 * t277) + pkin(1) * t145 + pkin(7) * (-t281 * t45 + t285 * t46), t281 * (-qJ(3) * t16 - t19 * t277 + t25 * t278) + t285 * (pkin(2) * t105 + qJ(3) * t17 + t19 * t278 + t25 * t277) + pkin(1) * t105 + pkin(7) * (-t16 * t281 + t17 * t285), t281 * (-t277 * t68 + t278 * t70) + t285 * (t277 * t70 + t278 * t68), t281 * (-t277 * t43 + t278 * t44) + t285 * (t277 * t44 + t278 * t43), t281 * (-t277 * t52 + t278 * t54) + t285 * (t277 * t54 + t278 * t52), t281 * (-t277 * t67 + t278 * t69) + t285 * (t277 * t69 + t278 * t67), t281 * (-t277 * t53 + t278 * t55) + t285 * (t277 * t55 + t278 * t53), t281 * (-t277 * t85 + t278 * t86) + t285 * (t277 * t86 + t278 * t85), t281 * (-qJ(3) * t27 - t277 * t7 + t278 * t9) + t285 * (pkin(2) * t71 + qJ(3) * t28 + t277 * t9 + t278 * t7) + pkin(1) * t71 + pkin(7) * (-t27 * t281 + t28 * t285), t281 * (-qJ(3) * t31 + t10 * t278 - t277 * t8) + t285 * (pkin(2) * t75 + qJ(3) * t32 + t10 * t277 + t278 * t8) + pkin(1) * t75 + pkin(7) * (-t281 * t31 + t285 * t32), t281 * (-qJ(3) * t23 - t277 * t5 + t278 * t6) + t285 * (pkin(2) * t62 + qJ(3) * t24 + t277 * t6 + t278 * t5) + pkin(1) * t62 + pkin(7) * (-t23 * t281 + t24 * t285), t281 * (-qJ(3) * t3 - t1 * t277 + t2 * t278) + t285 * (pkin(2) * t14 + qJ(3) * t4 + t1 * t278 + t2 * t277) + pkin(1) * t14 + pkin(7) * (-t281 * t3 + t285 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t260, t267 - t268, t265, t260, t266, qJDD(2), -t225, -t226, 0, 0, -t344, t376, t195, t344, -t191, qJDD(2), -t317 + t400, -t138 - t417, t412, pkin(2) * t91, -t344, t195, -t376, qJDD(2), t191, t344, pkin(3) * t374 + qJ(4) * t377 - t247 * t306 - t297 + t400, -pkin(3) * t195 - qJ(4) * t191 + t412, t417 + qJ(4) * t375 + (-t378 - t286) * pkin(3) + t301, pkin(2) * t65 - pkin(3) * t114 + qJ(4) * t113, -t166, -t165, -t131, t166, t127, t271, pkin(2) * t73 + qJ(4) * t120 - t119 * t370 + t58, pkin(2) * t89 + qJ(4) * t136 - t135 * t370 + t59, pkin(2) * t45 + qJ(4) * t80 - t370 * t78, pkin(2) * t16 + qJ(4) * t34 - t33 * t370, -t96, -t61, -t81, t94, -t82, -t115, pkin(2) * t27 + qJ(4) * t48 - t370 * t47 - t299, pkin(2) * t31 + qJ(4) * t50 - t370 * t49 - t298, pkin(2) * t23 + qJ(4) * t40 - t370 * t39 - t296, pkin(2) * t3 + qJ(4) * t12 - t11 * t370 - t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190, t379, t188, -t184, 0, 0, 0, 0, 0, 0, t190, t188, -t379, -t121, 0, 0, 0, 0, 0, 0, -t126, -t387, -t145, -t105, 0, 0, 0, 0, 0, 0, -t71, -t75, -t62, -t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t374, t195, t378, t114, 0, 0, 0, 0, 0, 0, t119, t135, t78, t33, 0, 0, 0, 0, 0, 0, t47, t49, t39, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, t165, t131, -t166, -t127, -t271, -t58, -t59, 0, 0, t96, t61, t81, -t94, t82, t115, t299, t298, t296, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, t153, t103, -t154, -t99, t146, -t29, -t30, 0, 0;];
tauJ_reg  = t26;
