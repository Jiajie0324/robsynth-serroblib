% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:34:03
% EndTime: 2019-05-06 09:34:38
% DurationCPUTime: 34.69s
% Computational Cost: add. (117524->796), mult. (276817->1144), div. (0->0), fcn. (198888->10), ass. (0->559)
t949 = cos(qJ(2));
t999 = qJD(1) * qJD(2);
t982 = t949 * t999;
t945 = sin(qJ(2));
t997 = qJDD(1) * t945;
t907 = t982 + t997;
t941 = sin(pkin(10));
t942 = cos(pkin(10));
t983 = t945 * t999;
t995 = qJDD(1) * t949;
t961 = t983 - t995;
t860 = t942 * t907 - t941 * t961;
t1007 = qJD(1) * t945;
t896 = -t942 * t949 * qJD(1) + t1007 * t941;
t891 = qJD(2) * t896;
t1063 = -t891 + t860;
t898 = (t941 * t949 + t942 * t945) * qJD(1);
t858 = t898 * t896;
t1059 = qJDD(2) + t858;
t1029 = t1059 * t941;
t895 = t898 ^ 2;
t951 = qJD(2) ^ 2;
t846 = t951 + t895;
t768 = t846 * t942 + t1029;
t1028 = t1059 * t942;
t784 = t846 * t941 - t1028;
t731 = t768 * t945 + t784 * t949;
t946 = sin(qJ(1));
t950 = cos(qJ(1));
t687 = -t1063 * t950 + t731 * t946;
t1134 = pkin(6) * t687;
t689 = t1063 * t946 + t731 * t950;
t1133 = pkin(6) * t689;
t698 = t768 * t949 - t784 * t945;
t1132 = pkin(7) * t698;
t1131 = -pkin(1) * t698 - pkin(2) * t768;
t1130 = pkin(1) * t1063 - pkin(7) * t731;
t1054 = t896 ^ 2;
t883 = t951 - t1054;
t774 = t883 * t941 - t1028;
t780 = t883 * t942 + t1029;
t726 = t774 * t945 - t780 * t949;
t1006 = qJD(2) * t898;
t859 = t907 * t941 + t942 * t961;
t814 = -t859 + t1006;
t1129 = t726 * t946 - t814 * t950;
t1128 = t726 * t950 + t814 * t946;
t812 = t859 + t1006;
t746 = t1063 * t942 - t812 * t941;
t1034 = t1063 * t941;
t1038 = t812 * t942;
t750 = -t1038 - t1034;
t673 = -t746 * t945 + t750 * t949;
t855 = t895 - t1054;
t1127 = t673 * t946 - t855 * t950;
t1126 = t673 * t950 + t855 * t946;
t1064 = -t891 - t860;
t1075 = -t1064 * t941 + t814 * t942;
t1076 = t942 * t1064 + t814 * t941;
t1086 = t1075 * t949 - t1076 * t945;
t811 = t895 + t1054;
t1104 = t1086 * t950 - t811 * t946;
t1124 = pkin(6) * t1104;
t1105 = t1086 * t946 + t811 * t950;
t1123 = pkin(6) * t1105;
t1060 = qJDD(2) - t858;
t1027 = t1060 * t941;
t1061 = -t951 - t1054;
t1069 = t1061 * t942 - t1027;
t843 = t942 * t1060;
t1070 = t1061 * t941 + t843;
t1088 = t1069 * t949 - t1070 * t945;
t1106 = t1088 * t950 + t812 * t946;
t1122 = pkin(6) * t1106;
t1107 = t1088 * t946 - t950 * t812;
t1121 = pkin(6) * t1107;
t1120 = qJ(3) * t768;
t1119 = qJ(3) * t784;
t1118 = t746 * t949 + t750 * t945;
t881 = -t895 + t951;
t1090 = t942 * t881 + t1027;
t1091 = -t881 * t941 + t843;
t1102 = -t1090 * t945 + t1091 * t949;
t1117 = t1064 * t950 + t1102 * t946;
t1116 = -t1064 * t946 + t1102 * t950;
t1115 = t774 * t949 + t780 * t945;
t1085 = t1075 * t945 + t1076 * t949;
t1114 = pkin(7) * t1085;
t1087 = t1069 * t945 + t1070 * t949;
t1113 = pkin(7) * t1087;
t1110 = -pkin(1) * t812 + pkin(7) * t1088;
t621 = -pkin(1) * t1085 - pkin(2) * t1076;
t1109 = -pkin(1) * t1087 - pkin(2) * t1070;
t1108 = pkin(1) * t811 + pkin(7) * t1086;
t1103 = t1090 * t949 + t1091 * t945;
t1094 = qJ(3) * t1069;
t1093 = qJ(3) * t1070;
t1092 = qJ(3) * t1076;
t1089 = pkin(2) * t811 + qJ(3) * t1075;
t1052 = 2 * qJD(4);
t1083 = qJ(4) * t1063;
t944 = sin(qJ(5));
t948 = cos(qJ(5));
t842 = t896 * t944 + t898 * t948;
t936 = qJD(2) - qJD(5);
t943 = sin(qJ(6));
t947 = cos(qJ(6));
t807 = t842 * t943 + t947 * t936;
t809 = t842 * t947 - t936 * t943;
t753 = t809 * t807;
t976 = -t948 * t859 + t944 * t860;
t742 = -qJD(5) * t842 - t976;
t958 = qJDD(6) - t742;
t1066 = -t753 + t958;
t1078 = t1066 * t943;
t1077 = t1066 * t947;
t1004 = qJD(2) * t942;
t984 = t896 * t1004;
t962 = t859 * t941 + t984;
t1005 = qJD(2) * t941;
t968 = t1005 * t896 - t942 * t859;
t1056 = -t945 * t968 + t949 * t962;
t986 = t950 * t858;
t1074 = t1056 * t946 + t986;
t987 = t946 * t858;
t1073 = t1056 * t950 - t987;
t960 = (-t896 * t941 - t898 * t942) * qJD(2);
t879 = t898 * t1005;
t967 = t879 - t984;
t1057 = -t945 * t960 + t949 * t967;
t930 = t946 * qJDD(2);
t1072 = t1057 * t950 + t930;
t993 = qJDD(2) * t950;
t1071 = t1057 * t946 - t993;
t840 = -t948 * t896 + t898 * t944;
t1030 = t840 * t842;
t935 = -qJDD(2) + qJDD(5);
t965 = t935 - t1030;
t1068 = t944 * t965;
t1067 = t948 * t965;
t743 = -qJD(5) * t840 + t859 * t944 + t860 * t948;
t827 = t840 * t936;
t709 = t743 + t827;
t940 = t949 ^ 2;
t952 = qJD(1) ^ 2;
t916 = t946 * g(1) - t950 * g(2);
t964 = qJDD(1) * pkin(1) + t916;
t806 = -(qJD(2) * pkin(2) - qJ(3) * t1007) * t1007 - t961 * pkin(2) - qJDD(3) + (qJ(3) * t940 + pkin(7)) * t952 + t964;
t1065 = -pkin(3) * t1006 + t806;
t932 = t940 * t952;
t922 = -t932 - t951;
t1013 = t945 * t952;
t917 = g(1) * t950 + g(2) * t946;
t901 = -pkin(1) * t952 + qJDD(1) * pkin(7) - t917;
t1014 = t945 * t901;
t794 = qJDD(2) * pkin(2) - t907 * qJ(3) - t1014 + (pkin(2) * t1013 + qJ(3) * t999 - g(3)) * t949;
t874 = -t945 * g(3) + t949 * t901;
t795 = pkin(2) * t922 + qJ(3) * t995 + t874;
t1010 = t941 * t794 + t942 * t795;
t844 = pkin(3) * t896 - qJ(4) * t898;
t1062 = qJDD(2) * qJ(4) + qJD(2) * t1052 - t896 * t844 + t1010;
t837 = qJD(6) + t840;
t760 = t837 * t807;
t985 = t807 * qJD(6) - t947 * t743 - t943 * t935;
t661 = t985 + t760;
t978 = t943 * t743 - t947 * t935;
t656 = (qJD(6) - t837) * t809 + t978;
t1058 = t945 * t967 + t949 * t960;
t1055 = t945 * t962 + t949 * t968;
t804 = t807 ^ 2;
t805 = t809 ^ 2;
t836 = t837 ^ 2;
t838 = t840 ^ 2;
t839 = t842 ^ 2;
t1053 = t936 ^ 2;
t1051 = pkin(3) + pkin(4);
t1050 = pkin(3) * t942;
t1049 = t859 * pkin(3);
t1048 = qJDD(2) * pkin(3);
t1002 = qJD(3) * t898;
t977 = -t942 * t794 + t941 * t795;
t716 = t977 + 0.2e1 * t1002;
t1003 = qJD(3) * t896;
t888 = -0.2e1 * t1003;
t717 = t888 + t1010;
t640 = -t716 * t942 + t717 * t941;
t1047 = t640 * t945;
t1046 = t640 * t949;
t678 = t753 + t958;
t1045 = t678 * t943;
t1044 = t678 * t947;
t762 = -t935 - t1030;
t1043 = t762 * t944;
t1042 = t762 * t948;
t1041 = t806 * t941;
t1040 = t806 * t942;
t1032 = t837 * t943;
t1031 = t837 * t947;
t900 = t952 * pkin(7) + t964;
t1025 = t900 * t945;
t1024 = t900 * t949;
t908 = -0.2e1 * t983 + t995;
t1023 = t908 * t949;
t923 = t949 * t1013;
t914 = qJDD(2) + t923;
t1022 = t914 * t945;
t915 = qJDD(2) - t923;
t1021 = t915 * t945;
t1020 = t915 * t949;
t1019 = t936 * t944;
t1018 = t936 * t948;
t939 = t945 ^ 2;
t1017 = t939 * t952;
t963 = t888 + t1062;
t680 = -pkin(3) * t951 + t963;
t878 = -qJD(2) * pkin(4) - pkin(8) * t898;
t655 = -pkin(4) * t1054 + pkin(8) * t859 + qJD(2) * t878 + t680;
t1001 = 0.2e1 * qJD(3) + t844;
t966 = qJDD(4) + t977;
t959 = -t951 * qJ(4) + t966;
t955 = -t1051 * qJDD(2) + t1064 * pkin(8) + (pkin(4) * t896 + t1001) * t898 + t959;
t585 = t944 * t655 - t948 * t955;
t765 = pkin(5) * t840 - pkin(9) * t842;
t553 = -t935 * pkin(5) - pkin(9) * t1053 + t765 * t842 + t585;
t1016 = t943 * t553;
t954 = t1065 + t1083;
t662 = -t1049 - t859 * pkin(4) - t1054 * pkin(8) + (t1052 + t878) * t898 + t954;
t1015 = t944 * t662;
t1012 = t947 * t553;
t1011 = t948 * t662;
t586 = t948 * t655 + t944 * t955;
t554 = -pkin(5) * t1053 + pkin(9) * t935 - t765 * t840 + t586;
t582 = -t709 * pkin(9) + (-t842 * t936 - t742) * pkin(5) + t662;
t515 = t947 * t554 + t943 * t582;
t1009 = t811 - t951;
t1008 = t939 + t940;
t996 = qJDD(1) * t946;
t994 = qJDD(1) * t950;
t992 = t898 * t1052;
t991 = t944 * t753;
t990 = t948 * t753;
t989 = t946 * t1030;
t988 = t950 * t1030;
t981 = -qJ(4) * t941 - pkin(2);
t980 = pkin(5) * t944 + qJ(4);
t514 = t554 * t943 - t947 * t582;
t478 = t943 * t514 + t947 * t515;
t641 = t716 * t941 + t942 * t717;
t873 = t949 * g(3) + t1014;
t798 = t873 * t945 + t949 * t874;
t866 = -t916 * t946 - t950 * t917;
t975 = pkin(5) * t948 + t1051;
t974 = t946 * t923;
t973 = t950 * t923;
t911 = -t946 * t952 + t994;
t971 = -pkin(6) * t911 - g(3) * t946;
t792 = t1004 * t898 + t860 * t941;
t793 = t860 * t942 - t879;
t737 = -t792 * t945 + t793 * t949;
t970 = t946 * t737 - t986;
t969 = t950 * t737 + t987;
t477 = -t514 * t947 + t515 * t943;
t524 = -t585 * t948 + t586 * t944;
t525 = t944 * t585 + t948 * t586;
t797 = t873 * t949 - t874 * t945;
t865 = t916 * t950 - t917 * t946;
t957 = (-qJD(5) - t936) * t842 - t976;
t956 = t1001 * t898 + t966;
t953 = t954 + t992;
t921 = t932 - t951;
t920 = -t951 - t1017;
t919 = t951 - t1017;
t913 = t932 - t1017;
t912 = t932 + t1017;
t910 = t950 * t952 + t996;
t909 = t1008 * qJDD(1);
t906 = 0.2e1 * t982 + t997;
t904 = t949 * t914;
t903 = t1008 * t999;
t893 = -pkin(6) * t910 + g(3) * t950;
t877 = t907 * t949 - t939 * t999;
t876 = -t940 * t999 + t945 * t961;
t872 = -t920 * t945 - t1020;
t871 = -t919 * t945 + t904;
t870 = t922 * t949 - t1022;
t869 = t921 * t949 - t1021;
t868 = t920 * t949 - t1021;
t867 = t922 * t945 + t904;
t863 = t909 * t950 - t912 * t946;
t862 = t909 * t946 + t912 * t950;
t861 = -t906 * t945 + t1023;
t831 = t872 * t950 + t906 * t946;
t830 = t870 * t950 - t908 * t946;
t829 = t872 * t946 - t906 * t950;
t828 = t870 * t946 + t908 * t950;
t825 = -t839 + t1053;
t824 = t838 - t1053;
t823 = -pkin(7) * t868 - t1024;
t822 = -pkin(7) * t867 - t1025;
t821 = -t839 - t1053;
t820 = -pkin(1) * t868 + t874;
t819 = -pkin(1) * t867 + t873;
t772 = t798 * t950 - t900 * t946;
t771 = t798 * t946 + t900 * t950;
t766 = t839 - t838;
t761 = -t1053 - t838;
t759 = -t805 + t836;
t758 = t804 - t836;
t755 = (t840 * t948 - t842 * t944) * t936;
t754 = (-t840 * t944 - t842 * t948) * t936;
t752 = -t805 + t804;
t739 = -t1040 + t1120;
t738 = -t838 - t839;
t734 = t792 * t949 + t793 * t945;
t723 = -t805 - t836;
t722 = -t1041 - t1093;
t721 = t824 * t948 + t1043;
t720 = -t825 * t944 + t1067;
t719 = -t824 * t944 + t1042;
t718 = -t825 * t948 - t1068;
t715 = -t821 * t944 + t1042;
t714 = t821 * t948 + t1043;
t712 = -t836 - t804;
t711 = t804 + t805;
t710 = t743 - t827;
t705 = (qJD(5) - t936) * t842 + t976;
t704 = t1019 * t842 + t743 * t948;
t703 = t1018 * t842 - t743 * t944;
t702 = -t1018 * t840 - t742 * t944;
t701 = t1019 * t840 - t742 * t948;
t696 = -pkin(2) * t1063 - t1041 + t1119;
t695 = t953 - t1049;
t694 = t761 * t948 - t1068;
t693 = t761 * t944 + t1067;
t691 = -qJD(6) * t809 - t978;
t690 = -pkin(2) * t812 + t1040 + t1094;
t685 = (-t807 * t947 + t809 * t943) * t837;
t684 = (-t807 * t943 - t809 * t947) * t837;
t683 = -t754 * t941 + t755 * t942;
t682 = t754 * t942 + t755 * t941;
t681 = -t898 * t844 - 0.2e1 * t1002 + t1048 - t959;
t666 = (-t859 - t812) * pkin(3) + t953;
t665 = -t1049 + t1065 + t992 + 0.2e1 * t1083;
t664 = qJ(4) * t1009 - t1048 + t956;
t663 = pkin(3) * t1009 + t963;
t660 = -t760 + t985;
t657 = (-qJD(6) - t837) * t809 - t978;
t654 = -t1032 * t809 - t947 * t985;
t653 = t1031 * t809 - t943 * t985;
t652 = t1031 * t807 - t691 * t943;
t651 = t1032 * t807 + t691 * t947;
t645 = -t719 * t941 + t721 * t942;
t644 = -t718 * t941 + t720 * t942;
t643 = t719 * t942 + t721 * t941;
t642 = t718 * t942 + t720 * t941;
t639 = t714 * t941 + t715 * t942;
t638 = -t714 * t942 + t715 * t941;
t635 = t685 * t948 + t944 * t958;
t634 = -t685 * t944 + t948 * t958;
t633 = t758 * t947 - t1045;
t632 = -t759 * t943 + t1077;
t631 = t758 * t943 + t1044;
t630 = t759 * t947 + t1078;
t629 = t710 * t944 + t948 * t957;
t628 = -t705 * t948 - t709 * t944;
t627 = -t710 * t948 + t944 * t957;
t626 = t705 * t944 - t709 * t948;
t625 = -t703 * t941 + t704 * t942;
t624 = -t701 * t941 + t702 * t942;
t623 = t703 * t942 + t704 * t941;
t622 = t701 * t942 + t702 * t941;
t620 = -t1131 + t717;
t619 = pkin(2) * t806 + qJ(3) * t641;
t618 = -qJ(4) * t1038 - t666 * t941 - t1093;
t617 = -t723 * t943 - t1044;
t616 = t723 * t947 - t1045;
t615 = t693 * t941 + t694 * t942;
t614 = -t693 * t942 + t694 * t941;
t613 = -pkin(3) * t1034 + t665 * t942 - t1120;
t612 = t712 * t947 - t1078;
t611 = t712 * t943 + t1077;
t610 = t654 * t948 + t991;
t609 = t652 * t948 - t991;
t608 = -t654 * t944 + t990;
t607 = -t652 * t944 - t990;
t606 = t1109 + t716;
t605 = -t640 - t1092;
t604 = -t682 * t945 + t683 * t949;
t603 = t942 * t666 + t812 * t981 + t1094;
t602 = t680 * t942 - t681 * t941;
t601 = t680 * t941 + t681 * t942;
t600 = -t1119 + t941 * t665 + (pkin(2) + t1050) * t1063;
t599 = -t696 * t945 + t739 * t949 + t1132;
t598 = -pkin(3) * t1064 - qJ(4) * t814 + t621;
t597 = t1089 + t641;
t596 = (-t1061 - t951) * qJ(4) + (-qJDD(2) - t1060) * pkin(3) + t956 + t1109;
t595 = -t690 * t945 + t722 * t949 - t1113;
t594 = -qJ(4) * t1059 + 0.2e1 * t1003 + (-t846 + t951) * pkin(3) - t1062 + t1131;
t593 = -t656 * t947 - t660 * t943;
t592 = t657 * t947 + t661 * t943;
t591 = -t656 * t943 + t660 * t947;
t590 = t657 * t943 - t661 * t947;
t589 = -pkin(8) * t714 + qJ(4) * t709 + t1011;
t588 = -t643 * t945 + t645 * t949;
t587 = -t642 * t945 + t644 * t949;
t584 = t641 * t949 - t1047;
t583 = t641 * t945 + t1046;
t581 = -t638 * t945 + t639 * t949;
t580 = t638 * t949 + t639 * t945;
t577 = t633 * t948 - t656 * t944;
t576 = t632 * t948 - t660 * t944;
t575 = -t633 * t944 - t656 * t948;
t574 = -t632 * t944 - t660 * t948;
t573 = -pkin(8) * t693 + qJ(4) * t705 + t1015;
t572 = -t663 * t941 + t664 * t942 - t1092;
t571 = t584 * t950 - t806 * t946;
t570 = t584 * t946 + t806 * t950;
t569 = -t634 * t941 + t635 * t942;
t568 = t634 * t942 + t635 * t941;
t567 = t617 * t948 - t661 * t944;
t566 = t617 * t944 + t661 * t948;
t565 = t612 * t948 - t657 * t944;
t564 = t612 * t944 + t657 * t948;
t563 = t627 * t941 + t629 * t942;
t562 = -t626 * t941 + t628 * t942;
t561 = -t627 * t942 + t629 * t941;
t560 = t626 * t942 + t628 * t941;
t559 = t592 * t948 - t752 * t944;
t558 = -t592 * t944 - t752 * t948;
t557 = t663 * t942 + t664 * t941 + t1089;
t556 = -t623 * t945 + t625 * t949;
t555 = -t622 * t945 + t624 * t949;
t552 = t593 * t948 - t711 * t944;
t551 = t593 * t944 + t711 * t948;
t549 = -pkin(8) * t715 + t1051 * t709 - t1015;
t548 = -t614 * t945 + t615 * t949;
t547 = t614 * t949 + t615 * t945;
t546 = t581 * t950 - t709 * t946;
t545 = t581 * t946 + t709 * t950;
t544 = -pkin(8) * t694 + t1051 * t705 + t1011;
t543 = -qJ(3) * t601 + (-pkin(3) * t941 + qJ(4) * t942) * t695;
t542 = -t608 * t941 + t610 * t942;
t541 = -t607 * t941 + t609 * t942;
t540 = t608 * t942 + t610 * t941;
t539 = t607 * t942 + t609 * t941;
t538 = -t601 * t945 + t602 * t949;
t537 = t601 * t949 + t602 * t945;
t536 = -pkin(1) * t583 - pkin(2) * t640;
t535 = t548 * t950 - t705 * t946;
t534 = t548 * t946 + t705 * t950;
t533 = -t603 * t945 + t618 * t949 - t1113;
t532 = qJ(3) * t602 + (-t981 + t1050) * t695;
t531 = -t600 * t945 + t613 * t949 - t1132;
t530 = t538 * t950 - t695 * t946;
t529 = t538 * t946 + t695 * t950;
t528 = -t597 * t945 + t605 * t949 - t1114;
t527 = -pkin(9) * t616 + t1012;
t526 = -pkin(9) * t611 + t1016;
t523 = -t575 * t941 + t577 * t942;
t522 = -t574 * t941 + t576 * t942;
t521 = t575 * t942 + t577 * t941;
t520 = t574 * t942 + t576 * t941;
t519 = -pkin(7) * t583 - qJ(3) * t1046 - t619 * t945;
t518 = -t568 * t945 + t569 * t949;
t517 = t566 * t941 + t567 * t942;
t516 = -t566 * t942 + t567 * t941;
t513 = t564 * t941 + t565 * t942;
t512 = -t564 * t942 + t565 * t941;
t510 = -t561 * t945 + t563 * t949;
t509 = -t560 * t945 + t562 * t949;
t508 = t561 * t949 + t563 * t945;
t507 = -t558 * t941 + t559 * t942;
t506 = t558 * t942 + t559 * t941;
t505 = -pkin(8) * t524 + qJ(4) * t662;
t504 = t551 * t941 + t552 * t942;
t503 = -t551 * t942 + t552 * t941;
t502 = t510 * t950 - t738 * t946;
t501 = t510 * t946 + t738 * t950;
t500 = -t557 * t945 + t572 * t949 - t1114;
t499 = -t540 * t945 + t542 * t949;
t498 = -t539 * t945 + t541 * t949;
t497 = -qJ(3) * t638 - t549 * t941 + t589 * t942;
t496 = -pkin(8) * t627 + qJ(4) * t738 - t524;
t495 = -pkin(1) * t537 - pkin(2) * t601 - pkin(3) * t681 - qJ(4) * t680;
t494 = -pkin(5) * t616 + t515;
t493 = -pkin(5) * t611 + t514;
t492 = -pkin(8) * t525 + t1051 * t662;
t491 = -pkin(8) * t629 + t1051 * t738 - t525;
t490 = -qJ(3) * t614 - t544 * t941 + t573 * t942;
t489 = pkin(2) * t709 + qJ(3) * t639 + t549 * t942 + t589 * t941;
t488 = -pkin(1) * t580 - pkin(2) * t638 - qJ(4) * t715 + t1051 * t714 - t586;
t487 = pkin(2) * t705 + qJ(3) * t615 + t544 * t942 + t573 * t941;
t486 = -pkin(1) * t547 - pkin(2) * t614 - qJ(4) * t694 + t1051 * t693 - t585;
t485 = t524 * t941 + t525 * t942;
t484 = -t524 * t942 + t525 * t941;
t483 = -t521 * t945 + t523 * t949;
t482 = -t520 * t945 + t522 * t949;
t481 = -pkin(7) * t537 - t532 * t945 + t543 * t949;
t480 = -t516 * t945 + t517 * t949;
t479 = t516 * t949 + t517 * t945;
t476 = -t512 * t945 + t513 * t949;
t475 = t512 * t949 + t513 * t945;
t474 = -t506 * t945 + t507 * t949;
t473 = -t503 * t945 + t504 * t949;
t472 = t503 * t949 + t504 * t945;
t471 = -pkin(1) * t508 - pkin(2) * t561 - qJ(4) * t629 + t1051 * t627;
t470 = t480 * t950 - t616 * t946;
t469 = t480 * t946 + t616 * t950;
t468 = t476 * t950 - t611 * t946;
t467 = t476 * t946 + t611 * t950;
t466 = -pkin(9) * t591 - t477;
t465 = t478 * t948 + t553 * t944;
t464 = t478 * t944 - t553 * t948;
t463 = t473 * t950 - t591 * t946;
t462 = t473 * t946 + t591 * t950;
t461 = -pkin(8) * t566 + qJ(4) * t616 - t494 * t944 + t527 * t948;
t460 = -pkin(8) * t564 + qJ(4) * t611 - t493 * t944 + t526 * t948;
t459 = -pkin(7) * t580 - t489 * t945 + t497 * t949;
t458 = -qJ(3) * t561 - t491 * t941 + t496 * t942;
t457 = -pkin(8) * t567 + t1051 * t616 - t948 * t494 - t944 * t527;
t456 = pkin(2) * t738 + qJ(3) * t563 + t491 * t942 + t496 * t941;
t455 = -pkin(8) * t565 + t1051 * t611 - t948 * t493 - t944 * t526;
t454 = -pkin(7) * t547 - t487 * t945 + t490 * t949;
t453 = -t484 * t945 + t485 * t949;
t452 = t484 * t949 + t485 * t945;
t451 = t453 * t950 - t662 * t946;
t450 = t453 * t946 + t662 * t950;
t449 = -pkin(8) * t551 + t948 * t466 + t591 * t980;
t448 = -qJ(3) * t484 - t492 * t941 + t505 * t942;
t447 = -pkin(8) * t552 - t944 * t466 + t591 * t975;
t446 = pkin(2) * t662 + qJ(3) * t485 + t492 * t942 + t505 * t941;
t445 = t464 * t941 + t465 * t942;
t444 = -t464 * t942 + t465 * t941;
t443 = -pkin(1) * t479 - pkin(2) * t516 + pkin(5) * t661 + pkin(9) * t617 - qJ(4) * t567 + t1051 * t566 + t1016;
t442 = -pkin(1) * t475 - pkin(2) * t512 + pkin(5) * t657 + pkin(9) * t612 - qJ(4) * t565 + t1051 * t564 - t1012;
t441 = -qJ(3) * t516 - t457 * t941 + t461 * t942;
t440 = -qJ(3) * t512 - t455 * t941 + t460 * t942;
t439 = -pkin(7) * t508 - t456 * t945 + t458 * t949;
t438 = pkin(2) * t616 + qJ(3) * t517 + t457 * t942 + t461 * t941;
t437 = pkin(2) * t611 + qJ(3) * t513 + t455 * t942 + t460 * t941;
t436 = -pkin(1) * t472 - pkin(2) * t503 + pkin(5) * t711 + pkin(9) * t593 - qJ(4) * t552 + t1051 * t551 + t478;
t435 = -pkin(1) * t452 - pkin(2) * t484 - qJ(4) * t525 + t1051 * t524;
t434 = -pkin(8) * t464 + (-pkin(9) * t948 + t980) * t477;
t433 = -qJ(3) * t503 - t447 * t941 + t449 * t942;
t432 = pkin(2) * t591 + qJ(3) * t504 + t447 * t942 + t449 * t941;
t431 = -t444 * t945 + t445 * t949;
t430 = t444 * t949 + t445 * t945;
t429 = -pkin(8) * t465 + (pkin(9) * t944 + t975) * t477;
t428 = -pkin(7) * t452 - t446 * t945 + t448 * t949;
t427 = t431 * t950 - t477 * t946;
t426 = t431 * t946 + t477 * t950;
t425 = -pkin(7) * t479 - t438 * t945 + t441 * t949;
t424 = -pkin(7) * t475 - t437 * t945 + t440 * t949;
t423 = -pkin(7) * t472 - t432 * t945 + t433 * t949;
t422 = -qJ(3) * t444 - t429 * t941 + t434 * t942;
t421 = -pkin(1) * t430 - pkin(2) * t444 - pkin(5) * t553 + pkin(9) * t478 - qJ(4) * t465 + t1051 * t464;
t420 = pkin(2) * t477 + qJ(3) * t445 + t429 * t942 + t434 * t941;
t419 = -pkin(7) * t430 - t420 * t945 + t422 * t949;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t910, -t911, 0, t866, 0, 0, 0, 0, 0, 0, t830, t831, t863, t772, 0, 0, 0, 0, 0, 0, t1106, t689, t1104, t571, 0, 0, 0, 0, 0, 0, t1106, t1104, -t689, t530, 0, 0, 0, 0, 0, 0, t535, t546, t502, t451, 0, 0, 0, 0, 0, 0, t468, t470, t463, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t911, -t910, 0, t865, 0, 0, 0, 0, 0, 0, t828, t829, t862, t771, 0, 0, 0, 0, 0, 0, t1107, t687, t1105, t570, 0, 0, 0, 0, 0, 0, t1107, t1105, -t687, t529, 0, 0, 0, 0, 0, 0, t534, t545, t501, t450, 0, 0, 0, 0, 0, 0, t467, t469, t462, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t867, t868, 0, -t797, 0, 0, 0, 0, 0, 0, t1087, -t698, t1085, t583, 0, 0, 0, 0, 0, 0, t1087, t1085, t698, t537, 0, 0, 0, 0, 0, 0, t547, t580, t508, t452, 0, 0, 0, 0, 0, 0, t475, t479, t472, t430; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t911, 0, -t910, 0, t971, -t893, -t865, -pkin(6) * t865, t877 * t950 - t974, t861 * t950 - t913 * t946, t871 * t950 + t945 * t996, t876 * t950 + t974, t869 * t950 + t946 * t995, t903 * t950 + t930, -pkin(6) * t828 - t819 * t946 + t822 * t950, -pkin(6) * t829 - t820 * t946 + t823 * t950, -pkin(6) * t862 + t797 * t950, -pkin(6) * t771 - (pkin(1) * t946 - pkin(7) * t950) * t797, t969, t1126, t1116, t1073, t1128, t1072, t595 * t950 - t606 * t946 - t1121, t599 * t950 - t620 * t946 - t1134, t528 * t950 - t621 * t946 - t1123, -pkin(6) * t570 + t519 * t950 - t536 * t946, t969, t1116, -t1126, t1072, -t1128, t1073, t533 * t950 - t596 * t946 - t1121, t500 * t950 - t598 * t946 - t1123, t531 * t950 - t594 * t946 + t1134, -pkin(6) * t529 + t481 * t950 - t495 * t946, t556 * t950 - t989, t509 * t950 - t766 * t946, t587 * t950 - t710 * t946, t555 * t950 + t989, t588 * t950 - t946 * t957, t604 * t950 - t935 * t946, -pkin(6) * t534 + t454 * t950 - t486 * t946, -pkin(6) * t545 + t459 * t950 - t488 * t946, -pkin(6) * t501 + t439 * t950 - t471 * t946, -pkin(6) * t450 + t428 * t950 - t435 * t946, t499 * t950 - t653 * t946, t474 * t950 - t590 * t946, t482 * t950 - t630 * t946, t498 * t950 - t651 * t946, t483 * t950 - t631 * t946, t518 * t950 - t684 * t946, -pkin(6) * t467 + t424 * t950 - t442 * t946, -pkin(6) * t469 + t425 * t950 - t443 * t946, -pkin(6) * t462 + t423 * t950 - t436 * t946, -pkin(6) * t426 + t419 * t950 - t421 * t946; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t910, 0, t911, 0, t893, t971, t866, pkin(6) * t866, t877 * t946 + t973, t861 * t946 + t913 * t950, t871 * t946 - t945 * t994, t876 * t946 - t973, t869 * t946 - t949 * t994, t903 * t946 - t993, pkin(6) * t830 + t819 * t950 + t822 * t946, pkin(6) * t831 + t820 * t950 + t823 * t946, pkin(6) * t863 + t797 * t946, pkin(6) * t772 - (-pkin(1) * t950 - pkin(7) * t946) * t797, t970, t1127, t1117, t1074, t1129, t1071, t595 * t946 + t606 * t950 + t1122, t599 * t946 + t620 * t950 + t1133, t528 * t946 + t621 * t950 + t1124, pkin(6) * t571 + t519 * t946 + t536 * t950, t970, t1117, -t1127, t1071, -t1129, t1074, t533 * t946 + t596 * t950 + t1122, t500 * t946 + t598 * t950 + t1124, t531 * t946 + t594 * t950 - t1133, pkin(6) * t530 + t481 * t946 + t495 * t950, t556 * t946 + t988, t509 * t946 + t766 * t950, t587 * t946 + t710 * t950, t555 * t946 - t988, t588 * t946 + t950 * t957, t604 * t946 + t935 * t950, pkin(6) * t535 + t454 * t946 + t486 * t950, pkin(6) * t546 + t459 * t946 + t488 * t950, pkin(6) * t502 + t439 * t946 + t471 * t950, pkin(6) * t451 + t428 * t946 + t435 * t950, t499 * t946 + t653 * t950, t474 * t946 + t590 * t950, t482 * t946 + t630 * t950, t498 * t946 + t651 * t950, t483 * t946 + t631 * t950, t518 * t946 + t684 * t950, pkin(6) * t468 + t424 * t946 + t442 * t950, pkin(6) * t470 + t425 * t946 + t443 * t950, pkin(6) * t463 + t423 * t946 + t436 * t950, pkin(6) * t427 + t419 * t946 + t421 * t950; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t916, t917, 0, 0, (t907 + t982) * t945, t906 * t949 + t908 * t945, t919 * t949 + t1022, t1023, t921 * t945 + t1020, 0, pkin(1) * t908 + pkin(7) * t870 + t1024, -pkin(1) * t906 + pkin(7) * t872 - t1025, pkin(1) * t912 + pkin(7) * t909 + t798, pkin(1) * t900 + pkin(7) * t798, t734, t1118, t1103, t1055, -t1115, t1058, t690 * t949 + t722 * t945 + t1110, t696 * t949 + t739 * t945 - t1130, t597 * t949 + t605 * t945 + t1108, pkin(1) * t806 + pkin(7) * t584 - qJ(3) * t1047 + t619 * t949, t734, t1103, -t1118, t1058, t1115, t1055, t603 * t949 + t618 * t945 + t1110, t557 * t949 + t572 * t945 + t1108, t600 * t949 + t613 * t945 + t1130, pkin(1) * t695 + pkin(7) * t538 + t532 * t949 + t543 * t945, t623 * t949 + t625 * t945, t560 * t949 + t562 * t945, t642 * t949 + t644 * t945, t622 * t949 + t624 * t945, t643 * t949 + t645 * t945, t682 * t949 + t683 * t945, pkin(1) * t705 + pkin(7) * t548 + t487 * t949 + t490 * t945, pkin(1) * t709 + pkin(7) * t581 + t489 * t949 + t497 * t945, pkin(1) * t738 + pkin(7) * t510 + t456 * t949 + t458 * t945, pkin(1) * t662 + pkin(7) * t453 + t446 * t949 + t448 * t945, t540 * t949 + t542 * t945, t506 * t949 + t507 * t945, t520 * t949 + t522 * t945, t539 * t949 + t541 * t945, t521 * t949 + t523 * t945, t568 * t949 + t569 * t945, pkin(1) * t611 + pkin(7) * t476 + t437 * t949 + t440 * t945, pkin(1) * t616 + pkin(7) * t480 + t438 * t949 + t441 * t945, pkin(1) * t591 + pkin(7) * t473 + t432 * t949 + t433 * t945, pkin(1) * t477 + pkin(7) * t431 + t420 * t949 + t422 * t945;];
tauB_reg  = t1;
