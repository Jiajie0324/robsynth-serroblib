% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR1_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:48:04
% EndTime: 2019-03-09 08:48:10
% DurationCPUTime: 2.45s
% Computational Cost: add. (4518->203), mult. (9375->374), div. (0->0), fcn. (9331->8), ass. (0->128)
t136 = sin(pkin(10));
t81 = sin(qJ(2));
t117 = t136 * t81;
t69 = qJD(2) * t117;
t137 = cos(pkin(10));
t83 = cos(qJ(2));
t71 = t137 * t83;
t102 = qJD(2) * t71 - t69;
t107 = t117 - t71;
t96 = -t136 * t83 - t137 * t81;
t156 = t96 * qJD(2);
t164 = 0.2e1 * t102 * t107 + 0.2e1 * t156 * t96;
t163 = -0.2e1 * t156 * t107;
t79 = sin(qJ(6));
t77 = t79 ^ 2;
t82 = cos(qJ(6));
t78 = t82 ^ 2;
t63 = (t77 - t78) * qJD(6);
t161 = 0.2e1 * t63;
t159 = t77 + t78;
t139 = -qJ(3) - pkin(7);
t65 = t139 * t81;
t66 = t139 * t83;
t41 = -t136 * t66 - t137 * t65;
t101 = pkin(8) * t96 + t41;
t148 = cos(qJ(5));
t42 = t136 * t65 - t137 * t66;
t32 = t107 * pkin(8) + t42;
t80 = sin(qJ(5));
t14 = -t148 * t101 + t80 * t32;
t133 = t14 * qJD(5);
t116 = qJD(2) * t139;
t97 = t83 * qJD(3) + t81 * t116;
t98 = -t81 * qJD(3) + t83 * t116;
t31 = t136 * t98 + t137 * t97;
t24 = -pkin(8) * t156 + t31;
t30 = t136 * t97 - t137 * t98;
t89 = -t102 * pkin(8) + t30;
t86 = t148 * t24 + t80 * t89;
t84 = t86 - t133;
t73 = -t83 * pkin(2) - pkin(1);
t34 = t107 * pkin(3) + qJ(4) * t96 + t73;
t27 = -t107 * pkin(4) - t34;
t99 = t148 * t107;
t36 = -t80 * t96 - t99;
t37 = t80 * t107 - t148 * t96;
t88 = t36 * pkin(5) - t37 * pkin(9) + t27;
t158 = -qJD(6) * t88 - t84;
t15 = t80 * t101 + t148 * t32;
t6 = -t79 * t15 + t82 * t88;
t7 = t82 * t15 + t79 * t88;
t155 = -t6 * t79 + t7 * t82;
t120 = qJD(5) * t148;
t70 = t136 * pkin(2) + qJ(4);
t72 = -t137 * pkin(2) - pkin(3);
t106 = -pkin(4) + t72;
t95 = t148 * t106;
t45 = -t80 * t70 + t95;
t43 = pkin(5) - t45;
t46 = t80 * t106 + t148 * t70;
t44 = -pkin(9) + t46;
t8 = t15 * qJD(5) - t148 * t89 + t80 * t24;
t154 = -t8 + (t36 * t44 - t37 * t43) * qJD(6);
t153 = 0.2e1 * t41 * t102 - 0.2e1 * t31 * t107 + 0.2e1 * t156 * t42 - 0.2e1 * t30 * t96;
t152 = 2 * qJD(4);
t151 = t14 * t8;
t40 = t80 * qJD(4) + t46 * qJD(5);
t147 = t14 * t40;
t135 = qJD(5) * t80;
t18 = -qJD(5) * t99 - t148 * t102 - t135 * t96 + t156 * t80;
t146 = t18 * t77;
t145 = t37 * t18;
t144 = t37 * t79;
t143 = t37 * t82;
t142 = t40 * t79;
t141 = t40 * t82;
t17 = t78 * t18;
t140 = t79 * t82;
t75 = qJD(6) * t79;
t76 = qJD(6) * t82;
t132 = t81 * qJD(2);
t131 = t83 * qJD(2);
t19 = t37 * qJD(5) + t80 * t102 + t148 * t156;
t130 = 0.2e1 * t36 * t19;
t129 = -0.2e1 * pkin(1) * qJD(2);
t128 = -0.2e1 * pkin(5) * qJD(6);
t127 = pkin(2) * t132;
t126 = t8 * t148;
t125 = t79 * t76;
t124 = t81 * t131;
t123 = t40 * t148;
t39 = -t148 * qJD(4) - qJD(5) * t95 + t70 * t135;
t22 = t159 * t39;
t122 = 0.4e1 * t37 * t140;
t121 = t30 * t41 + t42 * t31;
t119 = qJD(6) * (pkin(5) + t43);
t118 = qJD(6) * t148;
t35 = t37 ^ 2;
t115 = t35 * t125;
t113 = pkin(5) * t18 - pkin(9) * t19;
t112 = pkin(5) * t37 + pkin(9) * t36;
t111 = t6 * t82 + t7 * t79;
t109 = t36 * t39 + t37 * t40;
t105 = -t18 * t79 + t37 * t76;
t104 = -t18 * t82 - t37 * t75;
t13 = t19 * t79 + t36 * t76;
t103 = t148 * t37 + t36 * t80;
t100 = t159 * t148;
t25 = -pkin(3) * t156 - t102 * qJ(4) + qJD(4) * t96 + t127;
t20 = -pkin(4) * t156 + t25;
t85 = t19 * pkin(5) + t18 * pkin(9) - t20;
t2 = t15 * t75 + t158 * t82 - t79 * t85;
t3 = -t15 * t76 + t158 * t79 + t82 * t85;
t92 = -qJD(6) * t155 + t2 * t79 - t3 * t82;
t1 = -t111 * qJD(6) - t2 * t82 - t3 * t79;
t91 = -qJD(6) * t14 - t18 * t43 - t19 * t44 + t109;
t90 = t148 * t18 - t80 * t19 + (-t148 * t36 + t37 * t80) * qJD(5);
t68 = -0.2e1 * t125;
t67 = 0.2e1 * t125;
t60 = -0.2e1 * t63;
t55 = t79 * t118 + t82 * t135;
t54 = -t82 * t118 + t79 * t135;
t53 = t100 * qJD(5);
t38 = -0.2e1 * t96 * t102;
t12 = -t19 * t82 + t36 * t75;
t10 = t18 * t140 + t37 * t63;
t9 = qJD(6) * t122 - t146 + t17;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t124, 0.2e1 * (-t81 ^ 2 + t83 ^ 2) * qJD(2), 0, -0.2e1 * t124, 0, 0, t81 * t129, t83 * t129, 0, 0, t38, -t164, 0, t163, 0, 0, 0.2e1 * t107 * t127 - 0.2e1 * t156 * t73, 0.2e1 * t73 * t102 - 0.2e1 * t127 * t96, t153, 0.2e1 * t73 * t127 + 0.2e1 * t121, t38, 0, t164, 0, 0, t163, 0.2e1 * t25 * t107 - 0.2e1 * t156 * t34, t153, -0.2e1 * t34 * t102 + 0.2e1 * t25 * t96, 0.2e1 * t25 * t34 + 0.2e1 * t121, -0.2e1 * t145, 0.2e1 * t18 * t36 - 0.2e1 * t19 * t37, 0, t130, 0, 0, 0.2e1 * t19 * t27 - 0.2e1 * t20 * t36, -0.2e1 * t18 * t27 - 0.2e1 * t20 * t37, -0.2e1 * t14 * t18 - 0.2e1 * t15 * t19 - 0.2e1 * t36 * t84 + 0.2e1 * t8 * t37, 0.2e1 * t15 * t84 - 0.2e1 * t27 * t20 + 0.2e1 * t151, -0.2e1 * t37 * t17 - 0.2e1 * t115, t18 * t122 + t35 * t161, 0.2e1 * t104 * t36 + 0.2e1 * t19 * t143, -0.2e1 * t77 * t145 + 0.2e1 * t115, -0.2e1 * t105 * t36 - 0.2e1 * t19 * t144, t130, 0.2e1 * t105 * t14 + 0.2e1 * t144 * t8 + 0.2e1 * t6 * t19 + 0.2e1 * t3 * t36, 0.2e1 * t104 * t14 + 0.2e1 * t143 * t8 - 0.2e1 * t7 * t19 + 0.2e1 * t2 * t36, 0.2e1 * t111 * t18 + 0.2e1 * t37 * t92, -0.2e1 * t2 * t7 + 0.2e1 * t3 * t6 + 0.2e1 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, -t132, 0, -pkin(7) * t131, pkin(7) * t132, 0, 0, 0, 0, t102, 0, t156, 0, -t30, -t31 (t137 * t69 + (-t137 ^ 2 * t83 + t136 * t96) * qJD(2)) * pkin(2) (t136 * t31 - t137 * t30) * pkin(2), 0, t102, 0, 0, -t156, 0, -t30, -qJD(4) * t107 + t72 * t102 + t156 * t70, t31, qJD(4) * t42 + t30 * t72 + t31 * t70, 0, 0, t18, 0, t19, 0, t8, t84, t18 * t45 - t19 * t46 + t109, -t15 * t39 - t8 * t45 + t46 * t84 + t147, t10, t9, -t13, -t10, t12, 0, -t154 * t82 + t91 * t79, t154 * t79 + t91 * t82, -t1, t1 * t44 - t155 * t39 + t43 * t8 + t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, t70 * t152, 0, 0, 0, 0, 0, 0, 0.2e1 * t40, -0.2e1 * t39, 0, -0.2e1 * t39 * t46 - 0.2e1 * t40 * t45, t67, t60, 0, t68, 0, 0, -0.2e1 * t43 * t75 + 0.2e1 * t141, -0.2e1 * t43 * t76 - 0.2e1 * t142, 0.2e1 * t22, -0.2e1 * t22 * t44 + 0.2e1 * t43 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t156, t102, 0, t127, 0, 0, 0, 0, 0, 0, -t156, 0, -t102, t25, 0, 0, 0, 0, 0, 0, -t19, t18, 0, t20, 0, 0, 0, 0, 0, 0, t12, t13, -t17 - t146, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, t90, t15 * t120 + t86 * t80 - t126, 0, 0, 0, 0, 0, 0, -t103 * t76 + t79 * t90, t103 * t75 + t82 * t90, 0, -t126 + (t1 + t133) * t80 + t155 * t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, t120, 0, -t123 - t39 * t80 + (t148 * t46 - t45 * t80) * qJD(5), 0, 0, 0, 0, 0, 0, t55, -t54, -t53, -t123 - t80 * t22 + (t100 * t44 + t43 * t80) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (-t148 + t100) * t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, 0, -t8, -t84, 0, 0, -t10, -t9, t13, t10, -t12, 0, -t8 * t82 + t113 * t79 + (-t112 * t82 + t14 * t79) * qJD(6), t8 * t79 + t113 * t82 + (t112 * t79 + t14 * t82) * qJD(6), t1, -t8 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t39, 0, 0, t68, t161, 0, t67, 0, 0, t119 * t79 - t141, t119 * t82 + t142, -t22, -t40 * pkin(5) - pkin(9) * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t120, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t54, t53 (-pkin(5) * t80 + pkin(9) * t100) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t60, 0, t68, 0, 0, t79 * t128, t82 * t128, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t105, t19, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, 0, t75, 0, t39 * t79 - t44 * t76, t39 * t82 + t44 * t75, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t76, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120 * t79 - t76 * t80, -t120 * t82 + t75 * t80, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t75, 0, -pkin(9) * t76, pkin(9) * t75, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
