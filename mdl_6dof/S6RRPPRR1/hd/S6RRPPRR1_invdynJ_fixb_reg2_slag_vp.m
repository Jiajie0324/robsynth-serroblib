% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:48:11
% EndTime: 2019-03-09 08:48:24
% DurationCPUTime: 8.60s
% Computational Cost: add. (12236->622), mult. (28132->746), div. (0->0), fcn. (20854->12), ass. (0->301)
t223 = sin(qJ(6));
t227 = cos(qJ(6));
t220 = sin(pkin(10));
t228 = cos(qJ(2));
t348 = cos(pkin(10));
t202 = t348 * t228;
t286 = qJD(1) * t202;
t225 = sin(qJ(2));
t331 = qJD(1) * t225;
t152 = t220 * t331 - t286;
t322 = t225 * qJDD(1);
t278 = -qJDD(1) * t202 + t220 * t322;
t300 = t348 * t225;
t165 = t220 * t228 + t300;
t387 = t165 * qJD(1);
t403 = qJD(2) * t387;
t103 = t278 + t403;
t324 = qJD(1) * qJD(2);
t306 = t225 * t324;
t246 = qJDD(1) * t165 - t220 * t306;
t104 = qJD(2) * t286 + t246;
t224 = sin(qJ(5));
t329 = qJD(5) * t224;
t378 = cos(qJ(5));
t260 = -t224 * t103 - t104 * t378 + t329 * t387;
t309 = qJD(5) * t378;
t237 = -t152 * t309 + t260;
t320 = qJD(2) - qJD(5);
t294 = t227 * t320;
t319 = qJDD(2) - qJDD(5);
t328 = qJD(6) * t223;
t92 = t224 * t152 + t378 * t387;
t22 = qJD(6) * t294 + t223 * t319 + t227 * t237 + t328 * t92;
t74 = -t223 * t320 + t227 * t92;
t346 = qJD(6) * t74;
t23 = -t223 * t237 + t227 * t319 + t346;
t394 = -t378 * t152 + t224 * t387;
t402 = qJD(6) + t394;
t414 = t74 * t402;
t72 = t223 * t92 + t294;
t415 = t72 * t402;
t425 = t223 * (t23 + t414) + t227 * (t22 + t415);
t209 = t228 * pkin(2);
t204 = t209 + pkin(1);
t173 = -qJD(1) * t204 + qJD(3);
t76 = t152 * pkin(3) - qJ(4) * t387 + t173;
t58 = -pkin(4) * t152 - t76;
t24 = pkin(5) * t394 - pkin(9) * t92 + t58;
t359 = qJ(3) + pkin(7);
t308 = t359 * t225;
t169 = qJD(1) * t308;
t162 = qJD(2) * pkin(2) - t169;
t176 = t359 * t228;
t170 = qJD(1) * t176;
t339 = t220 * t170;
t101 = t162 * t348 - t339;
t267 = qJD(4) - t101;
t371 = t387 * pkin(8);
t379 = pkin(3) + pkin(4);
t62 = -qJD(2) * t379 + t267 - t371;
t377 = pkin(8) * t152;
t301 = t348 * t170;
t102 = t220 * t162 + t301;
t93 = qJD(2) * qJ(4) + t102;
t67 = t93 + t377;
t32 = t224 * t62 + t378 * t67;
t28 = -pkin(9) * t320 + t32;
t11 = -t223 * t28 + t227 * t24;
t374 = t103 * pkin(4);
t219 = qJDD(1) * pkin(1);
t321 = t228 * qJDD(1);
t289 = -qJDD(3) + t219 + (-t306 + t321) * pkin(2);
t386 = t103 * pkin(3) - t104 * qJ(4) - qJD(4) * t387;
t41 = -t289 + t386;
t25 = -t41 - t374;
t299 = -t378 * t103 + t224 * t104;
t404 = qJD(5) * t92;
t40 = t299 + t404;
t6 = t40 * pkin(5) + pkin(9) * t237 + t25;
t303 = qJD(2) * t359;
t147 = t228 * qJD(3) - t225 * t303;
t108 = qJD(1) * t147 + qJDD(1) * t176;
t257 = -t225 * qJD(3) - t228 * t303;
t98 = qJDD(2) * pkin(2) + qJD(1) * t257 - qJDD(1) * t308;
t358 = t220 * t108 - t348 * t98;
t313 = -qJDD(4) - t358;
t37 = -t104 * pkin(8) - qJDD(2) * t379 - t313;
t214 = qJDD(2) * qJ(4);
t215 = qJD(2) * qJD(4);
t52 = t348 * t108 + t220 * t98;
t46 = t214 + t215 + t52;
t38 = pkin(8) * t103 + t46;
t265 = -t224 * t37 - t62 * t309 + t329 * t67 - t378 * t38;
t7 = -pkin(9) * t319 - t265;
t1 = qJD(6) * t11 + t223 * t6 + t227 * t7;
t373 = t11 * t402;
t424 = -t1 + t373;
t12 = t223 * t24 + t227 * t28;
t5 = t227 * t6;
t2 = -qJD(6) * t12 - t223 * t7 + t5;
t372 = t12 * t402;
t423 = -t2 - t372;
t422 = -t22 + t415;
t419 = t414 - t23;
t364 = t74 * t92;
t39 = qJDD(6) + t40;
t356 = t223 * t39;
t413 = t227 * t402;
t408 = t402 * t413 + t356;
t418 = -t364 + t408;
t357 = t22 * t223;
t417 = t413 * t74 - t357;
t31 = -t224 * t67 + t378 * t62;
t27 = pkin(5) * t320 - t31;
t416 = t27 * t402;
t397 = t320 * t394;
t412 = t237 + t397;
t304 = -t227 * t39 + t328 * t402;
t354 = t223 * t402;
t291 = t354 * t394 + t304;
t367 = t72 * t92;
t411 = t291 - t367;
t336 = t92 * qJD(2);
t410 = t336 + t299;
t362 = t394 ^ 2;
t363 = t92 ^ 2;
t409 = t362 - t363;
t407 = t11 * t92;
t406 = t12 * t92;
t405 = t402 * t92;
t361 = t92 * t394;
t10 = -t224 * t38 - t67 * t309 - t62 * t329 + t378 * t37;
t226 = sin(qJ(1));
t213 = qJ(2) + pkin(10);
t207 = sin(t213);
t312 = t207 * t378;
t208 = cos(t213);
t341 = t208 * t226;
t119 = t224 * t341 - t226 * t312;
t229 = cos(qJ(1));
t340 = t208 * t229;
t121 = t224 * t340 - t229 * t312;
t145 = t207 * t224 + t208 * t378;
t262 = g(1) * t121 + g(2) * t119 + g(3) * t145;
t401 = -t58 * t92 + t10 + t262;
t122 = t145 * t229;
t120 = t145 * t226;
t146 = -t208 * t224 + t312;
t281 = g(2) * t120 + g(3) * t146;
t261 = g(1) * t122 + t281;
t400 = t394 * t58 + t261 + t265;
t296 = t220 * t225 - t202;
t388 = qJD(2) * t165;
t399 = t103 * t296 + t152 * t388;
t330 = qJD(2) * t225;
t190 = t220 * t330;
t268 = qJD(2) * t202 - t190;
t398 = t165 * t103 + t104 * t296 + t152 * t268 + t387 * t388;
t48 = pkin(5) * t92 + pkin(9) * t394;
t203 = -pkin(2) * t348 - pkin(3);
t194 = -pkin(4) + t203;
t198 = pkin(2) * t220 + qJ(4);
t125 = t194 * t378 - t224 * t198;
t113 = qJD(4) * t378 + qJD(5) * t125;
t109 = -t169 * t220 + t301;
t274 = t109 + t377;
t110 = -t348 * t169 - t339;
t75 = t110 + t371;
t43 = t224 * t274 + t378 * t75;
t350 = t113 - t43;
t126 = t224 * t194 + t378 * t198;
t349 = qJD(5) * t126 + t274 * t378 + (qJD(4) - t75) * t224;
t393 = -t208 * pkin(3) - t207 * qJ(4);
t211 = g(2) * t229;
t392 = g(1) * t226 - t211;
t210 = g(2) * t226;
t212 = g(1) * t229;
t391 = t212 + t210;
t148 = t152 ^ 2;
t380 = t387 ^ 2;
t390 = -t380 - t148;
t389 = -t380 + t148;
t118 = t348 * t176 - t220 * t308;
t384 = -t118 * qJDD(2) - t207 * t392;
t383 = g(3) * t207 + qJD(2) * t110 + t208 * t391 - t52;
t382 = t320 ^ 2;
t230 = qJD(2) ^ 2;
t381 = qJDD(2) * t296 + t165 * t230;
t375 = g(3) * t228;
t199 = t208 * pkin(4);
t370 = t225 * pkin(2);
t264 = t378 * t296;
t53 = -qJD(5) * t264 + t165 * t329 - t224 * t388 - t268 * t378;
t369 = t27 * t53;
t366 = t74 * t72;
t360 = pkin(8) - t359;
t355 = t223 * t72;
t352 = t227 * t74;
t351 = t23 * t227;
t347 = pkin(7) * qJDD(1);
t345 = qJD(6) * t402;
t344 = qJDD(2) * pkin(3);
t343 = t387 * t152;
t342 = t207 * t229;
t337 = t229 * t359;
t81 = t348 * t147 + t220 * t257;
t217 = t225 ^ 2;
t218 = t228 ^ 2;
t333 = t217 - t218;
t332 = t217 + t218;
t327 = qJD(6) * t227;
t326 = t109 * qJD(2);
t325 = qJD(4) - t110;
t318 = pkin(2) * t330;
t231 = qJD(1) ^ 2;
t317 = t225 * t231 * t228;
t186 = t229 * t204;
t316 = pkin(3) * t340 + qJ(4) * t342 + t186;
t315 = t209 - t393;
t314 = -g(1) * t342 + g(3) * t208 - t207 * t210;
t311 = t223 * t378;
t310 = t227 * t378;
t307 = t378 * qJD(2);
t80 = t220 * t147 - t348 * t257;
t117 = t176 * t220 + t359 * t300;
t295 = t31 * t320;
t100 = t296 * pkin(3) - t165 * qJ(4) - t204;
t293 = pkin(4) * t340 + t316;
t292 = t199 + t315;
t290 = t228 * t306;
t177 = qJ(4) * t341;
t288 = -t226 * t370 + t177;
t179 = qJ(4) * t340;
t287 = -t229 * t370 + t179;
t285 = -pkin(3) * t207 - t370;
t284 = g(1) * t119 - g(2) * t121;
t280 = -t314 - t358;
t279 = -qJD(6) * t28 - t211;
t277 = t11 * t227 + t12 * t223;
t106 = t165 * t224 - t264;
t107 = t165 * t378 + t224 * t296;
t71 = -pkin(4) * t296 - t100;
t35 = t106 * pkin(5) - t107 * pkin(9) + t71;
t82 = -pkin(8) * t165 + t117;
t83 = pkin(8) * t296 + t118;
t45 = t224 * t82 + t378 * t83;
t16 = -t223 * t45 + t227 * t35;
t17 = t223 * t35 + t227 * t45;
t79 = pkin(2) * t331 + pkin(3) * t387 + t152 * qJ(4);
t275 = -t204 + t393;
t273 = -t224 * t83 + t378 * t82;
t272 = -t224 * t92 + t378 * t394;
t271 = -t327 * t402 - t356;
t269 = -pkin(9) * t39 + t416;
t266 = -0.2e1 * pkin(1) * t324 - pkin(7) * qJDD(2);
t66 = pkin(3) * t388 - t268 * qJ(4) - t165 * qJD(4) + t318;
t8 = pkin(5) * t319 - t10;
t259 = t262 - t8;
t258 = -t289 - t392;
t63 = -pkin(4) * t387 - t79;
t256 = -qJD(6) * t24 + t281 - t7;
t252 = -t387 * t76 - qJDD(4) + t280;
t251 = -t118 * t103 + t117 * t104 - t81 * t152 + t387 * t80 - t391;
t124 = -pkin(9) + t126;
t250 = -t113 * t402 - t124 * t39 - t416;
t249 = -pkin(7) * t230 + 0.2e1 * t219 + t392;
t248 = pkin(1) * t231 - t347 + t391;
t247 = g(1) * t341 - g(2) * t340 - t80 * qJD(2) - t117 * qJDD(2);
t245 = t391 * t379 * t207;
t243 = t258 + t386;
t241 = pkin(9) * t345 - t259;
t240 = t124 * t345 + t259;
t239 = -pkin(8) * t268 + t80;
t238 = -qJD(6) * t277 + t1 * t227 - t2 * t223;
t235 = (-g(1) * (t275 - t199) + g(2) * t360) * t226;
t55 = -pkin(4) * t388 - t66;
t233 = t278 + 0.2e1 * t403;
t123 = pkin(5) - t125;
t116 = t223 * t387 + t227 * t307;
t115 = -t223 * t307 + t227 * t387;
t112 = t122 * t227 - t223 * t226;
t111 = -t122 * t223 - t226 * t227;
t105 = qJD(2) * t268 + t165 * qJDD(2);
t85 = -qJD(2) * pkin(3) + t267;
t70 = (t286 + t152) * qJD(2) + t246;
t69 = (t286 - t152) * qJD(2) + t246;
t64 = pkin(8) * t388 + t81;
t54 = qJD(5) * t107 + t224 * t268 - t378 * t388;
t50 = -t313 - t344;
t49 = t104 * t165 + t268 * t387;
t26 = -t48 + t63;
t21 = t223 * t48 + t227 * t31;
t20 = -t223 * t31 + t227 * t48;
t19 = qJD(5) * t45 + t224 * t64 - t239 * t378;
t18 = qJD(5) * t273 + t224 * t239 + t378 * t64;
t15 = t54 * pkin(5) + t53 * pkin(9) + t55;
t14 = t223 * t26 + t227 * t43;
t13 = -t223 * t43 + t227 * t26;
t4 = -qJD(6) * t17 + t227 * t15 - t223 * t18;
t3 = qJD(6) * t16 + t223 * t15 + t227 * t18;
t9 = [0, 0, 0, 0, 0, qJDD(1), t392, t391, 0, 0, qJDD(1) * t217 + 0.2e1 * t290, 0.2e1 * t225 * t321 - 0.2e1 * t324 * t333, qJDD(2) * t225 + t228 * t230, qJDD(1) * t218 - 0.2e1 * t290, qJDD(2) * t228 - t225 * t230, 0, t225 * t266 + t228 * t249, -t225 * t249 + t228 * t266, 0.2e1 * t332 * t347 - t391, -g(1) * (-pkin(1) * t226 + pkin(7) * t229) - g(2) * (pkin(1) * t229 + pkin(7) * t226) + (pkin(7) ^ 2 * t332 + pkin(1) ^ 2) * qJDD(1), t49, -t398, t105, t399, -t381, 0, -t204 * t103 + t152 * t318 + t173 * t388 - t289 * t296 + t247, -t204 * t104 - t289 * t165 - t173 * t190 + (t173 * t202 + t370 * t387 - t81) * qJD(2) + t384, -t101 * t268 - t102 * t388 + t165 * t358 - t296 * t52 + t251, t52 * t118 + t102 * t81 + t358 * t117 - t101 * t80 + t289 * t204 + t173 * t318 - g(1) * (-t204 * t226 + t337) - g(2) * (t226 * t359 + t186) t49, t105, t398, 0, t381, t399, t100 * t103 + t66 * t152 + t296 * t41 + t388 * t76 + t247, t50 * t165 + t268 * t85 - t296 * t46 - t388 * t93 + t251, t81 * qJD(2) - t100 * t104 - t41 * t165 - t268 * t76 - t387 * t66 - t384, t46 * t118 + t93 * t81 + t41 * t100 + t76 * t66 + t50 * t117 + t85 * t80 - g(1) * t337 - g(2) * t316 + (-g(1) * t275 - g(2) * t359) * t226, -t107 * t237 - t92 * t53, t106 * t237 - t107 * t40 + t394 * t53 - t92 * t54, -t107 * t319 + t320 * t53, t106 * t40 + t394 * t54, t106 * t319 + t320 * t54, 0, g(1) * t120 - g(2) * t122 + t25 * t106 + t19 * t320 - t273 * t319 + t394 * t55 + t71 * t40 + t58 * t54, t25 * t107 + t18 * t320 - t237 * t71 + t319 * t45 - t58 * t53 + t55 * t92 - t284, -t10 * t107 + t106 * t265 - t18 * t394 + t19 * t92 + t237 * t273 + t31 * t53 - t32 * t54 - t45 * t40 + t391, -g(2) * t293 + t10 * t273 + t32 * t18 - t31 * t19 + t212 * t360 + t25 * t71 - t265 * t45 + t58 * t55 + t235, -t53 * t352 + (-t227 * t22 - t328 * t74) * t107 (t223 * t74 + t227 * t72) * t53 + (t357 - t351 + (-t352 + t355) * qJD(6)) * t107, -t22 * t106 - t107 * t304 - t413 * t53 + t74 * t54, -t53 * t355 + (t223 * t23 + t327 * t72) * t107, -t23 * t106 + t107 * t271 + t354 * t53 - t72 * t54, t106 * t39 + t402 * t54, t4 * t402 + t16 * t39 + t2 * t106 + t11 * t54 + t19 * t72 - t273 * t23 - t223 * t369 - g(1) * (-t120 * t227 - t223 * t229) - g(2) * t112 + (t223 * t8 + t27 * t327) * t107, -t3 * t402 - t17 * t39 - t1 * t106 - t12 * t54 + t19 * t74 + t273 * t22 - t227 * t369 - g(1) * (t120 * t223 - t227 * t229) - g(2) * t111 + (t227 * t8 - t27 * t328) * t107, t16 * t22 - t17 * t23 - t3 * t72 - t4 * t74 + t277 * t53 + (-t1 * t223 - t2 * t227 + (t11 * t223 - t12 * t227) * qJD(6)) * t107 + t284, t1 * t17 + t12 * t3 + t2 * t16 + t11 * t4 - t8 * t273 + t27 * t19 - g(1) * (-pkin(5) * t120 - pkin(8) * t229 - pkin(9) * t119 + t337) - g(2) * (pkin(5) * t122 + pkin(9) * t121 + t293) + t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t317, t333 * t231, t322, t317, t321, qJDD(2), t225 * t248 - t375, g(3) * t225 + t228 * t248, 0, 0, t343, -t389, t70, -t343, -t278, qJDD(2), t326 - t173 * t387 + (qJDD(2) * t348 - t152 * t331) * pkin(2) + t280, t152 * t173 + (-qJDD(2) * t220 - t331 * t387) * pkin(2) + t383 (t102 - t109) * t387 + (-t101 + t110) * t152 + (-t103 * t220 - t104 * t348) * pkin(2), t101 * t109 - t102 * t110 + (-t348 * t358 - t375 + t220 * t52 + (-qJD(1) * t173 + t391) * t225) * pkin(2), t343, t70, t389, qJDD(2), t278, -t343, t326 - t152 * t79 + (pkin(3) - t203) * qJDD(2) + t252, -t103 * t198 + t104 * t203 + (-t109 + t93) * t387 + (t85 - t325) * t152, qJDD(2) * t198 - t152 * t76 + t387 * t79 + t214 + 0.2e1 * t215 - t383, t46 * t198 + t50 * t203 - t76 * t79 - t85 * t109 - g(1) * (t229 * t285 + t179) - g(2) * (t226 * t285 + t177) - g(3) * t315 + t325 * t93, -t361, t409, t412, t361, t410, t319, -t125 * t319 + t320 * t349 - t394 * t63 - t401, t126 * t319 + t320 * t350 - t63 * t92 - t400, t125 * t237 - t126 * t40 + (-t32 + t349) * t92 + (t31 - t350) * t394, -g(1) * t287 - g(2) * t288 - g(3) * t292 + t10 * t125 - t126 * t265 - t31 * t349 + t32 * t350 - t58 * t63 + t245, -t417, t425, -t418, -t355 * t402 + t351, t411, t405, t123 * t23 - t13 * t402 + t223 * t250 - t227 * t240 + t349 * t72 + t407, -t123 * t22 + t14 * t402 + t223 * t240 + t227 * t250 + t349 * t74 - t406, t13 * t74 + t14 * t72 + (t11 * t394 - t113 * t72 - t124 * t23 - t1 + (t124 * t74 + t11) * qJD(6)) * t227 + (t113 * t74 + t12 * t394 - t124 * t22 + t2 + (t124 * t72 + t12) * qJD(6)) * t223 + t261, t8 * t123 - g(1) * (pkin(5) * t121 - pkin(9) * t122 + t287) - g(2) * (pkin(5) * t119 - pkin(9) * t120 + t288) - g(3) * (pkin(5) * t145 - pkin(9) * t146 + t292) + t349 * t27 + t245 + (t113 * t227 - t14) * t12 + (-t113 * t223 - t13) * t11 + t238 * t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233, t69, t390, t101 * t387 + t102 * t152 + t258, 0, 0, 0, 0, 0, 0, t233, t390, -t69, t152 * t93 - t387 * t85 + t243, 0, 0, 0, 0, 0, 0, -t299 + t336 - 0.2e1 * t404, t237 - t397, t362 + t363, -t31 * t92 - t32 * t394 + t243 + t374, 0, 0, 0, 0, 0, 0, t291 + t367, t364 + t408, -t223 * t419 + t227 * t422, t223 * t424 + t423 * t227 + t27 * t92 - t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) + t343, t70, -t380 - t230, -qJD(2) * t93 - t252 - t344, 0, 0, 0, 0, 0, 0, -t224 * t382 - t378 * t319 - t387 * t394, t224 * t319 - t378 * t382 - t387 * t92, -t224 * t40 + t378 * t260 + (-t152 * t378 ^ 2 - t272) * qJD(5) + t272 * qJD(2), t10 * t378 - t58 * t387 + (-t307 + t309) * t32 + (-t265 + t295) * t224 + t314, 0, 0, 0, 0, 0, 0, -t378 * t23 + (-t223 * t309 - t115) * t402 + (-t320 * t72 + t271) * t224, t378 * t22 + (-t227 * t309 + t116) * t402 + (-t320 * t74 + t304) * t224, t115 * t74 + t116 * t72 + (-t310 * t72 + t311 * t74) * qJD(5) + (-t357 - t351 + (t352 + t355) * qJD(6)) * t224, -t8 * t378 - t11 * t115 - t12 * t116 + (-t11 * t311 + t12 * t310) * qJD(5) + (-t27 * t320 + t238) * t224 + t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t361, -t409, -t412, -t361, -t410, -t319, -t32 * t320 + t401, -t295 + t400, 0, 0, t417, -t425, t418, t354 * t72 - t351, -t411, -t405, -pkin(5) * t23 - t20 * t402 + t223 * t269 - t227 * t241 - t32 * t72 - t407, pkin(5) * t22 + t21 * t402 + t223 * t241 + t227 * t269 - t32 * t74 + t406, t20 * t74 + t21 * t72 + ((-t23 + t346) * pkin(9) - t424) * t227 + ((qJD(6) * t72 - t22) * pkin(9) + t423) * t223 - t261, -t11 * t20 - t12 * t21 - t27 * t32 + t259 * pkin(5) + (t238 - t261) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t366, -t72 ^ 2 + t74 ^ 2, t422, -t366, t419, t39, -g(1) * t111 + t223 * t256 + t227 * t279 - t27 * t74 + t372 + t5, g(1) * t112 + t373 + t27 * t72 + (-t279 - t6) * t223 + t256 * t227, 0, 0;];
tau_reg  = t9;
