% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:50:48
% EndTime: 2019-05-04 23:51:43
% DurationCPUTime: 55.97s
% Computational Cost: add. (133053->850), mult. (297812->1314), div. (0->0), fcn. (229811->12), ass. (0->623)
t934 = sin(pkin(11));
t937 = cos(pkin(11));
t942 = sin(qJ(4));
t945 = cos(qJ(4));
t981 = t934 * t945 + t937 * t942;
t902 = t981 * qJD(2);
t941 = sin(qJ(5));
t944 = cos(qJ(5));
t878 = -t944 * qJD(4) + t902 * t941;
t880 = qJD(4) * t941 + t902 * t944;
t822 = t880 * t878;
t1050 = t902 * qJD(4);
t1045 = qJDD(2) * t937;
t1066 = t934 * t942;
t894 = qJDD(2) * t1066 - t945 * t1045;
t853 = -t894 - t1050;
t843 = qJDD(5) - t853;
t1124 = t822 + t843;
t1085 = t1124 * t941;
t1054 = qJD(2) * t937;
t900 = qJD(2) * t1066 - t945 * t1054;
t891 = qJD(5) + t900;
t1105 = t891 ^ 2;
t1106 = t878 ^ 2;
t829 = t1106 - t1105;
t717 = t829 * t944 - t1085;
t1051 = t900 * qJD(4);
t1116 = t981 * qJDD(2);
t855 = t1116 - t1051;
t1027 = -t944 * qJDD(4) + t941 * t855;
t746 = (qJD(5) - t891) * t880 + t1027;
t641 = t717 * t942 + t746 * t945;
t645 = t717 * t945 - t746 * t942;
t564 = t641 * t937 + t645 * t934;
t936 = sin(pkin(6));
t939 = cos(pkin(6));
t567 = t641 * t934 - t645 * t937;
t1084 = t1124 * t944;
t712 = t829 * t941 + t1084;
t943 = sin(qJ(2));
t946 = cos(qJ(2));
t997 = t567 * t943 + t712 * t946;
t493 = t936 * t564 + t939 * t997;
t526 = t567 * t946 - t943 * t712;
t935 = sin(pkin(10));
t938 = cos(pkin(10));
t1262 = t493 * t935 - t526 * t938;
t1261 = t493 * t938 + t526 * t935;
t1073 = t878 * t891;
t979 = -t941 * qJDD(4) - t944 * t855;
t957 = qJD(5) * t878 + t979;
t1140 = t1073 + t957;
t1088 = t1140 * t941;
t1048 = qJD(5) + t891;
t745 = t1048 * t880 + t1027;
t658 = -t745 * t944 + t1088;
t877 = t880 ^ 2;
t818 = t877 - t1106;
t619 = t658 * t942 - t818 * t945;
t621 = t658 * t945 + t818 * t942;
t546 = t619 * t934 - t621 * t937;
t651 = -t1140 * t944 - t745 * t941;
t1005 = t546 * t943 + t651 * t946;
t545 = t619 * t937 + t621 * t934;
t474 = t1005 * t939 + t936 * t545;
t515 = t546 * t946 - t943 * t651;
t1260 = t474 * t935 - t515 * t938;
t1259 = t474 * t938 + t515 * t935;
t1254 = -t939 * t564 + t936 * t997;
t1253 = t1005 * t936 - t939 * t545;
t1118 = -t1073 + t957;
t1156 = t1118 * t944 - t746 * t941;
t1117 = t877 + t1106;
t1155 = -t1118 * t941 - t746 * t944;
t1179 = -t1117 * t942 + t1155 * t945;
t1180 = t1117 * t945 + t1155 * t942;
t1201 = t1179 * t937 - t1180 * t934;
t1220 = t1156 * t943 + t1201 * t946;
t1200 = t1179 * t934 + t1180 * t937;
t1221 = -t1156 * t946 + t1201 * t943;
t1233 = -t1200 * t936 + t1221 * t939;
t1241 = t1220 * t935 + t1233 * t938;
t1248 = qJ(1) * t1241;
t1242 = t1220 * t938 - t1233 * t935;
t1247 = qJ(1) * t1242;
t1246 = pkin(1) * t1233;
t1234 = t1200 * t939 + t1221 * t936;
t1245 = pkin(1) * t1234;
t1125 = -t822 + t843;
t1083 = t1125 * t941;
t830 = -t877 + t1105;
t1158 = -t830 * t944 - t1083;
t1082 = t1125 * t944;
t1157 = -t830 * t941 + t1082;
t1181 = -t1118 * t942 + t1157 * t945;
t1182 = t1118 * t945 + t1157 * t942;
t1199 = t1181 * t937 - t1182 * t934;
t1222 = -t1158 * t943 + t1199 * t946;
t1198 = t1181 * t934 + t1182 * t937;
t1223 = t1158 * t946 + t1199 * t943;
t1231 = -t1198 * t936 + t1223 * t939;
t1244 = t1222 * t938 - t1231 * t935;
t1243 = t1222 * t935 + t1231 * t938;
t1240 = (-t1233 * t939 - t1234 * t936) * pkin(7);
t1239 = pkin(7) * t1220;
t1232 = t1198 * t939 + t1223 * t936;
t1230 = qJ(3) * t1200;
t1225 = -pkin(2) * t1200 - pkin(3) * t1180 - pkin(4) * t1117 - pkin(9) * t1155;
t1224 = -pkin(2) * t1156 + qJ(3) * t1201;
t811 = -t877 - t1105;
t705 = t811 * t944 - t1085;
t1219 = pkin(2) * t705;
t1218 = pkin(3) * t705;
t1217 = pkin(4) * t705;
t697 = t811 * t941 + t1084;
t1216 = pkin(9) * t697;
t1215 = pkin(9) * t705;
t1214 = pkin(8) * t1179;
t1213 = pkin(8) * t1180;
t1212 = t697 * t942;
t1211 = t697 * t945;
t1210 = t705 * t946;
t1208 = t943 * t705;
t1069 = t891 * t941;
t1040 = t878 * t1069;
t1068 = t891 * t944;
t827 = t880 * t1068;
t1018 = t827 + t1040;
t1039 = t878 * t1068;
t826 = t880 * t1069;
t1019 = t826 - t1039;
t1109 = t1019 * t945 + t843 * t942;
t1112 = t1019 * t942 - t945 * t843;
t1134 = t1109 * t937 - t1112 * t934;
t1153 = -t1018 * t943 + t1134 * t946;
t1133 = t1109 * t934 + t1112 * t937;
t1154 = t1018 * t946 + t1134 * t943;
t1175 = -t1133 * t936 + t1154 * t939;
t1205 = t1153 * t938 - t1175 * t935;
t1204 = t1153 * t935 + t1175 * t938;
t1042 = t942 * t822;
t794 = -qJD(5) * t880 - t1027;
t975 = -t794 * t941 + t1039;
t1110 = t945 * t975 - t1042;
t1041 = t945 * t822;
t1111 = t942 * t975 + t1041;
t1132 = t1110 * t937 - t1111 * t934;
t974 = -t794 * t944 - t1040;
t1151 = t1132 * t946 - t943 * t974;
t1131 = t1110 * t934 + t1111 * t937;
t1152 = t1132 * t943 + t946 * t974;
t1177 = -t1131 * t936 + t1152 * t939;
t1203 = t1151 * t938 - t1177 * t935;
t1202 = t1151 * t935 + t1177 * t938;
t1196 = pkin(9) * t1156;
t1193 = qJ(6) * t1140;
t742 = -t944 * t957 - t826;
t1020 = t945 * t742 + t1042;
t1021 = t942 * t742 - t1041;
t1108 = t1020 * t937 - t1021 * t934;
t741 = t941 * t957 - t827;
t1184 = t1108 * t943 + t741 * t946;
t1178 = t1131 * t939 + t1152 * t936;
t1176 = t1133 * t939 + t1154 * t936;
t1114 = -t1105 - t1106;
t1137 = t1114 * t941 + t1082;
t1174 = pkin(2) * t1137;
t1173 = pkin(3) * t1137;
t1172 = pkin(4) * t1137;
t1136 = t1114 * t944 - t1083;
t1171 = pkin(9) * t1136;
t1170 = pkin(9) * t1137;
t1162 = t1136 * t942;
t1161 = t1136 * t945;
t1160 = t1137 * t943;
t1159 = t1137 * t946;
t1107 = t1020 * t934 + t1021 * t937;
t1130 = -t1107 * t936 + t1184 * t939;
t1138 = t1108 * t946 - t943 * t741;
t1150 = t1130 * t938 + t1138 * t935;
t1149 = -t1130 * t935 + t1138 * t938;
t1148 = 2 * qJD(6);
t861 = t902 * t900;
t1115 = qJDD(4) - t861;
t1146 = t1115 * t942;
t1145 = t1115 * t945;
t1104 = qJD(2) ^ 2;
t929 = t934 ^ 2;
t1053 = t1104 * t929;
t930 = t937 ^ 2;
t924 = t930 * t1104;
t909 = t924 + t1053;
t1030 = g(1) * t935 - t938 * g(2);
t1056 = g(3) - qJDD(1);
t1139 = t939 * t1030 - t936 * t1056;
t1044 = qJDD(2) * t946;
t1032 = t937 * t1044;
t1113 = t1104 * (t929 + t930);
t905 = t937 * t1113;
t972 = -t905 * t943 + t1032;
t1126 = t972 * t939;
t1043 = t943 * qJDD(2);
t873 = t1043 * t937 + t905 * t946;
t801 = t1126 * t938 - t873 * t935;
t1135 = t1126 * t935 + t873 * t938;
t1129 = t1107 * t939 + t1184 * t936;
t863 = t972 * t936;
t1121 = t935 * t1056;
t1120 = t938 * t1056;
t1103 = qJD(4) ^ 2;
t1102 = 2 * qJD(3);
t883 = t1030 * t936 + t1056 * t939;
t914 = g(1) * t938 + g(2) * t935;
t839 = t1139 * t943 - t946 * t914;
t950 = qJDD(2) * qJ(3) + t839;
t777 = t937 * (-pkin(2) * t1104 + t950) - t934 * t883 + t1054 * t1102;
t760 = -pkin(3) * t924 + pkin(8) * t1045 + t777;
t1063 = t937 * t883;
t949 = -t1063 + ((-qJ(3) - pkin(8)) * qJDD(2) + (-(2 * qJD(3)) + (pkin(3) * t937 + pkin(2)) * qJD(2)) * qJD(2) - t839) * t934;
t672 = t945 * t760 + t942 * t949;
t844 = pkin(4) * t900 - pkin(9) * t902;
t647 = -pkin(4) * t1103 + qJDD(4) * pkin(9) - t844 * t900 + t672;
t838 = -t1139 * t946 - t943 * t914;
t933 = qJDD(2) * pkin(2);
t824 = -t1104 * qJ(3) + qJDD(3) + t838 - t933;
t799 = -pkin(3) * t1045 - pkin(8) * t909 + t824;
t685 = (-t855 + t1051) * pkin(9) + (-t853 + t1050) * pkin(4) + t799;
t585 = t944 * t647 + t941 * t685;
t816 = pkin(5) * t878 - qJ(6) * t880;
t1013 = t843 * qJ(6) + t1148 * t891 - t878 * t816 + t585;
t870 = -t1030 * t935 - t938 * t914;
t869 = t1030 * t938 - t935 * t914;
t892 = t900 ^ 2;
t893 = t902 ^ 2;
t1101 = pkin(4) * t942;
t1100 = pkin(5) * t944;
t774 = t943 * t838 + t839 * t946;
t1099 = pkin(7) * t774;
t1098 = qJ(6) * t944;
t671 = t942 * t760 - t945 * t949;
t590 = -t671 * t945 + t672 * t942;
t1097 = t590 * t934;
t1096 = t590 * t937;
t646 = -qJDD(4) * pkin(4) - t1103 * pkin(9) + t902 * t844 + t671;
t1095 = t646 * t941;
t1094 = t646 * t944;
t1081 = t799 * t942;
t1080 = t799 * t945;
t1079 = t824 * t946;
t850 = qJDD(4) + t861;
t1075 = t850 * t942;
t1074 = t850 * t945;
t1072 = t880 * t891;
t1067 = t934 * t937;
t1034 = t1104 * t1067;
t882 = t1032 * t934 - t1034 * t943;
t1071 = t882 * t935;
t1070 = t882 * t938;
t1060 = t943 * t824;
t1059 = t943 * t883;
t1058 = t946 * t883;
t584 = t941 * t647 - t944 * t685;
t1055 = t1117 - t1105;
t1047 = qJDD(2) * t929;
t1046 = qJDD(2) * t936;
t1038 = t946 * t861;
t1037 = t943 * t1067;
t1036 = t943 * t861;
t1035 = -pkin(4) * t945 - pkin(3);
t1033 = t934 * t1045;
t1031 = qJ(6) * t941 + pkin(4);
t1028 = -t824 + t933;
t591 = t671 * t942 + t945 * t672;
t776 = t1063 + ((-pkin(2) * qJD(2) + t1102) * qJD(2) + t950) * t934;
t689 = t776 * t934 + t937 * t777;
t1026 = t936 * t1037;
t1025 = t939 * t1037;
t1023 = t946 * t1034;
t1022 = t880 * t816 + qJDD(6) + t584;
t688 = t776 * t937 - t777 * t934;
t923 = t930 * qJDD(2);
t907 = t923 + t1047;
t867 = t907 * t946 - t943 * t909;
t1016 = pkin(7) * t867 + t688 * t943;
t912 = -t1104 * t943 + t1044;
t1015 = -pkin(7) * t912 - t1059;
t978 = t1104 * t946 + t1043;
t1014 = -pkin(7) * t978 + t1058;
t1012 = t936 * t1023;
t1011 = t939 * t1023;
t543 = -pkin(5) * t1105 + t1013;
t971 = -t843 * pkin(5) + t1022;
t550 = qJ(6) * t1105 - t971;
t497 = t543 * t944 - t550 * t941;
t952 = -t794 * pkin(5) + t1193 + t646;
t569 = (pkin(5) * t891 - (2 * qJD(6))) * t880 + t952;
t462 = t497 * t942 - t569 * t945;
t463 = t497 * t945 + t569 * t942;
t420 = -t462 * t934 + t463 * t937;
t496 = t543 * t941 + t550 * t944;
t1010 = t420 * t943 - t496 * t946;
t509 = t584 * t941 + t585 * t944;
t499 = t509 * t942 - t646 * t945;
t500 = t509 * t945 + t646 * t942;
t437 = -t499 * t934 + t500 * t937;
t508 = -t584 * t944 + t585 * t941;
t1009 = t437 * t943 - t508 * t946;
t518 = t591 * t937 - t1097;
t1008 = t518 * t943 - t799 * t946;
t624 = -t1140 * t945 + t1212;
t626 = t1140 * t942 + t1211;
t553 = -t624 * t934 + t626 * t937;
t1003 = t553 * t943 + t1210;
t625 = -t745 * t945 + t1162;
t627 = t745 * t942 + t1161;
t554 = -t625 * t934 + t627 * t937;
t1002 = t554 * t943 - t1159;
t753 = t1048 * t878 + t979;
t632 = t753 * t945 - t1212;
t634 = -t753 * t942 - t1211;
t557 = -t632 * t934 + t634 * t937;
t1001 = t557 * t943 - t1210;
t747 = -t794 + t1072;
t633 = -t747 * t945 + t1162;
t635 = t747 * t942 + t1161;
t558 = -t633 * t934 + t635 * t937;
t1000 = t558 * t943 - t1159;
t991 = t689 * t943 - t1079;
t845 = -t1103 - t892;
t780 = t845 * t942 + t1145;
t781 = t845 * t945 - t1146;
t694 = -t780 * t934 + t781 * t937;
t852 = t894 + 0.2e1 * t1050;
t990 = t694 * t943 - t852 * t946;
t782 = -t1116 * t945 - t894 * t942;
t784 = t1116 * t942 - t894 * t945;
t701 = -t782 * t934 + t784 * t937;
t820 = -t892 - t893;
t989 = t701 * t943 - t820 * t946;
t854 = t1116 - 0.2e1 * t1051;
t783 = -t852 * t942 + t854 * t945;
t785 = -t852 * t945 - t854 * t942;
t702 = -t783 * t934 + t785 * t937;
t860 = -t893 + t892;
t988 = t702 * t943 + t860 * t946;
t885 = t892 - t1103;
t804 = t885 * t942 + t1074;
t807 = t885 * t945 - t1075;
t726 = -t804 * t934 + t807 * t937;
t987 = t726 * t943 + t894 * t946;
t886 = -t893 + t1103;
t805 = t886 * t945 + t1146;
t808 = -t886 * t942 + t1145;
t727 = -t805 * t934 + t808 * t937;
t986 = -t1116 * t946 + t727 * t943;
t887 = -t893 - t1103;
t806 = t887 * t945 - t1075;
t809 = -t887 * t942 - t1074;
t728 = -t806 * t934 + t809 * t937;
t985 = t728 * t943 - t854 * t946;
t773 = t838 * t946 - t943 * t839;
t898 = t978 * t939;
t984 = t898 * t938 + t912 * t935;
t858 = t898 * t935 - t912 * t938;
t983 = t907 * t943 + t909 * t946;
t908 = t923 - t1047;
t910 = t924 - t1053;
t982 = t908 * t943 + t910 * t946;
t835 = (-t900 * t942 - t902 * t945) * qJD(4);
t836 = (-t900 * t945 + t902 * t942) * qJD(4);
t762 = -t835 * t934 + t836 * t937;
t980 = -qJDD(4) * t946 + t762 * t943;
t812 = t1051 * t942 + t853 * t945;
t813 = t1051 * t945 - t853 * t942;
t731 = -t812 * t934 + t813 * t937;
t977 = t731 * t943 + t1038;
t814 = t1050 * t945 + t855 * t942;
t815 = -t1050 * t942 + t855 * t945;
t732 = -t814 * t934 + t815 * t937;
t976 = t732 * t943 - t1038;
t904 = t934 * t1113;
t973 = -t1044 * t934 + t904 * t943;
t435 = -pkin(4) * t496 - pkin(5) * t550 - qJ(6) * t543;
t440 = -pkin(9) * t496 + (pkin(5) * t941 - t1098) * t569;
t399 = -pkin(3) * t496 + pkin(8) * t463 + t435 * t945 + t440 * t942;
t403 = -pkin(8) * t462 - t435 * t942 + t440 * t945;
t419 = t462 * t937 + t463 * t934;
t378 = -qJ(3) * t419 - t399 * t934 + t403 * t937;
t397 = -pkin(2) * t419 - pkin(3) * t462 - pkin(9) * t497 + (t1031 + t1100) * t569;
t413 = t420 * t946 + t943 * t496;
t969 = pkin(7) * t413 + t378 * t943 + t397 * t946;
t416 = pkin(8) * t500 + (-pkin(9) * t942 + t1035) * t508;
t425 = -pkin(8) * t499 + (-pkin(9) * t945 + t1101) * t508;
t436 = t499 * t937 + t500 * t934;
t392 = -qJ(3) * t436 - t416 * t934 + t425 * t937;
t412 = -pkin(2) * t436 - pkin(3) * t499 + pkin(4) * t646 - pkin(9) * t509;
t424 = t437 * t946 + t943 * t508;
t968 = pkin(7) * t424 + t392 * t943 + t412 * t946;
t523 = pkin(5) * t1055 + t1013;
t530 = qJ(6) * t1055 + t971;
t466 = -t523 * t941 + t530 * t944 - t1196;
t580 = -pkin(4) * t1156 - pkin(5) * t1118 + qJ(6) * t746;
t427 = -pkin(3) * t1156 + t466 * t942 + t580 * t945 + t1214;
t434 = t466 * t945 - t580 * t942 - t1213;
t405 = -t427 * t934 + t434 * t937 - t1230;
t426 = -t523 * t944 - t530 * t941 + t1225;
t967 = t405 * t943 + t426 * t946 + t1239;
t502 = t1217 - qJ(6) * t1124 + (t811 + t1105) * pkin(5) - t1013;
t951 = t1148 * t880 - t952;
t537 = -pkin(5) * t1072 - t1193 + t951;
t503 = pkin(5) * t1088 + t537 * t944 + t1215;
t438 = pkin(8) * t626 + t502 * t945 + t503 * t942 + t1218;
t443 = -pkin(8) * t624 - t502 * t942 + t503 * t945;
t551 = t624 * t937 + t626 * t934;
t410 = -qJ(3) * t551 - t438 * t934 + t443 * t937;
t455 = -pkin(2) * t551 - pkin(3) * t624 - t1216 - t941 * t537 - (-pkin(4) - t1100) * t1140;
t519 = t553 * t946 - t1208;
t966 = pkin(7) * t519 + t410 * t943 + t455 * t946;
t538 = (-t747 - t1072) * pkin(5) + t951;
t504 = -t1098 * t747 - t538 * t941 - t1170;
t505 = -t1172 + (-t1114 - t1105) * qJ(6) + (-t1125 - t843) * pkin(5) + t1022;
t439 = pkin(8) * t635 + t504 * t942 + t505 * t945 - t1173;
t449 = -pkin(8) * t633 + t504 * t945 - t505 * t942;
t556 = t633 * t937 + t635 * t934;
t411 = -qJ(3) * t556 - t439 * t934 + t449 * t937;
t456 = -pkin(2) * t556 - pkin(3) * t633 + t1031 * t747 - t944 * t538 - t1171;
t522 = t558 * t946 + t1160;
t965 = pkin(7) * t522 + t411 * t943 + t456 * t946;
t501 = -t508 - t1196;
t454 = t1035 * t1156 + t942 * t501 + t1214;
t465 = t1101 * t1156 + t501 * t945 - t1213;
t415 = -t454 * t934 + t465 * t937 - t1230;
t442 = t1225 - t509;
t964 = t415 * t943 + t442 * t946 + t1239;
t541 = t584 - t1172;
t586 = t1095 - t1170;
t472 = pkin(8) * t627 + t541 * t945 + t586 * t942 - t1173;
t482 = -pkin(8) * t625 - t541 * t942 + t586 * t945;
t552 = t625 * t937 + t627 * t934;
t421 = -qJ(3) * t552 - t472 * t934 + t482 * t937;
t476 = -pkin(2) * t552 - pkin(3) * t625 + pkin(4) * t745 + t1094 - t1171;
t520 = t554 * t946 + t1160;
t963 = pkin(7) * t520 + t421 * t943 + t476 * t946;
t542 = t585 - t1217;
t587 = t1094 - t1215;
t473 = pkin(8) * t634 + t542 * t945 + t587 * t942 - t1218;
t483 = -pkin(8) * t632 - t542 * t942 + t587 * t945;
t555 = t632 * t937 + t634 * t934;
t422 = -qJ(3) * t555 - t473 * t934 + t483 * t937;
t477 = -pkin(2) * t555 - pkin(3) * t632 - pkin(4) * t753 - t1095 + t1216;
t521 = t557 * t946 + t1208;
t962 = pkin(7) * t521 + t422 * t943 + t477 * t946;
t517 = t591 * t934 + t1096;
t579 = -pkin(3) * t799 + pkin(8) * t591;
t464 = -pkin(8) * t1096 - qJ(3) * t517 - t579 * t934;
t490 = -pkin(2) * t517 - pkin(3) * t590;
t510 = t518 * t946 + t943 * t799;
t961 = pkin(7) * t510 + t464 * t943 + t490 * t946;
t560 = -pkin(3) * t820 + pkin(8) * t784 + t591;
t578 = -pkin(8) * t782 - t590;
t699 = t782 * t937 + t784 * t934;
t495 = -qJ(3) * t699 - t560 * t934 + t578 * t937;
t650 = -pkin(2) * t699 - pkin(3) * t782;
t661 = t701 * t946 + t943 * t820;
t960 = pkin(7) * t661 + t495 * t943 + t650 * t946;
t674 = -pkin(3) * t852 + pkin(8) * t781 - t1080;
t693 = t780 * t937 + t781 * t934;
t709 = -pkin(8) * t780 + t1081;
t570 = -qJ(3) * t693 - t674 * t934 + t709 * t937;
t583 = -pkin(2) * t693 - pkin(3) * t780 + t671;
t667 = t694 * t946 + t943 * t852;
t959 = pkin(7) * t667 + t570 * t943 + t583 * t946;
t690 = -pkin(3) * t854 + pkin(8) * t809 + t1081;
t722 = -pkin(8) * t806 + t1080;
t725 = t806 * t937 + t809 * t934;
t582 = -qJ(3) * t725 - t690 * t934 + t722 * t937;
t592 = -pkin(2) * t725 - pkin(3) * t806 + t672;
t686 = t728 * t946 + t943 * t854;
t958 = pkin(7) * t686 + t582 * t943 + t592 * t946;
t956 = -pkin(7) * t873 + t1060 * t934 + t776 * t946;
t872 = t1043 * t934 + t904 * t946;
t955 = pkin(7) * t872 + t1060 * t937 + t777 * t946;
t659 = t689 * t946 + t1060;
t954 = pkin(7) * t659 - (-pkin(2) * t946 - qJ(3) * t943) * t688;
t899 = t912 * t939;
t897 = t912 * t936;
t896 = t978 * t936;
t868 = t908 * t946 - t943 * t910;
t864 = t973 * t939;
t862 = t973 * t936;
t859 = -t899 * t935 - t938 * t978;
t857 = t899 * t938 - t935 * t978;
t848 = t983 * t939;
t847 = t983 * t936;
t842 = -t1011 + (-t930 * t936 - t1025) * qJDD(2);
t841 = t1011 + (-t929 * t936 + t1025) * qJDD(2);
t825 = -0.2e1 * t1033 * t936 + t939 * t982;
t802 = -t864 * t935 + t872 * t938;
t800 = t864 * t938 + t872 * t935;
t798 = -t1058 + (t896 * t936 + t898 * t939) * pkin(7);
t797 = -t1059 + (-t897 * t936 - t899 * t939) * pkin(7);
t791 = -t848 * t935 + t867 * t938;
t790 = t848 * t938 + t867 * t935;
t789 = -qJ(3) * t905 + t1028 * t937;
t788 = qJ(3) * t904 - t1028 * t934;
t767 = t774 * t939;
t761 = t835 * t937 + t836 * t934;
t756 = t943 * qJDD(4) + t762 * t946;
t755 = -pkin(1) * t897 + t1014 * t939 + t936 * t838;
t754 = pkin(1) * t896 + t1015 * t939 + t936 * t839;
t744 = -t773 * t939 + t936 * t883;
t743 = -t773 * t936 - t939 * t883;
t730 = t814 * t937 + t815 * t934;
t729 = t812 * t937 + t813 * t934;
t724 = t805 * t937 + t808 * t934;
t723 = t804 * t937 + t807 * t934;
t704 = t1116 * t943 + t727 * t946;
t703 = t726 * t946 - t943 * t894;
t700 = t783 * t937 + t785 * t934;
t692 = t732 * t946 + t1036;
t691 = t731 * t946 - t1036;
t673 = pkin(2) * t909 + qJ(3) * t907 + t689;
t669 = t702 * t946 - t943 * t860;
t668 = -t936 * t761 + t939 * t980;
t666 = -pkin(1) * t743 + t1099 * t939;
t665 = -t744 * t935 + t774 * t938;
t664 = t744 * t938 + t774 * t935;
t663 = t937 * t1079 - t943 * t777 + (-t862 * t936 - t864 * t939) * pkin(7);
t662 = t934 * t1079 - t943 * t776 + (-t1126 * t939 - t863 * t936) * pkin(7);
t660 = -pkin(2) * t824 + qJ(3) * t689;
t649 = (-t743 * t936 - t744 * t939) * pkin(7);
t648 = t946 * t688 + (-t847 * t936 - t848 * t939) * pkin(7);
t623 = -pkin(1) * t862 - t936 * t788 + t939 * t955;
t622 = -pkin(1) * t863 - t936 * t789 + t939 * t956;
t617 = -t936 * t724 + t939 * t986;
t616 = -t936 * t723 + t939 * t987;
t615 = -t936 * t730 + t939 * t976;
t614 = -t936 * t729 + t939 * t977;
t613 = -t936 * t725 + t939 * t985;
t612 = t939 * t725 + t936 * t985;
t599 = -t936 * t700 + t939 * t988;
t596 = -t936 * t693 + t939 * t990;
t595 = t939 * t693 + t936 * t990;
t594 = -t936 * t699 + t939 * t989;
t593 = t939 * t699 + t936 * t989;
t589 = t688 * t936 + t939 * t991;
t588 = -t688 * t939 + t936 * t991;
t581 = -pkin(1) * t847 + t1016 * t939 - t936 * t673;
t577 = -pkin(2) * t854 + qJ(3) * t728 + t690 * t937 + t722 * t934;
t572 = -t613 * t935 + t686 * t938;
t571 = t613 * t938 + t686 * t935;
t559 = -pkin(2) * t852 + qJ(3) * t694 + t674 * t937 + t709 * t934;
t549 = -t596 * t935 + t667 * t938;
t548 = t596 * t938 + t667 * t935;
t540 = -t594 * t935 + t661 * t938;
t539 = t594 * t938 + t661 * t935;
t536 = -t589 * t935 + t659 * t938;
t535 = t589 * t938 + t659 * t935;
t498 = -(pkin(2) * t943 - qJ(3) * t946) * t688 + (-t588 * t936 - t589 * t939) * pkin(7);
t489 = -pkin(1) * t588 - t936 * t660 + t939 * t954;
t488 = -pkin(2) * t820 + qJ(3) * t701 + t560 * t937 + t578 * t934;
t487 = t1000 * t939 - t936 * t556;
t486 = t1001 * t939 - t936 * t555;
t485 = t1000 * t936 + t939 * t556;
t484 = t1001 * t936 + t939 * t555;
t481 = t1002 * t939 - t936 * t552;
t480 = t1003 * t939 - t936 * t551;
t479 = t1002 * t936 + t939 * t552;
t478 = t1003 * t936 + t939 * t551;
t471 = t946 * t582 - t943 * t592 + (-t612 * t936 - t613 * t939) * pkin(7);
t461 = t1008 * t939 - t936 * t517;
t460 = t1008 * t936 + t939 * t517;
t459 = t946 * t570 - t943 * t583 + (-t595 * t936 - t596 * t939) * pkin(7);
t458 = -pkin(2) * t799 - pkin(8) * t1097 + qJ(3) * t518 + t579 * t937;
t457 = -pkin(1) * t612 - t936 * t577 + t939 * t958;
t453 = -t487 * t935 + t522 * t938;
t452 = -t486 * t935 + t521 * t938;
t451 = t487 * t938 + t522 * t935;
t450 = t486 * t938 + t521 * t935;
t448 = -t481 * t935 + t520 * t938;
t447 = -t480 * t935 + t519 * t938;
t446 = t481 * t938 + t520 * t935;
t445 = t480 * t938 + t519 * t935;
t444 = -pkin(1) * t595 - t936 * t559 + t939 * t959;
t441 = t946 * t495 - t943 * t650 + (-t593 * t936 - t594 * t939) * pkin(7);
t429 = -t461 * t935 + t510 * t938;
t428 = t461 * t938 + t510 * t935;
t423 = -pkin(1) * t593 - t936 * t488 + t939 * t960;
t418 = qJ(3) * t557 + t473 * t937 + t483 * t934 - t1219;
t417 = qJ(3) * t554 + t472 * t937 + t482 * t934 - t1174;
t414 = t454 * t937 + t465 * t934 + t1224;
t409 = qJ(3) * t558 + t439 * t937 + t449 * t934 - t1174;
t408 = qJ(3) * t553 + t438 * t937 + t443 * t934 + t1219;
t407 = t1009 * t939 - t936 * t436;
t406 = t1009 * t936 + t939 * t436;
t404 = t427 * t937 + t434 * t934 + t1224;
t402 = t946 * t464 - t943 * t490 + (-t460 * t936 - t461 * t939) * pkin(7);
t401 = -pkin(1) * t460 - t936 * t458 + t939 * t961;
t400 = t946 * t422 - t943 * t477 + (-t484 * t936 - t486 * t939) * pkin(7);
t398 = t946 * t421 - t943 * t476 + (-t479 * t936 - t481 * t939) * pkin(7);
t396 = t1010 * t939 - t936 * t419;
t395 = t1010 * t936 + t939 * t419;
t394 = -t407 * t935 + t424 * t938;
t393 = t407 * t938 + t424 * t935;
t391 = t946 * t411 - t943 * t456 + (-t485 * t936 - t487 * t939) * pkin(7);
t390 = t946 * t415 - t943 * t442 + t1240;
t389 = t946 * t410 - t943 * t455 + (-t478 * t936 - t480 * t939) * pkin(7);
t388 = -pkin(2) * t508 + qJ(3) * t437 + t416 * t937 + t425 * t934;
t387 = -pkin(1) * t484 - t936 * t418 + t939 * t962;
t386 = -pkin(1) * t479 - t936 * t417 + t939 * t963;
t385 = t946 * t405 - t943 * t426 + t1240;
t384 = -t396 * t935 + t413 * t938;
t383 = t396 * t938 + t413 * t935;
t382 = -t936 * t414 + t939 * t964 - t1245;
t381 = -pkin(1) * t485 - t936 * t409 + t939 * t965;
t380 = -pkin(1) * t478 - t936 * t408 + t939 * t966;
t379 = -t936 * t404 + t939 * t967 - t1245;
t377 = -pkin(2) * t496 + qJ(3) * t420 + t399 * t937 + t403 * t934;
t376 = t946 * t392 - t943 * t412 + (-t406 * t936 - t407 * t939) * pkin(7);
t375 = -pkin(1) * t406 - t936 * t388 + t939 * t968;
t374 = t946 * t378 - t943 * t397 + (-t395 * t936 - t396 * t939) * pkin(7);
t373 = -pkin(1) * t395 - t936 * t377 + t939 * t969;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, 0, 0, 0, 0, 0, 0, t859, t858, 0, t665, 0, 0, 0, 0, 0, 0, -t1135, t802, t791, t536, 0, 0, 0, 0, 0, 0, t549, t572, t540, t429, 0, 0, 0, 0, 0, 0, t448, t452, t1242, t394, 0, 0, 0, 0, 0, 0, t453, t1242, t447, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, 0, 0, 0, 0, 0, 0, t857, -t984, 0, t664, 0, 0, 0, 0, 0, 0, t801, t800, t790, t535, 0, 0, 0, 0, 0, 0, t548, t571, t539, t428, 0, 0, 0, 0, 0, 0, t446, t450, t1241, t393, 0, 0, 0, 0, 0, 0, t451, t1241, t445, t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1056, 0, 0, 0, 0, 0, 0, t897, -t896, 0, t743, 0, 0, 0, 0, 0, 0, t863, t862, t847, t588, 0, 0, 0, 0, 0, 0, t595, t612, t593, t460, 0, 0, 0, 0, 0, 0, t479, t484, t1234, t406, 0, 0, 0, 0, 0, 0, t485, t1234, t478, t395; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1121, -t1120, -t869, -qJ(1) * t869, 0, 0, -t858, 0, t859, t935 * t1046, -qJ(1) * t857 - t755 * t935 + t797 * t938, qJ(1) * t984 - t754 * t935 + t798 * t938, -t767 * t935 + t773 * t938, -qJ(1) * t664 + t649 * t938 - t666 * t935, -t841 * t935 + t1070, -t825 * t935 + t868 * t938, t802, -t842 * t935 - t1070, t1135, 0, -qJ(1) * t801 - t622 * t935 + t662 * t938, -qJ(1) * t800 - t623 * t935 + t663 * t938, -qJ(1) * t790 - t581 * t935 + t648 * t938, -qJ(1) * t535 - t489 * t935 + t498 * t938, -t615 * t935 + t692 * t938, -t599 * t935 + t669 * t938, -t617 * t935 + t704 * t938, -t614 * t935 + t691 * t938, -t616 * t935 + t703 * t938, -t668 * t935 + t756 * t938, -qJ(1) * t548 - t444 * t935 + t459 * t938, -qJ(1) * t571 - t457 * t935 + t471 * t938, -qJ(1) * t539 - t423 * t935 + t441 * t938, -qJ(1) * t428 - t401 * t935 + t402 * t938, t1149, t1260, t1244, t1203, t1262, t1205, -qJ(1) * t446 - t386 * t935 + t398 * t938, -qJ(1) * t450 - t387 * t935 + t400 * t938, -t382 * t935 + t390 * t938 - t1248, -qJ(1) * t393 - t375 * t935 + t376 * t938, t1149, t1244, -t1260, t1205, -t1262, t1203, -qJ(1) * t451 - t381 * t935 + t391 * t938, -t379 * t935 + t385 * t938 - t1248, -qJ(1) * t445 - t380 * t935 + t389 * t938, -qJ(1) * t383 - t373 * t935 + t374 * t938; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1120, -t1121, t870, qJ(1) * t870, 0, 0, t984, 0, t857, -t938 * t1046, qJ(1) * t859 + t755 * t938 + t797 * t935, qJ(1) * t858 + t754 * t938 + t798 * t935, t767 * t938 + t773 * t935, qJ(1) * t665 + t649 * t935 + t666 * t938, t841 * t938 + t1071, t825 * t938 + t868 * t935, t800, t842 * t938 - t1071, -t801, 0, -qJ(1) * t1135 + t622 * t938 + t662 * t935, qJ(1) * t802 + t623 * t938 + t663 * t935, qJ(1) * t791 + t581 * t938 + t648 * t935, qJ(1) * t536 + t489 * t938 + t498 * t935, t615 * t938 + t692 * t935, t599 * t938 + t669 * t935, t617 * t938 + t704 * t935, t614 * t938 + t691 * t935, t616 * t938 + t703 * t935, t668 * t938 + t756 * t935, qJ(1) * t549 + t444 * t938 + t459 * t935, qJ(1) * t572 + t457 * t938 + t471 * t935, qJ(1) * t540 + t423 * t938 + t441 * t935, qJ(1) * t429 + t401 * t938 + t402 * t935, t1150, -t1259, t1243, t1202, -t1261, t1204, qJ(1) * t448 + t386 * t938 + t398 * t935, qJ(1) * t452 + t387 * t938 + t400 * t935, t382 * t938 + t390 * t935 + t1247, qJ(1) * t394 + t375 * t938 + t376 * t935, t1150, t1243, t1259, t1204, t1261, t1202, qJ(1) * t453 + t381 * t938 + t391 * t935, t379 * t938 + t385 * t935 + t1247, qJ(1) * t447 + t380 * t938 + t389 * t935, qJ(1) * t384 + t373 * t938 + t374 * t935; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1030, t914, 0, 0, 0, 0, t896, 0, t897, t939 * qJDD(2), pkin(1) * t899 + t1014 * t936 - t939 * t838, -pkin(1) * t898 + t1015 * t936 - t939 * t839, t774 * t936, pkin(1) * t744 + t1099 * t936, t1012 + (t929 * t939 + t1026) * qJDD(2), 0.2e1 * t1033 * t939 + t936 * t982, t862, -t1012 + (t930 * t939 - t1026) * qJDD(2), -t863, 0, pkin(1) * t1126 + t939 * t789 + t936 * t956, pkin(1) * t864 + t939 * t788 + t936 * t955, pkin(1) * t848 + t1016 * t936 + t939 * t673, pkin(1) * t589 + t939 * t660 + t936 * t954, t939 * t730 + t936 * t976, t939 * t700 + t936 * t988, t939 * t724 + t936 * t986, t939 * t729 + t936 * t977, t939 * t723 + t936 * t987, t939 * t761 + t936 * t980, pkin(1) * t596 + t939 * t559 + t936 * t959, pkin(1) * t613 + t939 * t577 + t936 * t958, pkin(1) * t594 + t939 * t488 + t936 * t960, pkin(1) * t461 + t939 * t458 + t936 * t961, t1129, -t1253, t1232, t1178, -t1254, t1176, pkin(1) * t481 + t939 * t417 + t936 * t963, pkin(1) * t486 + t939 * t418 + t936 * t962, t939 * t414 + t936 * t964 + t1246, pkin(1) * t407 + t939 * t388 + t936 * t968, t1129, t1232, t1253, t1176, t1254, t1178, pkin(1) * t487 + t939 * t409 + t936 * t965, t939 * t404 + t936 * t967 + t1246, pkin(1) * t480 + t939 * t408 + t936 * t966, pkin(1) * t396 + t939 * t377 + t936 * t969;];
tauB_reg  = t1;
