% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRPRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRPRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:52:50
% EndTime: 2019-05-04 23:53:00
% DurationCPUTime: 10.62s
% Computational Cost: add. (27837->286), mult. (62470->404), div. (0->0), fcn. (48515->12), ass. (0->221)
t2427 = cos(pkin(11));
t2417 = t2427 * qJDD(2);
t2432 = sin(qJ(4));
t2435 = cos(qJ(4));
t2424 = sin(pkin(11));
t2475 = t2424 * qJDD(2);
t2470 = -t2435 * t2417 + t2432 * t2475;
t2454 = t2424 * t2435 + t2427 * t2432;
t2400 = t2454 * qJD(2);
t2481 = t2400 * qJD(4);
t2445 = qJDD(5) + t2470 + t2481;
t2431 = sin(qJ(5));
t2434 = cos(qJ(5));
t2382 = -qJD(4) * t2434 + t2400 * t2431;
t2384 = qJD(4) * t2431 + t2400 * t2434;
t2485 = t2382 * t2384;
t2328 = t2445 + t2485;
t2381 = t2384 ^ 2;
t2398 = (t2424 * t2432 - t2427 * t2435) * qJD(2);
t2392 = qJD(5) + t2398;
t2496 = t2392 ^ 2;
t2503 = -t2381 - t2496;
t2305 = t2328 * t2434 + t2431 * t2503;
t2483 = t2398 * qJD(4);
t2500 = t2454 * qJDD(2);
t2372 = t2500 - t2483;
t2446 = -qJD(5) * t2382 + qJDD(4) * t2431 + t2372 * t2434;
t2484 = t2382 * t2392;
t2443 = t2446 - t2484;
t2276 = t2305 * t2432 + t2435 * t2443;
t2278 = t2305 * t2435 - t2432 * t2443;
t2251 = t2276 * t2427 + t2278 * t2424;
t2426 = sin(pkin(6));
t2429 = cos(pkin(6));
t2257 = t2276 * t2424 - t2278 * t2427;
t2303 = t2328 * t2431 - t2434 * t2503;
t2433 = sin(qJ(2));
t2436 = cos(qJ(2));
t2462 = t2257 * t2433 + t2303 * t2436;
t2228 = t2426 * t2251 + t2429 * t2462;
t2243 = t2257 * t2436 - t2303 * t2433;
t2425 = sin(pkin(10));
t2428 = cos(pkin(10));
t2539 = t2228 * t2425 - t2243 * t2428;
t2538 = t2228 * t2428 + t2243 * t2425;
t2226 = -t2429 * t2251 + t2426 * t2462;
t2321 = t2446 + t2484;
t2473 = -t2434 * qJDD(4) + t2372 * t2431;
t2447 = (-qJD(5) + t2392) * t2384 - t2473;
t2499 = -t2321 * t2434 + t2431 * t2447;
t2352 = t2382 ^ 2;
t2339 = t2381 + t2352;
t2498 = t2321 * t2431 + t2434 * t2447;
t2513 = t2339 * t2435 + t2432 * t2498;
t2514 = -t2339 * t2432 + t2435 * t2498;
t2520 = -t2424 * t2513 + t2427 * t2514;
t2524 = t2433 * t2499 + t2436 * t2520;
t2521 = t2424 * t2514 + t2427 * t2513;
t2525 = t2433 * t2520 - t2436 * t2499;
t2528 = -t2426 * t2521 + t2429 * t2525;
t2533 = -t2425 * t2528 + t2428 * t2524;
t2532 = t2425 * t2524 + t2428 * t2528;
t2529 = t2426 * t2525 + t2429 * t2521;
t2329 = t2445 - t2485;
t2501 = -t2496 - t2352;
t2506 = -t2329 * t2431 + t2434 * t2501;
t2519 = t2432 * t2506;
t2507 = t2329 * t2434 + t2431 * t2501;
t2518 = t2433 * t2507;
t2517 = t2435 * t2506;
t2516 = t2436 * t2507;
t2437 = qJD(2) ^ 2;
t2408 = -g(1) * t2428 - g(2) * t2425;
t2472 = g(1) * t2425 - g(2) * t2428;
t2492 = -g(3) + qJDD(1);
t2508 = t2426 * t2492 + t2429 * t2472;
t2361 = t2436 * t2408 + t2433 * t2508;
t2442 = -0.2e1 * qJD(3) * qJD(2) - t2361;
t2515 = t2437 * pkin(2) - qJDD(2) * qJ(3) + t2442;
t2419 = t2424 ^ 2;
t2420 = t2427 ^ 2;
t2476 = t2419 + t2420;
t2405 = t2476 * t2437;
t2497 = qJD(4) ^ 2;
t2495 = t2398 ^ 2;
t2494 = t2400 ^ 2;
t2482 = t2398 * t2400;
t2480 = t2419 * t2437;
t2479 = t2420 * t2437;
t2386 = -t2426 * t2472 + t2429 * t2492;
t2478 = t2427 * t2386;
t2333 = t2424 * t2386 - t2427 * t2515;
t2327 = -pkin(3) * t2479 + pkin(8) * t2417 + t2333;
t2440 = t2478 + ((pkin(3) * t2427 + pkin(2)) * t2437 + (-qJ(3) - pkin(8)) * qJDD(2) + t2442) * t2424;
t2295 = t2435 * t2327 + t2432 * t2440;
t2363 = pkin(4) * t2398 - pkin(9) * t2400;
t2286 = -pkin(4) * t2497 + qJDD(4) * pkin(9) - t2363 * t2398 + t2295;
t2471 = t2433 * t2408 - t2436 * t2508;
t2354 = -qJDD(2) * pkin(2) - t2437 * qJ(3) + qJDD(3) + t2471;
t2344 = -pkin(3) * t2417 + t2354 + (-t2479 - t2480) * pkin(8);
t2370 = t2470 + 0.2e1 * t2481;
t2441 = (-t2372 + t2483) * pkin(9) + t2370 * pkin(4) + t2344;
t2261 = t2434 * t2286 + t2431 * t2441;
t2260 = -t2286 * t2431 + t2434 * t2441;
t2294 = -t2327 * t2432 + t2435 * t2440;
t2349 = pkin(5) * t2382 - qJ(6) * t2384;
t2249 = -pkin(5) * t2496 + qJ(6) * t2445 + 0.2e1 * qJD(6) * t2392 - t2382 * t2349 + t2261;
t2250 = -pkin(5) * t2445 - qJ(6) * t2496 + t2349 * t2384 + qJDD(6) - t2260;
t2231 = t2249 * t2434 + t2250 * t2431;
t2285 = -qJDD(4) * pkin(4) - pkin(9) * t2497 + t2363 * t2400 - t2294;
t2451 = -qJD(5) * t2384 - t2473;
t2259 = -t2451 * pkin(5) + (pkin(5) * t2392 - 0.2e1 * qJD(6)) * t2384 + t2285 - t2443 * qJ(6);
t2216 = t2231 * t2432 - t2259 * t2435;
t2217 = t2231 * t2435 + t2259 * t2432;
t2210 = -t2216 * t2424 + t2217 * t2427;
t2230 = t2249 * t2431 - t2250 * t2434;
t2469 = t2210 * t2433 - t2230 * t2436;
t2237 = -t2260 * t2431 + t2261 * t2434;
t2232 = t2237 * t2432 - t2285 * t2435;
t2233 = t2237 * t2435 + t2285 * t2432;
t2213 = -t2232 * t2424 + t2233 * t2427;
t2236 = t2260 * t2434 + t2261 * t2431;
t2468 = t2213 * t2433 - t2236 * t2436;
t2264 = t2294 * t2435 + t2295 * t2432;
t2265 = -t2294 * t2432 + t2295 * t2435;
t2240 = -t2264 * t2424 + t2265 * t2427;
t2467 = t2240 * t2433 - t2344 * t2436;
t2317 = (qJD(5) + t2392) * t2384 + t2473;
t2277 = -t2317 * t2435 + t2519;
t2279 = t2317 * t2432 + t2517;
t2254 = -t2277 * t2424 + t2279 * t2427;
t2463 = t2254 * t2433 - t2516;
t2318 = t2384 * t2392 - t2451;
t2281 = -t2318 * t2435 + t2519;
t2283 = t2318 * t2432 + t2517;
t2258 = -t2281 * t2424 + t2283 * t2427;
t2461 = t2258 * t2433 - t2516;
t2332 = t2424 * t2515 + t2478;
t2300 = -t2332 * t2424 + t2333 * t2427;
t2460 = t2300 * t2433 - t2354 * t2436;
t2364 = -t2495 - t2497;
t2368 = qJDD(4) - t2482;
t2334 = t2364 * t2432 + t2368 * t2435;
t2335 = t2364 * t2435 - t2368 * t2432;
t2302 = -t2334 * t2424 + t2335 * t2427;
t2459 = t2302 * t2433 - t2370 * t2436;
t2336 = -t2432 * t2470 - t2435 * t2500;
t2337 = t2432 * t2500 - t2435 * t2470;
t2308 = -t2336 * t2424 + t2337 * t2427;
t2351 = -t2494 - t2495;
t2458 = t2308 * t2433 - t2351 * t2436;
t2369 = -qJDD(4) - t2482;
t2387 = -t2494 - t2497;
t2345 = t2369 * t2432 + t2387 * t2435;
t2346 = t2369 * t2435 - t2387 * t2432;
t2314 = -t2345 * t2424 + t2346 * t2427;
t2371 = t2500 - 0.2e1 * t2483;
t2457 = t2314 * t2433 - t2371 * t2436;
t2456 = t2361 * t2433 - t2436 * t2471;
t2404 = t2476 * qJDD(2);
t2455 = t2404 * t2433 + t2405 * t2436;
t2453 = qJDD(2) * t2436 - t2433 * t2437;
t2407 = -qJDD(2) * t2433 - t2436 * t2437;
t2402 = t2424 * t2405;
t2450 = t2402 * t2433 - t2436 * t2475;
t2403 = t2427 * t2405;
t2449 = -t2403 * t2433 + t2417 * t2436;
t2410 = t2424 * t2437 * t2427;
t2397 = t2453 * t2429;
t2396 = t2407 * t2429;
t2395 = t2453 * t2426;
t2394 = t2407 * t2426;
t2380 = -t2403 * t2436 - t2417 * t2433;
t2379 = t2402 * t2436 + t2433 * t2475;
t2377 = t2404 * t2436 - t2405 * t2433;
t2376 = t2449 * t2429;
t2375 = t2450 * t2429;
t2374 = t2449 * t2426;
t2373 = t2450 * t2426;
t2367 = t2455 * t2429;
t2366 = t2455 * t2426;
t2331 = t2361 * t2436 + t2433 * t2471;
t2316 = -t2386 * t2426 + t2429 * t2456;
t2315 = t2386 * t2429 + t2426 * t2456;
t2313 = t2345 * t2427 + t2346 * t2424;
t2307 = t2336 * t2427 + t2337 * t2424;
t2301 = t2334 * t2427 + t2335 * t2424;
t2299 = t2332 * t2427 + t2333 * t2424;
t2298 = t2314 * t2436 + t2371 * t2433;
t2293 = t2302 * t2436 + t2370 * t2433;
t2292 = t2308 * t2436 + t2351 * t2433;
t2291 = t2300 * t2436 + t2354 * t2433;
t2275 = -t2313 * t2426 + t2429 * t2457;
t2274 = t2313 * t2429 + t2426 * t2457;
t2269 = -t2426 * t2301 + t2429 * t2459;
t2268 = t2429 * t2301 + t2426 * t2459;
t2267 = -t2426 * t2307 + t2429 * t2458;
t2266 = t2429 * t2307 + t2426 * t2458;
t2263 = -t2426 * t2299 + t2429 * t2460;
t2262 = t2429 * t2299 + t2426 * t2460;
t2256 = t2281 * t2427 + t2283 * t2424;
t2252 = t2277 * t2427 + t2279 * t2424;
t2244 = t2258 * t2436 + t2518;
t2242 = t2254 * t2436 + t2518;
t2239 = t2264 * t2427 + t2265 * t2424;
t2238 = t2240 * t2436 + t2344 * t2433;
t2229 = -t2426 * t2256 + t2429 * t2461;
t2227 = t2429 * t2256 + t2426 * t2461;
t2225 = -t2426 * t2252 + t2429 * t2463;
t2223 = t2429 * t2252 + t2426 * t2463;
t2215 = -t2426 * t2239 + t2429 * t2467;
t2214 = t2429 * t2239 + t2426 * t2467;
t2212 = t2232 * t2427 + t2233 * t2424;
t2211 = t2213 * t2436 + t2236 * t2433;
t2209 = t2216 * t2427 + t2217 * t2424;
t2208 = t2210 * t2436 + t2230 * t2433;
t2207 = -t2426 * t2212 + t2429 * t2468;
t2206 = t2429 * t2212 + t2426 * t2468;
t2205 = -t2426 * t2209 + t2429 * t2469;
t2204 = t2429 * t2209 + t2426 * t2469;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2428 * t2408 - t2425 * t2472, 0, 0, 0, 0, 0, 0, -t2397 * t2425 + t2407 * t2428, -t2396 * t2425 - t2428 * t2453, 0, -t2316 * t2425 + t2331 * t2428, 0, 0, 0, 0, 0, 0, -t2376 * t2425 + t2380 * t2428, -t2375 * t2425 + t2379 * t2428, -t2367 * t2425 + t2377 * t2428, -t2263 * t2425 + t2291 * t2428, 0, 0, 0, 0, 0, 0, -t2269 * t2425 + t2293 * t2428, -t2275 * t2425 + t2298 * t2428, -t2267 * t2425 + t2292 * t2428, -t2215 * t2425 + t2238 * t2428, 0, 0, 0, 0, 0, 0, -t2225 * t2425 + t2242 * t2428, -t2539, t2533, -t2207 * t2425 + t2211 * t2428, 0, 0, 0, 0, 0, 0, -t2229 * t2425 + t2244 * t2428, t2533, t2539, -t2205 * t2425 + t2208 * t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2425 * t2408 + t2428 * t2472, 0, 0, 0, 0, 0, 0, t2397 * t2428 + t2407 * t2425, t2396 * t2428 - t2425 * t2453, 0, t2316 * t2428 + t2331 * t2425, 0, 0, 0, 0, 0, 0, t2376 * t2428 + t2380 * t2425, t2375 * t2428 + t2379 * t2425, t2367 * t2428 + t2377 * t2425, t2263 * t2428 + t2291 * t2425, 0, 0, 0, 0, 0, 0, t2269 * t2428 + t2293 * t2425, t2275 * t2428 + t2298 * t2425, t2267 * t2428 + t2292 * t2425, t2215 * t2428 + t2238 * t2425, 0, 0, 0, 0, 0, 0, t2225 * t2428 + t2242 * t2425, t2538, t2532, t2207 * t2428 + t2211 * t2425, 0, 0, 0, 0, 0, 0, t2229 * t2428 + t2244 * t2425, t2532, -t2538, t2205 * t2428 + t2208 * t2425; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2492, 0, 0, 0, 0, 0, 0, t2395, t2394, 0, t2315, 0, 0, 0, 0, 0, 0, t2374, t2373, t2366, t2262, 0, 0, 0, 0, 0, 0, t2268, t2274, t2266, t2214, 0, 0, 0, 0, 0, 0, t2223, t2226, t2529, t2206, 0, 0, 0, 0, 0, 0, t2227, t2529, -t2226, t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2408, 0, 0, 0, 0, 0, 0, t2407, -t2453, 0, t2331, 0, 0, 0, 0, 0, 0, t2380, t2379, t2377, t2291, 0, 0, 0, 0, 0, 0, t2293, t2298, t2292, t2238, 0, 0, 0, 0, 0, 0, t2242, t2243, t2524, t2211, 0, 0, 0, 0, 0, 0, t2244, t2524, -t2243, t2208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2472, 0, 0, 0, 0, 0, 0, t2397, t2396, 0, t2316, 0, 0, 0, 0, 0, 0, t2376, t2375, t2367, t2263, 0, 0, 0, 0, 0, 0, t2269, t2275, t2267, t2215, 0, 0, 0, 0, 0, 0, t2225, t2228, t2528, t2207, 0, 0, 0, 0, 0, 0, t2229, t2528, -t2228, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2492, 0, 0, 0, 0, 0, 0, t2395, t2394, 0, t2315, 0, 0, 0, 0, 0, 0, t2374, t2373, t2366, t2262, 0, 0, 0, 0, 0, 0, t2268, t2274, t2266, t2214, 0, 0, 0, 0, 0, 0, t2223, t2226, t2529, t2206, 0, 0, 0, 0, 0, 0, t2227, t2529, -t2226, t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2437, -qJDD(2), 0, t2361, 0, 0, 0, 0, 0, 0, -t2403, t2402, t2404, t2300, 0, 0, 0, 0, 0, 0, t2302, t2314, t2308, t2240, 0, 0, 0, 0, 0, 0, t2254, t2257, t2520, t2213, 0, 0, 0, 0, 0, 0, t2258, t2520, -t2257, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2437, 0, -t2471, 0, 0, 0, 0, 0, 0, t2417, -t2475, t2405, -t2354, 0, 0, 0, 0, 0, 0, -t2370, -t2371, -t2351, -t2344, 0, 0, 0, 0, 0, 0, -t2507, t2303, -t2499, -t2236, 0, 0, 0, 0, 0, 0, -t2507, -t2499, -t2303, -t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2386, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, 0, 0, 0, 0, 0, 0, t2301, t2313, t2307, t2239, 0, 0, 0, 0, 0, 0, t2252, -t2251, t2521, t2212, 0, 0, 0, 0, 0, 0, t2256, t2521, t2251, t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2479, t2410, t2417, t2333, 0, 0, 0, 0, 0, 0, t2335, t2346, t2337, t2265, 0, 0, 0, 0, 0, 0, t2279, -t2278, t2514, t2233, 0, 0, 0, 0, 0, 0, t2283, t2514, t2278, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2410, -t2480, -t2475, t2332, 0, 0, 0, 0, 0, 0, t2334, t2345, t2336, t2264, 0, 0, 0, 0, 0, 0, t2277, -t2276, t2513, t2232, 0, 0, 0, 0, 0, 0, t2281, t2513, t2276, t2216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2417, t2475, -t2405, t2354, 0, 0, 0, 0, 0, 0, t2370, t2371, t2351, t2344, 0, 0, 0, 0, 0, 0, t2507, -t2303, t2499, t2236, 0, 0, 0, 0, 0, 0, t2507, t2499, t2303, t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, t2369, -t2470, t2295, 0, 0, 0, 0, 0, 0, t2506, -t2305, t2498, t2237, 0, 0, 0, 0, 0, 0, t2506, t2498, t2305, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2368, t2387, -t2500, t2294, 0, 0, 0, 0, 0, 0, -t2317, -t2443, t2339, -t2285, 0, 0, 0, 0, 0, 0, -t2318, t2339, t2443, -t2259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2370, t2371, t2351, t2344, 0, 0, 0, 0, 0, 0, t2507, -t2303, t2499, t2236, 0, 0, 0, 0, 0, 0, t2507, t2499, t2303, t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, -t2328, t2447, t2261, 0, 0, 0, 0, 0, 0, t2501, t2447, t2328, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2329, t2503, -t2321, t2260, 0, 0, 0, 0, 0, 0, t2329, -t2321, -t2503, -t2250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2443, -t2339, t2285, 0, 0, 0, 0, 0, 0, t2318, -t2339, -t2443, t2259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, t2447, t2328, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2318, -t2339, -t2443, t2259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2329, t2321, t2503, t2250;];
f_new_reg  = t1;
