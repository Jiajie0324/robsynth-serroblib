% Calculate minimal parameter regressor of coriolis matrix for
% S6PPRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d6,theta1,theta2]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x23]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PPRRPR2_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRPR2_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRPR2_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRPR2_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:50:57
% EndTime: 2019-03-08 18:51:03
% DurationCPUTime: 2.48s
% Computational Cost: add. (1931->246), mult. (5841->419), div. (0->0), fcn. (6648->12), ass. (0->203)
t165 = sin(pkin(7));
t282 = sin(pkin(6));
t208 = cos(pkin(12)) * t282;
t283 = cos(pkin(7));
t284 = cos(pkin(6));
t298 = t284 * t165 + t283 * t208;
t170 = cos(qJ(4));
t171 = -pkin(4) - pkin(10);
t167 = sin(qJ(4));
t272 = t167 * qJ(5);
t202 = -t170 * t171 + t272;
t166 = sin(qJ(6));
t160 = t166 ^ 2;
t169 = cos(qJ(6));
t162 = t169 ^ 2;
t146 = t160 - t162;
t243 = t170 * qJD(3);
t231 = t169 * t243;
t181 = t146 * qJD(4) + 0.2e1 * t166 * t231;
t255 = qJD(5) * t170;
t297 = qJD(4) * t202 - t255;
t296 = pkin(5) + pkin(9);
t295 = -t167 / 0.2e1;
t294 = t167 / 0.2e1;
t293 = -t170 / 0.2e1;
t292 = t170 / 0.2e1;
t291 = cos(qJ(3));
t159 = pkin(4) * t167;
t172 = -t165 * t208 + t284 * t283;
t168 = sin(qJ(3));
t219 = sin(pkin(12)) * t282;
t92 = t298 * t168 + t291 * t219;
t60 = t92 * t167 - t170 * t172;
t290 = t60 * t167;
t61 = t167 * t172 + t92 * t170;
t289 = t61 * t170;
t91 = t168 * t219 - t298 * t291;
t288 = t91 * t169;
t287 = t92 * t166;
t286 = t92 * t169;
t281 = qJ(5) * t170;
t143 = t296 * t170;
t280 = t143 * t166;
t279 = t165 * t168;
t140 = t159 - t281;
t119 = t167 * pkin(10) + t140;
t278 = t166 * t119;
t142 = t296 * t167;
t277 = t166 * t142;
t163 = t170 ^ 2;
t276 = t166 * t163;
t275 = t166 * t167;
t274 = t166 * t168;
t273 = t166 * t170;
t271 = t168 * t169;
t270 = t169 * t119;
t269 = t169 * t142;
t268 = t169 * t170;
t117 = -pkin(3) - t202;
t93 = t166 * t117 - t269;
t23 = (-t93 - t269) * t170 - t278 * t167;
t267 = t23 * qJD(3);
t94 = t169 * t117 + t277;
t24 = (t270 + t280) * t167 - t143 * t275 + (t94 - t277) * t170;
t266 = t24 * qJD(3);
t207 = -t170 * pkin(4) - t272;
t135 = -pkin(3) + t207;
t96 = t135 * t170 + t140 * t167;
t265 = t96 * qJD(3);
t97 = -t135 * t167 + t140 * t170;
t264 = t97 * qJD(3);
t161 = t167 ^ 2;
t147 = t163 - t161;
t263 = qJD(3) * t165;
t262 = qJD(3) * t167;
t261 = qJD(3) * t168;
t260 = qJD(3) * t169;
t259 = qJD(4) * qJ(5);
t258 = qJD(4) * t167;
t158 = qJD(4) * t170;
t257 = qJD(5) * t167;
t256 = qJD(5) * t169;
t254 = qJD(6) * t166;
t253 = qJD(6) * t167;
t252 = qJD(6) * t169;
t251 = qJD(6) * t171;
t127 = t147 * t166;
t250 = t127 * qJD(3);
t129 = t147 * t169;
t249 = t129 * qJD(3);
t248 = t147 * qJD(3);
t247 = t161 * qJD(3);
t246 = t161 * qJD(5);
t245 = t166 * qJD(4);
t244 = t169 * qJD(4);
t242 = pkin(3) * t262;
t241 = pkin(3) * t243;
t240 = pkin(9) * t258;
t239 = t91 * t275;
t238 = t167 * t288;
t237 = t165 * t291;
t236 = t167 * t291;
t235 = t169 * t291;
t234 = t170 * t291;
t233 = t291 * t140;
t232 = t291 * t163;
t230 = t166 * t253;
t229 = t167 * t252;
t228 = t135 * t262;
t227 = t170 * t245;
t152 = t167 * t158;
t151 = t167 * t243;
t226 = t166 * t252;
t225 = t166 * t244;
t224 = -t281 / 0.2e1;
t223 = -t273 / 0.2e1;
t222 = t273 / 0.2e1;
t221 = -t268 / 0.2e1;
t220 = qJD(4) * t291;
t218 = (-t161 - t163) * t91;
t216 = qJD(6) + t262;
t215 = t165 * t236;
t214 = t167 * t235;
t212 = t170 * t225;
t211 = qJD(3) * t237;
t210 = -t236 / 0.2e1;
t209 = t234 / 0.2e1;
t114 = t167 * t279 - t170 * t283;
t115 = t167 * t283 + t170 * t279;
t194 = t114 * t294 + t115 * t292;
t2 = t194 * t91 + (t92 * t291 / 0.2e1 - t91 * t168 / 0.2e1 - t61 * t234 / 0.2e1 + t60 * t210) * t165;
t4 = (-t289 + t92 - t290) * t91;
t206 = t4 * qJD(1) - t2 * qJD(2);
t205 = t91 * t166 - t60 * t169;
t204 = t60 * t166 + t288;
t59 = -t114 * t215 + (-t115 * t234 + t168 * t237) * t165;
t203 = -t2 * qJD(1) - t59 * qJD(2);
t41 = t91 * t167;
t201 = t41 * qJD(3) - t61 * qJD(4);
t43 = t91 * t170;
t200 = t43 * qJD(3) + t60 * qJD(4);
t199 = t165 * t209;
t198 = -t247 - t253;
t197 = t224 + t159 / 0.2e1;
t196 = t43 * qJD(4) + t92 * t262;
t195 = -t41 * qJD(4) + t92 * t243;
t193 = t171 * t295 + t224;
t178 = t119 / 0.2e1 + t193;
t86 = t178 * t169;
t192 = qJ(5) * t245 - t86 * qJD(3);
t85 = t178 * t166;
t191 = -qJ(5) * t244 - t85 * qJD(3);
t190 = t216 * t273;
t118 = (t162 / 0.2e1 - t160 / 0.2e1) * t170;
t189 = t118 * qJD(3) + t225;
t187 = t169 * t114 + t166 * t237;
t186 = -t166 * t114 + t165 * t235;
t185 = t291 * t161 + t232;
t184 = -t92 / 0.2e1 + t290 / 0.2e1 + t289 / 0.2e1;
t183 = -t118 * qJD(4) + t260 * t276;
t128 = t146 * t163;
t182 = -t128 * qJD(3) + 0.2e1 * t212;
t175 = -t279 / 0.2e1 + t194;
t27 = t175 * t166;
t65 = -t143 * t273 - t94 * t167;
t7 = t184 * t166;
t180 = -t7 * qJD(1) - t27 * qJD(2) + t65 * qJD(3);
t28 = t175 * t169;
t64 = t143 * t268 - t93 * t167;
t8 = t184 * t169;
t179 = -t8 * qJD(1) - t28 * qJD(2) - t64 * qJD(3);
t177 = -t114 * qJD(4) + t170 * t211;
t95 = t115 * qJD(4) + t167 * t211;
t173 = pkin(4) * t210 + qJ(5) * t209;
t25 = (t233 / 0.2e1 + t173) * t165;
t5 = (-t140 / 0.2e1 + t197) * t91;
t176 = t135 * t140 * qJD(3) - t5 * qJD(1) - t25 * qJD(2);
t174 = t207 * qJD(4) + t255;
t157 = pkin(9) * t158;
t156 = t158 / 0.2e1;
t154 = t170 * t244;
t153 = t167 * t260;
t150 = t166 * t262;
t126 = -t153 - t252;
t125 = -t150 - t254;
t120 = qJD(6) * t292 + t151;
t113 = t118 * qJD(6);
t106 = (t167 * t220 + t168 * t243) * t165;
t105 = (t167 * t261 - t170 * t220) * t165;
t67 = -t280 - t270 / 0.2e1 + t193 * t169;
t66 = t143 * t169 - t278 / 0.2e1 + t193 * t166;
t47 = t114 * t222 + t169 * t199 + t186 * t292;
t46 = t114 * t221 + t166 * t199 + t187 * t292;
t30 = t186 * t294 + t115 * t223 + (-t274 / 0.2e1 + t214 / 0.2e1) * t165;
t29 = t187 * t295 + t115 * t221 + (-t271 / 0.2e1 + t166 * t210) * t165;
t26 = (-t233 / 0.2e1 + t173) * t165;
t15 = t204 * t293 + t91 * t221 + t60 * t222;
t14 = t205 * t293 + t60 * t221 + t91 * t223;
t10 = t204 * t295 + t61 * t223 - t287 / 0.2e1 - t238 / 0.2e1;
t9 = t205 * t294 + t61 * t221 - t286 / 0.2e1 + t239 / 0.2e1;
t6 = (t140 / 0.2e1 + t197) * t91;
t1 = t2 * qJD(3);
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -t92 * qJD(3), t91 * qJD(3), 0, 0, 0, 0, 0, -t195, t196, qJD(3) * t218, t195, -t196 (pkin(9) * t218 + t92 * t135) * qJD(3) + t6 * qJD(4) - t41 * qJD(5) + t206, 0, 0, 0, 0, 0 ((-t238 - t287) * t167 - t163 * t288) * qJD(3) + t14 * qJD(4) + t10 * qJD(6) (-(-t239 + t286) * t167 + t91 * t276) * qJD(3) + t15 * qJD(4) + t9 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, t200, 0, -t201, -t200, t6 * qJD(3) + (-t61 * pkin(4) - t60 * qJ(5)) * qJD(4) + t61 * qJD(5), 0, 0, 0, 0, 0, t14 * qJD(3) - t245 * t60 + t252 * t61, t15 * qJD(3) - t244 * t60 - t254 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t201, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * qJD(3) - qJD(6) * t204 + t244 * t61, t9 * qJD(3) + qJD(6) * t205 - t245 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -t165 * t261, -t211, 0, 0, 0, 0, 0, -t106, t105, t185 * t263, t106, -t105 (pkin(9) * t185 + t135 * t168) * t263 + t26 * qJD(4) + qJD(5) * t215 + t203, 0, 0, 0, 0, 0 ((t214 - t274) * t167 + t169 * t232) * t263 + t46 * qJD(4) + t30 * qJD(6) (-(t166 * t236 + t271) * t167 - t166 * t232) * t263 + t47 * qJD(4) + t29 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t177, 0, t95, t177, t26 * qJD(3) + (-t115 * pkin(4) - t114 * qJ(5)) * qJD(4) + t115 * qJD(5), 0, 0, 0, 0, 0, t46 * qJD(3) - t114 * t245 + t115 * t252, t47 * qJD(3) - t114 * t244 - t115 * t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30 * qJD(3) + qJD(6) * t186 + t115 * t244, t29 * qJD(3) - qJD(6) * t187 - t115 * t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5 * qJD(4) - t206, 0, 0, 0, 0, 0, -t7 * qJD(6), -t8 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25 * qJD(4) - t203, 0, 0, 0, 0, 0, -t27 * qJD(6), -t28 * qJD(6); 0, 0, 0, 0, 0, t152, t147 * qJD(4), 0, 0, 0, -pkin(3) * t258, -pkin(3) * t158, 0, t97 * qJD(4) - t167 * t255, -t96 * qJD(4) + t246 (qJD(4) * t140 - t257) * t135, -t152 * t160 + t163 * t226, -t128 * qJD(6) - 0.2e1 * t167 * t212, -t127 * qJD(4) - t170 * t229, -t129 * qJD(4) + t170 * t230, t152, t23 * qJD(4) + t65 * qJD(6) + t166 * t246, -t24 * qJD(4) - t64 * qJD(6) + t169 * t246; 0, 0, 0, 0, 0, t151, t248, t158, -t258, 0, -t157 - t242, t240 - t241, t174, t264 + t157, -t240 - t265, pkin(9) * t174 + t176, -t113 + (-t160 * t243 + t225) * t167, -t181 * t167 + 0.2e1 * t170 * t226, t154 - t250, -t227 - t249, t120, t66 * qJD(6) - t142 * t245 - t297 * t169 + t267, t67 * qJD(6) - t142 * t244 + t297 * t166 - t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, -t151, t247, -t228 + t157, 0, 0, 0, 0, 0, t166 * t247 + t154, t169 * t247 - t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, t182, -t216 * t268, t190, t156, t66 * qJD(4) - t94 * qJD(6) + t180, t67 * qJD(4) + t93 * qJD(6) + t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, -t151, -t248, 0, 0, 0, t242, t241, 0, -t264, t265, -t176, t151 * t160 - t113, 0.2e1 * t169 * t190, -t230 + t250, -t229 + t249, -t120, t85 * qJD(6) - t267, t86 * qJD(6) + t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), qJ(5) * qJD(5), -t226, t146 * qJD(6), 0, 0, 0, qJ(5) * t252 + qJD(5) * t166, -qJ(5) * t254 + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t259, 0, 0, 0, 0, 0, t245, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189, t181, t125, t126, -t243 / 0.2e1, -t166 * t251 - t191, -t169 * t251 - t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, -t247, t228, 0, 0, 0, 0, 0, t198 * t166, t198 * t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4), -t259, 0, 0, 0, 0, 0, -t245, -t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * qJD(3), t8 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 * qJD(3), t28 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t182 (t231 + t245) * t167 (-t166 * t243 + t244) * t167, t156, -t85 * qJD(4) + t166 * t257 - t180, -t86 * qJD(4) + t167 * t256 - t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, -t181, t150, t153, t243 / 0.2e1, t191, t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t3;
