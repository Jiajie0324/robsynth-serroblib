% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PPRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d6,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 20:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PPRRPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:17:44
% EndTime: 2019-05-04 20:18:37
% DurationCPUTime: 50.58s
% Computational Cost: add. (131229->833), mult. (247570->1315), div. (0->0), fcn. (189404->14), ass. (0->623)
t768 = sin(qJ(4));
t753 = t768 ^ 2;
t774 = qJD(3) ^ 2;
t747 = t753 * t774;
t773 = qJD(4) ^ 2;
t735 = -t747 - t773;
t771 = cos(qJ(4));
t895 = t768 * t771 * t774;
t732 = qJDD(4) - t895;
t933 = t732 * t768;
t676 = -t735 * t771 + t933;
t759 = sin(pkin(7));
t763 = cos(pkin(7));
t914 = t771 * t732;
t684 = t735 * t768 + t914;
t904 = qJD(3) * qJD(4);
t887 = t771 * t904;
t903 = qJDD(3) * t768;
t720 = 0.2e1 * t887 + t903;
t769 = sin(qJ(3));
t772 = cos(qJ(3));
t828 = t684 * t769 + t720 * t772;
t576 = t763 * t676 + t759 * t828;
t760 = sin(pkin(6));
t764 = cos(pkin(6));
t580 = -t759 * t676 + t763 * t828;
t632 = t684 * t772 - t720 * t769;
t757 = sin(pkin(12));
t761 = cos(pkin(12));
t842 = t580 * t761 + t632 * t757;
t483 = -t760 * t576 + t764 * t842;
t534 = t580 * t757 - t632 * t761;
t758 = sin(pkin(11));
t762 = cos(pkin(11));
t423 = t483 * t762 - t534 * t758;
t1035 = qJ(1) * t423;
t428 = t483 * t758 + t534 * t762;
t1034 = qJ(1) * t428;
t754 = t771 ^ 2;
t749 = t754 * t774;
t737 = -t749 - t773;
t731 = qJDD(4) + t895;
t915 = t771 * t731;
t672 = t737 * t768 + t915;
t934 = t731 * t768;
t681 = -t737 * t771 + t934;
t888 = t768 * t904;
t901 = qJDD(3) * t771;
t723 = -0.2e1 * t888 + t901;
t829 = t681 * t769 - t723 * t772;
t575 = -t763 * t672 + t759 * t829;
t579 = t759 * t672 + t763 * t829;
t631 = t681 * t772 + t723 * t769;
t843 = t579 * t761 + t631 * t757;
t482 = -t760 * t575 + t764 * t843;
t531 = t579 * t757 - t631 * t761;
t422 = t482 * t762 - t531 * t758;
t1033 = qJ(1) * t422;
t425 = t482 * t758 + t531 * t762;
t1032 = qJ(1) * t425;
t479 = t764 * t576 + t760 * t842;
t1031 = qJ(2) * (t479 * t760 + t483 * t764);
t1030 = pkin(1) * t479;
t1029 = pkin(1) * t483;
t478 = t764 * t575 + t760 * t843;
t1028 = qJ(2) * (t478 * t760 + t482 * t764);
t734 = -t747 + t773;
t675 = t734 * t771 + t934;
t683 = -t734 * t768 + t915;
t900 = qJDD(3) * t772;
t814 = t683 * t769 - t768 * t900;
t593 = t763 * t675 + t759 * t814;
t597 = -t759 * t675 + t763 * t814;
t902 = qJDD(3) * t769;
t642 = t683 * t772 + t768 * t902;
t838 = t597 * t761 + t642 * t757;
t496 = -t760 * t593 + t764 * t838;
t552 = t597 * t757 - t642 * t761;
t1027 = t496 * t758 + t552 * t762;
t1026 = t496 * t762 - t552 * t758;
t1024 = pkin(1) * t478;
t1023 = pkin(1) * t482;
t736 = t749 - t773;
t671 = t736 * t768 + t914;
t682 = -t736 * t771 + t933;
t815 = t682 * t769 + t771 * t900;
t592 = -t763 * t671 + t759 * t815;
t596 = t759 * t671 + t763 * t815;
t641 = t682 * t772 - t769 * t901;
t839 = t596 * t761 + t641 * t757;
t495 = -t760 * t592 + t764 * t839;
t549 = t596 * t757 - t641 * t761;
t1022 = t495 * t758 + t549 * t762;
t1021 = t495 * t762 - t549 * t758;
t1019 = qJ(2) * t534;
t1014 = t764 * t593 + t760 * t838;
t1013 = pkin(8) * (t576 * t759 + t580 * t763);
t1012 = qJ(2) * t531;
t1007 = t764 * t592 + t760 * t839;
t1006 = pkin(2) * t576;
t1005 = pkin(2) * t580;
t1004 = pkin(8) * (t575 * t759 + t579 * t763);
t998 = pkin(2) * t575;
t997 = pkin(2) * t579;
t991 = pkin(8) * t632;
t986 = pkin(8) * t631;
t981 = pkin(3) * t672;
t980 = pkin(9) * t672;
t979 = pkin(9) * t684;
t823 = t772 * t774 + t902;
t694 = t823 * t759;
t696 = t823 * t763;
t726 = -t769 * t774 + t900;
t826 = t696 * t761 + t726 * t757;
t616 = -t760 * t694 + t764 * t826;
t650 = t696 * t757 - t726 * t761;
t559 = t616 * t758 + t650 * t762;
t974 = t616 * t762 - t650 * t758;
t973 = pkin(3) * t676;
t972 = pkin(9) * t676;
t971 = pkin(9) * t681;
t767 = sin(qJ(6));
t770 = cos(qJ(6));
t905 = qJD(3) * t771;
t714 = qJD(4) * t767 + t770 * t905;
t716 = qJD(4) * t770 - t767 * t905;
t668 = t716 * t714;
t721 = t887 + t903;
t706 = qJDD(6) + t721;
t957 = -t668 + t706;
t964 = t767 * t957;
t963 = t770 * t957;
t962 = t721 + t887;
t730 = g(1) * t762 + g(2) * t758;
t912 = g(3) - qJDD(1);
t883 = t760 * t912;
t884 = g(1) * t758 - t762 * g(2);
t779 = t764 * t884 - t883;
t635 = -t757 * t730 - t761 * t779;
t898 = -t760 * t884 + qJDD(2);
t817 = t764 * t912 - t898;
t961 = t763 * t635 + t759 * t817;
t786 = t757 * t817;
t960 = t758 * t912;
t959 = t761 * t817;
t958 = t762 * t912;
t665 = -t762 * t730 - t758 * t884;
t956 = t764 * t694 + t760 * t826;
t664 = -t758 * t730 + t762 * t884;
t636 = -t761 * t730 + t757 * t779;
t541 = t772 * t636 - t769 * t961;
t536 = -t774 * pkin(3) + qJDD(3) * pkin(9) + t541;
t590 = -t635 * t759 + t763 * t817;
t490 = t768 * t536 + t771 * t590;
t946 = qJ(5) * t768;
t952 = pkin(4) * t771;
t877 = -t946 - t952;
t718 = t877 * qJD(3);
t906 = qJD(3) * t768;
t819 = -qJDD(4) * pkin(4) - t773 * qJ(5) + t718 * t906 + qJDD(5) + t490;
t449 = -t731 * pkin(10) + (t721 - t887) * pkin(5) + t819;
t722 = -t888 + t901;
t733 = pkin(5) * t906 - qJD(4) * pkin(10);
t540 = t769 * t636 + t772 * t961;
t535 = -qJDD(3) * pkin(3) - t774 * pkin(9) + t540;
t777 = -t722 * pkin(4) - qJ(5) * t962 + t535;
t954 = -2 * qJD(5);
t882 = pkin(4) * qJD(4) + t954;
t489 = -pkin(5) * t749 - t722 * pkin(10) + (-t733 + t882) * t906 + t777;
t402 = t449 * t767 + t489 * t770;
t881 = t449 * t770 - t767 * t489;
t348 = t770 * t402 - t767 * t881;
t347 = t767 * t402 + t770 * t881;
t705 = t714 ^ 2;
t955 = t716 ^ 2;
t741 = qJD(6) + t906;
t738 = t741 ^ 2;
t953 = pkin(4) + pkin(10);
t951 = pkin(8) * t759;
t950 = pkin(8) * t763;
t907 = t753 + t754;
t725 = t907 * qJDD(3);
t728 = t747 + t749;
t824 = t725 * t769 + t728 * t772;
t653 = t824 * t759;
t654 = t824 * t763;
t661 = t725 * t772 - t728 * t769;
t833 = t654 * t761 + t661 * t757;
t556 = -t760 * t653 + t764 * t833;
t603 = -t654 * t757 + t661 * t761;
t503 = t556 * t762 + t603 * t758;
t949 = qJ(1) * t503;
t948 = qJ(2) * t760;
t947 = qJ(2) * t764;
t910 = -t771 * t536 + t768 * t590;
t413 = t490 * t771 + t768 * t910;
t945 = t413 * t769;
t944 = t535 * t768;
t943 = t535 * t771;
t639 = t668 + t706;
t942 = t639 * t770;
t941 = t714 * t741;
t940 = t720 * t768;
t936 = t723 * t771;
t928 = t741 * t767;
t927 = t741 * t770;
t925 = t759 * t761;
t811 = t773 * pkin(4) - t718 * t905 + t910;
t899 = qJDD(4) * qJ(5);
t448 = t899 + t722 * pkin(5) - pkin(10) * t749 + ((2 * qJD(5)) + t733) * qJD(4) - t811;
t920 = t767 * t448;
t919 = t767 * t639;
t918 = t769 * t590;
t916 = t770 * t448;
t913 = t772 * t590;
t911 = pkin(1) * t556 + t603 * t948;
t909 = pkin(2) * t654 + t661 * t951;
t908 = pkin(3) * t728 + pkin(9) * t725;
t897 = t768 * t668;
t896 = t771 * t668;
t647 = -t714 * qJD(6) + t770 * qJDD(4) - t767 * t722;
t894 = -t738 - t955;
t893 = qJDD(3) * t757 * t759;
t555 = t764 * t653 + t760 * t833;
t886 = -pkin(1) * t555 + t603 * t947;
t885 = -pkin(2) * t653 + t661 * t950;
t414 = t490 * t768 - t771 * t910;
t880 = t767 * qJDD(4) + t770 * t722;
t879 = t769 * t895;
t878 = t772 * t895;
t876 = pkin(4) * t768 - qJ(5) * t771;
t875 = -pkin(8) * t726 - t918;
t874 = -pkin(8) * t823 + t913;
t333 = -t347 * t771 + t448 * t768;
t334 = t347 * t768 + t448 * t771;
t872 = t334 * t769 - t348 * t772;
t285 = -t759 * t333 + t763 * t872;
t304 = t334 * t772 + t348 * t769;
t873 = t285 * t761 + t304 * t757;
t778 = qJD(4) * t954 + t811;
t469 = -t778 + t899;
t405 = t469 * t768 - t771 * t819;
t406 = t469 * t771 + t768 * t819;
t507 = t882 * t906 + t777;
t865 = t406 * t769 - t507 * t772;
t337 = -t759 * t405 + t763 * t865;
t375 = t406 * t772 + t507 * t769;
t871 = t337 * t761 + t375 * t757;
t459 = pkin(4) * t728 + t469;
t461 = qJ(5) * t728 + t819;
t393 = t459 * t771 + t461 * t768 + t908;
t396 = -t459 * t768 + t461 * t771;
t717 = t876 * qJDD(3);
t867 = t396 * t769 + t717 * t772;
t339 = -t759 * t393 + t763 * t867 + t885;
t818 = (-t653 * t759 - t654 * t763) * pkin(8);
t382 = t772 * t396 - t769 * t717 + t818;
t870 = t339 * t761 + t382 * t757;
t863 = t414 * t769 - t535 * t772;
t346 = t413 * t759 + t763 * t863;
t390 = t414 * t772 + t535 * t769;
t869 = t346 * t761 + t390 * t757;
t411 = t414 + t908;
t350 = -t411 * t759 + t763 * t945 + t885;
t395 = t772 * t413 + t818;
t868 = t350 * t761 + t395 * t757;
t781 = (-qJD(6) + t741) * t716 - t880;
t820 = t647 + t941;
t542 = t767 * t781 - t770 * t820;
t637 = -t705 - t955;
t510 = -t542 * t771 + t637 * t768;
t511 = t542 * t768 + t637 * t771;
t544 = t767 * t820 + t770 * t781;
t853 = t511 * t769 - t544 * t772;
t404 = -t759 * t510 + t763 * t853;
t440 = t511 * t772 + t544 * t769;
t866 = t404 * t761 + t440 * t757;
t621 = (qJD(6) + t741) * t716 + t880;
t821 = t647 - t941;
t543 = t621 * t767 - t770 * t821;
t666 = -t705 + t955;
t518 = t543 * t771 + t666 * t768;
t519 = -t543 * t768 + t666 * t771;
t545 = t621 * t770 + t767 * t821;
t852 = t519 * t769 + t545 * t772;
t408 = -t759 * t518 + t763 * t852;
t441 = t519 * t772 - t545 * t769;
t864 = t408 * t761 + t441 * t757;
t652 = -t738 - t705;
t572 = t767 * t652 + t963;
t521 = -t572 * t771 + t621 * t768;
t522 = t572 * t768 + t621 * t771;
t573 = t652 * t770 - t964;
t851 = t522 * t769 - t573 * t772;
t418 = -t759 * t521 + t763 * t851;
t468 = t522 * t772 + t573 * t769;
t862 = t418 * t761 + t468 * t757;
t582 = t770 * t894 - t919;
t523 = -t582 * t771 + t768 * t821;
t524 = t582 * t768 + t771 * t821;
t583 = -t767 * t894 - t942;
t850 = t524 * t769 - t583 * t772;
t420 = -t759 * t523 + t763 * t850;
t473 = t524 * t772 + t583 * t769;
t861 = t420 * t761 + t473 * t757;
t690 = t705 - t738;
t605 = -t690 * t767 - t942;
t525 = t605 * t771 + t768 * t781;
t527 = -t605 * t768 + t771 * t781;
t607 = -t690 * t770 + t919;
t849 = t527 * t769 + t607 * t772;
t431 = -t759 * t525 + t763 * t849;
t487 = t527 * t772 - t607 * t769;
t860 = t431 * t761 + t487 * t757;
t691 = t738 - t955;
t604 = -t691 * t770 - t964;
t526 = t771 * t604 + t768 * t820;
t528 = -t768 * t604 + t771 * t820;
t606 = t691 * t767 - t963;
t848 = t528 * t769 + t606 * t772;
t432 = -t759 * t526 + t763 * t848;
t488 = t528 * t772 - t606 * t769;
t859 = t432 * t761 + t488 * t757;
t453 = t540 * t772 - t541 * t769;
t434 = -t453 * t763 + t759 * t590;
t454 = t540 * t769 + t541 * t772;
t858 = t434 * t761 + t454 * t757;
t646 = -qJD(6) * t716 - t880;
t610 = -t646 * t770 - t714 * t928;
t561 = t610 * t771 - t897;
t563 = -t610 * t768 - t896;
t611 = t646 * t767 - t714 * t927;
t847 = t563 * t769 + t611 * t772;
t446 = -t759 * t561 + t763 * t847;
t512 = t563 * t772 - t611 * t769;
t857 = t446 * t761 + t512 * t757;
t612 = -t647 * t767 - t716 * t927;
t562 = t612 * t771 + t897;
t564 = -t612 * t768 + t896;
t613 = -t647 * t770 + t716 * t928;
t846 = t564 * t769 + t613 * t772;
t447 = -t759 * t562 + t763 * t846;
t513 = t564 * t772 - t613 * t769;
t856 = t447 * t761 + t513 * t757;
t451 = t454 * t763;
t855 = t451 * t761 + t453 * t757;
t628 = (t714 * t767 + t716 * t770) * t741;
t608 = t628 * t771 + t706 * t768;
t609 = -t628 * t768 + t706 * t771;
t629 = (t714 * t770 - t716 * t767) * t741;
t834 = t609 * t769 + t629 * t772;
t493 = -t759 * t608 + t763 * t834;
t539 = t609 * t772 - t629 * t769;
t854 = t493 * t761 + t539 * t757;
t658 = t720 * t771 + t723 * t768;
t659 = t936 - t940;
t729 = -t747 + t749;
t832 = t659 * t769 + t729 * t772;
t571 = -t759 * t658 + t763 * t832;
t626 = t659 * t772 - t729 * t769;
t845 = t571 * t761 + t626 * t757;
t669 = (t722 - t888) * t771;
t687 = -t722 * t768 - t754 * t904;
t810 = t687 * t769 - t878;
t601 = -t759 * t669 + t763 * t810;
t644 = t687 * t772 + t879;
t836 = t601 * t761 + t644 * t757;
t670 = t962 * t768;
t688 = t721 * t771 - t753 * t904;
t809 = t688 * t769 + t878;
t602 = -t759 * t670 + t763 * t809;
t645 = t688 * t772 - t879;
t835 = t602 * t761 + t645 * t757;
t568 = t761 * t635 - t757 * t636;
t569 = t635 * t757 + t636 * t761;
t709 = t907 * t904;
t822 = -qJDD(4) * t772 + t709 * t769;
t663 = t822 * t763;
t689 = qJDD(4) * t769 + t709 * t772;
t831 = t663 * t761 + t689 * t757;
t697 = t726 * t763;
t825 = t697 * t761 - t757 * t823;
t812 = (-t555 * t760 - t556 * t764) * qJ(2);
t305 = pkin(5) * t448 - t348 * t953;
t311 = pkin(5) * t347 - qJ(5) * t348;
t271 = -pkin(9) * t333 - t305 * t768 + t311 * t771;
t286 = -pkin(3) * t333 - qJ(5) * t448 + t347 * t953;
t808 = pkin(8) * t304 + t271 * t769 + t286 * t772;
t332 = pkin(5) * t637 - t544 * t953 - t348;
t460 = pkin(5) * t542 - qJ(5) * t544;
t319 = -pkin(9) * t510 - t332 * t768 + t460 * t771;
t325 = -pkin(3) * t510 - qJ(5) * t637 + t542 * t953 + t347;
t807 = pkin(8) * t440 + t319 * t769 + t325 * t772;
t376 = pkin(5) * t572 - qJ(5) * t573 + t881;
t399 = pkin(5) * t621 - t573 * t953 + t916;
t328 = -pkin(9) * t521 + t376 * t771 - t399 * t768;
t377 = -pkin(3) * t521 - qJ(5) * t621 + t572 * t953 - t920;
t806 = pkin(8) * t468 + t328 * t769 + t377 * t772;
t378 = pkin(5) * t582 - qJ(5) * t583 - t402;
t401 = pkin(5) * t821 - t583 * t953 - t920;
t329 = -pkin(9) * t523 + t378 * t771 - t401 * t768;
t380 = -pkin(3) * t523 - qJ(5) * t821 + t582 * t953 - t916;
t805 = pkin(8) * t473 + t329 * t769 + t380 * t772;
t351 = -pkin(3) * t405 + pkin(4) * t819 - qJ(5) * t469;
t360 = -pkin(9) * t405 + t507 * t876;
t804 = pkin(8) * t375 + t351 * t772 + t360 * t769;
t442 = -t973 + pkin(4) * t735 + (-qJDD(4) - t732) * qJ(5) + t778;
t775 = t906 * t954 + t777;
t505 = -pkin(4) * t888 + qJ(5) * t720 - t775;
t467 = -pkin(4) * t940 + t505 * t771 - t972;
t803 = t442 * t772 + t467 * t769 + t991;
t443 = pkin(4) * t731 + qJ(5) * t737 - t819 + t981;
t506 = (-t723 + t888) * pkin(4) + t775;
t466 = -qJ(5) * t936 - t506 * t768 + t980;
t802 = t443 * t772 + t466 * t769 + t986;
t470 = t490 - t981;
t516 = t944 - t980;
t801 = t470 * t772 + t516 * t769 - t986;
t471 = -t910 + t973;
t517 = t943 + t972;
t800 = t471 * t772 + t517 * t769 - t991;
t267 = -pkin(3) * t348 + pkin(9) * t334 + t305 * t771 + t311 * t768;
t284 = t763 * t333 + t759 * t872;
t251 = -pkin(2) * t284 - t759 * t267 + t763 * t808;
t254 = t772 * t271 - t769 * t286 + (-t284 * t759 - t285 * t763) * pkin(8);
t270 = -t285 * t757 + t304 * t761;
t799 = qJ(2) * t270 + t251 * t761 + t254 * t757;
t313 = -pkin(3) * t544 + pkin(9) * t511 + t332 * t771 + t460 * t768;
t403 = t763 * t510 + t759 * t853;
t269 = -pkin(2) * t403 - t759 * t313 + t763 * t807;
t279 = t772 * t319 - t769 * t325 + (-t403 * t759 - t404 * t763) * pkin(8);
t362 = -t404 * t757 + t440 * t761;
t798 = qJ(2) * t362 + t269 * t761 + t279 * t757;
t336 = t763 * t405 + t759 * t865;
t342 = pkin(9) * t406 + (-pkin(3) + t877) * t507;
t275 = -pkin(2) * t336 - t759 * t342 + t763 * t804;
t278 = -t769 * t351 + t772 * t360 + (-t336 * t759 - t337 * t763) * pkin(8);
t312 = -t337 * t757 + t375 * t761;
t797 = qJ(2) * t312 + t275 * t761 + t278 * t757;
t326 = -pkin(3) * t573 + pkin(9) * t522 + t376 * t768 + t399 * t771;
t417 = t763 * t521 + t759 * t851;
t281 = -pkin(2) * t417 - t759 * t326 + t763 * t806;
t297 = t772 * t328 - t769 * t377 + (-t417 * t759 - t418 * t763) * pkin(8);
t379 = -t418 * t757 + t468 * t761;
t796 = qJ(2) * t379 + t281 * t761 + t297 * t757;
t327 = -pkin(3) * t583 + pkin(9) * t524 + t378 * t768 + t401 * t771;
t419 = t763 * t523 + t759 * t850;
t283 = -pkin(2) * t419 - t759 * t327 + t763 * t805;
t298 = t772 * t329 - t769 * t380 + (-t419 * t759 - t420 * t763) * pkin(8);
t381 = -t420 * t757 + t473 * t761;
t795 = qJ(2) * t381 + t283 * t761 + t298 * t757;
t345 = -t413 * t763 + t759 * t863;
t391 = -pkin(3) * t535 + pkin(9) * t414;
t780 = pkin(8) * t390 - (-pkin(3) * t772 - pkin(9) * t769) * t413;
t291 = -pkin(2) * t345 - t759 * t391 + t763 * t780;
t296 = -(pkin(3) * t769 - pkin(9) * t772) * t413 + (-t345 * t759 - t346 * t763) * pkin(8);
t322 = -t346 * t757 + t390 * t761;
t794 = qJ(2) * t322 + t291 * t761 + t296 * t757;
t456 = t979 + t768 * t505 + (pkin(3) + t952) * t720;
t357 = -t759 * t456 + t763 * t803 - t1006;
t372 = -t769 * t442 + t772 * t467 - t1013;
t793 = t357 * t761 + t372 * t757 - t1019;
t455 = t971 + t771 * t506 + (-pkin(3) - t946) * t723;
t359 = -t759 * t455 + t763 * t802 - t998;
t373 = -t769 * t443 + t772 * t466 - t1004;
t792 = t359 * t761 + t373 * t757 - t1012;
t509 = pkin(3) * t723 - t943 - t971;
t370 = -t759 * t509 + t763 * t801 + t998;
t388 = -t769 * t470 + t772 * t516 + t1004;
t791 = t370 * t761 + t388 * t757 + t1012;
t508 = -pkin(3) * t720 + t944 - t979;
t371 = -t759 * t508 + t763 * t800 + t1006;
t389 = -t769 * t471 + t772 * t517 + t1013;
t790 = t371 * t761 + t389 * t757 + t1019;
t433 = -t453 * t759 - t763 * t590;
t374 = (-t433 * t759 - t434 * t763) * pkin(8);
t383 = -t434 * t757 + t454 * t761;
t384 = -pkin(2) * t433 + t454 * t950;
t789 = qJ(2) * t383 + t374 * t757 + t384 * t761;
t464 = pkin(2) * t694 + t759 * t541 + t763 * t875;
t547 = -t913 + (t694 * t759 + t696 * t763) * pkin(8);
t788 = qJ(2) * t650 + t464 * t761 + t547 * t757;
t695 = t726 * t759;
t465 = -pkin(2) * t695 + t759 * t540 + t763 * t874;
t546 = -t918 + (-t695 * t759 - t697 * t763) * pkin(8);
t651 = -t697 * t757 - t761 * t823;
t787 = qJ(2) * t651 + t465 * t761 + t546 * t757;
t782 = t764 * t817;
t692 = (-t760 * t763 - t764 * t925) * qJDD(3);
t662 = t822 * t759;
t620 = -t663 * t757 + t689 * t761;
t618 = -t760 * t695 + t764 * t825;
t615 = t764 * t695 + t760 * t825;
t600 = t763 * t670 + t759 * t809;
t599 = t763 * t669 + t759 * t810;
t589 = t760 * t635 + t764 * t959;
t588 = t760 * t636 - t757 * t782;
t570 = t763 * t658 + t759 * t832;
t567 = t569 * t764;
t566 = -t760 * t662 + t764 * t831;
t565 = t764 * t662 + t760 * t831;
t560 = -t618 * t758 + t651 * t762;
t558 = t618 * t762 + t651 * t758;
t554 = -t602 * t757 + t645 * t761;
t553 = -t601 * t757 + t644 * t761;
t538 = -t760 * t898 + (t883 - t568) * t764;
t537 = -t568 * t760 - t782;
t520 = -t571 * t757 + t626 * t761;
t515 = -t566 * t758 + t620 * t762;
t514 = t566 * t762 + t620 * t758;
t504 = -t556 * t758 + t603 * t762;
t502 = qJ(1) * t504;
t501 = -t760 * t600 + t764 * t835;
t500 = -t760 * t599 + t764 * t836;
t499 = t764 * t600 + t760 * t835;
t498 = t764 * t599 + t760 * t836;
t492 = t763 * t608 + t759 * t834;
t476 = -pkin(1) * t537 + t569 * t947;
t475 = -t538 * t758 + t569 * t762;
t474 = t538 * t762 + t569 * t758;
t463 = pkin(2) * t697 - t763 * t540 + t759 * t874;
t462 = -pkin(2) * t696 - t763 * t541 + t759 * t875;
t458 = -t760 * t570 + t764 * t845;
t457 = t764 * t570 + t760 * t845;
t452 = (-t537 * t760 - t538 * t764) * qJ(2);
t450 = t454 * t759;
t445 = t763 * t562 + t759 * t846;
t444 = t763 * t561 + t759 * t847;
t439 = -t501 * t758 + t554 * t762;
t438 = -t500 * t758 + t553 * t762;
t437 = t501 * t762 + t554 * t758;
t436 = t500 * t762 + t553 * t758;
t435 = -t493 * t757 + t539 * t761;
t430 = t763 * t526 + t759 * t848;
t429 = t763 * t525 + t759 * t849;
t416 = -t458 * t758 + t520 * t762;
t415 = t458 * t762 + t520 * t758;
t410 = -t447 * t757 + t513 * t761;
t409 = -t446 * t757 + t512 * t761;
t407 = t763 * t518 + t759 * t852;
t398 = -t757 * t464 + t761 * t547 + (t616 * t764 + t760 * t956) * qJ(2);
t397 = -t757 * t465 + t761 * t546 + (-t615 * t760 - t618 * t764) * qJ(2);
t394 = -t451 * t757 + t453 * t761;
t392 = -t760 * t492 + t764 * t854;
t387 = -t432 * t757 + t488 * t761;
t386 = -t431 * t757 + t487 * t761;
t385 = pkin(2) * t434 + t454 * t951;
t369 = t763 * t508 + t759 * t800 - t1005;
t368 = t763 * t509 + t759 * t801 - t997;
t367 = pkin(1) * t956 - t760 * t462 + t764 * t788;
t366 = -pkin(1) * t615 - t760 * t463 + t764 * t787;
t365 = -t760 * t445 + t764 * t856;
t364 = -t760 * t444 + t764 * t857;
t363 = -t408 * t757 + t441 * t761;
t361 = -t760 * t450 + t764 * t855;
t358 = t763 * t455 + t759 * t802 + t997;
t356 = t763 * t456 + t759 * t803 + t1005;
t355 = -t760 * t433 + t764 * t858;
t354 = t764 * t433 + t760 * t858;
t353 = -t760 * t430 + t764 * t859;
t352 = -t760 * t429 + t764 * t860;
t349 = t411 * t763 + t759 * t945 + t909;
t344 = -t760 * t419 + t764 * t861;
t343 = t764 * t419 + t760 * t861;
t341 = -t760 * t417 + t764 * t862;
t340 = t764 * t417 + t760 * t862;
t338 = t763 * t393 + t759 * t867 + t909;
t335 = -t760 * t407 + t764 * t864;
t331 = -t760 * t403 + t764 * t866;
t330 = t764 * t403 + t760 * t866;
t324 = -t355 * t758 + t383 * t762;
t323 = t355 * t762 + t383 * t758;
t321 = -t344 * t758 + t381 * t762;
t320 = t344 * t762 + t381 * t758;
t318 = -t341 * t758 + t379 * t762;
t317 = t341 * t762 + t379 * t758;
t316 = -t757 * t350 + t761 * t395 + t812;
t315 = -t757 * t371 + t761 * t389 + t1031;
t314 = -t757 * t370 + t761 * t388 + t1028;
t310 = -t757 * t339 + t761 * t382 + t812;
t309 = -t331 * t758 + t362 * t762;
t308 = t331 * t762 + t362 * t758;
t307 = -t757 * t359 + t761 * t373 - t1028;
t306 = -t757 * t357 + t761 * t372 - t1031;
t303 = -t760 * t369 + t764 * t790 + t1030;
t302 = -t760 * t368 + t764 * t791 + t1024;
t301 = -t760 * t345 + t764 * t869;
t300 = t764 * t345 + t760 * t869;
t299 = -t760 * t349 + t764 * t868 + t886;
t295 = -t760 * t358 + t764 * t792 - t1024;
t294 = -t760 * t356 + t764 * t793 - t1030;
t293 = -t760 * t336 + t764 * t871;
t292 = t764 * t336 + t760 * t871;
t290 = pkin(2) * t346 + t763 * t391 + t759 * t780;
t289 = -t760 * t338 + t764 * t870 + t886;
t288 = t761 * t374 - t757 * t384 + (-t354 * t760 - t355 * t764) * qJ(2);
t287 = -pkin(1) * t354 - t760 * t385 + t764 * t789;
t282 = pkin(2) * t420 + t763 * t327 + t759 * t805;
t280 = pkin(2) * t418 + t763 * t326 + t759 * t806;
t277 = -t301 * t758 + t322 * t762;
t276 = t301 * t762 + t322 * t758;
t274 = pkin(2) * t337 + t763 * t342 + t759 * t804;
t273 = -t293 * t758 + t312 * t762;
t272 = t293 * t762 + t312 * t758;
t268 = pkin(2) * t404 + t763 * t313 + t759 * t807;
t266 = -t757 * t283 + t761 * t298 + (-t343 * t760 - t344 * t764) * qJ(2);
t265 = -t757 * t281 + t761 * t297 + (-t340 * t760 - t341 * t764) * qJ(2);
t264 = -t760 * t284 + t764 * t873;
t263 = t764 * t284 + t760 * t873;
t262 = -t757 * t291 + t761 * t296 + (-t300 * t760 - t301 * t764) * qJ(2);
t261 = -pkin(1) * t343 - t760 * t282 + t764 * t795;
t260 = -t757 * t269 + t761 * t279 + (-t330 * t760 - t331 * t764) * qJ(2);
t259 = -pkin(1) * t340 - t760 * t280 + t764 * t796;
t258 = -pkin(1) * t300 - t760 * t290 + t764 * t794;
t257 = -t757 * t275 + t761 * t278 + (-t292 * t760 - t293 * t764) * qJ(2);
t256 = -t264 * t758 + t270 * t762;
t255 = t264 * t762 + t270 * t758;
t253 = -pkin(1) * t330 - t760 * t268 + t764 * t798;
t252 = -pkin(1) * t292 - t760 * t274 + t764 * t797;
t250 = pkin(2) * t285 + t763 * t267 + t759 * t808;
t249 = -t757 * t251 + t761 * t254 + (-t263 * t760 - t264 * t764) * qJ(2);
t248 = -pkin(1) * t263 - t760 * t250 + t764 * t799;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t665, 0, 0, 0, 0, 0, 0, 0, 0, 0, t475, 0, 0, 0, 0, 0, 0, t560, t559, 0, t324, 0, 0, 0, 0, 0, 0, t425, t428, t504, t277, 0, 0, 0, 0, 0, 0, t504, -t425, -t428, t273, 0, 0, 0, 0, 0, 0, t318, t321, t309, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t664, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, 0, 0, 0, 0, 0, 0, t558, -t974, 0, t323, 0, 0, 0, 0, 0, 0, -t422, -t423, t503, t276, 0, 0, 0, 0, 0, 0, t503, t422, t423, t272, 0, 0, 0, 0, 0, 0, t317, t320, t308, t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t912, 0, 0, 0, 0, 0, 0, 0, 0, 0, t537, 0, 0, 0, 0, 0, 0, t615, -t956, 0, t354, 0, 0, 0, 0, 0, 0, -t478, -t479, t555, t300, 0, 0, 0, 0, 0, 0, t555, t478, t479, t292, 0, 0, 0, 0, 0, 0, t340, t343, t330, t263; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t960, -t958, -t664, -qJ(1) * t664, 0, 0, 0, 0, 0, 0, -t758 * t589 - t762 * t786, -t758 * t588 - t762 * t959, -t567 * t758 + t568 * t762, -qJ(1) * t474 + t452 * t762 - t476 * t758, 0, 0, -t559, 0, t560, -t692 * t758 + t762 * t893, -qJ(1) * t558 - t366 * t758 + t397 * t762, qJ(1) * t974 - t367 * t758 + t398 * t762, -t361 * t758 + t394 * t762, -qJ(1) * t323 - t287 * t758 + t288 * t762, t439, t416, -t1027, t438, t1022, t515, -t302 * t758 + t314 * t762 + t1033, -t303 * t758 + t315 * t762 + t1035, -t299 * t758 + t316 * t762 - t949, -qJ(1) * t276 - t258 * t758 + t262 * t762, t515, t1027, -t1022, t439, t416, t438, -t289 * t758 + t310 * t762 - t949, -t295 * t758 + t307 * t762 - t1033, -t294 * t758 + t306 * t762 - t1035, -qJ(1) * t272 - t252 * t758 + t257 * t762, -t365 * t758 + t410 * t762, -t335 * t758 + t363 * t762, -t353 * t758 + t387 * t762, -t364 * t758 + t409 * t762, -t352 * t758 + t386 * t762, -t392 * t758 + t435 * t762, -qJ(1) * t317 - t259 * t758 + t265 * t762, -qJ(1) * t320 - t261 * t758 + t266 * t762, -qJ(1) * t308 - t253 * t758 + t260 * t762, -qJ(1) * t255 - t248 * t758 + t249 * t762; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t958, -t960, t665, qJ(1) * t665, 0, 0, 0, 0, 0, 0, t762 * t589 - t758 * t786, t762 * t588 - t758 * t959, t567 * t762 + t568 * t758, qJ(1) * t475 + t452 * t758 + t476 * t762, 0, 0, t974, 0, t558, t692 * t762 + t758 * t893, qJ(1) * t560 + t366 * t762 + t397 * t758, qJ(1) * t559 + t367 * t762 + t398 * t758, t361 * t762 + t394 * t758, qJ(1) * t324 + t287 * t762 + t288 * t758, t437, t415, t1026, t436, -t1021, t514, t302 * t762 + t314 * t758 + t1032, t303 * t762 + t315 * t758 + t1034, t299 * t762 + t316 * t758 + t502, qJ(1) * t277 + t258 * t762 + t262 * t758, t514, -t1026, t1021, t437, t415, t436, t289 * t762 + t310 * t758 + t502, t295 * t762 + t307 * t758 - t1032, t294 * t762 + t306 * t758 - t1034, qJ(1) * t273 + t252 * t762 + t257 * t758, t365 * t762 + t410 * t758, t335 * t762 + t363 * t758, t353 * t762 + t387 * t758, t364 * t762 + t409 * t758, t352 * t762 + t386 * t758, t392 * t762 + t435 * t758, qJ(1) * t318 + t259 * t762 + t265 * t758, qJ(1) * t321 + t261 * t762 + t266 * t758, qJ(1) * t309 + t253 * t762 + t260 * t758, qJ(1) * t256 + t248 * t762 + t249 * t758; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t884, t730, 0, 0, 0, 0, 0, 0, 0, 0, -t764 * t635 + t760 * t959, -t764 * t636 - t760 * t786, t569 * t760, pkin(1) * t538 + t569 * t948, 0, 0, t956, 0, t615, (-t760 * t925 + t763 * t764) * qJDD(3), pkin(1) * t618 + t764 * t463 + t760 * t787, -pkin(1) * t616 + t764 * t462 + t760 * t788, t764 * t450 + t760 * t855, pkin(1) * t355 + t764 * t385 + t760 * t789, t499, t457, t1014, t498, -t1007, t565, t764 * t368 + t760 * t791 - t1023, t764 * t369 + t760 * t790 - t1029, t764 * t349 + t760 * t868 + t911, pkin(1) * t301 + t764 * t290 + t760 * t794, t565, -t1014, t1007, t499, t457, t498, t764 * t338 + t760 * t870 + t911, t764 * t358 + t760 * t792 + t1023, t764 * t356 + t760 * t793 + t1029, pkin(1) * t293 + t764 * t274 + t760 * t797, t764 * t445 + t760 * t856, t764 * t407 + t760 * t864, t764 * t430 + t760 * t859, t764 * t444 + t760 * t857, t764 * t429 + t760 * t860, t764 * t492 + t760 * t854, pkin(1) * t341 + t764 * t280 + t760 * t796, pkin(1) * t344 + t764 * t282 + t760 * t795, pkin(1) * t331 + t764 * t268 + t760 * t798, pkin(1) * t264 + t764 * t250 + t760 * t799;];
tauB_reg  = t1;
