% Calculate minimal parameter regressor of coriolis matrix for
% S6PRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRPRPR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:49:37
% EndTime: 2019-03-08 19:49:48
% DurationCPUTime: 4.88s
% Computational Cost: add. (2816->400), mult. (7130->618), div. (0->0), fcn. (7658->10), ass. (0->303)
t256 = cos(pkin(11));
t258 = sin(qJ(6));
t245 = t258 * t256;
t254 = sin(pkin(11));
t261 = cos(qJ(6));
t246 = t261 * t254;
t435 = t246 + t245;
t247 = t261 * t256;
t387 = t258 * t254;
t206 = -t247 + t387;
t251 = t254 ^ 2;
t252 = t256 ^ 2;
t234 = t252 + t251;
t330 = t247 / 0.2e1;
t434 = t330 - t387 / 0.2e1;
t286 = t245 / 0.2e1 + t246 / 0.2e1;
t425 = t435 / 0.2e1;
t433 = t425 + t286;
t255 = sin(pkin(6));
t260 = sin(qJ(2));
t396 = t255 * t260;
t350 = t256 * t396;
t259 = sin(qJ(4));
t263 = cos(qJ(2));
t395 = t255 * t263;
t348 = t259 * t395;
t257 = cos(pkin(6));
t262 = cos(qJ(4));
t392 = t257 * t262;
t197 = -t348 + t392;
t400 = t197 * t254;
t131 = t350 - t400;
t432 = -t131 / 0.2e1;
t351 = t254 * t396;
t399 = t197 * t256;
t132 = t351 + t399;
t431 = -t132 / 0.2e1;
t430 = t132 / 0.2e1;
t196 = t257 * t259 + t262 * t395;
t429 = -t196 / 0.2e1;
t428 = -t197 / 0.2e1;
t427 = t197 / 0.2e1;
t426 = -t206 / 0.2e1;
t230 = t262 * t387;
t424 = t230 / 0.2e1;
t248 = -pkin(5) * t256 - pkin(4);
t423 = t248 / 0.2e1;
t422 = t256 / 0.2e1;
t421 = -t259 / 0.2e1;
t420 = t259 / 0.2e1;
t419 = -t262 / 0.2e1;
t418 = t262 / 0.2e1;
t417 = t259 * pkin(4);
t416 = pkin(9) + qJ(5);
t189 = t262 * t247 - t230;
t379 = t262 * t189;
t229 = t259 * t387;
t188 = t259 * t247 - t229;
t401 = t188 * t259;
t291 = -t401 / 0.2e1 - t379 / 0.2e1;
t61 = -t291 + t434;
t415 = qJD(2) * t61;
t186 = t435 * t262;
t402 = t186 * t262;
t185 = t435 * t259;
t403 = t185 * t259;
t292 = -t403 / 0.2e1 - t402 / 0.2e1;
t62 = t292 - t286;
t414 = qJD(2) * t62;
t77 = -t402 + t403;
t413 = qJD(2) * t77;
t78 = t379 - t401;
t412 = qJD(2) * t78;
t411 = t131 * t254;
t410 = t132 * t256;
t318 = -t262 * qJ(5) + t417;
t215 = qJ(3) + t318;
t200 = t256 * t215;
t264 = -pkin(2) - pkin(8);
t384 = t259 * t264;
t152 = -t254 * t384 + t200;
t409 = t152 * t254;
t408 = t152 * t262;
t231 = t256 * t384;
t153 = t254 * t215 + t231;
t407 = t153 * t256;
t406 = t153 * t262;
t386 = t259 * t260;
t181 = (-t254 * t386 + t256 * t263) * t255;
t405 = t181 * t259;
t182 = (t254 * t263 + t256 * t386) * t255;
t404 = t182 * t259;
t349 = t262 * t396;
t24 = t131 * t181 + t132 * t182 - t196 * t349;
t398 = t24 * qJD(1);
t397 = t254 * t259;
t394 = t256 * t259;
t393 = t256 * t262;
t228 = pkin(4) * t262 + qJ(5) * t259;
t212 = t256 * t228;
t328 = -t254 * t264 + pkin(5);
t111 = pkin(9) * t394 + t328 * t262 + t212;
t391 = t258 * t111;
t378 = t262 * t264;
t232 = t256 * t378;
t180 = t254 * t228 + t232;
t130 = pkin(9) * t397 + t180;
t390 = t258 * t130;
t389 = t258 * t181;
t388 = t258 * t182;
t385 = t259 * t262;
t383 = t261 * t111;
t382 = t261 * t130;
t381 = t261 * t181;
t380 = t261 * t182;
t46 = t185 * t189 + t186 * t188;
t377 = t46 * qJD(2);
t83 = t433 * t259;
t376 = t83 * qJD(2);
t275 = -t435 / 0.2e1 + t286;
t84 = t275 * t259;
t375 = t84 * qJD(2);
t88 = -t229 / 0.2e1 + (t426 + t330) * t259;
t374 = t88 * qJD(2);
t331 = -t247 / 0.2e1;
t89 = t206 * t421 + t259 * t331 + t229 / 0.2e1;
t373 = t89 * qJD(2);
t372 = qJD(2) * qJ(3);
t371 = qJD(2) * t189;
t370 = qJD(2) * t255;
t369 = qJD(4) * t206;
t368 = qJD(4) * t435;
t367 = qJD(4) * t248;
t366 = qJD(4) * t254;
t365 = qJD(4) * t256;
t364 = qJD(5) * t186;
t363 = qJD(5) * t189;
t362 = qJD(6) * t435;
t361 = qJD(6) * t259;
t253 = t262 ^ 2;
t204 = t234 * t253;
t360 = t204 * qJD(2);
t205 = t234 * t262;
t359 = t205 * qJD(2);
t198 = t206 * qJD(6);
t358 = t234 * qJD(4);
t243 = t259 ^ 2 - t253;
t357 = t243 * qJD(2);
t356 = t259 * qJD(2);
t355 = t259 * qJD(4);
t354 = t262 * qJD(2);
t353 = t262 * qJD(4);
t352 = t254 * t378;
t347 = qJ(3) * t356;
t346 = qJ(3) * t354;
t345 = t206 * t356;
t344 = t435 * t356;
t343 = t254 * t355;
t342 = t254 * t356;
t242 = t260 * t370;
t341 = t263 * t370;
t340 = t256 * t356;
t339 = t259 * t353;
t338 = t259 * t354;
t337 = t132 * t419;
t336 = t197 * t418;
t335 = -t396 / 0.2e1;
t334 = t396 / 0.2e1;
t332 = t384 / 0.2e1;
t327 = pkin(5) * t254 - t264;
t326 = t234 * t196;
t176 = t189 * t356;
t325 = qJD(4) * t83 + t176;
t324 = qJD(5) * t262 - qJD(3);
t323 = qJD(5) + t367;
t322 = t253 * t334;
t321 = t262 * t335;
t320 = t262 * t334;
t201 = t327 * t259;
t202 = t327 * t262;
t125 = -pkin(9) * t254 * t262 + t153;
t271 = -pkin(9) * t393 + t328 * t259 + t200;
t47 = t125 * t258 - t261 * t271;
t3 = (t383 - t390) * t259 - t47 * t262 - t201 * t186 - t202 * t185;
t303 = t261 * t131 - t258 * t132;
t266 = -t186 * t427 + t303 * t419;
t315 = t206 * t321;
t5 = t315 + t266;
t317 = -t5 * qJD(1) + t3 * qJD(2);
t48 = t261 * t125 + t258 * t271;
t4 = (t382 + t391) * t259 + t48 * t262 + t201 * t189 + t202 * t188;
t302 = t131 * t258 + t132 * t261;
t265 = t189 * t428 + t302 * t418;
t281 = t206 * t259;
t314 = t435 * t321;
t6 = t314 + (t281 / 0.2e1 + t188 / 0.2e1) * t196 + t265;
t316 = -t6 * qJD(1) - t4 * qJD(2);
t267 = t189 * t429 + t302 * t420;
t287 = -t388 / 0.2e1 + t381 / 0.2e1;
t11 = t267 + t287;
t33 = t189 * t202 - t259 * t48;
t313 = qJD(1) * t11 - qJD(2) * t33;
t268 = -t186 * t429 + t303 * t420;
t288 = -t389 / 0.2e1 - t380 / 0.2e1;
t12 = t268 + t288;
t32 = t202 * t186 - t259 * t47;
t312 = qJD(1) * t12 + qJD(2) * t32;
t19 = t322 + (t404 / 0.2e1 + t432) * t256 + (-t405 / 0.2e1 + t431) * t254;
t66 = t152 * t256 + t153 * t254;
t311 = -qJD(1) * t19 + qJD(2) * t66;
t26 = (-t182 / 0.2e1 + t131 * t420) * t256 + (t181 / 0.2e1 + t132 * t420) * t254;
t179 = t212 - t352;
t27 = -t152 * t394 - t153 * t397 + (t179 * t256 + t180 * t254) * t262;
t310 = -t26 * qJD(1) + t27 * qJD(2);
t28 = (t254 * t335 + t430 - t399 / 0.2e1) * t262;
t56 = t406 + (t180 - 0.2e1 * t232) * t259;
t309 = t28 * qJD(1) + t56 * qJD(2);
t29 = (t256 * t334 + t432 - t400 / 0.2e1) * t262;
t55 = t408 + (t179 + 0.2e1 * t352) * t259;
t308 = t29 * qJD(1) - t55 * qJD(2);
t295 = t131 * t422 + t254 * t430;
t40 = (t335 + t295) * t262;
t60 = t66 * t262;
t307 = qJD(1) * t40 + qJD(2) * t60;
t190 = (0.1e1 / 0.2e1 - t252 / 0.2e1 - t251 / 0.2e1) * t259;
t297 = -t411 / 0.2e1 + t410 / 0.2e1;
t10 = (t428 + t297) * t262 + t196 * t190;
t22 = (t197 - t410 + t411) * t196;
t306 = t22 * qJD(1) + t10 * qJD(3);
t36 = t186 * t206 - t189 * t435;
t65 = t186 ^ 2 - t189 ^ 2;
t305 = qJD(2) * t65 + qJD(4) * t36;
t79 = t206 ^ 2 - t435 ^ 2;
t304 = qJD(2) * t36 + qJD(4) * t79;
t301 = -t179 * t254 + t180 * t256;
t299 = -qJD(2) * t186 - t369;
t298 = t368 + t371;
t296 = t179 * t432 + t180 * t431;
t294 = t407 / 0.2e1 - t409 / 0.2e1;
t293 = t182 * t422 - t181 * t254 / 0.2e1;
t290 = -t391 / 0.2e1 - t382 / 0.2e1;
t289 = -t390 / 0.2e1 + t383 / 0.2e1;
t54 = -t186 * t425 + t189 * t426;
t284 = qJD(4) * t54 - t186 * t371;
t283 = -qJD(2) * t54 + t206 * t368;
t282 = -qJD(4) * t84 + qJD(6) * t189 + t176;
t280 = t392 / 0.2e1 - t348 / 0.2e1;
t276 = t293 * qJ(5);
t57 = t332 - t294;
t1 = (pkin(4) * t334 + t264 * t427) * t262 + t276 - t57 * t196 + t296;
t23 = -t259 * t378 + (t180 * t420 + t406 / 0.2e1) * t256 + (t179 * t421 - t408 / 0.2e1) * t254;
t34 = -t264 ^ 2 * t385 + t152 * t179 + t153 * t180;
t279 = -t1 * qJD(1) + t34 * qJD(2) + t23 * qJD(3);
t226 = t416 * t254;
t227 = t416 * t256;
t142 = -t226 * t258 + t227 * t261;
t272 = t142 * t421 + t189 * t423 + t202 * t425;
t15 = -t272 + t289;
t42 = t275 * t196;
t85 = t275 * t262;
t278 = qJD(1) * t42 + qJD(2) * t15 - qJD(3) * t85;
t141 = t226 * t261 + t227 * t258;
t273 = t141 * t420 - t186 * t423 + t202 * t426;
t16 = -t273 + t290;
t43 = (t206 / 0.2e1 + t434) * t196;
t86 = t424 + (t331 + t426) * t262;
t277 = qJD(1) * t43 + qJD(2) * t16 + qJD(3) * t86;
t151 = (-0.1e1 + t234) * t385;
t274 = t10 * qJD(1) + t23 * qJD(2) + t151 * qJD(3);
t270 = t318 * qJD(4) - qJD(5) * t259;
t216 = t234 * qJ(5);
t37 = t280 - t297;
t269 = qJD(1) * t37 + qJD(2) * t57 + qJD(3) * t190 - qJD(4) * t216;
t249 = t353 / 0.2e1;
t203 = (t356 + qJD(6) / 0.2e1) * t262;
t191 = (0.1e1 + t234) * t420;
t90 = t206 * t418 + t262 * t331 + t424;
t87 = -t286 * t262 + t419 * t435;
t64 = t291 + t434;
t63 = -t292 - t286;
t59 = -qJD(4) * t88 + t186 * t356;
t58 = t332 + t294;
t53 = t54 * qJD(6);
t45 = t433 * t196;
t44 = (t434 + t426) * t196;
t41 = t254 * t337 + t393 * t432 + t321;
t39 = qJD(4) * t89 + (-qJD(6) - t356) * t186;
t38 = t280 + t297;
t35 = t36 * qJD(6);
t31 = t254 * t321 + t256 * t336 + t337;
t30 = t131 * t418 + t254 * t336 + t256 * t320;
t25 = t295 * t259 + t293;
t21 = t23 * qJD(4);
t20 = t293 * t259 + t295 + t322;
t18 = t272 + t289;
t17 = t273 + t290;
t14 = -t267 + t287;
t13 = -t268 + t288;
t9 = t10 * qJD(4);
t8 = -t265 + t314 + (t188 + t281) * t429;
t7 = t315 - t266;
t2 = pkin(4) * t320 + t378 * t428 + t407 * t429 + t276 - t296 + (t409 / 0.2e1 + t332) * t196;
t49 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t24 + qJD(4) * t22, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t242, -t341, t242, t341 ((-pkin(2) * t260 + qJ(3) * t263) * qJD(2) + t260 * qJD(3)) * t255, 0, 0, 0, 0, 0 (t260 * t353 + t263 * t356) * t255 (-t260 * t355 + t263 * t354) * t255 (-t253 * t351 + t405) * qJD(2) + t30 * qJD(4) (-t253 * t350 - t404) * qJD(2) + t31 * qJD(4), t25 * qJD(4) + (-t181 * t256 - t182 * t254) * t354, t398 + (t253 * t264 * t396 + t181 * t152 + t182 * t153) * qJD(2) + t20 * qJD(3) + t2 * qJD(4) + t41 * qJD(5), 0, 0, 0, 0, 0 ((t381 - t388) * t259 - t186 * t349) * qJD(2) + t7 * qJD(4) + t14 * qJD(6) (-(t380 + t389) * t259 - t189 * t349) * qJD(2) + t8 * qJD(4) + t13 * qJD(6); 0, 0, 0, 0, 0, 0, t242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t20 + t9, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t197 + t262 * t242, qJD(4) * t196 - t259 * t242, qJD(2) * t30 - t197 * t365, qJD(2) * t31 + t197 * t366, t25 * qJD(2) - qJD(4) * t326, t2 * qJD(2) + (-pkin(4) * t197 - qJ(5) * t326) * qJD(4) + t38 * qJD(5) + t306, 0, 0, 0, 0, 0, qJD(2) * t7 + qJD(6) * t45 + t197 * t369, qJD(2) * t8 + qJD(6) * t44 + t197 * t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t41 + qJD(4) * t38, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 * qJD(2) + t45 * qJD(4) - qJD(6) * t302, t13 * qJD(2) + t44 * qJD(4) - qJD(6) * t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29 * qJD(4), -t28 * qJD(4), t26 * qJD(4), -qJD(3) * t19 - qJD(4) * t1 - qJD(5) * t40 - t398, 0, 0, 0, 0, 0, -qJD(4) * t5 - qJD(6) * t11, -qJD(4) * t6 - qJD(6) * t12; 0, 0, 0, 0, 0, qJD(3), qJ(3) * qJD(3), -t339, t243 * qJD(4), 0, 0, 0, qJ(3) * t353 + qJD(3) * t259, -qJ(3) * t355 + qJD(3) * t262, qJD(4) * t55 - t324 * t394, -qJD(4) * t56 + t324 * t397, -qJD(3) * t205 - qJD(4) * t27 + qJD(5) * t204, qJD(3) * t66 + qJD(4) * t34 - qJD(5) * t60 (-qJD(4) * t188 - qJD(6) * t186) * t189, qJD(4) * t46 + qJD(6) * t65, qJD(4) * t78 - t186 * t361, qJD(4) * t77 - t189 * t361, t339, qJD(4) * t3 + qJD(6) * t33 + (-qJD(3) * t206 - t363) * t259, -qJD(4) * t4 - qJD(6) * t32 + (-qJD(3) * t435 + t364) * t259; 0, 0, 0, 0, 0, qJD(2), t372, 0, 0, 0, 0, 0, t356, t354, t340, -t342, -t359, t21 + t311, 0, 0, 0, 0, 0, qJD(6) * t64 - t345, qJD(6) * t63 - t344; 0, 0, 0, 0, 0, 0, 0, -t338, t357, -t355, -t353, 0, -t264 * t355 + t346, -t264 * t353 - t347, -t231 * qJD(4) + t270 * t254 - t308, t270 * t256 + t264 * t343 - t309, qJD(4) * t301 - t310 (-pkin(4) * t384 + qJ(5) * t301) * qJD(4) + t58 * qJD(5) + t279, -t188 * t298 + t53, t377 + (t185 * t435 + t188 * t206) * qJD(4) + t35, qJD(6) * t89 + t353 * t435 + t412, qJD(6) * t84 - t206 * t353 + t413, t203 (-t141 * t262 - t185 * t248 - t201 * t206) * qJD(4) - t83 * qJD(5) + t18 * qJD(6) + t317 (-t142 * t262 - t188 * t248 - t201 * t435) * qJD(4) - t88 * qJD(5) + t17 * qJD(6) + t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t256 * t354 - t366) * t259 (t254 * t354 - t365) * t259, t360, qJD(4) * t58 - t307, 0, 0, 0, 0, 0, -t325, t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284, t305, t39, -t282, t249, qJD(3) * t64 + qJD(4) * t18 - qJD(6) * t48 - t313, qJD(3) * t63 + qJD(4) * t17 + qJD(6) * t47 - t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t19 + t9, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, -qJD(2), -t372, 0, 0, 0, 0, 0, -t356, -t354, -t340, t342, t359, t21 - t311, 0, 0, 0, 0, 0, -qJD(6) * t61 + t345, -qJD(6) * t62 + t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151 * qJD(4), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t355, -t353, -t256 * t355, t343, t205 * qJD(4) (qJ(5) * t205 - t417) * qJD(4) + t191 * qJD(5) + t274, 0, 0, 0, 0, 0, qJD(6) * t87 + t206 * t355, qJD(6) * t90 + t355 * t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t191 * qJD(4), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t87 - qJD(6) * t188 - t415, qJD(4) * t90 + qJD(6) * t185 - t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 * qJD(2), t28 * qJD(2), -t26 * qJD(2), qJD(2) * t1 - qJD(5) * t37 - t306, 0, 0, 0, 0, 0, qJD(2) * t5 - qJD(6) * t42, qJD(2) * t6 - qJD(6) * t43; 0, 0, 0, 0, 0, 0, 0, t338, -t357, 0, 0, 0, -t346, t347, t308, t309, t310, -qJD(5) * t57 - t279, t188 * t371 + t53, t35 - t377, qJD(6) * t88 - t412, -qJD(6) * t83 - t413, -t203, qJD(5) * t84 - qJD(6) * t15 - t317, -qJD(5) * t89 - qJD(6) * t16 - t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t190 - t274, 0, 0, 0, 0, 0, qJD(6) * t85, -qJD(6) * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234 * qJD(5), t216 * qJD(5), -t435 * t198, t79 * qJD(6), 0, 0, 0, t248 * t362, -t248 * t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, -t269, 0, 0, 0, 0, 0, t375, -t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, t304, -t198 + t374, -t362 - t376, -t354 / 0.2e1, -qJD(6) * t142 + t367 * t435 - t278, qJD(6) * t141 - t206 * t367 - t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t40 + qJD(4) * t37, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256 * t338, -t254 * t338, -t360, qJD(4) * t57 + t307, 0, 0, 0, 0, 0, t282, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190 * qJD(4), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t358, t269, 0, 0, 0, 0, 0, t362 - t375, -t198 + t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t11 + qJD(4) * t42, qJD(2) * t12 + qJD(4) * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284, -t305, t59, t325, t249, qJD(3) * t61 + qJD(4) * t15 + t313 - t363, qJD(3) * t62 + qJD(4) * t16 + t312 + t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t85 + t415, qJD(4) * t86 + t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, -t304, -t374, t376, t354 / 0.2e1, -t323 * t435 + t278, t206 * t323 + t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t298, -t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t49;
