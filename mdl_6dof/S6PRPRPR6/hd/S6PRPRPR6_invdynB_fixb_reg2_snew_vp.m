% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:11:00
% EndTime: 2019-05-04 23:11:25
% DurationCPUTime: 20.72s
% Computational Cost: add. (95450->778), mult. (193357->1232), div. (0->0), fcn. (134408->12), ass. (0->554)
t702 = cos(qJ(2));
t779 = qJDD(2) * t702;
t699 = sin(qJ(2));
t703 = qJD(2) ^ 2;
t793 = t699 * t703;
t658 = t779 - t793;
t691 = sin(pkin(6));
t638 = t658 * t691;
t694 = cos(pkin(6));
t678 = t694 * qJDD(2);
t640 = -t678 * t702 + t694 * t793;
t690 = sin(pkin(10));
t693 = cos(pkin(10));
t765 = g(1) * t690 - t693 * g(2);
t791 = g(3) - qJDD(1);
t632 = t691 * t765 + t694 * t791;
t794 = t699 * t632;
t546 = (-t638 * t691 + t640 * t694) * pkin(7) - t794;
t781 = qJDD(2) * t699;
t659 = t702 * t703 + t781;
t597 = t640 * t690 - t659 * t693;
t852 = -qJ(1) * t597 - t546 * t690;
t592 = t640 * t693 + t659 * t690;
t851 = -qJ(1) * t592 - t546 * t693;
t637 = t659 * t691;
t639 = t659 * t694;
t792 = t702 * t632;
t549 = (t637 * t691 + t639 * t694) * pkin(7) - t792;
t595 = t639 * t690 - t658 * t693;
t850 = -qJ(1) * t595 - t549 * t690;
t590 = t639 * t693 + t658 * t690;
t849 = -qJ(1) * t590 - t549 * t693;
t689 = sin(pkin(11));
t692 = cos(pkin(11));
t701 = cos(qJ(4));
t787 = qJD(2) * t701;
t646 = -t692 * qJD(4) + t689 * t787;
t648 = qJD(4) * t689 + t692 * t787;
t611 = t648 * t646;
t785 = qJD(2) * qJD(4);
t766 = t701 * t785;
t698 = sin(qJ(4));
t782 = qJDD(2) * t698;
t654 = t766 + t782;
t835 = -t611 + t654;
t844 = t689 * t835;
t843 = t692 * t835;
t697 = sin(qJ(6));
t700 = cos(qJ(6));
t598 = t700 * t646 + t648 * t697;
t600 = -t646 * t697 + t648 * t700;
t539 = t600 * t598;
t708 = qJDD(6) + t654;
t837 = -t539 + t708;
t842 = t697 * t837;
t841 = t700 * t837;
t840 = -t691 * t791 + t694 * t765;
t839 = t690 * t791;
t838 = t693 * t791;
t788 = qJD(2) * t698;
t674 = qJD(6) + t788;
t573 = t674 * t598;
t768 = t698 * t785;
t780 = qJDD(2) * t701;
t655 = -t768 + t780;
t629 = t692 * qJDD(4) - t655 * t689;
t630 = qJDD(4) * t689 + t655 * t692;
t709 = qJD(6) * t598 - t629 * t697 - t630 * t700;
t836 = -t573 - t709;
t762 = -t700 * t629 + t630 * t697;
t467 = (qJD(6) - t674) * t600 + t762;
t662 = g(1) * t693 + g(2) * t690;
t610 = -t693 * t662 - t690 * t765;
t755 = pkin(7) * t659 - t792;
t834 = pkin(1) * t640 + t691 * t755;
t756 = pkin(7) * t658 + t794;
t833 = pkin(1) * t639 + t691 * t756;
t609 = -t690 * t662 + t693 * t765;
t832 = pkin(1) * t638 + t694 * t755;
t831 = -pkin(1) * t637 + t694 * t756;
t588 = t598 ^ 2;
t589 = t600 ^ 2;
t830 = t646 ^ 2;
t645 = t648 ^ 2;
t673 = t674 ^ 2;
t829 = qJD(4) ^ 2;
t828 = 2 * qJD(3);
t827 = -pkin(8) - pkin(2);
t822 = pkin(4) * t698;
t821 = pkin(4) * t701;
t582 = -t662 * t699 - t702 * t840;
t583 = -t702 * t662 + t699 * t840;
t515 = t582 * t699 + t583 * t702;
t820 = pkin(7) * t515;
t757 = -qJ(5) * t701 + t822;
t652 = t757 * qJD(2);
t688 = qJDD(2) * pkin(2);
t725 = qJDD(3) + t582;
t558 = -t703 * qJ(3) - t688 + t725;
t705 = -qJDD(2) * pkin(8) + t558;
t790 = t701 * t632 - t698 * t705;
t499 = -pkin(4) * t829 + qJDD(4) * qJ(5) - t652 * t788 - t790;
t695 = t703 * pkin(8);
t784 = qJDD(2) * qJ(3);
t704 = -t703 * pkin(2) + t583 + t784;
t758 = qJ(5) * t698 + t821;
t503 = t654 * pkin(4) - t655 * qJ(5) - t695 + (qJD(4) * t758 + t828) * qJD(2) + t704;
t420 = 0.2e1 * qJD(5) * t648 + t499 * t689 - t692 * t503;
t772 = t646 * t788;
t578 = -t630 - t772;
t392 = pkin(5) * t835 + pkin(9) * t578 - t420;
t421 = -0.2e1 * qJD(5) * t646 + t692 * t499 + t689 * t503;
t631 = pkin(5) * t788 - pkin(9) * t648;
t398 = -pkin(5) * t830 + pkin(9) * t629 - t631 * t788 + t421;
t333 = -t700 * t392 + t398 * t697;
t334 = t697 * t392 + t700 * t398;
t294 = -t333 * t700 + t334 * t697;
t819 = t294 * t689;
t818 = t294 * t692;
t763 = t632 * t698 + t701 * t705;
t496 = -qJDD(4) * pkin(4) - t829 * qJ(5) + t652 * t787 + qJDD(5) - t763;
t437 = -t629 * pkin(5) - pkin(9) * t830 + t631 * t648 + t496;
t817 = t437 * t697;
t816 = t437 * t700;
t815 = t496 * t689;
t814 = t496 * t692;
t517 = t539 + t708;
t813 = t517 * t697;
t812 = t517 * t700;
t778 = qJD(2) * t828;
t556 = t704 + t778;
t554 = -t695 + t556;
t811 = t554 * t698;
t810 = t554 * t701;
t580 = t611 + t654;
t809 = t580 * t689;
t808 = t580 * t692;
t807 = t632 * t691;
t806 = t654 * t701;
t685 = t698 ^ 2;
t686 = t701 ^ 2;
t789 = t685 + t686;
t657 = t789 * qJDD(2);
t805 = t657 * t699;
t804 = t657 * t702;
t773 = t698 * t701 * t703;
t663 = qJDD(4) + t773;
t803 = t663 * t698;
t802 = t663 * t701;
t664 = qJDD(4) - t773;
t801 = t664 * t698;
t800 = t664 * t701;
t799 = t674 * t697;
t798 = t674 * t700;
t797 = t685 * t703;
t796 = t686 * t703;
t783 = qJDD(2) * t691;
t777 = t698 * t539;
t776 = t701 * t539;
t775 = t698 * t611;
t774 = t701 * t611;
t771 = t648 * t788;
t770 = t689 * t788;
t769 = t692 * t788;
t767 = t693 * t783;
t295 = t333 * t697 + t700 * t334;
t356 = t420 * t689 + t692 * t421;
t761 = t699 * t773;
t760 = t702 * t773;
t272 = t295 * t692 - t819;
t266 = t272 * t698 - t437 * t701;
t271 = t295 * t689 + t818;
t754 = -t266 * t702 + t271 * t699;
t471 = -t573 + t709;
t408 = -t467 * t697 + t471 * t700;
t410 = -t467 * t700 - t471 * t697;
t342 = -t408 * t689 + t410 * t692;
t493 = -t588 - t589;
t321 = t342 * t698 - t493 * t701;
t340 = t408 * t692 + t410 * t689;
t753 = -t321 * t702 + t340 * t699;
t466 = (qJD(6) + t674) * t600 + t762;
t409 = -t466 * t697 + t700 * t836;
t411 = -t466 * t700 - t697 * t836;
t343 = -t409 * t689 + t411 * t692;
t532 = -t589 + t588;
t330 = -t343 * t698 - t532 * t701;
t341 = t409 * t692 + t411 * t689;
t752 = t330 * t702 + t341 * t699;
t337 = t356 * t698 - t496 * t701;
t355 = -t420 * t692 + t421 * t689;
t751 = -t337 * t702 + t355 * t699;
t531 = -t673 - t588;
t440 = t531 * t697 + t841;
t441 = t531 * t700 - t842;
t382 = -t440 * t689 + t441 * t692;
t350 = t382 * t698 - t466 * t701;
t381 = t440 * t692 + t441 * t689;
t750 = -t350 * t702 + t381 * t699;
t555 = -t589 - t673;
t444 = t555 * t700 - t813;
t445 = -t555 * t697 - t812;
t396 = -t444 * t689 + t445 * t692;
t359 = t396 * t698 - t701 * t836;
t395 = t444 * t692 + t445 * t689;
t749 = -t359 * t702 + t395 * t699;
t568 = -t589 + t673;
t456 = t568 * t700 + t842;
t458 = -t568 * t697 + t841;
t405 = -t456 * t689 + t458 * t692;
t361 = -t405 * t698 - t471 * t701;
t403 = t456 * t692 + t458 * t689;
t748 = t361 * t702 + t403 * t699;
t567 = t588 - t673;
t457 = t567 * t697 + t812;
t459 = t567 * t700 - t813;
t406 = -t457 * t689 + t459 * t692;
t362 = -t406 * t698 - t467 * t701;
t404 = t457 * t692 + t459 * t689;
t747 = t362 * t702 + t404 * t699;
t512 = -qJD(6) * t600 - t762;
t450 = t512 * t700 + t598 * t799;
t451 = -t512 * t697 + t598 * t798;
t401 = -t450 * t689 + t451 * t692;
t373 = -t401 * t698 - t776;
t399 = t450 * t692 + t451 * t689;
t746 = t373 * t702 + t399 * t699;
t452 = t600 * t798 - t697 * t709;
t453 = -t600 * t799 - t700 * t709;
t402 = -t452 * t689 + t453 * t692;
t374 = -t402 * t698 + t776;
t400 = t452 * t692 + t453 * t689;
t745 = t374 * t702 + t400 * t699;
t505 = (-t598 * t697 - t600 * t700) * t674;
t506 = (-t598 * t700 + t600 * t697) * t674;
t435 = -t505 * t689 + t506 * t692;
t427 = -t435 * t698 + t701 * t708;
t434 = t505 * t692 + t506 * t689;
t744 = t427 * t702 + t434 * t699;
t442 = -t698 * t790 + t701 * t763;
t743 = -t442 * t702 + t554 * t699;
t575 = t629 + t771;
t510 = t575 * t692 - t578 * t689;
t571 = t645 + t830;
t446 = t510 * t698 + t571 * t701;
t508 = t575 * t689 + t578 * t692;
t742 = -t446 * t702 + t508 * t699;
t603 = -t797 - t830;
t524 = t603 * t692 - t844;
t576 = t629 - t771;
t472 = t524 * t698 + t576 * t701;
t523 = t603 * t689 + t843;
t741 = -t472 * t702 + t523 * t699;
t577 = t630 - t772;
t511 = t576 * t692 - t577 * t689;
t606 = -t645 + t830;
t474 = -t511 * t698 - t606 * t701;
t509 = t576 * t689 + t577 * t692;
t740 = t474 * t702 + t509 * t699;
t634 = -t645 + t797;
t543 = -t634 * t689 + t843;
t482 = -t543 * t698 - t578 * t701;
t540 = t634 * t692 + t844;
t739 = t482 * t702 + t540 * t699;
t635 = -t645 - t797;
t544 = -t635 * t689 - t808;
t483 = t544 * t698 - t577 * t701;
t541 = t635 * t692 - t809;
t738 = -t483 * t702 + t541 * t699;
t633 = -t797 + t830;
t545 = t633 * t692 - t809;
t484 = -t545 * t698 + t575 * t701;
t542 = t633 * t689 + t808;
t737 = t484 * t702 + t542 * t699;
t560 = -t629 * t689 + t646 * t769;
t519 = -t560 * t698 - t774;
t559 = t629 * t692 + t646 * t770;
t736 = t519 * t702 + t559 * t699;
t562 = t630 * t692 - t648 * t770;
t520 = -t562 * t698 + t774;
t561 = t630 * t689 + t648 * t769;
t735 = t520 * t702 + t561 * t699;
t443 = -t698 * t763 - t701 * t790;
t570 = (-t646 * t692 + t648 * t689) * t788;
t550 = -t570 * t698 + t806;
t569 = (-t646 * t689 - t648 * t692) * t788;
t734 = t550 * t702 + t569 * t699;
t495 = t556 * t702 + t558 * t699;
t733 = t556 * t699 - t558 * t702;
t514 = t582 * t702 - t583 * t699;
t653 = 0.2e1 * t766 + t782;
t656 = -0.2e1 * t768 + t780;
t604 = t653 * t698 - t656 * t701;
t661 = (-t685 + t686) * t703;
t732 = t604 * t702 + t661 * t699;
t670 = -t797 - t829;
t616 = t670 * t698 + t800;
t731 = -t616 * t702 + t653 * t699;
t672 = -t796 - t829;
t618 = t672 * t701 - t803;
t730 = -t618 * t702 + t656 * t699;
t660 = t789 * t703;
t727 = -t660 * t699 + t804;
t651 = t789 * t785;
t726 = qJDD(4) * t699 + t651 * t702;
t669 = t797 - t829;
t615 = -t669 * t698 - t802;
t724 = t615 * t702 - t698 * t781;
t671 = -t796 + t829;
t617 = -t671 * t701 - t801;
t723 = t617 * t702 + t699 * t780;
t626 = -t685 * t785 + t806;
t722 = t626 * t702 - t761;
t627 = -t655 * t698 - t686 * t785;
t721 = t627 * t702 + t761;
t291 = -pkin(5) * t437 + pkin(9) * t295;
t251 = -pkin(9) * t818 - qJ(5) * t271 - t291 * t689;
t255 = -pkin(4) * t271 - pkin(5) * t294;
t267 = t272 * t701 + t437 * t698;
t235 = pkin(3) * t271 - t251 * t698 - t255 * t701 + t267 * t827;
t241 = pkin(3) * t266 - pkin(4) * t437 - pkin(9) * t819 - qJ(3) * t267 + qJ(5) * t272 + t291 * t692;
t250 = t266 * t699 + t271 * t702;
t720 = pkin(7) * t250 + t235 * t702 + t241 * t699;
t288 = -pkin(5) * t493 + pkin(9) * t410 + t295;
t290 = -pkin(9) * t408 - t294;
t256 = -qJ(5) * t340 - t288 * t689 + t290 * t692;
t315 = -pkin(4) * t340 - pkin(5) * t408;
t322 = t342 * t701 + t493 * t698;
t249 = pkin(3) * t340 - t256 * t698 - t315 * t701 + t322 * t827;
t252 = pkin(3) * t321 - pkin(4) * t493 - qJ(3) * t322 + qJ(5) * t342 + t288 * t692 + t290 * t689;
t296 = t321 * t699 + t340 * t702;
t719 = pkin(7) * t296 + t249 * t702 + t252 * t699;
t349 = -pkin(5) * t466 + pkin(9) * t441 - t816;
t380 = -pkin(9) * t440 + t817;
t297 = -qJ(5) * t381 - t349 * t689 + t380 * t692;
t303 = -pkin(4) * t381 - pkin(5) * t440 + t333;
t351 = t382 * t701 + t466 * t698;
t254 = pkin(3) * t381 - t297 * t698 - t303 * t701 + t351 * t827;
t273 = pkin(3) * t350 - pkin(4) * t466 - qJ(3) * t351 + qJ(5) * t382 + t349 * t692 + t380 * t689;
t314 = t350 * t699 + t381 * t702;
t718 = pkin(7) * t314 + t254 * t702 + t273 * t699;
t353 = -pkin(5) * t836 + pkin(9) * t445 + t817;
t385 = -pkin(9) * t444 + t816;
t304 = -qJ(5) * t395 - t353 * t689 + t385 * t692;
t305 = -pkin(4) * t395 - pkin(5) * t444 + t334;
t360 = t396 * t701 + t698 * t836;
t259 = pkin(3) * t395 - t304 * t698 - t305 * t701 + t360 * t827;
t276 = pkin(3) * t359 - pkin(4) * t836 - qJ(3) * t360 + qJ(5) * t396 + t353 * t692 + t385 * t689;
t318 = t359 * t699 + t395 * t702;
t717 = pkin(7) * t318 + t259 * t702 + t276 * t699;
t338 = t356 * t701 + t496 * t698;
t270 = t827 * t338 + (pkin(3) + t758) * t355;
t285 = pkin(3) * t337 - pkin(4) * t496 - qJ(3) * t338 + qJ(5) * t356;
t306 = t337 * t699 + t355 * t702;
t716 = pkin(7) * t306 + t270 * t702 + t285 * t699;
t339 = -qJ(5) * t508 - t355;
t447 = t510 * t701 - t571 * t698;
t310 = -t339 * t698 + (pkin(3) + t821) * t508 + t827 * t447;
t311 = pkin(3) * t446 + pkin(4) * t571 - qJ(3) * t447 + qJ(5) * t510 + t356;
t415 = t446 * t699 + t508 * t702;
t715 = pkin(7) * t415 + t310 * t702 + t311 * t699;
t393 = -pkin(4) * t523 + t420;
t430 = -qJ(5) * t523 + t815;
t473 = t524 * t701 - t576 * t698;
t313 = pkin(3) * t523 - t393 * t701 - t430 * t698 + t473 * t827;
t348 = pkin(3) * t472 + pkin(4) * t576 - qJ(3) * t473 + qJ(5) * t524 - t814;
t423 = t472 * t699 + t523 * t702;
t714 = pkin(7) * t423 + t313 * t702 + t348 * t699;
t394 = -pkin(4) * t541 + t421;
t438 = -qJ(5) * t541 + t814;
t486 = t544 * t701 + t577 * t698;
t317 = pkin(3) * t541 - t394 * t701 - t438 * t698 + t486 * t827;
t354 = pkin(3) * t483 - pkin(4) * t577 - qJ(3) * t486 + qJ(5) * t544 + t815;
t432 = t483 * t699 + t541 * t702;
t713 = pkin(7) * t432 + t317 * t702 + t354 * t699;
t370 = pkin(3) * t554 + t443 * t827;
t383 = pkin(3) * t442 - qJ(3) * t443;
t418 = t442 * t699 + t554 * t702;
t712 = pkin(7) * t418 + t370 * t702 + t383 * t699;
t620 = t670 * t701 - t801;
t460 = pkin(3) * t616 - qJ(3) * t620 + t763;
t479 = pkin(3) * t653 + t620 * t827 + t810;
t565 = t616 * t699 + t653 * t702;
t711 = pkin(7) * t565 + t460 * t699 + t479 * t702;
t623 = -t672 * t698 - t802;
t461 = pkin(3) * t618 - qJ(3) * t623 + t790;
t478 = pkin(3) * t656 + t623 * t827 - t811;
t566 = t618 * t699 + t656 * t702;
t710 = pkin(7) * t566 + t461 * t699 + t478 * t702;
t439 = -pkin(3) * t660 - t443;
t607 = -t660 * t702 - t805;
t707 = -pkin(3) * t805 + pkin(7) * t607 + t439 * t702;
t706 = pkin(7) * t495 + (pkin(2) * t702 + qJ(3) * t699) * t632;
t666 = t690 * t783;
t628 = qJDD(4) * t702 - t651 * t699;
t622 = -t671 * t698 + t800;
t621 = (t655 - t768) * t701;
t619 = t669 * t701 - t803;
t614 = (t654 + t766) * t698;
t613 = t694 * t632;
t608 = t726 * t694;
t605 = -t653 * t701 - t656 * t698;
t602 = t727 * t694;
t601 = t727 * t691;
t587 = -t626 * t699 - t760;
t586 = -t627 * t699 + t760;
t585 = -t617 * t699 + t701 * t779;
t584 = -t615 * t699 - t698 * t779;
t564 = -0.2e1 * t688 + t725;
t563 = t583 + t778 + 0.2e1 * t784;
t557 = -t604 * t699 + t661 * t702;
t551 = t570 * t701 + t654 * t698;
t538 = -t602 * t690 + t607 * t693;
t537 = t602 * t693 + t607 * t690;
t536 = -t614 * t691 + t694 * t722;
t535 = -t621 * t691 + t694 * t721;
t534 = -t622 * t691 + t694 * t723;
t533 = -t619 * t691 + t694 * t724;
t530 = -t623 * t691 + t694 * t730;
t529 = -t620 * t691 + t694 * t731;
t528 = t623 * t694 + t691 * t730;
t527 = t620 * t694 + t691 * t731;
t522 = t562 * t701 + t775;
t521 = t560 * t701 - t775;
t507 = -t605 * t691 + t694 * t732;
t504 = t515 * t694;
t500 = -pkin(2) * t558 + qJ(3) * t556;
t498 = t582 * t691 - t832;
t497 = t583 * t691 - t831;
t491 = -t564 * t691 + t832;
t490 = t495 * t694;
t489 = -t563 * t691 + t831;
t488 = -t550 * t699 + t569 * t702;
t487 = t545 * t701 + t575 * t698;
t485 = t543 * t701 - t578 * t698;
t481 = -t514 * t694 + t807;
t480 = -t514 * t691 - t613;
t477 = qJ(3) * t656 + t618 * t827 + t810;
t476 = qJ(3) * t653 + t616 * t827 + t811;
t475 = t511 * t701 - t606 * t698;
t465 = -t530 * t690 + t566 * t693;
t464 = -t529 * t690 + t565 * t693;
t463 = t530 * t693 + t566 * t690;
t462 = t529 * t693 + t565 * t690;
t455 = t694 * t733 + t807;
t454 = t691 * t733 - t613;
t449 = -t520 * t699 + t561 * t702;
t448 = -t519 * t699 + t559 * t702;
t436 = -t551 * t691 + t694 * t734;
t433 = -t484 * t699 + t542 * t702;
t431 = -t482 * t699 + t540 * t702;
t429 = -qJ(3) * t660 - t657 * t827 - t442;
t428 = t435 * t701 + t698 * t708;
t426 = -pkin(1) * t480 + t694 * t820;
t425 = -t481 * t690 + t515 * t693;
t424 = t481 * t693 + t515 * t690;
t422 = -t474 * t699 + t509 * t702;
t417 = -t522 * t691 + t694 * t735;
t416 = -t521 * t691 + t694 * t736;
t414 = (-t480 * t691 - t481 * t694) * pkin(7);
t413 = -t455 * t690 + t495 * t693;
t412 = t455 * t693 + t495 * t690;
t407 = -pkin(3) * t804 - t439 * t699 + (-t601 * t691 - t602 * t694) * pkin(7);
t389 = -t487 * t691 + t694 * t737;
t388 = -t486 * t691 + t694 * t738;
t387 = -t485 * t691 + t694 * t739;
t386 = t486 * t694 + t691 * t738;
t384 = (-pkin(2) * t699 + qJ(3) * t702) * t632 + (-t454 * t691 - t455 * t694) * pkin(7);
t379 = -t475 * t691 + t694 * t740;
t378 = -t473 * t691 + t694 * t741;
t377 = t473 * t694 + t691 * t741;
t376 = t402 * t701 + t777;
t375 = t401 * t701 - t777;
t372 = -t447 * t691 + t694 * t742;
t371 = t447 * t694 + t691 * t742;
t369 = qJ(3) * t554 + t442 * t827;
t368 = -t443 * t691 + t694 * t743;
t367 = t443 * t694 + t691 * t743;
t366 = -t427 * t699 + t434 * t702;
t365 = -pkin(1) * t454 - t500 * t691 + t694 * t706;
t364 = t406 * t701 - t467 * t698;
t363 = t405 * t701 - t471 * t698;
t358 = t461 * t702 - t478 * t699 + (-t528 * t691 - t530 * t694) * pkin(7);
t357 = t460 * t702 - t479 * t699 + (-t527 * t691 - t529 * t694) * pkin(7);
t352 = -pkin(1) * t601 - t429 * t691 + t694 * t707;
t347 = -t388 * t690 + t432 * t693;
t346 = t388 * t693 + t432 * t690;
t345 = -pkin(1) * t528 - t477 * t691 + t694 * t710;
t344 = -pkin(1) * t527 - t476 * t691 + t694 * t711;
t336 = -t378 * t690 + t423 * t693;
t335 = t378 * t693 + t423 * t690;
t331 = t343 * t701 - t532 * t698;
t329 = -t372 * t690 + t415 * t693;
t328 = t372 * t693 + t415 * t690;
t327 = -t428 * t691 + t694 * t744;
t326 = -t368 * t690 + t418 * t693;
t325 = t368 * t693 + t418 * t690;
t324 = -t374 * t699 + t400 * t702;
t323 = -t373 * t699 + t399 * t702;
t320 = -t362 * t699 + t404 * t702;
t319 = -t361 * t699 + t403 * t702;
t316 = qJ(3) * t541 - t394 * t698 + t438 * t701 + t483 * t827;
t312 = qJ(3) * t523 - t393 * t698 + t430 * t701 + t472 * t827;
t309 = t339 * t701 + (qJ(3) + t822) * t508 + t827 * t446;
t308 = -t376 * t691 + t694 * t745;
t307 = -t375 * t691 + t694 * t746;
t302 = -t364 * t691 + t694 * t747;
t301 = -t363 * t691 + t694 * t748;
t300 = -t360 * t691 + t694 * t749;
t299 = t360 * t694 + t691 * t749;
t298 = -t330 * t699 + t341 * t702;
t293 = -t351 * t691 + t694 * t750;
t292 = t351 * t694 + t691 * t750;
t289 = -t370 * t699 + t383 * t702 + (-t367 * t691 - t368 * t694) * pkin(7);
t287 = -t338 * t691 + t694 * t751;
t286 = t338 * t694 + t691 * t751;
t284 = -pkin(1) * t367 - t369 * t691 + t694 * t712;
t283 = -t331 * t691 + t694 * t752;
t282 = -t322 * t691 + t694 * t753;
t281 = t322 * t694 + t691 * t753;
t280 = -t317 * t699 + t354 * t702 + (-t386 * t691 - t388 * t694) * pkin(7);
t279 = -t300 * t690 + t318 * t693;
t278 = t300 * t693 + t318 * t690;
t277 = -t313 * t699 + t348 * t702 + (-t377 * t691 - t378 * t694) * pkin(7);
t275 = -t293 * t690 + t314 * t693;
t274 = t293 * t693 + t314 * t690;
t269 = t827 * t337 + (qJ(3) + t757) * t355;
t268 = -pkin(1) * t386 - t316 * t691 + t694 * t713;
t265 = -t287 * t690 + t306 * t693;
t264 = t287 * t693 + t306 * t690;
t263 = -t310 * t699 + t311 * t702 + (-t371 * t691 - t372 * t694) * pkin(7);
t262 = -pkin(1) * t377 - t312 * t691 + t694 * t714;
t261 = -t282 * t690 + t296 * t693;
t260 = t282 * t693 + t296 * t690;
t258 = qJ(3) * t395 + t304 * t701 - t305 * t698 + t359 * t827;
t257 = -pkin(1) * t371 - t309 * t691 + t694 * t715;
t253 = qJ(3) * t381 + t297 * t701 - t303 * t698 + t350 * t827;
t248 = qJ(3) * t340 + t256 * t701 - t315 * t698 + t321 * t827;
t247 = -t270 * t699 + t285 * t702 + (-t286 * t691 - t287 * t694) * pkin(7);
t246 = -t267 * t691 + t694 * t754;
t245 = t267 * t694 + t691 * t754;
t244 = -t259 * t699 + t276 * t702 + (-t299 * t691 - t300 * t694) * pkin(7);
t243 = -t254 * t699 + t273 * t702 + (-t292 * t691 - t293 * t694) * pkin(7);
t242 = -pkin(1) * t286 - t269 * t691 + t694 * t716;
t240 = -pkin(1) * t299 - t258 * t691 + t694 * t717;
t239 = -pkin(1) * t292 - t253 * t691 + t694 * t718;
t238 = -t246 * t690 + t250 * t693;
t237 = t246 * t693 + t250 * t690;
t236 = -t249 * t699 + t252 * t702 + (-t281 * t691 - t282 * t694) * pkin(7);
t234 = qJ(3) * t271 + t251 * t701 - t255 * t698 + t266 * t827;
t233 = -pkin(1) * t281 - t248 * t691 + t694 * t719;
t232 = -t235 * t699 + t241 * t702 + (-t245 * t691 - t246 * t694) * pkin(7);
t231 = -pkin(1) * t245 - t234 * t691 + t694 * t720;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t610, 0, 0, 0, 0, 0, 0, t597, t595, 0, t425, 0, 0, 0, 0, 0, 0, 0, -t597, -t595, t413, 0, 0, 0, 0, 0, 0, t464, t465, t538, t326, 0, 0, 0, 0, 0, 0, t336, t347, t329, t265, 0, 0, 0, 0, 0, 0, t275, t279, t261, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t609, 0, 0, 0, 0, 0, 0, -t592, -t590, 0, t424, 0, 0, 0, 0, 0, 0, 0, t592, t590, t412, 0, 0, 0, 0, 0, 0, t462, t463, t537, t325, 0, 0, 0, 0, 0, 0, t335, t346, t328, t264, 0, 0, 0, 0, 0, 0, t274, t278, t260, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t791, 0, 0, 0, 0, 0, 0, t638, -t637, 0, t480, 0, 0, 0, 0, 0, 0, 0, -t638, t637, t454, 0, 0, 0, 0, 0, 0, t527, t528, t601, t367, 0, 0, 0, 0, 0, 0, t377, t386, t371, t286, 0, 0, 0, 0, 0, 0, t292, t299, t281, t245; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t839, -t838, -t609, -qJ(1) * t609, 0, 0, -t595, 0, t597, t666, -t498 * t690 - t851, -t497 * t690 - t849, -t504 * t690 + t514 * t693, -qJ(1) * t424 + t414 * t693 - t426 * t690, t666, t595, -t597, 0, 0, 0, -t490 * t690 - t693 * t733, -t491 * t690 + t851, -t489 * t690 + t849, -qJ(1) * t412 - t365 * t690 + t384 * t693, -t535 * t690 + t586 * t693, -t507 * t690 + t557 * t693, -t534 * t690 + t585 * t693, -t536 * t690 + t587 * t693, -t533 * t690 + t584 * t693, -t608 * t690 + t628 * t693, -qJ(1) * t462 - t344 * t690 + t357 * t693, -qJ(1) * t463 - t345 * t690 + t358 * t693, -qJ(1) * t537 - t352 * t690 + t407 * t693, -qJ(1) * t325 - t284 * t690 + t289 * t693, -t417 * t690 + t449 * t693, -t379 * t690 + t422 * t693, -t387 * t690 + t431 * t693, -t416 * t690 + t448 * t693, -t389 * t690 + t433 * t693, -t436 * t690 + t488 * t693, -qJ(1) * t335 - t262 * t690 + t277 * t693, -qJ(1) * t346 - t268 * t690 + t280 * t693, -qJ(1) * t328 - t257 * t690 + t263 * t693, -qJ(1) * t264 - t242 * t690 + t247 * t693, -t308 * t690 + t324 * t693, -t283 * t690 + t298 * t693, -t301 * t690 + t319 * t693, -t307 * t690 + t323 * t693, -t302 * t690 + t320 * t693, -t327 * t690 + t366 * t693, -qJ(1) * t274 - t239 * t690 + t243 * t693, -qJ(1) * t278 - t240 * t690 + t244 * t693, -qJ(1) * t260 - t233 * t690 + t236 * t693, -qJ(1) * t237 - t231 * t690 + t232 * t693; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t838, -t839, t610, qJ(1) * t610, 0, 0, t590, 0, -t592, -t767, t498 * t693 - t852, t497 * t693 - t850, t504 * t693 + t514 * t690, qJ(1) * t425 + t414 * t690 + t426 * t693, -t767, -t590, t592, 0, 0, 0, t490 * t693 - t690 * t733, t491 * t693 + t852, t489 * t693 + t850, qJ(1) * t413 + t365 * t693 + t384 * t690, t535 * t693 + t586 * t690, t507 * t693 + t557 * t690, t534 * t693 + t585 * t690, t536 * t693 + t587 * t690, t533 * t693 + t584 * t690, t608 * t693 + t628 * t690, qJ(1) * t464 + t344 * t693 + t357 * t690, qJ(1) * t465 + t345 * t693 + t358 * t690, qJ(1) * t538 + t352 * t693 + t407 * t690, qJ(1) * t326 + t284 * t693 + t289 * t690, t417 * t693 + t449 * t690, t379 * t693 + t422 * t690, t387 * t693 + t431 * t690, t416 * t693 + t448 * t690, t389 * t693 + t433 * t690, t436 * t693 + t488 * t690, qJ(1) * t336 + t262 * t693 + t277 * t690, qJ(1) * t347 + t268 * t693 + t280 * t690, qJ(1) * t329 + t257 * t693 + t263 * t690, qJ(1) * t265 + t242 * t693 + t247 * t690, t308 * t693 + t324 * t690, t283 * t693 + t298 * t690, t301 * t693 + t319 * t690, t307 * t693 + t323 * t690, t302 * t693 + t320 * t690, t327 * t693 + t366 * t690, qJ(1) * t275 + t239 * t693 + t243 * t690, qJ(1) * t279 + t240 * t693 + t244 * t690, qJ(1) * t261 + t233 * t693 + t236 * t690, qJ(1) * t238 + t231 * t693 + t232 * t690; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t765, t662, 0, 0, 0, 0, t637, 0, t638, t678, -t582 * t694 - t834, -t583 * t694 - t833, t515 * t691, pkin(1) * t481 + t691 * t820, t678, -t637, -t638, 0, 0, 0, t495 * t691, t564 * t694 + t834, t563 * t694 + t833, pkin(1) * t455 + t500 * t694 + t691 * t706, t621 * t694 + t691 * t721, t605 * t694 + t691 * t732, t622 * t694 + t691 * t723, t614 * t694 + t691 * t722, t619 * t694 + t691 * t724, t726 * t691, pkin(1) * t529 + t476 * t694 + t691 * t711, pkin(1) * t530 + t477 * t694 + t691 * t710, pkin(1) * t602 + t429 * t694 + t691 * t707, pkin(1) * t368 + t369 * t694 + t691 * t712, t522 * t694 + t691 * t735, t475 * t694 + t691 * t740, t485 * t694 + t691 * t739, t521 * t694 + t691 * t736, t487 * t694 + t691 * t737, t551 * t694 + t691 * t734, pkin(1) * t378 + t312 * t694 + t691 * t714, pkin(1) * t388 + t316 * t694 + t691 * t713, pkin(1) * t372 + t309 * t694 + t691 * t715, pkin(1) * t287 + t269 * t694 + t691 * t716, t376 * t694 + t691 * t745, t331 * t694 + t691 * t752, t363 * t694 + t691 * t748, t375 * t694 + t691 * t746, t364 * t694 + t691 * t747, t428 * t694 + t691 * t744, pkin(1) * t293 + t253 * t694 + t691 * t718, pkin(1) * t300 + t258 * t694 + t691 * t717, pkin(1) * t282 + t248 * t694 + t691 * t719, pkin(1) * t246 + t234 * t694 + t691 * t720;];
tauB_reg  = t1;
