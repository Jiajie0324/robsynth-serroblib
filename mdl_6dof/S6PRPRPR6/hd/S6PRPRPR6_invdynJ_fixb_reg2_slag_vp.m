% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRPR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:49:41
% EndTime: 2019-03-08 19:49:51
% DurationCPUTime: 5.95s
% Computational Cost: add. (5406->555), mult. (11446->752), div. (0->0), fcn. (8624->14), ass. (0->270)
t194 = cos(qJ(4));
t191 = sin(qJ(4));
t228 = pkin(4) * t194 + qJ(5) * t191;
t109 = qJD(4) * t228 - t194 * qJD(5) + qJD(3);
t184 = sin(pkin(11));
t187 = cos(pkin(11));
t196 = -pkin(2) - pkin(8);
t289 = qJD(4) * t194;
t262 = t196 * t289;
t186 = sin(pkin(6));
t300 = qJD(1) * t186;
t192 = sin(qJ(2));
t309 = t191 * t192;
t195 = cos(qJ(2));
t317 = t184 * t195;
t334 = t184 * t109 + t187 * t262 - (t187 * t309 + t317) * t300;
t363 = t187 * t109 - (-t184 * t309 + t187 * t195) * t300;
t312 = t186 * t192;
t188 = cos(pkin(6));
t323 = cos(pkin(10));
t243 = t323 * t192;
t185 = sin(pkin(10));
t313 = t185 * t195;
t118 = t188 * t243 + t313;
t242 = t323 * t195;
t314 = t185 * t192;
t120 = -t188 * t314 + t242;
t354 = -g(1) * t120 - g(2) * t118;
t205 = g(3) * t312 - t354;
t294 = qJD(2) * t194;
t259 = t184 * t294;
t291 = qJD(4) * t187;
t134 = -t259 + t291;
t265 = t187 * t294;
t292 = qJD(4) * t184;
t135 = t265 + t292;
t190 = sin(qJ(6));
t193 = cos(qJ(6));
t56 = -t193 * t134 + t135 * t190;
t362 = t56 ^ 2;
t59 = t134 * t190 + t135 * t193;
t361 = t59 ^ 2;
t249 = -t184 * t196 + pkin(5);
t277 = pkin(9) * t187 * t191;
t360 = (t194 * t249 + t277) * qJD(4) + t363;
t290 = qJD(4) * t191;
t359 = pkin(9) * t184 * t290 + t334;
t295 = qJD(2) * t191;
t172 = qJD(6) + t295;
t358 = t172 * t56;
t258 = t195 * t300;
t226 = qJD(3) - t258;
t129 = qJD(2) * t196 + t226;
t299 = qJD(1) * t188;
t256 = qJD(4) * t299;
t284 = qJDD(1) * t188;
t268 = qJD(2) * t312;
t157 = qJD(1) * t268;
t285 = qJDD(1) * t186;
t252 = t195 * t285;
t213 = qJDD(3) + t157 - t252;
t85 = qJDD(2) * t196 + t213;
t238 = t129 * t290 + t191 * t284 + (t256 - t85) * t194;
t275 = t129 * t289 + t191 * t85 + t194 * t284;
t26 = -t191 * t256 + t275;
t166 = t191 * t299;
t78 = t129 * t194 - t166;
t298 = qJD(1) * t194;
t257 = t188 * t298;
t79 = t129 * t191 + t257;
t201 = -(t191 * t78 - t194 * t79) * qJD(4) + t26 * t191 - t238 * t194;
t117 = -t188 * t242 + t314;
t119 = t188 * t313 + t243;
t311 = t186 * t195;
t356 = g(1) * t119 + g(2) * t117 - g(3) * t311;
t357 = t201 - t356;
t138 = t184 * t190 - t193 * t187;
t107 = t138 * t191;
t287 = qJD(6) * t193;
t288 = qJD(6) * t190;
t355 = -t184 * t288 + t187 * t287;
t182 = t191 ^ 2;
t183 = t194 ^ 2;
t303 = t182 - t183;
t239 = qJD(2) * t303;
t353 = t172 - qJD(6);
t352 = -qJDD(4) * pkin(4) + qJDD(5);
t306 = qJDD(1) - g(3);
t351 = -t306 * t312 - t354;
t271 = t192 * t300;
t297 = qJD(2) * qJ(3);
t142 = t271 + t297;
t350 = qJD(4) * (-t142 + t271 - t297) - qJDD(4) * t196;
t278 = t194 * qJDD(2);
t161 = t184 * t278;
t234 = -qJDD(4) * t187 + t161;
t286 = qJD(2) * qJD(4);
t255 = t191 * t286;
t92 = t184 * t255 - t234;
t349 = pkin(5) * t92;
t227 = pkin(4) * t191 - qJ(5) * t194;
t143 = qJ(3) + t227;
t132 = t187 * t143;
t343 = pkin(9) * t194;
t53 = -t187 * t343 + t191 * t249 + t132;
t308 = t191 * t196;
t90 = t184 * t143 + t187 * t308;
t64 = -t184 * t343 + t90;
t23 = -t190 * t64 + t193 * t53;
t348 = qJD(6) * t23 + t190 * t360 + t193 * t359;
t24 = t190 * t53 + t193 * t64;
t347 = -qJD(6) * t24 - t190 * t359 + t193 * t360;
t346 = pkin(5) * t184;
t345 = pkin(8) * t117;
t344 = pkin(8) * t119;
t340 = t59 * t56;
t339 = pkin(9) + qJ(5);
t338 = t188 ^ 2 * qJDD(1) - g(3);
t22 = qJDD(4) * qJ(5) + (qJD(5) - t166) * qJD(4) + t275;
t253 = t192 * t285;
t35 = t253 + t143 * qJDD(2) + (t109 + t258) * qJD(2);
t13 = t184 * t35 + t187 * t22;
t141 = t228 * qJD(2);
t39 = t187 * t141 - t184 * t78;
t32 = (pkin(5) * t194 + t277) * qJD(2) + t39;
t269 = t184 * t295;
t40 = t184 * t141 + t187 * t78;
t38 = pkin(9) * t269 + t40;
t151 = t339 * t184;
t152 = t339 * t187;
t76 = -t151 * t193 - t152 * t190;
t337 = -qJD(5) * t138 + qJD(6) * t76 - t190 * t32 - t193 * t38;
t139 = t184 * t193 + t187 * t190;
t77 = -t151 * t190 + t152 * t193;
t336 = -qJD(5) * t139 - qJD(6) * t77 + t190 * t38 - t193 * t32;
t65 = qJD(4) * qJ(5) + t79;
t91 = qJD(2) * t143 + t271;
t31 = t184 * t91 + t187 * t65;
t335 = -t184 * t262 + t363;
t163 = t187 * t278;
t305 = t184 * qJDD(4) + t163;
t93 = t187 * t255 - t305;
t333 = t184 * t93;
t332 = t187 * t92;
t283 = qJDD(2) * qJ(3);
t86 = t253 + t283 + (qJD(3) + t258) * qJD(2);
t331 = t192 * t86;
t25 = t238 + t352;
t330 = t194 * t25;
t329 = t194 * t92;
t328 = t194 * t93;
t327 = -t138 * qJD(2) - qJD(6) * t107 + t139 * t289;
t105 = t139 * t191;
t108 = t138 * t194;
t122 = t139 * qJD(2);
t326 = qJD(4) * t108 + qJD(6) * t105 + t122;
t266 = t187 * t295;
t325 = t190 * t269 - t193 * t266 - t355;
t124 = t139 * qJD(6);
t324 = t191 * t122 + t124;
t322 = qJDD(2) * pkin(2);
t320 = t142 * t195;
t181 = pkin(11) + qJ(6);
t177 = sin(t181);
t319 = t177 * t191;
t178 = cos(t181);
t318 = t178 * t191;
t198 = qJD(2) ^ 2;
t316 = t184 * t198;
t315 = t185 * t186;
t310 = t187 * t198;
t307 = t195 * t198;
t304 = pkin(2) * t311 + qJ(3) * t312;
t302 = t182 + t183;
t197 = qJD(4) ^ 2;
t301 = -t197 - t198;
t296 = qJD(2) * t142;
t293 = qJD(2) * t195;
t282 = qJDD(2) * t182;
t281 = qJDD(4) * t191;
t279 = t191 * qJDD(2);
t274 = t191 * t311;
t273 = t194 * t198 * t191;
t272 = t205 * t194;
t270 = t192 * t298;
t267 = t186 * t293;
t264 = t190 * t290;
t263 = t193 * t290;
t254 = t194 * t286;
t251 = t184 * t279;
t250 = t187 * t279;
t248 = -t196 + t346;
t111 = t117 * pkin(2);
t247 = -t111 - t345;
t112 = t119 * pkin(2);
t246 = -t112 - t344;
t12 = -t184 * t22 + t187 * t35;
t30 = -t184 * t65 + t187 * t91;
t245 = -t190 * t93 - t193 * t92;
t244 = t186 * t323;
t241 = qJ(3) * t118 - t111;
t240 = qJ(3) * t120 - t112;
t237 = -t134 + t291;
t236 = -t135 + t292;
t235 = t302 * qJDD(2);
t233 = g(3) * (pkin(8) * t311 + t304);
t232 = t191 * t254;
t11 = pkin(9) * t92 + t13;
t210 = t254 + t279;
t4 = pkin(5) * t210 + pkin(9) * t93 + t12;
t229 = t193 * t11 + t190 * t4;
t225 = -t12 * t184 + t13 * t187;
t224 = t184 * t31 + t187 * t30;
t223 = -t184 * t30 + t187 * t31;
t19 = pkin(5) * t295 - pkin(9) * t135 + t30;
t21 = pkin(9) * t134 + t31;
t7 = t19 * t193 - t190 * t21;
t8 = t19 * t190 + t193 * t21;
t126 = t188 * t194 - t274;
t70 = -t126 * t184 + t187 * t312;
t71 = t126 * t187 + t184 * t312;
t28 = -t190 * t71 + t193 * t70;
t29 = t190 * t70 + t193 * t71;
t220 = t86 * qJ(3) + t142 * qJD(3);
t219 = t134 * t187 - t135 * t184;
t218 = (-qJD(2) * pkin(2) + t226) * t192 + t320;
t174 = pkin(5) * t187 + pkin(4);
t217 = t174 * t191 - t194 * t339;
t216 = qJDD(2) * t192 + t307;
t125 = t188 * t191 + t194 * t311;
t17 = -t134 * t287 + t135 * t288 - t190 * t92 + t193 * t93;
t66 = -t119 * t194 + t191 * t315;
t68 = t117 * t194 + t191 * t244;
t212 = g(1) * t66 - g(2) * t68 + g(3) * t125;
t67 = t119 * t191 + t194 * t315;
t69 = -t117 * t191 + t194 * t244;
t211 = g(1) * t67 - g(2) * t69 + g(3) * t126;
t62 = -qJD(4) * pkin(4) + qJD(5) - t78;
t208 = t212 - t25;
t207 = -qJ(5) * t289 + (-qJD(5) + t62) * t191;
t204 = t356 + t252;
t2 = -qJD(6) * t8 - t190 * t11 + t193 * t4;
t203 = t212 - t238;
t18 = qJD(6) * t59 + t245;
t202 = qJDD(3) - t204;
t200 = qJD(2) * t226 - t196 * t197 + t283 + t86;
t199 = -t203 + t352;
t179 = qJDD(4) * t194;
t137 = qJDD(6) + t210;
t133 = t248 * t194;
t130 = 0.2e1 * t232 + t282;
t116 = t216 * t186;
t115 = (-qJDD(2) * t195 + t192 * t198) * t186;
t114 = t248 * t290;
t106 = t139 * t194;
t94 = t213 - t322;
t89 = -t184 * t308 + t132;
t73 = -qJD(4) * t274 + t188 * t289 - t194 * t268;
t72 = -qJD(4) * t125 + t191 * t268;
t52 = t257 + (-qJD(2) * t346 + t129) * t191;
t50 = -t184 * t263 - t187 * t264 + t355 * t194;
t48 = t124 * t194 - t184 * t264 + t187 * t263;
t46 = t184 * t267 + t187 * t72;
t45 = -t184 * t72 + t187 * t267;
t42 = -pkin(5) * t134 + t62;
t16 = t25 - t349;
t10 = -qJD(6) * t29 - t190 * t46 + t193 * t45;
t9 = qJD(6) * t28 + t190 * t45 + t193 * t46;
t1 = t7 * qJD(6) + t229;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t306, 0, 0, 0, 0, 0, 0, -t115, -t116, 0 (t192 ^ 2 + t195 ^ 2) * t186 ^ 2 * qJDD(1) + t338, 0, 0, 0, 0, 0, 0, 0, t115, t116 (qJD(2) * t218 - t195 * t94 + t331) * t186 + t338, 0, 0, 0, 0, 0, 0, -qJD(4) * t73 - qJDD(4) * t125 + (t191 * t216 + t192 * t254) * t186, -qJD(4) * t72 - qJDD(4) * t126 + (t194 * t307 + (-t255 + t278) * t192) * t186 (t125 * t194 - t126 * t191) * qJDD(2) + (-t191 * t72 + t194 * t73 + (-t125 * t191 - t126 * t194) * qJD(4)) * qJD(2), t125 * t238 + t126 * t26 + t72 * t79 - t73 * t78 - g(3) + (t142 * t293 + t331) * t186, 0, 0, 0, 0, 0, 0, t70 * t279 - t125 * t92 - t134 * t73 + (t191 * t45 + t289 * t70) * qJD(2), -t71 * t279 - t125 * t93 + t135 * t73 + (-t191 * t46 - t289 * t71) * qJD(2), t134 * t46 - t135 * t45 + t70 * t93 + t71 * t92, t12 * t70 + t125 * t25 + t13 * t71 + t30 * t45 + t31 * t46 + t62 * t73 - g(3), 0, 0, 0, 0, 0, 0, t10 * t172 + t125 * t18 + t137 * t28 + t56 * t73, -t125 * t17 - t137 * t29 - t172 * t9 + t59 * t73, -t10 * t59 + t17 * t28 - t18 * t29 - t56 * t9, t1 * t29 + t10 * t7 + t125 * t16 + t2 * t28 + t42 * t73 + t8 * t9 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t204, t351, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t202 - 0.2e1 * t322, 0.2e1 * qJD(2) * qJD(3) + 0.2e1 * t283 - t351, -t94 * pkin(2) - g(1) * t240 - g(2) * t241 - g(3) * t304 - t218 * t300 + t220, qJDD(2) * t183 - 0.2e1 * t232, 0.2e1 * qJD(4) * t239 - 0.2e1 * t191 * t278, -t191 * t197 + t179, t130, -t194 * t197 - t281, 0, -t350 * t194 + (t200 - t205) * t191, t350 * t191 + t200 * t194 - t272, t157 * t302 - t196 * t235 - t357, -g(1) * (t240 - t344) - g(2) * (t241 - t345) - t233 + (-t320 + (-t191 * t79 - t194 * t78) * t192) * t300 + t201 * t196 + t220 (-t135 * t290 - t328) * t187 (t332 + t333) * t194 - t219 * t290 (-t93 + t163) * t191 + (t135 * t194 - t187 * t239) * qJD(4) (t134 * t290 - t329) * t184 (t92 - t161) * t191 + (t134 * t194 + t184 * t239) * qJD(4), t130, t356 * t184 + (-t134 * t271 + t25 * t184 + t196 * t92 + (qJD(2) * t89 + t30) * qJD(4)) * t194 + (t89 * qJDD(2) + t12 + (-t134 * t196 - t184 * t62) * qJD(4) + t335 * qJD(2) - t205 * t187) * t191, t356 * t187 + (t135 * t271 + t25 * t187 + t196 * t93 + (-qJD(2) * t90 - t31) * qJD(4)) * t194 + (-t90 * qJDD(2) - t13 + (t135 * t196 - t187 * t62) * qJD(4) - t334 * qJD(2) + t205 * t184) * t191, t89 * t93 + t90 * t92 + (-t12 * t187 - t13 * t184) * t194 - t335 * t135 + t334 * t134 + t224 * t290 + t272, t13 * t90 + t12 * t89 - g(1) * t246 - g(2) * t247 - t233 + t334 * t31 + t335 * t30 + (t290 * t62 - t330) * t196 + (-g(3) * t227 + t298 * t62) * t312 + t354 * t143, t108 * t17 - t48 * t59, t106 * t17 + t108 * t18 + t48 * t56 - t50 * t59, -t108 * t137 - t17 * t191 - t172 * t48 + t289 * t59, t106 * t18 + t50 * t56, -t106 * t137 - t172 * t50 - t18 * t191 - t289 * t56, t137 * t191 + t172 * t289, t23 * t137 + t2 * t191 + t7 * t289 - t114 * t56 + t133 * t18 + t16 * t106 + t42 * t50 - g(1) * (-t119 * t177 + t120 * t318) - g(2) * (-t117 * t177 + t118 * t318) + t347 * t172 + (t56 * t270 - g(3) * (t177 * t195 + t178 * t309)) * t186, -t24 * t137 - t1 * t191 - t8 * t289 - t114 * t59 - t133 * t17 - t16 * t108 - t42 * t48 - g(1) * (-t119 * t178 - t120 * t319) - g(2) * (-t117 * t178 - t118 * t319) - t348 * t172 + (t59 * t270 - g(3) * (-t177 * t309 + t178 * t195)) * t186, -t1 * t106 + t108 * t2 + t17 * t23 - t18 * t24 - t347 * t59 - t348 * t56 + t48 * t7 - t50 * t8 + t272, t1 * t24 + t2 * t23 + t16 * t133 - t42 * t114 - g(1) * (-t119 * t346 + t246) - g(2) * (-t117 * t346 + t247) - t233 + t348 * t8 + t347 * t7 + (-g(3) * pkin(5) * t317 + (-g(3) * t217 + t298 * t42) * t192) * t186 + t354 * (qJ(3) + t217); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t198, t157 + t202 - t296 - t322, 0, 0, 0, 0, 0, 0, t191 * t301 + t179, t194 * t301 - t281, -t235, -t296 + t357, 0, 0, 0, 0, 0, 0, -t184 * t282 + t329 + (-t310 + (-t134 - 0.2e1 * t259) * qJD(4)) * t191, -t187 * t282 + t328 + (t316 + (t135 - 0.2e1 * t265) * qJD(4)) * t191 (qJD(2) * t135 + t134 * t289 + t191 * t92) * t187 + (-qJD(2) * t134 + t135 * t289 - t191 * t93) * t184, -t330 + t225 * t191 - t224 * qJD(2) + (t191 * t62 + t194 * t223) * qJD(4) - t356, 0, 0, 0, 0, 0, 0, -t105 * t137 - t172 * t327 - t18 * t194 + t290 * t56, t107 * t137 + t17 * t194 + t172 * t326 + t290 * t59, -t105 * t17 + t107 * t18 + t326 * t56 + t327 * t59, -t1 * t107 - t105 * t2 - t16 * t194 + t290 * t42 - t326 * t8 - t327 * t7 - t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t273, -t303 * t198, t278, -t273, -t279, qJDD(4), qJD(4) * t79 - t142 * t294 + t203, t142 * t295 + (t78 + t166) * qJD(4) + t211 - t275, 0, 0, t135 * t266 - t333, t184 * t92 - t187 * t93 + t219 * t295, t182 * t310 + t236 * t294 + t251, -t134 * t269 + t332, -t182 * t316 + t237 * t294 + t250, -t273, -qJ(5) * t251 + pkin(4) * t92 + t134 * t79 + t208 * t187 + (t184 * t207 - t191 * t39 - t194 * t30) * qJD(2), -qJ(5) * t250 + pkin(4) * t93 - t135 * t79 - t208 * t184 + (t187 * t207 + t191 * t40 + t194 * t31) * qJD(2), -t134 * t40 + t135 * t39 + (qJ(5) * t92 + qJD(5) * t134 - t295 * t30 + t13) * t187 + (-qJ(5) * t93 + qJD(5) * t135 - t295 * t31 - t12) * t184 - t211, -t30 * t39 - t31 * t40 - t62 * t79 + t223 * qJD(5) + t208 * pkin(4) + (-t211 + t225) * qJ(5), -t17 * t139 - t325 * t59, t138 * t17 - t139 * t18 - t324 * t59 + t325 * t56, t137 * t139 - t172 * t325 - t294 * t59, t18 * t138 + t324 * t56, -t137 * t138 - t172 * t324 + t294 * t56, -t172 * t294, t137 * t76 + t138 * t16 + t172 * t336 - t174 * t18 + t178 * t212 - t294 * t7 + t324 * t42 - t52 * t56, -t137 * t77 + t139 * t16 + t17 * t174 - t172 * t337 - t177 * t212 + t294 * t8 - t325 * t42 - t52 * t59, -t1 * t138 - t139 * t2 + t17 * t76 - t18 * t77 - t324 * t8 + t325 * t7 - t336 * t59 - t337 * t56 - t211, t1 * t77 + t2 * t76 - t16 * t174 - t42 * t52 - g(1) * (-t174 * t66 + t339 * t67) - g(2) * (t174 * t68 - t339 * t69) - g(3) * (-t125 * t174 + t126 * t339) + t337 * t8 + t336 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236 * t295 + t234, -t237 * t295 + t305, -t134 ^ 2 - t135 ^ 2, -t134 * t31 + t135 * t30 + t199, 0, 0, 0, 0, 0, 0, t172 * t59 + t18, -t17 - t358, -t361 - t362, t56 * t8 + t59 * t7 + t199 - t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t340, t361 - t362, -t17 + t358, -t340, t353 * t59 - t245, t137, t8 * t172 - t42 * t59 - g(1) * (t120 * t178 - t177 * t67) - g(2) * (t118 * t178 + t177 * t69) - g(3) * (-t126 * t177 + t178 * t312) + t2, t42 * t56 - g(1) * (-t120 * t177 - t178 * t67) - g(2) * (-t118 * t177 + t178 * t69) - g(3) * (-t126 * t178 - t177 * t312) - t229 + t353 * t7, 0, 0;];
tau_reg  = t3;
