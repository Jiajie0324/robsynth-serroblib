% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d4,d5,d6,theta1,theta2,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PPPRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPPRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPPRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PPPRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:40:35
% EndTime: 2019-03-08 18:40:43
% DurationCPUTime: 2.86s
% Computational Cost: add. (3389->237), mult. (10661->440), div. (0->0), fcn. (12724->16), ass. (0->142)
t156 = cos(pkin(8));
t61 = sin(pkin(8));
t154 = sin(pkin(6));
t101 = t154 * sin(pkin(13));
t153 = sin(pkin(7));
t155 = cos(pkin(14));
t102 = t155 * t153;
t158 = cos(pkin(6));
t60 = sin(pkin(14));
t103 = cos(pkin(13)) * t154;
t157 = cos(pkin(7));
t86 = t157 * t103;
t71 = t60 * t101 - t158 * t102 - t155 * t86;
t78 = -t153 * t103 + t158 * t157;
t182 = t71 * t156 - t78 * t61;
t181 = t156 * t102 + t157 * t61;
t63 = sin(qJ(5));
t143 = t63 * qJD(5);
t64 = sin(qJ(4));
t165 = t61 * t64;
t66 = cos(qJ(5));
t46 = t63 * t156 + t66 * t165;
t67 = cos(qJ(4));
t151 = qJD(4) * t67;
t129 = t61 * t151;
t123 = t66 * t156;
t45 = t63 * t165 - t123;
t144 = t45 * qJD(5);
t77 = t66 * t129 - t144;
t142 = t66 * qJD(5);
t150 = qJD(5) * t46;
t36 = t63 * t129 + t150;
t94 = t45 * t142 + t36 * t63;
t180 = -t46 * t143 + t77 * t66 + t94;
t124 = t60 * t153;
t35 = t67 * t124 + t181 * t64;
t79 = -t61 * t102 + t156 * t157;
t23 = t66 * t35 + t63 * t79;
t22 = t63 * t35 - t66 * t79;
t145 = t22 * qJD(5);
t34 = t64 * t124 - t181 * t67;
t30 = t34 * qJD(4);
t73 = t66 * t30 + t145;
t16 = t23 * qJD(5) - t63 * t30;
t95 = t22 * t142 + t16 * t63;
t179 = -t23 * t143 - t73 * t66 + t95;
t178 = -0.4e1 * t63;
t177 = t182 * t67;
t62 = sin(qJ(6));
t56 = t62 ^ 2;
t65 = cos(qJ(6));
t58 = t65 ^ 2;
t161 = t56 - t58;
t121 = qJD(6) * t161;
t32 = t155 * t101 + (t158 * t153 + t86) * t60;
t15 = -t182 * t64 + t32 * t67;
t68 = t78 * t156 + t71 * t61;
t10 = t15 * t66 + t68 * t63;
t152 = qJD(4) * t64;
t11 = t177 * qJD(4) + t32 * t152;
t3 = t10 * qJD(5) - t11 * t63;
t9 = t15 * t63 - t68 * t66;
t174 = t9 * t3;
t173 = t3 * t63;
t172 = t62 * pkin(10);
t12 = t15 * qJD(4);
t14 = t32 * t64 + t177;
t171 = t14 * t12;
t169 = t22 * t16;
t31 = t35 * qJD(4);
t168 = t34 * t31;
t166 = t45 * t36;
t164 = t61 * t67;
t163 = t65 * t66;
t57 = t63 ^ 2;
t160 = -t66 ^ 2 + t57;
t159 = qJD(5) * t9;
t149 = qJD(5) * t65;
t148 = qJD(6) * t62;
t147 = qJD(6) * t65;
t146 = qJD(6) * t66;
t141 = t66 * t172;
t140 = pkin(10) * t163;
t139 = -0.2e1 * pkin(4) * qJD(5);
t138 = -0.2e1 * pkin(5) * qJD(6);
t137 = t62 * t164;
t136 = pkin(10) * t142;
t135 = t62 * t146;
t130 = t61 * t152;
t128 = t62 * t147;
t127 = t63 * t142;
t126 = t65 * t142;
t125 = t65 * t146;
t120 = t160 * qJD(5);
t119 = 0.2e1 * t127;
t117 = t62 * t126;
t116 = t57 * t128;
t113 = -t66 * pkin(5) - t63 * pkin(11);
t112 = pkin(5) * t63 - pkin(11) * t66;
t111 = t9 * t16 + t3 * t22;
t110 = t3 * t45 + t9 * t36;
t5 = -t10 * t62 + t14 * t65;
t6 = t10 * t65 + t14 * t62;
t109 = -t5 * t65 - t6 * t62;
t108 = t12 * t34 + t14 * t31;
t107 = t16 * t45 + t22 * t36;
t17 = -t62 * t23 + t65 * t34;
t18 = t65 * t23 + t62 * t34;
t106 = -t17 * t65 - t18 * t62;
t38 = t65 * t46 - t137;
t97 = t65 * t164 + t62 * t46;
t105 = -t38 * t62 + t65 * t97;
t100 = pkin(4) - t113;
t89 = t65 * t100;
t42 = -t89 - t141;
t43 = -t62 * t100 + t140;
t104 = -t42 * t65 - t43 * t62;
t99 = t9 * t147 + t3 * t62;
t98 = t9 * t148 - t3 * t65;
t96 = t112 * t62;
t93 = t22 * t147 + t16 * t62;
t92 = t22 * t148 - t16 * t65;
t91 = t45 * t147 + t36 * t62;
t90 = t45 * t148 - t36 * t65;
t88 = t65 * t143 + t135;
t4 = -t11 * t66 - t159;
t1 = -t6 * qJD(6) + t12 * t65 - t4 * t62;
t2 = t5 * qJD(6) + t12 * t62 + t4 * t65;
t84 = t109 * qJD(6) - t1 * t62 + t2 * t65;
t83 = t173 + t4 * t66 + (-t10 * t63 + t66 * t9) * qJD(5);
t7 = -t34 * t147 + t23 * t148 - t62 * t31 + t65 * t73;
t8 = -t23 * t147 - t34 * t148 + t65 * t31 + t62 * t73;
t82 = t106 * qJD(6) - t8 * t62 - t7 * t65;
t19 = t97 * qJD(6) - t62 * t130 - t65 * t77;
t20 = qJD(6) * t137 + t65 * t130 - t46 * t147 - t62 * t77;
t81 = t105 * qJD(6) - t19 * t65 - t20 * t62;
t24 = t88 * pkin(10) - qJD(5) * t96 + qJD(6) * t89;
t25 = -t43 * qJD(6) + (t65 * t112 + t63 * t172) * qJD(5);
t80 = t104 * qJD(6) - t24 * t65 - t25 * t62;
t54 = -0.2e1 * t127;
t39 = t63 * t121 - t117;
t13 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t15 * t11 + 0.2e1 * t171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t10 * t4 + 0.2e1 * t171 + 0.2e1 * t174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t5 * t1 + 0.2e1 * t6 * t2 + 0.2e1 * t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11 * t35 - t15 * t30 + t108, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t73 + t4 * t23 + t108 + t111, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t17 + t2 * t18 + t5 * t8 - t6 * t7 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t35 * t30 + 0.2e1 * t168, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t23 * t73 + 0.2e1 * t168 + 0.2e1 * t169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t17 * t8 - 0.2e1 * t18 * t7 + 0.2e1 * t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t11 * t64 - t12 * t67 + (t14 * t64 + t15 * t67) * qJD(4)) * t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t77 - t12 * t164 + t14 * t130 + t4 * t46 + t110, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t97 - t6 * t19 + t2 * t38 + t5 * t20 + t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t30 * t64 - t31 * t67 + (t34 * t64 + t35 * t67) * qJD(4)) * t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * t130 - t31 * t164 + t23 * t77 - t73 * t46 + t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t20 - t18 * t19 - t7 * t38 - t8 * t97 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t123 * t150 + 0.2e1 * t166 + 0.2e1 * (t46 * (-t64 * t143 + t66 * t151) - t64 * t129) * t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t38 * t19 - 0.2e1 * t20 * t97 + 0.2e1 * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, t11, 0, 0, 0, 0, 0, 0, 0, 0, -t12 * t66 + t14 * t143, t12 * t63 + t14 * t142, t83, -t12 * pkin(4) + t83 * pkin(10), 0, 0, 0, 0, 0, 0 (t62 * t159 - t1) * t66 + (qJD(5) * t5 + t99) * t63 (t9 * t149 + t2) * t66 + (-qJD(5) * t6 - t98) * t63, t109 * t142 + (-t1 * t65 - t2 * t62 + (t5 * t62 - t6 * t65) * qJD(6)) * t63, t1 * t42 + t2 * t43 - t6 * t24 + t5 * t25 + (t9 * t142 + t173) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t30, 0, 0, 0, 0, 0, 0, 0, 0, t34 * t143 - t31 * t66, t34 * t142 + t31 * t63, t179, -t31 * pkin(4) + t179 * pkin(10), 0, 0, 0, 0, 0, 0 (t62 * t145 - t8) * t66 + (qJD(5) * t17 + t93) * t63 (t65 * t145 - t7) * t66 + (-qJD(5) * t18 - t92) * t63, t106 * t142 + (t62 * t7 - t65 * t8 + (t17 * t62 - t18 * t65) * qJD(6)) * t63, pkin(10) * t95 + t17 * t25 - t18 * t24 + t8 * t42 - t7 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -t129, 0, 0, 0, 0, 0, 0, 0, 0 (-t67 * t143 - t66 * t152) * t61 (-t67 * t142 + t63 * t152) * t61, t180, -pkin(4) * t130 + t180 * pkin(10), 0, 0, 0, 0, 0, 0 (t62 * t144 - t20) * t66 + (-qJD(5) * t97 + t91) * t63 (t65 * t144 - t19) * t66 + (-qJD(5) * t38 - t90) * t63, t105 * t142 + (t19 * t62 - t20 * t65 + (-t38 * t65 - t62 * t97) * qJD(6)) * t63, pkin(10) * t94 - t19 * t43 + t20 * t42 - t38 * t24 - t25 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, -0.2e1 * t120, 0, t54, 0, 0, t63 * t139, t66 * t139, 0, 0, 0.2e1 * t58 * t127 - 0.2e1 * t116, t117 * t178 + 0.2e1 * t121 * t57, 0.2e1 * t63 * t135 + 0.2e1 * t160 * t149, 0.2e1 * t127 * t56 + 0.2e1 * t116, -0.2e1 * t120 * t62 + 0.2e1 * t125 * t63, t54, 0.2e1 * t42 * t143 - 0.2e1 * t25 * t66 + 0.2e1 * (t119 * t62 + t57 * t147) * pkin(10), -0.2e1 * t43 * t143 - 0.2e1 * t24 * t66 + 0.2e1 * (t119 * t65 - t57 * t148) * pkin(10), 0.2e1 * t104 * t142 + 0.2e1 * (t24 * t62 - t25 * t65 + (t42 * t62 - t43 * t65) * qJD(6)) * t63, 0.2e1 * pkin(10) ^ 2 * t127 - 0.2e1 * t43 * t24 + 0.2e1 * t42 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3, -t4, 0, 0, 0, 0, 0, 0, 0, 0, t98, t99, t84, -t3 * pkin(5) + pkin(11) * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, t73, 0, 0, 0, 0, 0, 0, 0, 0, t92, t93, t82, -t16 * pkin(5) + pkin(11) * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t77, 0, 0, 0, 0, 0, 0, 0, 0, t90, t91, t81, -t36 * pkin(5) + pkin(11) * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, 0, -t143, 0, -t136, pkin(10) * t143, 0, 0, -t39, t128 * t178 - t161 * t142, t62 * t143 - t125, t39, t88, 0 (pkin(11) * t163 + (-t65 * pkin(5) + t172) * t63) * qJD(6) + (t113 * t62 - t140) * qJD(5) (pkin(10) * t63 * t65 + t96) * qJD(6) + (t113 * t65 + t141) * qJD(5), t80, -pkin(5) * t136 + pkin(11) * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t128, -0.2e1 * t121, 0, -0.2e1 * t128, 0, 0, t62 * t138, t65 * t138, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, t19, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63 * t148 + t126, 0, -t62 * t142 - t63 * t147, t143, t25, t24, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, 0, -t148, 0, -pkin(11) * t147, pkin(11) * t148, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t13;
