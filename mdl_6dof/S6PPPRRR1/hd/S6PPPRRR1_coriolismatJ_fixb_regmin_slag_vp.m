% Calculate minimal parameter regressor of coriolis matrix for
% S6PPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d4,d5,d6,theta1,theta2,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x20]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PPPRRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PPPRRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:40:37
% EndTime: 2019-03-08 18:40:43
% DurationCPUTime: 2.25s
% Computational Cost: add. (3310->220), mult. (10170->416), div. (0->0), fcn. (12567->16), ass. (0->182)
t177 = sin(qJ(6));
t294 = 0.2e1 * t177;
t172 = t177 ^ 2;
t180 = cos(qJ(6));
t174 = t180 ^ 2;
t163 = t172 - t174;
t176 = sin(pkin(8));
t276 = sin(pkin(6));
t212 = cos(pkin(13)) * t276;
t279 = cos(pkin(7));
t198 = t279 * t212;
t210 = t276 * sin(pkin(13));
t275 = sin(pkin(7));
t277 = cos(pkin(14));
t211 = t277 * t275;
t274 = sin(pkin(14));
t280 = cos(pkin(6));
t183 = -t277 * t198 + t274 * t210 - t280 * t211;
t185 = -t275 * t212 + t280 * t279;
t278 = cos(pkin(8));
t293 = -t185 * t176 + t183 * t278;
t292 = t279 * t176 + t278 * t211;
t178 = sin(qJ(5));
t249 = t178 * qJD(4);
t237 = t180 * t249;
t190 = t163 * qJD(5) + t237 * t294;
t181 = cos(qJ(5));
t284 = t181 * pkin(11);
t285 = t178 * pkin(5);
t158 = -t284 + t285;
t291 = -t158 / 0.2e1;
t290 = -t178 / 0.2e1;
t289 = t178 / 0.2e1;
t288 = -t181 / 0.2e1;
t287 = t181 / 0.2e1;
t286 = cos(qJ(4));
t179 = sin(qJ(4));
t209 = t275 * t274;
t118 = t292 * t179 + t286 * t209;
t186 = -t176 * t211 + t278 * t279;
t92 = t181 * t118 + t178 * t186;
t283 = t177 * t92;
t114 = t274 * t198 + t280 * t209 + t277 * t210;
t66 = t114 * t286 - t293 * t179;
t282 = t66 * t177;
t281 = t66 * t180;
t173 = t178 ^ 2;
t273 = t173 * t180;
t272 = t176 * t179;
t271 = t177 * t118;
t270 = t177 * t173;
t269 = t177 * t178;
t268 = t177 * t179;
t267 = t177 * t181;
t266 = t178 * t180;
t265 = t179 * t180;
t117 = t179 * t209 - t292 * t286;
t264 = t180 * t117;
t263 = t180 * t118;
t262 = t180 * t158;
t261 = t180 * t181;
t213 = -t181 * pkin(5) - t178 * pkin(11);
t156 = -pkin(4) + t213;
t244 = pkin(10) * t261;
t132 = t177 * t156 + t244;
t89 = t158 * t267 + (-t132 + t244) * t178;
t260 = t89 * qJD(4);
t164 = t181 ^ 2 - t173;
t259 = qJD(4) * t176;
t258 = qJD(5) * t177;
t257 = qJD(5) * t180;
t256 = qJD(6) * t177;
t255 = qJD(6) * t180;
t254 = qJD(6) * t181;
t140 = t178 * t278 + t181 * t272;
t253 = t140 * qJD(5);
t149 = t164 * t177;
t252 = t149 * qJD(4);
t150 = t164 * t180;
t251 = t150 * qJD(4);
t250 = t164 * qJD(4);
t248 = t178 * qJD(5);
t247 = t181 * qJD(4);
t246 = t181 * qJD(5);
t245 = pkin(10) * t267;
t168 = pkin(10) * t269;
t243 = pkin(4) * t249;
t242 = pkin(4) * t247;
t241 = t283 / 0.2e1;
t240 = t176 * t286;
t239 = t181 * t286;
t238 = t286 * t173;
t236 = t177 * t254;
t235 = t177 * t255;
t234 = t178 * t246;
t233 = t178 * t247;
t232 = t177 * t257;
t231 = t180 * t254;
t230 = -t269 / 0.2e1;
t229 = t269 / 0.2e1;
t228 = t267 / 0.2e1;
t227 = t266 / 0.2e1;
t226 = t264 / 0.2e1;
t225 = t261 / 0.2e1;
t224 = qJD(5) * t286;
t222 = -qJD(6) + t247;
t221 = t177 * t240;
t220 = t180 * t240;
t218 = t178 * t232;
t217 = qJD(4) * t240;
t216 = -t239 / 0.2e1;
t91 = t178 * t118 - t181 * t186;
t215 = -t118 / 0.2e1 + t91 * t289;
t67 = -t264 + t283;
t214 = t226 + t67 / 0.2e1;
t90 = t183 * t176 + t185 * t278;
t42 = t90 * t178 + t66 * t181;
t65 = t114 * t179 + t293 * t286;
t208 = t65 * t177 + t42 * t180;
t207 = t42 * t177 - t65 * t180;
t206 = t177 * t117 + t180 * t92;
t13 = (t241 - t214) * t178;
t131 = -t180 * t156 + t245;
t88 = t131 * t178 + (-t168 + t262) * t181;
t205 = t13 * qJD(2) - t88 * qJD(4);
t204 = t222 * t178;
t203 = t284 / 0.2e1 - t285 / 0.2e1;
t194 = t291 + t203;
t119 = t194 * t177;
t202 = pkin(5) * t257 + t119 * qJD(4);
t120 = t194 * t180;
t201 = pkin(5) * t258 - t120 * qJD(4);
t200 = t180 * t204;
t141 = (t174 / 0.2e1 - t172 / 0.2e1) * t178;
t199 = t141 * qJD(4) + t232;
t196 = t177 * t140 + t220;
t195 = t180 * t140 - t221;
t41 = t66 * t178 - t90 * t181;
t193 = t66 / 0.2e1 + t42 * t288 + t41 * t290;
t192 = t180 * qJD(4) * t270 - t141 * qJD(5);
t151 = t163 * t173;
t191 = -t151 * qJD(4) + 0.2e1 * t218;
t139 = t178 * t272 - t181 * t278;
t189 = t272 / 0.2e1 + t140 * t288 + t139 * t290;
t115 = -pkin(10) * t270 - t131 * t181;
t22 = t215 * t177 + t214 * t181;
t6 = t193 * t177;
t69 = t189 * t177;
t188 = -t6 * qJD(1) + t22 * qJD(2) - t69 * qJD(3) - t115 * qJD(4);
t116 = -pkin(10) * t273 - t132 * t181;
t21 = (t92 * t288 - t215) * t180;
t5 = t193 * t180;
t68 = t189 * t180;
t187 = t5 * qJD(1) + t21 * qJD(2) + t68 * qJD(3) + t116 * qJD(4);
t170 = t248 / 0.2e1;
t144 = (t247 - qJD(6) / 0.2e1) * t178;
t138 = t141 * qJD(6);
t109 = t168 + t262 / 0.2e1 + t203 * t180;
t108 = pkin(10) * t266 + (-t203 + t291) * t177;
t96 = t139 * t180;
t95 = t139 * t177;
t75 = t117 * t181;
t74 = t117 * t178;
t71 = t195 * t287 + t139 * t227 + (t177 * t216 + t265 / 0.2e1) * t176;
t70 = t196 * t288 + t139 * t230 + (t180 * t216 - t268 / 0.2e1) * t176;
t50 = t140 * t227 + t195 * t290 + t221 * t289;
t49 = t140 * t229 + (t196 + t220) * t290;
t46 = t91 * t180;
t45 = t91 * t177;
t28 = t65 * t181;
t26 = t65 * t178;
t24 = t206 * t287 + t91 * t227 + t117 * t228 + t263 / 0.2e1;
t23 = t67 * t288 + t91 * t230 + t117 * t225 - t271 / 0.2e1;
t16 = t117 * t230 + t206 * t290 + t92 * t227;
t14 = (t226 - t67 / 0.2e1 + t241) * t178;
t12 = t41 * t180;
t10 = t41 * t177;
t8 = t208 * t287 + t41 * t227 + t65 * t228 + t281 / 0.2e1;
t7 = t207 * t288 + t41 * t230 + t65 * t225 - t282 / 0.2e1;
t4 = t208 * t290 + t42 * t227 + t65 * t230;
t3 = t207 * t290 + t65 * t227 + t42 * t229;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -t66 * qJD(4), t65 * qJD(4), 0, 0, 0, 0, 0, t26 * qJD(5) - t66 * t247, t28 * qJD(5) + t66 * t249, 0, 0, 0, 0, 0 (-(t65 * t267 + t281) * t181 - t65 * t270) * qJD(4) + t3 * qJD(5) + t8 * qJD(6) ((-t65 * t261 + t282) * t181 - t65 * t273) * qJD(4) + t4 * qJD(5) + t7 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(4) - t42 * qJD(5), t28 * qJD(4) + t41 * qJD(5), 0, 0, 0, 0, 0, t3 * qJD(4) + t10 * qJD(6) - t42 * t257, t4 * qJD(4) + t12 * qJD(6) + t42 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 * qJD(4) + t10 * qJD(5) - qJD(6) * t208, t7 * qJD(4) + t12 * qJD(5) + qJD(6) * t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -t118 * qJD(4), t117 * qJD(4), 0, 0, 0, 0, 0, t74 * qJD(5) - t118 * t247, t75 * qJD(5) + t118 * t249, 0, 0, 0, 0, 0 (-(t117 * t267 + t263) * t181 - t117 * t270) * qJD(4) + t14 * qJD(5) + t24 * qJD(6) ((-t117 * t261 + t271) * t181 - t173 * t264) * qJD(4) + t16 * qJD(5) + t23 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 * qJD(4) - t92 * qJD(5), t75 * qJD(4) + t91 * qJD(5), 0, 0, 0, 0, 0, t14 * qJD(4) + t45 * qJD(6) - t92 * t257, t16 * qJD(4) + t46 * qJD(6) + t92 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 * qJD(4) + t45 * qJD(5) - qJD(6) * t206, t23 * qJD(4) + t46 * qJD(5) + t67 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, -t179 * t259, -t217, 0, 0, 0, 0, 0 (-t178 * t224 - t179 * t247) * t176 (t179 * t249 - t181 * t224) * t176, 0, 0, 0, 0, 0 (-(-t177 * t239 + t265) * t181 + t177 * t238) * t259 + t49 * qJD(5) + t71 * qJD(6) ((t180 * t239 + t268) * t181 + t180 * t238) * t259 + t50 * qJD(5) + t70 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t178 * t217 - t253, t139 * qJD(5) - t181 * t217, 0, 0, 0, 0, 0, t49 * qJD(4) + t95 * qJD(6) - t180 * t253, t50 * qJD(4) + t96 * qJD(6) + t177 * t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71 * qJD(4) + t95 * qJD(5) - qJD(6) * t195, t70 * qJD(4) + t96 * qJD(5) + qJD(6) * t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5 * qJD(6), t6 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * qJD(5) - t21 * qJD(6), -t22 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68 * qJD(6), t69 * qJD(6); 0, 0, 0, 0, 0, 0, t234, t164 * qJD(5), 0, 0, 0, -pkin(4) * t248, -pkin(4) * t246, -t173 * t235 + t174 * t234, t151 * qJD(6) - 0.2e1 * t181 * t218, -t150 * qJD(5) + t178 * t236, t149 * qJD(5) + t178 * t231, -t234, -t88 * qJD(5) - t116 * qJD(6), t89 * qJD(5) + t115 * qJD(6); 0, 0, 0, 0, 0, 0, t233, t250, t246, -t248, 0, -pkin(10) * t246 - t243, pkin(10) * t248 - t242, t138 + (t174 * t249 + t232) * t181, -0.2e1 * t178 * t235 - t190 * t181, t177 * t248 - t251, t180 * t248 + t252, -t144 (t177 * t213 - t244) * qJD(5) + t109 * qJD(6) + t205, t260 + (t180 * t213 + t245) * qJD(5) + t108 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, -t191, t177 * t204, t200, t170, t109 * qJD(5) - t132 * qJD(6) - t187, t108 * qJD(5) + t131 * qJD(6) - t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13 * qJD(4), 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, -t233, -t250, 0, 0, 0, t243, t242, -t174 * t233 + t138, t200 * t294, -t231 + t251, t236 - t252, t144, t120 * qJD(6) - t205, -t119 * qJD(6) - t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235, -t163 * qJD(6), 0, 0, 0, -pkin(5) * t256, -pkin(5) * t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, -t190, -t222 * t180, t222 * t177, -t249 / 0.2e1, -pkin(11) * t255 - t201, pkin(11) * t256 - t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 * qJD(4), -t6 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 * qJD(4), t22 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 * qJD(4), -t69 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t191 (-t177 * t249 + t257) * t181 (-t237 - t258) * t181, t170, -t120 * qJD(5) + t187, t119 * qJD(5) + t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t199, t190, t180 * t247, -t177 * t247, t249 / 0.2e1, t201, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t1;
