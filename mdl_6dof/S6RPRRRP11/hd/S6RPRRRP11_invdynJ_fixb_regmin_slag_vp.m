% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP11_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:41:17
% EndTime: 2019-03-09 06:41:46
% DurationCPUTime: 12.53s
% Computational Cost: add. (17990->638), mult. (57334->877), div. (0->0), fcn. (49848->14), ass. (0->291)
t267 = sin(pkin(12));
t269 = cos(pkin(12));
t419 = cos(pkin(6));
t446 = cos(qJ(1));
t352 = t419 * t446;
t444 = sin(qJ(1));
t214 = t267 * t352 + t269 * t444;
t273 = sin(qJ(3));
t445 = cos(qJ(3));
t310 = t444 * t267 - t269 * t352;
t268 = sin(pkin(6));
t417 = sin(pkin(7));
t369 = t268 * t417;
t418 = cos(pkin(7));
t474 = t310 * t418 + t446 * t369;
t141 = -t214 * t445 + t273 * t474;
t272 = sin(qJ(4));
t275 = cos(qJ(4));
t370 = t268 * t418;
t451 = t310 * t417 - t446 * t370;
t110 = t141 * t275 - t272 * t451;
t138 = t214 * t273 + t445 * t474;
t271 = sin(qJ(5));
t274 = cos(qJ(5));
t477 = t110 * t271 + t138 * t274;
t413 = t138 * t271;
t476 = t110 * t274 - t413;
t410 = t267 * t268;
t377 = qJD(1) * t410;
t339 = t419 * t417;
t311 = t445 * t339;
t350 = t418 * t445;
t333 = t269 * t350;
t464 = -t268 * t333 - t311;
t399 = t464 * qJD(1);
t171 = t273 * t377 + t399;
t309 = qJD(4) + t171;
t368 = t273 * t418;
t298 = t268 * (-t267 * t368 + t269 * t445);
t349 = t417 * t445;
t328 = qJD(3) * t349;
t472 = -qJD(1) * t298 + t328;
t109 = t141 * t272 + t275 * t451;
t203 = (-pkin(9) * t267 * t417 - pkin(2) * t269 - pkin(1)) * t268;
t192 = qJD(1) * t203 + qJD(2);
t367 = t273 * t417;
t253 = t269 * t268 * qJ(2);
t361 = qJD(1) * t419;
t357 = pkin(1) * t361;
t210 = qJD(1) * t253 + t267 * t357;
t290 = (t269 * t370 + t339) * pkin(9);
t160 = qJD(1) * t290 + t210;
t249 = t269 * t357;
t291 = t419 * pkin(2) + (-pkin(9) * t418 - qJ(2)) * t410;
t166 = qJD(1) * t291 + t249;
t469 = t445 * t160 + t166 * t368;
t97 = t192 * t367 + t469;
t473 = -t97 + t309 * (pkin(4) * t272 - pkin(11) * t275);
t354 = t269 * t368;
t306 = t267 * t445 + t354;
t327 = t273 * t339;
t186 = t268 * t306 + t327;
t174 = t186 * qJD(3);
t281 = qJD(1) * t174;
t386 = qJDD(1) * t268;
t374 = t267 * t386;
t400 = t464 * qJDD(1);
t312 = t273 * t374 + t400;
t308 = qJDD(4) + t312;
t458 = t281 + t308;
t468 = t273 * t160 - t166 * t350;
t218 = t272 * t367 - t275 * t418;
t348 = qJD(1) * t369;
t330 = t267 * t348;
t467 = -qJD(4) * t218 - t272 * t330 + t275 * t472;
t297 = t268 * (t267 * t350 + t269 * t273);
t199 = qJD(1) * t297;
t347 = qJD(3) * t367;
t466 = t199 - t347;
t175 = t186 * qJD(1);
t340 = t419 * t418;
t389 = -t269 * t348 + qJD(3);
t305 = -qJD(1) * t340 - t389;
t132 = t272 * t175 + t275 * t305;
t122 = -qJD(3) * t171 + qJDD(1) * t327 + t354 * t386 + t445 * t374;
t213 = t269 * t369 - t340;
t207 = qJDD(1) * t213 - qJDD(3);
t338 = t275 * t122 - t272 * t207;
t279 = -qJD(4) * t132 + t338;
t465 = qJD(5) * t309 + t279;
t270 = -qJ(6) - pkin(11);
t463 = -qJ(6) * t132 + qJD(5) * t270;
t380 = pkin(1) * t419;
t217 = t267 * t380 + t253;
t178 = t290 + t217;
t257 = t269 * t380;
t187 = t257 + t291;
t382 = t445 * t178 + (t418 * t187 + t417 * t203) * t273;
t395 = qJD(4) * t272;
t384 = pkin(10) * t395;
t462 = t271 * t384 + t274 * t473;
t265 = t268 ^ 2;
t461 = t265 * (t267 ^ 2 + t269 ^ 2);
t287 = -t273 * t178 + t187 * t350 + t203 * t349;
t219 = t272 * t418 + t275 * t367;
t403 = qJD(4) * t219 + t272 * t472 + t275 * t330;
t351 = t419 * t444;
t301 = t267 * t446 + t269 * t351;
t457 = t301 * t418 - t444 * t369;
t394 = qJD(4) * t275;
t406 = t275 * t171;
t456 = t394 + t406;
t411 = t171 * t272;
t455 = t395 + t411;
t239 = -pkin(4) * t275 - pkin(11) * t272 - pkin(3);
t391 = qJD(5) * t274;
t124 = pkin(3) * t175 + pkin(10) * t171;
t96 = t192 * t349 - t468;
t420 = t272 * t124 + t275 * t96;
t52 = pkin(11) * t175 + t420;
t454 = -t239 * t391 - t271 * t473 + t274 * t52;
t134 = t275 * t175 - t272 * t305;
t123 = t281 + t312;
t277 = qJDD(4) + t123;
t30 = t134 * t391 + t465 * t271 - t274 * t277;
t453 = t30 * pkin(5) + qJDD(6);
t215 = -t267 * t351 + t269 * t446;
t143 = t215 * t445 - t273 * t457;
t313 = g(1) * t143 - g(2) * t141 + g(3) * t186;
t142 = t215 * t273 + t445 * t457;
t409 = t267 * t273;
t383 = t268 * t409;
t185 = t383 + t464;
t314 = g(1) * t142 + g(2) * t138 + g(3) * t185;
t137 = t186 * t275 - t213 * t272;
t105 = t137 * t271 - t185 * t274;
t282 = -t301 * t417 - t370 * t444;
t112 = t143 * t275 - t272 * t282;
t67 = -t112 * t271 + t142 * t274;
t452 = -g(1) * t67 - g(2) * t477 + g(3) * t105;
t356 = qJDD(1) * t380;
t388 = qJD(1) * qJD(2);
t375 = t268 * t388;
t196 = qJDD(1) * t253 + t267 * t356 + t269 * t375;
t148 = qJDD(1) * t290 + t196;
t247 = t269 * t356;
t149 = qJDD(1) * t291 - t267 * t375 + t247;
t188 = qJDD(1) * t203 + qJDD(2);
t325 = t469 * qJD(3) + t273 * t148 - t149 * t350 - t188 * t349 + t192 * t347;
t45 = t207 * pkin(3) + t325;
t450 = -t45 + t314;
t101 = t274 * t134 + t271 * t309;
t449 = t101 ^ 2;
t443 = pkin(1) * t265;
t442 = pkin(5) * t271;
t441 = pkin(10) * t275;
t129 = -t166 * t417 + t418 * t192;
t73 = t171 * pkin(3) - t175 * pkin(10) + t129;
t77 = -pkin(10) * t305 + t97;
t38 = t272 * t73 + t275 * t77;
t32 = pkin(11) * t309 + t38;
t76 = pkin(3) * t305 - t96;
t48 = t132 * pkin(4) - t134 * pkin(11) + t76;
t19 = -t271 * t32 + t274 * t48;
t12 = -qJ(6) * t101 + t19;
t131 = qJD(5) + t132;
t11 = pkin(5) * t131 + t12;
t433 = -t12 + t11;
t37 = -t272 * t77 + t275 * t73;
t86 = pkin(4) * t134 + pkin(11) * t132;
t432 = t271 * t86 + t274 * t37;
t135 = -t187 * t417 + t418 * t203;
t88 = t185 * pkin(3) - t186 * pkin(10) + t135;
t95 = -pkin(10) * t213 + t382;
t429 = t272 * t88 + t275 * t95;
t43 = pkin(11) * t185 + t429;
t136 = t186 * t272 + t213 * t275;
t94 = t213 * pkin(3) - t287;
t57 = t136 * pkin(4) - t137 * pkin(11) + t94;
t431 = t271 * t57 + t274 * t43;
t99 = t134 * t271 - t274 * t309;
t428 = t131 * t99;
t392 = qJD(5) * t271;
t29 = t134 * t392 - t271 * t277 - t465 * t274;
t427 = t271 * t29;
t360 = t272 * t122 + t275 * t207;
t66 = t134 * qJD(4) + t360;
t65 = qJDD(5) + t66;
t426 = t271 * t65;
t425 = t274 * t65;
t117 = t175 * t271 - t274 * t406;
t407 = t274 * t275;
t259 = pkin(10) * t407;
t390 = qJD(6) * t274;
t415 = qJ(6) * t272;
t424 = pkin(5) * t411 + qJ(6) * t117 + t271 * t52 - t272 * t390 + (pkin(5) * t272 - qJ(6) * t407) * qJD(4) + (-t259 + (-t239 + t415) * t271) * qJD(5) + t462;
t116 = -t274 * t175 - t271 * t406;
t408 = t272 * t274;
t423 = qJ(6) * t116 + (-pkin(10) * qJD(4) - qJ(6) * qJD(5)) * t408 + (-qJD(6) * t272 + (-pkin(10) * qJD(5) - qJ(6) * qJD(4)) * t275) * t271 - t454;
t422 = t463 * t271 + t390 - t432;
t81 = t274 * t86;
t421 = -pkin(5) * t134 - t81 + t463 * t274 + (-qJD(6) + t37) * t271;
t414 = t101 * t131;
t359 = t131 * t274;
t412 = t142 * t271;
t307 = -t274 * t219 + t271 * t349;
t405 = -qJD(5) * t307 + t467 * t271 + t466 * t274;
t193 = -t271 * t219 - t274 * t349;
t404 = -qJD(5) * t193 + t466 * t271 - t467 * t274;
t398 = t271 * t239 + t259;
t378 = t268 * t444;
t397 = t446 * pkin(1) + qJ(2) * t378;
t393 = qJD(5) * t131;
t387 = qJDD(1) * t267;
t385 = g(1) * t444;
t379 = t268 * t446;
t376 = qJD(4) + t399;
t373 = -t271 * t43 + t274 * t57;
t372 = -t272 * t95 + t275 * t88;
t276 = qJD(1) ^ 2;
t366 = t276 * t419;
t304 = t468 * qJD(3) - t445 * t148 - t149 * t368 - t188 * t367 - t192 * t328;
t44 = -pkin(10) * t207 - t304;
t115 = -t149 * t417 + t418 * t188;
t58 = t123 * pkin(3) - t122 * pkin(10) + t115;
t363 = t272 * t44 - t275 * t58 + t77 * t394 + t73 * t395;
t362 = t124 * t275 - t272 * t96;
t353 = -pkin(1) * t444 + qJ(2) * t379;
t111 = t143 * t272 + t275 * t282;
t345 = g(1) * t109 + g(2) * t111;
t344 = qJD(2) * t361;
t342 = g(2) * t379 - g(3) * t419;
t341 = t274 * t394 - t117;
t20 = t271 * t48 + t274 * t32;
t106 = t137 * t274 + t185 * t271;
t337 = (-qJ(2) * t377 + t249) * t267 - t210 * t269;
t173 = (t311 + (t333 - t409) * t268) * qJD(3);
t329 = t267 * qJD(2) * t369;
t114 = t174 * pkin(3) - t173 * pkin(10) + t329;
t82 = qJD(2) * t298 + qJD(3) * t287;
t336 = t114 * t275 - t272 * t82 - t95 * t394 - t88 * t395;
t42 = -pkin(4) * t185 - t372;
t51 = -pkin(4) * t175 - t362;
t17 = t66 * pkin(4) - pkin(11) * t279 + t45;
t323 = -t272 * t58 - t275 * t44 - t73 * t394 + t395 * t77;
t9 = pkin(11) * t458 - t323;
t324 = -t271 * t17 - t274 * t9 + t32 * t392 - t48 * t391;
t320 = t272 * t114 + t275 * t82 + t88 * t394 - t395 * t95;
t25 = pkin(11) * t174 + t320;
t103 = qJD(4) * t137 + t173 * t272;
t104 = -qJD(4) * t136 + t173 * t275;
t83 = qJD(2) * t297 + t382 * qJD(3);
t35 = t103 * pkin(4) - t104 * pkin(11) + t83;
t322 = t274 * t25 + t271 * t35 + t57 * t391 - t392 * t43;
t31 = -pkin(4) * t309 - t37;
t321 = -pkin(11) * t65 + t131 * t31;
t317 = g(1) * t446 + g(2) * t444;
t316 = g(1) * t111 - g(2) * t109 + g(3) * t136;
t315 = -g(1) * t112 + g(2) * t110 - g(3) * t137;
t26 = -pkin(4) * t174 - t336;
t303 = qJD(4) * t309;
t4 = -qJD(5) * t20 + t274 * t17 - t271 * t9;
t296 = pkin(10) * t393 - t314;
t295 = t316 - t363;
t294 = -qJD(5) * t431 - t25 * t271 + t274 * t35;
t10 = -pkin(4) * t458 + t363;
t292 = pkin(11) * t393 + t10 - t316;
t280 = t171 * t309 + t303;
t262 = pkin(5) * t274 + pkin(4);
t250 = -pkin(1) * t386 + qJDD(2);
t241 = t270 * t274;
t240 = t270 * t271;
t228 = t274 * t239;
t216 = -qJ(2) * t410 + t257;
t197 = -t271 * t415 + t398;
t195 = t247 + (-qJ(2) * qJDD(1) - t388) * t410;
t184 = -qJ(6) * t408 + t228 + (-pkin(10) * t271 - pkin(5)) * t275;
t98 = t99 ^ 2;
t68 = t112 * t274 + t412;
t60 = -qJD(5) * t105 + t104 * t274 + t174 * t271;
t59 = qJD(5) * t106 + t104 * t271 - t174 * t274;
t28 = t99 * pkin(5) + qJD(6) + t31;
t18 = -qJ(6) * t105 + t431;
t14 = pkin(5) * t136 - qJ(6) * t106 + t373;
t13 = -qJ(6) * t99 + t20;
t7 = t10 + t453;
t6 = -qJ(6) * t59 - qJD(6) * t105 + t322;
t5 = pkin(5) * t103 - qJ(6) * t60 - qJD(6) * t106 + t294;
t2 = -qJ(6) * t30 - qJD(6) * t99 - t324;
t1 = pkin(5) * t65 + qJ(6) * t29 - qJD(6) * t101 + t4;
t3 = [qJDD(1), -g(2) * t446 + t385, t317, t195 * t419 + g(1) * t214 - g(2) * t215 + (-t250 * t269 - t267 * t344) * t268 + (t216 * t419 + t269 * t443) * qJDD(1), -t196 * t419 - g(1) * t310 + g(2) * t301 + (t250 * t267 - t269 * t344) * t268 + (-t217 * t419 - t267 * t443) * qJDD(1), t388 * t461 + (-t195 * t267 + t196 * t269 + (-t216 * t267 + t217 * t269) * qJDD(1) - t317) * t268, t196 * t217 + t195 * t216 - g(1) * t353 - g(2) * t397 + (-t250 * pkin(1) - qJD(2) * t337) * t268, t122 * t186 + t173 * t175, -t122 * t185 - t123 * t186 - t171 * t173 - t174 * t175, -t122 * t213 - t173 * t305 - t186 * t207, t123 * t213 + t174 * t305 + t185 * t207, t207 * t213, -g(1) * t141 - g(2) * t143 + t115 * t185 + t135 * t123 + t129 * t174 + t171 * t329 - t207 * t287 + t213 * t325 + t305 * t83, -g(1) * t138 + g(2) * t142 + t115 * t186 + t135 * t122 + t129 * t173 + t175 * t329 + t207 * t382 - t213 * t304 + t305 * t82, t134 * t104 + t137 * t279, -t134 * t103 - t104 * t132 - t136 * t279 - t137 * t66, t104 * t376 + t137 * (qJD(1) * qJD(3) * t327 + qJDD(4) + t400) + t279 * t185 + t134 * t174 + (t137 * t273 * t387 + (qJD(3) * t137 * t306 + t104 * t409) * qJD(1)) * t268, -t103 * t376 - t136 * t308 - t66 * t185 - t132 * t174 + (-t103 * t383 - t136 * t174) * qJD(1), t308 * t185 + (t376 + (t185 + t383) * qJD(1)) * t174, -g(1) * t110 - g(2) * t112 + t76 * t103 + t83 * t132 + t45 * t136 + t37 * t174 - t185 * t363 + t277 * t372 + t309 * t336 + t94 * t66, t76 * t104 + t83 * t134 + t45 * t137 - t38 * t174 + t185 * t323 + t279 * t94 - t309 * t320 - t429 * t458 + t345, t101 * t60 - t106 * t29, -t101 * t59 + t105 * t29 - t106 * t30 - t60 * t99, t101 * t103 + t106 * t65 + t131 * t60 - t136 * t29, -t103 * t99 - t105 * t65 - t131 * t59 - t136 * t30, t103 * t131 + t136 * t65, -g(1) * t476 - g(2) * t68 + t10 * t105 + t19 * t103 + t294 * t131 + t4 * t136 + t26 * t99 + t42 * t30 + t31 * t59 + t373 * t65, g(1) * t477 - g(2) * t67 + t10 * t106 + t26 * t101 - t20 * t103 - t322 * t131 + t324 * t136 - t42 * t29 + t31 * t60 - t431 * t65, -t1 * t106 - t101 * t5 - t105 * t2 - t11 * t60 - t13 * t59 + t14 * t29 - t18 * t30 - t6 * t99 - t345, t2 * t18 + t13 * t6 + t1 * t14 + t11 * t5 + t7 * (pkin(5) * t105 + t42) + t28 * (pkin(5) * t59 + t26) - g(1) * (-t214 * pkin(2) + t141 * pkin(3) - pkin(5) * t413 - pkin(10) * t138 - t109 * t270 + t110 * t262 + t353) - g(2) * (t215 * pkin(2) + t143 * pkin(3) + pkin(5) * t412 + t142 * pkin(10) - t111 * t270 + t112 * t262 + t397) + (g(1) * t451 + g(2) * t282) * pkin(9); 0, 0, 0 (-qJDD(1) * t269 + t267 * t366) * t268 (t269 * t366 + t387) * t268, -t276 * t461, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t337 - t385) * t268 + t342, 0, 0, 0, 0, 0, t418 * t123 - t171 * t330 - t207 * t349 - t305 * t466, t418 * t122 - t175 * t330 + t207 * t367 + t305 * t472, 0, 0, 0, 0, 0, -t218 * t308 - t66 * t349 - t199 * t132 + (t132 * t367 - t175 * t218) * qJD(3) - t403 * t309, -t134 * t466 - t219 * t458 - t279 * t349 - t467 * t309, 0, 0, 0, 0, 0, -t131 * t405 + t193 * t65 + t218 * t30 + t403 * t99, t101 * t403 + t131 * t404 - t218 * t29 + t307 * t65, t101 * t405 + t193 * t29 + t30 * t307 + t404 * t99, -g(1) * t378 + t1 * t193 - t11 * t405 - t13 * t404 - t2 * t307 + t7 * t218 + t28 * t403 + t342; 0, 0, 0, 0, 0, 0, 0, t175 * t171, -t171 ^ 2 + t175 ^ 2, -t171 * t305 + t122, t175 * t389 + (t175 * t340 - t174) * qJD(1) - t312, -t207, -t129 * t175 - t305 * t97 + t314 - t325, t129 * t171 - t305 * t96 + t304 + t313 (-qJD(4) * t175 - t207) * t272 ^ 2 + ((-qJD(4) * t305 + t122) * t272 + t309 * t134) * t275, -t132 * t456 - t134 * t455 - t272 * t66 + t275 * t279, -t134 * t175 + t272 * t458 + t275 * t280, t132 * t175 - t272 * t280 + t275 * t458, -t309 * t175, -pkin(10) * t272 * t277 - pkin(3) * t66 - t97 * t132 - t37 * t175 + t275 * t450 - t303 * t441 - t309 * t362 + t455 * t76, -pkin(3) * t279 - t97 * t134 + t38 * t175 - t458 * t441 + t456 * t76 + (t384 + t420) * t309 - t450 * t272, -t29 * t408 + (-t272 * t392 + t341) * t101, t101 * t116 + t117 * t99 + (-t101 * t271 - t274 * t99) * t394 + (t427 - t274 * t30 + (-t101 * t274 + t271 * t99) * qJD(5)) * t272, t275 * t29 + t341 * t131 + (t101 * t309 - t131 * t392 + t425) * t272, t275 * t30 + (-t271 * t394 + t116) * t131 + (-t131 * t391 - t309 * t99 - t426) * t272, t131 * t272 * t309 - t275 * t65, -t31 * t116 + t228 * t65 - t51 * t99 + t462 * t131 + ((-qJD(5) * t239 + t52) * t131 - t313) * t271 + (t31 * t271 * qJD(4) - t4 + (qJD(4) * t99 - t426) * pkin(10) - t296 * t274) * t275 + (pkin(10) * t30 + t10 * t271 + t19 * t309 + t31 * t391) * t272, -t398 * t65 - t51 * t101 - t31 * t117 + t454 * t131 - t313 * t274 + (-t324 + (pkin(10) * t101 + t274 * t31) * qJD(4) + t296 * t271) * t275 + (-t31 * t392 + t10 * t274 - t309 * t20 + (qJD(4) * t359 - t29) * pkin(10)) * t272, t11 * t117 + t116 * t13 + t184 * t29 - t197 * t30 - t423 * t99 - t424 * t101 + (-t11 * t274 - t13 * t271) * t394 + (-t1 * t274 - t2 * t271 + (t11 * t271 - t13 * t274) * qJD(5) + t314) * t272, t1 * t184 + t424 * t11 + t423 * t13 + t2 * t197 + (-t51 + (t272 * t391 - t116) * pkin(5)) * t28 + t314 * (t262 * t275 - t270 * t272 + pkin(3)) + (t272 * t7 + t28 * t394 - t313) * (pkin(10) + t442); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134 * t132, -t132 ^ 2 + t134 ^ 2, t171 * t132 + t338, t134 * t171 - t360, t277, -t76 * t134 + t309 * t38 + t295, t76 * t132 + t309 * t37 - t315 + t323, t101 * t359 - t427 (-t29 - t428) * t274 + (-t30 - t414) * t271, -t101 * t134 + t131 * t359 + t426, -t131 ^ 2 * t271 + t134 * t99 + t425, -t131 * t134, -pkin(4) * t30 - t81 * t131 - t19 * t134 - t38 * t99 + (t37 * t131 + t321) * t271 - t292 * t274, pkin(4) * t29 - t38 * t101 + t131 * t432 + t20 * t134 + t271 * t292 + t274 * t321, t240 * t29 + t241 * t30 - t422 * t99 - t421 * t101 + (-t11 * t131 + t2) * t274 + (-t13 * t131 - t1) * t271 + t315, -t2 * t241 + t1 * t240 - t7 * t262 - g(1) * (-t111 * t262 - t112 * t270) - g(2) * (t109 * t262 + t110 * t270) - g(3) * (-t136 * t262 - t137 * t270) + (t131 * t442 - t38) * t28 + t422 * t13 + t421 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101 * t99, -t98 + t449, -t29 + t428, -t30 + t414, t65, -t31 * t101 + t20 * t131 + t4 + t452, g(1) * t68 - g(2) * t476 + g(3) * t106 + t19 * t131 + t31 * t99 + t324, pkin(5) * t29 - t433 * t99, t433 * t13 + (-t28 * t101 + t1 + t452) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98 - t449, -pkin(4) * t277 + t11 * t101 + t13 * t99 - t295 + t453;];
tau_reg  = t3;
