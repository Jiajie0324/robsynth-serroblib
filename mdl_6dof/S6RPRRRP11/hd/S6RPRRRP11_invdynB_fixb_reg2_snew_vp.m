% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 02:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:09:38
% EndTime: 2019-05-06 02:10:59
% DurationCPUTime: 84.27s
% Computational Cost: add. (828899->1093), mult. (2584279->1759), div. (0->0), fcn. (2222010->14), ass. (0->831)
t1231 = sin(qJ(5));
t1225 = sin(pkin(12));
t1227 = sin(pkin(6));
t1228 = cos(pkin(12));
t1230 = cos(pkin(6));
t1237 = cos(qJ(3));
t1229 = cos(pkin(7));
t1233 = sin(qJ(3));
t1427 = t1229 * t1233;
t1226 = sin(pkin(7));
t1433 = t1226 * t1233;
t1252 = t1230 * t1433 + (t1225 * t1237 + t1228 * t1427) * t1227;
t1175 = t1252 * qJD(1);
t1431 = t1227 * t1228;
t1497 = -t1226 * t1431 + t1229 * t1230;
t1188 = qJD(1) * t1497 + qJD(3);
t1232 = sin(qJ(4));
t1236 = cos(qJ(4));
t1157 = t1175 * t1236 + t1188 * t1232;
t1235 = cos(qJ(5));
t1435 = t1225 * t1233;
t1430 = t1227 * t1229;
t1399 = t1228 * t1430;
t1432 = t1226 * t1237;
t1506 = -t1230 * t1432 - t1237 * t1399;
t1173 = (t1227 * t1435 + t1506) * qJD(1);
t1269 = qJD(4) + t1173;
t1122 = t1157 * t1231 - t1235 * t1269;
t1124 = t1235 * t1157 + t1231 * t1269;
t1066 = t1124 * t1122;
t1249 = t1252 * qJDD(1);
t1140 = -t1173 * qJD(3) + t1249;
t1417 = qJDD(1) * t1228;
t1393 = t1227 * t1417;
t1416 = qJDD(1) * t1230;
t1187 = -t1226 * t1393 + t1229 * t1416 + qJDD(3);
t1388 = t1232 * t1140 - t1236 * t1187;
t1085 = -t1157 * qJD(4) - t1388;
t1084 = qJDD(5) - t1085;
t1390 = -t1084 + t1066;
t1454 = t1390 * t1231;
t1453 = t1390 * t1235;
t1504 = t1390 * pkin(5);
t1155 = t1175 * t1232 - t1236 * t1188;
t1108 = t1157 * t1155;
t1418 = qJDD(1) * t1227;
t1395 = t1225 * t1418;
t1287 = qJDD(1) * t1506 + t1233 * t1395;
t1263 = -qJD(3) * t1175 - t1287;
t1255 = qJDD(4) - t1263;
t1498 = -t1108 + t1255;
t1508 = t1232 * t1498;
t1507 = t1236 * t1498;
t1127 = t1269 * t1155;
t1397 = t1155 * qJD(4) - t1236 * t1140 - t1232 * t1187;
t1054 = t1397 + t1127;
t1268 = t1269 ^ 2;
t1434 = t1226 * t1230;
t1299 = t1399 + t1434;
t1505 = pkin(9) * t1299;
t1446 = t1173 * t1175;
t1262 = t1187 - t1446;
t1503 = t1233 * t1262;
t1502 = t1237 * t1262;
t1234 = sin(qJ(1));
t1238 = cos(qJ(1));
t1214 = t1234 * g(1) - t1238 * g(2);
t1239 = qJD(1) ^ 2;
t1465 = qJ(2) * t1227;
t1288 = -t1239 * t1465 - t1214;
t1265 = qJDD(1) * pkin(1) - t1288;
t1256 = t1230 * t1265;
t1501 = (-t1227 * g(3) + t1256) * t1228;
t1222 = t1227 ^ 2;
t1224 = t1230 ^ 2;
t1402 = t1225 * t1228 * t1239;
t1500 = (t1222 + t1224) * t1227 * t1402;
t1017 = -t1122 * qJD(5) + t1231 * t1255 - t1235 * t1397;
t1150 = qJD(5) + t1155;
t1082 = t1150 * t1122;
t1499 = -t1082 + t1017;
t1160 = t1188 * t1173;
t1103 = -t1160 + t1140;
t1220 = t1225 ^ 2;
t1223 = t1228 ^ 2;
t1420 = t1220 + t1223;
t1391 = t1230 * g(3) - qJDD(2);
t1477 = pkin(9) * t1226;
t1482 = pkin(2) * t1230;
t1243 = -t1391 + ((-pkin(2) * t1228 - t1225 * t1477 - pkin(1)) * qJDD(1) + t1288 + (t1225 * t1482 + (-t1228 * t1434 - t1420 * t1430) * pkin(9)) * t1239) * t1227;
t1436 = t1225 * t1227;
t1403 = t1226 * t1436;
t1266 = t1227 * (-pkin(2) * t1431 - pkin(9) * t1403);
t1245 = (-t1225 * t1266 + t1230 * t1505) * qJD(1);
t1415 = pkin(2) * t1416;
t1246 = -g(3) * t1431 + t1228 * t1256 + t1415;
t1215 = t1238 * g(1) + t1234 * g(2);
t1290 = t1239 * pkin(1) + t1215;
t1261 = qJ(2) * t1418 - t1290;
t1386 = pkin(9) * t1225 * t1430;
t1494 = 2 * qJD(2);
t1057 = -(-t1226 * t1245 + t1403 * t1494) * qJD(1) + t1226 * (-qJDD(1) * t1386 - t1225 * t1261 + t1246) - t1229 * t1243;
t1389 = -t1231 * t1397 - t1235 * t1255;
t984 = (qJD(5) - t1150) * t1124 + t1389;
t1119 = t1122 ^ 2;
t1120 = t1124 ^ 2;
t1149 = t1150 ^ 2;
t1153 = t1155 ^ 2;
t1154 = t1157 ^ 2;
t1171 = t1173 ^ 2;
t1172 = t1175 ^ 2;
t1496 = t1188 ^ 2;
t1495 = -2 * qJD(2);
t1042 = -t1149 - t1119;
t954 = t1042 * t1231 - t1453;
t1493 = pkin(4) * t954;
t1058 = -t1120 - t1149;
t1006 = t1066 + t1084;
t1456 = t1006 * t1231;
t959 = t1058 * t1235 - t1456;
t1492 = pkin(4) * t959;
t1026 = -t1119 - t1120;
t988 = -t1082 - t1017;
t915 = -t1231 * t988 - t1235 * t984;
t871 = t1026 * t1232 + t1236 * t915;
t913 = -t1231 * t984 + t1235 * t988;
t1346 = t1233 * t871 - t1237 * t913;
t870 = -t1026 * t1236 + t1232 * t915;
t780 = -t1226 * t870 + t1229 * t1346;
t822 = t1233 * t913 + t1237 * t871;
t1372 = t1225 * t822 + t1228 * t780;
t779 = t1226 * t1346 + t1229 * t870;
t688 = -t1227 * t779 + t1230 * t1372;
t725 = -t1225 * t780 + t1228 * t822;
t652 = t1234 * t725 + t1238 * t688;
t1491 = pkin(8) * t652;
t955 = t1042 * t1235 + t1454;
t983 = (qJD(5) + t1150) * t1124 + t1389;
t889 = t1232 * t983 + t1236 * t955;
t1344 = t1233 * t889 - t1237 * t954;
t888 = t1232 * t955 - t1236 * t983;
t799 = -t1226 * t888 + t1229 * t1344;
t842 = t1233 * t954 + t1237 * t889;
t1370 = t1225 * t842 + t1228 * t799;
t798 = t1226 * t1344 + t1229 * t888;
t708 = -t1227 * t798 + t1230 * t1370;
t751 = -t1225 * t799 + t1228 * t842;
t668 = t1234 * t751 + t1238 * t708;
t1490 = pkin(8) * t668;
t1455 = t1006 * t1235;
t960 = -t1058 * t1231 - t1455;
t896 = t1232 * t1499 + t1236 * t960;
t1343 = t1233 * t896 - t1237 * t959;
t895 = t1232 * t960 - t1236 * t1499;
t802 = -t1226 * t895 + t1229 * t1343;
t850 = t1233 * t959 + t1237 * t896;
t1369 = t1225 * t850 + t1228 * t802;
t801 = t1226 * t1343 + t1229 * t895;
t711 = -t1227 * t801 + t1230 * t1369;
t760 = -t1225 * t802 + t1228 * t850;
t672 = t1234 * t760 + t1238 * t711;
t1489 = pkin(8) * t672;
t1488 = pkin(10) * t870;
t1487 = pkin(10) * t888;
t1486 = pkin(10) * t895;
t1485 = pkin(11) * t913;
t1484 = pkin(11) * t954;
t1483 = pkin(11) * t959;
t1481 = pkin(3) * t1233;
t1480 = pkin(3) * t1237;
t1479 = pkin(4) * t1232;
t1478 = pkin(4) * t1236;
t1476 = pkin(9) * t1229;
t1475 = pkin(1) * t688 + t725 * t1465;
t1474 = pkin(1) * t708 + t751 * t1465;
t1473 = pkin(1) * t711 + t760 * t1465;
t1472 = pkin(2) * t780 + t822 * t1477;
t1471 = pkin(2) * t799 + t842 * t1477;
t1470 = pkin(2) * t802 + t850 * t1477;
t1469 = -pkin(3) * t913 + pkin(10) * t871;
t1098 = pkin(4) * t1155 - pkin(11) * t1157;
t1422 = qJD(3) + t1188;
t1099 = t1175 * t1422 + t1287;
t1241 = t1099 * pkin(3) - pkin(10) * t1103 - t1057;
t1251 = -g(3) * t1436 + t1225 * t1256;
t1094 = t1228 * t1261 + qJDD(1) * t1505 + (t1431 * t1494 + (t1228 * t1266 - t1230 * (-t1386 + t1482)) * qJD(1)) * qJD(1) + t1251;
t1176 = t1227 * t1265 + t1391;
t1396 = -qJ(2) - t1476;
t1002 = t1237 * t1094 + (t1229 * t1246 + t1226 * (-pkin(2) * t1393 - t1176) + t1497 * t1239 * t1505) * t1233 + (t1229 * t1290 + ((-pkin(9) * t1226 ^ 2 + t1229 * t1396) * qJDD(1) + (pkin(2) * qJD(1) * t1299 + t1229 * t1495) * qJD(1)) * t1227) * t1435;
t1136 = pkin(3) * t1173 - pkin(10) * t1175;
t973 = -pkin(3) * t1496 + t1187 * pkin(10) - t1173 * t1136 + t1002;
t910 = t1232 * t1241 + t1236 * t973;
t875 = -pkin(4) * t1268 + pkin(11) * t1255 - t1155 * t1098 + t910;
t1264 = t1269 * t1157;
t1426 = t1229 * t1237;
t1001 = t1233 * t1094 - (t1415 + t1501 + (t1396 * t1418 + t1290) * t1225 + (t1436 * t1495 + t1245) * qJD(1)) * t1426 - t1243 * t1432;
t972 = -t1187 * pkin(3) - t1496 * pkin(10) + t1175 * t1136 + t1001;
t907 = t1054 * pkin(11) + (-t1085 + t1264) * pkin(4) + t972;
t819 = t1231 * t907 + t1235 * t875;
t1468 = -pkin(3) * t954 + pkin(10) * t889;
t1467 = -pkin(3) * t959 + pkin(10) * t896;
t1466 = -t1231 * t875 + t1235 * t907;
t1464 = qJ(2) * t1230;
t1414 = t1017 * qJ(6) - t1466;
t1292 = -qJ(6) * t1082 - t1414;
t1457 = qJD(6) * t1124;
t788 = t1292 - 0.2e1 * t1457 - t1504;
t1463 = t1231 * t788;
t909 = t1232 * t973 - t1236 * t1241;
t874 = -t1255 * pkin(4) - t1268 * pkin(11) + t1098 * t1157 + t909;
t1462 = t1231 * t874;
t1461 = t1232 * t972;
t1460 = t1235 * t788;
t1459 = t1235 * t874;
t1458 = t1236 * t972;
t1070 = t1108 + t1255;
t1452 = t1070 * t1232;
t1451 = t1070 * t1236;
t1129 = -t1187 - t1446;
t1450 = t1129 * t1233;
t1449 = t1129 * t1237;
t1448 = t1150 * t1231;
t1447 = t1150 * t1235;
t1445 = t1175 * t1233;
t1206 = t1222 * t1402;
t1193 = t1206 + t1416;
t1444 = t1193 * t1225;
t1443 = t1193 * t1228;
t1194 = -t1206 + t1416;
t1442 = t1194 * t1225;
t1441 = t1194 * t1228;
t1440 = t1220 * t1222;
t1439 = t1222 * t1223;
t1438 = t1222 * t1239;
t1437 = t1225 * t1176;
t1429 = t1228 * t1176;
t1425 = t1230 * t1239;
t1424 = t1233 * t1057;
t1423 = t1237 * t1057;
t1419 = qJDD(1) * t1222;
t687 = t1227 * t1372 + t1230 * t779;
t1413 = -pkin(1) * t687 + t725 * t1464;
t707 = t1227 * t1370 + t1230 * t798;
t1412 = -pkin(1) * t707 + t751 * t1464;
t710 = t1227 * t1369 + t1230 * t801;
t1411 = -pkin(1) * t710 + t760 * t1464;
t1410 = -pkin(2) * t779 + t822 * t1476;
t1409 = -pkin(2) * t798 + t842 * t1476;
t1408 = -pkin(2) * t801 + t850 * t1476;
t1407 = t1232 * t1066;
t1406 = t1236 * t1066;
t1405 = t1233 * t1108;
t1404 = t1237 * t1108;
t1398 = t1227 * t1425;
t1394 = t1225 * t1417;
t1392 = t1227 * t1416;
t829 = t1232 * t909 + t1236 * t910;
t1178 = -t1214 * t1234 - t1238 * t1215;
t1212 = qJDD(1) * t1238 - t1234 * t1239;
t1384 = -pkin(8) * t1212 - g(3) * t1234;
t1128 = -t1496 - t1171;
t1072 = t1128 * t1237 - t1503;
t1383 = pkin(9) * t1072 + t1423;
t1132 = -t1172 - t1496;
t1074 = -t1132 * t1233 + t1449;
t1382 = pkin(9) * t1074 - t1424;
t1016 = -qJD(5) * t1124 - t1389;
t1077 = pkin(5) * t1150 - qJ(6) * t1124;
t1291 = t1016 * qJ(6) - 0.2e1 * qJD(6) * t1122 - t1150 * t1077 + t819;
t773 = -qJ(6) * t984 + (-t1026 - t1119) * pkin(5) + t1291;
t1116 = 0.2e1 * t1457;
t774 = t1116 + (-t988 + t1082) * qJ(6) + t1504 + t1414;
t696 = -t1231 * t773 + t1235 * t774 - t1485;
t857 = -pkin(4) * t913 - pkin(5) * t988;
t676 = -t1232 * t857 + t1236 * t696 - t1488;
t1293 = -pkin(3) * t870 + pkin(4) * t1026 - pkin(11) * t915;
t682 = -t1231 * t774 - t1235 * t773 + t1293;
t1355 = t1233 * t676 + t1237 * t682;
t666 = t1232 * t696 + t1236 * t857 + t1469;
t620 = -t1226 * t666 + t1229 * t1355 + t1410;
t1304 = (-t1226 * t779 - t1229 * t780) * pkin(9);
t626 = -t1233 * t682 + t1237 * t676 + t1304;
t1381 = t1225 * t626 + t1228 * t620;
t752 = t1231 * t819 + t1235 * t1466;
t733 = -t752 - t1485;
t703 = t1236 * t733 + t1479 * t913 - t1488;
t753 = -t1231 * t1466 + t1235 * t819;
t712 = t1293 - t753;
t1351 = t1233 * t703 + t1237 * t712;
t694 = t1232 * t733 - t1478 * t913 + t1469;
t625 = -t1226 * t694 + t1229 * t1351 + t1410;
t636 = -t1233 * t712 + t1237 * t703 + t1304;
t1380 = t1225 * t636 + t1228 * t625;
t763 = t1116 - t1292 - t1493 + 0.2e1 * t1504;
t830 = -t1016 * pkin(5) - t1119 * qJ(6) + t1077 * t1124 + qJDD(6) + t874;
t803 = -pkin(5) * t983 + qJ(6) * t1042 - t830;
t775 = qJ(6) * t1453 - t1231 * t803 - t1484;
t691 = -t1232 * t763 + t1236 * t775 - t1487;
t1298 = -pkin(3) * t888 + pkin(4) * t983 - pkin(11) * t955;
t735 = -qJ(6) * t1454 - t1235 * t803 + t1298;
t1354 = t1233 * t691 + t1237 * t735;
t684 = t1232 * t775 + t1236 * t763 + t1468;
t628 = -t1226 * t684 + t1229 * t1354 + t1409;
t1303 = (-t1226 * t798 - t1229 * t799) * pkin(9);
t639 = -t1233 * t735 + t1237 * t691 + t1303;
t1379 = t1225 * t639 + t1228 * t628;
t772 = -t1492 + (-t1058 - t1119) * pkin(5) + t1291;
t825 = -qJ(6) * t1058 + t830;
t927 = -pkin(5) * t1499 - qJ(6) * t1006;
t776 = -t1231 * t927 + t1235 * t825 - t1483;
t695 = -t1232 * t772 + t1236 * t776 - t1486;
t1297 = -pkin(3) * t895 + pkin(4) * t1499 - pkin(11) * t960;
t736 = -t1231 * t825 - t1235 * t927 + t1297;
t1353 = t1233 * t695 + t1237 * t736;
t689 = t1232 * t776 + t1236 * t772 + t1467;
t630 = -t1226 * t689 + t1229 * t1353 + t1408;
t1302 = (-t1226 * t801 - t1229 * t802) * pkin(9);
t643 = -t1233 * t736 + t1237 * t695 + t1302;
t1378 = t1225 * t643 + t1228 * t630;
t793 = -pkin(5) * t1119 + t1291;
t721 = t1235 * t793 - t1463;
t698 = t1232 * t830 + t1236 * t721;
t720 = t1231 * t793 + t1460;
t1352 = t1233 * t698 - t1237 * t720;
t697 = t1232 * t721 - t1236 * t830;
t635 = -t1226 * t697 + t1229 * t1352;
t657 = t1233 * t720 + t1237 * t698;
t1377 = t1225 * t657 + t1228 * t635;
t795 = -t1466 - t1493;
t836 = t1462 - t1484;
t722 = -t1232 * t795 + t1236 * t836 - t1487;
t781 = t1298 + t1459;
t1350 = t1233 * t722 + t1237 * t781;
t718 = t1232 * t836 + t1236 * t795 + t1468;
t638 = -t1226 * t718 + t1229 * t1350 + t1409;
t654 = -t1233 * t781 + t1237 * t722 + t1303;
t1376 = t1225 * t654 + t1228 * t638;
t796 = t819 - t1492;
t838 = t1459 - t1483;
t728 = -t1232 * t796 + t1236 * t838 - t1486;
t785 = t1297 - t1462;
t1348 = t1233 * t728 + t1237 * t785;
t719 = t1232 * t838 + t1236 * t796 + t1467;
t641 = -t1226 * t719 + t1229 * t1348 + t1408;
t656 = -t1233 * t785 + t1237 * t728 + t1302;
t1375 = t1225 * t656 + t1228 * t641;
t727 = t1232 * t874 + t1236 * t753;
t1349 = t1233 * t727 - t1237 * t752;
t726 = t1232 * t753 - t1236 * t874;
t650 = -t1226 * t726 + t1229 * t1349;
t681 = t1233 * t752 + t1237 * t727;
t1374 = t1225 * t681 + t1228 * t650;
t1347 = t1233 * t829 - t1237 * t972;
t828 = t1232 * t910 - t1236 * t909;
t755 = -t1226 * t828 + t1229 * t1347;
t813 = t1233 * t972 + t1237 * t829;
t1373 = t1225 * t813 + t1228 * t755;
t1059 = -t1120 + t1119;
t914 = -t1231 * t1499 - t1235 * t983;
t884 = -t1059 * t1232 + t1236 * t914;
t912 = t1231 * t983 - t1235 * t1499;
t1345 = t1233 * t884 + t1237 * t912;
t883 = t1059 * t1236 + t1232 * t914;
t787 = -t1226 * t883 + t1229 * t1345;
t826 = -t1233 * t912 + t1237 * t884;
t1371 = t1225 * t826 + t1228 * t787;
t1081 = -t1120 + t1149;
t969 = -t1081 * t1231 - t1453;
t903 = -t1232 * t988 + t1236 * t969;
t967 = -t1081 * t1235 + t1454;
t1342 = t1233 * t903 + t1237 * t967;
t901 = t1232 * t969 + t1236 * t988;
t809 = -t1226 * t901 + t1229 * t1342;
t854 = -t1233 * t967 + t1237 * t903;
t1368 = t1225 * t854 + t1228 * t809;
t1080 = t1119 - t1149;
t970 = t1080 * t1235 - t1456;
t904 = -t1232 * t984 + t1236 * t970;
t968 = -t1080 * t1231 - t1455;
t1341 = t1233 * t904 + t1237 * t968;
t902 = t1232 * t970 + t1236 * t984;
t810 = -t1226 * t902 + t1229 * t1341;
t855 = -t1233 * t968 + t1237 * t904;
t1367 = t1225 * t855 + t1228 * t810;
t979 = -t1016 * t1231 + t1122 * t1447;
t945 = t1236 * t979 - t1407;
t978 = -t1016 * t1235 - t1122 * t1448;
t1340 = t1233 * t945 + t1237 * t978;
t943 = t1232 * t979 + t1406;
t834 = -t1226 * t943 + t1229 * t1340;
t879 = -t1233 * t978 + t1237 * t945;
t1366 = t1225 * t879 + t1228 * t834;
t981 = t1017 * t1235 - t1124 * t1448;
t946 = t1236 * t981 + t1407;
t980 = -t1017 * t1231 - t1124 * t1447;
t1339 = t1233 * t946 + t1237 * t980;
t944 = t1232 * t981 - t1406;
t835 = -t1226 * t944 + t1229 * t1339;
t880 = -t1233 * t980 + t1237 * t946;
t1365 = t1225 * t880 + t1228 * t835;
t1018 = (t1122 * t1231 + t1124 * t1235) * t1150;
t1019 = (-t1122 * t1235 + t1124 * t1231) * t1150;
t990 = t1019 * t1236 + t1084 * t1232;
t1335 = t1018 * t1237 + t1233 * t990;
t989 = t1019 * t1232 - t1084 * t1236;
t866 = -t1226 * t989 + t1229 * t1335;
t934 = -t1018 * t1233 + t1237 * t990;
t1364 = t1225 * t934 + t1228 * t866;
t1073 = t1153 + t1154;
t1049 = -t1157 * t1173 + t1388;
t1053 = -t1127 + t1397;
t977 = -t1049 * t1236 - t1053 * t1232;
t1333 = t1073 * t1237 + t1233 * t977;
t975 = -t1049 * t1232 + t1053 * t1236;
t882 = -t1226 * t975 + t1229 * t1333;
t947 = -t1073 * t1233 + t1237 * t977;
t1363 = t1225 * t947 + t1228 * t882;
t1105 = -t1154 + t1153;
t1050 = (-0.2e1 * qJD(4) - t1173) * t1157 - t1388;
t976 = t1050 * t1236 + t1054 * t1232;
t1332 = t1105 * t1237 + t1233 * t976;
t974 = t1050 * t1232 - t1054 * t1236;
t886 = -t1226 * t974 + t1229 * t1332;
t952 = -t1105 * t1233 + t1237 * t976;
t1362 = t1225 * t952 + t1228 * t886;
t1331 = -t1237 * t1001 + t1233 * t1002;
t917 = t1226 * t1057 + t1229 * t1331;
t940 = t1001 * t1233 + t1002 * t1237;
t1361 = t1225 * t940 + t1228 * t917;
t1087 = -t1268 - t1153;
t1008 = t1087 * t1232 + t1507;
t1009 = t1087 * t1236 - t1508;
t1329 = t1009 * t1233 + t1050 * t1237;
t921 = -t1226 * t1008 + t1229 * t1329;
t957 = t1009 * t1237 - t1050 * t1233;
t1360 = t1225 * t957 + t1228 * t921;
t1093 = -t1154 - t1268;
t1022 = t1093 * t1236 - t1452;
t1023 = -t1093 * t1232 - t1451;
t1327 = t1023 * t1233 + t1054 * t1237;
t924 = -t1226 * t1022 + t1229 * t1327;
t962 = t1023 * t1237 - t1054 * t1233;
t1359 = t1225 * t962 + t1228 * t924;
t1126 = -t1154 + t1268;
t1032 = t1126 * t1236 + t1508;
t1034 = -t1126 * t1232 + t1507;
t1324 = t1034 * t1233 + t1053 * t1237;
t930 = -t1226 * t1032 + t1229 * t1324;
t965 = t1034 * t1237 - t1053 * t1233;
t1358 = t1225 * t965 + t1228 * t930;
t1125 = t1153 - t1268;
t1033 = t1125 * t1232 + t1451;
t1035 = t1125 * t1236 - t1452;
t1323 = t1035 * t1233 + t1049 * t1237;
t931 = -t1226 * t1033 + t1229 * t1323;
t966 = t1035 * t1237 - t1049 * t1233;
t1357 = t1225 * t966 + t1228 * t931;
t1260 = t1232 * t1127;
t1044 = t1236 * t1085 + t1260;
t1258 = t1236 * t1127;
t1045 = -t1232 * t1085 + t1258;
t1301 = t1045 * t1233 + t1404;
t950 = -t1226 * t1044 + t1229 * t1301;
t999 = t1045 * t1237 - t1405;
t1356 = t1225 * t999 + t1228 * t950;
t1201 = (-t1224 - t1439) * t1239;
t1165 = t1201 * t1228 - t1444;
t1338 = qJ(2) * t1165 + t1429;
t1199 = (-t1224 - t1440) * t1239;
t1167 = -t1199 * t1225 - t1441;
t1337 = qJ(2) * t1167 - t1437;
t1259 = t1232 * t1264;
t1047 = -t1236 * t1397 - t1259;
t1000 = t1047 * t1237 + t1405;
t1257 = t1236 * t1264;
t1046 = -t1232 * t1397 + t1257;
t1300 = t1047 * t1233 - t1404;
t951 = -t1226 * t1046 + t1229 * t1300;
t1336 = t1000 * t1225 + t1228 * t951;
t1068 = -t1258 + t1259;
t1041 = t1237 * t1068 + t1233 * t1255;
t1067 = -t1260 - t1257;
t1247 = t1233 * t1068 - t1237 * t1255;
t994 = -t1226 * t1067 + t1229 * t1247;
t1334 = t1041 * t1225 + t1228 * t994;
t1121 = -t1171 - t1172;
t1104 = t1160 + t1140;
t1253 = (-qJD(3) + t1188) * t1175 - t1287;
t1316 = -t1104 * t1237 + t1233 * t1253;
t1004 = -t1226 * t1121 + t1229 * t1316;
t1056 = t1104 * t1233 + t1237 * t1253;
t1330 = t1004 * t1228 + t1056 * t1225;
t1141 = t1172 - t1171;
t1317 = -t1099 * t1233 + t1103 * t1237;
t1021 = -t1226 * t1141 + t1229 * t1317;
t1055 = -t1099 * t1237 - t1103 * t1233;
t1328 = t1021 * t1228 + t1055 * t1225;
t1315 = t1128 * t1233 + t1502;
t1025 = -t1226 * t1099 + t1229 * t1315;
t1326 = t1025 * t1228 + t1072 * t1225;
t1102 = -t1173 * t1422 + t1249;
t1314 = t1132 * t1237 + t1450;
t1028 = -t1226 * t1102 + t1229 * t1314;
t1325 = t1028 * t1228 + t1074 * t1225;
t1159 = -t1172 + t1496;
t1312 = t1159 * t1237 + t1503;
t1038 = -t1226 * t1104 + t1229 * t1312;
t1088 = -t1159 * t1233 + t1502;
t1322 = t1038 * t1228 + t1088 * t1225;
t1158 = t1171 - t1496;
t1313 = t1158 * t1233 - t1449;
t1039 = -t1226 * t1253 + t1229 * t1313;
t1089 = t1158 * t1237 + t1450;
t1321 = t1039 * t1228 + t1089 * t1225;
t1254 = t1237 * t1263;
t1061 = t1229 * t1254 + (t1175 * t1226 + t1188 * t1427) * t1173;
t1095 = t1160 * t1237 - t1233 * t1263;
t1320 = t1061 * t1228 + t1095 * t1225;
t1063 = t1140 * t1427 + (-t1173 * t1226 + t1188 * t1426) * t1175;
t1097 = t1140 * t1237 - t1188 * t1445;
t1319 = t1063 * t1228 + t1097 * t1225;
t1289 = t1188 * (-t1173 * t1233 - t1175 * t1237);
t1091 = -t1226 * t1187 + t1229 * t1289;
t1109 = (-t1173 * t1237 + t1445) * t1188;
t1318 = t1091 * t1228 + t1109 * t1225;
t1248 = (qJ(2) * qJDD(1) + qJD(1) * t1494) * t1227 - t1290;
t1151 = t1225 * t1248 - t1501;
t1152 = t1228 * t1248 + t1251;
t1311 = -t1228 * t1151 + t1225 * t1152;
t1096 = t1151 * t1225 + t1152 * t1228;
t1208 = t1228 * t1398;
t1189 = t1208 + t1395;
t1207 = t1225 * t1398;
t1192 = -t1207 + t1393;
t1310 = t1189 * t1228 + t1192 * t1225;
t1190 = -t1208 + t1395;
t1191 = t1207 + t1393;
t1309 = -t1190 * t1228 + t1191 * t1225;
t1198 = (t1224 - t1440) * t1239;
t1308 = t1198 * t1228 + t1444;
t1307 = t1201 * t1225 + t1443;
t1306 = t1199 * t1228 - t1442;
t1200 = (-t1224 + t1439) * t1239;
t1305 = t1200 * t1225 + t1441;
t1177 = t1214 * t1238 - t1215 * t1234;
t1296 = (-t1227 * t687 - t1230 * t688) * qJ(2);
t1295 = (-t1227 * t707 - t1230 * t708) * qJ(2);
t1294 = (-t1227 * t710 - t1230 * t711) * qJ(2);
t741 = -pkin(5) * t830 + qJ(6) * t793;
t658 = -pkin(11) * t720 - qJ(6) * t1460 - t1231 * t741;
t685 = -pkin(4) * t720 - pkin(5) * t788;
t623 = -pkin(10) * t697 - t1232 * t685 + t1236 * t658;
t633 = -pkin(3) * t697 + pkin(4) * t830 - pkin(11) * t721 + qJ(6) * t1463 - t1235 * t741;
t1286 = pkin(9) * t657 + t1233 * t623 + t1237 * t633;
t655 = -pkin(10) * t726 + (-pkin(11) * t1236 + t1479) * t752;
t670 = -pkin(3) * t726 + pkin(4) * t874 - pkin(11) * t753;
t1285 = pkin(9) * t681 + t1233 * t655 + t1237 * t670;
t863 = -pkin(3) * t1008 + t909;
t925 = -pkin(10) * t1008 + t1461;
t1284 = pkin(9) * t957 + t1233 * t925 + t1237 * t863;
t864 = -pkin(3) * t1022 + t910;
t932 = -pkin(10) * t1022 + t1458;
t1283 = pkin(9) * t962 + t1233 * t932 + t1237 * t864;
t621 = -pkin(3) * t720 + pkin(10) * t698 + t1232 * t658 + t1236 * t685;
t634 = t1226 * t1352 + t1229 * t697;
t592 = -pkin(2) * t634 - t1226 * t621 + t1229 * t1286;
t594 = -t1233 * t633 + t1237 * t623 + (-t1226 * t634 - t1229 * t635) * pkin(9);
t622 = -t1225 * t635 + t1228 * t657;
t1282 = qJ(2) * t622 + t1225 * t594 + t1228 * t592;
t642 = pkin(10) * t727 + (-pkin(11) * t1232 - pkin(3) - t1478) * t752;
t649 = t1226 * t1349 + t1229 * t726;
t602 = -pkin(2) * t649 - t1226 * t642 + t1229 * t1285;
t612 = -t1233 * t670 + t1237 * t655 + (-t1226 * t649 - t1229 * t650) * pkin(9);
t631 = -t1225 * t650 + t1228 * t681;
t1281 = qJ(2) * t631 + t1225 * t612 + t1228 * t602;
t1267 = pkin(9) * t813 + (-pkin(10) * t1233 - t1480) * t828;
t754 = t1226 * t1347 + t1229 * t828;
t814 = -pkin(3) * t972 + pkin(10) * t829;
t664 = -pkin(2) * t754 - t1226 * t814 + t1229 * t1267;
t665 = (-pkin(10) * t1237 + t1481) * t828 + (-t1226 * t754 - t1229 * t755) * pkin(9);
t713 = -t1225 * t755 + t1228 * t813;
t1280 = qJ(2) * t713 + t1225 * t665 + t1228 * t664;
t815 = -pkin(10) * t975 - t828;
t1270 = pkin(9) * t947 + t1233 * t815 - t1480 * t975;
t806 = pkin(3) * t1073 + pkin(10) * t977 + t829;
t881 = t1226 * t1333 + t1229 * t975;
t705 = -pkin(2) * t881 - t1226 * t806 + t1229 * t1270;
t734 = t975 * t1481 + t1237 * t815 + (-t1226 * t881 - t1229 * t882) * pkin(9);
t837 = -t1225 * t882 + t1228 * t947;
t1279 = qJ(2) * t837 + t1225 * t734 + t1228 * t705;
t890 = pkin(3) * t1050 + pkin(10) * t1009 - t1458;
t920 = t1229 * t1008 + t1226 * t1329;
t745 = -pkin(2) * t920 - t1226 * t890 + t1229 * t1284;
t766 = -t1233 * t863 + t1237 * t925 + (-t1226 * t920 - t1229 * t921) * pkin(9);
t853 = -t1225 * t921 + t1228 * t957;
t1278 = qJ(2) * t853 + t1225 * t766 + t1228 * t745;
t893 = pkin(3) * t1054 + pkin(10) * t1023 + t1461;
t923 = t1229 * t1022 + t1226 * t1327;
t748 = -pkin(2) * t923 - t1226 * t893 + t1229 * t1283;
t769 = -t1233 * t864 + t1237 * t932 + (-t1226 * t923 - t1229 * t924) * pkin(9);
t856 = -t1225 * t924 + t1228 * t962;
t1277 = qJ(2) * t856 + t1225 * t769 + t1228 * t748;
t916 = -t1229 * t1057 + t1226 * t1331;
t831 = (-t1226 * t916 - t1229 * t917) * pkin(9);
t843 = -t1225 * t917 + t1228 * t940;
t844 = -pkin(2) * t916 + t1476 * t940;
t1276 = qJ(2) * t843 + t1225 * t831 + t1228 * t844;
t1003 = t1229 * t1121 + t1226 * t1316;
t858 = (-t1003 * t1226 - t1004 * t1229) * pkin(9) - t1331;
t1272 = pkin(9) * t1056 + t940;
t862 = -pkin(2) * t1003 + t1229 * t1272;
t956 = -t1004 * t1225 + t1056 * t1228;
t1275 = qJ(2) * t956 + t1225 * t858 + t1228 * t862;
t1024 = t1229 * t1099 + t1226 * t1315;
t892 = -pkin(2) * t1024 + t1226 * t1001 + t1229 * t1383;
t926 = -t1424 + (-t1024 * t1226 - t1025 * t1229) * pkin(9);
t982 = -t1025 * t1225 + t1072 * t1228;
t1274 = qJ(2) * t982 + t1225 * t926 + t1228 * t892;
t1027 = t1229 * t1102 + t1226 * t1314;
t898 = -pkin(2) * t1027 + t1226 * t1002 + t1229 * t1382;
t933 = -t1423 + (-t1027 * t1226 - t1028 * t1229) * pkin(9);
t995 = -t1028 * t1225 + t1074 * t1228;
t1273 = qJ(2) * t995 + t1225 * t933 + t1228 * t898;
t1161 = t1190 * t1225 + t1191 * t1228;
t1271 = qJ(2) * t1161 + t1096;
t1211 = qJDD(1) * t1234 + t1238 * t1239;
t1197 = -pkin(8) * t1211 + g(3) * t1238;
t1196 = t1420 * t1438;
t1195 = (t1220 - t1223) * t1438;
t1185 = t1420 * t1398;
t1184 = (-t1220 * t1425 + t1394) * t1227;
t1183 = (-t1223 * t1425 - t1394) * t1227;
t1170 = t1220 * t1392 + t1500;
t1169 = t1223 * t1392 - t1500;
t1166 = -t1198 * t1225 + t1443;
t1164 = t1200 * t1228 - t1442;
t1162 = -t1189 * t1225 + t1192 * t1228;
t1147 = -t1227 * t1189 + t1230 * t1306;
t1146 = -t1227 * t1190 + t1230 * t1308;
t1145 = t1227 * t1192 + t1230 * t1307;
t1144 = -t1227 * t1191 + t1230 * t1305;
t1143 = t1230 * t1189 + t1227 * t1306;
t1142 = -t1230 * t1192 + t1227 * t1307;
t1139 = -t1227 * t1195 + t1230 * t1310;
t1138 = t1227 * t1196 + t1230 * t1309;
t1137 = -t1230 * t1196 + t1227 * t1309;
t1113 = -t1147 * t1234 + t1167 * t1238;
t1112 = -t1145 * t1234 + t1165 * t1238;
t1111 = t1147 * t1238 + t1167 * t1234;
t1110 = t1145 * t1238 + t1165 * t1234;
t1107 = -t1138 * t1234 + t1161 * t1238;
t1106 = t1138 * t1238 + t1161 * t1234;
t1090 = t1229 * t1187 + t1226 * t1289;
t1079 = t1227 * t1176 + t1230 * t1311;
t1078 = -t1230 * t1176 + t1227 * t1311;
t1076 = -t1429 + (-t1143 * t1227 - t1147 * t1230) * qJ(2);
t1075 = -t1437 + (-t1142 * t1227 - t1145 * t1230) * qJ(2);
t1065 = -pkin(1) * t1142 + t1227 * t1151 + t1230 * t1338;
t1064 = -pkin(1) * t1143 + t1227 * t1152 + t1230 * t1337;
t1062 = t1140 * t1433 + (t1173 * t1229 + t1188 * t1432) * t1175;
t1060 = t1226 * t1254 + (-t1175 * t1229 + t1188 * t1433) * t1173;
t1048 = -pkin(1) * t1137 + t1230 * t1271;
t1043 = -t1091 * t1225 + t1109 * t1228;
t1040 = (-t1137 * t1227 - t1138 * t1230) * qJ(2) - t1311;
t1037 = t1226 * t1313 + t1229 * t1253;
t1036 = t1229 * t1104 + t1226 * t1312;
t1031 = -pkin(1) * t1078 + t1096 * t1464;
t1030 = -t1079 * t1234 + t1096 * t1238;
t1029 = t1079 * t1238 + t1096 * t1234;
t1020 = t1229 * t1141 + t1226 * t1317;
t1015 = (-t1078 * t1227 - t1079 * t1230) * qJ(2);
t1011 = -t1063 * t1225 + t1097 * t1228;
t1010 = -t1061 * t1225 + t1095 * t1228;
t998 = -t1227 * t1090 + t1230 * t1318;
t997 = -t1039 * t1225 + t1089 * t1228;
t996 = -t1038 * t1225 + t1088 * t1228;
t993 = t1229 * t1067 + t1226 * t1247;
t964 = -t1227 * t1062 + t1230 * t1319;
t963 = -t1227 * t1060 + t1230 * t1320;
t961 = -t1021 * t1225 + t1055 * t1228;
t949 = t1229 * t1046 + t1226 * t1300;
t948 = t1229 * t1044 + t1226 * t1301;
t942 = -t1227 * t1037 + t1230 * t1321;
t941 = -t1227 * t1036 + t1230 * t1322;
t939 = t1041 * t1228 - t1225 * t994;
t938 = -t1227 * t1027 + t1230 * t1325;
t937 = t1230 * t1027 + t1227 * t1325;
t936 = -t1227 * t1024 + t1230 * t1326;
t935 = t1230 * t1024 + t1227 * t1326;
t929 = t1229 * t1033 + t1226 * t1323;
t928 = t1229 * t1032 + t1226 * t1324;
t922 = -t1227 * t1020 + t1230 * t1328;
t919 = -t1227 * t1003 + t1230 * t1330;
t918 = t1230 * t1003 + t1227 * t1330;
t900 = t1000 * t1228 - t1225 * t951;
t899 = -t1225 * t950 + t1228 * t999;
t897 = pkin(2) * t1028 - t1229 * t1002 + t1226 * t1382;
t891 = pkin(2) * t1025 - t1229 * t1001 + t1226 * t1383;
t885 = t1226 * t1332 + t1229 * t974;
t878 = -t1227 * t993 + t1230 * t1334;
t877 = -t1234 * t938 + t1238 * t995;
t876 = t1234 * t995 + t1238 * t938;
t868 = -t1234 * t936 + t1238 * t982;
t867 = t1234 * t982 + t1238 * t936;
t865 = t1226 * t1335 + t1229 * t989;
t861 = pkin(2) * t1004 + t1226 * t1272;
t860 = -t1225 * t931 + t1228 * t966;
t859 = -t1225 * t930 + t1228 * t965;
t852 = -t1234 * t919 + t1238 * t956;
t851 = t1234 * t956 + t1238 * t919;
t847 = -t1227 * t949 + t1230 * t1336;
t846 = -t1227 * t948 + t1230 * t1356;
t845 = pkin(2) * t917 + t1477 * t940;
t839 = -t1225 * t886 + t1228 * t952;
t833 = t1226 * t1339 + t1229 * t944;
t832 = t1226 * t1340 + t1229 * t943;
t827 = -t1225 * t866 + t1228 * t934;
t824 = -t1227 * t929 + t1230 * t1357;
t823 = -t1227 * t928 + t1230 * t1358;
t817 = -t1227 * t923 + t1230 * t1359;
t816 = t1227 * t1359 + t1230 * t923;
t812 = -t1227 * t920 + t1230 * t1360;
t811 = t1227 * t1360 + t1230 * t920;
t808 = t1226 * t1341 + t1229 * t902;
t807 = t1226 * t1342 + t1229 * t901;
t805 = -t1227 * t916 + t1230 * t1361;
t804 = t1227 * t1361 + t1230 * t916;
t794 = -t1227 * t885 + t1230 * t1362;
t792 = -t1227 * t881 + t1230 * t1363;
t791 = t1227 * t1363 + t1230 * t881;
t790 = -t1225 * t835 + t1228 * t880;
t789 = -t1225 * t834 + t1228 * t879;
t786 = t1226 * t1345 + t1229 * t883;
t784 = -t1225 * t898 + t1228 * t933 + (-t1227 * t937 - t1230 * t938) * qJ(2);
t783 = -t1227 * t865 + t1230 * t1364;
t782 = t1227 * t1364 + t1230 * t865;
t778 = -t1225 * t892 + t1228 * t926 + (-t1227 * t935 - t1230 * t936) * qJ(2);
t771 = -t1234 * t817 + t1238 * t856;
t770 = t1234 * t856 + t1238 * t817;
t768 = -t1234 * t812 + t1238 * t853;
t767 = t1234 * t853 + t1238 * t812;
t765 = -t1225 * t810 + t1228 * t855;
t764 = -t1225 * t809 + t1228 * t854;
t762 = -pkin(1) * t937 - t1227 * t897 + t1230 * t1273;
t761 = -pkin(1) * t935 - t1227 * t891 + t1230 * t1274;
t757 = -t1234 * t805 + t1238 * t843;
t756 = t1234 * t843 + t1238 * t805;
t747 = pkin(2) * t924 + t1226 * t1283 + t1229 * t893;
t746 = -t1225 * t862 + t1228 * t858 + (-t1227 * t918 - t1230 * t919) * qJ(2);
t744 = pkin(2) * t921 + t1226 * t1284 + t1229 * t890;
t743 = -t1234 * t792 + t1238 * t837;
t742 = t1234 * t837 + t1238 * t792;
t740 = -t1227 * t833 + t1230 * t1365;
t739 = -t1227 * t832 + t1230 * t1366;
t738 = t1227 * t1365 + t1230 * t833;
t737 = t1227 * t1366 + t1230 * t832;
t732 = -t1225 * t787 + t1228 * t826;
t731 = -t1234 * t783 + t1238 * t827;
t730 = t1234 * t827 + t1238 * t783;
t729 = -pkin(1) * t918 - t1227 * t861 + t1230 * t1275;
t717 = -t1227 * t808 + t1230 * t1367;
t716 = -t1227 * t807 + t1230 * t1368;
t715 = t1227 * t1367 + t1230 * t808;
t714 = t1227 * t1368 + t1230 * t807;
t704 = pkin(2) * t882 + t1226 * t1270 + t1229 * t806;
t702 = -t1234 * t740 + t1238 * t790;
t701 = -t1234 * t739 + t1238 * t789;
t700 = t1234 * t790 + t1238 * t740;
t699 = t1234 * t789 + t1238 * t739;
t693 = -t1227 * t786 + t1230 * t1371;
t692 = t1227 * t1371 + t1230 * t786;
t690 = -t1225 * t844 + t1228 * t831 + (-t1227 * t804 - t1230 * t805) * qJ(2);
t683 = -pkin(1) * t804 - t1227 * t845 + t1230 * t1276;
t680 = -t1234 * t717 + t1238 * t765;
t679 = -t1234 * t716 + t1238 * t764;
t678 = t1234 * t765 + t1238 * t717;
t677 = t1234 * t764 + t1238 * t716;
t675 = -t1227 * t754 + t1230 * t1373;
t674 = t1227 * t1373 + t1230 * t754;
t673 = -t1234 * t711 + t1238 * t760;
t671 = pkin(8) * t673;
t669 = -t1234 * t708 + t1238 * t751;
t667 = pkin(8) * t669;
t663 = pkin(2) * t755 + t1226 * t1267 + t1229 * t814;
t662 = -t1225 * t748 + t1228 * t769 + (-t1227 * t816 - t1230 * t817) * qJ(2);
t661 = -t1225 * t745 + t1228 * t766 + (-t1227 * t811 - t1230 * t812) * qJ(2);
t660 = -t1234 * t693 + t1238 * t732;
t659 = t1234 * t732 + t1238 * t693;
t653 = -t1234 * t688 + t1238 * t725;
t651 = pkin(8) * t653;
t648 = -pkin(1) * t816 - t1227 * t747 + t1230 * t1277;
t647 = -pkin(1) * t811 - t1227 * t744 + t1230 * t1278;
t646 = -t1234 * t675 + t1238 * t713;
t645 = t1234 * t713 + t1238 * t675;
t644 = -t1225 * t705 + t1228 * t734 + (-t1227 * t791 - t1230 * t792) * qJ(2);
t640 = t1226 * t1348 + t1229 * t719 + t1470;
t637 = t1226 * t1350 + t1229 * t718 + t1471;
t632 = -pkin(1) * t791 - t1227 * t704 + t1230 * t1279;
t629 = t1226 * t1353 + t1229 * t689 + t1470;
t627 = t1226 * t1354 + t1229 * t684 + t1471;
t624 = t1226 * t1351 + t1229 * t694 + t1472;
t619 = t1226 * t1355 + t1229 * t666 + t1472;
t618 = -t1227 * t649 + t1230 * t1374;
t617 = t1227 * t1374 + t1230 * t649;
t616 = -t1225 * t641 + t1228 * t656 + t1294;
t615 = -t1225 * t664 + t1228 * t665 + (-t1227 * t674 - t1230 * t675) * qJ(2);
t614 = -t1225 * t638 + t1228 * t654 + t1295;
t613 = -pkin(1) * t674 - t1227 * t663 + t1230 * t1280;
t611 = -t1227 * t634 + t1230 * t1377;
t610 = t1227 * t1377 + t1230 * t634;
t609 = -t1225 * t630 + t1228 * t643 + t1294;
t608 = -t1225 * t628 + t1228 * t639 + t1295;
t607 = -t1227 * t640 + t1230 * t1375 + t1411;
t606 = -t1227 * t637 + t1230 * t1376 + t1412;
t605 = -t1234 * t618 + t1238 * t631;
t604 = t1234 * t631 + t1238 * t618;
t603 = -t1225 * t625 + t1228 * t636 + t1296;
t601 = pkin(2) * t650 + t1226 * t1285 + t1229 * t642;
t600 = -t1227 * t629 + t1230 * t1378 + t1411;
t599 = -t1225 * t620 + t1228 * t626 + t1296;
t598 = -t1227 * t627 + t1230 * t1379 + t1412;
t597 = -t1227 * t624 + t1230 * t1380 + t1413;
t596 = -t1234 * t611 + t1238 * t622;
t595 = t1234 * t622 + t1238 * t611;
t593 = -t1227 * t619 + t1230 * t1381 + t1413;
t591 = pkin(2) * t635 + t1226 * t1286 + t1229 * t621;
t590 = -t1225 * t602 + t1228 * t612 + (-t1227 * t617 - t1230 * t618) * qJ(2);
t589 = -pkin(1) * t617 - t1227 * t601 + t1230 * t1281;
t588 = -t1225 * t592 + t1228 * t594 + (-t1227 * t610 - t1230 * t611) * qJ(2);
t587 = -pkin(1) * t610 - t1227 * t591 + t1230 * t1282;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1211, -t1212, 0, t1178, 0, 0, 0, 0, 0, 0, t1112, t1113, t1107, t1030, 0, 0, 0, 0, 0, 0, t868, t877, t852, t757, 0, 0, 0, 0, 0, 0, t768, t771, t743, t646, 0, 0, 0, 0, 0, 0, t669, t673, t653, t605, 0, 0, 0, 0, 0, 0, t669, t673, t653, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1212, -t1211, 0, t1177, 0, 0, 0, 0, 0, 0, t1110, t1111, t1106, t1029, 0, 0, 0, 0, 0, 0, t867, t876, t851, t756, 0, 0, 0, 0, 0, 0, t767, t770, t742, t645, 0, 0, 0, 0, 0, 0, t668, t672, t652, t604, 0, 0, 0, 0, 0, 0, t668, t672, t652, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1142, t1143, t1137, t1078, 0, 0, 0, 0, 0, 0, t935, t937, t918, t804, 0, 0, 0, 0, 0, 0, t811, t816, t791, t674, 0, 0, 0, 0, 0, 0, t707, t710, t687, t617, 0, 0, 0, 0, 0, 0, t707, t710, t687, t610; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1212, 0, -t1211, 0, t1384, -t1197, -t1177, -pkin(8) * t1177, -t1170 * t1234 + t1184 * t1238, -t1139 * t1234 + t1162 * t1238, -t1146 * t1234 + t1166 * t1238, -t1169 * t1234 + t1183 * t1238, -t1144 * t1234 + t1164 * t1238, t1185 * t1238 + t1234 * t1392, -pkin(8) * t1110 - t1065 * t1234 + t1075 * t1238, -pkin(8) * t1111 - t1064 * t1234 + t1076 * t1238, -pkin(8) * t1106 + t1040 * t1238 - t1048 * t1234, -pkin(8) * t1029 + t1015 * t1238 - t1031 * t1234, t1011 * t1238 - t1234 * t964, -t1234 * t922 + t1238 * t961, -t1234 * t941 + t1238 * t996, t1010 * t1238 - t1234 * t963, -t1234 * t942 + t1238 * t997, t1043 * t1238 - t1234 * t998, -pkin(8) * t867 - t1234 * t761 + t1238 * t778, -pkin(8) * t876 - t1234 * t762 + t1238 * t784, -pkin(8) * t851 - t1234 * t729 + t1238 * t746, -pkin(8) * t756 - t1234 * t683 + t1238 * t690, -t1234 * t847 + t1238 * t900, -t1234 * t794 + t1238 * t839, -t1234 * t823 + t1238 * t859, -t1234 * t846 + t1238 * t899, -t1234 * t824 + t1238 * t860, -t1234 * t878 + t1238 * t939, -pkin(8) * t767 - t1234 * t647 + t1238 * t661, -pkin(8) * t770 - t1234 * t648 + t1238 * t662, -pkin(8) * t742 - t1234 * t632 + t1238 * t644, -pkin(8) * t645 - t1234 * t613 + t1238 * t615, t702, t660, t679, t701, t680, t731, -t1234 * t606 + t1238 * t614 - t1490, -t1234 * t607 + t1238 * t616 - t1489, -t1234 * t597 + t1238 * t603 - t1491, -pkin(8) * t604 - t1234 * t589 + t1238 * t590, t702, t660, t679, t701, t680, t731, -t1234 * t598 + t1238 * t608 - t1490, -t1234 * t600 + t1238 * t609 - t1489, -t1234 * t593 + t1238 * t599 - t1491, -pkin(8) * t595 - t1234 * t587 + t1238 * t588; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1211, 0, t1212, 0, t1197, t1384, t1178, pkin(8) * t1178, t1170 * t1238 + t1184 * t1234, t1139 * t1238 + t1162 * t1234, t1146 * t1238 + t1166 * t1234, t1169 * t1238 + t1183 * t1234, t1144 * t1238 + t1164 * t1234, t1185 * t1234 - t1238 * t1392, pkin(8) * t1112 + t1065 * t1238 + t1075 * t1234, pkin(8) * t1113 + t1064 * t1238 + t1076 * t1234, pkin(8) * t1107 + t1040 * t1234 + t1048 * t1238, pkin(8) * t1030 + t1015 * t1234 + t1031 * t1238, t1011 * t1234 + t1238 * t964, t1234 * t961 + t1238 * t922, t1234 * t996 + t1238 * t941, t1010 * t1234 + t1238 * t963, t1234 * t997 + t1238 * t942, t1043 * t1234 + t1238 * t998, pkin(8) * t868 + t1234 * t778 + t1238 * t761, pkin(8) * t877 + t1234 * t784 + t1238 * t762, pkin(8) * t852 + t1234 * t746 + t1238 * t729, pkin(8) * t757 + t1234 * t690 + t1238 * t683, t1234 * t900 + t1238 * t847, t1234 * t839 + t1238 * t794, t1234 * t859 + t1238 * t823, t1234 * t899 + t1238 * t846, t1234 * t860 + t1238 * t824, t1234 * t939 + t1238 * t878, pkin(8) * t768 + t1234 * t661 + t1238 * t647, pkin(8) * t771 + t1234 * t662 + t1238 * t648, pkin(8) * t743 + t1234 * t644 + t1238 * t632, pkin(8) * t646 + t1234 * t615 + t1238 * t613, t700, t659, t677, t699, t678, t730, t1234 * t614 + t1238 * t606 + t667, t1234 * t616 + t1238 * t607 + t671, t1234 * t603 + t1238 * t597 + t651, pkin(8) * t605 + t1234 * t590 + t1238 * t589, t700, t659, t677, t699, t678, t730, t1234 * t608 + t1238 * t598 + t667, t1234 * t609 + t1238 * t600 + t671, t1234 * t599 + t1238 * t593 + t651, pkin(8) * t596 + t1234 * t588 + t1238 * t587; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1214, t1215, 0, 0, t1220 * t1419, t1230 * t1195 + t1227 * t1310, t1230 * t1190 + t1227 * t1308, t1223 * t1419, t1230 * t1191 + t1227 * t1305, t1224 * qJDD(1), pkin(1) * t1145 - t1230 * t1151 + t1227 * t1338, pkin(1) * t1147 - t1230 * t1152 + t1227 * t1337, pkin(1) * t1138 + t1227 * t1271, pkin(1) * t1079 + t1096 * t1465, t1230 * t1062 + t1227 * t1319, t1230 * t1020 + t1227 * t1328, t1230 * t1036 + t1227 * t1322, t1230 * t1060 + t1227 * t1320, t1230 * t1037 + t1227 * t1321, t1230 * t1090 + t1227 * t1318, pkin(1) * t936 + t1227 * t1274 + t1230 * t891, pkin(1) * t938 + t1227 * t1273 + t1230 * t897, pkin(1) * t919 + t1227 * t1275 + t1230 * t861, pkin(1) * t805 + t1227 * t1276 + t1230 * t845, t1227 * t1336 + t1230 * t949, t1227 * t1362 + t1230 * t885, t1227 * t1358 + t1230 * t928, t1227 * t1356 + t1230 * t948, t1227 * t1357 + t1230 * t929, t1227 * t1334 + t1230 * t993, pkin(1) * t812 + t1227 * t1278 + t1230 * t744, pkin(1) * t817 + t1227 * t1277 + t1230 * t747, pkin(1) * t792 + t1227 * t1279 + t1230 * t704, pkin(1) * t675 + t1227 * t1280 + t1230 * t663, t738, t692, t714, t737, t715, t782, t1227 * t1376 + t1230 * t637 + t1474, t1227 * t1375 + t1230 * t640 + t1473, t1227 * t1380 + t1230 * t624 + t1475, pkin(1) * t618 + t1227 * t1281 + t1230 * t601, t738, t692, t714, t737, t715, t782, t1227 * t1379 + t1230 * t627 + t1474, t1227 * t1378 + t1230 * t629 + t1473, t1227 * t1381 + t1230 * t619 + t1475, pkin(1) * t611 + t1227 * t1282 + t1230 * t591;];
tauB_reg  = t1;
