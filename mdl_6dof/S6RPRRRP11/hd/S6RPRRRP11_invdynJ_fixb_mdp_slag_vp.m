% Calculate vector of inverse dynamics joint torques for
% S6RPRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRRP11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRRP11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RPRRRP11_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:41:46
% EndTime: 2019-03-09 06:42:10
% DurationCPUTime: 19.90s
% Computational Cost: add. (18071->724), mult. (57426->968), div. (0->0), fcn. (49848->14), ass. (0->295)
t744 = sin(pkin(12));
t746 = cos(pkin(12));
t913 = cos(pkin(6));
t930 = cos(qJ(1));
t830 = t913 * t930;
t928 = sin(qJ(1));
t691 = t744 * t830 + t746 * t928;
t750 = sin(qJ(3));
t929 = cos(qJ(3));
t787 = t928 * t744 - t746 * t830;
t745 = sin(pkin(6));
t911 = sin(pkin(7));
t849 = t745 * t911;
t912 = cos(pkin(7));
t954 = t787 * t912 + t930 * t849;
t618 = -t691 * t929 + t750 * t954;
t749 = sin(qJ(4));
t752 = cos(qJ(4));
t850 = t745 * t912;
t933 = t787 * t911 - t930 * t850;
t587 = t618 * t752 - t749 * t933;
t615 = t691 * t750 + t929 * t954;
t748 = sin(qJ(5));
t751 = cos(qJ(5));
t958 = t587 * t748 + t615 * t751;
t903 = t615 * t748;
t957 = t587 * t751 - t903;
t899 = t744 * t745;
t855 = qJD(1) * t899;
t816 = t913 * t911;
t788 = t929 * t816;
t828 = t912 * t929;
t811 = t746 * t828;
t944 = -t745 * t811 - t788;
t879 = t944 * qJD(1);
t648 = t750 * t855 + t879;
t786 = qJD(4) + t648;
t848 = t750 * t912;
t775 = t745 * (-t744 * t848 + t746 * t929);
t827 = t911 * t929;
t805 = qJD(3) * t827;
t955 = qJD(1) * t775 - t805;
t586 = t618 * t749 + t752 * t933;
t680 = (-pkin(9) * t744 * t911 - pkin(2) * t746 - pkin(1)) * t745;
t669 = qJD(1) * t680 + qJD(2);
t847 = t750 * t911;
t730 = t746 * t745 * qJ(2);
t843 = qJD(1) * t913;
t835 = pkin(1) * t843;
t687 = qJD(1) * t730 + t744 * t835;
t767 = (t746 * t850 + t816) * pkin(9);
t637 = qJD(1) * t767 + t687;
t726 = t746 * t835;
t768 = t913 * pkin(2) + (-pkin(9) * t912 - qJ(2)) * t899;
t643 = qJD(1) * t768 + t726;
t949 = t929 * t637 + t643 * t848;
t574 = t669 * t847 + t949;
t953 = t574 - t786 * (pkin(4) * t749 - pkin(11) * t752);
t832 = t746 * t848;
t783 = t744 * t929 + t832;
t804 = t750 * t816;
t663 = t745 * t783 + t804;
t651 = t663 * qJD(3);
t758 = qJD(1) * t651;
t864 = qJDD(1) * t745;
t852 = t744 * t864;
t880 = t944 * qJDD(1);
t789 = t750 * t852 + t880;
t785 = qJDD(4) + t789;
t938 = t758 + t785;
t948 = t750 * t637 - t643 * t828;
t695 = t749 * t847 - t752 * t912;
t826 = qJD(1) * t849;
t808 = t744 * t826;
t947 = qJD(4) * t695 + t749 * t808 + t752 * t955;
t774 = t745 * (t744 * t828 + t746 * t750);
t676 = qJD(1) * t774;
t825 = qJD(3) * t847;
t946 = t676 - t825;
t652 = t663 * qJD(1);
t817 = t913 * t912;
t867 = -t746 * t826 + qJD(3);
t782 = -qJD(1) * t817 - t867;
t609 = t749 * t652 + t752 * t782;
t599 = -qJD(3) * t648 + qJDD(1) * t804 + t832 * t864 + t929 * t852;
t690 = t746 * t849 - t817;
t684 = qJDD(1) * t690 - qJDD(3);
t815 = t752 * t599 - t749 * t684;
t756 = -qJD(4) * t609 + t815;
t945 = qJD(5) * t786 + t756;
t747 = -qJ(6) - pkin(11);
t943 = -qJ(6) * t609 + qJD(5) * t747;
t858 = pkin(1) * t913;
t694 = t744 * t858 + t730;
t655 = t767 + t694;
t734 = t746 * t858;
t664 = t734 + t768;
t860 = t929 * t655 + (t912 * t664 + t911 * t680) * t750;
t742 = t745 ^ 2;
t942 = t742 * (t744 ^ 2 + t746 ^ 2);
t898 = t744 * t750;
t861 = t745 * t898;
t662 = t861 + t944;
t612 = -t664 * t911 + t912 * t680;
t565 = t662 * pkin(3) - t663 * pkin(10) + t612;
t572 = -pkin(10) * t690 + t860;
t891 = t749 * t565 + t752 * t572;
t520 = pkin(11) * t662 + t891;
t764 = -t750 * t655 + t664 * t828 + t680 * t827;
t571 = t690 * pkin(3) - t764;
t613 = t663 * t749 + t690 * t752;
t614 = t663 * t752 - t690 * t749;
t534 = t613 * pkin(4) - t614 * pkin(11) + t571;
t893 = t751 * t520 + t748 * t534;
t875 = qJD(4) * t749;
t862 = pkin(10) * t875;
t940 = t748 * t862 - t751 * t953;
t696 = t749 * t912 + t752 * t847;
t885 = qJD(4) * t696 - t749 * t955 + t752 * t808;
t829 = t913 * t928;
t778 = t744 * t930 + t746 * t829;
t937 = t778 * t912 - t928 * t849;
t573 = t669 * t827 - t948;
t601 = pkin(3) * t652 + pkin(10) * t648;
t890 = t752 * t573 + t749 * t601;
t529 = pkin(11) * t652 + t890;
t716 = -pkin(4) * t752 - pkin(11) * t749 - pkin(3);
t871 = qJD(5) * t751;
t936 = t751 * t529 - t716 * t871 + t748 * t953;
t611 = t752 * t652 - t749 * t782;
t600 = t758 + t789;
t754 = qJDD(4) + t600;
t507 = t611 * t871 + t748 * t945 - t751 * t754;
t935 = t507 * pkin(5) + qJDD(6);
t692 = -t744 * t829 + t746 * t930;
t620 = t692 * t929 - t750 * t937;
t790 = g(1) * t620 - g(2) * t618 + g(3) * t663;
t619 = t692 * t750 + t929 * t937;
t791 = g(1) * t619 + g(2) * t615 + g(3) * t662;
t759 = -t778 * t911 - t850 * t928;
t589 = t620 * t752 - t749 * t759;
t544 = -t589 * t748 + t619 * t751;
t582 = t614 * t748 - t662 * t751;
t934 = -g(1) * t544 - g(2) * t958 + g(3) * t582;
t834 = qJDD(1) * t858;
t866 = qJD(1) * qJD(2);
t853 = t745 * t866;
t673 = qJDD(1) * t730 + t744 * t834 + t746 * t853;
t625 = qJDD(1) * t767 + t673;
t724 = t746 * t834;
t626 = qJDD(1) * t768 - t744 * t853 + t724;
t665 = qJDD(1) * t680 + qJDD(2);
t802 = qJD(3) * t949 + t750 * t625 - t626 * t828 - t665 * t827 + t669 * t825;
t522 = t684 * pkin(3) + t802;
t932 = t522 - t791;
t578 = t751 * t611 + t748 * t786;
t931 = t578 ^ 2;
t927 = pkin(1) * t742;
t926 = pkin(4) * t652;
t925 = pkin(5) * t748;
t924 = pkin(10) * t752;
t914 = pkin(10) * qJD(4);
t909 = qJ(6) * t749;
t872 = qJD(5) * t748;
t506 = t611 * t872 - t748 * t754 - t751 * t945;
t908 = t506 * t748;
t839 = t749 * t599 + t752 * t684;
t543 = t611 * qJD(4) + t839;
t542 = qJDD(5) + t543;
t907 = t542 * t748;
t906 = t542 * t751;
t576 = t611 * t748 - t751 * t786;
t608 = qJD(5) + t609;
t905 = t576 * t608;
t904 = t578 * t608;
t838 = t608 * t751;
t902 = t619 * t748;
t901 = t648 * t749;
t900 = t648 * t752;
t897 = t749 * t751;
t896 = t751 * t752;
t606 = -t643 * t911 + t912 * t669;
t550 = t648 * pkin(3) - t652 * pkin(10) + t606;
t554 = -pkin(10) * t782 + t574;
t515 = t749 * t550 + t752 * t554;
t509 = pkin(11) * t786 + t515;
t553 = pkin(3) * t782 - t573;
t525 = t609 * pkin(4) - t611 * pkin(11) + t553;
t496 = -t509 * t748 + t751 * t525;
t489 = -qJ(6) * t578 + t496;
t488 = pkin(5) * t608 + t489;
t895 = -t489 + t488;
t514 = t752 * t550 - t749 * t554;
t563 = pkin(4) * t611 + pkin(11) * t609;
t894 = t751 * t514 + t748 * t563;
t594 = -t648 * t896 + t652 * t748;
t736 = pkin(10) * t896;
t870 = qJD(6) * t751;
t889 = pkin(5) * t901 + qJ(6) * t594 + t529 * t748 - t749 * t870 + (pkin(5) * t749 - qJ(6) * t896) * qJD(4) + (-t736 + (-t716 + t909) * t748) * qJD(5) + t940;
t784 = -t751 * t696 + t748 * t827;
t888 = -qJD(5) * t784 - t748 * t947 + t751 * t946;
t670 = -t748 * t696 - t751 * t827;
t887 = -qJD(5) * t670 + t748 * t946 + t751 * t947;
t593 = -t751 * t652 - t748 * t900;
t886 = qJ(6) * t593 + (-qJ(6) * qJD(5) - t914) * t897 + (-qJD(6) * t749 + (-pkin(10) * qJD(5) - qJ(6) * qJD(4)) * t752) * t748 - t936;
t884 = t748 * t943 + t870 - t894;
t558 = t751 * t563;
t883 = -pkin(5) * t611 - t558 + t943 * t751 + (-qJD(6) + t514) * t748;
t878 = t748 * t716 + t736;
t856 = t745 * t928;
t877 = t930 * pkin(1) + qJ(2) * t856;
t874 = qJD(4) * t752;
t873 = qJD(5) * t608;
t869 = t553 * qJD(4);
t868 = t684 * MDP(12);
t865 = qJDD(1) * t744;
t863 = g(1) * t928;
t857 = t745 * t930;
t854 = qJD(4) + t879;
t753 = qJD(1) ^ 2;
t846 = t753 * t913;
t842 = -t520 * t748 + t751 * t534;
t841 = t565 * t752 - t749 * t572;
t569 = t749 * t573;
t840 = t601 * t752 - t569;
t781 = qJD(3) * t948 - t929 * t625 - t626 * t848 - t665 * t847 - t669 * t805;
t521 = -pkin(10) * t684 - t781;
t592 = -t626 * t911 + t912 * t665;
t535 = t600 * pkin(3) - t599 * pkin(10) + t592;
t837 = t749 * t521 - t752 * t535 + t550 * t875 + t554 * t874;
t831 = -pkin(1) * t928 + qJ(2) * t857;
t588 = t620 * t749 + t752 * t759;
t823 = g(1) * t586 + g(2) * t588;
t822 = qJD(2) * t843;
t820 = g(2) * t857 - g(3) * t913;
t819 = -t748 * t874 + t593;
t818 = t751 * t874 - t594;
t497 = t509 * t751 + t525 * t748;
t583 = t614 * t751 + t662 * t748;
t814 = (-qJ(2) * t855 + t726) * t744 - t687 * t746;
t807 = t744 * qJD(2) * t849;
t559 = qJD(2) * t775 + qJD(3) * t764;
t650 = (t788 + (t811 - t898) * t745) * qJD(3);
t591 = t651 * pkin(3) - t650 * pkin(10) + t807;
t806 = -t749 * t559 - t565 * t875 - t572 * t874 + t591 * t752;
t519 = -pkin(4) * t662 - t841;
t508 = -pkin(4) * t786 - t514;
t799 = -pkin(11) * t542 + t508 * t608;
t798 = -t752 * t521 - t749 * t535 - t550 * t874 + t554 * t875;
t797 = t752 * t559 + t565 * t874 - t572 * t875 + t749 * t591;
t486 = pkin(11) * t938 - t798;
t494 = t543 * pkin(4) - pkin(11) * t756 + t522;
t796 = -t751 * t486 - t748 * t494 + t509 * t872 - t525 * t871;
t502 = pkin(11) * t651 + t797;
t560 = qJD(2) * t774 + qJD(3) * t860;
t580 = qJD(4) * t614 + t650 * t749;
t581 = -qJD(4) * t613 + t650 * t752;
t512 = t580 * pkin(4) - t581 * pkin(11) + t560;
t795 = t751 * t502 + t748 * t512 - t520 * t872 + t534 * t871;
t794 = g(1) * t930 + g(2) * t928;
t793 = g(1) * t588 - g(2) * t586 + g(3) * t613;
t792 = -g(1) * t589 + g(2) * t587 - g(3) * t614;
t503 = -pkin(4) * t651 - t806;
t780 = qJD(4) * t786;
t773 = pkin(10) * t873 - t791;
t771 = t793 - t837;
t770 = -qJD(5) * t893 - t502 * t748 + t751 * t512;
t481 = -qJD(5) * t497 - t748 * t486 + t751 * t494;
t487 = -pkin(4) * t938 + t837;
t769 = pkin(11) * t873 + t487 - t793;
t757 = t648 * t786 + t780;
t739 = pkin(5) * t751 + pkin(4);
t727 = -pkin(1) * t864 + qJDD(2);
t718 = t747 * t751;
t717 = t747 * t748;
t705 = t751 * t716;
t693 = -qJ(2) * t899 + t734;
t674 = -t748 * t909 + t878;
t672 = t724 + (-qJ(2) * qJDD(1) - t866) * t899;
t661 = -qJ(6) * t897 + t705 + (-pkin(10) * t748 - pkin(5)) * t752;
t575 = t576 ^ 2;
t545 = t589 * t751 + t902;
t537 = -qJD(5) * t582 + t581 * t751 + t651 * t748;
t536 = qJD(5) * t583 + t581 * t748 - t651 * t751;
t528 = -t840 - t926;
t505 = t576 * pkin(5) + qJD(6) + t508;
t495 = -qJ(6) * t582 + t893;
t491 = pkin(5) * t613 - qJ(6) * t583 + t842;
t490 = -qJ(6) * t576 + t497;
t484 = t487 + t935;
t483 = -qJ(6) * t536 - qJD(6) * t582 + t795;
t482 = pkin(5) * t580 - qJ(6) * t537 - qJD(6) * t583 + t770;
t479 = -qJ(6) * t507 - qJD(6) * t576 - t796;
t478 = pkin(5) * t542 + qJ(6) * t506 - qJD(6) * t578 + t481;
t1 = [(t866 * t942 + (-t672 * t744 + t673 * t746 + (-t693 * t744 + t694 * t746) * qJDD(1) - t794) * t745) * MDP(6) + (-g(1) * t615 + g(2) * t619 + t559 * t782 + t592 * t663 + t612 * t599 + t606 * t650 + t652 * t807 + t684 * t860 - t690 * t781) * MDP(14) + (t479 * t495 + t490 * t483 + t478 * t491 + t488 * t482 + t484 * (pkin(5) * t582 + t519) + t505 * (pkin(5) * t536 + t503) - g(1) * (-t691 * pkin(2) + t618 * pkin(3) - pkin(5) * t903 - pkin(10) * t615 - t586 * t747 + t587 * t739 + t831) - g(2) * (t692 * pkin(2) + t620 * pkin(3) + pkin(5) * t902 + t619 * pkin(10) - t588 * t747 + t589 * t739 + t877) + (g(1) * t933 + g(2) * t759) * pkin(9)) * MDP(30) + (-t515 * t651 + t522 * t614 + t553 * t581 + t560 * t611 + t571 * t756 + t662 * t798 - t786 * t797 - t891 * t938 + t823) * MDP(21) + (-g(1) * t587 - g(2) * t589 + t514 * t651 + t522 * t613 + t571 * t543 + t553 * t580 + t560 * t609 - t662 * t837 + t754 * t841 + t786 * t806) * MDP(20) + (t581 * t854 + t614 * (qJD(3) * qJD(1) * t804 + qJDD(4) + t880) + t756 * t662 + t611 * t651 + (t614 * t750 * t865 + (qJD(3) * t614 * t783 + t581 * t898) * qJD(1)) * t745) * MDP(17) + (-g(1) * t618 - g(2) * t620 + t560 * t782 + t592 * t662 + t612 * t600 + t606 * t651 + t648 * t807 - t684 * t764 + t690 * t802) * MDP(13) + qJDD(1) * MDP(1) + (-t478 * t583 - t479 * t582 - t482 * t578 - t483 * t576 - t488 * t537 - t490 * t536 + t491 * t506 - t495 * t507 - t823) * MDP(29) + t794 * MDP(3) + (t785 * t662 + (t854 + (t662 + t861) * qJD(1)) * t651) * MDP(19) + (t673 * t694 + t672 * t693 - g(1) * t831 - g(2) * t877 + (-t727 * pkin(1) - qJD(2) * t814) * t745) * MDP(7) + (-g(2) * t930 + t863) * MDP(2) + (-t673 * t913 - g(1) * t787 + g(2) * t778 + (t727 * t744 - t746 * t822) * t745 + (-t694 * t913 - t744 * t927) * qJDD(1)) * MDP(5) + (t672 * t913 + g(1) * t691 - g(2) * t692 + (-t727 * t746 - t744 * t822) * t745 + (t693 * t913 + t746 * t927) * qJDD(1)) * MDP(4) + (t600 * t690 + t651 * t782 + t662 * t684) * MDP(11) + (-t599 * t690 - t650 * t782 - t663 * t684) * MDP(10) + (-t614 * t543 - t611 * t580 - t581 * t609 - t613 * t756) * MDP(16) + (t611 * t581 + t614 * t756) * MDP(15) + (-g(1) * t957 - g(2) * t545 + t481 * t613 + t487 * t582 + t496 * t580 + t503 * t576 + t519 * t507 + t508 * t536 + t842 * t542 + t770 * t608) * MDP(27) + (g(1) * t958 - g(2) * t544 + t487 * t583 - t497 * t580 + t503 * t578 - t519 * t506 + t508 * t537 - t893 * t542 - t795 * t608 + t796 * t613) * MDP(28) + (-t599 * t662 - t600 * t663 - t648 * t650 - t651 * t652) * MDP(9) + (t599 * t663 + t650 * t652) * MDP(8) + (t542 * t613 + t580 * t608) * MDP(26) + (-t507 * t613 - t536 * t608 - t542 * t582 - t576 * t580) * MDP(25) + (-t506 * t613 + t537 * t608 + t542 * t583 + t578 * t580) * MDP(24) + (t506 * t582 - t507 * t583 - t536 * t578 - t537 * t576) * MDP(23) + (-t506 * t583 + t537 * t578) * MDP(22) + t690 * t868 + (-t580 * t854 - t613 * t785 - t543 * t662 - t609 * t651 + (-t580 * t861 - t613 * t651) * qJD(1)) * MDP(18); -t753 * MDP(6) * t942 + (qJDD(2) + t820) * MDP(7) + (t600 * t912 - t648 * t808 - t684 * t827 - t782 * t946) * MDP(13) + (t599 * t912 - t652 * t808 + t684 * t847 - t782 * t955) * MDP(14) + (-t695 * t785 - t543 * t827 - t676 * t609 + (t609 * t847 - t652 * t695) * qJD(3) - t885 * t786) * MDP(20) + (-t611 * t946 - t696 * t938 - t756 * t827 + t786 * t947) * MDP(21) + (t507 * t695 + t542 * t670 + t576 * t885 - t608 * t888) * MDP(27) + (-t506 * t695 + t542 * t784 + t578 * t885 + t608 * t887) * MDP(28) + (t506 * t670 + t507 * t784 + t576 * t887 + t578 * t888) * MDP(29) + (-g(1) * t856 + t478 * t670 - t479 * t784 + t484 * t695 - t488 * t888 - t490 * t887 + t505 * t885 + t820) * MDP(30) + ((-qJDD(1) * t746 + t744 * t846) * MDP(4) + (t746 * t846 + t865) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t814 - t863) * MDP(7)) * t745; t652 * t648 * MDP(8) + (-t648 ^ 2 + t652 ^ 2) * MDP(9) + (-t648 * t782 + t599) * MDP(10) + (t652 * t867 + (t652 * t817 - t651) * qJD(1) - t789) * MDP(11) - t868 + (-t574 * t782 - t606 * t652 + t791 - t802) * MDP(13) + (-t573 * t782 + t606 * t648 + t781 + t790) * MDP(14) + ((-qJD(4) * t652 - t684) * t749 ^ 2 + ((-qJD(4) * t782 + t599) * t749 + t786 * t611) * t752) * MDP(15) + (-t749 * t543 + t752 * t756 + (-t875 - t901) * t611 + (-t874 - t900) * t609) * MDP(16) + (-t611 * t652 + t749 * t938 + t752 * t757) * MDP(17) + (t609 * t652 - t749 * t757 + t752 * t938) * MDP(18) - t786 * t652 * MDP(19) + (-pkin(3) * t543 - t514 * t652 + t553 * t901 - t574 * t609 - t780 * t924 - t786 * t840 + (-pkin(10) * t754 + t869) * t749 - t932 * t752) * MDP(20) + (-pkin(3) * t756 + t515 * t652 + t553 * t900 - t574 * t611 + t752 * t869 - t938 * t924 + (t862 + t890) * t786 + t932 * t749) * MDP(21) + (-t506 * t897 + (-t749 * t872 + t818) * t578) * MDP(22) + (t576 * t594 + t578 * t593 + (-t576 * t751 - t578 * t748) * t874 + (t908 - t507 * t751 + (t576 * t748 - t578 * t751) * qJD(5)) * t749) * MDP(23) + (t506 * t752 + t818 * t608 + (t578 * t786 - t608 * t872 + t906) * t749) * MDP(24) + (t507 * t752 + t819 * t608 + (-t576 * t786 - t608 * t871 - t907) * t749) * MDP(25) + (t608 * t749 * t786 - t542 * t752) * MDP(26) + (-t508 * t593 - t528 * t576 + t705 * t542 + t940 * t608 + ((-qJD(5) * t716 + t529) * t608 - t790) * t748 + (t508 * t748 * qJD(4) - t481 + (qJD(4) * t576 - t907) * pkin(10) - t773 * t751) * t752 + (pkin(10) * t507 + t487 * t748 + t496 * t786 + t508 * t871) * t749) * MDP(27) + (-t878 * t542 - t528 * t578 - t508 * t594 + t936 * t608 - t790 * t751 + (-t796 + (pkin(10) * t578 + t508 * t751) * qJD(4) + t773 * t748) * t752 + (-t508 * t872 + t487 * t751 - t786 * t497 + (qJD(4) * t838 - t506) * pkin(10)) * t749) * MDP(28) + (t488 * t594 + t490 * t593 + t506 * t661 - t507 * t674 - t889 * t578 - t886 * t576 + (-t488 * t751 - t490 * t748) * t874 + (-t478 * t751 - t479 * t748 + (t488 * t748 - t490 * t751) * qJD(5) + t791) * t749) * MDP(29) + (t478 * t661 + t479 * t674 + (t926 - t569 + (t601 + t914) * t752 + (t749 * t871 - t819) * pkin(5)) * t505 + t886 * t490 + t889 * t488 + t791 * (t739 * t752 - t747 * t749 + pkin(3)) + (t484 * t749 - t790) * (pkin(10) + t925)) * MDP(30); -t609 ^ 2 * MDP(16) + (t648 * t609 + t815) * MDP(17) - t839 * MDP(18) + t754 * MDP(19) + (t515 * t786 + t771) * MDP(20) + (t514 * t786 + t553 * t609 - t792 + t798) * MDP(21) + (t578 * t838 - t908) * MDP(22) + ((-t506 - t905) * t751 + (-t507 - t904) * t748) * MDP(23) + (t608 * t838 + t907) * MDP(24) + (-t608 ^ 2 * t748 + t906) * MDP(25) + (-pkin(4) * t507 - t515 * t576 - t558 * t608 + (t514 * t608 + t799) * t748 - t769 * t751) * MDP(27) + (pkin(4) * t506 - t515 * t578 + t608 * t894 + t748 * t769 + t751 * t799) * MDP(28) + (t506 * t717 + t507 * t718 - t883 * t578 - t884 * t576 + (-t488 * t608 + t479) * t751 + (-t490 * t608 - t478) * t748 + t792) * MDP(29) + (-t479 * t718 + t478 * t717 - t484 * t739 - g(1) * (-t588 * t739 - t589 * t747) - g(2) * (t586 * t739 + t587 * t747) - g(3) * (-t613 * t739 - t614 * t747) + (t608 * t925 - t515) * t505 + t884 * t490 + t883 * t488) * MDP(30) + (MDP(15) * t609 + t611 * MDP(16) + MDP(18) * t648 - t553 * MDP(20) - t578 * MDP(24) + t576 * MDP(25) - t608 * MDP(26) - t496 * MDP(27) + t497 * MDP(28)) * t611; t578 * t576 * MDP(22) + (-t575 + t931) * MDP(23) + (-t506 + t905) * MDP(24) + (-t507 + t904) * MDP(25) + t542 * MDP(26) + (t497 * t608 - t508 * t578 + t481 + t934) * MDP(27) + (g(1) * t545 - g(2) * t957 + g(3) * t583 + t496 * t608 + t508 * t576 + t796) * MDP(28) + (pkin(5) * t506 - t576 * t895) * MDP(29) + (t895 * t490 + (-t505 * t578 + t478 + t934) * pkin(5)) * MDP(30); (-t575 - t931) * MDP(29) + (-pkin(4) * t754 + t488 * t578 + t490 * t576 - t771 + t935) * MDP(30);];
tau  = t1;
