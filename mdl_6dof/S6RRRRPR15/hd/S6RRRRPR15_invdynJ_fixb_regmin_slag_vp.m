% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR15_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR15_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR15_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:50:19
% EndTime: 2019-03-10 00:51:05
% DurationCPUTime: 21.33s
% Computational Cost: add. (23763->854), mult. (68410->1165), div. (0->0), fcn. (57837->14), ass. (0->391)
t339 = cos(qJ(2));
t559 = cos(pkin(6));
t508 = pkin(1) * t559;
t324 = t339 * t508;
t314 = qJD(1) * t324;
t336 = sin(qJ(2));
t332 = sin(pkin(6));
t558 = cos(pkin(7));
t422 = t332 * (-t558 * pkin(10) - pkin(9));
t405 = t336 * t422;
t235 = qJD(1) * t405 + t314;
t323 = t336 * t508;
t369 = t339 * t422 - t323;
t236 = t369 * qJD(1);
t557 = sin(pkin(7));
t488 = t339 * t557;
t402 = pkin(2) * t336 - pkin(10) * t488;
t527 = qJD(1) * t332;
t272 = t402 * t527;
t583 = cos(qJ(3));
t463 = t558 * t583;
t335 = sin(qJ(3));
t493 = t335 * t557;
t412 = pkin(2) * t463 - pkin(10) * t493;
t494 = t335 * t558;
t608 = t412 * qJD(3) - t583 * t235 - t236 * t494 - t272 * t493;
t388 = -t336 * t494 + t583 * t339;
t268 = t388 * t332;
t253 = qJD(1) * t268;
t462 = t557 * t583;
t424 = qJD(3) * t462;
t401 = t424 - t253;
t496 = t332 * t557;
t461 = qJD(1) * t496;
t431 = t336 * t461;
t607 = pkin(11) * t431 - t608;
t164 = -t557 * t236 + t558 * t272;
t386 = t335 * t339 + t336 * t463;
t267 = t386 * t332;
t252 = qJD(1) * t267;
t606 = t252 * pkin(3) - t253 * pkin(11) + t164 - (pkin(3) * t493 - pkin(11) * t462) * qJD(3);
t334 = sin(qJ(4));
t338 = cos(qJ(4));
t283 = t334 * t493 - t338 * t558;
t533 = t283 * qJD(4) + t334 * t431 - t401 * t338;
t459 = qJD(3) * t494;
t605 = pkin(2) * t459 + pkin(10) * t424 - t335 * t235 + t236 * t463 + t272 * t462;
t340 = cos(qJ(1));
t487 = t340 * t559;
t582 = sin(qJ(1));
t285 = t582 * t336 - t339 * t487;
t286 = t336 * t487 + t582 * t339;
t542 = t332 * t340;
t176 = -t285 * t494 + t286 * t583 - t493 * t542;
t497 = t332 * t558;
t383 = t285 * t557 - t340 * t497;
t126 = t176 * t334 - t338 * t383;
t175 = t285 * t463 + t286 * t335 + t462 * t542;
t333 = sin(qJ(6));
t337 = cos(qJ(6));
t604 = t126 * t333 + t175 * t337;
t603 = t126 * t337 - t175 * t333;
t529 = pkin(2) * t494 + pkin(10) * t462;
t276 = t558 * pkin(11) + t529;
t506 = t557 * pkin(2);
t277 = -pkin(3) * t462 - pkin(11) * t493 - t506;
t522 = qJD(4) * t338;
t523 = qJD(4) * t334;
t597 = -t276 * t522 - t277 * t523 + t607 * t334 - t606 * t338;
t490 = t338 * t557;
t284 = t334 * t558 + t335 * t490;
t532 = qJD(4) * t284 + t401 * t334 + t338 * t431;
t530 = pkin(3) * t431 + t605;
t457 = qJD(3) * t493;
t419 = t457 - t252;
t489 = t339 * t558;
t387 = t335 * t489 + t583 * t336;
t380 = t387 * t332;
t482 = t559 * qJD(1);
t436 = t482 + qJD(2);
t394 = t557 * t436;
t382 = t335 * t394;
t206 = qJD(1) * t380 + t382;
t519 = t339 * t461 - qJD(3);
t374 = -t558 * t436 + t519;
t155 = t338 * t206 - t334 * t374;
t152 = qJD(6) + t155;
t372 = t559 * pkin(2) + t405;
t203 = qJD(2) * pkin(2) + qJD(1) * t372 + t314;
t492 = t336 * t557;
t403 = pkin(2) * t339 + pkin(10) * t492;
t398 = -pkin(1) - t403;
t261 = t398 * t332;
t248 = qJD(1) * t261;
t147 = -t557 * t203 + t558 * t248;
t291 = t583 * t394;
t433 = t339 * t463;
t415 = t332 * t433;
t505 = t336 * t527;
t204 = -qJD(1) * t415 + t335 * t505 - t291;
t80 = t204 * pkin(3) - t206 * pkin(11) + t147;
t543 = t332 * t339;
t395 = pkin(9) * t543 + t323;
t467 = t332 * t489;
t198 = t395 * qJD(1) + (qJD(1) * t467 + t394) * pkin(10);
t104 = t583 * t198 + t203 * t494 + t248 * t493;
t85 = -pkin(11) * t374 + t104;
t42 = t334 * t85 - t338 * t80;
t537 = qJD(5) + t42;
t599 = -t533 * qJ(5) + qJD(5) * t284 - t530;
t598 = t276 * t523 - t277 * t522 + t606 * t334 + t607 * t338;
t201 = qJD(4) + t204;
t127 = t176 * t338 + t334 * t383;
t353 = qJD(2) * t386 + qJD(3) * t387;
t476 = t559 * qJDD(1);
t429 = t476 + qJDD(2);
t393 = t557 * t429;
t517 = qJDD(1) * t336;
t121 = qJD(3) * t382 - qJDD(1) * t415 + t332 * (qJD(1) * t353 + t335 * t517) - t583 * t393;
t329 = t332 ^ 2;
t581 = pkin(1) * t329;
t596 = 0.2e1 * t581;
t585 = pkin(4) + pkin(12);
t565 = -t419 * qJ(5) + qJD(5) * t462 + t598;
t564 = -t419 * pkin(4) - t597;
t595 = t532 * pkin(4) - t599;
t351 = qJD(3) * t291 + t335 * t393;
t539 = t335 * t336;
t376 = (t433 - t539) * qJD(3);
t352 = qJD(2) * t388 + t376;
t375 = t387 * qJDD(1);
t345 = (qJD(1) * t352 + t375) * t332 + t351;
t469 = t332 * t488;
t371 = -qJDD(1) * t469 + t558 * t429 + qJDD(3);
t460 = qJD(2) * t492;
t430 = t332 * t460;
t355 = qJD(1) * t430 + t371;
t524 = qJD(4) * t155;
t64 = t345 * t334 - t338 * t355 + t524;
t464 = t559 * t582;
t390 = t340 * t336 + t339 * t464;
t592 = t390 * t558 - t582 * t496;
t591 = (qJDD(2) + 0.2e1 * t476) * t332;
t546 = t204 * t334;
t590 = -qJD(5) * t334 - t104 + (t523 + t546) * pkin(4);
t538 = pkin(5) * t155 + t537;
t287 = -t336 * t464 + t339 * t340;
t179 = t287 * t335 + t592 * t583;
t445 = t557 * t559;
t404 = t583 * t445;
t229 = t332 * t539 - t404 - t415;
t408 = g(1) * t179 + g(2) * t175 + g(3) * t229;
t43 = t334 * t80 + t338 * t85;
t35 = -qJ(5) * t201 - t43;
t368 = t338 * t374;
t153 = t206 * t334 + t368;
t579 = pkin(5) * t153;
t23 = -t35 - t579;
t63 = qJD(4) * t368 + t206 * t523 - t334 * t355 - t338 * t345;
t62 = -qJDD(6) + t63;
t589 = t585 * t62 + (t23 - t43 + t579) * t152;
t109 = t153 * t333 + t201 * t337;
t118 = qJDD(4) + t121;
t22 = qJD(6) * t109 + t118 * t333 - t337 * t64;
t587 = t155 ^ 2;
t586 = t201 ^ 2;
t342 = qJD(1) ^ 2;
t584 = pkin(5) + pkin(11);
t580 = pkin(4) * t118;
t578 = pkin(9) * t332;
t577 = pkin(11) * t118;
t423 = t335 * t445;
t230 = t423 + t380;
t446 = t559 * t558;
t282 = t469 - t446;
t170 = t230 * t334 + t282 * t338;
t573 = t170 * pkin(4);
t572 = -t532 * pkin(5) - t565;
t571 = pkin(11) * qJD(4);
t570 = t201 * t35;
t569 = t201 * t43;
t520 = qJD(6) * t337;
t521 = qJD(6) * t333;
t21 = t337 * t118 + t153 * t520 - t201 * t521 + t333 * t64;
t568 = t21 * t337;
t567 = t333 * t62;
t59 = t337 * t62;
t221 = (t467 + t445) * pkin(10) + t395;
t234 = t324 + t372;
t512 = t583 * t221 + t234 * t494 + t261 * t493;
t106 = -pkin(11) * t282 + t512;
t161 = -t557 * t234 + t558 * t261;
t99 = t229 * pkin(3) - t230 * pkin(11) + t161;
t566 = t338 * t106 + t334 * t99;
t555 = qJ(5) * t338;
t562 = -qJ(5) * t522 - t204 * t555 + t590;
t103 = -t335 * t198 + t203 * t463 + t248 * t462;
t135 = pkin(3) * t206 + pkin(11) * t204;
t560 = t338 * t103 + t334 * t135;
t54 = -qJ(5) * t206 - t560;
t561 = -pkin(5) * t546 - t584 * t523 + t54;
t556 = qJ(5) * t153;
t107 = -t337 * t153 + t201 * t333;
t554 = t107 * t152;
t553 = t107 * t201;
t552 = t109 * t152;
t551 = t109 * t201;
t115 = t118 * qJ(5);
t550 = t153 * t201;
t549 = t155 * t153;
t548 = t155 * t201;
t171 = t230 * t338 - t282 * t334;
t547 = t171 * qJ(5);
t545 = t329 * t342;
t544 = t332 * t336;
t541 = t333 * t334;
t540 = t334 * t337;
t241 = t337 * t283 + t333 * t462;
t535 = qJD(6) * t241 + t532 * t333 + t419 * t337;
t389 = -t333 * t283 + t337 * t462;
t534 = qJD(6) * t389 - t419 * t333 + t532 * t337;
t531 = t338 * t276 + t334 * t277;
t330 = t336 ^ 2;
t528 = -t339 ^ 2 + t330;
t526 = qJD(2) * t332;
t525 = qJD(3) * t335;
t518 = qJD(1) * qJD(2);
t516 = qJDD(1) * t339;
t514 = t336 * t581;
t308 = t584 * t338;
t513 = t339 * t545;
t472 = qJD(2) * t508;
t434 = qJD(1) * t472;
t471 = pkin(1) * t476;
t500 = t332 * t516;
t509 = pkin(9) * t500 + t336 * t471 + t339 * t434;
t507 = pkin(10) * t557;
t504 = t336 * t526;
t503 = qJD(3) * t583;
t502 = t339 * t518;
t501 = t332 * t517;
t498 = -qJ(5) * t334 - pkin(3);
t495 = t334 * t557;
t474 = t518 * t578;
t392 = -t336 * t474 + t509;
t450 = t558 * t518;
t479 = qJDD(1) * t558;
t141 = (t393 + (-t336 * t450 + t339 * t479) * t332) * pkin(10) + t392;
t396 = -t336 * t434 + t339 * t471;
t414 = -t502 - t517;
t397 = t414 * pkin(9);
t150 = t429 * pkin(2) + ((-t336 * t479 - t339 * t450) * pkin(10) + t397) * t332 + t396;
t391 = qJD(2) * t402;
t181 = (qJD(1) * t391 + qJDD(1) * t398) * t332;
t425 = qJD(3) * t463;
t385 = -t583 * t141 - t150 * t494 - t181 * t493 + t198 * t525 - t203 * t425 - t248 * t424;
t26 = pkin(11) * t355 - t385;
t92 = -t557 * t150 + t558 * t181;
t36 = t121 * pkin(3) - t345 * pkin(11) + t92;
t486 = -t338 * t26 - t334 * t36 - t80 * t522 + t85 * t523;
t485 = t334 * t26 - t338 * t36 + t85 * t522 + t80 * t523;
t484 = -t334 * t106 + t338 * t99;
t480 = -t334 * t276 + t338 * t277;
t478 = t201 * t338;
t477 = t152 * t333;
t470 = t332 * t492;
t50 = -qJ(5) * t229 - t566;
t174 = pkin(4) * t462 - t480;
t136 = t284 * pkin(5) + pkin(12) * t462 + t174;
t466 = -qJD(6) * t136 - t532 * t585 + t599;
t275 = -t558 * pkin(3) - t412;
t366 = -t284 * qJ(5) + t275;
t148 = t585 * t283 + t366;
t465 = qJD(6) * t148 + (t525 * t557 - t252) * t585 + t533 * pkin(5) + t597;
t458 = t332 * t342 * t559;
t180 = t287 * t583 - t592 * t335;
t356 = -t390 * t557 - t582 * t497;
t130 = t180 * t334 + t338 * t356;
t456 = -g(1) * t126 + g(2) * t130;
t131 = t180 * t338 - t334 * t356;
t455 = g(1) * t127 - g(2) * t131;
t454 = -g(1) * t175 + g(2) * t179;
t449 = qJDD(5) + t485;
t4 = -pkin(5) * t63 - t585 * t118 + t449;
t421 = t335 * t141 - t150 * t463 - t181 * t462 + t198 * t503 + t203 * t459 + t248 * t457;
t27 = -pkin(3) * t355 + t421;
t347 = t63 * qJ(5) - t155 * qJD(5) + t27;
t8 = t585 * t64 + t347;
t453 = t333 * t4 + t337 * t8;
t307 = t584 * t334;
t452 = -qJD(6) * t307 - t590 - t201 * (pkin(12) * t334 - t555);
t288 = -t585 * t338 + t498;
t97 = t334 * t103;
t451 = qJD(6) * t288 - qJD(4) * t308 + t97 + (-pkin(5) * t204 - t135) * t338 - t585 * t206;
t132 = t204 * t540 + t206 * t333;
t448 = t337 * t523 + t132;
t133 = -t204 * t541 + t206 * t337;
t447 = t333 * t523 - t133;
t20 = -t585 * t201 + t538;
t84 = pkin(3) * t374 - t103;
t348 = -t155 * qJ(5) + t84;
t31 = t585 * t153 + t348;
t14 = t20 * t337 - t31 * t333;
t15 = t20 * t333 + t31 * t337;
t30 = pkin(5) * t171 - t585 * t229 - t484;
t365 = -t335 * t221 + t234 * t463 + t261 * t462;
t105 = t282 * pkin(3) - t365;
t357 = t105 - t547;
t48 = t585 * t170 + t357;
t442 = t30 * t337 - t333 * t48;
t441 = t30 * t333 + t337 * t48;
t238 = t369 * qJD(2);
t273 = t332 * t391;
t165 = -t557 * t238 + t558 * t273;
t440 = t170 * t337 - t229 * t333;
t125 = t170 * t333 + t229 * t337;
t315 = t339 * t472;
t237 = qJD(2) * t405 + t315;
t384 = -t221 * t525 + t234 * t425 + t583 * t237 + t238 * t494 + t261 * t424 + t273 * t493;
t67 = pkin(11) * t430 + t384;
t162 = qJD(3) * t423 + t332 * t353;
t163 = qJD(3) * t404 + t332 * t352;
t73 = t162 * pkin(3) - t163 * pkin(11) + t165;
t439 = -t106 * t522 - t334 * t67 + t338 * t73 - t99 * t523;
t435 = 0.2e1 * t482 + qJD(2);
t197 = t201 * qJD(5);
t6 = -t115 - t197 + t486;
t428 = pkin(4) * t338 - t498;
t420 = -t152 * t477 - t59;
t418 = -t106 * t523 + t334 * t73 + t338 * t67 + t99 * t522;
t417 = t201 * t84 - t577;
t49 = t153 * pkin(4) + t348;
t416 = -t201 * t49 + t577;
t411 = -g(1) * t131 - g(2) * t127 - g(3) * t171;
t194 = -t285 * t583 - t286 * t494;
t157 = t194 * t334 - t286 * t490;
t196 = -t287 * t494 - t390 * t583;
t159 = t196 * t334 - t287 * t490;
t207 = t268 * t334 - t338 * t470;
t410 = g(1) * t159 + g(2) * t157 + g(3) * t207;
t158 = t194 * t338 + t286 * t495;
t160 = t196 * t338 + t287 * t495;
t208 = t268 * t338 + t334 * t470;
t409 = -g(1) * t160 - g(2) * t158 - g(3) * t208;
t407 = -g(1) * t180 - g(2) * t176 - g(3) * t230;
t193 = -t285 * t335 + t286 * t463;
t195 = t287 * t463 - t335 * t390;
t406 = -g(1) * t195 - g(2) * t193 - g(3) * t267;
t399 = -t152 ^ 2 * t337 + t567;
t172 = qJ(5) * t462 - t531;
t381 = -t63 + t550;
t2 = -qJD(6) * t15 - t333 * t8 + t337 * t4;
t379 = t201 * t571 - t408;
t378 = g(1) * t130 + g(2) * t126 + g(3) * t170 - t485;
t377 = t411 - t486;
t12 = t64 * pkin(4) + t347;
t373 = t12 + t379;
t16 = -qJ(5) * t162 - qJD(5) * t229 - t418;
t5 = -pkin(5) * t64 - t6;
t363 = t5 + (t152 * t585 + t556) * t152 + t411;
t362 = t374 * t557;
t361 = t155 * t49 + qJDD(5) - t378;
t360 = t436 * t395;
t359 = qJD(3) * t362;
t358 = -t221 * t503 - t234 * t459 - t335 * t237 + t238 * t463 - t261 * t457 + t273 * t462;
t354 = t355 * t557;
t68 = -pkin(3) * t430 - t358;
t91 = t334 * t430 - t230 * t523 + (-qJD(4) * t282 + t163) * t338;
t349 = -t91 * qJ(5) - t171 * qJD(5) + t68;
t344 = t345 * t557;
t169 = t283 * pkin(4) + t366;
t151 = -t283 * pkin(5) - t172;
t90 = qJD(4) * t171 + t163 * t334 - t338 * t430;
t86 = pkin(4) * t155 + t556;
t83 = t130 * t333 + t179 * t337;
t82 = t130 * t337 - t179 * t333;
t58 = t357 + t573;
t56 = -pkin(4) * t206 - t135 * t338 + t97;
t51 = -pkin(4) * t229 - t484;
t46 = qJD(6) * t440 + t162 * t337 + t333 * t90;
t45 = qJD(6) * t125 + t162 * t333 - t90 * t337;
t37 = -pkin(5) * t170 - t50;
t32 = -pkin(4) * t201 + t537;
t19 = t90 * pkin(4) + t349;
t18 = t585 * t90 + t349;
t17 = -pkin(4) * t162 - t439;
t13 = -pkin(5) * t90 - t16;
t11 = pkin(5) * t91 - t585 * t162 - t439;
t7 = t449 - t580;
t1 = t14 * qJD(6) + t453;
t3 = [qJDD(1), g(1) * t582 - g(2) * t340, g(1) * t340 + g(2) * t582 (qJDD(1) * t330 + 0.2e1 * t336 * t502) * t329, 0.2e1 * (t336 * t516 - t518 * t528) * t329, t339 * t435 * t526 + t591 * t336, t591 * t339 - t435 * t504, t429 * t559, t516 * t596 - 0.2e1 * t514 * t518 - qJD(2) * t360 + (-pkin(9) * t544 + t324) * t429 + (t332 * t397 + t396) * t559 + g(1) * t286 - g(2) * t287 -(-pkin(9) * t504 + t315) * t436 - t395 * t429 - t392 * t559 - g(1) * t285 + g(2) * t390 + t414 * t596, t206 * t163 + t345 * t230, -t230 * t121 - t206 * t162 - t163 * t204 - t345 * t229, -t163 * t374 + t230 * t371 - t351 * t282 + (t206 * t460 - t282 * t375 + (-t282 * t376 + (t230 * t492 - t282 * t388) * qJD(2)) * qJD(1)) * t332, t121 * t282 + t162 * t374 - t204 * t430 - t229 * t355, -t282 * t355 - t362 * t504, g(1) * t176 - g(2) * t180 + t103 * t430 + t161 * t121 + t147 * t162 + t165 * t204 + t92 * t229 + t282 * t421 + t355 * t365 - t358 * t374, -t104 * t430 + t147 * t163 + t161 * t345 + t165 * t206 + t92 * t230 - t282 * t385 - t355 * t512 + t374 * t384 + t454, t155 * t91 - t171 * t63, -t153 * t91 - t155 * t90 + t170 * t63 - t171 * t64, t118 * t171 + t155 * t162 + t201 * t91 - t229 * t63, -t118 * t170 - t153 * t162 - t201 * t90 - t229 * t64, t118 * t229 + t162 * t201, t105 * t64 + t118 * t484 + t68 * t153 - t42 * t162 + t27 * t170 + t201 * t439 - t229 * t485 + t84 * t90 + t455, -t105 * t63 - t566 * t118 + t68 * t155 - t43 * t162 + t27 * t171 - t418 * t201 + t229 * t486 + t84 * t91 + t456, t153 * t16 + t155 * t17 + t170 * t6 + t171 * t7 + t32 * t91 + t35 * t90 + t50 * t64 - t51 * t63 - t454, t118 * t51 - t12 * t170 - t153 * t19 + t162 * t32 + t17 * t201 + t229 * t7 - t49 * t90 - t58 * t64 - t455, -t118 * t50 - t12 * t171 - t155 * t19 - t16 * t201 - t162 * t35 - t229 * t6 - t49 * t91 + t58 * t63 - t456, t12 * t58 + t49 * t19 + t6 * t50 + t35 * t16 + t7 * t51 + t32 * t17 - g(1) * (-t582 * pkin(1) - t286 * pkin(2) - pkin(3) * t176 - pkin(4) * t127 + pkin(9) * t542 - pkin(11) * t175 - qJ(5) * t126) - g(2) * (t340 * pkin(1) + t287 * pkin(2) + t180 * pkin(3) + t131 * pkin(4) + t179 * pkin(11) + t130 * qJ(5) + t582 * t578) + (g(1) * t383 + g(2) * t356) * pkin(10), t109 * t46 + t125 * t21, -t107 * t46 - t109 * t45 - t125 * t22 + t21 * t440, t109 * t91 - t125 * t62 + t152 * t46 + t171 * t21, -t107 * t91 - t152 * t45 - t171 * t22 - t440 * t62, t152 * t91 - t171 * t62 (-qJD(6) * t441 + t11 * t337 - t18 * t333) * t152 - t442 * t62 + t2 * t171 + t14 * t91 + t13 * t107 + t37 * t22 - t5 * t440 + t23 * t45 + g(1) * t604 - g(2) * t83 -(qJD(6) * t442 + t11 * t333 + t18 * t337) * t152 + t441 * t62 - t1 * t171 - t15 * t91 + t13 * t109 + t37 * t21 + t5 * t125 + t23 * t46 + g(1) * t603 - g(2) * t82; 0, 0, 0, -t336 * t513, t528 * t545, -t339 * t458 + t501, t336 * t458 + t500, t429, -pkin(9) * t501 + g(1) * t390 + g(2) * t285 - g(3) * t543 + qJD(1) * t360 - t339 * t474 + t342 * t514 + t396, pkin(1) * t513 + (-pkin(9) * t505 + t314) * t482 + g(1) * t287 + g(2) * t286 + g(3) * t544 + t314 * qJD(2) - t509, t206 * t401 + t335 * t344, -t121 * t493 - t401 * t204 - t419 * t206 + t583 * t344, -t206 * t431 + t253 * t374 + t335 * t354 + t345 * t558 - t583 * t359, -t121 * t558 + t204 * t431 - t252 * t374 + t335 * t359 + t583 * t354, t371 * t558 - (qJD(1) * t446 - t519) * t431, -g(1) * t196 - g(2) * t194 - g(3) * t268 - t103 * t431 - t121 * t506 + t419 * t147 - t164 * t204 + t412 * t355 + t605 * t374 - t421 * t558 - t92 * t462, -pkin(2) * t344 + t104 * t431 + t401 * t147 - t164 * t206 - t529 * t355 + t608 * t374 + t385 * t558 + t92 * t493 - t406, -t155 * t533 - t284 * t63, t153 * t533 - t155 * t532 + t283 * t63 - t284 * t64, t284 * t118 + t155 * t419 - t201 * t533 + t462 * t63, -t283 * t118 - t153 * t419 - t201 * t532 + t462 * t64, -t118 * t462 + t201 * t419, t480 * t118 + t530 * t153 + t597 * t201 + t27 * t283 + t275 * t64 - t419 * t42 + t485 * t462 + t532 * t84 + t409, -t531 * t118 + t530 * t155 + t598 * t201 + t27 * t284 - t275 * t63 - t419 * t43 - t486 * t462 - t533 * t84 + t410, t565 * t153 + t564 * t155 + t172 * t64 - t174 * t63 + t283 * t6 + t284 * t7 - t533 * t32 + t532 * t35 + t406, t174 * t118 - t12 * t283 - t153 * t595 - t169 * t64 + t564 * t201 + t419 * t32 - t7 * t462 - t532 * t49 - t409, -t172 * t118 - t12 * t284 - t155 * t595 + t169 * t63 - t565 * t201 - t419 * t35 + t6 * t462 + t533 * t49 - t410, t12 * t169 + t6 * t172 + t7 * t174 - g(1) * (-pkin(2) * t390 + t196 * pkin(3) + t160 * pkin(4) + t195 * pkin(11) + t159 * qJ(5) + t287 * t507) - g(2) * (-t285 * pkin(2) + t194 * pkin(3) + t158 * pkin(4) + t193 * pkin(11) + t157 * qJ(5) + t286 * t507) - g(3) * (t268 * pkin(3) + t208 * pkin(4) + t267 * pkin(11) + t207 * qJ(5) + t332 * t403) + t595 * t49 + t565 * t35 + t564 * t32, t109 * t535 - t21 * t389, -t107 * t535 + t109 * t534 + t21 * t241 + t22 * t389, -t109 * t533 + t152 * t535 + t21 * t284 + t389 * t62, t107 * t533 + t152 * t534 - t22 * t284 - t241 * t62, -t152 * t533 - t284 * t62 -(t136 * t337 - t148 * t333) * t62 + t2 * t284 + t151 * t22 - t5 * t241 - g(1) * (t159 * t333 + t195 * t337) - g(2) * (t157 * t333 + t193 * t337) - g(3) * (t207 * t333 + t267 * t337) - t534 * t23 + (t333 * t466 - t337 * t465) * t152 - t533 * t14 + t572 * t107 (t136 * t333 + t148 * t337) * t62 - t1 * t284 + t151 * t21 - t5 * t389 - g(1) * (t159 * t337 - t195 * t333) - g(2) * (t157 * t337 - t193 * t333) - g(3) * (t207 * t337 - t267 * t333) + t535 * t23 + (t333 * t465 + t337 * t466) * t152 + t533 * t15 + t572 * t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206 * t204, -t204 ^ 2 + t206 ^ 2, -t204 * t374 + t345, -t206 * t374 - t121, t355, -t104 * t374 - t147 * t206 + t408 - t421, -t103 * t374 + t147 * t204 + t385 - t407, t155 * t478 - t334 * t63 (-t63 - t550) * t338 + (-t64 - t548) * t334, t118 * t334 - t155 * t206 + t201 * t478, t118 * t338 + t153 * t206 - t586 * t334, -t201 * t206, -pkin(3) * t64 - t104 * t153 + t97 * t201 + t42 * t206 + t417 * t334 + (-t27 + (-t135 - t571) * t201 + t408) * t338, pkin(3) * t63 + t560 * t201 + t43 * t206 - t104 * t155 + t417 * t338 + (t27 + t379) * t334, -t153 * t54 - t155 * t56 + (-t6 + t201 * t32 + (-t64 + t524) * pkin(11)) * t338 + (t7 + t570 + (qJD(4) * t153 - t63) * pkin(11)) * t334 + t407, -t562 * t153 - t201 * t56 - t206 * t32 + t416 * t334 + t373 * t338 + t428 * t64, -t562 * t155 + t201 * t54 + t206 * t35 - t373 * t334 + t416 * t338 - t428 * t63, -t32 * t56 - t35 * t54 + t562 * t49 + (t7 * t334 - t6 * t338 + (t32 * t338 + t334 * t35) * qJD(4) + t407) * pkin(11) + (-t12 + t408) * t428, -t21 * t333 * t338 + (-t338 * t520 + t447) * t109, t107 * t133 + t109 * t132 + (-t107 * t333 + t109 * t337) * t523 + (-t568 + t22 * t333 + (t107 * t337 + t109 * t333) * qJD(6)) * t338, t21 * t334 + t447 * t152 + (-t152 * t520 + t551 + t567) * t338, -t22 * t334 + t448 * t152 + (t152 * t521 - t553 + t59) * t338, t152 * t478 - t334 * t62 -(-t288 * t333 + t307 * t337) * t62 + t2 * t334 + t308 * t22 - g(1) * (-t179 * t541 + t180 * t337) - g(2) * (-t175 * t541 + t176 * t337) - g(3) * (-t229 * t541 + t230 * t337) - t448 * t23 + (t333 * t452 - t337 * t451) * t152 + t561 * t107 + (t14 * t201 - t23 * t521 + t5 * t337) * t338 (t288 * t337 + t307 * t333) * t62 - t1 * t334 + t308 * t21 - g(1) * (-t179 * t540 - t180 * t333) - g(2) * (-t175 * t540 - t176 * t333) - g(3) * (-t229 * t540 - t230 * t333) + t447 * t23 + (t333 * t451 + t337 * t452) * t152 + t561 * t109 + (-t15 * t201 - t23 * t520 - t5 * t333) * t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t549, -t153 ^ 2 + t587, t381, t548 - t64, t118, -t155 * t84 + t378 + t569, t153 * t84 - t201 * t42 - t377, pkin(4) * t63 - qJ(5) * t64 + (-t35 - t43) * t155 + (t32 - t537) * t153, t153 * t86 + t361 - t569 - 0.2e1 * t580, -t153 * t49 + t155 * t86 + t201 * t537 + 0.2e1 * t115 + t197 + t377, -t6 * qJ(5) - t7 * pkin(4) - t49 * t86 - t32 * t43 - g(1) * (-pkin(4) * t130 + qJ(5) * t131) - g(2) * (-pkin(4) * t126 + qJ(5) * t127) - g(3) * (t547 - t573) - t537 * t35, -t109 * t477 + t568 (-t22 - t552) * t337 + (-t21 + t554) * t333, t109 * t153 + t420, -t107 * t153 + t399, t152 * t153, qJ(5) * t22 + t538 * t107 + t14 * t153 + t363 * t333 + t337 * t589, qJ(5) * t21 + t538 * t109 - t15 * t153 - t333 * t589 + t363 * t337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t381, t118 - t549, -t586 - t587, t361 + t570 - t580, 0, 0, 0, 0, 0, t420 - t553, t399 - t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109 * t107, -t107 ^ 2 + t109 ^ 2, t21 + t554, -t22 + t552, -t62, -g(1) * t82 - g(2) * t603 - g(3) * t440 - t23 * t109 + t15 * t152 + t2, t23 * t107 + g(1) * t83 + g(2) * t604 + g(3) * t125 - t453 + (t152 - qJD(6)) * t14;];
tau_reg  = t3;
