% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRRPR15
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRRPR15_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 12:56
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRPR15_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR15_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR15_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRPR15_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR15_jacobiaD_rot_sym_varpar: pkin has to be [12x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:26
	% EndTime: 2019-10-10 12:56:26
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:26
	% EndTime: 2019-10-10 12:56:26
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:26
	% EndTime: 2019-10-10 12:56:26
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:26
	% EndTime: 2019-10-10 12:56:27
	% DurationCPUTime: 1.21s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:27
	% EndTime: 2019-10-10 12:56:30
	% DurationCPUTime: 2.93s
	% Computational Cost: add. (8022->174), mult. (25165->321), div. (705->12), fcn. (31370->15), ass. (0->161)
	t337 = cos(pkin(7));
	t339 = sin(qJ(3));
	t436 = cos(pkin(6));
	t437 = sin(qJ(2));
	t388 = t436 * t437;
	t438 = sin(qJ(1));
	t374 = t438 * t388;
	t341 = cos(qJ(2));
	t342 = cos(qJ(1));
	t417 = t342 * t341;
	t357 = t374 - t417;
	t398 = t341 * t436;
	t358 = t342 * t437 + t438 * t398;
	t336 = sin(pkin(6));
	t435 = sin(pkin(7));
	t399 = t336 * t435;
	t382 = t438 * t399;
	t439 = cos(qJ(3));
	t300 = -t357 * t439 + (-t358 * t337 + t382) * t339;
	t420 = t336 * t337;
	t392 = t438 * t420;
	t319 = t358 * t435 + t392;
	t338 = sin(qJ(4));
	t340 = cos(qJ(4));
	t280 = t300 * t338 - t319 * t340;
	t448 = 0.2e1 * t280;
	t324 = t438 * t341 + t342 * t388;
	t390 = t342 * t399;
	t375 = t439 * t390;
	t359 = -t324 * t339 - t375;
	t335 = t438 * t437;
	t380 = -t342 * t398 + t335;
	t363 = t380 * t439;
	t361 = t337 * t363;
	t294 = t361 - t359;
	t292 = t294 ^ 2;
	t401 = t437 * t339;
	t402 = t439 * t341;
	t366 = t337 * t402 - t401;
	t384 = t435 * t436;
	t373 = t439 * t384;
	t316 = -t366 * t336 - t373;
	t314 = 0.1e1 / t316 ^ 2;
	t286 = t292 * t314 + 0.1e1;
	t284 = 0.1e1 / t286;
	t371 = t380 * t339;
	t404 = t324 * t439;
	t353 = -t337 * t371 + t404;
	t310 = t358 * qJD(1) + t324 * qJD(2);
	t311 = -qJD(1) * t374 - qJD(2) * t335 + (qJD(2) * t436 + qJD(1)) * t417;
	t331 = t339 * t390;
	t369 = t439 * t382;
	t403 = t337 * t439;
	t362 = -qJD(1) * t369 - qJD(3) * t331 + t310 * t403 + t311 * t339;
	t269 = t353 * qJD(3) + t362;
	t391 = t437 * t439;
	t418 = t339 * t341;
	t364 = t337 * t391 + t418;
	t367 = t337 * t418 + t391;
	t381 = t339 * t384;
	t290 = qJD(3) * t381 + (t364 * qJD(2) + t367 * qJD(3)) * t336;
	t313 = 0.1e1 / t316;
	t422 = t294 * t314;
	t379 = -t269 * t313 + t290 * t422;
	t251 = t379 * t284;
	t287 = atan2(-t294, t316);
	t282 = sin(t287);
	t283 = cos(t287);
	t383 = -t282 * t316 - t283 * t294;
	t246 = t383 * t251 - t282 * t269 + t283 * t290;
	t263 = -t282 * t294 + t283 * t316;
	t261 = 0.1e1 / t263 ^ 2;
	t447 = t246 * t261;
	t446 = t290 * t314;
	t356 = t358 * t439;
	t444 = -t337 * t356 + t339 * t357 + t369;
	t293 = t444 ^ 2;
	t257 = t293 * t261 + 0.1e1;
	t255 = 0.1e1 / t257;
	t260 = 0.1e1 / t263;
	t309 = t324 * qJD(1) + t358 * qJD(2);
	t351 = t380 * qJD(1) + t357 * qJD(2);
	t349 = t351 * t439;
	t267 = -qJD(1) * t375 + t300 * qJD(3) - t309 * t339 - t337 * t349;
	t426 = t267 * t261;
	t433 = t260 * t447;
	t434 = (-t293 * t433 - t426 * t444) / t257 ^ 2;
	t445 = -t255 * t447 - 0.2e1 * t260 * t434;
	t440 = -0.2e1 * t444;
	t393 = t433 * t440;
	t415 = 0.2e1 * t434;
	t428 = t261 * t444;
	t443 = -t415 * t428 + (t393 - t426) * t255;
	t442 = -(qJD(1) * t382 - t324 * qJD(3) - t310 * t337) * t339 + qJD(3) * t375 - t311 * t439;
	t281 = t300 * t340 + t319 * t338;
	t275 = 0.1e1 / t281;
	t276 = 0.1e1 / t281 ^ 2;
	t441 = -0.2e1 * t294;
	t350 = t351 * t339;
	t268 = qJD(1) * t331 + t444 * qJD(3) - t309 * t439 + t337 * t350;
	t405 = t342 * t420;
	t301 = qJD(1) * t405 - t351 * t435;
	t258 = t281 * qJD(4) + t268 * t338 - t301 * t340;
	t274 = t280 ^ 2;
	t266 = t274 * t276 + 0.1e1;
	t425 = t276 * t280;
	t416 = qJD(4) * t280;
	t259 = t268 * t340 + t301 * t338 - t416;
	t429 = t259 * t275 * t276;
	t432 = (t258 * t425 - t274 * t429) / t266 ^ 2;
	t424 = t313 * t446;
	t431 = (t269 * t422 - t292 * t424) / t286 ^ 2;
	t430 = t255 * t260;
	t264 = 0.1e1 / t266;
	t427 = t264 * t276;
	t423 = t294 * t313;
	t419 = t337 * t339;
	t414 = -0.2e1 * t432;
	t413 = -0.2e1 * t431;
	t412 = t276 * t432;
	t411 = t313 * t431;
	t410 = t255 * t428;
	t409 = t258 * t427;
	t406 = t280 * t429;
	t400 = t357 * t435;
	t397 = t435 * t309;
	t395 = 0.2e1 * t406;
	t394 = t424 * t441;
	t372 = t337 * t380;
	t354 = t339 * t372 - t404;
	t298 = t331 + t354;
	t318 = -t380 * t435 + t405;
	t279 = t298 * t340 + t318 * t338;
	t278 = t298 * t338 - t318 * t340;
	t378 = -t338 * t275 + t340 * t425;
	t296 = -t331 + t353;
	t317 = t367 * t336 + t381;
	t377 = -t296 * t313 + t317 * t422;
	t306 = t324 * t403 - t371;
	t323 = t364 * t336;
	t376 = -t306 * t313 + t323 * t422;
	t308 = t357 * t419 - t356;
	t289 = t308 * t340 - t338 * t400;
	t370 = -t308 * t338 - t340 * t400;
	t368 = -t282 + (t283 * t423 + t282) * t284;
	t365 = -t337 * t401 + t402;
	t360 = t439 * t372;
	t307 = -t358 * t339 - t357 * t403;
	t303 = (t366 * qJD(2) + t365 * qJD(3)) * t336;
	t302 = -qJD(1) * t392 - t310 * t435;
	t291 = qJD(3) * t373 + (t365 * qJD(2) + t366 * qJD(3)) * t336;
	t273 = t311 * t403 - t310 * t339 + (-t324 * t419 - t363) * qJD(3);
	t272 = -t307 * qJD(3) + t309 * t419 + t349;
	t271 = qJD(3) * t360 + t442;
	t270 = -qJD(3) * t361 - t442;
	t254 = t376 * t284;
	t253 = t377 * t284;
	t247 = t383 * t253 - t282 * t296 + t283 * t317;
	t245 = t376 * t413 + (t323 * t394 - t273 * t313 + (t269 * t323 + t290 * t306 + t294 * t303) * t314) * t284;
	t244 = t377 * t413 + (t317 * t394 - t270 * t313 + (t269 * t317 + t290 * t296 + t291 * t294) * t314) * t284;
	t1 = [t411 * t440 + (-t267 * t313 - t444 * t446) * t284, t245, t244, 0, 0, 0; (t354 * qJD(3) - t362) * t430 + (t368 * t267 - ((-t251 * t284 * t423 + t413) * t282 + (t411 * t441 - t251 + (t251 - t379) * t284) * t283) * t444) * t410 + t445 * (-t360 + t359) - t443 * t368 * t444, (t308 * qJD(3) - t309 * t403 + t350) * t430 + ((-t245 * t294 - t254 * t269 + t303 + (-t254 * t316 - t306) * t251) * t283 + (-t245 * t316 - t254 * t290 - t273 + (t254 * t294 - t323) * t251) * t282) * t410 + t445 * t307 + t443 * (t383 * t254 - t282 * t306 + t283 * t323), (-t247 * t428 - t260 * t300) * t415 + (t247 * t393 + t268 * t260 + (-t300 * t246 - t247 * t267 - (-(-t244 * t294 - t253 * t269 + t291 + (-t253 * t316 - t296) * t251) * t283 - (-t244 * t316 - t253 * t290 - t270 + (t253 * t294 - t317) * t251) * t282) * t444) * t261) * t255, 0, 0, 0; 0.2e1 * (-t275 * t278 + t279 * t425) * t432 + ((t279 * qJD(4) + t271 * t338 - t302 * t340) * t275 + t279 * t395 + (-t278 * t259 - (-t278 * qJD(4) + t271 * t340 + t302 * t338) * t280 - t279 * t258) * t276) * t264, (t412 * t448 - t409) * t289 - (-t259 * t427 + t275 * t414) * t370 + ((t289 * qJD(4) + t272 * t338 + t340 * t397) * t275 - (t370 * qJD(4) + t272 * t340 - t338 * t397) * t425 + t289 * t395) * t264, -t378 * t444 * t414 + (t378 * t267 - ((-qJD(4) * t275 - 0.2e1 * t406) * t340 + (t258 * t340 + (t259 - t416) * t338) * t276) * t444) * t264, t414 + (t409 + (-t264 * t429 - t412) * t280) * t448, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:27
	% EndTime: 2019-10-10 12:56:34
	% DurationCPUTime: 6.91s
	% Computational Cost: add. (16749->210), mult. (50114->407), div. (948->12), fcn. (63586->15), ass. (0->176)
	t480 = cos(pkin(6));
	t481 = sin(qJ(2));
	t420 = t480 * t481;
	t379 = cos(qJ(2));
	t482 = sin(qJ(1));
	t435 = t482 * t379;
	t483 = cos(qJ(1));
	t362 = t483 * t420 + t435;
	t393 = t480 * t435 + t483 * t481;
	t352 = t393 * qJD(1) + t362 * qJD(2);
	t371 = t482 * t481;
	t406 = t482 * t420;
	t421 = t480 * t483;
	t432 = t483 * qJD(1);
	t353 = -qJD(1) * t406 - qJD(2) * t371 + (qJD(2) * t421 + t432) * t379;
	t374 = cos(pkin(7));
	t376 = sin(qJ(3));
	t378 = cos(qJ(3));
	t372 = sin(pkin(7));
	t373 = sin(pkin(6));
	t436 = t373 * t482;
	t422 = qJD(1) * t436;
	t414 = t372 * t422;
	t405 = -t379 * t421 + t371;
	t394 = t405 * t374;
	t437 = t373 * t483;
	t426 = t372 * t437;
	t388 = t394 + t426;
	t486 = t362 * t376 + t388 * t378;
	t299 = t486 * qJD(3) - (-t352 * t374 + t414) * t376 - t353 * t378;
	t461 = t362 * t378;
	t341 = t388 * t376 - t461;
	t375 = sin(qJ(4));
	t377 = cos(qJ(4));
	t390 = t405 * t372 - t374 * t437;
	t319 = t341 * t375 + t390 * t377;
	t397 = t352 * t372 + t374 * t422;
	t293 = t319 * qJD(4) - t299 * t377 + t397 * t375;
	t320 = t341 * t377 - t390 * t375;
	t496 = t320 * qJD(4) + t299 * t375 + t397 * t377;
	t434 = t481 * t376;
	t453 = t378 * t379;
	t402 = -t374 * t434 + t453;
	t403 = t374 * t453 - t434;
	t431 = t372 * t480;
	t419 = qJD(3) * t431;
	t327 = t378 * t419 + (t402 * qJD(2) + t403 * qJD(3)) * t373;
	t433 = t481 * t378;
	t454 = t376 * t379;
	t404 = t374 * t454 + t433;
	t357 = t404 * t373 + t376 * t431;
	t457 = t372 * t379;
	t361 = -t373 * t457 + t480 * t374;
	t332 = t357 * t377 + t361 * t375;
	t438 = t372 * t481;
	t427 = t373 * t438;
	t413 = qJD(2) * t427;
	t309 = t332 * qJD(4) + t327 * t375 - t377 * t413;
	t331 = t357 * t375 - t361 * t377;
	t329 = 0.1e1 / t331 ^ 2;
	t491 = t309 * t329;
	t328 = 0.1e1 / t331;
	t356 = t403 * t373 + t378 * t431;
	t467 = t319 * t329;
	t408 = t328 * t486 - t356 * t467;
	t490 = t375 * t408;
	t424 = t372 * t436;
	t386 = -t393 * t374 + t424;
	t392 = -t483 * t379 + t406;
	t343 = t386 * t376 - t378 * t392;
	t350 = t405 * qJD(1) + t392 * qJD(2);
	t351 = t362 * qJD(1) + t393 * qJD(2);
	t423 = t373 * t432;
	t415 = t372 * t423;
	t455 = t374 * t378;
	t295 = t343 * qJD(3) - t350 * t455 - t351 * t376 - t378 * t415;
	t391 = t393 * t378;
	t460 = t392 * t376;
	t342 = t374 * t391 - t378 * t424 - t460;
	t335 = 0.1e1 / t342;
	t296 = -t351 * t378 + (t350 * t374 + t415) * t376 + (t386 * t378 + t460) * qJD(3);
	t387 = t393 * t372 + t374 * t436;
	t321 = t343 * t375 - t387 * t377;
	t398 = -t350 * t372 + t374 * t423;
	t291 = -t321 * qJD(4) + t296 * t377 + t398 * t375;
	t322 = t343 * t377 + t387 * t375;
	t315 = t322 ^ 2;
	t336 = 0.1e1 / t342 ^ 2;
	t308 = t315 * t336 + 0.1e1;
	t337 = t335 * t336;
	t466 = t322 * t336;
	t477 = (-t295 * t315 * t337 + t291 * t466) / t308 ^ 2;
	t445 = t335 * t477;
	t306 = 0.1e1 / t308;
	t470 = t306 * t336;
	t489 = -t295 * t470 - 0.2e1 * t445;
	t446 = 0.2e1 * t322 * t337;
	t449 = 0.2e1 * t477;
	t488 = t295 * t306 * t446 - t291 * t470 + t449 * t466;
	t305 = atan2(t319, t331);
	t300 = sin(t305);
	t301 = cos(t305);
	t289 = t300 * t319 + t301 * t331;
	t286 = 0.1e1 / t289;
	t287 = 0.1e1 / t289 ^ 2;
	t485 = 0.2e1 * t319;
	t484 = 0.2e1 * t321;
	t314 = t321 ^ 2;
	t285 = t287 * t314 + 0.1e1;
	t290 = t322 * qJD(4) + t296 * t375 - t398 * t377;
	t474 = t287 * t321;
	t313 = t319 ^ 2;
	t304 = t313 * t329 + 0.1e1;
	t302 = 0.1e1 / t304;
	t411 = -t309 * t467 + t328 * t496;
	t277 = t411 * t302;
	t416 = -t300 * t331 + t301 * t319;
	t272 = t416 * t277 + t300 * t496 + t301 * t309;
	t288 = t286 * t287;
	t478 = t272 * t288;
	t479 = (t290 * t474 - t314 * t478) / t285 ^ 2;
	t469 = t328 * t491;
	t476 = (-t313 * t469 + t467 * t496) / t304 ^ 2;
	t475 = t287 * t290;
	t473 = t300 * t321;
	t472 = t301 * t321;
	t471 = t306 * t335;
	t468 = t319 * t328;
	t465 = t335 * t342;
	t464 = t342 * t375;
	t459 = t372 * t375;
	t458 = t372 * t377;
	t456 = t374 * t376;
	t452 = qJD(4) * t375;
	t451 = qJD(4) * t377;
	t450 = 0.2e1 * t479;
	t448 = -0.2e1 * t476;
	t447 = t288 * t484;
	t444 = t328 * t476;
	t443 = t287 * t473;
	t442 = t287 * t472;
	t439 = t306 * t466;
	t430 = t272 * t447;
	t428 = t469 * t485;
	t410 = t320 * t328 - t332 * t467;
	t346 = -t362 * t456 - t405 * t378;
	t323 = t346 * t375 - t362 * t458;
	t360 = t402 * t373;
	t349 = t360 * t375 - t377 * t427;
	t409 = -t323 * t328 - t349 * t467;
	t348 = t392 * t456 - t391;
	t407 = -t348 * t375 - t392 * t458;
	t325 = t348 * t377 - t392 * t459;
	t401 = -t374 * t433 - t454;
	t400 = -t300 + (-t301 * t468 + t300) * t302;
	t399 = -t352 * t455 + t378 * t414 + (qJD(3) * t426 - t353) * t376;
	t395 = t405 * t376;
	t347 = -t393 * t376 - t392 * t455;
	t326 = -t376 * t419 + (t401 * qJD(2) - t404 * qJD(3)) * t373;
	t312 = t360 * t451 + ((t401 * qJD(3) + qJD(4) * t438) * t375 + (-t404 * t375 - t377 * t457) * qJD(2)) * t373;
	t311 = -t347 * qJD(3) + t350 * t378 + t351 * t456;
	t310 = -t331 * qJD(4) + t327 * t377 + t375 * t413;
	t297 = (t374 * t395 - t461) * qJD(3) + t399;
	t294 = (-t353 * t456 - t352 * t378 + (-t362 * t455 + t395) * qJD(3)) * t375 + t346 * t451 - t353 * t458 + t362 * t372 * t452;
	t283 = 0.1e1 / t285;
	t282 = t302 * t490;
	t281 = t409 * t302;
	t280 = t410 * t302;
	t276 = t400 * t321;
	t275 = (t300 * t486 + t301 * t356) * t375 + t416 * t282;
	t274 = t416 * t281 - t300 * t323 + t301 * t349;
	t273 = t416 * t280 + t300 * t320 + t301 * t332;
	t271 = t409 * t448 + (t349 * t428 - t294 * t328 + (t309 * t323 - t312 * t319 - t349 * t496) * t329) * t302;
	t269 = t410 * t448 + (t332 * t428 - t293 * t328 + (-t309 * t320 - t310 * t319 - t332 * t496) * t329) * t302;
	t268 = t448 * t490 + (t408 * t451 + (t356 * t428 - t297 * t328 + (-t309 * t486 - t319 * t326 - t356 * t496) * t329) * t375) * t302;
	t1 = [t444 * t484 + (-t290 * t328 + t321 * t491) * t302, t271, t268, t269, 0, 0; -0.2e1 * t319 * t286 * t479 + (t496 * t286 + (-t272 * t319 - t276 * t290) * t287) * t283 + (t276 * t287 * t450 + (0.2e1 * t276 * t478 - (t277 * t302 * t468 + t448) * t443 - (t444 * t485 - t277 + (t277 - t411) * t302) * t442 - t400 * t475) * t283) * t321, (t274 * t474 + t286 * t407) * t450 + ((t325 * qJD(4) + t311 * t375 + t351 * t458) * t286 + t274 * t430 + (t407 * t272 - t274 * t290 - (t271 * t319 + t281 * t496 + t312 + (-t281 * t331 - t323) * t277) * t472 - (-t271 * t331 - t281 * t309 - t294 + (-t281 * t319 - t349) * t277) * t473) * t287) * t283, (t275 * t474 + t286 * t464) * t450 + (-t275 * t475 + (-t295 * t375 - t342 * t451) * t286 + (t275 * t447 + t287 * t464) * t272 - (t356 * t451 + t268 * t319 + t282 * t496 + t326 * t375 + (-t282 * t331 + t375 * t486) * t277) * t442 - (t486 * t451 - t268 * t331 - t282 * t309 - t297 * t375 + (-t282 * t319 - t356 * t375) * t277) * t443) * t283, (t273 * t474 - t286 * t322) * t450 + (t273 * t430 + t291 * t286 + (-t322 * t272 - t273 * t290 - (t269 * t319 + t280 * t496 + t310 + (-t280 * t331 + t320) * t277) * t472 - (-t269 * t331 - t280 * t309 - t293 + (-t280 * t319 - t332) * t277) * t473) * t287) * t283, 0, 0; -t293 * t471 - ((t376 * t394 - t461) * qJD(3) + t399) * t439 + t489 * t320 - t488 * t486, (t407 * qJD(4) + t311 * t377 - t351 * t459) * t471 - (t348 * qJD(3) + t350 * t376 - t351 * t455) * t439 + t489 * t325 + t488 * t347, (t343 * t466 + t377 * t465) * t449 + (t452 * t465 + (-t291 * t343 - t296 * t322) * t336 + (t343 * t446 + (t336 * t342 - t335) * t377) * t295) * t306, t445 * t484 + (t295 * t321 * t336 - t290 * t335) * t306, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:56:28
	% EndTime: 2019-10-10 12:56:35
	% DurationCPUTime: 7.14s
	% Computational Cost: add. (19869->247), mult. (59163->462), div. (983->12), fcn. (74815->17), ass. (0->188)
	t461 = cos(pkin(6));
	t469 = cos(qJ(2));
	t564 = sin(qJ(1));
	t515 = t564 * t469;
	t465 = sin(qJ(2));
	t470 = cos(qJ(1));
	t529 = t470 * t465;
	t448 = t461 * t529 + t515;
	t486 = t461 * t515 + t529;
	t434 = qJD(1) * t486 + qJD(2) * t448;
	t516 = t564 * t465;
	t508 = t461 * t516;
	t528 = t470 * t469;
	t435 = -qJD(1) * t508 - qJD(2) * t516 + (qJD(2) * t461 + qJD(1)) * t528;
	t460 = cos(pkin(7));
	t464 = sin(qJ(3));
	t468 = cos(qJ(3));
	t458 = sin(pkin(7));
	t459 = sin(pkin(6));
	t517 = t459 * t564;
	t505 = qJD(1) * t517;
	t499 = t458 * t505;
	t447 = -t461 * t528 + t516;
	t538 = t459 * t470;
	t492 = t447 * t460 + t458 * t538;
	t567 = t448 * t464 + t468 * t492;
	t373 = t567 * qJD(3) - (-t434 * t460 + t499) * t464 - t435 * t468;
	t545 = t448 * t468;
	t421 = t464 * t492 - t545;
	t440 = -t447 * t458 + t460 * t538;
	t463 = sin(qJ(4));
	t467 = cos(qJ(4));
	t404 = t421 * t467 + t440 * t463;
	t426 = t434 * t458 + t460 * t505;
	t365 = qJD(4) * t404 + t373 * t463 + t426 * t467;
	t479 = t421 * t463;
	t403 = -t440 * t467 + t479;
	t575 = t426 * t463;
	t509 = t458 * t517;
	t478 = -t460 * t486 + t509;
	t487 = t508 - t528;
	t423 = t464 * t478 - t468 * t487;
	t442 = t458 * t486 + t460 * t517;
	t405 = t423 * t463 - t442 * t467;
	t483 = t486 * t468;
	t544 = t487 * t464;
	t422 = t460 * t483 - t468 * t509 - t544;
	t462 = sin(qJ(6));
	t466 = cos(qJ(6));
	t501 = t405 * t466 - t422 * t462;
	t571 = qJD(6) * t501;
	t530 = t468 * t469;
	t534 = t464 * t465;
	t488 = -t460 * t534 + t530;
	t491 = t460 * t530 - t534;
	t518 = t458 * t461 * t468;
	t411 = qJD(3) * t518 + (qJD(2) * t488 + qJD(3) * t491) * t459;
	t532 = t465 * t468;
	t533 = t464 * t469;
	t489 = t460 * t533 + t532;
	t542 = t458 * t464;
	t439 = t459 * t489 + t461 * t542;
	t539 = t458 * t469;
	t446 = -t459 * t539 + t461 * t460;
	t417 = -t439 * t463 + t446 * t467;
	t541 = t458 * t465;
	t519 = t459 * t541;
	t506 = qJD(2) * t519;
	t389 = qJD(4) * t417 + t411 * t467 + t463 * t506;
	t418 = t439 * t467 + t446 * t463;
	t415 = 0.1e1 / t418 ^ 2;
	t570 = t389 * t415;
	t414 = 0.1e1 / t418;
	t438 = t459 * t491 + t518;
	t551 = t404 * t415;
	t494 = t414 * t567 - t438 * t551;
	t569 = t467 * t494;
	t387 = atan2(t404, t418);
	t382 = sin(t387);
	t383 = cos(t387);
	t357 = t382 * t404 + t383 * t418;
	t354 = 0.1e1 / t357;
	t549 = t422 * t466;
	t381 = t405 * t462 + t549;
	t375 = 0.1e1 / t381;
	t355 = 0.1e1 / t357 ^ 2;
	t376 = 0.1e1 / t381 ^ 2;
	t566 = 0.2e1 * t404;
	t406 = t423 * t467 + t442 * t463;
	t565 = 0.2e1 * t406;
	t399 = t406 ^ 2;
	t353 = t355 * t399 + 0.1e1;
	t432 = qJD(1) * t447 + qJD(2) * t487;
	t433 = qJD(1) * t448 + qJD(2) * t486;
	t514 = qJD(1) * t538;
	t507 = t458 * t514;
	t369 = -t433 * t468 + (t432 * t460 + t507) * t464 + (t468 * t478 + t544) * qJD(3);
	t424 = -t432 * t458 + t460 * t514;
	t527 = qJD(4) * t463;
	t362 = t424 * t463 - t423 * t527 + (qJD(4) * t442 + t369) * t467;
	t557 = t362 * t355;
	t398 = t404 ^ 2;
	t386 = t398 * t415 + 0.1e1;
	t384 = 0.1e1 / t386;
	t364 = t575 + qJD(4) * t479 + (-qJD(4) * t440 - t373) * t467;
	t498 = -t364 * t414 - t389 * t551;
	t344 = t498 * t384;
	t503 = -t382 * t418 + t383 * t404;
	t338 = t344 * t503 - t364 * t382 + t383 * t389;
	t356 = t354 * t355;
	t562 = t338 * t356;
	t563 = (-t399 * t562 + t406 * t557) / t353 ^ 2;
	t361 = qJD(4) * t406 + t369 * t463 - t424 * t467;
	t536 = t460 * t468;
	t368 = qJD(3) * t423 - t432 * t536 - t433 * t464 - t468 * t507;
	t347 = qJD(6) * t381 - t361 * t466 + t368 * t462;
	t374 = t501 ^ 2;
	t360 = t374 * t376 + 0.1e1;
	t556 = t376 * t501;
	t348 = t361 * t462 + t368 * t466 + t571;
	t559 = t348 * t375 * t376;
	t561 = (-t347 * t556 - t374 * t559) / t360 ^ 2;
	t553 = t414 * t570;
	t560 = (-t364 * t551 - t398 * t553) / t386 ^ 2;
	t558 = t355 * t406;
	t555 = t382 * t406;
	t554 = t383 * t406;
	t552 = t404 * t414;
	t550 = t422 * t463;
	t548 = t422 * t467;
	t543 = t458 * t463;
	t540 = t458 * t467;
	t537 = t460 * t464;
	t535 = t462 * t501;
	t531 = t466 * t375;
	t526 = 0.2e1 * t563;
	t525 = 0.2e1 * t561;
	t524 = -0.2e1 * t560;
	t523 = t356 * t565;
	t522 = t414 * t560;
	t521 = t355 * t555;
	t520 = t355 * t554;
	t513 = qJD(3) * t542;
	t512 = -0.2e1 * t501 * t559;
	t511 = t553 * t566;
	t510 = t338 * t523;
	t504 = -qJD(6) * t550 + t369;
	t502 = t403 * t466 + t462 * t567;
	t379 = t403 * t462 - t466 * t567;
	t429 = -t464 * t486 - t487 * t536;
	t430 = t487 * t537 - t483;
	t493 = -t430 * t463 - t487 * t540;
	t500 = -t429 * t462 - t466 * t493;
	t395 = t429 * t466 - t462 * t493;
	t497 = -t376 * t535 + t531;
	t496 = -t403 * t414 - t417 * t551;
	t428 = -t447 * t468 - t448 * t537;
	t407 = t428 * t467 + t448 * t543;
	t445 = t488 * t459;
	t431 = t445 * t467 + t463 * t519;
	t495 = -t407 * t414 - t431 * t551;
	t409 = t430 * t467 - t487 * t543;
	t490 = -t460 * t532 - t533;
	t485 = -t382 + (-t383 * t552 + t382) * t384;
	t482 = qJD(4) * t548 + qJD(6) * t423 + t368 * t463;
	t477 = -t434 * t536 - t435 * t464 + t513 * t538 + t468 * t499 + (t447 * t537 - t545) * qJD(3);
	t410 = -t461 * t513 + (qJD(2) * t490 - qJD(3) * t489) * t459;
	t396 = -t445 * t527 + ((qJD(3) * t490 + qJD(4) * t541) * t467 + (t463 * t539 - t467 * t489) * qJD(2)) * t459;
	t393 = t423 * t466 - t462 * t550;
	t392 = t423 * t462 + t463 * t549;
	t391 = -qJD(3) * t429 + t432 * t468 + t433 * t537;
	t390 = qJD(3) * t430 + t432 * t464 - t433 * t536;
	t388 = -qJD(4) * t418 - t411 * t463 + t467 * t506;
	t367 = (-t435 * t537 - t434 * t468 + (t447 * t464 - t448 * t536) * qJD(3)) * t467 + t435 * t543 + (-t428 * t463 + t448 * t540) * qJD(4);
	t366 = qJD(4) * t409 + t391 * t463 + t433 * t540;
	t358 = 0.1e1 / t360;
	t351 = 0.1e1 / t353;
	t350 = t384 * t569;
	t349 = t495 * t384;
	t346 = t496 * t384;
	t343 = t485 * t406;
	t341 = (t382 * t567 + t383 * t438) * t467 + t503 * t350;
	t340 = t349 * t503 - t382 * t407 + t383 * t431;
	t339 = t346 * t503 - t382 * t403 + t383 * t417;
	t337 = t495 * t524 + (t431 * t511 - t367 * t414 + (t364 * t431 + t389 * t407 - t396 * t404) * t415) * t384;
	t335 = t496 * t524 + (t417 * t511 - t365 * t414 + (t364 * t417 - t388 * t404 + t389 * t403) * t415) * t384;
	t334 = t524 * t569 + (-t494 * t527 + (t438 * t511 - t477 * t414 + (t364 * t438 - t389 * t567 - t404 * t410) * t415) * t467) * t384;
	t1 = [t522 * t565 + (-t362 * t414 + t406 * t570) * t384, t337, t334, t335, 0, 0; -0.2e1 * t404 * t354 * t563 + ((-qJD(4) * t403 + t373 * t467 - t575) * t354 + (-t338 * t404 - t343 * t362) * t355) * t351 + (t343 * t355 * t526 + (0.2e1 * t343 * t562 - (t344 * t384 * t552 + t524) * t521 - (t522 * t566 - t344 + (t344 - t498) * t384) * t520 - t485 * t557) * t351) * t406, (t340 * t558 - t354 * t409) * t526 + ((qJD(4) * t493 + t391 * t467 - t433 * t543) * t354 + t340 * t510 + (-t409 * t338 - t340 * t362 - (t337 * t404 - t349 * t364 + t396 + (-t349 * t418 - t407) * t344) * t554 - (-t337 * t418 - t349 * t389 - t367 + (-t349 * t404 - t431) * t344) * t555) * t355) * t351, (t341 * t558 + t354 * t548) * t526 + (-t341 * t557 + (-t368 * t467 + t422 * t527) * t354 + (t341 * t523 + t355 * t548) * t338 - (-t438 * t527 + t334 * t404 - t350 * t364 + t410 * t467 + (-t350 * t418 + t467 * t567) * t344) * t520 - (-t567 * t527 - t334 * t418 - t350 * t389 - t477 * t467 + (-t350 * t404 - t438 * t467) * t344) * t521) * t351, (t339 * t558 + t354 * t405) * t526 + (t339 * t510 - t361 * t354 + (t405 * t338 - t339 * t362 - (t335 * t404 - t346 * t364 + t388 + (-t346 * t418 - t403) * t344) * t554 - (-t335 * t418 - t346 * t389 - t365 + (-t346 * t404 - t417) * t344) * t555) * t355) * t351, 0, 0; (t375 * t502 - t379 * t556) * t525 + ((qJD(6) * t379 - t365 * t466 + t462 * t477) * t375 + t379 * t512 + (t502 * t348 + (qJD(6) * t502 + t365 * t462 + t466 * t477) * t501 - t379 * t347) * t376) * t358, (t375 * t500 - t395 * t556) * t525 + ((qJD(6) * t395 - t366 * t466 + t390 * t462) * t375 + t395 * t512 + (t500 * t348 + (qJD(6) * t500 + t366 * t462 + t390 * t466) * t501 - t395 * t347) * t376) * t358, (-t375 * t392 - t393 * t556) * t525 + (t393 * t512 + t504 * t375 * t462 + t482 * t531 + (t466 * t501 * t504 - t393 * t347 - t392 * t348 - t482 * t535) * t376) * t358, t497 * t406 * t525 + (-t497 * t362 + ((qJD(6) * t375 + t512) * t462 + (-t347 * t462 + (t348 + t571) * t466) * t376) * t406) * t358, 0, -0.2e1 * t561 - 0.2e1 * (t347 * t376 * t358 - (-t358 * t559 - t376 * t561) * t501) * t501;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end