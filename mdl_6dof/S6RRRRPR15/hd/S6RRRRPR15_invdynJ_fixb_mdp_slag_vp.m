% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR15_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR15_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR15_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:51:05
% EndTime: 2019-03-10 00:51:55
% DurationCPUTime: 38.45s
% Computational Cost: add. (23874->973), mult. (68533->1293), div. (0->0), fcn. (57837->14), ass. (0->395)
t1181 = sin(pkin(7));
t1195 = cos(qJ(3));
t1072 = t1181 * t1195;
t1033 = qJD(3) * t1072;
t940 = sin(pkin(6));
t1182 = cos(pkin(7));
t943 = sin(qJ(3));
t1104 = t943 * t1182;
t944 = sin(qJ(2));
t947 = cos(qJ(2));
t997 = -t1104 * t944 + t1195 * t947;
t876 = t997 * t940;
t861 = qJD(1) * t876;
t1009 = t1033 - t861;
t1073 = t1182 * t1195;
t1103 = t943 * t1181;
t1021 = pkin(2) * t1073 - pkin(10) * t1103;
t1030 = t940 * (-pkin(10) * t1182 - pkin(9));
t1014 = t944 * t1030;
t1183 = cos(pkin(6));
t1118 = pkin(1) * t1183;
t932 = t947 * t1118;
t922 = qJD(1) * t932;
t843 = qJD(1) * t1014 + t922;
t931 = t944 * t1118;
t978 = t1030 * t947 - t931;
t844 = t978 * qJD(1);
t1098 = t947 * t1181;
t1011 = pkin(2) * t944 - pkin(10) * t1098;
t1140 = qJD(1) * t940;
t880 = t1011 * t1140;
t1220 = t1021 * qJD(3) - t880 * t1103 - t844 * t1104 - t1195 * t843;
t1106 = t940 * t1181;
t1071 = qJD(1) * t1106;
t1040 = t944 * t1071;
t1219 = pkin(11) * t1040 - t1220;
t772 = -t1181 * t844 + t1182 * t880;
t995 = t1073 * t944 + t943 * t947;
t875 = t995 * t940;
t860 = qJD(1) * t875;
t1218 = t860 * pkin(3) - t861 * pkin(11) + t772 - (pkin(3) * t1103 - pkin(11) * t1072) * qJD(3);
t942 = sin(qJ(4));
t946 = cos(qJ(4));
t891 = t942 * t1103 - t946 * t1182;
t1148 = qJD(4) * t891 - t1009 * t946 + t1040 * t942;
t1069 = qJD(3) * t1104;
t1217 = pkin(2) * t1069 + pkin(10) * t1033 + t1072 * t880 + t1073 * t844 - t943 * t843;
t948 = cos(qJ(1));
t1162 = t940 * t948;
t1097 = t948 * t1183;
t1194 = sin(qJ(1));
t893 = -t1097 * t947 + t1194 * t944;
t894 = t1097 * t944 + t1194 * t947;
t784 = -t1103 * t1162 - t1104 * t893 + t1195 * t894;
t1107 = t940 * t1182;
t992 = -t1107 * t948 + t1181 * t893;
t734 = t784 * t942 - t946 * t992;
t783 = t1072 * t1162 + t1073 * t893 + t894 * t943;
t941 = sin(qJ(6));
t945 = cos(qJ(6));
t1216 = t734 * t941 + t783 * t945;
t1215 = t734 * t945 - t783 * t941;
t1135 = qJD(4) * t946;
t1136 = qJD(4) * t942;
t1142 = pkin(2) * t1104 + pkin(10) * t1072;
t884 = pkin(11) * t1182 + t1142;
t1116 = t1181 * pkin(2);
t885 = -pkin(3) * t1072 - pkin(11) * t1103 - t1116;
t1209 = -t884 * t1135 - t885 * t1136 - t1218 * t946 + t1219 * t942;
t1100 = t946 * t1181;
t892 = t1100 * t943 + t1182 * t942;
t1147 = qJD(4) * t892 + t1009 * t942 + t1040 * t946;
t1145 = pkin(3) * t1040 + t1217;
t1099 = t947 * t1182;
t996 = t1099 * t943 + t1195 * t944;
t989 = t996 * t940;
t1096 = t1183 * qJD(1);
t1046 = t1096 + qJD(2);
t1003 = t1181 * t1046;
t991 = t943 * t1003;
t814 = qJD(1) * t989 + t991;
t1130 = t947 * t1071 - qJD(3);
t983 = -t1046 * t1182 + t1130;
t763 = t946 * t814 - t942 * t983;
t760 = qJD(6) + t763;
t1067 = qJD(3) * t1103;
t1028 = t1067 - t860;
t1042 = t947 * t1073;
t1027 = t940 * t1042;
t1115 = t944 * t1140;
t899 = t1195 * t1003;
t812 = -qJD(1) * t1027 + t1115 * t943 - t899;
t809 = qJD(4) + t812;
t982 = pkin(2) * t1183 + t1014;
t811 = qJD(2) * pkin(2) + qJD(1) * t982 + t922;
t1102 = t944 * t1181;
t1012 = pkin(2) * t947 + pkin(10) * t1102;
t1007 = -pkin(1) - t1012;
t869 = t1007 * t940;
t856 = qJD(1) * t869;
t755 = -t1181 * t811 + t1182 * t856;
t688 = t812 * pkin(3) - t814 * pkin(11) + t755;
t1163 = t940 * t947;
t1004 = pkin(9) * t1163 + t931;
t1075 = t940 * t1099;
t806 = t1004 * qJD(1) + (qJD(1) * t1075 + t1003) * pkin(10);
t712 = t856 * t1103 + t811 * t1104 + t1195 * t806;
t693 = -pkin(11) * t983 + t712;
t650 = -t946 * t688 + t693 * t942;
t1131 = qJD(5) + t650;
t1211 = -qJ(5) * t1148 + qJD(5) * t892 - t1145;
t1086 = t1183 * qJDD(1);
t1038 = t1086 + qJDD(2);
t1002 = t1181 * t1038;
t1127 = t944 * qJDD(1);
t962 = qJD(2) * t995 + qJD(3) * t996;
t729 = qJD(3) * t991 - qJDD(1) * t1027 - t1195 * t1002 + (qJD(1) * t962 + t943 * t1127) * t940;
t726 = qJDD(4) + t729;
t1210 = -t885 * t1135 + t1136 * t884 + t1218 * t942 + t1219 * t946;
t735 = t784 * t946 + t942 * t992;
t937 = t940 ^ 2;
t1193 = pkin(1) * t937;
t1208 = 0.2e1 * t1193;
t1197 = pkin(4) + pkin(12);
t1152 = -qJ(5) * t1028 + qJD(5) * t1072 + t1210;
t1151 = -pkin(4) * t1028 - t1209;
t1205 = pkin(4) * t1147 - t1211;
t960 = qJD(3) * t899 + t1002 * t943;
t1158 = t943 * t944;
t987 = (t1042 - t1158) * qJD(3);
t961 = qJD(2) * t997 + t987;
t986 = t996 * qJDD(1);
t953 = (qJD(1) * t961 + t986) * t940 + t960;
t1137 = qJD(4) * t763;
t1070 = qJD(2) * t1102;
t1039 = t940 * t1070;
t1077 = t940 * t1098;
t980 = -qJDD(1) * t1077 + t1038 * t1182 + qJDD(3);
t964 = qJD(1) * t1039 + t980;
t672 = t942 * t953 - t946 * t964 + t1137;
t1074 = t1183 * t1194;
t999 = t1074 * t947 + t948 * t944;
t1204 = t1194 * t1106 - t999 * t1182;
t1132 = pkin(5) * t763 + t1131;
t1203 = (qJDD(2) + 0.2e1 * t1086) * t940;
t1166 = t812 * t942;
t1202 = -qJD(5) * t942 - t712 + (t1136 + t1166) * pkin(4);
t895 = -t1074 * t944 + t947 * t948;
t787 = -t1195 * t1204 + t895 * t943;
t1055 = t1181 * t1183;
t1013 = t1195 * t1055;
t837 = t1158 * t940 - t1013 - t1027;
t1017 = g(1) * t787 + g(2) * t783 + g(3) * t837;
t977 = t946 * t983;
t761 = t814 * t942 + t977;
t1191 = pkin(5) * t761;
t651 = t942 * t688 + t946 * t693;
t643 = -qJ(5) * t809 - t651;
t631 = -t643 - t1191;
t671 = qJD(4) * t977 + t1136 * t814 - t942 * t964 - t946 * t953;
t670 = -qJDD(6) + t671;
t1201 = t1197 * t670 + (t631 - t651 + t1191) * t760;
t1199 = t763 ^ 2;
t1198 = t809 ^ 2;
t950 = qJD(1) ^ 2;
t1196 = pkin(5) + pkin(11);
t1192 = pkin(4) * t726;
t1190 = pkin(9) * t940;
t1189 = pkin(11) * t726;
t1032 = t943 * t1055;
t838 = t1032 + t989;
t1056 = t1183 * t1182;
t890 = t1077 - t1056;
t778 = t838 * t942 + t890 * t946;
t1185 = t778 * pkin(4);
t1184 = pkin(11) * qJD(4);
t1180 = qJ(5) * t761;
t1179 = qJ(5) * t946;
t1133 = qJD(6) * t945;
t1123 = t761 * t1133 + t941 * t672 + t945 * t726;
t1134 = qJD(6) * t941;
t629 = -t1134 * t809 + t1123;
t1178 = t629 * t945;
t1177 = t643 * t809;
t1176 = t651 * t809;
t1167 = t809 * t941;
t715 = -t945 * t761 + t1167;
t1175 = t715 * t760;
t1174 = t715 * t809;
t717 = t761 * t941 + t809 * t945;
t1173 = t717 * t760;
t1172 = t717 * t809;
t723 = t726 * qJ(5);
t1171 = t761 * t809;
t1170 = t763 * t761;
t1169 = t763 * t809;
t779 = t838 * t946 - t890 * t942;
t1168 = t779 * qJ(5);
t1165 = t937 * t950;
t1164 = t940 * t944;
t1161 = t941 * t670;
t1160 = t941 * t942;
t1159 = t942 * t945;
t667 = t945 * t670;
t1156 = -pkin(5) * t1147 - t1152;
t711 = t1072 * t856 + t1073 * t811 - t943 * t806;
t743 = pkin(3) * t814 + pkin(11) * t812;
t1155 = t946 * t711 + t942 * t743;
t842 = t932 + t982;
t769 = -t1181 * t842 + t1182 * t869;
t707 = t837 * pkin(3) - t838 * pkin(11) + t769;
t829 = (t1075 + t1055) * pkin(10) + t1004;
t1122 = t869 * t1103 + t842 * t1104 + t1195 * t829;
t714 = -pkin(11) * t890 + t1122;
t1154 = t942 * t707 + t946 * t714;
t849 = t1072 * t941 + t945 * t891;
t1150 = qJD(6) * t849 + t1028 * t945 + t1147 * t941;
t998 = t1072 * t945 - t941 * t891;
t1149 = qJD(6) * t998 - t1028 * t941 + t1147 * t945;
t1146 = t946 * t884 + t942 * t885;
t1144 = -qJ(5) * t1135 - t1179 * t812 + t1202;
t662 = -qJ(5) * t814 - t1155;
t1143 = -pkin(5) * t1166 - t1196 * t1136 + t662;
t938 = t944 ^ 2;
t1141 = -t947 ^ 2 + t938;
t1139 = qJD(2) * t940;
t1138 = qJD(3) * t943;
t1129 = qJD(1) * qJD(2);
t1126 = t947 * qJDD(1);
t1125 = t944 * t1193;
t916 = t1196 * t946;
t1124 = t947 * t1165;
t1080 = qJD(2) * t1118;
t1043 = qJD(1) * t1080;
t1079 = pkin(1) * t1086;
t1110 = t940 * t1126;
t1119 = pkin(9) * t1110 + t947 * t1043 + t944 * t1079;
t1117 = pkin(10) * t1181;
t1114 = t944 * t1139;
t1113 = qJD(3) * t1195;
t1112 = t947 * t1129;
t1111 = t940 * t1127;
t1108 = -qJ(5) * t942 - pkin(3);
t1105 = t942 * t1181;
t1034 = qJD(3) * t1073;
t1084 = t1129 * t1190;
t1001 = -t1084 * t944 + t1119;
t1063 = t1182 * t1129;
t1090 = qJDD(1) * t1182;
t749 = (t1002 + (-t1063 * t944 + t1090 * t947) * t940) * pkin(10) + t1001;
t1005 = -t1043 * t944 + t947 * t1079;
t1024 = -t1112 - t1127;
t1006 = t1024 * pkin(9);
t758 = t1038 * pkin(2) + ((-t1063 * t947 - t1090 * t944) * pkin(10) + t1006) * t940 + t1005;
t1000 = qJD(2) * t1011;
t789 = (qJD(1) * t1000 + qJDD(1) * t1007) * t940;
t994 = -t856 * t1033 - t811 * t1034 - t789 * t1103 - t758 * t1104 + t1138 * t806 - t1195 * t749;
t634 = pkin(11) * t964 - t994;
t700 = -t1181 * t758 + t1182 * t789;
t644 = t729 * pkin(3) - pkin(11) * t953 + t700;
t1082 = t693 * t1135 + t688 * t1136 + t942 * t634 - t946 * t644;
t1044 = qJDD(5) + t1082;
t612 = -pkin(5) * t671 - t1197 * t726 + t1044;
t1029 = t856 * t1067 + t811 * t1069 - t789 * t1072 - t758 * t1073 + t806 * t1113 + t943 * t749;
t635 = -pkin(3) * t964 + t1029;
t955 = t671 * qJ(5) - t763 * qJD(5) + t635;
t616 = t1197 * t672 + t955;
t1095 = t945 * t612 - t941 * t616;
t1094 = -t945 * t672 + t726 * t941;
t1093 = t707 * t946 - t942 * t714;
t1091 = -t942 * t884 + t946 * t885;
t1089 = t809 * t946;
t1088 = t760 * t941;
t1087 = t760 * t945;
t1083 = -t688 * t1135 + t693 * t1136 - t946 * t634 - t942 * t644;
t1078 = t940 * t1102;
t1068 = t940 * t950 * t1183;
t788 = t895 * t1195 + t1204 * t943;
t965 = -t1107 * t1194 - t1181 * t999;
t738 = t788 * t942 + t946 * t965;
t1066 = -g(1) * t734 + g(2) * t738;
t739 = t788 * t946 - t942 * t965;
t1065 = g(1) * t735 - g(2) * t739;
t1064 = -g(1) * t783 + g(2) * t787;
t658 = -qJ(5) * t837 - t1154;
t782 = pkin(4) * t1072 - t1091;
t740 = t1159 * t812 + t814 * t941;
t1062 = t1136 * t945 + t740;
t741 = -t1160 * t812 + t814 * t945;
t1061 = t1136 * t941 - t741;
t705 = t942 * t711;
t896 = -t1197 * t946 + t1108;
t1060 = qJD(6) * t896 + t705 + (-pkin(5) * t812 - t743) * t946 - t1197 * t814 - qJD(4) * t916;
t883 = -pkin(3) * t1182 - t1021;
t975 = -t892 * qJ(5) + t883;
t756 = t1197 * t891 + t975;
t1059 = qJD(6) * t756 + (t1138 * t1181 - t860) * t1197 + t1148 * pkin(5) + t1209;
t915 = t1196 * t942;
t1058 = -qJD(6) * t915 - t1202 - t809 * (pkin(12) * t942 - t1179);
t744 = t892 * pkin(5) + pkin(12) * t1072 + t782;
t1057 = -qJD(6) * t744 - t1147 * t1197 + t1211;
t846 = t978 * qJD(2);
t881 = t940 * t1000;
t773 = -t1181 * t846 + t1182 * t881;
t1053 = t941 * t612 + t945 * t616;
t628 = -t1197 * t809 + t1132;
t692 = pkin(3) * t983 - t711;
t957 = -t763 * qJ(5) + t692;
t639 = t1197 * t761 + t957;
t622 = t628 * t945 - t639 * t941;
t623 = t628 * t941 + t639 * t945;
t638 = pkin(5) * t779 - t1197 * t837 - t1093;
t974 = t1072 * t869 + t1073 * t842 - t943 * t829;
t713 = t890 * pkin(3) - t974;
t966 = t713 - t1168;
t656 = t1197 * t778 + t966;
t1051 = t638 * t945 - t656 * t941;
t1050 = t638 * t941 + t656 * t945;
t1049 = t778 * t945 - t837 * t941;
t733 = t778 * t941 + t837 * t945;
t1045 = 0.2e1 * t1096 + qJD(2);
t1037 = pkin(4) * t946 - t1108;
t923 = t947 * t1080;
t845 = qJD(2) * t1014 + t923;
t993 = t869 * t1033 + t842 * t1034 + t881 * t1103 + t846 * t1104 - t1138 * t829 + t1195 * t845;
t675 = pkin(11) * t1039 + t993;
t770 = qJD(3) * t1032 + t940 * t962;
t771 = qJD(3) * t1013 + t940 * t961;
t681 = t770 * pkin(3) - t771 * pkin(11) + t773;
t1036 = -t714 * t1135 - t707 * t1136 - t942 * t675 + t681 * t946;
t805 = t809 * qJD(5);
t614 = -t723 - t805 + t1083;
t1026 = t692 * t809 - t1189;
t657 = t761 * pkin(4) + t957;
t1025 = -t657 * t809 + t1189;
t1023 = t707 * t1135 - t1136 * t714 + t946 * t675 + t942 * t681;
t1020 = -g(1) * t739 - g(2) * t735 - g(3) * t779;
t802 = -t1104 * t894 - t1195 * t893;
t765 = -t1100 * t894 + t802 * t942;
t804 = -t1104 * t895 - t1195 * t999;
t767 = -t1100 * t895 + t804 * t942;
t815 = -t1078 * t946 + t876 * t942;
t1019 = g(1) * t767 + g(2) * t765 + g(3) * t815;
t766 = t1105 * t894 + t802 * t946;
t768 = t1105 * t895 + t804 * t946;
t816 = t1078 * t942 + t876 * t946;
t1018 = -g(1) * t768 - g(2) * t766 - g(3) * t816;
t1016 = -g(1) * t788 - g(2) * t784 - g(3) * t838;
t801 = t1073 * t894 - t893 * t943;
t803 = t1073 * t895 - t943 * t999;
t1015 = -g(1) * t803 - g(2) * t801 - g(3) * t875;
t1010 = t1038 * MDP(8);
t780 = qJ(5) * t1072 - t1146;
t990 = -t671 + t1171;
t988 = t1184 * t809 - t1017;
t985 = g(1) * t738 + g(2) * t734 + g(3) * t778 - t1082;
t984 = t1020 - t1083;
t620 = t672 * pkin(4) + t955;
t981 = t620 + t988;
t624 = -qJ(5) * t770 - qJD(5) * t837 - t1023;
t613 = -pkin(5) * t672 - t614;
t972 = t613 + (t1197 * t760 + t1180) * t760 + t1020;
t971 = t983 * t1181;
t970 = t1046 * t1004;
t969 = t657 * t763 + qJDD(5) - t985;
t968 = qJD(3) * t971;
t967 = -t869 * t1067 - t842 * t1069 + t1072 * t881 + t1073 * t846 - t829 * t1113 - t943 * t845;
t963 = t964 * t1181;
t676 = -pkin(3) * t1039 - t967;
t699 = t942 * t1039 - t838 * t1136 + (-qJD(4) * t890 + t771) * t946;
t958 = -t699 * qJ(5) - t779 * qJD(5) + t676;
t952 = t953 * t1181;
t777 = t891 * pkin(4) + t975;
t759 = -t891 * pkin(5) - t780;
t698 = qJD(4) * t779 - t1039 * t946 + t771 * t942;
t694 = pkin(4) * t763 + t1180;
t691 = t738 * t941 + t787 * t945;
t690 = t738 * t945 - t787 * t941;
t666 = t966 + t1185;
t664 = -pkin(4) * t814 - t743 * t946 + t705;
t659 = -pkin(4) * t837 - t1093;
t654 = qJD(6) * t1049 + t698 * t941 + t770 * t945;
t653 = qJD(6) * t733 - t698 * t945 + t770 * t941;
t645 = -pkin(5) * t778 - t658;
t640 = -pkin(4) * t809 + t1131;
t630 = qJD(6) * t717 + t1094;
t627 = t698 * pkin(4) + t958;
t626 = t1197 * t698 + t958;
t625 = -pkin(4) * t770 - t1036;
t621 = -pkin(5) * t698 - t624;
t619 = pkin(5) * t699 - t1197 * t770 - t1036;
t615 = t1044 - t1192;
t610 = -qJD(6) * t623 + t1095;
t609 = qJD(6) * t622 + t1053;
t1 = [(t620 * t666 + t657 * t627 + t614 * t658 + t643 * t624 + t615 * t659 + t640 * t625 - g(1) * (-pkin(1) * t1194 - t894 * pkin(2) - pkin(3) * t784 - pkin(4) * t735 + pkin(9) * t1162 - pkin(11) * t783 - qJ(5) * t734) - g(2) * (t948 * pkin(1) + t895 * pkin(2) + t788 * pkin(3) + t739 * pkin(4) + t787 * pkin(11) + t738 * qJ(5) + t1190 * t1194) + (g(1) * t992 + g(2) * t965) * pkin(10)) * MDP(28) + (-t1114 * t971 - t890 * t964) * MDP(15) + (-t1023 * t809 + t1083 * t837 - t1154 * t726 + t635 * t779 - t651 * t770 - t713 * t671 + t676 * t763 + t692 * t699 + t1066) * MDP(24) + (t1036 * t809 - t1082 * t837 + t1093 * t726 + t635 * t778 - t650 * t770 + t713 * t672 + t676 * t761 + t692 * t698 + t1065) * MDP(23) + (-t1039 * t712 - t1122 * t964 + t700 * t838 + t755 * t771 + t769 * t953 + t773 * t814 - t890 * t994 + t983 * t993 + t1064) * MDP(17) + (-t1049 * t670 - t630 * t779 - t653 * t760 - t699 * t715) * MDP(32) + (t1049 * t629 - t630 * t733 - t653 * t717 - t654 * t715) * MDP(30) + (g(1) * t784 - g(2) * t788 + t1029 * t890 + t1039 * t711 + t700 * t837 + t769 * t729 + t755 * t770 + t773 * t812 + t964 * t974 - t967 * t983) * MDP(16) + (0.2e1 * (t1126 * t944 - t1129 * t1141) * MDP(5) + (qJDD(1) * t938 + 0.2e1 * t1112 * t944) * MDP(4)) * t937 + (-t1039 * t812 + t729 * t890 + t770 * t983 - t837 * t964) * MDP(14) + (t814 * t771 + t838 * t953) * MDP(11) + (-t838 * t729 - t814 * t770 - t771 * t812 - t837 * t953) * MDP(12) + (-t771 * t983 + t838 * t980 - t960 * t890 + (t814 * t1070 - t890 * t986 + (-t890 * t987 + (t1102 * t838 - t890 * t997) * qJD(2)) * qJD(1)) * t940) * MDP(13) + (t614 * t778 + t615 * t779 + t624 * t761 + t625 * t763 + t640 * t699 + t643 * t698 + t658 * t672 - t659 * t671 - t1064) * MDP(25) + (t615 * t837 - t620 * t778 + t625 * t809 - t627 * t761 + t640 * t770 - t657 * t698 + t659 * t726 - t666 * t672 - t1065) * MDP(26) + (-t614 * t837 - t620 * t779 - t624 * t809 - t627 * t763 - t643 * t770 - t657 * t699 - t658 * t726 + t666 * t671 - t1066) * MDP(27) + qJDD(1) * MDP(1) + (-t1045 * t1114 + t1203 * t947) * MDP(7) + (t1045 * t1139 * t947 + t1203 * t944) * MDP(6) + (-(qJD(6) * t1051 + t619 * t941 + t626 * t945) * t760 + t1050 * t670 - t609 * t779 - t623 * t699 + t621 * t717 + t645 * t629 + t613 * t733 + t631 * t654 + g(1) * t1215 - g(2) * t690) * MDP(35) + ((-qJD(6) * t1050 + t619 * t945 - t626 * t941) * t760 - t1051 * t670 + t610 * t779 + t622 * t699 + t621 * t715 + t645 * t630 - t613 * t1049 + t631 * t653 + g(1) * t1216 - g(2) * t691) * MDP(34) + (-t672 * t837 - t698 * t809 - t726 * t778 - t761 * t770) * MDP(21) + (-t671 * t837 + t699 * t809 + t726 * t779 + t763 * t770) * MDP(20) + (t726 * t837 + t770 * t809) * MDP(22) + (t671 * t778 - t672 * t779 - t698 * t763 - t699 * t761) * MDP(19) + (-t671 * t779 + t699 * t763) * MDP(18) + (t629 * t779 + t654 * t760 - t670 * t733 + t699 * t717) * MDP(31) + (-t670 * t779 + t699 * t760) * MDP(33) + (t1126 * t1208 - 0.2e1 * t1125 * t1129 - qJD(2) * t970 + (-pkin(9) * t1164 + t932) * t1038 + (t1006 * t940 + t1005) * t1183 + g(1) * t894 - g(2) * t895) * MDP(9) + (-(-pkin(9) * t1114 + t923) * t1046 - t1004 * t1038 - t1001 * t1183 - g(1) * t893 + g(2) * t999 + t1024 * t1208) * MDP(10) + (t629 * t733 + t654 * t717) * MDP(29) + t1183 * t1010 + (g(1) * t1194 - g(2) * t948) * MDP(2) + (g(1) * t948 + g(2) * t1194) * MDP(3); t1141 * MDP(5) * t1165 + (t1068 * t944 + t1110) * MDP(7) + (t1028 * t640 - t1072 * t615 - t1147 * t657 + t1151 * t809 - t1205 * t761 - t620 * t891 - t777 * t672 + t782 * t726 - t1018) * MDP(26) + (-t1028 * t643 + t1072 * t614 + t1148 * t657 - t1152 * t809 - t1205 * t763 - t620 * t892 + t777 * t671 - t780 * t726 - t1019) * MDP(27) + (-pkin(9) * t1111 + g(1) * t999 + g(2) * t893 - g(3) * t1163 + qJD(1) * t970 - t1084 * t947 + t1125 * t950 + t1005) * MDP(9) + (-t1068 * t947 + t1111) * MDP(6) - t944 * MDP(4) * t1124 + (t1150 * t717 - t629 * t998) * MDP(29) + (-t1148 * t717 + t1150 * t760 + t629 * t892 + t670 * t998) * MDP(31) + (t1149 * t717 - t1150 * t715 + t629 * t849 + t630 * t998) * MDP(30) + ((t744 * t941 + t756 * t945) * t670 - t609 * t892 + t759 * t629 - t613 * t998 - g(1) * (t767 * t945 - t803 * t941) - g(2) * (t765 * t945 - t801 * t941) - g(3) * (t815 * t945 - t875 * t941) + (t1057 * t945 + t1059 * t941) * t760 + t1156 * t717 + t1150 * t631 + t1148 * t623) * MDP(35) + (-t1040 * t814 + t1182 * t953 - t1195 * t968 + t861 * t983 + t943 * t963) * MDP(13) + (t1040 * t812 - t1182 * t729 + t1195 * t963 - t860 * t983 + t943 * t968) * MDP(14) + t1010 + (t1009 * t814 + t943 * t952) * MDP(11) + (-t1028 * t650 + t1082 * t1072 + t1091 * t726 + t1145 * t761 + t1147 * t692 + t1209 * t809 + t635 * t891 + t883 * t672 + t1018) * MDP(23) + (t620 * t777 + t614 * t780 + t615 * t782 - g(1) * (-pkin(2) * t999 + t804 * pkin(3) + t768 * pkin(4) + t803 * pkin(11) + t767 * qJ(5) + t1117 * t895) - g(2) * (-t893 * pkin(2) + t802 * pkin(3) + t766 * pkin(4) + t801 * pkin(11) + t765 * qJ(5) + t1117 * t894) - g(3) * (t876 * pkin(3) + t816 * pkin(4) + t875 * pkin(11) + t815 * qJ(5) + t1012 * t940) + t1205 * t657 + t1152 * t643 + t1151 * t640) * MDP(28) + (-pkin(2) * t952 + t1009 * t755 + t1040 * t712 + t1103 * t700 - t1142 * t964 + t1182 * t994 + t1220 * t983 - t772 * t814 - t1015) * MDP(17) + (-t1028 * t651 - t1083 * t1072 + t1145 * t763 - t1146 * t726 - t1148 * t692 + t1210 * t809 + t635 * t892 - t883 * t671 + t1019) * MDP(24) + (-g(1) * t804 - g(2) * t802 - g(3) * t876 + t1021 * t964 + t1028 * t755 - t1182 * t1029 - t1040 * t711 - t1072 * t700 - t1116 * t729 + t1217 * t983 - t772 * t812) * MDP(16) + (-t1028 * t761 + t1072 * t672 - t1147 * t809 - t891 * t726) * MDP(21) + (-t1147 * t763 + t1148 * t761 + t671 * t891 - t672 * t892) * MDP(19) + (-t1148 * t763 - t671 * t892) * MDP(18) + (-t1148 * t760 - t670 * t892) * MDP(33) + (t1028 * t763 + t1072 * t671 - t1148 * t809 + t892 * t726) * MDP(20) + (t1148 * t715 + t1149 * t760 - t630 * t892 - t670 * t849) * MDP(32) + (t1147 * t643 - t1148 * t640 + t1151 * t763 + t1152 * t761 + t614 * t891 + t615 * t892 - t671 * t782 + t672 * t780 + t1015) * MDP(25) + (-(t744 * t945 - t756 * t941) * t670 + t610 * t892 + t759 * t630 - t613 * t849 - g(1) * (t767 * t941 + t803 * t945) - g(2) * (t765 * t941 + t801 * t945) - g(3) * (t815 * t941 + t875 * t945) + (t1057 * t941 - t1059 * t945) * t760 + t1156 * t715 - t1149 * t631 - t1148 * t622) * MDP(34) + (pkin(1) * t1124 + (-pkin(9) * t1115 + t922) * t1096 + g(1) * t895 + g(2) * t894 + g(3) * t1164 + t922 * qJD(2) - t1119) * MDP(10) + (t980 * t1182 - (qJD(1) * t1056 - t1130) * t1040) * MDP(15) + (-t1009 * t812 - t1028 * t814 - t1103 * t729 + t1195 * t952) * MDP(12) + (t1028 * t809 - t1072 * t726) * MDP(22); (-t812 * t983 + t953) * MDP(13) + t964 * MDP(15) + (t1089 * t809 + t726 * t942) * MDP(20) + (t1089 * t763 - t671 * t942) * MDP(18) + (t1089 * t760 - t670 * t942) * MDP(33) + (t1025 * t942 + t1037 * t672 - t1144 * t761 - t664 * t809 + t946 * t981) * MDP(26) + (t1025 * t946 - t1037 * t671 - t1144 * t763 + t662 * t809 - t942 * t981) * MDP(27) + (-t712 * t983 + t1017 - t1029) * MDP(16) + (-t711 * t983 + t755 * t812 - t1016 + t994) * MDP(17) + (-t640 * t664 - t643 * t662 + t1144 * t657 + (-t614 * t946 + t615 * t942 + (t640 * t946 + t643 * t942) * qJD(4) + t1016) * pkin(11) + (-t620 + t1017) * t1037) * MDP(28) - t729 * MDP(14) - t812 ^ 2 * MDP(12) + (-t629 * t941 * t946 + (-t1133 * t946 + t1061) * t717) * MDP(29) + (pkin(3) * t671 + t1155 * t809 - t712 * t763 + t1026 * t946 + (t635 + t988) * t942) * MDP(24) + ((t896 * t945 + t915 * t941) * t670 - t609 * t942 + t916 * t629 - g(1) * (-t1159 * t787 - t788 * t941) - g(2) * (-t1159 * t783 - t784 * t941) - g(3) * (-t1159 * t837 - t838 * t941) + (t1058 * t945 + t1060 * t941) * t760 + t1143 * t717 + t1061 * t631 + (-t1133 * t631 - t613 * t941 - t623 * t809) * t946) * MDP(35) + (-(-t896 * t941 + t915 * t945) * t670 + t610 * t942 + t916 * t630 - g(1) * (-t1160 * t787 + t788 * t945) - g(2) * (-t1160 * t783 + t784 * t945) - g(3) * (-t1160 * t837 + t838 * t945) + (t1058 * t941 - t1060 * t945) * t760 + t1143 * t715 - t1062 * t631 + (-t1134 * t631 + t613 * t945 + t622 * t809) * t946) * MDP(34) + ((-t671 - t1171) * t946 + (-t672 - t1169) * t942) * MDP(19) + (t629 * t942 + t1061 * t760 + (-t1133 * t760 + t1161 + t1172) * t946) * MDP(31) + (-t630 * t942 + t1062 * t760 + (t1134 * t760 - t1174 + t667) * t946) * MDP(32) + (-t662 * t761 - t664 * t763 + (-t614 + t809 * t640 + (-t672 + t1137) * pkin(11)) * t946 + (t615 + t1177 + (qJD(4) * t761 - t671) * pkin(11)) * t942 + t1016) * MDP(25) + (t715 * t741 + t717 * t740 + (-t715 * t941 + t717 * t945) * t1136 + (-t1178 + t630 * t941 + (t715 * t945 + t717 * t941) * qJD(6)) * t946) * MDP(30) + (-pkin(3) * t672 + t705 * t809 - t712 * t761 + t1026 * t942 + (-t635 + (-t743 - t1184) * t809 + t1017) * t946) * MDP(23) + (-t1198 * t942 + t726 * t946) * MDP(21) + (MDP(11) * t812 + MDP(12) * t814 - MDP(14) * t983 - t755 * MDP(16) - t763 * MDP(20) + t761 * MDP(21) - t809 * MDP(22) + t650 * MDP(23) + t651 * MDP(24) - t640 * MDP(26) + t643 * MDP(27)) * t814; MDP(18) * t1170 + (-t761 ^ 2 + t1199) * MDP(19) + t990 * MDP(20) + (t1169 - t672) * MDP(21) + t726 * MDP(22) + (-t692 * t763 + t1176 + t985) * MDP(23) + (-t650 * t809 + t692 * t761 - t984) * MDP(24) + (pkin(4) * t671 - qJ(5) * t672 + (-t643 - t651) * t763 + (t640 - t1131) * t761) * MDP(25) + (t694 * t761 - t1176 - 0.2e1 * t1192 + t969) * MDP(26) + (t1131 * t809 - t657 * t761 + t694 * t763 + 0.2e1 * t723 + t805 + t984) * MDP(27) + (-t614 * qJ(5) - t615 * pkin(4) - t657 * t694 - t640 * t651 - g(1) * (-pkin(4) * t738 + qJ(5) * t739) - g(2) * (-pkin(4) * t734 + qJ(5) * t735) - g(3) * (t1168 - t1185) - t1131 * t643) * MDP(28) + (-t1088 * t717 + t1178) * MDP(29) + ((-t630 - t1173) * t945 + (-t629 + t1175) * t941) * MDP(30) + (-t1088 * t760 + t717 * t761 - t667) * MDP(31) + (-t1087 * t760 - t715 * t761 + t1161) * MDP(32) + t760 * t761 * MDP(33) + (qJ(5) * t630 + t1132 * t715 + t1201 * t945 + t622 * t761 + t972 * t941) * MDP(34) + (qJ(5) * t629 + t1132 * t717 - t1201 * t941 - t623 * t761 + t972 * t945) * MDP(35); t990 * MDP(25) + (-t1198 - t1199) * MDP(27) + (t1177 + t969 - t1192) * MDP(28) + (-t667 - t1174) * MDP(34) + (t1161 - t1172) * MDP(35) + (-MDP(34) * t1088 - MDP(35) * t1087) * t760 + (-t1170 + t726) * MDP(26); t717 * t715 * MDP(29) + (-t715 ^ 2 + t717 ^ 2) * MDP(30) + (t1123 + t1175) * MDP(31) + (-t1094 + t1173) * MDP(32) - t670 * MDP(33) + (-g(1) * t690 - g(2) * t1215 - g(3) * t1049 + t623 * t760 - t631 * t717 + t1095) * MDP(34) + (g(1) * t691 + g(2) * t1216 + g(3) * t733 + t622 * t760 + t631 * t715 - t1053) * MDP(35) + (-MDP(31) * t1167 - MDP(32) * t717 - MDP(34) * t623 - MDP(35) * t622) * qJD(6);];
tau  = t1;
