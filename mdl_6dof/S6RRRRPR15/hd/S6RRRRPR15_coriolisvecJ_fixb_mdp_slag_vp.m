% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR15_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRPR15_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR15_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR15_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR15_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR15_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:50:45
% EndTime: 2019-03-10 00:51:20
% DurationCPUTime: 21.31s
% Computational Cost: add. (19256->777), mult. (58119->1035), div. (0->0), fcn. (47859->12), ass. (0->316)
t781 = sin(qJ(2));
t784 = cos(qJ(2));
t780 = sin(qJ(3));
t968 = cos(pkin(7));
t898 = t780 * t968;
t973 = cos(qJ(3));
t819 = -t781 * t898 + t784 * t973;
t777 = sin(pkin(6));
t930 = qJD(1) * t777;
t717 = t819 * t930;
t776 = sin(pkin(7));
t902 = qJD(3) * t973;
t875 = t776 * t902;
t983 = t717 - t875;
t969 = cos(pkin(6));
t909 = pkin(1) * t969;
t878 = t784 * t909;
t761 = qJD(1) * t878;
t839 = t777 * (-pkin(10) * t968 - pkin(9));
t829 = t781 * t839;
t698 = qJD(1) * t829 + t761;
t879 = t781 * t909;
t803 = t784 * t839 - t879;
t699 = t803 * qJD(1);
t828 = t777 * (-pkin(10) * t776 * t784 + pkin(2) * t781);
t730 = qJD(1) * t828;
t871 = t968 * t973;
t952 = t776 * t780;
t830 = pkin(2) * t871 - pkin(10) * t952;
t992 = t830 * qJD(3) - t973 * t698 - t699 * t898 - t730 * t952;
t640 = -t699 * t776 + t968 * t730;
t817 = t780 * t784 + t781 * t871;
t716 = t817 * t930;
t928 = qJD(3) * t776;
t990 = pkin(3) * t716 - pkin(11) * t717 + t640 - (pkin(3) * t780 - pkin(11) * t973) * t928;
t905 = t781 * t930;
t877 = t776 * t905;
t991 = pkin(11) * t877 - t992;
t908 = t776 * t973;
t932 = pkin(2) * t898 + pkin(10) * t908;
t734 = pkin(11) * t968 + t932;
t735 = (-pkin(3) * t973 - pkin(11) * t780 - pkin(2)) * t776;
t779 = sin(qJ(4));
t783 = cos(qJ(4));
t924 = qJD(4) * t783;
t925 = qJD(4) * t779;
t981 = t734 * t924 + t735 * t925 - t779 * t991 + t783 * t990;
t741 = t779 * t952 - t783 * t968;
t937 = qJD(4) * t741 + t779 * t877 + t783 * t983;
t870 = qJD(3) * t898;
t989 = pkin(2) * t870 + pkin(10) * t875 - t780 * t698 + t699 * t871;
t896 = t784 * t968;
t818 = t780 * t896 + t781 * t973;
t808 = t818 * t777;
t894 = t969 * qJD(1);
t848 = t894 + qJD(2);
t832 = t776 * t848;
t823 = t780 * t832;
t668 = qJD(1) * t808 + t823;
t950 = t777 * t784;
t915 = t776 * t950;
t919 = qJD(1) * t915 - qJD(3);
t806 = -t848 * t968 + t919;
t633 = t783 * t668 - t779 * t806;
t630 = qJD(6) + t633;
t742 = t779 * t968 + t783 * t952;
t936 = qJD(4) * t742 - t779 * t983 + t783 * t877;
t927 = qJD(3) * t780;
t903 = t776 * t927;
t984 = t716 - t903;
t907 = t973 * t730;
t934 = -(-pkin(3) * t905 - t907) * t776 + t989;
t987 = t734 * t925 - t735 * t924 + t779 * t990 + t991 * t783;
t822 = t848 * t973;
t746 = t776 * t822;
t844 = t784 * t871;
t838 = t777 * t844;
t666 = -qJD(1) * t838 + t780 * t905 - t746;
t663 = qJD(4) + t666;
t805 = pkin(2) * t969 + t829;
t665 = qJD(2) * pkin(2) + qJD(1) * t805 + t761;
t951 = t776 * t781;
t726 = (-pkin(2) * t784 - pkin(10) * t951 - pkin(1)) * t777;
t712 = qJD(1) * t726;
t623 = -t665 * t776 + t968 * t712;
t575 = pkin(3) * t666 - pkin(11) * t668 + t623;
t821 = pkin(9) * t950 + t879;
t872 = t777 * t896;
t660 = t821 * qJD(1) + (qJD(1) * t872 + t832) * pkin(10);
t596 = t973 * t660 + t665 * t898 + t712 * t952;
t578 = -pkin(11) * t806 + t596;
t526 = -t783 * t575 + t578 * t779;
t920 = qJD(5) + t526;
t773 = t777 ^ 2;
t918 = qJD(1) * qJD(2);
t986 = -0.2e1 * t773 * t918;
t985 = MDP(5) * (t781 ^ 2 - t784 ^ 2);
t948 = t780 * t781;
t816 = t844 - t948;
t807 = t816 * qJD(3);
t794 = (qJD(2) * t819 + t807) * t777;
t792 = qJD(1) * t794;
t812 = qJD(3) * t822;
t810 = t776 * t812;
t789 = t810 + t792;
t900 = t777 * t918;
t874 = t781 * t900;
t851 = t776 * t874;
t926 = qJD(4) * t633;
t568 = t779 * t789 - t783 * t851 + t926;
t982 = -qJ(5) * t937 + qJD(5) * t742 - t934;
t978 = qJD(2) * t817 + qJD(3) * t818;
t795 = t978 * t777;
t813 = qJD(3) * t823;
t635 = qJD(1) * t795 + t813;
t954 = t666 * t779;
t980 = qJD(5) * t779 + t596 + (-t925 - t954) * pkin(4);
t921 = pkin(5) * t633 + t920;
t527 = t779 * t575 + t783 * t578;
t522 = -qJ(5) * t663 - t527;
t802 = t783 * t806;
t631 = t668 * t779 + t802;
t971 = pkin(5) * t631;
t514 = -t522 - t971;
t567 = qJD(4) * t802 + t668 * t925 - t779 * t851 - t783 * t789;
t975 = pkin(4) + pkin(12);
t979 = t975 * t567 + (t514 - t527 + t971) * t630;
t947 = -qJ(5) * t716 + t776 * (qJ(5) * t927 - qJD(5) * t973) - t987;
t977 = t633 ^ 2;
t976 = t663 ^ 2;
t786 = qJD(1) ^ 2;
t974 = pkin(5) + pkin(11);
t972 = pkin(4) * t635;
t970 = pkin(11) * t635;
t967 = qJ(5) * t631;
t966 = qJ(5) * t783;
t778 = sin(qJ(6));
t782 = cos(qJ(6));
t922 = qJD(6) * t782;
t913 = t778 * t568 + t631 * t922 + t782 * t635;
t923 = qJD(6) * t778;
t519 = -t663 * t923 + t913;
t965 = t519 * t782;
t964 = t522 * t663;
t963 = t527 * t663;
t955 = t663 * t778;
t599 = -t782 * t631 + t955;
t962 = t599 * t630;
t961 = t599 * t663;
t601 = t631 * t778 + t663 * t782;
t960 = t601 * t630;
t959 = t601 * t663;
t958 = t631 * t663;
t957 = t633 * t631;
t956 = t633 * t663;
t629 = t635 * qJ(5);
t953 = t773 * t786;
t949 = t778 * t567;
t564 = t782 * t567;
t946 = pkin(4) * t984 + t981;
t945 = qJ(5) * t924 + t666 * t966 + t980;
t944 = -pkin(4) * t936 + t982;
t943 = -pkin(5) * t936 + t947;
t595 = -t780 * t660 + t665 * t871 + t712 * t908;
t616 = pkin(3) * t668 + pkin(11) * t666;
t942 = t783 * t595 + t779 * t616;
t697 = t878 + t805;
t637 = -t697 * t776 + t968 * t726;
t895 = t969 * t776;
t845 = t973 * t895;
t690 = t777 * t948 - t838 - t845;
t873 = t780 * t895;
t691 = t873 + t808;
t591 = pkin(3) * t690 - pkin(11) * t691 + t637;
t859 = t969 * t968;
t740 = -t859 + t915;
t685 = (t872 + t895) * pkin(10) + t821;
t912 = t973 * t685 + t697 * t898 + t726 * t952;
t598 = -pkin(11) * t740 + t912;
t941 = t779 * t591 + t783 * t598;
t704 = t782 * t741 + t778 * t908;
t939 = qJD(6) * t704 + t778 * t936 - t782 * t984;
t826 = -t778 * t741 + t782 * t908;
t938 = qJD(6) * t826 + t778 * t984 + t782 * t936;
t935 = t783 * t734 + t779 * t735;
t540 = -qJ(5) * t668 - t942;
t933 = -pkin(5) * t954 - t974 * t925 + t540;
t929 = qJD(2) * t781;
t917 = pkin(1) * t953;
t916 = pkin(11) * t925;
t759 = t974 * t783;
t731 = qJD(2) * t828;
t906 = t973 * t731;
t904 = t777 * t929;
t899 = -qJ(5) * t779 - pkin(3);
t867 = qJD(2) * t894;
t846 = pkin(1) * t867;
t756 = t784 * t846;
t820 = qJD(2) * t829;
t682 = qJD(1) * t820 + t756;
t701 = t803 * qJD(2);
t683 = qJD(1) * t701;
t721 = qJD(1) * t731;
t841 = qJD(3) * t871;
t815 = t660 * t927 - t665 * t841 - t973 * t682 - t683 * t898 - t712 * t875 - t721 * t952;
t543 = pkin(11) * t851 - t815;
t708 = t968 * t721;
t558 = t635 * pkin(3) + t708 + (-pkin(11) * t812 - t683) * t776 - pkin(11) * t792;
t881 = t779 * t543 - t783 * t558 + t575 * t925 + t578 * t924;
t497 = -pkin(5) * t567 - t635 * t975 + t881;
t547 = -t660 * t902 - t665 * t870 - t780 * t682 + t683 * t871 - t712 * t903 + t721 * t908;
t544 = -pkin(3) * t851 - t547;
t797 = qJ(5) * t567 - qJD(5) * t633 + t544;
t505 = t568 * t975 + t797;
t893 = t782 * t497 - t505 * t778;
t892 = -t782 * t568 + t635 * t778;
t891 = t591 * t783 - t779 * t598;
t641 = -t701 * t776 + t968 * t731;
t889 = -t779 * t734 + t783 * t735;
t888 = t630 * t778;
t887 = t663 * t783;
t885 = t630 * t782;
t883 = MDP(4) * t773 * t781 * t784;
t882 = -t783 * t543 - t779 * t558 - t575 * t924 + t578 * t925;
t876 = t776 * t904;
t868 = pkin(1) * t986;
t534 = -qJ(5) * t690 - t941;
t647 = pkin(4) * t908 - t889;
t613 = t668 * t778 + t782 * t954;
t865 = t782 * t925 + t613;
t614 = t668 * t782 - t778 * t954;
t864 = t778 * t925 - t614;
t589 = t779 * t595;
t745 = -t783 * t975 + t899;
t863 = qJD(6) * t745 + t589 + (-pkin(5) * t666 - t616) * t783 - t975 * t668 - qJD(4) * t759;
t733 = -pkin(3) * t968 - t830;
t800 = -t742 * qJ(5) + t733;
t624 = t741 * t975 + t800;
t862 = pkin(5) * t937 + qJD(6) * t624 - t975 * t984 - t981;
t758 = t974 * t779;
t861 = -qJD(6) * t758 + t980 - t663 * (pkin(12) * t779 - t966);
t617 = t742 * pkin(5) + pkin(12) * t908 + t647;
t860 = -qJD(6) * t617 - t936 * t975 + t982;
t857 = t497 * t778 + t505 * t782;
t513 = -t663 * t975 + t921;
t577 = pkin(3) * t806 - t595;
t790 = -t633 * qJ(5) + t577;
t518 = t631 * t975 + t790;
t503 = t513 * t782 - t518 * t778;
t504 = t513 * t778 + t518 * t782;
t645 = t691 * t783 - t740 * t779;
t517 = pkin(5) * t645 - t690 * t975 - t891;
t644 = t691 * t779 + t740 * t783;
t804 = -t780 * t685 + t697 * t871 + t726 * t908;
t597 = t740 * pkin(3) - t804;
t798 = -t645 * qJ(5) + t597;
t532 = t644 * t975 + t798;
t855 = t517 * t782 - t532 * t778;
t854 = t517 * t778 + t532 * t782;
t853 = t644 * t782 - t690 * t778;
t612 = t644 * t778 + t690 * t782;
t850 = t776 ^ 2 * t874;
t849 = MDP(15) * t877;
t762 = qJD(2) * t878;
t700 = t762 + t820;
t814 = -t685 * t927 + t697 * t841 + t973 * t700 + t701 * t898 + t726 * t875 + t731 * t952;
t552 = pkin(11) * t876 + t814;
t638 = qJD(3) * t873 + t795;
t639 = qJD(3) * t845 + t794;
t561 = pkin(3) * t638 - pkin(11) * t639 + t641;
t843 = -t779 * t552 + t561 * t783 - t591 * t925 - t598 * t924;
t501 = -t663 * qJD(5) - t629 + t882;
t837 = t577 * t663 - t970;
t533 = t631 * pkin(4) + t790;
t836 = -t533 * t663 + t970;
t835 = t533 * t633 + t881;
t646 = qJ(5) * t908 - t935;
t834 = t783 * t552 + t779 * t561 + t591 * t924 - t598 * t925;
t498 = -pkin(5) * t568 - t501;
t831 = t498 + (t630 * t975 + t967) * t630;
t811 = -t567 + t958;
t809 = -t685 * t902 - t697 * t870 - t780 * t700 + t701 * t871 - t726 * t903;
t508 = -qJ(5) * t638 - qJD(5) * t690 - t834;
t801 = qJD(3) * t806;
t799 = t848 * t821;
t553 = (-pkin(3) * t904 - t906) * t776 - t809;
t584 = t779 * t876 - t691 * t925 + (-qJD(4) * t740 + t639) * t783;
t791 = -t584 * qJ(5) - t645 * qJD(5) + t553;
t788 = t776 * t789;
t754 = -pkin(4) * t783 + t899;
t643 = t741 * pkin(4) + t800;
t636 = -t776 * t683 + t708;
t628 = -t741 * pkin(5) - t646;
t583 = qJD(4) * t645 + t639 * t779 - t783 * t876;
t579 = pkin(4) * t633 + t967;
t566 = t567 * t779;
t562 = t567 * t742;
t551 = t567 * t645;
t548 = t644 * pkin(4) + t798;
t542 = -pkin(4) * t668 - t616 * t783 + t589;
t535 = -pkin(4) * t690 - t891;
t530 = qJD(6) * t853 + t583 * t778 + t638 * t782;
t529 = qJD(6) * t612 - t583 * t782 + t638 * t778;
t523 = -pkin(5) * t644 - t534;
t521 = -pkin(4) * t663 + t920;
t520 = qJD(6) * t601 + t892;
t512 = t583 * pkin(4) + t791;
t511 = pkin(4) * t568 + t797;
t510 = t583 * t975 + t791;
t509 = -pkin(4) * t638 - t843;
t502 = t881 - t972;
t500 = -pkin(5) * t583 - t508;
t499 = pkin(5) * t584 - t638 * t975 - t843;
t495 = -qJD(6) * t504 + t893;
t494 = qJD(6) * t503 + t857;
t1 = [(-t527 * t638 + t544 * t645 + t553 * t633 - t597 * t567 + t577 * t584 - t635 * t941 - t663 * t834 + t690 * t882) * MDP(24) + (-t526 * t638 + t544 * t644 + t553 * t631 + t597 * t568 + t577 * t583 + t635 * t891 + t663 * t843 - t690 * t881) * MDP(23) + (-t596 * t876 + t623 * t639 + t636 * t691 + t637 * t789 + t641 * t668 - t740 * t815 + t806 * t814 - t851 * t912) * MDP(17) + (-t520 * t645 - t529 * t630 - t567 * t853 - t584 * t599) * MDP(32) + (t519 * t853 - t520 * t612 - t529 * t601 - t530 * t599) * MDP(30) + ((-qJD(6) * t854 + t499 * t782 - t510 * t778) * t630 - t855 * t567 + t495 * t645 + t503 * t584 + t500 * t599 + t523 * t520 - t498 * t853 + t514 * t529) * MDP(34) + (-qJD(2) * t806 - t740 * t918) * t777 * MDP(15) * t951 + (-t567 * t690 + t584 * t663 + t633 * t638 + t635 * t645) * MDP(20) + (-t568 * t690 - t583 * t663 - t631 * t638 - t635 * t644) * MDP(21) + (t502 * t690 + t509 * t663 - t511 * t644 - t512 * t631 + t521 * t638 - t533 * t583 + t535 * t635 - t548 * t568) * MDP(26) + (t635 * t690 + t638 * t663) * MDP(22) + (-t501 * t690 - t508 * t663 - t511 * t645 - t512 * t633 - t522 * t638 - t533 * t584 - t534 * t635 + t548 * t567) * MDP(27) + (t501 * t644 + t502 * t645 + t508 * t631 + t509 * t633 + t521 * t584 + t522 * t583 + t534 * t568 - t535 * t567) * MDP(25) + (t567 * t644 - t568 * t645 - t583 * t633 - t584 * t631) * MDP(19) + (t519 * t645 + t530 * t630 - t567 * t612 + t584 * t601) * MDP(31) + (MDP(6) * qJD(2) * t950 - MDP(7) * t904) * (0.2e1 * t894 + qJD(2)) + (-qJD(2) * t799 + t781 * t868 - t821 * t867) * MDP(9) + (t519 * t612 + t530 * t601) * MDP(29) + (t784 * t868 - (-pkin(9) * t904 + t762) * t848 - (-pkin(9) * t874 + t756) * t969) * MDP(10) + (-t639 * t806 - t740 * t810 + (t668 * t776 * t929 + (-t740 * t807 + (t691 * t951 - t740 * t819) * qJD(2)) * qJD(1)) * t777) * MDP(13) + (t501 * t534 + t502 * t535 + t508 * t522 + t509 * t521 + t511 * t548 + t512 * t533) * MDP(28) + 0.2e1 * t883 * t918 + (-(t776 * t906 + t809) * t806 - t547 * t740 + t641 * t666 + t637 * t635 + t636 * t690 + t623 * t638 + (qJD(1) * t804 + t595) * t876) * MDP(16) + (t638 * t806 + t635 * t740 + (-qJD(1) * t690 - t666) * t876) * MDP(14) + (-(qJD(6) * t855 + t499 * t778 + t510 * t782) * t630 + t854 * t567 - t494 * t645 - t504 * t584 + t500 * t601 + t523 * t519 + t498 * t612 + t514 * t530) * MDP(35) + (t584 * t630 - t551) * MDP(33) + (t584 * t633 - t551) * MDP(18) + t985 * t986 + (t668 * t639 + t691 * t789) * MDP(11) + (-t691 * t635 - t668 * t638 - t639 * t666 - t690 * t789) * MDP(12); (t547 * t968 - t776 * pkin(2) * t635 - t636 * t908 - t640 * t666 + (qJD(2) * t830 - t595) * t877 - t984 * t623 + (t776 * t907 + t989) * t806) * MDP(16) + (-pkin(2) * t788 + t596 * t877 - t983 * t623 + t636 * t952 - t640 * t668 + t806 * t992 + t815 * t968 - t851 * t932) * MDP(17) + ((t617 * t778 + t624 * t782) * t567 - t494 * t742 + t628 * t519 - t498 * t826 + (t778 * t862 + t782 * t860) * t630 + t943 * t601 + t939 * t514 + t937 * t504) * MDP(35) + (-t519 * t826 + t601 * t939) * MDP(29) + (t519 * t742 + t567 * t826 - t601 * t937 + t630 * t939) * MDP(31) + (t519 * t704 + t520 * t826 - t599 * t939 + t601 * t938) * MDP(30) + ((-MDP(6) * t784 + MDP(7) * t781) * t777 * t969 - t883) * t786 + ((t668 * t973 + (t816 * t930 + t746) * t780) * t928 + (qJD(2) * t952 - t668) * t717) * MDP(11) + (t984 * t526 + t544 * t741 + t733 * t568 + t936 * t577 + t934 * t631 + t889 * t635 - t663 * t981 + t881 * t908) * MDP(23) + (-pkin(9) * t784 * t900 + qJD(1) * t799 + (-t846 + t917) * t781) * MDP(9) + (t973 * t850 - t635 * t968 - t716 * t806 + (t666 * t905 + t780 * t801) * t776) * MDP(14) + (-t668 * t877 + t717 * t806 + t780 * t850 + t789 * t968 - t801 * t908) * MDP(13) + (-(t617 * t782 - t624 * t778) * t567 + t495 * t742 + t628 * t520 - t498 * t704 + (t778 * t860 - t782 * t862) * t630 + t943 * t599 - t938 * t514 - t937 * t503) * MDP(34) + (t501 * t646 + t502 * t647 + t511 * t643 + t521 * t946 - t522 * t947 - t533 * t944) * MDP(28) + (t501 * t741 + t502 * t742 - t521 * t937 + t522 * t936 - t567 * t647 + t568 * t646 - t631 * t947 + t633 * t946) * MDP(25) + (-t630 * t937 - t562) * MDP(33) + (-t633 * t937 - t562) * MDP(18) + (-t520 * t742 - t567 * t704 + t599 * t937 + t630 * t938) * MDP(32) + (t567 * t741 - t568 * t742 + t631 * t937 - t633 * t936) * MDP(19) + (-t756 + t784 * t917 + (-pkin(9) * t905 + t761) * t894 + t761 * qJD(2)) * MDP(10) - (qJD(1) * t859 - t919) * t849 + t953 * t985 + (t527 * t984 + t544 * t742 - t733 * t567 - t937 * t577 + t934 * t633 - t935 * t635 + t663 * t987 - t882 * t908) * MDP(24) + (-t502 * t908 - t511 * t741 - t521 * t984 - t533 * t936 - t643 * t568 + t631 * t944 + t647 * t635 + t663 * t946) * MDP(26) + (t501 * t908 - t511 * t742 + t522 * t984 + t533 * t937 + t643 * t567 + t633 * t944 - t646 * t635 + t663 * t947) * MDP(27) + (t567 * t908 - t633 * t984 + t742 * t635 - t663 * t937) * MDP(20) + (t568 * t908 + t631 * t984 - t741 * t635 - t663 * t936) * MDP(21) + (-t635 * t908 - t663 * t984) * MDP(22) + (-t635 * t952 + t666 * t983 + t668 * t984 + t788 * t973) * MDP(12); (-t595 * t806 + t623 * t666 + t815) * MDP(17) + (-t666 * t806 + t789) * MDP(13) + qJD(2) * t849 - t666 ^ 2 * MDP(12) + (t635 * t783 - t779 * t976) * MDP(21) + (-t540 * t631 - t542 * t633 + (-t501 + t663 * t521 + (-t568 + t926) * pkin(11)) * t783 + (t502 + t964 + (qJD(4) * t631 - t567) * pkin(11)) * t779) * MDP(25) + (t599 * t614 + t601 * t613 + (-t599 * t778 + t601 * t782) * t925 + (-t965 + t520 * t778 + (t599 * t782 + t601 * t778) * qJD(6)) * t783) * MDP(30) + (t519 * t779 + t864 * t630 + (-t630 * t922 + t949 + t959) * t783) * MDP(31) + (-t520 * t779 + t865 * t630 + (t630 * t923 + t564 - t961) * t783) * MDP(32) + ((-t567 - t958) * t783 + (-t568 - t956) * t779) * MDP(19) + (pkin(3) * t567 + t544 * t779 - t596 * t633 + (t916 + t942) * t663 + t837 * t783) * MDP(24) + (t511 * t783 - t568 * t754 + (pkin(11) * t924 - t542) * t663 + t945 * t631 + t836 * t779) * MDP(26) + (-t511 * t779 + t567 * t754 + (t540 - t916) * t663 + t945 * t633 + t836 * t783) * MDP(27) + (t511 * t754 - t521 * t542 - t522 * t540 - t945 * t533 + (-t501 * t783 + t502 * t779 + (t521 * t783 + t522 * t779) * qJD(4)) * pkin(11)) * MDP(28) + (-(-t745 * t778 + t758 * t782) * t567 + t495 * t779 + t759 * t520 + (t778 * t861 - t782 * t863) * t630 + t933 * t599 - t865 * t514 + (t498 * t782 + t503 * t663 - t514 * t923) * t783) * MDP(34) + ((t745 * t782 + t758 * t778) * t567 - t494 * t779 + t759 * t519 + (t778 * t863 + t782 * t861) * t630 + t933 * t601 + t864 * t514 + (-t498 * t778 - t504 * t663 - t514 * t922) * t783) * MDP(35) + (-t930 * t978 - t813) * MDP(14) + (-t519 * t778 * t783 + (-t783 * t922 + t864) * t601) * MDP(29) + (t635 * t779 + t663 * t887) * MDP(20) + (t633 * t887 - t566) * MDP(18) + (t630 * t887 - t566) * MDP(33) + (-pkin(3) * t568 - t544 * t783 - t596 * t631 + (t589 + (-pkin(11) * qJD(4) - t616) * t783) * t663 + t837 * t779) * MDP(23) + (-t596 * t806 + t547) * MDP(16) + (MDP(11) * t666 + MDP(12) * t668 - MDP(14) * t806 - MDP(16) * t623 - MDP(20) * t633 + MDP(21) * t631 - MDP(22) * t663 + MDP(23) * t526 + MDP(24) * t527 - MDP(26) * t521 + MDP(27) * t522) * t668; MDP(18) * t957 + (-t631 ^ 2 + t977) * MDP(19) + t811 * MDP(20) + (t956 - t568) * MDP(21) + t635 * MDP(22) + (-t577 * t633 - t881 + t963) * MDP(23) + (-t526 * t663 + t577 * t631 + t882) * MDP(24) + (pkin(4) * t567 - qJ(5) * t568 + (-t522 - t527) * t633 + (t521 - t920) * t631) * MDP(25) + (t579 * t631 + t835 - t963 - 0.2e1 * t972) * MDP(26) + (-t533 * t631 + t579 * t633 + t663 * t920 - t501 + t629) * MDP(27) + (-pkin(4) * t502 - qJ(5) * t501 - t521 * t527 - t522 * t920 - t533 * t579) * MDP(28) + (-t778 * t960 + t965) * MDP(29) + ((-t520 - t960) * t782 + (-t519 + t962) * t778) * MDP(30) + (t601 * t631 - t630 * t888 - t564) * MDP(31) + (-t599 * t631 - t630 * t885 + t949) * MDP(32) + t630 * t631 * MDP(33) + (qJ(5) * t520 + t503 * t631 + t921 * t599 + t831 * t778 + t782 * t979) * MDP(34) + (qJ(5) * t519 - t504 * t631 + t921 * t601 - t778 * t979 + t831 * t782) * MDP(35); t811 * MDP(25) + (-t976 - t977) * MDP(27) + (t835 + t964 - t972) * MDP(28) + (-t564 - t961) * MDP(34) + (t949 - t959) * MDP(35) + (-MDP(34) * t888 - MDP(35) * t885) * t630 + (-t957 + t635) * MDP(26); t601 * t599 * MDP(29) + (-t599 ^ 2 + t601 ^ 2) * MDP(30) + (t913 + t962) * MDP(31) + (-t892 + t960) * MDP(32) - t567 * MDP(33) + (t504 * t630 - t514 * t601 + t893) * MDP(34) + (t503 * t630 + t514 * t599 - t857) * MDP(35) + (-MDP(31) * t955 - MDP(32) * t601 - MDP(34) * t504 - MDP(35) * t503) * qJD(6);];
tauc  = t1;
