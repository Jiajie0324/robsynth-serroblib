% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPPRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR5_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:37:47
% EndTime: 2019-03-09 01:37:49
% DurationCPUTime: 1.36s
% Computational Cost: add. (1025->158), mult. (1856->300), div. (0->0), fcn. (1590->6), ass. (0->109)
t44 = sin(qJ(5));
t118 = -0.4e1 * t44;
t43 = sin(qJ(6));
t37 = t43 ^ 2;
t45 = cos(qJ(6));
t39 = t45 ^ 2;
t72 = qJD(6) * (t37 - t39);
t38 = t44 ^ 2;
t46 = cos(qJ(5));
t40 = t46 ^ 2;
t100 = t38 - t40;
t71 = t100 * qJD(5);
t41 = sin(pkin(9));
t42 = cos(pkin(9));
t27 = -t41 * qJD(2) + t42 * qJD(3);
t117 = 0.2e1 * t27;
t116 = pkin(5) * t44;
t115 = pkin(8) * t46;
t26 = t42 * qJD(2) + t41 * qJD(3);
t114 = t26 * t41;
t113 = t26 * t42;
t112 = t27 * t41;
t111 = t27 * t42;
t110 = t27 * t45;
t109 = t38 * t27;
t108 = t38 * t42;
t107 = t43 * t46;
t106 = t45 * t46;
t105 = t46 * t27;
t104 = pkin(1) + qJ(3);
t103 = pkin(3) + qJ(2);
t102 = t41 * t103 - t42 * t104;
t99 = qJD(6) * t43;
t98 = qJD(6) * t44;
t97 = qJD(6) * t45;
t96 = qJD(6) * t46;
t95 = t44 * qJD(5);
t94 = t46 * qJD(5);
t93 = qJ(2) * qJD(2);
t92 = -0.2e1 * pkin(5) * qJD(6);
t25 = pkin(7) + t102;
t91 = t25 * t107;
t90 = t41 * t107;
t89 = t42 * t107;
t88 = t25 * t106;
t87 = t41 * t106;
t86 = t42 * t106;
t85 = pkin(8) * t97;
t84 = t38 * t99;
t83 = t43 * t96;
t82 = t41 * t97;
t81 = t45 * t96;
t80 = t37 * t94;
t79 = t43 * t97;
t78 = t44 * t94;
t31 = t41 * t95;
t77 = t42 * t95;
t76 = t45 * t95;
t75 = t45 * t94;
t74 = t41 * t94;
t73 = t42 * t94;
t70 = 0.2e1 * t78;
t69 = t43 * t75;
t68 = t38 * t79;
t67 = t42 * t70;
t66 = -t46 * pkin(5) - t44 * pkin(8);
t65 = -t115 + t116;
t54 = t42 * t103 + t41 * t104;
t24 = -pkin(4) - t54;
t49 = t24 + t66;
t3 = t45 * t49 - t91;
t4 = t43 * t49 + t88;
t64 = -t3 * t45 - t4 * t43;
t63 = t3 * t43 - t4 * t45;
t18 = -t43 * t42 + t87;
t58 = t45 * t42 + t90;
t62 = -t18 * t43 + t45 * t58;
t61 = -t18 * t45 - t43 * t58;
t17 = t45 * t41 - t89;
t19 = t43 * t41 + t86;
t60 = -t17 * t45 - t19 * t43;
t59 = t17 * t43 - t19 * t45;
t57 = -t25 * t94 + t44 * t27;
t56 = t25 * t95 + t105;
t20 = t43 * t98 - t75;
t21 = t76 + t83;
t55 = t43 * t94 + t44 * t97;
t48 = qJD(6) * t49;
t50 = t65 * qJD(5) - t26;
t1 = t21 * t25 - t43 * t50 + (t105 - t48) * t45;
t2 = (-t25 * t96 + t50) * t45 + (-t48 + t56) * t43;
t53 = t64 * qJD(6) - t1 * t45 - t2 * t43;
t5 = t58 * qJD(6) + t41 * t76;
t7 = -t18 * qJD(6) + t43 * t31;
t52 = t62 * qJD(6) - t7 * t43 - t5 * t45;
t6 = t21 * t42 - t82;
t8 = -t19 * qJD(6) + t43 * t77;
t51 = t60 * qJD(6) - t8 * t43 - t6 * t45;
t47 = 0.2e1 * qJD(2);
t33 = t39 * t94;
t30 = -0.2e1 * t78;
t29 = t39 * t78;
t28 = t37 * t78;
t23 = t43 * t95 - t81;
t14 = t27 * t108;
t13 = t41 * t109;
t11 = t44 * t72 - t69;
t9 = t25 * t109;
t10 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0.2e1 * t93, 0, 0, 0, 0, 0, 0, t47, 0, 0.2e1 * qJD(3), 0.2e1 * t104 * qJD(3) + 0.2e1 * t93, 0, 0, 0, 0, 0, 0, 0.2e1 * t26, t117, 0, -0.2e1 * t102 * t27 + 0.2e1 * t54 * t26, t70, -0.2e1 * t71, 0, t30, 0, 0, 0.2e1 * t24 * t95 + 0.2e1 * t26 * t46, 0.2e1 * t24 * t94 - 0.2e1 * t26 * t44 (-t38 - t40) * t117, -0.2e1 * t40 * t25 * t27 - 0.2e1 * t24 * t26 - 0.2e1 * t9, 0.2e1 * t29 - 0.2e1 * t68, t69 * t118 + 0.2e1 * t38 * t72, 0.2e1 * t44 * t83 + 0.2e1 * t45 * t71, 0.2e1 * t28 + 0.2e1 * t68, -0.2e1 * t43 * t71 + 0.2e1 * t44 * t81, t30, -0.2e1 * t2 * t46 + 0.2e1 * (t25 * t97 - t43 * t27) * t38 + 0.2e1 * (t3 + 0.2e1 * t91) * t95, -0.2e1 * t1 * t46 + 0.2e1 * (-t25 * t99 - t110) * t38 + 0.2e1 * (-t4 + 0.2e1 * t88) * t95, 0.2e1 * t64 * t94 + 0.2e1 * (qJD(6) * t63 + t1 * t43 - t2 * t45) * t44, 0.2e1 * t25 ^ 2 * t78 - 0.2e1 * t4 * t1 + 0.2e1 * t3 * t2 - 0.2e1 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111 - t114, 0, 0, 0, 0, 0, 0, t31, t74, 0, -t40 * t111 - t114 - t14, 0, 0, 0, 0, 0, 0, t97 * t108 - t8 * t46 + (t17 + 0.2e1 * t89) * t95, -t42 * t84 - t6 * t46 + (-t19 + 0.2e1 * t86) * t95, t60 * t94 + (qJD(6) * t59 + t43 * t6 - t45 * t8) * t44, -t1 * t19 + t2 * t17 + t25 * t67 + t3 * t8 - t4 * t6 - t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t42 ^ 2 * t78 + 0.2e1 * t17 * t8 - 0.2e1 * t19 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t112 + t113, 0, 0, 0, 0, 0, 0, -t77, -t73, 0, -t40 * t112 + t113 - t13, 0, 0, 0, 0, 0, 0, t38 * t82 - t7 * t46 + (-t58 + 0.2e1 * t90) * t95, -t41 * t84 - t5 * t46 + (-t18 + 0.2e1 * t87) * t95, t62 * t94 + (qJD(6) * t61 + t43 * t5 - t45 * t7) * t44, t25 * t41 * t70 - t1 * t18 - t2 * t58 + t3 * t7 - t4 * t5 - t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t7 - t6 * t18 - t19 * t5 + t41 * t67 - t58 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t41 ^ 2 * t78 - 0.2e1 * t18 * t5 - 0.2e1 * t58 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t100 * t25 - t63 * t46) * qJD(5) + (t53 + t105) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51 * t44 + (t100 * t42 - t59 * t46) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52 * t44 + (t100 * t41 - t61 * t46) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t28 + 0.2e1 * t29 - 0.2e1 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, -t95, 0, t57, t56, 0, 0, -t11, t79 * t118 + t33 - t80, t23, t11, t21, 0 (t85 + (-t43 * pkin(5) - t45 * t25) * qJD(5)) * t46 + (-pkin(8) * qJD(5) * t43 + t110 + (-t45 * pkin(5) + t43 * t25) * qJD(6)) * t44 (t66 * qJD(5) + t25 * t98) * t45 + (qJD(6) * t65 - t57) * t43, t53, pkin(5) * t57 + pkin(8) * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, t77, 0, 0, 0, 0, 0, 0, 0, 0, t20 * t42, t55 * t42, t51, -pkin(5) * t73 + pkin(8) * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t31, 0, 0, 0, 0, 0, 0, 0, 0, t20 * t41, t55 * t41, t52, -pkin(5) * t74 + pkin(8) * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t94, 0, 0, 0, 0, 0, 0, 0, 0, -t21, t23, t33 + t80 (-t116 + (t37 + t39) * t115) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t79, -0.2e1 * t72, 0, -0.2e1 * t79, 0, 0, t43 * t92, t45 * t92, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, 0, -t55, t95, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, -t99, 0, -t85, pkin(8) * t99, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t10;
