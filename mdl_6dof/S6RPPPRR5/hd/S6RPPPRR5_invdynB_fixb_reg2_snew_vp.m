% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPPRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:50:42
% EndTime: 2019-05-05 13:50:53
% DurationCPUTime: 5.36s
% Computational Cost: add. (18277->443), mult. (31752->619), div. (0->0), fcn. (15086->8), ass. (0->289)
t444 = sin(pkin(9));
t445 = cos(pkin(9));
t455 = qJD(1) ^ 2;
t404 = qJDD(1) * t445 - t444 * t455;
t441 = g(3) - qJDD(4);
t511 = pkin(2) + qJ(4);
t338 = t404 * t511 + t444 * t441;
t450 = sin(qJ(1));
t453 = cos(qJ(1));
t405 = qJDD(1) * t444 + t445 * t455;
t461 = -t405 * t511 + t441 * t445;
t476 = t453 * t404 - t405 * t450;
t524 = pkin(6) * t476 + t338 * t453 + t450 * t461;
t346 = t404 * t450 + t453 * t405;
t523 = -pkin(6) * t346 - t338 * t450 + t453 * t461;
t412 = t450 * g(1) - t453 * g(2);
t468 = -qJDD(2) + t412;
t456 = (2 * qJD(3) * qJD(1)) + t468;
t512 = pkin(1) + qJ(3);
t477 = t512 * qJDD(1);
t522 = t456 + t477;
t448 = sin(qJ(6));
t449 = sin(qJ(5));
t486 = qJD(1) * qJD(5);
t425 = t449 * t486;
t452 = cos(qJ(5));
t429 = t452 * qJDD(1);
t402 = t429 - t425;
t392 = -qJDD(6) + t402;
t451 = cos(qJ(6));
t489 = qJD(1) * t449;
t395 = -t451 * qJD(5) + t448 * t489;
t397 = qJD(5) * t448 + t451 * t489;
t504 = t395 * t397;
t460 = -t392 - t504;
t521 = t448 * t460;
t520 = t451 * t460;
t488 = qJD(1) * t452;
t421 = -qJD(6) + t488;
t376 = t395 * t421;
t478 = t452 * t486;
t484 = qJDD(1) * t449;
t401 = t478 + t484;
t479 = t395 * qJD(6) - t448 * qJDD(5) - t451 * t401;
t308 = t479 - t376;
t475 = -t451 * qJDD(5) + t448 * t401;
t304 = (qJD(6) + t421) * t397 + t475;
t413 = t453 * g(1) + t450 * g(2);
t438 = qJDD(1) * qJ(2);
t462 = t413 - t438;
t518 = t455 * t512 - qJDD(3) + t462;
t510 = qJ(2) + pkin(3);
t356 = -t455 * t510 - t522;
t485 = qJD(2) * qJD(1);
t436 = 2 * t485;
t357 = qJDD(1) * pkin(3) + t436 - t518;
t302 = t444 * t356 - t445 * t357;
t303 = t445 * t356 + t444 * t357;
t464 = t444 * t302 + t303 * t445;
t465 = -t302 * t445 + t303 * t444;
t216 = t450 * t465 - t453 * t464;
t217 = t450 * t464 + t453 * t465;
t390 = t395 ^ 2;
t391 = t397 ^ 2;
t419 = t421 ^ 2;
t516 = pkin(5) * t449;
t515 = pkin(5) * t452;
t482 = qJDD(1) * t453;
t407 = -t450 * t455 + t482;
t514 = pkin(6) * t407;
t483 = qJDD(1) * t450;
t408 = t453 * t455 + t483;
t513 = pkin(6) * t408;
t509 = qJDD(1) * pkin(1);
t293 = -pkin(4) * t455 + qJDD(1) * pkin(7) + t303;
t471 = -pkin(8) * t449 - t515;
t399 = t471 * qJD(1);
t424 = t452 * t441;
t454 = qJD(5) ^ 2;
t267 = t424 - qJDD(5) * pkin(5) - t454 * pkin(8) + (qJD(1) * t399 + t293) * t449;
t508 = t267 * t448;
t507 = t267 * t451;
t323 = t392 - t504;
t506 = t323 * t448;
t505 = t323 * t451;
t420 = t452 * t455 * t449;
t410 = qJDD(5) + t420;
t501 = t410 * t449;
t500 = t410 * t452;
t411 = qJDD(5) - t420;
t499 = t411 * t449;
t498 = t411 * t452;
t497 = t421 * t448;
t496 = t421 * t451;
t439 = t449 ^ 2;
t495 = t439 * t455;
t292 = -qJDD(1) * pkin(4) - t455 * pkin(7) + t302;
t493 = t449 * t292;
t492 = t452 * t292;
t491 = t455 * qJ(2);
t466 = -t402 + t425;
t467 = t401 + t478;
t263 = pkin(5) * t466 - pkin(8) * t467 + t292;
t283 = t452 * t293 - t449 * t441;
t268 = -pkin(5) * t454 + qJDD(5) * pkin(8) + t399 * t488 + t283;
t227 = t448 * t263 + t451 * t268;
t440 = t452 ^ 2;
t490 = t439 + t440;
t481 = t449 * t504;
t480 = t452 * t504;
t226 = -t451 * t263 + t268 * t448;
t282 = t293 * t449 + t424;
t242 = t449 * t282 + t452 * t283;
t367 = t491 + t522;
t368 = -(2 * t485) + t518;
t310 = t453 * t367 - t368 * t450;
t377 = -pkin(1) * t455 + t436 - t462;
t378 = t468 + t491 + t509;
t321 = t453 * t377 - t378 * t450;
t360 = -t412 * t450 - t453 * t413;
t432 = t440 * t455;
t474 = t432 + t495;
t473 = t444 * t420;
t472 = t445 * t420;
t470 = g(3) * t450 + t514;
t469 = g(3) * t453 - t513;
t200 = -t226 * t451 + t227 * t448;
t201 = t226 * t448 + t227 * t451;
t241 = t282 * t452 - t283 * t449;
t463 = t367 * t450 + t368 * t453;
t320 = t377 * t450 + t378 * t453;
t359 = t412 * t453 - t413 * t450;
t459 = -t413 + 0.2e1 * t438 + t436;
t433 = -pkin(2) * t455 + g(3);
t458 = -pkin(2) * t483 + t453 * t433 - t513;
t418 = -t432 - t454;
t417 = t432 - t454;
t416 = -t454 - t495;
t415 = t454 - t495;
t409 = t432 - t495;
t406 = t490 * qJDD(1);
t403 = t429 - 0.2e1 * t425;
t400 = 0.2e1 * t478 + t484;
t393 = t490 * t486;
t375 = -t391 + t419;
t374 = t390 - t419;
t373 = t401 * t452 - t439 * t486;
t372 = -t402 * t449 - t440 * t486;
t370 = -qJDD(5) * t444 - t393 * t445;
t369 = -qJDD(5) * t445 + t393 * t444;
t366 = -t416 * t449 - t498;
t365 = -t415 * t449 + t500;
t364 = t418 * t452 - t501;
t363 = t417 * t452 - t499;
t362 = t416 * t452 - t499;
t361 = t418 * t449 + t500;
t358 = -pkin(2) * t482 - t433 * t450 - t514;
t354 = -t391 + t390;
t353 = -t391 - t419;
t352 = t406 * t445 - t444 * t474;
t351 = t444 * t406 + t445 * t474;
t350 = -pkin(2) * t367 + qJ(2) * g(3);
t342 = -t400 * t449 + t403 * t452;
t341 = -pkin(2) * t368 + g(3) * t512;
t336 = -t419 - t390;
t334 = -qJD(6) * t397 - t475;
t333 = -t373 * t445 + t473;
t332 = -t372 * t445 - t473;
t331 = t373 * t444 + t472;
t330 = t372 * t444 - t472;
t329 = -t365 * t445 - t444 * t484;
t328 = -t363 * t445 - t429 * t444;
t327 = t365 * t444 - t445 * t484;
t326 = t363 * t444 - t429 * t445;
t322 = t390 + t391;
t319 = t366 * t445 + t444 * t400;
t318 = t364 * t445 - t444 * t403;
t317 = t366 * t444 - t400 * t445;
t316 = t364 * t444 + t403 * t445;
t315 = (t395 * t451 - t397 * t448) * t421;
t314 = (-t395 * t448 - t397 * t451) * t421;
t313 = -t342 * t445 + t409 * t444;
t312 = t342 * t444 + t409 * t445;
t309 = t376 + t479;
t305 = (-qJD(6) + t421) * t397 - t475;
t301 = t397 * t497 - t451 * t479;
t300 = t397 * t496 + t448 * t479;
t299 = -t334 * t448 - t395 * t496;
t298 = -t334 * t451 + t395 * t497;
t297 = t351 * t453 + t352 * t450;
t296 = t351 * t450 - t352 * t453;
t294 = t315 * t452 - t392 * t449;
t291 = t374 * t451 + t506;
t290 = -t375 * t448 + t520;
t289 = -t374 * t448 + t505;
t288 = -t375 * t451 - t521;
t285 = -t353 * t448 + t505;
t284 = t353 * t451 + t506;
t280 = t336 * t451 - t521;
t279 = t336 * t448 + t520;
t276 = t301 * t452 + t481;
t275 = t299 * t452 - t481;
t274 = t317 * t453 + t319 * t450;
t273 = t316 * t453 + t318 * t450;
t272 = t317 * t450 - t319 * t453;
t271 = t316 * t450 - t318 * t453;
t270 = -pkin(7) * t362 + t492;
t269 = -pkin(7) * t361 + t493;
t265 = -pkin(4) * t362 + t283;
t264 = -pkin(4) * t361 + t282;
t260 = -t304 * t451 - t309 * t448;
t259 = t305 * t451 + t308 * t448;
t258 = -t304 * t448 + t309 * t451;
t257 = -t305 * t448 + t308 * t451;
t256 = -t294 * t445 + t314 * t444;
t255 = t294 * t444 + t314 * t445;
t253 = t291 * t452 - t304 * t449;
t252 = t290 * t452 - t309 * t449;
t247 = t285 * t452 - t308 * t449;
t246 = t285 * t449 + t308 * t452;
t245 = t280 * t452 - t305 * t449;
t244 = t280 * t449 + t305 * t452;
t243 = t259 * t452 - t354 * t449;
t239 = -t276 * t445 + t300 * t444;
t238 = -t275 * t445 + t298 * t444;
t237 = t276 * t444 + t300 * t445;
t236 = t275 * t444 + t298 * t445;
t235 = t260 * t452 - t322 * t449;
t234 = t260 * t449 + t322 * t452;
t233 = -pkin(8) * t284 + t507;
t232 = -pkin(8) * t279 + t508;
t231 = -t253 * t445 + t289 * t444;
t230 = -t252 * t445 + t288 * t444;
t229 = t253 * t444 + t289 * t445;
t228 = t252 * t444 + t288 * t445;
t225 = t247 * t445 + t444 * t284;
t224 = t247 * t444 - t284 * t445;
t223 = t444 * t241 + t352 * t511;
t222 = -t445 * t241 + t351 * t511;
t221 = t245 * t445 + t444 * t279;
t220 = t245 * t444 - t279 * t445;
t219 = t242 * t445 + t444 * t292;
t218 = t242 * t444 - t292 * t445;
t215 = t441 * t512 + t465 * t511;
t214 = t441 * t510 + t464 * t511;
t213 = -t243 * t445 + t257 * t444;
t212 = t243 * t444 + t257 * t445;
t211 = t235 * t445 + t444 * t258;
t210 = t235 * t444 - t258 * t445;
t209 = -pkin(5) * t284 + t227;
t208 = -pkin(5) * t279 + t226;
t207 = t444 * t265 - t445 * t270 + t317 * t511 - t362 * t512;
t206 = t444 * t264 - t445 * t269 + t316 * t511 - t361 * t512;
t205 = t445 * t265 + t444 * t270 + t319 * t511 - t362 * t510;
t204 = t445 * t264 + t444 * t269 + t318 * t511 - t361 * t510;
t203 = -pkin(4) * t246 - pkin(5) * t308 - pkin(8) * t285 - t508;
t202 = -pkin(4) * t244 - pkin(5) * t305 - pkin(8) * t280 + t507;
t198 = t224 * t453 + t225 * t450;
t197 = t224 * t450 - t225 * t453;
t196 = t220 * t453 + t221 * t450;
t195 = t220 * t450 - t221 * t453;
t194 = t218 * t453 + t219 * t450;
t193 = t218 * t450 - t219 * t453;
t192 = t201 * t452 + t267 * t449;
t191 = t201 * t449 - t267 * t452;
t190 = -pkin(8) * t258 - t200;
t189 = t210 * t453 + t211 * t450;
t188 = t210 * t450 - t211 * t453;
t187 = -pkin(7) * t246 - t209 * t449 + t233 * t452;
t186 = -pkin(7) * t244 - t208 * t449 + t232 * t452;
t185 = -pkin(4) * t234 - pkin(5) * t322 - pkin(8) * t260 - t201;
t184 = -pkin(7) * t234 + t190 * t452 + t258 * t516;
t183 = t192 * t445 + t444 * t200;
t182 = t192 * t444 - t200 * t445;
t181 = -pkin(4) * t191 + pkin(5) * t267 - pkin(8) * t201;
t180 = t511 * t218 - (-pkin(4) * t444 + pkin(7) * t445 - t512) * t241;
t179 = t511 * t219 - (-pkin(4) * t445 - pkin(7) * t444 - t510) * t241;
t178 = -pkin(7) * t191 + (-pkin(8) * t452 + t516) * t200;
t177 = -t445 * t187 + t444 * t203 + t224 * t511 - t246 * t512;
t176 = t444 * t187 + t445 * t203 + t225 * t511 - t246 * t510;
t175 = -t445 * t186 + t444 * t202 + t220 * t511 - t244 * t512;
t174 = t444 * t186 + t445 * t202 + t221 * t511 - t244 * t510;
t173 = t182 * t453 + t183 * t450;
t172 = t182 * t450 - t183 * t453;
t171 = -t445 * t184 + t444 * t185 + t210 * t511 - t234 * t512;
t170 = t444 * t184 + t445 * t185 + t211 * t511 - t234 * t510;
t169 = -t445 * t178 + t444 * t181 + t182 * t511 - t191 * t512;
t168 = t444 * t178 + t445 * t181 + t183 * t511 - t191 * t510;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t408, -t407, 0, t360, 0, 0, 0, 0, 0, 0, 0, t408, t407, t321, 0, 0, 0, 0, 0, 0, t407, 0, -t408, -t463, 0, 0, 0, 0, 0, 0, t476, -t346, 0, t217, 0, 0, 0, 0, 0, 0, t273, t274, t297, t194, 0, 0, 0, 0, 0, 0, t196, t198, t189, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t407, -t408, 0, t359, 0, 0, 0, 0, 0, 0, 0, -t407, t408, t320, 0, 0, 0, 0, 0, 0, t408, 0, t407, t310, 0, 0, 0, 0, 0, 0, t346, t476, 0, t216, 0, 0, 0, 0, 0, 0, t271, t272, t296, t193, 0, 0, 0, 0, 0, 0, t195, t197, t188, t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, 0, 0, 0, 0, 0, 0, t361, t362, 0, -t241, 0, 0, 0, 0, 0, 0, t244, t246, t234, t191; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t407, 0, -t408, 0, -t470, -t469, -t359, -pkin(6) * t359, 0, -t407, t408, 0, 0, 0, -t320, t470, t469, -pkin(6) * t320 + (-pkin(1) * t450 + qJ(2) * t453) * g(3), 0, -t408, 0, 0, -t407, 0, t458, t310, t358, -pkin(6) * t310 - t341 * t450 + t350 * t453, 0, 0, t346, 0, t476, 0, t523, -t524, -t216, -pkin(6) * t216 + t214 * t453 - t215 * t450, t331 * t453 - t333 * t450, t312 * t453 - t313 * t450, t327 * t453 - t329 * t450, t330 * t453 - t332 * t450, t326 * t453 - t328 * t450, t369 * t453 - t370 * t450, -pkin(6) * t271 + t204 * t453 - t206 * t450, -pkin(6) * t272 + t205 * t453 - t207 * t450, -pkin(6) * t296 - t222 * t450 + t223 * t453, -pkin(6) * t193 + t179 * t453 - t180 * t450, t237 * t453 - t239 * t450, t212 * t453 - t213 * t450, t228 * t453 - t230 * t450, t236 * t453 - t238 * t450, t229 * t453 - t231 * t450, t255 * t453 - t256 * t450, -pkin(6) * t195 + t174 * t453 - t175 * t450, -pkin(6) * t197 + t176 * t453 - t177 * t450, -pkin(6) * t188 + t170 * t453 - t171 * t450, -pkin(6) * t172 + t168 * t453 - t169 * t450; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t408, 0, t407, 0, t469, -t470, t360, pkin(6) * t360, 0, -t408, -t407, 0, 0, 0, t321, -t469, t470, pkin(6) * t321 + (pkin(1) * t453 + qJ(2) * t450) * g(3), 0, t407, 0, 0, -t408, 0, -t358, t463, t458, -pkin(6) * t463 + t341 * t453 + t350 * t450, 0, 0, -t476, 0, t346, 0, t524, t523, t217, pkin(6) * t217 + t214 * t450 + t215 * t453, t331 * t450 + t333 * t453, t312 * t450 + t313 * t453, t327 * t450 + t329 * t453, t330 * t450 + t332 * t453, t326 * t450 + t328 * t453, t369 * t450 + t370 * t453, pkin(6) * t273 + t204 * t450 + t206 * t453, pkin(6) * t274 + t205 * t450 + t207 * t453, pkin(6) * t297 + t222 * t453 + t223 * t450, pkin(6) * t194 + t179 * t450 + t180 * t453, t237 * t450 + t239 * t453, t212 * t450 + t213 * t453, t228 * t450 + t230 * t453, t236 * t450 + t238 * t453, t229 * t450 + t231 * t453, t255 * t450 + t256 * t453, pkin(6) * t196 + t174 * t450 + t175 * t453, pkin(6) * t198 + t176 * t450 + t177 * t453, pkin(6) * t189 + t170 * t450 + t171 * t453, pkin(6) * t173 + t168 * t450 + t169 * t453; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t412, t413, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t468 - 0.2e1 * t509, t459, pkin(1) * t378 + qJ(2) * t377, 0, 0, 0, qJDD(1), 0, 0, qJDD(3) + t459, 0, t456 + 0.2e1 * t477, -qJ(2) * t368 + t367 * t512, 0, 0, 0, 0, 0, qJDD(1), t404 * t510 + t405 * t512 - t302, t404 * t512 - t405 * t510 - t303, 0, -t464 * t512 + t465 * t510, t467 * t449, t400 * t452 + t403 * t449, t415 * t452 + t501, -t466 * t452, t417 * t449 + t498, 0, pkin(4) * t403 + pkin(7) * t364 + t316 * t510 - t318 * t512 - t492, -pkin(4) * t400 + pkin(7) * t366 + t317 * t510 - t319 * t512 + t493, pkin(4) * t474 + pkin(7) * t406 + t351 * t510 - t352 * t512 + t242, -pkin(4) * t292 + pkin(7) * t242 + t218 * t510 - t219 * t512, t301 * t449 - t480, t259 * t449 + t354 * t452, t290 * t449 + t309 * t452, t299 * t449 + t480, t291 * t449 + t304 * t452, t315 * t449 + t392 * t452, -pkin(4) * t279 + pkin(7) * t245 + t452 * t208 + t220 * t510 - t221 * t512 + t449 * t232, -pkin(4) * t284 + pkin(7) * t247 + t452 * t209 + t224 * t510 - t225 * t512 + t449 * t233, pkin(7) * t235 + t449 * t190 + (-pkin(4) - t515) * t258 - t512 * t211 + t510 * t210, pkin(7) * t192 - t512 * t183 + t510 * t182 + (-pkin(4) + t471) * t200;];
tauB_reg  = t1;
