% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RPPPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta4]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RPPPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:50:53
% EndTime: 2019-05-05 13:51:05
% DurationCPUTime: 11.83s
% Computational Cost: add. (42123->619), mult. (73081->688), div. (0->0), fcn. (34374->8), ass. (0->375)
t892 = sin(pkin(9));
t893 = cos(pkin(9));
t904 = qJD(1) ^ 2;
t846 = qJDD(1) * t892 + t893 * t904;
t888 = g(3) - qJDD(4);
t988 = -qJ(4) * t846 + t893 * t888;
t1047 = pkin(2) * t846 - t988;
t845 = qJDD(1) * t893 - t892 * t904;
t1035 = -qJ(4) * t845 - t892 * t888;
t756 = -pkin(2) * t845 + t1035;
t899 = sin(qJ(1));
t902 = cos(qJ(1));
t771 = t902 * t845 - t846 * t899;
t1049 = -pkin(6) * t771 + t1047 * t899 + t756 * t902;
t770 = t845 * t899 + t902 * t846;
t1048 = -pkin(6) * t770 - t1047 * t902 + t756 * t899;
t1046 = 2 * qJD(1);
t1014 = pkin(1) + qJ(3);
t1034 = t1014 * qJDD(1);
t854 = t899 * g(1) - t902 * g(2);
t936 = -qJDD(2) + t854;
t912 = (qJD(3) * t1046) + t936;
t778 = (-pkin(3) - qJ(2)) * t904 - t1034 - t912;
t1036 = t1014 * t904;
t885 = qJDD(1) * qJ(2);
t855 = t902 * g(1) + t899 * g(2);
t925 = (qJD(2) * t1046) - t855;
t916 = qJDD(3) + t925;
t910 = t885 + t916;
t779 = qJDD(1) * pkin(3) - t1036 + t910;
t719 = t892 * t778 - t893 * t779;
t720 = t893 * t778 + t892 * t779;
t648 = t719 * t893 - t892 * t720;
t930 = t892 * t719 + t720 * t893;
t1045 = t648 * t899 + t902 * t930;
t1044 = -t648 * t902 + t899 * t930;
t708 = -pkin(4) * t904 + qJDD(1) * pkin(7) + t720;
t901 = cos(qJ(5));
t870 = t901 * t888;
t898 = sin(qJ(5));
t690 = t708 * t898 + t870;
t691 = t901 * t708 - t898 * t888;
t632 = t690 * t901 - t691 * t898;
t941 = pkin(4) * t893 + pkin(7) * t892;
t1042 = t632 * t941;
t897 = sin(qJ(6));
t900 = cos(qJ(6));
t985 = qJD(1) * t898;
t832 = -t900 * qJD(5) + t897 * t985;
t834 = qJD(5) * t897 + t900 * t985;
t1006 = t834 * t832;
t983 = qJD(1) * qJD(5);
t871 = t898 * t983;
t978 = t901 * qJDD(1);
t958 = -t871 + t978;
t825 = -qJDD(6) + t958;
t911 = -t825 - t1006;
t1041 = t897 * t911;
t1039 = t900 * t911;
t707 = -qJDD(1) * pkin(4) - t904 * pkin(7) + t719;
t872 = t901 * t983;
t979 = t898 * qJDD(1);
t842 = t872 + t979;
t934 = t842 + t872;
t666 = -t934 * pkin(8) + (-t958 + t871) * pkin(5) + t707;
t1026 = qJD(5) ^ 2;
t1019 = pkin(5) * t901;
t939 = pkin(8) * t898 + t1019;
t840 = t939 * qJD(1);
t984 = qJD(1) * t901;
t676 = -t1026 * pkin(5) + qJDD(5) * pkin(8) - t840 * t984 + t691;
t609 = -t900 * t666 + t676 * t897;
t610 = t666 * t897 + t676 * t900;
t570 = t609 * t897 + t900 * t610;
t675 = t870 - qJDD(5) * pkin(5) - t1026 * pkin(8) + (-qJD(1) * t840 + t708) * t898;
t565 = t570 * t901 + t675 * t898;
t569 = -t609 * t900 + t610 * t897;
t547 = t565 * t892 - t569 * t893;
t907 = pkin(7) * t565 + (-pkin(4) - t939) * t569;
t906 = pkin(3) * t547 + t907;
t633 = t898 * t690 + t901 * t691;
t1013 = pkin(2) + qJ(4);
t1037 = t1013 * t648;
t1020 = pkin(5) * t898;
t564 = t570 * t898 - t675 * t901;
t539 = -pkin(7) * t564 + (-pkin(8) * t901 + t1020) * t569;
t940 = -pkin(5) * t675 + pkin(8) * t570;
t544 = -pkin(4) * t564 - t940;
t970 = -t893 * t539 + t892 * t544;
t1033 = -t1013 * t547 - t970;
t863 = -qJD(6) + t984;
t959 = t900 * qJDD(5) - t897 * t842;
t723 = (-qJD(6) - t863) * t834 + t959;
t926 = -t897 * qJDD(5) - t900 * t842;
t754 = -qJD(6) * t832 - t926;
t805 = t832 * t863;
t725 = t754 - t805;
t662 = t723 * t900 + t725 * t897;
t823 = t832 ^ 2;
t824 = t834 ^ 2;
t740 = t823 + t824;
t624 = t662 * t901 - t740 * t898;
t660 = t723 * t897 - t725 * t900;
t588 = t624 * t892 - t660 * t893;
t561 = -pkin(8) * t660 - t569;
t623 = t662 * t898 + t740 * t901;
t551 = -pkin(7) * t623 + t660 * t1020 + t561 * t901;
t909 = pkin(5) * t740 + pkin(8) * t662 + t570;
t553 = -pkin(4) * t623 - t909;
t969 = -t893 * t551 + t892 * t553;
t1032 = -t1013 * t588 - t969;
t596 = t633 * t892 - t707 * t893;
t1021 = pkin(4) * t632;
t619 = t892 * t1021;
t1031 = t1013 * t596 + t619;
t861 = t863 ^ 2;
t755 = -t861 - t823;
t688 = t755 * t900 - t1041;
t753 = -qJD(6) * t834 + t959;
t806 = t863 * t834;
t722 = t753 + t806;
t639 = t688 * t901 - t722 * t898;
t687 = t755 * t897 + t1039;
t600 = t639 * t892 - t687 * t893;
t581 = -pkin(5) * t687 + t609;
t1010 = t675 * t897;
t616 = -pkin(8) * t687 + t1010;
t638 = t688 * t898 + t722 * t901;
t556 = -pkin(7) * t638 - t581 * t898 + t616 * t901;
t1009 = t675 * t900;
t915 = pkin(5) * t722 + pkin(8) * t688 - t1009;
t572 = -pkin(4) * t638 - t915;
t968 = -t893 * t556 + t892 * t572;
t1030 = -t1013 * t600 - t968;
t742 = t825 - t1006;
t1007 = t742 * t900;
t775 = -t824 - t861;
t695 = -t775 * t897 + t1007;
t726 = (qJD(6) - t863) * t832 + t926;
t643 = t695 * t901 - t726 * t898;
t1008 = t742 * t897;
t694 = t775 * t900 + t1008;
t606 = t643 * t892 - t694 * t893;
t587 = -pkin(5) * t694 + t610;
t618 = -pkin(8) * t694 + t1009;
t642 = t695 * t898 + t726 * t901;
t559 = -pkin(7) * t642 - t587 * t898 + t618 * t901;
t914 = pkin(5) * t726 + pkin(8) * t695 + t1010;
t574 = -pkin(4) * t642 - t914;
t967 = -t893 * t559 + t892 * t574;
t1029 = -t1013 * t606 - t967;
t862 = t901 * t904 * t898;
t852 = qJDD(5) + t862;
t1003 = t852 * t898;
t887 = t901 ^ 2;
t877 = t887 * t904;
t860 = -t877 - t1026;
t792 = t860 * t901 - t1003;
t843 = -0.2e1 * t871 + t978;
t736 = t792 * t892 + t843 * t893;
t1002 = t852 * t901;
t788 = t860 * t898 + t1002;
t669 = -pkin(4) * t788 + t690;
t699 = t898 * t707;
t677 = -pkin(7) * t788 + t699;
t965 = t892 * t669 - t893 * t677;
t1028 = -t1013 * t736 - t965;
t853 = qJDD(5) - t862;
t1000 = t853 * t901;
t886 = t898 ^ 2;
t997 = t886 * t904;
t858 = -t997 - t1026;
t794 = -t858 * t898 - t1000;
t841 = 0.2e1 * t872 + t979;
t737 = t794 * t892 - t841 * t893;
t1001 = t853 * t898;
t790 = t858 * t901 - t1001;
t670 = -pkin(4) * t790 + t691;
t700 = t901 * t707;
t678 = -pkin(7) * t790 + t700;
t964 = t892 * t670 - t893 * t678;
t1027 = -t1013 * t737 - t964;
t1025 = pkin(1) * t904;
t995 = t904 * qJ(2);
t905 = t912 + t995;
t795 = t905 + t1034;
t1024 = pkin(2) * t795;
t980 = qJDD(1) * t902;
t848 = -t899 * t904 + t980;
t1017 = pkin(6) * t848;
t981 = qJDD(1) * t899;
t849 = t902 * t904 + t981;
t1016 = pkin(6) * t849;
t1015 = pkin(7) * t893;
t1011 = qJDD(1) * pkin(1);
t999 = t863 * t897;
t998 = t863 * t900;
t597 = t633 * t893 + t892 * t707;
t993 = pkin(3) * t632 + qJ(4) * t597;
t986 = t886 + t887;
t847 = t986 * qJDD(1);
t850 = t877 + t997;
t774 = t847 * t893 - t892 * t850;
t992 = qJ(4) * t774 + t892 * t632;
t991 = -pkin(4) * t707 + pkin(7) * t633;
t987 = pkin(3) * t888 + qJ(4) * t930;
t977 = t898 * t1006;
t976 = t901 * t1006;
t975 = -pkin(4) * t841 + pkin(7) * t794 + t699;
t974 = pkin(4) * t843 + pkin(7) * t792 - t700;
t973 = -pkin(3) * t596 - t991;
t972 = pkin(3) * t846 + t720;
t971 = qJ(3) - t1015;
t773 = t847 * t892 + t850 * t893;
t966 = -qJ(4) * t773 + t632 * t893;
t908 = -t885 - t925;
t796 = -qJDD(3) + t908 + t1036;
t963 = t902 * t795 - t796 * t899;
t807 = t908 + t1025;
t809 = t936 + t995 + t1011;
t962 = -t902 * t807 - t809 * t899;
t960 = -t854 * t899 - t902 * t855;
t957 = t892 * t862;
t956 = t893 * t862;
t548 = t565 * t893 + t892 * t569;
t955 = -pkin(3) * t564 + qJ(4) * t548 + t892 * t539 + t893 * t544;
t589 = t624 * t893 + t892 * t660;
t954 = -pkin(3) * t623 + qJ(4) * t589 + t892 * t551 + t893 * t553;
t601 = t639 * t893 + t892 * t687;
t953 = -pkin(3) * t638 + qJ(4) * t601 + t892 * t556 + t893 * t572;
t607 = t643 * t893 + t892 * t694;
t952 = -pkin(3) * t642 + qJ(4) * t607 + t892 * t559 + t893 * t574;
t951 = -pkin(4) * t687 + pkin(7) * t639 + t901 * t581 + t898 * t616;
t950 = -pkin(4) * t694 + pkin(7) * t643 + t901 * t587 + t898 * t618;
t738 = t792 * t893 - t892 * t843;
t949 = -pkin(3) * t788 + qJ(4) * t738 + t893 * t669 + t892 * t677;
t739 = t794 * t893 + t892 * t841;
t948 = -pkin(3) * t790 + qJ(4) * t739 + t893 * t670 + t892 * t678;
t947 = pkin(4) * t850 + pkin(7) * t847 + t633;
t946 = pkin(3) * t737 + t975;
t945 = -pkin(3) * t736 - t974;
t944 = -pkin(2) * t597 - t993;
t943 = -pkin(2) * t930 - t987;
t942 = pkin(2) * t796 - qJ(3) * g(3);
t938 = g(3) * t899 + t1017;
t937 = g(3) * t902 - t1016;
t935 = -pkin(3) * t845 + t719;
t933 = pkin(3) * t600 + t951;
t932 = pkin(3) * t606 + t950;
t931 = pkin(3) * t773 + t947;
t929 = t795 * t899 + t796 * t902;
t928 = t807 * t899 - t809 * t902;
t927 = t854 * t902 - t855 * t899;
t924 = pkin(7) * t624 + t898 * t561 + (-pkin(4) - t1019) * t660;
t923 = -pkin(2) * t548 - t955;
t922 = -pkin(2) * t589 - t954;
t921 = -pkin(2) * t601 - t953;
t920 = -pkin(2) * t607 - t952;
t919 = -pkin(2) * t738 - t949;
t918 = -pkin(2) * t739 - t948;
t879 = pkin(2) * t904 - g(3);
t917 = -pkin(2) * t981 - t902 * t879 - t1016;
t913 = -pkin(3) * t588 - t924;
t903 = pkin(1) * g(3);
t896 = qJ(2) * g(3);
t891 = pkin(2) * qJDD(1);
t881 = 0.2e1 * t885;
t880 = 0.2e1 * qJDD(1) * qJ(3);
t859 = t877 - t1026;
t857 = -t997 + t1026;
t851 = -t877 + t997;
t828 = t986 * t983;
t820 = -t936 - 0.2e1 * t1011;
t814 = t881 + t925;
t808 = t881 + t916;
t804 = t880 + t912 + 0.2e1 * t1011;
t803 = -t824 + t861;
t802 = t823 - t861;
t801 = t842 * t901 - t886 * t983;
t800 = -t887 * t983 - t898 * t958;
t798 = qJDD(5) * t892 + t828 * t893;
t797 = -qJDD(5) * t893 + t828 * t892;
t793 = -t857 * t898 + t1002;
t791 = t859 * t901 - t1001;
t789 = t857 * t901 + t1003;
t787 = t859 * t898 + t1000;
t786 = t934 * t898;
t785 = t872 * t898 - t901 * t958;
t780 = -pkin(2) * t980 + t879 * t899 - t1017;
t776 = t824 - t823;
t772 = t896 - t1024;
t762 = -t841 * t898 + t843 * t901;
t761 = t841 * t901 + t843 * t898;
t760 = t903 - t942;
t752 = t801 * t893 - t957;
t751 = t800 * t893 + t957;
t750 = t801 * t892 + t956;
t749 = t800 * t892 - t956;
t748 = t793 * t893 + t892 * t979;
t747 = t791 * t893 + t892 * t978;
t746 = t793 * t892 - t893 * t979;
t745 = t791 * t892 - t893 * t978;
t741 = pkin(1) * t809 - qJ(2) * t807;
t731 = (t832 * t900 - t834 * t897) * t863;
t730 = (t832 * t897 + t834 * t900) * t863;
t729 = t762 * t893 + t892 * t851;
t728 = t762 * t892 - t851 * t893;
t724 = t754 + t805;
t721 = -t753 + t806;
t718 = t754 * t900 + t834 * t999;
t717 = t754 * t897 - t834 * t998;
t716 = -t753 * t897 - t832 * t998;
t715 = -t753 * t900 + t832 * t999;
t710 = t731 * t901 - t825 * t898;
t709 = t731 * t898 + t825 * t901;
t706 = t802 * t900 + t1008;
t705 = -t803 * t897 + t1039;
t704 = t802 * t897 - t1007;
t703 = t803 * t900 + t1041;
t692 = -qJ(2) * t796 + t1014 * t795;
t682 = t718 * t901 + t977;
t681 = t716 * t901 - t977;
t680 = t718 * t898 - t976;
t679 = t716 * t898 + t976;
t664 = qJ(2) * t845 + t1014 * t846 - t935;
t663 = -qJ(2) * t846 + t1014 * t845 - t972;
t661 = t722 * t900 - t724 * t897;
t659 = t722 * t897 + t724 * t900;
t657 = t710 * t893 + t892 * t730;
t656 = t710 * t892 - t730 * t893;
t653 = t706 * t901 - t721 * t898;
t652 = t705 * t901 + t725 * t898;
t651 = t706 * t898 + t721 * t901;
t650 = t705 * t898 - t725 * t901;
t645 = pkin(3) * t648;
t635 = t661 * t901 + t776 * t898;
t634 = t661 * t898 - t776 * t901;
t630 = t682 * t893 + t892 * t717;
t629 = t681 * t893 - t892 * t715;
t628 = t682 * t892 - t717 * t893;
t627 = t681 * t892 + t715 * t893;
t614 = t653 * t893 + t892 * t704;
t613 = t652 * t893 + t892 * t703;
t612 = t653 * t892 - t704 * t893;
t611 = t652 * t892 - t703 * t893;
t603 = -pkin(2) * t773 + t966;
t602 = -pkin(2) * t774 - t992;
t593 = t1014 * t888 - t1037;
t592 = qJ(2) * t888 - t943;
t591 = t635 * t893 + t892 * t659;
t590 = t635 * t892 - t659 * t893;
t584 = qJ(2) * t737 - t1014 * t739 + t946;
t583 = qJ(2) * t736 - t1014 * t738 - t945;
t579 = qJ(2) * t773 - t1014 * t774 + t931;
t578 = -t1014 * t790 - t1027;
t577 = -t1014 * t788 - t1028;
t576 = -qJ(2) * t790 - t918;
t575 = -qJ(2) * t788 - t919;
t566 = -qJ(2) * t648 - t1014 * t930 - t645;
t542 = -(-pkin(1) - t971) * t632 + t1031;
t541 = -(-qJ(2) - t941) * t632 - t944;
t540 = qJ(2) * t596 - t1014 * t597 - t973;
t536 = qJ(2) * t606 - t1014 * t607 + t932;
t535 = qJ(2) * t600 - t1014 * t601 + t933;
t534 = -t1014 * t642 - t1029;
t533 = -qJ(2) * t642 - t920;
t532 = -t1014 * t638 - t1030;
t531 = -qJ(2) * t638 - t921;
t530 = qJ(2) * t588 - t1014 * t589 - t913;
t529 = -t1014 * t623 - t1032;
t528 = -qJ(2) * t623 - t922;
t527 = -t1014 * t564 - t1033;
t526 = -qJ(2) * t564 - t923;
t525 = qJ(2) * t547 - t1014 * t548 + t906;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t848, 0, -t849, 0, -t938, -t937, -t927, -pkin(6) * t927, 0, -t848, t849, 0, 0, 0, t928, t938, t937, pkin(6) * t928 + (-pkin(1) * t899 + qJ(2) * t902) * g(3), 0, -t849, 0, 0, -t848, 0, t917, t963, t780, -pkin(6) * t963 - t899 * t760 + t902 * t772, 0, 0, t770, 0, t771, 0, t1048, t1049, t1045, pkin(6) * t1045 + t902 * t592 - t899 * t593, t750 * t902 + t752 * t899, t728 * t902 + t729 * t899, t746 * t902 + t748 * t899, t749 * t902 + t751 * t899, t745 * t902 + t747 * t899, t797 * t902 + t798 * t899, t902 * t575 - t899 * t577 - pkin(6) * (t736 * t899 - t738 * t902), t902 * t576 - t899 * t578 - pkin(6) * (t737 * t899 - t739 * t902), -t902 * t602 + t899 * t603 - pkin(6) * (t773 * t899 - t774 * t902), t902 * t541 - t899 * t542 - pkin(6) * (t596 * t899 - t597 * t902), t628 * t902 + t630 * t899, t590 * t902 + t591 * t899, t611 * t902 + t613 * t899, t627 * t902 + t629 * t899, t612 * t902 + t614 * t899, t656 * t902 + t657 * t899, t902 * t531 - t899 * t532 - pkin(6) * (t600 * t899 - t601 * t902), t902 * t533 - t899 * t534 - pkin(6) * (t606 * t899 - t607 * t902), t902 * t528 - t899 * t529 - pkin(6) * (t588 * t899 - t589 * t902), t902 * t526 - t899 * t527 - pkin(6) * (t547 * t899 - t548 * t902); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t849, 0, t848, 0, t937, -t938, t960, pkin(6) * t960, 0, -t849, -t848, 0, 0, 0, t962, -t937, t938, pkin(6) * t962 + (pkin(1) * t902 + qJ(2) * t899) * g(3), 0, t848, 0, 0, -t849, 0, -t780, t929, t917, -pkin(6) * t929 + t902 * t760 + t899 * t772, 0, 0, -t771, 0, t770, 0, -t1049, t1048, t1044, pkin(6) * t1044 + t899 * t592 + t902 * t593, t750 * t899 - t752 * t902, t728 * t899 - t729 * t902, t746 * t899 - t748 * t902, t749 * t899 - t751 * t902, t745 * t899 - t747 * t902, t797 * t899 - t798 * t902, t899 * t575 + t902 * t577 + pkin(6) * (t736 * t902 + t738 * t899), t899 * t576 + t902 * t578 + pkin(6) * (t737 * t902 + t739 * t899), -t899 * t602 - t902 * t603 + pkin(6) * (t773 * t902 + t774 * t899), t899 * t541 + t902 * t542 + pkin(6) * (t596 * t902 + t597 * t899), t628 * t899 - t630 * t902, t590 * t899 - t591 * t902, t611 * t899 - t613 * t902, t627 * t899 - t629 * t902, t612 * t899 - t614 * t902, t656 * t899 - t657 * t902, t899 * t531 + t902 * t532 + pkin(6) * (t600 * t902 + t601 * t899), t899 * t533 + t902 * t534 + pkin(6) * (t606 * t902 + t607 * t899), t899 * t528 + t902 * t529 + pkin(6) * (t588 * t902 + t589 * t899), t899 * t526 + t902 * t527 + pkin(6) * (t547 * t902 + t548 * t899); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t854, t855, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t820, t814, t741, 0, 0, 0, qJDD(1), 0, 0, t808, 0, t804, t692, 0, 0, 0, 0, 0, qJDD(1), t664, t663, 0, t566, t786, t761, t789, -t785, t787, 0, t583, t584, t579, t540, t680, t634, t650, t679, t651, t709, t535, t536, t530, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t904, 0, 0, -g(3), -t854, 0, 0, -qJDD(1), t904, 0, 0, 0, -t809, 0, g(3), t896, 0, -t904, 0, 0, -qJDD(1), 0, -t879, t795, -t891, t772, 0, 0, t846, 0, t845, 0, -t1047, t756, t930, t592, t750, t728, t746, t749, t745, t797, t575, t576, -t602, t541, t628, t590, t611, t627, t612, t656, t531, t533, t528, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, qJDD(1), 0, g(3), 0, -t855, 0, 0, -t904, -qJDD(1), 0, 0, 0, -t807, -g(3), 0, t903, 0, qJDD(1), 0, 0, -t904, 0, t891, t796, -t879, t760, 0, 0, -t845, 0, t846, 0, -t756, -t1047, -t648, t593, -t752, -t729, -t748, -t751, -t747, -t798, t577, t578, -t603, t542, -t630, -t591, -t613, -t629, -t614, -t657, t532, t534, t529, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t854, t855, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t820, t814, t741, 0, 0, 0, qJDD(1), 0, 0, t808, 0, t804, t692, 0, 0, 0, 0, 0, qJDD(1), t664, t663, 0, t566, t786, t761, t789, -t785, t787, 0, t583, t584, t579, t540, t680, t634, t650, t679, t651, t709, t535, t536, t530, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t809, -t807, 0, 0, 0, 0, qJDD(1), 0, 0, t910 - t1025, 0, t880 + t905 + t1011, qJ(3) * t795, 0, 0, 0, 0, 0, qJDD(1), qJ(3) * t846 - t935, qJ(3) * t845 - t972, 0, -qJ(3) * t930 - t645, t786, t761, t789, -t785, t787, 0, -qJ(3) * t738 - t945, -qJ(3) * t739 + t946, -qJ(3) * t774 + t931, -qJ(3) * t597 - t973, t680, t634, t650, t679, t651, t709, -qJ(3) * t601 + t933, -qJ(3) * t607 + t932, -qJ(3) * t589 - t913, -qJ(3) * t548 + t906; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t904, 0, 0, 0, t809, 0, -g(3), 0, 0, t904, 0, 0, qJDD(1), 0, t879, -t795, t891, t1024, 0, 0, -t846, 0, -t845, 0, t1047, -t756, -t930, t943, -t750, -t728, -t746, -t749, -t745, -t797, t919, t918, t602, t944 - t1042, -t628, -t590, -t611, -t627, -t612, -t656, t921, t920, t922, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, qJDD(1), 0, 0, 0, t807, g(3), 0, 0, 0, -qJDD(1), 0, 0, t904, 0, -t891, -t796, t879, t942, 0, 0, t845, 0, -t846, 0, t756, t1047, t648, -qJ(3) * t888 + t1037, t752, t729, t748, t751, t747, t798, qJ(3) * t788 + t1028, qJ(3) * t790 + t1027, t603, -t632 * t971 - t1031, t630, t591, t613, t629, t614, t657, qJ(3) * t638 + t1030, qJ(3) * t642 + t1029, qJ(3) * t623 + t1032, qJ(3) * t564 + t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, 0, t904, 0, 0, -t796, -g(3), 0, 0, 0, t845, 0, -t846, 0, t1035, -t988, t648, qJ(4) * t648, t752, t729, t748, t751, t747, t798, -qJ(4) * t736 - t965, -qJ(4) * t737 - t964, t966, -qJ(4) * t596 + t1015 * t632 - t619, t630, t591, t613, t629, t614, t657, -qJ(4) * t600 - t968, -qJ(4) * t606 - t967, -qJ(4) * t588 - t969, -qJ(4) * t547 - t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, 0, t796, 0, -t795, 0, 0, 0, 0, 0, 0, -qJDD(1), t935, t972, 0, t645, -t786, -t761, -t789, t785, -t787, 0, t945, -t946, -t931, t973, -t680, -t634, -t650, -t679, -t651, -t709, -t933, -t932, t913, -t906; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t904, 0, 0, -qJDD(1), 0, g(3), t795, 0, 0, 0, 0, t846, 0, t845, 0, t988, t1035, t930, t987, t750, t728, t746, t749, t745, t797, t949, t948, t992, t993 + t1042, t628, t590, t611, t627, t612, t656, t953, t952, t954, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t904, 0, 0, -t888, t719, 0, t801, t762, t793, t800, t791, t828, t677, t678, t632, pkin(7) * t632, t682, t635, t652, t681, t653, t710, t556, t559, t551, t539; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, qJDD(1), 0, t888, 0, t720, 0, t862, -t851, -t979, -t862, -t978, -qJDD(5), t669, t670, 0, t1021, -t717, -t659, -t703, t715, -t704, -t730, t572, t574, t553, t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t719, -t720, 0, 0, t786, t761, t789, -t785, t787, 0, t974, t975, t947, t991, t680, t634, t650, t679, t651, t709, t951, t950, t924, t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, t843, t852, -t872, t859, t872, 0, t707, t690, 0, t718, t661, t705, t716, t706, t731, t616, t618, t561, -pkin(8) * t569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t841, t857, t958, t853, -t871, -t707, 0, t691, 0, -t1006, -t776, -t725, t1006, t721, t825, t581, t587, -pkin(5) * t660, -pkin(5) * t569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t862, t851, t979, t862, t978, qJDD(5), -t690, -t691, 0, 0, t717, t659, t703, -t715, t704, t730, t915, t914, t909, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, t722, t911, -t805, t802, t805, 0, t675, t609, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t806, t724, t803, t753, -t742, t806, -t675, 0, t610, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, t776, t725, -t1006, -t721, -t825, -t609, -t610, 0, 0;];
m_new_reg  = t1;
