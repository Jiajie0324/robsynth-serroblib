% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:52
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:50:28
% EndTime: 2019-05-06 12:51:17
% DurationCPUTime: 47.85s
% Computational Cost: add. (402968->958), mult. (950767->1477), div. (0->0), fcn. (725400->12), ass. (0->659)
t1126 = cos(qJ(2));
t1109 = t1126 * qJDD(1);
t1122 = sin(qJ(2));
t1200 = qJD(1) * t1122;
t1161 = qJD(2) * t1200;
t1083 = t1109 - t1161;
t1115 = t1126 ^ 2;
t1129 = qJD(1) ^ 2;
t1143 = qJD(2) * pkin(2) - qJ(3) * t1200;
t1123 = sin(qJ(1));
t1127 = cos(qJ(1));
t1092 = t1123 * g(1) - t1127 * g(2);
t1144 = qJDD(1) * pkin(1) + t1092;
t1009 = t1083 * pkin(2) - t1143 * t1200 - qJDD(3) + t1144 + (qJ(3) * t1115 + pkin(7)) * t1129;
t1116 = sin(pkin(11));
t1117 = sin(pkin(10));
t1119 = cos(pkin(10));
t1199 = qJD(1) * t1126;
t1073 = -t1117 * t1200 + t1119 * t1199;
t1074 = t1117 * t1199 + t1119 * t1200;
t1121 = sin(qJ(4));
t1125 = cos(qJ(4));
t1038 = t1073 * t1121 + t1074 * t1125;
t1154 = qJD(2) * t1199;
t1170 = qJDD(1) * t1122;
t1082 = t1154 + t1170;
t1048 = t1119 * t1082 + t1117 * t1083;
t1150 = t1082 * t1117 - t1119 * t1083;
t1151 = t1121 * t1048 + t1125 * t1150;
t954 = qJD(4) * t1038 + t1151;
t1113 = qJD(2) + qJD(4);
t1118 = cos(pkin(11));
t1006 = t1038 * t1116 - t1118 * t1113;
t1008 = t1038 * t1118 + t1113 * t1116;
t966 = t1008 * t1006;
t1230 = t954 - t966;
t1240 = t1116 * t1230;
t1046 = t1073 * t1074;
t1226 = qJDD(2) + t1046;
t1239 = t1117 * t1226;
t1238 = t1118 * t1230;
t1237 = t1119 * t1226;
t1120 = sin(qJ(6));
t1141 = qJDD(6) + t954;
t1124 = cos(qJ(6));
t958 = t1124 * t1006 + t1008 * t1120;
t960 = -t1006 * t1120 + t1008 * t1124;
t886 = t960 * t958;
t1229 = t1141 - t886;
t1236 = t1120 * t1229;
t1166 = qJDD(2) + qJDD(4);
t1036 = -t1125 * t1073 + t1074 * t1121;
t981 = t1038 * t1036;
t1228 = -t981 + t1166;
t1235 = t1121 * t1228;
t1234 = t1124 * t1229;
t1233 = t1125 * t1228;
t1024 = t1113 * t1036;
t1140 = qJD(4) * t1036 - t1048 * t1125 + t1121 * t1150;
t1232 = t1140 + t1024;
t1071 = t1073 ^ 2;
t1147 = qJD(2) * pkin(3) - pkin(8) * t1074;
t930 = -pkin(3) * t1150 + t1071 * pkin(8) - t1074 * t1147 + t1009;
t945 = t1116 * t1140 + t1118 * t1166;
t946 = t1116 * t1166 - t1118 * t1140;
t827 = -qJD(6) * t958 + t1120 * t945 + t1124 * t946;
t1032 = qJD(6) + t1036;
t924 = t1032 * t958;
t1231 = t827 - t924;
t973 = t1036 * t1006;
t892 = -t946 - t973;
t891 = t973 - t946;
t1198 = qJD(2) * t1073;
t1015 = -t1048 + t1198;
t1111 = t1115 * t1129;
t1128 = qJD(2) ^ 2;
t1100 = -t1111 - t1128;
t1152 = t1120 * t946 - t1124 * t945;
t799 = (qJD(6) - t1032) * t960 + t1152;
t916 = (qJD(4) - t1113) * t1038 + t1151;
t956 = t958 ^ 2;
t957 = t960 ^ 2;
t1225 = t1006 ^ 2;
t1005 = t1008 ^ 2;
t1031 = t1032 ^ 2;
t1224 = t1036 ^ 2;
t1035 = t1038 ^ 2;
t1072 = t1074 ^ 2;
t1223 = t1113 ^ 2;
t1222 = pkin(4) * t1121;
t1221 = t1122 * g(3);
t1134 = -pkin(2) * t1111 + t1083 * qJ(3) - qJD(2) * t1143 - t1221;
t1093 = g(1) * t1127 + g(2) * t1123;
t1139 = -pkin(1) * t1129 + qJDD(1) * pkin(7) - t1093;
t1136 = t1126 * t1139;
t1131 = t1136 + t1134;
t1137 = t1122 * t1139;
t1133 = qJDD(2) * pkin(2) - t1082 * qJ(3) - t1137;
t1174 = t1122 * t1129;
t1201 = qJD(1) * qJD(2);
t1142 = pkin(2) * t1174 + qJ(3) * t1201 - g(3);
t1132 = t1126 * t1142 + t1133;
t1196 = qJD(3) * t1074;
t1130 = pkin(3) * t1226 + pkin(8) * t1015 - t1117 * t1131 + t1119 * t1132 - 0.2e1 * t1196;
t932 = 0.2e1 * qJD(3) * t1073 + t1117 * t1132 + t1119 * t1131;
t897 = -t1071 * pkin(3) - pkin(8) * t1150 - qJD(2) * t1147 + t932;
t815 = t1121 * t1130 + t1125 * t897;
t978 = pkin(4) * t1036 - qJ(5) * t1038;
t779 = -pkin(4) * t1223 + qJ(5) * t1166 - t1036 * t978 + t815;
t812 = t1232 * qJ(5) + (t1038 * t1113 + t954) * pkin(4) - t930;
t716 = 0.2e1 * qJD(5) * t1008 + t1116 * t779 - t1118 * t812;
t674 = pkin(5) * t1230 + pkin(9) * t892 - t716;
t717 = -0.2e1 * qJD(5) * t1006 + t1116 * t812 + t1118 * t779;
t967 = pkin(5) * t1036 - pkin(9) * t1008;
t689 = -pkin(5) * t1225 + pkin(9) * t945 - t1036 * t967 + t717;
t628 = t1120 * t674 + t1124 * t689;
t627 = t1120 * t689 - t1124 * t674;
t585 = t1120 * t628 - t1124 * t627;
t1220 = t1116 * t585;
t814 = t1121 * t897 - t1125 * t1130;
t778 = -t1166 * pkin(4) - t1223 * qJ(5) + t1038 * t978 + qJDD(5) + t814;
t1219 = t1116 * t778;
t894 = t954 + t966;
t1218 = t1116 * t894;
t742 = t1121 * t815 - t1125 * t814;
t1217 = t1117 * t742;
t1216 = t1118 * t585;
t1215 = t1118 * t778;
t1214 = t1118 * t894;
t1213 = t1119 * t742;
t741 = -t945 * pkin(5) - pkin(9) * t1225 + t1008 * t967 + t778;
t1212 = t1120 * t741;
t838 = t1141 + t886;
t1211 = t1120 * t838;
t1210 = t1121 * t930;
t1209 = t1121 * t954;
t976 = t981 + t1166;
t1208 = t1121 * t976;
t1165 = 0.2e1 * t1196;
t931 = t1117 * t1134 - t1119 * t1133 + t1165 + (t1117 * t1139 - t1119 * t1142) * t1126;
t865 = t1117 * t932 - t1119 * t931;
t1207 = t1122 * t865;
t1206 = t1124 * t741;
t1205 = t1124 * t838;
t1204 = t1125 * t930;
t1203 = t1125 * t976;
t1202 = t1126 * t865;
t1197 = qJD(2) * t1074;
t1195 = t1008 * t1036;
t1194 = t1009 * t1117;
t1193 = t1009 * t1119;
t1192 = t1032 * t1120;
t1191 = t1032 * t1124;
t1190 = t1036 * t1116;
t1189 = t1036 * t1118;
t1042 = qJDD(2) - t1046;
t1188 = t1042 * t1117;
t1187 = t1042 * t1119;
t1186 = t1073 * t1117;
t1185 = t1073 * t1119;
t1184 = t1074 * t1117;
t1183 = t1074 * t1119;
t1076 = t1129 * pkin(7) + t1144;
t1182 = t1076 * t1122;
t1181 = t1076 * t1126;
t1103 = t1126 * t1174;
t1090 = qJDD(2) + t1103;
t1180 = t1090 * t1122;
t1091 = qJDD(2) - t1103;
t1179 = t1091 * t1122;
t1178 = t1091 * t1126;
t1177 = t1113 * t1121;
t1176 = t1113 * t1125;
t1114 = t1122 ^ 2;
t1175 = t1114 * t1129;
t1171 = t1114 + t1115;
t1169 = qJDD(1) * t1123;
t1168 = qJDD(1) * t1127;
t1167 = qJDD(2) * t1127;
t1164 = t1121 * t886;
t1163 = t1125 * t886;
t1162 = -pkin(4) * t1125 - pkin(3);
t1160 = t1121 * t966;
t1159 = t1125 * t966;
t1158 = t1123 * t981;
t1157 = t1127 * t981;
t1156 = t1123 * t1046;
t1155 = t1127 * t1046;
t866 = t1117 * t931 + t1119 * t932;
t586 = t1120 * t627 + t1124 * t628;
t743 = t1121 * t814 + t1125 * t815;
t1061 = t1126 * g(3) + t1137;
t1062 = t1136 - t1221;
t1001 = t1061 * t1122 + t1126 * t1062;
t1054 = -t1092 * t1123 - t1127 * t1093;
t1149 = t1123 * t1103;
t1148 = t1127 * t1103;
t1087 = -t1123 * t1129 + t1168;
t1146 = -pkin(6) * t1087 - g(3) * t1123;
t655 = t1116 * t717 - t1118 * t716;
t656 = t1116 * t716 + t1118 * t717;
t1000 = t1061 * t1126 - t1062 * t1122;
t1053 = t1092 * t1127 - t1093 * t1123;
t889 = t945 + t1195;
t1013 = -t1150 + t1197;
t1108 = t1123 * qJDD(2);
t1099 = t1111 - t1128;
t1098 = -t1128 - t1175;
t1097 = t1128 - t1175;
t1089 = t1111 - t1175;
t1088 = t1111 + t1175;
t1086 = t1127 * t1129 + t1169;
t1085 = t1171 * qJDD(1);
t1084 = t1109 - 0.2e1 * t1161;
t1081 = 0.2e1 * t1154 + t1170;
t1079 = t1126 * t1090;
t1078 = t1171 * t1201;
t1070 = -pkin(6) * t1086 + g(3) * t1127;
t1067 = -t1072 - t1128;
t1066 = -t1072 + t1128;
t1065 = t1071 - t1128;
t1064 = t1082 * t1126 - t1114 * t1201;
t1063 = -t1083 * t1122 - t1115 * t1201;
t1060 = -t1098 * t1122 - t1178;
t1059 = -t1097 * t1122 + t1079;
t1058 = t1100 * t1126 - t1180;
t1057 = t1099 * t1126 - t1179;
t1056 = t1098 * t1126 - t1179;
t1055 = t1100 * t1122 + t1079;
t1051 = t1085 * t1127 - t1088 * t1123;
t1050 = t1085 * t1123 + t1088 * t1127;
t1049 = -t1081 * t1122 + t1084 * t1126;
t1045 = -t1072 + t1071;
t1040 = -t1128 - t1071;
t1030 = (t1184 + t1185) * qJD(2);
t1029 = (-t1183 + t1186) * qJD(2);
t1028 = t1060 * t1127 + t1081 * t1123;
t1027 = t1058 * t1127 - t1084 * t1123;
t1026 = t1060 * t1123 - t1081 * t1127;
t1025 = t1058 * t1123 + t1084 * t1127;
t1022 = -t1035 + t1223;
t1021 = t1224 - t1223;
t1020 = -pkin(7) * t1056 - t1181;
t1019 = -pkin(7) * t1055 - t1182;
t1018 = -t1035 - t1223;
t1017 = -pkin(1) * t1056 + t1062;
t1016 = -pkin(1) * t1055 + t1061;
t1014 = t1048 + t1198;
t1011 = t1150 + t1197;
t1010 = -t1071 - t1072;
t997 = -qJD(2) * t1184 + t1048 * t1119;
t996 = qJD(2) * t1183 + t1048 * t1117;
t995 = -qJD(2) * t1185 + t1117 * t1150;
t994 = -qJD(2) * t1186 - t1119 * t1150;
t991 = -t1067 * t1117 - t1187;
t990 = -t1066 * t1117 + t1237;
t989 = t1065 * t1119 - t1188;
t988 = t1067 * t1119 - t1188;
t987 = t1066 * t1119 + t1239;
t986 = t1065 * t1117 + t1187;
t985 = t1001 * t1127 - t1076 * t1123;
t984 = t1001 * t1123 + t1076 * t1127;
t983 = t1040 * t1119 - t1239;
t982 = t1040 * t1117 + t1237;
t979 = -t1035 + t1224;
t974 = -t1224 - t1223;
t972 = -t1005 + t1224;
t971 = -t1224 + t1225;
t970 = -t1029 * t1122 + t1030 * t1126;
t969 = (-t1036 * t1125 + t1038 * t1121) * t1113;
t968 = (-t1036 * t1121 - t1038 * t1125) * t1113;
t965 = -t1005 + t1225;
t964 = t1013 * t1119 - t1015 * t1117;
t963 = -t1011 * t1119 - t1014 * t1117;
t962 = t1013 * t1117 + t1015 * t1119;
t961 = -t1011 * t1117 + t1014 * t1119;
t952 = t1125 * t954;
t950 = -qJ(3) * t988 - t1193;
t949 = -t1224 - t1035;
t948 = -t1122 * t996 + t1126 * t997;
t947 = -t1122 * t994 + t1126 * t995;
t942 = -t1005 - t1224;
t941 = -t1122 * t988 + t1126 * t991;
t940 = -t1122 * t987 + t1126 * t990;
t939 = -t1122 * t986 + t1126 * t989;
t938 = t1122 * t991 + t1126 * t988;
t937 = -qJ(3) * t982 - t1194;
t936 = t1021 * t1125 - t1208;
t935 = -t1022 * t1121 + t1233;
t934 = t1021 * t1121 + t1203;
t933 = t1022 * t1125 + t1235;
t929 = -t1018 * t1121 - t1203;
t928 = t1018 * t1125 - t1208;
t926 = -t1224 - t1225;
t923 = -t957 + t1031;
t922 = t956 - t1031;
t921 = t1005 + t1225;
t920 = -t1024 + t1140;
t915 = (qJD(4) + t1113) * t1038 + t1151;
t914 = -t1038 * t1177 - t1125 * t1140;
t913 = t1038 * t1176 - t1121 * t1140;
t912 = t1036 * t1176 + t1209;
t911 = t1036 * t1177 - t952;
t910 = -t1122 * t982 + t1126 * t983;
t909 = t1122 * t983 + t1126 * t982;
t908 = -pkin(2) * t1014 + qJ(3) * t991 - t1194;
t907 = t1125 * t974 - t1235;
t906 = t1121 * t974 + t1233;
t905 = -pkin(2) * t1011 + qJ(3) * t983 + t1193;
t904 = (-t1006 * t1118 + t1008 * t1116) * t1036;
t903 = (t1006 * t1116 + t1008 * t1118) * t1036;
t902 = t1014 * t1123 + t1127 * t941;
t901 = -t1014 * t1127 + t1123 * t941;
t900 = -t957 - t1031;
t899 = -t1117 * t968 + t1119 * t969;
t898 = t1117 * t969 + t1119 * t968;
t888 = t945 - t1195;
t885 = -t957 + t956;
t884 = t1011 * t1123 + t1127 * t910;
t883 = -t1122 * t962 + t1126 * t964;
t882 = -t1122 * t961 + t1126 * t963;
t881 = -t1011 * t1127 + t1123 * t910;
t880 = t1122 * t964 + t1126 * t962;
t879 = -t1008 * t1190 + t1118 * t946;
t878 = -t1008 * t1189 - t1116 * t946;
t877 = t1006 * t1189 - t1116 * t945;
t876 = -t1006 * t1190 - t1118 * t945;
t873 = -t1031 - t956;
t872 = t1010 * t1123 + t1127 * t883;
t871 = -t1010 * t1127 + t1123 * t883;
t870 = -t1117 * t934 + t1119 * t936;
t869 = -t1117 * t933 + t1119 * t935;
t868 = t1117 * t936 + t1119 * t934;
t867 = t1117 * t935 + t1119 * t933;
t864 = -pkin(8) * t928 - t1204;
t863 = -t1117 * t928 + t1119 * t929;
t862 = t1117 * t929 + t1119 * t928;
t861 = (t1120 * t960 - t1124 * t958) * t1032;
t860 = (-t1120 * t958 - t1124 * t960) * t1032;
t859 = t1125 * t904 + t1209;
t858 = t1121 * t904 - t952;
t857 = t1118 * t971 - t1218;
t856 = -t1116 * t972 + t1238;
t855 = -t1116 * t971 - t1214;
t854 = -t1118 * t972 - t1240;
t853 = -t1121 * t920 - t1125 * t916;
t852 = t1121 * t1232 - t1125 * t915;
t851 = -t1121 * t916 + t1125 * t920;
t850 = -t1121 * t915 - t1125 * t1232;
t849 = -pkin(8) * t906 - t1210;
t848 = -t956 - t957;
t847 = t1125 * t879 + t1160;
t846 = t1125 * t877 - t1160;
t845 = t1121 * t879 - t1159;
t844 = t1121 * t877 + t1159;
t843 = -t1117 * t913 + t1119 * t914;
t842 = -t1117 * t911 + t1119 * t912;
t841 = t1117 * t914 + t1119 * t913;
t840 = t1117 * t912 + t1119 * t911;
t836 = -pkin(1) * t880 - pkin(2) * t962;
t835 = -pkin(1) * t938 - pkin(2) * t988 + t932;
t834 = pkin(2) * t1009 + qJ(3) * t866;
t833 = -t1116 * t942 - t1214;
t832 = t1118 * t942 - t1218;
t831 = -t1117 * t906 + t1119 * t907;
t830 = t1117 * t907 + t1119 * t906;
t829 = t1118 * t926 - t1240;
t828 = t1116 * t926 + t1238;
t826 = -qJD(6) * t960 - t1152;
t825 = -pkin(1) * t909 + t1117 * t1062 + t1119 * t1061 + t1165 + (t1117 * (t1083 + t1161) - t1119 * (-t1082 + t1154)) * qJ(3) + (-t1119 * t1090 + t1100 * t1117 - t982) * pkin(2);
t824 = -qJ(3) * t962 - t865;
t823 = -t1122 * t898 + t1126 * t899;
t822 = -pkin(7) * t938 - t1122 * t908 + t1126 * t950;
t821 = -t1116 * t892 + t1118 * t889;
t820 = t1116 * t891 + t1118 * t888;
t819 = t1116 * t889 + t1118 * t892;
t818 = -t1116 * t888 + t1118 * t891;
t817 = pkin(3) * t1232 + pkin(8) * t929 - t1210;
t816 = -pkin(2) * t1010 + qJ(3) * t964 + t866;
t809 = -pkin(3) * t915 + pkin(8) * t907 + t1204;
t808 = t1124 * t922 - t1211;
t807 = -t1120 * t923 + t1234;
t806 = t1120 * t922 + t1205;
t805 = t1124 * t923 + t1236;
t804 = -pkin(7) * t909 - t1122 * t905 + t1126 * t937;
t803 = -t827 - t924;
t798 = (qJD(6) + t1032) * t960 + t1152;
t797 = t1124 * t827 - t1192 * t960;
t796 = t1120 * t827 + t1191 * t960;
t795 = -t1120 * t826 + t1191 * t958;
t794 = t1124 * t826 + t1192 * t958;
t793 = -t1120 * t900 - t1205;
t792 = t1124 * t900 - t1211;
t791 = t1121 * t889 + t1125 * t857;
t790 = -t1121 * t892 + t1125 * t856;
t789 = t1121 * t857 - t1125 * t889;
t788 = t1121 * t856 + t1125 * t892;
t787 = -t1121 * t965 + t1125 * t820;
t786 = t1121 * t820 + t1125 * t965;
t785 = -t1122 * t868 + t1126 * t870;
t784 = -t1122 * t867 + t1126 * t869;
t783 = t1126 * t866 - t1207;
t782 = t1122 * t866 + t1202;
t781 = -t1121 * t891 + t1125 * t833;
t780 = t1121 * t833 + t1125 * t891;
t776 = -t1122 * t862 + t1126 * t863;
t775 = t1122 * t863 + t1126 * t862;
t774 = -t1121 * t888 + t1125 * t829;
t773 = t1121 * t829 + t1125 * t888;
t772 = -t1121 * t921 + t1125 * t821;
t771 = t1121 * t821 + t1125 * t921;
t770 = t1124 * t873 - t1236;
t769 = t1120 * t873 + t1234;
t768 = -t1116 * t860 + t1118 * t861;
t767 = -t1116 * t861 - t1118 * t860;
t766 = -t1117 * t858 + t1119 * t859;
t765 = t1117 * t859 + t1119 * t858;
t764 = -t1009 * t1123 + t1127 * t783;
t763 = t1009 * t1127 + t1123 * t783;
t762 = -t1117 * t851 + t1119 * t853;
t761 = -t1117 * t850 + t1119 * t852;
t760 = t1117 * t853 + t1119 * t851;
t759 = t1117 * t852 + t1119 * t850;
t758 = -t1117 * t845 + t1119 * t847;
t757 = -t1117 * t844 + t1119 * t846;
t756 = t1117 * t847 + t1119 * t845;
t755 = t1117 * t846 + t1119 * t844;
t754 = -t1122 * t841 + t1126 * t843;
t753 = -t1122 * t840 + t1126 * t842;
t752 = -t1122 * t830 + t1126 * t831;
t751 = t1122 * t831 + t1126 * t830;
t750 = -t1123 * t1232 + t1127 * t776;
t749 = t1123 * t776 + t1127 * t1232;
t748 = t1121 * t1141 + t1125 * t768;
t747 = t1121 * t768 - t1125 * t1141;
t746 = -pkin(1) * t782 - pkin(2) * t865;
t745 = t1123 * t915 + t1127 * t752;
t744 = t1123 * t752 - t1127 * t915;
t740 = -qJ(5) * t832 + t1215;
t739 = -qJ(5) * t828 + t1219;
t738 = -t1116 * t806 + t1118 * t808;
t737 = -t1116 * t805 + t1118 * t807;
t736 = -t1116 * t808 - t1118 * t806;
t735 = -t1116 * t807 - t1118 * t805;
t734 = -qJ(3) * t862 - t1117 * t817 + t1119 * t864;
t733 = pkin(3) * t930 + pkin(8) * t743;
t732 = -t1120 * t803 - t1124 * t799;
t731 = -t1120 * t1231 - t1124 * t798;
t730 = -t1120 * t799 + t1124 * t803;
t729 = -t1120 * t798 + t1124 * t1231;
t728 = -t1116 * t796 + t1118 * t797;
t727 = -t1116 * t794 + t1118 * t795;
t726 = -t1116 * t797 - t1118 * t796;
t725 = -t1116 * t795 - t1118 * t794;
t724 = -pkin(7) * t880 - t1122 * t816 + t1126 * t824;
t723 = -t1116 * t792 + t1118 * t793;
t722 = t1116 * t793 + t1118 * t792;
t721 = -t1117 * t789 + t1119 * t791;
t720 = -t1117 * t788 + t1119 * t790;
t719 = t1117 * t791 + t1119 * t789;
t718 = t1117 * t790 + t1119 * t788;
t715 = -t1117 * t786 + t1119 * t787;
t714 = t1117 * t787 + t1119 * t786;
t713 = -t1117 * t780 + t1119 * t781;
t712 = t1117 * t781 + t1119 * t780;
t711 = -qJ(3) * t830 - t1117 * t809 + t1119 * t849;
t710 = pkin(2) * t1232 + qJ(3) * t863 + t1117 * t864 + t1119 * t817;
t709 = -t1117 * t773 + t1119 * t774;
t708 = t1117 * t774 + t1119 * t773;
t707 = -pkin(7) * t782 - qJ(3) * t1202 - t1122 * t834;
t706 = -t1117 * t771 + t1119 * t772;
t705 = t1117 * t772 + t1119 * t771;
t704 = -t1116 * t769 + t1118 * t770;
t703 = t1116 * t770 + t1118 * t769;
t702 = -pkin(8) * t851 - t742;
t701 = -t1122 * t765 + t1126 * t766;
t700 = t1125 * t728 + t1164;
t699 = t1125 * t727 - t1164;
t698 = t1121 * t728 - t1163;
t697 = t1121 * t727 + t1163;
t696 = -t1122 * t760 + t1126 * t762;
t695 = -t1122 * t759 + t1126 * t761;
t694 = t1122 * t762 + t1126 * t760;
t693 = -pkin(2) * t915 + qJ(3) * t831 + t1117 * t849 + t1119 * t809;
t692 = -pkin(3) * t949 + pkin(8) * t853 + t743;
t691 = -t1122 * t756 + t1126 * t758;
t690 = -t1122 * t755 + t1126 * t757;
t687 = t1123 * t949 + t1127 * t696;
t686 = t1123 * t696 - t1127 * t949;
t685 = -pkin(9) * t792 + t1206;
t684 = -pkin(4) * t832 + t717;
t683 = -pkin(1) * t775 - pkin(2) * t862 - pkin(3) * t928 + t815;
t682 = -pkin(4) * t828 + t716;
t681 = -t1117 * t747 + t1119 * t748;
t680 = t1117 * t748 + t1119 * t747;
t679 = -pkin(9) * t769 + t1212;
t678 = -t1121 * t799 + t1125 * t738;
t677 = -t1121 * t803 + t1125 * t737;
t676 = t1121 * t738 + t1125 * t799;
t675 = t1121 * t737 + t1125 * t803;
t671 = t1121 * t1231 + t1125 * t723;
t670 = t1121 * t723 - t1125 * t1231;
t669 = -pkin(1) * t751 - pkin(2) * t830 - pkin(3) * t906 + t814;
t668 = t1121 * t798 + t1125 * t704;
t667 = t1121 * t704 - t1125 * t798;
t666 = t1119 * t743 - t1217;
t665 = t1117 * t743 + t1213;
t664 = -pkin(5) * t1231 + pkin(9) * t793 + t1212;
t663 = -pkin(5) * t798 + pkin(9) * t770 - t1206;
t662 = -t1116 * t730 + t1118 * t732;
t661 = -t1116 * t729 + t1118 * t731;
t660 = t1116 * t732 + t1118 * t730;
t659 = -t1116 * t731 - t1118 * t729;
t658 = -t1122 * t719 + t1126 * t721;
t657 = -t1122 * t718 + t1126 * t720;
t654 = -t1122 * t714 + t1126 * t715;
t653 = -pkin(1) * t694 - pkin(2) * t760 - pkin(3) * t851;
t652 = -t1121 * t885 + t1125 * t661;
t651 = t1121 * t661 + t1125 * t885;
t650 = -t1122 * t712 + t1126 * t713;
t649 = t1122 * t713 + t1126 * t712;
t648 = -t1122 * t708 + t1126 * t709;
t647 = t1122 * t709 + t1126 * t708;
t646 = -t1122 * t705 + t1126 * t706;
t645 = t1122 * t706 + t1126 * t705;
t644 = t1121 * t848 + t1125 * t662;
t643 = t1121 * t662 - t1125 * t848;
t642 = -t1117 * t698 + t1119 * t700;
t641 = -t1117 * t697 + t1119 * t699;
t640 = t1117 * t700 + t1119 * t698;
t639 = t1117 * t699 + t1119 * t697;
t638 = -qJ(5) * t819 - t655;
t637 = t1123 * t832 + t1127 * t650;
t636 = t1123 * t650 - t1127 * t832;
t635 = t1123 * t828 + t1127 * t648;
t634 = t1123 * t648 - t1127 * t828;
t633 = t1121 * t778 + t1125 * t656;
t632 = t1121 * t656 - t1125 * t778;
t631 = -pkin(7) * t775 - t1122 * t710 + t1126 * t734;
t630 = t1123 * t819 + t1127 * t646;
t629 = t1123 * t646 - t1127 * t819;
t625 = -pkin(8) * t780 - t1121 * t684 + t1125 * t740;
t624 = -t1122 * t680 + t1126 * t681;
t623 = -pkin(8) * t773 - t1121 * t682 + t1125 * t739;
t622 = -t1117 * t676 + t1119 * t678;
t621 = -t1117 * t675 + t1119 * t677;
t620 = t1117 * t678 + t1119 * t676;
t619 = t1117 * t677 + t1119 * t675;
t618 = -pkin(4) * t660 - pkin(5) * t730;
t617 = -qJ(3) * t760 - t1117 * t692 + t1119 * t702;
t616 = -t1117 * t670 + t1119 * t671;
t615 = t1117 * t671 + t1119 * t670;
t614 = -pkin(7) * t751 - t1122 * t693 + t1126 * t711;
t613 = -pkin(2) * t949 + qJ(3) * t762 + t1117 * t702 + t1119 * t692;
t612 = -pkin(3) * t832 + pkin(8) * t781 + t1121 * t740 + t1125 * t684;
t611 = -pkin(3) * t828 + pkin(8) * t774 + t1121 * t739 + t1125 * t682;
t610 = -t1117 * t667 + t1119 * t668;
t609 = t1117 * t668 + t1119 * t667;
t608 = -t1122 * t665 + t1126 * t666;
t607 = t1122 * t666 + t1126 * t665;
t606 = -pkin(8) * t771 + t1125 * t638 + t1222 * t819;
t605 = -pkin(8) * t1213 - qJ(3) * t665 - t1117 * t733;
t604 = -t1123 * t930 + t1127 * t608;
t603 = t1123 * t608 + t1127 * t930;
t602 = pkin(2) * t930 - pkin(8) * t1217 + qJ(3) * t666 + t1119 * t733;
t601 = pkin(8) * t772 + t1121 * t638 + t1162 * t819;
t600 = -qJ(5) * t722 - t1116 * t664 + t1118 * t685;
t599 = -pkin(4) * t722 - pkin(5) * t792 + t628;
t598 = -t1117 * t651 + t1119 * t652;
t597 = t1117 * t652 + t1119 * t651;
t596 = -pkin(4) * t703 - pkin(5) * t769 + t627;
t595 = -qJ(5) * t703 - t1116 * t663 + t1118 * t679;
t594 = -t1117 * t643 + t1119 * t644;
t593 = t1117 * t644 + t1119 * t643;
t592 = -t1122 * t640 + t1126 * t642;
t591 = -t1122 * t639 + t1126 * t641;
t590 = -pkin(1) * t649 - pkin(2) * t712 - pkin(3) * t780 - pkin(4) * t891 - qJ(5) * t833 - t1219;
t589 = -pkin(1) * t647 - pkin(2) * t708 - pkin(3) * t773 - pkin(4) * t888 - qJ(5) * t829 + t1215;
t588 = -t1117 * t632 + t1119 * t633;
t587 = t1117 * t633 + t1119 * t632;
t584 = -t1122 * t620 + t1126 * t622;
t583 = -t1122 * t619 + t1126 * t621;
t582 = -pkin(1) * t607 - pkin(2) * t665 - pkin(3) * t742;
t581 = -t1122 * t615 + t1126 * t616;
t580 = t1122 * t616 + t1126 * t615;
t579 = -pkin(5) * t741 + pkin(9) * t586;
t578 = -pkin(9) * t730 - t585;
t577 = -t1122 * t609 + t1126 * t610;
t576 = t1122 * t610 + t1126 * t609;
t575 = -pkin(1) * t645 - pkin(2) * t705 - pkin(3) * t771 - pkin(4) * t921 - qJ(5) * t821 - t656;
t574 = -pkin(8) * t632 + (-qJ(5) * t1125 + t1222) * t655;
t573 = -pkin(5) * t848 + pkin(9) * t732 + t586;
t572 = -qJ(3) * t712 - t1117 * t612 + t1119 * t625;
t571 = t1123 * t722 + t1127 * t581;
t570 = t1123 * t581 - t1127 * t722;
t569 = -qJ(3) * t708 - t1117 * t611 + t1119 * t623;
t568 = -pkin(7) * t694 - t1122 * t613 + t1126 * t617;
t567 = -pkin(2) * t832 + qJ(3) * t713 + t1117 * t625 + t1119 * t612;
t566 = -pkin(2) * t828 + qJ(3) * t709 + t1117 * t623 + t1119 * t611;
t565 = t1123 * t703 + t1127 * t577;
t564 = t1123 * t577 - t1127 * t703;
t563 = -qJ(3) * t705 - t1117 * t601 + t1119 * t606;
t562 = -t1122 * t597 + t1126 * t598;
t561 = pkin(8) * t633 + (-qJ(5) * t1121 + t1162) * t655;
t560 = -pkin(2) * t819 + qJ(3) * t706 + t1117 * t606 + t1119 * t601;
t559 = -t1122 * t593 + t1126 * t594;
t558 = t1122 * t594 + t1126 * t593;
t557 = -pkin(8) * t670 - t1121 * t599 + t1125 * t600;
t556 = -t1122 * t587 + t1126 * t588;
t555 = t1122 * t588 + t1126 * t587;
t554 = -pkin(7) * t607 - t1122 * t602 + t1126 * t605;
t553 = -pkin(8) * t667 - t1121 * t596 + t1125 * t595;
t552 = -pkin(3) * t722 + pkin(8) * t671 + t1121 * t600 + t1125 * t599;
t551 = t1118 * t586 - t1220;
t550 = t1116 * t586 + t1216;
t549 = t1123 * t660 + t1127 * t559;
t548 = t1123 * t559 - t1127 * t660;
t547 = -pkin(3) * t703 + pkin(8) * t668 + t1121 * t595 + t1125 * t596;
t546 = t1121 * t741 + t1125 * t551;
t545 = t1121 * t551 - t1125 * t741;
t544 = t1123 * t655 + t1127 * t556;
t543 = t1123 * t556 - t1127 * t655;
t542 = -pkin(1) * t580 - pkin(2) * t615 - pkin(3) * t670 + pkin(4) * t1231 - qJ(5) * t723 - t1116 * t685 - t1118 * t664;
t541 = -qJ(5) * t660 - t1116 * t573 + t1118 * t578;
t540 = -pkin(1) * t576 - pkin(2) * t609 - pkin(3) * t667 + pkin(4) * t798 - qJ(5) * t704 - t1116 * t679 - t1118 * t663;
t539 = -pkin(7) * t649 - t1122 * t567 + t1126 * t572;
t538 = -pkin(4) * t550 - pkin(5) * t585;
t537 = -pkin(7) * t647 - t1122 * t566 + t1126 * t569;
t536 = -pkin(7) * t645 - t1122 * t560 + t1126 * t563;
t535 = -pkin(8) * t643 - t1121 * t618 + t1125 * t541;
t534 = -qJ(3) * t587 - t1117 * t561 + t1119 * t574;
t533 = -pkin(1) * t555 - pkin(2) * t587 - pkin(3) * t632 + pkin(4) * t778 - qJ(5) * t656;
t532 = -pkin(3) * t660 + pkin(8) * t644 + t1121 * t541 + t1125 * t618;
t531 = -pkin(2) * t655 + qJ(3) * t588 + t1117 * t574 + t1119 * t561;
t530 = -pkin(9) * t1216 - qJ(5) * t550 - t1116 * t579;
t529 = -t1117 * t545 + t1119 * t546;
t528 = t1117 * t546 + t1119 * t545;
t527 = -qJ(3) * t615 - t1117 * t552 + t1119 * t557;
t526 = -pkin(2) * t722 + qJ(3) * t616 + t1117 * t557 + t1119 * t552;
t525 = -qJ(3) * t609 - t1117 * t547 + t1119 * t553;
t524 = -pkin(2) * t703 + qJ(3) * t610 + t1117 * t553 + t1119 * t547;
t523 = -pkin(1) * t558 - pkin(2) * t593 - pkin(3) * t643 + pkin(4) * t848 - qJ(5) * t662 - t1116 * t578 - t1118 * t573;
t522 = -qJ(3) * t593 - t1117 * t532 + t1119 * t535;
t521 = -t1122 * t528 + t1126 * t529;
t520 = t1122 * t529 + t1126 * t528;
t519 = -pkin(2) * t660 + qJ(3) * t594 + t1117 * t535 + t1119 * t532;
t518 = -pkin(8) * t545 - t1121 * t538 + t1125 * t530;
t517 = -pkin(7) * t555 - t1122 * t531 + t1126 * t534;
t516 = -pkin(7) * t580 - t1122 * t526 + t1126 * t527;
t515 = t1123 * t550 + t1127 * t521;
t514 = t1123 * t521 - t1127 * t550;
t513 = -pkin(7) * t576 - t1122 * t524 + t1126 * t525;
t512 = -pkin(3) * t550 + pkin(8) * t546 + t1121 * t530 + t1125 * t538;
t511 = -pkin(7) * t558 - t1122 * t519 + t1126 * t522;
t510 = -pkin(1) * t520 - pkin(2) * t528 - pkin(3) * t545 + pkin(4) * t741 + pkin(9) * t1220 - qJ(5) * t551 - t1118 * t579;
t509 = -qJ(3) * t528 - t1117 * t512 + t1119 * t518;
t508 = -pkin(2) * t550 + qJ(3) * t529 + t1117 * t518 + t1119 * t512;
t507 = -pkin(7) * t520 - t1122 * t508 + t1126 * t509;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1086, -t1087, 0, t1054, 0, 0, 0, 0, 0, 0, t1027, t1028, t1051, t985, 0, 0, 0, 0, 0, 0, t884, t902, t872, t764, 0, 0, 0, 0, 0, 0, t745, t750, t687, t604, 0, 0, 0, 0, 0, 0, t635, t637, t630, t544, 0, 0, 0, 0, 0, 0, t565, t571, t549, t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1087, -t1086, 0, t1053, 0, 0, 0, 0, 0, 0, t1025, t1026, t1050, t984, 0, 0, 0, 0, 0, 0, t881, t901, t871, t763, 0, 0, 0, 0, 0, 0, t744, t749, t686, t603, 0, 0, 0, 0, 0, 0, t634, t636, t629, t543, 0, 0, 0, 0, 0, 0, t564, t570, t548, t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1055, t1056, 0, -t1000, 0, 0, 0, 0, 0, 0, t909, t938, t880, t782, 0, 0, 0, 0, 0, 0, t751, t775, t694, t607, 0, 0, 0, 0, 0, 0, t647, t649, t645, t555, 0, 0, 0, 0, 0, 0, t576, t580, t558, t520; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1087, 0, -t1086, 0, t1146, -t1070, -t1053, -pkin(6) * t1053, t1064 * t1127 - t1149, t1049 * t1127 - t1089 * t1123, t1059 * t1127 + t1122 * t1169, t1063 * t1127 + t1149, t1057 * t1127 + t1109 * t1123, t1078 * t1127 + t1108, -pkin(6) * t1025 - t1016 * t1123 + t1019 * t1127, -pkin(6) * t1026 - t1017 * t1123 + t1020 * t1127, -pkin(6) * t1050 + t1000 * t1127, -pkin(6) * t984 - (pkin(1) * t1123 - pkin(7) * t1127) * t1000, t1127 * t948 - t1156, -t1045 * t1123 + t1127 * t882, -t1015 * t1123 + t1127 * t940, t1127 * t947 + t1156, t1013 * t1123 + t1127 * t939, t1127 * t970 + t1108, -pkin(6) * t881 - t1123 * t825 + t1127 * t804, -pkin(6) * t901 - t1123 * t835 + t1127 * t822, -pkin(6) * t871 - t1123 * t836 + t1127 * t724, -pkin(6) * t763 - t1123 * t746 + t1127 * t707, t1127 * t754 + t1158, -t1123 * t979 + t1127 * t695, -t1123 * t920 + t1127 * t784, t1127 * t753 - t1158, -t1123 * t916 + t1127 * t785, t1123 * t1166 + t1127 * t823, -pkin(6) * t744 - t1123 * t669 + t1127 * t614, -pkin(6) * t749 - t1123 * t683 + t1127 * t631, -pkin(6) * t686 - t1123 * t653 + t1127 * t568, -pkin(6) * t603 - t1123 * t582 + t1127 * t554, -t1123 * t878 + t1127 * t691, -t1123 * t818 + t1127 * t654, -t1123 * t854 + t1127 * t657, -t1123 * t876 + t1127 * t690, -t1123 * t855 + t1127 * t658, -t1123 * t903 + t1127 * t701, -pkin(6) * t634 - t1123 * t589 + t1127 * t537, -pkin(6) * t636 - t1123 * t590 + t1127 * t539, -pkin(6) * t629 - t1123 * t575 + t1127 * t536, -pkin(6) * t543 - t1123 * t533 + t1127 * t517, -t1123 * t726 + t1127 * t592, -t1123 * t659 + t1127 * t562, -t1123 * t735 + t1127 * t583, -t1123 * t725 + t1127 * t591, -t1123 * t736 + t1127 * t584, -t1123 * t767 + t1127 * t624, -pkin(6) * t564 - t1123 * t540 + t1127 * t513, -pkin(6) * t570 - t1123 * t542 + t1127 * t516, -pkin(6) * t548 - t1123 * t523 + t1127 * t511, -pkin(6) * t514 - t1123 * t510 + t1127 * t507; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1086, 0, t1087, 0, t1070, t1146, t1054, pkin(6) * t1054, t1064 * t1123 + t1148, t1049 * t1123 + t1089 * t1127, t1059 * t1123 - t1122 * t1168, t1063 * t1123 - t1148, t1057 * t1123 - t1109 * t1127, t1078 * t1123 - t1167, pkin(6) * t1027 + t1016 * t1127 + t1019 * t1123, pkin(6) * t1028 + t1017 * t1127 + t1020 * t1123, pkin(6) * t1051 + t1000 * t1123, pkin(6) * t985 - (-pkin(1) * t1127 - pkin(7) * t1123) * t1000, t1123 * t948 + t1155, t1045 * t1127 + t1123 * t882, t1015 * t1127 + t1123 * t940, t1123 * t947 - t1155, -t1013 * t1127 + t1123 * t939, t1123 * t970 - t1167, pkin(6) * t884 + t1123 * t804 + t1127 * t825, pkin(6) * t902 + t1123 * t822 + t1127 * t835, pkin(6) * t872 + t1123 * t724 + t1127 * t836, pkin(6) * t764 + t1123 * t707 + t1127 * t746, t1123 * t754 - t1157, t1123 * t695 + t1127 * t979, t1123 * t784 + t1127 * t920, t1123 * t753 + t1157, t1123 * t785 + t1127 * t916, t1123 * t823 - t1127 * t1166, pkin(6) * t745 + t1123 * t614 + t1127 * t669, pkin(6) * t750 + t1123 * t631 + t1127 * t683, pkin(6) * t687 + t1123 * t568 + t1127 * t653, pkin(6) * t604 + t1123 * t554 + t1127 * t582, t1123 * t691 + t1127 * t878, t1123 * t654 + t1127 * t818, t1123 * t657 + t1127 * t854, t1123 * t690 + t1127 * t876, t1123 * t658 + t1127 * t855, t1123 * t701 + t1127 * t903, pkin(6) * t635 + t1123 * t537 + t1127 * t589, pkin(6) * t637 + t1123 * t539 + t1127 * t590, pkin(6) * t630 + t1123 * t536 + t1127 * t575, pkin(6) * t544 + t1123 * t517 + t1127 * t533, t1123 * t592 + t1127 * t726, t1123 * t562 + t1127 * t659, t1123 * t583 + t1127 * t735, t1123 * t591 + t1127 * t725, t1123 * t584 + t1127 * t736, t1123 * t624 + t1127 * t767, pkin(6) * t565 + t1123 * t513 + t1127 * t540, pkin(6) * t571 + t1123 * t516 + t1127 * t542, pkin(6) * t549 + t1123 * t511 + t1127 * t523, pkin(6) * t515 + t1123 * t507 + t1127 * t510; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1092, t1093, 0, 0, (t1082 + t1154) * t1122, t1081 * t1126 + t1084 * t1122, t1097 * t1126 + t1180, (t1083 - t1161) * t1126, t1099 * t1122 + t1178, 0, pkin(1) * t1084 + pkin(7) * t1058 + t1181, -pkin(1) * t1081 + pkin(7) * t1060 - t1182, pkin(1) * t1088 + pkin(7) * t1085 + t1001, pkin(1) * t1076 + pkin(7) * t1001, t1122 * t997 + t1126 * t996, t1122 * t963 + t1126 * t961, t1122 * t990 + t1126 * t987, t1122 * t995 + t1126 * t994, t1122 * t989 + t1126 * t986, t1029 * t1126 + t1030 * t1122, -pkin(1) * t1011 + pkin(7) * t910 + t1122 * t937 + t1126 * t905, -pkin(1) * t1014 + pkin(7) * t941 + t1122 * t950 + t1126 * t908, -pkin(1) * t1010 + pkin(7) * t883 + t1122 * t824 + t1126 * t816, pkin(1) * t1009 + pkin(7) * t783 - qJ(3) * t1207 + t1126 * t834, t1122 * t843 + t1126 * t841, t1122 * t761 + t1126 * t759, t1122 * t869 + t1126 * t867, t1122 * t842 + t1126 * t840, t1122 * t870 + t1126 * t868, t1122 * t899 + t1126 * t898, -pkin(1) * t915 + pkin(7) * t752 + t1122 * t711 + t1126 * t693, pkin(1) * t1232 + pkin(7) * t776 + t1122 * t734 + t1126 * t710, -pkin(1) * t949 + pkin(7) * t696 + t1122 * t617 + t1126 * t613, pkin(1) * t930 + pkin(7) * t608 + t1122 * t605 + t1126 * t602, t1122 * t758 + t1126 * t756, t1122 * t715 + t1126 * t714, t1122 * t720 + t1126 * t718, t1122 * t757 + t1126 * t755, t1122 * t721 + t1126 * t719, t1122 * t766 + t1126 * t765, -pkin(1) * t828 + pkin(7) * t648 + t1122 * t569 + t1126 * t566, -pkin(1) * t832 + pkin(7) * t650 + t1122 * t572 + t1126 * t567, -pkin(1) * t819 + pkin(7) * t646 + t1122 * t563 + t1126 * t560, -pkin(1) * t655 + pkin(7) * t556 + t1122 * t534 + t1126 * t531, t1122 * t642 + t1126 * t640, t1122 * t598 + t1126 * t597, t1122 * t621 + t1126 * t619, t1122 * t641 + t1126 * t639, t1122 * t622 + t1126 * t620, t1122 * t681 + t1126 * t680, -pkin(1) * t703 + pkin(7) * t577 + t1122 * t525 + t1126 * t524, -pkin(1) * t722 + pkin(7) * t581 + t1122 * t527 + t1126 * t526, -pkin(1) * t660 + pkin(7) * t559 + t1122 * t522 + t1126 * t519, -pkin(1) * t550 + pkin(7) * t521 + t1122 * t509 + t1126 * t508;];
tauB_reg  = t1;
