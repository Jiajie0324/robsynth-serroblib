% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:52
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR1_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:49:52
% EndTime: 2019-05-06 12:50:28
% DurationCPUTime: 15.99s
% Computational Cost: add. (122972->676), mult. (290154->991), div. (0->0), fcn. (221422->12), ass. (0->419)
t398 = cos(qJ(2));
t381 = t398 * qJDD(1);
t394 = sin(qJ(2));
t442 = qJD(1) * qJD(2);
t432 = t394 * t442;
t368 = t381 - t432;
t387 = t398 ^ 2;
t400 = qJD(1) ^ 2;
t451 = qJD(1) * t394;
t414 = qJD(2) * pkin(2) - qJ(3) * t451;
t395 = sin(qJ(1));
t488 = cos(qJ(1));
t429 = g(1) * t395 - t488 * g(2);
t416 = qJDD(1) * pkin(1) + t429;
t323 = pkin(2) * t368 - t414 * t451 - qJDD(3) + t416 + (qJ(3) * t387 + pkin(7)) * t400;
t388 = sin(pkin(11));
t389 = sin(pkin(10));
t391 = cos(pkin(10));
t450 = qJD(1) * t398;
t361 = -t389 * t451 + t391 * t450;
t362 = t389 * t450 + t391 * t451;
t393 = sin(qJ(4));
t397 = cos(qJ(4));
t340 = t361 * t393 + t362 * t397;
t380 = t394 * qJDD(1);
t431 = t398 * t442;
t367 = t380 + t431;
t348 = -t367 * t389 + t391 * t368;
t349 = t391 * t367 + t368 * t389;
t424 = -t397 * t348 + t349 * t393;
t283 = qJD(4) * t340 + t424;
t385 = qJD(2) + qJD(4);
t390 = cos(pkin(11));
t320 = t340 * t388 - t390 * t385;
t322 = t340 * t390 + t385 * t388;
t293 = t322 * t320;
t496 = t283 - t293;
t506 = t388 * t496;
t347 = t361 * t362;
t492 = qJDD(2) + t347;
t505 = t389 * t492;
t504 = t390 * t496;
t503 = t391 * t492;
t392 = sin(qJ(6));
t396 = cos(qJ(6));
t287 = t396 * t320 + t322 * t392;
t289 = -t320 * t392 + t322 * t396;
t231 = t289 * t287;
t282 = qJDD(6) + t283;
t498 = -t231 + t282;
t502 = t392 * t498;
t338 = -t397 * t361 + t362 * t393;
t308 = t340 * t338;
t441 = qJDD(2) + qJDD(4);
t494 = -t308 + t441;
t501 = t393 * t494;
t500 = t396 * t498;
t499 = t397 * t494;
t359 = t361 ^ 2;
t420 = qJD(2) * pkin(3) - pkin(8) * t362;
t269 = pkin(3) * t348 + pkin(8) * t359 - t362 * t420 + t323;
t358 = qJD(2) * t361;
t328 = t349 - t358;
t383 = t387 * t400;
t486 = t394 * g(3);
t406 = -pkin(2) * t383 + t368 * qJ(3) - qJD(2) * t414 - t486;
t417 = g(1) * t488 + t395 * g(2);
t482 = qJDD(1) * pkin(7);
t410 = -t400 * pkin(1) - t417 + t482;
t408 = t398 * t410;
t403 = t408 + t406;
t409 = t394 * t410;
t405 = qJDD(2) * pkin(2) - t367 * qJ(3) - t409;
t455 = t394 * t400;
t412 = pkin(2) * t455 + qJ(3) * t442 - g(3);
t404 = t398 * t412 + t405;
t445 = qJD(3) * t362;
t440 = -0.2e1 * t445;
t402 = -pkin(8) * t328 - t389 * t403 + t391 * t404 + t440;
t401 = pkin(3) * t492 + t402;
t271 = 0.2e1 * qJD(3) * t361 + t389 * t404 + t391 * t403;
t243 = -t359 * pkin(3) + t348 * pkin(8) - qJD(2) * t420 + t271;
t454 = t397 * t243;
t180 = t393 * t401 + t454;
t305 = pkin(4) * t338 - qJ(5) * t340;
t489 = t385 ^ 2;
t147 = -pkin(4) * t489 + qJ(5) * t441 - t338 * t305 + t180;
t418 = t348 * t393 + t349 * t397;
t284 = -qJD(4) * t338 + t418;
t332 = t385 * t338;
t258 = t284 - t332;
t177 = -t258 * qJ(5) + (t340 * t385 + t283) * pkin(4) - t269;
t106 = 0.2e1 * qJD(5) * t322 + t147 * t388 - t390 * t177;
t107 = -0.2e1 * qJD(5) * t320 + t390 * t147 + t388 * t177;
t60 = t388 * t106 + t390 * t107;
t279 = t390 * t284 + t388 * t441;
t425 = t284 * t388 - t390 * t441;
t189 = -t287 * qJD(6) + t396 * t279 - t392 * t425;
t334 = qJD(6) + t338;
t263 = t334 * t287;
t497 = -t263 + t189;
t300 = t338 * t320;
t239 = -t300 - t279;
t495 = -t300 + t279;
t399 = qJD(2) ^ 2;
t493 = -t383 - t399;
t426 = t279 * t392 + t396 * t425;
t165 = (qJD(6) - t334) * t289 + t426;
t285 = t287 ^ 2;
t286 = t289 ^ 2;
t491 = t320 ^ 2;
t319 = t322 ^ 2;
t333 = t334 ^ 2;
t490 = t338 ^ 2;
t337 = t340 ^ 2;
t360 = t362 ^ 2;
t487 = pkin(4) * t393;
t77 = pkin(5) * t496 + pkin(9) * t239 - t106;
t294 = pkin(5) * t338 - pkin(9) * t322;
t88 = -pkin(5) * t491 - pkin(9) * t425 - t338 * t294 + t107;
t49 = t392 * t88 - t396 * t77;
t50 = t392 * t77 + t396 * t88;
t27 = t392 * t50 - t396 * t49;
t485 = t27 * t388;
t484 = t27 * t390;
t179 = t243 * t393 - t397 * t401;
t146 = -t441 * pkin(4) - t489 * qJ(5) + t305 * t340 + qJDD(5) + t179;
t483 = -pkin(4) * t146 + qJ(5) * t60;
t127 = pkin(5) * t425 - pkin(9) * t491 + t294 * t322 + t146;
t481 = t127 * t392;
t480 = t127 * t396;
t128 = -t179 * t397 + t180 * t393;
t479 = t128 * t389;
t478 = t128 * t391;
t198 = t231 + t282;
t477 = t198 * t392;
t476 = t198 * t396;
t270 = t389 * t406 - t391 * t405 + 0.2e1 * t445 + (t389 * t410 - t391 * t412) * t398;
t222 = -t270 * t391 + t271 * t389;
t475 = t222 * t394;
t241 = t283 + t293;
t474 = t241 * t388;
t473 = t241 * t390;
t472 = t269 * t393;
t471 = t269 * t397;
t470 = t283 * t393;
t303 = t308 + t441;
t469 = t303 * t393;
t468 = t303 * t397;
t467 = t322 * t338;
t466 = t323 * t389;
t465 = t323 * t391;
t464 = t334 * t392;
t463 = t334 * t396;
t462 = t338 * t388;
t461 = t338 * t390;
t344 = qJDD(2) - t347;
t460 = t344 * t389;
t459 = t344 * t391;
t458 = t385 * t393;
t457 = t385 * t397;
t142 = t388 * t146;
t143 = t390 * t146;
t376 = t398 * t455;
t370 = qJDD(2) + t376;
t456 = t394 * t370;
t453 = t398 * (qJDD(2) - t376);
t449 = qJD(2) * t362;
t448 = qJD(2) * t389;
t447 = qJD(2) * t391;
t444 = qJD(4) + t385;
t439 = t393 * t231;
t438 = t397 * t231;
t437 = t393 * t293;
t436 = t397 * t293;
t276 = -t319 - t490;
t196 = -t276 * t388 - t473;
t435 = -pkin(4) * t495 + qJ(5) * t196 + t142;
t265 = -t490 - t491;
t191 = t265 * t390 - t506;
t234 = t425 + t467;
t434 = -pkin(4) * t234 + qJ(5) * t191 - t143;
t433 = -pkin(4) * t397 - pkin(3);
t28 = t392 * t49 + t396 * t50;
t205 = -t285 - t286;
t168 = t263 + t189;
t118 = -t165 * t396 + t168 * t392;
t21 = -pkin(5) * t205 + pkin(9) * t118 + t28;
t116 = -t165 * t392 - t168 * t396;
t24 = -pkin(9) * t116 - t27;
t65 = -t116 * t388 + t118 * t390;
t428 = -pkin(4) * t205 + qJ(5) * t65 + t390 * t21 + t388 * t24;
t164 = (qJD(6) + t334) * t289 + t426;
t224 = -t333 - t285;
t137 = t224 * t396 - t502;
t67 = -pkin(5) * t164 + pkin(9) * t137 - t480;
t136 = t224 * t392 + t500;
t83 = -pkin(9) * t136 + t481;
t97 = -t136 * t388 + t137 * t390;
t427 = -pkin(4) * t164 + qJ(5) * t97 + t388 * t83 + t390 * t67;
t129 = t179 * t393 + t397 * t180;
t223 = t270 * t389 + t391 * t271;
t351 = t398 * g(3) + t409;
t352 = t408 - t486;
t423 = t394 * t351 + t398 * t352;
t244 = -t286 - t333;
t156 = t244 * t396 - t477;
t157 = -t244 * t392 - t476;
t110 = -t156 * t388 + t157 * t390;
t69 = -pkin(5) * t497 + pkin(9) * t157 + t481;
t87 = -pkin(9) * t156 + t480;
t422 = -pkin(4) * t497 + qJ(5) * t110 + t388 * t87 + t390 * t69;
t235 = t425 - t467;
t186 = -t235 * t390 - t239 * t388;
t260 = -t319 - t491;
t421 = -pkin(4) * t260 + qJ(5) * t186 + t60;
t59 = -t106 * t390 + t107 * t388;
t15 = t28 * t390 - t485;
t26 = -pkin(5) * t127 + pkin(9) * t28;
t415 = -pkin(4) * t127 - pkin(9) * t485 + qJ(5) * t15 + t390 * t26;
t326 = t348 + t449;
t413 = (-qJD(4) + t385) * t340 - t424;
t386 = t394 ^ 2;
t382 = t386 * t400;
t369 = t381 - 0.2e1 * t432;
t366 = t380 + 0.2e1 * t431;
t364 = pkin(7) * t400 + t416;
t355 = -t360 - t399;
t354 = -t360 + t399;
t353 = t359 - t399;
t342 = -t399 - t359;
t331 = -t337 + t489;
t330 = t490 - t489;
t329 = -t337 - t489;
t327 = t349 + t358;
t325 = -t348 + t449;
t324 = -t359 - t360;
t312 = -t355 * t389 - t459;
t311 = t355 * t391 - t460;
t310 = t342 * t391 - t505;
t309 = t342 * t389 + t503;
t306 = t337 - t490;
t301 = -t490 - t489;
t298 = -t319 + t490;
t297 = -t490 + t491;
t296 = (-t338 * t397 + t340 * t393) * t385;
t295 = (-t338 * t393 - t340 * t397) * t385;
t292 = -t319 + t491;
t291 = t326 * t391 + t328 * t389;
t290 = t326 * t389 - t328 * t391;
t281 = t397 * t283;
t280 = -t490 - t337;
t275 = t330 * t397 - t469;
t274 = -t331 * t393 + t499;
t273 = t330 * t393 + t468;
t272 = t331 * t397 + t501;
t268 = -t329 * t393 - t468;
t267 = t329 * t397 - t469;
t262 = -t286 + t333;
t261 = t285 - t333;
t259 = t284 + t332;
t257 = -t338 * t444 + t418;
t254 = t340 * t444 + t424;
t252 = t284 * t397 - t340 * t458;
t251 = t284 * t393 + t340 * t457;
t250 = t338 * t457 + t470;
t249 = t338 * t458 - t281;
t248 = t301 * t397 - t501;
t247 = t301 * t393 + t499;
t246 = (-t320 * t390 + t322 * t388) * t338;
t245 = (-t320 * t388 - t322 * t390) * t338;
t230 = t286 - t285;
t229 = t279 * t390 - t322 * t462;
t228 = t279 * t388 + t322 * t461;
t227 = t320 * t461 + t388 * t425;
t226 = t320 * t462 - t390 * t425;
t221 = -pkin(8) * t267 - t471;
t220 = -t267 * t389 + t268 * t391;
t219 = t267 * t391 + t268 * t389;
t218 = (-t287 * t396 + t289 * t392) * t334;
t217 = (-t287 * t392 - t289 * t396) * t334;
t216 = t246 * t397 + t470;
t215 = t246 * t393 - t281;
t214 = t297 * t390 - t474;
t213 = -t298 * t388 + t504;
t212 = t297 * t388 + t473;
t211 = t298 * t390 + t506;
t210 = t259 * t393 + t397 * t413;
t209 = -t254 * t397 - t258 * t393;
t208 = -t259 * t397 + t393 * t413;
t207 = -t254 * t393 + t258 * t397;
t206 = -pkin(8) * t247 - t472;
t204 = t229 * t397 + t437;
t203 = t227 * t397 - t437;
t202 = t229 * t393 - t436;
t201 = t227 * t393 + t436;
t195 = t276 * t390 - t474;
t193 = -t247 * t389 + t248 * t391;
t192 = t247 * t391 + t248 * t389;
t190 = t265 * t388 + t504;
t188 = -qJD(6) * t289 - t426;
t185 = -t234 * t390 - t388 * t495;
t184 = -t235 * t388 + t239 * t390;
t183 = -t234 * t388 + t390 * t495;
t181 = -pkin(3) * t257 + pkin(8) * t268 - t472;
t174 = -pkin(3) * t254 + pkin(8) * t248 + t471;
t173 = t261 * t396 - t477;
t172 = -t262 * t392 + t500;
t171 = t261 * t392 + t476;
t170 = t262 * t396 + t502;
t161 = t189 * t396 - t289 * t464;
t160 = t189 * t392 + t289 * t463;
t159 = -t188 * t392 + t287 * t463;
t158 = t188 * t396 + t287 * t464;
t155 = t214 * t397 - t235 * t393;
t154 = t213 * t397 - t239 * t393;
t153 = t214 * t393 + t235 * t397;
t152 = t213 * t393 + t239 * t397;
t151 = t185 * t397 - t292 * t393;
t150 = t185 * t393 + t292 * t397;
t149 = t196 * t397 + t393 * t495;
t148 = t196 * t393 - t397 * t495;
t141 = t191 * t397 + t234 * t393;
t140 = t191 * t393 - t234 * t397;
t139 = t186 * t397 + t260 * t393;
t138 = t186 * t393 - t260 * t397;
t135 = -t217 * t388 + t218 * t390;
t134 = t217 * t390 + t218 * t388;
t133 = -t208 * t389 + t210 * t391;
t132 = t208 * t391 + t210 * t389;
t131 = t135 * t397 + t282 * t393;
t130 = t135 * t393 - t282 * t397;
t125 = -qJ(5) * t195 + t143;
t124 = -qJ(5) * t190 + t142;
t123 = -t171 * t388 + t173 * t390;
t122 = -t170 * t388 + t172 * t390;
t121 = t171 * t390 + t173 * t388;
t120 = t170 * t390 + t172 * t388;
t119 = pkin(3) * t269 + pkin(8) * t129;
t117 = -t164 * t396 - t392 * t497;
t115 = -t164 * t392 + t396 * t497;
t114 = -t160 * t388 + t161 * t390;
t113 = -t158 * t388 + t159 * t390;
t112 = t160 * t390 + t161 * t388;
t111 = t158 * t390 + t159 * t388;
t109 = t156 * t390 + t157 * t388;
t103 = -t148 * t389 + t149 * t391;
t102 = t148 * t391 + t149 * t389;
t101 = -t140 * t389 + t141 * t391;
t100 = t140 * t391 + t141 * t389;
t99 = -t138 * t389 + t139 * t391;
t98 = t138 * t391 + t139 * t389;
t96 = t136 * t390 + t137 * t388;
t95 = -pkin(8) * t208 - t128;
t93 = t114 * t397 + t439;
t92 = t113 * t397 - t439;
t91 = t114 * t393 - t438;
t90 = t113 * t393 + t438;
t89 = -pkin(3) * t280 + pkin(8) * t210 + t129;
t85 = -pkin(4) * t195 + t107;
t84 = -pkin(4) * t190 + t106;
t81 = t123 * t397 - t165 * t393;
t80 = t122 * t397 + t168 * t393;
t79 = t123 * t393 + t165 * t397;
t78 = t122 * t393 - t168 * t397;
t75 = t110 * t397 + t393 * t497;
t74 = t110 * t393 - t397 * t497;
t73 = t164 * t393 + t397 * t97;
t72 = -t164 * t397 + t393 * t97;
t71 = t129 * t391 - t479;
t70 = t129 * t389 + t478;
t64 = -t115 * t388 + t117 * t390;
t63 = t116 * t390 + t118 * t388;
t62 = t115 * t390 + t117 * t388;
t57 = t230 * t393 + t397 * t64;
t56 = -t230 * t397 + t393 * t64;
t55 = t205 * t393 + t397 * t65;
t54 = -t205 * t397 + t393 * t65;
t53 = -qJ(5) * t184 - t59;
t52 = t146 * t393 + t397 * t60;
t51 = -t146 * t397 + t393 * t60;
t47 = -pkin(8) * t148 + t125 * t397 - t393 * t85;
t46 = -pkin(8) * t140 + t124 * t397 - t393 * t84;
t45 = -pkin(4) * t63 - pkin(5) * t116;
t44 = -t389 * t74 + t391 * t75;
t43 = t389 * t75 + t391 * t74;
t42 = -pkin(3) * t195 + pkin(8) * t149 + t125 * t393 + t397 * t85;
t41 = -pkin(3) * t190 + pkin(8) * t141 + t124 * t393 + t397 * t84;
t40 = -t389 * t72 + t391 * t73;
t39 = t389 * t73 + t391 * t72;
t38 = -pkin(8) * t138 + t184 * t487 + t397 * t53;
t37 = pkin(8) * t139 + t184 * t433 + t393 * t53;
t36 = -qJ(5) * t109 - t388 * t69 + t390 * t87;
t35 = -pkin(4) * t109 - pkin(5) * t156 + t50;
t34 = -pkin(4) * t96 - pkin(5) * t136 + t49;
t33 = -qJ(5) * t96 - t388 * t67 + t390 * t83;
t32 = -t389 * t54 + t391 * t55;
t31 = t389 * t55 + t391 * t54;
t30 = -t389 * t51 + t391 * t52;
t29 = t389 * t52 + t391 * t51;
t22 = -pkin(8) * t51 + (-qJ(5) * t397 + t487) * t59;
t19 = pkin(8) * t52 + (-qJ(5) * t393 + t433) * t59;
t18 = -pkin(8) * t74 - t35 * t393 + t36 * t397;
t17 = -pkin(8) * t72 + t33 * t397 - t34 * t393;
t16 = -pkin(3) * t109 + pkin(8) * t75 + t35 * t397 + t36 * t393;
t14 = t28 * t388 + t484;
t12 = -pkin(3) * t96 + pkin(8) * t73 + t33 * t393 + t34 * t397;
t11 = t127 * t393 + t15 * t397;
t10 = -t127 * t397 + t15 * t393;
t9 = -qJ(5) * t63 - t21 * t388 + t24 * t390;
t8 = -pkin(4) * t14 - pkin(5) * t27;
t7 = -pkin(8) * t54 - t393 * t45 + t397 * t9;
t6 = -pkin(3) * t63 + pkin(8) * t55 + t393 * t9 + t397 * t45;
t5 = -pkin(9) * t484 - qJ(5) * t14 - t26 * t388;
t4 = -t10 * t389 + t11 * t391;
t3 = t10 * t391 + t11 * t389;
t2 = -pkin(8) * t10 - t393 * t8 + t397 * t5;
t1 = -pkin(3) * t14 + pkin(8) * t11 + t393 * t5 + t397 * t8;
t13 = [0, 0, 0, 0, 0, qJDD(1), t429, t417, 0, 0, (t367 + t431) * t394, t366 * t398 + t369 * t394, t456 + t398 * (-t382 + t399), (t368 - t432) * t398, t394 * (t383 - t399) + t453, 0, t398 * t364 + pkin(1) * t369 + pkin(7) * (t398 * t493 - t456), -t394 * t364 - pkin(1) * t366 + pkin(7) * (-t453 - t394 * (-t382 - t399)), pkin(1) * (t382 + t383) + (t386 + t387) * t482 + t423, pkin(1) * t364 + pkin(7) * t423, t394 * (t349 * t391 - t362 * t448) + t398 * (t349 * t389 + t362 * t447), t394 * (-t325 * t391 - t327 * t389) + t398 * (-t325 * t389 + t327 * t391), t394 * (-t354 * t389 + t503) + t398 * (t354 * t391 + t505), t394 * (-t348 * t389 - t361 * t447) + t398 * (t348 * t391 - t361 * t448), t394 * (t353 * t391 - t460) + t398 * (t353 * t389 + t459), (t394 * (t361 * t391 + t362 * t389) + t398 * (t361 * t389 - t362 * t391)) * qJD(2), t394 * (-qJ(3) * t309 - t466) + t398 * (-pkin(2) * t325 + qJ(3) * t310 + t465) - pkin(1) * t325 + pkin(7) * (-t309 * t394 + t310 * t398), t394 * (-qJ(3) * t311 - t465) + t398 * (-pkin(2) * t327 + qJ(3) * t312 - t466) - pkin(1) * t327 + pkin(7) * (-t311 * t394 + t312 * t398), t394 * (-qJ(3) * t290 - t222) + t398 * (-pkin(2) * t324 + qJ(3) * t291 + t223) - pkin(1) * t324 + pkin(7) * (-t290 * t394 + t291 * t398), -qJ(3) * t475 + t398 * (pkin(2) * t323 + qJ(3) * t223) + pkin(1) * t323 + pkin(7) * (t223 * t398 - t475), t394 * (-t251 * t389 + t252 * t391) + t398 * (t251 * t391 + t252 * t389), t394 * (-t207 * t389 + t209 * t391) + t398 * (t207 * t391 + t209 * t389), t394 * (-t272 * t389 + t274 * t391) + t398 * (t272 * t391 + t274 * t389), t394 * (-t249 * t389 + t250 * t391) + t398 * (t249 * t391 + t250 * t389), t394 * (-t273 * t389 + t275 * t391) + t398 * (t273 * t391 + t275 * t389), t394 * (-t295 * t389 + t296 * t391) + t398 * (t295 * t391 + t296 * t389), t394 * (-qJ(3) * t192 - t174 * t389 + t206 * t391) + t398 * (-pkin(2) * t254 + qJ(3) * t193 + t174 * t391 + t206 * t389) - pkin(1) * t254 + pkin(7) * (-t192 * t394 + t193 * t398), t394 * (-qJ(3) * t219 - t181 * t389 + t221 * t391) + t398 * (-pkin(2) * t257 + qJ(3) * t220 + t181 * t391 + t221 * t389) - pkin(1) * t257 + pkin(7) * (-t219 * t394 + t220 * t398), t394 * (-qJ(3) * t132 - t389 * t89 + t391 * t95) + t398 * (-pkin(2) * t280 + qJ(3) * t133 + t389 * t95 + t391 * t89) - pkin(1) * t280 + pkin(7) * (-t132 * t394 + t133 * t398), t394 * (-pkin(8) * t478 - qJ(3) * t70 - t119 * t389) + t398 * (pkin(2) * t269 - pkin(8) * t479 + qJ(3) * t71 + t119 * t391) + pkin(1) * t269 + pkin(7) * (-t394 * t70 + t398 * t71), t394 * (-t202 * t389 + t204 * t391) + t398 * (t202 * t391 + t204 * t389), t394 * (-t150 * t389 + t151 * t391) + t398 * (t150 * t391 + t151 * t389), t394 * (-t152 * t389 + t154 * t391) + t398 * (t152 * t391 + t154 * t389), t394 * (-t201 * t389 + t203 * t391) + t398 * (t201 * t391 + t203 * t389), t394 * (-t153 * t389 + t155 * t391) + t398 * (t153 * t391 + t155 * t389), t394 * (-t215 * t389 + t216 * t391) + t398 * (t215 * t391 + t216 * t389), t394 * (-qJ(3) * t100 - t389 * t41 + t391 * t46) + t398 * (-pkin(2) * t190 + qJ(3) * t101 + t389 * t46 + t391 * t41) - pkin(1) * t190 + pkin(7) * (-t100 * t394 + t101 * t398), t394 * (-qJ(3) * t102 - t389 * t42 + t391 * t47) + t398 * (-pkin(2) * t195 + qJ(3) * t103 + t389 * t47 + t391 * t42) - pkin(1) * t195 + pkin(7) * (-t102 * t394 + t103 * t398), t394 * (-qJ(3) * t98 - t37 * t389 + t38 * t391) + t398 * (-pkin(2) * t184 + qJ(3) * t99 + t37 * t391 + t38 * t389) - pkin(1) * t184 + pkin(7) * (-t394 * t98 + t398 * t99), t394 * (-qJ(3) * t29 - t19 * t389 + t22 * t391) + t398 * (-pkin(2) * t59 + qJ(3) * t30 + t19 * t391 + t22 * t389) - pkin(1) * t59 + pkin(7) * (-t29 * t394 + t30 * t398), t394 * (-t389 * t91 + t391 * t93) + t398 * (t389 * t93 + t391 * t91), t394 * (-t389 * t56 + t391 * t57) + t398 * (t389 * t57 + t391 * t56), t394 * (-t389 * t78 + t391 * t80) + t398 * (t389 * t80 + t391 * t78), t394 * (-t389 * t90 + t391 * t92) + t398 * (t389 * t92 + t391 * t90), t394 * (-t389 * t79 + t391 * t81) + t398 * (t389 * t81 + t391 * t79), t394 * (-t130 * t389 + t131 * t391) + t398 * (t130 * t391 + t131 * t389), t394 * (-qJ(3) * t39 - t12 * t389 + t17 * t391) + t398 * (-pkin(2) * t96 + qJ(3) * t40 + t12 * t391 + t17 * t389) - pkin(1) * t96 + pkin(7) * (-t39 * t394 + t398 * t40), t394 * (-qJ(3) * t43 - t16 * t389 + t18 * t391) + t398 * (-pkin(2) * t109 + qJ(3) * t44 + t16 * t391 + t18 * t389) - pkin(1) * t109 + pkin(7) * (-t394 * t43 + t398 * t44), t394 * (-qJ(3) * t31 - t389 * t6 + t391 * t7) + t398 * (-pkin(2) * t63 + qJ(3) * t32 + t389 * t7 + t391 * t6) - pkin(1) * t63 + pkin(7) * (-t31 * t394 + t32 * t398), t394 * (-qJ(3) * t3 - t1 * t389 + t2 * t391) + t398 * (-pkin(2) * t14 + qJ(3) * t4 + t1 * t391 + t2 * t389) - pkin(1) * t14 + pkin(7) * (-t3 * t394 + t398 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t376, t382 - t383, t380, t376, t381, qJDD(2), -t351, -t352, 0, 0, -t347, t360 - t359, t328, t347, t326, qJDD(2), -t389 * t352 - t391 * t351 + t440 + (-t389 * (t368 + t432) + t391 * (-t367 + t431)) * qJ(3) + (t391 * t370 - t389 * t493 + t309) * pkin(2), pkin(2) * t311 - t271, pkin(2) * t290, pkin(2) * t222, t308, t306, t259, -t308, t413, t441, pkin(2) * t192 + pkin(3) * t247 - t179, pkin(2) * t219 - t454 - t393 * t402 + (-t393 * t492 + t267) * pkin(3), pkin(2) * t132 + pkin(3) * t208, pkin(2) * t70 + pkin(3) * t128, t228, t183, t211, t226, t212, t245, pkin(2) * t100 + pkin(3) * t140 + t434, pkin(2) * t102 + pkin(3) * t148 + t435, pkin(2) * t98 + pkin(3) * t138 + t421, pkin(2) * t29 + pkin(3) * t51 + t483, t112, t62, t120, t111, t121, t134, pkin(2) * t39 + pkin(3) * t72 + t427, pkin(2) * t43 + pkin(3) * t74 + t422, pkin(2) * t31 + pkin(3) * t54 + t428, pkin(2) * t3 + pkin(3) * t10 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t325, t327, t324, -t323, 0, 0, 0, 0, 0, 0, t254, t257, t280, -t269, 0, 0, 0, 0, 0, 0, t190, t195, t184, t59, 0, 0, 0, 0, 0, 0, t96, t109, t63, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t308, t306, t259, -t308, t413, t441, -t179, -t180, 0, 0, t228, t183, t211, t226, t212, t245, t434, t435, t421, t483, t112, t62, t120, t111, t121, t134, t427, t422, t428, t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234, t495, t260, t146, 0, 0, 0, 0, 0, 0, t164, t497, t205, t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, t230, t168, -t231, -t165, t282, -t49, -t50, 0, 0;];
tauJ_reg  = t13;
