% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:52
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:52:22
% EndTime: 2019-05-06 12:52:33
% DurationCPUTime: 10.68s
% Computational Cost: add. (96641->342), mult. (228215->487), div. (0->0), fcn. (174295->12), ass. (0->272)
t2308 = cos(qJ(2));
t2293 = t2308 * qJDD(1);
t2304 = sin(qJ(2));
t2350 = qJD(1) * t2304;
t2331 = qJD(2) * t2350;
t2274 = t2293 - t2331;
t2297 = t2308 ^ 2;
t2311 = qJD(1) ^ 2;
t2320 = qJD(2) * pkin(2) - qJ(3) * t2350;
t2305 = sin(qJ(1));
t2309 = cos(qJ(1));
t2282 = g(1) * t2305 - t2309 * g(2);
t2321 = qJDD(1) * pkin(1) + t2282;
t2237 = pkin(2) * t2274 - t2320 * t2350 - qJDD(3) + t2321 + (qJ(3) * t2297 + pkin(7)) * t2311;
t2349 = qJD(1) * t2308;
t2330 = qJD(2) * t2349;
t2333 = t2304 * qJDD(1);
t2273 = t2330 + t2333;
t2299 = sin(pkin(10));
t2301 = cos(pkin(10));
t2254 = -t2273 * t2299 + t2301 * t2274;
t2266 = -t2299 * t2350 + t2301 * t2349;
t2265 = t2266 ^ 2;
t2267 = (t2299 * t2308 + t2301 * t2304) * qJD(1);
t2324 = qJD(2) * pkin(3) - pkin(8) * t2267;
t2198 = pkin(3) * t2254 + pkin(8) * t2265 - t2267 * t2324 + t2237;
t2303 = sin(qJ(4));
t2307 = cos(qJ(4));
t2246 = -t2307 * t2266 + t2267 * t2303;
t2245 = qJD(6) + t2246;
t2361 = qJD(6) + t2245;
t2248 = t2266 * t2303 + t2267 * t2307;
t2295 = qJD(2) + qJD(4);
t2298 = sin(pkin(11));
t2300 = cos(pkin(11));
t2234 = t2248 * t2298 - t2300 * t2295;
t2236 = t2248 * t2300 + t2295 * t2298;
t2302 = sin(qJ(6));
t2306 = cos(qJ(6));
t2210 = t2306 * t2234 + t2236 * t2302;
t2360 = t2210 ^ 2;
t2212 = -t2234 * t2302 + t2236 * t2306;
t2359 = t2212 ^ 2;
t2358 = t2234 ^ 2;
t2357 = t2236 ^ 2;
t2356 = t2245 ^ 2;
t2221 = t2246 ^ 2;
t2355 = t2248 ^ 2;
t2354 = t2267 ^ 2;
t2353 = t2295 ^ 2;
t2352 = -2 * qJD(5);
t2351 = t2304 * g(3);
t2348 = qJD(2) * t2266;
t2347 = qJD(2) * t2267;
t2346 = t2210 * t2212;
t2345 = t2234 * t2236;
t2344 = t2236 * t2246;
t2343 = t2246 * t2234;
t2342 = t2246 * t2248;
t2341 = t2266 * t2267;
t2340 = t2297 * t2311;
t2283 = -g(1) * t2309 - g(2) * t2305;
t2270 = -pkin(1) * t2311 + qJDD(1) * pkin(7) + t2283;
t2339 = t2304 * t2270;
t2338 = t2304 * t2311;
t2337 = t2308 * t2270;
t2336 = qJD(4) - t2295;
t2335 = qJD(6) - t2245;
t2313 = -pkin(2) * t2340 + t2274 * qJ(3) - qJD(2) * t2320 - t2351;
t2318 = qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2338 - g(3);
t2319 = qJDD(2) * pkin(2) - t2273 * qJ(3) - t2339;
t2200 = t2301 * (t2313 + t2337) + t2299 * (t2308 * t2318 + t2319) + 0.2e1 * qJD(3) * t2266;
t2183 = -t2265 * pkin(3) + t2254 * pkin(8) - qJD(2) * t2324 + t2200;
t2199 = -t2299 * t2313 + t2301 * t2319 - 0.2e1 * qJD(3) * t2267 + (-t2299 * t2270 + t2301 * t2318) * t2308;
t2255 = t2301 * t2273 + t2274 * t2299;
t2242 = -t2255 + t2348;
t2251 = qJDD(2) + t2341;
t2312 = pkin(3) * t2251 + pkin(8) * t2242 + t2199;
t2153 = t2307 * t2183 + t2303 * t2312;
t2296 = t2304 ^ 2;
t2334 = t2296 + t2297;
t2332 = qJDD(2) + qJDD(4);
t2220 = pkin(4) * t2246 - qJ(5) * t2248;
t2138 = -pkin(4) * t2353 + qJ(5) * t2332 - t2246 * t2220 + t2153;
t2325 = -t2307 * t2254 + t2303 * t2255;
t2208 = qJD(4) * t2248 + t2325;
t2322 = -t2303 * t2254 - t2307 * t2255;
t2209 = -qJD(4) * t2246 - t2322;
t2327 = t2295 * t2246 - t2209;
t2151 = t2327 * qJ(5) + (t2248 * t2295 + t2208) * pkin(4) - t2198;
t2116 = t2300 * t2138 + t2298 * t2151 + t2234 * t2352;
t2152 = -t2183 * t2303 + t2307 * t2312;
t2206 = t2300 * t2209 + t2298 * t2332;
t2326 = t2209 * t2298 - t2300 * t2332;
t2328 = -t2302 * t2206 - t2306 * t2326;
t2179 = -t2206 - t2343;
t2180 = t2208 - t2345;
t2115 = -t2298 * t2138 + t2300 * t2151 + t2236 * t2352;
t2317 = -qJDD(6) - t2208;
t2316 = -t2306 * t2206 + t2302 * t2326;
t2137 = -t2332 * pkin(4) - t2353 * qJ(5) + t2220 * t2248 + qJDD(5) - t2152;
t2310 = qJD(2) ^ 2;
t2288 = t2308 * t2338;
t2286 = -t2310 - t2340;
t2285 = -t2296 * t2311 - t2310;
t2281 = -qJDD(2) + t2288;
t2280 = qJDD(2) + t2288;
t2279 = t2334 * t2311;
t2278 = -qJDD(1) * t2305 - t2309 * t2311;
t2277 = qJDD(1) * t2309 - t2305 * t2311;
t2276 = t2334 * qJDD(1);
t2275 = t2293 - 0.2e1 * t2331;
t2272 = 0.2e1 * t2330 + t2333;
t2269 = pkin(7) * t2311 + t2321;
t2262 = -t2310 - t2354;
t2261 = t2337 - t2351;
t2260 = -t2308 * g(3) - t2339;
t2259 = t2281 * t2308 - t2285 * t2304;
t2258 = -t2280 * t2304 + t2286 * t2308;
t2257 = t2281 * t2304 + t2285 * t2308;
t2256 = t2280 * t2308 + t2286 * t2304;
t2252 = -qJDD(2) + t2341;
t2250 = -t2310 - t2265;
t2243 = -t2353 - t2355;
t2241 = t2255 + t2348;
t2240 = t2254 + t2347;
t2239 = -t2254 + t2347;
t2238 = -t2265 - t2354;
t2230 = -t2260 * t2304 + t2261 * t2308;
t2229 = t2260 * t2308 + t2261 * t2304;
t2225 = t2252 * t2301 - t2262 * t2299;
t2224 = t2252 * t2299 + t2262 * t2301;
t2223 = t2250 * t2301 - t2251 * t2299;
t2222 = t2250 * t2299 + t2251 * t2301;
t2219 = -t2332 - t2342;
t2218 = t2332 - t2342;
t2217 = -t2221 - t2353;
t2215 = pkin(5) * t2246 - pkin(9) * t2236;
t2214 = t2240 * t2301 - t2242 * t2299;
t2213 = t2240 * t2299 + t2242 * t2301;
t2207 = -t2355 - t2221;
t2203 = -t2221 - t2357;
t2202 = -t2224 * t2304 + t2225 * t2308;
t2201 = t2224 * t2308 + t2225 * t2304;
t2197 = t2219 * t2307 - t2243 * t2303;
t2196 = t2219 * t2303 + t2243 * t2307;
t2195 = -t2221 - t2358;
t2193 = -t2357 - t2358;
t2192 = t2246 * t2336 + t2322;
t2190 = -t2248 * t2336 - t2325;
t2189 = (qJD(4) + t2295) * t2248 + t2325;
t2188 = -t2222 * t2304 + t2223 * t2308;
t2187 = t2222 * t2308 + t2223 * t2304;
t2186 = t2217 * t2307 - t2218 * t2303;
t2185 = t2217 * t2303 + t2218 * t2307;
t2184 = -t2356 - t2359;
t2181 = -t2208 - t2345;
t2178 = t2206 - t2343;
t2177 = -t2326 + t2344;
t2176 = t2326 + t2344;
t2175 = -t2213 * t2304 + t2214 * t2308;
t2174 = t2213 * t2308 + t2214 * t2304;
t2171 = -t2356 - t2360;
t2170 = -t2199 * t2299 + t2200 * t2301;
t2169 = t2199 * t2301 + t2200 * t2299;
t2168 = -t2196 * t2299 + t2197 * t2301;
t2167 = t2196 * t2301 + t2197 * t2299;
t2166 = t2190 * t2307 - t2192 * t2303;
t2165 = t2190 * t2303 + t2192 * t2307;
t2164 = -t2359 - t2360;
t2163 = t2317 - t2346;
t2162 = -t2317 - t2346;
t2161 = t2181 * t2300 - t2203 * t2298;
t2160 = t2181 * t2298 + t2203 * t2300;
t2159 = -t2185 * t2299 + t2186 * t2301;
t2158 = t2185 * t2301 + t2186 * t2299;
t2157 = -t2180 * t2298 + t2195 * t2300;
t2156 = t2180 * t2300 + t2195 * t2298;
t2155 = t2177 * t2300 - t2179 * t2298;
t2154 = t2177 * t2298 + t2179 * t2300;
t2148 = t2210 * t2335 + t2316;
t2147 = -t2210 * t2361 - t2316;
t2146 = -t2212 * t2335 + t2328;
t2145 = t2212 * t2361 - t2328;
t2144 = t2163 * t2306 - t2184 * t2302;
t2143 = t2163 * t2302 + t2184 * t2306;
t2142 = -t2169 * t2304 + t2170 * t2308;
t2141 = t2169 * t2308 + t2170 * t2304;
t2140 = t2161 * t2307 + t2178 * t2303;
t2139 = t2161 * t2303 - t2178 * t2307;
t2135 = -t2167 * t2304 + t2168 * t2308;
t2134 = t2167 * t2308 + t2168 * t2304;
t2133 = t2157 * t2307 + t2176 * t2303;
t2132 = t2157 * t2303 - t2176 * t2307;
t2131 = t2155 * t2307 + t2193 * t2303;
t2130 = t2155 * t2303 - t2193 * t2307;
t2129 = -t2162 * t2302 + t2171 * t2306;
t2128 = t2162 * t2306 + t2171 * t2302;
t2127 = -t2165 * t2299 + t2166 * t2301;
t2126 = t2165 * t2301 + t2166 * t2299;
t2125 = -t2158 * t2304 + t2159 * t2308;
t2124 = t2158 * t2308 + t2159 * t2304;
t2123 = -t2152 * t2303 + t2153 * t2307;
t2122 = t2152 * t2307 + t2153 * t2303;
t2121 = pkin(5) * t2326 - pkin(9) * t2358 + t2215 * t2236 + t2137;
t2120 = t2146 * t2306 - t2148 * t2302;
t2119 = t2146 * t2302 + t2148 * t2306;
t2118 = -t2143 * t2298 + t2144 * t2300;
t2117 = t2143 * t2300 + t2144 * t2298;
t2114 = -t2139 * t2299 + t2140 * t2301;
t2113 = t2139 * t2301 + t2140 * t2299;
t2112 = -t2132 * t2299 + t2133 * t2301;
t2111 = t2132 * t2301 + t2133 * t2299;
t2110 = -t2130 * t2299 + t2131 * t2301;
t2109 = t2130 * t2301 + t2131 * t2299;
t2108 = -t2128 * t2298 + t2129 * t2300;
t2107 = t2128 * t2300 + t2129 * t2298;
t2106 = -t2126 * t2304 + t2127 * t2308;
t2105 = t2126 * t2308 + t2127 * t2304;
t2104 = -pkin(5) * t2358 - pkin(9) * t2326 - t2246 * t2215 + t2116;
t2103 = pkin(5) * t2180 + pkin(9) * t2179 + t2115;
t2102 = t2118 * t2307 + t2147 * t2303;
t2101 = t2118 * t2303 - t2147 * t2307;
t2100 = t2108 * t2307 + t2145 * t2303;
t2099 = t2108 * t2303 - t2145 * t2307;
t2098 = -t2122 * t2299 + t2123 * t2301;
t2097 = t2122 * t2301 + t2123 * t2299;
t2096 = -t2119 * t2298 + t2120 * t2300;
t2095 = t2119 * t2300 + t2120 * t2298;
t2094 = -t2115 * t2298 + t2116 * t2300;
t2093 = t2115 * t2300 + t2116 * t2298;
t2092 = -t2113 * t2304 + t2114 * t2308;
t2091 = t2113 * t2308 + t2114 * t2304;
t2090 = -t2111 * t2304 + t2112 * t2308;
t2089 = t2111 * t2308 + t2112 * t2304;
t2088 = -t2109 * t2304 + t2110 * t2308;
t2087 = t2109 * t2308 + t2110 * t2304;
t2086 = t2096 * t2307 + t2164 * t2303;
t2085 = t2096 * t2303 - t2164 * t2307;
t2084 = t2094 * t2307 + t2137 * t2303;
t2083 = t2094 * t2303 - t2137 * t2307;
t2082 = t2103 * t2302 + t2104 * t2306;
t2081 = t2103 * t2306 - t2104 * t2302;
t2080 = -t2101 * t2299 + t2102 * t2301;
t2079 = t2101 * t2301 + t2102 * t2299;
t2078 = -t2099 * t2299 + t2100 * t2301;
t2077 = t2099 * t2301 + t2100 * t2299;
t2076 = -t2097 * t2304 + t2098 * t2308;
t2075 = t2097 * t2308 + t2098 * t2304;
t2074 = -t2085 * t2299 + t2086 * t2301;
t2073 = t2085 * t2301 + t2086 * t2299;
t2072 = -t2083 * t2299 + t2084 * t2301;
t2071 = t2083 * t2301 + t2084 * t2299;
t2070 = -t2081 * t2302 + t2082 * t2306;
t2069 = t2081 * t2306 + t2082 * t2302;
t2068 = -t2079 * t2304 + t2080 * t2308;
t2067 = t2079 * t2308 + t2080 * t2304;
t2066 = -t2077 * t2304 + t2078 * t2308;
t2065 = t2077 * t2308 + t2078 * t2304;
t2064 = -t2073 * t2304 + t2074 * t2308;
t2063 = t2073 * t2308 + t2074 * t2304;
t2062 = -t2071 * t2304 + t2072 * t2308;
t2061 = t2071 * t2308 + t2072 * t2304;
t2060 = -t2069 * t2298 + t2070 * t2300;
t2059 = t2069 * t2300 + t2070 * t2298;
t2058 = t2060 * t2307 + t2121 * t2303;
t2057 = t2060 * t2303 - t2121 * t2307;
t2056 = -t2057 * t2299 + t2058 * t2301;
t2055 = t2057 * t2301 + t2058 * t2299;
t2054 = -t2055 * t2304 + t2056 * t2308;
t2053 = t2055 * t2308 + t2056 * t2304;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2278, -t2277, 0, -t2282 * t2305 + t2283 * t2309, 0, 0, 0, 0, 0, 0, t2258 * t2309 - t2275 * t2305, t2259 * t2309 + t2272 * t2305, t2276 * t2309 - t2279 * t2305, t2230 * t2309 - t2269 * t2305, 0, 0, 0, 0, 0, 0, t2188 * t2309 + t2239 * t2305, t2202 * t2309 + t2241 * t2305, t2175 * t2309 + t2238 * t2305, t2142 * t2309 - t2237 * t2305, 0, 0, 0, 0, 0, 0, t2125 * t2309 + t2189 * t2305, t2135 * t2309 - t2305 * t2327, t2106 * t2309 + t2207 * t2305, t2076 * t2309 - t2198 * t2305, 0, 0, 0, 0, 0, 0, t2090 * t2309 + t2156 * t2305, t2092 * t2309 + t2160 * t2305, t2088 * t2309 + t2154 * t2305, t2062 * t2309 + t2093 * t2305, 0, 0, 0, 0, 0, 0, t2066 * t2309 + t2107 * t2305, t2068 * t2309 + t2117 * t2305, t2064 * t2309 + t2095 * t2305, t2054 * t2309 + t2059 * t2305; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2277, t2278, 0, t2282 * t2309 + t2283 * t2305, 0, 0, 0, 0, 0, 0, t2258 * t2305 + t2275 * t2309, t2259 * t2305 - t2272 * t2309, t2276 * t2305 + t2279 * t2309, t2230 * t2305 + t2269 * t2309, 0, 0, 0, 0, 0, 0, t2188 * t2305 - t2239 * t2309, t2202 * t2305 - t2241 * t2309, t2175 * t2305 - t2238 * t2309, t2142 * t2305 + t2237 * t2309, 0, 0, 0, 0, 0, 0, t2125 * t2305 - t2189 * t2309, t2135 * t2305 + t2309 * t2327, t2106 * t2305 - t2207 * t2309, t2076 * t2305 + t2198 * t2309, 0, 0, 0, 0, 0, 0, t2090 * t2305 - t2156 * t2309, t2092 * t2305 - t2160 * t2309, t2088 * t2305 - t2154 * t2309, t2062 * t2305 - t2093 * t2309, 0, 0, 0, 0, 0, 0, t2066 * t2305 - t2107 * t2309, t2068 * t2305 - t2117 * t2309, t2064 * t2305 - t2095 * t2309, t2054 * t2305 - t2059 * t2309; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2256, t2257, 0, t2229, 0, 0, 0, 0, 0, 0, t2187, t2201, t2174, t2141, 0, 0, 0, 0, 0, 0, t2124, t2134, t2105, t2075, 0, 0, 0, 0, 0, 0, t2089, t2091, t2087, t2061, 0, 0, 0, 0, 0, 0, t2065, t2067, t2063, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2311, -qJDD(1), 0, t2283, 0, 0, 0, 0, 0, 0, t2258, t2259, t2276, t2230, 0, 0, 0, 0, 0, 0, t2188, t2202, t2175, t2142, 0, 0, 0, 0, 0, 0, t2125, t2135, t2106, t2076, 0, 0, 0, 0, 0, 0, t2090, t2092, t2088, t2062, 0, 0, 0, 0, 0, 0, t2066, t2068, t2064, t2054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2311, 0, t2282, 0, 0, 0, 0, 0, 0, t2275, -t2272, t2279, t2269, 0, 0, 0, 0, 0, 0, -t2239, -t2241, -t2238, t2237, 0, 0, 0, 0, 0, 0, -t2189, t2327, -t2207, t2198, 0, 0, 0, 0, 0, 0, -t2156, -t2160, -t2154, -t2093, 0, 0, 0, 0, 0, 0, -t2107, -t2117, -t2095, -t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2256, t2257, 0, t2229, 0, 0, 0, 0, 0, 0, t2187, t2201, t2174, t2141, 0, 0, 0, 0, 0, 0, t2124, t2134, t2105, t2075, 0, 0, 0, 0, 0, 0, t2089, t2091, t2087, t2061, 0, 0, 0, 0, 0, 0, t2065, t2067, t2063, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2286, t2281, t2293, t2261, 0, 0, 0, 0, 0, 0, t2223, t2225, t2214, t2170, 0, 0, 0, 0, 0, 0, t2159, t2168, t2127, t2098, 0, 0, 0, 0, 0, 0, t2112, t2114, t2110, t2072, 0, 0, 0, 0, 0, 0, t2078, t2080, t2074, t2056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2280, t2285, -t2333, t2260, 0, 0, 0, 0, 0, 0, t2222, t2224, t2213, t2169, 0, 0, 0, 0, 0, 0, t2158, t2167, t2126, t2097, 0, 0, 0, 0, 0, 0, t2111, t2113, t2109, t2071, 0, 0, 0, 0, 0, 0, t2077, t2079, t2073, t2055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2275, t2272, -t2279, -t2269, 0, 0, 0, 0, 0, 0, t2239, t2241, t2238, -t2237, 0, 0, 0, 0, 0, 0, t2189, -t2327, t2207, -t2198, 0, 0, 0, 0, 0, 0, t2156, t2160, t2154, t2093, 0, 0, 0, 0, 0, 0, t2107, t2117, t2095, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2250, t2252, t2240, t2200, 0, 0, 0, 0, 0, 0, t2186, t2197, t2166, t2123, 0, 0, 0, 0, 0, 0, t2133, t2140, t2131, t2084, 0, 0, 0, 0, 0, 0, t2100, t2102, t2086, t2058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2251, t2262, t2242, t2199, 0, 0, 0, 0, 0, 0, t2185, t2196, t2165, t2122, 0, 0, 0, 0, 0, 0, t2132, t2139, t2130, t2083, 0, 0, 0, 0, 0, 0, t2099, t2101, t2085, t2057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2239, t2241, t2238, -t2237, 0, 0, 0, 0, 0, 0, t2189, -t2327, t2207, -t2198, 0, 0, 0, 0, 0, 0, t2156, t2160, t2154, t2093, 0, 0, 0, 0, 0, 0, t2107, t2117, t2095, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2217, t2219, t2190, t2153, 0, 0, 0, 0, 0, 0, t2157, t2161, t2155, t2094, 0, 0, 0, 0, 0, 0, t2108, t2118, t2096, t2060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2218, t2243, t2192, t2152, 0, 0, 0, 0, 0, 0, -t2176, -t2178, -t2193, -t2137, 0, 0, 0, 0, 0, 0, -t2145, -t2147, -t2164, -t2121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2189, -t2327, t2207, -t2198, 0, 0, 0, 0, 0, 0, t2156, t2160, t2154, t2093, 0, 0, 0, 0, 0, 0, t2107, t2117, t2095, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2181, t2177, t2116, 0, 0, 0, 0, 0, 0, t2129, t2144, t2120, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2180, t2203, t2179, t2115, 0, 0, 0, 0, 0, 0, t2128, t2143, t2119, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2176, t2178, t2193, t2137, 0, 0, 0, 0, 0, 0, t2145, t2147, t2164, t2121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2171, t2163, t2146, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2162, t2184, t2148, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2145, t2147, t2164, t2121;];
f_new_reg  = t1;
