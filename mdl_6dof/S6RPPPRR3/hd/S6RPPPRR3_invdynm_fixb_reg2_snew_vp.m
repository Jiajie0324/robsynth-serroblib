% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RPPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3,theta4]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RPPPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:41:42
% EndTime: 2019-05-05 13:42:01
% DurationCPUTime: 20.40s
% Computational Cost: add. (108306->786), mult. (223139->947), div. (0->0), fcn. (136064->10), ass. (0->459)
t1088 = sin(qJ(5));
t1082 = sin(pkin(10));
t1084 = cos(pkin(10));
t1091 = cos(qJ(5));
t1041 = (t1082 * t1088 - t1084 * t1091) * qJD(1);
t1136 = t1082 * t1091 + t1084 * t1088;
t1042 = t1136 * qJD(1);
t1178 = t1041 * t1042;
t1231 = qJDD(5) - t1178;
t1233 = t1088 * t1231;
t1232 = t1091 * t1231;
t1085 = cos(pkin(9));
t1083 = sin(pkin(9));
t1165 = t1083 * qJDD(1);
t1210 = qJD(1) ^ 2;
t1052 = t1085 * t1210 - t1165;
t1080 = g(3) + qJDD(3);
t1021 = qJ(3) * t1052 + t1080 * t1085;
t1089 = sin(qJ(1));
t1092 = cos(qJ(1));
t1053 = qJDD(1) * t1085 + t1083 * t1210;
t1142 = qJ(3) * t1053 + t1080 * t1083;
t1216 = t1092 * t1052 + t1089 * t1053;
t1230 = -pkin(6) * t1216 + t1092 * t1021 + t1089 * t1142;
t1229 = -2 * qJD(4);
t1094 = t1084 ^ 2;
t1072 = t1094 * t1210;
t1077 = t1082 ^ 2;
t1173 = t1077 * t1210;
t1228 = -t1173 - t1072;
t1076 = 0.2e1 * qJD(2) * qJD(1);
t1060 = t1092 * g(1) + t1089 * g(2);
t1078 = qJDD(1) * qJ(2);
t1133 = t1060 - t1078;
t1208 = pkin(1) + pkin(2);
t1018 = -t1208 * t1210 + t1076 - t1133;
t1059 = t1089 * g(1) - t1092 * g(2);
t1132 = -qJDD(2) + t1059;
t1108 = -qJ(2) * t1210 - t1132;
t1099 = -qJDD(1) * t1208 + t1108;
t975 = t1083 * t1018 - t1085 * t1099;
t1169 = t1085 * t1018;
t976 = t1083 * t1099 + t1169;
t1143 = t1083 * t975 + t1085 * t976;
t925 = t1083 * t976 - t1085 * t975;
t1227 = t1089 * t925 + t1092 * t1143;
t1226 = t1089 * t1143 - t1092 * t925;
t1001 = -t1089 * t1052 + t1092 * t1053;
t1225 = pkin(6) * t1001 + t1089 * t1021 - t1092 * t1142;
t1213 = t1210 * (t1077 + t1094);
t1048 = t1084 * t1213;
t1164 = t1084 * qJDD(1);
t1004 = t1048 * t1083 + t1085 * t1164;
t1008 = -t1048 * t1085 + t1083 * t1164;
t1223 = t1004 * t1092 + t1089 * t1008;
t1222 = t1089 * t1004 - t1008 * t1092;
t1087 = sin(qJ(6));
t1090 = cos(qJ(6));
t1209 = qJD(5) ^ 2;
t1171 = t1082 * t1084;
t1062 = t1210 * t1171;
t1166 = t1082 * qJDD(1);
t1170 = t1084 * t1080;
t1156 = -qJ(2) * t1083 - pkin(3);
t1215 = t1169 - t1083 * t1132 + (-t1083 * t1208 - qJ(4)) * qJDD(1) + t1156 * t1210 + qJD(1) * t1229;
t1096 = pkin(4) * t1062 + pkin(7) * t1166 - t1082 * t1215 + t1170;
t1172 = t1082 * t1080;
t942 = -pkin(4) * t1072 - pkin(7) * t1164 + t1084 * t1215 + t1172;
t854 = t1088 * t1096 + t1091 * t942;
t986 = -pkin(5) * t1041 + pkin(8) * t1042;
t832 = -pkin(5) * t1209 + qJDD(5) * pkin(8) + t1041 * t986 + t854;
t1028 = t1041 * qJD(5);
t1182 = qJD(5) * t1042;
t1122 = -qJ(4) * t1210 + qJDD(4) + t975;
t952 = (pkin(4) * t1084 + pkin(3)) * qJDD(1) + t1122 + t1228 * pkin(7);
t1038 = t1088 * t1166 - t1091 * t1164;
t991 = t1182 + t1038;
t1039 = t1136 * qJDD(1);
t994 = t1028 - t1039;
t851 = (-t994 - t1028) * pkin(8) + (-t991 - t1182) * pkin(5) + t952;
t797 = t1087 * t832 - t1090 * t851;
t798 = t1087 * t851 + t1090 * t832;
t753 = t1087 * t797 + t1090 * t798;
t1011 = -t1090 * qJD(5) - t1042 * t1087;
t1013 = qJD(5) * t1087 - t1042 * t1090;
t1181 = t1013 * t1011;
t985 = -qJDD(6) + t991;
t1100 = -t985 - t1181;
t1221 = t1087 * t1100;
t1218 = t1090 * t1100;
t1199 = qJDD(1) * pkin(1);
t1214 = t1169 + t1083 * (-qJDD(1) * pkin(2) - t1132 - t1199) - qJDD(1) * qJ(4) + qJD(1) * (qJD(1) * t1156 + t1229);
t1047 = t1082 * t1213;
t1198 = qJDD(1) * pkin(3);
t972 = t1122 + t1198;
t1212 = t1082 * (t972 + t1198) + qJ(4) * t1047;
t1009 = t1011 ^ 2;
t1010 = t1013 ^ 2;
t1031 = -qJD(6) + t1041;
t1030 = t1031 ^ 2;
t1036 = t1041 ^ 2;
t1037 = t1042 ^ 2;
t953 = t1082 * t1214 - t1170;
t954 = t1084 * t1214 + t1172;
t884 = t1082 * t954 - t1084 * t953;
t1207 = pkin(3) * t884;
t853 = t1088 * t942 - t1091 * t1096;
t806 = t1088 * t854 - t1091 * t853;
t1206 = pkin(4) * t806;
t973 = t991 - t1182;
t947 = t1039 * t1091 + t1088 * t973;
t1205 = pkin(4) * t947;
t1204 = pkin(5) * t1088;
t1193 = t1083 * t972;
t886 = t1082 * t953 + t1084 * t954;
t840 = t1085 * t886 + t1193;
t1202 = qJ(3) * t840;
t1201 = qJ(3) * t925;
t1200 = qJ(3) * t1143;
t831 = -qJDD(5) * pkin(5) - pkin(8) * t1209 - t1042 * t986 + t853;
t1197 = -pkin(5) * t831 + pkin(8) * t753;
t1195 = qJ(4) * t1085;
t1194 = t1082 * t806;
t1192 = t1084 * t806;
t1191 = t1084 * t972;
t1190 = t1085 * t972;
t828 = t1087 * t831;
t939 = t985 - t1181;
t1189 = t1087 * t939;
t1188 = t1088 * t952;
t989 = qJDD(5) + t1178;
t1187 = t1088 * t989;
t829 = t1090 * t831;
t1186 = t1090 * t939;
t1185 = t1091 * t952;
t1184 = t1091 * t989;
t1180 = t1031 * t1087;
t1179 = t1031 * t1090;
t1177 = t1041 * t1088;
t1176 = t1041 * t1091;
t1175 = t1042 * t1088;
t1174 = t1042 * t1091;
t965 = -t1010 - t1030;
t892 = -t1087 * t965 + t1186;
t1141 = -t1087 * qJDD(5) - t1090 * t994;
t923 = (qJD(6) - t1031) * t1011 + t1141;
t1163 = pkin(5) * t923 + pkin(8) * t892 + t828;
t958 = -t1030 - t1009;
t876 = t1090 * t958 - t1221;
t1152 = t1090 * qJDD(5) - t1087 * t994;
t956 = -qJD(6) * t1013 + t1152;
t981 = t1031 * t1013;
t919 = t956 + t981;
t1162 = pkin(5) * t919 + pkin(8) * t876 - t829;
t1161 = -pkin(5) * t1091 - pkin(4);
t1160 = t1088 * t1181;
t1159 = t1091 * t1181;
t1158 = t1083 * t1178;
t1157 = t1085 * t1178;
t1155 = t1082 * t1164;
t839 = t1083 * t886 - t1190;
t1153 = -qJ(3) * t839 + t1083 * t1207;
t807 = t1088 * t853 + t1091 * t854;
t920 = (-qJD(6) - t1031) * t1013 + t1152;
t957 = -qJD(6) * t1011 - t1141;
t980 = t1011 * t1031;
t922 = t957 - t980;
t838 = t1087 * t922 + t1090 * t920;
t951 = t1009 + t1010;
t1151 = pkin(5) * t951 + pkin(8) * t838 + t753;
t1026 = (pkin(1) * qJD(1) - 0.2e1 * qJD(2)) * qJD(1) + t1133;
t1033 = -t1108 + t1199;
t1150 = -t1092 * t1026 - t1033 * t1089;
t1149 = -t1059 * t1089 - t1092 * t1060;
t743 = t1088 * t753 - t1091 * t831;
t1148 = pkin(4) * t743 + t1197;
t1025 = -t1037 - t1209;
t961 = t1025 * t1091 - t1187;
t1147 = pkin(4) * t961 - t854;
t1146 = pkin(3) * t972 - qJ(4) * t886;
t1057 = t1089 * qJDD(1) + t1092 * t1210;
t1035 = -pkin(6) * t1057 + g(3) * t1092;
t1058 = qJDD(1) * t1092 - t1089 * t1210;
t1034 = pkin(6) * t1058 + g(3) * t1089;
t817 = t1088 * t876 + t1091 * t919;
t1145 = pkin(4) * t817 + t1162;
t822 = t1088 * t892 + t1091 * t923;
t1144 = pkin(4) * t822 + t1163;
t752 = t1087 * t798 - t1090 * t797;
t1015 = -t1062 * t1085 + t1083 * t1155;
t1016 = t1053 * t1171;
t1140 = t1015 * t1092 - t1089 * t1016;
t1139 = t1089 * t1015 + t1016 * t1092;
t1138 = t1089 * t1026 - t1033 * t1092;
t1137 = t1059 * t1092 - t1089 * t1060;
t1135 = -pkin(3) * t1085 - qJ(4) * t1083 - pkin(2);
t987 = -t1036 - t1209;
t943 = t1088 * t987 + t1232;
t1134 = pkin(4) * t943 - t853;
t744 = t1088 * t831 + t1091 * t753;
t712 = pkin(7) * t744 + (-pkin(8) * t1088 + t1161) * t752;
t719 = -pkin(7) * t743 + (-pkin(8) * t1091 + t1204) * t752;
t720 = t1082 * t744 + t1084 * t743;
t696 = -qJ(4) * t720 - t1082 * t712 + t1084 * t719;
t707 = -pkin(3) * t720 - t1148;
t721 = -t1082 * t743 + t1084 * t744;
t717 = t1083 * t721 - t1085 * t752;
t1131 = -qJ(3) * t717 - t1083 * t707 + t1085 * t696;
t836 = t1087 * t920 - t1090 * t922;
t746 = -pkin(8) * t836 - t752;
t814 = -t1088 * t951 + t1091 * t838;
t724 = pkin(7) * t814 + t1088 * t746 + t1161 * t836;
t813 = t1088 * t838 + t1091 * t951;
t727 = -pkin(7) * t813 + t1091 * t746 + t1204 * t836;
t770 = t1082 * t814 + t1084 * t813;
t710 = -qJ(4) * t770 - t1082 * t724 + t1084 * t727;
t1123 = pkin(4) * t813 + t1151;
t722 = -pkin(3) * t770 - t1123;
t771 = -t1082 * t813 + t1084 * t814;
t749 = t1083 * t771 - t1085 * t836;
t1130 = -qJ(3) * t749 - t1083 * t722 + t1085 * t710;
t875 = t1087 * t958 + t1218;
t772 = -pkin(5) * t875 + t797;
t800 = -pkin(8) * t875 + t828;
t818 = -t1088 * t919 + t1091 * t876;
t731 = -pkin(4) * t875 + pkin(7) * t818 + t1088 * t800 + t1091 * t772;
t736 = -pkin(7) * t817 - t1088 * t772 + t1091 * t800;
t776 = t1082 * t818 + t1084 * t817;
t714 = -qJ(4) * t776 - t1082 * t731 + t1084 * t736;
t733 = -pkin(3) * t776 - t1145;
t777 = -t1082 * t817 + t1084 * t818;
t761 = t1083 * t777 - t1085 * t875;
t1129 = -qJ(3) * t761 - t1083 * t733 + t1085 * t714;
t891 = t1090 * t965 + t1189;
t775 = -pkin(5) * t891 + t798;
t801 = -pkin(8) * t891 + t829;
t823 = -t1088 * t923 + t1091 * t892;
t732 = -pkin(4) * t891 + pkin(7) * t823 + t1088 * t801 + t1091 * t775;
t738 = -pkin(7) * t822 - t1088 * t775 + t1091 * t801;
t778 = t1082 * t823 + t1084 * t822;
t716 = -qJ(4) * t778 - t1082 * t732 + t1084 * t738;
t734 = -pkin(3) * t778 - t1144;
t779 = -t1082 * t822 + t1084 * t823;
t763 = t1083 * t779 - t1085 * t891;
t1128 = -qJ(3) * t763 - t1083 * t734 + t1085 * t716;
t759 = t1082 * t807 + t1192;
t793 = -pkin(4) * t952 + pkin(7) * t807;
t729 = -pkin(7) * t1192 - qJ(4) * t759 - t1082 * t793;
t741 = -pkin(3) * t759 - t1206;
t760 = t1084 * t807 - t1194;
t755 = t1083 * t760 - t1085 * t952;
t1127 = -qJ(3) * t755 - t1083 * t741 + t1085 * t729;
t949 = -t1039 * t1088 + t1091 * t973;
t977 = -t1036 - t1037;
t786 = -pkin(4) * t977 + pkin(7) * t949 + t807;
t794 = -pkin(7) * t947 - t806;
t878 = t1082 * t949 + t1084 * t947;
t745 = -qJ(4) * t878 - t1082 * t786 + t1084 * t794;
t833 = -pkin(3) * t878 - t1205;
t880 = -t1082 * t947 + t1084 * t949;
t841 = t1083 * t880 - t1085 * t977;
t1126 = -qJ(3) * t841 - t1083 * t833 + t1085 * t745;
t944 = t1091 * t987 - t1233;
t992 = 0.2e1 * t1182 + t1038;
t847 = pkin(4) * t992 + pkin(7) * t944 - t1185;
t873 = t1082 * t944 + t1084 * t943;
t882 = -pkin(7) * t943 + t1188;
t781 = -qJ(4) * t873 - t1082 * t847 + t1084 * t882;
t799 = -pkin(3) * t873 - t1134;
t874 = -t1082 * t943 + t1084 * t944;
t843 = t1083 * t874 + t1085 * t992;
t1125 = -qJ(3) * t843 - t1083 * t799 + t1085 * t781;
t964 = -t1025 * t1088 - t1184;
t993 = -0.2e1 * t1028 + t1039;
t855 = pkin(4) * t993 + pkin(7) * t964 + t1188;
t893 = -pkin(7) * t961 + t1185;
t902 = t1082 * t964 + t1084 * t961;
t792 = -qJ(4) * t902 - t1082 * t855 + t1084 * t893;
t802 = -pkin(3) * t902 - t1147;
t905 = -t1082 * t961 + t1084 * t964;
t860 = t1083 * t905 + t1085 * t993;
t1124 = -qJ(3) * t860 - t1083 * t802 + t1085 * t792;
t1121 = pkin(3) * t1164 + qJ(4) * t1048 + t1191;
t718 = t1083 * t752 + t1085 * t721;
t1120 = -qJ(3) * t718 - t1083 * t696 - t1085 * t707;
t750 = t1083 * t836 + t1085 * t771;
t1119 = -qJ(3) * t750 - t1083 * t710 - t1085 * t722;
t762 = t1083 * t875 + t1085 * t777;
t1118 = -qJ(3) * t762 - t1083 * t714 - t1085 * t733;
t764 = t1083 * t891 + t1085 * t779;
t1117 = -qJ(3) * t764 - t1083 * t716 - t1085 * t734;
t756 = t1083 * t952 + t1085 * t760;
t1116 = -qJ(3) * t756 - t1083 * t729 - t1085 * t741;
t842 = t1083 * t977 + t1085 * t880;
t1115 = -qJ(3) * t842 - t1083 * t745 - t1085 * t833;
t844 = -t1083 * t992 + t1085 * t874;
t1114 = -qJ(3) * t844 - t1083 * t781 - t1085 * t799;
t861 = -t1083 * t993 + t1085 * t905;
t1113 = -qJ(3) * t861 - t1083 * t792 - t1085 * t802;
t1110 = pkin(3) * t952 + pkin(7) * t1194 - qJ(4) * t760 - t1084 * t793;
t1068 = t1077 * qJDD(1);
t1070 = t1094 * qJDD(1);
t1051 = -t1070 - t1068;
t1109 = -pkin(3) * t1228 + qJ(4) * t1051 + t886;
t1107 = pkin(3) * t752 - qJ(4) * t721 - t1082 * t719 - t1084 * t712;
t1106 = pkin(3) * t836 - qJ(4) * t771 - t1082 * t727 - t1084 * t724;
t1105 = pkin(3) * t875 - qJ(4) * t777 - t1082 * t736 - t1084 * t731;
t1104 = pkin(3) * t891 - qJ(4) * t779 - t1082 * t738 - t1084 * t732;
t1103 = pkin(3) * t977 - qJ(4) * t880 - t1082 * t794 - t1084 * t786;
t1102 = pkin(3) * t992 + qJ(4) * t874 + t1082 * t882 + t1084 * t847;
t1101 = pkin(3) * t993 + qJ(4) * t905 + t1082 * t893 + t1084 * t855;
t1061 = 0.2e1 * t1155;
t1056 = -t1072 + t1173;
t1050 = -t1070 + t1068;
t1046 = t1132 + 0.2e1 * t1199;
t1040 = -t1060 + t1076 + 0.2e1 * t1078;
t1024 = -t1037 + t1209;
t1023 = t1036 - t1209;
t1006 = t1047 * t1085 - t1082 * t1165;
t1003 = t1047 * t1083 + t1085 * t1166;
t1000 = t1051 * t1085 + t1083 * t1228;
t999 = t1050 * t1085 + t1056 * t1083;
t998 = t1051 * t1083 - t1085 * t1228;
t997 = t1050 * t1083 - t1056 * t1085;
t995 = t1037 - t1036;
t984 = pkin(1) * t1033 - qJ(2) * t1026;
t983 = (-t1175 + t1176) * qJD(5);
t982 = (t1174 + t1177) * qJD(5);
t979 = -t1010 + t1030;
t978 = t1009 - t1030;
t974 = t1010 - t1009;
t971 = qJD(5) * t1175 + t1091 * t994;
t970 = -qJD(5) * t1174 + t1088 * t994;
t969 = -qJD(5) * t1176 - t1088 * t991;
t968 = -qJD(5) * t1177 + t1091 * t991;
t967 = t1089 * t1003 + t1006 * t1092;
t966 = -t1003 * t1092 + t1089 * t1006;
t963 = -t1024 * t1088 + t1232;
t962 = t1023 * t1091 - t1187;
t960 = t1024 * t1091 + t1233;
t959 = t1023 * t1088 + t1184;
t950 = t1088 * t993 + t1091 * t992;
t948 = t1088 * t992 - t1091 * t993;
t938 = -qJ(2) * t1052 + t1053 * t1208 + t975;
t937 = qJ(2) * t1053 + t1052 * t1208 + t976;
t935 = (t1011 * t1090 - t1013 * t1087) * t1031;
t934 = (t1011 * t1087 + t1013 * t1090) * t1031;
t933 = -t1082 * t982 + t1084 * t983;
t932 = t1082 * t983 + t1084 * t982;
t929 = qJDD(5) * t1083 + t1085 * t933;
t928 = -t1085 * qJDD(5) + t1083 * t933;
t921 = t957 + t980;
t918 = -t956 + t981;
t915 = qJ(2) * t1080 - t1201;
t914 = t1013 * t1180 + t1090 * t957;
t913 = -t1013 * t1179 + t1087 * t957;
t912 = -t1011 * t1179 - t1087 * t956;
t911 = t1011 * t1180 - t1090 * t956;
t910 = t1080 * t1208 - t1200;
t909 = -t1082 * t970 + t1084 * t971;
t908 = -t1082 * t968 + t1084 * t969;
t907 = t1082 * t971 + t1084 * t970;
t906 = t1082 * t969 + t1084 * t968;
t904 = -t1082 * t960 + t1084 * t963;
t903 = -t1082 * t959 + t1084 * t962;
t901 = t1082 * t963 + t1084 * t960;
t900 = t1082 * t962 + t1084 * t959;
t899 = -t1088 * t985 + t1091 * t935;
t898 = t1088 * t935 + t1091 * t985;
t897 = t1090 * t978 + t1189;
t896 = -t1087 * t979 + t1218;
t895 = t1087 * t978 - t1186;
t894 = t1090 * t979 + t1221;
t890 = -t1039 * t1083 + t1085 * t904;
t889 = t1038 * t1083 + t1085 * t903;
t888 = t1039 * t1085 + t1083 * t904;
t887 = -t1038 * t1085 + t1083 * t903;
t881 = -t1082 * t948 + t1084 * t950;
t879 = t1082 * t950 + t1084 * t948;
t871 = t1085 * t909 + t1158;
t870 = t1085 * t908 - t1158;
t869 = t1083 * t909 - t1157;
t868 = t1083 * t908 + t1157;
t867 = qJ(2) * t1008 + t1004 * t1208 + t1121;
t866 = qJ(2) * t1006 - t1003 * t1208 - t1212;
t865 = -qJ(3) * t1003 - t1083 * t954 + t1084 * t1190;
t864 = qJ(3) * t1004 + t1082 * t1190 - t1083 * t953;
t863 = qJ(3) * t1006 + t1083 * t1191 + t1085 * t954;
t862 = -qJ(3) * t1008 - t1082 * t1193 - t1085 * t953;
t859 = t1091 * t914 + t1160;
t858 = t1091 * t912 - t1160;
t857 = t1088 * t914 - t1159;
t856 = t1088 * t912 + t1159;
t849 = -qJ(3) * t998 - t1085 * t884;
t848 = qJ(3) * t1000 - t1083 * t884;
t846 = t1083 * t995 + t1085 * t881;
t845 = t1083 * t881 - t1085 * t995;
t837 = -t1087 * t921 + t1090 * t919;
t835 = t1087 * t919 + t1090 * t921;
t827 = -t1088 * t918 + t1091 * t897;
t826 = t1088 * t922 + t1091 * t896;
t825 = t1088 * t897 + t1091 * t918;
t824 = t1088 * t896 - t1091 * t922;
t821 = qJ(2) * t1000 - t1208 * t998 - t1109;
t820 = -t1082 * t898 + t1084 * t899;
t819 = t1082 * t899 + t1084 * t898;
t816 = t1088 * t974 + t1091 * t837;
t815 = t1088 * t837 - t1091 * t974;
t812 = qJ(2) * t1143 - t1208 * t925;
t811 = -t1082 * t857 + t1084 * t859;
t810 = -t1082 * t856 + t1084 * t858;
t809 = t1082 * t859 + t1084 * t857;
t808 = t1082 * t858 + t1084 * t856;
t804 = t1083 * t934 + t1085 * t820;
t803 = t1083 * t820 - t1085 * t934;
t790 = t1083 * t913 + t1085 * t811;
t789 = -t1083 * t911 + t1085 * t810;
t788 = t1083 * t811 - t1085 * t913;
t787 = t1083 * t810 + t1085 * t911;
t785 = -t1082 * t825 + t1084 * t827;
t784 = -t1082 * t824 + t1084 * t826;
t783 = t1082 * t827 + t1084 * t825;
t782 = t1082 * t826 + t1084 * t824;
t774 = -t1082 * t815 + t1084 * t816;
t773 = t1082 * t816 + t1084 * t815;
t769 = t1083 * t895 + t1085 * t785;
t768 = t1083 * t894 + t1085 * t784;
t767 = t1083 * t785 - t1085 * t895;
t766 = t1083 * t784 - t1085 * t894;
t765 = (qJ(2) - t1195) * t884 + t1153;
t758 = t1083 * t835 + t1085 * t774;
t757 = t1083 * t774 - t1085 * t835;
t754 = -t1202 + (pkin(1) - t1135) * t884;
t748 = qJ(2) * t840 - t1208 * t839 + t1146;
t747 = qJ(2) * t861 - t1208 * t860 - t1101;
t740 = qJ(2) * t902 + t1124;
t739 = qJ(2) * t844 - t1208 * t843 - t1102;
t737 = t1208 * t902 + t1113;
t735 = qJ(2) * t873 + t1125;
t730 = t1208 * t873 + t1114;
t726 = qJ(2) * t878 + t1126;
t725 = qJ(2) * t842 - t1208 * t841 + t1103;
t723 = t1208 * t878 + t1115;
t711 = qJ(2) * t756 - t1208 * t755 + t1110;
t708 = qJ(2) * t759 + t1127;
t706 = t1208 * t759 + t1116;
t705 = qJ(2) * t764 - t1208 * t763 + t1104;
t704 = qJ(2) * t762 - t1208 * t761 + t1105;
t703 = qJ(2) * t778 + t1128;
t702 = qJ(2) * t776 + t1129;
t701 = t1208 * t778 + t1117;
t700 = t1208 * t776 + t1118;
t699 = qJ(2) * t750 - t1208 * t749 + t1106;
t698 = qJ(2) * t770 + t1130;
t697 = t1208 * t770 + t1119;
t694 = qJ(2) * t720 + t1131;
t693 = qJ(2) * t718 - t1208 * t717 + t1107;
t692 = t1208 * t720 + t1120;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1058, 0, -t1057, 0, -t1034, -t1035, -t1137, -pkin(6) * t1137, 0, t1058, 0, 0, t1057, 0, -t1034, t1138, t1035, pkin(6) * t1138 + (-pkin(1) * t1089 + qJ(2) * t1092) * g(3), 0, 0, -t1001, 0, -t1216, 0, -t1225, t1230, t1226, -pkin(6) * t1226 - t1089 * t910 + t1092 * t915, -t1139, t1089 * t997 + t1092 * t999, t967, t1139, t1222, 0, -pkin(6) * t1223 - t1089 * t862 + t1092 * t864, -pkin(6) * t966 + t1089 * t863 + t1092 * t865, t1092 * t849 + t1089 * t848 - pkin(6) * (t1089 * t1000 - t1092 * t998), t1092 * t765 - t1089 * t754 - pkin(6) * (t1089 * t840 - t1092 * t839), t1089 * t869 + t1092 * t871, t1089 * t845 + t1092 * t846, t1089 * t888 + t1092 * t890, t1089 * t868 + t1092 * t870, t1089 * t887 + t1092 * t889, t1089 * t928 + t1092 * t929, t1092 * t735 - t1089 * t730 - pkin(6) * (t1089 * t844 - t1092 * t843), t1092 * t740 - t1089 * t737 - pkin(6) * (t1089 * t861 - t1092 * t860), t1092 * t726 - t1089 * t723 - pkin(6) * (t1089 * t842 - t1092 * t841), t1092 * t708 - t1089 * t706 - pkin(6) * (t1089 * t756 - t1092 * t755), t1089 * t788 + t1092 * t790, t1089 * t757 + t1092 * t758, t1089 * t766 + t1092 * t768, t1089 * t787 + t1092 * t789, t1089 * t767 + t1092 * t769, t1089 * t803 + t1092 * t804, t1092 * t702 - t1089 * t700 - pkin(6) * (t1089 * t762 - t1092 * t761), t1092 * t703 - t1089 * t701 - pkin(6) * (t1089 * t764 - t1092 * t763), t1092 * t698 - t1089 * t697 - pkin(6) * (t1089 * t750 - t1092 * t749), t1092 * t694 - t1089 * t692 - pkin(6) * (t1089 * t718 - t1092 * t717); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1057, 0, t1058, 0, t1035, -t1034, t1149, pkin(6) * t1149, 0, t1057, 0, 0, -t1058, 0, t1035, t1150, t1034, pkin(6) * t1150 + (pkin(1) * t1092 + qJ(2) * t1089) * g(3), 0, 0, -t1216, 0, t1001, 0, t1230, t1225, -t1227, pkin(6) * t1227 + t1089 * t915 + t1092 * t910, t1140, t1089 * t999 - t1092 * t997, t966, -t1140, -t1223, 0, -pkin(6) * t1222 + t1089 * t864 + t1092 * t862, pkin(6) * t967 + t1089 * t865 - t1092 * t863, t1089 * t849 - t1092 * t848 + pkin(6) * (t1000 * t1092 + t1089 * t998), t1089 * t765 + t1092 * t754 + pkin(6) * (t1089 * t839 + t1092 * t840), t1089 * t871 - t1092 * t869, t1089 * t846 - t1092 * t845, t1089 * t890 - t1092 * t888, t1089 * t870 - t1092 * t868, t1089 * t889 - t1092 * t887, t1089 * t929 - t1092 * t928, t1089 * t735 + t1092 * t730 + pkin(6) * (t1089 * t843 + t1092 * t844), t1089 * t740 + t1092 * t737 + pkin(6) * (t1089 * t860 + t1092 * t861), t1089 * t726 + t1092 * t723 + pkin(6) * (t1089 * t841 + t1092 * t842), t1089 * t708 + t1092 * t706 + pkin(6) * (t1089 * t755 + t1092 * t756), t1089 * t790 - t1092 * t788, t1089 * t758 - t1092 * t757, t1089 * t768 - t1092 * t766, t1089 * t789 - t1092 * t787, t1089 * t769 - t1092 * t767, t1089 * t804 - t1092 * t803, t1089 * t702 + t1092 * t700 + pkin(6) * (t1089 * t761 + t1092 * t762), t1089 * t703 + t1092 * t701 + pkin(6) * (t1089 * t763 + t1092 * t764), t1089 * t698 + t1092 * t697 + pkin(6) * (t1089 * t749 + t1092 * t750), t1089 * t694 + t1092 * t692 + pkin(6) * (t1089 * t717 + t1092 * t718); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1059, t1060, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t1046, 0, t1040, t984, 0, 0, 0, 0, 0, qJDD(1), t938, t937, 0, t812, t1068, t1061, 0, t1070, 0, 0, t867, t866, t821, t748, -t907, -t879, -t901, -t906, -t900, -t932, t739, t747, t725, t711, -t809, -t773, -t782, -t808, -t783, -t819, t704, t705, t699, t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1210, 0, 0, -g(3), -t1059, 0, 0, qJDD(1), 0, 0, t1210, 0, 0, -t1033, g(3), qJ(2) * g(3), 0, 0, -t1053, 0, -t1052, 0, t1142, t1021, -t925, t915, -t1016, t999, t1006, t1016, -t1008, 0, t864, t865, t849, t765, t871, t846, t890, t870, t889, t929, t735, t740, t726, t708, t790, t758, t768, t789, t769, t804, t702, t703, t698, t694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, qJDD(1), 0, g(3), 0, -t1060, 0, 0, t1210, 0, 0, -qJDD(1), 0, g(3), -t1026, 0, pkin(1) * g(3), 0, 0, -t1052, 0, t1053, 0, t1021, -t1142, -t1143, t910, t1015, -t997, -t1003, -t1015, -t1004, 0, t862, -t863, -t848, t754, -t869, -t845, -t888, -t868, -t887, -t928, t730, t737, t723, t706, -t788, -t757, -t766, -t787, -t767, -t803, t700, t701, t697, t692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1059, t1060, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t1046, 0, t1040, t984, 0, 0, 0, 0, 0, qJDD(1), t938, t937, 0, t812, t1068, t1061, 0, t1070, 0, 0, t867, t866, t821, t748, -t907, -t879, -t901, -t906, -t900, -t932, t739, t747, t725, t711, -t809, -t773, -t782, -t808, -t783, -t819, t704, t705, t699, t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t1210, 0, 0, -t1033, g(3), 0, 0, 0, -t1053, 0, -t1052, 0, t1142, t1021, -t925, -t1201, -t1016, t999, t1006, t1016, -t1008, 0, t864, t865, t849, -t1195 * t884 + t1153, t871, t846, t890, t870, t889, t929, t1125, t1124, t1126, t1127, t790, t758, t768, t789, t769, t804, t1129, t1128, t1130, t1131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t1033, 0, -t1026, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(2) * t1053 + t975, pkin(2) * t1052 + t976, 0, -pkin(2) * t925, t1068, t1061, 0, t1070, 0, 0, pkin(2) * t1004 + t1121, -pkin(2) * t1003 - t1212, -pkin(2) * t998 - t1109, -pkin(2) * t839 + t1146, -t907, -t879, -t901, -t906, -t900, -t932, -pkin(2) * t843 - t1102, -pkin(2) * t860 - t1101, -pkin(2) * t841 + t1103, -pkin(2) * t755 + t1110, -t809, -t773, -t782, -t808, -t783, -t819, -pkin(2) * t761 + t1105, -pkin(2) * t763 + t1104, -pkin(2) * t749 + t1106, -pkin(2) * t717 + t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1210, 0, 0, qJDD(1), 0, -g(3), t1026, 0, 0, 0, 0, t1052, 0, -t1053, 0, -t1021, t1142, t1143, -pkin(2) * t1080 + t1200, -t1015, t997, t1003, t1015, t1004, 0, -t862, t863, t848, t1135 * t884 + t1202, t869, t845, t888, t868, t887, t928, -pkin(2) * t873 - t1114, -pkin(2) * t902 - t1113, -pkin(2) * t878 - t1115, -pkin(2) * t759 - t1116, t788, t757, t766, t787, t767, t803, -pkin(2) * t776 - t1118, -pkin(2) * t778 - t1117, -pkin(2) * t770 - t1119, -pkin(2) * t720 - t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t1210, 0, 0, t1080, t975, 0, -t1155, t1050, t1047, t1155, t1048, 0, t1082 * t972, t1191, -t884, -qJ(4) * t884, t909, t881, t904, t908, t903, t933, t781, t792, t745, t729, t811, t774, t784, t810, t785, t820, t714, t716, t710, t696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, -qJDD(1), 0, -t1080, 0, t976, 0, t1062, -t1056, t1166, -t1062, t1164, 0, t953, t954, 0, -t1207, -t1178, -t995, t1039, t1178, -t1038, -qJDD(5), t799, t802, t833, t741, -t913, -t835, -t894, t911, -t895, -t934, t733, t734, t722, t707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t975, -t976, 0, 0, -t1068, -0.2e1 * t1155, 0, -t1070, 0, 0, -t1121, t1212, t1109, -t1146, t907, t879, t901, t906, t900, t932, t1102, t1101, -t1103, -t1110, t809, t773, t782, t808, t783, t819, -t1105, -t1104, -t1106, -t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1166, -t1164, t1062, 0, t1072, 0, 0, t972, t953, 0, t971, t950, t963, t969, t962, t983, t882, t893, t794, -pkin(7) * t806, t859, t816, t826, t858, t827, t899, t736, t738, t727, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1166, -t1173, -t1164, -t1062, 0, -t972, 0, t954, 0, t970, t948, t960, t968, t959, t982, t847, t855, t786, t793, t857, t815, t824, t856, t825, t898, t731, t732, t724, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, t1056, -t1166, t1062, -t1164, 0, -t953, -t954, 0, 0, t1178, t995, -t1039, -t1178, t1038, qJDD(5), t1134, t1147, t1205, t1206, t913, t835, t894, -t911, t895, t934, t1145, t1144, t1123, t1148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t994, t992, t1231, -t1028, t1023, t1028, 0, t952, t853, 0, t914, t837, t896, t912, t897, t935, t800, t801, t746, -pkin(8) * t752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1182, -t993, t1024, t991, t989, t1182, -t952, 0, t854, 0, -t1181, -t974, -t922, t1181, t918, t985, t772, t775, -pkin(5) * t836, -pkin(5) * t752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1178, t995, -t1039, -t1178, t1038, qJDD(5), -t853, -t854, 0, 0, t913, t835, t894, -t911, t895, t934, t1162, t1163, t1151, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t957, t919, t1100, -t980, t978, t980, 0, t831, t797, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t981, t921, t979, t956, -t939, t981, -t831, 0, t798, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1181, t974, t922, -t1181, -t918, -t985, -t797, -t798, 0, 0;];
m_new_reg  = t1;
