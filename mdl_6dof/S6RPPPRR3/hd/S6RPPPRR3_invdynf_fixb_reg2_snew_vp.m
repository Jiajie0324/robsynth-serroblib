% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPPPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:42:01
% EndTime: 2019-05-05 13:42:05
% DurationCPUTime: 3.86s
% Computational Cost: add. (15101->272), mult. (31170->306), div. (0->0), fcn. (19143->10), ass. (0->169)
t1401 = qJD(1) ^ 2;
t1396 = sin(qJ(1));
t1399 = cos(qJ(1));
t1368 = -t1399 * g(1) - t1396 * g(2);
t1407 = qJDD(1) * qJ(2) + (2 * qJD(2) * qJD(1)) + t1368;
t1431 = -pkin(1) - pkin(2);
t1346 = t1431 * t1401 + t1407;
t1390 = sin(pkin(9));
t1392 = cos(pkin(9));
t1367 = t1396 * g(1) - t1399 * g(2);
t1406 = -t1401 * qJ(2) + qJDD(2) - t1367;
t1405 = t1431 * qJDD(1) + t1406;
t1324 = t1392 * t1346 + t1390 * t1405;
t1438 = -pkin(3) * t1401 - qJDD(1) * qJ(4) - (2 * qJD(4) * qJD(1)) + t1324;
t1389 = sin(pkin(10));
t1383 = t1389 ^ 2;
t1391 = cos(pkin(10));
t1384 = t1391 ^ 2;
t1419 = t1383 + t1384;
t1364 = t1419 * t1401;
t1395 = sin(qJ(5));
t1398 = cos(qJ(5));
t1355 = (t1389 * t1395 - t1391 * t1398) * qJD(1);
t1351 = -qJD(6) + t1355;
t1437 = qJD(6) - t1351;
t1411 = t1389 * t1398 + t1391 * t1395;
t1354 = t1411 * qJDD(1);
t1356 = t1411 * qJD(1);
t1394 = sin(qJ(6));
t1397 = cos(qJ(6));
t1341 = -t1397 * qJD(5) - t1356 * t1394;
t1436 = t1341 ^ 2;
t1343 = qJD(5) * t1394 - t1356 * t1397;
t1435 = t1343 ^ 2;
t1434 = t1351 ^ 2;
t1433 = t1355 ^ 2;
t1432 = t1356 ^ 2;
t1429 = qJD(5) * t1356;
t1428 = t1341 * t1343;
t1427 = t1355 * qJD(5);
t1426 = t1355 * t1356;
t1425 = t1383 * t1401;
t1424 = t1384 * t1401;
t1387 = g(3) + qJDD(3);
t1423 = t1391 * t1387;
t1422 = t1391 * t1401;
t1421 = qJD(6) + t1351;
t1314 = t1389 * t1387 + t1438 * t1391;
t1417 = t1391 * qJDD(1);
t1306 = -pkin(4) * t1424 - pkin(7) * t1417 + t1314;
t1404 = t1423 + (pkin(4) * t1422 + qJDD(1) * pkin(7) - t1438) * t1389;
t1280 = t1398 * t1306 + t1395 * t1404;
t1378 = t1389 * qJDD(1);
t1420 = -t1395 * t1378 + t1398 * t1417;
t1418 = t1390 * qJDD(1);
t1279 = -t1306 * t1395 + t1398 * t1404;
t1333 = t1427 - t1354;
t1415 = t1397 * qJDD(5) - t1394 * t1333;
t1323 = -t1390 * t1346 + t1392 * t1405;
t1362 = t1392 * t1401 - t1418;
t1363 = qJDD(1) * t1392 + t1390 * t1401;
t1414 = -t1362 * t1396 + t1399 * t1363;
t1413 = t1420 - 0.2e1 * t1429;
t1412 = t1362 * t1399 + t1363 * t1396;
t1410 = -t1394 * qJDD(5) - t1397 * t1333;
t1409 = -qJDD(6) - t1420 + t1429;
t1408 = -t1401 * qJ(4) + qJDD(4) - t1323;
t1312 = (pkin(4) * t1391 + pkin(3)) * qJDD(1) + t1408 + (-t1425 - t1424) * pkin(7);
t1400 = qJD(5) ^ 2;
t1370 = t1389 * t1422;
t1366 = qJDD(1) * t1399 - t1396 * t1401;
t1365 = qJDD(1) * t1396 + t1399 * t1401;
t1361 = t1419 * qJDD(1);
t1360 = t1391 * t1364;
t1359 = t1389 * t1364;
t1353 = qJDD(1) * pkin(1) - t1406;
t1348 = -pkin(1) * t1401 + t1407;
t1347 = -t1400 - t1432;
t1339 = -t1360 * t1392 + t1390 * t1417;
t1338 = t1359 * t1392 - t1389 * t1418;
t1337 = -t1360 * t1390 - t1392 * t1417;
t1336 = t1359 * t1390 + t1392 * t1378;
t1335 = -t1361 * t1392 - t1364 * t1390;
t1334 = -t1361 * t1390 + t1364 * t1392;
t1332 = t1354 - 0.2e1 * t1427;
t1330 = -qJDD(5) - t1426;
t1329 = qJDD(5) - t1426;
t1328 = -t1400 - t1433;
t1327 = -pkin(5) * t1355 + pkin(8) * t1356;
t1325 = -t1432 - t1433;
t1320 = qJDD(1) * pkin(3) + t1408;
t1318 = -t1434 - t1435;
t1317 = t1330 * t1398 - t1347 * t1395;
t1316 = t1330 * t1395 + t1347 * t1398;
t1315 = -t1434 - t1436;
t1313 = -t1389 * t1438 + t1423;
t1311 = -t1435 - t1436;
t1310 = -t1354 * t1395 - t1398 * t1420;
t1309 = t1354 * t1398 - t1395 * t1420;
t1308 = t1328 * t1398 - t1329 * t1395;
t1307 = t1328 * t1395 + t1329 * t1398;
t1305 = -t1409 - t1428;
t1304 = t1409 - t1428;
t1300 = -t1323 * t1390 + t1324 * t1392;
t1299 = t1323 * t1392 + t1324 * t1390;
t1298 = t1421 * t1341 + t1410;
t1297 = -t1341 * t1437 - t1410;
t1296 = -t1421 * t1343 + t1415;
t1295 = t1343 * t1437 - t1415;
t1294 = -t1316 * t1389 + t1317 * t1391;
t1293 = t1316 * t1391 + t1317 * t1389;
t1292 = t1304 * t1397 - t1318 * t1394;
t1291 = t1304 * t1394 + t1318 * t1397;
t1290 = -t1313 * t1389 + t1314 * t1391;
t1289 = t1313 * t1391 + t1314 * t1389;
t1288 = -t1309 * t1389 + t1310 * t1391;
t1287 = t1309 * t1391 + t1310 * t1389;
t1286 = -t1305 * t1394 + t1315 * t1397;
t1285 = t1305 * t1397 + t1315 * t1394;
t1284 = -t1307 * t1389 + t1308 * t1391;
t1283 = t1307 * t1391 + t1308 * t1389;
t1282 = t1294 * t1392 - t1332 * t1390;
t1281 = t1294 * t1390 + t1332 * t1392;
t1278 = (-t1333 - t1427) * pkin(8) + t1413 * pkin(5) + t1312;
t1277 = t1284 * t1392 + t1390 * t1413;
t1276 = t1284 * t1390 - t1392 * t1413;
t1275 = t1288 * t1392 + t1325 * t1390;
t1274 = t1288 * t1390 - t1325 * t1392;
t1273 = t1290 * t1392 + t1320 * t1390;
t1272 = t1290 * t1390 - t1320 * t1392;
t1271 = t1296 * t1397 - t1298 * t1394;
t1270 = t1296 * t1394 + t1298 * t1397;
t1269 = -pkin(5) * t1400 + qJDD(5) * pkin(8) + t1327 * t1355 + t1280;
t1268 = -qJDD(5) * pkin(5) - t1400 * pkin(8) - t1327 * t1356 - t1279;
t1267 = t1292 * t1398 + t1297 * t1395;
t1266 = t1292 * t1395 - t1297 * t1398;
t1265 = t1286 * t1398 + t1295 * t1395;
t1264 = t1286 * t1395 - t1295 * t1398;
t1263 = t1271 * t1398 + t1311 * t1395;
t1262 = t1271 * t1395 - t1311 * t1398;
t1261 = -t1279 * t1395 + t1280 * t1398;
t1260 = t1279 * t1398 + t1280 * t1395;
t1259 = t1269 * t1397 + t1278 * t1394;
t1258 = -t1269 * t1394 + t1278 * t1397;
t1257 = -t1266 * t1389 + t1267 * t1391;
t1256 = t1266 * t1391 + t1267 * t1389;
t1255 = -t1264 * t1389 + t1265 * t1391;
t1254 = t1264 * t1391 + t1265 * t1389;
t1253 = -t1262 * t1389 + t1263 * t1391;
t1252 = t1262 * t1391 + t1263 * t1389;
t1251 = t1257 * t1392 + t1291 * t1390;
t1250 = t1257 * t1390 - t1291 * t1392;
t1249 = t1255 * t1392 + t1285 * t1390;
t1248 = t1255 * t1390 - t1285 * t1392;
t1247 = -t1260 * t1389 + t1261 * t1391;
t1246 = t1260 * t1391 + t1261 * t1389;
t1245 = t1247 * t1392 + t1312 * t1390;
t1244 = t1247 * t1390 - t1312 * t1392;
t1243 = -t1258 * t1394 + t1259 * t1397;
t1242 = t1258 * t1397 + t1259 * t1394;
t1241 = t1253 * t1392 + t1270 * t1390;
t1240 = t1253 * t1390 - t1270 * t1392;
t1239 = t1243 * t1398 + t1268 * t1395;
t1238 = t1243 * t1395 - t1268 * t1398;
t1237 = -t1238 * t1389 + t1239 * t1391;
t1236 = t1238 * t1391 + t1239 * t1389;
t1235 = t1237 * t1392 + t1242 * t1390;
t1234 = t1237 * t1390 - t1242 * t1392;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1365, -t1366, 0, -t1367 * t1396 + t1368 * t1399, 0, 0, 0, 0, 0, 0, -t1365, 0, t1366, t1348 * t1399 - t1353 * t1396, 0, 0, 0, 0, 0, 0, -t1412, t1414, 0, t1299 * t1396 + t1300 * t1399, 0, 0, 0, 0, 0, 0, t1337 * t1396 + t1339 * t1399, t1336 * t1396 + t1338 * t1399, t1334 * t1396 + t1335 * t1399, t1272 * t1396 + t1273 * t1399, 0, 0, 0, 0, 0, 0, t1276 * t1396 + t1277 * t1399, t1281 * t1396 + t1282 * t1399, t1274 * t1396 + t1275 * t1399, t1244 * t1396 + t1245 * t1399, 0, 0, 0, 0, 0, 0, t1248 * t1396 + t1249 * t1399, t1250 * t1396 + t1251 * t1399, t1240 * t1396 + t1241 * t1399, t1234 * t1396 + t1235 * t1399; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1366, -t1365, 0, t1367 * t1399 + t1368 * t1396, 0, 0, 0, 0, 0, 0, t1366, 0, t1365, t1348 * t1396 + t1353 * t1399, 0, 0, 0, 0, 0, 0, t1414, t1412, 0, -t1299 * t1399 + t1300 * t1396, 0, 0, 0, 0, 0, 0, -t1337 * t1399 + t1339 * t1396, -t1336 * t1399 + t1338 * t1396, -t1334 * t1399 + t1335 * t1396, -t1272 * t1399 + t1273 * t1396, 0, 0, 0, 0, 0, 0, -t1276 * t1399 + t1277 * t1396, -t1281 * t1399 + t1282 * t1396, -t1274 * t1399 + t1275 * t1396, -t1244 * t1399 + t1245 * t1396, 0, 0, 0, 0, 0, 0, -t1248 * t1399 + t1249 * t1396, -t1250 * t1399 + t1251 * t1396, -t1240 * t1399 + t1241 * t1396, -t1234 * t1399 + t1235 * t1396; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1387, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1289, 0, 0, 0, 0, 0, 0, -t1283, -t1293, -t1287, -t1246, 0, 0, 0, 0, 0, 0, -t1254, -t1256, -t1252, -t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1401, -qJDD(1), 0, t1368, 0, 0, 0, 0, 0, 0, -t1401, 0, qJDD(1), t1348, 0, 0, 0, 0, 0, 0, -t1362, t1363, 0, t1300, 0, 0, 0, 0, 0, 0, t1339, t1338, t1335, t1273, 0, 0, 0, 0, 0, 0, t1277, t1282, t1275, t1245, 0, 0, 0, 0, 0, 0, t1249, t1251, t1241, t1235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1401, 0, t1367, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t1401, t1353, 0, 0, 0, 0, 0, 0, t1363, t1362, 0, -t1299, 0, 0, 0, 0, 0, 0, -t1337, -t1336, -t1334, -t1272, 0, 0, 0, 0, 0, 0, -t1276, -t1281, -t1274, -t1244, 0, 0, 0, 0, 0, 0, -t1248, -t1250, -t1240, -t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1387, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1289, 0, 0, 0, 0, 0, 0, -t1283, -t1293, -t1287, -t1246, 0, 0, 0, 0, 0, 0, -t1254, -t1256, -t1252, -t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1401, 0, qJDD(1), t1348, 0, 0, 0, 0, 0, 0, -t1362, t1363, 0, t1300, 0, 0, 0, 0, 0, 0, t1339, t1338, t1335, t1273, 0, 0, 0, 0, 0, 0, t1277, t1282, t1275, t1245, 0, 0, 0, 0, 0, 0, t1249, t1251, t1241, t1235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1387, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1289, 0, 0, 0, 0, 0, 0, -t1283, -t1293, -t1287, -t1246, 0, 0, 0, 0, 0, 0, -t1254, -t1256, -t1252, -t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t1401, -t1353, 0, 0, 0, 0, 0, 0, -t1363, -t1362, 0, t1299, 0, 0, 0, 0, 0, 0, t1337, t1336, t1334, t1272, 0, 0, 0, 0, 0, 0, t1276, t1281, t1274, t1244, 0, 0, 0, 0, 0, 0, t1248, t1250, t1240, t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1401, qJDD(1), 0, t1324, 0, 0, 0, 0, 0, 0, -t1360, t1359, -t1361, t1290, 0, 0, 0, 0, 0, 0, t1284, t1294, t1288, t1247, 0, 0, 0, 0, 0, 0, t1255, t1257, t1253, t1237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t1401, 0, t1323, 0, 0, 0, 0, 0, 0, -t1417, t1378, t1364, -t1320, 0, 0, 0, 0, 0, 0, -t1413, t1332, -t1325, -t1312, 0, 0, 0, 0, 0, 0, -t1285, -t1291, -t1270, -t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1387, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1289, 0, 0, 0, 0, 0, 0, t1283, t1293, t1287, t1246, 0, 0, 0, 0, 0, 0, t1254, t1256, t1252, t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1424, t1370, -t1417, t1314, 0, 0, 0, 0, 0, 0, t1308, t1317, t1310, t1261, 0, 0, 0, 0, 0, 0, t1265, t1267, t1263, t1239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1370, -t1425, t1378, t1313, 0, 0, 0, 0, 0, 0, t1307, t1316, t1309, t1260, 0, 0, 0, 0, 0, 0, t1264, t1266, t1262, t1238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1417, -t1378, -t1364, t1320, 0, 0, 0, 0, 0, 0, t1413, -t1332, t1325, t1312, 0, 0, 0, 0, 0, 0, t1285, t1291, t1270, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1328, t1330, -t1420, t1280, 0, 0, 0, 0, 0, 0, t1286, t1292, t1271, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1329, t1347, t1354, t1279, 0, 0, 0, 0, 0, 0, -t1295, -t1297, -t1311, -t1268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1413, -t1332, t1325, t1312, 0, 0, 0, 0, 0, 0, t1285, t1291, t1270, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, t1304, t1296, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1305, t1318, t1298, t1258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1295, t1297, t1311, t1268;];
f_new_reg  = t1;
