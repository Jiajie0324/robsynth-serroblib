% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:41:29
% EndTime: 2019-05-05 13:41:42
% DurationCPUTime: 13.43s
% Computational Cost: add. (51206->614), mult. (105450->904), div. (0->0), fcn. (64475->10), ass. (0->392)
t608 = sin(qJ(5));
t611 = cos(qJ(5));
t604 = cos(pkin(10));
t649 = qJD(1) * t604;
t602 = sin(pkin(10));
t653 = t602 * t608;
t561 = qJD(1) * t653 - t611 * t649;
t624 = t602 * t611 + t604 * t608;
t562 = t624 * qJD(1);
t658 = t561 * t562;
t689 = qJDD(5) - t658;
t691 = t608 * t689;
t690 = t611 * t689;
t603 = sin(pkin(9));
t640 = t603 * qJDD(1);
t605 = cos(pkin(9));
t677 = qJD(1) ^ 2;
t647 = t677 * t605;
t571 = -t640 + t647;
t642 = qJDD(1) * t605;
t572 = t603 * t677 + t642;
t609 = sin(qJ(1));
t612 = cos(qJ(1));
t516 = t612 * t571 + t572 * t609;
t600 = g(3) + qJDD(3);
t542 = qJ(3) * t572 + t600 * t603;
t627 = qJ(3) * t571 + t600 * t605;
t688 = -pkin(6) * t516 + t542 * t609 + t612 * t627;
t597 = t604 ^ 2;
t590 = t597 * t677;
t596 = t602 ^ 2;
t648 = t677 * t596;
t574 = t590 + t648;
t679 = t677 * (t596 + t597);
t567 = t604 * t679;
t526 = -t567 * t605 + t604 * t640;
t629 = -t567 * t603 - t604 * t642;
t479 = t526 * t609 - t612 * t629;
t481 = t526 * t612 + t609 * t629;
t630 = -t571 * t609 + t612 * t572;
t686 = -pkin(6) * t630 + t542 * t612 - t609 * t627;
t598 = qJDD(1) * qJ(2);
t579 = t612 * g(1) + t609 * g(2);
t623 = 0.2e1 * qJD(2) * qJD(1) - t579;
t620 = t598 + t623;
t675 = pkin(1) + pkin(2);
t540 = -t675 * t677 + t620;
t578 = t609 * g(1) - t612 * g(2);
t622 = -qJDD(2) + t578;
t618 = -qJ(2) * t677 - t622;
t617 = -qJDD(1) * t675 + t618;
t489 = t603 * t540 - t605 * t617;
t490 = t605 * t540 + t603 * t617;
t441 = t489 * t605 - t490 * t603;
t442 = t489 * t603 + t490 * t605;
t363 = t441 * t612 + t442 * t609;
t685 = t441 * t609 - t442 * t612;
t607 = sin(qJ(6));
t646 = qJD(5) * t562;
t643 = qJDD(1) * t604;
t650 = qJDD(1) * t653 - t611 * t643;
t506 = t646 + t650;
t500 = -qJDD(6) + t506;
t610 = cos(qJ(6));
t532 = -t610 * qJD(5) - t562 * t607;
t534 = qJD(5) * t607 - t562 * t610;
t661 = t532 * t534;
t619 = -t500 - t661;
t684 = t607 * t619;
t682 = t610 * t619;
t560 = t624 * qJDD(1);
t645 = t561 * qJD(5);
t509 = t645 - t560;
t466 = -t532 * qJD(6) + t607 * qJDD(5) + t610 * t509;
t552 = -qJD(6) + t561;
t496 = t532 * t552;
t436 = t496 + t466;
t631 = -t610 * qJDD(5) + t607 * t509;
t433 = (qJD(6) + t552) * t534 + t631;
t530 = t532 ^ 2;
t531 = t534 ^ 2;
t551 = t552 ^ 2;
t557 = t561 ^ 2;
t558 = t562 ^ 2;
t676 = -2 * qJD(4);
t674 = pkin(5) * t608;
t673 = qJDD(1) * pkin(1);
t672 = qJDD(1) * pkin(3);
t628 = -qJDD(1) * qJ(4) + t490;
t464 = t604 * (-pkin(3) * t677 + t628) + t602 * t600 + t649 * t676;
t454 = -pkin(4) * t590 - pkin(7) * t643 + t464;
t635 = pkin(4) * t604 + pkin(3);
t651 = t604 * t600;
t616 = t651 + ((pkin(7) + qJ(4)) * qJDD(1) + (qJD(1) * t635 + (2 * qJD(4))) * qJD(1) - t490) * t602;
t380 = t454 * t608 - t611 * t616;
t381 = t611 * t454 + t608 * t616;
t336 = -t380 * t611 + t381 * t608;
t671 = t336 * t602;
t670 = t336 * t604;
t501 = -pkin(5) * t561 + pkin(8) * t562;
t613 = qJD(5) ^ 2;
t356 = -qJDD(5) * pkin(5) - pkin(8) * t613 - t501 * t562 + t380;
t669 = t356 * t607;
t668 = t356 * t610;
t451 = t500 - t661;
t667 = t451 * t607;
t666 = t451 * t610;
t621 = -t677 * qJ(4) + qJDD(4) + t489;
t462 = -pkin(7) * t574 + qJDD(1) * t635 + t621;
t665 = t462 * t608;
t664 = t462 * t611;
t504 = qJDD(5) + t658;
t663 = t504 * t608;
t662 = t504 * t611;
t660 = t552 * t607;
t659 = t552 * t610;
t486 = t621 + t672;
t655 = t602 * t486;
t654 = t602 * t604;
t652 = t604 * t486;
t357 = -pkin(5) * t613 + qJDD(5) * pkin(8) + t501 * t561 + t381;
t378 = (-t509 - t645) * pkin(8) + (-t506 - t646) * pkin(5) + t462;
t327 = t610 * t357 + t607 * t378;
t641 = t597 * qJDD(1);
t639 = t608 * t661;
t638 = t611 * t661;
t637 = t603 * t658;
t636 = t605 * t658;
t634 = -pkin(5) * t611 - pkin(4);
t633 = t602 * t643;
t632 = t486 + t672;
t326 = t357 * t607 - t610 * t378;
t337 = t380 * t608 + t611 * t381;
t548 = -pkin(1) * t677 + t620;
t554 = -t618 + t673;
t495 = t612 * t548 - t554 * t609;
t529 = -t578 * t609 - t612 * t579;
t576 = qJDD(1) * t609 + t612 * t677;
t556 = -pkin(6) * t576 + g(3) * t612;
t577 = qJDD(1) * t612 - t609 * t677;
t555 = pkin(6) * t577 + g(3) * t609;
t284 = -t326 * t610 + t327 * t607;
t285 = t326 * t607 + t327 * t610;
t463 = -t651 + ((-pkin(3) * qJD(1) + t676) * qJD(1) + t628) * t602;
t406 = t463 * t604 - t464 * t602;
t407 = t602 * t463 + t604 * t464;
t537 = t603 * t633 - t647 * t654;
t538 = t572 * t654;
t626 = t537 * t612 - t538 * t609;
t625 = t537 * t609 + t538 * t612;
t494 = t548 * t609 + t554 * t612;
t528 = t578 * t612 - t579 * t609;
t588 = t596 * qJDD(1);
t575 = t590 - t648;
t570 = -t588 - t641;
t569 = t588 - t641;
t566 = t602 * t679;
t547 = -t558 - t613;
t546 = -t558 + t613;
t545 = t557 - t613;
t524 = t566 * t605 - t602 * t640;
t521 = t566 * t603 + t602 * t642;
t515 = t570 * t605 - t574 * t603;
t514 = t569 * t605 - t575 * t603;
t513 = t570 * t603 + t574 * t605;
t512 = -t569 * t603 - t575 * t605;
t510 = -t558 + t557;
t508 = t560 - 0.2e1 * t645;
t507 = 0.2e1 * t646 + t650;
t502 = -t613 - t557;
t498 = (t561 * t611 - t562 * t608) * qJD(5);
t497 = (t561 * t608 + t562 * t611) * qJD(5);
t493 = -t531 + t551;
t492 = t530 - t551;
t491 = -t557 - t558;
t488 = -t531 + t530;
t487 = t506 - t646;
t485 = t509 * t611 + t608 * t646;
t484 = t509 * t608 - t611 * t646;
t483 = -t506 * t608 - t611 * t645;
t482 = t506 * t611 - t608 * t645;
t480 = t521 * t609 + t524 * t612;
t478 = -t521 * t612 + t524 * t609;
t476 = -t531 - t551;
t475 = -t547 * t608 - t662;
t474 = -t546 * t608 + t690;
t473 = t545 * t611 - t663;
t472 = t547 * t611 - t663;
t471 = t546 * t611 + t691;
t470 = t545 * t608 + t662;
t469 = t513 * t609 + t515 * t612;
t468 = -t513 * t612 + t515 * t609;
t467 = -t551 - t530;
t465 = -qJD(6) * t534 - t631;
t461 = t530 + t531;
t460 = t507 * t611 + t508 * t608;
t459 = t487 * t611 - t560 * t608;
t458 = t507 * t608 - t508 * t611;
t457 = t487 * t608 + t560 * t611;
t456 = t502 * t611 - t691;
t455 = t502 * t608 + t690;
t449 = (t532 * t610 - t534 * t607) * t552;
t448 = (-t532 * t607 - t534 * t610) * t552;
t447 = -t497 * t602 + t498 * t604;
t444 = qJDD(5) * t603 + t447 * t605;
t443 = qJDD(5) * t605 - t447 * t603;
t437 = t496 - t466;
t434 = (-qJD(6) + t552) * t534 - t631;
t432 = qJ(2) * t600 + qJ(3) * t441;
t431 = t466 * t610 + t534 * t660;
t430 = -t466 * t607 + t534 * t659;
t429 = -t465 * t607 - t532 * t659;
t428 = -t465 * t610 + t532 * t660;
t427 = -qJ(3) * t442 + t600 * t675;
t426 = -t484 * t602 + t485 * t604;
t425 = -t482 * t602 + t483 * t604;
t424 = -t472 * t602 + t475 * t604;
t423 = -t471 * t602 + t474 * t604;
t422 = -t470 * t602 + t473 * t604;
t421 = t472 * t604 + t475 * t602;
t420 = t449 * t611 - t500 * t608;
t419 = t449 * t608 + t500 * t611;
t418 = t492 * t610 + t667;
t417 = -t493 * t607 + t682;
t416 = -t492 * t607 + t666;
t415 = -t493 * t610 - t684;
t414 = -pkin(7) * t472 + t664;
t413 = -t476 * t607 + t666;
t412 = t476 * t610 + t667;
t411 = t423 * t605 - t560 * t603;
t410 = t422 * t605 + t603 * t650;
t409 = -t423 * t603 - t560 * t605;
t408 = -t422 * t603 + t605 * t650;
t404 = -pkin(7) * t455 + t665;
t403 = -t458 * t602 + t460 * t604;
t402 = -t457 * t602 + t459 * t604;
t401 = t457 * t604 + t459 * t602;
t400 = t467 * t610 - t684;
t399 = t467 * t607 + t682;
t398 = -t455 * t602 + t456 * t604;
t397 = t455 * t604 + t456 * t602;
t396 = t426 * t605 + t637;
t395 = t425 * t605 - t637;
t394 = -t426 * t603 + t636;
t393 = -t425 * t603 - t636;
t392 = -qJ(3) * t521 - t464 * t603 + t605 * t652;
t391 = -qJ(3) * t629 - t463 * t603 + t605 * t655;
t390 = -qJ(3) * t524 - t464 * t605 - t603 * t652;
t389 = -qJ(3) * t526 - t463 * t605 - t603 * t655;
t388 = t424 * t605 - t508 * t603;
t387 = t424 * t603 + t508 * t605;
t386 = t431 * t611 + t639;
t385 = t429 * t611 - t639;
t384 = t431 * t608 - t638;
t383 = t429 * t608 + t638;
t382 = pkin(4) * t508 + pkin(7) * t475 + t665;
t375 = -qJ(3) * t513 + t406 * t605;
t374 = -qJ(3) * t515 - t406 * t603;
t373 = pkin(4) * t507 + pkin(7) * t456 - t664;
t372 = t403 * t605 - t510 * t603;
t371 = -t403 * t603 - t510 * t605;
t370 = t398 * t605 - t507 * t603;
t369 = t398 * t603 + t507 * t605;
t368 = t402 * t605 + t491 * t603;
t367 = t402 * t603 - t491 * t605;
t366 = t407 * t605 + t486 * t603;
t365 = t407 * t603 - t486 * t605;
t362 = -t433 * t610 - t437 * t607;
t361 = t434 * t610 - t436 * t607;
t360 = -t433 * t607 + t437 * t610;
t359 = -t434 * t607 - t436 * t610;
t358 = -pkin(3) * t401 - pkin(4) * t457;
t354 = t418 * t611 - t433 * t608;
t353 = t417 * t611 - t437 * t608;
t352 = t418 * t608 + t433 * t611;
t351 = t417 * t608 + t437 * t611;
t350 = t413 * t611 + t436 * t608;
t349 = t413 * t608 - t436 * t611;
t348 = -t419 * t602 + t420 * t604;
t347 = t400 * t611 - t434 * t608;
t346 = t400 * t608 + t434 * t611;
t345 = t361 * t611 - t488 * t608;
t344 = t361 * t608 + t488 * t611;
t343 = t362 * t611 - t461 * t608;
t342 = t362 * t608 + t461 * t611;
t341 = t387 * t609 + t388 * t612;
t340 = -t387 * t612 + t388 * t609;
t339 = -t384 * t602 + t386 * t604;
t338 = -t383 * t602 + t385 * t604;
t335 = t348 * t605 - t448 * t603;
t334 = -t348 * t603 - t448 * t605;
t333 = -pkin(3) * t421 - pkin(4) * t472 + t381;
t332 = -pkin(8) * t412 + t668;
t331 = -pkin(8) * t399 + t669;
t330 = t369 * t609 + t370 * t612;
t329 = -t369 * t612 + t370 * t609;
t328 = -pkin(3) * t397 - pkin(4) * t455 + t380;
t325 = t367 * t609 + t368 * t612;
t324 = -t367 * t612 + t368 * t609;
t323 = -pkin(7) * t457 - t336;
t322 = t365 * t609 + t366 * t612;
t321 = -t365 * t612 + t366 * t609;
t320 = -pkin(4) * t462 + pkin(7) * t337;
t319 = -qJ(4) * t421 - t382 * t602 + t414 * t604;
t318 = t339 * t605 - t430 * t603;
t317 = t338 * t605 - t428 * t603;
t316 = -t339 * t603 - t430 * t605;
t315 = -t338 * t603 - t428 * t605;
t314 = -pkin(4) * t491 + pkin(7) * t459 + t337;
t313 = -t352 * t602 + t354 * t604;
t312 = -t351 * t602 + t353 * t604;
t311 = -qJ(4) * t397 - t373 * t602 + t404 * t604;
t310 = -t349 * t602 + t350 * t604;
t309 = t349 * t604 + t350 * t602;
t308 = -t346 * t602 + t347 * t604;
t307 = t346 * t604 + t347 * t602;
t306 = -pkin(5) * t412 + t327;
t305 = -t344 * t602 + t345 * t604;
t304 = -pkin(5) * t399 + t326;
t303 = -t342 * t602 + t343 * t604;
t302 = t342 * t604 + t343 * t602;
t301 = t313 * t605 - t416 * t603;
t300 = t312 * t605 - t415 * t603;
t299 = -t313 * t603 - t416 * t605;
t298 = -t312 * t603 - t415 * t605;
t297 = -qJ(3) * t365 - (pkin(3) * t603 - qJ(4) * t605 + qJ(2)) * t406;
t296 = t310 * t605 + t412 * t603;
t295 = t310 * t603 - t412 * t605;
t294 = t308 * t605 + t399 * t603;
t293 = t308 * t603 - t399 * t605;
t292 = t337 * t604 - t671;
t291 = t337 * t602 + t670;
t290 = t305 * t605 - t359 * t603;
t289 = -t305 * t603 - t359 * t605;
t288 = t292 * t605 + t462 * t603;
t287 = t292 * t603 - t462 * t605;
t286 = -qJ(3) * t366 - (pkin(3) * t605 + qJ(4) * t603 + t675) * t406;
t283 = t303 * t605 + t360 * t603;
t282 = t303 * t603 - t360 * t605;
t281 = -pkin(8) * t360 - t284;
t280 = -qJ(4) * t401 - t314 * t602 + t323 * t604;
t279 = t285 * t611 + t356 * t608;
t278 = t285 * t608 - t356 * t611;
t277 = -pkin(3) * t291 - pkin(4) * t336;
t276 = qJ(2) * t421 - qJ(3) * t387 + t319 * t605 - t333 * t603;
t275 = -pkin(7) * t349 - t306 * t608 + t332 * t611;
t274 = -qJ(3) * t388 - t603 * t319 - t605 * t333 + t421 * t675;
t273 = -pkin(7) * t346 - t304 * t608 + t331 * t611;
t272 = qJ(2) * t397 - qJ(3) * t369 + t311 * t605 - t328 * t603;
t271 = -pkin(3) * t309 - pkin(4) * t349 + pkin(5) * t436 - pkin(8) * t413 - t669;
t270 = -pkin(3) * t307 - pkin(4) * t346 - pkin(5) * t434 - pkin(8) * t400 + t668;
t269 = -pkin(4) * t412 + pkin(7) * t350 + t306 * t611 + t332 * t608;
t268 = t295 * t609 + t296 * t612;
t267 = -t295 * t612 + t296 * t609;
t266 = -pkin(4) * t399 + pkin(7) * t347 + t304 * t611 + t331 * t608;
t265 = t293 * t609 + t294 * t612;
t264 = -t293 * t612 + t294 * t609;
t263 = -qJ(3) * t370 - t603 * t311 - t605 * t328 + t397 * t675;
t262 = -pkin(7) * t670 - qJ(4) * t291 - t320 * t602;
t261 = -pkin(7) * t342 + t281 * t611 + t360 * t674;
t260 = t287 * t609 + t288 * t612;
t259 = -t287 * t612 + t288 * t609;
t258 = qJ(2) * t401 - qJ(3) * t367 + t280 * t605 - t358 * t603;
t257 = t282 * t609 + t283 * t612;
t256 = -t282 * t612 + t283 * t609;
t255 = pkin(7) * t343 + t608 * t281 + t360 * t634;
t254 = -qJ(3) * t368 - t603 * t280 - t605 * t358 + t401 * t675;
t253 = -pkin(3) * t302 - pkin(4) * t342 - pkin(5) * t461 - pkin(8) * t362 - t285;
t252 = -t278 * t602 + t279 * t604;
t251 = t278 * t604 + t279 * t602;
t250 = -pkin(7) * t278 + (-pkin(8) * t611 + t674) * t284;
t249 = t252 * t605 + t284 * t603;
t248 = t252 * t603 - t284 * t605;
t247 = -qJ(4) * t309 - t269 * t602 + t275 * t604;
t246 = -qJ(4) * t307 - t266 * t602 + t273 * t604;
t245 = pkin(7) * t279 + (-pkin(8) * t608 + t634) * t284;
t244 = -qJ(4) * t302 - t255 * t602 + t261 * t604;
t243 = qJ(2) * t291 - qJ(3) * t287 + t262 * t605 - t277 * t603;
t242 = -pkin(3) * t251 - pkin(4) * t278 + pkin(5) * t356 - pkin(8) * t285;
t241 = -qJ(3) * t288 - t603 * t262 - t605 * t277 + t291 * t675;
t240 = qJ(2) * t309 - qJ(3) * t295 + t247 * t605 - t271 * t603;
t239 = qJ(2) * t307 - qJ(3) * t293 + t246 * t605 - t270 * t603;
t238 = t248 * t609 + t249 * t612;
t237 = -t248 * t612 + t249 * t609;
t236 = -qJ(3) * t296 - t603 * t247 - t605 * t271 + t309 * t675;
t235 = -qJ(3) * t294 - t603 * t246 - t605 * t270 + t307 * t675;
t234 = qJ(2) * t302 - qJ(3) * t282 + t244 * t605 - t253 * t603;
t233 = -qJ(3) * t283 - t603 * t244 - t605 * t253 + t302 * t675;
t232 = -qJ(4) * t251 - t245 * t602 + t250 * t604;
t231 = qJ(2) * t251 - qJ(3) * t248 + t232 * t605 - t242 * t603;
t230 = -qJ(3) * t249 - t603 * t232 - t605 * t242 + t251 * t675;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t576, -t577, 0, t529, 0, 0, 0, 0, 0, 0, -t576, 0, t577, t495, 0, 0, 0, 0, 0, 0, -t516, t630, 0, -t685, 0, 0, 0, 0, 0, 0, t481, t480, t469, t322, 0, 0, 0, 0, 0, 0, t330, t341, t325, t260, 0, 0, 0, 0, 0, 0, t265, t268, t257, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t577, -t576, 0, t528, 0, 0, 0, 0, 0, 0, t577, 0, t576, t494, 0, 0, 0, 0, 0, 0, t630, t516, 0, t363, 0, 0, 0, 0, 0, 0, t479, t478, t468, t321, 0, 0, 0, 0, 0, 0, t329, t340, t324, t259, 0, 0, 0, 0, 0, 0, t264, t267, t256, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t600, 0, 0, 0, 0, 0, 0, 0, 0, 0, t406, 0, 0, 0, 0, 0, 0, -t397, -t421, -t401, -t291, 0, 0, 0, 0, 0, 0, -t307, -t309, -t302, -t251; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t577, 0, -t576, 0, -t555, -t556, -t528, -pkin(6) * t528, 0, t577, 0, 0, t576, 0, -t555, -t494, t556, -pkin(6) * t494 + (-pkin(1) * t609 + qJ(2) * t612) * g(3), 0, 0, -t630, 0, -t516, 0, t686, t688, t363, -pkin(6) * t363 - t427 * t609 + t432 * t612, -t625, -t512 * t609 + t514 * t612, t480, t625, -t481, 0, -pkin(6) * t479 - t389 * t609 + t391 * t612, -pkin(6) * t478 - t390 * t609 + t392 * t612, -pkin(6) * t468 - t374 * t609 + t375 * t612, -pkin(6) * t321 - t286 * t609 + t297 * t612, -t394 * t609 + t396 * t612, -t371 * t609 + t372 * t612, -t409 * t609 + t411 * t612, -t393 * t609 + t395 * t612, -t408 * t609 + t410 * t612, -t443 * t609 + t444 * t612, -pkin(6) * t329 - t263 * t609 + t272 * t612, -pkin(6) * t340 - t274 * t609 + t276 * t612, -pkin(6) * t324 - t254 * t609 + t258 * t612, -pkin(6) * t259 - t241 * t609 + t243 * t612, -t316 * t609 + t318 * t612, -t289 * t609 + t290 * t612, -t298 * t609 + t300 * t612, -t315 * t609 + t317 * t612, -t299 * t609 + t301 * t612, -t334 * t609 + t335 * t612, -pkin(6) * t264 - t235 * t609 + t239 * t612, -pkin(6) * t267 - t236 * t609 + t240 * t612, -pkin(6) * t256 - t233 * t609 + t234 * t612, -pkin(6) * t237 - t230 * t609 + t231 * t612; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t576, 0, t577, 0, t556, -t555, t529, pkin(6) * t529, 0, t576, 0, 0, -t577, 0, t556, t495, t555, pkin(6) * t495 + (pkin(1) * t612 + qJ(2) * t609) * g(3), 0, 0, -t516, 0, t630, 0, t688, -t686, t685, -pkin(6) * t685 + t427 * t612 + t432 * t609, t626, t512 * t612 + t514 * t609, t478, -t626, -t479, 0, pkin(6) * t481 + t389 * t612 + t391 * t609, pkin(6) * t480 + t390 * t612 + t392 * t609, pkin(6) * t469 + t374 * t612 + t375 * t609, pkin(6) * t322 + t286 * t612 + t297 * t609, t394 * t612 + t396 * t609, t371 * t612 + t372 * t609, t409 * t612 + t411 * t609, t393 * t612 + t395 * t609, t408 * t612 + t410 * t609, t443 * t612 + t444 * t609, pkin(6) * t330 + t263 * t612 + t272 * t609, pkin(6) * t341 + t274 * t612 + t276 * t609, pkin(6) * t325 + t254 * t612 + t258 * t609, pkin(6) * t260 + t241 * t612 + t243 * t609, t316 * t612 + t318 * t609, t289 * t612 + t290 * t609, t298 * t612 + t300 * t609, t315 * t612 + t317 * t609, t299 * t612 + t301 * t609, t334 * t612 + t335 * t609, pkin(6) * t265 + t235 * t612 + t239 * t609, pkin(6) * t268 + t236 * t612 + t240 * t609, pkin(6) * t257 + t233 * t612 + t234 * t609, pkin(6) * t238 + t230 * t612 + t231 * t609; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t578, t579, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t622 + 0.2e1 * t673, 0, 0.2e1 * t598 + t623, pkin(1) * t554 + qJ(2) * t548, 0, 0, 0, 0, 0, qJDD(1), -qJ(2) * t571 + t572 * t675 + t489, qJ(2) * t572 + t571 * t675 + t490, 0, qJ(2) * t442 + t441 * t675, t588, 0.2e1 * t633, 0, t641, 0, 0, qJ(2) * t526 + qJ(4) * t567 + t604 * t632 - t629 * t675, qJ(2) * t524 - qJ(4) * t566 - t521 * t675 - t602 * t632, -pkin(3) * t574 + qJ(2) * t515 - qJ(4) * t570 - t513 * t675 - t407, pkin(3) * t486 + qJ(2) * t366 - qJ(4) * t407 - t365 * t675, -t484 * t604 - t485 * t602, -t458 * t604 - t460 * t602, -t471 * t604 - t474 * t602, -t482 * t604 - t483 * t602, -t470 * t604 - t473 * t602, -t497 * t604 - t498 * t602, -pkin(3) * t507 + qJ(2) * t370 - qJ(4) * t398 - t369 * t675 - t604 * t373 - t602 * t404, -pkin(3) * t508 + qJ(2) * t388 - qJ(4) * t424 - t604 * t382 - t387 * t675 - t602 * t414, pkin(3) * t491 + qJ(2) * t368 - qJ(4) * t402 - t604 * t314 - t602 * t323 - t367 * t675, pkin(3) * t462 + pkin(7) * t671 + qJ(2) * t288 - qJ(4) * t292 - t287 * t675 - t604 * t320, -t384 * t604 - t386 * t602, -t344 * t604 - t345 * t602, -t351 * t604 - t353 * t602, -t383 * t604 - t385 * t602, -t352 * t604 - t354 * t602, -t419 * t604 - t420 * t602, pkin(3) * t399 + qJ(2) * t294 - qJ(4) * t308 - t604 * t266 - t602 * t273 - t293 * t675, pkin(3) * t412 + qJ(2) * t296 - qJ(4) * t310 - t604 * t269 - t602 * t275 - t295 * t675, pkin(3) * t360 + qJ(2) * t283 - qJ(4) * t303 - t604 * t255 - t602 * t261 - t282 * t675, pkin(3) * t284 + qJ(2) * t249 - qJ(4) * t252 - t604 * t245 - t248 * t675 - t602 * t250;];
tauB_reg  = t1;
