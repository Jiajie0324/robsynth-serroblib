% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RPRRRR11
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RPRRRR11_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 09:13
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RPRRRR11_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR11_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR11_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RPRRRR11_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR11_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:37
	% EndTime: 2019-10-10 09:13:37
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:37
	% EndTime: 2019-10-10 09:13:37
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:37
	% EndTime: 2019-10-10 09:13:37
	% DurationCPUTime: 0.32s
	% Computational Cost: add. (137->30), mult. (614->95), div. (108->12), fcn. (792->9), ass. (0->49)
	t86 = sin(pkin(6));
	t79 = t86 ^ 2;
	t88 = cos(pkin(6));
	t81 = 0.1e1 / t88 ^ 2;
	t90 = cos(qJ(1));
	t84 = t90 ^ 2;
	t77 = t79 * t81 * t84 + 0.1e1;
	t89 = sin(qJ(1));
	t83 = t89 ^ 2;
	t108 = 0.1e1 / t77 ^ 2 * t83;
	t112 = t108 * t81;
	t103 = t90 * t86;
	t76 = atan2(t103, t88);
	t72 = sin(t76);
	t73 = cos(t76);
	t58 = t72 * t103 + t73 * t88;
	t55 = 0.1e1 / t58;
	t85 = sin(pkin(13));
	t105 = t89 * t85;
	t87 = cos(pkin(13));
	t99 = t88 * t105 - t87 * t90;
	t65 = 0.1e1 / t99;
	t80 = 0.1e1 / t88;
	t56 = 0.1e1 / t58 ^ 2;
	t66 = 0.1e1 / t99 ^ 2;
	t111 = t56 * t89;
	t104 = t89 * t87;
	t70 = t88 * t104 + t85 * t90;
	t110 = t66 * t70;
	t106 = t88 * t90;
	t69 = -t85 * t106 - t104;
	t109 = t69 * t70;
	t107 = t79 * t80;
	t102 = qJD(1) * t90;
	t74 = 0.1e1 / t77;
	t101 = (t74 - 0.1e1) * t86;
	t100 = -0.2e1 * t80 * t112;
	t68 = t87 * t106 - t105;
	t51 = (-t73 * t74 * t90 * t107 + t72 * t101) * t89;
	t78 = t86 * t79;
	t67 = t65 * t66;
	t64 = t70 ^ 2;
	t63 = t69 * qJD(1);
	t62 = t68 * qJD(1);
	t61 = t64 * t66 + 0.1e1;
	t57 = t55 * t56;
	t54 = t56 * t79 * t83 + 0.1e1;
	t50 = qJD(1) * t51;
	t1 = [(-t74 * t80 * t86 + t78 * t100) * t102, 0, 0, 0, 0, 0; (0.2e1 * (t51 * t111 - t55 * t90) / t54 ^ 2 * (-t50 * t57 * t83 + t102 * t111) * t79 + ((0.2e1 * t51 * t57 * t89 - t56 * t90) * t50 + (-t89 * t55 + ((-t51 + (-t78 * t112 - t101) * t89 * t72) * t90 - (t84 * t79 ^ 2 * t100 + (-t108 + (0.2e1 * t83 - t84) * t74) * t107) * t89 * t73) * t56) * qJD(1)) / t54) * t86, 0, 0, 0, 0, 0; 0.2e1 * (t66 * t109 + t65 * t68) / t61 ^ 2 * (t63 * t64 * t67 + t62 * t110) + (-t69 * t62 * t66 + (-0.2e1 * t67 * t109 - t68 * t66) * t63 + (-t99 * t110 + t70 * t65) * qJD(1)) / t61, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:37
	% EndTime: 2019-10-10 09:13:38
	% DurationCPUTime: 0.60s
	% Computational Cost: add. (994->58), mult. (3107->139), div. (132->12), fcn. (4021->13), ass. (0->80)
	t183 = sin(pkin(7));
	t184 = sin(pkin(6));
	t185 = cos(pkin(13));
	t186 = cos(pkin(7));
	t187 = cos(pkin(6));
	t173 = -t184 * t185 * t183 + t187 * t186;
	t191 = cos(qJ(1));
	t211 = t191 * t185;
	t182 = sin(pkin(13));
	t189 = sin(qJ(1));
	t214 = t189 * t182;
	t174 = -t187 * t211 + t214;
	t216 = t184 * t191;
	t204 = -t174 * t183 + t186 * t216;
	t157 = atan2(t204, t173);
	t152 = sin(t157);
	t153 = cos(t157);
	t138 = t152 * t204 + t153 * t173;
	t135 = 0.1e1 / t138;
	t188 = sin(qJ(3));
	t190 = cos(qJ(3));
	t200 = t187 * t214 - t211;
	t212 = t191 * t182;
	t213 = t189 * t185;
	t201 = t187 * t213 + t212;
	t217 = t184 * t189;
	t209 = t183 * t217;
	t202 = -t186 * t201 + t209;
	t151 = t202 * t188 - t190 * t200;
	t145 = 0.1e1 / t151;
	t230 = t204 ^ 2;
	t170 = 0.1e1 / t173;
	t136 = 0.1e1 / t138 ^ 2;
	t146 = 0.1e1 / t151 ^ 2;
	t171 = 0.1e1 / t173 ^ 2;
	t229 = -0.2e1 * t170 * t171;
	t175 = -t187 * t212 - t213;
	t167 = t175 * qJD(1);
	t166 = t174 * qJD(1);
	t210 = qJD(1) * t184;
	t206 = t191 * t210;
	t199 = t166 * t186 + t183 * t206;
	t139 = t151 * qJD(3) + t167 * t188 - t199 * t190;
	t215 = t186 * t190;
	t218 = t200 * t188;
	t150 = -t190 * t209 + t201 * t215 - t218;
	t144 = t150 ^ 2;
	t143 = t144 * t146 + 0.1e1;
	t225 = t146 * t150;
	t140 = t167 * t190 + t199 * t188 + (t202 * t190 + t218) * qJD(3);
	t226 = t140 * t145 * t146;
	t228 = (t139 * t225 - t144 * t226) / t143 ^ 2;
	t168 = t201 * qJD(1);
	t207 = t189 * t210;
	t159 = -t168 * t183 - t186 * t207;
	t156 = t230 * t171 + 0.1e1;
	t154 = 0.1e1 / t156;
	t198 = t152 + (t153 * t170 * t204 - t152) * t154;
	t130 = t198 * t159;
	t227 = t130 * t135 * t136;
	t208 = t183 * t216;
	t203 = t174 * t186 + t208;
	t149 = t175 * t190 + t203 * t188;
	t224 = t149 * t150;
	t223 = t154 * t170;
	t155 = 0.1e1 / t156 ^ 2;
	t222 = t155 * t204;
	t158 = t166 * t183 - t186 * t206;
	t221 = t158 * t136;
	t163 = -t183 * t201 - t186 * t217;
	t220 = t159 * t163;
	t219 = t175 * t188;
	t205 = t183 * t207;
	t169 = t200 * qJD(1);
	t160 = t163 ^ 2;
	t148 = -t203 * t190 + t219;
	t141 = 0.1e1 / t143;
	t134 = t160 * t136 + 0.1e1;
	t131 = t198 * t163;
	t1 = [t220 * t222 * t229 + t158 * t223, 0, 0, 0, 0, 0; 0.2e1 * (-t131 * t136 * t163 - t135 * t204) / t134 ^ 2 * (-t160 * t227 + t163 * t221) + (t159 * t135 + (-t130 * t204 + t131 * t158) * t136 + (-0.2e1 * t131 * t227 + t198 * t221 + (t152 * t171 * t222 + (0.2e1 * t223 + (t230 * t229 - t170) * t155) * t153) * t136 * t220) * t163) / t134, 0, 0, 0, 0, 0; 0.2e1 * (-t145 * t148 + t146 * t224) * t228 + ((-t168 * t215 + t169 * t188 + t190 * t205) * t145 + 0.2e1 * t224 * t226 + (-t148 * t140 - (t169 * t190 + (t168 * t186 - t205) * t188) * t150 - t149 * t139) * t146 + (t149 * t145 - (t174 * t215 + t190 * t208 - t219) * t225) * qJD(3)) * t141, 0, -0.2e1 * t228 + 0.2e1 * (t139 * t146 * t141 + (-t141 * t226 - t146 * t228) * t150) * t150, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:38
	% EndTime: 2019-10-10 09:13:39
	% DurationCPUTime: 1.92s
	% Computational Cost: add. (4837->111), mult. (15324->224), div. (448->12), fcn. (19446->15), ass. (0->108)
	t347 = sin(pkin(13));
	t352 = cos(pkin(6));
	t320 = t352 * t347;
	t350 = cos(pkin(13));
	t353 = sin(qJ(1));
	t355 = cos(qJ(1));
	t276 = t320 * t355 + t350 * t353;
	t287 = sin(qJ(3));
	t348 = sin(pkin(7));
	t349 = sin(pkin(6));
	t318 = t349 * t348;
	t311 = t355 * t318;
	t283 = t287 * t311;
	t322 = t352 * t350;
	t275 = -t322 * t355 + t347 * t353;
	t351 = cos(pkin(7));
	t326 = t275 * t351;
	t354 = cos(qJ(3));
	t362 = -t276 * t354 + t287 * t326 + t283;
	t304 = t354 * t311;
	t324 = t351 * t354;
	t361 = -t275 * t324 - t304;
	t249 = t276 * t287 - t361;
	t317 = t349 * t347;
	t319 = t351 * t349;
	t359 = t350 * t319 + t352 * t348;
	t295 = -t287 * t317 + t359 * t354;
	t246 = atan2(-t249, -t295);
	t241 = sin(t246);
	t242 = cos(t246);
	t222 = -t241 * t249 - t242 * t295;
	t220 = 0.1e1 / t222 ^ 2;
	t277 = -t353 * t320 + t355 * t350;
	t300 = t322 * t353 + t347 * t355;
	t298 = t300 * t351;
	t308 = t353 * t318;
	t303 = t354 * t308;
	t358 = -t277 * t287 - t354 * t298 + t303;
	t248 = t358 ^ 2;
	t218 = t248 * t220 + 0.1e1;
	t255 = t277 * t354 + (-t298 + t308) * t287;
	t272 = t276 * qJD(1);
	t297 = qJD(1) * t326;
	t228 = -qJD(1) * t304 + qJD(3) * t255 - t272 * t287 - t297 * t354;
	t339 = t228 * t220;
	t219 = 0.1e1 / t222;
	t247 = t249 ^ 2;
	t262 = 0.1e1 / t295 ^ 2;
	t245 = t247 * t262 + 0.1e1;
	t243 = 0.1e1 / t245;
	t261 = 0.1e1 / t295;
	t265 = t359 * t287 + t354 * t317;
	t257 = t265 * qJD(3);
	t335 = t257 * t262;
	t273 = t300 * qJD(1);
	t274 = t277 * qJD(1);
	t357 = qJD(1) * t303 + t362 * qJD(3) - t273 * t324 - t274 * t287;
	t314 = t249 * t335 - t261 * t357;
	t213 = t314 * t243;
	t316 = t241 * t295 - t242 * t249;
	t209 = t213 * t316 + t241 * t357 + t242 * t257;
	t360 = t209 * t220;
	t345 = t219 * t360;
	t331 = 0.2e1 * (-t248 * t345 - t339 * t358) / t218 ^ 2;
	t231 = t287 * (qJD(1) * t308 - qJD(3) * t276 - t273 * t351) + t274 * t354 + t361 * qJD(3);
	t309 = t353 * t319;
	t267 = t300 * t348 + t309;
	t286 = sin(qJ(4));
	t288 = cos(qJ(4));
	t240 = t255 * t288 + t267 * t286;
	t234 = 0.1e1 / t240;
	t235 = 0.1e1 / t240 ^ 2;
	t356 = -0.2e1 * t358;
	t229 = qJD(1) * t283 + t358 * qJD(3) - t272 * t354 + t287 * t297;
	t266 = -t275 * t348 + t319 * t355;
	t258 = t266 * qJD(1);
	t223 = qJD(4) * t240 + t229 * t286 - t258 * t288;
	t239 = t255 * t286 - t267 * t288;
	t233 = t239 ^ 2;
	t227 = t233 * t235 + 0.1e1;
	t338 = t235 * t239;
	t332 = qJD(4) * t239;
	t224 = t229 * t288 + t258 * t286 - t332;
	t340 = t224 * t234 * t235;
	t344 = (t223 * t338 - t233 * t340) / t227 ^ 2;
	t334 = t261 * t335;
	t342 = (-t249 * t262 * t357 + t247 * t334) / t245 ^ 2;
	t341 = t220 * t358;
	t337 = t249 * t261;
	t336 = t249 * t265;
	t330 = -0.2e1 * t344;
	t329 = -0.2e1 * t342;
	t328 = t261 * t342;
	t327 = t239 * t340;
	t325 = t345 * t356;
	t238 = t266 * t286 + t288 * t362;
	t237 = -t266 * t288 + t286 * t362;
	t313 = -t286 * t234 + t288 * t338;
	t312 = -t261 * t362 + t262 * t336;
	t306 = -t241 + (-t242 * t337 + t241) * t243;
	t259 = -qJD(1) * t309 - t273 * t348;
	t256 = t295 * qJD(3);
	t225 = 0.1e1 / t227;
	t216 = 0.1e1 / t218;
	t214 = t312 * t243;
	t210 = t214 * t316 + t241 * t362 + t242 * t265;
	t208 = t312 * t329 + (0.2e1 * t334 * t336 + t231 * t261 + (t249 * t256 - t257 * t362 - t265 * t357) * t262) * t243;
	t1 = [-t328 * t356 + (t228 * t261 - t335 * t358) * t243, 0, t208, 0, 0, 0; t249 * t219 * t331 + (t357 * t219 + t249 * t360 + (t306 * t228 - ((t213 * t243 * t337 + t329) * t241 + (0.2e1 * t249 * t328 - t213 + (t213 - t314) * t243) * t242) * t358) * t341) * t216 - (-t341 * t331 + (-t339 + t325) * t216) * t306 * t358, 0, (-t210 * t341 - t219 * t255) * t331 + (t210 * t325 + t229 * t219 + (-t255 * t209 - t210 * t228 - (-(-t208 * t249 + t214 * t357 + t256 + (t214 * t295 + t362) * t213) * t242 - (t208 * t295 - t214 * t257 - t231 + (t214 * t249 - t265) * t213) * t241) * t358) * t220) * t216, 0, 0, 0; 0.2e1 * (-t234 * t237 + t238 * t338) * t344 + ((qJD(4) * t238 - t231 * t286 - t259 * t288) * t234 + 0.2e1 * t238 * t327 + (-t237 * t224 - (-qJD(4) * t237 - t231 * t288 + t259 * t286) * t239 - t238 * t223) * t235) * t225, 0, -t313 * t358 * t330 + (t313 * t228 - ((-qJD(4) * t234 - 0.2e1 * t327) * t288 + (t223 * t288 + (t224 - t332) * t286) * t235) * t358) * t225, t330 + 0.2e1 * (t223 * t235 * t225 + (-t225 * t340 - t235 * t344) * t239) * t239, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:38
	% EndTime: 2019-10-10 09:13:44
	% DurationCPUTime: 5.26s
	% Computational Cost: add. (13786->165), mult. (41237->320), div. (726->12), fcn. (53008->17), ass. (0->146)
	t482 = sin(pkin(13));
	t487 = cos(pkin(6));
	t442 = t487 * t482;
	t485 = cos(pkin(13));
	t488 = sin(qJ(1));
	t490 = cos(qJ(1));
	t383 = -t488 * t442 + t490 * t485;
	t380 = t383 * qJD(1);
	t392 = sin(qJ(3));
	t394 = cos(qJ(3));
	t382 = t490 * t442 + t488 * t485;
	t483 = sin(pkin(7));
	t484 = sin(pkin(6));
	t440 = t484 * t483;
	t427 = t490 * t440;
	t486 = cos(pkin(7));
	t443 = t487 * t485;
	t497 = -t490 * t443 + t488 * t482;
	t498 = t497 * t486;
	t404 = t498 + t427;
	t493 = t382 * t392 + t404 * t394;
	t413 = t488 * t443 + t490 * t482;
	t379 = t413 * qJD(1);
	t424 = t488 * t440;
	t503 = qJD(1) * t424 - t379 * t486;
	t340 = t493 * qJD(3) - t380 * t394 - t503 * t392;
	t391 = sin(qJ(4));
	t441 = t486 * t484;
	t425 = t488 * t441;
	t414 = qJD(1) * t425 + t379 * t483;
	t489 = cos(qJ(4));
	t463 = t382 * t394;
	t363 = t404 * t392 - t463;
	t405 = -t490 * t441 + t483 * t497;
	t512 = -t363 * t391 - t405 * t489;
	t320 = qJD(4) * t512 + t340 * t489 - t414 * t391;
	t351 = t363 * t489 - t405 * t391;
	t514 = t351 * qJD(4) + t340 * t391 + t414 * t489;
	t345 = t512 ^ 2;
	t410 = t485 * t441 + t487 * t483;
	t439 = t484 * t482;
	t374 = t410 * t392 + t394 * t439;
	t381 = -t485 * t440 + t487 * t486;
	t430 = -t374 * t391 + t381 * t489;
	t356 = 0.1e1 / t430 ^ 2;
	t333 = t345 * t356 + 0.1e1;
	t331 = 0.1e1 / t333;
	t359 = t374 * t489 + t381 * t391;
	t373 = -t392 * t439 + t410 * t394;
	t368 = t373 * qJD(3);
	t343 = t359 * qJD(4) + t368 * t391;
	t355 = 0.1e1 / t430;
	t468 = t512 * t356;
	t435 = t343 * t468 - t355 * t514;
	t300 = t435 * t331;
	t334 = atan2(-t512, -t430);
	t329 = sin(t334);
	t330 = cos(t334);
	t438 = t329 * t430 - t330 * t512;
	t295 = t438 * t300 + t329 * t514 + t330 * t343;
	t312 = -t329 * t512 - t330 * t430;
	t310 = 0.1e1 / t312 ^ 2;
	t511 = t295 * t310;
	t508 = -t413 * t486 + t424;
	t365 = t383 * t394 + t508 * t392;
	t403 = t413 * t483 + t425;
	t353 = t365 * t489 + t403 * t391;
	t495 = t508 * t394;
	t364 = t383 * t392 - t495;
	t390 = sin(qJ(5));
	t393 = cos(qJ(5));
	t327 = t353 * t390 - t364 * t393;
	t507 = 0.2e1 * t327;
	t309 = 0.1e1 / t312;
	t506 = t309 * t511;
	t401 = t403 * t489;
	t352 = t365 * t391 - t401;
	t491 = 0.2e1 * t352;
	t445 = t491 * t506;
	t378 = t382 * qJD(1);
	t462 = qJD(3) * t392;
	t496 = t404 * qJD(1);
	t336 = t495 * qJD(3) - t378 * t394 - t383 * t462 + t496 * t392;
	t402 = qJD(1) * t405;
	t316 = t353 * qJD(4) + t336 * t391 + t489 * t402;
	t474 = t316 * t310;
	t502 = -t474 + t445;
	t501 = (t392 * t498 - t463) * qJD(3) - t380 * t392 + t503 * t394 + t427 * t462;
	t346 = t352 ^ 2;
	t306 = t310 * t346 + 0.1e1;
	t459 = 0.2e1 * (-t346 * t506 + t352 * t474) / t306 ^ 2;
	t500 = t343 * t356;
	t432 = -t355 * t493 + t373 * t468;
	t499 = t391 * t432;
	t449 = qJD(4) * t489;
	t328 = t353 * t393 + t364 * t390;
	t322 = 0.1e1 / t328;
	t323 = 0.1e1 / t328 ^ 2;
	t492 = -0.2e1 * t512;
	t461 = qJD(4) * t391;
	t317 = qJD(4) * t401 + t336 * t489 - t365 * t461 - t391 * t402;
	t335 = t365 * qJD(3) - t378 * t392 - t496 * t394;
	t307 = t328 * qJD(5) + t317 * t390 - t335 * t393;
	t321 = t327 ^ 2;
	t315 = t321 * t323 + 0.1e1;
	t473 = t323 * t327;
	t460 = qJD(5) * t327;
	t308 = t317 * t393 + t335 * t390 - t460;
	t477 = t308 * t322 * t323;
	t480 = (t307 * t473 - t321 * t477) / t315 ^ 2;
	t470 = t355 * t500;
	t478 = (t345 * t470 - t468 * t514) / t333 ^ 2;
	t476 = t310 * t352;
	t313 = 0.1e1 / t315;
	t475 = t313 * t323;
	t472 = t329 * t352;
	t471 = t330 * t352;
	t469 = t512 * t355;
	t466 = t364 * t391;
	t458 = -0.2e1 * t480;
	t457 = -0.2e1 * t478;
	t455 = t323 * t480;
	t454 = t355 * t478;
	t453 = t307 * t475;
	t452 = t327 * t477;
	t450 = t364 * t489;
	t447 = 0.2e1 * t452;
	t446 = t470 * t492;
	t326 = t351 * t393 - t390 * t493;
	t325 = t351 * t390 + t393 * t493;
	t436 = qJD(5) * t450 + t336;
	t434 = -t390 * t322 + t393 * t473;
	t433 = -t351 * t355 + t359 * t468;
	t423 = -t329 + (-t330 * t469 + t329) * t331;
	t417 = qJD(5) * t365 - t489 * t335 + t364 * t461;
	t369 = t374 * qJD(3);
	t344 = t430 * qJD(4) + t368 * t489;
	t342 = t365 * t390 - t393 * t450;
	t304 = 0.1e1 / t306;
	t303 = t331 * t499;
	t301 = t433 * t331;
	t297 = (t329 * t493 + t330 * t373) * t391 + t438 * t303;
	t296 = t438 * t301 + t329 * t351 + t330 * t359;
	t293 = t433 * t457 + (-t359 * t446 - t320 * t355 + (-t343 * t351 + t344 * t512 - t359 * t514) * t356) * t331;
	t292 = t457 * t499 + ((-t373 * t446 + t501 * t355 + (-t343 * t493 - t369 * t512 - t373 * t514) * t356) * t391 + t432 * t449) * t331;
	t1 = [-t454 * t491 + (t316 * t355 + t352 * t500) * t331, 0, t292, t293, 0, 0; t512 * t309 * t459 + (t514 * t309 + t512 * t511 - (t423 * t316 + ((t300 * t331 * t469 + t457) * t329 + (-t454 * t492 - t300 + (t300 - t435) * t331) * t330) * t352) * t476) * t304 + (t502 * t304 + t476 * t459) * t423 * t352, 0, (t297 * t476 + t309 * t466) * t459 + ((-t335 * t391 - t364 * t449) * t309 + t502 * t297 + (t466 * t295 - (t373 * t449 - t292 * t512 + t303 * t514 - t369 * t391 + (t303 * t430 + t391 * t493) * t300) * t471 - (t493 * t449 + t292 * t430 - t303 * t343 - t501 * t391 + (t303 * t512 - t373 * t391) * t300) * t472) * t310) * t304, (t296 * t476 - t309 * t353) * t459 + (t296 * t445 + t317 * t309 + (-t353 * t295 - t296 * t316 - (-t293 * t512 + t301 * t514 + t344 + (t301 * t430 + t351) * t300) * t471 - (t293 * t430 - t301 * t343 + t320 + (t301 * t512 - t359) * t300) * t472) * t310) * t304, 0, 0; 0.2e1 * (-t322 * t325 + t326 * t473) * t480 + ((t326 * qJD(5) + t320 * t390 - t393 * t501) * t322 + t326 * t447 + (-t325 * t308 - (-t325 * qJD(5) + t320 * t393 + t390 * t501) * t327 - t326 * t307) * t323) * t313, 0, (t455 * t507 - t453) * t342 + (-t308 * t475 + t322 * t458) * (-t365 * t393 - t390 * t450) + ((t417 * t390 - t436 * t393) * t322 - (t436 * t390 + t417 * t393) * t473 + t342 * t447) * t313, t434 * t352 * t458 + (t434 * t316 + ((-qJD(5) * t322 - 0.2e1 * t452) * t393 + (t307 * t393 + (t308 - t460) * t390) * t323) * t352) * t313, t458 + (t453 + (-t313 * t477 - t455) * t327) * t507, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 09:13:38
	% EndTime: 2019-10-10 09:13:44
	% DurationCPUTime: 5.42s
	% Computational Cost: add. (15019->167), mult. (43174->321), div. (744->12), fcn. (55416->17), ass. (0->152)
	t512 = sin(pkin(13));
	t517 = cos(pkin(6));
	t469 = t517 * t512;
	t515 = cos(pkin(13));
	t518 = sin(qJ(1));
	t520 = cos(qJ(1));
	t408 = -t518 * t469 + t520 * t515;
	t405 = t408 * qJD(1);
	t420 = sin(qJ(3));
	t421 = cos(qJ(3));
	t407 = t520 * t469 + t518 * t515;
	t513 = sin(pkin(7));
	t514 = sin(pkin(6));
	t467 = t514 * t513;
	t454 = t520 * t467;
	t516 = cos(pkin(7));
	t470 = t517 * t515;
	t527 = -t520 * t470 + t518 * t512;
	t528 = t527 * t516;
	t431 = t528 + t454;
	t523 = t407 * t420 + t431 * t421;
	t440 = t518 * t470 + t520 * t512;
	t404 = t440 * qJD(1);
	t451 = t518 * t467;
	t532 = qJD(1) * t451 - t404 * t516;
	t367 = t523 * qJD(3) - t405 * t421 - t532 * t420;
	t419 = sin(qJ(4));
	t468 = t516 * t514;
	t452 = t518 * t468;
	t441 = qJD(1) * t452 + t404 * t513;
	t519 = cos(qJ(4));
	t493 = t407 * t421;
	t388 = t431 * t420 - t493;
	t432 = -t520 * t468 + t513 * t527;
	t541 = -t388 * t419 - t432 * t519;
	t344 = -qJD(4) * t541 - t367 * t519 + t441 * t419;
	t376 = t388 * t519 - t432 * t419;
	t543 = t376 * qJD(4) + t367 * t419 + t441 * t519;
	t370 = t541 ^ 2;
	t437 = t515 * t468 + t517 * t513;
	t466 = t514 * t512;
	t399 = t437 * t420 + t421 * t466;
	t406 = -t515 * t467 + t517 * t516;
	t457 = -t399 * t419 + t406 * t519;
	t381 = 0.1e1 / t457 ^ 2;
	t358 = t370 * t381 + 0.1e1;
	t356 = 0.1e1 / t358;
	t384 = t399 * t519 + t406 * t419;
	t398 = -t420 * t466 + t437 * t421;
	t393 = t398 * qJD(3);
	t368 = t384 * qJD(4) + t393 * t419;
	t380 = 0.1e1 / t457;
	t498 = t541 * t381;
	t462 = t368 * t498 - t380 * t543;
	t325 = t462 * t356;
	t359 = atan2(-t541, -t457);
	t354 = sin(t359);
	t355 = cos(t359);
	t465 = t354 * t457 - t355 * t541;
	t320 = t465 * t325 + t354 * t543 + t355 * t368;
	t337 = -t354 * t541 - t355 * t457;
	t335 = 0.1e1 / t337 ^ 2;
	t540 = t320 * t335;
	t537 = -t440 * t516 + t451;
	t390 = t408 * t421 + t537 * t420;
	t430 = t440 * t513 + t452;
	t378 = t390 * t519 + t430 * t419;
	t525 = t537 * t421;
	t389 = t408 * t420 - t525;
	t418 = qJ(5) + qJ(6);
	t415 = sin(t418);
	t416 = cos(t418);
	t352 = t378 * t415 - t389 * t416;
	t536 = 0.2e1 * t352;
	t334 = 0.1e1 / t337;
	t535 = t334 * t540;
	t428 = t430 * t519;
	t377 = t390 * t419 - t428;
	t521 = 0.2e1 * t377;
	t476 = t521 * t535;
	t403 = t407 * qJD(1);
	t492 = qJD(3) * t420;
	t526 = t431 * qJD(1);
	t363 = t525 * qJD(3) - t403 * t421 - t408 * t492 + t526 * t420;
	t429 = t432 * qJD(1);
	t341 = t378 * qJD(4) + t363 * t419 + t519 * t429;
	t504 = t341 * t335;
	t531 = -t504 + t476;
	t364 = (t420 * t528 - t493) * qJD(3) - t405 * t420 + t532 * t421 + t454 * t492;
	t371 = t377 ^ 2;
	t333 = t371 * t335 + 0.1e1;
	t490 = 0.2e1 * (-t371 * t535 + t377 * t504) / t333 ^ 2;
	t530 = t368 * t381;
	t459 = -t380 * t523 + t398 * t498;
	t529 = t419 * t459;
	t480 = qJD(4) * t519;
	t353 = t378 * t416 + t389 * t415;
	t347 = 0.1e1 / t353;
	t348 = 0.1e1 / t353 ^ 2;
	t522 = -0.2e1 * t541;
	t362 = t390 * qJD(3) - t403 * t420 - t526 * t421;
	t417 = qJD(5) + qJD(6);
	t473 = t378 * t417 - t362;
	t491 = qJD(4) * t419;
	t342 = qJD(4) * t428 + t363 * t519 - t390 * t491 - t419 * t429;
	t475 = t389 * t417 + t342;
	t329 = t475 * t415 + t473 * t416;
	t346 = t352 ^ 2;
	t340 = t346 * t348 + 0.1e1;
	t503 = t348 * t352;
	t330 = -t473 * t415 + t475 * t416;
	t507 = t330 * t347 * t348;
	t510 = (t329 * t503 - t346 * t507) / t340 ^ 2;
	t500 = t380 * t530;
	t508 = (t370 * t500 - t498 * t543) / t358 ^ 2;
	t506 = t335 * t377;
	t338 = 0.1e1 / t340;
	t505 = t338 * t348;
	t502 = t354 * t377;
	t501 = t355 * t377;
	t499 = t541 * t380;
	t496 = t389 * t419;
	t489 = -0.2e1 * t510;
	t488 = -0.2e1 * t508;
	t486 = t348 * t510;
	t485 = t380 * t508;
	t484 = t329 * t505;
	t483 = t352 * t507;
	t481 = t389 * t519;
	t478 = 0.2e1 * t483;
	t477 = t500 * t522;
	t474 = -t417 * t523 - t344;
	t472 = t376 * t417 - t364;
	t464 = t417 * t481 + t363;
	t461 = -t415 * t347 + t416 * t503;
	t460 = -t376 * t380 + t384 * t498;
	t450 = -t354 + (-t355 * t499 + t354) * t356;
	t444 = -t519 * t362 + t389 * t491 + t390 * t417;
	t394 = t399 * qJD(3);
	t369 = t457 * qJD(4) + t393 * t519;
	t361 = t390 * t415 - t416 * t481;
	t351 = t376 * t416 - t415 * t523;
	t350 = t376 * t415 + t416 * t523;
	t331 = 0.1e1 / t333;
	t328 = t356 * t529;
	t326 = t460 * t356;
	t322 = (t354 * t523 + t355 * t398) * t419 + t465 * t328;
	t321 = t465 * t326 + t354 * t376 + t355 * t384;
	t318 = t460 * t488 + (-t384 * t477 + t344 * t380 + (-t368 * t376 + t369 * t541 - t384 * t543) * t381) * t356;
	t317 = t488 * t529 + ((-t398 * t477 + t364 * t380 + (-t368 * t523 - t394 * t541 - t398 * t543) * t381) * t419 + t459 * t480) * t356;
	t316 = t489 + (t484 + (-t338 * t507 - t486) * t352) * t536;
	t1 = [-t485 * t521 + (t341 * t380 + t377 * t530) * t356, 0, t317, t318, 0, 0; t541 * t334 * t490 + (t543 * t334 + t541 * t540 - (t450 * t341 + ((t325 * t356 * t499 + t488) * t354 + (-t485 * t522 - t325 + (t325 - t462) * t356) * t355) * t377) * t506) * t331 + (t531 * t331 + t506 * t490) * t450 * t377, 0, (t322 * t506 + t334 * t496) * t490 + ((-t362 * t419 - t389 * t480) * t334 + t531 * t322 + (t496 * t320 - (t398 * t480 - t317 * t541 + t328 * t543 - t394 * t419 + (t328 * t457 + t419 * t523) * t325) * t501 - (t523 * t480 + t317 * t457 - t328 * t368 - t364 * t419 + (t328 * t541 - t398 * t419) * t325) * t502) * t335) * t331, (t321 * t506 - t334 * t378) * t490 + (t321 * t476 + t342 * t334 + (-t378 * t320 - t321 * t341 - (-t318 * t541 + t326 * t543 + t369 + (t326 * t457 + t376) * t325) * t501 - (t318 * t457 - t326 * t368 - t344 + (t326 * t541 - t384) * t325) * t502) * t335) * t331, 0, 0; 0.2e1 * (-t347 * t350 + t351 * t503) * t510 + ((t474 * t415 + t472 * t416) * t347 + t351 * t478 + (-t350 * t330 - (-t472 * t415 + t474 * t416) * t352 - t351 * t329) * t348) * t338, 0, (t486 * t536 - t484) * t361 + (-t330 * t505 + t347 * t489) * (-t390 * t416 - t415 * t481) + ((t444 * t415 - t464 * t416) * t347 - (t464 * t415 + t444 * t416) * t503 + t361 * t478) * t338, t461 * t377 * t489 + (t461 * t341 + ((-t347 * t417 - 0.2e1 * t483) * t416 + (t329 * t416 + (-t352 * t417 + t330) * t415) * t348) * t377) * t338, t316, t316;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end