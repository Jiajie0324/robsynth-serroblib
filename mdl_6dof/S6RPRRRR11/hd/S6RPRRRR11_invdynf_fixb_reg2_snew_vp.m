% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 05:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR11_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR11_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR11_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 05:47:32
% EndTime: 2019-05-06 05:48:00
% DurationCPUTime: 29.82s
% Computational Cost: add. (335846->433), mult. (1043640->696), div. (0->0), fcn. (905619->16), ass. (0->375)
t2994 = sin(pkin(13));
t2996 = sin(pkin(6));
t3003 = sin(qJ(3));
t3008 = cos(qJ(3));
t2995 = sin(pkin(7));
t2999 = cos(pkin(6));
t3096 = t2995 * t2999;
t3083 = t3003 * t3096;
t2997 = cos(pkin(13));
t2998 = cos(pkin(7));
t3093 = t2997 * t2998;
t2954 = (t3083 + (t2994 * t3008 + t3003 * t3093) * t2996) * qJD(1);
t3033 = t2996 * t3093 + t3096;
t3026 = t3033 * qJDD(1);
t3089 = qJDD(1) * t2996;
t3078 = t3003 * t3089;
t3019 = t2954 * qJD(3) + t2994 * t3078 - t3008 * t3026;
t3017 = qJDD(4) + t3019;
t3028 = t3033 * pkin(9);
t3097 = t2994 * t2996;
t3084 = t2995 * t3097;
t3095 = t2996 * t2997;
t3014 = -(-pkin(2) * t3095 - pkin(9) * t3084) * t3097 + t2999 * t3028;
t3004 = sin(qJ(1));
t3009 = cos(qJ(1));
t2986 = t3004 * g(1) - t3009 * g(2);
t3010 = qJD(1) ^ 2;
t3094 = t2996 * t3010;
t3030 = -qJ(2) * t3094 - t2986;
t3023 = qJDD(1) * pkin(1) - t3030;
t3021 = t2999 * t3023;
t3016 = (-t2996 * g(3) + t3021) * t2997;
t2987 = -t3009 * g(1) - t3004 * g(2);
t3031 = t3010 * pkin(1) - t2987;
t3034 = -pkin(9) * t2994 * t2995 - pkin(2) * t2997;
t3077 = -t2999 * g(3) + qJDD(2);
t3088 = qJDD(1) * t2999;
t3086 = pkin(2) * t3088;
t3107 = pkin(9) * t2998;
t3108 = pkin(2) * t2999;
t3109 = -2 * qJD(2);
t2990 = t2994 ^ 2;
t2992 = t2997 ^ 2;
t3122 = -t2990 - t2992;
t3126 = t2998 * (t3086 + t3016 + ((-qJ(2) - t3107) * t3089 + t3031) * t2994 + (qJD(1) * t3014 + t3097 * t3109) * qJD(1)) + t2995 * (((-pkin(1) + t3034) * qJDD(1) + t3030) * t2996 + (t2994 * t3108 + (t2996 * t2998 * t3122 - t2997 * t3096) * pkin(9)) * t3094 + t3077);
t2952 = (t3003 * t3097 - t3008 * t3033) * qJD(1);
t3027 = qJD(4) + t2952;
t3025 = t3027 ^ 2;
t3125 = 2 * qJD(2);
t3085 = qJD(1) * t3095;
t2963 = qJD(1) * t2998 * t2999 - t2995 * t3085 + qJD(3);
t3002 = sin(qJ(4));
t3007 = cos(qJ(4));
t2942 = t2954 * t3002 - t3007 * t2963;
t2939 = qJD(5) + t2942;
t2938 = qJD(6) + t2939;
t3123 = qJD(6) + t2938;
t3080 = t2994 * t3089;
t2933 = -t2952 * qJD(3) + qJDD(1) * t3083 + t3008 * t3080 + t3078 * t3093;
t3079 = t2997 * t3089;
t2962 = -t2995 * t3079 + t2998 * t3088 + qJDD(3);
t3039 = -t3007 * t2933 - t3002 * t2962;
t2902 = -t2942 * qJD(4) - t3039;
t3121 = t2942 * t3027 - t2902;
t2944 = t2954 * t3007 + t2963 * t3002;
t3001 = sin(qJ(5));
t3006 = cos(qJ(5));
t2920 = t2944 * t3001 - t3006 * t3027;
t2922 = t3006 * t2944 + t3001 * t3027;
t3000 = sin(qJ(6));
t3005 = cos(qJ(6));
t2890 = t3005 * t2920 + t2922 * t3000;
t3120 = t2890 ^ 2;
t2892 = -t2920 * t3000 + t2922 * t3005;
t3119 = t2892 ^ 2;
t3118 = t2920 ^ 2;
t3117 = t2922 ^ 2;
t3116 = t2938 ^ 2;
t3115 = t2939 ^ 2;
t3114 = t2942 ^ 2;
t3113 = t2944 ^ 2;
t3112 = t2952 ^ 2;
t3111 = t2954 ^ 2;
t3110 = t2963 ^ 2;
t2993 = t2999 ^ 2;
t3105 = t2890 * t2892;
t3104 = t2920 * t2922;
t3103 = t2939 * t2920;
t3102 = t2942 * t2944;
t3101 = t2952 * t2954;
t3100 = t2952 * t2963;
t3099 = t2963 * t2954;
t2991 = t2996 ^ 2;
t3098 = t2991 * t3010;
t3092 = qJD(5) - t2939;
t3091 = qJD(6) - t2938;
t3022 = qJ(2) * t3089 - t3031;
t2941 = -g(3) * t3097 + t2994 * t3021 + t2997 * t3022 + t3085 * t3125;
t3087 = t2994 * t3107;
t2908 = pkin(9) * t3026 + (-pkin(2) * t2993 + (t2999 * t3087 + t3034 * t3095) * t2996) * t3010 + t2941;
t2863 = t3008 * t2908 + t3003 * t3126;
t2930 = pkin(3) * t2952 - pkin(10) * t2954;
t2850 = -pkin(3) * t3110 + pkin(10) * t2962 - t2930 * t2952 + t2863;
t2955 = -t2996 * t3023 + t3077;
t2888 = -t2995 * (-g(3) * t3095 - t2994 * t3022 + t2997 * t3021 + t3086) + t2998 * (-pkin(2) * t3079 + t2955) + (t3084 * t3125 + (-t2995 * t3014 + t2998 * ((-t2996 * t3087 + t3108) * t3097 - t3028 * t3095)) * qJD(1)) * qJD(1);
t2911 = t3019 + t3099;
t3074 = -t2933 + t3100;
t3011 = pkin(3) * t2911 + pkin(10) * t3074 + t2888;
t2819 = t3007 * t2850 + t3002 * t3011;
t2910 = pkin(4) * t2942 - pkin(11) * t2944;
t2802 = -pkin(4) * t3025 + pkin(11) * t3017 - t2942 * t2910 + t2819;
t3072 = t3003 * t2908 - t3008 * t3126;
t2849 = -t2962 * pkin(3) - t3110 * pkin(10) + t2954 * t2930 + t3072;
t3073 = t3002 * t2933 - t3007 * t2962;
t2883 = (0.2e1 * qJD(4) + t2952) * t2944 + t3073;
t2817 = t2883 * pkin(4) + pkin(11) * t3121 + t2849;
t2781 = t3006 * t2802 + t3001 * t2817;
t3081 = t2999 * t3094;
t2780 = -t3001 * t2802 + t3006 * t2817;
t2818 = -t2850 * t3002 + t3007 * t3011;
t3015 = -t3006 * t2902 - t3001 * t3017;
t2872 = -t2920 * qJD(5) - t3015;
t3075 = t2902 * t3001 - t3006 * t3017;
t3032 = qJD(5) * t2922 + t3075;
t3076 = -t2872 * t3000 - t3005 * t3032;
t3029 = t2944 * qJD(4) + qJDD(5) + t3073;
t2866 = t3029 - t3104;
t2763 = (-t2872 - t3103) * pkin(12) + t2866 * pkin(5) + t2780;
t2898 = pkin(5) * t2939 - pkin(12) * t2922;
t2768 = -pkin(5) * t3118 - pkin(12) * t3032 - t2939 * t2898 + t2781;
t2742 = t2763 * t3005 - t2768 * t3000;
t2743 = t2763 * t3000 + t2768 * t3005;
t2725 = t2742 * t3005 + t2743 * t3000;
t2726 = -t2742 * t3000 + t2743 * t3005;
t2714 = -t2725 * t3001 + t2726 * t3006;
t2801 = -t3017 * pkin(4) - t3025 * pkin(11) + t2910 * t2944 - t2818;
t2789 = pkin(5) * t3032 - pkin(12) * t3118 + t2898 * t2922 + t2801;
t2710 = t2714 * t3002 - t2789 * t3007;
t2711 = t2714 * t3007 + t2789 * t3002;
t2713 = t2725 * t3006 + t2726 * t3001;
t3070 = t2711 * t3003 - t2713 * t3008;
t2703 = -t2995 * t2710 + t2998 * t3070;
t2704 = t2711 * t3008 + t2713 * t3003;
t3071 = t2703 * t2997 + t2704 * t2994;
t2753 = -t2780 * t3001 + t2781 * t3006;
t2745 = t2753 * t3002 - t2801 * t3007;
t2746 = t2753 * t3007 + t2801 * t3002;
t2752 = t2780 * t3006 + t2781 * t3001;
t3065 = t2746 * t3003 - t2752 * t3008;
t2720 = -t2995 * t2745 + t2998 * t3065;
t2729 = t2746 * t3008 + t2752 * t3003;
t3069 = t2720 * t2997 + t2729 * t2994;
t2806 = -t2892 * t3091 + t3076;
t3020 = -t3005 * t2872 + t3000 * t3032;
t2808 = t2890 * t3091 + t3020;
t2782 = t2806 * t3000 + t2808 * t3005;
t2783 = t2806 * t3005 - t2808 * t3000;
t2755 = -t2782 * t3001 + t2783 * t3006;
t2840 = -t3119 - t3120;
t2748 = t2755 * t3002 - t2840 * t3007;
t2749 = t2755 * t3007 + t2840 * t3002;
t2754 = t2782 * t3006 + t2783 * t3001;
t3064 = t2749 * t3003 - t2754 * t3008;
t2722 = -t2995 * t2748 + t2998 * t3064;
t2730 = t2749 * t3008 + t2754 * t3003;
t3068 = t2722 * t2997 + t2730 * t2994;
t3024 = -qJDD(6) - t3029;
t2846 = -t3024 - t3105;
t2860 = -t3116 - t3120;
t2813 = t2846 * t3005 + t2860 * t3000;
t2814 = -t2846 * t3000 + t2860 * t3005;
t2786 = -t2813 * t3001 + t2814 * t3006;
t2805 = t2892 * t3123 - t3076;
t2761 = t2786 * t3002 - t2805 * t3007;
t2762 = t2786 * t3007 + t2805 * t3002;
t2785 = t2813 * t3006 + t2814 * t3001;
t3061 = t2762 * t3003 - t2785 * t3008;
t2734 = -t2995 * t2761 + t2998 * t3061;
t2747 = t2762 * t3008 + t2785 * t3003;
t3067 = t2734 * t2997 + t2747 * t2994;
t2847 = t3024 - t3105;
t2873 = -t3116 - t3119;
t2830 = t2847 * t3000 + t2873 * t3005;
t2831 = t2847 * t3005 - t2873 * t3000;
t2792 = -t2830 * t3001 + t2831 * t3006;
t2807 = -t2890 * t3123 - t3020;
t2766 = t2792 * t3002 - t2807 * t3007;
t2767 = t2792 * t3007 + t2807 * t3002;
t2791 = t2830 * t3006 + t2831 * t3001;
t3060 = t2767 * t3003 - t2791 * t3008;
t2736 = -t2995 * t2766 + t2998 * t3060;
t2750 = t2767 * t3008 + t2791 * t3003;
t3066 = t2736 * t2997 + t2750 * t2994;
t2787 = t2818 * t3007 + t2819 * t3002;
t2788 = -t2818 * t3002 + t2819 * t3007;
t3057 = t2788 * t3003 - t2849 * t3008;
t2757 = -t2995 * t2787 + t2998 * t3057;
t2777 = t2788 * t3008 + t2849 * t3003;
t3063 = t2757 * t2997 + t2777 * t2994;
t2855 = -t2922 * t3092 - t3075;
t2857 = t2920 * t3092 + t3015;
t2821 = t2855 * t3006 - t2857 * t3001;
t2878 = -t3117 - t3118;
t2798 = t2821 * t3002 - t2878 * t3007;
t2799 = t2821 * t3007 + t2878 * t3002;
t2820 = t2855 * t3001 + t2857 * t3006;
t3056 = t2799 * t3003 - t2820 * t3008;
t2760 = -t2995 * t2798 + t2998 * t3056;
t2784 = t2799 * t3008 + t2820 * t3003;
t3062 = t2760 * t2997 + t2784 * t2994;
t2882 = -t3115 - t3118;
t2839 = -t2866 * t3001 + t2882 * t3006;
t2854 = (qJD(5) + t2939) * t2922 + t3075;
t2809 = t2839 * t3002 - t2854 * t3007;
t2810 = t2839 * t3007 + t2854 * t3002;
t2838 = t2866 * t3006 + t2882 * t3001;
t3054 = t2810 * t3003 - t2838 * t3008;
t2770 = -t2995 * t2809 + t2998 * t3054;
t2793 = t2810 * t3008 + t2838 * t3003;
t3059 = t2770 * t2997 + t2793 * t2994;
t2867 = -t3029 - t3104;
t2889 = -t3115 - t3117;
t2844 = t2867 * t3006 - t2889 * t3001;
t2856 = t2872 - t3103;
t2811 = t2844 * t3002 - t2856 * t3007;
t2812 = t2844 * t3007 + t2856 * t3002;
t2843 = t2867 * t3001 + t2889 * t3006;
t3053 = t2812 * t3003 - t2843 * t3008;
t2772 = -t2995 * t2811 + t2998 * t3053;
t2795 = t2812 * t3008 + t2843 * t3003;
t3058 = t2772 * t2997 + t2795 * t2994;
t2884 = t2944 * t2952 - t3073;
t2886 = -t2942 * t2952 + t3039;
t2851 = t2884 * t3002 + t2886 * t3007;
t2852 = t2884 * t3007 - t2886 * t3002;
t2896 = -t3113 - t3114;
t3049 = t2852 * t3003 - t2896 * t3008;
t2804 = -t2995 * t2851 + t2998 * t3049;
t2837 = t2852 * t3008 + t2896 * t3003;
t3055 = t2804 * t2997 + t2837 * t2994;
t3048 = t2863 * t3003 - t3008 * t3072;
t2823 = -t2995 * t2888 + t2998 * t3048;
t2836 = t2863 * t3008 + t3003 * t3072;
t3052 = t2823 * t2997 + t2836 * t2994;
t2893 = t3017 - t3102;
t2903 = -t3025 - t3114;
t2868 = t2893 * t3007 + t2903 * t3002;
t2869 = -t2893 * t3002 + t2903 * t3007;
t3046 = t2869 * t3003 - t2883 * t3008;
t2827 = -t2995 * t2868 + t2998 * t3046;
t2842 = t2869 * t3008 + t2883 * t3003;
t3051 = t2827 * t2997 + t2842 * t2994;
t2894 = -t3102 - t3017;
t2907 = -t3113 - t3025;
t2874 = t2894 * t3002 + t2907 * t3007;
t2875 = t2894 * t3007 - t2907 * t3002;
t3045 = t2875 * t3003 + t3008 * t3121;
t2829 = -t2995 * t2874 + t2998 * t3045;
t2845 = t2875 * t3008 - t3003 * t3121;
t3050 = t2829 * t2997 + t2845 * t2994;
t2919 = -t3111 - t3112;
t2912 = -t3019 + t3099;
t2914 = -t2933 - t3100;
t3042 = t2912 * t3003 + t2914 * t3008;
t2865 = -t2995 * t2919 + t2998 * t3042;
t2887 = t2912 * t3008 - t2914 * t3003;
t3047 = t2865 * t2997 + t2887 * t2994;
t2924 = -t3110 - t3112;
t2926 = t2962 - t3101;
t3041 = t2924 * t3003 + t2926 * t3008;
t2877 = -t2995 * t2911 + t2998 * t3041;
t2895 = t2924 * t3008 - t2926 * t3003;
t3044 = t2877 * t2997 + t2895 * t2994;
t2925 = -t2962 - t3101;
t2927 = -t3110 - t3111;
t3040 = t2925 * t3003 + t2927 * t3008;
t2880 = t2995 * t3074 + t2998 * t3040;
t2897 = t2925 * t3008 - t2927 * t3003;
t3043 = t2880 * t2997 + t2897 * t2994;
t2940 = t3016 + ((-qJ(2) * qJDD(1) + qJD(1) * t3109) * t2996 + t3031) * t2994;
t3038 = t2940 * t2997 + t2941 * t2994;
t2978 = t2997 * t3081;
t2965 = t2978 - t3080;
t2977 = t2994 * t3081;
t2966 = t2977 + t3079;
t3037 = t2965 * t2997 + t2966 * t2994;
t2976 = t2997 * t2994 * t3098;
t2968 = t2976 + t3088;
t2972 = (-t2991 * t2992 - t2993) * t3010;
t3036 = t2968 * t2997 + t2972 * t2994;
t2969 = t2976 - t3088;
t2971 = (-t2990 * t2991 - t2993) * t3010;
t3035 = t2969 * t2994 + t2971 * t2997;
t2984 = -qJDD(1) * t3004 - t3009 * t3010;
t2983 = qJDD(1) * t3009 - t3004 * t3010;
t2970 = t3122 * t3098;
t2967 = t2977 - t3079;
t2964 = t2978 + t3080;
t2948 = t2969 * t2997 - t2971 * t2994;
t2947 = -t2968 * t2994 + t2972 * t2997;
t2945 = -t2965 * t2994 + t2966 * t2997;
t2937 = -t2964 * t2996 + t2999 * t3035;
t2936 = -t2967 * t2996 + t2999 * t3036;
t2935 = t2964 * t2999 + t2996 * t3035;
t2934 = t2967 * t2999 + t2996 * t3036;
t2932 = -t2970 * t2996 + t2999 * t3037;
t2931 = t2970 * t2999 + t2996 * t3037;
t2909 = -t2940 * t2994 + t2941 * t2997;
t2900 = -t2996 * t2955 + t2999 * t3038;
t2899 = t2999 * t2955 + t2996 * t3038;
t2879 = t2995 * t3040 - t2998 * t3074;
t2876 = t2998 * t2911 + t2995 * t3041;
t2864 = t2998 * t2919 + t2995 * t3042;
t2861 = -t2880 * t2994 + t2897 * t2997;
t2853 = -t2877 * t2994 + t2895 * t2997;
t2841 = -t2865 * t2994 + t2887 * t2997;
t2835 = -t2996 * t2879 + t2999 * t3043;
t2834 = t2999 * t2879 + t2996 * t3043;
t2833 = -t2996 * t2876 + t2999 * t3044;
t2832 = t2999 * t2876 + t2996 * t3044;
t2828 = t2998 * t2874 + t2995 * t3045;
t2826 = t2998 * t2868 + t2995 * t3046;
t2825 = -t2996 * t2864 + t2999 * t3047;
t2824 = t2999 * t2864 + t2996 * t3047;
t2822 = t2998 * t2888 + t2995 * t3048;
t2803 = t2998 * t2851 + t2995 * t3049;
t2797 = -t2829 * t2994 + t2845 * t2997;
t2796 = -t2827 * t2994 + t2842 * t2997;
t2794 = -t2823 * t2994 + t2836 * t2997;
t2790 = -t2804 * t2994 + t2837 * t2997;
t2779 = -t2996 * t2828 + t2999 * t3050;
t2778 = t2999 * t2828 + t2996 * t3050;
t2776 = -t2996 * t2826 + t2999 * t3051;
t2775 = t2999 * t2826 + t2996 * t3051;
t2774 = -t2996 * t2822 + t2999 * t3052;
t2773 = t2999 * t2822 + t2996 * t3052;
t2771 = t2998 * t2811 + t2995 * t3053;
t2769 = t2998 * t2809 + t2995 * t3054;
t2765 = -t2996 * t2803 + t2999 * t3055;
t2764 = t2999 * t2803 + t2996 * t3055;
t2759 = t2998 * t2798 + t2995 * t3056;
t2758 = -t2772 * t2994 + t2795 * t2997;
t2756 = t2998 * t2787 + t2995 * t3057;
t2751 = -t2770 * t2994 + t2793 * t2997;
t2744 = -t2760 * t2994 + t2784 * t2997;
t2741 = -t2757 * t2994 + t2777 * t2997;
t2740 = -t2996 * t2771 + t2999 * t3058;
t2739 = t2999 * t2771 + t2996 * t3058;
t2738 = -t2996 * t2769 + t2999 * t3059;
t2737 = t2999 * t2769 + t2996 * t3059;
t2735 = t2998 * t2766 + t2995 * t3060;
t2733 = t2998 * t2761 + t2995 * t3061;
t2732 = -t2996 * t2759 + t2999 * t3062;
t2731 = t2999 * t2759 + t2996 * t3062;
t2728 = -t2996 * t2756 + t2999 * t3063;
t2727 = t2999 * t2756 + t2996 * t3063;
t2724 = -t2736 * t2994 + t2750 * t2997;
t2723 = -t2734 * t2994 + t2747 * t2997;
t2721 = t2998 * t2748 + t2995 * t3064;
t2719 = t2998 * t2745 + t2995 * t3065;
t2718 = -t2996 * t2735 + t2999 * t3066;
t2717 = t2999 * t2735 + t2996 * t3066;
t2716 = -t2996 * t2733 + t2999 * t3067;
t2715 = t2999 * t2733 + t2996 * t3067;
t2712 = -t2722 * t2994 + t2730 * t2997;
t2709 = -t2720 * t2994 + t2729 * t2997;
t2708 = -t2996 * t2721 + t2999 * t3068;
t2707 = t2999 * t2721 + t2996 * t3068;
t2706 = -t2996 * t2719 + t2999 * t3069;
t2705 = t2999 * t2719 + t2996 * t3069;
t2702 = t2998 * t2710 + t2995 * t3070;
t2701 = -t2703 * t2994 + t2704 * t2997;
t2700 = -t2996 * t2702 + t2999 * t3071;
t2699 = t2999 * t2702 + t2996 * t3071;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2984, -t2983, 0, -t2986 * t3004 + t2987 * t3009, 0, 0, 0, 0, 0, 0, -t2936 * t3004 + t2947 * t3009, -t2937 * t3004 + t2948 * t3009, -t2932 * t3004 + t2945 * t3009, -t2900 * t3004 + t2909 * t3009, 0, 0, 0, 0, 0, 0, -t2833 * t3004 + t2853 * t3009, -t2835 * t3004 + t2861 * t3009, -t2825 * t3004 + t2841 * t3009, -t2774 * t3004 + t2794 * t3009, 0, 0, 0, 0, 0, 0, -t2776 * t3004 + t2796 * t3009, -t2779 * t3004 + t2797 * t3009, -t2765 * t3004 + t2790 * t3009, -t2728 * t3004 + t2741 * t3009, 0, 0, 0, 0, 0, 0, -t2738 * t3004 + t2751 * t3009, -t2740 * t3004 + t2758 * t3009, -t2732 * t3004 + t2744 * t3009, -t2706 * t3004 + t2709 * t3009, 0, 0, 0, 0, 0, 0, -t2716 * t3004 + t2723 * t3009, -t2718 * t3004 + t2724 * t3009, -t2708 * t3004 + t2712 * t3009, -t2700 * t3004 + t2701 * t3009; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2983, t2984, 0, t2986 * t3009 + t2987 * t3004, 0, 0, 0, 0, 0, 0, t2936 * t3009 + t2947 * t3004, t2937 * t3009 + t2948 * t3004, t2932 * t3009 + t2945 * t3004, t2900 * t3009 + t2909 * t3004, 0, 0, 0, 0, 0, 0, t2833 * t3009 + t2853 * t3004, t2835 * t3009 + t2861 * t3004, t2825 * t3009 + t2841 * t3004, t2774 * t3009 + t2794 * t3004, 0, 0, 0, 0, 0, 0, t2776 * t3009 + t2796 * t3004, t2779 * t3009 + t2797 * t3004, t2765 * t3009 + t2790 * t3004, t2728 * t3009 + t2741 * t3004, 0, 0, 0, 0, 0, 0, t2738 * t3009 + t2751 * t3004, t2740 * t3009 + t2758 * t3004, t2732 * t3009 + t2744 * t3004, t2706 * t3009 + t2709 * t3004, 0, 0, 0, 0, 0, 0, t2716 * t3009 + t2723 * t3004, t2718 * t3009 + t2724 * t3004, t2708 * t3009 + t2712 * t3004, t2700 * t3009 + t2701 * t3004; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2934, t2935, t2931, t2899, 0, 0, 0, 0, 0, 0, t2832, t2834, t2824, t2773, 0, 0, 0, 0, 0, 0, t2775, t2778, t2764, t2727, 0, 0, 0, 0, 0, 0, t2737, t2739, t2731, t2705, 0, 0, 0, 0, 0, 0, t2715, t2717, t2707, t2699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3010, -qJDD(1), 0, t2987, 0, 0, 0, 0, 0, 0, t2947, t2948, t2945, t2909, 0, 0, 0, 0, 0, 0, t2853, t2861, t2841, t2794, 0, 0, 0, 0, 0, 0, t2796, t2797, t2790, t2741, 0, 0, 0, 0, 0, 0, t2751, t2758, t2744, t2709, 0, 0, 0, 0, 0, 0, t2723, t2724, t2712, t2701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3010, 0, t2986, 0, 0, 0, 0, 0, 0, t2936, t2937, t2932, t2900, 0, 0, 0, 0, 0, 0, t2833, t2835, t2825, t2774, 0, 0, 0, 0, 0, 0, t2776, t2779, t2765, t2728, 0, 0, 0, 0, 0, 0, t2738, t2740, t2732, t2706, 0, 0, 0, 0, 0, 0, t2716, t2718, t2708, t2700; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2934, t2935, t2931, t2899, 0, 0, 0, 0, 0, 0, t2832, t2834, t2824, t2773, 0, 0, 0, 0, 0, 0, t2775, t2778, t2764, t2727, 0, 0, 0, 0, 0, 0, t2737, t2739, t2731, t2705, 0, 0, 0, 0, 0, 0, t2715, t2717, t2707, t2699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2972, t2969, t2966, t2941, 0, 0, 0, 0, 0, 0, t2895, t2897, t2887, t2836, 0, 0, 0, 0, 0, 0, t2842, t2845, t2837, t2777, 0, 0, 0, 0, 0, 0, t2793, t2795, t2784, t2729, 0, 0, 0, 0, 0, 0, t2747, t2750, t2730, t2704; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2968, t2971, t2965, t2940, 0, 0, 0, 0, 0, 0, t2877, t2880, t2865, t2823, 0, 0, 0, 0, 0, 0, t2827, t2829, t2804, t2757, 0, 0, 0, 0, 0, 0, t2770, t2772, t2760, t2720, 0, 0, 0, 0, 0, 0, t2734, t2736, t2722, t2703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2967, t2964, t2970, t2955, 0, 0, 0, 0, 0, 0, t2876, t2879, t2864, t2822, 0, 0, 0, 0, 0, 0, t2826, t2828, t2803, t2756, 0, 0, 0, 0, 0, 0, t2769, t2771, t2759, t2719, 0, 0, 0, 0, 0, 0, t2733, t2735, t2721, t2702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2924, t2925, t2912, t2863, 0, 0, 0, 0, 0, 0, t2869, t2875, t2852, t2788, 0, 0, 0, 0, 0, 0, t2810, t2812, t2799, t2746, 0, 0, 0, 0, 0, 0, t2762, t2767, t2749, t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2926, t2927, t2914, -t3072, 0, 0, 0, 0, 0, 0, -t2883, t3121, -t2896, -t2849, 0, 0, 0, 0, 0, 0, -t2838, -t2843, -t2820, -t2752, 0, 0, 0, 0, 0, 0, -t2785, -t2791, -t2754, -t2713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2911, -t3074, t2919, t2888, 0, 0, 0, 0, 0, 0, t2868, t2874, t2851, t2787, 0, 0, 0, 0, 0, 0, t2809, t2811, t2798, t2745, 0, 0, 0, 0, 0, 0, t2761, t2766, t2748, t2710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2903, t2894, t2884, t2819, 0, 0, 0, 0, 0, 0, t2839, t2844, t2821, t2753, 0, 0, 0, 0, 0, 0, t2786, t2792, t2755, t2714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2893, t2907, t2886, t2818, 0, 0, 0, 0, 0, 0, -t2854, -t2856, -t2878, -t2801, 0, 0, 0, 0, 0, 0, -t2805, -t2807, -t2840, -t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2883, -t3121, t2896, t2849, 0, 0, 0, 0, 0, 0, t2838, t2843, t2820, t2752, 0, 0, 0, 0, 0, 0, t2785, t2791, t2754, t2713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2882, t2867, t2855, t2781, 0, 0, 0, 0, 0, 0, t2814, t2831, t2783, t2726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2866, t2889, t2857, t2780, 0, 0, 0, 0, 0, 0, t2813, t2830, t2782, t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2854, t2856, t2878, t2801, 0, 0, 0, 0, 0, 0, t2805, t2807, t2840, t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2860, t2847, t2806, t2743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2846, t2873, t2808, t2742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2805, t2807, t2840, t2789;];
f_new_reg  = t1;
