% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRP7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP7_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:13:54
% EndTime: 2019-03-09 02:14:00
% DurationCPUTime: 1.83s
% Computational Cost: add. (2274->189), mult. (4591->317), div. (0->0), fcn. (4326->6), ass. (0->116)
t138 = cos(qJ(4));
t72 = -pkin(1) - qJ(3);
t139 = -pkin(7) + t72;
t103 = t139 * t138;
t137 = sin(qJ(4));
t147 = -t137 * qJD(3) + qJD(4) * t103;
t70 = sin(pkin(9));
t71 = cos(pkin(9));
t102 = t139 * t137;
t82 = t138 * qJD(3) + qJD(4) * t102;
t77 = t147 * t71 - t82 * t70;
t51 = t137 * t71 + t138 * t70;
t52 = -t137 * t70 + t138 * t71;
t61 = pkin(3) * t70 + qJ(2);
t85 = pkin(4) * t51 - pkin(8) * t52 + t61;
t148 = -qJD(5) * t85 - t77;
t73 = sin(qJ(5));
t68 = t73 ^ 2;
t74 = cos(qJ(5));
t69 = t74 ^ 2;
t124 = t68 - t69;
t54 = (t70 ^ 2 + t71 ^ 2) * qJD(3);
t47 = t51 * qJD(4);
t48 = t52 * qJD(4);
t88 = pkin(4) * t48 + pkin(8) * t47 + qJD(2);
t114 = t148 * t74 - t73 * t88;
t119 = qJD(5) * t73;
t39 = t71 * t102 + t70 * t103;
t4 = t39 * t119 + t114;
t65 = qJD(5) * t74;
t5 = t148 * t73 - t39 * t65 + t74 * t88;
t14 = -t73 * t39 + t74 * t85;
t15 = t74 * t39 + t73 * t85;
t93 = t14 * t73 - t15 * t74;
t146 = qJD(5) * t93 + t4 * t73 - t5 * t74;
t140 = t48 * pkin(5);
t120 = qJD(5) * t52;
t107 = qJ(6) * t120;
t118 = t74 * qJD(6);
t121 = t47 * qJ(6);
t75 = t73 * t107 - t52 * t118 + t74 * t121 + t5;
t1 = t75 + t140;
t2 = t74 * t107 + (qJD(5) * t39 + t52 * qJD(6) - t121) * t73 + t114;
t122 = qJ(6) * t52;
t11 = -t73 * t122 + t15;
t7 = t51 * pkin(5) - t74 * t122 + t14;
t96 = t11 * t74 - t7 * t73;
t145 = t96 * qJD(5) + t1 * t74 - t2 * t73;
t50 = t52 ^ 2;
t144 = 0.2e1 * qJD(2);
t143 = 0.2e1 * qJD(5);
t142 = pkin(4) * t47;
t141 = pkin(5) * t74;
t21 = t147 * t70 + t71 * t82;
t38 = t70 * t102 - t71 * t103;
t136 = t38 * t21;
t135 = t47 * t73;
t134 = t47 * t74;
t133 = t51 * t48;
t132 = t52 * t47;
t131 = t52 * t73;
t130 = t52 * t74;
t63 = -pkin(4) - t141;
t129 = t63 * t74;
t128 = t73 * t48;
t127 = t74 * t48;
t126 = -qJ(6) - pkin(8);
t123 = t68 + t69;
t117 = qJ(2) * qJD(2);
t40 = 0.2e1 * t133;
t116 = t73 * t134;
t115 = -0.2e1 * t119;
t113 = pkin(5) * t119;
t112 = t52 * t119;
t111 = t73 * t65;
t110 = t51 ^ 2 + t50;
t106 = -t63 + t141;
t27 = t123 * t48;
t104 = t50 * t111;
t101 = -pkin(8) * t48 + t142;
t100 = pkin(4) * t52 + pkin(8) * t51;
t97 = pkin(5) * t68 + t129;
t95 = t11 * t73 + t7 * t74;
t94 = t14 * t74 + t15 * t73;
t92 = -t21 * t52 + t38 * t47;
t91 = t132 - t133;
t55 = t126 * t73;
t56 = t126 * t74;
t90 = -t55 * t73 - t56 * t74;
t34 = t52 * t65 - t135;
t87 = t112 + t134;
t32 = t51 * t65 + t128;
t86 = 0.2e1 * t91;
t81 = -qJD(5) * t94 - t4 * t74 - t5 * t73;
t45 = -t126 * t119 - t118;
t46 = -t73 * qJD(6) + t126 * t65;
t78 = -t45 * t74 - t46 * t73 + (-t55 * t74 + t56 * t73) * qJD(5);
t76 = -t39 * t48 - t77 * t51 - t92;
t58 = -0.2e1 * t111;
t57 = 0.2e1 * t111;
t53 = -0.2e1 * t124 * qJD(5);
t30 = t51 * t119 - t127;
t26 = t123 * t47;
t22 = pkin(5) * t131 + t38;
t19 = -0.2e1 * t69 * t132 - 0.2e1 * t104;
t18 = -0.2e1 * t68 * t132 + 0.2e1 * t104;
t17 = t124 * t120 + t116;
t16 = -0.4e1 * t52 * t111 + t124 * t47;
t13 = t124 * t50 * t143 + 0.4e1 * t52 * t116;
t12 = pkin(5) * t34 + t21;
t10 = 0.2e1 * t51 * t27 - 0.2e1 * t132;
t9 = -0.2e1 * t52 * t128 - 0.2e1 * t34 * t51;
t8 = 0.2e1 * t52 * t127 - 0.2e1 * t51 * t87;
t6 = -t110 * t65 + t73 * t86;
t3 = t110 * t119 + t74 * t86;
t20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0.2e1 * t117, 0, 0, 0, 0, 0, 0, t70 * t144, t71 * t144, 0.2e1 * t54, -0.2e1 * t72 * t54 + 0.2e1 * t117, -0.2e1 * t132, 0.2e1 * t47 * t51 - 0.2e1 * t48 * t52, 0, t40, 0, 0, 0.2e1 * qJD(2) * t51 + 0.2e1 * t48 * t61, 0.2e1 * qJD(2) * t52 - 0.2e1 * t47 * t61, 0.2e1 * t76, 0.2e1 * t61 * qJD(2) + 0.2e1 * t39 * t77 + 0.2e1 * t136, t19, t13, t8, t18, t9, t40, 0.2e1 * t21 * t131 + 0.2e1 * t14 * t48 + 0.2e1 * t34 * t38 + 0.2e1 * t5 * t51, 0.2e1 * t21 * t130 - 0.2e1 * t15 * t48 - 0.2e1 * t38 * t87 + 0.2e1 * t4 * t51, 0.2e1 * t146 * t52 + 0.2e1 * t94 * t47, 0.2e1 * t14 * t5 - 0.2e1 * t15 * t4 + 0.2e1 * t136, t19, t13, t8, t18, t9, t40, 0.2e1 * t1 * t51 + 0.2e1 * t12 * t131 + 0.2e1 * t22 * t34 + 0.2e1 * t7 * t48, -0.2e1 * t11 * t48 + 0.2e1 * t12 * t130 + 0.2e1 * t2 * t51 - 0.2e1 * t22 * t87, -0.2e1 * t145 * t52 + 0.2e1 * t95 * t47, 0.2e1 * t1 * t7 - 0.2e1 * t11 * t2 + 0.2e1 * t12 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, 0, 0, 0, 0, 0, 0, 0, t86, -t76, 0, 0, 0, 0, 0, 0, t6, t3, 0, -t48 * t93 + t51 * t81 + t92, 0, 0, 0, 0, 0, 0, t6, t3, 0, -t12 * t52 + t22 * t47 + t96 * t48 + (-t95 * qJD(5) - t1 * t73 - t2 * t74) * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, t48, -t47, 0, qJD(2), 0, 0, 0, 0, 0, 0, -t30, -t32, t26, -t146, 0, 0, 0, 0, 0, 0, -t30, -t32, t26, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, 0, -t48, 0, -t21, -t77, 0, 0, -t17, t16, t32, t17, -t30, 0, -t21 * t74 + t101 * t73 + (-t100 * t74 + t38 * t73) * qJD(5), t21 * t73 + t101 * t74 + (t100 * t73 + t38 * t74) * qJD(5), t81, -t21 * pkin(4) + pkin(8) * t81, -t17, t16, t32, t17, -t30, 0, -t63 * t135 - t12 * t74 + t46 * t51 + t55 * t48 + (t22 * t73 + t97 * t52) * qJD(5), -t47 * t129 + t12 * t73 + t45 * t51 + t56 * t48 + (t106 * t131 + t22 * t74) * qJD(5) (-t46 * t52 + t47 * t55 - t2 + (t52 * t56 - t7) * qJD(5)) * t74 + (t45 * t52 - t47 * t56 - t1 + (t52 * t55 - t11) * qJD(5)) * t73, t1 * t55 - t11 * t45 + t22 * t113 + t12 * t63 + t2 * t56 + t46 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t48, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t34, t27, pkin(8) * t27 - t142, 0, 0, 0, 0, 0, 0, -t87, -t34, t27, -pkin(5) * t112 + t47 * t63 + t48 * t90 + t51 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5) * t90 - t73 * t45 + t46 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t53, 0, t58, 0, 0, pkin(4) * t115, -0.2e1 * pkin(4) * t65, 0, 0, t57, t53, 0, t58, 0, 0, t106 * t115, t97 * t143, 0.2e1 * t78, 0.2e1 * t63 * t113 + 0.2e1 * t45 * t56 + 0.2e1 * t46 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, -t34, t48, t5, t4, 0, 0, 0, 0, -t87, 0, -t34, t48, t75 + 0.2e1 * t140, t2, t87 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t30, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t30, 0, -t32 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t65, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t65, 0, -t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t119, 0, -pkin(8) * t65, pkin(8) * t119, 0, 0, 0, 0, t65, 0, -t119, 0, t46, t45, -pkin(5) * t65, t46 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t87, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, t65, 0, t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t20;
