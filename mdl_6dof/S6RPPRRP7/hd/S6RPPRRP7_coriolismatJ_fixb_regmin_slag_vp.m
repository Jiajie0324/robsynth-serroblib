% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRRP7_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP7_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP7_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP7_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:13:57
% EndTime: 2019-03-09 02:14:04
% DurationCPUTime: 3.18s
% Computational Cost: add. (5351->308), mult. (9513->425), div. (0->0), fcn. (10245->6), ass. (0->254)
t230 = sin(qJ(5));
t375 = 0.2e1 * t230;
t232 = cos(qJ(5));
t359 = -qJ(6) - pkin(8);
t202 = t359 * t232;
t227 = sin(pkin(9));
t366 = cos(qJ(4));
t281 = t366 * t227;
t228 = cos(pkin(9));
t231 = sin(qJ(4));
t328 = t231 * t228;
t194 = t281 + t328;
t363 = t194 * pkin(5);
t211 = t366 * t228;
t329 = t231 * t227;
t193 = -t211 + t329;
t108 = t193 * t232;
t229 = -pkin(1) - qJ(3);
t360 = -pkin(7) + t229;
t197 = t360 * t227;
t282 = t366 * t197;
t198 = t360 * t228;
t330 = t231 * t198;
t132 = t282 + t330;
t333 = t230 * t132;
t210 = t227 * pkin(3) + qJ(2);
t260 = t194 * pkin(4) + t193 * pkin(8);
t95 = t260 + t210;
t66 = -t232 * t95 + t333;
t59 = qJ(6) * t108 - t66;
t43 = t59 + t363;
t284 = t59 / 0.2e1 - t43 / 0.2e1;
t374 = t284 * t202;
t190 = t194 ^ 2;
t191 = t193 ^ 2;
t373 = -t191 - t190;
t290 = t191 - t190;
t185 = t211 / 0.2e1 - t329 / 0.2e1;
t106 = t232 * t194;
t362 = t194 * pkin(8);
t364 = t193 * pkin(4);
t133 = t362 - t364;
t118 = t232 * t133;
t131 = t231 * t197 - t366 * t198;
t342 = t131 * t230;
t50 = -t193 * pkin(5) + qJ(6) * t106 + t118 + t342;
t371 = t50 / 0.2e1;
t225 = t230 ^ 2;
t369 = -t225 / 0.2e1;
t226 = t232 ^ 2;
t368 = t226 / 0.2e1;
t367 = t230 / 0.2e1;
t365 = pkin(5) * t230;
t361 = t232 * pkin(5);
t103 = t193 * t230;
t327 = t232 * t132;
t67 = t230 * t95 + t327;
t60 = qJ(6) * t103 + t67;
t352 = t60 * t232;
t356 = t43 * t230;
t358 = -t356 / 0.2e1 + t352 / 0.2e1;
t357 = pkin(5) * qJD(5);
t355 = t50 * t230;
t354 = t50 * t232;
t261 = t284 * t194;
t292 = -t191 / 0.2e1;
t267 = t292 - 0.1e1 / 0.2e1;
t6 = (t267 * pkin(5) + t261) * t232;
t353 = t6 * qJD(1);
t101 = t230 * t194;
t111 = t131 * t232;
t117 = t230 * t133;
t315 = t111 - t117;
t65 = qJ(6) * t101 - t315;
t351 = t65 * t230;
t350 = t65 * t232;
t63 = pkin(5) * t103;
t82 = t131 - t63;
t83 = -pkin(5) * t101 + t132;
t7 = t43 * t50 + t60 * t65 + t82 * t83;
t349 = t7 * qJD(1);
t286 = t363 / 0.2e1;
t252 = t286 - t284;
t8 = t252 * t232;
t348 = t8 * qJD(1);
t347 = t82 * t230;
t23 = t60 * t230 + t43 * t232;
t10 = -t23 * t194 + (-t351 - t354) * t193;
t346 = t10 * qJD(1);
t289 = pkin(5) * t108;
t11 = -t82 * t289 + (-t43 + t59) * t60;
t345 = t11 * qJD(1);
t33 = t43 * t103;
t12 = -t59 * t103 + t33;
t344 = t12 * qJD(1);
t13 = t252 * t230;
t343 = t13 * qJD(1);
t17 = -t82 * t193 + (-t352 + t356) * t194;
t341 = t17 * qJD(1);
t212 = -pkin(4) - t361;
t271 = -t193 * t212 / 0.2e1;
t337 = t202 * t232;
t201 = t359 * t230;
t338 = t201 * t230;
t234 = (t337 / 0.2e1 + t338 / 0.2e1) * t194 + t271;
t251 = -t354 / 0.2e1 - t351 / 0.2e1;
t18 = t234 + t251;
t340 = t18 * qJD(1);
t20 = t118 * t194 + (t66 - t333) * t193;
t339 = t20 * qJD(1);
t21 = (t315 - t111) * t194 + (t67 - t327) * t193;
t336 = t21 * qJD(1);
t22 = t23 * t193;
t335 = t22 * qJD(1);
t174 = t225 * t194;
t175 = t226 * t194;
t334 = t23 * qJD(1);
t332 = t230 * t202;
t331 = t230 * t232;
t326 = t232 * t201;
t28 = t131 * t103 + t66 * t194;
t325 = t28 * qJD(1);
t29 = -t131 * t108 - t67 * t194;
t324 = t29 * qJD(1);
t268 = -t226 / 0.2e1 + t369;
t242 = t268 * t190 + t292;
t52 = t242 + t268;
t323 = t52 * qJD(1);
t291 = t190 / 0.2e1;
t254 = t291 - t267;
t68 = t254 * t230;
t322 = t68 * qJD(1);
t75 = t254 * t232;
t321 = t75 * qJD(1);
t262 = (t368 + t225 / 0.2e1) * t193;
t79 = t262 - t185;
t320 = t79 * qJD(1);
t84 = t290 * t230;
t319 = t84 * qJD(1);
t85 = t373 * t230;
t318 = t85 * qJD(1);
t86 = t290 * t232;
t317 = t86 * qJD(1);
t316 = t290 * qJD(1);
t221 = t227 ^ 2;
t222 = t228 ^ 2;
t203 = t221 + t222;
t208 = t225 + t226;
t209 = t226 - t225;
t314 = qJD(2) * t194;
t313 = qJD(3) * t232;
t312 = qJD(4) * t230;
t311 = qJD(4) * t232;
t310 = qJD(5) * t230;
t309 = qJD(5) * t232;
t308 = t101 * qJD(1);
t307 = t103 * qJD(1);
t306 = t106 * qJD(1);
t112 = t174 + t175;
t305 = t112 * qJD(1);
t113 = t208 * t191;
t304 = t113 * qJD(1);
t115 = t208 * t193;
t303 = t115 * qJD(1);
t116 = t373 * t232;
t302 = t116 * qJD(1);
t301 = t185 * qJD(1);
t192 = t203 * t229;
t300 = t192 * qJD(1);
t299 = t193 * qJD(1);
t178 = t193 * qJD(4);
t298 = t194 * qJD(1);
t181 = t194 * qJD(4);
t269 = -t221 / 0.2e1 - t222 / 0.2e1;
t200 = -0.1e1 / 0.2e1 + t269;
t297 = t200 * qJD(1);
t296 = t203 * qJD(1);
t295 = t208 * qJD(4);
t294 = t227 * qJD(1);
t293 = t228 * qJD(1);
t288 = pkin(5) * t310;
t287 = pkin(5) * t309;
t285 = t361 / 0.2e1;
t283 = -t352 / 0.2e1;
t280 = t194 * t310;
t279 = t194 * t309;
t278 = t193 * t298;
t277 = t193 * t181;
t276 = t230 * t309;
t275 = t230 * t298;
t274 = t230 * t311;
t273 = t232 * t299;
t171 = t232 * t178;
t272 = t232 * t298;
t270 = -t111 / 0.2e1 + t117 / 0.2e1;
t266 = t230 * t286;
t265 = qJD(1) * t210 + qJD(3);
t264 = qJD(5) + t298;
t263 = t230 * t171;
t259 = t103 * qJD(4) - t279;
t233 = (t283 + t83 / 0.2e1) * t193 + (t350 / 0.2e1 - t355 / 0.2e1 + t82 / 0.2e1) * t194 + t33 / 0.2e1;
t248 = -t332 / 0.2e1 + t326 / 0.2e1;
t2 = t233 - t248;
t64 = (0.1e1 - t208) * t194 * t193;
t258 = t2 * qJD(1) + t64 * qJD(2);
t3 = t374 + (t371 + t212 * t108 / 0.2e1 - t347 / 0.2e1) * pkin(5);
t77 = t212 * t365;
t257 = -t3 * qJD(1) + t77 * qJD(4);
t256 = t337 + t338;
t255 = t193 * t264;
t253 = t362 / 0.2e1 - t364 / 0.2e1;
t244 = t253 * t232;
t26 = -t118 / 0.2e1 - t244;
t250 = pkin(4) * t312 - t26 * qJD(1);
t236 = t253 * t230 + t111 / 0.2e1;
t24 = t236 + t270;
t249 = pkin(4) * t311 - t24 * qJD(1);
t247 = t232 * t255;
t100 = (t369 + t368) * t193;
t246 = -t100 * qJD(1) + t274;
t245 = -t185 * qJD(5) + t278;
t243 = t328 / 0.2e1 + t281 / 0.2e1;
t241 = t191 * qJD(1) * t331 + t100 * qJD(4);
t114 = t209 * t191;
t240 = -t114 * qJD(1) + 0.2e1 * t263;
t239 = t209 * qJD(4) + t273 * t375;
t235 = -t330 / 0.2e1 - t282 / 0.2e1 + t266;
t237 = t193 * t248 + t358;
t16 = t235 + t237;
t80 = t268 * t194 + t243;
t238 = t16 * qJD(1) - t80 * qJD(2) - qJD(4) * t256;
t224 = qJ(2) * qJD(2);
t223 = qJD(1) * qJ(2);
t199 = 0.1e1 / 0.2e1 + t269;
t173 = t185 * qJD(4);
t147 = (-t273 + t312) * pkin(5);
t91 = t101 * qJD(5);
t90 = t100 * qJD(5);
t87 = -t308 - t310;
t81 = t175 / 0.2e1 + t174 / 0.2e1 + t243;
t78 = t262 + t185;
t76 = (-t190 / 0.2e1 + t292 + 0.1e1 / 0.2e1) * t232;
t69 = t191 * t367 + (t291 - 0.1e1 / 0.2e1) * t230;
t51 = t242 - t268;
t27 = t342 + t118 / 0.2e1 - t244;
t25 = t236 - t270;
t19 = t234 - t251;
t15 = -t235 + t237;
t14 = t59 * t367 + t266 + t283 + t358;
t9 = t194 * t285 + t284 * t232;
t5 = t285 + (pkin(5) * t292 + t261) * t232;
t4 = t271 * t361 - t374 + (t347 / 0.2e1 + t371) * pkin(5);
t1 = t233 + t248;
t30 = [0, 0, 0, 0, qJD(2), t224, qJD(2) * t227, qJD(2) * t228, t203 * qJD(3), -t192 * qJD(3) + t224, t277, -t290 * qJD(4), 0, 0, 0, -t178 * t210 + t314, -qJD(2) * t193 - t181 * t210, -t191 * t276 + t226 * t277, -t114 * qJD(5) - 0.2e1 * t194 * t263, t86 * qJD(4) + t193 * t280, -t84 * qJD(4) + t193 * t279, -t277, -t85 * qJD(3) + t20 * qJD(4) + t29 * qJD(5) + t232 * t314, -t116 * qJD(3) + t21 * qJD(4) + t28 * qJD(5) - t230 * t314, t115 * qJD(2) - t10 * qJD(4) - t12 * qJD(5) + t113 * qJD(6), t23 * qJD(2) + t17 * qJD(3) + t7 * qJD(4) + t11 * qJD(5) + t22 * qJD(6); 0, 0, 0, 0, qJD(1), t223, t294, t293, 0, t199 * qJD(3) + t223, 0, 0, 0, 0, 0, t298, -t299, 0, 0, 0, 0, 0, t76 * qJD(5) + t272, t69 * qJD(5) - t275, t303, t51 * qJD(3) + t1 * qJD(4) + t5 * qJD(5) + t334; 0, 0, 0, 0, 0, 0, 0, 0, t296, t199 * qJD(2) - t300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, -t302, 0, t51 * qJD(2) + t19 * qJD(4) + t14 * qJD(5) + t78 * qJD(6) + t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, -t316, -t181, t178, 0, -t132 * qJD(4) - t210 * t299, t131 * qJD(4) - t210 * t298, -t90 + (t226 * t299 - t274) * t194 (t174 - t175) * qJD(4) + 0.2e1 * (qJD(5) - t298) * t193 * t331, -t178 * t230 + t317, -t171 - t319, -t245, t339 + (t230 * t260 - t327) * qJD(4) + t27 * qJD(5), t336 + (t232 * t260 + t333) * qJD(4) + t25 * qJD(5), -t346 + (-t355 + t350 + (t326 - t332) * t194) * qJD(4) + t9 * qJD(5), t349 + t1 * qJD(2) + t19 * qJD(3) + (t50 * t201 - t65 * t202 + t83 * t212) * qJD(4) + t4 * qJD(5) + t15 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t241, t240, t230 * t255, t247, t173, t76 * qJD(2) + t27 * qJD(4) - t67 * qJD(5) + t324, t69 * qJD(2) + t25 * qJD(4) + t66 * qJD(5) + t325, t9 * qJD(4) - t193 * t288 - t344, t5 * qJD(2) + t14 * qJD(3) + t4 * qJD(4) - t60 * t357 + t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t78 * qJD(3) + t15 * qJD(4) + t335; 0, 0, 0, 0, -qJD(1), -t223, -t294, -t293, 0, t200 * qJD(3) - t223, 0, 0, 0, 0, 0, -t298, t299, 0, 0, 0, 0, 0, -t75 * qJD(5) - t272, t68 * qJD(5) + t275, -t303, t52 * qJD(3) + t2 * qJD(4) + t6 * qJD(5) - t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, t297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t181, t178, 0, 0, 0, 0, 0, t103 * qJD(5) - t181 * t232, t108 * qJD(5) + t181 * t230, -t115 * qJD(4) (t193 * t256 + t194 * t212) * qJD(4) + t63 * qJD(5) + t81 * qJD(6) + t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t259 - t321, t108 * qJD(4) + t280 + t322, 0, -pkin(5) * t279 + t63 * qJD(4) + t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, -t296, -t200 * qJD(2) + t300, 0, 0, 0, 0, 0, -t178, -t181, 0, 0, 0, 0, 0, -t171 - t91 + t318, t259 + t302, t112 * qJD(4), -t52 * qJD(2) - t18 * qJD(4) - t13 * qJD(5) + t79 * qJD(6) - t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, -t298, 0, 0, 0, 0, 0, -t273, t307, t305, -t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, -t264 * t232, 0, -t288 - t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t278, t316, 0, 0, 0, t265 * t193, t265 * t194, -t226 * t278 - t90, t247 * t375, t106 * qJD(5) - t317, -t91 + t319, t245, t26 * qJD(5) + t193 * t313 - t339, -t103 * qJD(3) + t24 * qJD(5) - t336, -t112 * qJD(3) - t8 * qJD(5) + t346, -t2 * qJD(2) + t18 * qJD(3) - t3 * qJD(5) + t16 * qJD(6) - t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80 * qJD(6) - t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, t298, 0, 0, 0, 0, 0, t273, -t307, -t305, t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t276, t209 * qJD(5), 0, 0, 0, -pkin(4) * t310, -pkin(4) * t309, t208 * qJD(6), t77 * qJD(5) - qJD(6) * t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t246, t239, t306 + t309, t87, -t301, -pkin(8) * t309 - t250, pkin(8) * t310 - t249, -t287 - t348, t202 * t357 + t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t295, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241, -t240, -t106 * qJD(4) - t193 * t275, t101 * qJD(4) - t193 * t272, t173, t75 * qJD(2) + t101 * qJD(3) - t26 * qJD(4) - t324, -t68 * qJD(2) - t24 * qJD(4) + t194 * t313 - t325, t8 * qJD(4) + t344, -t6 * qJD(2) + t13 * qJD(3) + t3 * qJD(4) + qJD(6) * t289 - t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t321, -t322, 0, -t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t308, t272, 0, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t246, -t239, -t306, t308, t301, t250, t249, t348, -qJD(6) * t365 - t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304, -t79 * qJD(3) - t16 * qJD(4) - t193 * t287 - t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295, -t238 + t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t30;
