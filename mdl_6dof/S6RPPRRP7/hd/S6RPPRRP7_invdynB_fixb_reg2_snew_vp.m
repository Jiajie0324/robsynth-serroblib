% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:04:38
% EndTime: 2019-05-05 15:04:52
% DurationCPUTime: 11.38s
% Computational Cost: add. (41926->563), mult. (95888->789), div. (0->0), fcn. (68422->8), ass. (0->390)
t654 = sin(qJ(4));
t650 = sin(pkin(9));
t651 = cos(pkin(9));
t657 = cos(qJ(4));
t679 = t650 * t657 + t651 * t654;
t622 = t679 * qJD(1);
t624 = (-t650 * t654 + t651 * t657) * qJD(1);
t716 = t624 * t622;
t756 = qJDD(4) - t716;
t759 = t654 * t756;
t758 = t657 * t756;
t653 = sin(qJ(5));
t656 = cos(qJ(5));
t598 = -t656 * qJD(4) + t624 * t653;
t600 = qJD(4) * t653 + t624 * t656;
t557 = t600 * t598;
t707 = t624 * qJD(4);
t751 = t679 * qJDD(1);
t578 = -t751 - t707;
t569 = qJDD(5) - t578;
t688 = -t569 + t557;
t724 = t688 * t653;
t723 = t688 * t656;
t659 = qJD(1) ^ 2;
t655 = sin(qJ(1));
t658 = cos(qJ(1));
t634 = t655 * g(1) - t658 * g(2);
t683 = qJDD(2) - t634;
t666 = -t659 * qJ(2) + t683;
t699 = -0.2e1 * qJD(3) * qJD(1);
t734 = pkin(1) + qJ(3);
t757 = -qJDD(1) * t734 + t666 + t699;
t754 = t688 * pkin(5);
t703 = qJDD(1) * t650;
t646 = t650 ^ 2;
t647 = t651 ^ 2;
t710 = t646 + t647;
t755 = pkin(3) * t703 - (pkin(7) * t710 + t734) * t659;
t753 = t710 * t659;
t612 = qJD(5) + t622;
t564 = t612 * t598;
t702 = qJDD(1) * t651;
t621 = -t654 * t703 + t657 * t702;
t709 = qJD(4) * t622;
t580 = t621 - t709;
t665 = qJD(5) * t598 - qJDD(4) * t653 - t580 * t656;
t752 = -t564 - t665;
t571 = -g(3) * t651 + t650 * t757;
t687 = -t656 * qJDD(4) + t653 * t580;
t504 = (qJD(5) - t612) * t600 + t687;
t596 = t598 ^ 2;
t597 = t600 ^ 2;
t611 = t612 ^ 2;
t618 = t622 ^ 2;
t619 = t624 ^ 2;
t748 = qJD(4) ^ 2;
t537 = -t611 - t596;
t470 = t537 * t653 - t723;
t747 = pkin(4) * t470;
t544 = -t597 - t611;
t520 = t557 + t569;
t726 = t520 * t653;
t478 = t544 * t656 - t726;
t746 = pkin(4) * t478;
t745 = pkin(4) * t654;
t508 = -t564 + t665;
t446 = -t504 * t656 - t508 * t653;
t531 = -t596 - t597;
t421 = t446 * t654 - t531 * t657;
t422 = t446 * t657 + t531 * t654;
t371 = t421 * t651 + t422 * t650;
t444 = -t504 * t653 + t508 * t656;
t343 = -t371 * t658 + t444 * t655;
t744 = pkin(6) * t343;
t471 = t537 * t656 + t724;
t503 = (qJD(5) + t612) * t600 + t687;
t428 = t471 * t654 - t503 * t657;
t429 = t471 * t657 + t503 * t654;
t377 = t428 * t651 + t429 * t650;
t354 = -t377 * t658 + t470 * t655;
t743 = pkin(6) * t354;
t725 = t520 * t656;
t479 = -t544 * t653 - t725;
t434 = t479 * t654 - t657 * t752;
t435 = t479 * t657 + t654 * t752;
t382 = t434 * t651 + t435 * t650;
t358 = -t382 * t658 + t478 * t655;
t742 = pkin(6) * t358;
t741 = pkin(7) * t421;
t740 = pkin(7) * t428;
t739 = pkin(7) * t434;
t738 = pkin(8) * t444;
t737 = pkin(8) * t470;
t736 = pkin(8) * t478;
t735 = t650 * g(3);
t733 = qJDD(1) * pkin(1);
t558 = -pkin(3) * t646 * t659 - pkin(7) * t703 + t571;
t662 = t735 + (t699 + (-pkin(3) * t650 - qJ(2)) * t659 + (-pkin(7) - t734) * qJDD(1) + t683) * t651;
t514 = t657 * t558 + t654 * t662;
t572 = pkin(4) * t622 - pkin(8) * t624;
t464 = -pkin(4) * t748 + qJDD(4) * pkin(8) - t572 * t622 + t514;
t705 = qJD(2) * qJD(1);
t644 = 0.2e1 * t705;
t635 = t658 * g(1) + t655 * g(2);
t648 = qJDD(1) * qJ(2);
t678 = t635 - t648;
t669 = -qJDD(3) + t678;
t482 = t644 + (-t580 + t709) * pkin(8) + (-t578 + t707) * pkin(4) - t669 + t755;
t712 = -t653 * t464 + t656 * t482;
t694 = -qJ(6) * t665 - t712;
t674 = -qJ(6) * t564 - t694;
t708 = qJD(6) * t600;
t384 = t674 - 0.2e1 * t708 - t754;
t732 = t384 * t653;
t731 = t384 * t656;
t513 = t558 * t654 - t657 * t662;
t447 = -t513 * t657 + t514 * t654;
t730 = t447 * t650;
t729 = t447 * t651;
t463 = -qJDD(4) * pkin(4) - t748 * pkin(8) + t572 * t624 + t513;
t728 = t463 * t653;
t727 = t463 * t656;
t664 = t669 - 0.2e1 * t705;
t568 = t664 - t755;
t722 = t568 * t654;
t721 = t568 * t657;
t575 = qJDD(4) + t716;
t720 = t575 * t654;
t719 = t575 * t657;
t718 = t612 * t653;
t717 = t612 * t656;
t628 = t710 * qJDD(1);
t715 = t628 * t655;
t714 = t628 * t658;
t713 = t650 * t651;
t418 = t656 * t464 + t653 * t482;
t711 = t646 - t647;
t701 = qJDD(1) * t655;
t700 = qJDD(1) * t658;
t698 = t654 * t557;
t697 = t657 * t557;
t696 = t655 * t716;
t695 = t658 * t716;
t693 = -pkin(4) * t657 - pkin(3);
t691 = -pkin(3) * t470 + pkin(7) * t429;
t690 = -pkin(3) * t478 + pkin(7) * t435;
t368 = t656 * t418 - t653 * t712;
t448 = t513 * t654 + t657 * t514;
t609 = -t659 * pkin(1) + t644 - t678;
t613 = -t666 + t733;
t563 = t658 * t609 - t613 * t655;
t595 = -t634 * t655 - t658 * t635;
t602 = t659 * t734 + t664;
t686 = -t602 + t648;
t632 = -t655 * t659 + t700;
t685 = pkin(6) * t632 + g(3) * t655;
t633 = t658 * t659 + t701;
t684 = -pkin(6) * t633 + g(3) * t658;
t682 = qJ(2) * t444 - t371 * t734;
t681 = qJ(2) * t470 - t377 * t734;
t680 = qJ(2) * t478 - t382 * t734;
t367 = t418 * t653 + t656 * t712;
t570 = t651 * t757 + t735;
t522 = t651 * t570 + t650 * t571;
t523 = -t570 * t650 + t571 * t651;
t562 = t609 * t655 + t613 * t658;
t594 = t634 * t658 - t635 * t655;
t372 = -t421 * t650 + t422 * t651;
t677 = pkin(2) * t444 - t372 * t734;
t378 = -t428 * t650 + t429 * t651;
t676 = pkin(2) * t470 - t378 * t734;
t383 = -t434 * t650 + t435 * t651;
t675 = pkin(2) * t478 - t383 * t734;
t626 = t650 * t753;
t592 = -t626 * t655 + t650 * t700;
t590 = t626 * t658 + t650 * t701;
t673 = pkin(2) * t371 + pkin(3) * t421 - pkin(4) * t531 + pkin(8) * t446 - qJ(2) * t372;
t672 = pkin(2) * t377 + pkin(3) * t428 - pkin(4) * t503 + pkin(8) * t471 - qJ(2) * t378;
t671 = pkin(2) * t382 + pkin(3) * t434 - pkin(4) * t752 + pkin(8) * t479 - qJ(2) * t383;
t535 = -qJD(5) * t600 - t687;
t559 = pkin(5) * t612 - qJ(6) * t600;
t670 = t535 * qJ(6) - 0.2e1 * qJD(6) * t598 - t612 * t559 + t418;
t413 = -t535 * pkin(5) - t596 * qJ(6) + t559 * t600 + qJDD(6) + t463;
t631 = t711 * t659;
t629 = t711 * qJDD(1);
t625 = t651 * t753;
t608 = -t619 - t748;
t607 = -t619 + t748;
t606 = t618 - t748;
t605 = t633 * t713;
t604 = t632 * t713;
t593 = -t625 * t655 + t651 * t700;
t591 = t625 * t658 + t651 * t701;
t588 = 0.2e1 * t708;
t586 = -t658 * t753 - t715;
t585 = -t655 * t753 + t714;
t583 = t619 - t618;
t582 = pkin(2) * t703 - t651 * t602;
t581 = pkin(2) * t702 + t650 * t602;
t579 = t621 - 0.2e1 * t709;
t577 = t751 + 0.2e1 * t707;
t573 = -t748 - t618;
t567 = (-t622 * t657 + t624 * t654) * qJD(4);
t566 = (-t622 * t654 - t624 * t657) * qJD(4);
t561 = -t597 + t611;
t560 = t596 - t611;
t556 = -t618 - t619;
t554 = -pkin(2) * t626 + t570;
t553 = -pkin(2) * t625 - t571;
t552 = -t597 + t596;
t548 = t580 * t657 - t654 * t707;
t547 = t580 * t654 + t657 * t707;
t546 = -t578 * t654 + t657 * t709;
t545 = t578 * t657 + t654 * t709;
t543 = -t608 * t654 - t719;
t542 = -t607 * t654 + t758;
t541 = t606 * t657 - t720;
t540 = t608 * t657 - t720;
t539 = t607 * t657 + t759;
t538 = t606 * t654 + t719;
t530 = -t577 * t657 - t579 * t654;
t529 = t621 * t654 - t657 * t751;
t528 = -t577 * t654 + t579 * t657;
t527 = -t621 * t657 - t654 * t751;
t525 = t573 * t657 - t759;
t524 = t573 * t654 + t758;
t518 = (-t598 * t656 + t600 * t653) * t612;
t517 = (-t598 * t653 - t600 * t656) * t612;
t516 = -pkin(2) * t753 - t523;
t515 = -t566 * t651 - t567 * t650;
t512 = -pkin(7) * t540 - t721;
t510 = t522 * t655 - t602 * t658;
t509 = -t522 * t658 - t602 * t655;
t500 = -t600 * t718 - t656 * t665;
t499 = t600 * t717 - t653 * t665;
t498 = -t535 * t653 + t598 * t717;
t497 = t535 * t656 + t598 * t718;
t496 = -pkin(7) * t524 - t722;
t495 = -t547 * t651 - t548 * t650;
t494 = -t545 * t651 - t546 * t650;
t493 = -t540 * t650 + t543 * t651;
t492 = t540 * t651 + t543 * t650;
t491 = -t539 * t651 - t542 * t650;
t490 = -t538 * t651 - t541 * t650;
t489 = t518 * t657 + t569 * t654;
t488 = t518 * t654 - t569 * t657;
t487 = t560 * t656 - t726;
t486 = -t561 * t653 - t723;
t485 = t560 * t653 + t725;
t484 = t561 * t656 - t724;
t483 = -pkin(3) * t579 + pkin(7) * t543 - t722;
t475 = -t527 * t650 + t529 * t651;
t474 = -t528 * t651 - t530 * t650;
t473 = t527 * t651 + t529 * t650;
t472 = -pkin(3) * t577 + pkin(7) * t525 + t721;
t469 = pkin(2) * t522 - qJ(2) * t523;
t468 = -t524 * t650 + t525 * t651;
t467 = t524 * t651 + t525 * t650;
t460 = t492 * t655 + t579 * t658;
t459 = -t492 * t658 + t579 * t655;
t458 = t500 * t657 + t698;
t457 = t498 * t657 - t698;
t456 = t500 * t654 - t697;
t455 = t498 * t654 + t697;
t454 = -pkin(2) * t602 - t523 * t734;
t453 = -pkin(5) * t752 - qJ(6) * t520;
t452 = t467 * t655 + t577 * t658;
t451 = -t467 * t658 + t577 * t655;
t450 = t473 * t655 + t556 * t658;
t449 = -t473 * t658 + t556 * t655;
t445 = -t503 * t656 - t653 * t752;
t443 = -t503 * t653 + t656 * t752;
t440 = t487 * t657 - t504 * t654;
t439 = t486 * t657 - t508 * t654;
t438 = t487 * t654 + t504 * t657;
t437 = t486 * t654 + t508 * t657;
t436 = pkin(3) * t568 + pkin(7) * t448;
t431 = -t488 * t650 + t489 * t651;
t430 = -t488 * t651 - t489 * t650;
t425 = t445 * t657 - t552 * t654;
t424 = t445 * t654 + t552 * t657;
t423 = -pkin(7) * t527 - t447;
t419 = pkin(7) * t422;
t416 = t727 - t736;
t414 = t728 - t737;
t412 = -pkin(3) * t556 + pkin(7) * t529 + t448;
t411 = -pkin(4) * t444 - pkin(5) * t508;
t410 = -t456 * t650 + t458 * t651;
t409 = -t455 * t650 + t457 * t651;
t408 = -t456 * t651 - t458 * t650;
t407 = -t455 * t651 - t457 * t650;
t406 = -t430 * t655 + t517 * t658;
t405 = t430 * t658 + t517 * t655;
t404 = -qJ(6) * t544 + t413;
t403 = pkin(2) * t473 + pkin(3) * t527 - qJ(2) * t475;
t402 = pkin(2) * t492 + pkin(3) * t540 - qJ(2) * t493 - t514;
t401 = t448 * t651 - t730;
t400 = t448 * t650 + t729;
t399 = t418 - t746;
t398 = -t408 * t655 + t499 * t658;
t397 = -t407 * t655 + t497 * t658;
t396 = t408 * t658 + t499 * t655;
t395 = t407 * t658 + t497 * t655;
t394 = -t712 - t747;
t393 = t400 * t655 - t568 * t658;
t392 = -t400 * t658 - t568 * t655;
t391 = -pkin(5) * t596 + t670;
t390 = pkin(2) * t467 + pkin(3) * t524 - qJ(2) * t468 - t513;
t389 = -pkin(5) * t503 + qJ(6) * t537 - t413;
t388 = -t438 * t650 + t440 * t651;
t387 = -t437 * t650 + t439 * t651;
t386 = -t438 * t651 - t440 * t650;
t385 = -t437 * t651 - t439 * t650;
t379 = pkin(2) * t579 - t651 * t483 - t493 * t734 - t650 * t512;
t374 = -t424 * t650 + t425 * t651;
t373 = -t424 * t651 - t425 * t650;
t366 = pkin(2) * t577 - t468 * t734 - t651 * t472 - t650 * t496;
t365 = -t386 * t655 + t485 * t658;
t364 = -t385 * t655 + t484 * t658;
t363 = t386 * t658 + t485 * t655;
t362 = t385 * t658 + t484 * t655;
t361 = t588 + (-t508 + t564) * qJ(6) + t754 + t694;
t360 = -qJ(6) * t504 + (-t531 - t596) * pkin(5) + t670;
t359 = t382 * t655 + t478 * t658;
t357 = pkin(6) * t359;
t356 = -t746 + (-t544 - t596) * pkin(5) + t670;
t355 = t377 * t655 + t470 * t658;
t353 = pkin(6) * t355;
t352 = t404 * t656 - t453 * t653 - t736;
t351 = qJ(6) * t723 - t389 * t653 - t737;
t350 = t588 - t674 - t747 + 0.2e1 * t754;
t349 = t368 * t657 + t463 * t654;
t348 = t368 * t654 - t463 * t657;
t347 = -t373 * t655 + t443 * t658;
t346 = t373 * t658 + t443 * t655;
t345 = -pkin(5) * t413 + qJ(6) * t391;
t344 = t371 * t655 + t444 * t658;
t342 = pkin(6) * t344;
t341 = -t367 - t738;
t340 = pkin(2) * t556 - t651 * t412 - t650 * t423 - t475 * t734;
t339 = t391 * t656 - t732;
t338 = t391 * t653 + t731;
t337 = -t399 * t654 + t416 * t657 - t739;
t336 = -t394 * t654 + t414 * t657 - t740;
t335 = pkin(2) * t400 + pkin(3) * t447 - qJ(2) * t401;
t334 = t399 * t657 + t416 * t654 + t690;
t333 = t394 * t657 + t414 * t654 + t691;
t332 = t339 * t657 + t413 * t654;
t331 = t339 * t654 - t413 * t657;
t330 = -pkin(2) * t568 + pkin(7) * t730 - t401 * t734 - t651 * t436;
t329 = t341 * t657 + t444 * t745 - t741;
t328 = -t360 * t653 + t361 * t656 - t738;
t327 = -pkin(4) * t338 - pkin(5) * t384;
t326 = -t348 * t650 + t349 * t651;
t325 = t348 * t651 + t349 * t650;
t324 = t654 * t341 + t444 * t693 + t419;
t323 = t352 * t657 - t356 * t654 - t739;
t322 = t671 + t728;
t321 = -t350 * t654 + t351 * t657 - t740;
t320 = t672 - t727;
t319 = t352 * t654 + t356 * t657 + t690;
t318 = t350 * t657 + t351 * t654 + t691;
t317 = -pkin(7) * t348 + (-pkin(8) * t657 + t745) * t367;
t316 = t404 * t653 + t453 * t656 + t671;
t315 = t328 * t657 - t411 * t654 - t741;
t314 = t325 * t655 + t367 * t658;
t313 = -t325 * t658 + t367 * t655;
t312 = qJ(6) * t724 + t389 * t656 + t672;
t311 = -pkin(8) * t338 - qJ(6) * t731 - t345 * t653;
t310 = -pkin(3) * t444 + t328 * t654 + t411 * t657 + t419;
t309 = t368 + t673;
t308 = pkin(7) * t349 + (-pkin(8) * t654 + t693) * t367;
t307 = -t331 * t650 + t332 * t651;
t306 = t331 * t651 + t332 * t650;
t305 = t360 * t656 + t361 * t653 + t673;
t304 = -t651 * t334 - t650 * t337 + t675;
t303 = -t651 * t333 - t650 * t336 + t676;
t302 = t306 * t655 + t338 * t658;
t301 = -t306 * t658 + t338 * t655;
t300 = -t651 * t324 - t650 * t329 + t677;
t299 = pkin(2) * t325 + pkin(3) * t348 - pkin(4) * t463 + pkin(8) * t368 - qJ(2) * t326;
t298 = -t651 * t319 - t650 * t323 + t675;
t297 = -t651 * t318 - t650 * t321 + t676;
t296 = -pkin(7) * t331 + t311 * t657 - t327 * t654;
t295 = -t651 * t310 - t650 * t315 + t677;
t294 = -pkin(3) * t338 + pkin(7) * t332 + t311 * t654 + t327 * t657;
t293 = pkin(2) * t367 - t651 * t308 - t650 * t317 - t326 * t734;
t292 = pkin(2) * t306 + pkin(3) * t331 - pkin(4) * t413 + pkin(8) * t339 - qJ(2) * t307 - qJ(6) * t732 + t345 * t656;
t291 = pkin(2) * t338 - t651 * t294 - t650 * t296 - t307 * t734;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t633, -t632, 0, t595, 0, 0, 0, 0, 0, 0, 0, t633, t632, t563, 0, 0, 0, 0, 0, 0, t592, t593, t586, t510, 0, 0, 0, 0, 0, 0, t452, t460, t450, t393, 0, 0, 0, 0, 0, 0, t355, t359, t344, t314, 0, 0, 0, 0, 0, 0, t355, t359, t344, t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t632, -t633, 0, t594, 0, 0, 0, 0, 0, 0, 0, -t632, t633, t562, 0, 0, 0, 0, 0, 0, t590, t591, t585, t509, 0, 0, 0, 0, 0, 0, t451, t459, t449, t392, 0, 0, 0, 0, 0, 0, t354, t358, t343, t313, 0, 0, 0, 0, 0, 0, t354, t358, t343, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t523, 0, 0, 0, 0, 0, 0, t468, t493, t475, t401, 0, 0, 0, 0, 0, 0, t378, t383, t372, t326, 0, 0, 0, 0, 0, 0, t378, t383, t372, t307; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t632, 0, -t633, 0, -t685, -t684, -t594, -pkin(6) * t594, 0, -t632, t633, 0, 0, 0, -t562, t685, t684, -pkin(6) * t562 + (-pkin(1) * t655 + qJ(2) * t658) * g(3), t605, -t629 * t655 - t631 * t658, t593, -t605, -t592, 0, -pkin(6) * t590 + t554 * t658 - t582 * t655, -pkin(6) * t591 + t553 * t658 - t581 * t655, -pkin(2) * t714 - pkin(6) * t585 - t516 * t655, -pkin(6) * t509 - t454 * t655 + t469 * t658, -t495 * t655 + t695, -t474 * t655 + t583 * t658, -t491 * t655 + t621 * t658, -t494 * t655 - t695, -t490 * t655 - t658 * t751, qJDD(4) * t658 - t515 * t655, -pkin(6) * t451 - t366 * t655 + t390 * t658, -pkin(6) * t459 - t379 * t655 + t402 * t658, -pkin(6) * t449 - t340 * t655 + t403 * t658, -pkin(6) * t392 - t330 * t655 + t335 * t658, t398, t347, t364, t397, t365, t406, -t303 * t655 + t320 * t658 - t743, -t304 * t655 + t322 * t658 - t742, -t300 * t655 + t309 * t658 - t744, -pkin(6) * t313 - t293 * t655 + t299 * t658, t398, t347, t364, t397, t365, t406, -t297 * t655 + t312 * t658 - t743, -t298 * t655 + t316 * t658 - t742, -t295 * t655 + t305 * t658 - t744, -pkin(6) * t301 - t291 * t655 + t292 * t658; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t633, 0, t632, 0, t684, -t685, t595, pkin(6) * t595, 0, -t633, -t632, 0, 0, 0, t563, -t684, t685, pkin(6) * t563 + (pkin(1) * t658 + qJ(2) * t655) * g(3), -t604, t629 * t658 - t631 * t655, t591, t604, -t590, 0, pkin(6) * t592 + t554 * t655 + t582 * t658, pkin(6) * t593 + t553 * t655 + t581 * t658, -pkin(2) * t715 + pkin(6) * t586 + t516 * t658, pkin(6) * t510 + t454 * t658 + t469 * t655, t495 * t658 + t696, t474 * t658 + t583 * t655, t491 * t658 + t621 * t655, t494 * t658 - t696, t490 * t658 - t655 * t751, qJDD(4) * t655 + t515 * t658, pkin(6) * t452 + t366 * t658 + t390 * t655, pkin(6) * t460 + t379 * t658 + t402 * t655, pkin(6) * t450 + t340 * t658 + t403 * t655, pkin(6) * t393 + t330 * t658 + t335 * t655, t396, t346, t362, t395, t363, t405, t303 * t658 + t320 * t655 + t353, t304 * t658 + t322 * t655 + t357, t300 * t658 + t309 * t655 + t342, pkin(6) * t314 + t293 * t658 + t299 * t655, t396, t346, t362, t395, t363, t405, t297 * t658 + t312 * t655 + t353, t298 * t658 + t316 * t655 + t357, t295 * t658 + t305 * t655 + t342, pkin(6) * t302 + t291 * t658 + t292 * t655; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t634, t635, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t683 - 0.2e1 * t733, -t635 + t644 + 0.2e1 * t648, pkin(1) * t613 + qJ(2) * t609, t647 * qJDD(1), -0.2e1 * t650 * t702, 0, t646 * qJDD(1), 0, 0, t626 * t734 + t650 * t686, t625 * t734 + t651 * t686, -qJ(2) * t753 + t628 * t734 - t522, -qJ(2) * t602 - t522 * t734, -t547 * t650 + t548 * t651, -t528 * t650 + t530 * t651, -t539 * t650 + t542 * t651, -t545 * t650 + t546 * t651, -t538 * t650 + t541 * t651, -t566 * t650 + t567 * t651, qJ(2) * t577 - t467 * t734 - t650 * t472 + t651 * t496, qJ(2) * t579 - t650 * t483 - t492 * t734 + t651 * t512, qJ(2) * t556 - t650 * t412 + t651 * t423 - t473 * t734, -pkin(7) * t729 - qJ(2) * t568 - t400 * t734 - t650 * t436, t410, t374, t387, t409, t388, t431, -t333 * t650 + t336 * t651 + t681, -t334 * t650 + t337 * t651 + t680, -t324 * t650 + t329 * t651 + t682, qJ(2) * t367 - t650 * t308 + t651 * t317 - t325 * t734, t410, t374, t387, t409, t388, t431, -t318 * t650 + t321 * t651 + t681, -t319 * t650 + t323 * t651 + t680, -t310 * t650 + t315 * t651 + t682, qJ(2) * t338 - t650 * t294 + t651 * t296 - t306 * t734;];
tauB_reg  = t1;
