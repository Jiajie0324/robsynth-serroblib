% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:04:49
% EndTime: 2019-05-07 18:05:29
% DurationCPUTime: 35.94s
% Computational Cost: add. (76808->744), mult. (155599->1018), div. (0->0), fcn. (111200->8), ass. (0->546)
t1077 = sin(qJ(1));
t1081 = cos(qJ(1));
t1074 = sin(qJ(4));
t1075 = sin(qJ(3));
t1079 = cos(qJ(3));
t1080 = cos(qJ(2));
t1152 = qJD(1) * t1080;
t1076 = sin(qJ(2));
t1153 = qJD(1) * t1076;
t1036 = t1075 * t1153 - t1079 * t1152;
t1031 = qJD(4) + t1036;
t1196 = t1031 ^ 2;
t1038 = (t1075 * t1080 + t1076 * t1079) * qJD(1);
t1078 = cos(qJ(4));
t1137 = qJD(2) + qJD(3);
t1004 = t1074 * t1038 - t1078 * t1137;
t1197 = t1004 ^ 2;
t1210 = t1197 - t1196;
t1006 = t1078 * t1038 + t1074 * t1137;
t1149 = t1004 * t1006;
t1121 = qJD(2) * t1152;
t1133 = qJDD(1) * t1076;
t1046 = t1121 + t1133;
t1068 = t1080 * qJDD(1);
t1126 = qJD(2) * t1153;
t1105 = -t1068 + t1126;
t1116 = t1075 * t1046 + t1079 * t1105;
t960 = -t1038 * qJD(3) - t1116;
t957 = qJDD(4) - t960;
t1092 = t957 + t1149;
t1219 = t1078 * t1092;
t836 = t1074 * t1210 + t1219;
t1268 = t1081 * t836;
t1223 = t1074 * t1092;
t1234 = t1078 * t1210 - t1223;
t1275 = t1075 * t1234;
t1130 = qJDD(2) + qJDD(3);
t961 = -t1036 * qJD(3) + t1079 * t1046 - t1075 * t1105;
t1118 = t1074 * t961 - t1078 * t1130;
t1136 = qJD(4) - t1031;
t876 = t1006 * t1136 + t1118;
t767 = t1079 * t876 + t1275;
t1270 = t1079 * t1234;
t771 = t1075 * t876 - t1270;
t702 = t1076 * t767 + t1080 * t771;
t1350 = t1077 * t702 + t1268;
t1273 = t1077 * t836;
t1349 = t1081 * t702 - t1273;
t1100 = -t1074 * t1130 - t1078 * t961;
t1094 = -t1004 * qJD(4) - t1100;
t1148 = t1004 * t1031;
t1212 = -t1148 + t1094;
t1185 = t1074 * t1212;
t1135 = qJD(4) + t1031;
t875 = t1006 * t1135 + t1118;
t784 = t1078 * t875 + t1185;
t1002 = t1006 ^ 2;
t946 = t1002 - t1197;
t941 = t1079 * t946;
t740 = t1075 * t784 + t941;
t1174 = t1075 * t946;
t743 = t1079 * t784 - t1174;
t681 = t1076 * t740 - t1080 * t743;
t778 = -t1074 * t875 + t1078 * t1212;
t1348 = t1077 * t681 - t1081 * t778;
t1347 = t1077 * t778 + t1081 * t681;
t1346 = t1076 * t771 - t1080 * t767;
t1214 = t1002 + t1196;
t1266 = t1078 * t1214 + t1223;
t1303 = t1077 * t1266;
t1265 = -t1074 * t1214 + t1219;
t1302 = t1079 * t1265;
t1295 = -t1075 * t1212 + t1302;
t1304 = t1075 * t1265;
t1296 = t1079 * t1212 + t1304;
t1316 = -t1076 * t1296 + t1080 * t1295;
t1334 = t1081 * t1316 + t1303;
t1345 = pkin(6) * t1334;
t1301 = t1081 * t1266;
t1335 = t1077 * t1316 - t1301;
t1344 = pkin(6) * t1335;
t1343 = t1076 * t743 + t1080 * t740;
t1211 = -t1196 - t1197;
t1093 = t957 - t1149;
t1218 = t1078 * t1093;
t1235 = t1074 * t1211 + t1218;
t1274 = t1077 * t1235;
t1222 = t1074 * t1093;
t1233 = t1078 * t1211 - t1222;
t1271 = t1079 * t1233;
t908 = qJD(4) * t1006 + t1118;
t980 = t1031 * t1006;
t877 = t908 + t980;
t1256 = t1075 * t877 + t1271;
t1276 = t1075 * t1233;
t1262 = -t1079 * t877 + t1276;
t1292 = -t1076 * t1262 + t1080 * t1256;
t1317 = t1081 * t1292 + t1274;
t1342 = pkin(6) * t1317;
t1213 = -t1148 - t1094;
t1280 = t1074 * t876;
t1202 = t1078 * t1213 - t1280;
t1278 = t1078 * t876;
t1201 = -t1074 * t1213 - t1278;
t910 = -t1197 - t1002;
t1277 = t1079 * t910;
t1260 = t1075 * t1201 - t1277;
t1279 = t1075 * t910;
t1261 = t1079 * t1201 + t1279;
t1289 = -t1076 * t1260 + t1080 * t1261;
t1319 = t1077 * t1202 + t1081 * t1289;
t1341 = pkin(6) * t1319;
t1269 = t1081 * t1235;
t1320 = t1077 * t1292 - t1269;
t1340 = pkin(6) * t1320;
t1322 = t1077 * t1289 - t1081 * t1202;
t1339 = pkin(6) * t1322;
t1315 = t1076 * t1295 + t1080 * t1296;
t1338 = pkin(7) * t1315;
t1308 = pkin(9) * t1265;
t1337 = -pkin(1) * t1315 - pkin(2) * t1296 - t1308;
t1314 = pkin(1) * t1266;
t1336 = pkin(7) * t1316 - t1314;
t1290 = t1076 * t1261 + t1080 * t1260;
t1333 = pkin(7) * t1290;
t1291 = t1076 * t1256 + t1080 * t1262;
t1332 = pkin(7) * t1291;
t1331 = pkin(8) * t1296;
t974 = t1002 - t1196;
t1238 = t1074 * t974 + t1218;
t1330 = t1075 * t1238;
t1239 = t1078 * t974 - t1222;
t1272 = t1077 * t1239;
t1329 = t1079 * t1238;
t1267 = t1081 * t1239;
t1288 = pkin(3) * t910;
t1328 = -pkin(1) * t1290 - pkin(2) * t1260 - pkin(9) * t1201 + t1288;
t1284 = pkin(9) * t1233;
t1327 = -pkin(1) * t1291 - pkin(2) * t1262 - t1284;
t1325 = -pkin(1) * t1202 + pkin(7) * t1289;
t1287 = pkin(1) * t1235;
t1324 = pkin(7) * t1292 - t1287;
t1313 = pkin(2) * t1266;
t1323 = pkin(8) * t1295 - t1313;
t1255 = -t1075 * t1213 + t1329;
t1259 = t1079 * t1213 + t1330;
t1294 = -t1076 * t1259 + t1080 * t1255;
t1321 = t1077 * t1294 + t1267;
t1318 = t1081 * t1294 - t1272;
t1312 = pkin(3) * t1266;
t1311 = pkin(8) * t1260;
t1310 = pkin(8) * t1261;
t1309 = pkin(8) * t1262;
t1307 = pkin(9) * t1266;
t1151 = qJD(5) * t1031;
t1023 = -0.2e1 * t1151;
t1298 = -qJ(5) * t1092 + t1023 - t1312;
t1286 = pkin(2) * t1235;
t1297 = pkin(8) * t1256 - t1286;
t1293 = t1076 * t1255 + t1080 * t1259;
t1285 = pkin(3) * t1235;
t1283 = pkin(9) * t1235;
t1282 = qJ(5) * t876;
t1281 = qJ(5) * t910;
t1263 = -qJ(5) * t1211 - t1285;
t1146 = t1031 * t1078;
t966 = t1006 * t1146;
t1226 = -t1074 * t1094 - t966;
t1147 = t1031 * t1074;
t965 = t1006 * t1147;
t1188 = t1078 * t1094 - t965;
t944 = t1075 * t1149;
t1203 = t1079 * t1188 + t944;
t945 = t1079 * t1149;
t1205 = t1075 * t1188 - t945;
t1229 = -t1076 * t1205 + t1080 * t1203;
t1237 = t1077 * t1229 + t1081 * t1226;
t1125 = t1004 * t1147;
t1112 = t966 + t1125;
t1124 = t1004 * t1146;
t1111 = t965 - t1124;
t1173 = t1075 * t957;
t1200 = t1079 * t1111 + t1173;
t952 = t1079 * t957;
t1206 = t1075 * t1111 - t952;
t1231 = -t1076 * t1206 + t1080 * t1200;
t1258 = t1077 * t1231 + t1081 * t1112;
t1102 = t1078 * t908 - t1125;
t1103 = t1074 * t908 + t1124;
t1204 = t1079 * t1103 - t944;
t1207 = t1075 * t1103 + t945;
t1228 = -t1076 * t1207 + t1080 * t1204;
t1257 = t1077 * t1228 + t1081 * t1102;
t1232 = -t1077 * t1226 + t1081 * t1229;
t1254 = -t1077 * t1112 + t1081 * t1231;
t1253 = -t1077 * t1102 + t1081 * t1228;
t1250 = pkin(9) * t1202;
t1248 = qJ(5) * t1212;
t992 = t1038 * t1036;
t1224 = -t992 + t1130;
t1245 = t1075 * t1224;
t1241 = t1079 * t1224;
t1230 = t1076 * t1200 + t1080 * t1206;
t1198 = t1076 * t1203 + t1080 * t1205;
t1227 = t1076 * t1204 + t1080 * t1207;
t1129 = t1137 ^ 2;
t1025 = t1137 * t1036;
t1225 = -t961 + t1025;
t964 = -pkin(5) * t1031 - qJ(6) * t1006;
t1215 = t1006 * t964 + qJDD(6);
t1073 = t1080 ^ 2;
t1083 = qJD(1) ^ 2;
t1070 = t1073 * t1083;
t1082 = qJD(2) ^ 2;
t1060 = -t1070 - t1082;
t1209 = -t908 * pkin(5) + t1215;
t1055 = t1077 * g(1) - t1081 * g(2);
t1104 = qJDD(1) * pkin(1) + t1055;
t963 = (pkin(8) * t1073 + pkin(7)) * t1083 - pkin(2) * t1105 - (qJD(2) * pkin(2) - pkin(8) * t1153) * t1153 + t1104;
t1034 = t1036 ^ 2;
t1035 = t1038 ^ 2;
t1195 = 0.2e1 * t1006;
t1194 = pkin(4) + pkin(5);
t1192 = pkin(3) * t1075;
t1191 = pkin(4) * t1078;
t1117 = t1137 * t1038;
t813 = t1225 * pkin(9) + (-t960 + t1117) * pkin(3) - t963;
t1056 = g(1) * t1081 + g(2) * t1077;
t1097 = -pkin(1) * t1083 + qJDD(1) * pkin(7) - t1056;
t1090 = t1076 * t1097;
t1138 = t1076 * t1083;
t1154 = qJD(1) * qJD(2);
t1084 = -t1090 - t1046 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1138 + pkin(8) * t1154 - g(3)) * t1080;
t1017 = -t1076 * g(3) + t1080 * t1097;
t951 = pkin(2) * t1060 + t1068 * pkin(8) + t1017;
t891 = t1075 * t1084 + t1079 * t951;
t989 = pkin(3) * t1036 - pkin(9) * t1038;
t822 = -pkin(3) * t1129 + pkin(9) * t1130 - t1036 * t989 + t891;
t727 = t1074 * t813 + t1078 * t822;
t890 = t1075 * t951 - t1079 * t1084;
t821 = -t1130 * pkin(3) - t1129 * pkin(9) + t1038 * t989 + t890;
t1187 = t1074 * t821;
t1172 = t1075 * t963;
t986 = t992 + t1130;
t1171 = t1075 * t986;
t792 = t1075 * t891 - t1079 * t890;
t1170 = t1076 * t792;
t1168 = t1078 * t821;
t1166 = t1078 * t877;
t1157 = t1079 * t963;
t1156 = t1079 * t986;
t1155 = t1080 * t792;
t1150 = qJD(6) * t1004;
t1039 = t1083 * pkin(7) + t1104;
t1145 = t1039 * t1076;
t1144 = t1039 * t1080;
t1047 = t1068 - 0.2e1 * t1126;
t1143 = t1047 * t1080;
t1062 = t1080 * t1138;
t1053 = qJDD(2) + t1062;
t1142 = t1053 * t1076;
t1054 = qJDD(2) - t1062;
t1141 = t1054 * t1076;
t1140 = t1054 * t1080;
t1072 = t1076 ^ 2;
t1139 = t1072 * t1083;
t1134 = t1072 + t1073;
t1132 = qJDD(1) * t1077;
t1131 = qJDD(1) * t1081;
t1128 = -pkin(3) * t1079 - pkin(2);
t1123 = t1077 * t992;
t1122 = t1081 * t992;
t1120 = qJ(5) * t1074 + pkin(3);
t943 = pkin(4) * t1004 - qJ(5) * t1006;
t1119 = -pkin(5) * t1004 - t943;
t726 = t1074 * t822 - t1078 * t813;
t793 = t1075 * t890 + t1079 * t891;
t1016 = t1080 * g(3) + t1090;
t950 = t1016 * t1076 + t1080 * t1017;
t1008 = -t1055 * t1077 - t1081 * t1056;
t1115 = t1077 * t1062;
t1114 = t1081 * t1062;
t1050 = -t1077 * t1083 + t1131;
t1113 = -pkin(6) * t1050 - g(3) * t1077;
t1110 = t1075 * t1025;
t1109 = t1075 * t1117;
t1108 = t1079 * t1025;
t1107 = t1079 * t1117;
t1106 = -pkin(4) * t1196 + t957 * qJ(5) - t1004 * t943 + t727;
t669 = t1074 * t727 - t1078 * t726;
t670 = t1074 * t726 + t1078 * t727;
t949 = t1016 * t1080 - t1017 * t1076;
t1007 = t1055 * t1081 - t1056 * t1077;
t1022 = 0.2e1 * t1151;
t707 = t1022 + t1106;
t927 = qJD(2) * t1038 - t1116;
t1101 = -t957 * pkin(4) - qJ(5) * t1196 + qJDD(5) + t726;
t1098 = pkin(5) * t1197 - t1031 * t964 - t1106;
t1096 = t1006 * t943 + t1101;
t1095 = -t957 * pkin(5) + qJ(6) * t1213 + t1101;
t1091 = -t908 * qJ(6) + t1098;
t1089 = t908 * pkin(4) - t1248 + t821;
t1087 = t1004 * t1135 + t1100;
t1086 = qJD(5) * t1195 - t1089;
t667 = (-0.2e1 * qJD(6) - t1119) * t1006 + t1095;
t715 = (pkin(4) * t1031 - 0.2e1 * qJD(5)) * t1006 + t1089;
t698 = (-t877 - t980) * pkin(4) + t1086;
t697 = -pkin(4) * t980 + t1086 + t1248;
t1059 = t1070 - t1082;
t1058 = -t1082 - t1139;
t1057 = t1082 - t1139;
t1052 = t1070 - t1139;
t1051 = t1070 + t1139;
t1049 = t1081 * t1083 + t1132;
t1048 = t1134 * qJDD(1);
t1045 = 0.2e1 * t1121 + t1133;
t1043 = t1080 * t1053;
t1042 = t1134 * t1154;
t1033 = -pkin(6) * t1049 + g(3) * t1081;
t1021 = t1129 - t1035;
t1020 = t1034 - t1129;
t1019 = t1046 * t1080 - t1072 * t1154;
t1018 = -t1073 * t1154 + t1076 * t1105;
t1015 = -t1035 - t1129;
t1014 = -t1058 * t1076 - t1140;
t1013 = -t1057 * t1076 + t1043;
t1012 = t1060 * t1080 - t1142;
t1011 = t1059 * t1080 - t1141;
t1010 = t1058 * t1080 - t1141;
t1009 = t1060 * t1076 + t1043;
t998 = t1048 * t1081 - t1051 * t1077;
t997 = t1048 * t1077 + t1051 * t1081;
t994 = -0.2e1 * t1150;
t993 = -t1045 * t1076 + t1143;
t991 = -t1035 + t1034;
t985 = -t1129 - t1034;
t984 = t1014 * t1081 + t1045 * t1077;
t983 = t1012 * t1081 - t1047 * t1077;
t982 = t1014 * t1077 - t1045 * t1081;
t981 = t1012 * t1077 + t1047 * t1081;
t970 = -t1108 + t1109;
t969 = -t1110 - t1107;
t968 = -pkin(7) * t1010 - t1144;
t967 = -pkin(7) * t1009 - t1145;
t962 = -t1034 - t1035;
t959 = -pkin(1) * t1010 + t1017;
t958 = -pkin(1) * t1009 + t1016;
t936 = t1020 * t1079 - t1171;
t935 = -t1021 * t1075 + t1241;
t934 = t1020 * t1075 + t1156;
t933 = t1021 * t1079 + t1245;
t932 = -t1015 * t1075 - t1156;
t931 = t1015 * t1079 - t1171;
t929 = -t1025 - t961;
t925 = (0.2e1 * qJD(3) + qJD(2)) * t1038 + t1116;
t920 = t1079 * t961 - t1109;
t919 = t1075 * t961 + t1107;
t918 = -t1075 * t960 + t1108;
t917 = t1079 * t960 + t1110;
t916 = -t1039 * t1077 + t1081 * t950;
t915 = t1039 * t1081 + t1077 * t950;
t914 = t1079 * t985 - t1245;
t913 = t1075 * t985 + t1241;
t902 = (-t1004 * t1078 + t1006 * t1074) * t1031;
t899 = (t1004 * t1074 + t1006 * t1078) * t1031;
t897 = -t1076 * t969 + t1080 * t970;
t888 = -pkin(8) * t931 - t1157;
t887 = t908 - t980;
t881 = t1004 * t1136 + t1100;
t874 = -pkin(8) * t913 - t1172;
t873 = -t1076 * t934 + t1080 * t936;
t872 = -t1076 * t933 + t1080 * t935;
t856 = -t1076 * t931 + t1080 * t932;
t855 = t1076 * t932 + t1080 * t931;
t854 = -t1075 * t929 + t1079 * t927;
t853 = t1075 * t1225 - t1079 * t925;
t852 = t1075 * t927 + t1079 * t929;
t851 = -t1075 * t925 - t1079 * t1225;
t849 = t1079 * t902 + t1173;
t846 = t1075 * t902 - t952;
t832 = -t1076 * t919 + t1080 * t920;
t831 = -t1076 * t917 + t1080 * t918;
t830 = -t1076 * t913 + t1080 * t914;
t829 = t1076 * t914 + t1080 * t913;
t812 = pkin(2) * t1225 + pkin(8) * t932 - t1172;
t797 = -pkin(2) * t925 + pkin(8) * t914 + t1157;
t796 = -t1077 * t1225 + t1081 * t856;
t795 = t1077 * t856 + t1081 * t1225;
t794 = -qJ(5) * t877 + qJ(6) * t1093;
t791 = t1077 * t925 + t1081 * t830;
t790 = t1077 * t830 - t1081 * t925;
t786 = -t1074 * t1087 + t1166;
t785 = t1074 * t881 + t1278;
t780 = -t1074 * t877 - t1078 * t1087;
t779 = -t1078 * t881 + t1280;
t777 = pkin(2) * t963 + pkin(8) * t793;
t776 = -t1076 * t852 + t1080 * t854;
t775 = -t1076 * t851 + t1080 * t853;
t774 = t1076 * t854 + t1080 * t852;
t772 = -t1075 * t887 + t1270;
t770 = t1075 * t881 - t1329;
t766 = t1079 * t887 + t1275;
t764 = -t1079 * t881 - t1330;
t760 = -t1076 * t846 + t1080 * t849;
t757 = -t1075 * t1087 - t1302;
t754 = t1079 * t1087 - t1304;
t751 = t1075 * t875 + t1271;
t748 = -t1079 * t875 + t1276;
t746 = -pkin(1) * t855 - pkin(2) * t931 + t891;
t744 = t1079 * t786 - t1174;
t741 = t1075 * t786 + t941;
t739 = t1077 * t962 + t1081 * t776;
t738 = t1077 * t776 - t1081 * t962;
t737 = t1168 + t1307;
t734 = t1079 * t785 - t1279;
t731 = t1075 * t785 + t1277;
t730 = -pkin(1) * t829 - pkin(2) * t913 + t890;
t729 = t1187 - t1283;
t728 = -qJ(6) * t1092 + t1194 * t1212;
t725 = -pkin(8) * t852 - t792;
t718 = -pkin(2) * t962 + pkin(8) * t854 + t793;
t717 = -pkin(1) * t774 - pkin(2) * t852;
t716 = -pkin(7) * t855 - t1076 * t812 + t1080 * t888;
t714 = t1080 * t793 - t1170;
t713 = t1076 * t793 + t1155;
t712 = -pkin(7) * t829 - t1076 * t797 + t1080 * t874;
t710 = -pkin(3) * t1202 - pkin(4) * t1213 + t1282;
t709 = -t1077 * t963 + t1081 * t714;
t708 = t1077 * t714 + t1081 * t963;
t706 = t727 + t1312;
t705 = t726 - t1285;
t703 = -t1076 * t766 + t1080 * t772;
t701 = -t1076 * t764 + t1080 * t770;
t696 = t1096 - t1281;
t695 = -pkin(4) * t910 + t707;
t693 = -t1076 * t754 + t1080 * t757;
t690 = t1076 * t757 + t1080 * t754;
t687 = -t1076 * t748 + t1080 * t751;
t684 = t1076 * t751 + t1080 * t748;
t682 = qJ(6) * t1197 - t1209 + t715;
t680 = -t1076 * t741 + t1080 * t744;
t678 = -pkin(3) * t779 + t1194 * t881 - t1282;
t675 = -t1076 * t731 + t1080 * t734;
t672 = t1076 * t734 + t1080 * t731;
t671 = -pkin(1) * t713 - pkin(2) * t792;
t668 = t1022 - t1091 + 0.2e1 * t1150;
t665 = t1081 * t693 - t1303;
t662 = t1077 * t693 + t1301;
t659 = t1081 * t687 + t1274;
t656 = t1077 * t687 - t1269;
t654 = (-t1197 + t1214) * qJ(6) + t697 + t1209;
t653 = -pkin(4) * t1093 + t1096 + t1263;
t652 = -pkin(4) * t1214 - t1106 + t1298;
t651 = -qJ(5) * t1166 - t1074 * t698 - t1283;
t650 = -pkin(4) * t1185 + t1078 * t697 - t1307;
t649 = t1075 * t821 + t1079 * t670;
t648 = t1075 * t670 - t1079 * t821;
t645 = t1077 * t779 + t1081 * t675;
t642 = t1077 * t675 - t1081 * t779;
t641 = t698 + (-t877 - t908) * pkin(5) + (-t1197 - t1211) * qJ(6) + t1215;
t640 = -qJ(6) * t881 + qJD(6) * t1195 + t1006 * t1119 - t1095 + t1281;
t639 = -t669 - t1250;
t638 = -pkin(7) * t713 - pkin(8) * t1155 - t1076 * t777;
t637 = t1023 + t994 + t1194 * t910 + (-t876 - t908) * qJ(6) + t1098;
t636 = t1074 * t1096 + t1078 * t707;
t635 = t1074 * t707 - t1078 * t1096;
t634 = -pkin(7) * t774 - t1076 * t718 + t1080 * t725;
t633 = -t1194 * t1214 + t1091 + t1298 + t994;
t632 = -pkin(8) * t754 - t1075 * t706 + t1079 * t737;
t631 = -pkin(8) * t748 - t1075 * t705 + t1079 * t729;
t630 = -t1093 * t1194 + t1263 + t667;
t629 = pkin(8) * t757 + t1075 * t737 + t1079 * t706 + t1313;
t628 = -t1074 * t728 + t1078 * t654 - t1307;
t627 = -pkin(1) * t690 - pkin(2) * t754 - pkin(3) * t1087 - t1187 + t1308;
t626 = pkin(8) * t751 + t1075 * t729 + t1079 * t705 - t1286;
t625 = -t1074 * t641 + t1078 * t794 - t1283;
t624 = -qJ(5) * t682 - qJ(6) * t667;
t623 = -pkin(1) * t684 - pkin(2) * t748 + pkin(3) * t875 + t1168 - t1284;
t622 = -t1074 * t695 + t1078 * t696 - t1250;
t621 = t1074 * t667 + t1078 * t668;
t620 = t1074 * t668 - t1078 * t667;
t619 = t1075 * t715 + t1079 * t636;
t618 = t1075 * t636 - t1079 * t715;
t617 = t1079 * t639 + t1192 * t1202 - t1311;
t616 = -t1076 * t648 + t1080 * t649;
t615 = t1076 * t649 + t1080 * t648;
t614 = t1075 * t639 + t1128 * t1202 + t1310;
t613 = -t1078 * t698 + t1120 * t877 + t1327;
t612 = -t1074 * t697 + (-pkin(3) - t1191) * t1212 + t1337;
t611 = -pkin(9) * t635 + (pkin(4) * t1074 - qJ(5) * t1078) * t715;
t610 = -qJ(6) * t668 - t1194 * t682;
t609 = -t1075 * t653 + t1079 * t651 - t1309;
t608 = -pkin(3) * t635 + pkin(4) * t1096 - qJ(5) * t707;
t607 = -t1075 * t652 + t1079 * t650 - t1331;
t606 = t1328 - t670;
t605 = t1075 * t682 + t1079 * t621;
t604 = t1075 * t621 - t1079 * t682;
t603 = t1075 * t651 + t1079 * t653 + t1297;
t602 = -pkin(9) * t779 - t1074 * t637 + t1078 * t640;
t601 = t1075 * t650 + t1079 * t652 + t1323;
t600 = -t1075 * t710 + t1079 * t622 - t1311;
t599 = -pkin(8) * t648 + (-pkin(9) * t1079 + t1192) * t669;
t598 = -pkin(3) * t1212 - t1074 * t654 - t1078 * t728 + t1337;
t597 = pkin(3) * t877 - t1074 * t794 - t1078 * t641 + t1327;
t596 = t1077 * t669 + t1081 * t616;
t595 = t1077 * t616 - t1081 * t669;
t594 = -t1074 * t696 - t1078 * t695 + t1328;
t593 = -pkin(2) * t1202 + t1075 * t622 + t1079 * t710 + t1310;
t592 = -t1075 * t633 + t1079 * t628 - t1331;
t591 = -t1075 * t630 + t1079 * t625 - t1309;
t590 = t1075 * t628 + t1079 * t633 + t1323;
t589 = -t1076 * t618 + t1080 * t619;
t588 = t1076 * t619 + t1080 * t618;
t587 = t1075 * t625 + t1079 * t630 + t1297;
t586 = pkin(8) * t649 + (-pkin(9) * t1075 + t1128) * t669;
t585 = -pkin(7) * t690 - t1076 * t629 + t1080 * t632;
t584 = -pkin(7) * t684 - t1076 * t626 + t1080 * t631;
t583 = -pkin(8) * t731 - t1075 * t678 + t1079 * t602;
t582 = -pkin(1) * t672 - pkin(2) * t731 - pkin(9) * t785 - t1074 * t640 - t1078 * t637 - t1288;
t581 = -pkin(2) * t779 + pkin(8) * t734 + t1075 * t602 + t1079 * t678;
t580 = -pkin(1) * t615 - pkin(2) * t648 + pkin(3) * t821 - pkin(9) * t670;
t579 = -pkin(3) * t620 - qJ(5) * t668 + t1194 * t667;
t578 = t1077 * t635 + t1081 * t589;
t577 = t1077 * t589 - t1081 * t635;
t576 = -t1076 * t614 + t1080 * t617 - t1333;
t575 = -t1076 * t604 + t1080 * t605;
t574 = t1076 * t605 + t1080 * t604;
t573 = -t1076 * t603 + t1080 * t609 - t1332;
t572 = -pkin(9) * t620 - t1074 * t610 + t1078 * t624;
t571 = -t1076 * t601 + t1080 * t607 - t1338;
t570 = -pkin(8) * t618 - t1075 * t608 + t1079 * t611;
t569 = -t1076 * t593 + t1080 * t600 - t1333;
t568 = t1077 * t620 + t1081 * t575;
t567 = t1077 * t575 - t1081 * t620;
t566 = -t1076 * t590 + t1080 * t592 - t1338;
t565 = -pkin(2) * t635 + pkin(8) * t619 + t1075 * t611 + t1079 * t608;
t564 = -t1076 * t587 + t1080 * t591 - t1332;
t563 = -pkin(1) * t588 - pkin(2) * t618 - pkin(9) * t636 + (t1120 + t1191) * t715;
t562 = -pkin(7) * t615 - t1076 * t586 + t1080 * t599;
t561 = -pkin(7) * t672 - t1076 * t581 + t1080 * t583;
t560 = -pkin(8) * t604 - t1075 * t579 + t1079 * t572;
t559 = -pkin(1) * t574 - pkin(2) * t604 + pkin(3) * t682 - pkin(9) * t621 - t1074 * t624 - t1078 * t610;
t558 = -pkin(2) * t620 + pkin(8) * t605 + t1075 * t572 + t1079 * t579;
t557 = -pkin(7) * t588 - t1076 * t565 + t1080 * t570;
t556 = -pkin(7) * t574 - t1076 * t558 + t1080 * t560;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1049, -t1050, 0, t1008, 0, 0, 0, 0, 0, 0, t983, t984, t998, t916, 0, 0, 0, 0, 0, 0, t791, t796, t739, t709, 0, 0, 0, 0, 0, 0, t659, t665, t1319, t596, 0, 0, 0, 0, 0, 0, t1317, t1319, t1334, t578, 0, 0, 0, 0, 0, 0, t1317, t1334, t645, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1050, -t1049, 0, t1007, 0, 0, 0, 0, 0, 0, t981, t982, t997, t915, 0, 0, 0, 0, 0, 0, t790, t795, t738, t708, 0, 0, 0, 0, 0, 0, t656, t662, t1322, t595, 0, 0, 0, 0, 0, 0, t1320, t1322, t1335, t577, 0, 0, 0, 0, 0, 0, t1320, t1335, t642, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1009, t1010, 0, -t949, 0, 0, 0, 0, 0, 0, t829, t855, t774, t713, 0, 0, 0, 0, 0, 0, t684, t690, t1290, t615, 0, 0, 0, 0, 0, 0, t1291, t1290, t1315, t588, 0, 0, 0, 0, 0, 0, t1291, t1315, t672, t574; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1050, 0, -t1049, 0, t1113, -t1033, -t1007, -pkin(6) * t1007, t1019 * t1081 - t1115, -t1052 * t1077 + t1081 * t993, t1013 * t1081 + t1076 * t1132, t1018 * t1081 + t1115, t1011 * t1081 + t1068 * t1077, qJDD(2) * t1077 + t1042 * t1081, -pkin(6) * t981 - t1077 * t958 + t1081 * t967, -pkin(6) * t982 - t1077 * t959 + t1081 * t968, -pkin(6) * t997 + t1081 * t949, -pkin(6) * t915 - (pkin(1) * t1077 - pkin(7) * t1081) * t949, t1081 * t832 + t1123, -t1077 * t991 + t1081 * t775, -t1077 * t929 + t1081 * t872, t1081 * t831 - t1123, t1077 * t927 + t1081 * t873, t1077 * t1130 + t1081 * t897, -pkin(6) * t790 - t1077 * t730 + t1081 * t712, -pkin(6) * t795 - t1077 * t746 + t1081 * t716, -pkin(6) * t738 - t1077 * t717 + t1081 * t634, -pkin(6) * t708 - t1077 * t671 + t1081 * t638, t1232, t1347, t1318, t1253, -t1349, t1254, -pkin(6) * t656 - t1077 * t623 + t1081 * t584, -pkin(6) * t662 - t1077 * t627 + t1081 * t585, -t1077 * t606 + t1081 * t576 - t1339, -pkin(6) * t595 - t1077 * t580 + t1081 * t562, t1232, t1318, -t1347, t1254, t1349, t1253, -t1077 * t613 + t1081 * t573 - t1340, -t1077 * t594 + t1081 * t569 - t1339, -t1077 * t612 + t1081 * t571 - t1344, -pkin(6) * t577 - t1077 * t563 + t1081 * t557, t1232, -t1077 * t780 + t1081 * t680, t1081 * t701 + t1272, t1253, t1081 * t703 + t1273, -t1077 * t899 + t1081 * t760, -t1077 * t597 + t1081 * t564 - t1340, -t1077 * t598 + t1081 * t566 - t1344, -pkin(6) * t642 - t1077 * t582 + t1081 * t561, -pkin(6) * t567 - t1077 * t559 + t1081 * t556; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1049, 0, t1050, 0, t1033, t1113, t1008, pkin(6) * t1008, t1019 * t1077 + t1114, t1052 * t1081 + t1077 * t993, t1013 * t1077 - t1076 * t1131, t1018 * t1077 - t1114, t1011 * t1077 - t1068 * t1081, -qJDD(2) * t1081 + t1042 * t1077, pkin(6) * t983 + t1077 * t967 + t1081 * t958, pkin(6) * t984 + t1077 * t968 + t1081 * t959, pkin(6) * t998 + t1077 * t949, pkin(6) * t916 - (-pkin(1) * t1081 - pkin(7) * t1077) * t949, t1077 * t832 - t1122, t1077 * t775 + t1081 * t991, t1077 * t872 + t1081 * t929, t1077 * t831 + t1122, t1077 * t873 - t1081 * t927, t1077 * t897 - t1081 * t1130, pkin(6) * t791 + t1077 * t712 + t1081 * t730, pkin(6) * t796 + t1077 * t716 + t1081 * t746, pkin(6) * t739 + t1077 * t634 + t1081 * t717, pkin(6) * t709 + t1077 * t638 + t1081 * t671, t1237, t1348, t1321, t1257, -t1350, t1258, pkin(6) * t659 + t1077 * t584 + t1081 * t623, pkin(6) * t665 + t1077 * t585 + t1081 * t627, t1077 * t576 + t1081 * t606 + t1341, pkin(6) * t596 + t1077 * t562 + t1081 * t580, t1237, t1321, -t1348, t1258, t1350, t1257, t1077 * t573 + t1081 * t613 + t1342, t1077 * t569 + t1081 * t594 + t1341, t1077 * t571 + t1081 * t612 + t1345, pkin(6) * t578 + t1077 * t557 + t1081 * t563, t1237, t1077 * t680 + t1081 * t780, t1077 * t701 - t1267, t1257, t1077 * t703 - t1268, t1077 * t760 + t1081 * t899, t1077 * t564 + t1081 * t597 + t1342, t1077 * t566 + t1081 * t598 + t1345, pkin(6) * t645 + t1077 * t561 + t1081 * t582, pkin(6) * t568 + t1077 * t556 + t1081 * t559; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1055, t1056, 0, 0, (t1046 + t1121) * t1076, t1045 * t1080 + t1047 * t1076, t1057 * t1080 + t1142, t1143, t1059 * t1076 + t1140, 0, pkin(1) * t1047 + pkin(7) * t1012 + t1144, -pkin(1) * t1045 + pkin(7) * t1014 - t1145, pkin(1) * t1051 + pkin(7) * t1048 + t950, pkin(1) * t1039 + pkin(7) * t950, t1076 * t920 + t1080 * t919, t1076 * t853 + t1080 * t851, t1076 * t935 + t1080 * t933, t1076 * t918 + t1080 * t917, t1076 * t936 + t1080 * t934, t1076 * t970 + t1080 * t969, -pkin(1) * t925 + pkin(7) * t830 + t1076 * t874 + t1080 * t797, pkin(1) * t1225 + pkin(7) * t856 + t1076 * t888 + t1080 * t812, -pkin(1) * t962 + pkin(7) * t776 + t1076 * t725 + t1080 * t718, pkin(1) * t963 + pkin(7) * t714 - pkin(8) * t1170 + t1080 * t777, t1198, -t1343, t1293, t1227, -t1346, t1230, pkin(7) * t687 + t1076 * t631 + t1080 * t626 - t1287, pkin(7) * t693 + t1076 * t632 + t1080 * t629 + t1314, t1076 * t617 + t1080 * t614 + t1325, -pkin(1) * t669 + pkin(7) * t616 + t1076 * t599 + t1080 * t586, t1198, t1293, t1343, t1230, t1346, t1227, t1076 * t609 + t1080 * t603 + t1324, t1076 * t600 + t1080 * t593 + t1325, t1076 * t607 + t1080 * t601 + t1336, -pkin(1) * t635 + pkin(7) * t589 + t1076 * t570 + t1080 * t565, t1198, t1076 * t744 + t1080 * t741, t1076 * t770 + t1080 * t764, t1227, t1076 * t772 + t1080 * t766, t1076 * t849 + t1080 * t846, t1076 * t591 + t1080 * t587 + t1324, t1076 * t592 + t1080 * t590 + t1336, -pkin(1) * t779 + pkin(7) * t675 + t1076 * t583 + t1080 * t581, -pkin(1) * t620 + pkin(7) * t575 + t1076 * t560 + t1080 * t558;];
tauB_reg  = t1;
