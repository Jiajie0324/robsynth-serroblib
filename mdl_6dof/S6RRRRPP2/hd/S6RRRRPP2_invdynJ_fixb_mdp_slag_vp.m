% Calculate vector of inverse dynamics joint torques for
% S6RRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPP2_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:52
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPP2_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: pkin has to be [9x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRRPP2_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:52:02
% EndTime: 2019-03-09 20:52:16
% DurationCPUTime: 11.01s
% Computational Cost: add. (9999->699), mult. (21759->799), div. (0->0), fcn. (15346->10), ass. (0->303)
t710 = sin(qJ(4));
t833 = qJD(4) * t710;
t711 = sin(qJ(3));
t715 = cos(qJ(2));
t899 = cos(qJ(3));
t806 = qJD(1) * t899;
t712 = sin(qJ(2));
t835 = qJD(1) * t712;
t631 = t711 * t835 - t715 * t806;
t867 = t631 * t710;
t919 = -t833 - t867;
t854 = t711 * t715;
t646 = t712 * t899 + t854;
t824 = qJD(2) + qJD(3);
t586 = t824 * t646;
t800 = qJDD(1) * t899;
t826 = qJDD(1) * t712;
t779 = t711 * t826 - t715 * t800;
t550 = qJD(1) * t586 + t779;
t549 = qJDD(4) + t550;
t627 = qJD(4) + t631;
t924 = qJ(5) * t549 + qJD(5) * t627;
t717 = -pkin(8) - pkin(7);
t660 = t717 * t712;
t648 = qJD(1) * t660;
t661 = t717 * t715;
t650 = qJD(1) * t661;
t809 = t899 * t650;
t580 = t648 * t711 - t809;
t834 = qJD(3) * t711;
t788 = pkin(2) * t834 - t580;
t709 = qJ(2) + qJ(3);
t702 = sin(t709);
t716 = cos(qJ(1));
t860 = t702 * t716;
t713 = sin(qJ(1));
t862 = t702 * t713;
t923 = g(1) * t860 + g(2) * t862;
t714 = cos(qJ(4));
t763 = -t711 * t712 + t715 * t899;
t585 = t824 * t763;
t726 = t585 * qJD(1);
t823 = qJDD(2) + qJDD(3);
t922 = -t710 * t726 + t714 * t823;
t633 = -qJD(1) * t854 - t712 * t806;
t750 = t646 * qJDD(1);
t723 = t750 + t726;
t794 = qJD(4) * t824;
t754 = t633 * t833 + t710 * t823 + (t723 + t794) * t714;
t596 = -t633 * t710 - t714 * t824;
t872 = t596 * t627;
t921 = t754 - t872;
t832 = qJD(4) * t714;
t866 = t631 * t714;
t920 = t832 + t866;
t703 = cos(t709);
t890 = g(3) * t703;
t903 = -t890 + t923;
t874 = t549 * t714;
t918 = pkin(9) * (t627 * t833 - t874);
t704 = t710 * qJ(5);
t781 = pkin(4) * t714 + t704;
t821 = pkin(3) + t781;
t827 = qJD(1) * qJD(2);
t804 = t712 * t827;
t685 = pkin(2) * t804;
t888 = t715 * pkin(2);
t698 = pkin(1) + t888;
t907 = -pkin(9) * t646 - t698;
t498 = t550 * pkin(3) - pkin(9) * t726 + qJDD(1) * t907 + t685;
t803 = t715 * t827;
t588 = qJDD(2) * pkin(2) - t717 * (-t803 - t826);
t825 = qJDD(1) * t715;
t595 = t717 * (-t804 + t825);
t885 = qJD(2) * pkin(2);
t638 = t648 + t885;
t805 = qJD(3) * t899;
t739 = t711 * t588 - t595 * t899 + t638 * t805 + t650 * t834;
t511 = pkin(9) * t823 + t739;
t659 = t698 * qJD(1);
t560 = pkin(3) * t631 + pkin(9) * t633 - t659;
t577 = t638 * t711 - t809;
t565 = pkin(9) * t824 + t577;
t756 = t498 * t710 + t511 * t714 + t560 * t832 - t565 * t833;
t471 = t756 + t924;
t792 = -t498 * t714 + t511 * t710 + t560 * t833 + t565 * t832;
t548 = t549 * pkin(4);
t904 = t548 - qJDD(5);
t473 = t792 - t904;
t917 = t471 * t714 + t473 * t710;
t752 = t633 * t714 - t710 * t824;
t526 = -qJD(4) * t752 + t710 * t750 - t922;
t916 = qJ(6) * t526 + qJD(6) * t596;
t841 = -pkin(4) * t867 + qJ(5) * t866;
t915 = t841 - t788;
t914 = 0.2e1 * t924;
t913 = qJ(5) * t586 - qJD(5) * t763;
t625 = pkin(4) * t833 - qJ(5) * t832 - qJD(5) * t710;
t912 = pkin(5) * t919 - t625;
t690 = qJ(6) * t833;
t911 = qJ(6) * t867 + t690;
t909 = t660 * t899 + t661 * t711;
t908 = -pkin(3) * t703 - pkin(9) * t702;
t785 = g(1) * t716 + g(2) * t713;
t527 = t560 * t714 - t565 * t710;
t829 = qJD(5) - t527;
t634 = t711 * t650;
t576 = t638 * t899 + t634;
t564 = -pkin(3) * t824 - t576;
t749 = qJ(5) * t752 + t564;
t900 = pkin(4) + pkin(5);
t497 = -t596 * t900 + qJD(6) - t749;
t852 = t714 * t716;
t856 = t710 * t713;
t620 = t703 * t856 + t852;
t851 = t716 * t710;
t853 = t713 * t714;
t622 = t703 * t851 - t853;
t863 = t702 * t710;
t743 = g(1) * t622 + g(2) * t620 + g(3) * t863 - t792;
t740 = t743 + t904;
t881 = qJ(6) * t754;
t902 = -(qJD(6) + t497) * t752 + t740 + t881;
t601 = t660 * t711 - t661 * t899;
t812 = qJD(2) * t717;
t649 = t712 * t812;
t651 = t715 * t812;
t543 = qJD(3) * t601 + t649 * t711 - t651 * t899;
t901 = t596 ^ 2;
t594 = t752 ^ 2;
t618 = t627 ^ 2;
t898 = pkin(2) * t712;
t897 = pkin(4) * t633;
t896 = pkin(5) * t549;
t895 = pkin(9) * t549;
t891 = g(2) * t717;
t889 = g(3) * t715;
t887 = pkin(9) - qJ(6);
t886 = pkin(9) * qJD(4);
t884 = qJ(5) * t526;
t883 = qJ(5) * t596;
t882 = qJ(5) * t714;
t880 = qJ(6) * t631;
t517 = pkin(4) * t596 + t749;
t879 = t517 * t631;
t878 = t754 * t710;
t877 = t526 * t714;
t528 = t560 * t710 + t565 * t714;
t876 = t528 * t627;
t696 = pkin(2) * t711 + pkin(9);
t875 = t549 * t696;
t873 = t564 * t631;
t871 = t596 * t710;
t870 = t752 * t596;
t869 = t752 * t627;
t868 = t752 * t714;
t865 = t646 * t710;
t864 = t646 * t714;
t861 = t702 * t714;
t859 = t703 * t713;
t858 = t703 * t714;
t857 = t703 * t716;
t850 = -qJ(6) + t696;
t849 = -t625 + t915;
t572 = -pkin(3) * t633 + pkin(9) * t631;
t848 = t572 * t710 + t576 * t714;
t563 = pkin(2) * t835 + t572;
t581 = t648 * t899 + t634;
t847 = t563 * t710 + t581 * t714;
t619 = t633 * qJ(5);
t515 = -t619 + t847;
t793 = pkin(2) * t805;
t768 = t793 - qJD(6);
t807 = t696 * t833;
t846 = t714 * t768 - t515 - t807 + t911;
t573 = t710 * t581;
t644 = t850 * t714;
t817 = t900 * t633;
t845 = qJD(4) * t644 + t768 * t710 - t573 - (-t563 + t880) * t714 - t817;
t575 = -pkin(3) * t763 + t907;
t844 = t575 * t710 + t601 * t714;
t843 = t912 + t915;
t533 = t577 + t841;
t842 = t533 + t912;
t518 = -t619 + t848;
t840 = -pkin(9) * t833 - qJD(6) * t714 - t518 + t911;
t839 = t625 - t533;
t570 = t710 * t576;
t658 = t887 * t714;
t838 = qJD(4) * t658 - t710 * qJD(6) - t570 - (-t572 + t880) * t714 - t817;
t837 = t923 * t714;
t707 = t712 ^ 2;
t836 = -t715 ^ 2 + t707;
t831 = qJD(5) * t714;
t499 = -qJ(6) * t752 + t527;
t830 = qJD(5) - t499;
t820 = t712 * t885;
t818 = t900 * t710;
t538 = pkin(3) * t586 - pkin(9) * t585 + t820;
t542 = qJD(3) * t909 + t649 * t899 + t651 * t711;
t816 = t538 * t710 + t542 * t714 + t575 * t832;
t815 = t542 * t710 + t575 * t833 + t601 * t832;
t530 = -qJ(5) * t763 + t844;
t814 = t903 * t710;
t813 = g(1) * t857 + g(2) * t859 + g(3) * t702;
t811 = t710 * t899;
t810 = t714 * t899;
t808 = t646 * t832;
t791 = -t588 * t899 - t595 * t711 + t638 * t834 - t650 * t805;
t512 = -pkin(3) * t823 + t791;
t477 = pkin(4) * t526 - qJ(5) * t754 + qJD(5) * t752 + t512;
t802 = -t477 - t890;
t801 = -t512 - t890;
t621 = t703 * t853 - t851;
t799 = -pkin(4) * t620 + qJ(5) * t621;
t623 = t703 * t852 + t856;
t798 = -pkin(4) * t622 + qJ(5) * t623;
t589 = t710 * t601;
t797 = t575 * t714 - t589;
t795 = t627 * t714;
t790 = pkin(4) * t858 + t703 * t704 - t908;
t697 = -pkin(2) * t899 - pkin(3);
t789 = g(1) * t862 - g(2) * t860;
t787 = g(1) * t620 - g(2) * t622;
t786 = g(1) * t621 - g(2) * t623;
t784 = g(1) * t713 - g(2) * t716;
t665 = pkin(9) * t859;
t783 = -qJ(6) * t859 + t665;
t669 = pkin(9) * t857;
t782 = -qJ(6) * t857 + t669;
t500 = qJ(6) * t596 + t528;
t780 = pkin(4) * t710 - t882;
t778 = t710 * t793;
t777 = pkin(5) * t858 + t790;
t506 = -pkin(4) * t627 + t829;
t611 = t627 * qJ(5);
t507 = t611 + t528;
t776 = t506 * t714 - t507 * t710;
t775 = t873 - t875;
t774 = -qJ(6) * t585 - qJD(6) * t646;
t772 = -t698 + t908;
t771 = -t506 * t633 + t517 * t833 + t837;
t770 = t527 * t633 + t564 * t833 + t837;
t769 = t538 * t714 - t815;
t767 = -t818 + t882;
t766 = -t714 * t900 - t704;
t640 = t697 - t781;
t765 = -0.2e1 * pkin(1) * t827 - pkin(7) * qJDD(2);
t764 = -pkin(4) * t621 - qJ(5) * t620 - t716 * t717;
t761 = t585 * t710 + t808;
t760 = -t585 * t714 + t646 * t833;
t759 = pkin(3) * t857 + pkin(4) * t623 + pkin(9) * t860 + qJ(5) * t622 + t698 * t716;
t755 = -t601 * t833 + t816;
t751 = t512 * t710 - t528 * t633 + t564 * t832 - t814;
t747 = -t477 * t710 + t507 * t633 - t517 * t866 + t814;
t746 = t714 * t793 - t807;
t490 = t754 + t872;
t719 = qJD(2) ^ 2;
t745 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t719 + t784;
t720 = qJD(1) ^ 2;
t744 = pkin(1) * t720 - pkin(7) * qJDD(1) + t785;
t742 = -t659 * t633 - t791 + t903;
t469 = -pkin(5) * t526 + qJDD(6) - t477;
t489 = t500 + t611;
t741 = t469 * t710 + t489 * t633 + t497 * t920 + t814;
t738 = qJD(4) * t776 + t917;
t737 = t878 - t877 + (-t868 + t871) * qJD(4);
t486 = -t627 * t900 + t830;
t736 = -g(3) * t858 + t469 * t714 - t486 * t633 + t497 * t919 + t837;
t735 = t506 * t920 + t507 * t919 - t813 + t917;
t733 = -t517 * t752 - t740;
t732 = g(1) * t623 + g(2) * t621 + g(3) * t861 - t756;
t731 = (t921 * t714 + (-t526 + t869) * t710) * MDP(19) + (-t752 * t795 + t878) * MDP(18) + (-t596 * t633 - t618 * t710 + t874) * MDP(21) + (t549 * t710 + t627 * t795 - t633 * t752) * MDP(20) + (t631 * t824 + t723) * MDP(13) + (-t779 + (-qJD(1) * t646 - t633) * t824) * MDP(14) + (-t631 ^ 2 + t633 ^ 2) * MDP(12) + t823 * MDP(15) + (-MDP(11) * t631 + MDP(22) * t627) * t633;
t465 = qJD(6) * t752 + t473 - t881 - t896;
t466 = t471 + t916;
t730 = t489 * t833 + (-qJD(4) * t486 - t466) * t714 + (t489 * t631 - t465) * t710 - t486 * t866 + t813;
t728 = t527 * t627 + t732;
t727 = -t659 * t631 - t739 + t813;
t724 = (g(3) * qJ(6) + t785 * (pkin(3) - t766)) * t702;
t722 = t702 * t785 * t821 - g(1) * t669 - g(2) * t665 - g(3) * t790;
t705 = t714 * pkin(5);
t662 = qJ(5) * t861;
t657 = t887 * t710;
t643 = t850 * t710;
t641 = t705 + t821;
t628 = -qJDD(1) * t698 + t685;
t610 = t705 - t640;
t544 = -pkin(4) * t752 + t883;
t541 = t646 * t780 - t909;
t532 = t646 * t767 + t909;
t531 = pkin(4) * t763 - t797;
t529 = t752 * t900 - t883;
t520 = -t572 * t714 + t570 + t897;
t516 = -t563 * t714 + t573 + t897;
t514 = qJ(6) * t865 + t530;
t505 = t589 + (-qJ(6) * t646 - t575) * t714 + t900 * t763;
t481 = t780 * t585 + (qJD(4) * t781 - t831) * t646 + t543;
t480 = t767 * t585 + (qJD(4) * t766 + t831) * t646 - t543;
t479 = -pkin(4) * t586 - t769;
t478 = t755 + t913;
t476 = qJ(6) * t808 + (-qJD(4) * t601 - t774) * t710 + t816 + t913;
t475 = t646 * t690 - t900 * t586 + (-t538 + t774) * t714 + t815;
t1 = [(t512 * t864 - t528 * t586 - t543 * t752 - t549 * t844 - t564 * t760 - t627 * t755 - t754 * t909 + t756 * t763 - t787) * MDP(24) + (t512 * t865 - t526 * t909 + t527 * t586 + t543 * t596 + t549 * t797 + t564 * t761 + t627 * t769 + t763 * t792 + t786) * MDP(23) + (-t543 * t824 - t698 * t550 - t659 * t586 - t628 * t763 + t631 * t820 + t703 * t784 + t823 * t909) * MDP(16) + (t752 * t760 + t754 * t864) * MDP(18) + (t475 * t752 + t476 * t596 - t505 * t754 + t514 * t526 + (-t486 * t714 + t489 * t710) * t585 + (-t465 * t714 + t466 * t710 + (t486 * t710 + t489 * t714) * qJD(4)) * t646 - t789) * MDP(31) + (-t478 * t596 - t479 * t752 + t754 * t531 - t526 * t530 + t776 * t585 + (-t471 * t710 + t473 * t714 + (-t506 * t710 - t507 * t714) * qJD(4)) * t646 + t789) * MDP(26) + ((-t596 * t714 + t710 * t752) * t585 + (-t878 - t877 + (t868 + t871) * qJD(4)) * t646) * MDP(19) + (-t471 * t763 - t477 * t864 + t478 * t627 + t481 * t752 + t507 * t586 + t517 * t760 + t530 * t549 - t541 * t754 + t787) * MDP(27) + (t549 * t864 - t586 * t752 - t627 * t760 - t754 * t763) * MDP(20) + (-t466 * t763 + t469 * t864 + t476 * t627 - t480 * t752 + t489 * t586 - t497 * t760 + t514 * t549 + t532 * t754 + t787) * MDP(30) + (-t549 * t763 + t586 * t627) * MDP(22) + (t526 * t763 - t549 * t865 - t586 * t596 - t627 * t761) * MDP(21) + (t465 * t763 - t469 * t865 - t475 * t627 - t480 * t596 - t486 * t586 - t497 * t761 - t505 * t549 - t526 * t532 + t786) * MDP(29) + (t473 * t763 + t477 * t865 - t479 * t627 + t481 * t596 - t506 * t586 + t517 * t761 + t526 * t541 - t531 * t549 + t786) * MDP(25) + (-t586 * t824 + t763 * t823) * MDP(14) + (-t646 * t550 - t585 * t631 + t633 * t586 + t723 * t763) * MDP(12) + (-t542 * t824 - t659 * t585 - t601 * t823 + t628 * t646 - t633 * t820 - t698 * t723 - t789) * MDP(17) + (qJDD(2) * t712 + t715 * t719) * MDP(6) + (qJDD(2) * t715 - t712 * t719) * MDP(7) + (t466 * t514 + t489 * t476 + t465 * t505 + t486 * t475 + t469 * t532 + t497 * t480 - g(1) * (-pkin(5) * t621 + t764) - g(2) * (pkin(5) * t623 - qJ(6) * t860 + t759) + (-g(1) * (qJ(6) * t702 + t772) + t891) * t713) * MDP(32) + (t471 * t530 + t507 * t478 + t477 * t541 + t517 * t481 + t473 * t531 + t506 * t479 - g(1) * t764 - g(2) * t759 + (-g(1) * t772 + t891) * t713) * MDP(28) + 0.2e1 * (t712 * t825 - t827 * t836) * MDP(5) + (t585 * t824 + t646 * t823) * MDP(13) + (qJDD(1) * t707 + 0.2e1 * t712 * t803) * MDP(4) + (-t633 * t585 + t646 * t723) * MDP(11) + qJDD(1) * MDP(1) + (t712 * t765 + t715 * t745) * MDP(9) + (-t712 * t745 + t715 * t765) * MDP(10) + t784 * MDP(2) + t785 * MDP(3); (t466 * t644 + t465 * t643 + t469 * t610 - g(1) * (-t716 * t898 + t782) - g(2) * (-t713 * t898 + t783) - g(3) * (t777 + t888) + t843 * t497 + t846 * t489 + t845 * t486 + t724) * MDP(32) + (t477 * t640 - t507 * t515 - t506 * t516 - t849 * t517 + (-t889 + t785 * t712 + (t506 * t811 + t507 * t810) * qJD(3)) * pkin(2) + t738 * t696 + t722) * MDP(28) + (t697 * t526 + t801 * t714 + t775 * t710 + t788 * t596 + (-t778 + t573 + (-qJD(4) * t696 - t563) * t714) * t627 + t770) * MDP(23) + (t580 * t824 + (-t631 * t835 + t823 * t899 - t824 * t834) * pkin(2) + t742) * MDP(16) + t731 + (-t526 * t610 - t549 * t643 - t596 * t843 - t627 * t845 + t736) * MDP(29) + (t515 * t596 + t516 * t752 + (-t596 * t810 - t752 * t811) * qJD(3) * pkin(2) + t737 * t696 + t735) * MDP(26) + (-t640 * t754 + (-qJD(4) * t517 + t875) * t714 - t849 * t752 + (-t515 + t746) * t627 + t747) * MDP(27) + (t549 * t644 + t610 * t754 + t627 * t846 - t752 * t843 + t741) * MDP(30) + (g(3) * t712 + t715 * t744) * MDP(10) + (t697 * t754 + t775 * t714 - t788 * t752 + (-t746 + t847) * t627 + t751) * MDP(24) + (t581 * t824 + (t633 * t835 - t711 * t823 - t805 * t824) * pkin(2) + t727) * MDP(17) + (t526 * t644 + t596 * t846 - t643 * t754 + t752 * t845 + t730) * MDP(31) + (t712 * t744 - t889) * MDP(9) + qJDD(2) * MDP(8) + MDP(6) * t826 + MDP(7) * t825 + (t640 * t526 + t802 * t714 + (-t875 + t879) * t710 - t849 * t596 + (-t696 * t832 + t516 - t778) * t627 + t771) * MDP(25) + (-MDP(4) * t712 * t715 + MDP(5) * t836) * t720; (-g(1) * t782 - g(2) * t783 - g(3) * t777 + t465 * t657 + t466 * t658 + t469 * t641 + t486 * t838 + t489 * t840 + t497 * t842 + t724) * MDP(32) + (pkin(9) * t738 - t477 * t821 - t506 * t520 - t507 * t518 + t517 * t839 + t722) * MDP(28) + (t520 * t627 - t526 * t821 + (t879 - t895) * t710 + t839 * t596 + (-t627 * t886 + t802) * t714 + t771) * MDP(25) + t731 + (-t526 * t641 - t549 * t657 - t596 * t842 - t627 * t838 + t736) * MDP(29) + (pkin(9) * t737 + t518 * t596 + t520 * t752 + t735) * MDP(26) + (-t517 * t832 - t518 * t627 + t752 * t839 + t754 * t821 + t747 - t918) * MDP(27) + (-pkin(3) * t754 + t564 * t866 + t577 * t752 + t627 * t848 + t751 + t918) * MDP(24) + (t549 * t658 + t627 * t840 + t641 * t754 - t752 * t842 + t741) * MDP(30) + (t576 * t824 + t727) * MDP(17) + (t526 * t658 + t596 * t840 - t657 * t754 + t752 * t838 + t730) * MDP(31) + (-pkin(3) * t526 + t570 * t627 - t577 * t596 + (t873 - t895) * t710 + ((-t572 - t886) * t627 + t801) * t714 + t770) * MDP(23) + (t577 * t824 + t742) * MDP(16); -MDP(18) * t870 + (t594 - t901) * MDP(19) + t490 * MDP(20) + (-t526 - t869) * MDP(21) + t549 * MDP(22) + (t564 * t752 + t743 + t876) * MDP(23) + (t564 * t596 + t728) * MDP(24) + (-t544 * t596 + t548 - t733 + t876) * MDP(25) + (-pkin(4) * t754 - t884 - (t507 - t528) * t752 + (t506 - t829) * t596) * MDP(26) + (-t517 * t596 - t544 * t752 - t728 + t914) * MDP(27) + (t471 * qJ(5) - t473 * pkin(4) - t517 * t544 - t506 * t528 - g(1) * t798 - g(2) * t799 - g(3) * (-pkin(4) * t863 + t662) + t829 * t507) * MDP(28) + ((pkin(5) + t900) * t549 + t500 * t627 + t529 * t596 + t902) * MDP(29) + (t497 * t596 - t499 * t627 + t529 * t752 - t732 + t914 + t916) * MDP(30) + (t884 + t754 * t900 - (-t489 + t500) * t752 + (-t486 + t830) * t596) * MDP(31) + (t466 * qJ(5) - t465 * t900 - t486 * t500 - t497 * t529 - g(1) * (-pkin(5) * t622 + t798) - g(2) * (-pkin(5) * t620 + t799) - g(3) * (-t702 * t818 + t662) + t830 * t489) * MDP(32); (-t507 * t627 + t733) * MDP(28) + (-t489 * t627 - t896 - t902) * MDP(32) + (MDP(26) - MDP(31)) * t490 + (MDP(27) + MDP(30)) * (-t618 - t594) + (-t870 - t549) * (MDP(25) + MDP(29)); t921 * MDP(30) + (-t594 - t901) * MDP(31) + (-t486 * t752 - t489 * t596 + t469 + t903) * MDP(32) + (t633 * t832 + t869 + (-t711 * t825 - t712 * t800 - t794) * t710 + t922) * MDP(29);];
tau  = t1;
