% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPP2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP2_invdynJ_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:04:24
% EndTime: 2019-05-07 18:04:49
% DurationCPUTime: 11.13s
% Computational Cost: add. (26229->516), mult. (53023->619), div. (0->0), fcn. (37818->8), ass. (0->328)
t319 = sin(qJ(3));
t320 = sin(qJ(2));
t322 = cos(qJ(3));
t323 = cos(qJ(2));
t296 = (t319 * t323 + t320 * t322) * qJD(1);
t315 = qJD(2) + qJD(3);
t318 = sin(qJ(4));
t321 = cos(qJ(4));
t277 = t296 * t321 + t315 * t318;
t390 = qJD(1) * t320;
t294 = -t322 * t323 * qJD(1) + t319 * t390;
t311 = t320 * qJDD(1);
t384 = qJD(1) * qJD(2);
t375 = t323 * t384;
t301 = t311 + t375;
t376 = t320 * t384;
t383 = t323 * qJDD(1);
t350 = -t376 + t383;
t333 = t322 * t301 + t319 * t350;
t244 = -t294 * qJD(3) + t333;
t382 = qJDD(2) + qJDD(3);
t369 = t318 * t244 - t321 * t382;
t290 = qJD(4) + t294;
t386 = qJD(4) - t290;
t168 = t277 * t386 + t369;
t446 = t290 ^ 2;
t275 = t296 * t318 - t321 * t315;
t447 = t275 ^ 2;
t458 = t447 - t446;
t237 = t277 * t275;
t367 = t319 * t301 - t322 * t350;
t243 = -qJD(3) * t296 - t367;
t241 = qJDD(4) - t243;
t468 = t237 + t241;
t476 = t468 * t318;
t144 = -t321 * t458 + t476;
t520 = t144 * t322;
t521 = t144 * t319;
t555 = t320 * (t168 * t319 + t520) - t323 * (t168 * t322 - t521);
t346 = -t321 * t244 - t318 * t382;
t338 = -t275 * qJD(4) - t346;
t403 = t275 * t290;
t461 = -t403 + t338;
t273 = t277 ^ 2;
t215 = -t446 - t273;
t480 = t321 * t468;
t519 = t215 * t318 + t480;
t533 = t322 * t519;
t525 = -t461 * t319 + t533;
t130 = t215 * t321 - t476;
t538 = pkin(2) * t130;
t552 = pkin(8) * t525 + t538;
t534 = t319 * t519;
t526 = t322 * t461 + t534;
t539 = pkin(1) * t130;
t551 = t539 + pkin(7) * (-t320 * t526 + t323 * t525);
t550 = pkin(2) * t526;
t202 = qJD(4) * t277 + t369;
t257 = t290 * t277;
t169 = t202 + t257;
t459 = -t446 - t447;
t469 = -t237 + t241;
t475 = t469 * t318;
t498 = t321 * t459 - t475;
t504 = t319 * t498;
t532 = -t322 * t169 + t504;
t549 = pkin(2) * t532;
t537 = pkin(3) * t130;
t547 = pkin(8) * t526;
t546 = pkin(8) * t532;
t536 = pkin(9) * t130;
t251 = t273 - t446;
t474 = t469 * t321;
t143 = -t251 * t318 - t474;
t545 = t143 * t319;
t544 = t143 * t322;
t499 = t318 * t459 + t474;
t515 = pkin(2) * t499;
t503 = t322 * t498;
t531 = t169 * t319 + t503;
t543 = pkin(8) * t531 - t515;
t464 = t273 - t447;
t228 = t322 * t464;
t410 = t464 * t319;
t385 = qJD(4) + t290;
t167 = t277 * t385 + t369;
t424 = t461 * t318;
t98 = t167 * t321 + t424;
t542 = t320 * (t322 * t98 - t410) + t323 * (t319 * t98 + t228);
t516 = pkin(1) * t499;
t540 = pkin(7) * (-t320 * t532 + t323 * t531) - t516;
t535 = pkin(9) * t519;
t512 = pkin(9) * t498;
t530 = -pkin(3) * t169 + t512;
t529 = pkin(3) * t461 + t535;
t460 = t403 + t338;
t507 = t168 * t321;
t451 = t318 * t460 - t507;
t207 = -t447 - t273;
t505 = t207 * t322;
t493 = t319 * t451 - t505;
t524 = pkin(2) * t493;
t513 = pkin(3) * t499;
t523 = pkin(8) * t493;
t506 = t207 * t319;
t494 = t322 * t451 + t506;
t522 = pkin(8) * t494;
t511 = pkin(9) * t499;
t137 = t251 * t321 - t475;
t496 = t318 * t458 + t480;
t518 = pkin(7) * (-t320 * t493 + t323 * t494);
t517 = t320 * (t319 * t460 - t544) + t323 * (-t322 * t460 - t545);
t514 = pkin(3) * t207;
t510 = qJ(5) * t168;
t509 = qJ(5) * t207;
t508 = t168 * t318;
t422 = t461 * t321;
t95 = -t167 * t318 + t422;
t434 = qJ(5) * t459;
t500 = pkin(4) * t469 + t434;
t495 = pkin(9) * t451 - t514;
t452 = -t321 * t460 - t508;
t490 = pkin(9) * t452;
t489 = qJ(5) * t461;
t488 = qJ(5) * t468;
t265 = t296 * t294;
t467 = -t265 + t382;
t483 = t319 * t467;
t477 = t322 * t467;
t230 = t319 * t237;
t231 = t322 * t237;
t401 = t290 * t318;
t247 = t277 * t401;
t391 = t321 * t338 - t247;
t450 = t323 * (t319 * t391 - t231) + t320 * (t322 * t391 + t230);
t285 = t315 * t294;
t221 = -t285 + t244;
t317 = t323 ^ 2;
t325 = qJD(1) ^ 2;
t441 = sin(qJ(1));
t442 = cos(qJ(1));
t364 = g(1) * t441 - t442 * g(2);
t347 = qJDD(1) * pkin(1) + t364;
t246 = (pkin(8) * t317 + pkin(7)) * t325 + pkin(2) * t350 - (qJD(2) * pkin(2) - pkin(8) * t390) * t390 + t347;
t110 = -t221 * pkin(9) + (t296 * t315 - t243) * pkin(3) - t246;
t349 = g(1) * t442 + g(2) * t441;
t433 = qJDD(1) * pkin(7);
t331 = -t325 * pkin(1) - t349 + t433;
t280 = -t320 * g(3) + t323 * t331;
t313 = t317 * t325;
t324 = qJD(2) ^ 2;
t463 = -t313 - t324;
t234 = pkin(2) * t463 + pkin(8) * t383 + t280;
t395 = t322 * t234;
t329 = t320 * t331;
t396 = t320 * t325;
t438 = t301 * pkin(8);
t462 = qJDD(2) * pkin(2) - t329 + (pkin(2) * t396 + pkin(8) * t384 - g(3)) * t323 - t438;
t182 = t319 * t462 + t395;
t262 = pkin(3) * t294 - pkin(9) * t296;
t445 = t315 ^ 2;
t125 = -pkin(3) * t445 + pkin(9) * t382 - t294 * t262 + t182;
t66 = -t321 * t110 + t318 * t125;
t67 = t318 * t110 + t321 * t125;
t44 = t318 * t66 + t321 * t67;
t389 = qJD(5) * t290;
t283 = 0.2e1 * t389;
t388 = qJD(6) * t275;
t466 = 0.2e1 * t388 + t283;
t284 = -0.2e1 * t389;
t465 = -0.2e1 * t388 + t284;
t358 = -pkin(5) * t290 - qJ(6) * t277;
t457 = t277 * t358 + qJDD(6);
t456 = -t202 * pkin(5) + t457;
t348 = -t241 * pkin(4) - qJ(5) * t446 + qJDD(5) + t66;
t339 = -t241 * pkin(5) - qJ(6) * t460 + t348;
t229 = pkin(4) * t275 - qJ(5) * t277;
t373 = -pkin(5) * t275 - t229;
t40 = (-0.2e1 * qJD(6) - t373) * t277 + t339;
t355 = pkin(4) * t446 - t241 * qJ(5) + t275 * t229 - t67;
t343 = -pkin(5) * t447 + t202 * qJ(6) + t290 * t358 - t355;
t41 = t343 + t466;
t443 = pkin(4) + pkin(5);
t455 = qJ(5) * t41 - t40 * t443;
t176 = t275 * t386 + t346;
t454 = -t176 * t443 + t510;
t453 = -t215 * t443 + t343 + t488;
t400 = t290 * t321;
t381 = t275 * t400;
t354 = t202 * t318 + t381;
t449 = t320 * (t322 * t354 - t230) + t323 * (t319 * t354 + t231);
t235 = t322 * t241;
t360 = t247 - t381;
t409 = t241 * t319;
t448 = t320 * (t322 * t360 + t409) + t323 * (t319 * t360 - t235);
t292 = t294 ^ 2;
t293 = t296 ^ 2;
t444 = 0.2e1 * t277;
t440 = pkin(3) * t319;
t181 = t319 * t234 - t322 * t462;
t124 = -t382 * pkin(3) - t445 * pkin(9) + t296 * t262 + t181;
t436 = -pkin(3) * t124 + pkin(9) * t44;
t105 = -t181 * t322 + t182 * t319;
t432 = t105 * t320;
t429 = t169 * t318;
t427 = t169 * t321;
t408 = t246 * t319;
t407 = t246 * t322;
t259 = t265 + t382;
t405 = t259 * t319;
t404 = t259 * t322;
t402 = t277 * t229;
t399 = t315 * t319;
t398 = t315 * t322;
t120 = t318 * t124;
t306 = t323 * t396;
t303 = qJDD(2) + t306;
t397 = t320 * t303;
t121 = t321 * t124;
t394 = t323 * (qJDD(2) - t306);
t387 = qJD(3) + t315;
t332 = t275 * t385 + t346;
t380 = pkin(3) * t332 + t120 - t535;
t379 = -pkin(3) * t167 - t121 + t512;
t378 = -pkin(3) * t322 - pkin(2);
t14 = t318 * t40 + t321 * t41;
t334 = t202 * pkin(4) + t124 - t489;
t62 = (pkin(4) * t290 - 0.2e1 * qJD(5)) * t277 + t334;
t47 = qJ(6) * t447 - t456 + t62;
t17 = -qJ(5) * t47 - qJ(6) * t40;
t8 = -qJ(6) * t41 - t443 * t47;
t374 = -pkin(3) * t47 + pkin(9) * t14 + t318 * t17 + t321 * t8;
t26 = -qJ(6) * t168 + t207 * t443 - t343 + t465;
t335 = qJD(6) * t444 - t339;
t29 = -qJ(6) * t176 + t277 * t373 + t335 + t509;
t99 = t176 * t318 + t507;
t372 = pkin(9) * t99 + t321 * t26 + t318 * t29 + t514;
t58 = t283 - t355;
t49 = -pkin(4) * t207 + t58;
t60 = t348 + t402;
t51 = t60 - t509;
t371 = t318 * t51 + t321 * t49 + t495;
t370 = t44 + t495;
t106 = t181 * t319 + t322 * t182;
t279 = t323 * g(3) + t329;
t368 = t320 * t279 + t323 * t280;
t330 = qJD(5) * t444 - t334;
t54 = -pkin(4) * t257 + t330 + t489;
t39 = (-t215 - t447) * qJ(6) + t54 + t456;
t68 = -qJ(6) * t468 + t443 * t461;
t366 = t318 * t39 + t321 * t68 + t529;
t107 = -qJ(5) * t169 + qJ(6) * t469;
t55 = (-t169 - t257) * pkin(4) + t330;
t31 = t55 + (-t459 - t447) * qJ(6) + (-t169 - t202) * pkin(5) + t457;
t365 = t318 * t107 + t321 * t31 + t530;
t363 = -pkin(4) * t60 + qJ(5) * t58;
t362 = t277 * t400 + t318 * t338;
t361 = -t321 * t202 + t275 * t401;
t359 = -pkin(4) * t460 - t510;
t357 = t318 * t67 - t321 * t66;
t353 = pkin(4) * t422 + t318 * t54 + t529;
t352 = -qJ(5) * t429 + t321 * t55 + t530;
t351 = (-t275 * t318 - t277 * t321) * t290;
t302 = -0.2e1 * t376 + t383;
t344 = (-qJD(3) + t315) * t296 - t367;
t24 = t318 * t60 + t321 * t58;
t342 = pkin(9) * t24 + (-pkin(4) * t321 - qJ(5) * t318 - pkin(3)) * t62;
t340 = -pkin(4) * t215 - t355 + t488;
t328 = -t60 + t500;
t316 = t320 ^ 2;
t312 = t316 * t325;
t300 = t311 + 0.2e1 * t375;
t297 = t325 * pkin(7) + t347;
t282 = -t293 + t445;
t281 = t292 - t445;
t278 = -t293 - t445;
t264 = t293 - t292;
t258 = -t445 - t292;
t245 = -t292 - t293;
t223 = -t278 * t319 - t404;
t222 = t278 * t322 - t405;
t220 = t285 + t244;
t219 = -t294 * t387 + t333;
t216 = t296 * t387 + t367;
t211 = t258 * t322 - t483;
t210 = t258 * t319 + t477;
t193 = (-t275 * t321 + t277 * t318) * t290;
t171 = -t202 + t257;
t148 = t220 * t319 + t322 * t344;
t147 = -t220 * t322 + t319 * t344;
t100 = -t318 * t332 + t427;
t94 = t321 * t332 + t429;
t93 = -t176 * t321 + t508;
t87 = -t319 * t332 - t533;
t84 = t322 * t332 - t534;
t81 = t167 * t319 + t503;
t78 = -t167 * t322 + t504;
t76 = t121 - t536;
t73 = t322 * t99 - t506;
t70 = t319 * t99 + t505;
t69 = t120 - t511;
t59 = -pkin(3) * t452 - t359;
t57 = t67 - t537;
t56 = t66 - t513;
t45 = -pkin(3) * t93 - t454;
t37 = -t328 - t513;
t36 = t284 - t340 + t537;
t35 = -qJ(5) * t427 - t318 * t55 - t511;
t34 = -pkin(4) * t424 + t321 * t54 + t536;
t32 = -t124 * t322 + t319 * t44;
t27 = -t357 - t490;
t23 = t318 * t58 - t321 * t60;
t21 = -t453 + t465 + t537;
t20 = -t443 * t469 + t40 - t434 - t513;
t19 = -t318 * t68 + t321 * t39 + t536;
t18 = t107 * t321 - t31 * t318 - t511;
t15 = -t318 * t49 + t321 * t51 - t490;
t13 = t318 * t41 - t321 * t40;
t11 = t24 * t322 + t319 * t62;
t10 = t24 * t319 - t322 * t62;
t9 = -pkin(9) * t23 + (pkin(4) * t318 - qJ(5) * t321) * t62;
t6 = -pkin(3) * t23 - t363;
t5 = t14 * t322 + t319 * t47;
t4 = t14 * t319 - t322 * t47;
t3 = -pkin(9) * t93 - t26 * t318 + t29 * t321;
t2 = -pkin(3) * t13 - t455;
t1 = -pkin(9) * t13 + t17 * t321 - t318 * t8;
t7 = [0, 0, 0, 0, 0, qJDD(1), t364, t349, 0, 0, (t301 + t375) * t320, t300 * t323 + t302 * t320, t397 + t323 * (-t312 + t324), t302 * t323, t320 * (t313 - t324) + t394, 0, t323 * t297 + pkin(1) * t302 + pkin(7) * (t323 * t463 - t397), -t320 * t297 - pkin(1) * t300 + pkin(7) * (-t394 - t320 * (-t312 - t324)), pkin(1) * (t312 + t313) + (t316 + t317) * t433 + t368, pkin(1) * t297 + pkin(7) * t368, t320 * (t244 * t322 - t296 * t399) + t323 * (t244 * t319 + t296 * t398), t320 * (-t216 * t322 - t221 * t319) + t323 * (-t216 * t319 + t221 * t322), t320 * (-t282 * t319 + t477) + t323 * (t282 * t322 + t483), t320 * (-t243 * t319 + t294 * t398) + t323 * (t243 * t322 + t294 * t399), t320 * (t281 * t322 - t405) + t323 * (t281 * t319 + t404), (t320 * (-t294 * t322 + t296 * t319) + t323 * (-t294 * t319 - t296 * t322)) * t315, t320 * (-pkin(8) * t210 - t408) + t323 * (-pkin(2) * t216 + pkin(8) * t211 + t407) - pkin(1) * t216 + pkin(7) * (-t210 * t320 + t211 * t323), t320 * (-pkin(8) * t222 - t407) + t323 * (-pkin(2) * t219 + pkin(8) * t223 - t408) - pkin(1) * t219 + pkin(7) * (-t222 * t320 + t223 * t323), t320 * (-pkin(8) * t147 - t105) + t323 * (-pkin(2) * t245 + pkin(8) * t148 + t106) - pkin(1) * t245 + pkin(7) * (-t147 * t320 + t148 * t323), -pkin(8) * t432 + t323 * (pkin(2) * t246 + pkin(8) * t106) + pkin(1) * t246 + pkin(7) * (t106 * t323 - t432), t450, -t542, t517, t449, -t555, t448, t320 * (-pkin(8) * t78 - t319 * t56 + t322 * t69) + t323 * (pkin(8) * t81 + t319 * t69 + t322 * t56 - t515) - t516 + pkin(7) * (-t320 * t78 + t323 * t81), t320 * (-pkin(8) * t84 - t319 * t57 + t322 * t76) + t323 * (pkin(8) * t87 + t319 * t76 + t322 * t57 - t538) - t539 + pkin(7) * (-t320 * t84 + t323 * t87), t320 * (t27 * t322 - t523) + t323 * (t319 * t27 + t522) + t518 + (t320 * t440 + t323 * t378 - pkin(1)) * t452, (t320 * (-pkin(9) * t322 + t440) + t323 * (-pkin(9) * t319 + t378) - pkin(1)) * t357 + (pkin(7) + pkin(8)) * (-t32 * t320 + t323 * (t124 * t319 + t322 * t44)), t450, t517, t542, t448, t555, t449, t320 * (-t319 * t37 + t322 * t35 - t546) + t323 * (t319 * t35 + t322 * t37 + t543) + t540, t320 * (t15 * t322 - t319 * t59 - t523) + t323 * (-pkin(2) * t452 + t15 * t319 + t322 * t59 + t522) - pkin(1) * t452 + t518, t320 * (-t319 * t36 + t322 * t34 - t547) + t323 * (t319 * t34 + t322 * t36 + t552) + t551, t320 * (-pkin(8) * t10 - t319 * t6 + t322 * t9) + t323 * (-pkin(2) * t23 + pkin(8) * t11 + t319 * t9 + t322 * t6) - pkin(1) * t23 + pkin(7) * (-t10 * t320 + t11 * t323), t450, t320 * (t100 * t322 - t410) + t323 * (t100 * t319 + t228), t320 * (t176 * t319 + t544) + t323 * (-t176 * t322 + t545), t449, t320 * (t171 * t319 - t520) + t323 * (-t171 * t322 - t521), t320 * (t193 * t322 + t409) + t323 * (t193 * t319 - t235), t320 * (t18 * t322 - t20 * t319 - t546) + t323 * (t18 * t319 + t20 * t322 + t543) + t540, t320 * (t19 * t322 - t21 * t319 - t547) + t323 * (t19 * t319 + t21 * t322 + t552) + t551, t320 * (-pkin(8) * t70 + t3 * t322 - t319 * t45) + t323 * (-pkin(2) * t93 + pkin(8) * t73 + t3 * t319 + t322 * t45) - pkin(1) * t93 + pkin(7) * (-t320 * t70 + t323 * t73), t320 * (-pkin(8) * t4 + t1 * t322 - t2 * t319) + t323 * (-pkin(2) * t13 + pkin(8) * t5 + t1 * t319 + t2 * t322) - pkin(1) * t13 + pkin(7) * (-t320 * t4 + t323 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306, t312 - t313, t311, t306, t383, qJDD(2), -t279, -t280, 0, 0, t265, t264, t220, -t265, t344, t382, pkin(2) * t210 - t181, -t395 - t319 * (pkin(8) * t375 - t279 - t438) + (-t303 * t319 + t222) * pkin(2), pkin(2) * t147, pkin(2) * t105, t362, t95, -t137, t361, t496, t351, pkin(2) * t78 + t379, pkin(2) * t84 + t380, t370 + t524, pkin(2) * t32 + t436, t362, -t137, -t95, t351, -t496, t361, t352 + t549, t371 + t524, t353 + t550, pkin(2) * t10 + t342, t362, t94, t137, t361, t496, t351, t365 + t549, t366 + t550, pkin(2) * t70 + t372, pkin(2) * t4 + t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, t264, t220, -t265, t344, t382, -t181, -t182, 0, 0, t362, t95, -t137, t361, t496, t351, t379, t380, t370, t436, t362, -t137, -t95, t351, -t496, t361, t352, t371, t353, t342, t362, t94, t137, t361, t496, t351, t365, t366, t372, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t464, t460, -t237, -t168, t241, -t66, -t67, 0, 0, t237, t460, -t464, t241, t168, -t237, t328, t359, t283 + t340, t363, t237, -t464, t176, -t237, t171, t241, -t402 + (t469 - t237) * pkin(5) + t335 + t500, t453 + t466, t454, t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t469, t460, t215, t60, 0, 0, 0, 0, 0, 0, -t469, t215, t176, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t169, t461, t207, -t47;];
tauJ_reg  = t7;
