% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR5_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRPR5_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR5_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:16:32
% EndTime: 2019-03-09 22:16:45
% DurationCPUTime: 8.31s
% Computational Cost: add. (7897->569), mult. (18780->725), div. (0->0), fcn. (13510->8), ass. (0->256)
t639 = sin(qJ(2));
t638 = sin(qJ(3));
t642 = cos(qJ(2));
t749 = t638 * t642;
t777 = cos(qJ(3));
t602 = t639 * t777 + t749;
t636 = sin(qJ(6));
t637 = sin(qJ(4));
t640 = cos(qJ(6));
t641 = cos(qJ(4));
t786 = -t636 * t641 + t637 * t640;
t525 = t786 * t602;
t731 = qJD(4) * t637;
t706 = qJD(1) * t777;
t733 = qJD(1) * t639;
t583 = t638 * t733 - t642 * t706;
t755 = t583 * t637;
t807 = t731 + t755;
t721 = qJD(2) + qJD(3);
t547 = t721 * t602;
t806 = t547 * qJD(1);
t585 = -qJD(1) * t749 - t639 * t706;
t695 = t641 * t721;
t552 = -t585 * t637 - t695;
t662 = t641 * t585 - t637 * t721;
t497 = t552 * t636 - t640 * t662;
t677 = -t640 * t552 - t636 * t662;
t805 = MDP(29) * t497 * t677 + (t497 ^ 2 - t677 ^ 2) * MDP(30) - t806 * MDP(33);
t580 = qJD(4) + t583;
t723 = qJD(6) - t580;
t804 = t497 * t723;
t727 = qJD(6) * t640;
t728 = qJD(6) * t636;
t730 = qJD(4) * t641;
t743 = t786 * t583 - t636 * t730 - t637 * t727 + t640 * t731 + t641 * t728;
t599 = t636 * t637 + t640 * t641;
t802 = qJD(6) - qJD(4);
t803 = (t583 - t802) * t599;
t779 = -pkin(8) - pkin(7);
t613 = t779 * t639;
t604 = qJD(1) * t613;
t615 = t779 * t642;
t606 = qJD(1) * t615;
t710 = t777 * t606;
t540 = t604 * t638 - t710;
t732 = qJD(3) * t638;
t691 = pkin(2) * t732 - t540;
t586 = t638 * t606;
t771 = qJD(2) * pkin(2);
t590 = t604 + t771;
t537 = t777 * t590 + t586;
t519 = -pkin(3) * t721 - t537;
t657 = -qJ(5) * t662 - t519;
t780 = pkin(4) + pkin(5);
t448 = -t552 * t780 + t657;
t670 = -t638 * t639 + t642 * t777;
t658 = t670 * qJD(3);
t546 = qJD(2) * t670 + t658;
t648 = t546 * qJD(1);
t489 = -qJD(4) * t695 - t585 * t731 - t641 * t648;
t473 = t806 * pkin(3) + (-pkin(9) * t658 + (t639 * pkin(2) - pkin(9) * t670) * qJD(2)) * qJD(1);
t713 = qJD(2) * t779;
t692 = qJD(1) * t713;
t591 = t639 * t692;
t592 = t642 * t692;
t705 = qJD(3) * t777;
t481 = t590 * t705 + t591 * t777 + t638 * t592 + t606 * t732;
t627 = -pkin(2) * t642 - pkin(1);
t611 = t627 * qJD(1);
t515 = pkin(3) * t583 + pkin(9) * t585 + t611;
t538 = t638 * t590 - t710;
t520 = pkin(9) * t721 + t538;
t693 = -t641 * t473 + t637 * t481 + t515 * t731 + t520 * t730;
t411 = pkin(10) * t489 - t780 * t806 + t693;
t527 = t806 * qJ(5);
t569 = t580 * qJD(5);
t664 = -t637 * t473 - t641 * t481 - t515 * t730 + t520 * t731;
t418 = t527 + t569 - t664;
t490 = -qJD(4) * t662 + t637 * t648;
t413 = pkin(10) * t490 + t418;
t702 = -t640 * t411 + t636 * t413;
t800 = t448 * t497 + t702;
t722 = qJD(1) * qJD(2);
t798 = -0.2e1 * t722;
t761 = t806 * t641;
t797 = pkin(9) * (t580 * t731 - t761);
t796 = MDP(5) * (t639 ^ 2 - t642 ^ 2);
t795 = t723 * t677;
t776 = pkin(4) * t806;
t425 = t693 - t776;
t794 = t418 * t641 + t425 * t637;
t578 = t585 * qJ(5);
t533 = -pkin(3) * t585 + pkin(9) * t583;
t518 = pkin(2) * t733 + t533;
t541 = t604 * t777 + t586;
t740 = t637 * t518 + t641 * t541;
t461 = -t578 + t740;
t625 = pkin(2) * t638 + pkin(9);
t694 = pkin(2) * t705;
t656 = -t625 * t731 + t641 * t694;
t793 = -t461 + t656;
t754 = t583 * t641;
t736 = -pkin(4) * t755 + qJ(5) * t754;
t792 = t736 - t691;
t579 = pkin(4) * t731 - qJ(5) * t730 - t637 * qJD(5);
t791 = -pkin(5) * t807 - t579;
t790 = t807 * pkin(10);
t631 = t637 * qJ(5);
t789 = t641 * pkin(4) + t631;
t534 = t637 * t541;
t684 = t637 * t694;
t788 = -t684 + t534;
t787 = t777 * t613 + t638 * t615;
t468 = t641 * t515 - t637 * t520;
t724 = qJD(5) - t468;
t725 = pkin(10) * t662 + t724;
t436 = -t580 * t780 + t725;
t715 = t636 * t411 + t640 * t413 + t436 * t727;
t784 = -t448 * t677 + t715;
t557 = t638 * t613 - t615 * t777;
t605 = t639 * t713;
t607 = t642 * t713;
t500 = t557 * qJD(3) + t638 * t605 - t777 * t607;
t782 = t662 ^ 2;
t781 = t580 ^ 2;
t778 = pkin(9) - pkin(10);
t775 = pkin(4) * t585;
t774 = pkin(10) * t583;
t773 = -pkin(10) + t625;
t772 = pkin(2) * qJD(3);
t770 = qJ(5) * t552;
t769 = qJ(5) * t641;
t469 = t637 * t515 + t641 * t520;
t450 = pkin(10) * t552 + t469;
t571 = t580 * qJ(5);
t444 = t450 + t571;
t768 = t444 * t636;
t463 = t552 * pkin(4) - t657;
t767 = t463 * t662;
t766 = t489 * t637;
t765 = t490 * t641;
t764 = t806 * t670;
t763 = t806 * t625;
t762 = t806 * t637;
t760 = t552 * t580;
t759 = t552 * t637;
t758 = t662 * t552;
t757 = t662 * t580;
t756 = t662 * t641;
t753 = t602 * t637;
t752 = t602 * t641;
t644 = qJD(2) ^ 2;
t748 = t639 * t644;
t747 = t642 * t644;
t645 = qJD(1) ^ 2;
t746 = t642 * t645;
t480 = t538 + t736;
t745 = t480 - t579;
t744 = -t579 + t792;
t741 = t637 * t533 + t641 * t537;
t536 = -pkin(3) * t670 - pkin(9) * t602 + t627;
t739 = t637 * t536 + t641 * t557;
t738 = t791 + t792;
t737 = t480 + t791;
t729 = qJD(5) * t641;
t719 = pkin(3) + t789;
t717 = t639 * t771;
t716 = t780 * t585;
t614 = t778 * t641;
t714 = -t640 * t489 + t636 * t490 + t552 * t727;
t464 = -t578 + t741;
t474 = -qJ(5) * t670 + t739;
t712 = t637 * t777;
t711 = t641 * t777;
t708 = t602 * t731;
t707 = t602 * t730;
t598 = t773 * t641;
t704 = t639 * t722;
t703 = pkin(1) * t798;
t701 = -t489 * t636 - t640 * t490;
t529 = t637 * t537;
t700 = t533 * t641 - t529;
t549 = t637 * t557;
t699 = t536 * t641 - t549;
t697 = t723 ^ 2;
t696 = t580 * t641;
t482 = t590 * t732 + t638 * t591 - t777 * t592 - t606 * t705;
t626 = -pkin(2) * t777 - pkin(3);
t690 = -t469 * t585 + t482 * t637 + t519 * t730;
t689 = (-t518 + t774) * t641 + t716 + t788 + t802 * t598;
t688 = t529 + (-t533 + t774) * t641 + t716 + t802 * t614;
t597 = t773 * t637;
t687 = qJD(6) * t597 + t790 + t793;
t612 = t778 * t637;
t686 = -pkin(9) * t731 + qJD(6) * t612 - t464 + t790;
t685 = pkin(4) * t637 - t769;
t683 = qJ(5) * t640 - t636 * t780;
t682 = -qJ(5) * t636 - t640 * t780;
t422 = t436 * t636 + t444 * t640;
t455 = t549 + (-pkin(10) * t602 - t536) * t641 + t780 * t670;
t460 = pkin(10) * t753 + t474;
t681 = t455 * t640 - t460 * t636;
t680 = t455 * t636 + t460 * t640;
t457 = -pkin(4) * t580 + t724;
t458 = t571 + t469;
t679 = t457 * t641 - t458 * t637;
t678 = t519 * t583 - t763;
t488 = pkin(3) * t547 - pkin(9) * t546 + t717;
t499 = qJD(3) * t787 + t777 * t605 + t638 * t607;
t675 = t488 * t641 - t637 * t499 - t536 * t731 - t557 * t730;
t674 = -t637 * t780 + t769;
t594 = t626 - t789;
t654 = -qJ(5) * t489 - qJD(5) * t662 - t482;
t427 = pkin(4) * t490 - t654;
t673 = -t427 * t637 + t458 * t585 - t463 * t754;
t672 = -t427 * t641 - t457 * t585 + t463 * t731;
t671 = t468 * t585 - t482 * t641 + t519 * t731;
t668 = t546 * t637 + t707;
t667 = -t546 * t641 + t708;
t666 = t469 * t580 - t693;
t665 = t611 * t585 - t482;
t526 = t599 * t602;
t663 = t637 * t488 + t641 * t499 + t536 * t730 - t557 * t731;
t432 = t662 * t728 + t714;
t419 = -t490 * t780 + t654;
t421 = t436 * t640 - t768;
t661 = t419 * t599 - t421 * t585 - t448 * t743;
t660 = t419 * t786 + t422 * t585 + t448 * t803;
t659 = (-t580 * t730 - t762) * pkin(9);
t426 = t547 * qJ(5) - qJD(5) * t670 + t663;
t655 = t468 * t580 + t664;
t433 = qJD(6) * t497 + t701;
t653 = t794 - t807 * t458 + (t730 + t754) * t457;
t652 = qJD(4) * t679 + t794;
t651 = -t766 - t765 + (-t756 + t759) * qJD(4);
t650 = t611 * t583 - t481;
t646 = (-t432 * t599 - t433 * t786 + t497 * t743 - t677 * t803) * MDP(30) + (t432 * t786 + t497 * t803) * MDP(29) + ((-t489 - t760) * t641 + (-t490 + t757) * t637) * MDP(19) + (-t497 * t585 + t723 * t803 - t786 * t806) * MDP(31) + (t585 * t677 + t599 * t806 + t723 * t743) * MDP(32) + (-t662 * t696 - t766) * MDP(18) + (-t552 * t585 - t637 * t781 + t761) * MDP(21) + (t580 * t696 - t585 * t662 + t762) * MDP(20) + (t583 * t721 + t648) * MDP(13) + (-t585 * t721 - t806) * MDP(14) + (-t583 ^ 2 + t585 ^ 2) * MDP(12) + (-MDP(11) * t583 + MDP(22) * t580 - MDP(33) * t723) * t585;
t632 = t641 * pkin(5);
t595 = t632 + t719;
t570 = t632 - t594;
t503 = -pkin(4) * t662 + t770;
t498 = t602 * t685 - t787;
t476 = t602 * t674 + t787;
t475 = pkin(4) * t670 - t699;
t472 = t662 * t780 - t770;
t466 = -t700 + t775;
t462 = -t518 * t641 + t534 + t775;
t456 = -t489 + t760;
t440 = qJD(6) * t526 - t546 * t786 - t636 * t708 - t640 * t707;
t439 = t525 * t802 + t599 * t546;
t434 = t685 * t546 + (qJD(4) * t789 - t729) * t602 + t500;
t431 = t674 * t546 + (t729 + (-t641 * t780 - t631) * qJD(4)) * t602 - t500;
t430 = -pkin(4) * t547 - t675;
t420 = pkin(10) * t668 + t426;
t416 = pkin(10) * t667 - t547 * t780 - t675;
t1 = [(t468 * t547 + t482 * t753 - t490 * t787 + t500 * t552 + t519 * t668 + t580 * t675 + t670 * t693 + t699 * t806) * MDP(23) + (-t469 * t547 + t482 * t752 + t489 * t787 - t500 * t662 - t519 * t667 - t580 * t663 - t664 * t670 - t739 * t806) * MDP(24) + (t627 * t806 + t611 * t547 + (-qJD(1) * t670 + t583) * t717) * MDP(16) + (t490 * t670 - t547 * t552 - t580 * t668 - t753 * t806) * MDP(21) + (t425 * t670 + t427 * t753 - t430 * t580 + t434 * t552 - t457 * t547 + t463 * t668 - t475 * t806 + t490 * t498) * MDP(25) + (-t546 * t583 + t585 * t547 - t602 * t806 + t648 * t670) * MDP(12) + (-(qJD(6) * t681 + t416 * t636 + t420 * t640) * t723 + t680 * t806 - (-t444 * t728 + t715) * t670 + t422 * t547 + t431 * t497 + t476 * t432 + t419 * t526 + t448 * t439) * MDP(35) + (t432 * t670 + t439 * t723 - t497 * t547 - t526 * t806) * MDP(31) + (-t418 * t670 + t426 * t580 - t427 * t752 + t434 * t662 + t458 * t547 + t463 * t667 + t474 * t806 + t489 * t498) * MDP(27) + (t489 * t670 - t547 * t662 - t580 * t667 + t752 * t806) * MDP(20) + ((t416 * t640 - t420 * t636) * t723 - t681 * t806 - t702 * t670 - t421 * t547 + t431 * t677 + t476 * t433 - t419 * t525 + t448 * t440 + (-t422 * t670 - t680 * t723) * qJD(6)) * MDP(34) + (-t433 * t670 - t440 * t723 - t525 * t806 + t547 * t677) * MDP(32) + (t547 * t580 - t764) * MDP(22) + (pkin(2) * t602 * t704 + t611 * t546 - t585 * t717 + t627 * t648) * MDP(17) + (t546 * MDP(13) - t547 * MDP(14) - MDP(16) * t500 - MDP(17) * t499) * t721 + (-t547 * t723 - t764) * MDP(33) + (t432 * t525 - t433 * t526 - t439 * t677 - t440 * t497) * MDP(30) + ((-t552 * t641 + t637 * t662) * t546 + (t766 - t765 + (t756 + t759) * qJD(4)) * t602) * MDP(19) + (-t489 * t752 + t662 * t667) * MDP(18) + (-t426 * t552 - t430 * t662 - t474 * t490 - t475 * t489 + t679 * t546 + (-t418 * t637 + t425 * t641 + (-t457 * t637 - t458 * t641) * qJD(4)) * t602) * MDP(26) + t796 * t798 + (-pkin(7) * t747 + t639 * t703) * MDP(9) - MDP(7) * t748 + (pkin(7) * t748 + t642 * t703) * MDP(10) + 0.2e1 * t642 * MDP(4) * t704 + (t418 * t474 + t425 * t475 + t426 * t458 + t427 * t498 + t430 * t457 + t434 * t463) * MDP(28) + (-t585 * t546 + t602 * t648) * MDP(11) + (t432 * t526 + t439 * t497) * MDP(29) + MDP(6) * t747; t646 + (t461 * t552 + t462 * t662 + (-t552 * t711 - t662 * t712) * t772 + t651 * t625 + t653) * MDP(26) + (t594 * t489 + (-qJD(4) * t463 + t763) * t641 - t744 * t662 + t793 * t580 + t673) * MDP(27) + (t626 * t490 + t678 * t637 + t691 * t552 + ((-qJD(4) * t625 - t518) * t641 + t788) * t580 + t671) * MDP(23) + (-t626 * t489 + t678 * t641 - t691 * t662 + (-t656 + t740) * t580 + t690) * MDP(24) + (t541 * t721 + (t585 * t733 - t705 * t721) * pkin(2) + t650) * MDP(17) + (t540 * t721 + (-t583 * t733 - t721 * t732) * pkin(2) + t665) * MDP(16) + ((t597 * t636 + t598 * t640) * t806 + t570 * t432 - (-t636 * t689 + t640 * t687) * t723 + t738 * t497 + t660) * MDP(35) + t645 * t796 + (t427 * t594 - t457 * t462 - t458 * t461 - t744 * t463 + (t457 * t712 + t458 * t711) * t772 + t652 * t625) * MDP(28) + (t594 * t490 + (t463 * t583 - t763) * t637 - t744 * t552 + (-t625 * t730 + t462 - t684) * t580 + t672) * MDP(25) + (-(t597 * t640 - t598 * t636) * t806 + t570 * t433 - (t636 * t687 + t640 * t689) * t723 + t738 * t677 + t661) * MDP(34) - t639 * MDP(4) * t746 + (MDP(9) * t639 * t645 + MDP(10) * t746) * pkin(1); t646 + (pkin(9) * t651 + t464 * t552 + t466 * t662 + t653) * MDP(26) + (-t463 * t730 - t464 * t580 - t489 * t719 - t662 * t745 + t673 - t797) * MDP(27) + (t463 * t755 + t466 * t580 - t490 * t719 - t552 * t745 + t659 + t672) * MDP(25) + (pkin(9) * t652 - t427 * t719 - t457 * t466 - t458 * t464 - t463 * t745) * MDP(28) + (-pkin(3) * t490 + t519 * t755 - t538 * t552 - t580 * t700 + t659 + t671) * MDP(23) + (pkin(3) * t489 + t519 * t754 + t538 * t662 + t580 * t741 + t690 + t797) * MDP(24) + (t537 * t721 + t650) * MDP(17) + (t538 * t721 + t665) * MDP(16) + (-(t612 * t640 - t614 * t636) * t806 + t595 * t433 - (t636 * t686 + t640 * t688) * t723 + t737 * t677 + t661) * MDP(34) + ((t612 * t636 + t614 * t640) * t806 + t595 * t432 - (-t636 * t688 + t640 * t686) * t723 + t737 * t497 + t660) * MDP(35); -MDP(18) * t758 + (-t552 ^ 2 + t782) * MDP(19) + t456 * MDP(20) + (-t490 - t757) * MDP(21) + t806 * MDP(22) + (t519 * t662 + t666) * MDP(23) + (t519 * t552 + t655) * MDP(24) + (-t503 * t552 + t666 + t767 + 0.2e1 * t776) * MDP(25) + (pkin(4) * t489 - qJ(5) * t490 - (t458 - t469) * t662 + (t457 - t724) * t552) * MDP(26) + (-t463 * t552 - t503 * t662 + 0.2e1 * t527 + 0.2e1 * t569 - t655) * MDP(27) + (-pkin(4) * t425 + qJ(5) * t418 - t457 * t469 + t458 * t724 - t463 * t503) * MDP(28) + (-t432 - t795) * MDP(31) + (t433 - t804) * MDP(32) + (-t682 * t806 - t472 * t677 - (t450 * t640 + t636 * t725) * t723 + (-t683 * t723 + t422) * qJD(6) + t800) * MDP(34) + (t683 * t806 - t472 * t497 - (-t450 * t636 + t640 * t725) * t723 + (-t682 * t723 - t768) * qJD(6) + t784) * MDP(35) - t805; (-t806 - t758) * MDP(25) + t456 * MDP(26) + (-t781 - t782) * MDP(27) + (-t458 * t580 + t425 - t767) * MDP(28) + (-t636 * t697 - t640 * t806 + t662 * t677) * MDP(34) + (t497 * t662 + t636 * t806 - t640 * t697) * MDP(35); (t714 + t795) * MDP(31) + (-t701 + t804) * MDP(32) + (t422 * t723 - t800) * MDP(34) + (t421 * t723 - t784) * MDP(35) + ((MDP(32) * t662 - MDP(34) * t444) * t640 + (MDP(31) * t662 - MDP(32) * t552 - MDP(34) * t436 + MDP(35) * t444) * t636) * qJD(6) + t805;];
tauc  = t1;
