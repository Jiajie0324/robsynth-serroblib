% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 20:33
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:33:35
% EndTime: 2019-05-07 20:33:44
% DurationCPUTime: 9.60s
% Computational Cost: add. (40082->324), mult. (80678->399), div. (0->0), fcn. (58938->10), ass. (0->231)
t2414 = sin(qJ(3));
t2415 = sin(qJ(2));
t2419 = cos(qJ(3));
t2420 = cos(qJ(2));
t2383 = (t2414 * t2420 + t2415 * t2419) * qJD(1);
t2466 = qJD(1) * t2420;
t2447 = qJD(2) * t2466;
t2451 = t2415 * qJDD(1);
t2388 = t2447 + t2451;
t2407 = t2420 * qJDD(1);
t2467 = qJD(1) * t2415;
t2448 = qJD(2) * t2467;
t2389 = t2407 - t2448;
t2442 = t2414 * t2388 - t2419 * t2389;
t2344 = qJD(3) * t2383 + qJDD(4) + t2442;
t2409 = qJD(2) + qJD(3);
t2413 = sin(qJ(4));
t2418 = cos(qJ(4));
t2362 = t2413 * t2383 - t2409 * t2418;
t2364 = t2383 * t2418 + t2409 * t2413;
t2460 = t2362 * t2364;
t2307 = t2344 + t2460;
t2361 = t2364 ^ 2;
t2381 = t2414 * t2467 - t2419 * t2466;
t2380 = qJD(4) + t2381;
t2471 = t2380 ^ 2;
t2479 = -t2361 - t2471;
t2279 = t2307 * t2418 + t2413 * t2479;
t2440 = -t2388 * t2419 - t2389 * t2414;
t2345 = -qJD(3) * t2381 - t2440;
t2450 = qJDD(2) + qJDD(3);
t2436 = -t2418 * t2345 - t2413 * t2450;
t2431 = -t2362 * qJD(4) - t2436;
t2459 = t2362 * t2380;
t2428 = t2431 - t2459;
t2255 = t2279 * t2414 + t2419 * t2428;
t2257 = t2279 * t2419 - t2414 * t2428;
t2236 = t2255 * t2415 - t2257 * t2420;
t2277 = t2307 * t2413 - t2418 * t2479;
t2416 = sin(qJ(1));
t2421 = cos(qJ(1));
t2502 = t2236 * t2416 + t2277 * t2421;
t2501 = t2236 * t2421 - t2277 * t2416;
t2228 = t2255 * t2420 + t2257 * t2415;
t2302 = t2431 + t2459;
t2443 = t2345 * t2413 - t2418 * t2450;
t2454 = qJD(4) - t2380;
t2435 = -t2364 * t2454 - t2443;
t2477 = -t2302 * t2418 + t2413 * t2435;
t2473 = t2362 ^ 2;
t2316 = t2361 + t2473;
t2476 = t2302 * t2413 + t2418 * t2435;
t2489 = t2316 * t2419 + t2414 * t2476;
t2490 = -t2316 * t2414 + t2419 * t2476;
t2495 = -t2415 * t2489 + t2420 * t2490;
t2500 = t2416 * t2495 - t2421 * t2477;
t2499 = t2416 * t2477 + t2421 * t2495;
t2496 = t2415 * t2490 + t2420 * t2489;
t2445 = -t2344 + t2460;
t2478 = -t2471 - t2473;
t2483 = t2445 * t2413 + t2418 * t2478;
t2494 = t2414 * t2483;
t2484 = t2413 * t2478 - t2445 * t2418;
t2493 = t2416 * t2484;
t2492 = t2419 * t2483;
t2491 = t2421 * t2484;
t2377 = -qJD(6) + t2380;
t2480 = qJD(6) - t2377;
t2411 = t2420 ^ 2;
t2423 = qJD(1) ^ 2;
t2397 = t2416 * g(1) - t2421 * g(2);
t2438 = qJDD(1) * pkin(1) + t2397;
t2439 = qJD(2) * pkin(2) - pkin(8) * t2467;
t2347 = t2389 * pkin(2) + (pkin(8) * t2411 + pkin(7)) * t2423 - t2439 * t2467 + t2438;
t2412 = sin(qJ(6));
t2417 = cos(qJ(6));
t2331 = -t2417 * t2362 + t2364 * t2412;
t2475 = t2331 ^ 2;
t2333 = t2362 * t2412 + t2364 * t2417;
t2474 = t2333 ^ 2;
t2472 = t2377 ^ 2;
t2470 = t2381 ^ 2;
t2469 = t2383 ^ 2;
t2468 = t2409 ^ 2;
t2461 = t2331 * t2333;
t2458 = t2381 * t2383;
t2457 = t2411 * t2423;
t2456 = t2415 * t2423;
t2455 = qJD(3) - t2409;
t2453 = qJD(6) + t2377;
t2398 = -g(1) * t2421 - g(2) * t2416;
t2432 = -pkin(1) * t2423 + qJDD(1) * pkin(7) + t2398;
t2371 = -t2415 * g(3) + t2420 * t2432;
t2340 = -pkin(2) * t2457 + t2389 * pkin(8) - qJD(2) * t2439 + t2371;
t2430 = t2415 * t2432;
t2425 = -t2430 - t2388 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2456 - g(3)) * t2420;
t2306 = t2419 * t2340 + t2414 * t2425;
t2356 = pkin(3) * t2381 - pkin(9) * t2383;
t2284 = -pkin(3) * t2468 + pkin(9) * t2450 - t2381 * t2356 + t2306;
t2323 = (qJD(3) + t2409) * t2383 + t2442;
t2444 = t2409 * t2381 - t2345;
t2424 = pkin(3) * t2323 + pkin(9) * t2444 - t2347;
t2246 = t2418 * t2284 + t2413 * t2424;
t2410 = t2415 ^ 2;
t2452 = t2410 + t2411;
t2446 = pkin(4) * t2380 - (2 * qJD(5));
t2245 = -t2413 * t2284 + t2418 * t2424;
t2305 = -t2414 * t2340 + t2419 * t2425;
t2441 = -pkin(5) * t2380 - pkin(10) * t2364;
t2437 = qJD(4) * t2364 + t2443;
t2337 = pkin(4) * t2362 - qJ(5) * t2364;
t2240 = -pkin(4) * t2471 + t2344 * qJ(5) + 0.2e1 * qJD(5) * t2380 - t2362 * t2337 + t2246;
t2283 = -t2450 * pkin(3) - t2468 * pkin(9) + t2383 * t2356 - t2305;
t2434 = qJDD(6) - t2344;
t2241 = -t2344 * pkin(4) - qJ(5) * t2471 + t2364 * t2337 + qJDD(5) - t2245;
t2429 = t2437 * pkin(4) - qJ(5) * t2428 + t2283;
t2427 = -t2412 * t2431 + t2417 * t2437;
t2426 = -t2412 * t2437 - t2417 * t2431;
t2422 = qJD(2) ^ 2;
t2402 = t2420 * t2456;
t2400 = -t2422 - t2457;
t2399 = -t2410 * t2423 - t2422;
t2396 = -qJDD(2) + t2402;
t2395 = qJDD(2) + t2402;
t2394 = t2452 * t2423;
t2393 = -qJDD(1) * t2416 - t2421 * t2423;
t2392 = qJDD(1) * t2421 - t2416 * t2423;
t2391 = t2452 * qJDD(1);
t2390 = t2407 - 0.2e1 * t2448;
t2387 = 0.2e1 * t2447 + t2451;
t2384 = t2423 * pkin(7) + t2438;
t2370 = -t2420 * g(3) - t2430;
t2369 = -t2468 - t2469;
t2368 = t2396 * t2420 - t2399 * t2415;
t2367 = -t2395 * t2415 + t2400 * t2420;
t2366 = t2396 * t2415 + t2399 * t2420;
t2365 = t2395 * t2420 + t2400 * t2415;
t2355 = -t2450 - t2458;
t2354 = t2450 - t2458;
t2353 = -t2468 - t2470;
t2346 = -t2469 - t2470;
t2339 = -t2370 * t2415 + t2371 * t2420;
t2338 = t2370 * t2420 + t2371 * t2415;
t2328 = t2355 * t2419 - t2369 * t2414;
t2327 = t2355 * t2414 + t2369 * t2419;
t2326 = t2381 * t2455 + t2440;
t2324 = -t2383 * t2455 - t2442;
t2318 = t2353 * t2419 - t2354 * t2414;
t2317 = t2353 * t2414 + t2354 * t2419;
t2310 = -t2472 - t2474;
t2299 = t2380 * t2364 + t2437;
t2298 = (qJD(4) + t2380) * t2364 + t2443;
t2297 = -t2472 - t2475;
t2296 = -t2327 * t2415 + t2328 * t2420;
t2295 = t2327 * t2420 + t2328 * t2415;
t2294 = t2324 * t2419 - t2326 * t2414;
t2293 = t2324 * t2414 + t2326 * t2419;
t2292 = -t2317 * t2415 + t2318 * t2420;
t2291 = t2317 * t2420 + t2318 * t2415;
t2290 = t2434 - t2461;
t2289 = -t2434 - t2461;
t2281 = -t2474 - t2475;
t2274 = -t2305 * t2414 + t2306 * t2419;
t2273 = t2305 * t2419 + t2306 * t2414;
t2268 = t2289 * t2417 - t2310 * t2412;
t2267 = t2289 * t2412 + t2310 * t2417;
t2266 = -t2293 * t2415 + t2294 * t2420;
t2265 = t2293 * t2420 + t2294 * t2415;
t2264 = t2299 * t2414 + t2492;
t2262 = -t2299 * t2419 + t2494;
t2260 = -t2290 * t2412 + t2297 * t2417;
t2259 = t2290 * t2417 + t2297 * t2412;
t2258 = t2298 * t2414 + t2492;
t2256 = -t2298 * t2419 + t2494;
t2254 = t2331 * t2453 + t2426;
t2253 = -t2331 * t2480 - t2426;
t2252 = -t2333 * t2453 + t2427;
t2251 = t2333 * t2480 - t2427;
t2244 = t2446 * t2364 + t2429;
t2243 = -t2273 * t2415 + t2274 * t2420;
t2242 = t2273 * t2420 + t2274 * t2415;
t2239 = t2267 * t2413 + t2268 * t2418;
t2238 = -t2267 * t2418 + t2268 * t2413;
t2237 = -t2262 * t2415 + t2264 * t2420;
t2235 = t2262 * t2420 + t2264 * t2415;
t2233 = t2259 * t2413 + t2260 * t2418;
t2232 = -t2259 * t2418 + t2260 * t2413;
t2231 = -t2256 * t2415 + t2258 * t2420;
t2229 = t2256 * t2420 + t2258 * t2415;
t2227 = t2252 * t2417 - t2254 * t2412;
t2226 = t2252 * t2412 + t2254 * t2417;
t2225 = t2443 * pkin(5) + t2473 * pkin(10) + t2429 + (pkin(5) * qJD(4) - t2441 + t2446) * t2364;
t2220 = -pkin(5) * t2473 + pkin(10) * t2437 + t2380 * t2441 + t2240;
t2219 = -t2245 * t2413 + t2246 * t2418;
t2218 = t2245 * t2418 + t2246 * t2413;
t2217 = (t2362 * t2454 + t2436) * pkin(10) + t2445 * pkin(5) + t2241;
t2216 = t2239 * t2419 - t2253 * t2414;
t2215 = t2239 * t2414 + t2253 * t2419;
t2214 = t2219 * t2419 + t2283 * t2414;
t2213 = t2219 * t2414 - t2283 * t2419;
t2212 = t2233 * t2419 - t2251 * t2414;
t2211 = t2233 * t2414 + t2251 * t2419;
t2210 = t2240 * t2418 + t2241 * t2413;
t2209 = t2240 * t2413 - t2241 * t2418;
t2208 = t2226 * t2413 + t2227 * t2418;
t2207 = -t2226 * t2418 + t2227 * t2413;
t2206 = t2217 * t2412 + t2220 * t2417;
t2205 = t2217 * t2417 - t2220 * t2412;
t2204 = t2208 * t2419 - t2281 * t2414;
t2203 = t2208 * t2414 + t2281 * t2419;
t2202 = t2210 * t2419 + t2244 * t2414;
t2201 = t2210 * t2414 - t2244 * t2419;
t2200 = -t2215 * t2415 + t2216 * t2420;
t2199 = t2215 * t2420 + t2216 * t2415;
t2198 = -t2213 * t2415 + t2214 * t2420;
t2197 = t2213 * t2420 + t2214 * t2415;
t2196 = -t2211 * t2415 + t2212 * t2420;
t2195 = t2211 * t2420 + t2212 * t2415;
t2194 = -t2205 * t2412 + t2206 * t2417;
t2193 = t2205 * t2417 + t2206 * t2412;
t2192 = -t2203 * t2415 + t2204 * t2420;
t2191 = t2203 * t2420 + t2204 * t2415;
t2190 = -t2201 * t2415 + t2202 * t2420;
t2189 = t2201 * t2420 + t2202 * t2415;
t2188 = t2193 * t2413 + t2194 * t2418;
t2187 = -t2193 * t2418 + t2194 * t2413;
t2186 = t2188 * t2419 + t2225 * t2414;
t2185 = t2188 * t2414 - t2225 * t2419;
t2184 = -t2185 * t2415 + t2186 * t2420;
t2183 = t2185 * t2420 + t2186 * t2415;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2393, -t2392, 0, -t2397 * t2416 + t2398 * t2421, 0, 0, 0, 0, 0, 0, t2367 * t2421 - t2390 * t2416, t2368 * t2421 + t2387 * t2416, t2391 * t2421 - t2394 * t2416, t2339 * t2421 - t2384 * t2416, 0, 0, 0, 0, 0, 0, t2292 * t2421 + t2323 * t2416, t2296 * t2421 - t2416 * t2444, t2266 * t2421 + t2346 * t2416, t2243 * t2421 - t2347 * t2416, 0, 0, 0, 0, 0, 0, t2231 * t2421 + t2493, t2501, t2499, t2198 * t2421 + t2218 * t2416, 0, 0, 0, 0, 0, 0, t2237 * t2421 + t2493, t2499, -t2501, t2190 * t2421 + t2209 * t2416, 0, 0, 0, 0, 0, 0, t2196 * t2421 + t2232 * t2416, t2200 * t2421 + t2238 * t2416, t2192 * t2421 + t2207 * t2416, t2184 * t2421 + t2187 * t2416; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2392, t2393, 0, t2397 * t2421 + t2398 * t2416, 0, 0, 0, 0, 0, 0, t2367 * t2416 + t2390 * t2421, t2368 * t2416 - t2387 * t2421, t2391 * t2416 + t2394 * t2421, t2339 * t2416 + t2384 * t2421, 0, 0, 0, 0, 0, 0, t2292 * t2416 - t2323 * t2421, t2296 * t2416 + t2421 * t2444, t2266 * t2416 - t2346 * t2421, t2243 * t2416 + t2347 * t2421, 0, 0, 0, 0, 0, 0, t2231 * t2416 - t2491, t2502, t2500, t2198 * t2416 - t2218 * t2421, 0, 0, 0, 0, 0, 0, t2237 * t2416 - t2491, t2500, -t2502, t2190 * t2416 - t2209 * t2421, 0, 0, 0, 0, 0, 0, t2196 * t2416 - t2232 * t2421, t2200 * t2416 - t2238 * t2421, t2192 * t2416 - t2207 * t2421, t2184 * t2416 - t2187 * t2421; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2365, t2366, 0, t2338, 0, 0, 0, 0, 0, 0, t2291, t2295, t2265, t2242, 0, 0, 0, 0, 0, 0, t2229, -t2228, t2496, t2197, 0, 0, 0, 0, 0, 0, t2235, t2496, t2228, t2189, 0, 0, 0, 0, 0, 0, t2195, t2199, t2191, t2183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2423, -qJDD(1), 0, t2398, 0, 0, 0, 0, 0, 0, t2367, t2368, t2391, t2339, 0, 0, 0, 0, 0, 0, t2292, t2296, t2266, t2243, 0, 0, 0, 0, 0, 0, t2231, t2236, t2495, t2198, 0, 0, 0, 0, 0, 0, t2237, t2495, -t2236, t2190, 0, 0, 0, 0, 0, 0, t2196, t2200, t2192, t2184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2423, 0, t2397, 0, 0, 0, 0, 0, 0, t2390, -t2387, t2394, t2384, 0, 0, 0, 0, 0, 0, -t2323, t2444, -t2346, t2347, 0, 0, 0, 0, 0, 0, -t2484, t2277, -t2477, -t2218, 0, 0, 0, 0, 0, 0, -t2484, -t2477, -t2277, -t2209, 0, 0, 0, 0, 0, 0, -t2232, -t2238, -t2207, -t2187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2365, t2366, 0, t2338, 0, 0, 0, 0, 0, 0, t2291, t2295, t2265, t2242, 0, 0, 0, 0, 0, 0, t2229, -t2228, t2496, t2197, 0, 0, 0, 0, 0, 0, t2235, t2496, t2228, t2189, 0, 0, 0, 0, 0, 0, t2195, t2199, t2191, t2183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2400, t2396, t2407, t2371, 0, 0, 0, 0, 0, 0, t2318, t2328, t2294, t2274, 0, 0, 0, 0, 0, 0, t2258, -t2257, t2490, t2214, 0, 0, 0, 0, 0, 0, t2264, t2490, t2257, t2202, 0, 0, 0, 0, 0, 0, t2212, t2216, t2204, t2186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, t2399, -t2451, t2370, 0, 0, 0, 0, 0, 0, t2317, t2327, t2293, t2273, 0, 0, 0, 0, 0, 0, t2256, -t2255, t2489, t2213, 0, 0, 0, 0, 0, 0, t2262, t2489, t2255, t2201, 0, 0, 0, 0, 0, 0, t2211, t2215, t2203, t2185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2390, t2387, -t2394, -t2384, 0, 0, 0, 0, 0, 0, t2323, -t2444, t2346, -t2347, 0, 0, 0, 0, 0, 0, t2484, -t2277, t2477, t2218, 0, 0, 0, 0, 0, 0, t2484, t2477, t2277, t2209, 0, 0, 0, 0, 0, 0, t2232, t2238, t2207, t2187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2353, t2355, t2324, t2306, 0, 0, 0, 0, 0, 0, t2483, -t2279, t2476, t2219, 0, 0, 0, 0, 0, 0, t2483, t2476, t2279, t2210, 0, 0, 0, 0, 0, 0, t2233, t2239, t2208, t2188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2354, t2369, t2326, t2305, 0, 0, 0, 0, 0, 0, -t2298, -t2428, t2316, -t2283, 0, 0, 0, 0, 0, 0, -t2299, t2316, t2428, -t2244, 0, 0, 0, 0, 0, 0, t2251, t2253, t2281, -t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2323, -t2444, t2346, -t2347, 0, 0, 0, 0, 0, 0, t2484, -t2277, t2477, t2218, 0, 0, 0, 0, 0, 0, t2484, t2477, t2277, t2209, 0, 0, 0, 0, 0, 0, t2232, t2238, t2207, t2187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2478, -t2307, t2435, t2246, 0, 0, 0, 0, 0, 0, t2478, t2435, t2307, t2240, 0, 0, 0, 0, 0, 0, t2260, t2268, t2227, t2194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2445, t2479, -t2302, t2245, 0, 0, 0, 0, 0, 0, -t2445, -t2302, -t2479, -t2241, 0, 0, 0, 0, 0, 0, -t2259, -t2267, -t2226, -t2193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2298, t2428, -t2316, t2283, 0, 0, 0, 0, 0, 0, t2299, -t2316, -t2428, t2244, 0, 0, 0, 0, 0, 0, -t2251, -t2253, -t2281, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2478, t2435, t2307, t2240, 0, 0, 0, 0, 0, 0, t2260, t2268, t2227, t2194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, -t2316, -t2428, t2244, 0, 0, 0, 0, 0, 0, -t2251, -t2253, -t2281, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2445, t2302, t2479, t2241, 0, 0, 0, 0, 0, 0, t2259, t2267, t2226, t2193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2297, t2289, t2252, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, t2310, t2254, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2251, t2253, t2281, -t2225;];
f_new_reg  = t1;
