% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:16:17
% EndTime: 2019-03-09 22:16:33
% DurationCPUTime: 6.00s
% Computational Cost: add. (7748->422), mult. (17030->681), div. (0->0), fcn. (15770->8), ass. (0->216)
t186 = sin(qJ(4));
t184 = t186 ^ 2;
t189 = cos(qJ(4));
t185 = t189 ^ 2;
t327 = t184 + t185;
t187 = sin(qJ(3));
t188 = sin(qJ(2));
t313 = -pkin(8) - pkin(7);
t265 = qJD(2) * t313;
t149 = t188 * t265;
t156 = t313 * t188;
t190 = cos(qJ(2));
t158 = t313 * t190;
t310 = cos(qJ(3));
t249 = t310 * qJD(3);
t283 = qJD(3) * t187;
t212 = t310 * t149 + t156 * t249 + t158 * t283;
t238 = t190 * t265;
t199 = t187 * t238 + t212;
t145 = t187 * t188 - t310 * t190;
t291 = t187 * t190;
t147 = t310 * t188 + t291;
t267 = t190 * pkin(2) + pkin(1);
t215 = -t145 * pkin(3) + t147 * pkin(9) + t267;
t326 = qJD(4) * t215 - t199;
t308 = sin(qJ(6));
t252 = qJD(4) * t308;
t309 = cos(qJ(6));
t253 = qJD(4) * t309;
t325 = t186 * t253 - t189 * t252;
t318 = (t184 - t185) * qJD(4);
t241 = pkin(2) * t249;
t324 = t241 * t327;
t323 = -0.2e1 * t147;
t274 = t310 * pkin(2);
t174 = -t274 - pkin(3);
t179 = qJD(4) * t186;
t270 = pkin(2) * t283;
t223 = t174 * t179 - t189 * t270;
t180 = qJD(4) * t189;
t286 = t174 * t180 + t186 * t270;
t322 = t189 * pkin(4) + t186 * qJ(5);
t280 = t188 * qJD(2);
t317 = -t190 * (t310 * qJD(2) + t249) + t187 * t280 + t188 * t283;
t203 = t189 * t317;
t321 = t147 * t179 + t203;
t204 = t186 * t317;
t320 = -t147 * t180 + t204;
t234 = t189 * t253;
t319 = -t186 * t252 - t234;
t98 = (qJD(2) + qJD(3)) * t147;
t68 = t145 * t180 + t186 * t98;
t66 = t145 * t179 - t189 * t98;
t264 = t309 * t186;
t146 = -t308 * t189 + t264;
t250 = qJD(6) * t308;
t251 = qJD(6) * t309;
t97 = t186 * t251 - t189 * t250 - t325;
t316 = -0.2e1 * t318;
t315 = 2 * qJD(5);
t314 = -pkin(4) - pkin(5);
t312 = pkin(9) - pkin(10);
t311 = t98 * pkin(4);
t307 = pkin(2) * t187;
t144 = t308 * t186 + t309 * t189;
t244 = t187 * t149 - t310 * t238;
t279 = t189 * qJD(5);
t23 = -t320 * pkin(4) + t321 * qJ(5) - t147 * t279 + t156 * t283 - t158 * t249 + t244;
t18 = t320 * pkin(5) - t23;
t105 = -t310 * t156 - t158 * t187;
t290 = t189 * qJ(5);
t45 = (t314 * t186 + t290) * t147 - t105;
t306 = t18 * t144 + t45 * t97;
t96 = t144 * qJD(6) + t319;
t305 = t18 * t146 - t45 * t96;
t107 = t187 * t156 - t310 * t158;
t63 = qJD(3) * t107 + t244;
t95 = t105 * t180;
t304 = t63 * t186 + t95;
t177 = t186 * qJD(5);
t127 = pkin(4) * t179 - qJ(5) * t180 - t177;
t108 = -pkin(5) * t179 - t127;
t103 = t108 - t270;
t133 = t174 - t322;
t182 = t189 * pkin(5);
t119 = t182 - t133;
t303 = t103 * t144 + t119 * t97;
t302 = t103 * t146 - t119 * t96;
t275 = pkin(3) + t322;
t134 = t182 + t275;
t301 = t108 * t144 + t134 * t97;
t300 = t108 * t146 - t134 * t96;
t54 = t189 * t107 - t186 * t215;
t299 = pkin(2) * qJD(3);
t298 = t105 * t63;
t295 = t98 * qJ(5);
t294 = t147 * t186;
t293 = t147 * t189;
t292 = t186 * t107;
t109 = t127 + t270;
t289 = -t109 - t127;
t266 = pkin(9) + t307;
t288 = t266 * t324;
t287 = pkin(9) * t324;
t281 = t145 * qJD(5);
t278 = t190 * qJD(2);
t277 = -0.2e1 * pkin(1) * qJD(2);
t276 = 0.2e1 * t145 * t98;
t43 = t145 * qJ(5) + t54;
t273 = pkin(3) * t179;
t272 = pkin(3) * t180;
t271 = pkin(2) * t280;
t269 = pkin(9) * t179;
t268 = pkin(9) * t180;
t94 = t105 * t179;
t118 = t133 * t179;
t258 = t133 * t180;
t132 = t275 * t179;
t257 = t275 * t180;
t256 = t186 * t180;
t255 = t188 * t278;
t198 = t292 + (t312 * t147 + t267) * t189 + (-t189 * pkin(3) + t314) * t145;
t196 = t309 * t198;
t35 = pkin(10) * t294 + t43;
t19 = -t308 * t35 + t196;
t195 = t308 * t198;
t20 = t309 * t35 + t195;
t197 = t98 * pkin(3) + pkin(9) * t317 + t271;
t22 = -t107 * t180 + t326 * t186 + t189 * t197;
t15 = -t22 - t311;
t191 = -t98 * pkin(5) + t321 * pkin(10) + t15;
t21 = t107 * t179 - t186 * t197 + t326 * t189;
t10 = -t21 + t281 + t295;
t192 = -t320 * pkin(10) + t10;
t3 = -qJD(6) * t196 - t308 * t191 - t309 * t192 + t35 * t250;
t4 = -qJD(6) * t195 + t309 * t191 - t308 * t192 - t35 * t251;
t254 = t3 * t144 - t4 * t146 + t19 * t96 - t20 * t97;
t60 = (t186 * pkin(4) - t290) * t147 + t105;
t248 = t60 * t179 - t23 * t189;
t247 = -t63 * t189 + t94;
t243 = -pkin(10) + t266;
t136 = t243 * t189;
t226 = t189 * t241;
t207 = -t243 * t179 + t226;
t227 = t186 * t241;
t208 = qJD(4) * t136 + t227;
t224 = t186 * t243;
t220 = t309 * t224;
t36 = -qJD(6) * t220 + t136 * t250 - t309 * t207 - t308 * t208;
t219 = t308 * t224;
t37 = qJD(6) * t219 + t136 * t251 + t308 * t207 - t309 * t208;
t90 = -t308 * t136 + t220;
t91 = t309 * t136 + t219;
t246 = t36 * t144 + t37 * t146 + t90 * t96 - t91 * t97;
t157 = t312 * t189;
t225 = t312 * t264;
t104 = -t308 * t157 + t225;
t240 = t312 * t308;
t106 = t309 * t157 + t186 * t240;
t61 = -qJD(6) * t225 + t157 * t250 + t325 * t312;
t62 = t157 * t251 - t312 * t234 + (qJD(6) * t240 - t312 * t252) * t186;
t245 = t104 * t96 - t106 * t97 + t61 * t144 + t62 * t146;
t239 = t309 * t314;
t141 = t147 ^ 2;
t237 = t141 * t256;
t231 = t186 * t266;
t230 = t189 * t266;
t229 = qJD(4) * t266;
t222 = t145 * t229;
t221 = -t60 * t180 - t23 * t186;
t217 = t68 * pkin(9);
t216 = t66 * pkin(9);
t151 = t309 * qJ(5) + t308 * t314;
t126 = -t322 * qJD(4) + t279;
t53 = -t189 * t215 - t292;
t44 = -t145 * pkin(4) - t53;
t5 = t10 * t189 + t15 * t186 + (-t43 * t186 + t44 * t189) * qJD(4);
t6 = -t22 * t186 - t21 * t189 + (-t54 * t186 - t53 * t189) * qJD(4);
t206 = t184 * t317;
t205 = t185 * t317;
t202 = t186 * t203;
t201 = t317 * t309;
t200 = t317 * t308;
t194 = -t145 * t227 - t189 * t222 - t98 * t231;
t193 = t145 * t226 - t186 * t222 + t98 * t230;
t163 = -0.2e1 * t256;
t162 = 0.2e1 * t256;
t150 = -t308 * qJ(5) + t239;
t125 = t327 * t310 * t299;
t122 = t308 * qJD(5) + t151 * qJD(6);
t121 = qJ(5) * t250 - t309 * qJD(5) - qJD(6) * t239;
t117 = t189 * t229 + t227;
t116 = t186 * t229 - t226;
t115 = 0.2e1 * t125;
t82 = t144 * t147;
t81 = t146 * t147;
t77 = -0.2e1 * t146 * t96;
t74 = 0.2e1 * t144 * t97;
t52 = -0.2e1 * t147 * t205 - 0.2e1 * t237;
t51 = -0.2e1 * t147 * t206 + 0.2e1 * t237;
t50 = t147 * t318 + t202;
t42 = t141 * t318 - t202 * t323;
t41 = t145 * t96 - t146 * t98;
t40 = t144 * t98 + t145 * t97;
t39 = 0.4e1 * t147 * t256 + t205 - t206;
t38 = 0.2e1 * t144 * t96 - 0.2e1 * t146 * t97;
t34 = t309 * t96 - t308 * t97 + (-t309 * t144 + t308 * t146) * qJD(6);
t28 = -t145 * t320 + t98 * t294;
t27 = -0.2e1 * t145 * t321 + 0.2e1 * t98 * t293;
t26 = t121 * t144 + t122 * t146 + t150 * t96 - t151 * t97;
t25 = t319 * t147 + t186 * t201 - t189 * t200 + t250 * t294 + t251 * t293;
t24 = -t97 * t147 + t186 * t200 + t189 * t201;
t17 = t144 * t25 - t81 * t97;
t16 = -t146 * t24 - t82 * t96;
t7 = t144 * t24 - t146 * t25 - t81 * t96 - t82 * t97;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t255, 0.2e1 * (-t188 ^ 2 + t190 ^ 2) * qJD(2), 0, -0.2e1 * t255, 0, 0, t188 * t277, t190 * t277, 0, 0, t317 * t323, 0.2e1 * t145 * t317 - 0.2e1 * t147 * t98, 0, t276, 0, 0, 0.2e1 * t145 * t271 - 0.2e1 * t267 * t98, 0.2e1 * t147 * t271 + 0.2e1 * t267 * t317, -0.2e1 * t105 * t317 - 0.2e1 * t107 * t98 - 0.2e1 * t145 * t199 + 0.2e1 * t63 * t147, 0.2e1 * t107 * t212 + 0.2e1 * t298 + 0.2e1 * (-pkin(2) * t188 * t267 + t107 * t313 * t291) * qJD(2), t52, 0.2e1 * t42, t27, t51, -0.2e1 * t28, t276, -0.2e1 * t105 * t204 + 0.2e1 * t22 * t145 + 0.2e1 * t147 * t95 + 0.2e1 * t63 * t294 + 0.2e1 * t53 * t98, -0.2e1 * t105 * t203 + 0.2e1 * t21 * t145 - 0.2e1 * t147 * t94 + 0.2e1 * t63 * t293 - 0.2e1 * t54 * t98, 0.2e1 * t21 * t294 - 0.2e1 * t22 * t293 + 0.2e1 * t320 * t54 + 0.2e1 * t321 * t53, -0.2e1 * t21 * t54 + 0.2e1 * t22 * t53 + 0.2e1 * t298, t52, t27, -0.2e1 * t42, t276, 0.2e1 * t28, t51, -0.2e1 * t15 * t145 + 0.2e1 * t23 * t294 - 0.2e1 * t320 * t60 - 0.2e1 * t44 * t98, -0.2e1 * t10 * t294 + 0.2e1 * t15 * t293 + 0.2e1 * t320 * t43 - 0.2e1 * t321 * t44, 0.2e1 * t10 * t145 - 0.2e1 * t23 * t293 + 0.2e1 * t321 * t60 + 0.2e1 * t43 * t98, 0.2e1 * t10 * t43 + 0.2e1 * t15 * t44 + 0.2e1 * t23 * t60, -0.2e1 * t82 * t24, -0.2e1 * t24 * t81 - 0.2e1 * t25 * t82, 0.2e1 * t145 * t24 - 0.2e1 * t82 * t98, -0.2e1 * t81 * t25, 0.2e1 * t145 * t25 - 0.2e1 * t81 * t98, t276, -0.2e1 * t145 * t4 - 0.2e1 * t18 * t81 - 0.2e1 * t19 * t98 + 0.2e1 * t25 * t45, -0.2e1 * t145 * t3 + 0.2e1 * t18 * t82 + 0.2e1 * t20 * t98 - 0.2e1 * t24 * t45, 0.2e1 * t19 * t24 - 0.2e1 * t20 * t25 - 0.2e1 * t3 * t81 - 0.2e1 * t4 * t82, 0.2e1 * t18 * t45 + 0.2e1 * t19 * t4 - 0.2e1 * t20 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, 0, -t280, 0, -pkin(7) * t278, pkin(7) * t280, 0, 0, 0, 0, -t317, 0, -t98, 0, -t63, -t199, -t145 * t241 + t147 * t270 + t274 * t317 - t98 * t307, t105 * t270 + t107 * t241 + t199 * t307 - t63 * t274, -t50, -t39, t68, t50, -t66, 0, t286 * t147 - t174 * t204 + t194 + t247, -t223 * t147 - t174 * t203 - t193 + t304, t6, -t21 * t230 - t22 * t231 + t63 * t174 + (-t230 * t53 - t231 * t54) * qJD(4) + (t105 * t187 + (-t186 * t53 + t189 * t54) * t310) * t299, -t50, t68, t39, 0, t66, t50, t109 * t294 - t133 * t204 + t147 * t258 + t194 + t248, t5, -t109 * t293 + t118 * t147 + t133 * t203 + t193 + t221, t60 * t109 + t23 * t133 + (t10 * t266 + t229 * t44 + t241 * t43) * t189 + (t15 * t266 - t229 * t43 + t241 * t44) * t186, t16, t7, t41, t17, t40, 0, -t103 * t81 + t119 * t25 + t145 * t37 - t90 * t98 + t306, t103 * t82 - t119 * t24 - t145 * t36 + t91 * t98 + t305, t24 * t90 - t25 * t91 - t36 * t81 + t37 * t82 + t254, t103 * t45 + t119 * t18 - t19 * t37 - t20 * t36 - t3 * t91 + t4 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t270, -0.2e1 * t241, 0, 0, t162, t316, 0, t163, 0, 0, 0.2e1 * t223, 0.2e1 * t286, t115, 0.2e1 * t174 * t270 + 0.2e1 * t288, t162, 0, -t316, 0, 0, t163, -0.2e1 * t109 * t189 + 0.2e1 * t118, t115, -0.2e1 * t109 * t186 - 0.2e1 * t258, 0.2e1 * t109 * t133 + 0.2e1 * t288, t77, t38, 0, t74, 0, 0, 0.2e1 * t303, 0.2e1 * t302, 0.2e1 * t246, 0.2e1 * t103 * t119 - 0.2e1 * t36 * t91 - 0.2e1 * t37 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t317, 0, -t98, 0, -t63, -t199, 0, 0, -t50, -t39, t68, t50, -t66, 0, t320 * pkin(3) - t217 + t247, t321 * pkin(3) + t216 + t304, t6, -pkin(3) * t63 + pkin(9) * t6, -t50, t68, t39, 0, t66, t50, t127 * t294 - t147 * t257 + t204 * t275 - t217 + t248, t5, -t127 * t293 - t132 * t147 - t203 * t275 - t216 + t221, pkin(9) * t5 + t127 * t60 - t23 * t275, t16, t7, t41, t17, t40, 0, -t104 * t98 - t108 * t81 + t134 * t25 + t145 * t62 + t306, t106 * t98 + t108 * t82 - t134 * t24 - t145 * t61 + t305, t104 * t24 - t106 * t25 - t61 * t81 + t62 * t82 + t254, t104 * t4 - t106 * t3 + t108 * t45 + t134 * t18 - t19 * t62 - t20 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, -t241, 0, 0, t162, t316, 0, t163, 0, 0, t223 - t273, -t272 + t286, t125, -pkin(3) * t270 + t287, t162, 0, -t316, 0, 0, t163, t289 * t189 + t118 - t132, t125, t289 * t186 + (-t133 + t275) * t180, -t109 * t275 + t127 * t133 + t287, t77, t38, 0, t74, 0, 0, t301 + t303, t300 + t302, t245 + t246, t103 * t134 - t104 * t37 - t106 * t36 + t108 * t119 - t61 * t91 - t62 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, t316, 0, t163, 0, 0, -0.2e1 * t273, -0.2e1 * t272, 0, 0, t162, 0, -t316, 0, 0, t163, -0.2e1 * t127 * t189 - 0.2e1 * t132, 0, -0.2e1 * t127 * t186 + 0.2e1 * t257, -0.2e1 * t275 * t127, t77, t38, 0, t74, 0, 0, 0.2e1 * t301, 0.2e1 * t300, 0.2e1 * t245, -0.2e1 * t104 * t62 - 0.2e1 * t106 * t61 + 0.2e1 * t108 * t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, 0, t320, t98, t22, t21, 0, 0, 0, -t321, 0, t98, -t320, 0, t22 + 0.2e1 * t311, t321 * pkin(4) + t320 * qJ(5) - t147 * t177, -t21 + 0.2e1 * t281 + 0.2e1 * t295, -pkin(4) * t15 + qJ(5) * t10 + qJD(5) * t43, 0, 0, t24, 0, t25, t98, t122 * t145 - t150 * t98 - t4, -t121 * t145 + t151 * t98 - t3, -t121 * t81 + t122 * t82 + t150 * t24 - t151 * t25, -t121 * t20 - t122 * t19 + t150 * t4 - t151 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, 0, -t179, 0, -t117, t116, 0, 0, 0, t180, 0, 0, t179, 0, -t117, t126, -t116 (-pkin(4) * t241 - qJ(5) * t229) * t186 + (-pkin(4) * t229 + qJ(5) * t241 + qJD(5) * t266) * t189, 0, 0, t96, 0, t97, 0, t37, -t36, t26, -t121 * t91 - t122 * t90 - t150 * t37 - t151 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, 0, -t179, 0, -t268, t269, 0, 0, 0, t180, 0, 0, t179, 0, -t268, t126, -t269, t126 * pkin(9), 0, 0, t96, 0, t97, 0, t62, -t61, t26, -t104 * t122 - t106 * t121 - t150 * t62 - t151 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, qJ(5) * t315, 0, 0, 0, 0, 0, 0, 0.2e1 * t122, -0.2e1 * t121, 0, -0.2e1 * t121 * t151 - 0.2e1 * t122 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98, -t321, 0, t15, 0, 0, 0, 0, 0, 0, t145 * t250 - t309 * t98, t145 * t251 + t308 * t98, t309 * t24 - t308 * t25 + (t308 * t82 + t309 * t81) * qJD(6), t4 * t309 - t3 * t308 + (-t19 * t308 + t20 * t309) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t37 * t309 - t36 * t308 + (-t308 * t90 + t309 * t91) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, 0, t268, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t62 * t309 - t61 * t308 + (-t104 * t308 + t106 * t309) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, t251, 0, -t122 * t309 - t121 * t308 + (-t150 * t308 + t151 * t309) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, 0, -t25, -t98, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, 0, -t97, 0, -t37, t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, 0, -t97, 0, -t62, t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t122, t121, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250, -t251, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
