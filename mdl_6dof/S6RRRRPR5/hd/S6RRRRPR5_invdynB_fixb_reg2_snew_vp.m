% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 20:33
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:31:42
% EndTime: 2019-05-07 20:32:43
% DurationCPUTime: 45.72s
% Computational Cost: add. (150960->823), mult. (303075->1188), div. (0->0), fcn. (221116->10), ass. (0->587)
t1096 = sin(qJ(1));
t1101 = cos(qJ(1));
t1095 = sin(qJ(2));
t1100 = cos(qJ(2));
t1094 = sin(qJ(3));
t1099 = cos(qJ(3));
t1098 = cos(qJ(4));
t1093 = sin(qJ(4));
t1054 = (t1094 * t1100 + t1095 * t1099) * qJD(1);
t1159 = qJD(2) + qJD(3);
t1021 = t1054 * t1093 - t1098 * t1159;
t1176 = qJD(1) * t1100;
t1177 = qJD(1) * t1095;
t1052 = t1094 * t1177 - t1099 * t1176;
t1048 = qJD(4) + t1052;
t1172 = t1021 * t1048;
t1152 = qJDD(2) + qJDD(3);
t1139 = qJD(2) * t1176;
t1155 = qJDD(1) * t1095;
t1062 = t1139 + t1155;
t1086 = t1100 * qJDD(1);
t1146 = qJD(2) * t1177;
t1063 = t1086 - t1146;
t984 = -qJD(3) * t1052 + t1062 * t1099 + t1063 * t1094;
t1112 = -t1093 * t1152 - t1098 * t984;
t926 = -t1021 * qJD(4) - t1112;
t1246 = t1172 - t926;
t1200 = t1093 * t1246;
t1023 = t1098 * t1054 + t1093 * t1159;
t1135 = t1093 * t984 - t1098 * t1152;
t1157 = qJD(4) + t1048;
t897 = t1023 * t1157 + t1135;
t815 = t1098 * t897 - t1200;
t1019 = t1023 ^ 2;
t1211 = t1021 ^ 2;
t969 = t1019 - t1211;
t770 = t1094 * t815 + t1099 * t969;
t772 = -t1094 * t969 + t1099 * t815;
t702 = t1095 * t770 - t1100 * t772;
t811 = -t1093 * t897 - t1098 * t1246;
t1314 = t1096 * t702 - t1101 * t811;
t977 = t1023 * t1021;
t1132 = t1094 * t1062 - t1099 * t1063;
t983 = -t1054 * qJD(3) - t1132;
t980 = qJDD(4) - t983;
t1230 = t977 + t980;
t1198 = t1093 * t1230;
t1210 = t1048 ^ 2;
t994 = t1211 - t1210;
t873 = t1098 * t994 - t1198;
t898 = (qJD(4) - t1048) * t1023 + t1135;
t800 = t1094 * t873 + t1099 * t898;
t804 = -t1094 * t898 + t1099 * t873;
t728 = t1095 * t800 - t1100 * t804;
t1185 = t1098 * t1230;
t868 = t1093 * t994 + t1185;
t1313 = t1096 * t728 + t1101 * t868;
t1312 = t1096 * t811 + t1101 * t702;
t1311 = -t1096 * t868 + t1101 * t728;
t1228 = -t926 - t1172;
t1254 = -t1093 * t898 + t1098 * t1228;
t1219 = t1019 + t1211;
t1253 = -t1093 * t1228 - t1098 * t898;
t1266 = -t1094 * t1219 + t1099 * t1253;
t1267 = t1094 * t1253 + t1099 * t1219;
t1279 = -t1095 * t1267 + t1100 * t1266;
t1300 = t1096 * t1254 + t1101 * t1279;
t1310 = pkin(6) * t1300;
t1301 = t1096 * t1279 - t1101 * t1254;
t1309 = pkin(6) * t1301;
t1136 = -t980 + t977;
t1197 = t1093 * t1136;
t995 = -t1019 + t1210;
t1270 = -t1098 * t995 + t1197;
t1184 = t1098 * t1136;
t1269 = -t1093 * t995 - t1184;
t1280 = -t1094 * t1228 + t1099 * t1269;
t1281 = t1094 * t1269 + t1099 * t1228;
t1299 = -t1095 * t1281 + t1100 * t1280;
t1308 = t1096 * t1299 + t1101 * t1270;
t1307 = -t1096 * t1270 + t1101 * t1299;
t1306 = t1095 * t772 + t1100 * t770;
t1305 = t1095 * t804 + t1100 * t800;
t1278 = t1095 * t1266 + t1100 * t1267;
t1304 = pkin(7) * t1278;
t1303 = -pkin(1) * t1278 - pkin(2) * t1267 - pkin(3) * t1219 - pkin(9) * t1253;
t1302 = -pkin(1) * t1254 + pkin(7) * t1279;
t1298 = t1095 * t1280 + t1100 * t1281;
t945 = t1210 + t1019;
t844 = t1098 * t945 + t1198;
t1297 = pkin(1) * t844;
t1296 = pkin(2) * t844;
t1295 = pkin(3) * t844;
t1294 = pkin(9) * t844;
t855 = t1093 * t945 - t1185;
t1293 = pkin(9) * t855;
t1292 = pkin(8) * t1266;
t1291 = pkin(8) * t1267;
t1290 = t1094 * t855;
t1289 = t1096 * t844;
t1287 = t1099 * t855;
t1286 = t1101 * t844;
t1276 = pkin(9) * t1254;
t1275 = qJ(5) * t1246;
t1218 = -t1210 - t1211;
t1238 = t1093 * t1218 - t1184;
t1265 = pkin(1) * t1238;
t1264 = pkin(2) * t1238;
t1263 = pkin(3) * t1238;
t1237 = t1098 * t1218 + t1197;
t1262 = pkin(9) * t1237;
t1261 = pkin(9) * t1238;
t1258 = t1094 * t1237;
t1257 = t1096 * t1238;
t1256 = t1099 * t1237;
t1255 = t1101 * t1238;
t1168 = t1048 * t1093;
t1143 = t1021 * t1168;
t1167 = t1048 * t1098;
t988 = t1023 * t1167;
t1124 = t988 + t1143;
t1142 = t1021 * t1167;
t987 = t1023 * t1168;
t1123 = t987 - t1142;
t1214 = t1094 * t980 + t1099 * t1123;
t1217 = t1094 * t1123 - t1099 * t980;
t1235 = -t1095 * t1217 + t1100 * t1214;
t1252 = t1096 * t1235 + t1101 * t1124;
t925 = qJD(4) * t1023 + t1135;
t1113 = t1098 * t925 - t1143;
t1114 = t1093 * t925 + t1142;
t1145 = t1094 * t977;
t1215 = t1099 * t1114 - t1145;
t1144 = t1099 * t977;
t1216 = t1094 * t1114 + t1144;
t1233 = -t1095 * t1216 + t1100 * t1215;
t1251 = t1096 * t1233 + t1101 * t1113;
t1250 = -t1096 * t1124 + t1101 * t1235;
t1249 = -t1096 * t1113 + t1101 * t1233;
t1248 = 2 * qJD(5);
t1011 = t1054 * t1052;
t1220 = -t1011 + t1152;
t1244 = t1094 * t1220;
t1241 = t1099 * t1220;
t893 = t1098 * t926 - t987;
t1125 = t1094 * t893 - t1144;
t1126 = t1099 * t893 + t1145;
t1212 = -t1095 * t1125 + t1100 * t1126;
t892 = -t1093 * t926 - t988;
t1239 = t1096 * t1212 + t1101 * t892;
t1236 = -t1096 * t892 + t1101 * t1212;
t1234 = t1095 * t1214 + t1100 * t1217;
t1232 = t1095 * t1215 + t1100 * t1216;
t1151 = t1159 ^ 2;
t1092 = sin(qJ(6));
t1097 = cos(qJ(6));
t962 = -t1097 * t1021 + t1023 * t1092;
t824 = -qJD(6) * t962 + t1092 * t925 + t1097 * t926;
t1045 = -qJD(6) + t1048;
t935 = t962 * t1045;
t1231 = t824 + t935;
t1041 = t1159 * t1052;
t1227 = -t984 + t1041;
t964 = t1021 * t1092 + t1023 * t1097;
t1206 = t962 * t964;
t979 = qJDD(6) - t980;
t1106 = t979 - t1206;
t1226 = t1092 * t1106;
t1223 = t1097 * t1106;
t1134 = t1159 * t1054;
t1091 = t1100 ^ 2;
t1103 = qJD(1) ^ 2;
t1072 = t1096 * g(1) - t1101 * g(2);
t1116 = qJDD(1) * pkin(1) + t1072;
t1117 = qJD(2) * pkin(2) - pkin(8) * t1177;
t986 = t1063 * pkin(2) + (pkin(8) * t1091 + pkin(7)) * t1103 - t1117 * t1177 + t1116;
t843 = t1227 * pkin(9) + (-t983 + t1134) * pkin(3) - t986;
t1008 = pkin(3) * t1052 - pkin(9) * t1054;
t1073 = g(1) * t1101 + g(2) * t1096;
t1109 = -pkin(1) * t1103 + qJDD(1) * pkin(7) - t1073;
t1108 = t1095 * t1109;
t1160 = t1095 * t1103;
t1178 = qJD(1) * qJD(2);
t1104 = -t1108 - t1062 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1160 + pkin(8) * t1178 - g(3)) * t1100;
t1034 = -t1095 * g(3) + t1100 * t1109;
t1088 = t1091 * t1103;
t974 = -pkin(2) * t1088 + t1063 * pkin(8) - qJD(2) * t1117 + t1034;
t910 = t1094 * t1104 + t1099 * t974;
t852 = -pkin(3) * t1151 + pkin(9) * t1152 - t1052 * t1008 + t910;
t758 = t1093 * t843 + t1098 * t852;
t968 = pkin(4) * t1021 - qJ(5) * t1023;
t1118 = t980 * qJ(5) - t1021 * t968 + t1048 * t1248 + t758;
t1213 = t1095 * t1126 + t1100 * t1125;
t960 = t962 ^ 2;
t961 = t964 ^ 2;
t1042 = t1045 ^ 2;
t1050 = t1052 ^ 2;
t1051 = t1054 ^ 2;
t1209 = pkin(4) + pkin(5);
t1208 = pkin(3) * t1094;
t1207 = pkin(4) * t1098;
t757 = t1093 * t852 - t1098 * t843;
t1205 = qJ(5) * t1098;
t1128 = -pkin(5) * t1048 - pkin(10) * t1023;
t909 = t1094 * t974 - t1099 * t1104;
t851 = -t1152 * pkin(3) - t1151 * pkin(9) + t1054 * t1008 + t909;
t1107 = t925 * pkin(4) + t1275 + t851;
t746 = (pkin(4) * t1048 - (2 * qJD(5))) * t1023 + t1107;
t707 = t925 * pkin(5) + pkin(10) * t1211 - t1023 * t1128 + t746;
t1204 = t1092 * t707;
t857 = -t979 - t1206;
t1203 = t1092 * t857;
t1202 = t1093 * t851;
t1193 = t1094 * t986;
t827 = t1094 * t910 - t1099 * t909;
t1192 = t1095 * t827;
t1190 = t1097 * t707;
t1189 = t1097 * t857;
t1188 = t1098 * t851;
t1181 = t1099 * t986;
t1180 = t1100 * t827;
t1179 = -t1210 + t1219;
t1005 = t1011 + t1152;
t1174 = t1005 * t1094;
t1173 = t1005 * t1099;
t1171 = t1045 * t1092;
t1170 = t1045 * t1097;
t1169 = t1048 * t1023;
t1055 = t1103 * pkin(7) + t1116;
t1166 = t1055 * t1095;
t1165 = t1055 * t1100;
t1079 = t1100 * t1160;
t1070 = qJDD(2) + t1079;
t1164 = t1070 * t1095;
t1071 = qJDD(2) - t1079;
t1163 = t1071 * t1095;
t1162 = t1071 * t1100;
t1090 = t1095 ^ 2;
t1161 = t1090 * t1103;
t1156 = t1090 + t1091;
t1154 = qJDD(1) * t1096;
t1153 = qJDD(1) * t1101;
t1150 = t1094 * t1206;
t1149 = t1099 * t1206;
t1148 = -pkin(3) * t1099 - pkin(2);
t1141 = t1096 * t1011;
t1140 = t1101 * t1011;
t1138 = qJ(5) * t1093 + pkin(3);
t1131 = t1023 * t968 + qJDD(5) + t757;
t1115 = -t980 * pkin(4) + t1131;
t738 = qJ(5) * t1210 - t1115;
t692 = t1136 * pkin(5) + pkin(10) * t1228 - t738;
t734 = -pkin(4) * t1210 + t1118;
t696 = -pkin(5) * t1211 + t925 * pkin(10) + t1048 * t1128 + t734;
t639 = t1092 * t696 - t1097 * t692;
t1137 = t1092 * t926 - t1097 * t925;
t828 = t1094 * t909 + t1099 * t910;
t1033 = t1100 * g(3) + t1108;
t973 = t1033 * t1095 + t1100 * t1034;
t1025 = -t1072 * t1096 - t1101 * t1073;
t1130 = t1096 * t1079;
t1129 = t1101 * t1079;
t1067 = -t1096 * t1103 + t1153;
t1127 = -pkin(6) * t1067 - g(3) * t1096;
t1122 = t1094 * t1041;
t1121 = t1094 * t1134;
t1120 = t1099 * t1041;
t1119 = t1099 * t1134;
t640 = t1092 * t692 + t1097 * t696;
t597 = t1092 * t640 - t1097 * t639;
t598 = t1092 * t639 + t1097 * t640;
t693 = t1093 * t758 - t1098 * t757;
t694 = t1093 * t757 + t1098 * t758;
t972 = t1033 * t1100 - t1034 * t1095;
t1024 = t1072 * t1101 - t1073 * t1096;
t947 = qJD(2) * t1054 - t1132;
t1111 = (-qJD(6) - t1045) * t964 - t1137;
t1105 = t1023 * t1248 - t1107;
t1102 = qJD(2) ^ 2;
t1077 = -t1088 - t1102;
t1076 = t1088 - t1102;
t1075 = -t1102 - t1161;
t1074 = t1102 - t1161;
t1069 = t1088 - t1161;
t1068 = t1088 + t1161;
t1066 = t1101 * t1103 + t1154;
t1065 = t1156 * qJDD(1);
t1064 = t1086 - 0.2e1 * t1146;
t1061 = 0.2e1 * t1139 + t1155;
t1059 = t1100 * t1070;
t1058 = t1156 * t1178;
t1049 = -pkin(6) * t1066 + g(3) * t1101;
t1038 = -t1051 + t1151;
t1037 = t1050 - t1151;
t1036 = t1062 * t1100 - t1090 * t1178;
t1035 = -t1063 * t1095 - t1091 * t1178;
t1032 = -t1051 - t1151;
t1031 = -t1075 * t1095 - t1162;
t1030 = -t1074 * t1095 + t1059;
t1029 = t1077 * t1100 - t1164;
t1028 = t1076 * t1100 - t1163;
t1027 = t1075 * t1100 - t1163;
t1026 = t1077 * t1095 + t1059;
t1016 = t1065 * t1101 - t1068 * t1096;
t1015 = t1065 * t1096 + t1068 * t1101;
t1012 = -t1061 * t1095 + t1064 * t1100;
t1010 = -t1051 + t1050;
t1004 = -t1151 - t1050;
t1003 = t1031 * t1101 + t1061 * t1096;
t1002 = t1029 * t1101 - t1064 * t1096;
t1001 = t1031 * t1096 - t1061 * t1101;
t1000 = t1029 * t1096 + t1064 * t1101;
t992 = -t1120 + t1121;
t991 = -t1122 - t1119;
t990 = -pkin(7) * t1027 - t1165;
t989 = -pkin(7) * t1026 - t1166;
t985 = -t1050 - t1051;
t982 = -pkin(1) * t1027 + t1034;
t981 = -pkin(1) * t1026 + t1033;
t957 = t1037 * t1099 - t1174;
t956 = -t1038 * t1094 + t1241;
t955 = t1037 * t1094 + t1173;
t954 = t1038 * t1099 + t1244;
t953 = -t1032 * t1094 - t1173;
t952 = t1032 * t1099 - t1174;
t950 = -t1041 - t984;
t946 = (0.2e1 * qJD(3) + qJD(2)) * t1054 + t1132;
t942 = t1099 * t984 - t1121;
t941 = t1094 * t984 + t1119;
t940 = -t1094 * t983 + t1120;
t939 = t1099 * t983 + t1122;
t938 = -t1055 * t1096 + t1101 * t973;
t937 = t1055 * t1101 + t1096 * t973;
t934 = t1004 * t1099 - t1244;
t933 = t1004 * t1094 + t1241;
t932 = -t961 + t1042;
t931 = t960 - t1042;
t917 = -t1095 * t991 + t1100 * t992;
t916 = -t961 - t1042;
t907 = -pkin(8) * t952 - t1181;
t906 = t961 - t960;
t905 = t1021 * t1157 + t1112;
t899 = t925 + t1169;
t896 = -pkin(8) * t933 - t1193;
t895 = -t1095 * t955 + t1100 * t957;
t894 = -t1095 * t954 + t1100 * t956;
t887 = -t1042 - t960;
t883 = -t1095 * t952 + t1100 * t953;
t882 = t1095 * t953 + t1100 * t952;
t881 = -t1094 * t950 + t1099 * t947;
t880 = t1094 * t1227 - t1099 * t946;
t879 = t1094 * t947 + t1099 * t950;
t878 = -t1094 * t946 - t1099 * t1227;
t865 = -t1095 * t941 + t1100 * t942;
t864 = -t1095 * t939 + t1100 * t940;
t863 = (-t1092 * t964 + t1097 * t962) * t1045;
t862 = (-t1092 * t962 - t1097 * t964) * t1045;
t861 = -t1095 * t933 + t1100 * t934;
t860 = t1095 * t934 + t1100 * t933;
t848 = -t960 - t961;
t842 = pkin(2) * t1227 + pkin(8) * t953 - t1193;
t831 = -pkin(2) * t946 + pkin(8) * t934 + t1181;
t830 = -t1096 * t1227 + t1101 * t883;
t829 = t1096 * t883 + t1101 * t1227;
t826 = t1096 * t946 + t1101 * t861;
t825 = t1096 * t861 - t1101 * t946;
t823 = -qJD(6) * t964 - t1137;
t822 = t1097 * t931 + t1203;
t821 = -t1092 * t932 + t1223;
t820 = -t1092 * t931 + t1189;
t819 = -t1097 * t932 - t1226;
t810 = -t1092 * t916 + t1189;
t809 = t1097 * t916 + t1203;
t808 = pkin(2) * t986 + pkin(8) * t828;
t807 = -t1095 * t879 + t1100 * t881;
t806 = -t1095 * t878 + t1100 * t880;
t805 = t1095 * t881 + t1100 * t879;
t794 = t1094 * t899 + t1256;
t793 = -t1094 * t905 + t1287;
t792 = -t1099 * t899 + t1258;
t791 = t1099 * t905 + t1290;
t790 = t1097 * t887 - t1226;
t789 = t1092 * t887 + t1223;
t788 = t1094 * t897 + t1256;
t787 = t1094 * t1246 - t1287;
t786 = -t1099 * t897 + t1258;
t785 = -t1099 * t1246 - t1290;
t783 = t824 - t935;
t779 = (qJD(6) - t1045) * t964 + t1137;
t778 = -pkin(1) * t882 - pkin(2) * t952 + t910;
t777 = t1097 * t824 + t1171 * t964;
t776 = -t1092 * t824 + t1170 * t964;
t775 = -t1092 * t823 - t1170 * t962;
t774 = -t1097 * t823 + t1171 * t962;
t769 = -t1093 * t862 + t1098 * t863;
t768 = -t1093 * t863 - t1098 * t862;
t767 = t1096 * t985 + t1101 * t807;
t766 = t1096 * t807 - t1101 * t985;
t765 = t1188 + t1294;
t760 = -pkin(1) * t860 - pkin(2) * t933 + t909;
t759 = t1202 - t1261;
t756 = -pkin(8) * t879 - t827;
t755 = -t1094 * t979 + t1099 * t769;
t754 = t1094 * t769 + t1099 * t979;
t749 = -pkin(2) * t985 + pkin(8) * t881 + t828;
t748 = -pkin(1) * t805 - pkin(2) * t879;
t747 = -pkin(7) * t882 - t1095 * t842 + t1100 * t907;
t745 = t1100 * t828 - t1192;
t744 = t1095 * t828 + t1180;
t743 = -pkin(7) * t860 - t1095 * t831 + t1100 * t896;
t742 = -t1093 * t820 + t1098 * t822;
t741 = -t1093 * t819 + t1098 * t821;
t740 = -t1093 * t822 - t1098 * t820;
t739 = -t1093 * t821 - t1098 * t819;
t737 = -pkin(3) * t1254 - pkin(4) * t1228 + qJ(5) * t898;
t736 = -t1096 * t986 + t1101 * t745;
t735 = t1096 * t745 + t1101 * t986;
t733 = t758 + t1295;
t732 = t757 - t1263;
t731 = t1093 * t809 + t1098 * t810;
t730 = t1093 * t810 - t1098 * t809;
t725 = (-t899 - t1169) * pkin(4) + t1105;
t724 = -pkin(4) * t1169 + t1105 - t1275;
t723 = qJ(5) * t1179 + t1115;
t722 = pkin(4) * t1179 + t1118;
t721 = -t1095 * t792 + t1100 * t794;
t720 = -t1095 * t791 + t1100 * t793;
t719 = t1095 * t794 + t1100 * t792;
t718 = t1095 * t793 + t1100 * t791;
t717 = t1093 * t789 + t1098 * t790;
t716 = t1093 * t790 - t1098 * t789;
t715 = -t1095 * t786 + t1100 * t788;
t714 = -t1095 * t785 + t1100 * t787;
t713 = t1095 * t788 + t1100 * t786;
t712 = t1095 * t787 + t1100 * t785;
t711 = t1092 * t783 + t1097 * t1111;
t710 = -t1092 * t1231 - t1097 * t779;
t709 = t1092 * t1111 - t1097 * t783;
t708 = t1092 * t779 - t1097 * t1231;
t706 = -t1093 * t776 + t1098 * t777;
t705 = -t1093 * t774 + t1098 * t775;
t704 = -t1093 * t777 - t1098 * t776;
t703 = -t1093 * t775 - t1098 * t774;
t695 = -pkin(1) * t744 - pkin(2) * t827;
t690 = -t1095 * t754 + t1100 * t755;
t689 = t1099 * t706 - t1150;
t688 = t1099 * t705 + t1150;
t687 = t1094 * t706 + t1149;
t686 = t1094 * t705 - t1149;
t685 = t1101 * t721 + t1257;
t684 = t1101 * t720 - t1289;
t683 = t1096 * t721 - t1255;
t682 = t1096 * t720 + t1286;
t681 = t1101 * t715 + t1257;
t680 = t1101 * t714 + t1289;
t679 = t1096 * t715 - t1255;
t678 = t1096 * t714 - t1286;
t677 = -t1094 * t1111 + t1099 * t742;
t676 = -t1094 * t783 + t1099 * t741;
t675 = t1094 * t742 + t1099 * t1111;
t674 = t1094 * t741 + t1099 * t783;
t673 = -t1263 + (-t1210 - t1218) * qJ(5) + (t1136 - t980) * pkin(4) + t1131;
t672 = -t1094 * t1231 + t1099 * t731;
t671 = t1094 * t731 + t1099 * t1231;
t670 = -t1295 - qJ(5) * t1230 + (t1210 - t945) * pkin(4) - t1118;
t669 = -t1093 * t725 - t1205 * t899 - t1261;
t668 = pkin(4) * t1200 + t1098 * t724 - t1294;
t667 = t1094 * t851 + t1099 * t694;
t666 = t1094 * t694 - t1099 * t851;
t665 = -t1094 * t779 + t1099 * t717;
t664 = t1094 * t717 + t1099 * t779;
t659 = -t693 - t1276;
t658 = -pkin(7) * t744 - pkin(8) * t1180 - t1095 * t808;
t657 = -t1093 * t738 + t1098 * t734;
t656 = t1093 * t734 + t1098 * t738;
t655 = -pkin(7) * t805 - t1095 * t749 + t1100 * t756;
t654 = -pkin(8) * t791 - t1094 * t733 + t1099 * t765;
t653 = -pkin(8) * t786 - t1094 * t732 + t1099 * t759;
t652 = -pkin(10) * t809 + qJ(5) * t1231 - t1190;
t651 = -pkin(10) * t789 + qJ(5) * t779 - t1204;
t650 = t1093 * t709 + t1098 * t711;
t649 = -t1093 * t708 + t1098 * t710;
t648 = t1093 * t711 - t1098 * t709;
t647 = -t1093 * t710 - t1098 * t708;
t646 = pkin(8) * t793 + t1094 * t765 + t1099 * t733 + t1296;
t645 = -pkin(1) * t718 - pkin(2) * t791 - pkin(3) * t905 - t1202 - t1293;
t644 = pkin(8) * t788 + t1094 * t759 + t1099 * t732 - t1264;
t643 = -t1094 * t906 + t1099 * t649;
t642 = t1094 * t649 + t1099 * t906;
t641 = -pkin(1) * t713 - pkin(2) * t786 + pkin(3) * t897 + t1188 - t1262;
t638 = -t1094 * t848 + t1099 * t650;
t637 = t1094 * t650 + t1099 * t848;
t636 = -t1093 * t722 + t1098 * t723 - t1276;
t635 = t1094 * t746 + t1099 * t657;
t634 = t1094 * t657 - t1099 * t746;
t633 = -t1095 * t687 + t1100 * t689;
t632 = -t1095 * t686 + t1100 * t688;
t631 = -pkin(10) * t810 + t1209 * t1231 + t1204;
t630 = -pkin(10) * t790 + t1209 * t779 - t1190;
t629 = t1099 * t659 + t1208 * t1254 - t1291;
t628 = -t1095 * t675 + t1100 * t677;
t627 = -t1095 * t674 + t1100 * t676;
t626 = -t1095 * t671 + t1100 * t672;
t625 = t1095 * t672 + t1100 * t671;
t624 = -t1095 * t666 + t1100 * t667;
t623 = t1095 * t667 + t1100 * t666;
t622 = t1094 * t659 + t1148 * t1254 + t1292;
t621 = -t1095 * t664 + t1100 * t665;
t620 = t1095 * t665 + t1100 * t664;
t619 = -pkin(1) * t719 - pkin(2) * t792 - t1098 * t725 + t1138 * t899 - t1262;
t618 = -pkin(1) * t712 - pkin(2) * t785 + t1293 - t1093 * t724 - (-pkin(3) - t1207) * t1246;
t617 = -pkin(9) * t656 + (pkin(4) * t1093 - t1205) * t746;
t616 = -pkin(8) * t792 - t1094 * t673 + t1099 * t669;
t615 = -pkin(3) * t656 - pkin(4) * t738 - qJ(5) * t734;
t614 = -pkin(8) * t785 - t1094 * t670 + t1099 * t668;
t613 = t1303 - t694;
t612 = pkin(8) * t794 + t1094 * t669 + t1099 * t673 - t1264;
t611 = pkin(8) * t787 + t1094 * t668 + t1099 * t670 - t1296;
t610 = t1096 * t730 + t1101 * t626;
t609 = t1096 * t626 - t1101 * t730;
t608 = -t1094 * t737 + t1099 * t636 - t1291;
t607 = -pkin(8) * t666 + (-pkin(9) * t1099 + t1208) * t693;
t606 = t1096 * t716 + t1101 * t621;
t605 = t1096 * t621 - t1101 * t716;
t604 = t1096 * t693 + t1101 * t624;
t603 = t1096 * t624 - t1101 * t693;
t602 = -t1093 * t723 - t1098 * t722 + t1303;
t601 = -pkin(2) * t1254 + t1094 * t636 + t1099 * t737 + t1292;
t600 = -t1095 * t642 + t1100 * t643;
t599 = -pkin(3) * t730 - qJ(5) * t810 + t1209 * t809 - t640;
t596 = -t1095 * t637 + t1100 * t638;
t595 = t1095 * t638 + t1100 * t637;
t594 = -pkin(3) * t716 - qJ(5) * t790 + t1209 * t789 - t639;
t593 = -t1095 * t634 + t1100 * t635;
t592 = t1095 * t635 + t1100 * t634;
t591 = pkin(8) * t667 + (-pkin(9) * t1094 + t1148) * t693;
t590 = -pkin(7) * t718 - t1095 * t646 + t1100 * t654;
t589 = -pkin(3) * t648 - qJ(5) * t711 + t1209 * t709;
t588 = -pkin(7) * t713 - t1095 * t644 + t1100 * t653;
t587 = -pkin(9) * t730 - t1093 * t631 + t1098 * t652;
t586 = -pkin(9) * t716 - t1093 * t630 + t1098 * t651;
t585 = -pkin(10) * t597 - qJ(5) * t707;
t584 = -pkin(1) * t623 - pkin(2) * t666 + pkin(3) * t851 - pkin(9) * t694;
t583 = -pkin(10) * t709 + qJ(5) * t848 - t597;
t582 = -pkin(10) * t711 + t1209 * t848 - t598;
t581 = t1096 * t656 + t1101 * t593;
t580 = t1096 * t593 - t1101 * t656;
t579 = -t1095 * t622 + t1100 * t629 - t1304;
t578 = t1096 * t648 + t1101 * t596;
t577 = t1096 * t596 - t1101 * t648;
t576 = -pkin(10) * t598 - t1209 * t707;
t575 = -pkin(7) * t719 - t1095 * t612 + t1100 * t616;
t574 = -pkin(7) * t712 - t1095 * t611 + t1100 * t614;
t573 = -pkin(8) * t634 - t1094 * t615 + t1099 * t617;
t572 = -t1095 * t601 + t1100 * t608 - t1304;
t571 = t1093 * t597 + t1098 * t598;
t570 = t1093 * t598 - t1098 * t597;
t569 = -pkin(1) * t625 - pkin(2) * t671 - pkin(3) * t1231 - pkin(9) * t731 - t1093 * t652 - t1098 * t631;
t568 = t1094 * t707 + t1099 * t571;
t567 = t1094 * t571 - t1099 * t707;
t566 = -pkin(2) * t656 + pkin(8) * t635 + t1094 * t617 + t1099 * t615;
t565 = -pkin(1) * t620 - pkin(2) * t664 - pkin(3) * t779 - pkin(9) * t717 - t1093 * t651 - t1098 * t630;
t564 = -pkin(1) * t592 - pkin(2) * t634 - pkin(9) * t657 + (t1138 + t1207) * t746;
t563 = -pkin(8) * t671 - t1094 * t599 + t1099 * t587;
t562 = -pkin(7) * t623 - t1095 * t591 + t1100 * t607;
t561 = -pkin(8) * t664 - t1094 * t594 + t1099 * t586;
t560 = -pkin(2) * t730 + pkin(8) * t672 + t1094 * t587 + t1099 * t599;
t559 = -pkin(2) * t716 + pkin(8) * t665 + t1094 * t586 + t1099 * t594;
t558 = -pkin(9) * t648 - t1093 * t582 + t1098 * t583;
t557 = -t1095 * t567 + t1100 * t568;
t556 = t1095 * t568 + t1100 * t567;
t555 = -pkin(1) * t595 - pkin(2) * t637 - pkin(3) * t848 - pkin(9) * t650 - t1093 * t583 - t1098 * t582;
t554 = -pkin(8) * t637 - t1094 * t589 + t1099 * t558;
t553 = -pkin(9) * t570 - t1093 * t576 + t1098 * t585;
t552 = -pkin(3) * t570 - qJ(5) * t598 + t1209 * t597;
t551 = -pkin(2) * t648 + pkin(8) * t638 + t1094 * t558 + t1099 * t589;
t550 = -pkin(7) * t592 - t1095 * t566 + t1100 * t573;
t549 = -pkin(7) * t625 - t1095 * t560 + t1100 * t563;
t548 = -pkin(7) * t620 - t1095 * t559 + t1100 * t561;
t547 = t1096 * t570 + t1101 * t557;
t546 = t1096 * t557 - t1101 * t570;
t545 = -pkin(7) * t595 - t1095 * t551 + t1100 * t554;
t544 = -pkin(1) * t556 - pkin(2) * t567 + pkin(3) * t707 - pkin(9) * t571 - t1093 * t585 - t1098 * t576;
t543 = -pkin(8) * t567 - t1094 * t552 + t1099 * t553;
t542 = -pkin(2) * t570 + pkin(8) * t568 + t1094 * t553 + t1099 * t552;
t541 = -pkin(7) * t556 - t1095 * t542 + t1100 * t543;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1066, -t1067, 0, t1025, 0, 0, 0, 0, 0, 0, t1002, t1003, t1016, t938, 0, 0, 0, 0, 0, 0, t826, t830, t767, t736, 0, 0, 0, 0, 0, 0, t681, t684, t1300, t604, 0, 0, 0, 0, 0, 0, t685, t1300, t680, t581, 0, 0, 0, 0, 0, 0, t606, t610, t578, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1067, -t1066, 0, t1024, 0, 0, 0, 0, 0, 0, t1000, t1001, t1015, t937, 0, 0, 0, 0, 0, 0, t825, t829, t766, t735, 0, 0, 0, 0, 0, 0, t679, t682, t1301, t603, 0, 0, 0, 0, 0, 0, t683, t1301, t678, t580, 0, 0, 0, 0, 0, 0, t605, t609, t577, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1026, t1027, 0, -t972, 0, 0, 0, 0, 0, 0, t860, t882, t805, t744, 0, 0, 0, 0, 0, 0, t713, t718, t1278, t623, 0, 0, 0, 0, 0, 0, t719, t1278, t712, t592, 0, 0, 0, 0, 0, 0, t620, t625, t595, t556; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1067, 0, -t1066, 0, t1127, -t1049, -t1024, -pkin(6) * t1024, t1036 * t1101 - t1130, t1012 * t1101 - t1069 * t1096, t1030 * t1101 + t1095 * t1154, t1035 * t1101 + t1130, t1028 * t1101 + t1086 * t1096, qJDD(2) * t1096 + t1058 * t1101, -pkin(6) * t1000 - t1096 * t981 + t1101 * t989, -pkin(6) * t1001 - t1096 * t982 + t1101 * t990, -pkin(6) * t1015 + t1101 * t972, -pkin(6) * t937 - (pkin(1) * t1096 - pkin(7) * t1101) * t972, t1101 * t865 + t1141, -t1010 * t1096 + t1101 * t806, -t1096 * t950 + t1101 * t894, t1101 * t864 - t1141, t1096 * t947 + t1101 * t895, t1096 * t1152 + t1101 * t917, -pkin(6) * t825 - t1096 * t760 + t1101 * t743, -pkin(6) * t829 - t1096 * t778 + t1101 * t747, -pkin(6) * t766 - t1096 * t748 + t1101 * t655, -pkin(6) * t735 - t1096 * t695 + t1101 * t658, t1236, t1312, t1307, t1249, -t1311, t1250, -pkin(6) * t679 - t1096 * t641 + t1101 * t588, -pkin(6) * t682 - t1096 * t645 + t1101 * t590, -t1096 * t613 + t1101 * t579 - t1309, -pkin(6) * t603 - t1096 * t584 + t1101 * t562, t1236, t1307, -t1312, t1250, t1311, t1249, -pkin(6) * t683 - t1096 * t619 + t1101 * t575, -t1096 * t602 + t1101 * t572 - t1309, -pkin(6) * t678 - t1096 * t618 + t1101 * t574, -pkin(6) * t580 - t1096 * t564 + t1101 * t550, -t1096 * t704 + t1101 * t633, -t1096 * t647 + t1101 * t600, -t1096 * t739 + t1101 * t627, -t1096 * t703 + t1101 * t632, -t1096 * t740 + t1101 * t628, -t1096 * t768 + t1101 * t690, -pkin(6) * t605 - t1096 * t565 + t1101 * t548, -pkin(6) * t609 - t1096 * t569 + t1101 * t549, -pkin(6) * t577 - t1096 * t555 + t1101 * t545, -pkin(6) * t546 - t1096 * t544 + t1101 * t541; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1066, 0, t1067, 0, t1049, t1127, t1025, pkin(6) * t1025, t1036 * t1096 + t1129, t1012 * t1096 + t1069 * t1101, t1030 * t1096 - t1095 * t1153, t1035 * t1096 - t1129, t1028 * t1096 - t1086 * t1101, -qJDD(2) * t1101 + t1058 * t1096, pkin(6) * t1002 + t1096 * t989 + t1101 * t981, pkin(6) * t1003 + t1096 * t990 + t1101 * t982, pkin(6) * t1016 + t1096 * t972, pkin(6) * t938 - (-pkin(1) * t1101 - pkin(7) * t1096) * t972, t1096 * t865 - t1140, t1010 * t1101 + t1096 * t806, t1096 * t894 + t1101 * t950, t1096 * t864 + t1140, t1096 * t895 - t1101 * t947, t1096 * t917 - t1101 * t1152, pkin(6) * t826 + t1096 * t743 + t1101 * t760, pkin(6) * t830 + t1096 * t747 + t1101 * t778, pkin(6) * t767 + t1096 * t655 + t1101 * t748, pkin(6) * t736 + t1096 * t658 + t1101 * t695, t1239, t1314, t1308, t1251, -t1313, t1252, pkin(6) * t681 + t1096 * t588 + t1101 * t641, pkin(6) * t684 + t1096 * t590 + t1101 * t645, t1096 * t579 + t1101 * t613 + t1310, pkin(6) * t604 + t1096 * t562 + t1101 * t584, t1239, t1308, -t1314, t1252, t1313, t1251, pkin(6) * t685 + t1096 * t575 + t1101 * t619, t1096 * t572 + t1101 * t602 + t1310, pkin(6) * t680 + t1096 * t574 + t1101 * t618, pkin(6) * t581 + t1096 * t550 + t1101 * t564, t1096 * t633 + t1101 * t704, t1096 * t600 + t1101 * t647, t1096 * t627 + t1101 * t739, t1096 * t632 + t1101 * t703, t1096 * t628 + t1101 * t740, t1096 * t690 + t1101 * t768, pkin(6) * t606 + t1096 * t548 + t1101 * t565, pkin(6) * t610 + t1096 * t549 + t1101 * t569, pkin(6) * t578 + t1096 * t545 + t1101 * t555, pkin(6) * t547 + t1096 * t541 + t1101 * t544; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1072, t1073, 0, 0, (t1062 + t1139) * t1095, t1061 * t1100 + t1064 * t1095, t1074 * t1100 + t1164, (t1063 - t1146) * t1100, t1076 * t1095 + t1162, 0, pkin(1) * t1064 + pkin(7) * t1029 + t1165, -pkin(1) * t1061 + pkin(7) * t1031 - t1166, pkin(1) * t1068 + pkin(7) * t1065 + t973, pkin(1) * t1055 + pkin(7) * t973, t1095 * t942 + t1100 * t941, t1095 * t880 + t1100 * t878, t1095 * t956 + t1100 * t954, t1095 * t940 + t1100 * t939, t1095 * t957 + t1100 * t955, t1095 * t992 + t1100 * t991, -pkin(1) * t946 + pkin(7) * t861 + t1095 * t896 + t1100 * t831, pkin(1) * t1227 + pkin(7) * t883 + t1095 * t907 + t1100 * t842, -pkin(1) * t985 + pkin(7) * t807 + t1095 * t756 + t1100 * t749, pkin(1) * t986 + pkin(7) * t745 - pkin(8) * t1192 + t1100 * t808, t1213, -t1306, t1298, t1232, t1305, t1234, pkin(7) * t715 + t1095 * t653 + t1100 * t644 - t1265, pkin(7) * t720 + t1095 * t654 + t1100 * t646 + t1297, t1095 * t629 + t1100 * t622 + t1302, -pkin(1) * t693 + pkin(7) * t624 + t1095 * t607 + t1100 * t591, t1213, t1298, t1306, t1234, -t1305, t1232, pkin(7) * t721 + t1095 * t616 + t1100 * t612 - t1265, t1095 * t608 + t1100 * t601 + t1302, pkin(7) * t714 + t1095 * t614 + t1100 * t611 - t1297, -pkin(1) * t656 + pkin(7) * t593 + t1095 * t573 + t1100 * t566, t1095 * t689 + t1100 * t687, t1095 * t643 + t1100 * t642, t1095 * t676 + t1100 * t674, t1095 * t688 + t1100 * t686, t1095 * t677 + t1100 * t675, t1095 * t755 + t1100 * t754, -pkin(1) * t716 + pkin(7) * t621 + t1095 * t561 + t1100 * t559, -pkin(1) * t730 + pkin(7) * t626 + t1095 * t563 + t1100 * t560, -pkin(1) * t648 + pkin(7) * t596 + t1095 * t554 + t1100 * t551, -pkin(1) * t570 + pkin(7) * t557 + t1095 * t543 + t1100 * t542;];
tauB_reg  = t1;
