% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:16:25
% EndTime: 2019-03-09 22:16:51
% DurationCPUTime: 14.46s
% Computational Cost: add. (18870->804), mult. (41567->958), div. (0->0), fcn. (30167->12), ass. (0->403)
t346 = sin(qJ(4));
t496 = qJD(4) * t346;
t352 = cos(qJ(2));
t582 = cos(qJ(3));
t468 = t582 * t352;
t316 = qJD(1) * t468;
t347 = sin(qJ(3));
t348 = sin(qJ(2));
t498 = qJD(1) * t348;
t467 = t347 * t498;
t257 = -t316 + t467;
t534 = t257 * t346;
t628 = t496 + t534;
t517 = t347 * t352;
t273 = t348 * t582 + t517;
t259 = t273 * qJD(1);
t351 = cos(qJ(4));
t485 = qJD(2) + qJD(3);
t210 = t351 * t259 + t346 * t485;
t455 = qJDD(1) * t582;
t458 = t582 * qJD(3);
t459 = t582 * qJD(2);
t489 = qJD(1) * qJD(2);
t457 = t348 * t489;
t503 = qJD(3) * t467 + t347 * t457;
t363 = t348 * t455 + (qJD(1) * (t459 + t458) + qJDD(1) * t347) * t352 - t503;
t484 = qJDD(2) + qJDD(3);
t111 = qJD(4) * t210 + t346 * t363 - t351 * t484;
t445 = t351 * t485;
t110 = -qJD(4) * t445 + t259 * t496 - t346 * t484 - t351 * t363;
t354 = -pkin(8) - pkin(7);
t456 = t352 * t489;
t487 = t348 * qJDD(1);
t199 = qJDD(2) * pkin(2) - t354 * (-t456 - t487);
t486 = t352 * qJDD(1);
t207 = t354 * (-t457 + t486);
t289 = t354 * t348;
t275 = qJD(1) * t289;
t564 = qJD(2) * pkin(2);
t263 = t275 + t564;
t291 = t354 * t352;
t277 = qJD(1) * t291;
t497 = qJD(3) * t347;
t95 = t582 * t199 + t347 * t207 - t263 * t497 + t277 * t458;
t91 = -pkin(3) * t484 - t95;
t368 = -t110 * qJ(5) + t210 * qJD(5) - t91;
t584 = pkin(4) + pkin(5);
t17 = -t111 * t584 + t368;
t344 = qJ(2) + qJ(3);
t338 = cos(t344);
t568 = g(3) * t338;
t627 = t17 - t568;
t581 = pkin(2) * t347;
t331 = pkin(9) + t581;
t444 = pkin(2) * t458;
t428 = t351 * t444;
t383 = -t331 * t496 + t428;
t178 = pkin(3) * t259 + pkin(9) * t257;
t162 = pkin(2) * t498 + t178;
t260 = t347 * t277;
t189 = t275 * t582 + t260;
t118 = t346 * t162 + t351 * t189;
t247 = t259 * qJ(5);
t97 = t247 + t118;
t626 = -t97 + t383;
t625 = t628 * pkin(10);
t566 = t352 * pkin(2);
t333 = pkin(1) + t566;
t287 = t333 * qJD(1);
t158 = pkin(3) * t257 - pkin(9) * t259 - t287;
t261 = t582 * t277;
t184 = t347 * t263 - t261;
t164 = pkin(9) * t485 + t184;
t112 = t351 * t158 - t346 * t164;
t491 = qJD(5) - t112;
t208 = t259 * t346 - t445;
t345 = sin(qJ(6));
t350 = cos(qJ(6));
t136 = t208 * t345 + t210 * t350;
t353 = cos(qJ(1));
t513 = t353 * t346;
t349 = sin(qJ(1));
t516 = t349 * t351;
t250 = t338 * t513 - t516;
t514 = t351 * t353;
t520 = t346 * t349;
t251 = t338 * t514 + t520;
t160 = t250 * t350 - t251 * t345;
t337 = sin(t344);
t595 = -t345 * t351 + t346 * t350;
t220 = t595 * t337;
t195 = t485 * t273;
t431 = t347 * t487 - t352 * t455;
t147 = qJD(1) * t195 + t431;
t146 = qJDD(4) + t147;
t495 = qJD(4) * t351;
t322 = pkin(2) * t457;
t596 = -pkin(9) * t273 - t333;
t74 = t322 - (t316 * t485 - t503) * pkin(9) + t147 * pkin(3) + t596 * qJDD(1);
t94 = t347 * t199 - t582 * t207 + t263 * t458 + t277 * t497;
t90 = pkin(9) * t484 + t94;
t28 = -t158 * t496 - t164 * t495 - t346 * t90 + t351 * t74;
t427 = qJDD(5) - t28;
t10 = pkin(10) * t110 - t146 * t584 + t427;
t143 = t146 * qJ(5);
t253 = qJD(4) + t257;
t235 = t253 * qJD(5);
t27 = t158 * t495 - t164 * t496 + t346 * t74 + t351 * t90;
t19 = t143 + t235 + t27;
t12 = pkin(10) * t111 + t19;
t617 = -pkin(10) * t210 + t491;
t58 = -t253 * t584 + t617;
t237 = t253 * qJ(5);
t113 = t158 * t346 + t164 * t351;
t76 = pkin(10) * t208 + t113;
t66 = t237 + t76;
t34 = t345 * t58 + t350 * t66;
t4 = -qJD(6) * t34 + t350 * t10 - t345 * t12;
t248 = t338 * t520 + t514;
t249 = t338 * t516 - t513;
t594 = t248 * t350 - t249 * t345;
t183 = t582 * t263 + t260;
t163 = -pkin(3) * t485 - t183;
t388 = t210 * qJ(5) - t163;
t73 = -t208 * t584 + t388;
t624 = -g(1) * t160 - g(2) * t594 - g(3) * t220 - t73 * t136 + t4;
t33 = -t345 * t66 + t350 * t58;
t490 = qJD(6) - t253;
t623 = t33 * t490;
t622 = t34 * t490;
t621 = t625 + t626;
t180 = t346 * t189;
t565 = -pkin(10) + t331;
t269 = t565 * t351;
t429 = t346 * t444;
t478 = t584 * t259;
t575 = pkin(10) * t257;
t620 = qJD(4) * t269 + t429 - t180 - (-t162 + t575) * t351 + t478;
t121 = t346 * t178 + t351 * t183;
t106 = t247 + t121;
t619 = -pkin(9) * t496 - t106 + t625;
t171 = t346 * t183;
t583 = pkin(9) - pkin(10);
t290 = t583 * t351;
t618 = qJD(4) * t290 - t171 - (-t178 + t575) * t351 + t478;
t421 = -t350 * t208 + t210 * t345;
t549 = t421 * t136;
t492 = qJD(6) * t350;
t493 = qJD(6) * t345;
t592 = -t345 * t495 - t346 * t492 + t350 * t496 + t351 * t493;
t510 = t595 * t257 + t592;
t270 = t345 * t346 + t350 * t351;
t192 = t270 * qJD(6) - t345 * t496 - t350 * t495;
t616 = t270 * t257 - t192;
t188 = t275 * t347 - t261;
t438 = pkin(2) * t497 - t188;
t526 = t337 * t353;
t528 = t337 * t349;
t615 = g(1) * t526 + g(2) * t528;
t477 = t584 * t346;
t553 = qJ(5) * t351;
t614 = t477 - t553;
t435 = g(1) * t353 + g(2) * t349;
t613 = t136 ^ 2 - t421 ^ 2;
t612 = t568 - t615;
t452 = -t110 * t345 - t350 * t111;
t43 = qJD(6) * t136 + t452;
t611 = t136 * t490 - t43;
t42 = t350 * t110 - t345 * t111 - t208 * t492 + t210 * t493;
t591 = t421 * t490 - t42;
t442 = t352 * t459;
t446 = t347 * t485;
t194 = t348 * t446 - t352 * t458 - t442;
t538 = t210 * t351;
t541 = t208 * t346;
t551 = t111 * t351;
t552 = t110 * t346;
t610 = t273 * (qJD(4) * (-t538 + t541) - t551 + t552) + (t208 * t351 + t210 * t346) * t194;
t539 = t210 * t253;
t543 = t208 * t253;
t22 = t346 * (t111 + t539) + t351 * (t110 + t543);
t547 = t146 * t351;
t607 = pkin(9) * (t253 * t496 - t547);
t339 = t346 * qJ(5);
t433 = t351 * pkin(4) + t339;
t482 = pkin(3) + t433;
t579 = pkin(4) * t146;
t21 = t427 - t579;
t606 = t19 * t351 + t21 * t346;
t605 = -t208 * t428 - t331 * t551;
t604 = t259 * t485;
t400 = t270 * t337;
t601 = t111 - t539;
t533 = t257 * t351;
t506 = pkin(4) * t534 - qJ(5) * t533;
t599 = -t506 - t438;
t252 = pkin(4) * t496 - qJ(5) * t495 - t346 * qJD(5);
t598 = -pkin(5) * t628 - t252;
t597 = t582 * t289 + t347 * t291;
t501 = t338 * pkin(3) + t337 * pkin(9);
t271 = t347 * t348 - t468;
t545 = t194 * t346;
t403 = t273 * t495 - t545;
t531 = t273 * t346;
t590 = t111 * t271 + t146 * t531 + t195 * t208 + t253 * t403;
t215 = t347 * t289 - t291 * t582;
t471 = qJD(2) * t354;
t276 = t348 * t471;
t141 = t215 * qJD(3) + t347 * t276 - t354 * t442;
t161 = t250 * t345 + t251 * t350;
t408 = -t345 * t10 - t350 * t12 - t58 * t492 + t493 * t66;
t417 = t248 * t345 + t249 * t350;
t587 = g(1) * t161 + g(2) * t417 + g(3) * t400 + t421 * t73 + t408;
t586 = t210 ^ 2;
t585 = t253 ^ 2;
t580 = pkin(2) * t348;
t578 = pkin(4) * t259;
t577 = pkin(9) * t146;
t570 = g(2) * t354;
t567 = g(3) * t352;
t99 = t208 * pkin(4) - t388;
t563 = t257 * t99;
t26 = t27 * t351;
t30 = t111 * pkin(4) - t368;
t562 = t30 * t346;
t268 = t565 * t346;
t176 = t268 * t350 - t269 * t345;
t561 = qJD(6) * t176 + t345 * t620 + t350 * t621;
t177 = t268 * t345 + t269 * t350;
t560 = -qJD(6) * t177 - t345 * t621 + t350 * t620;
t288 = t583 * t346;
t212 = t288 * t350 - t290 * t345;
t559 = qJD(6) * t212 + t345 * t618 + t350 * t619;
t214 = t288 * t345 + t290 * t350;
t558 = -qJD(6) * t214 - t345 * t619 + t350 * t618;
t284 = -qJ(5) * t345 - t350 * t584;
t557 = qJD(6) * t284 - t345 * t76 + t350 * t617;
t285 = qJ(5) * t350 - t345 * t584;
t556 = -qJD(6) * t285 - t345 * t617 - t350 * t76;
t555 = pkin(7) * qJDD(1);
t554 = qJ(5) * t208;
t550 = t113 * t253;
t548 = t146 * t331;
t546 = t163 * t257;
t544 = t194 * t351;
t542 = t208 * t331;
t540 = t210 * t208;
t537 = t490 * t259;
t535 = t253 * t259;
t532 = t259 * t257;
t530 = t273 * t351;
t529 = t337 * t346;
t527 = t337 * t351;
t525 = t338 * t349;
t524 = t338 * t351;
t523 = t338 * t353;
t512 = t353 * t354;
t511 = -t252 + t599;
t182 = pkin(3) * t271 + t596;
t129 = t346 * t182 + t351 * t215;
t508 = t598 + t599;
t122 = t184 - t506;
t507 = t122 + t598;
t505 = t252 - t122;
t504 = t615 * t351;
t502 = g(1) * t528 - g(2) * t526;
t342 = t348 ^ 2;
t343 = t352 ^ 2;
t500 = t342 - t343;
t499 = t342 + t343;
t494 = qJD(5) * t351;
t481 = t582 * pkin(2);
t480 = t348 * t564;
t357 = qJD(1) ^ 2;
t476 = t348 * t357 * t352;
t92 = t99 * t496;
t475 = t99 * t495;
t115 = t271 * qJ(5) + t129;
t294 = t353 * t333;
t474 = pkin(3) * t523 + pkin(9) * t526 + t294;
t473 = t612 * t346;
t472 = g(1) * t523 + g(2) * t525 + g(3) * t337;
t470 = t346 * t582;
t469 = t351 * t582;
t465 = t331 * t495;
t461 = t208 ^ 2 - t586;
t454 = -t248 * pkin(4) + qJ(5) * t249;
t453 = -t250 * pkin(4) + qJ(5) * t251;
t117 = t162 * t351 - t180;
t120 = t178 * t351 - t171;
t200 = t346 * t215;
t128 = t182 * t351 - t200;
t449 = t490 ^ 2;
t448 = t253 * t346;
t447 = t253 * t351;
t443 = pkin(4) * t524 + t338 * t339 + t501;
t332 = -t481 - pkin(3);
t441 = t348 * t456;
t297 = pkin(9) * t525;
t440 = -pkin(10) * t525 + t297;
t301 = pkin(9) * t523;
t439 = -pkin(10) * t523 + t301;
t437 = g(1) * t248 - g(2) * t250;
t436 = g(1) * t249 - g(2) * t251;
t434 = g(1) * t349 - g(2) * t353;
t432 = pkin(4) * t346 - t553;
t82 = t200 + (-pkin(10) * t273 - t182) * t351 - t584 * t271;
t96 = pkin(10) * t531 + t115;
t48 = -t345 * t96 + t350 * t82;
t49 = t345 * t82 + t350 * t96;
t83 = -pkin(4) * t253 + t491;
t84 = t113 + t237;
t430 = t346 * t84 - t351 * t83;
t426 = pkin(5) * t524 + t443;
t424 = t112 * t351 + t113 * t346;
t423 = t546 - t548;
t422 = -t208 * t259 - t547;
t418 = t538 + t541;
t415 = t83 * t259 + t504 + t92;
t414 = -t112 * t533 - t113 * t534 + t26 - t472;
t412 = -t333 - t501;
t411 = -g(1) * t250 - g(2) * t248 - g(3) * t529;
t410 = -t112 * t259 + t163 * t496 + t504;
t127 = pkin(3) * t195 + pkin(9) * t194 + t480;
t140 = qJD(3) * t597 + t582 * t276 + t471 * t517;
t52 = t127 * t351 - t346 * t140 - t182 * t496 - t215 * t495;
t409 = -pkin(9) * qJD(4) * t253 - t568;
t407 = -t351 * t584 - t339;
t265 = t332 - t433;
t406 = -0.2e1 * pkin(1) * t489 - pkin(7) * qJDD(2);
t405 = -t249 * pkin(4) - qJ(5) * t248 - t512;
t402 = t273 * t496 + t544;
t401 = t251 * pkin(4) + qJ(5) * t250 + t474;
t51 = t346 * t127 + t351 * t140 + t182 * t495 - t215 * t496;
t393 = t113 * t259 + t163 * t495 + t91 * t346 + t473;
t391 = t208 * t448 - t551;
t390 = -t110 * t331 + t210 * t444;
t39 = t195 * qJ(5) + t271 * qJD(5) + t51;
t386 = -t84 * t259 - t99 * t533 - t473 - t562;
t385 = t348 * t435 - t567;
t384 = -t429 - t465;
t382 = -t411 + t28;
t356 = qJD(2) ^ 2;
t381 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t356 + t434;
t380 = pkin(1) * t357 + t435 - t555;
t379 = -t287 * t257 + t472 - t94;
t378 = -t84 * t534 - t472 + t606 + (t495 + t533) * t83;
t377 = t287 * t259 - t612 + t95;
t376 = t408 * t270 - t33 * t616 + t34 * t510 - t4 * t595 + t472;
t375 = (-g(1) * t412 + t570) * t349;
t374 = t111 * t531 + t208 * t403;
t373 = -qJD(4) * t430 + t606;
t372 = -qJD(4) * t424 - t28 * t346 + t26;
t371 = t210 * t99 + qJDD(5) - t382;
t370 = t259 * t33 + t270 * t627 + t435 * t400 - t510 * t73;
t369 = t435 * t220 - t259 * t34 + t595 * t627 + t616 * t73;
t366 = -g(1) * (-pkin(3) * t526 + t301) - g(2) * (-pkin(3) * t528 + t297) - g(3) * t501;
t365 = g(1) * t251 + g(2) * t249 + g(3) * t527 + t112 * t253 - t27;
t362 = (g(3) * pkin(10) + t435 * (pkin(3) - t407)) * t337;
t361 = -t431 - t604;
t359 = t337 * t435 * t482 - g(1) * t301 - g(2) * t297 - g(3) * t443;
t340 = t351 * pkin(5);
t292 = qJ(5) * t527;
t266 = t340 + t482;
t254 = -qJDD(1) * t333 + t322;
t236 = t340 - t265;
t169 = t270 * t273;
t168 = t595 * t273;
t148 = -t257 ^ 2 + t259 ^ 2;
t145 = -qJDD(6) + t146;
t142 = pkin(4) * t210 + t554;
t137 = t273 * t432 - t597;
t126 = t361 + t604;
t125 = t257 * t485 + t363;
t119 = -t273 * t614 + t597;
t116 = -pkin(4) * t271 - t128;
t114 = -t210 * t584 - t554;
t108 = -t120 - t578;
t102 = pkin(9) * t551;
t98 = -t117 - t578;
t79 = t146 * t271 + t195 * t253;
t67 = -t110 + t543;
t65 = t192 * t273 + t194 * t595;
t64 = t194 * t270 + t273 * t592;
t61 = t146 * t346 - t210 * t259 + t253 * t447;
t60 = -t346 * t585 - t422;
t59 = t253 * t448 + t422;
t54 = t210 * t447 - t552;
t53 = -t432 * t194 + (qJD(4) * t433 - t494) * t273 + t141;
t50 = -t110 * t530 - t210 * t402;
t47 = t614 * t194 + (qJD(4) * t407 + t494) * t273 - t141;
t46 = -pkin(4) * t195 - t52;
t38 = t145 * t270 - t259 * t421 + t490 * t510;
t37 = t136 * t259 - t145 * t595 + t490 * t616;
t32 = pkin(10) * t403 + t39;
t31 = -t110 * t271 + t146 * t530 + t195 * t210 - t253 * t402;
t29 = pkin(10) * t402 - t195 * t584 - t52;
t14 = t270 * t43 - t421 * t510;
t13 = t136 * t616 - t42 * t595;
t7 = -qJD(6) * t49 + t29 * t350 - t32 * t345;
t6 = qJD(6) * t48 + t29 * t345 + t32 * t350;
t5 = t136 * t510 + t270 * t42 - t421 * t616 - t43 * t595;
t1 = [0, 0, 0, 0, 0, qJDD(1), t434, t435, 0, 0, qJDD(1) * t342 + 0.2e1 * t441, 0.2e1 * t348 * t486 - 0.2e1 * t489 * t500, qJDD(2) * t348 + t352 * t356, qJDD(1) * t343 - 0.2e1 * t441, qJDD(2) * t352 - t348 * t356, 0, t348 * t406 + t352 * t381, -t348 * t381 + t352 * t406, 0.2e1 * t499 * t555 - t435, -g(1) * (-pkin(1) * t349 + pkin(7) * t353) - g(2) * (pkin(1) * t353 + pkin(7) * t349) + (pkin(7) ^ 2 * t499 + pkin(1) ^ 2) * qJDD(1), -t259 * t194 + t273 * t363, -t273 * t147 + t194 * t257 - t259 * t195 - t271 * t363, -t194 * t485 + t273 * t484, t147 * t271 + t195 * t257, -t195 * t485 - t271 * t484, 0, -t141 * t485 - t333 * t147 - t287 * t195 + t254 * t271 + t257 * t480 + t338 * t434 + t484 * t597, -t140 * t485 + t287 * t194 - t215 * t484 + t254 * t273 + t259 * t480 - t333 * t363 - t502, -t140 * t257 + t141 * t259 - t215 * t147 + t183 * t194 - t184 * t195 - t94 * t271 - t95 * t273 - t363 * t597 - t435, t94 * t215 + t184 * t140 + t95 * t597 - t183 * t141 - t254 * t333 - t287 * t480 - g(1) * (-t333 * t349 - t512) - g(2) * (-t349 * t354 + t294) t50, t610, t31, t374, -t590, t79, -t111 * t597 + t112 * t195 + t128 * t146 + t141 * t208 + t163 * t403 + t253 * t52 + t271 * t28 + t531 * t91 + t436, t110 * t597 - t113 * t195 - t129 * t146 + t141 * t210 - t163 * t402 - t253 * t51 - t27 * t271 + t530 * t91 - t437, t110 * t128 - t111 * t129 - t208 * t51 - t210 * t52 + t424 * t194 + (-t27 * t346 - t28 * t351 + (t112 * t346 - t113 * t351) * qJD(4)) * t273 + t502, g(1) * t512 - g(2) * t474 + t112 * t52 + t113 * t51 + t28 * t128 + t27 * t129 + t163 * t141 - t597 * t91 + t375, t50, t31, -t610, t79, t590, t374, -t99 * t545 + t111 * t137 - t116 * t146 - t195 * t83 + t208 * t53 - t21 * t271 - t253 * t46 + (t475 + t562) * t273 + t436, -t110 * t116 - t111 * t115 - t208 * t39 + t210 * t46 + t430 * t194 + (-t19 * t346 + t21 * t351 + (-t346 * t83 - t351 * t84) * qJD(4)) * t273 + t502, t99 * t544 + t110 * t137 + t115 * t146 + t19 * t271 + t195 * t84 - t210 * t53 + t253 * t39 + (-t30 * t351 + t92) * t273 + t437, -g(1) * t405 - g(2) * t401 + t19 * t115 + t21 * t116 + t30 * t137 + t84 * t39 + t83 * t46 + t99 * t53 + t375, -t136 * t64 - t169 * t42, -t136 * t65 - t168 * t42 - t169 * t43 + t421 * t64, -t136 * t195 - t145 * t169 + t271 * t42 - t490 * t64, -t168 * t43 + t421 * t65, -t145 * t168 + t195 * t421 + t271 * t43 - t490 * t65, t145 * t271 - t195 * t490, g(1) * t417 - g(2) * t161 + t119 * t43 - t48 * t145 - t17 * t168 - t33 * t195 - t4 * t271 + t421 * t47 + t490 * t7 + t73 * t65, g(1) * t594 - g(2) * t160 - t119 * t42 + t47 * t136 + t49 * t145 + t17 * t169 + t34 * t195 - t271 * t408 - t490 * t6 - t73 * t64, -t136 * t7 - t168 * t408 - t169 * t4 + t33 * t64 - t34 * t65 + t42 * t48 - t421 * t6 - t43 * t49 - t502, -t408 * t49 + t34 * t6 + t4 * t48 + t33 * t7 + t17 * t119 + t73 * t47 - g(1) * (-pkin(5) * t249 + t405) - g(2) * (pkin(5) * t251 - pkin(10) * t526 + t401) + (-g(1) * (pkin(10) * t337 + t412) + t570) * t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t476, t500 * t357, t487, t476, t486, qJDD(2), t348 * t380 - t567, g(3) * t348 + t352 * t380, 0, 0, t532, t148, t125, -t532, t126, t484, t188 * t485 + (-qJD(3) * t446 - t257 * t498 + t484 * t582) * pkin(2) + t377, t189 * t485 + (-t259 * t498 - t347 * t484 - t458 * t485) * pkin(2) + t379, -t147 * t581 - t363 * t481 + (t184 + t438) * t259 + (-t183 + t189 - t444) * t257, t183 * t188 - t184 * t189 + (t582 * t95 - t567 + t347 * t94 + (-t183 * t347 + t184 * t582) * qJD(3) + (qJD(1) * t287 + t435) * t348) * pkin(2), t54, -t22, t61, t391, t60, -t535, t332 * t111 + (-t91 - t568) * t351 + t423 * t346 + t438 * t208 + (-t117 + t384) * t253 + t410, -t332 * t110 + t423 * t351 + t438 * t210 + (t118 - t383) * t253 + t393, t117 * t210 + t118 * t208 + (t210 * t331 - t112) * t495 + (-t28 + (-t113 + t542) * qJD(4) + t390) * t346 + t414 + t605, t91 * t332 - t113 * t118 - t112 * t117 - t163 * t188 + ((-t112 * t470 + t113 * t469 + t163 * t347) * qJD(3) + t385) * pkin(2) + t372 * t331 + t366, t54, t61, t22, -t535, t59, t391, t265 * t111 + (-t30 - t568) * t351 + (-t548 + t563) * t346 - t511 * t208 + (t98 + t384) * t253 + t415, t97 * t208 + (-t98 + t465) * t210 + ((-t84 + t542) * qJD(4) + t390) * t346 + t378 + t605, t265 * t110 + (-qJD(4) * t99 + t548) * t351 + t511 * t210 + t626 * t253 + t386, t30 * t265 - t84 * t97 - t83 * t98 - t511 * t99 + ((t469 * t84 + t470 * t83) * qJD(3) + t385) * pkin(2) + t373 * t331 + t359, t13, t5, t37, t14, t38, t537, -t145 * t176 + t236 * t43 + t421 * t508 + t490 * t560 + t370, t136 * t508 + t145 * t177 - t236 * t42 - t490 * t561 + t369, -t136 * t560 + t176 * t42 - t177 * t43 - t421 * t561 + t376, -t408 * t177 + t4 * t176 + t17 * t236 - g(1) * (-t353 * t580 + t439) - g(2) * (-t349 * t580 + t440) - g(3) * (t426 + t566) + t508 * t73 + t561 * t34 + t560 * t33 + t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, t148, t125, -t532, t126, t484, t184 * t485 + t377, t183 * t485 + t379, 0, 0, t54, -t22, t61, t391, t60, -t535, -pkin(3) * t111 - t120 * t253 - t184 * t208 + (t546 - t577) * t346 + (t409 - t91) * t351 + t410, pkin(3) * t110 + t121 * t253 + t163 * t533 - t184 * t210 + t393 + t607, t120 * t210 + t121 * t208 - t102 + (-pkin(9) * t110 - t28) * t346 + (pkin(9) * t418 - t424) * qJD(4) + t414, -t91 * pkin(3) + pkin(9) * t372 - t112 * t120 - t113 * t121 - t163 * t184 + t366, t54, t61, t22, -t535, t59, t391, t108 * t253 - t111 * t482 + (t563 - t577) * t346 + t505 * t208 + (-t30 + t409) * t351 + t415, -t84 * t496 + t106 * t208 - t108 * t210 - t102 + (qJD(4) * t418 - t552) * pkin(9) + t378, -t106 * t253 - t110 * t482 - t210 * t505 + t386 - t475 - t607, pkin(9) * t373 - t84 * t106 - t83 * t108 - t30 * t482 + t505 * t99 + t359, t13, t5, t37, t14, t38, t537, -t145 * t212 + t266 * t43 + t421 * t507 + t490 * t558 + t370, t136 * t507 + t145 * t214 - t266 * t42 - t490 * t559 + t369, -t136 * t558 + t212 * t42 - t214 * t43 - t421 * t559 + t376, -g(1) * t439 - g(2) * t440 - g(3) * t426 + t17 * t266 + t4 * t212 - t214 * t408 + t33 * t558 + t34 * t559 + t507 * t73 + t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t540, -t461, t67, -t540, -t601, t146, -t163 * t210 + t382 + t550, t163 * t208 + t365, 0, 0, t540, t67, t461, t146, t601, -t540, -t142 * t208 - t371 + t550 + 0.2e1 * t579, pkin(4) * t110 - qJ(5) * t111 + (-t113 + t84) * t210 + (t83 - t491) * t208, t142 * t210 - t208 * t99 + 0.2e1 * t143 + 0.2e1 * t235 - t365, t19 * qJ(5) - t21 * pkin(4) - t99 * t142 - t83 * t113 - g(1) * t453 - g(2) * t454 - g(3) * (-pkin(4) * t529 + t292) + t491 * t84, -t549, -t613, -t591, t549, -t611, t145, -t114 * t421 - t284 * t145 + t490 * t556 - t624, -t114 * t136 + t285 * t145 - t490 * t557 - t587, t284 * t42 - t285 * t43 + (t33 - t557) * t421 + (-t34 - t556) * t136, -t408 * t285 + t4 * t284 - t73 * t114 - g(1) * (-pkin(5) * t250 + t453) - g(2) * (-pkin(5) * t248 + t454) - g(3) * (-t337 * t477 + t292) + t557 * t34 + t556 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(4) + t361 + t540, t67, -t585 - t586, -t253 * t84 + t371 - t579, 0, 0, 0, 0, 0, 0, -t145 * t350 - t210 * t421 - t345 * t449, -t136 * t210 + t145 * t345 - t350 * t449, t345 * t611 - t350 * t591, -t210 * t73 + (t4 + t622) * t350 + (-t408 - t623) * t345 + t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t549, t613, t591, -t549, -t452 + (-qJD(6) + t490) * t136, -t145, t622 + t624, t587 + t623, 0, 0;];
tau_reg  = t1;
