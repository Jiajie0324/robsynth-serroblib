% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR5_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:16:44
% EndTime: 2019-03-09 22:17:01
% DurationCPUTime: 13.89s
% Computational Cost: add. (9749->688), mult. (21322->852), div. (0->0), fcn. (15669->12), ass. (0->306)
t780 = sin(qJ(2));
t779 = sin(qJ(3));
t784 = cos(qJ(2));
t921 = t779 * t784;
t965 = cos(qJ(3));
t716 = t780 * t965 + t921;
t890 = qJD(2) + qJD(3);
t648 = t890 * t716;
t875 = t965 * t784;
t892 = qJDD(1) * t780;
t604 = qJD(1) * t648 - qJDD(1) * t875 + t779 * t892;
t603 = qJDD(4) + t604;
t781 = sin(qJ(1));
t785 = cos(qJ(1));
t853 = g(1) * t785 + g(2) * t781;
t777 = sin(qJ(6));
t778 = sin(qJ(4));
t782 = cos(qJ(6));
t783 = cos(qJ(4));
t974 = -t777 * t783 + t778 * t782;
t627 = t974 * t716;
t824 = -t779 * t780 + t875;
t647 = t890 * t824;
t794 = t647 * qJD(1);
t792 = t716 * qJDD(1) + t794;
t872 = qJD(1) * t965;
t701 = -qJD(1) * t921 - t780 * t872;
t815 = t783 * t701 - t778 * t890;
t889 = qJDD(2) + qJDD(3);
t576 = -qJD(4) * t815 + t778 * t792 - t783 * t889;
t786 = -pkin(8) - pkin(7);
t893 = qJD(1) * qJD(2);
t869 = t784 * t893;
t651 = qJDD(2) * pkin(2) - t786 * (-t869 - t892);
t870 = t780 * t893;
t891 = qJDD(1) * t784;
t659 = t786 * (-t870 + t891);
t731 = t786 * t780;
t718 = qJD(1) * t731;
t950 = qJD(2) * pkin(2);
t706 = t718 + t950;
t733 = t786 * t784;
t720 = qJD(1) * t733;
t871 = qJD(3) * t965;
t903 = qJD(3) * t779;
t857 = -t965 * t651 - t779 * t659 + t706 * t903 - t720 * t871;
t562 = -pkin(3) * t889 + t857;
t860 = t783 * t890;
t902 = qJD(4) * t778;
t575 = -qJD(4) * t860 - t701 * t902 - t778 * t889 - t783 * t792;
t801 = -t575 * qJ(5) - qJD(5) * t815 - t562;
t967 = pkin(4) + pkin(5);
t512 = -t576 * t967 + t801;
t776 = qJ(2) + qJ(3);
t770 = cos(t776);
t955 = g(3) * t770;
t1001 = t512 - t955;
t904 = qJD(1) * t780;
t699 = t779 * t904 - t784 * t872;
t934 = t699 * t778;
t1000 = t902 + t934;
t660 = -t701 * t778 - t860;
t702 = t779 * t720;
t637 = t965 * t706 + t702;
t622 = -pkin(3) * t890 - t637;
t812 = -qJ(5) * t815 - t622;
t547 = -t660 * t967 + t812;
t595 = t660 * t777 - t782 * t815;
t918 = t785 * t778;
t920 = t781 * t783;
t692 = t770 * t918 - t920;
t919 = t783 * t785;
t924 = t778 * t781;
t693 = t770 * t919 + t924;
t619 = t692 * t782 - t693 * t777;
t769 = sin(t776);
t670 = t974 * t769;
t753 = pkin(2) * t870;
t765 = t784 * pkin(2) + pkin(1);
t978 = -pkin(9) * t716 - t765;
t548 = t604 * pkin(3) - pkin(9) * t794 + qJDD(1) * t978 + t753;
t805 = t779 * t651 - t659 * t965 + t706 * t871 + t720 * t903;
t561 = pkin(9) * t889 + t805;
t729 = t765 * qJD(1);
t616 = pkin(3) * t699 + pkin(9) * t701 - t729;
t876 = t965 * t720;
t638 = t779 * t706 - t876;
t623 = pkin(9) * t890 + t638;
t901 = qJD(4) * t783;
t858 = -t783 * t548 + t778 * t561 + t616 * t902 + t623 * t901;
t834 = qJDD(5) + t858;
t506 = pkin(10) * t575 - t603 * t967 + t834;
t600 = t603 * qJ(5);
t695 = qJD(4) + t699;
t682 = t695 * qJD(5);
t817 = t778 * t548 + t783 * t561 + t616 * t901 - t623 * t902;
t514 = t600 + t682 + t817;
t508 = pkin(10) * t576 + t514;
t866 = t782 * t506 - t777 * t508;
t690 = t770 * t924 + t919;
t691 = t770 * t920 - t918;
t973 = t690 * t782 - t691 * t777;
t999 = g(1) * t619 + g(2) * t973 + g(3) * t670 + t547 * t595 - t866;
t602 = -qJDD(6) + t603;
t837 = -t782 * t660 - t777 * t815;
t998 = MDP(29) * t595 * t837 + (t595 ^ 2 - t837 ^ 2) * MDP(30) - t602 * MDP(33);
t894 = qJD(6) - t695;
t997 = t595 * t894;
t898 = qJD(6) * t782;
t899 = qJD(6) * t777;
t916 = t974 * t699 - t777 * t901 - t778 * t898 + t782 * t902 + t783 * t899;
t713 = t777 * t778 + t782 * t783;
t993 = qJD(6) - qJD(4);
t996 = (t699 - t993) * t713;
t641 = t718 * t779 - t876;
t856 = pkin(2) * t903 - t641;
t929 = t769 * t785;
t930 = t769 * t781;
t995 = g(1) * t929 + g(2) * t930;
t771 = t778 * qJ(5);
t847 = t783 * pkin(4) + t771;
t994 = t853 * t770;
t942 = t603 * t783;
t989 = pkin(9) * (t695 * t902 - t942);
t887 = pkin(3) + t847;
t986 = t894 * t837;
t820 = t713 * t769;
t964 = pkin(4) * t603;
t516 = t834 - t964;
t985 = t514 * t783 + t516 * t778;
t689 = t701 * qJ(5);
t633 = -pkin(3) * t701 + pkin(9) * t699;
t621 = pkin(2) * t904 + t633;
t642 = t718 * t965 + t702;
t913 = t778 * t621 + t783 * t642;
t565 = -t689 + t913;
t763 = pkin(2) * t779 + pkin(9);
t859 = pkin(2) * t871;
t810 = -t763 * t902 + t783 * t859;
t984 = -t565 + t810;
t933 = t699 * t783;
t909 = -pkin(4) * t934 + qJ(5) * t933;
t983 = t909 - t856;
t694 = pkin(4) * t902 - qJ(5) * t901 - t778 * qJD(5);
t982 = -pkin(5) * t1000 - t694;
t981 = t1000 * pkin(10);
t980 = t965 * t731 + t779 * t733;
t979 = t770 * pkin(3) + t769 * pkin(9);
t634 = t778 * t642;
t844 = t778 * t859;
t975 = -t844 + t634;
t577 = t783 * t616 - t778 * t623;
t895 = qJD(5) - t577;
t665 = t779 * t731 - t733 * t965;
t879 = qJD(2) * t786;
t719 = t780 * t879;
t721 = t784 * t879;
t598 = t665 * qJD(3) + t779 * t719 - t965 * t721;
t620 = t692 * t777 + t693 * t782;
t836 = t690 * t777 + t691 * t782;
t896 = pkin(10) * t815 + t895;
t535 = -t695 * t967 + t896;
t883 = t777 * t506 + t782 * t508 + t535 * t898;
t970 = -g(1) * t620 - g(2) * t836 - g(3) * t820 - t547 * t837 + t883;
t969 = t815 ^ 2;
t968 = t695 ^ 2;
t966 = pkin(9) - pkin(10);
t963 = pkin(4) * t701;
t962 = pkin(9) * t603;
t960 = pkin(10) * t699;
t757 = g(3) * t769;
t954 = g(3) * t778;
t953 = g(3) * t784;
t952 = -pkin(10) + t763;
t951 = pkin(9) * qJD(4);
t949 = qJ(5) * t660;
t948 = qJ(5) * t783;
t567 = t660 * pkin(4) - t812;
t947 = t567 * t699;
t946 = t575 * t778;
t945 = t576 * t783;
t578 = t778 * t616 + t783 * t623;
t944 = t578 * t695;
t943 = t603 * t763;
t941 = t622 * t699;
t940 = t660 * t695;
t939 = t660 * t778;
t938 = t815 * t660;
t937 = t815 * t695;
t936 = t815 * t783;
t932 = t716 * t778;
t931 = t716 * t783;
t550 = pkin(10) * t660 + t578;
t684 = t695 * qJ(5);
t540 = t550 + t684;
t926 = t777 * t540;
t917 = -t694 + t983;
t914 = t778 * t633 + t783 * t637;
t636 = -pkin(3) * t824 + t978;
t912 = t778 * t636 + t783 * t665;
t911 = t982 + t983;
t583 = t638 + t909;
t910 = t583 + t982;
t908 = t694 - t583;
t907 = t995 * t783;
t774 = t780 ^ 2;
t906 = -t784 ^ 2 + t774;
t900 = qJD(5) * t783;
t886 = t780 * t950;
t884 = t967 * t701;
t732 = t966 * t783;
t882 = -t782 * t575 + t777 * t576 + t660 * t898;
t571 = -t689 + t914;
t580 = -qJ(5) * t824 + t912;
t881 = t770 * t954 - t778 * t995;
t880 = t757 + t994;
t878 = t778 * t965;
t877 = t783 * t965;
t874 = t716 * t902;
t873 = t716 * t901;
t712 = t952 * t783;
t519 = t576 * pkin(4) - t801;
t868 = -t519 - t955;
t867 = -t562 - t955;
t865 = -t575 * t777 - t782 * t576;
t652 = t778 * t665;
t864 = t636 * t783 - t652;
t861 = t695 * t783;
t764 = -pkin(2) * t965 - pkin(3);
t855 = -g(1) * t690 + g(2) * t692;
t854 = g(1) * t691 - g(2) * t693;
t852 = g(1) * t781 - g(2) * t785;
t851 = (-t621 + t960) * t783 + t884 + t975 + t993 * t712;
t630 = t778 * t637;
t850 = t630 + (-t633 + t960) * t783 + t884 + t993 * t732;
t711 = t952 * t778;
t849 = qJD(6) * t711 + t981 + t984;
t730 = t966 * t778;
t848 = -pkin(9) * t902 + qJD(6) * t730 - t571 + t981;
t846 = pkin(4) * t778 - t948;
t843 = qJ(5) * t782 - t777 * t967;
t842 = -qJ(5) * t777 - t782 * t967;
t522 = t777 * t535 + t782 * t540;
t555 = t652 + (-pkin(10) * t716 - t636) * t783 + t967 * t824;
t564 = pkin(10) * t932 + t580;
t841 = t555 * t782 - t564 * t777;
t840 = t555 * t777 + t564 * t782;
t556 = -pkin(4) * t695 + t895;
t557 = t684 + t578;
t839 = t556 * t783 - t557 * t778;
t838 = t941 - t943;
t831 = t765 + t979;
t830 = -t556 * t701 + t567 * t902 + t907;
t829 = t577 * t701 + t622 * t902 + t907;
t588 = pkin(3) * t648 - pkin(9) * t647 + t886;
t597 = qJD(3) * t980 + t965 * t719 + t779 * t721;
t828 = t588 * t783 - t778 * t597 - t636 * t902 - t665 * t901;
t826 = -t778 * t967 + t948;
t708 = t764 - t847;
t825 = -0.2e1 * pkin(1) * t893 - pkin(7) * qJDD(2);
t822 = t647 * t778 + t873;
t821 = -t647 * t783 + t874;
t628 = t713 * t716;
t816 = t778 * t588 + t783 * t597 + t636 * t901 - t665 * t902;
t526 = t815 * t899 + t882;
t814 = t562 * t778 - t578 * t701 + t622 * t901 + t881;
t525 = t648 * qJ(5) - qJD(5) * t824 + t816;
t811 = -t519 * t778 + t557 * t701 - t567 * t933 - t881;
t788 = qJD(2) ^ 2;
t809 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t788 + t852;
t789 = qJD(1) ^ 2;
t808 = pkin(1) * t789 - pkin(7) * qJDD(1) + t853;
t807 = g(1) * t692 + g(2) * t690 + t769 * t954 - t858;
t806 = -t729 * t701 - t857 - t955 + t995;
t527 = qJD(6) * t595 + t865;
t804 = qJD(4) * t839 + t985;
t803 = -t946 - t945 + (-t936 + t939) * qJD(4);
t802 = -t567 * t815 + qJDD(5) - t807;
t521 = t535 * t782 - t926;
t800 = t1001 * t713 - t521 * t701 - t916 * t547 + t853 * t820;
t799 = t1001 * t974 + t522 * t701 + t996 * t547 + t853 * t670;
t798 = -t880 + t985 - t1000 * t557 + (t901 + t933) * t556;
t797 = g(1) * t693 + g(2) * t691 + t577 * t695 + t757 * t783 - t817;
t796 = -t729 * t699 - t805 + t880;
t793 = (-t526 * t713 - t527 * t974 + t595 * t916 - t837 * t996) * MDP(30) + (t526 * t974 + t595 * t996) * MDP(29) + ((-t575 - t940) * t783 + (-t576 + t937) * t778) * MDP(19) + (-t595 * t701 - t602 * t974 + t894 * t996) * MDP(31) + (t602 * t713 + t701 * t837 + t894 * t916) * MDP(32) + (-t815 * t861 - t946) * MDP(18) + (-t660 * t701 - t778 * t968 + t942) * MDP(21) + (t603 * t778 + t695 * t861 - t701 * t815) * MDP(20) + (t699 * t890 + t792) * MDP(13) + (-t701 * t890 - t604) * MDP(14) + (-t699 ^ 2 + t701 ^ 2) * MDP(12) + t889 * MDP(15) + (-MDP(11) * t699 + MDP(22) * t695 - MDP(33) * t894) * t701;
t791 = -g(3) * (t770 * t847 + t979) + t853 * t769 * t887 - t994 * pkin(9);
t772 = t783 * pkin(5);
t709 = t772 + t887;
t696 = -qJDD(1) * t765 + t753;
t683 = t772 - t708;
t599 = -pkin(4) * t815 + t949;
t596 = t716 * t846 - t980;
t582 = t716 * t826 + t980;
t581 = pkin(4) * t824 - t864;
t579 = t815 * t967 - t949;
t573 = -t633 * t783 + t630 + t963;
t566 = -t621 * t783 + t634 + t963;
t541 = -t575 + t940;
t539 = qJD(6) * t628 - t647 * t974 - t777 * t874 - t782 * t873;
t538 = t627 * t993 + t713 * t647;
t530 = t846 * t647 + (qJD(4) * t847 - t900) * t716 + t598;
t529 = t826 * t647 + (t900 + (-t783 * t967 - t771) * qJD(4)) * t716 - t598;
t528 = -pkin(4) * t648 - t828;
t520 = pkin(10) * t822 + t525;
t518 = pkin(10) * t821 - t648 * t967 - t828;
t1 = [(t562 * t932 - t576 * t980 + t577 * t648 + t598 * t660 + t603 * t864 + t622 * t822 + t695 * t828 + t824 * t858 + t854) * MDP(23) + (-t598 * t890 - t765 * t604 - t729 * t648 - t696 * t824 + t699 * t886 + t770 * t852 + t889 * t980) * MDP(16) + (t562 * t931 + t575 * t980 - t578 * t648 - t598 * t815 - t603 * t912 - t622 * t821 - t695 * t816 + t817 * t824 + t855) * MDP(24) + (-(qJD(6) * t841 + t518 * t777 + t520 * t782) * t894 + t840 * t602 - (-t540 * t899 + t883) * t824 + t522 * t648 + t529 * t595 + t582 * t526 + t512 * t628 + t547 * t538 + g(1) * t973 - g(2) * t619) * MDP(35) + (t647 * t890 + t716 * t889) * MDP(13) + (-g(1) * t930 + g(2) * t929 - t597 * t890 - t729 * t647 - t665 * t889 + t696 * t716 - t701 * t886 - t765 * t792) * MDP(17) + t852 * MDP(2) + t853 * MDP(3) + (t514 * t580 + t557 * t525 + t519 * t596 + t567 * t530 + t516 * t581 + t556 * t528 - g(1) * (-pkin(4) * t691 - qJ(5) * t690) - g(2) * (pkin(4) * t693 + qJ(5) * t692) + (g(1) * t786 - g(2) * t831) * t785 + (g(1) * t831 + g(2) * t786) * t781) * MDP(28) + (t780 * t825 + t784 * t809) * MDP(9) + (-t780 * t809 + t784 * t825) * MDP(10) + (qJDD(1) * t774 + 0.2e1 * t780 * t869) * MDP(4) + qJDD(1) * MDP(1) + (-t701 * t647 + t716 * t792) * MDP(11) + (qJDD(2) * t780 + t784 * t788) * MDP(6) + (qJDD(2) * t784 - t780 * t788) * MDP(7) + (t526 * t628 + t538 * t595) * MDP(29) + (-t575 * t931 + t815 * t821) * MDP(18) + (-t716 * t604 - t647 * t699 + t701 * t648 + t792 * t824) * MDP(12) + (-t648 * t890 + t824 * t889) * MDP(14) + (-t603 * t824 + t648 * t695) * MDP(22) + (t576 * t824 - t603 * t932 - t648 * t660 - t695 * t822) * MDP(21) + (t516 * t824 + t519 * t932 - t528 * t695 + t530 * t660 - t556 * t648 + t567 * t822 + t576 * t596 - t581 * t603 + t854) * MDP(25) + (t526 * t824 + t538 * t894 - t595 * t648 - t602 * t628) * MDP(31) + (-t602 * t824 - t648 * t894) * MDP(33) + (-t514 * t824 - t519 * t931 + t525 * t695 + t530 * t815 + t557 * t648 + t567 * t821 + t575 * t596 + t580 * t603 - t855) * MDP(27) + (t575 * t824 + t603 * t931 - t648 * t815 - t695 * t821) * MDP(20) + (t526 * t627 - t527 * t628 - t538 * t837 - t539 * t595) * MDP(30) + (-t527 * t824 - t539 * t894 - t602 * t627 + t648 * t837) * MDP(32) + ((t518 * t782 - t520 * t777) * t894 - t841 * t602 + t866 * t824 - t521 * t648 + t529 * t837 + t582 * t527 - t512 * t627 + t547 * t539 + g(1) * t836 - g(2) * t620 + (-t522 * t824 - t840 * t894) * qJD(6)) * MDP(34) + ((-t660 * t783 + t778 * t815) * t647 + (t946 - t945 + (t936 + t939) * qJD(4)) * t716) * MDP(19) + (-t525 * t660 - t528 * t815 - t575 * t581 - t576 * t580 + t852 * t769 + t839 * t647 + (-t514 * t778 + t516 * t783 + (-t556 * t778 - t557 * t783) * qJD(4)) * t716) * MDP(26) + 0.2e1 * (t780 * t891 - t893 * t906) * MDP(5); (t519 * t708 - t557 * t565 - t556 * t566 - t917 * t567 + (-t953 + t853 * t780 + (t556 * t878 + t557 * t877) * qJD(3)) * pkin(2) + t804 * t763 + t791) * MDP(28) + (t780 * t808 - t953) * MDP(9) + (g(3) * t780 + t784 * t808) * MDP(10) + (t565 * t660 + t566 * t815 + (-t660 * t877 - t815 * t878) * qJD(3) * pkin(2) + t803 * t763 + t798) * MDP(26) + (t708 * t575 + (-qJD(4) * t567 + t943) * t783 - t917 * t815 + t984 * t695 + t811) * MDP(27) + (t641 * t890 + (-t699 * t904 + t889 * t965 - t890 * t903) * pkin(2) + t806) * MDP(16) + qJDD(2) * MDP(8) + ((t711 * t777 + t712 * t782) * t602 + t683 * t526 - (-t777 * t851 + t782 * t849) * t894 + t911 * t595 + t799) * MDP(35) + (-(t711 * t782 - t712 * t777) * t602 + t683 * t527 - (t777 * t849 + t782 * t851) * t894 + t911 * t837 + t800) * MDP(34) + MDP(6) * t892 + (t642 * t890 + (t701 * t904 - t779 * t889 - t871 * t890) * pkin(2) + t796) * MDP(17) + (t764 * t576 + t867 * t783 + t838 * t778 + t856 * t660 + ((-qJD(4) * t763 - t621) * t783 + t975) * t695 + t829) * MDP(23) + (-t764 * t575 + t838 * t783 - t856 * t815 + (-t810 + t913) * t695 + t814) * MDP(24) + MDP(7) * t891 + (t708 * t576 + t868 * t783 + (-t943 + t947) * t778 - t917 * t660 + (-t763 * t901 + t566 - t844) * t695 + t830) * MDP(25) + t793 + (-MDP(4) * t780 * t784 + MDP(5) * t906) * t789; (pkin(9) * t804 - t519 * t887 - t556 * t573 - t557 * t571 + t567 * t908 + t791) * MDP(28) + (pkin(9) * t803 + t571 * t660 + t573 * t815 + t798) * MDP(26) + (-t567 * t901 - t571 * t695 - t575 * t887 + t815 * t908 + t811 - t989) * MDP(27) + (t573 * t695 - t576 * t887 + (t947 - t962) * t778 + t908 * t660 + (-t695 * t951 + t868) * t783 + t830) * MDP(25) + (pkin(3) * t575 + t622 * t933 + t638 * t815 + t695 * t914 + t814 + t989) * MDP(24) + (-pkin(3) * t576 + t630 * t695 - t638 * t660 + (t941 - t962) * t778 + ((-t633 - t951) * t695 + t867) * t783 + t829) * MDP(23) + ((t730 * t777 + t732 * t782) * t602 + t709 * t526 - (-t777 * t850 + t782 * t848) * t894 + t910 * t595 + t799) * MDP(35) + (-(t730 * t782 - t732 * t777) * t602 + t709 * t527 - (t777 * t848 + t782 * t850) * t894 + t910 * t837 + t800) * MDP(34) + (t637 * t890 + t796) * MDP(17) + (t638 * t890 + t806) * MDP(16) + t793; -MDP(18) * t938 + (-t660 ^ 2 + t969) * MDP(19) + t541 * MDP(20) + (-t576 - t937) * MDP(21) + t603 * MDP(22) + (t622 * t815 + t807 + t944) * MDP(23) + (t622 * t660 + t797) * MDP(24) + (-t599 * t660 - t802 + t944 + 0.2e1 * t964) * MDP(25) + (pkin(4) * t575 - qJ(5) * t576 - (t557 - t578) * t815 + (t556 - t895) * t660) * MDP(26) + (-t567 * t660 - t599 * t815 + 0.2e1 * t600 + 0.2e1 * t682 - t797) * MDP(27) + (t514 * qJ(5) - t516 * pkin(4) - t567 * t599 - t556 * t578 - g(1) * (-pkin(4) * t692 + qJ(5) * t693) - g(2) * (-pkin(4) * t690 + qJ(5) * t691) + t846 * t757 + t895 * t557) * MDP(28) + (-t526 - t986) * MDP(31) + (t527 - t997) * MDP(32) + (-t842 * t602 - t579 * t837 - (t782 * t550 + t777 * t896) * t894 + (-t843 * t894 + t522) * qJD(6) + t999) * MDP(34) + (t843 * t602 - t579 * t595 - (-t777 * t550 + t782 * t896) * t894 + (-t842 * t894 - t926) * qJD(6) + t970) * MDP(35) - t998; t541 * MDP(26) + (-t968 - t969) * MDP(27) + (-t557 * t695 + t802 - t964) * MDP(28) + (-t782 * t602 + t815 * t837) * MDP(34) + (t595 * t815 + t777 * t602) * MDP(35) - (MDP(34) * t777 + MDP(35) * t782) * t894 ^ 2 + (-t938 - t603) * MDP(25); (t882 + t986) * MDP(31) + (-t865 + t997) * MDP(32) + (t522 * t894 - t999) * MDP(34) + (t521 * t894 - t970) * MDP(35) + ((MDP(32) * t815 - MDP(34) * t540) * t782 + (MDP(31) * t815 - MDP(32) * t660 - MDP(34) * t535 + MDP(35) * t540) * t777) * qJD(6) + t998;];
tau  = t1;
