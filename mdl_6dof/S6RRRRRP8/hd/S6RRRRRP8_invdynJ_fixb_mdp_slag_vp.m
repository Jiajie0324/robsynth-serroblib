% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP8_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP8_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP8_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:56:31
% EndTime: 2019-03-10 01:57:08
% DurationCPUTime: 28.08s
% Computational Cost: add. (23673->887), mult. (56560->1131), div. (0->0), fcn. (45674->14), ass. (0->365)
t917 = -pkin(10) - pkin(9);
t1014 = qJD(3) * t917;
t907 = sin(pkin(6));
t1053 = qJD(1) * t907;
t915 = cos(qJ(3));
t916 = cos(qJ(2));
t1075 = t915 * t916;
t912 = sin(qJ(2));
t971 = pkin(2) * t912 - pkin(9) * t916;
t831 = t971 * t1053;
t815 = t915 * t831;
t1004 = t912 * t1053;
t908 = cos(pkin(6));
t1052 = qJD(1) * t908;
t1028 = pkin(1) * t1052;
t830 = -pkin(8) * t1004 + t1028 * t916;
t911 = sin(qJ(3));
t1164 = -t830 * t911 + t815 + (pkin(3) * t912 - pkin(10) * t1075) * t1053 - t915 * t1014;
t1058 = t915 * t830 + t911 * t831;
t1051 = qJD(1) * t916;
t1003 = t907 * t1051;
t976 = t911 * t1003;
t1163 = pkin(10) * t976 + t911 * t1014 - t1058;
t1032 = qJD(3) + qJD(4);
t910 = sin(qJ(4));
t914 = cos(qJ(4));
t846 = t910 * t911 - t914 * t915;
t777 = t1032 * t846;
t790 = t846 * t1003;
t1133 = -t777 + t790;
t847 = t910 * t915 + t911 * t914;
t1061 = (-t1003 + t1032) * t847;
t913 = cos(qJ(5));
t1042 = qJD(5) * t913;
t890 = qJD(2) + t1052;
t809 = -t1004 * t911 + t890 * t915;
t810 = t1004 * t915 + t890 * t911;
t959 = t914 * t809 - t810 * t910;
t1150 = t959 * t913;
t1162 = t1042 - t1150;
t872 = t917 * t911;
t873 = t917 * t915;
t957 = t872 * t914 + t873 * t910;
t1161 = qJD(4) * t957 + t1163 * t914 - t1164 * t910;
t1048 = qJD(3) * t911;
t833 = pkin(8) * t1003 + t912 * t1028;
t1132 = -t833 + (t1048 - t976) * pkin(3);
t1034 = qJDD(1) * t912;
t1036 = qJD(1) * qJD(2);
t998 = t916 * t1036;
t1160 = -t998 - t1034;
t1144 = -qJD(5) + t959;
t909 = sin(qJ(5));
t1156 = t1144 * t909;
t1043 = qJD(5) * t909;
t1047 = qJD(3) * t915;
t1145 = t1160 * t907;
t1035 = qJDD(1) * t908;
t889 = qJDD(2) + t1035;
t973 = qJD(3) * t1004;
t723 = t890 * t1047 - t1145 * t915 + (t889 - t973) * t911;
t978 = t890 * t1048 - t1145 * t911 + t915 * t973;
t950 = t915 * t889 - t978;
t923 = t914 * t723 + t910 * t950;
t919 = qJD(4) * t959 + t923;
t871 = -qJD(3) + t1003;
t952 = -qJD(4) + t871;
t1146 = -qJD(5) * t952 + t919;
t1033 = qJDD(1) * t916;
t888 = t907 * t1033;
t1031 = qJDD(3) - t888;
t999 = t912 * t1036;
t975 = t907 * t999;
t823 = t975 + t1031;
t932 = qJDD(4) + t823;
t958 = t809 * t910 + t914 * t810;
t621 = t1043 * t958 - t1146 * t913 - t909 * t932;
t619 = t621 * t909;
t622 = t1042 * t958 + t1146 * t909 - t913 * t932;
t993 = t910 * t723 - t914 * t950;
t652 = qJD(4) * t958 + t993;
t649 = qJDD(5) + t652;
t646 = t909 * t649;
t647 = t913 * t649;
t704 = t909 * t958 + t913 * t952;
t706 = -t909 * t952 + t913 * t958;
t1159 = t932 * MDP(22) - t993 * MDP(21) + (t959 * t871 + t923) * MDP(20) - t959 ^ 2 * MDP(19) + (-MDP(18) * t959 + MDP(19) * t958 - MDP(21) * t871 + MDP(29) * t1144) * t958 + (t1162 * t706 - t619) * MDP(25) + (-t1144 * t1162 - t706 * t958 + t646) * MDP(27) + (-t1144 * t1156 + t704 * t958 + t647) * MDP(28) + (t1156 * t706 - t1162 * t704 - t621 * t913 - t909 * t622) * MDP(26);
t1158 = pkin(11) * t1004 - t1161;
t1148 = -t1061 * pkin(4) + pkin(11) * t1133 - t1132;
t788 = pkin(9) * t890 + t833;
t956 = -pkin(2) * t916 - pkin(9) * t912 - pkin(1);
t822 = t956 * t907;
t801 = qJD(1) * t822;
t719 = -t788 * t911 + t915 * t801;
t694 = -pkin(10) * t810 + t719;
t685 = -pkin(3) * t871 + t694;
t720 = t788 * t915 + t801 * t911;
t695 = pkin(10) * t809 + t720;
t690 = t910 * t695;
t644 = t914 * t685 - t690;
t640 = pkin(4) * t952 - t644;
t613 = t704 * pkin(5) - t706 * qJ(6) + t640;
t1157 = t1144 * t613;
t1111 = pkin(5) * t913;
t1153 = pkin(4) + t1111;
t1152 = t613 * t959;
t1151 = t640 * t959;
t792 = t872 * t910 - t873 * t914;
t1147 = qJD(4) * t792 + t1163 * t910 + t1164 * t914;
t1046 = qJD(4) * t910;
t691 = t914 * t695;
t654 = t694 * t910 + t691;
t972 = pkin(3) * t1046 - t654;
t681 = pkin(4) * t958 - pkin(11) * t959;
t787 = -pkin(2) * t890 - t830;
t741 = -pkin(3) * t809 + t787;
t1117 = cos(qJ(1));
t1013 = t907 * t1117;
t1116 = sin(qJ(1));
t1005 = t1116 * t916;
t1008 = t1117 * t912;
t841 = t1008 * t908 + t1005;
t906 = qJ(3) + qJ(4);
t901 = sin(t906);
t902 = cos(t906);
t771 = -t901 * t1013 + t841 * t902;
t1012 = t907 * t1116;
t1006 = t1116 * t912;
t1007 = t1117 * t916;
t843 = -t1006 * t908 + t1007;
t775 = t1012 * t901 + t843 * t902;
t1079 = t907 * t912;
t819 = t1079 * t902 + t901 * t908;
t941 = g(1) * t775 + g(2) * t771 + g(3) * t819;
t1045 = qJD(4) * t914;
t1023 = pkin(1) * t1035;
t1027 = pkin(1) * qJD(2) * t908;
t982 = qJD(1) * t1027;
t1015 = -pkin(8) * t888 - t912 * t1023 - t916 * t982;
t931 = -pkin(8) * t975 - t1015;
t745 = pkin(9) * t889 + t931;
t951 = qJD(2) * t971;
t747 = (qJD(1) * t951 + qJDD(1) * t956) * t907;
t924 = -qJD(3) * t720 - t911 * t745 + t915 * t747;
t631 = pkin(3) * t823 - pkin(10) * t723 + t924;
t949 = -t801 * t1047 + t1048 * t788 - t915 * t745 - t911 * t747;
t636 = pkin(10) * t950 - t949;
t980 = t685 * t1045 - t695 * t1046 + t910 * t631 + t914 * t636;
t1143 = -t741 * t959 + t941 - t980;
t966 = pkin(5) * t909 - qJ(6) * t913;
t1142 = pkin(5) * t1043 - qJ(6) * t1042 - qJD(6) * t909 - t959 * t966;
t840 = -t1007 * t908 + t1006;
t725 = t771 * t909 - t840 * t913;
t726 = t771 * t913 + t840 * t909;
t1138 = pkin(5) * t958;
t1137 = qJ(6) * t958;
t1078 = t907 * t916;
t842 = t1005 * t908 + t1008;
t1129 = g(1) * t842 + g(2) * t840;
t935 = g(3) * t1078 - t1129;
t1136 = t935 * t901;
t1104 = qJ(6) * t649;
t594 = pkin(11) * t932 + t980;
t1107 = t889 * pkin(2);
t977 = -pkin(8) * t1145 - t916 * t1023 + t912 * t982;
t746 = t977 - t1107;
t680 = -pkin(3) * t950 + t746;
t598 = t652 * pkin(4) - pkin(11) * t919 + t680;
t645 = t910 * t685 + t691;
t641 = -pkin(11) * t952 + t645;
t658 = -pkin(4) * t959 - pkin(11) * t958 + t741;
t585 = t658 * t1042 - t1043 * t641 + t913 * t594 + t909 * t598;
t582 = -qJD(6) * t1144 + t1104 + t585;
t1112 = pkin(5) * t649;
t981 = t641 * t1042 + t658 * t1043 + t909 * t594 - t913 * t598;
t584 = qJDD(6) + t981 - t1112;
t1135 = t582 * t913 + t584 * t909;
t1074 = -t1142 - t972;
t838 = t1079 * t915 + t908 * t911;
t1115 = pkin(1) * t912;
t1056 = pkin(8) * t1078 + t908 * t1115;
t821 = pkin(9) * t908 + t1056;
t990 = -t821 * t911 + t915 * t822;
t702 = -pkin(3) * t1078 - pkin(10) * t838 + t990;
t1059 = t915 * t821 + t911 * t822;
t837 = t1079 * t911 - t908 * t915;
t712 = -pkin(10) * t837 + t1059;
t1064 = t910 * t702 + t914 * t712;
t661 = -pkin(11) * t1078 + t1064;
t754 = t914 * t837 + t838 * t910;
t755 = -t837 * t910 + t838 * t914;
t1114 = pkin(3) * t837;
t891 = pkin(8) * t1079;
t820 = t891 + (-pkin(1) * t916 - pkin(2)) * t908;
t758 = t820 + t1114;
t675 = pkin(4) * t754 - pkin(11) * t755 + t758;
t1134 = t913 * t661 + t909 * t675;
t1063 = pkin(4) * t1004 + t1147;
t899 = pkin(3) * t915 + pkin(2);
t765 = pkin(4) * t846 - pkin(11) * t847 - t899;
t1060 = t909 * t765 + t913 * t792;
t1131 = -t765 * t1042 + t1043 * t792 + t1148 * t909 + t1158 * t913;
t897 = pkin(3) * t910 + pkin(11);
t1000 = t897 * t1043;
t1024 = pkin(3) * t1045;
t1130 = t913 * t1024 - t1000;
t1128 = -t941 + t1135;
t608 = -t641 * t909 + t658 * t913;
t1037 = qJD(6) - t608;
t603 = pkin(5) * t1144 + t1037;
t1127 = t613 * t1043 + t603 * t958;
t818 = -t1079 * t901 + t902 * t908;
t1090 = t818 * t909;
t774 = -t1012 * t902 + t843 * t901;
t1094 = t774 * t909;
t989 = -t902 * t1013 - t841 * t901;
t1095 = t989 * t909;
t1017 = g(1) * t1094 - g(2) * t1095 - g(3) * t1090;
t979 = t695 * t1045 + t685 * t1046 - t914 * t631 + t910 * t636;
t595 = -pkin(4) * t932 + t979;
t587 = t622 * pkin(5) + t621 * qJ(6) - t706 * qJD(6) + t595;
t609 = t641 * t913 + t658 * t909;
t604 = -qJ(6) * t1144 + t609;
t1126 = -t587 * t909 - t604 * t958 + t1017;
t1125 = t640 * t1043 - t608 * t958;
t1124 = t640 * t1042 + t595 * t909 + t609 * t958 - t1017;
t942 = g(1) * t774 - g(2) * t989 - g(3) * t818;
t1122 = -t741 * t958 + t942 - t979;
t1050 = qJD(2) * t912;
t1002 = t907 * t1050;
t1049 = qJD(2) * t916;
t1001 = t907 * t1049;
t780 = -qJD(3) * t837 + t1001 * t915;
t832 = t907 * t951;
t1077 = t908 * t916;
t834 = (pkin(1) * t1077 - t891) * qJD(2);
t925 = -qJD(3) * t1059 + t915 * t832 - t834 * t911;
t668 = pkin(3) * t1002 - pkin(10) * t780 + t925;
t779 = qJD(3) * t838 + t1001 * t911;
t948 = t822 * t1047 - t1048 * t821 + t911 * t832 + t915 * t834;
t673 = -pkin(10) * t779 + t948;
t947 = t702 * t1045 - t1046 * t712 + t910 * t668 + t914 * t673;
t600 = pkin(11) * t1002 + t947;
t678 = -qJD(4) * t754 - t779 * t910 + t780 * t914;
t679 = qJD(4) * t755 + t914 * t779 + t780 * t910;
t835 = pkin(8) * t1001 + t912 * t1027;
t742 = pkin(3) * t779 + t835;
t624 = pkin(4) * t679 - pkin(11) * t678 + t742;
t1121 = -qJD(5) * t1134 - t600 * t909 + t624 * t913;
t1118 = t706 ^ 2;
t1113 = pkin(3) * t914;
t1110 = pkin(11) * t649;
t1106 = pkin(11) * qJD(5);
t1105 = MDP(6) * t907;
t1103 = t603 * t909;
t1102 = t609 * t1144;
t1101 = t622 * t913;
t1100 = t704 * t706;
t1099 = t704 * t909;
t1098 = t706 * t913;
t1093 = t809 * t871;
t1092 = t810 * t871;
t1087 = t841 * t911;
t1086 = t847 * t909;
t1085 = t847 * t913;
t1084 = t889 * MDP(8);
t1083 = t897 * t649;
t1082 = t902 * t909;
t1081 = t902 * t913;
t903 = t907 ^ 2;
t1080 = t903 * qJD(1) ^ 2;
t1076 = t913 * t916;
t1073 = qJ(6) * t1061 + qJD(6) * t846 - t1131;
t1072 = -pkin(5) * t1061 + qJD(5) * t1060 + t1148 * t913 - t1158 * t909;
t1071 = t913 * t644 + t909 * t681;
t752 = -t1004 * t913 - t790 * t909;
t753 = t1004 * t909 - t790 * t913;
t967 = qJ(6) * t909 + t1111;
t1070 = -pkin(5) * t752 + qJ(6) * t753 - t966 * t777 + (qJD(5) * t967 - qJD(6) * t913) * t847 + t1063;
t655 = t694 * t914 - t690;
t669 = pkin(3) * t810 + t681;
t1068 = t913 * t655 + t909 * t669;
t1057 = t1142 - t645;
t904 = t912 ^ 2;
t1055 = -t916 ^ 2 + t904;
t1044 = qJD(5) * t897;
t1040 = qJD(2) - t890;
t1030 = 0.2e1 * t903;
t1022 = t916 * t1080;
t1021 = t907 * t1076;
t876 = t909 * t1078;
t1019 = qJ(6) * t1095 + t1153 * t989;
t1018 = -qJ(6) * t1094 - t1153 * t774;
t1016 = qJ(6) * t1090 + t1153 * t818;
t1011 = t911 * t1117;
t1010 = t911 * t1116;
t1009 = t915 * t1117;
t602 = t603 * t1042;
t996 = qJDD(4) + t1031;
t995 = t702 * t914 - t910 * t712;
t992 = t777 * t909 + t752;
t991 = -t777 * t913 - t753;
t988 = -t907 * t1011 + t841 * t915;
t985 = t890 + t1052;
t983 = t889 + t1035;
t729 = t775 * t909 - t842 * t913;
t970 = -g(1) * t725 + g(2) * t729;
t730 = t775 * t913 + t842 * t909;
t969 = g(1) * t726 - g(2) * t730;
t968 = g(1) * t989 + g(2) * t774;
t660 = pkin(4) * t1078 - t995;
t963 = -t1083 - t1151;
t961 = -t661 * t909 + t675 * t913;
t960 = t765 * t913 - t792 * t909;
t862 = -pkin(4) - t967;
t955 = pkin(4) * t902 + pkin(11) * t901 + t899;
t953 = -t712 * t1045 - t702 * t1046 + t668 * t914 - t910 * t673;
t732 = t755 * t909 + t1021;
t946 = t675 * t1042 - t1043 * t661 + t913 * t600 + t909 * t624;
t748 = -t1082 * t840 - t841 * t913;
t750 = -t1082 * t842 - t843 * t913;
t802 = -t1079 * t913 + t876 * t902;
t944 = g(1) * t750 + g(2) * t748 + g(3) * t802;
t749 = -t1081 * t840 + t841 * t909;
t751 = -t1081 * t842 + t843 * t909;
t803 = (t1076 * t902 + t909 * t912) * t907;
t943 = -g(1) * t751 - g(2) * t749 - g(3) * t803;
t940 = -t1024 * t1144 + t1083;
t939 = -t1009 * t907 - t1087;
t783 = t1012 * t915 - t843 * t911;
t938 = t1042 * t847 - t992;
t937 = t1043 * t847 - t991;
t934 = -t587 + t942;
t933 = -t595 + t942;
t930 = -pkin(9) * t823 - t787 * t871;
t929 = t602 + t1128;
t601 = -pkin(4) * t1002 - t953;
t768 = t819 * t909 + t1021;
t928 = g(1) * t729 + g(2) * t725 + g(3) * t768 - t981;
t922 = -pkin(9) * qJD(3) * t871 + t746 + t935;
t769 = t819 * t913 - t876;
t921 = -g(1) * t730 - g(2) * t726 - g(3) * t769 + t585;
t920 = t613 * t706 + qJDD(6) - t928;
t898 = -pkin(4) - t1113;
t844 = t862 - t1113;
t784 = t1010 * t907 + t843 * t915;
t733 = t755 * t913 - t876;
t716 = t847 * t966 - t957;
t693 = -pkin(5) * t846 - t960;
t692 = qJ(6) * t846 + t1060;
t662 = pkin(5) * t706 + qJ(6) * t704;
t651 = -qJD(5) * t876 - t1002 * t913 + t1042 * t755 + t678 * t909;
t650 = qJD(5) * t732 - t1002 * t909 - t913 * t678;
t625 = pkin(5) * t732 - qJ(6) * t733 + t660;
t615 = -pkin(5) * t754 - t961;
t614 = qJ(6) * t754 + t1134;
t611 = t644 * t909 - t681 * t913 - t1138;
t610 = t1071 + t1137;
t607 = t655 * t909 - t669 * t913 - t1138;
t606 = t1068 + t1137;
t605 = -t1144 * t704 - t621;
t590 = pkin(5) * t651 + qJ(6) * t650 - qJD(6) * t733 + t601;
t589 = -pkin(5) * t679 - t1121;
t588 = qJ(6) * t679 + qJD(6) * t754 + t946;
t1 = [(-t679 * t1032 - t754 * t996) * MDP(21) + (g(1) * t988 - g(2) * t784 + t746 * t837 + t787 * t779 - t835 * t809 - t820 * t950 + t990 * t823 - t925 * t871) * MDP(16) + (t678 * t1032 + t755 * t996) * MDP(20) + (-g(1) * t1087 - g(2) * t783 - t1059 * t823 + t820 * t723 + t746 * t838 + t787 * t780 + t835 * t810 + t948 * t871) * MDP(17) + (-t1121 * t1144 + t595 * t732 + t601 * t704 + t608 * t679 + t660 * t622 + t640 * t651 + t961 * t649 - t754 * t981 + t969) * MDP(30) + (t1144 * t589 - t584 * t754 + t587 * t732 + t590 * t704 - t603 * t679 + t613 * t651 - t615 * t649 + t622 * t625 + t969) * MDP(32) + (-t1144 * t588 + t582 * t754 - t587 * t733 - t590 * t706 + t604 * t679 + t613 * t650 + t614 * t649 + t621 * t625 - t970) * MDP(34) + (-t1144 * t679 + t649 * t754) * MDP(29) + (t1144 * t651 - t622 * t754 - t649 * t732 - t679 * t704) * MDP(28) + (t1144 * t650 - t621 * t754 + t649 * t733 + t679 * t706) * MDP(27) + (-t1134 * t649 + t1144 * t946 - t585 * t754 + t595 * t733 + t601 * t706 - t609 * t679 - t660 * t621 - t640 * t650 + t970) * MDP(31) + (t678 * t958 + t755 * t919) * MDP(18) + (-t1002 * t645 - t1064 * t932 + t1078 * t980 + t741 * t678 + t680 * t755 + t742 * t958 + t758 * t919 + t947 * t952 + t968) * MDP(24) + (0.2e1 * (t1033 * t912 - t1036 * t1055) * MDP(5) + (qJDD(1) * t904 + 0.2e1 * t912 * t998) * MDP(4)) * t903 + (g(1) * t1116 - g(2) * t1117) * MDP(2) + (g(1) * t1117 + g(2) * t1116) * MDP(3) + (-t582 * t732 + t584 * t733 - t588 * t704 + t589 * t706 - t603 * t650 - t604 * t651 - t614 * t622 - t615 * t621 - t968) * MDP(33) + (-t835 * t890 - t891 * t889 - t977 * t908 + g(1) * t841 - g(2) * t843 + (t889 * t1077 + (-t999 + t1033) * t1030) * pkin(1)) * MDP(9) + (-t780 * t871 + t823 * t838) * MDP(13) + (t779 * t871 - t837 * t823) * MDP(14) + (-t723 * t837 - t810 * t779 + t780 * t809 + t838 * t950) * MDP(12) + (-t755 * t652 + t678 * t959 - t679 * t958 - t754 * t919) * MDP(19) + ((-g(1) * (pkin(3) * t1011 + pkin(8) * t1117) - g(2) * (pkin(3) * t1010 + pkin(8) * t1116)) * MDP(35) + (t959 * t1050 + t652 * t916 + (-t1050 * t754 + t679 * t916) * qJD(1)) * MDP(21) + (t1050 * t809 - t916 * t950) * MDP(14) + (t1050 * t719 - t916 * t924) * MDP(16) + (t1050 * t810 - t723 * t916) * MDP(13) + (-t919 * t916 + t958 * t1050 + (t1050 * t755 - t678 * t916) * qJD(1)) * MDP(20) + (-g(1) * t1009 - t1050 * t720 - t916 * t949) * MDP(17) + (-t1050 * t985 + t916 * t983) * MDP(7) + (-t1050 * t871 - t823 * t916) * MDP(15) + (-t996 * t916 + (-0.2e1 * t1003 + t1032) * t1050) * MDP(22)) * t907 + (g(1) * t771 - g(2) * t775 + t1002 * t644 + t1078 * t979 + t758 * t652 + t741 * t679 + t680 * t754 - t742 * t959 + t932 * t995 - t952 * t953) * MDP(23) + (t582 * t614 + t604 * t588 + t587 * t625 + t613 * t590 + t584 * t615 + t603 * t589 - g(1) * (-t1116 * pkin(1) - pkin(4) * t771 - pkin(5) * t726 + pkin(11) * t989 - qJ(6) * t725 + t840 * t917 - t841 * t899) - g(2) * (t1117 * pkin(1) + t775 * pkin(4) + t730 * pkin(5) + t774 * pkin(11) + t729 * qJ(6) - t842 * t917 + t843 * t899)) * MDP(35) + qJDD(1) * MDP(1) + (t723 * t838 + t780 * t810) * MDP(11) + (pkin(1) * t1030 * t1160 - g(1) * t840 + g(2) * t842 - t1056 * t889 - t834 * t890 - t931 * t908) * MDP(10) + t908 * t1084 + (t1049 * t985 + t912 * t983) * t1105 + (-t621 * t733 - t650 * t706) * MDP(25) + (t621 * t732 - t622 * t733 + t650 * t704 - t651 * t706) * MDP(26); (-t1092 * t915 + t723 * t911) * MDP(11) + ((t723 - t1093) * t915 + (t950 + t1092) * t911) * MDP(12) + (t1061 * t604 - t1070 * t706 - t1073 * t1144 - t1085 * t587 + t582 * t846 + t613 * t937 + t621 * t716 + t649 * t692 - t944) * MDP(34) + (-t1061 * t603 + t1070 * t704 + t1072 * t1144 + t1086 * t587 - t584 * t846 + t613 * t938 + t622 * t716 - t649 * t693 + t943) * MDP(32) + (t1061 * t706 + t1144 * t937 - t621 * t846 + t647 * t847) * MDP(27) + (-t1061 * t1144 + t649 * t846) * MDP(29) + (-t1061 * t704 + t1144 * t938 - t622 * t846 - t646 * t847) * MDP(28) + (-t1060 * t649 - t1061 * t609 + t1063 * t706 + t595 * t1085 - t1131 * t1144 - t585 * t846 + t621 * t957 - t937 * t640 + t944) * MDP(31) + (-t1085 * t621 - t706 * t937) * MDP(25) + (t960 * t649 - t981 * t846 - t957 * t622 + t595 * t1086 - ((-qJD(5) * t792 - t1148) * t913 + (-qJD(5) * t765 + t1158) * t909) * t1144 + t1063 * t704 + t1061 * t608 + t938 * t640 + t943) * MDP(30) + t1084 + (-pkin(2) * t723 - t1058 * t871 - t833 * t810 + t911 * t922 + t915 * t930) * MDP(17) + (-pkin(2) * t978 + t815 * t871 + t833 * t809 + (-t830 * t871 + t930) * t911 + (-t922 + t1107) * t915) * MDP(16) + (pkin(1) * t1022 + g(1) * t843 + g(2) * t841 + t830 * t890 + (pkin(8) * t1036 + g(3)) * t1079 + t1015) * MDP(10) + (t1080 * t1115 + t833 * t890 - t935 - t977) * MDP(9) + (t871 * t1048 + t823 * t915 + (-t871 * t911 * t916 - t809 * t912) * t1053) * MDP(14) + (t992 * t706 - t991 * t704 + (t619 - t1101 + (-t1098 + t1099) * qJD(5)) * t847) * MDP(26) + (t1061 * t952 - t846 * t932) * MDP(21) + (-t1133 * t952 + t847 * t932) * MDP(20) + (t871 * MDP(15) - t719 * MDP(16) + t720 * MDP(17) - MDP(20) * t958 - MDP(21) * t959 + MDP(22) * t952 - MDP(23) * t644 + MDP(24) * t645 - MDP(7) * t1040) * t1004 + (-t1061 * t958 + t1133 * t959 - t847 * t652 - t846 * t919) * MDP(19) + (t1061 * t741 - t1132 * t959 + t1147 * t952 - t899 * t652 + t680 * t846 - t935 * t902 + t957 * t932) * MDP(23) + t888 * MDP(7) + (-t871 * t1047 + t911 * t823 + (t1075 * t871 - t810 * t912) * t1053) * MDP(13) + (t582 * t692 + t587 * t716 + t584 * t693 - g(1) * (pkin(5) * t751 + qJ(6) * t750 - t843 * t917) - g(2) * (pkin(5) * t749 + qJ(6) * t748 - t841 * t917) + t1070 * t613 + t1073 * t604 + t1072 * t603 + t1129 * t955 + (-pkin(5) * t803 - qJ(6) * t802 - (-t912 * t917 + t916 * t955) * t907) * g(3)) * MDP(35) + (-t621 * t693 - t622 * t692 + t1072 * t706 - t1073 * t704 + t992 * t604 + t991 * t603 - t1136 + (-t582 * t909 + t584 * t913 + (-t604 * t913 - t1103) * qJD(5)) * t847) * MDP(33) + (t1133 * t958 + t919 * t847) * MDP(18) - t912 * MDP(4) * t1022 + (t1132 * t958 + t1133 * t741 + t1161 * t952 + t680 * t847 - t792 * t932 - t899 * t919 + t1136) * MDP(24) + t1055 * MDP(5) * t1080 + (t1040 * t1051 + t1034) * t1105; (t950 - t1092) * MDP(14) + (t723 + t1093) * MDP(13) + (-t898 * t621 + t963 * t913 + t972 * t706 - (t1068 - t1130) * t1144 + t1124) * MDP(31) + (t621 * t844 - (-t606 - t1000) * t1144 + t1074 * t706 + (t940 + t1157) * t913 + t1126) * MDP(34) + (-g(1) * t783 - g(2) * t939 + g(3) * t837 - t720 * t871 - t787 * t810 + t924) * MDP(16) + (t898 * t622 + t972 * t704 + (-(t655 - t1024) * t1144 + t963) * t909 + (-(-t669 - t1044) * t1144 + t933) * t913 + t1125) * MDP(30) + (-t654 * t952 + (t1046 * t952 + t810 * t959 + t914 * t932) * pkin(3) + t1122) * MDP(23) + (-t607 * t1144 + t622 * t844 - t1074 * t704 + (-t940 - t1152) * t909 + (t1044 * t1144 + t934) * t913 + t1127) * MDP(32) + (t606 * t704 - t607 * t706 + (-t704 * t1024 - t603 * t959 + (qJD(5) * t706 - t622) * t897) * t913 + (t706 * t1024 + t604 * t959 - t621 * t897 + (t704 * t897 - t604) * qJD(5)) * t909 + t929) * MDP(33) + (-t655 * t952 + (t1045 * t952 - t810 * t958 - t910 * t932) * pkin(3) + t1143) * MDP(24) + (g(1) * t784 + g(2) * t988 + g(3) * t838 - t719 * t871 - t787 * t809 + t949) * MDP(17) + (t587 * t844 + t1024 * t1103 - t603 * t607 - g(1) * (pkin(3) * t783 + t775 * pkin(11) + t1018) - g(2) * (pkin(3) * t939 + t771 * pkin(11) + t1019) - g(3) * (pkin(11) * t819 + t1016 - t1114) - t1074 * t613 + (t602 + t1135) * t897 + (-t606 + t1130) * t604) * MDP(35) + t823 * MDP(15) + (-t809 ^ 2 + t810 ^ 2) * MDP(12) - t810 * t809 * MDP(11) + t1159; (-t645 * t952 + t1122) * MDP(23) + (-t644 * t952 + t1143) * MDP(24) + (-pkin(4) * t622 - t645 * t704 + (-t1144 * t644 - t1110 - t1151) * t909 + (-(-t681 - t1106) * t1144 + t933) * t913 + t1125) * MDP(30) + (pkin(4) * t621 - t1071 * t1144 - t645 * t706 - t640 * t1150 + (-t1043 * t1144 - t647) * pkin(11) + t1124) * MDP(31) + (-t611 * t1144 + t622 * t862 + (-t1110 - t1152) * t909 + t1057 * t704 + (t1106 * t1144 + t934) * t913 + t1127) * MDP(32) + (-t603 * t1150 + t610 * t704 - t611 * t706 + t604 * t1156 + (-t619 - t1101 + (t1098 + t1099) * qJD(5)) * pkin(11) + t929) * MDP(33) + (t621 * t862 - (-pkin(11) * t1043 - t610) * t1144 - t1057 * t706 + (t1110 + t1157) * t913 + t1126) * MDP(34) + (t587 * t862 - t604 * t610 - t603 * t611 - g(1) * t1018 - g(2) * t1019 - g(3) * t1016 + t1057 * t613 + ((t603 * t913 - t604 * t909) * qJD(5) + t1128) * pkin(11)) * MDP(35) + t1159; MDP(25) * t1100 + (-t704 ^ 2 + t1118) * MDP(26) + t605 * MDP(27) + (-t1144 * t706 - t622) * MDP(28) + t649 * MDP(29) + (-t640 * t706 - t1102 + t928) * MDP(30) + (-t1144 * t608 + t640 * t704 - t921) * MDP(31) + (-t662 * t704 - t1102 + 0.2e1 * t1112 - t920) * MDP(32) + (pkin(5) * t621 - qJ(6) * t622 + (t604 - t609) * t706 + (t603 - t1037) * t704) * MDP(33) + (0.2e1 * t1104 - t613 * t704 + t662 * t706 - (0.2e1 * qJD(6) - t608) * t1144 + t921) * MDP(34) + (t582 * qJ(6) - t584 * pkin(5) - t613 * t662 - t603 * t609 - g(1) * (-pkin(5) * t729 + qJ(6) * t730) - g(2) * (-pkin(5) * t725 + qJ(6) * t726) - g(3) * (-pkin(5) * t768 + qJ(6) * t769) + t1037 * t604) * MDP(35); (t1100 - t649) * MDP(32) + t605 * MDP(33) + (-t1144 ^ 2 - t1118) * MDP(34) + (t1144 * t604 - t1112 + t920) * MDP(35);];
tau  = t1;
