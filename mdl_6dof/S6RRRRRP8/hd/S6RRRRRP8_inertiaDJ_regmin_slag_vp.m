% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP8_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:55:49
% EndTime: 2019-03-10 01:56:05
% DurationCPUTime: 5.50s
% Computational Cost: add. (10724->447), mult. (27544->769), div. (0->0), fcn. (27283->10), ass. (0->215)
t161 = sin(qJ(3));
t164 = cos(qJ(3));
t158 = sin(pkin(6));
t162 = sin(qJ(2));
t249 = t158 * t162;
t254 = cos(pkin(6));
t119 = t254 * t161 + t164 * t249;
t159 = sin(qJ(5));
t163 = cos(qJ(5));
t160 = sin(qJ(4));
t209 = t254 * t164;
t174 = t161 * t249 - t209;
t280 = cos(qJ(4));
t83 = t160 * t119 + t280 * t174;
t252 = qJD(6) * t83;
t165 = cos(qJ(2));
t242 = qJD(2) * t165;
t217 = t158 * t242;
t223 = qJD(3) * t119 + t161 * t217;
t84 = t280 * t119 - t160 * t174;
t94 = -qJD(3) * t174 + t164 * t217;
t51 = t84 * qJD(4) + t160 * t94 + t280 * t223;
t269 = qJ(6) * t51;
t214 = qJD(4) * t280;
t238 = qJD(4) * t160;
t243 = qJD(2) * t162;
t145 = t158 * t243;
t113 = (pkin(2) * t162 - pkin(9) * t165) * t158 * qJD(2);
t208 = qJD(2) * t254;
t198 = t165 * t208;
t114 = -pkin(1) * t198 + pkin(8) * t145;
t222 = pkin(1) * t254;
t248 = t158 * t165;
t172 = pkin(8) * t248 + t162 * t222;
t107 = t254 * pkin(9) + t172;
t108 = (-pkin(2) * t165 - pkin(9) * t162 - pkin(1)) * t158;
t255 = t164 * t107 + t161 * t108;
t53 = -t255 * qJD(3) + t164 * t113 + t161 * t114;
t43 = pkin(3) * t145 - pkin(10) * t94 + t53;
t240 = qJD(3) * t164;
t241 = qJD(3) * t161;
t52 = t107 * t241 - t108 * t240 - t161 * t113 + t164 * t114;
t47 = -pkin(10) * t223 - t52;
t206 = -t161 * t107 + t164 * t108;
t63 = -pkin(3) * t248 - t119 * pkin(10) + t206;
t71 = -pkin(10) * t174 + t255;
t14 = -t160 * t43 - t63 * t214 + t238 * t71 - t280 * t47;
t12 = pkin(11) * t145 - t14;
t154 = qJD(5) * t163;
t166 = -t83 * qJD(4) - t160 * t223 + t280 * t94;
t199 = t162 * t208;
t201 = t223 * pkin(3);
t23 = pkin(1) * t199 + t51 * pkin(4) + pkin(8) * t217 - pkin(11) * t166 + t201;
t237 = qJD(5) * t159;
t273 = t160 * t63 + t280 * t71;
t40 = -pkin(11) * t248 + t273;
t106 = -t254 * pkin(2) + pkin(8) * t249 - t165 * t222;
t87 = pkin(3) * t174 + t106;
t49 = t83 * pkin(4) - t84 * pkin(11) + t87;
t5 = -t163 * t12 - t49 * t154 - t159 * t23 + t237 * t40;
t2 = t252 - t5 + t269;
t282 = t51 * pkin(5);
t274 = t159 * t49 + t163 * t40;
t6 = -qJD(5) * t274 - t159 * t12 + t163 * t23;
t4 = -t282 - t6;
t290 = t4 * t159 + t2 * t163;
t184 = -t163 * t51 + t237 * t83;
t289 = pkin(11) * t184;
t200 = -t160 * t71 + t280 * t63;
t39 = pkin(4) * t248 - t200;
t77 = t159 * t84 + t163 * t248;
t224 = t159 * t248;
t78 = t163 * t84 - t224;
t25 = t77 * pkin(5) - t78 * qJ(6) + t39;
t15 = -t160 * t47 - t71 * t214 - t63 * t238 + t280 * t43;
t13 = -pkin(4) * t145 - t15;
t32 = qJD(5) * t77 - t145 * t159 - t163 * t166;
t33 = -qJD(5) * t224 - t145 * t163 + t154 * t84 + t159 * t166;
t7 = pkin(5) * t33 + qJ(6) * t32 - qJD(6) * t78 + t13;
t215 = -t7 * t163 + t25 * t237;
t212 = -t13 * t163 + t39 * t237;
t156 = t159 ^ 2;
t157 = t163 ^ 2;
t244 = t156 - t157;
t205 = t244 * qJD(5);
t288 = qJD(3) + qJD(4);
t197 = t163 * pkin(5) + t159 * qJ(6);
t287 = qJD(5) * t197 - t163 * qJD(6);
t129 = t160 * t164 + t280 * t161;
t152 = -pkin(3) * t164 - pkin(2);
t180 = -t160 * t161 + t280 * t164;
t88 = -pkin(4) * t180 - pkin(11) * t129 + t152;
t284 = -pkin(10) - pkin(9);
t139 = t284 * t161;
t140 = t284 * t164;
t97 = t160 * t139 - t280 * t140;
t271 = t159 * t88 + t163 * t97;
t231 = pkin(3) * t241;
t92 = t288 * t180;
t93 = t288 * t129;
t64 = pkin(4) * t93 - pkin(11) * t92 + t231;
t221 = qJD(3) * t284;
t188 = t280 * t221;
t203 = t160 * t221;
t75 = -t139 * t214 - t140 * t238 - t161 * t188 - t164 * t203;
t30 = -qJD(5) * t271 + t159 * t75 + t163 * t64;
t286 = 0.2e1 * t158;
t285 = 0.2e1 * qJD(6);
t283 = pkin(11) * t93;
t281 = t93 * pkin(5);
t279 = pkin(3) * t158;
t278 = pkin(9) * t158;
t277 = pkin(11) * t180;
t275 = t13 * t159 + t39 * t154;
t76 = qJD(4) * t97 + t161 * t203 - t164 * t188;
t96 = -t280 * t139 - t160 * t140;
t272 = t96 * t154 + t76 * t159;
t270 = pkin(3) * qJD(4);
t268 = qJ(6) * t93;
t267 = t129 * t92;
t150 = pkin(3) * t160 + pkin(11);
t265 = t150 * t93;
t264 = t159 * t77;
t263 = t159 * t92;
t262 = t159 * t93;
t261 = t163 * t33;
t260 = t163 * t78;
t259 = t163 * t92;
t258 = t163 * t93;
t257 = t32 * t159;
t256 = t32 * t163;
t196 = pkin(5) * t159 - qJ(6) * t163;
t74 = t129 * t196 + t96;
t253 = qJD(5) * t74;
t115 = t172 * qJD(2);
t251 = t115 * t161;
t250 = t180 * t150;
t247 = t159 * t163;
t235 = t159 * qJD(6);
t118 = pkin(5) * t237 - qJ(6) * t154 - t235;
t228 = pkin(3) * t238;
t102 = t118 + t228;
t246 = -t102 - t118;
t232 = t280 * pkin(3);
t151 = -t232 - pkin(4);
t245 = t151 * t154 + t159 * t228;
t239 = qJD(3) * t165;
t236 = qJD(6) * t180;
t233 = -0.2e1 * pkin(2) * qJD(3);
t230 = pkin(4) * t237;
t229 = pkin(4) * t154;
t227 = pkin(11) * t237;
t226 = pkin(11) * t154;
t70 = t74 * t237;
t90 = t96 * t237;
t220 = t159 * t280;
t219 = t163 * t280;
t155 = t158 ^ 2;
t218 = t155 * t242;
t216 = t159 * t154;
t207 = -0.4e1 * t129 * t247;
t204 = pkin(3) * t214;
t202 = t162 * t218;
t17 = qJ(6) * t83 + t274;
t19 = -t159 * t40 + t163 * t49;
t18 = -pkin(5) * t83 - t19;
t195 = -t159 * t17 + t163 * t18;
t55 = -qJ(6) * t180 + t271;
t68 = -t159 * t97 + t163 * t88;
t56 = pkin(5) * t180 - t68;
t193 = -t159 * t55 + t163 * t56;
t192 = -t159 * t78 - t163 * t77;
t190 = t159 * t204;
t189 = -t129 * t151 - t250;
t187 = t151 * t237 - t163 * t228;
t133 = -pkin(4) - t197;
t186 = t154 * t25 + t7 * t159;
t185 = t18 * t154 - t17 * t237 + t290;
t35 = t154 * t83 + t159 * t51;
t183 = -t180 * t237 - t258;
t182 = -t129 * t154 - t263;
t181 = t129 * t237 - t259;
t29 = -t88 * t154 - t159 * t64 + t163 * t75 + t237 * t97;
t179 = t118 * t129 + t133 * t92 - t283;
t178 = t35 * pkin(11);
t177 = t161 * t239 + t164 * t243;
t176 = t161 * t243 - t164 * t239;
t175 = t35 * t150;
t31 = t287 * t129 + t196 * t92 + t76;
t173 = -t31 + (t129 * t133 + t277) * qJD(5);
t124 = -t232 + t133;
t171 = -t31 + (t124 * t129 + t250) * qJD(5);
t116 = (t156 + t157) * t280 * t270;
t170 = qJD(5) * t195 + t290;
t26 = -t236 - t29 + t268;
t27 = -t281 - t30;
t8 = qJD(5) * t193 + t27 * t159 + t26 * t163;
t169 = -t257 - t261 + (t260 + t264) * qJD(5);
t168 = t102 * t129 + t124 * t92 + t180 * t204 - t265;
t167 = -t265 + t151 * t92 + (t129 * t160 + t180 * t280) * t270;
t144 = 0.2e1 * t216;
t130 = -0.2e1 * t202;
t127 = -0.2e1 * t205;
t126 = t129 ^ 2;
t123 = t133 * t237;
t111 = t124 * t237;
t110 = t150 * t154 + t190;
t109 = t150 * t237 - t163 * t204;
t82 = t201 + t115;
t81 = -t154 * t180 + t262;
t62 = -t129 * t205 + t92 * t247;
t54 = qJD(5) * t207 - t244 * t92;
t28 = t154 * t78 - t257;
t9 = qJD(5) * t192 - t159 * t33 - t256;
t1 = [0, 0, 0, 0.2e1 * t202, 0.2e1 * (-t162 ^ 2 + t165 ^ 2) * t155 * qJD(2), t198 * t286, -0.2e1 * t158 * t199, 0, -0.2e1 * t155 * pkin(1) * t243 - 0.2e1 * t115 * t254, -0.2e1 * pkin(1) * t218 + 0.2e1 * t114 * t254, 0.2e1 * t119 * t94, -0.2e1 * t119 * t223 - 0.2e1 * t174 * t94 (t119 * t243 - t165 * t94) * t286, -0.2e1 * t145 * t174 + 0.2e1 * t223 * t248, t130, -0.2e1 * t115 * t209 + 0.2e1 * t106 * t223 + 0.2e1 * (-t53 * t165 + (qJD(2) * t206 + t251) * t162) * t158, 0.2e1 * t106 * t94 + 0.2e1 * t115 * t119 + 0.2e1 * (-t52 * t165 - t243 * t255) * t158, 0.2e1 * t84 * t166, -0.2e1 * t166 * t83 - 0.2e1 * t84 * t51, 0.2e1 * t145 * t84 - 0.2e1 * t166 * t248 (t165 * t51 - t243 * t83) * t286, t130, 0.2e1 * t87 * t51 + 0.2e1 * t82 * t83 + 0.2e1 * (-t15 * t165 + t200 * t243) * t158, -0.2e1 * t14 * t248 - 0.2e1 * t273 * t145 + 0.2e1 * t87 * t166 + 0.2e1 * t82 * t84, -0.2e1 * t78 * t32, 0.2e1 * t32 * t77 - 0.2e1 * t33 * t78, -0.2e1 * t32 * t83 + 0.2e1 * t51 * t78, -0.2e1 * t33 * t83 - 0.2e1 * t51 * t77, 0.2e1 * t83 * t51, 0.2e1 * t13 * t77 + 0.2e1 * t19 * t51 + 0.2e1 * t33 * t39 + 0.2e1 * t6 * t83, 0.2e1 * t13 * t78 - 0.2e1 * t274 * t51 - 0.2e1 * t32 * t39 + 0.2e1 * t5 * t83, -0.2e1 * t18 * t51 + 0.2e1 * t25 * t33 - 0.2e1 * t4 * t83 + 0.2e1 * t7 * t77, -0.2e1 * t17 * t33 - 0.2e1 * t18 * t32 - 0.2e1 * t2 * t77 + 0.2e1 * t4 * t78, 0.2e1 * t17 * t51 + 0.2e1 * t2 * t83 + 0.2e1 * t25 * t32 - 0.2e1 * t7 * t78, 0.2e1 * t17 * t2 + 0.2e1 * t18 * t4 + 0.2e1 * t25 * t7; 0, 0, 0, 0, 0, t217, -t145, 0, -t115, t114, t119 * t240 + t161 * t94, -t161 * t223 + t94 * t164 + (-t119 * t161 - t164 * t174) * qJD(3), t176 * t158, t177 * t158, 0, -pkin(2) * t223 + t106 * t241 - t115 * t164 - t176 * t278, -pkin(2) * t94 + t106 * t240 - t177 * t278 + t251, t129 * t166 + t84 * t92, -t129 * t51 + t166 * t180 - t92 * t83 - t84 * t93 (t129 * t243 - t165 * t92) * t158 (t165 * t93 + t180 * t243) * t158, 0, t83 * t231 - t82 * t180 + t152 * t51 + t87 * t93 + (t165 * t76 - t243 * t96) * t158, t82 * t129 - t145 * t97 + t152 * t166 + t231 * t84 - t248 * t75 + t87 * t92, t78 * t259 + (-t237 * t78 - t256) * t129, t192 * t92 + (t257 - t261 + (-t260 + t264) * qJD(5)) * t129, -t129 * t184 + t180 * t32 + t259 * t83 + t78 * t93, -t129 * t35 + t180 * t33 - t263 * t83 - t77 * t93, -t180 * t51 + t83 * t93, t129 * t275 - t180 * t6 + t19 * t93 + t263 * t39 + t30 * t83 + t33 * t96 + t51 * t68 + t76 * t77, -t212 * t129 - t180 * t5 + t39 * t259 - t51 * t271 - t274 * t93 + t29 * t83 - t32 * t96 + t76 * t78, t129 * t186 - t18 * t93 + t180 * t4 + t25 * t263 - t27 * t83 + t31 * t77 + t33 * t74 - t51 * t56, -t26 * t77 + t27 * t78 - t32 * t56 - t33 * t55 + t195 * t92 + (-t159 * t2 + t163 * t4 + (-t159 * t18 - t163 * t17) * qJD(5)) * t129, t215 * t129 + t17 * t93 - t180 * t2 - t25 * t259 + t26 * t83 - t31 * t78 + t32 * t74 + t51 * t55, t17 * t26 + t18 * t27 + t2 * t55 + t25 * t31 + t4 * t56 + t7 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t161 * t240, 0.2e1 * (-t161 ^ 2 + t164 ^ 2) * qJD(3), 0, 0, 0, t161 * t233, t164 * t233, 0.2e1 * t267, -0.2e1 * t129 * t93 + 0.2e1 * t180 * t92, 0, 0, 0, 0.2e1 * t152 * t93 - 0.2e1 * t180 * t231, 0.2e1 * t129 * t231 + 0.2e1 * t152 * t92, -0.2e1 * t126 * t216 + 0.2e1 * t157 * t267, 0.2e1 * t126 * t205 + t207 * t92, 0.2e1 * t129 * t258 + 0.2e1 * t180 * t181, -0.2e1 * t129 * t262 - 0.2e1 * t180 * t182, -0.2e1 * t180 * t93, 0.2e1 * t129 * t272 - 0.2e1 * t180 * t30 + 0.2e1 * t263 * t96 + 0.2e1 * t68 * t93, 0.2e1 * t96 * t259 - 0.2e1 * t29 * t180 - 0.2e1 * t271 * t93 + 0.2e1 * (t76 * t163 - t90) * t129, 0.2e1 * t74 * t263 + 0.2e1 * t27 * t180 - 0.2e1 * t56 * t93 + 0.2e1 * (t154 * t74 + t31 * t159) * t129, 0.2e1 * t193 * t92 + 0.2e1 * (-t159 * t26 + t163 * t27 + (-t159 * t56 - t163 * t55) * qJD(5)) * t129, -0.2e1 * t74 * t259 - 0.2e1 * t26 * t180 + 0.2e1 * t55 * t93 + 0.2e1 * (-t31 * t163 + t70) * t129, 0.2e1 * t26 * t55 + 0.2e1 * t27 * t56 + 0.2e1 * t31 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t223, t145, t53, t52, 0, 0, t166, -t51, t145 (t165 * t238 + t280 * t243) * t279 + t15 (-t160 * t243 + t165 * t214) * t279 + t14, t28, t9, t35, -t184, 0, t151 * t33 - t175 + (t160 * t77 - t220 * t83) * t270 + t212, -t151 * t32 + t184 * t150 + (t160 * t78 - t219 * t83) * t270 + t275, t102 * t77 + t124 * t33 - t190 * t83 - t175 + t215 (-t219 * t77 + t220 * t78) * t270 + t169 * t150 + t185, -t102 * t78 + t124 * t32 + (-qJD(5) * t150 * t83 - t7) * t159 + (-qJD(5) * t25 + t150 * t51 + t204 * t83) * t163, t25 * t102 + t7 * t124 + (t17 * t219 + t18 * t220) * t270 + t170 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, -t241, 0, -pkin(9) * t240, pkin(9) * t241, 0, 0, t92, -t93, 0, -t76, t75, t62, t54, t81, -t183, 0, t90 + (-qJD(5) * t189 - t76) * t163 + t167 * t159, t163 * t167 + t189 * t237 + t272, t159 * t168 + t163 * t171 + t70, t8, t171 * t159 + (-t168 - t253) * t163, t74 * t102 + t31 * t124 + (t219 * t55 + t220 * t56) * t270 + t8 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t228, -0.2e1 * t204, t144, t127, 0, 0, 0, 0.2e1 * t187, 0.2e1 * t245, -0.2e1 * t102 * t163 + 0.2e1 * t111, 0.2e1 * t116, -0.2e1 * t102 * t159 - 0.2e1 * t124 * t154, 0.2e1 * t124 * t102 + 0.2e1 * t116 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, -t51, t145, t15, t14, t28, t9, t35, -t184, 0, -pkin(4) * t33 - t178 + t212, pkin(4) * t32 + t275 + t289, t118 * t77 + t133 * t33 - t178 + t215, pkin(11) * t169 + t185, -t118 * t78 + t133 * t32 - t186 - t289, pkin(11) * t170 + t118 * t25 + t133 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t93, 0, -t76, t75, t62, t54, t81, -t183, 0, t90 + (-pkin(4) * t92 - t283) * t159 + (-t76 + (-pkin(4) * t129 + t277) * qJD(5)) * t163, pkin(4) * t181 + pkin(11) * t183 + t272, t159 * t179 + t163 * t173 + t70, t8, t173 * t159 + (-t179 - t253) * t163, pkin(11) * t8 + t118 * t74 + t133 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t228, -t204, t144, t127, 0, 0, 0, t187 - t230, -t229 + t245, t163 * t246 + t111 + t123, t116, t246 * t159 + (-t124 - t133) * t154, pkin(11) * t116 + t102 * t133 + t124 * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t127, 0, 0, 0, -0.2e1 * t230, -0.2e1 * t229, -0.2e1 * t118 * t163 + 0.2e1 * t123, 0, -0.2e1 * t118 * t159 - 0.2e1 * t133 * t154, 0.2e1 * t133 * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t33, t51, t6, t5, t6 + 0.2e1 * t282, pkin(5) * t32 - qJ(6) * t33 - qJD(6) * t77, 0.2e1 * t252 - t5 + 0.2e1 * t269, -pkin(5) * t4 + qJ(6) * t2 + qJD(6) * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t181, t182, t93, t30, t29, t30 + 0.2e1 * t281, -t197 * t92 + (qJD(5) * t196 - t235) * t129, -0.2e1 * t236 - t29 + 0.2e1 * t268, -pkin(5) * t27 + qJ(6) * t26 + qJD(6) * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, -t237, 0, -t110, t109, -t110, -t287, -t109 (-pkin(5) * t220 + qJ(6) * t219) * t270 - t287 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, -t237, 0, -t226, t227, -t226, -t287, -t227, -t287 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t285, qJ(6) * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, -t32, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t181, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
