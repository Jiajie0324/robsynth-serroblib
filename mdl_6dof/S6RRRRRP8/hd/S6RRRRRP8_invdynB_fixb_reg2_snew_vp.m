% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 05:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:50:27
% EndTime: 2019-05-08 05:52:51
% DurationCPUTime: 110.99s
% Computational Cost: add. (451801->1005), mult. (963964->1548), div. (0->0), fcn. (788674->12), ass. (0->749)
t1319 = sin(qJ(1));
t1324 = cos(qJ(1));
t1313 = sin(pkin(6));
t1314 = cos(pkin(6));
t1507 = qJD(1) * t1314;
t1305 = qJD(2) + t1507;
t1317 = sin(qJ(3));
t1322 = cos(qJ(3));
t1318 = sin(qJ(2));
t1465 = t1313 * t1318;
t1448 = qJD(1) * t1465;
t1271 = t1305 * t1322 - t1317 * t1448;
t1272 = t1305 * t1317 + t1322 * t1448;
t1316 = sin(qJ(4));
t1321 = cos(qJ(4));
t1239 = -t1321 * t1271 + t1272 * t1316;
t1236 = qJD(5) + t1239;
t1523 = t1236 ^ 2;
t1241 = t1271 * t1316 + t1272 * t1321;
t1315 = sin(qJ(5));
t1320 = cos(qJ(5));
t1323 = cos(qJ(2));
t1464 = t1313 * t1323;
t1447 = qJD(1) * t1464;
t1298 = -qJD(3) + t1447;
t1375 = -qJD(4) + t1298;
t1215 = t1241 * t1315 + t1320 * t1375;
t1524 = t1215 ^ 2;
t1163 = t1524 - t1523;
t1451 = qJDD(1) * t1318;
t1505 = qJD(1) * t1323;
t1278 = (qJD(2) * t1505 + t1451) * t1313;
t1429 = qJDD(1) * t1314 + qJDD(2);
t1228 = t1271 * qJD(3) + t1322 * t1278 + t1317 * t1429;
t1431 = t1317 * t1278 - t1322 * t1429;
t1366 = qJD(3) * t1272 + t1431;
t1433 = t1316 * t1228 + t1321 * t1366;
t1140 = -t1241 * qJD(4) - t1433;
t1139 = qJDD(5) - t1140;
t1217 = t1320 * t1241 - t1315 * t1375;
t1153 = t1217 * t1215;
t1538 = t1139 + t1153;
t1494 = t1538 * t1320;
t1013 = t1163 * t1315 + t1494;
t1495 = t1538 * t1315;
t1018 = t1163 * t1320 - t1495;
t1141 = -t1239 * qJD(4) + t1321 * t1228 - t1316 * t1366;
t1452 = qJDD(1) * t1313;
t1376 = qJD(2) * t1448 - t1323 * t1452;
t1364 = qJDD(3) + t1376;
t1346 = qJDD(4) + t1364;
t1434 = t1315 * t1141 - t1320 * t1346;
t1043 = (qJD(5) - t1236) * t1217 + t1434;
t943 = t1018 * t1316 + t1043 * t1321;
t947 = t1018 * t1321 - t1043 * t1316;
t866 = t1317 * t943 - t1322 * t947;
t1405 = t1013 * t1323 + t1318 * t866;
t863 = t1317 * t947 + t1322 * t943;
t788 = t1313 * t863 + t1314 * t1405;
t820 = -t1013 * t1318 + t1323 * t866;
t1676 = t1319 * t788 - t1324 * t820;
t1214 = t1217 ^ 2;
t1150 = t1214 - t1524;
t1455 = qJD(5) + t1236;
t1042 = t1217 * t1455 + t1434;
t1332 = -t1320 * t1141 - t1315 * t1346;
t1330 = -t1215 * qJD(5) - t1332;
t1482 = t1215 * t1236;
t1533 = -t1482 + t1330;
t1498 = t1533 * t1315;
t954 = -t1042 * t1320 - t1498;
t919 = -t1150 * t1321 + t1316 * t954;
t921 = t1150 * t1316 + t1321 * t954;
t843 = t1317 * t919 - t1322 * t921;
t948 = -t1042 * t1315 + t1320 * t1533;
t1413 = t1318 * t843 + t1323 * t948;
t842 = t1317 * t921 + t1322 * t919;
t766 = t1313 * t842 + t1314 * t1413;
t805 = -t1318 * t948 + t1323 * t843;
t1675 = t1319 * t766 - t1324 * t805;
t1674 = t1319 * t820 + t1324 * t788;
t1673 = t1319 * t805 + t1324 * t766;
t1668 = t1313 * t1405 - t1314 * t863;
t1667 = t1313 * t1413 - t1314 * t842;
t1534 = -t1482 - t1330;
t1573 = -t1043 * t1315 + t1534 * t1320;
t1537 = t1214 + t1524;
t1572 = -t1043 * t1320 - t1534 * t1315;
t1592 = -t1316 * t1537 + t1321 * t1572;
t1594 = t1316 * t1572 + t1321 * t1537;
t1613 = -t1317 * t1594 + t1322 * t1592;
t1634 = t1318 * t1573 + t1323 * t1613;
t1612 = t1317 * t1592 + t1322 * t1594;
t1636 = t1318 * t1613 - t1323 * t1573;
t1646 = -t1313 * t1612 + t1314 * t1636;
t1655 = t1319 * t1634 + t1324 * t1646;
t1666 = pkin(7) * t1655;
t1657 = -t1319 * t1646 + t1324 * t1634;
t1665 = pkin(7) * t1657;
t1660 = pkin(1) * t1646;
t1648 = t1313 * t1636 + t1314 * t1612;
t1659 = pkin(1) * t1648;
t1164 = -t1214 + t1523;
t1539 = t1139 - t1153;
t1493 = t1539 * t1315;
t1575 = -t1164 * t1320 - t1493;
t1492 = t1539 * t1320;
t1574 = -t1164 * t1315 + t1492;
t1591 = -t1316 * t1534 + t1321 * t1574;
t1593 = t1316 * t1574 + t1321 * t1534;
t1615 = -t1317 * t1593 + t1322 * t1591;
t1635 = -t1318 * t1575 + t1323 * t1615;
t1614 = t1317 * t1591 + t1322 * t1593;
t1637 = t1318 * t1615 + t1323 * t1575;
t1645 = -t1313 * t1614 + t1314 * t1637;
t1658 = -t1319 * t1645 + t1324 * t1635;
t1656 = t1319 * t1635 + t1324 * t1645;
t1654 = (-t1313 * t1648 - t1314 * t1646) * pkin(8);
t1653 = pkin(8) * t1634;
t1647 = t1313 * t1637 + t1314 * t1614;
t1644 = pkin(9) * t1612;
t1639 = -pkin(2) * t1612 - pkin(3) * t1594 - pkin(4) * t1537 - pkin(11) * t1572;
t1638 = -pkin(2) * t1573 + pkin(9) * t1613;
t1127 = t1523 + t1214;
t989 = t1127 * t1320 + t1495;
t1633 = pkin(2) * t989;
t1632 = pkin(3) * t989;
t1631 = pkin(4) * t989;
t1630 = pkin(11) * t989;
t997 = t1127 * t1315 - t1494;
t1629 = pkin(11) * t997;
t1628 = pkin(10) * t1592;
t1627 = pkin(10) * t1594;
t1626 = t1316 * t997;
t1625 = t1318 * t989;
t1624 = t1321 * t997;
t1623 = t1323 * t989;
t1477 = t1236 * t1320;
t1161 = t1217 * t1477;
t1478 = t1236 * t1315;
t1442 = t1215 * t1478;
t1421 = t1161 + t1442;
t1160 = t1217 * t1478;
t1441 = t1215 * t1477;
t1422 = t1160 - t1441;
t1528 = t1139 * t1316 + t1321 * t1422;
t1531 = -t1321 * t1139 + t1316 * t1422;
t1553 = -t1317 * t1531 + t1322 * t1528;
t1569 = -t1318 * t1421 + t1323 * t1553;
t1552 = t1317 * t1528 + t1322 * t1531;
t1571 = t1318 * t1553 + t1323 * t1421;
t1595 = -t1313 * t1552 + t1314 * t1571;
t1619 = -t1319 * t1595 + t1324 * t1569;
t1079 = -qJD(5) * t1217 - t1434;
t1369 = -t1079 * t1320 - t1442;
t1370 = -t1079 * t1315 + t1441;
t1444 = t1316 * t1153;
t1529 = t1321 * t1370 - t1444;
t1443 = t1321 * t1153;
t1530 = t1316 * t1370 + t1443;
t1551 = -t1317 * t1530 + t1322 * t1529;
t1568 = -t1318 * t1369 + t1323 * t1551;
t1550 = t1317 * t1529 + t1322 * t1530;
t1570 = t1318 * t1551 + t1323 * t1369;
t1596 = -t1313 * t1550 + t1314 * t1570;
t1618 = -t1319 * t1596 + t1324 * t1568;
t1617 = t1319 * t1569 + t1324 * t1595;
t1616 = t1319 * t1568 + t1324 * t1596;
t1610 = pkin(11) * t1573;
t1598 = t1313 * t1570 + t1314 * t1550;
t1597 = t1313 * t1571 + t1314 * t1552;
t1532 = -t1523 - t1524;
t1556 = t1315 * t1532 + t1492;
t1590 = pkin(2) * t1556;
t1589 = pkin(3) * t1556;
t1588 = pkin(4) * t1556;
t1555 = t1320 * t1532 - t1493;
t1587 = pkin(11) * t1555;
t1586 = pkin(11) * t1556;
t1579 = t1316 * t1555;
t1578 = t1318 * t1556;
t1577 = t1321 * t1555;
t1576 = t1323 * t1556;
t1036 = -t1315 * t1330 - t1161;
t1037 = t1320 * t1330 - t1160;
t1423 = t1321 * t1037 + t1444;
t1424 = t1316 * t1037 - t1443;
t1526 = t1317 * t1423 + t1322 * t1424;
t1527 = -t1317 * t1424 + t1322 * t1423;
t1548 = -t1313 * t1526 + (t1036 * t1323 + t1318 * t1527) * t1314;
t1554 = -t1036 * t1318 + t1323 * t1527;
t1567 = t1319 * t1554 + t1324 * t1548;
t1566 = -t1319 * t1548 + t1324 * t1554;
t1565 = 2 * qJD(6);
t1563 = qJ(6) * t1533;
t1224 = t1239 * t1375;
t1558 = t1224 + t1141;
t1286 = t1305 * t1448;
t1557 = t1376 + t1286;
t1549 = t1036 * t1464 + t1314 * t1526 + t1465 * t1527;
t1374 = t1375 ^ 2;
t1508 = qJD(1) * t1313;
t1476 = t1239 * t1241;
t1335 = t1346 - t1476;
t1547 = t1316 * t1335;
t1475 = t1271 * t1272;
t1338 = t1364 + t1475;
t1546 = t1317 * t1338;
t1543 = t1321 * t1335;
t1542 = t1322 * t1338;
t1258 = t1271 * t1298;
t1201 = -t1258 - t1228;
t1199 = -t1258 + t1228;
t1351 = t1375 * t1241;
t1342 = t1321 * t1351;
t1345 = t1316 * t1224;
t1156 = t1345 + t1342;
t1343 = t1321 * t1224;
t1344 = t1316 * t1351;
t1157 = t1343 - t1344;
t1081 = -t1156 * t1317 + t1157 * t1322;
t1536 = t1318 * t1081 - t1323 * t1346;
t1211 = (-t1271 * t1322 - t1272 * t1317) * t1298;
t1535 = t1318 * t1211 - t1323 * t1364;
t1149 = pkin(5) * t1215 - qJ(6) * t1217;
t1176 = pkin(4) * t1239 - pkin(11) * t1241;
t1301 = g(1) * t1324 + t1319 * g(2);
t1525 = qJD(1) ^ 2;
t1274 = -pkin(1) * t1525 + pkin(8) * t1452 - t1301;
t1519 = pkin(2) * t1323;
t1427 = -pkin(9) * t1318 - t1519;
t1277 = t1427 * t1508;
t1300 = t1319 * g(1) - t1324 * g(2);
t1377 = -qJDD(1) * pkin(1) - t1300;
t1516 = pkin(8) * t1313;
t1339 = t1516 * t1525 - t1377;
t1336 = t1314 * t1339;
t1331 = -g(3) * t1465 + t1318 * t1336;
t1329 = pkin(9) * t1429 + t1331;
t1521 = t1305 ^ 2;
t1327 = -t1521 * pkin(2) + (t1277 * t1508 + t1274) * t1323 + t1329;
t1520 = pkin(2) * t1318;
t1426 = -pkin(9) * t1323 + t1520;
t1514 = t1314 * g(3);
t1515 = t1278 * pkin(9);
t1328 = t1376 * pkin(2) - t1515 - t1514 + ((-pkin(8) * t1508 + t1305 * t1426) * qJD(1) + t1377) * t1313;
t1119 = t1317 * t1328 + t1322 * t1327;
t1250 = -pkin(3) * t1298 - pkin(10) * t1272;
t1522 = t1271 ^ 2;
t1059 = -pkin(3) * t1522 - pkin(10) * t1366 + t1298 * t1250 + t1119;
t1118 = t1317 * t1327 - t1322 * t1328;
t1326 = pkin(3) * t1338 + pkin(10) * t1201 - t1118;
t965 = t1321 * t1059 + t1316 * t1326;
t935 = -pkin(4) * t1374 + pkin(11) * t1346 - t1239 * t1176 + t965;
t1432 = t1318 * t1274 - t1323 * t1336;
t1506 = qJD(1) * t1318;
t1188 = -t1429 * pkin(2) - t1521 * pkin(9) + (g(3) * t1323 + t1277 * t1506) * t1313 + t1432;
t1097 = t1366 * pkin(3) - t1522 * pkin(10) + t1272 * t1250 + t1188;
t962 = -t1558 * pkin(11) + (-t1140 - t1351) * pkin(4) + t1097;
t870 = t1315 * t962 + t1320 * t935;
t1418 = t1139 * qJ(6) - t1215 * t1149 + t1236 * t1565 + t870;
t1196 = (qJD(3) + t1298) * t1272 + t1431;
t1237 = t1239 ^ 2;
t1238 = t1241 ^ 2;
t1270 = t1272 ^ 2;
t1293 = t1298 ^ 2;
t1518 = pkin(4) * t1316;
t1517 = pkin(5) * t1320;
t869 = t1315 * t935 - t1320 * t962;
t1513 = qJ(6) * t1320;
t964 = t1316 * t1059 - t1321 * t1326;
t934 = -t1346 * pkin(4) - t1374 * pkin(11) + t1241 * t1176 + t964;
t1512 = t1315 * t934;
t884 = t1316 * t965 - t1321 * t964;
t1511 = t1317 * t884;
t1510 = t1320 * t934;
t1509 = t1322 * t884;
t1491 = t1097 * t1316;
t1490 = t1097 * t1321;
t1166 = -t1346 - t1476;
t1486 = t1166 * t1316;
t1485 = t1166 * t1321;
t1484 = t1188 * t1317;
t1483 = t1188 * t1322;
t1221 = -t1364 + t1475;
t1481 = t1221 * t1317;
t1480 = t1221 * t1322;
t1479 = t1236 * t1217;
t1310 = t1313 ^ 2;
t1466 = t1310 * t1323;
t1297 = t1525 * t1318 * t1466;
t1275 = -t1297 + t1429;
t1474 = t1275 * t1318;
t1473 = t1275 * t1323;
t1276 = t1297 + t1429;
t1472 = t1276 * t1318;
t1471 = t1276 * t1323;
t1470 = t1298 * t1317;
t1469 = t1298 * t1322;
t1468 = t1305 * t1313;
t1467 = t1310 * t1525;
t1260 = t1313 * t1339 + t1514;
t1460 = t1318 * t1260;
t1459 = t1323 * t1260;
t1458 = t1323 * t1274;
t1454 = t1537 - t1523;
t1311 = t1318 ^ 2;
t1312 = t1323 ^ 2;
t1453 = t1311 + t1312;
t1450 = -pkin(4) * t1321 - pkin(3);
t1449 = qJD(1) * t1468;
t1446 = t1311 * t1467;
t1445 = t1312 * t1467;
t1440 = t1318 * t1476;
t1439 = t1323 * t1476;
t1438 = t1318 * t1475;
t1437 = t1323 * t1475;
t1436 = qJ(6) * t1315 + pkin(4);
t885 = t1316 * t964 + t1321 * t965;
t1435 = -t1305 + t1507;
t1027 = t1118 * t1317 + t1322 * t1119;
t1262 = -t1300 * t1319 - t1324 * t1301;
t1428 = t1217 * t1149 + qJDD(6) + t869;
t1287 = t1305 * t1447;
t1295 = qJDD(1) * t1324 - t1319 * t1525;
t1425 = -pkin(7) * t1295 - g(3) * t1319;
t1267 = -t1446 - t1521;
t1242 = -t1267 * t1318 - t1473;
t1420 = pkin(8) * t1242 - t1460;
t1283 = -t1445 - t1521;
t1247 = t1283 * t1323 - t1472;
t1419 = pkin(8) * t1247 + t1459;
t792 = t1315 * t870 - t1320 * t869;
t793 = t1315 * t869 + t1320 * t870;
t826 = -pkin(5) * t1523 + t1418;
t1365 = -t1139 * pkin(5) + t1428;
t829 = qJ(6) * t1523 - t1365;
t778 = -t1315 * t829 + t1320 * t826;
t1334 = -t1079 * pkin(5) - t1563 + t934;
t857 = (pkin(5) * t1236 - (2 * qJD(6))) * t1217 + t1334;
t749 = t1316 * t778 - t1321 * t857;
t750 = t1316 * t857 + t1321 * t778;
t709 = -t1317 * t749 + t1322 * t750;
t777 = t1315 * t826 + t1320 * t829;
t1417 = t1318 * t709 - t1323 * t777;
t783 = t1316 * t793 - t1321 * t934;
t784 = t1316 * t934 + t1321 * t793;
t723 = -t1317 * t783 + t1322 * t784;
t1416 = t1318 * t723 - t1323 * t792;
t924 = t1321 * t1533 - t1626;
t926 = -t1316 * t1533 - t1624;
t848 = -t1317 * t924 + t1322 * t926;
t1411 = t1318 * t848 - t1623;
t925 = -t1042 * t1321 + t1579;
t927 = t1042 * t1316 + t1577;
t849 = -t1317 * t925 + t1322 * t927;
t1410 = t1318 * t849 - t1576;
t1050 = t1215 * t1455 + t1332;
t928 = t1050 * t1321 + t1626;
t930 = -t1050 * t1316 + t1624;
t852 = -t1317 * t928 + t1322 * t930;
t1409 = t1318 * t852 + t1623;
t1044 = -t1079 + t1479;
t929 = -t1044 * t1321 + t1579;
t931 = t1044 * t1316 + t1577;
t853 = -t1317 * t929 + t1322 * t931;
t1408 = t1318 * t853 - t1576;
t803 = t1322 * t885 - t1511;
t1399 = -t1097 * t1323 + t1318 * t803;
t1098 = (0.2e1 * qJD(4) - t1298) * t1241 + t1433;
t1173 = -t1374 - t1237;
t1089 = t1173 * t1316 + t1543;
t1090 = t1173 * t1321 - t1547;
t994 = -t1089 * t1317 + t1090 * t1322;
t1398 = -t1098 * t1323 + t1318 * t994;
t1142 = -t1237 - t1238;
t1099 = t1241 * t1298 + t1433;
t1103 = -t1141 + t1224;
t1005 = -t1099 * t1316 + t1103 * t1321;
t1007 = -t1099 * t1321 - t1103 * t1316;
t917 = -t1005 * t1317 + t1007 * t1322;
t1397 = -t1142 * t1323 + t1318 * t917;
t1182 = -t1238 + t1237;
t1004 = -t1098 * t1316 + t1321 * t1558;
t1006 = -t1098 * t1321 - t1316 * t1558;
t916 = -t1004 * t1317 + t1006 * t1322;
t1396 = t1182 * t1323 + t1318 * t916;
t1206 = -t1238 - t1374;
t1116 = t1206 * t1321 + t1486;
t1117 = -t1206 * t1316 + t1485;
t1025 = -t1116 * t1317 + t1117 * t1322;
t1395 = t1025 * t1318 - t1323 * t1558;
t1394 = t1027 * t1318 - t1188 * t1323;
t1220 = -t1238 + t1374;
t1122 = t1220 * t1321 + t1547;
t1124 = -t1220 * t1316 + t1543;
t1040 = -t1122 * t1317 + t1124 * t1322;
t1393 = t1040 * t1318 + t1103 * t1323;
t1219 = t1237 - t1374;
t1123 = t1219 * t1316 - t1485;
t1125 = t1219 * t1321 + t1486;
t1041 = -t1123 * t1317 + t1125 * t1322;
t1392 = t1041 * t1318 + t1099 * t1323;
t1026 = -t1118 * t1322 + t1119 * t1317;
t1197 = (-qJD(3) + t1298) * t1272 - t1431;
t1130 = t1197 * t1322 - t1199 * t1317;
t1243 = -t1270 + t1522;
t1391 = t1130 * t1318 + t1243 * t1323;
t1131 = -t1196 * t1322 - t1201 * t1317;
t1218 = t1270 + t1522;
t1390 = t1131 * t1318 + t1218 * t1323;
t1231 = -t1293 - t1522;
t1159 = t1231 * t1322 - t1546;
t1389 = t1159 * t1318 + t1197 * t1323;
t1244 = -t1270 - t1293;
t1175 = -t1244 * t1317 + t1480;
t1388 = t1175 * t1318 - t1199 * t1323;
t1252 = -t1270 + t1293;
t1180 = -t1252 * t1317 + t1542;
t1387 = t1180 * t1318 + t1201 * t1323;
t1251 = -t1293 + t1522;
t1181 = t1251 * t1322 + t1481;
t1386 = t1181 * t1318 + t1196 * t1323;
t1233 = g(3) * t1464 + t1432;
t1234 = t1331 + t1458;
t1385 = -t1323 * t1233 + t1318 * t1234;
t1172 = t1233 * t1318 + t1234 * t1323;
t1254 = t1287 + t1278;
t1384 = t1254 * t1323 - t1318 * t1557;
t1255 = -t1287 + t1278;
t1256 = t1286 - t1376;
t1383 = -t1255 * t1323 + t1256 * t1318;
t1382 = t1267 * t1323 - t1474;
t1282 = t1445 - t1521;
t1381 = t1282 * t1318 + t1473;
t1281 = -t1446 + t1521;
t1380 = t1281 * t1323 + t1472;
t1379 = t1283 * t1318 + t1471;
t1261 = t1300 * t1324 - t1319 * t1301;
t1378 = t1313 * t1429;
t1373 = t1310 * t1508 + t1314 * t1468;
t1091 = t1321 * t1140 - t1345;
t1092 = -t1316 * t1140 - t1343;
t1001 = -t1091 * t1317 + t1092 * t1322;
t1372 = t1001 * t1318 + t1439;
t1093 = t1316 * t1141 - t1342;
t1094 = t1321 * t1141 + t1344;
t1002 = -t1093 * t1317 + t1094 * t1322;
t1371 = t1002 * t1318 - t1439;
t1191 = t1271 * t1469 + t1317 * t1366;
t1368 = t1191 * t1318 - t1437;
t1193 = t1228 * t1322 + t1272 * t1470;
t1367 = t1193 * t1318 + t1437;
t721 = -pkin(4) * t777 - pkin(5) * t829 - qJ(6) * t826;
t729 = -pkin(11) * t777 + (pkin(5) * t1315 - t1513) * t857;
t688 = -pkin(3) * t777 + pkin(10) * t750 + t1316 * t729 + t1321 * t721;
t692 = -pkin(10) * t749 - t1316 * t721 + t1321 * t729;
t708 = t1317 * t750 + t1322 * t749;
t668 = -pkin(9) * t708 - t1317 * t688 + t1322 * t692;
t687 = -pkin(2) * t708 - pkin(3) * t749 - pkin(11) * t778 + (t1436 + t1517) * t857;
t703 = t1318 * t777 + t1323 * t709;
t1363 = pkin(8) * t703 + t1318 * t668 + t1323 * t687;
t707 = pkin(10) * t784 + (-pkin(11) * t1316 + t1450) * t792;
t715 = -pkin(10) * t783 + (-pkin(11) * t1321 + t1518) * t792;
t722 = t1317 * t784 + t1322 * t783;
t679 = -pkin(9) * t722 - t1317 * t707 + t1322 * t715;
t701 = -pkin(2) * t722 - pkin(3) * t783 + pkin(4) * t934 - pkin(11) * t793;
t712 = t1318 * t792 + t1323 * t723;
t1362 = pkin(8) * t712 + t1318 * t679 + t1323 * t701;
t813 = pkin(5) * t1454 + t1418;
t816 = qJ(6) * t1454 + t1365;
t756 = -t1315 * t813 + t1320 * t816 - t1610;
t871 = -pkin(4) * t1573 - pkin(5) * t1534 + qJ(6) * t1043;
t719 = -pkin(3) * t1573 + t1316 * t756 + t1321 * t871 + t1628;
t724 = -t1316 * t871 + t1321 * t756 - t1627;
t697 = -t1317 * t719 + t1322 * t724 - t1644;
t720 = -t1315 * t816 - t1320 * t813 + t1639;
t1361 = t1318 * t697 + t1323 * t720 + t1653;
t794 = -t1631 - qJ(6) * t1538 + (-t1127 + t1523) * pkin(5) - t1418;
t1333 = t1217 * t1565 - t1334;
t822 = -pkin(5) * t1479 + t1333 + t1563;
t795 = -pkin(5) * t1498 + t1320 * t822 - t1630;
t730 = pkin(10) * t926 + t1316 * t795 + t1321 * t794 - t1632;
t733 = -pkin(10) * t924 - t1316 * t794 + t1321 * t795;
t846 = t1317 * t926 + t1322 * t924;
t700 = -pkin(9) * t846 - t1317 * t730 + t1322 * t733;
t746 = -pkin(2) * t846 - pkin(3) * t924 + t1629 - t1315 * t822 + (-pkin(4) - t1517) * t1533;
t811 = t1323 * t848 + t1625;
t1360 = pkin(8) * t811 + t1318 * t700 + t1323 * t746;
t823 = (-t1044 - t1479) * pkin(5) + t1333;
t797 = -t1044 * t1513 - t1315 * t823 - t1586;
t798 = -t1588 + (-t1532 - t1523) * qJ(6) + (-t1539 - t1139) * pkin(5) + t1428;
t731 = pkin(10) * t931 + t1316 * t797 + t1321 * t798 - t1589;
t735 = -pkin(10) * t929 - t1316 * t798 + t1321 * t797;
t851 = t1317 * t931 + t1322 * t929;
t702 = -pkin(9) * t851 - t1317 * t731 + t1322 * t735;
t747 = -pkin(2) * t851 - pkin(3) * t929 + t1044 * t1436 - t1320 * t823 - t1587;
t815 = t1323 * t853 + t1578;
t1359 = pkin(8) * t815 + t1318 * t702 + t1323 * t747;
t785 = -t792 - t1610;
t736 = t1316 * t785 + t1450 * t1573 + t1628;
t754 = t1321 * t785 + t1518 * t1573 - t1627;
t706 = -t1317 * t736 + t1322 * t754 - t1644;
t732 = t1639 - t793;
t1358 = t1318 * t706 + t1323 * t732 + t1653;
t824 = t869 - t1588;
t883 = t1512 - t1586;
t759 = pkin(10) * t927 + t1316 * t883 + t1321 * t824 - t1589;
t770 = -pkin(10) * t925 - t1316 * t824 + t1321 * t883;
t847 = t1317 * t927 + t1322 * t925;
t713 = -pkin(9) * t847 - t1317 * t759 + t1322 * t770;
t768 = -pkin(2) * t847 - pkin(3) * t925 + pkin(4) * t1042 + t1510 - t1587;
t812 = t1323 * t849 + t1578;
t1357 = pkin(8) * t812 + t1318 * t713 + t1323 * t768;
t825 = t870 + t1631;
t886 = t1510 + t1630;
t760 = pkin(10) * t930 + t1316 * t886 + t1321 * t825 + t1632;
t771 = -pkin(10) * t928 - t1316 * t825 + t1321 * t886;
t850 = t1317 * t930 + t1322 * t928;
t714 = -pkin(9) * t850 - t1317 * t760 + t1322 * t771;
t769 = -pkin(2) * t850 - pkin(3) * t928 - pkin(4) * t1050 - t1512 - t1629;
t814 = t1323 * t852 - t1625;
t1356 = pkin(8) * t814 + t1318 * t714 + t1323 * t769;
t802 = t1317 * t885 + t1509;
t868 = -pkin(3) * t1097 + pkin(10) * t885;
t753 = -pkin(9) * t802 - pkin(10) * t1509 - t1317 * t868;
t772 = -pkin(2) * t802 - pkin(3) * t884;
t796 = t1097 * t1318 + t1323 * t803;
t1355 = pkin(8) * t796 + t1318 * t753 + t1323 * t772;
t831 = -pkin(3) * t1142 + pkin(10) * t1007 + t885;
t845 = -pkin(10) * t1005 - t884;
t915 = t1005 * t1322 + t1007 * t1317;
t761 = -pkin(9) * t915 - t1317 * t831 + t1322 * t845;
t880 = -pkin(2) * t915 - pkin(3) * t1005;
t894 = t1142 * t1318 + t1323 * t917;
t1354 = pkin(8) * t894 + t1318 * t761 + t1323 * t880;
t1003 = -pkin(10) * t1089 + t1491;
t957 = -pkin(3) * t1098 + pkin(10) * t1090 - t1490;
t993 = t1089 * t1322 + t1090 * t1317;
t858 = -pkin(9) * t993 + t1003 * t1322 - t1317 * t957;
t881 = -pkin(2) * t993 - pkin(3) * t1089 + t964;
t956 = t1098 * t1318 + t1323 * t994;
t1353 = pkin(8) * t956 + t1318 * t858 + t1323 * t881;
t1010 = -pkin(10) * t1116 + t1490;
t1024 = t1116 * t1322 + t1117 * t1317;
t966 = -pkin(3) * t1558 + pkin(10) * t1117 + t1491;
t872 = -pkin(9) * t1024 + t1010 * t1322 - t1317 * t966;
t887 = -pkin(2) * t1024 - pkin(3) * t1116 + t965;
t968 = t1025 * t1323 + t1318 * t1558;
t1352 = pkin(8) * t968 + t1318 * t872 + t1323 * t887;
t1158 = t1231 * t1317 + t1542;
t1058 = t1317 * (t1277 * t1447 + t1329 + t1458) - t1322 * (-pkin(9) * t1287 - t1260 - t1515) + (-t1317 * t1521 - t1322 * t1557 - t1158) * pkin(2);
t1104 = -pkin(9) * t1158 + t1484;
t1107 = t1159 * t1323 - t1197 * t1318;
t1350 = pkin(8) * t1107 + t1058 * t1323 + t1104 * t1318;
t1174 = t1244 * t1322 + t1481;
t1062 = -pkin(2) * t1174 + t1119;
t1108 = -pkin(9) * t1174 + t1483;
t1111 = t1175 * t1323 + t1199 * t1318;
t1349 = pkin(8) * t1111 + t1062 * t1323 + t1108 * t1318;
t1207 = t1255 * t1318 + t1256 * t1323;
t1348 = pkin(8) * t1207 + t1172;
t1082 = t1131 * t1323 - t1218 * t1318;
t1129 = -t1196 * t1317 + t1201 * t1322;
t973 = -pkin(9) * t1129 - t1026;
t1347 = pkin(8) * t1082 - t1129 * t1519 + t1318 * t973;
t987 = t1027 * t1323 + t1188 * t1318;
t1340 = pkin(8) * t987 + t1026 * t1427;
t1294 = t1319 * qJDD(1) + t1324 * t1525;
t1285 = t1453 * t1467;
t1284 = (t1311 - t1312) * t1467;
t1280 = -pkin(7) * t1294 + g(3) * t1324;
t1259 = t1453 * t1449;
t1253 = (t1451 + (qJD(2) + t1305) * t1505) * t1313;
t1249 = t1278 * t1323 - t1311 * t1449;
t1248 = -t1312 * t1449 + t1318 * t1376;
t1246 = t1282 * t1323 - t1474;
t1245 = -t1281 * t1318 + t1471;
t1230 = (t1278 * t1314 + t1373 * t1505) * t1318;
t1229 = (-t1314 * t1376 - t1373 * t1506) * t1323;
t1210 = (-t1271 * t1317 + t1272 * t1322) * t1298;
t1208 = -t1254 * t1318 - t1323 * t1557;
t1205 = -t1313 * t1557 + t1314 * t1379;
t1204 = -t1313 * t1256 + t1314 * t1381;
t1203 = -t1313 * t1255 + t1314 * t1380;
t1202 = t1313 * t1379 + t1314 * t1557;
t1195 = -t1313 * t1253 + t1314 * t1382;
t1194 = t1314 * t1253 + t1313 * t1382;
t1192 = t1228 * t1317 - t1272 * t1469;
t1190 = t1271 * t1470 - t1322 * t1366;
t1189 = t1323 * t1211 + t1318 * t1364;
t1187 = -t1313 * t1284 + t1314 * t1384;
t1186 = t1313 * t1285 + t1314 * t1383;
t1185 = -t1314 * t1285 + t1313 * t1383;
t1179 = t1251 * t1317 - t1480;
t1178 = t1252 * t1322 + t1546;
t1155 = -t1319 * t1205 + t1247 * t1324;
t1154 = t1205 * t1324 + t1319 * t1247;
t1148 = t1193 * t1323 - t1438;
t1147 = t1191 * t1323 + t1438;
t1146 = -t1319 * t1195 + t1242 * t1324;
t1145 = t1195 * t1324 + t1319 * t1242;
t1144 = t1313 * t1260 + t1314 * t1385;
t1143 = -t1314 * t1260 + t1313 * t1385;
t1135 = -t1313 * t1210 + t1314 * t1535;
t1133 = -t1319 * t1186 + t1207 * t1324;
t1132 = t1186 * t1324 + t1319 * t1207;
t1128 = t1197 * t1317 + t1199 * t1322;
t1121 = t1181 * t1323 - t1196 * t1318;
t1120 = t1180 * t1323 - t1201 * t1318;
t1114 = -t1460 + (-t1202 * t1313 - t1205 * t1314) * pkin(8);
t1106 = -t1459 + (-t1194 * t1313 - t1195 * t1314) * pkin(8);
t1105 = -pkin(1) * t1202 + t1313 * t1233 + t1314 * t1419;
t1096 = t1130 * t1323 - t1243 * t1318;
t1095 = -pkin(1) * t1194 + t1313 * t1234 + t1314 * t1420;
t1084 = -t1313 * t1192 + t1314 * t1367;
t1083 = -t1313 * t1190 + t1314 * t1368;
t1080 = t1156 * t1322 + t1157 * t1317;
t1076 = pkin(8) * t1172 * t1314 - pkin(1) * t1143;
t1075 = -t1319 * t1144 + t1172 * t1324;
t1074 = t1144 * t1324 + t1319 * t1172;
t1073 = t1323 * t1081 + t1318 * t1346;
t1072 = -pkin(1) * t1185 + t1314 * t1348;
t1071 = -pkin(2) * t1199 + pkin(9) * t1175 + t1484;
t1065 = -t1313 * t1179 + t1314 * t1386;
t1064 = -t1313 * t1178 + t1314 * t1387;
t1063 = (-t1143 * t1313 - t1144 * t1314) * pkin(8);
t1061 = pkin(2) * t1197 + pkin(9) * t1159 - t1483;
t1060 = (-t1185 * t1313 - t1186 * t1314) * pkin(8) - t1385;
t1056 = -t1313 * t1174 + t1314 * t1388;
t1055 = t1314 * t1174 + t1313 * t1388;
t1054 = -t1313 * t1158 + t1314 * t1389;
t1053 = t1314 * t1158 + t1313 * t1389;
t1039 = t1123 * t1322 + t1125 * t1317;
t1038 = t1122 * t1322 + t1124 * t1317;
t1023 = -t1313 * t1128 + t1314 * t1391;
t1009 = -t1313 * t1129 + t1314 * t1390;
t1008 = t1314 * t1129 + t1313 * t1390;
t1000 = t1093 * t1322 + t1094 * t1317;
t999 = t1091 * t1322 + t1092 * t1317;
t988 = -pkin(2) * t1188 + pkin(9) * t1027;
t978 = -t1319 * t1056 + t1111 * t1324;
t977 = t1056 * t1324 + t1319 * t1111;
t976 = -t1313 * t1080 + t1314 * t1536;
t975 = -t1319 * t1054 + t1107 * t1324;
t974 = t1054 * t1324 + t1319 * t1107;
t972 = t1002 * t1323 + t1440;
t971 = t1001 * t1323 - t1440;
t970 = t1041 * t1323 - t1099 * t1318;
t969 = t1040 * t1323 - t1103 * t1318;
t967 = pkin(2) * t1218 + pkin(9) * t1131 + t1027;
t959 = -t1319 * t1009 + t1082 * t1324;
t958 = t1009 * t1324 + t1319 * t1082;
t923 = -t1313 * t1026 + t1314 * t1394;
t922 = t1314 * t1026 + t1313 * t1394;
t914 = t1004 * t1322 + t1006 * t1317;
t909 = -t1313 * t1039 + t1314 * t1392;
t908 = -t1313 * t1038 + t1314 * t1393;
t907 = -t1182 * t1318 + t1323 * t916;
t906 = -t1313 * t1024 + t1314 * t1395;
t905 = t1314 * t1024 + t1313 * t1395;
t896 = -t1313 * t1000 + t1314 * t1371;
t895 = -t1313 * t999 + t1314 * t1372;
t891 = -t1318 * t1062 + t1323 * t1108 + (-t1055 * t1313 - t1056 * t1314) * pkin(8);
t890 = -t1313 * t993 + t1314 * t1398;
t889 = t1313 * t1398 + t1314 * t993;
t888 = -t1318 * t1058 + t1323 * t1104 + (-t1053 * t1313 - t1054 * t1314) * pkin(8);
t882 = -pkin(1) * t1055 - t1313 * t1071 + t1314 * t1349;
t879 = -t1319 * t923 + t1324 * t987;
t878 = t1319 * t987 + t1324 * t923;
t877 = -pkin(1) * t1053 - t1313 * t1061 + t1314 * t1350;
t859 = t1129 * t1520 + t1323 * t973 + (-t1008 * t1313 - t1009 * t1314) * pkin(8);
t856 = -t1319 * t906 + t1324 * t968;
t855 = t1319 * t968 + t1324 * t906;
t854 = -pkin(2) * t1558 + pkin(9) * t1025 + t1010 * t1317 + t1322 * t966;
t840 = -pkin(2) * t1098 + pkin(9) * t994 + t1003 * t1317 + t1322 * t957;
t839 = -t1319 * t890 + t1324 * t956;
t838 = t1319 * t956 + t1324 * t890;
t830 = -t1313 * t914 + t1314 * t1396;
t828 = -t1313 * t915 + t1314 * t1397;
t827 = t1313 * t1397 + t1314 * t915;
t817 = -pkin(1) * t1008 - t1313 * t967 + t1314 * t1347;
t804 = t1426 * t1026 + (-t1313 * t922 - t1314 * t923) * pkin(8);
t801 = -pkin(1) * t922 - t1313 * t988 + t1314 * t1340;
t791 = -t1319 * t828 + t1324 * t894;
t790 = t1319 * t894 + t1324 * t828;
t782 = -t1313 * t851 + t1314 * t1408;
t781 = -t1313 * t850 + t1314 * t1409;
t780 = t1313 * t1408 + t1314 * t851;
t779 = t1313 * t1409 + t1314 * t850;
t776 = -t1313 * t847 + t1314 * t1410;
t775 = -t1313 * t846 + t1314 * t1411;
t774 = t1313 * t1410 + t1314 * t847;
t773 = t1313 * t1411 + t1314 * t846;
t758 = -pkin(2) * t1142 + pkin(9) * t917 + t1317 * t845 + t1322 * t831;
t757 = -t1318 * t887 + t1323 * t872 + (-t1313 * t905 - t1314 * t906) * pkin(8);
t755 = -t1318 * t881 + t1323 * t858 + (-t1313 * t889 - t1314 * t890) * pkin(8);
t752 = -t1313 * t802 + t1314 * t1399;
t751 = t1313 * t1399 + t1314 * t802;
t748 = -pkin(2) * t1097 + pkin(9) * t803 - pkin(10) * t1511 + t1322 * t868;
t745 = -t1319 * t782 + t1324 * t815;
t744 = -t1319 * t781 + t1324 * t814;
t743 = t1319 * t815 + t1324 * t782;
t742 = t1319 * t814 + t1324 * t781;
t741 = -pkin(1) * t905 - t1313 * t854 + t1314 * t1352;
t740 = -t1319 * t776 + t1324 * t812;
t739 = -t1319 * t775 + t1324 * t811;
t738 = t1319 * t812 + t1324 * t776;
t737 = t1319 * t811 + t1324 * t775;
t734 = -pkin(1) * t889 - t1313 * t840 + t1314 * t1353;
t718 = -t1319 * t752 + t1324 * t796;
t717 = t1319 * t796 + t1324 * t752;
t716 = -t1318 * t880 + t1323 * t761 + (-t1313 * t827 - t1314 * t828) * pkin(8);
t711 = pkin(9) * t852 + t1317 * t771 + t1322 * t760 + t1633;
t710 = pkin(9) * t849 + t1317 * t770 + t1322 * t759 - t1590;
t705 = -pkin(1) * t827 - t1313 * t758 + t1314 * t1354;
t704 = t1317 * t754 + t1322 * t736 + t1638;
t699 = pkin(9) * t853 + t1317 * t735 + t1322 * t731 - t1590;
t698 = pkin(9) * t848 + t1317 * t733 + t1322 * t730 - t1633;
t696 = t1317 * t724 + t1322 * t719 + t1638;
t695 = -t1313 * t722 + t1314 * t1416;
t694 = t1313 * t1416 + t1314 * t722;
t693 = -t1318 * t772 + t1323 * t753 + (-t1313 * t751 - t1314 * t752) * pkin(8);
t691 = -t1318 * t769 + t1323 * t714 + (-t1313 * t779 - t1314 * t781) * pkin(8);
t690 = -t1318 * t768 + t1323 * t713 + (-t1313 * t774 - t1314 * t776) * pkin(8);
t689 = -pkin(1) * t751 - t1313 * t748 + t1314 * t1355;
t686 = -t1313 * t708 + t1314 * t1417;
t685 = t1313 * t1417 + t1314 * t708;
t684 = -t1318 * t747 + t1323 * t702 + (-t1313 * t780 - t1314 * t782) * pkin(8);
t683 = -t1319 * t695 + t1324 * t712;
t682 = t1319 * t712 + t1324 * t695;
t681 = -t1318 * t746 + t1323 * t700 + (-t1313 * t773 - t1314 * t775) * pkin(8);
t680 = -t1318 * t732 + t1323 * t706 + t1654;
t678 = -pkin(1) * t779 - t1313 * t711 + t1314 * t1356;
t677 = -pkin(1) * t774 - t1313 * t710 + t1314 * t1357;
t676 = -pkin(2) * t792 + pkin(9) * t723 + t1317 * t715 + t1322 * t707;
t675 = -t1318 * t720 + t1323 * t697 + t1654;
t674 = -t1319 * t686 + t1324 * t703;
t673 = t1319 * t703 + t1324 * t686;
t672 = -t1313 * t704 + t1314 * t1358 - t1659;
t671 = -pkin(1) * t780 - t1313 * t699 + t1314 * t1359;
t670 = -pkin(1) * t773 - t1313 * t698 + t1314 * t1360;
t669 = -t1313 * t696 + t1314 * t1361 - t1659;
t667 = -pkin(2) * t777 + pkin(9) * t709 + t1317 * t692 + t1322 * t688;
t666 = -t1318 * t701 + t1323 * t679 + (-t1313 * t694 - t1314 * t695) * pkin(8);
t665 = -pkin(1) * t694 - t1313 * t676 + t1314 * t1362;
t664 = -t1318 * t687 + t1323 * t668 + (-t1313 * t685 - t1314 * t686) * pkin(8);
t663 = -pkin(1) * t685 - t1313 * t667 + t1314 * t1363;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1294, -t1295, 0, t1262, 0, 0, 0, 0, 0, 0, t1155, t1146, t1133, t1075, 0, 0, 0, 0, 0, 0, t975, t978, t959, t879, 0, 0, 0, 0, 0, 0, t839, t856, t791, t718, 0, 0, 0, 0, 0, 0, t740, t744, t1657, t683, 0, 0, 0, 0, 0, 0, t745, t1657, t739, t674; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1295, -t1294, 0, t1261, 0, 0, 0, 0, 0, 0, t1154, t1145, t1132, t1074, 0, 0, 0, 0, 0, 0, t974, t977, t958, t878, 0, 0, 0, 0, 0, 0, t838, t855, t790, t717, 0, 0, 0, 0, 0, 0, t738, t742, t1655, t682, 0, 0, 0, 0, 0, 0, t743, t1655, t737, t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1202, t1194, t1185, t1143, 0, 0, 0, 0, 0, 0, t1053, t1055, t1008, t922, 0, 0, 0, 0, 0, 0, t889, t905, t827, t751, 0, 0, 0, 0, 0, 0, t774, t779, t1648, t694, 0, 0, 0, 0, 0, 0, t780, t1648, t773, t685; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1295, 0, -t1294, 0, t1425, -t1280, -t1261, -pkin(7) * t1261, -t1319 * t1230 + t1249 * t1324, -t1319 * t1187 + t1208 * t1324, -t1319 * t1203 + t1245 * t1324, -t1319 * t1229 + t1248 * t1324, -t1319 * t1204 + t1246 * t1324, t1324 * t1259 + t1319 * t1378, -pkin(7) * t1154 - t1319 * t1105 + t1114 * t1324, -pkin(7) * t1145 - t1319 * t1095 + t1106 * t1324, -pkin(7) * t1132 + t1060 * t1324 - t1319 * t1072, -pkin(7) * t1074 + t1063 * t1324 - t1319 * t1076, -t1319 * t1084 + t1148 * t1324, -t1319 * t1023 + t1096 * t1324, -t1319 * t1064 + t1120 * t1324, -t1319 * t1083 + t1147 * t1324, -t1319 * t1065 + t1121 * t1324, -t1319 * t1135 + t1189 * t1324, -pkin(7) * t974 - t1319 * t877 + t1324 * t888, -pkin(7) * t977 - t1319 * t882 + t1324 * t891, -pkin(7) * t958 - t1319 * t817 + t1324 * t859, -pkin(7) * t878 - t1319 * t801 + t1324 * t804, -t1319 * t896 + t1324 * t972, -t1319 * t830 + t1324 * t907, -t1319 * t908 + t1324 * t969, -t1319 * t895 + t1324 * t971, -t1319 * t909 + t1324 * t970, t1073 * t1324 - t1319 * t976, -pkin(7) * t838 - t1319 * t734 + t1324 * t755, -pkin(7) * t855 - t1319 * t741 + t1324 * t757, -pkin(7) * t790 - t1319 * t705 + t1324 * t716, -pkin(7) * t717 - t1319 * t689 + t1324 * t693, t1566, t1675, t1658, t1618, t1676, t1619, -pkin(7) * t738 - t1319 * t677 + t1324 * t690, -pkin(7) * t742 - t1319 * t678 + t1324 * t691, -t1319 * t672 + t1324 * t680 - t1666, -pkin(7) * t682 - t1319 * t665 + t1324 * t666, t1566, t1658, -t1675, t1619, -t1676, t1618, -pkin(7) * t743 - t1319 * t671 + t1324 * t684, -t1319 * t669 + t1324 * t675 - t1666, -pkin(7) * t737 - t1319 * t670 + t1324 * t681, -pkin(7) * t673 - t1319 * t663 + t1324 * t664; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1294, 0, t1295, 0, t1280, t1425, t1262, pkin(7) * t1262, t1230 * t1324 + t1319 * t1249, t1187 * t1324 + t1319 * t1208, t1203 * t1324 + t1319 * t1245, t1229 * t1324 + t1319 * t1248, t1204 * t1324 + t1319 * t1246, t1319 * t1259 - t1324 * t1378, pkin(7) * t1155 + t1105 * t1324 + t1319 * t1114, pkin(7) * t1146 + t1095 * t1324 + t1319 * t1106, pkin(7) * t1133 + t1319 * t1060 + t1072 * t1324, pkin(7) * t1075 + t1319 * t1063 + t1076 * t1324, t1084 * t1324 + t1319 * t1148, t1023 * t1324 + t1319 * t1096, t1064 * t1324 + t1319 * t1120, t1083 * t1324 + t1319 * t1147, t1065 * t1324 + t1319 * t1121, t1135 * t1324 + t1319 * t1189, pkin(7) * t975 + t1319 * t888 + t1324 * t877, pkin(7) * t978 + t1319 * t891 + t1324 * t882, pkin(7) * t959 + t1319 * t859 + t1324 * t817, pkin(7) * t879 + t1319 * t804 + t1324 * t801, t1319 * t972 + t1324 * t896, t1319 * t907 + t1324 * t830, t1319 * t969 + t1324 * t908, t1319 * t971 + t1324 * t895, t1319 * t970 + t1324 * t909, t1319 * t1073 + t1324 * t976, pkin(7) * t839 + t1319 * t755 + t1324 * t734, pkin(7) * t856 + t1319 * t757 + t1324 * t741, pkin(7) * t791 + t1319 * t716 + t1324 * t705, pkin(7) * t718 + t1319 * t693 + t1324 * t689, t1567, -t1673, t1656, t1616, -t1674, t1617, pkin(7) * t740 + t1319 * t690 + t1324 * t677, pkin(7) * t744 + t1319 * t691 + t1324 * t678, t1319 * t680 + t1324 * t672 + t1665, pkin(7) * t683 + t1319 * t666 + t1324 * t665, t1567, t1656, t1673, t1617, t1674, t1616, pkin(7) * t745 + t1319 * t684 + t1324 * t671, t1319 * t675 + t1324 * t669 + t1665, pkin(7) * t739 + t1319 * t681 + t1324 * t670, pkin(7) * t674 + t1319 * t664 + t1324 * t663; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1300, t1301, 0, 0, (-qJD(1) * t1435 * t1466 + t1278 * t1313) * t1318, t1314 * t1284 + t1313 * t1384, t1314 * t1255 + t1313 * t1380, (t1310 * t1435 * t1506 - t1313 * t1376) * t1323, t1314 * t1256 + t1313 * t1381, t1314 * t1429, pkin(1) * t1205 - t1314 * t1233 + t1313 * t1419, pkin(1) * t1195 - t1314 * t1234 + t1313 * t1420, pkin(1) * t1186 + t1313 * t1348, pkin(1) * t1144 + t1172 * t1516, t1314 * t1192 + t1313 * t1367, t1314 * t1128 + t1313 * t1391, t1314 * t1178 + t1313 * t1387, t1314 * t1190 + t1313 * t1368, t1314 * t1179 + t1313 * t1386, t1314 * t1210 + t1313 * t1535, pkin(1) * t1054 + t1314 * t1061 + t1313 * t1350, pkin(1) * t1056 + t1314 * t1071 + t1313 * t1349, pkin(1) * t1009 + t1313 * t1347 + t1314 * t967, pkin(1) * t923 + t1313 * t1340 + t1314 * t988, t1314 * t1000 + t1313 * t1371, t1313 * t1396 + t1314 * t914, t1314 * t1038 + t1313 * t1393, t1313 * t1372 + t1314 * t999, t1314 * t1039 + t1313 * t1392, t1314 * t1080 + t1313 * t1536, pkin(1) * t890 + t1313 * t1353 + t1314 * t840, pkin(1) * t906 + t1313 * t1352 + t1314 * t854, pkin(1) * t828 + t1313 * t1354 + t1314 * t758, pkin(1) * t752 + t1313 * t1355 + t1314 * t748, t1549, -t1667, t1647, t1598, -t1668, t1597, pkin(1) * t776 + t1313 * t1357 + t1314 * t710, pkin(1) * t781 + t1313 * t1356 + t1314 * t711, t1313 * t1358 + t1314 * t704 + t1660, pkin(1) * t695 + t1313 * t1362 + t1314 * t676, t1549, t1647, t1667, t1597, t1668, t1598, pkin(1) * t782 + t1313 * t1359 + t1314 * t699, t1313 * t1361 + t1314 * t696 + t1660, pkin(1) * t775 + t1313 * t1360 + t1314 * t698, pkin(1) * t686 + t1313 * t1363 + t1314 * t667;];
tauB_reg  = t1;
