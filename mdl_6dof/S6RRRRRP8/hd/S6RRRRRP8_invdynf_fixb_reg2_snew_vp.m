% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 05:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP8_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:54:55
% EndTime: 2019-05-08 05:55:12
% DurationCPUTime: 17.57s
% Computational Cost: add. (95295->358), mult. (203648->497), div. (0->0), fcn. (166810->12), ass. (0->278)
t3001 = cos(pkin(6));
t2996 = qJD(1) * t3001 + qJD(2);
t3004 = sin(qJ(3));
t3009 = cos(qJ(3));
t3000 = sin(pkin(6));
t3005 = sin(qJ(2));
t3074 = qJD(1) * t3005;
t3062 = t3000 * t3074;
t2971 = t2996 * t3004 + t3009 * t3062;
t3003 = sin(qJ(4));
t3008 = cos(qJ(4));
t3055 = t2996 * t3009 - t3004 * t3062;
t2954 = t2971 * t3008 + t3003 * t3055;
t3010 = cos(qJ(2));
t3065 = t3000 * t3010;
t3061 = qJD(1) * t3065;
t3063 = qJDD(1) * t3000;
t2976 = qJD(2) * t3061 + t3005 * t3063;
t3054 = qJDD(1) * t3001 + qJDD(2);
t2945 = qJD(3) * t3055 + t3009 * t2976 + t3004 * t3054;
t3056 = t3004 * t2976 - t3009 * t3054;
t3028 = -qJD(3) * t2971 - t3056;
t3058 = t3003 * t2945 - t3008 * t3028;
t3025 = qJD(4) * t2954 + qJDD(5) + t3058;
t2987 = -qJD(3) + t3061;
t2981 = -qJD(4) + t2987;
t3002 = sin(qJ(5));
t3007 = cos(qJ(5));
t2936 = t2954 * t3002 + t2981 * t3007;
t2938 = t2954 * t3007 - t2981 * t3002;
t3069 = t2936 * t2938;
t2870 = t3025 + t3069;
t2935 = t2938 ^ 2;
t2952 = t2971 * t3003 - t3008 * t3055;
t2951 = qJD(5) + t2952;
t3083 = t2951 ^ 2;
t3087 = -t2935 - t3083;
t2839 = t2870 * t3007 + t3002 * t3087;
t3021 = -t3008 * t2945 - t3003 * t3028;
t2898 = -t2952 * qJD(4) - t3021;
t2995 = t3010 * t3063;
t3029 = qJD(2) * t3062 - t2995;
t3026 = qJDD(3) + t3029;
t3023 = qJDD(4) + t3026;
t3019 = -qJD(5) * t2936 + t2898 * t3007 + t3002 * t3023;
t3068 = t2936 * t2951;
t3017 = t3019 - t3068;
t2815 = t2839 * t3003 + t3008 * t3017;
t2817 = t2839 * t3008 - t3003 * t3017;
t2789 = t2815 * t3009 + t2817 * t3004;
t2795 = t2815 * t3004 - t2817 * t3009;
t2837 = t2870 * t3002 - t3007 * t3087;
t3042 = t2795 * t3005 + t2837 * t3010;
t2766 = t3000 * t2789 + t3001 * t3042;
t2779 = t2795 * t3010 - t2837 * t3005;
t3006 = sin(qJ(1));
t3011 = cos(qJ(1));
t3121 = t2766 * t3006 - t2779 * t3011;
t3120 = t2766 * t3011 + t2779 * t3006;
t2764 = -t3001 * t2789 + t3000 * t3042;
t2859 = t3019 + t3068;
t3059 = t3002 * t2898 - t3007 * t3023;
t3024 = (-qJD(5) + t2951) * t2938 - t3059;
t3085 = -t2859 * t3007 + t3002 * t3024;
t2903 = t2936 ^ 2;
t2886 = t2935 + t2903;
t3084 = t2859 * t3002 + t3007 * t3024;
t3096 = t2886 * t3008 + t3003 * t3084;
t3097 = -t2886 * t3003 + t3008 * t3084;
t3102 = -t3004 * t3096 + t3009 * t3097;
t3106 = t3005 * t3085 + t3010 * t3102;
t3103 = t3004 * t3097 + t3009 * t3096;
t3107 = t3005 * t3102 - t3010 * t3085;
t3110 = -t3000 * t3103 + t3001 * t3107;
t3115 = -t3006 * t3110 + t3011 * t3106;
t3114 = t3006 * t3106 + t3011 * t3110;
t3111 = t3000 * t3107 + t3001 * t3103;
t2871 = t3025 - t3069;
t3086 = -t3083 - t2903;
t3090 = -t2871 * t3002 + t3007 * t3086;
t3101 = t3003 * t3090;
t3091 = t2871 * t3007 + t3002 * t3086;
t3100 = t3005 * t3091;
t3099 = t3008 * t3090;
t3098 = t3010 * t3091;
t3051 = t3055 * t2971;
t2941 = t3026 + t3051;
t3053 = t3055 ^ 2;
t3050 = t3055 * t2987;
t2929 = -t2945 - t3050;
t3082 = t2952 ^ 2;
t3081 = t2954 ^ 2;
t3080 = t2971 ^ 2;
t3079 = t2981 ^ 2;
t3078 = t2987 ^ 2;
t3077 = t2996 ^ 2;
t3076 = t3001 * g(3);
t3075 = qJD(1) * t3000;
t3067 = t2952 * t2954;
t3012 = qJD(1) ^ 2;
t3066 = t3000 ^ 2 * t3012;
t3064 = qJD(4) + t2981;
t2990 = -g(1) * t3011 - g(2) * t3006;
t2972 = -pkin(1) * t3012 + pkin(8) * t3063 + t2990;
t2975 = (-pkin(2) * t3010 - pkin(9) * t3005) * t3075;
t2989 = t3006 * g(1) - t3011 * g(2);
t3022 = t3012 * t3000 * pkin(8) + qJDD(1) * pkin(1) + t2989;
t3020 = t3001 * t3022;
t3018 = (-t3000 * g(3) + t3020) * t3005;
t3015 = t3054 * pkin(9) - t3077 * pkin(2) + (t2975 * t3075 + t2972) * t3010 + t3018;
t3016 = -t2995 * pkin(2) - t2976 * pkin(9) - t3076 + ((-pkin(9) * t2996 * t3010 + (qJD(2) + t2996) * t3005 * pkin(2)) * qJD(1) - t3022) * t3000;
t2890 = t3004 * t3016 + t3009 * t3015;
t2958 = -pkin(3) * t2987 - pkin(10) * t2971;
t2869 = -pkin(3) * t3053 + pkin(10) * t3028 + t2958 * t2987 + t2890;
t2889 = -t3004 * t3015 + t3009 * t3016;
t3013 = pkin(3) * t2941 + pkin(10) * t2929 + t2889;
t2834 = t2869 * t3008 + t3003 * t3013;
t2917 = pkin(4) * t2952 - pkin(11) * t2954;
t2825 = -pkin(4) * t3079 + pkin(11) * t3023 - t2917 * t2952 + t2834;
t3057 = t3005 * t2972 - t3010 * t3020;
t2923 = -t3054 * pkin(2) - t3077 * pkin(9) + (g(3) * t3010 + t2975 * t3074) * t3000 + t3057;
t2878 = -pkin(3) * t3028 - pkin(10) * t3053 + t2971 * t2958 + t2923;
t2879 = (qJD(4) - t2981) * t2954 + t3058;
t3060 = -t2952 * t2981 - t2898;
t3014 = pkin(4) * t2879 + pkin(11) * t3060 + t2878;
t2799 = t2825 * t3007 + t3002 * t3014;
t2798 = -t2825 * t3002 + t3007 * t3014;
t2833 = -t3003 * t2869 + t3008 * t3013;
t3052 = t2996 * t3061;
t2902 = pkin(5) * t2936 - qJ(6) * t2938;
t2781 = -pkin(5) * t3083 + qJ(6) * t3025 + 0.2e1 * qJD(6) * t2951 - t2902 * t2936 + t2799;
t2784 = -pkin(5) * t3025 - qJ(6) * t3083 + t2902 * t2938 + qJDD(6) - t2798;
t2763 = t2781 * t3007 + t2784 * t3002;
t2824 = -pkin(4) * t3023 - pkin(11) * t3079 + t2954 * t2917 - t2833;
t3027 = -qJD(5) * t2938 - t3059;
t2797 = -t3027 * pkin(5) + (pkin(5) * t2951 - 0.2e1 * qJD(6)) * t2938 + t2824 - t3017 * qJ(6);
t2750 = t2763 * t3003 - t2797 * t3008;
t2751 = t2763 * t3008 + t2797 * t3003;
t2746 = -t2750 * t3004 + t2751 * t3009;
t2762 = t2781 * t3002 - t2784 * t3007;
t3049 = t2746 * t3005 - t2762 * t3010;
t2771 = -t2798 * t3002 + t2799 * t3007;
t2768 = t2771 * t3003 - t2824 * t3008;
t2769 = t2771 * t3008 + t2824 * t3003;
t2749 = -t2768 * t3004 + t2769 * t3009;
t2770 = t2798 * t3007 + t2799 * t3002;
t3048 = t2749 * t3005 - t2770 * t3010;
t2800 = t2833 * t3008 + t2834 * t3003;
t2801 = -t2833 * t3003 + t2834 * t3008;
t2776 = -t2800 * t3004 + t2801 * t3009;
t3047 = t2776 * t3005 - t2878 * t3010;
t2855 = (qJD(5) + t2951) * t2938 + t3059;
t2816 = -t2855 * t3008 + t3101;
t2818 = t2855 * t3003 + t3099;
t2792 = -t2816 * t3004 + t2818 * t3009;
t3043 = t2792 * t3005 - t3098;
t2856 = t2938 * t2951 - t3027;
t2820 = -t2856 * t3008 + t3101;
t2822 = t2856 * t3003 + t3099;
t2796 = -t2820 * t3004 + t2822 * t3009;
t3041 = t2796 * t3005 - t3098;
t2880 = -t2954 * t3064 - t3058;
t2882 = t2952 * t3064 + t3021;
t2847 = t2880 * t3003 + t2882 * t3008;
t2848 = t2880 * t3008 - t2882 * t3003;
t2812 = -t2847 * t3004 + t2848 * t3009;
t2899 = -t3081 - t3082;
t3040 = t2812 * t3005 - t2899 * t3010;
t2908 = t3023 - t3067;
t2914 = -t3079 - t3082;
t2876 = t2908 * t3008 + t2914 * t3003;
t2877 = -t2908 * t3003 + t2914 * t3008;
t2842 = -t2876 * t3004 + t2877 * t3009;
t3039 = t2842 * t3005 - t2879 * t3010;
t2907 = -t3023 - t3067;
t2932 = -t3079 - t3081;
t2887 = t2907 * t3003 + t2932 * t3008;
t2888 = t2907 * t3008 - t2932 * t3003;
t2852 = -t2887 * t3004 + t2888 * t3009;
t3038 = t2852 * t3005 + t3010 * t3060;
t2854 = -t2889 * t3004 + t2890 * t3009;
t3037 = t2854 * t3005 - t2923 * t3010;
t2927 = (-qJD(3) - t2987) * t2971 - t3056;
t2894 = t2927 * t3009 - t2929 * t3004;
t2939 = -t3053 - t3080;
t3036 = t2894 * t3005 - t2939 * t3010;
t2946 = -t3078 - t3053;
t2905 = -t2941 * t3004 + t2946 * t3009;
t2926 = (qJD(3) - t2987) * t2971 + t3056;
t3035 = t2905 * t3005 - t2926 * t3010;
t2940 = t3051 - t3026;
t2956 = -t3078 - t3080;
t2916 = t2940 * t3009 - t2956 * t3004;
t2928 = -t3050 + t2945;
t3034 = t2916 * t3005 - t2928 * t3010;
t2947 = -g(3) * t3065 - t3057;
t2948 = t3010 * t2972 + t3018;
t3033 = t2947 * t3010 + t2948 * t3005;
t2960 = t3052 - t2976;
t2979 = t2996 * t3062;
t2961 = t2979 - t3029;
t3032 = t2960 * t3010 + t2961 * t3005;
t2998 = t3005 ^ 2;
t2968 = -t2998 * t3066 - t3077;
t2986 = t3010 * t3005 * t3066;
t2974 = t2986 - t3054;
t3031 = t2968 * t3010 + t2974 * t3005;
t2973 = t2986 + t3054;
t2999 = t3010 ^ 2;
t2977 = -t2999 * t3066 - t3077;
t3030 = t2973 * t3010 + t2977 * t3005;
t2984 = -qJDD(1) * t3006 - t3011 * t3012;
t2983 = qJDD(1) * t3011 - t3006 * t3012;
t2978 = (-t2998 - t2999) * t3066;
t2964 = -t3000 * t3022 - t3076;
t2962 = t2979 + t3029;
t2959 = t3052 + t2976;
t2957 = -t2973 * t3005 + t2977 * t3010;
t2955 = -t2968 * t3005 + t2974 * t3010;
t2933 = -t2960 * t3005 + t2961 * t3010;
t2931 = -t3000 * t2962 + t3001 * t3030;
t2930 = t3001 * t2962 + t3000 * t3030;
t2925 = -t3000 * t2959 + t3001 * t3031;
t2924 = t3001 * t2959 + t3000 * t3031;
t2922 = -t3000 * t2978 + t3001 * t3032;
t2921 = t3001 * t2978 + t3000 * t3032;
t2915 = t2940 * t3004 + t2956 * t3009;
t2913 = -t2947 * t3005 + t2948 * t3010;
t2904 = t2941 * t3009 + t2946 * t3004;
t2901 = -t3000 * t2964 + t3001 * t3033;
t2900 = t3001 * t2964 + t3000 * t3033;
t2893 = t2927 * t3004 + t2929 * t3009;
t2884 = t2916 * t3010 + t2928 * t3005;
t2883 = t2905 * t3010 + t2926 * t3005;
t2875 = t2894 * t3010 + t2939 * t3005;
t2867 = -t3000 * t2915 + t3001 * t3034;
t2866 = t3001 * t2915 + t3000 * t3034;
t2865 = -t3000 * t2904 + t3001 * t3035;
t2864 = t3001 * t2904 + t3000 * t3035;
t2853 = t2889 * t3009 + t2890 * t3004;
t2851 = t2887 * t3009 + t2888 * t3004;
t2850 = -t3000 * t2893 + t3001 * t3036;
t2849 = t3001 * t2893 + t3000 * t3036;
t2841 = t2876 * t3009 + t2877 * t3004;
t2836 = t2854 * t3010 + t2923 * t3005;
t2835 = t2852 * t3010 - t3005 * t3060;
t2830 = t2842 * t3010 + t2879 * t3005;
t2814 = -t3000 * t2853 + t3001 * t3037;
t2813 = t3001 * t2853 + t3000 * t3037;
t2811 = t2847 * t3009 + t2848 * t3004;
t2806 = -t3000 * t2851 + t3001 * t3038;
t2805 = t3001 * t2851 + t3000 * t3038;
t2804 = t2812 * t3010 + t2899 * t3005;
t2803 = -t3000 * t2841 + t3001 * t3039;
t2802 = t3001 * t2841 + t3000 * t3039;
t2794 = t2820 * t3009 + t2822 * t3004;
t2790 = t2816 * t3009 + t2818 * t3004;
t2783 = -t3000 * t2811 + t3001 * t3040;
t2782 = t3001 * t2811 + t3000 * t3040;
t2780 = t2796 * t3010 + t3100;
t2778 = t2792 * t3010 + t3100;
t2775 = t2800 * t3009 + t2801 * t3004;
t2772 = t2776 * t3010 + t2878 * t3005;
t2767 = -t3000 * t2794 + t3001 * t3041;
t2765 = t3001 * t2794 + t3000 * t3041;
t2761 = -t3000 * t2790 + t3001 * t3043;
t2759 = t3001 * t2790 + t3000 * t3043;
t2753 = -t3000 * t2775 + t3001 * t3047;
t2752 = t3001 * t2775 + t3000 * t3047;
t2748 = t2768 * t3009 + t2769 * t3004;
t2747 = t2749 * t3010 + t2770 * t3005;
t2745 = t2750 * t3009 + t2751 * t3004;
t2744 = t2746 * t3010 + t2762 * t3005;
t2743 = -t3000 * t2748 + t3001 * t3048;
t2742 = t3001 * t2748 + t3000 * t3048;
t2741 = -t3000 * t2745 + t3001 * t3049;
t2740 = t3001 * t2745 + t3000 * t3049;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2984, -t2983, 0, -t2989 * t3006 + t2990 * t3011, 0, 0, 0, 0, 0, 0, -t2931 * t3006 + t2957 * t3011, -t2925 * t3006 + t2955 * t3011, -t2922 * t3006 + t2933 * t3011, -t2901 * t3006 + t2913 * t3011, 0, 0, 0, 0, 0, 0, -t2865 * t3006 + t2883 * t3011, -t2867 * t3006 + t2884 * t3011, -t2850 * t3006 + t2875 * t3011, -t2814 * t3006 + t2836 * t3011, 0, 0, 0, 0, 0, 0, -t2803 * t3006 + t2830 * t3011, -t2806 * t3006 + t2835 * t3011, -t2783 * t3006 + t2804 * t3011, -t2753 * t3006 + t2772 * t3011, 0, 0, 0, 0, 0, 0, -t2761 * t3006 + t2778 * t3011, -t3121, t3115, -t2743 * t3006 + t2747 * t3011, 0, 0, 0, 0, 0, 0, -t2767 * t3006 + t2780 * t3011, t3115, t3121, -t2741 * t3006 + t2744 * t3011; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2983, t2984, 0, t2989 * t3011 + t2990 * t3006, 0, 0, 0, 0, 0, 0, t2931 * t3011 + t2957 * t3006, t2925 * t3011 + t2955 * t3006, t2922 * t3011 + t2933 * t3006, t2901 * t3011 + t2913 * t3006, 0, 0, 0, 0, 0, 0, t2865 * t3011 + t2883 * t3006, t2867 * t3011 + t2884 * t3006, t2850 * t3011 + t2875 * t3006, t2814 * t3011 + t2836 * t3006, 0, 0, 0, 0, 0, 0, t2803 * t3011 + t2830 * t3006, t2806 * t3011 + t2835 * t3006, t2783 * t3011 + t2804 * t3006, t2753 * t3011 + t2772 * t3006, 0, 0, 0, 0, 0, 0, t2761 * t3011 + t2778 * t3006, t3120, t3114, t2743 * t3011 + t2747 * t3006, 0, 0, 0, 0, 0, 0, t2767 * t3011 + t2780 * t3006, t3114, -t3120, t2741 * t3011 + t2744 * t3006; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2930, t2924, t2921, t2900, 0, 0, 0, 0, 0, 0, t2864, t2866, t2849, t2813, 0, 0, 0, 0, 0, 0, t2802, t2805, t2782, t2752, 0, 0, 0, 0, 0, 0, t2759, t2764, t3111, t2742, 0, 0, 0, 0, 0, 0, t2765, t3111, -t2764, t2740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3012, -qJDD(1), 0, t2990, 0, 0, 0, 0, 0, 0, t2957, t2955, t2933, t2913, 0, 0, 0, 0, 0, 0, t2883, t2884, t2875, t2836, 0, 0, 0, 0, 0, 0, t2830, t2835, t2804, t2772, 0, 0, 0, 0, 0, 0, t2778, t2779, t3106, t2747, 0, 0, 0, 0, 0, 0, t2780, t3106, -t2779, t2744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3012, 0, t2989, 0, 0, 0, 0, 0, 0, t2931, t2925, t2922, t2901, 0, 0, 0, 0, 0, 0, t2865, t2867, t2850, t2814, 0, 0, 0, 0, 0, 0, t2803, t2806, t2783, t2753, 0, 0, 0, 0, 0, 0, t2761, t2766, t3110, t2743, 0, 0, 0, 0, 0, 0, t2767, t3110, -t2766, t2741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2930, t2924, t2921, t2900, 0, 0, 0, 0, 0, 0, t2864, t2866, t2849, t2813, 0, 0, 0, 0, 0, 0, t2802, t2805, t2782, t2752, 0, 0, 0, 0, 0, 0, t2759, t2764, t3111, t2742, 0, 0, 0, 0, 0, 0, t2765, t3111, -t2764, t2740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2977, t2974, t2961, t2948, 0, 0, 0, 0, 0, 0, t2905, t2916, t2894, t2854, 0, 0, 0, 0, 0, 0, t2842, t2852, t2812, t2776, 0, 0, 0, 0, 0, 0, t2792, t2795, t3102, t2749, 0, 0, 0, 0, 0, 0, t2796, t3102, -t2795, t2746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2973, t2968, t2960, t2947, 0, 0, 0, 0, 0, 0, -t2926, -t2928, -t2939, -t2923, 0, 0, 0, 0, 0, 0, -t2879, t3060, -t2899, -t2878, 0, 0, 0, 0, 0, 0, -t3091, t2837, -t3085, -t2770, 0, 0, 0, 0, 0, 0, -t3091, -t3085, -t2837, -t2762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2962, t2959, t2978, t2964, 0, 0, 0, 0, 0, 0, t2904, t2915, t2893, t2853, 0, 0, 0, 0, 0, 0, t2841, t2851, t2811, t2775, 0, 0, 0, 0, 0, 0, t2790, -t2789, t3103, t2748, 0, 0, 0, 0, 0, 0, t2794, t3103, t2789, t2745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2946, t2940, t2927, t2890, 0, 0, 0, 0, 0, 0, t2877, t2888, t2848, t2801, 0, 0, 0, 0, 0, 0, t2818, -t2817, t3097, t2769, 0, 0, 0, 0, 0, 0, t2822, t3097, t2817, t2751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2941, t2956, t2929, t2889, 0, 0, 0, 0, 0, 0, t2876, t2887, t2847, t2800, 0, 0, 0, 0, 0, 0, t2816, -t2815, t3096, t2768, 0, 0, 0, 0, 0, 0, t2820, t3096, t2815, t2750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2926, t2928, t2939, t2923, 0, 0, 0, 0, 0, 0, t2879, -t3060, t2899, t2878, 0, 0, 0, 0, 0, 0, t3091, -t2837, t3085, t2770, 0, 0, 0, 0, 0, 0, t3091, t3085, t2837, t2762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2914, t2907, t2880, t2834, 0, 0, 0, 0, 0, 0, t3090, -t2839, t3084, t2771, 0, 0, 0, 0, 0, 0, t3090, t3084, t2839, t2763; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2908, t2932, t2882, t2833, 0, 0, 0, 0, 0, 0, -t2855, -t3017, t2886, -t2824, 0, 0, 0, 0, 0, 0, -t2856, t2886, t3017, -t2797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2879, -t3060, t2899, t2878, 0, 0, 0, 0, 0, 0, t3091, -t2837, t3085, t2770, 0, 0, 0, 0, 0, 0, t3091, t3085, t2837, t2762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3086, -t2870, t3024, t2799, 0, 0, 0, 0, 0, 0, t3086, t3024, t2870, t2781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2871, t3087, -t2859, t2798, 0, 0, 0, 0, 0, 0, t2871, -t2859, -t3087, -t2784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2855, t3017, -t2886, t2824, 0, 0, 0, 0, 0, 0, t2856, -t2886, -t3017, t2797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3086, t3024, t2870, t2781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2856, -t2886, -t3017, t2797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2871, t2859, t3087, t2784;];
f_new_reg  = t1;
