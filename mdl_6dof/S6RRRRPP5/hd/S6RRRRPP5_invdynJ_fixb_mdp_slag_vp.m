% Calculate vector of inverse dynamics joint torques for
% S6RRRRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPP5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPP5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: pkin has to be [9x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRRPP5_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:09:29
% EndTime: 2019-03-09 21:09:48
% DurationCPUTime: 13.48s
% Computational Cost: add. (9759->755), mult. (21075->873), div. (0->0), fcn. (14561->10), ass. (0->317)
t744 = cos(qJ(3));
t742 = sin(qJ(2));
t745 = cos(qJ(2));
t889 = t744 * t745;
t793 = pkin(3) * t742 - pkin(9) * t889;
t747 = -pkin(9) - pkin(8);
t840 = qJD(3) * t747;
t810 = pkin(2) * t742 - pkin(8) * t745;
t656 = t810 * qJD(1);
t741 = sin(qJ(3));
t867 = qJD(1) * t742;
t831 = t741 * t867;
t873 = pkin(7) * t831 + t744 * t656;
t958 = qJD(1) * t793 - t744 * t840 + t873;
t636 = t741 * t656;
t895 = t742 * t744;
t898 = t741 * t745;
t957 = -t636 - (-pkin(7) * t895 - pkin(9) * t898) * qJD(1) + t741 * t840;
t740 = sin(qJ(4));
t866 = qJD(1) * t745;
t819 = qJD(3) + t866;
t849 = qJDD(1) * t742;
t768 = qJD(2) * t819 + t849;
t851 = qJD(1) * qJD(3);
t826 = t742 * t851;
t797 = -qJDD(2) + t826;
t782 = t797 * t741;
t753 = t768 * t744 - t782;
t791 = qJD(2) * qJD(3) + t849;
t852 = qJD(1) * qJD(2);
t827 = t745 * t852;
t948 = t791 + t827;
t816 = t741 * t948 + t744 * t826;
t777 = qJDD(2) * t744 - t816;
t862 = qJD(2) * t744;
t650 = -t831 + t862;
t864 = qJD(2) * t741;
t651 = t744 * t867 + t864;
t924 = cos(qJ(4));
t786 = t740 * t650 + t651 * t924;
t513 = qJD(4) * t786 + t740 * t753 - t924 * t777;
t578 = t786 ^ 2;
t727 = t745 * qJDD(1);
t933 = -t742 * t852 + t727;
t647 = qJDD(3) - t933;
t641 = qJDD(4) + t647;
t830 = qJD(4) * t924;
t857 = qJD(4) * t740;
t512 = -t650 * t830 + t651 * t857 - t740 * t777 - t924 * t753;
t580 = -t924 * t650 + t651 * t740;
t704 = -qJD(3) + t866;
t689 = -qJD(4) + t704;
t909 = t580 * t689;
t766 = t512 + t909;
t908 = t786 * t689;
t926 = t580 ^ 2;
t955 = t580 * t786;
t956 = -t766 * MDP(20) + t641 * MDP(22) + MDP(18) * t955 + (-t513 - t908) * MDP(21) + (t578 - t926) * MDP(19);
t838 = t741 * t866;
t839 = t924 * t744;
t901 = t740 * t741;
t931 = qJD(3) + qJD(4);
t932 = t924 * qJD(3) + t830;
t877 = -t740 * t838 - t744 * t932 + t839 * t866 + t901 * t931;
t913 = qJ(5) * t580;
t953 = qJ(6) * t580;
t915 = qJD(2) * pkin(2);
t674 = pkin(7) * t867 - t915;
t790 = pkin(3) * t650 - t674;
t771 = qJ(5) * t786 + t790;
t524 = pkin(4) * t580 - t771;
t952 = t524 * t580;
t951 = t580 * t790;
t676 = t747 * t741;
t677 = t747 * t744;
t950 = t676 * t830 + t677 * t857 - t740 * t958 + t957 * t924;
t653 = t740 * t744 + t741 * t924;
t595 = t931 * t653;
t876 = -t653 * t866 + t595;
t936 = t641 * qJ(5) - t689 * qJD(5);
t725 = pkin(7) * t866;
t859 = qJD(3) * t741;
t811 = -t725 + (-t838 + t859) * pkin(3);
t746 = cos(qJ(1));
t894 = t742 * t746;
t743 = sin(qJ(1));
t896 = t742 * t743;
t949 = g(1) * t894 + g(2) * t896;
t861 = qJD(2) * t745;
t837 = t741 * t861;
t858 = qJD(3) * t744;
t947 = t742 * t858 + t837;
t925 = pkin(4) + pkin(5);
t500 = -t580 * t925 + qJD(6) + t771;
t939 = t513 * qJ(6) + t580 * qJD(6);
t946 = t500 * t580 + t939;
t944 = pkin(4) * t786;
t943 = qJ(6) * t786;
t942 = t524 * t786;
t941 = t790 * t786;
t940 = t786 * t925;
t881 = -qJ(5) * t867 + t950;
t599 = t740 * t676 - t924 * t677;
t938 = qJD(4) * t599 + t957 * t740 + t924 * t958;
t669 = -pkin(2) * t745 - pkin(8) * t742 - pkin(1);
t642 = t669 * qJD(1);
t675 = qJD(2) * pkin(8) + t725;
t591 = t741 * t642 + t744 * t675;
t560 = pkin(9) * t650 + t591;
t937 = 0.2e1 * t936;
t934 = qJ(5) * t877 - qJD(5) * t653 + t811;
t918 = g(2) * t743;
t807 = g(1) * t746 + t918;
t590 = t744 * t642 - t675 * t741;
t559 = -pkin(9) * t651 + t590;
t550 = -pkin(3) * t704 + t559;
t902 = t740 * t560;
t515 = t924 * t550 - t902;
t853 = qJD(5) - t515;
t628 = t641 * pkin(4);
t930 = t628 - qJDD(5);
t929 = t641 * pkin(5) - t512 * qJ(6) + t786 * qJD(6);
t916 = g(3) * t745;
t928 = -t916 + t949;
t738 = qJ(3) + qJ(4);
t728 = sin(t738);
t729 = cos(t738);
t890 = t743 * t745;
t613 = t728 * t890 + t729 * t746;
t887 = t746 * t728;
t615 = -t743 * t729 + t745 * t887;
t659 = t810 * qJD(2);
t596 = qJD(1) * t659 + qJDD(1) * t669;
t586 = t744 * t596;
t624 = pkin(7) * t933 + qJDD(2) * pkin(8);
t847 = t741 * qJDD(2);
t848 = qJDD(1) * t744;
t497 = -t741 * t624 + t586 - (t742 * t848 + t744 * t827 + t847) * pkin(9) + t647 * pkin(3) - t560 * qJD(3);
t779 = t741 * t596 + t744 * t624 + t642 * t858 - t675 * t859;
t503 = pkin(9) * t777 + t779;
t817 = -t924 * t497 + t740 * t503 + t550 * t857 + t560 * t830;
t906 = t728 * t742;
t764 = g(1) * t615 + g(2) * t613 + g(3) * t906 - t817;
t761 = t764 + t930;
t754 = -t500 * t786 - t761 - t929;
t927 = -0.2e1 * pkin(1);
t923 = pkin(7) * t741;
t921 = g(1) * t743;
t631 = t741 * t890 + t744 * t746;
t919 = g(2) * t631;
t917 = g(2) * t746;
t735 = g(3) * t742;
t730 = t742 * pkin(7);
t914 = qJ(5) * t513;
t739 = qJDD(2) * pkin(2);
t716 = pkin(3) * t740 + qJ(5);
t912 = t513 * t716;
t557 = t924 * t560;
t516 = t740 * t550 + t557;
t911 = t516 * t689;
t522 = t924 * t559 - t902;
t910 = t522 * t689;
t907 = t651 * t704;
t905 = t728 * t745;
t904 = t729 * t742;
t903 = t729 * t745;
t900 = t741 * t742;
t899 = t741 * t743;
t897 = t741 * t746;
t893 = t742 * t747;
t750 = qJD(1) ^ 2;
t892 = t742 * t750;
t891 = t743 * t744;
t722 = pkin(3) * t744 + pkin(2);
t680 = t745 * t722;
t888 = t745 * t746;
t886 = qJ(6) + t747;
t885 = -t876 * t925 - t934;
t652 = -t839 + t901;
t884 = qJ(6) * t876 + qJD(6) * t652 + t881;
t844 = t925 * t742;
t883 = qJ(6) * t877 + qJD(1) * t844 - t653 * qJD(6) + t938;
t882 = pkin(4) * t876 + t934;
t880 = pkin(4) * t867 + t938;
t649 = t744 * t669;
t589 = -pkin(9) * t895 + t649 + (-pkin(3) - t923) * t745;
t708 = pkin(7) * t889;
t870 = t741 * t669 + t708;
t597 = -pkin(9) * t900 + t870;
t878 = t740 * t589 + t924 * t597;
t875 = t741 * t659 + t669 * t858;
t863 = qJD(2) * t742;
t874 = t744 * t659 + t863 * t923;
t499 = t522 + t943;
t698 = pkin(3) * t830 + qJD(5);
t872 = t698 - t499;
t871 = t698 - t522;
t705 = pkin(3) * t900;
t660 = t730 + t705;
t736 = t742 ^ 2;
t869 = -t745 ^ 2 + t736;
t865 = qJD(2) * t650;
t860 = qJD(3) * t650;
t856 = t651 * qJD(2);
t855 = t674 * qJD(3);
t495 = t515 + t943;
t854 = qJD(5) - t495;
t845 = pkin(3) * t857;
t843 = t740 * t900;
t842 = t741 * t888;
t723 = pkin(7) * t849;
t625 = pkin(7) * t827 + t723 - t739;
t841 = g(1) * t888 + g(2) * t890 + t735;
t601 = pkin(3) * t947 + pkin(7) * t861;
t836 = t704 * t858;
t835 = t704 * t859;
t834 = t742 * t859;
t832 = t689 * t857;
t825 = -pkin(1) - t680;
t824 = t886 * t746;
t614 = t729 * t890 - t887;
t823 = -t613 * pkin(4) + qJ(5) * t614;
t616 = t728 * t743 + t729 * t888;
t822 = -t615 * pkin(4) + qJ(5) * t616;
t821 = -qJ(5) * t728 - t722;
t820 = -qJD(3) * t642 - t624;
t818 = t740 * t497 + t924 * t503 + t550 * t830 - t560 * t857;
t549 = -t777 * pkin(3) + t625;
t721 = -pkin(3) * t924 - pkin(4);
t815 = g(3) * (pkin(4) * t903 + qJ(5) * t905 + t680);
t814 = t924 * t861;
t678 = qJ(5) * t904;
t813 = -pkin(4) * t906 + t678;
t712 = g(2) * t894;
t812 = -g(1) * t896 + t712;
t809 = g(1) * t613 - g(2) * t615;
t808 = g(1) * t614 - g(2) * t616;
t532 = -qJ(5) * t745 + t878;
t805 = pkin(3) * t891 + t822;
t619 = t742 * t839 - t843;
t804 = qJ(5) * t619 - t660;
t496 = t516 + t953;
t802 = t589 * t924 - t740 * t597;
t801 = t675 * t858 - t586;
t800 = g(2) * t823;
t799 = -pkin(3) * t651 - t913;
t798 = -pkin(8) * t647 + t855;
t796 = -g(3) * t905 + t728 * t949;
t795 = -g(3) * t903 + t729 * t949;
t794 = -t728 * t844 + t678;
t792 = qJ(5) * t653 + t722;
t533 = t745 * pkin(4) - t802;
t789 = g(2) * (-t613 * pkin(5) + t823);
t481 = t818 + t936;
t787 = -pkin(7) * qJDD(2) + t852 * t927;
t521 = t740 * t559 + t557;
t598 = -t676 * t924 - t740 * t677;
t482 = t817 - t930;
t785 = t647 * t741 - t836;
t784 = t744 * t647 + t835;
t783 = pkin(3) * t897 - t614 * pkin(4) + t746 * pkin(7) - qJ(5) * t613 + t743 * t893;
t536 = t793 * qJD(2) + (-t708 + (pkin(9) * t742 - t669) * t741) * qJD(3) + t874;
t539 = -t947 * pkin(9) + (-t742 * t862 - t745 * t859) * pkin(7) + t875;
t781 = -t536 * t924 + t740 * t539 + t589 * t857 + t597 * t830;
t780 = -t741 * t851 + t848;
t778 = t740 * t536 + t924 * t539 + t589 * t830 - t597 * t857;
t483 = t513 * pkin(4) + t512 * qJ(5) - qJD(5) * t786 + t549;
t749 = qJD(2) ^ 2;
t775 = pkin(7) * t749 + qJDD(1) * t927 - t921;
t774 = t746 * pkin(1) + pkin(3) * t899 + t616 * pkin(4) + t743 * pkin(7) + qJ(5) * t615 + t722 * t888;
t773 = -t598 * t641 + t795;
t772 = t599 * t641 + t796;
t540 = t595 * t742 + t740 * t837 - t744 * t814;
t770 = -qJ(5) * t540 + qJD(5) * t619 - t601;
t767 = -qJD(3) * pkin(8) * t704 + t625 - t739 + t916;
t765 = g(1) * t616 + g(2) * t614 + g(3) * t904 - t818;
t487 = qJ(5) * t863 - qJD(5) * t745 + t778;
t480 = -pkin(5) * t513 + qJDD(6) - t483;
t760 = -t515 * t689 + t765;
t759 = -t521 * t689 + t764;
t758 = g(1) * t842 + t919;
t757 = t716 * t641 - t698 * t689 - t765 + t936;
t756 = -t761 + t942;
t715 = -pkin(5) + t721;
t668 = t689 * qJ(5);
t645 = pkin(3) * t832;
t634 = t744 * t888 + t899;
t633 = -t842 + t891;
t632 = -t743 * t889 + t897;
t618 = t653 * t742;
t608 = t615 * pkin(5);
t577 = pkin(4) * t652 - t792;
t563 = qJ(6) * t652 + t599;
t562 = -t653 * qJ(6) + t598;
t558 = -t652 * t925 + t792;
t551 = pkin(4) * t618 - t804;
t541 = t741 * t814 - t740 * t834 - qJD(4) * t843 + (t740 * t861 + t742 * t932) * t744;
t535 = t913 + t944;
t534 = -t618 * t925 + t804;
t527 = -t799 + t944;
t525 = qJ(6) * t618 + t532;
t523 = t745 * pkin(5) - t619 * qJ(6) + t533;
t520 = -t913 - t940;
t509 = -t668 + t516;
t505 = pkin(4) * t689 + t853;
t504 = t799 - t940;
t498 = t521 + t953;
t492 = t496 - t668;
t490 = t689 * t925 + t854;
t489 = pkin(4) * t541 - t770;
t488 = -pkin(4) * t863 + t781;
t486 = -t541 * t925 + t770;
t485 = qJ(6) * t541 + qJD(6) * t618 + t487;
t484 = t540 * qJ(6) - qJD(2) * t844 - t619 * qJD(6) + t781;
t479 = t481 + t939;
t478 = t482 - t929;
t1 = [(t479 * t525 + t492 * t485 + t478 * t523 + t490 * t484 + t480 * t534 + t500 * t486 - g(1) * (-pkin(5) * t614 + t783) - g(2) * (pkin(5) * t616 - t742 * t824 + t774) - (qJ(6) * t742 + t825) * t921) * MDP(32) + (-t512 * t619 - t540 * t786) * MDP(18) + (-t481 * t618 + t482 * t619 - t487 * t580 + t488 * t786 - t505 * t540 - t509 * t541 - t512 * t533 - t513 * t532 - t812) * MDP(26) + (-t478 * t619 + t479 * t618 - t484 * t786 + t485 * t580 + t490 * t540 + t492 * t541 + t512 * t523 + t513 * t525 + t812) * MDP(31) + (t512 * t745 + t540 * t689 + t619 * t641 + t786 * t863) * MDP(20) + (-t481 * t745 - t483 * t619 - t487 * t689 - t489 * t786 + t509 * t863 + t512 * t551 + t524 * t540 + t532 * t641 + t809) * MDP(27) + (-t479 * t745 + t480 * t619 - t485 * t689 + t486 * t786 + t492 * t863 - t500 * t540 - t512 * t534 + t525 * t641 + t809) * MDP(30) + (t512 * t618 - t513 * t619 + t540 * t580 - t541 * t786) * MDP(19) + (qJDD(1) * t736 + 0.2e1 * t742 * t827) * MDP(4) + t807 * MDP(3) + (-t660 * t512 - t516 * t863 + t540 * t790 + t549 * t619 + t601 * t786 - t641 * t878 + t689 * t778 + t745 * t818 - t809) * MDP(24) + (t660 * t513 + t515 * t863 - t541 * t790 + t549 * t618 + t601 * t580 + t641 * t802 + t689 * t781 + t745 * t817 + t808) * MDP(23) + (-(-t669 * t859 + t874) * t704 + t649 * t647 - g(1) * t632 - g(2) * t634 + ((t836 - t865) * pkin(7) + (-pkin(7) * t647 + qJD(2) * t674 - t820) * t741 + t801) * t745 + (-pkin(7) * t777 + t590 * qJD(2) + t625 * t741 + t744 * t855) * t742) * MDP(16) + (t875 * t704 - t870 * t647 - g(1) * t631 - g(2) * t633 + (t674 * t862 + (-t835 + t856) * pkin(7) + t779) * t745 + (-t741 * t855 - t591 * qJD(2) + t625 * t744 + (t847 + t780 * t742 + (-t704 + t819) * t862) * pkin(7)) * t742) * MDP(17) + (t481 * t532 + t509 * t487 + t483 * t551 + t524 * t489 + t482 * t533 + t505 * t488 - g(1) * (t743 * t825 + t783) - g(2) * (-t746 * t893 + t774)) * MDP(28) + 0.2e1 * (t727 * t742 - t852 * t869) * MDP(5) + (-t647 * t745 - t704 * t863) * MDP(15) + (-t641 * t745 - t689 * t863) * MDP(22) + (t513 * t745 + t541 * t689 - t580 * t863 - t618 * t641) * MDP(21) + (t482 * t745 + t483 * t618 + t488 * t689 + t489 * t580 - t505 * t863 + t513 * t551 + t524 * t541 - t533 * t641 + t808) * MDP(25) + (t478 * t745 - t480 * t618 + t484 * t689 - t486 * t580 - t490 * t863 - t500 * t541 - t513 * t534 - t523 * t641 + t808) * MDP(29) + ((t704 * t864 - t777) * t745 + (-t785 + t865) * t742) * MDP(14) + (-t651 * t834 + (-t742 * t782 + t745 * t856 + t895 * t948) * t744) * MDP(11) + ((t650 * t744 - t651 * t741) * t861 + ((-t651 * qJD(3) + t777) * t744 + (-t860 - t753) * t741) * t742) * MDP(12) + ((-t847 + (-t704 - t819) * t862) * t745 + (-t745 * t780 + t784 + t856) * t742) * MDP(13) + (t787 * t742 + (-t775 - t917) * t745) * MDP(9) + (-t917 + t921) * MDP(2) + qJDD(1) * MDP(1) + (qJDD(2) * t745 - t742 * t749) * MDP(7) + (qJDD(2) * t742 + t745 * t749) * MDP(6) + (t742 * t775 + t745 * t787 + t712) * MDP(10); (t704 * MDP(15) - MDP(20) * t786 + t580 * MDP(21) + t689 * MDP(22) - t515 * MDP(23) + t516 * MDP(24) + t505 * MDP(25) - t509 * MDP(27) + t490 * MDP(29) - t492 * MDP(30)) * t867 + (-t481 * t652 + t482 * t653 - t505 * t877 - t509 * t876 - t512 * t598 - t513 * t599 - t580 * t881 + t786 * t880 - t841) * MDP(26) + (-t478 * t653 + t479 * t652 + t490 * t877 + t492 * t876 + t512 * t562 + t513 * t563 + t580 * t884 - t786 * t883 + t841) * MDP(31) + (t512 * t652 - t513 * t653 + t580 * t877 - t786 * t876) * MDP(19) + (-t512 * t653 - t786 * t877) * MDP(18) + (-t483 * t653 + t512 * t577 + t524 * t877 - t689 * t881 - t786 * t882 + t772) * MDP(27) + (t480 * t653 - t500 * t877 - t512 * t558 + t563 * t641 - t689 * t884 + t786 * t885 + t796) * MDP(30) + (t479 * t563 + t478 * t562 + t480 * t558 - t815 + t885 * t500 + t884 * t492 + t883 * t490 + (-g(3) * pkin(5) * t729 + g(1) * t824 + t886 * t918) * t745 + (g(3) * t886 + t807 * (t729 * t925 - t821)) * t742) * MDP(32) + (t481 * t599 + t483 * t577 + t482 * t598 - t815 + t807 * t747 * t745 + t882 * t524 + t881 * t509 + t880 * t505 + (g(3) * t747 + t807 * (pkin(4) * t729 - t821)) * t742) * MDP(28) + (pkin(1) * t892 - t723 + t928) * MDP(9) + (-t636 * t704 + (-pkin(7) * t651 * t745 + t591 * t742) * qJD(1) + (-pkin(2) * t791 + (t704 * t730 + (-t674 - t915) * t745) * qJD(1) + t798) * t744 + ((pkin(2) * t851 - t807) * t742 + t767) * t741) * MDP(17) + (-t722 * t513 + t549 * t652 + t811 * t580 + t689 * t938 - t790 * t876 + t773) * MDP(23) + (-pkin(2) * t816 + t873 * t704 + t798 * t741 + (-t590 * t742 + (pkin(7) * t650 - t674 * t741) * t745) * qJD(1) + (t742 * t807 - t767) * t744) * MDP(16) + (-t797 * t741 ^ 2 + (t741 * t768 - t907) * t744) * MDP(11) + ((-t816 + t907) * t741 + (t860 + 0.2e1 * t847 + t791 * t744 + (-t834 + (-t650 + t862) * t745) * qJD(1)) * t744) * MDP(12) + ((pkin(1) * t750 - pkin(7) * qJDD(1)) * t745 + t841) * MDP(10) + (t641 * t653 + t689 * t877) * MDP(20) + ((-t650 * t742 - t704 * t898) * qJD(1) + t784) * MDP(14) + (-t480 * t652 - t500 * t876 - t513 * t558 - t562 * t641 - t580 * t885 + t689 * t883 + t795) * MDP(29) + (t722 * t512 + t549 * t653 + t689 * t950 + t811 * t786 + t877 * t790 - t772) * MDP(24) + qJDD(2) * MDP(8) + (-t641 * t652 + t689 * t876) * MDP(21) + (t483 * t652 + t513 * t577 + t524 * t876 + t580 * t882 + t689 * t880 + t773) * MDP(25) - t745 * MDP(4) * t892 + t869 * MDP(5) * t750 + ((-t651 * t742 + t704 * t889) * qJD(1) + t785) * MDP(13) + MDP(7) * t727 + MDP(6) * t849; (-t527 * t580 - t641 * t721 + t645 + t759 + t930 - t942) * MDP(25) + (t941 + (-t580 * t651 + t641 * t924 + t832) * pkin(3) + t759) * MDP(23) + (-t498 * t689 + t504 * t580 - t641 * t715 + t645 - t754) * MDP(29) + (t527 * t786 + t757 + t910 - t952) * MDP(27) + (t499 * t689 - t504 * t786 + t757 + t946) * MDP(30) + (t512 * t715 + t912 + (-t492 + t498 - t845) * t786 + (-t490 + t872) * t580) * MDP(31) + (-t910 - t951 + (-t641 * t740 - t651 * t786 + t689 * t830) * pkin(3) + t765) * MDP(24) + (-t512 * t721 - t912 + (t509 - t521 + t845) * t786 + (t505 - t871) * t580) * MDP(26) + (t481 * t716 + t482 * t721 - t524 * t527 - t505 * t521 - g(1) * t805 - t800 - g(3) * (-t705 + t813) + t871 * t509 + (t505 * t857 + t758) * pkin(3)) * MDP(28) + (t479 * t716 + t478 * t715 - t490 * t498 - t500 * t504 - g(1) * (-t608 + t805) - t789 - g(3) * (-t705 + t794) + t872 * t492 + (t490 * t857 + t758) * pkin(3)) * MDP(32) + (g(1) * t634 - g(2) * t632 + g(3) * t895 - t590 * t704 - t650 * t674 - t779) * MDP(17) + (t777 - t907) * MDP(14) + (-g(1) * t633 + t919 - t591 * t704 - t651 * t674 + (t820 + t735) * t741 - t801) * MDP(16) + (t650 * t704 + t753) * MDP(13) + (-t650 ^ 2 + t651 ^ 2) * MDP(12) + t647 * MDP(15) - t651 * t650 * MDP(11) + t956; (t764 - t911 + t941) * MDP(23) + (t760 - t951) * MDP(24) + (-t535 * t580 + t628 - t756 - t911) * MDP(25) + (pkin(4) * t512 - t914 + (t509 - t516) * t786 + (t505 - t853) * t580) * MDP(26) + (t535 * t786 - t760 + t937 - t952) * MDP(27) + (-t482 * pkin(4) - g(1) * t822 - g(3) * t813 + t481 * qJ(5) - t505 * t516 + t509 * t853 - t524 * t535 - t800) * MDP(28) + (-t496 * t689 + t520 * t580 + t641 * t925 - t754) * MDP(29) + (t495 * t689 - t520 * t786 - t765 + t937 + t946) * MDP(30) + (t914 - t512 * t925 + (-t492 + t496) * t786 + (-t490 + t854) * t580) * MDP(31) + (t479 * qJ(5) - t478 * t925 - t490 * t496 - t500 * t520 - g(1) * (-t608 + t822) - t789 - g(3) * t794 + t854 * t492) * MDP(32) + t956; (t509 * t689 + t756) * MDP(28) + (t492 * t689 + t754) * MDP(32) + (MDP(25) + MDP(29)) * (-t641 + t955) + (MDP(27) + MDP(30)) * (-t689 ^ 2 - t578) + (-MDP(26) + MDP(31)) * t766; (-t513 + t908) * MDP(29) + (-t512 + t909) * MDP(30) + (-t578 - t926) * MDP(31) + (t490 * t786 - t492 * t580 + t480 + t928) * MDP(32);];
tau  = t1;
