% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:28:38
% EndTime: 2019-05-07 18:29:29
% DurationCPUTime: 43.01s
% Computational Cost: add. (81279->721), mult. (163326->951), div. (0->0), fcn. (116392->8), ass. (0->503)
t1071 = sin(qJ(1));
t1075 = cos(qJ(1));
t1070 = sin(qJ(2));
t1074 = cos(qJ(2));
t1069 = sin(qJ(3));
t1073 = cos(qJ(3));
t1068 = sin(qJ(4));
t1072 = cos(qJ(4));
t1131 = qJD(1) * t1074;
t1055 = -qJD(3) + t1131;
t1047 = -qJD(4) + t1055;
t1132 = qJD(1) * t1070;
t1025 = qJD(2) * t1069 + t1073 * t1132;
t1105 = qJD(2) * t1131;
t1113 = qJDD(1) * t1070;
t1029 = t1105 + t1113;
t1089 = t1073 * qJDD(2) - t1069 * t1029;
t1083 = qJD(3) * t1025 - t1089;
t1024 = -t1073 * qJD(2) + t1069 * t1132;
t1104 = t1024 * qJD(3) - t1069 * qJDD(2) - t1073 * t1029;
t1102 = -t1068 * t1104 + t1072 * t1083;
t983 = -t1024 * t1068 + t1025 * t1072;
t1085 = (qJD(4) + t1047) * t983 + t1102;
t981 = t1072 * t1024 + t1025 * t1068;
t1078 = -t981 * qJD(4) - t1068 * t1083 - t1072 * t1104;
t1161 = t1047 * t981;
t1192 = t1161 - t1078;
t1243 = -t1068 * t1085 + t1072 * t1192;
t749 = t1068 * t1192 + t1072 * t1085;
t673 = t1069 * t1243 + t1073 * t749;
t1178 = t981 ^ 2;
t980 = t983 ^ 2;
t880 = t980 + t1178;
t651 = t1070 * t880 + t1074 * t673;
t667 = t1069 * t749 - t1073 * t1243;
t611 = t1071 * t651 - t1075 * t667;
t1354 = pkin(6) * t611;
t614 = t1071 * t667 + t1075 * t651;
t1353 = pkin(6) * t614;
t1174 = t1047 ^ 2;
t1200 = t980 + t1174;
t1058 = qJD(2) * t1132;
t1111 = qJDD(1) * t1074;
t1030 = -t1058 + t1111;
t1021 = -qJDD(3) + t1030;
t1017 = -qJDD(4) + t1021;
t919 = t983 * t981;
t1203 = t1017 - t919;
t1224 = t1068 * t1203;
t1241 = t1072 * t1200 - t1224;
t1216 = t1072 * t1203;
t842 = t1068 * t1200 + t1216;
t1282 = -t1069 * t842 + t1073 * t1241;
t761 = t1069 * t1241 + t1073 * t842;
t833 = -t1161 - t1078;
t701 = -t1070 * t833 + t1074 * t761;
t654 = t1071 * t701 + t1075 * t1282;
t1336 = pkin(6) * t654;
t657 = -t1071 * t1282 + t1075 * t701;
t1338 = pkin(6) * t657;
t1190 = t1178 - t1174;
t1237 = t1072 * t1190 + t1224;
t852 = -t1068 * t1190 + t1216;
t770 = t1069 * t1237 - t1073 * t852;
t1284 = t1075 * t770;
t1260 = t1069 * t852 + t1073 * t1237;
t1286 = t1074 * t1260;
t708 = t1070 * t1085 - t1286;
t1352 = t1071 * t708 + t1284;
t1287 = t1071 * t770;
t1351 = t1075 * t708 - t1287;
t648 = t1070 * t673 - t1074 * t880;
t1350 = pkin(7) * t648;
t698 = t1070 * t761 + t1074 * t833;
t1320 = pkin(7) * t698;
t1349 = pkin(1) * t648 - pkin(2) * t880 + pkin(8) * t673;
t1319 = pkin(1) * t698 + pkin(2) * t833 + pkin(8) * t761;
t1317 = -pkin(1) * t1282 - pkin(7) * t701;
t1348 = -pkin(1) * t667 + pkin(7) * t651;
t1202 = t1017 + t919;
t1225 = t1068 * t1202;
t957 = t980 - t1174;
t1242 = -t1072 * t957 - t1225;
t1217 = t1072 * t1202;
t855 = -t1068 * t957 + t1217;
t1257 = t1069 * t855 - t1073 * t1242;
t773 = t1069 * t1242 + t1073 * t855;
t705 = t1070 * t1192 + t1074 * t773;
t1347 = t1071 * t705 - t1075 * t1257;
t915 = t980 - t1178;
t1144 = t1070 * t915;
t1246 = t1072 * t833;
t824 = (qJD(4) - t1047) * t983 + t1102;
t744 = t1068 * t824 + t1246;
t1159 = t1068 * t833;
t750 = t1072 * t824 - t1159;
t674 = -t1069 * t744 + t1073 * t750;
t661 = t1074 * t674 - t1144;
t671 = t1069 * t750 + t1073 * t744;
t1346 = t1071 * t661 - t1075 * t671;
t1345 = t1071 * t1257 + t1075 * t705;
t1344 = t1071 * t671 + t1075 * t661;
t1289 = t1070 * t1260;
t1343 = t1074 * t1085 + t1289;
t632 = pkin(2) * t667 - pkin(3) * t1243;
t1340 = pkin(8) * t667;
t1191 = -t1174 - t1178;
t1236 = t1072 * t1191 + t1225;
t1238 = t1068 * t1191 - t1217;
t1261 = t1069 * t1236 + t1073 * t1238;
t1269 = t1071 * t1261;
t1262 = -t1069 * t1238 + t1073 * t1236;
t1266 = t1074 * t1262;
t874 = qJD(4) * t983 + t1102;
t965 = t983 * t1047;
t827 = t874 - t965;
t1307 = t1070 * t827 + t1266;
t1314 = t1075 * t1307 + t1269;
t1337 = pkin(6) * t1314;
t1265 = t1075 * t1261;
t1316 = t1071 * t1307 - t1265;
t1335 = pkin(6) * t1316;
t1310 = pkin(8) * t1282;
t1326 = qJ(5) * t1085 + t632;
t1323 = pkin(2) * t1282 + pkin(3) * t1241;
t907 = t1074 * t915;
t1322 = t1070 * t674 + t907;
t1321 = t1070 * t773 - t1074 * t1192;
t1278 = pkin(1) * t1261;
t1318 = pkin(7) * t1307 - t1278;
t1270 = t1070 * t1262;
t1290 = -t1074 * t827 + t1270;
t1311 = pkin(7) * t1290;
t1264 = -pkin(2) * t1261 - pkin(3) * t1238;
t1305 = -qJ(5) * t1191 + t1264;
t1304 = -pkin(3) * t880 + pkin(9) * t749;
t1303 = qJ(5) * t1203 - t1323;
t1275 = pkin(8) * t1262;
t1297 = -pkin(1) * t1290 + pkin(2) * t827 - t1275;
t1296 = pkin(9) * t842;
t1276 = pkin(8) * t1261;
t1274 = pkin(9) * t1241;
t1273 = pkin(9) * t1243;
t1283 = pkin(3) * t833 + t1296;
t1252 = pkin(9) * t1236;
t1251 = pkin(9) * t1238;
t1250 = qJ(5) * t833;
t1249 = qJ(5) * t880;
t1248 = qJ(6) * t1192;
t1000 = -pkin(3) * t1055 - pkin(9) * t1025;
t1175 = t1024 ^ 2;
t1044 = g(1) * t1075 + g(2) * t1071;
t1076 = qJD(1) ^ 2;
t1015 = -pkin(1) * t1076 + qJDD(1) * pkin(7) - t1044;
t1168 = pkin(2) * t1074;
t1097 = -pkin(8) * t1070 - t1168;
t1027 = t1097 * qJD(1);
t1166 = t1074 * g(3);
t1176 = qJD(2) ^ 2;
t944 = -qJDD(2) * pkin(2) - t1176 * pkin(8) + (qJD(1) * t1027 + t1015) * t1070 + t1166;
t847 = t1083 * pkin(3) - t1175 * pkin(9) + t1025 * t1000 + t944;
t1244 = t874 * pkin(4) + t1250 + t847;
t1120 = t1047 * t1072;
t1109 = t981 * t1120;
t1121 = t1047 * t1068;
t949 = t983 * t1121;
t1093 = -t949 + t1109;
t1087 = (t1068 * t981 + t1072 * t983) * t1047;
t1194 = t1073 * t1087;
t1184 = -t1069 * t1093 - t1194;
t1127 = t1017 * t1070;
t1197 = t1069 * t1087;
t1183 = t1073 * t1093 - t1197;
t1205 = t1074 * t1183 - t1127;
t1235 = t1071 * t1205 + t1075 * t1184;
t1088 = t1068 * t874 - t1109;
t1095 = -t1072 * t874 - t1121 * t981;
t1181 = -t1069 * t1088 - t1073 * t1095;
t1182 = -t1069 * t1095 + t1073 * t1088;
t909 = t1070 * t919;
t1208 = t1074 * t1182 - t909;
t1234 = t1071 * t1208 + t1075 * t1181;
t1094 = t1068 * t1078 - t1120 * t983;
t1163 = t1072 * t1078 + t949;
t1180 = -t1069 * t1163 - t1073 * t1094;
t1179 = -t1069 * t1094 + t1073 * t1163;
t1209 = t1074 * t1179 + t909;
t1186 = t1071 * t1209 + t1075 * t1180;
t1233 = -t1071 * t1184 + t1075 * t1205;
t1232 = -t1071 * t1181 + t1075 * t1208;
t1185 = -t1071 * t1180 + t1075 * t1209;
t1005 = t1024 * t1055;
t932 = t1005 + t1104;
t910 = t1074 * t919;
t1165 = t1070 * t1179 - t910;
t1210 = t1070 * t1182 + t910;
t1007 = t1074 * t1017;
t1207 = t1070 * t1183 + t1007;
t1130 = qJD(5) * t1047;
t1033 = 0.2e1 * t1130;
t1162 = qJD(6) * t981;
t1201 = t1033 - 0.2e1 * t1162;
t1126 = t1024 * t1025;
t1084 = -t1021 - t1126;
t1198 = t1069 * t1084;
t1195 = t1073 * t1084;
t948 = pkin(5) * t1047 - qJ(6) * t983;
t1193 = t983 * t948 + qJDD(6);
t931 = t1104 - t1005;
t1187 = -t874 * pkin(5) + t1193;
t927 = (qJD(3) + t1055) * t1025 - t1089;
t1177 = 0.2e1 * t983;
t1020 = t1025 ^ 2;
t1053 = t1055 ^ 2;
t1173 = pkin(4) + pkin(5);
t1169 = pkin(2) * t1070;
t1167 = pkin(4) * t1072;
t1043 = t1071 * g(1) - t1075 * g(2);
t1014 = qJDD(1) * pkin(1) + t1076 * pkin(7) + t1043;
t1091 = -t1030 + t1058;
t1092 = t1029 + t1105;
t926 = pkin(2) * t1091 - pkin(8) * t1092 - t1014;
t999 = -g(3) * t1070 + t1074 * t1015;
t945 = -pkin(2) * t1176 + qJDD(2) * pkin(8) + t1027 * t1131 + t999;
t875 = t1069 * t945 - t1073 * t926;
t788 = t1084 * pkin(3) + pkin(9) * t932 - t875;
t876 = t1069 * t926 + t1073 * t945;
t794 = -pkin(3) * t1175 - pkin(9) * t1083 + t1055 * t1000 + t876;
t713 = t1068 * t788 + t1072 * t794;
t1157 = t1068 * t847;
t712 = t1068 * t794 - t1072 * t788;
t644 = t1068 * t713 - t1072 * t712;
t1150 = t1069 * t644;
t1149 = t1069 * t944;
t967 = t1021 - t1126;
t1148 = t1069 * t967;
t1141 = t1072 * t827;
t1140 = t1072 * t847;
t1137 = t1073 * t644;
t1136 = t1073 * t944;
t1135 = t1073 * t967;
t1133 = qJD(1) * qJD(2);
t1129 = t1014 * t1070;
t1128 = t1014 * t1074;
t1054 = t1074 * t1076 * t1070;
t1041 = -t1054 + qJDD(2);
t1124 = t1041 * t1070;
t1123 = t1041 * t1074;
t1042 = qJDD(2) + t1054;
t1122 = t1042 * t1070;
t1119 = t1055 * t1069;
t1118 = t1055 * t1073;
t1064 = t1070 ^ 2;
t1117 = t1064 * t1076;
t1065 = t1074 ^ 2;
t1114 = t1064 + t1065;
t1112 = qJDD(1) * t1071;
t1110 = qJDD(1) * t1075;
t908 = pkin(4) * t981 - qJ(5) * t983;
t1108 = -pkin(5) * t981 - t908;
t1107 = t1070 * t1126;
t1106 = t1074 * t1126;
t1103 = -qJ(5) * t1068 - pkin(3);
t645 = t1068 * t712 + t1072 * t713;
t998 = t1070 * t1015 + t1166;
t935 = t1070 * t998 + t1074 * t999;
t991 = -t1043 * t1071 - t1075 * t1044;
t1100 = t1071 * t1054;
t1099 = t1075 * t1054;
t1036 = -t1071 * t1076 + t1110;
t1096 = -pkin(6) * t1036 - g(3) * t1071;
t1090 = -pkin(4) * t1174 - t1017 * qJ(5) - t981 * t908 + t713;
t782 = t1069 * t876 - t1073 * t875;
t783 = t1069 * t875 + t1073 * t876;
t933 = t1070 * t999 - t1074 * t998;
t990 = t1043 * t1075 - t1044 * t1071;
t1032 = -0.2e1 * t1130;
t684 = t1032 + t1090;
t1086 = t1017 * pkin(4) - qJ(5) * t1174 + qJDD(5) + t712;
t1082 = pkin(5) * t1178 + t1047 * t948 - t1090;
t1081 = t983 * t908 + t1086;
t1080 = t1017 * pkin(5) + t1086 + t1248;
t1079 = -t874 * qJ(6) + t1082;
t646 = (-0.2e1 * qJD(6) - t1108) * t983 + t1080;
t1077 = qJD(5) * t1177 - t1244;
t694 = (-pkin(4) * t1047 - 0.2e1 * qJD(5)) * t983 + t1244;
t680 = (-t827 + t965) * pkin(4) + t1077;
t679 = pkin(4) * t965 + t1077 - t1250;
t1062 = t1065 * t1076;
t1052 = -t1062 - t1176;
t1051 = t1062 - t1176;
t1050 = -t1117 - t1176;
t1049 = -t1117 + t1176;
t1038 = t1062 - t1117;
t1037 = t1062 + t1117;
t1035 = t1075 * t1076 + t1112;
t1034 = t1114 * qJDD(1);
t1031 = -0.2e1 * t1058 + t1111;
t1028 = 0.2e1 * t1105 + t1113;
t1023 = t1074 * t1042;
t1022 = t1114 * t1133;
t1009 = -pkin(6) * t1035 + g(3) * t1075;
t1004 = -t1020 + t1053;
t1003 = -t1053 + t1175;
t1002 = t1029 * t1074 - t1064 * t1133;
t1001 = -t1030 * t1070 - t1065 * t1133;
t997 = -t1050 * t1070 - t1123;
t996 = -t1049 * t1070 + t1023;
t995 = t1052 * t1074 - t1122;
t994 = t1051 * t1074 - t1124;
t993 = t1050 * t1074 - t1124;
t992 = t1052 * t1070 + t1023;
t988 = -t1020 + t1175;
t987 = t1034 * t1075 - t1037 * t1071;
t986 = t1034 * t1071 + t1037 * t1075;
t985 = -t1020 - t1053;
t984 = -t1028 * t1070 + t1031 * t1074;
t976 = -t1053 - t1175;
t966 = t1020 + t1175;
t953 = t1028 * t1071 + t1075 * t997;
t952 = -t1031 * t1071 + t1075 * t995;
t951 = -t1028 * t1075 + t1071 * t997;
t950 = t1031 * t1075 + t1071 * t995;
t947 = -pkin(7) * t993 - t1128;
t946 = -pkin(7) * t992 - t1129;
t942 = (t1024 * t1073 - t1025 * t1069) * t1055;
t941 = (-t1024 * t1069 - t1025 * t1073) * t1055;
t939 = -pkin(1) * t993 + t999;
t938 = -pkin(1) * t992 + t998;
t928 = (-qJD(3) + t1055) * t1025 + t1089;
t923 = t1025 * t1119 - t1073 * t1104;
t922 = t1025 * t1118 + t1069 * t1104;
t921 = -t1024 * t1118 + t1069 * t1083;
t920 = t1024 * t1119 + t1073 * t1083;
t917 = -t1021 * t1070 + t1074 * t942;
t914 = t1003 * t1073 + t1148;
t913 = -t1004 * t1069 + t1195;
t912 = -t1003 * t1069 + t1135;
t911 = -t1004 * t1073 - t1198;
t906 = -t1069 * t985 + t1135;
t905 = t1073 * t985 + t1148;
t901 = -t1014 * t1071 + t1075 * t935;
t900 = t1014 * t1075 + t1071 * t935;
t898 = t1073 * t976 - t1198;
t897 = t1069 * t976 + t1195;
t886 = (-t1068 * t983 + t1072 * t981) * t1047;
t882 = t1074 * t923 + t1107;
t881 = t1074 * t921 - t1107;
t867 = -t1069 * t932 - t1073 * t927;
t866 = t1069 * t931 + t1073 * t928;
t865 = -t1069 * t927 + t1073 * t932;
t864 = -t1069 * t928 + t1073 * t931;
t863 = -pkin(8) * t905 + t1136;
t862 = -t1070 * t927 + t1074 * t914;
t861 = -t1070 * t932 + t1074 * t913;
t848 = -pkin(8) * t897 + t1149;
t846 = -t1070 * t931 + t1074 * t906;
t845 = t1070 * t906 + t1074 * t931;
t838 = -t1070 * t928 + t1074 * t898;
t837 = t1070 * t898 + t1074 * t928;
t836 = -t1070 * t988 + t1074 * t866;
t826 = t874 + t965;
t803 = -t1070 * t966 + t1074 * t867;
t802 = t1070 * t867 + t1074 * t966;
t801 = -pkin(2) * t905 + t876;
t798 = t1073 * t886 - t1197;
t795 = -t1069 * t886 - t1194;
t793 = -pkin(2) * t897 + t875;
t789 = t1074 * t798 - t1127;
t785 = t1071 * t905 + t1075 * t846;
t784 = t1071 * t846 - t1075 * t905;
t781 = t1071 * t897 + t1075 * t838;
t780 = t1071 * t838 - t1075 * t897;
t779 = -qJ(5) * t827 - qJ(6) * t1202;
t766 = t1070 * t944 + t1074 * t783;
t765 = t1070 * t783 - t1074 * t944;
t764 = t1140 + t1274;
t757 = t1071 * t865 + t1075 * t803;
t756 = t1071 * t803 - t1075 * t865;
t755 = t1157 - t1251;
t751 = t1141 - t1159;
t745 = t1068 * t827 + t1246;
t742 = -pkin(1) * t845 - pkin(2) * t931 - pkin(8) * t906 - t1149;
t728 = -pkin(1) * t837 - pkin(2) * t928 - pkin(8) * t898 + t1136;
t721 = -pkin(8) * t865 - t782;
t720 = qJ(6) * t1203 - t1173 * t833;
t709 = -t1070 * t826 + t1286;
t704 = t1157 + t1283;
t697 = -pkin(7) * t845 - t1070 * t801 + t1074 * t863;
t696 = -pkin(3) * t824 - t1140 + t1252;
t695 = -pkin(7) * t837 - t1070 * t793 + t1074 * t848;
t693 = t1070 * t824 + t1266;
t690 = -t1074 * t824 + t1270;
t687 = t1071 * t782 + t1075 * t766;
t686 = t1071 * t766 - t1075 * t782;
t683 = -pkin(1) * t802 - pkin(2) * t966 - pkin(8) * t867 - t783;
t682 = -pkin(1) * t765 + pkin(2) * t944 - pkin(8) * t783;
t681 = -pkin(7) * t802 + t1074 * t721 + t1169 * t865;
t675 = -t1069 * t745 + t1073 * t751;
t669 = -t1069 * t751 - t1073 * t745;
t666 = t1081 + t1249;
t665 = pkin(4) * t880 + t684;
t664 = qJ(6) * t1178 - t1187 + t694;
t662 = t1074 * t675 - t1144;
t660 = -pkin(7) * t765 + (-pkin(8) * t1074 + t1169) * t782;
t647 = t1032 - t1079 + 0.2e1 * t1162;
t643 = t1323 + t713;
t642 = t1075 * t693 + t1269;
t639 = t1071 * t693 - t1265;
t636 = t1264 + t712;
t635 = t679 + (t1200 - t1178) * qJ(6) + t1187;
t634 = -qJ(5) * t1141 - t1068 * t680 - t1251;
t633 = -pkin(3) * t847 + pkin(9) * t645;
t631 = pkin(4) * t1159 + t1072 * t679 - t1274;
t630 = -t1069 * t704 + t1073 * t764 + t1310;
t629 = qJD(6) * t1177 + t1108 * t983 - t1080 - t1248 - t1249;
t628 = t1068 * t1081 + t1072 * t684;
t627 = t1068 * t684 - t1072 * t1081;
t626 = t1072 * t680 + t1103 * t827 + t1252;
t625 = t680 + (-t827 - t874) * pkin(5) + (-t1191 - t1178) * qJ(6) + t1193;
t624 = pkin(4) * t1202 + t1081 + t1305;
t623 = -t1069 * t696 + t1073 * t755 - t1276;
t622 = -t1296 + t1068 * t679 - (pkin(3) + t1167) * t833;
t621 = -t644 - t1273;
t620 = -t1173 * t880 + (-t1085 - t874) * qJ(6) + t1082 + t1201;
t619 = -pkin(4) * t1200 + t1033 - t1090 + t1303;
t618 = -t1304 + t645;
t617 = -pkin(4) * t1192 + t1326;
t610 = -t1173 * t1200 + t1079 + t1201 + t1303;
t609 = t1173 * t1192 - t1326;
t608 = -t1068 * t720 + t1072 * t635 - t1274;
t607 = -t1068 * t625 + t1072 * t779 - t1251;
t606 = -qJ(5) * t664 - qJ(6) * t646;
t605 = t1173 * t1202 + t1305 + t646;
t604 = t1068 * t646 + t1072 * t647;
t603 = t1068 * t647 - t1072 * t646;
t602 = -t1068 * t665 + t1072 * t666 - t1273;
t601 = -t1069 * t764 - t1073 * t704 - t1319;
t600 = t1068 * t635 + t1072 * t720 - t1283;
t599 = t1073 * t645 - t1150;
t598 = t1069 * t645 + t1137;
t597 = -pkin(3) * t827 + t1068 * t779 + t1072 * t625 + t1252;
t596 = t1068 * t666 + t1072 * t665 - t1304;
t595 = -pkin(1) * t690 + pkin(2) * t824 - t1069 * t755 - t1073 * t696 - t1275;
t594 = t1070 * t847 + t1074 * t599;
t593 = t1070 * t599 - t1074 * t847;
t592 = -pkin(9) * t627 + (pkin(4) * t1068 - qJ(5) * t1072) * t694;
t591 = -t1069 * t627 + t1073 * t628;
t590 = t1069 * t628 + t1073 * t627;
t589 = -qJ(6) * t647 - t1173 * t664;
t588 = -t1070 * t643 + t1074 * t630 - t1320;
t587 = -t1069 * t626 + t1073 * t634 - t1276;
t586 = -t1069 * t622 + t1073 * t631 - t1310;
t585 = -pkin(2) * t598 - pkin(3) * t644;
t584 = -pkin(7) * t690 - t1070 * t636 + t1074 * t623;
t583 = -t1068 * t620 + t1072 * t629 + t1273;
t582 = pkin(9) * t628 + (t1103 - t1167) * t694;
t581 = t1068 * t629 + t1072 * t620 + t1304;
t580 = t1070 * t694 + t1074 * t591;
t579 = t1070 * t591 - t1074 * t694;
t578 = -t1069 * t634 - t1073 * t626 + t1297;
t577 = -t1069 * t618 + t1073 * t621 + t1340;
t576 = -t1069 * t631 - t1073 * t622 + t1319;
t575 = -t1069 * t603 + t1073 * t604;
t574 = t1069 * t604 + t1073 * t603;
t573 = -t1069 * t600 + t1073 * t608 - t1310;
t572 = -pkin(8) * t598 - pkin(9) * t1137 - t1069 * t633;
t571 = t1071 * t598 + t1075 * t594;
t570 = t1071 * t594 - t1075 * t598;
t569 = -t1069 * t597 + t1073 * t607 - t1276;
t568 = -t1069 * t621 - t1073 * t618 + t1349;
t567 = -t1070 * t624 + t1074 * t587 - t1311;
t566 = t1070 * t664 + t1074 * t575;
t565 = t1070 * t575 - t1074 * t664;
t564 = -t1069 * t596 + t1073 * t602 + t1340;
t563 = -t1069 * t608 - t1073 * t600 + t1319;
t562 = -t1070 * t619 + t1074 * t586 + t1320;
t561 = -t1069 * t607 - t1073 * t597 + t1297;
t560 = -pkin(2) * t590 - pkin(3) * t627 + pkin(4) * t1081 - qJ(5) * t684;
t559 = -t1070 * t632 + t1074 * t577 + t1350;
t558 = -t1069 * t602 - t1073 * t596 + t1349;
t557 = t1071 * t590 + t1075 * t580;
t556 = t1071 * t580 - t1075 * t590;
t555 = -t1070 * t610 + t1074 * t573 + t1320;
t554 = -pkin(9) * t603 - t1068 * t589 + t1072 * t606;
t553 = -pkin(1) * t593 + pkin(2) * t847 - pkin(8) * t599 + pkin(9) * t1150 - t1073 * t633;
t552 = -t1070 * t605 + t1074 * t569 - t1311;
t551 = -t1069 * t581 + t1073 * t583 - t1340;
t550 = -t1070 * t617 + t1074 * t564 + t1350;
t549 = -pkin(3) * t664 + pkin(9) * t604 + t1068 * t606 + t1072 * t589;
t548 = -t1069 * t583 - t1073 * t581 - t1349;
t547 = -pkin(8) * t590 - t1069 * t582 + t1073 * t592;
t546 = t1071 * t574 + t1075 * t566;
t545 = t1071 * t566 - t1075 * t574;
t544 = -pkin(2) * t574 - pkin(3) * t603 - qJ(5) * t647 + t1173 * t646;
t543 = -pkin(7) * t593 - t1070 * t585 + t1074 * t572;
t542 = -t1070 * t609 + t1074 * t551 - t1350;
t541 = -pkin(1) * t579 + pkin(2) * t694 - pkin(8) * t591 - t1069 * t592 - t1073 * t582;
t540 = -pkin(7) * t579 - t1070 * t560 + t1074 * t547;
t539 = -pkin(8) * t574 - t1069 * t549 + t1073 * t554;
t538 = -pkin(1) * t565 + pkin(2) * t664 - pkin(8) * t575 - t1069 * t554 - t1073 * t549;
t537 = -pkin(7) * t565 - t1070 * t544 + t1074 * t539;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1035, -t1036, 0, t991, 0, 0, 0, 0, 0, 0, t952, t953, t987, t901, 0, 0, 0, 0, 0, 0, t781, t785, t757, t687, 0, 0, 0, 0, 0, 0, t642, t657, -t614, t571, 0, 0, 0, 0, 0, 0, t1314, -t614, -t657, t557, 0, 0, 0, 0, 0, 0, t1314, -t657, t614, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1036, -t1035, 0, t990, 0, 0, 0, 0, 0, 0, t950, t951, t986, t900, 0, 0, 0, 0, 0, 0, t780, t784, t756, t686, 0, 0, 0, 0, 0, 0, t639, t654, -t611, t570, 0, 0, 0, 0, 0, 0, t1316, -t611, -t654, t556, 0, 0, 0, 0, 0, 0, t1316, -t654, t611, t545; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t992, t993, 0, t933, 0, 0, 0, 0, 0, 0, t837, t845, t802, t765, 0, 0, 0, 0, 0, 0, t690, t698, -t648, t593, 0, 0, 0, 0, 0, 0, t1290, -t648, -t698, t579, 0, 0, 0, 0, 0, 0, t1290, -t698, t648, t565; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1036, 0, -t1035, 0, t1096, -t1009, -t990, -pkin(6) * t990, t1002 * t1075 - t1100, -t1038 * t1071 + t1075 * t984, t1070 * t1112 + t1075 * t996, t1001 * t1075 + t1100, t1071 * t1111 + t1075 * t994, qJDD(2) * t1071 + t1022 * t1075, -pkin(6) * t950 - t1071 * t938 + t1075 * t946, -pkin(6) * t951 - t1071 * t939 + t1075 * t947, -pkin(6) * t986 - t1075 * t933, -pkin(6) * t900 + (pkin(1) * t1071 - pkin(7) * t1075) * t933, -t1071 * t922 + t1075 * t882, -t1071 * t864 + t1075 * t836, -t1071 * t911 + t1075 * t861, -t1071 * t920 + t1075 * t881, -t1071 * t912 + t1075 * t862, -t1071 * t941 + t1075 * t917, -pkin(6) * t780 - t1071 * t728 + t1075 * t695, -pkin(6) * t784 - t1071 * t742 + t1075 * t697, -pkin(6) * t756 - t1071 * t683 + t1075 * t681, -pkin(6) * t686 - t1071 * t682 + t1075 * t660, t1185, -t1344, -t1345, t1232, -t1351, t1233, -pkin(6) * t639 - t1071 * t595 + t1075 * t584, -t1071 * t601 + t1075 * t588 - t1336, -t1071 * t568 + t1075 * t559 + t1354, -pkin(6) * t570 - t1071 * t553 + t1075 * t543, t1185, -t1345, t1344, t1233, t1351, t1232, -t1071 * t578 + t1075 * t567 - t1335, -t1071 * t558 + t1075 * t550 + t1354, -t1071 * t576 + t1075 * t562 + t1336, -pkin(6) * t556 - t1071 * t541 + t1075 * t540, t1185, -t1071 * t669 + t1075 * t662, t1345, t1232, t1075 * t709 + t1287, -t1071 * t795 + t1075 * t789, -t1071 * t561 + t1075 * t552 - t1335, -t1071 * t563 + t1075 * t555 + t1336, -t1071 * t548 + t1075 * t542 - t1354, -pkin(6) * t545 - t1071 * t538 + t1075 * t537; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1035, 0, t1036, 0, t1009, t1096, t991, pkin(6) * t991, t1002 * t1071 + t1099, t1038 * t1075 + t1071 * t984, -t1070 * t1110 + t1071 * t996, t1001 * t1071 - t1099, t1071 * t994 - t1074 * t1110, -qJDD(2) * t1075 + t1022 * t1071, pkin(6) * t952 + t1071 * t946 + t1075 * t938, pkin(6) * t953 + t1071 * t947 + t1075 * t939, pkin(6) * t987 - t1071 * t933, pkin(6) * t901 + (-pkin(1) * t1075 - pkin(7) * t1071) * t933, t1071 * t882 + t1075 * t922, t1071 * t836 + t1075 * t864, t1071 * t861 + t1075 * t911, t1071 * t881 + t1075 * t920, t1071 * t862 + t1075 * t912, t1071 * t917 + t1075 * t941, pkin(6) * t781 + t1071 * t695 + t1075 * t728, pkin(6) * t785 + t1071 * t697 + t1075 * t742, pkin(6) * t757 + t1071 * t681 + t1075 * t683, pkin(6) * t687 + t1071 * t660 + t1075 * t682, t1186, -t1346, -t1347, t1234, -t1352, t1235, pkin(6) * t642 + t1071 * t584 + t1075 * t595, t1071 * t588 + t1075 * t601 + t1338, t1071 * t559 + t1075 * t568 - t1353, pkin(6) * t571 + t1071 * t543 + t1075 * t553, t1186, -t1347, t1346, t1235, t1352, t1234, t1071 * t567 + t1075 * t578 + t1337, t1071 * t550 + t1075 * t558 - t1353, t1071 * t562 + t1075 * t576 - t1338, pkin(6) * t557 + t1071 * t540 + t1075 * t541, t1186, t1071 * t662 + t1075 * t669, t1347, t1234, t1071 * t709 - t1284, t1071 * t789 + t1075 * t795, t1071 * t552 + t1075 * t561 + t1337, t1071 * t555 + t1075 * t563 - t1338, t1071 * t542 + t1075 * t548 + t1353, pkin(6) * t546 + t1071 * t537 + t1075 * t538; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1043, t1044, 0, 0, t1092 * t1070, t1028 * t1074 + t1031 * t1070, t1049 * t1074 + t1122, -t1091 * t1074, t1051 * t1070 + t1123, 0, pkin(1) * t1031 + pkin(7) * t995 + t1128, -pkin(1) * t1028 + pkin(7) * t997 - t1129, pkin(1) * t1037 + pkin(7) * t1034 + t935, pkin(1) * t1014 + pkin(7) * t935, t1070 * t923 - t1106, t1070 * t866 + t1074 * t988, t1070 * t913 + t1074 * t932, t1070 * t921 + t1106, t1070 * t914 + t1074 * t927, t1021 * t1074 + t1070 * t942, -pkin(1) * t897 + pkin(7) * t838 + t1070 * t848 + t1074 * t793, -pkin(1) * t905 + pkin(7) * t846 + t1070 * t863 + t1074 * t801, pkin(7) * t803 + t1070 * t721 + (-pkin(1) - t1168) * t865, pkin(7) * t766 + (-pkin(1) + t1097) * t782, t1165, -t1322, -t1321, t1210, t1343, t1207, pkin(7) * t693 + t1070 * t623 + t1074 * t636 - t1278, t1070 * t630 + t1074 * t643 - t1317, t1070 * t577 + t1074 * t632 - t1348, -pkin(1) * t598 + pkin(7) * t594 + t1070 * t572 + t1074 * t585, t1165, -t1321, t1322, t1207, -t1343, t1210, t1070 * t587 + t1074 * t624 + t1318, t1070 * t564 + t1074 * t617 - t1348, t1070 * t586 + t1074 * t619 + t1317, -pkin(1) * t590 + pkin(7) * t580 + t1070 * t547 + t1074 * t560, t1165, t1070 * t675 + t907, t1321, t1210, t1074 * t826 + t1289, t1070 * t798 + t1007, t1070 * t569 + t1074 * t605 + t1318, t1070 * t573 + t1074 * t610 + t1317, t1070 * t551 + t1074 * t609 + t1348, -pkin(1) * t574 + pkin(7) * t566 + t1070 * t539 + t1074 * t544;];
tauB_reg  = t1;
