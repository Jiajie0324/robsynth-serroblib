% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 01:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR13_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR13_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR13_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 01:18:53
% EndTime: 2019-05-07 01:19:57
% DurationCPUTime: 49.47s
% Computational Cost: add. (298682->939), mult. (664534->1449), div. (0->0), fcn. (502589->12), ass. (0->680)
t1040 = sin(qJ(1));
t1045 = cos(qJ(1));
t1034 = sin(pkin(6));
t1035 = cos(pkin(6));
t1044 = cos(qJ(2));
t1039 = sin(qJ(2));
t1026 = qJDD(1) * t1035 + qJDD(2);
t1047 = t1034 ^ 2;
t1046 = qJD(1) ^ 2;
t1153 = t1039 * t1046;
t1133 = t1044 * t1153;
t1125 = t1047 * t1133;
t995 = t1026 - t1125;
t1178 = t1039 * t995;
t1027 = t1035 * qJD(1) + qJD(2);
t1023 = t1027 ^ 2;
t1152 = t1046 * t1047;
t1210 = t1039 ^ 2;
t1024 = t1210 * t1152;
t978 = -t1024 - t1023;
t1085 = -t1044 * t978 + t1178;
t1155 = t1034 * t1044;
t1135 = qJD(1) * t1155;
t1005 = t1027 * t1135;
t1149 = qJDD(1) * t1039;
t1160 = qJD(1) * t1044;
t1076 = qJD(2) * t1160 + t1149;
t1059 = t1076 * t1034;
t1215 = t1005 + t1059;
t887 = t1034 * t1215 + t1035 * t1085;
t1165 = t1044 * t995;
t938 = t1039 * t978 + t1165;
t828 = t1040 * t938 + t1045 * t887;
t1254 = pkin(7) * t828;
t831 = t1040 * t887 - t1045 * t938;
t1253 = pkin(7) * t831;
t1033 = t1044 ^ 2;
t1025 = t1033 * t1152;
t1000 = -t1025 - t1023;
t994 = t1026 + t1125;
t1166 = t1044 * t994;
t1082 = t1000 * t1039 + t1166;
t1156 = t1034 * t1039;
t1136 = qJD(1) * t1156;
t1020 = qJD(2) * t1136;
t1161 = qJD(1) * t1039;
t1137 = t1027 * t1161;
t1148 = qJDD(1) * t1044;
t967 = -t1020 + (-t1137 + t1148) * t1034;
t907 = t1034 * t967 + t1035 * t1082;
t1179 = t1039 * t994;
t951 = t1000 * t1044 - t1179;
t841 = t1040 * t951 + t1045 * t907;
t1252 = pkin(7) * t841;
t844 = t1040 * t907 - t1045 * t951;
t1251 = pkin(7) * t844;
t901 = t1034 * t1082 - t1035 * t967;
t1250 = pkin(8) * (t1034 * t901 + t1035 * t907);
t885 = t1034 * t1085 - t1035 * t1215;
t1249 = pkin(8) * (t1034 * t885 + t1035 * t887);
t1248 = pkin(1) * t885;
t1247 = pkin(1) * t887;
t1246 = pkin(1) * t901;
t1245 = pkin(1) * t907;
t999 = t1025 - t1023;
t1083 = t1039 * t999 + t1165;
t966 = -t1020 + (t1137 + t1148) * t1034;
t905 = -t1034 * t966 + t1035 * t1083;
t950 = -t1044 * t999 + t1178;
t1244 = t1040 * t905 + t1045 * t950;
t998 = -t1024 + t1023;
t1084 = t1044 * t998 + t1179;
t965 = -t1005 + t1059;
t903 = -t1034 * t965 + t1035 * t1084;
t948 = t1039 * t998 - t1166;
t1243 = t1040 * t903 + t1045 * t948;
t1242 = -t1040 * t950 + t1045 * t905;
t1241 = -t1040 * t948 + t1045 * t903;
t1238 = pkin(8) * t938;
t1237 = pkin(8) * t951;
t1037 = sin(qJ(5));
t1042 = cos(qJ(5));
t1038 = sin(qJ(4));
t1043 = cos(qJ(4));
t996 = t1034 * t1148 - t1020;
t1081 = t1043 * t1026 - t1038 * t996;
t984 = t1027 * t1038 + t1043 * t1135;
t930 = -qJD(4) * t984 + t1081;
t1015 = qJD(4) + t1136;
t986 = t1027 * t1043 - t1038 * t1135;
t956 = -t1042 * t1015 + t1037 * t986;
t989 = qJDD(4) + t1059;
t1147 = t956 * qJD(5) - t1037 * t989 - t1042 * t930;
t979 = qJD(5) + t984;
t925 = t979 * t956;
t806 = -t925 + t1147;
t1058 = (qJD(2) + t1027) * t1160 + t1149;
t1018 = g(1) * t1040 - t1045 * g(2);
t1204 = pkin(8) * t1034;
t991 = qJDD(1) * pkin(1) + t1046 * t1204 + t1018;
t1053 = -qJ(3) * t1058 - t991;
t1036 = sin(qJ(6));
t1127 = t1038 * t1026 + t1043 * t996;
t929 = -qJD(4) * t986 - t1127;
t928 = qJDD(5) - t929;
t1056 = qJDD(6) + t928;
t1041 = cos(qJ(6));
t958 = t1015 * t1037 + t1042 * t986;
t898 = t1036 * t958 + t1041 * t956;
t900 = -t1036 * t956 + t1041 * t958;
t819 = t900 * t898;
t1219 = t1056 - t819;
t1228 = t1036 * t1219;
t910 = t958 * t956;
t1222 = -t910 + t928;
t1227 = t1037 * t1222;
t944 = t986 * t984;
t1221 = -t944 + t989;
t1226 = t1038 * t1221;
t1225 = t1041 * t1219;
t1224 = t1042 * t1222;
t1223 = t1043 * t1221;
t968 = t1015 * t984;
t892 = t930 - t968;
t1129 = t1037 * t930 - t1042 * t989;
t852 = -qJD(5) * t958 - t1129;
t1062 = qJD(6) * t898 - t1036 * t852 + t1041 * t1147;
t976 = qJD(6) + t979;
t861 = t976 * t898;
t1218 = -t1062 - t861;
t805 = -t925 - t1147;
t1205 = pkin(2) * t1044;
t1119 = -qJ(3) * t1039 - t1205;
t1063 = t1119 * t1156;
t1200 = t1044 * g(3);
t1217 = t1034 * (t1046 * t1063 + t1200);
t1216 = t1039 * t1047;
t802 = (qJD(5) - t979) * t958 + t1129;
t1130 = -t1036 * t1147 - t1041 * t852;
t709 = (qJD(6) - t976) * t900 + t1130;
t1214 = t1034 * t1083 + t1035 * t966;
t1213 = t1034 * t1084 + t1035 * t965;
t896 = t898 ^ 2;
t897 = t900 ^ 2;
t1212 = t956 ^ 2;
t955 = t958 ^ 2;
t974 = t976 ^ 2;
t977 = t979 ^ 2;
t982 = t984 ^ 2;
t983 = t986 ^ 2;
t1211 = t1015 ^ 2;
t1209 = -pkin(2) - pkin(9);
t1002 = -t1024 - t1025;
t1086 = t1039 * t966 - t1044 * t965;
t878 = -t1034 * t1002 + t1035 * t1086;
t913 = t1039 * t965 + t1044 * t966;
t813 = t1040 * t913 + t1045 * t878;
t1208 = pkin(7) * t813;
t1207 = t996 * pkin(2);
t1206 = pkin(2) * t1039;
t1203 = pkin(8) * t1035;
t1202 = t1026 * pkin(2);
t1201 = t1035 * g(3);
t1019 = g(1) * t1045 + g(2) * t1040;
t992 = -pkin(1) * t1046 + qJDD(1) * t1204 - t1019;
t1128 = -t1035 * t1044 * t991 + t1039 * t992;
t1120 = qJDD(3) + t1128;
t1054 = t1023 * qJ(3) - t1120 + t1202;
t1049 = -t994 * pkin(9) + (pkin(3) * t1149 + t1200 + (qJD(1) * t1063 + (qJD(2) - t1027) * t1044 * pkin(3)) * qJD(1)) * t1034 - t1054;
t1126 = t1027 * t1136;
t1131 = -pkin(2) * t1126 + t1201;
t1134 = qJD(3) * t1161;
t1124 = -0.2e1 * t1034 * t1134 - t1131;
t993 = pkin(3) * t1136 - pkin(9) * t1027;
t822 = -pkin(3) * t1025 + t1209 * t996 + (-t1161 * t993 + t1053) * t1034 + t1124;
t754 = t1038 * t1049 + t1043 * t822;
t942 = pkin(4) * t984 - pkin(10) * t986;
t721 = -pkin(4) * t1211 + pkin(10) * t989 - t942 * t984 + t754;
t1154 = t1035 * t1039;
t937 = -g(3) * t1156 + t1044 * t992 + t1154 * t991;
t863 = t1044 * t1119 * t1152 - t1023 * pkin(2) + t1026 * qJ(3) + 0.2e1 * qJD(3) * t1027 + t937;
t821 = t996 * pkin(3) - pkin(9) * t1025 + t1027 * t993 + t863;
t745 = -t892 * pkin(10) + (t1015 * t986 - t929) * pkin(4) + t821;
t654 = t1037 * t721 - t1042 * t745;
t621 = t1222 * pkin(5) + pkin(11) * t806 - t654;
t655 = t1037 * t745 + t1042 * t721;
t919 = pkin(5) * t979 - pkin(11) * t958;
t632 = -pkin(5) * t1212 + pkin(11) * t852 - t919 * t979 + t655;
t569 = t1036 * t621 + t1041 * t632;
t1199 = pkin(1) * t878 + t913 * t1204;
t753 = t1038 * t822 - t1043 * t1049;
t720 = -t989 * pkin(4) - t1211 * pkin(10) + t942 * t986 + t753;
t666 = -t852 * pkin(5) - pkin(11) * t1212 + t919 * t958 + t720;
t1190 = t1036 * t666;
t778 = t1056 + t819;
t1189 = t1036 * t778;
t1188 = t1036 * t976;
t568 = t1036 * t632 - t1041 * t621;
t534 = t1036 * t569 - t1041 * t568;
t1187 = t1037 * t534;
t1186 = t1037 * t720;
t838 = t910 + t928;
t1185 = t1037 * t838;
t1184 = t1037 * t979;
t1183 = t1038 * t821;
t923 = t944 + t989;
t1182 = t1038 * t923;
t1181 = t1039 * t967;
t970 = t1034 * t991 + t1201;
t1180 = t1039 * t970;
t1177 = t1041 * t666;
t1176 = t1041 * t778;
t1175 = t1041 * t976;
t1174 = t1042 * t534;
t1173 = t1042 * t720;
t1172 = t1042 * t838;
t1171 = t1042 * t979;
t1170 = t1043 * t821;
t1169 = t1043 * t923;
t1168 = t1044 * t967;
t1167 = t1044 * t970;
t1162 = qJD(1) * t1027;
t1159 = t1015 * t1038;
t1158 = t1015 * t1043;
t1157 = t1026 * t1034;
t1150 = qJD(4) + t1015;
t1146 = t1038 * t819;
t1145 = t1038 * t910;
t1144 = t1039 * t944;
t1143 = t1043 * t819;
t1142 = t1043 * t910;
t1141 = t1044 * t944;
t1140 = pkin(4) * t1043 + pkin(3);
t876 = t1035 * t1002 + t1034 * t1086;
t1139 = -pkin(1) * t876 + t913 * t1203;
t1138 = t1034 * t1162;
t1132 = pkin(4) * t1038 + qJ(3);
t535 = t1036 * t568 + t1041 * t569;
t597 = t1037 * t654 + t1042 * t655;
t973 = -t1018 * t1040 - t1045 * t1019;
t1011 = qJDD(1) * t1045 - t1040 * t1046;
t1123 = -pkin(7) * t1011 - g(3) * t1040;
t1122 = -t1180 - t1238;
t1121 = t1167 + t1237;
t596 = t1037 * t655 - t1042 * t654;
t671 = t1038 * t754 - t1043 * t753;
t672 = t1038 * t753 + t1043 * t754;
t514 = t1042 * t535 - t1187;
t505 = t1038 * t514 - t1043 * t666;
t513 = t1037 * t535 + t1174;
t1118 = t1039 * t513 - t1044 * t505;
t713 = t1062 - t861;
t644 = -t1036 * t709 + t1041 * t713;
t646 = -t1036 * t713 - t1041 * t709;
t588 = -t1037 * t644 + t1042 * t646;
t768 = -t896 - t897;
t570 = t1038 * t588 - t1043 * t768;
t586 = t1037 * t646 + t1042 * t644;
t1117 = t1039 * t586 - t1044 * t570;
t708 = (qJD(6) + t976) * t900 + t1130;
t643 = -t1036 * t708 + t1041 * t1218;
t645 = -t1036 * t1218 - t1041 * t708;
t587 = -t1037 * t643 + t1042 * t645;
t818 = -t897 + t896;
t575 = -t1038 * t587 - t1043 * t818;
t585 = t1037 * t645 + t1042 * t643;
t1116 = t1039 * t585 + t1044 * t575;
t577 = t1038 * t597 - t1043 * t720;
t1115 = t1039 * t596 - t1044 * t577;
t795 = -t974 - t896;
t716 = t1036 * t795 + t1225;
t717 = t1041 * t795 - t1228;
t650 = -t1037 * t716 + t1042 * t717;
t606 = t1038 * t650 - t1043 * t708;
t649 = t1037 * t717 + t1042 * t716;
t1114 = t1039 * t649 - t1044 * t606;
t840 = -t897 - t974;
t733 = t1041 * t840 - t1189;
t734 = -t1036 * t840 - t1176;
t659 = -t1037 * t733 + t1042 * t734;
t610 = t1038 * t659 - t1043 * t1218;
t658 = t1037 * t734 + t1042 * t733;
t1113 = t1039 * t658 - t1044 * t610;
t860 = -t897 + t974;
t739 = t1041 * t860 + t1228;
t741 = -t1036 * t860 + t1225;
t664 = -t1037 * t739 + t1042 * t741;
t612 = -t1038 * t664 - t1043 * t713;
t662 = t1037 * t741 + t1042 * t739;
t1112 = t1039 * t662 + t1044 * t612;
t859 = t896 - t974;
t740 = t1036 * t859 + t1176;
t742 = t1041 * t859 - t1189;
t665 = -t1037 * t740 + t1042 * t742;
t613 = -t1038 * t665 - t1043 * t709;
t663 = t1037 * t742 + t1042 * t740;
t1111 = t1039 * t663 + t1044 * t613;
t746 = -qJD(6) * t900 - t1130;
t701 = t1041 * t746 + t1188 * t898;
t702 = -t1036 * t746 + t1175 * t898;
t641 = -t1037 * t701 + t1042 * t702;
t622 = -t1038 * t641 - t1143;
t639 = t1037 * t702 + t1042 * t701;
t1110 = t1039 * t639 + t1044 * t622;
t703 = -t1036 * t1062 + t1175 * t900;
t704 = -t1041 * t1062 - t1188 * t900;
t642 = -t1037 * t703 + t1042 * t704;
t623 = -t1038 * t642 + t1143;
t640 = t1037 * t704 + t1042 * t703;
t1109 = t1039 * t640 + t1044 * t623;
t1108 = t1039 * t821 - t1044 * t671;
t780 = (-t1036 * t898 - t1041 * t900) * t976;
t781 = (t1036 * t900 - t1041 * t898) * t976;
t700 = -t1037 * t780 + t1042 * t781;
t684 = -t1038 * t700 + t1043 * t1056;
t699 = t1037 * t781 + t1042 * t780;
t1107 = t1039 * t699 + t1044 * t684;
t731 = -t1037 * t806 - t1042 * t802;
t854 = t955 + t1212;
t689 = t1038 * t731 + t1043 * t854;
t729 = -t1037 * t802 + t1042 * t806;
t1106 = t1039 * t729 - t1044 * t689;
t803 = (-qJD(5) - t979) * t958 - t1129;
t730 = -t1037 * t805 + t1042 * t803;
t909 = -t955 + t1212;
t696 = -t1038 * t730 - t1043 * t909;
t728 = t1037 * t803 + t1042 * t805;
t1105 = t1039 * t728 + t1044 * t696;
t869 = -t977 - t1212;
t772 = t1042 * t869 - t1227;
t714 = t1038 * t772 + t1043 * t803;
t771 = t1037 * t869 + t1224;
t1104 = t1039 * t771 - t1044 * t714;
t895 = -t955 - t977;
t776 = -t1037 * t895 - t1172;
t722 = t1038 * t776 - t1043 * t805;
t775 = t1042 * t895 - t1185;
t1103 = t1039 * t775 - t1044 * t722;
t921 = -t955 + t977;
t791 = -t1037 * t921 + t1224;
t724 = -t1038 * t791 - t1043 * t806;
t789 = t1042 * t921 + t1227;
t1102 = t1039 * t789 + t1044 * t724;
t920 = -t977 + t1212;
t792 = t1042 * t920 - t1185;
t725 = -t1038 * t792 - t1043 * t802;
t790 = t1037 * t920 + t1172;
t1101 = t1039 * t790 + t1044 * t725;
t799 = -t1037 * t852 + t1171 * t956;
t760 = -t1038 * t799 - t1142;
t798 = t1042 * t852 + t1184 * t956;
t1100 = t1039 * t798 + t1044 * t760;
t801 = -t1042 * t1147 - t1184 * t958;
t761 = -t1038 * t801 + t1142;
t800 = -t1037 * t1147 + t1171 * t958;
t1099 = t1039 * t800 + t1044 * t761;
t846 = (t1037 * t958 - t1042 * t956) * t979;
t796 = -t1038 * t846 + t1043 * t928;
t845 = (-t1037 * t956 - t1042 * t958) * t979;
t1098 = t1039 * t845 + t1044 * t796;
t889 = t1150 * t986 + t1127;
t808 = t1038 * t889 - t1043 * t892;
t943 = t983 - t982;
t1097 = t1039 * t943 + t1044 * t808;
t1061 = (-qJD(4) + t1015) * t986 - t1127;
t893 = t930 + t968;
t809 = t1038 * t1061 - t1043 * t893;
t918 = -t982 - t983;
t1096 = t1039 * t918 - t1044 * t809;
t935 = -t1211 - t982;
t848 = t1038 * t935 + t1223;
t1095 = t1039 * t889 - t1044 * t848;
t851 = -pkin(2) * t1002 + t863;
t1050 = t1120 + t1217;
t855 = -t1202 + (-t1002 - t1023) * qJ(3) + t1050;
t1094 = t1039 * t855 + t1044 * t851;
t945 = -t983 - t1211;
t857 = t1043 * t945 - t1182;
t894 = -t1150 * t984 + t1081;
t1093 = t1039 * t894 - t1044 * t857;
t871 = t1054 - t1217;
t1092 = t1039 * t863 + t1044 * t871;
t962 = -t983 + t1211;
t865 = -t1043 * t962 - t1226;
t1091 = t1039 * t893 + t1044 * t865;
t961 = t982 - t1211;
t866 = -t1038 * t961 - t1169;
t1090 = t1039 * t1061 + t1044 * t866;
t915 = (t1038 * t984 + t1043 * t986) * t1015;
t1089 = t1039 * t989 + t1044 * t915;
t936 = g(3) * t1155 + t1128;
t1088 = t1039 * t937 - t1044 * t936;
t856 = t1039 * t936 + t1044 * t937;
t1087 = t1044 * t1215 + t1181;
t1080 = -t1035 * t1046 + t1162;
t972 = t1018 * t1045 - t1019 * t1040;
t881 = -t1043 * t929 - t1159 * t984;
t1079 = t1044 * t881 - t1144;
t883 = -t1038 * t930 - t1158 * t986;
t1078 = t1044 * t883 + t1144;
t1077 = (-t1034 * t876 - t1035 * t878) * pkin(8);
t533 = -pkin(5) * t666 + pkin(11) * t535;
t493 = -pkin(10) * t513 - pkin(11) * t1174 - t1037 * t533;
t495 = -pkin(4) * t513 - pkin(5) * t534;
t506 = t1038 * t666 + t1043 * t514;
t477 = pkin(3) * t513 - t1038 * t493 - t1043 * t495 + t1209 * t506;
t481 = pkin(3) * t505 - pkin(4) * t666 + pkin(10) * t514 - pkin(11) * t1187 - qJ(3) * t506 + t1042 * t533;
t492 = t1039 * t505 + t1044 * t513;
t1075 = pkin(8) * t492 + t1039 * t481 + t1044 * t477;
t529 = -pkin(5) * t768 + pkin(11) * t646 + t535;
t530 = -pkin(11) * t644 - t534;
t497 = -pkin(10) * t586 - t1037 * t529 + t1042 * t530;
t559 = -pkin(4) * t586 - pkin(5) * t644;
t571 = t1038 * t768 + t1043 * t588;
t491 = pkin(3) * t586 - t1038 * t497 - t1043 * t559 + t1209 * t571;
t494 = pkin(3) * t570 - pkin(4) * t768 + pkin(10) * t588 - qJ(3) * t571 + t1037 * t530 + t1042 * t529;
t536 = t1039 * t570 + t1044 * t586;
t1074 = pkin(8) * t536 + t1039 * t494 + t1044 * t491;
t595 = -pkin(5) * t708 + pkin(11) * t717 - t1177;
t618 = -pkin(11) * t716 + t1190;
t540 = -pkin(10) * t649 - t1037 * t595 + t1042 * t618;
t544 = -pkin(4) * t649 - pkin(5) * t716 + t568;
t607 = t1038 * t708 + t1043 * t650;
t499 = pkin(3) * t649 - t1038 * t540 - t1043 * t544 + t1209 * t607;
t516 = pkin(3) * t606 - pkin(4) * t708 + pkin(10) * t650 - qJ(3) * t607 + t1037 * t618 + t1042 * t595;
t565 = t1039 * t606 + t1044 * t649;
t1073 = pkin(8) * t565 + t1039 * t516 + t1044 * t499;
t599 = -pkin(5) * t1218 + pkin(11) * t734 + t1190;
t630 = -pkin(11) * t733 + t1177;
t545 = -pkin(10) * t658 - t1037 * t599 + t1042 * t630;
t547 = -pkin(4) * t658 - pkin(5) * t733 + t569;
t611 = t1038 * t1218 + t1043 * t659;
t503 = pkin(3) * t658 - t1038 * t545 - t1043 * t547 + t1209 * t611;
t519 = pkin(3) * t610 - pkin(4) * t1218 + pkin(10) * t659 - qJ(3) * t611 + t1037 * t630 + t1042 * t599;
t579 = t1039 * t610 + t1044 * t658;
t1072 = pkin(8) * t579 + t1039 * t519 + t1044 * t503;
t578 = t1038 * t720 + t1043 * t597;
t512 = t1209 * t578 + (pkin(10) * t1038 + t1140) * t596;
t522 = pkin(3) * t577 - pkin(4) * t720 + pkin(10) * t597 - qJ(3) * t578;
t543 = t1039 * t577 + t1044 * t596;
t1071 = pkin(8) * t543 + t1039 * t522 + t1044 * t512;
t580 = -pkin(10) * t729 - t596;
t690 = -t1038 * t854 + t1043 * t731;
t539 = -t1038 * t580 + t1140 * t729 + t1209 * t690;
t552 = pkin(3) * t689 + pkin(4) * t854 + pkin(10) * t731 - qJ(3) * t690 + t597;
t648 = t1039 * t689 + t1044 * t729;
t1070 = pkin(8) * t648 + t1039 * t552 + t1044 * t539;
t635 = -pkin(4) * t771 + t654;
t668 = -pkin(10) * t771 + t1186;
t715 = -t1038 * t803 + t1043 * t772;
t556 = pkin(3) * t771 - t1038 * t668 - t1043 * t635 + t1209 * t715;
t592 = pkin(3) * t714 + pkin(4) * t803 + pkin(10) * t772 - qJ(3) * t715 - t1173;
t667 = t1039 * t714 + t1044 * t771;
t1069 = pkin(8) * t667 + t1039 * t592 + t1044 * t556;
t636 = -pkin(4) * t775 + t655;
t670 = -pkin(10) * t775 + t1173;
t723 = t1038 * t805 + t1043 * t776;
t558 = pkin(3) * t775 - t1038 * t670 - t1043 * t636 + t1209 * t723;
t594 = pkin(3) * t722 - pkin(4) * t805 + pkin(10) * t776 - qJ(3) * t723 + t1186;
t669 = t1039 * t722 + t1044 * t775;
t1068 = pkin(8) * t669 + t1039 * t594 + t1044 * t558;
t603 = pkin(3) * t821 + t1209 * t672;
t609 = pkin(3) * t671 - qJ(3) * t672;
t652 = t1039 * t671 + t1044 * t821;
t1067 = pkin(8) * t652 + t1039 * t609 + t1044 * t603;
t811 = t1038 * t893 + t1043 * t1061;
t629 = pkin(3) * t918 + t1209 * t811 - t672;
t735 = pkin(3) * t809 - qJ(3) * t811;
t767 = t1039 * t809 + t1044 * t918;
t1066 = pkin(8) * t767 + t1039 * t735 + t1044 * t629;
t849 = t1043 * t935 - t1226;
t677 = pkin(3) * t848 - qJ(3) * t849 - t753;
t687 = pkin(3) * t889 + t1209 * t849 + t1170;
t784 = t1039 * t848 + t1044 * t889;
t1065 = pkin(8) * t784 + t1039 * t677 + t1044 * t687;
t858 = -t1038 * t945 - t1169;
t678 = pkin(3) * t857 - qJ(3) * t858 - t754;
t693 = pkin(3) * t894 + t1209 * t858 - t1183;
t787 = t1039 * t857 + t1044 * t894;
t1064 = pkin(8) * t787 + t1039 * t678 + t1044 * t693;
t834 = t1207 + qJ(3) * t1215 + (0.2e1 * t1134 - t1053) * t1034 + t1131;
t1060 = t1039 * t834 + t1205 * t1215 + t1238;
t1051 = t1034 * t1053 + t1124;
t835 = (-t996 - t967) * pkin(2) + t1051;
t1057 = -qJ(3) * t1181 + t1044 * t835 - t1237;
t785 = -t1039 * t871 + t1044 * t863;
t864 = t1051 - t1207;
t1055 = pkin(8) * t785 + t1119 * t864;
t1032 = t1034 * t1047;
t1010 = qJDD(1) * t1040 + t1045 * t1046;
t1009 = t1035 * t1026;
t1001 = t1024 - t1025;
t997 = -pkin(7) * t1010 + g(3) * t1045;
t969 = (t1033 + t1210) * t1138;
t960 = (t1044 * t1076 - t1162 * t1210) * t1034;
t959 = -t1033 * t1138 - t1039 * t996;
t941 = t1040 * t1157 + t1045 * t969;
t940 = t1040 * t969 - t1045 * t1157;
t934 = t1034 * t1058 * t1154 + t1032 * t1133;
t933 = (t1044 * t1080 + t1076) * t1216;
t932 = (t1034 * t996 - t1080 * t1216) * t1044;
t931 = (-t1032 * t1153 + (t996 - t1126) * t1035) * t1044;
t917 = -pkin(2) * t965 + qJ(3) * t966;
t916 = (t1038 * t986 - t1043 * t984) * t1015;
t914 = -t1039 * t1215 + t1168;
t884 = t1043 * t930 - t1159 * t986;
t882 = -t1038 * t929 + t1158 * t984;
t880 = -t1039 * t915 + t1044 * t989;
t879 = -t1034 * t1001 + t1035 * t1087;
t877 = t1035 * t1001 + t1034 * t1087;
t875 = -t1040 * t934 + t1045 * t960;
t874 = -t1040 * t931 + t1045 * t959;
t873 = t1040 * t960 + t1045 * t934;
t872 = t1040 * t959 + t1045 * t931;
t868 = t1043 * t961 - t1182;
t867 = -t1038 * t962 + t1223;
t836 = (-t1000 - t1023) * qJ(3) + (-t1026 - t994) * pkin(2) + t1050;
t833 = -t1039 * t883 + t1141;
t832 = -t1039 * t881 - t1141;
t827 = t1034 * t970 + t1035 * t1088;
t826 = t1034 * t1088 - t1035 * t970;
t825 = -pkin(2) * t978 + qJ(3) * t995 + t863;
t817 = -t1034 * t916 + t1035 * t1089;
t816 = -t1040 * t879 + t1045 * t914;
t815 = -t1040 * t878 + t1045 * t913;
t814 = t1040 * t914 + t1045 * t879;
t812 = pkin(7) * t815;
t810 = -t1038 * t892 - t1043 * t889;
t797 = t1038 * t928 + t1043 * t846;
t794 = -t1039 * t865 + t1044 * t893;
t793 = -t1039 * t866 + t1044 * t1061;
t788 = -t1180 - t1250;
t786 = pkin(2) * t871 + qJ(3) * t863;
t783 = -t1167 + t1249;
t782 = t1034 * t936 + t1035 * t1121 - t1246;
t774 = -t1039 * t808 + t1044 * t943;
t773 = t1034 * t937 + t1035 * t1122 + t1248;
t770 = -t1034 * t884 + t1035 * t1078;
t769 = -t1034 * t882 + t1035 * t1079;
t766 = -pkin(1) * t826 + t1203 * t856;
t765 = -t1040 * t827 + t1045 * t856;
t764 = t1040 * t856 + t1045 * t827;
t763 = t1043 * t801 + t1145;
t762 = t1043 * t799 - t1145;
t759 = t1035 * t856 + t1139;
t758 = -t1034 * t867 + t1035 * t1091;
t757 = -t1034 * t868 + t1035 * t1090;
t756 = (-t1034 * t826 - t1035 * t827) * pkin(8);
t755 = t1077 - t1088;
t752 = -t1034 * t864 + t1035 * t1092;
t751 = t1034 * t1092 + t1035 * t864;
t750 = -t1034 * t858 + t1035 * t1093;
t749 = t1034 * t1093 + t1035 * t858;
t748 = -t1039 * t796 + t1044 * t845;
t738 = -t1034 * t849 + t1035 * t1095;
t737 = t1034 * t1095 + t1035 * t849;
t736 = -qJ(3) * t1168 - t1039 * t835 + t1250;
t732 = t1044 * t834 - t1215 * t1206 - t1249;
t727 = -t1038 * t802 + t1043 * t792;
t726 = -t1038 * t806 + t1043 * t791;
t718 = -t1034 * t810 + t1035 * t1097;
t707 = -t1034 * t811 + t1035 * t1096;
t706 = t1034 * t1096 + t1035 * t811;
t705 = -t1039 * t851 + t1044 * t855 + t1077;
t698 = -t1034 * t836 + t1035 * t1057 + t1246;
t697 = -t1038 * t909 + t1043 * t730;
t695 = -t1039 * t761 + t1044 * t800;
t694 = -t1039 * t760 + t1044 * t798;
t692 = qJ(3) * t894 + t1209 * t857 + t1170;
t691 = -t1034 * t825 + t1035 * t1060 - t1248;
t688 = -t1034 * t917 + t1035 * t1094 + t1139;
t686 = qJ(3) * t889 + t1209 * t848 + t1183;
t685 = t1038 * t1056 + t1043 * t700;
t683 = -t1034 * t797 + t1035 * t1098;
t682 = -t1040 * t750 + t1045 * t787;
t681 = t1040 * t787 + t1045 * t750;
t680 = -t1040 * t752 + t1045 * t785;
t679 = t1040 * t785 + t1045 * t752;
t676 = -t1040 * t738 + t1045 * t784;
t675 = t1040 * t784 + t1045 * t738;
t674 = -t1039 * t725 + t1044 * t790;
t673 = -t1039 * t724 + t1044 * t789;
t661 = -t1040 * t707 + t1045 * t767;
t660 = t1040 * t767 + t1045 * t707;
t657 = -t1034 * t763 + t1035 * t1099;
t656 = -t1034 * t762 + t1035 * t1100;
t651 = -t1039 * t696 + t1044 * t728;
t647 = (-qJ(3) * t1044 + t1206) * t864 + (-t1034 * t751 - t1035 * t752) * pkin(8);
t638 = -t1039 * t684 + t1044 * t699;
t637 = -pkin(1) * t751 - t1034 * t786 + t1035 * t1055;
t634 = -t1034 * t727 + t1035 * t1101;
t633 = -t1034 * t726 + t1035 * t1102;
t628 = qJ(3) * t918 + t1209 * t809 - t671;
t627 = -t1034 * t723 + t1035 * t1103;
t626 = t1034 * t1103 + t1035 * t723;
t625 = t1043 * t642 + t1146;
t624 = t1043 * t641 - t1146;
t617 = -t1034 * t715 + t1035 * t1104;
t616 = t1034 * t1104 + t1035 * t715;
t615 = -t1038 * t709 + t1043 * t665;
t614 = -t1038 * t713 + t1043 * t664;
t608 = -t1034 * t697 + t1035 * t1105;
t605 = -t1034 * t690 + t1035 * t1106;
t604 = t1034 * t1106 + t1035 * t690;
t602 = qJ(3) * t821 + t1209 * t671;
t601 = -t1034 * t672 + t1035 * t1108;
t600 = t1034 * t1108 + t1035 * t672;
t598 = -t1034 * t685 + t1035 * t1107;
t593 = -t1039 * t693 + t1044 * t678 + (-t1034 * t749 - t1035 * t750) * pkin(8);
t591 = -t1040 * t627 + t1045 * t669;
t590 = t1040 * t669 + t1045 * t627;
t589 = -t1039 * t687 + t1044 * t677 + (-t1034 * t737 - t1035 * t738) * pkin(8);
t584 = -t1040 * t617 + t1045 * t667;
t583 = t1040 * t667 + t1045 * t617;
t582 = -t1039 * t613 + t1044 * t663;
t581 = -t1039 * t612 + t1044 * t662;
t576 = -t1038 * t818 + t1043 * t587;
t574 = -t1039 * t623 + t1044 * t640;
t573 = -t1039 * t622 + t1044 * t639;
t572 = -pkin(1) * t749 - t1034 * t692 + t1035 * t1064;
t566 = -pkin(1) * t737 - t1034 * t686 + t1035 * t1065;
t564 = -t1040 * t605 + t1045 * t648;
t563 = t1040 * t648 + t1045 * t605;
t562 = -t1040 * t601 + t1045 * t652;
t561 = t1040 * t652 + t1045 * t601;
t560 = -t1039 * t629 + t1044 * t735 + (-t1034 * t706 - t1035 * t707) * pkin(8);
t557 = qJ(3) * t775 - t1038 * t636 + t1043 * t670 + t1209 * t722;
t555 = qJ(3) * t771 - t1038 * t635 + t1043 * t668 + t1209 * t714;
t554 = -t1034 * t615 + t1035 * t1111;
t553 = -t1034 * t614 + t1035 * t1112;
t551 = -t1034 * t625 + t1035 * t1109;
t550 = -t1034 * t624 + t1035 * t1110;
t549 = -t1034 * t611 + t1035 * t1113;
t548 = t1034 * t1113 + t1035 * t611;
t546 = -pkin(1) * t706 - t1034 * t628 + t1035 * t1066;
t542 = -t1034 * t607 + t1035 * t1114;
t541 = t1034 * t1114 + t1035 * t607;
t538 = t1043 * t580 + t1132 * t729 + t1209 * t689;
t537 = -t1039 * t575 + t1044 * t585;
t532 = -t1040 * t549 + t1045 * t579;
t531 = t1040 * t579 + t1045 * t549;
t528 = -t1034 * t578 + t1035 * t1115;
t527 = t1034 * t1115 + t1035 * t578;
t526 = -t1039 * t603 + t1044 * t609 + (-t1034 * t600 - t1035 * t601) * pkin(8);
t525 = -t1040 * t542 + t1045 * t565;
t524 = t1040 * t565 + t1045 * t542;
t523 = -t1034 * t576 + t1035 * t1116;
t521 = -t1034 * t571 + t1035 * t1117;
t520 = t1034 * t1117 + t1035 * t571;
t518 = -pkin(1) * t600 - t1034 * t602 + t1035 * t1067;
t517 = -t1039 * t558 + t1044 * t594 + (-t1034 * t626 - t1035 * t627) * pkin(8);
t515 = -t1039 * t556 + t1044 * t592 + (-t1034 * t616 - t1035 * t617) * pkin(8);
t511 = t1209 * t577 + (-pkin(10) * t1043 + t1132) * t596;
t510 = -pkin(1) * t626 - t1034 * t557 + t1035 * t1068;
t509 = -t1040 * t528 + t1045 * t543;
t508 = t1040 * t543 + t1045 * t528;
t507 = -pkin(1) * t616 - t1034 * t555 + t1035 * t1069;
t504 = -t1039 * t539 + t1044 * t552 + (-t1034 * t604 - t1035 * t605) * pkin(8);
t502 = qJ(3) * t658 - t1038 * t547 + t1043 * t545 + t1209 * t610;
t501 = -t1040 * t521 + t1045 * t536;
t500 = t1040 * t536 + t1045 * t521;
t498 = qJ(3) * t649 - t1038 * t544 + t1043 * t540 + t1209 * t606;
t496 = -pkin(1) * t604 - t1034 * t538 + t1035 * t1070;
t490 = qJ(3) * t586 - t1038 * t559 + t1043 * t497 + t1209 * t570;
t489 = -t1039 * t503 + t1044 * t519 + (-t1034 * t548 - t1035 * t549) * pkin(8);
t488 = -t1039 * t499 + t1044 * t516 + (-t1034 * t541 - t1035 * t542) * pkin(8);
t487 = -t1039 * t512 + t1044 * t522 + (-t1034 * t527 - t1035 * t528) * pkin(8);
t486 = -t1034 * t506 + t1035 * t1118;
t485 = t1034 * t1118 + t1035 * t506;
t484 = -pkin(1) * t548 - t1034 * t502 + t1035 * t1072;
t483 = -pkin(1) * t527 - t1034 * t511 + t1035 * t1071;
t482 = -pkin(1) * t541 - t1034 * t498 + t1035 * t1073;
t480 = -t1040 * t486 + t1045 * t492;
t479 = t1040 * t492 + t1045 * t486;
t478 = -t1039 * t491 + t1044 * t494 + (-t1034 * t520 - t1035 * t521) * pkin(8);
t476 = qJ(3) * t513 - t1038 * t495 + t1043 * t493 + t1209 * t505;
t475 = -pkin(1) * t520 - t1034 * t490 + t1035 * t1074;
t474 = -t1039 * t477 + t1044 * t481 + (-t1034 * t485 - t1035 * t486) * pkin(8);
t473 = -pkin(1) * t485 - t1034 * t476 + t1035 * t1075;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1010, -t1011, 0, t973, 0, 0, 0, 0, 0, 0, -t844, t831, t815, t765, 0, 0, 0, 0, 0, 0, t815, t844, -t831, t680, 0, 0, 0, 0, 0, 0, t676, t682, t661, t562, 0, 0, 0, 0, 0, 0, t584, t591, t564, t509, 0, 0, 0, 0, 0, 0, t525, t532, t501, t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1011, -t1010, 0, t972, 0, 0, 0, 0, 0, 0, t841, -t828, t813, t764, 0, 0, 0, 0, 0, 0, t813, -t841, t828, t679, 0, 0, 0, 0, 0, 0, t675, t681, t660, t561, 0, 0, 0, 0, 0, 0, t583, t590, t563, t508, 0, 0, 0, 0, 0, 0, t524, t531, t500, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t901, -t885, t876, t826, 0, 0, 0, 0, 0, 0, t876, -t901, t885, t751, 0, 0, 0, 0, 0, 0, t737, t749, t706, t600, 0, 0, 0, 0, 0, 0, t616, t626, t604, t527, 0, 0, 0, 0, 0, 0, t541, t548, t520, t485; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1011, 0, -t1010, 0, t1123, -t997, -t972, -pkin(7) * t972, t875, t816, -t1243, t874, -t1244, t941, -t1040 * t782 + t1045 * t788 - t1252, -t1040 * t773 + t1045 * t783 + t1254, -t1040 * t759 + t1045 * t755 - t1208, -pkin(7) * t764 - t1040 * t766 + t1045 * t756, t941, t1243, t1244, t875, t816, t874, -t1040 * t688 + t1045 * t705 - t1208, -t1040 * t698 + t1045 * t736 + t1252, -t1040 * t691 + t1045 * t732 - t1254, -pkin(7) * t679 - t1040 * t637 + t1045 * t647, -t1040 * t770 + t1045 * t833, -t1040 * t718 + t1045 * t774, -t1040 * t758 + t1045 * t794, -t1040 * t769 + t1045 * t832, -t1040 * t757 + t1045 * t793, -t1040 * t817 + t1045 * t880, -pkin(7) * t675 - t1040 * t566 + t1045 * t589, -pkin(7) * t681 - t1040 * t572 + t1045 * t593, -pkin(7) * t660 - t1040 * t546 + t1045 * t560, -pkin(7) * t561 - t1040 * t518 + t1045 * t526, -t1040 * t657 + t1045 * t695, -t1040 * t608 + t1045 * t651, -t1040 * t633 + t1045 * t673, -t1040 * t656 + t1045 * t694, -t1040 * t634 + t1045 * t674, -t1040 * t683 + t1045 * t748, -pkin(7) * t583 - t1040 * t507 + t1045 * t515, -pkin(7) * t590 - t1040 * t510 + t1045 * t517, -pkin(7) * t563 - t1040 * t496 + t1045 * t504, -pkin(7) * t508 - t1040 * t483 + t1045 * t487, -t1040 * t551 + t1045 * t574, -t1040 * t523 + t1045 * t537, -t1040 * t553 + t1045 * t581, -t1040 * t550 + t1045 * t573, -t1040 * t554 + t1045 * t582, -t1040 * t598 + t1045 * t638, -pkin(7) * t524 - t1040 * t482 + t1045 * t488, -pkin(7) * t531 - t1040 * t484 + t1045 * t489, -pkin(7) * t500 - t1040 * t475 + t1045 * t478, -pkin(7) * t479 - t1040 * t473 + t1045 * t474; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1010, 0, t1011, 0, t997, t1123, t973, pkin(7) * t973, t873, t814, t1241, t872, t1242, t940, t1040 * t788 + t1045 * t782 - t1251, t1040 * t783 + t1045 * t773 + t1253, t1040 * t755 + t1045 * t759 + t812, pkin(7) * t765 + t1040 * t756 + t1045 * t766, t940, -t1241, -t1242, t873, t814, t872, t1040 * t705 + t1045 * t688 + t812, t1040 * t736 + t1045 * t698 + t1251, t1040 * t732 + t1045 * t691 - t1253, pkin(7) * t680 + t1040 * t647 + t1045 * t637, t1040 * t833 + t1045 * t770, t1040 * t774 + t1045 * t718, t1040 * t794 + t1045 * t758, t1040 * t832 + t1045 * t769, t1040 * t793 + t1045 * t757, t1040 * t880 + t1045 * t817, pkin(7) * t676 + t1040 * t589 + t1045 * t566, pkin(7) * t682 + t1040 * t593 + t1045 * t572, pkin(7) * t661 + t1040 * t560 + t1045 * t546, pkin(7) * t562 + t1040 * t526 + t1045 * t518, t1040 * t695 + t1045 * t657, t1040 * t651 + t1045 * t608, t1040 * t673 + t1045 * t633, t1040 * t694 + t1045 * t656, t1040 * t674 + t1045 * t634, t1040 * t748 + t1045 * t683, pkin(7) * t584 + t1040 * t515 + t1045 * t507, pkin(7) * t591 + t1040 * t517 + t1045 * t510, pkin(7) * t564 + t1040 * t504 + t1045 * t496, pkin(7) * t509 + t1040 * t487 + t1045 * t483, t1040 * t574 + t1045 * t551, t1040 * t537 + t1045 * t523, t1040 * t581 + t1045 * t553, t1040 * t573 + t1045 * t550, t1040 * t582 + t1045 * t554, t1040 * t638 + t1045 * t598, pkin(7) * t525 + t1040 * t488 + t1045 * t482, pkin(7) * t532 + t1040 * t489 + t1045 * t484, pkin(7) * t501 + t1040 * t478 + t1045 * t475, pkin(7) * t480 + t1040 * t474 + t1045 * t473; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1018, t1019, 0, 0, t933, t877, t1213, t932, t1214, t1009, t1034 * t1121 - t1035 * t936 + t1245, t1034 * t1122 - t1035 * t937 - t1247, t1034 * t856 + t1199, pkin(1) * t827 + t1204 * t856, t1009, -t1213, -t1214, t933, t877, t932, t1034 * t1094 + t1035 * t917 + t1199, t1034 * t1057 + t1035 * t836 - t1245, t1034 * t1060 + t1035 * t825 + t1247, pkin(1) * t752 + t1034 * t1055 + t1035 * t786, t1034 * t1078 + t1035 * t884, t1034 * t1097 + t1035 * t810, t1034 * t1091 + t1035 * t867, t1034 * t1079 + t1035 * t882, t1034 * t1090 + t1035 * t868, t1034 * t1089 + t1035 * t916, pkin(1) * t738 + t1034 * t1065 + t1035 * t686, pkin(1) * t750 + t1034 * t1064 + t1035 * t692, pkin(1) * t707 + t1034 * t1066 + t1035 * t628, pkin(1) * t601 + t1034 * t1067 + t1035 * t602, t1034 * t1099 + t1035 * t763, t1034 * t1105 + t1035 * t697, t1034 * t1102 + t1035 * t726, t1034 * t1100 + t1035 * t762, t1034 * t1101 + t1035 * t727, t1034 * t1098 + t1035 * t797, pkin(1) * t617 + t1034 * t1069 + t1035 * t555, pkin(1) * t627 + t1034 * t1068 + t1035 * t557, pkin(1) * t605 + t1034 * t1070 + t1035 * t538, pkin(1) * t528 + t1034 * t1071 + t1035 * t511, t1034 * t1109 + t1035 * t625, t1034 * t1116 + t1035 * t576, t1034 * t1112 + t1035 * t614, t1034 * t1110 + t1035 * t624, t1034 * t1111 + t1035 * t615, t1034 * t1107 + t1035 * t685, pkin(1) * t542 + t1034 * t1073 + t1035 * t498, pkin(1) * t549 + t1034 * t1072 + t1035 * t502, pkin(1) * t521 + t1034 * t1074 + t1035 * t490, pkin(1) * t486 + t1034 * t1075 + t1035 * t476;];
tauB_reg  = t1;
