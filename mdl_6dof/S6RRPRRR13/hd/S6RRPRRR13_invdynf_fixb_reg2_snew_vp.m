% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 01:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR13_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR13_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR13_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR13_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 01:20:57
% EndTime: 2019-05-07 01:21:07
% DurationCPUTime: 9.77s
% Computational Cost: add. (66222->360), mult. (147555->476), div. (0->0), fcn. (111712->12), ass. (0->271)
t2354 = sin(pkin(6));
t2359 = sin(qJ(2));
t2406 = qJDD(1) * t2359;
t2364 = cos(qJ(2));
t2424 = qJD(1) * t2364;
t2372 = (qJD(2) * t2424 + t2406) * t2354;
t2355 = cos(pkin(6));
t2350 = qJD(1) * t2355 + qJD(2);
t2414 = t2354 * t2364;
t2404 = qJD(1) * t2414;
t2398 = t2350 * t2404;
t2300 = t2372 + t2398;
t2366 = qJD(1) ^ 2;
t2410 = t2366 * t2354 ^ 2;
t2347 = t2359 ^ 2 * t2410;
t2428 = t2350 ^ 2;
t2309 = -t2347 - t2428;
t2337 = t2364 * t2359 * t2410;
t2349 = qJDD(1) * t2355 + qJDD(2);
t2323 = -t2337 + t2349;
t2380 = t2309 * t2364 - t2323 * t2359;
t2266 = -t2354 * t2300 + t2355 * t2380;
t2289 = t2309 * t2359 + t2323 * t2364;
t2360 = sin(qJ(1));
t2365 = cos(qJ(1));
t2446 = t2266 * t2360 + t2289 * t2365;
t2445 = t2266 * t2365 - t2289 * t2360;
t2415 = t2354 * t2359;
t2405 = qJD(1) * t2415;
t2407 = qJDD(1) * t2354;
t2324 = -qJD(2) * t2405 + t2364 * t2407;
t2329 = t2350 * t2405;
t2303 = t2324 - t2329;
t2322 = t2337 + t2349;
t2353 = t2364 ^ 2;
t2348 = t2353 * t2410;
t2325 = -t2348 - t2428;
t2379 = t2322 * t2364 + t2325 * t2359;
t2277 = t2354 * t2303 + t2355 * t2379;
t2295 = t2322 * t2359 - t2325 * t2364;
t2444 = t2277 * t2360 + t2295 * t2365;
t2443 = t2277 * t2365 - t2295 * t2360;
t2371 = qJDD(4) + t2372;
t2358 = sin(qJ(4));
t2363 = cos(qJ(4));
t2312 = t2350 * t2358 + t2363 * t2404;
t2310 = qJD(5) + t2312;
t2307 = qJD(6) + t2310;
t2438 = qJD(6) + t2307;
t2275 = -t2355 * t2303 + t2354 * t2379;
t2264 = t2355 * t2300 + t2354 * t2380;
t2314 = t2350 * t2363 - t2358 * t2404;
t2339 = qJD(4) + t2405;
t2357 = sin(qJ(5));
t2362 = cos(qJ(5));
t2297 = t2314 * t2357 - t2362 * t2339;
t2299 = t2314 * t2362 + t2339 * t2357;
t2356 = sin(qJ(6));
t2361 = cos(qJ(6));
t2272 = t2361 * t2297 + t2299 * t2356;
t2437 = t2272 ^ 2;
t2274 = -t2297 * t2356 + t2299 * t2361;
t2436 = t2274 ^ 2;
t2435 = t2297 ^ 2;
t2434 = t2299 ^ 2;
t2433 = t2307 ^ 2;
t2432 = t2310 ^ 2;
t2431 = t2312 ^ 2;
t2430 = t2314 ^ 2;
t2429 = t2339 ^ 2;
t2427 = 2 * qJD(3);
t2426 = t2355 * g(3);
t2425 = qJD(1) * t2359;
t2423 = t2272 * t2274;
t2422 = t2297 * t2299;
t2421 = t2310 * t2297;
t2420 = t2314 * t2312;
t2419 = t2314 * t2339;
t2341 = t2360 * g(1) - g(2) * t2365;
t2413 = t2354 * t2366;
t2318 = qJDD(1) * pkin(1) + pkin(8) * t2413 + t2341;
t2418 = t2318 * t2355;
t2409 = qJD(5) - t2310;
t2408 = qJD(6) - t2307;
t2321 = pkin(3) * t2405 - pkin(9) * t2350;
t2370 = -t2318 + (-t2406 + (-qJD(2) - t2350) * t2424) * qJ(3);
t2396 = pkin(2) * t2329 - 0.2e1 * qJD(3) * t2405 - t2426;
t2403 = t2353 * t2413;
t2239 = (-pkin(2) - pkin(9)) * t2324 + (-pkin(3) * t2403 - t2321 * t2425 + t2370) * t2354 + t2396;
t2320 = (-pkin(2) * t2364 - qJ(3) * t2359) * t2354 * qJD(1);
t2342 = -g(1) * t2365 - g(2) * t2360;
t2319 = -pkin(1) * t2366 + pkin(8) * t2407 + t2342;
t2399 = t2359 * t2319 - t2364 * t2418;
t2373 = -t2349 * pkin(2) - t2428 * qJ(3) + qJDD(3) + t2399;
t2367 = -t2349 * pkin(9) + ((pkin(3) * qJDD(1) + qJD(1) * t2320) * t2359 + (-t2359 * pkin(9) * t2413 + g(3) + (qJD(2) - t2350) * qJD(1) * pkin(3)) * t2364) * t2354 + t2373;
t2216 = t2363 * t2239 + t2358 * t2367;
t2291 = pkin(4) * t2312 - pkin(10) * t2314;
t2199 = -pkin(4) * t2429 + pkin(10) * t2371 - t2312 * t2291 + t2216;
t2288 = -g(3) * t2415 + t2364 * t2319 + t2359 * t2418;
t2374 = -t2428 * pkin(2) + t2349 * qJ(3) + t2288;
t2238 = t2324 * pkin(3) + (-pkin(9) * t2403 + t2320 * t2424) * t2354 + (t2427 + t2321) * t2350 + t2374;
t2402 = t2314 * qJD(4) + t2363 * t2324 + t2358 * t2349;
t2267 = t2402 + t2419;
t2378 = t2358 * t2324 - t2363 * t2349;
t2285 = -qJD(4) * t2312 - t2378;
t2210 = (t2312 * t2339 - t2285) * pkin(10) + t2267 * pkin(4) + t2238;
t2177 = t2362 * t2199 + t2357 * t2210;
t2176 = -t2357 * t2199 + t2362 * t2210;
t2215 = -t2239 * t2358 + t2363 * t2367;
t2368 = -t2362 * t2285 - t2357 * t2371;
t2251 = -t2297 * qJD(5) - t2368;
t2400 = t2357 * t2285 - t2362 * t2371;
t2376 = qJD(5) * t2299 + t2400;
t2401 = -t2356 * t2251 - t2361 * t2376;
t2397 = qJDD(5) + t2402;
t2244 = t2397 - t2422;
t2166 = (-t2251 - t2421) * pkin(11) + t2244 * pkin(5) + t2176;
t2281 = pkin(5) * t2310 - pkin(11) * t2299;
t2169 = -pkin(5) * t2435 - pkin(11) * t2376 - t2310 * t2281 + t2177;
t2145 = t2166 * t2361 - t2169 * t2356;
t2146 = t2166 * t2356 + t2169 * t2361;
t2136 = t2145 * t2361 + t2146 * t2356;
t2137 = -t2145 * t2356 + t2146 * t2361;
t2131 = -t2136 * t2357 + t2137 * t2362;
t2198 = -t2371 * pkin(4) - t2429 * pkin(10) + t2291 * t2314 - t2215;
t2180 = pkin(5) * t2376 - pkin(11) * t2435 + t2281 * t2299 + t2198;
t2128 = t2131 * t2358 - t2180 * t2363;
t2130 = t2136 * t2362 + t2137 * t2357;
t2395 = -t2128 * t2364 + t2130 * t2359;
t2190 = -t2274 * t2408 + t2401;
t2369 = -t2361 * t2251 + t2356 * t2376;
t2192 = t2272 * t2408 + t2369;
t2170 = t2190 * t2356 + t2192 * t2361;
t2171 = t2190 * t2361 - t2192 * t2356;
t2153 = -t2170 * t2357 + t2171 * t2362;
t2218 = -t2436 - t2437;
t2147 = t2153 * t2358 - t2218 * t2363;
t2152 = t2170 * t2362 + t2171 * t2357;
t2394 = -t2147 * t2364 + t2152 * t2359;
t2155 = -t2176 * t2357 + t2177 * t2362;
t2149 = t2155 * t2358 - t2198 * t2363;
t2154 = t2176 * t2362 + t2177 * t2357;
t2393 = -t2149 * t2364 + t2154 * t2359;
t2377 = -qJDD(6) - t2397;
t2223 = -t2377 - t2423;
t2228 = -t2433 - t2437;
t2195 = t2223 * t2361 + t2228 * t2356;
t2196 = -t2223 * t2356 + t2228 * t2361;
t2174 = -t2195 * t2357 + t2196 * t2362;
t2189 = t2274 * t2438 - t2401;
t2160 = t2174 * t2358 - t2189 * t2363;
t2173 = t2195 * t2362 + t2196 * t2357;
t2392 = -t2160 * t2364 + t2173 * t2359;
t2224 = t2377 - t2423;
t2246 = -t2433 - t2436;
t2204 = t2224 * t2356 + t2246 * t2361;
t2205 = t2224 * t2361 - t2246 * t2356;
t2179 = -t2204 * t2357 + t2205 * t2362;
t2191 = -t2272 * t2438 - t2369;
t2162 = t2179 * t2358 - t2191 * t2363;
t2178 = t2204 * t2362 + t2205 * t2357;
t2391 = -t2162 * t2364 + t2178 * t2359;
t2183 = t2215 * t2363 + t2216 * t2358;
t2390 = -t2183 * t2364 + t2238 * t2359;
t2230 = -t2299 * t2409 - t2400;
t2232 = t2297 * t2409 + t2368;
t2203 = t2230 * t2362 - t2232 * t2357;
t2252 = -t2434 - t2435;
t2185 = t2203 * t2358 - t2252 * t2363;
t2202 = t2230 * t2357 + t2232 * t2362;
t2389 = -t2185 * t2364 + t2202 * t2359;
t2259 = -t2432 - t2435;
t2220 = -t2244 * t2357 + t2259 * t2362;
t2229 = (qJD(5) + t2310) * t2299 + t2400;
t2193 = t2220 * t2358 - t2229 * t2363;
t2219 = t2244 * t2362 + t2259 * t2357;
t2388 = -t2193 * t2364 + t2219 * t2359;
t2245 = -t2397 - t2422;
t2271 = -t2432 - t2434;
t2222 = t2245 * t2362 - t2271 * t2357;
t2231 = t2251 - t2421;
t2200 = t2222 * t2358 - t2231 * t2363;
t2221 = t2245 * t2357 + t2271 * t2362;
t2387 = -t2200 * t2364 + t2221 * t2359;
t2268 = -t2402 + t2419;
t2270 = (qJD(4) - t2339) * t2312 + t2378;
t2233 = t2268 * t2358 + t2270 * t2363;
t2280 = -t2430 - t2431;
t2386 = -t2233 * t2364 + t2280 * t2359;
t2282 = t2371 - t2420;
t2286 = -t2429 - t2431;
t2248 = t2282 * t2363 + t2286 * t2358;
t2385 = -t2248 * t2364 + t2267 * t2359;
t2283 = -t2420 - t2371;
t2292 = -t2429 - t2430;
t2254 = t2283 * t2358 + t2292 * t2363;
t2269 = (-qJD(4) - t2339) * t2312 - t2378;
t2384 = -t2254 * t2364 + t2269 * t2359;
t2257 = t2320 * t2404 + t2350 * t2427 + t2374;
t2260 = (t2364 * g(3) + t2320 * t2425) * t2354 + t2373;
t2383 = t2257 * t2359 - t2260 * t2364;
t2287 = -g(3) * t2414 - t2399;
t2382 = t2287 * t2364 + t2288 * t2359;
t2301 = t2372 - t2398;
t2302 = t2324 + t2329;
t2381 = -t2301 * t2364 + t2302 * t2359;
t2335 = -qJDD(1) * t2360 - t2365 * t2366;
t2334 = qJDD(1) * t2365 - t2360 * t2366;
t2326 = -t2347 - t2348;
t2304 = -t2354 * t2318 - t2426;
t2279 = t2301 * t2359 + t2302 * t2364;
t2262 = -t2354 * t2326 + t2355 * t2381;
t2261 = t2355 * t2326 + t2354 * t2381;
t2258 = -t2324 * pkin(2) + t2354 * t2370 + t2396;
t2255 = t2283 * t2363 - t2292 * t2358;
t2253 = -t2287 * t2359 + t2288 * t2364;
t2249 = -t2282 * t2358 + t2286 * t2363;
t2243 = -t2354 * t2304 + t2355 * t2382;
t2242 = t2355 * t2304 + t2354 * t2382;
t2236 = -t2262 * t2360 + t2279 * t2365;
t2235 = t2262 * t2365 + t2279 * t2360;
t2234 = t2268 * t2363 - t2270 * t2358;
t2227 = t2254 * t2359 + t2269 * t2364;
t2226 = t2257 * t2364 + t2260 * t2359;
t2225 = t2248 * t2359 + t2267 * t2364;
t2217 = t2233 * t2359 + t2280 * t2364;
t2214 = -t2354 * t2258 + t2355 * t2383;
t2213 = t2355 * t2258 + t2354 * t2383;
t2212 = -t2354 * t2255 + t2355 * t2384;
t2211 = t2355 * t2255 + t2354 * t2384;
t2207 = -t2354 * t2249 + t2355 * t2385;
t2206 = t2355 * t2249 + t2354 * t2385;
t2201 = t2222 * t2363 + t2231 * t2358;
t2194 = t2220 * t2363 + t2229 * t2358;
t2188 = -t2354 * t2234 + t2355 * t2386;
t2187 = t2355 * t2234 + t2354 * t2386;
t2186 = t2203 * t2363 + t2252 * t2358;
t2184 = -t2215 * t2358 + t2216 * t2363;
t2182 = t2200 * t2359 + t2221 * t2364;
t2181 = t2193 * t2359 + t2219 * t2364;
t2175 = t2183 * t2359 + t2238 * t2364;
t2172 = t2185 * t2359 + t2202 * t2364;
t2168 = -t2354 * t2201 + t2355 * t2387;
t2167 = t2355 * t2201 + t2354 * t2387;
t2165 = -t2354 * t2194 + t2355 * t2388;
t2164 = t2355 * t2194 + t2354 * t2388;
t2163 = t2179 * t2363 + t2191 * t2358;
t2161 = t2174 * t2363 + t2189 * t2358;
t2159 = -t2354 * t2186 + t2355 * t2389;
t2158 = t2355 * t2186 + t2354 * t2389;
t2157 = -t2354 * t2184 + t2355 * t2390;
t2156 = t2355 * t2184 + t2354 * t2390;
t2151 = t2162 * t2359 + t2178 * t2364;
t2150 = t2155 * t2363 + t2198 * t2358;
t2148 = t2153 * t2363 + t2218 * t2358;
t2144 = t2160 * t2359 + t2173 * t2364;
t2143 = -t2354 * t2163 + t2355 * t2391;
t2142 = t2355 * t2163 + t2354 * t2391;
t2141 = t2149 * t2359 + t2154 * t2364;
t2140 = -t2354 * t2161 + t2355 * t2392;
t2139 = t2355 * t2161 + t2354 * t2392;
t2138 = t2147 * t2359 + t2152 * t2364;
t2135 = -t2354 * t2150 + t2355 * t2393;
t2134 = t2355 * t2150 + t2354 * t2393;
t2133 = -t2354 * t2148 + t2355 * t2394;
t2132 = t2355 * t2148 + t2354 * t2394;
t2129 = t2131 * t2363 + t2180 * t2358;
t2127 = t2128 * t2359 + t2130 * t2364;
t2126 = -t2354 * t2129 + t2355 * t2395;
t2125 = t2355 * t2129 + t2354 * t2395;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2335, -t2334, 0, -t2341 * t2360 + t2342 * t2365, 0, 0, 0, 0, 0, 0, -t2444, -t2446, t2236, -t2243 * t2360 + t2253 * t2365, 0, 0, 0, 0, 0, 0, t2236, t2444, t2446, -t2214 * t2360 + t2226 * t2365, 0, 0, 0, 0, 0, 0, -t2207 * t2360 + t2225 * t2365, -t2212 * t2360 + t2227 * t2365, -t2188 * t2360 + t2217 * t2365, -t2157 * t2360 + t2175 * t2365, 0, 0, 0, 0, 0, 0, -t2165 * t2360 + t2181 * t2365, -t2168 * t2360 + t2182 * t2365, -t2159 * t2360 + t2172 * t2365, -t2135 * t2360 + t2141 * t2365, 0, 0, 0, 0, 0, 0, -t2140 * t2360 + t2144 * t2365, -t2143 * t2360 + t2151 * t2365, -t2133 * t2360 + t2138 * t2365, -t2126 * t2360 + t2127 * t2365; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2334, t2335, 0, t2341 * t2365 + t2342 * t2360, 0, 0, 0, 0, 0, 0, t2443, t2445, t2235, t2243 * t2365 + t2253 * t2360, 0, 0, 0, 0, 0, 0, t2235, -t2443, -t2445, t2214 * t2365 + t2226 * t2360, 0, 0, 0, 0, 0, 0, t2207 * t2365 + t2225 * t2360, t2212 * t2365 + t2227 * t2360, t2188 * t2365 + t2217 * t2360, t2157 * t2365 + t2175 * t2360, 0, 0, 0, 0, 0, 0, t2165 * t2365 + t2181 * t2360, t2168 * t2365 + t2182 * t2360, t2159 * t2365 + t2172 * t2360, t2135 * t2365 + t2141 * t2360, 0, 0, 0, 0, 0, 0, t2140 * t2365 + t2144 * t2360, t2143 * t2365 + t2151 * t2360, t2133 * t2365 + t2138 * t2360, t2126 * t2365 + t2127 * t2360; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2275, t2264, t2261, t2242, 0, 0, 0, 0, 0, 0, t2261, -t2275, -t2264, t2213, 0, 0, 0, 0, 0, 0, t2206, t2211, t2187, t2156, 0, 0, 0, 0, 0, 0, t2164, t2167, t2158, t2134, 0, 0, 0, 0, 0, 0, t2139, t2142, t2132, t2125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2366, -qJDD(1), 0, t2342, 0, 0, 0, 0, 0, 0, -t2295, -t2289, t2279, t2253, 0, 0, 0, 0, 0, 0, t2279, t2295, t2289, t2226, 0, 0, 0, 0, 0, 0, t2225, t2227, t2217, t2175, 0, 0, 0, 0, 0, 0, t2181, t2182, t2172, t2141, 0, 0, 0, 0, 0, 0, t2144, t2151, t2138, t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2366, 0, t2341, 0, 0, 0, 0, 0, 0, t2277, t2266, t2262, t2243, 0, 0, 0, 0, 0, 0, t2262, -t2277, -t2266, t2214, 0, 0, 0, 0, 0, 0, t2207, t2212, t2188, t2157, 0, 0, 0, 0, 0, 0, t2165, t2168, t2159, t2135, 0, 0, 0, 0, 0, 0, t2140, t2143, t2133, t2126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2275, t2264, t2261, t2242, 0, 0, 0, 0, 0, 0, t2261, -t2275, -t2264, t2213, 0, 0, 0, 0, 0, 0, t2206, t2211, t2187, t2156, 0, 0, 0, 0, 0, 0, t2164, t2167, t2158, t2134, 0, 0, 0, 0, 0, 0, t2139, t2142, t2132, t2125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2325, -t2323, t2302, t2288, 0, 0, 0, 0, 0, 0, t2302, -t2325, t2323, t2257, 0, 0, 0, 0, 0, 0, t2267, t2269, t2280, t2238, 0, 0, 0, 0, 0, 0, t2219, t2221, t2202, t2154, 0, 0, 0, 0, 0, 0, t2173, t2178, t2152, t2130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2322, t2309, -t2301, t2287, 0, 0, 0, 0, 0, 0, -t2301, -t2322, -t2309, -t2260, 0, 0, 0, 0, 0, 0, -t2248, -t2254, -t2233, -t2183, 0, 0, 0, 0, 0, 0, -t2193, -t2200, -t2185, -t2149, 0, 0, 0, 0, 0, 0, -t2160, -t2162, -t2147, -t2128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2303, t2300, t2326, t2304, 0, 0, 0, 0, 0, 0, t2326, t2303, -t2300, t2258, 0, 0, 0, 0, 0, 0, t2249, t2255, t2234, t2184, 0, 0, 0, 0, 0, 0, t2194, t2201, t2186, t2150, 0, 0, 0, 0, 0, 0, t2161, t2163, t2148, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2326, t2303, -t2300, t2258, 0, 0, 0, 0, 0, 0, t2249, t2255, t2234, t2184, 0, 0, 0, 0, 0, 0, t2194, t2201, t2186, t2150, 0, 0, 0, 0, 0, 0, t2161, t2163, t2148, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2302, t2325, -t2323, -t2257, 0, 0, 0, 0, 0, 0, -t2267, -t2269, -t2280, -t2238, 0, 0, 0, 0, 0, 0, -t2219, -t2221, -t2202, -t2154, 0, 0, 0, 0, 0, 0, -t2173, -t2178, -t2152, -t2130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2301, t2322, t2309, t2260, 0, 0, 0, 0, 0, 0, t2248, t2254, t2233, t2183, 0, 0, 0, 0, 0, 0, t2193, t2200, t2185, t2149, 0, 0, 0, 0, 0, 0, t2160, t2162, t2147, t2128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2286, t2283, t2268, t2216, 0, 0, 0, 0, 0, 0, t2220, t2222, t2203, t2155, 0, 0, 0, 0, 0, 0, t2174, t2179, t2153, t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2282, t2292, t2270, t2215, 0, 0, 0, 0, 0, 0, -t2229, -t2231, -t2252, -t2198, 0, 0, 0, 0, 0, 0, -t2189, -t2191, -t2218, -t2180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, t2269, t2280, t2238, 0, 0, 0, 0, 0, 0, t2219, t2221, t2202, t2154, 0, 0, 0, 0, 0, 0, t2173, t2178, t2152, t2130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2259, t2245, t2230, t2177, 0, 0, 0, 0, 0, 0, t2196, t2205, t2171, t2137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, t2271, t2232, t2176, 0, 0, 0, 0, 0, 0, t2195, t2204, t2170, t2136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2229, t2231, t2252, t2198, 0, 0, 0, 0, 0, 0, t2189, t2191, t2218, t2180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2228, t2224, t2190, t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, t2246, t2192, t2145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2189, t2191, t2218, t2180;];
f_new_reg  = t1;
