% Calculate vector of inverse dynamics joint torques for
% S6RRRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRR5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR5_invdynJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 04:05:30
% EndTime: 2019-03-10 04:06:12
% DurationCPUTime: 29.64s
% Computational Cost: add. (25514->810), mult. (61344->1101), div. (0->0), fcn. (51186->18), ass. (0->342)
t900 = sin(pkin(6));
t1031 = qJD(1) * t900;
t912 = cos(qJ(2));
t1002 = t912 * t1031;
t863 = -qJD(3) + t1002;
t1149 = -qJD(4) + t863;
t903 = sin(qJ(5));
t909 = cos(qJ(5));
t911 = cos(qJ(3));
t906 = sin(qJ(2));
t1003 = t906 * t1031;
t905 = sin(qJ(3));
t969 = t905 * t1003;
t901 = cos(pkin(6));
t1030 = qJD(1) * t901;
t976 = qJD(2) + t1030;
t800 = -t911 * t976 + t969;
t802 = t1003 * t911 + t905 * t976;
t904 = sin(qJ(4));
t910 = cos(qJ(4));
t945 = t800 * t904 - t910 * t802;
t946 = -t800 * t910 - t904 * t802;
t677 = t903 * t945 + t909 * t946;
t1019 = -qJD(6) + t677;
t1120 = t903 * t946 - t909 * t945;
t902 = sin(qJ(6));
t1140 = t1019 * t902;
t908 = cos(qJ(6));
t1020 = qJD(6) * t908;
t1142 = t677 * t908;
t1146 = t1020 - t1142;
t1022 = qJD(5) * t909;
t1023 = qJD(5) * t903;
t1024 = qJD(4) * t910;
t1025 = qJD(4) * t904;
t1015 = t906 * qJDD(1);
t995 = t900 * t1015;
t1018 = qJD(1) * qJD(2);
t996 = t912 * t1018;
t1127 = -t900 * t996 - t995;
t1017 = qJDD(1) * t901;
t879 = qJDD(2) + t1017;
t943 = qJD(3) * t976;
t726 = -qJD(3) * t969 + t905 * t879 + (t943 - t1127) * t911;
t1026 = qJD(3) * t911;
t1028 = qJD(2) * t912;
t999 = t905 * t1028;
t727 = (qJD(1) * (t1026 * t906 + t999) + t905 * t1015) * t900 - t911 * t879 + t905 * t943;
t652 = -t800 * t1024 - t1025 * t802 + t910 * t726 - t904 * t727;
t918 = qJD(4) * t945 - t726 * t904 - t910 * t727;
t608 = t1022 * t946 + t1023 * t945 + t909 * t652 + t903 * t918;
t1016 = qJDD(1) * t912;
t878 = t900 * t1016;
t997 = t906 * t1018;
t967 = t900 * t997;
t816 = qJDD(3) - t878 + t967;
t809 = qJDD(4) + t816;
t797 = qJDD(5) + t809;
t839 = -qJD(5) + t1149;
t1006 = -t839 * t1020 + t908 * t608 + t902 * t797;
t1021 = qJD(6) * t902;
t590 = -t1021 * t1120 + t1006;
t588 = t590 * t902;
t666 = t1120 * t908 - t839 * t902;
t991 = t608 * t902 - t908 * t797;
t591 = qJD(6) * t666 + t991;
t609 = qJD(5) * t1120 + t652 * t903 - t909 * t918;
t607 = qJDD(6) + t609;
t604 = t902 * t607;
t605 = t908 * t607;
t1085 = t1120 * t902;
t664 = t908 * t839 + t1085;
t1148 = t797 * MDP(29) + (-t1019 * t1146 - t1120 * t666 + t604) * MDP(34) + (-t1019 * t1140 + t1120 * t664 + t605) * MDP(35) + (t1146 * t666 + t588) * MDP(32) + (t1140 * t666 - t1146 * t664 + t590 * t908 - t902 * t591) * MDP(33) - t609 * MDP(28) - t677 ^ 2 * MDP(26) + (t677 * t839 + t608) * MDP(27) + (-MDP(25) * t677 + MDP(26) * t1120 - MDP(28) * t839 + MDP(36) * t1019) * t1120;
t1097 = pkin(9) + pkin(10);
t1004 = qJD(3) * t1097;
t1059 = t911 * t912;
t962 = pkin(2) * t906 - pkin(9) * t912;
t819 = t962 * t1031;
t806 = t911 * t819;
t1013 = pkin(1) * t1030;
t818 = -pkin(8) * t1003 + t1013 * t912;
t1145 = -t818 * t905 + t806 + (pkin(3) * t906 - pkin(10) * t1059) * t1031 + t911 * t1004;
t1039 = t911 * t818 + t905 * t819;
t968 = t905 * t1002;
t1143 = pkin(10) * t968 - t905 * t1004 - t1039;
t1144 = t809 * MDP(22) + t946 * MDP(18) * t945 + (t1149 * t946 + t652) * MDP(20) + (t945 ^ 2 - t946 ^ 2) * MDP(19) + (t1149 * t945 + t918) * MDP(21) + t1148;
t840 = t904 * t905 - t910 * t911;
t1043 = t1149 * t840;
t841 = t904 * t911 + t905 * t910;
t1042 = t1149 * t841;
t1114 = pkin(11) * t946;
t821 = pkin(8) * t1002 + t906 * t1013;
t781 = pkin(9) * t976 + t821;
t944 = -pkin(2) * t912 - pkin(9) * t906 - pkin(1);
t815 = t944 * t900;
t792 = qJD(1) * t815;
t721 = -t781 * t905 + t911 * t792;
t701 = -pkin(10) * t802 + t721;
t689 = -pkin(3) * t863 + t701;
t722 = t781 * t911 + t792 * t905;
t702 = -pkin(10) * t800 + t722;
t700 = t910 * t702;
t648 = t689 * t904 + t700;
t635 = t648 + t1114;
t1090 = t635 * t903;
t1130 = pkin(11) * t945;
t698 = t904 * t702;
t647 = t910 * t689 - t698;
t634 = t647 + t1130;
t629 = -pkin(4) * t1149 + t634;
t600 = t629 * t909 - t1090;
t598 = pkin(5) * t839 - t600;
t1129 = t598 * t677;
t1141 = t1145 * t910;
t864 = t1097 * t905;
t865 = t1097 * t911;
t1139 = -t864 * t1024 - t1025 * t865 + t1143 * t910 - t1145 * t904;
t639 = pkin(5) * t1120 - pkin(12) * t677;
t780 = -pkin(2) * t976 - t818;
t739 = t800 * pkin(3) + t780;
t684 = -pkin(4) * t946 + t739;
t913 = cos(qJ(1));
t1068 = t900 * t913;
t907 = sin(qJ(1));
t1061 = t907 * t912;
t1062 = t906 * t913;
t832 = t1062 * t901 + t1061;
t899 = qJ(3) + qJ(4);
t895 = qJ(5) + t899;
t886 = sin(t895);
t887 = cos(t895);
t758 = -t886 * t1068 + t832 * t887;
t1071 = t900 * t907;
t1057 = t912 * t913;
t1063 = t906 * t907;
t834 = -t1063 * t901 + t1057;
t761 = t1071 * t886 + t834 * t887;
t1072 = t900 * t906;
t799 = t1072 * t887 + t886 * t901;
t1011 = pkin(1) * t1017;
t1012 = pkin(1) * qJD(2) * t901;
t973 = qJD(1) * t1012;
t1005 = -pkin(8) * t878 - t906 * t1011 - t912 * t973;
t928 = -pkin(8) * t967 - t1005;
t743 = pkin(9) * t879 + t928;
t941 = t962 * qJD(2);
t745 = (qJD(1) * t941 + qJDD(1) * t944) * t900;
t920 = -qJD(3) * t722 - t905 * t743 + t911 * t745;
t632 = pkin(3) * t816 - pkin(10) * t726 + t920;
t1027 = qJD(3) * t905;
t940 = -t792 * t1026 + t1027 * t781 - t911 * t743 - t905 * t745;
t640 = -pkin(10) * t727 - t940;
t921 = -qJD(4) * t648 + t910 * t632 - t904 * t640;
t581 = pkin(4) * t809 - pkin(11) * t652 + t921;
t971 = -t689 * t1024 + t702 * t1025 - t904 * t632 - t910 * t640;
t585 = pkin(11) * t918 - t971;
t972 = -t629 * t1022 + t635 * t1023 - t903 * t581 - t909 * t585;
t1124 = g(1) * t761 + g(2) * t758 + g(3) * t799 - t684 * t677 + t972;
t1038 = -t904 * t864 + t910 * t865;
t1135 = pkin(4) * t1003 + t1043 * pkin(11) + qJD(4) * t1038 + t1143 * t904 + t1141;
t1134 = pkin(11) * t1042 + t1139;
t1079 = t832 * t886;
t760 = t1071 * t887 - t834 * t886;
t1125 = g(3) * (-t1072 * t886 + t887 * t901) + g(2) * (-t1068 * t887 - t1079) + g(1) * t760;
t1089 = t635 * t909;
t601 = t629 * t903 + t1089;
t922 = -qJD(5) * t601 + t909 * t581 - t903 * t585;
t574 = -pkin(5) * t797 - t922;
t572 = t574 * t902;
t599 = -pkin(12) * t839 + t601;
t618 = -pkin(5) * t677 - pkin(12) * t1120 + t684;
t583 = t599 * t908 + t618 * t902;
t1106 = t598 * t1020 + t583 * t1120 + t1125 * t902 + t572;
t954 = t599 * t902 - t618 * t908;
t1107 = t598 * t1021 + t954 * t1120;
t1104 = -t1120 * t684 - t1125 + t922;
t1131 = pkin(4) * t945;
t763 = t909 * t840 + t841 * t903;
t1051 = -qJD(5) * t763 + t1042 * t903 + t1043 * t909;
t764 = -t840 * t903 + t841 * t909;
t1050 = qJD(5) * t764 - t1042 * t909 + t1043 * t903;
t965 = -t821 + (t1027 - t968) * pkin(3);
t893 = sin(t899);
t1078 = t832 * t893;
t894 = cos(t899);
t767 = t1071 * t894 - t834 * t893;
t1123 = t739 * t945 - g(1) * t767 - g(2) * (-t1068 * t894 - t1078) - g(3) * (-t1072 * t893 + t894 * t901) + t921;
t831 = -t1057 * t901 + t1063;
t1122 = t758 * t902 - t831 * t908;
t1121 = t758 * t908 + t831 * t902;
t982 = -t910 * t864 - t865 * t904;
t747 = -pkin(11) * t841 + t982;
t748 = -pkin(11) * t840 + t1038;
t694 = t747 * t903 + t748 * t909;
t1111 = qJD(5) * t694 + t1134 * t903 + t1135 * t909;
t1069 = t900 * t912;
t827 = t1072 * t905 - t901 * t911;
t1070 = t900 * t911;
t828 = t1070 * t906 + t901 * t905;
t750 = -t827 * t904 + t828 * t910;
t1096 = pkin(1) * t906;
t1037 = pkin(8) * t1069 + t901 * t1096;
t814 = pkin(9) * t901 + t1037;
t984 = -t814 * t905 + t911 * t815;
t710 = -pkin(3) * t1069 - pkin(10) * t828 + t984;
t1040 = t911 * t814 + t905 * t815;
t714 = -pkin(10) * t827 + t1040;
t986 = t910 * t710 - t714 * t904;
t643 = -pkin(4) * t1069 - pkin(11) * t750 + t986;
t1048 = t904 * t710 + t910 * t714;
t749 = t910 * t827 + t828 * t904;
t645 = -pkin(11) * t749 + t1048;
t1110 = t903 * t643 + t909 * t645;
t1046 = -pkin(4) * t1042 + t965;
t947 = t747 * t909 - t748 * t903;
t1109 = qJD(5) * t947 + t1134 * t909 - t1135 * t903;
t766 = t893 * t1068 - t832 * t894;
t768 = t1071 * t893 + t834 * t894;
t1103 = -t739 * t946 + g(1) * t768 - g(2) * t766 - g(3) * (-t1072 * t894 - t893 * t901) + t971;
t1029 = qJD(2) * t906;
t1001 = t900 * t1029;
t773 = qJD(3) * t828 + t900 * t999;
t1000 = t900 * t1028;
t774 = -qJD(3) * t827 + t1000 * t911;
t679 = -qJD(4) * t749 - t773 * t904 + t774 * t910;
t820 = t900 * t941;
t1067 = t901 * t912;
t880 = pkin(8) * t1072;
t822 = (pkin(1) * t1067 - t880) * qJD(2);
t923 = -qJD(3) * t1040 + t911 * t820 - t822 * t905;
t663 = pkin(3) * t1001 - pkin(10) * t774 + t923;
t939 = t815 * t1026 - t1027 * t814 + t905 * t820 + t911 * t822;
t668 = -pkin(10) * t773 + t939;
t924 = -qJD(4) * t1048 + t910 * t663 - t668 * t904;
t593 = pkin(4) * t1001 - pkin(11) * t679 + t924;
t680 = qJD(4) * t750 + t910 * t773 + t774 * t904;
t938 = t710 * t1024 - t1025 * t714 + t904 * t663 + t910 * t668;
t595 = -pkin(11) * t680 + t938;
t1101 = -qJD(5) * t1110 + t593 * t909 - t595 * t903;
t914 = qJD(1) ^ 2;
t1094 = g(1) * t913;
t1091 = g(3) * t900;
t1084 = t764 * t908;
t1083 = t800 * t863;
t1082 = t802 * t863;
t1077 = t832 * t905;
t1076 = t879 * MDP(8);
t1075 = t887 * t902;
t1074 = t887 * t908;
t896 = t900 ^ 2;
t1073 = t896 * t914;
t1066 = t902 * t912;
t1065 = t903 * t904;
t1064 = t904 * t909;
t1060 = t908 * t912;
t1058 = t911 * t913;
t1054 = pkin(5) * t1003 + t1111;
t1049 = t910 * t701 - t698;
t987 = -t701 * t904 - t700;
t636 = t987 - t1114;
t637 = t1049 + t1130;
t890 = pkin(3) * t910 + pkin(4);
t1045 = -t636 * t903 - t637 * t909 + t890 * t1022 + (-t904 * t1023 + (t909 * t910 - t1065) * qJD(4)) * pkin(3);
t1044 = t636 * t909 - t637 * t903 + t890 * t1023 + (t904 * t1022 + (t903 * t910 + t1064) * qJD(4)) * pkin(3);
t823 = pkin(8) * t1000 + t906 * t1012;
t1036 = pkin(3) * t1064 + t903 * t890;
t897 = t906 ^ 2;
t1035 = -t912 ^ 2 + t897;
t1014 = 0.2e1 * t896;
t1010 = t912 * t1073;
t1009 = t900 * t1066;
t1008 = t900 * t1060;
t891 = -pkin(3) * t911 - pkin(2);
t998 = t900 * t901 * t914;
t573 = pkin(12) * t797 - t972;
t970 = pkin(8) * t1127 + t912 * t1011 - t906 * t973;
t744 = -pkin(2) * t879 - t970;
t681 = pkin(3) * t727 + t744;
t622 = -pkin(4) * t918 + t681;
t578 = pkin(5) * t609 - pkin(12) * t608 + t622;
t993 = -t902 * t573 + t908 * t578;
t989 = -t1003 * t908 - t1051 * t902;
t988 = t1003 * t902 - t1051 * t908;
t983 = -t905 * t1068 + t832 * t911;
t705 = pkin(3) * t802 - t1131;
t825 = pkin(12) + t1036;
t978 = qJD(6) * t825 + t639 + t705;
t888 = pkin(4) * t903 + pkin(12);
t977 = qJD(6) * t888 - t1131 + t639;
t975 = qJD(2) + 0.2e1 * t1030;
t974 = t879 + t1017;
t740 = pkin(3) * t773 + t823;
t602 = t634 * t903 + t1089;
t964 = pkin(4) * t1023 - t602;
t603 = t634 * t909 - t1090;
t963 = -pkin(4) * t1022 + t603;
t810 = pkin(4) * t840 + t891;
t692 = pkin(5) * t763 - pkin(12) * t764 + t810;
t961 = pkin(12) * t1003 - qJD(6) * t692 - t1109;
t960 = -pkin(5) * t1050 + pkin(12) * t1051 + qJD(6) * t694 - t1046;
t958 = t908 * t573 + t902 * t578;
t956 = -t888 * t607 - t1129;
t955 = -t825 * t607 - t1129;
t615 = -pkin(12) * t1069 + t1110;
t695 = t909 * t749 + t750 * t903;
t696 = -t749 * t903 + t750 * t909;
t813 = t880 + (-pkin(1) * t912 - pkin(2)) * t901;
t754 = pkin(3) * t827 + t813;
t703 = pkin(4) * t749 + t754;
t626 = pkin(5) * t695 - pkin(12) * t696 + t703;
t953 = t615 * t908 + t626 * t902;
t952 = -t615 * t902 + t626 * t908;
t951 = t643 * t909 - t645 * t903;
t942 = -pkin(3) * t1065 + t890 * t909;
t685 = t696 * t902 + t1008;
t656 = pkin(4) * t680 + t740;
t936 = t643 * t1022 - t1023 * t645 + t903 * t593 + t909 * t595;
t934 = t1020 * t764 - t989;
t933 = -t1021 * t764 - t988;
t833 = t1061 * t901 + t1062;
t931 = -g(1) * t833 - g(2) * t831 + g(3) * t1069;
t930 = -t574 - t1125;
t927 = -pkin(9) * t816 - t780 * t863;
t917 = pkin(9) * qJD(3) * t863 - t744 - t931;
t889 = -pkin(4) * t909 - pkin(5);
t824 = -pkin(5) - t942;
t777 = t1071 * t905 + t834 * t911;
t776 = t1070 * t907 - t834 * t905;
t724 = t761 * t908 + t833 * t902;
t723 = -t761 * t902 + t833 * t908;
t686 = t696 * t908 - t1009;
t620 = qJD(5) * t696 + t679 * t903 + t909 * t680;
t619 = -qJD(5) * t695 + t679 * t909 - t680 * t903;
t614 = pkin(5) * t1069 - t951;
t613 = -qJD(6) * t1009 - t1001 * t908 + t1020 * t696 + t619 * t902;
t612 = -qJD(6) * t685 + t1001 * t902 + t619 * t908;
t586 = pkin(5) * t620 - pkin(12) * t619 + t656;
t576 = -pkin(5) * t1001 - t1101;
t575 = pkin(12) * t1001 + t936;
t571 = -qJD(6) * t583 + t993;
t570 = -qJD(6) * t954 + t958;
t1 = [(-t1120 * t620 - t608 * t695 - t609 * t696 + t619 * t677) * MDP(26) + (g(1) * t758 - g(2) * t761 - t1101 * t839 + t703 * t609 + t684 * t620 + t622 * t695 - t656 * t677 + t951 * t797) * MDP(30) + (-g(1) * t1079 - g(2) * t760 - t1110 * t797 + t1120 * t656 + t703 * t608 + t684 * t619 + t622 * t696 + t936 * t839) * MDP(31) + (t1120 * t619 + t608 * t696) * MDP(25) + (-t1019 * t620 + t607 * t695) * MDP(36) + (t1019 * t613 - t591 * t695 - t607 * t685 - t620 * t664) * MDP(35) + (-t1019 * t612 + t590 * t695 + t607 * t686 + t620 * t666) * MDP(34) + (t652 * t750 - t679 * t945) * MDP(18) + (t773 * t863 - t816 * t827) * MDP(14) + (-t774 * t863 + t816 * t828) * MDP(13) + (-t619 * t839 + t696 * t797) * MDP(27) + (t620 * t839 - t695 * t797) * MDP(28) + (g(1) * t983 - g(2) * t777 + t813 * t727 + t744 * t827 + t780 * t773 + t823 * t800 + t984 * t816 - t923 * t863) * MDP(16) + t901 * t1076 + (-g(1) * t1077 - g(2) * t776 - t1040 * t816 + t813 * t726 + t744 * t828 + t780 * t774 + t823 * t802 + t939 * t863) * MDP(17) + ((qJDD(1) * t897 + 0.2e1 * t906 * t996) * MDP(4) + 0.2e1 * (t1015 * t912 - t1018 * t1035) * MDP(5)) * t896 + (-t652 * t749 + t679 * t946 + t680 * t945 + t750 * t918) * MDP(19) + ((t1028 * t975 + t906 * t974) * MDP(6) + (-t1029 * t975 + t912 * t974) * MDP(7) + (-t1029 * t863 - t816 * t912) * MDP(15) + (-t1029 * t1149 - t809 * t912) * MDP(22) + (-t1029 * t839 - t797 * t912) * MDP(29) + (-t1029 * t800 + t727 * t912) * MDP(14) + (t1029 * t677 + t609 * t912) * MDP(28) + (t1029 * t721 - t912 * t920) * MDP(16) + (t1029 * t647 - t912 * t921) * MDP(23) + (t1029 * t600 - t912 * t922) * MDP(30) + (t1029 * t802 - t726 * t912) * MDP(13) + (-t1029 * t945 - t652 * t912) * MDP(20) + (t1029 * t946 - t912 * t918) * MDP(21) + (t1029 * t1120 - t608 * t912) * MDP(27) + (-g(1) * t1058 - t1029 * t722 - t912 * t940) * MDP(17) + (-t1029 * t648 - t1094 * t894 - t912 * t971) * MDP(24) + (-t1029 * t601 - t1094 * t887 - t912 * t972) * MDP(31)) * t900 + (-g(1) * t1078 - g(2) * t767 - t1048 * t809 + t1149 * t938 + t754 * t652 + t739 * t679 + t681 * t750 - t740 * t945) * MDP(24) + (t1149 * t680 - t749 * t809) * MDP(21) + (-t1149 * t679 + t750 * t809) * MDP(20) + (-g(1) * t766 - g(2) * t768 - t1149 * t924 + t739 * t680 + t681 * t749 - t740 * t946 - t754 * t918 + t986 * t809) * MDP(23) + (-t726 * t827 - t727 * t828 - t773 * t802 - t774 * t800) * MDP(12) + (t726 * t828 + t774 * t802) * MDP(11) + (g(1) * t907 - g(2) * t913) * MDP(2) + (-t590 * t685 - t591 * t686 - t612 * t664 - t613 * t666) * MDP(33) + (t590 * t686 + t612 * t666) * MDP(32) + ((qJD(6) * t952 + t575 * t908 + t586 * t902) * t1019 - t953 * t607 - t570 * t695 - t583 * t620 + t576 * t666 + t614 * t590 + t574 * t686 + t598 * t612 - g(1) * t1122 - g(2) * t723) * MDP(38) + (-(-qJD(6) * t953 - t575 * t902 + t586 * t908) * t1019 + t952 * t607 + t571 * t695 - t954 * t620 + t576 * t664 + t614 * t591 + t574 * t685 + t598 * t613 + g(1) * t1121 - g(2) * t724) * MDP(37) + qJDD(1) * MDP(1) + (-t822 * t976 - t1037 * t879 - t928 * t901 - g(1) * t831 + g(2) * t833 + (-t996 - t1015) * pkin(1) * t1014) * MDP(10) + (-t823 * t976 - t880 * t879 + t970 * t901 + g(1) * t832 - g(2) * t834 + (t879 * t1067 + (-t997 + t1016) * t1014) * pkin(1)) * MDP(9) + (g(2) * t907 + t1094) * MDP(3); (-t1050 * t1120 + t1051 * t677 - t608 * t763 - t609 * t764) * MDP(26) + (-t1046 * t677 + t1050 * t684 + t1111 * t839 + t810 * t609 + t622 * t763 + t797 * t947 - t931 * t887) * MDP(30) + (t1051 * t1120 + t608 * t764) * MDP(25) + (t1046 * t1120 + t1051 * t684 + t1109 * t839 + t810 * t608 + t622 * t764 - t694 * t797 + t931 * t886) * MDP(31) + (-t1019 * t1050 + t607 * t763) * MDP(36) + (-t1019 * t933 + t1050 * t666 + t590 * t763 + t605 * t764) * MDP(34) + (t1019 * t934 - t1050 * t664 - t591 * t763 - t604 * t764) * MDP(35) + ((t692 * t908 - t694 * t902) * t607 + t571 * t763 - t947 * t591 + t764 * t572 - g(1) * (-t1074 * t833 + t834 * t902) - g(2) * (-t1074 * t831 + t832 * t902) - (t1060 * t887 + t902 * t906) * t1091 - (t902 * t961 - t908 * t960) * t1019 + t1054 * t664 - t1050 * t954 + t934 * t598) * MDP(37) + (-(t692 * t902 + t694 * t908) * t607 - t570 * t763 - t947 * t590 + t574 * t1084 - g(1) * (t1075 * t833 + t834 * t908) - g(2) * (t1075 * t831 + t832 * t908) - (-t1066 * t887 + t906 * t908) * t1091 - (t902 * t960 + t908 * t961) * t1019 + t1054 * t666 - t1050 * t583 + t933 * t598) * MDP(38) + (-t1043 * t945 + t652 * t841) * MDP(18) + (-t912 * t998 + t995) * MDP(6) + (t906 * t998 + t878) * MDP(7) - t906 * MDP(4) * t1010 + (t863 * MDP(15) - t721 * MDP(16) + t722 * MDP(17) + MDP(20) * t945 - MDP(21) * t946 + MDP(22) * t1149 - t647 * MDP(23) + t648 * MDP(24) - MDP(27) * t1120 - MDP(28) * t677 + t839 * MDP(29) - t600 * MDP(30) + t601 * MDP(31)) * t1003 + (-t1043 * t1149 + t809 * t841) * MDP(20) + (-t1038 * t809 + t1043 * t739 + t1139 * t1149 + t891 * t652 + t681 * t841 + t931 * t893 - t965 * t945) * MDP(24) + (t982 * t809 - t891 * t918 + t681 * t840 + (t865 * t1024 + (-qJD(4) * t864 + t1143) * t904 + t1141) * t1149 - t1042 * t739 - t965 * t946 - t931 * t894) * MDP(23) + (-t1042 * t1149 - t809 * t840) * MDP(21) + (-pkin(2) * t727 - t821 * t800 + t806 * t863 + (-t818 * t863 + t927) * t905 + t917 * t911) * MDP(16) + (-pkin(2) * t726 - t1039 * t863 - t821 * t802 - t905 * t917 + t911 * t927) * MDP(17) + (t1050 * t839 - t763 * t797) * MDP(28) + (-t1051 * t839 + t764 * t797) * MDP(27) + t1076 + (-t1042 * t945 + t1043 * t946 - t652 * t840 + t841 * t918) * MDP(19) + (t863 * t1027 + t816 * t911 + (-t863 * t905 * t912 + t800 * t906) * t1031) * MDP(14) + (-t863 * t1026 + t905 * t816 + (t1059 * t863 - t802 * t906) * t1031) * MDP(13) + t1035 * MDP(5) * t1073 + (pkin(1) * t1010 + t818 * t976 + g(1) * t834 + g(2) * t832 + (pkin(8) * t1018 + g(3)) * t1072 + t1005) * MDP(10) + (-t1082 * t911 + t726 * t905) * MDP(11) + ((t726 + t1083) * t911 + (-t727 + t1082) * t905) * MDP(12) + (t1084 * t590 + t666 * t933) * MDP(32) + (t989 * t666 + t988 * t664 + (-t588 - t591 * t908 + (t664 * t902 - t666 * t908) * qJD(6)) * t764) * MDP(33) + (t1073 * t1096 + t821 * t976 - t931 + t970) * MDP(9); (t1044 * t839 + t677 * t705 + t797 * t942 + t1104) * MDP(30) + (-t1049 * t1149 + (t1024 * t1149 + t802 * t945 - t809 * t904) * pkin(3) + t1103) * MDP(24) + (t824 * t591 + t1044 * t664 + (t1019 * t1045 + t955) * t902 + (t1019 * t978 + t930) * t908 + t1107) * MDP(37) + (t824 * t590 + t955 * t908 + t1044 * t666 - (-t1045 * t908 + t902 * t978) * t1019 + t1106) * MDP(38) + (g(1) * t777 + g(2) * t983 + g(3) * t828 - t721 * t863 + t780 * t800 + t940) * MDP(17) + t816 * MDP(15) + (-t800 ^ 2 + t802 ^ 2) * MDP(12) + (t987 * t1149 + (t1025 * t1149 + t802 * t946 + t809 * t910) * pkin(3) + t1123) * MDP(23) + (-t1082 - t727) * MDP(14) + t802 * t800 * MDP(11) + (-t1036 * t797 + t1045 * t839 - t1120 * t705 + t1124) * MDP(31) + (-t722 * t863 - t780 * t802 - g(1) * t776 - g(2) * (-t1058 * t900 - t1077) + g(3) * t827 + t920) * MDP(16) + (t726 - t1083) * MDP(13) + t1144; (-t1149 * t648 + t1123) * MDP(23) + (-t1149 * t647 + t1103) * MDP(24) + (-t602 * t839 + (t1023 * t839 - t677 * t945 + t797 * t909) * pkin(4) + t1104) * MDP(30) + (-t603 * t839 + (t1022 * t839 + t1120 * t945 - t797 * t903) * pkin(4) + t1124) * MDP(31) + (t889 * t591 + t964 * t664 + (-t1019 * t963 + t956) * t902 + (t1019 * t977 + t930) * t908 + t1107) * MDP(37) + (t889 * t590 + t956 * t908 + t964 * t666 - (t902 * t977 + t908 * t963) * t1019 + t1106) * MDP(38) + t1144; (-t601 * t839 + t1104) * MDP(30) + (-t600 * t839 + t1124) * MDP(31) + (-pkin(5) * t591 - t601 * t664 + (-pkin(12) * t607 - t1019 * t600 - t1129) * t902 + (-(-pkin(12) * qJD(6) - t639) * t1019 + t930) * t908 + t1107) * MDP(37) + (-pkin(5) * t590 - (t600 * t908 + t639 * t902) * t1019 - t601 * t666 - t598 * t1142 + (-t1019 * t1021 - t605) * pkin(12) + t1106) * MDP(38) + t1148; t666 * t664 * MDP(32) + (-t664 ^ 2 + t666 ^ 2) * MDP(33) + (-t1019 * t664 + t1006) * MDP(34) + (-t1019 * t666 - t991) * MDP(35) + t607 * MDP(36) + (-t583 * t1019 - t598 * t666 - g(1) * t723 + g(2) * t1122 - g(3) * (-t799 * t902 - t1008) + t993) * MDP(37) + (t954 * t1019 + t598 * t664 + g(1) * t724 + g(2) * t1121 - g(3) * (-t799 * t908 + t1009) - t958) * MDP(38) + (-MDP(34) * t1085 - MDP(35) * t666 - MDP(37) * t583 + MDP(38) * t954) * qJD(6);];
tau  = t1;
