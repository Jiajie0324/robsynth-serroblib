% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauc_reg [6x38]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRR5_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR5_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR5_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR5_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 04:04:47
% EndTime: 2019-03-10 04:05:18
% DurationCPUTime: 12.03s
% Computational Cost: add. (21575->579), mult. (55057->826), div. (0->0), fcn. (45601->12), ass. (0->284)
t286 = sin(qJ(2));
t290 = cos(qJ(3));
t291 = cos(qJ(2));
t280 = sin(pkin(6));
t378 = qJD(1) * t280;
t358 = t286 * t378;
t281 = cos(pkin(6));
t377 = qJD(1) * t281;
t363 = pkin(1) * t377;
t221 = -pkin(8) * t358 + t291 * t363;
t308 = (pkin(2) * t286 - pkin(9) * t291) * t280;
t222 = qJD(1) * t308;
t285 = sin(qJ(3));
t341 = -t285 * t221 + t290 * t222;
t419 = pkin(9) + pkin(10);
t360 = qJD(3) * t419;
t392 = t290 * t291;
t469 = (pkin(3) * t286 - pkin(10) * t392) * t378 + t341 + t290 * t360;
t376 = qJD(1) * t291;
t357 = t280 * t376;
t334 = t285 * t357;
t382 = t290 * t221 + t285 * t222;
t468 = -pkin(10) * t334 + t285 * t360 + t382;
t284 = sin(qJ(4));
t289 = cos(qJ(4));
t239 = t284 * t285 - t289 * t290;
t430 = qJD(3) + qJD(4);
t181 = t430 * t239;
t192 = t239 * t357;
t467 = t181 - t192;
t240 = t284 * t290 + t285 * t289;
t182 = t430 * t240;
t191 = t240 * t357;
t384 = t182 - t191;
t282 = sin(qJ(6));
t283 = sin(qJ(5));
t288 = cos(qJ(5));
t337 = qJD(2) + t377;
t206 = t285 * t337 + t290 * t358;
t449 = -t285 * t358 + t290 * t337;
t313 = -t289 * t206 - t284 * t449;
t314 = -t284 * t206 + t289 * t449;
t107 = t283 * t313 + t288 * t314;
t365 = -qJD(6) + t107;
t287 = cos(qJ(6));
t364 = qJD(1) * qJD(2);
t352 = t280 * t364;
t333 = t291 * t352;
t173 = qJD(3) * t449 + t290 * t333;
t174 = qJD(3) * t206 + t285 * t333;
t294 = qJD(4) * t313 - t284 * t173 - t289 * t174;
t441 = t283 * t314 - t288 * t313;
t370 = qJD(4) * t289;
t371 = qJD(4) * t284;
t91 = t289 * t173 - t284 * t174 - t206 * t371 + t370 * t449;
t45 = qJD(5) * t441 + t283 * t91 - t288 * t294;
t43 = t287 * t45;
t258 = -qJD(3) + t357;
t250 = -qJD(4) + t258;
t238 = -qJD(5) + t250;
t94 = t287 * t238 + t282 * t441;
t458 = -t365 ^ 2 * t282 + t94 * t441 + t43;
t261 = t286 * t352;
t366 = qJD(6) * t287;
t367 = qJD(6) * t282;
t368 = qJD(5) * t288;
t369 = qJD(5) * t283;
t44 = t283 * t294 + t288 * t91 + t313 * t369 + t314 * t368;
t21 = -t238 * t366 + t282 * t261 + t287 * t44 - t367 * t441;
t19 = t21 * t282;
t466 = t107 * t287;
t96 = -t238 * t282 + t287 * t441;
t457 = t19 + (t366 - t466) * t96;
t41 = t282 * t45;
t415 = -t365 * t366 + t41;
t456 = t365 * t466 - t441 * t96 + t415;
t437 = pkin(11) * t314;
t265 = t286 * t363;
t224 = pkin(8) * t357 + t265;
t190 = pkin(9) * t337 + t224;
t219 = (-pkin(2) * t291 - pkin(9) * t286 - pkin(1)) * t280;
t200 = qJD(1) * t219;
t148 = -t190 * t285 + t290 * t200;
t130 = -pkin(10) * t206 + t148;
t118 = -pkin(3) * t258 + t130;
t149 = t190 * t290 + t200 * t285;
t131 = pkin(10) * t449 + t149;
t129 = t289 * t131;
t73 = t118 * t284 + t129;
t61 = t73 + t437;
t412 = t283 * t61;
t454 = pkin(11) * t313;
t127 = t284 * t131;
t72 = t289 * t118 - t127;
t60 = t72 + t454;
t58 = -pkin(4) * t250 + t60;
t31 = t288 * t58 - t412;
t29 = pkin(5) * t238 - t31;
t453 = t107 * t29;
t451 = t441 * t107;
t464 = t469 * t289;
t259 = t419 * t285;
t260 = t419 * t290;
t463 = -t259 * t370 - t260 * t371 - t469 * t284 - t468 * t289;
t448 = -t107 ^ 2 + t441 ^ 2;
t64 = pkin(5) * t441 - pkin(12) * t107;
t446 = t107 * t238 + t44;
t189 = -pkin(2) * t337 - t221;
t161 = -pkin(3) * t449 + t189;
t113 = -pkin(4) * t314 + t161;
t223 = qJD(2) * t308;
t213 = qJD(1) * t223;
t397 = t280 * t286;
t268 = pkin(8) * t397;
t395 = t281 * t291;
t225 = (pkin(1) * t395 - t268) * qJD(2);
t214 = qJD(1) * t225;
t296 = -qJD(3) * t149 + t290 * t213 - t285 * t214;
t79 = pkin(3) * t261 - pkin(10) * t173 + t296;
t372 = qJD(3) * t290;
t373 = qJD(3) * t285;
t304 = -t190 * t373 + t200 * t372 + t285 * t213 + t290 * t214;
t83 = -pkin(10) * t174 + t304;
t299 = -qJD(4) * t73 - t284 * t83 + t289 * t79;
t15 = pkin(4) * t261 - pkin(11) * t91 + t299;
t339 = -t118 * t370 + t131 * t371 - t284 * t79 - t289 * t83;
t17 = pkin(11) * t294 - t339;
t349 = -t283 * t15 - t288 * t17 - t58 * t368 + t61 * t369;
t445 = -t113 * t107 + t349;
t22 = qJD(6) * t96 - t287 * t261 + t282 * t44;
t320 = t282 * t96 + t287 * t94;
t444 = t107 * t320 + t21 * t287 - t282 * t22 - t94 * t366 - t367 * t96;
t460 = -t384 * pkin(11) + t463;
t381 = -t284 * t259 + t289 * t260;
t459 = -pkin(4) * t358 + t467 * pkin(11) - qJD(4) * t381 + t468 * t284 - t464;
t434 = t365 * t441;
t411 = t288 * t61;
t32 = t283 * t58 + t411;
t30 = -pkin(12) * t238 + t32;
t48 = -pkin(5) * t107 - pkin(12) * t441 + t113;
t11 = t282 * t48 + t287 * t30;
t300 = -qJD(5) * t32 + t288 * t15 - t283 * t17;
t5 = -pkin(5) * t261 - t300;
t427 = t11 * t441 + t5 * t282 + t29 * t366;
t421 = -t238 * t441 - t45;
t423 = -t113 * t441 + t300;
t323 = t282 * t30 - t287 * t48;
t428 = -t5 * t287 + t29 * t367 + t323 * t441;
t455 = pkin(4) * t313;
t178 = t288 * t239 + t240 * t283;
t111 = -qJD(5) * t178 - t288 * t181 - t283 * t182;
t146 = -t191 * t283 - t192 * t288;
t391 = t111 - t146;
t179 = -t239 * t283 + t240 * t288;
t390 = qJD(5) * t179 - t283 * t467 + t384 * t288;
t330 = -t224 + (-t334 + t373) * pkin(3);
t447 = t313 ^ 2 - t314 ^ 2;
t443 = t161 * t313 + t299;
t442 = t250 * t313 + t294;
t340 = -t289 * t259 - t260 * t284;
t164 = -pkin(11) * t240 + t340;
t165 = -pkin(11) * t239 + t381;
t123 = t164 * t283 + t165 * t288;
t436 = qJD(5) * t123 + t283 * t460 - t288 * t459;
t315 = t164 * t288 - t165 * t283;
t435 = qJD(5) * t315 + t283 * t459 + t288 * t460;
t433 = t313 * t314;
t231 = t281 * t285 + t290 * t397;
t396 = t280 * t291;
t218 = pkin(8) * t396 + (pkin(1) * t286 + pkin(9)) * t281;
t342 = -t218 * t285 + t290 * t219;
t139 = -pkin(3) * t396 - pkin(10) * t231 + t342;
t230 = -t281 * t290 + t285 * t397;
t383 = t290 * t218 + t285 * t219;
t143 = -pkin(10) * t230 + t383;
t388 = t284 * t139 + t289 * t143;
t386 = pkin(4) * t384 + t330;
t426 = t250 * t314 + t91;
t275 = -pkin(3) * t290 - pkin(2);
t216 = pkin(4) * t239 + t275;
t121 = pkin(5) * t178 - pkin(12) * t179 + t216;
t424 = t29 * qJD(6) * t179 + t365 * (-pkin(5) * t390 + pkin(12) * t391 + qJD(6) * t123 - t386) + t121 * t45;
t422 = -t161 * t314 + t339;
t169 = t289 * t230 + t231 * t284;
t355 = qJD(2) * t396;
t184 = qJD(3) * t231 + t285 * t355;
t185 = -qJD(3) * t230 + t290 * t355;
t109 = -qJD(4) * t169 - t284 * t184 + t289 * t185;
t295 = -qJD(3) * t383 + t290 * t223 - t285 * t225;
t375 = qJD(2) * t286;
t356 = t280 * t375;
t93 = pkin(3) * t356 - pkin(10) * t185 + t295;
t303 = -t218 * t373 + t219 * t372 + t285 * t223 + t290 * t225;
t98 = -pkin(10) * t184 + t303;
t298 = -qJD(4) * t388 - t284 * t98 + t289 * t93;
t24 = pkin(4) * t356 - pkin(11) * t109 + t298;
t170 = -t230 * t284 + t231 * t289;
t110 = qJD(4) * t170 + t289 * t184 + t284 * t185;
t305 = t139 * t370 - t143 * t371 + t284 * t93 + t289 * t98;
t26 = -pkin(11) * t110 + t305;
t344 = t289 * t139 - t143 * t284;
t68 = -pkin(4) * t396 - pkin(11) * t170 + t344;
t70 = -pkin(11) * t169 + t388;
t318 = t283 * t68 + t288 * t70;
t420 = -qJD(5) * t318 + t288 * t24 - t283 * t26;
t4 = pkin(12) * t261 - t349;
t215 = pkin(8) * t333 + qJD(2) * t265;
t147 = pkin(3) * t174 + t215;
t67 = -pkin(4) * t294 + t147;
t9 = pkin(5) * t45 - pkin(12) * t44 + t67;
t1 = -qJD(6) * t323 + t282 * t9 + t287 * t4;
t292 = qJD(1) ^ 2;
t417 = pkin(1) * t291;
t414 = pkin(5) * t358 + t436;
t274 = pkin(3) * t289 + pkin(4);
t394 = t283 * t284;
t345 = -t130 * t284 - t129;
t62 = t345 - t437;
t389 = t289 * t130 - t127;
t63 = t389 + t454;
t410 = -t283 * t62 - t288 * t63 + t274 * t368 + (-t284 * t369 + (t288 * t289 - t394) * qJD(4)) * pkin(3);
t393 = t284 * t288;
t409 = -t283 * t63 + t288 * t62 + t274 * t369 + (t284 * t368 + (t283 * t289 + t393) * qJD(4)) * pkin(3);
t403 = t179 * t287;
t402 = t449 * t258;
t401 = t206 * t258;
t400 = t258 * t285;
t399 = t258 * t290;
t277 = t280 ^ 2;
t398 = t277 * t292;
t226 = t281 * pkin(1) * t375 + pkin(8) * t355;
t380 = pkin(3) * t393 + t283 * t274;
t379 = t286 ^ 2 - t291 ^ 2;
t374 = qJD(2) * t290;
t362 = t286 * t398;
t361 = t282 * t396;
t359 = t277 * t376;
t353 = t277 * t364;
t134 = pkin(3) * t206 - t455;
t228 = pkin(12) + t380;
t347 = qJD(6) * t228 + t134 + t64;
t272 = pkin(4) * t283 + pkin(12);
t346 = qJD(6) * t272 - t455 + t64;
t338 = 0.2e1 * t353;
t336 = qJD(2) + 0.2e1 * t377;
t33 = t283 * t60 + t411;
t332 = pkin(4) * t369 - t33;
t34 = t288 * t60 - t412;
t331 = -pkin(4) * t368 + t34;
t162 = pkin(3) * t184 + t226;
t328 = -0.2e1 * pkin(1) * t353;
t326 = -t272 * t45 - t453;
t325 = -t228 * t45 - t453;
t40 = -pkin(12) * t396 + t318;
t124 = t288 * t169 + t170 * t283;
t125 = -t169 * t283 + t170 * t288;
t217 = t268 + (-pkin(2) - t417) * t281;
t172 = t230 * pkin(3) + t217;
t132 = t169 * pkin(4) + t172;
t55 = pkin(5) * t124 - pkin(12) * t125 + t132;
t322 = t282 * t55 + t287 * t40;
t321 = -t282 * t40 + t287 * t55;
t319 = -t283 * t70 + t288 * t68;
t310 = -pkin(3) * t394 + t274 * t288;
t114 = t125 * t282 + t287 * t396;
t307 = t283 * t24 + t288 * t26 + t68 * t368 - t369 * t70;
t78 = pkin(4) * t110 + t162;
t136 = t146 * t287 + t282 * t358;
t301 = t111 * t287 - t179 * t367 - t136;
t2 = -qJD(6) * t11 - t282 * t4 + t287 * t9;
t293 = t29 * t111 - t123 * t45 + t5 * t179 - (pkin(12) * t358 - qJD(6) * t121 - t435) * t365;
t273 = -pkin(4) * t288 - pkin(5);
t227 = -pkin(5) - t310;
t135 = t146 * t282 - t287 * t358;
t115 = t125 * t287 - t361;
t50 = qJD(5) * t125 + t283 * t109 + t288 * t110;
t49 = -qJD(5) * t124 + t288 * t109 - t283 * t110;
t39 = pkin(5) * t396 - t319;
t38 = -qJD(6) * t361 + t125 * t366 + t282 * t49 - t287 * t356;
t37 = -qJD(6) * t114 + t282 * t356 + t287 * t49;
t12 = pkin(5) * t50 - pkin(12) * t49 + t78;
t7 = -pkin(5) * t356 - t420;
t6 = pkin(12) * t356 + t307;
t3 = [0, 0, 0, t286 * t291 * t338, -t379 * t338, t336 * t355, -t336 * t356, 0, -t215 * t281 - t226 * t337 + t286 * t328, -t214 * t281 - t225 * t337 + t291 * t328, t173 * t231 + t185 * t206, -t173 * t230 - t174 * t231 - t184 * t206 + t185 * t449, -t185 * t258 + (-t173 * t291 + (qJD(1) * t231 + t206) * t375) * t280, t184 * t258 + (t174 * t291 + (-qJD(1) * t230 + t449) * t375) * t280 (-t258 * t280 - t359) * t375, -t295 * t258 - t226 * t449 + t217 * t174 + t215 * t230 + t189 * t184 + (-t296 * t291 + (qJD(1) * t342 + t148) * t375) * t280, t303 * t258 + t226 * t206 + t217 * t173 + t215 * t231 + t189 * t185 + (t304 * t291 + (-qJD(1) * t383 - t149) * t375) * t280, -t109 * t313 + t170 * t91, t109 * t314 + t110 * t313 - t169 * t91 + t170 * t294, -t109 * t250 + (-t291 * t91 + (qJD(1) * t170 - t313) * t375) * t280, t110 * t250 + (-t291 * t294 + (-qJD(1) * t169 + t314) * t375) * t280 (-t250 * t280 - t359) * t375, -t298 * t250 - t162 * t314 - t172 * t294 + t147 * t169 + t161 * t110 + (-t299 * t291 + (qJD(1) * t344 + t72) * t375) * t280, t305 * t250 - t162 * t313 + t172 * t91 + t147 * t170 + t161 * t109 + (-t339 * t291 + (-qJD(1) * t388 - t73) * t375) * t280, t125 * t44 + t441 * t49, t107 * t49 - t124 * t44 - t125 * t45 - t441 * t50, -t49 * t238 + (-t291 * t44 + (qJD(1) * t125 + t441) * t375) * t280, t50 * t238 + (t291 * t45 + (-qJD(1) * t124 + t107) * t375) * t280 (-t238 * t280 - t359) * t375, -t420 * t238 - t78 * t107 + t132 * t45 + t67 * t124 + t113 * t50 + (-t300 * t291 + (qJD(1) * t319 + t31) * t375) * t280, t307 * t238 + t78 * t441 + t132 * t44 + t67 * t125 + t113 * t49 + (-t349 * t291 + (-qJD(1) * t318 - t32) * t375) * t280, t115 * t21 + t37 * t96, -t114 * t21 - t115 * t22 - t37 * t94 - t38 * t96, t115 * t45 + t124 * t21 - t365 * t37 + t50 * t96, -t114 * t45 - t124 * t22 + t365 * t38 - t50 * t94, t124 * t45 - t365 * t50 -(-qJD(6) * t322 + t287 * t12 - t282 * t6) * t365 + t321 * t45 + t2 * t124 - t323 * t50 + t7 * t94 + t39 * t22 + t5 * t114 + t29 * t38 (qJD(6) * t321 + t282 * t12 + t287 * t6) * t365 - t322 * t45 - t1 * t124 - t11 * t50 + t7 * t96 + t39 * t21 + t5 * t115 + t29 * t37; 0, 0, 0, -t291 * t362, t379 * t398, -t280 * t292 * t395, t337 * t358 - t261, 0, pkin(1) * t362 + t224 * t337 - t215, pkin(8) * t261 + t221 * t337 + (-t281 * t364 + t398) * t417, t173 * t285 - t206 * t399 (t173 - t402) * t290 + (-t174 + t401) * t285, -t258 * t372 + (t258 * t392 + (qJD(2) * t285 - t206) * t286) * t378, t258 * t373 + (-t291 * t400 + (-t449 + t374) * t286) * t378, t258 * t358, -pkin(2) * t174 - t215 * t290 + t341 * t258 + t224 * t449 + (pkin(9) * t399 + t189 * t285) * qJD(3) + (-t148 * t286 + (-pkin(9) * t375 - t189 * t291) * t285) * t378, -pkin(2) * t173 + t215 * t285 - t382 * t258 - t224 * t206 + (-pkin(9) * t400 + t189 * t290) * qJD(3) + (-t189 * t392 + (-pkin(9) * t374 + t149) * t286) * t378, t91 * t240 + t313 * t467, -t239 * t91 + t240 * t294 + t313 * t384 - t314 * t467, t467 * t250 + (qJD(2) * t240 + t313) * t358, t384 * t250 + (-qJD(2) * t239 - t314) * t358, t250 * t358, t147 * t239 - t275 * t294 + (t260 * t370 + (-qJD(4) * t259 - t468) * t284 + t464) * t250 + t384 * t161 - t330 * t314 + (qJD(2) * t340 - t72) * t358, t147 * t240 + t275 * t91 + t463 * t250 - t467 * t161 - t330 * t313 + (-qJD(2) * t381 + t73) * t358, t44 * t179 + t391 * t441, t107 * t391 - t178 * t44 - t179 * t45 - t390 * t441, -t391 * t238 + (qJD(2) * t179 - t441) * t358, t390 * t238 + (-qJD(2) * t178 - t107) * t358, t238 * t358, t67 * t178 + t216 * t45 + t436 * t238 + t390 * t113 - t386 * t107 + (qJD(2) * t315 - t31) * t358, t67 * t179 + t216 * t44 + t435 * t238 + t391 * t113 + t386 * t441 + (-qJD(2) * t123 + t32) * t358, t21 * t403 + t301 * t96, t135 * t96 + t136 * t94 - t320 * t111 + (-t19 - t22 * t287 + (t282 * t94 - t287 * t96) * qJD(6)) * t179, t178 * t21 - t301 * t365 + t390 * t96 + t403 * t45, -t179 * t41 - t178 * t22 - t390 * t94 - (-t111 * t282 - t179 * t366 + t135) * t365, t45 * t178 - t365 * t390, -t29 * t135 + t2 * t178 - t22 * t315 + t293 * t282 + t287 * t424 - t323 * t390 + t414 * t94, -t1 * t178 - t390 * t11 - t29 * t136 - t21 * t315 - t282 * t424 + t293 * t287 + t414 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206 * t449, t206 ^ 2 - t449 ^ 2, t173 + t402, -t174 - t401, t261, -t149 * t258 - t189 * t206 + t296, -t148 * t258 - t189 * t449 - t304, t433, t447, t426, t442, t261, t345 * t250 + (t206 * t314 + t250 * t371 + t261 * t289) * pkin(3) + t443, -t389 * t250 + (t206 * t313 + t250 * t370 - t261 * t284) * pkin(3) + t422, -t451, t448, t446, t421, t261, t107 * t134 + t238 * t409 + t261 * t310 + t423, -t134 * t441 + t238 * t410 - t261 * t380 + t445, t457, t444, t456, t458, t434, t227 * t22 + t409 * t94 + t325 * t282 - (-t282 * t410 - t287 * t347) * t365 + t428, t227 * t21 + t409 * t96 + t325 * t287 - (t282 * t347 - t287 * t410) * t365 + t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t433, t447, t426, t442, t261, -t250 * t73 + t443, -t250 * t72 + t422, -t451, t448, t446, t421, t261, -t238 * t33 + (-t107 * t313 + t238 * t369 + t261 * t288) * pkin(4) + t423, -t238 * t34 + (t238 * t368 - t261 * t283 + t313 * t441) * pkin(4) + t445, t457, t444, t456, t458, t434, t273 * t22 + t332 * t94 + t326 * t282 - (t282 * t331 - t287 * t346) * t365 + t428, t273 * t21 + t332 * t96 + t326 * t287 - (t282 * t346 + t287 * t331) * t365 + t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t451, t448, t446, t421, t261, -t238 * t32 + t423, -t238 * t31 + t445, t457, t444, t456, t458, t434, -pkin(5) * t22 + (-t282 * t31 + t287 * t64) * t365 - t32 * t94 - t282 * t453 - t415 * pkin(12) + t428, -pkin(5) * t21 - (t282 * t64 + t287 * t31) * t365 - t32 * t96 - t29 * t466 + (-t365 * t367 - t43) * pkin(12) + t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96 * t94, -t94 ^ 2 + t96 ^ 2, -t365 * t94 + t21, -t365 * t96 - t22, t45, -t11 * t365 - t29 * t96 + t2, t29 * t94 + t323 * t365 - t1;];
tauc_reg  = t3;
