% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:28:18
% EndTime: 2019-05-06 09:28:48
% DurationCPUTime: 26.03s
% Computational Cost: add. (58026->693), mult. (128220->924), div. (0->0), fcn. (80354->8), ass. (0->499)
t895 = sin(qJ(2));
t960 = qJD(1) * t895;
t874 = qJD(5) + t960;
t1014 = t874 ^ 2;
t891 = sin(pkin(9));
t892 = cos(pkin(9));
t898 = cos(qJ(2));
t959 = qJD(1) * t898;
t836 = qJD(2) * t891 + t892 * t959;
t838 = qJD(2) * t892 - t891 * t959;
t894 = sin(qJ(5));
t897 = cos(qJ(5));
t774 = t897 * t836 + t838 * t894;
t1015 = t774 ^ 2;
t747 = t1015 - t1014;
t776 = -t836 * t894 + t838 * t897;
t709 = t776 * t774;
t955 = qJD(1) * qJD(2);
t878 = t898 * t955;
t953 = qJDD(1) * t895;
t851 = t878 + t953;
t839 = qJDD(5) + t851;
t1030 = t709 + t839;
t994 = t1030 * t897;
t637 = t747 * t894 + t994;
t995 = t1030 * t894;
t641 = t747 * t897 - t995;
t576 = t637 * t892 + t641 * t891;
t758 = t874 * t776;
t933 = t895 * t955;
t951 = qJDD(1) * t898;
t852 = -t933 + t951;
t811 = -qJDD(2) * t891 - t892 * t852;
t812 = t892 * qJDD(2) - t891 * t852;
t930 = -t897 * t811 + t894 * t812;
t911 = qJD(5) * t776 + t930;
t646 = -t758 + t911;
t539 = t576 * t895 - t646 * t898;
t579 = t637 * t891 - t641 * t892;
t896 = sin(qJ(1));
t899 = cos(qJ(1));
t1122 = t539 * t896 + t579 * t899;
t1121 = t539 * t899 - t579 * t896;
t917 = t894 * t811 + t897 * t812;
t684 = -qJD(5) * t774 + t917;
t991 = t774 * t874;
t1033 = t684 - t991;
t645 = t758 + t911;
t588 = t1033 * t897 - t645 * t894;
t997 = t1033 * t894;
t590 = t645 * t897 + t997;
t518 = -t588 * t892 + t590 * t891;
t773 = t776 ^ 2;
t706 = t773 - t1015;
t510 = t518 * t895 - t706 * t898;
t522 = t588 * t891 + t590 * t892;
t1120 = t510 * t896 - t522 * t899;
t1119 = t510 * t899 + t522 * t896;
t725 = -t773 - t1014;
t618 = t725 * t894 + t994;
t623 = t725 * t897 - t995;
t552 = t618 * t892 + t891 * t623;
t1118 = pkin(1) * t552;
t550 = t618 * t891 - t623 * t892;
t1115 = t550 * t895;
t1114 = t550 * t898;
t1113 = t552 * t896;
t1112 = t552 * t899;
t1008 = pkin(2) + qJ(4);
t1109 = t1008 * t550;
t1108 = t1008 * t552;
t1107 = t576 * t898 + t646 * t895;
t1106 = t518 * t898 + t706 * t895;
t1105 = pkin(3) * t550 - pkin(4) * t623 - qJ(3) * t552;
t888 = t895 ^ 2;
t901 = qJD(1) ^ 2;
t881 = t888 * t901;
t900 = qJD(2) ^ 2;
t869 = -t881 - t900;
t943 = t895 * t898 * t901;
t861 = -qJDD(2) + t943;
t966 = t898 * t861;
t796 = -t869 * t895 + t966;
t850 = 0.2e1 * t878 + t953;
t739 = t796 * t896 - t850 * t899;
t1103 = pkin(6) * t739;
t743 = t796 * t899 + t850 * t896;
t1102 = pkin(6) * t743;
t1101 = pkin(8) * t618;
t1100 = pkin(8) * t623;
t749 = -t773 + t1014;
t1031 = -t709 + t839;
t993 = t1031 * t894;
t1051 = t897 * t749 + t993;
t685 = t897 * t1031;
t1052 = -t749 * t894 + t685;
t1058 = t1051 * t891 - t1052 * t892;
t1032 = t684 + t991;
t1059 = -t1051 * t892 - t1052 * t891;
t1083 = t1032 * t898 - t1059 * t895;
t1099 = t1058 * t899 + t1083 * t896;
t1098 = -t1058 * t896 + t1083 * t899;
t889 = t898 ^ 2;
t973 = t889 * t901;
t870 = t900 + t973;
t860 = qJDD(2) + t943;
t981 = t860 * t895;
t798 = t870 * t898 + t981;
t853 = -0.2e1 * t933 + t951;
t740 = t798 * t896 - t853 * t899;
t1097 = pkin(6) * t740;
t744 = t798 * t899 + t853 * t896;
t1096 = pkin(6) * t744;
t1026 = -t1014 - t1015;
t1035 = t1026 * t897 - t993;
t1036 = t1026 * t894 + t685;
t1061 = t1035 * t892 - t1036 * t891;
t1095 = pkin(1) * t1061;
t1092 = qJ(6) * t1033;
t1060 = t1035 * t891 + t1036 * t892;
t1089 = t1060 * t895;
t1088 = t1060 * t898;
t1087 = t1061 * t896;
t1086 = t1061 * t899;
t1085 = t1008 * t1060;
t1084 = t1008 * t1061;
t1082 = t1032 * t895 + t1059 * t898;
t1081 = pkin(3) * t1060 + pkin(4) * t1036 - qJ(3) * t1061;
t967 = t898 * t860;
t793 = -t870 * t895 + t967;
t1080 = pkin(1) * t793;
t667 = t773 + t1015;
t1079 = pkin(3) * t667;
t1078 = pkin(4) * t667;
t1077 = pkin(7) * t793;
t1076 = pkin(7) * t796;
t1074 = pkin(8) * t1035;
t1073 = pkin(8) * t1036;
t1072 = qJ(3) * t667;
t1071 = t667 * t895;
t1070 = t667 * t898;
t868 = -t881 + t900;
t795 = -t868 * t895 + t967;
t950 = qJDD(1) * t899;
t1067 = t795 * t896 - t895 * t950;
t952 = qJDD(1) * t896;
t1066 = t795 * t899 + t895 * t952;
t909 = (-t774 * t894 - t776 * t897) * t874;
t975 = t874 * t894;
t738 = t776 * t975;
t974 = t874 * t897;
t946 = t774 * t974;
t923 = t738 - t946;
t1018 = t891 * t909 - t892 * t923;
t1019 = -t891 * t923 - t892 * t909;
t1037 = -t1019 * t895 + t898 * t839;
t1065 = t1018 * t899 + t1037 * t896;
t1064 = -t1018 * t896 + t1037 * t899;
t913 = t894 * t911 + t946;
t924 = t774 * t975 - t897 * t911;
t1017 = t891 * t924 - t892 * t913;
t1016 = -t891 * t913 - t892 * t924;
t947 = t898 * t709;
t1040 = -t1016 * t895 - t947;
t1063 = t1017 * t899 + t1040 * t896;
t1062 = -t1017 * t896 + t1040 * t899;
t1057 = 2 * qJD(3);
t1056 = -2 * qJD(4);
t980 = t861 * t895;
t790 = t869 * t898 + t980;
t1055 = pkin(1) * t790;
t1054 = pkin(7) * t790;
t1053 = pkin(7) * t798;
t784 = t838 * t836;
t1029 = -t784 + t851;
t1046 = t1029 * t891;
t1045 = t1029 * t892;
t871 = -t900 + t973;
t799 = t871 * t898 + t980;
t1042 = t799 * t896 - t898 * t950;
t1041 = t799 * t899 + t896 * t951;
t948 = t895 * t709;
t1039 = t1016 * t898 - t948;
t1038 = t1019 * t898 + t895 * t839;
t919 = t851 + t878;
t1034 = qJ(3) * t919;
t1028 = -pkin(2) * t933 + t1057 * t960;
t942 = t836 * t960;
t763 = t942 + t812;
t862 = pkin(3) * t960 - qJD(2) * qJ(4);
t864 = t896 * g(1) - t899 * g(2);
t915 = -qJDD(1) * pkin(1) - t864;
t904 = -t1028 + t915 - t1034;
t670 = -t862 * t960 + (-pkin(3) * t889 - pkin(7)) * t901 - t1008 * t852 + t904;
t865 = g(1) * t899 + g(2) * t896;
t827 = -pkin(1) * t901 + qJDD(1) * pkin(7) - t865;
t803 = t898 * g(3) + t895 * t827;
t1007 = qJ(3) * t895;
t1012 = pkin(2) * t898;
t921 = -t1007 - t1012;
t848 = t921 * qJD(1);
t912 = -qJDD(2) * pkin(2) - t900 * qJ(3) + t848 * t960 + qJDD(3) + t803;
t696 = -t860 * qJ(4) + (t851 - t878) * pkin(3) + t912;
t922 = t1056 * t838 - t891 * t670 + t892 * t696;
t604 = t1056 * t836 + t892 * t670 + t891 * t696;
t1027 = -t871 * t895 + t966;
t1025 = pkin(5) * t911 - t1092;
t813 = pkin(4) * t960 - pkin(8) * t838;
t834 = t836 ^ 2;
t1024 = -t811 * pkin(4) - t834 * pkin(8) + t838 * t813;
t1023 = t852 * pkin(3) - qJ(4) * t973 + qJDD(4);
t633 = t684 * t894 + t776 * t974;
t634 = t684 * t897 - t738;
t572 = t633 * t891 - t634 * t892;
t569 = -t633 * t892 - t634 * t891;
t914 = -t569 * t895 + t947;
t1022 = t899 * t572 + t896 * t914;
t884 = t895 * g(3);
t1021 = (qJD(1) * t848 + t827) * t898 - t900 * pkin(2) - t884;
t1020 = -t572 * t896 + t899 * t914;
t835 = t838 ^ 2;
t1013 = 2 * qJD(6);
t1011 = pkin(5) * t897;
t961 = t888 + t889;
t855 = t961 * qJDD(1);
t858 = t881 + t973;
t782 = t855 * t896 + t858 * t899;
t1010 = pkin(6) * t782;
t1009 = t901 * pkin(7);
t1006 = qJ(6) * t897;
t564 = pkin(4) * t1029 - pkin(8) * t763 + t922;
t585 = -pkin(4) * t834 + pkin(8) * t811 - t813 * t960 + t604;
t514 = -t897 * t564 + t585 * t894;
t515 = t894 * t564 + t897 * t585;
t478 = -t514 * t897 + t515 * t894;
t1005 = t478 * t892;
t949 = qJDD(2) * qJ(3);
t905 = t1021 + t949;
t688 = (t1057 + t862) * qJD(2) + t905 + t1023;
t620 = t688 + t1024;
t1003 = t620 * t894;
t1002 = t620 * t897;
t996 = t1032 * t894;
t826 = -t915 + t1009;
t990 = t826 * t895;
t989 = t826 * t898;
t987 = t850 * t895;
t983 = t853 * t898;
t972 = t891 * t478;
t971 = t891 * t688;
t765 = t784 + t851;
t970 = t891 * t765;
t969 = t892 * t688;
t968 = t892 * t765;
t964 = -t835 - t881;
t963 = pkin(1) * t858 + pkin(7) * t855;
t956 = qJD(5) + t874;
t954 = qJD(3) * qJD(2);
t945 = t895 * t784;
t944 = t898 * t784;
t941 = t838 * t960;
t940 = t891 * t960;
t939 = t892 * t960;
t932 = -qJ(6) * t894 - pkin(4);
t479 = t514 * t894 + t897 * t515;
t804 = t898 * t827 - t884;
t722 = t803 * t895 + t898 * t804;
t787 = -t864 * t896 - t899 * t865;
t928 = t896 * t943;
t927 = t899 * t943;
t857 = -t896 * t901 + t950;
t926 = -pkin(6) * t857 - g(3) * t896;
t925 = t898 * t569 + t948;
t920 = pkin(2) * t895 - qJ(3) * t898;
t705 = pkin(5) * t774 - qJ(6) * t776;
t918 = t839 * qJ(6) + t874 * t1013 - t774 * t705 + t515;
t542 = t891 * t604 + t892 * t922;
t543 = t892 * t604 - t891 * t922;
t721 = t803 * t898 - t804 * t895;
t916 = t868 * t898 + t981;
t786 = t864 * t899 - t865 * t896;
t908 = t811 + t941;
t907 = -t1021 - 0.2e1 * t954;
t906 = -t839 * pkin(5) - qJ(6) * t1014 + t705 * t776 + qJDD(6) + t514;
t723 = t905 + 0.2e1 * t954;
t903 = t852 * pkin(2) + t1028 + t826;
t902 = -qJD(2) * t862 + t776 * t1013 - t1023 - t1024 - t1025 + t907 - t949;
t859 = -t881 + t973;
t856 = t899 * t901 + t952;
t846 = t920 * qJDD(1);
t841 = t961 * t955;
t830 = t898 * t851;
t829 = t895 * t851;
t818 = -pkin(6) * t856 + g(3) * t899;
t815 = -t835 + t881;
t814 = t834 - t881;
t810 = qJDD(2) * t896 + t841 * t899;
t809 = -t888 * t955 + t830;
t808 = -qJDD(2) * t899 + t841 * t896;
t807 = -t852 * t895 - t889 * t955;
t791 = t878 * t895 + t829;
t789 = (t852 - t933) * t898;
t783 = t855 * t899 - t858 * t896;
t781 = t835 - t834;
t780 = pkin(6) * t783;
t779 = t983 - t987;
t778 = t850 * t898 + t853 * t895;
t777 = -t881 - t834;
t770 = t809 * t899 - t928;
t769 = t807 * t899 + t928;
t768 = t809 * t896 + t927;
t767 = t807 * t896 - t927;
t762 = -t942 + t812;
t759 = -t811 + t941;
t755 = -t834 - t835;
t752 = (t836 * t892 - t838 * t891) * t960;
t751 = (t836 * t891 + t838 * t892) * t960;
t737 = -t989 - t1054;
t736 = -t990 - t1077;
t734 = -t812 * t892 + t838 * t940;
t733 = -t812 * t891 - t838 * t939;
t732 = t811 * t891 - t836 * t939;
t731 = -t811 * t892 - t836 * t940;
t730 = t779 * t899 - t859 * t896;
t729 = t779 * t896 + t859 * t899;
t727 = t803 - t1080;
t726 = t804 - t1055;
t719 = qJ(3) * t858 + t912;
t718 = -t751 * t895 + t830;
t717 = pkin(2) * t858 + t723;
t716 = t903 + t1034;
t715 = -t814 * t892 + t970;
t714 = -t891 * t964 - t968;
t713 = t815 * t891 - t1045;
t712 = -t814 * t891 - t968;
t711 = t892 * t964 - t970;
t710 = -t815 * t892 - t1046;
t704 = -t1009 + (-t852 - t853) * pkin(2) + t904;
t703 = (t850 + t919) * qJ(3) + t903;
t702 = t722 * t899 - t826 * t896;
t701 = t722 * t896 + t826 * t899;
t698 = t892 * t777 - t1046;
t697 = t891 * t777 + t1045;
t695 = -t733 * t895 + t944;
t694 = -t731 * t895 - t944;
t682 = t891 * t763 + t892 * t908;
t681 = t759 * t892 + t762 * t891;
t680 = -t763 * t892 + t891 * t908;
t679 = t759 * t891 - t762 * t892;
t671 = pkin(2) * t860 - qJ(3) * t870 + t1080 - t912;
t669 = t1055 + pkin(2) * t869 + (-qJDD(2) + t861) * qJ(3) + t907;
t665 = t723 * t898 + t895 * t912;
t664 = t723 * t895 - t898 * t912;
t662 = -t710 * t895 + t763 * t898;
t661 = t711 * t895 + t762 * t898;
t660 = -t712 * t895 + t898 * t908;
t659 = -t711 * t898 + t762 * t895;
t658 = -pkin(2) * t987 + t703 * t898 + t1054;
t657 = -qJ(3) * t983 - t704 * t895 + t1077;
t656 = -t679 * t895 + t781 * t898;
t655 = t697 * t895 + t759 * t898;
t654 = -t697 * t898 + t759 * t895;
t651 = -t774 * t956 + t917;
t648 = (-qJD(5) + t874) * t776 - t930;
t647 = t776 * t956 + t930;
t644 = -t717 * t895 + t719 * t898;
t643 = t897 * t1032;
t628 = t680 * t895 + t755 * t898;
t627 = -t680 * t898 + t755 * t895;
t613 = t665 * t899 - t716 * t896;
t612 = t665 * t896 + t716 * t899;
t611 = pkin(3) * t680 - qJ(3) * t682;
t606 = t661 * t899 + t714 * t896;
t605 = t661 * t896 - t714 * t899;
t599 = -pkin(1) * t664 + pkin(2) * t912 - qJ(3) * t723;
t598 = t655 * t899 + t698 * t896;
t597 = t655 * t896 - t698 * t899;
t596 = t628 * t899 + t682 * t896;
t595 = t628 * t896 - t682 * t899;
t594 = -pkin(7) * t664 - t716 * t920;
t593 = t648 * t897 + t996;
t591 = -t646 * t897 + t996;
t589 = t648 * t894 - t643;
t587 = -t646 * t894 - t643;
t584 = pkin(3) * t762 - t1008 * t714 - t971;
t557 = pkin(3) * t759 - t1008 * t698 + t969;
t556 = t1002 - t1100;
t555 = t1003 - t1073;
t554 = pkin(3) * t711 - qJ(3) * t714 - t604;
t545 = pkin(3) * t697 - qJ(3) * t698 + t922;
t544 = -pkin(1) * t659 - qJ(3) * t762 + t1008 * t711 - t969;
t537 = -pkin(1) * t654 - qJ(3) * t759 + t1008 * t697 - t971;
t536 = t651 * t898 - t1115;
t535 = t647 * t898 + t1089;
t534 = t651 * t895 + t1114;
t533 = t647 * t895 - t1088;
t532 = -pkin(4) * t651 + t1003 - t1101;
t531 = t620 + (pkin(5) * t874 - (2 * qJD(6))) * t776 + t1025;
t530 = -pkin(4) * t645 - t1002 + t1074;
t529 = -t1033 * t898 + t1115;
t528 = t645 * t898 + t1089;
t527 = -t1033 * t895 - t1114;
t526 = t645 * t895 - t1088;
t525 = t542 * t895 + t688 * t898;
t524 = -t542 * t898 + t688 * t895;
t523 = -t891 * t589 + t593 * t892;
t521 = -t891 * t587 + t591 * t892;
t519 = t589 * t892 + t593 * t891;
t517 = t587 * t892 + t591 * t891;
t512 = (-t647 - t758) * pkin(5) + t902;
t511 = -pkin(5) * t758 + t1092 + t902;
t508 = pkin(3) * t755 - t1008 * t682 - t543;
t507 = t517 * t895 - t1070;
t506 = t519 * t895 - t1070;
t505 = -t517 * t898 - t1071;
t504 = -t519 * t898 - t1071;
t502 = -pkin(5) * t1014 + t918;
t501 = t536 * t899 - t1113;
t500 = t535 * t899 + t1087;
t499 = t536 * t896 + t1112;
t498 = t535 * t896 - t1086;
t497 = -pkin(7) * t659 + t554 * t898 - t584 * t895;
t496 = -pkin(1) * t627 - qJ(3) * t755 + t1008 * t680 + t542;
t495 = -pkin(7) * t654 + t545 * t898 - t557 * t895;
t494 = qJ(6) * t667 + t906;
t493 = (t667 - t1014) * pkin(5) + t918;
t492 = pkin(3) * t542 - qJ(3) * t543;
t491 = t529 * t899 + t1113;
t490 = t528 * t899 + t1087;
t489 = t529 * t896 - t1112;
t488 = t528 * t896 - t1086;
t487 = -t1006 * t647 - t512 * t894 - t1073;
t486 = -pkin(5) * t997 + t511 * t897 + t1100;
t485 = pkin(3) * t688 - t1008 * t543;
t484 = t525 * t899 + t543 * t896;
t483 = t525 * t896 - t543 * t899;
t482 = -pkin(7) * t627 - t508 * t895 + t611 * t898;
t481 = t897 * t512 + t647 * t932 + t1074;
t480 = t1101 + t894 * t511 + (pkin(4) + t1011) * t1033;
t476 = t507 * t899 + t521 * t896;
t475 = t506 * t899 + t523 * t896;
t474 = t507 * t896 - t521 * t899;
t473 = t506 * t896 - t523 * t899;
t472 = -t1105 - t515;
t471 = -pkin(4) * t620 + pkin(8) * t479;
t470 = pkin(3) * t519 + pkin(4) * t589 - qJ(3) * t523;
t469 = -pkin(8) * t589 - t478;
t468 = t502 * t897 + t894 * t906;
t467 = t502 * t894 - t897 * t906;
t465 = -pkin(1) * t524 - qJ(3) * t688 + t1008 * t542;
t464 = t1081 - t514;
t463 = pkin(3) * t651 - t892 * t532 - t891 * t556 + t1108;
t462 = pkin(8) * t593 + t1078 + t479;
t461 = pkin(5) * t1031 + qJ(6) * t1026 + t1081 - t906;
t460 = pkin(3) * t517 + pkin(4) * t587 - pkin(5) * t1032 - qJ(3) * t521 - qJ(6) * t646;
t459 = pkin(3) * t645 - t892 * t530 - t891 * t555 - t1084;
t458 = qJ(6) * t1030 + (-t725 - t1014) * pkin(5) + t918 + t1105;
t457 = -pkin(8) * t587 - t493 * t894 + t494 * t897;
t456 = -pkin(1) * t534 - qJ(3) * t651 + t891 * t532 - t892 * t556 - t1109;
t455 = pkin(8) * t591 + t493 * t897 + t494 * t894 + t1078;
t454 = -pkin(1) * t526 - qJ(3) * t645 + t891 * t530 - t892 * t555 + t1085;
t453 = -pkin(7) * t524 - t485 * t895 + t492 * t898;
t452 = t479 * t892 - t972;
t451 = t479 * t891 + t1005;
t450 = -pkin(8) * t467 + (pkin(5) * t894 - t1006) * t531;
t449 = t451 * t895 + t620 * t898;
t448 = -t451 * t898 + t620 * t895;
t447 = pkin(3) * t647 - t892 * t481 - t891 * t487 - t1084;
t446 = -pkin(3) * t1033 - t892 * t480 - t891 * t486 - t1108;
t445 = pkin(8) * t468 + (t932 - t1011) * t531;
t444 = -t891 * t467 + t468 * t892;
t443 = t467 * t892 + t468 * t891;
t442 = -pkin(1) * t533 - qJ(3) * t647 + t891 * t481 - t892 * t487 + t1085;
t441 = -pkin(7) * t534 - t463 * t895 + t472 * t898;
t440 = -pkin(1) * t527 + qJ(3) * t1033 + t891 * t480 - t892 * t486 + t1109;
t439 = t443 * t895 + t531 * t898;
t438 = -t443 * t898 + t531 * t895;
t437 = -pkin(7) * t526 - t459 * t895 + t464 * t898;
t436 = -t1008 * t523 - t892 * t462 - t891 * t469 - t1079;
t435 = -pkin(7) * t533 - t447 * t895 + t461 * t898;
t434 = t449 * t899 + t452 * t896;
t433 = t449 * t896 - t452 * t899;
t432 = -pkin(1) * t504 + t1008 * t519 + t891 * t462 - t892 * t469 + t1072;
t431 = -pkin(7) * t527 - t446 * t895 + t458 * t898;
t430 = -t1008 * t521 - t892 * t455 - t891 * t457 - t1079;
t429 = pkin(3) * t451 + pkin(4) * t478 - qJ(3) * t452;
t428 = -pkin(1) * t505 + t1008 * t517 + t891 * t455 - t892 * t457 + t1072;
t427 = t439 * t899 + t444 * t896;
t426 = t439 * t896 - t444 * t899;
t425 = -pkin(7) * t504 - t436 * t895 + t470 * t898;
t424 = pkin(3) * t620 + pkin(8) * t972 - t1008 * t452 - t892 * t471;
t423 = -pkin(7) * t505 - t430 * t895 + t460 * t898;
t422 = pkin(3) * t443 + pkin(4) * t467 - pkin(5) * t906 - qJ(3) * t444 + qJ(6) * t502;
t421 = -pkin(1) * t448 + pkin(8) * t1005 - qJ(3) * t620 + t1008 * t451 + t891 * t471;
t420 = pkin(3) * t531 - t1008 * t444 - t892 * t445 - t891 * t450;
t419 = -pkin(1) * t438 - qJ(3) * t531 + t1008 * t443 + t891 * t445 - t892 * t450;
t418 = -pkin(7) * t448 - t424 * t895 + t429 * t898;
t417 = -pkin(7) * t438 - t420 * t895 + t422 * t898;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t856, -t857, 0, t787, 0, 0, 0, 0, 0, 0, -t744, t743, t783, t702, 0, 0, 0, 0, 0, 0, t783, t744, -t743, t613, 0, 0, 0, 0, 0, 0, t598, t606, t596, t484, 0, 0, 0, 0, 0, 0, t490, t501, t475, t434, 0, 0, 0, 0, 0, 0, t500, t476, t491, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t857, -t856, 0, t786, 0, 0, 0, 0, 0, 0, -t740, t739, t782, t701, 0, 0, 0, 0, 0, 0, t782, t740, -t739, t612, 0, 0, 0, 0, 0, 0, t597, t605, t595, t483, 0, 0, 0, 0, 0, 0, t488, t499, t473, t433, 0, 0, 0, 0, 0, 0, t498, t474, t489, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t793, t790, 0, -t721, 0, 0, 0, 0, 0, 0, 0, -t793, -t790, t664, 0, 0, 0, 0, 0, 0, t654, t659, t627, t524, 0, 0, 0, 0, 0, 0, t526, t534, t504, t448, 0, 0, 0, 0, 0, 0, t533, t505, t527, t438; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t857, 0, -t856, 0, t926, -t818, -t786, -pkin(6) * t786, t770, t730, t1066, t769, t1041, t810, -t727 * t896 + t736 * t899 + t1097, -t726 * t896 + t737 * t899 - t1103, t721 * t899 - t1010, -pkin(6) * t701 - (pkin(1) * t896 - pkin(7) * t899) * t721, t810, -t1066, -t1041, t770, t730, t769, t644 * t899 - t846 * t896 - t1010, t657 * t899 - t671 * t896 - t1097, t658 * t899 - t669 * t896 + t1103, -pkin(6) * t612 + t594 * t899 - t599 * t896, t695 * t899 - t734 * t896, t656 * t899 - t681 * t896, t662 * t899 - t713 * t896, t694 * t899 - t732 * t896, t660 * t899 - t715 * t896, t718 * t899 - t752 * t896, -pkin(6) * t597 + t495 * t899 - t537 * t896, -pkin(6) * t605 + t497 * t899 - t544 * t896, -pkin(6) * t595 + t482 * t899 - t496 * t896, -pkin(6) * t483 + t453 * t899 - t465 * t896, t1020, -t1119, t1098, t1062, t1121, t1064, -pkin(6) * t488 + t437 * t899 - t454 * t896, -pkin(6) * t499 + t441 * t899 - t456 * t896, -pkin(6) * t473 + t425 * t899 - t432 * t896, -pkin(6) * t433 + t418 * t899 - t421 * t896, t1020, t1098, t1119, t1064, -t1121, t1062, -pkin(6) * t498 + t435 * t899 - t442 * t896, -pkin(6) * t474 + t423 * t899 - t428 * t896, -pkin(6) * t489 + t431 * t899 - t440 * t896, -pkin(6) * t426 + t417 * t899 - t419 * t896; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t856, 0, t857, 0, t818, t926, t787, pkin(6) * t787, t768, t729, t1067, t767, t1042, t808, t727 * t899 + t736 * t896 - t1096, t726 * t899 + t737 * t896 + t1102, t721 * t896 + t780, pkin(6) * t702 - (-pkin(1) * t899 - pkin(7) * t896) * t721, t808, -t1067, -t1042, t768, t729, t767, t644 * t896 + t846 * t899 + t780, t657 * t896 + t671 * t899 + t1096, t658 * t896 + t669 * t899 - t1102, pkin(6) * t613 + t594 * t896 + t599 * t899, t695 * t896 + t734 * t899, t656 * t896 + t681 * t899, t662 * t896 + t713 * t899, t694 * t896 + t732 * t899, t660 * t896 + t715 * t899, t718 * t896 + t752 * t899, pkin(6) * t598 + t495 * t896 + t537 * t899, pkin(6) * t606 + t497 * t896 + t544 * t899, pkin(6) * t596 + t482 * t896 + t496 * t899, pkin(6) * t484 + t453 * t896 + t465 * t899, t1022, -t1120, t1099, t1063, t1122, t1065, pkin(6) * t490 + t437 * t896 + t454 * t899, pkin(6) * t501 + t441 * t896 + t456 * t899, pkin(6) * t475 + t425 * t896 + t432 * t899, pkin(6) * t434 + t418 * t896 + t421 * t899, t1022, t1099, t1120, t1065, -t1122, t1063, pkin(6) * t500 + t435 * t896 + t442 * t899, pkin(6) * t476 + t423 * t896 + t428 * t899, pkin(6) * t491 + t431 * t896 + t440 * t899, pkin(6) * t427 + t417 * t896 + t419 * t899; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t864, t865, 0, 0, t791, t778, t916, t789, -t1027, 0, pkin(1) * t853 - t1053 + t989, -pkin(1) * t850 + t1076 - t990, t722 + t963, pkin(1) * t826 + pkin(7) * t722, 0, -t916, t1027, t791, t778, t789, t717 * t898 + t719 * t895 + t963, t1053 + t898 * t704 + (-pkin(1) - t1007) * t853, -t1076 + t895 * t703 + (pkin(1) + t1012) * t850, pkin(7) * t665 + (pkin(1) - t921) * t716, t733 * t898 + t945, t679 * t898 + t781 * t895, t710 * t898 + t763 * t895, t731 * t898 - t945, t712 * t898 + t895 * t908, t751 * t898 + t829, -pkin(1) * t698 + pkin(7) * t655 + t545 * t895 + t557 * t898, -pkin(1) * t714 + pkin(7) * t661 + t554 * t895 + t584 * t898, -pkin(1) * t682 + pkin(7) * t628 + t508 * t898 + t611 * t895, -pkin(1) * t543 + pkin(7) * t525 + t485 * t898 + t492 * t895, t925, t1106, t1082, t1039, -t1107, t1038, pkin(7) * t528 + t459 * t898 + t464 * t895 - t1095, pkin(7) * t536 + t463 * t898 + t472 * t895 + t1118, -pkin(1) * t523 + pkin(7) * t506 + t436 * t898 + t470 * t895, -pkin(1) * t452 + pkin(7) * t449 + t424 * t898 + t429 * t895, t925, t1082, -t1106, t1038, t1107, t1039, pkin(7) * t535 + t447 * t898 + t461 * t895 - t1095, -pkin(1) * t521 + pkin(7) * t507 + t430 * t898 + t460 * t895, pkin(7) * t529 + t446 * t898 + t458 * t895 - t1118, -pkin(1) * t444 + pkin(7) * t439 + t420 * t898 + t422 * t895;];
tauB_reg  = t1;
