% Calculate minimal parameter regressor of coriolis matrix for
% S6RPRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPRPPR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPPR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:39:37
% EndTime: 2019-03-09 02:39:48
% DurationCPUTime: 4.53s
% Computational Cost: add. (5324->314), mult. (10682->442), div. (0->0), fcn. (12169->10), ass. (0->268)
t254 = sin(pkin(10));
t258 = sin(qJ(3));
t260 = cos(qJ(3));
t396 = cos(pkin(10));
t230 = t254 * t258 - t260 * t396;
t253 = sin(pkin(11));
t259 = cos(qJ(6));
t373 = t259 * t253;
t255 = cos(pkin(11));
t257 = sin(qJ(6));
t374 = t257 * t255;
t346 = t230 * (-t374 / 0.2e1 - t373 / 0.2e1);
t298 = t396 * t258;
t376 = t254 * t260;
t227 = t298 / 0.2e1 + t376 / 0.2e1;
t234 = t298 + t376;
t251 = t253 ^ 2;
t252 = t255 ^ 2;
t300 = t252 / 0.2e1 + t251 / 0.2e1;
t422 = t300 * t234;
t127 = t422 + t227;
t429 = t127 * qJD(5);
t128 = t422 - t227;
t428 = t128 * qJD(5);
t247 = sin(pkin(9)) * pkin(1) + pkin(7);
t349 = qJ(4) + t247;
t226 = t349 * t258;
t228 = t349 * t260;
t151 = t226 * t396 + t228 * t254;
t427 = t151 * t253;
t426 = t151 * t255;
t216 = t396 * t228;
t377 = t254 * t226;
t421 = t216 - t377;
t425 = t253 * t421;
t390 = t421 * t255;
t236 = t373 + t374;
t95 = t236 * t234;
t350 = t95 * qJD(1);
t375 = t257 * t253;
t307 = t375 / 0.2e1;
t372 = t259 * t255;
t423 = t307 - t372 / 0.2e1;
t344 = qJD(1) * t230;
t319 = t95 * t344;
t419 = t234 ^ 2;
t165 = t230 ^ 2 + t419;
t238 = t251 + t252;
t335 = t95 * qJD(6);
t378 = t236 * t230;
t308 = t378 / 0.2e1;
t286 = t308 - t346;
t358 = t286 * qJD(3);
t78 = t286 * qJD(6);
t418 = t421 / 0.2e1;
t417 = t151 / 0.2e1;
t416 = -t230 / 0.2e1;
t232 = -t372 + t375;
t415 = -t232 / 0.2e1;
t414 = t236 / 0.2e1;
t248 = -pkin(3) * t396 - pkin(4);
t237 = -pkin(5) * t255 + t248;
t413 = t237 / 0.2e1;
t412 = t258 * pkin(3);
t242 = pkin(3) * t254 + qJ(5);
t411 = pkin(8) + t242;
t410 = qJD(3) * pkin(3);
t379 = t234 * t255;
t249 = -cos(pkin(9)) * pkin(1) - pkin(2);
t276 = -pkin(3) * t260 + t249;
t138 = pkin(4) * t230 - qJ(5) * t234 + t276;
t65 = t138 * t255 - t425;
t264 = pkin(5) * t230 - pkin(8) * t379 + t65;
t156 = t253 * t234;
t66 = t138 * t253 + t390;
t49 = -pkin(8) * t156 + t66;
t21 = t257 * t49 - t259 * t264;
t158 = pkin(4) * t234 + qJ(5) * t230 + t412;
t73 = t158 * t255 + t427;
t38 = pkin(8) * t230 * t255 + pkin(5) * t234 + t73;
t405 = t259 * t38;
t157 = t230 * t253;
t74 = t158 * t253 - t426;
t56 = pkin(8) * t157 + t74;
t406 = t257 * t56;
t96 = -pkin(5) * t157 + t421;
t97 = pkin(5) * t156 + t151;
t1 = (t405 - t406) * t230 - t21 * t234 + t96 * t95 - t97 * t378;
t409 = t1 * qJD(1);
t144 = t232 * t230;
t202 = t234 * t375;
t145 = t234 * t372 - t202;
t22 = t257 * t264 + t259 * t49;
t404 = t259 * t56;
t407 = t257 * t38;
t2 = -(t404 + t407) * t230 - t22 * t234 + t96 * t145 + t97 * t144;
t408 = t2 * qJD(1);
t291 = -t253 * t66 - t255 * t65;
t398 = t74 * t253;
t399 = t73 * t255;
t6 = (t398 + t399) * t234 + t291 * t230;
t403 = t6 * qJD(1);
t402 = t65 * t253;
t401 = t66 * t255;
t400 = t73 * t253;
t397 = t74 * t255;
t11 = t21 * t230 - t95 * t97;
t395 = t11 * qJD(1);
t12 = t145 * t97 - t22 * t230;
t394 = t12 * qJD(1);
t393 = t144 * t230;
t392 = t145 * t234;
t15 = (t65 + t425) * t234 + (t73 - t427) * t230;
t391 = t15 * qJD(1);
t388 = t151 * t234;
t380 = t234 * t248;
t384 = t230 * t242;
t261 = -t300 * t384 + t380 / 0.2e1;
t272 = -t399 / 0.2e1 - t398 / 0.2e1;
t20 = t261 + t272;
t387 = t20 * qJD(1);
t386 = t230 * t378;
t385 = t230 * t234;
t383 = t230 * t254;
t382 = t234 * t95;
t381 = t234 * t232;
t27 = (-t151 / 0.2e1 + t417) * t234 + (-t421 / 0.2e1 + t418) * t230;
t371 = t27 * qJD(1);
t29 = t291 * t234;
t370 = t29 * qJD(1);
t33 = -t144 * t95 + t145 * t378;
t369 = t33 * qJD(1);
t43 = -t382 + t386;
t368 = t43 * qJD(1);
t44 = t382 + t386;
t367 = t44 * qJD(1);
t45 = t392 + t393;
t366 = t45 * qJD(1);
t46 = t392 - t393;
t365 = t46 * qJD(1);
t50 = -t230 * t421 + t388;
t364 = t50 * qJD(1);
t60 = (0.1e1 / 0.2e1 - t300) * t385;
t362 = t60 * qJD(1);
t82 = t308 + t346;
t360 = t82 * qJD(1);
t359 = t82 * qJD(3);
t75 = t286 * qJD(1);
t309 = t144 / 0.2e1;
t347 = t423 * t230;
t85 = t309 + t347;
t357 = t85 * qJD(1);
t356 = t85 * qJD(3);
t310 = -t144 / 0.2e1;
t86 = t310 + t347;
t355 = t86 * qJD(1);
t301 = t372 / 0.2e1;
t348 = t230 * t301 + t375 * t416;
t87 = t309 + t348;
t354 = t87 * qJD(3);
t88 = t310 + t348;
t353 = t88 * qJD(1);
t90 = t238 * t419;
t352 = t90 * qJD(1);
t351 = t381 * qJD(1);
t345 = qJD(1) * t145;
t343 = qJD(1) * t234;
t342 = qJD(1) * t260;
t341 = qJD(3) * t253;
t340 = qJD(3) * t255;
t339 = qJD(5) * t230;
t338 = t127 * qJD(1);
t129 = t165 * t253;
t337 = t129 * qJD(1);
t299 = t396 * t234;
t267 = -t383 / 0.2e1 - t299 / 0.2e1;
t133 = (-t258 / 0.2e1 + t267) * pkin(3);
t336 = t133 * qJD(1);
t135 = t145 * qJD(6);
t334 = t156 * qJD(1);
t159 = t238 * t230;
t333 = t159 * qJD(1);
t332 = t159 * qJD(3);
t160 = t165 * t255;
t331 = t160 * qJD(1);
t330 = t165 * qJD(1);
t329 = t227 * qJD(1);
t328 = t232 * qJD(3);
t225 = t232 * qJD(6);
t327 = t236 * qJD(3);
t326 = t236 * qJD(6);
t325 = t238 * qJD(3);
t241 = -t258 ^ 2 + t260 ^ 2;
t324 = t241 * qJD(1);
t323 = t258 * qJD(3);
t322 = t260 * qJD(3);
t321 = t234 * t339;
t320 = t381 * t344;
t318 = t145 * t344;
t317 = t230 * t343;
t316 = t234 * t328;
t315 = t249 * t258 * qJD(1);
t314 = t249 * t342;
t313 = t255 * t343;
t312 = t234 * t340;
t311 = t258 * t342;
t297 = qJD(3) * t237 + qJD(5);
t296 = t230 * t313;
t293 = t216 / 0.2e1 - t377 / 0.2e1;
t273 = t402 / 0.2e1 - t401 / 0.2e1;
t4 = (t397 / 0.2e1 - t400 / 0.2e1 + t417) * t234 + (t418 + t273) * t230;
t5 = t151 * t421 + t65 * t73 + t66 * t74;
t292 = t5 * qJD(1) + t4 * qJD(2);
t290 = t397 - t400;
t61 = (0.1e1 - t238) * t385;
t289 = t4 * qJD(1) + t61 * qJD(2);
t221 = t411 * t253;
t222 = t411 * t255;
t149 = -t221 * t257 + t222 * t259;
t262 = t145 * t413 + t149 * t416 + t414 * t97;
t274 = -t406 / 0.2e1 + t405 / 0.2e1;
t7 = -t262 + t274;
t83 = -t378 / 0.2e1 - t346;
t288 = t7 * qJD(1) + t83 * qJD(2);
t148 = t221 * t259 + t222 * t257;
t263 = t148 * t230 / 0.2e1 - t95 * t413 + t97 * t415;
t275 = -t407 / 0.2e1 - t404 / 0.2e1;
t8 = -t263 + t275;
t287 = t8 * qJD(1) + t87 * qJD(2);
t16 = (-t66 + t390) * t234 + (-t74 - t426) * t230;
t285 = t16 * qJD(1);
t18 = t388 + (-t401 + t402) * t230;
t284 = qJD(1) * t18 + qJD(2) * t60;
t30 = t276 * t412;
t283 = t30 * qJD(1) + t27 * qJD(2);
t32 = -t145 * t236 + t232 * t95;
t35 = -t145 ^ 2 + t95 ^ 2;
t281 = qJD(1) * t35 + qJD(3) * t32;
t280 = -t230 * t248 - t234 * t242;
t134 = t232 ^ 2 - t236 ^ 2;
t279 = qJD(1) * t32 + qJD(3) * t134;
t278 = -t328 - t350;
t69 = t202 / 0.2e1 + (t307 - t372) * t234;
t277 = qJD(1) * t69 - t327;
t42 = t145 * t415 - t414 * t95;
t271 = qJD(3) * t42 - t345 * t95;
t270 = -qJD(1) * t42 + t232 * t327;
t269 = qJD(6) * t227 + t317;
t183 = t238 * t242;
t23 = t273 + t293;
t265 = qJD(1) * t23 - qJD(2) * t128 - qJD(3) * t183;
t220 = t227 * qJD(3);
t179 = t234 * t327;
t132 = t412 / 0.2e1 + t267 * pkin(3);
t79 = t82 * qJD(6);
t77 = t85 * qJD(6);
t76 = t87 * qJD(6);
t72 = -t202 / 0.2e1 + (t301 + t423) * t234;
t63 = -t326 - t75;
t39 = t42 * qJD(6);
t31 = t32 * qJD(6);
t24 = -t273 + t293;
t19 = t261 - t272;
t17 = t27 * qJD(3);
t10 = t262 + t274;
t9 = t263 + t275;
t3 = qJD(3) * t4 + qJD(4) * t60;
t13 = [0, 0, 0, 0, t258 * t322, t241 * qJD(3), 0, 0, 0, t249 * t323, t249 * t322, t165 * qJD(4), qJD(3) * t30 + qJD(4) * t50, qJD(3) * t15 + qJD(4) * t129 - t255 * t321, qJD(3) * t16 + qJD(4) * t160 + t253 * t321, -qJD(3) * t6 + qJD(5) * t90, qJD(3) * t5 + qJD(4) * t18 + qJD(5) * t29 (qJD(3) * t144 - t335) * t145, qJD(3) * t33 + qJD(6) * t35, qJD(3) * t45 - t230 * t335, qJD(3) * t43 - t135 * t230, qJD(3) * t385, qJD(3) * t1 + qJD(4) * t44 + qJD(6) * t12 + t339 * t381, qJD(3) * t2 + qJD(4) * t46 + qJD(6) * t11 + t339 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, t311, t324, t322, -t323, 0, -t247 * t322 + t315, t247 * t323 + t314 (t230 * t396 - t234 * t254) * t410 (-t151 * t254 - t396 * t421) * t410 + t132 * qJD(4) + t283, t391 + (t253 * t280 - t390) * qJD(3) - t157 * qJD(5), t421 * t341 + (qJD(3) * t280 - t339) * t255 + t285, qJD(3) * t290 - t403 (t242 * t290 + t248 * t421) * qJD(3) + t19 * qJD(4) + t24 * qJD(5) + t292, t39 + (t327 + t345) * t144, t369 + (-t144 * t232 + t236 * t378) * qJD(3) + t31, t179 - t76 + t366, -t316 - t79 + t368, t269, t409 + (-t148 * t234 + t232 * t96 - t237 * t378) * qJD(3) - t286 * qJD(5) + t10 * qJD(6), t408 + (t144 * t237 - t149 * t234 + t236 * t96) * qJD(3) - t88 * qJD(5) + t9 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, qJD(3) * t132 + t364, t337, t331, 0, qJD(3) * t19 + t284 - t428, 0, 0, 0, 0, 0, -t79 + t367, -qJD(6) * t86 + t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t157 - t296 (t253 * t343 - t340) * t230, t352, qJD(3) * t24 - qJD(4) * t128 + t370, 0, 0, 0, 0, 0, qJD(6) * t72 + t320 - t358, -qJD(3) * t88 + t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, t281, -t354 + (-qJD(6) - t344) * t95, -t135 - t318 - t359, t220, qJD(3) * t10 - qJD(4) * t82 + qJD(5) * t72 - qJD(6) * t22 + t394, qJD(3) * t9 - qJD(4) * t86 + qJD(6) * t21 + t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, -t322, 0, t371 + (-t299 - t383) * t410, -t312, t234 * t341, -t332 (-t238 * t384 + t380) * qJD(3) + t429 + t289, 0, 0, 0, 0, 0, t316 + t78, t179 - t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135 + t358, t335 - t356; 0, 0, 0, 0, -t311, -t324, 0, 0, 0, -t315, -t314, 0, qJD(4) * t133 - t283, -qJD(4) * t379 - t391, qJD(4) * t156 - t285, -qJD(4) * t159 + t403, qJD(4) * t20 - qJD(5) * t23 - t292, -t144 * t345 + t39, t31 - t369, -t77 - t366, -t78 - t368, -t269, qJD(4) * t381 - qJD(5) * t82 - qJD(6) * t7 - t409, qJD(4) * t95 - qJD(5) * t86 - qJD(6) * t8 - t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t371, 0, 0, 0, -t289 + t428, 0, 0, 0, 0, 0, -t83 * qJD(6), -t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238 * qJD(5), t183 * qJD(5), -t232 * t326, t134 * qJD(6), 0, 0, 0, t237 * t326, -t237 * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t336, -t313, t334, -t333, t387, 0, 0, 0, 0, 0, t351, t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t325, -t265, 0, 0, 0, 0, 0, -t360, -t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, t279, -t225 - t357, t63, -t329, -qJD(6) * t149 + t237 * t327 - t288, qJD(6) * t148 - t237 * t328 - t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, -qJD(3) * t133 - t364, t312 - t337, -qJD(3) * t156 - t331, t332, -qJD(3) * t20 - t284 - t429, 0, 0, 0, 0, 0, -qJD(3) * t381 - t367 - t78, -qJD(3) * t95 - qJD(6) * t88 - t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t362, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t336, t313, -t334, t333, -t387, 0, 0, 0, 0, 0, -t351, -t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t338, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t225 - t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t296, -t253 * t317, -t352, qJD(3) * t23 + qJD(4) * t127 - t370, 0, 0, 0, 0, 0, -qJD(6) * t69 - t320 + t359, qJD(3) * t86 - t319 - t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t325, t265, 0, 0, 0, 0, 0, t326 + t360, -t225 + t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t338, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t277, t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t271, -t281, t356 + t319, t318 + t358, t220, qJD(3) * t7 + qJD(4) * t286 + qJD(5) * t69 - t394, qJD(3) * t8 + qJD(4) * t88 + qJD(5) * t95 - t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83 * qJD(3), t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, -t279, t357, t75, t329, -t236 * t297 + t288, t232 * t297 + t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t277, -t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t13;
