% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:28
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPRP1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:27:24
% EndTime: 2019-05-07 07:27:41
% DurationCPUTime: 10.10s
% Computational Cost: add. (61979->556), mult. (140360->755), div. (0->0), fcn. (105196->10), ass. (0->358)
t344 = cos(qJ(2));
t328 = t344 * qJDD(1);
t340 = sin(qJ(2));
t397 = qJD(1) * qJD(2);
t383 = t340 * t397;
t316 = t328 - t383;
t335 = t344 ^ 2;
t346 = qJD(1) ^ 2;
t341 = sin(qJ(1));
t450 = cos(qJ(1));
t380 = t341 * g(1) - t450 * g(2);
t358 = qJDD(1) * pkin(1) + t380;
t403 = qJD(1) * t340;
t359 = qJD(2) * pkin(2) - pkin(8) * t403;
t273 = t316 * pkin(2) - t359 * t403 + t358 + (pkin(8) * t335 + pkin(7)) * t346;
t339 = sin(qJ(3));
t343 = cos(qJ(3));
t307 = (t339 * t344 + t340 * t343) * qJD(1);
t327 = t340 * qJDD(1);
t382 = t344 * t397;
t315 = t327 + t382;
t375 = t339 * t315 - t343 * t316;
t270 = -qJD(3) * t307 - t375;
t306 = qJD(1) * t343 * t344 - t339 * t403;
t271 = t306 * qJD(3) + t343 * t315 + t339 * t316;
t336 = sin(pkin(10));
t337 = cos(pkin(10));
t377 = -t337 * t270 + t271 * t336;
t224 = qJDD(5) + t377;
t287 = t336 * t306 + t337 * t307;
t333 = qJD(2) + qJD(3);
t338 = sin(qJ(5));
t342 = cos(qJ(5));
t267 = t287 * t338 - t342 * t333;
t269 = t287 * t342 + t333 * t338;
t229 = t269 * t267;
t459 = t224 - t229;
t467 = pkin(5) * t459;
t226 = t336 * t270 + t337 * t271;
t396 = qJDD(2) + qJDD(3);
t194 = -t267 * qJD(5) + t342 * t226 + t338 * t396;
t285 = -t337 * t306 + t307 * t336;
t281 = qJD(5) + t285;
t236 = t281 * t267;
t174 = t236 + t194;
t466 = qJ(6) * t174;
t246 = t287 * t285;
t457 = -t246 + t396;
t465 = t336 * t457;
t464 = t337 * t457;
t293 = t306 * t307;
t456 = t293 + t396;
t463 = t339 * t456;
t462 = t343 * t456;
t428 = t459 * t338;
t427 = t459 * t342;
t266 = t269 ^ 2;
t280 = t281 ^ 2;
t218 = -t266 - t280;
t265 = t267 ^ 2;
t378 = t338 * t226 - t342 * t396;
t193 = -qJD(5) * t269 - t378;
t230 = pkin(5) * t281 - qJ(6) * t269;
t407 = t340 * t346;
t360 = g(1) * t450 + t341 * g(2);
t432 = qJDD(1) * pkin(7);
t309 = -t346 * pkin(1) - t360 + t432;
t409 = t340 * t309;
t256 = qJDD(2) * pkin(2) - t315 * pkin(8) - t409 + (pkin(2) * t407 + pkin(8) * t397 - g(3)) * t344;
t297 = -t340 * g(3) + t344 * t309;
t330 = t335 * t346;
t257 = -pkin(2) * t330 + t316 * pkin(8) - qJD(2) * t359 + t297;
t222 = t339 * t256 + t343 * t257;
t304 = t306 ^ 2;
t365 = pkin(3) * t333 - qJ(4) * t307;
t181 = -t304 * pkin(3) + t270 * qJ(4) - t333 * t365 + t222;
t221 = -t343 * t256 + t339 * t257;
t414 = t306 * t333;
t251 = -t271 + t414;
t348 = pkin(3) * t456 + qJ(4) * t251 - t221;
t128 = -0.2e1 * qJD(4) * t285 + t337 * t181 + t336 * t348;
t242 = pkin(4) * t285 - pkin(9) * t287;
t455 = t333 ^ 2;
t108 = -pkin(4) * t455 + pkin(9) * t396 - t285 * t242 + t128;
t195 = t270 * pkin(3) + t304 * qJ(4) - t307 * t365 - qJDD(4) + t273;
t417 = t287 * t333;
t202 = t377 + t417;
t418 = t285 * t333;
t367 = t226 - t418;
t133 = pkin(4) * t202 - t367 * pkin(9) - t195;
t84 = t342 * t108 + t338 * t133;
t356 = t193 * qJ(6) - 0.2e1 * qJD(6) * t267 - t281 * t230 + t84;
t461 = -t356 + (t218 + t265) * pkin(5);
t83 = t108 * t338 - t342 * t133;
t44 = t338 * t83 + t342 * t84;
t458 = -t236 + t194;
t171 = (qJD(5) - t281) * t269 + t378;
t282 = t285 ^ 2;
t283 = t287 ^ 2;
t305 = t307 ^ 2;
t399 = qJD(6) * t269;
t259 = -0.2e1 * t399;
t353 = -t466 - t83 + t467;
t55 = t259 + t353;
t454 = pkin(5) * t55;
t124 = -t171 * t342 + t174 * t338;
t201 = -t265 - t266;
t95 = t124 * t336 - t201 * t337;
t96 = t124 * t337 + t201 * t336;
t66 = t339 * t96 + t343 * t95;
t453 = pkin(8) * t66;
t210 = -t280 - t265;
t142 = t210 * t342 - t428;
t170 = (qJD(5) + t281) * t269 + t378;
t101 = t142 * t336 - t170 * t337;
t102 = t142 * t337 + t170 * t336;
t71 = t101 * t343 + t102 * t339;
t452 = pkin(8) * t71;
t183 = t224 + t229;
t429 = t183 * t342;
t148 = -t218 * t338 - t429;
t113 = t148 * t336 - t337 * t458;
t114 = t148 * t337 + t336 * t458;
t75 = t113 * t343 + t114 * t339;
t451 = pkin(8) * t75;
t141 = t210 * t338 + t427;
t449 = pkin(4) * t141;
t430 = t183 * t338;
t147 = t218 * t342 - t430;
t448 = pkin(4) * t147;
t447 = pkin(4) * t336;
t446 = pkin(5) * t174;
t122 = -t171 * t338 - t174 * t342;
t445 = pkin(9) * t122;
t444 = pkin(9) * t141;
t443 = pkin(9) * t147;
t442 = qJ(4) * t95;
t441 = t338 * t55;
t379 = t336 * t181 - t337 * t348;
t401 = qJD(4) * t287;
t127 = t379 + 0.2e1 * t401;
t88 = -t127 * t337 + t128 * t336;
t440 = t339 * t88;
t439 = t342 * t55;
t438 = t343 * t88;
t67 = -t339 * t95 + t343 * t96;
t437 = pkin(7) * (-t340 * t66 + t344 * t67) - pkin(1) * t122;
t72 = -t101 * t339 + t102 * t343;
t436 = pkin(7) * (-t340 * t71 + t344 * t72) - pkin(1) * t141;
t76 = -t113 * t339 + t114 * t343;
t435 = pkin(7) * (-t340 * t75 + t344 * t76) - pkin(1) * t147;
t434 = qJ(4) * t101;
t433 = qJ(4) * t113;
t176 = -t221 * t343 + t222 * t339;
t431 = t176 * t340;
t426 = t195 * t336;
t425 = t195 * t337;
t240 = t246 + t396;
t424 = t240 * t336;
t423 = t240 * t337;
t422 = t273 * t339;
t421 = t273 * t343;
t420 = t281 * t338;
t419 = t281 * t342;
t290 = -t293 + t396;
t416 = t290 * t339;
t415 = t290 * t343;
t413 = t333 * t336;
t412 = t333 * t337;
t411 = t333 * t339;
t410 = t333 * t343;
t362 = -t396 * pkin(4) - pkin(9) * t455 + t379;
t374 = (0.2e1 * qJD(4) + t242) * t287;
t107 = t374 + t362;
t103 = t338 * t107;
t322 = t344 * t407;
t408 = t340 * (qJDD(2) + t322);
t104 = t342 * t107;
t406 = t344 * (qJDD(2) - t322);
t31 = -t107 * t337 + t336 * t44;
t395 = pkin(3) * t31 - pkin(4) * t107 + pkin(9) * t44;
t394 = pkin(3) * t95 - pkin(4) * t201 + pkin(9) * t124;
t393 = t336 * t229;
t392 = t337 * t229;
t391 = pkin(3) * t101 - pkin(4) * t170 + pkin(9) * t142;
t390 = pkin(3) * t113 - pkin(4) * t458 + pkin(9) * t148;
t389 = -pkin(4) * t337 - pkin(3);
t387 = -pkin(2) * t122 + pkin(8) * t67;
t386 = -pkin(2) * t141 + pkin(8) * t72;
t385 = -pkin(2) * t147 + pkin(8) * t76;
t384 = -pkin(3) * t141 + qJ(4) * t102;
t381 = -pkin(3) * t147 + qJ(4) * t114;
t89 = t127 * t336 + t337 * t128;
t177 = t221 * t339 + t343 * t222;
t296 = t344 * g(3) + t409;
t376 = t340 * t296 + t344 * t297;
t373 = t103 + t390;
t372 = -t104 + t391;
t274 = -t283 - t455;
t212 = t274 * t337 - t424;
t371 = pkin(3) * t212 - t128;
t52 = -qJ(6) * t171 + (-t201 - t265) * pkin(5) + t356;
t260 = 0.2e1 * t399;
t54 = t260 - t353 + t466;
t369 = t338 * t54 + t342 * t52 + t394;
t368 = t394 + t44;
t130 = -pkin(5) * t458 - qJ(6) * t183;
t349 = -t193 * pkin(5) - t265 * qJ(6) + t269 * t230 + qJDD(6) + t362;
t86 = t374 + t349;
t80 = -qJ(6) * t218 + t86;
t366 = t342 * t130 + t338 * t80 + t390;
t43 = t338 * t84 - t342 * t83;
t238 = -t455 - t282;
t188 = t238 * t336 + t464;
t279 = -0.2e1 * t401;
t363 = pkin(3) * t188 + t279 - t379;
t361 = t271 + t414;
t357 = -t377 + t417;
t58 = -pkin(5) * t265 + t356;
t27 = t342 * t58 - t441;
t20 = t27 * t336 - t337 * t86;
t38 = -pkin(5) * t86 + qJ(6) * t58;
t355 = pkin(3) * t20 - pkin(4) * t86 + pkin(9) * t27 - qJ(6) * t441 + t342 * t38;
t63 = -pkin(5) * t170 + qJ(6) * t210 - t242 * t287 + t279 - t349;
t354 = -qJ(6) * t428 + t342 * t63 + t391;
t352 = (-qJD(3) + t333) * t307 - t375;
t350 = t353 + t467;
t345 = qJD(2) ^ 2;
t334 = t340 ^ 2;
t329 = t334 * t346;
t317 = t328 - 0.2e1 * t383;
t314 = t327 + 0.2e1 * t382;
t308 = t346 * pkin(7) + t358;
t299 = -t305 + t455;
t298 = t304 - t455;
t295 = -t305 - t455;
t292 = t305 - t304;
t288 = -t455 - t304;
t276 = -t283 + t455;
t275 = t282 - t455;
t272 = -t304 - t305;
t254 = -t295 * t339 - t415;
t253 = t295 * t343 - t416;
t247 = (qJD(3) + t333) * t307 + t375;
t245 = t288 * t343 - t463;
t244 = t288 * t339 + t462;
t243 = t283 - t282;
t234 = -t266 + t280;
t233 = t265 - t280;
t232 = (-t285 * t337 + t287 * t336) * t333;
t231 = (-t285 * t336 - t287 * t337) * t333;
t227 = t266 - t265;
t220 = -t282 - t283;
t217 = t275 * t337 - t424;
t216 = -t276 * t336 + t464;
t215 = t275 * t336 + t423;
t214 = t276 * t337 + t465;
t213 = -t274 * t336 - t423;
t209 = -t251 * t339 + t343 * t352;
t208 = t251 * t343 + t339 * t352;
t206 = -t226 - t418;
t199 = t226 * t337 - t287 * t413;
t198 = t226 * t336 + t287 * t412;
t197 = t285 * t412 + t336 * t377;
t196 = t285 * t413 - t337 * t377;
t189 = t238 * t337 - t465;
t186 = (-t267 * t342 + t269 * t338) * t281;
t185 = (-t267 * t338 - t269 * t342) * t281;
t167 = t194 * t342 - t269 * t420;
t166 = t194 * t338 + t269 * t419;
t165 = -t193 * t338 + t267 * t419;
t164 = t193 * t342 + t267 * t420;
t163 = -t212 * t339 + t213 * t343;
t162 = t212 * t343 + t213 * t339;
t161 = -qJ(4) * t212 - t425;
t160 = t186 * t337 + t224 * t336;
t159 = t186 * t336 - t224 * t337;
t158 = -t206 * t336 + t337 * t357;
t157 = -t202 * t337 - t336 * t367;
t156 = t206 * t337 + t336 * t357;
t155 = -t202 * t336 + t337 * t367;
t154 = pkin(3) * t156;
t153 = t233 * t342 - t430;
t152 = -t234 * t338 + t427;
t151 = t233 * t338 + t429;
t150 = t234 * t342 + t428;
t149 = -qJ(4) * t188 - t426;
t144 = -t188 * t339 + t189 * t343;
t143 = t188 * t343 + t189 * t339;
t138 = t167 * t337 + t393;
t137 = t165 * t337 - t393;
t136 = t167 * t336 - t392;
t135 = t165 * t336 + t392;
t134 = -pkin(3) * t367 + qJ(4) * t213 - t426;
t126 = -pkin(3) * t202 + qJ(4) * t189 + t425;
t123 = -t170 * t342 - t338 * t458;
t121 = -t170 * t338 + t342 * t458;
t118 = t153 * t337 - t171 * t336;
t117 = t152 * t337 + t174 * t336;
t116 = t153 * t336 + t171 * t337;
t115 = t152 * t336 - t174 * t337;
t110 = -t156 * t339 + t158 * t343;
t109 = t156 * t343 + t158 * t339;
t98 = t123 * t337 + t227 * t336;
t97 = t123 * t336 - t227 * t337;
t93 = qJ(4) * t96;
t92 = -pkin(4) * t122 + t446;
t91 = t104 - t443;
t90 = t103 - t444;
t87 = pkin(3) * t88;
t78 = pkin(3) * t195 + qJ(4) * t89;
t77 = t340 * (-t159 * t339 + t160 * t343) + t344 * (t159 * t343 + t160 * t339);
t74 = pkin(2) * t75;
t70 = pkin(2) * t71;
t68 = -qJ(4) * t156 - t88;
t65 = pkin(2) * t66;
t61 = -pkin(3) * t220 + qJ(4) * t158 + t89;
t60 = t84 - t448;
t59 = t83 - t449;
t57 = t340 * (-t136 * t339 + t138 * t343) + t344 * (t136 * t343 + t138 * t339);
t56 = t340 * (-t135 * t339 + t137 * t343) + t344 * (t135 * t343 + t137 * t339);
t50 = -t130 * t338 + t342 * t80 - t443;
t49 = -qJ(6) * t427 - t338 * t63 - t444;
t48 = t343 * t89 - t440;
t47 = t339 * t89 + t438;
t46 = -t448 - t461;
t45 = t260 - t350 - t449;
t41 = t340 * (-t116 * t339 + t118 * t343) + t344 * (t116 * t343 + t118 * t339);
t40 = t340 * (-t115 * t339 + t117 * t343) + t344 * (t115 * t343 + t117 * t339);
t35 = t340 * (-t339 * t97 + t343 * t98) + t344 * (t339 * t98 + t343 * t97);
t34 = -t43 - t445;
t32 = t107 * t336 + t337 * t44;
t29 = -t336 * t60 + t337 * t91 - t433;
t28 = -t336 * t59 + t337 * t90 - t434;
t26 = t338 * t58 + t439;
t24 = t336 * t91 + t337 * t60 + t381;
t23 = t336 * t90 + t337 * t59 + t384;
t22 = t122 * t447 + t337 * t34 - t442;
t21 = t27 * t337 + t336 * t86;
t18 = -t338 * t52 + t342 * t54 - t445;
t17 = t122 * t389 + t336 * t34 + t93;
t16 = -t336 * t46 + t337 * t50 - t433;
t15 = -pkin(4) * t26 - t454;
t14 = -t336 * t45 + t337 * t49 - t434;
t13 = t336 * t50 + t337 * t46 + t381;
t12 = t336 * t49 + t337 * t45 + t384;
t11 = -t31 * t339 + t32 * t343;
t10 = t31 * t343 + t32 * t339;
t9 = t18 * t337 - t336 * t92 - t442;
t8 = -pkin(3) * t122 + t18 * t336 + t337 * t92 + t93;
t7 = -qJ(4) * t31 + (-pkin(9) * t337 + t447) * t43;
t6 = -pkin(9) * t26 - qJ(6) * t439 - t338 * t38;
t5 = -t20 * t339 + t21 * t343;
t4 = t20 * t343 + t21 * t339;
t3 = qJ(4) * t32 + (-pkin(9) * t336 + t389) * t43;
t2 = -qJ(4) * t20 - t15 * t336 + t337 * t6;
t1 = -pkin(3) * t26 + qJ(4) * t21 + t15 * t337 + t336 * t6;
t19 = [0, 0, 0, 0, 0, qJDD(1), t380, t360, 0, 0, (t315 + t382) * t340, t314 * t344 + t317 * t340, t408 + t344 * (-t329 + t345), (t316 - t383) * t344, t340 * (t330 - t345) + t406, 0, t344 * t308 + pkin(1) * t317 + pkin(7) * (t344 * (-t330 - t345) - t408), -t340 * t308 - pkin(1) * t314 + pkin(7) * (-t406 - t340 * (-t329 - t345)), pkin(1) * (t329 + t330) + (t334 + t335) * t432 + t376, pkin(1) * t308 + pkin(7) * t376, t340 * (t271 * t343 - t307 * t411) + t344 * (t271 * t339 + t307 * t410), t340 * (-t247 * t343 - t339 * t361) + t344 * (-t247 * t339 + t343 * t361), t340 * (-t299 * t339 + t462) + t344 * (t299 * t343 + t463), t340 * (-t270 * t339 - t306 * t410) + t344 * (t270 * t343 - t306 * t411), t340 * (t298 * t343 - t416) + t344 * (t298 * t339 + t415), (t340 * (t306 * t343 + t307 * t339) + t344 * (t306 * t339 - t307 * t343)) * t333, t340 * (-pkin(8) * t244 - t422) + t344 * (-pkin(2) * t247 + pkin(8) * t245 + t421) - pkin(1) * t247 + pkin(7) * (-t244 * t340 + t245 * t344), t340 * (-pkin(8) * t253 - t421) + t344 * (-pkin(2) * t361 + pkin(8) * t254 - t422) - pkin(1) * t361 + pkin(7) * (-t253 * t340 + t254 * t344), t340 * (-pkin(8) * t208 - t176) + t344 * (-pkin(2) * t272 + pkin(8) * t209 + t177) - pkin(1) * t272 + pkin(7) * (-t208 * t340 + t209 * t344), -pkin(8) * t431 + t344 * (pkin(2) * t273 + pkin(8) * t177) + pkin(1) * t273 + pkin(7) * (t177 * t344 - t431), t340 * (-t198 * t339 + t199 * t343) + t344 * (t198 * t343 + t199 * t339), t340 * (-t155 * t339 + t157 * t343) + t344 * (t155 * t343 + t157 * t339), t340 * (-t214 * t339 + t216 * t343) + t344 * (t214 * t343 + t216 * t339), t340 * (-t196 * t339 + t197 * t343) + t344 * (t196 * t343 + t197 * t339), t340 * (-t215 * t339 + t217 * t343) + t344 * (t215 * t343 + t217 * t339), t340 * (-t231 * t339 + t232 * t343) + t344 * (t231 * t343 + t232 * t339), t340 * (-pkin(8) * t143 - t126 * t339 + t149 * t343) + t344 * (-pkin(2) * t202 + pkin(8) * t144 + t126 * t343 + t149 * t339) - pkin(1) * t202 + pkin(7) * (-t143 * t340 + t144 * t344), t340 * (-pkin(8) * t162 - t134 * t339 + t161 * t343) + t344 * (-pkin(2) * t367 + pkin(8) * t163 + t134 * t343 + t161 * t339) - pkin(1) * t367 + pkin(7) * (-t162 * t340 + t163 * t344), t340 * (-pkin(8) * t109 - t339 * t61 + t343 * t68) + t344 * (-pkin(2) * t220 + pkin(8) * t110 + t339 * t68 + t343 * t61) - pkin(1) * t220 + pkin(7) * (-t109 * t340 + t110 * t344), t340 * (-pkin(8) * t47 - qJ(4) * t438 - t339 * t78) + t344 * (pkin(2) * t195 + pkin(8) * t48 - qJ(4) * t440 + t343 * t78) + pkin(1) * t195 + pkin(7) * (-t340 * t47 + t344 * t48), t57, t35, t40, t56, t41, t77, t340 * (-t23 * t339 + t28 * t343 - t452) + t344 * (t23 * t343 + t28 * t339 + t386) + t436, t340 * (-t24 * t339 + t29 * t343 - t451) + t344 * (t24 * t343 + t29 * t339 + t385) + t435, t340 * (-t17 * t339 + t22 * t343 - t453) + t344 * (t17 * t343 + t22 * t339 + t387) + t437, t340 * (-pkin(8) * t10 - t3 * t339 + t343 * t7) + t344 * (-pkin(2) * t43 + pkin(8) * t11 + t3 * t343 + t339 * t7) - pkin(1) * t43 + pkin(7) * (-t10 * t340 + t11 * t344), t57, t35, t40, t56, t41, t77, t340 * (-t12 * t339 + t14 * t343 - t452) + t344 * (t12 * t343 + t14 * t339 + t386) + t436, t340 * (-t13 * t339 + t16 * t343 - t451) + t344 * (t13 * t343 + t16 * t339 + t385) + t435, t340 * (-t339 * t8 + t343 * t9 - t453) + t344 * (t339 * t9 + t343 * t8 + t387) + t437, t340 * (-pkin(8) * t4 - t1 * t339 + t2 * t343) + t344 * (-pkin(2) * t26 + pkin(8) * t5 + t1 * t343 + t2 * t339) - pkin(1) * t26 + pkin(7) * (-t340 * t4 + t344 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, t329 - t330, t327, t322, t328, qJDD(2), -t296, -t297, 0, 0, -t293, t292, -t251, t293, t352, t396, pkin(2) * t244 - t221, pkin(2) * t253 - t222, pkin(2) * t208, pkin(2) * t176, t246, t243, -t206, -t246, t357, t396, pkin(2) * t143 + t363, pkin(2) * t162 + t371, pkin(2) * t109 + t154, pkin(2) * t47 + t87, t166, t121, t150, t164, t151, t185, t70 + t372, t74 + t373, t65 + t368, pkin(2) * t10 + t395, t166, t121, t150, t164, t151, t185, t354 + t70, t74 + t366, t65 + t369, pkin(2) * t4 + t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, t292, -t251, t293, t352, t396, -t221, -t222, 0, 0, t246, t243, -t206, -t246, t357, t396, t363, t371, t154, t87, t166, t121, t150, t164, t151, t185, t372, t373, t368, t395, t166, t121, t150, t164, t151, t185, t354, t366, t369, t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, t367, t220, -t195, 0, 0, 0, 0, 0, 0, t141, t147, t122, t43, 0, 0, 0, 0, 0, 0, t141, t147, t122, t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t229, t227, t174, -t229, -t171, t224, -t83, -t84, 0, 0, t229, t227, t174, -t229, -t171, t224, t259 + t350, t461, -t446, t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, t458, t201, t86;];
tauJ_reg  = t19;
