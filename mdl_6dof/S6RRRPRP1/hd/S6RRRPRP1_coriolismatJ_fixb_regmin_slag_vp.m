% Calculate minimal parameter regressor of coriolis matrix for
% S6RRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x28]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RRRPRP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:33:05
% EndTime: 2019-03-09 16:33:27
% DurationCPUTime: 12.33s
% Computational Cost: add. (19326->530), mult. (36503->726), div. (0->0), fcn. (42836->8), ass. (0->447)
t511 = qJD(2) + qJD(3);
t399 = sin(qJ(3));
t400 = sin(qJ(2));
t402 = cos(qJ(2));
t635 = cos(qJ(3));
t369 = -t399 * t402 - t400 * t635;
t620 = cos(pkin(10));
t355 = t620 * t369;
t367 = t399 * t400 - t402 * t635;
t397 = sin(pkin(10));
t563 = t397 * t367;
t670 = -t355 - t563;
t659 = pkin(7) + pkin(8);
t376 = t659 * t400;
t377 = t659 * t402;
t282 = t399 * t376 - t377 * t635;
t278 = -t367 * qJ(4) - t282;
t268 = t620 * t278;
t438 = -t376 * t635 - t399 * t377;
t669 = t369 * qJ(4) + t438;
t674 = t397 * t669;
t704 = t268 + t674;
t593 = t704 * t670;
t318 = -t620 * t367 + t369 * t397;
t663 = -t397 * t278 + t620 * t669;
t690 = t318 * t663;
t696 = t593 - t690;
t709 = t696 + t690;
t712 = t709 - t593;
t713 = t712 * qJD(1);
t401 = cos(qJ(5));
t391 = -pkin(2) * t402 - pkin(1);
t337 = t367 * pkin(3) + t391;
t416 = -pkin(4) * t318 - pkin(9) * t670 + t337;
t398 = sin(qJ(5));
t706 = t704 * t398;
t108 = -t401 * t416 + t706;
t711 = -t108 * t670 + t398 * t709;
t687 = t398 * t670;
t124 = pkin(5) * t687 - t663;
t689 = t398 * t318;
t304 = pkin(5) * t689;
t700 = t704 + t304;
t710 = t124 * t700;
t705 = t704 * t401;
t109 = t398 * t416 + t705;
t708 = -t109 * t670 + t401 * t696;
t470 = t620 * t399;
t498 = t635 * t397;
t358 = (t470 + t498) * pkin(2);
t647 = t358 / 0.2e1;
t685 = t401 * t663;
t707 = -t685 / 0.2e1;
t686 = t401 * t318;
t478 = -t686 / 0.2e1;
t298 = t686 / 0.2e1;
t680 = -t268 / 0.2e1 - t674 / 0.2e1;
t703 = t304 / 0.2e1 - t680;
t688 = t398 * t663;
t702 = pkin(5) * t670 - qJ(6) * t686 - t688;
t657 = -t304 / 0.2e1;
t701 = t657 + t680;
t681 = qJD(1) * t318;
t699 = -qJD(5) + t681;
t637 = t398 / 0.2e1;
t698 = -t663 * t637 - t688 / 0.2e1;
t695 = t670 ^ 2;
t694 = -t318 / 0.2e1;
t693 = pkin(5) * t318;
t691 = t318 * t511;
t581 = t670 * t401;
t540 = qJD(1) * t401;
t684 = t670 * t540;
t530 = qJD(5) * t401;
t100 = -qJ(6) * t581 - t108;
t72 = t100 - t693;
t499 = t100 / 0.2e1 - t72 / 0.2e1;
t432 = (t693 / 0.2e1 + t499) * t401;
t666 = t432 * qJD(1);
t682 = -pkin(5) * t530 + t666;
t678 = t511 * t438;
t677 = 0.2e1 * t670;
t676 = 0.2e1 * t398 * t581;
t632 = t369 * pkin(3);
t174 = pkin(4) * t670 - pkin(9) * t318 - t632;
t394 = t400 * pkin(2);
t165 = t174 + t394;
t160 = t401 * t165;
t75 = t160 + t702;
t661 = t75 / 0.2e1;
t675 = t100 - t72;
t395 = t398 ^ 2;
t396 = t401 ^ 2;
t380 = t395 + t396;
t673 = t511 * t380;
t508 = t635 * pkin(2);
t390 = t508 + pkin(3);
t353 = pkin(2) * t470 + t397 * t390;
t349 = pkin(9) + t353;
t553 = qJ(6) + t349;
t332 = t553 * t401;
t577 = t332 * t401;
t322 = t577 / 0.2e1;
t331 = t553 * t398;
t580 = t331 * t398;
t672 = t322 + t580 / 0.2e1;
t385 = t397 * pkin(3) + pkin(9);
t552 = qJ(6) + t385;
t361 = t552 * t401;
t571 = t361 * t401;
t345 = t571 / 0.2e1;
t360 = t552 * t398;
t574 = t360 * t398;
t671 = t345 + t574 / 0.2e1;
t634 = pkin(2) * t399;
t384 = t397 * t634;
t359 = t508 * t620 - t384;
t646 = -t359 / 0.2e1;
t441 = -t318 * t646 + t647 * t670;
t352 = t390 * t620 - t384;
t348 = -pkin(4) - t352;
t583 = t318 * t348;
t586 = t670 * t385;
t587 = t670 * t349;
t668 = -t586 / 0.2e1 - t587 / 0.2e1 + t583 / 0.2e1 + t441;
t667 = t511 * t282;
t447 = pkin(5) * t478 + t401 * t499;
t665 = t447 * qJD(5);
t190 = (t395 / 0.2e1 - t396 / 0.2e1) * t670;
t495 = t398 * t540;
t664 = t190 * t511 + t495 * t695;
t381 = t396 - t395;
t219 = t381 * t511 - 0.2e1 * t495 * t670;
t311 = t395 * t318;
t312 = t396 * t318;
t201 = -t311 - t312;
t662 = -t201 * qJD(4) + qJD(5) * t432;
t173 = t401 * t174;
t77 = t173 + t702;
t660 = t77 / 0.2e1;
t654 = -t331 / 0.2e1;
t653 = -t332 / 0.2e1;
t652 = t332 / 0.2e1;
t631 = t401 * pkin(5);
t335 = t348 - t631;
t651 = t335 / 0.2e1;
t650 = -t348 / 0.2e1;
t649 = t352 / 0.2e1;
t648 = -t353 / 0.2e1;
t645 = -t360 / 0.2e1;
t644 = -t361 / 0.2e1;
t643 = t361 / 0.2e1;
t386 = -pkin(3) * t620 - pkin(4);
t372 = t386 - t631;
t642 = -t372 / 0.2e1;
t641 = t385 / 0.2e1;
t640 = -t386 / 0.2e1;
t639 = t397 / 0.2e1;
t638 = -t398 / 0.2e1;
t636 = t401 / 0.2e1;
t633 = pkin(5) * t398;
t101 = -qJ(6) * t687 + t109;
t609 = t101 * t401;
t626 = t72 * t398;
t630 = -t626 / 0.2e1 + t609 / 0.2e1;
t629 = pkin(3) * qJD(3);
t628 = pkin(5) * qJD(5);
t502 = qJ(6) * t689;
t159 = t398 * t165;
t550 = t685 + t159;
t104 = -t502 + t550;
t7 = t101 * t104 + t72 * t75 + t710;
t627 = t7 * qJD(1);
t625 = t75 * t398;
t624 = t75 * t401;
t623 = t77 * t398;
t622 = t77 * t401;
t172 = t398 * t174;
t551 = t685 + t172;
t107 = -t502 + t551;
t8 = t101 * t107 + t72 * t77 + t710;
t621 = t8 * qJD(1);
t509 = pkin(5) * t581;
t15 = t101 * t675 + t124 * t509;
t619 = qJD(1) * t15;
t18 = t675 * t687;
t618 = qJD(1) * t18;
t25 = t124 * t670 + (t609 - t626) * t318;
t617 = qJD(1) * t25;
t411 = t318 * t672 + t651 * t670;
t608 = t104 * t398;
t446 = -t608 / 0.2e1 - t624 / 0.2e1;
t31 = t411 + t446;
t616 = qJD(1) * t31;
t409 = t671 * t318 + t670 * t372 / 0.2e1;
t606 = t107 * t398;
t445 = -t606 / 0.2e1 - t622 / 0.2e1;
t33 = t409 + t445;
t615 = qJD(1) * t33;
t458 = t101 * t398 + t72 * t401;
t36 = t458 * t670;
t614 = qJD(1) * t36;
t53 = -t108 * t318 + t663 * t687;
t613 = qJD(1) * t53;
t54 = t109 * t318 - t581 * t663;
t612 = qJD(1) * t54;
t82 = t318 * t704 - t663 * t670;
t611 = qJD(1) * t82;
t610 = t100 * t398;
t607 = t104 * t401;
t605 = t107 * t401;
t434 = t458 * t318;
t13 = (t608 + t624) * t670 + t434;
t601 = t13 * qJD(1);
t14 = (t606 + t622) * t670 + t434;
t600 = t14 * qJD(1);
t26 = -t160 * t318 + t711;
t592 = t26 * qJD(1);
t27 = t318 * t550 + t708;
t591 = t27 * qJD(1);
t28 = -t173 * t318 + t711;
t590 = t28 * qJD(1);
t29 = t318 * t551 + t708;
t589 = t29 * qJD(1);
t585 = t670 * t397;
t584 = t318 ^ 2;
t579 = t331 * t401;
t578 = t332 * t398;
t576 = t352 * t318;
t575 = t353 * t670;
t573 = t360 * t401;
t572 = t361 * t398;
t404 = (t348 / 0.2e1 + t640) * t318 + (-t349 / 0.2e1 + t641) * t670 + t441;
t39 = t398 * t404;
t568 = t39 * qJD(1);
t567 = t396 * t670;
t43 = t337 * (t394 - t632);
t556 = t43 * qJD(1);
t44 = t337 * t632;
t555 = t44 * qJD(1);
t406 = -t576 / 0.2e1 - t575 / 0.2e1 + t441;
t471 = t620 * t318;
t420 = (-t585 / 0.2e1 - t471 / 0.2e1) * pkin(3);
t60 = t420 - t406;
t554 = t60 * qJD(1);
t303 = t380 * t359;
t374 = t380 * qJD(6);
t549 = t303 * qJD(3) + t374;
t532 = qJD(3) * t401;
t536 = qJD(2) * t401;
t548 = (t532 + t536) * t670;
t453 = -t584 + t695;
t113 = t453 * t398;
t547 = qJD(1) * t113;
t119 = t584 + t695;
t114 = t119 * t398;
t546 = qJD(1) * t114;
t116 = t119 * t401;
t545 = qJD(1) * t116;
t542 = qJD(1) * t670;
t541 = qJD(1) * t391;
t539 = qJD(1) * t402;
t538 = qJD(2) * t398;
t537 = qJD(2) * t400;
t535 = qJD(2) * t402;
t534 = qJD(3) * t391;
t533 = qJD(3) * t398;
t531 = qJD(5) * t398;
t115 = t453 * t401;
t529 = t115 * qJD(1);
t528 = t119 * qJD(1);
t444 = t318 * t648 + t649 * t670;
t357 = -t632 / 0.2e1;
t510 = t357 + t394 / 0.2e1;
t125 = t444 + t510;
t527 = t125 * qJD(1);
t314 = -t563 / 0.2e1 - t355 / 0.2e1;
t439 = -t395 * t670 / 0.2e1 - t567 / 0.2e1;
t130 = -t439 + t314;
t526 = t130 * qJD(1);
t500 = -t620 / 0.2e1;
t430 = t318 * t639 + t500 * t670;
t157 = (t369 / 0.2e1 + t430) * pkin(3);
t525 = t157 * qJD(1);
t524 = t190 * qJD(1);
t523 = t687 * qJD(1);
t474 = 0.2e1 * t694;
t193 = t474 * t398;
t184 = t193 * qJD(1);
t196 = t474 * t401;
t185 = t196 * qJD(1);
t197 = 0.2e1 * t298;
t522 = t197 * qJD(1);
t521 = t201 * qJD(1);
t202 = t380 * t695;
t520 = t202 * qJD(1);
t203 = t381 * t695;
t519 = t203 * qJD(1);
t279 = t367 ^ 2 - t369 ^ 2;
t518 = t279 * qJD(1);
t309 = t367 * t394 - t369 * t391;
t515 = t309 * qJD(1);
t310 = -t367 * t391 - t369 * t394;
t514 = t310 * qJD(1);
t513 = t314 * qJD(1);
t382 = -t400 ^ 2 + t402 ^ 2;
t512 = t382 * qJD(1);
t507 = pkin(1) * t400 * qJD(1);
t506 = pkin(1) * t539;
t504 = qJD(6) * t633;
t503 = t633 / 0.2e1;
t497 = t396 * t542;
t494 = qJD(4) * t581;
t493 = t670 * t531;
t492 = t670 * t530;
t491 = t367 * t541;
t490 = t369 * t541;
t383 = t398 * t530;
t489 = t400 * t539;
t488 = t124 * t638;
t486 = t663 * t636;
t484 = -t581 / 0.2e1;
t481 = t386 * t637;
t480 = -t689 / 0.2e1;
t479 = t359 * t638;
t477 = -t159 / 0.2e1 + t707;
t476 = t707 - t172 / 0.2e1;
t473 = t635 * qJD(2);
t472 = t635 * qJD(3);
t469 = t511 * t401;
t326 = t511 * t369;
t468 = t511 * t398;
t467 = t509 / 0.2e1;
t461 = t646 + t640 + t650;
t460 = t398 * t469;
t459 = t401 * t468;
t217 = t577 + t580;
t121 = t217 * t359 + t335 * t358;
t403 = t107 * t652 + t124 * t647 + t359 * t630 + t651 * t700 + t654 * t77;
t417 = t104 * t644 + t360 * t661 + t642 * t700;
t2 = t403 + t417;
t457 = t2 * qJD(1) + t121 * qJD(2);
t9 = (t107 / 0.2e1 - t104 / 0.2e1) * t401 + (-t77 / 0.2e1 + t661) * t398 + ((t331 / 0.2e1 + t645) * t401 + (t653 + t643) * t398) * t318;
t456 = -qJD(1) * t9 - qJD(2) * t303;
t452 = t583 - t587;
t451 = t318 * t386 - t586;
t306 = t571 + t574;
t204 = -t352 * t358 + t353 * t359;
t407 = (t646 + t649) * t704 + (t647 + t648) * t663;
t421 = (t500 * t704 + t639 * t663) * pkin(3);
t34 = t421 + t407;
t450 = t34 * qJD(1) - t204 * qJD(2);
t443 = -t578 / 0.2e1 + t579 / 0.2e1;
t414 = t443 * t670 + t630;
t22 = t414 + t701;
t449 = qJD(1) * t22 + qJD(2) * t217;
t448 = t670 * t699;
t442 = t349 * t694 + t650 * t670;
t440 = -t318 * t641 + t640 * t670;
t427 = t442 * t401;
t47 = -t160 / 0.2e1 - t427;
t437 = -qJD(1) * t47 - t348 * t538;
t410 = t398 * t442 - t486;
t45 = t410 - t477;
t436 = -qJD(1) * t45 - t348 * t536;
t42 = t401 * t404;
t435 = -qJD(1) * t42 - t358 * t538;
t134 = qJD(5) * t314 - t670 * t681;
t431 = t460 * t677;
t426 = t440 * t401;
t118 = t335 * t633;
t214 = t322 - t577 / 0.2e1;
t3 = -t499 * t332 + (t335 * t484 + t488 + t661) * pkin(5);
t425 = -qJD(1) * t3 + qJD(2) * t118 + qJD(4) * t214;
t415 = (t498 / 0.2e1 + t470 / 0.2e1) * pkin(2);
t128 = (t644 + t653) * t401 + (t645 + t654) * t398 + t415;
t413 = (-t572 / 0.2e1 + t573 / 0.2e1) * t670 + t630;
t24 = t413 + t701;
t424 = qJD(1) * t24 - qJD(2) * t128 + qJD(3) * t306;
t19 = t657 - t610 / 0.2e1 + t626 / 0.2e1;
t289 = t345 - t571 / 0.2e1;
t423 = qJD(1) * t19 - qJD(2) * t214 - qJD(3) * t289;
t245 = t461 * t398;
t51 = -t173 / 0.2e1 - t426;
t419 = -qJD(1) * t51 + qJD(2) * t245 - t386 * t533;
t246 = t461 * t401;
t408 = t398 * t440 - t486;
t49 = t408 - t476;
t418 = -qJD(1) * t49 + qJD(2) * t246 - t386 * t532;
t189 = t372 * t633;
t5 = -t499 * t361 + (t372 * t484 + t488 + t660) * pkin(5);
t88 = (t646 + t642 - t335 / 0.2e1) * t633;
t412 = -qJD(1) * t5 - qJD(2) * t88 + qJD(3) * t189 + qJD(4) * t289;
t393 = pkin(5) * t531;
t375 = t381 * qJD(5);
t340 = t358 * t533;
t328 = t369 * t367 * qJD(1);
t325 = t511 * t367;
t275 = t289 * qJD(5);
t249 = (t468 + t684) * pkin(5);
t248 = t401 * t646 + (t348 + t386) * t636;
t247 = t348 * t637 + t479 + t481;
t213 = t214 * qJD(5);
t199 = t511 * t314;
t198 = (t318 / 0.2e1 + t694) * t401;
t195 = t478 + t298;
t194 = t689 / 0.2e1 + t480;
t183 = t194 * qJD(5);
t182 = t193 * qJD(5);
t179 = t687 * qJD(4);
t177 = t190 * qJD(5);
t176 = t185 + t530;
t175 = -t184 - t531;
t158 = pkin(3) * t430 + t357;
t156 = t459 - t524;
t155 = -t460 + t524;
t131 = t439 + t314;
t129 = t415 + t671 + t672;
t127 = t699 * t676;
t126 = -t444 + t510;
t120 = t124 * t503;
t111 = -t318 * t497 - t177;
t106 = qJD(5) * t196 - t529;
t105 = -t182 + t547;
t90 = -t177 + (t459 + t497) * t318;
t89 = pkin(5) * t479 + (t335 + t372) * t503;
t65 = (-qJD(5) - t681) * t676 + t511 * (-t311 + t312);
t61 = t420 + t406;
t56 = t195 * qJD(5) + t468 * t670 + t529;
t55 = t183 - t547 + t548;
t52 = t173 / 0.2e1 - t426 + t698;
t50 = t408 + t476;
t48 = t160 / 0.2e1 - t427 + t698;
t46 = t410 + t477;
t41 = t386 * t298 + t668 * t401 + t706;
t40 = t318 * t481 + t668 * t398 - t705;
t35 = t421 - t407;
t32 = t409 - t445;
t30 = t411 - t446;
t23 = t413 + t703;
t21 = t414 + t703;
t20 = t610 / 0.2e1 - t609 / 0.2e1 + t657 + t630;
t10 = t605 / 0.2e1 - t623 / 0.2e1 + t361 * t480 + t607 / 0.2e1 - t360 * t478 - t625 / 0.2e1 + t443 * t318;
t6 = pkin(5) * t660 + t100 * t643 + t372 * t467 + t644 * t72 + t120;
t4 = pkin(5) * t661 + t100 * t652 + t335 * t467 + t72 * t653 + t120;
t1 = t403 - t417;
t11 = [0, 0, 0, t400 * t535, t382 * qJD(2), 0, 0, 0, -pkin(1) * t537, -pkin(1) * t535, t367 * t326, t511 * t279, 0, 0, 0, qJD(2) * t309 - t369 * t534, qJD(2) * t310 - t367 * t534, qJD(4) * t119 + t511 * t712, qJD(2) * t43 - qJD(3) * t44 + qJD(4) * t82, -t383 * t695 + t567 * t691, -t203 * qJD(5) - t318 * t431, t115 * t511 + t318 * t493, -t113 * t511 + t318 * t492, -t670 * t691, qJD(2) * t26 + qJD(3) * t28 + qJD(4) * t114 + qJD(5) * t54, qJD(2) * t27 + qJD(3) * t29 + qJD(4) * t116 + qJD(5) * t53, -qJD(2) * t13 - qJD(3) * t14 - qJD(5) * t18 + qJD(6) * t202, qJD(2) * t7 + qJD(3) * t8 + qJD(4) * t25 + qJD(5) * t15 - qJD(6) * t36; 0, 0, 0, t489, t512, t535, -t537, 0, -pkin(7) * t535 - t507, pkin(7) * t537 - t506, t328, t518, -t325, t326, 0, t515 + t667, t514 - t678, t713 + (-t575 - t576) * qJD(2) + t61 * qJD(3), t556 + (-t352 * t704 + t353 * t663) * qJD(2) + t35 * qJD(3) + t126 * qJD(4), t90, t65, t56, t55, t134, t592 + (t398 * t452 - t705) * qJD(2) + t40 * qJD(3) + t48 * qJD(5), t591 + (t401 * t452 + t706) * qJD(2) + t41 * qJD(3) + t46 * qJD(5), -t601 + (t607 - t625 + (-t578 + t579) * t318) * qJD(2) + t10 * qJD(3) + t665, t627 + (t104 * t332 - t331 * t75 + t335 * t700) * qJD(2) + t1 * qJD(3) + t30 * qJD(4) + t4 * qJD(5) + t21 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t328, t518, -t325, t326, 0, -t490 + t667, -t491 - t678, t713 + t61 * qJD(2) + (-t471 - t585) * t629, -t555 + t35 * qJD(2) + (t397 * t663 - t620 * t704) * t629 + t158 * qJD(4), t90, t65, t56, t55, t134, t590 + t40 * qJD(2) + (t398 * t451 - t705) * qJD(3) + t52 * qJD(5), t589 + t41 * qJD(2) + (t401 * t451 + t706) * qJD(3) + t50 * qJD(5), -t600 + t10 * qJD(2) + (t605 - t623 + (-t572 + t573) * t318) * qJD(3) + t665, t621 + t1 * qJD(2) + (t107 * t361 - t360 * t77 + t372 * t700) * qJD(3) + t32 * qJD(4) + t6 * qJD(5) + t23 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t528, qJD(2) * t126 + qJD(3) * t158 + t611, 0, 0, 0, 0, 0, t183 + t546, qJD(5) * t198 + t545, 0, qJD(2) * t30 + qJD(3) * t32 + qJD(5) * t20 + qJD(6) * t131 + t617; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t664, -t431 - t519, t195 * t511 + t398 * t448, t194 * t511 + t401 * t448, t199, qJD(2) * t48 + qJD(3) * t52 + qJD(4) * t194 - qJD(5) * t109 + t612, qJD(2) * t46 + qJD(3) * t50 + qJD(4) * t198 + qJD(5) * t108 + t613, pkin(5) * t493 + t447 * t511 - t618, qJD(2) * t4 + qJD(3) * t6 + qJD(4) * t20 - t101 * t628 + t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t520, qJD(2) * t21 + qJD(3) * t23 + qJD(4) * t131 - t614; 0, 0, 0, -t489, -t512, 0, 0, 0, t507, t506, -t328, -t518, 0, 0, 0, -t515, -t514, -qJD(3) * t60 - t713, -qJD(3) * t34 - qJD(4) * t125 - t556, t111, t127, t106, t105, -t134, qJD(3) * t39 + qJD(5) * t47 - t494 - t592, qJD(3) * t42 + qJD(5) * t45 + t179 - t591, qJD(3) * t9 + t601 + t662, qJD(3) * t2 + qJD(4) * t31 - qJD(5) * t3 + qJD(6) * t22 - t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t634, -pkin(2) * t472, 0, t204 * qJD(3), t383, t375, 0, 0, 0, t348 * t531 - t358 * t532, t348 * t530 + t340, t549, qJD(3) * t121 + qJD(5) * t118 + qJD(6) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t511 * t634 (-t473 - t472) * pkin(2), -t554 (-t358 * t620 + t359 * t397) * t629 - t450, t383, t375, 0, 0, 0, t247 * qJD(5) - t358 * t469 + t568, qJD(5) * t248 + t340 - t435, -t456 + t549 (t306 * t359 + t358 * t372) * qJD(3) + t89 * qJD(5) + t129 * qJD(6) + t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t527, 0, 0, 0, 0, 0, -t684, t523, -t521, t213 + t616; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t156, t219, t176, t175, -t513, qJD(3) * t247 - t349 * t530 - t437, qJD(3) * t248 + t349 * t531 - t436, t682, qJD(3) * t89 - t332 * t628 + t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t673, qJD(3) * t129 + t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t328, -t518, 0, 0, 0, t490, t491, qJD(2) * t60 - t713, qJD(2) * t34 + qJD(4) * t157 + t555, t111, t127, t106, t105, -t134, -qJD(2) * t39 + qJD(5) * t51 - t494 - t590, -qJD(2) * t42 + qJD(5) * t49 + t179 - t589, -qJD(2) * t9 + t600 + t662, -qJD(2) * t2 + qJD(4) * t33 - qJD(5) * t5 + qJD(6) * t24 - t621; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t634, pkin(2) * t473, t554, t450, t383, t375, 0, 0, 0, -qJD(5) * t245 + t358 * t536 - t568, -qJD(5) * t246 + t435, t374 + t456, -qJD(5) * t88 - qJD(6) * t128 - t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, t375, 0, 0, 0, t386 * t531, t386 * t530, t374, qJD(5) * t189 + qJD(6) * t306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t525, 0, 0, 0, 0, 0, -t684, t523, -t521, t275 + t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t156, t219, t176, t175, -t513, -t385 * t530 - t419, t385 * t531 - t418, t682, -t361 * t628 + t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t673, t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t528, qJD(2) * t125 - qJD(3) * t157 - t611, 0, 0, 0, 0, 0, -t182 - t546 + t548, qJD(5) * t197 - t511 * t687 - t545, t511 * t201, -qJD(2) * t31 - qJD(3) * t33 - qJD(5) * t19 - qJD(6) * t130 - t617; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, 0, 0, 0, 0, 0, t684, -t523, t521, t213 - t616; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t525, 0, 0, 0, 0, 0, t684, -t523, t521, t275 - t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t522 - t530, 0, -t393 - t423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t664, t459 * t677 + t519, -t196 * t511 - t542 * t689, t193 * t511 - t318 * t684, t199, -qJD(2) * t47 - qJD(3) * t51 + qJD(4) * t193 - t612, -qJD(2) * t45 - qJD(3) * t49 - qJD(4) * t197 - t613, -t432 * t511 + t618, qJD(2) * t3 + qJD(3) * t5 + qJD(4) * t19 - qJD(6) * t509 - t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, -t219, -t185, t184, t513, qJD(3) * t245 + t437, qJD(3) * t246 + t436, -t666, qJD(3) * t88 - t425 - t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, -t219, -t185, t184, t513, t419, t418, -t666, -t412 - t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t184, -t522, 0, t423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t520, pkin(5) * t492 - qJD(2) * t22 - qJD(3) * t24 + qJD(4) * t130 + t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t673, qJD(3) * t128 + t393 - t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t673, t393 - t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t11;
