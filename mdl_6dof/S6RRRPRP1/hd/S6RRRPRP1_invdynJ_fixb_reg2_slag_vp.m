% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:33:09
% EndTime: 2019-03-09 16:33:25
% DurationCPUTime: 8.78s
% Computational Cost: add. (18785->694), mult. (44963->827), div. (0->0), fcn. (33804->14), ass. (0->364)
t294 = sin(qJ(5));
t298 = cos(qJ(5));
t295 = sin(qJ(3));
t296 = sin(qJ(2));
t405 = qJD(1) * t296;
t299 = cos(qJ(3));
t300 = cos(qJ(2));
t414 = t299 * t300;
t203 = -qJD(1) * t414 + t295 * t405;
t222 = t295 * t300 + t296 * t299;
t205 = t222 * qJD(1);
t292 = sin(pkin(10));
t450 = cos(pkin(10));
t327 = -t292 * t203 + t205 * t450;
t396 = qJD(2) + qJD(3);
t144 = t294 * t327 - t298 * t396;
t156 = t450 * t203 + t205 * t292;
t286 = t300 * pkin(2);
t278 = t286 + pkin(1);
t245 = qJD(1) * t278;
t173 = t203 * pkin(3) + qJD(4) - t245;
t102 = pkin(4) * t156 - pkin(9) * t327 + t173;
t486 = pkin(8) + pkin(7);
t247 = t486 * t300;
t230 = qJD(1) * t247;
t206 = t295 * t230;
t246 = t486 * t296;
t228 = qJD(1) * t246;
t463 = qJD(2) * pkin(2);
t213 = -t228 + t463;
t160 = t299 * t213 - t206;
t199 = t205 * qJ(4);
t140 = t160 - t199;
t131 = pkin(3) * t396 + t140;
t210 = t299 * t230;
t161 = t213 * t295 + t210;
t448 = qJ(4) * t203;
t141 = t161 - t448;
t373 = t450 * t141;
t91 = t292 * t131 + t373;
t89 = pkin(9) * t396 + t91;
t52 = t102 * t294 + t298 * t89;
t42 = -qJ(6) * t144 + t52;
t503 = qJD(5) + t156;
t513 = t503 * t42;
t51 = t298 * t102 - t294 * t89;
t512 = t503 * t51;
t511 = t503 * t52;
t221 = t295 * t296 - t414;
t184 = pkin(3) * t221 - t278;
t291 = qJ(2) + qJ(3);
t283 = sin(t291);
t284 = cos(t291);
t297 = sin(qJ(1));
t301 = cos(qJ(1));
t350 = g(1) * t301 + g(2) * t297;
t510 = -g(3) * t284 + t283 * t350;
t509 = qJDD(1) * t278;
t508 = t156 * t327;
t281 = pkin(10) + t291;
t269 = sin(t281);
t423 = t269 * t301;
t424 = t269 * t297;
t494 = g(1) * t423 + g(2) * t424;
t324 = t221 * qJDD(1);
t496 = t295 * t396;
t346 = t296 * t496;
t403 = qJD(3) * t299;
t383 = t300 * t403;
t397 = t300 * qJDD(1);
t399 = qJD(1) * qJD(2);
t377 = t300 * t399;
t398 = t296 * qJDD(1);
t505 = -t377 - t398;
t358 = -qJD(1) * t383 - t295 * t397 + t299 * t505;
t142 = qJD(1) * t346 + t358;
t497 = t205 * t396;
t491 = -t450 * t142 - t292 * t497;
t306 = t292 * t324 - t491;
t506 = -qJD(5) * t396 + t306;
t364 = t503 * t298;
t307 = -t497 - t324;
t369 = t292 * t142 + t450 * t307;
t97 = qJDD(5) - t369;
t504 = -t294 * t97 - t364 * t503;
t394 = qJDD(2) + qJDD(3);
t172 = qJDD(2) * pkin(2) + t486 * t505;
t378 = t296 * t399;
t176 = t486 * (-t378 + t397);
t368 = t299 * t172 - t295 * t176;
t113 = -qJD(3) * t161 + t368;
t71 = pkin(3) * t394 + t142 * qJ(4) - t205 * qJD(4) + t113;
t404 = qJD(3) * t295;
t112 = t295 * t172 + t299 * t176 + t213 * t403 - t230 * t404;
t77 = qJ(4) * t307 - t203 * qJD(4) + t112;
t467 = t292 * t77 - t450 * t71;
t23 = -pkin(4) * t394 + t467;
t401 = qJD(5) * t298;
t76 = -t294 * t506 - t298 * t394 + t327 * t401;
t17 = t76 * pkin(5) + qJDD(6) + t23;
t370 = t144 * pkin(5) + qJD(6);
t134 = t292 * t141;
t90 = t131 * t450 - t134;
t88 = -pkin(4) * t396 - t90;
t72 = t370 + t88;
t502 = t17 * t294 + t72 * t401;
t501 = t23 * t294 + t88 * t401;
t420 = t292 * t295;
t466 = pkin(2) * qJD(3);
t196 = (t299 * t450 - t420) * t466;
t168 = -t299 * t228 - t206;
t148 = -t199 + t168;
t167 = t228 * t295 - t210;
t331 = t167 + t448;
t108 = t148 * t450 + t292 * t331;
t484 = pkin(3) * t205;
t114 = pkin(4) * t327 + pkin(9) * t156 + t484;
t279 = pkin(2) * t405;
t109 = t114 + t279;
t60 = t298 * t108 + t294 * t109;
t500 = -t298 * t196 + t60;
t498 = t156 * t396;
t178 = -t295 * t246 + t299 * t247;
t154 = -qJ(4) * t221 + t178;
t177 = -t299 * t246 - t247 * t295;
t330 = -qJ(4) * t222 + t177;
t121 = t154 * t450 + t292 * t330;
t118 = t298 * t121;
t163 = t221 * t450 + t222 * t292;
t164 = -t292 * t221 + t222 * t450;
t119 = pkin(4) * t163 - pkin(9) * t164 + t184;
t62 = t294 * t119 + t118;
t371 = t450 * t295;
t410 = -t148 * t292 + t450 * t331 + (t292 * t299 + t371) * t466;
t495 = t196 - t108;
t270 = cos(t281);
t470 = t298 * pkin(5);
t276 = pkin(4) + t470;
t293 = -qJ(6) - pkin(9);
t339 = -t269 * t293 + t270 * t276;
t353 = t270 * pkin(4) + t269 * pkin(9);
t431 = t156 * t294;
t493 = -qJ(6) * t431 + t298 * qJD(6);
t492 = g(1) * t297 - g(2) * t301;
t490 = t327 * t52 + t501;
t415 = t298 * t301;
t419 = t294 * t297;
t188 = t270 * t419 + t415;
t417 = t297 * t298;
t418 = t294 * t301;
t190 = -t270 * t418 + t417;
t472 = g(3) * t294;
t489 = -g(1) * t190 + g(2) * t188 + t269 * t472;
t430 = t156 * t298;
t488 = t327 * t42 + t72 * t430 + t502;
t146 = t294 * t396 + t298 * t327;
t487 = t146 ^ 2;
t485 = pkin(5) * t97;
t482 = pkin(3) * t283;
t481 = pkin(3) * t292;
t274 = pkin(3) * t284;
t408 = t274 + t286;
t227 = pkin(1) + t408;
t212 = t301 * t227;
t476 = g(2) * t212;
t257 = g(3) * t269;
t474 = g(3) * t270;
t471 = g(3) * t300;
t26 = t292 * t71 + t450 * t77;
t24 = pkin(9) * t394 + t26;
t267 = pkin(2) * t378;
t395 = qJDD(4) + t267;
t447 = qJDD(1) * pkin(1);
t40 = -pkin(2) * t397 - pkin(3) * t307 - pkin(4) * t369 + pkin(9) * t306 + t395 - t447;
t402 = qJD(5) * t294;
t5 = t102 * t401 + t298 * t24 + t294 * t40 - t89 * t402;
t4 = t5 * t298;
t6 = -qJD(5) * t52 - t294 * t24 + t298 * t40;
t469 = t6 * t294;
t41 = -qJ(6) * t146 + t51;
t33 = pkin(5) * t503 + t41;
t468 = -t41 + t33;
t75 = -t294 * t394 + t298 * t506 + t327 * t402;
t465 = qJ(6) * t75;
t464 = qJ(6) * t76;
t460 = t156 * t88;
t458 = t75 * t294;
t457 = t76 * t298;
t277 = pkin(2) * t299 + pkin(3);
t198 = pkin(2) * t371 + t292 * t277;
t193 = pkin(9) + t198;
t413 = -qJ(6) - t193;
t367 = qJD(5) * t413;
t456 = t294 * t367 + t493 - t500;
t285 = t298 * qJ(6);
t348 = pkin(5) * t327 + t156 * t285;
t59 = -t108 * t294 + t298 * t109;
t455 = (-qJD(6) - t196) * t294 + t298 * t367 - t348 - t59;
t454 = -t144 * t401 - t294 * t76;
t151 = pkin(5) * t431;
t392 = pkin(5) * t402;
t453 = t392 + t151 + t410;
t271 = pkin(9) + t481;
t412 = -qJ(6) - t271;
t366 = qJD(5) * t412;
t99 = t140 * t450 - t134;
t58 = t294 * t114 + t298 * t99;
t452 = t294 * t366 + t493 - t58;
t57 = t298 * t114 - t294 * t99;
t451 = -t294 * qJD(6) + t298 * t366 - t348 - t57;
t449 = pkin(7) * qJDD(1);
t169 = -qJD(2) * t414 + t346 - t383;
t170 = t396 * t222;
t127 = -t169 * t450 - t292 * t170;
t446 = t127 * t294;
t445 = t127 * t298;
t444 = t144 * t503;
t443 = t144 * t327;
t442 = t144 * t156;
t441 = t144 * t294;
t440 = t146 * t144;
t439 = t146 * t503;
t438 = t146 * t327;
t437 = t146 * t294;
t436 = t146 * t298;
t435 = t503 * t327;
t434 = t327 ^ 2;
t432 = t156 ^ 2;
t428 = t164 * t294;
t427 = t164 * t298;
t426 = t205 * t203;
t422 = t270 * t297;
t421 = t270 * t301;
t411 = t161 + t167;
t409 = t494 * t298;
t289 = t296 ^ 2;
t290 = t300 ^ 2;
t407 = t289 - t290;
t406 = t289 + t290;
t385 = qJD(2) * t486;
t229 = t296 * t385;
t231 = t300 * t385;
t129 = -t299 * t229 - t295 * t231 - t246 * t403 - t247 * t404;
t106 = -qJ(4) * t170 - qJD(4) * t221 + t129;
t130 = -qJD(3) * t178 + t295 * t229 - t299 * t231;
t310 = qJ(4) * t169 - qJD(4) * t222 + t130;
t56 = t106 * t450 + t292 * t310;
t126 = -t169 * t292 + t170 * t450;
t280 = t296 * t463;
t159 = pkin(3) * t170 + t280;
t69 = pkin(4) * t126 - pkin(9) * t127 + t159;
t393 = t119 * t401 + t294 * t69 + t298 * t56;
t304 = qJD(1) ^ 2;
t389 = t296 * t304 * t300;
t65 = t72 * t402;
t84 = t88 * t402;
t388 = g(1) * t421 + g(2) * t422 + t257;
t387 = t274 + t353;
t384 = t450 * pkin(3);
t382 = qJD(5) * t503 * t271;
t381 = t164 * t401;
t380 = -t17 - t474;
t379 = -t23 - t474;
t288 = -qJ(4) - t486;
t376 = pkin(5) * t294 - t288;
t374 = -t294 * t56 + t298 * t69;
t55 = t106 * t292 - t450 * t310;
t61 = t298 * t119 - t121 * t294;
t98 = t140 * t292 + t373;
t120 = t154 * t292 - t450 * t330;
t365 = t503 * t294;
t363 = t327 * t396;
t360 = t299 * t396;
t357 = t296 * t377;
t79 = -t151 + t98;
t356 = -t79 + t392;
t355 = -g(1) * t424 + g(2) * t423;
t272 = -t384 - pkin(4);
t354 = -pkin(4) * t269 - t482;
t352 = -g(1) * t188 - g(2) * t190;
t189 = -t270 * t417 + t418;
t191 = t270 * t415 + t419;
t351 = -g(1) * t189 - g(2) * t191;
t347 = t274 + t339;
t345 = -t156 * t90 + t327 * t91;
t344 = -t193 * t97 + t460;
t343 = -t271 * t97 + t460;
t342 = -t294 * t42 - t298 * t33;
t341 = -t294 * t52 - t298 * t51;
t340 = t294 * t51 - t298 * t52;
t197 = -pkin(2) * t420 + t277 * t450;
t338 = -t269 * t276 - t270 * t293;
t337 = -qJ(6) * t127 - qJD(6) * t164;
t336 = -t327 * t51 + t409 + t84;
t335 = -t51 * t430 - t52 * t431 - t388 + t4;
t334 = t298 * t97 + (-t402 - t431) * t503;
t192 = -pkin(4) - t197;
t333 = t350 * t269;
t332 = -0.2e1 * pkin(1) * t399 - pkin(7) * qJDD(2);
t329 = t381 + t446;
t328 = -t164 * t402 + t445;
t323 = t156 * t173 - t26 + t388;
t321 = -t173 * t327 - t467 - t474 + t494;
t238 = t270 * t472;
t320 = -t294 * t333 + t238;
t319 = g(1) * t191 - g(2) * t189 + t298 * t257 - t5;
t303 = qJD(2) ^ 2;
t318 = -pkin(7) * t303 + 0.2e1 * t447 + t492;
t317 = pkin(1) * t304 + t350 - t449;
t316 = g(3) * t283 - t245 * t203 + t284 * t350 - t112;
t315 = t245 * t205 + t368 + t510;
t314 = qJD(5) * t341 + t4 - t469;
t313 = t298 * t380 - t327 * t33 + t431 * t72 + t409 + t65;
t1 = -qJD(6) * t146 + t465 + t485 + t6;
t3 = -qJD(6) * t144 - t464 + t5;
t312 = qJD(5) * t342 - t1 * t294 + t3 * t298 - t33 * t430 - t42 * t431 - t388;
t311 = t6 + t489;
t123 = pkin(3) * t497 + qJDD(1) * t184 + t395;
t235 = pkin(9) * t421;
t234 = pkin(9) * t422;
t233 = t272 - t470;
t232 = -pkin(2) * t296 - t482;
t217 = t301 * t232;
t216 = t297 * t232;
t215 = t271 * t298 + t285;
t214 = t412 * t294;
t200 = t267 - t509;
t181 = t192 - t470;
t180 = t279 + t484;
t175 = t193 * t298 + t285;
t174 = t413 * t294;
t149 = -t203 ^ 2 + t205 ^ 2;
t143 = t144 ^ 2;
t125 = t307 + t497;
t124 = t203 * t396 - t405 * t496 - t358;
t87 = pkin(5) * t428 + t120;
t82 = -t143 + t487;
t81 = -t306 + t498;
t80 = t363 + t369;
t78 = -t432 + t434;
t53 = -qJ(6) * t428 + t62;
t50 = t126 * t503 + t163 * t97;
t49 = pkin(5) * t163 - t164 * t285 + t61;
t46 = -t76 + t439;
t45 = -t75 + t444;
t35 = t144 * t365 - t457;
t34 = t146 * t364 - t458;
t32 = pkin(5) * t329 + t55;
t30 = -t438 + t504;
t29 = -t438 - t504;
t28 = t334 + t443;
t27 = t334 - t443;
t19 = t144 * t329 + t428 * t76;
t18 = t146 * t328 - t427 * t75;
t15 = -qJD(5) * t62 + t374;
t14 = -t121 * t402 + t393;
t13 = (-t75 - t442) * t298 - t503 * t437 + t454;
t12 = (t75 - t442) * t298 + t146 * t365 + t454;
t11 = -t126 * t144 - t163 * t76 - t329 * t503 - t428 * t97;
t10 = t126 * t146 - t163 * t75 + t328 * t503 + t427 * t97;
t9 = -qJ(6) * t381 + (-qJD(5) * t121 + t337) * t294 + t393;
t8 = pkin(5) * t126 + t337 * t298 + (-t118 + (qJ(6) * t164 - t119) * t294) * qJD(5) + t374;
t7 = (-t144 * t298 - t437) * t127 + (t458 - t457 + (-t436 + t441) * qJD(5)) * t164;
t2 = [0, 0, 0, 0, 0, qJDD(1), t492, t350, 0, 0, qJDD(1) * t289 + 0.2e1 * t357, 0.2e1 * t296 * t397 - 0.2e1 * t399 * t407, qJDD(2) * t296 + t300 * t303, qJDD(1) * t290 - 0.2e1 * t357, qJDD(2) * t300 - t296 * t303, 0, t296 * t332 + t300 * t318, -t296 * t318 + t300 * t332, 0.2e1 * t406 * t449 - t350, -g(1) * (-pkin(1) * t297 + pkin(7) * t301) - g(2) * (pkin(1) * t301 + pkin(7) * t297) + (pkin(7) ^ 2 * t406 + pkin(1) ^ 2) * qJDD(1), -t142 * t222 - t169 * t205, t142 * t221 + t169 * t203 - t205 * t170 + t222 * t307, -t169 * t396 + t222 * t394, t203 * t170 - t221 * t307, -t170 * t396 - t221 * t394, 0, t130 * t396 + t177 * t394 + t203 * t280 + t284 * t492 + (t200 - t509) * t221 - 0.2e1 * t245 * t170, -t129 * t396 + t278 * t142 + t245 * t169 - t178 * t394 + t200 * t222 + t205 * t280 - t283 * t492, -t112 * t221 - t113 * t222 - t129 * t203 - t130 * t205 + t177 * t142 + t160 * t169 - t161 * t170 + t178 * t307 - t350, t112 * t178 + t161 * t129 + t113 * t177 + t160 * t130 - t200 * t278 - t245 * t280 - g(1) * (-t278 * t297 + t301 * t486) - g(2) * (t278 * t301 + t297 * t486) t327 * t127 + (t292 * (-t295 * t398 + t299 * t397) + t491) * t164, -t126 * t327 - t127 * t156 + t163 * t306 + t164 * t369, t127 * t396 + t164 * t394, t126 * t156 - t163 * t369, -t126 * t396 - t163 * t394, 0, -t120 * t394 + t123 * t163 + t173 * t126 + t159 * t156 - t184 * t369 + t270 * t492 - t396 * t55, -t121 * t394 + t123 * t164 + t173 * t127 + t159 * t327 - t184 * t306 - t396 * t56 + t355, -t120 * t306 + t121 * t369 - t91 * t126 - t90 * t127 - t56 * t156 - t26 * t163 + t164 * t467 + t327 * t55 - t350, t26 * t121 + t91 * t56 + t467 * t120 - t90 * t55 + t123 * t184 + t173 * t159 - g(1) * (-t227 * t297 - t301 * t288) - g(2) * (-t297 * t288 + t212) t18, t7, t10, t19, t11, t50, t120 * t76 + t126 * t51 + t144 * t55 + t15 * t503 + t163 * t6 + t164 * t501 + t88 * t446 + t61 * t97 + t351, t88 * t445 - t120 * t75 - t126 * t52 - t14 * t503 + t146 * t55 - t163 * t5 - t62 * t97 + (t23 * t298 - t84) * t164 + t352, -t14 * t144 - t146 * t15 + t61 * t75 - t62 * t76 + t341 * t127 + (qJD(5) * t340 - t294 * t5 - t298 * t6) * t164 - t355, -t476 + t23 * t120 + t52 * t14 + t51 * t15 + t5 * t62 + t88 * t55 + t6 * t61 + (g(1) * t288 - g(2) * t353) * t301 + (-g(1) * (-t227 - t353) + g(2) * t288) * t297, t18, t7, t10, t19, t11, t50, t1 * t163 + t126 * t33 + t144 * t32 + t164 * t502 + t72 * t446 + t49 * t97 + t503 * t8 + t76 * t87 + t351, t72 * t445 - t126 * t42 + t146 * t32 - t503 * t9 - t163 * t3 - t53 * t97 - t75 * t87 + (t17 * t298 - t65) * t164 + t352, -t144 * t9 - t146 * t8 + t49 * t75 - t53 * t76 + t342 * t127 + (-t1 * t298 - t294 * t3 + (t294 * t33 - t298 * t42) * qJD(5)) * t164 - t355, -t476 + t1 * t49 + t17 * t87 + t3 * t53 + t72 * t32 + t33 * t8 + t42 * t9 + (-g(1) * t376 - g(2) * t339) * t301 + (-g(1) * (-t227 - t339) - g(2) * t376) * t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, t407 * t304, t398, t389, t397, qJDD(2), t296 * t317 - t471, g(3) * t296 + t300 * t317, 0, 0, t426, t149, t124, -t426, t125, t394, -t167 * qJD(2) - t411 * qJD(3) + (-qJD(3) * t496 - t203 * t405 + t299 * t394) * pkin(2) + t315, t168 * t396 + (-qJD(3) * t360 - t205 * t405 - t295 * t394) * pkin(2) + t316, t411 * t205 + (-t160 + t168) * t203 + ((-qJD(3) * t203 + t142) * t299 + (t205 * qJD(3) - t324 + (-t296 * t360 - t300 * t496) * qJD(1)) * t295) * pkin(2), -t160 * t167 - t161 * t168 + (-t471 + t112 * t295 + t113 * t299 + (-t160 * t295 + t161 * t299) * qJD(3) + (qJD(1) * t245 + t350) * t296) * pkin(2), t508, t78, t81, -t508, t80, t394, -t180 * t156 + t197 * t394 - t396 * t410 + t321, -t180 * t327 - t198 * t394 - t396 * t495 + t323, -t156 * t495 + t197 * t306 + t198 * t369 + t327 * t410 + t345, -g(3) * t408 - t173 * t180 - t197 * t467 + t26 * t198 - t350 * t232 - t410 * t90 + t495 * t91, t34, t13, t29, t35, t28, -t435, t192 * t76 + t379 * t298 + t344 * t294 + t410 * t144 + (-t193 * t401 - t294 * t196 - t59) * t503 + t336, -t192 * t75 + t344 * t298 + t410 * t146 + (t193 * t402 + t500) * t503 + t320 + t490, t144 * t60 + t146 * t59 + (-t144 * t196 - t193 * t76 + (t146 * t193 - t51) * qJD(5)) * t298 + (t146 * t196 - t193 * t75 - t6 + (t144 * t193 - t52) * qJD(5)) * t294 + t335, t23 * t192 - t52 * t60 - t51 * t59 - g(1) * (-pkin(4) * t423 + t217 + t235) - g(2) * (-pkin(4) * t424 + t216 + t234) - g(3) * (t286 + t387) + t410 * t88 - t340 * t196 + t314 * t193, t34, t13, t29, t35, t28, -t435, t144 * t453 + t174 * t97 + t181 * t76 + t455 * t503 + t313, t146 * t453 - t175 * t97 - t181 * t75 - t456 * t503 + t320 + t488, -t144 * t456 - t146 * t455 + t174 * t75 - t175 * t76 + t312, t3 * t175 + t1 * t174 + t17 * t181 - g(1) * (t301 * t338 + t217) - g(2) * (t297 * t338 + t216) - g(3) * (t286 + t347) + t453 * t72 + t456 * t42 + t455 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t426, t149, t124, -t426, t125, t394, t161 * qJD(2) + t315, t160 * t396 + t316, 0, 0, t508, t78, t81, -t508, t80, t394, t98 * t396 + (-t205 * t156 + t394 * t450) * pkin(3) + t321, t99 * t396 + (-t205 * t327 - t292 * t394) * pkin(3) + t323, t99 * t156 + t306 * t384 - t327 * t98 + t369 * t481 + t345, t90 * t98 - t91 * t99 + (-t173 * t205 + t26 * t292 - t450 * t467 + t510) * pkin(3), t34, t13, t29, t35, t28, -t435, -t144 * t98 - t503 * t57 + t272 * t76 + t343 * t294 + (t379 - t382) * t298 + t336, -t146 * t98 + t503 * t58 - t272 * t75 + t238 + t343 * t298 + (-t333 + t382) * t294 + t490, t144 * t58 + t146 * t57 - t469 + (-t457 - t458) * t271 + ((t436 + t441) * t271 + t341) * qJD(5) + t335, t23 * t272 - t52 * t58 - t51 * t57 - t88 * t98 - g(1) * (t301 * t354 + t235) - g(2) * (t297 * t354 + t234) - g(3) * t387 + t314 * t271, t34, t13, t29, t35, t28, -t435, t144 * t356 + t214 * t97 + t233 * t76 + t451 * t503 + t313, -t146 * t79 - t215 * t97 - t233 * t75 + t238 - t452 * t503 + (pkin(5) * qJD(5) * t146 - t333) * t294 + t488, -t144 * t452 - t146 * t451 + t214 * t75 - t215 * t76 + t312, -g(3) * t347 + t1 * t214 + t17 * t233 + t3 * t215 + t33 * t451 + t356 * t72 + t42 * t452 + t350 * (-t338 + t482); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t363 - t369, -t306 - t498, -t432 - t434, t156 * t91 + t327 * t90 + t123 - t492, 0, 0, 0, 0, 0, 0, t27, t30, t12, -t327 * t88 + (t6 + t511) * t298 + (t5 - t512) * t294 - t492, 0, 0, 0, 0, 0, 0, t27, t30, t12, -t327 * t72 + (t1 + t513) * t298 + (-t33 * t503 + t3) * t294 - t492; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t440, t82, t45, -t440, t46, t97, -t146 * t88 + t311 + t511, t144 * t88 + t319 + t512, 0, 0, t440, t82, t45, -t440, t46, t97, 0.2e1 * t485 + t465 + t513 + (-t370 - t72) * t146 + t311, -pkin(5) * t487 + t464 + t503 * t41 + (qJD(6) + t72) * t144 + t319, t75 * pkin(5) - t144 * t468, t468 * t42 + (-t72 * t146 + t1 + t489) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 + t439, -t75 - t444, -t143 - t487, t42 * t144 + t33 * t146 - t380 - t494;];
tau_reg  = t2;
