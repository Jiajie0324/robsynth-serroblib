% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP1_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:33:01
% EndTime: 2019-03-09 16:33:14
% DurationCPUTime: 4.76s
% Computational Cost: add. (7460->318), mult. (16420->526), div. (0->0), fcn. (15962->8), ass. (0->174)
t224 = qJD(2) + qJD(3);
t120 = sin(pkin(10));
t121 = cos(pkin(10));
t123 = sin(qJ(2));
t125 = cos(qJ(2));
t211 = sin(qJ(3));
t173 = qJD(3) * t211;
t142 = qJD(2) * t211 + t173;
t215 = -pkin(8) - pkin(7);
t221 = t215 * t211;
t146 = qJD(3) * t221;
t212 = cos(qJ(3));
t132 = -qJ(4) * t142 + qJD(4) * t212 + t146;
t171 = t212 * qJD(3);
t219 = -qJD(2) * t212 - t171;
t136 = qJ(4) * t219 - qJD(4) * t211;
t143 = -t123 * t212 - t125 * t211;
t62 = t142 * t123 + t125 * t219;
t147 = t62 * qJ(4) + qJD(4) * t143;
t153 = qJD(2) * t215;
t189 = qJD(2) * t125;
t220 = t215 * t212;
t97 = t123 * t220;
t185 = t189 * t221 + t224 * t97;
t127 = (t121 * t136 + t120 * (-t153 * t211 - t146)) * t123 + (t121 * t132 + t120 * (qJD(3) * t220 + t153 * t212)) * t125 + t120 * t147 + t121 * t185;
t144 = t123 * t211 - t125 * t212;
t60 = -t120 * t143 + t121 * t144;
t61 = -t120 * t144 - t121 * t143;
t111 = -t125 * pkin(2) - pkin(1);
t79 = pkin(3) * t144 + t111;
t135 = t60 * pkin(4) - t61 * pkin(9) + t79;
t223 = -qJD(5) * t135 - t127;
t222 = -t123 * t221 + t125 * t220;
t122 = sin(qJ(5));
t118 = t122 ^ 2;
t124 = cos(qJ(5));
t119 = t124 ^ 2;
t192 = t118 - t119;
t218 = t192 * qJD(5);
t68 = t125 * t221 + t97;
t140 = qJ(4) * t143 + t68;
t54 = -qJ(4) * t144 - t222;
t43 = t120 * t140 + t121 * t54;
t17 = -t122 * t43 + t124 * t135;
t18 = t122 * t135 + t124 * t43;
t148 = t122 * t17 - t124 * t18;
t115 = qJD(5) * t122;
t139 = t143 * qJD(3);
t133 = qJD(2) * t143 + t139;
t45 = -t120 * t62 - t121 * t133;
t46 = t120 * t133 - t121 * t62;
t207 = t123 * pkin(2);
t56 = -pkin(3) * t139 + (-pkin(3) * t143 + t207) * qJD(2);
t131 = t45 * pkin(4) - t46 * pkin(9) + t56;
t186 = -t122 * t131 + t124 * t223;
t5 = t115 * t43 + t186;
t116 = qJD(5) * t124;
t6 = -t43 * t116 + t122 * t223 + t124 * t131;
t217 = qJD(5) * t148 + t122 * t5 - t124 * t6;
t117 = t124 * qJ(6);
t11 = pkin(5) * t60 - t117 * t61 + t17;
t199 = t122 * t61;
t12 = -qJ(6) * t199 + t18;
t114 = t124 * qJD(6);
t180 = t61 * t115;
t126 = qJ(6) * t180 - t114 * t61 - t117 * t46 + t6;
t214 = t45 * pkin(5);
t2 = t126 + t214;
t179 = t61 * t116;
t4 = qJ(6) * t179 + (qJ(6) * t46 + qJD(5) * t43 + qJD(6) * t61) * t122 + t186;
t216 = t122 * t4 - t124 * t2 + (t11 * t122 - t12 * t124) * qJD(5);
t42 = t120 * t54 - t121 * t140;
t28 = pkin(5) * t199 + t42;
t27 = t28 * t116;
t48 = t224 * t222;
t15 = -t121 * (t147 + t48) + (t123 * t136 + t125 * t132 + t185) * t120;
t200 = t122 * t46;
t33 = t179 + t200;
t8 = pkin(5) * t33 + t15;
t213 = t122 * t8 + t27;
t210 = pkin(3) * t120;
t209 = pkin(3) * t121;
t208 = pkin(5) * t124;
t206 = t42 * t15;
t178 = t211 * t121;
t82 = (t120 * t212 + t178) * qJD(3) * pkin(2);
t205 = t42 * t82;
t204 = t61 * t46;
t38 = t42 * t116;
t203 = t122 * t15 + t38;
t113 = pkin(5) * t115;
t71 = t113 + t82;
t184 = t212 * pkin(2);
t110 = t184 + pkin(3);
t183 = t211 * pkin(2);
t84 = t110 * t121 - t120 * t183;
t80 = -pkin(4) - t84;
t74 = t80 - t208;
t202 = t116 * t74 + t122 * t71;
t201 = t116 * t80 + t122 * t82;
t109 = -pkin(4) - t209;
t99 = t109 - t208;
t198 = t124 * t99;
t85 = pkin(2) * t178 + t110 * t120;
t81 = pkin(9) + t85;
t197 = qJ(6) + t81;
t188 = qJD(5) * t118;
t196 = pkin(5) * t188 + t116 * t99;
t195 = qJD(5) * t61;
t194 = t122 * t124;
t108 = pkin(9) + t210;
t193 = qJ(6) + t108;
t191 = t118 + t119;
t190 = qJD(2) * t123;
t35 = 0.2e1 * t60 * t45;
t187 = -0.2e1 * pkin(1) * qJD(2);
t182 = pkin(2) * t190;
t181 = pkin(5) * t116;
t26 = t28 * t115;
t37 = t42 * t115;
t63 = t74 * t115;
t89 = t99 * t115;
t177 = t109 * t115;
t176 = t109 * t116;
t175 = t122 * t116;
t174 = t123 * t189;
t170 = t115 * t80 - t124 * t82;
t167 = pkin(2) * t173;
t168 = pkin(2) * t171;
t83 = -t120 * t167 + t121 * t168;
t53 = t191 * t83;
t169 = -0.4e1 * t61 * t194;
t58 = t61 ^ 2;
t166 = t58 * t175;
t161 = t28 * t46 + t61 * t8;
t158 = t15 * t61 + t42 * t46;
t157 = t45 * t61 + t46 * t60;
t156 = t46 * t74 + t61 * t71;
t155 = t60 * t81 - t61 * t80;
t154 = -t60 * t83 + t61 * t82;
t152 = -t108 * t45 + t109 * t46;
t151 = t108 * t60 - t109 * t61;
t149 = -t122 * t18 - t124 * t17;
t31 = t116 * t60 + t122 * t45;
t145 = -t124 * t46 + t180;
t141 = t111 * t143;
t138 = -t45 * t81 + t46 * t80 + t154;
t1 = qJD(5) * t149 - t122 * t6 - t124 * t5;
t103 = -0.2e1 * t175;
t102 = 0.2e1 * t175;
t94 = -0.2e1 * t218;
t92 = t108 * t124 + t117;
t91 = t193 * t122;
t77 = t124 * t83;
t76 = -qJD(6) * t122 - t116 * t193;
t75 = t115 * t193 - t114;
t70 = t75 * t124;
t66 = t124 * t81 + t117;
t65 = t197 * t122;
t51 = (-qJD(6) - t83) * t122 - t197 * t116;
t50 = t115 * t197 - t114 - t77;
t49 = t50 * t124;
t47 = -t125 * t146 - t185;
t29 = -t115 * t60 + t124 * t45;
t25 = t191 * t46;
t24 = 0.2e1 * t119 * t204 - 0.2e1 * t166;
t23 = 0.2e1 * t118 * t204 + 0.2e1 * t166;
t22 = -t119 * t195 + t188 * t61 - t194 * t46;
t19 = qJD(5) * t169 - t192 * t46;
t16 = t169 * t46 + 0.2e1 * t218 * t58;
t10 = -0.2e1 * t122 * t157 - 0.2e1 * t179 * t60;
t9 = 0.2e1 * t124 * t157 - 0.2e1 * t180 * t60;
t3 = t4 * t124;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t174, 0.2e1 * (-t123 ^ 2 + t125 ^ 2) * qJD(2), 0, -0.2e1 * t174, 0, 0, t123 * t187, t125 * t187, 0, 0, 0.2e1 * t143 * t62, -0.2e1 * t133 * t143 + 0.2e1 * t144 * t62, 0, -0.2e1 * t144 * t133, 0, 0, -0.2e1 * qJD(3) * t141 + 0.2e1 * (t144 * t207 - t141) * qJD(2), -0.2e1 * t111 * t62 - 0.2e1 * t143 * t182, -0.2e1 * t133 * t222 + 0.2e1 * t143 * t48 + 0.2e1 * t144 * t47 + 0.2e1 * t68 * t62, 0.2e1 * t111 * t182 + 0.2e1 * t222 * t47 + 0.2e1 * t48 * t68, 0.2e1 * t204, -0.2e1 * t157, 0, t35, 0, 0, 0.2e1 * t45 * t79 + 0.2e1 * t56 * t60, 0.2e1 * t46 * t79 + 0.2e1 * t56 * t61, -0.2e1 * t127 * t60 - 0.2e1 * t43 * t45 + 0.2e1 * t158, 0.2e1 * t127 * t43 + 0.2e1 * t79 * t56 + 0.2e1 * t206, t24, t16, t9, t23, t10, t35, 0.2e1 * t122 * t158 + 0.2e1 * t17 * t45 + 0.2e1 * t38 * t61 + 0.2e1 * t6 * t60, 0.2e1 * t124 * t158 - 0.2e1 * t18 * t45 - 0.2e1 * t37 * t61 + 0.2e1 * t5 * t60, 0.2e1 * t149 * t46 + 0.2e1 * t217 * t61, 0.2e1 * t17 * t6 - 0.2e1 * t18 * t5 + 0.2e1 * t206, t24, t16, t9, t23, t10, t35, 0.2e1 * t11 * t45 + 0.2e1 * t122 * t161 + 0.2e1 * t2 * t60 + 0.2e1 * t27 * t61, -0.2e1 * t12 * t45 + 0.2e1 * t124 * t161 - 0.2e1 * t26 * t61 + 0.2e1 * t4 * t60, 0.2e1 * (-t11 * t124 - t12 * t122) * t46 + 0.2e1 * t216 * t61, 0.2e1 * t11 * t2 - 0.2e1 * t12 * t4 + 0.2e1 * t28 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, 0, -t190, 0, -pkin(7) * t189, pkin(7) * t190, 0, 0, 0, 0, -t62, 0, t133, 0, t48, t47, t133 * t183 - t143 * t167 - t144 * t168 + t184 * t62 (-t47 * t211 + t212 * t48 + (-t211 * t68 - t212 * t222) * qJD(3)) * pkin(2), 0, 0, t46, 0, -t45, 0, -t15, -t127, -t45 * t85 - t46 * t84 + t154, t127 * t85 - t15 * t84 + t43 * t83 + t205, -t22, t19, t31, t22, t29, 0, t37 + (-qJD(5) * t155 - t15) * t124 + t138 * t122, t115 * t155 + t124 * t138 + t203, t1, t1 * t81 - t148 * t83 + t15 * t80 + t205, -t22, t19, t31, t22, t29, 0, -t45 * t65 + t51 * t60 + t26 + (t195 * t74 - t8) * t124 + t156 * t122, t124 * t156 - t45 * t66 + t50 * t60 - t61 * t63 + t213, -t3 + (t46 * t65 - t51 * t61 + (-t61 * t66 - t11) * qJD(5)) * t124 + (-t46 * t66 + t50 * t61 - t2 + (-t61 * t65 - t12) * qJD(5)) * t122, t11 * t51 - t12 * t50 - t2 * t65 + t28 * t71 - t4 * t66 + t74 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t167, -0.2e1 * t168, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t82, -0.2e1 * t83, 0, -0.2e1 * t82 * t84 + 0.2e1 * t83 * t85, t102, t94, 0, t103, 0, 0, 0.2e1 * t170, 0.2e1 * t201, 0.2e1 * t53, 0.2e1 * t53 * t81 + 0.2e1 * t80 * t82, t102, t94, 0, t103, 0, 0, -0.2e1 * t124 * t71 + 0.2e1 * t63, 0.2e1 * t202, -0.2e1 * t122 * t51 - 0.2e1 * t49 + 0.2e1 * (-t122 * t66 + t124 * t65) * qJD(5), -0.2e1 * t50 * t66 - 0.2e1 * t51 * t65 + 0.2e1 * t71 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, t133, 0, t48, t47, 0, 0, 0, 0, t46, 0, -t45, 0, -t15, -t127 (-t120 * t45 - t121 * t46) * pkin(3), t127 * t210 - t15 * t209, -t22, t19, t31, t22, t29, 0, t37 + t152 * t122 + (-qJD(5) * t151 - t15) * t124, t115 * t151 + t124 * t152 + t203, t1, t1 * t108 + t109 * t15, -t22, t19, t31, t22, t29, 0, t99 * t200 - t124 * t8 - t45 * t91 + t60 * t76 + t26 + (pkin(5) * t118 + t198) * t195, t46 * t198 - t45 * t92 + t60 * t75 + (-t99 + t208) * t180 + t213, -t3 + (t46 * t91 - t61 * t76 + (-t61 * t92 - t11) * qJD(5)) * t124 + (-t46 * t92 + t61 * t75 - t2 + (-t61 * t91 - t12) * qJD(5)) * t122, pkin(5) * t26 + t11 * t76 - t12 * t75 - t2 * t91 - t4 * t92 + t8 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t167, -t168, 0, 0, 0, 0, 0, 0, 0, 0, -t82, -t83, 0 (t120 * t83 - t121 * t82) * pkin(3), t102, t94, 0, t103, 0, 0, t170 + t177, t176 + t201, t53, t108 * t53 + t109 * t82, t102, t94, 0, t103, 0, 0, t63 + t89 + (-t71 - t113) * t124, t196 + t202, -t49 - t70 + (-t51 - t76) * t122 + ((t65 + t91) * t124 + (-t66 - t92) * t122) * qJD(5), pkin(5) * t63 - t50 * t92 - t51 * t91 - t65 * t76 - t66 * t75 + t71 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, t94, 0, t103, 0, 0, 0.2e1 * t177, 0.2e1 * t176, 0, 0, t102, t94, 0, t103, 0, 0, -0.2e1 * pkin(5) * t175 + 0.2e1 * t89, 0.2e1 * t196, -0.2e1 * t122 * t76 - 0.2e1 * t70 + 0.2e1 * (-t122 * t92 + t124 * t91) * qJD(5), 0.2e1 * pkin(5) * t89 - 0.2e1 * t75 * t92 - 0.2e1 * t76 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t46, 0, t56, 0, 0, 0, 0, 0, 0, t29, -t31, -t25, -t217, 0, 0, 0, 0, 0, 0, t29, -t31, -t25, -t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t122 * t50 + t124 * t51 + (t122 * t65 + t124 * t66) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t122 * t75 + t124 * t76 + (t122 * t91 + t124 * t92) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, -t33, t45, t6, t5, 0, 0, 0, 0, -t145, 0, -t33, t45, t126 + 0.2e1 * t214, t4, t145 * pkin(5), t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, -t115, 0, -t116 * t81 - t122 * t83, t115 * t81 - t77, 0, 0, 0, 0, t116, 0, -t115, 0, t51, t50, -t181, t51 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, -t115, 0, -t108 * t116, t108 * t115, 0, 0, 0, 0, t116, 0, -t115, 0, t76, t75, -t181, t76 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, -t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t145, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, t116, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, t116, 0, t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
