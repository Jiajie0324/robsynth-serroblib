% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRP9_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP9_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP9_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP9_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:28:31
% EndTime: 2019-03-09 06:28:41
% DurationCPUTime: 3.60s
% Computational Cost: add. (3848->322), mult. (8785->552), div. (0->0), fcn. (7561->6), ass. (0->173)
t120 = sin(qJ(4));
t122 = cos(qJ(4));
t123 = cos(qJ(3));
t185 = qJD(4) * t123;
t171 = t122 * t185;
t121 = sin(qJ(3));
t183 = t121 * qJD(3);
t78 = t120 * t183 - t171;
t205 = sin(qJ(5));
t164 = qJD(3) * t205;
t145 = t121 * t164;
t206 = cos(qJ(5));
t165 = qJD(3) * t206;
t146 = t121 * t165;
t174 = t205 * t120;
t149 = t123 * t174;
t193 = t122 * t123;
t210 = qJD(4) + qJD(5);
t162 = t206 * qJD(5);
t211 = t206 * qJD(4) + t162;
t35 = -t120 * t146 - t122 * t145 - t210 * t149 + t211 * t193;
t88 = t206 * t120 + t205 * t122;
t71 = t88 * t123;
t213 = t35 * qJ(6) + t71 * qJD(6);
t204 = pkin(3) * t123;
t142 = pkin(8) * t121 + t204;
t212 = t122 * t142;
t175 = t206 * t122;
t133 = t175 - t174;
t72 = t133 * t121;
t116 = t120 ^ 2;
t118 = t122 ^ 2;
t191 = t116 - t118;
t158 = qJD(4) * t191;
t117 = t121 ^ 2;
t119 = t123 ^ 2;
t157 = (t117 - t119) * qJD(3);
t207 = -pkin(9) - pkin(8);
t209 = t207 * t123 + qJ(2);
t208 = 2 * qJD(2);
t203 = t121 * pkin(3);
t202 = t122 * pkin(3);
t156 = pkin(4) * t162;
t180 = t205 * pkin(4);
t201 = -t71 * t156 - t35 * t180;
t57 = t210 * t88;
t200 = t133 * t156 - t57 * t180;
t124 = -pkin(1) - pkin(7);
t195 = t120 * t124;
t160 = pkin(4) - t195;
t131 = t209 * t122 + (t160 + t202) * t121;
t50 = t205 * t131;
t196 = t120 * t123;
t194 = t121 * t124;
t101 = t122 * t194;
t141 = -t123 * pkin(8) + t203;
t135 = qJ(2) + t141;
t66 = t120 * t135 + t101;
t58 = -pkin(9) * t196 + t66;
t28 = t206 * t58 + t50;
t143 = t123 * t164;
t144 = t123 * t165;
t197 = t57 * t121;
t32 = t120 * t143 - t122 * t144 + t197;
t199 = t72 * t156 - t32 * t180;
t153 = t207 * t205;
t99 = t207 * t122;
t60 = t120 * t153 - t206 * t99;
t198 = t123 * t57;
t192 = t123 * t124;
t190 = t116 + t118;
t188 = t117 + t119;
t187 = qJD(4) * t120;
t186 = qJD(4) * t122;
t184 = qJD(4) * t124;
t182 = t122 * qJD(2);
t114 = t123 * qJD(3);
t181 = -0.2e1 * pkin(3) * qJD(4);
t179 = pkin(4) * t187;
t178 = t120 * t194;
t177 = t120 * t192;
t176 = t88 * t114;
t112 = -t122 * pkin(4) - pkin(3);
t173 = t120 * t185;
t172 = t120 * t184;
t169 = t120 * t186;
t106 = t124 * t183;
t168 = t122 * t183;
t167 = t121 * t114;
t166 = t124 * t114;
t161 = t205 * qJD(5);
t159 = t190 * t123;
t86 = pkin(4) * t196 - t192;
t103 = 0.2e1 * t167;
t155 = pkin(4) * t161;
t154 = t207 * t206;
t70 = t88 * t121;
t152 = t70 * t161;
t73 = t123 * t175 - t149;
t151 = t73 * t161;
t150 = t88 * t161;
t148 = t120 * t168;
t147 = t119 * t169;
t51 = t206 * t131;
t27 = -t205 * t58 + t51;
t90 = t120 * t154;
t59 = t205 * t99 + t90;
t134 = t122 * t135;
t65 = t134 - t178;
t140 = t120 * t66 + t122 * t65;
t139 = t120 * t65 - t122 * t66;
t138 = t121 * t155;
t137 = qJD(4) * t154;
t136 = qJD(4) * t153;
t62 = -pkin(4) * t78 + t106;
t127 = t182 + (-t101 + (-t203 - t209) * t120) * qJD(4) + (t160 * t123 + (-t207 * t121 + t204) * t122) * qJD(3);
t38 = t121 * t172 - t120 * (t142 * qJD(3) + qJD(2)) - qJD(4) * t134 - t122 * t166;
t130 = t78 * pkin(9) - t38;
t6 = -qJD(5) * t51 - t205 * t127 - t206 * t130 + t58 * t161;
t36 = -qJD(5) * t90 - t120 * t137 - t122 * t136 - t99 * t161;
t39 = t182 - t66 * qJD(4) + (-t177 + t212) * qJD(3);
t132 = -t140 * qJD(4) - t39 * t120 - t38 * t122;
t129 = (-t121 * t162 - t143) * pkin(4) + t6;
t37 = t99 * t162 + t122 * t137 + (-qJD(5) * t153 - t136) * t120;
t128 = t206 * t127 - t205 * t130;
t126 = -qJD(5) * t50 - t58 * t162 + t128;
t33 = -t120 * t145 + t122 * t146 + t198;
t125 = t33 * qJ(6) - t73 * qJD(6) + t126;
t113 = pkin(5) * t114;
t2 = t113 + t125;
t115 = qJ(2) * t208;
t111 = t206 * pkin(4) + pkin(5);
t109 = -0.2e1 * t156;
t108 = -0.2e1 * t155;
t77 = t120 * t114 + t121 * t186;
t76 = -t168 - t173;
t75 = -t122 * t114 + t121 * t187;
t67 = -pkin(5) * t133 + t112;
t61 = t123 * t158 + t148;
t56 = (t205 * qJD(4) + t161) * t120 - t211 * t122;
t54 = t71 * pkin(5) + t86;
t49 = t57 * pkin(5) + t179;
t47 = qJ(6) * t133 + t60;
t46 = -t88 * qJ(6) + t59;
t45 = -0.2e1 * t88 * t56;
t44 = -0.2e1 * t133 * t57;
t43 = t114 * t133 - t197;
t42 = -t56 * t121 + t176;
t41 = t123 * t56 + t88 * t183;
t40 = -t133 * t183 - t198;
t34 = -t210 * t72 - t176;
t23 = -0.2e1 * t73 * t33;
t22 = 0.2e1 * t71 * t35;
t21 = t35 * pkin(5) + t62;
t20 = -0.2e1 * t71 * t114 - 0.2e1 * t35 * t121;
t19 = 0.2e1 * t73 * t114 - 0.2e1 * t33 * t121;
t18 = -0.2e1 * t133 * t56 - 0.2e1 * t88 * t57;
t17 = -t71 * qJ(6) + t28;
t16 = t121 * pkin(5) - t73 * qJ(6) + t27;
t15 = t56 * qJ(6) - t88 * qJD(6) + t37;
t14 = t57 * qJ(6) - qJD(6) * t133 + t36;
t13 = -t133 * t35 + t71 * t57;
t12 = -t33 * t88 - t73 * t56;
t11 = 0.2e1 * t33 * t71 - 0.2e1 * t73 * t35;
t10 = -0.2e1 * t72 * t32 - 0.2e1 * t70 * t34 - 0.2e1 * t167;
t9 = t34 * t121 - t123 * t35 + (t121 * t71 - t123 * t70) * qJD(3);
t8 = t32 * t121 + t123 * t33 + (t121 * t73 - t123 * t72) * qJD(3);
t7 = -t28 * qJD(5) + t128;
t5 = -t133 * t33 - t88 * t35 + t56 * t71 - t73 * t57;
t4 = -t133 * t32 - t34 * t88 - t70 * t56 - t72 * t57;
t3 = t6 + t213;
t1 = t32 * t71 - t70 * t33 - t34 * t73 - t72 * t35;
t24 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t115, -0.2e1 * t167, 0.2e1 * t157, 0, t103, 0, 0, 0.2e1 * qJ(2) * t114 + 0.2e1 * qJD(2) * t121, -0.2e1 * qJ(2) * t183 + 0.2e1 * qJD(2) * t123, 0, t115, -0.2e1 * t118 * t167 - 0.2e1 * t147, 0.2e1 * t119 * t158 + 0.4e1 * t123 * t148, -0.2e1 * t121 * t173 - 0.2e1 * t122 * t157, -0.2e1 * t116 * t167 + 0.2e1 * t147, 0.2e1 * t120 * t157 - 0.2e1 * t121 * t171, t103, -0.2e1 * t119 * t122 * t184 + 0.2e1 * t39 * t121 + 0.2e1 * (t65 + 0.2e1 * t178) * t114, 0.2e1 * t119 * t172 + 0.2e1 * t38 * t121 + 0.2e1 * (-t66 + 0.2e1 * t101) * t114, 0.2e1 * t140 * t183 + 0.2e1 * (qJD(4) * t139 + t120 * t38 - t122 * t39) * t123, -0.2e1 * t124 ^ 2 * t167 - 0.2e1 * t66 * t38 + 0.2e1 * t65 * t39, t23, t11, t19, t22, t20, t103, 0.2e1 * t114 * t27 + 0.2e1 * t7 * t121 + 0.2e1 * t86 * t35 + 0.2e1 * t62 * t71, -0.2e1 * t114 * t28 + 0.2e1 * t6 * t121 - 0.2e1 * t86 * t33 + 0.2e1 * t62 * t73, 0.2e1 * t27 * t33 - 0.2e1 * t28 * t35 + 0.2e1 * t6 * t71 - 0.2e1 * t7 * t73, 0.2e1 * t27 * t7 - 0.2e1 * t28 * t6 + 0.2e1 * t86 * t62, t23, t11, t19, t22, t20, t103, 0.2e1 * t114 * t16 + 0.2e1 * t2 * t121 + 0.2e1 * t21 * t71 + 0.2e1 * t54 * t35, -0.2e1 * t114 * t17 + 0.2e1 * t3 * t121 + 0.2e1 * t21 * t73 - 0.2e1 * t54 * t33, 0.2e1 * t16 * t33 - 0.2e1 * t17 * t35 - 0.2e1 * t2 * t73 + 0.2e1 * t3 * t71, 0.2e1 * t16 * t2 - 0.2e1 * t17 * t3 + 0.2e1 * t54 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t188 * t186, t188 * t187, 0, -t139 * t114 + (t132 - 0.2e1 * t166) * t121, 0, 0, 0, 0, 0, 0, t9, t8, t1, -t62 * t123 + t183 * t86 + t27 * t34 - t28 * t32 - t6 * t72 - t7 * t70, 0, 0, 0, 0, 0, 0, t9, t8, t1, -t21 * t123 + t16 * t34 - t17 * t32 + t183 * t54 - t2 * t70 - t3 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t190) * t103, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, 0, -t114, 0, -t106, -t166, 0, 0, -t61, -0.4e1 * t123 * t169 + t191 * t183, t77, t61, -t75, 0 (-t177 - t212) * qJD(4) + (t120 * t141 - t101) * qJD(3) (t120 * t142 - t122 * t192) * qJD(4) + (-pkin(8) * t193 + (t195 + t202) * t121) * qJD(3), t132, -pkin(3) * t106 + pkin(8) * t132, t12, t5, t42, t13, t43, 0, t112 * t35 + t114 * t59 + t37 * t121 - t133 * t62 + t179 * t71 + t86 * t57, -t112 * t33 - t114 * t60 + t36 * t121 + t179 * t73 - t86 * t56 + t62 * t88, -t133 * t6 + t27 * t56 - t28 * t57 + t59 * t33 - t60 * t35 + t36 * t71 - t37 * t73 - t7 * t88, t62 * t112 + t179 * t86 + t27 * t37 - t28 * t36 + t7 * t59 - t6 * t60, t12, t5, t42, t13, t43, 0, t114 * t46 + t15 * t121 - t133 * t21 + t67 * t35 + t49 * t71 + t54 * t57, -t114 * t47 + t14 * t121 + t21 * t88 - t67 * t33 + t49 * t73 - t54 * t56, -t133 * t3 + t14 * t71 - t15 * t73 + t16 * t56 - t17 * t57 - t2 * t88 + t46 * t33 - t47 * t35, -t17 * t14 + t16 * t15 + t2 * t46 + t21 * t67 - t3 * t47 + t54 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t114, 0, 0, 0, 0, 0, 0, 0, 0, t76, t78, qJD(3) * t159 (pkin(8) * t159 - t203) * qJD(3), 0, 0, 0, 0, 0, 0, t40, t41, t4, -pkin(4) * t173 + t112 * t183 - t32 * t60 + t34 * t59 - t72 * t36 - t70 * t37, 0, 0, 0, 0, 0, 0, t40, t41, t4, -t123 * t49 - t72 * t14 - t70 * t15 + t183 * t67 - t32 * t47 + t34 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t169, -0.2e1 * t158, 0, -0.2e1 * t169, 0, 0, t120 * t181, t122 * t181, 0, 0, t45, t18, 0, t44, 0, 0, 0.2e1 * t112 * t57 - 0.2e1 * t133 * t179, -0.2e1 * t112 * t56 + 0.2e1 * t179 * t88, -0.2e1 * t133 * t36 - 0.2e1 * t37 * t88 + 0.2e1 * t59 * t56 - 0.2e1 * t60 * t57, 0.2e1 * t112 * t179 - 0.2e1 * t60 * t36 + 0.2e1 * t59 * t37, t45, t18, 0, t44, 0, 0, -0.2e1 * t133 * t49 + 0.2e1 * t67 * t57, 0.2e1 * t49 * t88 - 0.2e1 * t67 * t56, -0.2e1 * t133 * t14 - 0.2e1 * t15 * t88 + 0.2e1 * t46 * t56 - 0.2e1 * t47 * t57, -0.2e1 * t47 * t14 + 0.2e1 * t46 * t15 + 0.2e1 * t67 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t78, t114, t39, t38, 0, 0, 0, 0, -t33, 0, -t35, t114, pkin(4) * t144 + t126 - t138, t129 (t206 * t33 + t151) * pkin(4) + t201 (t206 * t7 - t205 * t6 + (-t205 * t27 + t206 * t28) * qJD(5)) * pkin(4), 0, 0, -t33, 0, -t35, t114, t111 * t114 - t138 + t2, t129 + t213, pkin(4) * t151 + t111 * t33 + t201, t2 * t111 + (-t205 * t3 + (-t205 * t16 + t206 * t17) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t75, 0, 0, 0, 0, 0, 0, 0, 0, t34, t32, 0 (t206 * t34 + t152) * pkin(4) + t199, 0, 0, 0, 0, 0, 0, t34, t32, 0, pkin(4) * t152 + t34 * t111 + t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, 0, -t187, 0, -pkin(8) * t186, pkin(8) * t187, 0, 0, 0, 0, -t56, 0, -t57, 0, t37, t36 (t206 * t56 + t150) * pkin(4) + t200 (t206 * t37 - t205 * t36 + (-t205 * t59 + t206 * t60) * qJD(5)) * pkin(4), 0, 0, -t56, 0, -t57, 0, t15, t14, pkin(4) * t150 + t111 * t56 + t200, t15 * t111 + (-t205 * t14 + (-t205 * t46 + t206 * t47) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, t109, 0, 0, 0, 0, 0, 0, 0, 0, t108, t109, 0, 0.2e1 * (-t205 * t111 + t206 * t180) * qJD(5) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, 0, -t35, t114, t7, t6, 0, 0, 0, 0, -t33, 0, -t35, t114, 0.2e1 * t113 + t125, t3, t33 * pkin(5), t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t32, 0, 0, 0, 0, 0, 0, 0, 0, t34, t32, 0, t34 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, 0, -t57, 0, t37, t36, 0, 0, 0, 0, -t56, 0, -t57, 0, t15, t14, t56 * pkin(5), t15 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155, -t156, 0, 0, 0, 0, 0, 0, 0, 0, -t155, -t156, 0, -pkin(5) * t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, -t33, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t56, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t24;
