% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:54
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP9_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:53:36
% EndTime: 2019-05-06 01:53:58
% DurationCPUTime: 13.06s
% Computational Cost: add. (59496->599), mult. (117415->831), div. (0->0), fcn. (79122->8), ass. (0->425)
t703 = sin(qJ(5));
t704 = sin(qJ(4));
t708 = cos(qJ(4));
t709 = cos(qJ(3));
t765 = qJD(1) * t709;
t669 = -qJD(3) * t708 + t704 * t765;
t671 = qJD(3) * t704 + t708 * t765;
t707 = cos(qJ(5));
t626 = t707 * t669 + t671 * t703;
t628 = -t669 * t703 + t671 * t707;
t580 = t628 * t626;
t761 = qJD(1) * qJD(3);
t746 = t709 * t761;
t705 = sin(qJ(3));
t759 = qJDD(1) * t705;
t674 = -t746 - t759;
t667 = qJDD(4) - t674;
t663 = qJDD(5) + t667;
t741 = -t663 + t580;
t787 = t741 * t703;
t786 = t741 * t707;
t811 = pkin(7) + pkin(1);
t817 = t741 * pkin(5);
t636 = t671 * t669;
t814 = -t636 + t667;
t819 = t704 * t814;
t818 = t708 * t814;
t693 = qJD(1) * t705 + qJD(4);
t653 = t693 * t669;
t747 = t705 * t761;
t757 = qJDD(1) * t709;
t675 = -t747 + t757;
t749 = t669 * qJD(4) - t704 * qJDD(3) - t708 * t675;
t595 = -t653 + t749;
t712 = qJD(1) ^ 2;
t816 = t712 * t811;
t687 = qJD(5) + t693;
t611 = t687 * t626;
t740 = -t708 * qJDD(3) + t704 * t675;
t621 = -qJD(4) * t671 - t740;
t715 = qJD(5) * t626 - t621 * t703 + t707 * t749;
t815 = -t611 - t715;
t594 = t749 + t653;
t625 = t628 ^ 2;
t686 = t687 ^ 2;
t597 = -t625 - t686;
t563 = t580 + t663;
t789 = t563 * t703;
t527 = t597 * t707 - t789;
t788 = t563 * t707;
t528 = -t597 * t703 - t788;
t479 = t527 * t708 + t528 * t704;
t813 = -pkin(3) * t479 - pkin(4) * t527;
t624 = t626 ^ 2;
t571 = -t686 - t624;
t508 = t571 * t703 - t786;
t509 = t571 * t707 + t787;
t461 = t508 * t708 + t509 * t704;
t812 = -pkin(3) * t461 - pkin(4) * t508;
t742 = -t707 * t621 - t703 * t749;
t518 = (qJD(5) - t687) * t628 + t742;
t590 = (qJD(4) - t693) * t671 + t740;
t665 = t669 ^ 2;
t666 = t671 ^ 2;
t692 = t693 ^ 2;
t808 = pkin(3) * t705;
t522 = -t611 + t715;
t469 = -t518 * t703 + t522 * t707;
t471 = -t518 * t707 - t522 * t703;
t427 = -t469 * t704 + t471 * t708;
t553 = -t624 - t625;
t402 = t427 * t705 - t553 * t709;
t425 = t469 * t708 + t471 * t704;
t706 = sin(qJ(1));
t710 = cos(qJ(1));
t368 = -t402 * t710 + t425 * t706;
t805 = pkin(6) * t368;
t462 = -t508 * t704 + t509 * t708;
t517 = (qJD(5) + t687) * t628 + t742;
t433 = t462 * t705 - t517 * t709;
t397 = -t433 * t710 + t461 * t706;
t804 = pkin(6) * t397;
t480 = -t527 * t704 + t528 * t708;
t440 = t480 * t705 - t709 * t815;
t406 = -t440 * t710 + t479 * t706;
t803 = pkin(6) * t406;
t802 = pkin(8) * t425;
t801 = pkin(8) * t461;
t800 = pkin(8) * t479;
t799 = pkin(9) * t469;
t798 = pkin(9) * t508;
t797 = pkin(9) * t527;
t796 = qJDD(1) * pkin(1);
t760 = qJD(2) * qJD(1);
t698 = 0.2e1 * t760;
t685 = t710 * g(1) + t706 * g(2);
t700 = qJDD(1) * qJ(2);
t727 = t685 - t700;
t719 = t698 - t727;
t728 = -t675 + t747;
t729 = -t674 + t746;
t585 = pkin(3) * t729 + pkin(8) * t728 + t719 - t816;
t684 = t706 * g(1) - t710 * g(2);
t730 = qJDD(2) - t684;
t716 = -t712 * qJ(2) + t730;
t652 = -qJDD(1) * t811 + t716;
t631 = -t709 * g(3) + t705 * t652;
t711 = qJD(3) ^ 2;
t734 = -pkin(8) * t709 + t808;
t720 = t712 * t734;
t599 = -t711 * pkin(3) + qJDD(3) * pkin(8) - t705 * t720 + t631;
t542 = -t708 * t585 + t704 * t599;
t493 = t814 * pkin(4) + pkin(9) * t595 - t542;
t543 = t704 * t585 + t708 * t599;
t733 = pkin(4) * t693 - pkin(9) * t671;
t501 = -t665 * pkin(4) + t621 * pkin(9) - t693 * t733 + t543;
t448 = -t707 * t493 + t703 * t501;
t449 = t703 * t493 + t707 * t501;
t391 = -t448 * t707 + t449 * t703;
t795 = t391 * t704;
t794 = t391 * t708;
t750 = -qJ(6) * t715 + t448;
t718 = -qJ(6) * t611 - t750;
t764 = qJD(6) * t628;
t419 = t718 - 0.2e1 * t764 - t817;
t793 = t419 * t703;
t792 = t419 * t707;
t630 = t705 * g(3) + t709 * t652;
t598 = qJDD(3) * pkin(3) + t711 * pkin(8) - t709 * t720 + t630;
t529 = t621 * pkin(4) + t665 * pkin(9) - t671 * t733 + t598;
t791 = t529 * t703;
t790 = t529 * t707;
t785 = t598 * t704;
t784 = t598 * t708;
t615 = t636 + t667;
t783 = t615 * t704;
t782 = t615 * t708;
t701 = t705 ^ 2;
t702 = t709 ^ 2;
t766 = t701 + t702;
t677 = t766 * qJDD(1);
t781 = t677 * t706;
t780 = t677 * t710;
t751 = t705 * t709 * t712;
t682 = qJDD(3) + t751;
t779 = t682 * t705;
t778 = t682 * t709;
t683 = qJDD(3) - t751;
t777 = t683 * t705;
t776 = t683 * t709;
t775 = t687 * t703;
t774 = t687 * t707;
t773 = t693 * t704;
t772 = t693 * t708;
t771 = t701 * t712;
t770 = t702 * t712;
t647 = t727 - 0.2e1 * t760 + t816;
t769 = t705 * t647;
t768 = t709 * t647;
t767 = -t597 - t624;
t758 = qJDD(1) * t706;
t756 = qJDD(1) * t710;
t755 = t705 * t580;
t754 = t709 * t580;
t753 = t705 * t636;
t752 = t709 * t636;
t748 = pkin(3) * t709 + pkin(2);
t745 = -pkin(4) * t553 + pkin(9) * t471;
t744 = -pkin(4) * t517 + pkin(9) * t509;
t743 = -pkin(4) * t815 + pkin(9) * t528;
t392 = t448 * t703 + t707 * t449;
t487 = t542 * t704 + t708 * t543;
t654 = -t712 * pkin(1) + t719;
t655 = -t716 + t796;
t606 = t710 * t654 - t655 * t706;
t638 = -t684 * t706 - t710 * t685;
t739 = t706 * t751;
t738 = t710 * t751;
t737 = qJ(2) * t425 - t402 * t811;
t736 = qJ(2) * t461 - t433 * t811;
t735 = qJ(2) * t479 - t440 * t811;
t386 = -pkin(3) * t425 - pkin(4) * t469;
t678 = -t706 * t712 + t756;
t732 = pkin(6) * t678 + g(3) * t706;
t679 = t710 * t712 + t758;
t731 = -pkin(6) * t679 + g(3) * t710;
t486 = -t542 * t708 + t543 * t704;
t583 = t709 * t630 + t705 * t631;
t584 = -t630 * t705 + t631 * t709;
t603 = t654 * t706 + t655 * t710;
t637 = t684 * t710 - t685 * t706;
t403 = t427 * t709 + t553 * t705;
t726 = pkin(2) * t402 - pkin(3) * t553 + pkin(8) * t427 - qJ(2) * t403;
t434 = t462 * t709 + t517 * t705;
t725 = pkin(2) * t433 - pkin(3) * t517 + pkin(8) * t462 - qJ(2) * t434;
t441 = t480 * t709 + t705 * t815;
t724 = pkin(2) * t440 - pkin(3) * t815 + pkin(8) * t480 - qJ(2) * t441;
t723 = pkin(2) * t425 - t403 * t811;
t722 = pkin(2) * t461 - t434 * t811;
t721 = pkin(2) * t479 - t441 * t811;
t550 = -qJD(5) * t628 - t742;
t602 = pkin(5) * t687 - qJ(6) * t628;
t717 = t550 * qJ(6) - 0.2e1 * qJD(6) * t626 - t602 * t687 + t449;
t714 = -t628 * t602 - qJDD(6) + t529;
t713 = -t550 * pkin(5) - t714;
t691 = -t711 - t770;
t690 = t711 - t770;
t689 = -t711 - t771;
t688 = -t711 + t771;
t681 = (-t701 + t702) * t712;
t680 = t766 * t712;
t676 = -0.2e1 * t747 + t757;
t673 = 0.2e1 * t746 + t759;
t668 = t766 * t761;
t651 = -t666 + t692;
t650 = t665 - t692;
t649 = -t675 * t705 - t702 * t761;
t648 = -t674 * t709 - t701 * t761;
t644 = -t691 * t705 - t778;
t643 = t689 * t709 - t777;
t642 = t691 * t709 - t779;
t641 = -t690 * t709 - t777;
t640 = t689 * t705 + t776;
t639 = -t688 * t705 - t778;
t635 = -t666 + t665;
t634 = -t680 * t710 - t781;
t633 = -t680 * t706 + t780;
t632 = -t666 - t692;
t629 = t673 * t705 - t676 * t709;
t623 = -t692 - t665;
t620 = 0.2e1 * t764;
t613 = t665 + t666;
t610 = -t625 + t686;
t609 = t624 - t686;
t608 = t642 * t706 + t676 * t710;
t607 = t640 * t706 + t673 * t710;
t605 = -t642 * t710 + t676 * t706;
t604 = -t640 * t710 + t673 * t706;
t601 = (-t669 * t708 + t671 * t704) * t693;
t600 = (-t669 * t704 - t671 * t708) * t693;
t591 = (-qJD(4) - t693) * t671 - t740;
t589 = -t671 * t773 - t708 * t749;
t588 = t671 * t772 - t704 * t749;
t587 = -t621 * t704 + t669 * t772;
t586 = t621 * t708 + t669 * t773;
t579 = -t601 * t705 + t667 * t709;
t578 = -t625 + t624;
t577 = t650 * t708 - t783;
t576 = -t651 * t704 + t818;
t575 = t650 * t704 + t782;
t574 = t651 * t708 + t819;
t573 = -t632 * t704 - t782;
t572 = t632 * t708 - t783;
t570 = -pkin(2) * t680 - t584;
t568 = pkin(2) * t642 - qJ(2) * t644 - t631;
t567 = pkin(2) * t640 - qJ(2) * t643 + t630;
t566 = t623 * t708 - t819;
t565 = t623 * t704 + t818;
t561 = (-t626 * t707 + t628 * t703) * t687;
t560 = (-t626 * t703 - t628 * t707) * t687;
t559 = pkin(2) * t673 - t643 * t811 - t768;
t558 = pkin(2) * t676 - t644 * t811 + t769;
t557 = t583 * t706 - t647 * t710;
t556 = -t583 * t710 - t647 * t706;
t555 = -t589 * t705 + t752;
t554 = -t587 * t705 - t752;
t547 = -t590 * t708 - t595 * t704;
t546 = t591 * t708 + t594 * t704;
t545 = -t590 * t704 + t595 * t708;
t544 = t591 * t704 - t594 * t708;
t540 = -t577 * t705 - t590 * t709;
t539 = -t576 * t705 - t595 * t709;
t538 = t609 * t707 - t789;
t537 = -t610 * t703 - t786;
t536 = t609 * t703 + t788;
t535 = t610 * t707 - t787;
t534 = -pkin(8) * t572 - t784;
t533 = pkin(2) * t583 - qJ(2) * t584;
t532 = -pkin(8) * t565 - t785;
t531 = t573 * t709 - t594 * t705;
t530 = t573 * t705 + t594 * t709;
t525 = t566 * t709 - t591 * t705;
t524 = t566 * t705 + t591 * t709;
t523 = -t546 * t705 - t635 * t709;
t516 = -pkin(2) * t647 - t584 * t811;
t513 = -t628 * t775 - t707 * t715;
t512 = t628 * t774 - t703 * t715;
t511 = -t550 * t703 + t626 * t774;
t510 = t550 * t707 + t626 * t775;
t506 = t547 * t709 - t613 * t705;
t505 = t547 * t705 + t613 * t709;
t504 = -t560 * t704 + t561 * t708;
t503 = t560 * t708 + t561 * t704;
t502 = -pkin(3) * t572 + t543;
t500 = -pkin(3) * t565 + t542;
t497 = t504 * t709 + t663 * t705;
t496 = -t504 * t705 + t663 * t709;
t495 = t530 * t706 + t572 * t710;
t494 = -t530 * t710 + t572 * t706;
t490 = t524 * t706 + t565 * t710;
t489 = -t524 * t710 + t565 * t706;
t488 = -pkin(5) * t815 - qJ(6) * t563;
t485 = -t536 * t704 + t538 * t708;
t484 = -t535 * t704 + t537 * t708;
t483 = t536 * t708 + t538 * t704;
t482 = t535 * t708 + t537 * t704;
t481 = -t790 - t797;
t476 = t505 * t706 + t545 * t710;
t475 = -t505 * t710 + t545 * t706;
t474 = t487 * t709 - t598 * t705;
t473 = t487 * t705 + t598 * t709;
t472 = -t791 - t798;
t470 = -t517 * t707 - t703 * t815;
t468 = -t517 * t703 + t707 * t815;
t466 = -t512 * t704 + t513 * t708;
t465 = -t510 * t704 + t511 * t708;
t464 = t512 * t708 + t513 * t704;
t463 = t510 * t708 + t511 * t704;
t458 = t624 * qJ(6) - t713;
t457 = -pkin(8) * t545 - t486;
t456 = -t496 * t706 + t503 * t710;
t455 = t496 * t710 + t503 * t706;
t454 = t466 * t709 + t755;
t453 = t465 * t709 - t755;
t452 = -t466 * t705 + t754;
t451 = -t465 * t705 - t754;
t450 = qJ(6) * t767 + t713;
t447 = t485 * t709 - t518 * t705;
t446 = t484 * t709 - t522 * t705;
t445 = -t485 * t705 - t518 * t709;
t444 = -t484 * t705 - t522 * t709;
t442 = t743 - t791;
t437 = t744 + t790;
t436 = pkin(2) * t530 + pkin(3) * t594 + pkin(8) * t573 - qJ(2) * t531 - t785;
t435 = pkin(2) * t524 + pkin(3) * t591 + pkin(8) * t566 - qJ(2) * t525 + t784;
t430 = t473 * t706 + t486 * t710;
t429 = -t473 * t710 + t486 * t706;
t428 = (t571 + t624) * qJ(6) + (-t517 + t550) * pkin(5) + t714;
t426 = -t468 * t704 + t470 * t708;
t424 = t468 * t708 + t470 * t704;
t421 = -pkin(5) * t624 + t717;
t420 = pkin(2) * t572 - t709 * t502 - t531 * t811 - t705 * t534;
t418 = -t445 * t706 + t483 * t710;
t417 = -t444 * t706 + t482 * t710;
t416 = t445 * t710 + t483 * t706;
t415 = t444 * t710 + t482 * t706;
t414 = t426 * t709 - t578 * t705;
t413 = -t426 * t705 - t578 * t709;
t412 = pkin(2) * t565 - t709 * t500 - t525 * t811 - t705 * t532;
t411 = -t452 * t706 + t464 * t710;
t410 = -t451 * t706 + t463 * t710;
t409 = t452 * t710 + t464 * t706;
t408 = t451 * t710 + t463 * t706;
t407 = t440 * t706 + t479 * t710;
t405 = pkin(6) * t407;
t404 = pkin(2) * t505 + pkin(3) * t613 + pkin(8) * t547 - qJ(2) * t506 + t487;
t399 = t450 * t707 - t488 * t703 - t797;
t398 = t433 * t706 + t461 * t710;
t396 = pkin(6) * t398;
t395 = qJ(6) * t786 - t428 * t703 - t798;
t394 = t449 + t813;
t393 = t620 + (-t522 + t611) * qJ(6) + t817 + t750;
t390 = pkin(2) * t473 + pkin(3) * t598 + pkin(8) * t487 - qJ(2) * t474;
t389 = -qJ(6) * t518 + (-t553 - t624) * pkin(5) + t717;
t388 = t448 + t812;
t387 = -t705 * t457 - t506 * t811 + t545 * t748;
t385 = t450 * t703 + t488 * t707 + t743;
t384 = pkin(4) * t529 + pkin(9) * t392;
t383 = qJ(6) * t787 + t428 * t707 + t744;
t382 = -t442 * t704 + t481 * t708 - t800;
t381 = pkin(5) * t458 + qJ(6) * t421;
t380 = -pkin(5) * t522 + t386;
t379 = -t437 * t704 + t472 * t708 - t801;
t378 = pkin(5) * t767 + t717 + t813;
t377 = -t391 - t799;
t376 = t392 + t745;
t375 = t620 - t718 + t812 + 0.2e1 * t817;
t374 = -t413 * t706 + t424 * t710;
t373 = t413 * t710 + t424 * t706;
t372 = -t811 * t474 + (pkin(8) * t705 + t748) * t486;
t371 = t421 * t707 - t793;
t370 = t421 * t703 + t792;
t369 = t402 * t706 + t425 * t710;
t367 = pkin(6) * t369;
t366 = t392 * t708 - t795;
t365 = t392 * t704 + t794;
t364 = t366 * t709 - t529 * t705;
t363 = t366 * t705 + t529 * t709;
t362 = -t385 * t704 + t399 * t708 - t800;
t361 = t442 * t708 + t481 * t704 + t724;
t360 = -t389 * t703 + t393 * t707 - t799;
t359 = -t383 * t704 + t395 * t708 - t801;
t358 = t389 * t707 + t393 * t703 + t745;
t357 = t437 * t708 + t472 * t704 + t725;
t356 = -pkin(3) * t365 - pkin(4) * t391;
t355 = -t370 * t704 + t371 * t708;
t354 = t370 * t708 + t371 * t704;
t353 = -t705 * t382 - t709 * t394 + t721;
t352 = -t376 * t704 + t377 * t708 - t802;
t351 = t385 * t708 + t399 * t704 + t724;
t350 = -pkin(9) * t370 - qJ(6) * t792 - t381 * t703;
t349 = t355 * t709 - t458 * t705;
t348 = t355 * t705 + t458 * t709;
t347 = t383 * t708 + t395 * t704 + t725;
t346 = -t705 * t379 - t709 * t388 + t722;
t345 = pkin(4) * t458 + pkin(9) * t371 - qJ(6) * t793 + t381 * t707;
t344 = -pkin(8) * t365 - pkin(9) * t794 - t384 * t704;
t343 = t363 * t706 + t365 * t710;
t342 = -t363 * t710 + t365 * t706;
t341 = -t705 * t362 - t709 * t378 + t721;
t340 = t376 * t708 + t377 * t704 + t726;
t339 = -t705 * t359 - t709 * t375 + t722;
t338 = -pkin(3) * t354 - pkin(4) * t370 - pkin(5) * t419;
t337 = -t358 * t704 + t360 * t708 - t802;
t336 = t348 * t706 + t354 * t710;
t335 = -t348 * t710 + t354 * t706;
t334 = -t705 * t352 - t709 * t386 + t723;
t333 = t358 * t708 + t360 * t704 + t726;
t332 = pkin(2) * t363 + pkin(3) * t529 + pkin(8) * t366 - pkin(9) * t795 - qJ(2) * t364 + t384 * t708;
t331 = -t705 * t337 - t709 * t380 + t723;
t330 = -pkin(8) * t354 - t345 * t704 + t350 * t708;
t329 = pkin(2) * t365 - t705 * t344 - t709 * t356 - t364 * t811;
t328 = pkin(2) * t348 + pkin(3) * t458 + pkin(8) * t355 - qJ(2) * t349 + t345 * t708 + t350 * t704;
t327 = pkin(2) * t354 - t705 * t330 - t709 * t338 - t349 * t811;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t679, -t678, 0, t638, 0, 0, 0, 0, 0, 0, 0, t679, t678, t606, 0, 0, 0, 0, 0, 0, t607, t608, t634, t557, 0, 0, 0, 0, 0, 0, t490, t495, t476, t430, 0, 0, 0, 0, 0, 0, t398, t407, t369, t343, 0, 0, 0, 0, 0, 0, t398, t407, t369, t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t678, -t679, 0, t637, 0, 0, 0, 0, 0, 0, 0, -t678, t679, t603, 0, 0, 0, 0, 0, 0, t604, t605, t633, t556, 0, 0, 0, 0, 0, 0, t489, t494, t475, t429, 0, 0, 0, 0, 0, 0, t397, t406, t368, t342, 0, 0, 0, 0, 0, 0, t397, t406, t368, t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t643, t644, 0, t584, 0, 0, 0, 0, 0, 0, t525, t531, t506, t474, 0, 0, 0, 0, 0, 0, t434, t441, t403, t364, 0, 0, 0, 0, 0, 0, t434, t441, t403, t349; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t678, 0, -t679, 0, -t732, -t731, -t637, -pkin(6) * t637, 0, -t678, t679, 0, 0, 0, -t603, t732, t731, -pkin(6) * t603 + (-pkin(1) * t706 + qJ(2) * t710) * g(3), -t649 * t706 + t738, -t629 * t706 + t681 * t710, -t641 * t706 + t709 * t756, -t648 * t706 - t738, -t639 * t706 - t705 * t756, qJDD(3) * t710 - t668 * t706, -pkin(6) * t604 - t559 * t706 + t567 * t710, -pkin(6) * t605 - t558 * t706 + t568 * t710, -pkin(2) * t780 - pkin(6) * t633 - t570 * t706, -pkin(6) * t556 - t516 * t706 + t533 * t710, -t555 * t706 + t588 * t710, -t523 * t706 + t544 * t710, -t539 * t706 + t574 * t710, -t554 * t706 + t586 * t710, -t540 * t706 + t575 * t710, -t579 * t706 + t600 * t710, -pkin(6) * t489 - t412 * t706 + t435 * t710, -pkin(6) * t494 - t420 * t706 + t436 * t710, -pkin(6) * t475 - t387 * t706 + t404 * t710, -pkin(6) * t429 - t372 * t706 + t390 * t710, t411, t374, t417, t410, t418, t456, -t346 * t706 + t357 * t710 - t804, -t353 * t706 + t361 * t710 - t803, -t334 * t706 + t340 * t710 - t805, -pkin(6) * t342 - t329 * t706 + t332 * t710, t411, t374, t417, t410, t418, t456, -t339 * t706 + t347 * t710 - t804, -t341 * t706 + t351 * t710 - t803, -t331 * t706 + t333 * t710 - t805, -pkin(6) * t335 - t327 * t706 + t328 * t710; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t679, 0, t678, 0, t731, -t732, t638, pkin(6) * t638, 0, -t679, -t678, 0, 0, 0, t606, -t731, t732, pkin(6) * t606 + (pkin(1) * t710 + qJ(2) * t706) * g(3), t649 * t710 + t739, t629 * t710 + t681 * t706, t641 * t710 + t706 * t757, t648 * t710 - t739, t639 * t710 - t705 * t758, qJDD(3) * t706 + t668 * t710, pkin(6) * t607 + t559 * t710 + t567 * t706, pkin(6) * t608 + t558 * t710 + t568 * t706, -pkin(2) * t781 + pkin(6) * t634 + t570 * t710, pkin(6) * t557 + t516 * t710 + t533 * t706, t555 * t710 + t588 * t706, t523 * t710 + t544 * t706, t539 * t710 + t574 * t706, t554 * t710 + t586 * t706, t540 * t710 + t575 * t706, t579 * t710 + t600 * t706, pkin(6) * t490 + t412 * t710 + t435 * t706, pkin(6) * t495 + t420 * t710 + t436 * t706, pkin(6) * t476 + t387 * t710 + t404 * t706, pkin(6) * t430 + t372 * t710 + t390 * t706, t409, t373, t415, t408, t416, t455, t346 * t710 + t357 * t706 + t396, t353 * t710 + t361 * t706 + t405, t334 * t710 + t340 * t706 + t367, pkin(6) * t343 + t329 * t710 + t332 * t706, t409, t373, t415, t408, t416, t455, t339 * t710 + t347 * t706 + t396, t341 * t710 + t351 * t706 + t405, t331 * t710 + t333 * t706 + t367, pkin(6) * t336 + t327 * t710 + t328 * t706; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t684, t685, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t730 - 0.2e1 * t796, -t685 + t698 + 0.2e1 * t700, pkin(1) * t655 + qJ(2) * t654, -t728 * t709, -t673 * t709 - t676 * t705, -t690 * t705 + t776, t729 * t705, t688 * t709 - t779, 0, qJ(2) * t673 - t640 * t811 - t769, qJ(2) * t676 - t642 * t811 - t768, -qJ(2) * t680 + t677 * t811 - t583, -qJ(2) * t647 - t583 * t811, t589 * t709 + t753, t546 * t709 - t635 * t705, t576 * t709 - t595 * t705, t587 * t709 - t753, t577 * t709 - t590 * t705, t601 * t709 + t667 * t705, qJ(2) * t565 - t705 * t500 - t524 * t811 + t709 * t532, qJ(2) * t572 - t705 * t502 - t530 * t811 + t709 * t534, t709 * t457 + (qJ(2) + t808) * t545 - t811 * t505, -t811 * t473 + (qJ(2) + t734) * t486, t454, t414, t446, t453, t447, t497, t379 * t709 - t388 * t705 + t736, t382 * t709 - t394 * t705 + t735, t352 * t709 - t386 * t705 + t737, qJ(2) * t365 + t709 * t344 - t705 * t356 - t363 * t811, t454, t414, t446, t453, t447, t497, t359 * t709 - t375 * t705 + t736, t362 * t709 - t378 * t705 + t735, t337 * t709 - t380 * t705 + t737, qJ(2) * t354 + t709 * t330 - t705 * t338 - t348 * t811;];
tauB_reg  = t1;
