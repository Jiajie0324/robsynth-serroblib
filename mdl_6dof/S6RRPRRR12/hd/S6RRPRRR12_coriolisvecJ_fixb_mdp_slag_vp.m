% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRPRRR12_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:42:03
% EndTime: 2019-03-09 14:42:22
% DurationCPUTime: 12.48s
% Computational Cost: add. (8694->588), mult. (21648->799), div. (0->0), fcn. (16764->10), ass. (0->245)
t630 = sin(qJ(2));
t625 = sin(pkin(6));
t731 = qJD(1) * t625;
t708 = t630 * t731;
t588 = qJD(4) + t708;
t631 = cos(qJ(6));
t722 = qJD(6) * t631;
t626 = cos(pkin(6));
t730 = qJD(1) * t626;
t608 = qJD(2) + t730;
t629 = sin(qJ(4));
t632 = cos(qJ(4));
t633 = cos(qJ(2));
t707 = t633 * t731;
t545 = -t629 * t608 - t632 * t707;
t546 = t608 * t632 - t629 * t707;
t628 = sin(qJ(5));
t761 = cos(qJ(5));
t477 = -t761 * t545 + t546 * t628;
t782 = t477 * t631;
t788 = t722 + t782;
t699 = t761 * qJD(5);
t787 = t588 * t761 + t699;
t600 = pkin(2) * t708;
t669 = pkin(9) * t630 - qJ(3) * t633;
t532 = t669 * t731 + t600;
t716 = pkin(1) * t730;
t554 = pkin(8) * t707 + t630 * t716;
t536 = pkin(3) * t707 + t554;
t686 = -t532 * t629 + t632 * t536;
t726 = qJD(4) * t629;
t746 = t629 * t630;
t634 = -pkin(2) - pkin(9);
t759 = pkin(10) - t634;
t786 = (pkin(4) * t633 - pkin(10) * t746) * t731 + t686 - t759 * t726;
t574 = t759 * t632;
t677 = t632 * t708;
t736 = t632 * t532 + t629 * t536;
t785 = pkin(10) * t677 + qJD(4) * t574 + t736;
t653 = t628 * t545 + t546 * t761;
t729 = qJD(2) * t630;
t706 = t625 * t729;
t676 = qJD(1) * t706;
t498 = qJD(4) * t545 + t629 * t676;
t642 = t632 * t729 + t633 * t726;
t725 = qJD(4) * t632;
t499 = t608 * t725 - t642 * t731;
t724 = qJD(5) * t628;
t437 = t761 * t498 - t628 * t499 + t545 * t699 - t546 * t724;
t572 = qJD(5) + t588;
t717 = qJD(1) * qJD(2);
t697 = t633 * t717;
t590 = t625 * t697;
t627 = sin(qJ(6));
t711 = t631 * t437 + t572 * t722 + t627 * t590;
t723 = qJD(6) * t627;
t416 = -t653 * t723 + t711;
t414 = t416 * t627;
t467 = t572 * t627 + t631 * t653;
t691 = t437 * t627 - t631 * t590;
t417 = qJD(6) * t467 + t691;
t438 = qJD(5) * t653 + t628 * t498 + t761 * t499;
t436 = t631 * t438;
t756 = t653 * t627;
t465 = -t631 * t572 + t756;
t718 = -qJD(6) - t477;
t434 = t627 * t438;
t743 = -t718 * t722 + t434;
t781 = t718 * t627;
t784 = MDP(26) * t590 - t438 * MDP(25) - t477 ^ 2 * MDP(23) + (t477 * t572 + t437) * MDP(24) + (MDP(22) * t477 + MDP(23) * t653 + MDP(25) * t572 + MDP(33) * t718) * t653 + (t788 * t467 + t414) * MDP(29) + (-t467 * t653 - t718 * t782 + t743) * MDP(31) + (t465 * t653 - t718 * t781 + t436) * MDP(32) + (t416 * t631 - t627 * t417 - t788 * t465 + t467 * t781) * MDP(30);
t553 = pkin(8) * t708 - t633 * t716;
t719 = qJD(3) + t553;
t720 = pkin(3) * t708 + t719;
t483 = t608 * t634 + t720;
t696 = -qJ(3) * t630 - pkin(1);
t530 = (t633 * t634 + t696) * t625;
t508 = qJD(1) * t530;
t454 = t632 * t483 - t508 * t629;
t444 = -pkin(10) * t546 + t454;
t442 = pkin(4) * t588 + t444;
t455 = t483 * t629 + t508 * t632;
t445 = pkin(10) * t545 + t455;
t748 = t628 * t445;
t409 = t442 * t761 - t748;
t407 = -t572 * pkin(5) - t409;
t783 = t407 * t477;
t738 = -t632 * t724 - t787 * t629 + (-t677 - t725) * t628;
t747 = t628 * t629;
t737 = -t628 * t726 - t629 * t724 + t632 * t787 - t708 * t747;
t448 = pkin(5) * t653 + pkin(11) * t477;
t591 = t608 * qJ(3);
t501 = t591 + t536;
t471 = -pkin(4) * t545 + t501;
t583 = pkin(2) * t676;
t727 = qJD(3) * t630;
t638 = (qJD(2) * t669 - t727) * t625;
t489 = qJD(1) * t638 + t583;
t715 = pkin(1) * qJD(2) * t626;
t680 = qJD(1) * t715;
t547 = pkin(8) * t590 + t630 * t680;
t513 = pkin(3) * t590 + t547;
t639 = -qJD(4) * t455 - t629 * t489 + t632 * t513;
t420 = pkin(4) * t590 - pkin(10) * t498 + t639;
t647 = t483 * t725 + t632 * t489 - t508 * t726 + t629 * t513;
t422 = -pkin(10) * t499 + t647;
t678 = t628 * t420 + t761 * t422 + t442 * t699 - t445 * t724;
t780 = t471 * t477 - t678;
t622 = t625 ^ 2;
t777 = -0.2e1 * t622 * t717;
t623 = t630 ^ 2;
t775 = MDP(5) * (-t633 ^ 2 + t623);
t749 = t625 * t633;
t557 = t626 * t632 - t629 * t749;
t750 = t625 * t630;
t610 = pkin(8) * t750;
t710 = -pkin(1) * t633 - pkin(2);
t512 = pkin(3) * t750 + t610 + (-pkin(9) + t710) * t626;
t687 = t632 * t512 - t530 * t629;
t452 = pkin(4) * t750 - pkin(10) * t557 + t687;
t556 = t626 * t629 + t632 * t749;
t739 = t629 * t512 + t632 * t530;
t457 = -pkin(10) * t556 + t739;
t774 = t628 * t452 + t761 * t457;
t573 = t759 * t629;
t651 = t628 * t573 - t574 * t761;
t773 = -qJD(5) * t651 + t628 * t786 + t785 * t761;
t527 = -t573 * t761 - t628 * t574;
t772 = -qJD(5) * t527 + t785 * t628 - t761 * t786;
t734 = pkin(4) * t725 - (-pkin(4) * t632 - pkin(3)) * t708 + t719;
t760 = pkin(1) * t630;
t613 = t626 * t760;
t771 = pkin(8) * t749 + t613;
t709 = t761 * t445;
t410 = t628 * t442 + t709;
t637 = -qJD(5) * t410 + t761 * t420 - t628 * t422;
t397 = -pkin(5) * t590 - t637;
t408 = t572 * pkin(11) + t410;
t433 = pkin(5) * t477 - pkin(11) * t653 + t471;
t666 = t408 * t627 - t433 * t631;
t769 = -t397 * t631 + t407 * t723 + t653 * t666;
t395 = t397 * t627;
t401 = t408 * t631 + t433 * t627;
t768 = t401 * t653 + t407 * t722 + t395;
t765 = -t471 * t653 + t637;
t524 = -qJD(4) * t556 + t629 * t706;
t595 = pkin(2) * t706;
t504 = t595 + t638;
t762 = pkin(3) + pkin(8);
t537 = (t749 * t762 + t613) * qJD(2);
t640 = -qJD(4) * t739 - t504 * t629 + t632 * t537;
t728 = qJD(2) * t633;
t705 = t625 * t728;
t426 = pkin(4) * t705 - pkin(10) * t524 + t640;
t525 = -t625 * t642 + t626 * t725;
t646 = t632 * t504 + t512 * t725 - t530 * t726 + t629 * t537;
t432 = -pkin(10) * t525 + t646;
t764 = -qJD(5) * t774 + t426 * t761 - t628 * t432;
t755 = t545 * t588;
t754 = t546 * t588;
t565 = -t632 * t761 + t747;
t753 = t565 * t631;
t752 = t588 * t634;
t751 = t622 * qJD(1) ^ 2;
t614 = t629 * pkin(4) + qJ(3);
t740 = pkin(5) * t707 - t772;
t735 = -pkin(8) * t676 + t633 * t680;
t714 = t588 * t630 * t632;
t713 = t633 * t751;
t519 = -t608 * qJD(3) - t735;
t548 = -t626 * qJ(3) - t771;
t703 = t588 * t725;
t695 = t737 * t572;
t396 = pkin(11) * t590 + t678;
t490 = -pkin(3) * t676 - t519;
t459 = pkin(4) * t499 + t490;
t403 = pkin(5) * t438 - pkin(11) * t437 + t459;
t694 = -t396 * t627 + t631 * t403;
t690 = -t627 * t738 - t631 * t707;
t689 = t627 * t707 - t631 * t738;
t616 = pkin(4) * t628 + pkin(11);
t682 = pkin(4) * t546 + qJD(6) * t616 + t448;
t566 = t628 * t632 + t629 * t761;
t681 = qJD(6) * t566 + t608;
t679 = t630 * t713;
t529 = pkin(3) * t749 - t548;
t411 = t628 * t444 + t709;
t675 = pkin(4) * t724 - t411;
t674 = pkin(1) * t777;
t673 = -t565 * t590 + t572 * t738;
t672 = t554 * t608 - t547;
t505 = pkin(5) * t566 + pkin(11) * t565 + t614;
t671 = pkin(11) * t707 - qJD(6) * t505 + t773;
t670 = -pkin(5) * t737 + pkin(11) * t738 + qJD(6) * t527 - t734;
t668 = t396 * t631 + t403 * t627;
t667 = -t438 * t616 + t783;
t424 = pkin(11) * t750 + t774;
t484 = pkin(4) * t556 + t529;
t495 = -t628 * t556 + t557 * t761;
t652 = -t556 * t761 - t628 * t557;
t440 = -pkin(5) * t652 - pkin(11) * t495 + t484;
t665 = t424 * t631 + t440 * t627;
t664 = -t424 * t627 + t440 * t631;
t555 = t771 * qJD(2);
t663 = t547 * t626 + t555 * t608;
t569 = t622 * t630 * t697;
t599 = t633 * t715;
t661 = -pkin(8) * t706 + t599;
t412 = t444 * t761 - t748;
t660 = -pkin(4) * t699 + t412;
t659 = -t608 * t707 + t590;
t658 = -t495 * t627 + t631 * t750;
t474 = t495 * t631 + t627 * t750;
t657 = t452 * t761 - t628 * t457;
t650 = t501 * t630 + t634 * t728;
t649 = t588 * t629;
t645 = t628 * t426 + t761 * t432 + t452 * t699 - t457 * t724;
t549 = (-pkin(2) * t633 + t696) * t625;
t644 = t565 * t722 + t690;
t643 = t565 * t723 - t689;
t619 = t626 * qJD(3);
t511 = -t706 * t762 + t599 + t619;
t641 = (-qJ(3) * t728 - t727) * t625;
t470 = pkin(4) * t525 + t511;
t617 = -pkin(4) * t761 - pkin(5);
t571 = t632 * t590;
t552 = -qJ(3) * t707 + t600;
t550 = t626 * t710 + t610;
t543 = -t619 - t661;
t542 = qJD(1) * t549;
t539 = t595 + t641;
t531 = -t591 - t554;
t528 = -pkin(2) * t608 + t719;
t517 = qJD(1) * t641 + t583;
t510 = t542 * t708;
t447 = qJD(5) * t495 + t628 * t524 + t525 * t761;
t446 = qJD(5) * t652 + t524 * t761 - t628 * t525;
t428 = qJD(6) * t474 + t446 * t627 - t631 * t705;
t427 = qJD(6) * t658 + t446 * t631 + t627 * t705;
t423 = -pkin(5) * t750 - t657;
t404 = pkin(5) * t447 - pkin(11) * t446 + t470;
t399 = -pkin(5) * t705 - t764;
t398 = pkin(11) * t705 + t645;
t394 = -qJD(6) * t401 + t694;
t393 = -qJD(6) * t666 + t668;
t1 = [(t524 * t588 + (t498 * t630 + (qJD(1) * t557 + t546) * t728) * t625) * MDP(17) + (-t525 * t588 + (-t499 * t630 + (-qJD(1) * t556 + t545) * t728) * t625) * MDP(18) + (t640 * t588 - t511 * t545 + t529 * t499 + t490 * t556 + t501 * t525 + (t639 * t630 + (qJD(1) * t687 + t454) * t728) * t625) * MDP(20) + (-t519 * t626 - t543 * t608 + (-t542 * t728 - t517 * t630 + (-t539 * t630 - t549 * t728) * qJD(1)) * t625) * MDP(13) + ((-t542 * t729 + t517 * t633 + (t539 * t633 - t549 * t729) * qJD(1)) * t625 + t663) * MDP(12) + (t630 * t674 - t663) * MDP(9) + 0.2e1 * MDP(4) * t569 + (-t608 * t661 - t626 * t735 + t633 * t674) * MDP(10) + (-t646 * t588 + t511 * t546 + t529 * t498 + t490 * t557 + t501 * t524 + (-t647 * t630 + (-qJD(1) * t739 - t455) * t728) * t625) * MDP(21) + (MDP(6) * t705 - MDP(7) * t706) * (t608 + t730) + (t446 * t572 + (t437 * t630 + (qJD(1) * t495 + t653) * t728) * t625) * MDP(24) + (t437 * t495 + t446 * t653) * MDP(22) + t775 * t777 + (-t519 * t633 + t547 * t630 + (t528 * t633 + t531 * t630) * qJD(2) + (-t543 * t633 + t555 * t630 + (t548 * t630 + t550 * t633) * qJD(2)) * qJD(1)) * t625 * MDP(11) + (t588 * t705 + t569) * MDP(19) + (t572 * t705 + t569) * MDP(26) + (t416 * t474 + t427 * t467) * MDP(29) + (t416 * t658 - t417 * t474 - t427 * t465 - t428 * t467) * MDP(30) + (-t447 * t572 + (-t438 * t630 + (qJD(1) * t652 - t477) * t728) * t625) * MDP(25) + (t437 * t652 - t438 * t495 - t446 * t477 - t447 * t653) * MDP(23) + (t409 * t705 + t484 * t438 + t471 * t447 - t459 * t652 + t470 * t477 + t572 * t764 + t657 * t590 + t637 * t750) * MDP(27) + (-t438 * t652 - t447 * t718) * MDP(33) + (-t416 * t652 - t427 * t718 + t438 * t474 + t447 * t467) * MDP(31) + ((qJD(6) * t664 + t398 * t631 + t404 * t627) * t718 - t665 * t438 + t393 * t652 - t401 * t447 + t399 * t467 + t423 * t416 + t397 * t474 + t407 * t427) * MDP(35) + (t417 * t652 + t428 * t718 + t438 * t658 - t447 * t465) * MDP(32) + (-(-qJD(6) * t665 - t398 * t627 + t404 * t631) * t718 + t664 * t438 - t394 * t652 - t666 * t447 + t399 * t465 + t423 * t417 - t397 * t658 + t407 * t428) * MDP(34) + (-t645 * t572 + t470 * t653 + t484 * t437 + t459 * t495 + t471 * t446 + (-t678 * t630 + (-qJD(1) * t774 - t410) * t728) * t625) * MDP(28) + (t517 * t549 + t519 * t548 + t528 * t555 + t531 * t543 + t539 * t542 + t547 * t550) * MDP(14) + (t498 * t557 + t524 * t546) * MDP(15) + (-t498 * t556 - t499 * t557 + t524 * t545 - t525 * t546) * MDP(16); (-pkin(2) * t547 - qJ(3) * t519 - t528 * t554 - t531 * t719 - t542 * t552) * MDP(14) + t751 * t775 + (t614 * t438 + t459 * t566 + t737 * t471 + t734 * t477 + t772 * t572) * MDP(27) + (t614 * t437 - t459 * t565 + t738 * t471 + t773 * t572 + t734 * t653) * MDP(28) + (t498 * t632 - t546 * t649) * MDP(15) + ((-t499 - t754) * t632 + (-t498 - t755) * t629) * MDP(16) + (qJ(3) * t498 + t490 * t632 + t736 * t588 + t720 * t546 + (-t501 * t629 - t632 * t752) * qJD(4) + (t455 * t633 - t629 * t650) * t731) * MDP(21) + (qJ(3) * t499 + t490 * t629 - t686 * t588 - t720 * t545 + (t501 * t632 - t629 * t752) * qJD(4) + (-t454 * t633 + t632 * t650) * t731) * MDP(20) + (-t416 * t753 + t467 * t643) * MDP(29) - MDP(4) * t679 + (t510 - t672) * MDP(12) + (pkin(1) * t713 - t553 * t608 - t735) * MDP(10) + (-t437 * t565 + t653 * t738) * MDP(22) + (-t437 * t566 + t438 * t565 - t477 * t738 - t653 * t737) * MDP(23) + t659 * MDP(6) + (-t703 + (-t714 + (-qJD(2) * t629 - t545) * t633) * t731) * MDP(18) + (t719 * t608 + (t542 * t633 + t552 * t630) * t731 - t519) * MDP(13) + (t751 * t760 + t672) * MDP(9) - t695 * MDP(25) + (-qJD(2) + t608) * MDP(7) * t708 + (-t588 * t726 + t571 + (-t546 * t633 - t588 * t746) * t731) * MDP(17) + (t690 * t467 + t689 * t465 + (t414 + t417 * t631 + (-t465 * t627 + t467 * t631) * qJD(6)) * t565) * MDP(30) + t673 * MDP(24) + ((-qJ(3) * qJD(2) - t531 - t554) * t630 + (-pkin(2) * qJD(2) - t528 + t719) * t633) * MDP(11) * t731 + (t438 * t566 - t718 * t737) * MDP(33) + (-t417 * t566 + t434 * t565 - t465 * t737 - t644 * t718) * MDP(32) + (t416 * t566 - t436 * t565 + t467 * t737 - t643 * t718) * MDP(31) + (-t588 * MDP(19) - t572 * MDP(26) + (-qJD(2) * t566 + t477) * MDP(25) - t552 * MDP(12) - t653 * MDP(24) + (qJD(2) * t651 - t409) * MDP(27) + (-qJD(2) * t527 + t410) * MDP(28)) * t707 + (-(t505 * t627 + t527 * t631) * t438 - t393 * t566 - t651 * t416 - t397 * t753 - (t627 * t670 + t631 * t671) * t718 + t740 * t467 - t737 * t401 + t643 * t407) * MDP(35) + ((t505 * t631 - t527 * t627) * t438 + t394 * t566 - t651 * t417 - t565 * t395 - (t627 * t671 - t631 * t670) * t718 + t740 * t465 - t737 * t666 - t644 * t407) * MDP(34); t659 * MDP(11) + MDP(12) * t679 + (-t608 ^ 2 - t623 * t751) * MDP(13) + (t531 * t608 + t510 + t547) * MDP(14) + (t545 * t608 - t588 * t649 + t571) * MDP(20) + (-t703 - t546 * t608 + (-t629 * t728 - t714) * t731) * MDP(21) + (-t477 * t608 + t673) * MDP(27) + (-t566 * t590 - t608 * t653 - t695) * MDP(28) + (-t566 * t434 + t565 * t417 - t738 * t465 - (-t627 * t737 - t631 * t681) * t718) * MDP(34) + (-t566 * t436 + t565 * t416 - t738 * t467 - (t627 * t681 - t631 * t737) * t718) * MDP(35); (t455 * t588 - t501 * t546 + t639) * MDP(20) + (t412 * t572 + (-t546 * t653 - t572 * t699 - t590 * t628) * pkin(4) + t780) * MDP(28) + (-t499 + t754) * MDP(18) + (t498 - t755) * MDP(17) - t546 * t545 * MDP(15) + (t411 * t572 + (-t477 * t546 - t572 * t724 + t590 * t761) * pkin(4) + t765) * MDP(27) + (t617 * t417 + t667 * t627 + t675 * t465 - (t627 * t660 - t631 * t682) * t718 + t769) * MDP(34) + (t617 * t416 + t667 * t631 + t675 * t467 - (t627 * t682 + t631 * t660) * t718 + t768) * MDP(35) + (t454 * t588 - t501 * t545 - t647) * MDP(21) + MDP(19) * t590 + (-t545 ^ 2 + t546 ^ 2) * MDP(16) + t784; (t410 * t572 + t765) * MDP(27) + (t409 * t572 + t780) * MDP(28) + (-pkin(5) * t417 + (-t409 * t627 + t448 * t631) * t718 - t410 * t465 + t627 * t783 - t743 * pkin(11) + t769) * MDP(34) + (-pkin(5) * t416 - (t409 * t631 + t448 * t627) * t718 - t410 * t467 + t407 * t782 + (-t718 * t723 - t436) * pkin(11) + t768) * MDP(35) + t784; t467 * t465 * MDP(29) + (-t465 ^ 2 + t467 ^ 2) * MDP(30) + (-t465 * t718 + t711) * MDP(31) + (-t467 * t718 - t691) * MDP(32) + t438 * MDP(33) + (-t401 * t718 - t407 * t467 + t694) * MDP(34) + (t407 * t465 + t666 * t718 - t668) * MDP(35) + (-MDP(31) * t756 - MDP(32) * t467 - MDP(34) * t401 + MDP(35) * t666) * qJD(6);];
tauc  = t1;
