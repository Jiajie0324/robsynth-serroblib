% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:42:11
% EndTime: 2019-03-09 14:42:36
% DurationCPUTime: 17.94s
% Computational Cost: add. (10666->729), mult. (24974->970), div. (0->0), fcn. (19708->14), ass. (0->320)
t761 = sin(pkin(6));
t766 = sin(qJ(2));
t895 = qJD(1) * t766;
t864 = t761 * t895;
t711 = qJD(4) + t864;
t768 = cos(qJ(6));
t885 = qJD(6) * t768;
t762 = cos(pkin(6));
t896 = qJD(1) * t762;
t740 = qJD(2) + t896;
t765 = sin(qJ(4));
t769 = cos(qJ(4));
t770 = cos(qJ(2));
t894 = qJD(1) * t770;
t863 = t761 * t894;
t661 = -t765 * t740 - t769 * t863;
t835 = t765 * t863;
t662 = t740 * t769 - t835;
t764 = sin(qJ(5));
t956 = cos(qJ(5));
t591 = -t956 * t661 + t662 * t764;
t981 = t591 * t768;
t987 = t885 + t981;
t859 = t956 * qJD(5);
t986 = t711 * t956 + t859;
t727 = pkin(8) * t863;
t874 = pkin(1) * t896;
t674 = t766 * t874 + t727;
t648 = pkin(3) * t863 + t674;
t632 = t769 * t648;
t731 = pkin(2) * t864;
t945 = qJ(3) * t770;
t824 = pkin(9) * t766 - t945;
t897 = qJD(1) * t761;
t644 = t824 * t897 + t731;
t890 = qJD(4) * t765;
t921 = t765 * t766;
t772 = -pkin(2) - pkin(9);
t948 = pkin(10) - t772;
t985 = -t644 * t765 + t632 + (pkin(4) * t770 - pkin(10) * t921) * t897 - t948 * t890;
t698 = t948 * t769;
t836 = t769 * t864;
t905 = t769 * t644 + t765 * t648;
t984 = pkin(10) * t836 + qJD(4) * t698 + t905;
t880 = qJD(1) * qJD(2);
t858 = t766 * t880;
t834 = t761 * t858;
t877 = qJDD(1) * t770;
t979 = -t761 * t877 + t834;
t806 = t764 * t661 + t662 * t956;
t879 = qJDD(1) * t762;
t733 = qJDD(2) + t879;
t580 = qJD(4) * t661 + t769 * t733 + t765 * t979;
t581 = -qJD(4) * t835 + t733 * t765 + (qJD(4) * t740 - t979) * t769;
t887 = qJD(5) * t764;
t531 = t956 * t580 - t764 * t581 + t661 * t859 - t662 * t887;
t857 = t770 * t880;
t878 = qJDD(1) * t766;
t797 = t857 + t878;
t786 = t797 * t761;
t670 = qJDD(4) + t786;
t663 = qJDD(5) + t670;
t694 = qJD(5) + t711;
t763 = sin(qJ(6));
t867 = t768 * t531 + t763 * t663 + t694 * t885;
t886 = qJD(6) * t763;
t511 = -t806 * t886 + t867;
t509 = t511 * t763;
t572 = t694 * t763 + t768 * t806;
t853 = t531 * t763 - t768 * t663;
t512 = qJD(6) * t572 + t853;
t532 = qJD(5) * t806 + t764 * t580 + t956 * t581;
t527 = qJDD(6) + t532;
t523 = t763 * t527;
t524 = t768 * t527;
t942 = t806 * t763;
t570 = -t768 * t694 + t942;
t881 = -qJD(6) - t591;
t980 = t763 * t881;
t983 = t663 * MDP(26) - t532 * MDP(25) - t591 ^ 2 * MDP(23) + (t591 * t694 + t531) * MDP(24) + (MDP(22) * t591 + MDP(23) * t806 + MDP(25) * t694 + MDP(33) * t881) * t806 + (t572 * t987 + t509) * MDP(29) + (-t572 * t806 - t881 * t987 + t523) * MDP(31) + (t570 * t806 - t881 * t980 + t524) * MDP(32) + (t511 * t768 - t763 * t512 - t570 * t987 + t572 * t980) * MDP(30);
t904 = -pkin(8) * t864 + t770 * t874;
t882 = qJD(3) - t904;
t883 = pkin(3) * t864 + t882;
t598 = t740 * t772 + t883;
t946 = qJ(3) * t766;
t793 = t770 * t772 - pkin(1) - t946;
t642 = t793 * t761;
t616 = qJD(1) * t642;
t554 = t769 * t598 - t616 * t765;
t544 = -pkin(10) * t662 + t554;
t542 = pkin(4) * t711 + t544;
t555 = t598 * t765 + t616 * t769;
t545 = pkin(10) * t661 + t555;
t924 = t764 * t545;
t517 = t542 * t956 - t924;
t515 = -t694 * pkin(5) - t517;
t982 = t515 * t591;
t889 = qJD(4) * t769;
t907 = -t769 * t887 - t986 * t765 + (-t836 - t889) * t764;
t923 = t764 * t765;
t906 = -t764 * t890 - t765 * t887 + t986 * t769 - t864 * t923;
t767 = sin(qJ(1));
t916 = t767 * t770;
t771 = cos(qJ(1));
t917 = t766 * t771;
t681 = t762 * t916 + t917;
t760 = qJ(4) + qJ(5);
t754 = sin(t760);
t755 = cos(t760);
t928 = t761 * t767;
t617 = t681 * t755 - t754 * t928;
t926 = t761 * t771;
t927 = t761 * t770;
t915 = t770 * t771;
t919 = t766 * t767;
t679 = -t762 * t915 + t919;
t938 = t679 * t755;
t978 = g(3) * (-t754 * t762 - t755 * t927) + g(2) * (t754 * t926 + t938) + g(1) * t617;
t548 = pkin(5) * t806 + pkin(11) * t591;
t714 = t740 * qJ(3);
t610 = t714 + t648;
t579 = -pkin(4) * t661 + t610;
t618 = t681 * t754 + t755 * t928;
t668 = -t754 * t927 + t755 * t762;
t811 = -t679 * t754 + t755 * t926;
t929 = t761 * t766;
t742 = pkin(8) * t929;
t873 = pkin(1) * qJD(2) * t762;
t841 = qJD(1) * t873;
t872 = pkin(1) * t879;
t837 = qJD(2) * t727 + qJDD(1) * t742 + t766 * t841 - t770 * t872;
t816 = qJDD(3) + t837;
t561 = pkin(3) * t786 + t733 * t772 + t816;
t706 = pkin(2) * t834;
t891 = qJD(3) * t766;
t781 = qJD(2) * t824 - t891;
t567 = t706 + (qJD(1) * t781 + qJDD(1) * t793) * t761;
t778 = -qJD(4) * t555 + t769 * t561 - t765 * t567;
t504 = pkin(4) * t670 - pkin(10) * t580 + t778;
t796 = -t765 * t561 - t769 * t567 - t598 * t889 + t616 * t890;
t506 = -pkin(10) * t581 - t796;
t839 = -t764 * t504 - t956 * t506 - t542 * t859 + t545 * t887;
t977 = g(1) * t618 - g(2) * t811 + g(3) * t668 + t579 * t591 + t839;
t869 = t765 * t927;
t677 = t762 * t769 - t869;
t866 = -pkin(1) * t770 - pkin(2);
t625 = pkin(3) * t929 + t742 + (-pkin(9) + t866) * t762;
t849 = t769 * t625 - t642 * t765;
t552 = pkin(4) * t929 - pkin(10) * t677 + t849;
t676 = t762 * t765 + t769 * t927;
t908 = t765 * t625 + t769 * t642;
t557 = -pkin(10) * t676 + t908;
t973 = t764 * t552 + t956 * t557;
t697 = t948 * t765;
t804 = t764 * t697 - t698 * t956;
t972 = -qJD(5) * t804 + t764 * t985 + t984 * t956;
t637 = -t697 * t956 - t764 * t698;
t971 = -qJD(5) * t637 + t984 * t764 - t956 * t985;
t604 = -t764 * t676 + t677 * t956;
t918 = t766 * t768;
t716 = t761 * t918;
t970 = -t604 * t763 + t716;
t903 = pkin(4) * t889 - (-pkin(4) * t769 - pkin(3)) * t864 + t882;
t825 = pkin(2) * t770 + t946;
t812 = -pkin(1) - t825;
t666 = t812 * t761;
t654 = qJD(1) * t666;
t968 = t654 * t864 + qJDD(3);
t865 = t956 * t545;
t518 = t764 * t542 + t865;
t516 = t694 * pkin(11) + t518;
t537 = pkin(5) * t591 - pkin(11) * t806 + t579;
t820 = t516 * t763 - t537 * t768;
t967 = t515 * t886 + t806 * t820;
t777 = -qJD(5) * t518 + t956 * t504 - t764 * t506;
t495 = -t663 * pkin(5) - t777;
t493 = t495 * t763;
t501 = t516 * t768 + t537 * t763;
t966 = t501 * t806 + t515 * t885 + t763 * t978 + t493;
t963 = -t579 * t806 + t777 - t978;
t962 = t610 * t711 + t772 * t670;
t680 = t762 * t917 + t916;
t961 = t680 * t768 + t763 * t811;
t960 = -t680 * t763 + t768 * t811;
t893 = qJD(2) * t766;
t862 = t761 * t893;
t634 = -qJD(4) * t676 + t765 * t862;
t726 = pkin(2) * t862;
t613 = t761 * t781 + t726;
t955 = pkin(1) * t766;
t745 = t762 * t955;
t957 = pkin(3) + pkin(8);
t649 = (t927 * t957 + t745) * qJD(2);
t779 = -qJD(4) * t908 - t613 * t765 + t769 * t649;
t892 = qJD(2) * t770;
t861 = t761 * t892;
t528 = pkin(4) * t861 - pkin(10) * t634 + t779;
t635 = -qJD(4) * t869 + t762 * t889 - t769 * t862;
t795 = t769 * t613 + t625 * t889 - t642 * t890 + t765 * t649;
t536 = -pkin(10) * t635 + t795;
t959 = -qJD(5) * t973 + t528 * t956 - t764 * t536;
t954 = pkin(2) * t733;
t952 = g(1) * t771;
t949 = g(3) * t761;
t947 = MDP(7) * t761;
t940 = t661 * t711;
t939 = t662 * t711;
t937 = t679 * t769;
t689 = -t769 * t956 + t923;
t934 = t689 * t768;
t712 = t733 * qJ(3);
t933 = t733 * t762;
t932 = t754 * t763;
t931 = t754 * t768;
t757 = t761 ^ 2;
t930 = t757 * qJD(1) ^ 2;
t925 = t763 * t766;
t922 = t765 * t670;
t920 = t765 * t771;
t747 = t765 * pkin(4) + qJ(3);
t909 = pkin(5) * t863 - t971;
t902 = pkin(8) * t927 + t745;
t758 = t766 ^ 2;
t901 = -t770 ^ 2 + t758;
t900 = MDP(11) * t761;
t888 = qJD(4) * t772;
t884 = qJD(2) - t740;
t876 = 0.2e1 * t757;
t875 = g(3) * t929;
t871 = t770 * t930;
t870 = t761 * t925;
t665 = -t762 * qJ(3) - t902;
t494 = pkin(11) * t663 - t839;
t713 = t740 * qJD(3);
t838 = pkin(8) * t979 - t766 * t872 - t770 * t841;
t582 = -t712 - t713 + t838;
t563 = -pkin(3) * t979 - t582;
t538 = pkin(4) * t581 + t563;
t499 = pkin(5) * t532 - pkin(11) * t531 + t538;
t855 = -t763 * t494 + t768 * t499;
t851 = -t763 * t907 - t768 * t863;
t850 = t763 * t863 - t768 * t907;
t848 = t679 * t765 - t769 * t926;
t845 = t740 + t896;
t749 = pkin(4) * t764 + pkin(11);
t844 = pkin(4) * t662 + qJD(6) * t749 + t548;
t690 = t764 * t769 + t765 * t956;
t843 = qJD(6) * t690 + t740;
t842 = t733 + t879;
t840 = t766 * t871;
t641 = pkin(3) * t927 - t665;
t519 = t764 * t544 + t865;
t833 = pkin(4) * t887 - t519;
t832 = g(1) * t679 - g(2) * t681;
t682 = -t762 * t919 + t915;
t831 = -g(1) * t682 - g(2) * t680;
t830 = g(2) * t767 + t952;
t829 = -t689 * t663 + t694 * t907;
t614 = pkin(5) * t690 + pkin(11) * t689 + t747;
t827 = pkin(11) * t863 - qJD(6) * t614 + t972;
t826 = -pkin(5) * t906 + pkin(11) * t907 + qJD(6) * t637 - t903;
t822 = t768 * t494 + t763 * t499;
t821 = -t749 * t527 + t982;
t522 = pkin(11) * t929 + t973;
t599 = pkin(4) * t676 + t641;
t805 = -t676 * t956 - t764 * t677;
t540 = -pkin(5) * t805 - pkin(11) * t604 + t599;
t819 = t522 * t768 + t540 * t763;
t818 = -t522 * t763 + t540 * t768;
t815 = -0.2e1 * qJD(2) * t654;
t730 = t770 * t873;
t814 = -pkin(8) * t862 + t730;
t520 = t544 * t956 - t924;
t813 = -pkin(4) * t859 + t520;
t588 = t604 * t768 + t870;
t810 = t552 * t956 - t764 * t557;
t803 = t711 * t765;
t802 = -qJ(3) * t892 - t891;
t586 = t706 + (qJD(1) * t802 + qJDD(1) * t812) * t761;
t651 = t761 * t802 + t726;
t799 = qJD(1) * t651 + qJDD(1) * t666 + t586;
t798 = -t663 * t690 - t694 * t906;
t794 = t764 * t528 + t956 * t536 + t552 * t859 - t557 * t887;
t675 = t902 * qJD(2);
t791 = -g(1) * t680 + g(2) * t682 + t675 * t740;
t790 = t689 * t885 + t851;
t789 = t689 * t886 - t850;
t752 = t762 * qJD(3);
t624 = -t862 * t957 + t730 + t752;
t788 = t831 - t875;
t787 = -t495 - t978;
t785 = t831 - t838;
t784 = t563 + t788;
t783 = g(1) * t681 + g(2) * t679 - g(3) * t927 - t837;
t782 = t761 * (t884 * t894 + t878);
t575 = pkin(4) * t635 + t624;
t775 = t674 * t740 + t783;
t750 = -pkin(4) * t956 - pkin(5);
t672 = -qJ(3) * t863 + t731;
t669 = t762 * t866 + t742;
t660 = t769 * t670;
t658 = -t752 - t814;
t643 = -t714 - t674;
t640 = -pkin(2) * t740 + t882;
t639 = t681 * t765 + t769 * t928;
t638 = t681 * t769 - t765 * t928;
t596 = t816 - t954;
t585 = t618 * t768 + t682 * t763;
t584 = -t618 * t763 + t682 * t768;
t547 = qJD(5) * t604 + t764 * t634 + t635 * t956;
t546 = qJD(5) * t805 + t634 * t956 - t764 * t635;
t530 = qJD(6) * t588 + t546 * t763 - t768 * t861;
t529 = qJD(6) * t970 + t546 * t768 + t763 * t861;
t521 = -pkin(5) * t929 - t810;
t507 = pkin(5) * t547 - pkin(11) * t546 + t575;
t497 = -pkin(5) * t861 - t959;
t496 = pkin(11) * t861 + t794;
t492 = -t501 * qJD(6) + t855;
t491 = -t820 * qJD(6) + t822;
t1 = [(g(1) * t937 - g(2) * t638 + t563 * t677 + t641 * t580 + t610 * t634 + t624 * t662 - t908 * t670 - t795 * t711) * MDP(21) + (g(1) * t848 - g(2) * t639 + t563 * t676 + t641 * t581 + t610 * t635 - t624 * t661 + t849 * t670 + t779 * t711) * MDP(20) + (t596 * t762 + t669 * t733 + t791) * MDP(12) + (-t582 * t762 - t658 * t740 - t665 * t733 + t832) * MDP(13) + ((qJDD(1) * t758 + 0.2e1 * t766 * t857) * MDP(4) + 0.2e1 * (t766 * t877 - t880 * t901) * MDP(5)) * t757 + (-t511 * t805 + t527 * t588 - t529 * t881 + t547 * t572) * MDP(31) + (-t527 * t805 - t547 * t881) * MDP(33) + ((qJD(6) * t818 + t496 * t768 + t507 * t763) * t881 - t819 * t527 + t491 * t805 - t501 * t547 + t497 * t572 + t521 * t511 + t495 * t588 + t515 * t529 + g(1) * t961 - g(2) * t584) * MDP(35) + (t531 * t805 - t532 * t604 - t546 * t591 - t547 * t806) * MDP(23) + (-t547 * t694 + t663 * t805) * MDP(25) + (-g(1) * t811 - g(2) * t618 + t517 * t861 + t599 * t532 - t538 * t805 + t579 * t547 + t575 * t591 + t810 * t663 + t694 * t959 + t777 * t929) * MDP(27) + (g(1) * t938 - g(2) * t617 + t599 * t531 + t538 * t604 + t579 * t546 + t575 * t806 - t663 * t973 - t794 * t694) * MDP(28) + ((-t518 * t892 + t754 * t952 + t766 * t839) * MDP(28) + (g(1) * t920 - t555 * t892 + t766 * t796) * MDP(21) + (t554 * t892 + t766 * t778) * MDP(20) + (t580 * t766 + t662 * t892) * MDP(17) + (-t581 * t766 + t661 * t892) * MDP(18) + (t531 * t766 + t806 * t892) * MDP(24) + (-t532 * t766 - t591 * t892) * MDP(25) + (t766 * t815 + t770 * t799) * MDP(12) + (t766 * t842 + t845 * t892) * MDP(6) + (t670 * t766 + t711 * t892) * MDP(19) + (t663 * t766 + t694 * t892) * MDP(26) + (-t766 * t799 + t770 * t815) * MDP(13)) * t761 + (t531 * t604 + t546 * t806) * MDP(22) + (-(-qJD(6) * t819 - t496 * t763 + t507 * t768) * t881 + t818 * t527 - t492 * t805 - t820 * t547 + t497 * t570 + t521 * t512 - t495 * t970 + t515 * t530 - g(1) * t960 - g(2) * t585) * MDP(34) + (t512 * t805 + t527 * t970 + t530 * t881 - t547 * t570) * MDP(32) + (t511 * t970 - t512 * t588 - t529 * t570 - t530 * t572) * MDP(30) + (-t635 * t711 - t670 * t676) * MDP(18) + (t634 * t711 + t670 * t677) * MDP(17) + (t546 * t694 + t604 * t663) * MDP(24) + qJDD(1) * MDP(1) + (-t742 * t733 - t837 * t762 + (t770 * t933 + (-t858 + t877) * t876) * pkin(1) - t791) * MDP(9) + (t586 * t666 + t654 * t651 + t582 * t665 + t643 * t658 + t596 * t669 + t640 * t675 - g(1) * (-pkin(1) * t767 - pkin(2) * t680 + pkin(8) * t926 - qJ(3) * t679) - g(2) * (pkin(1) * t771 + pkin(2) * t682 + pkin(8) * t928 + qJ(3) * t681)) * MDP(14) + (-t580 * t676 - t581 * t677 + t634 * t661 - t635 * t662) * MDP(16) + (t580 * t677 + t634 * t662) * MDP(15) + (-pkin(1) * t797 * t876 - t733 * t902 - t740 * t814 + t762 * t838 - t832) * MDP(10) + (t511 * t588 + t529 * t572) * MDP(29) + (g(1) * t767 - g(2) * t771) * MDP(2) + ((qJD(2) * t640 - qJDD(1) * t665 - t582 + (qJD(2) * t669 - t658) * qJD(1)) * t770 + (qJD(2) * t643 + qJDD(1) * t669 + t596 + (qJD(2) * t665 + t675) * qJD(1)) * t766 - t830) * t900 + MDP(8) * t933 + (t770 * t842 - t845 * t893) * t947 + t830 * MDP(3); (-t512 * t690 + t523 * t689 - t570 * t906 - t790 * t881) * MDP(32) + (t511 * t690 - t524 * t689 + t572 * t906 - t789 * t881) * MDP(31) + (t527 * t690 - t881 * t906) * MDP(33) + ((t614 * t768 - t637 * t763) * t527 + t492 * t690 - t804 * t512 - t689 * t493 - g(1) * (-t681 * t763 + t682 * t931) - g(2) * (-t679 * t763 + t680 * t931) - (t754 * t918 + t763 * t770) * t949 - (t763 * t827 - t768 * t826) * t881 + t909 * t570 - t906 * t820 - t790 * t515) * MDP(34) + (-(t614 * t763 + t637 * t768) * t527 - t491 * t690 - t804 * t511 - t495 * t934 - g(1) * (-t681 * t768 - t682 * t932) - g(2) * (-t679 * t768 - t680 * t932) - (-t754 * t925 + t768 * t770) * t949 - (t763 * t826 + t768 * t827) * t881 + t909 * t572 - t906 * t501 + t789 * t515) * MDP(35) + (t747 * t532 + t538 * t690 + t906 * t579 + t903 * t591 + t663 * t804 + t694 * t971 + t788 * t754) * MDP(27) + (pkin(1) * t871 + t740 * t904 - t785 + t875) * MDP(10) + (t580 * t769 - t662 * t803) * MDP(15) + (-t672 * MDP(12) - t711 * MDP(19) - t554 * MDP(20) + t555 * MDP(21) - MDP(24) * t806 + t591 * MDP(25) - t694 * MDP(26) - t517 * MDP(27) + t518 * MDP(28)) * t863 + (-t531 * t689 + t806 * t907) * MDP(22) + (-t531 * t690 + t532 * t689 - t591 * t907 - t806 * t906) * MDP(23) + (-t775 - 0.2e1 * t954 + t968) * MDP(12) + (qJ(3) * t581 - t632 * t711 - t883 * t661 + t962 * t769 + ((t644 - t888) * t711 + t784) * t765) * MDP(20) + (qJ(3) * t580 + t905 * t711 + t883 * t662 - t962 * t765 + (-t711 * t888 + t784) * t769) * MDP(21) + (t930 * t955 + t775) * MDP(9) + (-t582 * qJ(3) - t596 * pkin(2) - t654 * t672 - t640 * t674 - g(1) * (-pkin(2) * t681 + qJ(3) * t682) - g(2) * (-pkin(2) * t679 + qJ(3) * t680) - t825 * t949 - t882 * t643) * MDP(14) + (t851 * t572 + t850 * t570 + (t509 + t512 * t768 + (-t570 * t763 + t572 * t768) * qJD(6)) * t689) * MDP(30) + t733 * MDP(8) + ((-pkin(2) * t766 + t945) * qJDD(1) + ((-qJ(3) * qJD(2) - t643 - t674) * t766 + (-pkin(2) * qJD(2) - t640 + t882) * t770) * qJD(1)) * t900 + (t747 * t531 - t538 * t689 + t907 * t579 - t637 * t663 + t694 * t972 + t788 * t755 + t903 * t806) * MDP(28) + ((-t581 - t939) * t769 + (-t580 - t940) * t765) * MDP(16) + (-t511 * t934 + t572 * t789) * MDP(29) + (0.2e1 * t712 + t713 + t882 * t740 + (-g(3) * t766 + (t654 * t770 + t672 * t766) * qJD(1)) * t761 + t785) * MDP(13) + (-t711 * t890 + t660 + (-t662 * t770 - t711 * t921) * t897) * MDP(17) + (-t711 * t889 - t922 + (-t711 * t766 * t769 - t661 * t770) * t897) * MDP(18) - MDP(4) * t840 + t798 * MDP(25) + t901 * MDP(5) * t930 + MDP(6) * t782 + (-t884 * t895 + t877) * t947 + t829 * MDP(24); MDP(11) * t782 + (t733 + t840) * MDP(12) + (-t740 ^ 2 - t758 * t930) * MDP(13) + (t643 * t740 - t783 - t954 + t968) * MDP(14) + (t661 * t740 - t711 * t803 + t660) * MDP(20) + (-t711 ^ 2 * t769 - t662 * t740 - t922) * MDP(21) + (-t591 * t740 + t829) * MDP(27) + (-t740 * t806 + t798) * MDP(28) + (-t690 * t523 + t689 * t512 - t907 * t570 - (-t763 * t906 - t768 * t843) * t881) * MDP(34) + (-t690 * t524 + t689 * t511 - t907 * t572 - (t763 * t843 - t768 * t906) * t881) * MDP(35); (t750 * t512 + t833 * t570 + (-t813 * t881 + t821) * t763 + (t844 * t881 + t787) * t768 + t967) * MDP(34) + (t750 * t511 + t821 * t768 + t833 * t572 - (t763 * t844 + t768 * t813) * t881 + t966) * MDP(35) + (t520 * t694 + (-t662 * t806 - t663 * t764 - t694 * t859) * pkin(4) + t977) * MDP(28) + (t519 * t694 + (-t591 * t662 + t663 * t956 - t694 * t887) * pkin(4) + t963) * MDP(27) + (-t581 + t939) * MDP(18) + (t580 - t940) * MDP(17) + (t555 * t711 - t610 * t662 - g(1) * t638 - g(2) * (t761 * t920 + t937) + g(3) * t676 + t778) * MDP(20) + t670 * MDP(19) + (-t661 ^ 2 + t662 ^ 2) * MDP(16) + (g(1) * t639 + g(2) * t848 + g(3) * t677 + t554 * t711 - t610 * t661 + t796) * MDP(21) - t662 * t661 * MDP(15) + t983; (t518 * t694 + t963) * MDP(27) + (t517 * t694 + t977) * MDP(28) + (-pkin(5) * t512 - t518 * t570 + (-pkin(11) * t527 - t517 * t881 + t982) * t763 + (-(-pkin(11) * qJD(6) - t548) * t881 + t787) * t768 + t967) * MDP(34) + (-pkin(5) * t511 - (t517 * t768 + t548 * t763) * t881 - t518 * t572 + t515 * t981 + (-t881 * t886 - t524) * pkin(11) + t966) * MDP(35) + t983; t572 * t570 * MDP(29) + (-t570 ^ 2 + t572 ^ 2) * MDP(30) + (-t570 * t881 + t867) * MDP(31) + (-t572 * t881 - t853) * MDP(32) + t527 * MDP(33) + (-t501 * t881 - t515 * t572 - g(1) * t584 - g(2) * t961 - g(3) * (-t668 * t763 + t716) + t855) * MDP(34) + (t820 * t881 + t515 * t570 + g(1) * t585 - g(2) * t960 - g(3) * (-t668 * t768 - t870) - t822) * MDP(35) + (-MDP(31) * t942 - MDP(32) * t572 - MDP(34) * t501 + MDP(35) * t820) * qJD(6);];
tau  = t1;
