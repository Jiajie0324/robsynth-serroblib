% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 00:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 00:45:11
% EndTime: 2019-05-07 00:46:14
% DurationCPUTime: 49.72s
% Computational Cost: add. (292698->942), mult. (656098->1448), div. (0->0), fcn. (500654->12), ass. (0->684)
t1027 = sin(qJ(1));
t1032 = cos(qJ(1));
t1021 = sin(pkin(6));
t1022 = cos(pkin(6));
t1031 = cos(qJ(2));
t1026 = sin(qJ(2));
t1012 = qJDD(1) * t1022 + qJDD(2);
t1019 = t1021 ^ 2;
t1033 = qJD(1) ^ 2;
t1129 = t1026 * t1033;
t1114 = t1019 * t1129;
t1107 = t1031 * t1114;
t978 = t1012 - t1107;
t1155 = t1026 * t978;
t1013 = t1022 * qJD(1) + qJD(2);
t1009 = t1013 ^ 2;
t1132 = t1019 * t1033;
t1191 = t1026 ^ 2;
t1010 = t1191 * t1132;
t963 = -t1010 - t1009;
t1070 = -t1031 * t963 + t1155;
t979 = (qJD(1) * qJD(2) * t1031 + qJDD(1) * t1026) * t1021;
t1130 = t1021 * t1031;
t1115 = qJD(1) * t1130;
t989 = t1013 * t1115;
t1200 = t989 + t979;
t875 = t1021 * t1200 + t1022 * t1070;
t1141 = t1031 * t978;
t930 = t1026 * t963 + t1141;
t818 = t1027 * t930 + t1032 * t875;
t1235 = pkin(7) * t818;
t821 = t1027 * t875 - t1032 * t930;
t1234 = pkin(7) * t821;
t977 = t1012 + t1107;
t1142 = t1031 * t977;
t1020 = t1031 ^ 2;
t1011 = t1020 * t1132;
t984 = -t1011 - t1009;
t1068 = t1026 * t984 + t1142;
t1131 = t1021 * t1026;
t1116 = qJD(1) * t1131;
t1006 = qJD(2) * t1116;
t1136 = qJD(1) * t1026;
t1117 = t1013 * t1136;
t1127 = qJDD(1) * t1031;
t952 = -t1006 + (-t1117 + t1127) * t1021;
t889 = t1021 * t952 + t1022 * t1068;
t1156 = t1026 * t977;
t942 = -t1031 * t984 + t1156;
t829 = -t1027 * t942 + t1032 * t889;
t1233 = pkin(7) * t829;
t832 = t1027 * t889 + t1032 * t942;
t1232 = pkin(7) * t832;
t883 = t1021 * t1068 - t1022 * t952;
t1231 = pkin(8) * (t1021 * t883 + t1022 * t889);
t1172 = t1022 * t1200;
t873 = t1021 * t1070 - t1172;
t1230 = pkin(8) * (t1021 * t873 + t1022 * t875);
t1229 = pkin(1) * t873;
t1228 = pkin(1) * t875;
t1227 = pkin(1) * t883;
t1226 = pkin(1) * t889;
t983 = t1011 - t1009;
t1067 = t1026 * t983 + t1141;
t951 = -t1006 + (t1117 + t1127) * t1021;
t887 = -t1021 * t951 + t1022 * t1067;
t940 = -t1031 * t983 + t1155;
t1225 = t1027 * t887 + t1032 * t940;
t982 = -t1010 + t1009;
t1069 = t1031 * t982 + t1156;
t950 = -t989 + t979;
t885 = -t1021 * t950 + t1022 * t1069;
t938 = t1026 * t982 - t1142;
t1224 = t1027 * t885 + t1032 * t938;
t1223 = -t1027 * t940 + t1032 * t887;
t1222 = -t1027 * t938 + t1032 * t885;
t1219 = pkin(8) * t930;
t1218 = pkin(8) * t942;
t1023 = sin(qJ(6));
t1024 = sin(qJ(5));
t1029 = cos(qJ(5));
t1025 = sin(qJ(4));
t1030 = cos(qJ(4));
t980 = t1021 * t1127 - t1006;
t1109 = t1025 * t1012 + t1030 * t980;
t969 = t1013 * t1030 - t1025 * t1115;
t914 = -qJD(4) * t969 - t1109;
t1066 = t1030 * t1012 - t1025 * t980;
t968 = -t1025 * t1013 - t1030 * t1115;
t915 = qJD(4) * t968 + t1066;
t1111 = t1024 * t915 - t1029 * t914;
t929 = t1024 * t968 + t1029 * t969;
t807 = -qJD(5) * t929 - t1111;
t1047 = qJDD(6) - t807;
t1028 = cos(qJ(6));
t1002 = qJD(4) + t1116;
t993 = qJD(5) + t1002;
t902 = t1023 * t929 - t1028 * t993;
t904 = t1023 * t993 + t1028 * t929;
t827 = t904 * t902;
t1199 = t1047 - t827;
t1209 = t1023 * t1199;
t927 = t1024 * t969 - t1029 * t968;
t857 = t929 * t927;
t1040 = qJDD(4) + t979;
t971 = qJDD(5) + t1040;
t1201 = -t857 + t971;
t1208 = t1024 * t1201;
t935 = t968 * t969;
t1198 = t935 + t1040;
t1207 = t1025 * t1198;
t1206 = t1028 * t1199;
t1205 = t1029 * t1201;
t1204 = t1030 * t1198;
t897 = (-t1025 * t968 + t1030 * t969) * t1002;
t1203 = t1026 * t1040 + t1031 * t897;
t1202 = qJ(3) * t1200;
t1101 = t1024 * t914 + t1029 * t915;
t808 = -qJD(5) * t927 + t1101;
t911 = t993 * t927;
t774 = t808 - t911;
t755 = -t902 * qJD(6) + t1023 * t971 + t1028 * t808;
t924 = qJD(6) + t927;
t843 = t924 * t902;
t727 = -t843 + t755;
t953 = t1002 * t968;
t881 = t915 - t953;
t1138 = qJD(1) * t1013;
t1197 = t1019 * (-t1022 * t1033 + t1138);
t1185 = pkin(2) * t1031;
t1102 = -qJ(3) * t1026 - t1185;
t1137 = qJD(1) * t1021;
t975 = t1102 * t1137;
t1195 = t975 * t1116 + qJDD(3);
t1112 = t1023 * t808 - t1028 * t971;
t724 = (qJD(6) - t924) * t904 + t1112;
t1194 = t1021 * t1067 + t1022 * t951;
t1193 = t1021 * t1069 + t1022 * t950;
t899 = t902 ^ 2;
t900 = t904 ^ 2;
t923 = t924 ^ 2;
t925 = t927 ^ 2;
t926 = t929 ^ 2;
t966 = t968 ^ 2;
t967 = t969 ^ 2;
t1192 = t993 ^ 2;
t996 = t1002 ^ 2;
t1190 = 2 * qJD(3);
t1189 = -pkin(2) - pkin(9);
t1071 = t1026 * t951 - t1031 * t950;
t986 = -t1010 - t1011;
t866 = -t1021 * t986 + t1022 * t1071;
t894 = t1026 * t950 + t1031 * t951;
t799 = t1027 * t894 + t1032 * t866;
t1188 = pkin(7) * t799;
t1187 = t980 * pkin(2);
t1186 = pkin(2) * t1026;
t1184 = pkin(5) * t1024;
t1183 = pkin(8) * t1021;
t1182 = pkin(8) * t1022;
t1181 = t1022 * g(3);
t1003 = -0.2e1 * qJD(3) * t1116;
t1108 = t1013 * t1116;
t987 = pkin(2) * t1108;
t1113 = -t987 + t1181;
t1179 = qJ(3) * t1031;
t1004 = g(1) * t1027 - t1032 * g(2);
t973 = qJDD(1) * pkin(1) + t1033 * t1183 + t1004;
t976 = pkin(3) * t1116 - pkin(9) * t1013;
t811 = -pkin(3) * t1011 - t979 * qJ(3) + t1003 + t1189 * t980 + (-t973 + (-t1013 * t1179 - t1026 * t976) * qJD(1)) * t1021 - t1113;
t1168 = t1022 * t973;
t1005 = g(1) * t1032 + g(2) * t1027;
t974 = -pkin(1) * t1033 + qJDD(1) * t1183 - t1005;
t1110 = t1026 * t974 - t1031 * t1168;
t1178 = t1009 * qJ(3);
t813 = t979 * pkin(3) - t1178 + t1189 * t1012 + (-pkin(9) * t1114 + (-pkin(3) * t1138 + g(3)) * t1021) * t1031 + t1110 + t1195;
t739 = t1025 * t811 - t1030 * t813;
t1035 = pkin(4) * t1198 - pkin(10) * t881 - t739;
t740 = t1025 * t813 + t1030 * t811;
t945 = pkin(4) * t1002 - pkin(10) * t969;
t706 = -pkin(4) * t966 + pkin(10) * t914 - t1002 * t945 + t740;
t632 = t1024 * t1035 + t1029 * t706;
t851 = pkin(5) * t927 - pkin(11) * t929;
t605 = -pkin(5) * t1192 + pkin(11) * t971 - t851 * t927 + t632;
t1103 = -g(3) * t1131 + t1026 * t1168;
t1038 = (t1137 * t975 + t974) * t1031 - t1009 * pkin(2) + t1103;
t1177 = t1012 * qJ(3);
t810 = t1177 - pkin(9) * t1011 + t980 * pkin(3) + (t1190 + t976) * t1013 + t1038;
t748 = -t914 * pkin(4) - t966 * pkin(10) + t969 * t945 + t810;
t652 = -t774 * pkin(11) + (t929 * t993 - t807) * pkin(5) + t748;
t575 = t1023 * t652 + t1028 * t605;
t1180 = pkin(1) * t866 + t894 * t1183;
t631 = t1024 * t706 - t1029 * t1035;
t604 = -t971 * pkin(5) - pkin(11) * t1192 + t851 * t929 + t631;
t1167 = t1023 * t604;
t746 = t1047 + t827;
t1166 = t1023 * t746;
t1165 = t1023 * t924;
t1164 = t1024 * t748;
t841 = t857 + t971;
t1163 = t1024 * t841;
t1162 = t1024 * t993;
t578 = t1024 * t632 - t1029 * t631;
t1161 = t1025 * t578;
t1160 = t1025 * t810;
t909 = -t935 + t1040;
t1159 = t1025 * t909;
t1158 = t1026 * t952;
t955 = t1021 * t973 + t1181;
t1157 = t1026 * t955;
t1154 = t1028 * t604;
t1153 = t1028 * t746;
t1152 = t1028 * t924;
t1151 = t1029 * t748;
t1150 = t1029 * t841;
t1149 = t1029 * t993;
t1148 = t1030 * t578;
t1147 = t1030 * t810;
t1146 = t1030 * t909;
t1144 = t1031 * t952;
t1143 = t1031 * t955;
t1140 = qJD(5) + t993;
t1135 = t1002 * t1025;
t1134 = t1002 * t1030;
t1133 = t1012 * t1021;
t1128 = qJD(4) + t1002;
t1126 = t1024 * t827;
t1125 = t1026 * t857;
t1124 = t1026 * t935;
t1123 = t1029 * t827;
t1122 = t1031 * t857;
t1121 = t1031 * t935;
t1120 = -pkin(5) * t1029 - pkin(4);
t864 = t1021 * t1071 + t1022 * t986;
t1119 = -pkin(1) * t864 + t894 * t1182;
t1118 = t1013 * t1137;
t574 = t1023 * t605 - t1028 * t652;
t534 = t1023 * t574 + t1028 * t575;
t579 = t1024 * t631 + t1029 * t632;
t958 = -t1004 * t1027 - t1032 * t1005;
t998 = qJDD(1) * t1032 - t1027 * t1033;
t1106 = -pkin(7) * t998 - g(3) * t1027;
t1105 = -t1157 - t1219;
t1104 = t1143 - t1218;
t533 = t1023 * t575 - t1028 * t574;
t658 = t1025 * t740 - t1030 * t739;
t659 = t1025 * t739 + t1030 * t740;
t519 = t1024 * t534 - t1029 * t604;
t520 = t1024 * t604 + t1029 * t534;
t492 = t1025 * t520 + t1030 * t519;
t1100 = t1026 * t533 - t1031 * t492;
t535 = t1025 * t579 + t1148;
t1099 = t1026 * t748 - t1031 * t535;
t728 = -t843 - t755;
t648 = -t1023 * t728 - t1028 * t724;
t783 = t899 + t900;
t621 = t1024 * t648 + t1029 * t783;
t622 = -t1024 * t783 + t1029 * t648;
t567 = t1025 * t622 + t1030 * t621;
t646 = -t1023 * t724 + t1028 * t728;
t1098 = t1026 * t646 - t1031 * t567;
t725 = (-qJD(6) - t924) * t904 - t1112;
t647 = -t1023 * t727 + t1028 * t725;
t826 = -t900 + t899;
t628 = t1024 * t647 + t1029 * t826;
t629 = -t1024 * t826 + t1029 * t647;
t576 = -t1025 * t629 - t1030 * t628;
t645 = t1023 * t725 + t1028 * t727;
t1097 = t1026 * t645 + t1031 * t576;
t793 = -t923 - t899;
t679 = t1028 * t793 - t1209;
t633 = t1024 * t679 + t1029 * t725;
t634 = -t1024 * t725 + t1029 * t679;
t580 = t1025 * t634 + t1030 * t633;
t678 = t1023 * t793 + t1206;
t1096 = t1026 * t678 - t1031 * t580;
t805 = -t900 - t923;
t687 = -t1023 * t805 - t1153;
t635 = t1024 * t687 - t1029 * t727;
t636 = t1024 * t727 + t1029 * t687;
t583 = t1025 * t636 + t1030 * t635;
t686 = t1028 * t805 - t1166;
t1095 = t1026 * t686 - t1031 * t583;
t839 = -t900 + t923;
t709 = -t1023 * t839 + t1206;
t640 = t1024 * t709 + t1029 * t728;
t642 = -t1024 * t728 + t1029 * t709;
t588 = -t1025 * t642 - t1030 * t640;
t707 = t1028 * t839 + t1209;
t1094 = t1026 * t707 + t1031 * t588;
t838 = t899 - t923;
t710 = t1028 * t838 - t1166;
t641 = t1024 * t710 + t1029 * t724;
t643 = -t1024 * t724 + t1029 * t710;
t589 = -t1025 * t643 - t1030 * t641;
t708 = t1023 * t838 + t1153;
t1093 = t1026 * t708 + t1031 * t589;
t754 = -qJD(6) * t904 - t1112;
t717 = -t1023 * t754 + t1152 * t902;
t674 = t1024 * t717 + t1123;
t676 = t1029 * t717 - t1126;
t610 = -t1025 * t676 - t1030 * t674;
t716 = t1028 * t754 + t1165 * t902;
t1092 = t1026 * t716 + t1031 * t610;
t719 = t1028 * t755 - t1165 * t904;
t675 = t1024 * t719 - t1123;
t677 = t1029 * t719 + t1126;
t611 = -t1025 * t677 - t1030 * t675;
t718 = t1023 * t755 + t1152 * t904;
t1091 = t1026 * t718 + t1031 * t611;
t771 = t1140 * t929 + t1111;
t697 = -t1024 * t771 + t1029 * t774;
t699 = -t1024 * t774 - t1029 * t771;
t624 = -t1025 * t699 - t1030 * t697;
t856 = t926 - t925;
t1090 = t1026 * t856 + t1031 * t624;
t1046 = (-qJD(5) + t993) * t929 - t1111;
t775 = t808 + t911;
t698 = t1024 * t1046 - t1029 * t775;
t700 = t1024 * t775 + t1029 * t1046;
t625 = t1025 * t700 + t1030 * t698;
t814 = -t925 - t926;
t1089 = t1026 * t814 - t1031 * t625;
t762 = (t1023 * t904 - t1028 * t902) * t924;
t711 = t1024 * t762 - t1029 * t1047;
t712 = t1024 * t1047 + t1029 * t762;
t638 = -t1025 * t712 - t1030 * t711;
t761 = (-t1023 * t902 - t1028 * t904) * t924;
t1088 = t1026 * t761 + t1031 * t638;
t1087 = t1026 * t810 - t1031 * t658;
t846 = -t1192 - t925;
t763 = t1024 * t846 + t1205;
t764 = t1029 * t846 - t1208;
t684 = t1025 * t764 + t1030 * t763;
t1086 = t1026 * t771 - t1031 * t684;
t893 = -t926 - t1192;
t785 = t1029 * t893 - t1163;
t786 = -t1024 * t893 - t1150;
t714 = t1025 * t786 + t1030 * t785;
t776 = -t1140 * t927 + t1101;
t1085 = t1026 * t776 - t1031 * t714;
t907 = -t926 + t1192;
t789 = t1029 * t907 + t1208;
t791 = -t1024 * t907 + t1205;
t720 = -t1025 * t791 - t1030 * t789;
t1084 = t1026 * t775 + t1031 * t720;
t906 = t925 - t1192;
t790 = t1024 * t906 + t1150;
t792 = t1029 * t906 - t1163;
t721 = -t1025 * t792 - t1030 * t790;
t1083 = t1026 * t1046 + t1031 * t721;
t833 = (-t1024 * t927 - t1029 * t929) * t993;
t834 = (t1024 * t929 - t1029 * t927) * t993;
t756 = -t1025 * t834 - t1030 * t833;
t1082 = t1026 * t971 + t1031 * t756;
t877 = t1128 * t969 + t1109;
t880 = t915 + t953;
t794 = t1025 * t877 - t1030 * t880;
t934 = t967 - t966;
t1081 = t1026 * t934 + t1031 * t794;
t1045 = (-qJD(4) + t1002) * t969 - t1109;
t795 = t1025 * t1045 - t1030 * t881;
t905 = -t966 - t967;
t1080 = t1026 * t905 - t1031 * t795;
t920 = -t996 - t966;
t835 = t1025 * t920 + t1204;
t1079 = t1026 * t877 - t1031 * t835;
t1036 = t1013 * t1190 + t1038;
t849 = t1036 + t1177;
t837 = -pkin(2) * t986 + t849;
t921 = g(3) * t1130 + t1110;
t1041 = t921 + t1195;
t1039 = -t1012 * pkin(2) + t1041;
t844 = (-t1009 - t986) * qJ(3) + t1039;
t1078 = t1026 * t844 + t1031 * t837;
t936 = -t967 - t996;
t847 = t1030 * t936 - t1159;
t882 = t1128 * t968 + t1066;
t1077 = t1026 * t882 - t1031 * t847;
t859 = -t1039 + t1178;
t1076 = t1026 * t849 + t1031 * t859;
t947 = -t967 + t996;
t852 = -t1030 * t947 - t1207;
t1075 = t1026 * t881 + t1031 * t852;
t946 = t966 - t996;
t853 = -t1025 * t946 - t1146;
t1074 = t1026 * t1045 + t1031 * t853;
t922 = t1031 * t974 + t1103;
t1073 = t1026 * t922 - t1031 * t921;
t845 = t1026 * t921 + t1031 * t922;
t1072 = t1031 * t1200 + t1158;
t957 = t1004 * t1032 - t1005 * t1027;
t765 = t1029 * t807 + t1162 * t927;
t766 = -t1024 * t807 + t1149 * t927;
t688 = -t1025 * t766 - t1030 * t765;
t1064 = t1031 * t688 - t1125;
t767 = t1024 * t808 + t1149 * t929;
t768 = t1029 * t808 - t1162 * t929;
t689 = -t1025 * t768 - t1030 * t767;
t1063 = t1031 * t689 + t1125;
t869 = -t1030 * t914 + t1135 * t968;
t1062 = t1031 * t869 + t1124;
t871 = -t1025 * t915 - t1134 * t969;
t1061 = t1031 * t871 - t1124;
t1060 = (-t1021 * t864 - t1022 * t866) * pkin(8);
t480 = pkin(10) * t520 + (-pkin(11) * t1024 + t1120) * t533;
t487 = -pkin(10) * t519 + (-pkin(11) * t1029 + t1184) * t533;
t493 = -t1025 * t519 + t1030 * t520;
t464 = pkin(3) * t533 - t1025 * t487 - t1030 * t480 + t1189 * t493;
t472 = pkin(3) * t492 + pkin(4) * t519 - pkin(5) * t604 + pkin(11) * t534 - qJ(3) * t493;
t485 = t1026 * t492 + t1031 * t533;
t1059 = pkin(8) * t485 + t1026 * t472 + t1031 * t464;
t524 = -pkin(11) * t646 - t533;
t503 = pkin(10) * t622 + t1024 * t524 + t1120 * t646;
t512 = -pkin(10) * t621 + t1029 * t524 + t1184 * t646;
t568 = -t1025 * t621 + t1030 * t622;
t479 = pkin(3) * t646 - t1025 * t512 - t1030 * t503 + t1189 * t568;
t494 = pkin(3) * t567 + pkin(4) * t621 + pkin(5) * t783 + pkin(11) * t648 - qJ(3) * t568 + t534;
t540 = t1026 * t567 + t1031 * t646;
t1058 = pkin(8) * t540 + t1026 * t494 + t1031 * t479;
t547 = -pkin(5) * t678 + t574;
t592 = -pkin(11) * t678 + t1167;
t516 = -pkin(4) * t678 + pkin(10) * t634 + t1024 * t592 + t1029 * t547;
t518 = -pkin(10) * t633 - t1024 * t547 + t1029 * t592;
t581 = -t1025 * t633 + t1030 * t634;
t482 = pkin(3) * t678 - t1025 * t518 - t1030 * t516 + t1189 * t581;
t506 = pkin(3) * t580 + pkin(4) * t633 + pkin(5) * t725 + pkin(11) * t679 - qJ(3) * t581 - t1154;
t552 = t1026 * t580 + t1031 * t678;
t1057 = pkin(8) * t552 + t1026 * t506 + t1031 * t482;
t548 = -pkin(5) * t686 + t575;
t593 = -pkin(11) * t686 + t1154;
t517 = -pkin(4) * t686 + pkin(10) * t636 + t1024 * t593 + t1029 * t548;
t521 = -pkin(10) * t635 - t1024 * t548 + t1029 * t593;
t584 = -t1025 * t635 + t1030 * t636;
t484 = pkin(3) * t686 - t1025 * t521 - t1030 * t517 + t1189 * t584;
t510 = pkin(3) * t583 + pkin(4) * t635 - pkin(5) * t727 + pkin(11) * t687 - qJ(3) * t584 + t1167;
t557 = t1026 * t583 + t1031 * t686;
t1056 = pkin(8) * t557 + t1026 * t510 + t1031 * t484;
t536 = t1030 * t579 - t1161;
t559 = -pkin(4) * t748 + pkin(10) * t579;
t491 = pkin(3) * t748 + pkin(10) * t1161 - t1030 * t559 + t1189 * t536;
t495 = pkin(3) * t535 + pkin(4) * t578 - qJ(3) * t536;
t530 = t1026 * t535 + t1031 * t748;
t1055 = pkin(8) * t530 + t1026 * t495 + t1031 * t491;
t546 = -pkin(4) * t814 + pkin(10) * t700 + t579;
t551 = -pkin(10) * t698 - t578;
t627 = -t1025 * t698 + t1030 * t700;
t505 = pkin(3) * t814 - t1025 * t551 - t1030 * t546 + t1189 * t627;
t549 = pkin(3) * t625 + pkin(4) * t698 - qJ(3) * t627;
t607 = t1026 * t625 + t1031 * t814;
t1054 = pkin(8) * t607 + t1026 * t549 + t1031 * t505;
t649 = -pkin(4) * t771 + pkin(10) * t764 - t1151;
t673 = -pkin(10) * t763 + t1164;
t685 = -t1025 * t763 + t1030 * t764;
t545 = pkin(3) * t771 - t1025 * t673 - t1030 * t649 + t1189 * t685;
t560 = pkin(3) * t684 + pkin(4) * t763 - qJ(3) * t685 - t631;
t654 = t1026 * t684 + t1031 * t771;
t1053 = pkin(8) * t654 + t1026 * t560 + t1031 * t545;
t653 = -pkin(4) * t776 + pkin(10) * t786 + t1164;
t680 = -pkin(10) * t785 + t1151;
t715 = -t1025 * t785 + t1030 * t786;
t554 = pkin(3) * t776 - t1025 * t680 - t1030 * t653 + t1189 * t715;
t572 = pkin(3) * t714 + pkin(4) * t785 - qJ(3) * t715 - t632;
t657 = t1026 * t714 + t1031 * t776;
t1052 = pkin(8) * t657 + t1026 * t572 + t1031 * t554;
t599 = pkin(3) * t810 + t1189 * t659;
t600 = pkin(3) * t658 - qJ(3) * t659;
t644 = t1026 * t658 + t1031 * t810;
t1051 = pkin(8) * t644 + t1026 * t600 + t1031 * t599;
t797 = t1025 * t881 + t1030 * t1045;
t615 = pkin(3) * t905 + t1189 * t797 - t659;
t731 = pkin(3) * t795 - qJ(3) * t797;
t758 = t1026 * t795 + t1031 * t905;
t1050 = pkin(8) * t758 + t1026 * t731 + t1031 * t615;
t836 = t1030 * t920 - t1207;
t666 = pkin(3) * t835 - qJ(3) * t836 - t739;
t682 = pkin(3) * t877 + t1189 * t836 + t1147;
t779 = t1026 * t835 + t1031 * t877;
t1049 = pkin(8) * t779 + t1026 * t666 + t1031 * t682;
t848 = -t1025 * t936 - t1146;
t668 = pkin(3) * t847 - qJ(3) * t848 - t740;
t694 = pkin(3) * t882 + t1189 * t848 - t1160;
t782 = t1026 * t847 + t1031 * t882;
t1048 = pkin(8) * t782 + t1026 * t668 + t1031 * t694;
t824 = t1187 + (t1136 * t1190 + t973) * t1021 + 0.2e1 * t1202 + t1113;
t1044 = t1026 * t824 + t1185 * t1200 + t1219;
t1037 = t1003 - t955 + t987 - t1202;
t825 = (-t952 - t980) * pkin(2) + t1037;
t1043 = -qJ(3) * t1158 + t1031 * t825 + t1218;
t780 = -t1026 * t859 + t1031 * t849;
t850 = t1037 - t1187;
t1042 = pkin(8) * t780 + t1102 * t850;
t1018 = t1021 * t1019;
t997 = qJDD(1) * t1027 + t1032 * t1033;
t994 = t1022 * t1012;
t985 = t1010 - t1011;
t981 = -pkin(7) * t997 + g(3) * t1032;
t954 = (t1020 + t1191) * t1118;
t944 = t1031 * t979 - t1118 * t1191;
t943 = -t1020 * t1118 - t1026 * t980;
t933 = t1027 * t1133 + t1032 * t954;
t932 = t1027 * t954 - t1032 * t1133;
t919 = (t1018 * t1031 * t1033 + t1172) * t1026;
t918 = (t1021 * t979 + t1031 * t1197) * t1026;
t917 = (t1021 * t980 - t1026 * t1197) * t1031;
t916 = (-t1018 * t1129 + (t980 - t1108) * t1022) * t1031;
t901 = -pkin(2) * t950 + qJ(3) * t951;
t898 = (t1025 * t969 + t1030 * t968) * t1002;
t895 = -t1026 * t1200 + t1144;
t872 = t1030 * t915 - t1135 * t969;
t870 = -t1025 * t914 - t1134 * t968;
t868 = -t1026 * t897 + t1031 * t1040;
t867 = -t1021 * t985 + t1022 * t1072;
t865 = t1021 * t1072 + t1022 * t985;
t863 = -t1027 * t919 + t1032 * t944;
t862 = -t1027 * t916 + t1032 * t943;
t861 = t1027 * t944 + t1032 * t919;
t860 = t1027 * t943 + t1032 * t916;
t855 = t1030 * t946 - t1159;
t854 = -t1025 * t947 + t1204;
t828 = (-t1009 - t984) * qJ(3) + (-t1012 - t977) * pkin(2) + t1041;
t823 = -t1026 * t871 - t1121;
t822 = -t1026 * t869 + t1121;
t817 = t1021 * t955 + t1022 * t1073;
t816 = t1021 * t1073 - t1022 * t955;
t815 = -pkin(2) * t963 + (t1012 + t978) * qJ(3) + t1036;
t803 = -t1021 * t898 + t1022 * t1203;
t802 = -t1027 * t867 + t1032 * t895;
t801 = -t1027 * t866 + t1032 * t894;
t800 = t1027 * t895 + t1032 * t867;
t798 = pkin(7) * t801;
t796 = -t1025 * t880 - t1030 * t877;
t788 = -t1026 * t852 + t1031 * t881;
t787 = -t1026 * t853 + t1031 * t1045;
t784 = -t1157 - t1231;
t781 = pkin(2) * t859 + qJ(3) * t849;
t778 = -t1143 + t1230;
t777 = t1021 * t921 + t1022 * t1104 - t1227;
t770 = -t1026 * t794 + t1031 * t934;
t769 = t1021 * t922 + t1022 * t1105 + t1229;
t760 = -t1021 * t872 + t1022 * t1061;
t759 = -t1021 * t870 + t1022 * t1062;
t757 = -t1025 * t833 + t1030 * t834;
t753 = -pkin(1) * t816 + t1182 * t845;
t752 = -t1027 * t817 + t1032 * t845;
t751 = t1027 * t845 + t1032 * t817;
t750 = -t1026 * t756 + t1031 * t971;
t749 = t1022 * t845 + t1119;
t744 = -t1021 * t854 + t1022 * t1075;
t743 = -t1021 * t855 + t1022 * t1074;
t742 = (-t1021 * t816 - t1022 * t817) * pkin(8);
t741 = t1060 - t1073;
t738 = -t1021 * t850 + t1022 * t1076;
t737 = t1021 * t1076 + t1022 * t850;
t736 = -t1021 * t848 + t1022 * t1077;
t735 = t1021 * t1077 + t1022 * t848;
t734 = -t1021 * t836 + t1022 * t1079;
t733 = t1021 * t1079 + t1022 * t836;
t732 = -qJ(3) * t1144 - t1026 * t825 + t1231;
t730 = t1031 * t824 - t1200 * t1186 - t1230;
t723 = -t1025 * t790 + t1030 * t792;
t722 = -t1025 * t789 + t1030 * t791;
t713 = -t1021 * t796 + t1022 * t1081;
t705 = -t1021 * t797 + t1022 * t1080;
t704 = t1021 * t1080 + t1022 * t797;
t702 = -t1026 * t837 + t1031 * t844 + t1060;
t701 = -t1021 * t828 + t1022 * t1043 + t1227;
t693 = qJ(3) * t882 + t1189 * t847 + t1147;
t692 = -t1021 * t815 + t1022 * t1044 - t1229;
t691 = -t1025 * t767 + t1030 * t768;
t690 = -t1025 * t765 + t1030 * t766;
t683 = -t1021 * t901 + t1022 * t1078 + t1119;
t681 = qJ(3) * t877 + t1189 * t835 + t1160;
t672 = -t1027 * t736 + t1032 * t782;
t671 = t1027 * t782 + t1032 * t736;
t670 = -t1027 * t738 + t1032 * t780;
t669 = t1027 * t780 + t1032 * t738;
t667 = -t1021 * t757 + t1022 * t1082;
t665 = -t1027 * t734 + t1032 * t779;
t664 = t1027 * t779 + t1032 * t734;
t663 = -t1026 * t689 + t1122;
t662 = -t1026 * t688 - t1122;
t661 = -t1026 * t720 + t1031 * t775;
t660 = -t1026 * t721 + t1031 * t1046;
t656 = -t1027 * t705 + t1032 * t758;
t655 = t1027 * t758 + t1032 * t705;
t639 = -t1025 * t711 + t1030 * t712;
t637 = (-t1179 + t1186) * t850 + (-t1021 * t737 - t1022 * t738) * pkin(8);
t626 = -t1025 * t697 + t1030 * t699;
t623 = -pkin(1) * t737 - t1021 * t781 + t1022 * t1042;
t620 = -t1021 * t722 + t1022 * t1084;
t619 = -t1021 * t723 + t1022 * t1083;
t618 = -t1026 * t624 + t1031 * t856;
t617 = -t1021 * t715 + t1022 * t1085;
t616 = t1021 * t1085 + t1022 * t715;
t614 = qJ(3) * t905 + t1189 * t795 - t658;
t613 = -t1025 * t675 + t1030 * t677;
t612 = -t1025 * t674 + t1030 * t676;
t609 = -t1021 * t691 + t1022 * t1063;
t608 = -t1021 * t690 + t1022 * t1064;
t606 = -t1026 * t638 + t1031 * t761;
t602 = -t1021 * t685 + t1022 * t1086;
t601 = t1021 * t1086 + t1022 * t685;
t598 = qJ(3) * t810 + t1189 * t658;
t597 = -t1021 * t659 + t1022 * t1087;
t596 = t1021 * t1087 + t1022 * t659;
t595 = -t1026 * t611 + t1031 * t718;
t594 = -t1026 * t610 + t1031 * t716;
t591 = -t1025 * t641 + t1030 * t643;
t590 = -t1025 * t640 + t1030 * t642;
t587 = -t1026 * t694 + t1031 * t668 + (-t1021 * t735 - t1022 * t736) * pkin(8);
t586 = -t1027 * t617 + t1032 * t657;
t585 = t1027 * t657 + t1032 * t617;
t582 = -t1026 * t682 + t1031 * t666 + (-t1021 * t733 - t1022 * t734) * pkin(8);
t577 = -t1025 * t628 + t1030 * t629;
t571 = -t1027 * t602 + t1032 * t654;
t570 = t1027 * t654 + t1032 * t602;
t569 = -t1021 * t639 + t1022 * t1088;
t566 = -t1021 * t626 + t1022 * t1090;
t565 = -pkin(1) * t735 - t1021 * t693 + t1022 * t1048;
t564 = -t1021 * t627 + t1022 * t1089;
t563 = t1021 * t1089 + t1022 * t627;
t562 = -t1026 * t589 + t1031 * t708;
t561 = -t1026 * t588 + t1031 * t707;
t558 = -pkin(1) * t733 - t1021 * t681 + t1022 * t1049;
t556 = -t1027 * t597 + t1032 * t644;
t555 = t1027 * t644 + t1032 * t597;
t553 = qJ(3) * t776 - t1025 * t653 + t1030 * t680 + t1189 * t714;
t550 = -t1026 * t615 + t1031 * t731 + (-t1021 * t704 - t1022 * t705) * pkin(8);
t544 = qJ(3) * t771 - t1025 * t649 + t1030 * t673 + t1189 * t684;
t543 = -t1021 * t613 + t1022 * t1091;
t542 = -t1021 * t612 + t1022 * t1092;
t541 = -t1026 * t576 + t1031 * t645;
t539 = -t1027 * t564 + t1032 * t607;
t538 = t1027 * t607 + t1032 * t564;
t537 = -pkin(1) * t704 - t1021 * t614 + t1022 * t1050;
t532 = -t1021 * t591 + t1022 * t1093;
t531 = -t1021 * t590 + t1022 * t1094;
t529 = -t1021 * t584 + t1022 * t1095;
t528 = t1021 * t1095 + t1022 * t584;
t527 = -t1021 * t581 + t1022 * t1096;
t526 = t1021 * t1096 + t1022 * t581;
t525 = -t1021 * t577 + t1022 * t1097;
t523 = -t1021 * t568 + t1022 * t1098;
t522 = t1021 * t1098 + t1022 * t568;
t515 = -t1026 * t599 + t1031 * t600 + (-t1021 * t596 - t1022 * t597) * pkin(8);
t514 = -t1027 * t529 + t1032 * t557;
t513 = t1027 * t557 + t1032 * t529;
t511 = -t1026 * t554 + t1031 * t572 + (-t1021 * t616 - t1022 * t617) * pkin(8);
t509 = -t1027 * t527 + t1032 * t552;
t508 = t1027 * t552 + t1032 * t527;
t507 = -pkin(1) * t596 - t1021 * t598 + t1022 * t1051;
t504 = qJ(3) * t814 - t1025 * t546 + t1030 * t551 + t1189 * t625;
t502 = -t1026 * t545 + t1031 * t560 + (-t1021 * t601 - t1022 * t602) * pkin(8);
t501 = -t1027 * t523 + t1032 * t540;
t500 = t1027 * t540 + t1032 * t523;
t499 = -t1021 * t536 + t1022 * t1099;
t498 = t1021 * t1099 + t1022 * t536;
t497 = -pkin(1) * t616 - t1021 * t553 + t1022 * t1052;
t496 = -pkin(1) * t601 - t1021 * t544 + t1022 * t1053;
t490 = -pkin(10) * t1148 + qJ(3) * t748 - t1025 * t559 + t1189 * t535;
t489 = -t1027 * t499 + t1032 * t530;
t488 = t1027 * t530 + t1032 * t499;
t486 = -t1026 * t505 + t1031 * t549 + (-t1021 * t563 - t1022 * t564) * pkin(8);
t483 = qJ(3) * t686 - t1025 * t517 + t1030 * t521 + t1189 * t583;
t481 = qJ(3) * t678 - t1025 * t516 + t1030 * t518 + t1189 * t580;
t478 = qJ(3) * t646 - t1025 * t503 + t1030 * t512 + t1189 * t567;
t477 = -pkin(1) * t563 - t1021 * t504 + t1022 * t1054;
t476 = -t1021 * t493 + t1022 * t1100;
t475 = t1021 * t1100 + t1022 * t493;
t474 = -t1026 * t484 + t1031 * t510 + (-t1021 * t528 - t1022 * t529) * pkin(8);
t473 = -t1026 * t482 + t1031 * t506 + (-t1021 * t526 - t1022 * t527) * pkin(8);
t471 = -t1026 * t491 + t1031 * t495 + (-t1021 * t498 - t1022 * t499) * pkin(8);
t470 = -t1027 * t476 + t1032 * t485;
t469 = t1027 * t485 + t1032 * t476;
t468 = -t1026 * t479 + t1031 * t494 + (-t1021 * t522 - t1022 * t523) * pkin(8);
t467 = -pkin(1) * t528 - t1021 * t483 + t1022 * t1056;
t466 = -pkin(1) * t526 - t1021 * t481 + t1022 * t1057;
t465 = -pkin(1) * t498 - t1021 * t490 + t1022 * t1055;
t463 = qJ(3) * t533 - t1025 * t480 + t1030 * t487 + t1189 * t492;
t462 = -pkin(1) * t522 - t1021 * t478 + t1022 * t1058;
t461 = -t1026 * t464 + t1031 * t472 + (-t1021 * t475 - t1022 * t476) * pkin(8);
t460 = -pkin(1) * t475 - t1021 * t463 + t1022 * t1059;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t997, -t998, 0, t958, 0, 0, 0, 0, 0, 0, -t832, t821, t801, t752, 0, 0, 0, 0, 0, 0, t801, t832, -t821, t670, 0, 0, 0, 0, 0, 0, t665, t672, t656, t556, 0, 0, 0, 0, 0, 0, t571, t586, t539, t489, 0, 0, 0, 0, 0, 0, t509, t514, t501, t470; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t998, -t997, 0, t957, 0, 0, 0, 0, 0, 0, t829, -t818, t799, t751, 0, 0, 0, 0, 0, 0, t799, -t829, t818, t669, 0, 0, 0, 0, 0, 0, t664, t671, t655, t555, 0, 0, 0, 0, 0, 0, t570, t585, t538, t488, 0, 0, 0, 0, 0, 0, t508, t513, t500, t469; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t883, -t873, t864, t816, 0, 0, 0, 0, 0, 0, t864, -t883, t873, t737, 0, 0, 0, 0, 0, 0, t733, t735, t704, t596, 0, 0, 0, 0, 0, 0, t601, t616, t563, t498, 0, 0, 0, 0, 0, 0, t526, t528, t522, t475; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t998, 0, -t997, 0, t1106, -t981, -t957, -pkin(7) * t957, t863, t802, -t1224, t862, -t1225, t933, -t1027 * t777 + t1032 * t784 - t1233, -t1027 * t769 + t1032 * t778 + t1235, -t1027 * t749 + t1032 * t741 - t1188, -pkin(7) * t751 - t1027 * t753 + t1032 * t742, t933, t1224, t1225, t863, t802, t862, -t1027 * t683 + t1032 * t702 - t1188, -t1027 * t701 + t1032 * t732 + t1233, -t1027 * t692 + t1032 * t730 - t1235, -pkin(7) * t669 - t1027 * t623 + t1032 * t637, -t1027 * t760 + t1032 * t823, -t1027 * t713 + t1032 * t770, -t1027 * t744 + t1032 * t788, -t1027 * t759 + t1032 * t822, -t1027 * t743 + t1032 * t787, -t1027 * t803 + t1032 * t868, -pkin(7) * t664 - t1027 * t558 + t1032 * t582, -pkin(7) * t671 - t1027 * t565 + t1032 * t587, -pkin(7) * t655 - t1027 * t537 + t1032 * t550, -pkin(7) * t555 - t1027 * t507 + t1032 * t515, -t1027 * t609 + t1032 * t663, -t1027 * t566 + t1032 * t618, -t1027 * t620 + t1032 * t661, -t1027 * t608 + t1032 * t662, -t1027 * t619 + t1032 * t660, -t1027 * t667 + t1032 * t750, -pkin(7) * t570 - t1027 * t496 + t1032 * t502, -pkin(7) * t585 - t1027 * t497 + t1032 * t511, -pkin(7) * t538 - t1027 * t477 + t1032 * t486, -pkin(7) * t488 - t1027 * t465 + t1032 * t471, -t1027 * t543 + t1032 * t595, -t1027 * t525 + t1032 * t541, -t1027 * t531 + t1032 * t561, -t1027 * t542 + t1032 * t594, -t1027 * t532 + t1032 * t562, -t1027 * t569 + t1032 * t606, -pkin(7) * t508 - t1027 * t466 + t1032 * t473, -pkin(7) * t513 - t1027 * t467 + t1032 * t474, -pkin(7) * t500 - t1027 * t462 + t1032 * t468, -pkin(7) * t469 - t1027 * t460 + t1032 * t461; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t997, 0, t998, 0, t981, t1106, t958, pkin(7) * t958, t861, t800, t1222, t860, t1223, t932, t1027 * t784 + t1032 * t777 - t1232, t1027 * t778 + t1032 * t769 + t1234, t1027 * t741 + t1032 * t749 + t798, pkin(7) * t752 + t1027 * t742 + t1032 * t753, t932, -t1222, -t1223, t861, t800, t860, t1027 * t702 + t1032 * t683 + t798, t1027 * t732 + t1032 * t701 + t1232, t1027 * t730 + t1032 * t692 - t1234, pkin(7) * t670 + t1027 * t637 + t1032 * t623, t1027 * t823 + t1032 * t760, t1027 * t770 + t1032 * t713, t1027 * t788 + t1032 * t744, t1027 * t822 + t1032 * t759, t1027 * t787 + t1032 * t743, t1027 * t868 + t1032 * t803, pkin(7) * t665 + t1027 * t582 + t1032 * t558, pkin(7) * t672 + t1027 * t587 + t1032 * t565, pkin(7) * t656 + t1027 * t550 + t1032 * t537, pkin(7) * t556 + t1027 * t515 + t1032 * t507, t1027 * t663 + t1032 * t609, t1027 * t618 + t1032 * t566, t1027 * t661 + t1032 * t620, t1027 * t662 + t1032 * t608, t1027 * t660 + t1032 * t619, t1027 * t750 + t1032 * t667, pkin(7) * t571 + t1027 * t502 + t1032 * t496, pkin(7) * t586 + t1027 * t511 + t1032 * t497, pkin(7) * t539 + t1027 * t486 + t1032 * t477, pkin(7) * t489 + t1027 * t471 + t1032 * t465, t1027 * t595 + t1032 * t543, t1027 * t541 + t1032 * t525, t1027 * t561 + t1032 * t531, t1027 * t594 + t1032 * t542, t1027 * t562 + t1032 * t532, t1027 * t606 + t1032 * t569, pkin(7) * t509 + t1027 * t473 + t1032 * t466, pkin(7) * t514 + t1027 * t474 + t1032 * t467, pkin(7) * t501 + t1027 * t468 + t1032 * t462, pkin(7) * t470 + t1027 * t461 + t1032 * t460; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1004, t1005, 0, 0, t918, t865, t1193, t917, t1194, t994, t1021 * t1104 - t1022 * t921 + t1226, t1021 * t1105 - t1022 * t922 - t1228, t1021 * t845 + t1180, pkin(1) * t817 + t1183 * t845, t994, -t1193, -t1194, t918, t865, t917, t1021 * t1078 + t1022 * t901 + t1180, t1021 * t1043 + t1022 * t828 - t1226, t1021 * t1044 + t1022 * t815 + t1228, pkin(1) * t738 + t1021 * t1042 + t1022 * t781, t1021 * t1061 + t1022 * t872, t1021 * t1081 + t1022 * t796, t1021 * t1075 + t1022 * t854, t1021 * t1062 + t1022 * t870, t1021 * t1074 + t1022 * t855, t1021 * t1203 + t1022 * t898, pkin(1) * t734 + t1021 * t1049 + t1022 * t681, pkin(1) * t736 + t1021 * t1048 + t1022 * t693, pkin(1) * t705 + t1021 * t1050 + t1022 * t614, pkin(1) * t597 + t1021 * t1051 + t1022 * t598, t1021 * t1063 + t1022 * t691, t1021 * t1090 + t1022 * t626, t1021 * t1084 + t1022 * t722, t1021 * t1064 + t1022 * t690, t1021 * t1083 + t1022 * t723, t1021 * t1082 + t1022 * t757, pkin(1) * t602 + t1021 * t1053 + t1022 * t544, pkin(1) * t617 + t1021 * t1052 + t1022 * t553, pkin(1) * t564 + t1021 * t1054 + t1022 * t504, pkin(1) * t499 + t1021 * t1055 + t1022 * t490, t1021 * t1091 + t1022 * t613, t1021 * t1097 + t1022 * t577, t1021 * t1094 + t1022 * t590, t1021 * t1092 + t1022 * t612, t1021 * t1093 + t1022 * t591, t1021 * t1088 + t1022 * t639, pkin(1) * t527 + t1021 * t1057 + t1022 * t481, pkin(1) * t529 + t1021 * t1056 + t1022 * t483, pkin(1) * t523 + t1021 * t1058 + t1022 * t478, pkin(1) * t476 + t1021 * t1059 + t1022 * t463;];
tauB_reg  = t1;
