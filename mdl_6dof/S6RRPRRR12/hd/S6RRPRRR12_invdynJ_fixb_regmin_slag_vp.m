% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR12_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR12_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR12_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:41:48
% EndTime: 2019-03-09 14:42:11
% DurationCPUTime: 10.66s
% Computational Cost: add. (10562->621), mult. (24855->850), div. (0->0), fcn. (19708->14), ass. (0->323)
t277 = cos(qJ(6));
t389 = qJD(6) * t277;
t271 = cos(pkin(6));
t400 = qJD(1) * t271;
t249 = qJD(2) + t400;
t274 = sin(qJ(4));
t278 = cos(qJ(4));
t270 = sin(pkin(6));
t279 = cos(qJ(2));
t398 = qJD(1) * t279;
t369 = t270 * t398;
t170 = -t274 * t249 - t278 * t369;
t346 = t274 * t369;
t171 = t249 * t278 - t346;
t273 = sin(qJ(5));
t455 = cos(qJ(5));
t101 = -t455 * t170 + t171 * t273;
t483 = t101 * t277;
t490 = t389 + t483;
t236 = pkin(8) * t369;
t275 = sin(qJ(2));
t378 = pkin(1) * t400;
t183 = t275 * t378 + t236;
t158 = pkin(3) * t369 + t183;
t142 = t278 * t158;
t399 = qJD(1) * t275;
t370 = t270 * t399;
t240 = pkin(2) * t370;
t437 = qJ(3) * t279;
t333 = pkin(9) * t275 - t437;
t401 = qJD(1) * t270;
t154 = t333 * t401 + t240;
t394 = qJD(4) * t274;
t416 = t274 * t275;
t281 = -pkin(2) - pkin(9);
t447 = pkin(10) - t281;
t489 = t447 * t394 + t154 * t274 - t142 - (pkin(4) * t279 - pkin(10) * t416) * t401;
t207 = t447 * t278;
t347 = t278 * t370;
t405 = t278 * t154 + t274 * t158;
t488 = pkin(10) * t347 + qJD(4) * t207 + t405;
t384 = qJD(1) * qJD(2);
t364 = t275 * t384;
t345 = t270 * t364;
t381 = qJDD(1) * t279;
t480 = -t270 * t381 + t345;
t316 = t273 * t170 + t171 * t455;
t383 = qJDD(1) * t271;
t242 = qJDD(2) + t383;
t90 = qJD(4) * t170 + t278 * t242 + t274 * t480;
t91 = -qJD(4) * t346 + t242 * t274 + (qJD(4) * t249 - t480) * t278;
t42 = qJD(5) * t316 + t273 * t90 + t455 * t91;
t37 = qJDD(6) + t42;
t34 = t277 * t37;
t385 = -qJD(6) - t101;
t272 = sin(qJ(6));
t441 = t272 * t385;
t220 = qJD(4) + t370;
t203 = qJD(5) + t220;
t80 = -t277 * t203 + t272 * t316;
t487 = t316 * t80 - t385 * t441 + t34;
t363 = t279 * t384;
t382 = qJDD(1) * t275;
t306 = t363 + t382;
t297 = t306 * t270;
t179 = qJDD(4) + t297;
t172 = qJDD(5) + t179;
t390 = qJD(6) * t272;
t365 = t455 * qJD(5);
t391 = qJD(5) * t273;
t41 = t170 * t365 - t171 * t391 - t273 * t91 + t455 * t90;
t21 = t272 * t172 + t203 * t389 + t277 * t41 - t316 * t390;
t19 = t21 * t272;
t82 = t203 * t272 + t277 * t316;
t486 = t490 * t82 + t19;
t33 = t272 * t37;
t485 = -t316 * t82 - t385 * t490 + t33;
t276 = sin(qJ(1));
t411 = t276 * t279;
t280 = cos(qJ(1));
t412 = t275 * t280;
t190 = t271 * t411 + t412;
t269 = qJ(4) + qJ(5);
t263 = sin(t269);
t264 = cos(t269);
t421 = t270 * t276;
t127 = t190 * t264 - t263 * t421;
t419 = t270 * t280;
t420 = t270 * t279;
t410 = t279 * t280;
t414 = t275 * t276;
t188 = -t271 * t410 + t414;
t429 = t188 * t264;
t303 = -g(3) * (-t263 * t271 - t264 * t420) - g(2) * (t263 * t419 + t429) - g(1) * t127;
t182 = pkin(8) * t370 - t279 * t378;
t386 = qJD(3) + t182;
t387 = pkin(3) * t370 + t386;
t108 = t249 * t281 + t387;
t438 = qJ(3) * t275;
t304 = t279 * t281 - pkin(1) - t438;
t152 = t304 * t270;
t126 = qJD(1) * t152;
t65 = t108 * t274 + t126 * t278;
t422 = t270 * t275;
t251 = pkin(8) * t422;
t377 = pkin(1) * qJD(2) * t271;
t351 = qJD(1) * t377;
t375 = pkin(1) * t383;
t348 = qJD(2) * t236 + qJDD(1) * t251 + t275 * t351 - t279 * t375;
t327 = qJDD(3) + t348;
t71 = pkin(3) * t297 + t242 * t281 + t327;
t215 = pkin(2) * t345;
t395 = qJD(3) * t275;
t292 = qJD(2) * t333 - t395;
t77 = t215 + (qJD(1) * t292 + qJDD(1) * t304) * t270;
t290 = -qJD(4) * t65 - t274 * t77 + t278 * t71;
t14 = pkin(4) * t179 - pkin(10) * t90 + t290;
t393 = qJD(4) * t278;
t309 = -t108 * t393 + t126 * t394 - t274 * t71 - t278 * t77;
t16 = -pkin(10) * t91 - t309;
t55 = pkin(10) * t170 + t65;
t376 = t455 * t55;
t64 = t278 * t108 - t126 * t274;
t54 = -pkin(10) * t171 + t64;
t52 = pkin(4) * t220 + t54;
t28 = t273 * t52 + t376;
t288 = -qJD(5) * t28 + t455 * t14 - t273 * t16;
t5 = -t172 * pkin(5) - t288;
t299 = t303 - t5;
t440 = t273 * t55;
t27 = t455 * t52 - t440;
t25 = -t203 * pkin(5) - t27;
t484 = t101 * t25;
t482 = t316 * t101;
t469 = t455 * qJD(4) + t365;
t137 = -t273 * t393 - t274 * t469 - t278 * t391;
t328 = t455 * t370;
t156 = -t273 * t347 - t274 * t328;
t407 = t137 + t156;
t417 = t273 * t274;
t406 = -t273 * t394 - t274 * t391 - t370 * t417 + (t328 + t469) * t278;
t479 = -t101 ^ 2 + t316 ^ 2;
t58 = pkin(5) * t316 + pkin(11) * t101;
t478 = t101 * t203 + t41;
t128 = t190 * t263 + t264 * t421;
t177 = -t263 * t420 + t264 * t271;
t319 = -t188 * t263 + t264 * t419;
t359 = -t273 * t14 - t455 * t16 - t52 * t365 + t55 * t391;
t223 = t249 * qJ(3);
t120 = t223 + t158;
t89 = -pkin(4) * t170 + t120;
t477 = g(1) * t128 - g(2) * t319 + g(3) * t177 + t101 * t89 + t359;
t22 = qJD(6) * t82 - t277 * t172 + t272 * t41;
t329 = t272 * t82 + t277 * t80;
t476 = -t101 * t329 + t21 * t277 - t272 * t22 - t80 * t389 - t390 * t82;
t266 = t270 ^ 2;
t380 = 0.2e1 * t266;
t473 = t385 * t316;
t206 = t447 * t274;
t314 = t273 * t206 - t207 * t455;
t472 = -qJD(5) * t314 - t273 * t489 + t488 * t455;
t147 = -t206 * t455 - t273 * t207;
t471 = -qJD(5) * t147 + t488 * t273 + t455 * t489;
t371 = -pkin(1) * t279 - pkin(2);
t135 = pkin(3) * t422 + t251 + (-pkin(9) + t371) * t271;
t408 = t274 * t135 + t278 * t152;
t185 = t271 * t274 + t278 * t420;
t372 = t274 * t420;
t186 = t271 * t278 - t372;
t114 = -t273 * t185 + t186 * t455;
t413 = t275 * t277;
t225 = t270 * t413;
t470 = -t114 * t272 + t225;
t404 = pkin(4) * t393 - (-pkin(4) * t278 - pkin(3)) * t370 + t386;
t334 = pkin(2) * t279 + t438;
t324 = -pkin(1) - t334;
t175 = t324 * t270;
t164 = qJD(1) * t175;
t468 = t164 * t370 + qJDD(3);
t26 = t203 * pkin(11) + t28;
t47 = pkin(5) * t101 - pkin(11) * t316 + t89;
t332 = t26 * t272 - t277 * t47;
t467 = t25 * t390 + t316 * t332;
t11 = t26 * t277 + t272 * t47;
t465 = t11 * t316 + t25 * t389 - t272 * t299;
t464 = -t89 * t316 + t288 + t303;
t462 = t120 * t220 + t281 * t179;
t461 = t203 * t316 - t42;
t189 = t271 * t412 + t411;
t460 = t189 * t277 + t272 * t319;
t459 = -t189 * t272 + t277 * t319;
t356 = t278 * t135 - t152 * t274;
t62 = pkin(4) * t422 - pkin(10) * t186 + t356;
t67 = -pkin(10) * t185 + t408;
t320 = t273 * t62 + t455 * t67;
t397 = qJD(2) * t275;
t368 = t270 * t397;
t144 = -qJD(4) * t185 + t274 * t368;
t235 = pkin(2) * t368;
t123 = t270 * t292 + t235;
t454 = pkin(1) * t275;
t254 = t271 * t454;
t456 = pkin(3) + pkin(8);
t159 = (t420 * t456 + t254) * qJD(2);
t289 = -qJD(4) * t408 - t123 * t274 + t278 * t159;
t396 = qJD(2) * t279;
t367 = t270 * t396;
t38 = pkin(4) * t367 - pkin(10) * t144 + t289;
t145 = -qJD(4) * t372 + t271 * t393 - t278 * t368;
t305 = t278 * t123 + t135 * t393 - t152 * t394 + t274 * t159;
t46 = -pkin(10) * t145 + t305;
t458 = -qJD(5) * t320 - t273 * t46 + t38 * t455;
t4 = pkin(11) * t172 - t359;
t221 = t242 * qJ(3);
t222 = t249 * qJD(3);
t349 = pkin(8) * t480 - t275 * t375 - t279 * t351;
t92 = -t221 - t222 + t349;
t73 = -pkin(3) * t480 - t92;
t48 = pkin(4) * t91 + t73;
t9 = pkin(5) * t42 - pkin(11) * t41 + t48;
t1 = -t332 * qJD(6) + t272 * t9 + t277 * t4;
t198 = -t278 * t455 + t417;
t199 = t273 * t278 + t274 * t455;
t256 = t274 * pkin(4) + qJ(3);
t124 = pkin(5) * t199 + pkin(11) * t198 + t256;
t191 = -t271 * t414 + t410;
t339 = g(1) * t191 + g(2) * t189;
t457 = t263 * t339 - (-pkin(5) * t406 + pkin(11) * t407 + qJD(6) * t147 - t404) * t385 - t124 * t37;
t453 = pkin(2) * t242;
t451 = g(1) * t280;
t448 = g(3) * t270;
t443 = pkin(5) * t369 - t471;
t439 = t37 * t199;
t432 = t170 * t220;
t431 = t171 * t220;
t430 = t179 * t274;
t428 = t188 * t278;
t425 = t198 * t277;
t424 = t242 * t271;
t423 = t266 * qJD(1) ^ 2;
t418 = t272 * t275;
t415 = t274 * t280;
t403 = pkin(8) * t420 + t254;
t267 = t275 ^ 2;
t402 = -t279 ^ 2 + t267;
t392 = qJD(4) * t281;
t388 = qJD(2) - t249;
t379 = g(3) * t422;
t374 = t279 * t423;
t373 = t270 * t418;
t174 = -t271 * qJ(3) - t403;
t258 = pkin(4) * t273 + pkin(11);
t357 = pkin(4) * t171 + qJD(6) * t258 + t58;
t355 = t188 * t274 - t278 * t419;
t354 = t249 + t400;
t353 = qJD(6) * t199 + t249;
t352 = t242 + t383;
t350 = t275 * t374;
t151 = pkin(3) * t420 - t174;
t29 = t273 * t54 + t376;
t344 = pkin(4) * t391 - t29;
t341 = g(1) * t190 + g(2) * t188;
t340 = g(1) * t188 - g(2) * t190;
t338 = g(2) * t276 + t451;
t336 = -t198 * t172 + t203 * t407;
t32 = pkin(11) * t422 + t320;
t109 = pkin(4) * t185 + t151;
t315 = -t185 * t455 - t273 * t186;
t50 = -pkin(5) * t315 - pkin(11) * t114 + t109;
t331 = t272 * t50 + t277 * t32;
t330 = -t272 * t32 + t277 * t50;
t326 = -0.2e1 * qJD(2) * t164;
t239 = t279 * t377;
t325 = -pkin(8) * t368 + t239;
t323 = -t273 * t67 + t455 * t62;
t98 = t114 * t277 + t373;
t318 = t273 * t38 + t62 * t365 - t391 * t67 + t455 * t46;
t313 = t220 * t274;
t312 = -qJ(3) * t396 - t395;
t161 = t270 * t312 + t235;
t96 = t215 + (qJD(1) * t312 + qJDD(1) * t324) * t270;
t311 = qJD(1) * t161 + qJDD(1) * t175 + t96;
t307 = -t172 * t199 - t203 * t406;
t184 = t403 * qJD(2);
t302 = -g(1) * t189 + g(2) * t191 + t184 * t249;
t111 = -t156 * t272 - t277 * t369;
t301 = -t137 * t272 + t198 * t389 + t111;
t112 = -t156 * t277 + t272 * t369;
t300 = t137 * t277 + t198 * t390 - t112;
t261 = t271 * qJD(3);
t134 = -t368 * t456 + t239 + t261;
t298 = -t339 - t379;
t296 = -t339 - t349;
t295 = t298 + t73;
t294 = -g(3) * t420 + t341 - t348;
t293 = (t388 * t398 + t382) * t270;
t85 = pkin(4) * t145 + t134;
t2 = -qJD(6) * t11 - t272 * t4 + t277 * t9;
t286 = t183 * t249 + t294;
t30 = t455 * t54 - t440;
t285 = t484 - t258 * t37 - (-pkin(4) * t365 + t30) * t385;
t284 = -t147 * t37 - t5 * t198 - (pkin(11) * t369 - qJD(6) * t124 + t472) * t385 + t341;
t259 = -pkin(4) * t455 - pkin(5);
t181 = -qJ(3) * t369 + t240;
t178 = t271 * t371 + t251;
t169 = t278 * t179;
t168 = -t261 - t325;
t153 = -t223 - t183;
t150 = -pkin(2) * t249 + t386;
t149 = t190 * t274 + t278 * t421;
t148 = t190 * t278 - t274 * t421;
t106 = t327 - t453;
t95 = t128 * t277 + t191 * t272;
t94 = -t128 * t272 + t191 * t277;
t57 = qJD(5) * t114 + t273 * t144 + t145 * t455;
t56 = qJD(5) * t315 + t144 * t455 - t273 * t145;
t40 = qJD(6) * t98 + t272 * t56 - t277 * t367;
t39 = qJD(6) * t470 + t272 * t367 + t277 * t56;
t31 = -pkin(5) * t422 - t323;
t17 = pkin(5) * t57 - pkin(11) * t56 + t85;
t7 = -pkin(5) * t367 - t458;
t6 = pkin(11) * t367 + t318;
t3 = [qJDD(1), g(1) * t276 - g(2) * t280, t338 (qJDD(1) * t267 + 0.2e1 * t275 * t363) * t266 (t275 * t381 - t384 * t402) * t380 (t275 * t352 + t354 * t396) * t270 (t279 * t352 - t354 * t397) * t270, t424, -t251 * t242 - t348 * t271 + (t279 * t424 + (-t364 + t381) * t380) * pkin(1) - t302, -pkin(1) * t306 * t380 - t242 * t403 - t249 * t325 + t271 * t349 - t340 ((qJD(2) * t150 - qJDD(1) * t174 - t92 + (qJD(2) * t178 - t168) * qJD(1)) * t279 + (qJD(2) * t153 + qJDD(1) * t178 + t106 + (qJD(2) * t174 + t184) * qJD(1)) * t275 - t338) * t270, t106 * t271 + t178 * t242 + (t275 * t326 + t279 * t311) * t270 + t302, -t168 * t249 - t174 * t242 - t271 * t92 + (-t275 * t311 + t279 * t326) * t270 + t340, t96 * t175 + t164 * t161 + t92 * t174 + t153 * t168 + t106 * t178 + t150 * t184 - g(1) * (-pkin(1) * t276 - pkin(2) * t189 + pkin(8) * t419 - qJ(3) * t188) - g(2) * (pkin(1) * t280 + pkin(2) * t191 + pkin(8) * t421 + qJ(3) * t190) t144 * t171 + t186 * t90, t144 * t170 - t145 * t171 - t185 * t90 - t186 * t91, t144 * t220 + t179 * t186 + (t171 * t396 + t275 * t90) * t270, -t145 * t220 - t179 * t185 + (t170 * t396 - t275 * t91) * t270 (t179 * t275 + t220 * t396) * t270, t289 * t220 + t356 * t179 - t134 * t170 + t151 * t91 + t73 * t185 + t120 * t145 + g(1) * t355 - g(2) * t149 + (t275 * t290 + t396 * t64) * t270, -t305 * t220 - t408 * t179 + t134 * t171 + t151 * t90 + t73 * t186 + t120 * t144 + g(1) * t428 - g(2) * t148 + (g(1) * t415 + t275 * t309 - t396 * t65) * t270, t114 * t41 + t316 * t56, -t101 * t56 - t114 * t42 + t315 * t41 - t316 * t57, t114 * t172 + t203 * t56 + (t275 * t41 + t316 * t396) * t270, t315 * t172 - t203 * t57 + (-t101 * t396 - t275 * t42) * t270 (t172 * t275 + t203 * t396) * t270, -g(1) * t319 - g(2) * t128 + t85 * t101 + t109 * t42 + t323 * t172 + t203 * t458 + t27 * t367 + t288 * t422 - t315 * t48 + t89 * t57, -t318 * t203 - t320 * t172 + t85 * t316 + t109 * t41 + t48 * t114 + t89 * t56 + g(1) * t429 - g(2) * t127 + (t263 * t451 + t275 * t359 - t28 * t396) * t270, t21 * t98 + t39 * t82, t21 * t470 - t22 * t98 - t39 * t80 - t40 * t82, -t21 * t315 + t37 * t98 - t385 * t39 + t57 * t82, t22 * t315 + t37 * t470 + t385 * t40 - t57 * t80, -t315 * t37 - t385 * t57 -(-qJD(6) * t331 + t17 * t277 - t272 * t6) * t385 + t330 * t37 - t2 * t315 - t332 * t57 + t7 * t80 + t31 * t22 - t5 * t470 + t25 * t40 - g(1) * t459 - g(2) * t95 (qJD(6) * t330 + t17 * t272 + t277 * t6) * t385 - t331 * t37 + t1 * t315 - t11 * t57 + t7 * t82 + t31 * t21 + t5 * t98 + t25 * t39 + g(1) * t460 - g(2) * t94; 0, 0, 0, -t350, t402 * t423, t293 (-t388 * t399 + t381) * t270, t242, t423 * t454 + t286, pkin(1) * t374 - t182 * t249 - t296 + t379 ((-pkin(2) * t275 + t437) * qJDD(1) + ((-qJ(3) * qJD(2) - t153 - t183) * t275 + (-pkin(2) * qJD(2) - t150 + t386) * t279) * qJD(1)) * t270, -t181 * t369 - t286 - 0.2e1 * t453 + t468, 0.2e1 * t221 + t222 + t386 * t249 + (-g(3) * t275 + (t164 * t279 + t181 * t275) * qJD(1)) * t270 + t296, -t92 * qJ(3) - t106 * pkin(2) - t164 * t181 - t150 * t183 - g(1) * (-pkin(2) * t190 + qJ(3) * t191) - g(2) * (-pkin(2) * t188 + qJ(3) * t189) - t334 * t448 - t386 * t153, -t171 * t313 + t278 * t90 (-t91 - t431) * t278 + (-t90 - t432) * t274, -t220 * t394 + t169 + (-t171 * t279 - t220 * t416) * t401, -t220 * t393 - t430 + (-t220 * t275 * t278 - t170 * t279) * t401, -t220 * t369, -t64 * t369 + qJ(3) * t91 - t142 * t220 - t387 * t170 + t462 * t278 + ((t154 - t392) * t220 + t295) * t274, qJ(3) * t90 + t405 * t220 + t65 * t369 + t387 * t171 - t462 * t274 + (-t220 * t392 + t295) * t278, -t41 * t198 + t316 * t407, -t101 * t407 + t198 * t42 - t199 * t41 - t316 * t406, -t316 * t369 + t336, t101 * t369 + t307, -t203 * t369, t404 * t101 + t172 * t314 + t48 * t199 + t203 * t471 + t256 * t42 + t298 * t263 - t27 * t369 + t406 * t89, -t147 * t172 - t48 * t198 + t203 * t472 + t256 * t41 + t298 * t264 + t28 * t369 + t404 * t316 + t407 * t89, -t21 * t425 + t300 * t82, t111 * t82 + t112 * t80 - t329 * t137 + (t19 + t22 * t277 + (-t272 * t80 + t277 * t82) * qJD(6)) * t198, t199 * t21 - t300 * t385 - t37 * t425 + t406 * t82, t198 * t33 - t199 * t22 - t301 * t385 - t406 * t80, -t385 * t406 + t439, -t314 * t22 + t2 * t199 + t443 * t80 - t457 * t277 + t284 * t272 - (t263 * t413 + t272 * t279) * t448 - t406 * t332 - t301 * t25, -t1 * t199 - t314 * t21 + t443 * t82 + t457 * t272 + t284 * t277 - (-t263 * t418 + t277 * t279) * t448 - t406 * t11 + t300 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, t242 + t350, -t249 ^ 2 - t267 * t423, t153 * t249 - t294 - t453 + t468, 0, 0, 0, 0, 0, t170 * t249 - t220 * t313 + t169, -t220 ^ 2 * t278 - t171 * t249 - t430, 0, 0, 0, 0, 0, -t101 * t249 + t336, -t249 * t316 + t307, 0, 0, 0, 0, 0, -t272 * t439 + t198 * t22 - t407 * t80 - (-t272 * t406 - t277 * t353) * t385, -t277 * t439 + t198 * t21 - t407 * t82 - (t272 * t353 - t277 * t406) * t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t171 * t170, -t170 ^ 2 + t171 ^ 2, t90 - t432, t431 - t91, t179, t65 * t220 - t120 * t171 - g(1) * t148 - g(2) * (t270 * t415 + t428) + g(3) * t185 + t290, g(1) * t149 + g(2) * t355 + g(3) * t186 - t120 * t170 + t64 * t220 + t309, t482, t479, t478, t461, t172, t29 * t203 + (-t101 * t171 + t172 * t455 - t203 * t391) * pkin(4) + t464, t30 * t203 + (-t171 * t316 - t273 * t172 - t203 * t365) * pkin(4) + t477, t486, t476, t485, t487, t473, t259 * t22 + t344 * t80 + t285 * t272 + (t357 * t385 + t299) * t277 + t467, t259 * t21 + t277 * t285 + t344 * t82 - t357 * t441 + t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t482, t479, t478, t461, t172, t28 * t203 + t464, t203 * t27 + t477, t486, t476, t485, t487, t473, -pkin(5) * t22 - t28 * t80 + (-pkin(11) * t37 - t27 * t385 + t484) * t272 + (-(-pkin(11) * qJD(6) - t58) * t385 + t299) * t277 + t467, -pkin(5) * t21 - (t27 * t277 + t272 * t58) * t385 - t28 * t82 + t25 * t483 + (-t385 * t390 - t34) * pkin(11) + t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82 * t80, -t80 ^ 2 + t82 ^ 2, -t385 * t80 + t21, -t385 * t82 - t22, t37, -t11 * t385 - t25 * t82 - g(1) * t94 - g(2) * t460 - g(3) * (-t177 * t272 + t225) + t2, t332 * t385 + t25 * t80 + g(1) * t95 - g(2) * t459 - g(3) * (-t177 * t277 - t373) - t1;];
tau_reg  = t3;
