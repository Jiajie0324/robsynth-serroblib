% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR12_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:41:43
% EndTime: 2019-03-09 14:42:03
% DurationCPUTime: 7.47s
% Computational Cost: add. (8595->494), mult. (21534->695), div. (0->0), fcn. (16764->10), ass. (0->252)
t238 = cos(qJ(6));
t321 = qJD(6) * t238;
t233 = cos(pkin(6));
t329 = qJD(1) * t233;
t215 = qJD(2) + t329;
t236 = sin(qJ(4));
t239 = cos(qJ(4));
t240 = cos(qJ(2));
t232 = sin(pkin(6));
t330 = qJD(1) * t232;
t309 = t240 * t330;
t153 = -t236 * t215 - t239 * t309;
t154 = t215 * t239 - t236 * t309;
t235 = sin(qJ(5));
t359 = cos(qJ(5));
t85 = -t359 * t153 + t154 * t235;
t384 = t238 * t85;
t392 = t321 + t384;
t237 = sin(qJ(2));
t310 = t237 * t330;
t207 = pkin(2) * t310;
t275 = pkin(9) * t237 - qJ(3) * t240;
t140 = t275 * t330 + t207;
t316 = pkin(1) * t329;
t162 = pkin(8) * t309 + t237 * t316;
t144 = pkin(3) * t309 + t162;
t288 = -t140 * t236 + t239 * t144;
t325 = qJD(4) * t236;
t339 = t236 * t237;
t241 = -pkin(2) - pkin(9);
t357 = pkin(10) - t241;
t391 = t357 * t325 - (pkin(4) * t240 - pkin(10) * t339) * t330 - t288;
t182 = t357 * t239;
t283 = t239 * t310;
t334 = t239 * t140 + t236 * t144;
t390 = pkin(10) * t283 + qJD(4) * t182 + t334;
t234 = sin(qJ(6));
t195 = qJD(4) + t310;
t180 = qJD(5) + t195;
t318 = qJD(1) * qJD(2);
t299 = t240 * t318;
t197 = t232 * t299;
t261 = t235 * t153 + t154 * t359;
t322 = qJD(6) * t234;
t328 = qJD(2) * t237;
t308 = t232 * t328;
t282 = qJD(1) * t308;
t106 = qJD(4) * t153 + t236 * t282;
t251 = t239 * t328 + t240 * t325;
t324 = qJD(4) * t239;
t107 = t215 * t324 - t251 * t330;
t301 = t359 * qJD(5);
t323 = qJD(5) * t235;
t45 = t359 * t106 - t235 * t107 + t153 * t301 - t154 * t323;
t24 = t180 * t321 + t234 * t197 + t238 * t45 - t261 * t322;
t22 = t24 * t234;
t75 = t180 * t234 + t238 * t261;
t389 = t392 * t75 + t22;
t338 = -qJD(6) - t85;
t46 = qJD(5) * t261 + t235 * t106 + t359 * t107;
t42 = t234 * t46;
t355 = -t321 * t338 + t42;
t388 = -t261 * t75 - t338 * t384 + t355;
t382 = t234 * t338;
t44 = t238 * t46;
t73 = -t238 * t180 + t234 * t261;
t387 = t261 * t73 - t338 * t382 + t44;
t295 = -t238 * t197 + t234 * t45;
t25 = qJD(6) * t75 + t295;
t386 = -t234 * t25 + t24 * t238 + t382 * t75 - t392 * t73;
t298 = -qJ(3) * t237 - pkin(1);
t138 = (t240 * t241 + t298) * t232;
t116 = qJD(1) * t138;
t161 = pkin(8) * t310 - t240 * t316;
t319 = qJD(3) + t161;
t320 = pkin(3) * t310 + t319;
t91 = t215 * t241 + t320;
t63 = t116 * t239 + t236 * t91;
t53 = pkin(10) * t153 + t63;
t351 = t235 * t53;
t62 = -t116 * t236 + t239 * t91;
t52 = -pkin(10) * t154 + t62;
t50 = pkin(4) * t195 + t52;
t17 = t359 * t50 - t351;
t15 = -t180 * pkin(5) - t17;
t385 = t15 * t85;
t383 = t261 * t85;
t370 = t359 * qJD(4) + t301;
t123 = -t235 * t324 - t370 * t236 - t239 * t323;
t270 = t359 * t310;
t142 = -t235 * t283 - t236 * t270;
t336 = t123 + t142;
t340 = t235 * t236;
t335 = -t235 * t325 - t236 * t323 - t310 * t340 + (t270 + t370) * t239;
t381 = t261 ^ 2 - t85 ^ 2;
t56 = pkin(5) * t261 + pkin(11) * t85;
t380 = t180 * t85 + t45;
t315 = pkin(1) * qJD(2) * t233;
t285 = qJD(1) * t315;
t155 = pkin(8) * t197 + t237 * t285;
t121 = pkin(3) * t197 + t155;
t190 = pkin(2) * t282;
t326 = qJD(3) * t237;
t246 = (qJD(2) * t275 - t326) * t232;
t97 = qJD(1) * t246 + t190;
t249 = -qJD(4) * t63 + t239 * t121 - t236 * t97;
t28 = pkin(4) * t197 - pkin(10) * t106 + t249;
t255 = -t116 * t325 + t236 * t121 + t239 * t97 + t91 * t324;
t30 = -pkin(10) * t107 + t255;
t296 = -t235 * t28 - t359 * t30 - t50 * t301 + t53 * t323;
t198 = t215 * qJ(3);
t109 = t198 + t144;
t79 = -pkin(4) * t153 + t109;
t379 = t79 * t85 + t296;
t229 = t232 ^ 2;
t377 = -0.2e1 * t229 * t318;
t223 = pkin(4) * t235 + pkin(11);
t375 = (pkin(4) * t154 + qJD(6) * t223 + t56) * t338;
t374 = t338 * t261;
t181 = t357 * t236;
t259 = t235 * t181 - t182 * t359;
t373 = -qJD(5) * t259 - t391 * t235 + t390 * t359;
t135 = -t181 * t359 - t235 * t182;
t372 = -qJD(5) * t135 + t390 * t235 + t391 * t359;
t342 = t232 * t237;
t217 = pkin(8) * t342;
t311 = -pkin(1) * t240 - pkin(2);
t120 = pkin(3) * t342 + t217 + (-pkin(9) + t311) * t233;
t337 = t236 * t120 + t239 * t138;
t332 = pkin(4) * t324 - (-pkin(4) * t239 - pkin(3)) * t310 + t319;
t358 = pkin(1) * t237;
t220 = t233 * t358;
t341 = t232 * t240;
t371 = pkin(8) * t341 + t220;
t314 = t359 * t53;
t18 = t235 * t50 + t314;
t16 = t180 * pkin(11) + t18;
t41 = pkin(5) * t85 - pkin(11) * t261 + t79;
t274 = t16 * t234 - t238 * t41;
t369 = t15 * t322 + t261 * t274;
t245 = -qJD(5) * t18 - t235 * t30 + t359 * t28;
t5 = -pkin(5) * t197 - t245;
t9 = t16 * t238 + t234 * t41;
t368 = t15 * t321 + t5 * t234 + t9 * t261;
t366 = -t79 * t261 + t245;
t173 = -t239 * t359 + t340;
t174 = t235 * t239 + t236 * t359;
t221 = t236 * pkin(4) + qJ(3);
t113 = pkin(5) * t174 + pkin(11) * t173 + t221;
t364 = (-t335 * pkin(5) + t336 * pkin(11) + qJD(6) * t135 - t332) * t338 + t113 * t46;
t363 = t180 * t261 - t46;
t165 = t233 * t239 - t236 * t341;
t289 = t239 * t120 - t138 * t236;
t60 = pkin(4) * t342 - pkin(10) * t165 + t289;
t164 = t233 * t236 + t239 * t341;
t65 = -pkin(10) * t164 + t337;
t264 = t235 * t60 + t359 * t65;
t132 = -qJD(4) * t164 + t236 * t308;
t202 = pkin(2) * t308;
t112 = t202 + t246;
t361 = pkin(3) + pkin(8);
t145 = (t341 * t361 + t220) * qJD(2);
t248 = -t337 * qJD(4) - t112 * t236 + t239 * t145;
t327 = qJD(2) * t240;
t307 = t232 * t327;
t34 = pkin(4) * t307 - pkin(10) * t132 + t248;
t133 = -t251 * t232 + t233 * t324;
t254 = t239 * t112 + t120 * t324 - t138 * t325 + t236 * t145;
t40 = -pkin(10) * t133 + t254;
t362 = -qJD(5) * t264 - t235 * t40 + t34 * t359;
t333 = pkin(8) * t282 - t240 * t285;
t127 = -t215 * qJD(3) + t333;
t98 = -pkin(3) * t282 - t127;
t67 = pkin(4) * t107 + t98;
t11 = pkin(5) * t46 - pkin(11) * t45 + t67;
t4 = pkin(11) * t197 - t296;
t1 = -qJD(6) * t274 + t11 * t234 + t238 * t4;
t353 = pkin(5) * t309 - t372;
t348 = t46 * t174;
t347 = t153 * t195;
t346 = t154 * t195;
t345 = t173 * t238;
t344 = t195 * t241;
t343 = t229 * qJD(1) ^ 2;
t230 = t237 ^ 2;
t331 = -t240 ^ 2 + t230;
t313 = t195 * t237 * t239;
t312 = t240 * t343;
t156 = -t233 * qJ(3) - t371;
t305 = t195 * t324;
t292 = t335 * t180;
t287 = t215 + t329;
t286 = qJD(6) * t174 + t215;
t284 = t237 * t312;
t137 = pkin(3) * t341 - t156;
t19 = t235 * t52 + t314;
t281 = pkin(4) * t323 - t19;
t279 = -t173 * t197 + t336 * t180;
t278 = pkin(1) * t377;
t277 = t162 * t215 - t155;
t32 = pkin(11) * t342 + t264;
t103 = -t235 * t164 + t165 * t359;
t260 = -t164 * t359 - t235 * t165;
t92 = pkin(4) * t164 + t137;
t48 = -pkin(5) * t260 - pkin(11) * t103 + t92;
t273 = t234 * t48 + t238 * t32;
t272 = -t234 * t32 + t238 * t48;
t163 = t371 * qJD(2);
t271 = t155 * t233 + t163 * t215;
t206 = t240 * t315;
t269 = -pkin(8) * t308 + t206;
t268 = -t215 * t309 + t197;
t267 = -t235 * t65 + t359 * t60;
t263 = -t103 * t234 + t238 * t342;
t82 = t103 * t238 + t234 * t342;
t262 = t235 * t34 + t60 * t301 - t323 * t65 + t359 * t40;
t258 = t109 * t237 + t241 * t327;
t257 = t195 * t236;
t157 = (-pkin(2) * t240 + t298) * t232;
t95 = -t142 * t234 - t238 * t309;
t253 = -t123 * t234 + t173 * t321 + t95;
t96 = -t142 * t238 + t234 * t309;
t252 = t123 * t238 + t173 * t322 - t96;
t226 = t233 * qJD(3);
t119 = -t308 * t361 + t206 + t226;
t250 = (-qJ(3) * t327 - t326) * t232;
t78 = pkin(4) * t133 + t119;
t2 = -qJD(6) * t9 + t238 * t11 - t234 * t4;
t247 = -t135 * t46 - t5 * t173 - (pkin(11) * t309 - qJD(6) * t113 + t373) * t338;
t20 = t359 * t52 - t351;
t244 = t385 - t223 * t46 - (-pkin(4) * t301 + t20) * t338;
t224 = -pkin(4) * t359 - pkin(5);
t179 = t239 * t197;
t177 = t229 * t237 * t299;
t160 = -qJ(3) * t309 + t207;
t158 = t233 * t311 + t217;
t151 = -t226 - t269;
t150 = qJD(1) * t157;
t147 = t202 + t250;
t139 = -t198 - t162;
t136 = -pkin(2) * t215 + t319;
t125 = qJD(1) * t250 + t190;
t118 = t150 * t310;
t55 = qJD(5) * t103 + t235 * t132 + t133 * t359;
t54 = qJD(5) * t260 + t132 * t359 - t235 * t133;
t36 = qJD(6) * t82 + t234 * t54 - t238 * t307;
t35 = qJD(6) * t263 + t234 * t307 + t238 * t54;
t31 = -pkin(5) * t342 - t267;
t12 = pkin(5) * t55 - pkin(11) * t54 + t78;
t7 = -pkin(5) * t307 - t362;
t6 = pkin(11) * t307 + t262;
t3 = [0, 0, 0, 0.2e1 * t177, t331 * t377, t287 * t307, -t287 * t308, 0, t237 * t278 - t271, -t215 * t269 + t233 * t333 + t240 * t278 (-t127 * t240 + t155 * t237 + (t136 * t240 + t139 * t237) * qJD(2) + (-t151 * t240 + t163 * t237 + (t156 * t237 + t158 * t240) * qJD(2)) * qJD(1)) * t232 (-t150 * t328 + t125 * t240 + (t147 * t240 - t157 * t328) * qJD(1)) * t232 + t271, -t127 * t233 - t151 * t215 + (-t150 * t327 - t125 * t237 + (-t147 * t237 - t157 * t327) * qJD(1)) * t232, t125 * t157 + t127 * t156 + t136 * t163 + t139 * t151 + t147 * t150 + t155 * t158, t106 * t165 + t132 * t154, -t106 * t164 - t107 * t165 + t132 * t153 - t133 * t154, t132 * t195 + (t106 * t237 + (qJD(1) * t165 + t154) * t327) * t232, -t133 * t195 + (-t107 * t237 + (-qJD(1) * t164 + t153) * t327) * t232, t195 * t307 + t177, t248 * t195 - t119 * t153 + t137 * t107 + t98 * t164 + t109 * t133 + (t249 * t237 + (qJD(1) * t289 + t62) * t327) * t232, -t254 * t195 + t119 * t154 + t137 * t106 + t98 * t165 + t109 * t132 + (-t255 * t237 + (-qJD(1) * t337 - t63) * t327) * t232, t103 * t45 + t261 * t54, -t103 * t46 + t260 * t45 - t261 * t55 - t54 * t85, t180 * t54 + (t237 * t45 + (qJD(1) * t103 + t261) * t327) * t232, -t180 * t55 + (-t237 * t46 + (qJD(1) * t260 - t85) * t327) * t232, t180 * t307 + t177, t17 * t307 + t180 * t362 + t267 * t197 + t245 * t342 - t260 * t67 + t92 * t46 + t79 * t55 + t78 * t85, -t262 * t180 + t78 * t261 + t92 * t45 + t67 * t103 + t79 * t54 + (t296 * t237 + (-qJD(1) * t264 - t18) * t327) * t232, t24 * t82 + t35 * t75, t24 * t263 - t25 * t82 - t35 * t73 - t36 * t75, -t24 * t260 - t338 * t35 + t46 * t82 + t55 * t75, t25 * t260 + t263 * t46 + t338 * t36 - t55 * t73, -t260 * t46 - t338 * t55 -(-qJD(6) * t273 + t12 * t238 - t234 * t6) * t338 + t272 * t46 - t2 * t260 - t274 * t55 + t7 * t73 + t31 * t25 - t5 * t263 + t15 * t36 (qJD(6) * t272 + t12 * t234 + t238 * t6) * t338 - t273 * t46 + t1 * t260 - t9 * t55 + t7 * t75 + t31 * t24 + t5 * t82 + t15 * t35; 0, 0, 0, -t284, t331 * t343, t268 (-qJD(2) + t215) * t310, 0, t343 * t358 + t277, pkin(1) * t312 - t161 * t215 + t333 ((-qJ(3) * qJD(2) - t139 - t162) * t237 + (-pkin(2) * qJD(2) - t136 + t319) * t240) * t330, -t160 * t309 + t118 - t277, t319 * t215 + (t150 * t240 + t160 * t237) * t330 - t127, -pkin(2) * t155 - qJ(3) * t127 - t136 * t162 - t139 * t319 - t150 * t160, t106 * t239 - t154 * t257 (-t107 - t346) * t239 + (-t106 - t347) * t236, -t195 * t325 + t179 + (-t154 * t240 - t195 * t339) * t330, -t305 + (-t313 + (-qJD(2) * t236 - t153) * t240) * t330, -t195 * t309, qJ(3) * t107 + t98 * t236 - t288 * t195 - t320 * t153 + (t109 * t239 - t236 * t344) * qJD(4) + (t239 * t258 - t62 * t240) * t330, qJ(3) * t106 + t98 * t239 + t334 * t195 + t320 * t154 + (-t109 * t236 - t239 * t344) * qJD(4) + (-t236 * t258 + t63 * t240) * t330, -t45 * t173 + t261 * t336, t173 * t46 - t174 * t45 - t261 * t335 - t336 * t85, -t261 * t309 + t279, -t292 + (-qJD(2) * t174 + t85) * t309, -t180 * t309, t67 * t174 + t221 * t46 + t332 * t85 + t335 * t79 + t372 * t180 + (qJD(2) * t259 - t17) * t309, -t67 * t173 + t221 * t45 + t332 * t261 + t336 * t79 + t373 * t180 + (-qJD(2) * t135 + t18) * t309, -t24 * t345 + t252 * t75, t73 * t96 + t75 * t95 + (-t234 * t75 - t238 * t73) * t123 + (t22 + t238 * t25 + (-t234 * t73 + t238 * t75) * qJD(6)) * t173, t174 * t24 - t252 * t338 + t335 * t75 - t345 * t46, t173 * t42 - t174 * t25 - t253 * t338 - t335 * t73, -t335 * t338 + t348, -t253 * t15 + t2 * t174 + t247 * t234 + t238 * t364 - t25 * t259 - t274 * t335 + t353 * t73, -t1 * t174 + t252 * t15 - t234 * t364 + t247 * t238 - t24 * t259 - t335 * t9 + t353 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t268, t284, -t215 ^ 2 - t230 * t343, t139 * t215 + t118 + t155, 0, 0, 0, 0, 0, t153 * t215 - t195 * t257 + t179, -t305 - t154 * t215 + (-t236 * t327 - t313) * t330, 0, 0, 0, 0, 0, -t215 * t85 + t279, -t174 * t197 - t215 * t261 - t292, 0, 0, 0, 0, 0, -t234 * t348 + t173 * t25 - t336 * t73 - (-t234 * t335 - t238 * t286) * t338, -t238 * t348 + t173 * t24 - t336 * t75 - (t234 * t286 - t238 * t335) * t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154 * t153, -t153 ^ 2 + t154 ^ 2, t106 - t347, -t107 + t346, t197, -t109 * t154 + t195 * t63 + t249, -t109 * t153 + t195 * t62 - t255, t383, t381, t380, t363, t197, t19 * t180 + (-t154 * t85 - t180 * t323 + t197 * t359) * pkin(4) + t366, t20 * t180 + (-t154 * t261 - t180 * t301 - t197 * t235) * pkin(4) + t379, t389, t386, t388, t387, t374, t224 * t25 + t281 * t73 + (-t5 + t375) * t238 + t244 * t234 + t369, t224 * t24 - t234 * t375 + t238 * t244 + t281 * t75 + t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, t381, t380, t363, t197, t18 * t180 + t366, t17 * t180 + t379, t389, t386, t388, t387, t374, -pkin(5) * t25 - t5 * t238 + (-t17 * t234 + t238 * t56) * t338 - t18 * t73 + t234 * t385 - t355 * pkin(11) + t369, -pkin(5) * t24 - (t17 * t238 + t234 * t56) * t338 - t18 * t75 + t15 * t384 + (-t322 * t338 - t44) * pkin(11) + t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 * t73, -t73 ^ 2 + t75 ^ 2, -t338 * t73 + t24, -t295 + (-qJD(6) - t338) * t75, t46, -t15 * t75 - t338 * t9 + t2, t15 * t73 + t274 * t338 - t1;];
tauc_reg  = t3;
