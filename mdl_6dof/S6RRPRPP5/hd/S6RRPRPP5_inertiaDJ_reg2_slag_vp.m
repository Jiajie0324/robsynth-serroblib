% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPP5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPRPP5_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:06:17
% EndTime: 2019-03-09 10:06:24
% DurationCPUTime: 2.52s
% Computational Cost: add. (1536->252), mult. (3344->368), div. (0->0), fcn. (2353->4), ass. (0->140)
t98 = sin(qJ(4));
t148 = t98 * qJD(5);
t100 = cos(qJ(4));
t150 = t100 * qJ(5);
t165 = pkin(4) + pkin(5);
t167 = t165 * t98 - t150;
t39 = -qJD(4) * t167 + t148;
t174 = pkin(3) + pkin(7);
t101 = cos(qJ(2));
t86 = t101 * qJD(2);
t99 = sin(qJ(2));
t169 = qJ(5) * t86 + t99 * qJD(5);
t103 = -pkin(2) - pkin(8);
t149 = t101 * t103;
t155 = t99 * qJ(3);
t173 = -t149 + t155;
t171 = t165 * qJD(2);
t170 = 0.2e1 * t169;
t94 = t98 ^ 2;
t96 = t100 ^ 2;
t161 = t94 - t96;
t168 = t161 * qJD(4);
t159 = qJ(5) * t98;
t111 = -t165 * t100 - t159;
t145 = qJD(2) * t100;
t134 = t99 * t145;
t122 = t98 * t134;
t97 = t101 ^ 2;
t21 = -0.4e1 * t101 * t122 - 0.2e1 * t168 * t97;
t160 = t99 ^ 2 - t97;
t126 = t160 * qJD(2);
t144 = qJD(4) * t101;
t128 = t100 * t144;
t25 = -0.2e1 * t98 * t126 + 0.2e1 * t99 * t128;
t55 = 0.2e1 * t168;
t166 = 2 * qJD(3);
t104 = 0.2e1 * qJD(5);
t147 = t99 * qJD(2);
t81 = pkin(7) * t147;
t11 = t81 - t39 * t101 + (pkin(3) - t111) * t147;
t164 = t11 * t98;
t117 = pkin(4) * t100 + t159;
t118 = -pkin(4) * t98 + t150;
t43 = t118 * qJD(4) + t148;
t12 = -t81 + t43 * t101 + (-pkin(3) - t117) * t147;
t163 = t12 * t98;
t58 = -pkin(3) * t147 - t81;
t162 = t58 * t98;
t52 = -pkin(1) - t173;
t67 = t174 * t99;
t20 = t100 * t52 + t98 * t67;
t68 = t174 * t101;
t121 = -t100 * qJD(5) + qJD(3);
t40 = t117 * qJD(4) + t121;
t158 = t101 * t40;
t157 = t103 * t99;
t156 = t11 * t100;
t154 = qJ(3) * t101;
t153 = qJ(6) * t101;
t152 = qJD(2) * t98;
t146 = qJ(6) + t103;
t59 = t146 * t98;
t151 = qJD(4) * t59;
t87 = qJD(4) * t98;
t88 = qJD(4) * t100;
t143 = qJD(4) * t103;
t142 = t100 * qJD(6);
t141 = t101 * qJD(3);
t140 = -0.2e1 * pkin(1) * qJD(2);
t19 = t100 * t67 - t98 * t52;
t15 = t98 * t153 - t165 * t99 - t19;
t17 = t99 * qJ(5) + t20;
t16 = t100 * t153 + t17;
t133 = t98 * t144;
t46 = t133 + t134;
t124 = pkin(2) * t147 - t99 * qJD(3);
t106 = (pkin(8) * t99 - t154) * qJD(2) + t124;
t82 = pkin(7) * t86;
t120 = pkin(3) * t86 + t82;
t9 = -t100 * t106 - t98 * t120 + t52 * t87 - t67 * t88;
t105 = -t46 * qJ(6) + t101 * t142 - t9;
t5 = t105 + t169;
t139 = t15 * t87 + t16 * t88 + t5 * t98;
t138 = pkin(4) * t86;
t51 = -qJ(3) - t167;
t137 = t51 * t87;
t136 = t98 * t147;
t135 = qJ(5) * t147;
t132 = t98 * t143;
t131 = t98 * t88;
t130 = t99 * t86;
t129 = qJ(5) * t144;
t127 = t100 * t86;
t125 = -t100 * t120 + t98 * t106 + t52 * t88 + t67 * t87;
t123 = t97 * t131;
t119 = -pkin(2) * t101 - t155;
t18 = -pkin(4) * t99 - t19;
t116 = t100 * t17 + t18 * t98;
t115 = t100 * t20 - t19 * t98;
t61 = qJ(3) - t118;
t114 = t101 * t61 + t157;
t113 = -t154 - t157;
t32 = t111 * qJD(4) - t121;
t112 = -t32 * t98 - t51 * t88;
t22 = t111 * t101 - t68;
t110 = -qJD(4) * t22 + t51 * t147;
t109 = qJ(6) * t88 + qJD(6) * t98;
t108 = -qJ(6) * t136 + t125;
t107 = t119 * qJD(2) + t141;
t6 = -t9 + t169;
t7 = t125 - t138;
t1 = t116 * qJD(4) - t7 * t100 + t6 * t98;
t2 = t115 * qJD(4) - t100 * t125 - t9 * t98;
t93 = qJ(3) * t166;
t92 = qJ(5) * t104;
t78 = t100 * t143;
t72 = -0.2e1 * t131;
t71 = 0.2e1 * t131;
t70 = -0.2e1 * t130;
t69 = 0.2e1 * t130;
t66 = t103 * t127;
t63 = -pkin(1) + t119;
t60 = t146 * t100;
t56 = -0.2e1 * t126;
t48 = t128 - t136;
t47 = t98 * t86 + t99 * t88;
t45 = t99 * t87 - t127;
t44 = -qJ(3) * t86 + t124;
t38 = t109 + t78;
t37 = -t142 + t151;
t35 = t117 * t101 + t68;
t34 = -0.2e1 * t96 * t130 - 0.2e1 * t123;
t33 = -0.2e1 * t94 * t130 + 0.2e1 * t123;
t31 = -t144 * t161 - t122;
t29 = t99 * t133 + t160 * t145;
t28 = 0.4e1 * t98 * t128 - t147 * t161;
t24 = 0.2e1 * t29;
t8 = -t37 * t100 + t38 * t98 + (t100 * t59 - t60 * t98) * qJD(4);
t4 = (t109 - t171) * t101 + t108;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, t56, 0, t70, 0, 0, t99 * t140, t101 * t140, 0, 0, 0, 0, 0, t69, t56, t70, 0, 0.2e1 * t101 * t44 - 0.2e1 * t63 * t147, -0.2e1 * t44 * t99 - 0.2e1 * t63 * t86, 0.2e1 * t63 * t44, t33, t21, -t25, t34, t24, t69, 0.2e1 * (-t68 * t145 - t125) * t99 + 0.2e1 * (qJD(2) * t19 + t58 * t100 - t68 * t87) * t101, 0.2e1 * (t68 * t152 + t9) * t99 + 0.2e1 * (-qJD(2) * t20 - t68 * t88 - t162) * t101, 0.2e1 * t115 * t147 + 0.2e1 * (-t125 * t98 + t100 * t9 + (t100 * t19 + t20 * t98) * qJD(4)) * t101, -0.2e1 * t125 * t19 - 0.2e1 * t20 * t9 + 0.2e1 * t58 * t68, t33, -t25, -t21, t69, -0.2e1 * t29, t34, 0.2e1 * (-t35 * t145 - t7) * t99 + 0.2e1 * (-qJD(2) * t18 + t12 * t100 - t35 * t87) * t101, 0.2e1 * t116 * t147 + 0.2e1 * (-t100 * t6 - t7 * t98 + (-t100 * t18 + t17 * t98) * qJD(4)) * t101, 0.2e1 * (-t35 * t152 + t6) * t99 + 0.2e1 * (qJD(2) * t17 + t35 * t88 + t163) * t101, 0.2e1 * t12 * t35 + 0.2e1 * t17 * t6 + 0.2e1 * t18 * t7, t33, -t21, t25, t34, t24, t69, 0.2e1 * (t22 * t145 - t4) * t99 + 0.2e1 * (-qJD(2) * t15 + t22 * t87 - t156) * t101, 0.2e1 * (t22 * t152 + t5) * t99 + 0.2e1 * (qJD(2) * t16 - t22 * t88 - t164) * t101, 0.2e1 * (-t100 * t16 - t15 * t98) * t147 + 0.2e1 * (t100 * t5 + t4 * t98 + (t100 * t15 - t16 * t98) * qJD(4)) * t101, 0.2e1 * t11 * t22 + 0.2e1 * t15 * t4 + 0.2e1 * t16 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, -t147, 0, -t82, t81, 0, 0, 0, -t86, t147, 0, 0, 0, t107, t82, -t81, t107 * pkin(7), -t31, t28, -t45, t31, -t47, 0, t162 + t66 + (-qJ(3) * t147 + t141) * t100 + (t100 * t68 + t113 * t98) * qJD(4) (t113 * qJD(4) + t58) * t100 + (t173 * qJD(2) - qJD(4) * t68 - t141) * t98, -t2, t58 * qJ(3) + t68 * qJD(3) + t2 * t103, -t31, -t45, -t28, 0, t47, t31, t163 + t66 + (-t61 * t147 + t158) * t100 + (t100 * t35 - t114 * t98) * qJD(4), -t1 (t114 * qJD(4) - t12) * t100 + (qJD(4) * t35 + t158 + (-t61 * t99 + t149) * qJD(2)) * t98, t1 * t103 + t12 * t61 + t35 * t40, -t31, -t28, t45, t31, -t47, 0, -t164 - t37 * t99 + (qJD(2) * t60 + t137) * t101 + (-t101 * t32 + t110) * t100, t156 + t38 * t99 + t110 * t98 + (qJD(2) * t59 + t112) * t101 (t60 * t147 + (t37 - t151) * t101) * t98 + (-t59 * t147 - t4 + (-qJD(4) * t60 + t38) * t101) * t100 + t139, t11 * t51 + t15 * t37 + t16 * t38 + t22 * t32 - t4 * t60 + t5 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, t93, t72, t55, 0, t71, 0, 0, 0.2e1 * qJ(3) * t88 + 0.2e1 * qJD(3) * t98, -0.2e1 * qJ(3) * t87 + 0.2e1 * qJD(3) * t100, 0, t93, t72, 0, -t55, 0, 0, t71, 0.2e1 * t40 * t98 + 0.2e1 * t61 * t88, 0, -0.2e1 * t100 * t40 + 0.2e1 * t61 * t87, 0.2e1 * t61 * t40, t72, -t55, 0, t71, 0, 0, 0.2e1 * t112, 0.2e1 * t100 * t32 - 0.2e1 * t137, 0.2e1 * t8, 0.2e1 * t32 * t51 - 0.2e1 * t37 * t60 + 0.2e1 * t38 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, 0, t82, 0, 0, 0, 0, 0, 0, -t45, -t47, 0, t2, 0, 0, 0, 0, 0, 0, -t45, 0, t47, t1, 0, 0, 0, 0, 0, 0, -t45, t47, 0, -t4 * t100 + t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, t46, t86, -t125, t9, 0, 0, 0, -t48, 0, t86, -t46, 0, -t125 + 0.2e1 * t138 (-pkin(4) * t147 + t129) * t98 + (t135 + (pkin(4) * qJD(4) - qJD(5)) * t101) * t100, -t9 + t170, -pkin(4) * t7 + qJ(5) * t6 + qJD(5) * t17, 0, 0, t48, 0, t46, t86 (-t109 + 0.2e1 * t171) * t101 - t108, t105 + t170 (t147 * t165 - t129) * t98 + (-t135 + (-qJD(4) * t165 + qJD(5)) * t101) * t100, qJ(5) * t5 + qJD(5) * t16 - t165 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, -t88, 0, -t132, -t78, 0, 0, 0, -t87, 0, 0, t88, 0, -t132, -t43, t78, t43 * t103, 0, 0, t87, 0, -t88, 0, -t37, t38, t39, qJ(5) * t38 + qJD(5) * t59 - t165 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t88, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, t88, t43, 0, 0, 0, 0, 0, 0, -t87, t88, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t92, 0, 0, 0, 0, 0, 0, 0, t104, 0, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t48, 0, t7, 0, 0, 0, 0, 0, 0, -t86, 0, t48, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, t132, 0, 0, 0, 0, 0, 0, 0, 0, t87, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, tt46, -t48, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t87, 0, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
