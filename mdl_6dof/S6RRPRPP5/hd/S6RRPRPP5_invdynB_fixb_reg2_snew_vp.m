% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPRPP5_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:45:01
% EndTime: 2019-05-06 12:45:24
% DurationCPUTime: 16.19s
% Computational Cost: add. (22546->599), mult. (46521->728), div. (0->0), fcn. (27073->6), ass. (0->432)
t804 = sin(qJ(2));
t803 = sin(qJ(4));
t806 = cos(qJ(4));
t807 = cos(qJ(2));
t866 = qJD(1) * t807;
t756 = qJD(2) * t806 - t803 * t866;
t746 = t756 ^ 2;
t867 = qJD(1) * t804;
t786 = qJD(4) + t867;
t927 = t786 ^ 2;
t720 = t746 - t927;
t862 = qJD(1) * qJD(2);
t847 = t807 * t862;
t860 = qJDD(1) * t804;
t762 = t847 + t860;
t747 = qJDD(4) + t762;
t754 = qJD(2) * t803 + t806 * t866;
t897 = t754 * t756;
t816 = t747 - t897;
t953 = t803 * t816;
t971 = t720 * t806 - t953;
t1004 = t804 * t971;
t848 = t804 * t862;
t858 = qJDD(1) * t807;
t763 = -t848 + t858;
t830 = t806 * qJDD(2) - t803 * t763;
t670 = -qJD(4) * t754 + t830;
t896 = t754 * t786;
t944 = t670 + t896;
t521 = t807 * t944 - t1004;
t805 = sin(qJ(1));
t946 = t816 * t806;
t582 = t720 * t803 + t946;
t808 = cos(qJ(1));
t996 = t582 * t808;
t1067 = t521 * t805 - t996;
t1001 = t582 * t805;
t1066 = t521 * t808 + t1001;
t941 = t746 + t927;
t815 = t747 + t897;
t948 = t815 * t803;
t992 = t941 * t806 + t948;
t1033 = t804 * t992;
t616 = t670 - t896;
t1023 = -t807 * t616 + t1033;
t947 = t815 * t806;
t571 = t803 * t941 - t947;
t1036 = t571 * t805;
t1060 = t1023 * t808 - t1036;
t1065 = pkin(6) * t1060;
t1035 = t571 * t808;
t1061 = t1023 * t805 + t1035;
t1064 = pkin(6) * t1061;
t928 = t754 ^ 2;
t936 = t928 - t927;
t581 = t803 * t936 + t947;
t843 = t803 * qJDD(2) + t806 * t763;
t669 = qJD(4) * t756 + t843;
t882 = t786 * t756;
t610 = t669 - t882;
t1028 = t581 * t804 - t610 * t807;
t578 = t806 * t936 - t948;
t1047 = t1028 * t805 - t578 * t808;
t1046 = t1028 * t808 + t578 * t805;
t999 = t807 * t971;
t1063 = t804 * t944 + t999;
t1018 = pkin(3) * t992 + qJ(3) * t571;
t1062 = qJ(5) * t815 + t1018;
t1043 = pkin(1) * t571;
t1059 = pkin(7) * t1023 + t1043;
t799 = t804 ^ 2;
t810 = qJD(1) ^ 2;
t792 = t799 * t810;
t809 = qJD(2) ^ 2;
t779 = -t792 - t809;
t854 = t804 * t807 * t810;
t772 = -qJDD(2) + t854;
t874 = t807 * t772;
t702 = -t779 * t804 + t874;
t761 = 0.2e1 * t847 + t860;
t639 = t702 * t805 - t761 * t808;
t1058 = pkin(6) * t639;
t643 = t702 * t808 + t761 * t805;
t1057 = pkin(6) * t643;
t937 = -t927 - t928;
t960 = t806 * t937 - t953;
t945 = t669 + t882;
t964 = t803 * t937 + t946;
t990 = t804 * t964 + t807 * t945;
t1019 = t805 * t960 + t808 * t990;
t1056 = pkin(6) * t1019;
t1020 = t805 * t990 - t808 * t960;
t1055 = pkin(6) * t1020;
t1031 = t807 * t992;
t1024 = -t804 * t616 - t1031;
t1053 = pkin(7) * t1024;
t925 = pkin(2) + pkin(8);
t1034 = t571 * t925;
t991 = t804 * t945 - t807 * t964;
t1050 = -pkin(1) * t991 + t925 * t964;
t1029 = t925 * t992;
t1049 = -pkin(1) * t1024 + t1029;
t1048 = t581 * t807 + t610 * t804;
t688 = -t928 + t746;
t677 = t688 * t807;
t913 = t945 * t803;
t988 = t616 * t806 - t913;
t1021 = -t804 * t988 - t677;
t912 = t945 * t806;
t989 = -t616 * t803 - t912;
t1045 = t1021 * t805 + t808 * t989;
t1044 = t1021 * t808 - t805 * t989;
t800 = t807 ^ 2;
t879 = t800 * t810;
t780 = t809 + t879;
t771 = qJDD(2) + t854;
t888 = t771 * t804;
t704 = t780 * t807 + t888;
t764 = -0.2e1 * t848 + t858;
t640 = t704 * t805 - t764 * t808;
t1040 = pkin(6) * t640;
t644 = t704 * t808 + t764 * t805;
t1039 = pkin(6) * t644;
t1038 = pkin(7) * t991;
t650 = -t928 - t746;
t1037 = (t650 + t927) * pkin(4);
t1026 = -qJ(3) * t945 + t1050;
t1025 = -pkin(1) * t960 + pkin(7) * t990;
t676 = t688 * t804;
t1022 = t807 * t988 - t676;
t875 = t807 * t771;
t699 = -t780 * t804 + t875;
t1017 = pkin(1) * t699;
t1015 = pkin(3) * t650;
t1014 = pkin(7) * t699;
t1013 = pkin(7) * t702;
t1012 = qJ(3) * t650;
t1011 = qJ(5) * t616;
t1010 = qJ(5) * t650;
t863 = qJD(4) - t786;
t611 = t756 * t863 + t843;
t1009 = t611 * t803;
t1008 = t611 * t806;
t1007 = t650 * t804;
t1006 = t650 * t807;
t995 = t925 * t960;
t881 = t786 * t803;
t826 = -t670 * t806 + t756 * t881;
t683 = t807 * t897;
t880 = t786 * t806;
t712 = t756 * t880;
t942 = -t670 * t803 - t712;
t968 = -t804 * t942 + t683;
t969 = t805 * t968 + t808 * t826;
t778 = -t792 + t809;
t701 = -t778 * t804 + t875;
t857 = qJDD(1) * t808;
t987 = t701 * t805 - t804 * t857;
t859 = qJDD(1) * t805;
t986 = t701 * t808 + t804 * t859;
t959 = -t826 * t805 + t808 * t968;
t985 = pkin(3) * t945 - t995;
t983 = pkin(3) * t964 - qJ(3) * t960;
t982 = pkin(4) * t816 + qJ(5) * t937 + t983;
t981 = 2 * qJD(3);
t887 = t772 * t804;
t696 = t779 * t807 + t887;
t980 = pkin(1) * t696;
t978 = pkin(7) * t696;
t977 = pkin(7) * t704;
t975 = qJ(6) * t944;
t682 = t804 * t897;
t872 = t807 * t942 + t682;
t781 = -t809 + t879;
t705 = t781 * t807 + t887;
t967 = t705 * t805 - t807 * t857;
t966 = t705 * t808 + t805 * t858;
t733 = t807 * t747;
t855 = t754 * t881;
t837 = t712 + t855;
t929 = -t804 * t837 + t733;
t824 = (t754 * t806 - t756 * t803) * t786;
t950 = t808 * t824;
t963 = t805 * t929 + t950;
t838 = -t803 * t669 - t754 * t880;
t827 = t669 * t806 - t855;
t931 = -t804 * t827 - t683;
t962 = t805 * t931 + t808 * t838;
t952 = t805 * t824;
t958 = t808 * t929 - t952;
t957 = -t805 * t838 + t808 * t931;
t834 = t762 + t847;
t955 = qJ(3) * t834;
t940 = -pkin(2) * t848 + t867 * t981;
t709 = -pkin(5) * t786 - qJ(6) * t756;
t774 = pkin(3) * t867 - qJD(2) * pkin(8);
t775 = t805 * g(1) - t808 * g(2);
t829 = -qJDD(1) * pkin(1) - t775;
t813 = t829 - t940 - t955;
t545 = -t774 * t867 + (-pkin(3) * t800 - pkin(7)) * t810 - t925 * t763 + t813;
t776 = g(1) * t808 + g(2) * t805;
t738 = -pkin(1) * t810 + qJDD(1) * pkin(7) - t776;
t710 = t807 * g(3) + t804 * t738;
t916 = qJ(3) * t804;
t923 = pkin(2) * t807;
t836 = -t916 - t923;
t759 = t836 * qJD(1);
t825 = -qJDD(2) * pkin(2) - t809 * qJ(3) + t759 * t867 + qJDD(3) + t710;
t562 = -t771 * pkin(8) + (t762 - t847) * pkin(3) + t825;
t493 = t806 * t545 + t803 * t562;
t680 = pkin(4) * t754 - qJ(5) * t756;
t840 = -t747 * qJ(5) + t754 * t680 - t493;
t939 = t669 * qJ(6) + 0.2e1 * qJD(6) * t754 + t786 * t709 - t840;
t938 = -t781 * t804 + t874;
t935 = t756 * t709 + qJDD(6);
t934 = t669 * pkin(4) - t1011;
t933 = -t669 * pkin(5) + t935;
t932 = t807 * t827 - t682;
t732 = t804 * t747;
t930 = t807 * t837 + t732;
t926 = 0.2e1 * t756;
t924 = pkin(4) + pkin(5);
t922 = pkin(4) * t803;
t921 = pkin(4) * t806;
t868 = t799 + t800;
t766 = t868 * qJDD(1);
t769 = t792 + t879;
t686 = t766 * t805 + t769 * t808;
t920 = pkin(6) * t686;
t918 = t927 * pkin(4);
t917 = t810 * pkin(7);
t619 = -t754 * t863 + t830;
t909 = t619 * t806;
t737 = -t829 + t917;
t899 = t737 * t804;
t898 = t737 * t807;
t895 = t756 * t680;
t894 = t761 * t804;
t890 = t764 * t807;
t869 = t804 * g(3) - t807 * t738;
t823 = t809 * pkin(2) - t759 * t866 + t869;
t818 = qJDD(2) * qJ(3) - t823;
t814 = t763 * pkin(3) - pkin(8) * t879 + t818;
t561 = (t981 + t774) * qJD(2) + t814;
t878 = t803 * t561;
t876 = t806 * t561;
t873 = -t803 * t545 + t806 * t562;
t871 = t941 - t928;
t870 = pkin(1) * t769 + pkin(7) * t766;
t865 = qJD(5) * t786;
t861 = qJD(3) * qJD(2);
t846 = qJ(5) * t803 + pkin(3);
t845 = -pkin(5) * t754 - t680;
t844 = qJ(5) * t806 - qJ(3);
t624 = t710 * t804 - t807 * t869;
t693 = -t775 * t805 - t808 * t776;
t842 = t805 * t854;
t841 = t808 * t854;
t768 = -t805 * t810 + t857;
t839 = -pkin(6) * t768 - g(3) * t805;
t835 = pkin(2) * t804 - qJ(3) * t807;
t773 = 0.2e1 * t865;
t833 = t773 - t840;
t452 = t803 * t493 + t806 * t873;
t453 = t806 * t493 - t803 * t873;
t623 = t710 * t807 + t804 * t869;
t832 = t778 * t807 + t888;
t692 = t775 * t808 - t776 * t805;
t831 = t747 * pkin(4) + qJ(5) * t927 - qJDD(5) + t873;
t822 = -t831 + t895;
t821 = t773 + t939;
t820 = -t747 * pkin(5) - t831 - t975;
t819 = qJD(6) * t926 - t820;
t817 = (-qJD(4) - t786) * t754 + t830;
t625 = t818 + 0.2e1 * t861;
t812 = t763 * pkin(2) + t737 + t940;
t794 = -0.2e1 * t861;
t811 = -qJD(2) * t774 + qJD(5) * t926 + t794 - t814 - t934;
t489 = (pkin(4) * t786 - 0.2e1 * qJD(5)) * t756 + t561 + t934;
t472 = (-t945 - t882) * pkin(4) + t811;
t471 = -pkin(4) * t882 + t1011 + t811;
t770 = -t792 + t879;
t767 = t808 * t810 + t859;
t757 = t835 * qJDD(1);
t749 = t868 * t862;
t731 = -pkin(6) * t767 + g(3) * t808;
t716 = qJDD(2) * t805 + t749 * t808;
t715 = t762 * t807 - t799 * t862;
t714 = -qJDD(2) * t808 + t749 * t805;
t713 = -t763 * t804 - t800 * t862;
t697 = t834 * t804;
t695 = (t763 - t848) * t807;
t687 = t766 * t808 - t769 * t805;
t681 = pkin(6) * t687;
t679 = t890 - t894;
t678 = t761 * t807 + t764 * t804;
t668 = t715 * t808 - t842;
t667 = t713 * t808 + t842;
t666 = t715 * t805 + t841;
t665 = t713 * t805 - t841;
t638 = -t898 - t978;
t637 = -t899 - t1014;
t635 = (t754 * t803 + t756 * t806) * t786;
t630 = t679 * t808 - t770 * t805;
t629 = t679 * t805 + t770 * t808;
t627 = t710 - t1017;
t626 = -t869 - t980;
t604 = t803 * t619;
t602 = qJ(3) * t769 + t825;
t601 = pkin(2) * t769 + t625;
t590 = t812 + t955;
t587 = -t635 * t804 + t733;
t566 = -t917 + (-t763 - t764) * pkin(2) + t813;
t565 = (t761 + t834) * qJ(3) + t812;
t564 = t624 * t808 - t737 * t805;
t563 = t624 * t805 + t737 * t808;
t552 = pkin(2) * t771 - qJ(3) * t780 + t1017 - t825;
t544 = t980 + pkin(2) * t779 + t794 + (-qJDD(2) + t772) * qJ(3) + t823;
t541 = -qJ(5) * t945 + qJ(6) * t816;
t540 = t625 * t807 + t804 * t825;
t539 = t625 * t804 - t807 * t825;
t538 = t604 - t1008;
t537 = -t610 * t806 + t604;
t536 = -t803 * t944 + t1008;
t533 = t803 * t817 + t912;
t532 = -t909 - t1009;
t531 = -t806 * t817 + t913;
t530 = -t610 * t803 - t909;
t528 = t806 * t944 + t1009;
t526 = -pkin(2) * t894 + t565 * t807 + t978;
t525 = -qJ(3) * t890 - t566 * t804 + t1014;
t524 = -t601 * t804 + t602 * t807;
t522 = t619 * t807 - t1004;
t516 = t807 * t817 - t1033;
t513 = t804 * t817 + t1031;
t503 = -t531 * t804 + t677;
t502 = -qJ(6) * t815 + t616 * t924;
t501 = t530 * t804 + t1006;
t500 = t532 * t804 + t1006;
t499 = t528 * t804 - t1006;
t498 = -t530 * t807 + t1007;
t497 = -t532 * t807 + t1007;
t496 = -t528 * t807 - t1007;
t495 = t540 * t808 - t590 * t805;
t494 = t540 * t805 + t590 * t808;
t490 = -pkin(1) * t539 + pkin(2) * t825 - qJ(3) * t625;
t487 = t516 * t808 + t1036;
t484 = t516 * t805 - t1035;
t476 = pkin(3) * t532 - qJ(3) * t538;
t475 = -pkin(7) * t539 - t590 * t835;
t473 = t833 - t918;
t470 = t501 * t808 + t537 * t805;
t469 = t500 * t808 + t538 * t805;
t468 = t499 * t808 + t536 * t805;
t467 = t501 * t805 - t537 * t808;
t466 = t500 * t805 - t538 * t808;
t465 = t499 * t805 - t536 * t808;
t464 = t822 - t1010;
t463 = pkin(3) * t817 - t1034 - t878;
t462 = t833 - t1037;
t461 = qJ(6) * t928 + t489 - t933;
t460 = t876 + t985;
t459 = -t1018 - t493;
t458 = t873 + t983;
t457 = -pkin(5) * t928 + t821 - t918;
t456 = pkin(3) * t530 - pkin(4) * t619 - qJ(3) * t537 - qJ(5) * t610;
t455 = (-0.2e1 * qJD(6) - t845) * t756 + t820;
t451 = qJ(6) * t871 + t471 + t933;
t450 = pkin(3) * t528 - qJ(3) * t536 + qJ(5) * t611 + t924 * t944;
t449 = -pkin(1) * t513 - qJ(3) * t817 - t1029 - t876;
t448 = t1026 - t878;
t447 = (-t945 - t669) * pkin(5) + t472 + (-t937 - t928) * qJ(6) + t935;
t446 = t452 * t804 + t561 * t807;
t445 = -t452 * t807 + t561 * t804;
t444 = t756 * t845 + t1010 + t819 + t975;
t443 = -t822 + t982;
t442 = -qJ(6) * t611 - 0.2e1 * t865 + (t650 + t928) * pkin(5) + t1037 - t939;
t441 = pkin(4) * t746 + t1062 + t833;
t440 = t473 * t806 + t803 * t822;
t439 = t803 * t473 - t806 * t822;
t438 = -t806 * t472 + t846 * t945 - t995;
t437 = -t803 * t471 + (-pkin(3) - t921) * t616 + t1034;
t436 = t871 * pkin(5) + (t941 - t927) * pkin(4) + t821 + t1062;
t435 = -t895 + (t816 - t897) * pkin(5) + t819 + t982;
t434 = -t538 * t925 + t1015 - t453;
t433 = -qJ(5) * t461 - qJ(6) * t455;
t432 = t803 * t472 + t844 * t945 + t1050;
t431 = -t806 * t471 + (qJ(3) + t922) * t616 + t1049;
t430 = t803 * t455 + t457 * t806;
t429 = -t455 * t806 + t457 * t803;
t428 = t439 * t804 + t489 * t807;
t427 = -t439 * t807 + t489 * t804;
t426 = pkin(3) * t452 - qJ(3) * t453;
t425 = -pkin(3) * t616 - t803 * t451 - t806 * t502 + t1034;
t424 = -pkin(7) * t513 + t459 * t807 - t463 * t804;
t423 = -t806 * t447 - t803 * t541 + t985;
t422 = t458 * t807 - t460 * t804 - t1038;
t421 = -pkin(1) * t497 + t532 * t925 - t1012 + t452;
t420 = pkin(3) * t561 - t453 * t925;
t419 = t446 * t808 + t453 * t805;
t418 = t446 * t805 - t453 * t808;
t417 = -t806 * t462 - t803 * t464 - t537 * t925 + t1015;
t416 = qJ(3) * t616 - t806 * t451 + t803 * t502 + t1049;
t415 = t803 * t447 - t806 * t541 + t1026;
t414 = -qJ(6) * t457 - t461 * t924;
t413 = t429 * t804 + t461 * t807;
t412 = -t429 * t807 + t461 * t804;
t411 = -pkin(1) * t498 + t803 * t462 - t806 * t464 + t530 * t925 - t1012;
t410 = -pkin(7) * t497 - t434 * t804 + t476 * t807;
t409 = -t438 * t804 + t443 * t807 - t1038;
t408 = -t437 * t804 + t441 * t807 - t1053;
t407 = -t806 * t442 - t803 * t444 - t536 * t925 - t1015;
t406 = t428 * t808 + t440 * t805;
t405 = t428 * t805 - t440 * t808;
t404 = -pkin(1) * t445 - qJ(3) * t561 + t452 * t925;
t403 = -pkin(7) * t498 - t417 * t804 + t456 * t807;
t402 = -pkin(1) * t496 + t803 * t442 - t806 * t444 + t528 * t925 + t1012;
t401 = -t425 * t804 + t436 * t807 - t1053;
t400 = pkin(3) * t439 - pkin(4) * t822 - qJ(3) * t440 + qJ(5) * t473;
t399 = -t423 * t804 + t435 * t807 - t1038;
t398 = -t925 * t440 + (t846 + t921) * t489;
t397 = t413 * t808 + t430 * t805;
t396 = t413 * t805 - t430 * t808;
t395 = -pkin(7) * t496 - t407 * t804 + t450 * t807;
t394 = -pkin(7) * t445 - t420 * t804 + t426 * t807;
t393 = -pkin(1) * t427 + t925 * t439 + (t844 - t922) * t489;
t392 = pkin(3) * t429 - qJ(3) * t430 + qJ(5) * t457 - t455 * t924;
t391 = pkin(3) * t461 - t806 * t414 - t430 * t925 - t803 * t433;
t390 = -pkin(7) * t427 - t398 * t804 + t400 * t807;
t389 = -pkin(1) * t412 - qJ(3) * t461 + t803 * t414 + t429 * t925 - t806 * t433;
t388 = -pkin(7) * t412 - t391 * t804 + t392 * t807;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t767, -t768, 0, t693, 0, 0, 0, 0, 0, 0, -t644, t643, t687, t564, 0, 0, 0, 0, 0, 0, t687, t644, -t643, t495, 0, 0, 0, 0, 0, 0, t1019, t487, t469, t419, 0, 0, 0, 0, 0, 0, t1019, t470, t1060, t406, 0, 0, 0, 0, 0, 0, t1019, t1060, t468, t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t768, -t767, 0, t692, 0, 0, 0, 0, 0, 0, -t640, t639, t686, t563, 0, 0, 0, 0, 0, 0, t686, t640, -t639, t494, 0, 0, 0, 0, 0, 0, t1020, t484, t466, t418, 0, 0, 0, 0, 0, 0, t1020, t467, t1061, t405, 0, 0, 0, 0, 0, 0, t1020, t1061, t465, t396; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t699, t696, 0, -t623, 0, 0, 0, 0, 0, 0, 0, -t699, -t696, t539, 0, 0, 0, 0, 0, 0, t991, t513, t497, t445, 0, 0, 0, 0, 0, 0, t991, t498, t1024, t427, 0, 0, 0, 0, 0, 0, t991, t1024, t496, t412; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t768, 0, -t767, 0, t839, -t731, -t692, -pkin(6) * t692, t668, t630, t986, t667, t966, t716, -t627 * t805 + t637 * t808 + t1040, -t626 * t805 + t638 * t808 - t1058, t623 * t808 - t920, -pkin(6) * t563 - (pkin(1) * t805 - pkin(7) * t808) * t623, t716, -t986, -t966, t668, t630, t667, t524 * t808 - t757 * t805 - t920, t525 * t808 - t552 * t805 - t1040, t526 * t808 - t544 * t805 + t1058, -pkin(6) * t494 + t475 * t808 - t490 * t805, t959, t503 * t808 - t533 * t805, t522 * t808 + t1001, t957, t1046, t958, t422 * t808 - t448 * t805 - t1055, -pkin(6) * t484 + t424 * t808 - t449 * t805, -pkin(6) * t466 + t410 * t808 - t421 * t805, -pkin(6) * t418 + t394 * t808 - t404 * t805, t959, t1066, t1044, t958, -t1046, t957, t409 * t808 - t432 * t805 - t1055, -pkin(6) * t467 + t403 * t808 - t411 * t805, t408 * t808 - t431 * t805 - t1064, -pkin(6) * t405 + t390 * t808 - t393 * t805, t959, t1044, -t1066, t957, t1046, t587 * t808 - t952, t399 * t808 - t415 * t805 - t1055, t401 * t808 - t416 * t805 - t1064, -pkin(6) * t465 + t395 * t808 - t402 * t805, -pkin(6) * t396 + t388 * t808 - t389 * t805; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t767, 0, t768, 0, t731, t839, t693, pkin(6) * t693, t666, t629, t987, t665, t967, t714, t627 * t808 + t637 * t805 - t1039, t626 * t808 + t638 * t805 + t1057, t623 * t805 + t681, pkin(6) * t564 - (-pkin(1) * t808 - pkin(7) * t805) * t623, t714, -t987, -t967, t666, t629, t665, t524 * t805 + t757 * t808 + t681, t525 * t805 + t552 * t808 + t1039, t526 * t805 + t544 * t808 - t1057, pkin(6) * t495 + t475 * t805 + t490 * t808, t969, t503 * t805 + t533 * t808, t522 * t805 - t996, t962, t1047, t963, t422 * t805 + t448 * t808 + t1056, pkin(6) * t487 + t424 * t805 + t449 * t808, pkin(6) * t469 + t410 * t805 + t421 * t808, pkin(6) * t419 + t394 * t805 + t404 * t808, t969, t1067, t1045, t963, -t1047, t962, t409 * t805 + t432 * t808 + t1056, pkin(6) * t470 + t403 * t805 + t411 * t808, t408 * t805 + t431 * t808 + t1065, pkin(6) * t406 + t390 * t805 + t393 * t808, t969, t1045, -t1067, t962, t1047, t587 * t805 + t950, t399 * t805 + t415 * t808 + t1056, t401 * t805 + t416 * t808 + t1065, pkin(6) * t468 + t395 * t805 + t402 * t808, pkin(6) * t397 + t388 * t805 + t389 * t808; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t775, t776, 0, 0, t697, t678, t832, t695, -t938, 0, pkin(1) * t764 + t898 - t977, -pkin(1) * t761 + t1013 - t899, t624 + t870, pkin(1) * t737 + pkin(7) * t624, 0, -t832, t938, t697, t678, t695, t601 * t807 + t602 * t804 + t870, t977 + t807 * t566 + (-pkin(1) - t916) * t764, -t1013 + t804 * t565 + (pkin(1) + t923) * t761, pkin(7) * t540 + (pkin(1) - t836) * t590, t872, t531 * t807 + t676, t619 * t804 + t999, t932, -t1048, t930, t458 * t804 + t460 * t807 + t1025, pkin(7) * t516 + t459 * t804 + t463 * t807 - t1043, -pkin(1) * t538 + pkin(7) * t500 + t434 * t807 + t476 * t804, -pkin(1) * t453 + pkin(7) * t446 + t420 * t807 + t426 * t804, t872, t1063, t1022, t930, t1048, t932, t438 * t807 + t443 * t804 + t1025, -pkin(1) * t537 + pkin(7) * t501 + t417 * t807 + t456 * t804, t437 * t807 + t441 * t804 + t1059, -pkin(1) * t440 + pkin(7) * t428 + t398 * t807 + t400 * t804, t872, t1022, -t1063, t932, -t1048, t635 * t807 + t732, t423 * t807 + t435 * t804 + t1025, t425 * t807 + t436 * t804 + t1059, -pkin(1) * t536 + pkin(7) * t499 + t407 * t807 + t450 * t804, -pkin(1) * t430 + pkin(7) * t413 + t391 * t807 + t392 * t804;];
tauB_reg  = t1;
