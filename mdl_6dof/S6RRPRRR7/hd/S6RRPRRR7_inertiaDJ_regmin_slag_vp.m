% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR7_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR7_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR7_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR7_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:59:46
% EndTime: 2019-03-09 13:59:52
% DurationCPUTime: 2.08s
% Computational Cost: add. (2498->237), mult. (5601->409), div. (0->0), fcn. (5254->8), ass. (0->167)
t102 = cos(qJ(5));
t96 = t102 ^ 2;
t98 = sin(qJ(5));
t172 = t98 ^ 2 - t96;
t195 = qJD(5) * t172;
t199 = 0.2e1 * t195;
t101 = cos(qJ(6));
t97 = sin(qJ(6));
t177 = t97 * t98;
t114 = t101 * t102 - t177;
t100 = sin(qJ(2));
t104 = cos(qJ(2));
t103 = cos(qJ(4));
t160 = qJD(4) * t103;
t99 = sin(qJ(4));
t163 = qJD(4) * t99;
t156 = t100 * qJD(2);
t90 = t104 * qJD(2);
t196 = t103 * t156 - t99 * t90;
t41 = t100 * t160 - t104 * t163 - t196;
t198 = t114 * t41;
t66 = t100 * t103 - t104 * t99;
t164 = t97 * t102;
t67 = t101 * t98 + t164;
t37 = t67 * t66;
t197 = -t104 * pkin(2) - t100 * qJ(3);
t73 = -pkin(1) + t197;
t60 = t104 * pkin(3) - t73;
t171 = t100 * t99;
t65 = t103 * t104 + t171;
t35 = pkin(4) * t65 - pkin(9) * t66 + t60;
t191 = pkin(7) - pkin(8);
t78 = t191 * t104;
t165 = t103 * t78;
t76 = t191 * t100;
t45 = t99 * t76 + t165;
t43 = t102 * t45;
t175 = t98 * t35 + t43;
t154 = qJD(5) + qJD(6);
t26 = t45 * qJD(4) + (-t191 * t171 - t165) * qJD(2);
t192 = -pkin(2) - pkin(3);
t143 = t103 * t192;
t69 = t99 * qJ(3) + pkin(4) - t143;
t110 = t103 * qJ(3) + t99 * t192;
t70 = -pkin(9) + t110;
t194 = -t26 + (t65 * t70 - t66 * t69) * qJD(5);
t193 = 2 * qJD(3);
t190 = pkin(9) + pkin(10);
t189 = pkin(5) * t41;
t188 = pkin(5) * t65;
t187 = pkin(10) - t70;
t159 = qJD(5) * t102;
t42 = (qJD(2) - qJD(4)) * t65;
t176 = t98 * t42;
t111 = t66 * t159 + t176;
t162 = qJD(5) * t98;
t173 = qJ(3) * t90 + t100 * qJD(3);
t47 = t192 * t156 + t173;
t18 = pkin(4) * t41 - pkin(9) * t42 + t47;
t25 = -t76 * t160 + t78 * t163 + t191 * t196;
t6 = t102 * t25 - t35 * t159 + t45 * t162 - t98 * t18;
t5 = -t111 * pkin(10) - t6;
t186 = t101 * t5;
t185 = t102 * pkin(5);
t178 = t66 * t98;
t14 = -pkin(10) * t178 + t175;
t184 = t14 * t97;
t157 = qJD(6) * t101;
t39 = -t101 * t159 - t102 * t157 + t154 * t177;
t183 = t39 * t67;
t182 = t41 * t67;
t52 = qJ(3) * t163 - t103 * qJD(3) - qJD(4) * t143;
t181 = t52 * t98;
t53 = t99 * qJD(3) + t110 * qJD(4);
t180 = t53 * t98;
t179 = t66 * t42;
t55 = t69 + t185;
t87 = -pkin(4) - t185;
t174 = t55 - t87;
t170 = t101 * t14;
t169 = t102 * t42;
t168 = t102 * t52;
t167 = t102 * t53;
t166 = t102 * t66;
t161 = qJD(6) * t97;
t158 = qJD(5) * t103;
t155 = -0.2e1 * t183;
t153 = -0.2e1 * pkin(1) * qJD(2);
t152 = -0.2e1 * pkin(4) * qJD(5);
t151 = pkin(5) * t162;
t150 = pkin(5) * t161;
t149 = t98 * t169;
t148 = t66 * t162;
t147 = pkin(5) * t157;
t146 = pkin(7) * t156;
t145 = pkin(7) * t90;
t137 = t102 * t18 + t25 * t98;
t4 = -pkin(10) * t169 + t189 + (-t43 + (pkin(10) * t66 - t35) * t98) * qJD(5) + t137;
t144 = t101 * t4 - t5 * t97;
t141 = t98 * t159;
t136 = t102 * t35 - t45 * t98;
t13 = -pkin(10) * t166 + t136 + t188;
t140 = -t13 - t188;
t139 = qJD(5) * t190;
t135 = qJD(5) * (pkin(4) + t69);
t134 = qJD(5) * t187;
t44 = -t103 * t76 + t99 * t78;
t46 = t53 - t151;
t132 = t46 - t151;
t131 = -pkin(4) * t42 - pkin(9) * t41;
t130 = pkin(4) * t66 + pkin(9) * t65;
t38 = t114 * t66;
t8 = t114 * t42 - t154 * t37;
t129 = t38 * t39 - t67 * t8;
t12 = t111 * pkin(5) + t26;
t36 = pkin(5) * t178 + t44;
t128 = -t12 * t67 + t36 * t39;
t40 = t154 * t67;
t127 = t114 * t12 - t36 * t40;
t126 = -t114 * t39 - t40 * t67;
t125 = t39 * t65 - t182;
t124 = t40 * t65 - t198;
t123 = t41 * t66 + t42 * t65;
t121 = t13 * t97 + t170;
t120 = t101 * t13 - t184;
t48 = t187 * t98;
t49 = t187 * t102;
t119 = -t101 * t49 + t48 * t97;
t118 = t101 * t48 + t49 * t97;
t75 = t190 * t98;
t77 = t190 * t102;
t117 = t101 * t77 - t75 * t97;
t116 = -t101 * t75 - t77 * t97;
t115 = t103 * t66 + t65 * t99;
t113 = t103 * t39 + t67 * t163;
t112 = -t103 * t40 - t114 * t163;
t109 = 0.2e1 * t126;
t9 = t42 * t164 - t97 * t148 - t161 * t178 + (t154 * t166 + t176) * t101;
t108 = t114 * t8 + t37 * t39 - t38 * t40 - t67 * t9;
t107 = qJD(2) * t197 + qJD(3) * t104;
t106 = -t103 * t42 - t41 * t99 + (-t103 * t65 + t66 * t99) * qJD(4);
t105 = -qJD(5) * t44 - t41 * t70 + t42 * t69 + t52 * t65 + t53 * t66;
t79 = 0.2e1 * t141;
t72 = t102 * t139;
t71 = t98 * t139;
t63 = -0.2e1 * t195;
t62 = t66 ^ 2;
t57 = t102 * t163 + t98 * t158;
t56 = -t102 * t158 + t98 * t163;
t54 = pkin(2) * t156 - t173;
t34 = 0.2e1 * t65 * t41;
t33 = t102 * t134 + t181;
t32 = t98 * t134 - t168;
t28 = t65 * t159 + t41 * t98;
t27 = -t102 * t41 + t65 * t162;
t24 = -t117 * qJD(6) - t101 * t72 + t71 * t97;
t23 = -t116 * qJD(6) + t101 * t71 + t72 * t97;
t22 = -t114 * t154 * t99 - t67 * t160;
t21 = -t114 * t160 + t40 * t99;
t19 = t195 * t66 - t149;
t17 = 0.4e1 * t66 * t141 + t172 * t42;
t11 = -t119 * qJD(6) + t101 * t33 - t32 * t97;
t10 = -t118 * qJD(6) - t101 * t32 - t33 * t97;
t7 = -qJD(5) * t175 + t137;
t2 = -t121 * qJD(6) + t144;
t1 = -t120 * qJD(6) - t4 * t97 - t186;
t3 = [0, 0, 0, 0.2e1 * t100 * t90, 0.2e1 * (-t100 ^ 2 + t104 ^ 2) * qJD(2), 0, 0, 0, t100 * t153, t104 * t153, -0.2e1 * t104 * t54 + 0.2e1 * t73 * t156, 0, -0.2e1 * t54 * t100 - 0.2e1 * t73 * t90, 0.2e1 * t73 * t54, 0.2e1 * t179, -0.2e1 * t123, 0, 0, 0, 0.2e1 * t41 * t60 + 0.2e1 * t47 * t65, 0.2e1 * t42 * t60 + 0.2e1 * t47 * t66, -0.2e1 * t141 * t62 + 0.2e1 * t96 * t179, -0.4e1 * t149 * t66 + t62 * t199, 0.2e1 * t102 * t123 - 0.2e1 * t148 * t65, -0.2e1 * t111 * t65 - 0.2e1 * t41 * t178, t34, 0.2e1 * t111 * t44 + 0.2e1 * t136 * t41 + 0.2e1 * t26 * t178 + 0.2e1 * t7 * t65, 0.2e1 * t6 * t65 - 0.2e1 * t175 * t41 - 0.2e1 * t44 * t148 + 0.2e1 * (t26 * t66 + t44 * t42) * t102, 0.2e1 * t38 * t8, -0.2e1 * t37 * t8 - 0.2e1 * t38 * t9, 0.2e1 * t38 * t41 + 0.2e1 * t65 * t8, -0.2e1 * t37 * t41 - 0.2e1 * t65 * t9, t34, 0.2e1 * t12 * t37 + 0.2e1 * t120 * t41 + 0.2e1 * t2 * t65 + 0.2e1 * t36 * t9, 0.2e1 * t1 * t65 + 0.2e1 * t12 * t38 - 0.2e1 * t121 * t41 + 0.2e1 * t36 * t8; 0, 0, 0, 0, 0, t90, -t156, 0, -t145, t146, -t145, t107, -t146, t107 * pkin(7), 0, 0, -t42, t41, 0, t26, -t25, t19, t17, -t28, t27, 0, -t102 * t194 + t105 * t98, t105 * t102 + t194 * t98, t129, -t108, t125, t124, 0, t11 * t65 + t118 * t41 + t46 * t37 + t55 * t9 + t127, t10 * t65 - t119 * t41 + t46 * t38 + t55 * t8 + t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, qJ(3) * t193, 0, 0, 0, 0, 0, 0.2e1 * t53, -0.2e1 * t52, t79, t63, 0, 0, 0, -0.2e1 * t162 * t69 + 0.2e1 * t167, -0.2e1 * t159 * t69 - 0.2e1 * t180, t155, t109, 0, 0, 0, 0.2e1 * t114 * t46 - 0.2e1 * t40 * t55, 0.2e1 * t39 * t55 - 0.2e1 * t46 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, t145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106 * t98 - t115 * t159, t102 * t106 + t115 * t162, 0, 0, 0, 0, 0, -t103 * t9 + t22 * t65 + (qJD(4) * t37 - t182) * t99, -t103 * t8 + t21 * t65 + (qJD(4) * t38 - t198) * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, t160, 0, 0, 0, 0, 0, t57, -t56, 0, 0, 0, 0, 0, -t112, -t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t41, 0, -t26, t25, -t19, -t17, t28, -t27, 0, -t26 * t102 + t131 * t98 + (-t102 * t130 + t44 * t98) * qJD(5), t26 * t98 + t131 * t102 + (t102 * t44 + t130 * t98) * qJD(5), -t129, t108, -t125, -t124, 0, t116 * t41 + t151 * t37 + t24 * t65 + t87 * t9 - t127, -t117 * t41 + t151 * t38 + t23 * t65 + t87 * t8 - t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, t52, -0.2e1 * t141, t199, 0, 0, 0, t135 * t98 - t167, t102 * t135 + t180, 0.2e1 * t183, -0.2e1 * t126, 0, 0, 0, -t114 * t132 + t174 * t40, t132 * t67 - t174 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t160, 0, 0, 0, 0, 0, -t57, t56, 0, 0, 0, 0, 0, t112, t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t63, 0, 0, 0, t98 * t152, t102 * t152, t155, t109, 0, 0, 0, -0.2e1 * t114 * t151 + 0.2e1 * t40 * t87, 0.2e1 * t151 * t67 - 0.2e1 * t39 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148 + t169, -t111, t41, t7, t6, 0, 0, t8, -t9, t41, t101 * t189 + (t140 * t97 - t170) * qJD(6) + t144, -t186 + (-t4 - t189) * t97 + (t101 * t140 + t184) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, t162, 0, -t159 * t70 + t181, t162 * t70 + t168, 0, 0, t39, t40, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 * t99 - t160 * t98, -t102 * t160 + t162 * t99, 0, 0, 0, 0, 0, t22, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, -t162, 0, -pkin(9) * t159, pkin(9) * t162, 0, 0, -t39, -t40, 0, t24, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t150, -0.2e1 * t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, t41, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, t40, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t40, 0, t24, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, -t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
