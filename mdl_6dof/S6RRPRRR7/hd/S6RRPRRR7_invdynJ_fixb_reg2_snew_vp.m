% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 22:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRR7_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 22:21:05
% EndTime: 2019-05-06 22:21:24
% DurationCPUTime: 9.25s
% Computational Cost: add. (46483->521), mult. (94738->678), div. (0->0), fcn. (63740->10), ass. (0->318)
t263 = sin(qJ(4));
t317 = qJDD(2) - qJDD(4);
t264 = sin(qJ(2));
t268 = cos(qJ(4));
t269 = cos(qJ(2));
t220 = (t264 * t263 + t269 * t268) * qJD(1);
t326 = qJD(1) * t264;
t222 = -t263 * t269 * qJD(1) + t268 * t326;
t339 = t222 * t220;
t384 = -t317 - t339;
t386 = t263 * t384;
t385 = t268 * t384;
t320 = qJD(1) * qJD(2);
t311 = t269 * t320;
t319 = t264 * qJDD(1);
t231 = t311 + t319;
t312 = t264 * t320;
t318 = t269 * qJDD(1);
t232 = -t312 + t318;
t182 = -qJD(4) * t220 + t231 * t268 - t232 * t263;
t255 = qJD(2) - qJD(4);
t340 = t220 * t255;
t164 = t182 + t340;
t258 = t264 ^ 2;
t270 = qJD(1) ^ 2;
t334 = t258 * t270;
t369 = qJD(2) ^ 2;
t240 = t334 + t369;
t244 = t269 * t270 * t264;
t238 = qJDD(2) - t244;
t330 = t269 * t238;
t383 = pkin(7) * (-t240 * t264 + t330);
t261 = sin(qJ(6));
t262 = sin(qJ(5));
t267 = cos(qJ(5));
t199 = t222 * t262 + t267 * t255;
t200 = t222 * t267 - t255 * t262;
t266 = cos(qJ(6));
t172 = t266 * t199 + t200 * t261;
t174 = -t199 * t261 + t200 * t266;
t137 = t174 * t172;
t305 = t231 * t263 + t268 * t232;
t181 = -qJD(4) * t222 - t305;
t179 = qJDD(5) - t181;
t177 = qJDD(6) + t179;
t376 = -t137 + t177;
t382 = t261 * t376;
t176 = t200 * t199;
t374 = -t176 + t179;
t381 = t262 * t374;
t380 = t266 * t376;
t379 = t267 * t374;
t378 = t232 - t312;
t377 = pkin(7) - pkin(8);
t285 = -t267 * t182 + t262 * t317;
t147 = -t199 * qJD(5) - t285;
t284 = -t262 * t182 - t267 * t317;
t278 = t200 * qJD(5) - t284;
t100 = -t172 * qJD(6) + t266 * t147 - t261 * t278;
t217 = qJD(5) + t220;
t214 = qJD(6) + t217;
t157 = t214 * t172;
t375 = -t157 + t100;
t187 = t217 * t199;
t134 = t187 + t147;
t259 = t269 ^ 2;
t333 = t259 * t270;
t373 = t330 + (t333 - t369) * t264;
t308 = t147 * t261 + t266 * t278;
t78 = (qJD(6) - t214) * t174 + t308;
t130 = (qJD(5) - t217) * t200 - t284;
t161 = (qJD(4) + t255) * t222 + t305;
t170 = t172 ^ 2;
t171 = t174 ^ 2;
t371 = t199 ^ 2;
t197 = t200 ^ 2;
t212 = t214 ^ 2;
t215 = t217 ^ 2;
t218 = t220 ^ 2;
t219 = t222 ^ 2;
t370 = t255 ^ 2;
t368 = 2 * qJD(3);
t367 = pkin(2) + pkin(3);
t239 = -qJD(2) * pkin(3) - pkin(8) * t326;
t265 = sin(qJ(1));
t364 = cos(qJ(1));
t309 = g(1) * t265 - t364 * g(2);
t223 = qJDD(1) * pkin(1) + pkin(7) * t270 + t309;
t276 = pkin(2) * t378 + t223;
t325 = qJD(2) * t269;
t142 = qJ(3) * t231 + t232 * pkin(3) - pkin(8) * t333 + (qJ(3) * t325 + (t368 + t239) * t264) * qJD(1) + t276;
t103 = -t164 * pkin(9) + (-t222 * t255 - t181) * pkin(4) + t142;
t293 = t364 * g(1) + t265 * g(2);
t355 = qJDD(1) * pkin(7);
t277 = -t270 * pkin(1) - t293 + t355;
t213 = t269 * t277;
t356 = qJ(3) * t264;
t363 = pkin(2) * t269;
t301 = -t356 - t363;
t290 = t270 * t301;
t303 = qJDD(2) * qJ(3) + qJD(2) * t368 + t269 * t290 + t213;
t362 = g(3) * t264;
t292 = t303 - t362;
t152 = -pkin(3) * t333 - pkin(8) * t232 + (-pkin(2) * qJD(2) + t239) * qJD(2) + t292;
t237 = qJDD(2) + t244;
t275 = t264 * t277;
t273 = -qJDD(2) * pkin(2) - t369 * qJ(3) + qJDD(3) + t275;
t361 = t269 * g(3);
t271 = t361 - t231 * pkin(8) - t237 * pkin(3) + (pkin(8) * t325 + t301 * t326) * qJD(1) + t273;
t116 = t268 * t152 + t263 * t271;
t192 = pkin(4) * t220 - pkin(9) * t222;
t106 = -t370 * pkin(4) - t317 * pkin(9) - t220 * t192 + t116;
t62 = -t267 * t103 + t106 * t262;
t40 = pkin(5) * t374 - pkin(10) * t134 - t62;
t184 = pkin(5) * t217 - pkin(10) * t200;
t63 = t262 * t103 + t267 * t106;
t51 = -t371 * pkin(5) - pkin(10) * t278 - t217 * t184 + t63;
t21 = t261 * t51 - t266 * t40;
t22 = t261 * t40 + t266 * t51;
t11 = -t21 * t266 + t22 * t261;
t366 = pkin(5) * t11;
t81 = t157 + t100;
t48 = -t261 * t78 - t266 * t81;
t365 = pkin(5) * t48;
t360 = t11 * t262;
t359 = t11 * t267;
t115 = t152 * t263 - t268 * t271;
t105 = t317 * pkin(4) - t370 * pkin(9) + t192 * t222 + t115;
t64 = pkin(5) * t278 - t371 * pkin(10) + t184 * t200 + t105;
t358 = t261 * t64;
t357 = t266 * t64;
t354 = t105 * t262;
t353 = t105 * t267;
t113 = t137 + t177;
t352 = t113 * t261;
t351 = t113 * t266;
t139 = t176 + t179;
t350 = t139 * t262;
t349 = t139 * t267;
t348 = t142 * t263;
t347 = t142 * t268;
t189 = -t339 + t317;
t346 = t189 * t263;
t345 = t189 * t268;
t344 = t214 * t261;
t343 = t214 * t266;
t342 = t217 * t262;
t341 = t217 * t267;
t336 = t255 * t263;
t335 = t255 * t268;
t233 = -0.2e1 * t312 + t318;
t332 = t264 * t233;
t331 = t264 * t237;
t242 = -t333 - t369;
t329 = pkin(7) * (t242 * t269 - t331) + pkin(1) * t233;
t327 = t258 + t259;
t235 = t327 * t270;
t328 = pkin(1) * t235 + t327 * t355;
t322 = qJD(5) + t217;
t316 = t263 * t137;
t315 = t268 * t137;
t314 = t263 * t176;
t313 = t268 * t176;
t310 = pkin(4) * t263 + qJ(3);
t12 = t21 * t261 + t266 * t22;
t35 = t262 * t62 + t267 * t63;
t206 = t275 + t361;
t207 = t213 - t362;
t306 = t206 * t264 + t269 * t207;
t304 = pkin(4) * t268 + t367;
t302 = -pkin(4) * t105 + pkin(9) * t35;
t300 = t231 + t311;
t299 = t262 * t63 - t267 * t62;
t69 = -t115 * t268 + t116 * t263;
t70 = t115 * t263 + t116 * t268;
t230 = 0.2e1 * t311 + t319;
t296 = t269 * t230 + t332;
t125 = -t212 - t170;
t85 = t125 * t261 + t380;
t294 = pkin(5) * t85 - t21;
t291 = -t369 * pkin(2) + t303;
t289 = t269 * t367 + pkin(1) + t356;
t141 = -t171 - t212;
t89 = t141 * t266 - t352;
t288 = pkin(5) * t89 - t22;
t159 = -t215 - t371;
t108 = t159 * t267 - t381;
t131 = -t322 * t200 + t284;
t287 = pkin(4) * t131 + pkin(9) * t108 - t353;
t169 = -t197 - t215;
t111 = -t169 * t262 - t349;
t135 = t322 * t199 + t285;
t286 = pkin(4) * t135 + pkin(9) * t111 + t354;
t151 = t197 + t371;
t94 = -t130 * t267 + t134 * t262;
t283 = pkin(4) * t151 + pkin(9) * t94 + t35;
t109 = -t170 - t171;
t50 = t261 * t81 - t266 * t78;
t26 = -t262 * t48 + t267 * t50;
t8 = -pkin(5) * t109 + pkin(10) * t50 + t12;
t9 = -pkin(10) * t48 - t11;
t282 = pkin(4) * t109 - pkin(9) * t26 - t262 * t9 - t267 * t8;
t77 = (qJD(6) + t214) * t174 + t308;
t86 = t125 * t266 - t382;
t30 = -pkin(5) * t77 + pkin(10) * t86 - t357;
t38 = -pkin(10) * t85 + t358;
t54 = -t262 * t85 + t267 * t86;
t281 = pkin(4) * t77 - pkin(9) * t54 - t262 * t38 - t267 * t30;
t90 = -t141 * t261 - t351;
t31 = -pkin(5) * t375 + pkin(10) * t90 + t358;
t41 = -pkin(10) * t89 + t357;
t56 = -t262 * t89 + t267 * t90;
t280 = pkin(4) * t375 - pkin(9) * t56 - t262 * t41 - t267 * t31;
t10 = -pkin(5) * t64 + pkin(10) * t12;
t7 = t12 * t267 - t360;
t279 = pkin(4) * t64 - pkin(9) * t7 + pkin(10) * t360 - t10 * t267;
t274 = t326 * t368 + t276;
t272 = t264 * t290 + t273;
t180 = t272 + t361;
t236 = (-t258 + t259) * t270;
t209 = -t219 + t370;
t208 = t218 - t370;
t205 = -t219 - t370;
t204 = t331 + t269 * (-t334 + t369);
t203 = t300 * t264;
t202 = t378 * t269;
t193 = t219 - t218;
t188 = -t370 - t218;
t186 = -t197 + t215;
t185 = -t215 + t371;
t178 = t291 - t362;
t175 = t197 - t371;
t167 = -t205 * t263 + t345;
t166 = t205 * t268 + t346;
t165 = t182 - t340;
t160 = (qJD(4) - t255) * t222 + t305;
t156 = t188 * t268 - t386;
t155 = t188 * t263 + t385;
t154 = -t171 + t212;
t153 = t170 - t212;
t144 = (-t199 * t267 + t200 * t262) * t217;
t143 = (-t199 * t262 - t200 * t267) * t217;
t136 = t171 - t170;
t133 = -t187 + t147;
t129 = t147 * t267 - t200 * t342;
t128 = t147 * t262 + t200 * t341;
t127 = t199 * t341 + t262 * t278;
t126 = -t199 * t342 + t267 * t278;
t124 = -t161 * t268 + t165 * t263;
t123 = -t161 * t263 - t165 * t268;
t122 = t185 * t267 - t350;
t121 = -t186 * t262 + t379;
t120 = t185 * t262 + t349;
t119 = t186 * t267 + t381;
t118 = (-t172 * t266 + t174 * t261) * t214;
t117 = (-t172 * t261 - t174 * t266) * t214;
t110 = t169 * t267 - t350;
t107 = t159 * t262 + t379;
t99 = -qJD(6) * t174 - t308;
t98 = t153 * t266 - t352;
t97 = -t154 * t261 + t380;
t96 = t153 * t261 + t351;
t95 = t154 * t266 + t382;
t93 = t131 * t267 - t133 * t262;
t92 = -t130 * t262 - t134 * t267;
t91 = t131 * t262 + t133 * t267;
t88 = t111 * t268 - t135 * t263;
t87 = t111 * t263 + t135 * t268;
t84 = t108 * t268 - t131 * t263;
t83 = t108 * t263 + t131 * t268;
t76 = t100 * t266 - t174 * t344;
t75 = t100 * t261 + t174 * t343;
t74 = t172 * t343 - t261 * t99;
t73 = t172 * t344 + t266 * t99;
t72 = -t117 * t262 + t118 * t267;
t71 = t117 * t267 + t118 * t262;
t68 = -t151 * t263 + t268 * t94;
t67 = t151 * t268 + t263 * t94;
t66 = -pkin(9) * t110 + t353;
t65 = -pkin(9) * t107 + t354;
t60 = -t262 * t96 + t267 * t98;
t59 = -t262 * t95 + t267 * t97;
t58 = t262 * t98 + t267 * t96;
t57 = t262 * t97 + t267 * t95;
t55 = t262 * t90 + t267 * t89;
t53 = t262 * t86 + t267 * t85;
t52 = -pkin(4) * t110 + t63;
t49 = -t261 * t375 - t266 * t77;
t47 = -t261 * t77 + t266 * t375;
t46 = -pkin(4) * t107 + t62;
t45 = -t262 * t75 + t267 * t76;
t44 = -t262 * t73 + t267 * t74;
t43 = t262 * t76 + t267 * t75;
t42 = t262 * t74 + t267 * t73;
t37 = t263 * t375 + t268 * t56;
t36 = t263 * t56 - t268 * t375;
t33 = t263 * t77 + t268 * t54;
t32 = t263 * t54 - t268 * t77;
t29 = t105 * t263 + t268 * t35;
t28 = -t105 * t268 + t263 * t35;
t27 = -pkin(9) * t92 - t299;
t25 = -t262 * t47 + t267 * t49;
t24 = t262 * t50 + t267 * t48;
t23 = t262 * t49 + t267 * t47;
t19 = t109 * t263 + t26 * t268;
t18 = -t109 * t268 + t26 * t263;
t17 = -pkin(4) * t24 - t365;
t16 = -pkin(4) * t55 - t288;
t15 = -pkin(9) * t55 - t262 * t31 + t267 * t41;
t14 = -pkin(4) * t53 - t294;
t13 = -pkin(9) * t53 - t262 * t30 + t267 * t38;
t6 = t12 * t262 + t359;
t5 = t263 * t64 + t268 * t7;
t4 = t263 * t7 - t268 * t64;
t3 = -pkin(4) * t6 - t366;
t2 = -pkin(9) * t24 - t262 * t8 + t267 * t9;
t1 = -pkin(9) * t6 - pkin(10) * t359 - t10 * t262;
t20 = [0, 0, 0, 0, 0, qJDD(1), t309, t293, 0, 0, t203, t296, t204, t202, t373, 0, t223 * t269 + t329, -pkin(1) * t230 - t264 * t223 - t383, t306 + t328, pkin(1) * t223 + pkin(7) * t306, t203, t204, -t296, 0, -t373, t202, t269 * (pkin(2) * t233 + t274) + (t269 * t300 + t332) * qJ(3) + t329, t264 * (qJ(3) * t235 + t272) + t269 * (pkin(2) * t235 + t291) + t328, t264 * t274 + t383 + (pkin(1) + t363) * t230 + (t230 + t300) * t356, pkin(7) * (t178 * t269 + t180 * t264) + (pkin(1) - t301) * (qJ(3) * t300 + t274), t264 * (t182 * t268 + t222 * t336) + t269 * (-t182 * t263 + t222 * t335), t264 * (-t160 * t268 - t164 * t263) + t269 * (t160 * t263 - t164 * t268), t264 * (-t209 * t263 + t385) + t269 * (-t209 * t268 - t386), t264 * (-t181 * t263 - t220 * t335) + t269 * (-t181 * t268 + t220 * t336), t264 * (t208 * t268 + t346) + t269 * (-t208 * t263 + t345), (t264 * (t220 * t268 - t222 * t263) + t269 * (-t220 * t263 - t222 * t268)) * t255, t264 * (-pkin(8) * t155 + t348) + t269 * (-pkin(8) * t156 + t347) + pkin(7) * (t155 * t264 + t156 * t269) + t289 * t160, t264 * (-pkin(8) * t166 + t347) + t269 * (-pkin(8) * t167 - t348) + pkin(7) * (t166 * t264 + t167 * t269) + t289 * t164, t264 * (-pkin(8) * t123 - t69) + t269 * (-pkin(8) * t124 - t70) + pkin(7) * (t123 * t264 + t124 * t269) + t289 * (-t218 - t219), t142 * t289 + t377 * (t264 * t69 + t269 * t70), t264 * (t129 * t268 + t314) + t269 * (-t129 * t263 + t313), t264 * (t175 * t263 + t268 * t93) + t269 * (t175 * t268 - t263 * t93), t264 * (t121 * t268 + t134 * t263) + t269 * (-t121 * t263 + t134 * t268), t264 * (t127 * t268 - t314) + t269 * (-t127 * t263 - t313), t264 * (t122 * t268 - t130 * t263) + t269 * (-t122 * t263 - t130 * t268), t264 * (t144 * t268 + t179 * t263) + t269 * (-t144 * t263 + t179 * t268), t264 * (-pkin(8) * t83 - t263 * t46 + t268 * t65) + t269 * (-pkin(8) * t84 - t263 * t65 - t268 * t46) + pkin(7) * (t264 * t83 + t269 * t84) + t289 * t107, t264 * (-pkin(8) * t87 - t263 * t52 + t268 * t66) + t269 * (-pkin(8) * t88 - t263 * t66 - t268 * t52) + pkin(7) * (t264 * t87 + t269 * t88) + t289 * t110, t264 * (-pkin(8) * t67 + t268 * t27) + t269 * (-pkin(8) * t68 - t263 * t27) + pkin(7) * (t264 * t67 + t269 * t68) + (t264 * t310 + t269 * t304 + pkin(1)) * t92, (t264 * (-pkin(9) * t268 + t310) + t269 * (pkin(9) * t263 + t304) + pkin(1)) * t299 + t377 * (t264 * t28 + t269 * t29), t264 * (t268 * t45 + t316) + t269 * (-t263 * t45 + t315), t264 * (t136 * t263 + t25 * t268) + t269 * (t136 * t268 - t25 * t263), t264 * (t263 * t81 + t268 * t59) + t269 * (-t263 * t59 + t268 * t81), t264 * (t268 * t44 - t316) + t269 * (-t263 * t44 - t315), t264 * (-t263 * t78 + t268 * t60) + t269 * (-t263 * t60 - t268 * t78), t264 * (t177 * t263 + t268 * t72) + t269 * (t177 * t268 - t263 * t72), t264 * (-pkin(8) * t32 + t13 * t268 - t14 * t263) + t269 * (-pkin(8) * t33 - t13 * t263 - t14 * t268) + pkin(7) * (t264 * t32 + t269 * t33) + t289 * t53, t264 * (-pkin(8) * t36 + t15 * t268 - t16 * t263) + t269 * (-pkin(8) * t37 - t15 * t263 - t16 * t268) + pkin(7) * (t264 * t36 + t269 * t37) + t289 * t55, t264 * (-pkin(8) * t18 - t17 * t263 + t2 * t268) + t269 * (-pkin(8) * t19 - t17 * t268 - t2 * t263) + pkin(7) * (t18 * t264 + t19 * t269) + t289 * t24, t264 * (-pkin(8) * t4 + t1 * t268 - t263 * t3) + t269 * (-pkin(8) * t5 - t1 * t263 - t268 * t3) + pkin(7) * (t264 * t4 + t269 * t5) + t289 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t244, -t236, t319, t244, t318, qJDD(2), -t206, -t207, 0, 0, -t244, t319, t236, qJDD(2), -t318, t244, pkin(2) * t237 + qJ(3) * t242 - t180, (-t264 * pkin(2) + qJ(3) * t269) * qJDD(1), qJ(3) * t238 + (t240 - t369) * pkin(2) + t292, -pkin(2) * t180 + qJ(3) * t178, -t339, -t193, -t165, t339, t161, t317, qJ(3) * t156 - t367 * t155 + t115, qJ(3) * t167 - t367 * t166 + t116, qJ(3) * t124 - t367 * t123, qJ(3) * t70 - t367 * t69, -t128, -t91, -t119, t126, -t120, -t143, qJ(3) * t84 - t367 * t83 - t287, qJ(3) * t88 - t367 * t87 - t286, qJ(3) * t68 - t367 * t67 - t283, qJ(3) * t29 - t367 * t28 - t302, -t43, -t23, -t57, -t42, -t58, -t71, qJ(3) * t33 - t367 * t32 + t281, qJ(3) * t37 - t367 * t36 + t280, qJ(3) * t19 - t367 * t18 + t282, qJ(3) * t5 - t367 * t4 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t237, t319, -t240, t180, 0, 0, 0, 0, 0, 0, t155, t166, t123, t69, 0, 0, 0, 0, 0, 0, t83, t87, t67, t28, 0, 0, 0, 0, 0, 0, t32, t36, t18, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t339, t193, t165, -t339, -t161, -t317, -t115, -t116, 0, 0, t128, t91, t119, -t126, t120, t143, t287, t286, t283, t302, t43, t23, t57, t42, t58, t71, -t281, -t280, -t282, -t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, t175, t134, -t176, -t130, t179, -t62, -t63, 0, 0, t137, t136, t81, -t137, -t78, t177, t294, t288, t365, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t136, t81, -t137, -t78, t177, -t21, -t22, 0, 0;];
tauJ_reg  = t20;
