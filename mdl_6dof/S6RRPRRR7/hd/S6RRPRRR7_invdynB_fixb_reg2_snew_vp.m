% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 22:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 22:21:24
% EndTime: 2019-05-06 22:21:55
% DurationCPUTime: 25.57s
% Computational Cost: add. (131111->778), mult. (267415->1131), div. (0->0), fcn. (179991->10), ass. (0->533)
t881 = qJD(2) ^ 2;
t874 = sin(qJ(2));
t869 = t874 ^ 2;
t882 = qJD(1) ^ 2;
t945 = t869 * t882;
t848 = t881 + t945;
t879 = cos(qJ(2));
t853 = t879 * t882 * t874;
t844 = qJDD(2) - t853;
t939 = t879 * t844;
t797 = -t848 * t874 + t939;
t929 = qJD(1) * qJD(2);
t913 = t879 * t929;
t927 = qJDD(1) * t874;
t833 = 0.2e1 * t913 + t927;
t875 = sin(qJ(1));
t880 = cos(qJ(1));
t754 = t797 * t875 + t833 * t880;
t1006 = pkin(6) * t754;
t757 = t797 * t880 - t833 * t875;
t1005 = pkin(6) * t757;
t1004 = pkin(7) * t797;
t873 = sin(qJ(4));
t878 = cos(qJ(4));
t819 = (t873 * t874 + t878 * t879) * qJD(1);
t834 = t913 + t927;
t914 = t874 * t929;
t925 = qJDD(1) * t879;
t835 = -t914 + t925;
t742 = -qJD(4) * t819 + t834 * t878 - t835 * t873;
t867 = qJD(2) - qJD(4);
t961 = t819 * t867;
t712 = t742 + t961;
t985 = 2 * qJD(3);
t950 = t844 * t874;
t791 = t848 * t879 + t950;
t1003 = pkin(1) * t791;
t1002 = pkin(7) * t791;
t871 = sin(qJ(6));
t933 = qJD(1) * t874;
t821 = -t873 * t879 * qJD(1) + t878 * t933;
t872 = sin(qJ(5));
t877 = cos(qJ(5));
t781 = t821 * t872 + t877 * t867;
t783 = t821 * t877 - t867 * t872;
t876 = cos(qJ(6));
t726 = t876 * t781 + t783 * t871;
t728 = -t781 * t871 + t783 * t876;
t671 = t728 * t726;
t907 = t873 * t834 + t878 * t835;
t741 = -qJD(4) * t821 - t907;
t737 = qJDD(5) - t741;
t891 = qJDD(6) + t737;
t991 = -t671 + t891;
t1001 = t871 * t991;
t733 = t783 * t781;
t989 = -t733 + t737;
t1000 = t872 * t989;
t999 = t876 * t991;
t998 = t877 * t989;
t836 = -0.2e1 * t914 + t925;
t954 = t836 * t879;
t958 = t833 * t874;
t772 = -t954 + t958;
t870 = t879 ^ 2;
t842 = (-t869 + t870) * t882;
t997 = t772 * t875 - t842 * t880;
t996 = t772 * t880 + t842 * t875;
t944 = t870 * t882;
t850 = -t881 + t944;
t795 = -t850 * t879 + t950;
t924 = qJDD(1) * t880;
t995 = t795 * t875 + t879 * t924;
t994 = t795 * t880 - t875 * t925;
t923 = -qJDD(2) + qJDD(4);
t962 = t819 * t821;
t897 = t923 - t962;
t993 = t873 * t897;
t992 = t878 * t897;
t815 = qJD(5) + t819;
t812 = qJD(6) + t815;
t697 = t812 * t726;
t908 = t872 * t742 - t877 * t923;
t686 = -qJD(5) * t783 - t908;
t687 = -t781 * qJD(5) + t877 * t742 + t872 * t923;
t892 = qJD(6) * t726 - t686 * t871 - t687 * t876;
t990 = -t697 - t892;
t752 = t815 * t781;
t665 = -t752 - t687;
t664 = -t752 + t687;
t982 = pkin(2) * t879;
t902 = -qJ(3) * t874 - t982;
t894 = t882 * t902;
t847 = g(1) * t880 + g(2) * t875;
t889 = -pkin(1) * t882 + qJDD(1) * pkin(7) - t847;
t911 = t874 * g(3) - t879 * t889;
t895 = qJDD(2) * qJ(3) + qJD(2) * t985 + t879 * t894 - t911;
t988 = t850 * t874 + t939;
t910 = -t876 * t686 + t871 * t687;
t573 = (qJD(6) - t812) * t728 + t910;
t661 = (qJD(5) - t815) * t783 + t908;
t724 = t726 ^ 2;
t725 = t728 ^ 2;
t987 = t781 ^ 2;
t779 = t783 ^ 2;
t810 = t812 ^ 2;
t813 = t815 ^ 2;
t817 = t819 ^ 2;
t818 = t821 ^ 2;
t986 = t867 ^ 2;
t984 = pkin(2) + pkin(3);
t843 = qJDD(2) + t853;
t827 = t879 * t843;
t851 = -t881 - t944;
t789 = t851 * t874 + t827;
t983 = pkin(1) * t789;
t951 = t843 * t874;
t794 = t851 * t879 - t951;
t753 = t794 * t875 + t836 * t880;
t981 = pkin(6) * t753;
t935 = t869 + t870;
t838 = t935 * qJDD(1);
t841 = t935 * t882;
t776 = t838 * t875 + t841 * t880;
t980 = pkin(6) * t776;
t979 = pkin(7) * t789;
t978 = t835 * pkin(2);
t977 = qJDD(2) * pkin(2);
t845 = -qJD(2) * pkin(3) - pkin(8) * t933;
t846 = t875 * g(1) - t880 * g(2);
t822 = qJDD(1) * pkin(1) + t882 * pkin(7) + t846;
t890 = -pkin(2) * t914 + t822;
t932 = qJD(2) * t879;
t680 = t978 + t834 * qJ(3) + t835 * pkin(3) - pkin(8) * t944 + (qJ(3) * t932 + (t985 + t845) * t874) * qJD(1) + t890;
t613 = -t712 * pkin(9) + (-t821 * t867 - t741) * pkin(4) + t680;
t736 = -pkin(2) * t881 + t895;
t692 = -pkin(3) * t944 - pkin(8) * t835 + qJD(2) * t845 + t736;
t800 = t879 * g(3) + t874 * t889;
t887 = qJDD(3) + t800;
t938 = t881 * qJ(3);
t883 = -t938 - t977 - t834 * pkin(8) - t843 * pkin(3) + (pkin(8) * t932 + t902 * t933) * qJD(1) + t887;
t635 = t878 * t692 + t873 * t883;
t769 = pkin(4) * t819 - pkin(9) * t821;
t616 = -pkin(4) * t986 + pkin(9) * t923 - t819 * t769 + t635;
t548 = -t877 * t613 + t872 * t616;
t510 = pkin(5) * t989 + t665 * pkin(10) - t548;
t549 = t872 * t613 + t877 * t616;
t744 = pkin(5) * t815 - pkin(10) * t783;
t526 = -pkin(5) * t987 + pkin(10) * t686 - t744 * t815 + t549;
t469 = -t876 * t510 + t526 * t871;
t470 = t871 * t510 + t876 * t526;
t432 = -t469 * t876 + t470 * t871;
t976 = t432 * t872;
t975 = t432 * t877;
t634 = t873 * t692 - t878 * t883;
t615 = -t923 * pkin(4) - t986 * pkin(9) + t769 * t821 + t634;
t551 = -t686 * pkin(5) - pkin(10) * t987 + t744 * t783 + t615;
t974 = t551 * t871;
t973 = t551 * t876;
t632 = t671 + t891;
t972 = t632 * t871;
t971 = t632 * t876;
t675 = t733 + t737;
t970 = t675 * t872;
t969 = t675 * t877;
t766 = -t923 - t962;
t968 = t766 * t873;
t967 = t766 * t878;
t966 = t812 * t871;
t965 = t812 * t876;
t964 = t815 * t872;
t963 = t815 * t877;
t960 = t822 * t874;
t959 = t822 * t879;
t955 = t836 * t874;
t947 = t867 * t873;
t946 = t867 * t878;
t943 = t872 * t615;
t942 = t873 * t680;
t941 = t877 * t615;
t940 = t878 * t680;
t937 = pkin(1) * t836 + pkin(7) * t794;
t936 = pkin(1) * t841 + pkin(7) * t838;
t934 = -t881 + t841;
t926 = qJDD(1) * t875;
t922 = t873 * t671;
t921 = t878 * t671;
t920 = t873 * t733;
t919 = t878 * t733;
t918 = t875 * t962;
t917 = t880 * t962;
t912 = pkin(4) * t873 + qJ(3);
t433 = t469 * t871 + t876 * t470;
t485 = t872 * t548 + t877 * t549;
t732 = t800 * t874 - t879 * t911;
t786 = -t846 * t875 - t880 * t847;
t906 = pkin(4) * t878 + t984;
t905 = t875 * t853;
t904 = t880 * t853;
t840 = -t875 * t882 + t924;
t903 = -pkin(6) * t840 - g(3) * t875;
t901 = pkin(2) * t874 - qJ(3) * t879;
t900 = t834 + t913;
t484 = -t548 * t877 + t549 * t872;
t562 = -t634 * t878 + t635 * t873;
t563 = t873 * t634 + t878 * t635;
t731 = t800 * t879 + t874 * t911;
t899 = t833 * t879 + t955;
t785 = t846 * t880 - t847 * t875;
t893 = (-qJD(4) - t867) * t821 - t907;
t888 = t933 * t985 + t890;
t886 = qJ(3) * t900 + t888;
t885 = t874 * t894 + t887;
t884 = -t885 + t977;
t849 = t881 - t945;
t839 = t880 * t882 + t926;
t830 = t901 * qJDD(1);
t826 = t935 * t929;
t816 = -pkin(6) * t839 + g(3) * t880;
t807 = -t818 + t986;
t806 = t817 - t986;
t805 = qJDD(2) * t875 + t826 * t880;
t804 = t834 * t879 - t869 * t929;
t803 = -qJDD(2) * t880 + t826 * t875;
t802 = -t835 * t874 - t870 * t929;
t799 = -t818 - t986;
t796 = -t849 * t874 + t827;
t790 = t849 * t879 + t951;
t788 = t900 * t874;
t787 = (t835 - t914) * t879;
t777 = t838 * t880 - t841 * t875;
t774 = pkin(6) * t777;
t770 = t818 - t817;
t765 = t804 * t880 - t905;
t764 = t802 * t880 + t905;
t763 = t804 * t875 + t904;
t762 = t802 * t875 - t904;
t761 = t796 * t880 + t874 * t926;
t760 = t796 * t875 - t874 * t924;
t759 = -t986 - t817;
t756 = t794 * t880 - t836 * t875;
t751 = pkin(6) * t756;
t750 = -t779 + t813;
t749 = -t813 + t987;
t748 = (t819 * t878 - t821 * t873) * t867;
t747 = (-t819 * t873 - t821 * t878) * t867;
t746 = -t959 + t1002;
t745 = -t960 - t979;
t743 = -t817 - t818;
t740 = t884 + t938;
t739 = -t911 + t1003;
t738 = t800 - t983;
t729 = -t779 + t987;
t723 = qJ(3) * t934 - t884;
t722 = -t779 - t813;
t721 = pkin(2) * t934 + t895;
t720 = t886 + t978;
t719 = t806 * t878 + t968;
t718 = -t807 * t873 + t992;
t717 = -t806 * t873 + t967;
t716 = -t807 * t878 - t993;
t715 = -t799 * t873 + t967;
t714 = t799 * t878 + t968;
t713 = t742 - t961;
t708 = (qJD(4) - t867) * t821 + t907;
t707 = -t813 - t987;
t706 = t742 * t878 + t821 * t947;
t705 = -t742 * t873 + t821 * t946;
t704 = -t741 * t873 - t819 * t946;
t703 = -t741 * t878 + t819 * t947;
t702 = (t835 + t836) * pkin(2) + t886;
t701 = t978 + (t833 + t900) * qJ(3) + t888;
t700 = t732 * t880 - t822 * t875;
t699 = t732 * t875 + t822 * t880;
t696 = t759 * t878 - t993;
t695 = t759 * t873 + t992;
t694 = -t725 + t810;
t693 = t724 - t810;
t691 = t779 + t987;
t683 = (-t781 * t877 + t783 * t872) * t815;
t682 = (-t781 * t872 - t783 * t877) * t815;
t681 = -t983 + (-t851 - t881) * qJ(3) + (-t843 - qJDD(2)) * pkin(2) + t885;
t679 = -t1003 - qJ(3) * t844 + (-t848 + t881) * pkin(2) - t895;
t678 = -t747 * t874 + t748 * t879;
t677 = -t725 - t810;
t673 = t736 * t879 - t740 * t874;
t672 = t736 * t874 + t740 * t879;
t670 = -t725 + t724;
t669 = -pkin(2) * t958 + t701 * t879 - t1002;
t668 = qJ(3) * t954 - t702 * t874 - t979;
t667 = -t721 * t874 + t723 * t879;
t662 = (-qJD(5) - t815) * t783 - t908;
t660 = -t717 * t874 + t719 * t879;
t659 = -t716 * t874 + t718 * t879;
t658 = t687 * t877 - t783 * t964;
t657 = t687 * t872 + t783 * t963;
t656 = -t686 * t872 + t781 * t963;
t655 = t686 * t877 + t781 * t964;
t654 = -t810 - t724;
t653 = t714 * t874 + t715 * t879;
t652 = -t714 * t879 + t715 * t874;
t651 = t713 * t873 + t878 * t893;
t650 = -t708 * t878 - t712 * t873;
t649 = -t713 * t878 + t873 * t893;
t648 = t708 * t873 - t712 * t878;
t647 = t683 * t878 + t737 * t873;
t646 = -t683 * t873 + t737 * t878;
t645 = t749 * t877 - t970;
t644 = -t750 * t872 + t998;
t643 = t749 * t872 + t969;
t642 = t750 * t877 + t1000;
t641 = -t705 * t874 + t706 * t879;
t640 = -t703 * t874 + t704 * t879;
t639 = (-t726 * t876 + t728 * t871) * t812;
t638 = (-t726 * t871 - t728 * t876) * t812;
t637 = t695 * t874 + t696 * t879;
t636 = -t695 * t879 + t696 * t874;
t630 = -t722 * t872 - t969;
t629 = t722 * t877 - t970;
t628 = t673 * t880 - t720 * t875;
t627 = t673 * t875 + t720 * t880;
t626 = -t724 - t725;
t625 = t707 * t877 - t1000;
t624 = t707 * t872 + t998;
t623 = t658 * t878 + t920;
t622 = t656 * t878 - t920;
t621 = -t658 * t873 + t919;
t620 = -t656 * t873 - t919;
t619 = -pkin(1) * t672 - pkin(2) * t740 - qJ(3) * t736;
t618 = t653 * t880 - t712 * t875;
t617 = t653 * t875 + t712 * t880;
t612 = -pkin(8) * t714 + qJ(3) * t712 + t940;
t609 = t637 * t880 - t708 * t875;
t608 = t637 * t875 + t708 * t880;
t607 = -pkin(7) * t672 - t720 * t901;
t605 = -qJD(6) * t728 - t910;
t604 = -pkin(8) * t695 + qJ(3) * t708 + t942;
t603 = t693 * t876 - t972;
t602 = -t694 * t871 + t999;
t601 = t693 * t871 + t971;
t600 = t694 * t876 + t1001;
t599 = -t661 * t877 - t665 * t872;
t598 = t662 * t877 - t664 * t872;
t597 = -t661 * t872 + t665 * t877;
t596 = t662 * t872 + t664 * t877;
t595 = -t677 * t871 - t971;
t594 = t677 * t876 - t972;
t593 = t649 * t874 + t651 * t879;
t592 = -t648 * t874 + t650 * t879;
t591 = -t649 * t879 + t651 * t874;
t590 = t645 * t878 - t661 * t873;
t589 = t644 * t878 - t665 * t873;
t588 = -t645 * t873 - t661 * t878;
t587 = -t644 * t873 - t665 * t878;
t586 = -pkin(8) * t715 + t712 * t984 - t942;
t585 = -t646 * t874 + t647 * t879;
t584 = t630 * t878 + t664 * t873;
t583 = t630 * t873 - t664 * t878;
t582 = t654 * t876 - t1001;
t581 = t654 * t871 + t999;
t580 = -pkin(8) * t696 + t708 * t984 + t940;
t579 = t625 * t878 - t662 * t873;
t578 = t625 * t873 + t662 * t878;
t577 = -t697 + t892;
t572 = (qJD(6) + t812) * t728 + t910;
t571 = -t728 * t966 - t876 * t892;
t570 = t728 * t965 - t871 * t892;
t569 = -t605 * t871 + t726 * t965;
t568 = t605 * t876 + t726 * t966;
t567 = t598 * t878 - t729 * t873;
t566 = -t598 * t873 - t729 * t878;
t565 = -t638 * t872 + t639 * t877;
t564 = t638 * t877 + t639 * t872;
t561 = t593 * t880 - t743 * t875;
t560 = t593 * t875 + t743 * t880;
t559 = t599 * t878 - t691 * t873;
t558 = t599 * t873 + t691 * t878;
t557 = t565 * t878 + t873 * t891;
t556 = -t565 * t873 + t878 * t891;
t555 = -t621 * t874 + t623 * t879;
t554 = -t620 * t874 + t622 * t879;
t553 = -pkin(9) * t629 + t941;
t552 = -pkin(9) * t624 + t943;
t550 = -pkin(8) * t562 + qJ(3) * t680;
t546 = -pkin(1) * t652 - qJ(3) * t715 + t714 * t984 - t635;
t545 = -t601 * t872 + t603 * t877;
t544 = -t600 * t872 + t602 * t877;
t543 = t601 * t877 + t603 * t872;
t542 = t600 * t877 + t602 * t872;
t541 = -pkin(8) * t649 + qJ(3) * t743 - t562;
t540 = -pkin(8) * t563 + t680 * t984;
t539 = -t594 * t872 + t595 * t877;
t538 = t594 * t877 + t595 * t872;
t537 = -pkin(1) * t636 - qJ(3) * t696 + t695 * t984 - t634;
t536 = -pkin(8) * t651 + t743 * t984 - t563;
t535 = -t588 * t874 + t590 * t879;
t534 = -t587 * t874 + t589 * t879;
t533 = t583 * t874 + t584 * t879;
t532 = -t583 * t879 + t584 * t874;
t531 = -t581 * t872 + t582 * t877;
t530 = t581 * t877 + t582 * t872;
t529 = -pkin(4) * t629 + t549;
t528 = t578 * t874 + t579 * t879;
t527 = -t578 * t879 + t579 * t874;
t525 = -t573 * t876 - t577 * t871;
t524 = -t572 * t876 - t871 * t990;
t523 = -t573 * t871 + t577 * t876;
t522 = -t572 * t871 + t876 * t990;
t521 = -pkin(4) * t624 + t548;
t519 = -t570 * t872 + t571 * t877;
t518 = -t568 * t872 + t569 * t877;
t517 = t570 * t877 + t571 * t872;
t516 = t568 * t877 + t569 * t872;
t515 = -t566 * t874 + t567 * t879;
t514 = t562 * t874 + t563 * t879;
t513 = -t562 * t879 + t563 * t874;
t512 = -pkin(7) * t652 - t586 * t874 + t612 * t879;
t511 = -pkin(10) * t594 + t973;
t507 = t558 * t874 + t559 * t879;
t506 = -t558 * t879 + t559 * t874;
t505 = -pkin(1) * t591 - qJ(3) * t651 + t649 * t984;
t504 = -pkin(7) * t636 - t580 * t874 + t604 * t879;
t503 = -pkin(10) * t581 + t974;
t502 = -t556 * t874 + t557 * t879;
t501 = t519 * t878 + t922;
t500 = t518 * t878 - t922;
t499 = -t519 * t873 + t921;
t498 = -t518 * t873 - t921;
t497 = t514 * t880 - t680 * t875;
t496 = t514 * t875 + t680 * t880;
t495 = t533 * t880 - t629 * t875;
t494 = t533 * t875 + t629 * t880;
t493 = t528 * t880 - t624 * t875;
t492 = t528 * t875 + t624 * t880;
t491 = t545 * t878 - t573 * t873;
t490 = t544 * t878 - t577 * t873;
t489 = -t545 * t873 - t573 * t878;
t488 = -t544 * t873 - t577 * t878;
t487 = t539 * t878 + t873 * t990;
t486 = t539 * t873 - t878 * t990;
t483 = t531 * t878 + t572 * t873;
t482 = t531 * t873 - t572 * t878;
t481 = t507 * t880 - t597 * t875;
t480 = t507 * t875 + t597 * t880;
t479 = -pkin(5) * t990 + pkin(10) * t595 + t974;
t478 = -pkin(5) * t572 + pkin(10) * t582 - t973;
t477 = t485 * t878 + t615 * t873;
t476 = t485 * t873 - t615 * t878;
t475 = -pkin(9) * t597 - t484;
t474 = -t523 * t872 + t525 * t877;
t473 = -t522 * t872 + t524 * t877;
t472 = t523 * t877 + t525 * t872;
t471 = t522 * t877 + t524 * t872;
t467 = -pkin(7) * t591 - t536 * t874 + t541 * t879;
t466 = t473 * t878 - t670 * t873;
t465 = -t473 * t873 - t670 * t878;
t464 = t474 * t878 + t626 * t873;
t463 = t474 * t873 - t626 * t878;
t462 = -pkin(8) * t583 + qJ(3) * t629 - t529 * t873 + t553 * t878;
t461 = -pkin(8) * t578 + qJ(3) * t624 - t521 * t873 + t552 * t878;
t460 = -t499 * t874 + t501 * t879;
t459 = -t498 * t874 + t500 * t879;
t458 = -pkin(7) * t513 - t540 * t874 + t550 * t879;
t457 = -t489 * t874 + t491 * t879;
t456 = -t488 * t874 + t490 * t879;
t455 = -pkin(8) * t584 - t878 * t529 - t873 * t553 + t629 * t984;
t454 = -pkin(1) * t513 - qJ(3) * t563 + t562 * t984;
t453 = -pkin(8) * t579 - t878 * t521 - t873 * t552 + t624 * t984;
t452 = t486 * t874 + t487 * t879;
t451 = -t486 * t879 + t487 * t874;
t450 = t482 * t874 + t483 * t879;
t449 = -t482 * t879 + t483 * t874;
t448 = -pkin(4) * t472 - pkin(5) * t523;
t447 = -pkin(1) * t532 - pkin(4) * t664 + pkin(9) * t630 - qJ(3) * t584 + t583 * t984 + t943;
t446 = -pkin(8) * t558 + t878 * t475 + t597 * t912;
t445 = -pkin(1) * t527 + pkin(4) * t662 + pkin(9) * t625 - qJ(3) * t579 + t578 * t984 - t941;
t444 = -pkin(4) * t538 - pkin(5) * t594 + t470;
t443 = -pkin(9) * t538 - t479 * t872 + t511 * t877;
t442 = -pkin(4) * t530 - pkin(5) * t581 + t469;
t441 = t452 * t880 - t538 * t875;
t440 = t452 * t875 + t538 * t880;
t439 = t476 * t874 + t477 * t879;
t438 = -t476 * t879 + t477 * t874;
t437 = -pkin(8) * t559 - t873 * t475 + t597 * t906;
t436 = -pkin(9) * t530 - t478 * t872 + t503 * t877;
t435 = t450 * t880 - t530 * t875;
t434 = t450 * t875 + t530 * t880;
t431 = -t465 * t874 + t466 * t879;
t430 = t463 * t874 + t464 * t879;
t429 = -t463 * t879 + t464 * t874;
t428 = -pkin(1) * t506 + pkin(4) * t691 + pkin(9) * t599 - qJ(3) * t559 + t558 * t984 + t485;
t427 = -pkin(5) * t551 + pkin(10) * t433;
t426 = t439 * t880 - t484 * t875;
t425 = t439 * t875 + t484 * t880;
t424 = -pkin(10) * t523 - t432;
t423 = -pkin(5) * t626 + pkin(10) * t525 + t433;
t422 = -pkin(7) * t532 - t455 * t874 + t462 * t879;
t421 = -pkin(7) * t527 - t453 * t874 + t461 * t879;
t420 = -pkin(8) * t476 + (-pkin(9) * t878 + t912) * t484;
t419 = t430 * t880 - t472 * t875;
t418 = t430 * t875 + t472 * t880;
t417 = -pkin(8) * t477 + (pkin(9) * t873 + t906) * t484;
t416 = -pkin(7) * t506 - t437 * t874 + t446 * t879;
t415 = t433 * t877 - t976;
t414 = t433 * t872 + t975;
t413 = t415 * t878 + t551 * t873;
t412 = t415 * t873 - t551 * t878;
t411 = -pkin(8) * t486 + qJ(3) * t538 + t443 * t878 - t444 * t873;
t410 = -pkin(8) * t482 + qJ(3) * t530 + t436 * t878 - t442 * t873;
t409 = -pkin(8) * t487 - t873 * t443 - t878 * t444 + t538 * t984;
t408 = -pkin(8) * t483 - t873 * t436 - t878 * t442 + t530 * t984;
t407 = -pkin(1) * t451 - pkin(4) * t990 + pkin(9) * t539 - qJ(3) * t487 + t877 * t479 + t486 * t984 + t872 * t511;
t406 = -pkin(1) * t438 - pkin(4) * t615 + pkin(9) * t485 - qJ(3) * t477 + t476 * t984;
t405 = -pkin(1) * t449 - pkin(4) * t572 + pkin(9) * t531 - qJ(3) * t483 + t877 * t478 + t482 * t984 + t872 * t503;
t404 = -pkin(4) * t414 - pkin(5) * t432;
t403 = -pkin(9) * t472 - t423 * t872 + t424 * t877;
t402 = -pkin(9) * t414 - pkin(10) * t975 - t427 * t872;
t401 = -pkin(7) * t438 - t417 * t874 + t420 * t879;
t400 = t412 * t874 + t413 * t879;
t399 = -t412 * t879 + t413 * t874;
t398 = -pkin(8) * t463 + qJ(3) * t472 + t403 * t878 - t448 * t873;
t397 = -pkin(7) * t451 - t409 * t874 + t411 * t879;
t396 = -pkin(8) * t464 - t873 * t403 - t878 * t448 + t472 * t984;
t395 = -pkin(7) * t449 - t408 * t874 + t410 * t879;
t394 = -pkin(1) * t429 - pkin(4) * t626 + pkin(9) * t474 - qJ(3) * t464 + t877 * t423 + t872 * t424 + t463 * t984;
t393 = t400 * t880 - t414 * t875;
t392 = t400 * t875 + t414 * t880;
t391 = -pkin(7) * t429 - t396 * t874 + t398 * t879;
t390 = -pkin(8) * t412 + qJ(3) * t414 + t402 * t878 - t404 * t873;
t389 = -pkin(8) * t413 - t873 * t402 - t878 * t404 + t414 * t984;
t388 = -pkin(1) * t399 - pkin(4) * t551 + pkin(9) * t415 - pkin(10) * t976 - qJ(3) * t413 + t412 * t984 + t877 * t427;
t387 = -pkin(7) * t399 - t389 * t874 + t390 * t879;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t839, -t840, 0, t786, 0, 0, 0, 0, 0, 0, t756, -t757, t777, t700, 0, 0, 0, 0, 0, 0, t756, t777, t757, t628, 0, 0, 0, 0, 0, 0, t609, t618, t561, t497, 0, 0, 0, 0, 0, 0, t493, t495, t481, t426, 0, 0, 0, 0, 0, 0, t435, t441, t419, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t840, -t839, 0, t785, 0, 0, 0, 0, 0, 0, t753, -t754, t776, t699, 0, 0, 0, 0, 0, 0, t753, t776, t754, t627, 0, 0, 0, 0, 0, 0, t608, t617, t560, t496, 0, 0, 0, 0, 0, 0, t492, t494, t480, t425, 0, 0, 0, 0, 0, 0, t434, t440, t418, t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t789, -t791, 0, -t731, 0, 0, 0, 0, 0, 0, t789, 0, t791, t672, 0, 0, 0, 0, 0, 0, t636, t652, t591, t513, 0, 0, 0, 0, 0, 0, t527, t532, t506, t438, 0, 0, 0, 0, 0, 0, t449, t451, t429, t399; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t840, 0, -t839, 0, t903, -t816, -t785, -pkin(6) * t785, t765, -t996, t761, t764, -t994, t805, -t738 * t875 + t745 * t880 - t981, -t739 * t875 + t746 * t880 + t1006, t731 * t880 - t980, -pkin(6) * t699 - (pkin(1) * t875 - pkin(7) * t880) * t731, t765, t761, t996, t805, t994, t764, t668 * t880 - t681 * t875 - t981, t667 * t880 - t830 * t875 - t980, t669 * t880 - t679 * t875 - t1006, -pkin(6) * t627 + t607 * t880 - t619 * t875, t641 * t880 - t918, t592 * t880 - t770 * t875, t659 * t880 - t713 * t875, t640 * t880 + t918, t660 * t880 - t875 * t893, t880 * t678 - t875 * t923, -pkin(6) * t608 + t504 * t880 - t537 * t875, -pkin(6) * t617 + t512 * t880 - t546 * t875, -pkin(6) * t560 + t467 * t880 - t505 * t875, -pkin(6) * t496 - t454 * t875 + t458 * t880, t555 * t880 - t657 * t875, t515 * t880 - t596 * t875, t534 * t880 - t642 * t875, t554 * t880 - t655 * t875, t535 * t880 - t643 * t875, t585 * t880 - t682 * t875, -pkin(6) * t492 + t421 * t880 - t445 * t875, -pkin(6) * t494 + t422 * t880 - t447 * t875, -pkin(6) * t480 + t416 * t880 - t428 * t875, -pkin(6) * t425 + t401 * t880 - t406 * t875, t460 * t880 - t517 * t875, t431 * t880 - t471 * t875, t456 * t880 - t542 * t875, t459 * t880 - t516 * t875, t457 * t880 - t543 * t875, t502 * t880 - t564 * t875, -pkin(6) * t434 + t395 * t880 - t405 * t875, -pkin(6) * t440 + t397 * t880 - t407 * t875, -pkin(6) * t418 + t391 * t880 - t394 * t875, -pkin(6) * t392 + t387 * t880 - t388 * t875; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t839, 0, t840, 0, t816, t903, t786, pkin(6) * t786, t763, -t997, t760, t762, -t995, t803, t738 * t880 + t745 * t875 + t751, t739 * t880 + t746 * t875 - t1005, t731 * t875 + t774, pkin(6) * t700 - (-pkin(1) * t880 - pkin(7) * t875) * t731, t763, t760, t997, t803, t995, t762, t668 * t875 + t681 * t880 + t751, t667 * t875 + t830 * t880 + t774, t669 * t875 + t679 * t880 + t1005, pkin(6) * t628 + t607 * t875 + t619 * t880, t641 * t875 + t917, t592 * t875 + t770 * t880, t659 * t875 + t713 * t880, t640 * t875 - t917, t660 * t875 + t880 * t893, t875 * t678 + t880 * t923, pkin(6) * t609 + t504 * t875 + t537 * t880, pkin(6) * t618 + t512 * t875 + t546 * t880, pkin(6) * t561 + t467 * t875 + t505 * t880, pkin(6) * t497 + t454 * t880 + t458 * t875, t555 * t875 + t657 * t880, t515 * t875 + t596 * t880, t534 * t875 + t642 * t880, t554 * t875 + t655 * t880, t535 * t875 + t643 * t880, t585 * t875 + t682 * t880, pkin(6) * t493 + t421 * t875 + t445 * t880, pkin(6) * t495 + t422 * t875 + t447 * t880, pkin(6) * t481 + t416 * t875 + t428 * t880, pkin(6) * t426 + t401 * t875 + t406 * t880, t460 * t875 + t517 * t880, t431 * t875 + t471 * t880, t456 * t875 + t542 * t880, t459 * t875 + t516 * t880, t457 * t875 + t543 * t880, t502 * t875 + t564 * t880, pkin(6) * t435 + t395 * t875 + t405 * t880, pkin(6) * t441 + t397 * t875 + t407 * t880, pkin(6) * t419 + t391 * t875 + t394 * t880, pkin(6) * t393 + t387 * t875 + t388 * t880; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t846, t847, 0, 0, t788, t899, t790, t787, t988, 0, t937 + t959, -pkin(1) * t833 - t1004 - t960, t732 + t936, pkin(1) * t822 + pkin(7) * t732, t788, t790, -t899, 0, -t988, t787, qJ(3) * t955 + t702 * t879 + t937, t721 * t879 + t723 * t874 + t936, t1004 + t874 * t701 + (pkin(1) + t982) * t833, pkin(7) * t673 + (pkin(1) - t902) * t720, t705 * t879 + t706 * t874, t648 * t879 + t650 * t874, t716 * t879 + t718 * t874, t703 * t879 + t704 * t874, t717 * t879 + t719 * t874, t747 * t879 + t748 * t874, pkin(1) * t708 + pkin(7) * t637 + t580 * t879 + t604 * t874, pkin(1) * t712 + pkin(7) * t653 + t586 * t879 + t612 * t874, pkin(1) * t743 + pkin(7) * t593 + t536 * t879 + t541 * t874, pkin(1) * t680 + pkin(7) * t514 + t540 * t879 + t550 * t874, t621 * t879 + t623 * t874, t566 * t879 + t567 * t874, t587 * t879 + t589 * t874, t620 * t879 + t622 * t874, t588 * t879 + t590 * t874, t646 * t879 + t647 * t874, pkin(1) * t624 + pkin(7) * t528 + t453 * t879 + t461 * t874, pkin(1) * t629 + pkin(7) * t533 + t455 * t879 + t462 * t874, pkin(1) * t597 + pkin(7) * t507 + t437 * t879 + t446 * t874, pkin(1) * t484 + pkin(7) * t439 + t417 * t879 + t420 * t874, t499 * t879 + t501 * t874, t465 * t879 + t466 * t874, t488 * t879 + t490 * t874, t498 * t879 + t500 * t874, t489 * t879 + t491 * t874, t556 * t879 + t557 * t874, pkin(1) * t530 + pkin(7) * t450 + t408 * t879 + t410 * t874, pkin(1) * t538 + pkin(7) * t452 + t409 * t879 + t411 * t874, pkin(1) * t472 + pkin(7) * t430 + t396 * t879 + t398 * t874, pkin(1) * t414 + pkin(7) * t400 + t389 * t879 + t390 * t874;];
tauB_reg  = t1;
