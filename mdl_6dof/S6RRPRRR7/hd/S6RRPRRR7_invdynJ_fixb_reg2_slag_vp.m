% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR7_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:00:01
% EndTime: 2019-03-09 14:00:18
% DurationCPUTime: 10.90s
% Computational Cost: add. (16831->762), mult. (34983->928), div. (0->0), fcn. (23970->12), ass. (0->355)
t286 = sin(qJ(5));
t291 = cos(qJ(5));
t293 = cos(qJ(2));
t412 = qJD(1) * t293;
t288 = sin(qJ(2));
t413 = qJD(1) * t288;
t186 = -qJD(1) * pkin(1) - pkin(2) * t412 - qJ(3) * t413;
t153 = pkin(3) * t412 - t186;
t292 = cos(qJ(4));
t430 = t292 * t293;
t287 = sin(qJ(4));
t437 = t287 * t288;
t193 = t430 + t437;
t181 = t193 * qJD(1);
t184 = -t287 * t412 + t292 * t413;
t83 = pkin(4) * t181 - pkin(9) * t184 + t153;
t487 = pkin(2) + pkin(3);
t389 = t487 * qJD(2);
t256 = pkin(7) * t413;
t200 = pkin(8) * t413 - t256;
t528 = qJD(3) - t200;
t162 = -t389 + t528;
t279 = qJD(2) * qJ(3);
t257 = pkin(7) * t412;
t360 = -pkin(8) * t412 + t257;
t185 = t279 + t360;
t109 = t162 * t287 + t185 * t292;
t276 = qJD(2) - qJD(4);
t96 = -pkin(9) * t276 + t109;
t48 = t286 * t83 + t291 * t96;
t511 = qJD(5) + t181;
t529 = t48 * t511;
t142 = t184 * t286 + t276 * t291;
t497 = t511 * t142;
t144 = t184 * t291 - t276 * t286;
t496 = t511 * t144;
t260 = t288 * qJDD(1);
t399 = qJD(1) * qJD(4);
t383 = t293 * t399;
t398 = t293 * qJDD(1);
t323 = -t287 * t398 - t399 * t437 + (t260 - t383) * t292;
t261 = t288 * qJD(3);
t283 = qJDD(1) * pkin(1);
t400 = qJD(1) * qJD(2);
t384 = t293 * t400;
t513 = -t384 - t260;
t347 = pkin(2) * t398 - qJ(3) * t513 + qJD(1) * t261 + t283;
t332 = pkin(3) * t398 + t347;
t407 = qJD(4) * t292;
t409 = qJD(2) * t293;
t320 = t287 * t409 + t288 * t407;
t385 = t288 * t400;
t89 = qJD(1) * t320 + qJDD(1) * t193 - t287 * t383 - t292 * t385;
t30 = -t323 * pkin(9) + t89 * pkin(4) + (-pkin(9) * t430 + (-pkin(9) * t287 - t487) * t288) * t400 + t332;
t275 = qJDD(2) - qJDD(4);
t251 = pkin(7) * t260;
t382 = pkin(7) * t384 + qJDD(3) + t251;
t124 = pkin(8) * t513 - t487 * qJDD(2) + t382;
t252 = pkin(7) * t398;
t277 = qJDD(2) * qJ(3);
t278 = qJD(2) * qJD(3);
t154 = -pkin(7) * t385 + t252 + t277 + t278;
t125 = (t385 - t398) * pkin(8) + t154;
t408 = qJD(4) * t287;
t43 = t287 * t124 + t292 * t125 + t162 * t407 - t185 * t408;
t40 = -pkin(9) * t275 + t43;
t404 = qJD(5) * t291;
t405 = qJD(5) * t286;
t330 = -t286 * t30 - t291 * t40 - t83 * t404 + t405 * t96;
t47 = -t286 * t96 + t291 * t83;
t491 = -t47 * t511 - t330;
t285 = sin(qJ(6));
t36 = -pkin(10) * t144 + t47;
t29 = pkin(5) * t511 + t36;
t290 = cos(qJ(6));
t37 = -pkin(10) * t142 + t48;
t467 = t290 * t37;
t12 = t285 * t29 + t467;
t439 = t285 * t291;
t195 = t286 * t290 + t439;
t326 = t193 * qJD(2);
t302 = qJD(1) * t326 + t323;
t393 = t184 * t404 - t276 * t405 + t286 * t302;
t335 = t291 * t275 + t393;
t367 = -t292 * t124 + t287 * t125 + t162 * t408 + t185 * t407;
t479 = t275 * pkin(4);
t41 = t367 + t479;
t24 = pkin(5) * t335 + t41;
t282 = qJ(5) + qJ(6);
t262 = sin(t282);
t289 = sin(qJ(1));
t492 = t293 * t287 - t288 * t292;
t172 = t492 * t289;
t294 = cos(qJ(1));
t427 = t293 * t294;
t434 = t288 * t294;
t175 = t287 * t427 - t292 * t434;
t325 = g(1) * t175 + g(2) * t172 + g(3) * t193;
t440 = t285 * t286;
t192 = -t290 * t291 + t440;
t397 = qJD(5) + qJD(6);
t402 = qJD(6) * t290;
t423 = t192 * t181 - t290 * t404 - t291 * t402 + t397 * t440;
t108 = t162 * t292 - t287 * t185;
t95 = pkin(4) * t276 - t108;
t65 = pkin(5) * t142 + t95;
t527 = t12 * t184 + t195 * t24 - t262 * t325 - t423 * t65;
t343 = t142 * t285 - t290 * t144;
t55 = t184 * t405 + t286 * t275 + t276 * t404 - t291 * t302;
t313 = qJD(6) * t343 + t285 * t55 - t290 * t335;
t134 = t397 * t195;
t426 = t195 * t181 + t134;
t71 = t290 * t142 + t144 * t285;
t526 = -t313 * t192 + t426 * t71;
t469 = t285 * t37;
t11 = t29 * t290 - t469;
t263 = cos(t282);
t525 = -t11 * t184 + t192 * t24 + t263 * t325 + t426 * t65;
t169 = qJD(6) + t511;
t87 = qJDD(5) + t89;
t86 = qJDD(6) + t87;
t524 = t169 * t423 - t184 * t343 - t195 * t86;
t523 = t169 * t426 - t184 * t71 + t192 * t86;
t403 = qJD(6) * t285;
t16 = t142 * t402 + t144 * t403 + t285 * t335 + t290 * t55;
t522 = -t16 * t195 + t343 * t423;
t521 = t286 * (t496 + t335) + t291 * (t55 + t497);
t28 = t291 * t30;
t9 = -qJD(5) * t48 - t286 * t40 + t28;
t6 = pkin(5) * t87 + pkin(10) * t55 + t9;
t7 = -pkin(10) * t335 - t330;
t1 = t290 * (qJD(6) * t29 + t7) + t285 * t6 - t37 * t403;
t2 = -qJD(6) * t12 - t285 * t7 + t290 * t6;
t176 = t193 * t294;
t173 = t193 * t289;
t480 = g(3) * t492;
t355 = g(2) * t173 - t480;
t324 = g(1) * t176 + t355;
t520 = -t1 * t192 + t11 * t423 - t12 * t426 - t195 * t2 - t324;
t519 = t16 * t192 + t195 * t313 + t343 * t426 + t423 * t71;
t478 = t71 * t343;
t204 = -t287 * qJ(3) - t292 * t487;
t165 = qJD(3) * t292 + qJD(4) * t204;
t205 = t292 * qJ(3) - t287 * t487;
t199 = -pkin(9) + t205;
t477 = pkin(10) - t199;
t377 = qJD(5) * t477;
t446 = t181 * t286;
t395 = pkin(10) * t446;
t131 = t292 * t200 + t287 * t360;
t122 = pkin(4) * t184 + pkin(9) * t181;
t246 = qJ(3) * t412;
t170 = -t413 * t487 + t246;
t88 = -t122 + t170;
t57 = t291 * t131 + t286 * t88;
t518 = t165 * t291 + t286 * t377 + t395 - t57;
t334 = pkin(10) * t181 * t291 + pkin(5) * t184;
t56 = -t131 * t286 + t291 * t88;
t517 = -t165 * t286 + t291 * t377 + t334 - t56;
t485 = pkin(10) + pkin(9);
t390 = qJD(5) * t485;
t62 = t291 * t108 + t286 * t122;
t516 = t286 * t390 + t395 + t62;
t61 = -t108 * t286 + t291 * t122;
t515 = -t291 * t390 - t334 - t61;
t510 = t343 ^ 2 - t71 ^ 2;
t509 = t169 * t71 - t16;
t127 = -t173 * t263 - t262 * t294;
t129 = t176 * t263 - t289 * t262;
t508 = g(1) * t129 - g(2) * t127 - t263 * t480 + t65 * t71 - t1;
t128 = -t176 * t262 - t263 * t289;
t341 = t173 * t262 - t263 * t294;
t507 = -g(1) * t128 + g(2) * t341 - t262 * t480 + t65 * t343 + t2;
t506 = -t169 * t343 + t313;
t322 = t335 * t291;
t505 = t286 * t497 - t322;
t466 = t291 * t87;
t498 = t511 ^ 2;
t504 = -t142 * t184 + t286 * t498 - t466;
t468 = t286 * t87;
t503 = -t144 * t184 + t291 * t498 + t468;
t464 = t55 * t286;
t502 = t291 * t496 - t464;
t418 = t293 * pkin(2) + t288 * qJ(3);
t501 = -pkin(1) - t418;
t500 = t511 * t95;
t499 = t184 * t276 + t89;
t174 = t192 * t287;
t171 = t195 * t287;
t421 = qJD(4) * t205 + t528 * t287 + t292 * t360;
t486 = pkin(7) - pkin(8);
t213 = t486 * t288;
t215 = t486 * t293;
t495 = t292 * t213 - t215 * t287;
t494 = g(1) * t294 + g(2) * t289;
t493 = (t405 + t446) * pkin(5);
t460 = pkin(7) * qJDD(2);
t488 = (qJD(1) * t501 + t186) * qJD(2) - t460;
t484 = pkin(5) * t291;
t140 = -t176 * t286 - t289 * t291;
t483 = g(1) * t140;
t482 = g(1) * t289;
t481 = g(2) * t294;
t268 = t293 * pkin(3);
t156 = t477 * t286;
t157 = t477 * t291;
t92 = t156 * t290 + t157 * t285;
t476 = qJD(6) * t92 + t285 * t517 + t290 * t518;
t93 = t156 * t285 - t157 * t290;
t475 = -qJD(6) * t93 - t285 * t518 + t290 * t517;
t212 = t485 * t286;
t214 = t485 * t291;
t145 = -t212 * t290 - t214 * t285;
t474 = qJD(6) * t145 + t285 * t515 - t290 * t516;
t147 = -t212 * t285 + t214 * t290;
t473 = -qJD(6) * t147 + t285 * t516 + t290 * t515;
t470 = t184 * t48;
t465 = t47 * t184;
t410 = qJD(2) * t292;
t180 = -t286 * t410 + t291 * t413;
t183 = t286 * t413 + t291 * t410;
t463 = -t174 * t397 + t180 * t290 - t183 * t285 + t195 * t407;
t462 = t171 * t397 + t180 * t285 + t183 * t290 + t192 * t407;
t392 = t268 + t418;
t319 = pkin(4) * t193 + pkin(9) * t492 + t392;
t106 = pkin(1) + t319;
t148 = t213 * t287 + t215 * t292;
t139 = t291 * t148;
t64 = t286 * t106 + t139;
t461 = -t493 + t421;
t459 = qJDD(2) * pkin(2);
t458 = t108 * t276;
t457 = t109 * t276;
t136 = -qJD(4) * t193 + t326;
t456 = t136 * t286;
t455 = t136 * t291;
t454 = t142 * t286;
t453 = t142 * t291;
t452 = t144 * t142;
t451 = t144 * t286;
t450 = t144 * t291;
t449 = t169 * t184;
t448 = t511 * t184;
t447 = t181 * t276;
t445 = t184 * t181;
t443 = t492 * t286;
t442 = t492 * t291;
t438 = t286 * t294;
t436 = t288 * t289;
t298 = qJD(1) ^ 2;
t433 = t288 * t298;
t432 = t289 * t293;
t422 = t165 - t131;
t419 = qJ(3) * t409 + t261;
t417 = t294 * pkin(1) + t289 * pkin(7);
t280 = t288 ^ 2;
t281 = t293 ^ 2;
t415 = -t280 + t281;
t414 = t280 + t281;
t411 = qJD(2) * t288;
t406 = qJD(5) * t511;
t391 = -g(1) * t434 - g(2) * t436 + g(3) * t293;
t388 = t492 * t405;
t387 = t181 ^ 2 - t184 ^ 2;
t270 = t294 * pkin(7);
t381 = -pkin(8) * t294 + t270;
t135 = -t288 * t410 - t293 * t408 + t320;
t363 = t288 * t389;
t152 = -t363 + t419;
t60 = pkin(4) * t135 - pkin(9) * t136 + t152;
t201 = t486 * t411;
t364 = qJD(2) * t215;
t78 = qJD(4) * t495 - t292 * t201 + t287 * t364;
t378 = -t286 * t78 + t291 * t60;
t63 = t291 * t106 - t148 * t286;
t376 = -qJD(2) * pkin(2) + qJD(3);
t368 = t287 * t276;
t366 = pkin(2) * t427 + qJ(3) * t434 + t417;
t365 = -t251 - t391;
t362 = t288 * t384;
t361 = -t109 + t493;
t198 = pkin(4) - t204;
t359 = t414 * qJDD(1) * pkin(7);
t297 = qJD(2) ^ 2;
t358 = pkin(7) * t297 + t481;
t357 = g(1) * t172 - g(2) * t175;
t49 = pkin(5) * t193 + pkin(10) * t442 + t63;
t54 = pkin(10) * t443 + t64;
t25 = -t285 * t54 + t290 * t49;
t26 = t285 * t49 + t290 * t54;
t349 = -t286 * t48 - t291 * t47;
t348 = t286 * t47 - t291 * t48;
t346 = pkin(3) * t427 + t366;
t250 = pkin(4) + t484;
t342 = -t172 * t250 + t173 * t485;
t340 = t173 * t291 + t438;
t339 = t173 * t286 - t291 * t294;
t338 = -t175 * t250 + t176 * t485;
t337 = -t193 * t250 - t485 * t492;
t206 = t256 + t376;
t211 = t257 + t279;
t336 = t206 * t293 - t211 * t288;
t168 = t382 - t459;
t331 = -0.2e1 * pkin(1) * t400 - t460;
t329 = -pkin(9) * t87 + t500;
t328 = -t404 * t492 + t456;
t327 = t388 + t455;
t22 = t106 * t404 - t148 * t405 + t286 * t60 + t291 * t78;
t321 = -t358 + 0.2e1 * t283;
t318 = t325 - t41;
t317 = qJD(5) * t144 - t335;
t316 = g(1) * (t501 - t268);
t315 = -t165 * t511 - t199 * t87 - t500;
t314 = t494 * t487 * t288;
t79 = qJD(4) * t148 - t201 * t287 - t292 * t364;
t120 = pkin(2) * t385 - t347;
t177 = pkin(2) * t411 - t419;
t312 = -qJD(1) * t177 - qJDD(1) * t501 - t120 - t358;
t311 = pkin(9) * t406 - t318;
t310 = t199 * t406 + t318;
t308 = qJD(5) * t349 - t9 * t286 - t291 * t330;
t307 = qJD(2) * t336 + t154 * t293 + t168 * t288;
t306 = (g(2) * pkin(8) - t316) * t289;
t305 = t153 * t184 - t325 + t367;
t303 = -qJD(2) * t181 - t323;
t300 = -t153 * t181 - t324 + t43;
t241 = g(1) * t432;
t235 = qJ(3) * t427;
t233 = qJ(3) * t432;
t228 = t293 * t433;
t210 = t415 * t298;
t209 = qJDD(2) * t293 - t288 * t297;
t208 = qJDD(2) * t288 + t293 * t297;
t197 = pkin(2) * t413 - t246;
t191 = qJDD(1) * t281 - 0.2e1 * t362;
t190 = qJDD(1) * t280 + 0.2e1 * t362;
t189 = pkin(1) + t392;
t179 = t198 + t484;
t155 = t288 * t398 + t400 * t415;
t141 = t176 * t291 - t286 * t289;
t115 = t192 * t492;
t114 = t195 * t492;
t107 = -pkin(5) * t443 - t495;
t91 = -qJD(1) * t363 + t332;
t45 = pkin(5) * t328 + t79;
t32 = t136 * t439 + t285 * t388 + t403 * t443 + (-t397 * t442 + t456) * t290;
t31 = -t134 * t492 + t136 * t192;
t23 = -qJD(5) * t64 + t378;
t15 = t290 * t36 - t469;
t14 = -t285 * t36 - t467;
t13 = -pkin(10) * t328 + t22;
t10 = -pkin(10) * t455 + pkin(5) * t135 + (-t139 + (-pkin(10) * t492 - t106) * t286) * qJD(5) + t378;
t4 = -qJD(6) * t26 + t10 * t290 - t13 * t285;
t3 = qJD(6) * t25 + t10 * t285 + t13 * t290;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t481 + t482, t494, 0, 0, t190, 0.2e1 * t155, t208, t191, t209, 0, t288 * t331 + t293 * t321 + t241, t331 * t293 + (-t321 - t482) * t288, 0.2e1 * t359 - t494, -g(1) * (-pkin(1) * t289 + t270) - g(2) * t417 + (pkin(7) ^ 2 * t414 + pkin(1) ^ 2) * qJDD(1), t190, t208, -0.2e1 * t155, 0, -t209, t191, t288 * t488 + t312 * t293 + t241, t359 + t307 - t494, -t488 * t293 + (t312 + t482) * t288, pkin(7) * t307 - g(1) * t270 - g(2) * t366 + t186 * t177 + (t120 - t482) * t501, t184 * t136 - t302 * t492, -t184 * t135 - t136 * t181 - t193 * t302 + t492 * t89, -t136 * t276 + t275 * t492, t135 * t181 + t193 * t89, t135 * t276 + t193 * t275, 0, g(1) * t173 - g(2) * t176 + t135 * t153 + t152 * t181 + t189 * t89 + t193 * t91 - t275 * t495 + t276 * t79, t153 * t136 + t148 * t275 + t152 * t184 + t189 * t302 + t78 * t276 - t492 * t91 - t357, -t108 * t136 - t109 * t135 - t148 * t89 - t78 * t181 + t79 * t184 - t43 * t193 + t303 * t495 - t367 * t492 + t494, -g(1) * t381 - g(2) * t346 - t108 * t79 + t109 * t78 + t43 * t148 + t153 * t152 + t91 * t189 - t367 * t495 + t306, t144 * t327 + t442 * t55 (-t451 - t453) * t136 - (-t322 + t464 + (-t450 + t454) * qJD(5)) * t492, t135 * t144 - t193 * t55 + t327 * t511 - t442 * t87, t142 * t328 - t335 * t443, -t142 * t135 - t193 * t335 - t328 * t511 + t443 * t87, t135 * t511 + t193 * t87, t23 * t511 + t63 * t87 + t9 * t193 + t47 * t135 + t79 * t142 - t495 * t335 + t95 * t456 + g(1) * t340 - g(2) * t141 - (t286 * t41 + t404 * t95) * t492, -t22 * t511 - t64 * t87 + t330 * t193 - t48 * t135 + t79 * t144 + t495 * t55 + t95 * t455 - g(1) * t339 - g(2) * t140 - (t41 * t291 - t405 * t95) * t492, -t22 * t142 - t64 * t335 - t23 * t144 + t63 * t55 + t349 * t136 - (qJD(5) * t348 + t286 * t330 - t9 * t291) * t492 + t357, -t330 * t64 + t48 * t22 + t9 * t63 + t47 * t23 - t41 * t495 + t95 * t79 - g(1) * (-pkin(4) * t173 - pkin(9) * t172 + t381) - g(2) * (pkin(4) * t176 + pkin(9) * t175 + t346) + t306, -t115 * t16 + t31 * t343, -t114 * t16 + t115 * t313 + t31 * t71 + t32 * t343, t115 * t86 - t135 * t343 - t16 * t193 - t169 * t31, t114 * t313 + t32 * t71, t114 * t86 - t135 * t71 - t169 * t32 + t193 * t313, t135 * t169 + t193 * t86, -g(1) * t127 - g(2) * t129 - t107 * t313 + t11 * t135 - t24 * t114 + t4 * t169 + t2 * t193 + t25 * t86 + t65 * t32 + t45 * t71, -g(1) * t341 - g(2) * t128 - t1 * t193 - t107 * t16 + t24 * t115 - t12 * t135 - t3 * t169 - t26 * t86 - t65 * t31 - t343 * t45, t1 * t114 + t11 * t31 - t115 * t2 - t12 * t32 + t16 * t25 + t26 * t313 - t3 * t71 + t343 * t4 + t357, t1 * t26 + t12 * t3 + t2 * t25 + t11 * t4 + t24 * t107 + t65 * t45 - g(1) * (-pkin(5) * t438 - t172 * t485 - t173 * t250 + t381) - g(2) * (t175 * t485 + t176 * t250 + t346) + (-t316 - g(2) * (-pkin(5) * t286 - pkin(8))) * t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t228, -t210, t260, t228, t398, qJDD(2), pkin(1) * t433 + t365, g(3) * t288 - t252 + (pkin(1) * t298 + t494) * t293, 0, 0, -t228, t260, t210, qJDD(2), -t398, t228, 0.2e1 * t459 - qJDD(3) + (-t186 * t288 + t197 * t293) * qJD(1) + t365 (-pkin(2) * t288 + qJ(3) * t293) * qJDD(1) + ((t211 - t279) * t288 + (-t206 + t376) * t293) * qJD(1), t252 + 0.2e1 * t277 + 0.2e1 * t278 + (qJD(1) * t197 - g(3)) * t288 + (qJD(1) * t186 - t494) * t293, t154 * qJ(3) + t211 * qJD(3) - t168 * pkin(2) - t186 * t197 - g(1) * (-pkin(2) * t434 + t235) - g(2) * (-pkin(2) * t436 + t233) - g(3) * t418 - t336 * qJD(1) * pkin(7), -t445, t387, t303 + t447, t445, t499, t275, -t170 * t181 - t204 * t275 + t276 * t421 + t305, -t170 * t184 + t205 * t275 + t276 * t422 + t300, -t205 * t89 + t204 * t303 + (-t109 + t421) * t184 + (t108 - t422) * t181, -g(1) * t235 - g(2) * t233 - g(3) * t392 - t108 * t421 + t109 * t422 - t153 * t170 - t204 * t367 + t43 * t205 + t314, -t502, t521, -t503, -t505, t504, t448, t198 * t393 - t56 * t511 + t465 + t421 * t142 + t315 * t286 + (t198 * t275 - t310) * t291, t144 * t421 - t198 * t55 + t286 * t310 + t291 * t315 + t511 * t57 - t470, t57 * t142 + t56 * t144 + (-t165 * t142 + t199 * t317 - t491) * t291 + (t165 * t144 + t48 * t181 - t199 * t55 + t9 + (t142 * t199 + t48) * qJD(5)) * t286 + t324, t41 * t198 - t48 * t57 - t47 * t56 - g(1) * (pkin(4) * t175 - pkin(9) * t176 + t235) - g(2) * (pkin(4) * t172 - pkin(9) * t173 + t233) - g(3) * t319 + t421 * t95 + t314 - t348 * t165 + t308 * t199, -t522, -t519, t524, -t526, t523, t449, t169 * t475 - t179 * t313 + t461 * t71 + t86 * t92 - t525, -t16 * t179 - t169 * t476 - t343 * t461 - t86 * t93 - t527, t16 * t92 + t313 * t93 + t343 * t475 - t476 * t71 - t520, t1 * t93 + t2 * t92 + t24 * t179 - g(1) * (t235 - t338) - g(2) * (t233 - t342) - g(3) * (-t337 + t392) + t461 * t65 + t314 + t476 * t12 + t475 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) - t228, t260, -t280 * t298 - t297, -qJD(2) * t211 + t186 * t413 + t168 + t391, 0, 0, 0, 0, 0, 0, -t181 * t413 - t275 * t292 - t276 * t368, -t276 ^ 2 * t292 - t184 * t413 + t275 * t287, -t499 * t287 + (-qJD(4) * t181 - t323) * t292, -t153 * t413 + (-t367 - t457) * t292 + (t43 + t458) * t287 + t391, 0, 0, 0, 0, 0, 0, -t292 * t335 + (-t286 * t407 - t180) * t511 + (-t142 * t276 - t404 * t511 - t468) * t287, t292 * t55 + (-t291 * t407 + t183) * t511 + (-t144 * t276 + t405 * t511 - t466) * t287, t183 * t142 + t180 * t144 + (t451 - t453) * t407 + (-t322 - t464 + (t450 + t454) * qJD(5)) * t287, -t180 * t47 - t183 * t48 + (-qJD(4) * t348 - t41) * t292 + (-t276 * t95 + t308) * t287 + t391, 0, 0, 0, 0, 0, 0, -t169 * t463 - t171 * t86 + t292 * t313 - t368 * t71, t16 * t292 + t169 * t462 + t174 * t86 + t343 * t368, -t16 * t171 - t174 * t313 - t343 * t463 + t462 * t71, -t1 * t174 - t11 * t463 - t12 * t462 - t171 * t2 - t24 * t292 - t368 * t65 + t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, -t387, t302 - t447, -t445, -t499, -t275, -t305 - t457, -t300 - t458, 0, 0, t502, -t521, t503, t505, -t504, -t448, -pkin(4) * t393 - t61 * t511 - t465 - t109 * t142 + t329 * t286 + (-t311 - t479) * t291, pkin(4) * t55 - t109 * t144 + t286 * t311 + t291 * t329 + t511 * t62 + t470, t62 * t142 + t61 * t144 + (pkin(9) * t317 + t491) * t291 + (-t9 - t529 + (qJD(5) * t142 - t55) * pkin(9)) * t286 - t324, -t95 * t109 - t47 * t61 - t48 * t62 + t318 * pkin(4) + (t308 - t324) * pkin(9), t522, t519, -t524, t526, -t523, -t449, t145 * t86 + t169 * t473 + t250 * t313 + t361 * t71 + t525, -t147 * t86 + t16 * t250 - t169 * t474 - t343 * t361 + t527, t145 * t16 + t147 * t313 + t343 * t473 - t474 * t71 + t520, -g(1) * t338 - g(2) * t342 - g(3) * t337 + t1 * t147 + t11 * t473 + t12 * t474 + t2 * t145 - t24 * t250 + t361 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t452, -t142 ^ 2 + t144 ^ 2, -t55 + t497, -t452, -t335 + t496, t87, -t483 - t95 * t144 + t529 + t28 + (-qJD(5) * t96 - t481) * t291 + (-qJD(5) * t83 + t355 - t40) * t286, g(1) * t141 + g(2) * t340 - g(3) * t442 + t95 * t142 - t491, 0, 0, -t478, t510, t509, t478, t506, t86, -t14 * t169 + (-t144 * t71 - t169 * t403 + t290 * t86) * pkin(5) + t507, t15 * t169 + (t144 * t343 - t169 * t402 - t285 * t86) * pkin(5) + t508, -t11 * t71 - t12 * t343 - t14 * t343 + t15 * t71 + (t16 * t290 + t313 * t285 + (-t285 * t343 - t290 * t71) * qJD(6)) * pkin(5), -t11 * t14 - t12 * t15 + (t1 * t285 + t2 * t290 - t65 * t144 - t483 + g(2) * t339 - g(3) * t443 + (-t11 * t285 + t12 * t290) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t478, t510, t509, t478, t506, t86, t12 * t169 + t507, t11 * t169 + t508, 0, 0;];
tau_reg  = t5;
