% Calculate minimal parameter regressor of coriolis matrix for
% S6PPRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d6,theta1,theta2,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x23]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PPRRPR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRPR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:47:31
% EndTime: 2019-03-08 18:47:44
% DurationCPUTime: 7.00s
% Computational Cost: add. (5209->459), mult. (15230->746), div. (0->0), fcn. (18223->14), ass. (0->349)
t309 = sin(pkin(13));
t311 = sin(pkin(7));
t312 = cos(pkin(13));
t315 = sin(qJ(3));
t317 = cos(qJ(4));
t500 = cos(qJ(3));
t420 = t317 * t500;
t245 = (-t309 * t420 + t312 * t315) * t311;
t246 = (t309 * t315 + t312 * t420) * t311;
t506 = -t309 / 0.2e1;
t531 = t312 / 0.2e1;
t523 = t245 * t506 + t246 * t531;
t532 = qJ(5) * t523;
t316 = cos(qJ(6));
t453 = t316 * t312;
t313 = sin(qJ(6));
t462 = t313 * t309;
t525 = t453 - t462;
t530 = t525 * t317;
t294 = t309 ^ 2 + t312 ^ 2;
t529 = t294 * qJ(5);
t490 = sin(pkin(6));
t394 = cos(pkin(12)) * t490;
t491 = cos(pkin(7));
t492 = cos(pkin(6));
t528 = t492 * t311 + t491 * t394;
t359 = t453 / 0.2e1 - t462 / 0.2e1;
t510 = t525 / 0.2e1;
t527 = t359 + t510;
t454 = t316 * t309;
t461 = t313 * t312;
t360 = t461 / 0.2e1 + t454 / 0.2e1;
t273 = t454 + t461;
t508 = t273 / 0.2e1;
t526 = t360 + t508;
t524 = t294 * qJD(4);
t409 = sin(pkin(12)) * t490;
t204 = t315 * t409 - t500 * t528;
t486 = t204 * t312;
t314 = sin(qJ(4));
t321 = -t311 * t394 + t491 * t492;
t320 = t321 * t314;
t205 = t315 * t528 + t500 * t409;
t484 = t205 * t317;
t152 = t320 + t484;
t489 = t152 * t309;
t81 = t486 - t489;
t522 = -t81 / 0.2e1;
t487 = t204 * t309;
t488 = t152 * t312;
t82 = t487 + t488;
t521 = t82 / 0.2e1;
t151 = t205 * t314 - t317 * t321;
t520 = -t151 / 0.2e1;
t519 = t151 / 0.2e1;
t518 = t152 / 0.2e1;
t421 = t311 * t500;
t400 = t312 * t421;
t408 = t314 * t491;
t472 = t311 * t315;
t423 = t317 * t472;
t265 = t408 + t423;
t475 = t309 * t265;
t211 = -t400 - t475;
t517 = t211 / 0.2e1;
t402 = t309 * t421;
t471 = t312 * t265;
t212 = -t402 + t471;
t516 = t212 / 0.2e1;
t515 = t245 / 0.2e1;
t260 = t525 * t314;
t514 = -t260 / 0.2e1;
t264 = t314 * t472 - t317 * t491;
t513 = -t264 / 0.2e1;
t512 = t264 / 0.2e1;
t511 = t265 / 0.2e1;
t509 = -t273 / 0.2e1;
t303 = -pkin(5) * t312 - pkin(4);
t507 = t303 / 0.2e1;
t505 = -t312 / 0.2e1;
t504 = -t314 / 0.2e1;
t503 = t314 / 0.2e1;
t502 = -t317 / 0.2e1;
t501 = t317 / 0.2e1;
t308 = t314 ^ 2;
t499 = pkin(9) * t308;
t498 = t152 * pkin(9);
t497 = t314 * pkin(4);
t496 = t317 * pkin(9);
t495 = pkin(10) + qJ(5);
t494 = t81 * t309;
t493 = t82 * t312;
t485 = t204 * t314;
t483 = t211 * t309;
t482 = t212 * t312;
t393 = -pkin(4) * t317 - t314 * qJ(5);
t284 = -pkin(3) + t393;
t268 = t312 * t284;
t473 = t309 * t317;
t247 = -pkin(9) * t473 + t268;
t479 = t247 * t309;
t469 = t312 * t317;
t298 = pkin(9) * t469;
t248 = t309 * t284 + t298;
t478 = t248 * t312;
t257 = t273 * t314;
t477 = t257 * t314;
t476 = t260 * t314;
t474 = t309 * t314;
t470 = t312 * t314;
t114 = t204 * t473 + t205 * t312;
t468 = t313 * t114;
t115 = -t204 * t469 + t205 * t309;
t467 = t313 * t115;
t291 = -qJ(5) * t317 + t497;
t297 = pkin(9) * t474;
t254 = t312 * t291 + t297;
t201 = t314 * pkin(5) - pkin(10) * t469 + t254;
t466 = t313 * t201;
t255 = -pkin(9) * t470 + t309 * t291;
t214 = -pkin(10) * t473 + t255;
t465 = t313 * t214;
t464 = t313 * t245;
t463 = t313 * t246;
t460 = t316 * t114;
t459 = t316 * t115;
t458 = t316 * t201;
t457 = t316 * t214;
t456 = t316 * t245;
t455 = t316 * t246;
t259 = t273 * t317;
t160 = -t259 * t317 + t477;
t452 = qJD(3) * t160;
t161 = t317 * t530 - t476;
t451 = qJD(3) * t161;
t450 = qJD(3) * t260;
t449 = qJD(4) * t525;
t448 = qJD(4) * t273;
t447 = qJD(4) * t303;
t446 = qJD(4) * t309;
t445 = qJD(4) * t312;
t444 = qJD(5) * t317;
t443 = qJD(6) * t260;
t442 = qJD(6) * t273;
t111 = -t257 * t530 - t259 * t260;
t441 = t111 * qJD(3);
t343 = t509 + t360;
t167 = t343 * t317;
t440 = t167 * qJD(3);
t168 = (t509 - t360) * t317;
t439 = t168 * qJD(3);
t169 = t317 * t359 - t502 * t525;
t438 = t169 * qJD(3);
t342 = -t525 / 0.2e1 + t359;
t170 = t342 * t317;
t437 = t170 * qJD(3);
t436 = t257 * qJD(6);
t435 = t265 * qJD(4);
t270 = t294 * t308;
t434 = t270 * qJD(3);
t266 = t525 * qJD(6);
t296 = -t317 ^ 2 + t308;
t432 = t296 * qJD(3);
t431 = t314 * qJD(3);
t430 = t314 * qJD(4);
t429 = t317 * qJD(3);
t428 = t317 * qJD(4);
t427 = pkin(3) * t429;
t426 = pkin(9) * t428;
t425 = pkin(9) * t511;
t424 = t496 / 0.2e1;
t422 = pkin(5) * t309 + pkin(9);
t419 = t314 * t444;
t418 = t314 * t428;
t417 = t314 * t429;
t186 = -t485 / 0.2e1;
t187 = t485 / 0.2e1;
t416 = t211 * t505;
t415 = -t474 / 0.2e1;
t414 = t474 / 0.2e1;
t413 = t470 / 0.2e1;
t410 = qJD(4) * t500;
t244 = t260 * t429;
t404 = qJD(4) * t168 - t244;
t403 = qJD(5) + t447;
t401 = t314 * t421;
t399 = t525 * t186;
t398 = t273 * t186;
t397 = qJD(3) * t421;
t396 = -t421 / 0.2e1;
t395 = t421 / 0.2e1;
t392 = t313 * t82 - t316 * t81;
t391 = t313 * t81 + t316 * t82;
t14 = t114 * t81 + t115 * t82 - t151 * t485;
t4 = t115 * t516 + t246 * t521 + t114 * t517 + t81 * t515 + (t151 * t395 + t204 * t513) * t314;
t390 = t14 * qJD(1) + t4 * qJD(2);
t15 = (t152 - t493 + t494) * t151;
t370 = t483 / 0.2e1 - t482 / 0.2e1;
t376 = t494 / 0.2e1 - t493 / 0.2e1;
t5 = (t518 + t376) * t264 + (t511 + t370) * t151;
t389 = t15 * qJD(1) + t5 * qJD(2);
t51 = t211 * t245 + t212 * t246 + t264 * t401;
t388 = t4 * qJD(1) + t51 * qJD(2);
t50 = (t265 - t482 + t483) * t264;
t387 = t5 * qJD(1) + t50 * qJD(2);
t386 = t316 * t211 - t313 * t212;
t385 = t313 * t211 + t316 * t212;
t384 = -t254 * t309 + t255 * t312;
t383 = t314 * t395;
t382 = t312 * t396;
t149 = t257 ^ 2 - t260 ^ 2;
t80 = -t257 * t525 - t273 * t260;
t381 = qJD(3) * t149 + qJD(4) * t80;
t164 = -t273 ^ 2 + t525 ^ 2;
t380 = qJD(3) * t80 + qJD(4) * t164;
t379 = -qJD(3) * t257 + t449;
t378 = t448 + t450;
t377 = t254 * t522 - t82 * t255 / 0.2e1;
t375 = t505 * t81 + t506 * t82;
t117 = t187 + t186;
t374 = pkin(3) * t431 - t117 * qJD(1);
t373 = t525 * t383;
t372 = t273 * t383;
t371 = t114 * t506 + t115 * t531;
t369 = t212 * t506 + t416;
t367 = -t479 / 0.2e1 + t478 / 0.2e1;
t366 = -t468 / 0.2e1 - t459 / 0.2e1;
t365 = -t467 / 0.2e1 + t460 / 0.2e1;
t364 = -t466 / 0.2e1 - t457 / 0.2e1;
t363 = -t465 / 0.2e1 + t458 / 0.2e1;
t362 = -t464 / 0.2e1 - t455 / 0.2e1;
t361 = -t463 / 0.2e1 + t456 / 0.2e1;
t130 = -t257 * t508 + t260 * t510;
t358 = qJD(4) * t130 - t257 * t450;
t357 = -qJD(3) * t130 - t448 * t525;
t356 = qJD(4) * t167 - t244 + t443;
t353 = t375 * t314;
t147 = t424 - t367;
t346 = t371 * qJ(5);
t2 = (t204 * pkin(4) / 0.2e1 - t498 / 0.2e1) * t314 + t346 - t147 * t151 + t377;
t319 = t147 * t264 + t254 * t517 + t255 * t516;
t23 = (pkin(4) * t395 + t425) * t314 - t532 + t319;
t83 = pkin(9) ^ 2 * t314 * t317 + t247 * t254 + t248 * t255;
t352 = -t2 * qJD(1) + t23 * qJD(2) + t83 * qJD(3);
t323 = -t257 * t511 + t386 * t504;
t28 = t323 - t373;
t198 = -pkin(10) * t470 + t268 + (-pkin(9) * t309 - pkin(5)) * t317;
t213 = -pkin(10) * t474 + t248;
t127 = -t198 * t316 + t213 * t313;
t279 = t422 * t314;
t280 = t422 * t317;
t32 = (t458 - t465) * t317 + t127 * t314 - t280 * t257 - t279 * t259;
t327 = -t257 * t518 + t392 * t503;
t6 = t327 - t399;
t351 = -t6 * qJD(1) - t28 * qJD(2) - t32 * qJD(3);
t322 = t265 * t514 + t385 * t503;
t29 = t322 + t372;
t128 = t198 * t313 + t213 * t316;
t33 = (t457 + t466) * t317 - t128 * t314 + t280 * t260 + t279 * t530;
t326 = t152 * t514 + t391 * t503;
t7 = t326 + t398;
t350 = -t7 * qJD(1) - t29 * qJD(2) + t33 * qJD(3);
t328 = t151 * t514 + t391 * t502;
t10 = t328 + t365;
t324 = t260 * t513 + t385 * t502;
t42 = t324 + t361;
t70 = -t128 * t317 - t279 * t260;
t349 = qJD(1) * t10 + qJD(2) * t42 + qJD(3) * t70;
t329 = -t257 * t520 + t392 * t501;
t11 = t329 + t366;
t325 = -t257 * t513 + t386 * t502;
t43 = t325 + t362;
t69 = -t127 * t317 - t279 * t257;
t348 = qJD(1) * t11 + qJD(2) * t43 - qJD(3) * t69;
t17 = (-t115 / 0.2e1 + t81 * t502) * t312 + (t114 / 0.2e1 + t82 * t502) * t309;
t55 = (-t246 / 0.2e1 + t211 * t502) * t312 + (t212 * t502 + t515) * t309;
t66 = (t247 * t317 + t254 * t314) * t312 + (t248 * t317 + t255 * t314) * t309;
t347 = t17 * qJD(1) + t55 * qJD(2) - t66 * qJD(3);
t345 = -t259 / 0.2e1;
t344 = -t530 / 0.2e1;
t101 = t343 * t264;
t38 = t343 * t151;
t289 = t495 * t309;
t290 = t495 * t312;
t218 = -t289 * t313 + t290 * t316;
t332 = t218 * t501 + t260 * t507 + t279 * t508;
t46 = -t332 + t363;
t341 = t38 * qJD(1) + t101 * qJD(2) + t46 * qJD(3);
t102 = t342 * t264;
t39 = t342 * t151;
t217 = t289 * t316 + t290 * t313;
t333 = t217 * t502 - t257 * t507 + t279 * t510;
t47 = -t333 + t364;
t340 = t39 * qJD(1) + t102 * qJD(2) + t47 * qJD(3);
t145 = -t247 * t314 + (t254 - 0.2e1 * t297) * t317;
t19 = (t486 / 0.2e1 + t522 - t489 / 0.2e1) * t314;
t63 = (t382 - t211 / 0.2e1 - t475 / 0.2e1) * t314;
t339 = t19 * qJD(1) + t63 * qJD(2) + t145 * qJD(3);
t146 = t255 * t317 + (-t248 + 0.2e1 * t298) * t314;
t18 = (-t487 / 0.2e1 + t521 - t488 / 0.2e1) * t314;
t62 = (t309 * t395 + t516 - t471 / 0.2e1) * t314;
t338 = t18 * qJD(1) + t62 * qJD(2) - t146 * qJD(3);
t150 = (t247 * t312 + t248 * t309) * t314;
t27 = t187 + t353;
t89 = (t395 - t369) * t314;
t337 = -qJD(1) * t27 + qJD(2) * t89 + qJD(3) * t150;
t336 = t408 / 0.2e1 + t423 / 0.2e1;
t331 = qJD(4) * t393 + t444;
t318 = t484 / 0.2e1 + t320 / 0.2e1;
t24 = t318 + t376;
t86 = t336 + t370;
t330 = qJD(1) * t24 + qJD(2) * t86 + qJD(3) * t147 - qJD(4) * t529;
t304 = t430 / 0.2e1;
t269 = (t429 - qJD(6) / 0.2e1) * t314;
t148 = t424 + t367;
t142 = t169 * qJD(4) - t257 * t429;
t129 = t130 * qJD(6);
t120 = t204 * t317;
t118 = 0.2e1 * t187;
t104 = t526 * t264;
t103 = t527 * t264;
t90 = t212 * t415 + t314 * t416 + t383;
t88 = t170 * qJD(4) + (-qJD(6) + t429) * t257;
t87 = t336 - t370;
t75 = t80 * qJD(6);
t65 = t212 * t504 + t265 * t413 + t309 * t383;
t64 = t211 * t503 + t265 * t414 + t314 * t382;
t54 = t317 * t369 + t523;
t49 = t332 + t363;
t48 = t333 + t364;
t45 = -t324 + t361;
t44 = -t325 + t362;
t41 = t526 * t151;
t40 = t527 * t151;
t31 = t264 * t344 + t512 * t530 - t322 + t372;
t30 = t259 * t512 + t264 * t345 - t323 - t373;
t26 = t186 + t353;
t25 = t318 - t376;
t22 = t314 * t425 + t396 * t497 + t319 + t532;
t21 = t152 * t413 + t204 * t415 + t504 * t82;
t20 = t152 * t414 + t204 * t413 + t503 * t81;
t16 = t317 * t375 + t371;
t13 = -t328 + t365;
t12 = -t329 + t366;
t9 = t151 * t344 + t519 * t530 - t326 + t398;
t8 = t151 * t345 + t259 * t519 - t327 - t399;
t3 = pkin(4) * t187 + t151 * t424 + t478 * t520 + t479 * t519 + t498 * t503 + t346 - t377;
t1 = qJD(3) * t4 + qJD(4) * t5;
t34 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t14 + qJD(4) * t15, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -t205 * qJD(3), t204 * qJD(3), 0, 0, 0, 0, 0, t118 * qJD(4) - t205 * t429, qJD(4) * t120 + t205 * t431 (-t114 * t317 - t308 * t487) * qJD(3) + t20 * qJD(4) (t115 * t317 - t308 * t486) * qJD(3) + t21 * qJD(4), t16 * qJD(4) + (-t114 * t312 - t115 * t309) * t431 (t114 * t247 + t115 * t248 - t204 * t499) * qJD(3) + t3 * qJD(4) + t26 * qJD(5) + t390, 0, 0, 0, 0, 0 (-(t460 - t467) * t317 - t204 * t477) * qJD(3) + t8 * qJD(4) + t13 * qJD(6) ((t459 + t468) * t317 - t204 * t476) * qJD(3) + t9 * qJD(4) + t12 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t118 - qJD(4) * t152, qJD(3) * t120 + qJD(4) * t151, qJD(3) * t20 - t152 * t445, qJD(3) * t21 + t152 * t446, t16 * qJD(3) - t151 * t524, t3 * qJD(3) + (-t152 * pkin(4) - t151 * t529) * qJD(4) + t25 * qJD(5) + t389, 0, 0, 0, 0, 0, qJD(3) * t8 + qJD(6) * t41 - t152 * t449, qJD(3) * t9 + qJD(6) * t40 + t152 * t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t26 + qJD(4) * t25, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * qJD(3) + t41 * qJD(4) - qJD(6) * t391, t12 * qJD(3) + t40 * qJD(4) + qJD(6) * t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t51 + qJD(4) * t50, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -qJD(3) * t472, -t397, 0, 0, 0, 0, 0 (-t314 * t410 - t315 * t429) * t311 (t315 * t431 - t317 * t410) * t311 (-t245 * t317 + t308 * t402) * qJD(3) + t64 * qJD(4) (t246 * t317 + t308 * t400) * qJD(3) + t65 * qJD(4), t54 * qJD(4) + (-t245 * t312 - t246 * t309) * t431 (t245 * t247 + t246 * t248 + t421 * t499) * qJD(3) + t22 * qJD(4) + t90 * qJD(5) + t388, 0, 0, 0, 0, 0 (-(t456 - t463) * t317 + t257 * t401) * qJD(3) + t30 * qJD(4) + t45 * qJD(6) ((t455 + t464) * t317 + t260 * t401) * qJD(3) + t31 * qJD(4) + t44 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314 * t397 - t435, t264 * qJD(4) - t317 * t397, qJD(3) * t64 - t312 * t435, qJD(3) * t65 + t309 * t435, t54 * qJD(3) - t264 * t524, t22 * qJD(3) + (-t265 * pkin(4) - t264 * t529) * qJD(4) + t87 * qJD(5) + t387, 0, 0, 0, 0, 0, qJD(3) * t30 + qJD(6) * t104 - t435 * t525, qJD(3) * t31 + qJD(6) * t103 + t273 * t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t90 + qJD(4) * t87, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 * qJD(3) + t104 * qJD(4) - qJD(6) * t385, t44 * qJD(3) + t103 * qJD(4) - qJD(6) * t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117 * qJD(4), 0, -t19 * qJD(4), -t18 * qJD(4), t17 * qJD(4), -qJD(4) * t2 + qJD(5) * t27 - t390, 0, 0, 0, 0, 0, -qJD(4) * t6 - qJD(6) * t10, -qJD(4) * t7 - qJD(6) * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63 * qJD(4), -t62 * qJD(4), t55 * qJD(4), qJD(4) * t23 - qJD(5) * t89 - t388, 0, 0, 0, 0, 0, -qJD(4) * t28 - qJD(6) * t42, -qJD(4) * t29 - qJD(6) * t43; 0, 0, 0, 0, 0, t418, -t296 * qJD(4), 0, 0, 0, -pkin(3) * t430, -pkin(3) * t428, -t145 * qJD(4) + t312 * t419, t146 * qJD(4) - t309 * t419, -qJD(4) * t66 + qJD(5) * t270, qJD(4) * t83 - qJD(5) * t150 (qJD(4) * t530 - t436) * t260, qJD(4) * t111 + qJD(6) * t149, -t161 * qJD(4) + t317 * t436, -t160 * qJD(4) + t317 * t443, -t418, -t32 * qJD(4) - t70 * qJD(6) + t260 * t444, t33 * qJD(4) + t69 * qJD(6) - t257 * t444; 0, 0, 0, 0, 0, t417, -t432, t428, -t430, 0, -t374 - t426, pkin(9) * t430 - t427, -t298 * qJD(4) + t309 * t331 - t339, t309 * t426 + t312 * t331 - t338, qJD(4) * t384 + t347 (-pkin(4) * t496 + qJ(5) * t384) * qJD(4) + t148 * qJD(5) + t352, t378 * t530 + t129, t441 + (-t259 * t273 + t525 * t530) * qJD(4) + t75, qJD(6) * t170 + t273 * t430 - t451, -qJD(6) * t167 + t430 * t525 - t452, -t269 (-t217 * t314 + t259 * t303 - t280 * t525) * qJD(4) - t168 * qJD(5) + t49 * qJD(6) + t351 (-t218 * t314 + t273 * t280 + t303 * t530) * qJD(4) + t169 * qJD(5) + t48 * qJD(6) + t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t312 * t431 + t446) * t317 (-t309 * t431 + t445) * t317, t434, qJD(4) * t148 - t337, 0, 0, 0, 0, 0, -t404, t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t381, t88, -t356, t304, qJD(4) * t49 - qJD(6) * t128 - t349, qJD(4) * t48 + qJD(6) * t127 - t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117 * qJD(3), 0, t19 * qJD(3), t18 * qJD(3), -t17 * qJD(3), qJD(3) * t2 - qJD(5) * t24 - t389, 0, 0, 0, 0, 0, qJD(3) * t6 - qJD(6) * t38, qJD(3) * t7 - qJD(6) * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63 * qJD(3), t62 * qJD(3), -t55 * qJD(3), -qJD(3) * t23 - qJD(5) * t86 - t387, 0, 0, 0, 0, 0, qJD(3) * t28 - qJD(6) * t101, qJD(3) * t29 - qJD(6) * t102; 0, 0, 0, 0, 0, -t417, t432, 0, 0, 0, t374, t427, t339, t338, -t347, -qJD(5) * t147 - t352, -t450 * t530 + t129, t75 - t441, -qJD(6) * t169 + t451, -qJD(6) * t168 + t452, t269, -qJD(5) * t167 - qJD(6) * t46 - t351, -qJD(5) * t170 - qJD(6) * t47 - t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294 * qJD(5), t529 * qJD(5), t273 * t266, t164 * qJD(6), 0, 0, 0, t303 * t442, t303 * t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t524, -t330, 0, 0, 0, 0, 0, -t440, -t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t357, t380, t266 - t438, -t439 - t442, -t431 / 0.2e1, -qJD(6) * t218 + t273 * t447 - t341, qJD(6) * t217 + t447 * t525 - t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t27 + qJD(4) * t24, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t89 + qJD(4) * t86, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t312 * t417, t309 * t417, -t434, qJD(4) * t147 + t337, 0, 0, 0, 0, 0, t356, t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t524, t330, 0, 0, 0, 0, 0, t440 + t442, t266 + t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t10 + qJD(4) * t38, qJD(3) * t11 + qJD(4) * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t42 + qJD(4) * t101, qJD(3) * t43 + qJD(4) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t358, -t381, t142, t404, t304, qJD(4) * t46 - qJD(5) * t260 + t349, qJD(4) * t47 + qJD(5) * t257 + t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t380, t438, t439, t431 / 0.2e1, -t273 * t403 + t341, -t403 * t525 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t378, -t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t34;
