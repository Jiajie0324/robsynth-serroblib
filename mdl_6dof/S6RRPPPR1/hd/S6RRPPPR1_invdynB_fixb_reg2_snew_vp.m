% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:13:24
% EndTime: 2019-05-06 08:14:05
% DurationCPUTime: 42.47s
% Computational Cost: add. (112880->805), mult. (271205->1156), div. (0->0), fcn. (193392->10), ass. (0->578)
t1049 = sin(qJ(1));
t1052 = cos(qJ(1));
t1048 = sin(qJ(2));
t1051 = cos(qJ(2));
t1044 = sin(pkin(9));
t1046 = cos(pkin(9));
t1043 = sin(pkin(10));
t1045 = cos(pkin(10));
t1122 = qJD(1) * t1051;
t1123 = qJD(1) * t1048;
t1003 = t1044 * t1122 + t1046 * t1123;
t971 = -t1045 * qJD(2) + t1003 * t1043;
t974 = qJD(2) * t1043 + t1003 * t1045;
t913 = t974 * t971;
t1088 = qJD(2) * t1122;
t1103 = qJDD(1) * t1048;
t1013 = t1088 + t1103;
t1091 = qJD(2) * t1123;
t1101 = qJDD(1) * t1051;
t1065 = t1091 - t1101;
t957 = t1013 * t1044 + t1046 * t1065;
t1192 = t913 + t957;
t1140 = t1045 * t1192;
t1001 = t1044 * t1123 - t1046 * t1122;
t1167 = t1001 ^ 2;
t970 = t974 ^ 2;
t892 = -t970 - t1167;
t788 = t1043 * t892 + t1140;
t1125 = t971 * t1001;
t958 = t1046 * t1013 - t1044 * t1065;
t945 = qJDD(2) * t1043 + t1045 * t958;
t861 = -t945 + t1125;
t728 = t1044 * t788 - t1046 * t861;
t730 = t1044 * t861 + t1046 * t788;
t671 = t1048 * t728 - t1051 * t730;
t1150 = t1043 * t1192;
t795 = t1045 * t892 - t1150;
t637 = t1049 * t671 - t1052 * t795;
t1289 = pkin(6) * t637;
t639 = t1049 * t795 + t1052 * t671;
t1288 = pkin(6) * t639;
t1082 = -t1045 * qJDD(2) + t1043 * t958;
t1155 = t1001 * t974;
t1067 = t1082 + t1155;
t1152 = t1043 * t861;
t779 = t1045 * t1067 - t1152;
t1169 = t971 ^ 2;
t911 = t970 - t1169;
t736 = t1044 * t779 + t1046 * t911;
t738 = -t1044 * t911 + t1046 * t779;
t680 = t1048 * t736 - t1051 * t738;
t776 = t1043 * t1067 + t1045 * t861;
t1287 = t1049 * t680 + t1052 * t776;
t1286 = -t1049 * t776 + t1052 * t680;
t664 = t1048 * t730 + t1051 * t728;
t1285 = pkin(7) * t664;
t1284 = -pkin(1) * t664 - pkin(2) * t728 - qJ(4) * t788;
t1283 = pkin(1) * t795 - pkin(7) * t671;
t1068 = -t1082 + t1155;
t931 = t1169 - t1167;
t824 = t1045 * t931 - t1150;
t757 = t1044 * t824 - t1046 * t1068;
t761 = t1044 * t1068 + t1046 * t824;
t691 = t1048 * t757 - t1051 * t761;
t819 = t1043 * t931 + t1140;
t1282 = t1049 * t691 + t1052 * t819;
t1281 = -t1049 * t819 + t1052 * t691;
t1280 = t1048 * t738 + t1051 * t736;
t1279 = qJ(3) * t728;
t1277 = pkin(2) * t795 + qJ(3) * t730;
t1085 = -t957 + t913;
t1149 = t1043 * t1085;
t932 = -t970 + t1167;
t1245 = -t1045 * t932 + t1149;
t1191 = -t945 - t1125;
t1139 = t1045 * t1085;
t1244 = -t1043 * t932 - t1139;
t1250 = -t1044 * t1191 + t1046 * t1244;
t1251 = t1044 * t1244 + t1046 * t1191;
t1271 = -t1048 * t1251 + t1051 * t1250;
t1276 = t1049 * t1271 + t1052 * t1245;
t1275 = -t1049 * t1245 + t1052 * t1271;
t1274 = t1048 * t761 + t1051 * t757;
t1180 = -t1167 - t1169;
t1202 = t1043 * t1180 - t1139;
t1201 = t1045 * t1180 + t1149;
t1219 = t1044 * t1067 + t1046 * t1201;
t1220 = t1044 * t1201 - t1046 * t1067;
t1237 = -t1048 * t1220 + t1051 * t1219;
t1248 = t1049 * t1202 + t1052 * t1237;
t1273 = pkin(6) * t1248;
t1249 = t1049 * t1237 - t1052 * t1202;
t1272 = pkin(6) * t1249;
t1270 = t1048 * t1250 + t1051 * t1251;
t1267 = pkin(3) * t795;
t1176 = t1043 * t1068 + t1045 * t1191;
t1174 = -t1043 * t1191 + t1045 * t1068;
t1190 = t970 + t1169;
t1197 = t1044 * t1174 + t1046 * t1190;
t1198 = -t1044 * t1190 + t1046 * t1174;
t1213 = -t1048 * t1197 + t1051 * t1198;
t1238 = t1049 * t1176 + t1052 * t1213;
t1266 = pkin(6) * t1238;
t1239 = t1049 * t1213 - t1052 * t1176;
t1265 = pkin(6) * t1239;
t1236 = t1048 * t1219 + t1051 * t1220;
t1264 = pkin(7) * t1236;
t1262 = qJ(4) * t795;
t1253 = -pkin(1) * t1236 - pkin(2) * t1220 - qJ(4) * t1201;
t1252 = -pkin(1) * t1202 + pkin(7) * t1237;
t1214 = t1048 * t1198 + t1051 * t1197;
t1247 = pkin(7) * t1214;
t1246 = qJ(3) * t1220;
t1243 = -pkin(1) * t1214 - pkin(2) * t1197 - pkin(3) * t1190 - qJ(4) * t1174;
t1241 = -pkin(1) * t1176 + pkin(7) * t1213;
t1240 = -pkin(2) * t1202 + qJ(3) * t1219;
t1233 = pkin(3) * t1202;
t1232 = qJ(5) * t861;
t1231 = qJ(3) * t1197;
t1230 = qJ(3) * t1198;
t1228 = qJ(4) * t1202;
t1118 = t1001 * t1043;
t1093 = t971 * t1118;
t1116 = t1001 * t1045;
t926 = t974 * t1116;
t1073 = t926 + t1093;
t1092 = t971 * t1116;
t925 = t974 * t1118;
t1072 = t925 - t1092;
t1144 = t1044 * t957;
t1172 = t1046 * t1072 + t1144;
t951 = t1046 * t957;
t1177 = t1044 * t1072 - t951;
t1196 = -t1048 * t1177 + t1051 * t1172;
t1218 = t1049 * t1196 + t1052 * t1073;
t1059 = t1045 * t1082 - t1093;
t1058 = t1043 * t1082 + t1092;
t1097 = t1044 * t913;
t1173 = t1046 * t1058 - t1097;
t1095 = t1046 * t913;
t1175 = t1044 * t1058 + t1095;
t1194 = -t1048 * t1175 + t1051 * t1173;
t1217 = t1049 * t1194 + t1052 * t1059;
t1216 = -t1049 * t1073 + t1052 * t1196;
t1215 = -t1049 * t1059 + t1052 * t1194;
t1212 = 2 * qJD(5);
t1210 = qJ(4) * t1176;
t956 = t1003 * t1001;
t1179 = -t956 + qJDD(2);
t1209 = t1044 * t1179;
t1207 = t1046 * t1179;
t855 = t1045 * t945 - t925;
t1075 = t1044 * t855 - t1095;
t1076 = t1046 * t855 + t1097;
t1170 = -t1048 * t1075 + t1051 * t1076;
t854 = -t1043 * t945 - t926;
t1203 = t1049 * t1170 + t1052 * t854;
t1200 = -t1049 * t854 + t1052 * t1170;
t1195 = t1048 * t1172 + t1051 * t1177;
t1193 = t1048 * t1173 + t1051 * t1175;
t993 = qJD(2) * t1001;
t920 = t993 - t958;
t1047 = sin(qJ(6));
t1050 = cos(qJ(6));
t897 = t1047 * t974 - t1050 * t971;
t899 = t1047 * t971 + t1050 * t974;
t1163 = t897 * t899;
t954 = qJDD(6) - t957;
t1063 = t954 - t1163;
t1187 = t1047 * t1063;
t1184 = t1050 * t1063;
t1041 = t1051 ^ 2;
t1053 = qJD(1) ^ 2;
t1037 = t1041 * t1053;
t1168 = qJD(2) ^ 2;
t1030 = -t1037 - t1168;
t1023 = g(1) * t1052 + g(2) * t1049;
t1060 = -pkin(1) * t1053 + qJDD(1) * pkin(7) - t1023;
t1057 = t1048 * t1060;
t1105 = t1048 * t1053;
t1124 = qJD(1) * qJD(2);
t1054 = -t1057 - t1013 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t1105 + qJ(3) * t1124 - g(3)) * t1051;
t983 = -t1048 * g(3) + t1051 * t1060;
t906 = pkin(2) * t1030 + qJ(3) * t1101 + t983;
t814 = -0.2e1 * qJD(3) * t1001 + t1044 * t1054 + t1046 * t906;
t946 = pkin(3) * t1001 - qJ(4) * t1003;
t770 = -pkin(3) * t1168 + qJDD(2) * qJ(4) - t1001 * t946 + t814;
t1022 = t1049 * g(1) - t1052 * g(2);
t1069 = qJDD(1) * pkin(1) + t1022;
t914 = (qJ(3) * t1041 + pkin(7)) * t1053 - pkin(2) * t1065 - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t1123) * t1123 + t1069;
t1121 = qJD(2) * t1003;
t916 = t957 + t1121;
t794 = t916 * pkin(3) + qJ(4) * t920 - t914;
t1160 = t1043 * t794 + t1045 * t770;
t905 = pkin(4) * t971 - qJ(5) * t974;
t1181 = t957 * qJ(5) + t1001 * t1212 - t971 * t905 + t1160;
t1178 = t1082 * pkin(4) + t1232;
t1171 = t1048 * t1076 + t1051 * t1075;
t895 = t897 ^ 2;
t896 = t899 ^ 2;
t995 = -qJD(6) + t1001;
t994 = t995 ^ 2;
t1000 = t1003 ^ 2;
t1166 = pkin(4) + pkin(5);
t1165 = pkin(3) * t1044;
t1164 = pkin(4) * t1045;
t1162 = t897 * t995;
t1161 = t1043 * t770 - t1045 * t794;
t1159 = t1190 - t1167;
t1158 = qJ(5) * t1045;
t1157 = qJD(4) * t971;
t1156 = qJD(4) * t974;
t1084 = t1044 * t906 - t1046 * t1054;
t1064 = -qJDD(2) * pkin(3) - t1168 * qJ(4) + qJDD(4) + t1084;
t769 = (0.2e1 * qJD(3) + t946) * t1003 + t1064;
t1154 = t1043 * t769;
t1146 = t1044 * t914;
t948 = qJDD(2) + t956;
t1145 = t1044 * t948;
t1143 = t1045 * t769;
t1136 = t1046 * t914;
t1135 = t1046 * t948;
t1077 = -pkin(5) * t1001 - pkin(8) * t974;
t695 = (pkin(4) * t1001 - (2 * qJD(5))) * t974 + t769 + t1178;
t655 = pkin(5) * t1082 + pkin(8) * t1169 - t1077 * t974 + t695;
t1134 = t1047 * t655;
t799 = -t954 - t1163;
t1133 = t1047 * t799;
t1132 = t1047 * t995;
t1120 = qJD(3) * t1003;
t813 = t1084 + 0.2e1 * t1120;
t716 = t1044 * t814 - t1046 * t813;
t1131 = t1048 * t716;
t1129 = t1050 * t655;
t1128 = t1050 * t799;
t1127 = t1050 * t995;
t1126 = t1051 * t716;
t1117 = t1001 * t1044;
t1115 = t1001 * t1046;
t1114 = t1003 * t1044;
t1113 = t1003 * t1046;
t1007 = t1053 * pkin(7) + t1069;
t1112 = t1007 * t1048;
t1111 = t1007 * t1051;
t1014 = -0.2e1 * t1091 + t1101;
t1110 = t1014 * t1051;
t1031 = t1051 * t1105;
t1020 = qJDD(2) + t1031;
t1109 = t1020 * t1048;
t1021 = qJDD(2) - t1031;
t1108 = t1021 * t1048;
t1107 = t1021 * t1051;
t1040 = t1048 ^ 2;
t1106 = t1040 * t1053;
t1104 = t1040 + t1041;
t1102 = qJDD(1) * t1049;
t1100 = qJDD(1) * t1052;
t1099 = qJDD(2) * t1052;
t964 = 0.2e1 * t1156;
t697 = t964 + t1161;
t962 = -0.2e1 * t1157;
t698 = t962 + t1160;
t803 = -t897 * qJD(6) + t1047 * t1082 + t1050 * t945;
t1098 = t1044 * t1163;
t1096 = t1046 * t1163;
t1094 = -pkin(3) * t1046 - pkin(2);
t1090 = t1049 * t956;
t1089 = t1052 * t956;
t1087 = qJ(5) * t1043 + pkin(3);
t717 = t1044 * t813 + t1046 * t814;
t1080 = t974 * t905 + qJDD(5) + t1161;
t1066 = -t957 * pkin(4) + t1080;
t1061 = -qJ(5) * t1167 + t1066;
t631 = t1085 * pkin(5) + pkin(8) * t1191 + t1061 + t964;
t1070 = t962 + t1181;
t656 = -pkin(4) * t1167 + t1070;
t636 = -pkin(5) * t1169 + pkin(8) * t1082 + t1001 * t1077 + t656;
t581 = t1047 * t636 - t1050 * t631;
t1083 = t1047 * t945 - t1050 * t1082;
t982 = t1051 * g(3) + t1057;
t909 = t1048 * t982 + t1051 * t983;
t975 = -t1022 * t1049 - t1052 * t1023;
t1079 = t1049 * t1031;
t1078 = t1052 * t1031;
t1017 = -t1049 * t1053 + t1100;
t1074 = -pkin(6) * t1017 - g(3) * t1049;
t615 = t1043 * t698 - t1045 * t697;
t616 = t1043 * t697 + t1045 * t698;
t582 = t1047 * t631 + t1050 * t636;
t544 = t1047 * t582 - t1050 * t581;
t545 = t1047 * t581 + t1050 * t582;
t907 = t1048 * t983 - t1051 * t982;
t1071 = t803 + t1162;
t973 = t1022 * t1052 - t1023 * t1049;
t918 = -t957 + t1121;
t1062 = (-qJD(6) - t995) * t899 - t1083;
t1056 = -t1003 * t946 + t1212 * t974 - t1064 - 0.2e1 * t1120 - t1178;
t1035 = t1049 * qJDD(2);
t1029 = t1037 - t1168;
t1028 = -t1106 - t1168;
t1027 = -t1106 + t1168;
t1019 = t1037 - t1106;
t1018 = t1037 + t1106;
t1016 = t1052 * t1053 + t1102;
t1015 = t1104 * qJDD(1);
t1012 = 0.2e1 * t1088 + t1103;
t1010 = t1051 * t1020;
t1009 = t1104 * t1124;
t997 = -pkin(6) * t1016 + g(3) * t1052;
t988 = -t1000 - t1168;
t987 = -t1000 + t1168;
t986 = t1167 - t1168;
t985 = t1013 * t1051 - t1040 * t1124;
t984 = -t1041 * t1124 + t1048 * t1065;
t981 = -t1028 * t1048 - t1107;
t980 = -t1027 * t1048 + t1010;
t979 = t1030 * t1051 - t1109;
t978 = t1029 * t1051 - t1108;
t977 = t1028 * t1051 - t1108;
t976 = t1030 * t1048 + t1010;
t966 = t1015 * t1052 - t1018 * t1049;
t965 = t1015 * t1049 + t1018 * t1052;
t959 = -t1012 * t1048 + t1110;
t952 = -t1000 + t1167;
t947 = -t1167 - t1168;
t939 = (t1114 - t1115) * qJD(2);
t938 = (-t1113 - t1117) * qJD(2);
t936 = t1012 * t1049 + t1052 * t981;
t935 = -t1014 * t1049 + t1052 * t979;
t934 = -t1012 * t1052 + t1049 * t981;
t933 = t1014 * t1052 + t1049 * t979;
t924 = -pkin(7) * t977 - t1111;
t923 = -pkin(7) * t976 - t1112;
t922 = -pkin(1) * t977 + t983;
t921 = -pkin(1) * t976 + t982;
t919 = -t993 - t958;
t915 = -t1167 - t1000;
t904 = -qJD(2) * t1114 + t1046 * t958;
t903 = qJD(2) * t1113 + t1044 * t958;
t902 = qJD(2) * t1115 + t1144;
t901 = qJD(2) * t1117 - t951;
t889 = -t1044 * t988 - t1135;
t888 = -t1044 * t987 + t1207;
t887 = t1046 * t986 - t1145;
t886 = t1046 * t988 - t1145;
t885 = t1046 * t987 + t1209;
t884 = t1044 * t986 + t1135;
t879 = -t1007 * t1049 + t1052 * t909;
t878 = t1007 * t1052 + t1049 * t909;
t877 = -t896 + t994;
t876 = t895 - t994;
t873 = t1046 * t947 - t1209;
t872 = t1044 * t947 + t1207;
t845 = -t1048 * t938 + t1051 * t939;
t841 = -t896 - t994;
t840 = -t1044 * t919 + t1046 * t918;
t839 = t1044 * t920 - t1046 * t916;
t838 = t1044 * t918 + t1046 * t919;
t837 = -t1044 * t916 - t1046 * t920;
t836 = t896 - t895;
t835 = -qJ(3) * t886 - t1136;
t834 = -t1048 * t903 + t1051 * t904;
t833 = -t1048 * t901 + t1051 * t902;
t828 = -t1048 * t886 + t1051 * t889;
t827 = -t1048 * t885 + t1051 * t888;
t826 = -t1048 * t884 + t1051 * t887;
t825 = t1048 * t889 + t1051 * t886;
t816 = -qJ(3) * t872 - t1146;
t815 = -t994 - t895;
t802 = -qJD(6) * t899 - t1083;
t791 = (-t1047 * t899 + t1050 * t897) * t995;
t790 = (-t1047 * t897 - t1050 * t899) * t995;
t785 = -t1048 * t872 + t1051 * t873;
t784 = t1048 * t873 + t1051 * t872;
t783 = pkin(2) * t920 + qJ(3) * t889 - t1146;
t774 = -t895 - t896;
t773 = -pkin(2) * t916 + qJ(3) * t873 + t1136;
t772 = -t1049 * t920 + t1052 * t828;
t771 = t1049 * t828 + t1052 * t920;
t766 = t1049 * t916 + t1052 * t785;
t765 = -t1048 * t838 + t1051 * t840;
t764 = -t1048 * t837 + t1051 * t839;
t763 = t1049 * t785 - t1052 * t916;
t762 = t1048 * t840 + t1051 * t838;
t752 = -t803 + t1162;
t748 = (qJD(6) - t995) * t899 + t1083;
t747 = t1050 * t803 + t1132 * t899;
t746 = -t1047 * t803 + t1127 * t899;
t745 = -t1047 * t802 - t1127 * t897;
t744 = -t1050 * t802 + t1132 * t897;
t743 = t1050 * t876 + t1133;
t742 = -t1047 * t877 + t1184;
t741 = -t1047 * t876 + t1128;
t740 = -t1050 * t877 - t1187;
t727 = -t1047 * t841 + t1128;
t726 = t1050 * t841 + t1133;
t719 = t1049 * t915 + t1052 * t765;
t718 = t1049 * t765 - t1052 * t915;
t715 = t1050 * t815 - t1187;
t714 = t1047 * t815 + t1184;
t709 = -t1043 * t790 + t1045 * t791;
t708 = -t1043 * t791 - t1045 * t790;
t707 = -pkin(1) * t762 - pkin(2) * t838;
t706 = -pkin(1) * t825 - pkin(2) * t886 + t814;
t705 = pkin(2) * t914 + qJ(3) * t717;
t704 = -pkin(3) * t1176 - pkin(4) * t1191 - qJ(5) * t1068;
t703 = t1143 - t1262;
t702 = t1154 - t1228;
t701 = -t1044 * t954 + t1046 * t709;
t700 = t1044 * t709 + t1046 * t954;
t699 = -pkin(1) * t784 - pkin(2) * t872 + t813;
t696 = -qJ(3) * t838 - t716;
t694 = -pkin(7) * t825 - t1048 * t783 + t1051 * t835;
t693 = -pkin(2) * t915 + qJ(3) * t840 + t717;
t688 = -t1047 * t752 + t1050 * t1062;
t687 = -t1047 * t1071 - t1050 * t748;
t686 = t1047 * t1062 + t1050 * t752;
t685 = t1047 * t748 - t1050 * t1071;
t684 = -t1043 * t746 + t1045 * t747;
t683 = -t1043 * t744 + t1045 * t745;
t682 = -t1043 * t747 - t1045 * t746;
t681 = -t1043 * t745 - t1045 * t744;
t678 = -t1043 * t741 + t1045 * t743;
t677 = -t1043 * t740 + t1045 * t742;
t676 = -t1043 * t743 - t1045 * t741;
t675 = -t1043 * t742 - t1045 * t740;
t674 = (-t1067 - t1155) * pkin(4) + t1056;
t673 = -pkin(4) * t1155 + t1056 - t1232;
t668 = -pkin(7) * t784 - t1048 * t773 + t1051 * t816;
t663 = t1043 * t726 + t1045 * t727;
t662 = t1043 * t727 - t1045 * t726;
t661 = -t1061 - 0.2e1 * t1156;
t654 = t698 - t1267;
t653 = t697 - t1233;
t652 = t1051 * t717 - t1131;
t651 = t1048 * t717 + t1126;
t650 = t1043 * t714 + t1045 * t715;
t649 = t1043 * t715 - t1045 * t714;
t648 = t1046 * t684 - t1098;
t647 = t1046 * t683 + t1098;
t646 = t1044 * t684 + t1096;
t645 = t1044 * t683 - t1096;
t644 = qJ(5) * t1159 + t1066 + t964;
t643 = pkin(4) * t1159 + t1070;
t642 = -t1049 * t914 + t1052 * t652;
t641 = t1049 * t652 + t1052 * t914;
t625 = -t1044 * t1062 + t1046 * t678;
t624 = t1044 * t752 + t1046 * t677;
t623 = t1044 * t678 + t1046 * t1062;
t622 = t1044 * t677 - t1046 * t752;
t621 = -t1043 * t674 - t1067 * t1158 - t1228;
t620 = pkin(4) * t1152 + t1045 * t673 + t1262;
t619 = -t1048 * t700 + t1051 * t701;
t618 = -t1044 * t1071 + t1046 * t663;
t617 = t1044 * t663 + t1046 * t1071;
t614 = -t1233 + t964 + (-t1180 - t1167) * qJ(5) + (t1085 - t957) * pkin(4) + t1080;
t613 = -t1044 * t748 + t1046 * t650;
t612 = t1044 * t650 + t1046 * t748;
t611 = -pkin(1) * t651 - pkin(2) * t716;
t610 = t1267 - qJ(5) * t1192 + 0.2e1 * t1157 + (t892 + t1167) * pkin(4) - t1181;
t609 = t1043 * t686 + t1045 * t688;
t608 = -t1043 * t685 + t1045 * t687;
t607 = t1043 * t688 - t1045 * t686;
t606 = -t1043 * t687 - t1045 * t685;
t605 = -t615 - t1210;
t604 = t1044 * t769 + t1046 * t616;
t603 = t1044 * t616 - t1046 * t769;
t602 = -pkin(8) * t726 + qJ(5) * t1071 - t1129;
t601 = -t1044 * t836 + t1046 * t608;
t600 = t1044 * t608 + t1046 * t836;
t599 = -pkin(7) * t762 - t1048 * t693 + t1051 * t696;
t598 = -t1043 * t661 + t1045 * t656;
t597 = t1043 * t656 + t1045 * t661;
t596 = -pkin(8) * t714 + qJ(5) * t748 - t1134;
t595 = -t1044 * t774 + t1046 * t609;
t594 = t1044 * t609 + t1046 * t774;
t593 = -t1044 * t654 + t1046 * t703 + t1279;
t592 = -t1044 * t653 + t1046 * t702 - t1246;
t591 = -pkin(3) * t861 - t1154 - t1284;
t590 = -pkin(7) * t651 - qJ(3) * t1126 - t1048 * t705;
t589 = -t1048 * t646 + t1051 * t648;
t588 = -t1048 * t645 + t1051 * t647;
t587 = pkin(3) * t1067 + t1143 + t1253;
t586 = -pkin(8) * t727 + t1071 * t1166 + t1134;
t585 = -pkin(8) * t715 + t1166 * t748 - t1129;
t584 = t1044 * t703 + t1046 * t654 - t1277;
t583 = t1044 * t702 + t1046 * t653 + t1240;
t580 = -t1043 * t643 + t1045 * t644 - t1210;
t579 = t1046 * t605 + t1165 * t1176 - t1231;
t578 = -t1048 * t623 + t1051 * t625;
t577 = -t1048 * t622 + t1051 * t624;
t576 = t1044 * t695 + t1046 * t598;
t575 = t1044 * t598 - t1046 * t695;
t574 = -t1048 * t617 + t1051 * t618;
t573 = t1048 * t618 + t1051 * t617;
t572 = -t1045 * t674 + t1067 * t1087 + t1253;
t571 = t1044 * t605 + t1094 * t1176 + t1230;
t570 = -t1043 * t673 - (-pkin(3) - t1164) * t861 + t1284;
t569 = -t1048 * t612 + t1051 * t613;
t568 = t1048 * t613 + t1051 * t612;
t567 = -t1044 * t614 + t1046 * t621 - t1246;
t566 = t1243 - t616;
t565 = -t1044 * t610 + t1046 * t620 - t1279;
t564 = -qJ(4) * t597 + (pkin(4) * t1043 - t1158) * t695;
t563 = t1044 * t621 + t1046 * t614 + t1240;
t562 = -t1048 * t603 + t1051 * t604;
t561 = t1048 * t604 + t1051 * t603;
t560 = t1044 * t620 + t1046 * t610 + t1277;
t559 = -t1044 * t704 + t1046 * t580 - t1231;
t558 = t1049 * t662 + t1052 * t574;
t557 = t1049 * t574 - t1052 * t662;
t556 = -t1048 * t600 + t1051 * t601;
t555 = -pkin(3) * t597 - pkin(4) * t661 - qJ(5) * t656;
t554 = -pkin(2) * t1176 + t1044 * t580 + t1046 * t704 + t1230;
t553 = -t1048 * t594 + t1051 * t595;
t552 = t1048 * t595 + t1051 * t594;
t551 = t1049 * t649 + t1052 * t569;
t550 = t1049 * t569 - t1052 * t649;
t549 = -t1043 * t644 - t1045 * t643 + t1243;
t548 = -pkin(3) * t607 - qJ(5) * t688 + t1166 * t686;
t547 = -qJ(3) * t603 + (-qJ(4) * t1046 + t1165) * t615;
t546 = -pkin(3) * t662 - qJ(5) * t727 + t1166 * t726 - t582;
t543 = t1049 * t615 + t1052 * t562;
t542 = t1049 * t562 - t1052 * t615;
t541 = -qJ(4) * t662 - t1043 * t586 + t1045 * t602;
t540 = -pkin(3) * t649 - qJ(5) * t715 + t1166 * t714 - t581;
t539 = -t1048 * t584 + t1051 * t593 + t1285;
t538 = -t1048 * t575 + t1051 * t576;
t537 = t1048 * t576 + t1051 * t575;
t536 = -qJ(4) * t649 - t1043 * t585 + t1045 * t596;
t535 = -t1048 * t583 + t1051 * t592 - t1264;
t534 = t1049 * t607 + t1052 * t553;
t533 = t1049 * t553 - t1052 * t607;
t532 = -pkin(8) * t544 - qJ(5) * t655;
t531 = qJ(3) * t604 + (-qJ(4) * t1044 + t1094) * t615;
t530 = -pkin(8) * t686 + qJ(5) * t774 - t544;
t529 = -t1048 * t571 + t1051 * t579 - t1247;
t528 = -pkin(8) * t688 + t1166 * t774 - t545;
t527 = -pkin(8) * t545 - t1166 * t655;
t526 = -pkin(1) * t561 - pkin(2) * t603 + pkin(3) * t769 - qJ(4) * t616;
t525 = t1049 * t597 + t1052 * t538;
t524 = t1049 * t538 - t1052 * t597;
t523 = -t1048 * t563 + t1051 * t567 - t1264;
t522 = -t1048 * t560 + t1051 * t565 - t1285;
t521 = -t1048 * t554 + t1051 * t559 - t1247;
t520 = -pkin(1) * t573 - pkin(2) * t617 - pkin(3) * t1071 - qJ(4) * t663 - t1043 * t602 - t1045 * t586;
t519 = -qJ(3) * t575 - t1044 * t555 + t1046 * t564;
t518 = t1043 * t544 + t1045 * t545;
t517 = t1043 * t545 - t1045 * t544;
t516 = -pkin(1) * t568 - pkin(2) * t612 - pkin(3) * t748 - qJ(4) * t650 - t1043 * t596 - t1045 * t585;
t515 = t1044 * t655 + t1046 * t518;
t514 = t1044 * t518 - t1046 * t655;
t513 = -qJ(3) * t617 - t1044 * t546 + t1046 * t541;
t512 = -pkin(2) * t597 + qJ(3) * t576 + t1044 * t564 + t1046 * t555;
t511 = -qJ(3) * t612 - t1044 * t540 + t1046 * t536;
t510 = -pkin(1) * t537 - pkin(2) * t575 - qJ(4) * t598 + (t1087 + t1164) * t695;
t509 = -pkin(2) * t662 + qJ(3) * t618 + t1044 * t541 + t1046 * t546;
t508 = -pkin(2) * t649 + qJ(3) * t613 + t1044 * t536 + t1046 * t540;
t507 = -qJ(4) * t607 - t1043 * t528 + t1045 * t530;
t506 = -pkin(7) * t561 - t1048 * t531 + t1051 * t547;
t505 = -qJ(3) * t594 - t1044 * t548 + t1046 * t507;
t504 = -pkin(1) * t552 - pkin(2) * t594 - pkin(3) * t774 - qJ(4) * t609 - t1043 * t530 - t1045 * t528;
t503 = -t1048 * t514 + t1051 * t515;
t502 = t1048 * t515 + t1051 * t514;
t501 = -pkin(2) * t607 + qJ(3) * t595 + t1044 * t507 + t1046 * t548;
t500 = -qJ(4) * t517 - t1043 * t527 + t1045 * t532;
t499 = -pkin(3) * t517 - qJ(5) * t545 + t1166 * t544;
t498 = -pkin(7) * t573 - t1048 * t509 + t1051 * t513;
t497 = -pkin(7) * t537 - t1048 * t512 + t1051 * t519;
t496 = -pkin(7) * t568 - t1048 * t508 + t1051 * t511;
t495 = t1049 * t517 + t1052 * t503;
t494 = t1049 * t503 - t1052 * t517;
t493 = -pkin(7) * t552 - t1048 * t501 + t1051 * t505;
t492 = -pkin(1) * t502 - pkin(2) * t514 + pkin(3) * t655 - qJ(4) * t518 - t1043 * t532 - t1045 * t527;
t491 = -qJ(3) * t514 - t1044 * t499 + t1046 * t500;
t490 = -pkin(2) * t517 + qJ(3) * t515 + t1044 * t500 + t1046 * t499;
t489 = -pkin(7) * t502 - t1048 * t490 + t1051 * t491;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1016, -t1017, 0, t975, 0, 0, 0, 0, 0, 0, t935, t936, t966, t879, 0, 0, 0, 0, 0, 0, t766, t772, t719, t642, 0, 0, 0, 0, 0, 0, t1248, t639, t1238, t543, 0, 0, 0, 0, 0, 0, t1248, t1238, -t639, t525, 0, 0, 0, 0, 0, 0, t551, t558, t534, t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1017, -t1016, 0, t973, 0, 0, 0, 0, 0, 0, t933, t934, t965, t878, 0, 0, 0, 0, 0, 0, t763, t771, t718, t641, 0, 0, 0, 0, 0, 0, t1249, t637, t1239, t542, 0, 0, 0, 0, 0, 0, t1249, t1239, -t637, t524, 0, 0, 0, 0, 0, 0, t550, t557, t533, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t976, t977, 0, t907, 0, 0, 0, 0, 0, 0, t784, t825, t762, t651, 0, 0, 0, 0, 0, 0, t1236, -t664, t1214, t561, 0, 0, 0, 0, 0, 0, t1236, t1214, t664, t537, 0, 0, 0, 0, 0, 0, t568, t573, t552, t502; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1017, 0, -t1016, 0, t1074, -t997, -t973, -pkin(6) * t973, t1052 * t985 - t1079, -t1019 * t1049 + t1052 * t959, t1048 * t1102 + t1052 * t980, t1052 * t984 + t1079, t1049 * t1101 + t1052 * t978, t1009 * t1052 + t1035, -pkin(6) * t933 - t1049 * t921 + t1052 * t923, -pkin(6) * t934 - t1049 * t922 + t1052 * t924, -pkin(6) * t965 - t1052 * t907, -pkin(6) * t878 + (pkin(1) * t1049 - pkin(7) * t1052) * t907, t1052 * t834 + t1090, -t1049 * t952 + t1052 * t764, -t1049 * t919 + t1052 * t827, t1052 * t833 - t1090, t1049 * t918 + t1052 * t826, t1052 * t845 + t1035, -pkin(6) * t763 - t1049 * t699 + t1052 * t668, -pkin(6) * t771 - t1049 * t706 + t1052 * t694, -pkin(6) * t718 - t1049 * t707 + t1052 * t599, -pkin(6) * t641 - t1049 * t611 + t1052 * t590, t1200, t1286, t1275, t1215, -t1281, t1216, -t1049 * t587 + t1052 * t535 - t1272, -t1049 * t591 + t1052 * t539 - t1289, -t1049 * t566 + t1052 * t529 - t1265, -pkin(6) * t542 - t1049 * t526 + t1052 * t506, t1200, t1275, -t1286, t1216, t1281, t1215, -t1049 * t572 + t1052 * t523 - t1272, -t1049 * t549 + t1052 * t521 - t1265, -t1049 * t570 + t1052 * t522 + t1289, -pkin(6) * t524 - t1049 * t510 + t1052 * t497, -t1049 * t682 + t1052 * t589, -t1049 * t606 + t1052 * t556, -t1049 * t675 + t1052 * t577, -t1049 * t681 + t1052 * t588, -t1049 * t676 + t1052 * t578, -t1049 * t708 + t1052 * t619, -pkin(6) * t550 - t1049 * t516 + t1052 * t496, -pkin(6) * t557 - t1049 * t520 + t1052 * t498, -pkin(6) * t533 - t1049 * t504 + t1052 * t493, -pkin(6) * t494 - t1049 * t492 + t1052 * t489; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1016, 0, t1017, 0, t997, t1074, t975, pkin(6) * t975, t1049 * t985 + t1078, t1019 * t1052 + t1049 * t959, -t1048 * t1100 + t1049 * t980, t1049 * t984 - t1078, t1049 * t978 - t1051 * t1100, t1009 * t1049 - t1099, pkin(6) * t935 + t1049 * t923 + t1052 * t921, pkin(6) * t936 + t1049 * t924 + t1052 * t922, pkin(6) * t966 - t1049 * t907, pkin(6) * t879 + (-pkin(1) * t1052 - pkin(7) * t1049) * t907, t1049 * t834 - t1089, t1049 * t764 + t1052 * t952, t1049 * t827 + t1052 * t919, t1049 * t833 + t1089, t1049 * t826 - t1052 * t918, t1049 * t845 - t1099, pkin(6) * t766 + t1049 * t668 + t1052 * t699, pkin(6) * t772 + t1049 * t694 + t1052 * t706, pkin(6) * t719 + t1049 * t599 + t1052 * t707, pkin(6) * t642 + t1049 * t590 + t1052 * t611, t1203, t1287, t1276, t1217, -t1282, t1218, t1049 * t535 + t1052 * t587 + t1273, t1049 * t539 + t1052 * t591 + t1288, t1049 * t529 + t1052 * t566 + t1266, pkin(6) * t543 + t1049 * t506 + t1052 * t526, t1203, t1276, -t1287, t1218, t1282, t1217, t1049 * t523 + t1052 * t572 + t1273, t1049 * t521 + t1052 * t549 + t1266, t1049 * t522 + t1052 * t570 - t1288, pkin(6) * t525 + t1049 * t497 + t1052 * t510, t1049 * t589 + t1052 * t682, t1049 * t556 + t1052 * t606, t1049 * t577 + t1052 * t675, t1049 * t588 + t1052 * t681, t1049 * t578 + t1052 * t676, t1049 * t619 + t1052 * t708, pkin(6) * t551 + t1049 * t496 + t1052 * t516, pkin(6) * t558 + t1049 * t498 + t1052 * t520, pkin(6) * t534 + t1049 * t493 + t1052 * t504, pkin(6) * t495 + t1049 * t489 + t1052 * t492; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1022, t1023, 0, 0, (t1013 + t1088) * t1048, t1012 * t1051 + t1014 * t1048, t1027 * t1051 + t1109, t1110, t1029 * t1048 + t1107, 0, pkin(1) * t1014 + pkin(7) * t979 + t1111, -pkin(1) * t1012 + pkin(7) * t981 - t1112, pkin(1) * t1018 + pkin(7) * t1015 + t909, pkin(1) * t1007 + pkin(7) * t909, t1048 * t904 + t1051 * t903, t1048 * t839 + t1051 * t837, t1048 * t888 + t1051 * t885, t1048 * t902 + t1051 * t901, t1048 * t887 + t1051 * t884, t1048 * t939 + t1051 * t938, -pkin(1) * t916 + pkin(7) * t785 + t1048 * t816 + t1051 * t773, pkin(1) * t920 + pkin(7) * t828 + t1048 * t835 + t1051 * t783, -pkin(1) * t915 + pkin(7) * t765 + t1048 * t696 + t1051 * t693, pkin(1) * t914 + pkin(7) * t652 - qJ(3) * t1131 + t1051 * t705, t1171, -t1280, t1270, t1193, t1274, t1195, t1048 * t592 + t1051 * t583 + t1252, t1048 * t593 + t1051 * t584 - t1283, t1048 * t579 + t1051 * t571 + t1241, -pkin(1) * t615 + pkin(7) * t562 + t1048 * t547 + t1051 * t531, t1171, t1270, t1280, t1195, -t1274, t1193, t1048 * t567 + t1051 * t563 + t1252, t1048 * t559 + t1051 * t554 + t1241, t1048 * t565 + t1051 * t560 + t1283, -pkin(1) * t597 + pkin(7) * t538 + t1048 * t519 + t1051 * t512, t1048 * t648 + t1051 * t646, t1048 * t601 + t1051 * t600, t1048 * t624 + t1051 * t622, t1048 * t647 + t1051 * t645, t1048 * t625 + t1051 * t623, t1048 * t701 + t1051 * t700, -pkin(1) * t649 + pkin(7) * t569 + t1048 * t511 + t1051 * t508, -pkin(1) * t662 + pkin(7) * t574 + t1048 * t513 + t1051 * t509, -pkin(1) * t607 + pkin(7) * t553 + t1048 * t505 + t1051 * t501, -pkin(1) * t517 + pkin(7) * t503 + t1048 * t491 + t1051 * t490;];
tauB_reg  = t1;
