% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:14:56
% EndTime: 2019-05-06 08:15:04
% DurationCPUTime: 9.11s
% Computational Cost: add. (30042->311), mult. (72390->388), div. (0->0), fcn. (51718->10), ass. (0->220)
t2445 = cos(qJ(2));
t2486 = qJD(1) * t2445;
t2468 = qJD(2) * t2486;
t2442 = sin(qJ(2));
t2470 = t2442 * qJDD(1);
t2412 = t2468 + t2470;
t2431 = t2445 * qJDD(1);
t2487 = qJD(1) * t2442;
t2469 = qJD(2) * t2487;
t2413 = t2431 - t2469;
t2438 = sin(pkin(9));
t2440 = cos(pkin(9));
t2375 = t2412 * t2438 - t2440 * t2413;
t2405 = t2438 * t2486 + t2440 * t2487;
t2437 = sin(pkin(10));
t2439 = cos(pkin(10));
t2383 = -qJD(2) * t2439 + t2437 * t2405;
t2385 = qJD(2) * t2437 + t2405 * t2439;
t2479 = t2383 * t2385;
t2327 = t2375 + t2479;
t2382 = t2385 ^ 2;
t2403 = t2438 * t2487 - t2440 * t2486;
t2491 = t2403 ^ 2;
t2500 = -t2382 - t2491;
t2302 = t2327 * t2439 + t2437 * t2500;
t2376 = t2440 * t2412 + t2438 * t2413;
t2461 = qJDD(2) * t2437 + t2376 * t2439;
t2478 = t2383 * t2403;
t2455 = t2461 - t2478;
t2276 = t2302 * t2438 + t2440 * t2455;
t2278 = t2302 * t2440 - t2438 * t2455;
t2259 = t2276 * t2442 - t2278 * t2445;
t2300 = t2327 * t2437 - t2439 * t2500;
t2443 = sin(qJ(1));
t2446 = cos(qJ(1));
t2529 = t2259 * t2443 + t2300 * t2446;
t2528 = t2259 * t2446 - t2300 * t2443;
t2253 = t2276 * t2445 + t2278 * t2442;
t2323 = t2461 + t2478;
t2464 = -t2439 * qJDD(2) + t2376 * t2437;
t2477 = t2403 * t2385;
t2458 = -t2464 + t2477;
t2498 = -t2323 * t2439 + t2437 * t2458;
t2493 = t2383 ^ 2;
t2334 = t2382 + t2493;
t2497 = t2323 * t2437 + t2439 * t2458;
t2514 = t2334 * t2440 + t2438 * t2497;
t2515 = -t2334 * t2438 + t2440 * t2497;
t2518 = -t2442 * t2514 + t2445 * t2515;
t2527 = t2443 * t2518 - t2446 * t2498;
t2328 = t2375 - t2479;
t2499 = -t2491 - t2493;
t2507 = t2328 * t2439 + t2437 * t2499;
t2457 = t2464 + t2477;
t2506 = -t2328 * t2437 + t2439 * t2499;
t2512 = t2438 * t2457 + t2440 * t2506;
t2513 = t2438 * t2506 - t2440 * t2457;
t2521 = -t2442 * t2513 + t2445 * t2512;
t2526 = t2443 * t2521 - t2446 * t2507;
t2525 = t2443 * t2498 + t2446 * t2518;
t2524 = t2443 * t2507 + t2446 * t2521;
t2520 = t2442 * t2512 + t2445 * t2513;
t2519 = t2442 * t2515 + t2445 * t2514;
t2400 = -qJD(6) + t2403;
t2501 = qJD(6) - t2400;
t2398 = qJD(2) * t2403;
t2359 = t2398 - t2376;
t2435 = t2445 ^ 2;
t2447 = qJD(1) ^ 2;
t2459 = qJD(2) * pkin(2) - qJ(3) * t2487;
t2421 = t2443 * g(1) - t2446 * g(2);
t2460 = qJDD(1) * pkin(1) + t2421;
t2354 = t2413 * pkin(2) + (qJ(3) * t2435 + pkin(7)) * t2447 - t2459 * t2487 - qJDD(3) + t2460;
t2496 = qJD(2) ^ 2;
t2441 = sin(qJ(6));
t2444 = cos(qJ(6));
t2345 = -t2444 * t2383 + t2385 * t2441;
t2495 = t2345 ^ 2;
t2347 = t2383 * t2441 + t2385 * t2444;
t2494 = t2347 ^ 2;
t2492 = t2400 ^ 2;
t2490 = t2405 ^ 2;
t2489 = -2 * qJD(3);
t2488 = -2 * qJD(4);
t2485 = qJD(2) * t2405;
t2480 = t2345 * t2347;
t2476 = t2403 * t2405;
t2475 = t2435 * t2447;
t2474 = t2442 * t2447;
t2349 = pkin(4) * t2383 - qJ(5) * t2385;
t2473 = (2 * qJD(4)) + t2349;
t2472 = qJD(6) + t2400;
t2434 = t2442 ^ 2;
t2471 = t2434 + t2435;
t2422 = -g(1) * t2446 - g(2) * t2443;
t2453 = -pkin(1) * t2447 + qJDD(1) * pkin(7) + t2422;
t2391 = -t2442 * g(3) + t2445 * t2453;
t2350 = -pkin(2) * t2475 + t2413 * qJ(3) - qJD(2) * t2459 + t2391;
t2451 = t2442 * t2453;
t2449 = -t2451 - t2412 * qJ(3) + qJDD(2) * pkin(2) + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2474 - g(3)) * t2445;
t2313 = t2440 * t2350 + t2403 * t2489 + t2438 * t2449;
t2368 = pkin(3) * t2403 - qJ(4) * t2405;
t2292 = -pkin(3) * t2496 + qJDD(2) * qJ(4) - t2368 * t2403 + t2313;
t2356 = t2375 + t2485;
t2448 = t2356 * pkin(3) + qJ(4) * t2359 - t2354;
t2265 = t2439 * t2292 + t2383 * t2488 + t2437 * t2448;
t2466 = t2437 * t2292 - t2439 * t2448;
t2465 = t2438 * t2350 - t2440 * t2449;
t2463 = -pkin(5) * t2403 - pkin(8) * t2385;
t2462 = qJDD(6) - t2375;
t2456 = -t2375 * pkin(4) - qJ(5) * t2491 + qJDD(5) + t2466;
t2454 = -t2441 * t2461 + t2444 * t2464;
t2245 = -pkin(4) * t2491 + t2375 * qJ(5) + 0.2e1 * qJD(5) * t2403 - t2383 * t2349 + t2265;
t2291 = qJDD(4) - t2496 * qJ(4) - qJDD(2) * pkin(3) + ((2 * qJD(3)) + t2368) * t2405 + t2465;
t2450 = -t2441 * t2464 - t2444 * t2461;
t2263 = t2464 * pkin(4) + (pkin(4) * t2403 - 0.2e1 * qJD(5)) * t2385 + t2291 - t2455 * qJ(5);
t2428 = t2445 * t2474;
t2427 = -t2475 - t2496;
t2426 = -t2434 * t2447 - t2496;
t2420 = -qJDD(2) + t2428;
t2419 = qJDD(2) + t2428;
t2418 = t2471 * t2447;
t2417 = -qJDD(1) * t2443 - t2446 * t2447;
t2416 = qJDD(1) * t2446 - t2443 * t2447;
t2415 = t2471 * qJDD(1);
t2414 = t2431 - 0.2e1 * t2469;
t2411 = 0.2e1 * t2468 + t2470;
t2409 = t2447 * pkin(7) + t2460;
t2393 = -t2490 - t2496;
t2390 = -t2445 * g(3) - t2451;
t2389 = t2420 * t2445 - t2426 * t2442;
t2388 = -t2419 * t2442 + t2427 * t2445;
t2387 = t2420 * t2442 + t2426 * t2445;
t2386 = t2419 * t2445 + t2427 * t2442;
t2371 = -qJDD(2) - t2476;
t2370 = qJDD(2) - t2476;
t2369 = -t2491 - t2496;
t2358 = -t2398 - t2376;
t2357 = -t2375 + t2485;
t2355 = -t2490 - t2491;
t2352 = -t2390 * t2442 + t2391 * t2445;
t2351 = t2390 * t2445 + t2391 * t2442;
t2340 = t2371 * t2440 - t2393 * t2438;
t2339 = t2371 * t2438 + t2393 * t2440;
t2332 = t2369 * t2440 - t2370 * t2438;
t2331 = t2369 * t2438 + t2370 * t2440;
t2319 = -t2492 - t2494;
t2318 = t2357 * t2440 - t2358 * t2438;
t2317 = t2357 * t2438 + t2358 * t2440;
t2316 = -t2339 * t2442 + t2340 * t2445;
t2315 = t2339 * t2445 + t2340 * t2442;
t2314 = -t2492 - t2495;
t2312 = t2405 * t2489 - t2465;
t2311 = t2462 - t2480;
t2310 = -t2462 - t2480;
t2299 = -t2331 * t2442 + t2332 * t2445;
t2298 = t2331 * t2445 + t2332 * t2442;
t2293 = -t2494 - t2495;
t2289 = -t2317 * t2442 + t2318 * t2445;
t2288 = t2317 * t2445 + t2318 * t2442;
t2287 = t2345 * t2472 + t2450;
t2286 = -t2345 * t2501 - t2450;
t2285 = -t2347 * t2472 + t2454;
t2284 = t2347 * t2501 - t2454;
t2275 = t2310 * t2444 - t2319 * t2441;
t2274 = t2310 * t2441 + t2319 * t2444;
t2269 = -t2312 * t2438 + t2313 * t2440;
t2268 = t2312 * t2440 + t2313 * t2438;
t2267 = -t2311 * t2441 + t2314 * t2444;
t2266 = t2311 * t2444 + t2314 * t2441;
t2264 = t2385 * t2488 - t2466;
t2262 = t2285 * t2444 - t2287 * t2441;
t2261 = t2285 * t2441 + t2287 * t2444;
t2252 = t2274 * t2437 + t2275 * t2439;
t2251 = -t2274 * t2439 + t2275 * t2437;
t2250 = t2473 * t2385 + t2456;
t2244 = pkin(5) * t2464 + pkin(8) * t2493 - t2385 * t2463 + t2263;
t2243 = -t2268 * t2442 + t2269 * t2445;
t2242 = t2268 * t2445 + t2269 * t2442;
t2241 = t2266 * t2437 + t2267 * t2439;
t2240 = -t2266 * t2439 + t2267 * t2437;
t2239 = -pkin(5) * t2493 + pkin(8) * t2464 + t2403 * t2463 + t2245;
t2238 = -t2375 * pkin(5) - t2323 * pkin(8) + (pkin(5) * t2383 + t2473) * t2385 + t2456;
t2237 = t2252 * t2440 - t2286 * t2438;
t2236 = t2252 * t2438 + t2286 * t2440;
t2235 = -t2264 * t2437 + t2265 * t2439;
t2234 = t2264 * t2439 + t2265 * t2437;
t2233 = t2241 * t2440 - t2284 * t2438;
t2232 = t2241 * t2438 + t2284 * t2440;
t2231 = t2261 * t2437 + t2262 * t2439;
t2230 = -t2261 * t2439 + t2262 * t2437;
t2229 = t2235 * t2440 + t2291 * t2438;
t2228 = t2235 * t2438 - t2291 * t2440;
t2227 = t2245 * t2439 + t2250 * t2437;
t2226 = t2245 * t2437 - t2250 * t2439;
t2225 = t2231 * t2440 - t2293 * t2438;
t2224 = t2231 * t2438 + t2293 * t2440;
t2223 = t2238 * t2441 + t2239 * t2444;
t2222 = t2238 * t2444 - t2239 * t2441;
t2221 = t2227 * t2440 + t2263 * t2438;
t2220 = t2227 * t2438 - t2263 * t2440;
t2219 = -t2236 * t2442 + t2237 * t2445;
t2218 = t2236 * t2445 + t2237 * t2442;
t2217 = -t2232 * t2442 + t2233 * t2445;
t2216 = t2232 * t2445 + t2233 * t2442;
t2215 = -t2228 * t2442 + t2229 * t2445;
t2214 = t2228 * t2445 + t2229 * t2442;
t2213 = -t2224 * t2442 + t2225 * t2445;
t2212 = t2224 * t2445 + t2225 * t2442;
t2211 = -t2222 * t2441 + t2223 * t2444;
t2210 = t2222 * t2444 + t2223 * t2441;
t2209 = -t2220 * t2442 + t2221 * t2445;
t2208 = t2220 * t2445 + t2221 * t2442;
t2207 = t2210 * t2437 + t2211 * t2439;
t2206 = -t2210 * t2439 + t2211 * t2437;
t2205 = t2207 * t2440 + t2244 * t2438;
t2204 = t2207 * t2438 - t2244 * t2440;
t2203 = -t2204 * t2442 + t2205 * t2445;
t2202 = t2204 * t2445 + t2205 * t2442;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2417, -t2416, 0, -t2421 * t2443 + t2422 * t2446, 0, 0, 0, 0, 0, 0, t2388 * t2446 - t2414 * t2443, t2389 * t2446 + t2411 * t2443, t2415 * t2446 - t2418 * t2443, t2352 * t2446 - t2409 * t2443, 0, 0, 0, 0, 0, 0, t2299 * t2446 + t2356 * t2443, t2316 * t2446 - t2359 * t2443, t2289 * t2446 + t2355 * t2443, t2243 * t2446 - t2354 * t2443, 0, 0, 0, 0, 0, 0, t2524, t2528, t2525, t2215 * t2446 + t2234 * t2443, 0, 0, 0, 0, 0, 0, t2524, t2525, -t2528, t2209 * t2446 + t2226 * t2443, 0, 0, 0, 0, 0, 0, t2217 * t2446 + t2240 * t2443, t2219 * t2446 + t2251 * t2443, t2213 * t2446 + t2230 * t2443, t2203 * t2446 + t2206 * t2443; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2416, t2417, 0, t2421 * t2446 + t2422 * t2443, 0, 0, 0, 0, 0, 0, t2388 * t2443 + t2414 * t2446, t2389 * t2443 - t2411 * t2446, t2415 * t2443 + t2418 * t2446, t2352 * t2443 + t2409 * t2446, 0, 0, 0, 0, 0, 0, t2299 * t2443 - t2356 * t2446, t2316 * t2443 + t2359 * t2446, t2289 * t2443 - t2355 * t2446, t2243 * t2443 + t2354 * t2446, 0, 0, 0, 0, 0, 0, t2526, t2529, t2527, t2215 * t2443 - t2234 * t2446, 0, 0, 0, 0, 0, 0, t2526, t2527, -t2529, t2209 * t2443 - t2226 * t2446, 0, 0, 0, 0, 0, 0, t2217 * t2443 - t2240 * t2446, t2219 * t2443 - t2251 * t2446, t2213 * t2443 - t2230 * t2446, t2203 * t2443 - t2206 * t2446; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2386, t2387, 0, t2351, 0, 0, 0, 0, 0, 0, t2298, t2315, t2288, t2242, 0, 0, 0, 0, 0, 0, t2520, -t2253, t2519, t2214, 0, 0, 0, 0, 0, 0, t2520, t2519, t2253, t2208, 0, 0, 0, 0, 0, 0, t2216, t2218, t2212, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2447, -qJDD(1), 0, t2422, 0, 0, 0, 0, 0, 0, t2388, t2389, t2415, t2352, 0, 0, 0, 0, 0, 0, t2299, t2316, t2289, t2243, 0, 0, 0, 0, 0, 0, t2521, t2259, t2518, t2215, 0, 0, 0, 0, 0, 0, t2521, t2518, -t2259, t2209, 0, 0, 0, 0, 0, 0, t2217, t2219, t2213, t2203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2447, 0, t2421, 0, 0, 0, 0, 0, 0, t2414, -t2411, t2418, t2409, 0, 0, 0, 0, 0, 0, -t2356, t2359, -t2355, t2354, 0, 0, 0, 0, 0, 0, -t2507, t2300, -t2498, -t2234, 0, 0, 0, 0, 0, 0, -t2507, -t2498, -t2300, -t2226, 0, 0, 0, 0, 0, 0, -t2240, -t2251, -t2230, -t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2386, t2387, 0, t2351, 0, 0, 0, 0, 0, 0, t2298, t2315, t2288, t2242, 0, 0, 0, 0, 0, 0, t2520, -t2253, t2519, t2214, 0, 0, 0, 0, 0, 0, t2520, t2519, t2253, t2208, 0, 0, 0, 0, 0, 0, t2216, t2218, t2212, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2427, t2420, t2431, t2391, 0, 0, 0, 0, 0, 0, t2332, t2340, t2318, t2269, 0, 0, 0, 0, 0, 0, t2512, -t2278, t2515, t2229, 0, 0, 0, 0, 0, 0, t2512, t2515, t2278, t2221, 0, 0, 0, 0, 0, 0, t2233, t2237, t2225, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2419, t2426, -t2470, t2390, 0, 0, 0, 0, 0, 0, t2331, t2339, t2317, t2268, 0, 0, 0, 0, 0, 0, t2513, -t2276, t2514, t2228, 0, 0, 0, 0, 0, 0, t2513, t2514, t2276, t2220, 0, 0, 0, 0, 0, 0, t2232, t2236, t2224, t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2414, t2411, -t2418, -t2409, 0, 0, 0, 0, 0, 0, t2356, -t2359, t2355, -t2354, 0, 0, 0, 0, 0, 0, t2507, -t2300, t2498, t2234, 0, 0, 0, 0, 0, 0, t2507, t2498, t2300, t2226, 0, 0, 0, 0, 0, 0, t2240, t2251, t2230, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2369, t2371, t2357, t2313, 0, 0, 0, 0, 0, 0, t2506, -t2302, t2497, t2235, 0, 0, 0, 0, 0, 0, t2506, t2497, t2302, t2227, 0, 0, 0, 0, 0, 0, t2241, t2252, t2231, t2207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2370, t2393, t2358, t2312, 0, 0, 0, 0, 0, 0, -t2457, -t2455, t2334, -t2291, 0, 0, 0, 0, 0, 0, -t2457, t2334, t2455, -t2263, 0, 0, 0, 0, 0, 0, t2284, t2286, t2293, -t2244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, -t2359, t2355, -t2354, 0, 0, 0, 0, 0, 0, t2507, -t2300, t2498, t2234, 0, 0, 0, 0, 0, 0, t2507, t2498, t2300, t2226, 0, 0, 0, 0, 0, 0, t2240, t2251, t2230, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2499, -t2327, t2458, t2265, 0, 0, 0, 0, 0, 0, t2499, t2458, t2327, t2245, 0, 0, 0, 0, 0, 0, t2267, t2275, t2262, t2211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2328, t2500, -t2323, t2264, 0, 0, 0, 0, 0, 0, t2328, -t2323, -t2500, -t2250, 0, 0, 0, 0, 0, 0, -t2266, -t2274, -t2261, -t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2457, t2455, -t2334, t2291, 0, 0, 0, 0, 0, 0, t2457, -t2334, -t2455, t2263, 0, 0, 0, 0, 0, 0, -t2284, -t2286, -t2293, t2244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2499, t2458, t2327, t2245, 0, 0, 0, 0, 0, 0, t2267, t2275, t2262, t2211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2457, -t2334, -t2455, t2263, 0, 0, 0, 0, 0, 0, -t2284, -t2286, -t2293, t2244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2328, t2323, t2500, t2250, 0, 0, 0, 0, 0, 0, t2266, t2274, t2261, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2314, t2310, t2285, t2223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, t2319, t2287, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2284, t2286, t2293, -t2244;];
f_new_reg  = t1;
