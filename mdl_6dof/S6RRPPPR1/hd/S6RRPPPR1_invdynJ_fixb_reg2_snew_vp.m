% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPPR1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:13:06
% EndTime: 2019-05-06 08:13:24
% DurationCPUTime: 12.19s
% Computational Cost: add. (33947->555), mult. (81587->745), div. (0->0), fcn. (58141->10), ass. (0->328)
t297 = cos(pkin(10));
t295 = sin(pkin(10));
t296 = sin(pkin(9));
t298 = cos(pkin(9));
t302 = cos(qJ(2));
t358 = qJD(1) * t302;
t300 = sin(qJ(2));
t359 = qJD(1) * t300;
t270 = t296 * t358 + t298 * t359;
t249 = -qJD(2) * t297 + t270 * t295;
t251 = qJD(2) * t295 + t270 * t297;
t204 = t251 * t249;
t287 = t300 * qJDD(1);
t349 = qJD(1) * qJD(2);
t338 = t302 * t349;
t277 = t287 + t338;
t337 = t300 * t349;
t348 = t302 * qJDD(1);
t315 = -t337 + t348;
t239 = t277 * t296 - t298 * t315;
t426 = t204 + t239;
t381 = t426 * t295;
t248 = t251 ^ 2;
t268 = t296 * t359 - t298 * t358;
t411 = t268 ^ 2;
t424 = -t248 - t411;
t123 = -t297 * t424 + t381;
t380 = t426 * t297;
t125 = t295 * t424 + t380;
t240 = t277 * t298 + t296 * t315;
t227 = qJDD(2) * t295 + t240 * t297;
t369 = t249 * t268;
t425 = t227 - t369;
t91 = t125 * t296 + t298 * t425;
t93 = t125 * t298 - t296 * t425;
t488 = -pkin(1) * t123 - pkin(7) * (t300 * t91 - t302 * t93);
t487 = qJ(3) * t91;
t486 = pkin(2) * t91 + qJ(4) * t125;
t485 = -pkin(2) * t123 + qJ(3) * t93;
t412 = t249 ^ 2;
t218 = t412 - t411;
t148 = t218 * t297 - t381;
t330 = -qJDD(2) * t297 + t240 * t295;
t366 = t268 * t251;
t319 = -t330 + t366;
t483 = t300 * (t148 * t298 + t296 * t319) + t302 * (t148 * t296 - t298 * t319);
t318 = t330 + t366;
t384 = t425 * t295;
t119 = t297 * t318 + t384;
t201 = t412 - t248;
t482 = t300 * (t119 * t298 + t201 * t296) + t302 * (t119 * t296 - t201 * t298);
t479 = pkin(3) * t123;
t478 = qJ(4) * t123;
t165 = t369 + t227;
t219 = -t248 + t411;
t331 = -t239 + t204;
t378 = t331 * t297;
t467 = -t219 * t295 - t378;
t472 = t300 * (t165 * t296 + t298 * t467) + t302 * (-t165 * t298 + t296 * t467);
t379 = t331 * t295;
t422 = -t411 - t412;
t433 = t297 * t422 + t379;
t447 = t296 * t433 - t298 * t318;
t471 = qJ(3) * t447;
t178 = -t412 - t248;
t417 = t165 * t295 + t297 * t319;
t449 = -t178 * t298 + t296 * t417;
t470 = qJ(3) * t449;
t450 = t178 * t296 + t298 * t417;
t469 = qJ(3) * t450;
t468 = t219 * t297 - t379;
t466 = pkin(2) * t447 + qJ(4) * t433;
t465 = pkin(2) * t449 - pkin(3) * t178 + qJ(4) * t417;
t434 = t295 * t422 - t378;
t446 = t296 * t318 + t298 * t433;
t464 = -pkin(2) * t434 + qJ(3) * t446;
t463 = pkin(7) * (-t300 * t449 + t302 * t450);
t462 = pkin(7) * (-t300 * t447 + t302 * t446) - pkin(1) * t434;
t459 = pkin(3) * t434;
t457 = qJ(4) * t434;
t456 = qJ(5) * t425;
t448 = t218 * t295 + t380;
t445 = 2 * qJD(5);
t418 = -t165 * t297 + t295 * t319;
t443 = qJ(4) * t418;
t238 = t270 * t268;
t421 = -t238 + qJDD(2);
t440 = t296 * t421;
t436 = t298 * t421;
t432 = -t295 * t318 + t297 * t425;
t293 = t302 ^ 2;
t405 = sin(qJ(1));
t406 = cos(qJ(1));
t327 = g(1) * t405 - g(2) * t406;
t340 = t302 * pkin(2) + pkin(1);
t399 = qJD(2) * pkin(2);
t205 = qJD(1) * ((qJ(3) * t293 + pkin(7)) * qJD(1) - t300 * t399) + t340 * qJDD(1) - qJDD(3) - (-qJ(3) * t359 + t399) * t359 + t327;
t431 = pkin(7) + qJ(3);
t299 = sin(qJ(6));
t235 = qJDD(6) - t239;
t301 = cos(qJ(6));
t195 = -t249 * t301 + t251 * t299;
t197 = t249 * t299 + t251 * t301;
t376 = t197 * t195;
t311 = t235 - t376;
t428 = t299 * t311;
t427 = t301 * t311;
t357 = qJD(2) * t270;
t207 = t239 + t357;
t260 = qJD(2) * t268;
t210 = -t240 + t260;
t199 = pkin(4) * t249 - qJ(5) * t251;
t314 = g(1) * t406 + g(2) * t405;
t401 = t300 * g(3);
t409 = qJD(2) ^ 2;
t410 = qJD(1) ^ 2;
t200 = -t409 * pkin(2) - t401 + (qJDD(1) * t431 - t314) * t302 + (-pkin(1) * t302 - pkin(2) * t293) * t410;
t393 = qJDD(1) * pkin(7);
t308 = -t314 + t393;
t400 = t302 * g(3);
t303 = -t300 * t308 - t400 - t277 * qJ(3) + qJDD(2) * pkin(2) + (qJD(2) * t302 * qJ(3) + t340 * t359) * qJD(1);
t143 = -0.2e1 * qJD(3) * t268 + t200 * t298 + t296 * t303;
t228 = pkin(3) * t268 - qJ(4) * t270;
t115 = -pkin(3) * t409 + qJDD(2) * qJ(4) - t228 * t268 + t143;
t131 = pkin(3) * t207 + qJ(4) * t210 - t205;
t361 = t115 * t297 + t131 * t295;
t423 = qJ(5) * t239 - t199 * t249 + t268 * t445 + t361;
t420 = t330 * pkin(4) - t456;
t334 = t295 * t115 - t131 * t297;
t312 = -pkin(4) * t239 - qJ(5) * t411 + qJDD(5) + t334;
t306 = -pkin(8) * t165 + t312;
t408 = 2 * qJD(4);
t350 = t408 + t199;
t419 = t306 - t239 * pkin(5) + (pkin(5) * t249 + t350) * t251;
t364 = t268 * t297;
t341 = t249 * t364;
t309 = t295 * t330 + t341;
t342 = t298 * t204;
t343 = t296 * t204;
t414 = t300 * (t298 * t309 - t343) + t302 * (t296 * t309 + t342);
t233 = t298 * t239;
t365 = t268 * t295;
t212 = t251 * t365;
t325 = t212 - t341;
t370 = t239 * t296;
t413 = t300 * (t298 * t325 + t370) + t302 * (t296 * t325 - t233);
t193 = t195 ^ 2;
t194 = t197 ^ 2;
t263 = -qJD(6) + t268;
t261 = t263 ^ 2;
t267 = t270 ^ 2;
t407 = pkin(4) + pkin(5);
t404 = pkin(3) * t296;
t403 = pkin(4) * t297;
t326 = -pkin(5) * t268 - pkin(8) * t251;
t333 = t296 * t200 - t298 * t303;
t313 = -qJDD(2) * pkin(3) - qJ(4) * t409 + qJDD(4) + t333;
t114 = (0.2e1 * qJD(3) + t228) * t270 + t313;
t73 = (pkin(4) * t268 - (2 * qJD(5))) * t251 + t114 + t420;
t58 = pkin(5) * t330 + pkin(8) * t412 - t251 * t326 + t73;
t398 = t299 * t58;
t353 = qJD(3) * t270;
t142 = t333 + 0.2e1 * t353;
t83 = -t142 * t298 + t143 * t296;
t397 = t300 * t83;
t352 = qJD(4) * t249;
t243 = -0.2e1 * t352;
t320 = t243 + t423;
t59 = -pkin(4) * t411 + t320;
t51 = -pkin(5) * t412 + pkin(8) * t330 + t268 * t326 + t59;
t396 = t301 * t51;
t395 = t301 * t58;
t394 = qJ(5) * t297;
t392 = t114 * t295;
t391 = t114 * t297;
t136 = -t235 - t376;
t390 = t136 * t299;
t389 = t136 * t301;
t377 = t195 * t263;
t375 = t205 * t296;
t374 = t205 * t298;
t230 = qJDD(2) + t238;
t372 = t230 * t296;
t371 = t230 * t298;
t368 = t263 * t299;
t367 = t263 * t301;
t284 = t302 * t410 * t300;
t363 = t300 * (qJDD(2) + t284);
t362 = t302 * (qJDD(2) - t284);
t356 = qJD(2) * t296;
t355 = qJD(2) * t298;
t347 = t251 * t408;
t345 = t296 * t376;
t344 = t298 * t376;
t76 = t243 + t361;
t140 = -qJD(6) * t195 + t227 * t301 + t299 * t330;
t339 = -pkin(3) * t298 - pkin(2);
t336 = -qJ(5) * t295 - pkin(3);
t75 = t334 + t347;
t45 = t295 * t75 + t297 * t76;
t24 = t299 * t51 - t301 * t419;
t84 = t142 * t296 + t143 * t298;
t332 = t299 * t227 - t301 * t330;
t307 = -t410 * pkin(1) + t308;
t252 = t300 * t307 + t400;
t253 = t302 * t307 - t401;
t329 = t300 * t252 + t253 * t302;
t324 = t249 * t365 - t297 * t330;
t25 = t299 * t419 + t396;
t15 = -t24 * t301 + t25 * t299;
t16 = t299 * t24 + t301 * t25;
t44 = t295 * t76 - t297 * t75;
t322 = t140 + t377;
t208 = -t239 + t357;
t317 = (-t249 * t295 - t251 * t297) * t268;
t278 = -0.2e1 * t337 + t348;
t310 = (-qJD(6) - t263) * t197 - t332;
t60 = t251 * t350 + t312;
t160 = t227 * t297 - t212;
t305 = t300 * (t160 * t298 + t343) + t302 * (t160 * t296 - t342);
t259 = -0.2e1 * t353;
t304 = -t270 * t228 + t251 * t445 + t259 - t313 - t420;
t292 = t300 ^ 2;
t289 = t293 * t410;
t288 = t292 * t410;
t276 = t287 + 0.2e1 * t338;
t274 = qJDD(1) * pkin(1) + pkin(7) * t410 + t327;
t256 = -t267 - t409;
t255 = -t267 + t409;
t254 = t411 - t409;
t229 = -t411 - t409;
t209 = t260 + t240;
t206 = -t411 - t267;
t187 = -t256 * t296 - t371;
t186 = t256 * t298 - t372;
t181 = -t194 + t261;
t180 = t193 - t261;
t177 = t229 * t298 - t440;
t176 = t229 * t296 + t436;
t159 = t227 * t295 + t251 * t364;
t152 = -t194 - t261;
t151 = t208 * t298 + t209 * t296;
t150 = t208 * t296 - t209 * t298;
t149 = t194 - t193;
t144 = -t261 - t193;
t139 = -qJD(6) * t197 - t332;
t128 = (t195 * t301 - t197 * t299) * t263;
t127 = (-t195 * t299 - t197 * t301) * t263;
t116 = -t193 - t194;
t111 = -t140 + t377;
t107 = (qJD(6) - t263) * t197 + t332;
t106 = t140 * t301 + t197 * t368;
t105 = -t140 * t299 + t197 * t367;
t104 = -t139 * t299 - t195 * t367;
t103 = -t139 * t301 + t195 * t368;
t102 = t180 * t301 + t390;
t101 = -t181 * t299 + t427;
t100 = -t180 * t299 + t389;
t99 = -t181 * t301 - t428;
t90 = -t152 * t299 + t389;
t89 = t152 * t301 + t390;
t82 = t144 * t301 - t428;
t81 = t144 * t299 + t427;
t80 = -t127 * t295 + t128 * t297;
t79 = -pkin(3) * t418 + pkin(4) * t165 - qJ(5) * t319;
t78 = t391 + t478;
t77 = t392 - t457;
t72 = -t111 * t299 + t301 * t310;
t71 = -t107 * t301 - t299 * t322;
t70 = t111 * t301 + t299 * t310;
t69 = t107 * t299 - t301 * t322;
t68 = -t105 * t295 + t106 * t297;
t67 = -t103 * t295 + t104 * t297;
t66 = -t100 * t295 + t102 * t297;
t65 = t101 * t297 - t295 * t99;
t64 = (-t318 - t366) * pkin(4) + t304;
t63 = -pkin(4) * t366 + t304 + t456;
t62 = t295 * t89 + t297 * t90;
t61 = t295 * t90 - t297 * t89;
t57 = t76 + t479;
t56 = t75 - t459;
t55 = t295 * t81 + t297 * t82;
t54 = t295 * t82 - t297 * t81;
t53 = -qJ(5) * t178 + t60;
t52 = (-t178 - t411) * pkin(4) + t320;
t49 = -t295 * t64 - t318 * t394 - t457;
t48 = -pkin(4) * t384 + t297 * t63 - t478;
t47 = -t296 * t322 + t298 * t62;
t46 = t296 * t62 + t298 * t322;
t43 = pkin(4) * t331 - qJ(5) * t422 - t459 + t60;
t42 = -t107 * t296 + t298 * t55;
t41 = t107 * t298 + t296 * t55;
t40 = -t479 - qJ(5) * t426 + 0.2e1 * t352 + (t424 + t411) * pkin(4) - t423;
t39 = t295 * t70 + t297 * t72;
t38 = -t295 * t69 + t297 * t71;
t37 = t295 * t72 - t297 * t70;
t36 = -t44 - t443;
t34 = -t114 * t298 + t296 * t45;
t33 = -pkin(8) * t89 + qJ(5) * t322 - t395;
t32 = t295 * t60 + t297 * t59;
t31 = t295 * t59 - t297 * t60;
t30 = -pkin(8) * t81 + qJ(5) * t107 - t398;
t29 = -t116 * t296 + t298 * t39;
t28 = t116 * t298 + t296 * t39;
t27 = -pkin(8) * t90 + t322 * t407 + t398;
t26 = -pkin(8) * t82 + t107 * t407 - t395;
t23 = -t295 * t52 + t297 * t53 - t443;
t22 = t296 * t73 + t298 * t32;
t21 = t296 * t32 - t298 * t73;
t20 = -qJ(4) * t31 + (pkin(4) * t295 - t394) * t73;
t19 = -pkin(3) * t31 + pkin(4) * t60 - qJ(5) * t59;
t18 = -pkin(3) * t37 - qJ(5) * t72 + t407 * t70;
t17 = -pkin(3) * t61 + pkin(4) * t89 - qJ(5) * t90 - t396 - t299 * (t251 * t199 + t306 + t347) + (-t299 * t331 + t89) * pkin(5);
t14 = -qJ(4) * t61 - t27 * t295 + t297 * t33;
t13 = -pkin(3) * t54 - qJ(5) * t82 + t407 * t81 - t24;
t12 = -qJ(4) * t54 - t26 * t295 + t297 * t30;
t11 = -pkin(8) * t15 - qJ(5) * t58;
t10 = -pkin(8) * t70 + qJ(5) * t116 - t15;
t9 = -pkin(8) * t72 + t116 * t407 - t16;
t8 = -pkin(8) * t16 - t407 * t58;
t7 = t15 * t295 + t16 * t297;
t6 = -t15 * t297 + t16 * t295;
t5 = t296 * t58 + t298 * t7;
t4 = t296 * t7 - t298 * t58;
t3 = -qJ(4) * t37 + t10 * t297 - t295 * t9;
t2 = -qJ(4) * t6 + t11 * t297 - t295 * t8;
t1 = -pkin(3) * t6 - qJ(5) * t16 + t15 * t407;
t35 = [0, 0, 0, 0, 0, qJDD(1), t327, t314, 0, 0, (t277 + t338) * t300, t276 * t302 + t278 * t300, t363 + t302 * (-t288 + t409), t278 * t302, t300 * (t289 - t409) + t362, 0, t302 * t274 + pkin(1) * t278 + pkin(7) * (t302 * (-t289 - t409) - t363), -t300 * t274 - pkin(1) * t276 + pkin(7) * (-t362 - t300 * (-t288 - t409)), pkin(1) * (t288 + t289) + (t292 + t293) * t393 + t329, pkin(1) * t274 + pkin(7) * t329, t300 * (t240 * t298 - t270 * t356) + t302 * (t240 * t296 + t270 * t355), t300 * (-t207 * t298 + t210 * t296) + t302 * (-t207 * t296 - t210 * t298), t300 * (-t255 * t296 + t436) + t302 * (t255 * t298 + t440), t300 * (t268 * t355 + t370) + t302 * (t268 * t356 - t233), t300 * (t254 * t298 - t372) + t302 * (t254 * t296 + t371), (t300 * (-t268 * t298 + t270 * t296) + t302 * (-t268 * t296 - t270 * t298)) * qJD(2), t300 * (-qJ(3) * t176 - t375) + t302 * (-pkin(2) * t207 + qJ(3) * t177 + t374) - pkin(1) * t207 + pkin(7) * (-t176 * t300 + t177 * t302), t300 * (-qJ(3) * t186 - t374) + t302 * (pkin(2) * t210 + qJ(3) * t187 - t375) + pkin(1) * t210 + pkin(7) * (-t186 * t300 + t187 * t302), t300 * (-qJ(3) * t150 - t83) + t302 * (-pkin(2) * t206 + qJ(3) * t151 + t84) - pkin(1) * t206 + pkin(7) * (-t150 * t300 + t151 * t302), -qJ(3) * t397 + t302 * (pkin(2) * t205 + qJ(3) * t84) + pkin(1) * t205 + pkin(7) * (t302 * t84 - t397), t305, -t482, t472, t414, t483, t413, t300 * (-t296 * t56 + t298 * t77 - t471) + t302 * (t296 * t77 + t298 * t56 + t464) + t462, t300 * (-t296 * t57 + t298 * t78 + t487) + t302 * (t296 * t78 + t298 * t57 - t485) - t488, t300 * (t298 * t36 - t470) + t302 * (t296 * t36 + t469) + t463 + (t300 * t404 + t302 * t339 - pkin(1)) * t418, (t300 * (-qJ(4) * t298 + t404) + t302 * (-qJ(4) * t296 + t339) - pkin(1)) * t44 + t431 * (-t300 * t34 + t302 * (t114 * t296 + t298 * t45)), t305, t472, t482, t413, -t483, t414, t300 * (-t296 * t43 + t298 * t49 - t471) + t302 * (t296 * t49 + t298 * t43 + t464) + t462, t300 * (t23 * t298 - t296 * t79 - t470) + t302 * (-pkin(2) * t418 + t23 * t296 + t298 * t79 + t469) - pkin(1) * t418 + t463, t300 * (-t296 * t40 + t298 * t48 - t487) + t302 * (t296 * t48 + t298 * t40 + t485) + t488, t300 * (-qJ(3) * t21 - t19 * t296 + t20 * t298) + t302 * (-pkin(2) * t31 + qJ(3) * t22 + t19 * t298 + t20 * t296) - pkin(1) * t31 + pkin(7) * (-t21 * t300 + t22 * t302), t300 * (t298 * t68 - t345) + t302 * (t296 * t68 + t344), t300 * (-t149 * t296 + t298 * t38) + t302 * (t149 * t298 + t296 * t38), t300 * (t111 * t296 + t298 * t65) + t302 * (-t111 * t298 + t296 * t65), t300 * (t298 * t67 + t345) + t302 * (t296 * t67 - t344), t300 * (-t296 * t310 + t298 * t66) + t302 * (t296 * t66 + t298 * t310), t300 * (-t235 * t296 + t298 * t80) + t302 * (t235 * t298 + t296 * t80), t300 * (-qJ(3) * t41 + t12 * t298 - t13 * t296) + t302 * (-pkin(2) * t54 + qJ(3) * t42 + t12 * t296 + t13 * t298) - pkin(1) * t54 + pkin(7) * (-t300 * t41 + t302 * t42), t300 * (-qJ(3) * t46 + t14 * t298 - t17 * t296) + t302 * (-pkin(2) * t61 + qJ(3) * t47 + t14 * t296 + t17 * t298) - pkin(1) * t61 + pkin(7) * (-t300 * t46 + t302 * t47), t300 * (-qJ(3) * t28 - t18 * t296 + t298 * t3) + t302 * (-pkin(2) * t37 + qJ(3) * t29 + t18 * t298 + t296 * t3) - pkin(1) * t37 + pkin(7) * (-t28 * t300 + t29 * t302), t300 * (-qJ(3) * t4 - t1 * t296 + t2 * t298) + t302 * (-pkin(2) * t6 + qJ(3) * t5 + t1 * t298 + t2 * t296) - pkin(1) * t6 + pkin(7) * (-t300 * t4 + t302 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284, t288 - t289, t287, t284, t348, qJDD(2), -t252, -t253, 0, 0, t238, t267 - t411, t209, -t238, t208, qJDD(2), pkin(2) * t176 + t259 - t333, pkin(2) * t186 - t143, pkin(2) * t150, pkin(2) * t83, t159, t432, t468, t324, t448, t317, -pkin(3) * t318 - t391 + t466, -pkin(3) * t425 + t392 - t486, t45 + t465, pkin(2) * t34 - pkin(3) * t114 + qJ(4) * t45, t159, t468, -t432, t317, -t448, t324, t297 * t64 + t318 * t336 + t466, t295 * t53 + t297 * t52 + t465, t295 * t63 + (pkin(3) + t403) * t425 + t486, pkin(2) * t21 + qJ(4) * t32 + (t336 - t403) * t73, t105 * t297 + t106 * t295, t295 * t71 + t297 * t69, t101 * t295 + t297 * t99, t103 * t297 + t104 * t295, t100 * t297 + t102 * t295, t127 * t297 + t128 * t295, pkin(2) * t41 + pkin(3) * t107 + qJ(4) * t55 + t26 * t297 + t295 * t30, pkin(2) * t46 + pkin(3) * t322 + qJ(4) * t62 + t27 * t297 + t295 * t33, pkin(2) * t28 + pkin(3) * t116 + qJ(4) * t39 + t10 * t295 + t297 * t9, pkin(2) * t4 - pkin(3) * t58 + qJ(4) * t7 + t11 * t295 + t297 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, -t210, t206, -t205, 0, 0, 0, 0, 0, 0, t434, -t123, t418, t44, 0, 0, 0, 0, 0, 0, t434, t418, t123, t31, 0, 0, 0, 0, 0, 0, t54, t61, t37, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, t425, t178, t114, 0, 0, 0, 0, 0, 0, t318, t178, -t425, t73, 0, 0, 0, 0, 0, 0, -t107, -t322, -t116, t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, t165, t424, t60, 0, 0, 0, 0, 0, 0, t81, t89, t70, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t376, t149, -t111, -t376, t310, t235, -t24, -t25, 0, 0;];
tauJ_reg  = t35;
