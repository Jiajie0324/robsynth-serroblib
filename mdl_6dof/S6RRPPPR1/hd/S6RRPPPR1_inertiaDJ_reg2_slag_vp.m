% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:08
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPPR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR1_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:08:23
% EndTime: 2019-03-09 08:08:30
% DurationCPUTime: 2.56s
% Computational Cost: add. (3196->227), mult. (7203->423), div. (0->0), fcn. (6890->8), ass. (0->130)
t91 = sin(pkin(10));
t89 = t91 ^ 2;
t93 = cos(pkin(10));
t90 = t93 ^ 2;
t152 = t89 + t90;
t169 = t152 * qJD(4);
t157 = pkin(8) - qJ(4);
t149 = cos(pkin(9));
t95 = cos(qJ(2));
t128 = t149 * t95;
t94 = sin(qJ(2));
t144 = t94 * qJD(2);
t92 = sin(pkin(9));
t64 = qJD(2) * t128 - t92 * t144;
t168 = t157 * t64;
t162 = sin(qJ(6));
t130 = qJD(6) * t162;
t163 = cos(qJ(6));
t131 = qJD(6) * t163;
t66 = -t93 * t130 + t91 * t131;
t72 = t162 * t91 + t163 * t93;
t136 = t163 * t91;
t74 = -t162 * t93 + t136;
t73 = t149 * t94 + t92 * t95;
t63 = t73 * qJD(2);
t71 = t92 * t94 - t128;
t167 = t63 * qJ(5) + t71 * qJD(5);
t166 = 0.2e1 * t93;
t165 = pkin(4) + pkin(5);
t84 = t92 * pkin(2) + qJ(4);
t164 = -pkin(8) + t84;
t156 = -qJ(3) - pkin(7);
t127 = qJD(2) * t156;
t106 = -t94 * qJD(3) + t95 * t127;
t62 = t95 * qJD(3) + t94 * t127;
t30 = -t149 * t106 + t92 * t62;
t78 = t156 * t94;
t79 = t156 * t95;
t45 = -t149 * t78 - t92 * t79;
t161 = t45 * t30;
t160 = t72 * t66;
t65 = t72 * qJD(6);
t159 = t74 * t65;
t46 = -t149 * t79 + t92 * t78;
t158 = t91 * t46;
t56 = t91 * t63;
t57 = t91 * t64;
t58 = t93 * t63;
t59 = t93 * t64;
t17 = -t64 * t74 + t73 * t65;
t33 = t74 * t73;
t155 = -t74 * t17 - t65 * t33;
t137 = t95 * pkin(2) + pkin(1);
t105 = t71 * pkin(3) - t73 * qJ(4) - t137;
t22 = t91 * t105 + t93 * t46;
t153 = t84 * t169;
t151 = qJ(5) * t93;
t146 = t89 * qJD(5);
t145 = t91 * qJD(5);
t143 = t95 * qJD(2);
t142 = 0.2e1 * t71 * t63;
t141 = 0.2e1 * t73 * t64;
t140 = -0.2e1 * pkin(1) * qJD(2);
t47 = t91 * t59;
t18 = t71 * qJ(5) + t22;
t139 = pkin(2) * t144;
t138 = t94 * t143;
t132 = qJD(4) * t162;
t129 = t163 * qJD(4);
t126 = t73 * t47;
t125 = -t93 * pkin(3) - t165;
t122 = t164 * t162;
t102 = t92 * t106 + t149 * t62;
t100 = t93 * t102;
t110 = t73 * qJD(4) - t139;
t104 = t63 * pkin(3) - t110;
t103 = -t64 * qJ(4) + t104;
t12 = t91 * t103 + t100;
t7 = t12 + t167;
t101 = t91 * t102;
t11 = t93 * t103 - t101;
t8 = -t63 * pkin(4) - t11;
t121 = t7 * t91 - t8 * t93;
t87 = -t149 * pkin(2) - pkin(3);
t120 = t11 * t93 + t12 * t91;
t119 = -t11 * t91 + t12 * t93;
t112 = -t93 * t73 * qJD(5) - t64 * t151 + t30;
t14 = pkin(4) * t57 + t112;
t25 = (pkin(4) * t91 - t151) * t73 + t45;
t118 = t14 * t73 + t25 * t64;
t16 = -t64 * t72 - t66 * t73;
t34 = t72 * t73;
t117 = -t72 * t16 + t34 * t66;
t116 = t30 * t73 + t45 * t64;
t115 = t73 * t63 + t64 * t71;
t114 = t74 * t63 - t65 * t71;
t113 = -qJD(4) * t71 - t63 * t84;
t111 = t164 * t136;
t109 = -t91 * qJ(5) + t87;
t67 = -t93 * pkin(4) + t109;
t108 = t64 * t67 + t113;
t107 = t64 * t87 + t113;
t21 = t93 * t105 - t158;
t99 = t158 + (-t157 * t73 + t137) * t93 + t125 * t71;
t98 = t163 * t99;
t13 = t91 * t73 * pkin(8) + t18;
t4 = t163 * t13 + t162 * t99;
t97 = t101 + (t110 - t168) * t93 + t125 * t63;
t96 = t100 + (t104 + t168) * t91 + t167;
t70 = 0.2e1 * t169;
t68 = t164 * t93;
t54 = t165 * t93 - t109;
t39 = t90 * t141;
t38 = t89 * t141;
t37 = t91 * t122 + t163 * t68;
t36 = -t162 * t68 + t111;
t32 = t152 * t64;
t31 = (t89 - t90) * t64;
t29 = -t68 * t131 - t93 * t132 + (-qJD(6) * t122 + t129) * t91;
t28 = -qJD(6) * t111 - t93 * t129 + t68 * t130 - t91 * t132;
t26 = t72 * t63 + t66 * t71;
t24 = t115 * t91;
t23 = t115 * t166;
t20 = (-t165 * t91 + t151) * t73 - t45;
t19 = -t71 * pkin(4) - t21;
t10 = t165 * t57 + t112;
t3 = -t162 * t13 + t98;
t2 = -t4 * qJD(6) - t162 * t96 + t163 * t97;
t1 = -qJD(6) * t98 + t13 * t130 - t162 * t97 - t163 * t96;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t138, 0.2e1 * (-t94 ^ 2 + t95 ^ 2) * qJD(2), 0, -0.2e1 * t138, 0, 0, t94 * t140, t95 * t140, 0, 0, t141, -0.2e1 * t115, 0, t142, 0, 0, -0.2e1 * t137 * t63 + 0.2e1 * t71 * t139, -0.2e1 * t137 * t64 + 0.2e1 * t73 * t139, -0.2e1 * t102 * t71 - 0.2e1 * t46 * t63 + 0.2e1 * t116, 0.2e1 * t46 * t102 - 0.2e1 * t137 * t139 + 0.2e1 * t161, t39, -0.4e1 * t126, t23, t38, -0.2e1 * t24, t142, 0.2e1 * t11 * t71 + 0.2e1 * t116 * t91 + 0.2e1 * t21 * t63, 0.2e1 * t116 * t93 - 0.2e1 * t12 * t71 - 0.2e1 * t22 * t63, -0.2e1 * t120 * t73 + 0.2e1 * (-t21 * t93 - t22 * t91) * t64, 0.2e1 * t21 * t11 + 0.2e1 * t22 * t12 + 0.2e1 * t161, t39, t23, 0.4e1 * t126, t142, 0.2e1 * t24, t38, 0.2e1 * t118 * t91 - 0.2e1 * t19 * t63 - 0.2e1 * t8 * t71, -0.2e1 * t121 * t73 + 0.2e1 * (-t18 * t91 + t19 * t93) * t64, -0.2e1 * t118 * t93 + 0.2e1 * t18 * t63 + 0.2e1 * t7 * t71, 0.2e1 * t25 * t14 + 0.2e1 * t18 * t7 + 0.2e1 * t19 * t8, -0.2e1 * t34 * t16, -0.2e1 * t16 * t33 - 0.2e1 * t34 * t17, 0.2e1 * t16 * t71 - 0.2e1 * t34 * t63, -0.2e1 * t33 * t17, 0.2e1 * t17 * t71 - 0.2e1 * t33 * t63, t142, 0.2e1 * t10 * t33 + 0.2e1 * t20 * t17 - 0.2e1 * t2 * t71 - 0.2e1 * t3 * t63, -0.2e1 * t1 * t71 - 0.2e1 * t10 * t34 - 0.2e1 * t20 * t16 + 0.2e1 * t4 * t63, -0.2e1 * t1 * t33 + 0.2e1 * t3 * t16 - 0.2e1 * t4 * t17 - 0.2e1 * t2 * t34, -0.2e1 * t4 * t1 - 0.2e1 * t20 * t10 + 0.2e1 * t3 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, -t144, 0, -pkin(7) * t143, pkin(7) * t144, 0, 0, 0, 0, t64, 0, -t63, 0, -t30, -t102 (-t149 * t64 - t63 * t92) * pkin(2) (t102 * t92 - t30 * t149) * pkin(2), t47, -t31, t56, -t47, t58, 0, t107 * t91 - t30 * t93, t107 * t93 + t30 * t91, t119, t30 * t87 + t119 * t84 + (-t21 * t91 + t22 * t93) * qJD(4), t47, t56, t31, 0, -t58, -t47, t108 * t91 - t14 * t93 - t73 * t146, t7 * t93 + t8 * t91, -t14 * t91 + (t73 * t145 - t108) * t93, t14 * t67 + (qJD(4) * t18 + t7 * t84) * t93 + (qJD(4) * t19 - qJD(5) * t25 + t8 * t84) * t91, -t16 * t74 - t34 * t65, -t117 + t155, -t114, t17 * t72 - t33 * t66, t26, 0, -t10 * t72 - t33 * t145 + t54 * t17 + t20 * t66 - t29 * t71 - t36 * t63, -t10 * t74 + t34 * t145 - t54 * t16 - t20 * t65 - t28 * t71 + t37 * t63, t1 * t72 + t36 * t16 - t37 * t17 - t2 * t74 - t28 * t33 - t29 * t34 + t3 * t65 - t4 * t66, -t1 * t37 - t10 * t54 + t20 * t145 + t2 * t36 - t4 * t28 + t3 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0.2e1 * t153, 0, 0, 0, 0, 0, 0, t145 * t166, t70, 0.2e1 * t146, -0.2e1 * t67 * t145 + 0.2e1 * t153, -0.2e1 * t159, 0.2e1 * t72 * t65 - 0.2e1 * t74 * t66, 0, 0.2e1 * t160, 0, 0, 0.2e1 * t72 * t145 + 0.2e1 * t54 * t66, 0.2e1 * t74 * t145 - 0.2e1 * t54 * t65, 0.2e1 * t28 * t72 - 0.2e1 * t29 * t74 + 0.2e1 * t36 * t65 - 0.2e1 * t37 * t66, 0.2e1 * t54 * t145 - 0.2e1 * t37 * t28 + 0.2e1 * t36 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t64, 0, t139, 0, 0, 0, 0, 0, 0, t58, -t56, -t32, t120, 0, 0, 0, 0, 0, 0, t58, -t32, t56, t121, 0, 0, 0, 0, 0, 0, t26, t114, t117 + t155, -t1 * t74 - t2 * t72 - t3 * t66 - t4 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28 * t74 - t29 * t72 - t36 * t66 - t37 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t159 + 0.2e1 * t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59, 0, t30, 0, 0, 0, 0, 0, 0, t57, 0, -t59, t14, 0, 0, 0, 0, 0, 0, -t17, t16, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, 0, 0, 0, 0, 0, -t66, t65, 0, -t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t59, 0, t8, 0, 0, 0, 0, 0, 0, t71 * t130 - t163 * t63, t71 * t131 + t162 * t63, t163 * t16 - t162 * t17 + (t162 * t34 + t163 * t33) * qJD(6), t2 * t163 - t1 * t162 + (-t162 * t3 + t163 * t4) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t163 * t65 - t162 * t66 + (t162 * t74 - t163 * t72) * qJD(6), t29 * t163 - t28 * t162 + (-t162 * t36 + t163 * t37) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66 * t163 - t65 * t162 + (t162 * t72 + t163 * t74) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, 0, -t17, -t63, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, 0, -t66, 0, t29, t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, t65, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -t131, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
