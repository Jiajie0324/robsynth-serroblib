% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RPPRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:58
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RPPRRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:58:30
% EndTime: 2019-05-05 15:58:45
% DurationCPUTime: 15.24s
% Computational Cost: add. (78295->705), mult. (149888->815), div. (0->0), fcn. (92019->8), ass. (0->438)
t1015 = sin(qJ(6));
t1019 = cos(qJ(6));
t1016 = sin(qJ(5));
t1020 = cos(qJ(5));
t1021 = cos(qJ(4));
t1116 = qJD(1) * t1021;
t967 = -t1020 * qJD(4) + t1016 * t1116;
t969 = qJD(4) * t1016 + t1020 * t1116;
t906 = t1015 * t969 + t1019 * t967;
t908 = -t1015 * t967 + t1019 * t969;
t861 = t908 * t906;
t1091 = qJD(4) * t1116;
t1017 = sin(qJ(4));
t1109 = t1017 * qJDD(1);
t973 = -t1091 - t1109;
t963 = qJDD(5) - t973;
t959 = qJDD(6) + t963;
t1173 = -t861 + t959;
t1178 = t1015 * t1173;
t924 = t969 * t967;
t1172 = -t924 + t963;
t1177 = t1016 * t1172;
t1176 = t1019 * t1173;
t1175 = t1020 * t1172;
t1025 = qJD(1) ^ 2;
t1013 = t1025 * pkin(7);
t1018 = sin(qJ(1));
t1022 = cos(qJ(1));
t985 = t1018 * g(1) - t1022 * g(2);
t1057 = -qJDD(2) + t985;
t1030 = t1025 * qJ(2) + t1057;
t1148 = pkin(1) + qJ(3);
t1026 = qJDD(1) * t1148 + t1030;
t1144 = pkin(4) * t1021;
t1058 = pkin(8) * t1017 + t1144;
t1156 = 2 * qJD(3);
t1000 = t1017 * qJD(1);
t1092 = qJD(4) * t1000;
t1108 = t1021 * qJDD(1);
t974 = -t1092 + t1108;
t858 = -t973 * pkin(4) - t974 * pkin(8) - t1013 + (qJD(4) * t1058 + t1156) * qJD(1) + t1026;
t1024 = qJD(4) ^ 2;
t1143 = pkin(8) * t1021;
t1145 = pkin(4) * t1017;
t1033 = t1025 * (-t1143 + t1145);
t1009 = qJDD(1) * qJ(2);
t986 = t1022 * g(1) + t1018 * g(2);
t1040 = 0.2e1 * qJD(2) * qJD(1) - t986;
t1031 = qJDD(3) + t1040;
t1028 = t1009 + t1031;
t1170 = t1025 * t1148;
t922 = -qJDD(1) * pkin(7) + t1028 - t1170;
t902 = t1021 * g(3) - t1017 * t922;
t871 = -t1024 * pkin(4) + qJDD(4) * pkin(8) - t1017 * t1033 - t902;
t802 = t1016 * t871 - t1020 * t858;
t803 = t1016 * t858 + t1020 * t871;
t745 = t1016 * t802 + t1020 * t803;
t1088 = t1020 * qJDD(4) - t1016 * t974;
t899 = -qJD(5) * t969 + t1088;
t1049 = -t1016 * qJDD(4) - t1020 * t974;
t900 = -qJD(5) * t967 - t1049;
t821 = -qJD(6) * t906 + t1015 * t899 + t1019 * t900;
t996 = t1000 + qJD(5);
t988 = qJD(6) + t996;
t886 = t988 * t906;
t1174 = t821 - t886;
t901 = t1017 * g(3) + t1021 * t922;
t845 = -t1017 * t901 - t1021 * t902;
t947 = t996 * t967;
t878 = t900 + t947;
t1155 = pkin(2) + pkin(3);
t844 = -t1017 * t902 + t1021 * t901;
t1171 = t1155 * t844;
t1107 = qJD(1) * t1156;
t1169 = 0.2e1 * qJDD(1) * qJ(3) + t1107;
t995 = t1017 * t1025 * t1021;
t984 = qJDD(4) - t995;
t1119 = t1021 * t984;
t1010 = t1017 ^ 2;
t1114 = t1010 * t1025;
t991 = -t1024 - t1114;
t930 = t1017 * t991 + t1119;
t1168 = -t1155 * t930 - t901;
t983 = qJDD(4) + t995;
t1129 = t1017 * t983;
t1011 = t1021 ^ 2;
t1113 = t1011 * t1025;
t993 = -t1024 - t1113;
t932 = t1021 * t993 - t1129;
t1167 = -t1155 * t932 - t902;
t870 = qJDD(4) * pkin(4) + t1024 * pkin(8) - t1021 * t1033 + t901;
t719 = -t1017 * t870 + t1021 * t745;
t744 = t1016 * t803 - t1020 * t802;
t1139 = pkin(3) * t744 - pkin(7) * t719;
t1166 = (pkin(2) + t1058) * t744 + t1139;
t751 = pkin(5) * t1172 - pkin(9) * t878 - t802;
t1061 = pkin(5) * t996 - pkin(9) * t969;
t961 = t967 ^ 2;
t756 = -t961 * pkin(5) + t899 * pkin(9) - t1061 * t996 + t803;
t699 = t1015 * t756 - t1019 * t751;
t700 = t1015 * t751 + t1019 * t756;
t673 = t1015 * t699 + t1019 * t700;
t1089 = t1015 * t900 - t1019 * t899;
t775 = (qJD(6) - t988) * t908 + t1089;
t778 = t821 + t886;
t733 = t1015 * t778 - t1019 * t775;
t904 = t906 ^ 2;
t905 = t908 ^ 2;
t828 = -t904 - t905;
t653 = -pkin(5) * t828 + pkin(9) * t733 + t673;
t672 = t1015 * t700 - t1019 * t699;
t731 = -t1015 * t775 - t1019 * t778;
t655 = -pkin(9) * t731 - t672;
t692 = -t1016 * t731 + t1020 * t733;
t1067 = pkin(4) * t828 - pkin(8) * t692 - t1016 * t655 - t1020 * t653;
t683 = t1017 * t692 - t1021 * t828;
t1165 = -t1155 * t683 + t1067;
t876 = (-qJD(5) + t996) * t969 + t1088;
t819 = t1016 * t878 + t1020 * t876;
t962 = t969 ^ 2;
t888 = t961 + t962;
t1068 = pkin(4) * t888 + pkin(8) * t819 + t745;
t764 = t1017 * t819 + t1021 * t888;
t1164 = -t1155 * t764 - t1068;
t785 = t899 * pkin(5) + t961 * pkin(9) - t1061 * t969 + t870;
t1136 = t1015 * t785;
t838 = t861 + t959;
t1126 = t1019 * t838;
t987 = t988 ^ 2;
t880 = -t905 - t987;
t793 = -t1015 * t880 - t1126;
t705 = -pkin(5) * t1174 + pkin(9) * t793 - t1136;
t1127 = t1019 * t785;
t1135 = t1015 * t838;
t792 = t1019 * t880 - t1135;
t736 = -pkin(9) * t792 - t1127;
t740 = -t1016 * t792 + t1020 * t793;
t1071 = pkin(4) * t1174 - pkin(8) * t740 - t1016 * t736 - t1020 * t705;
t703 = t1017 * t740 - t1021 * t1174;
t1163 = -t1155 * t703 + t1071;
t848 = -t987 - t904;
t767 = t1019 * t848 - t1178;
t774 = (qJD(6) + t988) * t908 + t1089;
t697 = -pkin(5) * t774 + pkin(9) * t767 + t1127;
t766 = t1015 * t848 + t1176;
t723 = -t1016 * t766 + t1020 * t767;
t734 = -pkin(9) * t766 - t1136;
t1072 = pkin(4) * t774 - pkin(8) * t723 - t1016 * t734 - t1020 * t697;
t694 = t1017 * t723 - t1021 * t774;
t1162 = -t1155 * t694 + t1072;
t1133 = t1016 * t672;
t648 = t1020 * t673 - t1133;
t663 = pkin(5) * t785 + pkin(9) * t673;
t1073 = -pkin(4) * t785 - pkin(8) * t648 + pkin(9) * t1133 - t1020 * t663;
t643 = t1017 * t648 + t1021 * t785;
t1161 = -t1155 * t643 + t1073;
t817 = t1016 * t876 - t1020 * t878;
t716 = -pkin(8) * t817 - t744;
t765 = -t1017 * t888 + t1021 * t819;
t1106 = pkin(3) * t817 - pkin(7) * t765 - t1017 * t716;
t1160 = (pkin(2) + t1144) * t817 + t1106;
t994 = t996 ^ 2;
t903 = -t994 - t961;
t841 = t1020 * t903 - t1177;
t867 = t1020 * t870;
t948 = t996 * t969;
t875 = t899 - t948;
t1104 = pkin(4) * t875 + pkin(8) * t841 + t867;
t788 = t1017 * t841 + t1021 * t875;
t1159 = -t1155 * t788 - t1104;
t891 = t924 + t963;
t1123 = t1020 * t891;
t918 = -t962 - t994;
t850 = -t1016 * t918 - t1123;
t866 = t1016 * t870;
t879 = (qJD(5) + t996) * t967 + t1049;
t1105 = -pkin(4) * t879 - pkin(8) * t850 + t866;
t798 = t1017 * t850 + t1021 * t879;
t1158 = -t1155 * t798 + t1105;
t1138 = pkin(4) * t870 + pkin(8) * t745;
t718 = t1017 * t745 + t1021 * t870;
t1157 = -t1155 * t718 - t1138;
t938 = t1026 + t1107;
t1154 = pkin(2) * t938;
t1153 = pkin(5) * t672;
t1152 = pkin(5) * t731;
t1110 = qJDD(1) * t1022;
t979 = -t1018 * t1025 + t1110;
t1151 = pkin(6) * t979;
t1111 = qJDD(1) * t1018;
t980 = t1022 * t1025 + t1111;
t1150 = pkin(6) * t980;
t1149 = pkin(7) * t844;
t1147 = qJ(2) - pkin(7);
t1146 = pkin(1) * t1025;
t1142 = qJDD(1) * pkin(1);
t1141 = t988 * t908;
t1140 = t1021 * t716 + t817 * t1145;
t921 = -t1013 + t938;
t1137 = -pkin(3) * t921 + pkin(7) * t845;
t1134 = t1015 * t988;
t1132 = t1016 * t891;
t1131 = t1016 * t996;
t912 = t1017 * t921;
t1128 = t1017 * t984;
t1125 = t1019 * t988;
t1124 = t1020 * t672;
t1122 = t1020 * t996;
t1121 = t1021 * t921;
t1120 = t1021 * t983;
t1117 = qJD(1) * qJD(4);
t1112 = t1010 + t1011;
t981 = t1112 * t1025;
t1103 = pkin(3) * t981 + t845;
t937 = -t1017 * t993 - t1120;
t975 = -0.2e1 * t1092 + t1108;
t1102 = -pkin(3) * t975 + pkin(7) * t937 + t912;
t934 = t1021 * t991 - t1128;
t972 = 0.2e1 * t1091 + t1109;
t1101 = -pkin(3) * t972 + pkin(7) * t934 - t1121;
t1100 = t967 * t1131;
t1099 = t1017 * t861;
t1098 = t1017 * t924;
t1097 = t1021 * t861;
t1096 = t1021 * t924;
t741 = t744 * t1145;
t1094 = -pkin(7) * t718 + t741;
t1093 = -pkin(7) * t932 + t1121;
t1090 = qJ(3) - t1143;
t647 = t1016 * t673 + t1124;
t630 = -pkin(8) * t647 - pkin(9) * t1124 - t1016 * t663;
t641 = -pkin(4) * t647 - t1153;
t1087 = -t1017 * t641 + t1021 * t630;
t690 = t1016 * t733 + t1020 * t731;
t638 = -pkin(8) * t690 - t1016 * t653 + t1020 * t655;
t669 = -pkin(4) * t690 - t1152;
t1086 = -t1017 * t669 + t1021 * t638;
t722 = t1016 * t767 + t1020 * t766;
t658 = -pkin(8) * t722 - t1016 * t697 + t1020 * t734;
t1048 = pkin(5) * t766 - t699;
t670 = -pkin(4) * t722 - t1048;
t1085 = -t1017 * t670 + t1021 * t658;
t739 = t1016 * t793 + t1020 * t792;
t666 = -pkin(8) * t739 - t1016 * t705 + t1020 * t736;
t1029 = pkin(5) * t792 - t700;
t675 = -pkin(4) * t739 - t1029;
t1084 = -t1017 * t675 + t1021 * t666;
t840 = t1016 * t903 + t1175;
t755 = -pkin(4) * t840 + t802;
t787 = -pkin(8) * t840 - t866;
t1083 = -t1017 * t755 + t1021 * t787;
t849 = t1020 * t918 - t1132;
t758 = -pkin(4) * t849 + t803;
t797 = -pkin(8) * t849 - t867;
t1082 = -t1017 * t758 + t1021 * t797;
t1027 = -t1009 - t1040;
t939 = -qJDD(3) + t1027 + t1170;
t1080 = -t1018 * t938 - t1022 * t939;
t949 = t1027 + t1146;
t951 = t1030 + t1142;
t1079 = -t1018 * t951 - t1022 * t949;
t1078 = -t1018 * t985 - t1022 * t986;
t644 = -t1017 * t785 + t1021 * t648;
t1077 = -pkin(3) * t647 + pkin(7) * t644 + t1017 * t630 + t1021 * t641;
t684 = t1017 * t828 + t1021 * t692;
t1076 = -pkin(3) * t690 + pkin(7) * t684 + t1017 * t638 + t1021 * t669;
t695 = t1017 * t774 + t1021 * t723;
t1075 = -pkin(3) * t722 + pkin(7) * t695 + t1017 * t658 + t1021 * t670;
t704 = t1017 * t1174 + t1021 * t740;
t1074 = -pkin(3) * t739 + pkin(7) * t704 + t1017 * t666 + t1021 * t675;
t789 = -t1017 * t875 + t1021 * t841;
t1070 = -pkin(3) * t840 + pkin(7) * t789 + t1017 * t787 + t1021 * t755;
t799 = -t1017 * t879 + t1021 * t850;
t1069 = -pkin(3) * t849 + pkin(7) * t799 + t1017 * t797 + t1021 * t758;
t1066 = pkin(2) * t921 - t1137;
t1065 = -pkin(7) * t764 + t1140;
t1064 = t1018 * t995;
t1063 = t1022 * t995;
t1062 = pkin(2) * t939 - qJ(3) * g(3);
t1060 = g(3) * t1018 + t1151;
t1059 = g(3) * t1022 - t1150;
t1056 = -pkin(7) * t930 + t912;
t1055 = pkin(2) * t975 - t1102;
t1054 = pkin(2) * t972 - t1101;
t1053 = t1018 * t939 - t1022 * t938;
t1052 = t1018 * t949 - t1022 * t951;
t1051 = t1018 * t986 - t1022 * t985;
t1047 = -pkin(7) * t643 + t1087;
t1046 = -pkin(7) * t683 + t1086;
t1045 = -pkin(7) * t694 + t1085;
t1044 = -pkin(7) * t703 + t1084;
t1043 = -pkin(7) * t788 + t1083;
t1042 = -pkin(7) * t798 + t1082;
t978 = t1112 * qJDD(1);
t1041 = pkin(7) * t978 - t844;
t1039 = pkin(2) * t647 - t1077;
t1038 = pkin(2) * t690 - t1076;
t1037 = pkin(2) * t722 - t1075;
t1036 = pkin(2) * t739 - t1074;
t1035 = pkin(2) * t840 - t1070;
t1034 = pkin(2) * t849 - t1069;
t1003 = pkin(2) * t1025 - g(3);
t1032 = -pkin(2) * t1111 - t1022 * t1003 - t1150;
t960 = -t1057 - 0.2e1 * t1142;
t1023 = pkin(1) * g(3);
t1014 = qJ(2) * g(3);
t1012 = pkin(2) * qJDD(1);
t1005 = 0.2e1 * t1009;
t992 = t1024 - t1113;
t990 = -t1024 + t1114;
t982 = (-t1010 + t1011) * t1025;
t971 = pkin(3) * t978;
t966 = t1112 * t1117;
t957 = t1005 + t1040;
t950 = t1005 + t1031;
t946 = -t960 + t1169;
t945 = -t962 + t994;
t944 = t961 - t994;
t943 = t1011 * t1117 + t1017 * t974;
t942 = t1010 * t1117 + t1021 * t973;
t940 = t969 * t1122;
t936 = -t1017 * t992 + t1119;
t935 = (t974 - t1092) * t1021;
t933 = t1021 * t990 - t1129;
t931 = t1021 * t992 + t1128;
t929 = t1017 * t990 + t1120;
t928 = (-t973 + t1091) * t1017;
t927 = pkin(2) * t978 + t971;
t923 = -pkin(2) * t1110 + t1003 * t1018 - t1151;
t919 = t962 - t961;
t916 = t1014 - t1154;
t911 = -t1017 * t975 - t1021 * t972;
t910 = -t1017 * t972 + t1021 * t975;
t909 = t1023 - t1062;
t889 = pkin(1) * t951 - qJ(2) * t949;
t884 = -t905 + t987;
t883 = t904 - t987;
t882 = (t1016 * t969 - t1020 * t967) * t996;
t881 = -t940 - t1100;
t877 = t900 - t947;
t874 = -t899 - t948;
t865 = t1020 * t900 - t1131 * t969;
t864 = -t1016 * t900 - t940;
t863 = -t1016 * t899 + t1122 * t967;
t862 = t1020 * t899 + t1100;
t860 = t1017 * t963 + t1021 * t882;
t859 = t1017 * t882 - t1021 * t963;
t857 = t905 - t904;
t856 = t1020 * t944 - t1132;
t855 = -t1016 * t945 + t1175;
t854 = t1016 * t944 + t1123;
t853 = t1020 * t945 + t1177;
t843 = -qJ(2) * t939 + t1148 * t938;
t834 = (t1015 * t908 - t1019 * t906) * t988;
t833 = (-t1015 * t906 - t1019 * t908) * t988;
t832 = t1021 * t865 + t1098;
t831 = t1021 * t863 - t1098;
t830 = t1017 * t865 - t1096;
t829 = t1017 * t863 + t1096;
t827 = -pkin(2) * t981 - t1103;
t825 = -qJ(2) * t937 - t1055;
t824 = -qJ(2) * t934 - t1054;
t823 = t1147 * t932 + t1148 * t975 + t1121;
t822 = t1147 * t930 + t1148 * t972 + t912;
t820 = -qJD(6) * t908 - t1089;
t818 = -t1016 * t877 + t1020 * t875;
t816 = t1016 * t875 + t1020 * t877;
t812 = -t1147 * t978 - t1148 * t981 - t844;
t811 = -t1017 * t874 + t1021 * t856;
t810 = t1017 * t878 + t1021 * t855;
t809 = t1017 * t856 + t1021 * t874;
t808 = t1017 * t855 - t1021 * t878;
t807 = t1019 * t883 - t1135;
t806 = -t1015 * t884 + t1176;
t805 = t1015 * t883 + t1126;
t804 = t1019 * t884 + t1178;
t796 = -t1148 * t937 - t1167;
t795 = -t1148 * t934 - t1168;
t781 = t1017 * t919 + t1021 * t818;
t780 = t1017 * t818 - t1021 * t919;
t771 = t1019 * t821 - t1134 * t908;
t770 = t1015 * t821 + t1125 * t908;
t769 = -t1015 * t820 + t1125 * t906;
t768 = t1019 * t820 + t1134 * t906;
t762 = -t1016 * t833 + t1020 * t834;
t761 = t1016 * t834 + t1020 * t833;
t760 = t1017 * t959 + t1021 * t762;
t759 = t1017 * t762 - t1021 * t959;
t754 = -qJ(2) * t845 - t1066;
t753 = t1147 * t844 + t1148 * t921;
t749 = -t1016 * t805 + t1020 * t807;
t748 = -t1016 * t804 + t1020 * t806;
t747 = t1016 * t807 + t1020 * t805;
t746 = t1016 * t806 + t1020 * t804;
t732 = -t1015 * t1174 - t1019 * t774;
t730 = -t1015 * t774 + t1019 * t1174;
t729 = -t1148 * t845 + t1171;
t727 = -t1016 * t770 + t1020 * t771;
t726 = -t1016 * t768 + t1020 * t769;
t725 = t1016 * t771 + t1020 * t770;
t724 = t1016 * t769 + t1020 * t768;
t713 = t1021 * t727 + t1099;
t712 = t1021 * t726 - t1099;
t711 = t1017 * t727 - t1097;
t710 = t1017 * t726 + t1097;
t709 = -t1017 * t775 + t1021 * t749;
t708 = t1017 * t778 + t1021 * t748;
t707 = t1017 * t749 + t1021 * t775;
t706 = t1017 * t748 - t1021 * t778;
t691 = -t1016 * t730 + t1020 * t732;
t689 = t1016 * t732 + t1020 * t730;
t686 = t1017 * t857 + t1021 * t691;
t685 = t1017 * t691 - t1021 * t857;
t681 = -t1148 * t799 - t1158;
t680 = -t1148 * t789 - t1159;
t679 = -qJ(2) * t799 - t1034;
t678 = t1147 * t798 + t1148 * t849 + t1082;
t677 = -qJ(2) * t789 - t1035;
t676 = t1147 * t788 + t1148 * t840 + t1083;
t661 = -qJ(2) * t765 - t1160;
t660 = t1147 * t764 + t1148 * t817 + t1140;
t659 = -t1148 * t765 - t1164;
t651 = -t1148 * t719 - t1157;
t650 = -qJ(2) * t719 - t1166;
t649 = t741 + t1147 * t718 + (pkin(1) + t1090) * t744;
t639 = -t1148 * t704 - t1163;
t635 = -t1148 * t695 - t1162;
t634 = -qJ(2) * t704 - t1036;
t633 = t1147 * t703 + t1148 * t739 + t1084;
t632 = -qJ(2) * t695 - t1037;
t631 = t1147 * t694 + t1148 * t722 + t1085;
t627 = -t1148 * t684 - t1165;
t626 = -qJ(2) * t684 - t1038;
t625 = t1147 * t683 + t1148 * t690 + t1086;
t624 = -t1148 * t644 - t1161;
t623 = -qJ(2) * t644 - t1039;
t622 = t1147 * t643 + t1148 * t647 + t1087;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t979, 0, -t980, 0, -t1060, -t1059, t1051, pkin(6) * t1051, 0, -t979, t980, 0, 0, 0, t1052, t1060, t1059, pkin(6) * t1052 + (-pkin(1) * t1018 + qJ(2) * t1022) * g(3), 0, t980, t979, 0, 0, 0, t1053, t1032, t923, pkin(6) * t1053 - t1018 * t909 + t1022 * t916, t1022 * t943 - t1064, -t1018 * t982 + t1022 * t910, -t1018 * t1108 + t1022 * t931, t1022 * t942 + t1064, t1018 * t1109 + t1022 * t929, -qJDD(4) * t1018 - t1022 * t966, t1022 * t824 - t1018 * t795 - pkin(6) * (t1018 * t930 + t1022 * t972), t1022 * t825 - t1018 * t796 - pkin(6) * (t1018 * t932 + t1022 * t975), -t1022 * t827 + t1018 * t927 - pkin(6) * (-t1018 * t978 - t1022 * t981), t1022 * t754 - t1018 * t729 - pkin(6) * (t1018 * t844 + t1022 * t921), t1018 * t864 + t1022 * t830, -t1018 * t816 + t1022 * t780, -t1018 * t853 + t1022 * t808, -t1018 * t862 + t1022 * t829, -t1018 * t854 + t1022 * t809, -t1018 * t881 + t1022 * t859, t1022 * t677 - t1018 * t680 - pkin(6) * (t1018 * t788 + t1022 * t840), t1022 * t679 - t1018 * t681 - pkin(6) * (t1018 * t798 + t1022 * t849), t1022 * t661 - t1018 * t659 - pkin(6) * (t1018 * t764 + t1022 * t817), t1022 * t650 - t1018 * t651 - pkin(6) * (t1018 * t718 + t1022 * t744), -t1018 * t725 + t1022 * t711, -t1018 * t689 + t1022 * t685, -t1018 * t746 + t1022 * t706, -t1018 * t724 + t1022 * t710, -t1018 * t747 + t1022 * t707, -t1018 * t761 + t1022 * t759, t1022 * t632 - t1018 * t635 - pkin(6) * (t1018 * t694 + t1022 * t722), t1022 * t634 - t1018 * t639 - pkin(6) * (t1018 * t703 + t1022 * t739), t1022 * t626 - t1018 * t627 - pkin(6) * (t1018 * t683 + t1022 * t690), t1022 * t623 - t1018 * t624 - pkin(6) * (t1018 * t643 + t1022 * t647); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t980, 0, t979, 0, t1059, -t1060, t1078, pkin(6) * t1078, 0, -t980, -t979, 0, 0, 0, t1079, -t1059, t1060, pkin(6) * t1079 + (pkin(1) * t1022 + qJ(2) * t1018) * g(3), 0, -t979, t980, 0, 0, 0, t1080, -t923, t1032, pkin(6) * t1080 + t1018 * t916 + t1022 * t909, t1018 * t943 + t1063, t1018 * t910 + t1022 * t982, t1018 * t931 + t1022 * t1108, t1018 * t942 - t1063, t1018 * t929 - t1022 * t1109, qJDD(4) * t1022 - t1018 * t966, t1018 * t824 + t1022 * t795 + pkin(6) * (-t1018 * t972 + t1022 * t930), t1018 * t825 + t1022 * t796 + pkin(6) * (-t1018 * t975 + t1022 * t932), -t1018 * t827 - t1022 * t927 + pkin(6) * (t1018 * t981 - t1022 * t978), t1018 * t754 + t1022 * t729 + pkin(6) * (-t1018 * t921 + t1022 * t844), t1018 * t830 - t1022 * t864, t1018 * t780 + t1022 * t816, t1018 * t808 + t1022 * t853, t1018 * t829 + t1022 * t862, t1018 * t809 + t1022 * t854, t1018 * t859 + t1022 * t881, t1018 * t677 + t1022 * t680 + pkin(6) * (-t1018 * t840 + t1022 * t788), t1018 * t679 + t1022 * t681 + pkin(6) * (-t1018 * t849 + t1022 * t798), t1018 * t661 + t1022 * t659 + pkin(6) * (-t1018 * t817 + t1022 * t764), t1018 * t650 + t1022 * t651 + pkin(6) * (-t1018 * t744 + t1022 * t718), t1018 * t711 + t1022 * t725, t1018 * t685 + t1022 * t689, t1018 * t706 + t1022 * t746, t1018 * t710 + t1022 * t724, t1018 * t707 + t1022 * t747, t1018 * t759 + t1022 * t761, t1018 * t632 + t1022 * t635 + pkin(6) * (-t1018 * t722 + t1022 * t694), t1018 * t634 + t1022 * t639 + pkin(6) * (-t1018 * t739 + t1022 * t703), t1018 * t626 + t1022 * t627 + pkin(6) * (-t1018 * t690 + t1022 * t683), t1018 * t623 + t1022 * t624 + pkin(6) * (-t1018 * t647 + t1022 * t643); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t985, t986, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t960, t957, t889, qJDD(1), 0, 0, 0, 0, 0, 0, t950, t946, t843, t935, t911, t936, t928, t933, 0, t822, t823, t812, t753, t832, t781, t810, t831, t811, t860, t676, t678, t660, t649, t713, t686, t708, t712, t709, t760, t631, t633, t625, t622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1025, 0, 0, -g(3), -t985, 0, 0, -qJDD(1), t1025, 0, 0, 0, -t951, 0, g(3), t1014, 0, t1025, qJDD(1), 0, 0, 0, -t938, -t1003, -t1012, t916, t943, t910, t931, t942, t929, -t966, t824, t825, -t827, t754, t830, t780, t808, t829, t809, t859, t677, t679, t661, t650, t711, t685, t706, t710, t707, t759, t632, t634, t626, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, qJDD(1), 0, g(3), 0, -t986, 0, 0, -t1025, -qJDD(1), 0, 0, 0, -t949, -g(3), 0, t1023, 0, -qJDD(1), t1025, 0, 0, 0, -t939, t1012, -t1003, t909, t995, t982, t1108, -t995, -t1109, qJDD(4), t795, t796, -t927, t729, -t864, t816, t853, t862, t854, t881, t680, t681, t659, t651, t725, t689, t746, t724, t747, t761, t635, t639, t627, t624; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t985, t986, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t960, t957, t889, qJDD(1), 0, 0, 0, 0, 0, 0, t950, t946, t843, t935, t911, t936, t928, t933, 0, t822, t823, t812, t753, t832, t781, t810, t831, t811, t860, t676, t678, t660, t649, t713, t686, t708, t712, t709, t760, t631, t633, t625, t622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t951, -t949, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t1028 - t1146, t951 + t1169, qJ(3) * t938, t935, t911, t936, t928, t933, 0, qJ(3) * t972 + t1056, qJ(3) * t975 + t1093, -qJ(3) * t981 + t1041, qJ(3) * t921 - t1149, t832, t781, t810, t831, t811, t860, qJ(3) * t840 + t1043, qJ(3) * t849 + t1042, qJ(3) * t817 + t1065, t1090 * t744 + t1094, t713, t686, t708, t712, t709, t760, qJ(3) * t722 + t1045, qJ(3) * t739 + t1044, qJ(3) * t690 + t1046, qJ(3) * t647 + t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1025, 0, 0, 0, t951, 0, -g(3), 0, 0, -t1025, -qJDD(1), 0, 0, 0, t938, t1003, t1012, t1154, -t943, -t910, -t931, -t942, -t929, t966, t1054, t1055, t827, t1066, -t830, -t780, -t808, -t829, -t809, -t859, t1035, t1034, t1160, t1166, -t711, -t685, -t706, -t710, -t707, -t759, t1037, t1036, t1038, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, qJDD(1), 0, 0, 0, t949, g(3), 0, 0, 0, qJDD(1), -t1025, 0, 0, 0, t939, -t1012, t1003, t1062, -t995, -t982, -t1108, t995, t1109, -qJDD(4), qJ(3) * t934 + t1168, qJ(3) * t937 + t1167, t927, qJ(3) * t845 - t1171, t864, -t816, -t853, -t862, -t854, -t881, qJ(3) * t789 + t1159, qJ(3) * t799 + t1158, qJ(3) * t765 + t1164, qJ(3) * t719 + t1157, -t725, -t689, -t746, -t724, -t747, -t761, qJ(3) * t695 + t1162, qJ(3) * t704 + t1163, qJ(3) * t684 + t1165, qJ(3) * t644 + t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t939, t938, 0, t935, t911, t936, t928, t933, 0, t1056, t1093, t1041, -t1149, t832, t781, t810, t831, t811, t860, t1043, t1042, t1065, -t1143 * t744 + t1094, t713, t686, t708, t712, t709, t760, t1045, t1044, t1046, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1025, 0, 0, 0, t939, 0, -g(3), 0, -t995, -t982, -t1108, t995, t1109, -qJDD(4), -pkin(3) * t930 - t901, -pkin(3) * t932 - t902, t971, -pkin(3) * t844, t864, -t816, -t853, -t862, -t854, -t881, -pkin(3) * t788 - t1104, -pkin(3) * t798 + t1105, -pkin(3) * t764 - t1068, -pkin(3) * t718 - t1138, -t725, -t689, -t746, -t724, -t747, -t761, -pkin(3) * t694 + t1072, -pkin(3) * t703 + t1071, -pkin(3) * t683 + t1067, -pkin(3) * t643 + t1073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, qJDD(1), 0, 0, 0, -t938, g(3), 0, 0, t943, t910, t931, t942, t929, -t966, t1101, t1102, t1103, t1137, t830, t780, t808, t829, t809, t859, t1070, t1069, -t1144 * t817 - t1106, -t1058 * t744 - t1139, t711, t685, t706, t710, t707, t759, t1075, t1074, t1076, t1077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t974, -t972, t984, t1092, t990, -t1092, 0, t921, -t901, 0, t865, t818, t855, t863, t856, t882, t787, t797, t716, -pkin(8) * t744, t727, t691, t748, t726, t749, t762, t658, t666, t638, t630; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1091, t975, t992, t973, t983, -t1091, -t921, 0, -t902, 0, -t924, -t919, -t878, t924, t874, -t963, t755, t758, -pkin(4) * t817, -pkin(4) * t744, -t861, -t857, -t778, t861, t775, -t959, t670, t675, t669, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t995, t982, t1108, -t995, -t1109, qJDD(4), t901, t902, 0, 0, -t864, t816, t853, t862, t854, t881, t1104, -t1105, t1068, t1138, t725, t689, t746, t724, t747, t761, -t1072, -t1071, -t1067, -t1073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t900, t875, t1172, t947, t944, -t947, 0, -t870, t802, 0, t771, t732, t806, t769, t807, t834, t734, t736, t655, -pkin(9) * t672; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t948, t877, t945, t899, t891, -t948, t870, 0, t803, 0, t770, t730, t804, t768, t805, t833, t697, t705, t653, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t924, t919, t878, -t924, -t874, t963, -t802, -t803, 0, 0, t861, t857, t778, -t861, -t775, t959, t1048, t1029, t1152, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, -t774, t1173, t886, t883, -t886, 0, -t785, t699, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1141, t1174, t884, t820, t838, -t1141, t785, 0, t700, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t861, t857, t778, -t861, -t775, t959, -t699, -t700, 0, 0;];
m_new_reg  = t1;
