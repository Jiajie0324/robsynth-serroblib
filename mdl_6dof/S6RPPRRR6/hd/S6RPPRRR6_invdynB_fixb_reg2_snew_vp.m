% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:58
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:58:19
% EndTime: 2019-05-05 15:58:30
% DurationCPUTime: 7.34s
% Computational Cost: add. (33098->516), mult. (63343->734), div. (0->0), fcn. (38949->8), ass. (0->344)
t533 = sin(qJ(6));
t534 = sin(qJ(5));
t538 = cos(qJ(5));
t539 = cos(qJ(4));
t581 = qJD(1) * t539;
t492 = -t538 * qJD(4) + t534 * t581;
t494 = qJD(4) * t534 + t538 * t581;
t537 = cos(qJ(6));
t444 = t537 * t492 + t494 * t533;
t446 = -t492 * t533 + t494 * t537;
t401 = t446 * t444;
t578 = qJD(1) * qJD(4);
t564 = t539 * t578;
t535 = sin(qJ(4));
t576 = qJDD(1) * t535;
t497 = -t564 - t576;
t490 = qJDD(5) - t497;
t544 = qJDD(6) + t490;
t617 = -t401 + t544;
t621 = t533 * t617;
t459 = t494 * t492;
t615 = -t459 + t490;
t620 = t534 * t615;
t619 = t537 * t617;
t618 = t538 * t615;
t517 = qJD(1) * t535 + qJD(5);
t476 = t517 * t492;
t565 = t535 * t578;
t574 = qJDD(1) * t539;
t498 = -t565 + t574;
t566 = t492 * qJD(5) - t534 * qJDD(4) - t538 * t498;
t414 = -t476 + t566;
t510 = qJD(6) + t517;
t428 = t510 * t444;
t560 = -t538 * qJDD(4) + t534 * t498;
t437 = -qJD(5) * t494 - t560;
t545 = qJD(6) * t444 - t437 * t533 + t537 * t566;
t616 = -t428 - t545;
t413 = t566 + t476;
t561 = -t537 * t437 - t533 * t566;
t340 = (qJD(6) - t510) * t446 + t561;
t409 = (qJD(5) - t517) * t494 + t560;
t542 = qJD(1) ^ 2;
t536 = sin(qJ(1));
t540 = cos(qJ(1));
t508 = t540 * g(1) + t536 * g(2);
t529 = qJDD(1) * qJ(2);
t551 = t508 - t529;
t607 = pkin(1) + qJ(3);
t614 = t542 * t607 - qJDD(3) + t551;
t442 = t444 ^ 2;
t443 = t446 ^ 2;
t488 = t492 ^ 2;
t489 = t494 ^ 2;
t509 = t510 ^ 2;
t516 = t517 ^ 2;
t613 = 2 * qJD(3);
t612 = pkin(2) + pkin(3);
t611 = pkin(4) * t535;
t610 = pkin(4) * t539;
t573 = qJDD(1) * t540;
t501 = -t536 * t542 + t573;
t609 = pkin(6) * t501;
t575 = qJDD(1) * t536;
t502 = t540 * t542 + t575;
t608 = pkin(6) * t502;
t606 = qJ(2) - pkin(7);
t605 = qJDD(1) * pkin(1);
t532 = t542 * pkin(7);
t507 = t536 * g(1) - t540 * g(2);
t552 = -qJDD(2) + t507;
t546 = t542 * qJ(2) + t552;
t562 = t607 * qJDD(1);
t543 = t562 + t546;
t557 = pkin(8) * t535 + t610;
t399 = -t497 * pkin(4) - t498 * pkin(8) - t532 + (qJD(4) * t557 + t613) * qJD(1) + t543;
t541 = qJD(4) ^ 2;
t556 = -pkin(8) * t539 + t611;
t550 = t542 * t556;
t577 = qJD(2) * qJD(1);
t527 = 0.2e1 * t577;
t457 = -qJDD(1) * pkin(7) + t527 - t614;
t563 = t539 * g(3) - t535 * t457;
t408 = -t541 * pkin(4) + qJDD(4) * pkin(8) - t535 * t550 - t563;
t358 = -t538 * t399 + t534 * t408;
t318 = t615 * pkin(5) + pkin(9) * t414 - t358;
t359 = t534 * t399 + t538 * t408;
t555 = pkin(5) * t517 - pkin(9) * t494;
t326 = -t488 * pkin(5) + t437 * pkin(9) - t517 * t555 + t359;
t281 = -t537 * t318 + t326 * t533;
t282 = t533 * t318 + t537 * t326;
t257 = -t281 * t537 + t282 * t533;
t604 = t257 * t534;
t603 = t257 * t538;
t439 = t535 * g(3) + t539 * t457;
t407 = qJDD(4) * pkin(4) + t541 * pkin(8) - t539 * t550 + t439;
t346 = t437 * pkin(5) + t488 * pkin(9) - t494 * t555 + t407;
t602 = t346 * t533;
t601 = t346 * t537;
t383 = t401 + t544;
t600 = t383 * t533;
t599 = t383 * t537;
t432 = t459 + t490;
t598 = t432 * t534;
t597 = t432 * t538;
t567 = t535 * t539 * t542;
t505 = qJDD(4) + t567;
t596 = t505 * t535;
t595 = t505 * t539;
t506 = qJDD(4) - t567;
t594 = t506 * t535;
t593 = t506 * t539;
t592 = t510 * t533;
t591 = t510 * t537;
t590 = t517 * t534;
t589 = t517 * t538;
t530 = t535 ^ 2;
t588 = t530 * t542;
t531 = t539 ^ 2;
t587 = t531 * t542;
t586 = t534 * t407;
t572 = qJD(1) * t613;
t469 = t543 + t572;
t456 = -t532 + t469;
t585 = t535 * t456;
t584 = t538 * t407;
t583 = t539 * t456;
t582 = t530 + t531;
t571 = t535 * t401;
t570 = t539 * t401;
t569 = t535 * t459;
t568 = t539 * t459;
t258 = t281 * t533 + t537 * t282;
t311 = t534 * t358 + t538 * t359;
t388 = -t535 * t439 - t539 * t563;
t470 = -0.2e1 * t577 + t614;
t416 = -t469 * t536 - t540 * t470;
t477 = -pkin(1) * t542 + t527 - t551;
t478 = t546 + t605;
t423 = t540 * t477 - t478 * t536;
t461 = -t507 * t536 - t540 * t508;
t559 = t536 * t567;
t558 = t540 * t567;
t554 = g(3) * t536 + t609;
t553 = g(3) * t540 - t608;
t310 = -t358 * t538 + t359 * t534;
t387 = t539 * t439 - t535 * t563;
t415 = t469 * t540 - t470 * t536;
t420 = t477 * t536 + t478 * t540;
t460 = t507 * t540 - t508 * t536;
t549 = -t508 + 0.2e1 * t529 + t527;
t524 = -pkin(2) * t542 + g(3);
t548 = -pkin(2) * t575 + t540 * t524 - t608;
t515 = -t541 - t587;
t514 = t541 - t587;
t513 = -t541 - t588;
t512 = -t541 + t588;
t504 = (-t530 + t531) * t542;
t503 = t582 * t542;
t500 = t582 * qJDD(1);
t499 = -0.2e1 * t565 + t574;
t496 = 0.2e1 * t564 + t576;
t491 = t582 * t578;
t475 = -t489 + t516;
t474 = t488 - t516;
t473 = t498 * t535 + t531 * t578;
t472 = t497 * t539 + t530 * t578;
t468 = -t515 * t535 - t595;
t467 = t513 * t539 - t594;
t466 = t515 * t539 - t596;
t465 = t514 * t539 + t594;
t464 = t513 * t535 + t593;
t463 = t512 * t535 + t595;
t462 = t612 * t500;
t458 = -pkin(2) * t573 - t524 * t536 - t609;
t454 = -t489 + t488;
t453 = -t500 * t540 + t503 * t536;
t452 = -t500 * t536 - t503 * t540;
t451 = -t489 - t516;
t450 = -pkin(2) * t469 + qJ(2) * g(3);
t448 = -t496 * t535 + t499 * t539;
t447 = -pkin(2) * t470 + g(3) * t607;
t441 = -t516 - t488;
t430 = t488 + t489;
t427 = -t443 + t509;
t426 = t442 - t509;
t425 = t466 * t540 - t499 * t536;
t424 = t464 * t540 - t496 * t536;
t422 = t466 * t536 + t499 * t540;
t421 = t464 * t536 + t496 * t540;
t419 = (-t492 * t538 + t494 * t534) * t517;
t418 = (-t492 * t534 - t494 * t538) * t517;
t417 = -t443 - t509;
t410 = (-qJD(5) - t517) * t494 - t560;
t405 = -t494 * t590 - t538 * t566;
t404 = t494 * t589 - t534 * t566;
t403 = -t437 * t534 + t492 * t589;
t402 = t437 * t538 + t492 * t590;
t400 = t419 * t535 - t490 * t539;
t398 = -t443 + t442;
t397 = t474 * t538 - t598;
t396 = -t475 * t534 + t618;
t395 = t474 * t534 + t597;
t394 = t475 * t538 + t620;
t391 = -t451 * t534 - t597;
t390 = t451 * t538 - t598;
t389 = -t509 - t442;
t386 = t441 * t538 - t620;
t385 = t441 * t534 + t618;
t381 = (-t444 * t537 + t446 * t533) * t510;
t380 = (-t444 * t533 - t446 * t537) * t510;
t379 = t405 * t535 - t568;
t378 = t403 * t535 + t568;
t377 = -t442 - t443;
t376 = t503 * t612 + t388;
t375 = -t468 * t606 - t499 * t612 + t585;
t374 = -t467 * t606 - t496 * t612 - t583;
t373 = t387 * t540 - t456 * t536;
t372 = t387 * t536 + t456 * t540;
t370 = -qJD(6) * t446 - t561;
t369 = -t409 * t538 - t414 * t534;
t368 = t410 * t538 + t413 * t534;
t367 = -t409 * t534 + t414 * t538;
t366 = t410 * t534 - t413 * t538;
t365 = t397 * t535 + t409 * t539;
t364 = t396 * t535 + t414 * t539;
t363 = t426 * t537 - t600;
t362 = -t427 * t533 + t619;
t361 = t426 * t533 + t599;
t360 = t427 * t537 + t621;
t356 = t391 * t539 - t413 * t535;
t355 = t391 * t535 + t413 * t539;
t354 = -pkin(8) * t390 - t584;
t353 = t466 * t612 - t468 * t607 + t563;
t352 = t464 * t612 - t467 * t607 + t439;
t351 = -t417 * t533 - t599;
t350 = t417 * t537 - t600;
t349 = t386 * t539 - t410 * t535;
t348 = t386 * t535 + t410 * t539;
t347 = -pkin(8) * t385 - t586;
t345 = t368 * t535 + t454 * t539;
t344 = -t428 + t545;
t339 = (qJD(6) + t510) * t446 + t561;
t338 = -t446 * t592 - t537 * t545;
t337 = t446 * t591 - t533 * t545;
t336 = -t370 * t533 + t444 * t591;
t335 = t370 * t537 + t444 * t592;
t334 = t389 * t537 - t621;
t333 = t389 * t533 + t619;
t332 = t369 * t539 - t430 * t535;
t331 = t369 * t535 + t430 * t539;
t330 = -t380 * t534 + t381 * t538;
t329 = t380 * t538 + t381 * t534;
t328 = t330 * t535 - t539 * t544;
t327 = -pkin(4) * t390 + t359;
t325 = -pkin(4) * t385 + t358;
t324 = -t388 * t606 - t456 * t612;
t322 = t355 * t540 - t390 * t536;
t321 = t355 * t536 + t390 * t540;
t320 = t348 * t540 - t385 * t536;
t319 = t348 * t536 + t385 * t540;
t315 = -t361 * t534 + t363 * t538;
t314 = -t360 * t534 + t362 * t538;
t313 = t361 * t538 + t363 * t534;
t312 = t360 * t538 + t362 * t534;
t309 = -t350 * t534 + t351 * t538;
t308 = t350 * t538 + t351 * t534;
t307 = -pkin(9) * t350 - t601;
t306 = t331 * t540 - t367 * t536;
t305 = t331 * t536 + t367 * t540;
t304 = -pkin(9) * t333 - t602;
t303 = -t340 * t537 - t344 * t533;
t302 = -t339 * t537 - t533 * t616;
t301 = -t340 * t533 + t344 * t537;
t300 = -t339 * t533 + t537 * t616;
t299 = t387 * t612 - t388 * t607;
t298 = -t337 * t534 + t338 * t538;
t297 = -t335 * t534 + t336 * t538;
t296 = t337 * t538 + t338 * t534;
t295 = t335 * t538 + t336 * t534;
t294 = -t333 * t534 + t334 * t538;
t293 = t333 * t538 + t334 * t534;
t292 = t311 * t539 - t407 * t535;
t291 = t311 * t535 + t407 * t539;
t290 = -pkin(8) * t367 - t310;
t289 = t298 * t535 - t570;
t288 = t297 * t535 + t570;
t287 = t315 * t535 + t340 * t539;
t286 = t314 * t535 + t344 * t539;
t285 = -pkin(5) * t616 + pkin(9) * t351 - t602;
t284 = t309 * t539 + t535 * t616;
t283 = t309 * t535 - t539 * t616;
t279 = -pkin(5) * t339 + pkin(9) * t334 + t601;
t278 = t294 * t539 + t339 * t535;
t277 = t294 * t535 - t339 * t539;
t276 = t291 * t540 - t310 * t536;
t275 = t291 * t536 + t310 * t540;
t274 = -t301 * t534 + t303 * t538;
t273 = -t300 * t534 + t302 * t538;
t272 = t301 * t538 + t303 * t534;
t271 = t300 * t538 + t302 * t534;
t270 = t273 * t535 + t398 * t539;
t269 = t283 * t540 - t308 * t536;
t268 = t283 * t536 + t308 * t540;
t267 = t274 * t539 + t377 * t535;
t266 = t274 * t535 - t377 * t539;
t265 = pkin(4) * t413 + pkin(8) * t391 + t355 * t612 - t356 * t607 - t586;
t264 = pkin(4) * t410 + pkin(8) * t386 + t348 * t612 - t349 * t607 + t584;
t263 = t539 * t327 + t535 * t354 - t356 * t606 - t390 * t612;
t262 = t539 * t325 + t535 * t347 - t349 * t606 - t385 * t612;
t261 = t277 * t540 - t293 * t536;
t260 = t277 * t536 + t293 * t540;
t259 = -pkin(4) * t308 - pkin(5) * t350 + t282;
t256 = -pkin(4) * t293 - pkin(5) * t333 + t281;
t255 = -pkin(4) * t272 - pkin(5) * t301;
t254 = -pkin(8) * t308 - t285 * t534 + t307 * t538;
t253 = pkin(5) * t346 + pkin(9) * t258;
t252 = t535 * t290 - t606 * t332 + (-t610 - t612) * t367;
t251 = pkin(4) * t430 + pkin(8) * t369 + t331 * t612 - t332 * t607 + t311;
t250 = -pkin(8) * t293 - t279 * t534 + t304 * t538;
t249 = -pkin(9) * t301 - t257;
t248 = -pkin(5) * t377 + pkin(9) * t303 + t258;
t247 = t266 * t540 - t272 * t536;
t246 = t266 * t536 + t272 * t540;
t245 = pkin(4) * t407 + pkin(8) * t311 + t291 * t612 - t292 * t607;
t244 = -t606 * t292 + (-t557 - t612) * t310;
t243 = t258 * t538 - t604;
t242 = t258 * t534 + t603;
t241 = t243 * t539 - t346 * t535;
t240 = t243 * t535 + t346 * t539;
t239 = -pkin(4) * t242 - pkin(5) * t257;
t238 = -pkin(4) * t616 + pkin(8) * t309 + t283 * t612 - t284 * t607 + t538 * t285 + t534 * t307;
t237 = -pkin(8) * t272 - t248 * t534 + t249 * t538;
t236 = -pkin(4) * t339 + pkin(8) * t294 + t277 * t612 - t278 * t607 + t538 * t279 + t534 * t304;
t235 = t535 * t254 + t539 * t259 - t284 * t606 - t308 * t612;
t234 = t535 * t250 + t539 * t256 - t278 * t606 - t293 * t612;
t233 = -pkin(8) * t242 - pkin(9) * t603 - t253 * t534;
t232 = t240 * t540 - t242 * t536;
t231 = t240 * t536 + t242 * t540;
t230 = -pkin(4) * t377 + pkin(8) * t274 + t538 * t248 + t534 * t249 + t266 * t612 - t267 * t607;
t229 = t535 * t237 + t539 * t255 - t267 * t606 - t272 * t612;
t228 = pkin(4) * t346 + pkin(8) * t243 - pkin(9) * t604 + t240 * t612 - t241 * t607 + t538 * t253;
t227 = t535 * t233 + t539 * t239 - t241 * t606 - t242 * t612;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t502, -t501, 0, t461, 0, 0, 0, 0, 0, 0, 0, t502, t501, t423, 0, 0, 0, 0, 0, 0, 0, t501, -t502, t416, 0, 0, 0, 0, 0, 0, t424, t425, t453, t373, 0, 0, 0, 0, 0, 0, t320, t322, t306, t276, 0, 0, 0, 0, 0, 0, t261, t269, t247, t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t501, -t502, 0, t460, 0, 0, 0, 0, 0, 0, 0, -t501, t502, t420, 0, 0, 0, 0, 0, 0, 0, t502, t501, t415, 0, 0, 0, 0, 0, 0, t421, t422, t452, t372, 0, 0, 0, 0, 0, 0, t319, t321, t305, t275, 0, 0, 0, 0, 0, 0, t260, t268, t246, t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t467, t468, 0, t388, 0, 0, 0, 0, 0, 0, t349, t356, t332, t292, 0, 0, 0, 0, 0, 0, t278, t284, t267, t241; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t501, 0, -t502, 0, -t554, -t553, -t460, -pkin(6) * t460, 0, -t501, t502, 0, 0, 0, -t420, t554, t553, -pkin(6) * t420 + (-pkin(1) * t536 + qJ(2) * t540) * g(3), 0, t502, t501, 0, 0, 0, -t415, t548, t458, -pkin(6) * t415 - t447 * t536 + t450 * t540, t473 * t540 - t559, t448 * t540 - t504 * t536, t465 * t540 - t536 * t574, t472 * t540 + t559, t463 * t540 + t535 * t575, -qJDD(4) * t536 - t491 * t540, -pkin(6) * t421 - t352 * t536 + t374 * t540, -pkin(6) * t422 - t353 * t536 + t375 * t540, -pkin(6) * t452 + t376 * t540 + t462 * t536, -pkin(6) * t372 - t299 * t536 + t324 * t540, t379 * t540 - t404 * t536, t345 * t540 - t366 * t536, t364 * t540 - t394 * t536, t378 * t540 - t402 * t536, t365 * t540 - t395 * t536, t400 * t540 - t418 * t536, -pkin(6) * t319 + t262 * t540 - t264 * t536, -pkin(6) * t321 + t263 * t540 - t265 * t536, -pkin(6) * t305 - t251 * t536 + t252 * t540, -pkin(6) * t275 + t244 * t540 - t245 * t536, t289 * t540 - t296 * t536, t270 * t540 - t271 * t536, t286 * t540 - t312 * t536, t288 * t540 - t295 * t536, t287 * t540 - t313 * t536, t328 * t540 - t329 * t536, -pkin(6) * t260 + t234 * t540 - t236 * t536, -pkin(6) * t268 + t235 * t540 - t238 * t536, -pkin(6) * t246 + t229 * t540 - t230 * t536, -pkin(6) * t231 + t227 * t540 - t228 * t536; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t502, 0, t501, 0, t553, -t554, t461, pkin(6) * t461, 0, -t502, -t501, 0, 0, 0, t423, -t553, t554, pkin(6) * t423 + (pkin(1) * t540 + qJ(2) * t536) * g(3), 0, -t501, t502, 0, 0, 0, t416, -t458, t548, pkin(6) * t416 + t447 * t540 + t450 * t536, t473 * t536 + t558, t448 * t536 + t504 * t540, t465 * t536 + t539 * t573, t472 * t536 - t558, t463 * t536 - t535 * t573, qJDD(4) * t540 - t491 * t536, pkin(6) * t424 + t352 * t540 + t374 * t536, pkin(6) * t425 + t353 * t540 + t375 * t536, pkin(6) * t453 + t376 * t536 - t462 * t540, pkin(6) * t373 + t299 * t540 + t324 * t536, t379 * t536 + t404 * t540, t345 * t536 + t366 * t540, t364 * t536 + t394 * t540, t378 * t536 + t402 * t540, t365 * t536 + t395 * t540, t400 * t536 + t418 * t540, pkin(6) * t320 + t262 * t536 + t264 * t540, pkin(6) * t322 + t263 * t536 + t265 * t540, pkin(6) * t306 + t251 * t540 + t252 * t536, pkin(6) * t276 + t244 * t536 + t245 * t540, t289 * t536 + t296 * t540, t270 * t536 + t271 * t540, t286 * t536 + t312 * t540, t288 * t536 + t295 * t540, t287 * t536 + t313 * t540, t328 * t536 + t329 * t540, pkin(6) * t261 + t234 * t536 + t236 * t540, pkin(6) * t269 + t235 * t536 + t238 * t540, pkin(6) * t247 + t229 * t536 + t230 * t540, pkin(6) * t232 + t227 * t536 + t228 * t540; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t507, t508, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t552 - 0.2e1 * t605, t549, pkin(1) * t478 + qJ(2) * t477, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) + t549, t552 + 0.2e1 * t562 + t572, -qJ(2) * t470 + t469 * t607, (t498 - t565) * t539, -t496 * t539 - t499 * t535, -t514 * t535 + t593, (-t497 + t564) * t535, t512 * t539 - t596, 0, t464 * t606 + t496 * t607 + t585, t466 * t606 + t499 * t607 + t583, -t500 * t606 - t503 * t607 - t387, t387 * t606 + t456 * t607, t405 * t539 + t569, t368 * t539 - t454 * t535, t396 * t539 - t414 * t535, t403 * t539 - t569, t397 * t539 - t409 * t535, t419 * t539 + t490 * t535, -t535 * t325 + t539 * t347 + t348 * t606 + t385 * t607, -t535 * t327 + t539 * t354 + t355 * t606 + t390 * t607, t539 * t290 + t606 * t331 + (t607 + t611) * t367, t606 * t291 + (t556 + t607) * t310, t298 * t539 + t571, t273 * t539 - t398 * t535, t314 * t539 - t344 * t535, t297 * t539 - t571, t315 * t539 - t340 * t535, t330 * t539 + t535 * t544, t539 * t250 - t535 * t256 + t277 * t606 + t293 * t607, t539 * t254 - t535 * t259 + t283 * t606 + t308 * t607, t539 * t237 - t535 * t255 + t266 * t606 + t272 * t607, t539 * t233 - t535 * t239 + t240 * t606 + t242 * t607;];
tauB_reg  = t1;
