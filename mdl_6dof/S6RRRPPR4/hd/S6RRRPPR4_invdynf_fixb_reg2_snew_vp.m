% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:48:40
% EndTime: 2019-05-07 04:48:49
% DurationCPUTime: 9.78s
% Computational Cost: add. (42787->319), mult. (89554->384), div. (0->0), fcn. (64076->10), ass. (0->221)
t2414 = sin(qJ(2));
t2455 = qJD(1) * t2414;
t2403 = qJD(2) * t2455;
t2418 = cos(qJ(2));
t2439 = t2418 * qJDD(1);
t2434 = t2403 - t2439;
t2432 = -qJDD(3) - t2434;
t2413 = sin(qJ(3));
t2417 = cos(qJ(3));
t2380 = -t2417 * qJD(2) + t2413 * t2455;
t2381 = qJD(2) * t2413 + t2417 * t2455;
t2409 = sin(pkin(10));
t2410 = cos(pkin(10));
t2359 = t2380 * t2410 + t2409 * t2381;
t2361 = -t2380 * t2409 + t2381 * t2410;
t2449 = t2359 * t2361;
t2311 = t2432 - t2449;
t2358 = t2361 ^ 2;
t2454 = qJD(1) * t2418;
t2400 = -qJD(3) + t2454;
t2459 = t2400 ^ 2;
t2470 = -t2358 - t2459;
t2281 = t2311 * t2409 + t2410 * t2470;
t2284 = t2311 * t2410 - t2409 * t2470;
t2243 = t2281 * t2413 - t2284 * t2417;
t2438 = qJD(2) * t2454;
t2440 = t2414 * qJDD(1);
t2428 = t2438 + t2440;
t2425 = -t2413 * qJDD(2) - t2417 * t2428;
t2355 = -t2380 * qJD(3) - t2425;
t2424 = t2417 * qJDD(2) - t2413 * t2428;
t2423 = -t2381 * qJD(3) + t2424;
t2421 = t2410 * t2355 + t2409 * t2423;
t2448 = t2359 * t2400;
t2293 = t2421 + t2448;
t2232 = t2243 * t2418 - t2293 * t2414;
t2251 = t2281 * t2417 + t2284 * t2413;
t2415 = sin(qJ(1));
t2419 = cos(qJ(1));
t2496 = t2232 * t2415 + t2251 * t2419;
t2495 = t2232 * t2419 - t2251 * t2415;
t2230 = t2243 * t2414 + t2293 * t2418;
t2312 = t2432 + t2449;
t2463 = t2359 ^ 2;
t2469 = -t2459 - t2463;
t2475 = t2312 * t2409 + t2410 * t2469;
t2476 = -t2410 * t2312 + t2409 * t2469;
t2479 = t2413 * t2475 + t2417 * t2476;
t2435 = t2355 * t2409 - t2410 * t2423;
t2447 = t2361 * t2400;
t2429 = t2435 - t2447;
t2480 = -t2413 * t2476 + t2417 * t2475;
t2486 = t2414 * t2429 + t2418 * t2480;
t2492 = t2415 * t2486 - t2419 * t2479;
t2491 = t2415 * t2479 + t2419 * t2486;
t2488 = t2414 * t2480 - t2418 * t2429;
t2294 = t2421 - t2448;
t2430 = -t2435 - t2447;
t2467 = t2294 * t2409 + t2410 * t2430;
t2468 = -t2410 * t2294 + t2409 * t2430;
t2473 = t2413 * t2467 + t2417 * t2468;
t2302 = t2358 + t2463;
t2474 = -t2413 * t2468 + t2417 * t2467;
t2481 = -t2302 * t2414 + t2418 * t2474;
t2487 = t2415 * t2481 - t2419 * t2473;
t2485 = t2415 * t2473 + t2419 * t2481;
t2482 = t2302 * t2418 + t2414 * t2474;
t2446 = t2380 * t2381;
t2348 = -t2432 - t2446;
t2466 = qJD(2) ^ 2;
t2412 = sin(qJ(6));
t2416 = cos(qJ(6));
t2323 = -t2416 * t2359 + t2361 * t2412;
t2465 = t2323 ^ 2;
t2325 = t2359 * t2412 + t2361 * t2416;
t2464 = t2325 ^ 2;
t2462 = t2380 ^ 2;
t2461 = t2381 ^ 2;
t2395 = qJD(6) + t2400;
t2460 = t2395 ^ 2;
t2458 = -2 * qJD(4);
t2457 = -2 * qJD(5);
t2456 = t2418 * g(3);
t2451 = t2323 * t2325;
t2450 = t2323 * t2395;
t2445 = t2380 * t2400;
t2444 = t2395 * t2325;
t2443 = qJD(3) + t2400;
t2326 = pkin(4) * t2359 - qJ(5) * t2361;
t2442 = (2 * qJD(4)) + t2326;
t2392 = t2415 * g(1) - t2419 * g(2);
t2420 = qJD(1) ^ 2;
t2373 = qJDD(1) * pkin(1) + t2420 * pkin(7) + t2392;
t2383 = 0.2e1 * t2438 + t2440;
t2330 = (t2434 + t2403) * pkin(2) - t2383 * pkin(8) - t2373;
t2393 = -g(1) * t2419 - g(2) * t2415;
t2374 = -pkin(1) * t2420 + qJDD(1) * pkin(7) + t2393;
t2369 = -g(3) * t2414 + t2418 * t2374;
t2382 = (-pkin(2) * t2418 - pkin(8) * t2414) * qJD(1);
t2341 = -pkin(2) * t2466 + qJDD(2) * pkin(8) + t2382 * t2454 + t2369;
t2299 = t2413 * t2330 + t2417 * t2341;
t2406 = t2414 ^ 2;
t2407 = t2418 ^ 2;
t2441 = t2406 + t2407;
t2367 = -pkin(3) * t2400 - qJ(4) * t2381;
t2269 = -pkin(3) * t2462 + qJ(4) * t2423 + t2400 * t2367 + t2299;
t2298 = t2417 * t2330 - t2413 * t2341;
t2422 = (-t2355 + t2445) * qJ(4) + t2348 * pkin(3) + t2298;
t2235 = t2410 * t2269 + t2359 * t2458 + t2409 * t2422;
t2437 = t2323 * qJD(6) - t2412 * t2435 - t2416 * t2421;
t2436 = t2409 * t2269 - t2410 * t2422;
t2433 = pkin(5) * t2400 - pkin(9) * t2361;
t2431 = -qJDD(6) - t2432;
t2427 = pkin(4) * t2432 - qJ(5) * t2459 + qJDD(5) + t2436;
t2426 = -t2325 * qJD(6) - t2412 * t2421 + t2416 * t2435;
t2222 = -pkin(4) * t2459 - qJ(5) * t2432 - t2359 * t2326 + t2400 * t2457 + t2235;
t2340 = t2456 - qJDD(2) * pkin(2) - t2466 * pkin(8) + (qJD(1) * t2382 + t2374) * t2414;
t2287 = -t2423 * pkin(3) - t2462 * qJ(4) + t2381 * t2367 + qJDD(4) + t2340;
t2236 = t2435 * pkin(4) + (-pkin(4) * t2400 + t2457) * t2361 + t2287 - t2293 * qJ(5);
t2399 = t2418 * t2420 * t2414;
t2397 = -t2407 * t2420 - t2466;
t2396 = -t2406 * t2420 - t2466;
t2390 = -qJDD(2) + t2399;
t2389 = qJDD(2) + t2399;
t2388 = t2441 * t2420;
t2387 = -qJDD(1) * t2415 - t2419 * t2420;
t2386 = qJDD(1) * t2419 - t2415 * t2420;
t2385 = t2441 * qJDD(1);
t2384 = -0.2e1 * t2403 + t2439;
t2368 = -t2414 * t2374 - t2456;
t2366 = t2390 * t2418 - t2396 * t2414;
t2365 = -t2389 * t2414 + t2397 * t2418;
t2364 = t2390 * t2414 + t2396 * t2418;
t2363 = t2389 * t2418 + t2397 * t2414;
t2362 = -t2459 - t2461;
t2356 = -t2459 - t2462;
t2347 = t2432 - t2446;
t2346 = -t2461 - t2462;
t2336 = -t2368 * t2414 + t2369 * t2418;
t2335 = t2368 * t2418 + t2369 * t2414;
t2334 = t2380 * t2443 + t2425;
t2333 = t2355 + t2445;
t2332 = -t2381 * t2443 + t2424;
t2331 = (qJD(3) - t2400) * t2381 - t2424;
t2322 = t2347 * t2417 - t2362 * t2413;
t2321 = t2347 * t2413 + t2362 * t2417;
t2310 = -t2348 * t2413 + t2356 * t2417;
t2309 = t2348 * t2417 + t2356 * t2413;
t2303 = -t2460 - t2464;
t2297 = t2332 * t2417 - t2334 * t2413;
t2296 = t2332 * t2413 + t2334 * t2417;
t2286 = t2322 * t2418 + t2333 * t2414;
t2283 = t2322 * t2414 - t2333 * t2418;
t2280 = t2310 * t2418 + t2331 * t2414;
t2279 = t2310 * t2414 - t2331 * t2418;
t2278 = -t2460 - t2465;
t2277 = t2431 - t2451;
t2276 = -t2431 - t2451;
t2271 = t2297 * t2418 + t2346 * t2414;
t2270 = t2297 * t2414 - t2346 * t2418;
t2265 = -t2464 - t2465;
t2264 = -t2298 * t2413 + t2299 * t2417;
t2263 = t2298 * t2417 + t2299 * t2413;
t2258 = t2277 * t2416 - t2303 * t2412;
t2257 = t2277 * t2412 + t2303 * t2416;
t2256 = t2264 * t2418 + t2340 * t2414;
t2255 = t2264 * t2414 - t2340 * t2418;
t2250 = t2437 + t2450;
t2249 = t2437 - t2450;
t2248 = t2426 + t2444;
t2247 = t2426 - t2444;
t2246 = -t2276 * t2412 + t2278 * t2416;
t2245 = t2276 * t2416 + t2278 * t2412;
t2234 = t2361 * t2458 - t2436;
t2225 = t2257 * t2409 + t2258 * t2410;
t2224 = -t2257 * t2410 + t2258 * t2409;
t2223 = t2442 * t2361 + t2427;
t2221 = pkin(5) * t2435 + pkin(9) * t2463 - t2361 * t2433 + t2236;
t2216 = t2248 * t2416 - t2249 * t2412;
t2215 = t2248 * t2412 + t2249 * t2416;
t2214 = t2245 * t2409 + t2246 * t2410;
t2213 = -t2245 * t2410 + t2246 * t2409;
t2212 = -pkin(5) * t2463 + pkin(9) * t2435 - t2400 * t2433 + t2222;
t2211 = t2432 * pkin(5) - t2294 * pkin(9) + (pkin(5) * t2359 + t2442) * t2361 + t2427;
t2210 = -t2234 * t2409 + t2235 * t2410;
t2209 = t2234 * t2410 + t2235 * t2409;
t2208 = -t2224 * t2413 + t2225 * t2417;
t2207 = t2224 * t2417 + t2225 * t2413;
t2206 = t2222 * t2410 + t2223 * t2409;
t2205 = t2222 * t2409 - t2223 * t2410;
t2204 = t2215 * t2409 + t2216 * t2410;
t2203 = -t2215 * t2410 + t2216 * t2409;
t2202 = -t2213 * t2413 + t2214 * t2417;
t2201 = t2213 * t2417 + t2214 * t2413;
t2200 = t2208 * t2418 + t2250 * t2414;
t2199 = t2208 * t2414 - t2250 * t2418;
t2198 = t2211 * t2412 + t2212 * t2416;
t2197 = t2211 * t2416 - t2212 * t2412;
t2196 = t2202 * t2418 + t2247 * t2414;
t2195 = t2202 * t2414 - t2247 * t2418;
t2194 = -t2209 * t2413 + t2210 * t2417;
t2193 = t2209 * t2417 + t2210 * t2413;
t2192 = t2194 * t2418 + t2287 * t2414;
t2191 = t2194 * t2414 - t2287 * t2418;
t2190 = -t2205 * t2413 + t2206 * t2417;
t2189 = t2205 * t2417 + t2206 * t2413;
t2188 = -t2203 * t2413 + t2204 * t2417;
t2187 = t2203 * t2417 + t2204 * t2413;
t2186 = t2190 * t2418 + t2236 * t2414;
t2185 = t2190 * t2414 - t2236 * t2418;
t2184 = t2188 * t2418 - t2265 * t2414;
t2183 = t2188 * t2414 + t2265 * t2418;
t2182 = -t2197 * t2412 + t2198 * t2416;
t2181 = t2197 * t2416 + t2198 * t2412;
t2180 = t2181 * t2409 + t2182 * t2410;
t2179 = -t2181 * t2410 + t2182 * t2409;
t2178 = -t2179 * t2413 + t2180 * t2417;
t2177 = t2179 * t2417 + t2180 * t2413;
t2176 = t2178 * t2418 + t2221 * t2414;
t2175 = t2178 * t2414 - t2221 * t2418;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2387, -t2386, 0, -t2392 * t2415 + t2393 * t2419, 0, 0, 0, 0, 0, 0, t2365 * t2419 - t2384 * t2415, t2366 * t2419 + t2383 * t2415, t2385 * t2419 - t2388 * t2415, t2336 * t2419 - t2373 * t2415, 0, 0, 0, 0, 0, 0, t2280 * t2419 + t2309 * t2415, t2286 * t2419 + t2321 * t2415, t2271 * t2419 + t2296 * t2415, t2256 * t2419 + t2263 * t2415, 0, 0, 0, 0, 0, 0, t2491, -t2495, t2485, t2192 * t2419 + t2193 * t2415, 0, 0, 0, 0, 0, 0, t2491, t2485, t2495, t2186 * t2419 + t2189 * t2415, 0, 0, 0, 0, 0, 0, t2196 * t2419 + t2201 * t2415, t2200 * t2419 + t2207 * t2415, t2184 * t2419 + t2187 * t2415, t2176 * t2419 + t2177 * t2415; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2386, t2387, 0, t2392 * t2419 + t2393 * t2415, 0, 0, 0, 0, 0, 0, t2365 * t2415 + t2384 * t2419, t2366 * t2415 - t2383 * t2419, t2385 * t2415 + t2388 * t2419, t2336 * t2415 + t2373 * t2419, 0, 0, 0, 0, 0, 0, t2280 * t2415 - t2309 * t2419, t2286 * t2415 - t2321 * t2419, t2271 * t2415 - t2296 * t2419, t2256 * t2415 - t2263 * t2419, 0, 0, 0, 0, 0, 0, t2492, -t2496, t2487, t2192 * t2415 - t2193 * t2419, 0, 0, 0, 0, 0, 0, t2492, t2487, t2496, t2186 * t2415 - t2189 * t2419, 0, 0, 0, 0, 0, 0, t2196 * t2415 - t2201 * t2419, t2200 * t2415 - t2207 * t2419, t2184 * t2415 - t2187 * t2419, t2176 * t2415 - t2177 * t2419; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2363, t2364, 0, t2335, 0, 0, 0, 0, 0, 0, t2279, t2283, t2270, t2255, 0, 0, 0, 0, 0, 0, t2488, -t2230, t2482, t2191, 0, 0, 0, 0, 0, 0, t2488, t2482, t2230, t2185, 0, 0, 0, 0, 0, 0, t2195, t2199, t2183, t2175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2420, -qJDD(1), 0, t2393, 0, 0, 0, 0, 0, 0, t2365, t2366, t2385, t2336, 0, 0, 0, 0, 0, 0, t2280, t2286, t2271, t2256, 0, 0, 0, 0, 0, 0, t2486, -t2232, t2481, t2192, 0, 0, 0, 0, 0, 0, t2486, t2481, t2232, t2186, 0, 0, 0, 0, 0, 0, t2196, t2200, t2184, t2176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2420, 0, t2392, 0, 0, 0, 0, 0, 0, t2384, -t2383, t2388, t2373, 0, 0, 0, 0, 0, 0, -t2309, -t2321, -t2296, -t2263, 0, 0, 0, 0, 0, 0, -t2479, -t2251, -t2473, -t2193, 0, 0, 0, 0, 0, 0, -t2479, -t2473, t2251, -t2189, 0, 0, 0, 0, 0, 0, -t2201, -t2207, -t2187, -t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2363, t2364, 0, t2335, 0, 0, 0, 0, 0, 0, t2279, t2283, t2270, t2255, 0, 0, 0, 0, 0, 0, t2488, -t2230, t2482, t2191, 0, 0, 0, 0, 0, 0, t2488, t2482, t2230, t2185, 0, 0, 0, 0, 0, 0, t2195, t2199, t2183, t2175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2397, t2390, t2439, t2369, 0, 0, 0, 0, 0, 0, t2310, t2322, t2297, t2264, 0, 0, 0, 0, 0, 0, t2480, -t2243, t2474, t2194, 0, 0, 0, 0, 0, 0, t2480, t2474, t2243, t2190, 0, 0, 0, 0, 0, 0, t2202, t2208, t2188, t2178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2389, t2396, -t2440, t2368, 0, 0, 0, 0, 0, 0, -t2331, -t2333, -t2346, -t2340, 0, 0, 0, 0, 0, 0, -t2429, -t2293, t2302, -t2287, 0, 0, 0, 0, 0, 0, -t2429, t2302, t2293, -t2236, 0, 0, 0, 0, 0, 0, -t2247, -t2250, t2265, -t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2384, t2383, -t2388, -t2373, 0, 0, 0, 0, 0, 0, t2309, t2321, t2296, t2263, 0, 0, 0, 0, 0, 0, t2479, t2251, t2473, t2193, 0, 0, 0, 0, 0, 0, t2479, t2473, -t2251, t2189, 0, 0, 0, 0, 0, 0, t2201, t2207, t2187, t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, t2347, t2332, t2299, 0, 0, 0, 0, 0, 0, t2475, t2284, t2467, t2210, 0, 0, 0, 0, 0, 0, t2475, t2467, -t2284, t2206, 0, 0, 0, 0, 0, 0, t2214, t2225, t2204, t2180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2348, t2362, t2334, t2298, 0, 0, 0, 0, 0, 0, t2476, t2281, t2468, t2209, 0, 0, 0, 0, 0, 0, t2476, t2468, -t2281, t2205, 0, 0, 0, 0, 0, 0, t2213, t2224, t2203, t2179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2331, t2333, t2346, t2340, 0, 0, 0, 0, 0, 0, t2429, t2293, -t2302, t2287, 0, 0, 0, 0, 0, 0, t2429, -t2302, -t2293, t2236, 0, 0, 0, 0, 0, 0, t2247, t2250, -t2265, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2469, t2311, t2430, t2235, 0, 0, 0, 0, 0, 0, t2469, t2430, -t2311, t2222, 0, 0, 0, 0, 0, 0, t2246, t2258, t2216, t2182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2312, t2470, -t2294, t2234, 0, 0, 0, 0, 0, 0, -t2312, -t2294, -t2470, -t2223, 0, 0, 0, 0, 0, 0, -t2245, -t2257, -t2215, -t2181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2429, t2293, -t2302, t2287, 0, 0, 0, 0, 0, 0, t2429, -t2302, -t2293, t2236, 0, 0, 0, 0, 0, 0, t2247, t2250, -t2265, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2469, t2430, -t2311, t2222, 0, 0, 0, 0, 0, 0, t2246, t2258, t2216, t2182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2429, -t2302, -t2293, t2236, 0, 0, 0, 0, 0, 0, t2247, t2250, -t2265, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2312, t2294, t2470, t2223, 0, 0, 0, 0, 0, 0, t2245, t2257, t2215, t2181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2278, t2277, t2248, t2198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2276, t2303, t2249, t2197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2247, -t2250, t2265, -t2221;];
f_new_reg  = t1;
