% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPPR4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR4_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:46:16
% EndTime: 2019-05-07 04:46:49
% DurationCPUTime: 14.90s
% Computational Cost: add. (51936->563), mult. (108847->733), div. (0->0), fcn. (78369->10), ass. (0->359)
t319 = cos(pkin(10));
t318 = sin(pkin(10));
t323 = sin(qJ(2));
t377 = qJD(1) * qJD(2);
t309 = t323 * t377;
t327 = cos(qJ(2));
t376 = t327 * qJDD(1);
t297 = -t309 + t376;
t291 = -qJDD(3) + t297;
t322 = sin(qJ(3));
t326 = cos(qJ(3));
t384 = qJD(1) * t323;
t292 = -t326 * qJD(2) + t322 * t384;
t293 = t322 * qJD(2) + t326 * t384;
t269 = t319 * t292 + t318 * t293;
t271 = -t318 * t292 + t319 * t293;
t397 = t271 * t269;
t338 = t291 - t397;
t405 = t338 * t318;
t268 = t271 ^ 2;
t307 = t327 * qJD(1) - qJD(3);
t428 = t307 ^ 2;
t442 = -t268 - t428;
t152 = t319 * t442 + t405;
t404 = t338 * t319;
t154 = -t318 * t442 + t404;
t109 = t152 * t326 + t154 * t322;
t310 = t323 * qJDD(1);
t371 = t327 * t377;
t296 = t310 + t371;
t345 = -t322 * qJDD(2) - t326 * t296;
t264 = -t292 * qJD(3) - t345;
t346 = t326 * qJDD(2) - t322 * t296;
t335 = qJD(3) * t293 - t346;
t213 = t319 * t264 - t318 * t335;
t251 = t269 * t307;
t444 = t251 + t213;
t94 = t152 * t322 - t154 * t326;
t504 = -pkin(7) * (-t323 * t444 + t327 * t94) - pkin(1) * t109;
t502 = pkin(2) * t109;
t501 = pkin(8) * t109;
t500 = -pkin(2) * t444 - pkin(8) * t94;
t430 = t269 ^ 2;
t245 = t430 - t428;
t159 = t245 * t318 - t404;
t163 = t245 * t319 + t405;
t212 = t264 * t318 + t319 * t335;
t252 = t271 * t307;
t174 = t212 + t252;
t498 = -t327 * t174 + t323 * (t159 * t322 - t163 * t326);
t445 = t212 - t252;
t124 = -t445 * t318 + t319 * t444;
t406 = t444 * t318;
t126 = t445 * t319 + t406;
t226 = t430 - t268;
t497 = -t327 * t226 + t323 * (t124 * t322 + t126 * t326);
t179 = -t251 + t213;
t461 = -t174 * t319 + t179 * t318;
t462 = -t174 * t318 - t319 * t179;
t477 = t322 * t461 + t326 * t462;
t496 = pkin(2) * t477;
t495 = pkin(3) * t152;
t494 = pkin(8) * t477;
t493 = qJ(4) * t152;
t492 = qJ(4) * t154;
t187 = -t430 - t268;
t478 = -t322 * t462 + t326 * t461;
t491 = -pkin(2) * t187 + pkin(8) * t478;
t490 = -t124 * t326 + t126 * t322;
t488 = t159 * t326 + t163 * t322;
t486 = pkin(7) * (t187 * t323 + t327 * t478) - pkin(1) * t477;
t206 = t291 + t397;
t403 = t206 * t318;
t441 = -t428 - t430;
t449 = t319 * t441 + t403;
t196 = t319 * t206;
t450 = t318 * t441 - t196;
t459 = t322 * t449 + t326 * t450;
t485 = pkin(2) * t459;
t424 = pkin(3) * t462;
t484 = pkin(8) * t459;
t483 = qJ(4) * t462;
t460 = -t322 * t450 + t326 * t449;
t480 = -pkin(2) * t445 + pkin(8) * t460;
t479 = -pkin(3) * t187 + qJ(4) * t461;
t246 = -t268 + t428;
t463 = t319 * t246 - t403;
t464 = -t246 * t318 - t196;
t476 = t322 * t464 + t326 * t463;
t475 = pkin(7) * (t323 * t445 + t327 * t460) - pkin(1) * t459;
t474 = t323 * (-t322 * t463 + t326 * t464) - t327 * t179;
t423 = pkin(3) * t450;
t471 = qJ(4) * t449;
t470 = qJ(4) * t450;
t469 = qJ(5) * t444;
t329 = qJD(1) ^ 2;
t324 = sin(qJ(1));
t328 = cos(qJ(1));
t355 = t328 * g(1) + t324 * g(2);
t414 = qJDD(1) * pkin(7);
t284 = -t329 * pkin(1) - t355 + t414;
t358 = -t327 * pkin(2) - t323 * pkin(8);
t363 = t329 * t358 + t284;
t420 = t327 * g(3);
t427 = qJD(2) ^ 2;
t241 = -qJDD(2) * pkin(2) - t427 * pkin(8) + t363 * t323 + t420;
t275 = -t307 * pkin(3) - t293 * qJ(4);
t429 = t292 ^ 2;
t156 = t335 * pkin(3) - t429 * qJ(4) + t293 * t275 + qJDD(4) + t241;
t465 = t212 * pkin(4) + t156 - t469;
t321 = sin(qJ(6));
t325 = cos(qJ(6));
t222 = -t325 * t269 + t271 * t321;
t224 = t269 * t321 + t271 * t325;
t151 = t224 * t222;
t286 = qJDD(6) + t291;
t446 = -t151 + t286;
t454 = t321 * t446;
t451 = t325 * t446;
t396 = t293 * t292;
t337 = -t291 - t396;
t448 = t322 * t337;
t447 = t326 * t337;
t131 = -t222 * qJD(6) + t321 * t212 + t325 * t213;
t304 = qJD(6) + t307;
t197 = t304 * t222;
t105 = -t197 + t131;
t383 = qJD(4) * t269;
t261 = -0.2e1 * t383;
t381 = qJD(5) * t307;
t443 = t261 - 0.2e1 * t381;
t280 = t292 * t307;
t236 = t264 - t280;
t225 = pkin(4) * t269 - qJ(5) * t271;
t369 = t324 * g(1) - t328 * g(2);
t283 = qJDD(1) * pkin(1) + t329 * pkin(7) + t369;
t350 = -t297 + t309;
t351 = t296 + t371;
t231 = pkin(2) * t350 - pkin(8) * t351 - t283;
t421 = t323 * g(3);
t242 = -pkin(2) * t427 + qJDD(2) * pkin(8) + t327 * t363 - t421;
t184 = -t326 * t231 + t322 * t242;
t137 = t337 * pkin(3) - qJ(4) * t236 - t184;
t185 = t322 * t231 + t326 * t242;
t139 = -pkin(3) * t429 - qJ(4) * t335 + t307 * t275 + t185;
t386 = t318 * t137 + t319 * t139;
t362 = t291 * qJ(5) + t269 * t225 - t386;
t439 = -t495 - pkin(4) * (t442 + t428) - qJ(5) * t338 - t362;
t368 = -t319 * t137 + t318 * t139;
t340 = t291 * pkin(4) - qJ(5) * t428 + qJDD(5) + t368;
t378 = 0.2e1 * qJD(4) + t225;
t55 = t291 * pkin(5) - t179 * pkin(9) + (pkin(5) * t269 + t378) * t271 + t340;
t356 = pkin(5) * t307 - pkin(9) * t271;
t344 = -t362 + t443;
t70 = -pkin(4) * t428 + t344;
t56 = -pkin(5) * t430 + t212 * pkin(9) - t307 * t356 + t70;
t30 = t321 * t56 - t325 * t55;
t31 = t321 * t55 + t325 * t56;
t17 = -t30 * t325 + t31 * t321;
t18 = t321 * t30 + t325 * t31;
t426 = pkin(4) + pkin(5);
t7 = -t17 * t319 + t18 * t318;
t438 = pkin(3) * t7 + qJ(5) * t18 - t17 * t426;
t367 = t325 * t212 - t321 * t213;
t104 = (-qJD(6) + t304) * t224 + t367;
t106 = t197 + t131;
t66 = t104 * t321 - t106 * t325;
t68 = t104 * t325 + t106 * t321;
t36 = t318 * t68 - t319 * t66;
t437 = pkin(3) * t36 + qJ(5) * t68 - t426 * t66;
t220 = t222 ^ 2;
t302 = t304 ^ 2;
t149 = -t302 - t220;
t100 = t149 * t321 + t451;
t101 = t149 * t325 - t454;
t63 = -t100 * t319 + t101 * t318;
t436 = pkin(3) * t63 + qJ(5) * t101 - t100 * t426 + t30;
t221 = t224 ^ 2;
t189 = -t221 - t302;
t147 = t151 + t286;
t413 = t147 * t321;
t115 = t189 * t325 - t413;
t412 = t147 * t325;
t116 = -t189 * t321 - t412;
t74 = -t115 * t319 + t116 * t318;
t435 = pkin(3) * t74 + qJ(5) * t116 - t115 * t426 + t31;
t232 = (qJD(3) + t307) * t293 - t346;
t342 = (t269 * t318 + t271 * t319) * t307;
t393 = t307 * t318;
t244 = t271 * t393;
t392 = t307 * t319;
t375 = t269 * t392;
t352 = -t244 + t375;
t434 = t322 * t352 + t326 * t342;
t343 = t212 * t318 - t375;
t353 = -t319 * t212 - t269 * t393;
t433 = t322 * t343 + t326 * t353;
t281 = t327 * t291;
t432 = t323 * (-t322 * t342 + t326 * t352) + t281;
t373 = t327 * t397;
t431 = t323 * (-t322 * t353 + t326 * t343) + t373;
t290 = t293 ^ 2;
t382 = qJD(4) * t271;
t85 = t368 + 0.2e1 * t382;
t86 = t261 + t386;
t50 = t318 * t86 - t319 * t85;
t425 = pkin(3) * t50;
t422 = pkin(4) * t319;
t88 = (-pkin(4) * t307 - 0.2e1 * qJD(5)) * t271 + t465;
t69 = t212 * pkin(5) + pkin(9) * t430 - t271 * t356 + t88;
t419 = t321 * t69;
t418 = t322 * t50;
t417 = t325 * t69;
t416 = t326 * t50;
t415 = qJ(5) * t319;
t411 = t156 * t318;
t410 = t156 * t319;
t402 = t241 * t322;
t401 = t241 * t326;
t254 = t291 - t396;
t399 = t254 * t322;
t398 = t254 * t326;
t395 = t304 * t321;
t394 = t304 * t325;
t391 = t307 * t322;
t390 = t307 * t326;
t306 = t327 * t329 * t323;
t389 = t323 * (qJDD(2) + t306);
t387 = t327 * (-t306 + qJDD(2));
t380 = qJD(3) - t307;
t374 = t327 * t151;
t372 = t327 * t396;
t370 = -qJ(5) * t318 - pkin(3);
t51 = t318 * t85 + t319 * t86;
t133 = t184 * t322 + t326 * t185;
t276 = t323 * t284 + t420;
t277 = t327 * t284 - t421;
t365 = t323 * t276 + t327 * t277;
t364 = t378 * t271;
t361 = -t386 + t495;
t169 = t213 * t318 - t271 * t392;
t170 = t213 * t319 + t244;
t354 = t323 * (-t169 * t322 + t170 * t326) - t373;
t349 = t184 * t326 - t185 * t322;
t347 = -pkin(1) + t358;
t130 = -qJD(6) * t224 + t367;
t71 = t364 + t340;
t42 = t318 * t70 - t319 * t71;
t341 = pkin(3) * t42 - pkin(4) * t71 + qJ(5) * t70;
t339 = -pkin(4) * t179 - qJ(5) * t174 + t424;
t331 = pkin(4) * t206 - qJ(5) * t441 + t340 - t423;
t330 = 0.2e1 * qJD(5) * t271 - t465;
t316 = t327 ^ 2;
t315 = t323 ^ 2;
t313 = t316 * t329;
t311 = t315 * t329;
t298 = -0.2e1 * t309 + t376;
t295 = t310 + 0.2e1 * t371;
t279 = -t290 + t428;
t278 = -t428 + t429;
t273 = t290 - t429;
t272 = -t290 - t428;
t265 = -t428 - t429;
t263 = -0.2e1 * t382;
t262 = 0.2e1 * t383;
t253 = t290 + t429;
t237 = t292 * t380 + t345;
t235 = t264 + t280;
t233 = -t293 * t380 + t346;
t219 = -t272 * t322 + t398;
t218 = t272 * t326 + t399;
t204 = t265 * t326 - t448;
t203 = t265 * t322 + t447;
t198 = t304 * t224;
t195 = -t221 + t302;
t194 = t220 - t302;
t182 = -t232 * t326 + t236 * t322;
t150 = t221 - t220;
t141 = (-t222 * t325 + t224 * t321) * t304;
t140 = (t222 * t321 + t224 * t325) * t304;
t134 = -t220 - t221;
t121 = t194 * t325 - t413;
t120 = -t195 * t321 + t451;
t119 = -t194 * t321 - t412;
t118 = -t195 * t325 - t454;
t117 = t169 * t326 + t170 * t322;
t113 = t410 - t493;
t108 = t411 - t470;
t103 = t130 - t198;
t102 = -t130 - t198;
t99 = t131 * t325 - t224 * t395;
t98 = -t131 * t321 - t224 * t394;
t97 = -t130 * t321 + t222 * t394;
t96 = -t130 * t325 - t222 * t395;
t91 = -t140 * t318 + t141 * t319;
t90 = t140 * t319 + t141 * t318;
t89 = -pkin(3) * t444 + t411 + t492;
t87 = -pkin(3) * t445 - t410 + t471;
t79 = -t119 * t318 + t121 * t319;
t78 = -t118 * t318 + t120 * t319;
t77 = t119 * t319 + t121 * t318;
t76 = t118 * t319 + t120 * t318;
t75 = t115 * t318 + t116 * t319;
t73 = (-t445 + t252) * pkin(4) + t330;
t72 = pkin(4) * t252 + t330 + t469;
t67 = t103 * t325 - t105 * t321;
t65 = -t103 * t321 - t105 * t325;
t64 = t100 * t318 + t101 * t319;
t62 = -t318 * t98 + t319 * t99;
t61 = -t318 * t96 + t319 * t97;
t60 = t318 * t99 + t319 * t98;
t59 = t318 * t97 + t319 * t96;
t58 = -qJ(5) * t187 + t71;
t57 = (-t187 - t428) * pkin(4) + t344;
t53 = -t318 * t73 - t415 * t445 - t470;
t52 = -pkin(4) * t406 + t319 * t72 + t493;
t49 = t319 * t73 + t370 * t445 + t471;
t48 = -t492 + t318 * t72 - (-pkin(3) - t422) * t444;
t47 = -pkin(3) * t156 + qJ(4) * t51;
t46 = -t322 * t74 + t326 * t75;
t45 = t322 * t75 + t326 * t74;
t44 = -t50 - t483;
t43 = t318 * t71 + t319 * t70;
t41 = -pkin(9) * t115 + qJ(5) * t105 - t417;
t40 = t479 + t51;
t39 = -pkin(9) * t100 - qJ(5) * t103 - t419;
t38 = t318 * t66 + t319 * t68;
t37 = -t318 * t65 + t319 * t67;
t35 = t318 * t67 + t319 * t65;
t34 = -t322 * t63 + t326 * t64;
t33 = t322 * t64 + t326 * t63;
t32 = -pkin(9) * t116 + t105 * t426 + t419;
t29 = -pkin(9) * t101 - t103 * t426 - t417;
t28 = -t318 * t57 + t319 * t58 - t483;
t27 = t318 * t58 + t319 * t57 + t479;
t26 = t326 * t51 - t418;
t25 = t322 * t51 + t416;
t24 = -qJ(4) * t42 + (pkin(4) * t318 - t415) * t88;
t23 = -t322 * t42 + t326 * t43;
t22 = t322 * t43 + t326 * t42;
t21 = qJ(4) * t43 + (t370 - t422) * t88;
t20 = -t322 * t36 + t326 * t38;
t19 = t322 * t38 + t326 * t36;
t16 = -qJ(4) * t74 - t318 * t32 + t319 * t41;
t15 = -qJ(4) * t63 - t29 * t318 + t319 * t39;
t14 = pkin(3) * t105 + qJ(4) * t75 + t318 * t41 + t319 * t32;
t13 = -pkin(9) * t17 - qJ(5) * t69;
t12 = -pkin(3) * t103 + qJ(4) * t64 + t29 * t319 + t318 * t39;
t11 = -pkin(9) * t66 + qJ(5) * t134 - t17;
t10 = -pkin(9) * t68 + t134 * t426 - t18;
t9 = -pkin(9) * t18 - t426 * t69;
t8 = t17 * t318 + t18 * t319;
t6 = -qJ(4) * t36 - t10 * t318 + t11 * t319;
t5 = pkin(3) * t134 + qJ(4) * t38 + t10 * t319 + t11 * t318;
t4 = -t322 * t7 + t326 * t8;
t3 = t322 * t8 + t326 * t7;
t2 = -qJ(4) * t7 + t13 * t319 - t318 * t9;
t1 = -pkin(3) * t69 + qJ(4) * t8 + t13 * t318 + t319 * t9;
t54 = [0, 0, 0, 0, 0, qJDD(1), t369, t355, 0, 0, t351 * t323, t295 * t327 + t298 * t323, t389 + t327 * (-t311 + t427), -t350 * t327, t323 * (t313 - t427) + t387, 0, t327 * t283 + pkin(1) * t298 + pkin(7) * (t327 * (-t313 - t427) - t389), -t323 * t283 - pkin(1) * t295 + pkin(7) * (-t387 - t323 * (-t311 - t427)), pkin(1) * (t311 + t313) + (t315 + t316) * t414 + t365, pkin(1) * t283 + pkin(7) * t365, t323 * (t264 * t326 + t293 * t391) - t372, t323 * (t233 * t326 - t235 * t322) - t327 * t273, t323 * (-t279 * t322 + t447) - t327 * t236, t323 * (-t292 * t390 + t322 * t335) + t372, t323 * (t278 * t326 + t399) + t327 * t232, t281 + t323 * (t292 * t326 - t293 * t322) * t307, t323 * (-pkin(8) * t203 + t402) + t327 * (-pkin(2) * t203 + t184) - pkin(1) * t203 + pkin(7) * (t204 * t327 - t233 * t323), t323 * (-pkin(8) * t218 + t401) + t327 * (-pkin(2) * t218 + t185) - pkin(1) * t218 + pkin(7) * (t219 * t327 - t237 * t323), t323 * t349 + pkin(7) * (t182 * t327 - t253 * t323) + t347 * (-t232 * t322 - t236 * t326), pkin(7) * (t133 * t327 + t241 * t323) - t347 * t349, t354, -t497, t474, t431, -t498, t432, t323 * (t108 * t326 - t322 * t87 - t484) + t327 * (-t423 + t85 - t485) + t475, t323 * (t113 * t326 - t322 * t89 - t501) + t327 * (t261 - t361 - t502) + t504, t323 * (-t322 * t40 + t326 * t44 - t494) + t327 * (-t424 - t496) + t486, t323 * (-pkin(8) * t25 - qJ(4) * t416 - t322 * t47) + t327 * (-pkin(2) * t25 - t425) - pkin(1) * t25 + pkin(7) * (t156 * t323 + t26 * t327), t354, t474, t497, t432, t498, t431, t323 * (-t322 * t49 + t326 * t53 - t484) + t327 * (t331 + t364 - t485) + t475, t323 * (-t27 * t322 + t28 * t326 - t494) + t327 * (-t339 - t496) + t486, t323 * (-t322 * t48 + t326 * t52 + t501) + t327 * (t262 + 0.2e1 * t381 - t439 + t502) - t504, t323 * (-pkin(8) * t22 - t21 * t322 + t24 * t326) + t327 * (-pkin(2) * t22 - t341) - pkin(1) * t22 + pkin(7) * (t23 * t327 + t323 * t88), t323 * (-t322 * t60 + t326 * t62) + t374, t323 * (-t322 * t35 + t326 * t37) + t327 * t150, t323 * (-t322 * t76 + t326 * t78) + t327 * t106, t323 * (-t322 * t59 + t326 * t61) - t374, t323 * (-t322 * t77 + t326 * t79) - t327 * t102, t323 * (-t322 * t90 + t326 * t91) + t327 * t286, t323 * (-pkin(8) * t33 - t12 * t322 + t15 * t326) + t327 * (-pkin(2) * t33 - t436) - pkin(1) * t33 + pkin(7) * (t103 * t323 + t327 * t34), t323 * (-pkin(8) * t45 - t14 * t322 + t16 * t326) + t327 * (-pkin(2) * t45 - t435) - pkin(1) * t45 + pkin(7) * (-t105 * t323 + t327 * t46), t323 * (-pkin(8) * t19 - t322 * t5 + t326 * t6) + t327 * (-pkin(2) * t19 - t437) - pkin(1) * t19 + pkin(7) * (-t134 * t323 + t20 * t327), t323 * (-pkin(8) * t3 - t1 * t322 + t2 * t326) + t327 * (-pkin(2) * t3 - t438) - pkin(1) * t3 + pkin(7) * (t323 * t69 + t327 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306, t311 - t313, t310, t306, t376, qJDD(2), -t276, -t277, 0, 0, t264 * t322 - t293 * t390, t233 * t322 + t235 * t326, t279 * t326 + t448, -t292 * t391 - t326 * t335, t278 * t322 - t398, (t292 * t322 + t293 * t326) * t307, pkin(2) * t233 + pkin(8) * t204 - t401, pkin(2) * t237 + pkin(8) * t219 + t402, pkin(2) * t253 + pkin(8) * t182 + t133, -pkin(2) * t241 + pkin(8) * t133, t117, -t490, t476, t433, t488, t434, t108 * t322 + t326 * t87 + t480, t113 * t322 + t326 * t89 + t500, t322 * t44 + t326 * t40 + t491, -pkin(2) * t156 + pkin(8) * t26 - qJ(4) * t418 + t326 * t47, t117, t476, t490, t434, -t488, t433, t322 * t53 + t326 * t49 + t480, t27 * t326 + t28 * t322 + t491, t322 * t52 + t326 * t48 - t500, -pkin(2) * t88 + pkin(8) * t23 + t21 * t326 + t24 * t322, t322 * t62 + t326 * t60, t322 * t37 + t326 * t35, t322 * t78 + t326 * t76, t322 * t61 + t326 * t59, t322 * t79 + t326 * t77, t322 * t91 + t326 * t90, -pkin(2) * t103 + pkin(8) * t34 + t12 * t326 + t15 * t322, pkin(2) * t105 + pkin(8) * t46 + t14 * t326 + t16 * t322, pkin(2) * t134 + pkin(8) * t20 + t322 * t6 + t326 * t5, -pkin(2) * t69 + pkin(8) * t4 + t1 * t326 + t2 * t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t396, t273, t236, -t396, -t232, -t291, -t184, -t185, 0, 0, t397, -t226, t179, -t397, -t174, -t291, t263 - t368 + t423, t262 + t361, t424, t425, t397, t179, t226, -t291, t174, -t397, -t271 * t225 + t263 - t331, t339, t439 + t443, t341, -t151, -t150, -t106, t151, t102, -t286, t436, t435, t437, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, t444, t187, t156, 0, 0, 0, 0, 0, 0, t445, t187, -t444, t88, 0, 0, 0, 0, 0, 0, t103, -t105, -t134, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t179, t442, t71, 0, 0, 0, 0, 0, 0, t100, t115, t66, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t150, t106, -t151, -t102, t286, -t30, -t31, 0, 0;];
tauJ_reg  = t54;
