% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPPR4_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR4_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR4_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR4_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:36:00
% EndTime: 2019-03-09 15:36:07
% DurationCPUTime: 2.01s
% Computational Cost: add. (2713->262), mult. (6746->458), div. (0->0), fcn. (5858->8), ass. (0->134)
t132 = sin(qJ(2));
t131 = sin(qJ(3));
t134 = cos(qJ(2));
t173 = t134 * qJD(2);
t162 = t131 * t173;
t133 = cos(qJ(3));
t177 = qJD(3) * t133;
t194 = t132 * t177 + t162;
t193 = -0.4e1 * t132;
t128 = sin(pkin(10));
t129 = cos(pkin(10));
t178 = qJD(3) * t131;
t86 = -t128 * t178 + t129 * t177;
t125 = t132 ^ 2;
t153 = (-t134 ^ 2 + t125) * qJD(2);
t126 = t133 ^ 2;
t180 = t131 ^ 2 - t126;
t154 = t180 * qJD(3);
t130 = sin(qJ(6));
t182 = t132 * t133;
t189 = pkin(7) * t131;
t148 = -pkin(2) * t134 - pkin(8) * t132;
t102 = -pkin(1) + t148;
t93 = t133 * t102;
t63 = -qJ(4) * t182 + t93 + (-pkin(3) - t189) * t134;
t183 = t131 * t132;
t181 = t133 * t134;
t112 = pkin(7) * t181;
t184 = t102 * t131 + t112;
t68 = -qJ(4) * t183 + t184;
t34 = -t128 * t68 + t129 * t63;
t30 = pkin(4) * t134 - t34;
t81 = -t128 * t183 + t129 * t182;
t18 = pkin(5) * t134 - pkin(9) * t81 + t30;
t35 = t128 * t63 + t129 * t68;
t28 = -qJ(5) * t134 + t35;
t91 = t128 * t133 + t129 * t131;
t80 = t91 * t132;
t19 = pkin(9) * t80 + t28;
t190 = cos(qJ(6));
t143 = t130 * t18 + t19 * t190;
t120 = t132 * qJD(2);
t174 = t133 * qJD(4);
t163 = t131 * t120;
t147 = pkin(2) * t132 - pkin(8) * t134;
t97 = t147 * qJD(2);
t185 = pkin(7) * t163 + t133 * t97;
t22 = -t132 * t174 + (pkin(3) * t132 - qJ(4) * t181) * qJD(2) + (-t112 + (qJ(4) * t132 - t102) * t131) * qJD(3) + t185;
t186 = -t102 * t177 - t131 * t97;
t31 = (-pkin(7) * qJD(2) - qJ(4) * qJD(3)) * t182 + (-qJD(4) * t132 + (-pkin(7) * qJD(3) - qJ(4) * qJD(2)) * t134) * t131 - t186;
t187 = t128 * t31 - t129 * t22;
t191 = pkin(4) + pkin(5);
t159 = t133 * t173;
t85 = t91 * qJD(3);
t54 = t128 * t162 - t129 * t159 + t132 * t85;
t7 = t54 * pkin(9) - t120 * t191 + t187;
t13 = t128 * t22 + t129 * t31;
t169 = qJ(5) * t120 + t13;
t172 = t134 * qJD(5);
t10 = t169 - t172;
t53 = -t132 * t86 - t91 * t173;
t8 = -pkin(9) * t53 + t10;
t2 = -qJD(6) * t143 - t130 * t8 + t190 * t7;
t192 = 0.2e1 * qJD(5);
t188 = -qJ(4) - pkin(8);
t155 = qJD(3) * t188;
t137 = -t131 * qJD(4) + t133 * t155;
t83 = t131 * t155 + t174;
t56 = t128 * t137 + t129 * t83;
t103 = t188 * t133;
t156 = t188 * t131;
t70 = -t103 * t129 + t128 * t156;
t98 = pkin(3) * t183 + pkin(7) * t132;
t176 = qJD(3) * t134;
t175 = qJD(6) * t130;
t171 = -0.2e1 * pkin(1) * qJD(2);
t170 = -0.2e1 * pkin(2) * qJD(3);
t119 = pkin(3) * t178;
t118 = pkin(7) * t173;
t72 = pkin(3) * t194 + t118;
t117 = -t133 * pkin(3) - pkin(2);
t115 = -pkin(3) * t129 - pkin(4);
t168 = t131 * t176;
t166 = t133 * t176;
t161 = t131 * t177;
t160 = t132 * t173;
t55 = t128 * t83 - t129 * t137;
t69 = -t103 * t128 - t129 * t156;
t158 = t55 * t69 + t56 * t70;
t157 = qJD(6) * t190;
t152 = 0.2e1 * t160;
t151 = pkin(9) * t85 + t56;
t150 = t131 * t159;
t149 = t81 * qJ(5) - t98;
t146 = t91 * qJ(5) - t117;
t145 = pkin(9) * t86 - t55;
t1 = -t130 * t7 - t157 * t18 + t175 * t19 - t190 * t8;
t57 = -pkin(9) * t91 + t69;
t90 = t128 * t131 - t129 * t133;
t58 = pkin(9) * t90 + t70;
t142 = t130 * t57 + t190 * t58;
t51 = t130 * t80 + t190 * t81;
t62 = t130 * t90 + t190 * t91;
t141 = t86 * qJ(5) + t91 * qJD(5) - t119;
t110 = -pkin(5) + t115;
t113 = pkin(3) * t128 + qJ(5);
t140 = t110 * t130 + t113 * t190;
t139 = t53 * t70 - t54 * t69 + t55 * t81 - t56 * t80;
t138 = t120 * t133 + t168;
t136 = -t54 * qJ(5) + t81 * qJD(5) - t72;
t135 = 0.2e1 * t55 * t91 - 0.2e1 * t56 * t90 + 0.2e1 * t69 * t86 - 0.2e1 * t70 * t85;
t108 = -0.2e1 * t160;
t67 = t130 * qJD(5) + qJD(6) * t140;
t66 = -qJD(5) * t190 - t110 * t157 + t113 * t175;
t61 = t130 * t91 - t190 * t90;
t59 = pkin(4) * t90 - t146;
t50 = t130 * t81 - t190 * t80;
t45 = -qJD(3) * t184 + t185;
t44 = pkin(7) * t138 + t186;
t43 = -t191 * t90 + t146;
t42 = pkin(4) * t80 - t149;
t40 = pkin(4) * t85 - t141;
t29 = -t191 * t80 + t149;
t27 = -t191 * t85 + t141;
t24 = qJD(6) * t62 + t130 * t86 - t190 * t85;
t23 = -t130 * t85 - t157 * t90 + t175 * t91 - t190 * t86;
t16 = -pkin(4) * t53 - t136;
t15 = qJD(6) * t51 - t130 * t54 + t190 * t53;
t14 = t130 * t53 - t157 * t80 + t175 * t81 + t190 * t54;
t11 = -pkin(4) * t120 + t187;
t9 = t191 * t53 + t136;
t4 = qJD(6) * t142 + t130 * t151 + t145 * t190;
t3 = t130 * t145 - t151 * t190 - t157 * t57 + t175 * t58;
t5 = [0, 0, 0, t152, -0.2e1 * t153, 0, 0, 0, t132 * t171, t134 * t171, -0.2e1 * t125 * t161 + 0.2e1 * t126 * t160, 0.2e1 * t125 * t154 + t150 * t193, 0.2e1 * t132 * t168 + 0.2e1 * t133 * t153, -0.2e1 * t131 * t153 + 0.2e1 * t132 * t166, t108, 0.2e1 * t93 * t120 - 0.2e1 * t45 * t134 + 0.2e1 * (t125 * t177 + t131 * t160) * pkin(7), -0.2e1 * t44 * t134 - 0.2e1 * t184 * t120 + 0.2e1 * (-t125 * t178 + t133 * t152) * pkin(7), -0.2e1 * t13 * t80 + 0.2e1 * t187 * t81 + 0.2e1 * t34 * t54 + 0.2e1 * t35 * t53, 0.2e1 * t13 * t35 - 0.2e1 * t187 * t34 + 0.2e1 * t72 * t98, 0.2e1 * t11 * t134 - 0.2e1 * t120 * t30 + 0.2e1 * t16 * t80 - 0.2e1 * t42 * t53, -0.2e1 * t10 * t80 + 0.2e1 * t11 * t81 + 0.2e1 * t28 * t53 - 0.2e1 * t30 * t54, -0.2e1 * t10 * t134 + 0.2e1 * t120 * t28 - 0.2e1 * t16 * t81 + 0.2e1 * t42 * t54, 0.2e1 * t10 * t28 + 0.2e1 * t11 * t30 + 0.2e1 * t16 * t42, -0.2e1 * t51 * t14, 0.2e1 * t14 * t50 - 0.2e1 * t15 * t51, -0.2e1 * t120 * t51 - 0.2e1 * t134 * t14, 0.2e1 * t120 * t50 - 0.2e1 * t134 * t15, t108, 0.2e1 * t2 * t134 - 0.2e1 * (-t130 * t19 + t18 * t190) * t120 + 0.2e1 * t9 * t50 + 0.2e1 * t29 * t15, 0.2e1 * t1 * t134 + 0.2e1 * t120 * t143 - 0.2e1 * t14 * t29 + 0.2e1 * t51 * t9; 0, 0, 0, 0, 0, t173, -t120, 0, -t118, pkin(7) * t120, -t132 * t154 + t150, t161 * t193 - t173 * t180, t163 - t166, t138, 0 (pkin(8) * t181 + (-pkin(2) * t133 + t189) * t132) * qJD(3) + (t131 * t148 - t112) * qJD(2) (pkin(7) * t182 + t131 * t147) * qJD(3) + (t133 * t148 + t134 * t189) * qJD(2), -t13 * t90 + t187 * t91 - t34 * t86 - t35 * t85 + t139, t117 * t72 + t119 * t98 + t13 * t70 + t187 * t69 - t34 * t55 + t35 * t56, -t120 * t69 + t134 * t55 + t16 * t90 + t40 * t80 + t42 * t85 - t53 * t59, -t10 * t90 + t11 * t91 - t28 * t85 + t30 * t86 + t139, t120 * t70 - t134 * t56 - t16 * t91 - t40 * t81 - t42 * t86 + t54 * t59, t10 * t70 + t11 * t69 + t16 * t59 + t28 * t56 + t30 * t55 + t40 * t42, -t14 * t62 - t23 * t51, t14 * t61 - t15 * t62 + t23 * t50 - t24 * t51, -t120 * t62 - t134 * t23, t120 * t61 - t134 * t24, 0, -t4 * t134 - (-t130 * t58 + t190 * t57) * t120 + t27 * t50 + t43 * t15 + t9 * t61 + t29 * t24, t120 * t142 + t134 * t3 - t14 * t43 - t23 * t29 + t27 * t51 + t62 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t161, -0.2e1 * t154, 0, 0, 0, t131 * t170, t133 * t170, t135, 0.2e1 * t117 * t119 + 0.2e1 * t158, 0.2e1 * t40 * t90 + 0.2e1 * t59 * t85, t135, -0.2e1 * t40 * t91 - 0.2e1 * t59 * t86, 0.2e1 * t40 * t59 + 0.2e1 * t158, -0.2e1 * t62 * t23, 0.2e1 * t23 * t61 - 0.2e1 * t24 * t62, 0, 0, 0, 0.2e1 * t24 * t43 + 0.2e1 * t27 * t61, -0.2e1 * t23 * t43 + 0.2e1 * t27 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t132 * t178 + t159, -t194, t120, t45, t44 (t128 * t53 + t129 * t54) * pkin(3) (t128 * t13 - t129 * t187) * pkin(3) (pkin(4) - t115) * t120 - t187, -qJD(5) * t80 + t113 * t53 - t115 * t54, t113 * t120 + t169 - 0.2e1 * t172, qJD(5) * t28 + t10 * t113 + t11 * t115, 0, 0, t14, t15, t120, -t67 * t134 - (t110 * t190 - t113 * t130) * t120 - t2, t120 * t140 + t66 * t134 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, -t178, 0, -pkin(8) * t177, pkin(8) * t178 (-t128 * t85 - t129 * t86) * pkin(3) (t128 * t56 - t129 * t55) * pkin(3), -t55, -qJD(5) * t90 - t113 * t85 + t115 * t86, t56, qJD(5) * t70 + t113 * t56 + t115 * t55, 0, 0, t23, t24, 0, t4, -t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t113 * t192, 0, 0, 0, 0, 0, 0.2e1 * t67, -0.2e1 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, -t53, 0, t54, t16, 0, 0, 0, 0, 0, -t15, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, t85, 0, -t86, t40, 0, 0, 0, 0, 0, -t24, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, -t54, 0, t11, 0, 0, 0, 0, 0, -t120 * t190 - t134 * t175, t120 * t130 - t134 * t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t55, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t15, -t120, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t24, 0, -t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
