% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 16:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPRR14_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR14_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR14_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 16:43:29
% EndTime: 2019-05-07 16:44:18
% DurationCPUTime: 18.32s
% Computational Cost: add. (96210->634), mult. (206594->896), div. (0->0), fcn. (163624->12), ass. (0->396)
t348 = cos(pkin(6));
t342 = qJD(1) * t348 + qJD(2);
t351 = sin(qJ(3));
t355 = cos(qJ(3));
t347 = sin(pkin(6));
t352 = sin(qJ(2));
t421 = qJD(1) * t352;
t407 = t347 * t421;
t311 = -t355 * t342 + t351 * t407;
t308 = t311 ^ 2;
t356 = cos(qJ(2));
t422 = qJD(1) * t347;
t406 = t356 * t422;
t334 = -qJD(3) + t406;
t332 = t334 ^ 2;
t268 = -t332 - t308;
t405 = qJD(2) * t422;
t417 = qJDD(1) * t347;
t322 = -t352 * t405 + t356 * t417;
t316 = -qJDD(3) + t322;
t313 = t342 * t351 + t355 * t407;
t437 = t313 * t311;
t371 = t316 + t437;
t495 = t351 * t371;
t199 = t268 * t355 + t495;
t321 = t352 * t417 + t356 * t405;
t341 = qJDD(1) * t348 + qJDD(2);
t266 = qJD(3) * t313 + t321 * t351 - t355 * t341;
t436 = t334 * t313;
t228 = t266 - t436;
t535 = pkin(1) * (t199 * t352 - t228 * t356);
t494 = t355 * t371;
t197 = t268 * t351 - t494;
t534 = pkin(8) * (t199 * t356 + t228 * t352) - pkin(1) * t197;
t472 = t313 ^ 2;
t487 = -t472 - t332;
t372 = t316 - t437;
t492 = t372 * t355;
t208 = t351 * t487 - t492;
t389 = t321 * t355 + t341 * t351;
t235 = (qJD(3) - t334) * t311 - t389;
t532 = pkin(1) * (t208 * t352 - t235 * t356);
t531 = pkin(2) * t197;
t530 = pkin(9) * t197;
t529 = pkin(9) * t199;
t286 = -t472 + t332;
t213 = t286 * t355 - t495;
t528 = t348 * t213;
t493 = t372 * t351;
t205 = t355 * t487 + t493;
t527 = -pkin(8) * (t208 * t356 + t235 * t352) - pkin(1) * t205;
t287 = t332 - t308;
t215 = t287 * t351 + t492;
t489 = t266 + t436;
t524 = t348 * t215 + (t352 * (t287 * t355 - t493) - t356 * t489) * t347;
t470 = -2 * qJD(4);
t522 = pkin(2) * t205;
t521 = pkin(9) * t205;
t520 = pkin(9) * t208;
t519 = t352 * (t286 * t351 + t494);
t245 = -t472 - t308;
t515 = pkin(2) * t245;
t514 = t228 * t351;
t449 = t228 * t355;
t509 = t245 * t352;
t508 = t245 * t356;
t267 = -qJD(3) * t311 + t389;
t293 = t311 * t334;
t233 = t267 + t293;
t398 = -pkin(2) * t356 - pkin(9) * t352;
t320 = t398 * t422;
t357 = qJD(1) ^ 2;
t467 = sin(qJ(1));
t468 = cos(qJ(1));
t381 = g(1) * t468 + g(2) * t467;
t317 = -t357 * pkin(1) + pkin(8) * t417 - t381;
t380 = g(1) * t467 - g(2) * t468;
t430 = t347 * t357;
t364 = qJDD(1) * pkin(1) + pkin(8) * t430 + t380;
t361 = t348 * t364;
t400 = t317 * t352 - t356 * t361;
t471 = t342 ^ 2;
t218 = t347 * (g(3) * t356 + t320 * t421) - t341 * pkin(2) - t471 * pkin(9) + t400;
t359 = t266 * pkin(3) - qJ(4) * t233 + t218;
t507 = t313 * t470 + t359;
t349 = sin(qJ(6));
t350 = sin(qJ(5));
t354 = cos(qJ(5));
t281 = -t354 * t311 - t334 * t350;
t283 = t311 * t350 - t334 * t354;
t353 = cos(qJ(6));
t238 = t353 * t281 + t283 * t349;
t240 = -t281 * t349 + t283 * t353;
t189 = t240 * t238;
t263 = qJDD(5) + t267;
t261 = qJDD(6) + t263;
t491 = -t189 + t261;
t504 = t349 * t491;
t242 = t283 * t281;
t490 = -t242 + t263;
t503 = t350 * t490;
t502 = t351 * t489;
t501 = t353 * t491;
t500 = t354 * t490;
t499 = t355 * t489;
t486 = t472 - t308;
t498 = t356 * t486;
t344 = t347 ^ 2;
t423 = qJD(1) * t342;
t496 = t344 * (-t348 * t357 + t423);
t203 = -t281 * qJD(5) + t350 * t266 - t354 * t316;
t306 = qJD(5) + t313;
t442 = t281 * t306;
t180 = t203 + t442;
t234 = t267 - t293;
t431 = t347 * t356;
t269 = g(3) * t431 + t400;
t432 = t347 * t352;
t358 = -g(3) * t432 + t352 * t361;
t270 = t356 * t317 + t358;
t488 = t352 * t269 + t356 * t270;
t219 = t341 * pkin(9) - t471 * pkin(2) + (t320 * t422 + t317) * t356 + t358;
t463 = t348 * g(3);
t220 = -t322 * pkin(2) - t321 * pkin(9) - t463 + ((pkin(2) * t352 - pkin(9) * t356) * t423 - t364) * t347;
t167 = t219 * t351 - t355 * t220;
t271 = pkin(3) * t311 - qJ(4) * t313;
t148 = t316 * pkin(3) - t332 * qJ(4) + t271 * t313 + qJDD(4) + t167;
t100 = pkin(4) * t234 + t371 * pkin(10) + t148;
t284 = pkin(4) * t313 + pkin(10) * t334;
t403 = -pkin(3) * t334 + t470;
t114 = -pkin(4) * t308 + pkin(10) * t266 + (-t284 + t403) * t313 + t359;
t73 = -t354 * t100 + t114 * t350;
t53 = pkin(5) * t490 - pkin(11) * t180 - t73;
t401 = t354 * t266 + t316 * t350;
t202 = -qJD(5) * t283 + t401;
t247 = pkin(5) * t306 - pkin(11) * t283;
t279 = t281 ^ 2;
t74 = t100 * t350 + t114 * t354;
t56 = -pkin(5) * t279 + pkin(11) * t202 - t247 * t306 + t74;
t32 = t349 * t56 - t353 * t53;
t33 = t349 * t53 + t353 * t56;
t20 = t32 * t349 + t353 * t33;
t19 = -t32 * t353 + t33 * t349;
t462 = t19 * t354;
t11 = t20 * t350 + t462;
t168 = t219 * t355 + t220 * t351;
t370 = -t332 * pkin(3) - t271 * t311 + t168;
t457 = qJ(4) * t316;
t113 = -t457 - t266 * pkin(4) - t308 * pkin(10) + (t470 - t284) * t334 + t370;
t84 = -t202 * pkin(5) - t279 * pkin(11) + t247 * t283 + t113;
t15 = -pkin(5) * t84 + pkin(11) * t20;
t469 = pkin(3) + pkin(10);
t484 = -pkin(11) * t462 + qJ(4) * t84 - t11 * t469 - t15 * t350;
t236 = t238 ^ 2;
t237 = t240 ^ 2;
t152 = -t236 - t237;
t390 = t202 * t349 + t203 * t353;
t144 = -qJD(6) * t238 + t390;
t301 = qJD(6) + t306;
t211 = t301 * t238;
t111 = t144 + t211;
t402 = -t353 * t202 + t203 * t349;
t375 = (-qJD(6) + t301) * t240 - t402;
t78 = t111 * t349 + t353 * t375;
t13 = -pkin(5) * t152 + pkin(11) * t78 + t20;
t76 = -t111 * t353 + t349 * t375;
t14 = -pkin(11) * t76 - t19;
t42 = t350 * t78 + t354 * t76;
t483 = qJ(4) * t152 - t13 * t350 + t14 * t354 - t42 * t469;
t418 = qJD(6) + t301;
t112 = -t238 * t418 + t390;
t298 = t301 ^ 2;
t193 = -t237 - t298;
t158 = t189 + t261;
t453 = t158 * t353;
t138 = -t193 * t349 - t453;
t461 = t349 * t84;
t47 = -pkin(5) * t112 + pkin(11) * t138 + t461;
t454 = t158 * t349;
t137 = t193 * t353 - t454;
t459 = t353 * t84;
t64 = -pkin(11) * t137 + t459;
t82 = t137 * t354 + t138 * t350;
t482 = qJ(4) * t112 - t350 * t47 + t354 * t64 - t469 * t82;
t107 = t240 * t418 + t402;
t169 = -t298 - t236;
t120 = t169 * t353 - t504;
t45 = -pkin(5) * t107 + pkin(11) * t120 - t459;
t119 = t169 * t349 + t501;
t59 = -pkin(11) * t119 + t461;
t79 = t119 * t354 + t120 * t350;
t481 = qJ(4) * t107 - t350 * t45 + t354 * t59 - t469 * t79;
t39 = t350 * t74 - t354 * t73;
t480 = qJ(4) * t113 - t39 * t469;
t367 = 0.2e1 * qJD(4) * t334 - t370;
t479 = -pkin(3) * t487 - qJ(4) * (t372 + t316) - t367;
t374 = (-qJD(5) + t306) * t283 + t401;
t131 = -t180 * t354 + t350 * t374;
t280 = t283 ^ 2;
t204 = -t279 - t280;
t478 = qJ(4) * t204 - t131 * t469 - t39;
t303 = t306 ^ 2;
t216 = -t303 - t279;
t153 = t350 * t216 + t500;
t176 = (qJD(5) + t306) * t283 - t401;
t456 = t113 * t350;
t477 = qJ(4) * t176 - t153 * t469 + t456;
t416 = -t280 - t303;
t192 = t242 + t263;
t429 = t350 * t192;
t155 = t354 * t416 - t429;
t386 = t203 - t442;
t455 = t113 * t354;
t476 = qJ(4) * t386 - t155 * t469 + t455;
t435 = t334 * t351;
t396 = -t355 * t266 - t311 * t435;
t409 = t356 * t437;
t434 = t334 * t355;
t475 = t348 * t396 + (t352 * (t266 * t351 - t311 * t434) + t409) * t347;
t397 = t351 * t267 - t313 * t434;
t474 = t348 * t397 + (t352 * (t355 * t267 + t313 * t435) - t409) * t347;
t382 = (t311 * t351 + t313 * t355) * t334;
t473 = t348 * t382 + t316 * t431 + (t311 * t355 - t313 * t351) * t334 * t432;
t466 = pkin(3) * t351;
t465 = pkin(3) * t355;
t464 = pkin(8) * t347;
t460 = t350 * t19;
t452 = t192 * t354;
t451 = t218 * t351;
t450 = t218 * t355;
t441 = t301 * t349;
t440 = t301 * t353;
t439 = t306 * t350;
t438 = t306 * t354;
t433 = t344 * t357;
t333 = t356 * t352 * t433;
t319 = t333 + t341;
t427 = t352 * t319;
t318 = -t333 + t341;
t425 = t356 * t318;
t415 = t351 * t189;
t414 = t355 * t189;
t413 = t351 * t242;
t412 = t355 * t242;
t345 = t352 ^ 2;
t411 = t345 * t433;
t346 = t356 ^ 2;
t410 = t346 * t433;
t326 = t342 * t406;
t408 = t326 + t321;
t404 = qJ(4) * t351 + pkin(2);
t124 = t167 * t351 + t355 * t168;
t399 = pkin(5) * t119 - t32;
t146 = -t367 - t457;
t395 = -pkin(3) * t148 + qJ(4) * t146;
t231 = (-qJD(3) - t334) * t311 + t389;
t394 = -pkin(3) * t231 - qJ(4) * t489;
t40 = t350 * t73 + t354 * t74;
t391 = t167 * t355 - t168 * t351;
t387 = -pkin(1) + t398;
t384 = pkin(5) * t137 - t33;
t360 = pkin(3) * t371 - qJ(4) * t268 + t148;
t325 = t342 * t407;
t324 = (t345 - t346) * t433;
t323 = -t410 - t471;
t304 = -t411 - t471;
t296 = t347 * t364 + t463;
t292 = t322 - t325;
t291 = t322 + t325;
t290 = -t326 + t321;
t249 = -t280 + t303;
t248 = t279 - t303;
t241 = t280 - t279;
t210 = -t237 + t298;
t209 = t236 - t298;
t195 = (-t281 * t354 + t283 * t350) * t306;
t194 = (t281 * t350 + t283 * t354) * t306;
t188 = t237 - t236;
t187 = t234 * t351 - t499;
t186 = t231 * t351 - t499;
t184 = -t235 * t355 - t514;
t183 = t233 * t355 - t514;
t182 = -t231 * t355 - t502;
t174 = t203 * t354 - t283 * t439;
t173 = -t203 * t350 - t283 * t438;
t172 = t202 * t350 - t281 * t438;
t171 = -t202 * t354 - t281 * t439;
t170 = t194 * t355 + t263 * t351;
t165 = t248 * t354 - t429;
t164 = -t249 * t350 + t500;
t163 = -t248 * t350 - t452;
t162 = -t249 * t354 - t503;
t161 = (-t238 * t353 + t240 * t349) * t301;
t160 = (-t238 * t349 - t240 * t353) * t301;
t156 = -t350 * t416 - t452;
t154 = t216 * t354 - t503;
t151 = t173 * t355 + t413;
t150 = t171 * t355 - t413;
t149 = t313 * t403 + t359;
t147 = pkin(2) * t235 + t451 - t520;
t145 = -pkin(2) * t228 - t450 + t529;
t143 = -qJD(6) * t240 - t402;
t142 = t209 * t353 - t454;
t141 = -t210 * t349 + t501;
t140 = t209 * t349 + t453;
t139 = t210 * t353 + t504;
t135 = -qJ(4) * t245 + t148;
t133 = t350 * t180 + t354 * t374;
t132 = -t176 * t354 - t350 * t386;
t130 = t176 * t350 - t354 * t386;
t129 = -pkin(3) * t245 + t146;
t128 = (t228 - t436) * pkin(3) + t507;
t127 = pkin(3) * t436 - qJ(4) * t235 - t507;
t126 = t162 * t355 + t180 * t351;
t125 = t163 * t355 + t351 * t374;
t122 = t155 * t351 + t355 * t386;
t121 = -t155 * t355 + t351 * t386;
t116 = t153 * t351 + t176 * t355;
t115 = -t153 * t355 + t176 * t351;
t110 = t144 - t211;
t106 = t144 * t353 - t240 * t441;
t105 = t144 * t349 + t240 * t440;
t104 = -t143 * t349 + t238 * t440;
t103 = t143 * t353 + t238 * t441;
t102 = -t160 * t350 + t161 * t354;
t101 = -t160 * t354 - t161 * t350;
t98 = t130 * t355 + t241 * t351;
t97 = t131 * t351 + t204 * t355;
t96 = -t131 * t355 + t204 * t351;
t95 = -pkin(2) * t218 + pkin(9) * t124;
t94 = t101 * t355 + t261 * t351;
t93 = t146 * t355 + t148 * t351;
t92 = t146 * t351 - t148 * t355;
t91 = pkin(9) * t187 + t124 - t515;
t90 = t520 + t127 * t351 - (pkin(2) + t465) * t235;
t89 = -t140 * t350 + t142 * t354;
t88 = -t139 * t350 + t141 * t354;
t87 = -t140 * t354 - t142 * t350;
t86 = -t139 * t354 - t141 * t350;
t85 = t128 * t355 + t228 * t404 - t529;
t83 = -t350 * t137 + t138 * t354;
t81 = pkin(4) * t131 - qJ(4) * t133;
t80 = -t350 * t119 + t120 * t354;
t77 = -t107 * t353 - t110 * t349;
t75 = -t107 * t349 + t110 * t353;
t72 = pkin(5) * t76;
t69 = -t105 * t350 + t106 * t354;
t68 = -t103 * t350 + t104 * t354;
t67 = -t105 * t354 - t106 * t350;
t66 = -t103 * t354 - t104 * t350;
t65 = pkin(9) * t186 + t129 * t355 + t135 * t351 - t515;
t63 = pkin(4) * t386 - t156 * t469 - t456;
t62 = t355 * t67 + t415;
t61 = t355 * t66 - t415;
t60 = pkin(4) * t176 - t154 * t469 + t455;
t58 = t111 * t351 + t355 * t86;
t57 = t351 * t375 + t355 * t87;
t55 = t112 * t355 + t351 * t82;
t54 = t112 * t351 - t355 * t82;
t51 = t107 * t355 + t351 * t79;
t50 = t107 * t351 - t355 * t79;
t49 = pkin(4) * t155 - qJ(4) * t156 - t74;
t48 = pkin(4) * t153 - qJ(4) * t154 - t73;
t46 = pkin(9) * t93 + (-t404 - t465) * t149;
t44 = -t350 * t76 + t354 * t78;
t43 = -t350 * t75 + t354 * t77;
t41 = -t350 * t77 - t354 * t75;
t38 = t188 * t351 + t355 * t41;
t37 = t152 * t355 + t351 * t42;
t36 = t152 * t351 - t355 * t42;
t35 = t113 * t355 + t351 * t39;
t34 = t113 * t351 - t355 * t39;
t30 = pkin(4) * t204 - t133 * t469 - t40;
t29 = -pkin(2) * t156 + pkin(9) * t122 + t351 * t49 + t355 * t63;
t28 = -pkin(2) * t154 + pkin(9) * t116 + t351 * t48 + t355 * t60;
t27 = pkin(4) * t39 - qJ(4) * t40;
t26 = pkin(4) * t113 - t40 * t469;
t25 = pkin(4) * t82 - qJ(4) * t83 + t384;
t24 = -pkin(2) * t133 + pkin(9) * t97 + t30 * t355 + t351 * t81;
t23 = pkin(4) * t42 - qJ(4) * t44 + t72;
t22 = pkin(4) * t79 - qJ(4) * t80 + t399;
t21 = pkin(4) * t112 - t350 * t64 - t354 * t47 - t469 * t83;
t18 = pkin(5) * t19;
t16 = pkin(4) * t107 - t350 * t59 - t354 * t45 - t469 * t80;
t12 = t20 * t354 - t460;
t10 = t11 * t351 + t355 * t84;
t9 = -t11 * t355 + t351 * t84;
t8 = -pkin(2) * t83 + pkin(9) * t55 + t21 * t355 + t25 * t351;
t7 = -pkin(2) * t80 + pkin(9) * t51 + t16 * t355 + t22 * t351;
t6 = -pkin(2) * t40 + pkin(9) * t35 + t26 * t355 + t27 * t351;
t5 = pkin(4) * t152 - t13 * t354 - t14 * t350 - t44 * t469;
t4 = pkin(4) * t11 - qJ(4) * t12 + t18;
t3 = -pkin(2) * t44 + pkin(9) * t37 + t23 * t351 + t355 * t5;
t2 = pkin(4) * t84 + pkin(11) * t460 - t12 * t469 - t15 * t354;
t1 = -pkin(2) * t12 + pkin(9) * t10 + t2 * t355 + t351 * t4;
t17 = [0, 0, 0, 0, 0, qJDD(1), t380, t381, 0, 0, (t321 * t347 + t356 * t496) * t352, t348 * t324 + (t352 * t292 + t356 * t408) * t347, t348 * t290 + (t427 + t356 * (-t411 + t471)) * t347, (t322 * t347 - t352 * t496) * t356, t348 * t291 + (t352 * (t410 - t471) + t425) * t347, t348 * t341, (-t269 + pkin(1) * (t319 * t356 + t323 * t352)) * t348 + (t356 * t296 + pkin(1) * t292 + pkin(8) * (t323 * t356 - t427)) * t347, -t296 * t432 - t348 * t270 + pkin(1) * (-t347 * t408 + (t304 * t356 - t318 * t352) * t348) + (-t304 * t352 - t425) * t464, pkin(1) * ((-t290 * t356 + t291 * t352) * t348 - (-t345 - t346) * t344 * t430) + (t290 * t352 + t291 * t356) * t464 + t488 * t347, pkin(1) * (t296 * t347 + (-t269 * t356 + t270 * t352) * t348) + t488 * t464, t474, t348 * t183 + (t352 * (-t233 * t351 - t449) - t498) * t347, t528 + (-t356 * t234 - t519) * t347, t475, -t524, t473, (t145 + t535) * t348 + (t352 * (t451 - t530) + t356 * (t167 - t531) + t534) * t347, (t147 - t532) * t348 + (t352 * (t450 - t521) + t356 * (t168 - t522) + t527) * t347, (t91 + pkin(1) * (t187 * t352 - t508)) * t348 + (t352 * t391 + pkin(8) * (t187 * t356 + t509) + t387 * (-t234 * t355 - t502)) * t347, (t95 + pkin(1) * (t124 * t352 - t218 * t356)) * t348 + (pkin(8) * (t124 * t356 + t218 * t352) - t387 * t391) * t347, t473, -t528 + (t356 * t231 + t519) * t347, t524, t474, t348 * t184 + (t352 * (t235 * t351 - t449) - t498) * t347, t475, (t65 + pkin(1) * (t186 * t352 - t508)) * t348 + (t352 * (-pkin(9) * t182 - t129 * t351 + t135 * t355) + t356 * (-pkin(2) * t182 - t394) - pkin(1) * t182 + pkin(8) * (t186 * t356 + t509)) * t347, (t85 - t535) * t348 + (t352 * (qJ(4) * t449 - t128 * t351 + t530) + t356 * (-t360 + t531) - t534) * t347, (t90 + t532) * t348 + (t352 * (t127 * t355 + t235 * t466 + t521) + t356 * (-t479 + t522) - t527) * t347, (t46 + pkin(1) * (-t149 * t356 + t352 * t93)) * t348 + (t352 * (-pkin(9) * t92 + (-qJ(4) * t355 + t466) * t149) + t356 * (-pkin(2) * t92 - t395) - pkin(1) * t92 + pkin(8) * (t149 * t352 + t356 * t93)) * t347, t348 * t151 + (t352 * (-t173 * t351 + t412) - t356 * t174) * t347, t348 * t98 + (t352 * (-t130 * t351 + t241 * t355) - t356 * t132) * t347, t348 * t126 + (t352 * (-t162 * t351 + t180 * t355) - t356 * t164) * t347, t348 * t150 + (t352 * (-t171 * t351 - t412) + t356 * t172) * t347, t348 * t125 + (t352 * (-t163 * t351 + t355 * t374) - t356 * t165) * t347, t348 * t170 + (t352 * (-t194 * t351 + t263 * t355) - t356 * t195) * t347, (t28 + pkin(1) * (t116 * t352 - t154 * t356)) * t348 + (t352 * (-pkin(9) * t115 - t351 * t60 + t355 * t48) + t356 * (-pkin(2) * t115 - t477) - pkin(1) * t115 + pkin(8) * (t116 * t356 + t154 * t352)) * t347, (t29 + pkin(1) * (t122 * t352 - t156 * t356)) * t348 + (t352 * (-pkin(9) * t121 - t351 * t63 + t355 * t49) + t356 * (-pkin(2) * t121 - t476) - pkin(1) * t121 + pkin(8) * (t122 * t356 + t156 * t352)) * t347, (t24 + pkin(1) * (-t133 * t356 + t352 * t97)) * t348 + (t352 * (-pkin(9) * t96 - t30 * t351 + t355 * t81) + t356 * (-pkin(2) * t96 - t478) - pkin(1) * t96 + pkin(8) * (t133 * t352 + t356 * t97)) * t347, (t6 + pkin(1) * (t35 * t352 - t356 * t40)) * t348 + (t352 * (-pkin(9) * t34 - t26 * t351 + t27 * t355) + t356 * (-pkin(2) * t34 - t480) - pkin(1) * t34 + pkin(8) * (t35 * t356 + t352 * t40)) * t347, t348 * t62 + (t352 * (-t351 * t67 + t414) - t356 * t69) * t347, t348 * t38 + (t352 * (t188 * t355 - t351 * t41) - t356 * t43) * t347, t348 * t58 + (t352 * (t111 * t355 - t351 * t86) - t356 * t88) * t347, t348 * t61 + (t352 * (-t351 * t66 - t414) - t356 * t68) * t347, t348 * t57 + (t352 * (-t351 * t87 + t355 * t375) - t356 * t89) * t347, t348 * t94 + (t352 * (-t101 * t351 + t261 * t355) - t356 * t102) * t347, (t7 + pkin(1) * (t352 * t51 - t356 * t80)) * t348 + (t352 * (-pkin(9) * t50 - t16 * t351 + t22 * t355) + t356 * (-pkin(2) * t50 - t481) - pkin(1) * t50 + pkin(8) * (t352 * t80 + t356 * t51)) * t347, (t8 + pkin(1) * (t352 * t55 - t356 * t83)) * t348 + (t352 * (-pkin(9) * t54 - t21 * t351 + t25 * t355) + t356 * (-pkin(2) * t54 - t482) - pkin(1) * t54 + pkin(8) * (t352 * t83 + t356 * t55)) * t347, (t3 + pkin(1) * (t352 * t37 - t356 * t44)) * t348 + (t352 * (-pkin(9) * t36 + t23 * t355 - t351 * t5) + t356 * (-pkin(2) * t36 - t483) - pkin(1) * t36 + pkin(8) * (t352 * t44 + t356 * t37)) * t347, (t1 + pkin(1) * (t10 * t352 - t12 * t356)) * t348 + (t352 * (-pkin(9) * t9 - t2 * t351 + t355 * t4) + t356 * (-pkin(2) * t9 - t484) - pkin(1) * t9 + pkin(8) * (t10 * t356 + t12 * t352)) * t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t333, t324, t290, t333, t291, t341, -t269, -t270, 0, 0, t397, t183, t213, t396, -t215, t382, t145, t147, t91, t95, t382, -t213, t215, t397, t184, t396, t65, t85, t90, t46, t151, t98, t126, t150, t125, t170, t28, t29, t24, t6, t62, t38, t58, t61, t57, t94, t7, t8, t3, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t437, t486, t234, -t437, -t489, -t316, -t167, -t168, 0, 0, -t316, -t231, t489, t437, t486, -t437, t394, t360, t479, t395, t174, t132, t164, -t172, t165, t195, t477, t476, t478, t480, t69, t43, t88, t68, t89, t102, t481, t482, t483, t484; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, -t371, t487, t148, 0, 0, 0, 0, 0, 0, t153, t155, t131, t39, 0, 0, 0, 0, 0, 0, t79, t82, t42, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, t241, t180, -t242, t374, t263, -t73, -t74, 0, 0, t189, t188, t111, -t189, t375, t261, t399, t384, t72, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, t188, t111, -t189, t375, t261, -t32, -t33, 0, 0;];
tauJ_reg  = t17;
