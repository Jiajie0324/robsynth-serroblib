% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR14_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR14_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR14_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:20:40
% EndTime: 2019-03-09 20:21:09
% DurationCPUTime: 12.62s
% Computational Cost: add. (11120->712), mult. (26582->959), div. (0->0), fcn. (21405->14), ass. (0->334)
t285 = sin(pkin(6));
t294 = cos(qJ(2));
t422 = qJD(1) * t294;
t396 = t285 * t422;
t248 = -qJD(3) + t396;
t289 = sin(qJ(2));
t465 = cos(pkin(6));
t377 = t465 * qJD(1);
t364 = pkin(1) * t377;
t204 = pkin(8) * t396 + t289 * t364;
t288 = sin(qJ(3));
t367 = t288 * t396;
t419 = qJD(3) * t288;
t519 = -qJD(4) * t288 - t204 + (-t367 + t419) * pkin(3);
t423 = qJD(1) * t285;
t397 = t289 * t423;
t201 = -pkin(8) * t397 + t294 * t364;
t189 = t288 * t201;
t355 = pkin(2) * t289 - pkin(9) * t294;
t202 = t355 * t423;
t293 = cos(qJ(3));
t375 = -t202 * t293 + t189;
t417 = qJD(3) * t293;
t435 = t293 * t294;
t488 = pkin(4) + pkin(9);
t489 = pkin(3) + pkin(10);
t518 = t488 * t417 - (pkin(4) * t435 - t289 * t489) * t423 - t375;
t514 = -t519 + t248 * (pkin(10) * t288 - qJ(4) * t293);
t339 = t377 + qJD(2);
t187 = t288 * t339 + t293 * t397;
t286 = sin(qJ(6));
t287 = sin(qJ(5));
t291 = cos(qJ(6));
t292 = cos(qJ(5));
t225 = t286 * t292 + t287 * t291;
t495 = qJD(5) + qJD(6);
t431 = (-t187 - t495) * t225;
t179 = qJD(5) + t187;
t172 = qJD(6) + t179;
t438 = t291 * t292;
t341 = t286 * t287 - t438;
t412 = qJD(6) * t286;
t416 = qJD(5) * t287;
t430 = -t187 * t341 - t286 * t416 - t287 * t412 + t495 * t438;
t321 = qJD(3) * t339;
t373 = t465 * qJDD(1);
t334 = t373 + qJDD(2);
t445 = t285 * t289;
t403 = t288 * t445;
t365 = qJD(3) * t403;
t408 = qJDD(1) * t289;
t387 = t285 * t408;
t409 = qJD(1) * qJD(2);
t388 = t294 * t409;
t512 = -t285 * t388 - t387;
t104 = qJD(1) * t365 - t288 * t334 + (-t321 + t512) * t293;
t101 = -qJDD(5) + t104;
t98 = -qJDD(6) + t101;
t517 = -t172 * t430 + t225 * t98;
t185 = t288 * t397 - t293 * t339;
t137 = -t292 * t185 - t248 * t287;
t139 = t185 * t287 - t248 * t292;
t343 = t137 * t286 - t291 * t139;
t65 = t291 * t137 + t139 * t286;
t516 = t343 * t65;
t176 = t287 * t397 - t292 * t367;
t418 = qJD(3) * t292;
t513 = t288 * t418 + t176;
t395 = t293 * t422;
t511 = t285 * t395 - t417;
t168 = pkin(9) * t339 + t204;
t336 = -pkin(2) * t294 - pkin(9) * t289 - pkin(1);
t198 = t336 * t285;
t178 = qJD(1) * t198;
t102 = t168 * t288 - t293 * t178;
t410 = -qJD(4) - t102;
t510 = t343 ^ 2 - t65 ^ 2;
t411 = qJD(6) * t291;
t420 = qJD(2) * t294;
t105 = (qJD(1) * (t288 * t420 + t289 * t417) + t288 * t408) * t285 + t288 * t321 - t293 * t334;
t407 = qJDD(1) * t294;
t266 = t285 * t407;
t389 = t289 * t409;
t362 = t285 * t389;
t199 = qJDD(3) - t266 + t362;
t415 = qJD(5) * t292;
t49 = t287 * t105 + t185 * t415 + t292 * t199 + t248 * t416;
t50 = qJD(5) * t139 - t292 * t105 + t199 * t287;
t13 = -t137 * t411 - t139 * t412 - t286 * t50 + t291 * t49;
t509 = t172 * t65 + t13;
t290 = sin(qJ(1));
t380 = t289 * t465;
t487 = cos(qJ(1));
t217 = -t290 * t380 + t294 * t487;
t443 = t285 * t293;
t158 = t217 * t288 - t290 * t443;
t379 = t294 * t465;
t216 = t289 * t487 + t290 * t379;
t284 = qJ(5) + qJ(6);
t277 = sin(t284);
t278 = cos(t284);
t113 = t158 * t277 + t216 * t278;
t433 = pkin(4) * t187 - t410;
t55 = t248 * t489 + t433;
t167 = -pkin(2) * t339 - t201;
t299 = -t187 * qJ(4) + t167;
t60 = t185 * t489 + t299;
t29 = t287 * t55 + t292 * t60;
t23 = -pkin(11) * t137 + t29;
t19 = t23 * t412;
t212 = -t293 * t465 + t403;
t234 = t248 * qJ(4);
t103 = t293 * t168 + t288 * t178;
t75 = -pkin(4) * t185 + t103;
t61 = -t234 + t75;
t43 = pkin(5) * t137 + t61;
t442 = t285 * t294;
t357 = t465 * t487;
t215 = t289 * t357 + t290 * t294;
t398 = t285 * t487;
t154 = t215 * t288 + t293 * t398;
t214 = t289 * t290 - t294 * t357;
t506 = t154 * t277 + t214 * t278;
t508 = t43 * t65 + g(1) * t113 + g(2) * t506 - g(3) * (-t212 * t277 + t278 * t442) + t19;
t112 = t158 * t278 - t216 * t277;
t28 = -t287 * t60 + t292 * t55;
t22 = -pkin(11) * t139 + t28;
t15 = pkin(5) * t179 + t22;
t474 = t23 * t291;
t10 = t15 * t286 + t474;
t363 = pkin(1) * qJD(2) * t465;
t335 = qJD(1) * t363;
t360 = pkin(1) * t373;
t400 = pkin(8) * t266 + t289 * t360 + t294 * t335;
t312 = -pkin(8) * t362 + t400;
t128 = pkin(9) * t334 + t312;
t326 = t355 * qJD(2);
t131 = (qJD(1) * t326 + qJDD(1) * t336) * t285;
t370 = -t288 * t128 + t293 * t131 - t168 * t417 - t178 * t419;
t337 = qJDD(4) - t370;
t18 = -pkin(4) * t104 - t199 * t489 + t337;
t369 = pkin(8) * t512 - t289 * t335 + t294 * t360;
t129 = -pkin(2) * t334 - t369;
t298 = t104 * qJ(4) - t187 * qJD(4) + t129;
t24 = t105 * t489 + t298;
t7 = -qJD(5) * t29 + t292 * t18 - t287 * t24;
t4 = -pkin(5) * t101 - pkin(11) * t49 + t7;
t328 = -t287 * t18 - t292 * t24 - t55 * t415 + t416 * t60;
t5 = -pkin(11) * t50 - t328;
t2 = -qJD(6) * t10 - t286 * t5 + t291 * t4;
t505 = t154 * t278 - t214 * t277;
t507 = t43 * t343 - g(1) * t112 - g(2) * t505 - g(3) * (t212 * t278 + t277 * t442) + t2;
t504 = t154 * t287 + t214 * t292;
t503 = t154 * t292 - t214 * t287;
t307 = qJD(6) * t343 - t286 * t49 - t291 * t50;
t502 = -t172 * t343 + t307;
t281 = t285 ^ 2;
t501 = 0.2e1 * t281;
t500 = t518 * t292;
t331 = pkin(1) * t379 - pkin(8) * t445;
t385 = -qJ(4) * t288 - pkin(2);
t220 = -t293 * t489 + t385;
t249 = t488 * t288;
t498 = t220 * t416 - t249 * t415 - t518 * t287 + t514 * t292;
t497 = (qJDD(2) + 0.2e1 * t373) * t285;
t352 = g(1) * t216 + g(2) * t214;
t314 = -g(3) * t442 + t352;
t496 = t431 * t172 + t341 * t98;
t494 = t101 * t489 + t179 * t61;
t383 = qJD(6) * t15 + t5;
t493 = t286 * t4 + t291 * t383;
t491 = t293 * t495;
t490 = t187 ^ 2;
t296 = qJD(1) ^ 2;
t486 = pkin(3) * t199;
t485 = pkin(9) * t199;
t484 = pkin(11) * t187;
t481 = t212 * pkin(3);
t479 = pkin(11) + t489;
t425 = pkin(1) * t380 + pkin(8) * t442;
t197 = pkin(9) * t465 + t425;
t376 = -t288 * t197 + t198 * t293;
t118 = pkin(3) * t442 - t376;
t213 = t288 * t465 + t289 * t443;
t76 = pkin(4) * t213 + pkin(10) * t442 + t118;
t196 = -pkin(2) * t465 - t331;
t454 = t213 * qJ(4);
t303 = t196 - t454;
t86 = t212 * t489 + t303;
t478 = t287 * t76 + t292 * t86;
t464 = qJ(4) * t185;
t90 = t187 * t489 + t464;
t477 = t287 * t75 + t292 * t90;
t476 = pkin(9) * qJD(3);
t91 = t234 - t103;
t473 = t248 * t91;
t472 = t292 * t49;
t414 = qJD(5) * t293;
t392 = t287 * t414;
t399 = -pkin(5) * t292 - pkin(4);
t428 = t293 * t201 + t288 * t202;
t119 = -qJ(4) * t397 - t428;
t94 = -pkin(4) * t367 - t119;
t469 = (-pkin(9) + t399) * t419 - t94 + (-t176 - t392) * pkin(5);
t468 = -t488 * t419 - t94;
t467 = pkin(5) * t415 - t187 * t399 - t410;
t439 = t288 * t294;
t318 = t285 * (t287 * t439 + t289 * t292);
t177 = qJD(1) * t318;
t466 = t176 * t286 - t177 * t291 + t225 * t419 + t341 * t491;
t463 = t103 * t248;
t461 = t137 * t179;
t460 = t137 * t248;
t459 = t139 * t179;
t458 = t139 * t248;
t457 = t185 * t248;
t456 = t187 * t185;
t455 = t187 * t248;
t195 = t199 * qJ(4);
t449 = t248 * t293;
t448 = t277 * t288;
t447 = t278 * t288;
t446 = t281 * t296;
t444 = t285 * t290;
t440 = t287 * t101;
t227 = t287 * t249;
t95 = t292 * t101;
t437 = t292 * t293;
t436 = t292 * t294;
t432 = t291 * t176 + t177 * t286 + t225 * t491 - t341 * t419;
t429 = t293 * t197 + t288 * t198;
t427 = t292 * t220 + t227;
t426 = qJ(4) * t511 + t519;
t391 = t285 * t420;
t206 = pkin(8) * t391 + t289 * t363;
t250 = t488 * t293;
t282 = t289 ^ 2;
t424 = -t294 ^ 2 + t282;
t421 = qJD(2) * t289;
t413 = qJD(5) * t489;
t404 = t294 * t446;
t402 = t285 * t436;
t394 = t285 * t421;
t239 = t479 * t292;
t390 = pkin(1) * t501;
t384 = pkin(11) * t293 - t220;
t381 = -t287 * t86 + t292 * t76;
t155 = t215 * t293 - t288 * t398;
t374 = t179 * t287;
t371 = -t293 * t128 - t288 * t131 + t168 * t419 - t178 * t417;
t228 = t292 * t249;
t133 = pkin(5) * t288 + t287 * t384 + t228;
t359 = -qJD(6) * t133 + t498 + (-t392 - t513) * pkin(11);
t140 = -pkin(11) * t437 + t427;
t358 = -pkin(11) * t177 + qJD(6) * t140 - (t292 * t384 - t227) * qJD(5) - t500 + t511 * pkin(5) + (pkin(11) * t419 - t514) * t287;
t356 = t285 * t296 * t465;
t354 = g(1) * t154 - g(2) * t158;
t159 = t217 * t293 + t288 * t444;
t353 = -g(1) * t155 + g(2) * t159;
t351 = -g(1) * t214 + g(2) * t216;
t350 = g(1) * t217 + g(2) * t215;
t238 = t479 * t287;
t70 = t292 * t75;
t349 = -qJD(6) * t238 - t479 * t416 - pkin(5) * t185 + t70 + (-t90 - t484) * t287;
t348 = t239 * t495 + t292 * t484 + t477;
t347 = t287 * t419 - t177;
t153 = -t212 * t287 + t402;
t31 = pkin(5) * t213 + pkin(11) * t153 + t381;
t152 = t212 * t292 + t287 * t442;
t34 = pkin(11) * t152 + t478;
t345 = -t286 * t34 + t291 * t31;
t344 = t286 * t31 + t291 * t34;
t342 = t291 * t152 + t153 * t286;
t93 = t152 * t286 - t153 * t291;
t338 = 0.2e1 * t377 + qJD(2);
t333 = pkin(3) * t293 - t385;
t117 = qJ(4) * t442 - t429;
t203 = t285 * t326;
t205 = t331 * qJD(2);
t332 = -t197 * t417 - t198 * t419 + t203 * t293 - t288 * t205;
t232 = qJD(4) * t248;
t32 = -t195 + t232 + t371;
t329 = -t179 * t374 - t95;
t151 = -t365 + (qJD(3) * t465 + t391) * t293;
t41 = pkin(4) * t151 - t394 * t489 - t332;
t150 = qJD(3) * t213 + t288 * t391;
t320 = -qJ(4) * t151 - qJD(4) * t213 + t206;
t45 = t150 * t489 + t320;
t327 = t287 * t41 + t292 * t45 + t76 * t415 - t416 * t86;
t324 = -t197 * t419 + t198 * t417 + t288 * t203 + t293 * t205;
t322 = -g(1) * t159 - g(2) * t155 - g(3) * t213;
t21 = -pkin(4) * t105 - t32;
t316 = t21 + t322;
t315 = -t179 ^ 2 * t292 + t440;
t313 = -g(3) * t445 - t350;
t87 = -pkin(4) * t212 - t117;
t85 = t185 * pkin(3) + t299;
t311 = t248 * t85 + t485;
t310 = -t167 * t248 - t485;
t308 = -qJD(5) * t478 - t287 * t45 + t292 * t41;
t306 = g(1) * t158 + g(2) * t154 + g(3) * t212 + t370;
t305 = t322 - t371;
t304 = -t248 * t476 - t314;
t52 = -qJ(4) * t394 + qJD(4) * t442 - t324;
t33 = t105 * pkin(3) + t298;
t302 = -t304 - t33;
t301 = -t104 - t457;
t42 = -pkin(4) * t150 - t52;
t300 = t187 * t85 + qJDD(4) - t306;
t275 = pkin(5) * t287 + qJ(4);
t211 = pkin(5) * t437 + t250;
t208 = t225 * t293;
t207 = t341 * t293;
t130 = pkin(3) * t187 + t464;
t123 = t158 * t287 + t216 * t292;
t122 = t158 * t292 - t216 * t287;
t121 = -pkin(3) * t397 + t375;
t116 = t303 + t481;
t89 = pkin(3) * t248 - t410;
t82 = qJD(5) * t152 + t150 * t287 + t292 * t394;
t81 = -t150 * t292 - qJD(5) * t402 + (qJD(5) * t212 + t394) * t287;
t58 = pkin(3) * t150 + t320;
t57 = -pkin(3) * t394 - t332;
t56 = -pkin(5) * t152 + t87;
t36 = t337 - t486;
t27 = pkin(5) * t81 + t42;
t26 = qJD(6) * t93 + t286 * t82 + t291 * t81;
t25 = qJD(6) * t342 - t286 * t81 + t291 * t82;
t12 = pkin(5) * t50 + t21;
t11 = -pkin(11) * t81 + t327;
t9 = t15 * t291 - t23 * t286;
t8 = pkin(5) * t151 - pkin(11) * t82 + t308;
t1 = -t19 + t493;
t3 = [qJDD(1), g(1) * t290 - g(2) * t487, g(1) * t487 + g(2) * t290 (qJDD(1) * t282 + 0.2e1 * t289 * t388) * t281 (t289 * t407 - t409 * t424) * t501, t497 * t289 + t338 * t391, t497 * t294 - t338 * t394, t334 * t465, -t206 * t339 + t331 * t334 + t369 * t465 + g(1) * t215 - g(2) * t217 + (-t389 + t407) * t390, -t205 * t339 - t425 * t334 - t312 * t465 + (-t388 - t408) * t390 + t351, -t104 * t213 + t151 * t187, t104 * t212 - t105 * t213 - t150 * t187 - t151 * t185, -t151 * t248 + t199 * t213 + (t104 * t294 + t187 * t421) * t285, t150 * t248 - t199 * t212 + (t105 * t294 - t185 * t421) * t285 (-t199 * t294 - t248 * t421) * t285, -t332 * t248 + t376 * t199 + t206 * t185 + t196 * t105 + t129 * t212 + t167 * t150 + (-t102 * t421 - t294 * t370) * t285 - t353, t324 * t248 - t429 * t199 + t206 * t187 - t196 * t104 + t129 * t213 + t167 * t151 + (-t103 * t421 - t294 * t371) * t285 - t354, -t104 * t118 + t105 * t117 + t150 * t91 + t151 * t89 + t185 * t52 + t187 * t57 + t212 * t32 + t213 * t36 - t351, -t105 * t116 + t118 * t199 - t150 * t85 - t185 * t58 - t212 * t33 - t248 * t57 + (-t294 * t36 + t421 * t89) * t285 + t353, t104 * t116 - t117 * t199 - t151 * t85 - t187 * t58 - t213 * t33 + t248 * t52 + (t294 * t32 - t421 * t91) * t285 + t354, t33 * t116 + t85 * t58 + t32 * t117 + t91 * t52 + t36 * t118 + t89 * t57 - g(1) * (-t290 * pkin(1) - t215 * pkin(2) - pkin(3) * t155 + pkin(8) * t398 - t214 * pkin(9) - qJ(4) * t154) - g(2) * (pkin(1) * t487 + t217 * pkin(2) + t159 * pkin(3) + pkin(8) * t444 + t216 * pkin(9) + t158 * qJ(4)) t139 * t82 - t153 * t49, -t137 * t82 - t139 * t81 + t152 * t49 + t153 * t50, t101 * t153 + t139 * t151 + t179 * t82 + t213 * t49, -t101 * t152 - t137 * t151 - t179 * t81 - t213 * t50, -t101 * t213 + t151 * t179, g(1) * t504 - g(2) * t123 - t381 * t101 + t42 * t137 + t28 * t151 - t21 * t152 + t308 * t179 + t7 * t213 + t87 * t50 + t61 * t81, g(1) * t503 - g(2) * t122 + t478 * t101 + t42 * t139 - t29 * t151 - t21 * t153 - t327 * t179 + t328 * t213 + t87 * t49 + t61 * t82, t13 * t93 - t25 * t343, t13 * t342 - t25 * t65 + t26 * t343 + t307 * t93, t13 * t213 - t151 * t343 + t172 * t25 - t93 * t98, -t151 * t65 - t172 * t26 + t213 * t307 - t342 * t98, t151 * t172 - t213 * t98 (-qJD(6) * t344 - t11 * t286 + t291 * t8) * t172 - t345 * t98 + t2 * t213 + t9 * t151 + t27 * t65 - t56 * t307 - t12 * t342 + t43 * t26 + g(1) * t506 - g(2) * t113 -(qJD(6) * t345 + t11 * t291 + t286 * t8) * t172 + t344 * t98 - t1 * t213 - t10 * t151 - t27 * t343 + t56 * t13 + t12 * t93 + t43 * t25 + g(1) * t505 - g(2) * t112; 0, 0, 0, -t289 * t404, t424 * t446, -t294 * t356 + t387, t289 * t356 + t266, t334, pkin(1) * t289 * t446 + t204 * t339 + t314 + t369, pkin(1) * t404 + t201 * t339 + (pkin(8) * t409 + g(3)) * t445 + t350 - t400, -t104 * t288 - t187 * t449 (-t104 + t457) * t293 + (-t105 + t455) * t288, -t248 * t417 + t199 * t288 + (-t187 * t289 + t248 * t435) * t423, t248 * t419 + t199 * t293 + (t185 * t289 - t248 * t439) * t423, t248 * t397, t102 * t397 - pkin(2) * t105 - t204 * t185 - t189 * t248 + t310 * t288 + (-t129 + (t202 + t476) * t248 + t314) * t293, pkin(2) * t104 - t428 * t248 + t103 * t397 - t204 * t187 + t310 * t293 + (t129 + t304) * t288, -t119 * t185 - t121 * t187 + (-t32 - t248 * t89 + (qJD(3) * t187 - t105) * pkin(9)) * t293 + (t36 - t473 + (qJD(3) * t185 - t104) * pkin(9)) * t288 + t313, t105 * t333 + t121 * t248 - t185 * t426 + t288 * t311 - t293 * t302 - t397 * t89, -t104 * t333 - t119 * t248 - t187 * t426 + t288 * t302 + t293 * t311 + t397 * t91, -t91 * t119 - t89 * t121 + t426 * t85 + (t36 * t288 - t32 * t293 + (t288 * t91 + t293 * t89) * qJD(3) + t313) * pkin(9) + (-t33 + t314) * t333, -t287 * t293 * t49 + (-t292 * t414 + t347) * t139, t137 * t177 + t139 * t176 + (-t137 * t287 + t139 * t292) * t419 + (t287 * t50 - t472 + (t137 * t292 + t139 * t287) * qJD(5)) * t293, t288 * t49 + t347 * t179 + (-t179 * t415 + t440 - t458) * t293, -t288 * t50 + t513 * t179 + (t179 * t416 + t460 + t95) * t293, -t101 * t288 - t179 * t449 -(-t220 * t287 + t228) * t101 + t250 * t50 - t61 * t176 - t350 * t292 + (t287 * t352 - t418 * t61 + t7) * t288 - g(3) * t318 + (-t220 * t415 + (-qJD(5) * t249 + t514) * t287 + t500) * t179 + t468 * t137 + (t21 * t292 - t248 * t28 - t416 * t61) * t293, t427 * t101 + t250 * t49 - t61 * t177 + t350 * t287 + (t61 * t287 * qJD(3) + t292 * t352 + t328) * t288 - g(3) * (-t287 * t289 + t288 * t436) * t285 + t498 * t179 + t468 * t139 + (-t21 * t287 + t248 * t29 - t415 * t61) * t293, -t13 * t208 - t343 * t466, t13 * t207 - t208 * t307 - t343 * t432 - t466 * t65, t13 * t288 + t172 * t466 + t208 * t98 + t343 * t449, t172 * t432 - t207 * t98 + t288 * t307 + t449 * t65, -t172 * t449 - t288 * t98 -(t133 * t291 - t140 * t286) * t98 + t2 * t288 + t9 * t417 - t211 * t307 - t12 * t207 - g(1) * (-t216 * t448 + t217 * t278) - g(2) * (-t214 * t448 + t215 * t278) + t469 * t65 - t432 * t43 + (t286 * t359 - t291 * t358) * t172 + (-t9 * t395 - g(3) * (t277 * t439 + t278 * t289)) * t285 (t133 * t286 + t140 * t291) * t98 - t1 * t288 - t10 * t417 + t211 * t13 - t12 * t208 - g(1) * (-t216 * t447 - t217 * t277) - g(2) * (-t214 * t447 - t215 * t277) - t469 * t343 + t466 * t43 + (t286 * t358 + t291 * t359) * t172 + (t10 * t395 - g(3) * (-t277 * t289 + t278 * t439)) * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, -t185 ^ 2 + t490, t301, -t105 - t455, t199, -t167 * t187 + t306 - t463, t102 * t248 + t167 * t185 - t305, pkin(3) * t104 - qJ(4) * t105 + (-t103 - t91) * t187 + (t89 + t410) * t185, t130 * t185 + t300 + t463 - 0.2e1 * t486, t130 * t187 - t185 * t85 + t248 * t410 + 0.2e1 * t195 - t232 + t305, -t32 * qJ(4) - t36 * pkin(3) - t85 * t130 - t89 * t103 - g(1) * (-pkin(3) * t158 + qJ(4) * t159) - g(2) * (-pkin(3) * t154 + qJ(4) * t155) - g(3) * (t454 - t481) + t410 * t91, -t139 * t374 + t472 (-t50 - t459) * t292 + (-t49 + t461) * t287, t139 * t185 + t329, -t137 * t185 + t315, t179 * t185, qJ(4) * t50 - t70 * t179 + t28 * t185 + t433 * t137 + t494 * t292 + ((t90 + t413) * t179 + t316) * t287, qJ(4) * t49 + t477 * t179 - t29 * t185 + t433 * t139 - t494 * t287 + (t179 * t413 + t316) * t292, -t13 * t341 - t343 * t431, -t13 * t225 - t307 * t341 + t343 * t430 - t431 * t65, -t185 * t343 + t496, -t185 * t65 + t517, t172 * t185 -(t238 * t286 - t239 * t291) * t98 - t275 * t307 + t12 * t225 + t9 * t185 + t467 * t65 + t430 * t43 + (t286 * t348 - t291 * t349) * t172 + t322 * t277 (-t238 * t291 - t239 * t286) * t98 + t275 * t13 - t12 * t341 - t10 * t185 - t467 * t343 + t431 * t43 + (t286 * t349 + t291 * t348) * t172 + t322 * t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t301, t199 - t456, -t248 ^ 2 - t490, t300 - t473 - t486, 0, 0, 0, 0, 0, t329 + t460, t315 + t458, 0, 0, 0, 0, 0, t248 * t65 + t496, -t248 * t343 + t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139 * t137, -t137 ^ 2 + t139 ^ 2, t49 + t461, t459 - t50, -t101, -g(1) * t122 - g(2) * t503 - g(3) * t152 - t61 * t139 + t29 * t179 + t7, g(1) * t123 + g(2) * t504 - g(3) * t153 + t61 * t137 + t28 * t179 + t328, -t516, t510, t509, t502, -t98 -(-t22 * t286 - t474) * t172 + (-t139 * t65 - t172 * t412 - t291 * t98) * pkin(5) + t507 (-t172 * t23 - t4) * t286 + (t172 * t22 - t383) * t291 + (t139 * t343 - t172 * t411 + t286 * t98) * pkin(5) + t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t516, t510, t509, t502, -t98, t10 * t172 + t507, t172 * t9 - t493 + t508;];
tau_reg  = t3;
