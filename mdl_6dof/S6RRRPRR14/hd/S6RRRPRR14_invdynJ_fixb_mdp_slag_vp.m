% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR14_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR14_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR14_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:21:09
% EndTime: 2019-03-09 20:21:39
% DurationCPUTime: 21.84s
% Computational Cost: add. (11227->830), mult. (26703->1088), div. (0->0), fcn. (21405->14), ass. (0->338)
t805 = sin(pkin(6));
t814 = cos(qJ(2));
t943 = qJD(1) * t814;
t916 = t805 * t943;
t768 = -qJD(3) + t916;
t809 = sin(qJ(2));
t1003 = cos(pkin(6));
t901 = t1003 * qJD(1);
t883 = pkin(1) * t901;
t724 = pkin(8) * t916 + t809 * t883;
t808 = sin(qJ(3));
t886 = t808 * t916;
t940 = qJD(3) * t808;
t1044 = -qJD(4) * t808 - t724 + (-t886 + t940) * pkin(3);
t1016 = pkin(4) + pkin(9);
t1017 = pkin(3) + pkin(10);
t944 = qJD(1) * t805;
t917 = t809 * t944;
t721 = -pkin(8) * t917 + t814 * t883;
t709 = t808 * t721;
t876 = pkin(2) * t809 - pkin(9) * t814;
t722 = t876 * t944;
t813 = cos(qJ(3));
t895 = -t722 * t813 + t709;
t939 = qJD(3) * t813;
t964 = t813 * t814;
t1043 = (pkin(4) * t964 - t1017 * t809) * t944 + t895 - t1016 * t939;
t1042 = -t1044 + t768 * (pkin(10) * t808 - qJ(4) * t813);
t1023 = qJD(5) + qJD(6);
t858 = t901 + qJD(2);
t707 = t808 * t858 + t813 * t917;
t806 = sin(qJ(6));
t807 = sin(qJ(5));
t811 = cos(qJ(6));
t812 = cos(qJ(5));
t745 = t806 * t812 + t807 * t811;
t956 = (-t1023 - t707) * t745;
t929 = qJDD(1) * t809;
t907 = t805 * t929;
t930 = qJD(1) * qJD(2);
t908 = t814 * t930;
t1036 = t805 * t908 + t907;
t840 = qJD(3) * t858;
t893 = t1003 * qJDD(1);
t853 = t893 + qJDD(2);
t976 = t805 * t809;
t924 = t808 * t976;
t884 = qJD(3) * t924;
t624 = qJD(1) * t884 - t808 * t853 + (-t840 - t1036) * t813;
t621 = -qJDD(5) + t624;
t618 = -qJDD(6) + t621;
t699 = qJD(5) + t707;
t692 = qJD(6) + t699;
t967 = t811 * t812;
t860 = t806 * t807 - t967;
t934 = qJD(6) * t806;
t938 = qJD(5) * t807;
t955 = t1023 * t967 - t707 * t860 - t806 * t938 - t807 * t934;
t1041 = t745 * t618 - t692 * t955;
t705 = t808 * t917 - t813 * t858;
t657 = -t812 * t705 - t768 * t807;
t659 = t705 * t807 - t768 * t812;
t990 = t659 * t806;
t584 = t811 * t657 + t990;
t1040 = t584 * t692;
t862 = t657 * t806 - t811 * t659;
t1039 = t692 * t862;
t696 = t807 * t917 - t812 * t886;
t871 = t812 * t940 + t696;
t688 = pkin(9) * t858 + t724;
t855 = -pkin(2) * t814 - pkin(9) * t809 - pkin(1);
t718 = t855 * t805;
t698 = qJD(1) * t718;
t622 = t688 * t808 - t813 * t698;
t932 = -qJD(4) - t622;
t810 = sin(qJ(1));
t1015 = cos(qJ(1));
t878 = t1003 * t1015;
t735 = t809 * t878 + t810 * t814;
t918 = t805 * t1015;
t674 = t735 * t808 + t813 * t918;
t734 = t809 * t810 - t814 * t878;
t804 = qJ(5) + qJ(6);
t797 = sin(t804);
t798 = cos(t804);
t1034 = t674 * t797 + t734 * t798;
t931 = pkin(4) * t707 - t932;
t574 = t1017 * t768 + t931;
t687 = -pkin(2) * t858 - t721;
t818 = -t707 * qJ(4) + t687;
t579 = t1017 * t705 + t818;
t548 = t574 * t807 + t579 * t812;
t542 = -pkin(11) * t657 + t548;
t538 = t542 * t934;
t623 = t813 * t688 + t808 * t698;
t594 = -pkin(4) * t705 + t623;
t754 = t768 * qJ(4);
t580 = t594 - t754;
t562 = pkin(5) * t657 + t580;
t903 = t809 * t1003;
t737 = t1015 * t814 - t810 * t903;
t974 = t805 * t813;
t678 = t737 * t808 - t810 * t974;
t902 = t814 * t1003;
t736 = t1015 * t809 + t810 * t902;
t633 = t678 * t797 + t736 * t798;
t732 = -t1003 * t813 + t924;
t973 = t805 * t814;
t1035 = t562 * t584 + g(1) * t633 + g(2) * t1034 - g(3) * (-t732 * t797 + t798 * t973) + t538;
t1033 = t674 * t798 - t734 * t797;
t1032 = t674 * t807 + t734 * t812;
t1031 = t674 * t812 - t734 * t807;
t941 = qJD(2) * t814;
t625 = (qJD(1) * (t808 * t941 + t809 * t939) + t808 * t929) * t805 + t808 * t840 - t813 * t853;
t632 = t678 * t798 - t736 * t797;
t1030 = t562 * t862 - g(3) * (t732 * t798 + t797 * t973) - g(2) * t1033 - g(1) * t632;
t1029 = (-t584 ^ 2 + t862 ^ 2) * MDP(30) - t618 * MDP(33) - t584 * MDP(29) * t862;
t947 = pkin(1) * t903 + pkin(8) * t973;
t717 = pkin(9) * t1003 + t947;
t896 = -t808 * t717 + t718 * t813;
t638 = pkin(3) * t973 - t896;
t733 = t1003 * t808 + t809 * t974;
t595 = pkin(4) * t733 + pkin(10) * t973 + t638;
t850 = pkin(1) * t902 - pkin(8) * t976;
t716 = -pkin(2) * t1003 - t850;
t986 = t733 * qJ(4);
t822 = t716 - t986;
t605 = t1017 * t732 + t822;
t962 = t807 * t595 + t812 * t605;
t1027 = t1043 * t812;
t905 = -qJ(4) * t808 - pkin(2);
t740 = -t1017 * t813 + t905;
t769 = t1016 * t808;
t937 = qJD(5) * t812;
t1026 = t1042 * t812 + t1043 * t807 + t740 * t938 - t769 * t937;
t1025 = (qJDD(2) + 0.2e1 * t893) * t805;
t1024 = t618 * t860 + t692 * t956;
t834 = g(1) * t736 + g(2) * t734 - g(3) * t973;
t1021 = t1017 * t621 + t580 * t699;
t928 = qJDD(1) * t814;
t786 = t805 * t928;
t909 = t809 * t930;
t881 = t805 * t909;
t719 = qJDD(3) - t786 + t881;
t569 = qJD(5) * t659 - t812 * t625 + t719 * t807;
t568 = t807 * t625 + t705 * t937 + t812 * t719 + t768 * t938;
t899 = t568 * t806 + t811 * t569;
t533 = -qJD(6) * t862 + t899;
t1019 = t813 * t1023;
t1018 = t707 ^ 2;
t816 = qJD(1) ^ 2;
t1014 = pkin(3) * t719;
t1013 = pkin(9) * t719;
t1012 = pkin(11) * t707;
t1006 = t732 * pkin(3);
t1005 = pkin(11) + t1017;
t1004 = pkin(9) * qJD(3);
t1002 = qJ(4) * t705;
t547 = t812 * t574 - t579 * t807;
t541 = -pkin(11) * t659 + t547;
t534 = pkin(5) * t699 + t541;
t1001 = t534 * t811;
t1000 = t542 * t811;
t999 = t568 * t812;
t610 = t754 - t623;
t998 = t610 * t768;
t997 = t621 * t807;
t996 = t623 * t768;
t994 = t657 * t699;
t993 = t657 * t768;
t992 = t659 * t699;
t991 = t659 * t768;
t989 = t705 * t707;
t988 = t705 * t768;
t987 = t707 * t768;
t715 = t719 * qJ(4);
t980 = t768 * t813;
t979 = t797 * t808;
t978 = t798 * t808;
t801 = t805 ^ 2;
t977 = t801 * t816;
t975 = t805 * t810;
t882 = pkin(1) * qJD(2) * t1003;
t854 = qJD(1) * t882;
t879 = pkin(1) * t893;
t920 = pkin(8) * t786 + t809 * t879 + t814 * t854;
t830 = -pkin(8) * t881 + t920;
t648 = pkin(9) * t853 + t830;
t848 = t876 * qJD(2);
t651 = (qJD(1) * t848 + qJDD(1) * t855) * t805;
t889 = t808 * t648 - t813 * t651 + t688 * t939 + t698 * t940;
t856 = qJDD(4) + t889;
t537 = -pkin(4) * t624 - t1017 * t719 + t856;
t888 = pkin(8) * t1036 + t809 * t854 - t814 * t879;
t649 = -pkin(2) * t853 + t888;
t817 = t624 * qJ(4) - t707 * qJD(4) + t649;
t543 = t1017 * t625 + t817;
t526 = -qJD(5) * t548 + t812 * t537 - t807 * t543;
t523 = -pkin(5) * t621 - pkin(11) * t568 + t526;
t972 = t806 * t523;
t747 = t807 * t769;
t970 = t807 * t808;
t969 = t808 * t812;
t968 = t808 * t814;
t615 = t812 * t621;
t966 = t812 * t813;
t965 = t812 * t814;
t609 = t1017 * t707 + t1002;
t961 = t807 * t594 + t812 * t609;
t836 = t805 * (t807 * t968 + t809 * t812);
t697 = qJD(1) * t836;
t960 = t1019 * t860 + t696 * t806 - t697 * t811 + t745 * t940;
t959 = t1019 * t745 + t811 * t696 + t697 * t806 - t860 * t940;
t952 = t813 * t721 + t808 * t722;
t639 = -qJ(4) * t917 - t952;
t613 = -pkin(4) * t886 - t639;
t936 = qJD(5) * t813;
t912 = t807 * t936;
t919 = -pkin(5) * t812 - pkin(4);
t954 = -t613 + (-pkin(9) + t919) * t940 + (-t696 - t912) * pkin(5);
t953 = t813 * t717 + t808 * t718;
t951 = t812 * t740 + t747;
t915 = t813 * t943;
t885 = t805 * t915;
t950 = (t885 - t939) * qJ(4) + t1044;
t949 = -t1016 * t940 - t613;
t911 = t805 * t941;
t726 = pkin(8) * t911 + t809 * t882;
t948 = pkin(5) * t937 - t707 * t919 - t932;
t770 = t1016 * t813;
t802 = t809 ^ 2;
t946 = -t814 ^ 2 + t802;
t942 = qJD(2) * t809;
t935 = qJD(5) * t1017;
t933 = qJD(6) * t811;
t925 = t814 * t977;
t923 = t805 * t965;
t922 = t811 * t568 - t806 * t569 - t657 * t933;
t914 = t805 * t942;
t759 = t1005 * t812;
t910 = 0.2e1 * pkin(1) * t801;
t904 = pkin(11) * t813 - t740;
t844 = -t807 * t537 - t812 * t543 - t574 * t937 + t579 * t938;
t524 = -pkin(11) * t569 - t844;
t900 = t811 * t523 - t806 * t524;
t898 = t812 * t595 - t605 * t807;
t675 = t735 * t813 - t808 * t918;
t894 = t699 * t807;
t891 = qJD(6) * t534 + t524;
t890 = -t813 * t648 - t808 * t651 + t688 * t940 - t698 * t939;
t877 = t805 * t816 * t1003;
t875 = g(1) * t674 - g(2) * t678;
t679 = t737 * t813 + t808 * t975;
t874 = -g(1) * t675 + g(2) * t679;
t873 = -g(1) * t734 + g(2) * t736;
t872 = -g(1) * t737 - g(2) * t735;
t870 = t807 * t940 - t697;
t589 = t812 * t594;
t758 = t1005 * t807;
t869 = -qJD(6) * t758 - pkin(5) * t705 + t589 + (-t609 - t1012) * t807 - t1005 * t938;
t868 = t1012 * t812 + t1023 * t759 + t961;
t660 = -pkin(11) * t966 + t951;
t867 = pkin(5) * t885 - pkin(11) * t697 + qJD(6) * t660 - (pkin(5) * t813 - pkin(11) * t970) * qJD(3) - (t812 * t904 - t747) * qJD(5) + t1027 - t1042 * t807;
t748 = t812 * t769;
t653 = pkin(5) * t808 + t807 * t904 + t748;
t866 = -qJD(6) * t653 + t1026 + (-t912 - t871) * pkin(11);
t529 = t534 * t806 + t1000;
t673 = -t732 * t807 + t923;
t550 = pkin(5) * t733 + pkin(11) * t673 + t898;
t672 = t732 * t812 + t807 * t973;
t553 = pkin(11) * t672 + t962;
t864 = t550 * t811 - t553 * t806;
t863 = t550 * t806 + t553 * t811;
t861 = t811 * t672 + t673 * t806;
t612 = t672 * t806 - t673 * t811;
t857 = 0.2e1 * t901 + qJD(2);
t852 = pkin(3) * t813 - t905;
t637 = qJ(4) * t973 - t953;
t723 = t805 * t848;
t725 = t850 * qJD(2);
t851 = -t717 * t939 - t718 * t940 + t723 * t813 - t808 * t725;
t752 = qJD(4) * t768;
t551 = -t715 + t752 + t890;
t847 = -t699 * t894 - t615;
t845 = -t717 * t940 + t718 * t939 + t808 * t723 + t813 * t725;
t671 = -t884 + (qJD(3) * t1003 + t911) * t813;
t560 = pkin(4) * t671 - t1017 * t914 - t851;
t670 = qJD(3) * t733 + t808 * t911;
t838 = -qJ(4) * t671 - qJD(4) * t733 + t726;
t564 = t1017 * t670 + t838;
t843 = t807 * t560 + t812 * t564 + t595 * t937 - t605 * t938;
t532 = -t659 * t934 + t922;
t841 = -g(1) * t679 - g(2) * t675 - g(3) * t733;
t839 = t853 * MDP(8);
t835 = -t699 ^ 2 * t812 + t997;
t833 = -g(3) * t976 + t872;
t606 = -pkin(4) * t732 - t637;
t540 = -pkin(4) * t625 - t551;
t831 = t540 + t841;
t829 = -t687 * t768 - t1013;
t604 = t705 * pkin(3) + t818;
t828 = t604 * t768 + t1013;
t826 = g(1) * t678 + g(2) * t674 + g(3) * t732 - t889;
t825 = t841 - t890;
t824 = -qJD(5) * t962 + t812 * t560 - t564 * t807;
t521 = -qJD(6) * t529 + t900;
t823 = t1004 * t768 + t834;
t571 = -qJ(4) * t914 + qJD(4) * t973 - t845;
t552 = t625 * pkin(3) + t817;
t821 = -t552 + t823;
t820 = -t624 - t988;
t561 = -pkin(4) * t670 - t571;
t819 = t604 * t707 + qJDD(4) - t826;
t795 = pkin(5) * t807 + qJ(4);
t731 = pkin(5) * t966 + t770;
t728 = t745 * t813;
t727 = t860 * t813;
t650 = pkin(3) * t707 + t1002;
t643 = t678 * t807 + t736 * t812;
t642 = t678 * t812 - t736 * t807;
t641 = -pkin(3) * t917 + t895;
t636 = t822 + t1006;
t608 = pkin(3) * t768 - t932;
t601 = qJD(5) * t672 + t670 * t807 + t812 * t914;
t600 = -t670 * t812 - qJD(5) * t923 + (qJD(5) * t732 + t914) * t807;
t577 = pkin(3) * t670 + t838;
t576 = -pkin(3) * t914 - t851;
t575 = -pkin(5) * t672 + t606;
t555 = t856 - t1014;
t546 = pkin(5) * t600 + t561;
t545 = qJD(6) * t612 + t811 * t600 + t601 * t806;
t544 = qJD(6) * t861 - t600 * t806 + t601 * t811;
t531 = pkin(5) * t569 + t540;
t530 = -pkin(11) * t600 + t843;
t528 = -t542 * t806 + t1001;
t527 = pkin(5) * t671 - pkin(11) * t601 + t824;
t520 = t811 * t891 - t538 + t972;
t1 = [(t532 * t612 - t544 * t862) * MDP(29) + (t532 * t733 + t544 * t692 - t612 * t618 - t671 * t862) * MDP(31) + (t532 * t861 - t533 * t612 - t544 * t584 + t545 * t862) * MDP(30) + (-t533 * t733 - t545 * t692 - t584 * t671 - t618 * t861) * MDP(32) + (t552 * t636 + t604 * t577 + t551 * t637 + t610 * t571 + t555 * t638 + t608 * t576 - g(1) * (-t810 * pkin(1) - t735 * pkin(2) - pkin(3) * t675 + pkin(8) * t918 - t734 * pkin(9) - qJ(4) * t674) - g(2) * (pkin(1) * t1015 + t737 * pkin(2) + t679 * pkin(3) + pkin(8) * t975 + t736 * pkin(9) + t678 * qJ(4))) * MDP(21) + qJDD(1) * MDP(1) + (t551 * t732 + t555 * t733 + t571 * t705 + t576 * t707 + t608 * t671 + t610 * t670 - t624 * t638 + t625 * t637 - t873) * MDP(18) + (-t851 * t768 + t896 * t719 + t726 * t705 + t716 * t625 + t649 * t732 + t687 * t670 + (-t622 * t942 + t814 * t889) * t805 - t874) * MDP(16) + (t670 * t768 - t719 * t732 + (t625 * t814 - t705 * t942) * t805) * MDP(14) + (-t552 * t733 + t571 * t768 - t577 * t707 - t604 * t671 + t624 * t636 - t637 * t719 + (t551 * t814 - t610 * t942) * t805 + t875) * MDP(20) + (-t671 * t768 + t719 * t733 + (t624 * t814 + t707 * t942) * t805) * MDP(13) + (-t552 * t732 - t576 * t768 - t577 * t705 - t604 * t670 - t625 * t636 + t638 * t719 + (-t555 * t814 + t608 * t942) * t805 + t874) * MDP(19) + (g(1) * t810 - g(2) * t1015) * MDP(2) + (g(1) * t1015 + g(2) * t810) * MDP(3) + (t624 * t732 - t625 * t733 - t670 * t707 - t671 * t705) * MDP(12) + (-t624 * t733 + t671 * t707) * MDP(11) + (-t569 * t733 - t600 * t699 - t621 * t672 - t657 * t671) * MDP(25) + (t568 * t733 + t601 * t699 + t621 * t673 + t659 * t671) * MDP(24) + (-t621 * t733 + t671 * t699) * MDP(26) + (-t618 * t733 + t671 * t692) * MDP(33) + (t568 * t672 + t569 * t673 - t600 * t659 - t601 * t657) * MDP(23) + (-t568 * t673 + t601 * t659) * MDP(22) + (-t725 * t858 - t947 * t853 - t830 * t1003 + (-t908 - t929) * t910 + t873) * MDP(10) + (-t726 * t858 + t850 * t853 - t888 * t1003 + g(1) * t735 - g(2) * t737 + (-t909 + t928) * t910) * MDP(9) + t1003 * t839 + (t845 * t768 - t953 * t719 + t726 * t707 - t716 * t624 + t649 * t733 + t687 * t671 + (-t623 * t942 - t814 * t890) * t805 - t875) * MDP(17) + (0.2e1 * (t809 * t928 - t930 * t946) * MDP(5) + (qJDD(1) * t802 + 0.2e1 * t809 * t908) * MDP(4)) * t801 + (-t719 * t814 - t768 * t942) * t805 * MDP(15) + (g(1) * t1031 - g(2) * t642 - t540 * t673 - t548 * t671 + t561 * t659 + t606 * t568 + t580 * t601 + t962 * t621 - t843 * t699 + t844 * t733) * MDP(28) + (g(1) * t1032 - g(2) * t643 + t526 * t733 - t540 * t672 + t547 * t671 + t561 * t657 + t606 * t569 + t580 * t600 - t898 * t621 + t824 * t699) * MDP(27) + (-(qJD(6) * t864 + t527 * t806 + t530 * t811) * t692 + t863 * t618 - t520 * t733 - t529 * t671 - t546 * t862 + t575 * t532 + t531 * t612 + t562 * t544 + g(1) * t1033 - g(2) * t632) * MDP(35) + ((-qJD(6) * t863 + t527 * t811 - t530 * t806) * t692 - t864 * t618 + t521 * t733 + t528 * t671 + t546 * t584 + t575 * t533 - t531 * t861 + t562 * t545 + g(1) * t1034 - g(2) * t633) * MDP(34) + (t1025 * t809 + t857 * t911) * MDP(6) + (t1025 * t814 - t857 * t914) * MDP(7); ((t653 * t806 + t660 * t811) * t618 - t520 * t808 - t529 * t939 + t731 * t532 - t531 * t728 - g(1) * (-t736 * t978 - t737 * t797) - g(2) * (-t734 * t978 - t735 * t797) + (t806 * t867 + t811 * t866) * t692 - t954 * t862 + t960 * t562 + (t529 * t915 - g(3) * (-t797 * t809 + t798 * t968)) * t805) * MDP(35) + (t532 * t727 + t533 * t728 - t584 * t960 - t862 * t959) * MDP(30) + (-t532 * t728 - t862 * t960) * MDP(29) + (-t608 * t917 + t625 * t852 + t641 * t768 - t705 * t950 + t808 * t828 - t813 * t821) * MDP(19) + (t610 * t917 - t624 * t852 - t639 * t768 - t707 * t950 + t808 * t821 + t813 * t828) * MDP(20) + (t532 * t808 + t618 * t728 + t692 * t960 + t862 * t980) * MDP(31) + (-t624 * t808 - t707 * t980) * MDP(11) + (-t621 * t808 - t699 * t980) * MDP(26) + (-t618 * t808 - t692 * t980) * MDP(33) + (t951 * t621 + t844 * t808 + t770 * t568 - g(1) * (-t736 * t969 - t737 * t807) - g(2) * (-t734 * t969 - t735 * t807) - g(3) * (-t807 * t809 + t808 * t965) * t805 + t1026 * t699 + t949 * t659 + t870 * t580 + (-t540 * t807 + t548 * t768 - t580 * t937) * t813) * MDP(28) + t768 * MDP(15) * t917 + (pkin(1) * t809 * t977 + t724 * t858 + t834 - t888) * MDP(9) + (-(t653 * t811 - t660 * t806) * t618 + t521 * t808 + t528 * t939 + t731 * t533 - t531 * t727 - g(1) * (-t736 * t979 + t737 * t798) - g(2) * (-t734 * t979 + t735 * t798) + (t806 * t866 - t811 * t867) * t692 + t954 * t584 - t959 * t562 + (-t528 * t915 - g(3) * (t797 * t968 + t798 * t809)) * t805) * MDP(34) + (-t533 * t808 + t584 * t980 - t618 * t727 + t692 * t959) * MDP(32) + (pkin(1) * t925 + t721 * t858 + (pkin(8) * t930 + g(3)) * t976 - t872 - t920) * MDP(10) + (-t768 * t939 + t719 * t808 + (-t707 * t809 + t768 * t964) * t944) * MDP(13) + (-t814 * t877 + t907) * MDP(6) + (t809 * t877 + t786) * MDP(7) + (t768 * t940 + t719 * t813 + (t705 * t809 - t768 * t968) * t944) * MDP(14) + ((-t624 + t988) * t813 + (-t625 + t987) * t808) * MDP(12) + t946 * MDP(5) * t977 + t839 + (t622 * t917 - pkin(2) * t625 - t724 * t705 - t709 * t768 + t829 * t808 + (-t649 + (t722 + t1004) * t768 + t834) * t813) * MDP(16) + (t657 * t697 + t659 * t696 + (-t657 * t807 + t659 * t812) * t940 + (-t999 + t569 * t807 + (t657 * t812 + t659 * t807) * qJD(5)) * t813) * MDP(23) + (pkin(2) * t624 - t952 * t768 + t623 * t917 - t724 * t707 + t829 * t813 + (t649 - t823) * t808) * MDP(17) + (-t569 * t808 + t871 * t699 + (t699 * t938 + t615 + t993) * t813) * MDP(25) + (t568 * t808 + t870 * t699 + (-t699 * t937 - t991 + t997) * t813) * MDP(24) + (-t639 * t705 - t641 * t707 + (-t551 - t768 * t608 + (qJD(3) * t707 - t625) * pkin(9)) * t813 + (t555 - t998 + (qJD(3) * t705 - t624) * pkin(9)) * t808 + t833) * MDP(18) + (-(-t740 * t807 + t748) * t621 + t526 * t808 + t770 * t569 - g(1) * (-t736 * t970 + t737 * t812) - g(2) * (-t734 * t970 + t735 * t812) - g(3) * t836 + (-t740 * t937 + (-qJD(5) * t769 + t1042) * t807 - t1027) * t699 + t949 * t657 - t871 * t580 + (t540 * t812 - t547 * t768 - t580 * t938) * t813) * MDP(27) - t809 * MDP(4) * t925 + (-t568 * t807 * t813 + (-t812 * t936 + t870) * t659) * MDP(22) + (-t608 * t641 - t610 * t639 + t950 * t604 + (-t551 * t813 + t555 * t808 + (t608 * t813 + t610 * t808) * qJD(3) + t833) * pkin(9) + (-t552 + t834) * t852) * MDP(21); t847 * MDP(24) + (t650 * t707 + t768 * t932 + 0.2e1 * t715 - t752 + t825) * MDP(20) + (-t625 - t987) * MDP(14) + t1041 * MDP(32) + (qJ(4) * t569 - t589 * t699 + t931 * t657 + t1021 * t812 + ((t609 + t935) * t699 + t831) * t807) * MDP(27) + (qJ(4) * t568 + t961 * t699 + t931 * t659 - t1021 * t807 + (t699 * t935 + t831) * t812) * MDP(28) + (-t532 * t860 - t862 * t956) * MDP(29) + ((-t758 * t811 - t759 * t806) * t618 + t795 * t532 - t531 * t860 + (t806 * t869 + t811 * t868) * t692 - t948 * t862 + t956 * t562 + t841 * t798) * MDP(35) + (-t532 * t745 + t533 * t860 - t584 * t956 + t862 * t955) * MDP(30) + t1018 * MDP(12) + (-0.2e1 * t1014 + t819 + t996) * MDP(19) + t835 * MDP(25) + t719 * MDP(15) + (t622 * t768 - t825) * MDP(17) + t820 * MDP(13) + (-t551 * qJ(4) - t555 * pkin(3) - t604 * t650 - t608 * t623 - g(1) * (-pkin(3) * t678 + qJ(4) * t679) - g(2) * (-pkin(3) * t674 + qJ(4) * t675) - g(3) * (t986 - t1006) + t932 * t610) * MDP(21) + (-t659 * t894 + t999) * MDP(22) + (-(t758 * t806 - t759 * t811) * t618 + t795 * t533 + t531 * t745 + (t806 * t868 - t811 * t869) * t692 + t948 * t584 + t955 * t562 + t841 * t797) * MDP(34) + ((-t569 - t992) * t812 + (-t568 + t994) * t807) * MDP(23) + t1024 * MDP(31) + (-t687 * t707 + t826 - t996) * MDP(16) + MDP(11) * t989 + (pkin(3) * t624 - qJ(4) * t625 + (-t610 - t623) * t707) * MDP(18) + (t659 * MDP(24) - t604 * MDP(20) - t584 * MDP(32) + t547 * MDP(27) - t548 * MDP(28) - t529 * MDP(35) + t692 * MDP(33) + t699 * MDP(26) + t650 * MDP(19) - t657 * MDP(25) + t687 * MDP(17) + t528 * MDP(34) - t862 * MDP(31) + (t608 + t932) * MDP(18) - MDP(12) * t705) * t705; t820 * MDP(18) + (t719 - t989) * MDP(19) + (-t768 ^ 2 - t1018) * MDP(20) + (t819 - t998 - t1014) * MDP(21) + (t847 + t993) * MDP(27) + (t835 + t991) * MDP(28) + (t768 * t584 + t1024) * MDP(34) + (-t768 * t862 + t1041) * MDP(35); t659 * t657 * MDP(22) + (-t657 ^ 2 + t659 ^ 2) * MDP(23) + (t568 + t994) * MDP(24) + (-t569 + t992) * MDP(25) - t621 * MDP(26) + (-g(1) * t642 - g(2) * t1031 - g(3) * t672 + t548 * t699 - t580 * t659 + t526) * MDP(27) + (g(1) * t643 + g(2) * t1032 - g(3) * t673 + t547 * t699 + t580 * t657 + t844) * MDP(28) + (t532 + t1040) * MDP(31) + (-t533 - t1039) * MDP(32) + (-(-t541 * t806 - t1000) * t692 + (-t584 * t659 - t618 * t811 - t692 * t934) * pkin(5) + t521 + t1030) * MDP(34) + ((-t542 * t692 - t523) * t806 + (t541 * t692 - t891) * t811 + (t618 * t806 + t659 * t862 - t692 * t933) * pkin(5) + t1035) * MDP(35) + t1029; (t922 + t1040) * MDP(31) + (-t899 - t1039) * MDP(32) + (t529 * t692 + t1030 + t900) * MDP(34) + (-t811 * t524 + t528 * t692 + t1035 - t972) * MDP(35) + (-MDP(31) * t990 + MDP(32) * t862 - MDP(34) * t529 - MDP(35) * t1001) * qJD(6) + t1029;];
tau  = t1;
