% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR14_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPRR14_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR14_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR14_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR14_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR14_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:21:00
% EndTime: 2019-03-09 20:21:22
% DurationCPUTime: 13.80s
% Computational Cost: add. (9021->683), mult. (22944->894), div. (0->0), fcn. (17862->10), ass. (0->274)
t670 = sin(pkin(6));
t678 = cos(qJ(2));
t776 = qJD(1) * t678;
t750 = t670 * t776;
t647 = -qJD(3) + t750;
t674 = sin(qJ(2));
t823 = cos(pkin(6));
t741 = t823 * qJD(1);
t722 = pkin(1) * t741;
t654 = t674 * t722;
t609 = pkin(8) * t750 + t654;
t673 = sin(qJ(3));
t725 = t673 * t750;
t772 = qJD(3) * t673;
t850 = qJD(4) * t673 + t609 + (t725 - t772) * pkin(3);
t777 = qJD(1) * t670;
t751 = t674 * t777;
t606 = -pkin(8) * t751 + t678 * t722;
t697 = (pkin(2) * t674 - pkin(9) * t678) * t670;
t607 = qJD(1) * t697;
t677 = cos(qJ(3));
t735 = -t673 * t606 + t607 * t677;
t771 = qJD(3) * t677;
t796 = t677 * t678;
t826 = pkin(4) + pkin(9);
t827 = pkin(3) + pkin(10);
t849 = (pkin(4) * t796 - t674 * t827) * t777 - t735 - t826 * t771;
t842 = t850 + t647 * (pkin(10) * t673 - qJ(4) * t677);
t701 = t741 + qJD(2);
t592 = t673 * t701 + t677 * t751;
t671 = sin(qJ(6));
t672 = sin(qJ(5));
t675 = cos(qJ(6));
t676 = cos(qJ(5));
t626 = t671 * t676 + t672 * t675;
t831 = qJD(5) + qJD(6);
t787 = (-t592 - t831) * t626;
t689 = t677 * t701;
t762 = qJD(1) * qJD(2);
t744 = t670 * t762;
t720 = t678 * t744;
t802 = t670 * t674;
t757 = t673 * t802;
t723 = qJD(3) * t757;
t549 = qJD(1) * t723 - qJD(3) * t689 - t677 * t720;
t585 = qJD(5) + t592;
t574 = qJD(6) + t585;
t798 = t675 * t676;
t703 = t671 * t672 - t798;
t766 = qJD(6) * t671;
t770 = qJD(5) * t672;
t786 = -t592 * t703 - t671 * t770 - t672 * t766 + t798 * t831;
t848 = t626 * t549 - t574 * t786;
t570 = pkin(9) * t701 + t609;
t605 = (-pkin(2) * t678 - pkin(9) * t674 - pkin(1)) * t670;
t584 = qJD(1) * t605;
t519 = t677 * t570 + t673 * t584;
t590 = t673 * t751 - t689;
t497 = -pkin(4) * t590 + t519;
t636 = t647 * qJ(4);
t483 = t497 - t636;
t544 = -t676 * t590 - t647 * t672;
t462 = pkin(5) * t544 + t483;
t546 = t590 * t672 - t647 * t676;
t809 = t546 * t671;
t487 = t675 * t544 + t809;
t847 = t462 * t487;
t705 = t544 * t671 - t675 * t546;
t846 = t462 * t705;
t845 = t487 * t574;
t844 = t574 * t705;
t578 = t672 * t751 - t676 * t725;
t717 = t676 * t772 + t578;
t841 = -t677 * t750 + t771;
t518 = t570 * t673 - t677 * t584;
t764 = -qJD(4) - t518;
t840 = (-t487 ^ 2 + t705 ^ 2) * MDP(30) - t549 * MDP(33) - t487 * MDP(29) * t705;
t667 = t670 ^ 2;
t839 = -0.2e1 * t667 * t762;
t838 = MDP(5) * (t674 ^ 2 - t678 ^ 2);
t721 = t674 * t744;
t710 = pkin(3) * t721;
t608 = qJD(2) * t697;
t600 = qJD(1) * t608;
t752 = pkin(1) * t823;
t833 = -pkin(8) * t802 + t678 * t752;
t610 = t833 * qJD(2);
t601 = qJD(1) * t610;
t728 = t570 * t771 + t584 * t772 - t677 * t600 + t673 * t601;
t467 = -t710 + t728;
t512 = t636 - t519;
t836 = -t512 * t647 + t467;
t727 = t674 * t752;
t801 = t670 * t678;
t604 = pkin(8) * t801 + pkin(9) * t823 + t727;
t736 = -t673 * t604 + t605 * t677;
t528 = pkin(3) * t801 - t736;
t618 = t673 * t823 + t677 * t802;
t498 = pkin(4) * t618 + pkin(10) * t801 + t528;
t617 = -t677 * t823 + t757;
t603 = -pkin(2) * t823 - t833;
t682 = -t618 * qJ(4) + t603;
t507 = t617 * t827 + t682;
t794 = t672 * t498 + t676 * t507;
t835 = t849 * t676;
t743 = -qJ(4) * t673 - pkin(2);
t621 = -t677 * t827 + t743;
t648 = t826 * t673;
t769 = qJD(5) * t676;
t834 = t621 * t770 - t648 * t769 + t672 * t849 + t842 * t676;
t773 = qJD(3) * t592;
t550 = t673 * t720 + t773;
t832 = t549 * t703 + t574 * t787;
t763 = pkin(4) * t592 - t764;
t830 = t483 * t585 + t549 * t827;
t482 = qJD(5) * t546 - t676 * t550 + t672 * t721;
t481 = t672 * t550 + t590 * t769 + t647 * t770 + t676 * t721;
t738 = t481 * t671 + t675 * t482;
t435 = -qJD(6) * t705 + t738;
t829 = t677 * t831;
t828 = t592 ^ 2;
t680 = qJD(1) ^ 2;
t825 = pkin(11) * t592;
t824 = pkin(11) + t827;
t822 = qJ(4) * t590;
t472 = t647 * t827 + t763;
t569 = -pkin(2) * t701 - t606;
t681 = -t592 * qJ(4) + t569;
t477 = t590 * t827 + t681;
t444 = t676 * t472 - t477 * t672;
t439 = -pkin(11) * t546 + t444;
t436 = pkin(5) * t585 + t439;
t821 = t436 * t675;
t445 = t472 * t672 + t477 * t676;
t440 = -pkin(11) * t544 + t445;
t820 = t440 * t675;
t642 = qJ(4) * t721;
t729 = t570 * t772 - t584 * t771 - t673 * t600 - t677 * t601;
t709 = -qJD(4) * t647 - t729;
t464 = -t642 - t709;
t452 = -pkin(4) * t550 - t464;
t819 = t452 * t672;
t818 = t452 * t676;
t817 = t481 * t676;
t506 = t590 * pkin(3) + t681;
t816 = t506 * t592;
t813 = t544 * t585;
t812 = t544 * t647;
t811 = t546 * t585;
t810 = t546 * t647;
t808 = t549 * t672;
t807 = t590 * t592;
t806 = t590 * t647;
t805 = t592 * t647;
t694 = t647 * t677;
t803 = t667 * t680;
t628 = t672 * t648;
t799 = t673 * t678;
t541 = t676 * t549;
t797 = t676 * t677;
t511 = t592 * t827 + t822;
t793 = t672 * t497 + t676 * t511;
t579 = (t672 * t799 + t674 * t676) * t777;
t792 = t578 * t671 - t579 * t675 + t626 * t772 + t703 * t829;
t791 = t675 * t578 + t579 * t671 + t626 * t829 - t703 * t772;
t788 = qJ(4) * t841 + t850;
t783 = t677 * t606 + t673 * t607;
t530 = -qJ(4) * t751 - t783;
t515 = -pkin(4) * t725 - t530;
t768 = qJD(5) * t677;
t747 = t672 * t768;
t753 = -pkin(5) * t676 - pkin(4);
t785 = -t515 + (-pkin(9) + t753) * t772 + (-t578 - t747) * pkin(5);
t784 = t677 * t604 + t673 * t605;
t782 = t676 * t621 + t628;
t781 = -t826 * t772 - t515;
t602 = pkin(8) * t720 + qJD(2) * t654;
t746 = qJD(2) * t801;
t611 = pkin(8) * t746 + qJD(2) * t727;
t780 = pkin(5) * t769 - t592 * t753 - t764;
t649 = t826 * t677;
t775 = qJD(2) * t674;
t774 = qJD(2) * t677;
t767 = qJD(5) * t827;
t765 = qJD(6) * t675;
t761 = pkin(9) * t647 * t673;
t760 = pkin(9) * t694;
t759 = pkin(9) * t775;
t758 = pkin(9) * t774;
t756 = t676 * t801;
t755 = t675 * t481 - t671 * t482 - t544 * t765;
t749 = t670 * t775;
t639 = t824 * t676;
t742 = pkin(11) * t677 - t621;
t708 = t827 * t749;
t454 = -pkin(4) * t549 - qJD(1) * t708 + t728;
t687 = qJ(4) * t549 - qJD(4) * t592 + t602;
t456 = t550 * t827 + t687;
t430 = -qJD(5) * t445 + t676 * t454 - t456 * t672;
t426 = -pkin(5) * t549 - pkin(11) * t481 + t430;
t429 = t672 * t454 + t676 * t456 + t472 * t769 - t477 * t770;
t427 = -pkin(11) * t482 + t429;
t740 = t675 * t426 - t671 * t427;
t438 = t440 * t766;
t739 = t671 * t426 - t438;
t737 = t676 * t498 - t507 * t672;
t734 = t585 ^ 2;
t731 = qJD(6) * t436 + t427;
t730 = MDP(4) * t667 * t674 * t678;
t718 = pkin(1) * t839;
t716 = t672 * t772 - t579;
t492 = t676 * t497;
t638 = t824 * t672;
t715 = -qJD(6) * t638 - pkin(5) * t590 + t492 + (-t511 - t825) * t672 - t824 * t770;
t714 = t639 * t831 + t676 * t825 + t793;
t548 = -pkin(11) * t797 + t782;
t713 = -pkin(11) * t579 + qJD(6) * t548 - (t676 * t742 - t628) * qJD(5) + t835 - t841 * pkin(5) + (pkin(11) * t772 - t842) * t672;
t629 = t676 * t648;
t536 = pkin(5) * t673 + t672 * t742 + t629;
t712 = -qJD(6) * t536 + t834 + (-t747 - t717) * pkin(11);
t432 = t436 * t671 + t820;
t561 = t617 * t672 - t756;
t447 = pkin(5) * t618 - pkin(11) * t561 + t737;
t560 = t617 * t676 + t672 * t801;
t448 = pkin(11) * t560 + t794;
t707 = t447 * t675 - t448 * t671;
t706 = t447 * t671 + t448 * t675;
t704 = t675 * t560 - t561 * t671;
t514 = t560 * t671 + t561 * t675;
t527 = qJ(4) * t801 - t784;
t699 = -t604 * t771 - t605 * t772 + t608 * t677 - t673 * t610;
t696 = -t672 * t734 - t541;
t693 = -t519 * t647 - t728;
t692 = -t604 * t772 + t605 * t771 + t673 * t608 + t677 * t610;
t559 = -t723 + (qJD(3) * t823 + t746) * t677;
t460 = pkin(4) * t559 - t699 - t708;
t558 = qJD(3) * t618 + t673 * t746;
t686 = -qJ(4) * t559 - qJD(4) * t618 + t611;
t465 = t558 * t827 + t686;
t691 = t672 * t460 + t676 * t465 + t498 * t769 - t507 * t770;
t434 = -t546 * t766 + t755;
t685 = -t676 * t734 + t808;
t508 = -pkin(4) * t617 - t527;
t684 = -t549 - t806;
t683 = -qJD(5) * t794 + t676 * t460 - t465 * t672;
t424 = -qJD(6) * t432 + t740;
t469 = -qJ(4) * t749 + qJD(4) * t801 - t692;
t461 = -pkin(4) * t558 - t469;
t663 = pkin(5) * t672 + qJ(4);
t641 = -pkin(3) * t677 + t743;
t616 = pkin(5) * t797 + t649;
t613 = t626 * t677;
t612 = t703 * t677;
t543 = t549 * t673;
t534 = pkin(3) * t592 + t822;
t532 = -pkin(3) * t751 - t735;
t529 = t549 * t618;
t526 = t617 * pkin(3) + t682;
t510 = pkin(3) * t647 - t764;
t504 = qJD(5) * t560 + t558 * t672 + t676 * t749;
t503 = -t558 * t676 - qJD(5) * t756 + (qJD(5) * t617 + t749) * t672;
t475 = pkin(3) * t558 + t686;
t474 = -pkin(3) * t749 - t699;
t473 = -pkin(5) * t560 + t508;
t466 = pkin(3) * t550 + t687;
t443 = pkin(5) * t503 + t461;
t442 = qJD(6) * t514 + t675 * t503 + t504 * t671;
t441 = qJD(6) * t704 - t503 * t671 + t504 * t675;
t437 = pkin(5) * t482 + t452;
t433 = -pkin(11) * t503 + t691;
t431 = -t440 * t671 + t821;
t428 = pkin(5) * t559 - pkin(11) * t504 + t683;
t423 = t731 * t675 + t739;
t1 = [(MDP(6) * t746 - MDP(7) * t749) * (0.2e1 * t741 + qJD(2)) + (-t647 * t670 - t667 * t776) * MDP(15) * t775 + (t559 * t592 - t529) * MDP(11) + (t559 * t585 - t529) * MDP(26) + (t559 * t574 - t529) * MDP(33) + t838 * t839 + (t434 * t618 + t441 * t574 - t514 * t549 - t559 * t705) * MDP(31) + (t434 * t514 - t441 * t705) * MDP(29) + (-(qJD(6) * t707 + t428 * t671 + t433 * t675) * t574 + t706 * t549 - t423 * t618 - t432 * t559 - t443 * t705 + t473 * t434 + t437 * t514 + t462 * t441) * MDP(35) + (t434 * t704 - t435 * t514 - t441 * t487 + t442 * t705) * MDP(30) + (-t435 * t618 - t442 * t574 - t487 * t559 - t549 * t704) * MDP(32) + ((-qJD(6) * t706 + t428 * t675 - t433 * t671) * t574 - t707 * t549 + t424 * t618 + t431 * t559 + t443 * t487 + t473 * t435 - t437 * t704 + t462 * t442) * MDP(34) + (t549 * t617 - t550 * t618 - t558 * t592 - t559 * t590) * MDP(12) + (t464 * t617 + t467 * t618 + t469 * t590 + t474 * t592 + t510 * t559 + t512 * t558 + t527 * t550 - t528 * t549) * MDP(18) + (-t482 * t618 - t503 * t585 - t544 * t559 - t549 * t560) * MDP(25) + (t481 * t618 + t504 * t585 + t546 * t559 - t549 * t561) * MDP(24) + (t481 * t560 - t482 * t561 - t503 * t546 - t504 * t544) * MDP(23) + (t481 * t561 + t504 * t546) * MDP(22) + (t464 * t527 + t466 * t526 + t467 * t528 + t469 * t512 + t474 * t510 + t475 * t506) * MDP(21) + (-t601 * t823 - t610 * t701 + t678 * t718) * MDP(10) + (-t602 * t823 - t611 * t701 + t674 * t718) * MDP(9) + (-t429 * t618 - t445 * t559 + t452 * t561 + t461 * t546 + t508 * t481 + t483 * t504 + t549 * t794 - t585 * t691) * MDP(28) + (t692 * t647 + t611 * t592 - t603 * t549 + t602 * t618 + t569 * t559 + (-t729 * t678 + (-qJD(1) * t784 - t519) * t775) * t670) * MDP(17) + (-t559 * t647 + (t549 * t678 + (qJD(1) * t618 + t592) * t775) * t670) * MDP(13) + (t558 * t647 + (t550 * t678 + (-qJD(1) * t617 - t590) * t775) * t670) * MDP(14) + (-t699 * t647 + t611 * t590 + t603 * t550 + t602 * t617 + t569 * t558 + (t728 * t678 + (qJD(1) * t736 - t518) * t775) * t670) * MDP(16) + (-t466 * t618 + t469 * t647 - t475 * t592 - t506 * t559 + t526 * t549 + (t464 * t678 + (-qJD(1) * t527 - t512) * t775) * t670) * MDP(20) + (-t466 * t617 - t474 * t647 - t475 * t590 - t506 * t558 - t526 * t550 + (-t467 * t678 + (qJD(1) * t528 + t510) * t775) * t670) * MDP(19) + 0.2e1 * t730 * t762 + (t430 * t618 + t444 * t559 - t452 * t560 + t461 * t544 + t508 * t482 + t483 * t503 - t549 * t737 + t585 * t683) * MDP(27); ((-MDP(6) * t678 + MDP(7) * t674) * t670 * t823 - t730) * t680 + t803 * t838 + (-(-t621 * t672 + t629) * t549 + t430 * t673 + t649 * t482 + (-t621 * t769 + (-qJD(5) * t648 + t842) * t672 - t835) * t585 + t781 * t544 - t717 * t483 + (-t444 * t647 - t483 * t770 + t818) * t677) * MDP(27) + t647 * MDP(15) * t751 + (-t434 * t613 - t705 * t792) * MDP(29) + ((t536 * t671 + t548 * t675) * t549 - t423 * t673 + t616 * t434 - t437 * t613 + (t671 * t713 + t675 * t712) * t574 - t785 * t705 + t792 * t462 + t432 * t694) * MDP(35) + (t434 * t612 + t435 * t613 - t487 * t792 - t705 * t791) * MDP(30) + (t434 * t673 + t549 * t613 + t574 * t792 + t694 * t705) * MDP(31) + (-t592 * t694 - t543) * MDP(11) + (-t585 * t694 - t543) * MDP(26) + (-t574 * t694 - t543) * MDP(33) + (-(t536 * t675 - t548 * t671) * t549 + t424 * t673 + t616 * t435 - t437 * t612 + (t671 * t712 - t675 * t713) * t574 + t785 * t487 - t791 * t462 - t431 * t694) * MDP(34) + (t544 * t579 + t546 * t578 + (-t544 * t672 + t546 * t676) * t772 + (-t817 + t482 * t672 + (t544 * t676 + t546 * t672) * qJD(5)) * t677) * MDP(23) + (t481 * t673 + t716 * t585 + (-t585 * t769 + t808 - t810) * t677) * MDP(24) + (-t482 * t673 + t717 * t585 + (t585 * t770 + t541 + t812) * t677) * MDP(25) + ((-t549 + t806) * t677 + (-t550 + t805) * t673) * MDP(12) + (pkin(1) * t674 * t803 + t609 * t701 - t602) * MDP(9) + (pkin(8) * t721 + t606 * t701 + (-qJD(2) * t741 + t803) * t678 * pkin(1)) * MDP(10) + (t647 * t772 + (-t647 * t799 + (t590 + t774) * t674) * t777) * MDP(14) + (pkin(2) * t549 + t602 * t673 - t783 * t647 - t609 * t592 + (t569 * t677 - t761) * qJD(3) + (-t569 * t796 + (t519 - t758) * t674) * t777) * MDP(17) + (-t647 * t771 + (t647 * t796 + (qJD(2) * t673 - t592) * t674) * t777) * MDP(13) + (-t466 * t673 - t530 * t647 + t549 * t641 + t788 * t592 + (-t506 * t677 + t761) * qJD(3) + (t506 * t796 + (t512 + t758) * t674) * t777) * MDP(20) + (-t435 * t673 + t487 * t694 - t549 * t612 + t574 * t791) * MDP(32) + (t466 * t677 + t532 * t647 - t550 * t641 + t788 * t590 + (-t506 * t673 - t760) * qJD(3) + (-t510 * t674 + (t506 * t678 + t759) * t673) * t777) * MDP(19) + (t466 * t641 - t510 * t532 - t512 * t530 - t788 * t506 + (-t464 * t677 + t467 * t673 + (t510 * t677 + t512 * t673) * qJD(3)) * pkin(9)) * MDP(21) + (-pkin(2) * t550 - t602 * t677 + t735 * t647 - t609 * t590 + (t569 * t673 + t760) * qJD(3) + (t518 * t674 + (-t569 * t678 - t759) * t673) * t777) * MDP(16) + (-t481 * t672 * t677 + (-t676 * t768 + t716) * t546) * MDP(22) + (t782 * t549 - t429 * t673 + t649 * t481 + t834 * t585 + t781 * t546 + t716 * t483 + (t445 * t647 - t483 * t769 - t819) * t677) * MDP(28) + (-t530 * t590 - t532 * t592 + (-t464 - t647 * t510 + (-t550 + t773) * pkin(9)) * t677 + ((qJD(3) * t590 - t549) * pkin(9) + t836) * t673) * MDP(18); MDP(11) * t807 + t685 * MDP(25) + t696 * MDP(24) + MDP(15) * t721 + (-t569 * t592 + t693) * MDP(16) + t684 * MDP(13) + t828 * MDP(12) + (qJ(4) * t481 + t818 + (t676 * t767 + t793) * t585 + t763 * t546 - t830 * t672) * MDP(28) + (qJ(4) * t482 + t819 + (-t492 + (t511 + t767) * t672) * t585 + t763 * t544 + t830 * t676) * MDP(27) + (-t693 - 0.2e1 * t710 + t816) * MDP(19) + (-t672 * t811 + t817) * MDP(22) + ((-t482 - t811) * t676 + (-t481 + t813) * t672) * MDP(23) + t832 * MDP(31) + t848 * MDP(32) + (-t805 - t550) * MDP(14) + (-(t638 * t671 - t639 * t675) * t549 + t663 * t435 + t437 * t626 + (t671 * t714 - t675 * t715) * t574 + t780 * t487 + t786 * t462) * MDP(34) + (-t434 * t703 - t705 * t787) * MDP(29) + ((-t638 * t675 - t639 * t671) * t549 + t663 * t434 - t437 * t703 + (t671 * t715 + t675 * t714) * t574 - t780 * t705 + t787 * t462) * MDP(35) + (-t434 * t626 + t435 * t703 - t487 * t787 + t705 * t786) * MDP(30) + (pkin(3) * t549 - qJ(4) * t550 + (-t512 - t519) * t592) * MDP(18) + (t534 * t592 + t647 * t764 + 0.2e1 * t642 + t709) * MDP(20) + (-pkin(3) * t467 - qJ(4) * t464 - t506 * t534 - t510 * t519 + t512 * t764) * MDP(21) + (t518 * t647 + t729) * MDP(17) + (-t544 * MDP(25) + t546 * MDP(24) - t445 * MDP(28) + t444 * MDP(27) + t534 * MDP(19) - t705 * MDP(31) - t487 * MDP(32) + t431 * MDP(34) - t432 * MDP(35) + (t510 + t764) * MDP(18) - t506 * MDP(20) + t574 * MDP(33) + t585 * MDP(26) + t569 * MDP(17) - MDP(12) * t590) * t590; t684 * MDP(18) + (t721 - t807) * MDP(19) + (-t647 ^ 2 - t828) * MDP(20) + (t816 + t836) * MDP(21) + (t696 + t812) * MDP(27) + (t685 + t810) * MDP(28) + (t647 * t487 + t832) * MDP(34) + (-t647 * t705 + t848) * MDP(35); t546 * t544 * MDP(22) + (-t544 ^ 2 + t546 ^ 2) * MDP(23) + (t481 + t813) * MDP(24) + (-t482 + t811) * MDP(25) - t549 * MDP(26) + (t445 * t585 - t483 * t546 + t430) * MDP(27) + (t444 * t585 + t483 * t544 - t429) * MDP(28) + (t434 + t845) * MDP(31) + (-t435 - t844) * MDP(32) + (-(-t439 * t671 - t820) * t574 + t846 + (-t487 * t546 - t549 * t675 - t574 * t766) * pkin(5) + t424) * MDP(34) + (t847 + t438 + (-t440 * t574 - t426) * t671 + (t439 * t574 - t731) * t675 + (t546 * t705 + t549 * t671 - t574 * t765) * pkin(5)) * MDP(35) + t840; (t755 + t845) * MDP(31) + (-t738 - t844) * MDP(32) + (t432 * t574 + t740 + t846) * MDP(34) + (-t675 * t427 + t431 * t574 - t739 + t847) * MDP(35) + (-MDP(31) * t809 + MDP(32) * t705 - MDP(34) * t432 - MDP(35) * t821) * qJD(6) + t840;];
tauc  = t1;
