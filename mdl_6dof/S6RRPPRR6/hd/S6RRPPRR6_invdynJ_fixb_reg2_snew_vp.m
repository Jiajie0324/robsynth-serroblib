% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 10:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:54:51
% EndTime: 2019-05-06 10:55:08
% DurationCPUTime: 7.35s
% Computational Cost: add. (36458->518), mult. (84094->687), div. (0->0), fcn. (57352->10), ass. (0->318)
t266 = qJD(2) ^ 2;
t261 = sin(qJ(2));
t255 = t261 ^ 2;
t267 = qJD(1) ^ 2;
t333 = t255 * t267;
t236 = t266 + t333;
t265 = cos(qJ(2));
t328 = t265 * t267;
t239 = t261 * t328;
t233 = qJDD(2) - t239;
t329 = t265 * t233;
t380 = pkin(7) * (-t236 * t261 + t329);
t259 = sin(qJ(6));
t257 = sin(pkin(10));
t258 = cos(pkin(10));
t323 = qJD(1) * t265;
t324 = qJD(1) * t261;
t214 = -t257 * t324 - t258 * t323;
t215 = (-t257 * t265 + t258 * t261) * qJD(1);
t260 = sin(qJ(5));
t264 = cos(qJ(5));
t185 = t214 * t260 + t215 * t264;
t318 = qJD(1) * qJD(2);
t307 = t265 * t318;
t317 = t261 * qJDD(1);
t226 = t307 + t317;
t249 = t265 * qJDD(1);
t308 = t261 * t318;
t289 = -t249 + t308;
t193 = t258 * t226 + t257 * t289;
t301 = t226 * t257 - t258 * t289;
t303 = t260 * t193 + t264 * t301;
t136 = -t185 * qJD(5) - t303;
t135 = qJDD(6) - t136;
t263 = cos(qJ(6));
t316 = qJD(2) - qJD(5);
t165 = t185 * t259 + t263 * t316;
t167 = t263 * t185 - t259 * t316;
t141 = t167 * t165;
t371 = t135 - t141;
t379 = t259 * t371;
t183 = -t264 * t214 + t215 * t260;
t156 = t185 * t183;
t252 = qJDD(2) - qJDD(5);
t370 = -t156 - t252;
t378 = t260 * t370;
t377 = t263 * t371;
t376 = t264 * t370;
t137 = -t183 * qJD(5) + t193 * t264 - t260 * t301;
t178 = t183 * t316;
t375 = t137 + t178;
t312 = t316 ^ 2;
t337 = t214 * t215;
t298 = -qJDD(2) + t337;
t374 = t257 * t298;
t373 = t258 * t298;
t262 = sin(qJ(1));
t362 = cos(qJ(1));
t284 = g(1) * t362 + t262 * g(2);
t351 = qJDD(1) * pkin(7);
t218 = -t267 * pkin(1) - t284 + t351;
t332 = t261 * qJ(3);
t361 = pkin(2) * t265;
t291 = -t332 - t361;
t223 = t291 * qJD(1);
t300 = qJD(1) * t223 + t218;
t372 = t261 * t300;
t208 = qJD(2) * t214;
t172 = -t208 - t193;
t306 = -qJDD(2) * pkin(2) - t266 * qJ(3) + qJDD(3);
t359 = g(3) * t265;
t285 = t306 + t359;
t273 = t285 + (-t226 + t307) * qJ(4);
t369 = -qJDD(2) * pkin(3) + t273;
t209 = qJD(2) * t215;
t170 = -t301 - t209;
t366 = t265 ^ 2;
t327 = t366 * t267;
t368 = t329 + (-t266 + t327) * t261;
t180 = qJD(6) + t183;
t304 = t137 * t259 + t263 * t252;
t95 = (qJD(6) - t180) * t167 + t304;
t231 = -qJD(2) * pkin(3) - qJ(4) * t324;
t207 = t265 * t218;
t365 = 2 * qJD(3);
t297 = qJDD(2) * qJ(3) + qJD(2) * t365 + t223 * t323 + t207;
t357 = t266 * pkin(2);
t283 = t297 - t357;
t276 = qJD(2) * t231 + t283;
t278 = -pkin(3) * t328 + t300;
t364 = 2 * qJD(4);
t313 = t215 * t364;
t314 = pkin(3) * t327;
t108 = (t257 * (qJ(4) * t318 - g(3)) - t258 * t278) * t261 + t257 * (-qJ(4) * t249 + t276 - t314) - t258 * t369 + t313;
t162 = t165 ^ 2;
t163 = t167 ^ 2;
t179 = t180 ^ 2;
t181 = t183 ^ 2;
t182 = t185 ^ 2;
t212 = t214 ^ 2;
t213 = t215 ^ 2;
t363 = pkin(2) + pkin(3);
t360 = pkin(5) * t260;
t358 = t261 * g(3);
t271 = qJ(4) * t289 + t276 - t358;
t109 = t258 * (t271 - t314) + t257 * (t278 * t261 + t369) + t214 * t364;
t201 = -qJD(2) * pkin(4) - pkin(8) * t215;
t102 = -pkin(4) * t212 - pkin(8) * t301 + qJD(2) * t201 + t109;
t268 = t298 * pkin(4) + pkin(8) * t172 - t108;
t53 = t102 * t260 - t264 * t268;
t54 = t264 * t102 + t260 * t268;
t32 = t260 * t54 - t264 * t53;
t356 = t257 * t32;
t355 = t258 * t32;
t154 = pkin(5) * t183 - pkin(9) * t185;
t38 = t252 * pkin(5) - pkin(9) * t312 + t154 * t185 + t53;
t354 = t259 * t38;
t353 = t263 * t38;
t352 = qJ(3) * t265;
t104 = t135 + t141;
t349 = t104 * t259;
t348 = t104 * t263;
t305 = t262 * g(1) - t362 * g(2);
t217 = qJDD(1) * pkin(1) + t267 * pkin(7) + t305;
t274 = -pkin(2) * t308 + t217;
t142 = t249 * pkin(2) + t226 * qJ(3) + qJDD(4) - t289 * pkin(3) - qJ(4) * t327 + (qJD(2) * t352 + (-pkin(2) * qJD(2) + t231 + t365) * t261) * qJD(1) + t274;
t110 = pkin(4) * t301 - t212 * pkin(8) + t215 * t201 + t142;
t347 = t110 * t260;
t346 = t110 * t264;
t345 = t142 * t257;
t344 = t142 * t258;
t151 = -t156 + t252;
t343 = t151 * t260;
t342 = t151 * t264;
t341 = t180 * t259;
t340 = t180 * t263;
t187 = qJDD(2) + t337;
t339 = t187 * t257;
t338 = t187 * t258;
t336 = t218 * t261;
t227 = t249 - 0.2e1 * t308;
t331 = t261 * t227;
t232 = qJDD(2) + t239;
t330 = t261 * t232;
t238 = -t266 - t327;
t326 = pkin(7) * (t238 * t265 - t330) + pkin(1) * t227;
t315 = t255 + t366;
t229 = t315 * t267;
t325 = pkin(1) * t229 + t315 * t351;
t322 = qJD(2) * t257;
t321 = qJD(2) * t258;
t319 = qJD(6) + t180;
t311 = t260 * t141;
t310 = t264 * t141;
t309 = -pkin(5) * t264 - pkin(4);
t39 = -pkin(5) * t312 - t252 * pkin(9) - t183 * t154 + t54;
t299 = t316 * t185;
t61 = (-t136 - t299) * pkin(5) - t375 * pkin(9) + t110;
t30 = t259 * t39 - t263 * t61;
t31 = t259 * t61 + t263 * t39;
t15 = t259 * t30 + t263 * t31;
t33 = t260 * t53 + t264 * t54;
t199 = t336 + t359;
t200 = t207 - t358;
t302 = t199 * t261 + t265 * t200;
t296 = -pkin(5) * t38 + pkin(9) * t15;
t295 = t260 * t178;
t294 = t260 * t299;
t293 = t264 * t178;
t292 = t264 * t299;
t290 = t226 + t307;
t14 = t259 * t31 - t263 * t30;
t63 = -t108 * t258 + t109 * t257;
t64 = t108 * t257 + t109 * t258;
t287 = -t137 * t263 + t252 * t259;
t225 = 0.2e1 * t307 + t317;
t286 = t265 * t225 + t331;
t120 = t185 * qJD(2) + t303;
t282 = t297 - t358;
t126 = -t179 - t162;
t71 = t126 * t263 - t379;
t96 = -t167 * t319 - t304;
t281 = pkin(5) * t96 + pkin(9) * t71 - t353;
t280 = t265 * t363 + pkin(1) + t332;
t100 = t165 * t319 + t287;
t133 = -t163 - t179;
t75 = -t133 * t259 - t348;
t279 = pkin(5) * t100 + pkin(9) * t75 + t354;
t125 = t162 + t163;
t112 = -qJD(6) * t165 - t287;
t147 = t180 * t165;
t99 = t112 + t147;
t58 = t259 * t99 - t263 * t95;
t277 = pkin(5) * t125 + pkin(9) * t58 + t15;
t275 = t306 + t372;
t270 = -pkin(2) * t289 + t324 * t365 + t274;
t230 = (t255 - t366) * t267;
t204 = -t213 - t266;
t203 = -t213 + t266;
t202 = t212 - t266;
t198 = t330 + t265 * (t266 - t333);
t197 = t290 * t261;
t196 = t227 * t265;
t186 = -t266 - t212;
t176 = -t182 + t312;
t175 = t181 - t312;
t174 = t275 + t359;
t173 = -t182 - t312;
t171 = -t208 + t193;
t169 = -t209 + t301;
t168 = -t212 - t213;
t164 = t282 - t357;
t160 = -t204 * t257 + t338;
t159 = t204 * t258 + t339;
t158 = t186 * t258 - t374;
t157 = t186 * t257 + t373;
t155 = t182 - t181;
t149 = -t312 - t181;
t146 = -t163 + t179;
t145 = t162 - t179;
t144 = t293 - t294;
t143 = t295 + t292;
t140 = t163 - t162;
t139 = t170 * t258 - t172 * t257;
t138 = t170 * t257 + t172 * t258;
t134 = -t181 - t182;
t132 = t175 * t264 + t343;
t131 = -t176 * t260 + t376;
t130 = t175 * t260 - t342;
t129 = t176 * t264 + t378;
t128 = -t173 * t260 + t342;
t127 = t173 * t264 + t343;
t124 = t137 - t178;
t119 = (0.2e1 * qJD(5) - qJD(2)) * t185 + t303;
t118 = t264 * t137 + t294;
t117 = t260 * t137 - t292;
t116 = -t260 * t136 - t293;
t115 = t264 * t136 - t295;
t114 = t149 * t264 - t378;
t113 = t149 * t260 + t376;
t111 = -qJD(6) * t167 - t304;
t107 = (-t165 * t263 + t167 * t259) * t180;
t106 = (-t165 * t259 - t167 * t263) * t180;
t98 = t112 - t147;
t94 = t112 * t263 - t167 * t341;
t93 = t112 * t259 + t167 * t340;
t92 = -t111 * t259 + t165 * t340;
t91 = -t111 * t263 - t165 * t341;
t88 = -t127 * t257 + t128 * t258;
t87 = t127 * t258 + t128 * t257;
t86 = t107 * t264 + t135 * t260;
t85 = t107 * t260 - t135 * t264;
t84 = t145 * t263 - t349;
t83 = -t146 * t259 + t377;
t82 = t145 * t259 + t348;
t81 = t146 * t263 + t379;
t80 = -t120 * t264 + t124 * t260;
t79 = -t119 * t264 - t260 * t375;
t78 = -t120 * t260 - t124 * t264;
t77 = -t119 * t260 + t264 * t375;
t76 = -pkin(8) * t127 + t346;
t74 = t133 * t263 - t349;
t73 = -t113 * t257 + t114 * t258;
t72 = t113 * t258 + t114 * t257;
t70 = t126 * t259 + t377;
t69 = -pkin(8) * t113 + t347;
t68 = t264 * t94 + t311;
t67 = t264 * t92 - t311;
t66 = t260 * t94 - t310;
t65 = t260 * t92 + t310;
t62 = -pkin(4) * t375 + pkin(8) * t128 + t347;
t59 = -pkin(4) * t119 + pkin(8) * t114 - t346;
t57 = -t259 * t98 + t263 * t96;
t56 = -t259 * t95 - t263 * t99;
t55 = t259 * t96 + t263 * t98;
t51 = -t260 * t95 + t264 * t84;
t50 = t260 * t99 + t264 * t83;
t49 = t260 * t84 + t264 * t95;
t48 = t260 * t83 - t264 * t99;
t47 = -t100 * t260 + t264 * t75;
t46 = t100 * t264 + t260 * t75;
t45 = -t260 * t96 + t264 * t71;
t44 = t260 * t71 + t264 * t96;
t43 = -t257 * t78 + t258 * t80;
t42 = t257 * t80 + t258 * t78;
t41 = t140 * t260 + t264 * t57;
t40 = -t140 * t264 + t260 * t57;
t37 = -t125 * t260 + t264 * t58;
t36 = t125 * t264 + t260 * t58;
t35 = -pkin(9) * t74 + t353;
t34 = -pkin(9) * t70 + t354;
t28 = -t257 * t46 + t258 * t47;
t27 = t257 * t47 + t258 * t46;
t26 = -t257 * t44 + t258 * t45;
t25 = t257 * t45 + t258 * t44;
t24 = -pkin(4) * t110 + pkin(8) * t33;
t23 = -t257 * t36 + t258 * t37;
t22 = t257 * t37 + t258 * t36;
t21 = -pkin(8) * t78 - t32;
t20 = -pkin(4) * t134 + pkin(8) * t80 + t33;
t19 = -pkin(5) * t74 + t31;
t18 = -pkin(5) * t70 + t30;
t17 = t258 * t33 - t356;
t16 = t257 * t33 + t355;
t13 = -pkin(9) * t56 - t14;
t12 = t15 * t264 + t260 * t38;
t11 = t15 * t260 - t264 * t38;
t10 = -pkin(8) * t46 - t19 * t260 + t264 * t35;
t9 = -pkin(8) * t44 - t18 * t260 + t264 * t34;
t8 = -pkin(4) * t74 + pkin(8) * t47 + t19 * t264 + t260 * t35;
t7 = -pkin(4) * t70 + pkin(8) * t45 + t18 * t264 + t260 * t34;
t6 = -pkin(8) * t36 + t13 * t264 + t360 * t56;
t5 = pkin(8) * t37 + t13 * t260 + t309 * t56;
t4 = -t11 * t257 + t12 * t258;
t3 = t11 * t258 + t12 * t257;
t2 = -pkin(8) * t11 + (-pkin(9) * t264 + t360) * t14;
t1 = pkin(8) * t12 + (-pkin(9) * t260 + t309) * t14;
t29 = [0, 0, 0, 0, 0, qJDD(1), t305, t284, 0, 0, t197, t286, t198, t196, t368, 0, t217 * t265 + t326, -pkin(1) * t225 - t261 * t217 - t380, t302 + t325, pkin(1) * t217 + pkin(7) * t302, t197, t198, -t286, 0, -t368, t196, t265 * (pkin(2) * t227 + t270) + (t265 * t290 + t331) * qJ(3) + t326, t265 * (pkin(2) * t229 + t283) + (qJ(3) * t229 + t275) * t261 + t325, t261 * t270 + t380 + (pkin(1) + t361) * t225 + (t225 + t290) * t332, pkin(7) * (t164 * t265 + t174 * t261) + (pkin(1) - t291) * (qJ(3) * t290 + t270), t261 * (t193 * t258 + t215 * t322) + t265 * (-t193 * t257 + t215 * t321), t261 * (-t169 * t258 - t171 * t257) + t265 * (t169 * t257 - t171 * t258), t261 * (-t203 * t257 + t373) + t265 * (-t203 * t258 - t374), t261 * (t214 * t321 + t257 * t301) + t265 * (-t214 * t322 + t258 * t301), t261 * (t202 * t258 + t339) + t265 * (-t202 * t257 + t338), (t261 * (-t214 * t258 - t215 * t257) + t265 * (t214 * t257 - t215 * t258)) * qJD(2), t261 * (-qJ(4) * t157 + t345) + t265 * (-qJ(4) * t158 + t344) + pkin(7) * (t157 * t261 + t158 * t265) + t280 * t169, t261 * (-qJ(4) * t159 + t344) + t265 * (-qJ(4) * t160 - t345) + pkin(7) * (t159 * t261 + t160 * t265) + t280 * t171, t261 * (-qJ(4) * t138 - t63) + t265 * (-qJ(4) * t139 - t64) + pkin(7) * (t138 * t261 + t139 * t265) + t280 * t168, t142 * t280 + (pkin(7) - qJ(4)) * (t261 * t63 + t265 * t64), t261 * (-t117 * t257 + t118 * t258) + t265 * (-t117 * t258 - t118 * t257), t261 * (-t257 * t77 + t258 * t79) + t265 * (-t257 * t79 - t258 * t77), t261 * (-t129 * t257 + t131 * t258) + t265 * (-t129 * t258 - t131 * t257), t261 * (-t115 * t257 + t116 * t258) + t265 * (-t115 * t258 - t116 * t257), t261 * (-t130 * t257 + t132 * t258) + t265 * (-t130 * t258 - t132 * t257), t261 * (-t143 * t257 + t144 * t258) + t265 * (-t143 * t258 - t144 * t257), t261 * (-qJ(4) * t72 - t257 * t59 + t258 * t69) + t265 * (-qJ(4) * t73 - t257 * t69 - t258 * t59) + pkin(7) * (t261 * t72 + t265 * t73) + t280 * t119, t261 * (-qJ(4) * t87 - t257 * t62 + t258 * t76) + t265 * (-qJ(4) * t88 - t257 * t76 - t258 * t62) + pkin(7) * (t261 * t87 + t265 * t88) + t280 * t375, t261 * (-qJ(4) * t42 - t20 * t257 + t21 * t258) + t265 * (-qJ(4) * t43 - t20 * t258 - t21 * t257) + pkin(7) * (t261 * t42 + t265 * t43) + t280 * t134, t261 * (-pkin(8) * t355 - qJ(4) * t16 - t24 * t257) + t265 * (pkin(8) * t356 - qJ(4) * t17 - t24 * t258) + pkin(7) * (t16 * t261 + t17 * t265) + t280 * t110, t261 * (-t257 * t66 + t258 * t68) + t265 * (-t257 * t68 - t258 * t66), t261 * (-t257 * t40 + t258 * t41) + t265 * (-t257 * t41 - t258 * t40), t261 * (-t257 * t48 + t258 * t50) + t265 * (-t257 * t50 - t258 * t48), t261 * (-t257 * t65 + t258 * t67) + t265 * (-t257 * t67 - t258 * t65), t261 * (-t257 * t49 + t258 * t51) + t265 * (-t257 * t51 - t258 * t49), t261 * (-t257 * t85 + t258 * t86) + t265 * (-t257 * t86 - t258 * t85), t261 * (-qJ(4) * t25 - t257 * t7 + t258 * t9) + t265 * (-qJ(4) * t26 - t257 * t9 - t258 * t7) + pkin(7) * (t25 * t261 + t26 * t265) + t280 * t70, t261 * (-qJ(4) * t27 + t10 * t258 - t257 * t8) + t265 * (-qJ(4) * t28 - t10 * t257 - t258 * t8) + pkin(7) * (t261 * t27 + t265 * t28) + t280 * t74, t261 * (-qJ(4) * t22 - t257 * t5 + t258 * t6) + t265 * (-qJ(4) * t23 - t257 * t6 - t258 * t5) + pkin(7) * (t22 * t261 + t23 * t265) + t280 * t56, t261 * (-qJ(4) * t3 - t1 * t257 + t2 * t258) + t265 * (-qJ(4) * t4 - t1 * t258 - t2 * t257) + pkin(7) * (t261 * t3 + t265 * t4) + t280 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, t230, t317, t239, t249, qJDD(2), -t199, -t200, 0, 0, -t239, t317, -t230, qJDD(2), -t249, t239, pkin(2) * t232 + qJ(3) * t238 - t285 - t372, (-pkin(2) * t261 + t352) * qJDD(1), qJ(3) * t233 + (t236 - t266) * pkin(2) + t282, -pkin(2) * t174 + qJ(3) * t164, t337, -t213 + t212, t172, -t337, -t170, qJDD(2), -pkin(2) * t157 + qJ(3) * t158 + t257 * t271 - t258 * (t223 * t324 + t273 + t336) + t313 + (t232 * t258 - t257 * t327 - t157) * pkin(3), qJ(3) * t160 - t159 * t363 + t109, qJ(3) * t139 - t138 * t363, qJ(3) * t64 - t363 * t63, -t156, -t155, -t124, t156, t120, t252, -pkin(4) * t113 + qJ(3) * t73 - t363 * t72 + t53, -pkin(4) * t127 + qJ(3) * t88 - t363 * t87 + t54, -pkin(4) * t78 + qJ(3) * t43 - t363 * t42, -pkin(4) * t32 + qJ(3) * t17 - t16 * t363, -t93, -t55, -t81, t91, -t82, -t106, -pkin(4) * t44 + qJ(3) * t26 - t25 * t363 - t281, -pkin(4) * t46 + qJ(3) * t28 - t27 * t363 - t279, -pkin(4) * t36 + qJ(3) * t23 - t22 * t363 - t277, -pkin(4) * t11 + qJ(3) * t4 - t3 * t363 - t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, t317, -t236, t174, 0, 0, 0, 0, 0, 0, t157, t159, t138, t63, 0, 0, 0, 0, 0, 0, t72, t87, t42, t16, 0, 0, 0, 0, 0, 0, t25, t27, t22, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, t171, t168, t142, 0, 0, 0, 0, 0, 0, t119, t375, t134, t110, 0, 0, 0, 0, 0, 0, t70, t74, t56, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t156, t155, t124, -t156, -t120, -t252, -t53, -t54, 0, 0, t93, t55, t81, -t91, t82, t106, t281, t279, t277, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, t99, -t141, -t95, t135, -t30, -t31, 0, 0;];
tauJ_reg  = t29;
