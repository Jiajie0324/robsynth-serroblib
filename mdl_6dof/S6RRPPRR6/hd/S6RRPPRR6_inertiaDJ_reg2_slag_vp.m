% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR6_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:15:16
% EndTime: 2019-03-09 09:15:23
% DurationCPUTime: 2.49s
% Computational Cost: add. (4542->217), mult. (9272->403), div. (0->0), fcn. (9143->8), ass. (0->139)
t86 = sin(qJ(6));
t84 = t86 ^ 2;
t89 = cos(qJ(6));
t85 = t89 ^ 2;
t153 = t84 - t85;
t70 = t153 * qJD(6);
t173 = 0.2e1 * t70;
t148 = sin(pkin(10));
t149 = cos(pkin(10));
t154 = pkin(7) - qJ(4);
t88 = sin(qJ(2));
t72 = t154 * t88;
t90 = cos(qJ(2));
t73 = t154 * t90;
t42 = -t148 * t73 + t149 * t72;
t128 = t90 * t148;
t129 = t88 * t149;
t61 = t129 - t128;
t109 = -t61 * pkin(8) + t42;
t164 = cos(qJ(5));
t100 = t164 * t109;
t87 = sin(qJ(5));
t147 = qJD(5) * t87;
t80 = qJD(2) * t128;
t110 = -qJD(2) * t129 + t80;
t143 = t88 * qJD(2);
t107 = -t90 * qJD(4) - t154 * t143;
t108 = qJD(2) * t73 - t88 * qJD(4);
t27 = t149 * t107 + t148 * t108;
t22 = -t110 * pkin(8) + t27;
t106 = t88 * t148 + t90 * t149;
t43 = t148 * t72 + t149 * t73;
t28 = -t106 * pkin(8) + t43;
t171 = t106 * qJD(2);
t26 = t148 * t107 - t149 * t108;
t92 = pkin(8) * t171 + t26;
t91 = -qJD(5) * t100 + t28 * t147 - t164 * t22 + t87 * t92;
t98 = t164 * t106;
t35 = t87 * t61 + t98;
t36 = -t87 * t106 + t164 * t61;
t167 = pkin(2) + pkin(3);
t113 = t149 * pkin(4) + t167;
t41 = pkin(1) + (t148 * pkin(4) + qJ(3)) * t88 + t113 * t90;
t95 = t35 * pkin(5) - t36 * pkin(9) + t41;
t172 = -qJD(6) * t95 + t91;
t118 = t164 * t149;
t60 = t87 * t148 - t118;
t68 = t149 * qJ(3) - t148 * t167;
t67 = -t148 * qJ(3) - t149 * t167;
t99 = -pkin(4) + t67;
t96 = t164 * t99;
t39 = -t87 * t68 + t96;
t37 = pkin(5) - t39;
t40 = t164 * t68 + t87 * t99;
t38 = -pkin(9) + t40;
t16 = t87 * t109 + t164 * t28;
t5 = t16 * qJD(5) + t164 * t92 + t87 * t22;
t170 = -t5 + (t35 * t38 - t36 * t37) * qJD(6);
t7 = -t86 * t16 + t89 * t95;
t8 = t89 * t16 + t86 * t95;
t120 = t7 * t86 - t8 * t89;
t145 = qJD(6) * t86;
t19 = qJD(5) * t98 + t87 * t110 + t61 * t147 - t164 * t171;
t20 = t36 * qJD(5) + t164 * t110 + t171 * t87;
t142 = t88 * qJD(3);
t150 = t90 * qJ(3);
t29 = t80 * pkin(4) + t142 + (-t113 * t88 + t150) * qJD(2);
t93 = t20 * pkin(5) + t19 * pkin(9) + t29;
t2 = t16 * t145 + t172 * t89 - t86 * t93;
t144 = qJD(6) * t89;
t3 = -t16 * t144 + t172 * t86 + t89 * t93;
t169 = qJD(6) * t120 + t2 * t86 - t3 * t89;
t168 = 0.2e1 * qJD(3);
t15 = t87 * t28 - t100;
t166 = t15 * t5;
t165 = t5 * t89;
t62 = t164 * t148 + t87 * t149;
t24 = t62 * qJD(3) + t40 * qJD(5);
t163 = t15 * t24;
t162 = t24 * t60;
t161 = t24 * t86;
t160 = t24 * t89;
t159 = t36 * t19;
t158 = t36 * t86;
t56 = t62 * qJD(5);
t157 = t60 * t56;
t156 = t86 * t89;
t155 = t89 * t20;
t152 = t84 + t85;
t151 = t88 * qJ(3);
t83 = t90 * qJD(2);
t141 = 0.2e1 * t35 * t20;
t140 = -0.2e1 * pkin(1) * qJD(2);
t139 = -0.2e1 * pkin(5) * qJD(6);
t138 = pkin(7) * t143;
t137 = pkin(7) * t83;
t136 = t86 * t144;
t135 = t88 * t83;
t126 = t148 * qJD(3);
t23 = -qJD(5) * t96 - qJD(3) * t118 + (qJD(5) * t68 + t126) * t87;
t13 = t152 * t23;
t55 = t60 * qJD(5);
t30 = t152 * t55;
t133 = t152 * t62;
t132 = 0.4e1 * t36 * t156;
t131 = qJD(6) * (pkin(5) + t37);
t127 = t149 * qJD(3);
t34 = t36 ^ 2;
t125 = t34 * t136;
t124 = pkin(5) * t19 - pkin(9) * t20;
t123 = pkin(5) * t36 + pkin(9) * t35;
t121 = t7 * t89 + t8 * t86;
t119 = t15 * t56 + t5 * t60;
t117 = -t90 * pkin(2) - t151;
t116 = t23 * t35 + t24 * t36;
t114 = t35 * t62 - t36 * t60;
t112 = t36 * t144 - t19 * t86;
t111 = -t36 * t145 - t19 * t89;
t12 = t35 * t144 + t20 * t86;
t104 = -t19 * t60 - t20 * t62 + t35 * t55 + t36 * t56;
t101 = t117 * qJD(2) + t90 * qJD(3);
t1 = -t121 * qJD(6) - t2 * t89 - t3 * t86;
t97 = -qJD(6) * t15 - t19 * t37 - t20 * t38 + t116;
t77 = -0.2e1 * t135;
t76 = 0.2e1 * t135;
t75 = -0.2e1 * t136;
t74 = 0.2e1 * t136;
t71 = (-t88 ^ 2 + t90 ^ 2) * qJD(2);
t69 = -pkin(1) + t117;
t66 = -0.2e1 * t70;
t59 = t167 * t90 + pkin(1) + t151;
t53 = -t142 + (pkin(2) * t88 - t150) * qJD(2);
t44 = t142 + (-t167 * t88 + t150) * qJD(2);
t33 = -t60 * t145 + t56 * t89;
t32 = t60 * t144 + t56 * t86;
t11 = t35 * t145 - t155;
t10 = t19 * t156 + t36 * t70;
t6 = qJD(6) * t132 - t153 * t19;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0.2e1 * t71, 0, t77, 0, 0, t88 * t140, t90 * t140, 0, 0, t76, 0, -0.2e1 * t71, 0, 0, t77, 0.2e1 * t69 * t143 - 0.2e1 * t53 * t90, 0, -0.2e1 * t53 * t88 - 0.2e1 * t69 * t83, 0.2e1 * t69 * t53, 0.2e1 * t61 * t171, -0.2e1 * t61 * t80 + 0.2e1 * (-t106 ^ 2 + t61 * t129) * qJD(2), 0, 0.2e1 * t106 * t110, 0, 0, 0.2e1 * t44 * t106 + 0.2e1 * t59 * t110, 0.2e1 * t171 * t59 + 0.2e1 * t44 * t61, -0.2e1 * t106 * t27 - 0.2e1 * t110 * t43 - 0.2e1 * t171 * t42 + 0.2e1 * t26 * t61, -0.2e1 * t26 * t42 + 0.2e1 * t27 * t43 + 0.2e1 * t44 * t59, -0.2e1 * t159, 0.2e1 * t19 * t35 - 0.2e1 * t20 * t36, 0, t141, 0, 0, 0.2e1 * t20 * t41 + 0.2e1 * t29 * t35, -0.2e1 * t19 * t41 + 0.2e1 * t29 * t36, -0.2e1 * t15 * t19 - 0.2e1 * t16 * t20 + 0.2e1 * t35 * t91 + 0.2e1 * t5 * t36, -0.2e1 * t16 * t91 + 0.2e1 * t41 * t29 + 0.2e1 * t166, -0.2e1 * t85 * t159 - 0.2e1 * t125, t19 * t132 + t34 * t173, 0.2e1 * t111 * t35 + 0.2e1 * t36 * t155, -0.2e1 * t84 * t159 + 0.2e1 * t125, -0.2e1 * t112 * t35 - 0.2e1 * t20 * t158, t141, 0.2e1 * t112 * t15 + 0.2e1 * t5 * t158 + 0.2e1 * t7 * t20 + 0.2e1 * t3 * t35, 0.2e1 * t111 * t15 + 0.2e1 * t36 * t165 + 0.2e1 * t2 * t35 - 0.2e1 * t8 * t20, 0.2e1 * t121 * t19 + 0.2e1 * t169 * t36, -0.2e1 * t2 * t8 + 0.2e1 * t3 * t7 + 0.2e1 * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, -t143, 0, -t137, t138, 0, 0, 0, t83, 0, 0, t143, 0, -t137, t101, -t138, t101 * pkin(7), 0, 0, -t171, 0, t110, 0, t26, t27, -t106 * t127 - t110 * t68 + t126 * t61 - t171 * t67, -t26 * t67 + t27 * t68 + (-t148 * t42 + t149 * t43) * qJD(3), 0, 0, t19, 0, t20, 0, t5, -t91, t19 * t39 - t20 * t40 + t116, -t16 * t23 - t5 * t39 - t40 * t91 + t163, t10, t6, -t12, -t10, t11, 0, -t170 * t89 + t97 * t86, t170 * t86 + t97 * t89, -t1, t1 * t38 + t120 * t23 + t5 * t37 + t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, qJ(3) * t168, 0, 0, 0, 0, 0, 0, 0.2e1 * t126, 0.2e1 * t127, 0 (-t148 * t67 + t149 * t68) * t168, 0, 0, 0, 0, 0, 0, 0.2e1 * t24, -0.2e1 * t23, 0, -0.2e1 * t23 * t40 - 0.2e1 * t24 * t39, t74, t66, 0, t75, 0, 0, -0.2e1 * t145 * t37 + 0.2e1 * t160, -0.2e1 * t144 * t37 - 0.2e1 * t161, 0.2e1 * t13, -0.2e1 * t13 * t38 + 0.2e1 * t37 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t137, 0, 0, 0, 0, 0, 0, 0, 0, -t149 ^ 2 * t83 - t148 * t80, t148 * t27 - t149 * t26, 0, 0, 0, 0, 0, 0, 0, 0, t104, -t16 * t55 - t62 * t91 + t119, 0, 0, 0, 0, 0, 0, t104 * t86 - t114 * t144, t104 * t89 + t114 * t145, 0, t1 * t62 + t120 * t55 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t55, 0, -t23 * t62 - t39 * t56 - t40 * t55 + t162, 0, 0, 0, 0, 0, 0, t33, -t32, t30, -t133 * t23 - t30 * t38 + t37 * t56 + t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t55 * t62 + 0.2e1 * t157, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t133 * t55 + 0.2e1 * t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, t171, 0, t44, 0, 0, 0, 0, 0, 0, t20, -t19, 0, t29, 0, 0, 0, 0, 0, 0, -t11, -t12, t152 * t19, -t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t20, 0, -t5, t91, 0, 0, -t10, -t6, t12, t10, -t11, 0, -t165 + t124 * t86 + (-t123 * t89 + t15 * t86) * qJD(6), t5 * t86 + t124 * t89 + (t123 * t86 + t15 * t89) * qJD(6), t1, -t5 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, t23, 0, 0, t75, t173, 0, t74, 0, 0, t131 * t86 - t160, t131 * t89 + t161, -t13, -t24 * pkin(5) - pkin(9) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, t55, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t32, -t30, -t56 * pkin(5) - pkin(9) * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t66, 0, t75, 0, 0, t86 * t139, t89 * t139, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, 0, -t112, t20, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, 0, t145, 0, -t144 * t38 + t23 * t86, t145 * t38 + t23 * t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144 * t62 + t55 * t86, t145 * t62 + t55 * t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t144, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0, -t145, 0, -pkin(9) * t144, pkin(9) * t145, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
