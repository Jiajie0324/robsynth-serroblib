% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 10:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:55:08
% EndTime: 2019-05-06 10:55:37
% DurationCPUTime: 24.87s
% Computational Cost: add. (115381->773), mult. (265975->1125), div. (0->0), fcn. (181423->10), ass. (0->530)
t881 = qJD(2) ^ 2;
t875 = sin(qJ(2));
t869 = t875 ^ 2;
t882 = qJD(1) ^ 2;
t941 = t869 * t882;
t844 = t881 + t941;
t879 = cos(qJ(2));
t848 = t879 * t882 * t875;
t838 = qJDD(2) - t848;
t935 = t879 * t838;
t787 = -t844 * t875 + t935;
t923 = qJD(1) * qJD(2);
t906 = t879 * t923;
t921 = qJDD(1) * t875;
t826 = 0.2e1 * t906 + t921;
t876 = sin(qJ(1));
t880 = cos(qJ(1));
t739 = t787 * t876 + t826 * t880;
t1000 = pkin(6) * t739;
t742 = t787 * t880 - t826 * t876;
t999 = pkin(6) * t742;
t998 = pkin(7) * t787;
t979 = 2 * qJD(3);
t997 = 2 * qJD(4);
t946 = t838 * t875;
t781 = t844 * t879 + t946;
t996 = pkin(1) * t781;
t995 = pkin(7) * t781;
t873 = sin(qJ(6));
t871 = sin(pkin(10));
t872 = cos(pkin(10));
t928 = qJD(1) * t879;
t929 = qJD(1) * t875;
t811 = -t871 * t929 - t872 * t928;
t812 = -t871 * t928 + t872 * t929;
t874 = sin(qJ(5));
t878 = cos(qJ(5));
t752 = t811 * t874 + t812 * t878;
t866 = qJD(2) - qJD(5);
t877 = cos(qJ(6));
t718 = t752 * t873 + t877 * t866;
t720 = t752 * t877 - t866 * t873;
t672 = t720 * t718;
t827 = t906 + t921;
t860 = t879 * qJDD(1);
t907 = t875 * t923;
t828 = t860 - t907;
t767 = t827 * t872 - t828 * t871;
t901 = t827 * t871 + t872 * t828;
t902 = t874 * t767 + t878 * t901;
t663 = -qJD(5) * t752 - t902;
t888 = qJDD(6) - t663;
t984 = -t672 + t888;
t994 = t873 * t984;
t993 = t877 * t984;
t829 = t860 - 0.2e1 * t907;
t950 = t829 * t879;
t954 = t826 * t875;
t769 = -t950 + t954;
t870 = t879 ^ 2;
t835 = (t869 - t870) * t882;
t992 = t769 * t876 + t835 * t880;
t991 = t769 * t880 - t835 * t876;
t940 = t870 * t882;
t846 = -t881 + t940;
t785 = -t846 * t879 + t946;
t990 = t785 * t876 + t880 * t860;
t989 = t785 * t880 - t876 * t860;
t957 = t811 * t812;
t900 = -qJDD(2) + t957;
t988 = t871 * t900;
t987 = t872 * t900;
t865 = -qJDD(2) + qJDD(5);
t750 = -t878 * t811 + t812 * t874;
t960 = t750 * t752;
t892 = t865 - t960;
t986 = t874 * t892;
t985 = t878 * t892;
t664 = -qJD(5) * t750 + t767 * t878 - t874 * t901;
t737 = t750 * t866;
t640 = t664 + t737;
t803 = qJD(2) * t811;
t725 = t767 + t803;
t804 = qJD(2) * t812;
t983 = -t804 - t901;
t747 = qJD(6) + t750;
t681 = t747 * t718;
t911 = t718 * qJD(6) - t877 * t664 - t873 * t865;
t600 = t911 + t681;
t977 = pkin(2) * t879;
t896 = -qJ(3) * t875 - t977;
t824 = t896 * qJD(1);
t840 = g(1) * t880 + g(2) * t876;
t815 = -pkin(1) * t882 + qJDD(1) * pkin(7) - t840;
t905 = t875 * g(3) - t879 * t815;
t890 = qJDD(2) * qJ(3) + qJD(2) * t979 + t824 * t928 - t905;
t717 = -pkin(2) * t881 + t890;
t836 = -qJD(2) * pkin(3) - qJ(4) * t929;
t689 = -pkin(3) * t940 - qJ(4) * t828 + qJD(2) * t836 + t717;
t789 = t879 * g(3) + t875 * t815;
t981 = t824 * t929 + qJDD(3);
t889 = -qJDD(2) * pkin(2) + t789 + t981;
t730 = t881 * qJ(3) - t889;
t837 = qJDD(2) + t848;
t691 = (-t827 + t906) * qJ(4) - t837 * pkin(3) - t730;
t622 = t872 * t689 + t871 * t691 + t811 * t997;
t982 = t846 * t875 + t935;
t903 = t873 * t664 - t877 * t865;
t595 = (qJD(6) - t747) * t720 + t903;
t715 = t718 ^ 2;
t716 = t720 ^ 2;
t746 = t747 ^ 2;
t748 = t750 ^ 2;
t749 = t752 ^ 2;
t809 = t811 ^ 2;
t810 = t812 ^ 2;
t980 = t866 ^ 2;
t978 = pkin(2) + pkin(3);
t976 = pkin(5) * t874;
t847 = -t881 - t940;
t947 = t837 * t875;
t784 = t847 * t879 - t947;
t738 = t784 * t876 + t829 * t880;
t975 = pkin(6) * t738;
t930 = t869 + t870;
t831 = t930 * qJDD(1);
t834 = t930 * t882;
t771 = t831 * t876 + t834 * t880;
t974 = pkin(6) * t771;
t819 = t879 * t837;
t779 = t847 * t875 + t819;
t973 = pkin(7) * t779;
t972 = t828 * pkin(2);
t971 = qJ(3) * t879;
t795 = -qJD(2) * pkin(4) - pkin(8) * t812;
t602 = -pkin(4) * t809 - pkin(8) * t901 + qJD(2) * t795 + t622;
t621 = t871 * t689 - t872 * t691 + t812 * t997;
t884 = t900 * pkin(4) - pkin(8) * t725 - t621;
t536 = t874 * t602 - t878 * t884;
t537 = t878 * t602 + t874 * t884;
t484 = -t536 * t878 + t537 * t874;
t970 = t484 * t871;
t969 = t484 * t872;
t612 = t672 + t888;
t968 = t612 * t873;
t967 = t612 * t877;
t839 = t876 * g(1) - t880 * g(2);
t814 = qJDD(1) * pkin(1) + t882 * pkin(7) + t839;
t886 = -pkin(2) * t907 + t814;
t673 = t972 + t827 * qJ(3) + qJDD(4) + t828 * pkin(3) - qJ(4) * t940 + (qJD(2) * t971 + (t979 + t836) * t875) * qJD(1) + t886;
t623 = pkin(4) * t901 - t809 * pkin(8) + t812 * t795 + t673;
t966 = t623 * t874;
t965 = t623 * t878;
t685 = -t865 - t960;
t964 = t685 * t874;
t963 = t685 * t878;
t962 = t747 * t873;
t961 = t747 * t877;
t760 = qJDD(2) + t957;
t959 = t760 * t871;
t958 = t760 * t872;
t956 = t814 * t875;
t955 = t814 * t879;
t951 = t829 * t875;
t943 = t866 * t874;
t942 = t866 * t878;
t939 = t871 * t673;
t938 = t872 * t673;
t688 = pkin(5) * t750 - pkin(9) * t752;
t506 = -t865 * pkin(5) - pkin(9) * t980 + t688 * t752 + t536;
t937 = t873 * t506;
t936 = t877 * t506;
t507 = -pkin(5) * t980 + pkin(9) * t865 - t688 * t750 + t537;
t547 = t623 - t640 * pkin(9) + (-t752 * t866 - t663) * pkin(5);
t479 = t877 * t507 + t873 * t547;
t933 = pkin(1) * t829 + pkin(7) * t784;
t932 = pkin(1) * t834 + pkin(7) * t831;
t931 = t834 - t881;
t927 = qJD(2) * t871;
t926 = qJD(2) * t872;
t920 = qJDD(1) * t876;
t919 = qJDD(1) * t880;
t918 = qJDD(2) * t880;
t917 = t874 * t672;
t916 = t878 * t672;
t915 = t876 * t960;
t914 = t880 * t960;
t913 = t876 * t957;
t912 = t880 * t957;
t910 = -pkin(5) * t878 - pkin(4);
t478 = t507 * t873 - t877 * t547;
t443 = t873 * t478 + t877 * t479;
t485 = t536 * t874 + t878 * t537;
t713 = t789 * t875 - t879 * t905;
t776 = -t839 * t876 - t880 * t840;
t899 = t876 * t848;
t898 = t880 * t848;
t727 = -pkin(1) * t779 + t789;
t833 = -t876 * t882 + t919;
t897 = -pkin(6) * t833 - g(3) * t876;
t895 = pkin(2) * t875 - t971;
t894 = t827 + t906;
t442 = -t478 * t877 + t479 * t873;
t551 = -t621 * t872 + t622 * t871;
t552 = t871 * t621 + t872 * t622;
t712 = t789 * t879 + t875 * t905;
t893 = t826 * t879 + t951;
t775 = t839 * t880 - t840 * t876;
t887 = (-qJD(5) - t866) * t752 - t902;
t885 = t929 * t979 + t886;
t883 = qJ(3) * t894 + t885;
t859 = t876 * qJDD(2);
t845 = t881 - t941;
t832 = t880 * t882 + t920;
t822 = t895 * qJDD(1);
t818 = t930 * t923;
t808 = -pkin(6) * t832 + g(3) * t880;
t798 = -t810 - t881;
t797 = -t810 + t881;
t796 = t809 - t881;
t794 = t818 * t880 + t859;
t793 = t827 * t879 - t869 * t923;
t792 = t818 * t876 - t918;
t791 = -t828 * t875 - t870 * t923;
t786 = -t845 * t875 + t819;
t780 = t845 * t879 + t947;
t778 = t894 * t875;
t777 = (t828 - t907) * t879;
t772 = t831 * t880 - t834 * t876;
t770 = pkin(6) * t772;
t764 = t810 - t809;
t759 = -t881 - t809;
t758 = t793 * t880 - t899;
t757 = t791 * t880 + t899;
t756 = t793 * t876 + t898;
t755 = t791 * t876 - t898;
t754 = t786 * t880 + t875 * t920;
t753 = t786 * t876 - t875 * t919;
t745 = (-t811 * t872 - t812 * t871) * qJD(2);
t744 = (t811 * t871 - t812 * t872) * qJD(2);
t741 = t784 * t880 - t829 * t876;
t735 = pkin(6) * t741;
t734 = -t749 + t980;
t733 = t748 - t980;
t732 = -t955 + t995;
t731 = -t956 - t973;
t729 = -t749 - t980;
t728 = -t905 + t996;
t726 = t767 - t803;
t722 = -t804 + t901;
t721 = -t809 - t810;
t710 = t767 * t872 + t812 * t927;
t709 = -t767 * t871 + t812 * t926;
t708 = t811 * t926 + t871 * t901;
t707 = -t811 * t927 + t872 * t901;
t706 = qJ(3) * t931 + t889;
t705 = pkin(2) * t931 + t890;
t704 = t883 + t972;
t703 = -t797 * t871 + t987;
t702 = -t798 * t871 + t958;
t701 = t796 * t872 + t959;
t700 = -t797 * t872 - t988;
t699 = t798 * t872 + t959;
t698 = -t796 * t871 + t958;
t697 = (t828 + t829) * pkin(2) + t883;
t696 = t972 + (t826 + t894) * qJ(3) + t885;
t695 = t713 * t880 - t814 * t876;
t694 = t713 * t876 + t814 * t880;
t693 = t759 * t872 - t988;
t692 = t759 * t871 + t987;
t690 = t749 - t748;
t683 = -t980 - t748;
t680 = -t716 + t746;
t679 = t715 - t746;
t678 = -t744 * t875 + t745 * t879;
t677 = (t750 * t878 - t752 * t874) * t866;
t676 = (t750 * t874 + t752 * t878) * t866;
t675 = (-t847 - t881) * qJ(3) + (-qJDD(2) - t837) * pkin(2) + t727 + t981;
t674 = -t996 - qJ(3) * t838 + (-t844 + t881) * pkin(2) - t890;
t671 = -t716 + t715;
t670 = t717 * t879 - t730 * t875;
t669 = t717 * t875 + t730 * t879;
t668 = t725 * t871 + t872 * t983;
t667 = -t722 * t872 - t726 * t871;
t666 = -t725 * t872 + t871 * t983;
t665 = t722 * t871 - t726 * t872;
t660 = -t748 - t749;
t659 = -t709 * t875 + t710 * t879;
t658 = -t707 * t875 + t708 * t879;
t657 = -pkin(2) * t954 + t696 * t879 - t995;
t656 = qJ(3) * t950 - t697 * t875 - t973;
t655 = -t705 * t875 + t706 * t879;
t654 = -t700 * t875 + t703 * t879;
t653 = t699 * t875 + t702 * t879;
t652 = -t698 * t875 + t701 * t879;
t651 = -t699 * t879 + t702 * t875;
t650 = -t716 - t746;
t649 = t733 * t878 + t964;
t648 = -t734 * t874 + t985;
t647 = t733 * t874 - t963;
t646 = t734 * t878 + t986;
t645 = -t729 * t874 + t963;
t644 = t729 * t878 + t964;
t643 = -t746 - t715;
t642 = t715 + t716;
t641 = t664 - t737;
t636 = (qJD(5) - t866) * t752 + t902;
t635 = t664 * t878 + t752 * t943;
t634 = t664 * t874 - t752 * t942;
t633 = -t663 * t874 - t750 * t942;
t632 = t663 * t878 - t750 * t943;
t631 = t692 * t875 + t693 * t879;
t630 = -t692 * t879 + t693 * t875;
t629 = t683 * t878 - t986;
t628 = t683 * t874 + t985;
t626 = -qJD(6) * t720 - t903;
t625 = t670 * t880 - t704 * t876;
t624 = t670 * t876 + t704 * t880;
t620 = t653 * t880 - t726 * t876;
t619 = t653 * t876 + t726 * t880;
t618 = (-t718 * t877 + t720 * t873) * t747;
t617 = (-t718 * t873 - t720 * t877) * t747;
t616 = -t676 * t871 + t677 * t872;
t615 = -t676 * t872 - t677 * t871;
t614 = -pkin(1) * t669 - pkin(2) * t730 - qJ(3) * t717;
t610 = qJ(3) * t726 - qJ(4) * t699 + t938;
t609 = t631 * t880 - t722 * t876;
t608 = t666 * t875 + t668 * t879;
t607 = -t665 * t875 + t667 * t879;
t606 = t631 * t876 + t722 * t880;
t605 = -t666 * t879 + t668 * t875;
t604 = qJ(3) * t722 - qJ(4) * t692 + t939;
t603 = -pkin(7) * t669 - t704 * t895;
t599 = -t681 + t911;
t596 = (-qJD(6) - t747) * t720 - t903;
t594 = -qJ(4) * t702 + t726 * t978 - t939;
t593 = -t720 * t962 - t877 * t911;
t592 = t720 * t961 - t873 * t911;
t591 = -t626 * t873 + t718 * t961;
t590 = t626 * t877 + t718 * t962;
t589 = t608 * t880 - t721 * t876;
t588 = t608 * t876 + t721 * t880;
t587 = -t647 * t871 + t649 * t872;
t586 = -t646 * t871 + t648 * t872;
t585 = -t647 * t872 - t649 * t871;
t584 = -t646 * t872 - t648 * t871;
t581 = -qJ(4) * t693 + t722 * t978 + t938;
t580 = -t644 * t871 + t645 * t872;
t579 = t644 * t872 + t645 * t871;
t578 = t618 * t878 + t874 * t888;
t577 = t618 * t874 - t878 * t888;
t576 = t679 * t877 - t968;
t575 = -t680 * t873 + t993;
t574 = t679 * t873 + t967;
t573 = t680 * t877 + t994;
t572 = t641 * t874 + t878 * t887;
t571 = -t636 * t878 - t640 * t874;
t570 = -t641 * t878 + t874 * t887;
t569 = -t636 * t874 + t640 * t878;
t568 = -pkin(8) * t644 + t965;
t567 = -t634 * t871 + t635 * t872;
t566 = -t632 * t871 + t633 * t872;
t565 = -t634 * t872 - t635 * t871;
t564 = -t632 * t872 - t633 * t871;
t563 = -t650 * t873 - t967;
t562 = t650 * t877 - t968;
t561 = -t628 * t871 + t629 * t872;
t560 = t628 * t872 + t629 * t871;
t559 = t643 * t877 - t994;
t558 = t643 * t873 + t993;
t557 = -pkin(8) * t628 + t966;
t556 = t593 * t878 + t917;
t555 = t591 * t878 - t917;
t554 = t593 * t874 - t916;
t553 = t591 * t874 + t916;
t550 = -t615 * t875 + t616 * t879;
t549 = qJ(3) * t673 - qJ(4) * t551;
t548 = -pkin(4) * t640 + pkin(8) * t645 + t966;
t544 = -pkin(1) * t651 - qJ(3) * t702 + t699 * t978 - t622;
t543 = -pkin(4) * t636 + pkin(8) * t629 - t965;
t542 = -t595 * t877 - t599 * t873;
t541 = t596 * t877 + t600 * t873;
t540 = -t595 * t873 + t599 * t877;
t539 = t596 * t873 - t600 * t877;
t538 = qJ(3) * t721 - qJ(4) * t666 - t551;
t534 = -pkin(1) * t605 - qJ(3) * t668 + t666 * t978;
t533 = -t585 * t875 + t587 * t879;
t532 = -t584 * t875 + t586 * t879;
t531 = t579 * t875 + t580 * t879;
t530 = -t579 * t879 + t580 * t875;
t529 = -qJ(4) * t552 + t673 * t978;
t528 = t576 * t878 - t595 * t874;
t527 = t575 * t878 - t599 * t874;
t526 = t576 * t874 + t595 * t878;
t525 = t575 * t874 + t599 * t878;
t524 = -pkin(1) * t630 - qJ(3) * t693 + t692 * t978 - t621;
t523 = -qJ(4) * t668 + t721 * t978 - t552;
t522 = -t577 * t871 + t578 * t872;
t521 = -t577 * t872 - t578 * t871;
t520 = -pkin(7) * t651 - t594 * t875 + t610 * t879;
t519 = t563 * t878 - t600 * t874;
t518 = t563 * t874 + t600 * t878;
t517 = t559 * t878 - t596 * t874;
t516 = t559 * t874 + t596 * t878;
t515 = -t570 * t871 + t572 * t872;
t514 = -t569 * t871 + t571 * t872;
t513 = t570 * t872 + t572 * t871;
t512 = -t569 * t872 - t571 * t871;
t511 = t541 * t878 - t671 * t874;
t510 = t541 * t874 + t671 * t878;
t509 = -t565 * t875 + t567 * t879;
t508 = -t564 * t875 + t566 * t879;
t504 = -pkin(7) * t630 - t581 * t875 + t604 * t879;
t503 = t542 * t878 - t642 * t874;
t502 = t542 * t874 + t642 * t878;
t501 = t560 * t875 + t561 * t879;
t500 = -t560 * t879 + t561 * t875;
t499 = t531 * t880 - t640 * t876;
t498 = t531 * t876 + t640 * t880;
t497 = -t554 * t871 + t556 * t872;
t496 = -t553 * t871 + t555 * t872;
t495 = -t554 * t872 - t556 * t871;
t494 = -t553 * t872 - t555 * t871;
t493 = t551 * t875 + t552 * t879;
t492 = -t551 * t879 + t552 * t875;
t491 = t493 * t880 - t673 * t876;
t490 = t493 * t876 + t673 * t880;
t489 = t501 * t880 - t636 * t876;
t488 = t501 * t876 + t636 * t880;
t487 = -pkin(9) * t562 + t936;
t486 = -pkin(9) * t558 + t937;
t483 = -t526 * t871 + t528 * t872;
t482 = -t525 * t871 + t527 * t872;
t481 = -t526 * t872 - t528 * t871;
t480 = -t525 * t872 - t527 * t871;
t476 = -t521 * t875 + t522 * t879;
t475 = -t518 * t871 + t519 * t872;
t474 = t518 * t872 + t519 * t871;
t473 = qJ(3) * t640 - qJ(4) * t579 - t548 * t871 + t568 * t872;
t472 = -t516 * t871 + t517 * t872;
t471 = t516 * t872 + t517 * t871;
t470 = -pkin(4) * t623 + pkin(8) * t485;
t469 = t513 * t875 + t515 * t879;
t468 = -t512 * t875 + t514 * t879;
t467 = -t513 * t879 + t515 * t875;
t466 = -t510 * t871 + t511 * t872;
t465 = -t510 * t872 - t511 * t871;
t464 = -pkin(7) * t605 - t523 * t875 + t538 * t879;
t463 = -t502 * t871 + t503 * t872;
t462 = t502 * t872 + t503 * t871;
t461 = qJ(3) * t636 - qJ(4) * t560 - t543 * t871 + t557 * t872;
t460 = -pkin(8) * t570 - t484;
t459 = t469 * t880 - t660 * t876;
t458 = t469 * t876 + t660 * t880;
t457 = -qJ(4) * t580 - t872 * t548 - t871 * t568 + t640 * t978;
t456 = -pkin(4) * t660 + pkin(8) * t572 + t485;
t455 = -pkin(5) * t562 + t479;
t454 = -t495 * t875 + t497 * t879;
t453 = -t494 * t875 + t496 * t879;
t452 = -pkin(5) * t558 + t478;
t451 = -qJ(4) * t561 - t872 * t543 - t871 * t557 + t636 * t978;
t450 = -pkin(7) * t492 - t529 * t875 + t549 * t879;
t449 = -pkin(1) * t492 - qJ(3) * t552 + t551 * t978;
t448 = -pkin(1) * t530 + pkin(4) * t644 - qJ(3) * t580 + t579 * t978 - t537;
t447 = t485 * t872 - t970;
t446 = t485 * t871 + t969;
t445 = -t481 * t875 + t483 * t879;
t444 = -t480 * t875 + t482 * t879;
t441 = -pkin(1) * t500 + pkin(4) * t628 - qJ(3) * t561 + t560 * t978 - t536;
t440 = t474 * t875 + t475 * t879;
t439 = -t474 * t879 + t475 * t875;
t438 = t471 * t875 + t472 * t879;
t437 = -t471 * t879 + t472 * t875;
t436 = -t465 * t875 + t466 * t879;
t435 = t462 * t875 + t463 * t879;
t434 = -t462 * t879 + t463 * t875;
t433 = t440 * t880 - t562 * t876;
t432 = t440 * t876 + t562 * t880;
t431 = -pkin(9) * t540 - t442;
t430 = t438 * t880 - t558 * t876;
t429 = t438 * t876 + t558 * t880;
t428 = t443 * t878 + t506 * t874;
t427 = t443 * t874 - t506 * t878;
t426 = -pkin(8) * t518 - t455 * t874 + t487 * t878;
t425 = -pkin(8) * t516 - t452 * t874 + t486 * t878;
t424 = -pkin(7) * t530 - t457 * t875 + t473 * t879;
t423 = t435 * t880 - t540 * t876;
t422 = t435 * t876 + t540 * t880;
t421 = -pkin(1) * t467 + pkin(4) * t570 - qJ(3) * t515 + t513 * t978;
t420 = -pkin(4) * t562 + pkin(8) * t519 + t455 * t878 + t487 * t874;
t419 = -pkin(4) * t558 + pkin(8) * t517 + t452 * t878 + t486 * t874;
t418 = -pkin(7) * t500 - t451 * t875 + t461 * t879;
t417 = qJ(3) * t660 - qJ(4) * t513 - t456 * t871 + t460 * t872;
t416 = -qJ(4) * t515 - t872 * t456 - t871 * t460 + t660 * t978;
t415 = -pkin(8) * t502 + t431 * t878 + t540 * t976;
t414 = t446 * t875 + t447 * t879;
t413 = -t446 * t879 + t447 * t875;
t412 = t414 * t880 - t623 * t876;
t411 = t414 * t876 + t623 * t880;
t410 = pkin(8) * t503 + t874 * t431 + t540 * t910;
t409 = -pkin(8) * t969 + qJ(3) * t623 - qJ(4) * t446 - t470 * t871;
t408 = pkin(8) * t970 - qJ(4) * t447 - t872 * t470 + t623 * t978;
t407 = -t427 * t871 + t428 * t872;
t406 = t427 * t872 + t428 * t871;
t405 = -pkin(8) * t427 + (-pkin(9) * t878 + t976) * t442;
t404 = -pkin(1) * t439 + pkin(4) * t518 + pkin(5) * t600 + pkin(9) * t563 - qJ(3) * t475 + t474 * t978 + t937;
t403 = -pkin(1) * t437 + pkin(4) * t516 + pkin(5) * t596 + pkin(9) * t559 - qJ(3) * t472 + t471 * t978 - t936;
t402 = qJ(3) * t562 - qJ(4) * t474 - t420 * t871 + t426 * t872;
t401 = qJ(3) * t558 - qJ(4) * t471 - t419 * t871 + t425 * t872;
t400 = -qJ(4) * t475 - t872 * t420 - t871 * t426 + t562 * t978;
t399 = -pkin(7) * t467 - t416 * t875 + t417 * t879;
t398 = -qJ(4) * t472 - t872 * t419 - t871 * t425 + t558 * t978;
t397 = pkin(8) * t428 + (-pkin(9) * t874 + t910) * t442;
t396 = -pkin(1) * t434 + pkin(4) * t502 + pkin(5) * t642 + pkin(9) * t542 - qJ(3) * t463 + t462 * t978 + t443;
t395 = qJ(3) * t540 - qJ(4) * t462 - t410 * t871 + t415 * t872;
t394 = -qJ(4) * t463 - t872 * t410 - t871 * t415 + t540 * t978;
t393 = -pkin(1) * t413 + pkin(4) * t484 - qJ(3) * t447 + t446 * t978;
t392 = t406 * t875 + t407 * t879;
t391 = -t406 * t879 + t407 * t875;
t390 = -pkin(7) * t413 - t408 * t875 + t409 * t879;
t389 = t392 * t880 - t442 * t876;
t388 = t392 * t876 + t442 * t880;
t387 = -pkin(7) * t439 - t400 * t875 + t402 * t879;
t386 = -pkin(7) * t437 - t398 * t875 + t401 * t879;
t385 = -pkin(7) * t434 - t394 * t875 + t395 * t879;
t384 = qJ(3) * t442 - qJ(4) * t406 - t397 * t871 + t405 * t872;
t383 = -qJ(4) * t407 - t872 * t397 - t871 * t405 + t442 * t978;
t382 = -pkin(1) * t391 + pkin(4) * t427 - pkin(5) * t506 + pkin(9) * t443 - qJ(3) * t407 + t406 * t978;
t381 = -pkin(7) * t391 - t383 * t875 + t384 * t879;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t832, -t833, 0, t776, 0, 0, 0, 0, 0, 0, t741, -t742, t772, t695, 0, 0, 0, 0, 0, 0, t741, t772, t742, t625, 0, 0, 0, 0, 0, 0, t609, t620, t589, t491, 0, 0, 0, 0, 0, 0, t489, t499, t459, t412, 0, 0, 0, 0, 0, 0, t430, t433, t423, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t833, -t832, 0, t775, 0, 0, 0, 0, 0, 0, t738, -t739, t771, t694, 0, 0, 0, 0, 0, 0, t738, t771, t739, t624, 0, 0, 0, 0, 0, 0, t606, t619, t588, t490, 0, 0, 0, 0, 0, 0, t488, t498, t458, t411, 0, 0, 0, 0, 0, 0, t429, t432, t422, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t779, -t781, 0, -t712, 0, 0, 0, 0, 0, 0, t779, 0, t781, t669, 0, 0, 0, 0, 0, 0, t630, t651, t605, t492, 0, 0, 0, 0, 0, 0, t500, t530, t467, t413, 0, 0, 0, 0, 0, 0, t437, t439, t434, t391; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t833, 0, -t832, 0, t897, -t808, -t775, -pkin(6) * t775, t758, -t991, t754, t757, -t989, t794, -t727 * t876 + t731 * t880 - t975, -t728 * t876 + t732 * t880 + t1000, t712 * t880 - t974, -pkin(6) * t694 - (pkin(1) * t876 - pkin(7) * t880) * t712, t758, t754, t991, t794, t989, t757, t656 * t880 - t675 * t876 - t975, t655 * t880 - t822 * t876 - t974, t657 * t880 - t674 * t876 - t1000, -pkin(6) * t624 + t603 * t880 - t614 * t876, t659 * t880 + t913, t607 * t880 - t764 * t876, t654 * t880 - t725 * t876, t658 * t880 - t913, t652 * t880 - t876 * t983, t678 * t880 + t859, -pkin(6) * t606 + t504 * t880 - t524 * t876, -pkin(6) * t619 + t520 * t880 - t544 * t876, -pkin(6) * t588 + t464 * t880 - t534 * t876, -pkin(6) * t490 - t449 * t876 + t450 * t880, t509 * t880 - t915, t468 * t880 - t690 * t876, t532 * t880 - t641 * t876, t508 * t880 + t915, t533 * t880 - t876 * t887, t550 * t880 - t865 * t876, -pkin(6) * t488 + t418 * t880 - t441 * t876, -pkin(6) * t498 + t424 * t880 - t448 * t876, -pkin(6) * t458 + t399 * t880 - t421 * t876, -pkin(6) * t411 + t390 * t880 - t393 * t876, t454 * t880 - t592 * t876, t436 * t880 - t539 * t876, t444 * t880 - t573 * t876, t453 * t880 - t590 * t876, t445 * t880 - t574 * t876, t476 * t880 - t617 * t876, -pkin(6) * t429 + t386 * t880 - t403 * t876, -pkin(6) * t432 + t387 * t880 - t404 * t876, -pkin(6) * t422 + t385 * t880 - t396 * t876, -pkin(6) * t388 + t381 * t880 - t382 * t876; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t832, 0, t833, 0, t808, t897, t776, pkin(6) * t776, t756, -t992, t753, t755, -t990, t792, t727 * t880 + t731 * t876 + t735, t728 * t880 + t732 * t876 - t999, t712 * t876 + t770, pkin(6) * t695 - (-pkin(1) * t880 - pkin(7) * t876) * t712, t756, t753, t992, t792, t990, t755, t656 * t876 + t675 * t880 + t735, t655 * t876 + t822 * t880 + t770, t657 * t876 + t674 * t880 + t999, pkin(6) * t625 + t603 * t876 + t614 * t880, t659 * t876 - t912, t607 * t876 + t764 * t880, t654 * t876 + t725 * t880, t658 * t876 + t912, t652 * t876 + t880 * t983, t678 * t876 - t918, pkin(6) * t609 + t504 * t876 + t524 * t880, pkin(6) * t620 + t520 * t876 + t544 * t880, pkin(6) * t589 + t464 * t876 + t534 * t880, pkin(6) * t491 + t449 * t880 + t450 * t876, t509 * t876 + t914, t468 * t876 + t690 * t880, t532 * t876 + t641 * t880, t508 * t876 - t914, t533 * t876 + t880 * t887, t550 * t876 + t865 * t880, pkin(6) * t489 + t418 * t876 + t441 * t880, pkin(6) * t499 + t424 * t876 + t448 * t880, pkin(6) * t459 + t399 * t876 + t421 * t880, pkin(6) * t412 + t390 * t876 + t393 * t880, t454 * t876 + t592 * t880, t436 * t876 + t539 * t880, t444 * t876 + t573 * t880, t453 * t876 + t590 * t880, t445 * t876 + t574 * t880, t476 * t876 + t617 * t880, pkin(6) * t430 + t386 * t876 + t403 * t880, pkin(6) * t433 + t387 * t876 + t404 * t880, pkin(6) * t423 + t385 * t876 + t396 * t880, pkin(6) * t389 + t381 * t876 + t382 * t880; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t839, t840, 0, 0, t778, t893, t780, t777, t982, 0, t933 + t955, -pkin(1) * t826 - t956 - t998, t713 + t932, pkin(1) * t814 + pkin(7) * t713, t778, t780, -t893, 0, -t982, t777, qJ(3) * t951 + t697 * t879 + t933, t705 * t879 + t706 * t875 + t932, t998 + t875 * t696 + (pkin(1) + t977) * t826, pkin(7) * t670 + (pkin(1) - t896) * t704, t709 * t879 + t710 * t875, t665 * t879 + t667 * t875, t700 * t879 + t703 * t875, t707 * t879 + t708 * t875, t698 * t879 + t701 * t875, t744 * t879 + t745 * t875, pkin(1) * t722 + pkin(7) * t631 + t581 * t879 + t604 * t875, pkin(1) * t726 + pkin(7) * t653 + t594 * t879 + t610 * t875, pkin(1) * t721 + pkin(7) * t608 + t523 * t879 + t538 * t875, pkin(1) * t673 + pkin(7) * t493 + t529 * t879 + t549 * t875, t565 * t879 + t567 * t875, t512 * t879 + t514 * t875, t584 * t879 + t586 * t875, t564 * t879 + t566 * t875, t585 * t879 + t587 * t875, t615 * t879 + t616 * t875, pkin(1) * t636 + pkin(7) * t501 + t451 * t879 + t461 * t875, pkin(1) * t640 + pkin(7) * t531 + t457 * t879 + t473 * t875, pkin(1) * t660 + pkin(7) * t469 + t416 * t879 + t417 * t875, pkin(1) * t623 + pkin(7) * t414 + t408 * t879 + t409 * t875, t495 * t879 + t497 * t875, t465 * t879 + t466 * t875, t480 * t879 + t482 * t875, t494 * t879 + t496 * t875, t481 * t879 + t483 * t875, t521 * t879 + t522 * t875, pkin(1) * t558 + pkin(7) * t438 + t398 * t879 + t401 * t875, pkin(1) * t562 + pkin(7) * t440 + t400 * t879 + t402 * t875, pkin(1) * t540 + pkin(7) * t435 + t394 * t879 + t395 * t875, pkin(1) * t442 + pkin(7) * t392 + t383 * t879 + t384 * t875;];
tauB_reg  = t1;
