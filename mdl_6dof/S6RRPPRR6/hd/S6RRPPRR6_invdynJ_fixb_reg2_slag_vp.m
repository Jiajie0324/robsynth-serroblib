% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:15:23
% EndTime: 2019-03-09 09:15:39
% DurationCPUTime: 8.79s
% Computational Cost: add. (12443->660), mult. (27223->801), div. (0->0), fcn. (19535->12), ass. (0->319)
t246 = sin(pkin(10));
t247 = cos(pkin(10));
t255 = cos(qJ(2));
t352 = qJD(1) * t255;
t252 = sin(qJ(2));
t353 = qJD(1) * t252;
t143 = -t246 * t353 - t247 * t352;
t334 = t246 * t352;
t145 = t247 * t353 - t334;
t251 = sin(qJ(5));
t401 = cos(qJ(5));
t333 = qJD(5) * t401;
t350 = qJD(5) * t251;
t346 = qJD(1) * qJD(2);
t332 = t252 * t346;
t207 = t252 * t246;
t412 = t255 * t247 + t207;
t275 = qJDD(1) * t412 - t247 * t332;
t331 = t255 * t346;
t93 = t246 * t331 + t275;
t283 = t412 * qJD(1);
t228 = t252 * qJDD(1);
t345 = t255 * qJDD(1);
t299 = t228 * t247 - t246 * t345;
t94 = qJD(2) * t283 + t299;
t267 = -t143 * t333 + t145 * t350 + t251 * t93 - t401 * t94;
t327 = t251 * t94 + t401 * t93;
t287 = t251 * t143 + t145 * t401;
t409 = qJD(5) * t287;
t39 = t327 + t409;
t402 = t93 * pkin(4);
t229 = t252 * qJD(3);
t245 = qJDD(1) * pkin(1);
t423 = -t331 - t228;
t295 = pkin(2) * t345 - qJ(3) * t423 + qJD(1) * t229 + t245;
t404 = pkin(2) + pkin(3);
t335 = t404 * qJD(2);
t309 = t252 * t335;
t61 = pkin(3) * t345 - qJD(1) * t309 + qJDD(4) + t295;
t48 = t61 + t402;
t10 = t39 * pkin(5) + pkin(9) * t267 + t48;
t250 = sin(qJ(6));
t254 = cos(qJ(6));
t399 = pkin(8) * t145;
t223 = pkin(7) * t353;
t166 = qJ(4) * t353 - t223;
t123 = qJD(3) - t335 - t166;
t224 = pkin(7) * t352;
t168 = -qJ(4) * t352 + t224;
t242 = qJD(2) * qJ(3);
t153 = t168 + t242;
t72 = t247 * t123 - t153 * t246;
t55 = -qJD(2) * pkin(4) - t399 + t72;
t400 = pkin(8) * t143;
t73 = t246 * t123 + t247 * t153;
t57 = t73 + t400;
t28 = t251 * t55 + t401 * t57;
t344 = qJD(2) - qJD(5);
t26 = -pkin(9) * t344 + t28;
t413 = -t401 * t143 + t251 * t145;
t154 = -qJD(1) * pkin(1) - pkin(2) * t352 - qJ(3) * t353;
t117 = pkin(3) * t352 + qJD(4) - t154;
t82 = -pkin(4) * t143 + t117;
t36 = pkin(5) * t413 - pkin(9) * t287 + t82;
t11 = -t250 * t26 + t254 * t36;
t219 = pkin(7) * t228;
t330 = pkin(7) * t331 + qJDD(3) + t219;
t347 = t252 * qJD(4);
t78 = qJ(4) * t423 - qJD(1) * t347 - t404 * qJDD(2) + t330;
t351 = qJD(2) * t252;
t392 = pkin(7) - qJ(4);
t139 = -t255 * qJD(4) - t351 * t392;
t220 = pkin(7) * t345;
t240 = qJDD(2) * qJ(3);
t241 = qJD(2) * qJD(3);
t338 = t220 + t240 + t241;
t81 = -qJ(4) * t345 + qJD(1) * t139 + t338;
t328 = t246 * t81 - t247 * t78;
t33 = -qJDD(2) * pkin(4) - pkin(8) * t94 - t328;
t47 = t246 * t78 + t247 * t81;
t34 = -pkin(8) * t93 + t47;
t288 = -t251 * t33 - t55 * t333 - t401 * t34 + t350 * t57;
t342 = qJDD(2) - qJDD(5);
t5 = -pkin(9) * t342 - t288;
t1 = qJD(6) * t11 + t250 * t10 + t254 * t5;
t422 = qJD(6) + t413;
t397 = t11 * t422;
t443 = t1 - t397;
t12 = t250 * t36 + t254 * t26;
t9 = t254 * t10;
t2 = -qJD(6) * t12 - t250 * t5 + t9;
t396 = t12 * t422;
t442 = t2 + t396;
t313 = t254 * t344;
t349 = qJD(6) * t250;
t23 = qJD(6) * t313 + t250 * t342 + t254 * t267 + t287 * t349;
t388 = t23 * t250;
t434 = t254 * t422;
t64 = -t250 * t344 + t254 * t287;
t441 = t434 * t64 - t388;
t379 = qJD(6) * t64;
t24 = -t250 * t267 + t254 * t342 + t379;
t348 = qJD(6) * t254;
t62 = t250 * t287 + t313;
t391 = -t250 * t24 - t62 * t348;
t427 = t413 * t62;
t435 = t250 * t422;
t440 = t435 * t64 + t254 * (t23 + t427) - t391;
t38 = qJDD(6) + t39;
t386 = t250 * t38;
t414 = t287 * t64;
t439 = t422 * t434 + t386 - t414;
t35 = t254 * t38;
t415 = t287 * t62;
t438 = t422 * t435 - t35 - t415;
t27 = -t251 * t57 + t401 * t55;
t25 = pkin(5) * t344 - t27;
t437 = t25 * t422;
t417 = t287 ^ 2;
t430 = t413 ^ 2;
t432 = t430 - t417;
t429 = t11 * t287;
t428 = t12 * t287;
t426 = t422 * t287;
t394 = t287 * t413;
t425 = t344 * t413;
t410 = qJD(2) * t287;
t424 = -t327 - t410;
t343 = pkin(10) + qJ(5);
t227 = sin(t343);
t324 = cos(t343);
t137 = t252 * t227 + t255 * t324;
t256 = cos(qJ(1));
t116 = t137 * t256;
t253 = sin(qJ(1));
t114 = t137 * t253;
t296 = t252 * t324;
t138 = -t255 * t227 + t296;
t303 = g(2) * t114 + g(3) * t138;
t281 = g(1) * t116 + t303;
t420 = t413 * t82 + t281 + t288;
t113 = t138 * t253;
t368 = t255 * t256;
t115 = t227 * t368 - t256 * t296;
t282 = g(1) * t115 - g(2) * t113 + g(3) * t137;
t325 = t251 * t34 - t401 * t33 + t57 * t333 + t55 * t350;
t419 = -t287 * t82 + t282 - t325;
t418 = t267 + t425;
t49 = pkin(5) * t287 + pkin(9) * t413;
t358 = t255 * pkin(2) + t252 * qJ(3);
t416 = -pkin(1) - t358;
t99 = -t166 * t246 + t168 * t247;
t278 = t99 + t400;
t100 = t247 * t166 + t246 * t168;
t65 = t100 + t399;
t42 = t251 * t278 + t401 * t65;
t170 = -qJ(3) * t246 - t247 * t404;
t165 = -pkin(4) + t170;
t171 = qJ(3) * t247 - t246 * t404;
t103 = t165 * t401 - t251 * t171;
t286 = -t251 * t246 + t247 * t401;
t66 = qJD(3) * t286 + qJD(5) * t103;
t390 = t66 - t42;
t104 = t251 * t165 + t401 * t171;
t161 = t246 * t401 + t251 * t247;
t389 = t161 * qJD(3) + qJD(5) * t104 - t251 * t65 + t278 * t401;
t147 = t286 * qJD(2);
t148 = t286 * qJD(5);
t365 = t148 - t147;
t364 = t344 * t161;
t411 = g(1) * t256 + g(2) * t253;
t408 = t252 * t411;
t380 = pkin(7) * qJDD(2);
t407 = (qJD(1) * t416 + t154) * qJD(2) - t380;
t406 = t143 ^ 2;
t405 = t145 ^ 2;
t258 = qJD(2) ^ 2;
t6 = pkin(5) * t342 + t325;
t375 = t246 * t255;
t293 = -t247 * t252 + t375;
t96 = -t251 * t412 - t293 * t401;
t403 = t6 * t96;
t238 = g(1) * t253;
t398 = g(2) * t256;
t232 = t255 * pkin(3);
t395 = t64 * t62;
t210 = pkin(4) * t247 + pkin(3);
t393 = pkin(2) + t210;
t387 = t24 * t254;
t385 = t250 * t62;
t384 = t250 * t64;
t382 = t254 * t62;
t381 = t254 * t64;
t378 = qJD(6) * t422;
t377 = qJDD(2) * pkin(2);
t376 = t145 * t143;
t373 = t252 * t253;
t372 = t252 * t256;
t259 = qJD(1) ^ 2;
t371 = t252 * t259;
t370 = t253 * t255;
t184 = t392 * t255;
t140 = qJD(2) * t184 - t347;
t75 = t247 * t139 + t246 * t140;
t183 = t392 * t252;
t109 = t246 * t183 + t247 * t184;
t196 = qJ(3) * t370;
t341 = pkin(4) * t375;
t363 = t253 * t341 + t196;
t198 = qJ(3) * t368;
t362 = t256 * t341 + t198;
t234 = t256 * pkin(7);
t249 = -pkin(8) - qJ(4);
t360 = t256 * t249 + t234;
t359 = t255 * t242 + t229;
t357 = t256 * pkin(1) + t253 * pkin(7);
t243 = t252 ^ 2;
t244 = t255 ^ 2;
t355 = -t243 + t244;
t354 = t243 + t244;
t195 = pkin(4) * t207;
t340 = t96 * t349;
t339 = t96 * t348;
t337 = t232 + t358;
t336 = -g(1) * t372 - g(2) * t373 + g(3) * t255;
t329 = t238 - t398;
t326 = t422 ^ 2;
t319 = -qJD(2) * pkin(2) + qJD(3);
t318 = qJD(3) * t246 + t99;
t106 = -t147 * t250 + t254 * t353;
t317 = -t148 * t250 - t106;
t107 = t147 * t254 + t250 * t353;
t316 = t148 * t254 - t107;
t108 = t247 * t183 - t184 * t246;
t156 = pkin(1) + t337;
t314 = qJD(3) * t247 - t100;
t312 = t255 * t210 + t195 + t358;
t311 = pkin(2) * t368 + qJ(3) * t372 + t357;
t310 = -t219 - t336;
t308 = t252 * t331;
t307 = t354 * qJDD(1) * pkin(7);
t306 = pkin(7) * t258 + t398;
t305 = -g(1) * t113 - g(2) * t115;
t284 = qJD(2) * t412;
t285 = qJD(2) * t293;
t301 = t401 * t412;
t50 = qJD(5) * t301 + t251 * t285 - t284 * t401 - t293 * t350;
t302 = t38 * t96 - t422 * t50;
t300 = -qJD(6) * t26 - t398;
t298 = t11 * t254 + t12 * t250;
t297 = t246 * t72 - t247 * t73;
t105 = pkin(4) * t412 + t156;
t95 = -t251 * t293 + t301;
t43 = t95 * pkin(5) - t96 * pkin(9) + t105;
t76 = pkin(8) * t293 + t108;
t77 = -pkin(8) * t412 + t109;
t45 = t251 * t76 + t401 * t77;
t19 = -t250 * t45 + t254 * t43;
t20 = t250 * t43 + t254 * t45;
t74 = -t246 * t139 + t247 * t140;
t174 = t223 + t319;
t182 = t224 + t242;
t294 = t174 * t255 - t182 * t252;
t217 = qJ(3) * t352;
t136 = -t353 * t404 + t217;
t134 = t330 - t377;
t290 = -pkin(9) * t38 + t437;
t289 = -0.2e1 * pkin(1) * t346 - t380;
t280 = t256 * t195 + t210 * t368 + t253 * t249 + t311;
t279 = -t306 + 0.2e1 * t245;
t277 = t282 - t6;
t276 = -qJD(6) * t36 + t303 - t5;
t92 = -t145 * pkin(4) + t136;
t98 = -pkin(9) + t104;
t274 = -t38 * t98 - t422 * t66 - t437;
t272 = t393 * t408;
t271 = pkin(9) * t378 - t277;
t141 = pkin(2) * t351 - t359;
t91 = pkin(2) * t332 - t295;
t270 = -qJD(1) * t141 - qJDD(1) * t416 - t306 - t91;
t269 = t378 * t98 + t277;
t268 = -qJD(6) * t298 + t1 * t254 - t2 * t250;
t266 = (-pkin(1) - t393 * t255 + (-pkin(4) * t246 - qJ(3)) * t252) * t238;
t121 = -pkin(7) * t332 + t338;
t265 = qJD(2) * t294 + t121 * t255 + t134 * t252;
t263 = -pkin(8) * t284 + t74;
t80 = (-t252 * t393 + t341) * qJD(2) + t359;
t261 = t329 + t61;
t204 = g(1) * t370;
t194 = t255 * t371;
t178 = t355 * t259;
t177 = qJDD(2) * t255 - t252 * t258;
t176 = qJDD(2) * t252 + t255 * t258;
t167 = pkin(2) * t353 - t217;
t158 = qJDD(1) * t244 - 0.2e1 * t308;
t157 = qJDD(1) * t243 + 0.2e1 * t308;
t133 = t412 * t256;
t132 = t293 * t256;
t131 = t412 * t253;
t130 = t293 * t253;
t122 = t252 * t345 + t346 * t355;
t112 = -t309 + t359;
t102 = t116 * t254 - t250 * t253;
t101 = -t116 * t250 - t253 * t254;
t97 = pkin(5) - t103;
t58 = -pkin(8) * t285 + t75;
t51 = qJD(5) * t96 + t251 * t284 + t285 * t401;
t44 = t251 * t77 - t401 * t76;
t40 = -t49 + t92;
t21 = t51 * pkin(5) + t50 * pkin(9) + t80;
t18 = qJD(5) * t45 + t251 * t58 - t263 * t401;
t17 = t251 * t263 + t333 * t76 - t350 * t77 + t401 * t58;
t16 = t250 * t49 + t254 * t27;
t15 = -t250 * t27 + t254 * t49;
t14 = t250 * t40 + t254 * t42;
t13 = -t250 * t42 + t254 * t40;
t4 = -qJD(6) * t20 - t250 * t17 + t254 * t21;
t3 = qJD(6) * t19 + t254 * t17 + t250 * t21;
t7 = [0, 0, 0, 0, 0, qJDD(1), t329, t411, 0, 0, t157, 0.2e1 * t122, t176, t158, t177, 0, t252 * t289 + t255 * t279 + t204, t289 * t255 + (-t279 - t238) * t252, 0.2e1 * t307 - t411, -g(1) * (-t253 * pkin(1) + t234) - g(2) * t357 + (pkin(7) ^ 2 * t354 + pkin(1) ^ 2) * qJDD(1), t157, t176, -0.2e1 * t122, 0, -t177, t158, t252 * t407 + t270 * t255 + t204, t307 + t265 - t411, -t407 * t255 + (t270 + t238) * t252, pkin(7) * t265 - g(1) * t234 - g(2) * t311 + t154 * t141 + (-t238 + t91) * t416, t145 * t284 - t293 * t94, t293 * t93 - t94 * t412 + (t143 * t412 - t145 * t293) * qJD(2), qJDD(2) * t293 - t258 * t412, -t143 * t285 + t412 * t93, qJDD(2) * t412 + t258 * t293, 0, -t112 * t143 + t156 * t93 + t61 * t412 - t108 * qJDD(2) + g(1) * t131 - g(2) * t133 + (t117 * t293 - t74) * qJD(2), -g(1) * t130 + g(2) * t132 + t109 * qJDD(2) + t112 * t145 + t156 * t94 - t61 * t293 + (t117 * t412 + t75) * qJD(2), t75 * t143 - t109 * t93 - t47 * t412 - t74 * t145 - t108 * t94 - t328 * t293 + (-t293 * t73 - t412 * t72) * qJD(2) + t411, t47 * t109 + t73 * t75 - t328 * t108 + t72 * t74 + t61 * t156 + t117 * t112 - g(1) * (-t256 * qJ(4) + t234) - g(2) * (pkin(3) * t368 + t311) + (-g(1) * (t416 - t232) + g(2) * qJ(4)) * t253, -t267 * t96 - t287 * t50, t267 * t95 - t287 * t51 - t96 * t39 + t413 * t50, -t342 * t96 + t344 * t50, t39 * t95 + t413 * t51, t342 * t95 + t344 * t51, 0, g(1) * t114 - g(2) * t116 + t105 * t39 + t18 * t344 + t342 * t44 + t413 * t80 + t48 * t95 + t82 * t51, -t105 * t267 + t17 * t344 + t287 * t80 + t342 * t45 + t48 * t96 - t82 * t50 - t305, -t17 * t413 + t18 * t287 - t267 * t44 + t27 * t50 - t28 * t51 + t288 * t95 + t325 * t96 - t45 * t39 + t411, -g(1) * t360 - g(2) * t280 + t48 * t105 + t28 * t17 - t27 * t18 - t288 * t45 + t325 * t44 + t82 * t80 - t266, -t64 * t340 + (-t23 * t96 - t50 * t64) * t254 (t382 + t384) * t50 + (t388 - t387 + (-t381 + t385) * qJD(6)) * t96, -t23 * t95 + t254 * t302 - t340 * t422 + t64 * t51, t62 * t339 + (t24 * t96 - t50 * t62) * t250, -t24 * t95 - t250 * t302 - t339 * t422 - t62 * t51, t38 * t95 + t422 * t51, t4 * t422 + t19 * t38 + t2 * t95 + t11 * t51 + t18 * t62 + t44 * t24 + t250 * t403 - g(1) * (-t114 * t254 - t250 * t256) - g(2) * t102 + (-t250 * t50 + t339) * t25, -t3 * t422 - t20 * t38 - t1 * t95 - t12 * t51 + t18 * t64 - t44 * t23 + t254 * t403 - g(1) * (t114 * t250 - t254 * t256) - g(2) * t101 + (-t254 * t50 - t340) * t25, t19 * t23 - t20 * t24 - t3 * t62 - t4 * t64 + t298 * t50 + (-t1 * t250 - t2 * t254 + (t11 * t250 - t12 * t254) * qJD(6)) * t96 + t305, t1 * t20 + t12 * t3 + t2 * t19 + t11 * t4 + t6 * t44 + t25 * t18 - g(1) * (-pkin(5) * t114 + pkin(9) * t113 + t360) - g(2) * (pkin(5) * t116 + pkin(9) * t115 + t280) - t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194, -t178, t228, t194, t345, qJDD(2), pkin(1) * t371 + t310, g(3) * t252 - t220 + (pkin(1) * t259 + t411) * t255, 0, 0, -t194, t228, t178, qJDD(2), -t345, t194, 0.2e1 * t377 - qJDD(3) + (-t154 * t252 + t167 * t255) * qJD(1) + t310 (-t252 * pkin(2) + qJ(3) * t255) * qJDD(1) + ((t182 - t242) * t252 + (-t174 + t319) * t255) * qJD(1), t220 + 0.2e1 * t240 + 0.2e1 * t241 + (qJD(1) * t167 - g(3)) * t252 + (qJD(1) * t154 - t411) * t255, t121 * qJ(3) + t182 * qJD(3) - t134 * pkin(2) - t154 * t167 - g(1) * (-pkin(2) * t372 + t198) - g(2) * (-pkin(2) * t373 + t196) - g(3) * t358 - t294 * qJD(1) * pkin(7), t376, -t405 + t406 (-t143 - t283) * qJD(2) - t299, -t376 (t145 + t334) * qJD(2) + t275, qJDD(2), -g(1) * t132 - g(2) * t130 - g(3) * t412 + qJD(2) * t318 - t170 * qJDD(2) + t117 * t145 + t136 * t143 + t328, -g(1) * t133 - g(2) * t131 + g(3) * t293 + qJD(2) * t314 + qJDD(2) * t171 + t117 * t143 - t136 * t145 + t47, -t170 * t94 - t171 * t93 + (t318 - t73) * t145 + (t314 - t72) * t143, -g(1) * t198 - g(2) * t196 - g(3) * t337 - t297 * qJD(3) - t73 * t100 - t117 * t136 - t170 * t328 + t47 * t171 + t404 * t408 - t72 * t99, -t394, t432, t418, t394, -t424, t342, -t103 * t342 + t344 * t389 - t413 * t92 - t419, t104 * t342 - t92 * t287 + t344 * t390 - t420, t103 * t267 - t104 * t39 + (t27 - t390) * t413 + (-t28 + t389) * t287, -g(1) * t362 - g(2) * t363 - g(3) * t312 - t103 * t325 - t104 * t288 - t27 * t389 + t28 * t390 - t82 * t92 + t272, -t441, t440, -t439, -t385 * t422 + t387, t438, t426, -t13 * t422 + t24 * t97 + t250 * t274 - t254 * t269 + t389 * t62 + t429, t14 * t422 - t23 * t97 + t250 * t269 + t254 * t274 + t389 * t64 - t428, t13 * t64 + t14 * t62 + (t11 * t413 - t24 * t98 - t62 * t66 - t1 + (t64 * t98 + t11) * qJD(6)) * t254 + (t12 * t413 - t23 * t98 + t64 * t66 + t2 + (t62 * t98 + t12) * qJD(6)) * t250 + t281, t6 * t97 - g(1) * (t115 * pkin(5) - t116 * pkin(9) + t362) - g(2) * (-t113 * pkin(5) - t114 * pkin(9) + t363) - g(3) * (pkin(5) * t137 - pkin(9) * t138 + t312) + t272 + t389 * t25 + (t254 * t66 - t14) * t12 + (-t250 * t66 - t13) * t11 + t268 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) - t194, t228, -t243 * t259 - t258, -qJD(2) * t182 + t154 * t353 + t134 + t336, 0, 0, 0, 0, 0, 0, -qJDD(2) * t247 + t143 * t353 - t246 * t258, qJDD(2) * t246 - t145 * t353 - t247 * t258, -t246 * t93 - t247 * t94 + (-t143 * t247 - t145 * t246) * qJD(2), qJD(2) * t297 - t117 * t353 + t47 * t246 - t247 * t328 + t336, 0, 0, 0, 0, 0, 0, -t286 * t342 - t344 * t364 - t353 * t413, t161 * t342 - t353 * t287 + t344 * t365, -t161 * t39 + t267 * t286 - t287 * t364 - t365 * t413, -t161 * t288 + t27 * t364 + t28 * t365 - t286 * t325 - t353 * t82 + t336, 0, 0, 0, 0, 0, 0, -t161 * t386 - t286 * t24 - t364 * t62 + (-t161 * t348 + t317) * t422, -t161 * t35 + t286 * t23 - t364 * t64 + (t161 * t349 - t316) * t422, t106 * t64 + t107 * t62 + (-t382 + t384) * t148 + (-t388 - t387 + (t381 + t385) * qJD(6)) * t161, t11 * t317 + t12 * t316 + t161 * t268 - t25 * t364 - t286 * t6 + t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t145 + t334) * qJD(2) + t275 (-t143 + t283) * qJD(2) + t299, -t405 - t406, -t143 * t73 + t145 * t72 + t261, 0, 0, 0, 0, 0, 0, t327 + 0.2e1 * t409 - t410, -t267 + t425, -t417 - t430, t27 * t287 + t28 * t413 + t261 + t402, 0, 0, 0, 0, 0, 0, -t250 * t326 + t35 - t415, -t254 * t326 - t386 - t414 (t23 - t427) * t254 + t422 * t384 + t391, -t25 * t287 + t250 * t443 + t442 * t254 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t394, -t432, -t418, -t394, t424, -t342, -t28 * t344 + t419, -t27 * t344 + t420, 0, 0, t441, -t440, t439, t435 * t62 - t387, -t438, -t426, -pkin(5) * t24 - t15 * t422 + t250 * t290 - t254 * t271 - t28 * t62 - t429, pkin(5) * t23 + t16 * t422 + t250 * t271 + t254 * t290 - t28 * t64 + t428, t15 * t64 + t16 * t62 + ((-t24 + t379) * pkin(9) + t443) * t254 + ((qJD(6) * t62 - t23) * pkin(9) - t442) * t250 - t281, -t11 * t15 - t12 * t16 - t25 * t28 + t277 * pkin(5) + (t268 - t281) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t62 ^ 2 + t64 ^ 2, t422 * t62 - t23, -t395, t422 * t64 - t24, t38, -g(1) * t101 - t25 * t64 + t250 * t276 + t254 * t300 + t396 + t9, g(1) * t102 + t397 + t25 * t62 + (-t10 - t300) * t250 + t276 * t254, 0, 0;];
tau_reg  = t7;
