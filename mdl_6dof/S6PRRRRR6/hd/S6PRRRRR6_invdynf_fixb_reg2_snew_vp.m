% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 12:50
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 12:50:03
% EndTime: 2019-05-05 12:50:26
% DurationCPUTime: 23.78s
% Computational Cost: add. (334999->402), mult. (791535->675), div. (0->0), fcn. (676442->18), ass. (0->365)
t2921 = sin(pkin(14));
t2925 = cos(pkin(14));
t2908 = -g(1) * t2925 - g(2) * t2921;
t2933 = sin(qJ(2));
t2938 = cos(qJ(2));
t2907 = g(1) * t2921 - g(2) * t2925;
t2920 = -g(3) + qJDD(1);
t2924 = sin(pkin(6));
t2928 = cos(pkin(6));
t3040 = t2907 * t2928 + t2920 * t2924;
t2856 = -t2908 * t2933 + t2938 * t3040;
t2923 = sin(pkin(7));
t2939 = qJD(2) ^ 2;
t2849 = pkin(10) * t2923 * t2939 + qJDD(2) * pkin(2) + t2856;
t2857 = t2938 * t2908 + t2933 * t3040;
t3006 = qJDD(2) * t2923;
t2850 = -pkin(2) * t2939 + pkin(10) * t3006 + t2857;
t2937 = cos(qJ(3));
t2922 = sin(pkin(8));
t2932 = sin(qJ(3));
t3014 = t2922 * t2932;
t3027 = qJD(2) * t2923;
t2884 = (-pkin(3) * t2937 - pkin(11) * t3014) * t3027;
t3011 = t2923 * t2937;
t3004 = qJD(2) * t3011;
t2887 = qJD(3) * t3004 + t2932 * t3006;
t2926 = cos(pkin(8));
t2927 = cos(pkin(7));
t2915 = qJD(2) * t2927 + qJD(3);
t2997 = t2926 * t3004;
t2874 = (t2915 * t2922 + t2997) * pkin(11);
t2914 = t2927 * qJDD(2) + qJDD(3);
t2881 = -t2907 * t2924 + t2920 * t2928;
t3024 = t2849 * t2927;
t3007 = t2881 * t3011 + t2937 * t3024;
t2945 = t2914 * pkin(3) + t2915 * t2874 + t3007;
t3012 = t2923 * t2932;
t3005 = qJD(2) * t3012;
t3028 = pkin(11) * t2926;
t2880 = pkin(3) * t2915 - t3005 * t3028;
t2950 = -t2874 * t2937 + t2880 * t2932;
t2873 = t2927 * t2881;
t2888 = -qJD(3) * t3005 + t2937 * t3006;
t3003 = -t2888 * pkin(3) + t2873;
t3041 = t2926 * (-t2887 * t3028 + (-t2884 * t3027 - t2850) * t2932 + t2945) + t2922 * (-t2887 * t2922 * pkin(11) + (qJD(2) * t2950 - t2849) * t2923 + t3003);
t2936 = cos(qJ(4));
t2931 = sin(qJ(4));
t3010 = t2926 * t2931;
t3015 = t2922 * t2931;
t2862 = t2915 * t3015 + (t2932 * t2936 + t2937 * t3010) * t3027;
t2877 = -t2915 * t2926 + t2922 * t3004 - qJD(4);
t2930 = sin(qJ(5));
t2935 = cos(qJ(5));
t2842 = t2862 * t2930 + t2935 * t2877;
t2841 = qJD(6) + t2842;
t3039 = qJD(6) + t2841;
t2844 = t2862 * t2935 - t2877 * t2930;
t3013 = t2922 * t2936;
t2860 = -t2915 * t3013 + t2931 * t3005 - t2936 * t2997;
t2858 = qJD(5) + t2860;
t2929 = sin(qJ(6));
t2934 = cos(qJ(6));
t2820 = t2844 * t2929 - t2934 * t2858;
t3038 = t2820 ^ 2;
t2822 = t2844 * t2934 + t2858 * t2929;
t3037 = t2822 ^ 2;
t3036 = t2841 ^ 2;
t3035 = t2842 ^ 2;
t3034 = t2844 ^ 2;
t3033 = t2858 ^ 2;
t3032 = t2860 ^ 2;
t3031 = t2862 ^ 2;
t3030 = t2877 ^ 2;
t3029 = t2915 ^ 2;
t3026 = t2820 * t2822;
t3025 = t2842 * t2844;
t3023 = t2850 * t2932;
t3022 = t2860 * t2862;
t3021 = t2860 * t2877;
t3020 = t2862 * t2877;
t3019 = t2888 * t2926;
t3017 = t2923 ^ 2 * t2939;
t3009 = qJD(5) - t2858;
t3008 = qJD(6) - t2841;
t2815 = t2937 * t2850 + t2881 * t3012 + t2932 * t3024;
t2795 = t2884 * t3004 - t2915 * t2880 + (t2914 * t2922 + t3019) * pkin(11) + t2815;
t2754 = t2936 * t2795 + t2931 * t3041;
t2838 = pkin(4) * t2860 - pkin(12) * t2862;
t2864 = -t2888 * t2922 + t2926 * t2914 + qJDD(4);
t2741 = -pkin(4) * t3030 + pkin(12) * t2864 - t2838 * t2860 + t2754;
t2768 = -t2922 * (t2945 - t3023) + t2926 * t3003 + (-t2926 * t2849 + (t2884 * t3014 + t2926 * t2950) * qJD(2)) * t2923;
t2996 = -t2862 * qJD(4) - t2931 * t2887 + t2914 * t3013 + t2936 * t3019;
t2807 = -t2996 - t3020;
t2829 = -t2860 * qJD(4) + t2936 * t2887 + t2888 * t3010 + t2914 * t3015;
t2999 = -t2829 - t3021;
t2940 = pkin(4) * t2807 + pkin(12) * t2999 + t2768;
t2714 = t2935 * t2741 + t2930 * t2940;
t2713 = -t2741 * t2930 + t2935 * t2940;
t2956 = -t2935 * t2829 - t2930 * t2864;
t2799 = -qJD(5) * t2842 - t2956;
t2947 = qJDD(5) - t2996;
t3002 = -t2929 * t2799 + t2934 * t2947;
t3001 = t2858 * t2842 - t2799;
t3000 = t2930 * t2829 - t2935 * t2864;
t2998 = t2915 * t3004;
t2995 = t2931 * t2795 - t2936 * t3041;
t2813 = pkin(5) * t2842 - pkin(13) * t2844;
t2706 = -pkin(5) * t3033 + pkin(13) * t2947 - t2842 * t2813 + t2714;
t2740 = -t2864 * pkin(4) - t3030 * pkin(12) + t2862 * t2838 + t2995;
t2779 = (qJD(5) + t2858) * t2844 + t3000;
t2718 = pkin(5) * t2779 + pkin(13) * t3001 + t2740;
t2682 = -t2706 * t2929 + t2718 * t2934;
t2683 = t2706 * t2934 + t2718 * t2929;
t2667 = -t2682 * t2929 + t2683 * t2934;
t2705 = -pkin(5) * t2947 - pkin(13) * t3033 + t2813 * t2844 - t2713;
t2656 = t2667 * t2930 - t2705 * t2935;
t2657 = t2667 * t2935 + t2705 * t2930;
t2666 = t2682 * t2934 + t2683 * t2929;
t2988 = t2657 * t2931 - t2666 * t2936;
t2633 = t2926 * t2656 + t2922 * t2988;
t2634 = -t2922 * t2656 + t2926 * t2988;
t2642 = t2657 * t2936 + t2666 * t2931;
t2993 = t2634 * t2937 + t2642 * t2932;
t2626 = -t2923 * t2633 + t2927 * t2993;
t2629 = -t2634 * t2932 + t2642 * t2937;
t2994 = t2626 * t2938 + t2629 * t2933;
t2688 = t2713 * t2935 + t2714 * t2930;
t2689 = -t2713 * t2930 + t2714 * t2935;
t2981 = t2689 * t2931 - t2740 * t2936;
t2664 = t2926 * t2688 + t2922 * t2981;
t2665 = -t2922 * t2688 + t2926 * t2981;
t2677 = t2689 * t2936 + t2740 * t2931;
t2987 = t2665 * t2937 + t2677 * t2932;
t2641 = -t2923 * t2664 + t2927 * t2987;
t2649 = -t2665 * t2932 + t2677 * t2937;
t2992 = t2641 * t2938 + t2649 * t2933;
t2757 = -t2822 * t3008 + t3002;
t2943 = -t2934 * t2799 - t2929 * t2947;
t2759 = t2820 * t3008 + t2943;
t2727 = t2757 * t2934 - t2759 * t2929;
t2777 = -t3037 - t3038;
t2711 = t2727 * t2930 - t2777 * t2935;
t2712 = t2727 * t2935 + t2777 * t2930;
t2726 = t2757 * t2929 + t2759 * t2934;
t2977 = t2712 * t2931 - t2726 * t2936;
t2675 = t2926 * t2711 + t2922 * t2977;
t2676 = -t2922 * t2711 + t2926 * t2977;
t2695 = t2712 * t2936 + t2726 * t2931;
t2985 = t2676 * t2937 + t2695 * t2932;
t2648 = -t2923 * t2675 + t2927 * t2985;
t2663 = -t2676 * t2932 + t2695 * t2937;
t2991 = t2648 * t2938 + t2663 * t2933;
t2944 = -qJD(5) * t2844 - qJDD(6) - t3000;
t2764 = -t2944 - t3026;
t2783 = -t3036 - t3038;
t2744 = -t2764 * t2929 + t2783 * t2934;
t2756 = t2822 * t3039 - t3002;
t2719 = t2744 * t2930 - t2756 * t2935;
t2720 = t2744 * t2935 + t2756 * t2930;
t2743 = t2764 * t2934 + t2783 * t2929;
t2975 = t2720 * t2931 - t2743 * t2936;
t2680 = t2926 * t2719 + t2922 * t2975;
t2681 = -t2922 * t2719 + t2926 * t2975;
t2701 = t2720 * t2936 + t2743 * t2931;
t2983 = t2681 * t2937 + t2701 * t2932;
t2653 = -t2923 * t2680 + t2927 * t2983;
t2669 = -t2681 * t2932 + t2701 * t2937;
t2990 = t2653 * t2938 + t2669 * t2933;
t2765 = t2944 - t3026;
t2787 = -t3036 - t3037;
t2750 = t2765 * t2934 - t2787 * t2929;
t2758 = -t2820 * t3039 - t2943;
t2721 = t2750 * t2930 - t2758 * t2935;
t2722 = t2750 * t2935 + t2758 * t2930;
t2749 = t2765 * t2929 + t2787 * t2934;
t2974 = t2722 * t2931 - t2749 * t2936;
t2684 = t2926 * t2721 + t2922 * t2974;
t2685 = -t2922 * t2721 + t2926 * t2974;
t2702 = t2722 * t2936 + t2749 * t2931;
t2982 = t2685 * t2937 + t2702 * t2932;
t2655 = -t2923 * t2684 + t2927 * t2982;
t2670 = -t2685 * t2932 + t2702 * t2937;
t2989 = t2655 * t2938 + t2670 * t2933;
t2967 = t2754 * t2931 - t2936 * t2995;
t2708 = t2926 * t2768 + t2922 * t2967;
t2709 = -t2922 * t2768 + t2926 * t2967;
t2723 = t2754 * t2936 + t2931 * t2995;
t2978 = t2709 * t2937 + t2723 * t2932;
t2674 = -t2923 * t2708 + t2927 * t2978;
t2692 = -t2709 * t2932 + t2723 * t2937;
t2986 = t2674 * t2938 + t2692 * t2933;
t2780 = -t2844 * t3009 - t3000;
t2782 = t2842 * t3009 + t2956;
t2751 = t2780 * t2930 + t2782 * t2935;
t2752 = t2780 * t2935 - t2782 * t2930;
t2800 = -t3034 - t3035;
t2968 = t2752 * t2931 - t2800 * t2936;
t2716 = t2926 * t2751 + t2922 * t2968;
t2717 = -t2922 * t2751 + t2926 * t2968;
t2738 = t2752 * t2936 + t2800 * t2931;
t2976 = t2717 * t2937 + t2738 * t2932;
t2679 = -t2923 * t2716 + t2927 * t2976;
t2700 = -t2717 * t2932 + t2738 * t2937;
t2984 = t2679 * t2938 + t2700 * t2933;
t2790 = t2947 - t3025;
t2805 = -t3033 - t3035;
t2766 = t2790 * t2935 + t2805 * t2930;
t2767 = -t2790 * t2930 + t2805 * t2935;
t2965 = t2767 * t2931 - t2779 * t2936;
t2728 = t2926 * t2766 + t2922 * t2965;
t2729 = -t2922 * t2766 + t2926 * t2965;
t2745 = t2767 * t2936 + t2779 * t2931;
t2972 = t2729 * t2937 + t2745 * t2932;
t2691 = -t2923 * t2728 + t2927 * t2972;
t2704 = -t2729 * t2932 + t2745 * t2937;
t2980 = t2691 * t2938 + t2704 * t2933;
t2791 = -t2947 - t3025;
t2811 = -t3033 - t3034;
t2769 = t2791 * t2930 + t2811 * t2935;
t2770 = t2791 * t2935 - t2811 * t2930;
t2964 = t2770 * t2931 + t2936 * t3001;
t2730 = t2926 * t2769 + t2922 * t2964;
t2731 = -t2922 * t2769 + t2926 * t2964;
t2748 = t2770 * t2936 - t2931 * t3001;
t2971 = t2731 * t2937 + t2748 * t2932;
t2694 = -t2923 * t2730 + t2927 * t2971;
t2707 = -t2731 * t2932 + t2748 * t2937;
t2979 = t2694 * t2938 + t2707 * t2933;
t2819 = -t3031 - t3032;
t2808 = t2996 - t3020;
t2810 = -t2829 + t3021;
t2960 = t2808 * t2931 + t2810 * t2936;
t2762 = t2926 * t2819 + t2922 * t2960;
t2763 = -t2922 * t2819 + t2926 * t2960;
t2778 = t2808 * t2936 - t2810 * t2931;
t2966 = t2763 * t2937 + t2778 * t2932;
t2725 = -t2923 * t2762 + t2927 * t2966;
t2742 = -t2763 * t2932 + t2778 * t2937;
t2973 = t2725 * t2938 + t2742 * t2933;
t2824 = t2864 - t3022;
t2828 = -t3030 - t3032;
t2957 = t2824 * t2936 + t2828 * t2931;
t2771 = t2926 * t2807 + t2922 * t2957;
t2772 = -t2922 * t2807 + t2926 * t2957;
t2798 = -t2824 * t2931 + t2828 * t2936;
t2963 = t2772 * t2937 + t2798 * t2932;
t2735 = -t2923 * t2771 + t2927 * t2963;
t2760 = -t2772 * t2932 + t2798 * t2937;
t2970 = t2735 * t2938 + t2760 * t2933;
t2823 = -t2864 - t3022;
t2834 = -t3030 - t3031;
t2958 = t2823 * t2931 + t2834 * t2936;
t2773 = t2922 * t2958 - t2926 * t2999;
t2774 = t2922 * t2999 + t2926 * t2958;
t2801 = t2823 * t2936 - t2834 * t2931;
t2962 = t2774 * t2937 + t2801 * t2932;
t2737 = -t2923 * t2773 + t2927 * t2962;
t2761 = -t2774 * t2932 + t2801 * t2937;
t2969 = t2737 * t2938 + t2761 * t2933;
t2839 = -t2923 * t2849 + t2873;
t2814 = t3007 - t3023;
t2959 = t2814 * t2937 + t2815 * t2932;
t2776 = -t2923 * t2839 + t2927 * t2959;
t2786 = -t2814 * t2932 + t2815 * t2937;
t2961 = t2776 * t2938 + t2786 * t2933;
t2918 = t2932 ^ 2;
t2919 = t2937 ^ 2;
t2894 = (-t2918 - t2919) * t3017;
t2866 = t2998 - t2887;
t2897 = t2915 * t3005;
t2867 = t2888 + t2897;
t2951 = t2866 * t2937 + t2867 * t2932;
t2831 = -t2923 * t2894 + t2927 * t2951;
t2840 = -t2866 * t2932 + t2867 * t2937;
t2955 = t2831 * t2938 + t2840 * t2933;
t2865 = t2998 + t2887;
t2879 = -t2918 * t3017 - t3029;
t2906 = t2932 * t2937 * t3017;
t2886 = t2906 - t2914;
t2949 = t2879 * t2937 + t2886 * t2932;
t2833 = -t2923 * t2865 + t2927 * t2949;
t2848 = -t2879 * t2932 + t2886 * t2937;
t2954 = t2833 * t2938 + t2848 * t2933;
t2868 = -t2888 + t2897;
t2885 = t2906 + t2914;
t2889 = -t2919 * t3017 - t3029;
t2948 = t2885 * t2937 + t2889 * t2932;
t2837 = -t2923 * t2868 + t2927 * t2948;
t2852 = -t2885 * t2932 + t2889 * t2937;
t2953 = t2837 * t2938 + t2852 * t2933;
t2952 = t2856 * t2938 + t2857 * t2933;
t2946 = qJDD(2) * t2938 - t2933 * t2939;
t2905 = -qJDD(2) * t2933 - t2938 * t2939;
t2893 = t2946 * t2928;
t2892 = t2905 * t2928;
t2891 = t2946 * t2924;
t2890 = t2905 * t2924;
t2836 = t2927 * t2868 + t2923 * t2948;
t2835 = -t2856 * t2933 + t2857 * t2938;
t2832 = t2927 * t2865 + t2923 * t2949;
t2830 = t2927 * t2894 + t2923 * t2951;
t2818 = -t2924 * t2881 + t2928 * t2952;
t2817 = t2928 * t2881 + t2924 * t2952;
t2816 = -t2837 * t2933 + t2852 * t2938;
t2812 = -t2833 * t2933 + t2848 * t2938;
t2806 = -t2831 * t2933 + t2840 * t2938;
t2797 = -t2924 * t2836 + t2928 * t2953;
t2796 = t2928 * t2836 + t2924 * t2953;
t2789 = -t2924 * t2832 + t2928 * t2954;
t2788 = t2928 * t2832 + t2924 * t2954;
t2785 = -t2924 * t2830 + t2928 * t2955;
t2784 = t2928 * t2830 + t2924 * t2955;
t2775 = t2927 * t2839 + t2923 * t2959;
t2755 = -t2776 * t2933 + t2786 * t2938;
t2736 = t2927 * t2773 + t2923 * t2962;
t2734 = t2927 * t2771 + t2923 * t2963;
t2733 = -t2924 * t2775 + t2928 * t2961;
t2732 = t2928 * t2775 + t2924 * t2961;
t2724 = t2927 * t2762 + t2923 * t2966;
t2715 = -t2737 * t2933 + t2761 * t2938;
t2710 = -t2735 * t2933 + t2760 * t2938;
t2703 = -t2725 * t2933 + t2742 * t2938;
t2699 = -t2924 * t2736 + t2928 * t2969;
t2698 = t2928 * t2736 + t2924 * t2969;
t2697 = -t2924 * t2734 + t2928 * t2970;
t2696 = t2928 * t2734 + t2924 * t2970;
t2693 = t2927 * t2730 + t2923 * t2971;
t2690 = t2927 * t2728 + t2923 * t2972;
t2687 = -t2924 * t2724 + t2928 * t2973;
t2686 = t2928 * t2724 + t2924 * t2973;
t2678 = t2927 * t2716 + t2923 * t2976;
t2673 = t2927 * t2708 + t2923 * t2978;
t2672 = -t2694 * t2933 + t2707 * t2938;
t2671 = -t2691 * t2933 + t2704 * t2938;
t2668 = -t2679 * t2933 + t2700 * t2938;
t2662 = -t2674 * t2933 + t2692 * t2938;
t2661 = -t2924 * t2693 + t2928 * t2979;
t2660 = t2928 * t2693 + t2924 * t2979;
t2659 = -t2924 * t2690 + t2928 * t2980;
t2658 = t2928 * t2690 + t2924 * t2980;
t2654 = t2927 * t2684 + t2923 * t2982;
t2652 = t2927 * t2680 + t2923 * t2983;
t2651 = -t2924 * t2678 + t2928 * t2984;
t2650 = t2928 * t2678 + t2924 * t2984;
t2647 = t2927 * t2675 + t2923 * t2985;
t2646 = -t2924 * t2673 + t2928 * t2986;
t2645 = t2928 * t2673 + t2924 * t2986;
t2644 = -t2655 * t2933 + t2670 * t2938;
t2643 = -t2653 * t2933 + t2669 * t2938;
t2640 = t2927 * t2664 + t2923 * t2987;
t2639 = -t2648 * t2933 + t2663 * t2938;
t2638 = -t2924 * t2654 + t2928 * t2989;
t2637 = t2928 * t2654 + t2924 * t2989;
t2636 = -t2924 * t2652 + t2928 * t2990;
t2635 = t2928 * t2652 + t2924 * t2990;
t2632 = -t2641 * t2933 + t2649 * t2938;
t2631 = -t2924 * t2647 + t2928 * t2991;
t2630 = t2928 * t2647 + t2924 * t2991;
t2628 = -t2924 * t2640 + t2928 * t2992;
t2627 = t2928 * t2640 + t2924 * t2992;
t2625 = t2927 * t2633 + t2923 * t2993;
t2624 = -t2626 * t2933 + t2629 * t2938;
t2623 = -t2924 * t2625 + t2928 * t2994;
t2622 = t2928 * t2625 + t2924 * t2994;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2907 * t2921 + t2908 * t2925, 0, 0, 0, 0, 0, 0, -t2893 * t2921 + t2905 * t2925, -t2892 * t2921 - t2925 * t2946, 0, -t2818 * t2921 + t2835 * t2925, 0, 0, 0, 0, 0, 0, -t2797 * t2921 + t2816 * t2925, -t2789 * t2921 + t2812 * t2925, -t2785 * t2921 + t2806 * t2925, -t2733 * t2921 + t2755 * t2925, 0, 0, 0, 0, 0, 0, -t2697 * t2921 + t2710 * t2925, -t2699 * t2921 + t2715 * t2925, -t2687 * t2921 + t2703 * t2925, -t2646 * t2921 + t2662 * t2925, 0, 0, 0, 0, 0, 0, -t2659 * t2921 + t2671 * t2925, -t2661 * t2921 + t2672 * t2925, -t2651 * t2921 + t2668 * t2925, -t2628 * t2921 + t2632 * t2925, 0, 0, 0, 0, 0, 0, -t2636 * t2921 + t2643 * t2925, -t2638 * t2921 + t2644 * t2925, -t2631 * t2921 + t2639 * t2925, -t2623 * t2921 + t2624 * t2925; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2907 * t2925 + t2908 * t2921, 0, 0, 0, 0, 0, 0, t2893 * t2925 + t2905 * t2921, t2892 * t2925 - t2921 * t2946, 0, t2818 * t2925 + t2835 * t2921, 0, 0, 0, 0, 0, 0, t2797 * t2925 + t2816 * t2921, t2789 * t2925 + t2812 * t2921, t2785 * t2925 + t2806 * t2921, t2733 * t2925 + t2755 * t2921, 0, 0, 0, 0, 0, 0, t2697 * t2925 + t2710 * t2921, t2699 * t2925 + t2715 * t2921, t2687 * t2925 + t2703 * t2921, t2646 * t2925 + t2662 * t2921, 0, 0, 0, 0, 0, 0, t2659 * t2925 + t2671 * t2921, t2661 * t2925 + t2672 * t2921, t2651 * t2925 + t2668 * t2921, t2628 * t2925 + t2632 * t2921, 0, 0, 0, 0, 0, 0, t2636 * t2925 + t2643 * t2921, t2638 * t2925 + t2644 * t2921, t2631 * t2925 + t2639 * t2921, t2623 * t2925 + t2624 * t2921; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2920, 0, 0, 0, 0, 0, 0, t2891, t2890, 0, t2817, 0, 0, 0, 0, 0, 0, t2796, t2788, t2784, t2732, 0, 0, 0, 0, 0, 0, t2696, t2698, t2686, t2645, 0, 0, 0, 0, 0, 0, t2658, t2660, t2650, t2627, 0, 0, 0, 0, 0, 0, t2635, t2637, t2630, t2622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2908, 0, 0, 0, 0, 0, 0, t2905, -t2946, 0, t2835, 0, 0, 0, 0, 0, 0, t2816, t2812, t2806, t2755, 0, 0, 0, 0, 0, 0, t2710, t2715, t2703, t2662, 0, 0, 0, 0, 0, 0, t2671, t2672, t2668, t2632, 0, 0, 0, 0, 0, 0, t2643, t2644, t2639, t2624; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2907, 0, 0, 0, 0, 0, 0, t2893, t2892, 0, t2818, 0, 0, 0, 0, 0, 0, t2797, t2789, t2785, t2733, 0, 0, 0, 0, 0, 0, t2697, t2699, t2687, t2646, 0, 0, 0, 0, 0, 0, t2659, t2661, t2651, t2628, 0, 0, 0, 0, 0, 0, t2636, t2638, t2631, t2623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2920, 0, 0, 0, 0, 0, 0, t2891, t2890, 0, t2817, 0, 0, 0, 0, 0, 0, t2796, t2788, t2784, t2732, 0, 0, 0, 0, 0, 0, t2696, t2698, t2686, t2645, 0, 0, 0, 0, 0, 0, t2658, t2660, t2650, t2627, 0, 0, 0, 0, 0, 0, t2635, t2637, t2630, t2622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2939, -qJDD(2), 0, t2857, 0, 0, 0, 0, 0, 0, t2852, t2848, t2840, t2786, 0, 0, 0, 0, 0, 0, t2760, t2761, t2742, t2692, 0, 0, 0, 0, 0, 0, t2704, t2707, t2700, t2649, 0, 0, 0, 0, 0, 0, t2669, t2670, t2663, t2629; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2939, 0, t2856, 0, 0, 0, 0, 0, 0, t2837, t2833, t2831, t2776, 0, 0, 0, 0, 0, 0, t2735, t2737, t2725, t2674, 0, 0, 0, 0, 0, 0, t2691, t2694, t2679, t2641, 0, 0, 0, 0, 0, 0, t2653, t2655, t2648, t2626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2881, 0, 0, 0, 0, 0, 0, t2836, t2832, t2830, t2775, 0, 0, 0, 0, 0, 0, t2734, t2736, t2724, t2673, 0, 0, 0, 0, 0, 0, t2690, t2693, t2678, t2640, 0, 0, 0, 0, 0, 0, t2652, t2654, t2647, t2625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2889, t2886, t2867, t2815, 0, 0, 0, 0, 0, 0, t2798, t2801, t2778, t2723, 0, 0, 0, 0, 0, 0, t2745, t2748, t2738, t2677, 0, 0, 0, 0, 0, 0, t2701, t2702, t2695, t2642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2885, t2879, t2866, t2814, 0, 0, 0, 0, 0, 0, t2772, t2774, t2763, t2709, 0, 0, 0, 0, 0, 0, t2729, t2731, t2717, t2665, 0, 0, 0, 0, 0, 0, t2681, t2685, t2676, t2634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2868, t2865, t2894, t2839, 0, 0, 0, 0, 0, 0, t2771, t2773, t2762, t2708, 0, 0, 0, 0, 0, 0, t2728, t2730, t2716, t2664, 0, 0, 0, 0, 0, 0, t2680, t2684, t2675, t2633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2828, t2823, t2808, t2754, 0, 0, 0, 0, 0, 0, t2767, t2770, t2752, t2689, 0, 0, 0, 0, 0, 0, t2720, t2722, t2712, t2657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2824, t2834, t2810, -t2995, 0, 0, 0, 0, 0, 0, -t2779, t3001, -t2800, -t2740, 0, 0, 0, 0, 0, 0, -t2743, -t2749, -t2726, -t2666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2807, -t2999, t2819, t2768, 0, 0, 0, 0, 0, 0, t2766, t2769, t2751, t2688, 0, 0, 0, 0, 0, 0, t2719, t2721, t2711, t2656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2805, t2791, t2780, t2714, 0, 0, 0, 0, 0, 0, t2744, t2750, t2727, t2667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2790, t2811, t2782, t2713, 0, 0, 0, 0, 0, 0, -t2756, -t2758, -t2777, -t2705; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2779, -t3001, t2800, t2740, 0, 0, 0, 0, 0, 0, t2743, t2749, t2726, t2666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2783, t2765, t2757, t2683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2764, t2787, t2759, t2682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2756, t2758, t2777, t2705;];
f_new_reg  = t1;
