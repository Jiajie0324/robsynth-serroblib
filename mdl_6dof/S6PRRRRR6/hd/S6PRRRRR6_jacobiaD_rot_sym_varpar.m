% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6PRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6PRRRRR6_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 23:23
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRRRRR6_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR6_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR6_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRRRRR6_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRRRRR6_jacobiaD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:35
	% EndTime: 2019-10-09 23:23:35
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:35
	% EndTime: 2019-10-09 23:23:35
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:35
	% EndTime: 2019-10-09 23:23:35
	% DurationCPUTime: 0.09s
	% Computational Cost: add. (46->7), mult. (159->21), div. (18->4), fcn. (175->5), ass. (0->15)
	t39 = cos(pkin(14));
	t41 = sin(qJ(2));
	t42 = cos(qJ(2));
	t45 = sin(pkin(14)) * cos(pkin(6));
	t37 = t39 * t42 - t41 * t45;
	t34 = 0.1e1 / t37 ^ 2;
	t49 = qJD(2) * t34;
	t36 = t39 * t41 + t42 * t45;
	t33 = t36 ^ 2;
	t30 = t33 * t34 + 0.1e1;
	t46 = t37 * t49;
	t47 = t36 / t37 * t49;
	t48 = (t33 * t47 + t36 * t46) / t30 ^ 2;
	t28 = 0.1e1 / t30;
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, -0.2e1 * t48 + 0.2e1 * (t28 * t46 + (t28 * t47 - t34 * t48) * t36) * t36, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:36
	% EndTime: 2019-10-09 23:23:36
	% DurationCPUTime: 0.70s
	% Computational Cost: add. (1326->63), mult. (4214->161), div. (275->12), fcn. (5416->13), ass. (0->79)
	t164 = sin(pkin(7));
	t162 = t164 ^ 2;
	t206 = 0.2e1 * t162;
	t166 = cos(pkin(14));
	t163 = sin(pkin(14));
	t170 = sin(qJ(2));
	t168 = cos(pkin(6));
	t172 = cos(qJ(2));
	t190 = t168 * t172;
	t182 = -t163 * t170 + t166 * t190;
	t165 = sin(pkin(6));
	t167 = cos(pkin(7));
	t195 = t165 * t167;
	t146 = t182 * t164 + t166 * t195;
	t196 = t164 * t172;
	t156 = -t165 * t196 + t168 * t167;
	t141 = atan2(t146, t156);
	t136 = sin(t141);
	t137 = cos(t141);
	t123 = t136 * t146 + t137 * t156;
	t120 = 0.1e1 / t123;
	t169 = sin(qJ(3));
	t171 = cos(qJ(3));
	t191 = t168 * t170;
	t180 = t163 * t191 - t166 * t172;
	t181 = t163 * t190 + t166 * t170;
	t187 = t163 * t164 * t165;
	t183 = -t167 * t181 + t187;
	t135 = t183 * t169 - t171 * t180;
	t131 = 0.1e1 / t135;
	t153 = 0.1e1 / t156;
	t121 = 0.1e1 / t123 ^ 2;
	t132 = 0.1e1 / t135 ^ 2;
	t154 = 0.1e1 / t156 ^ 2;
	t147 = t163 * t195 + t164 * t181;
	t145 = t147 ^ 2;
	t119 = t121 * t145 + 0.1e1;
	t152 = t180 * qJD(2);
	t157 = -t163 * t172 - t166 * t191;
	t150 = t157 * qJD(2);
	t194 = t165 * t170;
	t198 = t146 * t154;
	t185 = t194 * t198;
	t144 = t146 ^ 2;
	t140 = t144 * t154 + 0.1e1;
	t138 = 0.1e1 / t140;
	t199 = t138 * t164;
	t115 = (-qJD(2) * t185 + t150 * t153) * t199;
	t184 = -t136 * t156 + t137 * t146;
	t189 = qJD(2) * t165;
	t186 = t170 * t189;
	t112 = (t136 * t150 + t137 * t186) * t164 + t184 * t115;
	t204 = t112 * t120 * t121;
	t205 = (-t121 * t147 * t152 * t164 - t145 * t204) / t119 ^ 2;
	t192 = t167 * t171;
	t197 = t180 * t169;
	t134 = -t171 * t187 + t181 * t192 - t197;
	t130 = t134 ^ 2;
	t127 = t130 * t132 + 0.1e1;
	t151 = t181 * qJD(2);
	t193 = t167 * t169;
	t129 = t152 * t193 - t151 * t171 + (t183 * t171 + t197) * qJD(3);
	t201 = t129 * t131 * t132;
	t128 = t135 * qJD(3) - t151 * t169 - t152 * t192;
	t202 = t128 * t132;
	t203 = (-t130 * t201 + t134 * t202) / t127 ^ 2;
	t143 = -t171 * t181 + t180 * t193;
	t200 = t134 * t143;
	t188 = t154 * t162 * t170;
	t142 = -t169 * t181 - t180 * t192;
	t179 = -t153 * t157 + t185;
	t155 = t153 * t154;
	t149 = t182 * qJD(2);
	t125 = 0.1e1 / t127;
	t117 = 0.1e1 / t119;
	t116 = t179 * t199;
	t113 = (t136 * t157 + t137 * t194) * t164 - t184 * t116;
	t111 = t179 / t140 ^ 2 * (-t144 * t155 * t186 + t150 * t198) * t206 + (-t149 * t153 * t164 + (-t150 * t188 + (-t157 * t188 + (t155 * t165 * t170 ^ 2 * t206 - t154 * t196) * t146) * qJD(2)) * t165) * t138;
	t1 = [0, t111, 0, 0, 0, 0; 0, (-(t123 * t116 * t115 + t184 * t111) * t121 * t117 + 0.2e1 * (t117 * t204 + t121 * t205) * t113) * t147 + (0.2e1 * t180 * t120 * t205 + (-t151 * t120 + (t180 * t112 + t113 * t152 + (-(t115 * t157 - t116 * t150 + t172 * t189) * t137 - (-t149 + (qJD(2) * t116 - t115) * t194) * t136) * t147) * t121) * t117) * t164, 0, 0, 0, 0; 0, 0.2e1 * (-t131 * t142 + t132 * t200) * t203 + ((t143 * qJD(3) - t151 * t192 + t152 * t169) * t131 + 0.2e1 * t200 * t201 + (-t142 * t129 - (-t142 * qJD(3) + t151 * t193 + t152 * t171) * t134 - t143 * t128) * t132) * t125, -0.2e1 * t203 + 0.2e1 * (t125 * t202 + (-t125 * t201 - t132 * t203) * t134) * t134, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:37
	% EndTime: 2019-10-09 23:23:39
	% DurationCPUTime: 2.64s
	% Computational Cost: add. (8706->151), mult. (26595->310), div. (532->12), fcn. (34071->17), ass. (0->131)
	t327 = sin(pkin(8));
	t328 = sin(pkin(7));
	t330 = cos(pkin(14));
	t331 = cos(pkin(8));
	t326 = sin(pkin(14));
	t336 = sin(qJ(2));
	t333 = cos(pkin(6));
	t339 = cos(qJ(2));
	t375 = t333 * t339;
	t353 = -t326 * t336 + t330 * t375;
	t329 = sin(pkin(6));
	t332 = cos(pkin(7));
	t381 = t329 * t332;
	t376 = t333 * t336;
	t321 = t326 * t339 + t330 * t376;
	t335 = sin(qJ(3));
	t338 = cos(qJ(3));
	t382 = t329 * t328;
	t347 = -t330 * t382 + t353 * t332;
	t401 = -t321 * t335 + t347 * t338;
	t294 = t401 * t327 - (-t353 * t328 - t330 * t381) * t331;
	t290 = t294 ^ 2;
	t371 = t338 * t339;
	t374 = t335 * t336;
	t350 = t332 * t371 - t374;
	t383 = t328 * t333;
	t305 = -(t350 * t329 + t338 * t383) * t327 + (t333 * t332 - t339 * t382) * t331;
	t303 = 0.1e1 / t305 ^ 2;
	t278 = t290 * t303 + 0.1e1;
	t306 = -t321 * t338 - t347 * t335;
	t317 = t353 * qJD(2);
	t318 = t321 * qJD(2);
	t370 = qJD(3) * t327;
	t377 = t332 * t338;
	t384 = t328 * t331;
	t280 = (-t317 * t335 - t318 * t377) * t327 - t318 * t384 + t306 * t370;
	t372 = t336 * t338;
	t373 = t335 * t339;
	t346 = -(-t332 * t372 - t373) * t327 + t336 * t384;
	t349 = -t332 * t373 - t372;
	t364 = qJD(3) * t383;
	t296 = t335 * t327 * t364 + (t346 * qJD(2) - t349 * t370) * t329;
	t302 = 0.1e1 / t305;
	t393 = t296 * t302 * t303;
	t394 = t294 * t303;
	t402 = (t280 * t394 - t290 * t393) / t278 ^ 2;
	t351 = t326 * t376 - t330 * t339;
	t352 = t326 * t375 + t330 * t336;
	t354 = t326 * t382 - t332 * t352;
	t308 = t354 * t335 - t338 * t351;
	t279 = atan2(t294, t305);
	t274 = sin(t279);
	t275 = cos(t279);
	t262 = t274 * t294 + t275 * t305;
	t259 = 0.1e1 / t262;
	t334 = sin(qJ(4));
	t337 = cos(qJ(4));
	t389 = t351 * t335;
	t307 = t354 * t338 + t389;
	t315 = t326 * t381 + t328 * t352;
	t360 = t307 * t331 + t315 * t327;
	t273 = t308 * t337 + t360 * t334;
	t269 = 0.1e1 / t273;
	t260 = 0.1e1 / t262 ^ 2;
	t270 = 0.1e1 / t273 ^ 2;
	t276 = 0.1e1 / t278;
	t252 = (t280 * t302 - t296 * t394) * t276;
	t361 = -t274 * t305 + t275 * t294;
	t248 = t361 * t252 + t274 * t280 + t275 * t296;
	t400 = t248 * t259 * t260;
	t319 = t352 * qJD(2);
	t320 = t351 * qJD(2);
	t378 = t332 * t335;
	t289 = t320 * t378 + qJD(3) * t389 + (t354 * qJD(3) - t319) * t338;
	t288 = -t308 * qJD(3) + t319 * t335 + t320 * t377;
	t386 = t327 * t328;
	t359 = -t288 * t331 + t320 * t386;
	t263 = t273 * qJD(4) + t289 * t334 + t359 * t337;
	t379 = t331 * t337;
	t385 = t327 * t337;
	t392 = t308 * t334;
	t272 = -t307 * t379 - t315 * t385 + t392;
	t268 = t272 ^ 2;
	t267 = t268 * t270 + 0.1e1;
	t396 = t270 * t272;
	t264 = t289 * t337 - t359 * t334 + (t360 * t337 - t392) * qJD(4);
	t397 = t264 * t269 * t270;
	t399 = (t263 * t396 - t268 * t397) / t267 ^ 2;
	t295 = -t307 * t327 + t315 * t331;
	t398 = t260 * t295;
	t281 = -t288 * t327 - t320 * t384;
	t395 = t281 * t260;
	t355 = t338 * t352 - t351 * t378;
	t391 = t355 * t334;
	t380 = t331 * t334;
	t291 = t295 ^ 2;
	t257 = t260 * t291 + 0.1e1;
	t369 = 0.2e1 * (-t291 * t400 + t295 * t395) / t257 ^ 2;
	t368 = 0.2e1 * t399;
	t367 = t294 * t393;
	t366 = t328 * t385;
	t363 = 0.2e1 * t272 * t397;
	t362 = 0.2e1 * t295 * t400;
	t297 = (-t321 * t377 - t353 * t335) * t327 - t321 * t384;
	t311 = t346 * t329;
	t358 = -t297 * t302 + t311 * t394;
	t314 = t349 * t329 - t335 * t383;
	t357 = t302 * t306 + t314 * t394;
	t285 = t307 * t334 + t308 * t379;
	t286 = t307 * t337 - t308 * t380;
	t309 = t335 * t352 + t351 * t377;
	t356 = t309 * t331 - t351 * t386;
	t348 = t332 * t374 - t371;
	t284 = t356 * t334 - t337 * t355;
	t301 = -t338 * t364 + (t348 * qJD(2) - t350 * qJD(3)) * t329;
	t299 = (-t348 * t370 + (t350 * t327 + t339 * t384) * qJD(2)) * t329;
	t298 = -t309 * t327 - t351 * t384;
	t293 = t309 * qJD(3) + t319 * t378 + t320 * t338;
	t292 = t355 * qJD(3) + t319 * t377 - t320 * t335;
	t287 = -t401 * qJD(3) - t317 * t338 + t318 * t378;
	t283 = -t356 * t337 - t391;
	t282 = (-t317 * t377 + t318 * t335 + (t321 * t378 - t353 * t338) * qJD(3)) * t327 - t317 * t384;
	t265 = 0.1e1 / t267;
	t255 = 0.1e1 / t257;
	t254 = t357 * t327 * t276;
	t253 = t358 * t276;
	t250 = (t274 * t306 - t275 * t314) * t327 + t361 * t254;
	t249 = -t361 * t253 + t274 * t297 + t275 * t311;
	t247 = (-0.2e1 * t357 * t402 + (-0.2e1 * t314 * t367 + t287 * t302 + (t280 * t314 + t294 * t301 - t296 * t306) * t303) * t276) * t327;
	t246 = 0.2e1 * t358 * t402 + (0.2e1 * t311 * t367 + t282 * t302 + (-t280 * t311 - t294 * t299 - t296 * t297) * t303) * t276;
	t1 = [0, t246, t247, 0, 0, 0; 0, (t249 * t398 - t259 * t298) * t369 + ((-t292 * t327 - t319 * t384) * t259 + t249 * t362 + (-t298 * t248 - t249 * t281 + (-(t246 * t294 - t253 * t280 + t299 + (t253 * t305 + t297) * t252) * t275 - (-t246 * t305 + t253 * t296 + t282 + (t253 * t294 - t311) * t252) * t274) * t295) * t260) * t255, (-t259 * t308 * t327 + t250 * t398) * t369 + (-(t361 * t247 + (-t262 * t252 - t274 * t296 + t275 * t280) * t254) * t398 + (t362 - t395) * t250 + (t289 * t259 + (-t308 * t248 - (t274 * t287 - t275 * t301 + (t274 * t314 + t275 * t306) * t252) * t295) * t260) * t327) * t255, 0, 0, 0; 0, (-t269 * t283 + t284 * t396) * t368 + ((-t292 * t379 + t293 * t334 + t319 * t366) * t269 + t284 * t363 + (-t283 * t264 - (-t319 * t334 * t386 + t292 * t380 + t293 * t337) * t272 - t284 * t263) * t270 + (t284 * t269 - (t309 * t379 - t351 * t366 + t391) * t396) * qJD(4)) * t265, (-t269 * t285 + t286 * t396) * t368 + ((t286 * qJD(4) + t288 * t334 + t289 * t379) * t269 + t286 * t363 + (-t285 * t264 - (-t285 * qJD(4) + t288 * t337 - t289 * t380) * t272 - t286 * t263) * t270) * t265, -0.2e1 * t399 + 0.2e1 * (t263 * t270 * t265 + (-t265 * t397 - t270 * t399) * t272) * t272, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:37
	% EndTime: 2019-10-09 23:23:43
	% DurationCPUTime: 6.09s
	% Computational Cost: add. (24618->237), mult. (75913->438), div. (795->12), fcn. (96601->19), ass. (0->183)
	t573 = cos(pkin(14));
	t574 = cos(pkin(6));
	t525 = t574 * t573;
	t572 = sin(pkin(14));
	t575 = sin(qJ(2));
	t576 = cos(qJ(2));
	t502 = -t576 * t525 + t572 * t575;
	t463 = t502 * qJD(2);
	t503 = t575 * t525 + t572 * t576;
	t464 = t503 * qJD(2);
	t481 = cos(qJ(3));
	t478 = sin(qJ(3));
	t472 = sin(pkin(7));
	t475 = cos(pkin(7));
	t473 = sin(pkin(6));
	t533 = t473 * t573;
	t498 = -t472 * t533 - t502 * t475;
	t493 = -t503 * t478 + t498 * t481;
	t549 = t475 * t478;
	t429 = t493 * qJD(3) - t463 * t481 - t464 * t549;
	t471 = sin(pkin(8));
	t497 = (t502 * t472 - t475 * t533) * t471;
	t584 = qJD(4) * t497 + t429;
	t477 = sin(qJ(4));
	t480 = cos(qJ(4));
	t449 = t498 * t478 + t503 * t481;
	t548 = t475 * t481;
	t489 = -t449 * qJD(3) + t463 * t478 - t464 * t548;
	t491 = qJD(4) * t493;
	t583 = t489 * t477 + t480 * t491;
	t474 = cos(pkin(8));
	t582 = t493 * t474 + t497;
	t501 = t475 * t503;
	t495 = t502 * t478 - t481 * t501;
	t554 = t472 * t471;
	t581 = t495 * t474 + t503 * t554;
	t535 = t575 * t481;
	t538 = t576 * t478;
	t508 = -t475 * t535 - t538;
	t553 = t472 * t473;
	t523 = t575 * t471 * t553;
	t580 = t508 * t473 * t474 + t523;
	t539 = t480 * t554;
	t544 = t449 * qJD(4);
	t550 = t474 * t480;
	t551 = t474 * t477;
	t384 = -t464 * t539 + t584 * t477 + t480 * t544 - t489 * t550 + t491 * t551;
	t414 = t449 * t477 - t582 * t480;
	t412 = t414 ^ 2;
	t511 = t475 * t538 + t535;
	t531 = t574 * t472;
	t459 = t511 * t473 + t478 * t531;
	t536 = t575 * t478;
	t537 = t576 * t481;
	t510 = t475 * t537 - t536;
	t458 = t510 * t473 + t481 * t531;
	t527 = t576 * t553;
	t521 = t458 * t474 + (t574 * t475 - t527) * t471;
	t577 = -t459 * t477 + t521 * t480;
	t434 = 0.1e1 / t577 ^ 2;
	t402 = t412 * t434 + 0.1e1;
	t563 = t414 * t434;
	t437 = t459 * t480 + t521 * t477;
	t509 = t475 * t536 - t537;
	t526 = qJD(3) * t531;
	t448 = t481 * t526 + (-t509 * qJD(2) + t510 * qJD(3)) * t473;
	t447 = -t478 * t526 + (t508 * qJD(2) - t511 * qJD(3)) * t473;
	t506 = qJD(2) * t523 + t447 * t474;
	t404 = t437 * qJD(4) + t448 * t477 - t506 * t480;
	t433 = 0.1e1 / t577;
	t564 = t404 * t433 * t434;
	t579 = -0.2e1 * (t384 * t563 + t412 * t564) / t402 ^ 2;
	t524 = t574 * t572;
	t469 = -t575 * t524 + t573 * t576;
	t504 = t576 * t524 + t573 * t575;
	t532 = t473 * t572;
	t512 = t472 * t532 - t475 * t504;
	t451 = t469 * t481 + t512 * t478;
	t514 = t469 * t549 + t481 * t504;
	t454 = -t469 * t548 + t478 * t504;
	t515 = t454 * t474 + t469 * t554;
	t578 = t477 * t514 + t515 * t480;
	t403 = atan2(-t414, -t577);
	t398 = sin(t403);
	t399 = cos(t403);
	t380 = -t398 * t414 - t399 * t577;
	t377 = 0.1e1 / t380;
	t558 = t469 * t478;
	t450 = t512 * t481 - t558;
	t513 = t472 * t504 + t475 * t532;
	t507 = t513 * t471;
	t505 = t450 * t474 + t507;
	t418 = t451 * t480 + t505 * t477;
	t440 = -t450 * t471 + t513 * t474;
	t476 = sin(qJ(5));
	t479 = cos(qJ(5));
	t397 = t418 * t479 + t440 * t476;
	t393 = 0.1e1 / t397;
	t378 = 0.1e1 / t380 ^ 2;
	t394 = 0.1e1 / t397 ^ 2;
	t400 = 0.1e1 / t402;
	t367 = (t384 * t433 + t404 * t563) * t400;
	t522 = t398 * t577 - t399 * t414;
	t362 = t522 * t367 - t398 * t384 + t399 * t404;
	t571 = t362 * t377 * t378;
	t465 = t504 * qJD(2);
	t466 = t469 * qJD(2);
	t430 = -t451 * qJD(3) + t465 * t478 - t466 * t548;
	t431 = -t466 * t549 - qJD(3) * t558 + (t512 * qJD(3) - t465) * t481;
	t562 = t451 * t477;
	t387 = t431 * t480 + (t430 * t474 + t466 * t554) * t477 + (t505 * t480 - t562) * qJD(4);
	t552 = t472 * t474;
	t419 = -t430 * t471 + t466 * t552;
	t375 = t397 * qJD(5) + t387 * t476 - t419 * t479;
	t396 = t418 * t476 - t440 * t479;
	t392 = t396 ^ 2;
	t383 = t392 * t394 + 0.1e1;
	t567 = t394 * t396;
	t545 = qJD(5) * t396;
	t376 = t387 * t479 + t419 * t476 - t545;
	t569 = t376 * t393 * t394;
	t570 = (t375 * t567 - t392 * t569) / t383 ^ 2;
	t417 = -t450 * t550 - t480 * t507 + t562;
	t568 = t378 * t417;
	t566 = t398 * t417;
	t565 = t399 * t417;
	t556 = t471 * t476;
	t555 = t471 * t479;
	t547 = qJD(4) * t477;
	t546 = qJD(4) * t480;
	t413 = t417 ^ 2;
	t374 = t413 * t378 + 0.1e1;
	t386 = t418 * qJD(4) - t430 * t550 + t431 * t477 - t466 * t539;
	t543 = 0.2e1 * (t386 * t568 - t413 * t571) / t374 ^ 2;
	t542 = -0.2e1 * t570;
	t541 = 0.2e1 * t570;
	t540 = t396 * t569;
	t534 = t477 * t544;
	t530 = 0.2e1 * t417 * t571;
	t529 = 0.2e1 * t540;
	t528 = 0.2e1 * t414 * t564;
	t423 = t515 * t477 - t480 * t514;
	t442 = -t454 * t471 + t469 * t552;
	t408 = t423 * t479 + t442 * t476;
	t407 = t423 * t476 - t442 * t479;
	t520 = -t476 * t393 + t479 * t567;
	t416 = t449 * t480 + t582 * t477;
	t519 = t416 * t433 + t437 * t563;
	t453 = -t478 * t501 - t502 * t481;
	t421 = t453 * t477 - t581 * t480;
	t461 = t509 * t473;
	t443 = -t461 * t477 - t580 * t480;
	t518 = t421 * t433 + t443 * t563;
	t424 = t449 * t550 + t493 * t477;
	t441 = t458 * t477 + t459 * t550;
	t517 = t424 * t433 + t441 * t563;
	t426 = t450 * t480 - t451 * t551;
	t516 = -t426 * t476 + t451 * t555;
	t411 = t426 * t479 + t451 * t556;
	t425 = t450 * t477 + t451 * t550;
	t439 = t454 * qJD(3) + t465 * t549 - t466 * t481;
	t438 = t514 * qJD(3) + t465 * t548 + t466 * t478;
	t420 = -t438 * t471 - t465 * t552;
	t409 = -qJD(2) * t471 * t480 * t527 - t461 * t546 + t580 * t547 + ((-t511 * qJD(2) + t508 * qJD(3)) * t477 - (-t510 * qJD(2) + t509 * qJD(3)) * t550) * t473;
	t406 = t448 * t550 + t447 * t477 + (t458 * t480 - t459 * t551) * qJD(4);
	t405 = t577 * qJD(4) + t448 * t480 + t506 * t477;
	t391 = -t425 * qJD(4) + t430 * t480 - t431 * t551;
	t390 = t429 * t550 - t474 * t534 + t583;
	t389 = t439 * t480 + (t438 * t474 - t465 * t554) * t477 + t578 * qJD(4);
	t388 = (t495 * qJD(3) + t463 * t549 - t464 * t481) * t477 + t453 * t546 - (-t453 * qJD(3) + t463 * t548 + t464 * t478) * t550 + t463 * t539 + t581 * t547;
	t385 = t464 * t477 * t554 + t583 * t474 + t584 * t480 - t534;
	t381 = 0.1e1 / t383;
	t372 = 0.1e1 / t374;
	t371 = t518 * t400;
	t370 = t517 * t400;
	t369 = t519 * t400;
	t365 = t522 * t371 - t398 * t421 + t399 * t443;
	t364 = t522 * t370 - t398 * t424 + t399 * t441;
	t363 = t522 * t369 - t398 * t416 + t399 * t437;
	t361 = t518 * t579 + (t443 * t528 + t388 * t433 + (t384 * t443 + t404 * t421 + t409 * t414) * t434) * t400;
	t360 = t517 * t579 + (t441 * t528 + t390 * t433 + (t384 * t441 + t404 * t424 + t406 * t414) * t434) * t400;
	t358 = t519 * t579 + (t437 * t528 + t385 * t433 + (t384 * t437 + t404 * t416 + t405 * t414) * t434) * t400;
	t1 = [0, t361, t360, t358, 0, 0; 0, (t365 * t568 + t377 * t578) * t543 + (t365 * t530 + (t578 * t362 - t365 * t386 - (-t361 * t414 - t371 * t384 + t409 + (t371 * t577 - t421) * t367) * t565 - (t361 * t577 - t371 * t404 - t388 + (t371 * t414 - t443) * t367) * t566) * t378 + (t423 * qJD(4) - t438 * t550 + t439 * t477 + t465 * t539) * t377) * t372, (t364 * t568 - t377 * t425) * t543 + ((t426 * qJD(4) + t430 * t477 + t431 * t550) * t377 + t364 * t530 + (-t425 * t362 - t364 * t386 - (-t360 * t414 - t370 * t384 + t406 + (t370 * t577 - t424) * t367) * t565 - (t360 * t577 - t370 * t404 - t390 + (t370 * t414 - t441) * t367) * t566) * t378) * t372, (t363 * t568 - t377 * t418) * t543 + (t363 * t530 + t387 * t377 + (-t418 * t362 - t363 * t386 - (-t358 * t414 - t369 * t384 + t405 + (t369 * t577 - t416) * t367) * t565 - (t358 * t577 - t369 * t404 - t385 + (t369 * t414 - t437) * t367) * t566) * t378) * t372, 0, 0; 0, (-t393 * t407 + t408 * t567) * t541 + ((t408 * qJD(5) + t389 * t476 - t420 * t479) * t393 + t408 * t529 + (-t407 * t376 - (-t407 * qJD(5) + t389 * t479 + t420 * t476) * t396 - t408 * t375) * t394) * t381, (t393 * t516 + t411 * t567) * t541 + ((t411 * qJD(5) + t391 * t476 - t431 * t555) * t393 + t411 * t529 + (t516 * t376 - (t516 * qJD(5) + t391 * t479 + t431 * t556) * t396 - t411 * t375) * t394) * t381, t520 * t417 * t542 + (t520 * t386 + ((-qJD(5) * t393 - 0.2e1 * t540) * t479 + (t375 * t479 + (t376 - t545) * t476) * t394) * t417) * t381, t542 + 0.2e1 * (t375 * t394 * t381 + (-t381 * t569 - t394 * t570) * t396) * t396, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:39
	% EndTime: 2019-10-09 23:23:49
	% DurationCPUTime: 11.14s
	% Computational Cost: add. (57493->343), mult. (172957->625), div. (1073->12), fcn. (221971->21), ass. (0->251)
	t619 = cos(pkin(7));
	t623 = sin(qJ(3));
	t752 = cos(pkin(14));
	t753 = cos(pkin(6));
	t694 = t753 * t752;
	t750 = sin(pkin(14));
	t754 = sin(qJ(2));
	t755 = cos(qJ(2));
	t667 = -t755 * t694 + t750 * t754;
	t663 = t667 * t623;
	t627 = cos(qJ(3));
	t668 = t754 * t694 + t750 * t755;
	t664 = t668 * t627;
	t617 = sin(pkin(6));
	t706 = t617 * t752;
	t751 = sin(pkin(7));
	t687 = t751 * t706;
	t590 = -t619 * t663 - t623 * t687 + t664;
	t622 = sin(qJ(4));
	t626 = cos(qJ(4));
	t618 = cos(pkin(8));
	t656 = -t667 * t619 - t687;
	t665 = t668 * t623;
	t645 = -t656 * t627 + t665;
	t616 = sin(pkin(8));
	t655 = -t619 * t706 + t667 * t751;
	t653 = t655 * t616;
	t635 = -t645 * t618 + t653;
	t556 = t590 * t626 + t635 * t622;
	t621 = sin(qJ(5));
	t625 = cos(qJ(5));
	t606 = t668 * qJD(2);
	t605 = t667 * qJD(2);
	t726 = t619 * t627;
	t641 = (-t656 * t623 - t664) * qJD(3) + t605 * t623 - t606 * t726;
	t704 = t618 * t751;
	t637 = t606 * t704 - t641 * t616;
	t720 = qJD(5) * t625;
	t636 = t645 * t616 + t655 * t618;
	t644 = qJD(4) * t645;
	t707 = t616 * t751;
	t699 = t622 * t707;
	t723 = qJD(4) * t622;
	t728 = t618 * t626;
	t729 = t618 * t622;
	t662 = t667 * t627;
	t734 = t606 * t623;
	t571 = -t605 * t627 - t734 * t619 + (-t662 * t619 - t627 * t687 - t665) * qJD(3);
	t759 = qJD(4) * t653 + t571;
	t761 = qJD(5) * t636 - t590 * t723 + t606 * t699 + t759 * t626 + t641 * t729 - t644 * t728;
	t496 = t556 * t720 + t761 * t621 - t637 * t625;
	t712 = t754 * t627;
	t715 = t755 * t623;
	t675 = t619 * t715 + t712;
	t692 = t751 * t753;
	t688 = t623 * t692;
	t600 = t675 * t617 + t688;
	t713 = t754 * t623;
	t714 = t755 * t627;
	t674 = t619 * t714 - t713;
	t599 = t674 * t617 + t627 * t692;
	t697 = t755 * t751;
	t609 = -t617 * t697 + t753 * t619;
	t690 = t599 * t618 + t609 * t616;
	t576 = -t600 * t622 + t690 * t626;
	t700 = t619 * t713;
	t716 = t617 * t755;
	t588 = (qJD(2) * t716 + (t619 * t716 + t692) * qJD(3)) * t627 + (-qJD(2) * t700 - qJD(3) * t713) * t617;
	t672 = -t619 * t712 - t715;
	t587 = -qJD(3) * t688 + (t672 * qJD(2) - t675 * qJD(3)) * t617;
	t696 = t751 * t754;
	t689 = t617 * t696;
	t679 = qJD(2) * t689;
	t670 = t587 * t618 + t616 * t679;
	t542 = t576 * qJD(4) + t588 * t626 + t670 * t622;
	t577 = t600 * t626 + t690 * t622;
	t589 = -t599 * t616 + t609 * t618;
	t554 = t577 * t625 + t589 * t621;
	t581 = -t587 * t616 + t618 * t679;
	t504 = t554 * qJD(5) + t542 * t621 - t581 * t625;
	t536 = t556 * t621 - t636 * t625;
	t534 = t536 ^ 2;
	t553 = t577 * t621 - t589 * t625;
	t551 = 0.1e1 / t553 ^ 2;
	t516 = t534 * t551 + 0.1e1;
	t514 = 0.1e1 / t516;
	t550 = 0.1e1 / t553;
	t739 = t536 * t551;
	t478 = (-t496 * t550 + t504 * t739) * t514;
	t517 = atan2(-t536, t553);
	t512 = sin(t517);
	t513 = cos(t517);
	t691 = -t512 * t553 - t513 * t536;
	t472 = t691 * t478 - t496 * t512 + t504 * t513;
	t492 = -t512 * t536 + t513 * t553;
	t489 = 0.1e1 / t492;
	t490 = 0.1e1 / t492 ^ 2;
	t763 = t472 * t489 * t490;
	t693 = t753 * t750;
	t610 = -t754 * t693 + t752 * t755;
	t669 = t755 * t693 + t752 * t754;
	t705 = t617 * t750;
	t658 = -t669 * t619 + t751 * t705;
	t591 = t610 * t627 + t658 * t623;
	t733 = t610 * t623;
	t650 = -t658 * t627 + t733;
	t657 = t619 * t705 + t669 * t751;
	t654 = t657 * t616;
	t558 = t591 * t626 + (-t650 * t618 + t654) * t622;
	t639 = t650 * t616 + t657 * t618;
	t539 = t558 * t621 - t639 * t625;
	t703 = 0.2e1 * t539 * t763;
	t555 = -t590 * t622 + t635 * t626;
	t682 = -t550 * t555 + t576 * t739;
	t762 = t621 * t682;
	t607 = t669 * qJD(2);
	t608 = t610 * qJD(2);
	t572 = -t591 * qJD(3) + t607 * t623 - t608 * t726;
	t648 = qJD(4) * t650;
	t646 = t626 * t648;
	t709 = t591 * t723;
	t727 = t619 * t623;
	t573 = -t608 * t727 - qJD(3) * t733 + (t658 * qJD(3) - t607) * t627;
	t758 = qJD(4) * t654 + t573;
	t521 = t572 * t729 + t608 * t699 - t618 * t646 + t758 * t626 - t709;
	t760 = qJD(5) * t639 + t521;
	t757 = t622 * t644 + t641 * t626;
	t596 = -t610 * t727 - t669 * t627;
	t595 = -t610 * t726 + t669 * t623;
	t676 = t595 * t618 + t610 * t707;
	t756 = -t596 * t622 + t676 * t626;
	t540 = t558 * t625 + t639 * t621;
	t649 = t650 * t626;
	t557 = t591 * t622 + t618 * t649 - t626 * t654;
	t620 = sin(qJ(6));
	t624 = cos(qJ(6));
	t511 = t540 * t624 + t557 * t620;
	t507 = 0.1e1 / t511;
	t508 = 0.1e1 / t511 ^ 2;
	t535 = t539 ^ 2;
	t488 = t490 * t535 + 0.1e1;
	t678 = -t572 * t616 + t608 * t704;
	t498 = t558 * t720 + t760 * t621 - t678 * t625;
	t744 = t498 * t490;
	t749 = 0.2e1 * (-t535 * t763 + t539 * t744) / t488 ^ 2;
	t721 = qJD(5) * t621;
	t499 = -t558 * t721 + t678 * t621 + t760 * t625;
	t647 = t622 * t648;
	t698 = t626 * t707;
	t722 = qJD(4) * t626;
	t708 = t591 * t722;
	t520 = -t572 * t728 - t608 * t698 - t618 * t647 + t758 * t622 + t708;
	t484 = t511 * qJD(6) + t499 * t620 - t520 * t624;
	t510 = t540 * t620 - t557 * t624;
	t506 = t510 ^ 2;
	t495 = t506 * t508 + 0.1e1;
	t742 = t508 * t510;
	t719 = qJD(6) * t510;
	t485 = t499 * t624 + t520 * t620 - t719;
	t746 = t485 * t507 * t508;
	t748 = 0.2e1 * (t484 * t742 - t506 * t746) / t495 ^ 2;
	t743 = t504 * t550 * t551;
	t747 = 0.2e1 * (t496 * t739 - t534 * t743) / t516 ^ 2;
	t745 = t490 * t539;
	t741 = t512 * t539;
	t740 = t513 * t539;
	t738 = t557 * t621;
	t737 = t557 * t625;
	t731 = t616 * t621;
	t730 = t616 * t625;
	t725 = t620 * t507;
	t724 = t624 * t510;
	t717 = t510 * t746;
	t711 = t618 * t722;
	t710 = t590 * t722;
	t702 = -0.2e1 * t536 * t743;
	t701 = 0.2e1 * t717;
	t695 = qJD(6) * t737 + t521;
	t564 = t596 * t626 + t676 * t622;
	t584 = -t595 * t616 + t610 * t704;
	t545 = t564 * t625 + t584 * t621;
	t529 = t545 * t624 - t620 * t756;
	t528 = t545 * t620 + t624 * t756;
	t567 = -t591 * t729 - t649;
	t548 = t567 * t625 + t591 * t731;
	t566 = t591 * t728 - t650 * t622;
	t533 = t548 * t624 + t566 * t620;
	t532 = t548 * t620 - t566 * t624;
	t544 = t564 * t621 - t584 * t625;
	t686 = t508 * t724 - t725;
	t538 = t556 * t625 + t636 * t621;
	t685 = -t538 * t550 + t554 * t739;
	t666 = t619 * t668;
	t593 = -t627 * t666 + t663;
	t594 = -t623 * t666 - t662;
	t661 = t668 * t751;
	t660 = t616 * t661;
	t562 = t594 * t626 + (t593 * t618 + t660) * t622;
	t659 = -t593 * t616 + t618 * t661;
	t543 = t562 * t621 - t659 * t625;
	t601 = t672 * t617;
	t673 = t700 - t714;
	t602 = t673 * t617;
	t585 = -t602 * t626 + (t601 * t618 + t616 * t689) * t622;
	t597 = -t601 * t616 + t618 * t689;
	t568 = t585 * t621 - t597 * t625;
	t684 = -t543 * t550 + t568 * t739;
	t565 = -t590 * t729 - t645 * t626;
	t546 = t565 * t621 - t590 * t730;
	t583 = t599 * t626 - t600 * t729;
	t570 = t583 * t621 - t600 * t730;
	t683 = -t546 * t550 + t570 * t739;
	t681 = -t567 * t621 + t591 * t730;
	t579 = -t596 * qJD(3) + t607 * t726 + t608 * t623;
	t677 = -t579 * t618 + t607 * t707;
	t671 = qJD(6) * t558 - t520 * t625 + t557 * t721;
	t592 = (-t674 * qJD(2) + t673 * qJD(3)) * t617;
	t580 = t595 * qJD(3) + t607 * t727 - t608 * t627;
	t578 = -t594 * qJD(3) + t605 * t726 + t734;
	t561 = -t579 * t616 - t607 * t704;
	t541 = -t577 * qJD(4) - t588 * t622 + t670 * t626;
	t531 = t558 * t620 - t624 * t737;
	t530 = -t558 * t624 - t620 * t737;
	t527 = t572 * t626 - t573 * t729 - t618 * t708 + t647;
	t526 = t572 * t622 + t573 * t728 - t618 * t709 - t646;
	t525 = t756 * qJD(4) + t580 * t626 - t677 * t622;
	t524 = t564 * qJD(4) + t580 * t622 + t677 * t626;
	t523 = (t592 * t729 + t601 * t711 + t602 * t723) * t621 + t592 * t730 + (t585 * t625 + t597 * t621) * qJD(5) + ((t616 * qJD(4) * t696 + t672 * qJD(3)) * t626 * t621 + ((t616 * t622 * t697 - t675 * t626) * t621 - t618 * t625 * t697) * qJD(2)) * t617;
	t522 = (-t588 * t729 + t587 * t626 + (-t599 * t622 - t600 * t728) * qJD(4)) * t621 - t588 * t730 + (t583 * t625 + t600 * t731) * qJD(5);
	t518 = t606 * t698 + t757 * t618 - t759 * t622 - t710;
	t505 = -t553 * qJD(5) + t542 * t625 + t581 * t621;
	t503 = t681 * qJD(5) + t527 * t625 + t573 * t731;
	t502 = (-t571 * t729 - t618 * t710 + t757) * t621 + t565 * t720 - t571 * t730 + t590 * t616 * t721;
	t501 = -t544 * qJD(5) + t525 * t625 + t561 * t621;
	t500 = ((t593 * qJD(3) + t605 * t727 - t606 * t627) * t626 - t594 * t723 + t578 * t729 + t593 * t711 - t605 * t699 + t660 * t722) * t621 + t562 * t720 - (-t578 * t616 - t605 * t704) * t625 + t659 * t721;
	t497 = -t556 * t721 + t637 * t621 + t761 * t625;
	t493 = 0.1e1 / t495;
	t486 = 0.1e1 / t488;
	t483 = t514 * t762;
	t482 = t683 * t514;
	t481 = t684 * t514;
	t480 = t685 * t514;
	t476 = (-t512 * t555 + t513 * t576) * t621 + t691 * t483;
	t475 = t691 * t482 - t512 * t546 + t513 * t570;
	t474 = t691 * t481 - t512 * t543 + t513 * t568;
	t473 = t691 * t480 - t512 * t538 + t513 * t554;
	t471 = -t683 * t747 + (t570 * t702 - t502 * t550 + (t496 * t570 + t504 * t546 + t522 * t536) * t551) * t514;
	t469 = -t684 * t747 + (t568 * t702 - t500 * t550 + (t496 * t568 + t504 * t543 + t523 * t536) * t551) * t514;
	t468 = -t685 * t747 + (t554 * t702 - t497 * t550 + (t496 * t554 + t504 * t538 + t505 * t536) * t551) * t514;
	t467 = -t747 * t762 + (t682 * t720 + (t576 * t702 - t518 * t550 + (t496 * t576 + t504 * t555 + t536 * t541) * t551) * t621) * t514;
	t1 = [0, t469, t471, t467, t468, 0; 0, (t474 * t745 - t489 * t544) * t749 + ((t545 * qJD(5) + t525 * t621 - t561 * t625) * t489 + t474 * t703 + (-t544 * t472 - t474 * t498 - (-t469 * t536 - t481 * t496 + t523 + (-t481 * t553 - t543) * t478) * t740 - (-t469 * t553 - t481 * t504 - t500 + (t481 * t536 - t568) * t478) * t741) * t490) * t486, (t475 * t745 + t489 * t681) * t749 + ((t548 * qJD(5) + t527 * t621 - t573 * t730) * t489 + t475 * t703 + (t681 * t472 - t475 * t498 - (-t471 * t536 - t482 * t496 + t522 + (-t482 * t553 - t546) * t478) * t740 - (-t471 * t553 - t482 * t504 - t502 + (t482 * t536 - t570) * t478) * t741) * t490) * t486, (t476 * t745 + t489 * t738) * t749 + ((-t520 * t621 - t557 * t720) * t489 + (-t744 + t703) * t476 + (t738 * t472 - (t576 * t720 - t467 * t536 - t483 * t496 + t541 * t621 + (-t483 * t553 - t555 * t621) * t478) * t740 - (-t555 * t720 - t467 * t553 - t483 * t504 - t518 * t621 + (t483 * t536 - t576 * t621) * t478) * t741) * t490) * t486, (t473 * t745 - t489 * t540) * t749 + (t473 * t703 + t499 * t489 + (-t540 * t472 - t473 * t498 - (-t468 * t536 - t480 * t496 + t505 + (-t480 * t553 - t538) * t478) * t740 - (-t468 * t553 - t480 * t504 - t497 + (t480 * t536 - t554) * t478) * t741) * t490) * t486, 0; 0, (-t507 * t528 + t529 * t742) * t748 + ((t529 * qJD(6) + t501 * t620 - t524 * t624) * t507 + t529 * t701 + (-t528 * t485 - (-t528 * qJD(6) + t501 * t624 + t524 * t620) * t510 - t529 * t484) * t508) * t493, (-t507 * t532 + t533 * t742) * t748 + ((t533 * qJD(6) + t503 * t620 - t526 * t624) * t507 + t533 * t701 + (-t532 * t485 - (-t532 * qJD(6) + t503 * t624 + t526 * t620) * t510 - t533 * t484) * t508) * t493, (-t507 * t530 + t531 * t742) * t748 + (t531 * t701 - t695 * t507 * t624 + t671 * t725 + (-t695 * t510 * t620 - t531 * t484 - t530 * t485 - t671 * t724) * t508) * t493, -t686 * t539 * t748 + (t686 * t498 + ((-qJD(6) * t507 - 0.2e1 * t717) * t624 + (t484 * t624 + (t485 - t719) * t620) * t508) * t539) * t493, -t748 + (0.2e1 * t484 * t508 * t493 + (-0.2e1 * t493 * t746 - t508 * t748) * t510) * t510;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end