% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% S6PRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% JRD_rot [9x6]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 23:23
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = S6PRRRRR6_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR6_jacobiRD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR6_jacobiRD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRRRRR6_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRRRRR6_jacobiRD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:35
	% EndTime: 2019-10-09 23:23:35
	% DurationCPUTime: 0.05s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:35
	% EndTime: 2019-10-09 23:23:35
	% DurationCPUTime: 0.05s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:36
	% EndTime: 2019-10-09 23:23:36
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (6->6), mult. (24->17), div. (0->0), fcn. (24->6), ass. (0->9)
	t61 = cos(pkin(6));
	t62 = sin(qJ(2));
	t66 = t61 * t62;
	t63 = cos(qJ(2));
	t65 = t61 * t63;
	t64 = qJD(2) * sin(pkin(6));
	t60 = cos(pkin(14));
	t58 = sin(pkin(14));
	t1 = [0, (t58 * t66 - t60 * t63) * qJD(2), 0, 0, 0, 0; 0, (-t58 * t63 - t60 * t66) * qJD(2), 0, 0, 0, 0; 0, -t62 * t64, 0, 0, 0, 0; 0, (t58 * t65 + t60 * t62) * qJD(2), 0, 0, 0, 0; 0, (t58 * t62 - t60 * t65) * qJD(2), 0, 0, 0, 0; 0, -t63 * t64, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:37
	% EndTime: 2019-10-09 23:23:37
	% DurationCPUTime: 0.20s
	% Computational Cost: add. (78->41), mult. (285->88), div. (0->0), fcn. (301->10), ass. (0->35)
	t259 = sin(pkin(14));
	t262 = cos(pkin(14));
	t266 = sin(qJ(2));
	t264 = cos(pkin(6));
	t268 = cos(qJ(2));
	t283 = t264 * t268;
	t253 = -t259 * t266 + t262 * t283;
	t260 = sin(pkin(7));
	t261 = sin(pkin(6));
	t287 = t260 * t261;
	t263 = cos(pkin(7));
	t265 = sin(qJ(3));
	t286 = t263 * t265;
	t267 = cos(qJ(3));
	t285 = t263 * t267;
	t284 = t264 * t266;
	t282 = t265 * t266;
	t281 = t265 * t268;
	t280 = t266 * t267;
	t279 = t267 * t268;
	t277 = qJD(3) * t260 * t264;
	t276 = -t253 * t263 + t262 * t287;
	t274 = t259 * t283 + t262 * t266;
	t275 = -t259 * t287 + t263 * t274;
	t254 = t259 * t268 + t262 * t284;
	t273 = t259 * t284 - t262 * t268;
	t272 = -t263 * t279 + t282;
	t271 = -t263 * t280 - t281;
	t270 = -t263 * t281 - t280;
	t269 = t263 * t282 - t279;
	t252 = t273 * qJD(2);
	t251 = t274 * qJD(2);
	t250 = t254 * qJD(2);
	t249 = t253 * qJD(2);
	t1 = [0, t251 * t286 + t252 * t267 + (t265 * t274 + t273 * t285) * qJD(3), t252 * t285 + t251 * t265 + (t275 * t265 + t267 * t273) * qJD(3), 0, 0, 0; 0, -t249 * t286 - t250 * t267 + (-t253 * t265 - t254 * t285) * qJD(3), -t250 * t285 - t249 * t265 + (-t254 * t267 + t276 * t265) * qJD(3), 0, 0, 0; 0, (t270 * qJD(2) + t271 * qJD(3)) * t261, -t265 * t277 + (t271 * qJD(2) + t270 * qJD(3)) * t261, 0, 0, 0; 0, t251 * t285 - t252 * t265 + (t267 * t274 - t273 * t286) * qJD(3), -t252 * t286 + t251 * t267 + (-t265 * t273 + t275 * t267) * qJD(3), 0, 0, 0; 0, -t249 * t285 + t250 * t265 + (-t253 * t267 + t254 * t286) * qJD(3), t250 * t286 - t249 * t267 + (t254 * t265 + t276 * t267) * qJD(3), 0, 0, 0; 0, (t272 * qJD(2) + t269 * qJD(3)) * t261, -t267 * t277 + (t269 * qJD(2) + t272 * qJD(3)) * t261, 0, 0, 0; 0, -t251 * t260, 0, 0, 0, 0; 0, t249 * t260, 0, 0, 0, 0; 0, qJD(2) * t268 * t287, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:40
	% EndTime: 2019-10-09 23:23:41
	% DurationCPUTime: 0.90s
	% Computational Cost: add. (481->121), mult. (1645->237), div. (0->0), fcn. (1823->14), ass. (0->92)
	t552 = sin(pkin(14));
	t556 = cos(pkin(14));
	t562 = sin(qJ(2));
	t559 = cos(pkin(6));
	t565 = cos(qJ(2));
	t602 = t559 * t565;
	t542 = -t552 * t562 + t556 * t602;
	t561 = sin(qJ(3));
	t564 = cos(qJ(3));
	t603 = t559 * t562;
	t573 = t552 * t603 - t556 * t565;
	t558 = cos(pkin(7));
	t574 = t552 * t602 + t556 * t562;
	t554 = sin(pkin(7));
	t555 = sin(pkin(6));
	t613 = t554 * t555;
	t575 = t552 * t613 - t558 * t574;
	t522 = t575 * t561 - t564 * t573;
	t543 = t552 * t565 + t556 * t603;
	t538 = t543 * qJD(2);
	t618 = t538 * t561;
	t617 = t543 * t564;
	t553 = sin(pkin(8));
	t614 = t553 * t554;
	t557 = cos(pkin(8));
	t612 = t554 * t557;
	t611 = t554 * t559;
	t610 = t555 * t558;
	t609 = t555 * t562;
	t608 = t555 * t565;
	t560 = sin(qJ(4));
	t607 = t557 * t560;
	t563 = cos(qJ(4));
	t606 = t557 * t563;
	t605 = t558 * t561;
	t604 = t558 * t564;
	t601 = t561 * t562;
	t600 = t561 * t565;
	t599 = t562 * t564;
	t598 = t564 * t565;
	t597 = qJD(2) * t555;
	t596 = qJD(3) * t561;
	t595 = qJD(3) * t564;
	t594 = t556 * t613;
	t592 = t558 * t601;
	t591 = t561 * t611;
	t590 = t565 * t597;
	t589 = t609 * t614;
	t588 = t554 * t590;
	t577 = -t542 * t558 + t594;
	t519 = -t543 * t561 - t577 * t564;
	t587 = -t519 * t557 - (-t542 * t554 - t556 * t610) * t553;
	t521 = t561 * t573 + t575 * t564;
	t586 = -t521 * t557 - (t552 * t610 + t554 * t574) * t553;
	t572 = t558 * t598 - t601;
	t529 = t572 * t555 + t564 * t611;
	t585 = -t529 * t557 - (-t554 * t608 + t559 * t558) * t553;
	t537 = t542 * qJD(2);
	t509 = -t538 * t604 - t537 * t561 + (t577 * t561 - t617) * qJD(3);
	t584 = -t509 * t557 - t538 * t614;
	t539 = t574 * qJD(2);
	t540 = t573 * qJD(2);
	t511 = -t522 * qJD(3) + t539 * t561 + t540 * t604;
	t583 = -t511 * t557 + t540 * t614;
	t578 = -t542 * t564 + t543 * t605;
	t513 = t578 * qJD(3) - t537 * t604 + t618;
	t582 = t513 * t557 + t537 * t614;
	t576 = t564 * t574 - t573 * t605;
	t515 = t576 * qJD(3) + t539 * t604 - t540 * t561;
	t581 = t515 * t557 - t539 * t614;
	t525 = -t542 * t561 - t543 * t604;
	t580 = t525 * t557 + t543 * t614;
	t527 = t561 * t574 + t573 * t604;
	t579 = t527 * t557 - t573 * t614;
	t571 = -t558 * t599 - t600;
	t570 = t558 * t600 + t599;
	t569 = t592 - t598;
	t568 = t555 * t557 * t571 + t589;
	t517 = -qJD(3) * t591 + (t571 * qJD(2) - t570 * qJD(3)) * t555;
	t567 = qJD(2) * t589 + t517 * t557;
	t523 = (-t572 * qJD(2) + t569 * qJD(3)) * t555;
	t566 = t523 * t557 + t553 * t588;
	t534 = t569 * t555;
	t530 = t570 * t555 + t591;
	t524 = (-t570 * qJD(2) + t571 * qJD(3)) * t555;
	t520 = t542 * t605 - t561 * t594 + t617;
	t518 = -t592 * t597 - t596 * t609 + (t590 + (t558 * t608 + t611) * qJD(3)) * t564;
	t516 = t527 * qJD(3) + t539 * t605 + t540 * t564;
	t514 = t525 * qJD(3) - t537 * t605 - t538 * t564;
	t512 = t540 * t605 + t573 * t596 + (t575 * qJD(3) - t539) * t564;
	t510 = t537 * t564 - t543 * t596 - t594 * t595 + (t542 * t595 - t618) * t558;
	t1 = [0, t516 * t563 + t581 * t560 + (t560 * t576 + t579 * t563) * qJD(4), -t512 * t607 + t511 * t563 + (-t521 * t560 - t522 * t606) * qJD(4), -t512 * t560 - t583 * t563 + (-t522 * t563 + t586 * t560) * qJD(4), 0, 0; 0, t514 * t563 + t582 * t560 + (t560 * t578 + t580 * t563) * qJD(4), -t510 * t607 + t509 * t563 + (-t519 * t560 - t520 * t606) * qJD(4), -t510 * t560 - t584 * t563 + (-t520 * t563 + t587 * t560) * qJD(4), 0, 0; 0, t524 * t563 + t566 * t560 + (t534 * t560 + t568 * t563) * qJD(4), -t518 * t607 + t517 * t563 + (-t529 * t560 - t530 * t606) * qJD(4), -t518 * t560 + t567 * t563 + (-t530 * t563 + t585 * t560) * qJD(4), 0, 0; 0, -t516 * t560 + t581 * t563 + (-t579 * t560 + t563 * t576) * qJD(4), -t512 * t606 - t511 * t560 + (-t521 * t563 + t522 * t607) * qJD(4), -t512 * t563 + t583 * t560 + (t522 * t560 + t586 * t563) * qJD(4), 0, 0; 0, -t514 * t560 + t582 * t563 + (-t580 * t560 + t563 * t578) * qJD(4), -t510 * t606 - t509 * t560 + (-t519 * t563 + t520 * t607) * qJD(4), -t510 * t563 + t584 * t560 + (t520 * t560 + t587 * t563) * qJD(4), 0, 0; 0, -t524 * t560 + t566 * t563 + (t534 * t563 - t568 * t560) * qJD(4), -t518 * t606 - t517 * t560 + (-t529 * t563 + t530 * t607) * qJD(4), -t518 * t563 - t567 * t560 + (t530 * t560 + t585 * t563) * qJD(4), 0, 0; 0, -t515 * t553 - t539 * t612, t512 * t553, 0, 0, 0; 0, -t513 * t553 + t537 * t612, t510 * t553, 0, 0, 0; 0, -t523 * t553 + t557 * t588, t518 * t553, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:45
	% EndTime: 2019-10-09 23:23:47
	% DurationCPUTime: 1.78s
	% Computational Cost: add. (1306->191), mult. (4317->362), div. (0->0), fcn. (4956->16), ass. (0->140)
	t835 = sin(pkin(6));
	t838 = cos(pkin(7));
	t843 = sin(qJ(2));
	t846 = cos(qJ(3));
	t884 = t843 * t846;
	t842 = sin(qJ(3));
	t847 = cos(qJ(2));
	t885 = t842 * t847;
	t852 = t838 * t885 + t884;
	t834 = sin(pkin(7));
	t839 = cos(pkin(6));
	t896 = t834 * t839;
	t874 = t842 * t896;
	t810 = t852 * t835 + t874;
	t841 = sin(qJ(4));
	t845 = cos(qJ(4));
	t883 = t846 * t847;
	t886 = t842 * t843;
	t854 = t838 * t883 - t886;
	t809 = t854 * t835 + t846 * t896;
	t893 = t835 * t847;
	t821 = -t834 * t893 + t839 * t838;
	t833 = sin(pkin(8));
	t837 = cos(pkin(8));
	t867 = t809 * t837 + t821 * t833;
	t782 = t810 * t845 + t867 * t841;
	t832 = sin(pkin(14));
	t836 = cos(pkin(14));
	t888 = t839 * t843;
	t855 = t832 * t888 - t836 * t847;
	t887 = t839 * t847;
	t856 = t832 * t887 + t836 * t843;
	t898 = t834 * t835;
	t857 = t832 * t898 - t838 * t856;
	t801 = t857 * t842 - t846 * t855;
	t800 = t842 * t855 + t857 * t846;
	t895 = t835 * t838;
	t812 = t832 * t895 + t834 * t856;
	t868 = t800 * t837 + t812 * t833;
	t768 = t801 * t845 + t868 * t841;
	t875 = t836 * t887;
	t822 = -t832 * t843 + t875;
	t877 = t836 * t898;
	t890 = t838 * t842;
	t823 = t832 * t847 + t836 * t888;
	t903 = t823 * t846;
	t799 = t822 * t890 - t842 * t877 + t903;
	t859 = -t822 * t838 + t877;
	t798 = -t823 * t842 - t859 * t846;
	t811 = -t822 * t834 - t836 * t895;
	t869 = t798 * t837 + t811 * t833;
	t766 = t799 * t845 + t869 * t841;
	t818 = t823 * qJD(2);
	t904 = t818 * t842;
	t901 = t833 * t834;
	t840 = sin(qJ(5));
	t900 = t833 * t840;
	t844 = cos(qJ(5));
	t899 = t833 * t844;
	t897 = t834 * t837;
	t894 = t835 * t843;
	t892 = t837 * t841;
	t891 = t837 * t845;
	t889 = t838 * t846;
	t882 = qJD(2) * t843;
	t881 = qJD(3) * t842;
	t880 = qJD(3) * t846;
	t879 = qJD(5) * t840;
	t878 = qJD(5) * t844;
	t876 = t834 * t894;
	t873 = t835 * t882;
	t872 = qJD(2) * t893;
	t871 = t834 * t873;
	t870 = t834 * t872;
	t817 = -qJD(2) * t875 + t832 * t882;
	t777 = -t818 * t889 + t817 * t842 + (t859 * t842 - t903) * qJD(3);
	t866 = t777 * t837 + t818 * t901;
	t819 = t856 * qJD(2);
	t820 = t855 * qJD(2);
	t779 = -t801 * qJD(3) + t819 * t842 + t820 * t889;
	t865 = t779 * t837 - t820 * t901;
	t860 = -t822 * t846 + t823 * t890;
	t783 = t860 * qJD(3) + t817 * t889 + t904;
	t864 = -t783 * t837 + t817 * t901;
	t858 = t846 * t856 - t855 * t890;
	t785 = t858 * qJD(3) + t819 * t889 - t820 * t842;
	t863 = -t785 * t837 + t819 * t901;
	t775 = t798 * t845 - t799 * t892;
	t776 = t800 * t845 - t801 * t892;
	t804 = -t822 * t842 - t823 * t889;
	t862 = t804 * t837 + t823 * t901;
	t806 = t842 * t856 + t855 * t889;
	t861 = t806 * t837 - t855 * t901;
	t790 = t809 * t845 - t810 * t892;
	t853 = -t838 * t884 - t885;
	t851 = t838 * t886 - t883;
	t813 = t853 * t835;
	t850 = t813 * t837 + t833 * t876;
	t795 = -qJD(3) * t874 + (t853 * qJD(2) - t852 * qJD(3)) * t835;
	t849 = t795 * t837 + t833 * t871;
	t802 = (-t854 * qJD(2) + t851 * qJD(3)) * t835;
	t848 = t802 * t837 + t833 * t870;
	t765 = -t799 * t841 + t869 * t845;
	t767 = -t801 * t841 + t868 * t845;
	t781 = -t810 * t841 + t867 * t845;
	t773 = t862 * t841 - t845 * t860;
	t774 = t861 * t841 - t845 * t858;
	t814 = t851 * t835;
	t793 = -t814 * t845 + t850 * t841;
	t808 = -t813 * t833 + t837 * t876;
	t803 = (-t852 * qJD(2) + t853 * qJD(3)) * t835;
	t797 = -t809 * t833 + t821 * t837;
	t796 = -t873 * t890 - t881 * t894 + (t872 + (t838 * t893 + t896) * qJD(3)) * t846;
	t794 = -t802 * t833 + t837 * t870;
	t792 = -t806 * t833 - t855 * t897;
	t791 = -t804 * t833 + t823 * t897;
	t789 = -t795 * t833 + t837 * t871;
	t788 = -t800 * t833 + t812 * t837;
	t787 = -t798 * t833 + t811 * t837;
	t786 = t806 * qJD(3) + t819 * t890 + t820 * t846;
	t784 = t804 * qJD(3) + t817 * t890 - t818 * t846;
	t780 = t820 * t890 + t855 * t881 + (t857 * qJD(3) - t819) * t846;
	t778 = -t817 * t846 - t823 * t881 - t877 * t880 + (t822 * t880 - t904) * t838;
	t772 = -t785 * t833 - t819 * t897;
	t771 = -t783 * t833 - t817 * t897;
	t770 = -t779 * t833 - t820 * t897;
	t769 = -t777 * t833 + t818 * t897;
	t764 = t803 * t845 + t848 * t841 + (t814 * t841 + t850 * t845) * qJD(4);
	t763 = -t796 * t892 + t795 * t845 + (-t809 * t841 - t810 * t891) * qJD(4);
	t762 = t781 * qJD(4) + t796 * t845 + t849 * t841;
	t761 = -t782 * qJD(4) - t796 * t841 + t849 * t845;
	t760 = -t780 * t892 + t779 * t845 + (-t800 * t841 - t801 * t891) * qJD(4);
	t759 = -t778 * t892 + t777 * t845 + (-t798 * t841 - t799 * t891) * qJD(4);
	t758 = t786 * t845 - t863 * t841 + (t841 * t858 + t861 * t845) * qJD(4);
	t757 = t784 * t845 - t864 * t841 + (t841 * t860 + t862 * t845) * qJD(4);
	t756 = t767 * qJD(4) + t780 * t845 + t865 * t841;
	t755 = -t768 * qJD(4) - t780 * t841 + t865 * t845;
	t754 = t765 * qJD(4) + t778 * t845 + t866 * t841;
	t753 = -t766 * qJD(4) - t778 * t841 + t866 * t845;
	t1 = [0, t758 * t844 + t772 * t840 + (-t774 * t840 + t792 * t844) * qJD(5), t780 * t900 + t760 * t844 + (-t776 * t840 + t801 * t899) * qJD(5), t755 * t844 - t767 * t879, -t756 * t840 + t770 * t844 + (-t768 * t844 - t788 * t840) * qJD(5), 0; 0, t757 * t844 + t771 * t840 + (-t773 * t840 + t791 * t844) * qJD(5), t778 * t900 + t759 * t844 + (-t775 * t840 + t799 * t899) * qJD(5), t753 * t844 - t765 * t879, -t754 * t840 + t769 * t844 + (-t766 * t844 - t787 * t840) * qJD(5), 0; 0, t764 * t844 + t794 * t840 + (-t793 * t840 + t808 * t844) * qJD(5), t796 * t900 + t763 * t844 + (-t790 * t840 + t810 * t899) * qJD(5), t761 * t844 - t781 * t879, -t762 * t840 + t789 * t844 + (-t782 * t844 - t797 * t840) * qJD(5), 0; 0, -t758 * t840 + t772 * t844 + (-t774 * t844 - t792 * t840) * qJD(5), t780 * t899 - t760 * t840 + (-t776 * t844 - t801 * t900) * qJD(5), -t755 * t840 - t767 * t878, -t756 * t844 - t770 * t840 + (t768 * t840 - t788 * t844) * qJD(5), 0; 0, -t757 * t840 + t771 * t844 + (-t773 * t844 - t791 * t840) * qJD(5), t778 * t899 - t759 * t840 + (-t775 * t844 - t799 * t900) * qJD(5), -t753 * t840 - t765 * t878, -t754 * t844 - t769 * t840 + (t766 * t840 - t787 * t844) * qJD(5), 0; 0, -t764 * t840 + t794 * t844 + (-t793 * t844 - t808 * t840) * qJD(5), t796 * t899 - t763 * t840 + (-t790 * t844 - t810 * t900) * qJD(5), -t761 * t840 - t781 * t878, -t762 * t844 - t789 * t840 + (t782 * t840 - t797 * t844) * qJD(5), 0; 0, t774 * qJD(4) + t786 * t841 + t863 * t845, t776 * qJD(4) + t779 * t841 + t780 * t891, t756, 0, 0; 0, t773 * qJD(4) + t784 * t841 + t864 * t845, t775 * qJD(4) + t777 * t841 + t778 * t891, t754, 0, 0; 0, t793 * qJD(4) + t803 * t841 - t848 * t845, t790 * qJD(4) + t795 * t841 + t796 * t891, t762, 0, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:23:54
	% EndTime: 2019-10-09 23:23:57
	% DurationCPUTime: 3.52s
	% Computational Cost: add. (3270->271), mult. (10531->490), div. (0->0), fcn. (12400->18), ass. (0->192)
	t1129 = sin(pkin(14));
	t1133 = cos(pkin(14));
	t1141 = sin(qJ(2));
	t1136 = cos(pkin(6));
	t1146 = cos(qJ(2));
	t1193 = t1136 * t1146;
	t1118 = -t1129 * t1141 + t1133 * t1193;
	t1140 = sin(qJ(3));
	t1145 = cos(qJ(3));
	t1194 = t1136 * t1141;
	t1163 = t1129 * t1194 - t1133 * t1146;
	t1135 = cos(pkin(7));
	t1164 = t1129 * t1193 + t1133 * t1141;
	t1131 = sin(pkin(7));
	t1132 = sin(pkin(6));
	t1203 = t1131 * t1132;
	t1165 = t1129 * t1203 - t1135 * t1164;
	t1096 = t1140 * t1165 - t1145 * t1163;
	t1192 = t1140 * t1141;
	t1183 = t1135 * t1192;
	t1189 = t1145 * t1146;
	t1158 = t1183 - t1189;
	t1111 = t1158 * t1132;
	t1139 = sin(qJ(4));
	t1144 = cos(qJ(4));
	t1190 = t1141 * t1145;
	t1191 = t1140 * t1146;
	t1160 = -t1135 * t1190 - t1191;
	t1110 = t1160 * t1132;
	t1134 = cos(pkin(8));
	t1130 = sin(pkin(8));
	t1186 = t1141 * t1203;
	t1180 = t1130 * t1186;
	t1157 = t1110 * t1134 + t1180;
	t1228 = t1111 * t1139 + t1144 * t1157;
	t1196 = t1135 * t1140;
	t1167 = t1145 * t1164 - t1163 * t1196;
	t1195 = t1135 * t1145;
	t1101 = t1140 * t1164 + t1163 * t1195;
	t1206 = t1130 * t1131;
	t1171 = t1101 * t1134 - t1163 * t1206;
	t1227 = t1139 * t1167 + t1144 * t1171;
	t1119 = t1129 * t1146 + t1133 * t1194;
	t1212 = t1118 * t1145;
	t1170 = t1119 * t1196 - t1212;
	t1099 = -t1118 * t1140 - t1119 * t1195;
	t1172 = t1099 * t1134 + t1119 * t1206;
	t1226 = t1139 * t1170 + t1144 * t1172;
	t1138 = sin(qJ(5));
	t1225 = qJD(5) * t1138;
	t1137 = sin(qJ(6));
	t1224 = qJD(6) * t1137;
	t1142 = cos(qJ(6));
	t1223 = qJD(6) * t1142;
	t1187 = t1133 * t1203;
	t1168 = -t1118 * t1135 + t1187;
	t1211 = t1119 * t1140;
	t1093 = -t1145 * t1168 - t1211;
	t1200 = t1132 * t1135;
	t1169 = -t1118 * t1131 - t1133 * t1200;
	t1156 = t1169 * t1130;
	t1197 = t1134 * t1144;
	t1210 = t1119 * t1145;
	t1094 = t1118 * t1196 - t1140 * t1187 + t1210;
	t1219 = t1094 * t1139;
	t1047 = -t1093 * t1197 - t1144 * t1156 + t1219;
	t1143 = cos(qJ(5));
	t1222 = t1047 * t1143;
	t1209 = t1163 * t1140;
	t1095 = t1145 * t1165 + t1209;
	t1166 = t1129 * t1200 + t1131 * t1164;
	t1155 = t1166 * t1130;
	t1218 = t1096 * t1139;
	t1049 = -t1095 * t1197 - t1144 * t1155 + t1218;
	t1221 = t1049 * t1143;
	t1161 = t1135 * t1189 - t1192;
	t1201 = t1131 * t1136;
	t1107 = t1132 * t1161 + t1145 * t1201;
	t1199 = t1132 * t1146;
	t1185 = t1131 * t1199;
	t1162 = t1135 * t1136 - t1185;
	t1154 = t1162 * t1130;
	t1159 = t1135 * t1191 + t1190;
	t1182 = t1140 * t1201;
	t1108 = t1132 * t1159 + t1182;
	t1215 = t1108 * t1139;
	t1071 = -t1107 * t1197 - t1144 * t1154 + t1215;
	t1220 = t1071 * t1143;
	t1115 = t1119 * qJD(2);
	t1213 = t1115 * t1140;
	t1205 = t1130 * t1138;
	t1204 = t1130 * t1143;
	t1202 = t1131 * t1134;
	t1198 = t1134 * t1139;
	t1188 = t1144 * t1206;
	t1181 = qJD(2) * t1185;
	t1179 = t1134 * t1186;
	t1114 = t1118 * qJD(2);
	t1067 = -t1115 * t1195 - t1114 * t1140 + (t1140 * t1168 - t1210) * qJD(3);
	t1068 = t1114 * t1145 - t1213 * t1135 + (t1135 * t1212 - t1145 * t1187 - t1211) * qJD(3);
	t1149 = t1093 * t1134 + t1156;
	t1018 = t1068 * t1144 + (t1067 * t1134 + t1115 * t1206) * t1139 + (t1144 * t1149 - t1219) * qJD(4);
	t1178 = qJD(6) * t1222 + t1018;
	t1116 = t1164 * qJD(2);
	t1117 = t1163 * qJD(2);
	t1069 = -qJD(3) * t1096 + t1116 * t1140 + t1117 * t1195;
	t1070 = t1117 * t1196 + qJD(3) * t1209 + (qJD(3) * t1165 - t1116) * t1145;
	t1148 = t1095 * t1134 + t1155;
	t1020 = t1070 * t1144 + (t1069 * t1134 - t1117 * t1206) * t1139 + (t1144 * t1148 - t1218) * qJD(4);
	t1177 = qJD(6) * t1221 + t1020;
	t1090 = -qJD(3) * t1182 + (qJD(2) * t1160 - qJD(3) * t1159) * t1132;
	t1091 = (qJD(2) * t1199 + (t1135 * t1199 + t1201) * qJD(3)) * t1145 + (-qJD(2) * t1183 - qJD(3) * t1192) * t1132;
	t1147 = t1107 * t1134 + t1154;
	t1175 = qJD(2) * t1180;
	t1036 = t1091 * t1144 + (t1090 * t1134 + t1175) * t1139 + (t1144 * t1147 - t1215) * qJD(4);
	t1176 = qJD(6) * t1220 + t1036;
	t1048 = t1094 * t1144 + t1139 * t1149;
	t1077 = -t1093 * t1130 + t1134 * t1169;
	t1032 = t1048 * t1143 + t1077 * t1138;
	t1031 = -t1048 * t1138 + t1077 * t1143;
	t1050 = t1096 * t1144 + t1139 * t1148;
	t1078 = -t1095 * t1130 + t1134 * t1166;
	t1034 = t1050 * t1143 + t1078 * t1138;
	t1033 = -t1050 * t1138 + t1078 * t1143;
	t1056 = t1139 * t1172 - t1144 * t1170;
	t1082 = -t1099 * t1130 + t1119 * t1202;
	t1039 = t1056 * t1143 + t1082 * t1138;
	t1058 = t1139 * t1171 - t1144 * t1167;
	t1083 = -t1101 * t1130 - t1163 * t1202;
	t1040 = t1058 * t1143 + t1083 * t1138;
	t1072 = t1108 * t1144 + t1139 * t1147;
	t1092 = -t1107 * t1130 + t1134 * t1162;
	t1046 = t1072 * t1143 + t1092 * t1138;
	t1045 = -t1072 * t1138 + t1092 * t1143;
	t1085 = -t1111 * t1144 + t1139 * t1157;
	t1103 = -t1110 * t1130 + t1179;
	t1063 = t1085 * t1143 + t1103 * t1138;
	t1060 = t1093 * t1144 - t1094 * t1198;
	t1043 = t1060 * t1143 + t1094 * t1205;
	t1062 = t1095 * t1144 - t1096 * t1198;
	t1044 = t1062 * t1143 + t1096 * t1205;
	t1073 = qJD(3) * t1170 - t1114 * t1195 + t1213;
	t1174 = -t1073 * t1134 - t1114 * t1206;
	t1075 = qJD(3) * t1167 + t1116 * t1195 - t1117 * t1140;
	t1173 = -t1075 * t1134 + t1116 * t1206;
	t1081 = t1107 * t1144 - t1108 * t1198;
	t1066 = t1081 * t1143 + t1108 * t1205;
	t1059 = t1093 * t1139 + t1094 * t1197;
	t1061 = t1095 * t1139 + t1096 * t1197;
	t1080 = t1107 * t1139 + t1108 * t1197;
	t1097 = (-qJD(2) * t1161 + qJD(3) * t1158) * t1132;
	t1153 = t1097 * t1134 + t1130 * t1181;
	t1017 = qJD(4) * t1048 - t1067 * t1197 + t1068 * t1139 - t1115 * t1188;
	t1152 = qJD(6) * t1048 - t1017 * t1143 + t1047 * t1225;
	t1019 = qJD(4) * t1050 - t1069 * t1197 + t1070 * t1139 + t1117 * t1188;
	t1151 = qJD(6) * t1050 - t1019 * t1143 + t1049 * t1225;
	t1035 = qJD(4) * t1072 - t1090 * t1197 + t1091 * t1139 - t1144 * t1175;
	t1150 = qJD(6) * t1072 - t1035 * t1143 + t1071 * t1225;
	t1098 = (-qJD(2) * t1159 + qJD(3) * t1160) * t1132;
	t1086 = -t1097 * t1130 + t1134 * t1181;
	t1079 = qJD(2) * t1179 - t1090 * t1130;
	t1076 = qJD(3) * t1101 + t1116 * t1196 + t1117 * t1145;
	t1074 = qJD(3) * t1099 - t1114 * t1196 - t1115 * t1145;
	t1054 = -t1075 * t1130 - t1116 * t1202;
	t1053 = -t1073 * t1130 + t1114 * t1202;
	t1052 = -t1069 * t1130 - t1117 * t1202;
	t1051 = -t1067 * t1130 + t1115 * t1202;
	t1042 = qJD(4) * t1228 + t1098 * t1144 + t1153 * t1139;
	t1041 = qJD(4) * t1085 + t1098 * t1139 - t1144 * t1153;
	t1038 = -qJD(4) * t1080 + t1090 * t1144 - t1091 * t1198;
	t1037 = qJD(4) * t1081 + t1090 * t1139 + t1091 * t1197;
	t1030 = -qJD(4) * t1061 + t1069 * t1144 - t1070 * t1198;
	t1029 = qJD(4) * t1062 + t1069 * t1139 + t1070 * t1197;
	t1028 = -qJD(4) * t1059 + t1067 * t1144 - t1068 * t1198;
	t1027 = qJD(4) * t1060 + t1067 * t1139 + t1068 * t1197;
	t1026 = qJD(4) * t1227 + t1076 * t1144 - t1173 * t1139;
	t1025 = qJD(4) * t1058 + t1076 * t1139 + t1144 * t1173;
	t1024 = qJD(4) * t1226 + t1074 * t1144 - t1174 * t1139;
	t1023 = qJD(4) * t1056 + t1074 * t1139 + t1144 * t1174;
	t1022 = t1042 * t1143 + t1086 * t1138 + (-t1085 * t1138 + t1103 * t1143) * qJD(5);
	t1021 = t1091 * t1205 + t1038 * t1143 + (-t1081 * t1138 + t1108 * t1204) * qJD(5);
	t1016 = qJD(5) * t1045 + t1036 * t1143 + t1079 * t1138;
	t1015 = -qJD(5) * t1046 - t1036 * t1138 + t1079 * t1143;
	t1014 = t1070 * t1205 + t1030 * t1143 + (-t1062 * t1138 + t1096 * t1204) * qJD(5);
	t1013 = t1068 * t1205 + t1028 * t1143 + (-t1060 * t1138 + t1094 * t1204) * qJD(5);
	t1012 = t1026 * t1143 + t1054 * t1138 + (-t1058 * t1138 + t1083 * t1143) * qJD(5);
	t1011 = t1024 * t1143 + t1053 * t1138 + (-t1056 * t1138 + t1082 * t1143) * qJD(5);
	t1010 = qJD(5) * t1033 + t1020 * t1143 + t1052 * t1138;
	t1009 = -qJD(5) * t1034 - t1020 * t1138 + t1052 * t1143;
	t1008 = qJD(5) * t1031 + t1018 * t1143 + t1051 * t1138;
	t1007 = -qJD(5) * t1032 - t1018 * t1138 + t1051 * t1143;
	t1 = [0, t1012 * t1142 + t1025 * t1137 + (-t1040 * t1137 - t1142 * t1227) * qJD(6), t1014 * t1142 + t1029 * t1137 + (-t1044 * t1137 + t1061 * t1142) * qJD(6), t1137 * t1177 + t1142 * t1151, t1009 * t1142 - t1033 * t1224, -t1010 * t1137 + t1019 * t1142 + (-t1034 * t1142 - t1049 * t1137) * qJD(6); 0, t1011 * t1142 + t1023 * t1137 + (-t1039 * t1137 - t1142 * t1226) * qJD(6), t1013 * t1142 + t1027 * t1137 + (-t1043 * t1137 + t1059 * t1142) * qJD(6), t1137 * t1178 + t1142 * t1152, t1007 * t1142 - t1031 * t1224, -t1008 * t1137 + t1017 * t1142 + (-t1032 * t1142 - t1047 * t1137) * qJD(6); 0, t1022 * t1142 + t1041 * t1137 + (-t1063 * t1137 - t1142 * t1228) * qJD(6), t1021 * t1142 + t1037 * t1137 + (-t1066 * t1137 + t1080 * t1142) * qJD(6), t1137 * t1176 + t1142 * t1150, t1015 * t1142 - t1045 * t1224, -t1016 * t1137 + t1035 * t1142 + (-t1046 * t1142 - t1071 * t1137) * qJD(6); 0, -t1012 * t1137 + t1025 * t1142 + (-t1040 * t1142 + t1137 * t1227) * qJD(6), -t1014 * t1137 + t1029 * t1142 + (-t1044 * t1142 - t1061 * t1137) * qJD(6), -t1137 * t1151 + t1142 * t1177, -t1009 * t1137 - t1033 * t1223, -t1010 * t1142 - t1019 * t1137 + (t1034 * t1137 - t1049 * t1142) * qJD(6); 0, -t1011 * t1137 + t1023 * t1142 + (-t1039 * t1142 + t1137 * t1226) * qJD(6), -t1013 * t1137 + t1027 * t1142 + (-t1043 * t1142 - t1059 * t1137) * qJD(6), -t1137 * t1152 + t1142 * t1178, -t1007 * t1137 - t1031 * t1223, -t1008 * t1142 - t1017 * t1137 + (t1032 * t1137 - t1047 * t1142) * qJD(6); 0, -t1022 * t1137 + t1041 * t1142 + (-t1063 * t1142 + t1137 * t1228) * qJD(6), -t1021 * t1137 + t1037 * t1142 + (-t1066 * t1142 - t1080 * t1137) * qJD(6), -t1137 * t1150 + t1142 * t1176, -t1015 * t1137 - t1045 * t1223, -t1016 * t1142 - t1035 * t1137 + (t1046 * t1137 - t1071 * t1142) * qJD(6); 0, qJD(5) * t1040 + t1026 * t1138 - t1054 * t1143, qJD(5) * t1044 + t1030 * t1138 - t1070 * t1204, -qJD(5) * t1221 - t1019 * t1138, t1010, 0; 0, qJD(5) * t1039 + t1024 * t1138 - t1053 * t1143, qJD(5) * t1043 + t1028 * t1138 - t1068 * t1204, -qJD(5) * t1222 - t1017 * t1138, t1008, 0; 0, qJD(5) * t1063 + t1042 * t1138 - t1086 * t1143, qJD(5) * t1066 + t1038 * t1138 - t1091 * t1204, -qJD(5) * t1220 - t1035 * t1138, t1016, 0;];
	JRD_rot = t1;
else
	JRD_rot=NaN(9,6);
end