% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 6 (0=Basis) von
% S6PRRRRR6
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
%
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-02-26 20:22
% Revision: d75aae1ac561373cd3be920984c3df29a1c2ecc8 (2019-02-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRRRRR6_jacobiaD_rot_6_sym_varpar(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR6_jacobiaD_rot_6_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR6_jacobiaD_rot_6_sym_varpar: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRRRRR6_jacobiaD_rot_6_sym_varpar: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From jacobiaD_rot_6_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2019-02-26 20:21:53
% EndTime: 2019-02-26 20:22:00
% DurationCPUTime: 7.08s
% Computational Cost: add. (57493->342), mult. (172957->624), div. (1073->12), fcn. (221971->21), ass. (0->250)
t621 = sin(qJ(5));
t625 = cos(qJ(5));
t619 = cos(pkin(7));
t623 = sin(qJ(3));
t752 = cos(pkin(14));
t753 = cos(pkin(6));
t694 = t753 * t752;
t750 = sin(pkin(14));
t754 = sin(qJ(2));
t755 = cos(qJ(2));
t667 = -t694 * t755 + t750 * t754;
t663 = t667 * t623;
t627 = cos(qJ(3));
t668 = t694 * t754 + t750 * t755;
t664 = t668 * t627;
t617 = sin(pkin(6));
t706 = t617 * t752;
t751 = sin(pkin(7));
t687 = t751 * t706;
t590 = -t619 * t663 - t623 * t687 + t664;
t622 = sin(qJ(4));
t626 = cos(qJ(4));
t618 = cos(pkin(8));
t656 = -t619 * t667 - t687;
t665 = t668 * t623;
t645 = -t627 * t656 + t665;
t616 = sin(pkin(8));
t655 = -t619 * t706 + t667 * t751;
t653 = t655 * t616;
t635 = -t618 * t645 + t653;
t556 = t590 * t626 + t622 * t635;
t606 = t668 * qJD(2);
t605 = t667 * qJD(2);
t725 = t619 * t627;
t641 = (-t623 * t656 - t664) * qJD(3) + t605 * t623 - t606 * t725;
t704 = t618 * t751;
t758 = -t556 * qJD(5) + t606 * t704 - t616 * t641;
t636 = t616 * t645 + t618 * t655;
t644 = qJD(4) * t645;
t707 = t616 * t751;
t699 = t622 * t707;
t724 = qJD(4) * t622;
t727 = t618 * t626;
t728 = t618 * t622;
t662 = t667 * t627;
t733 = t606 * t623;
t571 = -t605 * t627 - t733 * t619 + (-t619 * t662 - t627 * t687 - t665) * qJD(3);
t760 = qJD(4) * t653 + t571;
t762 = qJD(5) * t636 - t590 * t724 + t606 * t699 + t626 * t760 + t641 * t728 - t644 * t727;
t496 = t621 * t762 - t625 * t758;
t712 = t754 * t627;
t715 = t755 * t623;
t675 = t619 * t715 + t712;
t693 = t753 * t751;
t688 = t623 * t693;
t600 = t617 * t675 + t688;
t713 = t754 * t623;
t714 = t755 * t627;
t674 = t619 * t714 - t713;
t599 = t617 * t674 + t627 * t693;
t697 = t755 * t751;
t609 = -t617 * t697 + t619 * t753;
t690 = t599 * t618 + t609 * t616;
t576 = -t600 * t622 + t626 * t690;
t700 = t619 * t713;
t716 = t617 * t755;
t588 = (qJD(2) * t716 + (t619 * t716 + t693) * qJD(3)) * t627 + (-qJD(2) * t700 - qJD(3) * t713) * t617;
t672 = -t619 * t712 - t715;
t587 = -qJD(3) * t688 + (qJD(2) * t672 - qJD(3) * t675) * t617;
t696 = t751 * t754;
t689 = t617 * t696;
t679 = qJD(2) * t689;
t670 = t587 * t618 + t616 * t679;
t542 = qJD(4) * t576 + t588 * t626 + t622 * t670;
t577 = t600 * t626 + t622 * t690;
t589 = -t599 * t616 + t609 * t618;
t554 = t577 * t625 + t589 * t621;
t581 = -t587 * t616 + t618 * t679;
t504 = qJD(5) * t554 + t542 * t621 - t581 * t625;
t536 = t556 * t621 - t625 * t636;
t534 = t536 ^ 2;
t553 = t577 * t621 - t589 * t625;
t551 = 0.1e1 / t553 ^ 2;
t516 = t534 * t551 + 0.1e1;
t514 = 0.1e1 / t516;
t550 = 0.1e1 / t553;
t738 = t536 * t551;
t478 = (-t496 * t550 + t504 * t738) * t514;
t517 = atan2(-t536, t553);
t512 = sin(t517);
t513 = cos(t517);
t691 = -t512 * t553 - t513 * t536;
t472 = t478 * t691 - t496 * t512 + t504 * t513;
t492 = -t512 * t536 + t513 * t553;
t489 = 0.1e1 / t492;
t490 = 0.1e1 / t492 ^ 2;
t764 = t472 * t489 * t490;
t692 = t753 * t750;
t610 = -t692 * t754 + t752 * t755;
t669 = t692 * t755 + t752 * t754;
t705 = t617 * t750;
t658 = -t619 * t669 + t705 * t751;
t591 = t610 * t627 + t623 * t658;
t732 = t610 * t623;
t650 = -t627 * t658 + t732;
t657 = t619 * t705 + t669 * t751;
t654 = t657 * t616;
t558 = t591 * t626 + (-t618 * t650 + t654) * t622;
t639 = t616 * t650 + t618 * t657;
t539 = t558 * t621 - t625 * t639;
t703 = 0.2e1 * t539 * t764;
t555 = -t590 * t622 + t626 * t635;
t682 = -t550 * t555 + t576 * t738;
t763 = t621 * t682;
t607 = t669 * qJD(2);
t608 = t610 * qJD(2);
t572 = -qJD(3) * t591 + t607 * t623 - t608 * t725;
t648 = qJD(4) * t650;
t646 = t626 * t648;
t709 = t591 * t724;
t726 = t619 * t623;
t573 = -t608 * t726 - qJD(3) * t732 + (qJD(3) * t658 - t607) * t627;
t759 = qJD(4) * t654 + t573;
t521 = t572 * t728 + t608 * t699 - t618 * t646 + t626 * t759 - t709;
t761 = qJD(5) * t639 + t521;
t757 = t622 * t644 + t641 * t626;
t596 = -t610 * t726 - t627 * t669;
t595 = -t610 * t725 + t623 * t669;
t676 = t595 * t618 + t610 * t707;
t756 = -t596 * t622 + t626 * t676;
t540 = t558 * t625 + t621 * t639;
t649 = t650 * t626;
t557 = t591 * t622 + t618 * t649 - t626 * t654;
t620 = sin(qJ(6));
t624 = cos(qJ(6));
t511 = t540 * t624 + t557 * t620;
t507 = 0.1e1 / t511;
t508 = 0.1e1 / t511 ^ 2;
t535 = t539 ^ 2;
t488 = t490 * t535 + 0.1e1;
t678 = -t572 * t616 + t608 * t704;
t721 = qJD(5) * t625;
t498 = t558 * t721 + t621 * t761 - t678 * t625;
t745 = t490 * t539;
t749 = 0.2e1 * (t498 * t745 - t535 * t764) / t488 ^ 2;
t722 = qJD(5) * t621;
t499 = -t558 * t722 + t678 * t621 + t625 * t761;
t647 = t622 * t648;
t698 = t626 * t707;
t723 = qJD(4) * t626;
t708 = t591 * t723;
t520 = -t572 * t727 - t608 * t698 - t618 * t647 + t622 * t759 + t708;
t484 = qJD(6) * t511 + t499 * t620 - t520 * t624;
t510 = t540 * t620 - t557 * t624;
t506 = t510 ^ 2;
t495 = t506 * t508 + 0.1e1;
t742 = t508 * t510;
t720 = qJD(6) * t510;
t485 = t499 * t624 + t520 * t620 - t720;
t746 = t485 * t507 * t508;
t748 = 0.2e1 * (t484 * t742 - t506 * t746) / t495 ^ 2;
t744 = t504 * t550 * t551;
t747 = 0.2e1 * (t496 * t738 - t534 * t744) / t516 ^ 2;
t743 = t507 * t620;
t741 = t510 * t624;
t740 = t512 * t539;
t739 = t513 * t539;
t737 = t557 * t621;
t736 = t557 * t625;
t730 = t616 * t621;
t729 = t616 * t625;
t717 = t510 * t746;
t711 = t618 * t723;
t710 = t590 * t723;
t702 = 0.2e1 * t717;
t701 = -0.2e1 * t536 * t744;
t695 = qJD(6) * t736 + t521;
t564 = t596 * t626 + t622 * t676;
t584 = -t595 * t616 + t610 * t704;
t545 = t564 * t625 + t584 * t621;
t529 = t545 * t624 - t620 * t756;
t528 = t545 * t620 + t624 * t756;
t567 = -t591 * t728 - t649;
t548 = t567 * t625 + t591 * t730;
t566 = t591 * t727 - t622 * t650;
t533 = t548 * t624 + t566 * t620;
t532 = t548 * t620 - t566 * t624;
t544 = t564 * t621 - t584 * t625;
t686 = t508 * t741 - t743;
t538 = t556 * t625 + t621 * t636;
t685 = -t538 * t550 + t554 * t738;
t666 = t619 * t668;
t593 = -t627 * t666 + t663;
t594 = -t623 * t666 - t662;
t661 = t668 * t751;
t660 = t616 * t661;
t562 = t594 * t626 + (t593 * t618 + t660) * t622;
t659 = -t593 * t616 + t618 * t661;
t543 = t562 * t621 - t625 * t659;
t601 = t672 * t617;
t673 = t700 - t714;
t602 = t673 * t617;
t585 = -t602 * t626 + (t601 * t618 + t616 * t689) * t622;
t597 = -t601 * t616 + t618 * t689;
t568 = t585 * t621 - t597 * t625;
t684 = -t543 * t550 + t568 * t738;
t565 = -t590 * t728 - t626 * t645;
t546 = t565 * t621 - t590 * t729;
t583 = t599 * t626 - t600 * t728;
t570 = t583 * t621 - t600 * t729;
t683 = -t546 * t550 + t570 * t738;
t681 = -t567 * t621 + t591 * t729;
t579 = -qJD(3) * t596 + t607 * t725 + t608 * t623;
t677 = -t579 * t618 + t607 * t707;
t671 = qJD(6) * t558 - t520 * t625 + t557 * t722;
t592 = (-qJD(2) * t674 + qJD(3) * t673) * t617;
t580 = qJD(3) * t595 + t607 * t726 - t608 * t627;
t578 = -qJD(3) * t594 + t605 * t725 + t733;
t561 = -t579 * t616 - t607 * t704;
t541 = -qJD(4) * t577 - t588 * t622 + t670 * t626;
t531 = t558 * t620 - t624 * t736;
t530 = -t558 * t624 - t620 * t736;
t527 = t572 * t626 - t573 * t728 - t618 * t708 + t647;
t526 = t572 * t622 + t573 * t727 - t618 * t709 - t646;
t525 = qJD(4) * t756 + t580 * t626 - t677 * t622;
t524 = qJD(4) * t564 + t580 * t622 + t626 * t677;
t523 = (t592 * t728 + t601 * t711 + t602 * t724) * t621 + t592 * t729 + (t585 * t625 + t597 * t621) * qJD(5) + ((qJD(4) * t616 * t696 + qJD(3) * t672) * t626 * t621 + ((t616 * t622 * t697 - t626 * t675) * t621 - t618 * t625 * t697) * qJD(2)) * t617;
t522 = (-t588 * t728 + t587 * t626 + (-t599 * t622 - t600 * t727) * qJD(4)) * t621 - t588 * t729 + (t583 * t625 + t600 * t730) * qJD(5);
t518 = t606 * t698 + t618 * t757 - t622 * t760 - t710;
t505 = -qJD(5) * t553 + t542 * t625 + t581 * t621;
t503 = qJD(5) * t681 + t527 * t625 + t573 * t730;
t502 = (-t571 * t728 - t618 * t710 + t757) * t621 + t565 * t721 - t571 * t729 + t590 * t616 * t722;
t501 = -qJD(5) * t544 + t525 * t625 + t561 * t621;
t500 = ((qJD(3) * t593 + t605 * t726 - t606 * t627) * t626 - t594 * t724 + t578 * t728 + t593 * t711 - t605 * t699 + t660 * t723) * t621 + t562 * t721 - (-t578 * t616 - t605 * t704) * t625 + t659 * t722;
t497 = t621 * t758 + t625 * t762;
t493 = 0.1e1 / t495;
t486 = 0.1e1 / t488;
t483 = t514 * t763;
t482 = t683 * t514;
t481 = t684 * t514;
t480 = t685 * t514;
t476 = (-t512 * t555 + t513 * t576) * t621 + t691 * t483;
t475 = t482 * t691 - t512 * t546 + t513 * t570;
t474 = t481 * t691 - t512 * t543 + t513 * t568;
t473 = t480 * t691 - t512 * t538 + t513 * t554;
t471 = -t683 * t747 + (t570 * t701 - t502 * t550 + (t496 * t570 + t504 * t546 + t522 * t536) * t551) * t514;
t469 = -t684 * t747 + (t568 * t701 - t500 * t550 + (t496 * t568 + t504 * t543 + t523 * t536) * t551) * t514;
t468 = -t685 * t747 + (t554 * t701 - t497 * t550 + (t496 * t554 + t504 * t538 + t505 * t536) * t551) * t514;
t467 = -t747 * t763 + (t682 * t721 + (t576 * t701 - t518 * t550 + (t496 * t576 + t504 * t555 + t536 * t541) * t551) * t621) * t514;
t1 = [0, t469, t471, t467, t468, 0; 0 (t474 * t745 - t489 * t544) * t749 + ((qJD(5) * t545 + t525 * t621 - t561 * t625) * t489 + t474 * t703 + (-t544 * t472 - t474 * t498 - (-t469 * t536 - t481 * t496 + t523 + (-t481 * t553 - t543) * t478) * t739 - (-t469 * t553 - t481 * t504 - t500 + (t481 * t536 - t568) * t478) * t740) * t490) * t486 (t475 * t745 + t489 * t681) * t749 + ((qJD(5) * t548 + t527 * t621 - t573 * t729) * t489 + t475 * t703 + (t681 * t472 - t475 * t498 - (-t471 * t536 - t482 * t496 + t522 + (-t482 * t553 - t546) * t478) * t739 - (-t471 * t553 - t482 * t504 - t502 + (t482 * t536 - t570) * t478) * t740) * t490) * t486 (t476 * t745 + t489 * t737) * t749 + ((-t520 * t621 - t557 * t721) * t489 + t476 * t703 + (-t476 * t498 + t737 * t472 - (t576 * t721 - t467 * t536 - t483 * t496 + t541 * t621 + (-t483 * t553 - t555 * t621) * t478) * t739 - (-t555 * t721 - t467 * t553 - t483 * t504 - t518 * t621 + (t483 * t536 - t576 * t621) * t478) * t740) * t490) * t486 (t473 * t745 - t489 * t540) * t749 + (t473 * t703 + t499 * t489 + (-t540 * t472 - t473 * t498 - (-t468 * t536 - t480 * t496 + t505 + (-t480 * t553 - t538) * t478) * t739 - (-t468 * t553 - t480 * t504 - t497 + (t480 * t536 - t554) * t478) * t740) * t490) * t486, 0; 0 (-t507 * t528 + t529 * t742) * t748 + ((qJD(6) * t529 + t501 * t620 - t524 * t624) * t507 + t529 * t702 + (-t528 * t485 - (-qJD(6) * t528 + t501 * t624 + t524 * t620) * t510 - t529 * t484) * t508) * t493 (-t507 * t532 + t533 * t742) * t748 + ((qJD(6) * t533 + t503 * t620 - t526 * t624) * t507 + t533 * t702 + (-t532 * t485 - (-qJD(6) * t532 + t503 * t624 + t526 * t620) * t510 - t533 * t484) * t508) * t493 (-t507 * t530 + t531 * t742) * t748 + (t531 * t702 - t695 * t507 * t624 + t671 * t743 + (-t510 * t620 * t695 - t531 * t484 - t530 * t485 - t671 * t741) * t508) * t493, -t686 * t539 * t748 + (t686 * t498 + ((-qJD(6) * t507 - 0.2e1 * t717) * t624 + (t484 * t624 + (t485 - t720) * t620) * t508) * t539) * t493, -t748 + (0.2e1 * t484 * t508 * t493 + (-0.2e1 * t493 * t746 - t508 * t748) * t510) * t510;];
JaD_rot  = t1;
