% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR4_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:26:47
% EndTime: 2019-03-09 02:26:55
% DurationCPUTime: 2.87s
% Computational Cost: add. (3338->296), mult. (6599->539), div. (0->0), fcn. (5888->8), ass. (0->159)
t175 = cos(qJ(6));
t123 = t175 * qJD(6);
t186 = t175 * qJD(5) + t123;
t80 = sin(qJ(5));
t74 = t80 ^ 2;
t82 = cos(qJ(5));
t76 = t82 ^ 2;
t122 = qJD(5) * (t74 - t76);
t81 = sin(qJ(4));
t75 = t81 ^ 2;
t83 = cos(qJ(4));
t77 = t83 ^ 2;
t163 = t75 - t77;
t121 = t163 * qJD(4);
t185 = qJD(5) + qJD(6);
t154 = t83 * qJD(2);
t79 = cos(pkin(10));
t131 = t79 * t154;
t182 = -pkin(1) - pkin(2);
t78 = sin(pkin(10));
t165 = t79 * qJ(2) + t78 * t182;
t52 = -pkin(7) + t165;
t178 = t81 * pkin(8);
t176 = t83 * pkin(4);
t99 = -t78 * qJ(2) + t79 * t182;
t51 = pkin(3) - t99;
t95 = t51 + t176;
t93 = t95 + t178;
t90 = qJD(5) * t93;
t179 = pkin(8) * t83;
t180 = pkin(4) * t81;
t110 = t179 - t180;
t157 = t78 * qJD(2);
t94 = t110 * qJD(4) + t157;
t155 = t81 * qJD(4);
t134 = t82 * t155;
t158 = qJD(5) * t83;
t140 = t80 * t158;
t96 = t134 + t140;
t10 = t96 * t52 - t80 * t94 + (-t131 - t90) * t82;
t181 = -pkin(9) - pkin(8);
t184 = t181 * t81 - t95;
t183 = 0.2e1 * qJD(2);
t177 = t82 * pkin(4);
t174 = sin(qJ(6));
t54 = t174 * t82 + t175 * t80;
t27 = t185 * t54;
t173 = t27 * t81;
t126 = qJD(4) * t174;
t111 = t83 * t126;
t127 = qJD(4) * t175;
t112 = t83 * t127;
t129 = t174 * t80;
t117 = t81 * t129;
t13 = t80 * t112 + (t186 * t81 + t111) * t82 - t185 * t117;
t40 = t54 * t81;
t172 = t40 * t13;
t12 = t80 * t111 - t82 * t112 + t173;
t130 = t175 * t82;
t41 = t81 * t130 - t117;
t171 = t41 * t12;
t170 = t78 * t81;
t169 = t78 * t83;
t168 = t80 * t52;
t167 = t80 * t83;
t166 = t82 * t83;
t39 = t52 * t166;
t20 = t80 * t93 + t39;
t162 = qJD(4) * t78;
t161 = qJD(5) * t80;
t160 = qJD(5) * t81;
t159 = qJD(5) * t82;
t156 = t79 * qJD(2);
t153 = t83 * qJD(4);
t152 = -0.2e1 * pkin(4) * qJD(5);
t151 = t52 * t167;
t150 = t78 * t167;
t149 = t78 * t166;
t148 = 0.2e1 * t156;
t146 = pkin(5) * t161;
t145 = pkin(8) * t159;
t63 = t181 * t82;
t144 = t78 * t156;
t143 = t82 * t156;
t142 = qJD(5) * t75 * t78;
t141 = t80 * t160;
t139 = t82 * t158;
t138 = t76 * t153;
t137 = t80 * t159;
t136 = t81 * t153;
t135 = t78 * t155;
t133 = t82 * t153;
t132 = t78 * t153;
t128 = pkin(5) - t168;
t125 = qJD(6) * t174;
t120 = 0.2e1 * t136;
t119 = t80 * t133;
t118 = t75 * t137;
t116 = pkin(5) * t123;
t115 = pkin(5) * t125;
t114 = t181 * t175;
t113 = t181 * t174;
t53 = -t130 + t129;
t109 = -t12 * t53 + t41 * t27;
t26 = (t174 * qJD(5) + t125) * t80 - t186 * t82;
t108 = t54 * t13 - t26 * t40;
t19 = t82 * t93 - t151;
t107 = t19 * t82 + t20 * t80;
t106 = -t19 * t80 + t20 * t82;
t101 = t82 * t79 + t150;
t43 = -t80 * t79 + t149;
t105 = -t101 * t82 + t43 * t80;
t104 = t101 * t80 + t43 * t82;
t103 = t80 * t114;
t102 = t80 * t113;
t100 = t53 * t155 - t83 * t27;
t98 = t52 * t155 - t131;
t97 = t52 * t153 + t81 * t156;
t44 = -t133 + t141;
t46 = t80 * t153 + t81 * t159;
t18 = t80 * t81 * pkin(9) + t20;
t84 = (-t79 * t167 + t82 * t78) * qJD(2) + (t184 * t80 - t39) * qJD(5) + (-t83 * t63 + (-t128 - t177) * t81) * qJD(4);
t89 = t128 * t83 - t184 * t82;
t87 = t175 * t89;
t88 = t46 * pkin(9) - t10;
t1 = -qJD(6) * t87 + t18 * t125 - t174 * t84 - t175 * t88;
t23 = -t101 * t174 + t175 * t43;
t32 = -t175 * t63 + t102;
t11 = (-t52 * t158 + t94) * t82 + (-t90 + t98) * t80;
t92 = -t107 * qJD(5) - t10 * t82 - t11 * t80;
t28 = t101 * qJD(5) + t78 * t134;
t29 = -t43 * qJD(5) + t80 * t135;
t91 = -t105 * qJD(5) - t28 * t82 - t29 * t80;
t86 = t174 * t89;
t85 = -t174 * t88 + t175 * t84;
t7 = t175 * t18 + t86;
t72 = -t82 * pkin(5) - pkin(4);
t67 = t74 * t153;
t66 = t75 * t162;
t65 = -0.2e1 * t136;
t61 = t76 * t136;
t59 = t74 * t136;
t57 = t78 ^ 2 * t136;
t55 = t75 * t144;
t47 = -t80 * t155 + t139;
t37 = t75 * t52 * t156;
t35 = (-pkin(5) * t80 + t52) * t81;
t33 = t81 * t122 - t119;
t31 = t174 * t63 + t103;
t22 = -t101 * t175 - t174 * t43;
t21 = -t46 * pkin(5) + t97;
t17 = -t54 * t155 - t26 * t83;
t16 = -t32 * qJD(6) + (t82 * t114 - t102) * qJD(5);
t15 = -t185 * t103 - t113 * t159 - t63 * t125;
t9 = -t23 * qJD(6) + t174 * t28 + t175 * t29;
t8 = t101 * t123 + t43 * t125 - t174 * t29 + t175 * t28;
t6 = -t174 * t18 + t87;
t2 = -t7 * qJD(6) + t85;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, qJ(2) * t183, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, t148, 0 (t165 * t79 - t78 * t99) * t183, t120, -0.2e1 * t121, 0, t65, 0, 0, 0.2e1 * t154 * t78 - 0.2e1 * t155 * t51, -0.2e1 * t153 * t51 - 0.2e1 * t157 * t81 (-t75 - t77) * t148, 0.2e1 * t37 + 0.2e1 * (t52 * t77 * t79 + t51 * t78) * qJD(2), 0.2e1 * t61 - 0.2e1 * t118, -0.4e1 * t119 * t81 + 0.2e1 * t122 * t75, 0.2e1 * t82 * t121 + 0.2e1 * t140 * t81, 0.2e1 * t59 + 0.2e1 * t118, -0.2e1 * t121 * t80 + 0.2e1 * t139 * t81, t65, 0.2e1 * t11 * t83 + 0.2e1 * (-t156 * t80 - t159 * t52) * t75 + 0.2e1 * (-t19 - 0.2e1 * t151) * t155, 0.2e1 * t10 * t83 + 0.2e1 * (t161 * t52 - t143) * t75 + 0.2e1 * (t20 - 0.2e1 * t39) * t155, 0.2e1 * t107 * t153 + 0.2e1 * (qJD(5) * t106 - t10 * t80 + t11 * t82) * t81, 0.2e1 * t136 * t52 ^ 2 - 0.2e1 * t20 * t10 + 0.2e1 * t19 * t11 + 0.2e1 * t37, -0.2e1 * t171, 0.2e1 * t12 * t40 - 0.2e1 * t41 * t13, 0.2e1 * t12 * t83 + 0.2e1 * t155 * t41, 0.2e1 * t172, 0.2e1 * t13 * t83 - 0.2e1 * t155 * t40, t65, -0.2e1 * t35 * t13 - 0.2e1 * t155 * t6 + 0.2e1 * t2 * t83 - 0.2e1 * t21 * t40, 0.2e1 * t1 * t83 + 0.2e1 * t35 * t12 + 0.2e1 * t155 * t7 - 0.2e1 * t21 * t41, -0.2e1 * t1 * t40 - 0.2e1 * t6 * t12 + 0.2e1 * t7 * t13 + 0.2e1 * t2 * t41, -0.2e1 * t7 * t1 + 0.2e1 * t6 * t2 + 0.2e1 * t35 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 * t155, t79 * t153, 0, t55 + (t77 - 0.1e1) * t144, 0, 0, 0, 0, 0, 0, -t82 * t142 + t29 * t83 + (t101 - 0.2e1 * t150) * t155, t80 * t142 + t28 * t83 + (t43 - 0.2e1 * t149) * t155, t105 * t153 + (qJD(5) * t104 - t28 * t80 + t29 * t82) * t81, t120 * t52 * t78 - t10 * t43 - t101 * t11 + t19 * t29 - t20 * t28 + t55, 0, 0, 0, 0, 0, 0, -t13 * t170 + t9 * t83 + (-t169 * t40 - t22 * t81) * qJD(4), t12 * t170 + t8 * t83 + (-t169 * t41 + t23 * t81) * qJD(4), -t22 * t12 + t23 * t13 - t8 * t40 + t9 * t41, -t1 * t23 + t2 * t22 + t6 * t9 - t7 * t8 + (t153 * t35 + t21 * t81) * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t101 * t29 - 0.2e1 * t43 * t28 + 0.2e1 * t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t22 * t9 - 0.2e1 * t23 * t8 + 0.2e1 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t106 * t83 + t163 * t52) * qJD(4) + (t92 - t131) * t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t41 - t7 * t12 - t6 * t13 + t155 * t35 - t2 * t40 - t21 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 + (t104 * t83 - t77 * t78) * qJD(4) + t91 * t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23 * t12 - t22 * t13 - t162 * t77 - t9 * t40 - t8 * t41 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t59 + 0.2e1 * t61 - 0.2e1 * t136, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t136 - 0.2e1 * t171 + 0.2e1 * t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t153, 0, t155, 0, -t97, t98, 0, 0, t33, 0.4e1 * t137 * t81 - t138 + t67, t47, -t33, -t96, 0 (-t145 + (t80 * pkin(4) - t82 * t52) * qJD(4)) * t83 + (pkin(8) * qJD(4) * t80 - t143 + (t168 + t177) * qJD(5)) * t81 (t52 * t160 + (t176 + t178) * qJD(4)) * t82 + (qJD(5) * t110 + t97) * t80, t92, -t97 * pkin(4) + pkin(8) * t92, t12 * t54 + t41 * t26, t108 + t109, t17, -t13 * t53 - t40 * t27, t100, 0, -t72 * t13 - t146 * t40 - t155 * t31 + t16 * t83 + t21 * t53 + t35 * t27, t72 * t12 - t146 * t41 + t15 * t83 + t155 * t32 + t21 * t54 - t35 * t26, t1 * t53 - t31 * t12 + t32 * t13 - t15 * t40 + t16 * t41 - t2 * t54 + t6 * t26 - t7 * t27, -t1 * t32 + t146 * t35 - t7 * t15 + t6 * t16 + t2 * t31 + t21 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t132, t135, 0, 0, 0, 0, 0, 0, 0, 0, t44 * t78, t46 * t78, t91, -pkin(4) * t132 + pkin(8) * t91, 0, 0, 0, 0, 0, 0 (t153 * t53 + t173) * t78 (t153 * t54 - t26 * t81) * t78, t22 * t26 - t23 * t27 + t8 * t53 - t9 * t54, -t23 * t15 + t22 * t16 + t9 * t31 - t8 * t32 + (pkin(5) * t141 + t153 * t72) * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155, -t153, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t47, t67 + t138 (-t180 + (t74 + t76) * t179) * qJD(4), 0, 0, 0, 0, 0, 0, t100, -t17, t108 - t109, -pkin(5) * t140 - t12 * t32 - t13 * t31 - t41 * t15 + t155 * t72 - t40 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t137, -0.2e1 * t122, 0, -0.2e1 * t137, 0, 0, t80 * t152, t82 * t152, 0, 0, -0.2e1 * t54 * t26, 0.2e1 * t26 * t53 - 0.2e1 * t54 * t27, 0, 0.2e1 * t53 * t27, 0, 0, 0.2e1 * t146 * t53 + 0.2e1 * t72 * t27, 0.2e1 * t146 * t54 - 0.2e1 * t72 * t26, 0.2e1 * t15 * t53 - 0.2e1 * t16 * t54 + 0.2e1 * t31 * t26 - 0.2e1 * t32 * t27, 0.2e1 * t146 * t72 - 0.2e1 * t32 * t15 + 0.2e1 * t31 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, t46, -t155, t11, t10, 0, 0, 0, 0, t12, 0, t13, -t155, -pkin(5) * t127 * t81 - qJD(6) * t86 - t115 * t83 - t123 * t18 + t85 (-t123 * t83 + t126 * t81) * pkin(5) + t1 (-t175 * t12 + t174 * t13 + (-t174 * t41 + t175 * t40) * qJD(6)) * pkin(5) (t175 * t2 - t174 * t1 + (-t174 * t6 + t175 * t7) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t28, 0, 0, 0, 0, 0, 0, 0, 0, t9, t8, 0 (t175 * t9 - t174 * t8 + (-t174 * t22 + t175 * t23) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t44, 0, 0, 0, 0, 0, 0, 0, 0, -t13, t12, 0 (-t175 * t13 - t174 * t12 + (t174 * t40 + t175 * t41) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, 0, -t161, 0, -t145, pkin(8) * t161, 0, 0, 0, 0, -t26, 0, -t27, 0, t16, t15 (t175 * t26 - t174 * t27 + (t174 * t54 - t175 * t53) * qJD(6)) * pkin(5) (t175 * t16 - t174 * t15 + (-t174 * t31 + t175 * t32) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t115, -0.2e1 * t116, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, t13, -t155, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, 0, -t27, 0, t16, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
