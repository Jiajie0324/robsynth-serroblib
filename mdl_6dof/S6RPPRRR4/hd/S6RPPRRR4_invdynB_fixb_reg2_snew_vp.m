% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:41:45
% EndTime: 2019-05-05 15:42:06
% DurationCPUTime: 15.66s
% Computational Cost: add. (68299->659), mult. (126032->965), div. (0->0), fcn. (73703->10), ass. (0->424)
t659 = cos(pkin(10));
t670 = qJD(1) ^ 2;
t658 = sin(pkin(10));
t693 = t658 * qJDD(1);
t621 = t659 * t670 - t693;
t622 = qJDD(1) * t659 + t658 * t670;
t665 = sin(qJ(1));
t669 = cos(qJ(1));
t564 = t669 * t621 + t622 * t665;
t656 = g(3) + qJDD(3);
t594 = qJ(3) * t622 + t656 * t658;
t678 = qJ(3) * t621 + t656 * t659;
t742 = -pkin(6) * t564 + t594 * t665 + t669 * t678;
t662 = sin(qJ(6));
t663 = sin(qJ(5));
t667 = cos(qJ(5));
t664 = sin(qJ(4));
t699 = qJD(1) * t664;
t613 = qJD(4) * t667 + t663 * t699;
t614 = -t663 * qJD(4) + t667 * t699;
t666 = cos(qJ(6));
t560 = -t666 * t613 - t614 * t662;
t562 = t613 * t662 - t614 * t666;
t508 = t562 * t560;
t696 = qJD(1) * qJD(4);
t644 = t664 * t696;
t668 = cos(qJ(4));
t694 = qJDD(1) * t668;
t620 = t644 - t694;
t611 = qJDD(5) - t620;
t675 = qJDD(6) + t611;
t733 = -t508 + t675;
t741 = t662 * t733;
t572 = t613 * t614;
t731 = -t572 + t611;
t740 = t663 * t731;
t739 = t666 * t733;
t738 = t667 * t731;
t686 = -t621 * t665 + t669 * t622;
t736 = -pkin(6) * t686 + t594 * t669 - t665 * t678;
t653 = qJDD(1) * qJ(2);
t631 = t669 * g(1) + t665 * g(2);
t677 = 0.2e1 * qJD(2) * qJD(1) - t631;
t674 = t653 + t677;
t727 = pkin(1) + pkin(2);
t588 = -t670 * t727 + t674;
t630 = t665 * g(1) - t669 * g(2);
t681 = -qJDD(2) + t630;
t673 = -t670 * qJ(2) - t681;
t671 = -qJDD(1) * t727 + t673;
t525 = t658 * t588 - t659 * t671;
t526 = t659 * t588 + t658 * t671;
t471 = t525 * t659 - t526 * t658;
t472 = t525 * t658 + t526 * t659;
t405 = t471 * t669 + t472 * t665;
t735 = t471 * t665 - t472 * t669;
t640 = qJD(1) * t668 + qJD(5);
t633 = qJD(6) + t640;
t539 = t633 * t560;
t688 = t668 * t696;
t695 = qJDD(1) * t664;
t618 = -t688 - t695;
t685 = -t667 * qJDD(4) + t663 * t618;
t555 = qJD(5) * t614 - t685;
t556 = t613 * qJD(5) + t663 * qJDD(4) + t667 * t618;
t672 = qJD(6) * t560 - t555 * t662 - t556 * t666;
t732 = -t539 - t672;
t597 = t640 * t613;
t523 = t597 - t556;
t521 = t597 + t556;
t687 = -t666 * t555 + t662 * t556;
t438 = (qJD(6) - t633) * t562 + t687;
t519 = (qJD(5) - t640) * t614 - t685;
t558 = t560 ^ 2;
t559 = t562 ^ 2;
t729 = t613 ^ 2;
t610 = t614 ^ 2;
t632 = t633 ^ 2;
t638 = t640 ^ 2;
t728 = qJD(4) ^ 2;
t726 = pkin(4) * t664;
t725 = pkin(4) * t668;
t724 = qJDD(1) * pkin(1);
t516 = qJDD(1) * pkin(3) - t670 * pkin(7) + t525;
t679 = -t620 - t644;
t680 = -t618 + t688;
t476 = pkin(4) * t679 + pkin(8) * t680 + t516;
t517 = -pkin(3) * t670 - qJDD(1) * pkin(7) + t526;
t507 = t668 * t517 + t664 * t656;
t682 = pkin(8) * t664 + t725;
t676 = t670 * t682;
t487 = -pkin(4) * t728 + qJDD(4) * pkin(8) - t668 * t676 + t507;
t416 = -t667 * t476 + t663 * t487;
t384 = pkin(5) * t731 + pkin(9) * t523 - t416;
t417 = t663 * t476 + t667 * t487;
t584 = pkin(5) * t640 + pkin(9) * t614;
t395 = -pkin(5) * t729 + pkin(9) * t555 - t584 * t640 + t417;
t343 = -t666 * t384 + t395 * t662;
t344 = t662 * t384 + t666 * t395;
t306 = -t343 * t666 + t344 * t662;
t723 = t306 * t663;
t722 = t306 * t667;
t506 = t517 * t664 - t668 * t656;
t486 = -qJDD(4) * pkin(4) - t728 * pkin(8) - t664 * t676 + t506;
t420 = -t555 * pkin(5) - pkin(9) * t729 - t584 * t614 + t486;
t721 = t420 * t662;
t720 = t420 * t666;
t719 = t486 * t663;
t718 = t486 * t667;
t493 = t508 + t675;
t717 = t493 * t662;
t716 = t493 * t666;
t543 = t572 + t611;
t715 = t543 * t663;
t714 = t543 * t667;
t639 = t668 * t670 * t664;
t628 = qJDD(4) + t639;
t711 = t628 * t664;
t710 = t628 * t668;
t629 = qJDD(4) - t639;
t709 = t629 * t664;
t708 = t629 * t668;
t707 = t633 * t662;
t706 = t633 * t666;
t705 = t640 * t663;
t704 = t640 * t667;
t654 = t664 ^ 2;
t703 = t654 * t670;
t702 = t664 * t516;
t701 = t668 * t516;
t655 = t668 ^ 2;
t700 = -t654 - t655;
t692 = t664 * t508;
t691 = t668 * t508;
t690 = t664 * t572;
t689 = t668 * t572;
t307 = t343 * t662 + t666 * t344;
t598 = -pkin(1) * t670 + t674;
t599 = -t673 + t724;
t536 = t669 * t598 - t599 * t665;
t575 = -t630 * t665 - t669 * t631;
t684 = t658 * t639;
t683 = t659 * t639;
t624 = qJDD(1) * t665 + t669 * t670;
t601 = -pkin(6) * t624 + g(3) * t669;
t625 = qJDD(1) * t669 - t665 * t670;
t600 = pkin(6) * t625 + g(3) * t665;
t366 = -t416 * t667 + t417 * t663;
t367 = t416 * t663 + t417 * t667;
t447 = t506 * t668 - t507 * t664;
t448 = t664 * t506 + t668 * t507;
t535 = t598 * t665 + t599 * t669;
t574 = t630 * t669 - t631 * t665;
t650 = t655 * t670;
t637 = -t650 - t728;
t636 = t650 - t728;
t635 = -t703 - t728;
t634 = -t703 + t728;
t627 = t650 - t703;
t626 = t650 + t703;
t623 = t700 * qJDD(1);
t619 = 0.2e1 * t644 - t694;
t617 = 0.2e1 * t688 + t695;
t612 = t700 * t696;
t592 = -t610 + t638;
t591 = -t638 + t729;
t590 = t618 * t668 + t654 * t696;
t589 = -t620 * t664 + t655 * t696;
t586 = qJDD(4) * t658 + t612 * t659;
t585 = qJDD(4) * t659 - t612 * t658;
t581 = -t635 * t664 - t708;
t580 = -t634 * t664 + t710;
t579 = t637 * t668 - t711;
t578 = t636 * t668 - t709;
t577 = t635 * t668 - t709;
t576 = t637 * t664 + t710;
t571 = -t610 + t729;
t570 = -t610 - t638;
t569 = t623 * t659 - t626 * t658;
t568 = t623 * t658 + t626 * t659;
t563 = t617 * t664 + t619 * t668;
t557 = -t638 - t729;
t554 = t590 * t659 - t684;
t553 = t589 * t659 + t684;
t552 = -t590 * t658 - t683;
t551 = -t589 * t658 + t683;
t550 = t580 * t659 - t664 * t693;
t549 = t578 * t659 - t668 * t693;
t548 = -t580 * t658 - t659 * t695;
t547 = -t578 * t658 - t659 * t694;
t541 = t610 + t729;
t538 = -t559 + t632;
t537 = t558 - t632;
t534 = t581 * t659 - t617 * t658;
t533 = t579 * t659 - t619 * t658;
t532 = t581 * t658 + t617 * t659;
t531 = t579 * t658 + t619 * t659;
t530 = (t613 * t667 - t614 * t663) * t640;
t529 = (-t613 * t663 - t614 * t667) * t640;
t528 = t563 * t659 - t627 * t658;
t527 = -t563 * t658 - t627 * t659;
t524 = -t559 - t632;
t520 = (qJD(5) + t640) * t614 - t685;
t514 = t556 * t667 + t614 * t705;
t513 = -t556 * t663 + t614 * t704;
t512 = -t555 * t663 - t613 * t704;
t511 = -t555 * t667 + t613 * t705;
t510 = t568 * t665 + t569 * t669;
t509 = -t568 * t669 + t569 * t665;
t505 = t530 * t668 + t611 * t664;
t504 = -t559 + t558;
t503 = t591 * t667 - t715;
t502 = -t592 * t663 + t738;
t501 = -t591 * t663 - t714;
t500 = -t592 * t667 - t740;
t499 = -t570 * t663 - t714;
t498 = t570 * t667 - t715;
t497 = -t632 - t558;
t496 = t557 * t667 - t740;
t495 = t557 * t663 + t738;
t491 = -pkin(7) * t577 + t701;
t490 = -pkin(7) * t576 + t702;
t489 = (-t560 * t666 + t562 * t662) * t633;
t488 = (-t560 * t662 - t562 * t666) * t633;
t484 = -pkin(3) * t577 + t507;
t483 = -pkin(3) * t576 + t506;
t482 = t514 * t668 + t690;
t481 = t512 * t668 - t690;
t480 = t532 * t665 + t534 * t669;
t479 = t531 * t665 + t533 * t669;
t478 = -t532 * t669 + t534 * t665;
t477 = -t531 * t669 + t533 * t665;
t473 = -t558 - t559;
t467 = -qJD(6) * t562 - t687;
t466 = qJ(2) * t656 + qJ(3) * t471;
t465 = t520 * t667 - t521 * t663;
t464 = t519 * t667 - t523 * t663;
t463 = -t520 * t663 - t521 * t667;
t462 = t519 * t663 + t523 * t667;
t461 = -qJ(3) * t472 + t656 * t727;
t460 = t505 * t659 - t529 * t658;
t459 = -t505 * t658 - t529 * t659;
t458 = t503 * t668 + t519 * t664;
t457 = t502 * t668 - t523 * t664;
t456 = t537 * t666 - t717;
t455 = -t538 * t662 + t739;
t454 = t537 * t662 + t716;
t453 = t538 * t666 + t741;
t452 = t499 * t668 + t521 * t664;
t451 = t499 * t664 - t521 * t668;
t450 = -t524 * t662 - t716;
t449 = t524 * t666 - t717;
t445 = t496 * t668 - t520 * t664;
t444 = t496 * t664 + t520 * t668;
t443 = t465 * t668 - t571 * t664;
t442 = -t539 + t672;
t437 = (qJD(6) + t633) * t562 + t687;
t436 = -t562 * t707 - t666 * t672;
t435 = t562 * t706 - t662 * t672;
t434 = -t467 * t662 + t560 * t706;
t433 = t467 * t666 + t560 * t707;
t432 = t497 * t666 - t741;
t431 = t497 * t662 + t739;
t430 = t482 * t659 - t513 * t658;
t429 = t481 * t659 - t511 * t658;
t428 = -t482 * t658 - t513 * t659;
t427 = -t481 * t658 - t511 * t659;
t426 = t464 * t668 - t541 * t664;
t425 = t464 * t664 + t541 * t668;
t424 = -pkin(8) * t498 + t718;
t423 = -qJ(3) * t568 + t447 * t659;
t422 = -qJ(3) * t569 - t447 * t658;
t421 = -pkin(8) * t495 + t719;
t419 = -t488 * t663 + t489 * t667;
t418 = -t488 * t667 - t489 * t663;
t415 = t448 * t659 + t516 * t658;
t414 = t448 * t658 - t516 * t659;
t413 = t458 * t659 - t501 * t658;
t412 = t457 * t659 - t500 * t658;
t411 = -t458 * t658 - t501 * t659;
t410 = -t457 * t658 - t500 * t659;
t409 = t419 * t668 + t664 * t675;
t408 = t452 * t659 + t498 * t658;
t407 = t452 * t658 - t498 * t659;
t404 = t445 * t659 + t495 * t658;
t403 = t445 * t658 - t495 * t659;
t402 = qJ(2) * t577 - qJ(3) * t532 - t484 * t658 + t491 * t659;
t401 = qJ(2) * t576 - qJ(3) * t531 - t483 * t658 + t490 * t659;
t400 = -t454 * t663 + t456 * t667;
t399 = -t453 * t663 + t455 * t667;
t398 = -t454 * t667 - t456 * t663;
t397 = -t453 * t667 - t455 * t663;
t396 = -pkin(4) * t498 + t417;
t394 = -pkin(4) * t495 + t416;
t392 = t443 * t659 - t463 * t658;
t391 = -t443 * t658 - t463 * t659;
t390 = -qJ(3) * t534 - t659 * t484 - t658 * t491 + t577 * t727;
t389 = -qJ(3) * t533 - t659 * t483 - t658 * t490 + t576 * t727;
t388 = -t449 * t663 + t450 * t667;
t387 = t449 * t667 + t450 * t663;
t386 = t426 * t659 + t462 * t658;
t385 = t426 * t658 - t462 * t659;
t381 = -t438 * t666 - t442 * t662;
t380 = -t437 * t666 - t662 * t732;
t379 = -t438 * t662 + t442 * t666;
t378 = -t437 * t662 + t666 * t732;
t377 = -pkin(9) * t449 + t720;
t376 = -t435 * t663 + t436 * t667;
t375 = -t433 * t663 + t434 * t667;
t374 = -t435 * t667 - t436 * t663;
t373 = -t433 * t667 - t434 * t663;
t372 = -t431 * t663 + t432 * t667;
t371 = t431 * t667 + t432 * t663;
t370 = -pkin(9) * t431 + t721;
t369 = -pkin(3) * t451 + pkin(4) * t521 - pkin(8) * t499 - t719;
t368 = -pkin(3) * t444 - pkin(4) * t520 - pkin(8) * t496 + t718;
t365 = t409 * t659 - t418 * t658;
t364 = -t409 * t658 - t418 * t659;
t363 = t376 * t668 + t692;
t362 = t375 * t668 - t692;
t361 = t414 * t665 + t415 * t669;
t360 = -t414 * t669 + t415 * t665;
t359 = t400 * t668 - t438 * t664;
t358 = t399 * t668 - t442 * t664;
t357 = t388 * t668 + t664 * t732;
t356 = t388 * t664 - t668 * t732;
t355 = t407 * t665 + t408 * t669;
t354 = -t407 * t669 + t408 * t665;
t353 = t403 * t665 + t404 * t669;
t352 = -t403 * t669 + t404 * t665;
t351 = -pkin(5) * t732 + pkin(9) * t450 + t721;
t350 = t367 * t668 + t486 * t664;
t349 = t367 * t664 - t486 * t668;
t348 = t372 * t668 + t437 * t664;
t347 = t372 * t664 - t437 * t668;
t346 = -pkin(5) * t437 + pkin(9) * t432 - t720;
t345 = -pkin(8) * t462 - t366;
t341 = -pkin(7) * t451 - t396 * t664 + t424 * t668;
t340 = t385 * t665 + t386 * t669;
t339 = -t385 * t669 + t386 * t665;
t338 = -pkin(7) * t444 - t394 * t664 + t421 * t668;
t337 = -t379 * t663 + t381 * t667;
t336 = -t378 * t663 + t380 * t667;
t335 = t379 * t667 + t381 * t663;
t334 = -t378 * t667 - t380 * t663;
t333 = -qJ(3) * t414 - (pkin(3) * t658 - pkin(7) * t659 + qJ(2)) * t447;
t332 = t359 * t659 - t398 * t658;
t331 = t358 * t659 - t397 * t658;
t330 = -t359 * t658 - t398 * t659;
t329 = -t358 * t658 - t397 * t659;
t328 = t336 * t668 - t504 * t664;
t327 = -pkin(3) * t425 - pkin(4) * t541 - pkin(8) * t464 - t367;
t326 = t363 * t659 - t374 * t658;
t325 = t362 * t659 - t373 * t658;
t324 = -t363 * t658 - t374 * t659;
t323 = -t362 * t658 - t373 * t659;
t322 = t357 * t659 + t387 * t658;
t321 = t357 * t658 - t387 * t659;
t320 = t337 * t668 + t473 * t664;
t319 = t337 * t664 - t473 * t668;
t318 = -qJ(3) * t415 - (pkin(3) * t659 + pkin(7) * t658 + t727) * t447;
t317 = -pkin(7) * t425 + t345 * t668 + t462 * t726;
t316 = t348 * t659 + t371 * t658;
t315 = t348 * t658 - t371 * t659;
t314 = t350 * t659 + t366 * t658;
t313 = t350 * t658 - t366 * t659;
t312 = -pkin(4) * t335 - pkin(5) * t379;
t311 = -pkin(3) * t349 + pkin(4) * t486 - pkin(8) * t367;
t310 = -pkin(4) * t387 - pkin(5) * t449 + t344;
t309 = -pkin(4) * t371 - pkin(5) * t431 + t343;
t308 = -pkin(8) * t387 - t351 * t663 + t377 * t667;
t305 = -pkin(8) * t371 - t346 * t663 + t370 * t667;
t304 = -pkin(7) * t349 + (-pkin(8) * t668 + t726) * t366;
t303 = qJ(2) * t451 - qJ(3) * t407 + t341 * t659 - t369 * t658;
t302 = -pkin(5) * t420 + pkin(9) * t307;
t301 = t328 * t659 - t334 * t658;
t300 = -t328 * t658 - t334 * t659;
t299 = qJ(2) * t444 - qJ(3) * t403 + t338 * t659 - t368 * t658;
t298 = t320 * t659 + t335 * t658;
t297 = t320 * t658 - t335 * t659;
t296 = -qJ(3) * t408 - t658 * t341 - t659 * t369 + t451 * t727;
t295 = -pkin(9) * t379 - t306;
t294 = t321 * t665 + t322 * t669;
t293 = -t321 * t669 + t322 * t665;
t292 = -qJ(3) * t404 - t658 * t338 - t659 * t368 + t444 * t727;
t291 = -pkin(5) * t473 + pkin(9) * t381 + t307;
t290 = t315 * t665 + t316 * t669;
t289 = -t315 * t669 + t316 * t665;
t288 = -pkin(3) * t356 + pkin(4) * t732 - pkin(8) * t388 - t351 * t667 - t377 * t663;
t287 = t313 * t665 + t314 * t669;
t286 = -t313 * t669 + t314 * t665;
t285 = -pkin(3) * t347 + pkin(4) * t437 - pkin(8) * t372 - t346 * t667 - t370 * t663;
t284 = qJ(2) * t425 - qJ(3) * t385 + t317 * t659 - t327 * t658;
t283 = -qJ(3) * t386 - t658 * t317 - t659 * t327 + t425 * t727;
t282 = t307 * t667 - t723;
t281 = t307 * t663 + t722;
t280 = t282 * t668 + t420 * t664;
t279 = t282 * t664 - t420 * t668;
t278 = -pkin(7) * t356 + t308 * t668 - t310 * t664;
t277 = -pkin(7) * t347 + t305 * t668 - t309 * t664;
t276 = t297 * t665 + t298 * t669;
t275 = -t297 * t669 + t298 * t665;
t274 = -pkin(4) * t281 - pkin(5) * t306;
t273 = qJ(2) * t349 - qJ(3) * t313 + t304 * t659 - t311 * t658;
t272 = -pkin(8) * t335 - t291 * t663 + t295 * t667;
t271 = -qJ(3) * t314 - t658 * t304 - t659 * t311 + t349 * t727;
t270 = -pkin(3) * t319 + pkin(4) * t473 - pkin(8) * t337 - t291 * t667 - t295 * t663;
t269 = -pkin(8) * t281 - pkin(9) * t722 - t302 * t663;
t268 = t280 * t659 + t281 * t658;
t267 = t280 * t658 - t281 * t659;
t266 = -pkin(7) * t319 + t272 * t668 - t312 * t664;
t265 = qJ(2) * t356 - qJ(3) * t321 + t278 * t659 - t288 * t658;
t264 = -qJ(3) * t322 - t658 * t278 - t659 * t288 + t356 * t727;
t263 = qJ(2) * t347 - qJ(3) * t315 + t277 * t659 - t285 * t658;
t262 = -qJ(3) * t316 - t658 * t277 - t659 * t285 + t347 * t727;
t261 = -pkin(3) * t279 + pkin(4) * t420 - pkin(8) * t282 + pkin(9) * t723 - t302 * t667;
t260 = t267 * t665 + t268 * t669;
t259 = -t267 * t669 + t268 * t665;
t258 = -pkin(7) * t279 + t269 * t668 - t274 * t664;
t257 = qJ(2) * t319 - qJ(3) * t297 + t266 * t659 - t270 * t658;
t256 = -qJ(3) * t298 - t658 * t266 - t659 * t270 + t319 * t727;
t255 = qJ(2) * t279 - qJ(3) * t267 + t258 * t659 - t261 * t658;
t254 = -qJ(3) * t268 - t658 * t258 - t659 * t261 + t279 * t727;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t624, -t625, 0, t575, 0, 0, 0, 0, 0, 0, -t624, 0, t625, t536, 0, 0, 0, 0, 0, 0, -t564, t686, 0, -t735, 0, 0, 0, 0, 0, 0, t479, t480, t510, t361, 0, 0, 0, 0, 0, 0, t353, t355, t340, t287, 0, 0, 0, 0, 0, 0, t290, t294, t276, t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t625, -t624, 0, t574, 0, 0, 0, 0, 0, 0, t625, 0, t624, t535, 0, 0, 0, 0, 0, 0, t686, t564, 0, t405, 0, 0, 0, 0, 0, 0, t477, t478, t509, t360, 0, 0, 0, 0, 0, 0, t352, t354, t339, t286, 0, 0, 0, 0, 0, 0, t289, t293, t275, t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t656, 0, 0, 0, 0, 0, 0, -t576, -t577, 0, t447, 0, 0, 0, 0, 0, 0, -t444, -t451, -t425, -t349, 0, 0, 0, 0, 0, 0, -t347, -t356, -t319, -t279; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t625, 0, -t624, 0, -t600, -t601, -t574, -pkin(6) * t574, 0, t625, 0, 0, t624, 0, -t600, -t535, t601, -pkin(6) * t535 + (-pkin(1) * t665 + qJ(2) * t669) * g(3), 0, 0, -t686, 0, -t564, 0, t736, t742, t405, -pkin(6) * t405 - t461 * t665 + t466 * t669, -t552 * t665 + t554 * t669, -t527 * t665 + t528 * t669, -t548 * t665 + t550 * t669, -t551 * t665 + t553 * t669, -t547 * t665 + t549 * t669, -t585 * t665 + t586 * t669, -pkin(6) * t477 - t389 * t665 + t401 * t669, -pkin(6) * t478 - t390 * t665 + t402 * t669, -pkin(6) * t509 - t422 * t665 + t423 * t669, -pkin(6) * t360 - t318 * t665 + t333 * t669, -t428 * t665 + t430 * t669, -t391 * t665 + t392 * t669, -t410 * t665 + t412 * t669, -t427 * t665 + t429 * t669, -t411 * t665 + t413 * t669, -t459 * t665 + t460 * t669, -pkin(6) * t352 - t292 * t665 + t299 * t669, -pkin(6) * t354 - t296 * t665 + t303 * t669, -pkin(6) * t339 - t283 * t665 + t284 * t669, -pkin(6) * t286 - t271 * t665 + t273 * t669, -t324 * t665 + t326 * t669, -t300 * t665 + t301 * t669, -t329 * t665 + t331 * t669, -t323 * t665 + t325 * t669, -t330 * t665 + t332 * t669, -t364 * t665 + t365 * t669, -pkin(6) * t289 - t262 * t665 + t263 * t669, -pkin(6) * t293 - t264 * t665 + t265 * t669, -pkin(6) * t275 - t256 * t665 + t257 * t669, -pkin(6) * t259 - t254 * t665 + t255 * t669; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t624, 0, t625, 0, t601, -t600, t575, pkin(6) * t575, 0, t624, 0, 0, -t625, 0, t601, t536, t600, pkin(6) * t536 + (pkin(1) * t669 + qJ(2) * t665) * g(3), 0, 0, -t564, 0, t686, 0, t742, -t736, t735, -pkin(6) * t735 + t461 * t669 + t466 * t665, t552 * t669 + t554 * t665, t527 * t669 + t528 * t665, t548 * t669 + t550 * t665, t551 * t669 + t553 * t665, t547 * t669 + t549 * t665, t585 * t669 + t586 * t665, pkin(6) * t479 + t389 * t669 + t401 * t665, pkin(6) * t480 + t390 * t669 + t402 * t665, pkin(6) * t510 + t422 * t669 + t423 * t665, pkin(6) * t361 + t318 * t669 + t333 * t665, t428 * t669 + t430 * t665, t391 * t669 + t392 * t665, t410 * t669 + t412 * t665, t427 * t669 + t429 * t665, t411 * t669 + t413 * t665, t459 * t669 + t460 * t665, pkin(6) * t353 + t292 * t669 + t299 * t665, pkin(6) * t355 + t296 * t669 + t303 * t665, pkin(6) * t340 + t283 * t669 + t284 * t665, pkin(6) * t287 + t271 * t669 + t273 * t665, t324 * t669 + t326 * t665, t300 * t669 + t301 * t665, t329 * t669 + t331 * t665, t323 * t669 + t325 * t665, t330 * t669 + t332 * t665, t364 * t669 + t365 * t665, pkin(6) * t290 + t262 * t669 + t263 * t665, pkin(6) * t294 + t264 * t669 + t265 * t665, pkin(6) * t276 + t256 * t669 + t257 * t665, pkin(6) * t260 + t254 * t669 + t255 * t665; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t630, t631, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t681 + 0.2e1 * t724, 0, 0.2e1 * t653 + t677, pkin(1) * t599 + qJ(2) * t598, 0, 0, 0, 0, 0, qJDD(1), -qJ(2) * t621 + t622 * t727 + t525, qJ(2) * t622 + t621 * t727 + t526, 0, qJ(2) * t472 + t471 * t727, t680 * t664, t617 * t668 - t619 * t664, -t634 * t668 - t711, t679 * t668, -t636 * t664 - t708, 0, -pkin(3) * t619 - pkin(7) * t579 + qJ(2) * t533 - t531 * t727 + t701, -pkin(3) * t617 - pkin(7) * t581 + qJ(2) * t534 - t532 * t727 - t702, -pkin(3) * t626 - pkin(7) * t623 + qJ(2) * t569 - t568 * t727 - t448, pkin(3) * t516 - pkin(7) * t448 + qJ(2) * t415 - t414 * t727, -t514 * t664 + t689, -t465 * t664 - t571 * t668, -t502 * t664 - t523 * t668, -t512 * t664 - t689, -t503 * t664 + t519 * t668, -t530 * t664 + t611 * t668, pkin(3) * t495 - pkin(7) * t445 + qJ(2) * t404 - t668 * t394 - t403 * t727 - t664 * t421, pkin(3) * t498 - pkin(7) * t452 + qJ(2) * t408 - t668 * t396 - t407 * t727 - t664 * t424, -pkin(7) * t426 + qJ(2) * t386 - t664 * t345 + (pkin(3) + t725) * t462 - t727 * t385, -pkin(7) * t350 + qJ(2) * t314 - t727 * t313 + (pkin(3) + t682) * t366, -t376 * t664 + t691, -t336 * t664 - t504 * t668, -t399 * t664 - t442 * t668, -t375 * t664 - t691, -t400 * t664 - t438 * t668, -t419 * t664 + t668 * t675, pkin(3) * t371 - pkin(7) * t348 + qJ(2) * t316 - t664 * t305 - t668 * t309 - t315 * t727, pkin(3) * t387 - pkin(7) * t357 + qJ(2) * t322 - t664 * t308 - t668 * t310 - t321 * t727, pkin(3) * t335 - pkin(7) * t320 + qJ(2) * t298 - t664 * t272 - t297 * t727 - t668 * t312, pkin(3) * t281 - pkin(7) * t280 + qJ(2) * t268 - t267 * t727 - t664 * t269 - t668 * t274;];
tauB_reg  = t1;
