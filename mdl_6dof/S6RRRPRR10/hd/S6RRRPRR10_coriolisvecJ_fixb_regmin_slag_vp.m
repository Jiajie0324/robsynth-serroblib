% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR10_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:21:56
% EndTime: 2019-03-09 19:22:15
% DurationCPUTime: 6.98s
% Computational Cost: add. (6119->529), mult. (14505->715), div. (0->0), fcn. (10146->8), ass. (0->255)
t242 = cos(qJ(3));
t322 = qJD(3) * t242;
t243 = cos(qJ(2));
t328 = qJD(1) * t243;
t414 = -t242 * t328 + t322;
t238 = sin(qJ(3));
t304 = t238 * t328;
t324 = qJD(3) * t238;
t413 = t304 - t324;
t239 = sin(qJ(2));
t191 = -pkin(2) * t243 - pkin(8) * t239 - pkin(1);
t160 = t191 * qJD(1);
t226 = pkin(7) * t328;
t199 = qJD(2) * pkin(8) + t226;
t115 = t242 * t160 - t238 * t199;
t316 = qJD(4) - t115;
t271 = pkin(2) * t239 - pkin(8) * t243;
t185 = t271 * qJD(1);
t156 = t238 * t185;
t329 = qJD(1) * t239;
t337 = qJ(4) * t329 + t156;
t346 = t239 * t242;
t347 = t238 * t243;
t376 = pkin(8) - pkin(9);
t412 = t376 * t324 + (-pkin(7) * t346 + pkin(9) * t347) * qJD(1) + t337;
t201 = t376 * t242;
t375 = pkin(7) * t238;
t306 = -pkin(3) - t375;
t345 = t242 * t243;
t252 = -pkin(9) * t345 + (-pkin(4) + t306) * t239;
t355 = t185 * t242;
t411 = -qJD(1) * t252 + qJD(3) * t201 + t355;
t317 = t242 * qJD(2);
t173 = t238 * t329 - t317;
t303 = t242 * t329;
t327 = qJD(2) * t238;
t175 = t303 + t327;
t237 = sin(qJ(5));
t241 = cos(qJ(5));
t111 = t173 * t237 + t175 * t241;
t236 = sin(qJ(6));
t240 = cos(qJ(6));
t263 = -t241 * t173 + t175 * t237;
t395 = -t240 * t111 + t236 * t263;
t396 = t111 * t236 + t240 * t263;
t406 = t395 * t396;
t410 = pkin(9) * t175 - t316;
t401 = t395 ^ 2 - t396 ^ 2;
t318 = qJD(6) * t240;
t319 = qJD(6) * t236;
t314 = qJD(1) * qJD(2);
t294 = t243 * t314;
t323 = qJD(3) * t239;
t299 = t238 * t323;
t313 = qJD(2) * qJD(3);
t132 = qJD(1) * t299 + (-t294 - t313) * t242;
t325 = qJD(2) * t243;
t253 = t238 * t325 + t239 * t322;
t133 = qJD(1) * t253 + t238 * t313;
t320 = qJD(5) * t241;
t321 = qJD(5) * t237;
t40 = -t241 * t132 + t237 * t133 + t173 * t320 - t175 * t321;
t284 = -t132 * t237 - t241 * t133;
t41 = qJD(5) * t111 + t284;
t10 = -t111 * t319 - t236 * t41 + t240 * t40 - t263 * t318;
t215 = -qJD(3) + t328;
t315 = -qJD(5) - t215;
t403 = qJD(6) - t315;
t400 = t396 * t403 + t10;
t377 = pkin(3) + pkin(4);
t63 = t377 * t215 - t410;
t204 = t215 * qJ(4);
t116 = t238 * t160 + t242 * t199;
t83 = pkin(9) * t173 + t116;
t69 = -t204 + t83;
t22 = -t237 * t69 + t241 * t63;
t407 = pkin(10) * t111;
t18 = t22 - t407;
t16 = -pkin(5) * t315 + t18;
t23 = t237 * t63 + t241 * t69;
t391 = pkin(10) * t263;
t19 = t23 - t391;
t220 = t239 * t314;
t202 = t215 * qJD(4);
t210 = qJ(4) * t220;
t188 = t271 * qJD(2);
t162 = qJD(1) * t188;
t259 = t160 * t322 + t238 * t162 - t199 * t324;
t277 = pkin(7) * t220;
t248 = t242 * t277 - t259;
t46 = -t202 + t210 - t248;
t30 = pkin(9) * t133 + t46;
t276 = t160 * t324 - t242 * t162 + t199 * t322 - t238 * t277;
t33 = pkin(9) * t132 - t377 * t220 + t276;
t290 = -t237 * t30 + t241 * t33;
t250 = -t23 * qJD(5) + t290;
t3 = -pkin(5) * t220 - pkin(10) * t40 + t250;
t258 = t237 * t33 + t241 * t30 + t63 * t320 - t321 * t69;
t5 = -pkin(10) * t41 + t258;
t295 = -t16 * t318 + t19 * t319 - t236 * t3 - t240 * t5;
t198 = -qJD(2) * pkin(2) + pkin(7) * t329;
t99 = t173 * pkin(3) - t175 * qJ(4) + t198;
t73 = -pkin(4) * t173 - t99;
t44 = pkin(5) * t263 + t73;
t399 = t44 * t396 + t295;
t305 = -t236 * t5 + t240 * t3;
t409 = -t44 * t395 - t305;
t249 = qJD(6) * t395 - t236 * t40 - t240 * t41;
t408 = t395 * t403 - t249;
t177 = t237 * t238 + t241 * t242;
t255 = t243 * t177;
t381 = qJD(3) - qJD(5);
t341 = -qJD(1) * t255 + t381 * t177;
t340 = t237 * t414 + t238 * t320 + t413 * t241 - t242 * t321;
t404 = qJ(4) * t414 + t238 * qJD(4) + t226;
t402 = t111 ^ 2 - t263 ^ 2;
t398 = -t111 * t73 + t250;
t367 = t19 * t240;
t7 = t16 * t236 + t367;
t397 = -qJD(6) * t7 - t409;
t392 = -0.2e1 * t314;
t390 = t411 * t241;
t278 = pkin(3) * t220;
t60 = t276 - t278;
t93 = -t204 + t116;
t389 = t215 * t93 + t60;
t388 = t111 * t263;
t308 = t377 * t238;
t338 = -qJD(3) * t308 + t377 * t304 + t404;
t285 = -qJ(4) * t237 - t241 * t377;
t385 = -qJD(5) * t285 + t237 * t83 + t241 * t410;
t189 = qJ(4) * t241 - t237 * t377;
t384 = -qJD(5) * t189 + t237 * t410 - t241 * t83;
t200 = t376 * t238;
t335 = t237 * t200 + t241 * t201;
t383 = -t200 * t320 + t201 * t321 - t411 * t237 + t241 * t412;
t300 = t243 * t317;
t382 = -t299 + t300;
t380 = t263 * t315 - t40;
t379 = -t73 * t263 + t258;
t378 = t175 ^ 2;
t348 = t238 * t241;
t261 = t237 * t242 - t348;
t112 = t240 * t177 - t236 * t261;
t374 = -qJD(6) * t112 - t236 * t340 + t240 * t341;
t113 = -t177 * t236 - t240 * t261;
t373 = qJD(6) * t113 + t236 * t341 + t240 * t340;
t372 = pkin(5) * t340 + t338;
t369 = t175 * t99;
t368 = t19 * t236;
t51 = t133 * pkin(3) + pkin(7) * t294 + t132 * qJ(4) - t175 * qJD(4);
t365 = t238 * t51;
t364 = t242 * t51;
t217 = pkin(7) * t347;
t232 = t243 * pkin(3);
t104 = pkin(4) * t243 + t217 + t232 + (-pkin(9) * t239 - t191) * t242;
t218 = pkin(7) * t345;
t332 = t238 * t191 + t218;
t130 = -qJ(4) * t243 + t332;
t349 = t238 * t239;
t114 = pkin(9) * t349 + t130;
t363 = t237 * t104 + t241 * t114;
t362 = t385 + t407;
t361 = t384 + t391;
t359 = t132 * t238;
t358 = t173 * t215;
t357 = t175 * t173;
t356 = t175 * t215;
t354 = t198 * t238;
t353 = t198 * t242;
t352 = t215 * t242;
t351 = t236 * t237;
t350 = t236 * t241;
t229 = t238 * qJ(4);
t246 = qJD(1) ^ 2;
t344 = t243 * t246;
t245 = qJD(2) ^ 2;
t343 = t245 * t239;
t342 = t245 * t243;
t339 = pkin(3) * t413 + t404;
t336 = t238 * t188 + t191 * t322;
t122 = t175 * pkin(3) + t173 * qJ(4);
t333 = qJ(4) * t300 + qJD(4) * t346;
t233 = t239 ^ 2;
t330 = -t243 ^ 2 + t233;
t326 = qJD(2) * t239;
t312 = pkin(8) * t215 * t238;
t311 = pkin(8) * t352;
t190 = -t242 * pkin(3) - pkin(2) - t229;
t310 = pkin(8) * t326;
t309 = pkin(8) * t317;
t307 = qJ(4) * t326 + t336;
t298 = t243 * t324;
t296 = t215 * t322;
t270 = -qJD(3) * t218 + t188 * t242 - t191 * t324;
t50 = pkin(9) * t299 + qJD(2) * t252 - t270;
t52 = (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t346 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t238) * t243 + t307;
t289 = -t237 * t52 + t241 * t50;
t287 = t241 * t104 - t114 * t237;
t286 = pkin(1) * t392;
t283 = t241 * t200 - t201 * t237;
t282 = t191 * t242 - t217;
t281 = t315 ^ 2;
t167 = t242 * pkin(4) - t190;
t280 = t173 + t317;
t279 = -t175 + t327;
t275 = -pkin(7) - t308;
t86 = -pkin(4) * t175 - t122;
t95 = -pkin(10) * t177 + t335;
t274 = -pkin(5) * t329 + pkin(10) * t341 + qJD(5) * t335 + qJD(6) * t95 - t237 * t412 - t390;
t94 = pkin(10) * t261 + t283;
t273 = pkin(10) * t340 - qJD(6) * t94 + t383;
t272 = t239 * t306;
t269 = t403 * t240;
t150 = t177 * t239;
t35 = pkin(5) * t243 - pkin(10) * t150 + t287;
t149 = t237 * t346 - t239 * t348;
t36 = -pkin(10) * t149 + t363;
t268 = -t236 * t36 + t240 * t35;
t267 = t236 * t35 + t240 * t36;
t91 = pkin(3) * t215 + t316;
t266 = -t238 * t93 + t242 * t91;
t88 = t240 * t149 + t150 * t236;
t89 = -t149 * t236 + t150 * t240;
t184 = -pkin(5) + t285;
t262 = t184 * t236 + t189 * t240;
t260 = qJD(1) * t233 - t215 * t243;
t257 = t104 * t320 - t114 * t321 + t237 * t50 + t241 * t52;
t256 = -t116 * t215 - t276;
t214 = qJ(4) * t346;
t129 = t239 * t275 + t214;
t34 = -pkin(4) * t133 - t51;
t247 = -t115 * t215 + t248;
t65 = (-t377 * t242 - t229) * t323 + t275 * t325 + t333;
t142 = -t214 + (pkin(3) * t238 + pkin(7)) * t239;
t131 = t232 - t282;
t123 = pkin(5) * t177 + t167;
t121 = qJD(1) * t272 - t355;
t120 = -pkin(7) * t303 + t337;
t85 = -t132 - t358;
t84 = pkin(5) * t149 + t129;
t79 = pkin(3) * t253 + pkin(7) * t325 + qJ(4) * t299 - t333;
t72 = qJD(2) * t272 - t270;
t68 = -qJD(4) * t243 + (-t239 * t317 - t298) * pkin(7) + t307;
t67 = t239 * t261 * t381 + qJD(2) * t255;
t66 = qJD(5) * t150 + t237 * t382 - t241 * t253;
t45 = -pkin(5) * t111 + t86;
t24 = pkin(5) * t66 + t65;
t15 = qJD(6) * t89 + t236 * t67 + t240 * t66;
t14 = -qJD(6) * t88 - t236 * t66 + t240 * t67;
t12 = pkin(5) * t41 + t34;
t9 = -pkin(10) * t66 + t257;
t8 = -pkin(5) * t326 - pkin(10) * t67 - qJD(5) * t363 + t289;
t6 = t16 * t240 - t368;
t1 = [0, 0, 0, 0.2e1 * t243 * t220, t330 * t392, t342, -t343, 0, -pkin(7) * t342 + t239 * t286, pkin(7) * t343 + t243 * t286, -t132 * t346 + t175 * t382 (-t173 * t242 - t175 * t238) * t325 + (t359 - t133 * t242 + (t173 * t238 - t175 * t242) * qJD(3)) * t239, t215 * t299 + t132 * t243 + (t175 * t239 + t242 * t260) * qJD(2), t239 * t296 + t133 * t243 + (-t173 * t239 - t238 * t260) * qJD(2) (-t215 - t328) * t326, -t270 * t215 + t276 * t243 + (pkin(7) * t133 + t198 * t322) * t239 + ((pkin(7) * t173 + t354) * t243 + (t282 * qJD(1) + t115 + (-t215 + t328) * t375) * t239) * qJD(2) (-pkin(7) * t298 + t336) * t215 + t259 * t243 + (-pkin(7) * t132 - t198 * t324) * t239 + ((pkin(7) * t175 + t353) * t243 + (-pkin(7) * t352 - qJD(1) * t332 - t116) * t239) * qJD(2), t133 * t142 + t173 * t79 + t215 * t72 + (t327 * t99 + t60) * t243 + (t99 * t322 + t365 + (-qJD(1) * t131 - t91) * qJD(2)) * t239, -t130 * t133 - t131 * t132 - t173 * t68 + t175 * t72 + t266 * t325 + (-t238 * t46 + t242 * t60 + (-t238 * t91 - t242 * t93) * qJD(3)) * t239, t132 * t142 - t175 * t79 - t215 * t68 + (-t317 * t99 - t46) * t243 + (t99 * t324 - t364 + (qJD(1) * t130 + t93) * qJD(2)) * t239, t130 * t46 + t131 * t60 + t142 * t51 + t68 * t93 + t72 * t91 + t79 * t99, t111 * t67 + t150 * t40, -t111 * t66 - t149 * t40 - t150 * t41 - t263 * t67, -t315 * t67 + t243 * t40 + (-qJD(1) * t150 - t111) * t326, t315 * t66 - t243 * t41 + (qJD(1) * t149 + t263) * t326 (t315 - t328) * t326, -t289 * t315 + t290 * t243 + t65 * t263 + t129 * t41 + t34 * t149 + t73 * t66 + (-t23 * t243 + t315 * t363) * qJD(5) + (-qJD(1) * t287 - t22) * t326, t257 * t315 - t258 * t243 + t65 * t111 + t129 * t40 + t34 * t150 + t73 * t67 + (qJD(1) * t363 + t23) * t326, t10 * t89 - t14 * t395, -t10 * t88 - t14 * t396 + t15 * t395 + t249 * t89, t10 * t243 + t14 * t403 + (-qJD(1) * t89 + t395) * t326, t249 * t243 - t15 * t403 + (qJD(1) * t88 + t396) * t326 (-t403 - t328) * t326 (-t236 * t9 + t240 * t8) * t403 + t305 * t243 + t24 * t396 - t84 * t249 + t12 * t88 + t44 * t15 + (-t243 * t7 - t267 * t403) * qJD(6) + (-qJD(1) * t268 - t6) * t326 -(qJD(6) * t268 + t236 * t8 + t240 * t9) * t403 + t295 * t243 - t24 * t395 + t84 * t10 + t12 * t89 + t44 * t14 + (qJD(1) * t267 + t7) * t326; 0, 0, 0, -t239 * t344, t330 * t246, 0, 0, 0, t246 * pkin(1) * t239, pkin(1) * t344, -t175 * t352 - t359 (-t132 + t358) * t242 + (-t133 + t356) * t238, -t296 + (t215 * t345 + t239 * t279) * qJD(1), t215 * t324 + (-t215 * t347 + t239 * t280) * qJD(1), t215 * t329, t185 * t352 - pkin(2) * t133 + (t311 + t354) * qJD(3) + (-t115 * t239 + (-t198 * t243 - t310) * t238 + (t215 * t349 - t243 * t280) * pkin(7)) * qJD(1), pkin(2) * t132 - t156 * t215 + (-t312 + t353) * qJD(3) + (-t198 * t345 + (t116 - t309) * t239 + (t215 * t346 + t243 * t279) * pkin(7)) * qJD(1), -t121 * t215 + t133 * t190 - t364 - t339 * t173 + (t238 * t99 + t311) * qJD(3) + (t239 * t91 + (-t243 * t99 - t310) * t238) * qJD(1), t120 * t173 - t121 * t175 + (t46 - t215 * t91 + (qJD(3) * t175 - t133) * pkin(8)) * t242 + ((qJD(3) * t173 - t132) * pkin(8) + t389) * t238, t120 * t215 + t132 * t190 - t365 + t339 * t175 + (-t242 * t99 + t312) * qJD(3) + (t99 * t345 + (-t93 + t309) * t239) * qJD(1), -t120 * t93 - t121 * t91 + t190 * t51 - t339 * t99 + (qJD(3) * t266 + t238 * t60 + t242 * t46) * pkin(8), t111 * t341 - t261 * t40, -t111 * t340 - t177 * t40 + t261 * t41 - t263 * t341, -t341 * t315 + (qJD(2) * t261 + t111) * t329, t340 * t315 + (qJD(2) * t177 - t263) * t329, -t315 * t329, t167 * t41 + t34 * t177 + t340 * t73 - (-t201 * t320 + (-qJD(5) * t200 + t412) * t237 + t390) * t315 + t338 * t263 + (-qJD(2) * t283 + t22) * t329, t167 * t40 - t34 * t261 + t341 * t73 - t383 * t315 + t338 * t111 + (qJD(2) * t335 - t23) * t329, t10 * t113 - t374 * t395, -t10 * t112 + t113 * t249 + t373 * t395 - t374 * t396, t374 * t403 + (-qJD(2) * t113 - t395) * t329, -t373 * t403 + (qJD(2) * t112 - t396) * t329, t403 * t329, -t123 * t249 + t12 * t112 + t372 * t396 + t373 * t44 + (t236 * t273 - t240 * t274) * t403 + (-(-t236 * t95 + t240 * t94) * qJD(2) + t6) * t329, t123 * t10 + t12 * t113 - t372 * t395 + t374 * t44 + (t236 * t274 + t240 * t273) * t403 + ((t236 * t94 + t240 * t95) * qJD(2) - t7) * t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t173 ^ 2 + t378, t85, -t133 - t356, t220, -t175 * t198 + t256, t173 * t198 + t247, -t122 * t173 + t256 + 0.2e1 * t278 - t369, pkin(3) * t132 - qJ(4) * t133 + (-t116 + t93) * t175 + (t91 - t316) * t173, t122 * t175 - t173 * t99 - 0.2e1 * t202 + 0.2e1 * t210 - t247, -pkin(3) * t60 + qJ(4) * t46 - t116 * t91 - t122 * t99 + t316 * t93, -t388, -t402, t380, t111 * t315 + t41, t220, -t285 * t220 - t86 * t263 - t315 * t384 - t398, -t86 * t111 + t189 * t220 - t315 * t385 + t379, t406, -t401, -t400, t408, t220 -(t184 * t240 - t189 * t236) * t220 - t45 * t396 + (t236 * t362 + t240 * t361) * t403 + (-t262 * t403 + t7) * qJD(6) + t409, t262 * t220 + t45 * t395 + ((-qJD(6) * t184 + t362) * t240 + (qJD(6) * t189 - t361) * t236) * t403 - t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220 + t357, t85, -t215 ^ 2 - t378, t369 + t389, 0, 0, 0, 0, 0, -t175 * t263 - t220 * t241 - t237 * t281, -t111 * t175 + t220 * t237 - t241 * t281, 0, 0, 0, 0, 0 -(t240 * t241 - t351) * t220 - t175 * t396 + (-t237 * t269 - t350 * t403) * t403 (t237 * t240 + t350) * t220 + t175 * t395 + (-t241 * t269 + t351 * t403) * t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t388, t402, -t380, -t284 + (-qJD(5) - t315) * t111, -t220, -t23 * t315 + t398, -t22 * t315 - t379, -t406, t401, t400, -t408, -t220 -(-t18 * t236 - t367) * t403 + (-t111 * t396 - t220 * t240 - t319 * t403) * pkin(5) + t397 (t18 * t240 - t368) * t403 + (t111 * t395 + t220 * t236 - t318 * t403) * pkin(5) + t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, t401, t400, -t408, -t220, t403 * t7 + t397, t403 * t6 + t399;];
tauc_reg  = t1;
