% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t86 = sin(qJ(3));
t80 = t86 ^ 2;
t90 = cos(qJ(3));
t82 = t90 ^ 2;
t139 = t80 + t82;
t138 = -t90 * pkin(3) - t86 * qJ(4);
t58 = -pkin(2) + t138;
t44 = t90 * pkin(4) - t58;
t85 = sin(qJ(5));
t89 = cos(qJ(5));
t49 = t85 * t86 + t89 * t90;
t28 = pkin(5) * t49 + t44;
t137 = 0.2e1 * t28;
t136 = 0.2e1 * t44;
t135 = -0.2e1 * t58;
t87 = sin(qJ(2));
t134 = -0.2e1 * t87;
t133 = 0.2e1 * t87;
t91 = cos(qJ(2));
t132 = -0.2e1 * t91;
t131 = 0.2e1 * t91;
t130 = -pkin(3) - pkin(4);
t129 = pkin(8) - pkin(9);
t128 = pkin(2) * t86;
t127 = pkin(2) * t90;
t126 = pkin(3) * t86;
t125 = pkin(5) * t91;
t124 = pkin(7) * t86;
t123 = pkin(7) * t90;
t113 = t86 * t91;
t59 = -pkin(2) * t91 - pkin(8) * t87 - pkin(1);
t109 = pkin(7) * t113 - t90 * t59;
t79 = t91 * pkin(3);
t34 = t79 + t109;
t71 = t90 * t87;
t19 = pkin(4) * t91 - pkin(9) * t71 + t34;
t116 = t86 * t87;
t106 = qJ(4) * t91;
t110 = t90 * t91;
t37 = pkin(7) * t110 + t86 * t59;
t33 = -t106 + t37;
t24 = pkin(9) * t116 + t33;
t10 = t85 * t19 + t89 * t24;
t115 = t86 * t89;
t39 = -t87 * t115 + t85 * t71;
t5 = -pkin(10) * t39 + t10;
t88 = cos(qJ(6));
t122 = t5 * t88;
t84 = sin(qJ(6));
t121 = t84 * pkin(5);
t120 = t86 * pkin(8);
t119 = t87 * pkin(7);
t118 = t88 * pkin(5);
t117 = t90 * pkin(8);
t114 = t86 * t90;
t112 = t87 * t91;
t57 = t89 * qJ(4) + t85 * t130;
t111 = t88 * t57;
t108 = t139 * pkin(8) ^ 2;
t107 = qJ(4) * t90;
t105 = t86 * t112;
t81 = t87 ^ 2;
t104 = t81 * t114;
t103 = t129 * t86;
t102 = t129 * t90;
t100 = -t89 * t19 + t24 * t85;
t41 = t49 * t87;
t4 = -pkin(10) * t41 - t100 + t125;
t101 = -t88 * t4 + t5 * t84;
t55 = qJ(4) * t85 - t89 * t130;
t99 = -pkin(5) - t55;
t25 = t57 * t84 - t88 * t99;
t2 = t4 * t84 + t122;
t98 = t107 - t126;
t97 = t33 * t90 + t34 * t86;
t96 = t109 * t86 + t37 * t90;
t63 = t87 * t107;
t29 = t63 + (t130 * t86 - pkin(7)) * t87;
t30 = t85 * t102 - t89 * t103;
t32 = t89 * t102 + t85 * t103;
t53 = -t85 * t90 + t115;
t95 = -t53 * pkin(10) - t30;
t93 = pkin(7) ^ 2;
t83 = t91 ^ 2;
t75 = t81 * t93;
t70 = t82 * t81;
t68 = t80 * t81;
t65 = pkin(8) * t113;
t62 = t86 * t71;
t60 = t110 * t134;
t54 = 0.2e1 * t139 * pkin(8);
t52 = t84 * t89 + t85 * t88;
t51 = (t80 - t82) * t87;
t47 = t84 * t85 - t88 * t89;
t38 = -t63 + (pkin(7) + t126) * t87;
t27 = t84 * t99 + t111;
t23 = -t49 * t84 + t53 * t88;
t21 = t88 * t49 + t53 * t84;
t16 = -t49 * pkin(10) + t32;
t14 = -t39 * t84 + t41 * t88;
t12 = t88 * t39 + t41 * t84;
t11 = pkin(5) * t39 + t29;
t8 = t88 * t16 + t84 * t95;
t6 = t16 * t84 - t88 * t95;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t81, 0.2e1 * t112, 0, t83, 0, 0, pkin(1) * t131, pkin(1) * t134, 0.2e1 * (t81 + t83) * pkin(7), pkin(1) ^ 2 + t83 * t93 + t75, t70, -0.2e1 * t104, t60, t68, 0.2e1 * t105, t83, 0.2e1 * t109 * t91 + 0.2e1 * t81 * t124, 0.2e1 * t81 * t123 + 0.2e1 * t37 * t91 (t109 * t90 - t37 * t86) * t133, t109 ^ 2 + t37 ^ 2 + t75, t70, t60, 0.2e1 * t104, t83, -0.2e1 * t105, t68, 0.2e1 * t38 * t116 + 0.2e1 * t34 * t91 (-t33 * t86 + t34 * t90) * t133, -0.2e1 * t33 * t91 - 0.2e1 * t38 * t71, t33 ^ 2 + t34 ^ 2 + t38 ^ 2, t41 ^ 2, -0.2e1 * t41 * t39, t41 * t131, t39 ^ 2, t39 * t132, t83, -0.2e1 * t100 * t91 + 0.2e1 * t29 * t39, -0.2e1 * t10 * t91 + 0.2e1 * t29 * t41, -0.2e1 * t10 * t39 + 0.2e1 * t100 * t41, t10 ^ 2 + t100 ^ 2 + t29 ^ 2, t14 ^ 2, -0.2e1 * t14 * t12, t14 * t131, t12 ^ 2, t12 * t132, t83, -0.2e1 * t101 * t91 + 0.2e1 * t11 * t12, 0.2e1 * t11 * t14 - 0.2e1 * t2 * t91, 0.2e1 * t101 * t14 - 0.2e1 * t12 * t2, t101 ^ 2 + t11 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, t91, 0, -t119, -t91 * pkin(7), 0, 0, t62, -t51, -t113, -t62, -t110, 0, t65 + (-t123 - t128) * t87, pkin(8) * t110 + (t124 - t127) * t87, t96, -pkin(2) * t119 + t96 * pkin(8), t62, -t113, t51, 0, t110, -t62, t58 * t116 - t38 * t90 + t65, t97, -t38 * t86 + (-pkin(8) * t91 - t58 * t87) * t90, t97 * pkin(8) + t38 * t58, t41 * t53, -t39 * t53 - t41 * t49, t53 * t91, t39 * t49, -t49 * t91, 0, t29 * t49 - t30 * t91 + t39 * t44, t29 * t53 - t32 * t91 + t41 * t44, -t10 * t49 + t100 * t53 + t30 * t41 - t32 * t39, t10 * t32 + t100 * t30 + t29 * t44, t14 * t23, -t12 * t23 - t14 * t21, t23 * t91, t12 * t21, -t21 * t91, 0, t11 * t21 + t12 * t28 - t6 * t91, t11 * t23 + t14 * t28 - t8 * t91, t101 * t23 - t12 * t8 + t14 * t6 - t2 * t21, t101 * t6 + t11 * t28 + t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t80, 0.2e1 * t114, 0, t82, 0, 0, 0.2e1 * t127, -0.2e1 * t128, t54, pkin(2) ^ 2 + t108, t80, 0, -0.2e1 * t114, 0, 0, t82, t90 * t135, t54, t86 * t135, t58 ^ 2 + t108, t53 ^ 2, -0.2e1 * t53 * t49, 0, t49 ^ 2, 0, 0, t49 * t136, t53 * t136, 0.2e1 * t30 * t53 - 0.2e1 * t32 * t49, t30 ^ 2 + t32 ^ 2 + t44 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0, t21 ^ 2, 0, 0, t21 * t137, t23 * t137, -0.2e1 * t21 * t8 + 0.2e1 * t23 * t6, t28 ^ 2 + t6 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, -t116, -t91, -t109, -t37, 0, 0, 0, t71, 0, -t91, t116, 0, -0.2e1 * t79 - t109, t138 * t87, -0.2e1 * t106 + t37, -pkin(3) * t34 + qJ(4) * t33, 0, 0, -t41, 0, t39, -t91, -t55 * t91 + t100, -t57 * t91 + t10, -t39 * t57 + t41 * t55, t10 * t57 + t100 * t55, 0, 0, -t14, 0, t12, -t91, -t25 * t91 + t101, -t27 * t91 + t2, -t12 * t27 + t14 * t25, t101 * t25 + t2 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t90, 0, -t120, -t117, 0, 0, 0, t86, 0, 0, -t90, 0, -t120, t98, t117, t98 * pkin(8), 0, 0, -t53, 0, t49, 0, t30, t32, -t49 * t57 + t53 * t55, t30 * t55 + t32 * t57, 0, 0, -t23, 0, t21, 0, t6, t8, -t21 * t27 + t23 * t25, t25 * t6 + t27 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(3), 0, 0.2e1 * qJ(4), pkin(3) ^ 2 + qJ(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t55, 0.2e1 * t57, 0, t55 ^ 2 + t57 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t25, 0.2e1 * t27, 0, t25 ^ 2 + t27 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t71, 0, t34, 0, 0, 0, 0, 0, 0, t89 * t91, -t85 * t91, -t39 * t85 - t41 * t89, t10 * t85 - t100 * t89, 0, 0, 0, 0, 0, 0, -t47 * t91, -t52 * t91, -t12 * t52 + t14 * t47, t101 * t47 + t2 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t120, 0, 0, 0, 0, 0, 0, 0, 0, -t49 * t85 - t53 * t89, -t30 * t89 + t32 * t85, 0, 0, 0, 0, 0, 0, 0, 0, -t21 * t52 + t23 * t47, t47 * t6 + t52 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t89, t85, 0, -t55 * t89 + t57 * t85, 0, 0, 0, 0, 0, 0, t47, t52, 0, t25 * t47 + t27 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85 ^ 2 + t89 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47 ^ 2 + t52 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, -t39, t91, -t100, -t10, 0, 0, 0, 0, t14, 0, -t12, t91, t118 * t91 - t101, -t122 + (-t4 - t125) * t84 (-t12 * t84 - t14 * t88) * pkin(5) (-t101 * t88 + t2 * t84) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, -t49, 0, -t30, -t32, 0, 0, 0, 0, t23, 0, -t21, 0, -t6, -t8 (-t21 * t84 - t23 * t88) * pkin(5) (-t6 * t88 + t8 * t84) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t55, -t57, 0, 0, 0, 0, 0, 0, 0, -1, -t25 - t118, -t111 + (0.2e1 * pkin(5) + t55) * t84, 0 (-t25 * t88 + t27 * t84) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, -t85, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t52, 0 (-t47 * t88 + t52 * t84) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t118, -0.2e1 * t121, 0 (t84 ^ 2 + t88 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t12, t91, -t101, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, 0, -t6, -t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t25, -t27, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t118, -t121, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
