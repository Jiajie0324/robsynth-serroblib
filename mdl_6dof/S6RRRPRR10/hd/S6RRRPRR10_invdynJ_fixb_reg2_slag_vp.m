% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:22:09
% EndTime: 2019-03-09 19:22:40
% DurationCPUTime: 18.75s
% Computational Cost: add. (17783->851), mult. (37622->1054), div. (0->0), fcn. (26096->12), ass. (0->368)
t362 = cos(qJ(3));
t476 = qJD(3) * t362;
t363 = cos(qJ(2));
t482 = qJD(1) * t363;
t622 = t362 * t482 - t476;
t357 = sin(qJ(3));
t460 = t357 * t482;
t478 = qJD(3) * t357;
t621 = t460 - t478;
t358 = sin(qJ(2));
t341 = t358 * pkin(8);
t346 = t363 * pkin(2);
t464 = -pkin(1) - t346;
t405 = t464 - t341;
t245 = t405 * qJD(1);
t332 = pkin(7) * t482;
t288 = qJD(2) * pkin(8) + t332;
t173 = t245 * t362 - t288 * t357;
t470 = qJD(4) - t173;
t563 = pkin(8) - pkin(9);
t290 = t563 * t362;
t559 = pkin(7) * t357;
t463 = -pkin(3) - t559;
t505 = t362 * t363;
t379 = -pkin(9) * t505 + (-pkin(4) + t463) * t358;
t432 = pkin(2) * t358 - pkin(8) * t363;
t271 = t432 * qJD(1);
t515 = t271 * t362;
t620 = -qJD(1) * t379 + qJD(3) * t290 + t515;
t239 = t357 * t271;
t483 = qJD(1) * t358;
t323 = qJ(4) * t483;
t509 = t358 * t362;
t511 = t357 * t363;
t619 = t239 + t323 + (-pkin(7) * t509 + pkin(9) * t511) * qJD(1) + t563 * t478;
t364 = cos(qJ(1));
t502 = t364 * t357;
t359 = sin(qJ(1));
t507 = t359 * t362;
t236 = t363 * t502 - t507;
t503 = t363 * t364;
t237 = t357 * t359 + t362 * t503;
t356 = sin(qJ(5));
t361 = cos(qJ(5));
t150 = t236 * t361 - t237 * t356;
t504 = t362 * t364;
t506 = t359 * t363;
t234 = t357 * t506 + t504;
t235 = t359 * t505 - t502;
t578 = t234 * t361 - t235 * t356;
t618 = -g(1) * t150 - g(2) * t578;
t459 = t362 * t483;
t481 = qJD(2) * t357;
t260 = t459 + t481;
t617 = -pkin(9) * t260 + t470;
t263 = t356 * t357 + t361 * t362;
t180 = qJD(5) * t263 - t356 * t478 - t361 * t476;
t388 = t363 * t263;
t497 = qJD(1) * t388 + t180;
t474 = qJD(5) * t361;
t475 = qJD(5) * t356;
t496 = -t356 * t622 + t357 * t474 + t361 * t621 - t362 * t475;
t461 = t357 * t483;
t471 = t362 * qJD(2);
t258 = t461 - t471;
t287 = -qJD(2) * pkin(2) + pkin(7) * t483;
t148 = pkin(3) * t258 - qJ(4) * t260 + t287;
t112 = -pkin(4) * t258 - t148;
t167 = t258 * t356 + t260 * t361;
t512 = t357 * t361;
t218 = t356 * t509 - t358 * t512;
t616 = g(3) * t218 - t112 * t167 + t618;
t308 = -qJD(3) + t482;
t297 = qJD(5) + t308;
t284 = qJD(6) + t297;
t289 = t563 * t357;
t536 = t289 * t474 - t290 * t475 + t356 * t620 - t361 * t619;
t192 = t289 * t356 + t290 * t361;
t535 = -qJD(5) * t192 + t356 * t619 + t361 * t620;
t174 = t245 * t357 + t288 * t362;
t124 = pkin(9) * t258 + t174;
t564 = pkin(3) + pkin(4);
t275 = -qJ(4) * t356 - t361 * t564;
t534 = qJD(5) * t275 - t356 * t124 + t361 * t617;
t276 = qJ(4) * t361 - t356 * t564;
t533 = -qJD(5) * t276 - t361 * t124 - t356 * t617;
t355 = sin(qJ(6));
t360 = cos(qJ(6));
t413 = -t258 * t361 + t260 * t356;
t591 = -t167 * t360 + t355 * t413;
t592 = t167 * t355 + t360 * t413;
t546 = t592 * t591;
t597 = t591 ^ 2 - t592 ^ 2;
t472 = qJD(6) * t360;
t473 = qJD(6) * t355;
t477 = qJD(3) * t358;
t599 = qJD(1) * t477 - qJDD(2);
t469 = qJD(1) * qJD(2);
t449 = t363 * t469;
t468 = t358 * qJDD(1);
t602 = -t449 - t468;
t153 = -qJD(3) * t471 + t357 * t599 + t362 * t602;
t154 = t357 * (qJD(2) * (qJD(3) + t482) + t468) + t599 * t362;
t53 = t153 * t361 - t154 * t356 - t258 * t474 + t260 * t475;
t54 = -t153 * t356 - t154 * t361 + t258 * t475 + t260 * t474;
t16 = t167 * t473 + t355 * t54 + t360 * t53 + t413 * t472;
t596 = t284 * t592 - t16;
t293 = t308 * qJ(4);
t108 = t124 - t293;
t96 = t308 * t564 + t617;
t46 = -t108 * t356 + t361 * t96;
t612 = pkin(10) * t167;
t36 = t46 - t612;
t34 = pkin(5) * t297 + t36;
t47 = t108 * t361 + t356 * t96;
t586 = pkin(10) * t413;
t37 = t47 - t586;
t335 = t363 * qJDD(1);
t579 = -t358 * t469 + t335;
t256 = qJDD(3) - t579;
t274 = t432 * qJD(2);
t185 = qJD(1) * t274 + qJDD(1) * t405;
t229 = pkin(7) * t579 + qJDD(2) * pkin(8);
t72 = t185 * t362 - t229 * t357 - t245 * t478 - t288 * t476;
t406 = qJDD(4) - t72;
t40 = pkin(9) * t153 - t256 * t564 + t406;
t243 = t256 * qJ(4);
t291 = t308 * qJD(4);
t71 = t185 * t357 + t229 * t362 + t245 * t476 - t288 * t478;
t56 = t243 - t291 + t71;
t42 = pkin(9) * t154 + t56;
t11 = -qJD(5) * t47 - t356 * t42 + t361 * t40;
t244 = -qJDD(5) + t256;
t7 = -pkin(5) * t244 + pkin(10) * t53 + t11;
t392 = t108 * t475 - t356 * t40 - t361 * t42 - t474 * t96;
t9 = -pkin(10) * t54 - t392;
t1 = t34 * t472 + t355 * t7 + t360 * t9 - t37 * t473;
t352 = qJ(5) + qJ(6);
t338 = sin(t352);
t339 = cos(t352);
t133 = t236 * t338 + t237 * t339;
t349 = g(3) * t358;
t409 = t338 * t357 + t339 * t362;
t415 = t234 * t338 + t235 * t339;
t70 = pkin(5) * t413 + t112;
t595 = g(1) * t133 + g(2) * t415 + t349 * t409 + t592 * t70 - t1;
t374 = qJD(6) * t591 + t355 * t53 - t360 * t54;
t615 = t284 * t591 - t374;
t540 = t355 * t37;
t12 = t34 * t360 - t540;
t539 = t360 * t37;
t13 = t34 * t355 + t539;
t614 = -t12 * t592 - t13 * t591;
t516 = t260 * t308;
t518 = t258 * t308;
t613 = t357 * (t154 - t516) + t362 * (t153 - t518);
t132 = t236 * t339 - t237 * t338;
t2 = -qJD(6) * t13 - t355 * t9 + t360 * t7;
t513 = t357 * t358;
t577 = t234 * t339 - t235 * t338;
t594 = -g(2) * t577 + t591 * t70 + t2 + g(3) * (t338 * t509 - t339 * t513) - g(1) * t132;
t610 = pkin(5) * t483 + pkin(10) * t497 + t535;
t609 = pkin(10) * t496 - t536;
t608 = -t612 + t534;
t607 = t586 + t533;
t524 = t167 * t413;
t604 = t154 + t516;
t601 = qJ(4) * t622 - t357 * qJD(4) - t332;
t547 = g(3) * t363;
t429 = g(1) * t364 + g(2) * t359;
t572 = t358 * t429;
t600 = t547 - t572;
t598 = t167 ^ 2 - t413 ^ 2;
t583 = t167 * t297 - t54;
t479 = qJD(2) * t363;
t526 = t154 * t362;
t527 = t153 * t357;
t589 = t358 * ((t258 * t357 - t260 * t362) * qJD(3) - t526 + t527) - (t258 * t362 + t260 * t357) * t479;
t588 = 0.2e1 * pkin(1);
t585 = t297 * t47 + t11;
t584 = -t297 * t413 + t53;
t487 = t346 + t341;
t279 = -pkin(1) - t487;
t310 = pkin(7) * t511;
t345 = t363 * pkin(3);
t158 = pkin(4) * t363 + t310 + t345 + (-pkin(9) * t358 - t279) * t362;
t312 = pkin(7) * t505;
t205 = t279 * t357 + t312;
t193 = -qJ(4) * t363 + t205;
t172 = pkin(9) * t513 + t193;
t84 = t158 * t356 + t172 * t361;
t467 = t564 * t357;
t495 = -qJD(3) * t467 + t460 * t564 - t601;
t340 = t357 * qJ(4);
t573 = pkin(3) * t362 + pkin(2) + t340;
t558 = pkin(8) * t256;
t571 = t148 * t308 + t558;
t393 = t256 * t362 + t308 * t478;
t570 = qJD(1) * (-t258 * t358 + t308 * t511) - t393;
t394 = t256 * t357 - t308 * t476;
t567 = t358 * (-qJD(2) * t258 - t394) + t363 * (t308 * t481 + t154);
t151 = t236 * t356 + t237 * t361;
t219 = t263 * t358;
t521 = t234 * t356;
t414 = t235 * t361 + t521;
t566 = g(1) * t151 + g(2) * t414 + g(3) * t219 + t112 * t413 + t392;
t565 = t260 ^ 2;
t368 = qJD(1) ^ 2;
t562 = pkin(1) * t368;
t561 = pkin(3) * t256;
t560 = pkin(5) * t356;
t557 = pkin(8) * t260;
t552 = g(1) * t359;
t328 = pkin(5) * t361 + pkin(4);
t545 = -pkin(3) - t328;
t191 = t289 * t361 - t290 * t356;
t514 = t356 * t362;
t407 = -t512 + t514;
t142 = pkin(10) * t407 + t191;
t143 = -pkin(10) * t263 + t192;
t73 = t142 * t360 - t143 * t355;
t544 = qJD(6) * t73 + t355 * t610 - t360 * t609;
t74 = t142 * t355 + t143 * t360;
t543 = -qJD(6) * t74 + t355 * t609 + t360 * t610;
t270 = -pkin(5) + t275;
t176 = t270 * t360 - t276 * t355;
t542 = qJD(6) * t176 + t355 * t607 + t360 * t608;
t177 = t270 * t355 + t276 * t360;
t541 = -qJD(6) * t177 - t355 * t608 + t360 * t607;
t538 = t46 * t297;
t532 = -t263 * t472 - t355 * t496 - t360 * t497 + t407 * t473;
t171 = -t263 * t355 - t360 * t407;
t531 = qJD(6) * t171 - t355 * t497 + t360 * t496;
t530 = pkin(7) * qJDD(1);
t138 = t174 - t293;
t528 = t138 * t308;
t522 = t174 * t308;
t517 = t260 * t258;
t510 = t358 * t359;
t508 = t358 * t364;
t365 = -pkin(10) - pkin(9);
t501 = t364 * t365;
t500 = pkin(5) * t496 + t495;
t408 = t355 * t356 - t360 * t361;
t499 = t284 * t408;
t264 = t355 * t361 + t356 * t360;
t498 = t284 * t264;
t494 = -pkin(3) * t621 + t601;
t493 = t274 * t357 + t279 * t476;
t184 = pkin(3) * t260 + qJ(4) * t258;
t492 = (g(1) * t504 + g(2) * t507) * t358;
t456 = t363 * t471;
t490 = qJ(4) * t456 + qJD(4) * t509;
t489 = g(1) * t510 - g(2) * t508;
t486 = pkin(1) * t364 + pkin(7) * t359;
t350 = t358 ^ 2;
t351 = t363 ^ 2;
t485 = t350 - t351;
t484 = t350 + t351;
t480 = qJD(2) * t358;
t466 = t358 * t368 * t363;
t329 = pkin(7) * t468;
t230 = -qJDD(2) * pkin(2) + pkin(7) * t449 + t329;
t465 = g(1) * t503 + g(2) * t506 + t349;
t457 = t357 * t479;
t455 = t357 * t477;
t454 = t308 * t483;
t451 = t258 ^ 2 - t565;
t447 = qJ(4) + t560;
t225 = t234 * pkin(3);
t444 = qJ(4) * t235 - t225;
t227 = t236 * pkin(3);
t443 = qJ(4) * t237 - t227;
t83 = t158 * t361 - t172 * t356;
t204 = t279 * t362 - t310;
t440 = t297 ^ 2;
t251 = pkin(4) * t362 + t573;
t438 = -pkin(8) * t526 - t465;
t437 = pkin(3) * t505 + qJ(4) * t511 + t487;
t436 = pkin(2) * t503 + pkin(8) * t508 + t486;
t435 = t358 * t449;
t434 = -pkin(7) - t467;
t126 = -pkin(4) * t260 - t184;
t433 = t463 * t358;
t431 = -g(1) * t234 + g(2) * t236;
t430 = g(1) * t235 - g(2) * t237;
t428 = -g(2) * t364 + t552;
t347 = t364 * pkin(7);
t427 = -pkin(3) * t235 - qJ(4) * t234 + t347;
t426 = qJD(3) * t312 - t274 * t362 + t279 * t478;
t424 = pkin(7) * t258 + t287 * t357;
t423 = pkin(7) * t260 + t287 * t362;
t62 = pkin(5) * t363 - pkin(10) * t219 + t83;
t65 = -pkin(10) * t218 + t84;
t29 = -t355 * t65 + t360 * t62;
t30 = t355 * t62 + t360 * t65;
t422 = (qJD(3) * t258 - t153) * pkin(8);
t421 = pkin(3) * t237 + t436;
t420 = qJD(3) * t287 - t558;
t135 = pkin(3) * t308 + t470;
t419 = t135 * t362 - t138 * t357;
t416 = -t173 * t362 - t174 * t357;
t129 = -t218 * t355 + t219 * t360;
t367 = qJD(2) ^ 2;
t402 = qJDD(2) * t363 - t358 * t367;
t196 = -pkin(7) * t459 + t239;
t399 = -g(1) * t236 - g(2) * t234 - g(3) * t513;
t398 = pkin(8) * qJD(3) * t308 - t547;
t57 = pkin(3) * t154 + qJ(4) * t153 - qJD(4) * t260 + t230;
t396 = -t362 * t564 - t340;
t390 = g(3) * t407;
t85 = pkin(9) * t455 + qJD(2) * t379 + t426;
t325 = qJ(4) * t480;
t86 = t325 + (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t509 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t357) * t363 + t493;
t27 = t158 * t474 - t172 * t475 + t356 * t85 + t361 * t86;
t389 = t398 - t57;
t387 = -t230 + t398;
t305 = qJ(4) * t509;
t190 = t358 * t434 + t305;
t384 = t358 * t476 + t457;
t383 = t405 * t552;
t382 = qJ(4) * t236 + t421;
t43 = -pkin(4) * t154 - t57;
t378 = -t357 * t518 - t526;
t377 = -t399 + t72;
t28 = -qJD(5) * t84 - t356 * t86 + t361 * t85;
t119 = (-t358 * t471 - t363 * t478) * pkin(7) + t493;
t373 = t154 * t513 + t258 * t384;
t372 = t148 * t260 + qJDD(4) - t377;
t370 = g(1) * t237 + g(2) * t235 + g(3) * t509 - t173 * t308 - t71;
t100 = t396 * t477 + t434 * t479 + t490;
t315 = pkin(8) * t503;
t311 = pkin(8) * t506;
t231 = -qJDD(6) + t244;
t213 = -t305 + (pkin(3) * t357 + pkin(7)) * t358;
t195 = pkin(7) * t461 + t515;
t194 = -t204 + t345;
t187 = pkin(5) * t263 + t251;
t186 = -t256 * t363 - t308 * t480;
t183 = qJD(1) * t433 - t515;
t182 = t196 + t323;
t170 = t263 * t360 - t355 * t407;
t128 = t218 * t360 + t219 * t355;
t125 = pkin(5) * t218 + t190;
t120 = t480 * t559 - t426;
t118 = pkin(3) * t384 + pkin(7) * t479 + qJ(4) * t455 - t490;
t111 = qJD(2) * t433 + t426;
t107 = -t153 - t518;
t106 = -qJD(4) * t363 + t119 + t325;
t103 = (-t260 * t358 + t308 * t505) * qJD(1) + t394;
t102 = qJD(2) * t388 + (qJD(3) - qJD(5)) * t358 * t407;
t101 = t180 * t358 + t356 * t456 - t361 * t457;
t77 = -t362 * t516 - t527;
t76 = -pkin(5) * t167 + t126;
t75 = -t153 * t509 + (-t455 + t456) * t260;
t59 = t406 - t561;
t58 = (-t308 * t471 + t153) * t363 + (qJD(2) * t260 + t393) * t358;
t48 = pkin(5) * t101 + t100;
t33 = qJD(6) * t129 + t101 * t360 + t102 * t355;
t32 = t101 * t355 - t102 * t360 + t218 * t472 + t219 * t473;
t24 = pkin(5) * t54 + t43;
t19 = -pkin(10) * t101 + t27;
t18 = -pkin(5) * t480 - pkin(10) * t102 + t28;
t15 = t36 * t360 - t540;
t14 = -t355 * t36 - t539;
t4 = -qJD(6) * t30 + t18 * t360 - t19 * t355;
t3 = qJD(6) * t29 + t18 * t355 + t19 * t360;
t5 = [0, 0, 0, 0, 0, qJDD(1), t428, t429, 0, 0, qJDD(1) * t350 + 0.2e1 * t435, 0.2e1 * t335 * t358 - 0.2e1 * t469 * t485, qJDD(2) * t358 + t363 * t367, qJDD(1) * t351 - 0.2e1 * t435, t402, 0 (-0.2e1 * pkin(1) * t469 - pkin(7) * qJDD(2)) * t358 + (-pkin(7) * t367 + qJDD(1) * t588 + t428) * t363, -pkin(7) * t402 + t588 * t602 - t489, 0.2e1 * t484 * t530 - t429, -g(1) * (-pkin(1) * t359 + t347) - g(2) * t486 + (pkin(7) ^ 2 * t484 + pkin(1) ^ 2) * qJDD(1), t75, t589, t58, t373, t567, t186, -t120 * t308 + t204 * t256 + (qJD(2) * t424 - t72) * t363 + (pkin(7) * t154 + qJD(2) * t173 + t230 * t357 + t287 * t476) * t358 + t430, t119 * t308 - t205 * t256 + (qJD(2) * t423 + t71) * t363 + (-pkin(7) * t153 - qJD(2) * t174 + t230 * t362 - t287 * t478) * t358 + t431, -t119 * t258 - t120 * t260 + t153 * t204 - t154 * t205 + t416 * t479 + (-t357 * t71 - t362 * t72 + (t173 * t357 - t174 * t362) * qJD(3)) * t358 + t489, t71 * t205 + t174 * t119 + t72 * t204 + t173 * t120 - g(1) * t347 - g(2) * t436 - t383 + (t230 * t358 + t287 * t479) * pkin(7), t75, t58, -t589, t186, -t567, t373, t111 * t308 + t118 * t258 + t154 * t213 - t194 * t256 + (t148 * t481 + t59) * t363 + (-qJD(2) * t135 + t148 * t476 + t357 * t57) * t358 + t430, -t106 * t258 + t111 * t260 - t153 * t194 - t154 * t193 + t419 * t479 + (-t357 * t56 + t362 * t59 + (-t135 * t357 - t138 * t362) * qJD(3)) * t358 + t489, -t106 * t308 - t118 * t260 + t153 * t213 + t193 * t256 + (-t148 * t471 - t56) * t363 + (qJD(2) * t138 + t148 * t478 - t362 * t57) * t358 - t431, -g(1) * t427 - g(2) * t382 + t106 * t138 + t111 * t135 + t118 * t148 + t193 * t56 + t194 * t59 + t213 * t57 - t383, t102 * t167 - t219 * t53, -t101 * t167 - t102 * t413 + t218 * t53 - t219 * t54, t102 * t297 - t167 * t480 - t219 * t244 - t363 * t53, t101 * t413 + t218 * t54, -t101 * t297 + t218 * t244 - t363 * t54 + t413 * t480, -t244 * t363 - t297 * t480, g(1) * t414 - g(2) * t151 + t100 * t413 + t101 * t112 + t11 * t363 + t190 * t54 + t218 * t43 - t244 * t83 + t28 * t297 - t46 * t480, g(1) * t578 - g(2) * t150 + t100 * t167 + t102 * t112 - t190 * t53 + t219 * t43 + t244 * t84 - t27 * t297 + t363 * t392 + t47 * t480, -t101 * t47 - t102 * t46 - t11 * t219 - t167 * t28 + t218 * t392 - t27 * t413 + t53 * t83 - t54 * t84 - t489, -t392 * t84 + t47 * t27 + t11 * t83 + t46 * t28 + t43 * t190 + t112 * t100 - g(1) * (-pkin(4) * t235 + t427) - g(2) * (pkin(4) * t237 - pkin(9) * t508 + t382) - (-t358 * t563 + t464) * t552, -t129 * t16 + t32 * t591, t128 * t16 + t129 * t374 + t32 * t592 + t33 * t591, -t129 * t231 - t16 * t363 - t284 * t32 + t480 * t591, -t128 * t374 + t33 * t592, t128 * t231 - t284 * t33 + t363 * t374 + t480 * t592, -t231 * t363 - t284 * t480, g(1) * t415 - g(2) * t133 - t12 * t480 - t125 * t374 + t128 * t24 + t2 * t363 - t231 * t29 + t284 * t4 + t33 * t70 + t48 * t592, g(1) * t577 - g(2) * t132 - t1 * t363 - t125 * t16 + t129 * t24 + t13 * t480 + t231 * t30 - t284 * t3 - t32 * t70 - t48 * t591, -t1 * t128 + t12 * t32 - t129 * t2 - t13 * t33 + t16 * t29 - t3 * t592 + t30 * t374 + t4 * t591 - t489, t1 * t30 + t13 * t3 + t2 * t29 + t12 * t4 + t24 * t125 + t70 * t48 - g(1) * (-pkin(5) * t521 - t235 * t328 + t427) - g(2) * (t236 * t447 + t237 * t328 + t358 * t501 + t421) - ((-pkin(8) - t365) * t358 + t464) * t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t466, t485 * t368, t468, t466, t335, qJDD(2), -t547 - t329 + (t429 + t562) * t358 (-t530 + t562) * t363 + t465, 0, 0, t77, -t613, t103, t378, -t570, t454, -pkin(2) * t154 + t195 * t308 + t420 * t357 + t387 * t362 + (-t173 * t358 - t363 * t424) * qJD(1) + t492, pkin(2) * t153 - t196 * t308 + t420 * t362 + (t174 * t358 - t363 * t423) * qJD(1) + (-t387 - t572) * t357, t195 * t260 + t196 * t258 + (t173 * t482 + t71 + (-t173 + t557) * qJD(3)) * t362 + (t422 - t72 + t522) * t357 + t438, -t230 * pkin(2) - t174 * t196 - t173 * t195 - t287 * t332 - g(1) * (-pkin(2) * t508 + t315) - g(2) * (-pkin(2) * t510 + t311) - g(3) * t487 + (qJD(3) * t416 - t72 * t357 + t71 * t362) * pkin(8), t77, t103, t613, t454, t570, t378, t135 * t483 - t154 * t573 - t183 * t308 + t494 * t258 - t357 * t571 + t389 * t362 + t492, t182 * t258 - t183 * t260 + (-t135 * t482 + t56 + (t135 + t557) * qJD(3)) * t362 + (t422 + t59 + t528) * t357 + t438, -t138 * t483 - t153 * t573 + t182 * t308 - t494 * t260 + t571 * t362 + (t389 + t572) * t357, -t138 * t182 - t135 * t183 - g(1) * t315 - g(2) * t311 - g(3) * t437 + t494 * t148 + (qJD(3) * t419 + t59 * t357 + t56 * t362) * pkin(8) + (-t57 + t572) * t573, -t167 * t497 + t407 * t53, -t167 * t496 + t263 * t53 + t407 * t54 + t413 * t497, t167 * t483 + t244 * t407 - t297 * t497, t263 * t54 + t413 * t496, t244 * t263 - t297 * t496 - t413 * t483, t297 * t483, t46 * t483 - g(3) * t388 + t496 * t112 + t495 * t413 - t191 * t244 + t251 * t54 + t535 * t297 + (t43 + t572) * t263, t192 * t244 - t251 * t53 - t43 * t407 + t363 * t390 - t536 * t297 + t495 * t167 - t497 * t112 + (-t47 * qJD(1) - t407 * t429) * t358, t11 * t407 - t167 * t535 + t191 * t53 - t192 * t54 + t263 * t392 - t413 * t536 + t46 * t497 - t47 * t496 + t465, -t392 * t192 + t11 * t191 + t43 * t251 - g(1) * (-pkin(9) * t503 + t315) - g(2) * (-pkin(9) * t506 + t311) - g(3) * (pkin(4) * t505 + t437) + t536 * t47 + t535 * t46 + t495 * t112 + (g(3) * pkin(9) + t429 * (pkin(2) - t396)) * t358, -t16 * t171 - t532 * t591, t16 * t170 + t171 * t374 + t531 * t591 - t532 * t592, -t171 * t231 + t284 * t532 - t483 * t591, -t170 * t374 + t531 * t592, t170 * t231 - t284 * t531 - t483 * t592, t284 * t483, t12 * t483 + t24 * t170 - t187 * t374 - t73 * t231 + t543 * t284 - t409 * t600 + t500 * t592 + t531 * t70, -t13 * t483 - t187 * t16 + t24 * t171 + t74 * t231 - t544 * t284 - t500 * t591 + t532 * t70 + t600 * (t338 * t362 - t339 * t357) -t1 * t170 - t12 * t532 - t13 * t531 + t16 * t73 - t171 * t2 + t374 * t74 + t543 * t591 - t544 * t592 + t465, t1 * t74 + t2 * t73 + t24 * t187 - g(1) * (t363 * t501 + t315) - g(2) * (t365 * t506 + t311) - g(3) * (t328 * t505 + t511 * t560 + t437) + t500 * t70 + t544 * t13 + t543 * t12 + (-g(3) * t365 + t429 * (t357 * t447 - t362 * t545 + pkin(2))) * t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t517, -t451, t107, -t517, -t604, t256, -t260 * t287 + t377 - t522, t258 * t287 + t370, 0, 0, t517, t107, t451, t256, t604, -t517, -t184 * t258 - t372 - t522 + 0.2e1 * t561, pkin(3) * t153 - qJ(4) * t154 + (t138 - t174) * t260 + (t135 - t470) * t258, -t148 * t258 + t184 * t260 + 0.2e1 * t243 - 0.2e1 * t291 - t370, t56 * qJ(4) - t59 * pkin(3) - t148 * t184 - t135 * t174 - g(1) * t443 - g(2) * t444 - g(3) * (-pkin(3) * t513 + t305) + t470 * t138, -t524, -t598, t584, t524, -t583, t244, -t126 * t413 - t244 * t275 + t297 * t533 - t11 - t616, -t126 * t167 + t276 * t244 - t297 * t534 - t566, t275 * t53 - t276 * t54 + (t46 - t534) * t413 + (-t47 - t533) * t167, -t392 * t276 + t11 * t275 - t112 * t126 - g(1) * (-pkin(4) * t236 + t443) - g(2) * (-pkin(4) * t234 + t444) - g(3) * (-t358 * t467 + t305) + t534 * t47 + t533 * t46, t546, -t597, -t596, -t546, t615, t231, -t176 * t231 + t284 * t541 - t592 * t76 - t594, t177 * t231 - t284 * t542 + t591 * t76 - t595, t16 * t176 + t177 * t374 + t541 * t591 - t542 * t592 - t614, t1 * t177 + t2 * t176 - t70 * t76 - g(1) * (-t236 * t328 + t237 * t447 - t227) - g(2) * (-t234 * t328 + t235 * t447 - t225) - g(3) * t305 - (pkin(5) * t514 + t357 * t545) * t349 + t542 * t13 + t541 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256 + t517, t107, -t308 ^ 2 - t565, t372 + t528 - t561, 0, 0, 0, 0, 0, 0, -t244 * t361 - t260 * t413 - t356 * t440, -t167 * t260 + t244 * t356 - t361 * t440, t356 * t583 + t361 * t584, -t112 * t260 + t585 * t361 + (-t392 - t538) * t356 + t399, 0, 0, 0, 0, 0, 0, t231 * t408 - t260 * t592 - t284 * t498, t231 * t264 + t260 * t591 + t284 * t499, -t16 * t408 + t264 * t374 - t498 * t591 + t499 * t592, t1 * t264 - t12 * t498 - t13 * t499 - t2 * t408 - t260 * t70 + t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t524, t598, -t584, -t524, t583, -t244, t585 + t616, t538 + t566, 0, 0, -t546, t597, t596, t546, -t615, -t231, -t14 * t284 + (-t167 * t592 - t231 * t360 - t284 * t473) * pkin(5) + t594, t15 * t284 + (t167 * t591 + t231 * t355 - t284 * t472) * pkin(5) + t595, -t14 * t591 + t15 * t592 + (t16 * t360 + t374 * t355 + (-t355 * t591 - t360 * t592) * qJD(6)) * pkin(5) + t614, -t12 * t14 - t13 * t15 + (t1 * t355 + t2 * t360 - t70 * t167 + t358 * t390 + (-t12 * t355 + t13 * t360) * qJD(6) + t618) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t546, t597, t596, t546, -t615, -t231, t13 * t284 + t594, t12 * t284 + t595, 0, 0;];
tau_reg  = t5;
