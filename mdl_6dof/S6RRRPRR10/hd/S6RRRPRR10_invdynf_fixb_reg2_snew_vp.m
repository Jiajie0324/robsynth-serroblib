% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 14:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 14:08:50
% EndTime: 2019-05-07 14:08:58
% DurationCPUTime: 8.50s
% Computational Cost: add. (43754->320), mult. (87729->379), div. (0->0), fcn. (61737->10), ass. (0->218)
t2209 = sin(qJ(2));
t2251 = qJD(1) * t2209;
t2199 = qJD(2) * t2251;
t2214 = cos(qJ(2));
t2235 = t2214 * qJDD(1);
t2232 = t2199 - t2235;
t2228 = -qJDD(3) - t2232;
t2208 = sin(qJ(3));
t2213 = cos(qJ(3));
t2172 = -qJD(2) * t2213 + t2208 * t2251;
t2174 = t2208 * qJD(2) + t2213 * t2251;
t2243 = t2172 * t2174;
t2130 = t2228 - t2243;
t2170 = t2174 ^ 2;
t2250 = qJD(1) * t2214;
t2197 = qJD(3) - t2250;
t2253 = t2197 ^ 2;
t2264 = -t2170 - t2253;
t2106 = t2130 * t2213 - t2208 * t2264;
t2234 = qJD(2) * t2250;
t2236 = t2209 * qJDD(1);
t2177 = t2234 + t2236;
t2226 = -t2208 * qJDD(2) - t2213 * t2177;
t2221 = qJD(3) * t2172 + t2226;
t2242 = t2172 * t2197;
t2272 = t2221 + t2242;
t2082 = t2106 * t2214 - t2209 * t2272;
t2104 = t2130 * t2208 + t2213 * t2264;
t2210 = sin(qJ(1));
t2215 = cos(qJ(1));
t2290 = t2082 * t2210 - t2104 * t2215;
t2289 = t2082 * t2215 + t2104 * t2210;
t2080 = t2106 * t2209 + t2214 * t2272;
t2119 = -t2221 + t2242;
t2229 = -t2174 * qJD(3) + qJDD(2) * t2213 - t2208 * t2177;
t2240 = t2197 * t2174;
t2222 = t2229 + t2240;
t2262 = -t2119 * t2213 + t2208 * t2222;
t2256 = t2172 ^ 2;
t2129 = t2170 + t2256;
t2261 = t2119 * t2208 + t2213 * t2222;
t2280 = -t2129 * t2209 + t2214 * t2261;
t2286 = t2210 * t2280 - t2215 * t2262;
t2131 = t2228 + t2243;
t2263 = -t2253 - t2256;
t2271 = -t2131 * t2213 + t2208 * t2263;
t2223 = -t2229 + t2240;
t2270 = t2131 * t2208 + t2213 * t2263;
t2277 = t2209 * t2223 + t2214 * t2270;
t2285 = t2210 * t2277 - t2215 * t2271;
t2284 = t2210 * t2262 + t2215 * t2280;
t2283 = t2210 * t2271 + t2215 * t2277;
t2279 = t2129 * t2214 + t2209 * t2261;
t2278 = t2209 * t2270 - t2214 * t2223;
t2190 = qJD(5) - t2197;
t2183 = qJD(6) + t2190;
t2265 = qJD(6) + t2183;
t2260 = qJD(2) ^ 2;
t2207 = sin(qJ(5));
t2212 = cos(qJ(5));
t2141 = -t2212 * t2172 + t2174 * t2207;
t2143 = t2172 * t2207 + t2174 * t2212;
t2206 = sin(qJ(6));
t2211 = cos(qJ(6));
t2108 = t2211 * t2141 + t2143 * t2206;
t2259 = t2108 ^ 2;
t2110 = -t2141 * t2206 + t2143 * t2211;
t2258 = t2110 ^ 2;
t2140 = t2141 ^ 2;
t2257 = t2143 ^ 2;
t2255 = t2183 ^ 2;
t2254 = t2190 ^ 2;
t2252 = t2214 * g(3);
t2249 = t2108 * t2110;
t2244 = t2141 * t2143;
t2241 = t2190 * t2141;
t2239 = qJD(5) - t2190;
t2238 = qJD(6) - t2183;
t2188 = -g(1) * t2215 - g(2) * t2210;
t2216 = qJD(1) ^ 2;
t2163 = -pkin(1) * t2216 + qJDD(1) * pkin(7) + t2188;
t2153 = -g(3) * t2209 + t2214 * t2163;
t2175 = (-pkin(2) * t2214 - pkin(8) * t2209) * qJD(1);
t2125 = -pkin(2) * t2260 + qJDD(2) * pkin(8) + t2175 * t2250 + t2153;
t2187 = t2210 * g(1) - t2215 * g(2);
t2162 = qJDD(1) * pkin(1) + t2216 * pkin(7) + t2187;
t2217 = (-t2177 - t2234) * pkin(8) + (t2232 + t2199) * pkin(2) - t2162;
t2091 = -t2208 * t2125 + t2213 * t2217;
t2144 = pkin(3) * t2172 - qJ(4) * t2174;
t2060 = pkin(3) * t2228 - qJ(4) * t2253 + t2174 * t2144 + qJDD(4) - t2091;
t2049 = ((qJD(3) - t2197) * t2172 + t2226) * pkin(9) + t2131 * pkin(4) + t2060;
t2092 = t2213 * t2125 + t2208 * t2217;
t2058 = -pkin(3) * t2253 - qJ(4) * t2228 + 0.2e1 * qJD(4) * t2197 - t2172 * t2144 + t2092;
t2231 = -pkin(4) * t2197 - pkin(9) * t2174;
t2051 = -pkin(4) * t2256 - pkin(9) * t2229 + t2197 * t2231 + t2058;
t2023 = t2207 * t2049 + t2212 * t2051;
t2202 = t2209 ^ 2;
t2203 = t2214 ^ 2;
t2237 = t2202 + t2203;
t2022 = t2212 * t2049 - t2207 * t2051;
t2219 = t2207 * t2221 - t2212 * t2229;
t2089 = -t2143 * qJD(5) + t2219;
t2218 = t2207 * t2229 + t2212 * t2221;
t2090 = -t2141 * qJD(5) - t2218;
t2233 = t2211 * t2089 - t2206 * t2090;
t2230 = pkin(5) * t2190 - pkin(10) * t2143;
t2227 = -t2206 * t2089 - t2211 * t2090;
t2225 = qJDD(5) + t2228;
t2224 = -qJDD(6) - t2225;
t2096 = t2225 - t2244;
t2124 = t2252 - qJDD(2) * pkin(2) - t2260 * pkin(8) + (qJD(1) * t2175 + t2163) * t2209;
t2059 = -t2229 * pkin(3) + (pkin(3) * t2197 - 0.2e1 * qJD(4)) * t2174 + t2124 + t2272 * qJ(4);
t2052 = -pkin(4) * t2229 + pkin(9) * t2256 - t2174 * t2231 + t2059;
t2196 = t2214 * t2216 * t2209;
t2192 = -t2203 * t2216 - t2260;
t2191 = -t2202 * t2216 - t2260;
t2185 = -qJDD(2) + t2196;
t2184 = qJDD(2) + t2196;
t2182 = t2237 * t2216;
t2181 = -qJDD(1) * t2210 - t2215 * t2216;
t2180 = qJDD(1) * t2215 - t2210 * t2216;
t2179 = t2237 * qJDD(1);
t2178 = -0.2e1 * t2199 + t2235;
t2176 = 0.2e1 * t2234 + t2236;
t2152 = -t2209 * t2163 - t2252;
t2151 = t2185 * t2214 - t2191 * t2209;
t2150 = -t2184 * t2209 + t2192 * t2214;
t2149 = t2185 * t2209 + t2191 * t2214;
t2148 = t2184 * t2214 + t2192 * t2209;
t2122 = -t2254 - t2257;
t2121 = -t2152 * t2209 + t2153 * t2214;
t2120 = t2152 * t2214 + t2153 * t2209;
t2103 = -t2254 - t2140;
t2097 = -t2225 - t2244;
t2094 = -t2255 - t2258;
t2093 = -t2140 - t2257;
t2079 = t2097 * t2212 - t2122 * t2207;
t2078 = t2097 * t2207 + t2122 * t2212;
t2073 = t2141 * t2239 + t2218;
t2072 = t2090 - t2241;
t2071 = -t2143 * t2239 + t2219;
t2070 = (qJD(5) + t2190) * t2143 - t2219;
t2069 = -t2255 - t2259;
t2068 = t2224 - t2249;
t2067 = -t2224 - t2249;
t2066 = -t2096 * t2207 + t2103 * t2212;
t2065 = t2096 * t2212 + t2103 * t2207;
t2057 = -t2258 - t2259;
t2056 = -t2091 * t2208 + t2092 * t2213;
t2055 = t2091 * t2213 + t2092 * t2208;
t2054 = t2068 * t2211 - t2094 * t2206;
t2053 = t2068 * t2206 + t2094 * t2211;
t2048 = t2056 * t2214 + t2124 * t2209;
t2047 = t2056 * t2209 - t2124 * t2214;
t2044 = t2078 * t2208 + t2079 * t2213;
t2043 = -t2078 * t2213 + t2079 * t2208;
t2042 = t2071 * t2212 - t2073 * t2207;
t2041 = t2071 * t2207 + t2073 * t2212;
t2040 = -t2067 * t2206 + t2069 * t2211;
t2039 = t2067 * t2211 + t2069 * t2206;
t2038 = t2065 * t2208 + t2066 * t2213;
t2037 = -t2065 * t2213 + t2066 * t2208;
t2036 = t2058 * t2213 + t2060 * t2208;
t2035 = t2058 * t2208 - t2060 * t2213;
t2034 = t2108 * t2238 + t2227;
t2033 = -t2108 * t2265 - t2227;
t2032 = -t2110 * t2238 + t2233;
t2031 = t2110 * t2265 - t2233;
t2030 = t2044 * t2214 - t2072 * t2209;
t2029 = t2044 * t2209 + t2072 * t2214;
t2028 = t2089 * pkin(5) + t2140 * pkin(10) - t2143 * t2230 + t2052;
t2027 = t2038 * t2214 - t2070 * t2209;
t2026 = t2038 * t2209 + t2070 * t2214;
t2025 = -t2053 * t2207 + t2054 * t2212;
t2024 = t2053 * t2212 + t2054 * t2207;
t2021 = t2036 * t2214 + t2059 * t2209;
t2020 = t2036 * t2209 - t2059 * t2214;
t2019 = t2041 * t2208 + t2042 * t2213;
t2018 = -t2041 * t2213 + t2042 * t2208;
t2017 = -t2039 * t2207 + t2040 * t2212;
t2016 = t2039 * t2212 + t2040 * t2207;
t2015 = t2019 * t2214 - t2093 * t2209;
t2014 = t2019 * t2209 + t2093 * t2214;
t2013 = -t2140 * pkin(5) + t2089 * pkin(10) - t2190 * t2230 + t2023;
t2012 = t2032 * t2211 - t2034 * t2206;
t2011 = t2032 * t2206 + t2034 * t2211;
t2010 = (-t2090 - t2241) * pkin(10) + t2096 * pkin(5) + t2022;
t2009 = t2024 * t2208 + t2025 * t2213;
t2008 = -t2024 * t2213 + t2025 * t2208;
t2007 = -t2022 * t2207 + t2023 * t2212;
t2006 = t2022 * t2212 + t2023 * t2207;
t2005 = t2016 * t2208 + t2017 * t2213;
t2004 = -t2016 * t2213 + t2017 * t2208;
t2003 = t2009 * t2214 - t2033 * t2209;
t2002 = t2009 * t2209 + t2033 * t2214;
t2001 = t2010 * t2206 + t2013 * t2211;
t2000 = t2010 * t2211 - t2013 * t2206;
t1999 = -t2011 * t2207 + t2012 * t2212;
t1998 = t2011 * t2212 + t2012 * t2207;
t1997 = t2005 * t2214 - t2031 * t2209;
t1996 = t2005 * t2209 + t2031 * t2214;
t1995 = t2006 * t2208 + t2007 * t2213;
t1994 = -t2006 * t2213 + t2007 * t2208;
t1993 = t1995 * t2214 + t2052 * t2209;
t1992 = t1995 * t2209 - t2052 * t2214;
t1991 = -t2000 * t2206 + t2001 * t2211;
t1990 = t2000 * t2211 + t2001 * t2206;
t1989 = t1998 * t2208 + t1999 * t2213;
t1988 = -t1998 * t2213 + t1999 * t2208;
t1987 = t1989 * t2214 - t2057 * t2209;
t1986 = t1989 * t2209 + t2057 * t2214;
t1985 = -t1990 * t2207 + t1991 * t2212;
t1984 = t1990 * t2212 + t1991 * t2207;
t1983 = t1984 * t2208 + t1985 * t2213;
t1982 = -t1984 * t2213 + t1985 * t2208;
t1981 = t1983 * t2214 + t2028 * t2209;
t1980 = t1983 * t2209 - t2028 * t2214;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2181, -t2180, 0, -t2187 * t2210 + t2188 * t2215, 0, 0, 0, 0, 0, 0, t2150 * t2215 - t2178 * t2210, t2151 * t2215 + t2176 * t2210, t2179 * t2215 - t2182 * t2210, t2121 * t2215 - t2162 * t2210, 0, 0, 0, 0, 0, 0, t2283, t2289, t2284, t2048 * t2215 + t2055 * t2210, 0, 0, 0, 0, 0, 0, t2283, t2284, -t2289, t2021 * t2215 + t2035 * t2210, 0, 0, 0, 0, 0, 0, t2027 * t2215 + t2037 * t2210, t2030 * t2215 + t2043 * t2210, t2015 * t2215 + t2018 * t2210, t1993 * t2215 + t1994 * t2210, 0, 0, 0, 0, 0, 0, t1997 * t2215 + t2004 * t2210, t2003 * t2215 + t2008 * t2210, t1987 * t2215 + t1988 * t2210, t1981 * t2215 + t1982 * t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2180, t2181, 0, t2187 * t2215 + t2188 * t2210, 0, 0, 0, 0, 0, 0, t2150 * t2210 + t2178 * t2215, t2151 * t2210 - t2176 * t2215, t2179 * t2210 + t2182 * t2215, t2121 * t2210 + t2162 * t2215, 0, 0, 0, 0, 0, 0, t2285, t2290, t2286, t2048 * t2210 - t2055 * t2215, 0, 0, 0, 0, 0, 0, t2285, t2286, -t2290, t2021 * t2210 - t2035 * t2215, 0, 0, 0, 0, 0, 0, t2027 * t2210 - t2037 * t2215, t2030 * t2210 - t2043 * t2215, t2015 * t2210 - t2018 * t2215, t1993 * t2210 - t1994 * t2215, 0, 0, 0, 0, 0, 0, t1997 * t2210 - t2004 * t2215, t2003 * t2210 - t2008 * t2215, t1987 * t2210 - t1988 * t2215, t1981 * t2210 - t1982 * t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2148, t2149, 0, t2120, 0, 0, 0, 0, 0, 0, t2278, t2080, t2279, t2047, 0, 0, 0, 0, 0, 0, t2278, t2279, -t2080, t2020, 0, 0, 0, 0, 0, 0, t2026, t2029, t2014, t1992, 0, 0, 0, 0, 0, 0, t1996, t2002, t1986, t1980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2216, -qJDD(1), 0, t2188, 0, 0, 0, 0, 0, 0, t2150, t2151, t2179, t2121, 0, 0, 0, 0, 0, 0, t2277, t2082, t2280, t2048, 0, 0, 0, 0, 0, 0, t2277, t2280, -t2082, t2021, 0, 0, 0, 0, 0, 0, t2027, t2030, t2015, t1993, 0, 0, 0, 0, 0, 0, t1997, t2003, t1987, t1981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2216, 0, t2187, 0, 0, 0, 0, 0, 0, t2178, -t2176, t2182, t2162, 0, 0, 0, 0, 0, 0, -t2271, -t2104, -t2262, -t2055, 0, 0, 0, 0, 0, 0, -t2271, -t2262, t2104, -t2035, 0, 0, 0, 0, 0, 0, -t2037, -t2043, -t2018, -t1994, 0, 0, 0, 0, 0, 0, -t2004, -t2008, -t1988, -t1982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2148, t2149, 0, t2120, 0, 0, 0, 0, 0, 0, t2278, t2080, t2279, t2047, 0, 0, 0, 0, 0, 0, t2278, t2279, -t2080, t2020, 0, 0, 0, 0, 0, 0, t2026, t2029, t2014, t1992, 0, 0, 0, 0, 0, 0, t1996, t2002, t1986, t1980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2192, t2185, t2235, t2153, 0, 0, 0, 0, 0, 0, t2270, t2106, t2261, t2056, 0, 0, 0, 0, 0, 0, t2270, t2261, -t2106, t2036, 0, 0, 0, 0, 0, 0, t2038, t2044, t2019, t1995, 0, 0, 0, 0, 0, 0, t2005, t2009, t1989, t1983; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2184, t2191, -t2236, t2152, 0, 0, 0, 0, 0, 0, -t2223, t2272, t2129, -t2124, 0, 0, 0, 0, 0, 0, -t2223, t2129, -t2272, -t2059, 0, 0, 0, 0, 0, 0, t2070, t2072, t2093, -t2052, 0, 0, 0, 0, 0, 0, t2031, t2033, t2057, -t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2178, t2176, -t2182, -t2162, 0, 0, 0, 0, 0, 0, t2271, t2104, t2262, t2055, 0, 0, 0, 0, 0, 0, t2271, t2262, -t2104, t2035, 0, 0, 0, 0, 0, 0, t2037, t2043, t2018, t1994, 0, 0, 0, 0, 0, 0, t2004, t2008, t1988, t1982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, t2130, t2222, t2092, 0, 0, 0, 0, 0, 0, t2263, t2222, -t2130, t2058, 0, 0, 0, 0, 0, 0, t2066, t2079, t2042, t2007, 0, 0, 0, 0, 0, 0, t2017, t2025, t1999, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2131, t2264, -t2119, t2091, 0, 0, 0, 0, 0, 0, -t2131, -t2119, -t2264, -t2060, 0, 0, 0, 0, 0, 0, -t2065, -t2078, -t2041, -t2006, 0, 0, 0, 0, 0, 0, -t2016, -t2024, -t1998, -t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, -t2272, -t2129, t2124, 0, 0, 0, 0, 0, 0, t2223, -t2129, t2272, t2059, 0, 0, 0, 0, 0, 0, -t2070, -t2072, -t2093, t2052, 0, 0, 0, 0, 0, 0, -t2031, -t2033, -t2057, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, t2222, -t2130, t2058, 0, 0, 0, 0, 0, 0, t2066, t2079, t2042, t2007, 0, 0, 0, 0, 0, 0, t2017, t2025, t1999, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, -t2129, t2272, t2059, 0, 0, 0, 0, 0, 0, -t2070, -t2072, -t2093, t2052, 0, 0, 0, 0, 0, 0, -t2031, -t2033, -t2057, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2131, t2119, t2264, t2060, 0, 0, 0, 0, 0, 0, t2065, t2078, t2041, t2006, 0, 0, 0, 0, 0, 0, t2016, t2024, t1998, t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2103, t2097, t2071, t2023, 0, 0, 0, 0, 0, 0, t2040, t2054, t2012, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2096, t2122, t2073, t2022, 0, 0, 0, 0, 0, 0, t2039, t2053, t2011, t1990; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2070, t2072, t2093, -t2052, 0, 0, 0, 0, 0, 0, t2031, t2033, t2057, -t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2069, t2068, t2032, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2067, t2094, t2034, t2000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2031, t2033, t2057, -t2028;];
f_new_reg  = t1;
