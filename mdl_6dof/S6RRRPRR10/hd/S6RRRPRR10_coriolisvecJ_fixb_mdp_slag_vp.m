% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR10_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPRR10_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR10_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:22:15
% EndTime: 2019-03-09 19:22:36
% DurationCPUTime: 13.77s
% Computational Cost: add. (6215->617), mult. (14619->819), div. (0->0), fcn. (10146->8), ass. (0->261)
t652 = sin(qJ(2));
t735 = t652 * MDP(33);
t708 = qJD(2) * t735;
t651 = sin(qJ(3));
t655 = cos(qJ(3));
t734 = t655 * qJD(2);
t749 = qJD(1) * t652;
t587 = t651 * t749 - t734;
t720 = t655 * t749;
t747 = qJD(2) * t651;
t589 = t720 + t747;
t650 = sin(qJ(5));
t654 = cos(qJ(5));
t525 = t587 * t650 + t589 * t654;
t649 = sin(qJ(6));
t653 = cos(qJ(6));
t675 = -t654 * t587 + t589 * t650;
t821 = -t653 * t525 + t649 * t675;
t791 = t525 * t649;
t834 = t653 * t675 + t791;
t846 = -qJD(1) * t708 - (-t821 ^ 2 + t834 ^ 2) * MDP(30) - t834 * MDP(29) * t821;
t656 = cos(qJ(2));
t731 = qJD(1) * qJD(2);
t712 = t656 * t731;
t743 = qJD(3) * t652;
t716 = t651 * t743;
t730 = qJD(2) * qJD(3);
t546 = qJD(1) * t716 + (-t712 - t730) * t655;
t742 = qJD(3) * t655;
t714 = t652 * t742;
t745 = qJD(2) * t656;
t665 = t651 * t745 + t714;
t547 = qJD(1) * t665 + t651 * t730;
t740 = qJD(5) * t654;
t741 = qJD(5) * t650;
t454 = -t654 * t546 + t650 * t547 + t587 * t740 - t589 * t741;
t698 = -t546 * t650 - t654 * t547;
t455 = qJD(5) * t525 + t698;
t738 = qJD(6) * t653;
t724 = t653 * t454 - t649 * t455 - t675 * t738;
t739 = qJD(6) * t649;
t424 = -t525 * t739 + t724;
t702 = t454 * t649 + t653 * t455;
t425 = -qJD(6) * t821 + t702;
t736 = t652 * MDP(26);
t709 = qJD(2) * t736;
t748 = qJD(1) * t656;
t629 = -qJD(3) + t748;
t732 = -qJD(5) - t629;
t826 = qJD(6) - t732;
t829 = t826 * t821;
t830 = t834 * t826;
t845 = (t424 + t830) * MDP(31) - (t425 + t829) * MDP(32) + (t525 ^ 2 - t675 ^ 2) * MDP(23) + t675 * MDP(22) * t525 - (t675 * t732 - t454) * MDP(24) - qJD(1) * t709 + t846;
t840 = -t655 * t748 + t742;
t721 = t651 * t748;
t744 = qJD(3) * t651;
t839 = t721 - t744;
t605 = -pkin(2) * t656 - pkin(8) * t652 - pkin(1);
t574 = t605 * qJD(1);
t639 = pkin(7) * t748;
t613 = qJD(2) * pkin(8) + t639;
t529 = t655 * t574 - t651 * t613;
t733 = qJD(4) - t529;
t612 = -qJD(2) * pkin(2) + pkin(7) * t749;
t513 = t587 * pkin(3) - t589 * qJ(4) + t612;
t487 = -pkin(4) * t587 - t513;
t458 = pkin(5) * t675 + t487;
t800 = pkin(3) + pkin(4);
t833 = pkin(9) * t589 - t733;
t477 = t629 * t800 - t833;
t530 = t651 * t574 + t655 * t613;
t497 = pkin(9) * t587 + t530;
t618 = t629 * qJ(4);
t483 = t497 - t618;
t437 = t477 * t650 + t483 * t654;
t616 = t629 * qJD(4);
t713 = t652 * t731;
t624 = qJ(4) * t713;
t685 = pkin(2) * t652 - pkin(8) * t656;
t602 = t685 * qJD(2);
t576 = qJD(1) * t602;
t671 = t574 * t742 + t651 * t576 - t613 * t744;
t691 = pkin(7) * t713;
t661 = t655 * t691 - t671;
t460 = -t616 + t624 - t661;
t444 = pkin(9) * t547 + t460;
t689 = -t574 * t744 + t655 * t576 - t613 * t742 + t651 * t691;
t447 = pkin(9) * t546 - t713 * t800 - t689;
t703 = -t650 * t444 + t654 * t447;
t662 = -t437 * qJD(5) + t703;
t417 = -pkin(5) * t713 - pkin(10) * t454 + t662;
t668 = t654 * t444 + t650 * t447 + t477 * t740 - t483 * t741;
t419 = -pkin(10) * t455 + t668;
t436 = t654 * t477 - t483 * t650;
t831 = pkin(10) * t525;
t432 = t436 - t831;
t430 = -pkin(5) * t732 + t432;
t816 = pkin(10) * t675;
t433 = t437 - t816;
t690 = -t649 * t417 - t653 * t419 - t430 * t738 + t433 * t739;
t824 = t458 * t834 + t690;
t799 = pkin(8) - pkin(9);
t615 = t799 * t655;
t798 = pkin(7) * t651;
t722 = -pkin(3) - t798;
t774 = t655 * t656;
t664 = -pkin(9) * t774 + (-pkin(4) + t722) * t652;
t599 = t685 * qJD(1);
t786 = t599 * t655;
t836 = qJD(1) * t664 - qJD(3) * t615 - t786;
t570 = t651 * t599;
t759 = qJ(4) * t749 + t570;
t777 = t652 * t655;
t778 = t651 * t656;
t835 = (-pkin(7) * t777 + pkin(9) * t778) * qJD(1) + t759 + t799 * t744;
t704 = -t653 * t417 + t649 * t419;
t823 = t458 * t821 - t704;
t591 = t650 * t651 + t654 * t655;
t669 = t591 * t656;
t805 = qJD(3) - qJD(5);
t763 = -qJD(1) * t669 + t805 * t591;
t762 = t650 * t840 + t651 * t740 + t654 * t839 - t655 * t741;
t827 = qJ(4) * t840 + t651 * qJD(4) + t639;
t822 = -t487 * t525 + t662;
t817 = -0.2e1 * t731;
t815 = MDP(4) * t652;
t646 = t652 ^ 2;
t814 = MDP(5) * (-t656 ^ 2 + t646);
t692 = pkin(3) * t713;
t474 = -t689 - t692;
t507 = -t618 + t530;
t811 = t507 * t629 + t474;
t631 = pkin(7) * t778;
t645 = t656 * pkin(3);
t518 = pkin(4) * t656 + t631 + t645 + (-pkin(9) * t652 - t605) * t655;
t632 = pkin(7) * t774;
t754 = t651 * t605 + t632;
t544 = -qJ(4) * t656 + t754;
t780 = t651 * t652;
t528 = pkin(9) * t780 + t544;
t764 = t650 * t518 + t654 * t528;
t725 = t800 * t651;
t760 = -qJD(3) * t725 + t721 * t800 + t827;
t705 = -qJ(4) * t650 - t654 * t800;
t810 = -qJD(5) * t705 + t650 * t497 + t654 * t833;
t603 = qJ(4) * t654 - t650 * t800;
t809 = -qJD(5) * t603 - t654 * t497 + t650 * t833;
t808 = t836 * t654;
t614 = t799 * t651;
t757 = t650 * t614 + t654 * t615;
t807 = -t614 * t740 + t615 * t741 + t650 * t836 + t654 * t835;
t717 = t656 * t734;
t806 = -t716 + t717;
t803 = -t487 * t675 + t668;
t801 = t589 ^ 2;
t796 = t433 * t649;
t465 = t547 * pkin(3) + pkin(7) * t712 + t546 * qJ(4) - t589 * qJD(4);
t795 = t465 * t651;
t794 = t465 * t655;
t792 = t513 * t589;
t790 = t546 * t651;
t789 = t587 * t589;
t788 = t587 * t629;
t787 = t589 * t629;
t785 = t612 * t651;
t784 = t612 * t655;
t783 = t629 * t655;
t782 = t649 * t650;
t781 = t650 * t653;
t642 = t651 * qJ(4);
t779 = t651 * t654;
t658 = qJD(2) ^ 2;
t776 = t652 * t658;
t775 = t653 * t433;
t773 = t656 * t658;
t659 = qJD(1) ^ 2;
t772 = t656 * t659;
t771 = t809 + t816;
t770 = t810 + t831;
t673 = t650 * t655 - t779;
t526 = t653 * t591 - t649 * t673;
t769 = -qJD(6) * t526 - t649 * t762 + t653 * t763;
t527 = -t591 * t649 - t653 * t673;
t768 = qJD(6) * t527 + t649 * t763 + t653 * t762;
t767 = pkin(5) * t762 + t760;
t761 = pkin(3) * t839 + t827;
t758 = t651 * t602 + t605 * t742;
t536 = t589 * pkin(3) + t587 * qJ(4);
t755 = qJ(4) * t717 + qJD(4) * t777;
t746 = qJD(2) * t652;
t737 = t652 * MDP(15);
t729 = pkin(8) * t629 * t651;
t728 = pkin(8) * t783;
t604 = -t655 * pkin(3) - pkin(2) - t642;
t727 = pkin(8) * t746;
t726 = pkin(8) * t734;
t723 = qJ(4) * t746 + t758;
t715 = t656 * t744;
t710 = qJD(2) * t737;
t706 = pkin(1) * t817;
t684 = -qJD(3) * t632 + t602 * t655 - t605 * t744;
t464 = pkin(9) * t716 + qJD(2) * t664 - t684;
t466 = (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t777 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t651) * t656 + t723;
t701 = t654 * t464 - t466 * t650;
t699 = t654 * t518 - t528 * t650;
t697 = t654 * t614 - t615 * t650;
t696 = t605 * t655 - t631;
t695 = t732 ^ 2;
t581 = t655 * pkin(4) - t604;
t694 = t587 + t734;
t693 = -t589 + t747;
t688 = -pkin(7) - t725;
t500 = -pkin(4) * t589 - t536;
t686 = t722 * t652;
t509 = -pkin(10) * t591 + t757;
t683 = -pkin(5) * t749 + pkin(10) * t763 + qJD(5) * t757 + qJD(6) * t509 - t650 * t835 + t808;
t508 = pkin(10) * t673 + t697;
t682 = pkin(10) * t762 - qJD(6) * t508 + t807;
t681 = t654 * t826;
t421 = t649 * t430 + t775;
t564 = t591 * t652;
t449 = pkin(5) * t656 - pkin(10) * t564 + t699;
t563 = t650 * t777 - t652 * t779;
t450 = -pkin(10) * t563 + t764;
t680 = t449 * t653 - t450 * t649;
t679 = t449 * t649 + t450 * t653;
t505 = pkin(3) * t629 + t733;
t678 = t505 * t655 - t507 * t651;
t502 = t653 * t563 + t564 * t649;
t503 = -t563 * t649 + t564 * t653;
t598 = -pkin(5) + t705;
t674 = t598 * t649 + t603 * t653;
t672 = qJD(1) * t646 - t629 * t656;
t670 = -t530 * t629 + t689;
t667 = t650 * t464 + t654 * t466 + t518 * t740 - t528 * t741;
t628 = qJ(4) * t777;
t543 = t652 * t688 + t628;
t448 = -pkin(4) * t547 - t465;
t660 = -t529 * t629 + t661;
t479 = (-t655 * t800 - t642) * t743 + t688 * t745 + t755;
t556 = -t628 + (pkin(3) * t651 + pkin(7)) * t652;
t545 = t645 - t696;
t537 = pkin(5) * t591 + t581;
t535 = qJD(1) * t686 - t786;
t534 = -pkin(7) * t720 + t759;
t499 = -t546 - t788;
t498 = pkin(5) * t563 + t543;
t493 = pkin(3) * t665 + pkin(7) * t745 + qJ(4) * t716 - t755;
t486 = qJD(2) * t686 - t684;
t482 = -qJD(4) * t656 + (-t652 * t734 - t715) * pkin(7) + t723;
t481 = t652 * t673 * t805 + qJD(2) * t669;
t480 = qJD(5) * t564 + t650 * t806 - t654 * t665;
t459 = -pkin(5) * t525 + t500;
t438 = pkin(5) * t480 + t479;
t429 = qJD(6) * t503 + t653 * t480 + t481 * t649;
t428 = -qJD(6) * t502 - t480 * t649 + t481 * t653;
t426 = pkin(5) * t455 + t448;
t423 = -pkin(10) * t480 + t667;
t422 = -pkin(5) * t746 - pkin(10) * t481 - qJD(5) * t764 + t701;
t420 = t430 * t653 - t796;
t1 = [(-t425 * t656 - t429 * t826 + (qJD(1) * t502 + t834) * t746) * MDP(32) + ((t422 * t653 - t423 * t649) * t826 - t704 * t656 + t438 * t834 + t498 * t425 + t426 * t502 + t458 * t429 + (-t421 * t656 - t679 * t826) * qJD(6) + (-qJD(1) * t680 - t420) * t746) * MDP(34) + (-t424 * t502 - t425 * t503 - t428 * t834 + t429 * t821) * MDP(30) + (-t826 - t748) * t708 + (t424 * t656 + t428 * t826 + (-qJD(1) * t503 + t821) * t746) * MDP(31) + (-(qJD(6) * t680 + t422 * t649 + t423 * t653) * t826 + t690 * t656 - t438 * t821 + t498 * t424 + t426 * t503 + t458 * t428 + (qJD(1) * t679 + t421) * t746) * MDP(35) + (t424 * t503 - t428 * t821) * MDP(29) + (-t701 * t732 + t703 * t656 + t479 * t675 + t543 * t455 + t448 * t563 + t487 * t480 + (-t437 * t656 + t732 * t764) * qJD(5) + (-qJD(1) * t699 - t436) * t746) * MDP(27) + (-t454 * t563 - t455 * t564 - t480 * t525 - t481 * t675) * MDP(23) + t814 * t817 + (-t455 * t656 + t480 * t732 + (qJD(1) * t563 + t675) * t746) * MDP(25) + (t667 * t732 - t668 * t656 + t479 * t525 + t543 * t454 + t448 * t564 + t487 * t481 + (qJD(1) * t764 + t437) * t746) * MDP(28) + (t454 * t656 - t481 * t732 + (-qJD(1) * t564 - t525) * t746) * MDP(24) + (t732 - t748) * t709 + 0.2e1 * t712 * t815 + (-t546 * t777 + t589 * t806) * MDP(11) + MDP(6) * t773 + (-t684 * t629 - t689 * t656 + (pkin(7) * t547 + t612 * t742) * t652 + ((pkin(7) * t587 + t785) * t656 + (t696 * qJD(1) + t529 + (-t629 + t748) * t798) * t652) * qJD(2)) * MDP(16) + (-t482 * t629 - t493 * t589 + t546 * t556 + (-t513 * t734 - t460) * t656 + (t513 * t744 - t794 + (qJD(1) * t544 + t507) * qJD(2)) * t652) * MDP(20) + (t486 * t629 + t493 * t587 + t547 * t556 + (t513 * t747 + t474) * t656 + (t513 * t742 + t795 + (-qJD(1) * t545 - t505) * qJD(2)) * t652) * MDP(18) + ((-t587 * t655 - t589 * t651) * t745 + (t790 - t547 * t655 + (t587 * t651 - t589 * t655) * qJD(3)) * t652) * MDP(12) + ((-pkin(7) * t715 + t758) * t629 + t671 * t656 + (-pkin(7) * t546 - t612 * t744) * t652 + ((pkin(7) * t589 + t784) * t656 + (-pkin(7) * t783 - qJD(1) * t754 - t530) * t652) * qJD(2)) * MDP(17) - MDP(7) * t776 + (pkin(7) * t776 + t656 * t706) * MDP(10) + (-pkin(7) * t773 + t652 * t706) * MDP(9) + (-t482 * t587 + t486 * t589 - t544 * t547 - t545 * t546 + t678 * t745 + (-t460 * t651 + t474 * t655 + (-t505 * t651 - t507 * t655) * qJD(3)) * t652) * MDP(19) + (-t629 - t748) * t710 + (t629 * t714 + t547 * t656 + (-t587 * t652 - t651 * t672) * qJD(2)) * MDP(14) + (t629 * t716 + t546 * t656 + (t589 * t652 + t655 * t672) * qJD(2)) * MDP(13) + (t454 * t564 + t481 * t525) * MDP(22) + (t460 * t544 + t465 * t556 + t474 * t545 + t482 * t507 + t486 * t505 + t493 * t513) * MDP(21); (t537 * t425 + t426 * t526 + (t649 * t682 - t653 * t683) * t826 + t767 * t834 + t768 * t458 + (-(t508 * t653 - t509 * t649) * qJD(2) + t420) * t749) * MDP(34) + (-t768 * t826 + (qJD(2) * t526 - t834) * t749) * MDP(32) + (-t424 * t526 - t425 * t527 + t768 * t821 - t769 * t834) * MDP(30) + (t448 * t591 + t581 * t455 - (-t615 * t740 + (-qJD(5) * t614 + t835) * t650 - t808) * t732 + t760 * t675 + t762 * t487 + (-qJD(2) * t697 + t436) * t749) * MDP(27) + (t826 * t735 - t732 * t736 + t629 * t737 + (t505 * t652 + (-t513 * t656 - t727) * t651) * MDP(18) + (t513 * t774 + (-t507 + t726) * t652) * MDP(20) + (-t612 * t774 + (t530 - t726) * t652 + (t629 * t777 + t656 * t693) * pkin(7)) * MDP(17) + (-t529 * t652 + (-t612 * t656 - t727) * t651 + (t629 * t780 - t656 * t694) * pkin(7)) * MDP(16) + (-t629 * t778 + t652 * t694) * MDP(14) + (t629 * t774 + t652 * t693) * MDP(13)) * qJD(1) + (t537 * t424 + t426 * t527 + (t649 * t683 + t653 * t682) * t826 - t767 * t821 + t769 * t458 + ((t508 * t649 + t509 * t653) * qJD(2) - t421) * t749) * MDP(35) + (t769 * t826 + (-qJD(2) * t527 - t821) * t749) * MDP(31) + (t424 * t527 - t769 * t821) * MDP(29) + (-t794 - t535 * t629 + t547 * t604 - t761 * t587 + (t513 * t651 + t728) * qJD(3)) * MDP(18) + (-t795 + t534 * t629 + t546 * t604 + t761 * t589 + (-t513 * t655 + t729) * qJD(3)) * MDP(20) + (pkin(2) * t546 - t570 * t629 + (-t729 + t784) * qJD(3)) * MDP(17) + (t599 * t783 - pkin(2) * t547 + (t728 + t785) * qJD(3)) * MDP(16) + (MDP(9) * t652 * t659 + MDP(10) * t772) * pkin(1) + t659 * t814 + (-t454 * t591 + t455 * t673 - t525 * t762 - t675 * t763) * MDP(23) + (-t454 * t673 + t525 * t763) * MDP(22) + (-t448 * t673 + t581 * t454 - t807 * t732 + t760 * t525 + t763 * t487 + (qJD(2) * t757 - t437) * t749) * MDP(28) + (-t763 * t732 + (qJD(2) * t673 + t525) * t749) * MDP(24) + (t762 * t732 + (qJD(2) * t591 - t675) * t749) * MDP(25) - t772 * t815 + (t534 * t587 - t535 * t589 + (t460 - t629 * t505 + (qJD(3) * t589 - t547) * pkin(8)) * t655 + ((qJD(3) * t587 - t546) * pkin(8) + t811) * t651) * MDP(19) + ((-t546 + t788) * t655 + (-t547 + t787) * t651) * MDP(12) + (-t589 * t783 - t790) * MDP(11) + (t465 * t604 - t505 * t535 - t507 * t534 - t761 * t513 + (qJD(3) * t678 + t460 * t655 + t474 * t651) * pkin(8)) * MDP(21) + t629 * t744 * MDP(14) - t629 * t742 * MDP(13); (-(t598 * t653 - t603 * t649) * t713 - t459 * t834 + (t649 * t770 + t653 * t771) * t826 + (-t674 * t826 + t421) * qJD(6) - t823) * MDP(34) + (t674 * t713 + t459 * t821 + ((-qJD(6) * t598 + t770) * t653 + (qJD(6) * t603 - t771) * t649) * t826 - t824) * MDP(35) + qJD(1) * t710 + (-t513 * t587 + t536 * t589 - 0.2e1 * t616 + 0.2e1 * t624 - t660) * MDP(20) + (t587 * t612 + t660) * MDP(17) + (-t500 * t675 - t705 * t713 - t732 * t809 - t822) * MDP(27) + (t525 * t732 + t455) * MDP(25) + (-t500 * t525 + t603 * t713 - t732 * t810 + t803) * MDP(28) + (-t547 - t787) * MDP(14) + (-t589 * t612 + t670) * MDP(16) + MDP(11) * t789 + (-t587 ^ 2 + t801) * MDP(12) + (-t536 * t587 + t670 + 0.2e1 * t692 - t792) * MDP(18) + (pkin(3) * t546 - qJ(4) * t547 + (t507 - t530) * t589 + (t505 - t733) * t587) * MDP(19) + (-pkin(3) * t474 + qJ(4) * t460 - t505 * t530 + t507 * t733 - t513 * t536) * MDP(21) + t499 * MDP(13) - t845; (-t713 + t789) * MDP(18) + t499 * MDP(19) + (-t629 ^ 2 - t801) * MDP(20) + (t792 + t811) * MDP(21) + (-t589 * t675 - t650 * t695 - t654 * t713) * MDP(27) + (-t525 * t589 + t650 * t713 - t654 * t695) * MDP(28) + (-(t653 * t654 - t782) * t713 - t589 * t834 + (-t649 * t681 - t781 * t826) * t826) * MDP(34) + ((t649 * t654 + t781) * t713 + t589 * t821 + (-t653 * t681 + t782 * t826) * t826) * MDP(35); (-t698 + (-qJD(5) - t732) * t525) * MDP(25) + (-t437 * t732 + t822) * MDP(27) + (-t436 * t732 - t803) * MDP(28) + (-(-t432 * t649 - t775) * t826 - t421 * qJD(6) + (-t525 * t834 - t653 * t713 - t739 * t826) * pkin(5) + t823) * MDP(34) + ((t432 * t653 - t796) * t826 + (t525 * t821 + t649 * t713 - t738 * t826) * pkin(5) + t824) * MDP(35) + t845; (t724 + t830) * MDP(31) + (-t702 - t829) * MDP(32) + (t421 * t826 + t823) * MDP(34) + (t420 * t826 + t824) * MDP(35) + (-MDP(31) * t791 + MDP(32) * t821 - MDP(34) * t421) * qJD(6) + t846;];
tauc  = t1;
