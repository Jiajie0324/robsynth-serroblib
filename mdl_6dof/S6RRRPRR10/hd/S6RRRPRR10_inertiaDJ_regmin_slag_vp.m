% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR10_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR10_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR10_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR10_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:21:56
% EndTime: 2019-03-09 19:22:06
% DurationCPUTime: 3.27s
% Computational Cost: add. (3027->327), mult. (7235->540), div. (0->0), fcn. (6271->8), ass. (0->186)
t140 = sin(qJ(2));
t128 = qJD(2) * t140;
t139 = sin(qJ(3));
t142 = cos(qJ(3));
t143 = cos(qJ(2));
t222 = qJD(3) * t143;
t196 = t142 * t222;
t253 = t128 * t139 - t196;
t252 = -0.4e1 * t140;
t138 = sin(qJ(5));
t122 = t138 * t139;
t141 = cos(qJ(5));
t251 = t141 * t142 + t122;
t129 = t139 * qJ(4);
t250 = -t142 * pkin(3) - t129;
t135 = t142 ^ 2;
t228 = t139 ^ 2 - t135;
t182 = t228 * qJD(3);
t249 = qJD(5) + qJD(6);
t198 = t139 * t222;
t226 = qJD(2) * t142;
t154 = t140 * t226 + t198;
t127 = qJD(3) * t142;
t242 = pkin(8) * t143;
t173 = pkin(2) * t140 - t242;
t96 = t173 * qJD(2);
t241 = t140 * pkin(8);
t174 = -pkin(2) * t143 - t241;
t99 = -pkin(1) + t174;
t239 = t127 * t99 + t139 * t96;
t41 = pkin(7) * t154 - t239;
t234 = t140 * t142;
t116 = qJ(4) * t234;
t73 = -t116 + (pkin(3) * t139 + pkin(7)) * t140;
t224 = qJD(3) * t139;
t230 = qJ(4) * t127 + qJD(4) * t139;
t78 = pkin(3) * t224 - t230;
t98 = -pkin(2) + t250;
t248 = (-t143 * t98 + t241) * qJD(2) - qJD(3) * t73 - t140 * t78;
t243 = pkin(7) * t139;
t118 = t143 * t243;
t132 = t143 * pkin(3);
t52 = t143 * pkin(4) + t118 + t132 + (-pkin(9) * t140 - t99) * t142;
t235 = t139 * t140;
t232 = t142 * t143;
t119 = pkin(7) * t232;
t237 = t139 * t99 + t119;
t65 = -qJ(4) * t143 + t237;
t59 = pkin(9) * t235 + t65;
t169 = t138 * t52 + t141 * t59;
t179 = -pkin(7) * t253 - t142 * t96 + t99 * t224;
t223 = qJD(3) * t140;
t199 = t139 * t223;
t246 = -pkin(3) - pkin(4);
t28 = pkin(9) * t199 + (-pkin(9) * t232 + t140 * t246) * qJD(2) + t179;
t121 = qJ(4) * t128;
t29 = t121 + (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t234 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t139) * t143 + t239;
t11 = -qJD(5) * t169 - t138 * t29 + t141 * t28;
t137 = sin(qJ(6));
t186 = -t138 * t59 + t141 * t52;
t240 = t143 * pkin(5);
t76 = t251 * t140;
t18 = -pkin(10) * t76 + t186 + t240;
t106 = t138 * t234;
t233 = t141 * t139;
t172 = t140 * t233 - t106;
t19 = pkin(10) * t172 + t169;
t244 = cos(qJ(6));
t204 = t244 * t19;
t161 = t137 * t18 + t204;
t210 = pkin(5) * t128;
t165 = t138 * t142 - t233;
t225 = qJD(2) * t143;
t34 = t251 * t225 + (qJD(3) - qJD(5)) * t140 * t165;
t5 = -t34 * pkin(10) + t11 - t210;
t220 = qJD(5) * t141;
t221 = qJD(5) * t138;
t10 = -t138 * t28 - t141 * t29 - t220 * t52 + t221 * t59;
t194 = t139 * t225;
t190 = t142 * t225;
t219 = qJD(5) * t142;
t202 = -t140 * t141 * t219 - t138 * t190 - t221 * t235;
t152 = t141 * t194 + t202;
t146 = qJD(3) * t76 + t152;
t7 = pkin(10) * t146 - t10;
t201 = -t137 * t7 + t244 * t5;
t2 = -qJD(6) * t161 + t201;
t245 = pkin(8) - pkin(9);
t103 = t245 * t139;
t104 = t245 * t142;
t94 = t141 * t104;
t166 = t103 * t138 + t94;
t36 = -(t122 * t245 + t94) * qJD(3) + t166 * qJD(5);
t247 = 0.2e1 * qJD(4);
t97 = t141 * qJ(4) + t138 * t246;
t238 = t137 * t97;
t236 = t137 * t138;
t216 = t142 * qJD(4);
t231 = qJ(4) * t190 + t140 * t216;
t134 = t140 ^ 2;
t227 = -t143 ^ 2 + t134;
t218 = qJD(5) * t143;
t217 = qJD(6) * t137;
t215 = t143 * qJD(4);
t214 = -0.2e1 * pkin(1) * qJD(2);
t213 = -0.2e1 * pkin(2) * qJD(3);
t189 = t244 * qJD(6);
t124 = t141 * t246;
t74 = qJ(4) * t221 - qJD(4) * t141 - qJD(5) * t124;
t75 = t138 * qJD(4) + qJD(5) * t97;
t183 = -qJ(4) * t138 + t124;
t95 = -pkin(5) + t183;
t212 = t137 * t75 - t189 * t95 + t244 * t74;
t211 = pkin(3) * t128;
t209 = pkin(8) * t224;
t208 = pkin(8) * t127;
t207 = pkin(5) * t217;
t206 = pkin(7) * t225;
t205 = t246 * t139;
t203 = t244 * t97;
t200 = t244 * t141;
t197 = qJ(4) * t223;
t111 = t138 * t127;
t193 = t139 * t127;
t192 = t140 * t225;
t191 = t141 * t224;
t188 = -t137 * t74 + t244 * t75;
t185 = t103 * t141 - t104 * t138;
t184 = t142 * t99 - t118;
t181 = t227 * qJD(2);
t180 = 0.2e1 * t192;
t88 = t142 * pkin(4) - t98;
t178 = -pkin(5) * t141 + t246;
t177 = pkin(5) * t189;
t176 = t139 * t190;
t175 = -pkin(7) + t205;
t171 = t244 * t251;
t66 = t132 - t184;
t168 = -t139 * t65 + t142 * t66;
t163 = t178 * t139;
t162 = t138 * t219 - t139 * t220 - t111;
t1 = -t137 * t5 - t18 * t189 + t19 * t217 - t244 * t7;
t48 = pkin(10) * t165 + t185;
t49 = -pkin(10) * t251 + t166;
t160 = t137 * t48 + t244 * t49;
t159 = t137 * t95 + t203;
t158 = t137 * t141 + t138 * t244;
t35 = -t103 * t220 + t104 * t221 + (-t111 + t191) * t245;
t157 = -pkin(7) + t163;
t156 = t251 * qJD(3);
t155 = t244 * t172;
t153 = t127 * t140 + t194;
t58 = -t137 * t251 - t165 * t244;
t150 = t162 + t191;
t149 = qJD(3) * t250 + t216;
t46 = t137 * t172 + t244 * t76;
t37 = t121 - t41 - t215;
t39 = t179 - t211;
t147 = qJD(3) * t168 + t39 * t139 + t37 * t142;
t145 = pkin(10) * t150 - t35;
t62 = qJD(5) * t251 - t156;
t144 = t62 * pkin(10) - t36;
t110 = -0.2e1 * t192;
t109 = pkin(8) * t196;
t81 = t190 - t199;
t67 = qJD(3) * t205 + t230;
t64 = t140 * t175 + t116;
t63 = pkin(5) * t251 + t88;
t61 = t249 * t158;
t60 = -qJD(5) * t200 - t141 * t189 + t236 * t249;
t57 = -t137 * t165 + t171;
t45 = t137 * t76 - t155;
t43 = t106 * pkin(5) + t140 * t157 + t116;
t40 = pkin(3) * t153 + t139 * t197 + t206 - t231;
t38 = -pkin(5) * t162 + qJD(3) * t163 + t230;
t33 = (t142 * t246 - t129) * t223 + t175 * t225 + t231;
t27 = qJD(6) * t159 + t188;
t26 = t217 * t97 + t212;
t17 = qJD(6) * t58 - t137 * t62 - t150 * t244;
t16 = qJD(6) * t171 - t137 * t150 - t165 * t217 + t244 * t62;
t14 = -t202 * pkin(5) + t157 * t225 + ((-pkin(5) * t138 - qJ(4)) * t139 + t178 * t142) * t223 + t231;
t13 = qJD(6) * t46 + t137 * t34 - t146 * t244;
t12 = -qJD(6) * t155 - t137 * t146 + t217 * t76 - t244 * t34;
t9 = qJD(6) * t160 + t137 * t145 - t144 * t244;
t8 = -t137 * t144 - t145 * t244 - t189 * t48 + t217 * t49;
t3 = [0, 0, 0, t180, -0.2e1 * t181, 0, 0, 0, t140 * t214, t143 * t214, -0.2e1 * t134 * t193 + 0.2e1 * t135 * t192, 0.2e1 * t134 * t182 + t176 * t252, 0.2e1 * t140 * t198 + 0.2e1 * t226 * t227, -0.2e1 * t139 * t181 + 0.2e1 * t140 * t196, t110, 0.2e1 * t179 * t143 + 0.2e1 * t184 * t128 + 0.2e1 * (t127 * t134 + t139 * t180) * pkin(7), -0.2e1 * t41 * t143 - 0.2e1 * t237 * t128 + 0.2e1 * (-t134 * t224 + t142 * t180) * pkin(7), 0.2e1 * (qJD(2) * t139 * t73 + t39) * t143 + 0.2e1 * (-qJD(2) * t66 + t127 * t73 + t40 * t139) * t140, 0.2e1 * t168 * t225 + 0.2e1 * (-t139 * t37 + t142 * t39 + (-t139 * t66 - t142 * t65) * qJD(3)) * t140, 0.2e1 * (-t226 * t73 - t37) * t143 + 0.2e1 * (qJD(2) * t65 - t40 * t142 + t224 * t73) * t140, 0.2e1 * t37 * t65 + 0.2e1 * t39 * t66 + 0.2e1 * t40 * t73, 0.2e1 * t76 * t34, 0.2e1 * t146 * t76 + 0.2e1 * t172 * t34, -0.2e1 * t128 * t76 + 0.2e1 * t143 * t34, -0.2e1 * t128 * t172 + 0.2e1 * t143 * t146, t110, 0.2e1 * t11 * t143 + 0.2e1 * t33 * t106 - 0.2e1 * t64 * t152 + 0.2e1 * (-qJD(2) * t186 - t156 * t64 - t233 * t33) * t140, 0.2e1 * t10 * t143 + 0.2e1 * t128 * t169 + 0.2e1 * t33 * t76 + 0.2e1 * t34 * t64, -0.2e1 * t46 * t12, 0.2e1 * t12 * t45 - 0.2e1 * t13 * t46, -0.2e1 * t12 * t143 - 0.2e1 * t128 * t46, 0.2e1 * t128 * t45 - 0.2e1 * t13 * t143, t110, 0.2e1 * t2 * t143 - 0.2e1 * (-t137 * t19 + t18 * t244) * t128 + 0.2e1 * t14 * t45 + 0.2e1 * t43 * t13, 0.2e1 * t1 * t143 - 0.2e1 * t12 * t43 + 0.2e1 * t128 * t161 + 0.2e1 * t14 * t46; 0, 0, 0, 0, 0, t225, -t128, 0, -t206, pkin(7) * t128, -t140 * t182 + t176, t193 * t252 - t225 * t228, t253, t154, 0, t109 + (-pkin(2) * t142 + t243) * t223 + (t139 * t174 - t119) * qJD(2) (pkin(7) * t234 + t139 * t173) * qJD(3) + (t142 * t174 + t118) * qJD(2), t109 + (t223 * t98 - t40) * t142 - t248 * t139, t147 (-t40 + (t140 * t98 + t242) * qJD(3)) * t139 + t248 * t142, pkin(8) * t147 + t40 * t98 + t73 * t78, -t165 * t34 - t62 * t76, -t146 * t165 + t150 * t76 - t172 * t62 - t251 * t34, t128 * t165 - t143 * t62, t128 * t251 + t143 * t150, 0, -t36 * t143 + t67 * t106 - t88 * t152 + t33 * t251 - t64 * t150 + (-qJD(2) * t185 - t156 * t88 - t233 * t67) * t140, t128 * t166 + t143 * t35 - t165 * t33 + t34 * t88 - t62 * t64 + t67 * t76, -t12 * t58 - t16 * t46, t12 * t57 - t13 * t58 + t16 * t45 - t17 * t46, -t128 * t58 - t143 * t16, t128 * t57 - t143 * t17, 0, -t9 * t143 - (-t137 * t49 + t244 * t48) * t128 + t38 * t45 + t63 * t13 + t14 * t57 + t43 * t17, -t12 * t63 + t128 * t160 + t14 * t58 + t143 * t8 - t16 * t43 + t38 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t193, -0.2e1 * t182, 0, 0, 0, t139 * t213, t142 * t213, -0.2e1 * t142 * t78 + 0.2e1 * t224 * t98, 0, -0.2e1 * t127 * t98 - 0.2e1 * t139 * t78, 0.2e1 * t98 * t78, 0.2e1 * t165 * t62, -0.2e1 * t150 * t165 + 0.2e1 * t251 * t62, 0, 0, 0, -0.2e1 * t150 * t88 + 0.2e1 * t251 * t67, -0.2e1 * t165 * t67 - 0.2e1 * t62 * t88, -0.2e1 * t58 * t16, 0.2e1 * t16 * t57 - 0.2e1 * t17 * t58, 0, 0, 0, 0.2e1 * t17 * t63 + 0.2e1 * t38 * t57, -0.2e1 * t16 * t63 + 0.2e1 * t38 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t153, t128, -t179, t41, -t179 + 0.2e1 * t211 (-pkin(3) * t225 - t197) * t142 + (-qJ(4) * t225 + (pkin(3) * qJD(3) - qJD(4)) * t140) * t139, 0.2e1 * t121 - t41 - 0.2e1 * t215, -pkin(3) * t39 + qJ(4) * t37 + qJD(4) * t65, 0, 0, -t34, -t140 * t156 - t152, t128, -t128 * t183 - t75 * t143 - t11, t128 * t97 + t143 * t74 - t10, 0, 0, t12, t13, t128, -t27 * t143 - (t244 * t95 - t238) * t128 - t2, t128 * t159 + t26 * t143 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, -t224, 0, -t208, t209, -t208, t149, -t209, t149 * pkin(8), 0, 0, t62, -t150, 0, t36, -t35, 0, 0, t16, t17, 0, t9, -t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, qJ(4) * t247, 0, 0, 0, 0, 0, 0.2e1 * t75, -0.2e1 * t74, 0, 0, 0, 0, 0, 0.2e1 * t27, -0.2e1 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, t81, 0, t39, 0, 0, 0, 0, 0, -t128 * t141 - t138 * t218, t128 * t138 - t141 * t218, 0, 0, 0, 0, 0, -t61 * t143 - (t200 - t236) * t128, t128 * t158 + t143 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, 0, t208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, t220, 0, 0, 0, 0, 0, t61, -t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t146, -t128, t11, t10, 0, 0, -t12, -t13, -t128, -t244 * t210 + (-t204 + (-t18 - t240) * t137) * qJD(6) + t201 (t128 * t137 - t143 * t189) * pkin(5) + t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, t150, 0, -t36, t35, 0, 0, -t16, -t17, 0, -t9, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t74, 0, 0, 0, 0, 0 (-t203 + (pkin(5) - t95) * t137) * qJD(6) - t188 (pkin(5) * t244 + t238) * qJD(6) + t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t221, -t220, 0, 0, 0, 0, 0, -t61, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t207, -0.2e1 * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t13, -t128, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t17, 0, -t9, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t207, -t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
