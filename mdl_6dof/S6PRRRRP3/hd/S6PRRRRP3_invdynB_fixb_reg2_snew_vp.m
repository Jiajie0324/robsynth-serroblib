% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 09:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:47:55
% EndTime: 2019-05-05 09:48:34
% DurationCPUTime: 31.09s
% Computational Cost: add. (184769->856), mult. (363521->1326), div. (0->0), fcn. (268908->12), ass. (0->638)
t1052 = qJD(3) ^ 2;
t882 = cos(pkin(6));
t1004 = g(3) - qJDD(1);
t880 = sin(pkin(6));
t973 = t880 * t1004;
t879 = sin(pkin(11));
t881 = cos(pkin(11));
t974 = g(1) * t879 - t881 * g(2);
t1060 = t882 * t974 - t973;
t852 = g(1) * t881 + g(2) * t879;
t888 = sin(qJ(2));
t892 = cos(qJ(2));
t775 = t1060 * t888 - t892 * t852;
t893 = qJD(2) ^ 2;
t762 = -t893 * pkin(2) + qJDD(2) * pkin(8) + t775;
t891 = cos(qJ(3));
t835 = t880 * t974;
t959 = t1004 * t882 + t835;
t817 = t891 * t959;
t1048 = pkin(3) * t891;
t887 = sin(qJ(3));
t964 = -pkin(9) * t887 - t1048;
t842 = t964 * qJD(2);
t697 = (qJD(2) * t842 + t762) * t887 - qJDD(3) * pkin(3) - t1052 * pkin(9) + t817;
t886 = sin(qJ(4));
t890 = cos(qJ(4));
t996 = qJD(2) * t887;
t841 = qJD(3) * t886 + t890 * t996;
t995 = qJD(2) * t891;
t866 = -qJD(4) + t995;
t818 = -pkin(4) * t866 - pkin(10) * t841;
t991 = qJD(2) * qJD(3);
t981 = t891 * t991;
t989 = qJDD(2) * t887;
t844 = t981 + t989;
t970 = -t890 * qJDD(3) + t886 * t844;
t919 = qJD(4) * t841 + t970;
t968 = qJD(3) * t890 - t886 * t996;
t965 = t968 ^ 2;
t634 = t919 * pkin(4) - t965 * pkin(10) + t818 * t841 + t697;
t869 = t887 * t991;
t986 = t891 * qJDD(2);
t845 = -t869 + t986;
t838 = -qJDD(4) + t845;
t924 = t968 * t841;
t1061 = -t838 + t924;
t1063 = t1061 * t886;
t1062 = t1061 * t890;
t885 = sin(qJ(5));
t889 = cos(qJ(5));
t795 = t841 * t885 - t889 * t968;
t797 = t889 * t841 + t885 * t968;
t1015 = t795 * t797;
t832 = -qJDD(5) + t838;
t971 = t832 + t1015;
t1059 = t971 * pkin(5);
t784 = t968 * qJD(4) + t886 * qJDD(3) + t890 * t844;
t972 = t885 * t784 + t889 * t919;
t689 = -qJD(5) * t797 - t972;
t857 = -qJD(5) + t866;
t763 = -pkin(5) * t857 - qJ(6) * t797;
t793 = t795 ^ 2;
t559 = -t689 * pkin(5) - t793 * qJ(6) + t763 * t797 + qJDD(6) + t634;
t911 = t888 * t959;
t910 = t892 * t959;
t1021 = t971 * t885;
t1020 = t971 * t889;
t690 = -t795 * qJD(5) + t889 * t784 - t885 * t919;
t768 = t795 * t857;
t1058 = t768 + t690;
t824 = t968 * t866;
t755 = -t784 - t824;
t1057 = t879 * t1004;
t1056 = t881 * t1004;
t714 = t832 - t1015;
t1023 = t714 * t885;
t794 = t797 ^ 2;
t856 = t857 ^ 2;
t756 = -t794 - t856;
t663 = t756 * t889 + t1023;
t1022 = t714 * t889;
t664 = -t756 * t885 + t1022;
t601 = t663 * t890 + t664 * t886;
t1055 = -pkin(3) * t601 - pkin(4) * t663;
t724 = -t856 - t793;
t643 = t724 * t885 - t1020;
t644 = t724 * t889 + t1021;
t584 = t643 * t890 + t644 * t886;
t1054 = -pkin(3) * t584 - pkin(4) * t643;
t650 = (qJD(5) + t857) * t797 + t972;
t804 = -t881 * t852 - t879 * t974;
t750 = (qJD(4) + t866) * t841 + t970;
t803 = -t879 * t852 + t881 * t974;
t837 = t841 ^ 2;
t863 = t866 ^ 2;
t1049 = pkin(3) * t887;
t1045 = pkin(7) * t880;
t1044 = pkin(7) * t882;
t654 = t768 - t690;
t592 = -t650 * t885 + t654 * t889;
t594 = -t650 * t889 - t654 * t885;
t525 = -t592 * t886 + t594 * t890;
t693 = -t793 - t794;
t507 = t525 * t887 - t693 * t891;
t1043 = pkin(8) * t507;
t585 = -t643 * t886 + t644 * t890;
t649 = (qJD(5) - t857) * t797 + t972;
t543 = t585 * t887 - t649 * t891;
t1042 = pkin(8) * t543;
t602 = -t663 * t886 + t664 * t890;
t552 = -t1058 * t891 + t602 * t887;
t1041 = pkin(8) * t552;
t523 = t592 * t890 + t594 * t886;
t1040 = pkin(9) * t523;
t1039 = pkin(9) * t584;
t1038 = pkin(9) * t601;
t1037 = pkin(10) * t592;
t1036 = pkin(10) * t643;
t1035 = pkin(10) * t663;
t508 = t525 * t891 + t693 * t887;
t950 = t508 * t888 - t523 * t892;
t429 = -t880 * t507 + t882 * t950;
t455 = t508 * t892 + t523 * t888;
t397 = t429 * t881 + t455 * t879;
t1034 = qJ(1) * t397;
t544 = t585 * t891 + t649 * t887;
t948 = t544 * t888 - t584 * t892;
t461 = -t880 * t543 + t882 * t948;
t501 = t544 * t892 + t584 * t888;
t424 = t461 * t881 + t501 * t879;
t1033 = qJ(1) * t424;
t553 = t1058 * t887 + t602 * t891;
t946 = t553 * t888 - t601 * t892;
t469 = -t880 * t552 + t882 * t946;
t511 = t553 * t892 + t601 * t888;
t433 = t469 * t881 + t511 * t879;
t1032 = qJ(1) * t433;
t730 = t891 * t762 - t887 * t959;
t698 = -pkin(3) * t1052 + qJDD(3) * pkin(9) + t842 * t995 + t730;
t774 = -t1060 * t892 - t852 * t888;
t761 = -qJDD(2) * pkin(2) - t893 * pkin(8) + t774;
t960 = -t845 + t869;
t961 = t844 + t981;
t711 = pkin(3) * t960 - pkin(9) * t961 + t761;
t630 = t886 * t698 - t890 * t711;
t599 = pkin(4) * t1061 + pkin(10) * t755 - t630;
t631 = t890 * t698 + t886 * t711;
t607 = -pkin(4) * t965 - pkin(10) * t919 + t866 * t818 + t631;
t538 = -t889 * t599 + t885 * t607;
t539 = t885 * t599 + t889 * t607;
t478 = -t538 * t889 + t539 * t885;
t1031 = t478 * t886;
t1030 = t478 * t890;
t983 = t690 * qJ(6) + t538;
t913 = qJ(6) * t768 - t983;
t994 = qJD(6) * t797;
t500 = t913 - 0.2e1 * t994 - t1059;
t1029 = t500 * t885;
t1028 = t500 * t889;
t1027 = t634 * t885;
t1026 = t634 * t889;
t1025 = t697 * t886;
t1024 = t697 * t890;
t1019 = t761 * t887;
t1018 = t761 * t891;
t771 = t838 + t924;
t1017 = t771 * t886;
t1016 = t771 * t890;
t865 = t887 * t893 * t891;
t853 = -t865 + qJDD(3);
t1013 = t853 * t887;
t1012 = t853 * t891;
t854 = qJDD(3) + t865;
t1011 = t854 * t887;
t1010 = t857 * t885;
t1009 = t857 * t889;
t875 = t887 ^ 2;
t1008 = t875 * t893;
t1006 = t886 * t841;
t1005 = t890 * t841;
t1003 = pkin(1) * t429 + t455 * t1045;
t1002 = pkin(1) * t461 + t501 * t1045;
t1001 = pkin(1) * t469 + t511 * t1045;
t1000 = -pkin(2) * t523 + pkin(8) * t508;
t999 = -pkin(2) * t584 + pkin(8) * t544;
t998 = -pkin(2) * t601 + pkin(8) * t553;
t876 = t891 ^ 2;
t997 = t875 + t876;
t990 = qJDD(2) * t880;
t988 = qJDD(2) * t888;
t987 = qJDD(2) * t892;
t985 = t887 * t1015;
t984 = t891 * t1015;
t428 = t882 * t507 + t880 * t950;
t980 = -pkin(1) * t428 + t455 * t1044;
t460 = t882 * t543 + t880 * t948;
t979 = -pkin(1) * t460 + t501 * t1044;
t468 = t882 * t552 + t880 * t946;
t978 = -pkin(1) * t468 + t511 * t1044;
t977 = -pkin(4) * t693 + pkin(10) * t594;
t976 = -pkin(4) * t649 + pkin(10) * t644;
t975 = -pkin(4) * t1058 + pkin(10) * t664;
t479 = t538 * t885 + t889 * t539;
t729 = t762 * t887 + t817;
t657 = t729 * t887 + t891 * t730;
t967 = t888 * t865;
t966 = t892 * t865;
t753 = -t824 + t784;
t493 = -pkin(3) * t523 - pkin(4) * t592;
t656 = t729 * t891 - t730 * t887;
t847 = t997 * qJDD(2);
t873 = t876 * t893;
t850 = t873 + t1008;
t801 = t847 * t892 - t850 * t888;
t962 = pkin(7) * t801 + t656 * t888;
t912 = t689 * qJ(6) - 0.2e1 * qJD(6) * t795 + t763 * t857 + t539;
t485 = -qJ(6) * t650 + (-t693 - t793) * pkin(5) + t912;
t783 = 0.2e1 * t994;
t490 = t783 + (-t654 - t768) * qJ(6) + t1059 + t983;
t411 = t485 * t889 + t490 * t885 + t977;
t415 = -t485 * t885 + t490 * t889 - t1037;
t381 = -t411 * t886 + t415 * t890 - t1040;
t480 = -pkin(5) * t654 + t493;
t371 = t381 * t891 - t480 * t887 - t1043;
t909 = -pkin(2) * t507 + pkin(3) * t693 - pkin(9) * t525;
t377 = -t411 * t890 - t415 * t886 + t909;
t958 = t371 * t888 + t377 * t892;
t450 = t479 + t977;
t451 = -t478 - t1037;
t395 = -t450 * t886 + t451 * t890 - t1040;
t382 = t395 * t891 - t493 * t887 - t1043;
t387 = -t450 * t890 - t451 * t886 + t909;
t957 = t382 * t888 + t387 * t892;
t521 = -pkin(5) * t649 + qJ(6) * t724 - t559;
t486 = qJ(6) * t1021 + t521 * t889 + t976;
t495 = qJ(6) * t1020 - t521 * t885 - t1036;
t417 = -t486 * t886 + t495 * t890 - t1039;
t452 = t1054 + t783 - t913 + 0.2e1 * t1059;
t388 = t417 * t891 - t452 * t887 - t1042;
t908 = -pkin(2) * t543 + pkin(3) * t649 - pkin(9) * t585;
t406 = -t486 * t890 - t495 * t886 + t908;
t956 = t388 * t888 + t406 * t892;
t550 = -qJ(6) * t756 + t559;
t616 = -pkin(5) * t1058 + qJ(6) * t714;
t489 = t550 * t885 + t616 * t889 + t975;
t497 = t550 * t889 - t616 * t885 - t1035;
t426 = -t489 * t886 + t497 * t890 - t1038;
t463 = (-t756 - t793) * pkin(5) + t912 + t1055;
t391 = t426 * t891 - t463 * t887 - t1041;
t907 = -pkin(2) * t552 + pkin(3) * t1058 - pkin(9) * t602;
t409 = -t489 * t890 - t497 * t886 + t907;
t955 = t391 * t888 + t409 * t892;
t502 = -pkin(5) * t793 + t912;
t448 = t502 * t885 + t1028;
t449 = t502 * t889 - t1029;
t403 = -t448 * t886 + t449 * t890;
t393 = t403 * t891 + t559 * t887;
t402 = t448 * t890 + t449 * t886;
t954 = t393 * t888 - t402 * t892;
t540 = t976 - t1026;
t578 = t1027 - t1036;
t466 = -t540 * t886 + t578 * t890 - t1039;
t483 = t538 + t1054;
t408 = t466 * t891 - t483 * t887 - t1042;
t443 = -t540 * t890 - t578 * t886 + t908;
t953 = t408 * t888 + t443 * t892;
t547 = t975 + t1027;
t590 = t1026 - t1035;
t482 = -t547 * t886 + t590 * t890 - t1038;
t491 = t539 + t1055;
t410 = t482 * t891 - t491 * t887 - t1041;
t445 = -t547 * t890 - t590 * t886 + t907;
t952 = t410 * t888 + t445 * t892;
t419 = t479 * t890 - t1031;
t413 = t419 * t891 + t634 * t887;
t418 = t479 * t886 + t1030;
t951 = t413 * t888 - t418 * t892;
t593 = t1058 * t889 - t649 * t885;
t595 = -t1058 * t885 - t649 * t889;
t526 = -t593 * t886 + t595 * t890;
t741 = -t794 + t793;
t516 = t526 * t891 - t741 * t887;
t524 = -t593 * t890 - t595 * t886;
t949 = t516 * t888 + t524 * t892;
t571 = t630 * t886 + t631 * t890;
t546 = t571 * t891 + t697 * t887;
t570 = -t630 * t890 + t631 * t886;
t947 = t546 * t888 - t570 * t892;
t767 = -t794 + t856;
t667 = t767 * t889 - t1021;
t669 = -t767 * t885 - t1020;
t610 = -t667 * t886 + t669 * t890;
t557 = t610 * t891 - t654 * t887;
t608 = -t667 * t890 - t669 * t886;
t945 = t557 * t888 + t608 * t892;
t766 = t793 - t856;
t668 = t766 * t885 - t1022;
t670 = t766 * t889 + t1023;
t611 = -t668 * t886 + t670 * t890;
t558 = t611 * t891 - t650 * t887;
t609 = -t668 * t890 - t670 * t886;
t944 = t558 * t888 + t609 * t892;
t645 = -t1010 * t795 + t689 * t889;
t646 = -t1009 * t795 - t689 * t885;
t588 = -t645 * t886 + t646 * t890;
t565 = t588 * t891 - t985;
t586 = -t645 * t890 - t646 * t886;
t943 = t565 * t888 + t586 * t892;
t647 = -t1009 * t797 + t690 * t885;
t648 = t1010 * t797 + t690 * t889;
t589 = -t647 * t886 + t648 * t890;
t566 = t589 * t891 + t985;
t587 = -t647 * t890 - t648 * t886;
t942 = t566 * t888 + t587 * t892;
t704 = (t795 * t885 + t797 * t889) * t857;
t705 = (t795 * t889 - t797 * t885) * t857;
t633 = -t704 * t886 + t705 * t890;
t624 = t633 * t891 - t832 * t887;
t632 = -t704 * t890 - t705 * t886;
t941 = t624 * t888 + t632 * t892;
t683 = -t750 * t890 - t755 * t886;
t770 = t965 + t837;
t639 = t683 * t891 - t770 * t887;
t681 = -t750 * t886 + t755 * t890;
t940 = t639 * t888 - t681 * t892;
t939 = t657 * t888 - t761 * t892;
t751 = (-qJD(4) + t866) * t841 - t970;
t682 = t751 * t890 - t753 * t886;
t805 = -t837 + t965;
t659 = t682 * t891 - t805 * t887;
t680 = -t751 * t886 - t753 * t890;
t938 = t659 * t888 + t680 * t892;
t790 = -t863 - t965;
t718 = t790 * t890 - t1063;
t661 = t718 * t891 - t751 * t887;
t717 = t790 * t886 + t1062;
t937 = t661 * t888 - t717 * t892;
t800 = -t837 - t863;
t728 = -t800 * t886 + t1016;
t666 = t728 * t891 + t753 * t887;
t727 = t800 * t890 + t1017;
t936 = t666 * t888 - t727 * t892;
t823 = -t837 + t863;
t739 = -t823 * t886 + t1062;
t673 = t739 * t891 - t755 * t887;
t737 = -t823 * t890 - t1063;
t935 = t673 * t888 + t737 * t892;
t822 = t965 - t863;
t740 = t822 * t890 + t1017;
t674 = t740 * t891 - t750 * t887;
t738 = -t822 * t886 + t1016;
t934 = t674 * t888 + t738 * t892;
t747 = t824 * t890 + t886 * t919;
t921 = t887 * t924;
t701 = t891 * t747 + t921;
t746 = -t824 * t886 + t890 * t919;
t933 = t701 * t888 + t746 * t892;
t749 = t1006 * t866 + t784 * t890;
t702 = t891 * t749 - t921;
t748 = t1005 * t866 - t784 * t886;
t932 = t702 * t888 + t748 * t892;
t760 = (-t890 * t968 - t1006) * t866;
t743 = t760 * t891 - t838 * t887;
t759 = (t886 * t968 - t1005) * t866;
t931 = t743 * t888 + t759 * t892;
t712 = t892 * t774 - t888 * t775;
t713 = t774 * t888 + t775 * t892;
t843 = 0.2e1 * t981 + t989;
t846 = -0.2e1 * t869 + t986;
t799 = -t843 * t887 + t846 * t891;
t851 = t873 - t1008;
t930 = t799 * t888 + t851 * t892;
t862 = -t873 - t1052;
t813 = t862 * t891 - t1011;
t929 = t813 * t888 + t846 * t892;
t860 = -t1008 - t1052;
t815 = -t860 * t887 - t1012;
t928 = t815 * t888 - t843 * t892;
t923 = t892 * t893 + t988;
t827 = t923 * t882;
t848 = -t888 * t893 + t987;
t927 = t827 * t881 + t848 * t879;
t788 = t827 * t879 - t848 * t881;
t926 = t847 * t888 + t850 * t892;
t839 = t997 * t991;
t922 = -qJDD(3) * t892 + t839 * t888;
t920 = t891 * t924;
t918 = (-t428 * t880 - t429 * t882) * pkin(7);
t917 = (-t460 * t880 - t461 * t882) * pkin(7);
t916 = (-t468 * t880 - t469 * t882) * pkin(7);
t861 = t873 - t1052;
t812 = t861 * t891 - t1013;
t915 = t812 * t888 - t892 * t986;
t840 = t891 * t854;
t859 = -t1008 + t1052;
t814 = -t859 * t887 + t840;
t914 = t814 * t888 - t887 * t987;
t819 = -t845 * t887 - t876 * t991;
t906 = t819 * t888 - t966;
t820 = t844 * t891 - t875 * t991;
t905 = t820 * t888 + t966;
t465 = -pkin(5) * t559 + qJ(6) * t502;
t390 = -pkin(4) * t559 + pkin(10) * t449 - qJ(6) * t1029 + t465 * t889;
t394 = -pkin(10) * t448 - qJ(6) * t1028 - t465 * t885;
t361 = -pkin(9) * t402 - t390 * t886 + t394 * t890;
t380 = -pkin(3) * t402 - pkin(4) * t448 - pkin(5) * t500;
t392 = t403 * t887 - t559 * t891;
t349 = -pkin(8) * t392 + t361 * t891 - t380 * t887;
t354 = -pkin(2) * t392 + pkin(3) * t559 - pkin(9) * t403 - t390 * t890 - t394 * t886;
t375 = t393 * t892 + t402 * t888;
t904 = pkin(7) * t375 + t349 * t888 + t354 * t892;
t462 = -pkin(4) * t634 + pkin(10) * t479;
t385 = -pkin(9) * t418 - pkin(10) * t1030 - t462 * t886;
t401 = -pkin(3) * t418 - pkin(4) * t478;
t412 = t419 * t887 - t634 * t891;
t364 = -pkin(8) * t412 + t385 * t891 - t401 * t887;
t370 = -pkin(2) * t412 + pkin(3) * t634 - pkin(9) * t419 + pkin(10) * t1031 - t462 * t890;
t384 = t413 * t892 + t418 * t888;
t903 = pkin(7) * t384 + t364 * t888 + t370 * t892;
t545 = t571 * t887 - t697 * t891;
t464 = -pkin(8) * t545 + (-pkin(9) * t891 + t1049) * t570;
t492 = -pkin(2) * t545 + pkin(3) * t697 - pkin(9) * t571;
t496 = t546 * t892 + t570 * t888;
t902 = pkin(7) * t496 + t464 * t888 + t492 * t892;
t541 = -pkin(9) * t681 - t570;
t638 = t683 * t887 + t770 * t891;
t503 = -pkin(8) * t638 + t1049 * t681 + t541 * t891;
t514 = -pkin(2) * t638 - pkin(3) * t770 - pkin(9) * t683 - t571;
t598 = t639 * t892 + t681 * t888;
t901 = pkin(7) * t598 + t503 * t888 + t514 * t892;
t606 = -pkin(3) * t717 + t630;
t635 = -pkin(9) * t717 + t1025;
t660 = t718 * t887 + t751 * t891;
t531 = -pkin(8) * t660 - t606 * t887 + t635 * t891;
t572 = -pkin(2) * t660 - pkin(3) * t751 - pkin(9) * t718 + t1024;
t618 = t661 * t892 + t717 * t888;
t900 = pkin(7) * t618 + t531 * t888 + t572 * t892;
t614 = -pkin(3) * t727 + t631;
t637 = -pkin(9) * t727 + t1024;
t665 = t728 * t887 - t753 * t891;
t534 = -pkin(8) * t665 - t614 * t887 + t637 * t891;
t573 = -pkin(2) * t665 + pkin(3) * t753 - pkin(9) * t728 - t1025;
t619 = t666 * t892 + t727 * t888;
t899 = pkin(7) * t619 + t534 * t888 + t573 * t892;
t809 = t862 * t887 + t840;
t694 = -pkin(2) * t809 + t729;
t725 = -pkin(8) * t809 + t1019;
t764 = t813 * t892 - t846 * t888;
t898 = pkin(7) * t764 + t694 * t892 + t725 * t888;
t811 = t860 * t891 - t1013;
t695 = -pkin(2) * t811 + t730;
t726 = -pkin(8) * t811 + t1018;
t765 = t815 * t892 + t843 * t888;
t897 = pkin(7) * t765 + t695 * t892 + t726 * t888;
t625 = t657 * t892 + t761 * t888;
t896 = pkin(7) * t625 - (-pkin(2) * t892 - pkin(8) * t888) * t656;
t828 = t848 * t882;
t826 = t848 * t880;
t825 = t923 * t880;
t821 = qJDD(3) * t888 + t839 * t892;
t810 = t859 * t891 + t1011;
t808 = t861 * t887 + t1012;
t807 = t961 * t887;
t806 = t960 * t891;
t802 = t922 * t882;
t798 = t843 * t891 + t846 * t887;
t792 = t926 * t882;
t791 = t926 * t880;
t789 = -t828 * t879 - t881 * t923;
t787 = t828 * t881 - t879 * t923;
t781 = t820 * t892 - t967;
t780 = t819 * t892 + t967;
t779 = t814 * t892 + t887 * t988;
t778 = t812 * t892 + t888 * t986;
t758 = t799 * t892 - t851 * t888;
t745 = -t910 + (t825 * t880 + t827 * t882) * pkin(7);
t744 = -t911 + (-t826 * t880 - t828 * t882) * pkin(7);
t742 = t760 * t887 + t838 * t891;
t736 = -t792 * t879 + t801 * t881;
t735 = t792 * t881 + t801 * t879;
t734 = -t880 * t807 + t882 * t905;
t733 = t880 * t806 + t882 * t906;
t732 = -t880 * t810 + t882 * t914;
t731 = -t880 * t808 + t882 * t915;
t722 = -t880 * t811 + t882 * t928;
t721 = -t880 * t809 + t882 * t929;
t720 = t882 * t811 + t880 * t928;
t719 = t882 * t809 + t880 * t929;
t710 = -t880 * t798 + t882 * t930;
t709 = pkin(2) * t846 + pkin(8) * t813 - t1018;
t708 = -pkin(2) * t843 + pkin(8) * t815 + t1019;
t703 = t713 * t882;
t700 = t887 * t749 + t920;
t699 = t887 * t747 - t920;
t692 = -pkin(1) * t826 - t1044 * t923 + t880 * t774 + t882 * t910;
t691 = pkin(1) * t825 - t1044 * t848 + t880 * t775 - t882 * t911;
t685 = t880 * t835 + (t973 - t712) * t882;
t684 = -t712 * t880 - t882 * t959;
t679 = t743 * t892 - t759 * t888;
t678 = -t722 * t879 + t765 * t881;
t677 = -t721 * t879 + t764 * t881;
t676 = t722 * t881 + t765 * t879;
t675 = t721 * t881 + t764 * t879;
t672 = t740 * t887 + t750 * t891;
t671 = t739 * t887 + t755 * t891;
t658 = t682 * t887 + t805 * t891;
t642 = t702 * t892 - t748 * t888;
t641 = t701 * t892 - t746 * t888;
t636 = pkin(2) * t850 + pkin(8) * t847 + t657;
t629 = -t880 * t742 + t882 * t931;
t628 = -pkin(2) * t761 + pkin(8) * t657;
t627 = t674 * t892 - t738 * t888;
t626 = t673 * t892 - t737 * t888;
t623 = t633 * t887 + t832 * t891;
t622 = -pkin(1) * t684 + t1044 * t713;
t621 = -t685 * t879 + t713 * t881;
t620 = t685 * t881 + t713 * t879;
t617 = t892 * t656 + (-t791 * t880 - t792 * t882) * pkin(7);
t615 = (-t684 * t880 - t685 * t882) * pkin(7);
t613 = -t880 * t700 + t882 * t932;
t612 = -t880 * t699 + t882 * t933;
t603 = t659 * t892 - t680 * t888;
t582 = -t888 * t695 + t892 * t726 + (-t720 * t880 - t722 * t882) * pkin(7);
t581 = -t888 * t694 + t892 * t725 + (-t719 * t880 - t721 * t882) * pkin(7);
t580 = -t880 * t672 + t882 * t934;
t579 = -t880 * t671 + t882 * t935;
t577 = -t880 * t665 + t882 * t936;
t576 = t882 * t665 + t880 * t936;
t575 = t656 * t880 + t882 * t939;
t574 = -t656 * t882 + t880 * t939;
t569 = -t880 * t660 + t882 * t937;
t568 = t882 * t660 + t880 * t937;
t567 = t624 * t892 - t632 * t888;
t564 = t589 * t887 - t984;
t563 = t588 * t887 + t984;
t562 = -pkin(1) * t720 - t708 * t880 + t882 * t897;
t561 = -pkin(1) * t719 - t709 * t880 + t882 * t898;
t560 = -pkin(1) * t791 - t880 * t636 + t882 * t962;
t556 = t611 * t887 + t650 * t891;
t555 = t610 * t887 + t654 * t891;
t554 = -t880 * t658 + t882 * t938;
t549 = -t880 * t638 + t882 * t940;
t548 = t882 * t638 + t880 * t940;
t536 = -t575 * t879 + t625 * t881;
t535 = t575 * t881 + t625 * t879;
t533 = -t577 * t879 + t619 * t881;
t532 = t577 * t881 + t619 * t879;
t530 = -t880 * t623 + t882 * t941;
t529 = t882 * t623 + t880 * t941;
t528 = -t569 * t879 + t618 * t881;
t527 = t569 * t881 + t618 * t879;
t520 = -pkin(2) * t727 + pkin(8) * t666 + t614 * t891 + t637 * t887;
t519 = -pkin(2) * t717 + pkin(8) * t661 + t606 * t891 + t635 * t887;
t518 = t558 * t892 - t609 * t888;
t517 = t557 * t892 - t608 * t888;
t515 = t526 * t887 + t741 * t891;
t513 = t566 * t892 - t587 * t888;
t512 = t565 * t892 - t586 * t888;
t505 = -t549 * t879 + t598 * t881;
t504 = t549 * t881 + t598 * t879;
t494 = pkin(8) * t639 + t887 * t541 + (-pkin(2) - t1048) * t681;
t488 = -t530 * t879 + t567 * t881;
t487 = t530 * t881 + t567 * t879;
t484 = -(pkin(2) * t888 - pkin(8) * t892) * t656 + (-t574 * t880 - t575 * t882) * pkin(7);
t481 = -pkin(1) * t574 - t628 * t880 + t882 * t896;
t477 = -t880 * t556 + t882 * t944;
t476 = -t880 * t555 + t882 * t945;
t475 = t882 * t556 + t880 * t944;
t474 = t882 * t555 + t880 * t945;
t473 = -t880 * t564 + t882 * t942;
t472 = -t880 * t563 + t882 * t943;
t471 = t882 * t564 + t880 * t942;
t470 = t882 * t563 + t880 * t943;
t458 = t516 * t892 - t524 * t888;
t457 = -t880 * t545 + t882 * t947;
t456 = t882 * t545 + t880 * t947;
t447 = pkin(8) * t546 + (-pkin(2) + t964) * t570;
t446 = t892 * t534 - t888 * t573 + (-t576 * t880 - t577 * t882) * pkin(7);
t444 = t892 * t531 - t888 * t572 + (-t568 * t880 - t569 * t882) * pkin(7);
t442 = -t477 * t879 + t518 * t881;
t441 = -t476 * t879 + t517 * t881;
t440 = t477 * t881 + t518 * t879;
t439 = t476 * t881 + t517 * t879;
t438 = -t473 * t879 + t513 * t881;
t437 = -t472 * t879 + t512 * t881;
t436 = t473 * t881 + t513 * t879;
t435 = t472 * t881 + t512 * t879;
t434 = -t469 * t879 + t511 * t881;
t432 = qJ(1) * t434;
t431 = -t880 * t515 + t882 * t949;
t430 = t882 * t515 + t880 * t949;
t425 = -t461 * t879 + t501 * t881;
t423 = qJ(1) * t425;
t422 = -pkin(1) * t576 - t520 * t880 + t882 * t899;
t421 = -t457 * t879 + t496 * t881;
t420 = t457 * t881 + t496 * t879;
t416 = -pkin(1) * t568 - t519 * t880 + t882 * t900;
t414 = t892 * t503 - t888 * t514 + (-t548 * t880 - t549 * t882) * pkin(7);
t407 = t482 * t887 + t491 * t891 + t998;
t405 = t466 * t887 + t483 * t891 + t999;
t404 = -pkin(1) * t548 - t494 * t880 + t882 * t901;
t400 = -t431 * t879 + t458 * t881;
t399 = t431 * t881 + t458 * t879;
t398 = -t429 * t879 + t455 * t881;
t396 = qJ(1) * t398;
t389 = t426 * t887 + t463 * t891 + t998;
t386 = t417 * t887 + t452 * t891 + t999;
t383 = t892 * t464 - t888 * t492 + (-t456 * t880 - t457 * t882) * pkin(7);
t379 = t395 * t887 + t493 * t891 + t1000;
t378 = -pkin(1) * t456 - t447 * t880 + t882 * t902;
t376 = t892 * t410 - t888 * t445 + t916;
t374 = -t880 * t412 + t882 * t951;
t373 = t882 * t412 + t880 * t951;
t372 = t892 * t408 - t888 * t443 + t917;
t369 = t381 * t887 + t480 * t891 + t1000;
t368 = t892 * t391 - t888 * t409 + t916;
t367 = -t407 * t880 + t882 * t952 + t978;
t366 = t892 * t388 - t888 * t406 + t917;
t365 = -t405 * t880 + t882 * t953 + t979;
t363 = -t880 * t392 + t882 * t954;
t362 = t882 * t392 + t880 * t954;
t360 = -t374 * t879 + t384 * t881;
t359 = t374 * t881 + t384 * t879;
t358 = -t389 * t880 + t882 * t955 + t978;
t357 = -pkin(2) * t418 + pkin(8) * t413 + t385 * t887 + t401 * t891;
t356 = -t386 * t880 + t882 * t956 + t979;
t355 = t892 * t382 - t888 * t387 + t918;
t353 = -t363 * t879 + t375 * t881;
t352 = t363 * t881 + t375 * t879;
t351 = t892 * t371 - t888 * t377 + t918;
t350 = -t880 * t379 + t882 * t957 + t980;
t348 = -pkin(2) * t402 + pkin(8) * t393 + t361 * t887 + t380 * t891;
t347 = -t880 * t369 + t882 * t958 + t980;
t346 = t892 * t364 - t888 * t370 + (-t373 * t880 - t374 * t882) * pkin(7);
t345 = -pkin(1) * t373 - t357 * t880 + t882 * t903;
t344 = t892 * t349 - t888 * t354 + (-t362 * t880 - t363 * t882) * pkin(7);
t343 = -pkin(1) * t362 - t348 * t880 + t882 * t904;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t804, 0, 0, 0, 0, 0, 0, t789, t788, 0, t621, 0, 0, 0, 0, 0, 0, t677, t678, t736, t536, 0, 0, 0, 0, 0, 0, t528, t533, t505, t421, 0, 0, 0, 0, 0, 0, t425, t434, t398, t360, 0, 0, 0, 0, 0, 0, t425, t434, t398, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, 0, 0, 0, 0, 0, 0, t787, -t927, 0, t620, 0, 0, 0, 0, 0, 0, t675, t676, t735, t535, 0, 0, 0, 0, 0, 0, t527, t532, t504, t420, 0, 0, 0, 0, 0, 0, t424, t433, t397, t359, 0, 0, 0, 0, 0, 0, t424, t433, t397, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1004, 0, 0, 0, 0, 0, 0, t826, -t825, 0, t684, 0, 0, 0, 0, 0, 0, t719, t720, t791, t574, 0, 0, 0, 0, 0, 0, t568, t576, t548, t456, 0, 0, 0, 0, 0, 0, t460, t468, t428, t373, 0, 0, 0, 0, 0, 0, t460, t468, t428, t362; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1057, -t1056, -t803, -qJ(1) * t803, 0, 0, -t788, 0, t789, t879 * t990, -qJ(1) * t787 - t692 * t879 + t744 * t881, qJ(1) * t927 - t691 * t879 + t745 * t881, -t703 * t879 + t712 * t881, -qJ(1) * t620 + t615 * t881 - t622 * t879, -t734 * t879 + t781 * t881, -t710 * t879 + t758 * t881, -t732 * t879 + t779 * t881, -t733 * t879 + t780 * t881, -t731 * t879 + t778 * t881, -t802 * t879 + t821 * t881, -qJ(1) * t675 - t561 * t879 + t581 * t881, -qJ(1) * t676 - t562 * t879 + t582 * t881, -qJ(1) * t735 - t560 * t879 + t617 * t881, -qJ(1) * t535 - t481 * t879 + t484 * t881, -t613 * t879 + t642 * t881, -t554 * t879 + t603 * t881, -t579 * t879 + t626 * t881, -t612 * t879 + t641 * t881, -t580 * t879 + t627 * t881, -t629 * t879 + t679 * t881, -qJ(1) * t527 - t416 * t879 + t444 * t881, -qJ(1) * t532 - t422 * t879 + t446 * t881, -qJ(1) * t504 - t404 * t879 + t414 * t881, -qJ(1) * t420 - t378 * t879 + t383 * t881, t438, t400, t441, t437, t442, t488, -t365 * t879 + t372 * t881 - t1033, -t367 * t879 + t376 * t881 - t1032, -t350 * t879 + t355 * t881 - t1034, -qJ(1) * t359 - t345 * t879 + t346 * t881, t438, t400, t441, t437, t442, t488, -t356 * t879 + t366 * t881 - t1033, -t358 * t879 + t368 * t881 - t1032, -t347 * t879 + t351 * t881 - t1034, -qJ(1) * t352 - t343 * t879 + t344 * t881; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1056, -t1057, t804, qJ(1) * t804, 0, 0, t927, 0, t787, -t881 * t990, qJ(1) * t789 + t692 * t881 + t744 * t879, qJ(1) * t788 + t691 * t881 + t745 * t879, t703 * t881 + t712 * t879, qJ(1) * t621 + t615 * t879 + t622 * t881, t734 * t881 + t781 * t879, t710 * t881 + t758 * t879, t732 * t881 + t779 * t879, t733 * t881 + t780 * t879, t731 * t881 + t778 * t879, t802 * t881 + t821 * t879, qJ(1) * t677 + t561 * t881 + t581 * t879, qJ(1) * t678 + t562 * t881 + t582 * t879, qJ(1) * t736 + t560 * t881 + t617 * t879, qJ(1) * t536 + t481 * t881 + t484 * t879, t613 * t881 + t642 * t879, t554 * t881 + t603 * t879, t579 * t881 + t626 * t879, t612 * t881 + t641 * t879, t580 * t881 + t627 * t879, t629 * t881 + t679 * t879, qJ(1) * t528 + t416 * t881 + t444 * t879, qJ(1) * t533 + t422 * t881 + t446 * t879, qJ(1) * t505 + t404 * t881 + t414 * t879, qJ(1) * t421 + t378 * t881 + t383 * t879, t436, t399, t439, t435, t440, t487, t365 * t881 + t372 * t879 + t423, t367 * t881 + t376 * t879 + t432, t350 * t881 + t355 * t879 + t396, qJ(1) * t360 + t345 * t881 + t346 * t879, t436, t399, t439, t435, t440, t487, t356 * t881 + t366 * t879 + t423, t358 * t881 + t368 * t879 + t432, t347 * t881 + t351 * t879 + t396, qJ(1) * t353 + t343 * t881 + t344 * t879; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t974, t852, 0, 0, 0, 0, t825, 0, t826, t882 * qJDD(2), pkin(1) * t828 - t882 * t774 + (-pkin(7) * t923 + t910) * t880, -pkin(1) * t827 - t882 * t775 + (-pkin(7) * t848 - t911) * t880, t713 * t880, pkin(1) * t685 + t1045 * t713, t882 * t807 + t880 * t905, t882 * t798 + t880 * t930, t882 * t810 + t880 * t914, -t882 * t806 + t880 * t906, t882 * t808 + t880 * t915, t922 * t880, pkin(1) * t721 + t709 * t882 + t880 * t898, pkin(1) * t722 + t708 * t882 + t880 * t897, pkin(1) * t792 + t882 * t636 + t880 * t962, pkin(1) * t575 + t628 * t882 + t880 * t896, t882 * t700 + t880 * t932, t882 * t658 + t880 * t938, t882 * t671 + t880 * t935, t882 * t699 + t880 * t933, t882 * t672 + t880 * t934, t882 * t742 + t880 * t931, pkin(1) * t569 + t519 * t882 + t880 * t900, pkin(1) * t577 + t520 * t882 + t880 * t899, pkin(1) * t549 + t494 * t882 + t880 * t901, pkin(1) * t457 + t447 * t882 + t880 * t902, t471, t430, t474, t470, t475, t529, t882 * t405 + t880 * t953 + t1002, t882 * t407 + t880 * t952 + t1001, t882 * t379 + t880 * t957 + t1003, pkin(1) * t374 + t357 * t882 + t880 * t903, t471, t430, t474, t470, t475, t529, t882 * t386 + t880 * t956 + t1002, t882 * t389 + t880 * t955 + t1001, t882 * t369 + t880 * t958 + t1003, pkin(1) * t363 + t348 * t882 + t880 * t904;];
tauB_reg  = t1;
