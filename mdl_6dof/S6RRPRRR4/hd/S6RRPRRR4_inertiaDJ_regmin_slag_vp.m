% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR4_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:34:50
% EndTime: 2019-03-09 13:34:59
% DurationCPUTime: 2.82s
% Computational Cost: add. (6547->304), mult. (18081->556), div. (0->0), fcn. (18744->12), ass. (0->178)
t142 = sin(pkin(12));
t144 = cos(pkin(12));
t143 = sin(pkin(6));
t152 = cos(qJ(2));
t209 = t143 * t152;
t149 = sin(qJ(2));
t210 = t143 * t149;
t110 = t142 * t210 - t144 * t209;
t147 = sin(qJ(5));
t229 = cos(qJ(5));
t148 = sin(qJ(4));
t151 = cos(qJ(4));
t145 = cos(pkin(6));
t228 = pkin(1) * t145;
t197 = t149 * t228;
t225 = pkin(8) + qJ(3);
t103 = t225 * t209 + t197;
t178 = t225 * t149;
t97 = (pkin(1) * t152 + pkin(2)) * t145 - t143 * t178;
t69 = t144 * t103 + t142 * t97;
t62 = t145 * pkin(9) + t69;
t111 = (t142 * t152 + t144 * t149) * t143;
t186 = -pkin(2) * t152 - pkin(1);
t73 = t110 * pkin(3) - t111 * pkin(9) + t186 * t143;
t175 = -t148 * t62 + t151 * t73;
t227 = t110 * pkin(4);
t96 = t111 * t151 + t145 * t148;
t37 = -t96 * pkin(10) + t175 + t227;
t165 = t111 * t148 - t145 * t151;
t221 = t148 * t73 + t151 * t62;
t39 = -pkin(10) * t165 + t221;
t161 = -t147 * t39 + t229 * t37;
t15 = -t110 * pkin(5) - t161;
t150 = cos(qJ(6));
t146 = sin(qJ(6));
t198 = qJD(6) * t146;
t105 = qJD(2) * t111;
t38 = t229 * t39;
t160 = t147 * t37 + t38;
t202 = qJD(2) * t152;
t127 = t202 * t228;
t89 = t127 + (-qJD(2) * t178 + qJD(3) * t152) * t143;
t90 = -t103 * qJD(2) - qJD(3) * t210;
t55 = t142 * t90 + t144 * t89;
t181 = t143 * t202;
t203 = qJD(2) * t149;
t182 = t143 * t203;
t106 = -t142 * t182 + t144 * t181;
t126 = pkin(2) * t182;
t72 = t105 * pkin(3) - t106 * pkin(9) + t126;
t26 = -t221 * qJD(4) - t148 * t55 + t151 * t72;
t67 = -qJD(4) * t165 + t106 * t151;
t19 = t105 * pkin(4) - t67 * pkin(10) + t26;
t200 = qJD(4) * t151;
t201 = qJD(4) * t148;
t187 = t106 * t148 + t111 * t200 + t145 * t201;
t25 = -t148 * t72 - t151 * t55 - t73 * t200 + t62 * t201;
t22 = -t187 * pkin(10) - t25;
t176 = t147 * t22 - t229 * t19;
t7 = -qJD(5) * t160 - t176;
t5 = -t105 * pkin(5) - t7;
t179 = t15 * t198 - t5 * t150;
t139 = t143 ^ 2;
t233 = t139 * t203;
t141 = t150 ^ 2;
t204 = t146 ^ 2 - t141;
t173 = t204 * qJD(6);
t232 = qJD(4) + qJD(5);
t120 = t147 * t151 + t229 * t148;
t59 = -t147 * t165 + t229 * t96;
t34 = t59 * qJD(5) + t147 * t67 + t229 * t187;
t58 = t147 * t96 + t229 * t165;
t159 = -t150 * t34 + t58 * t198;
t177 = t229 * qJD(5);
t185 = t229 * t151;
t208 = t147 * t148;
t94 = -qJD(4) * t185 - t151 * t177 + t232 * t208;
t215 = t150 * t94;
t231 = -t120 * t159 - t58 * t215;
t138 = qJD(6) * t150;
t230 = t15 * t138 + t5 * t146;
t133 = t142 * pkin(2) + pkin(9);
t224 = pkin(10) + t133;
t119 = -t185 + t208;
t166 = t110 * t150 - t146 * t59;
t33 = -t58 * qJD(5) - t147 * t187 + t229 * t67;
t23 = qJD(6) * t166 + t105 * t146 + t150 * t33;
t44 = t110 * t146 + t150 * t59;
t95 = t232 * t120;
t223 = t23 * t119 + t44 * t95;
t174 = qJD(4) * t224;
t162 = t229 * t174;
t171 = t147 * t174;
t115 = t224 * t148;
t116 = t224 * t151;
t88 = -t147 * t115 + t229 * t116;
t53 = t88 * qJD(5) - t148 * t171 + t151 * t162;
t87 = t229 * t115 + t147 * t116;
t222 = t87 * t138 + t53 * t146;
t211 = t94 * t119;
t214 = t150 * t95;
t220 = t120 * t214 - t150 * t211;
t219 = pkin(4) * qJD(5);
t218 = t120 * t94;
t217 = t146 * t94;
t216 = t146 * t95;
t213 = t23 * t146;
t212 = t23 * t150;
t207 = t148 * t133;
t206 = t151 * t105;
t194 = t229 * pkin(4);
t137 = -t194 - pkin(5);
t199 = qJD(5) * t147;
t190 = pkin(4) * t199;
t205 = t137 * t138 + t146 * t190;
t195 = 0.2e1 * t200;
t193 = pkin(5) * t198;
t192 = pkin(5) * t138;
t191 = pkin(4) * t201;
t189 = t146 * t215;
t188 = t58 * t229;
t83 = t87 * t198;
t134 = -t144 * pkin(2) - pkin(3);
t184 = t139 * t202;
t183 = t120 * t198;
t180 = t146 * t138;
t54 = t142 * t89 - t144 * t90;
t68 = -t142 * t103 + t144 * t97;
t172 = pkin(4) * t177;
t24 = qJD(6) * t44 - t105 * t150 + t146 * t33;
t170 = -t119 * t24 + t166 * t95;
t169 = -t120 * t95 + t211;
t16 = t110 * pkin(11) + t160;
t61 = -t145 * pkin(3) - t68;
t42 = pkin(4) * t165 + t61;
t32 = t58 * pkin(5) - t59 * pkin(11) + t42;
t10 = t146 * t32 + t150 * t16;
t168 = t146 * t44 - t150 * t166;
t124 = -t151 * pkin(4) + t134;
t85 = t119 * pkin(5) - t120 * pkin(11) + t124;
t50 = t146 * t85 + t150 * t88;
t167 = t120 * t105 - t94 * t110;
t136 = t147 * pkin(4) + pkin(11);
t164 = t119 * t136 - t120 * t137;
t163 = t137 * t198 - t150 * t190;
t28 = t58 * t138 + t146 * t34;
t74 = t119 * t198 - t214;
t77 = -t120 * t138 + t217;
t75 = t183 + t215;
t6 = -t147 * t19 - t37 * t177 + t39 * t199 - t229 * t22;
t158 = t148 * t105 + t110 * t200;
t157 = t95 * pkin(5) + t94 * pkin(11) + t191;
t40 = t187 * pkin(4) + t54;
t156 = -t105 * pkin(11) + t6;
t155 = -t120 * t28 + t58 * t217;
t154 = t34 * pkin(5) - t33 * pkin(11) + t40;
t153 = -t136 * t95 - t137 * t94 + (-t229 * t119 + t120 * t147) * t219;
t129 = 0.2e1 * t180;
t118 = -0.2e1 * t173;
t117 = t120 ^ 2;
t114 = (-pkin(8) * t209 - t197) * qJD(2);
t113 = pkin(8) * t182 - t127;
t82 = 0.2e1 * t110 * t105;
t78 = -t110 * t201 + t206;
t76 = t119 * t138 + t216;
t57 = -t120 * t173 - t189;
t52 = t115 * t177 + t116 * t199 + t148 * t162 + t151 * t171;
t49 = -t146 * t88 + t150 * t85;
t46 = -t119 * t105 - t95 * t110;
t45 = -0.4e1 * t120 * t180 + t204 * t94;
t30 = -qJD(6) * t50 + t146 * t52 + t150 * t157;
t29 = -t85 * t138 - t146 * t157 + t150 * t52 + t88 * t198;
t12 = t44 * t138 + t213;
t9 = -t146 * t16 + t150 * t32;
t8 = -t168 * qJD(6) - t146 * t24 + t212;
t2 = -t10 * qJD(6) + t146 * t156 + t150 * t154;
t1 = -t32 * t138 - t146 * t154 + t150 * t156 + t16 * t198;
t3 = [0, 0, 0, 0.2e1 * t149 * t184, 0.2e1 * (-t149 ^ 2 + t152 ^ 2) * t139 * qJD(2), 0.2e1 * t145 * t181, -0.2e1 * t145 * t182, 0, -0.2e1 * pkin(1) * t233 + 0.2e1 * t114 * t145, -0.2e1 * pkin(1) * t184 + 0.2e1 * t113 * t145, -0.2e1 * t69 * t105 - 0.2e1 * t68 * t106 - 0.2e1 * t55 * t110 + 0.2e1 * t54 * t111, 0.2e1 * t186 * pkin(2) * t233 - 0.2e1 * t68 * t54 + 0.2e1 * t69 * t55, 0.2e1 * t96 * t67, -0.2e1 * t67 * t165 - 0.2e1 * t96 * t187, 0.2e1 * t96 * t105 + 0.2e1 * t67 * t110, -0.2e1 * t165 * t105 - 0.2e1 * t187 * t110, t82, 0.2e1 * t175 * t105 + 0.2e1 * t26 * t110 + 0.2e1 * t54 * t165 + 0.2e1 * t61 * t187, -0.2e1 * t221 * t105 + 0.2e1 * t25 * t110 + 0.2e1 * t54 * t96 + 0.2e1 * t61 * t67, 0.2e1 * t59 * t33, -0.2e1 * t33 * t58 - 0.2e1 * t59 * t34, 0.2e1 * t59 * t105 + 0.2e1 * t33 * t110, -0.2e1 * t58 * t105 - 0.2e1 * t34 * t110, t82, 0.2e1 * t105 * t161 + 0.2e1 * t7 * t110 + 0.2e1 * t42 * t34 + 0.2e1 * t40 * t58, -0.2e1 * t160 * t105 + 0.2e1 * t6 * t110 + 0.2e1 * t42 * t33 + 0.2e1 * t40 * t59, 0.2e1 * t44 * t23, 0.2e1 * t166 * t23 - 0.2e1 * t44 * t24, 0.2e1 * t23 * t58 + 0.2e1 * t44 * t34, 0.2e1 * t166 * t34 - 0.2e1 * t24 * t58, 0.2e1 * t58 * t34, 0.2e1 * t15 * t24 - 0.2e1 * t166 * t5 + 0.2e1 * t2 * t58 + 0.2e1 * t9 * t34, 0.2e1 * t1 * t58 - 0.2e1 * t10 * t34 + 0.2e1 * t15 * t23 + 0.2e1 * t5 * t44; 0, 0, 0, 0, 0, t181, -t182, 0, t114, t113 (-t105 * t142 - t106 * t144) * pkin(2) (t142 * t55 - t144 * t54) * pkin(2), t67 * t148 + t96 * t200, -t148 * t187 + t67 * t151 + (-t96 * t148 - t151 * t165) * qJD(4), t158, t78, 0, -t105 * t207 + t134 * t187 - t54 * t151 + (-t151 * t133 * t110 + t61 * t148) * qJD(4), -t133 * t206 + t134 * t67 + t54 * t148 + (t110 * t207 + t151 * t61) * qJD(4), t33 * t120 - t59 * t94, -t33 * t119 - t120 * t34 + t94 * t58 - t59 * t95, t167, t46, 0, -t87 * t105 - t53 * t110 + t40 * t119 + t124 * t34 + t58 * t191 + t42 * t95, -t88 * t105 + t52 * t110 + t40 * t120 + t124 * t33 + t59 * t191 - t42 * t94, -t44 * t215 + (-t44 * t198 + t212) * t120, t168 * t94 + (-t213 - t150 * t24 + (-t146 * t166 - t150 * t44) * qJD(6)) * t120, t223 + t231, t155 + t170, t34 * t119 + t58 * t95, t2 * t119 + t230 * t120 - t15 * t217 - t166 * t53 + t87 * t24 + t30 * t58 + t49 * t34 + t9 * t95, t1 * t119 - t10 * t95 - t179 * t120 - t15 * t215 + t87 * t23 + t29 * t58 - t50 * t34 + t53 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148 * t195, 0.2e1 * (-t148 ^ 2 + t151 ^ 2) * qJD(4), 0, 0, 0, 0.2e1 * t134 * t201, t134 * t195, -0.2e1 * t218, 0.2e1 * t169, 0, 0, 0, 0.2e1 * t119 * t191 + 0.2e1 * t124 * t95, 0.2e1 * t120 * t191 - 0.2e1 * t124 * t94, -0.2e1 * t117 * t180 - 0.2e1 * t141 * t218, 0.2e1 * t117 * t173 + 0.4e1 * t120 * t189, -0.2e1 * t119 * t183 + 0.2e1 * t220, 0.2e1 * t119 * t77 - 0.2e1 * t120 * t216, 0.2e1 * t119 * t95, 0.2e1 * t30 * t119 + 0.2e1 * t222 * t120 - 0.2e1 * t87 * t217 + 0.2e1 * t49 * t95, -0.2e1 * t87 * t215 + 0.2e1 * t29 * t119 - 0.2e1 * t50 * t95 + 0.2e1 * (t53 * t150 - t83) * t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, 0, 0, 0, 0, 0, t78, -t158, 0, 0, 0, 0, 0, t46, -t167, 0, 0, 0, 0, 0, t155 - t170, t223 - t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169 * t150 + t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t187, t105, t26, t25, 0, 0, t33, -t34, t105, t105 * t194 + (-t38 + (-t37 - t227) * t147) * qJD(5) - t176 (-t105 * t147 - t110 * t177) * pkin(4) + t6, t12, t8, t28, -t159, 0, t137 * t24 - t28 * t136 + (-t146 * t188 - t147 * t166) * t219 + t179, t137 * t23 + t159 * t136 + (t147 * t44 - t150 * t188) * t219 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, -t201, 0, -t133 * t200, t133 * t201, 0, 0, -t94, -t95, 0, -t53, t52, t57, t45, t76, -t74, 0, t83 + (-qJD(6) * t164 - t53) * t150 + t153 * t146, t150 * t153 + t164 * t198 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t201, -t200, 0, 0, 0, 0, 0, -t95, t94, 0, 0, 0, 0, 0, t74, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t190, -0.2e1 * t172, t129, t118, 0, 0, 0, 0.2e1 * t163, 0.2e1 * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t34, t105, t7, t6, t12, t8, t28, -t159, 0, -pkin(5) * t24 - pkin(11) * t28 + t179, -pkin(5) * t23 + pkin(11) * t159 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t95, 0, -t53, t52, t57, t45, t76, -t74, 0, t83 + (pkin(5) * t94 - pkin(11) * t95) * t146 + (-t53 + (-pkin(5) * t120 - pkin(11) * t119) * qJD(6)) * t150, pkin(5) * t75 + pkin(11) * t74 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t94, 0, 0, 0, 0, 0, t74, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t190, -t172, t129, t118, 0, 0, 0, t163 - t193, -t192 + t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, t118, 0, 0, 0, -0.2e1 * t193, -0.2e1 * t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, -t24, t34, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t77, t95, t30, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, -t198, 0, -t136 * t138 - t146 * t172, t136 * t198 - t150 * t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, -t198, 0, -pkin(11) * t138, pkin(11) * t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
