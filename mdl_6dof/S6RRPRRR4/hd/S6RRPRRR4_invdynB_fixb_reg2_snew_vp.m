% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 20:52
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 20:48:44
% EndTime: 2019-05-06 20:50:05
% DurationCPUTime: 77.96s
% Computational Cost: add. (721096->1120), mult. (1887369->1821), div. (0->0), fcn. (1536061->14), ass. (0->805)
t1231 = sin(pkin(12));
t1233 = cos(pkin(12));
t1232 = sin(pkin(6));
t1243 = cos(qJ(2));
t1389 = qJD(1) * t1243;
t1349 = t1232 * t1389;
t1238 = sin(qJ(2));
t1365 = t1232 * t1238;
t1350 = qJD(1) * t1365;
t1189 = t1231 * t1350 - t1233 * t1349;
t1191 = t1231 * t1349 + t1233 * t1350;
t1149 = t1191 * t1189;
t1234 = cos(pkin(6));
t1331 = qJDD(1) * t1234 + qJDD(2);
t1412 = -t1149 + t1331;
t1428 = t1231 * t1412;
t1427 = t1233 * t1412;
t1235 = sin(qJ(6));
t1223 = qJD(1) * t1234 + qJD(2);
t1237 = sin(qJ(4));
t1242 = cos(qJ(4));
t1162 = -t1237 * t1191 + t1223 * t1242;
t1163 = t1191 * t1242 + t1223 * t1237;
t1236 = sin(qJ(5));
t1241 = cos(qJ(5));
t1115 = t1162 * t1236 + t1163 * t1241;
t1185 = qJD(4) + t1189;
t1181 = qJD(5) + t1185;
t1240 = cos(qJ(6));
t1073 = t1115 * t1235 - t1240 * t1181;
t1075 = t1115 * t1240 + t1181 * t1235;
t1000 = t1075 * t1073;
t1354 = qJDD(1) * t1238;
t1197 = (qJD(2) * t1389 + t1354) * t1232;
t1355 = qJDD(1) * t1232;
t1198 = -qJD(2) * t1350 + t1243 * t1355;
t1151 = t1233 * t1197 + t1231 * t1198;
t1333 = t1237 * t1151 - t1242 * t1331;
t1091 = -qJD(4) * t1163 - t1333;
t1092 = t1162 * qJD(4) + t1242 * t1151 + t1237 * t1331;
t1335 = -t1241 * t1091 + t1236 * t1092;
t978 = -qJD(5) * t1115 - t1335;
t1258 = qJDD(6) - t978;
t1416 = -t1000 + t1258;
t1426 = t1235 * t1416;
t1113 = -t1241 * t1162 + t1163 * t1236;
t1040 = t1115 * t1113;
t1332 = t1197 * t1231 - t1233 * t1198;
t1327 = qJDD(4) + t1332;
t1147 = qJDD(5) + t1327;
t1415 = -t1040 + t1147;
t1425 = t1236 * t1415;
t1117 = t1162 * t1163;
t1413 = t1117 + t1327;
t1424 = t1237 * t1413;
t1423 = t1240 * t1416;
t1422 = t1241 * t1415;
t1421 = t1242 * t1413;
t1081 = t1181 * t1113;
t1257 = qJD(5) * t1113 - t1091 * t1236 - t1092 * t1241;
t1420 = t1257 + t1081;
t1373 = t1191 * t1223;
t1419 = t1332 + t1373;
t1106 = qJD(6) + t1113;
t1019 = t1106 * t1073;
t918 = -t1073 * qJD(6) + t1235 * t1147 - t1240 * t1257;
t895 = -t918 + t1019;
t1228 = t1232 ^ 2;
t1245 = qJD(1) ^ 2;
t1364 = t1234 * t1245;
t1390 = qJD(1) * t1223;
t1418 = t1228 * (-t1364 + t1390);
t1206 = t1223 * t1350;
t1169 = t1198 - t1206;
t1417 = t1234 * t1169;
t1132 = t1185 * t1162;
t1045 = t1132 - t1092;
t1044 = t1132 + t1092;
t1173 = t1223 * t1189;
t1411 = -t1173 + t1151;
t1207 = t1223 * t1349;
t1166 = t1207 + t1197;
t1239 = sin(qJ(1));
t1244 = cos(qJ(1));
t1218 = g(1) * t1239 - t1244 * g(2);
t1277 = qJDD(1) * pkin(1) + t1218;
t1403 = pkin(8) * t1232;
t1255 = t1245 * t1403 + t1277;
t1253 = t1234 * t1255;
t1219 = g(1) * t1244 + g(2) * t1239;
t1254 = -pkin(1) * t1245 + pkin(8) * t1355 - t1219;
t1136 = -g(3) * t1365 + t1238 * t1253 + t1243 * t1254;
t1275 = pkin(2) * t1223 - qJ(3) * t1350;
t1230 = t1243 ^ 2;
t1366 = t1228 * t1245;
t1341 = t1230 * t1366;
t1078 = -pkin(2) * t1341 + t1198 * qJ(3) - t1223 * t1275 + t1136;
t1251 = t1238 * t1254;
t1362 = t1238 * t1245;
t1340 = t1228 * t1362;
t1248 = -t1251 - t1197 * qJ(3) + t1331 * pkin(2) + (t1234 * t1277 + pkin(2) * t1340 + (pkin(8) * t1364 + qJ(3) * t1390 - g(3)) * t1232) * t1243;
t990 = -0.2e1 * qJD(3) * t1189 + t1233 * t1078 + t1231 * t1248;
t1337 = -t1240 * t1147 - t1235 * t1257;
t890 = (qJD(6) - t1106) * t1075 + t1337;
t938 = (qJD(5) - t1181) * t1115 + t1335;
t1041 = (qJD(4) - t1185) * t1163 + t1333;
t1175 = t1234 * g(3) + t1232 * t1255;
t1104 = t1198 * pkin(2) + qJ(3) * t1341 - t1275 * t1350 - qJDD(3) + t1175;
t1410 = -pkin(9) * t1411 - t1104;
t1071 = t1073 ^ 2;
t1072 = t1075 ^ 2;
t1105 = t1106 ^ 2;
t1107 = t1113 ^ 2;
t1108 = t1115 ^ 2;
t1159 = t1162 ^ 2;
t1160 = t1163 ^ 2;
t1409 = t1181 ^ 2;
t1184 = t1185 ^ 2;
t1187 = t1189 ^ 2;
t1188 = t1191 ^ 2;
t1205 = t1223 ^ 2;
t1408 = 0.2e1 * qJD(3);
t1407 = pkin(2) * t1232;
t1406 = pkin(2) * t1234;
t1405 = pkin(3) * t1231;
t1404 = pkin(5) * t1236;
t1034 = pkin(5) * t1113 - pkin(11) * t1115;
t1249 = pkin(3) * t1419 + t1410;
t1145 = pkin(3) * t1189 - pkin(9) * t1191;
t1252 = pkin(9) * t1331 - t1189 * t1145 + t990;
t1250 = -pkin(3) * t1205 + t1252;
t898 = t1237 * t1250 - t1242 * t1249;
t1247 = pkin(4) * t1413 + pkin(10) * t1045 - t898;
t1129 = pkin(4) * t1185 - pkin(10) * t1163;
t899 = t1237 * t1249 + t1242 * t1250;
t852 = -pkin(4) * t1159 + pkin(10) * t1091 - t1129 * t1185 + t899;
t771 = t1236 * t1247 + t1241 * t852;
t749 = -pkin(5) * t1409 + pkin(11) * t1147 - t1034 * t1113 + t771;
t1336 = t1231 * t1078 - t1233 * t1248;
t957 = -t1331 * pkin(3) - t1205 * pkin(9) + (t1408 + t1145) * t1191 + t1336;
t900 = -t1091 * pkin(4) - t1159 * pkin(10) + t1163 * t1129 + t957;
t798 = t1420 * pkin(11) + (t1115 * t1181 - t978) * pkin(5) + t900;
t696 = t1235 * t798 + t1240 * t749;
t770 = t1236 * t852 - t1241 * t1247;
t748 = -t1147 * pkin(5) - pkin(11) * t1409 + t1034 * t1115 + t770;
t1402 = t1235 * t748;
t906 = t1000 + t1258;
t1401 = t1235 * t906;
t1400 = t1236 * t900;
t698 = t1236 * t771 - t1241 * t770;
t1399 = t1237 * t698;
t1398 = t1237 * t957;
t989 = t1191 * t1408 + t1336;
t908 = t1231 * t990 - t1233 * t989;
t1397 = t1238 * t908;
t1396 = t1240 * t748;
t1395 = t1240 * t906;
t1394 = t1241 * t900;
t1393 = t1242 * t698;
t1392 = t1242 * t957;
t1391 = t1243 * t908;
t1012 = t1040 + t1147;
t1387 = t1012 * t1236;
t1386 = t1012 * t1241;
t1063 = -t1117 + t1327;
t1385 = t1063 * t1237;
t1384 = t1063 * t1242;
t1383 = t1104 * t1231;
t1382 = t1104 * t1233;
t1381 = t1106 * t1235;
t1380 = t1106 * t1240;
t1139 = t1149 + t1331;
t1379 = t1139 * t1231;
t1378 = t1139 * t1233;
t1377 = t1181 * t1236;
t1376 = t1181 * t1241;
t1375 = t1185 * t1237;
t1374 = t1185 * t1242;
t1217 = t1243 * t1340;
t1195 = t1217 + t1331;
t1372 = t1195 * t1238;
t1371 = t1195 * t1243;
t1196 = -t1217 + t1331;
t1370 = t1196 * t1238;
t1369 = t1196 * t1243;
t1368 = t1223 * t1231;
t1367 = t1223 * t1233;
t1363 = t1238 * t1175;
t1361 = t1243 * t1175;
t1229 = t1238 ^ 2;
t1356 = t1229 + t1230;
t1353 = -pkin(3) * t1233 - pkin(2);
t1352 = -pkin(5) * t1241 - pkin(4);
t1351 = t1232 * t1390;
t1348 = t1236 * t1000;
t1347 = t1241 * t1000;
t1346 = t1231 * t1040;
t1345 = t1233 * t1040;
t1344 = t1231 * t1117;
t1343 = t1233 * t1117;
t1342 = t1229 * t1366;
t1339 = t1232 * t1149;
t1338 = t1234 * t1149;
t909 = t1231 * t989 + t1233 * t990;
t695 = t1235 * t749 - t1240 * t798;
t699 = t1236 * t770 + t1241 * t771;
t810 = t1237 * t898 + t1242 * t899;
t1179 = -t1218 * t1239 - t1244 * t1219;
t1216 = qJDD(1) * t1244 - t1239 * t1245;
t1330 = -pkin(7) * t1216 - g(3) * t1239;
t1186 = -t1205 - t1342;
t1143 = -t1186 * t1238 - t1369;
t1329 = pkin(8) * t1143 - t1363;
t1202 = -t1341 - t1205;
t1154 = t1202 * t1243 - t1372;
t1328 = pkin(8) * t1154 + t1361;
t649 = t1235 * t696 - t1240 * t695;
t650 = t1235 * t695 + t1240 * t696;
t809 = t1237 * t899 - t1242 * t898;
t628 = t1236 * t650 - t1241 * t748;
t629 = t1236 * t748 + t1241 * t650;
t600 = -t1237 * t628 + t1242 * t629;
t581 = t1231 * t600 - t1233 * t649;
t582 = t1231 * t649 + t1233 * t600;
t1326 = t1238 * t582 + t1243 * t581;
t652 = t1242 * t699 - t1399;
t640 = t1231 * t652 - t1233 * t900;
t641 = t1231 * t900 + t1233 * t652;
t1325 = t1238 * t641 + t1243 * t640;
t894 = -t1019 - t918;
t804 = -t1235 * t894 - t1240 * t890;
t956 = t1071 + t1072;
t772 = t1236 * t804 + t1241 * t956;
t773 = -t1236 * t956 + t1241 * t804;
t701 = -t1237 * t772 + t1242 * t773;
t802 = -t1235 * t890 + t1240 * t894;
t670 = t1231 * t701 - t1233 * t802;
t671 = t1231 * t802 + t1233 * t701;
t1324 = t1238 * t671 + t1243 * t670;
t891 = (-qJD(6) - t1106) * t1075 - t1337;
t803 = t1235 * t895 + t1240 * t891;
t999 = -t1072 + t1071;
t778 = t1236 * t803 + t1241 * t999;
t779 = -t1236 * t999 + t1241 * t803;
t706 = -t1237 * t778 + t1242 * t779;
t801 = -t1235 * t891 + t1240 * t895;
t673 = t1231 * t706 + t1233 * t801;
t674 = -t1231 * t801 + t1233 * t706;
t1323 = t1238 * t674 + t1243 * t673;
t972 = -t1105 - t1071;
t846 = t1240 * t972 - t1426;
t783 = t1236 * t846 + t1241 * t891;
t784 = -t1236 * t891 + t1241 * t846;
t710 = -t1237 * t783 + t1242 * t784;
t845 = t1235 * t972 + t1423;
t683 = t1231 * t710 - t1233 * t845;
t684 = t1231 * t845 + t1233 * t710;
t1322 = t1238 * t684 + t1243 * t683;
t980 = -t1072 - t1105;
t858 = -t1235 * t980 - t1395;
t786 = t1236 * t858 + t1241 * t895;
t787 = -t1236 * t895 + t1241 * t858;
t715 = -t1237 * t786 + t1242 * t787;
t857 = t1240 * t980 - t1401;
t686 = t1231 * t715 - t1233 * t857;
t687 = t1231 * t857 + t1233 * t715;
t1321 = t1238 * t687 + t1243 * t686;
t1018 = -t1072 + t1105;
t871 = -t1018 * t1235 + t1423;
t792 = t1236 * t871 + t1241 * t894;
t794 = -t1236 * t894 + t1241 * t871;
t725 = -t1237 * t792 + t1242 * t794;
t869 = -t1018 * t1240 - t1426;
t691 = t1231 * t725 + t1233 * t869;
t693 = -t1231 * t869 + t1233 * t725;
t1320 = t1238 * t693 + t1243 * t691;
t1017 = t1071 - t1105;
t872 = t1017 * t1240 - t1401;
t793 = t1236 * t872 + t1241 * t890;
t795 = -t1236 * t890 + t1241 * t872;
t726 = -t1237 * t793 + t1242 * t795;
t870 = -t1017 * t1235 - t1395;
t692 = t1231 * t726 + t1233 * t870;
t694 = -t1231 * t870 + t1233 * t726;
t1319 = t1238 * t694 + t1243 * t692;
t917 = -qJD(6) * t1075 - t1337;
t883 = t1073 * t1380 - t1235 * t917;
t839 = t1236 * t883 + t1347;
t841 = t1241 * t883 - t1348;
t761 = -t1237 * t839 + t1242 * t841;
t882 = -t1073 * t1381 - t1240 * t917;
t729 = t1231 * t761 + t1233 * t882;
t731 = -t1231 * t882 + t1233 * t761;
t1318 = t1238 * t731 + t1243 * t729;
t885 = -t1075 * t1381 + t1240 * t918;
t840 = t1236 * t885 - t1347;
t842 = t1241 * t885 + t1348;
t762 = -t1237 * t840 + t1242 * t842;
t884 = -t1075 * t1380 - t1235 * t918;
t730 = t1231 * t762 + t1233 * t884;
t732 = -t1231 * t884 + t1233 * t762;
t1317 = t1238 * t732 + t1243 * t730;
t942 = -t1081 + t1257;
t862 = -t1236 * t938 + t1241 * t942;
t864 = -t1236 * t942 - t1241 * t938;
t777 = -t1237 * t862 + t1242 * t864;
t995 = -t1107 - t1108;
t753 = t1231 * t777 - t1233 * t995;
t754 = t1231 * t995 + t1233 * t777;
t1316 = t1238 * t754 + t1243 * t753;
t929 = (-t1073 * t1240 + t1075 * t1235) * t1106;
t877 = t1236 * t929 - t1241 * t1258;
t878 = t1236 * t1258 + t1241 * t929;
t790 = -t1237 * t877 + t1242 * t878;
t927 = (t1073 * t1235 + t1075 * t1240) * t1106;
t757 = t1231 * t790 + t1233 * t927;
t758 = -t1231 * t927 + t1233 * t790;
t1315 = t1238 * t758 + t1243 * t757;
t1039 = -t1108 + t1107;
t937 = (qJD(5) + t1181) * t1115 + t1335;
t861 = -t1236 * t937 - t1241 * t1420;
t863 = t1236 * t1420 - t1241 * t937;
t776 = -t1237 * t861 + t1242 * t863;
t766 = t1039 * t1233 + t1231 * t776;
t767 = -t1039 * t1231 + t1233 * t776;
t1314 = t1238 * t767 + t1243 * t766;
t780 = t1231 * t810 - t1233 * t957;
t781 = t1231 * t957 + t1233 * t810;
t1313 = t1238 * t781 + t1243 * t780;
t1027 = -t1409 - t1107;
t925 = t1027 * t1236 + t1422;
t926 = t1027 * t1241 - t1425;
t849 = -t1237 * t925 + t1242 * t926;
t807 = t1231 * t849 - t1233 * t937;
t808 = t1231 * t937 + t1233 * t849;
t1312 = t1238 * t808 + t1243 * t807;
t1059 = -t1108 - t1409;
t953 = t1059 * t1241 - t1387;
t954 = -t1059 * t1236 - t1386;
t876 = -t1237 * t953 + t1242 * t954;
t816 = t1231 * t876 + t1233 * t1420;
t817 = -t1231 * t1420 + t1233 * t876;
t1311 = t1238 * t817 + t1243 * t816;
t1080 = -t1108 + t1409;
t958 = t1080 * t1241 + t1425;
t960 = -t1080 * t1236 + t1422;
t888 = -t1237 * t958 + t1242 * t960;
t819 = t1231 * t888 + t1233 * t942;
t821 = -t1231 * t942 + t1233 * t888;
t1310 = t1238 * t821 + t1243 * t819;
t1079 = t1107 - t1409;
t959 = t1079 * t1236 + t1386;
t961 = t1079 * t1241 - t1387;
t889 = -t1237 * t959 + t1242 * t961;
t820 = t1231 * t889 + t1233 * t938;
t822 = -t1231 * t938 + t1233 * t889;
t1309 = t1238 * t822 + t1243 * t820;
t928 = t1113 * t1377 + t1241 * t978;
t930 = t1113 * t1376 - t1236 * t978;
t855 = -t1237 * t928 + t1242 * t930;
t831 = t1231 * t855 + t1345;
t833 = t1233 * t855 - t1346;
t1308 = t1238 * t833 + t1243 * t831;
t931 = t1115 * t1376 - t1236 * t1257;
t932 = -t1115 * t1377 - t1241 * t1257;
t856 = -t1237 * t931 + t1242 * t932;
t832 = t1231 * t856 - t1345;
t834 = t1233 * t856 + t1346;
t1307 = t1238 * t834 + t1243 * t832;
t1306 = t1238 * t909 + t1391;
t1007 = (-t1113 * t1236 - t1115 * t1241) * t1181;
t1008 = (-t1113 * t1241 + t1115 * t1236) * t1181;
t920 = -t1007 * t1237 + t1008 * t1242;
t915 = -t1147 * t1233 + t1231 * t920;
t916 = t1147 * t1231 + t1233 * t920;
t1305 = t1238 * t916 + t1243 * t915;
t1077 = t1159 + t1160;
t965 = -t1041 * t1242 - t1045 * t1237;
t921 = t1077 * t1233 + t1231 * t965;
t922 = -t1077 * t1231 + t1233 * t965;
t1304 = t1238 * t922 + t1243 * t921;
t1116 = -t1160 + t1159;
t1042 = (-qJD(4) - t1185) * t1163 - t1333;
t964 = t1042 * t1242 - t1044 * t1237;
t923 = t1116 * t1233 + t1231 * t964;
t924 = -t1116 * t1231 + t1233 * t964;
t1303 = t1238 * t924 + t1243 * t923;
t1086 = -t1184 - t1159;
t1002 = t1086 * t1242 - t1424;
t935 = t1002 * t1231 + t1042 * t1233;
t936 = t1002 * t1233 - t1042 * t1231;
t1302 = t1238 * t936 + t1243 * t935;
t1099 = -t1160 - t1184;
t1010 = -t1099 * t1237 - t1384;
t943 = t1010 * t1231 - t1044 * t1233;
t944 = t1010 * t1233 + t1044 * t1231;
t1301 = t1238 * t944 + t1243 * t943;
t1131 = -t1160 + t1184;
t1024 = -t1131 * t1237 + t1421;
t948 = t1024 * t1231 + t1045 * t1233;
t950 = t1024 * t1233 - t1045 * t1231;
t1300 = t1238 * t950 + t1243 * t948;
t1130 = t1159 - t1184;
t1025 = t1130 * t1242 - t1385;
t949 = t1025 * t1231 + t1041 * t1233;
t951 = t1025 * t1233 - t1041 * t1231;
t1299 = t1238 * t951 + t1243 * t949;
t1036 = -t1091 * t1237 - t1162 * t1374;
t991 = t1036 * t1231 - t1343;
t993 = t1036 * t1233 + t1344;
t1298 = t1238 * t993 + t1243 * t991;
t1038 = t1092 * t1242 - t1163 * t1375;
t992 = t1038 * t1231 + t1343;
t994 = t1038 * t1233 - t1344;
t1297 = t1238 * t994 + t1243 * t992;
t1061 = (t1162 * t1242 + t1163 * t1237) * t1185;
t1028 = t1231 * t1061 - t1233 * t1327;
t1029 = t1233 * t1061 + t1231 * t1327;
t1295 = t1028 * t1243 + t1029 * t1238;
t1048 = -t1231 * t1419 + t1233 * t1411;
t1050 = -t1231 * t1411 - t1233 * t1419;
t1294 = t1048 * t1243 + t1050 * t1238;
t1123 = t1173 + t1151;
t1276 = -t1332 + t1373;
t1049 = -t1123 * t1233 + t1231 * t1276;
t1051 = t1123 * t1231 + t1233 * t1276;
t1293 = t1049 * t1243 + t1051 * t1238;
t1137 = -t1205 - t1187;
t1067 = t1137 * t1231 + t1427;
t1068 = t1137 * t1233 - t1428;
t1292 = t1067 * t1243 + t1068 * t1238;
t1157 = -t1188 - t1205;
t1084 = t1157 * t1233 - t1379;
t1085 = -t1157 * t1231 - t1378;
t1291 = t1084 * t1243 + t1085 * t1238;
t1171 = -t1188 + t1205;
t1093 = t1171 * t1233 + t1428;
t1095 = -t1171 * t1231 + t1427;
t1290 = t1093 * t1243 + t1095 * t1238;
t1170 = t1187 - t1205;
t1094 = t1170 * t1231 + t1378;
t1096 = t1170 * t1233 - t1379;
t1289 = t1094 * t1243 + t1096 * t1238;
t1109 = t1189 * t1368 - t1233 * t1332;
t1110 = t1189 * t1367 + t1231 * t1332;
t1288 = t1109 * t1243 + t1110 * t1238;
t1111 = t1151 * t1231 + t1191 * t1367;
t1112 = t1151 * t1233 - t1191 * t1368;
t1287 = t1111 * t1243 + t1112 * t1238;
t1127 = (-t1189 * t1231 - t1191 * t1233) * t1223;
t1128 = (-t1189 * t1233 + t1191 * t1231) * t1223;
t1286 = t1127 * t1243 + t1128 * t1238;
t1135 = t1251 + (t1232 * g(3) - t1253) * t1243;
t1285 = -t1243 * t1135 + t1238 * t1136;
t1065 = t1135 * t1238 + t1136 * t1243;
t1284 = t1166 * t1243 + t1169 * t1238;
t1167 = -t1207 + t1197;
t1168 = t1198 + t1206;
t1283 = -t1167 * t1243 + t1168 * t1238;
t1282 = t1186 * t1243 - t1370;
t1200 = -t1342 + t1205;
t1281 = t1200 * t1243 + t1372;
t1280 = t1202 * t1238 + t1371;
t1201 = t1341 - t1205;
t1279 = t1201 * t1238 + t1369;
t1178 = t1218 * t1244 - t1219 * t1239;
t1278 = t1232 * t1331;
t576 = pkin(10) * t629 + (-pkin(11) * t1236 + t1352) * t649;
t584 = -pkin(10) * t628 + (-pkin(11) * t1241 + t1404) * t649;
t599 = t1237 * t629 + t1242 * t628;
t558 = -pkin(9) * t599 - t1237 * t576 + t1242 * t584;
t571 = -pkin(3) * t599 - pkin(4) * t628 + pkin(5) * t748 - pkin(11) * t650;
t546 = -pkin(2) * t599 + qJ(3) * t582 + t1231 * t558 + t1233 * t571;
t547 = -qJ(3) * t581 - t1231 * t571 + t1233 * t558;
t562 = -t1238 * t581 + t1243 * t582;
t1274 = pkin(8) * t562 + t1238 * t547 + t1243 * t546;
t633 = -pkin(11) * t802 - t649;
t609 = pkin(10) * t773 + t1236 * t633 + t1352 * t802;
t612 = -pkin(10) * t772 + t1241 * t633 + t1404 * t802;
t700 = t1237 * t773 + t1242 * t772;
t577 = -pkin(9) * t700 - t1237 * t609 + t1242 * t612;
t606 = -pkin(3) * t700 - pkin(4) * t772 - pkin(5) * t956 - pkin(11) * t804 - t650;
t563 = -pkin(2) * t700 + qJ(3) * t671 + t1231 * t577 + t1233 * t606;
t564 = -qJ(3) * t670 - t1231 * t606 + t1233 * t577;
t622 = -t1238 * t670 + t1243 * t671;
t1273 = pkin(8) * t622 + t1238 * t564 + t1243 * t563;
t651 = t1237 * t699 + t1393;
t681 = -pkin(4) * t900 + pkin(10) * t699;
t605 = -pkin(9) * t651 - pkin(10) * t1393 - t1237 * t681;
t618 = -pkin(3) * t651 - pkin(4) * t698;
t566 = -pkin(2) * t651 + qJ(3) * t641 + t1231 * t605 + t1233 * t618;
t575 = -qJ(3) * t640 - t1231 * t618 + t1233 * t605;
t603 = -t1238 * t640 + t1243 * t641;
t1272 = pkin(8) * t603 + t1238 * t575 + t1243 * t566;
t678 = -pkin(5) * t845 + t695;
t717 = -pkin(11) * t845 + t1402;
t621 = -pkin(4) * t845 + pkin(10) * t784 + t1236 * t717 + t1241 * t678;
t630 = -pkin(10) * t783 - t1236 * t678 + t1241 * t717;
t709 = t1237 * t784 + t1242 * t783;
t591 = -pkin(9) * t709 - t1237 * t621 + t1242 * t630;
t634 = -pkin(3) * t709 - pkin(4) * t783 - pkin(5) * t891 - pkin(11) * t846 + t1396;
t569 = -pkin(2) * t709 + qJ(3) * t684 + t1231 * t591 + t1233 * t634;
t572 = -qJ(3) * t683 - t1231 * t634 + t1233 * t591;
t636 = -t1238 * t683 + t1243 * t684;
t1271 = pkin(8) * t636 + t1238 * t572 + t1243 * t569;
t679 = -pkin(5) * t857 + t696;
t718 = -pkin(11) * t857 + t1396;
t623 = -pkin(4) * t857 + pkin(10) * t787 + t1236 * t718 + t1241 * t679;
t631 = -pkin(10) * t786 - t1236 * t679 + t1241 * t718;
t714 = t1237 * t787 + t1242 * t786;
t592 = -pkin(9) * t714 - t1237 * t623 + t1242 * t631;
t635 = -pkin(3) * t714 - pkin(4) * t786 - pkin(5) * t895 - pkin(11) * t858 - t1402;
t570 = -pkin(2) * t714 + qJ(3) * t687 + t1231 * t592 + t1233 * t635;
t574 = -qJ(3) * t686 - t1231 * t635 + t1233 * t592;
t638 = -t1238 * t686 + t1243 * t687;
t1270 = pkin(8) * t638 + t1238 * t574 + t1243 * t570;
t675 = -pkin(4) * t995 + pkin(10) * t864 + t699;
t680 = -pkin(10) * t862 - t698;
t775 = t1237 * t864 + t1242 * t862;
t617 = -pkin(9) * t775 - t1237 * t675 + t1242 * t680;
t734 = -pkin(3) * t775 - pkin(4) * t862;
t602 = -pkin(2) * t775 + qJ(3) * t754 + t1231 * t617 + t1233 * t734;
t604 = -qJ(3) * t753 - t1231 * t734 + t1233 * t617;
t688 = -t1238 * t753 + t1243 * t754;
t1269 = pkin(8) * t688 + t1238 * t604 + t1243 * t602;
t791 = -pkin(4) * t937 + pkin(10) * t926 - t1394;
t828 = -pkin(10) * t925 + t1400;
t848 = t1237 * t926 + t1242 * t925;
t704 = -pkin(9) * t848 - t1237 * t791 + t1242 * t828;
t716 = -pkin(3) * t848 - pkin(4) * t925 + t770;
t632 = -pkin(2) * t848 + qJ(3) * t808 + t1231 * t704 + t1233 * t716;
t642 = -qJ(3) * t807 - t1231 * t716 + t1233 * t704;
t733 = -t1238 * t807 + t1243 * t808;
t1268 = pkin(8) * t733 + t1238 * t642 + t1243 * t632;
t799 = pkin(4) * t1420 + pkin(10) * t954 + t1400;
t835 = -pkin(10) * t953 + t1394;
t875 = t1237 * t954 + t1242 * t953;
t711 = -pkin(9) * t875 - t1237 * t799 + t1242 * t835;
t727 = -pkin(3) * t875 - pkin(4) * t953 + t771;
t637 = -pkin(2) * t875 + qJ(3) * t817 + t1231 * t711 + t1233 * t727;
t647 = -qJ(3) * t816 - t1231 * t727 + t1233 * t711;
t737 = -t1238 * t816 + t1243 * t817;
t1267 = pkin(8) * t737 + t1238 * t647 + t1243 * t637;
t665 = qJ(3) * t781 + (-pkin(9) * t1231 + t1353) * t809;
t682 = -qJ(3) * t780 + (-pkin(9) * t1233 + t1405) * t809;
t707 = -t1238 * t780 + t1243 * t781;
t1266 = pkin(8) * t707 + t1238 * t682 + t1243 * t665;
t963 = -t1041 * t1237 + t1045 * t1242;
t782 = -pkin(9) * t963 - t809;
t728 = qJ(3) * t922 + t1231 * t782 + t1353 * t963;
t736 = -qJ(3) * t921 + t1233 * t782 + t1405 * t963;
t838 = -t1238 * t921 + t1243 * t922;
t1265 = pkin(8) * t838 + t1238 * t736 + t1243 * t728;
t1001 = t1086 * t1237 + t1421;
t851 = t1237 * t1252 - t1242 * t1410 + (-t1205 * t1237 - t1242 * t1419 - t1001) * pkin(3);
t901 = -pkin(9) * t1001 + t1398;
t746 = -pkin(2) * t1001 + qJ(3) * t936 + t1231 * t901 + t1233 * t851;
t763 = -qJ(3) * t935 - t1231 * t851 + t1233 * t901;
t860 = -t1238 * t935 + t1243 * t936;
t1264 = pkin(8) * t860 + t1238 * t763 + t1243 * t746;
t1009 = t1099 * t1242 - t1385;
t859 = -pkin(3) * t1009 + t899;
t904 = -pkin(9) * t1009 + t1392;
t750 = -pkin(2) * t1009 + qJ(3) * t944 + t1231 * t904 + t1233 * t859;
t768 = -qJ(3) * t943 - t1231 * t859 + t1233 * t904;
t865 = -t1238 * t943 + t1243 * t944;
t1263 = pkin(8) * t865 + t1238 * t768 + t1243 * t750;
t1126 = -t1187 - t1188;
t866 = -pkin(2) * t1126 + qJ(3) * t1051 + t909;
t881 = -qJ(3) * t1049 - t908;
t970 = -t1049 * t1238 + t1051 * t1243;
t1262 = pkin(8) * t970 + t1238 * t881 + t1243 * t866;
t1016 = -qJ(3) * t1067 - t1383;
t981 = -pkin(2) * t1419 + qJ(3) * t1068 + t1382;
t998 = -t1067 * t1238 + t1068 * t1243;
t1261 = pkin(8) * t998 + t1016 * t1238 + t1243 * t981;
t1015 = -t1084 * t1238 + t1085 * t1243;
t1026 = -qJ(3) * t1084 - t1382;
t987 = -pkin(2) * t1411 + qJ(3) * t1085 - t1383;
t1260 = pkin(8) * t1015 + t1026 * t1238 + t1243 * t987;
t1124 = t1167 * t1238 + t1168 * t1243;
t1259 = pkin(8) * t1124 + t1065;
t824 = t1243 * t909 - t1397;
t896 = pkin(2) * t1104 + qJ(3) * t909;
t1256 = pkin(8) * t824 - qJ(3) * t1397 + t1243 * t896;
t1227 = t1232 * t1228;
t1215 = qJDD(1) * t1239 + t1244 * t1245;
t1209 = t1234 * t1331;
t1204 = t1356 * t1366;
t1203 = (t1229 - t1230) * t1366;
t1199 = -pkin(7) * t1215 + g(3) * t1244;
t1172 = t1356 * t1351;
t1165 = (t1354 + (qJD(2) + t1223) * t1389) * t1232;
t1164 = t1197 * t1243 - t1229 * t1351;
t1161 = -t1198 * t1238 - t1230 * t1351;
t1153 = t1201 * t1243 - t1370;
t1152 = -t1200 * t1238 + t1371;
t1148 = t1188 - t1187;
t1134 = (t1227 * t1243 * t1245 + t1166 * t1234) * t1238;
t1133 = (-t1227 * t1362 + t1417) * t1243;
t1125 = -t1166 * t1238 + t1169 * t1243;
t1103 = t1232 * t1169 + t1234 * t1280;
t1102 = -t1232 * t1168 + t1234 * t1279;
t1101 = -t1232 * t1167 + t1234 * t1281;
t1100 = t1232 * t1280 - t1417;
t1098 = -t1232 * t1165 + t1234 * t1282;
t1097 = t1234 * t1165 + t1232 * t1282;
t1090 = -t1232 * t1203 + t1234 * t1284;
t1089 = t1232 * t1204 + t1234 * t1283;
t1088 = -t1234 * t1204 + t1232 * t1283;
t1060 = (t1162 * t1237 - t1163 * t1242) * t1185;
t1058 = -t1103 * t1239 + t1154 * t1244;
t1057 = t1103 * t1244 + t1154 * t1239;
t1056 = -t1127 * t1238 + t1128 * t1243;
t1055 = -t1098 * t1239 + t1143 * t1244;
t1054 = t1098 * t1244 + t1143 * t1239;
t1053 = t1232 * t1175 + t1234 * t1285;
t1052 = -t1234 * t1175 + t1232 * t1285;
t1047 = -t1232 * qJDD(2) + (t1286 - t1355) * t1234;
t1037 = t1092 * t1237 + t1163 * t1374;
t1035 = t1091 * t1242 - t1162 * t1375;
t1033 = -t1111 * t1238 + t1112 * t1243;
t1032 = -t1109 * t1238 + t1110 * t1243;
t1031 = -t1089 * t1239 + t1124 * t1244;
t1030 = t1089 * t1244 + t1124 * t1239;
t1023 = t1130 * t1237 + t1384;
t1022 = t1131 * t1242 + t1424;
t1021 = -t1094 * t1238 + t1096 * t1243;
t1020 = -t1093 * t1238 + t1095 * t1243;
t1014 = -t1363 + (-t1100 * t1232 - t1103 * t1234) * pkin(8);
t1006 = -t1361 + (-t1097 * t1232 - t1098 * t1234) * pkin(8);
t1005 = t1234 * t1287 - t1339;
t1004 = t1234 * t1288 + t1339;
t1003 = -pkin(1) * t1100 + t1232 * t1135 + t1234 * t1328;
t997 = -pkin(1) * t1097 + t1232 * t1136 + t1234 * t1329;
t986 = -t1232 * t1276 + t1234 * t1289;
t985 = -t1232 * t1123 + t1234 * t1290;
t984 = pkin(8) * t1065 * t1234 - pkin(1) * t1052;
t983 = -t1053 * t1239 + t1065 * t1244;
t982 = t1053 * t1244 + t1065 * t1239;
t975 = -t1232 * t1411 + t1234 * t1291;
t974 = t1232 * t1291 + t1234 * t1411;
t973 = -pkin(1) * t1088 + t1234 * t1259;
t971 = (-t1052 * t1232 - t1053 * t1234) * pkin(8);
t969 = -t1048 * t1238 + t1050 * t1243;
t968 = -t1232 * t1419 + t1234 * t1292;
t967 = t1232 * t1292 + t1234 * t1419;
t966 = (-t1088 * t1232 - t1089 * t1234) * pkin(8) - t1285;
t962 = t1042 * t1237 + t1044 * t1242;
t952 = pkin(2) * t1084 - t990;
t947 = pkin(2) * t1067 - t989;
t946 = -t1028 * t1238 + t1029 * t1243;
t945 = -t1232 * t1148 + t1234 * t1294;
t934 = -t1232 * t1126 + t1234 * t1293;
t933 = t1234 * t1126 + t1232 * t1293;
t919 = t1007 * t1242 + t1008 * t1237;
t914 = -t1238 * t992 + t1243 * t994;
t913 = -t1238 * t991 + t1243 * t993;
t912 = t1015 * t1244 - t1239 * t975;
t911 = t1015 * t1239 + t1244 * t975;
t910 = -t1232 * t1060 + t1234 * t1295;
t903 = -t1239 * t968 + t1244 * t998;
t902 = t1239 * t998 + t1244 * t968;
t887 = t1237 * t961 + t1242 * t959;
t886 = t1237 * t960 + t1242 * t958;
t880 = -t1232 * t1037 + t1234 * t1297;
t879 = -t1232 * t1035 + t1234 * t1298;
t874 = -t1238 * t949 + t1243 * t951;
t873 = -t1238 * t948 + t1243 * t950;
t868 = -t1239 * t934 + t1244 * t970;
t867 = t1239 * t970 + t1244 * t934;
t854 = t1237 * t932 + t1242 * t931;
t853 = t1237 * t930 + t1242 * t928;
t847 = -t1238 * t923 + t1243 * t924;
t837 = -t1232 * t1023 + t1234 * t1299;
t836 = -t1232 * t1022 + t1234 * t1300;
t830 = -t1232 * t1009 + t1234 * t1301;
t829 = t1234 * t1009 + t1232 * t1301;
t827 = -t1238 * t915 + t1243 * t916;
t826 = -t1232 * t1001 + t1234 * t1302;
t825 = t1234 * t1001 + t1232 * t1302;
t823 = t1243 * t1026 - t1238 * t987 + (-t1232 * t974 - t1234 * t975) * pkin(8);
t818 = pkin(2) * t943 - pkin(3) * t1044 + pkin(9) * t1010 + t1398;
t815 = t1232 * t1104 + t1234 * t1306;
t814 = -t1234 * t1104 + t1232 * t1306;
t813 = pkin(2) * t935 + pkin(3) * t1042 + pkin(9) * t1002 - t1392;
t812 = t1243 * t1016 - t1238 * t981 + (-t1232 * t967 - t1234 * t968) * pkin(8);
t811 = -t1232 * t962 + t1234 * t1303;
t806 = -t1232 * t963 + t1234 * t1304;
t805 = t1232 * t1304 + t1234 * t963;
t800 = -pkin(1) * t974 - t1232 * t952 + t1234 * t1260;
t789 = t1237 * t878 + t1242 * t877;
t788 = -pkin(1) * t967 - t1232 * t947 + t1234 * t1261;
t785 = -t1232 * t919 + t1234 * t1305;
t774 = t1237 * t863 + t1242 * t861;
t765 = -t1239 * t830 + t1244 * t865;
t764 = t1239 * t865 + t1244 * t830;
t760 = t1237 * t842 + t1242 * t840;
t759 = t1237 * t841 + t1242 * t839;
t756 = -t1239 * t826 + t1244 * t860;
t755 = t1239 * t860 + t1244 * t826;
t752 = -t1238 * t832 + t1243 * t834;
t751 = -t1238 * t831 + t1243 * t833;
t745 = pkin(2) * t921 + pkin(3) * t1077 + pkin(9) * t965 + t810;
t744 = -t1238 * t820 + t1243 * t822;
t743 = -t1238 * t819 + t1243 * t821;
t742 = -t1239 * t806 + t1244 * t838;
t741 = t1239 * t838 + t1244 * t806;
t740 = -t1239 * t815 + t1244 * t824;
t739 = t1239 * t824 + t1244 * t815;
t738 = -t1238 * t866 + t1243 * t881 + (-t1232 * t933 - t1234 * t934) * pkin(8);
t735 = -pkin(1) * t933 - t1049 * t1407 + t1234 * t1262;
t724 = t1237 * t795 + t1242 * t793;
t723 = t1237 * t794 + t1242 * t792;
t722 = -t1232 * t854 + t1234 * t1307;
t721 = -t1232 * t853 + t1234 * t1308;
t720 = -t1232 * t887 + t1234 * t1309;
t719 = -t1232 * t886 + t1234 * t1310;
t713 = -t1232 * t875 + t1234 * t1311;
t712 = t1232 * t1311 + t1234 * t875;
t708 = pkin(2) * t780 - pkin(3) * t957 + pkin(9) * t810;
t705 = t1237 * t779 + t1242 * t778;
t703 = -t1232 * t848 + t1234 * t1312;
t702 = t1232 * t1312 + t1234 * t848;
t697 = -qJ(3) * t1391 - t1238 * t896 + (-t1232 * t814 - t1234 * t815) * pkin(8);
t690 = -t1238 * t766 + t1243 * t767;
t689 = -t1238 * t757 + t1243 * t758;
t685 = -pkin(1) * t814 + t1234 * t1256 - t1407 * t908;
t677 = -t1232 * t809 + t1234 * t1313;
t676 = t1232 * t1313 + t1234 * t809;
t672 = pkin(2) * t816 + pkin(3) * t1420 + pkin(9) * t876 + t1237 * t835 + t1242 * t799;
t669 = pkin(2) * t807 - pkin(3) * t937 + pkin(9) * t849 + t1237 * t828 + t1242 * t791;
t668 = -t1238 * t730 + t1243 * t732;
t667 = -t1238 * t729 + t1243 * t731;
t666 = -t1232 * t789 + t1234 * t1315;
t664 = -t1232 * t774 + t1234 * t1314;
t663 = -t1239 * t713 + t1244 * t737;
t662 = t1239 * t737 + t1244 * t713;
t661 = -t1232 * t775 + t1234 * t1316;
t660 = t1232 * t1316 + t1234 * t775;
t659 = -t1238 * t750 + t1243 * t768 + (-t1232 * t829 - t1234 * t830) * pkin(8);
t658 = -t1239 * t703 + t1244 * t733;
t657 = t1239 * t733 + t1244 * t703;
t656 = -t1238 * t746 + t1243 * t763 + (-t1232 * t825 - t1234 * t826) * pkin(8);
t655 = -pkin(1) * t829 - t1232 * t818 + t1234 * t1263;
t654 = -t1232 * t760 + t1234 * t1317;
t653 = -t1232 * t759 + t1234 * t1318;
t648 = -pkin(1) * t825 - t1232 * t813 + t1234 * t1264;
t646 = -t1238 * t692 + t1243 * t694;
t645 = -t1238 * t691 + t1243 * t693;
t644 = -t1239 * t677 + t1244 * t707;
t643 = t1239 * t707 + t1244 * t677;
t639 = -t1238 * t728 + t1243 * t736 + (-t1232 * t805 - t1234 * t806) * pkin(8);
t627 = -t1238 * t673 + t1243 * t674;
t626 = -t1239 * t661 + t1244 * t688;
t625 = t1239 * t688 + t1244 * t661;
t624 = -pkin(1) * t805 - t1232 * t745 + t1234 * t1265;
t620 = -t1232 * t724 + t1234 * t1319;
t619 = -t1232 * t723 + t1234 * t1320;
t616 = -t1232 * t714 + t1234 * t1321;
t615 = t1232 * t1321 + t1234 * t714;
t614 = -t1232 * t709 + t1234 * t1322;
t613 = t1232 * t1322 + t1234 * t709;
t611 = -t1232 * t705 + t1234 * t1323;
t610 = pkin(2) * t753 - pkin(3) * t995 + pkin(9) * t777 + t1237 * t680 + t1242 * t675;
t608 = -t1232 * t700 + t1234 * t1324;
t607 = t1232 * t1324 + t1234 * t700;
t601 = -t1238 * t665 + t1243 * t682 + (-t1232 * t676 - t1234 * t677) * pkin(8);
t598 = -t1239 * t616 + t1244 * t638;
t597 = t1239 * t638 + t1244 * t616;
t596 = -t1239 * t614 + t1244 * t636;
t595 = t1239 * t636 + t1244 * t614;
t594 = -pkin(1) * t676 - t1232 * t708 + t1234 * t1266;
t593 = -t1238 * t637 + t1243 * t647 + (-t1232 * t712 - t1234 * t713) * pkin(8);
t590 = -t1232 * t651 + t1234 * t1325;
t589 = t1232 * t1325 + t1234 * t651;
t588 = -t1239 * t608 + t1244 * t622;
t587 = t1239 * t622 + t1244 * t608;
t586 = pkin(2) * t640 - pkin(3) * t900 + pkin(9) * t652 - pkin(10) * t1399 + t1242 * t681;
t585 = -t1238 * t632 + t1243 * t642 + (-t1232 * t702 - t1234 * t703) * pkin(8);
t583 = -pkin(1) * t712 - t1232 * t672 + t1234 * t1267;
t580 = pkin(2) * t686 - pkin(3) * t857 + pkin(9) * t715 + t1237 * t631 + t1242 * t623;
t579 = pkin(2) * t683 - pkin(3) * t845 + pkin(9) * t710 + t1237 * t630 + t1242 * t621;
t578 = -pkin(1) * t702 - t1232 * t669 + t1234 * t1268;
t573 = pkin(2) * t670 - pkin(3) * t802 + pkin(9) * t701 + t1237 * t612 + t1242 * t609;
t568 = -t1239 * t590 + t1244 * t603;
t567 = t1239 * t603 + t1244 * t590;
t565 = -t1238 * t602 + t1243 * t604 + (-t1232 * t660 - t1234 * t661) * pkin(8);
t561 = -pkin(1) * t660 - t1232 * t610 + t1234 * t1269;
t560 = -t1232 * t599 + t1234 * t1326;
t559 = t1232 * t1326 + t1234 * t599;
t557 = -t1238 * t570 + t1243 * t574 + (-t1232 * t615 - t1234 * t616) * pkin(8);
t556 = -t1238 * t569 + t1243 * t572 + (-t1232 * t613 - t1234 * t614) * pkin(8);
t555 = pkin(2) * t581 - pkin(3) * t649 + pkin(9) * t600 + t1237 * t584 + t1242 * t576;
t554 = -pkin(1) * t615 - t1232 * t580 + t1234 * t1270;
t553 = -pkin(1) * t613 - t1232 * t579 + t1234 * t1271;
t552 = -t1238 * t566 + t1243 * t575 + (-t1232 * t589 - t1234 * t590) * pkin(8);
t551 = -t1239 * t560 + t1244 * t562;
t550 = t1239 * t562 + t1244 * t560;
t549 = -t1238 * t563 + t1243 * t564 + (-t1232 * t607 - t1234 * t608) * pkin(8);
t548 = -pkin(1) * t589 - t1232 * t586 + t1234 * t1272;
t545 = -pkin(1) * t607 - t1232 * t573 + t1234 * t1273;
t544 = -t1238 * t546 + t1243 * t547 + (-t1232 * t559 - t1234 * t560) * pkin(8);
t543 = -pkin(1) * t559 - t1232 * t555 + t1234 * t1274;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1215, -t1216, 0, t1179, 0, 0, 0, 0, 0, 0, t1058, t1055, t1031, t983, 0, 0, 0, 0, 0, 0, t903, t912, t868, t740, 0, 0, 0, 0, 0, 0, t756, t765, t742, t644, 0, 0, 0, 0, 0, 0, t658, t663, t626, t568, 0, 0, 0, 0, 0, 0, t596, t598, t588, t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1216, -t1215, 0, t1178, 0, 0, 0, 0, 0, 0, t1057, t1054, t1030, t982, 0, 0, 0, 0, 0, 0, t902, t911, t867, t739, 0, 0, 0, 0, 0, 0, t755, t764, t741, t643, 0, 0, 0, 0, 0, 0, t657, t662, t625, t567, 0, 0, 0, 0, 0, 0, t595, t597, t587, t550; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1100, t1097, t1088, t1052, 0, 0, 0, 0, 0, 0, t967, t974, t933, t814, 0, 0, 0, 0, 0, 0, t825, t829, t805, t676, 0, 0, 0, 0, 0, 0, t702, t712, t660, t589, 0, 0, 0, 0, 0, 0, t613, t615, t607, t559; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1216, 0, -t1215, 0, t1330, -t1199, -t1178, -pkin(7) * t1178, -t1134 * t1239 + t1164 * t1244, -t1090 * t1239 + t1125 * t1244, -t1101 * t1239 + t1152 * t1244, -t1133 * t1239 + t1161 * t1244, -t1102 * t1239 + t1153 * t1244, t1244 * t1172 + t1239 * t1278, -pkin(7) * t1057 - t1003 * t1239 + t1014 * t1244, -pkin(7) * t1054 + t1006 * t1244 - t1239 * t997, -pkin(7) * t1030 - t1239 * t973 + t1244 * t966, -pkin(7) * t982 - t1239 * t984 + t1244 * t971, -t1005 * t1239 + t1033 * t1244, -t1239 * t945 + t1244 * t969, t1020 * t1244 - t1239 * t985, -t1004 * t1239 + t1032 * t1244, t1021 * t1244 - t1239 * t986, -t1047 * t1239 + t1056 * t1244, -pkin(7) * t902 - t1239 * t788 + t1244 * t812, -pkin(7) * t911 - t1239 * t800 + t1244 * t823, -pkin(7) * t867 - t1239 * t735 + t1244 * t738, -pkin(7) * t739 - t1239 * t685 + t1244 * t697, -t1239 * t880 + t1244 * t914, -t1239 * t811 + t1244 * t847, -t1239 * t836 + t1244 * t873, -t1239 * t879 + t1244 * t913, -t1239 * t837 + t1244 * t874, -t1239 * t910 + t1244 * t946, -pkin(7) * t755 - t1239 * t648 + t1244 * t656, -pkin(7) * t764 - t1239 * t655 + t1244 * t659, -pkin(7) * t741 - t1239 * t624 + t1244 * t639, -pkin(7) * t643 - t1239 * t594 + t1244 * t601, -t1239 * t722 + t1244 * t752, -t1239 * t664 + t1244 * t690, -t1239 * t719 + t1244 * t743, -t1239 * t721 + t1244 * t751, -t1239 * t720 + t1244 * t744, -t1239 * t785 + t1244 * t827, -pkin(7) * t657 - t1239 * t578 + t1244 * t585, -pkin(7) * t662 - t1239 * t583 + t1244 * t593, -pkin(7) * t625 - t1239 * t561 + t1244 * t565, -pkin(7) * t567 - t1239 * t548 + t1244 * t552, -t1239 * t654 + t1244 * t668, -t1239 * t611 + t1244 * t627, -t1239 * t619 + t1244 * t645, -t1239 * t653 + t1244 * t667, -t1239 * t620 + t1244 * t646, -t1239 * t666 + t1244 * t689, -pkin(7) * t595 - t1239 * t553 + t1244 * t556, -pkin(7) * t597 - t1239 * t554 + t1244 * t557, -pkin(7) * t587 - t1239 * t545 + t1244 * t549, -pkin(7) * t550 - t1239 * t543 + t1244 * t544; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1215, 0, t1216, 0, t1199, t1330, t1179, pkin(7) * t1179, t1134 * t1244 + t1164 * t1239, t1090 * t1244 + t1125 * t1239, t1101 * t1244 + t1152 * t1239, t1133 * t1244 + t1161 * t1239, t1102 * t1244 + t1153 * t1239, t1239 * t1172 - t1244 * t1278, pkin(7) * t1058 + t1003 * t1244 + t1014 * t1239, pkin(7) * t1055 + t1006 * t1239 + t1244 * t997, pkin(7) * t1031 + t1239 * t966 + t1244 * t973, pkin(7) * t983 + t1239 * t971 + t1244 * t984, t1005 * t1244 + t1033 * t1239, t1239 * t969 + t1244 * t945, t1020 * t1239 + t1244 * t985, t1004 * t1244 + t1032 * t1239, t1021 * t1239 + t1244 * t986, t1047 * t1244 + t1056 * t1239, pkin(7) * t903 + t1239 * t812 + t1244 * t788, pkin(7) * t912 + t1239 * t823 + t1244 * t800, pkin(7) * t868 + t1239 * t738 + t1244 * t735, pkin(7) * t740 + t1239 * t697 + t1244 * t685, t1239 * t914 + t1244 * t880, t1239 * t847 + t1244 * t811, t1239 * t873 + t1244 * t836, t1239 * t913 + t1244 * t879, t1239 * t874 + t1244 * t837, t1239 * t946 + t1244 * t910, pkin(7) * t756 + t1239 * t656 + t1244 * t648, pkin(7) * t765 + t1239 * t659 + t1244 * t655, pkin(7) * t742 + t1239 * t639 + t1244 * t624, pkin(7) * t644 + t1239 * t601 + t1244 * t594, t1239 * t752 + t1244 * t722, t1239 * t690 + t1244 * t664, t1239 * t743 + t1244 * t719, t1239 * t751 + t1244 * t721, t1239 * t744 + t1244 * t720, t1239 * t827 + t1244 * t785, pkin(7) * t658 + t1239 * t585 + t1244 * t578, pkin(7) * t663 + t1239 * t593 + t1244 * t583, pkin(7) * t626 + t1239 * t565 + t1244 * t561, pkin(7) * t568 + t1239 * t552 + t1244 * t548, t1239 * t668 + t1244 * t654, t1239 * t627 + t1244 * t611, t1239 * t645 + t1244 * t619, t1239 * t667 + t1244 * t653, t1239 * t646 + t1244 * t620, t1239 * t689 + t1244 * t666, pkin(7) * t596 + t1239 * t556 + t1244 * t553, pkin(7) * t598 + t1239 * t557 + t1244 * t554, pkin(7) * t588 + t1239 * t549 + t1244 * t545, pkin(7) * t551 + t1239 * t544 + t1244 * t543; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1218, t1219, 0, 0, (t1197 * t1232 + t1243 * t1418) * t1238, t1234 * t1203 + t1232 * t1284, t1234 * t1167 + t1232 * t1281, (t1198 * t1232 - t1238 * t1418) * t1243, t1234 * t1168 + t1232 * t1279, t1209, pkin(1) * t1103 - t1234 * t1135 + t1232 * t1328, pkin(1) * t1098 - t1234 * t1136 + t1232 * t1329, pkin(1) * t1089 + t1232 * t1259, pkin(1) * t1053 + t1065 * t1403, t1232 * t1287 + t1338, t1234 * t1148 + t1232 * t1294, t1234 * t1123 + t1232 * t1290, t1232 * t1288 - t1338, t1232 * t1289 + t1234 * t1276, t1232 * t1286 + t1209, pkin(1) * t968 + t1232 * t1261 + t1234 * t947, pkin(1) * t975 + t1232 * t1260 + t1234 * t952, pkin(1) * t934 + t1049 * t1406 + t1232 * t1262, pkin(1) * t815 + t1232 * t1256 + t1406 * t908, t1234 * t1037 + t1232 * t1297, t1232 * t1303 + t1234 * t962, t1234 * t1022 + t1232 * t1300, t1234 * t1035 + t1232 * t1298, t1234 * t1023 + t1232 * t1299, t1234 * t1060 + t1232 * t1295, pkin(1) * t826 + t1232 * t1264 + t1234 * t813, pkin(1) * t830 + t1232 * t1263 + t1234 * t818, pkin(1) * t806 + t1232 * t1265 + t1234 * t745, pkin(1) * t677 + t1232 * t1266 + t1234 * t708, t1232 * t1307 + t1234 * t854, t1232 * t1314 + t1234 * t774, t1232 * t1310 + t1234 * t886, t1232 * t1308 + t1234 * t853, t1232 * t1309 + t1234 * t887, t1232 * t1305 + t1234 * t919, pkin(1) * t703 + t1232 * t1268 + t1234 * t669, pkin(1) * t713 + t1232 * t1267 + t1234 * t672, pkin(1) * t661 + t1232 * t1269 + t1234 * t610, pkin(1) * t590 + t1232 * t1272 + t1234 * t586, t1232 * t1317 + t1234 * t760, t1232 * t1323 + t1234 * t705, t1232 * t1320 + t1234 * t723, t1232 * t1318 + t1234 * t759, t1232 * t1319 + t1234 * t724, t1232 * t1315 + t1234 * t789, pkin(1) * t614 + t1232 * t1271 + t1234 * t579, pkin(1) * t616 + t1232 * t1270 + t1234 * t580, pkin(1) * t608 + t1232 * t1273 + t1234 * t573, pkin(1) * t560 + t1232 * t1274 + t1234 * t555;];
tauB_reg  = t1;
