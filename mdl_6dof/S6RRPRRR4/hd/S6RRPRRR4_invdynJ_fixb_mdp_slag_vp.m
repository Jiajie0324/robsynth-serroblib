% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR4_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR4_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRPRRR4_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:35:18
% EndTime: 2019-03-09 13:35:42
% DurationCPUTime: 18.22s
% Computational Cost: add. (15400->701), mult. (42792->955), div. (0->0), fcn. (36235->16), ass. (0->328)
t767 = sin(pkin(12));
t768 = sin(pkin(6));
t774 = sin(qJ(2));
t892 = qJD(1) * t774;
t864 = t768 * t892;
t769 = cos(pkin(12));
t779 = cos(qJ(2));
t908 = t779 * t769;
t868 = t768 * t908;
t709 = qJD(1) * t868 - t767 * t864;
t705 = qJD(4) - t709;
t704 = qJD(5) + t705;
t776 = cos(qJ(6));
t884 = qJD(6) * t776;
t806 = t767 * t779 + t769 * t774;
t796 = qJD(1) * t806;
t712 = t768 * t796;
t770 = cos(pkin(6));
t893 = qJD(1) * t770;
t749 = qJD(2) + t893;
t773 = sin(qJ(4));
t778 = cos(qJ(4));
t675 = -t773 * t712 + t749 * t778;
t772 = sin(qJ(5));
t777 = cos(qJ(5));
t810 = -t712 * t778 - t749 * t773;
t594 = -t777 * t675 - t772 * t810;
t981 = t594 * t776;
t988 = t884 + t981;
t913 = t770 * t774;
t751 = pkin(1) * t913;
t916 = t768 * t779;
t945 = pkin(8) + qJ(3);
t697 = (t916 * t945 + t751) * qJD(1);
t686 = t767 * t697;
t951 = pkin(1) * t770;
t752 = t779 * t951;
t746 = qJD(1) * t752;
t861 = t945 * t774;
t835 = t768 * t861;
t696 = -qJD(1) * t835 + t746;
t624 = t696 * t769 - t686;
t646 = pkin(2) * t864 + pkin(3) * t712 - pkin(9) * t709;
t630 = t778 * t646;
t755 = pkin(2) * t767 + pkin(9);
t944 = pkin(10) + t755;
t856 = qJD(4) * t944;
t986 = pkin(4) * t712 - t624 * t773 + t630 + (-pkin(10) * t709 + t856) * t778;
t900 = t778 * t624 + t773 * t646;
t925 = t709 * t773;
t985 = -pkin(10) * t925 + t773 * t856 + t900;
t889 = qJD(4) * t773;
t984 = t889 - t925;
t811 = t675 * t772 - t777 * t810;
t891 = qJD(2) * t774;
t863 = t768 * t891;
t834 = qJD(1) * t863;
t881 = qJD(1) * qJD(2);
t860 = t779 * t881;
t661 = -t767 * t834 + (qJDD(1) * t806 + t769 * t860) * t768;
t880 = qJDD(1) * t770;
t748 = qJDD(2) + t880;
t888 = qJD(4) * t778;
t583 = t778 * t661 - t712 * t889 + t773 * t748 + t749 * t888;
t584 = -qJD(4) * t810 + t661 * t773 - t778 * t748;
t886 = qJD(5) * t777;
t887 = qJD(5) * t772;
t536 = t777 * t583 - t772 * t584 + t675 * t886 + t810 * t887;
t878 = qJDD(1) * t779;
t858 = t768 * t878;
t733 = t769 * t858;
t795 = t806 * qJD(2);
t879 = qJDD(1) * t774;
t859 = t767 * t879;
t659 = qJDD(4) - t733 + (qJD(1) * t795 + t859) * t768;
t657 = qJDD(5) + t659;
t771 = sin(qJ(6));
t866 = t776 * t536 + t771 * t657 + t704 * t884;
t885 = qJD(6) * t771;
t512 = -t811 * t885 + t866;
t510 = t512 * t771;
t577 = t704 * t771 + t776 * t811;
t853 = t536 * t771 - t776 * t657;
t513 = qJD(6) * t577 + t853;
t537 = qJD(5) * t811 + t583 * t772 + t777 * t584;
t535 = qJDD(6) + t537;
t532 = t771 * t535;
t533 = t776 * t535;
t934 = t811 * t771;
t575 = -t776 * t704 + t934;
t882 = -qJD(6) - t594;
t980 = t882 * t771;
t983 = t657 * MDP(24) - t537 * MDP(23) - t594 ^ 2 * MDP(21) + (t594 * t704 + t536) * MDP(22) + (MDP(20) * t594 + MDP(21) * t811 + MDP(23) * t704 + MDP(31) * t882) * t811 + (t577 * t988 + t510) * MDP(27) + (-t577 * t811 - t882 * t988 + t532) * MDP(29) + (t575 * t811 - t882 * t980 + t533) * MDP(30) + (t512 * t776 - t771 * t513 - t575 * t988 + t577 * t980) * MDP(28);
t679 = pkin(2) * t749 + t696;
t914 = t769 * t697;
t608 = t767 * t679 + t914;
t603 = pkin(9) * t749 + t608;
t760 = pkin(2) * t779 + pkin(1);
t830 = t760 * t768;
t720 = -qJD(1) * t830 + qJD(3);
t619 = -pkin(3) * t709 - pkin(9) * t712 + t720;
t565 = -t603 * t773 + t778 * t619;
t548 = pkin(10) * t810 + t565;
t542 = pkin(4) * t705 + t548;
t566 = t603 * t778 + t619 * t773;
t549 = pkin(10) * t675 + t566;
t940 = t549 * t772;
t518 = t542 * t777 - t940;
t516 = -pkin(5) * t704 - t518;
t982 = t516 * t594;
t729 = t772 * t773 - t777 * t778;
t979 = t704 * t729;
t730 = t772 * t778 + t773 * t777;
t898 = t704 * t730;
t823 = t760 * qJDD(1);
t877 = pkin(2) * t834 + qJDD(3);
t978 = t768 * t823 - t877;
t977 = t513 * t729 + t575 * t898;
t766 = qJ(4) + qJ(5);
t761 = sin(t766);
t762 = cos(t766);
t716 = t806 * t770;
t727 = t767 * t774 - t908;
t775 = sin(qJ(1));
t780 = cos(qJ(1));
t808 = -t716 * t775 - t727 * t780;
t917 = t768 * t775;
t644 = -t761 * t808 + t762 * t917;
t715 = t806 * t768;
t809 = t716 * t780 - t727 * t775;
t915 = t768 * t780;
t804 = t761 * t809 + t762 * t915;
t976 = g(3) * (-t715 * t761 + t762 * t770) - g(2) * t804 + g(1) * t644;
t555 = pkin(5) * t811 + pkin(11) * t594;
t909 = t775 * t779;
t910 = t774 * t780;
t723 = -t770 * t909 - t910;
t907 = t779 * t780;
t911 = t774 * t775;
t802 = t770 * t907 - t911;
t975 = -g(1) * t723 - g(2) * t802;
t607 = t679 * t769 - t686;
t602 = -pkin(3) * t749 - t607;
t574 = -pkin(4) * t675 + t602;
t642 = -t761 * t915 + t762 * t809;
t645 = t761 * t917 + t762 * t808;
t683 = t715 * t762 + t761 * t770;
t873 = pkin(1) * t878;
t745 = t770 * t873;
t875 = qJD(2) * t951;
t837 = qJD(1) * t875;
t857 = qJD(2) * t945;
t890 = qJD(3) * t774;
t606 = -t774 * t837 + pkin(2) * t748 + t745 + (-qJDD(1) * t861 + (-t779 * t857 - t890) * qJD(1)) * t768;
t789 = qJD(3) * t779 - t774 * t857;
t865 = pkin(8) * t858 + qJDD(1) * t751 + t779 * t837;
t614 = (qJ(3) * t878 + qJD(1) * t789) * t768 + t865;
t564 = t767 * t606 + t769 * t614;
t558 = pkin(9) * t748 + t564;
t660 = t733 + (-qJD(2) * t796 - t859) * t768;
t571 = -pkin(3) * t660 - pkin(9) * t661 - t978;
t852 = -t773 * t558 + t778 * t571;
t785 = -qJD(4) * t566 + t852;
t504 = pkin(4) * t659 - pkin(10) * t583 + t785;
t799 = -t778 * t558 - t773 * t571 + t603 * t889 - t619 * t888;
t506 = -pkin(10) * t584 - t799;
t836 = -t772 * t504 - t777 * t506 - t542 * t886 + t549 * t887;
t974 = g(1) * t645 + g(2) * t642 + g(3) * t683 + t574 * t594 + t836;
t800 = t727 * t770;
t664 = -t775 * t806 - t780 * t800;
t973 = t642 * t771 + t664 * t776;
t972 = t642 * t776 - t664 * t771;
t692 = t715 * t778 + t770 * t773;
t918 = t768 * t774;
t714 = t767 * t918 - t868;
t695 = pkin(2) * t770 + t752 - t835;
t897 = pkin(8) * t916 + t751;
t706 = qJ(3) * t916 + t897;
t636 = t767 * t695 + t769 * t706;
t622 = pkin(9) * t770 + t636;
t649 = pkin(3) * t714 - pkin(9) * t715 - t830;
t847 = -t622 * t773 + t778 * t649;
t553 = pkin(4) * t714 - pkin(10) * t692 + t847;
t691 = t715 * t773 - t770 * t778;
t901 = t778 * t622 + t773 * t649;
t561 = -pkin(10) * t691 + t901;
t966 = t772 * t553 + t777 * t561;
t623 = t696 * t767 + t914;
t833 = pkin(4) * t984 - t623;
t725 = t944 * t773;
t726 = t944 * t778;
t807 = -t725 * t777 - t726 * t772;
t965 = -qJD(5) * t807 + t772 * t986 + t985 * t777;
t678 = -t725 * t772 + t726 * t777;
t964 = -qJD(5) * t678 + t985 * t772 - t777 * t986;
t616 = -t691 * t772 + t692 * t777;
t708 = t714 * t776;
t963 = -t616 * t771 + t708;
t939 = t549 * t777;
t519 = t542 * t772 + t939;
t517 = pkin(11) * t704 + t519;
t538 = pkin(5) * t594 - pkin(11) * t811 + t574;
t819 = t517 * t771 - t538 * t776;
t961 = t516 * t885 + t811 * t819;
t854 = -t777 * t504 + t506 * t772;
t955 = -qJD(5) * t519 - t854;
t495 = -pkin(5) * t657 - t955;
t493 = t495 * t771;
t501 = t517 * t776 + t538 * t771;
t960 = t501 * t811 + t516 * t884 + t771 * t976 + t493;
t958 = -t574 * t811 + t955 - t976;
t956 = -t657 * t730 + t704 * t979;
t763 = t768 ^ 2;
t953 = 0.2e1 * t763;
t952 = pkin(1) * t763;
t946 = g(3) * t779;
t943 = MDP(6) * t768;
t942 = MDP(7) * t768;
t938 = t594 * t712;
t935 = t811 * t712;
t929 = t675 * t705;
t928 = t675 * t712;
t927 = t810 * t705;
t926 = t810 * t712;
t924 = t714 * t771;
t923 = t730 * t776;
t922 = t748 * MDP(8);
t921 = t762 * t771;
t920 = t762 * t776;
t781 = qJD(1) ^ 2;
t919 = t763 * t781;
t912 = t773 * t659;
t902 = pkin(5) * t712 - t964;
t764 = t774 ^ 2;
t896 = -t779 ^ 2 + t764;
t883 = qJD(2) - t749;
t876 = t774 * t952;
t872 = pkin(8) * t879;
t871 = t730 * t532;
t870 = t730 * t533;
t869 = t779 * t919;
t756 = -pkin(2) * t769 - pkin(3);
t862 = t945 * t768;
t494 = pkin(11) * t657 - t836;
t563 = t606 * t769 - t767 * t614;
t557 = -pkin(3) * t748 - t563;
t539 = pkin(4) * t584 + t557;
t499 = pkin(5) * t537 - pkin(11) * t536 + t539;
t855 = -t771 * t494 + t776 * t499;
t850 = -t776 * t712 + t771 * t979;
t849 = t712 * t771 + t776 * t979;
t747 = t779 * t875;
t680 = t768 * t789 + t747;
t681 = -t768 * t890 + (-t779 * t862 - t751) * qJD(2);
t605 = t680 * t769 + t681 * t767;
t710 = t768 * t795;
t711 = t727 * t768 * qJD(2);
t647 = pkin(2) * t863 + pkin(3) * t710 + pkin(9) * t711;
t848 = -t605 * t773 + t778 * t647;
t845 = -t773 * t915 + t778 * t809;
t604 = t680 * t767 - t769 * t681;
t635 = t695 * t769 - t767 * t706;
t844 = t705 * t778;
t841 = t749 + t893;
t758 = pkin(4) * t772 + pkin(11);
t840 = -pkin(4) * t810 + qJD(6) * t758 + t555;
t839 = qJD(1) * t883;
t838 = t748 + t880;
t520 = t548 * t772 + t939;
t832 = pkin(4) * t887 - t520;
t521 = t548 * t777 - t940;
t831 = -pkin(4) * t886 + t521;
t829 = g(1) * t780 + g(2) * t775;
t828 = g(1) * t775 - g(2) * t780;
t827 = t512 * t729 + t577 * t898;
t826 = -t729 * t657 - t704 * t898;
t738 = -pkin(4) * t778 + t756;
t672 = pkin(5) * t729 - pkin(11) * t730 + t738;
t825 = pkin(11) * t712 - qJD(6) * t672 + t965;
t824 = -pkin(5) * t898 - pkin(11) * t979 + qJD(6) * t678 - t833;
t821 = t776 * t494 + t771 * t499;
t820 = -t758 * t535 + t982;
t523 = pkin(11) * t714 + t966;
t621 = -pkin(3) * t770 - t635;
t585 = pkin(4) * t691 + t621;
t615 = t777 * t691 + t692 * t772;
t540 = pkin(5) * t615 - pkin(11) * t616 + t585;
t818 = t523 * t776 + t540 * t771;
t817 = -t523 * t771 + t540 * t776;
t634 = -qJD(4) * t691 - t711 * t778;
t527 = pkin(4) * t710 - pkin(10) * t634 - qJD(4) * t901 + t848;
t633 = qJD(4) * t692 - t711 * t773;
t798 = t778 * t605 - t622 * t889 + t773 * t647 + t649 * t888;
t529 = -pkin(10) * t633 + t798;
t816 = t527 * t777 - t529 * t772;
t815 = t553 * t777 - t561 * t772;
t587 = t616 * t776 + t924;
t805 = t778 * t659 - t705 * t984;
t568 = pkin(4) * t633 + t604;
t803 = t773 * t809 + t778 * t915;
t797 = t772 * t527 + t777 * t529 + t553 * t886 - t561 * t887;
t794 = t602 * t705 - t755 * t659;
t667 = t775 * t800 - t780 * t806;
t792 = g(1) * t667 + g(2) * t664 - g(3) * t714;
t791 = t730 * t884 - t850;
t790 = t730 * t885 + t849;
t788 = -t495 - t976;
t787 = t897 * t749;
t783 = qJD(4) * t705 * t755 + t557 + t792;
t759 = -pkin(4) * t777 - pkin(5);
t724 = -t770 * t911 + t907;
t722 = -t770 * t910 - t909;
t717 = pkin(2) * t913 - t862;
t653 = t773 * t917 + t778 * t808;
t652 = -t773 * t808 + t778 * t917;
t579 = t645 * t776 - t667 * t771;
t578 = -t645 * t771 - t667 * t776;
t547 = qJD(5) * t616 + t777 * t633 + t634 * t772;
t546 = -qJD(5) * t615 - t633 * t772 + t634 * t777;
t531 = qJD(6) * t587 + t546 * t771 - t710 * t776;
t530 = qJD(6) * t963 + t546 * t776 + t710 * t771;
t522 = -pkin(5) * t714 - t815;
t507 = pkin(5) * t547 - pkin(11) * t546 + t568;
t497 = -pkin(5) * t710 + qJD(5) * t966 - t816;
t496 = pkin(11) * t710 + t797;
t492 = -t501 * qJD(6) + t855;
t491 = -t819 * qJD(6) + t821;
t1 = [(t536 * t616 + t546 * t811) * MDP(20) + (-t536 * t615 - t537 * t616 - t546 * t594 - t547 * t811) * MDP(21) + (t536 * t714 + t546 * t704 + t616 * t657 + t710 * t811) * MDP(22) + ((qJD(6) * t817 + t496 * t776 + t507 * t771) * t882 - t818 * t535 - t491 * t615 - t501 * t547 + t497 * t577 + t522 * t512 + t495 * t587 + t516 * t530 - g(1) * t973 - g(2) * t578) * MDP(33) + (qJDD(1) * t764 + 0.2e1 * t774 * t860) * t763 * MDP(4) + (-(-qJD(6) * t818 - t496 * t771 + t507 * t776) * t882 + t817 * t535 + t492 * t615 - t819 * t547 + t497 * t575 + t522 * t513 - t495 * t963 + t516 * t531 + g(1) * t972 - g(2) * t579) * MDP(32) + (-t513 * t615 + t531 * t882 + t535 * t963 - t547 * t575) * MDP(30) + (t512 * t963 - t513 * t587 - t530 * t575 - t531 * t577) * MDP(28) + (t848 * t705 + t847 * t659 + t852 * t714 + t565 * t710 - t604 * t675 + t621 * t584 + t557 * t691 + t602 * t633 + g(1) * t845 - g(2) * t653 + (-t566 * t714 - t705 * t901) * qJD(4)) * MDP(18) + (-t563 * t715 - t564 * t714 + t604 * t712 + t605 * t709 + t607 * t711 - t608 * t710 - t635 * t661 + t636 * t660 - t768 * t829) * MDP(11) + (t873 * t953 + (-pkin(8) * t918 + t752) * t748 + (-t768 * t872 + t745) * t770 - g(1) * t722 - g(2) * t724 + (-t787 + (-t770 * t897 - 0.2e1 * t876) * qJD(1)) * qJD(2)) * MDP(9) + t828 * MDP(2) + t829 * MDP(3) + (t774 * t878 - t881 * t896) * MDP(5) * t953 + (t535 * t615 - t547 * t882) * MDP(31) + (t512 * t615 - t530 * t882 + t535 * t587 + t547 * t577) * MDP(29) + (-g(1) * t803 - g(2) * t652 + t557 * t692 - t566 * t710 + t621 * t583 + t602 * t634 - t604 * t810 - t659 * t901 - t705 * t798 + t714 * t799) * MDP(19) + (t583 * t692 - t634 * t810) * MDP(13) + (-t583 * t691 - t584 * t692 + t633 * t810 + t634 * t675) * MDP(14) + (t583 * t714 + t634 * t705 + t659 * t692 - t710 * t810) * MDP(15) + (-(-pkin(8) * t863 + t747) * t749 - t897 * t748 - (-pkin(8) * t834 + t865) * t770 + g(1) * t802 - g(2) * t723 + 0.2e1 * (-t860 - t879) * t952) * MDP(10) + (t816 * t704 + t815 * t657 - t854 * t714 + t518 * t710 + t568 * t594 + t585 * t537 + t539 * t615 + t574 * t547 + g(1) * t642 - g(2) * t645 + (-t519 * t714 - t704 * t966) * qJD(5)) * MDP(25) + (-g(1) * t804 - g(2) * t644 - t519 * t710 + t585 * t536 + t539 * t616 + t574 * t546 + t568 * t811 - t657 * t966 - t704 * t797 + t714 * t836) * MDP(26) + qJDD(1) * MDP(1) + (t512 * t587 + t530 * t577) * MDP(27) + (t564 * t636 + t608 * t605 + t563 * t635 - t607 * t604 - g(1) * (-t717 * t780 - t760 * t775) - g(2) * (-t717 * t775 + t760 * t780) + (pkin(2) * t720 * t891 + t760 * t978) * t768) * MDP(12) + t770 * t922 + (t779 * t838 - t841 * t891) * t942 + (qJD(2) * t779 * t841 + t774 * t838) * t943 + (t657 * t714 + t704 * t710) * MDP(24) + (-t537 * t714 - t547 * t704 - t594 * t710 - t615 * t657) * MDP(23) + (t659 * t714 + t705 * t710) * MDP(17) + (-t584 * t714 - t633 * t705 - t659 * t691 + t675 * t710) * MDP(16); (t781 * t876 + t745 + (-t872 - t946) * t768 + (-qJD(2) * t897 + t787) * qJD(1) + t975) * MDP(9) + (t607 * t623 - t608 * t624 + (t564 * t767 + t563 * t769 + (-t720 * t892 - t946) * t768 + t975) * pkin(2)) * MDP(12) + ((t583 + t929) * t778 + (-t584 + t927) * t773) * MDP(14) + (t512 * t923 - t577 * t790) * MDP(27) + t896 * MDP(5) * t919 + (t805 - t928) * MDP(16) + (-t935 - t956) * MDP(22) + (t826 + t938) * MDP(23) + (t536 * t730 - t811 * t979) * MDP(20) + (t738 * t536 + t539 * t730 - t574 * t979 - t678 * t657 + t704 * t965 + t792 * t761 + t833 * t811) * MDP(26) + (t850 * t577 + t849 * t575 + (-t510 - t513 * t776 + (t575 * t771 - t577 * t776) * qJD(6)) * t730) * MDP(28) + (t705 * t844 + t912 + t926) * MDP(15) - t774 * MDP(4) * t869 + (t790 * t882 + t827 + t870) * MDP(29) + (t583 * t773 - t810 * t844) * MDP(13) + (t756 * t583 + t623 * t810 + t705 * t900 + t773 * t783 + t778 * t794) * MDP(19) - (t565 * MDP(18) - t519 * MDP(26) + t518 * MDP(25) - t566 * MDP(19) + t705 * MDP(17) + t704 * MDP(24) + (-t608 + t623) * MDP(11)) * t712 + (t756 * t584 + t623 * t675 - t630 * t705 + (t624 * t705 + t794) * t773 - t783 * t778) * MDP(18) + ((t607 - t624) * t709 + (t660 * t767 - t661 * t769) * pkin(2)) * MDP(11) + (pkin(1) * t869 + g(1) * t724 - g(2) * t722 + t746 * t749 + (pkin(8) * t839 + g(3)) * t918 - t865) * MDP(10) + t922 + (t791 * t882 - t871 - t977) * MDP(30) + (t535 * t729 - t882 * t898) * MDP(31) + (-(t672 * t771 + t678 * t776) * t535 - t491 * t729 - t807 * t512 + t495 * t923 - g(1) * (-t667 * t921 + t776 * t808) - g(2) * (-t664 * t921 + t776 * t809) - g(3) * (t714 * t921 + t715 * t776) - (t771 * t824 + t776 * t825) * t882 + t902 * t577 - t898 * t501 - t790 * t516) * MDP(33) + ((t672 * t776 - t678 * t771) * t535 + t492 * t729 - t807 * t513 + t730 * t493 - g(1) * (t667 * t920 + t771 * t808) - g(2) * (t664 * t920 + t771 * t809) - g(3) * (-t714 * t920 + t715 * t771) - (t771 * t825 - t776 * t824) * t882 + t902 * t575 - t898 * t819 + t791 * t516) * MDP(32) + (t738 * t537 + t539 * t729 + t898 * t574 + t833 * t594 + t657 * t807 + t704 * t964 - t792 * t762) * MDP(25) + (-t536 * t729 - t537 * t730 + t594 * t979 - t811 * t898) * MDP(21) + (-t883 * t892 + t878) * t942 + (t779 * t839 + t879) * t943; (-t709 ^ 2 - t712 ^ 2) * MDP(11) + (t805 + t928) * MDP(18) + (-t705 ^ 2 * t778 - t912 + t926) * MDP(19) + (t826 - t938) * MDP(25) + (-t935 + t956) * MDP(26) + (-t871 + t977) * MDP(32) + (t827 - t870) * MDP(33) - (-MDP(32) * t791 + MDP(33) * t790) * t882 + (-g(3) * t770 + t607 * t712 - t608 * t709 + t877 + (-t823 - t828) * t768) * MDP(12); (t759 * t513 + t832 * t575 + (-t831 * t882 + t820) * t771 + (t840 * t882 + t788) * t776 + t961) * MDP(32) + (t759 * t512 + t820 * t776 + t832 * t577 - (t771 * t840 + t776 * t831) * t882 + t960) * MDP(33) + (-g(1) * t652 + g(2) * t803 + g(3) * t691 + t566 * t705 + t602 * t810 + t785) * MDP(18) + (t520 * t704 + (t594 * t810 + t657 * t777 - t704 * t887) * pkin(4) + t958) * MDP(25) + (t521 * t704 + (-t657 * t772 - t704 * t886 + t810 * t811) * pkin(4) + t974) * MDP(26) + (-t584 - t927) * MDP(16) + (g(1) * t653 + g(2) * t845 + g(3) * t692 + t565 * t705 - t602 * t675 + t799) * MDP(19) + (t583 - t929) * MDP(15) + t810 * t675 * MDP(13) + t659 * MDP(17) + (-t675 ^ 2 + t810 ^ 2) * MDP(14) + t983; (t519 * t704 + t958) * MDP(25) + (t518 * t704 + t974) * MDP(26) + (-pkin(5) * t513 - t519 * t575 + (-pkin(11) * t535 - t518 * t882 + t982) * t771 + (-(-pkin(11) * qJD(6) - t555) * t882 + t788) * t776 + t961) * MDP(32) + (-pkin(5) * t512 - (t518 * t776 + t555 * t771) * t882 - t519 * t577 + t516 * t981 + (-t882 * t885 - t533) * pkin(11) + t960) * MDP(33) + t983; t577 * t575 * MDP(27) + (-t575 ^ 2 + t577 ^ 2) * MDP(28) + (-t575 * t882 + t866) * MDP(29) + (-t577 * t882 - t853) * MDP(30) + t535 * MDP(31) + (-t501 * t882 - t516 * t577 - g(1) * t578 + g(2) * t973 - g(3) * (-t683 * t771 + t708) + t855) * MDP(32) + (t819 * t882 + t516 * t575 + g(1) * t579 + g(2) * t972 - g(3) * (-t683 * t776 - t924) - t821) * MDP(33) + (-MDP(29) * t934 - MDP(30) * t577 - MDP(32) * t501 + MDP(33) * t819) * qJD(6);];
tau  = t1;
