% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR4_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:34:50
% EndTime: 2019-03-09 13:35:08
% DurationCPUTime: 6.65s
% Computational Cost: add. (12647->469), mult. (37241->657), div. (0->0), fcn. (31146->12), ass. (0->258)
t232 = cos(qJ(6));
t303 = qJD(6) * t232;
t224 = sin(pkin(12));
t226 = cos(pkin(12));
t231 = sin(qJ(2));
t235 = cos(qJ(2));
t255 = t224 * t235 + t226 * t231;
t225 = sin(pkin(6));
t311 = qJD(1) * t225;
t194 = t255 * t311;
t227 = cos(pkin(6));
t310 = qJD(1) * t227;
t214 = qJD(2) + t310;
t230 = sin(qJ(4));
t234 = cos(qJ(4));
t154 = -t230 * t194 + t214 * t234;
t229 = sin(qJ(5));
t233 = cos(qJ(5));
t257 = -t194 * t234 - t214 * t230;
t91 = -t233 * t154 - t229 * t257;
t372 = t232 * t91;
t381 = t303 + t372;
t216 = pkin(2) * t224 + pkin(9);
t344 = pkin(10) + t216;
t288 = qJD(4) * t344;
t347 = pkin(1) * t231;
t300 = t227 * t347;
t321 = t225 * t235;
t345 = pkin(8) + qJ(3);
t189 = t345 * t321 + t300;
t178 = t189 * qJD(1);
t163 = t224 * t178;
t346 = pkin(1) * t235;
t299 = t227 * t346;
t212 = qJD(1) * t299;
t291 = t345 * t231;
t275 = t225 * t291;
t177 = -qJD(1) * t275 + t212;
t123 = t177 * t226 - t163;
t293 = t235 * t311;
t207 = t226 * t293;
t294 = t231 * t311;
t191 = -t224 * t294 + t207;
t138 = pkin(2) * t294 + pkin(3) * t194 - pkin(9) * t191;
t315 = t234 * t123 + t230 * t138;
t325 = t191 * t230;
t380 = -pkin(10) * t325 + t230 * t288 + t315;
t127 = t234 * t138;
t379 = pkin(4) * t194 - t123 * t230 + t127 + (-pkin(10) * t191 + t288) * t234;
t308 = qJD(4) * t230;
t378 = t308 - t325;
t228 = sin(qJ(6));
t188 = qJD(4) - t191;
t185 = qJD(5) + t188;
t197 = t255 * t225;
t192 = qJD(2) * t197;
t186 = qJD(1) * t192;
t258 = t154 * t229 - t233 * t257;
t304 = qJD(6) * t228;
t309 = qJD(2) * t225;
t292 = t231 * t309;
t273 = qJD(1) * t292;
t187 = qJD(2) * t207 - t224 * t273;
t307 = qJD(4) * t234;
t109 = t234 * t187 - t194 * t308 + t214 * t307;
t110 = -qJD(4) * t257 + t187 * t230;
t305 = qJD(5) * t233;
t306 = qJD(5) * t229;
t47 = t233 * t109 - t229 * t110 + t154 * t305 + t257 * t306;
t30 = t185 * t303 + t228 * t186 + t232 * t47 - t258 * t304;
t28 = t30 * t228;
t78 = t185 * t228 + t232 * t258;
t377 = t381 * t78 + t28;
t317 = -qJD(6) - t91;
t48 = qJD(5) * t258 + t109 * t229 + t233 * t110;
t44 = t228 * t48;
t342 = -t303 * t317 + t44;
t376 = -t258 * t78 - t317 * t372 + t342;
t370 = t228 * t317;
t46 = t232 * t48;
t76 = -t232 * t185 + t228 * t258;
t375 = t258 * t76 - t317 * t370 + t46;
t285 = -t232 * t186 + t228 * t47;
t31 = qJD(6) * t78 + t285;
t374 = -t228 * t31 + t30 * t232 + t370 * t78 - t381 * t76;
t270 = (-pkin(2) * t235 - pkin(1)) * t225;
t254 = qJD(1) * t270;
t200 = qJD(3) + t254;
t118 = -pkin(3) * t191 - pkin(9) * t194 + t200;
t158 = pkin(2) * t214 + t177;
t320 = t226 * t178;
t106 = t224 * t158 + t320;
t99 = pkin(9) * t214 + t106;
t70 = t118 * t230 + t234 * t99;
t57 = pkin(10) * t154 + t70;
t335 = t229 * t57;
t69 = t234 * t118 - t230 * t99;
t56 = pkin(10) * t257 + t69;
t50 = pkin(4) * t188 + t56;
t19 = t233 * t50 - t335;
t15 = -pkin(5) * t185 - t19;
t373 = t15 * t91;
t371 = t258 * t91;
t203 = t229 * t230 - t233 * t234;
t137 = t203 * t191;
t359 = qJD(4) + qJD(5);
t166 = t359 * t203;
t314 = t137 - t166;
t204 = t229 * t234 + t230 * t233;
t313 = (-t191 + t359) * t204;
t369 = t258 ^ 2 - t91 ^ 2;
t63 = pkin(5) * t258 + pkin(11) * t91;
t368 = t185 * t91 + t47;
t209 = pkin(2) * t273;
t119 = pkin(3) * t186 - pkin(9) * t187 + t209;
t210 = qJD(2) * t212;
t243 = (-qJD(2) * t291 + qJD(3) * t235) * t225;
t146 = qJD(1) * t243 + t210;
t322 = t225 * t231;
t160 = -qJD(2) * t189 - qJD(3) * t322;
t147 = t160 * qJD(1);
t84 = t146 * t226 + t147 * t224;
t286 = t234 * t119 - t230 * t84;
t241 = -qJD(4) * t70 + t286;
t21 = pkin(4) * t186 - pkin(10) * t109 + t241;
t251 = t118 * t307 + t230 * t119 + t234 * t84 - t308 * t99;
t26 = -pkin(10) * t110 + t251;
t287 = -t229 * t21 - t233 * t26 - t50 * t305 + t57 * t306;
t105 = t158 * t226 - t163;
t98 = -pkin(3) * t214 - t105;
t75 = -pkin(4) * t154 + t98;
t367 = t75 * t91 + t287;
t365 = pkin(2) * t292;
t219 = pkin(4) * t229 + pkin(11);
t363 = (-pkin(4) * t257 + qJD(6) * t219 + t63) * t317;
t362 = t317 * t258;
t201 = t344 * t230;
t202 = t344 * t234;
t157 = -t201 * t229 + t202 * t233;
t361 = -qJD(5) * t157 + t229 * t380 - t379 * t233;
t122 = t177 * t224 + t320;
t272 = pkin(4) * t378 - t122;
t256 = -t201 * t233 - t202 * t229;
t360 = -qJD(5) * t256 + t379 * t229 + t233 * t380;
t176 = (pkin(2) + t346) * t227 - t275;
t133 = t224 * t176 + t226 * t189;
t121 = pkin(9) * t227 + t133;
t319 = t226 * t235;
t196 = t224 * t322 - t225 * t319;
t141 = pkin(3) * t196 - pkin(9) * t197 + t270;
t316 = t234 * t121 + t230 * t141;
t332 = t233 * t57;
t20 = t229 * t50 + t332;
t16 = pkin(11) * t185 + t20;
t42 = pkin(5) * t91 - pkin(11) * t258 + t75;
t266 = t16 * t228 - t232 * t42;
t358 = t15 * t304 + t258 * t266;
t289 = -t233 * t21 + t229 * t26;
t242 = -qJD(5) * t20 - t289;
t5 = -pkin(5) * t186 - t242;
t9 = t16 * t232 + t228 * t42;
t357 = t15 * t303 + t5 * t228 + t9 * t258;
t355 = -t75 * t258 + t242;
t88 = -t137 * t232 + t194 * t228;
t245 = t232 * t166 + t204 * t304 + t88;
t324 = t204 * t232;
t354 = -t245 * t317 - t48 * t324;
t217 = -pkin(2) * t226 - pkin(3);
t208 = -pkin(4) * t234 + t217;
t151 = pkin(5) * t203 - pkin(11) * t204 + t208;
t352 = (-pkin(5) * t313 + pkin(11) * t314 + qJD(6) * t157 - t272) * t317 + t151 * t48;
t351 = -t203 * t31 - t313 * t76;
t350 = t185 * t258 - t48;
t349 = -t185 * t314 - t186 * t204;
t83 = t146 * t224 - t226 * t147;
t65 = pkin(4) * t110 + t83;
t11 = pkin(5) * t48 - pkin(11) * t47 + t65;
t4 = pkin(11) * t186 - t287;
t1 = -qJD(6) * t266 + t11 * t228 + t232 * t4;
t169 = t197 * t234 + t227 * t230;
t279 = -t121 * t230 + t234 * t141;
t61 = pkin(4) * t196 - pkin(10) * t169 + t279;
t168 = t197 * t230 - t227 * t234;
t67 = -pkin(10) * t168 + t316;
t261 = t229 * t61 + t233 * t67;
t340 = pkin(5) * t194 - t361;
t338 = t194 * t91;
t337 = t194 * t258;
t331 = t154 * t188;
t330 = t154 * t194;
t329 = t257 * t188;
t328 = t257 * t194;
t221 = t225 ^ 2;
t236 = qJD(1) ^ 2;
t323 = t221 * t236;
t318 = t230 * t186;
t312 = t231 ^ 2 - t235 ^ 2;
t302 = qJD(2) - t214;
t298 = t221 * t347;
t295 = t235 * t323;
t290 = qJD(1) * qJD(2) * t221;
t213 = qJD(2) * t299;
t159 = t213 + t243;
t101 = t159 * t226 + t160 * t224;
t193 = (-t224 * t231 + t319) * t309;
t139 = pkin(3) * t192 - pkin(9) * t193 + t365;
t281 = -t101 * t230 + t234 * t139;
t100 = t159 * t224 - t226 * t160;
t132 = t176 * t226 - t224 * t189;
t278 = t188 * t234;
t277 = t214 + t310;
t276 = t30 * t203 + t313 * t78;
t274 = t235 * t290;
t23 = t229 * t56 + t332;
t271 = pkin(4) * t306 - t23;
t268 = -t185 * t313 - t203 * t186;
t33 = pkin(11) * t196 + t261;
t114 = t233 * t168 + t169 * t229;
t115 = -t168 * t229 + t169 * t233;
t120 = -pkin(3) * t227 - t132;
t79 = pkin(4) * t168 + t120;
t43 = pkin(5) * t114 - pkin(11) * t115 + t79;
t265 = t228 * t43 + t232 * t33;
t264 = -t228 * t33 + t232 * t43;
t131 = -qJD(4) * t168 + t193 * t234;
t37 = pkin(4) * t192 - pkin(10) * t131 - qJD(4) * t316 + t281;
t130 = qJD(4) * t169 + t193 * t230;
t248 = t234 * t101 - t121 * t308 + t230 * t139 + t141 * t307;
t39 = -pkin(10) * t130 + t248;
t263 = -t229 * t39 + t233 * t37;
t262 = -t229 * t67 + t233 * t61;
t81 = t115 * t232 + t196 * t228;
t80 = t115 * t228 - t196 * t232;
t253 = t234 * t186 - t188 * t378;
t72 = pkin(4) * t130 + t100;
t252 = t229 * t37 + t233 * t39 + t61 * t305 - t306 * t67;
t250 = -pkin(8) * t321 - t300;
t249 = -pkin(8) * t273 + t210;
t247 = -t216 * t186 + t188 * t98;
t87 = -t137 * t228 - t232 * t194;
t246 = -t228 * t166 + t204 * t303 - t87;
t244 = t250 * t214;
t2 = -qJD(6) * t9 + t232 * t11 - t228 * t4;
t24 = t233 * t56 - t335;
t240 = t373 - t219 * t48 - (-pkin(4) * t305 + t24) * t317;
t238 = -t157 * t48 + t5 * t204 - (pkin(11) * t194 - qJD(6) * t151 + t360) * t317;
t237 = -t204 * t44 + t246 * t317;
t220 = -pkin(4) * t233 - pkin(5);
t143 = t186 * t196;
t55 = qJD(5) * t115 + t233 * t130 + t131 * t229;
t54 = -qJD(5) * t114 - t130 * t229 + t131 * t233;
t41 = qJD(6) * t81 - t192 * t232 + t228 * t54;
t40 = -qJD(6) * t80 + t192 * t228 + t232 * t54;
t32 = -pkin(5) * t196 - t262;
t12 = pkin(5) * t55 - pkin(11) * t54 + t72;
t7 = -pkin(5) * t192 + qJD(5) * t261 - t263;
t6 = pkin(11) * t192 + t252;
t3 = [0, 0, 0, 0.2e1 * t231 * t274, -0.2e1 * t312 * t290, t277 * t235 * t309, -t277 * t292, 0 (t244 + (t227 * t250 - 0.2e1 * t298) * qJD(1)) * qJD(2), -0.2e1 * pkin(1) * t274 - (-pkin(8) * t292 + t213) * t214 - t249 * t227, t100 * t194 + t101 * t191 - t105 * t193 - t106 * t192 - t132 * t187 - t133 * t186 - t84 * t196 + t197 * t83, -t105 * t100 + t106 * t101 - t83 * t132 + t84 * t133 + (t200 + t254) * t365, t109 * t169 - t131 * t257, -t109 * t168 - t110 * t169 + t130 * t257 + t131 * t154, t109 * t196 + t131 * t188 + t169 * t186 - t192 * t257, -t110 * t196 - t130 * t188 + t154 * t192 - t168 * t186, t188 * t192 + t143, t281 * t188 + t279 * t186 + t286 * t196 + t69 * t192 - t100 * t154 + t120 * t110 + t83 * t168 + t98 * t130 + (-t188 * t316 - t196 * t70) * qJD(4), -t100 * t257 + t120 * t109 + t98 * t131 + t83 * t169 - t186 * t316 - t188 * t248 - t70 * t192 - t196 * t251, t115 * t47 + t258 * t54, -t114 * t47 - t115 * t48 - t258 * t55 - t54 * t91, t115 * t186 + t185 * t54 + t192 * t258 + t196 * t47, -t114 * t186 - t185 * t55 - t192 * t91 - t196 * t48, t185 * t192 + t143, t263 * t185 + t262 * t186 - t289 * t196 + t19 * t192 + t72 * t91 + t79 * t48 + t65 * t114 + t75 * t55 + (-t185 * t261 - t196 * t20) * qJD(5), t65 * t115 - t252 * t185 - t261 * t186 - t20 * t192 + t287 * t196 + t258 * t72 + t79 * t47 + t75 * t54, t30 * t81 + t40 * t78, -t30 * t80 - t31 * t81 - t40 * t76 - t41 * t78, t114 * t30 - t317 * t40 + t48 * t81 + t55 * t78, -t114 * t31 + t317 * t41 - t48 * t80 - t55 * t76, t114 * t48 - t317 * t55 -(-qJD(6) * t265 + t12 * t232 - t228 * t6) * t317 + t264 * t48 + t2 * t114 - t266 * t55 + t7 * t76 + t32 * t31 + t5 * t80 + t15 * t41 (qJD(6) * t264 + t12 * t228 + t232 * t6) * t317 - t265 * t48 - t1 * t114 - t9 * t55 + t7 * t78 + t32 * t30 + t5 * t81 + t15 * t40; 0, 0, 0, -t231 * t295, t312 * t323, t302 * t293, -t302 * t294, 0, t236 * t298 + (qJD(2) * t250 - t244) * qJD(1), pkin(1) * t295 + (-pkin(8) * t294 + t212) * t214 - t249 (t106 - t122) * t194 + (t105 - t123) * t191 + (-t186 * t224 - t187 * t226) * pkin(2), t105 * t122 - t106 * t123 + (-t200 * t294 + t224 * t84 - t226 * t83) * pkin(2), t109 * t230 - t257 * t278 (t109 + t331) * t234 + (-t110 + t329) * t230, t188 * t278 + t318 + t328, t253 - t330, -t188 * t194, t217 * t110 + t122 * t154 - t69 * t194 - t83 * t234 + (-t216 * t307 - t127) * t188 + (t123 * t188 + t247) * t230, t217 * t109 + t122 * t257 + t70 * t194 + t83 * t230 + (t216 * t308 + t315) * t188 + t247 * t234, t204 * t47 + t258 * t314, -t203 * t47 - t204 * t48 - t258 * t313 - t314 * t91, -t337 - t349, t268 + t338, -t185 * t194, t185 * t361 + t186 * t256 - t19 * t194 + t65 * t203 + t208 * t48 + t272 * t91 + t313 * t75, -t157 * t186 + t185 * t360 + t20 * t194 + t65 * t204 + t208 * t47 + t272 * t258 + t314 * t75, -t245 * t78 + t30 * t324, t76 * t88 + t78 * t87 - (-t228 * t78 - t232 * t76) * t166 + (-t28 - t232 * t31 + (t228 * t76 - t232 * t78) * qJD(6)) * t204, t276 - t354, t237 + t351, t203 * t48 - t313 * t317, t246 * t15 + t2 * t203 + t238 * t228 + t232 * t352 - t256 * t31 - t266 * t313 + t340 * t76, -t1 * t203 - t245 * t15 - t228 * t352 + t238 * t232 - t256 * t30 - t313 * t9 + t340 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t191 ^ 2 - t194 ^ 2, t105 * t194 - t106 * t191 + t209, 0, 0, 0, 0, 0, t253 + t330, -t188 ^ 2 * t234 - t318 + t328, 0, 0, 0, 0, 0, t268 - t338, -t337 + t349, 0, 0, 0, 0, 0, t237 - t351, t276 + t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257 * t154, -t154 ^ 2 + t257 ^ 2, t109 - t331, -t110 - t329, t186, t188 * t70 + t257 * t98 + t241, -t154 * t98 + t188 * t69 - t251, t371, t369, t368, t350, t186, t185 * t23 + (-t185 * t306 + t233 * t186 + t257 * t91) * pkin(4) + t355, t185 * t24 + (-t185 * t305 - t229 * t186 + t257 * t258) * pkin(4) + t367, t377, t374, t376, t375, t362, t220 * t31 + t271 * t76 + (-t5 + t363) * t232 + t240 * t228 + t358, t220 * t30 - t228 * t363 + t232 * t240 + t271 * t78 + t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t371, t369, t368, t350, t186, t185 * t20 + t355, t185 * t19 + t367, t377, t374, t376, t375, t362, -pkin(5) * t31 - t5 * t232 + (-t19 * t228 + t232 * t63) * t317 - t20 * t76 + t228 * t373 - t342 * pkin(11) + t358, -pkin(5) * t30 - (t19 * t232 + t228 * t63) * t317 - t20 * t78 + t15 * t372 + (-t304 * t317 - t46) * pkin(11) + t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78 * t76, -t76 ^ 2 + t78 ^ 2, -t317 * t76 + t30, -t285 + (-qJD(6) - t317) * t78, t48, -t15 * t78 - t317 * t9 + t2, t15 * t76 + t266 * t317 - t1;];
tauc_reg  = t3;
