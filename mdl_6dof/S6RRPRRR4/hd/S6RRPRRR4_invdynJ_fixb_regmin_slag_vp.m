% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR4_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR4_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:34:54
% EndTime: 2019-03-09 13:35:18
% DurationCPUTime: 10.10s
% Computational Cost: add. (15302->607), mult. (42679->856), div. (0->0), fcn. (36235->16), ass. (0->330)
t285 = cos(qJ(6));
t388 = qJD(6) * t285;
t277 = sin(pkin(6));
t276 = sin(pkin(12));
t278 = cos(pkin(12));
t283 = sin(qJ(2));
t288 = cos(qJ(2));
t317 = t276 * t288 + t278 * t283;
t306 = qJD(1) * t317;
t221 = t277 * t306;
t279 = cos(pkin(6));
t397 = qJD(1) * t279;
t258 = qJD(2) + t397;
t282 = sin(qJ(4));
t287 = cos(qJ(4));
t184 = -t282 * t221 + t258 * t287;
t281 = sin(qJ(5));
t286 = cos(qJ(5));
t321 = -t221 * t287 - t258 * t282;
t104 = -t286 * t184 - t281 * t321;
t482 = t104 * t285;
t490 = t388 + t482;
t264 = pkin(2) * t276 + pkin(9);
t444 = pkin(10) + t264;
t360 = qJD(4) * t444;
t409 = t279 * t283;
t260 = pkin(1) * t409;
t412 = t277 * t288;
t445 = pkin(8) + qJ(3);
t206 = (t412 * t445 + t260) * qJD(1);
t195 = t276 * t206;
t451 = pkin(1) * t279;
t261 = t288 * t451;
t255 = qJD(1) * t261;
t368 = t445 * t283;
t346 = t277 * t368;
t205 = -qJD(1) * t346 + t255;
t134 = t205 * t278 - t195;
t396 = qJD(1) * t283;
t371 = t277 * t396;
t405 = t288 * t278;
t373 = t277 * t405;
t218 = qJD(1) * t373 - t276 * t371;
t156 = pkin(2) * t371 + pkin(3) * t221 - pkin(9) * t218;
t402 = t287 * t134 + t282 * t156;
t421 = t218 * t282;
t489 = -pkin(10) * t421 + t282 * t360 + t402;
t140 = t287 * t156;
t488 = pkin(4) * t221 - t134 * t282 + t140 + (-pkin(10) * t218 + t360) * t287;
t393 = qJD(4) * t282;
t487 = t393 - t421;
t280 = sin(qJ(6));
t322 = t184 * t281 - t286 * t321;
t386 = -qJD(6) - t104;
t395 = qJD(2) * t283;
t370 = t277 * t395;
t345 = qJD(1) * t370;
t385 = qJD(1) * qJD(2);
t367 = t288 * t385;
t170 = -t276 * t345 + (qJDD(1) * t317 + t278 * t367) * t277;
t384 = qJDD(1) * t279;
t257 = qJDD(2) + t384;
t392 = qJD(4) * t287;
t93 = t287 * t170 - t221 * t393 + t282 * t257 + t258 * t392;
t94 = -qJD(4) * t321 + t170 * t282 - t287 * t257;
t47 = qJD(5) * t322 + t281 * t93 + t286 * t94;
t45 = qJDD(6) + t47;
t43 = t285 * t45;
t214 = qJD(4) - t218;
t213 = qJD(5) + t214;
t85 = -t285 * t213 + t280 * t322;
t486 = -t386 ^ 2 * t280 + t322 * t85 + t43;
t382 = qJDD(1) * t288;
t365 = t277 * t382;
t242 = t278 * t365;
t305 = t317 * qJD(2);
t383 = qJDD(1) * t283;
t366 = t276 * t383;
t168 = qJDD(4) - t242 + (qJD(1) * t305 + t366) * t277;
t166 = qJDD(5) + t168;
t389 = qJD(6) * t280;
t390 = qJD(5) * t286;
t391 = qJD(5) * t281;
t46 = t184 * t390 - t281 * t94 + t286 * t93 + t321 * t391;
t22 = t280 * t166 + t213 * t388 + t285 * t46 - t322 * t389;
t20 = t22 * t280;
t87 = t213 * t280 + t285 * t322;
t485 = t490 * t87 + t20;
t484 = t280 * t45 - t322 * t87 - t386 * t490;
t275 = qJ(4) + qJ(5);
t270 = sin(t275);
t271 = cos(t275);
t225 = t317 * t279;
t236 = t276 * t283 - t405;
t284 = sin(qJ(1));
t289 = cos(qJ(1));
t319 = -t225 * t284 - t236 * t289;
t413 = t277 * t284;
t154 = -t270 * t319 + t271 * t413;
t224 = t317 * t277;
t320 = t225 * t289 - t236 * t284;
t411 = t277 * t289;
t315 = t270 * t320 + t271 * t411;
t303 = -g(3) * (-t224 * t270 + t271 * t279) + g(2) * t315 - g(1) * t154;
t188 = pkin(2) * t258 + t205;
t410 = t278 * t206;
t118 = t276 * t188 + t410;
t113 = pkin(9) * t258 + t118;
t269 = pkin(2) * t288 + pkin(1);
t341 = t269 * t277;
t229 = -qJD(1) * t341 + qJD(3);
t129 = -pkin(3) * t218 - pkin(9) * t221 + t229;
t76 = t113 * t287 + t129 * t282;
t59 = pkin(10) * t184 + t76;
t438 = t286 * t59;
t75 = -t113 * t282 + t287 * t129;
t58 = pkin(10) * t321 + t75;
t52 = pkin(4) * t214 + t58;
t29 = t281 * t52 + t438;
t376 = pkin(1) * t382;
t254 = t279 * t376;
t379 = qJD(2) * t451;
t348 = qJD(1) * t379;
t361 = qJD(2) * t445;
t394 = qJD(3) * t283;
t116 = -t283 * t348 + pkin(2) * t257 + t254 + (-qJDD(1) * t368 + (-t288 * t361 - t394) * qJD(1)) * t277;
t298 = qJD(3) * t288 - t283 * t361;
t372 = pkin(8) * t365 + qJDD(1) * t260 + t288 * t348;
t124 = (qJ(3) * t382 + qJD(1) * t298) * t277 + t372;
t74 = t276 * t116 + t278 * t124;
t68 = pkin(9) * t257 + t74;
t169 = t242 + (-qJD(2) * t306 - t366) * t277;
t333 = t269 * qJDD(1);
t381 = pkin(2) * t345 + qJDD(3);
t479 = t277 * t333 - t381;
t81 = -pkin(3) * t169 - pkin(9) * t170 - t479;
t362 = -t282 * t68 + t287 * t81;
t295 = -qJD(4) * t76 + t362;
t14 = pkin(4) * t168 - pkin(10) * t93 + t295;
t310 = t113 * t393 - t129 * t392 - t282 * t81 - t287 * t68;
t16 = -pkin(10) * t94 - t310;
t364 = -t286 * t14 + t16 * t281;
t457 = -qJD(5) * t29 - t364;
t5 = -pkin(5) * t166 - t457;
t299 = t303 - t5;
t439 = t281 * t59;
t28 = t286 * t52 - t439;
t26 = -pkin(5) * t213 - t28;
t483 = t104 * t26;
t481 = t322 * t104;
t238 = t281 * t282 - t286 * t287;
t150 = t238 * t218;
t464 = qJD(4) + qJD(5);
t198 = t464 * t238;
t401 = t150 - t198;
t239 = t281 * t287 + t282 * t286;
t400 = (-t218 + t464) * t239;
t478 = -t104 ^ 2 + t322 ^ 2;
t65 = pkin(5) * t322 + pkin(11) * t104;
t406 = t284 * t288;
t407 = t283 * t289;
t232 = -t279 * t406 - t407;
t404 = t288 * t289;
t408 = t283 * t284;
t313 = t279 * t404 - t408;
t477 = -g(1) * t232 - g(2) * t313;
t476 = t104 * t213 + t46;
t152 = -t270 * t411 + t271 * t320;
t155 = t270 * t413 + t271 * t319;
t192 = t224 * t271 + t270 * t279;
t359 = -t281 * t14 - t286 * t16 - t52 * t390 + t59 * t391;
t117 = t188 * t278 - t195;
t112 = -pkin(3) * t258 - t117;
t84 = -pkin(4) * t184 + t112;
t475 = g(1) * t155 + g(2) * t152 + g(3) * t192 + t104 * t84 + t359;
t23 = qJD(6) * t87 - t285 * t166 + t280 * t46;
t328 = t280 * t87 + t285 * t85;
t474 = -t104 * t328 + t22 * t285 - t280 * t23 - t85 * t388 - t389 * t87;
t308 = t236 * t279;
t173 = -t284 * t317 - t289 * t308;
t473 = t152 * t280 + t173 * t285;
t472 = t152 * t285 - t173 * t280;
t133 = t205 * t276 + t410;
t344 = pkin(4) * t487 - t133;
t469 = t386 * t322;
t234 = t444 * t282;
t235 = t444 * t287;
t318 = -t234 * t286 - t235 * t281;
t467 = -qJD(5) * t318 + t488 * t281 + t286 * t489;
t187 = -t234 * t281 + t235 * t286;
t466 = -qJD(5) * t187 + t281 * t489 - t488 * t286;
t204 = pkin(2) * t279 + t261 - t346;
t399 = pkin(8) * t412 + t260;
t215 = qJ(3) * t412 + t399;
t146 = t276 * t204 + t278 * t215;
t132 = pkin(9) * t279 + t146;
t414 = t277 * t283;
t223 = t276 * t414 - t373;
t159 = pkin(3) * t223 - pkin(9) * t224 - t341;
t403 = t287 * t132 + t282 * t159;
t200 = t224 * t282 - t279 * t287;
t201 = t224 * t287 + t279 * t282;
t126 = -t200 * t281 + t201 * t286;
t217 = t223 * t285;
t465 = -t126 * t280 + t217;
t27 = pkin(11) * t213 + t29;
t48 = pkin(5) * t104 - pkin(11) * t322 + t84;
t331 = t27 * t280 - t285 * t48;
t463 = t26 * t389 + t322 * t331;
t11 = t27 * t285 + t280 * t48;
t461 = t11 * t322 + t26 * t388 - t280 * t299;
t460 = -t322 * t84 + t303 + t457;
t458 = -t23 * t238 - t400 * t85;
t101 = -t150 * t285 + t221 * t280;
t300 = t198 * t285 + t239 * t389 + t101;
t418 = t239 * t285;
t456 = -t300 * t386 - t45 * t418;
t455 = t213 * t322 - t47;
t454 = -t166 * t239 - t213 * t401;
t4 = pkin(11) * t166 - t359;
t73 = t116 * t278 - t276 * t124;
t67 = -pkin(3) * t257 - t73;
t49 = pkin(4) * t94 + t67;
t9 = pkin(5) * t47 - pkin(11) * t46 + t49;
t1 = -t331 * qJD(6) + t280 * t9 + t285 * t4;
t272 = t277 ^ 2;
t453 = 0.2e1 * t272;
t452 = pkin(1) * t272;
t446 = g(3) * t288;
t355 = -t132 * t282 + t287 * t159;
t63 = pkin(4) * t223 - pkin(10) * t201 + t355;
t71 = -pkin(10) * t200 + t403;
t325 = t281 * t63 + t286 * t71;
t437 = pkin(5) * t221 - t466;
t434 = t104 * t221;
t431 = t322 * t221;
t428 = t168 * t282;
t425 = t184 * t214;
t424 = t184 * t221;
t423 = t321 * t214;
t422 = t321 * t221;
t420 = t223 * t280;
t419 = t239 * t280;
t417 = t271 * t280;
t416 = t271 * t285;
t290 = qJD(1) ^ 2;
t415 = t272 * t290;
t273 = t283 ^ 2;
t398 = -t288 ^ 2 + t273;
t387 = qJD(2) - t258;
t380 = t283 * t452;
t375 = pkin(8) * t383;
t374 = t288 * t415;
t265 = -pkin(2) * t278 - pkin(3);
t369 = t445 * t277;
t267 = pkin(4) * t281 + pkin(11);
t357 = -pkin(4) * t321 + qJD(6) * t267 + t65;
t256 = t288 * t379;
t189 = t277 * t298 + t256;
t190 = -t277 * t394 + (-t288 * t369 - t260) * qJD(2);
t115 = t189 * t278 + t190 * t276;
t219 = t277 * t305;
t220 = t236 * t277 * qJD(2);
t157 = pkin(2) * t370 + pkin(3) * t219 + pkin(9) * t220;
t356 = -t115 * t282 + t287 * t157;
t353 = -t282 * t411 + t287 * t320;
t114 = t189 * t276 - t278 * t190;
t145 = t204 * t278 - t276 * t215;
t352 = t214 * t287;
t351 = t258 + t397;
t350 = t387 * qJD(1);
t349 = t257 + t384;
t347 = t22 * t238 + t400 * t87;
t30 = t281 * t58 + t438;
t343 = pkin(4) * t391 - t30;
t31 = t286 * t58 - t439;
t342 = -pkin(4) * t390 + t31;
t339 = g(1) * t289 + g(2) * t284;
t338 = g(1) * t284 - g(2) * t289;
t247 = -pkin(4) * t287 + t265;
t181 = pkin(5) * t238 - pkin(11) * t239 + t247;
t336 = pkin(11) * t221 - qJD(6) * t181 + t467;
t335 = -pkin(5) * t400 + pkin(11) * t401 + qJD(6) * t187 - t344;
t334 = -t238 * t166 - t213 * t400;
t332 = -t267 * t45 + t483;
t33 = pkin(11) * t223 + t325;
t125 = t286 * t200 + t201 * t281;
t131 = -pkin(3) * t279 - t145;
t95 = pkin(4) * t200 + t131;
t50 = pkin(5) * t125 - pkin(11) * t126 + t95;
t330 = t280 * t50 + t285 * t33;
t329 = -t280 * t33 + t285 * t50;
t144 = -qJD(4) * t200 - t220 * t287;
t37 = pkin(4) * t219 - pkin(10) * t144 - qJD(4) * t403 + t356;
t143 = qJD(4) * t201 - t220 * t282;
t307 = t287 * t115 - t132 * t393 + t282 * t157 + t159 * t392;
t39 = -pkin(10) * t143 + t307;
t327 = -t281 * t39 + t286 * t37;
t326 = -t281 * t71 + t286 * t63;
t97 = t126 * t285 + t420;
t316 = t287 * t168 - t214 * t487;
t78 = pkin(4) * t143 + t114;
t314 = t282 * t320 + t287 * t411;
t312 = t281 * t37 + t286 * t39 + t63 * t390 - t391 * t71;
t304 = t112 * t214 - t264 * t168;
t176 = t284 * t308 - t289 * t317;
t302 = g(1) * t176 + g(2) * t173 - g(3) * t223;
t100 = -t150 * t280 - t285 * t221;
t301 = -t198 * t280 + t239 * t388 - t100;
t297 = t399 * t258;
t2 = -qJD(6) * t11 - t280 * t4 + t285 * t9;
t293 = qJD(4) * t214 * t264 + t302 + t67;
t292 = t301 * t386 - t419 * t45;
t268 = -pkin(4) * t286 - pkin(5);
t233 = -t279 * t408 + t404;
t231 = -t279 * t407 - t406;
t226 = pkin(2) * t409 - t369;
t163 = t282 * t413 + t287 * t319;
t162 = -t282 * t319 + t287 * t413;
t89 = t155 * t285 - t176 * t280;
t88 = -t155 * t280 - t176 * t285;
t57 = qJD(5) * t126 + t286 * t143 + t144 * t281;
t56 = -qJD(5) * t125 - t143 * t281 + t144 * t286;
t41 = qJD(6) * t97 - t219 * t285 + t280 * t56;
t40 = qJD(6) * t465 + t219 * t280 + t285 * t56;
t32 = -pkin(5) * t223 - t326;
t17 = pkin(5) * t57 - pkin(11) * t56 + t78;
t7 = -pkin(5) * t219 + qJD(5) * t325 - t327;
t6 = pkin(11) * t219 + t312;
t3 = [qJDD(1), t338, t339 (qJDD(1) * t273 + 0.2e1 * t283 * t367) * t272 (t283 * t382 - t385 * t398) * t453 (qJD(2) * t288 * t351 + t283 * t349) * t277 (t288 * t349 - t351 * t395) * t277, t257 * t279, t376 * t453 + (-pkin(8) * t414 + t261) * t257 + (-t277 * t375 + t254) * t279 - g(1) * t231 - g(2) * t233 + (-t297 + (-t279 * t399 - 0.2e1 * t380) * qJD(1)) * qJD(2) -(-pkin(8) * t370 + t256) * t258 - t399 * t257 - (-pkin(8) * t345 + t372) * t279 + g(1) * t313 - g(2) * t232 + 0.2e1 * (-t367 - t383) * t452, t114 * t221 + t115 * t218 + t117 * t220 - t118 * t219 - t145 * t170 + t146 * t169 - t223 * t74 - t224 * t73 - t277 * t339, t74 * t146 + t118 * t115 + t73 * t145 - t117 * t114 - g(1) * (-t226 * t289 - t269 * t284) - g(2) * (-t226 * t284 + t269 * t289) + (pkin(2) * t229 * t395 + t269 * t479) * t277, -t144 * t321 + t201 * t93, t143 * t321 + t144 * t184 - t200 * t93 - t201 * t94, t144 * t214 + t168 * t201 - t219 * t321 + t223 * t93, -t143 * t214 - t168 * t200 + t184 * t219 - t223 * t94, t168 * t223 + t214 * t219, t356 * t214 + t355 * t168 + t362 * t223 + t75 * t219 - t114 * t184 + t131 * t94 + t67 * t200 + t112 * t143 + g(1) * t353 - g(2) * t163 + (-t214 * t403 - t223 * t76) * qJD(4), -g(1) * t314 - g(2) * t162 + t112 * t144 - t114 * t321 + t131 * t93 - t168 * t403 + t67 * t201 - t214 * t307 - t76 * t219 + t223 * t310, t126 * t46 + t322 * t56, -t104 * t56 - t125 * t46 - t126 * t47 - t322 * t57, t126 * t166 + t213 * t56 + t219 * t322 + t223 * t46, -t104 * t219 - t125 * t166 - t213 * t57 - t223 * t47, t166 * t223 + t213 * t219, t327 * t213 + t326 * t166 - t364 * t223 + t28 * t219 + t78 * t104 + t95 * t47 + t49 * t125 + t84 * t57 + g(1) * t152 - g(2) * t155 + (-t213 * t325 - t223 * t29) * qJD(5), -g(1) * t315 - g(2) * t154 + t49 * t126 - t166 * t325 - t213 * t312 - t29 * t219 + t223 * t359 + t322 * t78 + t95 * t46 + t84 * t56, t22 * t97 + t40 * t87, t22 * t465 - t23 * t97 - t40 * t85 - t41 * t87, t125 * t22 - t386 * t40 + t45 * t97 + t57 * t87, -t125 * t23 + t386 * t41 + t45 * t465 - t57 * t85, t125 * t45 - t386 * t57 -(-qJD(6) * t330 + t17 * t285 - t280 * t6) * t386 + t329 * t45 + t2 * t125 - t331 * t57 + t7 * t85 + t32 * t23 - t5 * t465 + t26 * t41 + g(1) * t472 - g(2) * t89 (qJD(6) * t329 + t17 * t280 + t285 * t6) * t386 - t330 * t45 - t1 * t125 - t11 * t57 + t7 * t87 + t32 * t22 + t5 * t97 + t26 * t40 - g(1) * t473 - g(2) * t88; 0, 0, 0, -t283 * t374, t398 * t415 (t288 * t350 + t383) * t277 (-t387 * t396 + t382) * t277, t257, t290 * t380 + t254 + (-t375 - t446) * t277 + (-qJD(2) * t399 + t297) * qJD(1) + t477, pkin(1) * t374 + g(1) * t233 - g(2) * t231 + t255 * t258 + (pkin(8) * t350 + g(3)) * t414 - t372 (t118 - t133) * t221 + (t117 - t134) * t218 + (t169 * t276 - t170 * t278) * pkin(2), t117 * t133 - t118 * t134 + (t74 * t276 + t73 * t278 + (-t229 * t396 - t446) * t277 + t477) * pkin(2), t282 * t93 - t321 * t352 (t93 + t425) * t287 + (-t94 + t423) * t282, t214 * t352 + t422 + t428, t316 - t424, -t214 * t221, t133 * t184 - t140 * t214 - t75 * t221 + t265 * t94 + (t134 * t214 + t304) * t282 - t293 * t287, t133 * t321 + t214 * t402 + t76 * t221 + t265 * t93 + t282 * t293 + t287 * t304, t239 * t46 + t322 * t401, -t104 * t401 - t238 * t46 - t239 * t47 - t322 * t400, -t431 - t454, t334 + t434, -t213 * t221, t344 * t104 + t166 * t318 + t213 * t466 - t28 * t221 + t49 * t238 + t247 * t47 - t302 * t271 + t400 * t84, -t187 * t166 + t213 * t467 + t29 * t221 + t49 * t239 + t247 * t46 + t302 * t270 + t344 * t322 + t401 * t84, t22 * t418 - t300 * t87, t100 * t87 + t101 * t85 + t328 * t198 + (-t20 - t23 * t285 + (t280 * t85 - t285 * t87) * qJD(6)) * t239, t347 - t456, t292 + t458, t238 * t45 - t386 * t400 (t181 * t285 - t187 * t280) * t45 + t2 * t238 - t318 * t23 + t5 * t419 - g(1) * (t176 * t416 + t280 * t319) - g(2) * (t173 * t416 + t280 * t320) - g(3) * (-t223 * t416 + t224 * t280) + t437 * t85 - (t280 * t336 - t285 * t335) * t386 - t400 * t331 + t301 * t26 -(t181 * t280 + t187 * t285) * t45 - t1 * t238 - t318 * t22 + t5 * t418 - g(1) * (-t176 * t417 + t285 * t319) - g(2) * (-t173 * t417 + t285 * t320) - g(3) * (t223 * t417 + t224 * t285) + t437 * t87 - t400 * t11 - (t280 * t335 + t285 * t336) * t386 - t300 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t218 ^ 2 - t221 ^ 2, -g(3) * t279 + t117 * t221 - t118 * t218 + (-t333 - t338) * t277 + t381, 0, 0, 0, 0, 0, t316 + t424, -t214 ^ 2 * t287 + t422 - t428, 0, 0, 0, 0, 0, t334 - t434, -t431 + t454, 0, 0, 0, 0, 0, t292 - t458, t347 + t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t321 * t184, -t184 ^ 2 + t321 ^ 2, t93 - t425, -t94 - t423, t168, -g(1) * t162 + g(2) * t314 + g(3) * t200 + t112 * t321 + t76 * t214 + t295, g(1) * t163 + g(2) * t353 + g(3) * t201 - t112 * t184 + t75 * t214 + t310, t481, t478, t476, t455, t166, t213 * t30 + (t104 * t321 + t166 * t286 - t213 * t391) * pkin(4) + t460, t213 * t31 + (-t166 * t281 - t213 * t390 + t321 * t322) * pkin(4) + t475, t485, t474, t484, t486, t469, t268 * t23 + t343 * t85 + (-t342 * t386 + t332) * t280 + (t357 * t386 + t299) * t285 + t463, t268 * t22 + t343 * t87 + t332 * t285 - (t280 * t357 + t285 * t342) * t386 + t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, t478, t476, t455, t166, t213 * t29 + t460, t213 * t28 + t475, t485, t474, t484, t486, t469, -pkin(5) * t23 - t29 * t85 + (-pkin(11) * t45 - t28 * t386 + t483) * t280 + (-(-pkin(11) * qJD(6) - t65) * t386 + t299) * t285 + t463, -pkin(5) * t22 - (t28 * t285 + t280 * t65) * t386 - t29 * t87 + t26 * t482 + (-t386 * t389 - t43) * pkin(11) + t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87 * t85, -t85 ^ 2 + t87 ^ 2, -t386 * t85 + t22, -t386 * t87 - t23, t45, -t11 * t386 - t26 * t87 - g(1) * t88 + g(2) * t473 - g(3) * (-t192 * t280 + t217) + t2, t331 * t386 + t26 * t85 + g(1) * t89 + g(2) * t472 - g(3) * (-t192 * t285 - t420) - t1;];
tau_reg  = t3;
