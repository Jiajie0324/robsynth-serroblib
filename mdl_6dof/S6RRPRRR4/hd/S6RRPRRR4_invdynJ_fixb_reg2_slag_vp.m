% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:34:58
% EndTime: 2019-03-09 13:35:38
% DurationCPUTime: 24.24s
% Computational Cost: add. (36686->916), mult. (102149->1195), div. (0->0), fcn. (84455->16), ass. (0->425)
t365 = cos(pkin(6));
t369 = sin(qJ(2));
t538 = t365 * t369;
t344 = pkin(1) * t538;
t364 = sin(pkin(6));
t373 = cos(qJ(2));
t540 = t364 * t373;
t588 = pkin(8) + qJ(3);
t263 = (t540 * t588 + t344) * qJD(1);
t363 = sin(pkin(12));
t251 = t363 * t263;
t346 = t365 * t373 * pkin(1);
t336 = qJD(1) * t346;
t481 = t588 * t364;
t448 = t369 * t481;
t262 = -qJD(1) * t448 + t336;
t571 = cos(pkin(12));
t174 = t262 * t571 - t251;
t468 = t373 * t571;
t441 = t364 * t468;
t320 = qJD(1) * t441;
t519 = qJD(1) * t369;
t484 = t364 * t519;
t280 = t363 * t484 - t320;
t306 = -t373 * t363 - t369 * t571;
t521 = qJD(1) * t364;
t284 = t306 * t521;
t201 = pkin(2) * t484 - pkin(3) * t284 + pkin(9) * t280;
t368 = sin(qJ(4));
t372 = cos(qJ(4));
t112 = -t174 * t368 + t372 * t201;
t602 = pkin(2) * t363;
t350 = pkin(9) + t602;
t587 = pkin(10) + t350;
t470 = qJD(4) * t587;
t661 = -pkin(4) * t284 + t112 + (pkin(10) * t280 + t470) * t372;
t113 = t372 * t174 + t368 * t201;
t552 = t280 * t368;
t660 = -pkin(10) * t552 - t368 * t470 - t113;
t604 = cos(qJ(5));
t486 = t604 * t372;
t367 = sin(qJ(5));
t536 = t367 * t368;
t307 = -t486 + t536;
t482 = qJD(5) * t604;
t503 = qJD(4) + qJD(5);
t526 = -qJD(4) * t486 + t307 * t280 - t372 * t482 + t503 * t536;
t371 = cos(qJ(6));
t510 = qJD(6) * t371;
t520 = qJD(1) * t365;
t341 = qJD(2) + t520;
t238 = t368 * t284 + t341 * t372;
t239 = -t284 * t372 + t341 * t368;
t143 = -t604 * t238 + t239 * t367;
t645 = t143 * t371;
t659 = t510 + t645;
t516 = qJD(4) * t368;
t658 = t516 + t552;
t308 = t367 * t372 + t368 * t604;
t525 = (t280 + t503) * t308;
t313 = qJDD(1) * t441;
t505 = qJDD(1) * t369;
t476 = t363 * t505;
t618 = qJD(2) * t306;
t383 = (qJD(1) * t618 - t476) * t364;
t381 = t313 + t383;
t617 = -qJDD(4) - qJDD(5);
t465 = -t313 - t617;
t474 = -t320 + t503;
t535 = t369 * t363;
t657 = t308 * t465 - t364 * (qJD(1) * (t308 * t618 + t526 * t535) - t308 * t476) - t526 * t474;
t303 = t587 * t368;
t304 = t587 * t372;
t419 = -t303 * t604 - t367 * t304;
t574 = qJD(5) * t419 - t661 * t367 + t660 * t604;
t467 = t571 * t263;
t173 = t262 * t363 + t467;
t621 = pkin(4) * t658 - t173;
t366 = sin(qJ(6));
t462 = -t284 * t366 + t526 * t371;
t273 = qJD(4) + t280;
t398 = qJD(5) + t273;
t392 = t371 * t398;
t420 = t367 * t238 + t239 * t604;
t120 = t366 * t420 - t392;
t212 = qJDD(4) - t381;
t377 = qJDD(5) + t212;
t122 = t366 * t398 + t371 * t420;
t513 = qJD(6) * t122;
t506 = qJDD(1) * t365;
t338 = qJDD(2) + t506;
t515 = qJD(4) * t372;
t438 = qJD(2) * t468;
t507 = qJD(1) * qJD(2);
t478 = t369 * t507;
t447 = t364 * t478;
t635 = t363 * t447 + (-qJD(1) * t438 + qJDD(1) * t306) * t364;
t130 = -t284 * t516 - t368 * t338 - t341 * t515 + t372 * t635;
t643 = -t372 * t338 - t368 * t635;
t131 = t239 * qJD(4) + t643;
t514 = qJD(5) * t367;
t70 = t604 * t130 + t367 * t131 - t238 * t482 + t239 * t514;
t40 = -t366 * t70 - t371 * t377 + t513;
t141 = qJD(6) + t143;
t646 = t141 * t366;
t656 = t120 * t646 - t40 * t371;
t511 = qJD(6) * t366;
t39 = -qJD(6) * t392 - t366 * t377 + t371 * t70 + t420 * t511;
t655 = t659 * t122 - t39 * t366;
t464 = t367 * t130 - t604 * t131;
t71 = t420 * qJD(5) - t464;
t69 = qJDD(6) + t71;
t654 = -t122 * t420 + t659 * t141 + t366 * t69;
t67 = t371 * t69;
t653 = t120 * t420 - t141 * t646 + t67;
t370 = sin(qJ(1));
t374 = cos(qJ(1));
t417 = t468 - t535;
t524 = t306 * t365;
t224 = -t370 * t417 + t374 * t524;
t229 = t370 * t524 + t374 * t417;
t288 = t306 * t364;
t651 = g(1) * t229 - g(2) * t224 - g(3) * t288;
t650 = -t659 * t120 - t122 * t646 - t366 * t40 - t39 * t371;
t362 = qJ(4) + qJ(5);
t357 = sin(t362);
t358 = cos(t362);
t541 = t364 * t370;
t199 = t229 * t357 - t358 * t541;
t247 = t288 * t357 + t358 * t365;
t539 = t364 * t374;
t461 = t224 * t357 - t358 * t539;
t409 = g(1) * t199 - g(2) * t461 - g(3) * t247;
t242 = pkin(2) * t341 + t262;
t158 = t363 * t242 + t467;
t153 = pkin(9) * t341 + t158;
t356 = t373 * pkin(2) + pkin(1);
t296 = -t356 * t521 + qJD(3);
t169 = pkin(3) * t280 + pkin(9) * t284 + t296;
t106 = t153 * t372 + t169 * t368;
t504 = qJDD(1) * t373;
t475 = t364 * t504;
t502 = pkin(2) * t447 + qJDD(3);
t603 = pkin(1) * t364;
t116 = -pkin(2) * t475 - pkin(3) * t381 + pkin(9) * t635 - qJDD(1) * t603 + t502;
t494 = pkin(1) * t506;
t335 = t373 * t494;
t479 = t365 * t507;
t450 = pkin(1) * t479;
t415 = -t369 * t450 + t335;
t471 = qJD(2) * t588;
t517 = qJD(3) * t369;
t156 = pkin(2) * t338 + (-t588 * t505 + (-t373 * t471 - t517) * qJD(1)) * t364 + t415;
t400 = qJD(3) * t373 - t369 * t471;
t487 = pkin(8) * t475 + t369 * t494 + t373 * t450;
t164 = (qJ(3) * t504 + qJD(1) * t400) * t364 + t487;
t104 = t363 * t156 + t571 * t164;
t98 = pkin(9) * t338 + t104;
t42 = -qJD(4) * t106 + t372 * t116 - t368 * t98;
t25 = pkin(4) * t212 + pkin(10) * t130 + t42;
t413 = -t368 * t116 + t153 * t516 - t169 * t515 - t372 * t98;
t31 = -pkin(10) * t131 - t413;
t472 = -t604 * t25 + t367 * t31;
t89 = pkin(10) * t238 + t106;
t495 = t604 * t89;
t105 = -t153 * t368 + t372 * t169;
t88 = -pkin(10) * t239 + t105;
t80 = pkin(4) * t273 + t88;
t48 = t367 * t80 + t495;
t10 = -t48 * qJD(5) - t472;
t620 = -t383 + t465;
t8 = -pkin(5) * t620 - t10;
t401 = t409 - t8;
t577 = t367 * t89;
t47 = t604 * t80 - t577;
t45 = -pkin(5) * t398 - t47;
t649 = t143 * t45;
t648 = pkin(11) * t284 + t574;
t647 = t525 * pkin(5) + pkin(11) * t526 + t621;
t564 = t143 * t420;
t554 = t273 * t368;
t644 = t239 * t554;
t642 = -t105 * t273 - t413;
t404 = t308 * t511 + t462;
t641 = -t143 ^ 2 + t420 ^ 2;
t95 = pkin(5) * t420 + pkin(11) * t143;
t640 = t143 * t398 - t70;
t157 = t242 * t571 - t251;
t152 = -t341 * pkin(3) - t157;
t119 = -t238 * pkin(4) + t152;
t196 = -t224 * t358 - t357 * t539;
t200 = t229 * t358 + t357 * t541;
t248 = -t288 * t358 + t357 * t365;
t408 = -g(1) * t200 - g(2) * t196 - g(3) * t248;
t9 = t367 * t25 + t604 * t31 + t80 * t482 - t89 * t514;
t639 = t119 * t143 - t408 - t9;
t397 = t365 * t417;
t225 = t370 * t306 + t374 * t397;
t638 = t196 * t366 + t225 * t371;
t637 = t196 * t371 - t225 * t366;
t359 = t364 ^ 2;
t631 = 0.2e1 * t359;
t46 = pkin(11) * t398 + t48;
t72 = t143 * pkin(5) - pkin(11) * t420 + t119;
t18 = t366 * t72 + t371 * t46;
t103 = t571 * t156 - t363 * t164;
t97 = -pkin(3) * t338 - t103;
t75 = pkin(4) * t131 + t97;
t16 = pkin(5) * t71 + pkin(11) * t70 + t75;
t7 = pkin(11) * t620 + t9;
t3 = -qJD(6) * t18 + t371 * t16 - t366 * t7;
t629 = -t18 * t141 - t3;
t241 = -t367 * t303 + t304 * t604;
t572 = qJD(5) * t241 + t660 * t367 + t661 * t604;
t628 = t106 * t273 + t42;
t49 = t367 * t88 + t495;
t627 = -pkin(4) * t514 + t49;
t626 = t141 * t420;
t228 = t306 * t374 - t370 * t397;
t287 = t364 * t535 - t441;
t406 = -g(1) * t228 - g(2) * t225 + g(3) * t287;
t623 = t406 * t357;
t260 = pkin(2) * t365 + t346 - t448;
t523 = pkin(8) * t540 + t344;
t275 = qJ(3) * t540 + t523;
t190 = t363 * t260 + t571 * t275;
t172 = pkin(9) * t365 + t190;
t342 = pkin(2) * t540;
t426 = -pkin(3) * t287 - pkin(9) * t288 + t342;
t204 = -t426 - t603;
t115 = t372 * t172 + t368 * t204;
t428 = t366 * t46 - t371 * t72;
t619 = t18 * t371 + t366 * t428;
t292 = t523 * qJD(2);
t616 = t420 * t428 + t45 * t511;
t614 = t18 * t420 - t366 * t401 + t45 * t510;
t613 = -t119 * t420 + t409 - t472;
t612 = -t120 * t525 - t307 * t40;
t463 = t371 * t284 + t366 * t526;
t405 = t308 * t510 - t463;
t547 = t308 * t366;
t611 = -t122 * t405 + t39 * t547;
t546 = t308 * t371;
t609 = -t141 * t404 + t69 * t546;
t608 = t273 * t420 + t464;
t607 = t307 * t70 - t420 * t525;
t537 = t365 * t372;
t256 = -t288 * t368 - t537;
t518 = qJD(2) * t369;
t483 = t364 * t518;
t282 = t363 * t483 - t364 * t438;
t188 = -qJD(4) * t256 - t282 * t372;
t283 = t364 * t618;
t337 = qJD(2) * t346;
t244 = t364 * t400 + t337;
t245 = -t364 * t517 + (-t373 * t481 - t344) * qJD(2);
t155 = t244 * t571 + t363 * t245;
t453 = pkin(2) * t483;
t202 = -pkin(3) * t283 + pkin(9) * t282 + t453;
t74 = -qJD(4) * t115 - t155 * t368 + t372 * t202;
t56 = -pkin(4) * t283 - pkin(10) * t188 + t74;
t101 = -pkin(10) * t256 + t115;
t114 = -t172 * t368 + t372 * t204;
t257 = -t288 * t372 + t365 * t368;
t93 = pkin(4) * t287 - pkin(10) * t257 + t114;
t584 = t604 * t101 + t367 * t93;
t187 = qJD(4) * t257 - t282 * t368;
t73 = t372 * t155 - t172 * t516 + t368 * t202 + t204 * t515;
t62 = -pkin(10) * t187 + t73;
t14 = -qJD(5) * t584 - t367 * t62 + t56 * t604;
t2 = -t428 * qJD(6) + t366 * t16 + t371 * t7;
t605 = t284 ^ 2;
t601 = pkin(4) * t239;
t600 = pkin(4) * t367;
t531 = t370 * t373;
t533 = t369 * t374;
t299 = -t365 * t531 - t533;
t597 = g(1) * t299;
t596 = g(1) * t370;
t590 = g(3) * t373;
t1 = t2 * t371;
t589 = t372 * pkin(4);
t485 = t571 * pkin(2);
t351 = -t485 - pkin(3);
t321 = t351 - t589;
t233 = t307 * pkin(5) - t308 * pkin(11) + t321;
t139 = t233 * t371 - t241 * t366;
t586 = qJD(6) * t139 + t366 * t647 + t371 * t648;
t140 = t233 * t366 + t241 * t371;
t585 = -qJD(6) * t140 - t366 * t648 + t371 * t647;
t583 = t428 * t141;
t573 = -t284 * pkin(5) + t572;
t568 = t122 * t120;
t563 = t420 * t284;
t562 = t212 * t368;
t559 = t238 * t280;
t558 = t238 * t284;
t557 = t239 * t238;
t556 = t239 * t284;
t553 = t280 * t341;
t551 = t284 * t143;
t550 = t284 * t280;
t549 = t284 * t341;
t548 = t287 * t366;
t545 = t358 * t366;
t544 = t358 * t371;
t543 = t359 * qJD(1) ^ 2;
t542 = t364 * t369;
t534 = t369 * t370;
t529 = t373 * t374;
t527 = -t368 * t131 + t238 * t515;
t360 = t369 ^ 2;
t361 = t373 ^ 2;
t522 = t360 - t361;
t512 = qJD(6) * t141;
t509 = qJD(2) - t341;
t500 = t604 * pkin(4);
t493 = t373 * t543;
t492 = t368 * t541;
t491 = t372 * t541;
t490 = t372 * t539;
t489 = t365 * t529;
t332 = t368 * t539;
t355 = pkin(3) + t589;
t375 = -pkin(10) - pkin(9);
t488 = -t287 * t355 + t288 * t375 + t342;
t480 = pkin(1) * t631;
t477 = t373 * t507;
t473 = g(2) * t539 - g(3) * t365;
t460 = -t224 * t372 - t332;
t154 = t244 * t363 - t571 * t245;
t294 = pkin(2) * t538 - t481;
t459 = -t294 * t370 + t374 * t356;
t457 = t273 * t372;
t454 = t341 + t520;
t452 = t338 + t506;
t451 = pkin(4) * t482;
t449 = t369 * t493;
t446 = t369 * t477;
t327 = pkin(2) * t489;
t444 = -pkin(2) * t534 + t327;
t440 = t122 * t525 - t39 * t307;
t439 = t143 * t526 - t308 * t71;
t436 = pkin(5) * t358 + pkin(11) * t357;
t435 = g(1) * t461 + g(2) * t199;
t434 = g(1) * t225 - g(2) * t228;
t433 = g(1) * t374 + g(2) * t370;
t430 = t356 * qJDD(1);
t353 = pkin(11) + t600;
t429 = -t353 * t69 + t649;
t52 = pkin(11) * t287 + t584;
t189 = t260 * t571 - t363 * t275;
t171 = -t365 * pkin(3) - t189;
t132 = t256 * pkin(4) + t171;
t165 = t256 * t604 + t257 * t367;
t166 = -t367 * t256 + t257 * t604;
t78 = t165 * pkin(5) - t166 * pkin(11) + t132;
t22 = t366 * t78 + t371 * t52;
t21 = -t366 * t52 + t371 * t78;
t134 = t166 * t371 + t548;
t427 = -t294 * t374 - t356 * t370;
t424 = t372 * t212 - t273 * t658;
t109 = pkin(4) * t187 + t154;
t57 = -t367 * t101 + t604 * t93;
t421 = -t224 * t368 + t490;
t418 = t224 * t375 + t225 * t355 + t444;
t13 = -t101 * t514 + t367 * t56 + t93 * t482 + t604 * t62;
t414 = -g(1) * t541 + t473;
t412 = pkin(4) * t492 + t228 * t375 + t229 * t355 + t459;
t411 = -t477 - t505;
t410 = t152 * t273 - t212 * t350;
t403 = t299 * pkin(2);
t402 = t1 + t408;
t399 = t411 * pkin(8);
t396 = pkin(4) * t332 + t224 * t355 - t225 * t375 + t427;
t393 = t120 * t404 - t40 * t546;
t391 = t228 * t355 - t229 * t375 + t403;
t388 = qJD(4) * t273 * t350 - t406 + t97;
t387 = t1 - t3 * t366 + (-t18 * t366 + t371 * t428) * qJD(6);
t386 = -t307 * t377 - t398 * t525;
t385 = -t141 * t405 - t547 * t69;
t384 = g(2) * t490 + t368 * t651;
t378 = t381 + t617;
t354 = -t500 - pkin(5);
t345 = pkin(4) * t537;
t325 = pkin(4) * t491;
t312 = t338 * t365;
t309 = -t342 - t603;
t301 = -pkin(8) * t542 + t346;
t300 = -t365 * t534 + t529;
t298 = -t365 * t533 - t531;
t297 = -t489 + t534;
t291 = -pkin(8) * t483 + t337;
t290 = t523 * qJD(1);
t289 = -pkin(8) * t484 + t336;
t278 = t287 * t371;
t274 = t280 ^ 2;
t261 = -t364 * t430 + t502;
t243 = t247 * pkin(5);
t235 = t364 * t399 + t415;
t234 = -pkin(8) * t447 + t487;
t208 = t229 * t372 + t492;
t207 = -t229 * t368 + t491;
t186 = t199 * pkin(5);
t185 = t461 * pkin(5);
t133 = t166 * t366 - t278;
t125 = t200 * t371 - t228 * t366;
t124 = -t200 * t366 - t228 * t371;
t87 = qJD(5) * t166 + t187 * t604 + t367 * t188;
t86 = t367 * t187 - t188 * t604 + t256 * t482 + t257 * t514;
t82 = t601 + t95;
t64 = qJD(6) * t134 + t283 * t371 - t366 * t86;
t63 = t166 * t511 + t283 * t366 - t287 * t510 + t371 * t86;
t51 = -t287 * pkin(5) - t57;
t50 = t604 * t88 - t577;
t32 = pkin(5) * t87 + pkin(11) * t86 + t109;
t27 = t366 * t95 + t371 * t47;
t26 = -t366 * t47 + t371 * t95;
t24 = t366 * t82 + t371 * t50;
t23 = -t366 * t50 + t371 * t82;
t12 = t283 * pkin(5) - t14;
t11 = -pkin(11) * t283 + t13;
t5 = -qJD(6) * t22 - t11 * t366 + t32 * t371;
t4 = qJD(6) * t21 + t11 * t371 + t32 * t366;
t6 = [0, 0, 0, 0, 0, qJDD(1), -g(2) * t374 + t596, t433, 0, 0 (qJDD(1) * t360 + 0.2e1 * t446) * t359 (t369 * t504 - t507 * t522) * t631 (qJD(2) * t373 * t454 + t369 * t452) * t364 (qJDD(1) * t361 - 0.2e1 * t446) * t359 (t373 * t452 - t454 * t518) * t364, t312, -g(1) * t298 - g(2) * t300 + t235 * t365 - t292 * t341 + t301 * t338 + (-t478 + t504) * t480, -g(1) * t297 - g(2) * t299 - t234 * t365 - t291 * t341 - t338 * t523 + t411 * t480 ((-qJD(2) * t289 + qJDD(1) * t523 + t234 + (-qJD(2) * t301 + t291) * qJD(1)) * t373 + (-qJD(2) * t290 - qJDD(1) * t301 - t235) * t369 - t433) * t364, t234 * t523 + t290 * t291 + t235 * t301 - t289 * t292 + t359 * qJDD(1) * pkin(1) ^ 2 - g(1) * (-pkin(1) * t370 + pkin(8) * t539) - g(2) * (pkin(1) * t374 + pkin(8) * t541) t284 * t282 + t288 * t635, t282 * t280 - t284 * t283 + t287 * t635 - t288 * t381, -t282 * t341 - t288 * t338 - t365 * t635, -t280 * t283 - t287 * t381, t283 * t341 - t287 * t338 + t365 * t381, t312, -g(1) * t224 - g(2) * t229 + t103 * t365 - t154 * t341 + t189 * t338 + t261 * t287 + t280 * t453 - t283 * t296 - t309 * t381, -t104 * t365 - t155 * t341 - t190 * t338 - t261 * t288 - t296 * t282 - t284 * t453 - t309 * t635 + t434, -g(1) * t539 - g(2) * t541 + t103 * t288 - t104 * t287 - t154 * t284 - t155 * t280 + t157 * t282 + t158 * t283 + t189 * t635 + t190 * t381, -g(1) * t427 - g(2) * t459 + t103 * t189 + t104 * t190 - t157 * t154 + t158 * t155 + t261 * t309 + t296 * t453, -t130 * t257 + t188 * t239, t130 * t256 - t131 * t257 - t187 * t239 + t188 * t238, -t130 * t287 + t188 * t273 + t212 * t257 - t239 * t283, t131 * t256 - t187 * t238, -t131 * t287 - t187 * t273 - t212 * t256 - t238 * t283, t212 * t287 - t273 * t283, g(1) * t460 - g(2) * t208 - t105 * t283 + t114 * t212 + t171 * t131 + t152 * t187 - t154 * t238 + t97 * t256 + t74 * t273 + t42 * t287, -g(1) * t421 - g(2) * t207 + t106 * t283 - t115 * t212 - t171 * t130 + t152 * t188 + t154 * t239 + t97 * t257 - t73 * t273 + t287 * t413, -t105 * t188 - t106 * t187 + t114 * t130 - t115 * t131 + t238 * t73 - t239 * t74 + t256 * t413 - t257 * t42 - t434, -t413 * t115 + t106 * t73 + t42 * t114 + t105 * t74 + t97 * t171 + t152 * t154 - g(1) * (pkin(3) * t224 + pkin(9) * t225 + t427) - g(2) * (pkin(3) * t229 - pkin(9) * t228 + t459) -t166 * t70 - t420 * t86, t143 * t86 + t165 * t70 - t166 * t71 - t420 * t87, -t86 * t474 + t166 * t465 - t70 * t287 - t420 * t283 + (t166 * t476 + (-t166 * t618 - t535 * t86) * qJD(1)) * t364, t143 * t87 + t165 * t71, -t87 * t474 - t165 * t465 - t71 * t287 + t143 * t283 + (-t165 * t476 + (t165 * t618 - t535 * t87) * qJD(1)) * t364, t465 * t287 - t474 * t283 + (t287 * t476 + (-t283 * t535 - t287 * t618) * qJD(1)) * t364, g(1) * t196 - g(2) * t200 + t10 * t287 + t109 * t143 + t119 * t87 + t132 * t71 + t14 * t398 + t75 * t165 - t47 * t283 + t377 * t57, t109 * t420 - t119 * t86 - t13 * t398 - t132 * t70 + t75 * t166 + t48 * t283 - t9 * t287 + t378 * t584 + t435, -t10 * t166 - t13 * t143 - t14 * t420 - t165 * t9 + t47 * t86 - t48 * t87 + t57 * t70 - t584 * t71 - t434, -g(1) * t396 - g(2) * t412 + t10 * t57 + t119 * t109 + t48 * t13 + t75 * t132 + t47 * t14 + t584 * t9, -t122 * t63 - t134 * t39, t120 * t63 - t122 * t64 + t133 * t39 - t134 * t40, t122 * t87 + t134 * t69 - t141 * t63 - t165 * t39, t120 * t64 + t133 * t40, -t120 * t87 - t133 * t69 - t141 * t64 - t165 * t40, t141 * t87 + t165 * t69, g(1) * t637 - g(2) * t125 + t12 * t120 + t8 * t133 + t5 * t141 + t3 * t165 + t21 * t69 + t51 * t40 - t428 * t87 + t45 * t64, -g(1) * t638 - g(2) * t124 + t12 * t122 + t8 * t134 - t4 * t141 - t2 * t165 - t18 * t87 - t22 * t69 - t51 * t39 - t45 * t63, -t120 * t4 - t122 * t5 - t133 * t2 - t134 * t3 - t18 * t64 + t21 * t39 - t22 * t40 - t428 * t63 - t435, t2 * t22 + t18 * t4 + t3 * t21 - t428 * t5 + t8 * t51 + t45 * t12 - g(1) * (-pkin(5) * t196 + pkin(11) * t461 + t396) - g(2) * (pkin(5) * t200 + pkin(11) * t199 + t412); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t449, t522 * t543 (qJD(1) * t373 * t509 + t505) * t364, t449 (-t509 * t519 + t504) * t364, t338, -t597 + g(2) * t297 + t290 * t341 + t335 + (-t479 + t543) * t369 * pkin(1) + (t399 - t590) * t364, pkin(1) * t493 + g(1) * t300 - g(2) * t298 + t289 * t341 + (pkin(8) * t507 + g(3)) * t542 - t487, 0, 0, -t550, -t274 + t605, -t635 + t553, t550, t381 - t549, t338, t173 * t341 + t296 * t284 + (-t280 * t484 + t338 * t571) * pkin(2) + t406 + t103, t174 * t341 + t280 * t296 + (t284 * t484 - t338 * t363) * pkin(2) + t651 - t104, t381 * t602 + t635 * t485 + (-t158 + t173) * t284 + (-t157 + t174) * t280, -g(2) * t327 + t157 * t173 - t158 * t174 + (t104 * t363 + t103 * t571 - t597 + g(2) * t534 + (-t296 * t519 - t590) * t364) * pkin(2), -t130 * t368 + t239 * t457 (-t130 + t559) * t372 - t644 + t527, t273 * t457 + t556 + t562, -t131 * t372 - t238 * t554, t424 + t558, t273 * t284, t105 * t284 - t112 * t273 + t131 * t351 + t173 * t238 + t368 * t410 - t372 * t388, -t106 * t284 + t113 * t273 - t130 * t351 - t173 * t239 + t368 * t388 + t372 * t410, t112 * t239 - t113 * t238 + (-t105 * t280 - t131 * t350 - t413 + (t239 * t350 - t105) * qJD(4)) * t372 + (-t106 * t280 - t130 * t350 - t42 + (-t238 * t350 - t106) * qJD(4)) * t368 - t651, t97 * t351 - t106 * t113 - t105 * t112 - t152 * t173 - g(1) * (pkin(3) * t228 + pkin(9) * t229 + t403) - g(2) * (pkin(3) * t225 - pkin(9) * t224 + t444) - g(3) * t426 + (-t42 * t368 - t413 * t372 + (-t105 * t372 - t106 * t368) * qJD(4)) * t350, -t308 * t70 - t420 * t526, t439 + t607, t563 + t657, t143 * t525 + t307 * t71, t386 - t551, t398 * t284, t119 * t525 + t143 * t621 + t47 * t284 + t75 * t307 + t321 * t71 + t358 * t406 + t377 * t419 - t398 * t572, -t119 * t526 + t241 * t378 - t48 * t284 + t75 * t308 - t321 * t70 - t398 * t574 + t420 * t621 - t623, -t10 * t308 - t143 * t574 - t241 * t71 - t307 * t9 + t419 * t70 + t420 * t572 + t47 * t526 - t48 * t525 - t651, -g(1) * t391 - g(2) * t418 - g(3) * t488 + t10 * t419 + t119 * t621 + t9 * t241 + t75 * t321 - t572 * t47 + t574 * t48, -t122 * t404 - t39 * t546, t393 + t611, t440 + t609, t120 * t405 + t40 * t547, t385 + t612, t141 * t525 + t307 * t69, t139 * t69 + t3 * t307 - t419 * t40 + t8 * t547 - g(1) * (t228 * t544 + t229 * t366) - g(2) * (-t224 * t366 + t225 * t544) - g(3) * (-t287 * t544 - t288 * t366) - t525 * t428 + t585 * t141 + t573 * t120 + t405 * t45, -t140 * t69 - t2 * t307 + t419 * t39 + t8 * t546 - g(1) * (-t228 * t545 + t229 * t371) - g(2) * (-t224 * t371 - t225 * t545) - g(3) * (t287 * t545 - t288 * t371) - t525 * t18 - t586 * t141 + t573 * t122 - t404 * t45, t139 * t39 - t140 * t40 + t463 * t18 - t462 * t428 - t585 * t122 - t586 * t120 + t623 + (-qJD(6) * t619 - t2 * t366 - t3 * t371) * t308, t2 * t140 + t3 * t139 - t8 * t419 - g(1) * (t228 * t436 + t391) - g(2) * (t225 * t436 + t418) - g(3) * (-t287 * t436 + t488) + t573 * t45 + t586 * t18 - t585 * t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t381 - t549, -t635 - t553, -t274 - t605, -t157 * t284 + t158 * t280 + (-t430 - t596) * t364 + t473 + t502, 0, 0, 0, 0, 0, 0, t424 - t558, -t273 ^ 2 * t372 + t556 - t562 (t130 + t559) * t372 + t644 + t527, t152 * t284 + t368 * t642 + t628 * t372 + t414, 0, 0, 0, 0, 0, 0, t386 + t551, t563 - t657, t439 - t607, -t10 * t307 + t119 * t284 + t308 * t9 - t47 * t525 - t48 * t526 + t414, 0, 0, 0, 0, 0, 0, t385 - t612, t440 - t609, t393 - t611, -t18 * t462 + t307 * t8 + t308 * t387 - t428 * t463 + t45 * t525 + t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t557, -t238 ^ 2 + t239 ^ 2, -t238 * t273 - t130, t557, t239 * t273 + t284 * t515 - t341 * t516 - t643, t212, -g(1) * t207 + g(2) * t421 + g(3) * t256 - t152 * t239 + t628, g(1) * t208 + g(2) * t460 + g(3) * t257 - t152 * t238 - t642, 0, 0, t564, t641, t640, -t564, t608, t377, -t143 * t601 + t377 * t500 + t398 * t627 - t482 * t89 - t514 * t80 + t613, -t420 * t601 + t378 * t600 + (-t451 + t50) * t398 + t639, t48 * t420 + t50 * t143 - t47 * t143 - t49 * t420 + (t604 * t70 - t367 * t71 + (-t143 * t604 + t367 * t420) * qJD(5)) * pkin(4), -g(1) * t325 - g(3) * t345 + t47 * t49 - t48 * t50 + (t10 * t604 - t119 * t239 + t9 * t367 + (-t47 * t367 + t48 * t604) * qJD(5) + t384) * pkin(4), t655, t650, t654, t656, t653, -t626, -t23 * t141 + t354 * t40 - t627 * t120 + (-t141 * t451 + t429) * t366 + (-t353 * t512 + t401) * t371 + t616, -t354 * t39 + t429 * t371 - t627 * t122 + (t353 * t511 - t371 * t451 + t24) * t141 + t614, t24 * t120 + t23 * t122 + (-t120 * t451 + t143 * t428 - t353 * t40 + (t122 * t353 + t428) * qJD(6)) * t371 + (t122 * t451 - t143 * t18 - t353 * t39 - t3 + (t120 * t353 - t18) * qJD(6)) * t366 + t402, t8 * t354 - t18 * t24 + t428 * t23 - t45 * t49 - g(1) * (pkin(11) * t200 - t186 + t325) - g(2) * (pkin(11) * t196 + t185) - g(3) * (pkin(11) * t248 + t243 + t345) + t387 * t353 + ((t45 * t367 + t604 * t619) * qJD(5) + t384) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t564, t641, t640, -t564, t608, t377, t273 * t48 + t613, t398 * t47 + t639, 0, 0, t655, t650, t654, t656, t653, -t626, -pkin(5) * t40 - t120 * t48 - t141 * t26 + (-pkin(11) * t69 + t649) * t366 + (-pkin(11) * t512 + t401) * t371 + t616, t45 * t645 + pkin(5) * t39 - t122 * t48 + t141 * t27 + (t141 * t511 - t67) * pkin(11) + t614, t120 * t27 + t122 * t26 + (t583 + (-t40 + t513) * pkin(11)) * t371 + ((qJD(6) * t120 - t39) * pkin(11) + t629) * t366 + t402, -t8 * pkin(5) + g(1) * t186 - g(2) * t185 - g(3) * t243 + t428 * t26 - t18 * t27 - t45 * t48 + (t387 + t408) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t568, -t120 ^ 2 + t122 ^ 2, t120 * t141 - t39, -t568, t122 * t141 - t40, t69, -t45 * t122 - g(1) * t124 + g(2) * t638 - g(3) * (-t248 * t366 + t278) - t629, -t583 + t45 * t120 + g(1) * t125 + g(2) * t637 - g(3) * (-t248 * t371 - t548) - t2, 0, 0;];
tau_reg  = t6;
