% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPRP2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:33:04
% EndTime: 2019-05-07 07:33:36
% DurationCPUTime: 17.05s
% Computational Cost: add. (60875->591), mult. (137854->794), div. (0->0), fcn. (103158->10), ass. (0->368)
t382 = sin(qJ(3));
t386 = cos(qJ(3));
t387 = cos(qJ(2));
t383 = sin(qJ(2));
t448 = qJD(1) * t383;
t349 = qJD(1) * t386 * t387 - t382 * t448;
t350 = (t382 * t387 + t383 * t386) * qJD(1);
t379 = sin(pkin(10));
t380 = cos(pkin(10));
t328 = -t380 * t349 + t350 * t379;
t324 = qJD(5) + t328;
t497 = t324 ^ 2;
t330 = t379 * t349 + t380 * t350;
t376 = qJD(2) + qJD(3);
t381 = sin(qJ(5));
t385 = cos(qJ(5));
t308 = t330 * t381 - t385 * t376;
t498 = t308 ^ 2;
t274 = t498 - t497;
t370 = t383 * qJDD(1);
t444 = qJD(1) * qJD(2);
t435 = t387 * t444;
t358 = t370 + t435;
t371 = t387 * qJDD(1);
t436 = t383 * t444;
t359 = t371 - t436;
t429 = t382 * t358 - t386 * t359;
t311 = -qJD(3) * t350 - t429;
t312 = t349 * qJD(3) + t386 * t358 + t382 * t359;
t431 = -t380 * t311 + t312 * t379;
t260 = qJDD(5) + t431;
t310 = t330 * t385 + t376 * t381;
t468 = t310 * t308;
t515 = t260 + t468;
t479 = t515 * t381;
t165 = -t274 * t385 + t479;
t278 = t324 * t310;
t262 = t379 * t311 + t380 * t312;
t443 = qJDD(2) + qJDD(3);
t432 = -t381 * t262 + t385 * t443;
t403 = qJD(5) * t310 - t432;
t194 = -t278 + t403;
t114 = t165 * t379 - t194 * t380;
t118 = t165 * t380 + t194 * t379;
t575 = t383 * (t114 * t382 - t118 * t386) - t387 * (t114 * t386 + t118 * t382);
t399 = -t385 * t262 - t381 * t443;
t394 = -t308 * qJD(5) - t399;
t469 = t308 * t324;
t508 = -t469 + t394;
t482 = t508 * t381;
t514 = t278 + t403;
t126 = -t514 * t385 - t482;
t307 = t310 ^ 2;
t511 = t307 - t498;
t89 = t126 * t379 - t380 * t511;
t91 = t126 * t380 + t379 * t511;
t572 = t383 * (t382 * t89 - t386 * t91) - t387 * (t382 * t91 + t386 * t89);
t512 = -t307 - t497;
t148 = -t385 * t512 + t479;
t569 = pkin(1) * t148;
t568 = pkin(2) * t148;
t516 = t260 - t468;
t477 = t516 * t381;
t506 = -t497 - t498;
t519 = t385 * t506 - t477;
t537 = t379 * t514 + t380 * t519;
t538 = t379 * t519 - t380 * t514;
t550 = t382 * t537 + t386 * t538;
t567 = pkin(2) * t550;
t566 = pkin(3) * t148;
t565 = pkin(4) * t148;
t564 = pkin(8) * t550;
t563 = pkin(9) * t148;
t478 = t515 * t385;
t150 = t381 * t512 + t478;
t562 = pkin(9) * t150;
t561 = t150 * t379;
t560 = t150 * t380;
t476 = t516 * t385;
t520 = t381 * t506 + t476;
t551 = -t382 * t538 + t386 * t537;
t559 = -pkin(2) * t520 + pkin(8) * t551;
t558 = pkin(7) * (-t383 * t550 + t387 * t551) - pkin(1) * t520;
t507 = t469 + t394;
t275 = -t307 + t497;
t539 = -t275 * t381 + t476;
t552 = t379 * t507 + t380 * t539;
t553 = t379 * t539 - t380 * t507;
t557 = t383 * (-t382 * t553 + t386 * t552) + t387 * (t382 * t552 + t386 * t553);
t556 = qJ(4) * t538;
t162 = t274 * t381 + t478;
t555 = pkin(3) * t538 + pkin(9) * t519;
t554 = -pkin(3) * t520 + qJ(4) * t537;
t546 = pkin(4) * t520;
t544 = pkin(9) * t520;
t543 = qJ(6) * t508;
t540 = t385 * t275 + t477;
t378 = t387 ^ 2;
t389 = qJD(1) ^ 2;
t384 = sin(qJ(1));
t495 = cos(qJ(1));
t434 = t384 * g(1) - t495 * g(2);
t406 = qJDD(1) * pkin(1) + t434;
t407 = qJD(2) * pkin(2) - pkin(8) * t448;
t314 = t359 * pkin(2) - t407 * t448 + t406 + (pkin(8) * t378 + pkin(7)) * t389;
t481 = t508 * t385;
t128 = -t514 * t381 + t481;
t510 = t307 + t498;
t536 = pkin(4) * t510;
t535 = -qJ(6) * t381 - pkin(4);
t533 = t379 * t510;
t290 = t330 * t328;
t513 = -t290 + t443;
t531 = t379 * t513;
t528 = t380 * t510;
t526 = t380 * t513;
t336 = t349 * t350;
t509 = t336 + t443;
t523 = t382 * t509;
t521 = t386 * t509;
t347 = t349 ^ 2;
t415 = pkin(3) * t376 - qJ(4) * t350;
t224 = t311 * pkin(3) + t347 * qJ(4) - t350 * t415 - qJDD(4) + t314;
t462 = t330 * t376;
t234 = t431 + t462;
t465 = t324 * t381;
t270 = t310 * t465;
t464 = t324 * t385;
t439 = t308 * t464;
t417 = t270 - t439;
t500 = t260 * t379 + t380 * t417;
t503 = -t380 * t260 + t379 * t417;
t518 = t383 * (-t382 * t503 + t386 * t500) + t387 * (t382 * t500 + t386 * t503);
t405 = t381 * t403 + t439;
t441 = t379 * t468;
t501 = t380 * t405 - t441;
t440 = t380 * t468;
t502 = t379 * t405 + t440;
t517 = t383 * (-t382 * t502 + t386 * t501) + t387 * (t382 * t501 + t386 * t502);
t452 = t383 * t389;
t408 = g(1) * t495 + t384 * g(2);
t489 = qJDD(1) * pkin(7);
t352 = -t389 * pkin(1) - t408 + t489;
t454 = t383 * t352;
t299 = qJDD(2) * pkin(2) - t358 * pkin(8) - t454 + (pkin(2) * t452 + pkin(8) * t444 - g(3)) * t387;
t340 = -t383 * g(3) + t387 * t352;
t373 = t378 * t389;
t300 = -pkin(2) * t373 + t359 * pkin(8) - qJD(2) * t407 + t340;
t256 = t382 * t299 + t386 * t300;
t207 = -t347 * pkin(3) + t311 * qJ(4) - t376 * t415 + t256;
t459 = t349 * t376;
t295 = -t312 + t459;
t412 = t386 * t299 - t382 * t300;
t390 = pkin(3) * t509 + qJ(4) * t295 + t412;
t133 = -0.2e1 * qJD(4) * t328 + t380 * t207 + t379 * t390;
t285 = pkin(4) * t328 - pkin(9) * t330;
t496 = t376 ^ 2;
t103 = -pkin(4) * t496 + pkin(9) * t443 - t328 * t285 + t133;
t463 = t328 * t376;
t416 = t262 - t463;
t136 = pkin(4) * t234 - t416 * pkin(9) - t224;
t74 = t103 * t381 - t385 * t136;
t75 = t385 * t103 + t381 * t136;
t36 = t381 * t74 + t385 * t75;
t505 = pkin(5) * t403 - t543;
t263 = pkin(5) * t308 - qJ(6) * t310;
t425 = -t260 * qJ(6) + t308 * t263 - t75;
t504 = -pkin(5) * (t512 + t497) + qJ(6) * t515 - t425;
t188 = t385 * t394 - t270;
t419 = t380 * t188 + t441;
t420 = t379 * t188 - t440;
t499 = t383 * (-t382 * t420 + t386 * t419) + t387 * (t382 * t419 + t386 * t420);
t325 = t328 ^ 2;
t326 = t330 ^ 2;
t348 = t350 ^ 2;
t494 = pkin(4) * t379;
t433 = t379 * t207 - t380 * t390;
t446 = qJD(4) * t330;
t132 = t433 + 0.2e1 * t446;
t78 = -t132 * t380 + t133 * t379;
t493 = t382 * t78;
t492 = t386 * t78;
t490 = qJ(6) * t385;
t484 = t507 * t381;
t483 = t507 * t385;
t202 = t256 * t382 + t386 * t412;
t480 = t202 * t383;
t475 = t224 * t379;
t474 = t224 * t380;
t283 = t290 + t443;
t471 = t283 * t379;
t470 = t283 * t380;
t467 = t314 * t382;
t466 = t314 * t386;
t333 = -t336 + t443;
t461 = t333 * t382;
t460 = t333 * t386;
t458 = t376 * t379;
t457 = t376 * t380;
t456 = t376 * t382;
t455 = t376 * t386;
t410 = -t443 * pkin(4) - pkin(9) * t496 + t433;
t102 = (0.2e1 * qJD(4) + t285) * t330 + t410;
t98 = t381 * t102;
t365 = t387 * t452;
t453 = t383 * (qJDD(2) + t365);
t99 = t385 * t102;
t451 = t387 * (qJDD(2) - t365);
t445 = qJD(6) * t324;
t31 = -t102 * t380 + t36 * t379;
t442 = pkin(3) * t31 - pkin(4) * t102 + pkin(9) * t36;
t438 = -pkin(4) * t380 - pkin(3);
t79 = t132 * t379 + t380 * t133;
t203 = t386 * t256 - t382 * t412;
t339 = t387 * g(3) + t454;
t430 = t383 * t339 + t387 * t340;
t428 = -pkin(4) * t514 + t555 - t99;
t201 = (qJD(5) + t324) * t308 + t399;
t108 = t201 * t380 - t561;
t427 = pkin(3) * t108 + pkin(4) * t201 - t562 + t98;
t315 = -t326 - t496;
t245 = t315 * t380 - t471;
t426 = pkin(3) * t245 - t133;
t125 = -t194 * t385 + t484;
t318 = 0.2e1 * t445;
t413 = t318 - t425;
t44 = (t510 - t497) * pkin(5) + t413;
t55 = -t260 * pkin(5) - qJ(6) * t497 + t263 * t310 + qJDD(6) + t74;
t46 = qJ(6) * t510 + t55;
t84 = t125 * t379 + t528;
t423 = pkin(3) * t84 + pkin(9) * t125 + t381 * t46 + t385 * t44 + t536;
t196 = (-qJD(5) + t324) * t310 + t432;
t127 = t196 * t385 + t484;
t85 = t127 * t379 + t528;
t422 = pkin(3) * t85 + pkin(9) * t127 + t36 + t536;
t53 = -pkin(5) * t497 + t413;
t421 = -pkin(5) * t55 + qJ(6) * t53;
t418 = t308 * t465 - t385 * t403;
t414 = -pkin(5) * t507 - qJ(6) * t194;
t35 = t381 * t75 - t385 * t74;
t281 = -t496 - t325;
t218 = t281 * t379 + t526;
t322 = -0.2e1 * t446;
t411 = pkin(3) * t218 + t322 - t433;
t409 = t312 + t459;
t404 = -t431 + t462;
t401 = (-t308 * t381 - t310 * t385) * t324;
t393 = 0.2e1 * qJD(6) * t310 - t330 * t285 + t322 - t410 - t505;
t49 = -pkin(5) * t278 + t393 + t543;
t94 = t380 * t508 + t561;
t400 = pkin(3) * t94 + pkin(4) * t508 + pkin(5) * t481 + t381 * t49 + t562;
t50 = (-t514 - t278) * pkin(5) + t393;
t398 = t385 * t50 + t514 * t535 + t555;
t397 = (-qJD(3) + t376) * t350 - t429;
t29 = t381 * t55 + t385 * t53;
t70 = (pkin(5) * t324 - 0.2e1 * qJD(6)) * t310 + t102 + t505;
t19 = t29 * t379 - t380 * t70;
t395 = pkin(3) * t19 + pkin(9) * t29 + (-pkin(5) * t385 + t535) * t70;
t392 = pkin(5) * t516 + qJ(6) * t506 - t55;
t388 = qJD(2) ^ 2;
t377 = t383 ^ 2;
t372 = t377 * t389;
t360 = t371 - 0.2e1 * t436;
t357 = t370 + 0.2e1 * t435;
t351 = t389 * pkin(7) + t406;
t342 = -t348 + t496;
t341 = t347 - t496;
t338 = -t348 - t496;
t335 = t348 - t347;
t331 = -t496 - t347;
t317 = -t326 + t496;
t316 = t325 - t496;
t313 = -t347 - t348;
t298 = -t338 * t382 - t460;
t297 = t338 * t386 - t461;
t291 = (qJD(3) + t376) * t350 + t429;
t289 = t331 * t386 - t523;
t288 = t331 * t382 + t521;
t287 = -t325 + t326;
t272 = (-t328 * t380 + t330 * t379) * t376;
t271 = (-t328 * t379 - t330 * t380) * t376;
t254 = -t325 - t326;
t250 = t316 * t380 - t471;
t249 = -t317 * t379 + t526;
t248 = t316 * t379 + t470;
t247 = t317 * t380 + t531;
t246 = -t315 * t379 - t470;
t241 = -t295 * t382 + t386 * t397;
t240 = t295 * t386 + t382 * t397;
t238 = -t262 - t463;
t228 = t262 * t380 - t330 * t458;
t227 = t262 * t379 + t330 * t457;
t226 = t328 * t457 + t379 * t431;
t225 = t328 * t458 - t380 * t431;
t219 = t281 * t380 - t531;
t184 = t310 * t464 + t381 * t394;
t180 = -t245 * t382 + t246 * t386;
t179 = t245 * t386 + t246 * t382;
t178 = -qJ(4) * t245 - t474;
t173 = -t238 * t379 + t380 * t404;
t172 = -t234 * t380 - t379 * t416;
t171 = t238 * t380 + t379 * t404;
t170 = -t234 * t379 + t380 * t416;
t169 = pkin(3) * t171;
t160 = -qJ(4) * t218 - t475;
t153 = -t218 * t382 + t219 * t386;
t152 = t218 * t386 + t219 * t382;
t137 = -pkin(3) * t416 + qJ(4) * t246 - t475;
t131 = -pkin(3) * t234 + qJ(4) * t219 + t474;
t123 = t196 * t381 - t483;
t122 = -t194 * t381 - t483;
t110 = -t201 * t379 - t560;
t105 = -t171 * t382 + t173 * t386;
t104 = t171 * t386 + t173 * t382;
t96 = -t379 * t508 + t560;
t87 = t127 * t380 - t533;
t86 = t125 * t380 - t533;
t81 = t99 + t563;
t80 = t98 - t544;
t77 = pkin(3) * t78;
t76 = -pkin(4) * t122 - t414;
t71 = pkin(3) * t224 + qJ(4) * t79;
t67 = -t108 * t382 + t110 * t386;
t65 = t108 * t386 + t110 * t382;
t63 = -t382 * t94 + t386 * t96;
t61 = t382 * t96 + t386 * t94;
t60 = -qJ(4) * t171 - t78;
t59 = -t382 * t85 + t386 * t87;
t58 = -t382 * t84 + t386 * t86;
t57 = t382 * t87 + t386 * t85;
t56 = t382 * t86 + t386 * t84;
t54 = -pkin(3) * t254 + qJ(4) * t173 + t79;
t52 = t75 + t565;
t51 = t74 - t546;
t42 = t386 * t79 - t493;
t41 = t382 * t79 + t492;
t40 = -t381 * t50 - t490 * t514 - t544;
t39 = -pkin(5) * t482 + t385 * t49 - t563;
t38 = -t392 - t546;
t37 = -0.2e1 * t445 - t504 - t565;
t33 = -pkin(9) * t123 - t35;
t32 = t102 * t379 + t36 * t380;
t28 = t381 * t53 - t385 * t55;
t26 = -qJ(4) * t108 - t379 * t52 + t380 * t81;
t25 = -t379 * t51 + t380 * t80 - t556;
t24 = qJ(4) * t110 + t379 * t81 + t380 * t52 + t566;
t23 = t379 * t80 + t380 * t51 + t554;
t22 = -pkin(9) * t122 - t381 * t44 + t385 * t46;
t21 = -qJ(4) * t85 + t123 * t494 + t33 * t380;
t20 = t29 * t380 + t379 * t70;
t17 = qJ(4) * t87 + t123 * t438 + t379 * t33;
t16 = -t379 * t38 + t380 * t40 - t556;
t15 = -qJ(4) * t94 - t37 * t379 + t380 * t39;
t14 = t379 * t40 + t38 * t380 + t554;
t13 = qJ(4) * t96 + t37 * t380 + t379 * t39 - t566;
t12 = -pkin(9) * t28 + (pkin(5) * t381 - t490) * t70;
t11 = -qJ(4) * t84 + t22 * t380 - t379 * t76;
t10 = -t31 * t382 + t32 * t386;
t9 = t31 * t386 + t32 * t382;
t8 = -pkin(4) * t28 - t421;
t7 = -pkin(3) * t122 + qJ(4) * t86 + t22 * t379 + t380 * t76;
t6 = -qJ(4) * t31 + (-pkin(9) * t380 + t494) * t35;
t5 = -t19 * t382 + t20 * t386;
t4 = t19 * t386 + t20 * t382;
t3 = qJ(4) * t32 + (-pkin(9) * t379 + t438) * t35;
t2 = -qJ(4) * t19 + t12 * t380 - t379 * t8;
t1 = -pkin(3) * t28 + qJ(4) * t20 + t12 * t379 + t380 * t8;
t18 = [0, 0, 0, 0, 0, qJDD(1), t434, t408, 0, 0, (t358 + t435) * t383, t357 * t387 + t360 * t383, t453 + t387 * (-t372 + t388), (t359 - t436) * t387, t383 * (t373 - t388) + t451, 0, t387 * t351 + pkin(1) * t360 + pkin(7) * (t387 * (-t373 - t388) - t453), -t383 * t351 - pkin(1) * t357 + pkin(7) * (-t451 - t383 * (-t372 - t388)), pkin(1) * (t372 + t373) + (t377 + t378) * t489 + t430, pkin(1) * t351 + pkin(7) * t430, t383 * (t312 * t386 - t350 * t456) + t387 * (t312 * t382 + t350 * t455), t383 * (-t291 * t386 - t382 * t409) + t387 * (-t291 * t382 + t386 * t409), t383 * (-t342 * t382 + t521) + t387 * (t342 * t386 + t523), t383 * (-t311 * t382 - t349 * t455) + t387 * (t311 * t386 - t349 * t456), t383 * (t341 * t386 - t461) + t387 * (t341 * t382 + t460), (t383 * (t349 * t386 + t350 * t382) + t387 * (t349 * t382 - t350 * t386)) * t376, t383 * (-pkin(8) * t288 - t467) + t387 * (-pkin(2) * t291 + pkin(8) * t289 + t466) - pkin(1) * t291 + pkin(7) * (-t288 * t383 + t289 * t387), t383 * (-pkin(8) * t297 - t466) + t387 * (-pkin(2) * t409 + pkin(8) * t298 - t467) - pkin(1) * t409 + pkin(7) * (-t297 * t383 + t298 * t387), t383 * (-pkin(8) * t240 - t202) + t387 * (-pkin(2) * t313 + pkin(8) * t241 + t203) - pkin(1) * t313 + pkin(7) * (-t240 * t383 + t241 * t387), -pkin(8) * t480 + t387 * (pkin(2) * t314 + pkin(8) * t203) + pkin(1) * t314 + pkin(7) * (t203 * t387 - t480), t383 * (-t227 * t382 + t228 * t386) + t387 * (t227 * t386 + t228 * t382), t383 * (-t170 * t382 + t172 * t386) + t387 * (t170 * t386 + t172 * t382), t383 * (-t247 * t382 + t249 * t386) + t387 * (t247 * t386 + t249 * t382), t383 * (-t225 * t382 + t226 * t386) + t387 * (t225 * t386 + t226 * t382), t383 * (-t248 * t382 + t250 * t386) + t387 * (t248 * t386 + t250 * t382), t383 * (-t271 * t382 + t272 * t386) + t387 * (t271 * t386 + t272 * t382), t383 * (-pkin(8) * t152 - t131 * t382 + t160 * t386) + t387 * (-pkin(2) * t234 + pkin(8) * t153 + t131 * t386 + t160 * t382) - pkin(1) * t234 + pkin(7) * (-t152 * t383 + t153 * t387), t383 * (-pkin(8) * t179 - t137 * t382 + t178 * t386) + t387 * (-pkin(2) * t416 + pkin(8) * t180 + t137 * t386 + t178 * t382) - pkin(1) * t416 + pkin(7) * (-t179 * t383 + t180 * t387), t383 * (-pkin(8) * t104 - t382 * t54 + t386 * t60) + t387 * (-pkin(2) * t254 + pkin(8) * t105 + t382 * t60 + t386 * t54) - pkin(1) * t254 + pkin(7) * (-t104 * t383 + t105 * t387), t383 * (-pkin(8) * t41 - qJ(4) * t492 - t382 * t71) + t387 * (pkin(2) * t224 + pkin(8) * t42 - qJ(4) * t493 + t386 * t71) + pkin(1) * t224 + pkin(7) * (-t383 * t41 + t387 * t42), t499, -t572, t557, t517, t575, t518, t383 * (-t23 * t382 + t25 * t386 - t564) + t387 * (t23 * t386 + t25 * t382 + t559) + t558, t383 * (-pkin(8) * t65 - t24 * t382 + t26 * t386) + t387 * (pkin(8) * t67 + t24 * t386 + t26 * t382 + t568) + t569 + pkin(7) * (-t383 * t65 + t387 * t67), t383 * (-pkin(8) * t57 - t17 * t382 + t21 * t386) + t387 * (-pkin(2) * t123 + pkin(8) * t59 + t17 * t386 + t21 * t382) - pkin(1) * t123 + pkin(7) * (-t383 * t57 + t387 * t59), t383 * (-pkin(8) * t9 - t3 * t382 + t386 * t6) + t387 * (-pkin(2) * t35 + pkin(8) * t10 + t3 * t386 + t382 * t6) - pkin(1) * t35 + pkin(7) * (t10 * t387 - t383 * t9), t499, t557, t572, t518, -t575, t517, t383 * (-t14 * t382 + t16 * t386 - t564) + t387 * (t14 * t386 + t16 * t382 + t559) + t558, t383 * (-pkin(8) * t56 + t11 * t386 - t382 * t7) + t387 * (-pkin(2) * t122 + pkin(8) * t58 + t11 * t382 + t386 * t7) - pkin(1) * t122 + pkin(7) * (-t383 * t56 + t387 * t58), t383 * (-pkin(8) * t61 - t13 * t382 + t15 * t386) + t387 * (pkin(8) * t63 + t13 * t386 + t15 * t382 - t568) - t569 + pkin(7) * (-t383 * t61 + t387 * t63), t383 * (-pkin(8) * t4 - t1 * t382 + t2 * t386) + t387 * (-pkin(2) * t28 + pkin(8) * t5 + t1 * t386 + t2 * t382) - pkin(1) * t28 + pkin(7) * (-t383 * t4 + t387 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t372 - t373, t370, t365, t371, qJDD(2), -t339, -t340, 0, 0, -t336, t335, -t295, t336, t397, t443, pkin(2) * t288 + t412, pkin(2) * t297 - t256, pkin(2) * t240, pkin(2) * t202, t290, t287, -t238, -t290, t404, t443, pkin(2) * t152 + t411, pkin(2) * t179 + t426, pkin(2) * t104 + t169, pkin(2) * t41 + t77, t184, t128, t540, t418, t162, t401, t428 + t567, pkin(2) * t65 + t427, pkin(2) * t57 + t422, pkin(2) * t9 + t442, t184, t540, -t128, t401, -t162, t418, t398 + t567, pkin(2) * t56 + t423, pkin(2) * t61 + t400, pkin(2) * t4 + t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t336, t335, -t295, t336, t397, t443, t412, -t256, 0, 0, t290, t287, -t238, -t290, t404, t443, t411, t426, t169, t77, t184, t128, t540, t418, t162, t401, t428, t427, t422, t442, t184, t540, -t128, t401, -t162, t418, t398, t423, t400, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234, t416, t254, -t224, 0, 0, 0, 0, 0, 0, t520, -t148, t123, t35, 0, 0, 0, 0, 0, 0, t520, t122, t148, t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t468, t511, t507, -t468, -t194, t260, -t74, -t75, 0, 0, t468, t507, -t511, t260, t194, -t468, t392, t414, t318 + t504, t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t516, t507, t512, t55;];
tauJ_reg  = t18;
