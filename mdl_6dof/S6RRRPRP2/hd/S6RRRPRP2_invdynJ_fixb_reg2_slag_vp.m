% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:37:25
% EndTime: 2019-03-09 16:37:43
% DurationCPUTime: 9.45s
% Computational Cost: add. (19016->715), mult. (45503->840), div. (0->0), fcn. (34143->14), ass. (0->364)
t287 = sin(qJ(3));
t288 = sin(qJ(2));
t406 = qJD(1) * t288;
t291 = cos(qJ(3));
t292 = cos(qJ(2));
t417 = t291 * t292;
t195 = qJD(1) * t417 - t287 * t406;
t420 = t287 * t292;
t214 = t288 * t291 + t420;
t196 = t214 * qJD(1);
t285 = sin(pkin(10));
t457 = cos(pkin(10));
t151 = -t195 * t457 + t196 * t285;
t505 = qJD(5) + t151;
t373 = t505 ^ 2;
t286 = sin(qJ(5));
t290 = cos(qJ(5));
t397 = qJD(2) + qJD(3);
t488 = pkin(8) + pkin(7);
t240 = t488 * t292;
t221 = qJD(1) * t240;
t197 = t287 * t221;
t239 = t488 * t288;
t219 = qJD(1) * t239;
t469 = qJD(2) * pkin(2);
t205 = -t219 + t469;
t156 = t205 * t291 - t197;
t190 = t196 * qJ(4);
t135 = t156 - t190;
t127 = pkin(3) * t397 + t135;
t201 = t291 * t221;
t157 = t205 * t287 + t201;
t455 = qJ(4) * t195;
t136 = t157 + t455;
t380 = t457 * t136;
t87 = t127 * t285 + t380;
t85 = pkin(9) * t397 + t87;
t279 = t292 * pkin(2);
t272 = t279 + pkin(1);
t238 = qJD(1) * t272;
t169 = -pkin(3) * t195 + qJD(4) - t238;
t327 = t195 * t285 + t196 * t457;
t99 = pkin(4) * t151 - pkin(9) * t327 + t169;
t48 = t286 * t99 + t290 * t85;
t37 = qJ(6) * t505 + t48;
t515 = t37 * t505;
t47 = -t286 * t85 + t290 * t99;
t514 = t47 * t505;
t468 = t505 * t48;
t138 = t286 * t327 - t290 * t397;
t513 = t138 * t505;
t213 = t287 * t288 - t417;
t175 = pkin(3) * t213 - t272;
t402 = qJD(5) * t290;
t438 = t151 * t290;
t506 = t402 + t438;
t403 = qJD(5) * t286;
t439 = t151 * t286;
t512 = t403 + t439;
t511 = qJDD(1) * t272;
t510 = t151 * t327;
t284 = qJ(2) + qJ(3);
t276 = pkin(10) + t284;
t262 = sin(t276);
t293 = cos(qJ(1));
t431 = t262 * t293;
t289 = sin(qJ(1));
t432 = t262 * t289;
t509 = g(1) * t431 + g(2) * t432;
t323 = t213 * qJDD(1);
t370 = t287 * t397;
t358 = t288 * t370;
t404 = qJD(3) * t291;
t386 = t292 * t404;
t398 = t292 * qJDD(1);
t400 = qJD(1) * qJD(2);
t382 = t292 * t400;
t399 = t288 * qJDD(1);
t507 = -t382 - t399;
t367 = -qJD(1) * t386 - t287 * t398 + t291 * t507;
t137 = qJD(1) * t358 + t367;
t499 = t196 * t397;
t492 = -t137 * t457 - t285 * t499;
t299 = t285 * t323 - t492;
t508 = -qJD(5) * t397 + t299;
t357 = pkin(5) * t290 + qJ(6) * t286;
t361 = g(1) * t293 + g(2) * t289;
t165 = -qJD(2) * t417 + t358 - t386;
t166 = t397 * t214;
t123 = -t165 * t457 - t166 * t285;
t160 = -t213 * t285 + t214 * t457;
t140 = t286 * t397 + t290 * t327;
t445 = t140 * t286;
t448 = t138 * t290;
t343 = t445 + t448;
t444 = t140 * t290;
t449 = t138 * t286;
t395 = qJDD(2) + qJDD(3);
t75 = -t286 * t508 - t290 * t395 + t327 * t402;
t461 = t290 * t75;
t74 = -t286 * t395 + t290 * t508 + t327 * t403;
t462 = t286 * t74;
t504 = t160 * (qJD(5) * (-t444 + t449) - t461 + t462) - t343 * t123;
t300 = -t499 - t323;
t375 = t137 * t285 + t300 * t457;
t94 = qJDD(5) - t375;
t470 = qJ(6) * t94;
t168 = qJDD(2) * pkin(2) + t488 * t507;
t383 = t288 * t400;
t171 = t488 * (-t383 + t398);
t374 = t168 * t291 - t287 * t171;
t109 = -qJD(3) * t157 + t374;
t71 = pkin(3) * t395 + t137 * qJ(4) - t196 * qJD(4) + t109;
t405 = qJD(3) * t287;
t108 = t168 * t287 + t171 * t291 + t205 * t404 - t221 * t405;
t76 = qJ(4) * t300 + t195 * qJD(4) + t108;
t24 = t285 * t71 + t457 * t76;
t22 = pkin(9) * t395 + t24;
t260 = pkin(2) * t383;
t396 = qJDD(4) + t260;
t454 = qJDD(1) * pkin(1);
t34 = -pkin(2) * t398 - pkin(3) * t300 - pkin(4) * t375 + pkin(9) * t299 + t396 - t454;
t6 = t22 * t290 + t286 * t34 + t402 * t99 - t403 * t85;
t2 = qJD(6) * t505 + t470 + t6;
t377 = t22 * t286 - t290 * t34 + t402 * t85 + t403 * t99;
t487 = pkin(5) * t94;
t4 = qJDD(6) + t377 - t487;
t503 = t2 * t290 + t286 * t4;
t472 = t285 * t76 - t457 * t71;
t21 = -pkin(4) * t395 + t472;
t128 = t285 * t136;
t86 = t127 * t457 - t128;
t84 = -pkin(4) * t397 - t86;
t502 = t21 * t286 + t402 * t84;
t271 = pkin(2) * t291 + pkin(3);
t378 = t457 * t287;
t189 = pkin(2) * t378 + t271 * t285;
t184 = pkin(9) + t189;
t423 = t285 * t287;
t471 = pkin(2) * qJD(3);
t187 = (t291 * t457 - t423) * t471;
t434 = t187 * t290;
t501 = -t138 * t434 - t184 * t461;
t500 = t151 * t397;
t159 = t213 * t457 + t214 * t285;
t114 = pkin(4) * t159 - pkin(9) * t160 + t175;
t173 = -t239 * t287 + t240 * t291;
t149 = -qJ(4) * t213 + t173;
t172 = -t239 * t291 - t240 * t287;
t332 = -qJ(4) * t214 + t172;
t116 = t149 * t457 + t285 * t332;
t497 = t114 * t286 + t116 * t290;
t164 = -t219 * t291 - t197;
t142 = -t190 + t164;
t163 = t219 * t287 - t201;
t333 = t163 - t455;
t413 = -t142 * t285 + t457 * t333 + (t285 * t291 + t378) * t471;
t104 = t142 * t457 + t285 * t333;
t496 = t187 - t104;
t495 = pkin(5) * t512 - qJ(6) * t506 - t286 * qJD(6);
t263 = cos(t276);
t494 = -pkin(4) * t263 - pkin(9) * t262;
t493 = g(1) * t289 - g(2) * t293;
t122 = -t165 * t285 + t166 * t457;
t453 = t123 * t286;
t331 = t160 * t402 + t453;
t436 = t160 * t286;
t491 = t122 * t138 + t159 * t75 + t331 * t505 + t436 * t94;
t388 = qJD(2) * t488;
t220 = t288 * t388;
t222 = t292 * t388;
t125 = -t220 * t291 - t222 * t287 - t239 * t404 - t240 * t405;
t102 = -qJ(4) * t166 - qJD(4) * t213 + t125;
t126 = -qJD(3) * t173 + t220 * t287 - t222 * t291;
t304 = qJ(4) * t165 - qJD(4) * t214 + t126;
t55 = t102 * t457 + t285 * t304;
t275 = t288 * t469;
t154 = pkin(3) * t166 + t275;
t69 = pkin(4) * t122 - pkin(9) * t123 + t154;
t15 = -qJD(5) * t497 - t286 * t55 + t290 * t69;
t489 = t140 ^ 2;
t486 = pkin(3) * t196;
t277 = sin(t284);
t484 = pkin(3) * t277;
t483 = pkin(3) * t285;
t482 = pkin(5) * t327;
t250 = g(3) * t262;
t478 = g(3) * t263;
t278 = cos(t284);
t477 = g(3) * t278;
t476 = g(3) * t286;
t475 = g(3) * t292;
t8 = pkin(5) * t75 + qJ(6) * t74 - qJD(6) * t140 + t21;
t474 = t286 * t8;
t5 = t6 * t290;
t50 = pkin(5) * t138 - qJ(6) * t140 + t84;
t467 = t151 * t50;
t466 = t151 * t84;
t465 = t184 * t94;
t264 = pkin(9) + t483;
t464 = t264 * t94;
t463 = t286 * t37;
t88 = t286 * t94;
t89 = t290 * t94;
t460 = -t138 * t402 - t286 * t75;
t459 = t495 + t413;
t95 = t135 * t285 + t380;
t458 = -t95 + t495;
t110 = pkin(4) * t327 + pkin(9) * t151 + t486;
t96 = t135 * t457 - t128;
t57 = t110 * t286 + t290 * t96;
t456 = pkin(7) * qJDD(1);
t452 = t123 * t290;
t451 = t138 * t327;
t450 = t138 * t184;
t447 = t140 * t138;
t446 = t140 * t327;
t443 = t505 * t327;
t442 = t327 ^ 2;
t440 = t151 ^ 2;
t435 = t160 * t290;
t433 = t196 * t195;
t430 = t263 * t289;
t429 = t263 * t293;
t428 = t264 * t286;
t427 = t264 * t290;
t426 = t277 * t289;
t425 = t277 * t293;
t281 = -qJ(4) - t488;
t424 = t281 * t293;
t421 = t286 * t289;
t419 = t289 * t290;
t418 = t290 * t293;
t416 = t293 * t286;
t415 = qJD(6) - t47;
t273 = pkin(2) * t406;
t105 = t110 + t273;
t59 = t104 * t290 + t105 * t286;
t414 = t157 + t163;
t223 = -pkin(2) * t288 - t484;
t225 = pkin(9) * t430;
t412 = t223 * t289 + t225;
t228 = pkin(9) * t429;
t411 = t223 * t293 + t228;
t410 = t509 * t290;
t267 = pkin(3) * t278;
t409 = t267 + t279;
t282 = t288 ^ 2;
t283 = t292 ^ 2;
t408 = t282 - t283;
t407 = t282 + t283;
t296 = qJD(1) ^ 2;
t394 = t288 * t296 * t292;
t49 = t50 * t403;
t81 = t84 * t403;
t218 = pkin(1) + t409;
t203 = t293 * t218;
t393 = pkin(4) * t429 + pkin(9) * t431 + t203;
t392 = t263 * t476 - t286 * t509;
t391 = g(1) * t429 + g(2) * t430 + t250;
t390 = t267 - t494;
t387 = t457 * pkin(3);
t385 = t184 * t402;
t384 = t138 ^ 2 - t489;
t54 = t102 * t285 - t304 * t457;
t131 = t140 * t403;
t376 = -t290 * t74 - t131;
t115 = t149 * t285 - t332 * t457;
t372 = t505 * t286;
t371 = t327 * t397;
t369 = t397 * t288;
t366 = t288 * t382;
t365 = -g(1) * t432 + g(2) * t431;
t364 = -pkin(4) * t262 - t484;
t179 = t263 * t421 + t418;
t181 = t263 * t416 - t419;
t363 = g(1) * t179 - g(2) * t181;
t180 = t263 * t419 - t416;
t182 = t263 * t418 + t421;
t362 = g(1) * t180 - g(2) * t182;
t356 = pkin(5) * t286 - qJ(6) * t290;
t355 = -t151 * t86 + t327 * t87;
t354 = -t465 + t466;
t353 = -t464 + t466;
t36 = -pkin(5) * t505 + t415;
t352 = t290 * t36 - t463;
t351 = t286 * t36 + t290 * t37;
t350 = -t286 * t48 - t290 * t47;
t349 = t286 * t47 - t290 * t48;
t188 = -pkin(2) * t423 + t271 * t457;
t346 = t263 * t357 + t390;
t56 = t110 * t290 - t286 * t96;
t345 = t140 * t187 - t184 * t74;
t58 = -t104 * t286 + t105 * t290;
t63 = t114 * t290 - t116 * t286;
t341 = t327 * t36 + t410 + t49;
t340 = -t327 * t47 + t410 + t81;
t339 = -t438 * t47 - t439 * t48 - t391 + t5;
t338 = t505 * t506 + t88;
t337 = pkin(4) + t357;
t336 = -t505 * t512 + t89;
t183 = -pkin(4) - t188;
t335 = -qJD(5) * t264 * t505 - t478;
t334 = -0.2e1 * pkin(1) * t400 - pkin(7) * qJDD(2);
t330 = -t160 * t403 + t452;
t329 = -t187 * t286 - t385;
t328 = -t184 * t403 + t434;
t14 = t114 * t402 - t116 * t403 + t286 * t69 + t290 * t55;
t326 = (t444 + t449) * t264;
t322 = t327 * t48 + t392 + t502;
t321 = t151 * t169 - t24 + t391;
t320 = t138 * t372 - t461;
t25 = -t336 - t451;
t318 = -t169 * t327 - t472 - t478 + t509;
t317 = -t327 * t37 - t438 * t50 - t392 - t474;
t316 = g(1) * t181 + g(2) * t179 + t262 * t476 - t377;
t295 = qJD(2) ^ 2;
t315 = -pkin(7) * t295 + 0.2e1 * t454 + t493;
t314 = pkin(1) * t296 + t361 - t456;
t313 = g(3) * t277 + t238 * t195 + t278 * t361 - t108;
t312 = t36 * t506 - t37 * t439 - t391 + t503;
t311 = g(1) * t425 + g(2) * t426 + t238 * t196 + t374 - t477;
t310 = (-g(1) * (-t218 + t494) + g(2) * t281) * t289;
t309 = qJD(5) * t352 + t503;
t308 = qJD(5) * t350 + t286 * t377 + t5;
t307 = t138 * t331 + t436 * t75;
t306 = t140 * t50 + qJDD(6) - t316;
t305 = -g(1) * t182 - g(2) * t180 - t250 * t290 + t6;
t301 = t361 * t337 * t262;
t119 = pkin(3) * t499 + qJDD(1) * t175 + t396;
t298 = -t140 * t505 + t75;
t265 = -t387 - pkin(4);
t204 = -t387 - t337;
t192 = t260 - t511;
t174 = t273 + t486;
t170 = t183 - t357;
t147 = t327 * qJ(6);
t143 = -t195 ^ 2 + t196 ^ 2;
t121 = t300 + t499;
t120 = -qJD(1) * t287 * t369 - t195 * t397 - t367;
t106 = pkin(5) * t140 + qJ(6) * t138;
t80 = -t299 + t500;
t79 = t371 + t375;
t78 = -t440 + t442;
t77 = t160 * t356 + t115;
t65 = t75 * t427;
t53 = -pkin(5) * t159 - t63;
t52 = qJ(6) * t159 + t497;
t46 = t122 * t505 + t159 * t94;
t45 = -t58 - t482;
t44 = t147 + t59;
t43 = -t56 - t482;
t42 = t147 + t57;
t41 = -t74 + t513;
t28 = t444 * t505 - t462;
t27 = t338 - t446;
t17 = t140 * t330 - t435 * t74;
t16 = t356 * t123 + (qJD(5) * t357 - qJD(6) * t290) * t160 + t54;
t13 = -t151 * t343 + t376 + t460;
t12 = t131 + (t140 * t151 + t75) * t286 + (t74 + t513) * t290;
t11 = -pkin(5) * t122 - t15;
t10 = t122 * t140 - t159 * t74 + t330 * t505 + t435 * t94;
t9 = qJ(6) * t122 + qJD(6) * t159 + t14;
t1 = [0, 0, 0, 0, 0, qJDD(1), t493, t361, 0, 0, qJDD(1) * t282 + 0.2e1 * t366, 0.2e1 * t288 * t398 - 0.2e1 * t400 * t408, qJDD(2) * t288 + t292 * t295, qJDD(1) * t283 - 0.2e1 * t366, qJDD(2) * t292 - t288 * t295, 0, t288 * t334 + t292 * t315, -t288 * t315 + t292 * t334, 0.2e1 * t407 * t456 - t361, -g(1) * (-pkin(1) * t289 + pkin(7) * t293) - g(2) * (pkin(1) * t293 + pkin(7) * t289) + (pkin(7) ^ 2 * t407 + pkin(1) ^ 2) * qJDD(1), -t137 * t214 - t165 * t196, t137 * t213 - t165 * t195 - t196 * t166 + t214 * t300, -t165 * t397 + t214 * t395, -t195 * t166 - t213 * t300, -t166 * t397 - t213 * t395, 0, t126 * t397 + t172 * t395 - t195 * t275 + t278 * t493 + (t192 - t511) * t213 - 0.2e1 * t238 * t166, -t125 * t397 + t272 * t137 + t238 * t165 - t173 * t395 + t192 * t214 + t196 * t275 - t277 * t493, -t108 * t213 - t109 * t214 + t125 * t195 - t126 * t196 + t172 * t137 + t156 * t165 - t157 * t166 + t173 * t300 - t361, t108 * t173 + t157 * t125 + t109 * t172 + t156 * t126 - t192 * t272 - t238 * t275 - g(1) * (-t272 * t289 + t293 * t488) - g(2) * (t272 * t293 + t289 * t488) t327 * t123 + (t285 * (-t287 * t399 + t291 * t398) + t492) * t160, -t122 * t327 - t123 * t151 + t159 * t299 + t160 * t375, t123 * t397 + t160 * t395, t122 * t151 - t159 * t375, -t122 * t397 - t159 * t395, 0, -t115 * t395 + t119 * t159 + t169 * t122 + t154 * t151 - t175 * t375 + t263 * t493 - t397 * t54, -t116 * t395 + t119 * t160 + t169 * t123 + t154 * t327 - t175 * t299 - t397 * t55 + t365, -t115 * t299 + t116 * t375 - t87 * t122 - t86 * t123 - t55 * t151 - t24 * t159 + t160 * t472 + t327 * t54 - t361, t24 * t116 + t87 * t55 + t472 * t115 - t86 * t54 + t119 * t175 + t169 * t154 - g(1) * (-t218 * t289 - t424) - g(2) * (-t281 * t289 + t203) t17, t504, t10, t307, -t491, t46, t115 * t75 + t122 * t47 + t138 * t54 + t15 * t505 - t159 * t377 + t160 * t502 + t453 * t84 + t63 * t94 + t362, t84 * t452 - t115 * t74 - t122 * t48 - t14 * t505 + t140 * t54 - t159 * t6 - t497 * t94 + (t21 * t290 - t81) * t160 - t363, -t138 * t14 - t140 * t15 + t63 * t74 - t497 * t75 + t350 * t123 + (qJD(5) * t349 - t286 * t6 + t290 * t377) * t160 - t365, g(1) * t424 - g(2) * t393 + t115 * t21 + t14 * t48 + t15 * t47 - t377 * t63 + t497 * t6 + t54 * t84 + t310, t17, t10, -t504, t46, t491, t307, t50 * t453 - t11 * t505 - t122 * t36 + t138 * t16 - t159 * t4 - t53 * t94 + t75 * t77 + (t402 * t50 + t474) * t160 + t362, t11 * t140 - t138 * t9 - t52 * t75 - t53 * t74 + t352 * t123 + (-qJD(5) * t351 - t2 * t286 + t290 * t4) * t160 - t365, -t50 * t452 + t122 * t37 - t140 * t16 + t505 * t9 + t159 * t2 + t52 * t94 + t74 * t77 + (-t290 * t8 + t49) * t160 + t363, t2 * t52 + t37 * t9 + t8 * t77 + t50 * t16 + t4 * t53 + t36 * t11 - g(1) * (-pkin(5) * t180 - qJ(6) * t179 - t424) - g(2) * (pkin(5) * t182 + qJ(6) * t181 + t393) + t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t394, t408 * t296, t399, t394, t398, qJDD(2), t288 * t314 - t475, g(3) * t288 + t292 * t314, 0, 0, -t433, t143, t120, t433, t121, t395, -t163 * qJD(2) - t414 * qJD(3) + (-qJD(3) * t370 + t195 * t406 + t291 * t395) * pkin(2) + t311, t164 * t397 + (-t196 * t406 - t287 * t395 - t397 * t404) * pkin(2) + t313, t414 * t196 + (t156 - t164) * t195 + ((qJD(3) * t195 + t137) * t291 + (t196 * qJD(3) - t323 + (-t291 * t369 - t397 * t420) * qJD(1)) * t287) * pkin(2), -t156 * t163 - t157 * t164 + (-t475 + t108 * t287 + t109 * t291 + (-t156 * t287 + t157 * t291) * qJD(3) + (qJD(1) * t238 + t361) * t288) * pkin(2), t510, t78, t80, -t510, t79, t395, -t174 * t151 + t188 * t395 - t397 * t413 + t318, -t174 * t327 - t189 * t395 - t397 * t496 + t321, -t151 * t496 + t188 * t299 + t189 * t375 + t327 * t413 + t355, -g(3) * t409 - t169 * t174 - t188 * t472 + t24 * t189 - t223 * t361 - t413 * t86 + t496 * t87, t28, t13, t27, t320, -t25, -t443, t183 * t75 + (-t21 - t478) * t290 + t354 * t286 + t413 * t138 + (t329 - t58) * t505 + t340, -t183 * t74 + t354 * t290 + t413 * t140 + (-t328 + t59) * t505 + t322, t138 * t59 + t140 * t58 + (t140 * t184 - t47) * t402 + (t377 + (-t48 + t450) * qJD(5) + t345) * t286 + t339 + t501, t21 * t183 - t48 * t59 - t47 * t58 - g(1) * (-pkin(4) * t431 + t411) - g(2) * (-pkin(4) * t432 + t412) - g(3) * (t279 + t390) + t413 * t84 - t349 * t187 + t308 * t184, t28, t27, t12, -t443, t25, t320, t170 * t75 + (-t8 - t478) * t290 + (-t465 + t467) * t286 + t459 * t138 + (t329 + t45) * t505 + t341, t138 * t44 + (-t45 + t385) * t140 + ((-t37 + t450) * qJD(5) + t345) * t286 + t312 + t501, t170 * t74 + (-qJD(5) * t50 + t465) * t290 - t459 * t140 + (t328 - t44) * t505 + t317, t8 * t170 - t37 * t44 - t36 * t45 - g(1) * t411 - g(2) * t412 - g(3) * (t279 + t346) + t459 * t50 + t351 * t187 + t301 + t309 * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t433, t143, t120, t433, t121, t395, qJD(2) * t157 + t311, t156 * t397 + t313, 0, 0, t510, t78, t80, -t510, t79, t395, t95 * t397 + (-t151 * t196 + t395 * t457) * pkin(3) + t318, t96 * t397 + (-t196 * t327 - t285 * t395) * pkin(3) + t321, t96 * t151 + t299 * t387 - t327 * t95 + t375 * t483 + t355, t86 * t95 - t87 * t96 + (-t169 * t196 + t24 * t285 + t277 * t361 - t457 * t472 - t477) * pkin(3), t28, t13, t27, t320, -t25, -t443, -t138 * t95 - t505 * t56 + t265 * t75 + t353 * t286 + (-t21 + t335) * t290 + t340, -t140 * t95 - t265 * t74 + t353 * t290 + (t264 * t403 + t57) * t505 + t322, t138 * t57 + t140 * t56 - t65 + (-t264 * t74 + t377) * t286 + (t326 + t350) * qJD(5) + t339, t21 * t265 - t48 * t57 - t47 * t56 - t84 * t95 - g(1) * (t293 * t364 + t228) - g(2) * (t289 * t364 + t225) - g(3) * t390 + t308 * t264, t28, t27, t12, -t443, t25, t320, t505 * t43 + t204 * t75 + (-t464 + t467) * t286 + t458 * t138 + (t335 - t8) * t290 + t341, -t74 * t428 + t138 * t42 - t140 * t43 - t65 + (t326 - t463) * qJD(5) + t312, t94 * t427 - t505 * t42 + t204 * t74 - t458 * t140 + (-t290 * t50 - t428 * t505) * qJD(5) + t317, t8 * t204 - t37 * t42 - t36 * t43 - g(1) * (-pkin(3) * t425 + t228) - g(2) * (-pkin(3) * t426 + t225) - g(3) * t346 + t458 * t50 + t309 * t264 + t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t371 - t375, -t299 - t500, -t440 - t442, t151 * t87 + t327 * t86 + t119 - t493, 0, 0, 0, 0, 0, 0, t336 - t451, -t290 * t373 - t446 - t88 (-t138 * t151 + t74) * t290 + t140 * t372 + t460, -t327 * t84 + (-t377 + t468) * t290 + (t6 - t514) * t286 - t493, 0, 0, 0, 0, 0, 0, -t286 * t373 - t451 + t89 -(-t445 + t448) * t151 - t376 + t460, t338 + t446, -t327 * t50 + (-t4 + t515) * t290 + (t36 * t505 + t2) * t286 - t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t447, -t384, t41, -t447, -t298, t94, -t140 * t84 + t316 + t468, t138 * t84 - t305 + t514, 0, 0, t447, t41, t384, t94, t298, -t447, -t106 * t138 - t306 + t468 + 0.2e1 * t487, pkin(5) * t74 - qJ(6) * t75 + (t37 - t48) * t140 + (t36 - t415) * t138, 0.2e1 * t470 + t106 * t140 - t138 * t50 + (0.2e1 * qJD(6) - t47) * t505 + t305, t2 * qJ(6) - t4 * pkin(5) - t50 * t106 - t36 * t48 - g(1) * (-pkin(5) * t181 + qJ(6) * t182) - g(2) * (-pkin(5) * t179 + qJ(6) * t180) + t415 * t37 + t356 * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94 + t447, t41, -t489 - t373, t306 - t487 - t515;];
tau_reg  = t1;
