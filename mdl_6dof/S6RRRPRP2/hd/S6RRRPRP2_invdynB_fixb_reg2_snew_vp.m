% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:33:36
% EndTime: 2019-05-07 07:34:26
% DurationCPUTime: 52.58s
% Computational Cost: add. (197582->853), mult. (447239->1234), div. (0->0), fcn. (334812->10), ass. (0->607)
t1160 = sin(qJ(1));
t1164 = cos(qJ(1));
t1159 = sin(qJ(2));
t1163 = cos(qJ(2));
t1158 = sin(qJ(3));
t1162 = cos(qJ(3));
t1155 = sin(pkin(10));
t1156 = cos(pkin(10));
t1161 = cos(qJ(5));
t1157 = sin(qJ(5));
t1251 = qJD(1) * t1163;
t1252 = qJD(1) * t1159;
t1112 = -t1158 * t1252 + t1162 * t1251;
t1113 = (t1158 * t1163 + t1159 * t1162) * qJD(1);
t1078 = t1155 * t1112 + t1156 * t1113;
t1152 = qJD(2) + qJD(3);
t1046 = t1078 * t1157 - t1161 * t1152;
t1215 = qJDD(2) + qJDD(3);
t1203 = qJD(2) * t1251;
t1218 = qJDD(1) * t1159;
t1122 = t1203 + t1218;
t1147 = t1163 * qJDD(1);
t1212 = qJD(2) * t1252;
t1123 = t1147 - t1212;
t1196 = t1122 * t1158 - t1162 * t1123;
t1051 = -qJD(3) * t1113 - t1196;
t1052 = qJD(3) * t1112 + t1162 * t1122 + t1158 * t1123;
t990 = t1051 * t1155 + t1052 * t1156;
t1177 = -t1157 * t1215 - t1161 * t990;
t1173 = -t1046 * qJD(5) - t1177;
t1076 = -t1156 * t1112 + t1113 * t1155;
t1072 = qJD(5) + t1076;
t1244 = t1046 * t1072;
t1291 = -t1244 + t1173;
t1268 = t1157 * t1291;
t1048 = t1078 * t1161 + t1152 * t1157;
t1199 = t1157 * t990 - t1161 * t1215;
t1220 = qJD(5) + t1072;
t906 = t1048 * t1220 + t1199;
t821 = t1161 * t906 + t1268;
t1045 = t1048 ^ 2;
t1282 = t1046 ^ 2;
t992 = t1045 - t1282;
t781 = t1155 * t821 + t1156 * t992;
t783 = -t1155 * t992 + t1156 * t821;
t721 = t1158 * t783 + t1162 * t781;
t724 = t1158 * t781 - t1162 * t783;
t676 = t1159 * t721 + t1163 * t724;
t826 = -t1157 * t906 + t1161 * t1291;
t1402 = t1160 * t676 - t1164 * t826;
t1281 = t1072 ^ 2;
t1002 = t1282 - t1281;
t1197 = -t1156 * t1051 + t1052 * t1155;
t988 = qJDD(5) + t1197;
t995 = t1048 * t1046;
t1301 = t988 + t995;
t1266 = t1157 * t1301;
t875 = t1002 * t1161 - t1266;
t907 = (qJD(5) - t1072) * t1048 + t1199;
t810 = t1155 * t875 + t1156 * t907;
t814 = -t1155 * t907 + t1156 * t875;
t744 = t1158 * t814 + t1162 * t810;
t747 = t1158 * t810 - t1162 * t814;
t687 = t1159 * t744 + t1163 * t747;
t1258 = t1161 * t1301;
t873 = t1002 * t1157 + t1258;
t1401 = t1160 * t687 + t1164 * t873;
t1400 = t1160 * t826 + t1164 * t676;
t1399 = -t1160 * t873 + t1164 * t687;
t1398 = t1159 * t724 - t1163 * t721;
t1397 = t1159 * t747 - t1163 * t744;
t1292 = -t1244 - t1173;
t1328 = -t1157 * t907 + t1161 * t1292;
t1295 = t1045 + t1282;
t1326 = -t1157 * t1292 - t1161 * t907;
t1349 = -t1155 * t1295 + t1156 * t1326;
t1351 = t1155 * t1326 + t1156 * t1295;
t1362 = t1158 * t1349 + t1162 * t1351;
t1363 = -t1158 * t1351 + t1162 * t1349;
t1383 = -t1159 * t1362 + t1163 * t1363;
t1388 = t1160 * t1328 + t1164 * t1383;
t1396 = pkin(6) * t1388;
t1390 = t1160 * t1383 - t1164 * t1328;
t1395 = pkin(6) * t1390;
t1384 = t1159 * t1363 + t1163 * t1362;
t1394 = pkin(7) * t1384;
t1393 = -pkin(1) * t1384 - pkin(2) * t1362 - pkin(3) * t1351 - pkin(4) * t1295 - pkin(9) * t1326;
t1392 = -pkin(1) * t1328 + pkin(7) * t1383;
t1003 = -t1045 + t1281;
t1302 = t988 - t995;
t1265 = t1157 * t1302;
t1330 = -t1003 * t1161 - t1265;
t1257 = t1161 * t1302;
t1329 = -t1003 * t1157 + t1257;
t1348 = -t1155 * t1292 + t1156 * t1329;
t1350 = t1155 * t1329 + t1156 * t1292;
t1364 = t1158 * t1348 + t1162 * t1350;
t1365 = -t1158 * t1350 + t1162 * t1348;
t1381 = -t1159 * t1364 + t1163 * t1365;
t1391 = t1160 * t1381 + t1164 * t1330;
t1389 = -t1160 * t1330 + t1164 * t1381;
t1387 = pkin(8) * t1362;
t1385 = -pkin(2) * t1328 + pkin(8) * t1363;
t1382 = t1159 * t1365 + t1163 * t1364;
t969 = t1281 + t1045;
t852 = t1161 * t969 + t1266;
t1380 = pkin(1) * t852;
t1379 = pkin(2) * t852;
t1378 = pkin(3) * t852;
t1377 = pkin(4) * t852;
t1376 = pkin(9) * t852;
t862 = t1157 * t969 - t1258;
t1375 = pkin(9) * t862;
t1374 = qJ(4) * t1349;
t1373 = qJ(4) * t1351;
t1372 = t1155 * t862;
t1371 = t1156 * t862;
t1370 = t1160 * t852;
t1368 = t1164 * t852;
t1359 = pkin(9) * t1328;
t1240 = t1072 * t1157;
t1209 = t1046 * t1240;
t1239 = t1072 * t1161;
t998 = t1048 * t1239;
t1187 = t998 + t1209;
t1208 = t1046 * t1239;
t997 = t1048 * t1240;
t1186 = t997 - t1208;
t1285 = t1155 * t988 + t1156 * t1186;
t1288 = t1155 * t1186 - t1156 * t988;
t1307 = t1158 * t1285 + t1162 * t1288;
t1308 = -t1158 * t1288 + t1162 * t1285;
t1321 = -t1159 * t1307 + t1163 * t1308;
t1347 = t1160 * t1321 + t1164 * t1187;
t942 = -qJD(5) * t1048 - t1199;
t1178 = -t1161 * t942 - t1209;
t1179 = -t1157 * t942 + t1208;
t1211 = t1155 * t995;
t1286 = t1156 * t1179 - t1211;
t1210 = t1156 * t995;
t1287 = t1155 * t1179 + t1210;
t1305 = t1158 * t1286 + t1162 * t1287;
t1306 = -t1158 * t1287 + t1162 * t1286;
t1323 = -t1159 * t1305 + t1163 * t1306;
t1346 = t1160 * t1323 + t1164 * t1178;
t1345 = -t1160 * t1187 + t1164 * t1321;
t1344 = -t1160 * t1178 + t1164 * t1323;
t1290 = -t1281 - t1282;
t1310 = t1157 * t1290 + t1257;
t1343 = pkin(1) * t1310;
t1342 = pkin(2) * t1310;
t1341 = pkin(3) * t1310;
t1340 = pkin(4) * t1310;
t1309 = t1161 * t1290 - t1265;
t1339 = pkin(9) * t1309;
t1338 = pkin(9) * t1310;
t1337 = qJ(6) * t1291;
t1334 = t1155 * t1309;
t1333 = t1156 * t1309;
t1332 = t1160 * t1310;
t1331 = t1164 * t1310;
t1154 = t1163 ^ 2;
t1166 = qJD(1) ^ 2;
t1132 = g(1) * t1160 - t1164 * g(2);
t1181 = qJDD(1) * pkin(1) + t1132;
t1183 = qJD(2) * pkin(2) - pkin(8) * t1252;
t1054 = pkin(2) * t1123 - t1183 * t1252 + t1181 + (pkin(8) * t1154 + pkin(7)) * t1166;
t905 = t1161 * t1173 - t997;
t1188 = t1155 * t905 - t1210;
t1189 = t1156 * t905 + t1211;
t1283 = -t1158 * t1188 + t1162 * t1189;
t1284 = t1158 * t1189 + t1162 * t1188;
t1304 = -t1159 * t1284 + t1163 * t1283;
t901 = -t1157 * t1173 - t998;
t1327 = t1160 * t1304 + t1164 * t901;
t1325 = -t1160 * t901 + t1164 * t1304;
t1324 = t1159 * t1306 + t1163 * t1305;
t1322 = t1159 * t1308 + t1163 * t1307;
t1320 = 2 * qJD(6);
t1017 = t1078 * t1076;
t1296 = -t1017 + t1215;
t1316 = t1155 * t1296;
t1313 = t1156 * t1296;
t1084 = t1112 * t1113;
t1293 = t1084 + t1215;
t1312 = t1158 * t1293;
t1311 = t1162 * t1293;
t1110 = t1112 ^ 2;
t1184 = pkin(3) * t1152 - qJ(4) * t1113;
t947 = pkin(3) * t1051 + qJ(4) * t1110 - t1113 * t1184 - qJDD(4) + t1054;
t1238 = t1078 * t1152;
t956 = t1197 + t1238;
t1303 = t1159 * t1283 + t1163 * t1284;
t1068 = t1152 * t1076;
t1200 = -t990 + t1068;
t1105 = t1152 * t1112;
t1028 = -t1052 + t1105;
t1294 = t1052 + t1105;
t1149 = t1154 * t1166;
t1165 = qJD(2) ^ 2;
t1138 = -t1149 - t1165;
t1012 = pkin(4) * t1076 - pkin(9) * t1078;
t1280 = t1152 ^ 2;
t1133 = g(1) * t1164 + g(2) * t1160;
t1115 = -pkin(1) * t1166 + qJDD(1) * pkin(7) - t1133;
t1277 = t1159 * g(3);
t1170 = -pkin(2) * t1149 + t1123 * pkin(8) - qJD(2) * t1183 - t1277;
t1224 = t1159 * t1166;
t1253 = qJD(1) * qJD(2);
t1175 = pkin(2) * t1224 + pkin(8) * t1253 - g(3);
t1233 = t1115 * t1159;
t1176 = qJDD(2) * pkin(2) - pkin(8) * t1122 - t1233;
t984 = t1158 * t1170 - t1162 * t1176 + (t1158 * t1115 - t1162 * t1175) * t1163;
t1167 = pkin(3) * t1293 + qJ(4) * t1028 - t984;
t1223 = t1163 * t1115;
t985 = t1162 * (t1170 + t1223) + t1158 * (t1163 * t1175 + t1176);
t924 = -t1110 * pkin(3) + t1051 * qJ(4) - t1152 * t1184 + t985;
t833 = -0.2e1 * qJD(4) * t1076 + t1155 * t1167 + t1156 * t924;
t792 = -pkin(4) * t1280 + pkin(9) * t1215 - t1076 * t1012 + t833;
t837 = pkin(4) * t956 + t1200 * pkin(9) - t947;
t752 = t1157 * t837 + t1161 * t792;
t991 = pkin(5) * t1046 - qJ(6) * t1048;
t1185 = t988 * qJ(6) - t1046 * t991 + t1072 * t1320 + t752;
t1289 = -t942 * pkin(5) - t1337;
t1029 = (qJD(3) - t1152) * t1113 + t1196;
t1073 = t1076 ^ 2;
t1074 = t1078 ^ 2;
t1111 = t1113 ^ 2;
t1279 = pkin(4) * t1155;
t1278 = pkin(5) * t1161;
t751 = t1157 * t792 - t1161 * t837;
t1276 = qJ(6) * t1161;
t1274 = t1155 * t947;
t1271 = t1156 * t947;
t1201 = t1155 * t924 - t1156 * t1167;
t1182 = -t1215 * pkin(4) - pkin(9) * t1280 + t1201;
t791 = (0.2e1 * qJD(4) + t1012) * t1078 + t1182;
t1270 = t1157 * t791;
t1250 = qJD(4) * t1078;
t832 = t1201 + 0.2e1 * t1250;
t756 = t1155 * t833 - t1156 * t832;
t1264 = t1158 * t756;
t917 = t1158 * t985 - t1162 * t984;
t1263 = t1159 * t917;
t1261 = t1161 * t791;
t1256 = t1162 * t756;
t1255 = t1163 * t917;
t1254 = -t1281 + t1295;
t1010 = t1017 + t1215;
t1246 = t1010 * t1155;
t1245 = t1010 * t1156;
t1243 = t1054 * t1158;
t1242 = t1054 * t1162;
t1241 = t1072 * t1048;
t1081 = -t1084 + t1215;
t1237 = t1081 * t1158;
t1236 = t1081 * t1162;
t1114 = pkin(7) * t1166 + t1181;
t1235 = t1114 * t1159;
t1234 = t1114 * t1163;
t1140 = t1163 * t1224;
t1130 = qJDD(2) + t1140;
t1232 = t1130 * t1159;
t1131 = qJDD(2) - t1140;
t1231 = t1131 * t1159;
t1230 = t1131 * t1163;
t1229 = t1152 * t1155;
t1228 = t1152 * t1156;
t1227 = t1152 * t1158;
t1226 = t1152 * t1162;
t1153 = t1159 ^ 2;
t1225 = t1153 * t1166;
t1219 = t1153 + t1154;
t1217 = qJDD(1) * t1160;
t1216 = qJDD(1) * t1164;
t1214 = -pkin(4) * t1156 - pkin(3);
t1207 = t1160 * t1017;
t1206 = t1164 * t1017;
t1205 = t1160 * t1084;
t1204 = t1164 * t1084;
t1202 = qJ(6) * t1157 + pkin(4);
t757 = t1155 * t832 + t1156 * t833;
t918 = t1158 * t984 + t1162 * t985;
t1098 = g(3) * t1163 + t1233;
t1099 = t1223 - t1277;
t1040 = t1098 * t1159 + t1163 * t1099;
t1090 = -t1132 * t1160 - t1164 * t1133;
t1195 = t1160 * t1215;
t1194 = t1048 * t991 + qJDD(6) + t751;
t1193 = t1160 * t1140;
t1192 = t1164 * t1140;
t1127 = -t1160 * t1166 + t1216;
t1190 = -pkin(6) * t1127 - g(3) * t1160;
t689 = t1157 * t752 - t1161 * t751;
t690 = t1157 * t751 + t1161 * t752;
t1039 = t1098 * t1163 - t1099 * t1159;
t1089 = t1132 * t1164 - t1133 * t1160;
t1180 = -pkin(5) * t988 + t1194;
t961 = t1197 - t1238;
t1171 = -t1012 * t1078 + t1048 * t1320 - t1182 - 0.2e1 * t1250 - t1289;
t1142 = t1164 * t1215;
t1137 = t1149 - t1165;
t1136 = -t1165 - t1225;
t1135 = t1165 - t1225;
t1129 = t1149 - t1225;
t1128 = t1149 + t1225;
t1126 = t1164 * t1166 + t1217;
t1125 = t1219 * qJDD(1);
t1124 = t1147 - 0.2e1 * t1212;
t1121 = 0.2e1 * t1203 + t1218;
t1119 = t1163 * t1130;
t1118 = t1219 * t1253;
t1109 = -pkin(6) * t1126 + g(3) * t1164;
t1103 = -t1111 + t1280;
t1102 = t1110 - t1280;
t1101 = t1122 * t1163 - t1153 * t1253;
t1100 = -t1123 * t1159 - t1154 * t1253;
t1097 = -t1111 - t1280;
t1096 = -t1136 * t1159 - t1230;
t1095 = -t1135 * t1159 + t1119;
t1094 = t1138 * t1163 - t1232;
t1093 = t1137 * t1163 - t1231;
t1092 = t1136 * t1163 - t1231;
t1091 = t1138 * t1159 + t1119;
t1087 = t1125 * t1164 - t1128 * t1160;
t1086 = t1125 * t1160 + t1128 * t1164;
t1085 = -t1121 * t1159 + t1124 * t1163;
t1083 = -t1111 + t1110;
t1079 = -t1280 - t1110;
t1065 = t1096 * t1164 + t1121 * t1160;
t1064 = t1094 * t1164 - t1124 * t1160;
t1063 = t1096 * t1160 - t1121 * t1164;
t1062 = t1094 * t1160 + t1124 * t1164;
t1061 = -t1074 + t1280;
t1060 = t1073 - t1280;
t1059 = (t1112 * t1162 + t1113 * t1158) * t1152;
t1058 = (t1112 * t1158 - t1113 * t1162) * t1152;
t1057 = -pkin(7) * t1092 - t1234;
t1056 = -pkin(7) * t1091 - t1235;
t1055 = -t1074 - t1280;
t1053 = -t1110 - t1111;
t1050 = -pkin(1) * t1092 + t1099;
t1049 = -pkin(1) * t1091 + t1098;
t1035 = t1102 * t1162 - t1237;
t1034 = -t1103 * t1158 + t1311;
t1033 = t1102 * t1158 + t1236;
t1032 = t1103 * t1162 + t1312;
t1031 = -t1097 * t1158 - t1236;
t1030 = t1097 * t1162 - t1237;
t1024 = (qJD(3) + t1152) * t1113 + t1196;
t1023 = t1052 * t1162 - t1113 * t1227;
t1022 = t1052 * t1158 + t1113 * t1226;
t1021 = -t1051 * t1158 - t1112 * t1226;
t1020 = t1051 * t1162 - t1112 * t1227;
t1019 = t1040 * t1164 - t1114 * t1160;
t1018 = t1040 * t1160 + t1114 * t1164;
t1016 = t1079 * t1162 - t1312;
t1015 = t1079 * t1158 + t1311;
t1014 = t1073 - t1074;
t1008 = -t1280 - t1073;
t1000 = (-t1076 * t1156 + t1078 * t1155) * t1152;
t999 = (-t1076 * t1155 - t1078 * t1156) * t1152;
t996 = -t1058 * t1159 + t1059 * t1163;
t983 = -t1073 - t1074;
t981 = -pkin(8) * t1030 - t1242;
t978 = -pkin(8) * t1015 - t1243;
t977 = -t1033 * t1159 + t1035 * t1163;
t976 = -t1032 * t1159 + t1034 * t1163;
t975 = t1060 * t1156 - t1246;
t974 = -t1061 * t1155 + t1313;
t973 = t1060 * t1155 + t1245;
t972 = t1061 * t1156 + t1316;
t971 = -t1055 * t1155 - t1245;
t970 = t1055 * t1156 - t1246;
t967 = -t1030 * t1159 + t1031 * t1163;
t966 = t1030 * t1163 + t1031 * t1159;
t965 = -t1028 * t1158 - t1029 * t1162;
t964 = -t1024 * t1162 - t1158 * t1294;
t963 = t1028 * t1162 - t1029 * t1158;
t962 = -t1024 * t1158 + t1162 * t1294;
t960 = -t1068 - t990;
t951 = -t1078 * t1229 + t1156 * t990;
t950 = t1078 * t1228 + t1155 * t990;
t949 = t1076 * t1228 + t1155 * t1197;
t948 = t1076 * t1229 - t1156 * t1197;
t946 = -t1022 * t1159 + t1023 * t1163;
t945 = -t1020 * t1159 + t1021 * t1163;
t944 = -t1015 * t1159 + t1016 * t1163;
t943 = t1015 * t1163 + t1016 * t1159;
t939 = t1008 * t1156 - t1316;
t938 = t1008 * t1155 + t1313;
t933 = -pkin(2) * t1294 + pkin(8) * t1031 - t1243;
t932 = t1000 * t1162 - t1158 * t999;
t931 = t1000 * t1158 + t1162 * t999;
t930 = -pkin(2) * t1024 + pkin(8) * t1016 + t1242;
t922 = t1160 * t1294 + t1164 * t967;
t921 = t1160 * t967 - t1164 * t1294;
t916 = t1024 * t1160 + t1164 * t944;
t915 = -t1024 * t1164 + t1160 * t944;
t914 = t1046 * t1220 + t1177;
t908 = -t942 + t1241;
t896 = -t1158 * t973 + t1162 * t975;
t895 = -t1158 * t972 + t1162 * t974;
t894 = t1158 * t975 + t1162 * t973;
t893 = t1158 * t974 + t1162 * t972;
t892 = -t1158 * t970 + t1162 * t971;
t891 = t1158 * t971 + t1162 * t970;
t890 = pkin(2) * t1054 + pkin(8) * t918;
t889 = -t1159 * t963 + t1163 * t965;
t888 = -t1159 * t962 + t1163 * t964;
t887 = t1159 * t965 + t1163 * t963;
t886 = -qJ(4) * t970 - t1271;
t881 = -t1155 * t960 - t1156 * t961;
t880 = t1155 * t1200 - t1156 * t956;
t879 = -t1155 * t961 + t1156 * t960;
t878 = -t1155 * t956 - t1156 * t1200;
t869 = -t1158 * t950 + t1162 * t951;
t868 = -t1158 * t948 + t1162 * t949;
t867 = t1158 * t951 + t1162 * t950;
t866 = t1158 * t949 + t1162 * t948;
t865 = -pkin(1) * t966 - pkin(2) * t1030 + t985;
t864 = -qJ(4) * t938 - t1274;
t859 = t1053 * t1160 + t1164 * t889;
t858 = -t1053 * t1164 + t1160 * t889;
t857 = -t1158 * t938 + t1162 * t939;
t856 = t1158 * t939 + t1162 * t938;
t851 = -pkin(1) * t943 + t1158 * t1099 + t1162 * t1098 + (t1158 * (t1123 + t1212) - t1162 * (-t1122 + t1203)) * pkin(8) + (-t1162 * t1130 + t1138 * t1158 - t1015) * pkin(2);
t842 = -pkin(8) * t963 - t917;
t841 = -t1159 * t931 + t1163 * t932;
t840 = -pkin(2) * t1053 + pkin(8) * t965 + t918;
t839 = -pkin(1) * t887 - pkin(2) * t963;
t838 = pkin(3) * t1200 + qJ(4) * t971 - t1274;
t834 = -pkin(7) * t966 - t1159 * t933 + t1163 * t981;
t831 = -pkin(3) * t956 + qJ(4) * t939 + t1271;
t830 = t1163 * t918 - t1263;
t829 = t1159 * t918 + t1255;
t827 = -pkin(7) * t943 - t1159 * t930 + t1163 * t978;
t818 = -t1054 * t1160 + t1164 * t830;
t817 = t1054 * t1164 + t1160 * t830;
t816 = -t1159 * t894 + t1163 * t896;
t815 = -t1159 * t893 + t1163 * t895;
t806 = -t1159 * t891 + t1163 * t892;
t805 = t1159 * t892 + t1163 * t891;
t800 = t1155 * t908 + t1333;
t799 = -t1155 * t914 + t1371;
t798 = -t1156 * t908 + t1334;
t797 = t1156 * t914 + t1372;
t796 = -t1158 * t879 + t1162 * t881;
t795 = -t1158 * t878 + t1162 * t880;
t794 = t1158 * t881 + t1162 * t879;
t793 = t1158 * t880 + t1162 * t878;
t788 = t1155 * t906 + t1333;
t787 = -t1155 * t1291 - t1371;
t786 = -t1156 * t906 + t1334;
t785 = t1156 * t1291 - t1372;
t780 = -t1159 * t867 + t1163 * t869;
t779 = -t1159 * t866 + t1163 * t868;
t774 = -t1159 * t856 + t1163 * t857;
t773 = t1159 * t857 + t1163 * t856;
t772 = -t1160 * t1200 + t1164 * t806;
t771 = t1160 * t806 + t1164 * t1200;
t770 = -pkin(1) * t829 - pkin(2) * t917;
t761 = t1160 * t956 + t1164 * t774;
t760 = t1160 * t774 - t1164 * t956;
t759 = t1261 + t1376;
t758 = t1270 - t1338;
t755 = -pkin(7) * t829 - pkin(8) * t1255 - t1159 * t890;
t754 = -pkin(8) * t891 - t1158 * t838 + t1162 * t886;
t753 = -pkin(4) * t1328 - pkin(5) * t1292 + qJ(6) * t907;
t750 = -pkin(7) * t887 - t1159 * t840 + t1163 * t842;
t749 = pkin(3) * t947 + qJ(4) * t757;
t740 = -pkin(8) * t856 - t1158 * t831 + t1162 * t864;
t739 = (pkin(5) * t1072 - (2 * qJD(6))) * t1048 + t791 + t1289;
t738 = pkin(2) * t1200 + pkin(8) * t892 + t1158 * t886 + t1162 * t838;
t735 = -t1158 * t798 + t1162 * t800;
t734 = -t1158 * t797 + t1162 * t799;
t733 = t1158 * t800 + t1162 * t798;
t732 = t1158 * t799 + t1162 * t797;
t731 = -t1159 * t794 + t1163 * t796;
t730 = -t1159 * t793 + t1163 * t795;
t729 = t1159 * t796 + t1163 * t794;
t728 = -t1158 * t786 + t1162 * t788;
t727 = -t1158 * t785 + t1162 * t787;
t726 = t1158 * t788 + t1162 * t786;
t725 = t1158 * t787 + t1162 * t785;
t720 = -qJ(4) * t879 - t756;
t719 = -pkin(2) * t956 + pkin(8) * t857 + t1158 * t864 + t1162 * t831;
t718 = t1160 * t983 + t1164 * t731;
t717 = t1160 * t731 - t1164 * t983;
t712 = qJ(6) * t1281 - t1180;
t711 = -pkin(3) * t983 + qJ(4) * t881 + t757;
t710 = -pkin(5) * t1281 + t1185;
t709 = t752 + t1377;
t708 = t751 - t1340;
t707 = (-t908 - t1241) * pkin(5) + t1171;
t706 = -pkin(5) * t1241 + t1171 + t1337;
t705 = -pkin(1) * t805 - pkin(2) * t891 - pkin(3) * t970 + t833;
t700 = qJ(6) * t1254 + t1180;
t699 = pkin(5) * t1254 + t1185;
t698 = -pkin(1) * t773 - pkin(2) * t856 - pkin(3) * t938 + t832;
t697 = t1162 * t757 - t1264;
t696 = t1158 * t757 + t1256;
t695 = -t1157 * t707 - t1276 * t908 - t1338;
t694 = -pkin(5) * t1268 + t1161 * t706 - t1376;
t693 = -t1340 + (-t1281 - t1290) * qJ(6) + (-t1302 - t988) * pkin(5) + t1194;
t692 = -t1377 - qJ(6) * t1301 + (t1281 - t969) * pkin(5) - t1185;
t691 = -pkin(1) * t729 - pkin(2) * t794 - pkin(3) * t879;
t684 = -t1159 * t733 + t1163 * t735;
t683 = -t1159 * t732 + t1163 * t734;
t682 = t1159 * t735 + t1163 * t733;
t681 = t1159 * t734 + t1163 * t732;
t680 = -t1159 * t726 + t1163 * t728;
t679 = -t1159 * t725 + t1163 * t727;
t678 = t1159 * t728 + t1163 * t726;
t677 = t1159 * t727 + t1163 * t725;
t674 = -t689 - t1359;
t669 = t1155 * t791 + t1156 * t690;
t668 = t1155 * t690 - t1156 * t791;
t667 = -t1157 * t712 + t1161 * t710;
t666 = t1157 * t710 + t1161 * t712;
t665 = -pkin(7) * t805 - t1159 * t738 + t1163 * t754;
t664 = t1164 * t684 + t1332;
t663 = t1164 * t683 - t1370;
t662 = t1160 * t684 - t1331;
t661 = t1160 * t683 + t1368;
t660 = t1164 * t680 + t1332;
t659 = t1164 * t679 + t1370;
t658 = t1160 * t680 - t1331;
t657 = t1160 * t679 - t1368;
t656 = -qJ(4) * t797 - t1155 * t709 + t1156 * t759;
t655 = -qJ(4) * t786 - t1155 * t708 + t1156 * t758;
t654 = -pkin(7) * t773 - t1159 * t719 + t1163 * t740;
t649 = -pkin(8) * t794 - t1158 * t711 + t1162 * t720;
t648 = qJ(4) * t799 + t1155 * t759 + t1156 * t709 + t1378;
t647 = qJ(4) * t788 + t1155 * t758 + t1156 * t708 - t1341;
t646 = -pkin(2) * t983 + pkin(8) * t796 + t1158 * t720 + t1162 * t711;
t645 = -t1157 * t699 + t1161 * t700 - t1359;
t644 = t1156 * t674 + t1279 * t1328 - t1373;
t643 = -t1159 * t696 + t1163 * t697;
t642 = t1159 * t697 + t1163 * t696;
t641 = t1155 * t739 + t1156 * t667;
t640 = t1155 * t667 - t1156 * t739;
t639 = -pkin(8) * t696 - qJ(4) * t1256 - t1158 * t749;
t638 = -t1160 * t947 + t1164 * t643;
t637 = t1160 * t643 + t1164 * t947;
t636 = pkin(2) * t947 + pkin(8) * t697 - qJ(4) * t1264 + t1162 * t749;
t635 = t1155 * t674 + t1214 * t1328 + t1374;
t634 = -qJ(4) * t798 - t1155 * t693 + t1156 * t695;
t633 = -qJ(4) * t785 - t1155 * t692 + t1156 * t694;
t632 = qJ(4) * t800 + t1155 * t695 + t1156 * t693 - t1341;
t631 = qJ(4) * t787 + t1155 * t694 + t1156 * t692 - t1378;
t630 = -pkin(9) * t666 + (pkin(5) * t1157 - t1276) * t739;
t629 = -t1155 * t753 + t1156 * t645 - t1373;
t628 = -pkin(1) * t681 - pkin(2) * t732 - pkin(3) * t797 - pkin(4) * t914 - t1270 - t1375;
t627 = -t1158 * t668 + t1162 * t669;
t626 = t1158 * t669 + t1162 * t668;
t625 = -pkin(1) * t678 - pkin(2) * t726 - pkin(3) * t786 + pkin(4) * t906 + t1261 - t1339;
t624 = -pkin(4) * t666 - pkin(5) * t712 - qJ(6) * t710;
t623 = -pkin(3) * t1328 + t1155 * t645 + t1156 * t753 + t1374;
t622 = -pkin(1) * t682 - pkin(2) * t733 - pkin(3) * t798 - t1161 * t707 + t1202 * t908 - t1339;
t621 = -pkin(1) * t677 - pkin(2) * t725 - pkin(3) * t785 + t1375 - t1157 * t706 + (-pkin(4) - t1278) * t1291;
t620 = -pkin(1) * t642 - pkin(2) * t696 - pkin(3) * t756;
t619 = -qJ(4) * t668 + (-pkin(9) * t1156 + t1279) * t689;
t618 = -pkin(8) * t732 - t1158 * t648 + t1162 * t656;
t617 = t1393 - t690;
t616 = -pkin(8) * t726 - t1158 * t647 + t1162 * t655;
t615 = pkin(8) * t734 + t1158 * t656 + t1162 * t648 + t1379;
t614 = -pkin(7) * t729 - t1159 * t646 + t1163 * t649;
t613 = -t1158 * t640 + t1162 * t641;
t612 = t1158 * t641 + t1162 * t640;
t611 = pkin(8) * t728 + t1158 * t655 + t1162 * t647 - t1342;
t610 = -t1157 * t700 - t1161 * t699 + t1393;
t609 = qJ(4) * t669 + (-pkin(9) * t1155 + t1214) * t689;
t608 = -t1158 * t635 + t1162 * t644 - t1387;
t607 = t1158 * t644 + t1162 * t635 + t1385;
t606 = -pkin(8) * t733 - t1158 * t632 + t1162 * t634;
t605 = -t1159 * t626 + t1163 * t627;
t604 = t1159 * t627 + t1163 * t626;
t603 = -pkin(8) * t725 - t1158 * t631 + t1162 * t633;
t602 = pkin(8) * t735 + t1158 * t634 + t1162 * t632 - t1342;
t601 = pkin(8) * t727 + t1158 * t633 + t1162 * t631 - t1379;
t600 = -pkin(7) * t642 - t1159 * t636 + t1163 * t639;
t599 = -t1158 * t623 + t1162 * t629 - t1387;
t598 = t1158 * t629 + t1162 * t623 + t1385;
t597 = t1160 * t689 + t1164 * t605;
t596 = t1160 * t605 - t1164 * t689;
t595 = -qJ(4) * t640 - t1155 * t624 + t1156 * t630;
t594 = -t1159 * t612 + t1163 * t613;
t593 = t1159 * t613 + t1163 * t612;
t592 = -pkin(3) * t666 + qJ(4) * t641 + t1155 * t630 + t1156 * t624;
t591 = -pkin(7) * t681 - t1159 * t615 + t1163 * t618;
t590 = -pkin(7) * t678 - t1159 * t611 + t1163 * t616;
t589 = t1160 * t666 + t1164 * t594;
t588 = t1160 * t594 - t1164 * t666;
t587 = -pkin(8) * t626 - t1158 * t609 + t1162 * t619;
t586 = -pkin(1) * t604 - pkin(2) * t626 - pkin(3) * t668 + pkin(4) * t791 - pkin(9) * t690;
t585 = -t1159 * t607 + t1163 * t608 - t1394;
t584 = -pkin(2) * t689 + pkin(8) * t627 + t1158 * t619 + t1162 * t609;
t583 = -pkin(7) * t682 - t1159 * t602 + t1163 * t606;
t582 = -pkin(7) * t677 - t1159 * t601 + t1163 * t603;
t581 = -t1159 * t598 + t1163 * t599 - t1394;
t580 = -pkin(1) * t593 - pkin(2) * t612 - pkin(3) * t640 - pkin(9) * t667 + (t1202 + t1278) * t739;
t579 = -pkin(8) * t612 - t1158 * t592 + t1162 * t595;
t578 = -pkin(2) * t666 + pkin(8) * t613 + t1158 * t595 + t1162 * t592;
t577 = -pkin(7) * t604 - t1159 * t584 + t1163 * t587;
t576 = -pkin(7) * t593 - t1159 * t578 + t1163 * t579;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1126, -t1127, 0, t1090, 0, 0, 0, 0, 0, 0, t1064, t1065, t1087, t1019, 0, 0, 0, 0, 0, 0, t916, t922, t859, t818, 0, 0, 0, 0, 0, 0, t761, t772, t718, t638, 0, 0, 0, 0, 0, 0, t660, t663, t1388, t597, 0, 0, 0, 0, 0, 0, t664, t1388, t659, t589; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1127, -t1126, 0, t1089, 0, 0, 0, 0, 0, 0, t1062, t1063, t1086, t1018, 0, 0, 0, 0, 0, 0, t915, t921, t858, t817, 0, 0, 0, 0, 0, 0, t760, t771, t717, t637, 0, 0, 0, 0, 0, 0, t658, t661, t1390, t596, 0, 0, 0, 0, 0, 0, t662, t1390, t657, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1091, t1092, 0, -t1039, 0, 0, 0, 0, 0, 0, t943, t966, t887, t829, 0, 0, 0, 0, 0, 0, t773, t805, t729, t642, 0, 0, 0, 0, 0, 0, t678, t681, t1384, t604, 0, 0, 0, 0, 0, 0, t682, t1384, t677, t593; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1127, 0, -t1126, 0, t1190, -t1109, -t1089, -pkin(6) * t1089, t1101 * t1164 - t1193, t1085 * t1164 - t1129 * t1160, t1095 * t1164 + t1159 * t1217, t1100 * t1164 + t1193, t1093 * t1164 + t1147 * t1160, qJDD(2) * t1160 + t1118 * t1164, -pkin(6) * t1062 - t1049 * t1160 + t1056 * t1164, -pkin(6) * t1063 - t1050 * t1160 + t1057 * t1164, -pkin(6) * t1086 + t1039 * t1164, -pkin(6) * t1018 - (pkin(1) * t1160 - pkin(7) * t1164) * t1039, t1164 * t946 - t1205, -t1083 * t1160 + t1164 * t888, -t1028 * t1160 + t1164 * t976, t1164 * t945 + t1205, -t1029 * t1160 + t1164 * t977, t1164 * t996 + t1195, -pkin(6) * t915 - t1160 * t851 + t1164 * t827, -pkin(6) * t921 - t1160 * t865 + t1164 * t834, -pkin(6) * t858 - t1160 * t839 + t1164 * t750, -pkin(6) * t817 - t1160 * t770 + t1164 * t755, t1164 * t780 + t1207, -t1014 * t1160 + t1164 * t730, -t1160 * t960 + t1164 * t815, t1164 * t779 - t1207, -t1160 * t961 + t1164 * t816, t1164 * t841 + t1195, -pkin(6) * t760 - t1160 * t698 + t1164 * t654, -pkin(6) * t771 - t1160 * t705 + t1164 * t665, -pkin(6) * t717 - t1160 * t691 + t1164 * t614, -pkin(6) * t637 - t1160 * t620 + t1164 * t600, t1325, t1400, t1389, t1344, -t1399, t1345, -pkin(6) * t658 - t1160 * t625 + t1164 * t590, -pkin(6) * t661 - t1160 * t628 + t1164 * t591, -t1160 * t617 + t1164 * t585 - t1395, -pkin(6) * t596 - t1160 * t586 + t1164 * t577, t1325, t1389, -t1400, t1345, t1399, t1344, -pkin(6) * t662 - t1160 * t622 + t1164 * t583, -t1160 * t610 + t1164 * t581 - t1395, -pkin(6) * t657 - t1160 * t621 + t1164 * t582, -pkin(6) * t588 - t1160 * t580 + t1164 * t576; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1126, 0, t1127, 0, t1109, t1190, t1090, pkin(6) * t1090, t1101 * t1160 + t1192, t1085 * t1160 + t1129 * t1164, t1095 * t1160 - t1159 * t1216, t1100 * t1160 - t1192, t1093 * t1160 - t1147 * t1164, -qJDD(2) * t1164 + t1118 * t1160, pkin(6) * t1064 + t1049 * t1164 + t1056 * t1160, pkin(6) * t1065 + t1050 * t1164 + t1057 * t1160, pkin(6) * t1087 + t1039 * t1160, pkin(6) * t1019 - (-pkin(1) * t1164 - pkin(7) * t1160) * t1039, t1160 * t946 + t1204, t1083 * t1164 + t1160 * t888, t1028 * t1164 + t1160 * t976, t1160 * t945 - t1204, t1029 * t1164 + t1160 * t977, t1160 * t996 - t1142, pkin(6) * t916 + t1160 * t827 + t1164 * t851, pkin(6) * t922 + t1160 * t834 + t1164 * t865, pkin(6) * t859 + t1160 * t750 + t1164 * t839, pkin(6) * t818 + t1160 * t755 + t1164 * t770, t1160 * t780 - t1206, t1014 * t1164 + t1160 * t730, t1160 * t815 + t1164 * t960, t1160 * t779 + t1206, t1160 * t816 + t1164 * t961, t1160 * t841 - t1142, pkin(6) * t761 + t1160 * t654 + t1164 * t698, pkin(6) * t772 + t1160 * t665 + t1164 * t705, pkin(6) * t718 + t1160 * t614 + t1164 * t691, pkin(6) * t638 + t1160 * t600 + t1164 * t620, t1327, t1402, t1391, t1346, -t1401, t1347, pkin(6) * t660 + t1160 * t590 + t1164 * t625, pkin(6) * t663 + t1160 * t591 + t1164 * t628, t1160 * t585 + t1164 * t617 + t1396, pkin(6) * t597 + t1160 * t577 + t1164 * t586, t1327, t1391, -t1402, t1347, t1401, t1346, pkin(6) * t664 + t1160 * t583 + t1164 * t622, t1160 * t581 + t1164 * t610 + t1396, pkin(6) * t659 + t1160 * t582 + t1164 * t621, pkin(6) * t589 + t1160 * t576 + t1164 * t580; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1132, t1133, 0, 0, (t1122 + t1203) * t1159, t1121 * t1163 + t1124 * t1159, t1135 * t1163 + t1232, (t1123 - t1212) * t1163, t1137 * t1159 + t1230, 0, pkin(1) * t1124 + pkin(7) * t1094 + t1234, -pkin(1) * t1121 + pkin(7) * t1096 - t1235, pkin(1) * t1128 + pkin(7) * t1125 + t1040, pkin(1) * t1114 + pkin(7) * t1040, t1022 * t1163 + t1023 * t1159, t1159 * t964 + t1163 * t962, t1032 * t1163 + t1034 * t1159, t1020 * t1163 + t1021 * t1159, t1033 * t1163 + t1035 * t1159, t1058 * t1163 + t1059 * t1159, -pkin(1) * t1024 + pkin(7) * t944 + t1159 * t978 + t1163 * t930, -pkin(1) * t1294 + pkin(7) * t967 + t1159 * t981 + t1163 * t933, -pkin(1) * t1053 + pkin(7) * t889 + t1159 * t842 + t1163 * t840, pkin(1) * t1054 + pkin(7) * t830 - pkin(8) * t1263 + t1163 * t890, t1159 * t869 + t1163 * t867, t1159 * t795 + t1163 * t793, t1159 * t895 + t1163 * t893, t1159 * t868 + t1163 * t866, t1159 * t896 + t1163 * t894, t1159 * t932 + t1163 * t931, -pkin(1) * t956 + pkin(7) * t774 + t1159 * t740 + t1163 * t719, pkin(1) * t1200 + pkin(7) * t806 + t1159 * t754 + t1163 * t738, -pkin(1) * t983 + pkin(7) * t731 + t1159 * t649 + t1163 * t646, pkin(1) * t947 + pkin(7) * t643 + t1159 * t639 + t1163 * t636, t1303, t1398, t1382, t1324, -t1397, t1322, pkin(7) * t680 + t1159 * t616 + t1163 * t611 - t1343, pkin(7) * t683 + t1159 * t618 + t1163 * t615 + t1380, t1159 * t608 + t1163 * t607 + t1392, -pkin(1) * t689 + pkin(7) * t605 + t1159 * t587 + t1163 * t584, t1303, t1382, -t1398, t1322, t1397, t1324, pkin(7) * t684 + t1159 * t606 + t1163 * t602 - t1343, t1159 * t599 + t1163 * t598 + t1392, pkin(7) * t679 + t1159 * t603 + t1163 * t601 - t1380, -pkin(1) * t666 + pkin(7) * t594 + t1159 * t579 + t1163 * t578;];
tauB_reg  = t1;
