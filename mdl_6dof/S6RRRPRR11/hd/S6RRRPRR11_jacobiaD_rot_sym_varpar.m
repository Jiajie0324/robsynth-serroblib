% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPRR11
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPRR11_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 12:10
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPRR11_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR11_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR11_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPRR11_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR11_jacobiaD_rot_sym_varpar: pkin has to be [11x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:18
	% EndTime: 2019-10-10 12:10:18
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:18
	% EndTime: 2019-10-10 12:10:18
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:18
	% EndTime: 2019-10-10 12:10:19
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:19
	% EndTime: 2019-10-10 12:10:20
	% DurationCPUTime: 1.05s
	% Computational Cost: add. (1479->91), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->91)
	t171 = sin(qJ(2));
	t172 = sin(qJ(1));
	t225 = cos(pkin(6));
	t195 = t172 * t225;
	t193 = t171 * t195;
	t174 = cos(qJ(2));
	t175 = cos(qJ(1));
	t209 = t175 * t174;
	t157 = -t193 + t209;
	t170 = sin(qJ(3));
	t173 = cos(qJ(3));
	t169 = sin(pkin(6));
	t213 = t169 * t172;
	t185 = -t157 * t170 + t173 * t213;
	t227 = t185 * qJD(3);
	t194 = t175 * t225;
	t192 = t174 * t194;
	t210 = t172 * t171;
	t153 = -t192 + t210;
	t212 = t169 * t174;
	t147 = atan2(-t153, -t212);
	t145 = sin(t147);
	t146 = cos(t147);
	t151 = t153 ^ 2;
	t165 = 0.1e1 / t169 ^ 2;
	t167 = 0.1e1 / t174 ^ 2;
	t150 = t151 * t165 * t167 + 0.1e1;
	t148 = 0.1e1 / t150;
	t164 = 0.1e1 / t169;
	t166 = 0.1e1 / t174;
	t199 = t153 * t164 * t166;
	t226 = (t146 * t199 - t145) * t148 + t145;
	t129 = -t145 * t153 - t146 * t212;
	t126 = 0.1e1 / t129;
	t144 = t157 * t173 + t170 * t213;
	t138 = 0.1e1 / t144;
	t127 = 0.1e1 / t129 ^ 2;
	t139 = 0.1e1 / t144 ^ 2;
	t182 = -t171 * t194 - t172 * t174;
	t183 = -t175 * t171 - t174 * t195;
	t135 = -t183 * qJD(1) - t182 * qJD(2);
	t207 = qJD(2) * t171;
	t196 = t167 * t207;
	t184 = t135 * t166 + t153 * t196;
	t215 = t148 * t164;
	t118 = t184 * t215;
	t188 = t145 * t212 - t146 * t153;
	t200 = t146 * t169 * t171;
	t114 = qJD(2) * t200 + t188 * t118 - t145 * t135;
	t224 = t114 * t126 * t127;
	t214 = t167 * t171;
	t187 = t153 * t214 - t166 * t182;
	t119 = t187 * t215;
	t115 = t188 * t119 + t145 * t182 + t200;
	t223 = t115 * t183;
	t134 = t182 * qJD(1) + t183 * qJD(2);
	t208 = qJD(1) * t169;
	t197 = t175 * t208;
	t124 = t144 * qJD(3) + t134 * t170 - t173 * t197;
	t137 = t185 ^ 2;
	t132 = t137 * t139 + 0.1e1;
	t218 = t139 * t185;
	t125 = t134 * t173 + t170 * t197 + t227;
	t220 = t125 * t138 * t139;
	t222 = (-t124 * t218 - t137 * t220) / t132 ^ 2;
	t168 = t166 * t167;
	t221 = (t135 * t153 * t167 + t151 * t168 * t207) * t165 / t150 ^ 2;
	t191 = qJD(2) * t225 + qJD(1);
	t206 = qJD(2) * t174;
	t133 = -qJD(1) * t192 - t175 * t206 + t191 * t210;
	t219 = t133 * t127;
	t217 = t145 * t183;
	t216 = t146 * t183;
	t211 = t169 * t175;
	t152 = t183 ^ 2;
	t122 = t152 * t127 + 0.1e1;
	t205 = 0.2e1 * (-t152 * t224 + t183 * t219) / t122 ^ 2;
	t204 = 0.2e1 * t224;
	t203 = 0.2e1 * t222;
	t202 = -0.2e1 * t221;
	t201 = t185 * t220;
	t198 = t172 * t208;
	t189 = t170 * t138 + t173 * t218;
	t186 = -t170 * t182 + t173 * t211;
	t142 = t170 * t211 + t173 * t182;
	t136 = -qJD(1) * t193 - t172 * t207 + t191 * t209;
	t130 = 0.1e1 / t132;
	t120 = 0.1e1 / t122;
	t117 = t226 * t183;
	t113 = (t187 * t202 + (t135 * t214 + t136 * t166 + (-t182 * t214 + (0.2e1 * t168 * t171 ^ 2 + t166) * t153) * qJD(2)) * t148) * t164;
	t1 = [(-t183 * t166 * t202 + (-t133 * t166 - t183 * t196) * t148) * t164, t113, 0, 0, 0, 0; t153 * t126 * t205 + (-t135 * t126 + (t114 * t153 + t117 * t133) * t127) * t120 - ((t117 * t204 - t226 * t219) * t120 + (t117 * t205 + ((t118 * t148 * t199 + t202) * t217 + (0.2e1 * t199 * t221 - t118 + (-t184 * t164 + t118) * t148) * t216) * t120) * t127) * t183, (-t126 * t157 - t127 * t223) * t205 + (-t204 * t223 + t134 * t126 + (-t157 * t114 + t115 * t133 + (t169 * t206 - t113 * t153 - t119 * t135 + (t119 * t212 + t182) * t118) * t216 + (t118 * t119 * t153 - t136 + (t113 * t174 + (-qJD(2) * t119 - t118) * t171) * t169) * t217) * t127) * t120, 0, 0, 0, 0; (t138 * t186 - t142 * t218) * t203 + ((t142 * qJD(3) - t136 * t170 + t173 * t198) * t138 - 0.2e1 * t142 * t201 + (t186 * t125 + (t186 * qJD(3) - t136 * t173 - t170 * t198) * t185 - t142 * t124) * t139) * t130, -t189 * t183 * t203 + (t189 * t133 - ((-qJD(3) * t138 + 0.2e1 * t201) * t173 + (t124 * t173 + (t125 + t227) * t170) * t139) * t183) * t130, -0.2e1 * t222 - 0.2e1 * (t124 * t139 * t130 - (-t130 * t220 - t139 * t222) * t185) * t185, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:19
	% EndTime: 2019-10-10 12:10:20
	% DurationCPUTime: 1.63s
	% Computational Cost: add. (3667->120), mult. (11094->248), div. (691->12), fcn. (14128->11), ass. (0->107)
	t203 = sin(qJ(3));
	t205 = cos(qJ(3));
	t202 = cos(pkin(6));
	t204 = sin(qJ(2));
	t265 = sin(qJ(1));
	t232 = t265 * t204;
	t224 = t202 * t232;
	t206 = cos(qJ(2));
	t207 = cos(qJ(1));
	t244 = t207 * t206;
	t217 = t224 - t244;
	t201 = sin(pkin(6));
	t233 = t201 * t265;
	t218 = t203 * t217 + t205 * t233;
	t266 = -0.2e1 * t218;
	t246 = t201 * t207;
	t273 = -qJD(1) * t224 - qJD(2) * t232 + (qJD(2) * t202 + qJD(1)) * t244 - qJD(3) * t246;
	t272 = 0.2e1 * t205;
	t231 = t265 * t206;
	t245 = t207 * t204;
	t216 = t202 * t231 + t245;
	t180 = t203 * t233 - t205 * t217;
	t169 = 0.1e1 / t180;
	t188 = t202 * t245 + t231;
	t164 = qJD(1) * t188 + qJD(2) * t216;
	t230 = qJD(1) * t246;
	t151 = qJD(3) * t218 - t164 * t205 + t203 * t230;
	t170 = 0.1e1 / t180 ^ 2;
	t270 = t151 * t170;
	t258 = t169 * t270;
	t271 = -0.2e1 * t216 * t258;
	t174 = t188 * t203 + t205 * t246;
	t248 = t201 * t204;
	t185 = -t202 * t205 + t203 * t248;
	t161 = atan2(-t174, t185);
	t154 = sin(t161);
	t155 = cos(t161);
	t149 = -t154 * t174 + t155 * t185;
	t147 = 0.1e1 / t149 ^ 2;
	t168 = t218 ^ 2;
	t145 = t147 * t168 + 0.1e1;
	t150 = qJD(3) * t180 - t164 * t203 - t205 * t230;
	t259 = t150 * t147;
	t167 = t174 ^ 2;
	t182 = 0.1e1 / t185 ^ 2;
	t160 = t167 * t182 + 0.1e1;
	t156 = 0.1e1 / t160;
	t223 = qJD(1) * t233;
	t242 = qJD(3) * t205;
	t152 = t188 * t242 + t203 * t273 - t205 * t223;
	t186 = t202 * t203 + t205 * t248;
	t247 = t201 * t206;
	t229 = qJD(2) * t247;
	t172 = qJD(3) * t186 + t203 * t229;
	t181 = 0.1e1 / t185;
	t251 = t174 * t182;
	t221 = -t152 * t181 + t172 * t251;
	t138 = t221 * t156;
	t222 = -t154 * t185 - t155 * t174;
	t134 = t138 * t222 - t154 * t152 + t155 * t172;
	t146 = 0.1e1 / t149;
	t148 = t146 * t147;
	t263 = t134 * t148;
	t241 = 0.2e1 * (-t168 * t263 - t218 * t259) / t145 ^ 2;
	t269 = t172 * t182;
	t187 = -t202 * t244 + t232;
	t219 = t181 * t187 + t247 * t251;
	t268 = t203 * t219;
	t153 = (-qJD(3) * t188 + t223) * t203 + t273 * t205;
	t267 = -0.2e1 * t174;
	t184 = t216 ^ 2;
	t250 = t184 * t170;
	t162 = 0.1e1 + t250;
	t163 = qJD(1) * t187 + qJD(2) * t217;
	t234 = t184 * t258;
	t254 = t170 * t216;
	t262 = (-t163 * t254 - t234) / t162 ^ 2;
	t253 = t181 * t269;
	t261 = (t152 * t251 - t167 * t253) / t160 ^ 2;
	t260 = t147 * t218;
	t257 = t154 * t218;
	t256 = t155 * t218;
	t252 = t174 * t181;
	t249 = t216 * t203;
	t243 = qJD(2) * t204;
	t240 = -0.2e1 * t261;
	t239 = t148 * t266;
	t238 = t181 * t261;
	t237 = t147 * t257;
	t236 = t147 * t256;
	t227 = t253 * t267;
	t176 = t188 * t205 - t203 * t246;
	t225 = t254 * t262;
	t220 = -t176 * t181 + t186 * t251;
	t214 = -t154 + (t155 * t252 + t154) * t156;
	t173 = -qJD(3) * t185 + t205 * t229;
	t165 = qJD(1) * t216 + qJD(2) * t188;
	t158 = 0.1e1 / t162;
	t143 = 0.1e1 / t145;
	t142 = t156 * t268;
	t141 = t220 * t156;
	t137 = t214 * t218;
	t136 = (t154 * t187 + t155 * t247) * t203 + t222 * t142;
	t135 = t141 * t222 - t154 * t176 + t155 * t186;
	t133 = t220 * t240 + (t186 * t227 - t153 * t181 + (t152 * t186 + t172 * t176 + t173 * t174) * t182) * t156;
	t131 = t240 * t268 + (t219 * t242 + (t227 * t247 + t165 * t181 + (-t172 * t187 + (t152 * t206 - t174 * t243) * t201) * t182) * t203) * t156;
	t1 = [t238 * t266 + (-t150 * t181 - t218 * t269) * t156, t131, t133, 0, 0, 0; t174 * t146 * t241 + (-t152 * t146 + (t134 * t174 + t137 * t150) * t147) * t143 - (-t137 * t147 * t241 + (-0.2e1 * t137 * t263 + (-t138 * t156 * t252 + t240) * t237 + (t238 * t267 - t138 + (t138 - t221) * t156) * t236 - t214 * t259) * t143) * t218, (-t136 * t260 + t146 * t249) * t241 + (-t136 * t259 + (t163 * t203 - t216 * t242) * t146 + (t136 * t239 + t147 * t249) * t134 + (-t131 * t174 - t142 * t152 + (-t203 * t243 + t206 * t242) * t201 + (-t142 * t185 + t187 * t203) * t138) * t236 + (t187 * t242 - t131 * t185 - t142 * t172 + t165 * t203 + (t142 * t174 - t203 * t247) * t138) * t237) * t143, (-t135 * t260 - t146 * t180) * t241 + (t135 * t134 * t239 + t151 * t146 + (-t180 * t134 - t135 * t150 + (-t133 * t174 - t141 * t152 + t173 + (-t141 * t185 - t176) * t138) * t256 + (-t133 * t185 - t141 * t172 - t153 + (t141 * t174 - t186) * t138) * t257) * t147) * t143, 0, 0, 0; -0.2e1 * t187 * t169 * t262 + 0.2e1 * t176 * t225 + (-(-t163 * t170 + t271) * t176 - t153 * t254 + t165 * t169 - t187 * t270) * t158, 0.2e1 * (-t169 * t217 + t205 * t250) * t262 + (t234 * t272 + t164 * t169 + (qJD(3) * t184 * t203 + t163 * t216 * t272 - t151 * t217) * t170) * t158, t225 * t266 + (t218 * t271 + (-t150 * t216 - t163 * t218) * t170) * t158, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:19
	% EndTime: 2019-10-10 12:10:20
	% DurationCPUTime: 1.50s
	% Computational Cost: add. (2350->112), mult. (7168->247), div. (687->14), fcn. (9017->13), ass. (0->110)
	t300 = qJD(3) - qJD(5);
	t232 = sin(qJ(2));
	t233 = sin(qJ(1));
	t236 = cos(qJ(2));
	t237 = cos(qJ(1));
	t294 = cos(pkin(6));
	t260 = t237 * t294;
	t212 = t232 * t260 + t233 * t236;
	t261 = t233 * t294;
	t213 = t232 * t237 + t236 * t261;
	t196 = qJD(1) * t213 + qJD(2) * t212;
	t256 = t236 * t260;
	t279 = t233 * t232;
	t211 = -t256 + t279;
	t209 = t211 ^ 2;
	t229 = sin(pkin(6));
	t225 = 0.1e1 / t229 ^ 2;
	t227 = 0.1e1 / t236 ^ 2;
	t208 = t209 * t225 * t227 + 0.1e1;
	t226 = 0.1e1 / t236;
	t228 = t226 * t227;
	t276 = qJD(2) * t232;
	t289 = (t196 * t211 * t227 + t209 * t228 * t276) * t225 / t208 ^ 2;
	t299 = -0.2e1 * t289;
	t224 = 0.1e1 / t229;
	t298 = t211 * t224;
	t235 = cos(qJ(3));
	t297 = t300 * t235;
	t231 = sin(qJ(3));
	t296 = t300 * t231;
	t281 = t229 * t236;
	t207 = atan2(t211, t281);
	t203 = sin(t207);
	t204 = cos(t207);
	t205 = 0.1e1 / t208;
	t265 = t226 * t298;
	t295 = (t204 * t265 - t203) * t205 + t203;
	t195 = qJD(1) * t212 + qJD(2) * t213;
	t257 = t232 * t261;
	t278 = t237 * t236;
	t215 = -t257 + t278;
	t282 = t229 * t233;
	t202 = t215 * t235 + t231 * t282;
	t277 = qJD(1) * t229;
	t263 = t237 * t277;
	t174 = qJD(3) * t202 - t195 * t231 - t235 * t263;
	t245 = -t215 * t231 + t235 * t282;
	t175 = qJD(3) * t245 - t195 * t235 + t231 * t263;
	t230 = sin(qJ(5));
	t234 = cos(qJ(5));
	t253 = -t202 * t230 - t234 * t245;
	t163 = qJD(5) * t253 + t174 * t230 + t175 * t234;
	t181 = t203 * t211 + t204 * t281;
	t178 = 0.1e1 / t181;
	t191 = t202 * t234 - t230 * t245;
	t183 = 0.1e1 / t191;
	t179 = 0.1e1 / t181 ^ 2;
	t184 = 0.1e1 / t191 ^ 2;
	t162 = qJD(5) * t191 - t174 * t234 + t175 * t230;
	t182 = t253 ^ 2;
	t167 = t182 * t184 + 0.1e1;
	t287 = t184 * t253;
	t185 = t183 * t184;
	t290 = t163 * t185;
	t293 = (-t162 * t287 - t182 * t290) / t167 ^ 2;
	t210 = t213 ^ 2;
	t172 = t179 * t210 + 0.1e1;
	t250 = qJD(2) * t294 + qJD(1);
	t275 = qJD(2) * t236;
	t194 = -qJD(1) * t256 - t237 * t275 + t250 * t279;
	t288 = t179 * t213;
	t262 = t227 * t276;
	t244 = (t196 * t226 + t211 * t262) * t224;
	t168 = t205 * t244;
	t248 = -t203 * t281 + t204 * t211;
	t266 = t204 * t229 * t232;
	t160 = -qJD(2) * t266 + t168 * t248 + t203 * t196;
	t291 = t160 * t178 * t179;
	t292 = (-t194 * t288 - t210 * t291) / t172 ^ 2;
	t251 = t230 * t231 + t234 * t235;
	t193 = t251 * t213;
	t286 = t184 * t193;
	t285 = t203 * t213;
	t284 = t204 * t213;
	t283 = t227 * t232;
	t280 = t229 * t237;
	t270 = 0.2e1 * t293;
	t269 = -0.2e1 * t292;
	t268 = -0.2e1 * t291;
	t267 = -0.2e1 * t185 * t253;
	t264 = t233 * t277;
	t259 = t163 * t267;
	t258 = t226 * t299;
	t200 = -t212 * t235 + t231 * t280;
	t246 = t212 * t231 + t235 * t280;
	t254 = -t200 * t230 - t234 * t246;
	t187 = t200 * t234 - t230 * t246;
	t252 = t230 * t235 - t231 * t234;
	t247 = t211 * t283 + t212 * t226;
	t197 = -qJD(1) * t257 - t233 * t276 + t250 * t278;
	t192 = t252 * t213;
	t177 = qJD(3) * t246 - t197 * t235 - t231 * t264;
	t176 = qJD(3) * t200 - t197 * t231 + t235 * t264;
	t170 = 0.1e1 / t172;
	t169 = t247 * t224 * t205;
	t165 = 0.1e1 / t167;
	t164 = t295 * t213;
	t161 = t169 * t248 + t203 * t212 - t266;
	t159 = (t247 * t299 + (t196 * t283 + t197 * t226 + (t212 * t283 + (0.2e1 * t228 * t232 ^ 2 + t226) * t211) * qJD(2)) * t205) * t224;
	t1 = [(t213 * t258 + (-t194 * t226 + t213 * t262) * t205) * t224, t159, 0, 0, 0, 0; t211 * t178 * t269 + (t196 * t178 + (-t160 * t211 - t164 * t194) * t179) * t170 + (t164 * t268 * t170 + (t164 * t269 + ((-t168 * t205 * t265 + 0.2e1 * t289) * t285 + (t258 * t298 + t168 + (-t168 + t244) * t205) * t284 - t295 * t194) * t170) * t179) * t213, 0.2e1 * (-t161 * t288 + t178 * t215) * t292 + (t161 * t213 * t268 + t195 * t178 + (t215 * t160 - t161 * t194 + (-t229 * t275 + t159 * t211 + t169 * t196 + (-t169 * t281 + t212) * t168) * t284 + (-t168 * t169 * t211 + t197 + (-t159 * t236 + (qJD(2) * t169 + t168) * t232) * t229) * t285) * t179) * t170, 0, 0, 0, 0; (t183 * t254 - t187 * t287) * t270 + ((qJD(5) * t187 - t176 * t234 + t177 * t230) * t183 + t187 * t259 + (t254 * t163 + (qJD(5) * t254 + t176 * t230 + t177 * t234) * t253 - t187 * t162) * t184) * t165, (t183 * t192 + t253 * t286) * t270 + (t162 * t286 + (t184 * t192 - t193 * t267) * t163 + (t183 * t252 + t251 * t287) * t194 + ((t183 * t297 + t287 * t296) * t234 + (t183 * t296 - t287 * t297) * t230) * t213) * t165, (t183 * t191 + t253 * t287) * t270 + (-t163 * t183 - t253 * t259 + (0.2e1 * t162 * t253 + t163 * t191) * t184) * t165, 0, -0.2e1 * t293 - 0.2e1 * (t162 * t184 * t165 - (-t165 * t290 - t184 * t293) * t253) * t253, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:10:20
	% EndTime: 2019-10-10 12:10:25
	% DurationCPUTime: 5.46s
	% Computational Cost: add. (14567->183), mult. (41112->340), div. (968->12), fcn. (52257->15), ass. (0->149)
	t413 = sin(qJ(2));
	t508 = cos(pkin(6));
	t509 = sin(qJ(1));
	t460 = t508 * t509;
	t406 = t413 * t460;
	t417 = cos(qJ(2));
	t510 = cos(qJ(1));
	t461 = t508 * t510;
	t471 = t509 * t413;
	t385 = -qJD(1) * t406 - qJD(2) * t471 + (t510 * qJD(1) + qJD(2) * t461) * t417;
	t412 = sin(qJ(3));
	t416 = cos(qJ(3));
	t434 = t413 * t461 + t509 * t417;
	t507 = sin(pkin(6));
	t459 = t510 * t507;
	t426 = t434 * t412 + t416 * t459;
	t458 = t509 * t507;
	t445 = qJD(1) * t458;
	t357 = qJD(3) * t426 - t385 * t416 - t412 * t445;
	t390 = -t412 * t459 + t434 * t416;
	t411 = sin(qJ(5));
	t415 = cos(qJ(5));
	t366 = t390 * t415 + t411 * t426;
	t427 = t390 * qJD(3) + t385 * t412 - t416 * t445;
	t327 = qJD(5) * t366 - t357 * t411 - t415 * t427;
	t470 = t412 * t507;
	t397 = t413 * t470 - t508 * t416;
	t469 = t416 * t507;
	t398 = t508 * t412 + t413 * t469;
	t381 = t397 * t411 + t398 * t415;
	t457 = t507 * qJD(2) * t417;
	t388 = t398 * qJD(3) + t412 * t457;
	t389 = -t397 * qJD(3) + t416 * t457;
	t338 = t381 * qJD(5) - t388 * t415 + t389 * t411;
	t451 = t397 * t415 - t398 * t411;
	t339 = t451 * qJD(5) + t388 * t411 + t389 * t415;
	t538 = t390 * t411 - t415 * t426;
	t361 = t538 ^ 2;
	t377 = 0.1e1 / t451 ^ 2;
	t342 = t361 * t377 + 0.1e1;
	t340 = 0.1e1 / t342;
	t376 = 0.1e1 / t451;
	t488 = t538 * t377;
	t441 = t366 * t376 + t381 * t488;
	t524 = t338 * t377;
	t494 = t376 * t524;
	t511 = -0.2e1 * t538;
	t466 = t494 * t511;
	t502 = (t327 * t488 + t361 * t494) / t342 ^ 2;
	t475 = -0.2e1 * t502;
	t541 = qJD(5) * t538 + t357 * t415 - t427 * t411;
	t299 = (t541 * t376 - (t327 * t381 + t338 * t366 + t339 * t538) * t377 + t381 * t466) * t340 - t441 * t475;
	t444 = t327 * t376 + t338 * t488;
	t309 = t444 * t340;
	t543 = t441 * t340;
	t549 = t299 * t451 - (t538 * t543 - t381) * t309 + t543 * t338 - t541;
	t548 = t299 * t538 + (t451 * t543 - t366) * t309 - t543 * t327 + t339;
	t343 = atan2(-t538, -t451);
	t335 = sin(t343);
	t336 = cos(t343);
	t454 = t335 * t451 - t336 * t538;
	t305 = -t335 * t366 + t336 * t381 + t454 * t543;
	t433 = t510 * t413 + t417 * t460;
	t383 = qJD(1) * t434 + qJD(2) * t433;
	t455 = t510 * t417 - t406;
	t393 = t412 * t458 + t455 * t416;
	t446 = qJD(1) * t459;
	t425 = qJD(3) * t393 - t383 * t412 - t416 * t446;
	t436 = t455 * t412 - t416 * t458;
	t354 = -t436 * qJD(3) - t383 * t416 + t412 * t446;
	t491 = t354 * t415;
	t513 = t393 * t411 - t415 * t436;
	t325 = -qJD(5) * t513 + t411 * t425 + t491;
	t372 = t393 * t415 + t411 * t436;
	t410 = sin(qJ(6));
	t414 = cos(qJ(6));
	t351 = t372 * t414 - t410 * t433;
	t399 = -t417 * t461 + t471;
	t382 = t399 * qJD(1) - t455 * qJD(2);
	t317 = t351 * qJD(6) + t325 * t410 - t382 * t414;
	t350 = t372 * t410 + t414 * t433;
	t481 = qJD(6) * t350;
	t318 = t325 * t414 + t382 * t410 - t481;
	t345 = 0.1e1 / t351;
	t346 = 0.1e1 / t351 ^ 2;
	t500 = t318 * t345 * t346;
	t512 = 0.2e1 * t350;
	t465 = t500 * t512;
	t534 = (((-t318 + t481) * t410 - t317 * t414) * t346 + (qJD(6) * t345 + t465) * t414) * t513;
	t493 = t346 * t350;
	t443 = -t410 * t345 + t414 * t493;
	t527 = t443 * t513;
	t303 = t454 * t309 - t335 * t327 + t336 * t338;
	t322 = -t335 * t538 - t336 * t451;
	t320 = 0.1e1 / t322 ^ 2;
	t525 = t303 * t320;
	t449 = t411 * t412 + t415 * t416;
	t521 = t449 * t433;
	t518 = -t411 * t416 + t412 * t415;
	t520 = t518 * t433;
	t519 = t393 * qJD(5) - t425;
	t516 = qJD(5) - qJD(3);
	t319 = 0.1e1 / t322;
	t362 = t513 ^ 2;
	t316 = t362 * t320 + 0.1e1;
	t492 = t354 * t411;
	t324 = qJD(5) * t372 - t415 * t425 + t492;
	t498 = t324 * t320;
	t505 = t319 * t525;
	t506 = (-t362 * t505 + t498 * t513) / t316 ^ 2;
	t344 = t350 ^ 2;
	t332 = t344 * t346 + 0.1e1;
	t503 = (t317 * t493 - t344 * t500) / t332 ^ 2;
	t499 = t320 * t513;
	t330 = 0.1e1 / t332;
	t497 = t330 * t346;
	t496 = t335 * t513;
	t495 = t336 * t513;
	t489 = t538 * t376;
	t479 = 0.2e1 * t506;
	t478 = 0.2e1 * t505;
	t477 = -0.2e1 * t503;
	t476 = 0.2e1 * t503;
	t474 = t346 * t503;
	t473 = t376 * t502;
	t472 = t317 * t497;
	t468 = -0.2e1 * t319 * t506;
	t467 = t320 * t479;
	t464 = t513 * t478;
	t349 = -t366 * t414 + t399 * t410;
	t348 = -t366 * t410 - t399 * t414;
	t373 = t518 * t399;
	t430 = t411 * t469 - t415 * t470;
	t394 = t430 * t417;
	t440 = t373 * t376 + t394 * t488;
	t437 = -t335 + (-t336 * t489 + t335) * t340;
	t359 = -t410 * t521 + t455 * t414;
	t360 = -t455 * t410 - t414 * t521;
	t435 = t436 * qJD(5);
	t384 = qJD(1) * t433 + qJD(2) * t434;
	t358 = -t430 * t413 * qJD(2) + t516 * t417 * (t411 * t470 + t415 * t469);
	t334 = -t516 * t399 * t449 + t384 * t518;
	t333 = t449 * t382 - t516 * t520;
	t314 = 0.1e1 / t316;
	t313 = t440 * t340;
	t308 = t437 * t513;
	t306 = t454 * t313 - t335 * t373 + t336 * t394;
	t302 = t440 * t475 + (-t394 * t466 + t334 * t376 + (t327 * t394 + t338 * t373 + t358 * t538) * t377) * t340;
	t1 = [-0.2e1 * t513 * t473 + (t324 * t376 + t513 * t524) * t340, t302, t299, 0, -t299, 0; -t538 * t468 + (-t327 * t319 + (t303 * t538 - t308 * t324) * t320) * t314 + (t308 * t467 + (t308 * t478 - t437 * t498 + (-(t309 * t340 * t489 + t475) * t496 - (-t473 * t511 - t309 + (t309 - t444) * t340) * t495) * t320) * t314) * t513, (t306 * t499 - t319 * t520) * t479 + (t306 * t464 + (-t520 * t303 - t306 * t324 - (-t302 * t538 - t313 * t327 + t358 + (t313 * t451 - t373) * t309) * t495 - (t302 * t451 - t313 * t338 - t334 + (t313 * t538 - t394) * t309) * t496) * t320 + (-t382 * t518 - t516 * t521) * t319) * t314, -t372 * t468 + ((t519 * t411 - t415 * t435 - t491) * t319 + t372 * t525 - (t549 * t335 - t548 * t336) * t499) * t314 - (t513 * t467 + (-t498 + t464) * t314) * t305, 0, (t305 * t499 - t319 * t372) * t479 + (t305 * t464 + t325 * t319 + (-t372 * t303 - t305 * t324 - t548 * t495 + t549 * t496) * t320) * t314, 0; (-t345 * t348 + t349 * t493) * t476 + ((t349 * qJD(6) - t384 * t414 + t410 * t541) * t345 + t349 * t465 + (-t348 * t318 - (-t348 * qJD(6) + t384 * t410 + t414 * t541) * t350 - t349 * t317) * t346) * t330, (t474 * t512 - t472) * t360 + (-t318 * t497 + t345 * t477) * t359 + ((qJD(6) * t360 + t333 * t410 - t383 * t414) * t345 - (-qJD(6) * t359 + t333 * t414 + t383 * t410) * t493 + t360 * t465) * t330, t476 * t527 + (-t443 * (t411 * t435 + t519 * t415 + t492) + t534) * t330, 0, t477 * t527 + (t443 * t324 - t534) * t330, t477 + (t472 + (-t330 * t500 - t474) * t350) * t512;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end