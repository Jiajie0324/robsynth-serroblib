% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR11_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:34:46
% EndTime: 2019-03-09 19:35:13
% DurationCPUTime: 20.76s
% Computational Cost: add. (11071->768), mult. (26615->1005), div. (0->0), fcn. (21495->12), ass. (0->296)
t778 = cos(qJ(3));
t937 = cos(pkin(6));
t863 = t937 * qJD(1);
t817 = t863 + qJD(2);
t774 = sin(qJ(3));
t775 = sin(qJ(2));
t771 = sin(pkin(6));
t900 = qJD(1) * t771;
t874 = t775 * t900;
t847 = t774 * t874;
t671 = -t778 * t817 + t847;
t673 = t774 * t817 + t778 * t874;
t773 = sin(qJ(5));
t777 = cos(qJ(5));
t611 = t671 * t773 + t673 * t777;
t801 = qJD(3) * t817;
t852 = t937 * qJDD(1);
t812 = t852 + qJDD(2);
t884 = t775 * qJDD(1);
t866 = t771 * t884;
t779 = cos(qJ(2));
t887 = qJD(1) * qJD(2);
t867 = t779 * t887;
t971 = t771 * t867 + t866;
t594 = qJD(3) * t847 - t774 * t812 + (-t801 - t971) * t778;
t897 = qJD(2) * t779;
t870 = t774 * t897;
t895 = qJD(3) * t778;
t595 = t771 * (qJD(1) * (t775 * t895 + t870) + t774 * t884) + t774 * t801 - t778 * t812;
t893 = qJD(5) * t777;
t894 = qJD(5) * t773;
t527 = -t777 * t594 + t773 * t595 + t671 * t893 - t673 * t894;
t886 = qJDD(1) * t779;
t751 = t771 * t886;
t868 = t775 * t887;
t843 = t771 * t868;
t686 = qJDD(3) - t751 + t843;
t682 = -qJDD(5) + t686;
t873 = t779 * t900;
t730 = -qJD(3) + t873;
t721 = qJD(5) + t730;
t772 = sin(qJ(6));
t776 = cos(qJ(6));
t891 = qJD(6) * t776;
t881 = t776 * t527 - t772 * t682 + t721 * t891;
t892 = qJD(6) * t772;
t506 = -t611 * t892 + t881;
t575 = t611 * t776 + t721 * t772;
t861 = t527 * t772 + t776 * t682;
t507 = qJD(6) * t575 + t861;
t962 = -t777 * t671 + t673 * t773;
t967 = qJD(6) + t962;
t933 = t575 * t967;
t931 = t611 * t772;
t573 = -t776 * t721 + t931;
t934 = t573 * t967;
t936 = t506 * t772;
t977 = t967 * t776;
t989 = -((t507 + t933) * t772 - (t506 - t934) * t776) * MDP(30) - t682 * MDP(26) + (t575 * t977 + t936) * MDP(29);
t844 = pkin(1) * t863;
t813 = qJD(2) * t844;
t841 = pkin(1) * t852;
t878 = pkin(8) * t751 + t775 * t841 + t779 * t813;
t791 = -pkin(8) * t843 + t878;
t614 = pkin(9) * t812 + t791;
t837 = pkin(2) * t775 - pkin(9) * t779;
t808 = t837 * qJD(2);
t814 = -pkin(2) * t779 - pkin(9) * t775 - pkin(1);
t617 = (qJD(1) * t808 + qJDD(1) * t814) * t771;
t694 = pkin(8) * t873 + t775 * t844;
t648 = pkin(9) * t817 + t694;
t685 = t814 * t771;
t660 = qJD(1) * t685;
t896 = qJD(3) * t774;
t849 = t774 * t614 - t778 * t617 + t648 * t895 + t660 * t896;
t815 = qJDD(4) + t849;
t949 = pkin(3) + pkin(4);
t510 = pkin(10) * t594 - t686 * t949 + t815;
t681 = t686 * qJ(4);
t717 = t730 * qJD(4);
t807 = t778 * t614 + t774 * t617 - t648 * t896 + t660 * t895;
t520 = t681 - t717 + t807;
t513 = pkin(10) * t595 + t520;
t592 = -t774 * t648 + t778 * t660;
t889 = qJD(4) - t592;
t968 = -pkin(10) * t673 + t889;
t548 = t730 * t949 + t968;
t593 = t778 * t648 + t774 * t660;
t562 = pkin(10) * t671 + t593;
t719 = t730 * qJ(4);
t554 = t562 - t719;
t850 = -t777 * t510 + t773 * t513 + t548 * t894 + t554 * t893;
t498 = pkin(5) * t682 + t850;
t946 = sin(qJ(1));
t839 = t937 * t946;
t947 = cos(qJ(1));
t706 = -t775 * t839 + t779 * t947;
t875 = t771 * t946;
t641 = t706 * t774 - t778 * t875;
t642 = t706 * t778 + t774 * t875;
t582 = t641 * t777 - t642 * t773;
t922 = t771 * t775;
t700 = t774 * t922 - t778 * t937;
t701 = t774 * t937 + t778 * t922;
t821 = t700 * t777 - t701 * t773;
t840 = t937 * t947;
t704 = t775 * t840 + t779 * t946;
t876 = t771 * t947;
t637 = t704 * t774 + t778 * t876;
t638 = t704 * t778 - t774 * t876;
t966 = t637 * t777 - t638 * t773;
t802 = g(1) * t582 + g(2) * t966 + g(3) * t821;
t986 = t498 + t802;
t983 = -t802 - t850;
t982 = t778 * t873 - t895;
t846 = t774 * t873;
t974 = t846 - t896;
t579 = t637 * t773 + t638 * t777;
t703 = t775 * t946 - t779 * t840;
t980 = t579 * t772 + t703 * t776;
t979 = t579 * t776 - t703 * t772;
t860 = -t594 * t773 - t777 * t595;
t528 = qJD(5) * t611 + t860;
t524 = qJDD(6) + t528;
t920 = t772 * t524;
t978 = t967 * t977 + t920;
t948 = pkin(9) - pkin(10);
t733 = t948 * t778;
t691 = -pkin(8) * t874 + t779 * t844;
t675 = t774 * t691;
t692 = t837 * t900;
t856 = -t692 * t778 + t675;
t918 = t778 * t779;
t976 = (-pkin(10) * t918 - t775 * t949) * t900 + t856 - qJD(3) * t733;
t910 = t778 * t691 + t774 * t692;
t601 = qJ(4) * t874 + t910;
t975 = pkin(10) * t846 + t948 * t896 + t601;
t919 = t776 * t524;
t973 = -t772 * t967 ^ 2 + t919;
t972 = pkin(5) * t611;
t710 = t773 * t774 + t777 * t778;
t921 = t771 * t779;
t661 = t710 * t921;
t914 = (qJD(3) - qJD(5)) * t710 - qJD(1) * t661;
t913 = -t773 * t982 + t774 * t893 + t777 * t974 - t778 * t894;
t970 = qJ(4) * t982 - t774 * qJD(4) - t694;
t705 = t775 * t947 + t779 * t839;
t969 = -g(1) * t705 - g(2) * t703 + g(3) * t921;
t877 = pkin(1) * t937;
t792 = pkin(8) * t921 + t775 * t877;
t684 = pkin(9) * t937 + t792;
t857 = -t774 * t684 + t685 * t778;
t598 = pkin(3) * t921 - t857;
t563 = pkin(4) * t921 - pkin(10) * t701 + t598;
t912 = t778 * t684 + t774 * t685;
t597 = -qJ(4) * t921 + t912;
t568 = pkin(10) * t700 + t597;
t965 = t773 * t563 + t777 * t568;
t732 = t948 * t774;
t820 = t732 * t777 - t733 * t773;
t964 = -qJD(5) * t820 + t773 * t976 + t777 * t975;
t653 = t732 * t773 + t733 * t777;
t963 = -qJD(5) * t653 + t773 * t975 - t777 * t976;
t911 = t949 * t974 - t970;
t635 = qJD(3) * t701 + t771 * t870;
t871 = t771 * t897;
t636 = -qJD(3) * t700 + t778 * t871;
t696 = t792 * qJD(2);
t551 = t635 * pkin(3) - t636 * qJ(4) - t701 * qJD(4) + t696;
t961 = -t700 * pkin(3) + t701 * qJ(4);
t904 = t777 * qJ(4) - t773 * t949;
t960 = (qJDD(2) + 0.2e1 * t852) * t771;
t958 = t778 * pkin(3) + t774 * qJ(4) + pkin(2);
t647 = -t817 * pkin(2) - t691;
t566 = t671 * pkin(3) - t673 * qJ(4) + t647;
t944 = pkin(9) * t686;
t957 = t566 * t730 + t944;
t956 = t967 * (pkin(11) * t967 + t972) + t986;
t616 = t673 * pkin(3) + t671 * qJ(4);
t571 = -pkin(4) * t673 - t616;
t713 = -pkin(11) + t904;
t955 = t967 * (-pkin(11) * t962 + qJD(6) * t713 + t571 - t972) - t986;
t693 = t771 * t808;
t906 = -pkin(8) * t922 + t779 * t877;
t695 = t906 * qJD(2);
t810 = -t684 * t895 - t685 * t896 + t693 * t778 - t774 * t695;
t898 = qJD(2) * t775;
t872 = t771 * t898;
t539 = -pkin(10) * t636 - t872 * t949 - t810;
t806 = -t684 * t896 + t685 * t895 + t774 * t693 + t778 * t695;
t544 = qJ(4) * t872 - qJD(4) * t921 + t806;
t540 = pkin(10) * t635 + t544;
t953 = -qJD(5) * t965 + t539 * t777 - t540 * t773;
t583 = t641 * t773 + t642 * t777;
t626 = t700 * t773 + t701 * t777;
t805 = t773 * t510 + t777 * t513 + t548 * t893 - t554 * t894;
t952 = g(1) * t583 + g(2) * t579 + g(3) * t626 - t805;
t950 = t673 ^ 2;
t781 = qJD(1) ^ 2;
t945 = pkin(3) * t686;
t938 = pkin(9) * qJD(3);
t572 = -t719 + t593;
t935 = t572 * t730;
t932 = t593 * t730;
t930 = t671 * t673;
t929 = t671 * t730;
t928 = t673 * t730;
t819 = t773 * t778 - t774 * t777;
t924 = t819 * t776;
t768 = t771 ^ 2;
t923 = t768 * t781;
t915 = -pkin(5) * t874 - t963;
t830 = -qJ(4) * t773 - t777 * t949;
t909 = -qJD(5) * t830 + t562 * t773 - t777 * t968;
t908 = qJD(5) * t904 + t562 * t777 + t773 * t968;
t907 = -pkin(3) * t974 + t970;
t769 = t775 ^ 2;
t903 = -t779 ^ 2 + t769;
t902 = MDP(22) * t611;
t901 = MDP(33) * t967;
t882 = t779 * t923;
t683 = -t937 * pkin(2) - t906;
t869 = 0.2e1 * pkin(1) * t768;
t497 = -pkin(11) * t682 + t805;
t848 = pkin(8) * t971 + t775 * t813 - t779 * t841;
t615 = -t812 * pkin(2) + t848;
t521 = t595 * pkin(3) + t594 * qJ(4) - t673 * qJD(4) + t615;
t514 = -pkin(4) * t595 - t521;
t500 = pkin(5) * t528 - pkin(11) * t527 + t514;
t862 = -t772 * t497 + t776 * t500;
t859 = -t772 * t914 + t776 * t874;
t858 = -t772 * t874 - t776 * t914;
t855 = t721 * t777;
t707 = t778 * pkin(4) + t958;
t838 = t771 * t781 * t937;
t836 = g(1) * t637 - g(2) * t641;
t835 = g(1) * t638 - g(2) * t642;
t834 = -g(1) * t703 + g(2) * t705;
t833 = -g(1) * t706 - g(2) * t704;
t620 = pkin(5) * t710 + pkin(11) * t819 + t707;
t832 = -pkin(11) * t874 - qJD(6) * t620 + t964;
t831 = -pkin(5) * t913 + pkin(11) * t914 + qJD(6) * t653 - t911;
t596 = t683 - t961;
t829 = t776 * t497 + t772 * t500;
t518 = t548 * t773 + t554 * t777;
t516 = pkin(11) * t721 + t518;
t553 = -pkin(4) * t671 - t566;
t519 = pkin(5) * t962 - pkin(11) * t611 + t553;
t504 = t516 * t776 + t519 * t772;
t828 = t516 * t772 - t519 * t776;
t533 = pkin(11) * t921 + t965;
t567 = -pkin(4) * t700 - t596;
t534 = -pkin(5) * t821 - pkin(11) * t626 + t567;
t827 = t533 * t776 + t534 * t772;
t826 = -t533 * t772 + t534 * t776;
t517 = t548 * t777 - t554 * t773;
t824 = t563 * t777 - t568 * t773;
t816 = 0.2e1 * t863 + qJD(2);
t809 = -t626 * t772 + t776 * t921;
t600 = t626 * t776 + t772 * t921;
t804 = t773 * t539 + t777 * t540 + t563 * t893 - t568 * t894;
t800 = t812 * MDP(8);
t799 = -t819 * t891 - t859;
t798 = t819 * t892 - t858;
t795 = -g(3) * t922 + t833;
t515 = -pkin(5) * t721 - t517;
t790 = -pkin(11) * t524 + (t515 + t517) * t967;
t789 = -t647 * t730 - t944;
t787 = g(1) * t641 + g(2) * t637 + g(3) * t700 - t849;
t786 = -t713 * t524 + (-t515 + t909) * t967;
t785 = t730 * t938 - t969;
t784 = -t521 + t785;
t783 = t566 * t673 + qJDD(4) - t787;
t541 = -t635 * pkin(4) - t551;
t782 = g(1) * t642 + g(2) * t638 + g(3) * t701 - t592 * t730 - t807;
t712 = pkin(5) - t830;
t619 = t710 * t705;
t618 = t710 * t703;
t604 = -pkin(3) * t874 + t856;
t570 = pkin(3) * t730 + t889;
t557 = t583 * t776 - t705 * t772;
t556 = -t583 * t772 - t705 * t776;
t555 = -t594 - t929;
t550 = -pkin(3) * t872 - t810;
t547 = qJD(5) * t821 + t635 * t773 + t636 * t777;
t546 = qJD(5) * t626 - t635 * t777 + t636 * t773;
t532 = -pkin(5) * t921 - t824;
t526 = qJD(6) * t809 + t547 * t776 - t772 * t872;
t525 = qJD(6) * t600 + t547 * t772 + t776 * t872;
t522 = t815 - t945;
t505 = t546 * pkin(5) - t547 * pkin(11) + t541;
t502 = pkin(5) * t872 - t953;
t501 = -pkin(11) * t872 + t804;
t496 = -qJD(6) * t504 + t862;
t495 = -qJD(6) * t828 + t829;
t1 = [(t506 * t809 - t507 * t600 - t525 * t575 - t526 * t573) * MDP(30) + ((t522 * t779 - t570 * t898) * MDP(18) + (t592 * t898 + t779 * t849) * MDP(16) + (t594 * t779 + t673 * t898) * MDP(13) + (-t528 * t779 + t898 * t962) * MDP(25) + (-t520 * t779 + t572 * t898) * MDP(20) + (-t517 * t898 - t779 * t850) * MDP(27) + (t595 * t779 - t671 * t898) * MDP(14) + (t527 * t779 - t611 * t898) * MDP(24) + (t518 * t898 - t779 * t805) * MDP(28) + (-t593 * t898 + t779 * t807) * MDP(17) + (-t686 * t779 - t730 * t898) * MDP(15) + (-t682 * t779 - t721 * t898) * MDP(26)) * t771 + (t527 * t821 - t528 * t626 - t546 * t611 - t547 * t962) * MDP(23) + (-t546 * t721 - t682 * t821) * MDP(25) + (t520 * t597 + t572 * t544 + t521 * t596 + t566 * t551 + t522 * t598 + t570 * t550 - g(1) * (-pkin(1) * t946 - t704 * pkin(2) - pkin(3) * t638 + pkin(8) * t876 - t703 * pkin(9) - qJ(4) * t637) - g(2) * (pkin(1) * t947 + t706 * pkin(2) + t642 * pkin(3) + pkin(8) * t875 + t705 * pkin(9) + t641 * qJ(4))) * MDP(21) + (t521 * t700 + t550 * t730 + t551 * t671 + t566 * t635 + t595 * t596 - t598 * t686 + t835) * MDP(18) + (t683 * t595 + t615 * t700 + t647 * t635 + t696 * t671 + t857 * t686 - t810 * t730 + t835) * MDP(16) + (-t521 * t701 - t544 * t730 - t551 * t673 - t566 * t636 + t594 * t596 + t597 * t686 + t836) * MDP(20) + (-t683 * t594 + t615 * t701 + t647 * t636 + t696 * t673 - t912 * t686 + t806 * t730 - t836) * MDP(17) + ((qJDD(1) * t769 + 0.2e1 * t775 * t867) * MDP(4) + 0.2e1 * (t779 * t884 - t887 * t903) * MDP(5)) * t768 + (g(1) * t579 - g(2) * t583 - t514 * t821 + t567 * t528 + t541 * t962 + t553 * t546 - t824 * t682 + t721 * t953) * MDP(27) + (t635 * t730 - t686 * t700) * MDP(14) + (-t636 * t730 + t686 * t701) * MDP(13) + (t547 * t721 - t626 * t682) * MDP(24) + ((-qJD(6) * t827 - t501 * t772 + t505 * t776) * t967 + t826 * t524 - t496 * t821 - t828 * t546 + t502 * t573 + t532 * t507 - t498 * t809 + t515 * t525 + g(1) * t979 - g(2) * t557) * MDP(34) + (-(qJD(6) * t826 + t501 * t776 + t505 * t772) * t967 - t827 * t524 + t495 * t821 - t504 * t546 + t502 * t575 + t532 * t506 + t498 * t600 + t515 * t526 - g(1) * t980 - g(2) * t556) * MDP(35) + (t507 * t821 + t524 * t809 - t525 * t967 - t546 * t573) * MDP(32) + (-t524 * t821 + t546 * t967) * MDP(33) + (-t506 * t821 + t524 * t600 + t526 * t967 + t546 * t575) * MDP(31) + (g(1) * t946 - g(2) * t947) * MDP(2) + (g(1) * t947 + g(2) * t946) * MDP(3) + (-t520 * t700 + t522 * t701 - t544 * t671 + t550 * t673 + t570 * t636 - t572 * t635 - t594 * t598 - t595 * t597 - t834) * MDP(19) + (-t695 * t817 - t792 * t812 - t791 * t937 + (-t867 - t884) * t869 + t834) * MDP(10) + (-t696 * t817 + t906 * t812 - t848 * t937 + g(1) * t704 - g(2) * t706 + (-t868 + t886) * t869) * MDP(9) + t937 * t800 + (g(1) * t966 - g(2) * t582 + t514 * t626 + t567 * t527 + t541 * t611 + t553 * t547 + t965 * t682 - t804 * t721) * MDP(28) + qJDD(1) * MDP(1) + (t506 * t600 + t526 * t575) * MDP(29) + (t775 * t960 + t816 * t871) * MDP(6) + (t779 * t960 - t816 * t872) * MDP(7) + (t527 * t626 + t547 * t611) * MDP(22) + (-t594 * t701 + t636 * t673) * MDP(11) + (t594 * t700 - t595 * t701 - t635 * t673 - t636 * t671) * MDP(12); (t682 * t819 + t721 * t914) * MDP(24) + (-t527 * t819 + t611 * t914) * MDP(22) + (MDP(15) * t730 - MDP(16) * t592 + MDP(17) * t593 + MDP(18) * t570 - MDP(20) * t572 + MDP(24) * t611 - MDP(25) * t962 + MDP(26) * t721 + MDP(27) * t517 - MDP(28) * t518) * t874 + (g(1) * t619 + g(2) * t618 - g(3) * t661 + t514 * t710 + t707 * t528 + t913 * t553 - t682 * t820 + t721 * t963 + t911 * t962) * MDP(27) + (-t527 * t710 + t528 * t819 - t611 * t913 - t914 * t962) * MDP(23) + (t859 * t575 + t858 * t573 - (-t936 - t507 * t776 + (t573 * t772 - t575 * t776) * qJD(6)) * t819) * MDP(30) + (-pkin(2) * t595 - t694 * t671 - t675 * t730 + t789 * t774 + (-t615 + (t692 + t938) * t730 - t969) * t778) * MDP(16) + (pkin(1) * t775 * t923 + t694 * t817 - t848 - t969) * MDP(9) + (-t570 * t604 - t572 * t601 + t907 * t566 + (t520 * t778 + t522 * t774 + (t570 * t778 - t572 * t774) * qJD(3) + t795) * pkin(9) + (-t521 - t969) * t958) * MDP(21) + (pkin(2) * t594 - t910 * t730 - t694 * t673 + t789 * t778 + (t615 - t785) * t774) * MDP(17) + (t707 * t527 + t914 * t553 + t911 * t611 + t653 * t682 + t964 * t721 + (-t514 + t969) * t819) * MDP(28) + (t506 * t710 + t575 * t913 + t798 * t967 - t819 * t919) * MDP(31) + (-(t620 * t772 + t653 * t776) * t524 - t495 * t710 - t820 * t506 - t498 * t924 - g(1) * (t619 * t772 - t706 * t776) - g(2) * (t618 * t772 - t704 * t776) - g(3) * (-t661 * t772 - t776 * t922) + (t772 * t831 + t776 * t832) * t967 + t915 * t575 - t913 * t504 + t798 * t515) * MDP(35) + ((t620 * t776 - t653 * t772) * t524 + t496 * t710 - t820 * t507 - t498 * t772 * t819 - g(1) * (-t619 * t776 - t706 * t772) - g(2) * (-t618 * t776 - t704 * t772) - g(3) * (t661 * t776 - t772 * t922) + (t772 * t832 - t776 * t831) * t967 + t915 * t573 - t913 * t828 + t799 * t515) * MDP(34) + (-t507 * t710 - t573 * t913 - t799 * t967 + t819 * t920) * MDP(32) + (t524 * t710 + t913 * t967) * MDP(33) + (-t594 * t958 + t601 * t730 - t907 * t673 + t784 * t774 + t778 * t957) * MDP(20) + (-t595 * t958 - t604 * t730 + t907 * t671 - t774 * t957 + t784 * t778) * MDP(18) + (t730 * t896 + t686 * t778 + (-t730 * t774 * t779 + t671 * t775) * t900) * MDP(14) + (-t779 * t838 + t866) * MDP(6) + (t682 * t710 - t721 * t913) * MDP(25) + (t601 * t671 - t604 * t673 + (t520 - t730 * t570 + (qJD(3) * t673 - t595) * pkin(9)) * t778 + (t522 + t935 + (qJD(3) * t671 - t594) * pkin(9)) * t774 + t795) * MDP(19) + (t775 * t838 + t751) * MDP(7) + (-t594 * t774 - t778 * t928) * MDP(11) + ((-t594 + t929) * t778 + (-t595 + t928) * t774) * MDP(12) + t800 + (pkin(1) * t882 + t691 * t817 + (pkin(8) * t887 + g(3)) * t922 - t833 - t878) * MDP(10) + (-t730 * t895 + t686 * t774 + (-t673 * t775 + t730 * t918) * t900) * MDP(13) - t775 * MDP(4) * t882 + (-t506 * t924 + t575 * t798) * MDP(29) + t903 * MDP(5) * t923; (t712 * t507 + t908 * t573 - t611 * t828 + t786 * t772 - t776 * t955) * MDP(34) + (-t611 * t721 + t528) * MDP(25) + (-t504 * t611 + t712 * t506 + t908 * t575 + t772 * t955 + t786 * t776) * MDP(35) + (-t611 ^ 2 + t962 ^ 2) * MDP(23) + (-t721 * t962 - t527) * MDP(24) - t962 * t902 + (-t553 * t962 - t571 * t611 + t682 * t904 + t721 * t909 - t952) * MDP(28) + (-t573 * t611 - t973) * MDP(32) - t989 + (t553 * t611 - t571 * t962 - t682 * t830 - t721 * t908 - t983) * MDP(27) + (-t616 * t671 - t783 - t932 + 0.2e1 * t945) * MDP(18) + t611 * t901 + (t575 * t611 - t978) * MDP(31) + (pkin(3) * t594 - qJ(4) * t595 + (t572 - t593) * t673 + (t570 - t889) * t671) * MDP(19) + (-t671 ^ 2 + t950) * MDP(12) + t555 * MDP(13) + (-t647 * t673 + t787 - t932) * MDP(16) + (-t595 - t928) * MDP(14) + (-t566 * t671 + t616 * t673 + 0.2e1 * t681 - 0.2e1 * t717 - t782) * MDP(20) + (t647 * t671 + t782) * MDP(17) + (t520 * qJ(4) - t522 * pkin(3) - t566 * t616 - t570 * t593 - g(1) * (-pkin(3) * t641 + qJ(4) * t642) - g(2) * (-pkin(3) * t637 + qJ(4) * t638) - g(3) * t961 + t889 * t572) * MDP(21) + MDP(11) * t930 + t686 * MDP(15); (-t686 + t930) * MDP(18) + t555 * MDP(19) + (-t730 ^ 2 - t950) * MDP(20) + (t783 + t935 - t945) * MDP(21) + (-t721 ^ 2 * t773 - t673 * t962 - t777 * t682) * MDP(27) + (-t611 * t673 + t773 * t682 - t721 * t855) * MDP(28) + (-t777 * t507 + (-t776 * t673 - t772 * t855) * t967 + (t573 * t721 - t891 * t967 - t920) * t773) * MDP(34) + (-t777 * t506 + (t772 * t673 - t776 * t855) * t967 + (t575 * t721 + t892 * t967 - t919) * t773) * MDP(35); t527 * MDP(24) - t860 * MDP(25) + (t518 * t721 + t983) * MDP(27) + (t517 * t721 + t952) * MDP(28) + t978 * MDP(31) + t973 * MDP(32) + (-pkin(5) * t507 - t518 * t573 + t790 * t772 - t776 * t956) * MDP(34) + (-pkin(5) * t506 - t518 * t575 + t772 * t956 + t790 * t776) * MDP(35) + (-MDP(23) * t962 + MDP(24) * t721 + MDP(28) * t553 + t902) * t962 + ((-qJD(5) + t721) * MDP(25) - t553 * MDP(27) - t575 * MDP(31) + t573 * MDP(32) - t901 + t828 * MDP(34) + t504 * MDP(35) + MDP(23) * t611) * t611 + t989; t575 * t573 * MDP(29) + (-t573 ^ 2 + t575 ^ 2) * MDP(30) + (t881 + t934) * MDP(31) + (-t861 + t933) * MDP(32) + t524 * MDP(33) + (-g(1) * t556 + g(2) * t980 - g(3) * t809 + t504 * t967 - t515 * t575 + t862) * MDP(34) + (g(1) * t557 + g(2) * t979 + g(3) * t600 + t515 * t573 - t828 * t967 - t829) * MDP(35) + (-MDP(31) * t931 - MDP(32) * t575 - MDP(34) * t504 + MDP(35) * t828) * qJD(6);];
tau  = t1;
