% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 14:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR11_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 14:33:19
% EndTime: 2019-05-07 14:35:04
% DurationCPUTime: 73.64s
% Computational Cost: add. (293979->963), mult. (632946->1493), div. (0->0), fcn. (503541->12), ass. (0->707)
t1162 = sin(qJ(1));
t1167 = cos(qJ(1));
t1156 = sin(pkin(6));
t1157 = cos(pkin(6));
t1160 = sin(qJ(3));
t1165 = cos(qJ(3));
t1333 = qJD(1) * t1157;
t1273 = qJD(2) + t1333;
t1161 = sin(qJ(2));
t1303 = t1156 * t1161;
t1291 = qJD(1) * t1303;
t1109 = t1160 * t1273 + t1165 * t1291;
t1166 = cos(qJ(2));
t1302 = t1156 * t1166;
t1141 = qJD(1) * t1302 - qJD(3);
t1331 = qJD(1) * t1166;
t1280 = qJD(2) * t1331;
t1292 = t1161 * qJDD(1);
t1118 = (t1280 + t1292) * t1156;
t1267 = qJDD(1) * t1157 + qJDD(2);
t1270 = t1160 * t1118 - t1165 * t1267;
t1007 = (qJD(3) + t1141) * t1109 + t1270;
t1353 = t1141 ^ 2;
t1107 = t1160 * t1291 - t1165 * t1273;
t1355 = t1107 ^ 2;
t1079 = t1355 - t1353;
t1293 = qJDD(1) * t1156;
t1119 = -qJD(2) * t1291 + t1166 * t1293;
t1113 = -qJDD(3) + t1119;
t1317 = t1107 * t1109;
t1039 = -t1113 + t1317;
t1323 = t1039 * t1160;
t977 = t1079 * t1165 - t1323;
t1235 = t1007 * t1166 + t1161 * t977;
t1322 = t1039 * t1165;
t973 = t1079 * t1160 + t1322;
t858 = -t1156 * t973 + t1157 * t1235;
t915 = -t1007 * t1161 + t1166 * t977;
t1459 = t1162 * t858 - t1167 * t915;
t1106 = t1109 ^ 2;
t1067 = t1106 - t1355;
t1298 = qJD(3) - t1141;
t1006 = t1109 * t1298 + t1270;
t1179 = -t1165 * t1118 - t1160 * t1267;
t1050 = -t1107 * qJD(3) - t1179;
t1316 = t1107 * t1141;
t1368 = t1316 + t1050;
t1325 = t1368 * t1160;
t927 = -t1006 * t1165 - t1325;
t1226 = -t1067 * t1166 + t1161 * t927;
t923 = -t1006 * t1160 + t1165 * t1368;
t818 = -t1156 * t923 + t1157 * t1226;
t891 = t1067 * t1161 + t1166 * t927;
t1458 = t1162 * t818 - t1167 * t891;
t1457 = t1162 * t915 + t1167 * t858;
t1456 = t1162 * t891 + t1167 * t818;
t1370 = t1106 + t1355;
t1371 = -t1050 + t1316;
t1401 = -t1007 * t1165 - t1371 * t1160;
t1415 = -t1161 * t1370 + t1166 * t1401;
t1402 = -t1007 * t1160 + t1165 * t1371;
t1416 = t1161 * t1401 + t1166 * t1370;
t1429 = -t1156 * t1402 + t1157 * t1416;
t1444 = t1162 * t1415 + t1167 * t1429;
t1455 = pkin(7) * t1444;
t1445 = -t1162 * t1429 + t1167 * t1415;
t1454 = pkin(7) * t1445;
t1449 = t1156 * t1226 + t1157 * t923;
t1448 = t1156 * t1235 + t1157 * t973;
t1447 = pkin(1) * t1429;
t1430 = t1156 * t1416 + t1157 * t1402;
t1446 = pkin(1) * t1430;
t1443 = (-t1156 * t1430 - t1157 * t1429) * pkin(8);
t1054 = t1353 + t1106;
t954 = t1054 * t1165 + t1323;
t1442 = pkin(2) * t954;
t1441 = pkin(9) * t954;
t968 = t1054 * t1160 - t1322;
t1440 = pkin(9) * t968;
t1439 = pkin(8) * t1415;
t1438 = t1156 * t954;
t1436 = t1157 * t954;
t1434 = t1161 * t968;
t1433 = t1166 * t968;
t1369 = t1113 + t1317;
t1034 = t1165 * t1369;
t1080 = -t1106 + t1353;
t1384 = -t1080 * t1160 - t1034;
t1398 = -t1161 * t1371 + t1166 * t1384;
t1321 = t1369 * t1160;
t1383 = t1165 * t1080 - t1321;
t1400 = t1161 * t1384 + t1166 * t1371;
t1417 = -t1156 * t1383 + t1157 * t1400;
t1428 = -t1162 * t1417 + t1167 * t1398;
t1427 = t1162 * t1398 + t1167 * t1417;
t1426 = pkin(9) * t1402;
t1419 = pkin(2) * t1370 + pkin(9) * t1401;
t1418 = t1156 * t1400 + t1157 * t1383;
t1366 = -t1353 - t1355;
t1381 = t1160 * t1366 - t1034;
t1414 = pkin(2) * t1381;
t1378 = t1165 * t1366 + t1321;
t1413 = pkin(9) * t1378;
t1412 = pkin(9) * t1381;
t1411 = qJ(4) * t1368;
t1408 = t1156 * t1381;
t1406 = t1157 * t1381;
t1404 = t1161 * t1378;
t1403 = t1166 * t1378;
t1203 = qJD(3) * t1109 + t1270;
t1305 = t1141 * t1165;
t1281 = t1107 * t1305;
t1174 = t1160 * t1203 - t1281;
t1285 = t1161 * t1317;
t1362 = t1166 * t1174 - t1285;
t1306 = t1141 * t1160;
t1261 = -t1107 * t1306 - t1165 * t1203;
t1284 = t1166 * t1317;
t1363 = t1161 * t1174 + t1284;
t1379 = -t1156 * t1261 + t1157 * t1363;
t1399 = -t1162 * t1379 + t1167 * t1362;
t1397 = t1162 * t1362 + t1167 * t1379;
t1396 = -2 * qJD(4);
t1350 = pkin(2) * t1166;
t1265 = -pkin(9) * t1161 - t1350;
t1334 = qJD(1) * t1156;
t1117 = t1265 * t1334;
t1266 = t1273 ^ 2;
t1144 = g(1) * t1167 + t1162 * g(2);
t1356 = qJD(1) ^ 2;
t1114 = -pkin(1) * t1356 + pkin(8) * t1293 - t1144;
t1143 = t1162 * g(1) - t1167 * g(2);
t1348 = pkin(8) * t1156;
t1178 = qJDD(1) * pkin(1) + t1348 * t1356 + t1143;
t1176 = t1157 * t1178;
t1271 = t1161 * t1114 - t1166 * t1176;
t1332 = qJD(1) * t1161;
t991 = t1156 * (g(3) * t1166 + t1117 * t1332) - t1267 * pkin(2) - t1266 * pkin(9) + t1271;
t1172 = t1203 * pkin(3) - t1411 + t991;
t1158 = sin(qJ(6));
t1159 = sin(qJ(5));
t1164 = cos(qJ(5));
t1064 = t1107 * t1159 + t1109 * t1164;
t1272 = t1159 * t1050 - t1164 * t1203;
t937 = -qJD(5) * t1064 - t1272;
t1184 = qJDD(6) - t937;
t1132 = qJD(5) + t1141;
t1163 = cos(qJ(6));
t1029 = t1064 * t1158 - t1163 * t1132;
t1031 = t1064 * t1163 + t1132 * t1158;
t949 = t1031 * t1029;
t1375 = t1184 - t949;
t1394 = t1158 * t1375;
t1111 = qJDD(5) + t1113;
t1062 = -t1164 * t1107 + t1109 * t1159;
t980 = t1064 * t1062;
t1374 = -t980 + t1111;
t1393 = t1159 * t1374;
t1389 = t1163 * t1375;
t1388 = t1164 * t1374;
t1279 = t1062 * qJD(5) - t1164 * t1050 - t1159 * t1203;
t1309 = t1132 * t1062;
t1382 = t1279 + t1309;
t1380 = t1156 * t1363 + t1157 * t1261;
t1201 = (t1107 * t1160 + t1109 * t1165) * t1141;
t1078 = t1109 * t1306;
t1260 = -t1078 + t1281;
t1301 = t1157 * t1161;
t1357 = t1157 * t1166 * t1113 - t1156 * t1201 + t1260 * t1301;
t1361 = -t1113 * t1161 + t1166 * t1260;
t1377 = t1162 * t1361 + t1167 * t1357;
t1376 = -t1162 * t1357 + t1167 * t1361;
t872 = -t1029 * qJD(6) + t1158 * t1111 - t1163 * t1279;
t1059 = qJD(6) + t1062;
t963 = t1059 * t1029;
t835 = -t963 + t872;
t1066 = pkin(3) * t1107 - qJ(4) * t1109;
t1173 = -g(3) * t1303 + t1161 * t1176;
t992 = t1267 * pkin(9) - t1266 * pkin(2) + (t1117 * t1334 + t1114) * t1166 + t1173;
t1224 = qJD(1) * t1273;
t1204 = t1166 * t1224;
t1205 = t1161 * t1224;
t1346 = t1157 * g(3);
t993 = -t1119 * pkin(2) - t1118 * pkin(9) - t1346 + (pkin(2) * t1205 - pkin(9) * t1204 - t1178) * t1156;
t912 = t1160 * t993 + t1165 * t992;
t1257 = -t1113 * qJ(4) - t1107 * t1066 + t1141 * t1396 + t912;
t1264 = pkin(4) * t1141 - pkin(10) * t1109;
t1367 = t1355 * pkin(10) - t1109 * t1264;
t1153 = t1156 ^ 2;
t1364 = (t1157 ^ 2 + t1153) * t1334 + qJD(2) * t1157 * t1156;
t1275 = -t1163 * t1111 - t1158 * t1279;
t832 = (qJD(6) - t1059) * t1031 + t1275;
t1000 = t1050 * t1160 - t1109 * t1305;
t1001 = t1050 * t1165 + t1078;
t1181 = -t1000 * t1156 + t1001 * t1301 - t1157 * t1284;
t1262 = t1166 * t1001 + t1285;
t1360 = t1162 * t1262 + t1167 * t1181;
t1359 = -t1162 * t1181 + t1167 * t1262;
t1358 = t1113 * t1302 + t1157 * t1201 + t1260 * t1303;
t1026 = t1029 ^ 2;
t1027 = t1031 ^ 2;
t1058 = t1059 ^ 2;
t1060 = t1062 ^ 2;
t1061 = t1064 ^ 2;
t1354 = t1132 ^ 2;
t1352 = pkin(3) + pkin(4);
t1351 = pkin(2) * t1161;
t1349 = pkin(3) * t1165;
t911 = t1160 * t992 - t1165 * t993;
t1186 = t1066 * t1109 + qJDD(4) + t911;
t1177 = pkin(3) * t1113 + t1186;
t1175 = -qJ(4) * t1353 + t1177;
t1169 = pkin(4) * t1369 + pkin(10) * t1371 + t1175;
t854 = -pkin(3) * t1353 + t1257;
t813 = -pkin(4) * t1355 + pkin(10) * t1203 - t1141 * t1264 + t854;
t739 = t1159 * t1169 + t1164 * t813;
t970 = pkin(5) * t1062 - pkin(11) * t1064;
t707 = -pkin(5) * t1354 + pkin(11) * t1111 - t1062 * t970 + t739;
t1171 = 0.2e1 * qJD(4) * t1109 - t1172;
t1315 = t1109 * t1141;
t1170 = pkin(3) * t1315 + t1171;
t735 = t1170 + t1382 * pkin(11) + (t1064 * t1132 - t937) * pkin(5) - t1203 * pkin(4) - t1367;
t662 = t1158 * t735 + t1163 * t707;
t1345 = qJ(4) * t1165;
t738 = t1159 * t813 - t1164 * t1169;
t706 = -t1111 * pkin(5) - pkin(11) * t1354 + t1064 * t970 + t738;
t1344 = t1158 * t706;
t861 = t1184 + t949;
t1343 = t1158 * t861;
t1276 = -pkin(3) * t1141 + t1396;
t814 = t1270 * pkin(4) + (pkin(4) * qJD(3) + t1276) * t1109 + t1172 + t1367;
t1342 = t1159 * t814;
t961 = t980 + t1111;
t1341 = t1159 * t961;
t1340 = t1160 * t991;
t1339 = t1163 * t706;
t1338 = t1163 * t861;
t1337 = t1164 * t814;
t1336 = t1164 * t961;
t1335 = t1165 * t991;
t1320 = t1059 * t1158;
t1319 = t1059 * t1163;
t1304 = t1153 * t1356;
t1139 = t1166 * t1161 * t1304;
t1115 = -t1139 + t1267;
t1313 = t1115 * t1161;
t1312 = t1115 * t1166;
t1116 = t1139 + t1267;
t1311 = t1116 * t1161;
t1310 = t1116 * t1166;
t1308 = t1132 * t1159;
t1307 = t1132 * t1164;
t1092 = t1156 * t1178 + t1346;
t1300 = t1161 * t1092;
t1299 = t1166 * t1092;
t1295 = t1370 - t1353;
t1154 = t1161 ^ 2;
t1155 = t1166 ^ 2;
t1294 = t1154 + t1155;
t1289 = t1159 * t949;
t1288 = t1164 * t949;
t1287 = t1161 * t980;
t1286 = t1166 * t980;
t1283 = t1154 * t1304;
t1282 = t1155 * t1304;
t1278 = -qJ(4) * t1160 - pkin(2);
t1277 = pkin(5) * t1159 + qJ(4);
t661 = t1158 * t707 - t1163 * t735;
t619 = t1158 * t661 + t1163 * t662;
t822 = t1160 * t911 + t1165 * t912;
t1274 = pkin(5) * t1164 + t1352;
t1094 = -t1143 * t1162 - t1167 * t1144;
t1138 = qJDD(1) * t1167 - t1162 * t1356;
t1263 = -pkin(7) * t1138 - g(3) * t1162;
t1102 = -t1283 - t1266;
t1065 = -t1102 * t1161 - t1312;
t1259 = pkin(8) * t1065 - t1300;
t1123 = -t1266 - t1282;
t1074 = t1123 * t1166 - t1311;
t1258 = pkin(8) * t1074 + t1299;
t618 = t1158 * t662 - t1163 * t661;
t672 = t1159 * t739 - t1164 * t738;
t673 = t1159 * t738 + t1164 * t739;
t821 = t1160 * t912 - t1165 * t911;
t607 = t1159 * t619 - t1164 * t706;
t608 = t1159 * t706 + t1164 * t619;
t578 = t1160 * t607 + t1165 * t608;
t1256 = t1161 * t578 + t1166 * t618;
t623 = t1160 * t672 + t1165 * t673;
t1255 = t1161 * t623 - t1166 * t814;
t836 = -t963 - t872;
t752 = -t1158 * t836 - t1163 * t832;
t906 = t1026 + t1027;
t720 = t1159 * t752 + t1164 * t906;
t721 = -t1159 * t906 + t1164 * t752;
t660 = t1160 * t720 + t1165 * t721;
t750 = -t1158 * t832 + t1163 * t836;
t1254 = t1161 * t660 + t1166 * t750;
t833 = (-qJD(6) - t1059) * t1031 - t1275;
t751 = -t1158 * t835 + t1163 * t833;
t948 = -t1027 + t1026;
t727 = -t1159 * t751 - t1164 * t948;
t728 = -t1159 * t948 + t1164 * t751;
t669 = -t1160 * t727 + t1165 * t728;
t749 = t1158 * t833 + t1163 * t835;
t1253 = t1161 * t669 + t1166 * t749;
t921 = -t1058 - t1026;
t789 = t1163 * t921 - t1394;
t736 = t1159 * t789 + t1164 * t833;
t737 = -t1159 * t833 + t1164 * t789;
t671 = t1160 * t736 + t1165 * t737;
t788 = t1158 * t921 + t1389;
t1252 = t1161 * t671 + t1166 * t788;
t935 = -t1027 - t1058;
t793 = -t1158 * t935 - t1338;
t740 = t1159 * t793 - t1164 * t835;
t741 = t1159 * t835 + t1164 * t793;
t676 = t1160 * t740 + t1165 * t741;
t792 = t1163 * t935 - t1343;
t1251 = t1161 * t676 + t1166 * t792;
t959 = -t1027 + t1058;
t811 = -t1158 * t959 + t1389;
t745 = -t1159 * t811 - t1164 * t836;
t747 = -t1159 * t836 + t1164 * t811;
t682 = -t1160 * t745 + t1165 * t747;
t809 = t1163 * t959 + t1394;
t1250 = t1161 * t682 + t1166 * t809;
t958 = t1026 - t1058;
t812 = t1163 * t958 - t1343;
t746 = -t1159 * t812 - t1164 * t832;
t748 = -t1159 * t832 + t1164 * t812;
t683 = -t1160 * t746 + t1165 * t748;
t810 = t1158 * t958 + t1338;
t1249 = t1161 * t683 + t1166 * t810;
t871 = -qJD(6) * t1031 - t1275;
t824 = t1029 * t1319 - t1158 * t871;
t781 = -t1159 * t824 - t1288;
t783 = t1164 * t824 - t1289;
t712 = -t1160 * t781 + t1165 * t783;
t823 = t1029 * t1320 + t1163 * t871;
t1248 = t1161 * t712 + t1166 * t823;
t826 = -t1031 * t1320 + t1163 * t872;
t782 = -t1159 * t826 + t1288;
t784 = t1164 * t826 + t1289;
t713 = -t1160 * t782 + t1165 * t784;
t825 = t1031 * t1319 + t1158 * t872;
t1247 = t1161 * t713 + t1166 * t825;
t892 = (qJD(5) + t1132) * t1064 + t1272;
t798 = t1159 * t892 + t1164 * t1382;
t800 = t1159 * t1382 - t1164 * t892;
t724 = -t1160 * t798 + t1165 * t800;
t979 = t1061 - t1060;
t1246 = t1161 * t724 + t1166 * t979;
t1182 = (-qJD(5) + t1132) * t1064 - t1272;
t896 = t1279 - t1309;
t799 = t1159 * t1182 + t1164 * t896;
t801 = -t1159 * t896 + t1164 * t1182;
t725 = t1160 * t799 + t1165 * t801;
t939 = -t1060 - t1061;
t1245 = t1161 * t725 + t1166 * t939;
t882 = (-t1029 * t1163 + t1031 * t1158) * t1059;
t815 = -t1159 * t882 + t1164 * t1184;
t816 = t1159 * t1184 + t1164 * t882;
t744 = -t1160 * t815 + t1165 * t816;
t881 = (-t1029 * t1158 - t1031 * t1163) * t1059;
t1244 = t1161 * t744 + t1166 * t881;
t765 = t1160 * t1175 + t1165 * t854;
t865 = t1109 * t1276 + t1172;
t1243 = t1161 * t765 - t1166 * t865;
t965 = -t1354 - t1060;
t883 = t1159 * t965 + t1388;
t884 = t1164 * t965 - t1393;
t791 = t1160 * t883 + t1165 * t884;
t1242 = t1161 * t791 + t1166 * t892;
t1018 = -t1061 - t1354;
t909 = t1018 * t1164 - t1341;
t910 = -t1018 * t1159 - t1336;
t820 = t1160 * t909 + t1165 * t910;
t1241 = t1161 * t820 - t1166 * t1382;
t1240 = t1161 * t822 - t1166 * t991;
t1036 = -t1061 + t1354;
t917 = -t1036 * t1164 - t1393;
t919 = -t1036 * t1159 + t1388;
t829 = -t1160 * t917 + t1165 * t919;
t1239 = t1161 * t829 - t1166 * t896;
t1035 = t1060 - t1354;
t918 = -t1035 * t1159 - t1336;
t920 = t1035 * t1164 - t1341;
t830 = -t1160 * t918 + t1165 * t920;
t1238 = t1161 * t830 + t1166 * t1182;
t1005 = t1203 - t1315;
t1237 = -t1005 * t1166 + t1404;
t1236 = -t1006 * t1166 + t1404;
t1233 = t1166 * t1368 - t1434;
t1011 = t1107 * t1298 + t1179;
t1232 = t1011 * t1166 + t1434;
t952 = (t1062 * t1159 + t1064 * t1164) * t1132;
t953 = (-t1062 * t1164 + t1064 * t1159) * t1132;
t874 = -t1160 * t952 + t1165 * t953;
t1225 = t1111 * t1166 + t1161 * t874;
t1223 = t1153 * t1161 * t1280;
t1055 = g(3) * t1302 + t1271;
t1056 = t1166 * t1114 + t1173;
t1222 = -t1055 * t1166 + t1056 * t1161;
t964 = t1055 * t1161 + t1056 * t1166;
t1127 = t1156 * t1204;
t1084 = t1127 + t1118;
t1126 = t1156 * t1205;
t1087 = -t1126 + t1119;
t1221 = t1084 * t1166 + t1087 * t1161;
t1085 = -t1127 + t1118;
t1086 = t1126 + t1119;
t1220 = -t1085 * t1166 + t1086 * t1161;
t1219 = t1102 * t1166 - t1313;
t1122 = -t1266 + t1282;
t1218 = t1122 * t1161 + t1312;
t1121 = t1266 - t1283;
t1217 = t1121 * t1166 + t1311;
t1216 = t1123 * t1161 + t1310;
t1093 = t1143 * t1167 - t1162 * t1144;
t1215 = t1156 * t1267;
t885 = -t1062 * t1308 - t1164 * t937;
t886 = t1062 * t1307 - t1159 * t937;
t796 = -t1160 * t885 + t1165 * t886;
t1210 = t1161 * t796 - t1286;
t887 = -t1064 * t1307 + t1159 * t1279;
t888 = -t1064 * t1308 - t1164 * t1279;
t797 = -t1160 * t887 + t1165 * t888;
t1209 = t1161 * t797 + t1286;
t1206 = t1156 * t1224;
t1202 = t1157 * t1000 + t1001 * t1303 - t1156 * t1284;
t564 = -pkin(10) * t608 + (pkin(11) * t1159 + t1274) * t618;
t568 = -pkin(10) * t607 + (-pkin(11) * t1164 + t1277) * t618;
t577 = t1160 * t608 - t1165 * t607;
t551 = -pkin(9) * t577 - t1160 * t564 + t1165 * t568;
t559 = -pkin(2) * t577 - pkin(5) * t706 + pkin(11) * t619 - qJ(4) * t608 + t1352 * t607;
t569 = -t1161 * t618 + t1166 * t578;
t1200 = pkin(8) * t569 + t1161 * t551 + t1166 * t559;
t611 = -pkin(11) * t750 - t618;
t585 = -pkin(10) * t721 - t1159 * t611 + t1274 * t750;
t590 = -pkin(10) * t720 + t1164 * t611 + t1277 * t750;
t659 = t1160 * t721 - t1165 * t720;
t567 = -pkin(9) * t659 - t1160 * t585 + t1165 * t590;
t579 = -pkin(2) * t659 + pkin(5) * t906 + pkin(11) * t752 - qJ(4) * t721 + t1352 * t720 + t619;
t628 = -t1161 * t750 + t1166 * t660;
t1199 = pkin(8) * t628 + t1161 * t567 + t1166 * t579;
t638 = -pkin(5) * t788 + t661;
t684 = -pkin(11) * t788 + t1344;
t601 = -pkin(10) * t737 - t1159 * t684 - t1164 * t638 + t1352 * t788;
t605 = -pkin(10) * t736 + qJ(4) * t788 - t1159 * t638 + t1164 * t684;
t670 = t1160 * t737 - t1165 * t736;
t572 = -pkin(9) * t670 - t1160 * t601 + t1165 * t605;
t593 = -pkin(2) * t670 + pkin(5) * t833 + pkin(11) * t789 - qJ(4) * t737 + t1352 * t736 - t1339;
t647 = -t1161 * t788 + t1166 * t671;
t1198 = pkin(8) * t647 + t1161 * t572 + t1166 * t593;
t641 = -pkin(5) * t792 + t662;
t685 = -pkin(11) * t792 + t1339;
t603 = -pkin(10) * t741 - t1159 * t685 - t1164 * t641 + t1352 * t792;
t606 = -pkin(10) * t740 + qJ(4) * t792 - t1159 * t641 + t1164 * t685;
t675 = t1160 * t741 - t1165 * t740;
t573 = -pkin(9) * t675 - t1160 * t603 + t1165 * t606;
t597 = -pkin(2) * t675 - pkin(5) * t835 + pkin(11) * t793 - qJ(4) * t741 + t1352 * t740 + t1344;
t648 = -t1161 * t792 + t1166 * t676;
t1197 = pkin(8) * t648 + t1161 * t573 + t1166 * t597;
t622 = t1160 * t673 - t1165 * t672;
t581 = -pkin(2) * t622 - qJ(4) * t673 + t1352 * t672;
t630 = -pkin(10) * t673 - t1352 * t814;
t649 = -pkin(10) * t672 - qJ(4) * t814;
t584 = -pkin(9) * t622 - t1160 * t630 + t1165 * t649;
t615 = t1161 * t814 + t1166 * t623;
t1196 = pkin(8) * t615 + t1161 * t584 + t1166 * t581;
t634 = -pkin(10) * t801 + t1352 * t939 - t673;
t643 = -pkin(10) * t799 + qJ(4) * t939 - t672;
t723 = t1160 * t801 - t1165 * t799;
t602 = -pkin(9) * t723 - t1160 * t634 + t1165 * t643;
t645 = -pkin(2) * t723 - qJ(4) * t801 + t1352 * t799;
t704 = -t1161 * t939 + t1166 * t725;
t1195 = pkin(8) * t704 + t1161 * t602 + t1166 * t645;
t701 = -pkin(10) * t884 + t1352 * t892 - t1337;
t732 = -pkin(10) * t883 + qJ(4) * t892 - t1342;
t790 = t1160 * t884 - t1165 * t883;
t637 = -pkin(9) * t790 - t1160 * t701 + t1165 * t732;
t652 = -pkin(2) * t790 - qJ(4) * t884 + t1352 * t883 - t738;
t753 = -t1161 * t892 + t1166 * t791;
t1194 = pkin(8) * t753 + t1161 * t637 + t1166 * t652;
t702 = -pkin(10) * t910 - t1352 * t1382 + t1342;
t742 = -pkin(10) * t909 - qJ(4) * t1382 - t1337;
t819 = t1160 * t910 - t1165 * t909;
t644 = -pkin(9) * t819 - t1160 * t702 + t1165 * t742;
t666 = -pkin(2) * t819 - qJ(4) * t910 + t1352 * t909 - t739;
t761 = t1161 * t1382 + t1166 * t820;
t1193 = pkin(8) * t761 + t1161 * t644 + t1166 * t666;
t764 = t1160 * t854 - t1165 * t1175;
t696 = -pkin(2) * t764 + pkin(3) * t1175 - qJ(4) * t854;
t697 = -pkin(9) * t764 + (pkin(3) * t1160 - t1345) * t865;
t729 = t1161 * t865 + t1166 * t765;
t1192 = pkin(8) * t729 + t1161 * t697 + t1166 * t696;
t839 = pkin(3) * t1295 + t1257;
t840 = qJ(4) * t1295 + t1177;
t726 = -t1160 * t839 + t1165 * t840 - t1426;
t841 = -pkin(2) * t1402 - pkin(3) * t1371 + qJ(4) * t1007;
t1191 = t1161 * t726 + t1166 * t841 + t1439;
t831 = t1170 + t1411;
t766 = -pkin(3) * t1325 + t1165 * t831 - t1441;
t776 = -t1442 - qJ(4) * t1039 + (-t1054 + t1353) * pkin(3) - t1257;
t901 = -t1161 * t1368 - t1433;
t1190 = pkin(8) * t901 + t1161 * t766 + t1166 * t776;
t838 = (-t1005 + t1315) * pkin(3) + t1171;
t767 = -t1005 * t1345 - t1160 * t838 - t1412;
t785 = -t1414 + (-t1366 - t1353) * qJ(4) + (t1369 + t1113) * pkin(3) + t1186;
t905 = t1005 * t1161 + t1403;
t1189 = pkin(8) * t905 + t1161 * t767 + t1166 * t785;
t850 = t911 - t1414;
t898 = t1340 - t1412;
t902 = t1006 * t1161 + t1403;
t1188 = pkin(8) * t902 + t1161 * t898 + t1166 * t850;
t853 = t912 + t1442;
t903 = t1335 + t1441;
t904 = -t1011 * t1161 + t1433;
t1187 = pkin(8) * t904 + t1161 * t903 + t1166 * t853;
t1019 = t1085 * t1161 + t1086 * t1166;
t1185 = pkin(8) * t1019 + t964;
t770 = -t821 - t1426;
t1183 = t1161 * t770 - t1350 * t1402 + t1439;
t786 = t1161 * t991 + t1166 * t822;
t1180 = pkin(8) * t786 + t1265 * t821;
t1137 = t1162 * qJDD(1) + t1167 * t1356;
t1125 = t1294 * t1304;
t1124 = (t1154 - t1155) * t1304;
t1120 = -pkin(7) * t1137 + g(3) * t1167;
t1091 = t1273 * t1294 * t1334;
t1083 = (t1292 + (0.2e1 * qJD(2) + t1333) * t1331) * t1156;
t1077 = t1166 * t1118 - t1154 * t1206;
t1076 = -t1161 * t1119 - t1155 * t1206;
t1073 = t1122 * t1166 - t1313;
t1072 = -t1121 * t1161 + t1310;
t1052 = (t1157 * t1118 + t1331 * t1364) * t1161;
t1051 = (t1157 * t1119 - t1332 * t1364) * t1166;
t1020 = -t1084 * t1161 + t1087 * t1166;
t1017 = t1156 * t1087 + t1157 * t1216;
t1016 = -t1156 * t1086 + t1157 * t1218;
t1015 = -t1156 * t1085 + t1157 * t1217;
t1014 = -t1157 * t1087 + t1156 * t1216;
t1004 = -t1156 * t1083 + t1157 * t1219;
t1003 = t1157 * t1083 + t1156 * t1219;
t989 = -t1156 * t1124 + t1157 * t1221;
t988 = t1156 * t1125 + t1157 * t1220;
t987 = -t1157 * t1125 + t1156 * t1220;
t951 = -t1162 * t1017 + t1074 * t1167;
t950 = t1017 * t1167 + t1162 * t1074;
t943 = -t1162 * t1004 + t1065 * t1167;
t942 = t1004 * t1167 + t1162 * t1065;
t941 = t1156 * t1092 + t1157 * t1222;
t940 = -t1157 * t1092 + t1156 * t1222;
t931 = t1019 * t1167 - t1162 * t988;
t930 = t1162 * t1019 + t1167 * t988;
t907 = -t1300 + (-t1014 * t1156 - t1017 * t1157) * pkin(8);
t900 = -t1299 + (-t1003 * t1156 - t1004 * t1157) * pkin(8);
t899 = -pkin(1) * t1014 + t1055 * t1156 + t1157 * t1258;
t889 = -pkin(1) * t1003 + t1056 * t1156 + t1157 * t1259;
t873 = t1160 * t953 + t1165 * t952;
t870 = pkin(8) * t1157 * t964 - pkin(1) * t940;
t869 = -t1162 * t941 + t1167 * t964;
t868 = t1162 * t964 + t1167 * t941;
t867 = -t1111 * t1161 + t1166 * t874;
t866 = -pkin(1) * t987 + t1157 * t1185;
t863 = pkin(2) * t1011 + t1340 + t1440;
t855 = (-t1156 * t940 - t1157 * t941) * pkin(8);
t852 = -pkin(2) * t1006 - t1335 + t1413;
t851 = (-t1156 * t987 - t1157 * t988) * pkin(8) - t1222;
t849 = t1157 * t1237 - t1408;
t848 = t1157 * t1232 + t1438;
t847 = t1156 * t1237 + t1406;
t846 = t1156 * t1232 - t1436;
t845 = t1157 * t1236 - t1408;
t844 = t1157 * t1233 - t1438;
t843 = t1156 * t1236 + t1406;
t842 = t1156 * t1233 + t1436;
t828 = t1160 * t920 + t1165 * t918;
t827 = t1160 * t919 + t1165 * t917;
t795 = t1160 * t888 + t1165 * t887;
t794 = t1160 * t886 + t1165 * t885;
t787 = -pkin(2) * t991 + pkin(9) * t822;
t780 = -t1162 * t849 + t1167 * t905;
t779 = -t1162 * t848 + t1167 * t904;
t778 = t1162 * t905 + t1167 * t849;
t777 = t1162 * t904 + t1167 * t848;
t775 = -t1156 * t873 + t1157 * t1225;
t774 = -t1162 * t845 + t1167 * t902;
t773 = -t1162 * t844 + t1167 * t901;
t772 = t1162 * t902 + t1167 * t845;
t771 = t1162 * t901 + t1167 * t844;
t769 = t1166 * t797 - t1287;
t768 = t1166 * t796 + t1287;
t763 = -t1161 * t1182 + t1166 * t830;
t762 = t1161 * t896 + t1166 * t829;
t760 = t1419 + t822;
t759 = t1005 * t1278 + t1165 * t838 + t1413;
t758 = -t1440 + t1160 * t831 + (pkin(2) + t1349) * t1368;
t743 = t1160 * t816 + t1165 * t815;
t731 = -t1156 * t821 + t1157 * t1240;
t730 = t1156 * t1240 + t1157 * t821;
t722 = t1160 * t800 + t1165 * t798;
t719 = t1160 * t840 + t1165 * t839 + t1419;
t718 = -t1156 * t828 + t1157 * t1238;
t717 = -t1156 * t827 + t1157 * t1239;
t716 = -t1161 * t979 + t1166 * t724;
t715 = -t1156 * t819 + t1157 * t1241;
t714 = t1156 * t1241 + t1157 * t819;
t711 = t1160 * t784 + t1165 * t782;
t710 = t1160 * t783 + t1165 * t781;
t709 = -t1156 * t795 + t1157 * t1209;
t708 = -t1156 * t794 + t1157 * t1210;
t703 = -t1161 * t881 + t1166 * t744;
t700 = -t1161 * t853 + t1166 * t903 + (-t1156 * t846 - t1157 * t848) * pkin(8);
t699 = -t1156 * t790 + t1157 * t1242;
t698 = t1156 * t1242 + t1157 * t790;
t695 = -t1161 * t850 + t1166 * t898 + (-t1156 * t843 - t1157 * t845) * pkin(8);
t694 = -pkin(1) * t846 - t1156 * t863 + t1157 * t1187;
t693 = -t1162 * t731 + t1167 * t786;
t692 = t1162 * t786 + t1167 * t731;
t691 = -pkin(1) * t843 - t1156 * t852 + t1157 * t1188;
t690 = -t1161 * t825 + t1166 * t713;
t689 = -t1161 * t823 + t1166 * t712;
t688 = pkin(9) * t765 + (t1278 - t1349) * t865;
t687 = -t1156 * t764 + t1157 * t1243;
t686 = t1156 * t1243 + t1157 * t764;
t681 = t1160 * t748 + t1165 * t746;
t680 = t1160 * t747 + t1165 * t745;
t679 = t1166 * t770 + t1402 * t1351 + t1443;
t678 = -t1162 * t715 + t1167 * t761;
t677 = t1162 * t761 + t1167 * t715;
t674 = -t1161 * t785 + t1166 * t767 + (-t1156 * t847 - t1157 * t849) * pkin(8);
t668 = t1160 * t728 + t1165 * t727;
t667 = -t1161 * t776 + t1166 * t766 + (-t1156 * t842 - t1157 * t844) * pkin(8);
t665 = -t1162 * t699 + t1167 * t753;
t664 = t1162 * t753 + t1167 * t699;
t663 = -t1156 * t743 + t1157 * t1244;
t657 = -t1156 * t722 + t1157 * t1246;
t656 = -t1156 * t723 + t1157 * t1245;
t655 = t1156 * t1245 + t1157 * t723;
t654 = -t1161 * t810 + t1166 * t683;
t653 = -t1161 * t809 + t1166 * t682;
t651 = -t1156 * t760 + t1157 * t1183 - t1446;
t650 = -t1161 * t841 + t1166 * t726 + t1443;
t646 = -pkin(1) * t847 - t1156 * t759 + t1157 * t1189;
t642 = -pkin(1) * t842 - t1156 * t758 + t1157 * t1190;
t640 = -t1162 * t687 + t1167 * t729;
t639 = t1162 * t729 + t1167 * t687;
t636 = -t1156 * t711 + t1157 * t1247;
t635 = -t1156 * t710 + t1157 * t1248;
t633 = -pkin(2) * t1382 + pkin(9) * t820 + t1160 * t742 + t1165 * t702;
t632 = -t1161 * t749 + t1166 * t669;
t631 = (-pkin(9) * t1166 + t1351) * t821 + (-t1156 * t730 - t1157 * t731) * pkin(8);
t629 = -pkin(1) * t730 - t1156 * t787 + t1157 * t1180;
t627 = pkin(2) * t892 + pkin(9) * t791 + t1160 * t732 + t1165 * t701;
t626 = -t1156 * t719 + t1157 * t1191 - t1446;
t625 = -t1162 * t656 + t1167 * t704;
t624 = t1162 * t704 + t1167 * t656;
t621 = -t1156 * t681 + t1157 * t1249;
t620 = -t1156 * t680 + t1157 * t1250;
t617 = -t1156 * t675 + t1157 * t1251;
t616 = t1156 * t1251 + t1157 * t675;
t614 = -t1156 * t670 + t1157 * t1252;
t613 = t1156 * t1252 + t1157 * t670;
t612 = -t1156 * t668 + t1157 * t1253;
t610 = -t1156 * t659 + t1157 * t1254;
t609 = t1156 * t1254 + t1157 * t659;
t604 = -t1161 * t696 + t1166 * t697 + (-t1156 * t686 - t1157 * t687) * pkin(8);
t600 = pkin(2) * t939 + pkin(9) * t725 + t1160 * t643 + t1165 * t634;
t599 = -t1162 * t617 + t1167 * t648;
t598 = t1162 * t648 + t1167 * t617;
t596 = -t1162 * t614 + t1167 * t647;
t595 = t1162 * t647 + t1167 * t614;
t594 = -t1161 * t666 + t1166 * t644 + (-t1156 * t714 - t1157 * t715) * pkin(8);
t592 = -pkin(1) * t686 - t1156 * t688 + t1157 * t1192;
t591 = -t1161 * t652 + t1166 * t637 + (-t1156 * t698 - t1157 * t699) * pkin(8);
t589 = -t1162 * t610 + t1167 * t628;
t588 = t1162 * t628 + t1167 * t610;
t587 = -t1156 * t622 + t1157 * t1255;
t586 = t1156 * t1255 + t1157 * t622;
t583 = -pkin(1) * t714 - t1156 * t633 + t1157 * t1193;
t582 = -pkin(2) * t814 + pkin(9) * t623 + t1160 * t649 + t1165 * t630;
t580 = -pkin(1) * t698 - t1156 * t627 + t1157 * t1194;
t576 = -t1162 * t587 + t1167 * t615;
t575 = t1162 * t615 + t1167 * t587;
t574 = -t1161 * t645 + t1166 * t602 + (-t1156 * t655 - t1157 * t656) * pkin(8);
t571 = pkin(2) * t792 + pkin(9) * t676 + t1160 * t606 + t1165 * t603;
t570 = pkin(2) * t788 + pkin(9) * t671 + t1160 * t605 + t1165 * t601;
t566 = -pkin(1) * t655 - t1156 * t600 + t1157 * t1195;
t565 = pkin(2) * t750 + pkin(9) * t660 + t1160 * t590 + t1165 * t585;
t563 = -t1156 * t577 + t1157 * t1256;
t562 = t1156 * t1256 + t1157 * t577;
t561 = -t1161 * t597 + t1166 * t573 + (-t1156 * t616 - t1157 * t617) * pkin(8);
t560 = -t1161 * t593 + t1166 * t572 + (-t1156 * t613 - t1157 * t614) * pkin(8);
t558 = -t1161 * t581 + t1166 * t584 + (-t1156 * t586 - t1157 * t587) * pkin(8);
t557 = -t1161 * t579 + t1166 * t567 + (-t1156 * t609 - t1157 * t610) * pkin(8);
t556 = -pkin(1) * t586 - t1156 * t582 + t1157 * t1196;
t555 = -t1162 * t563 + t1167 * t569;
t554 = t1162 * t569 + t1167 * t563;
t553 = -pkin(1) * t616 - t1156 * t571 + t1157 * t1197;
t552 = -pkin(1) * t613 - t1156 * t570 + t1157 * t1198;
t550 = pkin(2) * t618 + pkin(9) * t578 + t1160 * t568 + t1165 * t564;
t549 = -pkin(1) * t609 - t1156 * t565 + t1157 * t1199;
t548 = -t1161 * t559 + t1166 * t551 + (-t1156 * t562 - t1157 * t563) * pkin(8);
t547 = -pkin(1) * t562 - t1156 * t550 + t1157 * t1200;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1137, -t1138, 0, t1094, 0, 0, 0, 0, 0, 0, t951, t943, t931, t869, 0, 0, 0, 0, 0, 0, t774, t779, t1445, t693, 0, 0, 0, 0, 0, 0, t780, t1445, t773, t640, 0, 0, 0, 0, 0, 0, t665, t678, t625, t576, 0, 0, 0, 0, 0, 0, t596, t599, t589, t555; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1138, -t1137, 0, t1093, 0, 0, 0, 0, 0, 0, t950, t942, t930, t868, 0, 0, 0, 0, 0, 0, t772, t777, t1444, t692, 0, 0, 0, 0, 0, 0, t778, t1444, t771, t639, 0, 0, 0, 0, 0, 0, t664, t677, t624, t575, 0, 0, 0, 0, 0, 0, t595, t598, t588, t554; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1014, t1003, t987, t940, 0, 0, 0, 0, 0, 0, t843, t846, t1430, t730, 0, 0, 0, 0, 0, 0, t847, t1430, t842, t686, 0, 0, 0, 0, 0, 0, t698, t714, t655, t586, 0, 0, 0, 0, 0, 0, t613, t616, t609, t562; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1138, 0, -t1137, 0, t1263, -t1120, -t1093, -pkin(7) * t1093, -t1162 * t1052 + t1077 * t1167, t1020 * t1167 - t1162 * t989, -t1162 * t1015 + t1072 * t1167, -t1162 * t1051 + t1076 * t1167, -t1162 * t1016 + t1073 * t1167, t1167 * t1091 + t1162 * t1215, -pkin(7) * t950 - t1162 * t899 + t1167 * t907, -pkin(7) * t942 - t1162 * t889 + t1167 * t900, -pkin(7) * t930 - t1162 * t866 + t1167 * t851, -pkin(7) * t868 - t1162 * t870 + t1167 * t855, t1359, -t1458, t1428, t1399, -t1459, t1376, -pkin(7) * t772 - t1162 * t691 + t1167 * t695, -pkin(7) * t777 - t1162 * t694 + t1167 * t700, -t1162 * t651 + t1167 * t679 - t1455, -pkin(7) * t692 - t1162 * t629 + t1167 * t631, t1359, t1428, t1458, t1376, t1459, t1399, -pkin(7) * t778 - t1162 * t646 + t1167 * t674, -t1162 * t626 + t1167 * t650 - t1455, -pkin(7) * t771 - t1162 * t642 + t1167 * t667, -pkin(7) * t639 - t1162 * t592 + t1167 * t604, -t1162 * t709 + t1167 * t769, -t1162 * t657 + t1167 * t716, -t1162 * t717 + t1167 * t762, -t1162 * t708 + t1167 * t768, -t1162 * t718 + t1167 * t763, -t1162 * t775 + t1167 * t867, -pkin(7) * t664 - t1162 * t580 + t1167 * t591, -pkin(7) * t677 - t1162 * t583 + t1167 * t594, -pkin(7) * t624 - t1162 * t566 + t1167 * t574, -pkin(7) * t575 - t1162 * t556 + t1167 * t558, -t1162 * t636 + t1167 * t690, -t1162 * t612 + t1167 * t632, -t1162 * t620 + t1167 * t653, -t1162 * t635 + t1167 * t689, -t1162 * t621 + t1167 * t654, -t1162 * t663 + t1167 * t703, -pkin(7) * t595 - t1162 * t552 + t1167 * t560, -pkin(7) * t598 - t1162 * t553 + t1167 * t561, -pkin(7) * t588 - t1162 * t549 + t1167 * t557, -pkin(7) * t554 - t1162 * t547 + t1167 * t548; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1137, 0, t1138, 0, t1120, t1263, t1094, pkin(7) * t1094, t1052 * t1167 + t1162 * t1077, t1162 * t1020 + t1167 * t989, t1015 * t1167 + t1162 * t1072, t1051 * t1167 + t1162 * t1076, t1016 * t1167 + t1162 * t1073, t1162 * t1091 - t1167 * t1215, pkin(7) * t951 + t1162 * t907 + t1167 * t899, pkin(7) * t943 + t1162 * t900 + t1167 * t889, pkin(7) * t931 + t1162 * t851 + t1167 * t866, pkin(7) * t869 + t1162 * t855 + t1167 * t870, t1360, t1456, t1427, t1397, t1457, t1377, pkin(7) * t774 + t1162 * t695 + t1167 * t691, pkin(7) * t779 + t1162 * t700 + t1167 * t694, t1162 * t679 + t1167 * t651 + t1454, pkin(7) * t693 + t1162 * t631 + t1167 * t629, t1360, t1427, -t1456, t1377, -t1457, t1397, pkin(7) * t780 + t1162 * t674 + t1167 * t646, t1162 * t650 + t1167 * t626 + t1454, pkin(7) * t773 + t1162 * t667 + t1167 * t642, pkin(7) * t640 + t1162 * t604 + t1167 * t592, t1162 * t769 + t1167 * t709, t1162 * t716 + t1167 * t657, t1162 * t762 + t1167 * t717, t1162 * t768 + t1167 * t708, t1162 * t763 + t1167 * t718, t1162 * t867 + t1167 * t775, pkin(7) * t665 + t1162 * t591 + t1167 * t580, pkin(7) * t678 + t1162 * t594 + t1167 * t583, pkin(7) * t625 + t1162 * t574 + t1167 * t566, pkin(7) * t576 + t1162 * t558 + t1167 * t556, t1162 * t690 + t1167 * t636, t1162 * t632 + t1167 * t612, t1162 * t653 + t1167 * t620, t1162 * t689 + t1167 * t635, t1162 * t654 + t1167 * t621, t1162 * t703 + t1167 * t663, pkin(7) * t596 + t1162 * t560 + t1167 * t552, pkin(7) * t599 + t1162 * t561 + t1167 * t553, pkin(7) * t589 + t1162 * t557 + t1167 * t549, pkin(7) * t555 + t1162 * t548 + t1167 * t547; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1143, t1144, 0, 0, t1118 * t1303 + t1223, t1157 * t1124 + t1156 * t1221, t1157 * t1085 + t1156 * t1217, t1119 * t1302 - t1223, t1157 * t1086 + t1156 * t1218, t1157 * t1267, pkin(1) * t1017 - t1055 * t1157 + t1156 * t1258, pkin(1) * t1004 - t1056 * t1157 + t1156 * t1259, pkin(1) * t988 + t1156 * t1185, pkin(1) * t941 + t1348 * t964, t1202, t1449, t1418, t1380, t1448, t1358, pkin(1) * t845 + t1156 * t1188 + t1157 * t852, pkin(1) * t848 + t1156 * t1187 + t1157 * t863, t1156 * t1183 + t1157 * t760 + t1447, pkin(1) * t731 + t1156 * t1180 + t1157 * t787, t1202, t1418, -t1449, t1358, -t1448, t1380, pkin(1) * t849 + t1156 * t1189 + t1157 * t759, t1156 * t1191 + t1157 * t719 + t1447, pkin(1) * t844 + t1156 * t1190 + t1157 * t758, pkin(1) * t687 + t1156 * t1192 + t1157 * t688, t1156 * t1209 + t1157 * t795, t1156 * t1246 + t1157 * t722, t1156 * t1239 + t1157 * t827, t1156 * t1210 + t1157 * t794, t1156 * t1238 + t1157 * t828, t1156 * t1225 + t1157 * t873, pkin(1) * t699 + t1156 * t1194 + t1157 * t627, pkin(1) * t715 + t1156 * t1193 + t1157 * t633, pkin(1) * t656 + t1156 * t1195 + t1157 * t600, pkin(1) * t587 + t1156 * t1196 + t1157 * t582, t1156 * t1247 + t1157 * t711, t1156 * t1253 + t1157 * t668, t1156 * t1250 + t1157 * t680, t1156 * t1248 + t1157 * t710, t1156 * t1249 + t1157 * t681, t1156 * t1244 + t1157 * t743, pkin(1) * t614 + t1156 * t1198 + t1157 * t570, pkin(1) * t617 + t1156 * t1197 + t1157 * t571, pkin(1) * t610 + t1156 * t1199 + t1157 * t565, pkin(1) * t563 + t1156 * t1200 + t1157 * t550;];
tauB_reg  = t1;
