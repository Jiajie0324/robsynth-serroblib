% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 14:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR11_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR11_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR11_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 14:36:33
% EndTime: 2019-05-07 14:36:45
% DurationCPUTime: 13.88s
% Computational Cost: add. (63962->361), mult. (137963->487), div. (0->0), fcn. (109897->12), ass. (0->278)
t2682 = sin(pkin(6));
t2687 = sin(qJ(2));
t2753 = t2682 * t2687;
t2746 = qJD(1) * t2753;
t2674 = qJD(2) * t2746;
t2692 = cos(qJ(2));
t2747 = qJDD(1) * t2692;
t2733 = t2682 * t2747 - t2674;
t2709 = -qJDD(3) + t2733;
t2686 = sin(qJ(3));
t2691 = cos(qJ(3));
t2683 = cos(pkin(6));
t2743 = qJD(1) * t2683 + qJD(2);
t2643 = t2686 * t2746 - t2691 * t2743;
t2645 = t2686 * t2743 + t2691 * t2746;
t2757 = t2643 * t2645;
t2601 = t2709 - t2757;
t2642 = t2645 ^ 2;
t2752 = t2682 * t2692;
t2745 = qJD(1) * t2752;
t2671 = qJD(3) - t2745;
t2766 = t2671 ^ 2;
t2779 = -t2642 - t2766;
t2568 = t2601 * t2686 + t2691 * t2779;
t2570 = t2601 * t2691 - t2686 * t2779;
t2748 = qJDD(1) * t2682;
t2654 = qJD(2) * t2745 + t2687 * t2748;
t2736 = qJDD(1) * t2683 + qJDD(2);
t2609 = -t2643 * qJD(3) + t2691 * t2654 + t2686 * t2736;
t2756 = t2643 * t2671;
t2698 = t2609 - t2756;
t2717 = t2570 * t2687 - t2692 * t2698;
t2525 = -t2682 * t2568 + t2683 * t2717;
t2542 = t2570 * t2692 + t2687 * t2698;
t2688 = sin(qJ(1));
t2693 = cos(qJ(1));
t2808 = t2525 * t2688 - t2542 * t2693;
t2807 = t2525 * t2693 + t2542 * t2688;
t2523 = t2683 * t2568 + t2682 * t2717;
t2768 = t2643 ^ 2;
t2599 = t2642 + t2768;
t2737 = t2686 * t2654 - t2691 * t2736;
t2703 = (-qJD(3) + t2671) * t2645 - t2737;
t2739 = -t2609 - t2756;
t2774 = -t2686 * t2739 + t2691 * t2703;
t2791 = -t2599 * t2687 + t2692 * t2774;
t2775 = t2686 * t2703 + t2691 * t2739;
t2790 = t2599 * t2692 + t2687 * t2774;
t2797 = -t2682 * t2775 + t2683 * t2790;
t2804 = -t2688 * t2797 + t2693 * t2791;
t2803 = t2688 * t2791 + t2693 * t2797;
t2798 = t2682 * t2790 + t2683 * t2775;
t2602 = t2709 + t2757;
t2777 = -t2766 - t2768;
t2784 = -t2691 * t2602 + t2686 * t2777;
t2796 = t2682 * t2784;
t2795 = t2683 * t2784;
t2783 = t2602 * t2686 + t2691 * t2777;
t2794 = t2687 * t2783;
t2793 = t2692 * t2783;
t2735 = t2743 ^ 2;
t2673 = -g(1) * t2693 - g(2) * t2688;
t2694 = qJD(1) ^ 2;
t2650 = -pkin(1) * t2694 + pkin(8) * t2748 + t2673;
t2672 = t2688 * g(1) - t2693 * g(2);
t2789 = t2682 * t2694;
t2702 = qJDD(1) * pkin(1) + pkin(8) * t2789 + t2672;
t2700 = t2683 * t2702;
t2738 = t2687 * t2650 - t2692 * t2700;
t2762 = (-pkin(2) * t2692 - pkin(9) * t2687) * t2789;
t2578 = t2682 * (g(3) * t2692 + t2687 * t2762) - t2736 * pkin(2) - t2735 * pkin(9) + t2738;
t2706 = qJD(3) * t2645 + t2737;
t2697 = t2706 * pkin(3) - qJ(4) * t2698 + t2578;
t2734 = -pkin(4) * t2671 - pkin(10) * t2645;
t2792 = t2768 * pkin(10) - t2645 * t2734 + t2697;
t2685 = sin(qJ(5));
t2690 = cos(qJ(5));
t2615 = -t2690 * t2643 + t2645 * t2685;
t2614 = qJD(6) + t2615;
t2780 = qJD(6) + t2614;
t2617 = t2643 * t2685 + t2645 * t2690;
t2662 = qJD(5) - t2671;
t2684 = sin(qJ(6));
t2689 = cos(qJ(6));
t2595 = t2617 * t2684 - t2689 * t2662;
t2773 = t2595 ^ 2;
t2597 = t2617 * t2689 + t2662 * t2684;
t2772 = t2597 ^ 2;
t2771 = t2614 ^ 2;
t2770 = t2615 ^ 2;
t2769 = t2617 ^ 2;
t2767 = t2662 ^ 2;
t2765 = 2 * qJD(4);
t2763 = t2683 * g(3);
t2760 = t2595 * t2597;
t2758 = t2615 * t2617;
t2755 = t2671 * t2645;
t2754 = t2682 ^ 2 * t2694;
t2751 = qJD(5) - t2662;
t2750 = qJD(6) - t2614;
t2749 = t2692 * t2650 + t2687 * t2700;
t2579 = t2736 * pkin(9) - t2735 * pkin(2) + (-g(3) * t2687 + t2692 * t2762) * t2682 + t2749;
t2732 = qJD(1) * t2743;
t2707 = t2687 * t2732;
t2708 = t2692 * t2732;
t2695 = t2674 * pkin(2) - t2654 * pkin(9) - t2763 + (-pkin(9) * t2708 + (t2707 - t2747) * pkin(2) - t2702) * t2682;
t2548 = t2691 * t2579 + t2686 * t2695;
t2619 = pkin(3) * t2643 - qJ(4) * t2645;
t2527 = -pkin(3) * t2766 - t2709 * qJ(4) - t2643 * t2619 + t2671 * t2765 + t2548;
t2509 = -pkin(4) * t2768 + pkin(10) * t2706 + t2671 * t2734 + t2527;
t2547 = -t2686 * t2579 + t2691 * t2695;
t2530 = t2709 * pkin(3) - qJ(4) * t2766 + t2645 * t2619 + qJDD(4) - t2547;
t2696 = pkin(4) * t2602 + pkin(10) * t2739 + t2530;
t2484 = t2690 * t2509 + t2685 * t2696;
t2744 = pkin(3) * t2671 - (2 * qJD(4));
t2483 = -t2509 * t2685 + t2690 * t2696;
t2701 = -t2690 * t2609 - t2685 * t2706;
t2555 = -t2615 * qJD(5) - t2701;
t2742 = t2662 * t2615 - t2555;
t2705 = qJDD(5) + t2709;
t2741 = -t2684 * t2555 + t2689 * t2705;
t2740 = t2685 * t2609 - t2690 * t2706;
t2572 = pkin(5) * t2615 - pkin(11) * t2617;
t2470 = -pkin(5) * t2767 + pkin(11) * t2705 - t2615 * t2572 + t2484;
t2536 = (qJD(5) + t2662) * t2617 + t2740;
t2480 = -pkin(3) * t2755 - pkin(4) * t2706 + pkin(5) * t2536 + pkin(11) * t2742 + t2645 * t2765 - t2792;
t2456 = -t2470 * t2684 + t2480 * t2689;
t2457 = t2470 * t2689 + t2480 * t2684;
t2446 = -t2456 * t2684 + t2457 * t2689;
t2469 = -pkin(5) * t2705 - pkin(11) * t2767 + t2572 * t2617 - t2483;
t2436 = t2446 * t2685 - t2469 * t2690;
t2437 = t2446 * t2690 + t2469 * t2685;
t2433 = t2436 * t2686 + t2437 * t2691;
t2445 = t2456 * t2689 + t2457 * t2684;
t2731 = t2433 * t2687 + t2445 * t2692;
t2460 = t2483 * t2690 + t2484 * t2685;
t2461 = -t2483 * t2685 + t2484 * t2690;
t2448 = t2460 * t2686 + t2461 * t2691;
t2510 = t2737 * pkin(4) + (pkin(4) * qJD(3) + t2744) * t2645 + t2792;
t2730 = t2448 * t2687 - t2510 * t2692;
t2516 = -t2597 * t2750 + t2741;
t2699 = -t2689 * t2555 - t2684 * t2705;
t2518 = t2595 * t2750 + t2699;
t2488 = t2516 * t2689 - t2518 * t2684;
t2544 = -t2772 - t2773;
t2473 = t2488 * t2685 - t2544 * t2690;
t2474 = t2488 * t2690 + t2544 * t2685;
t2455 = t2473 * t2686 + t2474 * t2691;
t2487 = t2516 * t2684 + t2518 * t2689;
t2729 = t2455 * t2687 + t2487 * t2692;
t2704 = -qJD(5) * t2617 - qJDD(6) - t2740;
t2528 = -t2704 - t2760;
t2549 = -t2771 - t2773;
t2495 = -t2528 * t2684 + t2549 * t2689;
t2515 = t2597 * t2780 - t2741;
t2481 = t2495 * t2685 - t2515 * t2690;
t2482 = t2495 * t2690 + t2515 * t2685;
t2459 = t2481 * t2686 + t2482 * t2691;
t2494 = t2528 * t2689 + t2549 * t2684;
t2728 = t2459 * t2687 + t2494 * t2692;
t2529 = t2704 - t2760;
t2554 = -t2771 - t2772;
t2499 = t2529 * t2689 - t2554 * t2684;
t2517 = -t2595 * t2780 - t2699;
t2485 = t2499 * t2685 - t2517 * t2690;
t2486 = t2499 * t2690 + t2517 * t2685;
t2463 = t2485 * t2686 + t2486 * t2691;
t2498 = t2529 * t2684 + t2554 * t2689;
t2727 = t2463 * t2687 + t2498 * t2692;
t2537 = -t2617 * t2751 - t2740;
t2539 = t2615 * t2751 + t2701;
t2500 = t2537 * t2685 + t2539 * t2690;
t2501 = t2537 * t2690 - t2539 * t2685;
t2476 = t2500 * t2686 + t2501 * t2691;
t2556 = -t2769 - t2770;
t2726 = t2476 * t2687 + t2556 * t2692;
t2492 = t2527 * t2691 + t2530 * t2686;
t2531 = t2645 * t2744 + t2697;
t2725 = t2492 * t2687 - t2531 * t2692;
t2563 = t2705 - t2758;
t2567 = -t2767 - t2770;
t2534 = t2563 * t2690 + t2567 * t2685;
t2535 = -t2563 * t2685 + t2567 * t2690;
t2497 = t2534 * t2686 + t2535 * t2691;
t2724 = t2497 * t2687 + t2536 * t2692;
t2564 = -t2705 - t2758;
t2592 = -t2767 - t2769;
t2545 = t2564 * t2685 + t2592 * t2690;
t2546 = t2564 * t2690 - t2592 * t2685;
t2512 = t2545 * t2686 + t2546 * t2691;
t2723 = t2512 * t2687 - t2692 * t2742;
t2514 = -t2547 * t2686 + t2548 * t2691;
t2722 = t2514 * t2687 - t2578 * t2692;
t2584 = (qJD(3) + t2671) * t2645 + t2737;
t2718 = -t2584 * t2692 + t2794;
t2583 = t2706 + t2755;
t2716 = -t2583 * t2692 + t2794;
t2612 = -g(3) * t2752 - t2738;
t2613 = -g(3) * t2753 + t2749;
t2715 = t2612 * t2692 + t2613 * t2687;
t2626 = t2682 * t2708 - t2654;
t2657 = t2682 * t2707;
t2627 = t2657 + t2733;
t2714 = t2626 * t2692 + t2627 * t2687;
t2680 = t2687 ^ 2;
t2639 = -t2680 * t2754 - t2735;
t2669 = t2692 * t2687 * t2754;
t2652 = t2669 - t2736;
t2713 = t2639 * t2692 + t2652 * t2687;
t2651 = t2669 + t2736;
t2681 = t2692 ^ 2;
t2655 = -t2681 * t2754 - t2735;
t2712 = t2651 * t2692 + t2655 * t2687;
t2667 = -qJDD(1) * t2688 - t2693 * t2694;
t2666 = qJDD(1) * t2693 - t2688 * t2694;
t2656 = (-t2680 - t2681) * t2754;
t2633 = -t2682 * t2702 - t2763;
t2628 = t2657 - t2733;
t2625 = t2743 * t2745 + t2654;
t2623 = -t2651 * t2687 + t2655 * t2692;
t2618 = -t2639 * t2687 + t2652 * t2692;
t2593 = -t2626 * t2687 + t2627 * t2692;
t2591 = -t2682 * t2628 + t2683 * t2712;
t2590 = t2683 * t2628 + t2682 * t2712;
t2582 = -t2682 * t2625 + t2683 * t2713;
t2581 = t2683 * t2625 + t2682 * t2713;
t2577 = -t2682 * t2656 + t2683 * t2714;
t2576 = t2683 * t2656 + t2682 * t2714;
t2566 = -t2612 * t2687 + t2613 * t2692;
t2558 = -t2682 * t2633 + t2683 * t2715;
t2557 = t2683 * t2633 + t2682 * t2715;
t2543 = t2583 * t2687 + t2793;
t2541 = t2584 * t2687 + t2793;
t2526 = t2683 * t2716 - t2796;
t2524 = t2682 * t2716 + t2795;
t2522 = t2683 * t2718 - t2796;
t2520 = t2682 * t2718 + t2795;
t2513 = t2547 * t2691 + t2548 * t2686;
t2511 = -t2545 * t2691 + t2546 * t2686;
t2496 = -t2534 * t2691 + t2535 * t2686;
t2493 = t2514 * t2692 + t2578 * t2687;
t2491 = t2527 * t2686 - t2530 * t2691;
t2490 = t2512 * t2692 + t2687 * t2742;
t2489 = t2497 * t2692 - t2536 * t2687;
t2479 = -t2682 * t2513 + t2683 * t2722;
t2478 = t2683 * t2513 + t2682 * t2722;
t2477 = t2492 * t2692 + t2531 * t2687;
t2475 = -t2500 * t2691 + t2501 * t2686;
t2472 = -t2682 * t2511 + t2683 * t2723;
t2471 = t2683 * t2511 + t2682 * t2723;
t2468 = t2476 * t2692 - t2556 * t2687;
t2467 = -t2682 * t2496 + t2683 * t2724;
t2466 = t2683 * t2496 + t2682 * t2724;
t2465 = -t2682 * t2491 + t2683 * t2725;
t2464 = t2683 * t2491 + t2682 * t2725;
t2462 = -t2485 * t2691 + t2486 * t2686;
t2458 = -t2481 * t2691 + t2482 * t2686;
t2454 = -t2473 * t2691 + t2474 * t2686;
t2453 = -t2682 * t2475 + t2683 * t2726;
t2452 = t2683 * t2475 + t2682 * t2726;
t2451 = t2463 * t2692 - t2498 * t2687;
t2450 = t2459 * t2692 - t2494 * t2687;
t2449 = t2455 * t2692 - t2487 * t2687;
t2447 = -t2460 * t2691 + t2461 * t2686;
t2444 = -t2682 * t2462 + t2683 * t2727;
t2443 = t2683 * t2462 + t2682 * t2727;
t2442 = t2448 * t2692 + t2510 * t2687;
t2441 = -t2682 * t2458 + t2683 * t2728;
t2440 = t2683 * t2458 + t2682 * t2728;
t2439 = -t2682 * t2454 + t2683 * t2729;
t2438 = t2683 * t2454 + t2682 * t2729;
t2435 = -t2682 * t2447 + t2683 * t2730;
t2434 = t2683 * t2447 + t2682 * t2730;
t2432 = -t2436 * t2691 + t2437 * t2686;
t2431 = t2433 * t2692 - t2445 * t2687;
t2430 = -t2682 * t2432 + t2683 * t2731;
t2429 = t2683 * t2432 + t2682 * t2731;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2667, -t2666, 0, -t2672 * t2688 + t2673 * t2693, 0, 0, 0, 0, 0, 0, -t2591 * t2688 + t2623 * t2693, -t2582 * t2688 + t2618 * t2693, -t2577 * t2688 + t2593 * t2693, -t2558 * t2688 + t2566 * t2693, 0, 0, 0, 0, 0, 0, -t2522 * t2688 + t2541 * t2693, -t2808, t2804, -t2479 * t2688 + t2493 * t2693, 0, 0, 0, 0, 0, 0, -t2526 * t2688 + t2543 * t2693, t2804, t2808, -t2465 * t2688 + t2477 * t2693, 0, 0, 0, 0, 0, 0, -t2467 * t2688 + t2489 * t2693, -t2472 * t2688 + t2490 * t2693, -t2453 * t2688 + t2468 * t2693, -t2435 * t2688 + t2442 * t2693, 0, 0, 0, 0, 0, 0, -t2441 * t2688 + t2450 * t2693, -t2444 * t2688 + t2451 * t2693, -t2439 * t2688 + t2449 * t2693, -t2430 * t2688 + t2431 * t2693; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2666, t2667, 0, t2672 * t2693 + t2673 * t2688, 0, 0, 0, 0, 0, 0, t2591 * t2693 + t2623 * t2688, t2582 * t2693 + t2618 * t2688, t2577 * t2693 + t2593 * t2688, t2558 * t2693 + t2566 * t2688, 0, 0, 0, 0, 0, 0, t2522 * t2693 + t2541 * t2688, t2807, t2803, t2479 * t2693 + t2493 * t2688, 0, 0, 0, 0, 0, 0, t2526 * t2693 + t2543 * t2688, t2803, -t2807, t2465 * t2693 + t2477 * t2688, 0, 0, 0, 0, 0, 0, t2467 * t2693 + t2489 * t2688, t2472 * t2693 + t2490 * t2688, t2453 * t2693 + t2468 * t2688, t2435 * t2693 + t2442 * t2688, 0, 0, 0, 0, 0, 0, t2441 * t2693 + t2450 * t2688, t2444 * t2693 + t2451 * t2688, t2439 * t2693 + t2449 * t2688, t2430 * t2693 + t2431 * t2688; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2590, t2581, t2576, t2557, 0, 0, 0, 0, 0, 0, t2520, t2523, t2798, t2478, 0, 0, 0, 0, 0, 0, t2524, t2798, -t2523, t2464, 0, 0, 0, 0, 0, 0, t2466, t2471, t2452, t2434, 0, 0, 0, 0, 0, 0, t2440, t2443, t2438, t2429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2694, -qJDD(1), 0, t2673, 0, 0, 0, 0, 0, 0, t2623, t2618, t2593, t2566, 0, 0, 0, 0, 0, 0, t2541, t2542, t2791, t2493, 0, 0, 0, 0, 0, 0, t2543, t2791, -t2542, t2477, 0, 0, 0, 0, 0, 0, t2489, t2490, t2468, t2442, 0, 0, 0, 0, 0, 0, t2450, t2451, t2449, t2431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2694, 0, t2672, 0, 0, 0, 0, 0, 0, t2591, t2582, t2577, t2558, 0, 0, 0, 0, 0, 0, t2522, t2525, t2797, t2479, 0, 0, 0, 0, 0, 0, t2526, t2797, -t2525, t2465, 0, 0, 0, 0, 0, 0, t2467, t2472, t2453, t2435, 0, 0, 0, 0, 0, 0, t2441, t2444, t2439, t2430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2590, t2581, t2576, t2557, 0, 0, 0, 0, 0, 0, t2520, t2523, t2798, t2478, 0, 0, 0, 0, 0, 0, t2524, t2798, -t2523, t2464, 0, 0, 0, 0, 0, 0, t2466, t2471, t2452, t2434, 0, 0, 0, 0, 0, 0, t2440, t2443, t2438, t2429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2655, t2652, t2627, t2613, 0, 0, 0, 0, 0, 0, t2783, t2570, t2774, t2514, 0, 0, 0, 0, 0, 0, t2783, t2774, -t2570, t2492, 0, 0, 0, 0, 0, 0, t2497, t2512, t2476, t2448, 0, 0, 0, 0, 0, 0, t2459, t2463, t2455, t2433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2651, t2639, t2626, t2612, 0, 0, 0, 0, 0, 0, -t2584, -t2698, t2599, -t2578, 0, 0, 0, 0, 0, 0, -t2583, t2599, t2698, -t2531, 0, 0, 0, 0, 0, 0, t2536, -t2742, t2556, -t2510, 0, 0, 0, 0, 0, 0, t2494, t2498, t2487, t2445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2628, t2625, t2656, t2633, 0, 0, 0, 0, 0, 0, t2784, t2568, t2775, t2513, 0, 0, 0, 0, 0, 0, t2784, t2775, -t2568, t2491, 0, 0, 0, 0, 0, 0, t2496, t2511, t2475, t2447, 0, 0, 0, 0, 0, 0, t2458, t2462, t2454, t2432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2777, t2601, t2703, t2548, 0, 0, 0, 0, 0, 0, t2777, t2703, -t2601, t2527, 0, 0, 0, 0, 0, 0, t2535, t2546, t2501, t2461, 0, 0, 0, 0, 0, 0, t2482, t2486, t2474, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2602, t2779, t2739, t2547, 0, 0, 0, 0, 0, 0, -t2602, t2739, -t2779, -t2530, 0, 0, 0, 0, 0, 0, -t2534, -t2545, -t2500, -t2460, 0, 0, 0, 0, 0, 0, -t2481, -t2485, -t2473, -t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2584, t2698, -t2599, t2578, 0, 0, 0, 0, 0, 0, t2583, -t2599, -t2698, t2531, 0, 0, 0, 0, 0, 0, -t2536, t2742, -t2556, t2510, 0, 0, 0, 0, 0, 0, -t2494, -t2498, -t2487, -t2445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2777, t2703, -t2601, t2527, 0, 0, 0, 0, 0, 0, t2535, t2546, t2501, t2461, 0, 0, 0, 0, 0, 0, t2482, t2486, t2474, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2583, -t2599, -t2698, t2531, 0, 0, 0, 0, 0, 0, -t2536, t2742, -t2556, t2510, 0, 0, 0, 0, 0, 0, -t2494, -t2498, -t2487, -t2445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2602, -t2739, t2779, t2530, 0, 0, 0, 0, 0, 0, t2534, t2545, t2500, t2460, 0, 0, 0, 0, 0, 0, t2481, t2485, t2473, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2567, t2564, t2537, t2484, 0, 0, 0, 0, 0, 0, t2495, t2499, t2488, t2446; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2563, t2592, t2539, t2483, 0, 0, 0, 0, 0, 0, -t2515, -t2517, -t2544, -t2469; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2536, -t2742, t2556, -t2510, 0, 0, 0, 0, 0, 0, t2494, t2498, t2487, t2445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2529, t2516, t2457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2528, t2554, t2518, t2456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2515, t2517, t2544, t2469;];
f_new_reg  = t1;
