% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRP8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP8_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:16:24
% EndTime: 2019-03-09 02:16:29
% DurationCPUTime: 1.69s
% Computational Cost: add. (2265->168), mult. (4499->286), div. (0->0), fcn. (4249->6), ass. (0->110)
t76 = sin(qJ(5));
t71 = t76 ^ 2;
t77 = cos(qJ(5));
t72 = t77 ^ 2;
t124 = t71 + t72;
t137 = sin(qJ(4));
t73 = sin(pkin(9));
t74 = cos(pkin(9));
t78 = cos(qJ(4));
t53 = -t137 * t73 + t74 * t78;
t125 = t71 - t72;
t58 = t125 * qJD(5);
t52 = t137 * t74 + t78 * t73;
t47 = t52 * qJD(4);
t132 = t53 * t47;
t48 = t53 * qJD(4);
t133 = t52 * t48;
t150 = 0.2e1 * t132 - 0.2e1 * t133;
t50 = t52 ^ 2;
t51 = t53 ^ 2;
t66 = qJD(5) * t76;
t151 = (t51 + t50) * t66 + t150 * t77;
t75 = -pkin(1) - qJ(3);
t138 = -pkin(7) + t75;
t54 = t138 * t73;
t55 = t138 * t74;
t39 = t137 * t55 + t78 * t54;
t63 = t73 * pkin(3) + qJ(2);
t89 = pkin(4) * t52 - pkin(8) * t53 + t63;
t149 = t77 * t39 + t76 * t89;
t38 = t137 * t54 - t78 * t55;
t56 = (t73 ^ 2 + t74 ^ 2) * qJD(3);
t20 = t52 * qJD(3) + t38 * qJD(4);
t85 = t77 * t89;
t91 = pkin(4) * t48 + pkin(8) * t47 + qJD(2);
t3 = -qJD(5) * t85 + t77 * t20 + t39 * t66 - t76 * t91;
t4 = -qJD(5) * t149 + t76 * t20 + t77 * t91;
t11 = -t76 * t39 + t85;
t95 = t11 * t76 - t149 * t77;
t147 = t95 * qJD(5) + t3 * t76 - t4 * t77;
t121 = qJD(6) * t52;
t123 = qJ(6) * t48;
t1 = t121 - t3 + t123;
t139 = t48 * pkin(5);
t2 = -t139 - t4;
t10 = -t52 * pkin(5) - t11;
t9 = qJ(6) * t52 + t149;
t99 = t10 * t76 + t77 * t9;
t146 = t99 * qJD(5) + t1 * t76 - t2 * t77;
t98 = pkin(5) * t77 + qJ(6) * t76;
t145 = t98 * qJD(5) - qJD(6) * t77;
t144 = 0.2e1 * qJD(2);
t143 = 0.2e1 * qJD(6);
t142 = pkin(4) * t47;
t141 = pkin(8) * t48;
t140 = pkin(8) * t52;
t21 = t53 * qJD(3) + t39 * qJD(4);
t136 = t21 * t38;
t135 = t47 * t77;
t134 = t48 * t76;
t131 = t53 * t76;
t130 = t53 * t77;
t128 = t77 * t48;
t127 = t124 * t141;
t67 = qJD(5) * t77;
t120 = qJD(6) * t76;
t118 = qJ(2) * qJD(2);
t117 = -0.2e1 * t134;
t40 = 0.2e1 * t133;
t116 = -0.2e1 * pkin(4) * qJD(5);
t114 = t76 * t135;
t113 = 0.2e1 * t47 * t131 - t51 * t67;
t112 = pkin(8) * t66;
t111 = pkin(8) * t67;
t110 = t52 * t67;
t109 = t76 * t67;
t26 = t124 * t48;
t105 = t51 * t109;
t104 = -t141 + t142;
t103 = pkin(4) * t53 + t140;
t100 = t10 * t77 - t76 * t9;
t97 = pkin(5) * t76 - qJ(6) * t77;
t96 = t11 * t77 + t149 * t76;
t94 = -t21 * t53 + t38 * t47;
t46 = -pkin(5) * t66 + qJ(6) * t67 + t120;
t57 = -pkin(4) - t98;
t93 = t46 * t53 + t47 * t57;
t31 = -t47 * t76 + t53 * t67;
t90 = t53 * t66 + t135;
t30 = t110 + t134;
t28 = t52 * t66 - t128;
t5 = t145 * t53 - t97 * t47 + t21;
t86 = -t5 + (t53 * t57 - t140) * qJD(5);
t84 = t20 * t52 - t39 * t48 - t94;
t14 = t97 * t53 + t38;
t83 = -qJD(5) * t14 + t141 + t93;
t80 = t100 * qJD(5) + t1 * t77 + t2 * t76;
t79 = -t96 * qJD(5) - t3 * t77 - t4 * t76;
t60 = -0.2e1 * t109;
t59 = 0.2e1 * t109;
t25 = t124 * t47;
t18 = -0.2e1 * t72 * t132 - 0.2e1 * t105;
t17 = -0.2e1 * t71 * t132 + 0.2e1 * t105;
t16 = t53 * t58 + t114;
t15 = 0.4e1 * t53 * t109 - t125 * t47;
t13 = 0.2e1 * t53 * t114 + t51 * t58;
t8 = t48 * t131 + t31 * t52;
t7 = 0.2e1 * t52 * t26 - 0.2e1 * t132;
t6 = 0.2e1 * t53 * t128 - 0.2e1 * t90 * t52;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0.2e1 * t118, 0, 0, 0, 0, 0, 0, t73 * t144, t74 * t144, 0.2e1 * t56, -0.2e1 * t75 * t56 + 0.2e1 * t118, -0.2e1 * t132, 0.2e1 * t47 * t52 - 0.2e1 * t48 * t53, 0, t40, 0, 0, 0.2e1 * qJD(2) * t52 + 0.2e1 * t48 * t63, 0.2e1 * qJD(2) * t53 - 0.2e1 * t47 * t63, 0.2e1 * t84, 0.2e1 * qJD(2) * t63 - 0.2e1 * t20 * t39 + 0.2e1 * t136, t18, 0.2e1 * t13, t6, t17, -0.2e1 * t8, t40, 0.2e1 * t11 * t48 + 0.2e1 * t21 * t131 + 0.2e1 * t31 * t38 + 0.2e1 * t4 * t52, 0.2e1 * t21 * t130 - 0.2e1 * t149 * t48 + 0.2e1 * t3 * t52 - 0.2e1 * t90 * t38, 0.2e1 * t147 * t53 + 0.2e1 * t96 * t47, 0.2e1 * t11 * t4 - 0.2e1 * t149 * t3 + 0.2e1 * t136, t18, t6, -0.2e1 * t13, t40, 0.2e1 * t8, t17, -0.2e1 * t10 * t48 + 0.2e1 * t5 * t131 + 0.2e1 * t31 * t14 - 0.2e1 * t2 * t52, -0.2e1 * t100 * t47 - 0.2e1 * t146 * t53, 0.2e1 * t1 * t52 - 0.2e1 * t5 * t130 + 0.2e1 * t90 * t14 + 0.2e1 * t48 * t9, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t14 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, 0, 0, 0, 0, 0, 0, 0, 0, t150, -t84, 0, 0, 0, 0, 0, 0, t52 * t117 - t50 * t67 + t113, t151, 0, -t95 * t48 + t79 * t52 + t94, 0, 0, 0, 0, 0, 0 (-t110 + t117) * t52 + t113, 0, -t151, t14 * t47 + t99 * t48 - t5 * t53 + t80 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, t48, -t47, 0, qJD(2), 0, 0, 0, 0, 0, 0, -t28, -t30, t25, -t147, 0, 0, 0, 0, 0, 0, -t28, t25, t30, t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, 0, -t48, 0, -t21, t20, 0, 0, -t16, -t15, t30, t16, -t28, 0, -t21 * t77 + t104 * t76 + (-t103 * t77 + t38 * t76) * qJD(5), t21 * t76 + t104 * t77 + (t103 * t76 + t38 * t77) * qJD(5), t79, -pkin(4) * t21 + t79 * pkin(8), -t16, t30, t15, 0, t28, t16, -t83 * t76 + t86 * t77, t80, t86 * t76 + t83 * t77, t80 * pkin(8) - t14 * t46 + t5 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t48, 0, 0, 0, 0, 0, 0, 0, 0, -t90, -t31, t26, t127 - t142, 0, 0, 0, 0, 0, 0, -t90, t26, t31, t93 + t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -0.2e1 * t58, 0, t60, 0, 0, t76 * t116, t77 * t116, 0, 0, t59, 0, 0.2e1 * t58, 0, 0, t60, 0.2e1 * t46 * t77 + 0.2e1 * t57 * t66, 0, 0.2e1 * t46 * t76 - 0.2e1 * t57 * t67, -0.2e1 * t57 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, 0, -t31, t48, t4, t3, 0, 0, 0, -t90, 0, t48, t31, 0, t4 + 0.2e1 * t139, t98 * t47 + (t97 * qJD(5) - t120) * t53, 0.2e1 * t121 - t3 + 0.2e1 * t123, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, t28, 0, 0, 0, 0, 0, 0, 0, 0, -t30, 0, -t28, -t145 * t52 - t97 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, -t67, 0, 0, 0, 0, 0, 0, 0, 0, -t66, 0, t67, t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, -t66, 0, -t111, t112, 0, 0, 0, t67, 0, 0, t66, 0, -t111, -t145, -t112, -t145 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, qJ(6) * t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t90, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t12;
