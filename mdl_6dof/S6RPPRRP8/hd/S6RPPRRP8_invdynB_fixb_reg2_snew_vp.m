% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:08
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:07:42
% EndTime: 2019-05-05 15:08:06
% DurationCPUTime: 23.84s
% Computational Cost: add. (41186->597), mult. (93810->821), div. (0->0), fcn. (66794->8), ass. (0->413)
t752 = sin(pkin(9));
t753 = cos(pkin(9));
t756 = sin(qJ(4));
t759 = cos(qJ(4));
t779 = t752 * t759 + t753 * t756;
t724 = t779 * qJD(1);
t714 = qJD(5) + t724;
t852 = t714 ^ 2;
t726 = (-t752 * t756 + t753 * t759) * qJD(1);
t755 = sin(qJ(5));
t758 = cos(qJ(5));
t699 = -qJD(4) * t758 + t726 * t755;
t853 = t699 ^ 2;
t657 = t853 - t852;
t701 = qJD(4) * t755 + t726 * t758;
t652 = t701 * t699;
t810 = t726 * qJD(4);
t862 = t779 * qJDD(1);
t680 = -t862 - t810;
t670 = qJDD(5) - t680;
t867 = t652 + t670;
t833 = t867 * t755;
t562 = -t657 * t758 + t833;
t804 = qJDD(1) * t753;
t805 = qJDD(1) * t752;
t723 = -t756 * t805 + t759 * t804;
t812 = qJD(4) * t724;
t682 = t723 - t812;
t791 = -qJDD(4) * t758 + t682 * t755;
t586 = (qJD(5) - t714) * t701 + t791;
t502 = t562 * t756 - t586 * t759;
t506 = t562 * t759 + t586 * t756;
t456 = t502 * t753 + t506 * t752;
t832 = t867 * t758;
t559 = t657 * t755 + t832;
t757 = sin(qJ(1));
t760 = cos(qJ(1));
t963 = t456 * t757 - t559 * t760;
t962 = t456 * t760 + t559 * t757;
t961 = t502 * t752 - t506 * t753;
t808 = qJD(5) + t714;
t585 = t701 * t808 + t791;
t778 = -qJDD(4) * t755 - t682 * t758;
t769 = qJD(5) * t699 + t778;
t823 = t699 * t714;
t865 = -t823 - t769;
t836 = t865 * t755;
t514 = -t585 * t758 - t836;
t698 = t701 ^ 2;
t645 = t698 - t853;
t486 = t514 * t756 - t645 * t759;
t488 = t514 * t759 + t645 * t756;
t438 = t486 * t753 + t488 * t752;
t510 = -t585 * t755 + t758 * t865;
t960 = t438 * t757 + t510 * t760;
t959 = t438 * t760 - t510 * t757;
t864 = -t823 + t769;
t895 = -t586 * t755 + t758 * t864;
t866 = t698 + t853;
t894 = -t586 * t758 - t755 * t864;
t915 = -t756 * t866 + t759 * t894;
t917 = t756 * t894 + t759 * t866;
t930 = t752 * t915 + t753 * t917;
t950 = t757 * t895 - t760 * t930;
t956 = pkin(6) * t950;
t952 = t757 * t930 + t760 * t895;
t955 = pkin(6) * t952;
t954 = t486 * t752 - t488 * t753;
t658 = -t698 + t852;
t868 = -t652 + t670;
t831 = t868 * t755;
t899 = t658 * t758 + t831;
t830 = t868 * t758;
t897 = -t658 * t755 + t830;
t914 = -t756 * t864 + t759 * t897;
t916 = t756 * t897 + t759 * t864;
t932 = -t752 * t914 - t753 * t916;
t953 = -t757 * t932 + t760 * t899;
t951 = t757 * t899 + t760 * t932;
t847 = pkin(1) + qJ(3);
t949 = qJ(2) * t895 - t847 * t930;
t931 = -t752 * t917 + t753 * t915;
t948 = pkin(2) * t895 - t847 * t931;
t947 = pkin(2) * t930 + pkin(3) * t917 + pkin(4) * t866 + pkin(8) * t894 - qJ(2) * t931;
t628 = t852 + t698;
t540 = t628 * t758 + t833;
t946 = pkin(2) * t540;
t945 = pkin(3) * t540;
t944 = pkin(4) * t540;
t943 = pkin(7) * t915;
t942 = pkin(7) * t917;
t941 = pkin(8) * t540;
t550 = t628 * t755 - t832;
t940 = pkin(8) * t550;
t939 = qJ(2) * t540;
t938 = t540 * t757;
t937 = t540 * t760;
t936 = t550 * t756;
t935 = t550 * t759;
t933 = -t752 * t916 + t753 * t914;
t928 = pkin(8) * t895;
t819 = t726 * t724;
t896 = qJDD(4) - t819;
t924 = t756 * t896;
t921 = t759 * t896;
t863 = -t852 - t853;
t879 = t755 * t863 + t830;
t913 = pkin(2) * t879;
t912 = pkin(3) * t879;
t911 = pkin(4) * t879;
t878 = t758 * t863 - t831;
t910 = pkin(8) * t878;
t909 = pkin(8) * t879;
t908 = qJ(2) * t879;
t903 = t756 * t878;
t902 = t757 * t879;
t901 = t759 * t878;
t900 = t760 * t879;
t761 = qJD(1) ^ 2;
t736 = t757 * g(1) - g(2) * t760;
t781 = qJDD(2) - t736;
t770 = -t761 * qJ(2) + t781;
t801 = -0.2e1 * qJD(3) * qJD(1);
t898 = -qJDD(1) * t847 + t770 + t801;
t626 = -qJD(5) * t701 - t791;
t821 = t714 * t755;
t783 = t626 * t758 + t699 * t821;
t820 = t714 * t758;
t798 = t699 * t820;
t776 = -t626 * t755 + t798;
t800 = t756 * t652;
t857 = t759 * t776 - t800;
t799 = t759 * t652;
t858 = t756 * t776 + t799;
t874 = -t752 * t857 - t753 * t858;
t893 = -t757 * t874 + t760 * t783;
t774 = (-t699 * t755 - t701 * t758) * t714;
t655 = t701 * t821;
t782 = t655 - t798;
t856 = t670 * t756 + t759 * t782;
t859 = -t670 * t759 + t756 * t782;
t876 = -t752 * t856 - t753 * t859;
t892 = -t757 * t876 + t760 * t774;
t891 = t757 * t783 + t760 * t874;
t890 = t757 * t774 + t760 * t876;
t889 = 2 * qJD(6);
t887 = qJ(6) * t865;
t583 = t701 * t820 - t755 * t769;
t584 = -t758 * t769 - t655;
t784 = t584 * t759 + t800;
t785 = t584 * t756 - t799;
t854 = -t752 * t784 - t753 * t785;
t882 = t583 * t757 + t760 * t854;
t881 = t583 * t760 - t757 * t854;
t748 = t752 ^ 2;
t749 = t753 ^ 2;
t813 = t748 + t749;
t880 = pkin(3) * t805 - (pkin(7) * t813 + t847) * t761;
t877 = -t752 * t859 + t753 * t856;
t875 = -t752 * t858 + t753 * t857;
t869 = t813 * t761;
t672 = -g(3) * t753 + t752 * t898;
t653 = -pkin(3) * t748 * t761 - pkin(7) * t805 + t672;
t848 = t752 * g(3);
t764 = t848 + (t801 + (-pkin(3) * t752 - qJ(2)) * t761 + (-pkin(7) - t847) * qJDD(1) + t781) * t753;
t599 = t653 * t759 + t756 * t764;
t673 = pkin(4) * t724 - pkin(8) * t726;
t851 = qJD(4) ^ 2;
t536 = -pkin(4) * t851 + qJDD(4) * pkin(8) - t673 * t724 + t599;
t807 = qJD(2) * qJD(1);
t746 = 0.2e1 * t807;
t737 = g(1) * t760 + g(2) * t757;
t750 = qJDD(1) * qJ(2);
t777 = t737 - t750;
t773 = -qJDD(3) + t777;
t554 = t746 + (-t682 + t812) * pkin(8) + (-t680 + t810) * pkin(4) - t773 + t880;
t479 = t536 * t758 + t554 * t755;
t643 = pkin(5) * t699 - qJ(6) * t701;
t780 = qJ(6) * t670 - t643 * t699 + t714 * t889 + t479;
t855 = -t752 * t785 + t753 * t784;
t720 = t724 ^ 2;
t721 = t726 ^ 2;
t850 = pkin(4) * t756;
t849 = pkin(5) * t758;
t846 = qJ(6) * t758;
t845 = qJDD(1) * pkin(1);
t598 = t653 * t756 - t759 * t764;
t516 = -t598 * t759 + t599 * t756;
t844 = t516 * t752;
t843 = t516 * t753;
t535 = -qJDD(4) * pkin(4) - pkin(8) * t851 + t673 * t726 + t598;
t842 = t535 * t755;
t841 = t535 * t758;
t768 = t773 - 0.2e1 * t807;
t667 = t768 - t880;
t828 = t667 * t756;
t827 = t667 * t759;
t677 = qJDD(4) + t819;
t825 = t677 * t756;
t824 = t677 * t759;
t822 = t714 * t701;
t730 = t813 * qJDD(1);
t818 = t730 * t757;
t817 = t730 * t760;
t816 = t752 * t753;
t478 = t536 * t755 - t554 * t758;
t815 = t866 - t852;
t814 = t748 - t749;
t803 = qJDD(1) * t757;
t802 = qJDD(1) * t760;
t797 = t757 * t819;
t796 = t760 * t819;
t795 = -pkin(4) * t759 - pkin(3);
t793 = -qJ(6) * t755 - pkin(4);
t433 = t478 * t755 + t479 * t758;
t517 = t598 * t756 + t599 * t759;
t711 = -pkin(1) * t761 + t746 - t777;
t715 = -t770 + t845;
t661 = t711 * t760 - t715 * t757;
t695 = -t736 * t757 - t737 * t760;
t703 = t761 * t847 + t768;
t790 = -t703 + t750;
t788 = t643 * t701 + qJDD(6) + t478;
t734 = -t757 * t761 + t802;
t787 = pkin(6) * t734 + g(3) * t757;
t735 = t760 * t761 + t803;
t786 = -pkin(6) * t735 + g(3) * t760;
t432 = -t478 * t758 + t479 * t755;
t671 = t753 * t898 + t848;
t611 = t671 * t753 + t672 * t752;
t612 = -t671 * t752 + t672 * t753;
t660 = t711 * t757 + t715 * t760;
t694 = t736 * t760 - t737 * t757;
t728 = t752 * t869;
t692 = -t728 * t757 + t752 * t802;
t690 = t728 * t760 + t752 * t803;
t775 = -pkin(5) * t670 + t788;
t767 = -t626 * pkin(5) + t535 - t887;
t765 = t701 * t889 - t767;
t733 = t814 * t761;
t731 = t814 * qJDD(1);
t727 = t753 * t869;
t710 = -t721 - t851;
t709 = -t721 + t851;
t708 = t720 - t851;
t706 = t735 * t816;
t705 = t734 * t816;
t693 = -t727 * t757 + t753 * t802;
t691 = t727 * t760 + t753 * t803;
t688 = -t760 * t869 - t818;
t687 = -t757 * t869 + t817;
t685 = t721 - t720;
t684 = pkin(2) * t805 - t703 * t753;
t683 = pkin(2) * t804 + t703 * t752;
t681 = t723 - 0.2e1 * t812;
t679 = t862 + 0.2e1 * t810;
t674 = -t851 - t720;
t666 = (-t724 * t759 + t726 * t756) * qJD(4);
t665 = (-t724 * t756 - t726 * t759) * qJD(4);
t650 = -t720 - t721;
t648 = -pkin(2) * t728 + t671;
t647 = -pkin(2) * t727 - t672;
t640 = t682 * t759 - t756 * t810;
t639 = t682 * t756 + t759 * t810;
t638 = -t680 * t756 + t759 * t812;
t637 = t680 * t759 + t756 * t812;
t634 = -t710 * t756 - t824;
t633 = -t709 * t756 + t921;
t632 = t708 * t759 - t825;
t631 = t710 * t759 - t825;
t630 = t709 * t759 + t924;
t629 = t708 * t756 + t824;
t620 = -t679 * t759 - t681 * t756;
t619 = t723 * t756 - t759 * t862;
t618 = -t679 * t756 + t681 * t759;
t617 = -t723 * t759 - t756 * t862;
t616 = t674 * t759 - t924;
t615 = t674 * t756 + t921;
t601 = -pkin(2) * t869 - t612;
t600 = -t665 * t753 - t666 * t752;
t597 = -pkin(7) * t631 - t827;
t595 = t611 * t757 - t703 * t760;
t594 = -t611 * t760 - t703 * t757;
t593 = t699 * t808 + t778;
t587 = -t626 + t822;
t574 = -pkin(7) * t615 - t828;
t573 = -t639 * t753 - t640 * t752;
t572 = -t637 * t753 - t638 * t752;
t571 = -t631 * t752 + t634 * t753;
t570 = t631 * t753 + t634 * t752;
t569 = -t630 * t753 - t633 * t752;
t568 = -t629 * t753 - t632 * t752;
t555 = -pkin(3) * t681 + pkin(7) * t634 - t828;
t547 = -t617 * t752 + t619 * t753;
t546 = -t618 * t753 - t620 * t752;
t545 = t617 * t753 + t619 * t752;
t544 = -pkin(3) * t679 + pkin(7) * t616 + t827;
t539 = pkin(2) * t611 - qJ(2) * t612;
t538 = -t615 * t752 + t616 * t753;
t537 = t615 * t753 + t616 * t752;
t532 = t570 * t757 + t681 * t760;
t531 = -t570 * t760 + t681 * t757;
t522 = -pkin(2) * t703 - t612 * t847;
t521 = t537 * t757 + t679 * t760;
t520 = -t537 * t760 + t679 * t757;
t519 = t545 * t757 + t650 * t760;
t518 = -t545 * t760 + t650 * t757;
t499 = pkin(3) * t667 + pkin(7) * t517;
t498 = t587 * t756 + t901;
t497 = -t593 * t756 + t935;
t496 = -t587 * t759 + t903;
t495 = t593 * t759 + t936;
t492 = t585 * t756 + t901;
t491 = -t756 * t865 - t935;
t490 = -t585 * t759 + t903;
t489 = t759 * t865 - t936;
t484 = -pkin(7) * t617 - t516;
t477 = t841 + t941;
t475 = t842 - t909;
t474 = -pkin(3) * t650 + pkin(7) * t619 + t517;
t469 = pkin(2) * t545 + pkin(3) * t617 - qJ(2) * t547;
t468 = (pkin(5) * t714 - (2 * qJD(6))) * t701 + t767;
t467 = pkin(2) * t570 + pkin(3) * t631 - qJ(2) * t571 - t599;
t466 = t517 * t753 - t844;
t465 = t517 * t752 + t843;
t464 = qJ(6) * t852 - t775;
t463 = -pkin(4) * t895 - pkin(5) * t864 + qJ(6) * t586;
t462 = -pkin(5) * t852 + t780;
t461 = t479 + t944;
t460 = t478 - t911;
t459 = t465 * t757 - t667 * t760;
t458 = -t465 * t760 - t667 * t757;
t457 = pkin(2) * t537 + pkin(3) * t615 - qJ(2) * t538 - t598;
t452 = (-t587 - t822) * pkin(5) + t765;
t451 = -pkin(5) * t822 + t765 + t887;
t450 = qJ(6) * t815 + t775;
t449 = pkin(5) * t815 + t780;
t448 = -t496 * t752 + t498 * t753;
t447 = -t495 * t752 + t497 * t753;
t446 = t496 * t753 + t498 * t752;
t445 = t495 * t753 + t497 * t752;
t444 = pkin(2) * t681 - t555 * t753 - t571 * t847 - t597 * t752;
t443 = -t490 * t752 + t492 * t753;
t442 = -t489 * t752 + t491 * t753;
t441 = t490 * t753 + t492 * t752;
t440 = t489 * t753 + t491 * t752;
t431 = pkin(2) * t679 - t538 * t847 - t544 * t753 - t574 * t752;
t430 = t446 * t757 + t900;
t429 = t445 * t757 - t937;
t428 = -t446 * t760 + t902;
t427 = -t445 * t760 - t938;
t426 = t441 * t757 + t900;
t425 = t440 * t757 + t937;
t424 = -t441 * t760 + t902;
t423 = -t440 * t760 + t938;
t422 = -t911 + (-t863 - t852) * qJ(6) + (-t868 - t670) * pkin(5) + t788;
t421 = -t944 - qJ(6) * t867 + (-t628 + t852) * pkin(5) - t780;
t420 = -t452 * t755 - t587 * t846 - t909;
t419 = -pkin(5) * t836 + t451 * t758 - t941;
t418 = t433 * t759 + t535 * t756;
t417 = t433 * t756 - t535 * t759;
t412 = -t432 - t928;
t411 = t462 * t758 - t464 * t755;
t410 = t462 * t755 + t464 * t758;
t409 = pkin(2) * t650 - t474 * t753 - t484 * t752 - t547 * t847;
t408 = -pkin(7) * t495 - t461 * t756 + t477 * t759;
t407 = -pkin(7) * t490 - t460 * t756 + t475 * t759;
t406 = pkin(2) * t465 + pkin(3) * t516 - qJ(2) * t466;
t405 = pkin(7) * t497 + t461 * t759 + t477 * t756 + t945;
t404 = pkin(7) * t492 + t460 * t759 + t475 * t756 - t912;
t403 = -t449 * t755 + t450 * t758 - t928;
t402 = t411 * t759 + t468 * t756;
t401 = t411 * t756 - t468 * t759;
t400 = -pkin(2) * t667 + pkin(7) * t844 - t466 * t847 - t499 * t753;
t399 = t412 * t759 + t850 * t895 - t942;
t398 = -t417 * t752 + t418 * t753;
t397 = t417 * t753 + t418 * t752;
t396 = t412 * t756 + t795 * t895 + t943;
t395 = -pkin(8) * t410 + (pkin(5) * t755 - t846) * t468;
t394 = pkin(2) * t445 + pkin(3) * t495 + pkin(4) * t593 - qJ(2) * t447 + t842 + t940;
t393 = -pkin(7) * t496 + t420 * t759 - t422 * t756;
t392 = pkin(2) * t441 + pkin(3) * t490 - pkin(4) * t585 - qJ(2) * t443 - t841 + t910;
t391 = -pkin(4) * t410 - pkin(5) * t464 - qJ(6) * t462;
t390 = -pkin(7) * t489 + t419 * t759 - t421 * t756;
t389 = pkin(7) * t498 + t420 * t756 + t422 * t759 - t912;
t388 = pkin(7) * t491 + t419 * t756 + t421 * t759 - t945;
t387 = t403 * t759 - t463 * t756 - t942;
t386 = -pkin(7) * t417 + (-pkin(8) * t759 + t850) * t432;
t385 = t397 * t757 + t432 * t760;
t384 = -t397 * t760 + t432 * t757;
t383 = pkin(2) * t446 + pkin(3) * t496 - qJ(2) * t448 + t452 * t758 + t587 * t793 + t910;
t382 = -pkin(3) * t895 + t403 * t756 + t463 * t759 + t943;
t381 = pkin(2) * t440 + pkin(3) * t489 - t940 - qJ(2) * t442 + t451 * t755 + (pkin(4) + t849) * t865;
t380 = t433 + t947;
t379 = -t401 * t752 + t402 * t753;
t378 = t401 * t753 + t402 * t752;
t377 = pkin(7) * t418 + (-pkin(8) * t756 + t795) * t432;
t376 = t449 * t758 + t450 * t755 + t947;
t375 = -t405 * t753 - t408 * t752 - t447 * t847 - t946;
t374 = -t404 * t753 - t407 * t752 - t443 * t847 + t913;
t373 = t378 * t757 + t410 * t760;
t372 = -t378 * t760 + t410 * t757;
t371 = -t396 * t753 - t399 * t752 + t948;
t370 = pkin(2) * t397 + pkin(3) * t417 - pkin(4) * t535 + pkin(8) * t433 - qJ(2) * t398;
t369 = -pkin(7) * t401 - t391 * t756 + t395 * t759;
t368 = -t389 * t753 - t393 * t752 - t448 * t847 + t913;
t367 = -t388 * t753 - t390 * t752 - t442 * t847 + t946;
t366 = -t382 * t753 - t387 * t752 + t948;
t365 = -pkin(3) * t410 + pkin(7) * t402 + t391 * t759 + t395 * t756;
t364 = pkin(2) * t432 - t377 * t753 - t386 * t752 - t398 * t847;
t363 = pkin(2) * t378 + pkin(3) * t401 + pkin(8) * t411 - qJ(2) * t379 + (t793 - t849) * t468;
t362 = pkin(2) * t410 - t365 * t753 - t369 * t752 - t379 * t847;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t735, -t734, 0, t695, 0, 0, 0, 0, 0, 0, 0, t735, t734, t661, 0, 0, 0, 0, 0, 0, t692, t693, t688, t595, 0, 0, 0, 0, 0, 0, t521, t532, t519, t459, 0, 0, 0, 0, 0, 0, t426, t429, t952, t385, 0, 0, 0, 0, 0, 0, t430, t952, t425, t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t734, -t735, 0, t694, 0, 0, 0, 0, 0, 0, 0, -t734, t735, t660, 0, 0, 0, 0, 0, 0, t690, t691, t687, t594, 0, 0, 0, 0, 0, 0, t520, t531, t518, t458, 0, 0, 0, 0, 0, 0, t424, t427, t950, t384, 0, 0, 0, 0, 0, 0, t428, t950, t423, t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t612, 0, 0, 0, 0, 0, 0, t538, t571, t547, t466, 0, 0, 0, 0, 0, 0, t443, t447, t931, t398, 0, 0, 0, 0, 0, 0, t448, t931, t442, t379; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t734, 0, -t735, 0, -t787, -t786, -t694, -pkin(6) * t694, 0, -t734, t735, 0, 0, 0, -t660, t787, t786, -pkin(6) * t660 + (-pkin(1) * t757 + qJ(2) * t760) * g(3), t706, -t731 * t757 - t733 * t760, t693, -t706, -t692, 0, -pkin(6) * t690 + t648 * t760 - t684 * t757, -pkin(6) * t691 + t647 * t760 - t683 * t757, -pkin(2) * t817 - pkin(6) * t687 - t601 * t757, -pkin(6) * t594 - t522 * t757 + t539 * t760, -t573 * t757 + t796, -t546 * t757 + t685 * t760, -t569 * t757 + t723 * t760, -t572 * t757 - t796, -t568 * t757 - t760 * t862, qJDD(4) * t760 - t600 * t757, -pkin(6) * t520 - t431 * t757 + t457 * t760, -pkin(6) * t531 - t444 * t757 + t467 * t760, -pkin(6) * t518 - t409 * t757 + t469 * t760, -pkin(6) * t458 - t400 * t757 + t406 * t760, t881, t960, t953, t893, -t963, t892, -pkin(6) * t424 - t374 * t757 + t392 * t760, -pkin(6) * t427 - t375 * t757 + t394 * t760, -t371 * t757 + t380 * t760 - t956, -pkin(6) * t384 - t364 * t757 + t370 * t760, t881, t953, -t960, t892, t963, t893, -pkin(6) * t428 - t368 * t757 + t383 * t760, -t366 * t757 + t376 * t760 - t956, -pkin(6) * t423 - t367 * t757 + t381 * t760, -pkin(6) * t372 - t362 * t757 + t363 * t760; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t735, 0, t734, 0, t786, -t787, t695, pkin(6) * t695, 0, -t735, -t734, 0, 0, 0, t661, -t786, t787, pkin(6) * t661 + (pkin(1) * t760 + qJ(2) * t757) * g(3), -t705, t731 * t760 - t733 * t757, t691, t705, -t690, 0, pkin(6) * t692 + t648 * t757 + t684 * t760, pkin(6) * t693 + t647 * t757 + t683 * t760, -pkin(2) * t818 + pkin(6) * t688 + t601 * t760, pkin(6) * t595 + t522 * t760 + t539 * t757, t573 * t760 + t797, t546 * t760 + t685 * t757, t569 * t760 + t723 * t757, t572 * t760 - t797, t568 * t760 - t757 * t862, qJDD(4) * t757 + t600 * t760, pkin(6) * t521 + t431 * t760 + t457 * t757, pkin(6) * t532 + t444 * t760 + t467 * t757, pkin(6) * t519 + t409 * t760 + t469 * t757, pkin(6) * t459 + t400 * t760 + t406 * t757, t882, -t959, t951, t891, t962, t890, pkin(6) * t426 + t374 * t760 + t392 * t757, pkin(6) * t429 + t375 * t760 + t394 * t757, t371 * t760 + t380 * t757 + t955, pkin(6) * t385 + t364 * t760 + t370 * t757, t882, t951, t959, t890, -t962, t891, pkin(6) * t430 + t368 * t760 + t383 * t757, t366 * t760 + t376 * t757 + t955, pkin(6) * t425 + t367 * t760 + t381 * t757, pkin(6) * t373 + t362 * t760 + t363 * t757; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t736, t737, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t781 - 0.2e1 * t845, -t737 + t746 + 0.2e1 * t750, pkin(1) * t715 + qJ(2) * t711, t749 * qJDD(1), -0.2e1 * t752 * t804, 0, t748 * qJDD(1), 0, 0, t728 * t847 + t752 * t790, t727 * t847 + t753 * t790, -qJ(2) * t869 + t730 * t847 - t611, -qJ(2) * t703 - t611 * t847, -t639 * t752 + t640 * t753, -t618 * t752 + t620 * t753, -t630 * t752 + t633 * t753, -t637 * t752 + t638 * t753, -t629 * t752 + t632 * t753, -t665 * t752 + t666 * t753, qJ(2) * t679 - t537 * t847 - t544 * t752 + t574 * t753, qJ(2) * t681 - t555 * t752 - t570 * t847 + t597 * t753, qJ(2) * t650 - t474 * t752 + t484 * t753 - t545 * t847, -pkin(7) * t843 - qJ(2) * t667 - t465 * t847 - t499 * t752, t855, -t954, t933, t875, t961, t877, -t404 * t752 + t407 * t753 - t441 * t847 + t908, -t405 * t752 + t408 * t753 - t445 * t847 - t939, -t396 * t752 + t399 * t753 + t949, qJ(2) * t432 - t377 * t752 + t386 * t753 - t397 * t847, t855, t933, t954, t877, -t961, t875, -t389 * t752 + t393 * t753 - t446 * t847 + t908, -t382 * t752 + t387 * t753 + t949, -t388 * t752 + t390 * t753 - t440 * t847 + t939, qJ(2) * t410 - t365 * t752 + t369 * t753 - t378 * t847;];
tauB_reg  = t1;
