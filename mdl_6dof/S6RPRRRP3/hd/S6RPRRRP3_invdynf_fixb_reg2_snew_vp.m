% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:22:03
% EndTime: 2019-05-06 01:22:11
% DurationCPUTime: 8.40s
% Computational Cost: add. (27306->289), mult. (53105->356), div. (0->0), fcn. (36181->10), ass. (0->204)
t2321 = sin(qJ(3));
t2355 = qJD(1) * t2321;
t2307 = qJD(3) * t2355;
t2325 = cos(qJ(3));
t2344 = t2325 * qJDD(1);
t2340 = t2307 - t2344;
t2339 = -qJDD(4) - t2340;
t2334 = -qJDD(5) + t2339;
t2320 = sin(qJ(4));
t2324 = cos(qJ(4));
t2279 = -t2324 * qJD(3) + t2320 * t2355;
t2280 = qJD(3) * t2320 + t2324 * t2355;
t2319 = sin(qJ(5));
t2323 = cos(qJ(5));
t2258 = t2279 * t2323 + t2280 * t2319;
t2260 = -t2279 * t2319 + t2280 * t2323;
t2351 = t2258 * t2260;
t2212 = t2334 - t2351;
t2257 = t2260 ^ 2;
t2354 = qJD(1) * t2325;
t2302 = -qJD(4) + t2354;
t2298 = qJD(5) - t2302;
t2358 = t2298 ^ 2;
t2365 = -t2257 - t2358;
t2196 = t2212 * t2319 + t2323 * t2365;
t2198 = t2212 * t2323 - t2319 * t2365;
t2153 = t2196 * t2320 - t2198 * t2324;
t2343 = qJD(3) * t2354;
t2345 = t2321 * qJDD(1);
t2284 = t2343 + t2345;
t2336 = -t2320 * qJDD(3) - t2324 * t2284;
t2255 = -qJD(4) * t2279 - t2336;
t2337 = t2324 * qJDD(3) - t2320 * t2284;
t2331 = -qJD(4) * t2280 + t2337;
t2330 = -t2258 * qJD(5) + t2323 * t2255 + t2319 * t2331;
t2350 = t2258 * t2298;
t2329 = t2330 - t2350;
t2143 = t2153 * t2325 - t2321 * t2329;
t2163 = t2196 * t2324 + t2198 * t2320;
t2315 = sin(pkin(10));
t2316 = cos(pkin(10));
t2118 = t2143 * t2315 + t2163 * t2316;
t2120 = t2143 * t2316 - t2163 * t2315;
t2322 = sin(qJ(1));
t2326 = cos(qJ(1));
t2389 = t2118 * t2326 + t2120 * t2322;
t2388 = t2118 * t2322 - t2120 * t2326;
t2141 = t2153 * t2321 + t2325 * t2329;
t2189 = t2330 + t2350;
t2342 = t2319 * t2255 - t2323 * t2331;
t2332 = (-qJD(5) + t2298) * t2260 - t2342;
t2362 = t2189 * t2319 + t2323 * t2332;
t2363 = -t2323 * t2189 + t2319 * t2332;
t2368 = t2320 * t2362 + t2324 * t2363;
t2228 = t2258 ^ 2;
t2209 = t2257 + t2228;
t2369 = -t2320 * t2363 + t2324 * t2362;
t2374 = -t2209 * t2321 + t2325 * t2369;
t2378 = t2315 * t2368 + t2316 * t2374;
t2379 = t2315 * t2374 - t2316 * t2368;
t2385 = -t2322 * t2379 + t2326 * t2378;
t2384 = t2322 * t2378 + t2326 * t2379;
t2213 = t2334 + t2351;
t2364 = -t2358 - t2228;
t2370 = t2213 * t2319 + t2323 * t2364;
t2371 = -t2323 * t2213 + t2319 * t2364;
t2372 = t2320 * t2370 + t2324 * t2371;
t2383 = t2315 * t2372;
t2382 = t2316 * t2372;
t2373 = -t2320 * t2371 + t2324 * t2370;
t2381 = t2321 * t2373;
t2380 = t2325 * t2373;
t2375 = t2209 * t2325 + t2321 * t2369;
t2361 = qJD(3) ^ 2;
t2360 = t2279 ^ 2;
t2359 = t2280 ^ 2;
t2357 = t2302 ^ 2;
t2356 = -g(3) + qJDD(2);
t2349 = t2279 * t2280;
t2348 = t2279 * t2302;
t2347 = qJD(4) + t2302;
t2296 = -g(1) * t2326 - g(2) * t2322;
t2327 = qJD(1) ^ 2;
t2281 = -pkin(1) * t2327 + t2296;
t2295 = t2322 * g(1) - g(2) * t2326;
t2335 = qJDD(1) * pkin(1) + t2295;
t2261 = -t2315 * t2281 + t2316 * t2335;
t2251 = -qJDD(1) * pkin(2) - t2327 * pkin(7) - t2261;
t2217 = (-t2284 - t2343) * pkin(8) + (t2340 + t2307) * pkin(3) + t2251;
t2262 = t2316 * t2281 + t2315 * t2335;
t2252 = -pkin(2) * t2327 + qJDD(1) * pkin(7) + t2262;
t2236 = t2325 * t2252 + t2321 * t2356;
t2282 = (-pkin(3) * t2325 - pkin(8) * t2321) * qJD(1);
t2226 = -pkin(3) * t2361 + qJDD(3) * pkin(8) + t2282 * t2354 + t2236;
t2184 = t2320 * t2217 + t2324 * t2226;
t2270 = -pkin(4) * t2302 - pkin(9) * t2280;
t2170 = -pkin(4) * t2360 + pkin(9) * t2331 + t2302 * t2270 + t2184;
t2183 = t2324 * t2217 - t2320 * t2226;
t2249 = -t2339 - t2349;
t2328 = (-t2255 + t2348) * pkin(9) + t2249 * pkin(4) + t2183;
t2140 = t2323 * t2170 + t2319 * t2328;
t2311 = t2321 ^ 2;
t2312 = t2325 ^ 2;
t2346 = t2311 + t2312;
t2139 = -t2319 * t2170 + t2323 * t2328;
t2286 = -qJDD(1) * t2315 - t2316 * t2327;
t2287 = qJDD(1) * t2316 - t2315 * t2327;
t2341 = t2326 * t2286 - t2287 * t2322;
t2338 = t2286 * t2322 + t2287 * t2326;
t2333 = -qJD(5) * t2260 - t2342;
t2306 = t2325 * t2356;
t2225 = -t2306 - qJDD(3) * pkin(3) - t2361 * pkin(8) + (qJD(1) * t2282 + t2252) * t2321;
t2181 = -t2331 * pkin(4) - t2360 * pkin(9) + t2280 * t2270 + t2225;
t2301 = t2325 * t2327 * t2321;
t2300 = -t2312 * t2327 - t2361;
t2299 = -t2311 * t2327 - t2361;
t2294 = -qJDD(3) + t2301;
t2293 = qJDD(3) + t2301;
t2291 = t2346 * t2327;
t2290 = -qJDD(1) * t2322 - t2326 * t2327;
t2289 = qJDD(1) * t2326 - t2322 * t2327;
t2288 = t2346 * qJDD(1);
t2285 = -0.2e1 * t2307 + t2344;
t2283 = 0.2e1 * t2343 + t2345;
t2269 = t2294 * t2325 - t2299 * t2321;
t2268 = -t2293 * t2321 + t2300 * t2325;
t2267 = t2294 * t2321 + t2299 * t2325;
t2266 = t2293 * t2325 + t2300 * t2321;
t2265 = -t2357 - t2359;
t2264 = t2288 * t2316 - t2291 * t2315;
t2263 = t2288 * t2315 + t2291 * t2316;
t2256 = -t2357 - t2360;
t2248 = t2339 - t2349;
t2247 = -t2359 - t2360;
t2240 = t2269 * t2316 + t2283 * t2315;
t2239 = t2268 * t2316 - t2285 * t2315;
t2238 = t2269 * t2315 - t2283 * t2316;
t2237 = t2268 * t2315 + t2285 * t2316;
t2235 = -t2321 * t2252 + t2306;
t2232 = t2279 * t2347 + t2336;
t2231 = t2255 + t2348;
t2230 = -t2280 * t2347 + t2337;
t2229 = (qJD(4) - t2302) * t2280 - t2337;
t2227 = pkin(5) * t2258 - qJ(6) * t2260;
t2224 = -t2261 * t2315 + t2262 * t2316;
t2223 = t2261 * t2316 + t2262 * t2315;
t2221 = t2248 * t2324 - t2265 * t2320;
t2220 = t2248 * t2320 + t2265 * t2324;
t2216 = -t2249 * t2320 + t2256 * t2324;
t2215 = t2249 * t2324 + t2256 * t2320;
t2207 = -t2235 * t2321 + t2236 * t2325;
t2206 = t2235 * t2325 + t2236 * t2321;
t2203 = t2230 * t2324 - t2232 * t2320;
t2202 = t2230 * t2320 + t2232 * t2324;
t2201 = t2221 * t2325 + t2231 * t2321;
t2200 = t2221 * t2321 - t2231 * t2325;
t2195 = t2216 * t2325 + t2229 * t2321;
t2194 = t2216 * t2321 - t2229 * t2325;
t2193 = t2207 * t2316 + t2251 * t2315;
t2192 = t2207 * t2315 - t2251 * t2316;
t2186 = t2298 * t2260 - t2333;
t2185 = (qJD(5) + t2298) * t2260 + t2342;
t2176 = t2203 * t2325 + t2247 * t2321;
t2175 = t2203 * t2321 - t2247 * t2325;
t2174 = t2201 * t2316 + t2220 * t2315;
t2173 = t2201 * t2315 - t2220 * t2316;
t2172 = t2195 * t2316 + t2215 * t2315;
t2171 = t2195 * t2315 - t2215 * t2316;
t2162 = t2176 * t2316 + t2202 * t2315;
t2161 = t2176 * t2315 - t2202 * t2316;
t2156 = -t2183 * t2320 + t2184 * t2324;
t2155 = t2183 * t2324 + t2184 * t2320;
t2150 = t2156 * t2325 + t2225 * t2321;
t2149 = t2156 * t2321 - t2225 * t2325;
t2148 = t2186 * t2321 + t2380;
t2146 = -t2186 * t2325 + t2381;
t2144 = t2185 * t2321 + t2380;
t2142 = -t2185 * t2325 + t2381;
t2138 = -t2333 * pkin(5) + (pkin(5) * t2298 - (2 * qJD(6))) * t2260 + t2181 - t2329 * qJ(6);
t2137 = pkin(5) * t2334 - qJ(6) * t2358 + t2260 * t2227 + qJDD(6) - t2139;
t2132 = -pkin(5) * t2358 - qJ(6) * t2334 + 0.2e1 * qJD(6) * t2298 - t2258 * t2227 + t2140;
t2131 = t2150 * t2316 + t2155 * t2315;
t2130 = t2150 * t2315 - t2155 * t2316;
t2129 = t2148 * t2316 + t2383;
t2127 = t2148 * t2315 - t2382;
t2121 = t2144 * t2316 + t2383;
t2119 = t2144 * t2315 - t2382;
t2117 = -t2139 * t2319 + t2140 * t2323;
t2116 = t2139 * t2323 + t2140 * t2319;
t2115 = t2132 * t2323 + t2137 * t2319;
t2114 = t2132 * t2319 - t2137 * t2323;
t2109 = -t2116 * t2320 + t2117 * t2324;
t2108 = t2116 * t2324 + t2117 * t2320;
t2107 = t2109 * t2325 + t2181 * t2321;
t2106 = t2109 * t2321 - t2181 * t2325;
t2105 = -t2114 * t2320 + t2115 * t2324;
t2104 = t2114 * t2324 + t2115 * t2320;
t2103 = t2105 * t2325 + t2138 * t2321;
t2102 = t2105 * t2321 - t2138 * t2325;
t2101 = t2107 * t2316 + t2108 * t2315;
t2100 = t2107 * t2315 - t2108 * t2316;
t2099 = t2103 * t2316 + t2104 * t2315;
t2098 = t2103 * t2315 - t2104 * t2316;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2290, -t2289, 0, -t2295 * t2322 + t2296 * t2326, 0, 0, 0, 0, 0, 0, t2341, -t2338, 0, -t2223 * t2322 + t2224 * t2326, 0, 0, 0, 0, 0, 0, -t2237 * t2322 + t2239 * t2326, -t2238 * t2322 + t2240 * t2326, -t2263 * t2322 + t2264 * t2326, -t2192 * t2322 + t2193 * t2326, 0, 0, 0, 0, 0, 0, -t2171 * t2322 + t2172 * t2326, -t2173 * t2322 + t2174 * t2326, -t2161 * t2322 + t2162 * t2326, -t2130 * t2322 + t2131 * t2326, 0, 0, 0, 0, 0, 0, -t2119 * t2322 + t2121 * t2326, t2388, t2385, -t2100 * t2322 + t2101 * t2326, 0, 0, 0, 0, 0, 0, -t2127 * t2322 + t2129 * t2326, t2385, -t2388, -t2098 * t2322 + t2099 * t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2289, t2290, 0, t2295 * t2326 + t2296 * t2322, 0, 0, 0, 0, 0, 0, t2338, t2341, 0, t2223 * t2326 + t2224 * t2322, 0, 0, 0, 0, 0, 0, t2237 * t2326 + t2239 * t2322, t2238 * t2326 + t2240 * t2322, t2263 * t2326 + t2264 * t2322, t2192 * t2326 + t2193 * t2322, 0, 0, 0, 0, 0, 0, t2171 * t2326 + t2172 * t2322, t2173 * t2326 + t2174 * t2322, t2161 * t2326 + t2162 * t2322, t2130 * t2326 + t2131 * t2322, 0, 0, 0, 0, 0, 0, t2119 * t2326 + t2121 * t2322, -t2389, t2384, t2100 * t2326 + t2101 * t2322, 0, 0, 0, 0, 0, 0, t2127 * t2326 + t2129 * t2322, t2384, t2389, t2098 * t2326 + t2099 * t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, 0, 0, 0, 0, 0, 0, t2266, t2267, 0, t2206, 0, 0, 0, 0, 0, 0, t2194, t2200, t2175, t2149, 0, 0, 0, 0, 0, 0, t2142, -t2141, t2375, t2106, 0, 0, 0, 0, 0, 0, t2146, t2375, t2141, t2102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2327, -qJDD(1), 0, t2296, 0, 0, 0, 0, 0, 0, t2286, -t2287, 0, t2224, 0, 0, 0, 0, 0, 0, t2239, t2240, t2264, t2193, 0, 0, 0, 0, 0, 0, t2172, t2174, t2162, t2131, 0, 0, 0, 0, 0, 0, t2121, -t2120, t2378, t2101, 0, 0, 0, 0, 0, 0, t2129, t2378, t2120, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2327, 0, t2295, 0, 0, 0, 0, 0, 0, t2287, t2286, 0, t2223, 0, 0, 0, 0, 0, 0, t2237, t2238, t2263, t2192, 0, 0, 0, 0, 0, 0, t2171, t2173, t2161, t2130, 0, 0, 0, 0, 0, 0, t2119, -t2118, t2379, t2100, 0, 0, 0, 0, 0, 0, t2127, t2379, t2118, t2098; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, 0, 0, 0, 0, 0, 0, t2266, t2267, 0, t2206, 0, 0, 0, 0, 0, 0, t2194, t2200, t2175, t2149, 0, 0, 0, 0, 0, 0, t2142, -t2141, t2375, t2106, 0, 0, 0, 0, 0, 0, t2146, t2375, t2141, t2102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2327, -qJDD(1), 0, t2262, 0, 0, 0, 0, 0, 0, t2268, t2269, t2288, t2207, 0, 0, 0, 0, 0, 0, t2195, t2201, t2176, t2150, 0, 0, 0, 0, 0, 0, t2144, -t2143, t2374, t2107, 0, 0, 0, 0, 0, 0, t2148, t2374, t2143, t2103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2327, 0, t2261, 0, 0, 0, 0, 0, 0, t2285, -t2283, t2291, -t2251, 0, 0, 0, 0, 0, 0, -t2215, -t2220, -t2202, -t2155, 0, 0, 0, 0, 0, 0, -t2372, -t2163, -t2368, -t2108, 0, 0, 0, 0, 0, 0, -t2372, -t2368, t2163, -t2104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, 0, 0, 0, 0, 0, 0, t2266, t2267, 0, t2206, 0, 0, 0, 0, 0, 0, t2194, t2200, t2175, t2149, 0, 0, 0, 0, 0, 0, t2142, -t2141, t2375, t2106, 0, 0, 0, 0, 0, 0, t2146, t2375, t2141, t2102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2300, t2294, t2344, t2236, 0, 0, 0, 0, 0, 0, t2216, t2221, t2203, t2156, 0, 0, 0, 0, 0, 0, t2373, -t2153, t2369, t2109, 0, 0, 0, 0, 0, 0, t2373, t2369, t2153, t2105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2293, t2299, -t2345, t2235, 0, 0, 0, 0, 0, 0, -t2229, -t2231, -t2247, -t2225, 0, 0, 0, 0, 0, 0, -t2185, -t2329, t2209, -t2181, 0, 0, 0, 0, 0, 0, -t2186, t2209, t2329, -t2138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2285, t2283, -t2291, t2251, 0, 0, 0, 0, 0, 0, t2215, t2220, t2202, t2155, 0, 0, 0, 0, 0, 0, t2372, t2163, t2368, t2108, 0, 0, 0, 0, 0, 0, t2372, t2368, -t2163, t2104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2256, t2248, t2230, t2184, 0, 0, 0, 0, 0, 0, t2370, t2198, t2362, t2117, 0, 0, 0, 0, 0, 0, t2370, t2362, -t2198, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2249, t2265, t2232, t2183, 0, 0, 0, 0, 0, 0, t2371, t2196, t2363, t2116, 0, 0, 0, 0, 0, 0, t2371, t2363, -t2196, t2114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2229, t2231, t2247, t2225, 0, 0, 0, 0, 0, 0, t2185, t2329, -t2209, t2181, 0, 0, 0, 0, 0, 0, t2186, -t2209, -t2329, t2138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, t2212, t2332, t2140, 0, 0, 0, 0, 0, 0, t2364, t2332, -t2212, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2213, t2365, -t2189, t2139, 0, 0, 0, 0, 0, 0, -t2213, -t2189, -t2365, -t2137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2185, t2329, -t2209, t2181, 0, 0, 0, 0, 0, 0, t2186, -t2209, -t2329, t2138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, t2332, -t2212, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2186, -t2209, -t2329, t2138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2213, t2189, t2365, t2137;];
f_new_reg  = t1;
