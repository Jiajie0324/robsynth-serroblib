% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:05:23
% EndTime: 2019-03-09 06:05:40
% DurationCPUTime: 7.84s
% Computational Cost: add. (10418->621), mult. (21786->754), div. (0->0), fcn. (14560->14), ass. (0->302)
t255 = cos(qJ(3));
t368 = qJD(1) * t255;
t220 = -qJD(4) + t368;
t252 = sin(qJ(3));
t244 = qJ(1) + pkin(10);
t235 = sin(t244);
t236 = cos(t244);
t306 = g(1) * t236 + g(2) * t235;
t421 = g(3) * t255;
t275 = t252 * t306 - t421;
t248 = sin(pkin(10));
t225 = pkin(1) * t248 + pkin(7);
t192 = t225 * qJD(1);
t363 = qJD(3) * t255;
t186 = t225 * qJDD(1);
t453 = qJD(2) * qJD(3) + t186;
t320 = -t255 * qJDD(2) + t192 * t363 + t252 * t453;
t401 = qJDD(3) * pkin(3);
t85 = t320 - t401;
t270 = -t85 + t275;
t459 = -qJD(4) * pkin(8) * t220 - t270;
t209 = -qJD(5) + t220;
t251 = sin(qJ(4));
t254 = cos(qJ(4));
t364 = qJD(3) * t254;
t369 = qJD(1) * t252;
t170 = -t251 * t369 + t364;
t366 = qJD(3) * t251;
t171 = t254 * t369 + t366;
t250 = sin(qJ(5));
t429 = cos(qJ(5));
t290 = t250 * t170 + t171 * t429;
t360 = qJD(4) * t252;
t330 = qJD(1) * t360;
t357 = qJD(1) * qJD(3);
t331 = t255 * t357;
t354 = t252 * qJDD(1);
t445 = qJD(3) * qJD(4) + t331 + t354;
t100 = (-qJDD(3) + t330) * t251 - t445 * t254;
t319 = t251 * t445 + t254 * t330;
t285 = t254 * qJDD(3) - t319;
t35 = qJD(5) * t290 - t250 * t100 - t429 * t285;
t456 = t209 * t290 + t35;
t257 = -pkin(9) - pkin(8);
t195 = t257 * t251;
t196 = t257 * t254;
t120 = t250 * t195 - t196 * t429;
t240 = t255 * qJDD(1);
t166 = t252 * t357 + qJDD(4) - t240;
t159 = qJDD(5) + t166;
t247 = qJ(4) + qJ(5);
t241 = sin(t247);
t458 = -t120 * t159 - t241 * t275;
t107 = -t429 * t170 + t171 * t250;
t169 = t252 * t192;
t141 = qJD(2) * t255 - t169;
t130 = -qJD(3) * pkin(3) - t141;
t101 = -pkin(4) * t170 + t130;
t38 = pkin(5) * t107 - qJ(6) * t290 + t101;
t457 = t107 * t38;
t455 = t101 * t107;
t454 = t107 * t290;
t333 = t429 * qJD(4);
t316 = t254 * t333;
t332 = t429 * qJD(5);
t342 = t251 * t368;
t343 = t429 * t254;
t382 = t250 * t251;
t437 = qJD(4) + qJD(5);
t373 = -t250 * t342 - t254 * t332 + t343 * t368 + t382 * t437 - t316;
t381 = t250 * t254;
t173 = t251 * t429 + t381;
t116 = t437 * t173;
t372 = -t173 * t368 + t116;
t234 = pkin(4) * t254 + pkin(3);
t322 = t255 * t234 - t252 * t257;
t336 = t251 * t363;
t359 = qJD(4) * t254;
t338 = t252 * t359;
t451 = t336 + t338;
t358 = qJD(5) * t250;
t34 = t429 * t100 - t170 * t332 + t171 * t358 - t250 * t285;
t365 = qJD(3) * t252;
t328 = t255 * t34 + t290 * t365;
t380 = t251 * t252;
t348 = t250 * t380;
t144 = t252 * t343 - t348;
t317 = t429 * t363;
t69 = t116 * t252 + t250 * t336 - t254 * t317;
t406 = t144 * t159 + t69 * t209;
t450 = t406 - t328;
t143 = t173 * t252;
t339 = t251 * t360;
t70 = t251 * t317 - t250 * t339 - qJD(5) * t348 + (t250 * t363 + (t333 + t332) * t252) * t254;
t419 = -t34 * t143 + t290 * t70;
t420 = t69 * t107 - t144 * t35;
t449 = t419 - t420;
t448 = t419 + t420;
t327 = t107 * t365 - t255 * t35;
t441 = -t159 * t143 + t70 * t209;
t447 = t441 - t327;
t446 = t441 + t327;
t430 = t290 ^ 2;
t334 = t107 ^ 2 - t430;
t444 = -t107 * t209 - t34;
t59 = pkin(5) * t290 + qJ(6) * t107;
t344 = qJD(4) * t257;
t177 = t251 * t344;
t376 = t254 * t255;
t293 = pkin(4) * t252 - pkin(9) * t376;
t309 = pkin(3) * t252 - pkin(8) * t255;
t176 = t309 * qJD(1);
t95 = -t141 * t251 + t254 * t176;
t75 = qJD(1) * t293 + t95;
t96 = t254 * t141 + t251 * t176;
t80 = -pkin(9) * t342 + t96;
t415 = -qJD(5) * t120 + t257 * t316 - t429 * t75 + (-t177 + t80) * t250;
t310 = pkin(3) * t255 + pkin(8) * t252;
t294 = -pkin(2) - t310;
t249 = cos(pkin(10));
t428 = pkin(1) * t249;
t160 = t294 - t428;
t178 = t309 * qJD(3);
t102 = qJD(1) * t178 + qJDD(1) * t160;
t142 = qJD(2) * t252 + t192 * t255;
t131 = qJD(3) * pkin(8) + t142;
t132 = t160 * qJD(1);
t361 = qJD(4) * t251;
t346 = -t252 * qJDD(2) - t255 * t453;
t91 = -t192 * t365 - t346;
t84 = qJDD(3) * pkin(8) + t91;
t27 = t251 * t102 - t131 * t361 + t132 * t359 + t254 * t84;
t76 = -t131 * t251 + t254 * t132;
t442 = t220 * t76 + t27;
t402 = pkin(1) * qJDD(1);
t311 = -t142 + (-t342 + t361) * pkin(4);
t150 = t159 * qJ(6);
t183 = t209 * qJD(6);
t438 = t150 - t183;
t175 = t225 * t376;
t114 = t251 * t160 + t175;
t151 = t159 * pkin(5);
t436 = t151 - qJDD(6);
t242 = cos(t247);
t385 = t241 * t255;
t125 = t235 * t385 + t236 * t242;
t127 = -t235 * t242 + t236 * t385;
t77 = t131 * t254 + t132 * t251;
t94 = t254 * t102;
t28 = -qJD(4) * t77 - t251 * t84 + t94;
t15 = pkin(4) * t166 + pkin(9) * t100 + t28;
t18 = pkin(9) * t285 + t27;
t65 = -pkin(9) * t171 + t76;
t57 = -pkin(4) * t220 + t65;
t66 = pkin(9) * t170 + t77;
t326 = -t429 * t15 + t250 * t18 + t66 * t332 + t57 * t358;
t386 = t241 * t252;
t272 = g(1) * t127 + g(2) * t125 + g(3) * t386 - t326;
t261 = t290 * t38 - t272 - t436;
t435 = -t101 * t290 + t272;
t172 = -t343 + t382;
t434 = t107 * t369 - t159 * t172 + t209 * t372;
t335 = t254 * t363;
t283 = t335 - t339;
t378 = t252 * t254;
t433 = t166 * t378 - t220 * t283;
t422 = g(3) * t252;
t432 = t255 * t306 + t422;
t146 = t254 * t160;
t391 = t225 * t251;
t86 = -pkin(9) * t378 + t146 + (-pkin(4) - t391) * t255;
t99 = -pkin(9) * t380 + t114;
t413 = t250 * t86 + t429 * t99;
t371 = t254 * t178 + t365 * t391;
t51 = t293 * qJD(3) + (-t175 + (pkin(9) * t252 - t160) * t251) * qJD(4) + t371;
t67 = t160 * t359 + t251 * t178 + (-t252 * t364 - t255 * t361) * t225;
t54 = -pkin(9) * t451 + t67;
t10 = -qJD(5) * t413 - t250 * t54 + t429 * t51;
t431 = t107 * t373 + t172 * t34 - t173 * t35 - t290 * t372;
t427 = g(1) * t235;
t379 = t251 * t255;
t387 = t236 * t254;
t136 = t235 * t379 + t387;
t425 = g(2) * t136;
t423 = g(2) * t236;
t418 = pkin(5) * t372 + qJ(6) * t373 - qJD(6) * t173 + t311;
t40 = t250 * t75 + t429 * t80;
t36 = qJ(6) * t369 + t40;
t289 = t195 * t429 + t250 * t196;
t71 = qJD(5) * t289 + t177 * t429 + t344 * t381;
t417 = t71 - t36;
t416 = t71 - t40;
t414 = pkin(5) * t369 - t415;
t351 = t429 * t66;
t25 = t250 * t57 + t351;
t412 = t209 * t25;
t410 = t220 * t77;
t409 = t250 * t66;
t279 = t285 * t254;
t405 = t170 * t335 + t252 * t279;
t31 = t429 * t65 - t409;
t404 = pkin(4) * t332 + qJD(6) - t31;
t395 = t170 * t220;
t394 = t171 * t170;
t393 = t171 * t220;
t390 = t235 * t251;
t389 = t235 * t254;
t388 = t236 * t251;
t384 = t242 * t252;
t383 = t242 * t255;
t375 = t255 * t257;
t24 = t429 * t57 - t409;
t374 = qJD(6) - t24;
t221 = pkin(4) * t380;
t149 = t252 * t225 + t221;
t245 = t252 ^ 2;
t246 = t255 ^ 2;
t370 = t245 - t246;
t227 = -pkin(2) - t428;
t193 = qJD(1) * t227;
t367 = qJD(3) * t170;
t362 = qJD(4) * t170;
t187 = qJDD(1) * t227;
t349 = t236 * t379;
t259 = qJD(1) ^ 2;
t347 = t255 * t259 * t252;
t117 = pkin(4) * t451 + t225 * t363;
t256 = cos(qJ(1));
t345 = t256 * pkin(1) + t236 * pkin(2) + t235 * pkin(7);
t341 = t171 * t363;
t340 = t220 * t366;
t337 = t209 * t369;
t253 = sin(qJ(1));
t329 = -pkin(1) * t253 + t236 * pkin(7);
t3 = t250 * t15 + t429 * t18 + t57 * t332 - t66 * t358;
t128 = t235 * t241 + t236 * t383;
t324 = -t127 * pkin(5) + qJ(6) * t128;
t323 = t100 * t255 + t171 * t365;
t321 = -t100 - t362;
t318 = t171 * t338;
t315 = t252 * t331;
t30 = t250 * t65 + t351;
t314 = pkin(4) * t358 - t30;
t313 = -pkin(5) * t386 + qJ(6) * t384;
t201 = t252 * t427;
t312 = -t252 * t423 + t201;
t308 = g(1) * t125 - g(2) * t127;
t126 = t235 * t383 - t236 * t241;
t307 = g(1) * t126 - g(2) * t128;
t305 = g(1) * t253 - g(2) * t256;
t304 = g(2) * (-t125 * pkin(5) + qJ(6) * t126);
t303 = pkin(5) * t242 + qJ(6) * t241;
t302 = t107 * t70 + t143 * t35;
t299 = -t251 * t77 - t254 * t76;
t298 = t251 * t76 - t254 * t77;
t47 = -t250 * t99 + t429 * t86;
t9 = t250 * t51 + t86 * t332 - t358 * t99 + t429 * t54;
t287 = -t251 * t166 + t220 * t359;
t286 = t107 * t372 + t172 * t35;
t284 = -qJD(1) * t193 + t306;
t281 = -g(3) * t383 + t289 * t159 + t306 * t384;
t280 = -pkin(8) * t166 - t130 * t220;
t278 = pkin(4) * t390 + t236 * t322 + t345;
t258 = qJD(3) ^ 2;
t277 = t225 * t258 + 0.2e1 * t187 + t423;
t276 = 0.2e1 * qJD(3) * t193 - qJDD(3) * t225;
t271 = g(1) * t128 + g(2) * t126 + g(3) * t384 - t3;
t268 = pkin(4) * t388 + t329 + (-pkin(2) - t322) * t235;
t266 = -t209 * t24 + t271;
t264 = qJD(4) * t299 - t28 * t251 + t27 * t254;
t263 = t320 * t252 + t91 * t255 + (-t141 * t255 - t142 * t252) * qJD(3);
t262 = -t71 * t107 - t120 * t35 + t289 * t34 - t432;
t53 = -pkin(4) * t285 + t85;
t233 = -pkin(4) * t429 - pkin(5);
t226 = pkin(4) * t250 + qJ(6);
t198 = pkin(4) * t389;
t182 = qJDD(3) * t255 - t252 * t258;
t181 = qJDD(3) * t252 + t255 * t258;
t139 = t236 * t376 + t390;
t138 = -t349 + t389;
t137 = -t235 * t376 + t388;
t113 = -t225 * t379 + t146;
t112 = -t159 * t255 - t209 * t365;
t103 = pkin(5) * t172 - qJ(6) * t173 - t234;
t73 = pkin(5) * t143 - qJ(6) * t144 + t149;
t68 = -qJD(4) * t114 + t371;
t50 = pkin(4) * t171 + t59;
t45 = t255 * pkin(5) - t47;
t44 = -qJ(6) * t255 + t413;
t29 = t159 * t173 + t209 * t373 - t290 * t369;
t23 = -t209 * qJ(6) + t25;
t22 = t209 * pkin(5) + t374;
t19 = pkin(5) * t70 + qJ(6) * t69 - qJD(6) * t144 + t117;
t12 = -t144 * t34 - t290 * t69;
t11 = -t173 * t34 - t290 * t373;
t8 = t328 + t406;
t7 = -pkin(5) * t365 - t10;
t6 = qJ(6) * t365 - qJD(6) * t255 + t9;
t5 = t35 * pkin(5) + t34 * qJ(6) - qJD(6) * t290 + t53;
t2 = t326 - t436;
t1 = t3 + t438;
t4 = [0, 0, 0, 0, 0, qJDD(1), t305, g(1) * t256 + g(2) * t253, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t249 * t402 - t423 + t427, -0.2e1 * t248 * t402 + t306, 0 (t305 + (t248 ^ 2 + t249 ^ 2) * t402) * pkin(1), qJDD(1) * t245 + 0.2e1 * t315, 0.2e1 * t240 * t252 - 0.2e1 * t357 * t370, t181, qJDD(1) * t246 - 0.2e1 * t315, t182, 0, t276 * t252 + (-t277 + t427) * t255, t252 * t277 + t255 * t276 - t201 (t245 + t246) * t186 + t263 - t306, t187 * t227 - g(1) * (-pkin(2) * t235 + t329) - g(2) * t345 + t263 * t225, -t100 * t378 + t171 * t283, -t318 + (-t341 + (t100 - t362) * t252) * t251 + t405, t323 + t433, -t170 * t451 - t285 * t380 (-t285 + t340) * t255 + (t287 + t367) * t252, -t166 * t255 - t220 * t365, -g(1) * t137 - g(2) * t139 + t113 * t166 - t68 * t220 + (-t28 + (t130 * t251 - t170 * t225) * qJD(3)) * t255 + (t76 * qJD(3) + t130 * t359 - t225 * t285 + t85 * t251) * t252, -g(1) * t136 - g(2) * t138 - t114 * t166 + t220 * t67 + (t27 + (t130 * t254 + t171 * t225) * qJD(3)) * t255 + (-qJD(3) * t77 - t100 * t225 - t130 * t361 + t85 * t254) * t252, t67 * t170 + t114 * t285 - t68 * t171 + t113 * t100 + t201 + t299 * t363 + (qJD(4) * t298 - t27 * t251 - t28 * t254 - t423) * t252, t27 * t114 + t77 * t67 + t28 * t113 + t76 * t68 - g(1) * t329 - g(2) * (t236 * t310 + t345) - t294 * t427 + (t130 * t363 + t252 * t85) * t225, t12, -t449, t8, t302, t447, t112, -t10 * t209 + t101 * t70 + t107 * t117 + t143 * t53 + t149 * t35 + t159 * t47 + t24 * t365 + t255 * t326 + t307, -t101 * t69 + t117 * t290 + t144 * t53 - t149 * t34 - t159 * t413 + t209 * t9 - t25 * t365 + t255 * t3 - t308, -t10 * t290 - t107 * t9 - t143 * t3 + t144 * t326 + t24 * t69 - t25 * t70 + t34 * t47 - t35 * t413 + t312, -g(1) * t268 - g(2) * t278 + t24 * t10 + t101 * t117 + t53 * t149 + t25 * t9 + t3 * t413 - t326 * t47, t12, t8, t449, t112, -t447, t302, t107 * t19 + t143 * t5 - t159 * t45 + t2 * t255 + t209 * t7 - t22 * t365 + t35 * t73 + t38 * t70 + t307, -t1 * t143 - t107 * t6 + t144 * t2 - t22 * t69 - t23 * t70 + t290 * t7 - t34 * t45 - t35 * t44 + t312, -t1 * t255 - t144 * t5 + t159 * t44 - t19 * t290 - t209 * t6 + t23 * t365 + t34 * t73 + t38 * t69 + t308, t1 * t44 + t23 * t6 + t5 * t73 + t38 * t19 + t2 * t45 + t22 * t7 - g(1) * (-pkin(5) * t126 - qJ(6) * t125 + t268) - g(2) * (pkin(5) * t128 + qJ(6) * t127 + t278); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t182, -t181, 0, t252 * t91 - t255 * t320 - g(3) + (-t141 * t252 + t142 * t255) * qJD(3), 0, 0, 0, 0, 0, 0 (t285 + t340) * t255 + (t287 - t367) * t252, t323 - t433, t318 + (t252 * t321 + t341) * t251 + t405, -g(3) + (-qJD(3) * t298 - t85) * t255 + (qJD(3) * t130 + t264) * t252, 0, 0, 0, 0, 0, 0, t446, -t450, t448, t101 * t365 + t143 * t326 + t144 * t3 - t24 * t70 - t25 * t69 - t255 * t53 - g(3), 0, 0, 0, 0, 0, 0, t446, t448, t450, t1 * t144 + t143 * t2 + t22 * t70 - t23 * t69 - t255 * t5 + t365 * t38 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t347, t370 * t259, t354, t347, t240, qJDD(3), qJD(3) * t142 + t252 * t284 - t320 - t421, t422 + (t141 + t169) * qJD(3) + t284 * t255 + t346, 0, 0, -t251 * t100 - t254 * t393 (-t100 - t395) * t254 + (t285 + t393) * t251 (-t171 * t252 + t220 * t376) * qJD(1) - t287, t251 * t395 + t279, t220 * t361 + t166 * t254 + (-t170 * t252 - t220 * t379) * qJD(1), t220 * t369, -pkin(3) * t319 + t95 * t220 - t76 * t369 + t142 * t170 + t280 * t251 + (t401 - t459) * t254, pkin(3) * t100 - t142 * t171 - t220 * t96 + t251 * t459 + t280 * t254 + t77 * t369, -t96 * t170 + t95 * t171 + ((qJD(4) * t171 + t285) * pkin(8) + t442) * t254 + (pkin(8) * t321 - t28 + t410) * t251 - t432, -t130 * t142 - t76 * t95 - t77 * t96 + t270 * pkin(3) + (t264 - t432) * pkin(8), t11, t431, t29, t286, t434, t337, t101 * t372 + t107 * t311 + t172 * t53 - t209 * t415 - t234 * t35 - t24 * t369 + t281, -t101 * t373 + t173 * t53 + t209 * t416 + t234 * t34 + t25 * t369 + t290 * t311 + t458, t107 * t40 - t172 * t3 + t173 * t326 + t24 * t373 - t25 * t372 - t290 * t415 + t262, -g(3) * t322 + t101 * t311 - t326 * t289 + t3 * t120 - t53 * t234 + t24 * t415 + t25 * t416 + t306 * (t234 * t252 + t375) t11, t29, -t431, t337, -t434, t286, t103 * t35 + t107 * t418 + t172 * t5 + t209 * t414 + t22 * t369 + t372 * t38 + t281, -t1 * t172 + t107 * t36 + t173 * t2 - t22 * t373 - t23 * t372 + t290 * t414 + t262, t103 * t34 - t173 * t5 - t209 * t417 - t23 * t369 - t290 * t418 + t373 * t38 - t458, t1 * t120 + t5 * t103 - t2 * t289 - g(3) * (t255 * t303 + t322) + t418 * t38 + t417 * t23 + t414 * t22 + t306 * (t375 - (-t234 - t303) * t252); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t394, -t170 ^ 2 + t171 ^ 2, -t100 + t395, t394, t285 - t393, t166, -t131 * t359 - g(1) * t138 + t425 - t130 * t171 - t410 + t94 + (-qJD(4) * t132 + t422 - t84) * t251, g(1) * t139 - g(2) * t137 + g(3) * t378 - t130 * t170 - t442, 0, 0, t454, -t334, t444, -t454, -t456, t159, -t30 * t209 + (-t107 * t171 + t159 * t429 + t209 * t358) * pkin(4) + t435, t455 - t31 * t209 + (-t159 * t250 - t171 * t290 + t209 * t332) * pkin(4) + t271, t25 * t290 + t31 * t107 - t107 * t24 - t30 * t290 + (t429 * t34 - t250 * t35 + (-t107 * t429 + t250 * t290) * qJD(5)) * pkin(4), -g(1) * t198 + t24 * t30 - t25 * t31 + (g(2) * t387 - t326 * t429 - t101 * t171 + t3 * t250 + t432 * t251 + (-t24 * t250 + t25 * t429) * qJD(5)) * pkin(4), t454, t444, t334, t159, t456, -t454, -t107 * t50 - t159 * t233 + t209 * t314 - t261, -t226 * t35 - t233 * t34 + (t23 + t314) * t290 + (-t404 + t22) * t107, t159 * t226 - t209 * t404 + t290 * t50 - t271 + t438 - t457, t1 * t226 + t2 * t233 - t38 * t50 - t22 * t30 - g(1) * (t198 + t324) - t304 - g(3) * (-t221 + t313) + t404 * t23 + (g(1) * t349 + t22 * t358 + t425) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t454, -t334, t444, -t454, -t456, t159, -t412 + t435, t266 + t455, 0, 0, t454, t444, t334, t159, t456, -t454, -t107 * t59 + t151 - t261 - t412, pkin(5) * t34 - qJ(6) * t35 + (t23 - t25) * t290 + (t22 - t374) * t107, t290 * t59 + 0.2e1 * t150 - 0.2e1 * t183 - t266 - t457, -t2 * pkin(5) - g(1) * t324 - g(3) * t313 + t1 * qJ(6) - t22 * t25 + t23 * t374 - t38 * t59 - t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 + t454, t444, -t209 ^ 2 - t430, t209 * t23 + t261;];
tau_reg  = t4;
