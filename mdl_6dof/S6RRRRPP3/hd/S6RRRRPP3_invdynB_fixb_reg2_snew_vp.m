% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:11:24
% EndTime: 2019-05-07 18:12:07
% DurationCPUTime: 41.06s
% Computational Cost: add. (76706->745), mult. (155379->1003), div. (0->0), fcn. (110996->8), ass. (0->540)
t1066 = sin(qJ(1));
t1070 = cos(qJ(1));
t1063 = sin(qJ(4));
t1064 = sin(qJ(3));
t1068 = cos(qJ(3));
t1069 = cos(qJ(2));
t1133 = qJD(1) * t1069;
t1065 = sin(qJ(2));
t1134 = qJD(1) * t1065;
t1025 = t1064 * t1134 - t1068 * t1133;
t1021 = qJD(4) + t1025;
t1020 = t1021 ^ 2;
t1027 = (t1064 * t1069 + t1065 * t1068) * qJD(1);
t1067 = cos(qJ(4));
t1121 = qJD(2) + qJD(3);
t993 = t1027 * t1063 - t1067 * t1121;
t1186 = t993 ^ 2;
t1197 = -t1020 - t1186;
t995 = t1067 * t1027 + t1063 * t1121;
t1176 = t995 * t993;
t1105 = qJD(2) * t1133;
t1118 = qJDD(1) * t1065;
t1035 = t1105 + t1118;
t1057 = t1069 * qJDD(1);
t1108 = qJD(2) * t1134;
t1086 = -t1057 + t1108;
t1100 = t1064 * t1035 + t1068 * t1086;
t949 = -t1027 * qJD(3) - t1100;
t945 = qJDD(4) - t949;
t1205 = -t945 + t1176;
t1234 = t1067 * t1205;
t1232 = t1063 * t1197 - t1234;
t1248 = t1070 * t1232;
t1115 = qJDD(2) + qJDD(3);
t950 = -t1025 * qJD(3) + t1068 * t1035 - t1064 * t1086;
t1102 = t1063 * t950 - t1067 * t1115;
t895 = qJD(4) * t995 + t1102;
t967 = t1021 * t995;
t1209 = t895 + t967;
t1235 = t1063 * t1205;
t1233 = t1067 * t1197 + t1235;
t1254 = t1064 * t1233;
t734 = t1068 * t1209 - t1254;
t1250 = t1068 * t1233;
t743 = t1064 * t1209 + t1250;
t679 = t1065 * t734 + t1069 * t743;
t648 = t1066 * t679 - t1248;
t1324 = pkin(6) * t648;
t1252 = t1066 * t1232;
t651 = t1070 * t679 + t1252;
t1323 = pkin(6) * t651;
t1206 = t1176 + t945;
t1224 = t1063 * t1206;
t1185 = t995 ^ 2;
t925 = -t1185 - t1020;
t809 = t1067 * t925 - t1224;
t1273 = t1070 * t809;
t1220 = t1067 * t1206;
t1231 = t1063 * t925 + t1220;
t1255 = t1064 * t1231;
t1083 = t1063 * t1115 + t1067 * t950;
t1120 = qJD(4) + t1021;
t870 = t1120 * t993 - t1083;
t739 = t1068 * t870 - t1255;
t1251 = t1068 * t1231;
t741 = t1064 * t870 + t1251;
t677 = t1065 * t739 + t1069 * t741;
t646 = t1066 * t677 + t1273;
t1322 = pkin(6) * t646;
t1275 = t1066 * t809;
t649 = t1070 * t677 - t1275;
t1321 = pkin(6) * t649;
t676 = t1065 * t743 - t1069 * t734;
t1320 = pkin(7) * t676;
t1258 = pkin(9) * t1233;
t1319 = pkin(1) * t676 - pkin(2) * t734 + t1258;
t1263 = pkin(1) * t1232;
t1318 = pkin(7) * t679 - t1263;
t963 = t1186 - t1020;
t1246 = t1063 * t963 + t1220;
t1270 = t1070 * t1246;
t1236 = -t1067 * t963 + t1224;
t1253 = t1064 * t1236;
t863 = (-qJD(4) + t1021) * t995 - t1102;
t751 = t1068 * t863 + t1253;
t1249 = t1068 * t1236;
t758 = t1064 * t863 - t1249;
t689 = t1065 * t751 + t1069 * t758;
t1317 = t1066 * t689 - t1270;
t1272 = t1066 * t1246;
t1316 = t1070 * t689 + t1272;
t674 = t1065 * t741 - t1069 * t739;
t1315 = pkin(7) * t674;
t1260 = pkin(9) * t1231;
t1314 = -pkin(1) * t674 + pkin(2) * t739 - t1260;
t1283 = pkin(1) * t809;
t1313 = pkin(7) * t677 + t1283;
t964 = -t1185 + t1020;
t822 = t1063 * t964 + t1234;
t1136 = t993 * t1021;
t896 = -t993 * qJD(4) + t1083;
t866 = t1136 + t896;
t749 = t1064 * t822 + t1068 * t866;
t755 = -t1064 * t866 + t1068 * t822;
t1298 = t1065 * t749 - t1069 * t755;
t826 = t1067 * t964 - t1235;
t1307 = t1066 * t1298 - t1070 * t826;
t1306 = t1066 * t826 + t1070 * t1298;
t1312 = pkin(8) * t734;
t1262 = pkin(2) * t1232;
t1310 = pkin(8) * t743 - t1262;
t930 = -t1186 + t1185;
t1237 = t1068 * t930;
t1227 = t1136 - t896;
t1167 = t1063 * t1227;
t860 = t1120 * t995 + t1102;
t766 = t1067 * t860 - t1167;
t725 = t1064 * t766 + t1237;
t1240 = t1064 * t930;
t728 = t1068 * t766 - t1240;
t666 = t1065 * t725 - t1069 * t728;
t1147 = t1067 * t1227;
t772 = t1063 * t860 + t1147;
t1309 = t1066 * t666 + t1070 * t772;
t1308 = -t1066 * t772 + t1070 * t666;
t1305 = t1065 * t758 - t1069 * t751;
t1304 = pkin(8) * t739;
t1148 = t1067 * t866;
t1247 = t1063 * t863 - t1148;
t900 = t1186 + t1185;
t1241 = t1064 * t900;
t1168 = t1063 * t866;
t1256 = t1067 * t863 + t1168;
t1264 = t1068 * t1256 - t1241;
t1238 = t1068 * t900;
t1265 = t1064 * t1256 + t1238;
t1285 = -t1065 * t1265 + t1069 * t1264;
t1292 = t1066 * t1247 + t1070 * t1285;
t1303 = pkin(6) * t1292;
t1293 = t1066 * t1285 - t1070 * t1247;
t1302 = pkin(6) * t1293;
t1282 = pkin(2) * t809;
t1300 = pkin(8) * t741 + t1282;
t1299 = t1065 * t755 + t1069 * t749;
t1284 = t1065 * t1264 + t1069 * t1265;
t1297 = pkin(7) * t1284;
t1261 = pkin(3) * t1232;
t1296 = qJ(5) * t1197 + t1261;
t1245 = pkin(3) * t900;
t1295 = -pkin(1) * t1284 - pkin(2) * t1265 - pkin(9) * t1256 - t1245;
t1294 = -pkin(1) * t1247 + pkin(7) * t1285;
t1291 = t1065 * t728 + t1069 * t725;
t1290 = pkin(8) * t1265;
t1259 = pkin(9) * t1232;
t1286 = -pkin(2) * t1247 + pkin(8) * t1264;
t1281 = pkin(3) * t809;
t1280 = pkin(9) * t809;
t1277 = pkin(9) * t1247;
t1132 = qJD(5) * t1021;
t1268 = -qJ(5) * t1206 - 0.2e1 * t1132 + t1281;
t1267 = -pkin(3) * t1247 - qJ(5) * t863;
t1257 = qJ(5) * t1227;
t1244 = (t1209 + t967) * pkin(4);
t1243 = qJ(5) * t900;
t1131 = t1021 * t1063;
t955 = t993 * t1131;
t1203 = t1067 * t895 - t955;
t1130 = t1021 * t1067;
t1109 = t993 * t1130;
t1084 = t1063 * t895 + t1109;
t1113 = t1064 * t1176;
t1193 = t1068 * t1084 - t1113;
t1112 = t1068 * t1176;
t1195 = t1064 * t1084 + t1112;
t1210 = -t1065 * t1195 + t1069 * t1193;
t1217 = t1066 * t1210 + t1070 * t1203;
t956 = t995 * t1130;
t1202 = -t1063 * t896 - t956;
t954 = t995 * t1131;
t1175 = t1067 * t896 - t954;
t1191 = t1068 * t1175 + t1113;
t1194 = t1064 * t1175 - t1112;
t1213 = -t1065 * t1194 + t1069 * t1191;
t1216 = t1066 * t1213 + t1070 * t1202;
t1174 = t956 + t955;
t1199 = t1070 * t1174;
t1092 = t954 - t1109;
t1157 = t1064 * t945;
t1192 = t1068 * t1092 + t1157;
t938 = t1068 * t945;
t1196 = t1064 * t1092 - t938;
t1212 = -t1065 * t1196 + t1069 * t1192;
t1230 = t1066 * t1212 + t1199;
t1215 = -t1066 * t1203 + t1070 * t1210;
t1214 = -t1066 * t1202 + t1070 * t1213;
t1200 = t1066 * t1174;
t1229 = t1070 * t1212 - t1200;
t980 = t1027 * t1025;
t1201 = -t980 + t1115;
t1223 = t1064 * t1201;
t1219 = t1068 * t1201;
t1190 = t1065 * t1191 + t1069 * t1194;
t1211 = t1065 * t1192 + t1069 * t1196;
t1188 = t1065 * t1193 + t1069 * t1195;
t1114 = t1121 ^ 2;
t1172 = qJD(6) * t993;
t1173 = qJD(5) * t995;
t983 = 0.2e1 * t1173;
t1208 = -0.2e1 * t1172 + t983;
t1016 = t1121 * t1025;
t1204 = -t950 + t1016;
t1062 = t1069 ^ 2;
t1072 = qJD(1) ^ 2;
t1059 = t1062 * t1072;
t1071 = qJD(2) ^ 2;
t1049 = -t1059 - t1071;
t1044 = t1066 * g(1) - t1070 * g(2);
t1085 = qJDD(1) * pkin(1) + t1044;
t952 = (pkin(8) * t1062 + pkin(7)) * t1072 - pkin(2) * t1086 - (qJD(2) * pkin(2) - pkin(8) * t1134) * t1134 + t1085;
t1023 = t1025 ^ 2;
t1024 = t1027 ^ 2;
t1184 = -0.2e1 * qJD(6);
t1183 = pkin(4) + qJ(6);
t1182 = pkin(3) * t1064;
t1181 = pkin(4) * t1021;
t1180 = pkin(4) * t1063;
t1179 = pkin(4) * t1067;
t1101 = t1121 * t1027;
t798 = t1204 * pkin(9) + (-t949 + t1101) * pkin(3) - t952;
t1045 = g(1) * t1070 + g(2) * t1066;
t1081 = -pkin(1) * t1072 + qJDD(1) * pkin(7) - t1045;
t1079 = t1065 * t1081;
t1122 = t1065 * t1072;
t1135 = qJD(1) * qJD(2);
t1073 = -t1079 - t1035 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1122 + pkin(8) * t1135 - g(3)) * t1069;
t1007 = -t1065 * g(3) + t1069 * t1081;
t937 = pkin(2) * t1049 + t1057 * pkin(8) + t1007;
t874 = t1064 * t1073 + t1068 * t937;
t978 = pkin(3) * t1025 - pkin(9) * t1027;
t807 = -pkin(3) * t1114 + pkin(9) * t1115 - t1025 * t978 + t874;
t712 = t1063 * t798 + t1067 * t807;
t873 = t1064 * t937 - t1068 * t1073;
t806 = -t1115 * pkin(3) - t1114 * pkin(9) + t1027 * t978 + t873;
t1171 = t1063 * t806;
t1156 = t1064 * t952;
t975 = t980 + t1115;
t1155 = t1064 * t975;
t777 = t1064 * t874 - t1068 * t873;
t1154 = t1065 * t777;
t1151 = t1067 * t806;
t1149 = t1067 * t1209;
t1139 = t1068 * t952;
t1138 = t1068 * t975;
t1137 = t1069 * t777;
t1028 = t1072 * pkin(7) + t1085;
t1129 = t1028 * t1065;
t1128 = t1028 * t1069;
t1036 = t1057 - 0.2e1 * t1108;
t1127 = t1036 * t1069;
t1051 = t1069 * t1122;
t1042 = qJDD(2) + t1051;
t1126 = t1042 * t1065;
t1043 = qJDD(2) - t1051;
t1125 = t1043 * t1065;
t1124 = t1043 * t1069;
t1061 = t1065 ^ 2;
t1123 = t1061 * t1072;
t1119 = t1061 + t1062;
t1117 = qJDD(1) * t1066;
t1116 = qJDD(1) * t1070;
t1111 = -pkin(3) * t1068 - pkin(2);
t1107 = t1066 * t980;
t1106 = t1070 * t980;
t1104 = -qJ(5) * t1063 - pkin(3);
t1103 = -0.2e1 * qJD(5) + t1181;
t711 = t1063 * t807 - t1067 * t798;
t778 = t1064 * t873 + t1068 * t874;
t1006 = t1069 * g(3) + t1079;
t936 = t1006 * t1065 + t1069 * t1007;
t998 = -t1044 * t1066 - t1070 * t1045;
t1099 = t1066 * t1051;
t1098 = t1070 * t1051;
t1039 = -t1066 * t1072 + t1116;
t1093 = -pkin(6) * t1039 - g(3) * t1066;
t1091 = t1064 * t1016;
t1090 = t1064 * t1101;
t1089 = t1068 * t1016;
t1088 = t1068 * t1101;
t929 = pkin(4) * t993 - qJ(5) * t995;
t1087 = -t1020 * pkin(4) + t945 * qJ(5) - t993 * t929 + t712;
t653 = t1063 * t712 - t1067 * t711;
t654 = t1063 * t711 + t1067 * t712;
t935 = t1006 * t1069 - t1007 * t1065;
t997 = t1044 * t1070 - t1045 * t1066;
t1014 = 0.2e1 * t1132;
t692 = t1014 + t1087;
t913 = qJD(2) * t1027 - t1100;
t1082 = -t945 * pkin(4) - t1020 * qJ(5) + t995 * t929 + qJDD(5) + t711;
t953 = pkin(5) * t995 - qJ(6) * t1021;
t1080 = -t895 * pkin(5) - qJ(6) * t1186 + t1021 * t953 + qJDD(6) + t1087;
t1078 = t895 * pkin(4) + t1257 + t806;
t656 = t1014 + t1080;
t1077 = t896 * pkin(5) + qJ(6) * t1205 + t1082;
t1076 = -pkin(5) * t1186 + t1078;
t1074 = t895 * qJ(6) + t1076;
t652 = (pkin(5) * t993 + t1184) * t1021 + t1077;
t1048 = t1059 - t1071;
t1047 = -t1071 - t1123;
t1046 = t1071 - t1123;
t1041 = t1059 - t1123;
t1040 = t1059 + t1123;
t1038 = t1070 * t1072 + t1117;
t1037 = t1119 * qJDD(1);
t1034 = 0.2e1 * t1105 + t1118;
t1032 = t1069 * t1042;
t1031 = t1119 * t1135;
t1022 = -pkin(6) * t1038 + g(3) * t1070;
t1011 = -t1024 + t1114;
t1010 = t1023 - t1114;
t1009 = t1035 * t1069 - t1061 * t1135;
t1008 = -t1062 * t1135 + t1065 * t1086;
t1005 = -t1024 - t1114;
t1004 = -t1047 * t1065 - t1124;
t1003 = -t1046 * t1065 + t1032;
t1002 = t1049 * t1069 - t1126;
t1001 = t1048 * t1069 - t1125;
t1000 = t1047 * t1069 - t1125;
t999 = t1049 * t1065 + t1032;
t986 = t1037 * t1070 - t1040 * t1066;
t985 = t1037 * t1066 + t1040 * t1070;
t981 = -t1034 * t1065 + t1127;
t979 = -t1024 + t1023;
t974 = -t1114 - t1023;
t973 = t1004 * t1070 + t1034 * t1066;
t972 = t1002 * t1070 - t1036 * t1066;
t971 = t1004 * t1066 - t1034 * t1070;
t970 = t1002 * t1066 + t1036 * t1070;
t960 = -t1089 + t1090;
t959 = -t1091 - t1088;
t958 = -pkin(7) * t1000 - t1128;
t957 = -pkin(7) * t999 - t1129;
t951 = -t1023 - t1024;
t947 = -pkin(1) * t1000 + t1007;
t946 = -pkin(1) * t999 + t1006;
t922 = t1010 * t1068 - t1155;
t921 = -t1011 * t1064 + t1219;
t920 = t1010 * t1064 + t1138;
t919 = t1011 * t1068 + t1223;
t918 = -t1005 * t1064 - t1138;
t917 = t1005 * t1068 - t1155;
t915 = -t1016 - t950;
t911 = (0.2e1 * qJD(3) + qJD(2)) * t1027 + t1100;
t908 = t1068 * t950 - t1090;
t907 = t1064 * t950 + t1088;
t906 = -t1064 * t949 + t1089;
t905 = t1068 * t949 + t1091;
t904 = -t1028 * t1066 + t1070 * t936;
t903 = t1028 * t1070 + t1066 * t936;
t902 = t1068 * t974 - t1223;
t901 = t1064 * t974 + t1219;
t889 = (t1063 * t995 - t1067 * t993) * t1021;
t883 = -t1065 * t959 + t1069 * t960;
t871 = -pkin(8) * t917 - t1139;
t864 = -t895 + t967;
t859 = -pkin(8) * t901 - t1156;
t858 = -t1065 * t920 + t1069 * t922;
t857 = -t1065 * t919 + t1069 * t921;
t841 = -t1065 * t917 + t1069 * t918;
t840 = t1065 * t918 + t1069 * t917;
t839 = -t1064 * t915 + t1068 * t913;
t838 = t1064 * t1204 - t1068 * t911;
t837 = t1064 * t913 + t1068 * t915;
t836 = -t1064 * t911 - t1068 * t1204;
t835 = t1068 * t889 + t1157;
t832 = t1064 * t889 - t938;
t817 = -t1065 * t907 + t1069 * t908;
t816 = -t1065 * t905 + t1069 * t906;
t815 = -t1065 * t901 + t1069 * t902;
t814 = t1065 * t902 + t1069 * t901;
t797 = pkin(2) * t1204 + pkin(8) * t918 - t1156;
t782 = -pkin(2) * t911 + pkin(8) * t902 + t1139;
t781 = -t1066 * t1204 + t1070 * t841;
t780 = t1066 * t841 + t1070 * t1204;
t779 = pkin(5) * t1205 - qJ(5) * t1209;
t776 = t1066 * t911 + t1070 * t815;
t775 = t1066 * t815 - t1070 * t911;
t773 = t1063 * t1209 + t1147;
t771 = t1067 * t864 + t1168;
t770 = -t1149 + t1167;
t765 = t1063 * t864 - t1148;
t762 = pkin(2) * t952 + pkin(8) * t778;
t761 = -t1065 * t837 + t1069 * t839;
t760 = -t1065 * t836 + t1069 * t838;
t759 = t1065 * t839 + t1069 * t837;
t756 = -t1064 * t864 + t1249;
t750 = t1068 * t864 + t1253;
t746 = -t1065 * t832 + t1069 * t835;
t736 = t1064 * t860 + t1250;
t735 = t1064 * t1227 + t1251;
t733 = -t1068 * t860 + t1254;
t732 = -t1068 * t1227 + t1255;
t731 = -pkin(1) * t840 - pkin(2) * t917 + t874;
t730 = t1068 * t770 + t1240;
t727 = t1064 * t770 - t1237;
t724 = t1066 * t951 + t1070 * t761;
t723 = t1066 * t761 - t1070 * t951;
t722 = t1151 - t1280;
t721 = t1068 * t771 - t1241;
t718 = t1064 * t771 + t1238;
t715 = -pkin(1) * t814 - pkin(2) * t901 + t873;
t714 = t1171 - t1259;
t713 = pkin(5) * t1206 - t1183 * t1227;
t710 = -pkin(8) * t837 - t777;
t703 = -pkin(2) * t951 + pkin(8) * t839 + t778;
t702 = -pkin(1) * t759 - pkin(2) * t837;
t701 = -pkin(7) * t840 - t1065 * t797 + t1069 * t871;
t700 = t1103 * t995 + t1078;
t699 = t1069 * t778 - t1154;
t698 = t1065 * t778 + t1137;
t697 = -pkin(7) * t814 - t1065 * t782 + t1069 * t859;
t695 = pkin(4) * t866 + t1267;
t694 = -t1066 * t952 + t1070 * t699;
t693 = t1066 * t699 + t1070 * t952;
t691 = t712 - t1281;
t690 = t711 - t1261;
t687 = -t1065 * t750 + t1069 * t756;
t683 = t1078 - 0.2e1 * t1173 + t1244;
t682 = -pkin(4) * t967 - qJ(5) * t870 - t1078 + t983;
t681 = t1082 + t1243;
t680 = pkin(4) * t900 + t692;
t672 = -t1065 * t733 + t1069 * t736;
t671 = -t1065 * t732 + t1069 * t735;
t669 = t1065 * t736 + t1069 * t733;
t668 = t1065 * t735 + t1069 * t732;
t667 = -t1065 * t727 + t1069 * t730;
t664 = t1183 * t866 + t1267;
t663 = 0.2e1 * t1172 + (t1103 - t953) * t995 + t1074;
t662 = -t1065 * t718 + t1069 * t721;
t659 = t1065 * t721 + t1069 * t718;
t655 = -pkin(1) * t698 - pkin(2) * t777;
t644 = t1070 * t672 + t1252;
t643 = t1070 * t671 - t1275;
t641 = t1066 * t672 - t1248;
t640 = t1066 * t671 + t1273;
t639 = pkin(4) * t925 - t1087 + t1268;
t638 = -pkin(4) * t1205 - t1082 + t1296;
t637 = -t1074 + (t953 - t1181) * t995 - t1257 + pkin(5) * t925 + t1208;
t636 = t1067 * t682 + t1180 * t870 + t1280;
t635 = qJ(5) * t1149 - t1063 * t683 + t1259;
t634 = t1064 * t806 + t1068 * t654;
t633 = t1064 * t654 - t1068 * t806;
t632 = t1066 * t765 + t1070 * t662;
t629 = t1066 * t662 - t1070 * t765;
t626 = t1243 + t1021 * t1184 + (t866 + t1136) * pkin(5) + t1077;
t625 = -t1076 + (-t1209 - t895) * qJ(6) - t1244 + t995 * t953 + pkin(5) * t1197 + t1208;
t624 = -pkin(9) * t765 - t653;
t623 = -pkin(7) * t698 - pkin(8) * t1137 - t1065 * t762;
t622 = pkin(5) * t863 + t1183 * t900 + t656;
t621 = t1063 * t1082 + t1067 * t692;
t620 = t1063 * t692 - t1067 * t1082;
t619 = -pkin(7) * t759 - t1065 * t703 + t1069 * t710;
t618 = t1183 * t925 - t1080 + t1268;
t617 = -t1064 * t691 + t1068 * t722 - t1304;
t616 = t1183 * t1205 - t1296 + t652;
t615 = -pkin(8) * t733 - t1064 * t690 + t1068 * t714;
t614 = t1064 * t722 + t1068 * t691 - t1300;
t613 = -pkin(3) * t870 - t1171 - t1314;
t612 = pkin(8) * t736 + t1064 * t714 + t1068 * t690 - t1262;
t611 = -t1063 * t625 + t1067 * t779 - t1259;
t610 = -t1063 * t713 + t1067 * t637 + t1280;
t609 = -pkin(1) * t669 - pkin(2) * t733 + pkin(3) * t860 + t1151 - t1258;
t608 = pkin(5) * t652 - qJ(5) * t663;
t607 = -t1063 * t680 + t1067 * t681 - t1277;
t606 = t1063 * t652 + t1067 * t656;
t605 = t1063 * t656 - t1067 * t652;
t604 = t1064 * t700 + t1068 * t621;
t603 = t1064 * t621 - t1068 * t700;
t602 = -pkin(8) * t718 + t1068 * t624 + t1182 * t765;
t601 = -t1065 * t633 + t1069 * t634;
t600 = t1065 * t634 + t1069 * t633;
t599 = pkin(8) * t721 + t1064 * t624 + t1111 * t765;
t598 = -t1063 * t682 - (-pkin(3) - t1179) * t870 + t1314;
t597 = -t1067 * t683 + t1104 * t1209 + t1319;
t596 = -pkin(9) * t620 + (-qJ(5) * t1067 + t1180) * t700;
t595 = pkin(5) * t656 - t1183 * t663;
t594 = -t1064 * t639 + t1068 * t636 + t1304;
t593 = -t1064 * t638 + t1068 * t635 - t1312;
t592 = -pkin(3) * t620 + pkin(4) * t1082 - qJ(5) * t692;
t591 = -pkin(1) * t659 - pkin(2) * t718 - pkin(9) * t771 - t1245 - t654;
t590 = t1064 * t663 + t1068 * t606;
t589 = t1064 * t606 - t1068 * t663;
t588 = t1064 * t636 + t1068 * t639 + t1300;
t587 = -t1063 * t622 + t1067 * t626 - t1277;
t586 = t1064 * t635 + t1068 * t638 - t1310;
t585 = -t1064 * t695 + t1068 * t607 - t1290;
t584 = -pkin(8) * t633 + (-pkin(9) * t1068 + t1182) * t653;
t583 = pkin(3) * t1209 - t1063 * t779 - t1067 * t625 - t1319;
t582 = -pkin(1) * t668 - pkin(2) * t732 + pkin(3) * t1227 - t1063 * t637 - t1067 * t713 - t1260;
t581 = t1066 * t653 + t1070 * t601;
t580 = t1066 * t601 - t1070 * t653;
t579 = -t1063 * t681 - t1067 * t680 + t1295;
t578 = t1064 * t607 + t1068 * t695 + t1286;
t577 = -pkin(8) * t732 - t1064 * t618 + t1068 * t610;
t576 = -t1064 * t616 + t1068 * t611 + t1312;
t575 = -t1065 * t603 + t1069 * t604;
t574 = t1065 * t604 + t1069 * t603;
t573 = pkin(8) * t735 + t1064 * t610 + t1068 * t618 + t1282;
t572 = t1064 * t611 + t1068 * t616 + t1310;
t571 = pkin(8) * t634 + (-pkin(9) * t1064 + t1111) * t653;
t570 = -t1065 * t614 + t1069 * t617 + t1315;
t569 = -pkin(7) * t669 - t1065 * t612 + t1069 * t615;
t568 = -t1064 * t664 + t1068 * t587 - t1290;
t567 = -t1063 * t626 - t1067 * t622 + t1295;
t566 = t1064 * t587 + t1068 * t664 + t1286;
t565 = -pkin(1) * t600 - pkin(2) * t633 + pkin(3) * t806 - pkin(9) * t654;
t564 = -pkin(3) * t605 - qJ(5) * t656 + t1183 * t652;
t563 = t1066 * t620 + t1070 * t575;
t562 = t1066 * t575 - t1070 * t620;
t561 = -pkin(7) * t659 - t1065 * t599 + t1069 * t602;
t560 = -t1065 * t589 + t1069 * t590;
t559 = t1065 * t590 + t1069 * t589;
t558 = -t1065 * t588 + t1069 * t594 - t1315;
t557 = -t1065 * t586 + t1069 * t593 + t1320;
t556 = -pkin(9) * t605 - t1063 * t595 + t1067 * t608;
t555 = -pkin(8) * t603 - t1064 * t592 + t1068 * t596;
t554 = -t1065 * t578 + t1069 * t585 - t1297;
t553 = t1066 * t605 + t1070 * t560;
t552 = t1066 * t560 - t1070 * t605;
t551 = -pkin(7) * t668 - t1065 * t573 + t1069 * t577;
t550 = -t1065 * t572 + t1069 * t576 - t1320;
t549 = -pkin(2) * t620 + pkin(8) * t604 + t1064 * t596 + t1068 * t592;
t548 = -pkin(1) * t574 - pkin(2) * t603 - pkin(9) * t621 + (-t1104 + t1179) * t700;
t547 = -pkin(7) * t600 - t1065 * t571 + t1069 * t584;
t546 = -t1065 * t566 + t1069 * t568 - t1297;
t545 = -pkin(8) * t589 - t1064 * t564 + t1068 * t556;
t544 = -pkin(1) * t559 - pkin(2) * t589 + pkin(3) * t663 - pkin(9) * t606 - t1063 * t608 - t1067 * t595;
t543 = -pkin(2) * t605 + pkin(8) * t590 + t1064 * t556 + t1068 * t564;
t542 = -pkin(7) * t574 - t1065 * t549 + t1069 * t555;
t541 = -pkin(7) * t559 - t1065 * t543 + t1069 * t545;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1038, -t1039, 0, t998, 0, 0, 0, 0, 0, 0, t972, t973, t986, t904, 0, 0, 0, 0, 0, 0, t776, t781, t724, t694, 0, 0, 0, 0, 0, 0, t644, -t649, t632, t581, 0, 0, 0, 0, 0, 0, t1292, -t651, t649, t563, 0, 0, 0, 0, 0, 0, t1292, t643, t651, t553; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1039, -t1038, 0, t997, 0, 0, 0, 0, 0, 0, t970, t971, t985, t903, 0, 0, 0, 0, 0, 0, t775, t780, t723, t693, 0, 0, 0, 0, 0, 0, t641, -t646, t629, t580, 0, 0, 0, 0, 0, 0, t1293, -t648, t646, t562, 0, 0, 0, 0, 0, 0, t1293, t640, t648, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t999, t1000, 0, -t935, 0, 0, 0, 0, 0, 0, t814, t840, t759, t698, 0, 0, 0, 0, 0, 0, t669, -t674, t659, t600, 0, 0, 0, 0, 0, 0, t1284, -t676, t674, t574, 0, 0, 0, 0, 0, 0, t1284, t668, t676, t559; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1039, 0, -t1038, 0, t1093, -t1022, -t997, -pkin(6) * t997, t1009 * t1070 - t1099, -t1041 * t1066 + t1070 * t981, t1003 * t1070 + t1065 * t1117, t1008 * t1070 + t1099, t1001 * t1070 + t1057 * t1066, qJDD(2) * t1066 + t1031 * t1070, -pkin(6) * t970 - t1066 * t946 + t1070 * t957, -pkin(6) * t971 - t1066 * t947 + t1070 * t958, -pkin(6) * t985 + t1070 * t935, -pkin(6) * t903 - (pkin(1) * t1066 - pkin(7) * t1070) * t935, t1070 * t817 + t1107, -t1066 * t979 + t1070 * t760, -t1066 * t915 + t1070 * t857, t1070 * t816 - t1107, t1066 * t913 + t1070 * t858, t1066 * t1115 + t1070 * t883, -pkin(6) * t775 - t1066 * t715 + t1070 * t697, -pkin(6) * t780 - t1066 * t731 + t1070 * t701, -pkin(6) * t723 - t1066 * t702 + t1070 * t619, -pkin(6) * t693 - t1066 * t655 + t1070 * t623, t1214, t1308, t1306, t1215, t1316, t1229, -pkin(6) * t641 - t1066 * t609 + t1070 * t569, -t1066 * t613 + t1070 * t570 + t1322, -pkin(6) * t629 - t1066 * t591 + t1070 * t561, -pkin(6) * t580 - t1066 * t565 + t1070 * t547, t1070 * t746 - t1200, -t1306, t1070 * t687 - t1272, t1214, -t1066 * t773 + t1070 * t667, t1215, -t1066 * t579 + t1070 * t554 - t1302, -t1066 * t597 + t1070 * t557 + t1324, -t1066 * t598 + t1070 * t558 - t1322, -pkin(6) * t562 - t1066 * t548 + t1070 * t542, t1229, -t1316, t1306, t1215, -t1308, t1214, -t1066 * t567 + t1070 * t546 - t1302, -pkin(6) * t640 - t1066 * t582 + t1070 * t551, -t1066 * t583 + t1070 * t550 - t1324, -pkin(6) * t552 - t1066 * t544 + t1070 * t541; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1038, 0, t1039, 0, t1022, t1093, t998, pkin(6) * t998, t1009 * t1066 + t1098, t1041 * t1070 + t1066 * t981, t1003 * t1066 - t1065 * t1116, t1008 * t1066 - t1098, t1001 * t1066 - t1057 * t1070, -qJDD(2) * t1070 + t1031 * t1066, pkin(6) * t972 + t1066 * t957 + t1070 * t946, pkin(6) * t973 + t1066 * t958 + t1070 * t947, pkin(6) * t986 + t1066 * t935, pkin(6) * t904 - (-pkin(1) * t1070 - pkin(7) * t1066) * t935, t1066 * t817 - t1106, t1066 * t760 + t1070 * t979, t1066 * t857 + t1070 * t915, t1066 * t816 + t1106, t1066 * t858 - t1070 * t913, t1066 * t883 - t1070 * t1115, pkin(6) * t776 + t1066 * t697 + t1070 * t715, pkin(6) * t781 + t1066 * t701 + t1070 * t731, pkin(6) * t724 + t1066 * t619 + t1070 * t702, pkin(6) * t694 + t1066 * t623 + t1070 * t655, t1216, t1309, t1307, t1217, t1317, t1230, pkin(6) * t644 + t1066 * t569 + t1070 * t609, t1066 * t570 + t1070 * t613 - t1321, pkin(6) * t632 + t1066 * t561 + t1070 * t591, pkin(6) * t581 + t1066 * t547 + t1070 * t565, t1066 * t746 + t1199, -t1307, t1066 * t687 + t1270, t1216, t1066 * t667 + t1070 * t773, t1217, t1066 * t554 + t1070 * t579 + t1303, t1066 * t557 + t1070 * t597 - t1323, t1066 * t558 + t1070 * t598 + t1321, pkin(6) * t563 + t1066 * t542 + t1070 * t548, t1230, -t1317, t1307, t1217, -t1309, t1216, t1066 * t546 + t1070 * t567 + t1303, pkin(6) * t643 + t1066 * t551 + t1070 * t582, t1066 * t550 + t1070 * t583 + t1323, pkin(6) * t553 + t1066 * t541 + t1070 * t544; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1044, t1045, 0, 0, (t1035 + t1105) * t1065, t1034 * t1069 + t1036 * t1065, t1046 * t1069 + t1126, t1127, t1048 * t1065 + t1124, 0, pkin(1) * t1036 + pkin(7) * t1002 + t1128, -pkin(1) * t1034 + pkin(7) * t1004 - t1129, pkin(1) * t1040 + pkin(7) * t1037 + t936, pkin(1) * t1028 + pkin(7) * t936, t1065 * t908 + t1069 * t907, t1065 * t838 + t1069 * t836, t1065 * t921 + t1069 * t919, t1065 * t906 + t1069 * t905, t1065 * t922 + t1069 * t920, t1065 * t960 + t1069 * t959, -pkin(1) * t911 + pkin(7) * t815 + t1065 * t859 + t1069 * t782, pkin(1) * t1204 + pkin(7) * t841 + t1065 * t871 + t1069 * t797, -pkin(1) * t951 + pkin(7) * t761 + t1065 * t710 + t1069 * t703, pkin(1) * t952 + pkin(7) * t699 - pkin(8) * t1154 + t1069 * t762, t1190, -t1291, -t1299, t1188, t1305, t1211, pkin(7) * t672 + t1065 * t615 + t1069 * t612 - t1263, t1065 * t617 + t1069 * t614 - t1313, -pkin(1) * t765 + pkin(7) * t662 + t1065 * t602 + t1069 * t599, -pkin(1) * t653 + pkin(7) * t601 + t1065 * t584 + t1069 * t571, t1065 * t835 + t1069 * t832, t1299, t1065 * t756 + t1069 * t750, t1190, t1065 * t730 + t1069 * t727, t1188, t1065 * t585 + t1069 * t578 + t1294, t1065 * t593 + t1069 * t586 - t1318, t1065 * t594 + t1069 * t588 + t1313, -pkin(1) * t620 + pkin(7) * t575 + t1065 * t555 + t1069 * t549, t1211, -t1305, -t1299, t1188, t1291, t1190, t1065 * t568 + t1069 * t566 + t1294, pkin(7) * t671 + t1065 * t577 + t1069 * t573 + t1283, t1065 * t576 + t1069 * t572 + t1318, -pkin(1) * t605 + pkin(7) * t560 + t1065 * t545 + t1069 * t543;];
tauB_reg  = t1;
