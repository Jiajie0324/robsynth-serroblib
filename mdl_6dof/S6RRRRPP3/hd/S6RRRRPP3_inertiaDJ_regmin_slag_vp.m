% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPP3_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_inertiaDJ_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:56:29
% EndTime: 2019-03-09 20:56:38
% DurationCPUTime: 2.95s
% Computational Cost: add. (3795->319), mult. (8373->506), div. (0->0), fcn. (7415->6), ass. (0->167)
t116 = sin(qJ(4));
t119 = cos(qJ(4));
t110 = qJD(4) * t119;
t117 = sin(qJ(3));
t118 = sin(qJ(2));
t120 = cos(qJ(3));
t121 = cos(qJ(2));
t87 = t117 * t121 + t120 * t118;
t160 = t87 * t110;
t204 = qJD(2) + qJD(3);
t86 = t117 * t118 - t120 * t121;
t45 = t204 * t86;
t208 = -t116 * t45 + t160;
t46 = t204 * t87;
t41 = t46 * qJ(5);
t78 = t86 * qJD(5);
t207 = t41 + t78;
t115 = -pkin(4) - qJ(6);
t206 = t115 * t46;
t109 = qJD(5) * t119;
t183 = t116 * qJ(5);
t137 = -t119 * pkin(4) - t183;
t205 = t137 * qJD(4) + t109;
t113 = t116 ^ 2;
t114 = t119 ^ 2;
t179 = t113 - t114;
t153 = t179 * qJD(4);
t174 = qJD(4) * t116;
t161 = t87 * t174;
t131 = t119 * t45 + t161;
t172 = t118 * qJD(2);
t164 = pkin(2) * t172;
t24 = t46 * pkin(3) + t45 * pkin(9) + t164;
t202 = -pkin(8) - pkin(7);
t159 = qJD(2) * t202;
t149 = t121 * t159;
t150 = t118 * t159;
t175 = qJD(3) * t120;
t176 = qJD(3) * t117;
t95 = t202 * t118;
t97 = t202 * t121;
t29 = -t117 * t149 - t120 * t150 - t95 * t175 - t97 * t176;
t105 = -t121 * pkin(2) - pkin(1);
t39 = t86 * pkin(3) - t87 * pkin(9) + t105;
t54 = t117 * t95 - t120 * t97;
t154 = t54 * t110 - t116 * t29 - t119 * t24 + t39 * t174;
t203 = -t131 * pkin(5) + t154;
t133 = t115 * t119 - t183;
t201 = pkin(9) * t46;
t200 = pkin(9) * t86;
t199 = t46 * pkin(4);
t198 = t120 * pkin(2);
t197 = t87 * t45;
t103 = t117 * pkin(2) + pkin(9);
t196 = pkin(5) + t103;
t30 = t54 * qJD(3) + t117 * t150 - t120 * t149;
t53 = -t117 * t97 - t120 * t95;
t43 = t53 * t110;
t195 = t30 * t116 + t43;
t108 = pkin(2) * t176;
t173 = t116 * qJD(5);
t152 = pkin(4) * t174 - t173;
t178 = qJ(5) * qJD(4);
t51 = qJ(6) * t174 + (-qJD(6) - t178) * t119 + t152;
t40 = t108 + t51;
t194 = -t40 - t51;
t193 = t116 * t39 + t119 * t54;
t104 = -pkin(3) - t198;
t192 = t104 * t110 + t116 * t108;
t191 = t103 * t46;
t190 = t103 * t86;
t188 = t116 * t87;
t187 = t45 * qJ(5);
t146 = pkin(4) * t188 + t53;
t181 = t119 * qJ(5);
t20 = (t116 * qJ(6) - t181) * t87 + t146;
t186 = qJD(4) * t20;
t28 = -t87 * t181 + t146;
t185 = qJD(4) * t28;
t184 = qJD(4) * t87;
t182 = t116 * t119;
t180 = t86 * qJD(6);
t177 = qJ(5) * qJD(5);
t171 = t121 * qJD(2);
t47 = t116 * t54;
t14 = t47 + t115 * t86 + (pkin(5) * t87 - t39) * t119;
t3 = -t180 + t203 + t206;
t9 = -t39 * t110 - t116 * t24 + t119 * t29 + t54 * t174;
t124 = -pkin(5) * t208 - t9;
t5 = t124 + t207;
t170 = t14 * t110 + t3 * t116 + t5 * t119;
t169 = -0.2e1 * pkin(1) * qJD(2);
t163 = pkin(2) * t175;
t98 = t119 * t163;
t55 = -t196 * t174 + t98;
t151 = t116 * t163;
t56 = t196 * t110 + t151;
t111 = t116 * pkin(5);
t80 = t116 * t103 + t111;
t168 = t80 * t110 + t56 * t116 + t55 * t119;
t89 = (-pkin(5) - pkin(9)) * t174;
t107 = pkin(9) * t110;
t90 = pkin(5) * t110 + t107;
t94 = t116 * pkin(9) + t111;
t167 = t94 * t110 + t90 * t116 + t89 * t119;
t166 = pkin(3) * t174;
t165 = pkin(3) * t110;
t162 = pkin(9) * t174;
t18 = t20 * t174;
t42 = t53 * t174;
t158 = t116 * t110;
t157 = t119 * t39 - t47;
t93 = -pkin(3) + t137;
t79 = t93 - t198;
t156 = qJD(4) * (-t79 - t93);
t155 = -0.4e1 * t87 * t182;
t123 = t208 * pkin(4) + qJ(5) * t161 + t30;
t6 = (-t45 * qJ(6) + t87 * qJD(6)) * t116 + (t187 + (qJ(6) * qJD(4) - qJD(5)) * t87) * t119 + t123;
t77 = -pkin(3) + t133;
t64 = t77 - t198;
t148 = t64 * t184 - t6;
t147 = t77 * t184 - t6;
t17 = -t86 * qJ(5) - t193;
t145 = -t87 * t93 + t200;
t144 = -t20 * t45 + t6 * t87;
t12 = (-t87 * qJD(5) + t187) * t119 + t123;
t143 = -t12 * t87 + t28 * t45;
t142 = t30 * t87 - t53 * t45;
t141 = t40 * t87 - t45 * t64;
t140 = -t45 * t86 + t87 * t46;
t139 = -t45 * t77 + t51 * t87;
t138 = -t79 * t87 + t190;
t136 = -t104 * t87 + t190;
t19 = -t86 * pkin(4) - t157;
t135 = t116 * t19 - t119 * t17;
t134 = t116 * t17 + t119 * t19;
t132 = t104 * t174 - t119 * t108;
t68 = (t113 + t114) * t163;
t130 = -t119 * t46 + t86 * t174;
t69 = -qJ(5) * t110 + t152;
t7 = t9 - t207;
t128 = t45 * t93 - t69 * t87 - t185 + t201;
t8 = t154 - t199;
t1 = qJD(4) * t134 + t8 * t116 - t7 * t119;
t126 = -t191 - t104 * t45 + (t117 * t87 - t120 * t86) * qJD(3) * pkin(2);
t59 = t108 + t69;
t125 = t86 * t163 + t45 * t79 - t59 * t87 - t185 + t191;
t122 = 0.2e1 * qJD(5);
t112 = t119 * pkin(5);
t100 = 0.2e1 * t158;
t96 = t119 * pkin(9) + t112;
t85 = -0.2e1 * t153;
t84 = t87 ^ 2;
t81 = t119 * t103 + t112;
t63 = t103 * t110 + t151;
t62 = t103 * t174 - t98;
t61 = t77 * t174;
t60 = t69 * t119;
t58 = qJD(4) * t133 - qJD(6) * t116 + t109;
t57 = t64 * t174;
t52 = t59 * t119;
t33 = t86 * t110 + t116 * t46;
t23 = -t87 * t153 - t45 * t182;
t16 = qJD(4) * t155 + t179 * t45;
t15 = -pkin(5) * t188 - t17;
t11 = t12 * t119;
t2 = [0, 0, 0, 0.2e1 * t118 * t171, 0.2e1 * (-t118 ^ 2 + t121 ^ 2) * qJD(2), 0, 0, 0, t118 * t169, t121 * t169, -0.2e1 * t197, -0.2e1 * t140, 0, 0, 0, 0.2e1 * t105 * t46 + 0.2e1 * t86 * t164, -0.2e1 * t105 * t45 + 0.2e1 * t87 * t164, -0.2e1 * t114 * t197 - 0.2e1 * t84 * t158, 0.2e1 * t84 * t153 - t45 * t155, 0.2e1 * t119 * t140 - 0.2e1 * t86 * t161, -0.2e1 * t116 * t140 - 0.2e1 * t86 * t160, 0.2e1 * t86 * t46, 0.2e1 * t142 * t116 - 0.2e1 * t154 * t86 + 0.2e1 * t157 * t46 + 0.2e1 * t87 * t43, 0.2e1 * t142 * t119 - 0.2e1 * t193 * t46 - 0.2e1 * t87 * t42 + 0.2e1 * t9 * t86, -0.2e1 * t134 * t45 + 0.2e1 * (-qJD(4) * t135 + t116 * t7 + t119 * t8) * t87, 0.2e1 * t116 * t143 - 0.2e1 * t28 * t160 + 0.2e1 * t19 * t46 + 0.2e1 * t8 * t86, 0.2e1 * t119 * t143 + 0.2e1 * t28 * t161 - 0.2e1 * t17 * t46 - 0.2e1 * t7 * t86, 0.2e1 * t28 * t12 + 0.2e1 * t17 * t7 + 0.2e1 * t19 * t8, -0.2e1 * (-t116 * t15 + t119 * t14) * t45 + 0.2e1 * (-t116 * t5 + t119 * t3 + (-t116 * t14 - t119 * t15) * qJD(4)) * t87, -0.2e1 * t119 * t144 + 0.2e1 * t15 * t46 + 0.2e1 * t18 * t87 + 0.2e1 * t5 * t86, 0.2e1 * t116 * t144 - 0.2e1 * t14 * t46 + 0.2e1 * t160 * t20 - 0.2e1 * t3 * t86, 0.2e1 * t14 * t3 + 0.2e1 * t15 * t5 + 0.2e1 * t20 * t6; 0, 0, 0, 0, 0, t171, -t172, 0, -pkin(7) * t171, pkin(7) * t172, 0, 0, -t45, -t46, 0, -t30, t29, t23, t16, t33, -t130, 0, t42 + (-qJD(4) * t136 - t30) * t119 + t126 * t116, t119 * t126 + t136 * t174 + t195, t1, t138 * t110 + t116 * t125 + t11 (-qJD(4) * t138 - t12) * t116 + t125 * t119, t1 * t103 + t12 * t79 + t135 * t163 + t28 * t59 (-t45 * t80 + (-qJD(4) * t81 + t56) * t87) * t119 + (t45 * t81 - t55 * t87 + (-t80 * t87 - t15) * qJD(4)) * t116 + t170, t81 * t46 + t55 * t86 + t148 * t116 + (-t141 - t186) * t119, t116 * t141 + t119 * t148 - t80 * t46 - t56 * t86 + t18, t14 * t56 + t15 * t55 + t20 * t40 + t3 * t80 + t5 * t81 + t6 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t108, -0.2e1 * t163, t100, t85, 0, 0, 0, 0.2e1 * t132, 0.2e1 * t192, 0.2e1 * t68, -0.2e1 * t79 * t174 + 0.2e1 * t52, -0.2e1 * t79 * t110 - 0.2e1 * t59 * t116, 0.2e1 * t103 * t68 + 0.2e1 * t79 * t59, -0.2e1 * t81 * t174 + 0.2e1 * t168, -0.2e1 * t64 * t110 - 0.2e1 * t40 * t116, -0.2e1 * t40 * t119 + 0.2e1 * t57, 0.2e1 * t64 * t40 + 0.2e1 * t81 * t55 + 0.2e1 * t80 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, -t46, 0, -t30, t29, t23, t16, t33, -t130, 0, t42 + (pkin(3) * t45 - t201) * t116 + (-t30 + (-pkin(3) * t87 - t200) * qJD(4)) * t119, pkin(3) * t131 + pkin(9) * t130 + t195, t1, t145 * t110 + t116 * t128 + t11 (-qJD(4) * t145 - t12) * t116 + t128 * t119, pkin(9) * t1 + t12 * t93 + t28 * t69 (-t45 * t94 + (-qJD(4) * t96 + t90) * t87) * t119 + (t45 * t96 - t87 * t89 + (-t87 * t94 - t15) * qJD(4)) * t116 + t170, t96 * t46 + t89 * t86 + t147 * t116 + (-t139 - t186) * t119, t116 * t139 + t119 * t147 - t94 * t46 - t90 * t86 + t18, t14 * t90 + t15 * t89 + t20 * t51 + t3 * t94 + t5 * t96 + t6 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, -t163, t100, t85, 0, 0, 0, t132 - t166, -t165 + t192, t68, t116 * t156 + t52 + t60 (-t59 - t69) * t116 + t119 * t156, pkin(9) * t68 + t59 * t93 + t79 * t69 (-t81 - t96) * t174 + t167 + t168, t194 * t116 + (-t64 - t77) * t110, t194 * t119 + t57 + t61, t40 * t77 + t64 * t51 + t55 * t96 + t56 * t94 + t80 * t90 + t81 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t85, 0, 0, 0, -0.2e1 * t166, -0.2e1 * t165, 0, -0.2e1 * t93 * t174 + 0.2e1 * t60, -0.2e1 * t93 * t110 - 0.2e1 * t69 * t116, 0.2e1 * t93 * t69, -0.2e1 * t96 * t174 + 0.2e1 * t167, -0.2e1 * t77 * t110 - 0.2e1 * t51 * t116, -0.2e1 * t51 * t119 + 0.2e1 * t61, 0.2e1 * t77 * t51 + 0.2e1 * t96 * t89 + 0.2e1 * t94 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, -t208, t46, -t154, t9 (pkin(4) * t45 - t87 * t178) * t119 + (t187 + (pkin(4) * qJD(4) - qJD(5)) * t87) * t116, t154 - 0.2e1 * t199, -t7 + t207, -t8 * pkin(4) - t7 * qJ(5) - t17 * qJD(5), -t133 * t45 + (-t173 - t119 * qJD(6) + (-t115 * t116 - t181) * qJD(4)) * t87, 0.2e1 * t41 + 0.2e1 * t78 + t124, 0.2e1 * t180 - t203 - 0.2e1 * t206, t5 * qJ(5) + t15 * qJD(5) - t14 * qJD(6) + t3 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, -t174, 0, -t63, t62, t205, t63, -t62 (-pkin(4) * t116 + t181) * t163 + t205 * t103, t58, t55, -t56, t55 * qJ(5) + t81 * qJD(5) - t80 * qJD(6) + t56 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, -t174, 0, -t107, t162, t205, t107, -t162, t205 * pkin(9), t58, t89, -t90, t89 * qJ(5) + t96 * qJD(5) - t94 * qJD(6) + t90 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0.2e1 * t177, 0, t122, 0.2e1 * qJD(6), -0.2e1 * t115 * qJD(6) + 0.2e1 * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, t46, 0, t8, -t131, 0, -t46, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, 0, 0, t63, t110, 0, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, 0, 0, t107, t110, 0, 0, t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, t46, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, 0, 0, t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, 0, 0, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t2;
