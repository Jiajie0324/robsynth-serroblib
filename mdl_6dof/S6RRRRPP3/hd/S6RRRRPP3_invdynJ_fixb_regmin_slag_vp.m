% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP3_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP3_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_invdynJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:56:34
% EndTime: 2019-03-09 20:56:51
% DurationCPUTime: 7.79s
% Computational Cost: add. (9923->603), mult. (21702->693), div. (0->0), fcn. (15371->10), ass. (0->314)
t243 = sin(qJ(2));
t246 = cos(qJ(2));
t430 = sin(qJ(3));
t339 = qJD(1) * t430;
t431 = cos(qJ(3));
t340 = qJD(1) * t431;
t161 = -t243 * t340 - t246 * t339;
t242 = sin(qJ(4));
t245 = cos(qJ(4));
t356 = qJD(2) + qJD(3);
t324 = t245 * t356;
t124 = -t161 * t242 - t324;
t285 = t245 * t161 - t242 * t356;
t390 = t285 * t124;
t281 = -t243 * t431 - t246 * t430;
t116 = t356 * t281;
t173 = t430 * t243 - t431 * t246;
t255 = qJD(1) * t116 - t173 * qJDD(1);
t80 = qJDD(4) - t255;
t457 = t80 + t390;
t360 = qJD(4) * t245;
t159 = t243 * t339 - t246 * t340;
t385 = t159 * t245;
t456 = t360 + t385;
t361 = qJD(4) * t242;
t386 = t159 * t242;
t455 = t361 + t386;
t418 = pkin(4) + qJ(6);
t346 = t418 * t80;
t240 = qJ(2) + qJ(3);
t234 = sin(t240);
t247 = cos(qJ(1));
t378 = t234 * t247;
t244 = sin(qJ(1));
t380 = t234 * t244;
t454 = -g(1) * t378 - g(2) * t380;
t248 = -pkin(8) - pkin(7);
t191 = t248 * t246;
t178 = qJD(1) * t191;
t165 = t431 * t178;
t189 = t248 * t243;
t176 = qJD(1) * t189;
t112 = t430 * t176 - t165;
t337 = qJD(3) * t430;
t303 = pkin(2) * t337 - t112;
t115 = t356 * t173;
t394 = t115 * t242;
t291 = t281 * t360 + t394;
t453 = qJD(4) * t285;
t420 = t246 * pkin(2);
t230 = pkin(1) + t420;
t187 = t230 * qJD(1);
t92 = pkin(3) * t159 + pkin(9) * t161 - t187;
t416 = qJD(2) * pkin(2);
t167 = t176 + t416;
t109 = t430 * t167 - t165;
t96 = pkin(9) * t356 + t109;
t60 = t242 * t96 - t245 * t92;
t300 = -pkin(5) * t285 + t60;
t369 = qJD(5) + t300;
t235 = cos(t240);
t452 = g(3) * t235 + t454;
t451 = pkin(9) * t281 - t230;
t153 = qJD(4) + t159;
t407 = t245 * t80;
t450 = pkin(9) * (t153 * t361 - t407);
t410 = t242 * t80;
t449 = pkin(9) * (t153 * t360 + t410);
t359 = qJD(1) * qJD(2);
t335 = t246 * t359;
t358 = t243 * qJDD(1);
t118 = qJDD(2) * pkin(2) - t248 * (-t335 - t358);
t336 = t243 * t359;
t357 = t246 * qJDD(1);
t123 = t248 * (-t336 + t357);
t338 = qJD(3) * t431;
t322 = -t431 * t118 - t430 * t123 + t167 * t337 - t178 * t338;
t355 = qJDD(2) + qJDD(3);
t49 = -pkin(3) * t355 + t322;
t164 = t430 * t178;
t108 = t167 * t431 + t164;
t95 = -pkin(3) * t356 - t108;
t448 = t49 * t242 + t95 * t360;
t138 = t153 * qJD(5);
t78 = t80 * qJ(5);
t447 = -t138 - t78;
t314 = -pkin(4) * t386 + qJ(5) * t385;
t446 = -t314 + t303;
t268 = qJ(5) * t285 + t95;
t32 = t124 * t418 + t268;
t257 = t115 * qJD(1);
t253 = -t281 * qJDD(1) - t257;
t58 = -qJD(4) * t324 - t161 * t361 - t242 * t355 - t245 * t253;
t261 = t58 * qJ(5) + qJD(5) * t285 + t49;
t59 = t242 * t253 - t245 * t355 - t453;
t5 = t124 * qJD(6) + t418 * t59 + t261;
t445 = -t245 * t5 + t32 * t361;
t444 = t49 * t245 - t95 * t361;
t325 = pkin(4) * t361 - qJD(5) * t242;
t443 = (-qJ(5) * qJD(4) - qJD(6)) * t245 + t325 + t455 * qJ(6);
t122 = t285 ^ 2;
t146 = t153 ^ 2;
t442 = -t122 - t146;
t128 = -t431 * t189 - t430 * t191;
t441 = -t235 * pkin(3) - t234 * pkin(9);
t440 = pkin(5) * t456 - t161 * t418;
t368 = qJD(5) + t60;
t43 = -pkin(4) * t153 + t368;
t61 = t242 * t92 + t245 * t96;
t44 = -qJ(5) * t153 - t61;
t439 = -t242 * t43 + t245 * t44;
t316 = g(1) * t247 + g(2) * t244;
t438 = -pkin(5) * t59 + qJDD(6);
t437 = t234 * t316;
t436 = 0.2e1 * t78;
t435 = t124 ^ 2;
t434 = pkin(4) * t80;
t433 = pkin(5) * t58;
t429 = pkin(2) * t243;
t428 = pkin(4) * t161;
t427 = pkin(5) * t124;
t424 = g(2) * t248;
t422 = g(3) * t246;
t221 = t234 * pkin(5);
t218 = pkin(2) * t336;
t33 = -pkin(3) * t255 + pkin(9) * t257 + qJDD(1) * t451 + t218;
t262 = t118 * t430 - t123 * t431 + t167 * t338 + t178 * t337;
t48 = pkin(9) * t355 + t262;
t333 = -t242 * t33 - t245 * t48 - t92 * t360 + t96 * t361;
t6 = t333 + t447;
t419 = t6 * t245;
t332 = t242 * t48 - t245 * t33 + t96 * t360 + t92 * t361;
t313 = -qJDD(5) - t332;
t8 = -t313 - t434;
t7 = t8 * t242;
t417 = qJ(5) * t59;
t12 = t59 * pkin(4) + t261;
t415 = t12 * t242;
t11 = t12 * t245;
t414 = t153 * t61;
t228 = pkin(2) * t430 + pkin(9);
t413 = t228 * t80;
t411 = t242 * t58;
t408 = t245 * t59;
t103 = -pkin(3) * t161 + pkin(9) * t159;
t405 = t242 * t103 + t245 * t108;
t113 = t176 * t431 + t164;
t362 = qJD(1) * t243;
t94 = pkin(2) * t362 + t103;
t404 = t245 * t113 + t242 * t94;
t403 = t443 + t446;
t66 = t314 + t109;
t402 = -t66 + t443;
t323 = pkin(2) * t338;
t308 = t245 * t323;
t147 = t161 * qJ(5);
t320 = pkin(5) * t386 - t147;
t401 = t308 + (-pkin(5) - t228) * t361 - t320 - t404;
t309 = t242 * t323;
t276 = t228 * t360 + t309;
t104 = t242 * t113;
t331 = -t245 * t94 + t104;
t400 = t276 - t331 + t440;
t152 = -qJ(5) * t360 + t325;
t399 = t152 + t446;
t398 = t152 - t66;
t397 = (-pkin(5) - pkin(9)) * t361 - t320 - t405;
t328 = t103 * t245 - t242 * t108;
t396 = pkin(9) * t360 + t328 + t440;
t395 = qJ(5) * t124;
t393 = t115 * t245;
t392 = t124 * t153;
t391 = t124 * t242;
t389 = t285 * t153;
t388 = t285 * t245;
t387 = t153 * t161;
t384 = t161 * t159;
t383 = t281 * t242;
t382 = t281 * t245;
t381 = t234 * t242;
t379 = t234 * t245;
t377 = t235 * t244;
t376 = t235 * t245;
t375 = t235 * t247;
t374 = t242 * qJ(5);
t373 = t242 * t244;
t372 = t244 * t245;
t371 = t245 * t247;
t370 = t247 * t242;
t35 = t61 - t427;
t367 = -qJD(6) - t35;
t107 = pkin(3) * t173 + t451;
t129 = t189 * t430 - t191 * t431;
t366 = t242 * t107 + t245 * t129;
t196 = pkin(9) * t377;
t365 = pkin(5) * t377 + t196;
t200 = pkin(9) * t375;
t364 = pkin(5) * t375 + t200;
t238 = t243 ^ 2;
t363 = -t246 ^ 2 + t238;
t354 = t431 * pkin(2);
t353 = t243 * t416;
t53 = t124 * pkin(4) + t268;
t352 = t53 * t361;
t351 = t53 * t360;
t350 = t452 * t242;
t349 = g(3) * t376 + t245 * t454;
t348 = g(1) * t375 + g(2) * t377 + g(3) * t234;
t347 = qJD(2) * t248;
t342 = t281 * t361;
t334 = -pkin(3) - t374;
t148 = t235 * t373 + t371;
t149 = t235 * t372 - t370;
t330 = -t148 * pkin(4) + qJ(5) * t149;
t150 = t235 * t370 - t372;
t151 = t235 * t371 + t373;
t329 = -t150 * pkin(4) + qJ(5) * t151;
t119 = t242 * t129;
t327 = t107 * t245 - t119;
t326 = t153 * t245;
t321 = pkin(4) * t376 + t235 * t374 - t441;
t319 = g(1) * t380 - g(2) * t378;
t318 = g(1) * t148 - g(2) * t150;
t317 = g(1) * t149 - g(2) * t151;
t315 = g(1) * t244 - g(2) * t247;
t63 = -qJ(5) * t173 - t366;
t311 = t95 * t159 - t413;
t310 = t242 * t44 + t245 * t43;
t307 = -qJD(4) * t53 + t413;
t306 = -qJ(5) * t245 + qJ(6) * t242;
t71 = -pkin(3) * t116 + pkin(9) * t115 + t353;
t177 = t243 * t347;
t179 = t246 * t347;
t75 = -qJD(3) * t128 + t431 * t177 + t430 * t179;
t305 = -t107 * t361 - t129 * t360 - t242 * t75 + t245 * t71;
t304 = t43 * t360 + t44 * t361 - t348 + t7;
t302 = t245 * pkin(4) - t334;
t301 = -t230 + t441;
t299 = -pkin(4) * t383 + t128;
t298 = t242 * t5 + t32 * t360;
t296 = qJ(6) * t376 + t221 + t321;
t295 = -0.2e1 * pkin(1) * t359 - pkin(7) * qJDD(2);
t292 = -t149 * pkin(4) - qJ(5) * t148 - t247 * t248;
t290 = t342 - t393;
t289 = t107 * t360 - t129 * t361 + t242 * t71 + t245 * t75;
t288 = pkin(3) * t375 + t151 * pkin(4) + pkin(9) * t378 + qJ(5) * t150 + t247 * t230;
t76 = t430 * t177 - t179 * t431 + t189 * t337 - t191 * t338;
t284 = t245 * t418 - t334;
t283 = t43 * t161 - t53 * t386 + t11 + t349;
t282 = -t61 * t161 + t350 + t448;
t280 = -t44 * t161 - t53 * t385 - t350 - t415;
t279 = -t60 * t161 - t349 - t444;
t278 = g(1) * t150 + g(2) * t148 + g(3) * t381 - t332;
t26 = -t58 + t392;
t275 = -t228 * t361 + t308;
t249 = qJD(2) ^ 2;
t274 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t249 + t315;
t250 = qJD(1) ^ 2;
t273 = pkin(1) * t250 - pkin(7) * qJDD(1) + t316;
t272 = -pkin(4) * t291 - qJ(5) * t342 + t76;
t271 = -qJDD(5) + t278;
t270 = -t187 * t161 - t322 - t452;
t269 = g(1) * t151 + g(2) * t149 + g(3) * t379 + t333;
t15 = qJ(5) * t116 - qJD(5) * t173 - t289;
t267 = qJD(4) * t310 - t419 + t7;
t21 = -t153 * t418 + t369;
t266 = -t161 * t21 + t32 * t386 - t349 + t445;
t25 = qJD(6) - t44 - t427;
t265 = t161 * t25 - t32 * t385 - t298 - t350;
t264 = -t285 * t53 - t271;
t2 = -qJD(6) * t153 - t313 - t346 - t433;
t4 = -t6 + t438;
t263 = t2 * t242 + t21 * t456 + t4 * t245 - t455 * t25 - t348;
t260 = -t285 * t32 - t271 - t433;
t259 = -t124 * t32 - t269 + t438;
t258 = -t187 * t159 - t262 + t348;
t256 = t284 * t437;
t254 = -g(1) * t200 - g(2) * t196 - g(3) * t321 + t302 * t437;
t251 = -t59 - t389;
t237 = t245 * pkin(5);
t236 = t242 * pkin(5);
t229 = -t354 - pkin(3);
t192 = qJ(5) * t379;
t190 = pkin(9) * t245 + t237;
t188 = pkin(9) * t242 + t236;
t170 = t228 * t245 + t237;
t169 = t228 * t242 + t236;
t168 = -t354 - t302;
t156 = -t230 * qJDD(1) + t218;
t137 = -t354 - t284;
t82 = -t159 ^ 2 + t161 ^ 2;
t77 = -pkin(4) * t285 + t395;
t74 = qJ(5) * t382 + t299;
t70 = -t161 * t356 + t255;
t69 = t159 * t356 + t253;
t65 = -t281 * t306 + t299;
t64 = -pkin(4) * t173 - t327;
t62 = -t285 * t418 + t395;
t56 = -t328 + t428;
t55 = t147 - t405;
t52 = t331 + t428;
t51 = t147 - t404;
t50 = pkin(5) * t383 - t63;
t42 = t119 + (-pkin(5) * t281 - t107) * t245 - t418 * t173;
t23 = t153 * t326 - t161 * t285 + t410;
t22 = -t124 * t161 - t146 * t242 + t407;
t18 = -t285 * t326 - t411;
t17 = (qJ(5) * t115 + qJD(5) * t281) * t245 + t272;
t16 = pkin(4) * t116 - t305;
t14 = -t306 * t115 - (qJD(6) * t242 + (qJ(6) * qJD(4) - qJD(5)) * t245) * t281 + t272;
t13 = pkin(5) * t291 - t15;
t10 = pkin(5) * t290 - qJD(6) * t173 + t116 * t418 - t305;
t9 = (-t58 - t392) * t245 + (-t59 + t389) * t242;
t1 = [qJDD(1), t315, t316, qJDD(1) * t238 + 0.2e1 * t243 * t335, 0.2e1 * t243 * t357 - 0.2e1 * t359 * t363, qJDD(2) * t243 + t246 * t249, qJDD(2) * t246 - t243 * t249, 0, t243 * t295 + t246 * t274, -t243 * t274 + t246 * t295, t161 * t115 - t253 * t281, t115 * t159 - t161 * t116 - t173 * t253 - t255 * t281, -t115 * t356 - t281 * t355, t116 * t356 - t173 * t355, 0, t187 * t116 - t128 * t355 + t156 * t173 + t159 * t353 + t230 * t255 + t235 * t315 - t356 * t76, t187 * t115 - t129 * t355 - t156 * t281 - t161 * t353 - t230 * t253 - t356 * t75 - t319, -t285 * t290 + t382 * t58 -(-t124 * t245 + t242 * t285) * t115 - (t411 - t408 + (t388 + t391) * qJD(4)) * t281, t116 * t285 + t153 * t290 - t173 * t58 - t382 * t80, t116 * t124 + t153 * t291 - t173 * t59 + t383 * t80, -t116 * t153 + t173 * t80, t60 * t116 + t76 * t124 + t128 * t59 + t305 * t153 - t332 * t173 - t281 * t448 + t327 * t80 - t95 * t394 + t317, t61 * t116 - t128 * t58 - t289 * t153 + t333 * t173 - t281 * t444 - t285 * t76 - t366 * t80 - t95 * t393 - t318, t124 * t15 - t285 * t16 - t58 * t64 + t59 * t63 - t310 * t115 - (qJD(4) * t439 + t242 * t6 + t245 * t8) * t281 + t319, t53 * t394 - t116 * t43 - t124 * t17 + t153 * t16 + t173 * t8 - t59 * t74 + t64 * t80 - (-t351 - t415) * t281 - t317, t53 * t393 + t116 * t44 + t285 * t17 - t15 * t153 - t173 * t6 + t58 * t74 - t63 * t80 - (t352 - t11) * t281 + t318, t12 * t74 + t53 * t17 + t6 * t63 + t44 * t15 + t8 * t64 + t43 * t16 - g(1) * t292 - g(2) * t288 + (-g(1) * t301 + t424) * t244, -t10 * t285 - t124 * t13 - t42 * t58 - t50 * t59 - (t21 * t245 - t242 * t25) * t115 - (t2 * t245 - t242 * t4 + (-t21 * t242 - t245 * t25) * qJD(4)) * t281 + t319, -t116 * t25 + t13 * t153 + t14 * t285 + t173 * t4 - t281 * t445 + t32 * t393 + t50 * t80 + t58 * t65 + t318, -t10 * t153 + t116 * t21 + t124 * t14 - t173 * t2 - t281 * t298 - t32 * t394 - t42 * t80 + t59 * t65 + t317, t5 * t65 + t32 * t14 + t2 * t42 + t21 * t10 + t4 * t50 + t25 * t13 - g(1) * (-qJ(6) * t149 + t292) - g(2) * (pkin(5) * t378 + qJ(6) * t151 + t288) + (-g(1) * (t301 - t221) + t424) * t244; 0, 0, 0, -t243 * t250 * t246, t363 * t250, t358, t357, qJDD(2), t243 * t273 - t422, g(3) * t243 + t246 * t273, -t384, t82, t69, t70, t355, t112 * t356 + (-t159 * t362 - t337 * t356 + t355 * t431) * pkin(2) + t270, t113 * t356 + (t161 * t362 - t338 * t356 - t355 * t430) * pkin(2) + t258, t18, t9, t23, t22, t387, t229 * t59 + t311 * t242 + t303 * t124 + (-t309 + t104 + (-qJD(4) * t228 - t94) * t245) * t153 + t279, -t229 * t58 + t311 * t245 - t303 * t285 + (-t275 + t404) * t153 + t282, -t51 * t124 + t52 * t285 + (-t285 * t323 + t159 * t44 + (qJD(4) * t124 - t58) * t228) * t242 + (-t124 * t323 + t159 * t43 - t6 + (-t59 - t453) * t228) * t245 + t304, -t168 * t59 + t307 * t242 - t399 * t124 + (-t52 + t276) * t153 + t283, t168 * t58 + t307 * t245 + t399 * t285 + (t51 + t275) * t153 + t280, t12 * t168 - t44 * t51 - t43 * t52 + t399 * t53 + (t316 * t243 - t338 * t439 - t422) * pkin(2) + t267 * t228 + t254, -t124 * t401 - t169 * t58 - t170 * t59 - t285 * t400 + t263, t137 * t58 + t153 * t401 + t170 * t80 + t285 * t403 + t265, t124 * t403 + t137 * t59 - t153 * t400 - t169 * t80 + t266, t5 * t137 + t2 * t169 + t4 * t170 - g(1) * (-t247 * t429 + t364) - g(2) * (-t244 * t429 + t365) - g(3) * (t296 + t420) + t403 * t32 + t401 * t25 + t400 * t21 + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t384, t82, t69, t70, t355, t109 * t356 + t270, t108 * t356 + t258, t18, t9, t23, t22, t387, -pkin(3) * t59 - t109 * t124 - t153 * t328 + t386 * t95 + t279 - t449, pkin(3) * t58 + t109 * t285 + t153 * t405 + t385 * t95 + t282 + t450, -t124 * t55 + t285 * t56 - t419 + t310 * t159 + (-t411 - t408 + (-t388 + t391) * qJD(4)) * pkin(9) + t304, -t124 * t398 - t153 * t56 + t302 * t59 + t283 - t352 + t449, t153 * t55 + t285 * t398 - t302 * t58 + t280 - t351 - t450, pkin(9) * t267 - t12 * t302 + t398 * t53 - t43 * t56 - t44 * t55 + t254, -t124 * t397 - t188 * t58 - t190 * t59 - t285 * t396 + t263, t153 * t397 + t190 * t80 - t284 * t58 + t285 * t402 + t265, t124 * t402 - t153 * t396 - t188 * t80 - t284 * t59 + t266, -g(1) * t364 - g(2) * t365 - g(3) * t296 + t2 * t188 + t4 * t190 + t21 * t396 + t25 * t397 - t284 * t5 + t32 * t402 + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t390, t122 - t435, t26, t251, t80, t285 * t95 + t278 + t414, t124 * t95 - t153 * t60 + t269, pkin(4) * t58 - t417 - (-t44 - t61) * t285 + (t43 - t368) * t124, t124 * t77 + t264 - t414 - 0.2e1 * t434, -t124 * t53 + t153 * t368 - t285 * t77 + t138 - t269 + t436, -t6 * qJ(5) - t8 * pkin(4) - t53 * t77 - t43 * t61 - g(1) * t329 - g(2) * t330 - g(3) * (-pkin(4) * t381 + t192) - t368 * t44, -t417 + t418 * t58 - (t25 + t367) * t285 + (t21 - t369) * t124, t153 * t300 - t285 * t62 + 0.2e1 * t138 + t259 + t436, -t124 * t62 + (0.2e1 * qJD(6) + t35) * t153 + 0.2e1 * t346 - t260, -t2 * t418 + t4 * qJ(5) - t32 * t62 - g(1) * (-qJ(6) * t150 + t329) - g(2) * (-qJ(6) * t148 + t330) - g(3) * (-t381 * t418 + t192) + t369 * t25 + t367 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t457, t442, t153 * t44 + t264 - t434, t26, t442, -t457, -t346 + (-qJD(6) - t25) * t153 + t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, t80 - t390, -t146 - t435, t153 * t21 + t259 - t447;];
tau_reg  = t1;
