% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:12:53
% EndTime: 2019-05-07 18:13:01
% DurationCPUTime: 8.54s
% Computational Cost: add. (21060->308), mult. (42835->339), div. (0->0), fcn. (30754->8), ass. (0->203)
t2428 = sin(qJ(3));
t2429 = sin(qJ(2));
t2432 = cos(qJ(3));
t2433 = cos(qJ(2));
t2400 = (t2428 * t2433 + t2429 * t2432) * qJD(1);
t2424 = qJD(2) + qJD(3);
t2427 = sin(qJ(4));
t2431 = cos(qJ(4));
t2379 = t2427 * t2400 - t2424 * t2431;
t2477 = qJD(1) * t2433;
t2478 = qJD(1) * t2429;
t2398 = t2428 * t2478 - t2432 * t2477;
t2397 = qJD(4) + t2398;
t2367 = t2379 * t2397;
t2456 = qJD(2) * t2477;
t2461 = t2429 * qJDD(1);
t2405 = t2456 + t2461;
t2457 = qJD(2) * t2478;
t2460 = t2433 * qJDD(1);
t2449 = t2457 - t2460;
t2442 = -t2432 * t2405 + t2428 * t2449;
t2360 = -t2398 * qJD(3) - t2442;
t2459 = qJDD(2) + qJDD(3);
t2448 = t2431 * t2360 + t2427 * t2459;
t2445 = -t2379 * qJD(4) + t2448;
t2491 = t2367 - t2445;
t2452 = t2428 * t2405 + t2432 * t2449;
t2447 = t2400 * qJD(3) + qJDD(4) + t2452;
t2381 = t2400 * t2431 + t2424 * t2427;
t2468 = t2381 * t2379;
t2324 = t2447 + t2468;
t2378 = t2381 ^ 2;
t2483 = t2397 ^ 2;
t2337 = t2483 + t2378;
t2302 = -t2431 * t2324 + t2337 * t2427;
t2501 = t2302 * t2432;
t2270 = t2428 * t2491 - t2501;
t2503 = t2302 * t2428;
t2274 = t2432 * t2491 + t2503;
t2245 = t2270 * t2433 + t2274 * t2429;
t2430 = sin(qJ(1));
t2434 = cos(qJ(1));
t2489 = t2324 * t2427 + t2337 * t2431;
t2500 = t2434 * t2489;
t2521 = t2245 * t2430 - t2500;
t2502 = t2430 * t2489;
t2520 = t2245 * t2434 + t2502;
t2366 = t2397 * t2381;
t2453 = t2427 * t2360 - t2431 * t2459;
t2450 = qJD(4) * t2381 + t2453;
t2488 = t2366 + t2450;
t2484 = t2468 - t2447;
t2377 = t2379 ^ 2;
t2485 = -t2377 - t2483;
t2499 = t2484 * t2427 + t2485 * t2431;
t2509 = t2428 * t2499;
t2275 = -t2432 * t2488 + t2509;
t2507 = t2432 * t2499;
t2278 = t2428 * t2488 + t2507;
t2247 = t2275 * t2429 - t2278 * t2433;
t2498 = t2485 * t2427 - t2484 * t2431;
t2506 = t2434 * t2498;
t2519 = t2247 * t2430 + t2506;
t2508 = t2430 * t2498;
t2518 = t2247 * t2434 - t2508;
t2242 = t2270 * t2429 - t2274 * t2433;
t2314 = (-qJD(4) + t2397) * t2381 - t2453;
t2316 = t2445 + t2367;
t2474 = t2316 * t2431;
t2504 = t2314 * t2427 - t2474;
t2486 = -t2377 - t2378;
t2497 = t2428 * t2486;
t2475 = t2316 * t2427;
t2505 = t2431 * t2314 + t2475;
t2510 = t2432 * t2505 + t2497;
t2494 = t2432 * t2486;
t2511 = t2428 * t2505 - t2494;
t2515 = -t2429 * t2511 + t2433 * t2510;
t2517 = t2430 * t2515 - t2434 * t2504;
t2516 = t2430 * t2504 + t2434 * t2515;
t2250 = t2275 * t2433 + t2278 * t2429;
t2514 = t2429 * t2510 + t2433 * t2511;
t2426 = t2433 ^ 2;
t2435 = qJD(2) ^ 2;
t2436 = qJD(1) ^ 2;
t2416 = -t2426 * t2436 - t2435;
t2413 = t2430 * g(1) - t2434 * g(2);
t2451 = qJDD(1) * pkin(1) + t2413;
t2362 = (pkin(8) * t2426 + pkin(7)) * t2436 - t2449 * pkin(2) - (qJD(2) * pkin(2) - pkin(8) * t2478) * t2478 + t2451;
t2482 = t2398 ^ 2;
t2481 = t2400 ^ 2;
t2480 = t2424 ^ 2;
t2479 = 2 * qJD(5);
t2467 = t2398 * t2400;
t2465 = t2429 * t2436;
t2464 = qJD(3) - t2424;
t2463 = qJD(4) + t2397;
t2414 = -g(1) * t2434 - g(2) * t2430;
t2446 = -pkin(1) * t2436 + qJDD(1) * pkin(7) + t2414;
t2389 = -t2429 * g(3) + t2433 * t2446;
t2354 = pkin(2) * t2416 + pkin(8) * t2460 + t2389;
t2443 = t2429 * t2446;
t2439 = -t2443 - t2405 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2465 - g(3)) * t2433;
t2322 = t2432 * t2354 + t2428 * t2439;
t2425 = t2429 ^ 2;
t2462 = t2425 + t2426;
t2455 = pkin(4) * t2397 - (2 * qJD(5));
t2373 = pkin(3) * t2398 - pkin(9) * t2400;
t2297 = -pkin(3) * t2480 + pkin(9) * t2459 - t2398 * t2373 + t2322;
t2338 = (qJD(3) + t2424) * t2400 + t2452;
t2454 = t2424 * t2398 - t2360;
t2438 = pkin(3) * t2338 + pkin(9) * t2454 - t2362;
t2259 = -t2427 * t2297 + t2431 * t2438;
t2321 = -t2428 * t2354 + t2432 * t2439;
t2296 = -t2459 * pkin(3) - t2480 * pkin(9) + t2400 * t2373 - t2321;
t2350 = pkin(4) * t2379 - qJ(5) * t2381;
t2255 = -t2447 * pkin(4) - t2483 * qJ(5) + t2381 * t2350 + qJDD(5) - t2259;
t2441 = t2450 * pkin(4) + qJ(5) * t2491 + t2296;
t2260 = t2431 * t2297 + t2427 * t2438;
t2437 = -t2483 * pkin(4) + qJ(5) * t2447 - t2379 * t2350 + t2260;
t2418 = t2433 * t2465;
t2415 = -t2425 * t2436 - t2435;
t2412 = -qJDD(2) + t2418;
t2411 = qJDD(2) + t2418;
t2410 = t2462 * t2436;
t2409 = -qJDD(1) * t2430 - t2434 * t2436;
t2408 = qJDD(1) * t2434 - t2430 * t2436;
t2407 = t2462 * qJDD(1);
t2406 = -0.2e1 * t2457 + t2460;
t2404 = 0.2e1 * t2456 + t2461;
t2401 = t2436 * pkin(7) + t2451;
t2388 = -t2433 * g(3) - t2443;
t2387 = -t2480 - t2481;
t2386 = t2412 * t2433 - t2415 * t2429;
t2385 = -t2411 * t2429 + t2416 * t2433;
t2384 = t2412 * t2429 + t2415 * t2433;
t2383 = t2411 * t2433 + t2416 * t2429;
t2372 = -t2459 - t2467;
t2371 = t2459 - t2467;
t2370 = -t2480 - t2482;
t2363 = pkin(5) * t2381 - qJ(6) * t2397;
t2361 = -t2481 - t2482;
t2353 = -t2388 * t2429 + t2389 * t2433;
t2352 = t2388 * t2433 + t2389 * t2429;
t2343 = t2372 * t2432 - t2387 * t2428;
t2342 = t2372 * t2428 + t2387 * t2432;
t2341 = t2398 * t2464 + t2442;
t2339 = -t2400 * t2464 - t2452;
t2335 = t2370 * t2432 - t2371 * t2428;
t2334 = t2370 * t2428 + t2371 * t2432;
t2318 = -t2379 * t2463 + t2448;
t2315 = t2366 - t2450;
t2311 = t2381 * t2463 + t2453;
t2309 = -t2342 * t2429 + t2343 * t2433;
t2308 = t2342 * t2433 + t2343 * t2429;
t2307 = t2339 * t2432 - t2341 * t2428;
t2306 = t2339 * t2428 + t2341 * t2432;
t2305 = -t2334 * t2429 + t2335 * t2433;
t2304 = t2334 * t2433 + t2335 * t2429;
t2288 = -t2321 * t2428 + t2322 * t2432;
t2287 = t2321 * t2432 + t2322 * t2428;
t2286 = t2315 * t2431 + t2475;
t2283 = t2315 * t2427 - t2474;
t2280 = -t2306 * t2429 + t2307 * t2433;
t2279 = t2306 * t2433 + t2307 * t2429;
t2276 = -t2318 * t2428 - t2501;
t2273 = t2318 * t2432 - t2503;
t2271 = t2311 * t2428 + t2507;
t2268 = -t2311 * t2432 + t2509;
t2266 = t2286 * t2432 + t2497;
t2263 = t2286 * t2428 - t2494;
t2258 = t2381 * t2455 + t2441;
t2257 = -t2287 * t2429 + t2288 * t2433;
t2256 = t2287 * t2433 + t2288 * t2429;
t2254 = t2397 * t2479 + t2437;
t2251 = -t2273 * t2429 + t2276 * t2433;
t2248 = t2273 * t2433 + t2276 * t2429;
t2246 = -t2268 * t2429 + t2271 * t2433;
t2243 = t2268 * t2433 + t2271 * t2429;
t2241 = -t2377 * pkin(5) + t2453 * qJ(6) + 0.2e1 * qJD(6) * t2379 + (qJ(6) * qJD(4) - t2363 + t2455) * t2381 + t2441;
t2240 = -t2263 * t2429 + t2266 * t2433;
t2237 = t2263 * t2433 + t2266 * t2429;
t2234 = -t2377 * qJ(6) - t2450 * pkin(5) + qJDD(6) + (t2479 + t2363) * t2397 + t2437;
t2233 = -t2259 * t2427 + t2260 * t2431;
t2232 = t2259 * t2431 + t2260 * t2427;
t2231 = t2445 * pkin(5) + (pkin(5) * t2379 - 0.2e1 * qJD(6)) * t2397 + t2255 + t2484 * qJ(6);
t2230 = t2233 * t2432 + t2296 * t2428;
t2229 = t2233 * t2428 - t2296 * t2432;
t2228 = t2254 * t2431 + t2255 * t2427;
t2227 = t2254 * t2427 - t2255 * t2431;
t2226 = t2231 * t2427 + t2234 * t2431;
t2225 = -t2231 * t2431 + t2234 * t2427;
t2224 = t2228 * t2432 + t2258 * t2428;
t2223 = t2228 * t2428 - t2258 * t2432;
t2222 = -t2229 * t2429 + t2230 * t2433;
t2221 = t2229 * t2433 + t2230 * t2429;
t2220 = t2226 * t2432 + t2241 * t2428;
t2219 = t2226 * t2428 - t2241 * t2432;
t2218 = -t2223 * t2429 + t2224 * t2433;
t2217 = t2223 * t2433 + t2224 * t2429;
t2216 = -t2219 * t2429 + t2220 * t2433;
t2215 = t2219 * t2433 + t2220 * t2429;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2409, -t2408, 0, -t2413 * t2430 + t2414 * t2434, 0, 0, 0, 0, 0, 0, t2385 * t2434 - t2406 * t2430, t2386 * t2434 + t2404 * t2430, t2407 * t2434 - t2410 * t2430, t2353 * t2434 - t2401 * t2430, 0, 0, 0, 0, 0, 0, t2305 * t2434 + t2338 * t2430, t2309 * t2434 - t2430 * t2454, t2280 * t2434 + t2361 * t2430, t2257 * t2434 - t2362 * t2430, 0, 0, 0, 0, 0, 0, t2246 * t2434 + t2508, -t2520, t2240 * t2434 + t2283 * t2430, t2222 * t2434 + t2232 * t2430, 0, 0, 0, 0, 0, 0, t2516, t2518, t2251 * t2434 + t2502, t2218 * t2434 + t2227 * t2430, 0, 0, 0, 0, 0, 0, t2516, t2520, -t2518, t2216 * t2434 + t2225 * t2430; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2408, t2409, 0, t2413 * t2434 + t2414 * t2430, 0, 0, 0, 0, 0, 0, t2385 * t2430 + t2406 * t2434, t2386 * t2430 - t2404 * t2434, t2407 * t2430 + t2410 * t2434, t2353 * t2430 + t2401 * t2434, 0, 0, 0, 0, 0, 0, t2305 * t2430 - t2338 * t2434, t2309 * t2430 + t2434 * t2454, t2280 * t2430 - t2361 * t2434, t2257 * t2430 + t2362 * t2434, 0, 0, 0, 0, 0, 0, t2246 * t2430 - t2506, -t2521, t2240 * t2430 - t2283 * t2434, t2222 * t2430 - t2232 * t2434, 0, 0, 0, 0, 0, 0, t2517, t2519, t2251 * t2430 - t2500, t2218 * t2430 - t2227 * t2434, 0, 0, 0, 0, 0, 0, t2517, t2521, -t2519, t2216 * t2430 - t2225 * t2434; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2383, t2384, 0, t2352, 0, 0, 0, 0, 0, 0, t2304, t2308, t2279, t2256, 0, 0, 0, 0, 0, 0, t2243, -t2242, t2237, t2221, 0, 0, 0, 0, 0, 0, t2514, -t2250, t2248, t2217, 0, 0, 0, 0, 0, 0, t2514, t2242, t2250, t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2436, -qJDD(1), 0, t2414, 0, 0, 0, 0, 0, 0, t2385, t2386, t2407, t2353, 0, 0, 0, 0, 0, 0, t2305, t2309, t2280, t2257, 0, 0, 0, 0, 0, 0, t2246, -t2245, t2240, t2222, 0, 0, 0, 0, 0, 0, t2515, t2247, t2251, t2218, 0, 0, 0, 0, 0, 0, t2515, t2245, -t2247, t2216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2436, 0, t2413, 0, 0, 0, 0, 0, 0, t2406, -t2404, t2410, t2401, 0, 0, 0, 0, 0, 0, -t2338, t2454, -t2361, t2362, 0, 0, 0, 0, 0, 0, -t2498, t2489, -t2283, -t2232, 0, 0, 0, 0, 0, 0, -t2504, t2498, -t2489, -t2227, 0, 0, 0, 0, 0, 0, -t2504, -t2489, -t2498, -t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2383, t2384, 0, t2352, 0, 0, 0, 0, 0, 0, t2304, t2308, t2279, t2256, 0, 0, 0, 0, 0, 0, t2243, -t2242, t2237, t2221, 0, 0, 0, 0, 0, 0, t2514, -t2250, t2248, t2217, 0, 0, 0, 0, 0, 0, t2514, t2242, t2250, t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2416, t2412, t2460, t2389, 0, 0, 0, 0, 0, 0, t2335, t2343, t2307, t2288, 0, 0, 0, 0, 0, 0, t2271, -t2270, t2266, t2230, 0, 0, 0, 0, 0, 0, t2510, -t2278, t2276, t2224, 0, 0, 0, 0, 0, 0, t2510, t2270, t2278, t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2415, -t2461, t2388, 0, 0, 0, 0, 0, 0, t2334, t2342, t2306, t2287, 0, 0, 0, 0, 0, 0, t2268, t2274, t2263, t2229, 0, 0, 0, 0, 0, 0, t2511, -t2275, t2273, t2223, 0, 0, 0, 0, 0, 0, t2511, -t2274, t2275, t2219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2406, t2404, -t2410, -t2401, 0, 0, 0, 0, 0, 0, t2338, -t2454, t2361, -t2362, 0, 0, 0, 0, 0, 0, t2498, -t2489, t2283, t2232, 0, 0, 0, 0, 0, 0, t2504, -t2498, t2489, t2227, 0, 0, 0, 0, 0, 0, t2504, t2489, t2498, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2370, t2372, t2339, t2322, 0, 0, 0, 0, 0, 0, t2499, t2302, t2286, t2233, 0, 0, 0, 0, 0, 0, t2505, -t2499, -t2302, t2228, 0, 0, 0, 0, 0, 0, t2505, -t2302, t2499, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2371, t2387, t2341, t2321, 0, 0, 0, 0, 0, 0, -t2311, t2491, -t2486, -t2296, 0, 0, 0, 0, 0, 0, -t2486, t2488, t2318, -t2258, 0, 0, 0, 0, 0, 0, -t2486, -t2491, -t2488, -t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2338, -t2454, t2361, -t2362, 0, 0, 0, 0, 0, 0, t2498, -t2489, t2283, t2232, 0, 0, 0, 0, 0, 0, t2504, -t2498, t2489, t2227, 0, 0, 0, 0, 0, 0, t2504, t2489, t2498, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2485, -t2324, t2315, t2260, 0, 0, 0, 0, 0, 0, t2314, -t2485, t2324, t2254, 0, 0, 0, 0, 0, 0, t2314, t2324, t2485, t2234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2484, -t2337, -t2316, t2259, 0, 0, 0, 0, 0, 0, -t2316, t2484, t2337, -t2255, 0, 0, 0, 0, 0, 0, -t2316, t2337, -t2484, -t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2311, -t2491, t2486, t2296, 0, 0, 0, 0, 0, 0, t2486, -t2488, -t2318, t2258, 0, 0, 0, 0, 0, 0, t2486, t2491, t2488, t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2486, -t2488, -t2318, t2258, 0, 0, 0, 0, 0, 0, t2486, t2491, t2488, t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2314, t2485, -t2324, -t2254, 0, 0, 0, 0, 0, 0, -t2314, -t2324, -t2485, -t2234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2316, -t2484, -t2337, t2255, 0, 0, 0, 0, 0, 0, t2316, -t2337, t2484, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2486, t2491, t2488, t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2316, -t2337, t2484, t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2314, t2324, t2485, t2234;];
f_new_reg  = t1;
