% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPP3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:11:00
% EndTime: 2019-05-07 18:11:24
% DurationCPUTime: 11.83s
% Computational Cost: add. (26205->510), mult. (52983->612), div. (0->0), fcn. (37761->8), ass. (0->326)
t325 = sin(qJ(2));
t329 = cos(qJ(2));
t323 = sin(qJ(4));
t324 = sin(qJ(3));
t328 = cos(qJ(3));
t301 = (t324 * t329 + t325 * t328) * qJD(1);
t316 = t325 * qJDD(1);
t389 = qJD(1) * qJD(2);
t378 = t329 * t389;
t306 = t316 + t378;
t379 = t325 * t389;
t388 = t329 * qJDD(1);
t352 = -t379 + t388;
t368 = t324 * t306 - t328 * t352;
t249 = -qJD(3) * t301 - t368;
t245 = qJDD(4) - t249;
t320 = qJD(2) + qJD(3);
t327 = cos(qJ(4));
t280 = t301 * t323 - t327 * t320;
t282 = t301 * t327 + t320 * t323;
t405 = t282 * t280;
t190 = t405 - t245;
t415 = t190 * t327;
t395 = qJD(1) * t325;
t299 = -t328 * t329 * qJD(1) + t324 * t395;
t296 = qJD(4) + t299;
t295 = t296 ^ 2;
t448 = t280 ^ 2;
t459 = -t295 - t448;
t476 = t459 * t323 - t415;
t498 = pkin(1) * t476;
t342 = t328 * t306 + t324 * t352;
t250 = -t299 * qJD(3) + t342;
t387 = qJDD(2) + qJDD(3);
t370 = t323 * t250 - t327 * t387;
t205 = qJD(4) * t282 + t370;
t261 = t296 * t282;
t462 = t205 + t261;
t416 = t190 * t323;
t477 = t459 * t327 + t416;
t493 = t324 * t477;
t79 = t328 * t462 - t493;
t492 = t328 * t477;
t88 = t324 * t462 + t492;
t540 = pkin(7) * (t325 * t79 + t329 * t88) - t498;
t539 = pkin(2) * t79;
t538 = pkin(8) * t79;
t497 = pkin(2) * t476;
t537 = pkin(8) * t88 - t497;
t447 = t282 ^ 2;
t454 = -t447 - t295;
t456 = t405 + t245;
t464 = t456 * t323;
t488 = -t327 * t454 + t464;
t515 = pkin(1) * t488;
t351 = t327 * t250 + t323 * t387;
t390 = qJD(4) + t296;
t179 = t280 * t390 - t351;
t467 = t327 * t456;
t487 = t323 * t454 + t467;
t506 = t324 * t487;
t83 = -t179 * t328 + t506;
t505 = t328 * t487;
t86 = t179 * t324 + t505;
t535 = -pkin(7) * (t325 * t83 - t329 * t86) - t515;
t534 = pkin(2) * t83;
t533 = pkin(8) * t83;
t494 = pkin(9) * t477;
t532 = pkin(3) * t462 - t494;
t513 = pkin(2) * t488;
t531 = pkin(8) * t86 - t513;
t173 = (-qJD(4) + t296) * t282 - t370;
t257 = t448 - t295;
t146 = t257 * t327 - t464;
t524 = t146 * t328;
t525 = t146 * t324;
t529 = t325 * (t173 * t324 + t524) + t329 * (-t173 * t328 + t525);
t258 = -t447 + t295;
t143 = t258 * t323 + t415;
t345 = -t280 * qJD(4) + t351;
t406 = t280 * t296;
t175 = t406 + t345;
t528 = t325 * (t143 * t328 - t175 * t324) + t329 * (t143 * t324 + t175 * t328);
t212 = t447 + t448;
t480 = t212 * t328;
t425 = t175 * t323;
t491 = t327 * t173 + t425;
t500 = t324 * t491 + t480;
t527 = pkin(2) * t500;
t496 = pkin(3) * t476;
t526 = pkin(8) * t500;
t495 = pkin(9) * t476;
t424 = t175 * t327;
t489 = t173 * t323 - t424;
t481 = t212 * t324;
t499 = t328 * t491 - t481;
t523 = -pkin(2) * t489 + pkin(8) * t499;
t169 = t282 * t390 + t370;
t455 = -t406 + t345;
t423 = t455 * t323;
t101 = -t169 * t327 - t423;
t231 = t448 - t447;
t478 = t231 * t328;
t479 = t231 * t324;
t518 = t325 * (t101 * t328 - t479) + t329 * (t101 * t324 + t478);
t517 = pkin(7) * (-t325 * t500 + t329 * t499) - pkin(1) * t489;
t511 = pkin(3) * t488;
t510 = pkin(3) * t489;
t509 = pkin(9) * t487;
t508 = pkin(9) * t488;
t507 = pkin(9) * t489;
t393 = qJD(5) * t296;
t504 = -0.2e1 * t393 - t511;
t486 = pkin(3) * t212;
t503 = pkin(9) * t491 + t486;
t490 = t327 * t258 - t416;
t140 = t257 * t323 + t467;
t485 = (t462 + t261) * pkin(4);
t484 = qJ(5) * t212;
t422 = t455 * t327;
t95 = -t169 * t323 + t422;
t474 = pkin(4) * t327 + pkin(3);
t473 = qJ(5) * t455;
t472 = qJ(5) * t459;
t270 = t301 * t299;
t461 = -t270 + t387;
t470 = t324 * t461;
t466 = t328 * t461;
t292 = t320 * t299;
t222 = -t292 + t250;
t322 = t329 ^ 2;
t331 = qJD(1) ^ 2;
t326 = sin(qJ(1));
t444 = cos(qJ(1));
t375 = t326 * g(1) - t444 * g(2);
t357 = qJDD(1) * pkin(1) + t375;
t252 = (pkin(8) * t322 + pkin(7)) * t331 + pkin(2) * t352 - (qJD(2) * pkin(2) - pkin(8) * t395) * t395 + t357;
t110 = -t222 * pkin(9) + (t301 * t320 - t249) * pkin(3) - t252;
t358 = g(1) * t444 + t326 * g(2);
t434 = qJDD(1) * pkin(7);
t344 = -t331 * pkin(1) - t358 + t434;
t286 = -t325 * g(3) + t329 * t344;
t318 = t322 * t331;
t330 = qJD(2) ^ 2;
t458 = -t318 - t330;
t235 = pkin(2) * t458 + pkin(8) * t388 + t286;
t398 = t328 * t235;
t341 = t325 * t344;
t399 = t325 * t331;
t439 = t306 * pkin(8);
t457 = qJDD(2) * pkin(2) - t341 + (pkin(2) * t399 + pkin(8) * t389 - g(3)) * t329 - t439;
t182 = t324 * t457 + t398;
t268 = pkin(3) * t299 - pkin(9) * t301;
t446 = t320 ^ 2;
t125 = -pkin(3) * t446 + pkin(9) * t387 - t299 * t268 + t182;
t66 = -t327 * t110 + t125 * t323;
t67 = t323 * t110 + t327 * t125;
t43 = t323 * t66 + t327 * t67;
t394 = qJD(5) * t282;
t272 = 0.2e1 * t394;
t392 = qJD(6) * t280;
t460 = -0.2e1 * t392 + t272;
t230 = pkin(4) * t280 - qJ(5) * t282;
t60 = -t245 * pkin(4) - t295 * qJ(5) + t230 * t282 + qJDD(5) + t66;
t339 = t345 * pkin(5) + qJ(6) * t190 + t60;
t445 = -0.2e1 * qJD(6);
t40 = (pkin(5) * t280 + t445) * t296 + t339;
t438 = pkin(4) + qJ(6);
t291 = 0.2e1 * t393;
t253 = pkin(5) * t282 - qJ(6) * t296;
t359 = t295 * pkin(4) - t245 * qJ(5) + t280 * t230 - t67;
t346 = -t205 * pkin(5) - qJ(6) * t448 + t296 * t253 + qJDD(6) - t359;
t44 = t291 + t346;
t453 = qJ(5) * t44 - t40 * t438;
t162 = qJ(5) * t173;
t452 = -t175 * t438 + t162;
t184 = qJ(5) * t456;
t451 = -t438 * t454 + t184;
t450 = t190 * t438 - t472;
t403 = t296 * t327;
t384 = t280 * t403;
t356 = t205 * t323 + t384;
t385 = t328 * t405;
t386 = t324 * t405;
t338 = t325 * (t328 * t356 - t386) + t329 * (t324 * t356 + t385);
t236 = t328 * t245;
t404 = t296 * t323;
t254 = t282 * t404;
t362 = t254 - t384;
t412 = t245 * t324;
t449 = t325 * (t328 * t362 + t412) + t329 * (t324 * t362 - t236);
t396 = t327 * t345 - t254;
t337 = t325 * (t328 * t396 + t386) + t329 * (t324 * t396 - t385);
t297 = t299 ^ 2;
t298 = t301 ^ 2;
t443 = pkin(3) * t324;
t442 = pkin(4) * t296;
t441 = pkin(4) * t323;
t181 = t324 * t235 - t328 * t457;
t124 = -t387 * pkin(3) - t446 * pkin(9) + t301 * t268 + t181;
t436 = -pkin(3) * t124 + pkin(9) * t43;
t105 = -t181 * t328 + t182 * t324;
t433 = t105 * t325;
t430 = t462 * t323;
t429 = t462 * t327;
t411 = t252 * t324;
t410 = t252 * t328;
t265 = t270 + t387;
t408 = t265 * t324;
t407 = t265 * t328;
t402 = t320 * t324;
t401 = t320 * t328;
t120 = t323 * t124;
t311 = t329 * t399;
t308 = qJDD(2) + t311;
t400 = t325 * t308;
t121 = t327 * t124;
t397 = t329 * (qJDD(2) - t311);
t391 = qJD(3) + t320;
t383 = pkin(3) * t179 + t120 - t509;
t382 = -pkin(3) * t169 - t121 + t494;
t381 = -pkin(3) * t328 - pkin(2);
t14 = t323 * t40 + t327 * t44;
t343 = t205 * pkin(4) + t124 - t473;
t340 = -pkin(5) * t448 + t343;
t335 = qJ(6) * t205 + t340;
t374 = -0.2e1 * qJD(5) + t442;
t46 = 0.2e1 * t392 + (-t253 + t374) * t282 + t335;
t17 = pkin(5) * t40 - qJ(5) * t46;
t8 = pkin(5) * t44 - t438 * t46;
t377 = -pkin(3) * t46 + pkin(9) * t14 + t323 * t17 + t327 * t8;
t376 = -pkin(4) * t175 + t162;
t26 = pkin(5) * t173 + t212 * t438 + t44;
t334 = t296 * t445 + t339;
t31 = t484 + (t175 + t406) * pkin(5) + t334;
t373 = t327 * t26 + t323 * t31 + t503;
t58 = t291 - t359;
t49 = pkin(4) * t212 + t58;
t51 = t60 + t484;
t372 = t323 * t51 + t327 * t49 + t503;
t170 = t205 - t261;
t103 = -t170 * t327 + t425;
t371 = pkin(9) * t103 + t43 + t486;
t106 = t181 * t324 + t328 * t182;
t285 = t329 * g(3) + t341;
t369 = t325 * t285 + t329 * t286;
t37 = -t335 + pkin(5) * t454 + t473 + (t253 - t442) * t282 + t460;
t68 = pkin(5) * t456 + t438 * t455;
t367 = pkin(3) * t455 + t323 * t37 + t327 * t68 + t509;
t107 = pkin(5) * t190 - qJ(5) * t462;
t29 = -t340 + t253 * t282 + pkin(5) * t459 - t485 + (-t462 - t205) * qJ(6) + t460;
t366 = t323 * t107 + t327 * t29 - t532;
t365 = -pkin(4) * t60 + qJ(5) * t58;
t364 = t282 * t403 + t323 * t345;
t363 = -t327 * t205 + t280 * t404;
t360 = t323 * t67 - t327 * t66;
t54 = -pkin(4) * t261 - qJ(5) * t179 + t272 - t343;
t355 = -t179 * t474 + t323 * t54 + t509;
t55 = t343 - 0.2e1 * t394 + t485;
t354 = qJ(5) * t430 + t327 * t55 + t532;
t353 = (-t280 * t323 - t282 * t327) * t296;
t307 = -0.2e1 * t379 + t388;
t350 = (-qJD(3) + t320) * t301 - t368;
t349 = -pkin(4) * t454 + t184 - t359;
t24 = t323 * t60 + t327 * t58;
t62 = t282 * t374 + t343;
t348 = pkin(9) * t24 + (-qJ(5) * t323 - t474) * t62;
t336 = pkin(4) * t190 - t472 + t60;
t321 = t325 ^ 2;
t317 = t321 * t331;
t305 = t316 + 0.2e1 * t378;
t302 = t331 * pkin(7) + t357;
t288 = -t298 + t446;
t287 = t297 - t446;
t284 = -t298 - t446;
t269 = t298 - t297;
t264 = -t446 - t297;
t251 = -t297 - t298;
t224 = -t284 * t324 - t407;
t223 = t284 * t328 - t408;
t221 = t292 + t250;
t220 = -t299 * t391 + t342;
t217 = t301 * t391 + t368;
t214 = t264 * t328 - t470;
t213 = t264 * t324 + t466;
t197 = (-t280 * t327 + t282 * t323) * t296;
t148 = t221 * t324 + t328 * t350;
t147 = -t221 * t328 + t324 * t350;
t102 = -t423 - t429;
t97 = -t170 * t323 - t424;
t96 = t422 - t430;
t81 = t169 * t324 + t492;
t80 = -t324 * t455 + t505;
t78 = -t169 * t328 + t493;
t77 = t328 * t455 + t506;
t76 = t121 + t508;
t75 = t103 * t328 - t481;
t72 = t103 * t324 + t480;
t69 = t120 - t495;
t59 = -t376 - t510;
t57 = t67 + t511;
t56 = t66 - t496;
t47 = -t452 - t510;
t39 = -t349 + t504;
t38 = -t336 + t496;
t35 = t179 * t441 + t327 * t54 - t508;
t34 = qJ(5) * t429 - t323 * t55 + t495;
t32 = -t124 * t328 + t324 * t43;
t28 = -pkin(9) * t97 - t360;
t23 = t323 * t58 - t327 * t60;
t21 = -t346 - t451 + t504;
t20 = t40 + t450 - t496;
t19 = t107 * t327 - t29 * t323 - t495;
t18 = -t323 * t68 + t327 * t37 - t508;
t15 = -t323 * t49 + t327 * t51 - t507;
t13 = t323 * t44 - t327 * t40;
t11 = t24 * t328 + t324 * t62;
t10 = t24 * t324 - t328 * t62;
t9 = -pkin(9) * t23 + (-qJ(5) * t327 + t441) * t62;
t6 = -pkin(3) * t23 - t365;
t5 = t14 * t328 + t324 * t46;
t4 = t14 * t324 - t328 * t46;
t3 = -t26 * t323 + t31 * t327 - t507;
t2 = -pkin(3) * t13 - t453;
t1 = -pkin(9) * t13 + t17 * t327 - t323 * t8;
t7 = [0, 0, 0, 0, 0, qJDD(1), t375, t358, 0, 0, (t306 + t378) * t325, t305 * t329 + t307 * t325, t400 + t329 * (-t317 + t330), t307 * t329, t325 * (t318 - t330) + t397, 0, t329 * t302 + pkin(1) * t307 + pkin(7) * (t329 * t458 - t400), -t325 * t302 - pkin(1) * t305 + pkin(7) * (-t397 - t325 * (-t317 - t330)), pkin(1) * (t317 + t318) + (t321 + t322) * t434 + t369, pkin(1) * t302 + pkin(7) * t369, t325 * (t250 * t328 - t301 * t402) + t329 * (t250 * t324 + t301 * t401), t325 * (-t217 * t328 - t222 * t324) + t329 * (-t217 * t324 + t222 * t328), t325 * (-t288 * t324 + t466) + t329 * (t288 * t328 + t470), t325 * (-t249 * t324 + t299 * t401) + t329 * (t249 * t328 + t299 * t402), t325 * (t287 * t328 - t408) + t329 * (t287 * t324 + t407), (t325 * (-t299 * t328 + t301 * t324) + t329 * (-t299 * t324 - t301 * t328)) * t320, t325 * (-pkin(8) * t213 - t411) + t329 * (-pkin(2) * t217 + pkin(8) * t214 + t410) - pkin(1) * t217 + pkin(7) * (-t213 * t325 + t214 * t329), t325 * (-pkin(8) * t223 - t410) + t329 * (-pkin(2) * t220 + pkin(8) * t224 - t411) - pkin(1) * t220 + pkin(7) * (-t223 * t325 + t224 * t329), t325 * (-pkin(8) * t147 - t105) + t329 * (-pkin(2) * t251 + pkin(8) * t148 + t106) - pkin(1) * t251 + pkin(7) * (-t147 * t325 + t148 * t329), -pkin(8) * t433 + t329 * (pkin(2) * t252 + pkin(8) * t106) + pkin(1) * t252 + pkin(7) * (t106 * t329 - t433), t337, t518, -t528, t338, t529, t449, t325 * (-pkin(8) * t78 - t324 * t56 + t328 * t69) + t329 * (pkin(8) * t81 + t324 * t69 + t328 * t56 - t497) - t498 + pkin(7) * (-t325 * t78 + t329 * t81), t325 * (-t324 * t57 + t328 * t76 + t533) + t329 * (t324 * t76 + t328 * t57 - t531) - t535, t325 * (-pkin(8) * t72 + t28 * t328) + t329 * (pkin(8) * t75 + t324 * t28) + pkin(7) * (-t325 * t72 + t329 * t75) + (t325 * t443 + t329 * t381 - pkin(1)) * t97, (t325 * (-pkin(9) * t328 + t443) + t329 * (-pkin(9) * t324 + t381) - pkin(1)) * t360 + (pkin(7) + pkin(8)) * (-t32 * t325 + t329 * (t124 * t324 + t328 * t43)), t325 * (t197 * t328 + t412) + t329 * (t197 * t324 - t236), t528, t325 * (t170 * t324 - t524) + t329 * (-t170 * t328 - t525), t337, t325 * (t102 * t328 - t479) + t329 * (t102 * t324 + t478), t338, t325 * (t15 * t328 - t324 * t59 - t526) + t329 * (t15 * t324 + t328 * t59 + t523) + t517, t325 * (-t324 * t38 + t328 * t34 - t538) + t329 * (t324 * t34 + t328 * t38 - t537) - t540, t325 * (-t324 * t39 + t328 * t35 - t533) + t329 * (t324 * t35 + t328 * t39 + t531) + t535, t325 * (-pkin(8) * t10 - t324 * t6 + t328 * t9) + t329 * (-pkin(2) * t23 + pkin(8) * t11 + t324 * t9 + t328 * t6) - pkin(1) * t23 + pkin(7) * (-t10 * t325 + t11 * t329), t449, -t529, -t528, t338, -t518, t337, t325 * (t3 * t328 - t324 * t47 - t526) + t329 * (t3 * t324 + t328 * t47 + t523) + t517, t325 * (-pkin(8) * t77 + t18 * t328 - t21 * t324) + t329 * (pkin(8) * t80 + t18 * t324 + t21 * t328 - t513) - t515 + pkin(7) * (-t325 * t77 + t329 * t80), t325 * (t19 * t328 - t20 * t324 + t538) + t329 * (t19 * t324 + t20 * t328 + t537) + t540, t325 * (-pkin(8) * t4 + t1 * t328 - t2 * t324) + t329 * (-pkin(2) * t13 + pkin(8) * t5 + t1 * t324 + t2 * t328) - pkin(1) * t13 + pkin(7) * (-t325 * t4 + t329 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t311, t317 - t318, t316, t311, t388, qJDD(2), -t285, -t286, 0, 0, t270, t269, t221, -t270, t350, t387, pkin(2) * t213 - t181, -t398 - t324 * (pkin(8) * t378 - t285 - t439) + (-t308 * t324 + t223) * pkin(2), pkin(2) * t147, pkin(2) * t105, t364, t95, t490, t363, t140, t353, pkin(2) * t78 + t382, t383 - t534, pkin(2) * t72 + t371, pkin(2) * t32 + t436, t353, -t490, -t140, t364, t96, t363, t372 + t527, t354 + t539, t355 + t534, pkin(2) * t10 + t348, t353, -t140, t490, t363, -t95, t364, t373 + t527, pkin(2) * t77 + t367, t366 - t539, pkin(2) * t4 + t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, t269, t221, -t270, t350, t387, -t181, -t182, 0, 0, t364, t95, t490, t363, t140, t353, t382, t383, t371, t436, t353, -t490, -t140, t364, t96, t363, t372, t354, t355, t348, t353, -t140, t490, t363, -t95, t364, t373, t367, t366, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t405, -t231, t175, -t405, t173, t245, -t66, -t67, 0, 0, t245, -t175, t170, t405, -t231, -t405, t376, t336, t291 + t349, t365, t245, -t173, t175, -t405, t231, t405, t452, t44 + t451, -pkin(5) * t406 - t334 - t450, t453; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, -t190, t454, t60, 0, 0, 0, 0, 0, 0, t175, t454, t190, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, t456, t459, t44;];
tauJ_reg  = t7;
