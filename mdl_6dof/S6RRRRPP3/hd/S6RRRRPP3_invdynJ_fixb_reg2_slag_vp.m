% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:56:37
% EndTime: 2019-03-09 20:56:54
% DurationCPUTime: 8.76s
% Computational Cost: add. (12735->733), mult. (28318->811), div. (0->0), fcn. (20110->10), ass. (0->351)
t273 = cos(qJ(4));
t411 = qJD(4) * t273;
t274 = cos(qJ(2));
t486 = cos(qJ(3));
t392 = t486 * t274;
t240 = qJD(1) * t392;
t270 = sin(qJ(3));
t271 = sin(qJ(2));
t415 = qJD(1) * t271;
t391 = t270 * t415;
t187 = -t240 + t391;
t442 = t187 * t273;
t516 = t411 + t442;
t269 = sin(qJ(4));
t412 = qJD(4) * t269;
t443 = t187 * t269;
t515 = t412 + t443;
t199 = t270 * t274 + t271 * t486;
t189 = t199 * qJD(1);
t473 = t274 * pkin(2);
t257 = pkin(1) + t473;
t212 = t257 * qJD(1);
t308 = pkin(3) * t187 - pkin(9) * t189 - t212;
t405 = qJDD(2) + qJDD(3);
t276 = -pkin(8) - pkin(7);
t410 = qJD(1) * qJD(2);
t383 = t274 * t410;
t408 = t271 * qJDD(1);
t145 = qJDD(2) * pkin(2) - t276 * (-t383 - t408);
t384 = t271 * t410;
t407 = t274 * qJDD(1);
t151 = t276 * (-t384 + t407);
t214 = t276 * t271;
t201 = qJD(1) * t214;
t469 = qJD(2) * pkin(2);
t194 = t201 + t469;
t216 = t276 * t274;
t203 = qJD(1) * t216;
t385 = t486 * qJD(3);
t414 = qJD(3) * t270;
t70 = t270 * t145 - t486 * t151 + t194 * t385 + t203 * t414;
t514 = -pkin(9) * t405 - qJD(4) * t308 - t70;
t406 = qJD(2) + qJD(3);
t142 = t406 * t199;
t381 = qJDD(1) * t486;
t357 = t270 * t408 - t274 * t381;
t109 = qJD(1) * t142 + t357;
t108 = qJDD(4) + t109;
t471 = pkin(4) + qJ(6);
t387 = t471 * t108;
t191 = t486 * t203;
t138 = t201 * t270 - t191;
t365 = pkin(2) * t414 - t138;
t267 = qJ(2) + qJ(3);
t261 = sin(t267);
t275 = cos(qJ(1));
t435 = t261 * t275;
t272 = sin(qJ(1));
t437 = t261 * t272;
t513 = -g(1) * t435 - g(2) * t437;
t322 = t486 * qJD(2) + t385;
t373 = t270 * t406;
t141 = t271 * t373 - t274 * t322;
t451 = t141 * t269;
t333 = t199 * t411 - t451;
t154 = t273 * t189 + t269 * t406;
t134 = t270 * t194 - t191;
t121 = pkin(9) * t406 + t134;
t82 = t121 * t269 - t273 * t308;
t339 = pkin(5) * t154 + t82;
t424 = qJD(5) + t339;
t262 = cos(t267);
t512 = g(3) * t262 + t513;
t372 = t273 * t406;
t152 = t189 * t269 - t372;
t445 = t154 * t273;
t447 = t152 * t269;
t421 = qJD(3) * t391 + t270 * t384;
t284 = t271 * t381 + (qJD(1) * t322 + qJDD(1) * t270) * t274 - t421;
t413 = qJD(4) * t154;
t81 = t269 * t284 - t273 * t405 + t413;
t465 = t273 * t81;
t80 = -qJD(4) * t372 + t189 * t412 - t269 * t405 - t273 * t284;
t466 = t269 * t80;
t286 = t199 * (qJD(4) * (-t445 + t447) - t465 + t466) + (t152 * t273 + t154 * t269) * t141;
t181 = qJD(4) + t187;
t446 = t154 * t181;
t448 = t152 * t181;
t11 = t269 * (t81 + t446) + t273 * (t80 + t448);
t452 = t108 * t273;
t511 = pkin(9) * (t181 * t412 - t452);
t453 = t108 * t269;
t510 = pkin(9) * (t181 * t411 + t453);
t360 = -pkin(4) * t443 + qJ(5) * t442;
t509 = -t360 + t365;
t190 = t270 * t203;
t133 = t194 * t486 + t190;
t120 = -pkin(3) * t406 - t133;
t304 = -t154 * qJ(5) + t120;
t49 = t152 * t471 + t304;
t370 = -t486 * t145 - t270 * t151 + t194 * t414 - t203 * t385;
t69 = -pkin(3) * t405 + t370;
t295 = t80 * qJ(5) - t154 * qJD(5) + t69;
t5 = t152 * qJD(6) + t471 * t81 + t295;
t508 = -t273 * t5 + t49 * t412;
t43 = t81 - t446;
t485 = pkin(2) * t270;
t255 = pkin(9) + t485;
t371 = pkin(2) * t385;
t315 = t255 * t411 + t269 * t371;
t128 = pkin(3) * t189 + pkin(9) * t187;
t119 = pkin(2) * t415 + t128;
t139 = t201 * t486 + t190;
t87 = t119 * t273 - t269 * t139;
t505 = -t87 - t315;
t504 = t189 * t406;
t106 = t108 * qJ(5);
t167 = t181 * qJD(5);
t502 = -t106 - t167;
t374 = pkin(4) * t412 - qJD(5) * t269;
t501 = (-qJ(5) * qJD(4) - qJD(6)) * t273 + t374 + t515 * qJ(6);
t149 = t152 ^ 2;
t150 = t154 ^ 2;
t388 = -t150 + t149;
t174 = t181 ^ 2;
t500 = -t150 - t174;
t499 = t486 * t214 + t270 * t216;
t418 = t262 * pkin(3) + t261 * pkin(9);
t498 = -pkin(9) * t199 - t257;
t497 = pkin(5) * t516 + t189 * t471;
t362 = g(1) * t275 + g(2) * t272;
t496 = -pkin(5) * t81 + qJDD(6);
t423 = qJD(5) + t82;
t61 = -pkin(4) * t181 + t423;
t83 = t273 * t121 + t269 * t308;
t62 = -t181 * qJ(5) - t83;
t245 = pkin(2) * t384;
t50 = t245 - (t240 * t406 - t421) * pkin(9) + t109 * pkin(3) + t498 * qJDD(1);
t15 = -t121 * t411 + t269 * t514 + t273 * t50;
t350 = -qJDD(5) + t15;
t483 = pkin(4) * t108;
t8 = -t350 - t483;
t7 = t8 * t269;
t495 = t61 * t411 + t62 * t412 + t7;
t375 = t121 * t412 - t269 * t50 + t273 * t514;
t13 = t375 * t273;
t494 = t82 * t442 - t83 * t443 - t13;
t493 = t261 * t362;
t198 = t270 * t271 - t392;
t390 = t199 * t412;
t450 = t141 * t273;
t332 = t390 + t450;
t439 = t199 * t273;
t492 = -t108 * t439 - t142 * t154 + t181 * t332 + t198 * t80;
t440 = t199 * t269;
t19 = t108 * t440 + t142 * t152 + t181 * t333 + t198 * t81;
t489 = 0.2e1 * t106;
t488 = pkin(5) * t80;
t484 = pkin(2) * t271;
t482 = pkin(4) * t189;
t478 = g(2) * t276;
t476 = g(3) * t274;
t475 = t152 * pkin(5);
t248 = t261 * pkin(5);
t6 = t375 + t502;
t472 = t6 * t273;
t470 = qJ(5) * t81;
t17 = t81 * pkin(4) + t295;
t468 = t17 * t269;
t16 = t17 * t273;
t467 = t181 * t83;
t464 = t501 + t509;
t92 = t134 + t360;
t463 = -t92 + t501;
t353 = t273 * t371;
t175 = t189 * qJ(5);
t367 = pkin(5) * t443 + t175;
t88 = t269 * t119 + t273 * t139;
t462 = t353 + (-pkin(5) - t255) * t412 - t367 - t88;
t461 = t497 - t505;
t180 = -qJ(5) * t411 + t374;
t460 = t180 + t509;
t459 = t180 - t92;
t91 = t269 * t128 + t273 * t133;
t458 = (-pkin(5) - pkin(9)) * t412 - t367 - t91;
t90 = t128 * t273 - t269 * t133;
t457 = pkin(9) * t411 + t497 + t90;
t456 = pkin(7) * qJDD(1);
t455 = qJ(5) * t152;
t454 = t108 * t255;
t449 = t152 * t154;
t444 = t181 * t189;
t441 = t189 * t187;
t438 = t261 * t269;
t436 = t261 * t273;
t434 = t262 * t272;
t433 = t262 * t273;
t432 = t262 * t275;
t431 = t269 * qJ(5);
t430 = t269 * t272;
t428 = t272 * t273;
t427 = t273 * t275;
t426 = t275 * t269;
t425 = t275 * t276;
t52 = t83 - t475;
t422 = -qJD(6) - t52;
t132 = pkin(3) * t198 + t498;
t157 = t270 * t214 - t216 * t486;
t99 = t269 * t132 + t273 * t157;
t223 = pkin(9) * t434;
t420 = pkin(5) * t434 + t223;
t227 = pkin(9) * t432;
t419 = pkin(5) * t432 + t227;
t265 = t271 ^ 2;
t266 = t274 ^ 2;
t417 = t265 - t266;
t416 = t265 + t266;
t404 = t486 * pkin(2);
t403 = t271 * t469;
t278 = qJD(1) ^ 2;
t402 = t271 * t278 * t274;
t75 = t152 * pkin(4) + t304;
t401 = t75 * t412;
t400 = t75 * t411;
t220 = t275 * t257;
t399 = pkin(3) * t432 + pkin(9) * t435 + t220;
t398 = t512 * t269;
t397 = g(3) * t433 + t273 * t513;
t396 = g(1) * t432 + g(2) * t434 + g(3) * t261;
t395 = qJD(2) * t276;
t394 = t269 * t486;
t393 = t273 * t486;
t382 = -pkin(3) - t431;
t176 = t262 * t430 + t427;
t177 = t262 * t428 - t426;
t380 = -t176 * pkin(4) + qJ(5) * t177;
t178 = t262 * t426 - t428;
t179 = t262 * t427 + t430;
t379 = -t178 * pkin(4) + qJ(5) * t179;
t146 = t269 * t157;
t98 = t132 * t273 - t146;
t377 = t181 * t269;
t376 = t181 * t273;
t369 = pkin(4) * t433 + t262 * t431 + t418;
t368 = t271 * t383;
t366 = g(1) * t437 - g(2) * t435;
t364 = g(1) * t176 - g(2) * t178;
t363 = g(1) * t177 - g(2) * t179;
t361 = g(1) * t272 - g(2) * t275;
t85 = -qJ(5) * t198 - t99;
t359 = pkin(4) * t440 - t499;
t356 = t269 * t62 + t273 * t61;
t354 = t269 * t83 - t273 * t82;
t352 = t152 * t371;
t351 = t154 * t371;
t349 = qJ(5) * t273 - qJ(6) * t269;
t348 = -qJD(4) * t75 + t454;
t347 = t120 * t187 - t454;
t346 = -t152 * t189 - t452;
t345 = t154 * t189 - t453;
t202 = t271 * t395;
t204 = t274 * t395;
t103 = qJD(3) * t499 + t486 * t202 + t270 * t204;
t97 = pkin(3) * t142 + pkin(9) * t141 + t403;
t27 = -t269 * t103 - t132 * t412 - t157 * t411 + t273 * t97;
t342 = t273 * pkin(4) - t382;
t341 = -t257 - t418;
t340 = t269 * t5 + t411 * t49;
t338 = qJ(6) * t433 + t248 + t369;
t337 = -0.2e1 * pkin(1) * t410 - pkin(7) * qJDD(2);
t336 = -t177 * pkin(4) - qJ(5) * t176 - t425;
t26 = t273 * t103 + t132 * t411 - t157 * t412 + t269 * t97;
t331 = t179 * pkin(4) + qJ(5) * t178 + t399;
t327 = t273 * t471 - t382;
t326 = -t61 * t189 - t75 * t443 + t16 + t397;
t325 = t120 * t411 + t83 * t189 + t69 * t269 + t398;
t324 = t154 * t376 - t466;
t323 = t152 * t377 - t465;
t319 = t62 * t189 - t75 * t442 - t398 - t468;
t318 = t120 * t412 + t82 * t189 - t69 * t273 - t397;
t317 = t271 * t362 - t476;
t316 = t255 * t412 - t353;
t314 = t80 - t448;
t313 = g(1) * t178 + g(2) * t176 + g(3) * t438 + t15;
t277 = qJD(2) ^ 2;
t312 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t277 + t361;
t311 = pkin(1) * t278 + t362 - t456;
t310 = -qJD(4) * t354 - t15 * t269;
t309 = -t212 * t187 + t396 - t70;
t307 = -qJDD(5) + t313;
t306 = t212 * t189 - t370 - t512;
t305 = (-g(1) * t341 + t478) * t272;
t302 = g(1) * t179 + g(2) * t177 + g(3) * t436 + t375;
t301 = qJD(4) * t356 - t472 + t7;
t25 = t152 * t333 + t440 * t81;
t24 = -t154 * t332 - t439 * t80;
t22 = -qJ(5) * t142 - qJD(5) * t198 - t26;
t300 = t310 - t13;
t35 = -t181 * t471 + t424;
t299 = t189 * t35 + t443 * t49 - t397 + t508;
t104 = qJD(3) * t157 + t270 * t202 - t486 * t204;
t41 = qJD(6) - t62 - t475;
t298 = -t189 * t41 - t49 * t442 - t340 - t398;
t297 = t154 * t75 - t307;
t2 = -qJD(6) * t181 - t350 - t387 - t488;
t4 = -t6 + t496;
t296 = t2 * t269 + t4 * t273 + t35 * t516 - t515 * t41 - t396;
t292 = pkin(4) * t333 + qJ(5) * t390 + t104;
t291 = t154 * t49 - t307 - t488;
t290 = -g(1) * (-pkin(3) * t435 + t227) - g(2) * (-pkin(3) * t437 + t223) - g(3) * t418;
t289 = (-t466 - t465 + (t445 + t447) * qJD(4)) * pkin(9) - t396;
t288 = -t152 * t49 - t302 + t496;
t287 = t327 * t493;
t283 = -t357 - t504;
t281 = -g(1) * t227 - g(2) * t223 - g(3) * t369 + t342 * t493;
t264 = t273 * pkin(5);
t263 = t269 * pkin(5);
t256 = -t404 - pkin(3);
t217 = qJ(5) * t436;
t215 = pkin(9) * t273 + t264;
t213 = pkin(9) * t269 + t263;
t197 = t255 * t273 + t264;
t196 = t255 * t269 + t263;
t195 = -t404 - t342;
t184 = -qJDD(1) * t257 + t245;
t166 = -t404 - t327;
t110 = -t187 ^ 2 + t189 ^ 2;
t105 = pkin(4) * t154 + t455;
t102 = -qJ(5) * t439 + t359;
t96 = t283 + t504;
t95 = t187 * t406 + t284;
t89 = -t199 * t349 + t359;
t86 = -pkin(4) * t198 - t98;
t84 = t154 * t471 + t455;
t78 = -t90 - t482;
t77 = -t175 - t91;
t74 = -t87 - t482;
t73 = -t175 - t88;
t72 = -pkin(5) * t440 - t85;
t60 = t146 + (pkin(5) * t199 - t132) * t273 - t471 * t198;
t55 = t108 * t198 + t142 * t181;
t39 = -t174 * t273 + t345;
t38 = t181 * t376 - t345;
t37 = -t174 * t269 - t346;
t36 = t181 * t377 + t346;
t28 = (qJ(5) * t141 - qJD(5) * t199) * t273 + t292;
t23 = -pkin(4) * t142 - t27;
t21 = t349 * t141 + (qJD(6) * t269 + (qJ(6) * qJD(4) - qJD(5)) * t273) * t199 + t292;
t20 = -pkin(5) * t333 - t22;
t12 = -pkin(5) * t332 - qJD(6) * t198 - t142 * t471 - t27;
t1 = [0, 0, 0, 0, 0, qJDD(1), t361, t362, 0, 0, qJDD(1) * t265 + 0.2e1 * t368, 0.2e1 * t271 * t407 - 0.2e1 * t410 * t417, qJDD(2) * t271 + t274 * t277, qJDD(1) * t266 - 0.2e1 * t368, qJDD(2) * t274 - t271 * t277, 0, t271 * t337 + t274 * t312, -t271 * t312 + t274 * t337, 0.2e1 * t416 * t456 - t362, -g(1) * (-pkin(1) * t272 + pkin(7) * t275) - g(2) * (pkin(1) * t275 + pkin(7) * t272) + (pkin(7) ^ 2 * t416 + pkin(1) ^ 2) * qJDD(1), -t189 * t141 + t199 * t284, -t199 * t109 + t141 * t187 - t189 * t142 - t198 * t284, -t141 * t406 + t199 * t405, t109 * t198 + t142 * t187, -t142 * t406 - t198 * t405, 0, -t104 * t406 - t257 * t109 - t212 * t142 + t184 * t198 + t187 * t403 + t262 * t361 + t405 * t499, -t103 * t406 + t212 * t141 - t157 * t405 + t184 * t199 + t189 * t403 - t257 * t284 - t366, -t103 * t187 + t104 * t189 - t157 * t109 + t133 * t141 - t134 * t142 - t70 * t198 + t199 * t370 - t284 * t499 - t362, t70 * t157 + t134 * t103 - t370 * t499 - t133 * t104 - t184 * t257 - t212 * t403 - g(1) * (-t257 * t272 - t425) - g(2) * (-t272 * t276 + t220) t24, t286, -t492, t25, -t19, t55, t104 * t152 + t108 * t98 + t120 * t333 - t142 * t82 + t15 * t198 + t181 * t27 + t440 * t69 - t499 * t81 + t363, t104 * t154 - t108 * t99 - t120 * t332 - t142 * t83 - t181 * t26 + t198 * t375 + t439 * t69 + t499 * t80 - t364, -t152 * t26 - t154 * t27 + t80 * t98 - t81 * t99 + t354 * t141 + (t375 * t269 - t15 * t273 + (-t269 * t82 - t273 * t83) * qJD(4)) * t199 + t366, g(1) * t425 - g(2) * t399 + t120 * t104 + t15 * t98 + t83 * t26 - t82 * t27 - t375 * t99 - t499 * t69 + t305, t55, t492, t19, t24, t286, t25, t152 * t22 + t154 * t23 - t80 * t86 + t81 * t85 - t356 * t141 + (t269 * t6 + t273 * t8 + (-t269 * t61 + t273 * t62) * qJD(4)) * t199 + t366, t75 * t451 - t102 * t81 + t108 * t86 + t142 * t61 - t152 * t28 + t181 * t23 + t198 * t8 + (-t400 - t468) * t199 - t363, t75 * t450 + t102 * t80 - t108 * t85 - t142 * t62 - t154 * t28 - t181 * t22 - t198 * t6 + (t401 - t16) * t199 + t364, -g(1) * t336 - g(2) * t331 + t17 * t102 + t62 * t22 + t61 * t23 + t75 * t28 + t6 * t85 + t8 * t86 + t305, t55, t19, -t492, t25, -t286, t24, t12 * t154 - t152 * t20 - t60 * t80 - t72 * t81 + (t269 * t41 - t273 * t35) * t141 + (t2 * t273 - t269 * t4 + (-t269 * t35 - t273 * t41) * qJD(4)) * t199 + t366, t108 * t72 + t142 * t41 - t154 * t21 + t181 * t20 + t198 * t4 + t199 * t508 + t49 * t450 + t80 * t89 + t364, -t108 * t60 - t12 * t181 - t142 * t35 + t152 * t21 - t198 * t2 + t199 * t340 - t451 * t49 + t81 * t89 + t363, t5 * t89 + t49 * t21 + t2 * t60 + t35 * t12 + t4 * t72 + t41 * t20 - g(1) * (-qJ(6) * t177 + t336) - g(2) * (pkin(5) * t435 + qJ(6) * t179 + t331) + (-g(1) * (t341 - t248) + t478) * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t402, t417 * t278, t408, t402, t407, qJDD(2), t271 * t311 - t476, g(3) * t271 + t274 * t311, 0, 0, t441, t110, t95, -t441, t96, t405, t138 * t406 + (-qJD(3) * t373 - t187 * t415 + t405 * t486) * pkin(2) + t306, t139 * t406 + (-t189 * t415 - t270 * t405 - t385 * t406) * pkin(2) + t309, -t109 * t485 - t284 * t404 + (t134 + t365) * t189 + (-t133 + t139 - t371) * t187, t133 * t138 - t134 * t139 + (-t486 * t370 - t476 + t270 * t70 + (-t133 * t270 + t134 * t486) * qJD(3) + (qJD(1) * t212 + t362) * t271) * pkin(2), t324, -t11, t38, t323, t37, -t444, t365 * t152 + t181 * t505 + t256 * t81 + t347 * t269 + t318, -t256 * t80 + t347 * t273 + t365 * t154 + (t88 + t316) * t181 + t325, t88 * t152 + t87 * t154 + (-t352 - t255 * t81 + (t154 * t255 + t82) * qJD(4)) * t273 + (t351 - t255 * t80 - t15 + (t152 * t255 - t83) * qJD(4)) * t269 - t396 + t494, t69 * t256 - t83 * t88 + t82 * t87 - t120 * t138 + ((t120 * t270 + t393 * t83 + t394 * t82) * qJD(3) + t317) * pkin(2) + t300 * t255 + t290, -t444, t39, t36, t324, -t11, t323, -t73 * t152 - t74 * t154 + (t351 + t187 * t62 + (qJD(4) * t152 - t80) * t255) * t269 + (-t352 + t187 * t61 - t6 + (-t81 + t413) * t255) * t273 - t396 + t495, -t195 * t81 + t348 * t269 - t460 * t152 + (-t74 + t315) * t181 + t326, t195 * t80 + t348 * t273 - t460 * t154 + (t73 - t316) * t181 + t319, t17 * t195 - t62 * t73 - t61 * t74 + t460 * t75 + ((-t393 * t62 + t394 * t61) * qJD(3) + t317) * pkin(2) + t301 * t255 + t281, -t444, t36, t38, t323, t11, t324, -t152 * t462 + t154 * t461 - t196 * t80 - t197 * t81 + t296, t108 * t197 - t154 * t464 + t166 * t80 + t181 * t462 + t298, -t108 * t196 + t152 * t464 + t166 * t81 - t181 * t461 + t299, t5 * t166 + t2 * t196 + t4 * t197 - g(1) * (-t275 * t484 + t419) - g(2) * (-t272 * t484 + t420) - g(3) * (t338 + t473) + t464 * t49 + t462 * t41 + t461 * t35 + t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t441, t110, t95, -t441, t96, t405, t134 * t406 + t306, t133 * t406 + t309, 0, 0, t324, -t11, t38, t323, t37, -t444, -pkin(3) * t81 + t120 * t443 - t134 * t152 - t181 * t90 + t318 - t510, pkin(3) * t80 + t120 * t442 - t134 * t154 + t181 * t91 + t325 + t511, t152 * t91 + t154 * t90 + t289 + t310 + t494, -t69 * pkin(3) + pkin(9) * t300 - t120 * t134 + t82 * t90 - t83 * t91 + t290, -t444, t39, t36, t324, -t11, t323, -t152 * t77 - t154 * t78 + t187 * t356 + t289 - t472 + t495, -t152 * t459 - t181 * t78 + t342 * t81 + t326 - t401 + t510, -t154 * t459 + t181 * t77 - t342 * t80 + t319 - t400 - t511, pkin(9) * t301 - t17 * t342 + t459 * t75 - t61 * t78 - t62 * t77 + t281, -t444, t36, t38, t323, t11, t324, -t152 * t458 + t154 * t457 - t213 * t80 - t215 * t81 + t296, t108 * t215 - t154 * t463 + t181 * t458 - t327 * t80 + t298, -t108 * t213 + t152 * t463 - t181 * t457 - t327 * t81 + t299, -g(1) * t419 - g(2) * t420 - g(3) * t338 + t2 * t213 + t4 * t215 - t327 * t5 + t35 * t457 + t41 * t458 + t463 * t49 + t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, -t388, -t314, -t449, -t43, t108, -t120 * t154 + t313 + t467, t120 * t152 - t181 * t82 + t302, 0, 0, t108, t314, t43, t449, -t388, -t449, pkin(4) * t80 - t470 + (-t62 - t83) * t154 + (t61 - t423) * t152, t105 * t152 + t297 - t467 - 0.2e1 * t483, t105 * t154 - t152 * t75 + t181 * t423 + t167 - t302 + t489, -t6 * qJ(5) - t8 * pkin(4) - t75 * t105 - t61 * t83 - g(1) * t379 - g(2) * t380 - g(3) * (-pkin(4) * t438 + t217) - t423 * t62, t108, t43, -t314, -t449, t388, t449, -t470 + t471 * t80 + (t41 + t422) * t154 + (t35 - t424) * t152, t154 * t84 + t181 * t339 + 0.2e1 * t167 + t288 + t489, -t152 * t84 + (0.2e1 * qJD(6) + t52) * t181 + 0.2e1 * t387 - t291, -t2 * t471 + t4 * qJ(5) - t49 * t84 - g(1) * (-qJ(6) * t178 + t379) - g(2) * (-qJ(6) * t176 + t380) - g(3) * (-t438 * t471 + t217) + t424 * t41 + t422 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314, t108 - t449, t500, t181 * t62 + t297 - t483, 0, 0, 0, 0, 0, 0, -t314, t500, -qJDD(4) + t283 + t449 (-qJD(6) - t41) * t181 - t387 + t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t108 + t449, -t149 - t174, t181 * t35 + t288 - t502;];
tau_reg  = t1;
