% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 20:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PPRRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:34:13
% EndTime: 2019-05-04 20:35:24
% DurationCPUTime: 69.94s
% Computational Cost: add. (177020->876), mult. (325185->1402), div. (0->0), fcn. (261237->14), ass. (0->660)
t899 = sin(qJ(5));
t900 = sin(qJ(4));
t1038 = qJD(3) * t900;
t902 = cos(qJ(5));
t850 = -t902 * qJD(4) + t1038 * t899;
t852 = qJD(4) * t899 + t1038 * t902;
t1059 = t850 * t852;
t903 = cos(qJ(4));
t1030 = qJDD(3) * t903;
t1033 = qJD(3) * qJD(4);
t878 = t900 * t1033;
t856 = -t878 + t1030;
t847 = -qJDD(5) + t856;
t909 = t847 - t1059;
t1072 = t909 * t899;
t1037 = qJD(3) * t903;
t874 = -qJD(5) + t1037;
t1092 = t874 ^ 2;
t1093 = t850 ^ 2;
t827 = t1093 - t1092;
t735 = t827 * t902 + t1072;
t1022 = t903 * t1033;
t1032 = qJDD(3) * t900;
t855 = t1022 + t1032;
t1020 = -t902 * qJDD(4) + t855 * t899;
t757 = (qJD(5) + t874) * t852 + t1020;
t650 = t735 * t900 + t757 * t903;
t891 = sin(pkin(7));
t895 = cos(pkin(7));
t654 = t735 * t903 - t757 * t900;
t1071 = t909 * t902;
t732 = t827 * t899 - t1071;
t901 = sin(qJ(3));
t904 = cos(qJ(3));
t967 = t654 * t901 - t732 * t904;
t551 = t650 * t895 + t891 * t967;
t892 = sin(pkin(6));
t896 = cos(pkin(6));
t555 = -t650 * t891 + t895 * t967;
t606 = t654 * t904 + t732 * t901;
t889 = sin(pkin(12));
t893 = cos(pkin(12));
t987 = t555 * t893 + t606 * t889;
t459 = -t892 * t551 + t896 * t987;
t495 = t555 * t889 - t606 * t893;
t890 = sin(pkin(11));
t894 = cos(pkin(11));
t1277 = t459 * t890 + t495 * t894;
t1276 = t459 * t894 - t495 * t890;
t1058 = t850 * t874;
t943 = -t899 * qJDD(4) - t902 * t855;
t908 = qJD(5) * t850 + t943;
t1106 = t1058 - t908;
t1075 = t1106 * t899;
t1035 = qJD(5) - t874;
t756 = t1035 * t852 + t1020;
t673 = -t756 * t902 - t1075;
t846 = t852 ^ 2;
t808 = t846 - t1093;
t636 = t673 * t900 - t808 * t903;
t638 = t673 * t903 + t808 * t900;
t667 = t1106 * t902 - t756 * t899;
t974 = t638 * t901 - t667 * t904;
t521 = t636 * t895 + t891 * t974;
t523 = -t636 * t891 + t895 * t974;
t566 = t638 * t904 + t667 * t901;
t995 = t523 * t893 + t566 * t889;
t433 = -t892 * t521 + t896 * t995;
t470 = t523 * t889 - t566 * t893;
t1275 = t433 * t890 + t470 * t894;
t1274 = t433 * t894 - t470 * t890;
t1269 = t896 * t551 + t892 * t987;
t1268 = t896 * t521 + t892 * t995;
t1105 = t1058 + t908;
t1147 = t1105 * t902 - t757 * t899;
t1104 = t846 + t1093;
t1146 = -t1105 * t899 - t757 * t902;
t1175 = -t1104 * t900 + t1146 * t903;
t1189 = t1147 * t901 + t1175 * t904;
t1176 = t1104 * t903 + t1146 * t900;
t1190 = -t1147 * t904 + t1175 * t901;
t1224 = -t1176 * t891 + t1190 * t895;
t1233 = t1189 * t893 - t1224 * t889;
t1225 = t1176 * t895 + t1190 * t891;
t1232 = t1189 * t889 + t1224 * t893;
t1248 = -t1225 * t892 + t1232 * t896;
t1254 = t1233 * t890 + t1248 * t894;
t1263 = qJ(1) * t1254;
t1255 = t1233 * t894 - t1248 * t890;
t1262 = qJ(1) * t1255;
t1261 = pkin(1) * t1248;
t1249 = t1225 * t896 + t1232 * t892;
t1260 = pkin(1) * t1249;
t1253 = (-t1248 * t896 - t1249 * t892) * qJ(2);
t1252 = qJ(2) * t1233;
t910 = -t847 - t1059;
t1070 = t910 * t899;
t828 = -t846 + t1092;
t1120 = -t828 * t902 - t1070;
t1069 = t910 * t902;
t1119 = -t828 * t899 + t1069;
t1137 = -t1105 * t900 + t1119 * t903;
t1173 = -t1120 * t901 + t1137 * t904;
t1138 = t1105 * t903 + t1119 * t900;
t1174 = t1120 * t904 + t1137 * t901;
t1191 = -t1138 * t891 + t1174 * t895;
t1223 = t1173 * t893 - t1191 * t889;
t1192 = t1138 * t895 + t1174 * t891;
t1222 = t1173 * t889 + t1191 * t893;
t1234 = -t1192 * t892 + t1222 * t896;
t1247 = t1223 * t894 - t1234 * t890;
t1246 = t1223 * t890 + t1234 * t894;
t1245 = pkin(2) * t1224;
t1244 = pkin(2) * t1225;
t1235 = t1192 * t896 + t1222 * t892;
t1231 = (-t1224 * t895 - t1225 * t891) * pkin(8);
t1230 = pkin(8) * t1189;
t1053 = t874 * t899;
t1026 = t850 * t1053;
t1052 = t874 * t902;
t822 = t852 * t1052;
t1010 = -t822 - t1026;
t1025 = t850 * t1052;
t821 = t852 * t1053;
t1011 = -t821 + t1025;
t1097 = t1011 * t903 - t847 * t900;
t1115 = -t1010 * t901 + t1097 * t904;
t1101 = t1011 * t900 + t903 * t847;
t1116 = t1010 * t904 + t1097 * t901;
t1139 = -t1101 * t891 + t1116 * t895;
t1172 = t1115 * t893 - t1139 * t889;
t1140 = t1101 * t895 + t1116 * t891;
t1171 = t1115 * t889 + t1139 * t893;
t1193 = -t1140 * t892 + t1171 * t896;
t1221 = t1172 * t894 - t1193 * t890;
t1220 = t1172 * t890 + t1193 * t894;
t1028 = t900 * t1059;
t789 = -qJD(5) * t852 - t1020;
t942 = -t789 * t899 - t1025;
t1099 = t903 * t942 - t1028;
t941 = -t789 * t902 + t1026;
t1113 = t1099 * t904 - t901 * t941;
t1027 = t903 * t1059;
t1100 = t900 * t942 + t1027;
t1114 = t1099 * t901 + t904 * t941;
t1141 = -t1100 * t891 + t1114 * t895;
t1170 = t1113 * t893 - t1141 * t889;
t1142 = t1100 * t895 + t1114 * t891;
t1169 = t1113 * t889 + t1141 * t893;
t1195 = -t1142 * t892 + t1169 * t896;
t1219 = t1170 * t894 - t1195 * t890;
t1218 = t1170 * t890 + t1195 * t894;
t802 = -t846 - t1092;
t709 = t802 * t902 + t1072;
t1217 = pkin(3) * t709;
t1216 = pkin(4) * t709;
t703 = t802 * t899 - t1071;
t1215 = pkin(10) * t703;
t1214 = pkin(10) * t709;
t1213 = pkin(9) * t1175;
t1212 = pkin(9) * t1176;
t1211 = t703 * t900;
t1210 = t703 * t903;
t1209 = t709 * t901;
t1208 = t709 * t904;
t1197 = -pkin(3) * t1176 - pkin(4) * t1104 - pkin(10) * t1146;
t1196 = t1142 * t896 + t1169 * t892;
t1194 = t1140 * t896 + t1171 * t892;
t1188 = pkin(10) * t1147;
t748 = -t902 * t908 + t821;
t1013 = t900 * t748 - t1027;
t1043 = t895 * t904;
t1012 = t903 * t748 + t1028;
t1132 = t1012 * t901;
t747 = t899 * t908 + t822;
t1095 = -t1013 * t891 + t747 * t1043 + t1132 * t895;
t1096 = t1012 * t904 - t747 * t901;
t1111 = -t1095 * t889 + t1096 * t893;
t1048 = t891 * t904;
t1094 = t1013 * t895 + t747 * t1048 + t1132 * t891;
t1112 = t1095 * t893 + t1096 * t889;
t1143 = -t1094 * t892 + t1112 * t896;
t1168 = t1111 * t894 - t1143 * t890;
t1167 = t1111 * t890 + t1143 * t894;
t1103 = -t1092 - t1093;
t1118 = t1103 * t899 + t1069;
t1166 = pkin(3) * t1118;
t1165 = pkin(4) * t1118;
t1117 = t1103 * t902 - t1070;
t1164 = pkin(10) * t1117;
t1163 = pkin(10) * t1118;
t1160 = qJ(6) * t1106;
t1153 = t1117 * t900;
t1152 = t1117 * t903;
t1151 = t1118 * t901;
t1150 = t1118 * t904;
t1031 = qJDD(3) * t901;
t905 = qJD(3) ^ 2;
t945 = t904 * t905 + t1031;
t836 = t945 * t891;
t838 = t945 * t895;
t1029 = qJDD(3) * t904;
t859 = -t901 * t905 + t1029;
t949 = t838 * t893 + t859 * t889;
t751 = -t836 * t892 + t896 * t949;
t791 = t838 * t889 - t859 * t893;
t685 = t751 * t890 + t791 * t894;
t1145 = t751 * t894 - t791 * t890;
t1144 = t1094 * t896 + t1112 * t892;
t1136 = -2 * qJD(6);
t1091 = qJD(4) ^ 2;
t864 = g(1) * t894 + g(2) * t890;
t863 = g(1) * t890 - t894 * g(2);
t886 = g(3) - qJDD(1);
t946 = t863 * t896 - t886 * t892;
t774 = -t864 * t889 - t893 * t946;
t775 = -t864 * t893 + t889 * t946;
t823 = t863 * t892 + t896 * t886 - qJDD(2);
t666 = t775 * t904 + (-t774 * t895 - t823 * t891) * t901;
t660 = -pkin(3) * t905 + qJDD(3) * pkin(9) + t666;
t717 = -t774 * t891 + t823 * t895;
t714 = t903 * t717;
t1089 = pkin(4) * t903;
t1014 = -pkin(10) * t900 - t1089;
t853 = t1014 * qJD(3);
t592 = (qJD(3) * t853 + t660) * t900 - qJDD(4) * pkin(4) - t1091 * pkin(10) + t714;
t1121 = -t789 * pkin(5) - t1160 + t592;
t609 = t903 * t660 - t900 * t717;
t593 = -pkin(4) * t1091 + qJDD(4) * pkin(10) + t1037 * t853 + t609;
t1005 = -t856 + t878;
t1006 = t855 + t1022;
t665 = t774 * t1043 + t823 * t1048 + t775 * t901;
t659 = -qJDD(3) * pkin(3) - t905 * pkin(9) + t665;
t624 = pkin(4) * t1005 - pkin(10) * t1006 + t659;
t535 = t902 * t593 + t899 * t624;
t799 = pkin(5) * t850 - qJ(6) * t852;
t1004 = -t847 * qJ(6) + t1136 * t874 - t850 * t799 + t535;
t1098 = t836 * t896 + t892 * t949;
t1090 = pkin(4) * t900;
t1088 = pkin(5) * t902;
t579 = t665 * t901 + t666 * t904;
t1087 = pkin(8) * t579;
t698 = t774 * t889 + t775 * t893;
t1086 = qJ(2) * t698;
t1085 = qJ(6) * t902;
t1084 = t592 * t899;
t1083 = t592 * t902;
t1082 = t659 * t900;
t1081 = t659 * t903;
t1068 = t823 * t890;
t1067 = t823 * t892;
t1066 = t823 * t894;
t1065 = t823 * t896;
t1057 = t852 * t874;
t873 = t900 * t905 * t903;
t865 = qJDD(4) + t873;
t1056 = t865 * t900;
t866 = qJDD(4) - t873;
t1055 = t866 * t900;
t1054 = t866 * t903;
t884 = t900 ^ 2;
t1051 = t884 * t905;
t1050 = t890 * t886;
t1047 = t892 * t893;
t1046 = t893 * t896;
t1045 = t894 * t886;
t1042 = t901 * t717;
t1041 = t904 * t717;
t534 = t899 * t593 - t902 * t624;
t1040 = t1104 - t1092;
t885 = t903 ^ 2;
t1039 = t884 + t885;
t1023 = qJDD(3) * t889 * t891;
t1021 = qJ(6) * t899 + pkin(4);
t608 = t660 * t900 + t714;
t533 = t608 * t900 + t903 * t609;
t807 = -t863 * t890 - t894 * t864;
t1018 = t901 * t873;
t1017 = t904 * t873;
t1015 = t852 * t799 + qJDD(6) + t534;
t532 = t608 * t903 - t609 * t900;
t858 = t1039 * qJDD(3);
t882 = t885 * t905;
t861 = t882 + t1051;
t803 = t858 * t904 - t861 * t901;
t1009 = pkin(8) * t803 + t532 * t901;
t1008 = -pkin(8) * t859 - t1042;
t1007 = -pkin(8) * t945 + t1041;
t514 = -pkin(5) * t1092 + t1004;
t938 = pkin(5) * t847 + t1015;
t515 = qJ(6) * t1092 - t938;
t451 = t514 * t902 - t515 * t899;
t544 = (-pkin(5) * t874 + t1136) * t852 + t1121;
t426 = t451 * t903 + t544 * t900;
t450 = t514 * t899 + t515 * t902;
t1001 = t426 * t901 - t450 * t904;
t425 = t451 * t900 - t544 * t903;
t369 = t1001 * t895 - t891 * t425;
t392 = t426 * t904 + t450 * t901;
t1003 = t369 * t893 + t392 * t889;
t464 = t534 * t899 + t535 * t902;
t437 = t464 * t903 + t592 * t900;
t463 = -t534 * t902 + t535 * t899;
t1000 = t437 * t901 - t463 * t904;
t436 = t464 * t900 - t592 * t903;
t382 = t1000 * t895 - t891 * t436;
t401 = t437 * t904 + t463 * t901;
t1002 = t382 * t893 + t401 * t889;
t994 = t533 * t901 - t659 * t904;
t449 = t532 * t891 + t895 * t994;
t500 = t533 * t904 + t659 * t901;
t999 = t449 * t893 + t500 * t889;
t640 = t1106 * t903 + t1211;
t642 = -t1106 * t900 + t1210;
t973 = t642 * t901 + t1208;
t538 = -t640 * t891 + t895 * t973;
t586 = t642 * t904 - t1209;
t993 = t538 * t893 + t586 * t889;
t641 = -t756 * t903 + t1153;
t643 = t756 * t900 + t1152;
t972 = t643 * t901 - t1150;
t539 = -t641 * t891 + t895 * t972;
t587 = t643 * t904 + t1151;
t992 = t539 * t893 + t587 * t889;
t762 = t1035 * t850 + t943;
t644 = t762 * t903 - t1211;
t646 = -t762 * t900 - t1210;
t971 = t646 * t901 - t1208;
t542 = -t644 * t891 + t895 * t971;
t594 = t646 * t904 + t1209;
t991 = t542 * t893 + t594 * t889;
t755 = -t789 - t1057;
t645 = -t755 * t903 + t1153;
t647 = t755 * t900 + t1152;
t970 = t647 * t901 - t1150;
t543 = -t645 * t891 + t895 * t970;
t595 = t647 * t904 + t1151;
t990 = t543 * t893 + t595 * t889;
t578 = t665 * t904 - t666 * t901;
t558 = -t578 * t895 + t717 * t891;
t985 = t558 * t893 + t579 * t889;
t576 = t579 * t895;
t980 = t576 * t893 + t578 * t889;
t854 = 0.2e1 * t1022 + t1032;
t857 = -0.2e1 * t878 + t1030;
t797 = t854 * t903 + t857 * t900;
t798 = -t854 * t900 + t857 * t903;
t862 = t882 - t1051;
t953 = t798 * t901 + t862 * t904;
t700 = -t797 * t891 + t895 * t953;
t764 = t798 * t904 - t862 * t901;
t963 = t700 * t893 + t764 * t889;
t849 = t903 * t865;
t871 = -t882 - t1091;
t814 = t871 * t900 + t849;
t818 = t871 * t903 - t1056;
t951 = t818 * t901 + t857 * t904;
t707 = -t814 * t891 + t895 * t951;
t770 = t818 * t904 - t857 * t901;
t962 = t707 * t893 + t770 * t889;
t869 = -t1051 - t1091;
t816 = t869 * t903 - t1055;
t820 = -t869 * t900 - t1054;
t950 = t820 * t901 - t854 * t904;
t708 = -t816 * t891 + t895 * t950;
t771 = t820 * t904 + t854 * t901;
t961 = t708 * t893 + t771 * t889;
t870 = t882 - t1091;
t813 = t870 * t900 + t1054;
t817 = t870 * t903 - t1055;
t940 = -t1029 * t903 + t817 * t901;
t720 = -t813 * t891 + t895 * t940;
t785 = t1030 * t901 + t817 * t904;
t960 = t720 * t893 + t785 * t889;
t868 = -t1051 + t1091;
t815 = t868 * t903 + t1056;
t819 = -t868 * t900 + t849;
t939 = -t1029 * t900 + t819 * t901;
t721 = -t815 * t891 + t895 * t939;
t786 = t1031 * t900 + t819 * t904;
t959 = t721 * t893 + t786 * t889;
t811 = t1005 * t903;
t824 = -t1033 * t885 - t856 * t900;
t937 = t824 * t901 - t1017;
t724 = t811 * t891 + t895 * t937;
t787 = t824 * t904 + t1018;
t958 = t724 * t893 + t787 * t889;
t812 = t1006 * t900;
t825 = -t1033 * t884 + t855 * t903;
t936 = t825 * t901 + t1017;
t725 = -t812 * t891 + t895 * t936;
t788 = t825 * t904 - t1018;
t957 = t725 * t893 + t788 * t889;
t697 = t774 * t893 - t775 * t889;
t947 = t858 * t901 + t861 * t904;
t796 = t947 * t895;
t954 = t796 * t893 + t803 * t889;
t848 = t1039 * t1033;
t944 = -qJDD(4) * t904 + t848 * t901;
t805 = t944 * t895;
t826 = qJDD(4) * t901 + t848 * t904;
t952 = t805 * t893 + t826 * t889;
t839 = t859 * t895;
t948 = t839 * t893 - t889 * t945;
t806 = t863 * t894 - t864 * t890;
t400 = -pkin(4) * t450 - pkin(5) * t515 - qJ(6) * t514;
t405 = -pkin(10) * t450 + (pkin(5) * t899 - t1085) * t544;
t357 = -pkin(9) * t425 - t400 * t900 + t405 * t903;
t371 = -pkin(3) * t425 - pkin(10) * t451 + (t1021 + t1088) * t544;
t935 = pkin(8) * t392 + t357 * t901 + t371 * t904;
t386 = -pkin(9) * t436 + (-pkin(10) * t903 + t1090) * t463;
t395 = -pkin(3) * t436 + pkin(4) * t592 - pkin(10) * t464;
t934 = pkin(8) * t401 + t386 * t901 + t395 * t904;
t504 = pkin(5) * t1040 + t1004;
t506 = qJ(6) * t1040 + t938;
t434 = -t504 * t899 + t506 * t902 - t1188;
t581 = -pkin(4) * t1147 - pkin(5) * t1105 + qJ(6) * t757;
t415 = t434 * t903 - t581 * t900 - t1212;
t421 = -t504 * t902 - t506 * t899 + t1197;
t933 = t415 * t901 + t421 * t904 + t1230;
t483 = t1216 + qJ(6) * t909 + (t802 + t1092) * pkin(5) - t1004;
t906 = 0.2e1 * qJD(6) * t852 - t1121;
t529 = pkin(5) * t1057 + t1160 + t906;
t496 = -pkin(5) * t1075 + t529 * t902 + t1214;
t422 = -pkin(9) * t640 - t483 * t900 + t496 * t903;
t468 = -pkin(3) * t640 - t1215 - t529 * t899 + (-pkin(4) - t1088) * t1106;
t932 = pkin(8) * t586 + t422 * t901 + t468 * t904;
t486 = -t1165 + (-t1103 - t1092) * qJ(6) + (-t910 + t847) * pkin(5) + t1015;
t530 = (-t755 + t1057) * pkin(5) + t906;
t499 = -t1085 * t755 - t530 * t899 - t1163;
t424 = -pkin(9) * t645 - t486 * t900 + t499 * t903;
t469 = -pkin(3) * t645 + t1021 * t755 - t530 * t902 - t1164;
t931 = pkin(8) * t595 + t424 * t901 + t469 * t904;
t456 = -t463 - t1188;
t431 = t1090 * t1147 + t456 * t903 - t1212;
t435 = t1197 - t464;
t930 = t431 * t901 + t435 * t904 + t1230;
t512 = t534 - t1165;
t561 = t1084 - t1163;
t452 = -pkin(9) * t641 - t512 * t900 + t561 * t903;
t505 = -pkin(3) * t641 + pkin(4) * t756 + t1083 - t1164;
t929 = pkin(8) * t587 + t452 * t901 + t505 * t904;
t513 = t535 - t1216;
t562 = t1083 - t1214;
t455 = -pkin(9) * t644 - t513 * t900 + t562 * t903;
t508 = -pkin(3) * t644 - pkin(4) * t762 - t1084 + t1215;
t928 = pkin(8) * t594 + t455 * t901 + t508 * t904;
t588 = -pkin(3) * t814 + t608;
t633 = -pkin(9) * t814 + t1082;
t927 = pkin(8) * t770 + t588 * t904 + t633 * t901;
t589 = -pkin(3) * t816 + t609;
t634 = -pkin(9) * t816 + t1081;
t926 = pkin(8) * t771 + t589 * t904 + t634 * t901;
t354 = -pkin(3) * t450 + pkin(9) * t426 + t400 * t903 + t405 * t900;
t368 = t1001 * t891 + t895 * t425;
t326 = -pkin(2) * t368 - t354 * t891 + t895 * t935;
t328 = t357 * t904 - t371 * t901 + (-t368 * t891 - t369 * t895) * pkin(8);
t353 = -t369 * t889 + t392 * t893;
t925 = qJ(2) * t353 + t326 * t893 + t328 * t889;
t370 = pkin(9) * t437 + (-pkin(3) + t1014) * t463;
t381 = t1000 * t891 + t895 * t436;
t333 = -pkin(2) * t381 - t370 * t891 + t895 * t934;
t341 = t386 * t904 - t395 * t901 + (-t381 * t891 - t382 * t895) * pkin(8);
t358 = -t382 * t889 + t401 * t893;
t924 = qJ(2) * t358 + t333 * t893 + t341 * t889;
t404 = -pkin(3) * t1147 + t434 * t900 + t581 * t903 + t1213;
t356 = -t404 * t891 + t895 * t933 - t1244;
t367 = t415 * t904 - t421 * t901 + t1231;
t923 = t356 * t893 + t367 * t889 + t1252;
t423 = t1213 + t456 * t900 + (-pkin(3) - t1089) * t1147;
t360 = -t423 * t891 + t895 * t930 - t1244;
t373 = t431 * t904 - t435 * t901 + t1231;
t922 = t360 * t893 + t373 * t889 + t1252;
t419 = pkin(9) * t642 + t483 * t903 + t496 * t900 + t1217;
t536 = t640 * t895 + t891 * t973;
t362 = -pkin(2) * t536 - t419 * t891 + t895 * t932;
t383 = t422 * t904 - t468 * t901 + (-t536 * t891 - t538 * t895) * pkin(8);
t484 = -t538 * t889 + t586 * t893;
t921 = qJ(2) * t484 + t362 * t893 + t383 * t889;
t420 = pkin(9) * t647 + t486 * t903 + t499 * t900 - t1166;
t541 = t645 * t895 + t891 * t970;
t364 = -pkin(2) * t541 - t420 * t891 + t895 * t931;
t384 = t424 * t904 - t469 * t901 + (-t541 * t891 - t543 * t895) * pkin(8);
t488 = -t543 * t889 + t595 * t893;
t920 = qJ(2) * t488 + t364 * t893 + t384 * t889;
t438 = pkin(9) * t643 + t512 * t903 + t561 * t900 - t1166;
t537 = t641 * t895 + t891 * t972;
t375 = -pkin(2) * t537 - t438 * t891 + t895 * t929;
t393 = t452 * t904 - t505 * t901 + (-t537 * t891 - t539 * t895) * pkin(8);
t485 = -t539 * t889 + t587 * t893;
t919 = qJ(2) * t485 + t375 * t893 + t393 * t889;
t443 = pkin(9) * t646 + t513 * t903 + t562 * t900 - t1217;
t540 = t644 * t895 + t891 * t971;
t378 = -pkin(2) * t540 - t443 * t891 + t895 * t928;
t394 = t455 * t904 - t508 * t901 + (-t540 * t891 - t542 * t895) * pkin(8);
t487 = -t542 * t889 + t594 * t893;
t918 = qJ(2) * t487 + t378 * t893 + t394 * t889;
t448 = -t532 * t895 + t891 * t994;
t501 = -pkin(3) * t659 + pkin(9) * t533;
t907 = pkin(8) * t500 - (-pkin(3) * t904 - pkin(9) * t901) * t532;
t380 = -pkin(2) * t448 - t501 * t891 + t895 * t907;
t385 = -(pkin(3) * t901 - pkin(9) * t904) * t532 + (-t448 * t891 - t449 * t895) * pkin(8);
t416 = -t449 * t889 + t500 * t893;
t917 = qJ(2) * t416 + t380 * t893 + t385 * t889;
t528 = pkin(3) * t861 + pkin(9) * t858 + t533;
t795 = t947 * t891;
t454 = -pkin(2) * t795 + t1009 * t895 - t528 * t891;
t509 = t904 * t532 + (-t795 * t891 - t796 * t895) * pkin(8);
t726 = -t796 * t889 + t803 * t893;
t916 = qJ(2) * t726 + t454 * t893 + t509 * t889;
t623 = pkin(3) * t857 + pkin(9) * t818 - t1081;
t705 = t814 * t895 + t891 * t951;
t480 = -pkin(2) * t705 - t623 * t891 + t895 * t927;
t497 = -t588 * t901 + t633 * t904 + (-t705 * t891 - t707 * t895) * pkin(8);
t657 = -t707 * t889 + t770 * t893;
t915 = qJ(2) * t657 + t480 * t893 + t497 * t889;
t622 = -pkin(3) * t854 + pkin(9) * t820 + t1082;
t706 = t816 * t895 + t891 * t950;
t481 = -pkin(2) * t706 - t622 * t891 + t895 * t926;
t498 = -t589 * t901 + t634 * t904 + (-t706 * t891 - t708 * t895) * pkin(8);
t658 = -t708 * t889 + t771 * t893;
t914 = qJ(2) * t658 + t481 * t893 + t498 * t889;
t557 = -t578 * t891 - t717 * t895;
t482 = (-t557 * t891 - t558 * t895) * pkin(8);
t489 = -t558 * t889 + t579 * t893;
t490 = -pkin(2) * t557 + t1087 * t895;
t913 = qJ(2) * t489 + t482 * t889 + t490 * t893;
t584 = pkin(2) * t836 + t1008 * t895 + t666 * t891;
t676 = -t1041 + (t836 * t891 + t838 * t895) * pkin(8);
t912 = qJ(2) * t791 + t584 * t893 + t676 * t889;
t837 = t859 * t891;
t585 = -pkin(2) * t837 + t1007 * t895 + t665 * t891;
t675 = -t1042 + (-t837 * t891 - t839 * t895) * pkin(8);
t792 = -t839 * t889 - t893 * t945;
t911 = qJ(2) * t792 + t585 * t893 + t675 * t889;
t834 = (-t1046 * t891 - t892 * t895) * qJDD(3);
t804 = t944 * t891;
t754 = -t805 * t889 + t826 * t893;
t753 = -t837 * t892 + t896 * t948;
t750 = t837 * t896 + t892 * t948;
t723 = t812 * t895 + t891 * t936;
t722 = -t811 * t895 + t891 * t937;
t719 = t815 * t895 + t891 * t939;
t718 = t813 * t895 + t891 * t940;
t716 = t1046 * t823 + t774 * t892;
t715 = -t1065 * t889 + t775 * t892;
t699 = t797 * t895 + t891 * t953;
t696 = t698 * t896;
t695 = -t804 * t892 + t896 * t952;
t686 = -t753 * t890 + t792 * t894;
t684 = t753 * t894 + t792 * t890;
t682 = -t795 * t892 + t896 * t954;
t681 = t795 * t896 + t892 * t954;
t680 = -t725 * t889 + t788 * t893;
t679 = -t724 * t889 + t787 * t893;
t678 = -t721 * t889 + t786 * t893;
t677 = -t720 * t889 + t785 * t893;
t662 = -t697 * t896 + t1067;
t661 = -t697 * t892 - t1065;
t639 = -t700 * t889 + t764 * t893;
t619 = -t682 * t890 + t726 * t894;
t618 = t682 * t894 + t726 * t890;
t617 = -t723 * t892 + t896 * t957;
t616 = -t722 * t892 + t896 * t958;
t615 = -t719 * t892 + t896 * t959;
t614 = -t718 * t892 + t896 * t960;
t602 = -t706 * t892 + t896 * t961;
t601 = -t705 * t892 + t896 * t962;
t600 = t706 * t896 + t892 * t961;
t599 = t705 * t896 + t892 * t962;
t598 = -pkin(1) * t661 + t1086 * t896;
t597 = -t662 * t890 + t698 * t894;
t596 = t662 * t894 + t698 * t890;
t583 = pkin(2) * t839 + t1007 * t891 - t665 * t895;
t582 = -pkin(2) * t838 + t1008 * t891 - t666 * t895;
t580 = -t699 * t892 + t896 * t963;
t577 = (-t661 * t892 - t662 * t896) * qJ(2);
t575 = t579 * t891;
t548 = -t602 * t890 + t658 * t894;
t547 = -t601 * t890 + t657 * t894;
t546 = t602 * t894 + t658 * t890;
t545 = t601 * t894 + t657 * t890;
t511 = -t584 * t889 + t676 * t893 + (t1098 * t892 + t751 * t896) * qJ(2);
t510 = -t585 * t889 + t675 * t893 + (-t750 * t892 - t753 * t896) * qJ(2);
t507 = -t576 * t889 + t578 * t893;
t491 = pkin(2) * t558 + t1087 * t891;
t479 = pkin(2) * t708 + t622 * t895 + t891 * t926;
t478 = pkin(2) * t707 + t623 * t895 + t891 * t927;
t477 = pkin(1) * t1098 - t582 * t892 + t896 * t912;
t476 = -pkin(1) * t750 - t583 * t892 + t896 * t911;
t465 = -t892 * t575 + t896 * t980;
t462 = -t892 * t557 + t896 * t985;
t461 = t896 * t557 + t892 * t985;
t453 = pkin(2) * t796 + t1009 * t891 + t528 * t895;
t447 = -t892 * t541 + t896 * t990;
t446 = -t892 * t540 + t896 * t991;
t445 = t896 * t541 + t892 * t990;
t444 = t896 * t540 + t892 * t991;
t442 = -t892 * t537 + t896 * t992;
t441 = -t892 * t536 + t896 * t993;
t440 = t896 * t537 + t892 * t992;
t439 = t896 * t536 + t892 * t993;
t418 = -t462 * t890 + t489 * t894;
t417 = t462 * t894 + t489 * t890;
t414 = -t447 * t890 + t488 * t894;
t413 = -t446 * t890 + t487 * t894;
t412 = t447 * t894 + t488 * t890;
t411 = t446 * t894 + t487 * t890;
t410 = -t442 * t890 + t485 * t894;
t409 = -t441 * t890 + t484 * t894;
t408 = t442 * t894 + t485 * t890;
t407 = t441 * t894 + t484 * t890;
t406 = -t454 * t889 + t509 * t893 + (-t681 * t892 - t682 * t896) * qJ(2);
t403 = -t481 * t889 + t498 * t893 + (-t600 * t892 - t602 * t896) * qJ(2);
t402 = -t480 * t889 + t497 * t893 + (-t599 * t892 - t601 * t896) * qJ(2);
t391 = -pkin(1) * t600 - t479 * t892 + t896 * t914;
t390 = -pkin(1) * t599 - t478 * t892 + t896 * t915;
t389 = -t892 * t448 + t896 * t999;
t388 = t896 * t448 + t892 * t999;
t387 = -pkin(1) * t681 - t453 * t892 + t896 * t916;
t379 = pkin(2) * t449 + t501 * t895 + t891 * t907;
t377 = pkin(2) * t542 + t443 * t895 + t891 * t928;
t376 = t482 * t893 - t490 * t889 + (-t461 * t892 - t462 * t896) * qJ(2);
t374 = pkin(2) * t539 + t438 * t895 + t891 * t929;
t372 = -pkin(1) * t461 - t491 * t892 + t896 * t913;
t366 = -t389 * t890 + t416 * t894;
t365 = t389 * t894 + t416 * t890;
t363 = pkin(2) * t543 + t420 * t895 + t891 * t931;
t361 = pkin(2) * t538 + t419 * t895 + t891 * t932;
t359 = t423 * t895 + t891 * t930 + t1245;
t355 = t404 * t895 + t891 * t933 + t1245;
t352 = -t378 * t889 + t394 * t893 + (-t444 * t892 - t446 * t896) * qJ(2);
t351 = -t375 * t889 + t393 * t893 + (-t440 * t892 - t442 * t896) * qJ(2);
t350 = t1002 * t896 - t892 * t381;
t349 = t1002 * t892 + t896 * t381;
t348 = -t364 * t889 + t384 * t893 + (-t445 * t892 - t447 * t896) * qJ(2);
t347 = -t362 * t889 + t383 * t893 + (-t439 * t892 - t441 * t896) * qJ(2);
t346 = t1003 * t896 - t892 * t368;
t345 = t1003 * t892 + t896 * t368;
t344 = -pkin(1) * t444 - t377 * t892 + t896 * t918;
t343 = -pkin(1) * t440 - t374 * t892 + t896 * t919;
t342 = -t360 * t889 + t373 * t893 + t1253;
t340 = -t380 * t889 + t385 * t893 + (-t388 * t892 - t389 * t896) * qJ(2);
t339 = -t356 * t889 + t367 * t893 + t1253;
t338 = -t350 * t890 + t358 * t894;
t337 = t350 * t894 + t358 * t890;
t336 = -pkin(1) * t445 - t363 * t892 + t896 * t920;
t335 = -pkin(1) * t388 - t379 * t892 + t896 * t917;
t334 = -pkin(1) * t439 - t361 * t892 + t896 * t921;
t332 = pkin(2) * t382 + t370 * t895 + t891 * t934;
t331 = -t359 * t892 + t896 * t922 - t1260;
t330 = -t346 * t890 + t353 * t894;
t329 = t346 * t894 + t353 * t890;
t327 = -t355 * t892 + t896 * t923 - t1260;
t325 = pkin(2) * t369 + t354 * t895 + t891 * t935;
t324 = -t333 * t889 + t341 * t893 + (-t349 * t892 - t350 * t896) * qJ(2);
t323 = -pkin(1) * t349 - t332 * t892 + t896 * t924;
t322 = -t326 * t889 + t328 * t893 + (-t345 * t892 - t346 * t896) * qJ(2);
t321 = -pkin(1) * t345 - t325 * t892 + t896 * t925;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t807, 0, 0, 0, 0, 0, 0, 0, 0, 0, t597, 0, 0, 0, 0, 0, 0, t686, t685, 0, t418, 0, 0, 0, 0, 0, 0, t547, t548, t619, t366, 0, 0, 0, 0, 0, 0, t410, t413, t1255, t338, 0, 0, 0, 0, 0, 0, t414, t1255, t409, t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t806, 0, 0, 0, 0, 0, 0, 0, 0, 0, t596, 0, 0, 0, 0, 0, 0, t684, -t1145, 0, t417, 0, 0, 0, 0, 0, 0, t545, t546, t618, t365, 0, 0, 0, 0, 0, 0, t408, t411, t1254, t337, 0, 0, 0, 0, 0, 0, t412, t1254, t407, t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t886, 0, 0, 0, 0, 0, 0, 0, 0, 0, t661, 0, 0, 0, 0, 0, 0, t750, -t1098, 0, t461, 0, 0, 0, 0, 0, 0, t599, t600, t681, t388, 0, 0, 0, 0, 0, 0, t440, t444, t1249, t349, 0, 0, 0, 0, 0, 0, t445, t1249, t439, t345; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1050, -t1045, -t806, -qJ(1) * t806, 0, 0, 0, 0, 0, 0, -t1066 * t889 - t716 * t890, -t1066 * t893 - t715 * t890, -t696 * t890 + t697 * t894, -qJ(1) * t596 + t577 * t894 - t598 * t890, 0, 0, -t685, 0, t686, t1023 * t894 - t834 * t890, -qJ(1) * t684 - t476 * t890 + t510 * t894, qJ(1) * t1145 - t477 * t890 + t511 * t894, -t465 * t890 + t507 * t894, -qJ(1) * t417 - t372 * t890 + t376 * t894, -t617 * t890 + t680 * t894, -t580 * t890 + t639 * t894, -t615 * t890 + t678 * t894, -t616 * t890 + t679 * t894, -t614 * t890 + t677 * t894, -t695 * t890 + t754 * t894, -qJ(1) * t545 - t390 * t890 + t402 * t894, -qJ(1) * t546 - t391 * t890 + t403 * t894, -qJ(1) * t618 - t387 * t890 + t406 * t894, -qJ(1) * t365 - t335 * t890 + t340 * t894, t1168, -t1275, t1247, t1219, -t1277, t1221, -qJ(1) * t408 - t343 * t890 + t351 * t894, -qJ(1) * t411 - t344 * t890 + t352 * t894, -t331 * t890 + t342 * t894 - t1263, -qJ(1) * t337 - t323 * t890 + t324 * t894, t1168, t1247, t1275, t1221, t1277, t1219, -qJ(1) * t412 - t336 * t890 + t348 * t894, -t327 * t890 + t339 * t894 - t1263, -qJ(1) * t407 - t334 * t890 + t347 * t894, -qJ(1) * t329 - t321 * t890 + t322 * t894; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1045, -t1050, t807, qJ(1) * t807, 0, 0, 0, 0, 0, 0, -t1068 * t889 + t716 * t894, -t1068 * t893 + t715 * t894, t696 * t894 + t697 * t890, qJ(1) * t597 + t577 * t890 + t598 * t894, 0, 0, t1145, 0, t684, t1023 * t890 + t834 * t894, qJ(1) * t686 + t476 * t894 + t510 * t890, qJ(1) * t685 + t477 * t894 + t511 * t890, t465 * t894 + t507 * t890, qJ(1) * t418 + t372 * t894 + t376 * t890, t617 * t894 + t680 * t890, t580 * t894 + t639 * t890, t615 * t894 + t678 * t890, t616 * t894 + t679 * t890, t614 * t894 + t677 * t890, t695 * t894 + t754 * t890, qJ(1) * t547 + t390 * t894 + t402 * t890, qJ(1) * t548 + t391 * t894 + t403 * t890, qJ(1) * t619 + t387 * t894 + t406 * t890, qJ(1) * t366 + t335 * t894 + t340 * t890, t1167, t1274, t1246, t1218, t1276, t1220, qJ(1) * t410 + t343 * t894 + t351 * t890, qJ(1) * t413 + t344 * t894 + t352 * t890, t331 * t894 + t342 * t890 + t1262, qJ(1) * t338 + t323 * t894 + t324 * t890, t1167, t1246, -t1274, t1220, -t1276, t1218, qJ(1) * t414 + t336 * t894 + t348 * t890, t327 * t894 + t339 * t890 + t1262, qJ(1) * t409 + t334 * t894 + t347 * t890, qJ(1) * t330 + t321 * t894 + t322 * t890; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t863, t864, 0, 0, 0, 0, 0, 0, 0, 0, t1047 * t823 - t774 * t896, -t1067 * t889 - t775 * t896, t698 * t892, pkin(1) * t662 + t1086 * t892, 0, 0, t1098, 0, t750, (-t1047 * t891 + t895 * t896) * qJDD(3), pkin(1) * t753 + t583 * t896 + t892 * t911, -pkin(1) * t751 + t582 * t896 + t892 * t912, t896 * t575 + t892 * t980, pkin(1) * t462 + t491 * t896 + t892 * t913, t723 * t896 + t892 * t957, t699 * t896 + t892 * t963, t719 * t896 + t892 * t959, t722 * t896 + t892 * t958, t718 * t896 + t892 * t960, t804 * t896 + t892 * t952, pkin(1) * t601 + t478 * t896 + t892 * t915, pkin(1) * t602 + t479 * t896 + t892 * t914, pkin(1) * t682 + t453 * t896 + t892 * t916, pkin(1) * t389 + t379 * t896 + t892 * t917, t1144, t1268, t1235, t1196, t1269, t1194, pkin(1) * t442 + t374 * t896 + t892 * t919, pkin(1) * t446 + t377 * t896 + t892 * t918, t359 * t896 + t892 * t922 + t1261, pkin(1) * t350 + t332 * t896 + t892 * t924, t1144, t1235, -t1268, t1194, -t1269, t1196, pkin(1) * t447 + t363 * t896 + t892 * t920, t355 * t896 + t892 * t923 + t1261, pkin(1) * t441 + t361 * t896 + t892 * t921, pkin(1) * t346 + t325 * t896 + t892 * t925;];
tauB_reg  = t1;
