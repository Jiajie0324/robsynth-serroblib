% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PPRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 20:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PPRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:36:47
% EndTime: 2019-05-04 20:36:59
% DurationCPUTime: 12.42s
% Computational Cost: add. (33452->285), mult. (61539->414), div. (0->0), fcn. (49932->14), ass. (0->229)
t2474 = sin(qJ(4));
t2534 = qJD(3) * t2474;
t2456 = qJD(4) * t2534;
t2477 = cos(qJ(4));
t2522 = t2477 * qJDD(3);
t2519 = t2456 - t2522;
t2517 = -qJDD(5) - t2519;
t2473 = sin(qJ(5));
t2476 = cos(qJ(5));
t2434 = -qJD(4) * t2476 + t2473 * t2534;
t2436 = qJD(4) * t2473 + t2476 * t2534;
t2526 = t2434 * t2436;
t2398 = t2517 - t2526;
t2433 = t2436 ^ 2;
t2533 = qJD(3) * t2477;
t2454 = qJD(5) - t2533;
t2535 = t2454 ^ 2;
t2540 = -t2433 - t2535;
t2373 = t2398 * t2476 - t2473 * t2540;
t2521 = qJD(4) * t2533;
t2523 = t2474 * qJDD(3);
t2439 = t2521 + t2523;
t2482 = -qJD(5) * t2434 + qJDD(4) * t2473 + t2439 * t2476;
t2525 = t2434 * t2454;
t2481 = t2482 - t2525;
t2343 = t2373 * t2474 - t2477 * t2481;
t2465 = sin(pkin(7));
t2469 = cos(pkin(7));
t2345 = t2373 * t2477 + t2474 * t2481;
t2371 = t2398 * t2473 + t2476 * t2540;
t2475 = sin(qJ(3));
t2478 = cos(qJ(3));
t2499 = t2345 * t2475 - t2371 * t2478;
t2310 = t2469 * t2343 + t2465 * t2499;
t2466 = sin(pkin(6));
t2470 = cos(pkin(6));
t2312 = -t2465 * t2343 + t2469 * t2499;
t2325 = t2345 * t2478 + t2371 * t2475;
t2463 = sin(pkin(12));
t2467 = cos(pkin(12));
t2506 = t2312 * t2467 + t2325 * t2463;
t2278 = -t2466 * t2310 + t2470 * t2506;
t2290 = t2312 * t2463 - t2325 * t2467;
t2464 = sin(pkin(11));
t2468 = cos(pkin(11));
t2585 = t2278 * t2464 + t2290 * t2468;
t2584 = t2278 * t2468 - t2290 * t2464;
t2276 = t2470 * t2310 + t2466 * t2506;
t2388 = t2482 + t2525;
t2520 = -t2476 * qJDD(4) + t2473 * t2439;
t2483 = (-qJD(5) + t2454) * t2436 - t2520;
t2538 = -t2388 * t2476 + t2473 * t2483;
t2415 = t2434 ^ 2;
t2397 = t2433 + t2415;
t2537 = t2388 * t2473 + t2476 * t2483;
t2551 = -t2397 * t2474 + t2477 * t2537;
t2556 = t2475 * t2538 + t2478 * t2551;
t2550 = t2397 * t2477 + t2474 * t2537;
t2557 = t2475 * t2551 - t2478 * t2538;
t2562 = -t2465 * t2550 + t2469 * t2557;
t2567 = -t2463 * t2562 + t2467 * t2556;
t2563 = t2465 * t2557 + t2469 * t2550;
t2566 = t2463 * t2556 + t2467 * t2562;
t2572 = -t2466 * t2563 + t2470 * t2566;
t2577 = -t2464 * t2572 + t2468 * t2567;
t2576 = t2464 * t2567 + t2468 * t2572;
t2573 = t2466 * t2566 + t2470 * t2563;
t2399 = t2517 + t2526;
t2539 = -t2535 - t2415;
t2543 = t2399 * t2473 + t2476 * t2539;
t2555 = t2474 * t2543;
t2544 = -t2399 * t2476 + t2473 * t2539;
t2554 = t2475 * t2544;
t2553 = t2477 * t2543;
t2552 = t2478 * t2544;
t2445 = g(1) * t2464 - g(2) * t2468;
t2460 = -g(3) + qJDD(1);
t2420 = -t2445 * t2466 + t2460 * t2470 + qJDD(2);
t2527 = t2420 * t2465;
t2446 = -g(1) * t2468 - g(2) * t2464;
t2486 = t2445 * t2470 + t2460 * t2466;
t2394 = -t2463 * t2446 + t2467 * t2486;
t2530 = t2394 * t2469;
t2545 = t2527 + t2530;
t2536 = qJD(4) ^ 2;
t2395 = t2467 * t2446 + t2463 * t2486;
t2355 = t2478 * t2395 + t2475 * t2545;
t2479 = qJD(3) ^ 2;
t2351 = -pkin(3) * t2479 + qJDD(3) * pkin(9) + t2355;
t2493 = -t2394 * t2465 + t2420 * t2469;
t2332 = t2477 * t2351 + t2474 * t2493;
t2437 = (-pkin(4) * t2477 - pkin(10) * t2474) * qJD(3);
t2324 = -pkin(4) * t2536 + qJDD(4) * pkin(10) + t2437 * t2533 + t2332;
t2518 = t2475 * t2395 - t2478 * t2545;
t2350 = -qJDD(3) * pkin(3) - t2479 * pkin(9) + t2518;
t2480 = (-t2439 - t2521) * pkin(10) + (t2519 + t2456) * pkin(4) + t2350;
t2305 = t2476 * t2324 + t2473 * t2480;
t2458 = t2474 ^ 2;
t2459 = t2477 ^ 2;
t2524 = t2458 + t2459;
t2304 = -t2473 * t2324 + t2476 * t2480;
t2409 = pkin(5) * t2434 - qJ(6) * t2436;
t2296 = -pkin(5) * t2535 - qJ(6) * t2517 + 0.2e1 * qJD(6) * t2454 - t2434 * t2409 + t2305;
t2297 = pkin(5) * t2517 - qJ(6) * t2535 + t2436 * t2409 + qJDD(6) - t2304;
t2283 = t2296 * t2476 + t2297 * t2473;
t2376 = t2477 * t2493;
t2323 = -t2376 - qJDD(4) * pkin(4) - t2536 * pkin(10) + (qJD(3) * t2437 + t2351) * t2474;
t2484 = -qJD(5) * t2436 - t2520;
t2314 = -t2484 * pkin(5) + (pkin(5) * t2454 - 0.2e1 * qJD(6)) * t2436 + t2323 - t2481 * qJ(6);
t2264 = t2283 * t2474 - t2314 * t2477;
t2265 = t2283 * t2477 + t2314 * t2474;
t2282 = t2296 * t2473 - t2297 * t2476;
t2514 = t2265 * t2475 - t2282 * t2478;
t2256 = -t2465 * t2264 + t2469 * t2514;
t2261 = t2265 * t2478 + t2282 * t2475;
t2516 = t2256 * t2467 + t2261 * t2463;
t2287 = -t2304 * t2473 + t2305 * t2476;
t2270 = t2287 * t2474 - t2323 * t2477;
t2271 = t2287 * t2477 + t2323 * t2474;
t2286 = t2304 * t2476 + t2305 * t2473;
t2513 = t2271 * t2475 - t2286 * t2478;
t2258 = -t2465 * t2270 + t2469 * t2513;
t2262 = t2271 * t2478 + t2286 * t2475;
t2515 = t2258 * t2467 + t2262 * t2463;
t2331 = -t2474 * t2351 + t2376;
t2302 = t2331 * t2477 + t2332 * t2474;
t2303 = -t2331 * t2474 + t2332 * t2477;
t2509 = t2303 * t2475 - t2350 * t2478;
t2281 = -t2465 * t2302 + t2469 * t2509;
t2295 = t2303 * t2478 + t2350 * t2475;
t2512 = t2281 * t2467 + t2295 * t2463;
t2383 = (qJD(5) + t2454) * t2436 + t2520;
t2340 = -t2383 * t2477 + t2555;
t2342 = t2383 * t2474 + t2553;
t2500 = t2342 * t2475 - t2552;
t2309 = -t2465 * t2340 + t2469 * t2500;
t2321 = t2342 * t2478 + t2554;
t2507 = t2309 * t2467 + t2321 * t2463;
t2382 = t2436 * t2454 - t2484;
t2344 = -t2382 * t2477 + t2555;
t2346 = t2382 * t2474 + t2553;
t2498 = t2346 * t2475 - t2552;
t2313 = -t2465 * t2344 + t2469 * t2498;
t2326 = t2346 * t2478 + t2554;
t2505 = t2313 * t2467 + t2326 * t2463;
t2497 = t2355 * t2475 - t2478 * t2518;
t2316 = t2465 ^ 2 * t2394 + (t2497 - t2527) * t2469;
t2319 = t2355 * t2478 + t2475 * t2518;
t2504 = t2316 * t2467 + t2319 * t2463;
t2453 = t2474 * t2479 * t2477;
t2447 = qJDD(4) + t2453;
t2451 = -t2459 * t2479 - t2536;
t2416 = t2447 * t2477 + t2451 * t2474;
t2418 = -t2447 * t2474 + t2451 * t2477;
t2440 = -0.2e1 * t2456 + t2522;
t2491 = t2418 * t2475 + t2440 * t2478;
t2369 = -t2465 * t2416 + t2469 * t2491;
t2392 = t2418 * t2478 - t2440 * t2475;
t2496 = t2369 * t2467 + t2392 * t2463;
t2448 = -qJDD(4) + t2453;
t2450 = -t2458 * t2479 - t2536;
t2417 = t2448 * t2474 + t2450 * t2477;
t2419 = t2448 * t2477 - t2450 * t2474;
t2438 = 0.2e1 * t2521 + t2523;
t2490 = t2419 * t2475 - t2438 * t2478;
t2370 = -t2465 * t2417 + t2469 * t2490;
t2393 = t2419 * t2478 + t2438 * t2475;
t2495 = t2370 * t2467 + t2393 * t2463;
t2494 = t2394 * t2467 + t2395 * t2463;
t2441 = t2524 * qJDD(3);
t2444 = t2524 * t2479;
t2487 = t2441 * t2475 + t2444 * t2478;
t2408 = t2487 * t2469;
t2414 = t2441 * t2478 - t2444 * t2475;
t2492 = t2408 * t2467 + t2414 * t2463;
t2443 = -qJDD(3) * t2475 - t2478 * t2479;
t2428 = t2443 * t2469;
t2485 = qJDD(3) * t2478 - t2475 * t2479;
t2489 = t2428 * t2467 - t2463 * t2485;
t2429 = t2485 * t2469;
t2488 = t2429 * t2467 + t2443 * t2463;
t2427 = t2485 * t2465;
t2426 = t2443 * t2465;
t2407 = t2487 * t2465;
t2404 = -t2429 * t2463 + t2443 * t2467;
t2403 = -t2428 * t2463 - t2467 * t2485;
t2381 = -t2466 * t2427 + t2470 * t2488;
t2380 = -t2466 * t2426 + t2470 * t2489;
t2379 = t2470 * t2427 + t2466 * t2488;
t2378 = t2470 * t2426 + t2466 * t2489;
t2377 = -t2408 * t2463 + t2414 * t2467;
t2368 = t2469 * t2417 + t2465 * t2490;
t2367 = t2469 * t2416 + t2465 * t2491;
t2362 = -t2394 * t2463 + t2395 * t2467;
t2361 = -t2466 * t2407 + t2470 * t2492;
t2360 = t2470 * t2407 + t2466 * t2492;
t2353 = -t2466 * t2420 + t2470 * t2494;
t2352 = t2470 * t2420 + t2466 * t2494;
t2349 = -t2370 * t2463 + t2393 * t2467;
t2348 = -t2369 * t2463 + t2392 * t2467;
t2330 = -t2466 * t2368 + t2470 * t2495;
t2329 = -t2466 * t2367 + t2470 * t2496;
t2328 = t2470 * t2368 + t2466 * t2495;
t2327 = t2470 * t2367 + t2466 * t2496;
t2315 = t2469 ^ 2 * t2420 + (t2497 - t2530) * t2465;
t2311 = t2469 * t2344 + t2465 * t2498;
t2307 = t2469 * t2340 + t2465 * t2500;
t2294 = -t2316 * t2463 + t2319 * t2467;
t2293 = -t2313 * t2463 + t2326 * t2467;
t2291 = -t2309 * t2463 + t2321 * t2467;
t2285 = -t2466 * t2315 + t2470 * t2504;
t2284 = t2470 * t2315 + t2466 * t2504;
t2280 = t2469 * t2302 + t2465 * t2509;
t2279 = -t2466 * t2311 + t2470 * t2505;
t2277 = t2470 * t2311 + t2466 * t2505;
t2275 = -t2466 * t2307 + t2470 * t2507;
t2273 = t2470 * t2307 + t2466 * t2507;
t2263 = -t2281 * t2463 + t2295 * t2467;
t2260 = -t2466 * t2280 + t2470 * t2512;
t2259 = t2470 * t2280 + t2466 * t2512;
t2257 = t2469 * t2270 + t2465 * t2513;
t2255 = t2469 * t2264 + t2465 * t2514;
t2254 = -t2258 * t2463 + t2262 * t2467;
t2253 = -t2256 * t2463 + t2261 * t2467;
t2252 = -t2466 * t2257 + t2470 * t2515;
t2251 = t2470 * t2257 + t2466 * t2515;
t2250 = -t2466 * t2255 + t2470 * t2516;
t2249 = t2470 * t2255 + t2466 * t2516;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2445 * t2464 + t2446 * t2468, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2353 * t2464 + t2362 * t2468, 0, 0, 0, 0, 0, 0, -t2381 * t2464 + t2404 * t2468, -t2380 * t2464 + t2403 * t2468, 0, -t2285 * t2464 + t2294 * t2468, 0, 0, 0, 0, 0, 0, -t2329 * t2464 + t2348 * t2468, -t2330 * t2464 + t2349 * t2468, -t2361 * t2464 + t2377 * t2468, -t2260 * t2464 + t2263 * t2468, 0, 0, 0, 0, 0, 0, -t2275 * t2464 + t2291 * t2468, -t2585, t2577, -t2252 * t2464 + t2254 * t2468, 0, 0, 0, 0, 0, 0, -t2279 * t2464 + t2293 * t2468, t2577, t2585, -t2250 * t2464 + t2253 * t2468; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2445 * t2468 + t2446 * t2464, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2353 * t2468 + t2362 * t2464, 0, 0, 0, 0, 0, 0, t2381 * t2468 + t2404 * t2464, t2380 * t2468 + t2403 * t2464, 0, t2285 * t2468 + t2294 * t2464, 0, 0, 0, 0, 0, 0, t2329 * t2468 + t2348 * t2464, t2330 * t2468 + t2349 * t2464, t2361 * t2468 + t2377 * t2464, t2260 * t2468 + t2263 * t2464, 0, 0, 0, 0, 0, 0, t2275 * t2468 + t2291 * t2464, t2584, t2576, t2252 * t2468 + t2254 * t2464, 0, 0, 0, 0, 0, 0, t2279 * t2468 + t2293 * t2464, t2576, -t2584, t2250 * t2468 + t2253 * t2464; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2460, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2352, 0, 0, 0, 0, 0, 0, t2379, t2378, 0, t2284, 0, 0, 0, 0, 0, 0, t2327, t2328, t2360, t2259, 0, 0, 0, 0, 0, 0, t2273, t2276, t2573, t2251, 0, 0, 0, 0, 0, 0, t2277, t2573, -t2276, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2446, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2362, 0, 0, 0, 0, 0, 0, t2404, t2403, 0, t2294, 0, 0, 0, 0, 0, 0, t2348, t2349, t2377, t2263, 0, 0, 0, 0, 0, 0, t2291, -t2290, t2567, t2254, 0, 0, 0, 0, 0, 0, t2293, t2567, t2290, t2253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2445, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2353, 0, 0, 0, 0, 0, 0, t2381, t2380, 0, t2285, 0, 0, 0, 0, 0, 0, t2329, t2330, t2361, t2260, 0, 0, 0, 0, 0, 0, t2275, t2278, t2572, t2252, 0, 0, 0, 0, 0, 0, t2279, t2572, -t2278, t2250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2460, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2352, 0, 0, 0, 0, 0, 0, t2379, t2378, 0, t2284, 0, 0, 0, 0, 0, 0, t2327, t2328, t2360, t2259, 0, 0, 0, 0, 0, 0, t2273, t2276, t2573, t2251, 0, 0, 0, 0, 0, 0, t2277, t2573, -t2276, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, 0, 0, 0, 0, 0, 0, t2443, -t2485, 0, t2319, 0, 0, 0, 0, 0, 0, t2392, t2393, t2414, t2295, 0, 0, 0, 0, 0, 0, t2321, t2325, t2556, t2262, 0, 0, 0, 0, 0, 0, t2326, t2556, -t2325, t2261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2394, 0, 0, 0, 0, 0, 0, t2429, t2428, 0, t2316, 0, 0, 0, 0, 0, 0, t2369, t2370, t2408, t2281, 0, 0, 0, 0, 0, 0, t2309, t2312, t2562, t2258, 0, 0, 0, 0, 0, 0, t2313, t2562, -t2312, t2256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2420, 0, 0, 0, 0, 0, 0, t2427, t2426, 0, t2315, 0, 0, 0, 0, 0, 0, t2367, t2368, t2407, t2280, 0, 0, 0, 0, 0, 0, t2307, t2310, t2563, t2257, 0, 0, 0, 0, 0, 0, t2311, t2563, -t2310, t2255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2479, -qJDD(3), 0, t2355, 0, 0, 0, 0, 0, 0, t2418, t2419, t2441, t2303, 0, 0, 0, 0, 0, 0, t2342, t2345, t2551, t2271, 0, 0, 0, 0, 0, 0, t2346, t2551, -t2345, t2265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t2479, 0, -t2518, 0, 0, 0, 0, 0, 0, t2440, -t2438, t2444, -t2350, 0, 0, 0, 0, 0, 0, -t2544, -t2371, -t2538, -t2286, 0, 0, 0, 0, 0, 0, -t2544, -t2538, t2371, -t2282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2493, 0, 0, 0, 0, 0, 0, t2416, t2417, 0, t2302, 0, 0, 0, 0, 0, 0, t2340, t2343, t2550, t2270, 0, 0, 0, 0, 0, 0, t2344, t2550, -t2343, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2451, t2448, t2522, t2332, 0, 0, 0, 0, 0, 0, t2543, t2373, t2537, t2287, 0, 0, 0, 0, 0, 0, t2543, t2537, -t2373, t2283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2447, t2450, -t2523, t2331, 0, 0, 0, 0, 0, 0, -t2383, -t2481, t2397, -t2323, 0, 0, 0, 0, 0, 0, -t2382, t2397, t2481, -t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2440, t2438, -t2444, t2350, 0, 0, 0, 0, 0, 0, t2544, t2371, t2538, t2286, 0, 0, 0, 0, 0, 0, t2544, t2538, -t2371, t2282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2539, t2398, t2483, t2305, 0, 0, 0, 0, 0, 0, t2539, t2483, -t2398, t2296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2399, t2540, -t2388, t2304, 0, 0, 0, 0, 0, 0, -t2399, -t2388, -t2540, -t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2383, t2481, -t2397, t2323, 0, 0, 0, 0, 0, 0, t2382, -t2397, -t2481, t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2539, t2483, -t2398, t2296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2382, -t2397, -t2481, t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2399, t2388, t2540, t2297;];
f_new_reg  = t1;
