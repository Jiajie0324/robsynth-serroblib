% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:58
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PPRRRP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:58:21
% EndTime: 2019-03-08 18:58:29
% DurationCPUTime: 5.65s
% Computational Cost: add. (7015->545), mult. (17987->727), div. (0->0), fcn. (16593->14), ass. (0->258)
t201 = sin(qJ(5));
t375 = pkin(9) * t201;
t342 = cos(pkin(6));
t183 = qJD(1) * t342 + qJD(2);
t197 = sin(pkin(12));
t199 = sin(pkin(6));
t203 = sin(qJ(3));
t200 = cos(pkin(12));
t341 = cos(pkin(7));
t284 = t200 * t341;
t275 = t203 * t284;
t357 = cos(qJ(3));
t220 = (t197 * t357 + t275) * t199;
t198 = sin(pkin(7));
t324 = t198 * t203;
t109 = qJD(1) * t220 + t183 * t324;
t202 = sin(qJ(4));
t205 = cos(qJ(4));
t273 = pkin(4) * t202 - pkin(10) * t205;
t170 = t273 * qJD(4);
t374 = -pkin(9) * qJD(5) * t205 - t109 + t170;
t204 = cos(qJ(5));
t305 = qJD(3) * qJD(4);
t291 = t205 * t305;
t304 = t202 * qJDD(3);
t306 = t204 * qJD(4);
t309 = qJD(5) * t202;
t368 = qJD(3) * t309 - qJDD(4);
t110 = -qJD(5) * t306 + (-t291 - t304) * t204 + t368 * t201;
t314 = qJD(3) * t205;
t111 = t201 * (qJD(4) * (qJD(5) + t314) + t304) + t368 * t204;
t313 = qJD(4) * t201;
t316 = qJD(3) * t202;
t163 = t204 * t316 + t313;
t184 = -qJD(5) + t314;
t327 = t163 * t184;
t161 = t201 * t316 - t306;
t329 = t161 * t184;
t373 = (t111 - t327) * t201 + (t110 - t329) * t204;
t370 = t111 + t327;
t369 = -pkin(4) * t205 - pkin(10) * t202;
t311 = qJD(4) * t205;
t331 = t111 * t204;
t332 = t110 * t201;
t367 = t202 * ((t161 * t201 - t163 * t204) * qJD(5) - t331 + t332) - (t161 * t204 + t163 * t201) * t311;
t177 = -pkin(3) + t369;
t326 = t197 * t199;
t296 = qJD(1) * t326;
t173 = t203 * t296;
t255 = t357 * t284;
t241 = t199 * t255;
t232 = qJD(1) * t241;
t297 = t198 * t357;
t210 = -t183 * t297 + t173 - t232;
t308 = qJD(5) * t204;
t320 = t204 * t205;
t348 = -t202 * t306 * pkin(9) + t177 * t308 + t201 * t374 + t210 * t320;
t340 = cos(pkin(11));
t271 = t342 * t340;
t339 = sin(pkin(11));
t218 = t197 * t339 - t200 * t271;
t286 = t199 * t340;
t365 = t198 * t286 + t218 * t341;
t270 = t342 * t339;
t219 = t197 * t340 + t200 * t270;
t285 = t199 * t339;
t364 = -t198 * t285 + t219 * t341;
t269 = pkin(5) * t204 + qJ(6) * t201;
t105 = qJD(3) * pkin(9) + t109;
t101 = t202 * t105;
t300 = t199 * t200 * t198;
t138 = -qJD(1) * t300 + t183 * t341;
t69 = t138 * t205 - t101;
t65 = -qJD(4) * pkin(4) - t69;
t33 = pkin(5) * t161 - qJ(6) * t163 + t65;
t192 = t205 * qJDD(3);
t159 = t202 * t305 + qJDD(5) - t192;
t353 = pkin(10) * t159;
t363 = t184 * t33 + t353;
t310 = qJD(5) * t201;
t249 = t204 * t159 + t184 * t310;
t323 = t201 * t205;
t362 = qJD(3) * (-t161 * t202 + t184 * t323) - t249;
t312 = qJD(4) * t202;
t347 = -t177 * t310 + t204 * t374 - t210 * t323 + t312 * t375;
t250 = t201 * t159 - t184 * t308;
t359 = t202 * (-qJD(4) * t161 - t250) + t205 * (t184 * t313 + t111);
t358 = t163 ^ 2;
t355 = pkin(5) * t159;
t352 = pkin(10) * t163;
t350 = qJ(6) * t312 - t205 * qJD(6) + t348;
t349 = -pkin(5) * t312 - t347;
t346 = qJD(3) * pkin(3);
t322 = t202 * t138;
t70 = t205 * t105 + t322;
t66 = qJD(4) * pkin(10) + t70;
t95 = qJD(3) * t177 + t210;
t22 = t201 * t95 + t204 * t66;
t20 = -qJ(6) * t184 + t22;
t345 = t184 * t20;
t344 = t184 * t22;
t268 = pkin(5) * t201 - qJ(6) * t204;
t343 = qJD(5) * t268 - t201 * qJD(6) - t322 - (qJD(3) * t268 + t105) * t205;
t169 = t273 * qJD(3);
t48 = t201 * t169 + t204 * t69;
t337 = qJDD(3) * pkin(3);
t336 = qJDD(3) * pkin(9);
t335 = t210 * t161;
t334 = t210 * t163;
t333 = t210 * t202;
t330 = t159 * qJ(6);
t328 = t163 * t161;
t325 = t197 * t203;
t321 = t204 * t177;
t21 = -t201 * t66 + t204 * t95;
t319 = qJD(6) - t21;
t140 = pkin(9) * t320 + t201 * t177;
t195 = t202 ^ 2;
t196 = t205 ^ 2;
t318 = t195 - t196;
t315 = qJD(3) * t203;
t180 = t342 * qJDD(1) + qJDD(2);
t144 = t197 * t271 + t200 * t339;
t88 = t144 * t203 + t357 * t365;
t81 = t88 * pkin(3);
t303 = t369 * t88 - t81;
t145 = -t197 * t270 + t200 * t340;
t90 = t145 * t203 + t357 * t364;
t82 = t90 * pkin(3);
t302 = t369 * t90 - t82;
t137 = -qJDD(1) * t300 + t180 * t341;
t257 = t199 * t275;
t292 = qJD(3) * t357;
t280 = t198 * t292;
t289 = qJDD(1) * t326;
t264 = -qJD(3) * t232 - qJDD(1) * t257 - t180 * t324 - t183 * t280 - t357 * t289;
t279 = qJD(3) * t296;
t58 = -t203 * t279 - t264;
t55 = t58 + t336;
t301 = -t202 * t137 - t138 * t311 - t205 * t55;
t207 = qJD(3) ^ 2;
t299 = t202 * t207 * t205;
t287 = t198 * t342;
t256 = t357 * t287;
t119 = t199 * t325 - t241 - t256;
t118 = t119 * pkin(3);
t298 = t369 * t119 - t118;
t295 = t198 * t315;
t294 = t184 * t316;
t293 = t161 ^ 2 - t358;
t13 = -t105 * t312 - t301;
t11 = qJDD(4) * pkin(10) + t13;
t252 = qJD(3) * qJD(1) * t257 - qJDD(1) * t241 - t180 * t297 + t183 * t295 + t203 * t289 + t357 * t279;
t31 = qJD(3) * t170 + qJDD(3) * t177 + t252;
t288 = t201 * t11 - t204 * t31 + t66 * t308 + t95 * t310;
t283 = t105 * t311 - t205 * t137 + t138 * t312 + t202 * t55;
t281 = t201 * t297;
t278 = t202 * t291;
t277 = qJD(4) * t292;
t19 = pkin(5) * t184 + t319;
t267 = t19 * t204 - t20 * t201;
t266 = -t201 * t22 - t204 * t21;
t265 = (qJD(5) * t161 - t110) * pkin(10);
t120 = t203 * t287 + t220;
t230 = t341 * t342 - t300;
t93 = t120 * t205 + t202 * t230;
t263 = t119 * t204 - t201 * t93;
t45 = t119 * t201 + t204 * t93;
t47 = t169 * t204 - t201 * t69;
t254 = pkin(9) + t268;
t3 = t204 * t11 + t201 * t31 + t95 * t308 - t310 * t66;
t113 = t120 * qJD(3);
t112 = (t256 + (t255 - t325) * t199) * qJD(3);
t92 = t120 * t202 - t205 * t230;
t35 = -qJD(4) * t92 + t112 * t205;
t7 = qJD(5) * t45 - t113 * t204 + t35 * t201;
t8 = qJD(5) * t263 + t113 * t201 + t35 * t204;
t247 = t110 * t263 - t45 * t111 - t8 * t161 + t163 * t7;
t89 = t144 * t357 - t203 * t365;
t24 = -t89 * t204 - t323 * t88;
t91 = t145 * t357 - t203 * t364;
t26 = -t91 * t204 - t323 * t90;
t67 = -t119 * t323 - t120 * t204;
t246 = g(1) * t26 + g(2) * t24 + g(3) * t67;
t25 = t201 * t89 - t320 * t88;
t27 = t201 * t91 - t320 * t90;
t68 = -t119 * t320 + t120 * t201;
t245 = -g(1) * t27 - g(2) * t25 - g(3) * t68;
t121 = t198 * t218 - t286 * t341;
t40 = t121 * t205 - t202 * t89;
t122 = t198 * t219 + t285 * t341;
t42 = t122 * t205 - t202 * t91;
t244 = g(1) * t42 + g(2) * t40 - g(3) * t92;
t41 = t121 * t202 + t205 * t89;
t43 = t122 * t202 + t205 * t91;
t243 = -g(1) * t43 - g(2) * t41 - g(3) * t93;
t34 = qJD(4) * t93 + t112 * t202;
t242 = t92 * t111 + t159 * t263 + t34 * t161 + t184 * t7;
t12 = -qJDD(4) * pkin(4) + t283;
t240 = qJDD(3) * t357 - t203 * t207;
t239 = g(1) * t90 + g(2) * t88 + g(3) * t119;
t238 = g(1) * t91 + g(2) * t89 + g(3) * t120;
t147 = t202 * t341 + t205 * t324;
t127 = t204 * t147 - t281;
t235 = -t201 * t147 - t204 * t297;
t146 = t202 * t324 - t205 * t341;
t124 = -qJD(4) * t146 + t205 * t280;
t63 = qJD(5) * t235 + t204 * t124 + t201 * t295;
t64 = -qJD(5) * t281 + t124 * t201 + t147 * t308 - t204 * t295;
t237 = t110 * t235 - t127 * t111 - t63 * t161 + t163 * t64;
t125 = qJD(4) * t147 + t202 * t280;
t236 = t146 * t111 + t125 * t161 + t159 * t235 + t184 * t64;
t233 = -pkin(10) * t331 + t243;
t231 = -t184 * t65 - t353;
t104 = t210 - t346;
t228 = -pkin(9) * qJDD(4) + (t104 - t210 - t346) * qJD(4);
t227 = qJD(3) * t109 + t239;
t226 = -g(1) * t285 + g(2) * t286 - g(3) * t342;
t225 = -t201 * t329 - t331;
t224 = t110 * t92 + t159 * t45 - t163 * t34 - t184 * t8;
t15 = t201 * t41 - t88 * t204;
t17 = t201 * t43 - t90 * t204;
t223 = g(1) * t17 + g(2) * t15 - g(3) * t263 - t288;
t222 = pkin(10) * qJD(5) * t184 - t244;
t221 = t110 * t146 - t125 * t163 + t127 * t159 - t184 * t63;
t5 = pkin(5) * t111 + qJ(6) * t110 - qJD(6) * t163 + t12;
t217 = t222 - t5;
t216 = -t12 + t222;
t16 = t201 * t88 + t204 * t41;
t18 = t201 * t90 + t204 * t43;
t215 = -g(1) * t18 - g(2) * t16 - g(3) * t45 + t3;
t214 = t111 * t201 * t202 + (t201 * t311 + t202 * t308) * t161;
t211 = t163 * t33 + qJDD(6) - t223;
t206 = qJD(4) ^ 2;
t56 = t252 - t337;
t209 = -pkin(9) * t206 + t227 + t337 - t56;
t208 = t13 * t205 + t283 * t202 + (-t202 * t70 - t205 * t69) * qJD(4) - t238;
t174 = -pkin(4) - t269;
t142 = t254 * t202;
t139 = -pkin(9) * t323 + t321;
t134 = -t321 + (pkin(5) + t375) * t205;
t133 = -qJ(6) * t205 + t140;
t128 = -t159 * t205 - t184 * t312;
t123 = pkin(5) * t163 + qJ(6) * t161;
t97 = (qJD(5) * t269 - qJD(6) * t204) * t202 + t254 * t311;
t87 = -t110 - t329;
t86 = t92 * pkin(4);
t76 = (-t163 * t202 + t184 * t320) * qJD(3) + t250;
t61 = -t204 * t327 - t332;
t57 = -t110 * t204 * t202 + (-t201 * t309 + t205 * t306) * t163;
t39 = -pkin(5) * t316 - t47;
t38 = t42 * pkin(4);
t37 = t40 * pkin(4);
t36 = qJ(6) * t316 + t48;
t32 = (-t184 * t306 + t110) * t205 + (qJD(4) * t163 + t249) * t202;
t2 = qJDD(6) + t288 - t355;
t1 = -qJD(6) * t184 + t3 + t330;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t180 * t342 - g(3) + (t197 ^ 2 + t200 ^ 2) * t199 ^ 2 * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t113 - qJDD(3) * t119, -qJD(3) * t112 - qJDD(3) * t120, 0, t109 * t112 + t113 * t210 + t119 * t252 + t58 * t120 + t137 * t230 - g(3), 0, 0, 0, 0, 0, 0, -t119 * t192 - t34 * qJD(4) - t92 * qJDD(4) + (-t113 * t205 + t119 * t312) * qJD(3), t119 * t304 - t35 * qJD(4) - t93 * qJDD(4) + (t113 * t202 + t119 * t311) * qJD(3) (t202 * t92 + t205 * t93) * qJDD(3) + (t202 * t34 + t205 * t35 + (-t202 * t93 + t205 * t92) * qJD(4)) * qJD(3), t104 * t113 + t119 * t56 + t13 * t93 + t283 * t92 - t34 * t69 + t35 * t70 - g(3), 0, 0, 0, 0, 0, 0, t242, -t224, t247, t12 * t92 - t21 * t7 + t22 * t8 - t263 * t288 + t3 * t45 + t34 * t65 - g(3), 0, 0, 0, 0, 0, 0, t242, t247, t224, t1 * t45 + t19 * t7 - t2 * t263 + t20 * t8 + t33 * t34 + t5 * t92 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t226 + t180, 0, 0, 0, 0, 0, 0, t240 * t198 (-qJDD(3) * t203 - t207 * t357) * t198, 0, t137 * t341 + (-t357 * t252 + t203 * t58 + (t109 * t357 + t203 * t210) * qJD(3)) * t198 + t226, 0, 0, 0, 0, 0, 0, -t125 * qJD(4) - t146 * qJDD(4) + (-t202 * t277 + t205 * t240) * t198, -t124 * qJD(4) - t147 * qJDD(4) + (-t202 * t240 - t205 * t277) * t198 (t146 * t202 + t147 * t205) * qJDD(3) + (t124 * t205 + t125 * t202 + (t146 * t205 - t147 * t202) * qJD(4)) * qJD(3), t70 * t124 - t69 * t125 + t13 * t147 + t283 * t146 + (t104 * t315 - t357 * t56) * t198 + t226, 0, 0, 0, 0, 0, 0, t236, -t221, t237, t12 * t146 + t65 * t125 + t3 * t127 - t21 * t64 + t22 * t63 - t235 * t288 + t226, 0, 0, 0, 0, 0, 0, t236, t237, t221, t1 * t127 + t33 * t125 + t5 * t146 + t19 * t64 - t2 * t235 + t20 * t63 + t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t227 - t252 (-t210 + t173) * qJD(3) + t238 + t264, 0, 0, qJDD(3) * t195 + 0.2e1 * t278, 0.2e1 * t192 * t202 - 0.2e1 * t305 * t318, qJDD(4) * t202 + t205 * t206, qJDD(3) * t196 - 0.2e1 * t278, qJDD(4) * t205 - t202 * t206, 0, t202 * t228 + t205 * t209, -t202 * t209 + t205 * t228, t208 + (qJD(3) * t210 + t336) * (t195 + t196) -t56 * pkin(3) + g(1) * t82 + g(2) * t81 + g(3) * t118 - t104 * t109 - (t202 * t69 - t205 * t70) * t210 + t208 * pkin(9), t57, t367, t32, t214, t359, t128, t139 * t159 - t347 * t184 + (t288 + (pkin(9) * t161 + t201 * t65) * qJD(4)) * t205 + (pkin(9) * t111 + qJD(4) * t21 + t12 * t201 + t308 * t65 + t335) * t202 + t245, -t140 * t159 + t348 * t184 + (t3 + (pkin(9) * t163 + t204 * t65) * qJD(4)) * t205 + (-pkin(9) * t110 - qJD(4) * t22 + t12 * t204 - t310 * t65 + t334) * t202 + t246, t139 * t110 - t140 * t111 - t347 * t163 - t348 * t161 + t266 * t311 + (-t201 * t3 + t204 * t288 + (t201 * t21 - t204 * t22) * qJD(5) + t239) * t202, t3 * t140 - t288 * t139 + t65 * t333 - g(1) * t302 - g(2) * t303 - g(3) * t298 + t348 * t22 + t347 * t21 + (t12 * t202 + t311 * t65 - t238) * pkin(9), t57, t32, -t367, t128, -t359, t214, t142 * t111 - t134 * t159 + t97 * t161 + (t313 * t33 + t2) * t205 + t349 * t184 + (-qJD(4) * t19 + t5 * t201 + t308 * t33 + t335) * t202 + t245, -t134 * t110 - t133 * t111 + t349 * t163 - t350 * t161 + t267 * t311 + (-t1 * t201 + t2 * t204 + (-t19 * t201 - t20 * t204) * qJD(5) + t239) * t202, t142 * t110 + t133 * t159 - t97 * t163 + (-t306 * t33 - t1) * t205 - t350 * t184 + (qJD(4) * t20 - t5 * t204 + t310 * t33 - t334) * t202 - t246, t1 * t133 + t5 * t142 + t2 * t134 - g(1) * (pkin(5) * t27 + pkin(9) * t91 + qJ(6) * t26 + t302) - g(2) * (pkin(5) * t25 + pkin(9) * t89 + qJ(6) * t24 + t303) - g(3) * (pkin(5) * t68 + pkin(9) * t120 + qJ(6) * t67 + t298) + (t97 + t333) * t33 + t350 * t20 + t349 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t318 * t207, t304, t299, t192, qJDD(4), qJD(4) * t70 - t104 * t316 - t244 - t283, -t104 * t314 + (t69 + t101) * qJD(4) - t243 + t301, 0, 0, t61, -t373, t76, t225, -t362, t294, -pkin(4) * t111 - t70 * t161 + t47 * t184 + t201 * t231 + t204 * t216 - t21 * t316, pkin(4) * t110 - t70 * t163 - t48 * t184 - t201 * t216 + t204 * t231 + t22 * t316, t48 * t161 + t47 * t163 + (t21 * t314 + t3 + (-t21 + t352) * qJD(5)) * t204 + (t265 + t288 + t344) * t201 + t233, -t12 * pkin(4) - g(1) * t38 - g(2) * t37 + g(3) * t86 - t21 * t47 - t22 * t48 - t65 * t70 + (qJD(5) * t266 + t201 * t288 + t3 * t204 + t243) * pkin(10), t61, t76, t373, t294, t362, t225, t174 * t111 + t343 * t161 - t39 * t184 + t19 * t316 - t201 * t363 + t217 * t204, t36 * t161 - t39 * t163 + (-t19 * t314 + t1 + (t19 + t352) * qJD(5)) * t204 + (t2 + t265 + t345) * t201 + t233, t174 * t110 - t343 * t163 + t36 * t184 - t20 * t316 + t217 * t201 + t204 * t363, t5 * t174 - t20 * t36 - t19 * t39 - g(1) * (t269 * t42 + t38) - g(2) * (t269 * t40 + t37) - g(3) * (-t269 * t92 - t86) + t343 * t33 + (qJD(5) * t267 + t1 * t204 + t2 * t201 + t243) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t328, -t293, t87, -t328, -t370, t159, -t163 * t65 + t223 - t344, t161 * t65 - t184 * t21 - t215, 0, 0, t328, t87, t293, t159, t370, -t328, -t123 * t161 - t211 - t344 + 0.2e1 * t355, pkin(5) * t110 - t111 * qJ(6) + (t20 - t22) * t163 + (t19 - t319) * t161, 0.2e1 * t330 + t123 * t163 - t33 * t161 + (-0.2e1 * qJD(6) + t21) * t184 + t215, t1 * qJ(6) - t2 * pkin(5) - t33 * t123 - t19 * t22 - g(1) * (-pkin(5) * t17 + qJ(6) * t18) - g(2) * (-pkin(5) * t15 + qJ(6) * t16) - g(3) * (pkin(5) * t263 + qJ(6) * t45) + t319 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 + t328, t87, -t184 ^ 2 - t358, t211 + t345 - t355;];
tau_reg  = t4;
