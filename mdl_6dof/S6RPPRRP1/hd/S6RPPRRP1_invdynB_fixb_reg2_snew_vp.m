% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:45:04
% EndTime: 2019-05-05 14:45:23
% DurationCPUTime: 17.32s
% Computational Cost: add. (79384->692), mult. (178999->1007), div. (0->0), fcn. (128591->10), ass. (0->490)
t767 = sin(qJ(5));
t762 = sin(pkin(10));
t764 = cos(pkin(10));
t768 = sin(qJ(4));
t771 = cos(qJ(4));
t785 = t762 * t771 + t764 * t768;
t722 = t785 * qJD(1);
t770 = cos(qJ(5));
t699 = -t770 * qJD(4) + t722 * t767;
t701 = qJD(4) * t767 + t722 * t770;
t653 = t701 * t699;
t811 = qJDD(1) * t764;
t826 = t762 * t768;
t718 = qJDD(1) * t826 - t771 * t811;
t815 = t722 * qJD(4);
t671 = -t718 - t815;
t663 = qJDD(5) - t671;
t793 = -t663 + t653;
t838 = t793 * t767;
t837 = t793 * t770;
t772 = cos(qJ(1));
t769 = sin(qJ(1));
t740 = g(1) * t772 + t769 * g(2);
t867 = qJD(1) ^ 2;
t729 = -pkin(1) * t867 - t740;
t763 = sin(pkin(9));
t765 = cos(pkin(9));
t739 = g(1) * t769 - t772 * g(2);
t784 = qJDD(1) * pkin(1) + t739;
t676 = t729 * t763 - t765 * t784;
t824 = t765 * t729;
t677 = t763 * t784 + t824;
t792 = t676 * t763 + t765 * t677;
t619 = t676 * t765 - t677 * t763;
t823 = t769 * t619;
t564 = t772 * t792 + t823;
t836 = t619 * t772;
t884 = -t769 * t792 + t836;
t812 = qJDD(1) * t763;
t732 = t765 * t867 + t812;
t810 = qJDD(1) * t765;
t814 = t763 * t867;
t733 = t810 - t814;
t682 = -t769 * t732 + t772 * t733;
t759 = g(3) - qJDD(2);
t707 = qJ(2) * t732 - t759 * t765;
t788 = -qJ(2) * t733 - t759 * t763;
t883 = -pkin(6) * t682 + t769 * t707 + t772 * t788;
t877 = t793 * pkin(5);
t819 = qJD(1) * t764;
t720 = qJD(1) * t826 - t771 * t819;
t675 = t722 * t720;
t870 = qJDD(4) - t675;
t882 = t768 * t870;
t881 = t771 * t870;
t757 = t764 ^ 2;
t751 = t757 * t867;
t756 = t762 ^ 2;
t818 = t867 * t756;
t735 = t751 + t818;
t872 = t772 * t732 + t769 * t733;
t879 = pkin(6) * t872 + t707 * t772 - t769 * t788;
t869 = t867 * (t756 + t757);
t727 = t764 * t869;
t691 = -t727 * t763 + t764 * t810;
t693 = t727 * t765 + t763 * t811;
t639 = t691 * t772 - t769 * t693;
t878 = t769 * t691 + t693 * t772;
t714 = qJD(5) + t720;
t657 = t714 * t699;
t816 = t720 * qJD(4);
t871 = t785 * qJDD(1);
t673 = t871 - t816;
t780 = qJD(5) * t699 - qJDD(4) * t767 - t673 * t770;
t873 = -t657 - t780;
t791 = -t770 * qJDD(4) + t673 * t767;
t594 = (qJD(5) - t714) * t701 + t791;
t697 = t699 ^ 2;
t698 = t701 ^ 2;
t713 = t714 ^ 2;
t716 = t720 ^ 2;
t717 = t722 ^ 2;
t866 = qJD(4) ^ 2;
t865 = 2 * qJD(3);
t627 = -t713 - t697;
t548 = t627 * t767 - t837;
t864 = pkin(4) * t548;
t637 = -t698 - t713;
t605 = t653 + t663;
t840 = t605 * t767;
t561 = t637 * t770 - t840;
t863 = pkin(4) * t561;
t862 = pkin(4) * t768;
t598 = -t657 + t780;
t517 = -t594 * t770 - t598 * t767;
t614 = -t697 - t698;
t494 = t517 * t768 - t614 * t771;
t495 = t517 * t771 + t614 * t768;
t439 = -t494 * t762 + t495 * t764;
t515 = -t594 * t767 + t598 * t770;
t409 = t439 * t763 - t515 * t765;
t410 = t439 * t765 + t515 * t763;
t361 = t409 * t772 + t769 * t410;
t861 = pkin(6) * t361;
t549 = t627 * t770 + t838;
t593 = (qJD(5) + t714) * t701 + t791;
t501 = t549 * t768 - t593 * t771;
t502 = t549 * t771 + t593 * t768;
t447 = -t501 * t762 + t502 * t764;
t424 = t447 * t763 - t548 * t765;
t425 = t447 * t765 + t548 * t763;
t372 = t424 * t772 + t769 * t425;
t860 = pkin(6) * t372;
t839 = t605 * t770;
t562 = -t637 * t767 - t839;
t506 = t562 * t768 - t771 * t873;
t507 = t562 * t771 + t768 * t873;
t452 = -t506 * t762 + t507 * t764;
t429 = t452 * t763 - t561 * t765;
t430 = t452 * t765 + t561 * t763;
t375 = t429 * t772 + t769 * t430;
t859 = pkin(6) * t375;
t858 = pkin(7) * t494;
t857 = pkin(7) * t501;
t856 = pkin(7) * t506;
t855 = pkin(8) * t515;
t854 = pkin(8) * t548;
t853 = pkin(8) * t561;
t852 = qJ(2) * t409;
t851 = qJ(2) * t424;
t850 = qJ(2) * t429;
t438 = t494 * t764 + t495 * t762;
t849 = qJ(3) * t438;
t446 = t501 * t764 + t502 * t762;
t848 = qJ(3) * t446;
t451 = t506 * t764 + t507 * t762;
t847 = qJ(3) * t451;
t761 = qJDD(1) * pkin(2);
t776 = qJDD(1) * qJ(3) + t677;
t649 = t764 * (-pkin(2) * t867 + t776) - t762 * t759 + t819 * t865;
t628 = -pkin(3) * t751 + pkin(7) * t811 + t649;
t825 = t764 * t759;
t775 = -t825 + (-t824 - t763 * t739 + (-pkin(1) * t763 - pkin(7) - qJ(3)) * qJDD(1) + (-(2 * qJD(3)) + (pkin(3) * t764 + pkin(2)) * qJD(1)) * qJD(1)) * t762;
t567 = t771 * t628 + t768 * t775;
t664 = pkin(4) * t720 - pkin(8) * t722;
t525 = -pkin(4) * t866 + qJDD(4) * pkin(8) - t664 * t720 + t567;
t662 = -t867 * qJ(3) + qJDD(3) + t676 - t761;
t647 = -pkin(3) * t811 - pkin(7) * t735 + t662;
t540 = (-t673 + t816) * pkin(8) + (-t671 + t815) * pkin(4) + t647;
t820 = -t767 * t525 + t770 * t540;
t802 = -qJ(6) * t780 - t820;
t783 = -qJ(6) * t657 - t802;
t817 = qJD(6) * t701;
t440 = t783 - 0.2e1 * t817 - t877;
t846 = t440 * t767;
t845 = t440 * t770;
t566 = t628 * t768 - t771 * t775;
t496 = -t566 * t771 + t567 * t768;
t844 = t496 * t762;
t843 = t496 * t764;
t524 = -qJDD(4) * pkin(4) - t866 * pkin(8) + t664 * t722 + t566;
t842 = t524 * t767;
t841 = t524 * t770;
t835 = t647 * t768;
t834 = t647 * t771;
t833 = t662 * t763;
t832 = t662 * t765;
t668 = qJDD(4) + t675;
t831 = t668 * t768;
t830 = t668 * t771;
t829 = t714 * t767;
t828 = t714 * t770;
t827 = t762 * t764;
t475 = t770 * t525 + t767 * t540;
t809 = t768 * t653;
t808 = t771 * t653;
t807 = t763 * t675;
t806 = t765 * t675;
t805 = pkin(1) * t409 - pkin(2) * t515 + qJ(3) * t439;
t804 = pkin(1) * t424 - pkin(2) * t548 + qJ(3) * t447;
t803 = pkin(1) * t429 - pkin(2) * t561 + qJ(3) * t452;
t801 = -pkin(4) * t771 - pkin(3);
t800 = t762 * t811;
t799 = -pkin(1) * t438 + qJ(2) * t410;
t798 = -pkin(1) * t446 + qJ(2) * t425;
t797 = -pkin(1) * t451 + qJ(2) * t430;
t796 = -pkin(3) * t548 + pkin(7) * t502;
t795 = -pkin(3) * t561 + pkin(7) * t507;
t794 = -t662 + t761;
t497 = t566 * t768 + t771 * t567;
t648 = t825 + ((-pkin(2) * qJD(1) + t865) * qJD(1) + t776) * t762;
t588 = t648 * t762 + t764 * t649;
t696 = -t739 * t769 - t772 * t740;
t738 = qJDD(1) * t772 - t769 * t867;
t789 = -pkin(6) * t738 - g(3) * t769;
t417 = t475 * t767 + t770 * t820;
t418 = t475 * t770 - t767 * t820;
t587 = t648 * t764 - t649 * t762;
t702 = t732 * t827;
t703 = t765 * t800 - t814 * t827;
t787 = t702 * t772 + t769 * t703;
t786 = t769 * t702 - t703 * t772;
t695 = t739 * t772 - t769 * t740;
t625 = -qJD(5) * t701 - t791;
t654 = pkin(5) * t714 - qJ(6) * t701;
t782 = t625 * qJ(6) - 0.2e1 * qJD(6) * t699 - t654 * t714 + t475;
t779 = -pkin(2) * t438 - pkin(3) * t494 + pkin(4) * t614 - pkin(8) * t517;
t778 = -pkin(2) * t446 - pkin(3) * t501 + pkin(4) * t593 - pkin(8) * t549;
t777 = -pkin(2) * t451 - pkin(3) * t506 + pkin(4) * t873 - pkin(8) * t562;
t479 = -t625 * pkin(5) - t697 * qJ(6) + t654 * t701 + qJDD(6) + t524;
t749 = t757 * qJDD(1);
t748 = t756 * qJDD(1);
t737 = t769 * qJDD(1) + t772 * t867;
t736 = t751 - t818;
t731 = t749 - t748;
t730 = t749 + t748;
t726 = t762 * t869;
t715 = -pkin(6) * t737 + g(3) * t772;
t710 = -t717 - t866;
t709 = -t717 + t866;
t708 = t716 - t866;
t692 = t726 * t765 + t762 * t812;
t689 = t726 * t763 - t762 * t810;
t687 = 0.2e1 * t817;
t681 = t731 * t765 - t736 * t763;
t680 = t730 * t765 - t735 * t763;
t679 = t731 * t763 + t736 * t765;
t678 = t730 * t763 + t735 * t765;
t674 = -t717 + t716;
t672 = t871 - 0.2e1 * t816;
t670 = t718 + 0.2e1 * t815;
t666 = -t866 - t716;
t661 = (-t720 * t771 + t722 * t768) * qJD(4);
t660 = (-t720 * t768 - t722 * t771) * qJD(4);
t656 = -t698 + t713;
t655 = t697 - t713;
t652 = -t716 - t717;
t651 = -t698 + t697;
t646 = t673 * t771 - t768 * t815;
t645 = t673 * t768 + t771 * t815;
t644 = -t671 * t768 + t771 * t816;
t643 = t671 * t771 + t768 * t816;
t640 = -t769 * t689 + t692 * t772;
t638 = t689 * t772 + t769 * t692;
t636 = -t710 * t768 - t830;
t635 = -t709 * t768 + t881;
t634 = t708 * t771 - t831;
t633 = t710 * t771 - t831;
t632 = t709 * t771 + t882;
t631 = t708 * t768 + t830;
t630 = -t769 * t678 + t680 * t772;
t629 = t678 * t772 + t769 * t680;
t613 = -t670 * t771 - t672 * t768;
t612 = -t718 * t771 + t768 * t871;
t611 = -t670 * t768 + t672 * t771;
t610 = -t718 * t768 - t771 * t871;
t609 = t666 * t771 - t882;
t608 = t666 * t768 + t881;
t607 = pkin(1) * t759 + qJ(2) * t792;
t603 = (-t699 * t770 + t701 * t767) * t714;
t602 = (t699 * t767 + t701 * t770) * t714;
t601 = -t660 * t762 + t661 * t764;
t600 = qJDD(4) * t763 + t601 * t765;
t599 = -qJDD(4) * t765 + t601 * t763;
t592 = -t701 * t829 - t770 * t780;
t591 = -t701 * t828 + t767 * t780;
t590 = -t625 * t767 + t699 * t828;
t589 = -t625 * t770 - t699 * t829;
t585 = -pkin(7) * t633 + t834;
t584 = -t645 * t762 + t646 * t764;
t583 = -t643 * t762 + t644 * t764;
t582 = -t633 * t762 + t636 * t764;
t581 = -t632 * t762 + t635 * t764;
t580 = -t631 * t762 + t634 * t764;
t579 = t633 * t764 + t636 * t762;
t578 = t603 * t771 + t663 * t768;
t577 = t603 * t768 - t663 * t771;
t576 = -qJ(2) * t689 - t649 * t763 + t764 * t832;
t575 = -qJ(2) * t691 - t648 * t763 + t762 * t832;
t574 = qJ(2) * t692 + t649 * t765 + t764 * t833;
t573 = -qJ(2) * t693 + t648 * t765 + t762 * t833;
t572 = t655 * t770 - t840;
t571 = -t656 * t767 - t837;
t570 = -t655 * t767 - t839;
t569 = -t656 * t770 + t838;
t568 = -pkin(7) * t608 + t835;
t560 = t581 * t765 + t763 * t871;
t559 = t580 * t765 - t718 * t763;
t558 = t581 * t763 - t765 * t871;
t557 = t580 * t763 + t718 * t765;
t555 = -qJ(2) * t678 + t587 * t765;
t554 = qJ(2) * t680 + t587 * t763;
t553 = -t611 * t762 + t613 * t764;
t552 = -t610 * t762 + t612 * t764;
t551 = t610 * t764 + t612 * t762;
t550 = -pkin(3) * t672 + pkin(7) * t636 + t835;
t547 = -t608 * t762 + t609 * t764;
t546 = t608 * t764 + t609 * t762;
t544 = t584 * t765 + t807;
t543 = t583 * t765 - t807;
t542 = t584 * t763 - t806;
t541 = t583 * t763 + t806;
t539 = t588 * t765 + t833;
t538 = t588 * t763 - t832;
t535 = t582 * t765 + t672 * t763;
t534 = t582 * t763 - t672 * t765;
t533 = t592 * t771 + t809;
t532 = t590 * t771 - t809;
t531 = t592 * t768 - t808;
t530 = t590 * t768 + t808;
t529 = -pkin(3) * t670 + pkin(7) * t609 - t834;
t528 = t553 * t765 - t674 * t763;
t527 = t553 * t763 + t674 * t765;
t526 = -pkin(5) * t873 - qJ(6) * t605;
t523 = t547 * t765 + t670 * t763;
t522 = t547 * t763 - t670 * t765;
t519 = t552 * t765 + t652 * t763;
t518 = t552 * t763 - t652 * t765;
t516 = -t593 * t770 - t767 * t873;
t514 = t593 * t767 - t770 * t873;
t512 = -pkin(2) * t551 - pkin(3) * t610;
t511 = t572 * t771 - t594 * t768;
t510 = t571 * t771 - t598 * t768;
t509 = t572 * t768 + t594 * t771;
t508 = t571 * t768 + t598 * t771;
t504 = -t577 * t762 + t578 * t764;
t503 = t577 * t764 + t578 * t762;
t499 = t516 * t771 - t651 * t768;
t498 = t516 * t768 + t651 * t771;
t493 = pkin(7) * t495;
t492 = -pkin(2) * t579 - pkin(3) * t633 + t567;
t491 = -t769 * t538 + t539 * t772;
t490 = t538 * t772 + t769 * t539;
t489 = -pkin(4) * t515 - pkin(5) * t598;
t488 = -t769 * t534 + t535 * t772;
t487 = t534 * t772 + t769 * t535;
t486 = -t531 * t762 + t533 * t764;
t485 = -t530 * t762 + t532 * t764;
t484 = t531 * t764 + t533 * t762;
t483 = t530 * t764 + t532 * t762;
t482 = -pkin(3) * t647 + pkin(7) * t497;
t481 = t841 - t853;
t480 = t842 - t854;
t478 = t504 * t765 - t602 * t763;
t477 = t504 * t763 + t602 * t765;
t476 = -pkin(7) * t610 - t496;
t473 = -pkin(2) * t546 - pkin(3) * t608 + t566;
t472 = -t769 * t522 + t523 * t772;
t471 = t522 * t772 + t769 * t523;
t470 = -qJ(2) * t538 - (pkin(2) * t763 - qJ(3) * t765) * t587;
t469 = -qJ(3) * t579 - t550 * t762 + t585 * t764;
t468 = -pkin(3) * t652 + pkin(7) * t612 + t497;
t467 = -qJ(6) * t637 + t479;
t466 = -t769 * t518 + t519 * t772;
t465 = t518 * t772 + t769 * t519;
t464 = t486 * t765 - t591 * t763;
t463 = t485 * t765 - t589 * t763;
t462 = t486 * t763 + t591 * t765;
t461 = t485 * t763 + t589 * t765;
t460 = -qJ(3) * t546 - t529 * t762 + t568 * t764;
t459 = -t509 * t762 + t511 * t764;
t458 = -t508 * t762 + t510 * t764;
t457 = t509 * t764 + t511 * t762;
t456 = t508 * t764 + t510 * t762;
t455 = t475 - t863;
t454 = qJ(2) * t539 - (-pkin(2) * t765 - qJ(3) * t763 - pkin(1)) * t587;
t453 = -t820 - t864;
t449 = -pkin(5) * t593 + qJ(6) * t627 - t479;
t448 = -pkin(5) * t697 + t782;
t444 = -t498 * t762 + t499 * t764;
t443 = t498 * t764 + t499 * t762;
t442 = t497 * t764 - t844;
t441 = t497 * t762 + t843;
t436 = t459 * t765 - t570 * t763;
t435 = t458 * t765 - t569 * t763;
t434 = t459 * t763 + t570 * t765;
t433 = t458 * t763 + t569 * t765;
t432 = t442 * t765 + t647 * t763;
t431 = t442 * t763 - t647 * t765;
t426 = t687 + (-t598 + t657) * qJ(6) + t877 + t802;
t421 = -t769 * t477 + t478 * t772;
t420 = t477 * t772 + t769 * t478;
t419 = -qJ(6) * t594 + (-t614 - t697) * pkin(5) + t782;
t416 = -t863 + (-t637 - t697) * pkin(5) + t782;
t415 = t467 * t770 - t526 * t767 - t853;
t414 = qJ(6) * t837 - t449 * t767 - t854;
t413 = t444 * t765 - t514 * t763;
t412 = t444 * t763 + t514 * t765;
t411 = t687 - t783 - t864 + 0.2e1 * t877;
t406 = -pkin(2) * t441 - pkin(3) * t496;
t405 = -pkin(5) * t479 + qJ(6) * t448;
t404 = -qJ(2) * t534 + t469 * t765 - t492 * t763;
t403 = -qJ(3) * t551 - t468 * t762 + t476 * t764;
t402 = t418 * t771 + t524 * t768;
t401 = t418 * t768 - t524 * t771;
t400 = -t769 * t462 + t464 * t772;
t399 = -t769 * t461 + t463 * t772;
t398 = t462 * t772 + t769 * t464;
t397 = t461 * t772 + t769 * t463;
t396 = -t417 - t855;
t395 = -pkin(1) * t579 + qJ(2) * t535 + t469 * t763 + t492 * t765;
t394 = -qJ(2) * t522 + t460 * t765 - t473 * t763;
t393 = -t455 * t768 + t481 * t771 - t856;
t392 = t448 * t770 - t846;
t391 = t448 * t767 + t845;
t390 = -t453 * t768 + t480 * t771 - t857;
t389 = -pkin(1) * t546 + qJ(2) * t523 + t460 * t763 + t473 * t765;
t388 = -pkin(7) * t843 - qJ(3) * t441 - t482 * t762;
t387 = t777 - t842;
t386 = t455 * t771 + t481 * t768 + t795;
t385 = -t769 * t434 + t436 * t772;
t384 = -t769 * t433 + t435 * t772;
t383 = t434 * t772 + t769 * t436;
t382 = t433 * t772 + t769 * t435;
t381 = t778 + t841;
t380 = -t769 * t431 + t432 * t772;
t379 = t431 * t772 + t769 * t432;
t378 = t453 * t771 + t480 * t768 + t796;
t377 = -qJ(2) * t518 + t403 * t765 - t512 * t763;
t376 = -t769 * t429 + t430 * t772;
t374 = pkin(6) * t376;
t373 = -t769 * t424 + t425 * t772;
t371 = pkin(6) * t373;
t370 = t396 * t771 + t515 * t862 - t858;
t369 = t392 * t771 + t479 * t768;
t368 = t392 * t768 - t479 * t771;
t367 = -pkin(1) * t551 + qJ(2) * t519 + t403 * t763 + t512 * t765;
t366 = -t769 * t412 + t413 * t772;
t365 = t412 * t772 + t769 * t413;
t364 = -t419 * t767 + t426 * t770 - t855;
t363 = -t467 * t767 - t526 * t770 + t777;
t362 = -t769 * t409 + t410 * t772;
t360 = pkin(6) * t362;
t359 = -qJ(6) * t838 - t449 * t770 + t778;
t358 = t396 * t768 + t515 * t801 + t493;
t357 = -pkin(4) * t391 - pkin(5) * t440;
t356 = t415 * t771 - t416 * t768 - t856;
t355 = -t401 * t762 + t402 * t764;
t354 = t401 * t764 + t402 * t762;
t353 = -t411 * t768 + t414 * t771 - t857;
t352 = t415 * t768 + t416 * t771 + t795;
t351 = -t418 + t779;
t350 = t411 * t771 + t414 * t768 + t796;
t349 = t364 * t771 - t489 * t768 - t858;
t348 = -pkin(7) * t401 + (-pkin(8) * t771 + t862) * t417;
t347 = -pkin(3) * t515 + t364 * t768 + t489 * t771 + t493;
t346 = t355 * t765 + t417 * t763;
t345 = t355 * t763 - t417 * t765;
t344 = -pkin(8) * t391 - qJ(6) * t845 - t405 * t767;
t343 = -t419 * t770 - t426 * t767 + t779;
t342 = -qJ(2) * t431 + t388 * t765 - t406 * t763;
t341 = -t386 * t762 + t393 * t764 - t847;
t340 = -t368 * t762 + t369 * t764;
t339 = t368 * t764 + t369 * t762;
t338 = -t378 * t762 + t390 * t764 - t848;
t337 = pkin(7) * t402 + (-pkin(8) * t768 + t801) * t417;
t336 = -pkin(1) * t441 + qJ(2) * t432 + t388 * t763 + t406 * t765;
t335 = -pkin(2) * t354 - pkin(3) * t401 + pkin(4) * t524 - pkin(8) * t418;
t334 = -t358 * t762 + t370 * t764 - t849;
t333 = t340 * t765 + t391 * t763;
t332 = t340 * t763 - t391 * t765;
t331 = -t352 * t762 + t356 * t764 - t847;
t330 = -t350 * t762 + t353 * t764 - t848;
t329 = t341 * t765 - t387 * t763 - t850;
t328 = t338 * t765 - t381 * t763 - t851;
t327 = -t769 * t345 + t346 * t772;
t326 = t345 * t772 + t769 * t346;
t325 = -t347 * t762 + t349 * t764 - t849;
t324 = t341 * t763 + t387 * t765 + t797;
t323 = t338 * t763 + t381 * t765 + t798;
t322 = -pkin(7) * t368 + t344 * t771 - t357 * t768;
t321 = t334 * t765 - t351 * t763 - t852;
t320 = t331 * t765 - t363 * t763 - t850;
t319 = t330 * t765 - t359 * t763 - t851;
t318 = -pkin(3) * t391 + pkin(7) * t369 + t344 * t768 + t357 * t771;
t317 = t331 * t763 + t363 * t765 + t797;
t316 = t334 * t763 + t351 * t765 + t799;
t315 = -qJ(3) * t354 - t337 * t762 + t348 * t764;
t314 = t330 * t763 + t359 * t765 + t798;
t313 = -pkin(2) * t339 - pkin(3) * t368 + pkin(4) * t479 - pkin(8) * t392 + qJ(6) * t846 - t405 * t770;
t312 = -t769 * t332 + t333 * t772;
t311 = t332 * t772 + t769 * t333;
t310 = t325 * t765 - t343 * t763 - t852;
t309 = t325 * t763 + t343 * t765 + t799;
t308 = -qJ(2) * t345 + t315 * t765 - t335 * t763;
t307 = -pkin(1) * t354 + qJ(2) * t346 + t315 * t763 + t335 * t765;
t306 = -qJ(3) * t339 - t318 * t762 + t322 * t764;
t305 = -qJ(2) * t332 + t306 * t765 - t313 * t763;
t304 = -pkin(1) * t339 + qJ(2) * t333 + t306 * t763 + t313 * t765;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t737, -t738, 0, t696, 0, 0, 0, 0, 0, 0, -t872, -t682, 0, t564, 0, 0, 0, 0, 0, 0, -t878, t640, t630, t491, 0, 0, 0, 0, 0, 0, t472, t488, t466, t380, 0, 0, 0, 0, 0, 0, t373, t376, t362, t327, 0, 0, 0, 0, 0, 0, t373, t376, t362, t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t738, -t737, 0, t695, 0, 0, 0, 0, 0, 0, t682, -t872, 0, -t884, 0, 0, 0, 0, 0, 0, t639, t638, t629, t490, 0, 0, 0, 0, 0, 0, t471, t487, t465, t379, 0, 0, 0, 0, 0, 0, t372, t375, t361, t326, 0, 0, 0, 0, 0, 0, t372, t375, t361, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t759, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t587, 0, 0, 0, 0, 0, 0, t546, t579, t551, t441, 0, 0, 0, 0, 0, 0, t446, t451, t438, t354, 0, 0, 0, 0, 0, 0, t446, t451, t438, t339; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t738, 0, -t737, 0, t789, -t715, -t695, -pkin(6) * t695, 0, 0, t682, 0, -t872, 0, t883, t879, t884, pkin(6) * t884 + qJ(2) * t836 - t769 * t607, -t786, -t769 * t679 + t681 * t772, t640, t786, t878, 0, -pkin(6) * t639 - t769 * t573 + t575 * t772, -pkin(6) * t638 - t769 * t574 + t576 * t772, -pkin(6) * t629 - t769 * t554 + t555 * t772, -pkin(6) * t490 - t769 * t454 + t470 * t772, -t769 * t542 + t544 * t772, -t769 * t527 + t528 * t772, -t769 * t558 + t560 * t772, -t769 * t541 + t543 * t772, -t769 * t557 + t559 * t772, -t769 * t599 + t600 * t772, -pkin(6) * t471 - t769 * t389 + t394 * t772, -pkin(6) * t487 - t769 * t395 + t404 * t772, -pkin(6) * t465 - t769 * t367 + t377 * t772, -pkin(6) * t379 - t769 * t336 + t342 * t772, t400, t366, t384, t399, t385, t421, -t769 * t323 + t328 * t772 - t860, -t769 * t324 + t329 * t772 - t859, -t769 * t316 + t321 * t772 - t861, -pkin(6) * t326 - t769 * t307 + t308 * t772, t400, t366, t384, t399, t385, t421, -t769 * t314 + t319 * t772 - t860, -t769 * t317 + t320 * t772 - t859, -t769 * t309 + t310 * t772 - t861, -pkin(6) * t311 - t769 * t304 + t305 * t772; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t737, 0, t738, 0, t715, t789, t696, pkin(6) * t696, 0, 0, t872, 0, t682, 0, -t879, t883, t564, pkin(6) * t564 + qJ(2) * t823 + t607 * t772, t787, t679 * t772 + t769 * t681, t638, -t787, -t639, 0, -pkin(6) * t878 + t573 * t772 + t769 * t575, pkin(6) * t640 + t574 * t772 + t769 * t576, pkin(6) * t630 + t554 * t772 + t769 * t555, pkin(6) * t491 + t454 * t772 + t769 * t470, t542 * t772 + t769 * t544, t527 * t772 + t769 * t528, t558 * t772 + t769 * t560, t541 * t772 + t769 * t543, t557 * t772 + t769 * t559, t599 * t772 + t769 * t600, pkin(6) * t472 + t389 * t772 + t769 * t394, pkin(6) * t488 + t395 * t772 + t769 * t404, pkin(6) * t466 + t367 * t772 + t769 * t377, pkin(6) * t380 + t336 * t772 + t769 * t342, t398, t365, t382, t397, t383, t420, t323 * t772 + t769 * t328 + t371, t324 * t772 + t769 * t329 + t374, t316 * t772 + t769 * t321 + t360, pkin(6) * t327 + t307 * t772 + t769 * t308, t398, t365, t382, t397, t383, t420, t314 * t772 + t769 * t319 + t371, t317 * t772 + t769 * t320 + t374, t309 * t772 + t769 * t310 + t360, pkin(6) * t312 + t304 * t772 + t769 * t305; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t739, t740, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t733 - t676, -pkin(1) * t732 - t677, 0, -pkin(1) * t619, t748, 0.2e1 * t800, 0, t749, 0, 0, pkin(1) * t691 - qJ(3) * t727 + t764 * t794, pkin(1) * t689 + qJ(3) * t726 - t762 * t794, pkin(1) * t678 + pkin(2) * t735 + qJ(3) * t730 + t588, pkin(1) * t538 - pkin(2) * t662 + qJ(3) * t588, t645 * t764 + t646 * t762, t611 * t764 + t613 * t762, t632 * t764 + t635 * t762, t643 * t764 + t644 * t762, t631 * t764 + t634 * t762, t660 * t764 + t661 * t762, pkin(1) * t522 - pkin(2) * t670 + qJ(3) * t547 + t529 * t764 + t568 * t762, pkin(1) * t534 - pkin(2) * t672 + qJ(3) * t582 + t550 * t764 + t585 * t762, pkin(1) * t518 - pkin(2) * t652 + qJ(3) * t552 + t468 * t764 + t476 * t762, pkin(1) * t431 - pkin(2) * t647 - pkin(7) * t844 + qJ(3) * t442 + t482 * t764, t484, t443, t456, t483, t457, t503, t378 * t764 + t390 * t762 + t804, t386 * t764 + t393 * t762 + t803, t358 * t764 + t370 * t762 + t805, pkin(1) * t345 - pkin(2) * t417 + qJ(3) * t355 + t337 * t764 + t348 * t762, t484, t443, t456, t483, t457, t503, t350 * t764 + t353 * t762 + t804, t352 * t764 + t356 * t762 + t803, t347 * t764 + t349 * t762 + t805, pkin(1) * t332 - pkin(2) * t391 + qJ(3) * t340 + t318 * t764 + t322 * t762;];
tauB_reg  = t1;
