% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRRP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:58:46
% EndTime: 2019-03-09 01:58:52
% DurationCPUTime: 2.61s
% Computational Cost: add. (5269->255), mult. (9813->355), div. (0->0), fcn. (10518->8), ass. (0->227)
t187 = sin(pkin(10));
t314 = cos(qJ(4));
t237 = t314 * t187;
t188 = cos(pkin(10));
t191 = sin(qJ(4));
t279 = t191 * t188;
t171 = t237 + t279;
t190 = sin(qJ(5));
t192 = cos(qJ(5));
t281 = t190 * t192;
t226 = 0.2e1 * t171 * t281;
t169 = t191 * t187 - t314 * t188;
t312 = t169 * pkin(5);
t285 = t171 * t192;
t180 = sin(pkin(9)) * pkin(1) + qJ(3);
t308 = pkin(7) + t180;
t161 = t308 * t188;
t238 = t314 * t161;
t160 = t308 * t187;
t280 = t191 * t160;
t87 = t238 - t280;
t304 = t190 * t87;
t172 = -cos(pkin(9)) * pkin(1) - t188 * pkin(3) - pkin(2);
t221 = t169 * pkin(4) - t171 * pkin(8);
t85 = t172 + t221;
t63 = -t192 * t85 + t304;
t54 = -qJ(6) * t285 - t63;
t40 = t54 + t312;
t323 = -t40 + t54;
t163 = t171 * qJD(4);
t155 = t192 * t163;
t98 = t190 * t169;
t91 = t98 * qJD(5);
t322 = -t155 + t91;
t307 = -qJ(6) - pkin(8);
t174 = t307 * t192;
t316 = t54 / 0.2e1;
t243 = t316 - t40 / 0.2e1;
t321 = t243 * t174;
t167 = t169 ^ 2;
t168 = t171 ^ 2;
t320 = -t168 - t167;
t248 = t168 - t167;
t244 = t312 / 0.2e1;
t319 = t244 + t243;
t164 = t237 / 0.2e1 + t279 / 0.2e1;
t102 = t192 * t169;
t310 = t171 * pkin(4);
t311 = t169 * pkin(8);
t118 = t310 + t311;
t110 = t192 * t118;
t86 = t314 * t160 + t191 * t161;
t293 = t86 * t190;
t47 = t171 * pkin(5) + qJ(6) * t102 + t110 + t293;
t317 = t47 / 0.2e1;
t186 = t192 ^ 2;
t315 = -t186 / 0.2e1;
t313 = pkin(5) * t190;
t309 = t192 * pkin(5);
t303 = t192 * t87;
t64 = t190 * t85 + t303;
t99 = t190 * t171;
t55 = -qJ(6) * t99 + t64;
t299 = t55 * t192;
t302 = t40 * t190;
t306 = -t302 / 0.2e1 + t299 / 0.2e1;
t305 = pkin(5) * qJD(5);
t301 = t47 * t190;
t300 = t47 * t192;
t109 = t190 * t118;
t84 = t86 * t192;
t292 = t84 - t109;
t58 = qJ(6) * t98 - t292;
t298 = t58 * t190;
t297 = t58 * t192;
t6 = t319 * t285;
t296 = t6 * qJD(1);
t69 = pkin(5) * t99 + t86;
t295 = t69 * t190;
t208 = t244 - t243;
t7 = t208 * t192;
t294 = t7 * qJD(1);
t10 = t323 * t99;
t291 = t10 * qJD(1);
t216 = t55 * t190 + t40 * t192;
t11 = (t298 + t300) * t171 - t216 * t169;
t290 = t11 * qJD(1);
t12 = t208 * t190;
t289 = t12 * qJD(1);
t17 = (-t63 + t304) * t171 + t110 * t169;
t288 = t17 * qJD(1);
t287 = t171 * t169;
t182 = -pkin(4) - t309;
t286 = t171 * t182;
t173 = t307 * t190;
t284 = t173 * t190;
t283 = t174 * t192;
t229 = t286 / 0.2e1;
t193 = (t283 / 0.2e1 + t284 / 0.2e1) * t169 + t229;
t207 = -t300 / 0.2e1 - t298 / 0.2e1;
t19 = t193 + t207;
t282 = t19 * qJD(1);
t21 = t216 * t171;
t278 = t21 * qJD(1);
t27 = t63 * t169 - t86 * t99;
t277 = t27 * qJD(1);
t28 = -t64 * t169 + t86 * t285;
t276 = t28 * qJD(1);
t185 = t190 ^ 2;
t227 = -t185 / 0.2e1 + t315;
t61 = (0.1e1 / 0.2e1 + t227) * t287;
t274 = t61 * qJD(1);
t220 = t227 * t171;
t72 = t220 + t164;
t273 = t72 * qJD(6);
t73 = t220 - t164;
t272 = t73 * qJD(1);
t271 = t73 * qJD(6);
t74 = t248 * t190;
t270 = t74 * qJD(1);
t75 = t320 * t190;
t269 = t75 * qJD(1);
t76 = t248 * t192;
t268 = t76 * qJD(1);
t267 = t248 * qJD(1);
t90 = t98 * qJD(1);
t266 = t99 * qJD(1);
t175 = t187 ^ 2 + t188 ^ 2;
t178 = t185 + t186;
t179 = t186 - t185;
t265 = qJD(3) * t192;
t264 = qJD(4) * t190;
t263 = qJD(4) * t192;
t262 = qJD(5) * t190;
t261 = qJD(5) * t192;
t260 = t102 * qJD(1);
t259 = t102 * qJD(4);
t158 = t185 * t169;
t159 = t186 * t169;
t105 = t158 + t159;
t258 = t105 * qJD(1);
t257 = t105 * qJD(4);
t106 = t178 * t168;
t256 = t106 * qJD(1);
t108 = t320 * t192;
t255 = t108 * qJD(1);
t134 = t175 * t180;
t254 = t134 * qJD(1);
t253 = t164 * qJD(1);
t252 = t169 * qJD(1);
t162 = t169 * qJD(4);
t251 = t171 * qJD(1);
t250 = t175 * qJD(1);
t249 = t178 * qJD(4);
t247 = pkin(5) * t285;
t246 = pkin(5) * t98;
t245 = pkin(5) * t262;
t241 = t174 * t99;
t240 = -t299 / 0.2e1;
t239 = t109 / 0.2e1 - t84 / 0.2e1;
t236 = t171 * t262;
t235 = t171 * t261;
t234 = t169 * t163;
t233 = t169 * t251;
t232 = t190 * t261;
t231 = t190 * t263;
t230 = t192 * t251;
t228 = -t285 / 0.2e1;
t225 = pkin(5) * t235;
t224 = t190 * t244;
t223 = qJD(1) * t172 + qJD(3);
t222 = -qJD(5) - t252;
t219 = qJD(4) * t226;
t70 = t87 - t246;
t4 = (t297 / 0.2e1 - t301 / 0.2e1 + t69 / 0.2e1) * t171 + (t240 + t302 / 0.2e1 + t70 / 0.2e1) * t169;
t5 = t40 * t47 + t55 * t58 + t69 * t70;
t218 = t5 * qJD(1) + t4 * qJD(2);
t9 = t69 * t247 + t323 * t55;
t217 = t9 * qJD(1) + t6 * qJD(2);
t62 = (0.1e1 - t178) * t287;
t215 = t4 * qJD(1) + t62 * qJD(2);
t2 = t321 + (t317 + t182 * t228 - t295 / 0.2e1) * pkin(5);
t71 = t182 * t313;
t214 = -t2 * qJD(1) + t71 * qJD(4);
t16 = t69 * t171 + (-t299 + t302) * t169;
t213 = -t16 * qJD(1) - t61 * qJD(2);
t18 = (-t64 + t303) * t171 + (t292 - t84) * t169;
t212 = t18 * qJD(1);
t211 = t283 + t284;
t210 = t222 * t192;
t209 = t311 / 0.2e1 + t310 / 0.2e1;
t200 = t209 * t192;
t25 = -t110 / 0.2e1 - t200;
t206 = pkin(4) * t264 - t25 * qJD(1);
t195 = t209 * t190 + t84 / 0.2e1;
t23 = t195 + t239;
t205 = pkin(4) * t263 - t23 * qJD(1);
t96 = (t185 / 0.2e1 + t315) * t171;
t204 = -t96 * qJD(1) + t231;
t203 = t171 * t210;
t202 = t164 * qJD(5) + t233;
t127 = t241 / 0.2e1;
t201 = t173 * t228 + t127 + t306;
t199 = t168 * qJD(1) * t281 + t96 * qJD(4);
t107 = t179 * t168;
t198 = t107 * qJD(1) + t219;
t197 = qJD(1) * t226 - t179 * qJD(4);
t194 = t280 / 0.2e1 - t238 / 0.2e1 + t224;
t15 = t194 + t201;
t196 = t15 * qJD(1) - t72 * qJD(2) - qJD(4) * t211;
t157 = t164 * qJD(4);
t154 = t190 * t163;
t131 = (t230 + t264) * pkin(5);
t95 = t102 * qJD(5);
t89 = t98 * qJD(4);
t88 = t96 * qJD(5);
t78 = -t262 - t90;
t60 = t127 - t241 / 0.2e1 + t246;
t26 = t293 + t110 / 0.2e1 - t200;
t24 = t195 - t239;
t20 = t193 - t207;
t14 = -t194 + t201;
t13 = t190 * t316 + t224 + t240 + t306;
t8 = t319 * t192;
t3 = t229 * t309 - t321 + (t295 / 0.2e1 + t317) * pkin(5);
t1 = t61 * qJD(3) + t4 * qJD(4) + t6 * qJD(5);
t22 = [0, 0, 0, 0, 0, 0, t175 * qJD(3), t134 * qJD(3), -t234, -t248 * qJD(4), 0, 0, 0, t172 * t163, -t172 * t162, -t168 * t232 - t186 * t234, -t107 * qJD(5) + t169 * t219, t76 * qJD(4) - t169 * t236, -t74 * qJD(4) - t169 * t235, t234, -t75 * qJD(3) + t17 * qJD(4) + t28 * qJD(5), -t108 * qJD(3) + t18 * qJD(4) + t27 * qJD(5), -t11 * qJD(4) - t10 * qJD(5) + t106 * qJD(6), t16 * qJD(3) + t5 * qJD(4) + t9 * qJD(5) - t21 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, t250, t254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269, -t255, 0, t20 * qJD(4) + t13 * qJD(5) - t213 + t273; 0, 0, 0, 0, 0, 0, 0, 0, -t233, -t267, -t162, -t163, 0, -t87 * qJD(4) + t172 * t251, t86 * qJD(4) - t172 * t252, -t88 + (-t186 * t251 - t231) * t169 (t158 - t159) * qJD(4) + (-qJD(5) + t252) * t226, t154 + t268, t155 - t270, t202, t288 + (t190 * t221 - t303) * qJD(4) + t26 * qJD(5) (t192 * t221 + t304) * qJD(4) + t24 * qJD(5) + t212, -t290 + (-t301 + t297 + (t173 * t192 - t174 * t190) * t169) * qJD(4) + t8 * qJD(5), t20 * qJD(3) + (t47 * t173 - t58 * t174 + t70 * t182) * qJD(4) + t3 * qJD(5) + t14 * qJD(6) + t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t199, -t198, t222 * t99, t203, t157, t26 * qJD(4) - t64 * qJD(5) + t276, t24 * qJD(4) + t63 * qJD(5) + t277, pkin(5) * t236 + t8 * qJD(4) - t291, t13 * qJD(3) + t3 * qJD(4) - t305 * t55 + t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256, t72 * qJD(3) + t14 * qJD(4) - t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, t162, 0, 0, 0, 0, 0, t322, t154 + t95, -t257 (t169 * t211 + t286) * qJD(4) + t60 * qJD(5) - t271 + t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89 - t235, t236 + t259, 0, t60 * qJD(4) - t225 + t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73 * qJD(4); 0, 0, 0, 0, 0, 0, -t250, -t254, 0, 0, 0, 0, 0, t163, -t162, 0, 0, 0, 0, 0, t269 - t322, -t99 * qJD(4) - t169 * t261 + t255, t257, -t19 * qJD(4) - t12 * qJD(5) + t213 + t271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, -t252, 0, 0, 0, 0, 0, t230, -t266, t258, -t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t210, 0, -t245 - t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t272; 0, 0, 0, 0, 0, 0, 0, 0, t233, t267, 0, 0, 0, -t223 * t171, t223 * t169, t186 * t233 - t88, 0.2e1 * t190 * t203, t95 - t268, -t91 + t270, -t202, t25 * qJD(5) - t171 * t265 - t288, t99 * qJD(3) + t23 * qJD(5) - t212, -t105 * qJD(3) - t7 * qJD(5) + t290, t19 * qJD(3) - t2 * qJD(5) + t15 * qJD(6) - t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215 - t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t251, t252, 0, 0, 0, 0, 0, -t230, t266, -t258, t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t232, t179 * qJD(5), 0, 0, 0, -pkin(4) * t262, -pkin(4) * t261, t178 * qJD(6), t71 * qJD(5) - qJD(6) * t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, -t197, t260 + t261, t78, -t253, -pkin(8) * t261 - t206, pkin(8) * t262 - t205, -pkin(5) * t261 - t294, t174 * t305 + t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t249, t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, t198, t190 * t233 - t259, t169 * t230 + t89, t157, t98 * qJD(3) - t25 * qJD(4) - t276, -t23 * qJD(4) + t169 * t265 - t277, t7 * qJD(4) + t291, t12 * qJD(3) + t2 * qJD(4) - qJD(6) * t247 - t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t192 * t252, 0, t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t204, t197, -t260, t90, t253, t206, t205, t294, -qJD(6) * t313 - t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, -t73 * qJD(3) - t15 * qJD(4) + t225 + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249, -t196 + t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t22;
