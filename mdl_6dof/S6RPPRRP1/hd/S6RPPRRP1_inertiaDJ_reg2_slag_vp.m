% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRP1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRP1_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:58:44
% EndTime: 2019-03-09 01:58:49
% DurationCPUTime: 1.81s
% Computational Cost: add. (2278->186), mult. (4862->307), div. (0->0), fcn. (4600->8), ass. (0->115)
t139 = cos(qJ(4));
t65 = sin(pkin(9)) * pkin(1) + qJ(3);
t140 = pkin(7) + t65;
t148 = t140 * t139;
t77 = sin(qJ(4));
t152 = t77 * qJD(3) + qJD(4) * t148;
t149 = t77 * t140;
t153 = -t139 * qJD(3) + qJD(4) * t149;
t74 = sin(pkin(10));
t75 = cos(pkin(10));
t80 = -t152 * t74 - t153 * t75;
t56 = -t139 * t75 + t77 * t74;
t57 = t139 * t74 + t77 * t75;
t59 = -cos(pkin(9)) * pkin(1) - pkin(2) - t75 * pkin(3);
t84 = t56 * pkin(4) - t57 * pkin(8) + t59;
t154 = -qJD(5) * t84 - t80;
t53 = t56 * qJD(4);
t76 = sin(qJ(5));
t133 = t76 * t53;
t78 = cos(qJ(5));
t69 = qJD(5) * t78;
t33 = t57 * t69 - t133;
t151 = t33 * pkin(5);
t54 = t57 * qJD(4);
t150 = t56 * t53 - t57 * t54;
t72 = t76 ^ 2;
t73 = t78 ^ 2;
t125 = t72 - t73;
t142 = pkin(8) * t53;
t144 = pkin(4) * t54;
t101 = t142 + t144;
t116 = -t76 * t101 + t154 * t78;
t121 = qJD(5) * t76;
t35 = t148 * t75 - t149 * t74;
t4 = t35 * t121 + t116;
t5 = t78 * t101 + t154 * t76 - t35 * t69;
t12 = -t76 * t35 + t78 * t84;
t13 = t78 * t35 + t76 * t84;
t92 = t12 * t76 - t13 * t78;
t147 = qJD(5) * t92 + t4 * t76 - t5 * t78;
t141 = t54 * pkin(5);
t122 = qJD(5) * t57;
t108 = qJ(6) * t122;
t119 = t78 * qJD(6);
t123 = t53 * qJ(6);
t79 = t76 * t108 - t57 * t119 + t78 * t123 + t5;
t1 = t79 + t141;
t2 = t78 * t108 + (qJD(5) * t35 + t57 * qJD(6) - t123) * t76 + t116;
t124 = qJ(6) * t57;
t6 = t56 * pkin(5) - t78 * t124 + t12;
t7 = -t76 * t124 + t13;
t95 = t6 * t76 - t7 * t78;
t146 = t95 * qJD(5) - t1 * t78 + t2 * t76;
t145 = 0.2e1 * qJD(5);
t143 = pkin(5) * t78;
t20 = t152 * t75 - t153 * t74;
t34 = t148 * t74 + t149 * t75;
t138 = t34 * t20;
t137 = t56 * t54;
t136 = t57 * t53;
t135 = t57 * t76;
t134 = t57 * t78;
t44 = t72 * t53;
t45 = t73 * t53;
t132 = t76 * t54;
t130 = t78 * t53;
t129 = t78 * t54;
t128 = -qJ(6) - pkin(8);
t127 = t57 * t129 - t56 * t130;
t40 = 0.2e1 * t137;
t118 = t76 * t130;
t117 = -0.2e1 * t121;
t115 = pkin(5) * t121;
t114 = t56 * t121;
t113 = t57 * t121;
t112 = t76 * t69;
t67 = -pkin(4) - t143;
t107 = -t67 + t143;
t55 = t57 ^ 2;
t105 = t55 * t112;
t104 = 0.2e1 * (t74 ^ 2 + t75 ^ 2) * qJD(3);
t100 = pkin(4) * t53 - pkin(8) * t54;
t99 = pkin(4) * t57 + pkin(8) * t56;
t96 = t6 * t78 + t7 * t76;
t94 = pkin(5) * t72 + t67 * t78;
t93 = t12 * t78 + t13 * t76;
t91 = t20 * t56 + t34 * t54;
t60 = t128 * t76;
t61 = t128 * t78;
t89 = t60 * t76 + t61 * t78;
t30 = t113 + t130;
t31 = t56 * t69 + t132;
t83 = -qJD(5) * t93 - t4 * t78 - t5 * t76;
t51 = -t128 * t121 - t119;
t52 = -t76 * qJD(6) + t128 * t69;
t82 = -t51 * t78 - t52 * t76 + (-t60 * t78 + t61 * t76) * qJD(5);
t63 = -0.2e1 * t112;
t62 = 0.2e1 * t112;
t58 = -0.2e1 * t125 * qJD(5);
t37 = t57 * t45;
t36 = t57 * t44;
t29 = t114 - t129;
t26 = t44 + t45;
t21 = pkin(5) * t135 + t34;
t19 = -0.2e1 * t37 - 0.2e1 * t105;
t18 = -0.2e1 * t36 + 0.2e1 * t105;
t17 = t125 * t122 + t118;
t15 = -0.4e1 * t57 * t112 + t44 - t45;
t14 = t125 * t55 * t145 + 0.4e1 * t57 * t118;
t11 = t20 + t151;
t10 = -0.2e1 * t36 - 0.2e1 * t37 + 0.2e1 * t137;
t9 = -0.2e1 * t57 * t132 - 0.2e1 * t33 * t56;
t8 = -0.2e1 * t56 * t113 + 0.2e1 * t127;
t3 = t150 * t78 + t127;
t16 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t65 * t104, -0.2e1 * t136, 0.2e1 * t150, 0, t40, 0, 0, 0.2e1 * t59 * t54, -0.2e1 * t59 * t53, 0.2e1 * t20 * t57 - 0.2e1 * t34 * t53 - 0.2e1 * t35 * t54 - 0.2e1 * t80 * t56, 0.2e1 * t80 * t35 + 0.2e1 * t138, t19, t14, t8, t18, t9, t40, 0.2e1 * t12 * t54 + 0.2e1 * t20 * t135 + 0.2e1 * t33 * t34 + 0.2e1 * t5 * t56, -0.2e1 * t13 * t54 + 0.2e1 * t20 * t134 - 0.2e1 * t30 * t34 + 0.2e1 * t4 * t56, 0.2e1 * t147 * t57 + 0.2e1 * t93 * t53, 0.2e1 * t12 * t5 - 0.2e1 * t13 * t4 + 0.2e1 * t138, t19, t14, t8, t18, t9, t40, 0.2e1 * t1 * t56 + 0.2e1 * t11 * t135 + 0.2e1 * t21 * t33 + 0.2e1 * t6 * t54, 0.2e1 * t11 * t134 + 0.2e1 * t2 * t56 - 0.2e1 * t21 * t30 - 0.2e1 * t7 * t54, 0.2e1 * t146 * t57 + 0.2e1 * t96 * t53, 0.2e1 * t1 * t6 + 0.2e1 * t11 * t21 - 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35 * t53 + t80 * t57 + t91, 0, 0, 0, 0, 0, 0, 0, t3, 0, t53 * t92 + t57 * t83 + t91, 0, 0, 0, 0, 0, 0, 0, t3, 0, t11 * t56 + t21 * t54 + t95 * t53 + (-t96 * qJD(5) - t1 * t76 - t2 * t78) * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t136 + 0.2e1 * t137, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t53, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t31, t26, -t147, 0, 0, 0, 0, 0, 0, -t29, -t31, t26, -t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, -t54, 0, -t20, -t80, 0, 0, -t17, t15, t31, t17, -t29, 0, -t20 * t78 + t100 * t76 + (t34 * t76 - t99 * t78) * qJD(5), t20 * t76 + t100 * t78 + (t34 * t78 + t99 * t76) * qJD(5), t83, -t20 * pkin(4) + pkin(8) * t83, -t17, t15, t31, t17, -t29, 0, -t67 * t133 - t11 * t78 + t52 * t56 + t60 * t54 + (t21 * t76 + t94 * t57) * qJD(5), -t67 * t130 + t11 * t76 + t51 * t56 + t61 * t54 + (t107 * t135 + t21 * t78) * qJD(5) (-t52 * t57 + t53 * t60 - t2 + (t57 * t61 - t6) * qJD(5)) * t78 + (t51 * t57 - t53 * t61 - t1 + (t57 * t60 - t7) * qJD(5)) * t76, t1 * t60 + t11 * t67 + t21 * t115 + t2 * t61 - t51 * t7 + t52 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t53, 0, 0, 0, 0, 0, 0, 0, 0, t29, t31, -t26, -t144 + (-t72 - t73) * t142, 0, 0, 0, 0, 0, 0, t29, t31, -t26, pkin(5) * t114 + t53 * t89 + t54 * t67 + t57 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t89 - t76 * t51 + t52 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t58, 0, t63, 0, 0, pkin(4) * t117, -0.2e1 * pkin(4) * t69, 0, 0, t62, t58, 0, t63, 0, 0, t107 * t117, t94 * t145, 0.2e1 * t82, 0.2e1 * t67 * t115 + 0.2e1 * t51 * t61 + 0.2e1 * t52 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, 0, -t33, t54, t5, t4, 0, 0, 0, 0, -t30, 0, -t33, t54, t79 + 0.2e1 * t141, t2, t30 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t30, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t30, 0, -t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t121, -t69, 0, 0, 0, 0, 0, 0, 0, 0, -t121, -t69, 0, -t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, -t121, 0, -pkin(8) * t69, pkin(8) * t121, 0, 0, 0, 0, t69, 0, -t121, 0, t52, t51, -pkin(5) * t69, t52 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t30, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t69, 0, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t16;
