% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPRR2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:52:36
% EndTime: 2019-03-09 08:52:55
% DurationCPUTime: 7.92s
% Computational Cost: add. (18092->512), mult. (45743->695), div. (0->0), fcn. (35592->10), ass. (0->245)
t263 = sin(pkin(11));
t265 = cos(pkin(11));
t264 = sin(pkin(10));
t268 = sin(qJ(2));
t270 = cos(qJ(2));
t346 = cos(pkin(10));
t239 = t264 * t270 + t346 * t268;
t311 = qJD(1) * t239;
t187 = qJD(2) * t263 + t265 * t311;
t188 = t265 * qJD(2) - t263 * t311;
t267 = sin(qJ(5));
t269 = cos(qJ(5));
t125 = t187 * t267 - t188 * t269;
t128 = t187 * t269 + t188 * t267;
t266 = sin(qJ(6));
t363 = cos(qJ(6));
t64 = t363 * t125 + t266 * t128;
t391 = t64 ^ 2;
t66 = t266 * t125 - t363 * t128;
t390 = t66 ^ 2;
t292 = t346 * t270;
t249 = qJD(1) * t292;
t309 = qJD(1) * t268;
t223 = t264 * t309 - t249;
t218 = qJD(5) + t223;
t209 = qJD(6) + t218;
t389 = t209 * t64;
t388 = t66 * t209;
t387 = t125 ^ 2;
t386 = t128 ^ 2;
t385 = t125 * t218;
t384 = t128 * t218;
t240 = t263 * t269 + t265 * t267;
t230 = t240 * qJD(5);
t381 = t240 * t223 + t230;
t321 = t269 * t265;
t238 = t267 * t263 - t321;
t307 = qJD(5) * t269;
t308 = qJD(5) * t267;
t372 = -t263 * t308 + t265 * t307;
t316 = t238 * t223 - t372;
t253 = pkin(2) * t264 + qJ(4);
t360 = pkin(8) + t253;
t234 = t360 * t263;
t235 = t360 * t265;
t304 = pkin(2) * t309;
t154 = pkin(3) * t311 + qJ(4) * t223 + t304;
t359 = -qJ(3) - pkin(7);
t247 = t359 * t270;
t243 = qJD(1) * t247;
t231 = t264 * t243;
t246 = t359 * t268;
t242 = qJD(1) * t246;
t176 = t346 * t242 + t231;
t105 = t265 * t154 - t176 * t263;
t72 = pkin(8) * t223 * t265 + pkin(4) * t311 + t105;
t106 = t263 * t154 + t265 * t176;
t330 = t223 * t263;
t88 = pkin(8) * t330 + t106;
t348 = qJD(4) * t321 - t234 * t307 - t269 * t88 + (-qJD(4) * t263 - qJD(5) * t235 - t72) * t267;
t164 = -t267 * t234 + t269 * t235;
t347 = -t240 * qJD(4) - qJD(5) * t164 + t267 * t88 - t269 * t72;
t361 = t64 * t66;
t297 = qJD(6) * t363;
t306 = qJD(6) * t266;
t350 = t238 * t297 + t240 * t306 + t266 * t381 + t316 * t363;
t172 = -t266 * t238 + t363 * t240;
t349 = t172 * qJD(6) - t266 * t316 + t363 * t381;
t383 = -pkin(9) * t381 + t348;
t382 = pkin(5) * t311 - pkin(9) * t316 - t347;
t380 = t390 - t391;
t305 = qJD(1) * qJD(2);
t296 = t268 * t305;
t248 = t264 * t296;
t211 = qJD(2) * t249 - t248;
t334 = t211 * t263;
t79 = t267 * (qJD(5) * t187 + t334) - t188 * t307 - t211 * t321;
t80 = t187 * t307 + t188 * t308 + t240 * t211;
t23 = t125 * t297 + t128 * t306 + t266 * t80 + t363 * t79;
t379 = -t23 + t389;
t257 = -pkin(2) * t270 - pkin(1);
t310 = qJD(1) * t257;
t245 = qJD(3) + t310;
t144 = t223 * pkin(3) - qJ(4) * t311 + t245;
t356 = qJD(2) * pkin(2);
t236 = t242 + t356;
t293 = t346 * t243;
t169 = t264 * t236 - t293;
t162 = qJD(2) * qJ(4) + t169;
t93 = t265 * t144 - t162 * t263;
t56 = pkin(4) * t223 - pkin(8) * t187 + t93;
t94 = t263 * t144 + t265 * t162;
t73 = pkin(8) * t188 + t94;
t35 = -t267 * t73 + t269 * t56;
t27 = -pkin(9) * t128 + t35;
t25 = pkin(5) * t218 + t27;
t36 = t267 * t56 + t269 * t73;
t28 = -pkin(9) * t125 + t36;
t225 = t239 * qJD(2);
t210 = qJD(1) * t225;
t333 = t211 * t265;
t252 = pkin(2) * t296;
t117 = pkin(3) * t210 - qJ(4) * t211 - qJD(4) * t311 + t252;
t294 = qJD(2) * t359;
t219 = t270 * qJD(3) + t268 * t294;
t199 = t219 * qJD(1);
t220 = -t268 * qJD(3) + t270 * t294;
t200 = t220 * qJD(1);
t140 = t346 * t199 + t264 * t200;
t134 = qJD(2) * qJD(4) + t140;
t58 = t265 * t117 - t134 * t263;
t47 = pkin(4) * t210 - pkin(8) * t333 + t58;
t59 = t263 * t117 + t265 * t134;
t49 = -pkin(8) * t334 + t59;
t13 = -qJD(5) * t36 - t267 * t49 + t269 * t47;
t6 = t210 * pkin(5) + t79 * pkin(9) + t13;
t12 = t267 * t47 + t269 * t49 + t56 * t307 - t73 * t308;
t7 = -pkin(9) * t80 + t12;
t274 = -t25 * t297 - t266 * t6 + t28 * t306 - t363 * t7;
t168 = t346 * t236 + t231;
t157 = -qJD(2) * pkin(3) + qJD(4) - t168;
t118 = -pkin(4) * t188 + t157;
t61 = t125 * pkin(5) + t118;
t378 = t61 * t64 + t274;
t377 = t187 * t223 + t334;
t376 = t188 * t223 + t333;
t374 = -0.2e1 * t305;
t279 = -t264 * t268 + t292;
t173 = t210 * t279;
t373 = t223 * t225 - t173;
t302 = t363 * t28;
t9 = t266 * t25 + t302;
t2 = -qJD(6) * t9 - t266 * t7 + t363 * t6;
t371 = t61 * t66 + t2;
t370 = t128 * t381 - t238 * t79;
t24 = -qJD(6) * t66 - t266 * t79 + t363 * t80;
t369 = -t24 - t388;
t368 = t172 * t210 - t209 * t350;
t367 = t240 * t210 - t218 * t316;
t221 = t223 ^ 2;
t366 = -t210 * t263 - t221 * t265;
t171 = t363 * t238 + t266 * t240;
t365 = t171 * t23 + t349 * t66;
t364 = t311 ^ 2;
t362 = pkin(2) * t268;
t163 = -t269 * t234 - t235 * t267;
t137 = -pkin(9) * t240 + t163;
t138 = -pkin(9) * t238 + t164;
t78 = t266 * t137 + t363 * t138;
t358 = t78 * qJD(6) + t383 * t266 + t382 * t363;
t77 = t363 * t137 - t266 * t138;
t357 = -t77 * qJD(6) + t382 * t266 - t383 * t363;
t166 = -pkin(3) * t279 - qJ(4) * t239 + t257;
t183 = t264 * t246 - t346 * t247;
t113 = t265 * t166 - t183 * t263;
t326 = t239 * t265;
t87 = -pkin(4) * t279 - pkin(8) * t326 + t113;
t114 = t263 * t166 + t265 * t183;
t327 = t239 * t263;
t99 = -pkin(8) * t327 + t114;
t43 = t267 * t87 + t269 * t99;
t354 = t311 * t64;
t352 = t266 * t28;
t351 = t66 * t311;
t345 = t125 * t311;
t344 = t128 * t125;
t343 = t128 * t311;
t182 = -t346 * t246 - t247 * t264;
t314 = -t264 * t199 + t346 * t200;
t342 = t314 * t182;
t340 = t188 * t311;
t339 = t188 * t265;
t338 = t187 * t311;
t337 = t187 * t263;
t335 = t211 * t239;
t331 = t223 * t311;
t228 = t279 * qJD(2);
t329 = t228 * t263;
t328 = t228 * t265;
t272 = qJD(1) ^ 2;
t320 = t270 * t272;
t271 = qJD(2) ^ 2;
t319 = t271 * t268;
t318 = t271 * t270;
t303 = t268 * t356;
t131 = pkin(3) * t225 - qJ(4) * t228 - qJD(4) * t239 + t303;
t156 = t346 * t219 + t264 * t220;
t83 = t263 * t131 + t265 * t156;
t313 = t265 * t210 - t263 * t221;
t312 = t268 ^ 2 - t270 ^ 2;
t301 = t268 * t320;
t112 = pkin(4) * t334 - t314;
t175 = t242 * t264 - t293;
t136 = -pkin(4) * t330 + t175;
t298 = t381 * pkin(5) - t136;
t42 = -t267 * t99 + t269 * t87;
t291 = pkin(1) * t374;
t82 = t265 * t131 - t156 * t263;
t155 = t219 * t264 - t346 * t220;
t290 = 0.2e1 * t311;
t289 = -t172 * t24 + t350 * t64;
t288 = t270 * t296;
t287 = -t171 * t210 - t349 * t209;
t256 = -t346 * pkin(2) - pkin(3);
t286 = t316 * t125 - t240 * t80;
t285 = -t238 * t210 - t381 * t218;
t120 = pkin(4) * t329 + t155;
t150 = pkin(4) * t327 + t182;
t284 = -t263 * t93 + t265 * t94;
t283 = t182 * t211 - t239 * t314;
t282 = -t337 + t339;
t44 = pkin(5) * t80 + t112;
t159 = t238 * t239;
t37 = -pkin(5) * t279 + pkin(9) * t159 + t42;
t158 = t240 * t239;
t38 = -pkin(9) * t158 + t43;
t18 = -t266 * t38 + t363 * t37;
t19 = t266 * t37 + t363 * t38;
t53 = pkin(4) * t225 - pkin(8) * t328 + t82;
t60 = -pkin(8) * t329 + t83;
t20 = t267 * t53 + t269 * t60 + t87 * t307 - t99 * t308;
t103 = -t266 * t158 - t363 * t159;
t244 = -t265 * pkin(4) + t256;
t278 = t157 * t228 + t283;
t277 = t210 * t239 - t211 * t279 + t223 * t228;
t275 = -t210 * t253 + t211 * t256 + (-qJD(4) + t157) * t223;
t21 = -t43 * qJD(5) - t267 * t60 + t269 * t53;
t260 = t265 ^ 2;
t259 = t263 ^ 2;
t184 = t238 * pkin(5) + t244;
t104 = pkin(5) * t158 + t150;
t102 = t363 * t158 - t266 * t159;
t101 = t228 * t240 + t239 * t372;
t100 = t228 * t238 + t230 * t239;
t50 = pkin(5) * t101 + t120;
t32 = t103 * qJD(6) - t266 * t100 + t363 * t101;
t31 = t363 * t100 + t266 * t101 + t158 * t297 - t159 * t306;
t17 = -pkin(9) * t101 + t20;
t14 = t225 * pkin(5) + t100 * pkin(9) + t21;
t11 = t363 * t27 - t352;
t10 = -t266 * t27 - t302;
t8 = t363 * t25 - t352;
t4 = -t19 * qJD(6) + t363 * t14 - t266 * t17;
t3 = t18 * qJD(6) + t266 * t14 + t363 * t17;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t288, t312 * t374, t318, -0.2e1 * t288, -t319, 0, -pkin(7) * t318 + t268 * t291, pkin(7) * t319 + t270 * t291, 0, 0, t228 * t311 + t335, -t225 * t311 - t277, t228 * qJD(2), t373, -t225 * qJD(2), 0, t257 * t210 + t245 * t225 + (-t155 + (-qJD(1) * t279 + t223) * t362) * qJD(2), t257 * t211 + t245 * t228 + (t290 * t362 - t156) * qJD(2), t140 * t279 + t155 * t311 - t156 * t223 - t168 * t228 - t169 * t225 - t183 * t210 + t283, -t342 + t140 * t183 - t168 * t155 + t169 * t156 + (t245 + t310) * t303, t187 * t328 + t260 * t335, t228 * t282 - 0.2e1 * t326 * t334, t187 * t225 + t265 * t277, -t188 * t329 + t259 * t335, t188 * t225 - t263 * t277, t373, t113 * t210 - t155 * t188 + t82 * t223 + t93 * t225 + t263 * t278 - t279 * t58, -t114 * t210 + t155 * t187 - t83 * t223 - t94 * t225 + t265 * t278 + t279 * t59, t83 * t188 - t82 * t187 + (-t113 * t211 - t228 * t93 - t239 * t58) * t265 + (-t114 * t211 - t228 * t94 - t239 * t59) * t263, t113 * t58 + t114 * t59 + t155 * t157 + t82 * t93 + t83 * t94 - t342, -t100 * t128 + t159 * t79, t100 * t125 - t101 * t128 + t158 * t79 + t159 * t80, -t100 * t218 + t128 * t225 - t159 * t210 + t279 * t79, t101 * t125 + t158 * t80, -t101 * t218 - t125 * t225 - t158 * t210 + t279 * t80, t218 * t225 - t173, t101 * t118 + t112 * t158 + t120 * t125 - t13 * t279 + t150 * t80 + t21 * t218 + t210 * t42 + t225 * t35, -t100 * t118 - t112 * t159 + t12 * t279 + t120 * t128 - t150 * t79 - t20 * t218 - t210 * t43 - t225 * t36, t100 * t35 - t101 * t36 - t12 * t158 - t125 * t20 - t128 * t21 + t13 * t159 + t42 * t79 - t43 * t80, t112 * t150 + t118 * t120 + t12 * t43 + t13 * t42 + t20 * t36 + t21 * t35, -t103 * t23 + t31 * t66, t102 * t23 - t103 * t24 + t31 * t64 + t32 * t66, t103 * t210 - t209 * t31 - t225 * t66 + t23 * t279, t102 * t24 + t32 * t64, -t102 * t210 - t209 * t32 - t225 * t64 + t24 * t279, t209 * t225 - t173, t102 * t44 + t104 * t24 + t18 * t210 - t2 * t279 + t209 * t4 + t225 * t8 + t32 * t61 + t50 * t64, t103 * t44 - t104 * t23 - t19 * t210 - t209 * t3 - t225 * t9 - t274 * t279 - t31 * t61 - t50 * t66, t102 * t274 - t103 * t2 + t18 * t23 - t19 * t24 - t3 * t64 + t31 * t8 - t32 * t9 + t4 * t66, t104 * t44 + t18 * t2 - t19 * t274 + t3 * t9 + t4 * t8 + t50 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t301, t312 * t272, 0, t301, 0, 0, t272 * pkin(1) * t268, pkin(1) * t320, 0, 0, t331, -t221 + t364, -t248 + (t249 + t223) * qJD(2), -t331, 0, 0, qJD(2) * t175 - t223 * t304 - t245 * t311 + t314, qJD(2) * t176 + t223 * t245 - t304 * t311 - t140 (t169 - t175) * t311 + (-t168 + t176) * t223 + (-t210 * t264 - t346 * t211) * pkin(2), t168 * t175 - t169 * t176 + (t140 * t264 - t245 * t309 + t314 * t346) * pkin(2), t377 * t265, t282 * t223 + (-t259 + t260) * t211, -t338 - t366, -t376 * t263, t313 - t340, -t331, -t105 * t223 + t175 * t188 + t263 * t275 + t265 * t314 - t311 * t93, t106 * t223 - t175 * t187 - t263 * t314 + t265 * t275 + t311 * t94, t105 * t187 - t106 * t188 + (qJD(4) * t188 - t223 * t93 + t59) * t265 + (qJD(4) * t187 - t223 * t94 - t58) * t263, -t93 * t105 - t94 * t106 - t314 * t256 - t157 * t175 + (-t58 * t263 + t59 * t265) * t253 + t284 * qJD(4), -t316 * t128 - t79 * t240, t286 - t370, -t343 + t367, t125 * t381 + t80 * t238, t285 + t345, -t218 * t311, t112 * t238 + t118 * t381 - t136 * t125 + t163 * t210 + t347 * t218 + t244 * t80 - t311 * t35, t112 * t240 - t316 * t118 - t136 * t128 - t164 * t210 - t348 * t218 - t244 * t79 + t311 * t36, -t12 * t238 - t348 * t125 - t347 * t128 - t13 * t240 + t163 * t79 - t164 * t80 + t316 * t35 - t36 * t381, t112 * t244 - t118 * t136 + t12 * t164 + t13 * t163 + t347 * t35 + t348 * t36, -t23 * t172 + t350 * t66, t289 + t365, t351 + t368, t24 * t171 + t349 * t64, t287 + t354, -t209 * t311, t44 * t171 + t184 * t24 - t209 * t358 + t77 * t210 + t298 * t64 - t311 * t8 + t349 * t61, t44 * t172 - t184 * t23 + t209 * t357 - t78 * t210 - t298 * t66 + t311 * t9 - t350 * t61, t171 * t274 - t2 * t172 + t77 * t23 - t78 * t24 - t349 * t9 + t350 * t8 + t357 * t64 - t358 * t66, t44 * t184 + t2 * t77 - t274 * t78 + t298 * t61 - t357 * t9 - t358 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290 * qJD(2), -t248 + (t249 - t223) * qJD(2), -t221 - t364, t168 * t311 + t169 * t223 + t252, 0, 0, 0, 0, 0, 0, t313 + t340, -t338 + t366 (t337 + t339) * t223 + (-t259 - t260) * t211, -t157 * t311 + t223 * t284 + t59 * t263 + t58 * t265, 0, 0, 0, 0, 0, 0, t285 - t345, -t343 - t367, t286 + t370, -t118 * t311 + t12 * t240 - t13 * t238 - t316 * t36 - t35 * t381, 0, 0, 0, 0, 0, 0, t287 - t354, t351 - t368, t289 - t365, -t2 * t171 - t172 * t274 - t311 * t61 - t349 * t8 - t350 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t377, t376, -t187 ^ 2 - t188 ^ 2, t187 * t93 - t188 * t94 - t314, 0, 0, 0, 0, 0, 0, t80 + t384, -t79 - t385, -t386 - t387, t125 * t36 + t128 * t35 + t112, 0, 0, 0, 0, 0, 0, t24 - t388, -t23 - t389, -t390 - t391, t64 * t9 - t66 * t8 + t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, t386 - t387, -t79 + t385, -t344, -t80 + t384, t210, -t118 * t128 + t36 * t218 + t13, t118 * t125 + t218 * t35 - t12, 0, 0, -t361, t380, t379, t361, t369, t210, -t10 * t209 + (-t128 * t64 - t209 * t306 + t363 * t210) * pkin(5) + t371, t11 * t209 + (t128 * t66 - t209 * t297 - t210 * t266) * pkin(5) + t378, -t10 * t66 + t11 * t64 - t9 * t66 - t8 * t64 + (t363 * t23 - t24 * t266 + (-t266 * t66 - t363 * t64) * qJD(6)) * pkin(5), -t8 * t10 - t9 * t11 + (t363 * t2 - t274 * t266 - t128 * t61 + (-t266 * t8 + t363 * t9) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t361, t380, t379, t361, t369, t210, t9 * t209 + t371, t8 * t209 + t378, 0, 0;];
tauc_reg  = t1;
