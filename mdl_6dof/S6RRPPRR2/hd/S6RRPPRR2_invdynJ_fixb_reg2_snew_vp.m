% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:47:17
% EndTime: 2019-05-06 09:47:42
% DurationCPUTime: 13.54s
% Computational Cost: add. (121638->664), mult. (290315->975), div. (0->0), fcn. (215186->12), ass. (0->387)
t353 = sin(pkin(11));
t354 = sin(pkin(10));
t356 = cos(pkin(10));
t362 = cos(qJ(2));
t396 = qJD(1) * t362;
t359 = sin(qJ(2));
t397 = qJD(1) * t359;
t328 = t354 * t396 + t356 * t397;
t355 = cos(pkin(11));
t309 = -t355 * qJD(2) + t328 * t353;
t310 = qJD(2) * t353 + t328 * t355;
t276 = t310 * t309;
t344 = t359 * qJDD(1);
t389 = qJD(1) * qJD(2);
t380 = t362 * t389;
t333 = t344 + t380;
t345 = t362 * qJDD(1);
t381 = t359 * t389;
t334 = t345 - t381;
t301 = t333 * t354 - t356 * t334;
t447 = -t276 + t301;
t459 = t353 * t447;
t326 = t354 * t397 - t356 * t396;
t300 = t328 * t326;
t445 = -t300 + qJDD(2);
t458 = t354 * t445;
t457 = t355 * t447;
t456 = t356 * t445;
t357 = sin(qJ(6));
t358 = sin(qJ(5));
t361 = cos(qJ(5));
t270 = t361 * t309 + t310 * t358;
t272 = -t309 * t358 + t310 * t361;
t360 = cos(qJ(6));
t233 = t360 * t270 + t272 * t357;
t235 = -t270 * t357 + t272 * t360;
t181 = t235 * t233;
t298 = qJDD(5) + t301;
t297 = qJDD(6) + t298;
t451 = -t181 + t297;
t455 = t357 * t451;
t237 = t272 * t270;
t449 = -t237 + t298;
t454 = t358 * t449;
t453 = t360 * t451;
t452 = t361 * t449;
t302 = t333 * t356 + t334 * t354;
t290 = qJDD(2) * t353 + t302 * t355;
t375 = -t355 * qJDD(2) + t302 * t353;
t220 = -t270 * qJD(5) + t361 * t290 - t358 * t375;
t376 = t290 * t358 + t361 * t375;
t370 = qJD(5) * t272 + t376;
t155 = -t233 * qJD(6) + t360 * t220 - t357 * t370;
t322 = qJD(5) + t326;
t317 = qJD(6) + t322;
t223 = t317 * t233;
t450 = -t223 + t155;
t259 = t322 * t270;
t448 = -t259 + t220;
t196 = t259 + t220;
t288 = t326 * t309;
t249 = -t288 - t290;
t446 = -t288 + t290;
t395 = qJD(2) * t328;
t279 = t301 + t395;
t320 = qJD(2) * t326;
t281 = t302 - t320;
t351 = t362 ^ 2;
t435 = sin(qJ(1));
t436 = cos(qJ(1));
t369 = g(1) * t436 + g(2) * t435;
t427 = qJDD(1) * pkin(7);
t366 = -t369 + t427;
t398 = qJ(3) * qJD(2);
t433 = t359 * g(3);
t440 = qJD(2) ^ 2;
t274 = t362 * t366 - t433 - t440 * pkin(2) + t334 * qJ(3) + (t359 * t398 + (-pkin(1) * t362 - pkin(2) * t351) * qJD(1)) * qJD(1);
t432 = t362 * g(3);
t363 = -t359 * t366 - t432 - t333 * qJ(3) + qJDD(2) * pkin(2) + (t362 * t398 + (t362 * pkin(2) + pkin(1)) * t397) * qJD(1);
t227 = -0.2e1 * qJD(3) * t326 + t356 * t274 + t354 * t363;
t378 = t220 * t357 + t360 * t370;
t124 = (qJD(6) - t317) * t235 + t378;
t193 = (qJD(5) - t322) * t272 + t376;
t373 = g(1) * t435 - t436 * g(2);
t368 = qJDD(1) * pkin(1) + t373;
t441 = qJD(1) ^ 2;
t277 = (qJ(3) * t351 + pkin(7)) * t441 + t334 * pkin(2) - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t397) * t397 + t368;
t231 = t233 ^ 2;
t232 = t235 ^ 2;
t444 = t270 ^ 2;
t269 = t272 ^ 2;
t443 = t309 ^ 2;
t308 = t310 ^ 2;
t316 = t317 ^ 2;
t321 = t322 ^ 2;
t442 = t326 ^ 2;
t325 = t328 ^ 2;
t439 = 0.2e1 * qJD(3);
t291 = pkin(3) * t326 - qJ(4) * t328;
t200 = -pkin(3) * t440 + qJDD(2) * qJ(4) - t291 * t326 + t227;
t212 = pkin(3) * t279 - qJ(4) * t281 - t277;
t157 = 0.2e1 * qJD(4) * t310 + t200 * t353 - t355 * t212;
t133 = pkin(4) * t447 + pkin(8) * t249 - t157;
t158 = -0.2e1 * qJD(4) * t309 + t355 * t200 + t353 * t212;
t283 = pkin(4) * t326 - pkin(8) * t310;
t137 = -pkin(4) * t443 - pkin(8) * t375 - t326 * t283 + t158;
t90 = -t361 * t133 + t137 * t358;
t71 = pkin(5) * t449 - pkin(9) * t196 - t90;
t253 = pkin(5) * t322 - pkin(9) * t272;
t91 = t358 * t133 + t361 * t137;
t72 = -pkin(5) * t444 - pkin(9) * t370 - t322 * t253 + t91;
t41 = t357 * t72 - t360 * t71;
t42 = t357 * t71 + t360 * t72;
t25 = t357 * t42 - t360 * t41;
t438 = pkin(5) * t25;
t127 = t223 + t155;
t81 = -t124 * t357 - t127 * t360;
t437 = pkin(5) * t81;
t434 = pkin(3) * t354;
t431 = t25 * t358;
t430 = t25 * t361;
t58 = t358 * t91 - t361 * t90;
t429 = t353 * t58;
t428 = t355 * t58;
t377 = t274 * t354 - t356 * t363;
t199 = qJDD(4) - t440 * qJ(4) - qJDD(2) * pkin(3) + (t439 + t291) * t328 + t377;
t162 = t375 * pkin(4) - t443 * pkin(8) + t283 * t310 + t199;
t112 = pkin(5) * t370 - pkin(9) * t444 + t253 * t272 + t162;
t426 = t112 * t357;
t425 = t112 * t360;
t424 = t162 * t358;
t423 = t162 * t361;
t169 = t181 + t297;
t422 = t169 * t357;
t421 = t169 * t360;
t420 = t199 * t353;
t419 = t199 * t355;
t218 = t237 + t298;
t418 = t218 * t358;
t417 = t218 * t361;
t251 = t276 + t301;
t416 = t251 * t353;
t415 = t251 * t355;
t414 = t277 * t354;
t413 = t277 * t356;
t293 = qJDD(2) + t300;
t412 = t293 * t354;
t411 = t293 * t356;
t410 = t301 * t354;
t409 = t310 * t326;
t408 = t317 * t357;
t407 = t317 * t360;
t406 = t322 * t358;
t405 = t322 * t361;
t404 = t326 * t353;
t403 = t326 * t355;
t226 = t328 * t439 + t377;
t171 = -t226 * t356 + t227 * t354;
t402 = t359 * t171;
t341 = t362 * t441 * t359;
t401 = t359 * (qJDD(2) + t341);
t400 = t362 * (qJDD(2) - t341);
t394 = qJD(2) * t354;
t393 = qJD(2) * t356;
t388 = t354 * t181;
t387 = t356 * t181;
t386 = t354 * t237;
t385 = t356 * t237;
t384 = t354 * t276;
t383 = t356 * t276;
t382 = -pkin(3) * t356 - pkin(2);
t26 = t357 * t41 + t360 * t42;
t59 = t358 * t90 + t361 * t91;
t109 = t157 * t353 + t355 * t158;
t172 = t226 * t354 + t356 * t227;
t364 = -pkin(1) * t441 + t366;
t311 = t359 * t364 + t432;
t312 = t362 * t364 - t433;
t374 = t359 * t311 + t362 * t312;
t108 = -t157 * t355 + t158 * t353;
t173 = -t316 - t231;
t131 = t173 * t357 + t453;
t371 = pkin(5) * t131 - t41;
t245 = t375 - t409;
t280 = -t301 + t395;
t205 = -t232 - t316;
t148 = t205 * t360 - t422;
t367 = pkin(5) * t148 - t42;
t350 = t359 ^ 2;
t347 = t351 * t441;
t346 = t350 * t441;
t335 = t345 - 0.2e1 * t381;
t332 = t344 + 0.2e1 * t380;
t330 = pkin(7) * t441 + t368;
t315 = -t325 - t440;
t314 = -t325 + t440;
t313 = t442 - t440;
t296 = t356 * t301;
t292 = -t442 - t440;
t286 = -t308 + t442;
t285 = -t442 + t443;
t282 = t302 + t320;
t278 = -t442 - t325;
t275 = -t308 + t443;
t266 = -t308 - t442;
t263 = -t315 * t354 - t411;
t262 = t315 * t356 - t412;
t261 = -t442 - t443;
t258 = -t269 + t321;
t257 = -t321 + t444;
t256 = -t308 - t443;
t255 = t292 * t356 - t458;
t254 = t292 * t354 + t456;
t244 = t375 + t409;
t243 = t290 * t355 - t310 * t404;
t242 = t309 * t403 + t353 * t375;
t241 = (-t309 * t355 + t310 * t353) * t326;
t240 = -t269 - t321;
t239 = t280 * t356 + t282 * t354;
t238 = t280 * t354 - t282 * t356;
t236 = t269 - t444;
t230 = t285 * t355 - t416;
t229 = -t286 * t353 + t457;
t228 = -t321 - t444;
t222 = -t232 + t316;
t221 = t231 - t316;
t216 = -t266 * t353 - t415;
t215 = t266 * t355 - t416;
t209 = (-t270 * t361 + t272 * t358) * t322;
t208 = (-t270 * t358 - t272 * t361) * t322;
t207 = t261 * t355 - t459;
t206 = t261 * t353 + t457;
t204 = -t245 * t355 - t249 * t353;
t203 = -t244 * t355 - t353 * t446;
t202 = -t245 * t353 + t249 * t355;
t201 = -t269 - t444;
t192 = (qJD(5) + t322) * t272 + t376;
t191 = t220 * t361 - t272 * t406;
t190 = t220 * t358 + t272 * t405;
t189 = t270 * t405 + t358 * t370;
t188 = t270 * t406 - t361 * t370;
t187 = t257 * t361 - t418;
t186 = -t258 * t358 + t452;
t185 = t257 * t358 + t417;
t184 = t258 * t361 + t454;
t183 = t216 * t356 + t354 * t446;
t182 = t216 * t354 - t356 * t446;
t180 = t232 - t231;
t179 = t207 * t356 + t244 * t354;
t178 = t207 * t354 - t244 * t356;
t177 = -t240 * t358 - t417;
t176 = t240 * t361 - t418;
t175 = t204 * t356 + t256 * t354;
t174 = t204 * t354 - t256 * t356;
t167 = (-t233 * t360 + t235 * t357) * t317;
t166 = (-t233 * t357 - t235 * t360) * t317;
t165 = t228 * t361 - t454;
t164 = t228 * t358 + t452;
t163 = -t208 * t353 + t209 * t355;
t161 = -qJ(4) * t215 + t419;
t160 = -qJ(4) * t206 + t420;
t159 = -t231 - t232;
t154 = -qJD(6) * t235 - t378;
t153 = t221 * t360 - t422;
t152 = -t222 * t357 + t453;
t151 = t221 * t357 + t421;
t150 = t222 * t360 + t455;
t149 = -t205 * t357 - t421;
t147 = -t193 * t361 + t196 * t358;
t146 = -t192 * t361 - t358 * t448;
t145 = -t193 * t358 - t196 * t361;
t144 = -t192 * t358 + t361 * t448;
t143 = -t190 * t353 + t191 * t355;
t142 = -t188 * t353 + t189 * t355;
t141 = -t185 * t353 + t187 * t355;
t140 = -t184 * t353 + t186 * t355;
t139 = -t176 * t353 + t177 * t355;
t138 = t176 * t355 + t177 * t353;
t135 = -pkin(3) * t215 + t158;
t134 = -pkin(3) * t206 + t157;
t132 = t173 * t360 - t455;
t123 = (qJD(6) + t317) * t235 + t378;
t122 = t155 * t360 - t235 * t408;
t121 = t155 * t357 + t235 * t407;
t120 = -t154 * t357 + t233 * t407;
t119 = t154 * t360 + t233 * t408;
t118 = -t166 * t358 + t167 * t361;
t117 = t166 * t361 + t167 * t358;
t116 = -t164 * t353 + t165 * t355;
t115 = t164 * t355 + t165 * t353;
t114 = -pkin(8) * t176 + t423;
t113 = -pkin(8) * t164 + t424;
t111 = t139 * t356 + t354 * t448;
t110 = t139 * t354 - t356 * t448;
t107 = -pkin(4) * t448 + pkin(8) * t177 + t424;
t106 = t116 * t356 + t192 * t354;
t105 = t116 * t354 - t192 * t356;
t104 = -pkin(4) * t192 + pkin(8) * t165 - t423;
t103 = -t151 * t358 + t153 * t361;
t102 = -t150 * t358 + t152 * t361;
t101 = t151 * t361 + t153 * t358;
t100 = t150 * t361 + t152 * t358;
t99 = -t148 * t358 + t149 * t361;
t98 = t148 * t361 + t149 * t358;
t97 = -t145 * t353 + t147 * t355;
t96 = -t144 * t353 + t146 * t355;
t95 = t145 * t355 + t147 * t353;
t94 = -qJ(4) * t202 - t108;
t92 = t109 * t354 - t199 * t356;
t88 = t201 * t354 + t356 * t97;
t87 = -t201 * t356 + t354 * t97;
t86 = -t131 * t358 + t132 * t361;
t85 = t131 * t361 + t132 * t358;
t84 = -pkin(9) * t148 + t425;
t83 = -t124 * t360 + t127 * t357;
t82 = -t123 * t360 - t357 * t450;
t80 = -t123 * t357 + t360 * t450;
t79 = -t121 * t358 + t122 * t361;
t78 = -t119 * t358 + t120 * t361;
t77 = t121 * t361 + t122 * t358;
t76 = t119 * t361 + t120 * t358;
t75 = -t117 * t353 + t118 * t355;
t74 = -pkin(9) * t131 + t426;
t73 = -pkin(3) * t95 - pkin(4) * t145;
t69 = -pkin(5) * t450 + pkin(9) * t149 + t426;
t68 = -t101 * t353 + t103 * t355;
t67 = -t100 * t353 + t102 * t355;
t66 = -pkin(5) * t123 + pkin(9) * t132 - t425;
t65 = -t353 * t98 + t355 * t99;
t64 = t353 * t99 + t355 * t98;
t63 = -pkin(3) * t138 - pkin(4) * t176 + t91;
t62 = -qJ(4) * t138 - t107 * t353 + t114 * t355;
t61 = -pkin(3) * t115 - pkin(4) * t164 + t90;
t60 = -qJ(4) * t115 - t104 * t353 + t113 * t355;
t57 = -t353 * t85 + t355 * t86;
t56 = t353 * t86 + t355 * t85;
t55 = -t358 * t81 + t361 * t83;
t54 = -t358 * t80 + t361 * t82;
t53 = t358 * t83 + t361 * t81;
t52 = t358 * t82 + t361 * t80;
t51 = -t353 * t77 + t355 * t79;
t50 = -t353 * t76 + t355 * t78;
t49 = t354 * t450 + t356 * t65;
t48 = t354 * t65 - t356 * t450;
t47 = -pkin(4) * t162 + pkin(8) * t59;
t46 = -pkin(8) * t145 - t58;
t45 = -pkin(4) * t201 + pkin(8) * t147 + t59;
t44 = t123 * t354 + t356 * t57;
t43 = -t123 * t356 + t354 * t57;
t39 = -pkin(8) * t98 - t358 * t69 + t361 * t84;
t38 = -pkin(8) * t85 - t358 * t66 + t361 * t74;
t37 = t355 * t59 - t429;
t36 = t353 * t59 + t428;
t35 = -pkin(4) * t450 + pkin(8) * t99 + t358 * t84 + t361 * t69;
t34 = -t353 * t53 + t355 * t55;
t33 = -t353 * t52 + t355 * t54;
t32 = t353 * t55 + t355 * t53;
t31 = t162 * t354 + t356 * t37;
t30 = -t162 * t356 + t354 * t37;
t29 = -pkin(4) * t123 + pkin(8) * t86 + t358 * t74 + t361 * t66;
t28 = t159 * t354 + t34 * t356;
t27 = -t159 * t356 + t34 * t354;
t24 = -pkin(3) * t64 - pkin(4) * t98 - t367;
t23 = -qJ(4) * t95 - t353 * t45 + t355 * t46;
t22 = -pkin(5) * t112 + pkin(9) * t26;
t21 = -pkin(3) * t36 - pkin(4) * t58;
t20 = -pkin(3) * t56 - pkin(4) * t85 - t371;
t19 = -pkin(9) * t81 - t25;
t18 = -pkin(5) * t159 + pkin(9) * t83 + t26;
t17 = -pkin(3) * t32 - pkin(4) * t53 - t437;
t16 = -pkin(8) * t428 - qJ(4) * t36 - t353 * t47;
t15 = -qJ(4) * t64 - t35 * t353 + t355 * t39;
t14 = -qJ(4) * t56 - t29 * t353 + t355 * t38;
t13 = t26 * t361 - t431;
t12 = t26 * t358 + t430;
t11 = -pkin(8) * t53 - t18 * t358 + t19 * t361;
t10 = -pkin(4) * t159 + pkin(8) * t55 + t18 * t361 + t19 * t358;
t9 = -t12 * t353 + t13 * t355;
t8 = t12 * t355 + t13 * t353;
t7 = -pkin(8) * t12 - pkin(9) * t430 - t22 * t358;
t6 = t112 * t354 + t356 * t9;
t5 = -t112 * t356 + t354 * t9;
t4 = -pkin(4) * t112 + pkin(8) * t13 - pkin(9) * t431 + t22 * t361;
t3 = -qJ(4) * t32 - t10 * t353 + t11 * t355;
t2 = -pkin(3) * t8 - pkin(4) * t12 - t438;
t1 = -qJ(4) * t8 - t353 * t4 + t355 * t7;
t40 = [0, 0, 0, 0, 0, qJDD(1), t373, t369, 0, 0, (t333 + t380) * t359, t332 * t362 + t359 * t335, t401 + t362 * (-t346 + t440), (t334 - t381) * t362, t359 * (t347 - t440) + t400, 0, t362 * t330 + pkin(1) * t335 + pkin(7) * (t362 * (-t347 - t440) - t401), -t359 * t330 - pkin(1) * t332 + pkin(7) * (-t400 - t359 * (-t346 - t440)), pkin(1) * (t346 + t347) + (t350 + t351) * t427 + t374, pkin(1) * t330 + pkin(7) * t374, t359 * (t302 * t356 - t328 * t394) + t362 * (t302 * t354 + t328 * t393), t359 * (-t279 * t356 - t281 * t354) + t362 * (-t279 * t354 + t281 * t356), t359 * (-t314 * t354 + t456) + t362 * (t314 * t356 + t458), t359 * (t326 * t393 + t410) + t362 * (t326 * t394 - t296), t359 * (t313 * t356 - t412) + t362 * (t313 * t354 + t411), (t359 * (-t326 * t356 + t328 * t354) + t362 * (-t326 * t354 - t328 * t356)) * qJD(2), t359 * (-qJ(3) * t254 - t414) + t362 * (-pkin(2) * t279 + qJ(3) * t255 + t413) - pkin(1) * t279 + pkin(7) * (-t359 * t254 + t255 * t362), t359 * (-qJ(3) * t262 - t413) + t362 * (-pkin(2) * t281 + qJ(3) * t263 - t414) - pkin(1) * t281 + pkin(7) * (-t359 * t262 + t263 * t362), t359 * (-qJ(3) * t238 - t171) + t362 * (-pkin(2) * t278 + qJ(3) * t239 + t172) - pkin(1) * t278 + pkin(7) * (-t359 * t238 + t239 * t362), -qJ(3) * t402 + t362 * (pkin(2) * t277 + qJ(3) * t172) + pkin(1) * t277 + pkin(7) * (t172 * t362 - t402), t359 * (t243 * t356 + t384) + t362 * (t243 * t354 - t383), t359 * (t203 * t356 - t275 * t354) + t362 * (t203 * t354 + t275 * t356), t359 * (t229 * t356 - t249 * t354) + t362 * (t229 * t354 + t249 * t356), t359 * (t242 * t356 - t384) + t362 * (t242 * t354 + t383), t359 * (t230 * t356 - t245 * t354) + t362 * (t230 * t354 + t245 * t356), t359 * (t241 * t356 + t410) + t362 * (t241 * t354 - t296), t359 * (-qJ(3) * t178 - t134 * t354 + t160 * t356) + t362 * (-pkin(2) * t206 + qJ(3) * t179 + t134 * t356 + t160 * t354) - pkin(1) * t206 + pkin(7) * (-t359 * t178 + t179 * t362), t359 * (-qJ(3) * t182 - t135 * t354 + t161 * t356) + t362 * (-pkin(2) * t215 + qJ(3) * t183 + t135 * t356 + t161 * t354) - pkin(1) * t215 + pkin(7) * (-t359 * t182 + t183 * t362), t359 * (-qJ(3) * t174 + t356 * t94) + t362 * (qJ(3) * t175 + t354 * t94) + pkin(7) * (-t359 * t174 + t175 * t362) + (t359 * t434 + t362 * t382 - pkin(1)) * t202, (t359 * (-qJ(4) * t356 + t434) + t362 * (-qJ(4) * t354 + t382) - pkin(1)) * t108 + (pkin(7) + qJ(3)) * (-t359 * t92 + t362 * (t109 * t356 + t199 * t354)), t359 * (t143 * t356 + t386) + t362 * (t143 * t354 - t385), t359 * (t236 * t354 + t356 * t96) + t362 * (-t236 * t356 + t354 * t96), t359 * (t140 * t356 + t196 * t354) + t362 * (t140 * t354 - t196 * t356), t359 * (t142 * t356 - t386) + t362 * (t142 * t354 + t385), t359 * (t141 * t356 - t193 * t354) + t362 * (t141 * t354 + t193 * t356), t359 * (t163 * t356 + t298 * t354) + t362 * (t163 * t354 - t298 * t356), t359 * (-qJ(3) * t105 - t354 * t61 + t356 * t60) + t362 * (-pkin(2) * t115 + qJ(3) * t106 + t354 * t60 + t356 * t61) - pkin(1) * t115 + pkin(7) * (-t359 * t105 + t106 * t362), t359 * (-qJ(3) * t110 - t354 * t63 + t356 * t62) + t362 * (-pkin(2) * t138 + qJ(3) * t111 + t354 * t62 + t356 * t63) - pkin(1) * t138 + pkin(7) * (-t359 * t110 + t111 * t362), t359 * (-qJ(3) * t87 + t23 * t356 - t354 * t73) + t362 * (-pkin(2) * t95 + qJ(3) * t88 + t23 * t354 + t356 * t73) - pkin(1) * t95 + pkin(7) * (-t359 * t87 + t362 * t88), t359 * (-qJ(3) * t30 + t16 * t356 - t21 * t354) + t362 * (-pkin(2) * t36 + qJ(3) * t31 + t16 * t354 + t21 * t356) - pkin(1) * t36 + pkin(7) * (-t359 * t30 + t31 * t362), t359 * (t356 * t51 + t388) + t362 * (t354 * t51 - t387), t359 * (t180 * t354 + t33 * t356) + t362 * (-t180 * t356 + t33 * t354), t359 * (t127 * t354 + t356 * t67) + t362 * (-t127 * t356 + t354 * t67), t359 * (t356 * t50 - t388) + t362 * (t354 * t50 + t387), t359 * (-t124 * t354 + t356 * t68) + t362 * (t124 * t356 + t354 * t68), t359 * (t297 * t354 + t356 * t75) + t362 * (-t297 * t356 + t354 * t75), t359 * (-qJ(3) * t43 + t14 * t356 - t20 * t354) + t362 * (-pkin(2) * t56 + qJ(3) * t44 + t14 * t354 + t20 * t356) - pkin(1) * t56 + pkin(7) * (-t359 * t43 + t362 * t44), t359 * (-qJ(3) * t48 + t15 * t356 - t24 * t354) + t362 * (-pkin(2) * t64 + qJ(3) * t49 + t15 * t354 + t24 * t356) - pkin(1) * t64 + pkin(7) * (-t359 * t48 + t362 * t49), t359 * (-qJ(3) * t27 - t17 * t354 + t3 * t356) + t362 * (-pkin(2) * t32 + qJ(3) * t28 + t17 * t356 + t3 * t354) - pkin(1) * t32 + pkin(7) * (-t359 * t27 + t28 * t362), t359 * (-qJ(3) * t5 + t1 * t356 - t2 * t354) + t362 * (-pkin(2) * t8 + qJ(3) * t6 + t1 * t354 + t2 * t356) - pkin(1) * t8 + pkin(7) * (-t359 * t5 + t362 * t6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, t346 - t347, t344, t341, t345, qJDD(2), -t311, -t312, 0, 0, t300, t325 - t442, t282, -t300, t280, qJDD(2), pkin(2) * t254 - t226, pkin(2) * t262 - t227, pkin(2) * t238, pkin(2) * t171, t290 * t353 + t310 * t403, -t244 * t353 + t355 * t446, t286 * t355 + t459, t309 * t404 - t355 * t375, t285 * t353 + t415, (-t309 * t353 - t310 * t355) * t326, pkin(2) * t178 - pkin(3) * t244 + qJ(4) * t207 - t419, pkin(2) * t182 - pkin(3) * t446 + qJ(4) * t216 + t420, pkin(2) * t174 - pkin(3) * t256 + qJ(4) * t204 + t109, pkin(2) * t92 - pkin(3) * t199 + qJ(4) * t109, t190 * t355 + t191 * t353, t144 * t355 + t146 * t353, t184 * t355 + t186 * t353, t188 * t355 + t189 * t353, t185 * t355 + t187 * t353, t208 * t355 + t209 * t353, pkin(2) * t105 - pkin(3) * t192 + qJ(4) * t116 + t104 * t355 + t113 * t353, pkin(2) * t110 - pkin(3) * t448 + qJ(4) * t139 + t107 * t355 + t114 * t353, pkin(2) * t87 - pkin(3) * t201 + qJ(4) * t97 + t353 * t46 + t355 * t45, pkin(2) * t30 - pkin(3) * t162 - pkin(8) * t429 + qJ(4) * t37 + t355 * t47, t353 * t79 + t355 * t77, t353 * t54 + t355 * t52, t100 * t355 + t102 * t353, t353 * t78 + t355 * t76, t101 * t355 + t103 * t353, t117 * t355 + t118 * t353, pkin(2) * t43 - pkin(3) * t123 + qJ(4) * t57 + t29 * t355 + t353 * t38, pkin(2) * t48 - pkin(3) * t450 + qJ(4) * t65 + t35 * t355 + t353 * t39, pkin(2) * t27 - pkin(3) * t159 + qJ(4) * t34 + t10 * t355 + t11 * t353, pkin(2) * t5 - pkin(3) * t112 + qJ(4) * t9 + t353 * t7 + t355 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t279, t281, t278, -t277, 0, 0, 0, 0, 0, 0, t206, t215, t202, t108, 0, 0, 0, 0, 0, 0, t115, t138, t95, t36, 0, 0, 0, 0, 0, 0, t56, t64, t32, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, t446, t256, t199, 0, 0, 0, 0, 0, 0, t192, t448, t201, t162, 0, 0, 0, 0, 0, 0, t123, t450, t159, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t236, t196, -t237, -t193, t298, -t90, -t91, 0, 0, t181, t180, t127, -t181, -t124, t297, t371, t367, t437, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, t180, t127, -t181, -t124, t297, -t41, -t42, 0, 0;];
tauJ_reg  = t40;
