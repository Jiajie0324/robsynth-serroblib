% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:52:44
% EndTime: 2019-03-09 08:53:04
% DurationCPUTime: 11.50s
% Computational Cost: add. (21697->673), mult. (51290->854), div. (0->0), fcn. (40041->18), ass. (0->296)
t297 = sin(pkin(10));
t303 = sin(qJ(2));
t306 = cos(qJ(2));
t401 = cos(pkin(10));
t252 = t297 * t306 + t303 * t401;
t239 = t252 * qJD(1);
t296 = sin(pkin(11));
t298 = cos(pkin(11));
t204 = qJD(2) * t296 + t239 * t298;
t205 = t298 * qJD(2) - t239 * t296;
t302 = sin(qJ(5));
t305 = cos(qJ(5));
t131 = t204 * t302 - t205 * t305;
t134 = t204 * t305 + t205 * t302;
t301 = sin(qJ(6));
t429 = cos(qJ(6));
t70 = t429 * t131 + t134 * t301;
t458 = t70 ^ 2;
t72 = t301 * t131 - t134 * t429;
t457 = t72 ^ 2;
t349 = t401 * t306;
t269 = qJD(1) * t349;
t371 = qJD(1) * t303;
t236 = t297 * t371 - t269;
t231 = qJD(5) + t236;
t223 = qJD(6) + t231;
t456 = t223 * t70;
t455 = t72 * t223;
t454 = t131 ^ 2;
t453 = t134 ^ 2;
t452 = t131 * t231;
t451 = t134 * t231;
t299 = -qJ(3) - pkin(7);
t351 = qJD(2) * t299;
t233 = -qJD(3) * t303 + t306 * t351;
t263 = t299 * t303;
t179 = qJDD(2) * pkin(2) + qJD(1) * t233 + qJDD(1) * t263;
t232 = qJD(3) * t306 + t303 * t351;
t264 = t299 * t306;
t191 = qJD(1) * t232 - qJDD(1) * t264;
t114 = t401 * t179 - t297 * t191;
t113 = -qJDD(2) * pkin(3) + qJDD(4) - t114;
t293 = qJ(2) + pkin(10);
t285 = sin(t293);
t287 = cos(t293);
t304 = sin(qJ(1));
t307 = cos(qJ(1));
t343 = g(1) * t307 + g(2) * t304;
t322 = -g(3) * t287 + t343 * t285;
t314 = t113 - t322;
t253 = t296 * t305 + t298 * t302;
t243 = t253 * qJD(5);
t448 = t253 * t236 + t243;
t378 = t305 * t298;
t251 = t296 * t302 - t378;
t369 = qJD(5) * t305;
t370 = qJD(5) * t302;
t440 = -t296 * t370 + t298 * t369;
t376 = t251 * t236 - t440;
t273 = pkin(2) * t297 + qJ(4);
t414 = pkin(8) + t273;
t247 = t414 * t296;
t248 = t414 * t298;
t162 = pkin(2) * t371 + pkin(3) * t239 + qJ(4) * t236;
t259 = qJD(1) * t264;
t244 = t297 * t259;
t258 = qJD(1) * t263;
t193 = t258 * t401 + t244;
t111 = t298 * t162 - t193 * t296;
t384 = t236 * t298;
t78 = pkin(4) * t239 + pkin(8) * t384 + t111;
t112 = t296 * t162 + t298 * t193;
t385 = t236 * t296;
t92 = pkin(8) * t385 + t112;
t403 = qJD(4) * t378 - t247 * t369 - t305 * t92 + (-qJD(4) * t296 - qJD(5) * t248 - t78) * t302;
t175 = -t302 * t247 + t305 * t248;
t402 = -t253 * qJD(4) - qJD(5) * t175 + t302 * t92 - t305 * t78;
t415 = t70 * t72;
t356 = qJD(6) * t429;
t368 = qJD(6) * t301;
t405 = t251 * t356 + t253 * t368 + t301 * t448 + t376 * t429;
t190 = -t301 * t251 + t253 * t429;
t404 = qJD(6) * t190 - t301 * t376 + t429 * t448;
t450 = -pkin(9) * t448 + t403;
t449 = -pkin(5) * t239 + pkin(9) * t376 + t402;
t447 = -g(1) * t304 + g(2) * t307;
t446 = t457 - t458;
t366 = qJD(1) * qJD(2);
t355 = t303 * t366;
t316 = qJDD(1) * t252 - t297 * t355;
t187 = qJD(2) * t269 + t316;
t158 = -t298 * qJDD(2) + t187 * t296;
t159 = qJDD(2) * t296 + t187 * t298;
t56 = t302 * t158 - t305 * t159 + t204 * t370 - t205 * t369;
t57 = t158 * t305 + t302 * t159 + t204 * t369 + t205 * t370;
t23 = t131 * t356 + t134 * t368 + t301 * t57 + t429 * t56;
t445 = -t23 + t456;
t427 = pkin(2) * t306;
t281 = pkin(1) + t427;
t262 = -qJD(1) * t281 + qJD(3);
t150 = pkin(3) * t236 - qJ(4) * t239 + t262;
t411 = qJD(2) * pkin(2);
t249 = t258 + t411;
t350 = t401 * t259;
t185 = t297 * t249 - t350;
t172 = qJD(2) * qJ(4) + t185;
t97 = t298 * t150 - t172 * t296;
t64 = pkin(4) * t236 - pkin(8) * t204 + t97;
t98 = t296 * t150 + t298 * t172;
t79 = pkin(8) * t205 + t98;
t39 = -t302 * t79 + t305 * t64;
t27 = -pkin(9) * t134 + t39;
t25 = pkin(5) * t231 + t27;
t40 = t302 * t64 + t305 * t79;
t28 = -pkin(9) * t131 + t40;
t238 = t252 * qJD(2);
t365 = t303 * qJDD(1);
t339 = -qJDD(1) * t349 + t297 * t365;
t186 = qJD(1) * t238 + t339;
t180 = qJDD(5) + t186;
t115 = t297 * t179 + t401 * t191;
t110 = qJDD(2) * qJ(4) + qJD(2) * qJD(4) + t115;
t228 = pkin(2) * t355 - qJDD(1) * t281 + qJDD(3);
t84 = pkin(3) * t186 - qJ(4) * t187 - qJD(4) * t239 + t228;
t47 = -t110 * t296 + t298 * t84;
t33 = pkin(4) * t186 - pkin(8) * t159 + t47;
t48 = t298 * t110 + t296 * t84;
t43 = -pkin(8) * t158 + t48;
t9 = -qJD(5) * t40 - t302 * t43 + t305 * t33;
t6 = pkin(5) * t180 + pkin(9) * t56 + t9;
t8 = t302 * t33 + t305 * t43 + t64 * t369 - t370 * t79;
t7 = -pkin(9) * t57 + t8;
t1 = t25 * t356 - t28 * t368 + t301 * t6 + t429 * t7;
t292 = pkin(11) + qJ(5);
t288 = qJ(6) + t292;
t277 = sin(t288);
t278 = cos(t288);
t381 = t287 * t304;
t207 = t277 * t307 - t278 * t381;
t380 = t287 * t307;
t209 = t277 * t304 + t278 * t380;
t417 = g(3) * t285;
t184 = t249 * t401 + t244;
t165 = -qJD(2) * pkin(3) + qJD(4) - t184;
t124 = -pkin(4) * t205 + t165;
t68 = t131 * pkin(5) + t124;
t444 = g(1) * t209 - g(2) * t207 + t278 * t417 + t68 * t70 - t1;
t329 = t447 * t287;
t354 = pkin(4) * t296 - t299;
t284 = sin(t292);
t286 = cos(t292);
t211 = t284 * t381 + t286 * t307;
t213 = -t284 * t380 + t286 * t304;
t439 = -g(1) * t213 + g(2) * t211 + t284 * t417;
t361 = t429 * t28;
t11 = t301 * t25 + t361;
t2 = -qJD(6) * t11 - t301 * t7 + t429 * t6;
t206 = t277 * t381 + t278 * t307;
t208 = -t277 * t380 + t278 * t304;
t438 = -g(1) * t208 + g(2) * t206 + t277 * t417 + t68 * t72 + t2;
t437 = t134 * t448 - t251 * t56;
t24 = -qJD(6) * t72 - t301 * t56 + t429 * t57;
t436 = -t24 - t455;
t176 = qJDD(6) + t180;
t435 = t176 * t190 - t223 * t405;
t434 = t180 * t253 - t231 * t376;
t234 = t236 ^ 2;
t391 = t186 * t296;
t433 = -t234 * t298 - t391;
t320 = -t343 * t287 - t417;
t189 = t251 * t429 + t253 * t301;
t432 = t189 * t23 + t404 * t72;
t431 = t239 ^ 2;
t430 = pkin(5) * t57;
t428 = pkin(2) * t303;
t426 = pkin(4) * t158;
t424 = pkin(8) * t298;
t267 = t307 * t281;
t419 = g(2) * t267;
t416 = g(3) * t306;
t300 = -pkin(8) - qJ(4);
t289 = t298 * pkin(4);
t279 = t289 + pkin(3);
t174 = -t305 * t247 - t248 * t302;
t140 = -pkin(9) * t253 + t174;
t141 = -pkin(9) * t251 + t175;
t80 = t140 * t429 - t301 * t141;
t413 = qJD(6) * t80 + t301 * t449 + t429 * t450;
t81 = t301 * t140 + t141 * t429;
t412 = -qJD(6) * t81 - t301 * t450 + t429 * t449;
t326 = -t297 * t303 + t349;
t182 = -pkin(3) * t326 - qJ(4) * t252 - t281;
t200 = t297 * t263 - t264 * t401;
t123 = t296 * t182 + t298 * t200;
t382 = t252 * t296;
t103 = -pkin(8) * t382 + t123;
t122 = t298 * t182 - t200 * t296;
t91 = -pkin(4) * t326 - t252 * t424 + t122;
t51 = t305 * t103 + t302 * t91;
t409 = t239 * t70;
t408 = t239 * t72;
t406 = t301 * t28;
t400 = pkin(7) * qJDD(1);
t399 = t131 * t239;
t398 = t134 * t131;
t397 = t134 * t239;
t396 = t158 * t298;
t395 = t159 * t296;
t394 = t159 * t298;
t390 = t205 * t239;
t389 = t205 * t298;
t388 = t204 * t239;
t387 = t204 * t296;
t386 = t236 * t239;
t241 = t326 * qJD(2);
t383 = t241 * t296;
t173 = t298 * t186;
t362 = t303 * t411;
t136 = pkin(3) * t238 - qJ(4) * t241 - qJD(4) * t252 + t362;
t164 = t232 * t401 + t297 * t233;
t87 = t296 * t136 + t298 * t164;
t375 = -t234 * t296 + t173;
t374 = pkin(5) * t284 + t354;
t294 = t303 ^ 2;
t295 = t306 ^ 2;
t373 = t294 - t295;
t372 = t294 + t295;
t367 = -qJD(4) + t165;
t364 = t306 * qJDD(1);
t309 = qJD(1) ^ 2;
t360 = t303 * t309 * t306;
t192 = t258 * t297 - t350;
t139 = -pkin(4) * t385 + t192;
t357 = pkin(5) * t448 - t139;
t50 = -t103 * t302 + t305 * t91;
t86 = t298 * t136 - t164 * t296;
t163 = t232 * t297 - t401 * t233;
t199 = -t401 * t263 - t264 * t297;
t348 = -t190 * t24 + t405 * t70;
t347 = t306 * t355;
t346 = t447 * t285;
t345 = -t189 * t176 - t223 * t404;
t280 = -pkin(2) * t401 - pkin(3);
t344 = t131 * t376 - t253 * t57;
t341 = -t251 * t180 - t231 * t448;
t126 = pkin(4) * t383 + t163;
t156 = pkin(4) * t382 + t199;
t340 = pkin(3) * t287 + qJ(4) * t285;
t338 = -t296 * t48 - t298 * t47;
t337 = -t296 * t97 + t298 * t98;
t336 = -t186 * t326 + t236 * t238;
t335 = t186 * t252 + t236 * t241;
t334 = -t387 + t389;
t255 = pkin(5) * t286 + t279;
t291 = -pkin(9) + t300;
t333 = t255 * t287 - t285 * t291;
t332 = t279 * t287 - t285 * t300;
t261 = -t289 + t280;
t167 = t251 * t252;
t41 = -pkin(5) * t326 + pkin(9) * t167 + t50;
t166 = t253 * t252;
t44 = -pkin(9) * t166 + t51;
t18 = -t301 * t44 + t41 * t429;
t19 = t301 * t41 + t429 * t44;
t328 = -0.2e1 * pkin(1) * t366 - pkin(7) * qJDD(2);
t108 = -t301 * t166 - t167 * t429;
t61 = pkin(4) * t238 - t241 * t424 + t86;
t66 = -pkin(8) * t383 + t87;
t20 = -t103 * t370 + t302 * t61 + t305 * t66 + t91 * t369;
t67 = t113 + t426;
t308 = qJD(2) ^ 2;
t319 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t308 - t447;
t318 = pkin(1) * t309 + t343 - t400;
t317 = t113 * t252 + t165 * t241 - t343;
t21 = -qJD(5) * t51 - t302 * t66 + t305 * t61;
t313 = t314 + t426;
t214 = t284 * t304 + t286 * t380;
t212 = t284 * t307 - t286 * t381;
t201 = t251 * pkin(5) + t261;
t146 = t296 * t158;
t109 = pkin(5) * t166 + t156;
t107 = t166 * t429 - t167 * t301;
t106 = t241 * t253 + t252 * t440;
t105 = t241 * t251 + t243 * t252;
t58 = pkin(5) * t106 + t126;
t36 = qJD(6) * t108 - t301 * t105 + t106 * t429;
t35 = t105 * t429 + t301 * t106 + t166 * t356 - t167 * t368;
t32 = t67 + t430;
t17 = -pkin(9) * t106 + t20;
t14 = pkin(5) * t238 + pkin(9) * t105 + t21;
t13 = t27 * t429 - t406;
t12 = -t301 * t27 - t361;
t10 = t25 * t429 - t406;
t4 = -qJD(6) * t19 + t14 * t429 - t301 * t17;
t3 = qJD(6) * t18 + t301 * t14 + t17 * t429;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t447, t343, 0, 0, qJDD(1) * t294 + 0.2e1 * t347, 0.2e1 * t303 * t364 - 0.2e1 * t366 * t373, qJDD(2) * t303 + t306 * t308, qJDD(1) * t295 - 0.2e1 * t347, qJDD(2) * t306 - t303 * t308, 0, t303 * t328 + t306 * t319, -t303 * t319 + t306 * t328, 0.2e1 * t372 * t400 - t343, -g(1) * (-pkin(1) * t304 + pkin(7) * t307) - g(2) * (pkin(1) * t307 + pkin(7) * t304) + (pkin(7) ^ 2 * t372 + pkin(1) ^ 2) * qJDD(1), t187 * t252 + t239 * t241, t187 * t326 - t238 * t239 - t335, qJD(2) * t241 + qJDD(2) * t252, t336, -qJD(2) * t238 + qJDD(2) * t326, 0, -qJDD(2) * t199 - t186 * t281 - t228 * t326 + t238 * t262 - t329 + (t236 * t428 - t163) * qJD(2), -qJDD(2) * t200 - t187 * t281 + t228 * t252 + t241 * t262 + (t239 * t428 - t164) * qJD(2) + t346, -t114 * t252 + t115 * t326 + t163 * t239 - t164 * t236 - t184 * t241 - t185 * t238 - t186 * t200 + t187 * t199 - t343, t115 * t200 + t185 * t164 - t114 * t199 - t184 * t163 - t228 * t281 + t262 * t362 - g(1) * (-t304 * t281 - t307 * t299) - g(2) * (-t304 * t299 + t267) (t159 * t252 + t204 * t241) * t298 (-t395 - t396) * t252 + t334 * t241, -t159 * t326 + t204 * t238 + t298 * t335 (t158 * t252 - t205 * t241) * t296, t158 * t326 + t205 * t238 - t296 * t335, t336, t122 * t186 + t199 * t158 - t163 * t205 + t86 * t236 + t97 * t238 + t296 * t317 - t298 * t329 - t326 * t47, -t123 * t186 + t199 * t159 + t163 * t204 - t87 * t236 - t98 * t238 + t296 * t329 + t298 * t317 + t326 * t48, -t122 * t159 - t123 * t158 + t205 * t87 - t204 * t86 + t338 * t252 + (-t296 * t98 - t298 * t97) * t241 - t346, -t419 + t113 * t199 + t47 * t122 + t48 * t123 + t165 * t163 + t97 * t86 + t98 * t87 + (g(1) * t299 - g(2) * t340) * t307 + (-g(1) * (-t281 - t340) + g(2) * t299) * t304, -t105 * t134 + t167 * t56, t105 * t131 - t106 * t134 + t166 * t56 + t167 * t57, -t105 * t231 + t134 * t238 - t167 * t180 + t326 * t56, t106 * t131 + t166 * t57, -t106 * t231 - t131 * t238 - t166 * t180 + t326 * t57, -t180 * t326 + t231 * t238, -g(1) * t212 - g(2) * t214 + t106 * t124 + t126 * t131 + t156 * t57 + t166 * t67 + t180 * t50 + t21 * t231 + t238 * t39 - t326 * t9, -g(1) * t211 - g(2) * t213 - t105 * t124 + t126 * t134 - t156 * t56 - t167 * t67 - t180 * t51 - t20 * t231 - t238 * t40 + t326 * t8, t105 * t39 - t106 * t40 - t131 * t20 - t134 * t21 - t166 * t8 + t167 * t9 + t50 * t56 - t51 * t57 - t346, -t419 + t124 * t126 + t67 * t156 + t40 * t20 + t39 * t21 + t9 * t50 + t8 * t51 + (-g(1) * t354 - g(2) * t332) * t307 + (-g(1) * (-t281 - t332) - g(2) * t354) * t304, -t108 * t23 + t35 * t72, t107 * t23 - t108 * t24 + t35 * t70 + t36 * t72, t108 * t176 - t223 * t35 + t23 * t326 - t238 * t72, t107 * t24 + t36 * t70, -t107 * t176 - t223 * t36 - t238 * t70 + t24 * t326, -t176 * t326 + t223 * t238, -g(1) * t207 - g(2) * t209 + t10 * t238 + t107 * t32 + t109 * t24 + t176 * t18 - t2 * t326 + t223 * t4 + t36 * t68 + t58 * t70, -g(1) * t206 - g(2) * t208 + t1 * t326 + t108 * t32 - t109 * t23 - t11 * t238 - t176 * t19 - t223 * t3 - t35 * t68 - t58 * t72, -t1 * t107 + t10 * t35 - t108 * t2 - t11 * t36 + t18 * t23 - t19 * t24 - t3 * t70 + t4 * t72 - t346, -t419 + t1 * t19 + t10 * t4 + t32 * t109 + t11 * t3 + t2 * t18 + t68 * t58 + (-g(1) * t374 - g(2) * t333) * t307 + (-g(1) * (-t281 - t333) - g(2) * t374) * t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t360, t373 * t309, t365, t360, t364, qJDD(2), t303 * t318 - t416, g(3) * t303 + t306 * t318, 0, 0, t386, -t234 + t431 (t269 + t236) * qJD(2) + t316, -t386, -t339, qJDD(2), t192 * qJD(2) - t262 * t239 + (qJDD(2) * t401 - t236 * t371) * pkin(2) + t114 + t322, qJD(2) * t193 + t236 * t262 + (-qJDD(2) * t297 - t239 * t371) * pkin(2) - t115 - t320 (t185 - t192) * t239 + (-t184 + t193) * t236 + (-t186 * t297 - t187 * t401) * pkin(2), t184 * t192 - t185 * t193 + (t401 * t114 - t416 + t115 * t297 + (-qJD(1) * t262 + t343) * t303) * pkin(2), t204 * t384 + t395, t236 * t334 - t146 + t394, -t388 - t433, -t205 * t385 - t396, t375 - t390, -t386, -t273 * t391 + t158 * t280 + t192 * t205 - t239 * t97 + (t296 * t367 - t111) * t236 - t314 * t298, -t273 * t173 + t159 * t280 - t192 * t204 + t239 * t98 + (t298 * t367 + t112) * t236 + t314 * t296, t111 * t204 - t112 * t205 + (qJD(4) * t205 - t158 * t273 - t236 * t97 + t48) * t298 + (qJD(4) * t204 + t159 * t273 - t236 * t98 - t47) * t296 + t320, t113 * t280 - t98 * t112 - t97 * t111 - t165 * t192 - g(3) * (t340 + t427) + (-t47 * t296 + t48 * t298) * t273 + t337 * qJD(4) + t343 * (pkin(3) * t285 - qJ(4) * t287 + t428) -t134 * t376 - t253 * t56, t344 - t437, -t397 + t434, t131 * t448 + t251 * t57, t341 + t399, -t231 * t239, t124 * t448 - t131 * t139 + t174 * t180 + t231 * t402 - t239 * t39 + t251 * t67 + t261 * t57 + t286 * t322, -t124 * t376 - t134 * t139 - t175 * t180 - t231 * t403 + t239 * t40 + t253 * t67 - t261 * t56 - t284 * t322, -t131 * t403 - t134 * t402 + t174 * t56 - t175 * t57 - t251 * t8 - t253 * t9 + t376 * t39 - t40 * t448 + t320, t8 * t175 + t9 * t174 + t67 * t261 - t124 * t139 - g(3) * (t332 + t427) + t403 * t40 + t402 * t39 + t343 * (t279 * t285 + t287 * t300 + t428) -t190 * t23 + t405 * t72, t348 + t432, t408 + t435, t189 * t24 + t404 * t70, t345 + t409, -t223 * t239, -t10 * t239 + t176 * t80 + t189 * t32 + t201 * t24 + t223 * t412 + t278 * t322 + t357 * t70 + t404 * t68, t11 * t239 - t176 * t81 + t190 * t32 - t201 * t23 - t223 * t413 - t277 * t322 - t357 * t72 - t405 * t68, -t1 * t189 + t10 * t405 - t11 * t404 - t190 * t2 + t23 * t80 - t24 * t81 + t412 * t72 - t413 * t70 + t320, t1 * t81 + t2 * t80 + t32 * t201 - g(3) * (t333 + t427) + t357 * t68 + t413 * t11 + t412 * t10 + t343 * (t255 * t285 + t287 * t291 + t428); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t239 * qJD(2) + t339 (t269 - t236) * qJD(2) + t316, -t234 - t431, t184 * t239 + t185 * t236 + t228 + t447, 0, 0, 0, 0, 0, 0, t375 + t390, -t388 + t433, -t394 - t146 + (t387 + t389) * t236, -t165 * t239 + t236 * t337 - t338 + t447, 0, 0, 0, 0, 0, 0, t341 - t399, -t397 - t434, t344 + t437, -t124 * t239 - t251 * t9 + t253 * t8 - t376 * t40 - t39 * t448 + t447, 0, 0, 0, 0, 0, 0, t345 - t409, t408 - t435, t348 - t432, t1 * t190 - t10 * t404 - t11 * t405 - t189 * t2 - t239 * t68 + t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204 * t236 + t158, t205 * t236 + t159, -t204 ^ 2 - t205 ^ 2, t204 * t97 - t205 * t98 + t314, 0, 0, 0, 0, 0, 0, t57 + t451, -t56 - t452, -t453 - t454, t131 * t40 + t134 * t39 + t313, 0, 0, 0, 0, 0, 0, t24 - t455, -t23 - t456, -t457 - t458, -t10 * t72 + t11 * t70 + t313 + t430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398, t453 - t454, -t56 + t452, -t398, -t57 + t451, t180, -t124 * t134 + t231 * t40 + t439 + t9, g(1) * t214 - g(2) * t212 + t124 * t131 + t231 * t39 + t286 * t417 - t8, 0, 0, -t415, t446, t445, t415, t436, t176, -t12 * t223 + (-t134 * t70 + t176 * t429 - t223 * t368) * pkin(5) + t438, t13 * t223 + (t134 * t72 - t176 * t301 - t223 * t356) * pkin(5) + t444, -t10 * t70 - t11 * t72 - t12 * t72 + t13 * t70 + (t429 * t23 - t24 * t301 + (-t301 * t72 - t429 * t70) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t301 + t2 * t429 - t68 * t134 + (-t10 * t301 + t11 * t429) * qJD(6) + t439) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t415, t446, t445, t415, t436, t176, t11 * t223 + t438, t10 * t223 + t444, 0, 0;];
tau_reg  = t5;
