% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:47:42
% EndTime: 2019-05-06 09:48:24
% DurationCPUTime: 43.34s
% Computational Cost: add. (396286->946), mult. (945635->1465), div. (0->0), fcn. (700700->12), ass. (0->655)
t1075 = sin(pkin(11));
t1076 = sin(pkin(10));
t1078 = cos(pkin(10));
t1085 = cos(qJ(2));
t1141 = qJD(1) * t1085;
t1081 = sin(qJ(2));
t1142 = qJD(1) * t1081;
t1035 = t1076 * t1141 + t1078 * t1142;
t1077 = cos(pkin(11));
t1005 = -t1077 * qJD(2) + t1035 * t1075;
t1007 = qJD(2) * t1075 + t1035 * t1077;
t957 = t1007 * t1005;
t1137 = qJD(2) * t1085;
t1103 = qJD(1) * t1137;
t1117 = qJDD(1) * t1081;
t1043 = t1103 + t1117;
t1067 = t1085 * qJDD(1);
t1108 = qJD(2) * t1142;
t1044 = t1067 - t1108;
t994 = t1043 * t1076 - t1078 * t1044;
t1177 = -t957 + t994;
t1188 = t1075 * t1177;
t1033 = t1076 * t1142 - t1078 * t1141;
t993 = t1035 * t1033;
t1175 = -t993 + qJDD(2);
t1187 = t1076 * t1175;
t1186 = t1077 * t1177;
t1185 = t1078 * t1175;
t1079 = sin(qJ(6));
t991 = qJDD(5) + t994;
t1091 = qJDD(6) + t991;
t1083 = cos(qJ(6));
t1080 = sin(qJ(5));
t1084 = cos(qJ(5));
t944 = t1084 * t1005 + t1007 * t1080;
t946 = -t1005 * t1080 + t1007 * t1084;
t892 = t1079 * t946 + t1083 * t944;
t894 = -t1079 * t944 + t1083 * t946;
t808 = t894 * t892;
t1176 = t1091 - t808;
t1184 = t1079 * t1176;
t899 = t946 * t944;
t1179 = -t899 + t991;
t1183 = t1080 * t1179;
t1182 = t1083 * t1176;
t1181 = t1084 * t1179;
t995 = t1043 * t1078 + t1044 * t1076;
t1094 = qJDD(2) * t1077 - t1075 * t995;
t981 = t1075 * qJDD(2) + t1077 * t995;
t1099 = t1080 * t981 - t1084 * t1094;
t865 = -qJD(5) * t946 - t1099;
t866 = -t944 * qJD(5) + t1080 * t1094 + t1084 * t981;
t769 = -qJD(6) * t892 + t1079 * t865 + t1083 * t866;
t1028 = qJD(5) + t1033;
t1023 = qJD(6) + t1028;
t873 = t1023 * t892;
t1180 = t769 - t873;
t929 = t1028 * t944;
t826 = -t929 - t866;
t1178 = -t929 + t866;
t980 = t1033 * t1005;
t917 = t980 - t981;
t916 = -t981 - t980;
t822 = (qJD(5) - t1028) * t946 + t1099;
t1100 = t1079 * t866 - t1083 * t865;
t721 = (qJD(6) - t1023) * t894 + t1100;
t1073 = t1085 ^ 2;
t1092 = qJD(2) * pkin(2) - qJ(3) * t1142;
t1082 = sin(qJ(1));
t1086 = cos(qJ(1));
t1053 = g(1) * t1082 - t1086 * g(2);
t1093 = qJDD(1) * pkin(1) + t1053;
t1173 = qJD(1) ^ 2;
t958 = pkin(2) * t1044 - t1092 * t1142 + (qJ(3) * t1073 + pkin(7)) * t1173 - qJDD(3) + t1093;
t890 = t892 ^ 2;
t891 = t894 ^ 2;
t1174 = t944 ^ 2;
t943 = t946 ^ 2;
t1172 = qJD(2) ^ 2;
t1171 = t1005 ^ 2;
t1004 = t1007 ^ 2;
t1022 = t1023 ^ 2;
t1027 = t1028 ^ 2;
t1170 = t1033 ^ 2;
t1032 = t1035 ^ 2;
t1169 = 2 * qJD(3);
t1168 = pkin(3) * t1076;
t1167 = t1085 * g(3);
t1054 = g(1) * t1086 + t1082 * g(2);
t1090 = qJDD(1) * pkin(7) - t1054;
t1087 = -t1081 * t1090 - t1167 - t1043 * qJ(3) + qJDD(2) * pkin(2) + (qJ(3) * t1137 + (pkin(2) * t1085 + pkin(1)) * t1142) * qJD(1);
t1089 = -pkin(1) * t1173 + t1090;
t1016 = -t1081 * g(3) + t1085 * t1089;
t1069 = t1073 * t1173;
t952 = -pkin(2) * t1069 + t1044 * qJ(3) - qJD(2) * t1092 + t1016;
t877 = -0.2e1 * qJD(3) * t1033 + t1076 * t1087 + t1078 * t952;
t982 = pkin(3) * t1033 - qJ(4) * t1035;
t838 = -pkin(3) * t1172 + qJDD(2) * qJ(4) - t1033 * t982 + t877;
t1139 = qJD(2) * t1033;
t1098 = -t995 + t1139;
t1138 = qJD(2) * t1035;
t960 = t994 + t1138;
t857 = pkin(3) * t960 + qJ(4) * t1098 - t958;
t772 = 0.2e1 * qJD(4) * t1007 + t1075 * t838 - t1077 * t857;
t732 = pkin(4) * t1177 + pkin(8) * t916 - t772;
t773 = -0.2e1 * qJD(4) * t1005 + t1075 * t857 + t1077 * t838;
t967 = pkin(4) * t1033 - pkin(8) * t1007;
t738 = -pkin(4) * t1171 + pkin(8) * t1094 - t1033 * t967 + t773;
t665 = t1080 * t738 - t1084 * t732;
t630 = pkin(5) * t1179 + pkin(9) * t826 - t665;
t666 = t1080 * t732 + t1084 * t738;
t921 = pkin(5) * t1028 - pkin(9) * t946;
t635 = -pkin(5) * t1174 + pkin(9) * t865 - t1028 * t921 + t666;
t569 = t1079 * t630 + t1083 * t635;
t603 = t1080 * t666 - t1084 * t665;
t1166 = t1075 * t603;
t1101 = t1076 * t952 - t1078 * t1087;
t837 = qJDD(4) - t1172 * qJ(4) - qJDD(2) * pkin(3) + (t1169 + t982) * t1035 + t1101;
t1165 = t1075 * t837;
t919 = t957 + t994;
t1164 = t1075 * t919;
t1163 = t1076 * t958;
t984 = qJDD(2) + t993;
t1162 = t1076 * t984;
t1161 = t1076 * t994;
t1160 = t1077 * t603;
t1159 = t1077 * t837;
t1158 = t1077 * t919;
t1157 = t1078 * t958;
t1156 = t1078 * t984;
t780 = -t1094 * pkin(4) - t1171 * pkin(8) + t1007 * t967 + t837;
t699 = -t865 * pkin(5) - pkin(9) * t1174 + t921 * t946 + t780;
t1155 = t1079 * t699;
t793 = t1091 + t808;
t1154 = t1079 * t793;
t568 = t1079 * t635 - t1083 * t630;
t528 = t1079 * t569 - t1083 * t568;
t1153 = t1080 * t528;
t1152 = t1080 * t780;
t863 = t899 + t991;
t1151 = t1080 * t863;
t876 = t1035 * t1169 + t1101;
t795 = t1076 * t877 - t1078 * t876;
t1150 = t1081 * t795;
t1149 = t1083 * t699;
t1148 = t1083 * t793;
t1147 = t1084 * t528;
t1146 = t1084 * t780;
t1145 = t1084 * t863;
t1144 = t1085 * t795;
t1143 = qJD(1) * qJD(2);
t1072 = t1081 ^ 2;
t1140 = t1173 * t1072;
t1136 = t1007 * t1033;
t1135 = t1023 * t1079;
t1134 = t1023 * t1083;
t1133 = t1028 * t1080;
t1132 = t1028 * t1084;
t1131 = t1033 * t1075;
t1130 = t1033 * t1076;
t1129 = t1033 * t1077;
t1128 = t1033 * t1078;
t1127 = t1035 * t1076;
t1126 = t1035 * t1078;
t1037 = pkin(7) * t1173 + t1093;
t1125 = t1037 * t1081;
t1124 = t1037 * t1085;
t1062 = t1085 * t1173 * t1081;
t1051 = qJDD(2) + t1062;
t1123 = t1051 * t1081;
t1052 = qJDD(2) - t1062;
t1122 = t1052 * t1081;
t1121 = t1052 * t1085;
t1118 = t1072 + t1073;
t1116 = qJDD(1) * t1086;
t1115 = qJDD(2) * t1086;
t1114 = t1082 * qJDD(1);
t1113 = t1076 * t808;
t1112 = t1076 * t899;
t1111 = t1078 * t808;
t1110 = t1078 * t899;
t1109 = -pkin(3) * t1078 - pkin(2);
t1107 = t1076 * t957;
t1106 = t1078 * t957;
t1105 = t1086 * t993;
t1104 = t1082 * t993;
t796 = t1076 * t876 + t1078 * t877;
t529 = t1079 * t568 + t1083 * t569;
t604 = t1080 * t665 + t1084 * t666;
t1015 = t1081 * t1089 + t1167;
t955 = t1015 * t1081 + t1085 * t1016;
t1008 = -t1053 * t1082 - t1086 * t1054;
t1097 = t1086 * t1062;
t1096 = t1082 * t1062;
t1048 = -t1082 * t1173 + t1116;
t1095 = -pkin(6) * t1048 - g(3) * t1082;
t688 = t1075 * t773 - t1077 * t772;
t689 = t1075 * t772 + t1077 * t773;
t954 = t1015 * t1085 - t1016 * t1081;
t1006 = t1053 * t1086 - t1082 * t1054;
t961 = -t994 + t1138;
t914 = t1094 + t1136;
t1066 = t1082 * qJDD(2);
t1061 = -t1069 - t1172;
t1060 = t1069 - t1172;
t1059 = -t1140 - t1172;
t1058 = -t1140 + t1172;
t1050 = t1069 - t1140;
t1049 = t1069 + t1140;
t1047 = t1086 * t1173 + t1114;
t1046 = t1118 * qJDD(1);
t1045 = t1067 - 0.2e1 * t1108;
t1042 = 0.2e1 * t1103 + t1117;
t1040 = t1085 * t1051;
t1039 = t1118 * t1143;
t1029 = -pkin(6) * t1047 + g(3) * t1086;
t1021 = -t1032 - t1172;
t1020 = -t1032 + t1172;
t1019 = t1170 - t1172;
t1018 = t1043 * t1085 - t1072 * t1143;
t1017 = -t1044 * t1081 - t1073 * t1143;
t1014 = -t1059 * t1081 - t1121;
t1013 = -t1058 * t1081 + t1040;
t1012 = t1061 * t1085 - t1123;
t1011 = t1060 * t1085 - t1122;
t1010 = t1059 * t1085 - t1122;
t1009 = t1061 * t1081 + t1040;
t1001 = t1046 * t1086 - t1082 * t1049;
t1000 = t1082 * t1046 + t1049 * t1086;
t996 = -t1042 * t1081 + t1045 * t1085;
t990 = t1170 - t1032;
t988 = t1078 * t994;
t983 = -t1170 - t1172;
t978 = (t1127 - t1128) * qJD(2);
t977 = (-t1126 - t1130) * qJD(2);
t976 = t1014 * t1086 + t1082 * t1042;
t975 = t1012 * t1086 - t1082 * t1045;
t974 = t1082 * t1014 - t1042 * t1086;
t973 = t1082 * t1012 + t1045 * t1086;
t972 = -t1004 + t1170;
t971 = -t1170 + t1171;
t969 = -pkin(7) * t1010 - t1124;
t968 = -pkin(7) * t1009 - t1125;
t966 = -pkin(1) * t1010 + t1016;
t965 = -pkin(1) * t1009 + t1015;
t963 = -t995 - t1139;
t959 = -t1170 - t1032;
t956 = -t1004 + t1171;
t951 = -qJD(2) * t1127 + t1078 * t995;
t950 = qJD(2) * t1126 + t1076 * t995;
t949 = qJD(2) * t1128 + t1161;
t948 = qJD(2) * t1130 - t988;
t940 = -t1004 - t1170;
t937 = -t1021 * t1076 - t1156;
t936 = -t1020 * t1076 + t1185;
t935 = t1019 * t1078 - t1162;
t934 = t1021 * t1078 - t1162;
t933 = t1020 * t1078 + t1187;
t932 = t1019 * t1076 + t1156;
t931 = -t1170 - t1171;
t928 = -t1082 * t1037 + t1086 * t955;
t927 = t1037 * t1086 + t1082 * t955;
t926 = -t943 + t1027;
t925 = -t1027 + t1174;
t924 = t1004 + t1171;
t923 = t1078 * t983 - t1187;
t922 = t1076 * t983 + t1185;
t913 = t1094 - t1136;
t911 = -t1007 * t1131 + t1077 * t981;
t910 = -t1007 * t1129 - t1075 * t981;
t909 = t1005 * t1129 - t1075 * t1094;
t908 = -t1005 * t1131 - t1077 * t1094;
t907 = (-t1005 * t1077 + t1007 * t1075) * t1033;
t906 = (t1005 * t1075 + t1007 * t1077) * t1033;
t905 = -t1081 * t977 + t1085 * t978;
t904 = -t943 - t1027;
t903 = -t1076 * t963 + t1078 * t961;
t902 = t1076 * t1098 - t1078 * t960;
t901 = t1076 * t961 + t1078 * t963;
t900 = -t1076 * t960 - t1078 * t1098;
t898 = -t943 + t1174;
t897 = -qJ(3) * t934 - t1157;
t896 = -t1081 * t950 + t1085 * t951;
t895 = -t1081 * t948 + t1085 * t949;
t889 = t1078 * t907 + t1161;
t888 = t1076 * t907 - t988;
t887 = -t1081 * t934 + t1085 * t937;
t886 = -t1081 * t933 + t1085 * t936;
t885 = -t1081 * t932 + t1085 * t935;
t884 = t1081 * t937 + t1085 * t934;
t883 = t1077 * t971 - t1164;
t882 = -t1075 * t972 + t1186;
t881 = -t1075 * t971 - t1158;
t880 = -t1077 * t972 - t1188;
t879 = -qJ(3) * t922 - t1163;
t878 = -t1027 - t1174;
t872 = -t891 + t1022;
t871 = t890 - t1022;
t870 = t1078 * t911 + t1107;
t869 = t1078 * t909 - t1107;
t868 = t1076 * t911 - t1106;
t867 = t1076 * t909 + t1106;
t861 = -t1075 * t940 - t1158;
t860 = t1077 * t940 - t1164;
t854 = (t1080 * t946 - t1084 * t944) * t1028;
t853 = (-t1080 * t944 - t1084 * t946) * t1028;
t852 = t1077 * t931 - t1188;
t851 = t1075 * t931 + t1186;
t850 = -t891 - t1022;
t849 = -t1081 * t922 + t1085 * t923;
t848 = t1081 * t923 + t1085 * t922;
t847 = pkin(2) * t1098 + qJ(3) * t937 - t1163;
t846 = -t1075 * t916 + t1077 * t914;
t845 = t1075 * t917 + t1077 * t913;
t844 = t1075 * t914 + t1077 * t916;
t843 = -t1075 * t913 + t1077 * t917;
t842 = -t943 - t1174;
t841 = -pkin(2) * t960 + qJ(3) * t923 + t1157;
t840 = -t1082 * t1098 + t1086 * t887;
t839 = t1082 * t887 + t1086 * t1098;
t835 = t1082 * t960 + t1086 * t849;
t834 = -t1081 * t901 + t1085 * t903;
t833 = -t1081 * t900 + t1085 * t902;
t832 = t1082 * t849 - t1086 * t960;
t831 = t1081 * t903 + t1085 * t901;
t830 = t1076 * t914 + t1078 * t883;
t829 = -t1076 * t916 + t1078 * t882;
t828 = t1076 * t883 - t1078 * t914;
t827 = t1076 * t882 + t1078 * t916;
t821 = (qJD(5) + t1028) * t946 + t1099;
t820 = t1084 * t866 - t1133 * t946;
t819 = t1080 * t866 + t1132 * t946;
t818 = -t1080 * t865 + t1132 * t944;
t817 = t1084 * t865 + t1133 * t944;
t816 = t1084 * t925 - t1151;
t815 = -t1080 * t926 + t1181;
t814 = t1080 * t925 + t1145;
t813 = t1084 * t926 + t1183;
t812 = -t1076 * t956 + t1078 * t845;
t811 = t1076 * t845 + t1078 * t956;
t810 = -t1076 * t917 + t1078 * t861;
t809 = t1076 * t861 + t1078 * t917;
t807 = -t891 + t890;
t806 = -t1076 * t913 + t1078 * t852;
t805 = t1076 * t852 + t1078 * t913;
t804 = -t1080 * t904 - t1145;
t803 = t1084 * t904 - t1151;
t802 = -t1076 * t924 + t1078 * t846;
t801 = t1076 * t846 + t1078 * t924;
t800 = -t1081 * t888 + t1085 * t889;
t799 = -t1022 - t890;
t798 = t1082 * t959 + t1086 * t834;
t797 = t1082 * t834 - t1086 * t959;
t791 = (t1079 * t894 - t1083 * t892) * t1023;
t790 = (-t1079 * t892 - t1083 * t894) * t1023;
t789 = t1084 * t878 - t1183;
t788 = t1080 * t878 + t1181;
t787 = -t1081 * t868 + t1085 * t870;
t786 = -t1081 * t867 + t1085 * t869;
t785 = -t1075 * t853 + t1077 * t854;
t784 = -t1075 * t854 - t1077 * t853;
t783 = -pkin(1) * t831 - pkin(2) * t901;
t782 = -pkin(1) * t884 - pkin(2) * t934 + t877;
t781 = pkin(2) * t958 + qJ(3) * t796;
t779 = -qJ(4) * t860 + t1159;
t778 = -qJ(4) * t851 + t1165;
t777 = t1076 * t991 + t1078 * t785;
t776 = t1076 * t785 - t1078 * t991;
t775 = -t890 - t891;
t774 = -pkin(1) * t848 - pkin(2) * t922 + t876;
t771 = -qJ(3) * t901 - t795;
t770 = -pkin(7) * t884 - t1081 * t847 + t1085 * t897;
t768 = -qJD(6) * t894 - t1100;
t767 = t1083 * t871 - t1154;
t766 = -t1079 * t872 + t1182;
t765 = t1079 * t871 + t1148;
t764 = t1083 * t872 + t1184;
t763 = -pkin(2) * t959 + qJ(3) * t903 + t796;
t762 = -t1079 * t850 - t1148;
t761 = t1083 * t850 - t1154;
t760 = -t1081 * t828 + t1085 * t830;
t759 = -t1081 * t827 + t1085 * t829;
t758 = -t1080 * t826 - t1084 * t822;
t757 = -t1080 * t1178 - t1084 * t821;
t756 = -t1080 * t822 + t1084 * t826;
t755 = -t1080 * t821 + t1084 * t1178;
t754 = -t1075 * t819 + t1077 * t820;
t753 = -t1075 * t817 + t1077 * t818;
t752 = -t1075 * t820 - t1077 * t819;
t751 = -t1075 * t818 - t1077 * t817;
t750 = -t1081 * t811 + t1085 * t812;
t749 = -t1075 * t814 + t1077 * t816;
t748 = -t1075 * t813 + t1077 * t815;
t747 = -t1075 * t816 - t1077 * t814;
t746 = -t1075 * t815 - t1077 * t813;
t745 = -t1081 * t809 + t1085 * t810;
t744 = t1081 * t810 + t1085 * t809;
t743 = -pkin(7) * t848 - t1081 * t841 + t1085 * t879;
t742 = -t1081 * t805 + t1085 * t806;
t741 = t1081 * t806 + t1085 * t805;
t740 = -t1075 * t803 + t1077 * t804;
t739 = t1075 * t804 + t1077 * t803;
t736 = -t1081 * t801 + t1085 * t802;
t735 = t1081 * t802 + t1085 * t801;
t734 = -pkin(3) * t860 + t773;
t733 = -pkin(3) * t851 + t772;
t731 = t1083 * t799 - t1184;
t730 = t1079 * t799 + t1182;
t727 = t1085 * t796 - t1150;
t726 = t1081 * t796 + t1144;
t725 = -t769 - t873;
t720 = (qJD(6) + t1023) * t894 + t1100;
t719 = t1083 * t769 - t1135 * t894;
t718 = t1079 * t769 + t1134 * t894;
t717 = -t1079 * t768 + t1134 * t892;
t716 = t1083 * t768 + t1135 * t892;
t715 = -t1080 * t790 + t1084 * t791;
t714 = t1080 * t791 + t1084 * t790;
t713 = -t1075 * t788 + t1077 * t789;
t712 = t1075 * t789 + t1077 * t788;
t711 = -pkin(8) * t803 + t1146;
t710 = t1078 * t754 + t1112;
t709 = t1078 * t753 - t1112;
t708 = t1076 * t754 - t1110;
t707 = t1076 * t753 + t1110;
t706 = -t1082 * t958 + t1086 * t727;
t705 = t1082 * t727 + t1086 * t958;
t704 = -pkin(8) * t788 + t1152;
t703 = t1082 * t860 + t1086 * t745;
t702 = t1082 * t745 - t1086 * t860;
t701 = t1082 * t851 + t1086 * t742;
t700 = t1082 * t742 - t1086 * t851;
t698 = t1082 * t844 + t1086 * t736;
t697 = t1082 * t736 - t1086 * t844;
t696 = -t1076 * t822 + t1078 * t749;
t695 = -t1076 * t826 + t1078 * t748;
t694 = t1076 * t749 + t1078 * t822;
t693 = t1076 * t748 + t1078 * t826;
t692 = -t1081 * t776 + t1085 * t777;
t691 = t1076 * t1178 + t1078 * t740;
t690 = t1076 * t740 - t1078 * t1178;
t687 = -pkin(4) * t1178 + pkin(8) * t804 + t1152;
t686 = t1076 * t821 + t1078 * t713;
t685 = t1076 * t713 - t1078 * t821;
t684 = -pkin(1) * t726 - pkin(2) * t795;
t683 = -pkin(4) * t821 + pkin(8) * t789 - t1146;
t682 = -t1080 * t765 + t1084 * t767;
t681 = -t1080 * t764 + t1084 * t766;
t680 = t1080 * t767 + t1084 * t765;
t679 = t1080 * t766 + t1084 * t764;
t678 = -t1080 * t761 + t1084 * t762;
t677 = t1080 * t762 + t1084 * t761;
t676 = -t1075 * t756 + t1077 * t758;
t675 = -t1075 * t755 + t1077 * t757;
t674 = t1075 * t758 + t1077 * t756;
t673 = -t1075 * t757 - t1077 * t755;
t672 = -qJ(4) * t844 - t688;
t671 = t1076 * t837 + t1078 * t689;
t670 = t1076 * t689 - t1078 * t837;
t669 = -t1076 * t898 + t1078 * t675;
t668 = t1076 * t675 + t1078 * t898;
t667 = -pkin(7) * t831 - t1081 * t763 + t1085 * t771;
t663 = t1076 * t842 + t1078 * t676;
t662 = t1076 * t676 - t1078 * t842;
t661 = -t1080 * t730 + t1084 * t731;
t660 = t1080 * t731 + t1084 * t730;
t659 = -qJ(3) * t809 - t1076 * t734 + t1078 * t779;
t658 = -pkin(9) * t761 + t1149;
t657 = -t1079 * t725 - t1083 * t721;
t656 = -t1079 * t1180 - t1083 * t720;
t655 = -t1079 * t721 + t1083 * t725;
t654 = -t1079 * t720 + t1083 * t1180;
t653 = -t1080 * t718 + t1084 * t719;
t652 = -t1080 * t716 + t1084 * t717;
t651 = t1080 * t719 + t1084 * t718;
t650 = t1080 * t717 + t1084 * t716;
t649 = -qJ(3) * t805 - t1076 * t733 + t1078 * t778;
t648 = -pkin(1) * t744 - pkin(2) * t809 - pkin(3) * t917 - qJ(4) * t861 - t1165;
t647 = -pkin(7) * t726 - qJ(3) * t1144 - t1081 * t781;
t646 = -t1075 * t714 + t1077 * t715;
t645 = -t1075 * t715 - t1077 * t714;
t644 = -t1081 * t708 + t1085 * t710;
t643 = -t1081 * t707 + t1085 * t709;
t642 = -pkin(1) * t741 - pkin(2) * t805 - pkin(3) * t913 - qJ(4) * t852 + t1159;
t641 = t1076 * t1091 + t1078 * t646;
t640 = t1076 * t646 - t1078 * t1091;
t639 = -pkin(9) * t730 + t1155;
t638 = -pkin(2) * t860 + qJ(3) * t810 + t1076 * t779 + t1078 * t734;
t637 = -pkin(2) * t851 + qJ(3) * t806 + t1076 * t778 + t1078 * t733;
t636 = -pkin(3) * t674 - pkin(4) * t756;
t633 = -qJ(3) * t801 + t1078 * t672 + t1168 * t844;
t632 = -t1081 * t694 + t1085 * t696;
t631 = -t1081 * t693 + t1085 * t695;
t627 = -t1081 * t690 + t1085 * t691;
t626 = t1081 * t691 + t1085 * t690;
t625 = qJ(3) * t802 + t1076 * t672 + t1109 * t844;
t624 = -t1081 * t685 + t1085 * t686;
t623 = t1081 * t686 + t1085 * t685;
t622 = -pkin(5) * t1180 + pkin(9) * t762 + t1155;
t621 = -t1075 * t680 + t1077 * t682;
t620 = -t1075 * t679 + t1077 * t681;
t619 = -t1075 * t682 - t1077 * t680;
t618 = -t1075 * t681 - t1077 * t679;
t617 = -pkin(5) * t720 + pkin(9) * t731 - t1149;
t616 = -pkin(1) * t735 - pkin(2) * t801 - pkin(3) * t924 - qJ(4) * t846 - t689;
t615 = -t1075 * t677 + t1077 * t678;
t614 = t1075 * t678 + t1077 * t677;
t613 = -pkin(3) * t739 - pkin(4) * t803 + t666;
t612 = -qJ(4) * t739 - t1075 * t687 + t1077 * t711;
t611 = -pkin(3) * t712 - pkin(4) * t788 + t665;
t610 = -t1081 * t670 + t1085 * t671;
t609 = t1081 * t671 + t1085 * t670;
t608 = t1082 * t739 + t1086 * t627;
t607 = t1082 * t627 - t1086 * t739;
t606 = -qJ(4) * t712 - t1075 * t683 + t1077 * t704;
t605 = -t1081 * t668 + t1085 * t669;
t602 = -t1081 * t662 + t1085 * t663;
t601 = t1081 * t663 + t1085 * t662;
t600 = -t1075 * t660 + t1077 * t661;
t599 = t1075 * t661 + t1077 * t660;
t598 = t1082 * t712 + t1086 * t624;
t597 = t1082 * t624 - t1086 * t712;
t596 = -t1080 * t655 + t1084 * t657;
t595 = -t1080 * t654 + t1084 * t656;
t594 = t1080 * t657 + t1084 * t655;
t593 = t1080 * t656 + t1084 * t654;
t592 = -t1076 * t721 + t1078 * t621;
t591 = -t1076 * t725 + t1078 * t620;
t590 = t1076 * t621 + t1078 * t721;
t589 = t1076 * t620 + t1078 * t725;
t588 = -t1075 * t651 + t1077 * t653;
t587 = -t1075 * t650 + t1077 * t652;
t586 = -t1075 * t653 - t1077 * t651;
t585 = -t1075 * t652 - t1077 * t650;
t584 = t1076 * t1180 + t1078 * t615;
t583 = t1076 * t615 - t1078 * t1180;
t582 = -t1081 * t640 + t1085 * t641;
t581 = -pkin(4) * t780 + pkin(8) * t604;
t580 = -qJ(3) * t670 + (-qJ(4) * t1078 + t1168) * t688;
t579 = t1078 * t588 + t1113;
t578 = t1078 * t587 - t1113;
t577 = t1076 * t588 - t1111;
t576 = t1076 * t587 + t1111;
t575 = -pkin(8) * t756 - t603;
t574 = t1082 * t688 + t1086 * t610;
t573 = t1082 * t610 - t1086 * t688;
t572 = -pkin(4) * t842 + pkin(8) * t758 + t604;
t571 = t1076 * t720 + t1078 * t600;
t570 = t1076 * t600 - t1078 * t720;
t566 = -pkin(7) * t744 - t1081 * t638 + t1085 * t659;
t565 = -pkin(7) * t741 - t1081 * t637 + t1085 * t649;
t564 = t1082 * t674 + t1086 * t602;
t563 = t1082 * t602 - t1086 * t674;
t562 = qJ(3) * t671 + (-qJ(4) * t1076 + t1109) * t688;
t561 = -pkin(7) * t735 - t1081 * t625 + t1085 * t633;
t560 = -pkin(8) * t677 - t1080 * t622 + t1084 * t658;
t559 = -pkin(1) * t609 - pkin(2) * t670 + pkin(3) * t837 - qJ(4) * t689;
t558 = -pkin(8) * t660 - t1080 * t617 + t1084 * t639;
t557 = t1077 * t604 - t1166;
t556 = t1075 * t604 + t1160;
t555 = -pkin(4) * t1180 + pkin(8) * t678 + t1080 * t658 + t1084 * t622;
t554 = -pkin(1) * t626 - pkin(2) * t690 + pkin(3) * t1178 - qJ(4) * t740 - t1075 * t711 - t1077 * t687;
t553 = -qJ(3) * t690 - t1076 * t613 + t1078 * t612;
t552 = -t1075 * t594 + t1077 * t596;
t551 = -t1075 * t593 + t1077 * t595;
t550 = t1075 * t596 + t1077 * t594;
t549 = -t1075 * t595 - t1077 * t593;
t548 = t1076 * t780 + t1078 * t557;
t547 = t1076 * t557 - t1078 * t780;
t546 = -t1081 * t590 + t1085 * t592;
t545 = -t1081 * t589 + t1085 * t591;
t544 = -pkin(4) * t720 + pkin(8) * t661 + t1080 * t639 + t1084 * t617;
t543 = -pkin(1) * t623 - pkin(2) * t685 + pkin(3) * t821 - qJ(4) * t713 - t1075 * t704 - t1077 * t683;
t542 = -t1081 * t583 + t1085 * t584;
t541 = t1081 * t584 + t1085 * t583;
t540 = -t1076 * t807 + t1078 * t551;
t539 = t1076 * t551 + t1078 * t807;
t538 = -qJ(3) * t685 - t1076 * t611 + t1078 * t606;
t537 = t1076 * t775 + t1078 * t552;
t536 = t1076 * t552 - t1078 * t775;
t535 = -pkin(2) * t739 + qJ(3) * t691 + t1076 * t612 + t1078 * t613;
t534 = -t1081 * t577 + t1085 * t579;
t533 = -t1081 * t576 + t1085 * t578;
t532 = -pkin(2) * t712 + qJ(3) * t686 + t1076 * t606 + t1078 * t611;
t531 = -t1081 * t570 + t1085 * t571;
t530 = t1081 * t571 + t1085 * t570;
t527 = -pkin(3) * t614 - pkin(4) * t677 - pkin(5) * t761 + t569;
t526 = -qJ(4) * t674 - t1075 * t572 + t1077 * t575;
t525 = -pkin(5) * t699 + pkin(9) * t529;
t524 = -pkin(3) * t556 - pkin(4) * t603;
t523 = t1082 * t614 + t1086 * t542;
t522 = t1082 * t542 - t1086 * t614;
t521 = -pkin(3) * t599 - pkin(4) * t660 - pkin(5) * t730 + t568;
t520 = -pkin(9) * t655 - t528;
t519 = -pkin(5) * t775 + pkin(9) * t657 + t529;
t518 = -pkin(7) * t609 - t1081 * t562 + t1085 * t580;
t517 = t1082 * t599 + t1086 * t531;
t516 = t1082 * t531 - t1086 * t599;
t515 = -pkin(3) * t550 - pkin(4) * t594 - pkin(5) * t655;
t514 = -qJ(3) * t662 - t1076 * t636 + t1078 * t526;
t513 = -pkin(8) * t1160 - qJ(4) * t556 - t1075 * t581;
t512 = -t1081 * t547 + t1085 * t548;
t511 = t1081 * t548 + t1085 * t547;
t510 = -pkin(2) * t674 + qJ(3) * t663 + t1076 * t526 + t1078 * t636;
t509 = -t1081 * t539 + t1085 * t540;
t508 = -pkin(1) * t601 - pkin(2) * t662 + pkin(3) * t842 - qJ(4) * t676 - t1075 * t575 - t1077 * t572;
t507 = -qJ(4) * t614 - t1075 * t555 + t1077 * t560;
t506 = -t1081 * t536 + t1085 * t537;
t505 = t1081 * t537 + t1085 * t536;
t504 = -pkin(7) * t626 - t1081 * t535 + t1085 * t553;
t503 = -qJ(4) * t599 - t1075 * t544 + t1077 * t558;
t502 = t1084 * t529 - t1153;
t501 = t1080 * t529 + t1147;
t500 = -pkin(7) * t623 - t1081 * t532 + t1085 * t538;
t499 = t1082 * t556 + t1086 * t512;
t498 = t1082 * t512 - t1086 * t556;
t497 = t1082 * t550 + t1086 * t506;
t496 = t1082 * t506 - t1086 * t550;
t495 = -pkin(8) * t594 - t1080 * t519 + t1084 * t520;
t494 = -pkin(4) * t775 + pkin(8) * t596 + t1080 * t520 + t1084 * t519;
t493 = -pkin(1) * t541 - pkin(2) * t583 + pkin(3) * t1180 - qJ(4) * t615 - t1075 * t560 - t1077 * t555;
t492 = -qJ(3) * t583 - t1076 * t527 + t1078 * t507;
t491 = -qJ(3) * t547 - t1076 * t524 + t1078 * t513;
t490 = -pkin(2) * t614 + qJ(3) * t584 + t1076 * t507 + t1078 * t527;
t489 = -pkin(1) * t530 - pkin(2) * t570 + pkin(3) * t720 - qJ(4) * t600 - t1075 * t558 - t1077 * t544;
t488 = -qJ(3) * t570 - t1076 * t521 + t1078 * t503;
t487 = -pkin(7) * t601 - t1081 * t510 + t1085 * t514;
t486 = -t1075 * t501 + t1077 * t502;
t485 = t1075 * t502 + t1077 * t501;
t484 = -pkin(2) * t599 + qJ(3) * t571 + t1076 * t503 + t1078 * t521;
t483 = -pkin(1) * t511 - pkin(2) * t547 + pkin(3) * t780 + pkin(8) * t1166 - qJ(4) * t557 - t1077 * t581;
t482 = -pkin(8) * t501 - pkin(9) * t1147 - t1080 * t525;
t481 = t1076 * t699 + t1078 * t486;
t480 = t1076 * t486 - t1078 * t699;
t479 = -pkin(4) * t699 + pkin(8) * t502 - pkin(9) * t1153 + t1084 * t525;
t478 = -pkin(2) * t556 + qJ(3) * t548 + t1076 * t513 + t1078 * t524;
t477 = -qJ(4) * t550 - t1075 * t494 + t1077 * t495;
t476 = -pkin(3) * t485 - pkin(4) * t501 - pkin(5) * t528;
t475 = -pkin(7) * t541 - t1081 * t490 + t1085 * t492;
t474 = -t1081 * t480 + t1085 * t481;
t473 = t1081 * t481 + t1085 * t480;
t472 = -pkin(7) * t530 - t1081 * t484 + t1085 * t488;
t471 = -qJ(3) * t536 - t1076 * t515 + t1078 * t477;
t470 = -pkin(1) * t505 - pkin(2) * t536 + pkin(3) * t775 - qJ(4) * t552 - t1075 * t495 - t1077 * t494;
t469 = -pkin(7) * t511 - t1081 * t478 + t1085 * t491;
t468 = -pkin(2) * t550 + qJ(3) * t537 + t1076 * t477 + t1078 * t515;
t467 = t1082 * t485 + t1086 * t474;
t466 = t1082 * t474 - t1086 * t485;
t465 = -qJ(4) * t485 - t1075 * t479 + t1077 * t482;
t464 = -pkin(7) * t505 - t1081 * t468 + t1085 * t471;
t463 = -qJ(3) * t480 - t1076 * t476 + t1078 * t465;
t462 = -pkin(1) * t473 - pkin(2) * t480 + pkin(3) * t699 - qJ(4) * t486 - t1075 * t482 - t1077 * t479;
t461 = -pkin(2) * t485 + qJ(3) * t481 + t1076 * t465 + t1078 * t476;
t460 = -pkin(7) * t473 - t1081 * t461 + t1085 * t463;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1047, -t1048, 0, t1008, 0, 0, 0, 0, 0, 0, t975, t976, t1001, t928, 0, 0, 0, 0, 0, 0, t835, t840, t798, t706, 0, 0, 0, 0, 0, 0, t701, t703, t698, t574, 0, 0, 0, 0, 0, 0, t598, t608, t564, t499, 0, 0, 0, 0, 0, 0, t517, t523, t497, t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1048, -t1047, 0, t1006, 0, 0, 0, 0, 0, 0, t973, t974, t1000, t927, 0, 0, 0, 0, 0, 0, t832, t839, t797, t705, 0, 0, 0, 0, 0, 0, t700, t702, t697, t573, 0, 0, 0, 0, 0, 0, t597, t607, t563, t498, 0, 0, 0, 0, 0, 0, t516, t522, t496, t466; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1009, t1010, 0, -t954, 0, 0, 0, 0, 0, 0, t848, t884, t831, t726, 0, 0, 0, 0, 0, 0, t741, t744, t735, t609, 0, 0, 0, 0, 0, 0, t623, t626, t601, t511, 0, 0, 0, 0, 0, 0, t530, t541, t505, t473; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1048, 0, -t1047, 0, t1095, -t1029, -t1006, -pkin(6) * t1006, t1018 * t1086 - t1096, -t1082 * t1050 + t1086 * t996, t1013 * t1086 + t1081 * t1114, t1017 * t1086 + t1096, t1011 * t1086 + t1067 * t1082, t1039 * t1086 + t1066, -pkin(6) * t973 - t1082 * t965 + t1086 * t968, -pkin(6) * t974 - t1082 * t966 + t1086 * t969, -pkin(6) * t1000 + t1086 * t954, -pkin(6) * t927 - (pkin(1) * t1082 - pkin(7) * t1086) * t954, t1086 * t896 + t1104, -t1082 * t990 + t1086 * t833, -t1082 * t963 + t1086 * t886, t1086 * t895 - t1104, t1082 * t961 + t1086 * t885, t1086 * t905 + t1066, -pkin(6) * t832 - t1082 * t774 + t1086 * t743, -pkin(6) * t839 - t1082 * t782 + t1086 * t770, -pkin(6) * t797 - t1082 * t783 + t1086 * t667, -pkin(6) * t705 - t1082 * t684 + t1086 * t647, -t1082 * t910 + t1086 * t787, -t1082 * t843 + t1086 * t750, -t1082 * t880 + t1086 * t759, -t1082 * t908 + t1086 * t786, -t1082 * t881 + t1086 * t760, -t1082 * t906 + t1086 * t800, -pkin(6) * t700 - t1082 * t642 + t1086 * t565, -pkin(6) * t702 - t1082 * t648 + t1086 * t566, -pkin(6) * t697 - t1082 * t616 + t1086 * t561, -pkin(6) * t573 - t1082 * t559 + t1086 * t518, -t1082 * t752 + t1086 * t644, -t1082 * t673 + t1086 * t605, -t1082 * t746 + t1086 * t631, -t1082 * t751 + t1086 * t643, -t1082 * t747 + t1086 * t632, -t1082 * t784 + t1086 * t692, -pkin(6) * t597 - t1082 * t543 + t1086 * t500, -pkin(6) * t607 - t1082 * t554 + t1086 * t504, -pkin(6) * t563 - t1082 * t508 + t1086 * t487, -pkin(6) * t498 - t1082 * t483 + t1086 * t469, -t1082 * t586 + t1086 * t534, -t1082 * t549 + t1086 * t509, -t1082 * t618 + t1086 * t545, -t1082 * t585 + t1086 * t533, -t1082 * t619 + t1086 * t546, -t1082 * t645 + t1086 * t582, -pkin(6) * t516 - t1082 * t489 + t1086 * t472, -pkin(6) * t522 - t1082 * t493 + t1086 * t475, -pkin(6) * t496 - t1082 * t470 + t1086 * t464, -pkin(6) * t466 - t1082 * t462 + t1086 * t460; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1047, 0, t1048, 0, t1029, t1095, t1008, pkin(6) * t1008, t1082 * t1018 + t1097, t1050 * t1086 + t1082 * t996, t1082 * t1013 - t1081 * t1116, t1082 * t1017 - t1097, t1082 * t1011 - t1067 * t1086, t1082 * t1039 - t1115, pkin(6) * t975 + t1082 * t968 + t1086 * t965, pkin(6) * t976 + t1082 * t969 + t1086 * t966, pkin(6) * t1001 + t1082 * t954, pkin(6) * t928 - (-pkin(1) * t1086 - pkin(7) * t1082) * t954, t1082 * t896 - t1105, t1082 * t833 + t1086 * t990, t1082 * t886 + t1086 * t963, t1082 * t895 + t1105, t1082 * t885 - t1086 * t961, t1082 * t905 - t1115, pkin(6) * t835 + t1082 * t743 + t1086 * t774, pkin(6) * t840 + t1082 * t770 + t1086 * t782, pkin(6) * t798 + t1082 * t667 + t1086 * t783, pkin(6) * t706 + t1082 * t647 + t1086 * t684, t1082 * t787 + t1086 * t910, t1082 * t750 + t1086 * t843, t1082 * t759 + t1086 * t880, t1082 * t786 + t1086 * t908, t1082 * t760 + t1086 * t881, t1082 * t800 + t1086 * t906, pkin(6) * t701 + t1082 * t565 + t1086 * t642, pkin(6) * t703 + t1082 * t566 + t1086 * t648, pkin(6) * t698 + t1082 * t561 + t1086 * t616, pkin(6) * t574 + t1082 * t518 + t1086 * t559, t1082 * t644 + t1086 * t752, t1082 * t605 + t1086 * t673, t1082 * t631 + t1086 * t746, t1082 * t643 + t1086 * t751, t1082 * t632 + t1086 * t747, t1082 * t692 + t1086 * t784, pkin(6) * t598 + t1082 * t500 + t1086 * t543, pkin(6) * t608 + t1082 * t504 + t1086 * t554, pkin(6) * t564 + t1082 * t487 + t1086 * t508, pkin(6) * t499 + t1082 * t469 + t1086 * t483, t1082 * t534 + t1086 * t586, t1082 * t509 + t1086 * t549, t1082 * t545 + t1086 * t618, t1082 * t533 + t1086 * t585, t1082 * t546 + t1086 * t619, t1082 * t582 + t1086 * t645, pkin(6) * t517 + t1082 * t472 + t1086 * t489, pkin(6) * t523 + t1082 * t475 + t1086 * t493, pkin(6) * t497 + t1082 * t464 + t1086 * t470, pkin(6) * t467 + t1082 * t460 + t1086 * t462; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1053, t1054, 0, 0, (t1043 + t1103) * t1081, t1042 * t1085 + t1045 * t1081, t1058 * t1085 + t1123, (t1044 - t1108) * t1085, t1060 * t1081 + t1121, 0, pkin(1) * t1045 + pkin(7) * t1012 + t1124, -pkin(1) * t1042 + pkin(7) * t1014 - t1125, pkin(1) * t1049 + pkin(7) * t1046 + t955, pkin(1) * t1037 + pkin(7) * t955, t1081 * t951 + t1085 * t950, t1081 * t902 + t1085 * t900, t1081 * t936 + t1085 * t933, t1081 * t949 + t1085 * t948, t1081 * t935 + t1085 * t932, t1081 * t978 + t1085 * t977, -pkin(1) * t960 + pkin(7) * t849 + t1081 * t879 + t1085 * t841, pkin(1) * t1098 + pkin(7) * t887 + t1081 * t897 + t1085 * t847, -pkin(1) * t959 + pkin(7) * t834 + t1081 * t771 + t1085 * t763, pkin(1) * t958 + pkin(7) * t727 - qJ(3) * t1150 + t1085 * t781, t1081 * t870 + t1085 * t868, t1081 * t812 + t1085 * t811, t1081 * t829 + t1085 * t827, t1081 * t869 + t1085 * t867, t1081 * t830 + t1085 * t828, t1081 * t889 + t1085 * t888, -pkin(1) * t851 + pkin(7) * t742 + t1081 * t649 + t1085 * t637, -pkin(1) * t860 + pkin(7) * t745 + t1081 * t659 + t1085 * t638, -pkin(1) * t844 + pkin(7) * t736 + t1081 * t633 + t1085 * t625, -pkin(1) * t688 + pkin(7) * t610 + t1081 * t580 + t1085 * t562, t1081 * t710 + t1085 * t708, t1081 * t669 + t1085 * t668, t1081 * t695 + t1085 * t693, t1081 * t709 + t1085 * t707, t1081 * t696 + t1085 * t694, t1081 * t777 + t1085 * t776, -pkin(1) * t712 + pkin(7) * t624 + t1081 * t538 + t1085 * t532, -pkin(1) * t739 + pkin(7) * t627 + t1081 * t553 + t1085 * t535, -pkin(1) * t674 + pkin(7) * t602 + t1081 * t514 + t1085 * t510, -pkin(1) * t556 + pkin(7) * t512 + t1081 * t491 + t1085 * t478, t1081 * t579 + t1085 * t577, t1081 * t540 + t1085 * t539, t1081 * t591 + t1085 * t589, t1081 * t578 + t1085 * t576, t1081 * t592 + t1085 * t590, t1081 * t641 + t1085 * t640, -pkin(1) * t599 + pkin(7) * t531 + t1081 * t488 + t1085 * t484, -pkin(1) * t614 + pkin(7) * t542 + t1081 * t492 + t1085 * t490, -pkin(1) * t550 + pkin(7) * t506 + t1081 * t471 + t1085 * t468, -pkin(1) * t485 + pkin(7) * t474 + t1081 * t463 + t1085 * t461;];
tauB_reg  = t1;
