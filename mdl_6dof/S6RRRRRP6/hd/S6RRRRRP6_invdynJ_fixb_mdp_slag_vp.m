% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP6_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:31:58
% EndTime: 2019-03-10 01:32:25
% DurationCPUTime: 20.57s
% Computational Cost: add. (16860->797), mult. (36982->985), div. (0->0), fcn. (26657->14), ass. (0->328)
t789 = cos(qJ(3));
t786 = sin(qJ(2));
t790 = cos(qJ(2));
t935 = t789 * t790;
t845 = pkin(3) * t786 - pkin(9) * t935;
t964 = pkin(8) + pkin(9);
t879 = qJD(3) * t964;
t856 = pkin(2) * t786 - pkin(8) * t790;
t723 = t856 * qJD(1);
t785 = sin(qJ(3));
t907 = qJD(1) * t786;
t876 = t785 * t907;
t914 = pkin(7) * t876 + t789 * t723;
t1010 = qJD(1) * t845 + t789 * t879 + t914;
t698 = t785 * t723;
t938 = t786 * t789;
t939 = t785 * t790;
t1009 = -t698 - (-pkin(7) * t938 - pkin(9) * t939) * qJD(1) - t785 * t879;
t784 = sin(qJ(4));
t788 = cos(qJ(4));
t715 = t784 * t785 - t788 * t789;
t829 = t715 * t790;
t975 = qJD(3) + qJD(4);
t1004 = -qJD(1) * t829 + t975 * t715;
t783 = sin(qJ(5));
t892 = t789 * qJD(2);
t712 = t876 - t892;
t904 = qJD(2) * t785;
t714 = t789 * t907 + t904;
t847 = -t712 * t784 + t788 * t714;
t848 = -t712 * t788 - t784 * t714;
t963 = cos(qJ(5));
t582 = t783 * t847 - t848 * t963;
t968 = t783 * t848 + t847 * t963;
t1006 = t582 * t968;
t906 = qJD(1) * t790;
t861 = qJD(3) + t906;
t888 = qJDD(1) * t786;
t813 = qJD(2) * t861 + t888;
t807 = t813 * t785;
t889 = qJD(1) * qJD(3);
t849 = t786 * t889 - qJDD(2);
t624 = t789 * t849 + t807;
t830 = t849 * t785;
t796 = t789 * t813 - t830;
t896 = qJD(4) * t788;
t881 = -t784 * t624 - t712 * t896 + t788 * t796;
t898 = qJD(4) * t784;
t826 = t714 * t898 - t881;
t882 = -t712 * t898 + t714 * t896 + t784 * t796;
t844 = t788 * t624 + t882;
t870 = qJD(5) * t963;
t895 = qJD(5) * t783;
t514 = t783 * t844 + t963 * t826 + t847 * t895 - t848 * t870;
t756 = -qJD(3) + t906;
t747 = -qJD(4) + t756;
t736 = -qJD(5) + t747;
t513 = -t582 * t736 - t514;
t515 = qJD(5) * t968 - t783 * t826 + t963 * t844;
t772 = t790 * qJDD(1);
t890 = qJD(1) * qJD(2);
t976 = -t786 * t890 + t772;
t709 = qJDD(3) - t976;
t704 = qJDD(4) + t709;
t689 = qJDD(5) + t704;
t965 = t968 ^ 2;
t1008 = t689 * MDP(29) + (-t736 * t968 - t515) * MDP(28) + MDP(25) * t1006 + (-t582 ^ 2 + t965) * MDP(26) + t513 * MDP(27);
t1007 = t1009 * t784 + t1010 * t788;
t716 = t784 * t789 + t785 * t788;
t665 = t716 * t906;
t823 = t716 * qJD(3);
t800 = -qJD(4) * t716 - t823;
t997 = t665 + t800;
t782 = qJ(3) + qJ(4);
t776 = qJ(5) + t782;
t763 = cos(t776);
t762 = sin(t776);
t791 = cos(qJ(1));
t933 = t791 * t762;
t787 = sin(qJ(1));
t936 = t787 * t790;
t661 = t763 * t936 - t933;
t934 = t790 * t791;
t663 = t762 * t787 + t763 * t934;
t733 = -pkin(2) * t790 - pkin(8) * t786 - pkin(1);
t705 = t733 * qJD(1);
t769 = pkin(7) * t906;
t739 = qJD(2) * pkin(8) + t769;
t647 = t789 * t705 - t739 * t785;
t609 = -pkin(9) * t714 + t647;
t601 = -pkin(3) * t756 + t609;
t648 = t785 * t705 + t789 * t739;
t610 = -pkin(9) * t712 + t648;
t606 = t788 * t610;
t726 = t856 * qJD(2);
t652 = qJD(1) * t726 + qJDD(1) * t733;
t642 = t789 * t652;
t687 = pkin(7) * t976 + qJDD(2) * pkin(8);
t868 = t790 * t890;
t886 = t785 * qJDD(2);
t887 = qJDD(1) * t789;
t551 = -t785 * t687 + t642 - (t786 * t887 + t789 * t868 + t886) * pkin(9) + t709 * pkin(3) - t610 * qJD(3);
t548 = t788 * t551;
t899 = qJD(3) * t789;
t900 = qJD(3) * t785;
t827 = t785 * t652 + t789 * t687 + t705 * t899 - t739 * t900;
t556 = -pkin(9) * t624 + t827;
t865 = -t784 * t556 + t548;
t508 = -t881 * pkin(10) + t704 * pkin(4) + (-t606 + (pkin(10) * t714 - t601) * t784) * qJD(4) + t865;
t858 = t784 * t551 + t788 * t556 + t601 * t896 - t610 * t898;
t511 = -pkin(10) * t844 + t858;
t604 = t784 * t610;
t562 = t788 * t601 - t604;
t985 = pkin(10) * t847;
t549 = t562 - t985;
t543 = -pkin(4) * t747 + t549;
t563 = t601 * t784 + t606;
t984 = pkin(10) * t848;
t550 = t563 + t984;
t860 = t783 * t508 + t963 * t511 + t543 * t870 - t550 * t895;
t944 = t763 * t786;
t811 = g(1) * t663 + g(2) * t661 + g(3) * t944 - t860;
t675 = t689 * qJ(6);
t728 = t736 * qJD(6);
t978 = t675 - t728;
t950 = qJD(2) * pkin(2);
t738 = pkin(7) * t907 - t950;
t655 = pkin(3) * t712 + t738;
t598 = -pkin(4) * t848 + t655;
t533 = pkin(5) * t582 - qJ(6) * t968 + t598;
t994 = t533 * t582;
t1003 = -t811 + t978 - t994;
t993 = t582 * t598;
t1002 = t811 + t993;
t740 = t964 * t785;
t1001 = t1009 * t788 - t1010 * t784 - t740 * t896;
t1000 = t704 * MDP(22) + (t847 ^ 2 - t848 ^ 2) * MDP(19) + (t747 * t848 - t826) * MDP(20) + (-t747 * t847 - t844) * MDP(21) - t848 * MDP(18) * t847 + t1008;
t741 = t964 * t789;
t915 = -t784 * t740 + t788 * t741;
t999 = pkin(4) * t907 - pkin(10) * t1004 + qJD(4) * t915 + t1007;
t941 = t784 * t741;
t959 = pkin(10) * t716;
t998 = (-t941 - t959) * qJD(4) + t1001 + (t665 - t823) * pkin(10);
t544 = pkin(5) * t968 + qJ(6) * t582;
t863 = -t788 * t740 - t941;
t618 = t863 - t959;
t619 = -pkin(10) * t715 + t915;
t577 = t783 * t618 + t619 * t963;
t853 = g(1) * t791 + g(2) * t787;
t953 = g(3) * t790;
t816 = t786 * t853 - t953;
t995 = t577 * t689 + t762 * t816;
t992 = t598 * t968;
t928 = t1004 * t963 + t715 * t870 + t716 * t895 - t783 * t997;
t644 = -t783 * t715 + t716 * t963;
t927 = qJD(5) * t644 - t1004 * t783 - t963 * t997;
t962 = pkin(3) * t785;
t707 = t906 * t962 + t769;
t991 = pkin(3) * t900 - t707;
t902 = qJD(2) * t790;
t875 = t785 * t902;
t820 = t786 * t899 + t875;
t677 = t689 * pkin(5);
t974 = t677 - qJDD(6);
t989 = t533 * t968 - t974;
t987 = pkin(4) * t847;
t680 = t715 * t786;
t835 = t618 * t963 - t783 * t619;
t982 = qJD(5) * t835 - t783 * t999 + t963 * t998;
t981 = qJD(5) * t577 + t783 * t998 + t963 * t999;
t864 = -t609 * t784 - t606;
t553 = t864 - t984;
t925 = t788 * t609 - t604;
t554 = t925 - t985;
t765 = pkin(3) * t788 + pkin(4);
t885 = t783 * t784 * pkin(3);
t980 = -t783 * t553 + t765 * t870 + (-qJD(4) - qJD(5)) * t885 + (pkin(3) * t896 - t554) * t963;
t711 = t789 * t733;
t961 = pkin(7) * t785;
t646 = -pkin(9) * t938 + t711 + (-pkin(3) - t961) * t790;
t633 = t788 * t646;
t759 = pkin(7) * t935;
t911 = t785 * t733 + t759;
t940 = t785 * t786;
t653 = -pkin(9) * t940 + t911;
t573 = -pkin(4) * t790 + pkin(10) * t680 - t653 * t784 + t633;
t679 = t716 * t786;
t920 = t784 * t646 + t788 * t653;
t578 = -pkin(10) * t679 + t920;
t979 = t783 * t573 + t963 * t578;
t924 = -pkin(4) * t997 + t991;
t767 = pkin(7) * t888;
t949 = qJDD(2) * pkin(2);
t688 = pkin(7) * t868 + t767 - t949;
t977 = qJD(3) * pkin(8) * t756 - t688;
t824 = qJD(2) * t716;
t794 = t975 * t680 - t790 * t824;
t774 = sin(t782);
t775 = cos(t782);
t670 = t774 * t936 + t775 * t791;
t672 = -t774 * t934 + t775 * t787;
t954 = g(3) * t786;
t973 = -g(1) * t672 + g(2) * t670 + t774 * t954;
t943 = t763 * t791;
t660 = t762 * t936 + t943;
t937 = t787 * t763;
t662 = t790 * t933 - t937;
t859 = -t963 * t508 + t783 * t511 + t543 * t895 + t550 * t870;
t945 = t762 * t786;
t810 = g(1) * t662 + g(2) * t660 + g(3) * t945 - t859;
t801 = -t810 + t989;
t972 = t810 - t992;
t971 = -qJD(4) * t563 - t655 * t847 + t865 + t973;
t671 = t774 * t791 - t775 * t936;
t673 = t774 * t787 + t775 * t934;
t970 = g(1) * t673 - g(2) * t671 - t655 * t848 + t775 * t954 - t858;
t903 = qJD(2) * t786;
t916 = t789 * t726 + t903 * t961;
t590 = t845 * qJD(2) + (-t759 + (pkin(9) * t786 - t733) * t785) * qJD(3) + t916;
t589 = t788 * t590;
t917 = t785 * t726 + t733 * t899;
t595 = -t820 * pkin(9) + (-t786 * t892 - t790 * t900) * pkin(7) + t917;
t596 = -qJD(2) * t829 + t786 * t800;
t526 = pkin(4) * t903 - pkin(10) * t596 - qJD(4) * t920 - t595 * t784 + t589;
t872 = t786 * t900;
t897 = qJD(4) * t785;
t806 = -t786 * t897 + t790 * t892 - t872;
t883 = t784 * t590 + t788 * t595 + t646 * t896;
t530 = (-t938 * t975 - t875) * pkin(10) * t788 + (-pkin(10) * t806 - qJD(4) * t653) * t784 + t883;
t969 = -qJD(5) * t979 + t526 * t963 - t783 * t530;
t777 = t786 * pkin(7);
t778 = t789 * pkin(3);
t952 = pkin(2) + t778;
t729 = pkin(4) * t774 + t962;
t951 = pkin(7) + t729;
t878 = t963 * t550;
t519 = t783 * t543 + t878;
t948 = t519 * t736;
t946 = t714 * t756;
t942 = t783 * t550;
t932 = pkin(5) * t927 + qJ(6) * t928 - t644 * qJD(6) + t924;
t931 = -qJ(6) * t907 + t982;
t930 = pkin(5) * t907 + t981;
t923 = qJD(6) + t980;
t877 = t963 * t784;
t922 = t553 * t963 - t783 * t554 + t765 * t895 + (t784 * t870 + (t783 * t788 + t877) * qJD(4)) * pkin(3);
t521 = t549 * t963 - t942;
t913 = pkin(4) * t870 + qJD(6) - t521;
t912 = pkin(3) * t877 + t783 * t765;
t730 = pkin(4) * t775 + t778;
t727 = pkin(3) * t940 + t777;
t780 = t786 ^ 2;
t910 = -t790 ^ 2 + t780;
t905 = qJD(2) * t712;
t901 = qJD(3) * t712;
t894 = t714 * qJD(2);
t893 = t738 * qJD(3);
t518 = t543 * t963 - t942;
t891 = qJD(6) - t518;
t658 = pkin(3) * t820 + pkin(7) * t902;
t874 = t756 * t899;
t873 = t756 * t900;
t867 = -t660 * pkin(5) + qJ(6) * t661;
t866 = -t662 * pkin(5) + qJ(6) * t663;
t862 = -qJD(3) * t705 - t687;
t667 = pkin(4) * t715 - t952;
t649 = pkin(4) * t679 + t727;
t520 = t783 * t549 + t878;
t857 = pkin(4) * t895 - t520;
t603 = pkin(3) * t714 + t987;
t855 = -g(1) * t660 + g(2) * t662;
t854 = g(1) * t661 - g(2) * t663;
t852 = g(1) * t787 - g(2) * t791;
t851 = t739 * t899 - t642;
t850 = -pkin(8) * t709 + t893;
t843 = qJD(2) * qJD(3) + t888;
t722 = pkin(2) + t730;
t779 = -pkin(10) - t964;
t842 = t722 * t790 - t779 * t786 + pkin(1);
t841 = pkin(5) * t763 + qJ(6) * t762 + t722;
t840 = -0.2e1 * pkin(1) * t890 - pkin(7) * qJDD(2);
t838 = t573 * t963 - t783 * t578;
t612 = -t783 * t679 - t680 * t963;
t833 = t709 * t785 - t874;
t832 = t789 * t709 + t873;
t831 = t655 * t716;
t828 = -t785 * t889 + t887;
t825 = t783 * t526 + t963 * t530 + t573 * t870 - t578 * t895;
t793 = qJD(1) ^ 2;
t822 = pkin(1) * t793 + t853;
t600 = t624 * pkin(3) + t688;
t821 = t765 * t963 - t885;
t818 = t835 * t689 - t763 * t953 + (g(1) * t943 + g(2) * t937) * t786;
t792 = qJD(2) ^ 2;
t812 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t792 + t852;
t803 = -t518 * t736 + t811;
t802 = t736 * t922 + t810;
t540 = pkin(4) * t844 + t600;
t732 = qJ(6) * t944;
t797 = -g(1) * t866 - g(2) * t867 - g(3) * (-pkin(5) * t945 + t732);
t579 = -pkin(4) * t794 + t658;
t764 = -pkin(4) * t963 - pkin(5);
t760 = pkin(4) * t783 + qJ(6);
t696 = t785 * t787 + t789 * t934;
t695 = -t785 * t934 + t787 * t789;
t694 = t785 * t791 - t787 * t935;
t693 = t785 * t936 + t789 * t791;
t681 = -pkin(5) - t821;
t678 = qJ(6) + t912;
t643 = t715 * t963 + t716 * t783;
t611 = t679 * t963 - t680 * t783;
t575 = pkin(5) * t643 - qJ(6) * t644 + t667;
t557 = pkin(5) * t611 - qJ(6) * t612 + t649;
t539 = qJD(5) * t612 + t783 * t596 - t794 * t963;
t538 = -t596 * t963 + t679 * t870 - t680 * t895 - t783 * t794;
t537 = t544 + t987;
t536 = t790 * pkin(5) - t838;
t535 = -qJ(6) * t790 + t979;
t534 = t544 + t603;
t517 = -t736 * qJ(6) + t519;
t516 = t736 * pkin(5) + t891;
t512 = t539 * pkin(5) + t538 * qJ(6) - t612 * qJD(6) + t579;
t505 = -pkin(5) * t903 - t969;
t504 = qJ(6) * t903 - qJD(6) * t790 + t825;
t503 = t515 * pkin(5) + t514 * qJ(6) - qJD(6) * t968 + t540;
t502 = t859 - t974;
t501 = t860 + t978;
t1 = [((-t712 * t789 - t714 * t785) * t902 + ((-qJD(3) * t714 - t624) * t789 + (-t796 + t901) * t785) * t786) * MDP(12) + t852 * MDP(2) + t853 * MDP(3) + (-t589 * t747 + t633 * t704 - t548 * t790 + t562 * t903 - t658 * t848 + t727 * t882 + t600 * t679 - g(1) * t671 - g(2) * t673 + (t727 * t624 + t655 * t820 + (t610 * t790 + t653 * t747 + t655 * t938) * qJD(4)) * t788 + (-(-qJD(4) * t646 - t595) * t747 - t653 * t704 - (-qJD(4) * t601 - t556) * t790 + t655 * t806) * t784) * MDP(23) + (-(-t733 * t900 + t916) * t756 + t711 * t709 - g(1) * t694 - g(2) * t696 + ((t874 + t905) * pkin(7) + (-pkin(7) * t709 + qJD(2) * t738 - t862) * t785 + t851) * t790 + (pkin(7) * t624 + qJD(2) * t647 + t688 * t785 + t789 * t893) * t786) * MDP(16) + (t917 * t756 - t911 * t709 - g(1) * t693 - g(2) * t695 + (t738 * t892 + (-t873 + t894) * pkin(7) + t827) * t790 + (-t785 * t893 - t648 * qJD(2) + t688 * t789 + (t886 + t828 * t786 + (-t756 + t861) * t892) * pkin(7)) * t786) * MDP(17) + (qJDD(1) * t780 + 0.2e1 * t786 * t868) * MDP(4) + ((-t886 + (-t756 - t861) * t892) * t790 + (-t790 * t828 + t832 + t894) * t786) * MDP(13) + (t649 * t515 + t518 * t903 + t598 * t539 + t540 * t611 + t579 * t582 + t838 * t689 - t736 * t969 + t859 * t790 + t854) * MDP(30) + (-t709 * t790 - t756 * t903) * MDP(15) + (-t704 * t790 - t747 * t903) * MDP(22) + (-t689 * t790 - t736 * t903) * MDP(29) + (t515 * t790 + t539 * t736 - t582 * t903 - t611 * t689) * MDP(28) + (t502 * t790 + t503 * t611 + t505 * t736 + t512 * t582 + t515 * t557 - t516 * t903 + t533 * t539 - t536 * t689 + t854) * MDP(32) + 0.2e1 * (t772 * t786 - t890 * t910) * MDP(5) + (t596 * t847 + t680 * t826) * MDP(18) + ((-t653 * t898 + t883) * t747 - t920 * t704 + t858 * t790 - t563 * t903 + t658 * t847 - t727 * t826 - t600 * t680 + t655 * t596 - g(1) * t670 - g(2) * t672) * MDP(24) + (-t596 * t747 - t680 * t704 + t790 * t826 + t847 * t903) * MDP(20) + (-t679 * t704 + (t747 * t824 + t844) * t790 + (-(-t788 * t899 - t789 * t896 + (t897 + t900) * t784) * t747 + t848 * qJD(2)) * t786) * MDP(21) + (-t714 * t872 + (t790 * t894 + (t843 + t868) * t938 - t786 * t830) * t789) * MDP(11) + (-t501 * t611 + t502 * t612 - t504 * t582 + t505 * t968 - t514 * t536 - t515 * t535 - t516 * t538 - t517 * t539 + t786 * t852) * MDP(33) + (t514 * t790 + t538 * t736 + t612 * t689 + t903 * t968) * MDP(27) + (-t501 * t790 - t503 * t612 - t504 * t736 - t512 * t968 + t514 * t557 + t517 * t903 + t533 * t538 + t535 * t689 - t855) * MDP(34) + (-t514 * t612 - t538 * t968) * MDP(25) + (t514 * t611 - t515 * t612 + t538 * t582 - t539 * t968) * MDP(26) + (-t649 * t514 - t519 * t903 - t598 * t538 + t540 * t612 + t579 * t968 - t689 * t979 + t736 * t825 + t790 * t860 + t855) * MDP(31) + (t501 * t535 + t517 * t504 + t503 * t557 + t533 * t512 + t502 * t536 + t516 * t505 - g(1) * (-pkin(5) * t661 - qJ(6) * t660) - g(2) * (pkin(5) * t663 + qJ(6) * t662) + (-g(1) * t951 - g(2) * t842) * t791 + (g(1) * t842 - g(2) * t951) * t787) * MDP(35) + (t786 * t840 + t790 * t812) * MDP(9) + (-t786 * t812 + t790 * t840) * MDP(10) + (qJDD(2) * t786 + t790 * t792) * MDP(6) + (qJDD(2) * t790 - t786 * t792) * MDP(7) + qJDD(1) * MDP(1) + (t596 * t848 + t679 * t826 + t680 * t844 + t794 * t847) * MDP(19) + ((t756 * t904 + t624) * t790 + (-t833 - t905) * t786) * MDP(14); (t786 * t822 - t767 - t953) * MDP(9) + (t954 + (-pkin(7) * qJDD(1) + t822) * t790) * MDP(10) + (-t849 * t785 ^ 2 + (t807 - t946) * t789) * MDP(11) + ((-t624 + t946) * t785 + (-t901 + t886 + t843 * t789 + (-t872 + (t712 + t892) * t790) * qJD(1)) * t789) * MDP(12) + ((t712 * t786 - t756 * t939) * qJD(1) + t832) * MDP(14) + (t863 * t704 - t952 * t844 + t600 * t715 + t707 * t848 - t655 * t665 + t1007 * t747 + (t747 * t915 + t831) * qJD(4) + (-t848 * t962 + t831) * qJD(3) + t816 * t775) * MDP(23) + (-t667 * t514 + t540 * t644 - t928 * t598 + t736 * t982 + t924 * t968 - t995) * MDP(31) + (-t503 * t644 + t514 * t575 + t533 * t928 - t736 * t931 - t932 * t968 + t995) * MDP(34) + (-t643 * t689 + t736 * t927) * MDP(28) + (-t915 * t704 + t952 * t826 + t600 * t716 + (-t741 * t898 + t1001) * t747 - t1004 * t655 + t991 * t847 - t816 * t774) * MDP(24) + (t1004 * t747 + t704 * t716) * MDP(20) + (-t1004 * t847 - t716 * t826) * MDP(18) + (-t1004 * t848 + t826 * t715 - t716 * t844 + t847 * t997) * MDP(19) + (t644 * t689 + t736 * t928) * MDP(27) + (-MDP(4) * t786 * t790 + MDP(5) * t910) * t793 + ((-t714 * t786 + t756 * t935) * qJD(1) + t833) * MDP(13) + (t501 * t577 - t502 * t835 + t503 * t575 + t932 * t533 + t931 * t517 + t930 * t516 + (-g(3) * t841 + t779 * t853) * t790 + (g(3) * t779 + t841 * t853) * t786) * MDP(35) + (t514 * t643 - t515 * t644 + t582 * t928 - t927 * t968) * MDP(26) + (-t514 * t644 - t928 * t968) * MDP(25) + (t756 * MDP(15) - MDP(20) * t847 - MDP(21) * t848 + t747 * MDP(22) - t562 * MDP(23) + t563 * MDP(24) - MDP(27) * t968 + t582 * MDP(28) + t736 * MDP(29) - t518 * MDP(30) + t519 * MDP(31) + t516 * MDP(32) - t517 * MDP(34)) * t907 + (-t501 * t643 + t502 * t644 + t514 * t835 - t515 * t577 - t516 * t928 - t517 * t927 - t582 * t931 - t790 * t853 + t930 * t968 - t954) * MDP(33) + (t503 * t643 + t515 * t575 + t533 * t927 + t582 * t932 + t736 * t930 + t818) * MDP(32) + qJDD(2) * MDP(8) + (-t715 * t704 + (t716 * t975 - t665) * t747) * MDP(21) + (-t698 * t756 + (-pkin(7) * t714 * t790 + t648 * t786) * qJD(1) + (-pkin(2) * t843 + (t756 * t777 + (-t738 - t950) * t790) * qJD(1) + t850) * t789 + (-t949 + t953 + (pkin(2) * t889 - t853) * t786 - t977) * t785) * MDP(17) + (-pkin(2) * t624 + t914 * t756 + t850 * t785 + (-t647 * t786 + (-pkin(7) * t712 - t738 * t785) * t790) * qJD(1) + (t816 + t977) * t789) * MDP(16) + (t667 * t515 + t540 * t643 + t924 * t582 + t927 * t598 + t736 * t981 + t818) * MDP(30) + MDP(7) * t772 + MDP(6) * t888; (-g(1) * t695 + g(2) * t693 - t648 * t756 - t714 * t738 + (t862 + t954) * t785 - t851) * MDP(16) + (-t946 - t624) * MDP(14) + (g(1) * t696 - g(2) * t694 + g(3) * t938 - t647 * t756 + t712 * t738 - t827) * MDP(17) + (-t534 * t582 - t681 * t689 + t802 - t989) * MDP(32) + (-t514 * t681 - t515 * t678 + (t517 + t922) * t968 + (t516 - t923) * t582) * MDP(33) + (-t603 * t968 - t912 * t689 + t736 * t980 + t1002) * MDP(31) + (t534 * t968 + t678 * t689 - t736 * t923 + t1003) * MDP(34) + (t864 * t747 + (t704 * t788 + t714 * t848 + t747 * t898) * pkin(3) + t971) * MDP(23) + (-t603 * t582 + t689 * t821 + t802 - t992) * MDP(30) + (-t925 * t747 + (-t704 * t784 - t714 * t847 + t747 * t896) * pkin(3) + t970) * MDP(24) + (-t712 * t756 + t796) * MDP(13) + (t501 * t678 + t502 * t681 - t533 * t534 - g(1) * (-t729 * t934 + t730 * t787 + t866) - g(2) * (-t729 * t936 - t730 * t791 + t867) - g(3) * (t732 + (-pkin(5) * t762 - t729) * t786) + t923 * t517 + t922 * t516) * MDP(35) + (-t712 ^ 2 + t714 ^ 2) * MDP(12) + t709 * MDP(15) + t714 * t712 * MDP(11) + t1000; (-t563 * t747 + t971) * MDP(23) + (-t562 * t747 + t970) * MDP(24) + (-t520 * t736 + (-t582 * t847 + t689 * t963 + t736 * t895) * pkin(4) + t972) * MDP(30) + (-t521 * t736 + (-t689 * t783 + t736 * t870 - t847 * t968) * pkin(4) + t1002) * MDP(31) + (-t537 * t582 - t689 * t764 + t736 * t857 - t801) * MDP(32) + (-t514 * t764 - t515 * t760 + (t517 + t857) * t968 + (t516 - t913) * t582) * MDP(33) + (t537 * t968 + t689 * t760 - t736 * t913 + t1003) * MDP(34) + (t501 * t760 + t502 * t764 - t533 * t537 - t516 * t520 + t913 * t517 + (t516 * t895 + t973) * pkin(4) + t797) * MDP(35) + t1000; (-t948 + t972) * MDP(30) + (t803 + t993) * MDP(31) + (-t544 * t582 + t677 - t801 - t948) * MDP(32) + (pkin(5) * t514 - qJ(6) * t515 + (t517 - t519) * t968 + (t516 - t891) * t582) * MDP(33) + (t544 * t968 + 0.2e1 * t675 - 0.2e1 * t728 - t803 - t994) * MDP(34) + (-t502 * pkin(5) + t501 * qJ(6) - t516 * t519 + t517 * t891 - t533 * t544 + t797) * MDP(35) + t1008; (-t689 + t1006) * MDP(32) + t513 * MDP(33) + (-t736 ^ 2 - t965) * MDP(34) + (t517 * t736 + t801) * MDP(35);];
tau  = t1;
