% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 05:18
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:18:24
% EndTime: 2019-05-08 05:18:36
% DurationCPUTime: 12.40s
% Computational Cost: add. (65094->325), mult. (132612->394), div. (0->0), fcn. (97265->10), ass. (0->228)
t2516 = sin(qJ(2));
t2555 = qJD(1) * t2516;
t2506 = qJD(2) * t2555;
t2521 = cos(qJ(2));
t2541 = t2521 * qJDD(1);
t2537 = t2506 - t2541;
t2536 = -qJDD(3) - t2537;
t2534 = -qJDD(4) + t2536;
t2531 = -qJDD(5) + t2534;
t2515 = sin(qJ(3));
t2520 = cos(qJ(3));
t2481 = -qJD(2) * t2520 + t2515 * t2555;
t2482 = qJD(2) * t2515 + t2520 * t2555;
t2514 = sin(qJ(4));
t2519 = cos(qJ(4));
t2463 = t2519 * t2481 + t2482 * t2514;
t2464 = -t2481 * t2514 + t2482 * t2519;
t2513 = sin(qJ(5));
t2518 = cos(qJ(5));
t2437 = t2463 * t2518 + t2513 * t2464;
t2439 = -t2463 * t2513 + t2464 * t2518;
t2551 = t2437 * t2439;
t2395 = t2531 - t2551;
t2436 = t2439 ^ 2;
t2554 = qJD(1) * t2521;
t2503 = -qJD(3) + t2554;
t2498 = -qJD(4) + t2503;
t2493 = qJD(5) - t2498;
t2559 = t2493 ^ 2;
t2569 = -t2436 - t2559;
t2378 = t2395 * t2513 + t2518 * t2569;
t2380 = t2395 * t2518 - t2513 * t2569;
t2337 = t2378 * t2514 - t2380 * t2519;
t2345 = t2378 * t2519 + t2380 * t2514;
t2318 = t2337 * t2520 + t2345 * t2515;
t2540 = qJD(2) * t2554;
t2542 = t2516 * qJDD(1);
t2485 = t2540 + t2542;
t2535 = -t2515 * qJDD(2) - t2520 * t2485;
t2460 = -qJD(3) * t2481 - t2535;
t2538 = -t2520 * qJDD(2) + t2515 * t2485;
t2533 = qJD(3) * t2482 + t2538;
t2529 = -t2519 * t2460 + t2514 * t2533;
t2417 = -t2463 * qJD(4) - t2529;
t2528 = -t2514 * t2460 - t2519 * t2533;
t2527 = -t2464 * qJD(4) + t2528;
t2526 = -t2437 * qJD(5) + t2518 * t2417 + t2513 * t2527;
t2550 = t2437 * t2493;
t2568 = t2550 - t2526;
t2302 = t2318 * t2521 + t2516 * t2568;
t2316 = t2337 * t2515 - t2345 * t2520;
t2517 = sin(qJ(1));
t2522 = cos(qJ(1));
t2597 = t2302 * t2517 - t2316 * t2522;
t2596 = t2302 * t2522 + t2316 * t2517;
t2300 = t2318 * t2516 - t2521 * t2568;
t2396 = t2531 + t2551;
t2405 = t2437 ^ 2;
t2567 = -t2559 - t2405;
t2574 = t2396 * t2513 + t2518 * t2567;
t2575 = -t2518 * t2396 + t2513 * t2567;
t2578 = t2514 * t2574 + t2519 * t2575;
t2579 = -t2514 * t2575 + t2519 * t2574;
t2582 = -t2515 * t2578 + t2520 * t2579;
t2593 = t2516 * t2582;
t2583 = t2515 * t2579 + t2520 * t2578;
t2592 = t2517 * t2583;
t2591 = t2521 * t2582;
t2590 = t2522 * t2583;
t2360 = t2526 + t2550;
t2539 = t2513 * t2417 - t2518 * t2527;
t2530 = (-qJD(5) + t2493) * t2439 - t2539;
t2565 = t2360 * t2513 + t2518 * t2530;
t2566 = -t2518 * t2360 + t2513 * t2530;
t2572 = t2514 * t2565 + t2519 * t2566;
t2573 = -t2514 * t2566 + t2519 * t2565;
t2577 = t2515 * t2573 + t2520 * t2572;
t2385 = t2436 + t2405;
t2576 = -t2515 * t2572 + t2520 * t2573;
t2584 = -t2385 * t2516 + t2521 * t2576;
t2589 = t2517 * t2584 - t2522 * t2577;
t2588 = t2517 * t2577 + t2522 * t2584;
t2585 = t2385 * t2521 + t2516 * t2576;
t2564 = qJD(2) ^ 2;
t2563 = t2463 ^ 2;
t2562 = t2464 ^ 2;
t2561 = t2481 ^ 2;
t2560 = t2482 ^ 2;
t2558 = t2498 ^ 2;
t2557 = t2503 ^ 2;
t2556 = t2521 * g(3);
t2549 = t2463 * t2464;
t2548 = t2463 * t2498;
t2547 = t2481 * t2482;
t2546 = t2481 * t2503;
t2545 = qJD(3) + t2503;
t2544 = qJD(4) + t2498;
t2496 = t2517 * g(1) - t2522 * g(2);
t2523 = qJD(1) ^ 2;
t2478 = qJDD(1) * pkin(1) + t2523 * pkin(7) + t2496;
t2442 = (-t2485 - t2540) * pkin(8) + (t2537 + t2506) * pkin(2) - t2478;
t2497 = -g(1) * t2522 - g(2) * t2517;
t2479 = -pkin(1) * t2523 + qJDD(1) * pkin(7) + t2497;
t2471 = -g(3) * t2516 + t2521 * t2479;
t2483 = (-pkin(2) * t2521 - pkin(8) * t2516) * qJD(1);
t2452 = -pkin(2) * t2564 + qJDD(2) * pkin(8) + t2483 * t2554 + t2471;
t2418 = t2520 * t2442 - t2515 * t2452;
t2457 = -t2536 - t2547;
t2387 = (-t2460 + t2546) * pkin(9) + t2457 * pkin(3) + t2418;
t2419 = t2515 * t2442 + t2520 * t2452;
t2472 = -pkin(3) * t2503 - pkin(9) * t2482;
t2389 = -pkin(3) * t2561 - pkin(9) * t2533 + t2503 * t2472 + t2419;
t2354 = t2514 * t2387 + t2519 * t2389;
t2453 = -pkin(4) * t2498 - pkin(10) * t2464;
t2344 = -pkin(4) * t2563 + pkin(10) * t2527 + t2498 * t2453 + t2354;
t2353 = t2519 * t2387 - t2514 * t2389;
t2429 = -t2534 - t2549;
t2525 = (-t2417 + t2548) * pkin(10) + t2429 * pkin(4) + t2353;
t2321 = t2518 * t2344 + t2513 * t2525;
t2509 = t2516 ^ 2;
t2510 = t2521 ^ 2;
t2543 = t2509 + t2510;
t2320 = -t2344 * t2513 + t2518 * t2525;
t2532 = -qJD(5) * t2439 - t2539;
t2451 = t2556 - qJDD(2) * pkin(2) - t2564 * pkin(8) + (qJD(1) * t2483 + t2479) * t2516;
t2412 = t2533 * pkin(3) - t2561 * pkin(9) + t2482 * t2472 + t2451;
t2363 = -t2527 * pkin(4) - t2563 * pkin(10) + t2464 * t2453 + t2412;
t2502 = t2521 * t2523 * t2516;
t2501 = -t2510 * t2523 - t2564;
t2500 = -t2509 * t2523 - t2564;
t2495 = -qJDD(2) + t2502;
t2494 = qJDD(2) + t2502;
t2492 = t2543 * t2523;
t2490 = -qJDD(1) * t2517 - t2522 * t2523;
t2489 = qJDD(1) * t2522 - t2517 * t2523;
t2488 = t2543 * qJDD(1);
t2486 = -0.2e1 * t2506 + t2541;
t2484 = 0.2e1 * t2540 + t2542;
t2470 = -t2516 * t2479 - t2556;
t2469 = t2495 * t2521 - t2500 * t2516;
t2468 = -t2494 * t2516 + t2501 * t2521;
t2467 = t2495 * t2516 + t2500 * t2521;
t2466 = t2494 * t2521 + t2501 * t2516;
t2465 = -t2557 - t2560;
t2461 = -t2557 - t2561;
t2456 = t2536 - t2547;
t2455 = -t2560 - t2561;
t2449 = -t2558 - t2562;
t2448 = -t2470 * t2516 + t2471 * t2521;
t2447 = t2470 * t2521 + t2471 * t2516;
t2446 = t2481 * t2545 + t2535;
t2445 = t2460 + t2546;
t2444 = -t2482 * t2545 - t2538;
t2443 = (qJD(3) - t2503) * t2482 + t2538;
t2435 = t2456 * t2520 - t2465 * t2515;
t2434 = t2456 * t2515 + t2465 * t2520;
t2432 = -t2558 - t2563;
t2431 = -t2457 * t2515 + t2461 * t2520;
t2430 = t2457 * t2520 + t2461 * t2515;
t2428 = t2534 - t2549;
t2420 = -t2562 - t2563;
t2414 = t2444 * t2520 - t2446 * t2515;
t2413 = t2444 * t2515 + t2446 * t2520;
t2411 = t2435 * t2521 + t2445 * t2516;
t2410 = t2435 * t2516 - t2445 * t2521;
t2409 = t2428 * t2519 - t2449 * t2514;
t2408 = t2428 * t2514 + t2449 * t2519;
t2407 = t2431 * t2521 + t2443 * t2516;
t2406 = t2431 * t2516 - t2443 * t2521;
t2404 = pkin(5) * t2437 - qJ(6) * t2439;
t2403 = t2463 * t2544 + t2529;
t2402 = t2417 + t2548;
t2401 = -t2464 * t2544 + t2528;
t2400 = (qJD(4) - t2498) * t2464 - t2528;
t2394 = -t2429 * t2514 + t2432 * t2519;
t2393 = t2429 * t2519 + t2432 * t2514;
t2391 = t2414 * t2521 + t2455 * t2516;
t2390 = t2414 * t2516 - t2455 * t2521;
t2383 = -t2418 * t2515 + t2419 * t2520;
t2382 = t2418 * t2520 + t2419 * t2515;
t2377 = t2383 * t2521 + t2451 * t2516;
t2376 = t2383 * t2516 - t2451 * t2521;
t2375 = -t2408 * t2515 + t2409 * t2520;
t2374 = t2408 * t2520 + t2409 * t2515;
t2371 = t2401 * t2519 - t2403 * t2514;
t2370 = t2401 * t2514 + t2403 * t2519;
t2365 = -t2393 * t2515 + t2394 * t2520;
t2364 = t2393 * t2520 + t2394 * t2515;
t2357 = t2493 * t2439 - t2532;
t2356 = (qJD(5) + t2493) * t2439 + t2539;
t2352 = t2375 * t2521 + t2402 * t2516;
t2351 = t2375 * t2516 - t2402 * t2521;
t2350 = t2365 * t2521 + t2400 * t2516;
t2349 = t2365 * t2516 - t2400 * t2521;
t2342 = -t2370 * t2515 + t2371 * t2520;
t2341 = t2370 * t2520 + t2371 * t2515;
t2334 = t2342 * t2521 + t2420 * t2516;
t2333 = t2342 * t2516 - t2420 * t2521;
t2328 = -t2353 * t2514 + t2354 * t2519;
t2327 = t2353 * t2519 + t2354 * t2514;
t2322 = -t2532 * pkin(5) + t2363 + (pkin(5) * t2493 - (2 * qJD(6))) * t2439 + t2568 * qJ(6);
t2315 = t2357 * t2516 + t2591;
t2313 = -t2357 * t2521 + t2593;
t2311 = pkin(5) * t2531 - qJ(6) * t2559 + t2404 * t2439 + qJDD(6) - t2320;
t2310 = -pkin(5) * t2559 - qJ(6) * t2531 + 0.2e1 * qJD(6) * t2493 - t2437 * t2404 + t2321;
t2305 = -t2327 * t2515 + t2328 * t2520;
t2304 = t2327 * t2520 + t2328 * t2515;
t2303 = t2356 * t2516 + t2591;
t2301 = -t2356 * t2521 + t2593;
t2299 = t2305 * t2521 + t2412 * t2516;
t2298 = t2305 * t2516 - t2412 * t2521;
t2297 = -t2320 * t2513 + t2321 * t2518;
t2296 = t2320 * t2518 + t2321 * t2513;
t2295 = t2310 * t2518 + t2311 * t2513;
t2294 = t2310 * t2513 - t2311 * t2518;
t2285 = -t2296 * t2514 + t2297 * t2519;
t2284 = t2296 * t2519 + t2297 * t2514;
t2283 = -t2294 * t2514 + t2295 * t2519;
t2282 = t2294 * t2519 + t2295 * t2514;
t2281 = -t2284 * t2515 + t2285 * t2520;
t2280 = t2284 * t2520 + t2285 * t2515;
t2279 = t2281 * t2521 + t2363 * t2516;
t2278 = t2281 * t2516 - t2363 * t2521;
t2277 = -t2282 * t2515 + t2283 * t2520;
t2276 = t2282 * t2520 + t2283 * t2515;
t2275 = t2277 * t2521 + t2322 * t2516;
t2274 = t2277 * t2516 - t2322 * t2521;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2490, -t2489, 0, -t2496 * t2517 + t2497 * t2522, 0, 0, 0, 0, 0, 0, t2468 * t2522 - t2486 * t2517, t2469 * t2522 + t2484 * t2517, t2488 * t2522 - t2492 * t2517, t2448 * t2522 - t2478 * t2517, 0, 0, 0, 0, 0, 0, t2407 * t2522 + t2430 * t2517, t2411 * t2522 + t2434 * t2517, t2391 * t2522 + t2413 * t2517, t2377 * t2522 + t2382 * t2517, 0, 0, 0, 0, 0, 0, t2350 * t2522 + t2364 * t2517, t2352 * t2522 + t2374 * t2517, t2334 * t2522 + t2341 * t2517, t2299 * t2522 + t2304 * t2517, 0, 0, 0, 0, 0, 0, t2303 * t2522 + t2592, -t2596, t2588, t2279 * t2522 + t2280 * t2517, 0, 0, 0, 0, 0, 0, t2315 * t2522 + t2592, t2588, t2596, t2275 * t2522 + t2276 * t2517; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2489, t2490, 0, t2496 * t2522 + t2497 * t2517, 0, 0, 0, 0, 0, 0, t2468 * t2517 + t2486 * t2522, t2469 * t2517 - t2484 * t2522, t2488 * t2517 + t2492 * t2522, t2448 * t2517 + t2478 * t2522, 0, 0, 0, 0, 0, 0, t2407 * t2517 - t2430 * t2522, t2411 * t2517 - t2434 * t2522, t2391 * t2517 - t2413 * t2522, t2377 * t2517 - t2382 * t2522, 0, 0, 0, 0, 0, 0, t2350 * t2517 - t2364 * t2522, t2352 * t2517 - t2374 * t2522, t2334 * t2517 - t2341 * t2522, t2299 * t2517 - t2304 * t2522, 0, 0, 0, 0, 0, 0, t2303 * t2517 - t2590, -t2597, t2589, t2279 * t2517 - t2280 * t2522, 0, 0, 0, 0, 0, 0, t2315 * t2517 - t2590, t2589, t2597, t2275 * t2517 - t2276 * t2522; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2466, t2467, 0, t2447, 0, 0, 0, 0, 0, 0, t2406, t2410, t2390, t2376, 0, 0, 0, 0, 0, 0, t2349, t2351, t2333, t2298, 0, 0, 0, 0, 0, 0, t2301, -t2300, t2585, t2278, 0, 0, 0, 0, 0, 0, t2313, t2585, t2300, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2523, -qJDD(1), 0, t2497, 0, 0, 0, 0, 0, 0, t2468, t2469, t2488, t2448, 0, 0, 0, 0, 0, 0, t2407, t2411, t2391, t2377, 0, 0, 0, 0, 0, 0, t2350, t2352, t2334, t2299, 0, 0, 0, 0, 0, 0, t2303, -t2302, t2584, t2279, 0, 0, 0, 0, 0, 0, t2315, t2584, t2302, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2523, 0, t2496, 0, 0, 0, 0, 0, 0, t2486, -t2484, t2492, t2478, 0, 0, 0, 0, 0, 0, -t2430, -t2434, -t2413, -t2382, 0, 0, 0, 0, 0, 0, -t2364, -t2374, -t2341, -t2304, 0, 0, 0, 0, 0, 0, -t2583, t2316, -t2577, -t2280, 0, 0, 0, 0, 0, 0, -t2583, -t2577, -t2316, -t2276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2466, t2467, 0, t2447, 0, 0, 0, 0, 0, 0, t2406, t2410, t2390, t2376, 0, 0, 0, 0, 0, 0, t2349, t2351, t2333, t2298, 0, 0, 0, 0, 0, 0, t2301, -t2300, t2585, t2278, 0, 0, 0, 0, 0, 0, t2313, t2585, t2300, t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, t2495, t2541, t2471, 0, 0, 0, 0, 0, 0, t2431, t2435, t2414, t2383, 0, 0, 0, 0, 0, 0, t2365, t2375, t2342, t2305, 0, 0, 0, 0, 0, 0, t2582, -t2318, t2576, t2281, 0, 0, 0, 0, 0, 0, t2582, t2576, t2318, t2277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2494, t2500, -t2542, t2470, 0, 0, 0, 0, 0, 0, -t2443, -t2445, -t2455, -t2451, 0, 0, 0, 0, 0, 0, -t2400, -t2402, -t2420, -t2412, 0, 0, 0, 0, 0, 0, -t2356, t2568, t2385, -t2363, 0, 0, 0, 0, 0, 0, -t2357, t2385, -t2568, -t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2486, t2484, -t2492, -t2478, 0, 0, 0, 0, 0, 0, t2430, t2434, t2413, t2382, 0, 0, 0, 0, 0, 0, t2364, t2374, t2341, t2304, 0, 0, 0, 0, 0, 0, t2583, -t2316, t2577, t2280, 0, 0, 0, 0, 0, 0, t2583, t2577, t2316, t2276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2461, t2456, t2444, t2419, 0, 0, 0, 0, 0, 0, t2394, t2409, t2371, t2328, 0, 0, 0, 0, 0, 0, t2579, -t2337, t2573, t2285, 0, 0, 0, 0, 0, 0, t2579, t2573, t2337, t2283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2457, t2465, t2446, t2418, 0, 0, 0, 0, 0, 0, t2393, t2408, t2370, t2327, 0, 0, 0, 0, 0, 0, t2578, t2345, t2572, t2284, 0, 0, 0, 0, 0, 0, t2578, t2572, -t2345, t2282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2443, t2445, t2455, t2451, 0, 0, 0, 0, 0, 0, t2400, t2402, t2420, t2412, 0, 0, 0, 0, 0, 0, t2356, -t2568, -t2385, t2363, 0, 0, 0, 0, 0, 0, t2357, -t2385, t2568, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2432, t2428, t2401, t2354, 0, 0, 0, 0, 0, 0, t2574, t2380, t2565, t2297, 0, 0, 0, 0, 0, 0, t2574, t2565, -t2380, t2295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2429, t2449, t2403, t2353, 0, 0, 0, 0, 0, 0, t2575, t2378, t2566, t2296, 0, 0, 0, 0, 0, 0, t2575, t2566, -t2378, t2294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2400, t2402, t2420, t2412, 0, 0, 0, 0, 0, 0, t2356, -t2568, -t2385, t2363, 0, 0, 0, 0, 0, 0, t2357, -t2385, t2568, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2567, t2395, t2530, t2321, 0, 0, 0, 0, 0, 0, t2567, t2530, -t2395, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2396, t2569, -t2360, t2320, 0, 0, 0, 0, 0, 0, -t2396, -t2360, -t2569, -t2311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, -t2568, -t2385, t2363, 0, 0, 0, 0, 0, 0, t2357, -t2385, t2568, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2567, t2530, -t2395, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2357, -t2385, t2568, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2396, t2360, t2569, t2311;];
f_new_reg  = t1;
