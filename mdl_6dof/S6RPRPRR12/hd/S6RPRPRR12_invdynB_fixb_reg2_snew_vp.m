% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 20:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 20:46:46
% EndTime: 2019-05-05 20:47:06
% DurationCPUTime: 12.61s
% Computational Cost: add. (38481->603), mult. (77894->809), div. (0->0), fcn. (45948->8), ass. (0->404)
t625 = qJD(3) ^ 2;
t619 = sin(qJ(3));
t615 = t619 ^ 2;
t626 = qJD(1) ^ 2;
t689 = t615 * t626;
t595 = -t625 - t689;
t623 = cos(qJ(3));
t684 = t623 * t626;
t666 = t619 * t684;
t588 = -qJDD(3) + t666;
t696 = t588 * t623;
t538 = -t595 * t619 + t696;
t677 = qJD(1) * qJD(3);
t660 = t623 * t677;
t674 = qJDD(1) * t619;
t578 = -0.2e1 * t660 - t674;
t620 = sin(qJ(1));
t624 = cos(qJ(1));
t488 = t538 * t624 - t578 * t620;
t746 = pkin(6) * t488;
t616 = t623 ^ 2;
t609 = t616 * t626;
t597 = -t609 - t625;
t589 = qJDD(3) + t666;
t695 = t589 * t619;
t539 = -t597 * t623 + t695;
t606 = t619 * t677;
t672 = qJDD(1) * t623;
t581 = -0.2e1 * t606 + t672;
t489 = t539 * t624 + t581 * t620;
t745 = pkin(6) * t489;
t492 = t538 * t620 + t578 * t624;
t744 = pkin(6) * t492;
t495 = t539 * t620 - t581 * t624;
t743 = pkin(6) * t495;
t724 = pkin(1) + pkin(7);
t697 = t588 * t619;
t541 = t595 * t623 + t697;
t742 = t541 * t724;
t617 = sin(qJ(6));
t618 = sin(qJ(5));
t622 = cos(qJ(5));
t680 = qJD(1) * t619;
t571 = qJD(3) * t618 - t622 * t680;
t573 = qJD(3) * t622 + t618 * t680;
t621 = cos(qJ(6));
t516 = t621 * t571 + t573 * t617;
t518 = -t571 * t617 + t573 * t621;
t465 = t518 * t516;
t580 = -t606 + t672;
t569 = qJDD(5) + t580;
t565 = qJDD(6) + t569;
t727 = -t465 + t565;
t741 = t617 * t727;
t528 = t573 * t571;
t726 = -t528 + t569;
t740 = t618 * t726;
t739 = t621 * t727;
t738 = t622 * t726;
t737 = t724 * t538;
t736 = t724 * t539;
t694 = t589 * t623;
t544 = t597 * t619 + t694;
t735 = t724 * t544;
t596 = -t609 + t625;
t534 = -t596 * t623 + t697;
t671 = qJDD(1) * t624;
t734 = t534 * t620 - t623 * t671;
t733 = t534 * t624 + t620 * t672;
t594 = -t625 + t689;
t536 = t594 * t619 + t694;
t732 = t536 * t620 - t619 * t671;
t673 = qJDD(1) * t620;
t731 = t536 * t624 + t619 * t673;
t730 = pkin(2) * t538 + qJ(2) * t541;
t729 = pkin(2) * t539 - qJ(2) * t544;
t728 = t724 * t626;
t579 = t660 + t674;
t511 = -t571 * qJD(5) + t622 * qJDD(3) + t618 * t579;
t679 = qJD(1) * t623;
t602 = qJD(5) + t679;
t705 = t571 * t602;
t477 = -t511 - t705;
t725 = -pkin(3) * t660 - qJ(4) * t606;
t514 = t516 ^ 2;
t515 = t518 ^ 2;
t567 = t571 ^ 2;
t568 = t573 ^ 2;
t593 = qJD(6) + t602;
t592 = t593 ^ 2;
t598 = t602 ^ 2;
t723 = pkin(3) + pkin(8);
t586 = t609 + t689;
t722 = pkin(2) * t586;
t721 = pkin(3) * t619;
t720 = pkin(3) * t623;
t681 = t615 + t616;
t583 = t681 * qJDD(1);
t698 = t583 * t624;
t525 = -t586 * t620 + t698;
t719 = pkin(6) * t525;
t718 = t619 * g(3);
t717 = qJ(4) * t619;
t716 = qJ(4) * t623;
t715 = qJDD(1) * pkin(1);
t676 = qJD(2) * qJD(1);
t611 = 0.2e1 * t676;
t591 = t624 * g(1) + t620 * g(2);
t614 = qJDD(1) * qJ(2);
t645 = t591 - t614;
t641 = t611 - t645;
t678 = qJD(4) * t623;
t702 = t580 * qJ(4);
t632 = -0.2e1 * qJD(1) * t678 + t641 - t702 - t725;
t642 = pkin(4) * t679 - qJD(3) * pkin(8);
t430 = -t642 * t679 + t723 * t579 + (-pkin(4) * t615 - t724) * t626 + t632;
t648 = -t716 + t721;
t575 = t648 * qJD(1);
t590 = t620 * g(1) - t624 * g(2);
t650 = qJDD(2) - t590;
t640 = -t626 * qJ(2) + t650;
t633 = -qJDD(1) * t724 + t640;
t631 = t623 * t633;
t630 = t575 * t679 + qJDD(4) - t631;
t683 = t625 * qJ(4);
t443 = -t683 + t580 * pkin(4) - t723 * qJDD(3) + (pkin(4) * t677 + pkin(8) * t684 - g(3)) * t619 + t630;
t380 = t618 * t430 - t622 * t443;
t364 = pkin(5) * t726 + pkin(9) * t477 - t380;
t381 = t622 * t430 + t618 * t443;
t657 = t618 * qJDD(3) - t622 * t579;
t510 = -qJD(5) * t573 - t657;
t653 = pkin(5) * t602 - pkin(9) * t573;
t369 = -t567 * pkin(5) + t510 * pkin(9) - t602 * t653 + t381;
t329 = -t621 * t364 + t369 * t617;
t330 = t364 * t617 + t369 * t621;
t305 = -t329 * t621 + t330 * t617;
t714 = t305 * t618;
t713 = t305 * t622;
t659 = t623 * g(3) - t619 * t633;
t638 = qJDD(3) * qJ(4) - t575 * t680 - t659;
t634 = t625 * pkin(3) - t638;
t675 = qJD(4) * qJD(3);
t442 = t579 * pkin(4) + pkin(8) * t689 - qJD(3) * t642 + t634 - 0.2e1 * t675;
t386 = t510 * pkin(5) + t567 * pkin(9) - t573 * t653 + t442;
t712 = t386 * t617;
t711 = t386 * t621;
t447 = t465 + t565;
t710 = t447 * t617;
t709 = t447 * t621;
t500 = t528 + t569;
t708 = t500 * t618;
t707 = t500 * t622;
t706 = t516 * t593;
t699 = t583 * t620;
t693 = t593 * t617;
t692 = t593 * t621;
t691 = t602 * t618;
t690 = t602 * t622;
t688 = t618 * t442;
t635 = t645 + t728;
t548 = t635 - 0.2e1 * t676;
t687 = t619 * t548;
t686 = t622 * t442;
t685 = t623 * t548;
t682 = t586 - t625;
t670 = t619 * t465;
t669 = t623 * t465;
t668 = t619 * t528;
t667 = t623 * t528;
t665 = t516 * qJD(6) - t617 * t510 - t621 * t511;
t306 = t329 * t617 + t621 * t330;
t658 = -t621 * t510 + t617 * t511;
t555 = -t626 * pkin(1) + t641;
t556 = -t640 + t715;
t491 = t624 * t555 - t556 * t620;
t530 = -t590 * t620 - t624 * t591;
t656 = t620 * t666;
t655 = t624 * t666;
t654 = -qJ(2) * t586 + t583 * t724;
t584 = -t620 * t626 + t671;
t652 = pkin(6) * t584 + g(3) * t620;
t585 = t624 * t626 + t673;
t651 = -pkin(6) * t585 + g(3) * t624;
t649 = -t717 - t720;
t344 = -t622 * t380 + t618 * t381;
t345 = t618 * t380 + t622 * t381;
t522 = t631 + t718;
t467 = t522 * t623 - t619 * t659;
t468 = -t522 * t619 - t623 * t659;
t486 = t555 * t620 + t556 * t624;
t647 = t596 * t619 + t696;
t646 = -t594 * t623 + t695;
t529 = t590 * t624 - t591 * t620;
t644 = -t665 - t706;
t643 = t511 - t705;
t639 = (-qJD(6) + t593) * t518 - t658;
t637 = (-qJD(5) + t602) * t573 - t657;
t610 = 0.2e1 * t675;
t636 = t610 + t638;
t629 = -t630 + t718;
t628 = -qJDD(3) * pkin(3) - t629;
t627 = 0.2e1 * (-qJD(2) + t678) * qJD(1) - t579 * pkin(3) + t635 + t725;
t587 = t609 - t689;
t570 = t681 * t677;
t554 = -t568 + t598;
t553 = t567 - t598;
t552 = qJDD(3) * t624 - t570 * t620;
t551 = qJDD(3) * t620 + t570 * t624;
t550 = -t580 * t619 - t616 * t677;
t549 = t579 * t623 - t615 * t677;
t542 = (t580 - t606) * t623;
t532 = (t579 + t660) * t619;
t531 = -pkin(2) * t583 + qJDD(1) * t649;
t527 = t568 - t567;
t526 = -t586 * t624 - t699;
t524 = -t568 - t598;
t521 = pkin(6) * t526;
t520 = t578 * t623 - t581 * t619;
t519 = -t578 * t619 - t581 * t623;
t513 = -t598 - t567;
t509 = -t549 * t620 - t655;
t508 = -t550 * t620 + t655;
t507 = t549 * t624 - t656;
t506 = t550 * t624 + t656;
t498 = -t567 - t568;
t497 = -t515 + t592;
t496 = t514 - t592;
t485 = (-t571 * t622 + t573 * t618) * t602;
t484 = (t571 * t618 + t573 * t622) * t602;
t483 = -t519 * t620 + t587 * t624;
t482 = t519 * t624 + t587 * t620;
t481 = -t515 - t592;
t480 = -t628 + t683;
t479 = t610 - t634;
t473 = (qJD(5) + t602) * t573 + t657;
t472 = t511 * t622 - t573 * t691;
t471 = -t511 * t618 - t573 * t690;
t470 = -t510 * t618 + t571 * t690;
t469 = -t510 * t622 - t571 * t691;
t466 = qJ(4) * t682 + t628;
t464 = -t484 * t623 - t569 * t619;
t463 = pkin(3) * t682 + t636;
t462 = t515 - t514;
t461 = t553 * t622 - t708;
t460 = -t554 * t618 + t738;
t459 = -t553 * t618 - t707;
t458 = -t554 * t622 - t740;
t457 = t627 + t702;
t456 = -t524 * t618 - t707;
t455 = t524 * t622 - t708;
t454 = -t592 - t514;
t453 = -t468 - t722;
t452 = t659 - t729;
t451 = t522 - t730;
t450 = t513 * t622 - t740;
t449 = t513 * t618 + t738;
t445 = -t728 + (-t578 + t579) * pkin(3) + t632;
t444 = (t580 + t581) * qJ(4) + t627;
t439 = (-t516 * t621 + t518 * t617) * t593;
t438 = (-t516 * t617 - t518 * t621) * t593;
t437 = -pkin(2) * t578 - t685 - t742;
t436 = pkin(2) * t581 + t687 + t735;
t435 = t467 * t620 - t548 * t624;
t434 = -t467 * t624 - t548 * t620;
t433 = -t469 * t623 + t668;
t432 = -t471 * t623 - t668;
t431 = -t514 - t515;
t427 = -qJD(6) * t518 - t658;
t426 = t479 * t623 - t480 * t619;
t425 = t479 * t619 + t480 * t623;
t424 = -t477 * t618 + t622 * t637;
t423 = -t473 * t622 - t618 * t643;
t422 = t477 * t622 + t618 * t637;
t421 = t473 * t618 - t622 * t643;
t420 = (-t595 - t625) * qJ(4) + (t588 - qJDD(3)) * pkin(3) - t629 + t730;
t419 = qJ(4) * t589 + (-t597 - t625) * pkin(3) + t636 + t729;
t418 = -t459 * t623 - t619 * t637;
t417 = -t458 * t623 + t477 * t619;
t416 = t496 * t621 - t710;
t415 = -t497 * t617 + t739;
t414 = t496 * t617 + t709;
t413 = t497 * t621 + t741;
t412 = pkin(2) * t467 - qJ(2) * t468;
t411 = t455 * t619 + t623 * t643;
t410 = -t455 * t623 + t619 * t643;
t409 = -t481 * t617 - t709;
t408 = t481 * t621 - t710;
t407 = t449 * t619 + t473 * t623;
t406 = -t449 * t623 + t473 * t619;
t405 = -t463 * t623 - t466 * t619 - t722;
t404 = -t421 * t623 - t527 * t619;
t402 = t665 - t706;
t398 = (qJD(6) + t593) * t518 + t658;
t397 = -pkin(2) * t548 - t468 * t724;
t396 = -t518 * t693 - t621 * t665;
t395 = t518 * t692 - t617 * t665;
t394 = -t427 * t617 + t516 * t692;
t393 = t427 * t621 + t516 * t693;
t392 = t454 * t621 - t741;
t391 = t454 * t617 + t739;
t390 = t422 * t619 + t498 * t623;
t389 = -t422 * t623 + t498 * t619;
t388 = -t619 * t444 + (-pkin(2) - t720) * t581 - t735;
t387 = -t623 * t445 + (pkin(2) + t717) * t578 + t742;
t385 = -t438 * t618 + t439 * t622;
t384 = -t438 * t622 - t439 * t618;
t383 = t425 * t620 - t457 * t624;
t382 = -t425 * t624 - t457 * t620;
t379 = -t384 * t623 - t565 * t619;
t378 = t410 * t620 + t456 * t624;
t377 = -t410 * t624 + t456 * t620;
t376 = t406 * t620 + t450 * t624;
t375 = -t406 * t624 + t450 * t620;
t374 = pkin(4) * t422 - qJ(4) * t424;
t373 = -t414 * t618 + t416 * t622;
t372 = -t413 * t618 + t415 * t622;
t371 = -t414 * t622 - t416 * t618;
t370 = -t413 * t622 - t415 * t618;
t368 = -t408 * t618 + t409 * t622;
t367 = t408 * t622 + t409 * t618;
t366 = t389 * t620 + t424 * t624;
t365 = -t389 * t624 + t424 * t620;
t362 = pkin(4) * t643 - t456 * t723 + t688;
t361 = pkin(4) * t473 - t450 * t723 - t686;
t360 = -t402 * t617 + t621 * t639;
t359 = -t398 * t621 - t617 * t644;
t358 = t402 * t621 + t617 * t639;
t357 = -t398 * t617 + t621 * t644;
t356 = -pkin(9) * t408 - t711;
t355 = -t395 * t618 + t396 * t622;
t354 = -t393 * t618 + t394 * t622;
t353 = -t395 * t622 - t396 * t618;
t352 = -t393 * t622 - t394 * t618;
t351 = -t391 * t618 + t392 * t622;
t350 = t391 * t622 + t392 * t618;
t349 = -pkin(9) * t391 - t712;
t348 = pkin(4) * t455 - qJ(4) * t456 - t381;
t347 = pkin(2) * t425 + pkin(3) * t480 - qJ(2) * t426 + qJ(4) * t479;
t346 = pkin(4) * t449 - qJ(4) * t450 - t380;
t343 = -t352 * t623 + t670;
t342 = -t353 * t623 - t670;
t341 = -t371 * t623 - t619 * t639;
t340 = -t370 * t623 + t402 * t619;
t339 = t367 * t619 + t623 * t644;
t338 = -t367 * t623 + t619 * t644;
t337 = -t724 * t426 + (-pkin(2) + t649) * t457;
t336 = -pkin(5) * t644 + pkin(9) * t409 - t712;
t335 = t344 * t619 - t442 * t623;
t334 = -t344 * t623 - t442 * t619;
t333 = t350 * t619 + t398 * t623;
t332 = -t350 * t623 + t398 * t619;
t331 = -pkin(5) * t398 + pkin(9) * t392 + t711;
t328 = pkin(2) * t410 - qJ(2) * t411 + qJ(4) * t643 - t455 * t723 - t686;
t326 = pkin(2) * t406 - qJ(2) * t407 + qJ(4) * t473 - t449 * t723 - t688;
t325 = -t358 * t618 + t360 * t622;
t324 = -t357 * t618 + t359 * t622;
t323 = t358 * t622 + t360 * t618;
t322 = -t357 * t622 - t359 * t618;
t321 = pkin(4) * t498 - t424 * t723 - t345;
t320 = -t322 * t623 - t462 * t619;
t319 = t338 * t620 + t368 * t624;
t318 = -t338 * t624 + t368 * t620;
t317 = t323 * t619 + t431 * t623;
t316 = -t323 * t623 + t431 * t619;
t315 = pkin(4) * t344 - qJ(4) * t345;
t314 = t332 * t620 + t351 * t624;
t313 = -t332 * t624 + t351 * t620;
t312 = -pkin(4) * t442 - t345 * t723;
t311 = t334 * t620 + t345 * t624;
t310 = -t334 * t624 + t345 * t620;
t309 = pkin(2) * t456 - t619 * t348 - t623 * t362 - t411 * t724;
t308 = pkin(2) * t389 - qJ(2) * t390 + qJ(4) * t498 - t422 * t723 - t344;
t307 = pkin(2) * t450 - t619 * t346 - t623 * t361 - t407 * t724;
t304 = pkin(4) * t367 + pkin(5) * t408 - qJ(4) * t368 - t330;
t303 = pkin(5) * t386 + pkin(9) * t306;
t302 = pkin(2) * t424 - t623 * t321 - t619 * t374 - t390 * t724;
t301 = t316 * t620 + t325 * t624;
t300 = -t316 * t624 + t325 * t620;
t299 = pkin(4) * t350 + pkin(5) * t391 - qJ(4) * t351 - t329;
t298 = -pkin(9) * t358 - t305;
t297 = pkin(4) * t644 - t622 * t336 - t618 * t356 - t368 * t723;
t296 = -pkin(5) * t431 + pkin(9) * t360 + t306;
t295 = pkin(4) * t323 + pkin(5) * t358 - qJ(4) * t325;
t294 = pkin(4) * t398 - t622 * t331 - t618 * t349 - t351 * t723;
t293 = pkin(2) * t334 - qJ(2) * t335 - qJ(4) * t442 - t344 * t723;
t292 = t306 * t622 - t714;
t291 = t306 * t618 + t713;
t290 = pkin(2) * t338 - qJ(2) * t339 + qJ(4) * t644 - t618 * t336 + t622 * t356 - t367 * t723;
t289 = t291 * t619 - t386 * t623;
t288 = -t291 * t623 - t386 * t619;
t287 = pkin(2) * t332 - qJ(2) * t333 + qJ(4) * t398 - t618 * t331 + t622 * t349 - t350 * t723;
t286 = pkin(2) * t345 - t623 * t312 - t619 * t315 - t335 * t724;
t285 = pkin(2) * t368 - t623 * t297 - t619 * t304 - t339 * t724;
t284 = pkin(2) * t351 - t623 * t294 - t619 * t299 - t333 * t724;
t283 = pkin(4) * t431 - t622 * t296 - t618 * t298 - t325 * t723;
t282 = t288 * t620 + t292 * t624;
t281 = -t288 * t624 + t292 * t620;
t280 = pkin(4) * t291 + pkin(5) * t305 - qJ(4) * t292;
t279 = pkin(2) * t316 - qJ(2) * t317 + qJ(4) * t431 - t618 * t296 + t622 * t298 - t323 * t723;
t278 = -pkin(4) * t386 + pkin(9) * t714 - t292 * t723 - t622 * t303;
t277 = pkin(2) * t325 - t623 * t283 - t619 * t295 - t317 * t724;
t276 = pkin(2) * t288 - pkin(9) * t713 - qJ(2) * t289 - qJ(4) * t386 - t291 * t723 - t618 * t303;
t275 = pkin(2) * t292 - t623 * t278 - t619 * t280 - t289 * t724;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t585, -t584, 0, t530, 0, 0, 0, 0, 0, 0, 0, t585, t584, t491, 0, 0, 0, 0, 0, 0, -t492, -t495, t526, t435, 0, 0, 0, 0, 0, 0, t526, t492, t495, t383, 0, 0, 0, 0, 0, 0, t376, t378, t366, t311, 0, 0, 0, 0, 0, 0, t314, t319, t301, t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t584, -t585, 0, t529, 0, 0, 0, 0, 0, 0, 0, -t584, t585, t486, 0, 0, 0, 0, 0, 0, t488, t489, t525, t434, 0, 0, 0, 0, 0, 0, t525, -t488, -t489, t382, 0, 0, 0, 0, 0, 0, t375, t377, t365, t310, 0, 0, 0, 0, 0, 0, t313, t318, t300, t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t541, -t544, 0, t468, 0, 0, 0, 0, 0, 0, 0, -t541, t544, t426, 0, 0, 0, 0, 0, 0, t407, t411, t390, t335, 0, 0, 0, 0, 0, 0, t333, t339, t317, t289; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t584, 0, -t585, 0, -t652, -t651, -t529, -pkin(6) * t529, 0, -t584, t585, 0, 0, 0, -t486, t652, t651, -pkin(6) * t486 + (-pkin(1) * t620 + qJ(2) * t624) * g(3), t508, t483, -t734, t509, t732, t552, -t437 * t620 + t451 * t624 - t746, -t436 * t620 + t452 * t624 - t745, -pkin(2) * t698 - t453 * t620 - t719, -pkin(6) * t434 - t397 * t620 + t412 * t624, t552, t734, -t732, t508, t483, t509, -t405 * t620 + t531 * t624 - t719, -t387 * t620 + t420 * t624 + t746, -t388 * t620 + t419 * t624 + t745, -pkin(6) * t382 - t337 * t620 + t347 * t624, -t432 * t620 + t472 * t624, -t404 * t620 + t423 * t624, -t417 * t620 + t460 * t624, -t433 * t620 + t470 * t624, -t418 * t620 + t461 * t624, -t464 * t620 + t485 * t624, -pkin(6) * t375 - t307 * t620 + t326 * t624, -pkin(6) * t377 - t309 * t620 + t328 * t624, -pkin(6) * t365 - t302 * t620 + t308 * t624, -pkin(6) * t310 - t286 * t620 + t293 * t624, -t342 * t620 + t355 * t624, -t320 * t620 + t324 * t624, -t340 * t620 + t372 * t624, -t343 * t620 + t354 * t624, -t341 * t620 + t373 * t624, -t379 * t620 + t385 * t624, -pkin(6) * t313 - t284 * t620 + t287 * t624, -pkin(6) * t318 - t285 * t620 + t290 * t624, -pkin(6) * t300 - t277 * t620 + t279 * t624, -pkin(6) * t281 - t275 * t620 + t276 * t624; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t585, 0, t584, 0, t651, -t652, t530, pkin(6) * t530, 0, -t585, -t584, 0, 0, 0, t491, -t651, t652, pkin(6) * t491 + (pkin(1) * t624 + qJ(2) * t620) * g(3), t506, t482, t733, t507, -t731, t551, t437 * t624 + t451 * t620 - t744, t436 * t624 + t452 * t620 - t743, -pkin(2) * t699 + t453 * t624 + t521, pkin(6) * t435 + t397 * t624 + t412 * t620, t551, -t733, t731, t506, t482, t507, t405 * t624 + t531 * t620 + t521, t387 * t624 + t420 * t620 + t744, t388 * t624 + t419 * t620 + t743, pkin(6) * t383 + t337 * t624 + t347 * t620, t432 * t624 + t472 * t620, t404 * t624 + t423 * t620, t417 * t624 + t460 * t620, t433 * t624 + t470 * t620, t418 * t624 + t461 * t620, t464 * t624 + t485 * t620, pkin(6) * t376 + t307 * t624 + t326 * t620, pkin(6) * t378 + t309 * t624 + t328 * t620, pkin(6) * t366 + t302 * t624 + t308 * t620, pkin(6) * t311 + t286 * t624 + t293 * t620, t342 * t624 + t355 * t620, t320 * t624 + t324 * t620, t340 * t624 + t372 * t620, t343 * t624 + t354 * t620, t341 * t624 + t373 * t620, t379 * t624 + t385 * t620, pkin(6) * t314 + t284 * t624 + t287 * t620, pkin(6) * t319 + t285 * t624 + t290 * t620, pkin(6) * t301 + t277 * t624 + t279 * t620, pkin(6) * t282 + t275 * t624 + t276 * t620; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t590, t591, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t650 - 0.2e1 * t715, -t591 + t611 + 0.2e1 * t614, pkin(1) * t556 + qJ(2) * t555, t542, t520, -t647, t532, -t646, 0, -qJ(2) * t578 - t687 + t737, qJ(2) * t581 - t685 + t736, -t467 + t654, -qJ(2) * t548 - t467 * t724, 0, t647, t646, t542, t520, t532, -t463 * t619 + t466 * t623 + t654, -t619 * t445 + (qJ(2) - t716) * t578 - t737, t623 * t444 + (-qJ(2) - t721) * t581 - t736, -t724 * t425 + (-qJ(2) - t648) * t457, -t471 * t619 + t667, -t421 * t619 + t527 * t623, -t458 * t619 - t477 * t623, -t469 * t619 - t667, -t459 * t619 + t623 * t637, -t484 * t619 + t569 * t623, qJ(2) * t450 + t623 * t346 - t619 * t361 - t406 * t724, qJ(2) * t456 + t623 * t348 - t619 * t362 - t410 * t724, qJ(2) * t424 - t619 * t321 + t623 * t374 - t389 * t724, qJ(2) * t345 - t619 * t312 + t623 * t315 - t334 * t724, -t353 * t619 + t669, -t322 * t619 + t462 * t623, -t370 * t619 - t402 * t623, -t352 * t619 - t669, -t371 * t619 + t623 * t639, -t384 * t619 + t565 * t623, qJ(2) * t351 - t619 * t294 + t623 * t299 - t332 * t724, qJ(2) * t368 - t619 * t297 + t623 * t304 - t338 * t724, qJ(2) * t325 - t619 * t283 + t623 * t295 - t316 * t724, qJ(2) * t292 - t619 * t278 + t623 * t280 - t288 * t724;];
tauB_reg  = t1;
