% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR12_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR12_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR12_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR12_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR12_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRR12_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:20:04
% EndTime: 2019-03-09 04:20:14
% DurationCPUTime: 6.45s
% Computational Cost: add. (7276->581), mult. (13399->709), div. (0->0), fcn. (7907->10), ass. (0->284)
t227 = -pkin(1) - pkin(7);
t374 = pkin(4) - t227;
t217 = sin(qJ(6));
t218 = sin(qJ(5));
t221 = cos(qJ(6));
t222 = cos(qJ(5));
t134 = t217 * t222 + t218 * t221;
t223 = cos(qJ(3));
t313 = t223 * qJD(1);
t306 = qJD(5) + qJD(6);
t65 = t306 * t134;
t370 = t134 * t313 + t65;
t322 = qJD(3) * t218;
t219 = sin(qJ(3));
t325 = qJD(1) * t219;
t129 = -t222 * t325 + t322;
t320 = qJD(3) * t222;
t131 = t218 * t325 + t320;
t259 = t129 * t217 - t221 * t131;
t57 = t221 * t129 + t131 * t217;
t375 = t57 * t259;
t346 = t218 * t223;
t253 = -pkin(5) * t219 - pkin(9) * t346;
t318 = qJD(5) * t218;
t226 = -pkin(3) - pkin(8);
t373 = pkin(9) - t226;
t136 = pkin(3) * t313 + qJ(4) * t325;
t92 = pkin(8) * t313 + t136;
t164 = qJD(1) * t227 + qJD(2);
t138 = t219 * t164;
t97 = -pkin(4) * t325 + t138;
t46 = -t218 * t92 + t222 * t97;
t404 = -qJD(1) * t253 + t373 * t318 - t46;
t143 = t373 * t222;
t296 = t222 * t313;
t47 = t218 * t97 + t222 * t92;
t403 = pkin(9) * t296 + qJD(5) * t143 + t47;
t311 = qJD(1) * qJD(3);
t287 = t223 * t311;
t307 = t219 * qJDD(1);
t246 = t287 + t307;
t333 = pkin(3) * t325 + qJD(1) * qJ(2);
t107 = -qJ(4) * t313 + t333;
t224 = cos(qJ(1));
t205 = g(2) * t224;
t220 = sin(qJ(1));
t392 = g(1) * t220 - t205;
t402 = -qJD(1) * t107 - t392;
t229 = qJD(1) ^ 2;
t357 = qJ(2) * t229;
t401 = t392 + t357;
t209 = qJDD(1) * qJ(2);
t317 = qJD(5) * t219;
t400 = qJD(1) * t317 + qJDD(3);
t399 = t259 ^ 2 - t57 ^ 2;
t339 = t222 * t223;
t114 = -t218 * t224 - t220 * t339;
t338 = t223 * t224;
t250 = -t218 * t220 + t222 * t338;
t344 = t219 * t222;
t398 = -g(1) * t114 - g(2) * t250 - g(3) * t344;
t310 = qJD(3) * qJD(5);
t299 = t218 * t400 + t222 * t310;
t236 = -t222 * t246 + t299;
t314 = qJD(6) * t221;
t315 = qJD(6) * t217;
t54 = -t400 * t222 + (t310 - t246) * t218;
t14 = t129 * t314 + t131 * t315 + t217 * t236 + t221 * t54;
t175 = qJD(5) + t313;
t163 = qJD(6) + t175;
t397 = t163 * t57 - t14;
t139 = t223 * t164;
t386 = qJD(4) - t139;
t336 = pkin(4) * t313 + t386;
t75 = qJD(3) * t226 + t336;
t199 = t223 * qJ(4);
t378 = pkin(8) * t219;
t265 = -t199 + t378;
t78 = qJD(1) * t265 + t333;
t37 = -t218 * t78 + t222 * t75;
t27 = -pkin(9) * t131 + t37;
t25 = pkin(5) * t175 + t27;
t38 = t218 * t75 + t222 * t78;
t28 = -pkin(9) * t129 + t38;
t194 = t223 * qJDD(1);
t288 = t219 * t311;
t390 = -t288 + t194;
t128 = -qJDD(5) - t390;
t354 = qJD(5) * t38;
t211 = qJD(1) * qJD(2);
t261 = pkin(3) * t246 + qJ(4) * t288 + t209 + t211;
t279 = qJD(3) * pkin(8) - qJD(4);
t312 = qJ(4) * qJDD(1);
t39 = pkin(8) * t307 + (qJD(1) * t279 - t312) * t223 + t261;
t321 = qJD(3) * t219;
t132 = t164 * t321;
t161 = qJDD(1) * t227 + qJDD(2);
t275 = -t161 * t223 + qJDD(4);
t262 = t132 + t275;
t43 = pkin(4) * t390 + t226 * qJDD(3) + t262;
t9 = -t218 * t39 + t222 * t43 - t354;
t6 = -pkin(5) * t128 + pkin(9) * t54 + t9;
t316 = qJD(5) * t222;
t305 = t218 * t43 + t222 * t39 + t75 * t316;
t8 = -t318 * t78 + t305;
t7 = -pkin(9) * t236 + t8;
t1 = (qJD(6) * t25 + t7) * t221 + t217 * t6 - t28 * t315;
t216 = qJ(5) + qJ(6);
t196 = sin(t216);
t204 = g(3) * t219;
t212 = qJD(3) * qJ(4);
t80 = t212 + t97;
t55 = pkin(5) * t129 + t80;
t197 = cos(t216);
t87 = -t196 * t338 - t197 * t220;
t341 = t220 * t223;
t89 = -t196 * t341 + t197 * t224;
t396 = g(1) * t89 - g(2) * t87 + t196 * t204 + t55 * t57 - t1;
t362 = t221 * t28;
t11 = t217 * t25 + t362;
t2 = -qJD(6) * t11 - t217 * t7 + t221 * t6;
t86 = t196 * t220 - t197 * t338;
t88 = -t196 * t224 - t197 * t341;
t395 = -g(1) * t88 + g(2) * t86 - t197 * t204 + t55 * t259 + t2;
t237 = qJD(6) * t259 + t217 * t54 - t221 * t236;
t394 = -t163 * t259 + t237;
t393 = t175 * t38 + t9;
t340 = t221 * t222;
t348 = t217 * t218;
t258 = -t340 + t348;
t94 = t258 * t223;
t214 = t219 ^ 2;
t215 = t223 ^ 2;
t327 = t214 + t215;
t281 = t327 * t161;
t254 = t129 * t175;
t391 = -t246 * t218 + t254;
t319 = qJD(3) * t223;
t292 = t218 * t319;
t389 = t219 * t316 + t292;
t303 = 0.2e1 * t211;
t388 = t303 + 0.2e1 * t209;
t385 = t226 * t128 - t175 * t80;
t384 = t14 * t258 + t259 * t370;
t369 = -t217 * t318 - t218 * t315 + t221 * t296 + t306 * t340 - t313 * t348;
t383 = -t134 * t237 + t369 * t57;
t280 = qJD(3) * pkin(3) - qJD(4);
t104 = -t139 - t280;
t110 = -t138 - t212;
t137 = t219 * t161;
t207 = qJDD(3) * qJ(4);
t210 = qJD(3) * qJD(4);
t63 = -t164 * t319 - t137 - t207 - t210;
t353 = qJDD(3) * pkin(3);
t64 = t262 - t353;
t235 = -t63 * t219 - t64 * t223 + (t104 * t219 - t110 * t223) * qJD(3);
t331 = t219 * pkin(3) - t199;
t140 = qJ(2) + t331;
t308 = qJDD(3) * t227;
t382 = (qJD(1) * t140 + t107) * qJD(3) + t308;
t363 = t218 * t37;
t264 = -t222 * t38 + t363;
t381 = -qJD(5) * t264 + t8 * t218 + t9 * t222;
t364 = t217 * t28;
t10 = t221 * t25 - t364;
t298 = g(1) * t341 - g(2) * t338 - t204;
t380 = t1 * t134 - t10 * t370 + t11 * t369 - t2 * t258 + t298;
t376 = g(3) * t223;
t141 = t373 * t218;
t69 = t141 * t217 - t143 * t221;
t372 = qJD(6) * t69 + t217 * t404 - t221 * t403;
t70 = -t141 * t221 - t143 * t217;
t371 = -qJD(6) * t70 + t217 * t403 + t221 * t404;
t366 = t175 * t37;
t361 = -t134 * qJD(1) - t223 * t65 + t258 * t321;
t95 = t134 * t219;
t360 = -t258 * qJD(1) - qJD(3) * t95 - t306 * t94;
t185 = pkin(5) * t222 + pkin(4);
t359 = pkin(5) * t316 + t185 * t313 + t386;
t271 = -t331 - t378;
t119 = qJ(2) - t271;
t144 = t374 * t223;
t122 = t218 * t144;
t62 = t222 * t119 + t122;
t358 = pkin(1) * qJDD(1);
t356 = qJ(4) * t219;
t355 = qJD(3) * t80;
t352 = t128 * t218;
t351 = t128 * t223;
t350 = t131 * t129;
t349 = t131 * t175;
t347 = t218 * t219;
t345 = t219 * t220;
t343 = t219 * t224;
t342 = t219 * t229;
t335 = pkin(3) * t341 + qJ(4) * t345;
t200 = t224 * qJ(2);
t334 = pkin(3) * t343 + t200;
t332 = (t303 + t209) * qJ(2);
t330 = t224 * pkin(1) + t220 * qJ(2);
t328 = t214 - t215;
t324 = qJD(3) * t129;
t323 = qJD(3) * t131;
t309 = qJDD(3) * t219;
t302 = t227 * t220;
t301 = t217 * t347;
t300 = t219 * t340;
t297 = t224 * pkin(7) + t330;
t295 = t129 * t319;
t294 = t175 * t318;
t291 = t222 * t319;
t290 = pkin(3) * t319 + qJ(4) * t321 + qJD(2);
t181 = pkin(5) * t218 + qJ(4);
t285 = -pkin(9) * t219 - t119;
t124 = t374 * t321;
t76 = t223 * t279 + t290;
t282 = -t222 * t124 - t218 * t76;
t145 = t327 * qJDD(1);
t277 = qJDD(2) - t358;
t276 = qJD(5) * t223 + qJD(1);
t228 = qJD(3) ^ 2;
t149 = qJDD(3) * t223 - t228 * t219;
t274 = pkin(3) * t345 + t297;
t118 = -qJDD(6) + t128;
t273 = t258 * t118 - t163 * t370;
t272 = t219 * t287;
t125 = t374 * t319;
t270 = g(1) * t224 + g(2) * t220;
t266 = -pkin(3) * t223 - t356;
t123 = t222 * t144;
t45 = pkin(5) * t223 + t218 * t285 + t123;
t52 = pkin(9) * t344 + t62;
t20 = -t217 * t52 + t221 * t45;
t21 = t217 * t45 + t221 * t52;
t257 = t323 - t352;
t256 = t175 ^ 2;
t252 = -qJ(4) * t338 + t334;
t225 = -pkin(9) - pkin(8);
t251 = -pkin(5) * t346 - t219 * t225;
t249 = -t175 * t316 + t352;
t248 = t118 * t134 - t163 * t369;
t23 = -t119 * t318 - t218 * t124 + t144 * t316 + t222 * t76;
t247 = 0.2e1 * qJ(2) * t311 + t308;
t245 = -t227 * t228 - t270;
t244 = -t145 * t227 + t392;
t243 = -t218 * t317 + t291;
t241 = t107 * t313 + t275 + t298;
t239 = -t251 + t199;
t238 = -t219 * t392 - t376;
t44 = -pkin(4) * t246 - t63;
t234 = t245 + t388;
t48 = (-qJD(1) * qJD(4) - t312) * t223 + t261;
t90 = -qJD(4) * t223 + t290;
t233 = -qJD(1) * t90 - qJDD(1) * t140 - t245 - t48;
t232 = -qJD(5) * t226 * t175 + t238 + t44;
t187 = t219 * t227;
t170 = t223 * t342;
t150 = t328 * t229;
t148 = t223 * t228 + t309;
t142 = -pkin(4) * t219 + t187;
t121 = qJDD(1) * t215 - 0.2e1 * t272;
t120 = qJDD(1) * t214 + 0.2e1 * t272;
t117 = t149 - t342;
t116 = t309 + (t228 + t229) * t223;
t115 = -t218 * t341 + t222 * t224;
t113 = -t218 * t338 - t220 * t222;
t103 = t222 * t128;
t99 = -t185 * t219 + t187;
t96 = t134 * t223;
t93 = -t300 + t301;
t77 = -0.2e1 * t194 * t219 + 0.2e1 * t311 * t328;
t67 = -pkin(5) * t243 - t125;
t59 = -t119 * t218 + t123;
t33 = t217 * t292 + t219 * t65 - t221 * t291;
t31 = -qJD(6) * t300 - t217 * t291 - t221 * t389 + t301 * t306;
t24 = -qJD(5) * t62 + t282;
t22 = pkin(5) * t236 + t44;
t19 = pkin(9) * t243 + t23;
t18 = t253 * qJD(3) + (t222 * t285 - t122) * qJD(5) + t282;
t13 = t221 * t27 - t364;
t12 = -t217 * t27 - t362;
t4 = -qJD(6) * t21 + t18 * t221 - t19 * t217;
t3 = qJD(6) * t20 + t18 * t217 + t19 * t221;
t5 = [0, 0, 0, 0, 0, qJDD(1), t392, t270, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t392 - 0.2e1 * t358, -t270 + t388, -t277 * pkin(1) - g(1) * (-pkin(1) * t220 + t200) - g(2) * t330 + t332, t121, t77, t149, t120, -t148, 0, t219 * t234 + t223 * t247, -t219 * t247 + t223 * t234, t244 - t281, -g(1) * (t200 + t302) - g(2) * t297 + t227 * t281 + t332, 0, -t149, t148, t121, t77, t120, -t235 + t244, t233 * t219 - t223 * t382, t219 * t382 + t233 * t223, t48 * t140 + t107 * t90 - g(1) * (t302 + t252) - g(2) * (-t199 * t220 + t274) + t235 * t227, t131 * t389 - t54 * t347 (t131 * t319 + (-t129 * qJD(5) - t54) * t219) * t222 + (-t295 + (-t131 * qJD(5) - t236) * t219) * t218 (t175 * t322 - t54) * t223 + (-t249 - t323) * t219, -t129 * t243 - t236 * t344 ((t175 + t313) * t320 - t299) * t223 + (-t294 + t324 + (-t128 + t194) * t222) * t219, -t175 * t321 - t351, t24 * t175 - t59 * t128 - t125 * t129 + t142 * t299 - g(1) * t113 - g(2) * t115 + (t9 + (-qJD(1) * t142 - t80) * t320) * t223 + (t80 * t318 - t37 * qJD(3) + (-qJDD(1) * t142 - t44) * t222) * t219, g(1) * t250 - g(2) * t114 - t125 * t131 + t128 * t62 - t142 * t54 - t175 * t23 + (t322 * t80 - t8) * t223 + (qJD(3) * t38 + t44 * t218 + t316 * t80) * t219, -t23 * t129 - t62 * t299 - t24 * t131 + t59 * t54 + (-t363 + (qJD(1) * t62 + t38) * t222) * t319 + ((-t9 - t354) * t218 + (-qJD(5) * t37 + qJDD(1) * t62 + t8) * t222 - t270) * t219, t8 * t62 + t38 * t23 + t9 * t59 + t37 * t24 + t44 * t142 - t80 * t125 - g(1) * (pkin(8) * t343 + t252) - g(2) * (pkin(4) * t224 + t274) + (g(1) * t374 - g(2) * t265) * t220, -t14 * t95 + t259 * t31, t14 * t93 + t237 * t95 + t259 * t33 + t31 * t57, -t118 * t95 - t14 * t223 - t163 * t31 + t259 * t321, -t237 * t93 + t33 * t57, t118 * t93 - t163 * t33 + t223 * t237 + t321 * t57, -t118 * t223 - t163 * t321, -g(1) * t87 - g(2) * t89 - t10 * t321 - t118 * t20 + t163 * t4 + t2 * t223 + t22 * t93 - t237 * t99 + t33 * t55 + t57 * t67, -g(1) * t86 - g(2) * t88 - t1 * t223 + t11 * t321 + t118 * t21 - t14 * t99 - t163 * t3 + t22 * t95 - t259 * t67 - t31 * t55, -t1 * t93 + t10 * t31 - t11 * t33 + t14 * t20 - t2 * t95 + t21 * t237 - t219 * t270 + t259 * t4 - t3 * t57, t1 * t21 + t11 * t3 + t2 * t20 + t10 * t4 + t22 * t99 + t55 * t67 - g(1) * t334 - g(2) * t274 + (g(1) * t239 - g(2) * t185) * t224 + (-g(1) * (-t185 + t227) + g(2) * t239) * t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t229, -t401 + t277, 0, 0, 0, 0, 0, 0, t117, -t116, -t145, t281 - t401, 0, 0, 0, 0, 0, 0, -t145, -t117, t116, t235 + t402, 0, 0, 0, 0, 0, 0, t295 + t219 * t299 + (-t219 * t246 + t351) * t222 + (t218 * t276 + t219 * t320) * t175, -t219 * t54 + t257 * t223 + (-t218 * t321 + t222 * t276) * t175 (t129 * t276 - t131 * t321 - t54 * t223) * t222 + (-t129 * t321 - t131 * t276 + t223 * t236) * t218, t264 * qJD(1) + (t44 + (t218 * t38 + t222 * t37) * qJD(3)) * t219 + (t355 - t381) * t223 - t392, 0, 0, 0, 0, 0, 0, -t118 * t94 - t163 * t361 - t219 * t237 + t319 * t57, -t118 * t96 - t14 * t219 + t163 * t360 - t259 * t319, t14 * t94 - t237 * t96 - t259 * t361 + t360 * t57, -t1 * t96 - t10 * t361 - t11 * t360 + t2 * t94 + t219 * t22 + t319 * t55 - t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, -t150, t194, -t170, -t307, qJDD(3) (t161 - t357) * t223 - t298, t219 * t401 - t137 + t376, 0, 0, qJDD(3), -t194, t307, t170, -t150, -t170, t266 * qJDD(1) + ((-t110 - t212) * t223 + (t104 + t280) * t219) * qJD(1), t136 * t325 + t241 - 0.2e1 * t353, t137 + 0.2e1 * t207 + 0.2e1 * t210 + (qJD(1) * t136 - g(3)) * t223 + t402 * t219, -t64 * pkin(3) - g(1) * t335 + g(3) * t331 - t63 * qJ(4) - t104 * t138 - t107 * t136 - t110 * t386 - t266 * t205, -t218 * t349 - t222 * t54 (t54 + t254) * t218 + (-t349 - t236) * t222, -t294 - t103 + (t131 * t219 - t175 * t346) * qJD(1), t299 * t218 + t222 * t391 (-t129 * t219 - t175 * t339) * qJD(1) + t249, t175 * t325, qJ(4) * t299 - t46 * t175 + t37 * t325 + t336 * t129 + (-qJ(4) * t246 - t385) * t222 + t232 * t218, -qJ(4) * t54 + t336 * t131 + t175 * t47 + t218 * t385 + t232 * t222 - t38 * t325, t47 * t129 + t46 * t131 + (-t38 * t313 + t226 * t54 - t9 + (-t129 * t226 - t38) * qJD(5)) * t222 + (-t226 * t236 - t8 + t37 * t313 + (t131 * t226 + t37) * qJD(5)) * t218 - t298, t44 * qJ(4) - t38 * t47 - t37 * t46 - g(1) * (pkin(8) * t341 + t335) - g(3) * t271 + t336 * t80 - (t223 * t226 - t356) * t205 + t381 * t226, t384, t134 * t14 - t237 * t258 + t259 * t369 + t370 * t57, -t259 * t325 + t273, t383, -t325 * t57 + t248, t163 * t325, t10 * t325 - t118 * t69 + t134 * t22 + t163 * t371 - t181 * t237 + t196 * t238 + t359 * t57 + t369 * t55, -t11 * t325 + t118 * t70 - t14 * t181 - t163 * t372 + t197 * t238 - t22 * t258 - t259 * t359 - t370 * t55, t14 * t69 + t237 * t70 + t259 * t371 - t372 * t57 - t380, t1 * t70 + t2 * t69 + t22 * t181 - g(1) * ((pkin(5) * t347 - t223 * t225) * t220 + t335) - g(3) * (-t251 - t331) + t359 * t55 + t372 * t11 + t371 * t10 - ((-pkin(3) + t225) * t223 - t181 * t219) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, qJDD(3) - t170, -t215 * t229 - t228, qJD(3) * t110 + t132 + t241 - t353, 0, 0, 0, 0, 0, 0, -t218 * t256 - t103 - t324, -t222 * t256 - t257 (-t299 + t349) * t218 + (t54 - t391) * t222, -t355 + t393 * t222 + (t8 - t366) * t218 + t298, 0, 0, 0, 0, 0, 0, -qJD(3) * t57 + t273, qJD(3) * t259 + t248, -t383 - t384, -qJD(3) * t55 + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, -t129 ^ 2 + t131 ^ 2, -t54 + t254, -t350, -t236 + t349, -t128, -t131 * t80 + t393 + t398, g(1) * t115 - g(2) * t113 + t129 * t80 + t366 + (qJD(5) * t78 + t204) * t218 - t305, 0, 0, -t375, t399, t397, t375, t394, -t118, -t12 * t163 + (-t118 * t221 - t131 * t57 - t163 * t315) * pkin(5) + t395, t13 * t163 + (t118 * t217 + t131 * t259 - t163 * t314) * pkin(5) + t396, -t10 * t57 - t11 * t259 - t12 * t259 + t13 * t57 + (t14 * t221 + t237 * t217 + (-t217 * t259 - t221 * t57) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t217 + t2 * t221 - t55 * t131 + (-t10 * t217 + t11 * t221) * qJD(6) + t398) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t375, t399, t397, t375, t394, -t118, t11 * t163 + t395, t10 * t163 + t396, 0, 0;];
tau_reg  = t5;
