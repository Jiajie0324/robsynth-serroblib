% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR12_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR12_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR12_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRR12_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:19:58
% EndTime: 2019-03-09 04:20:08
% DurationCPUTime: 4.30s
% Computational Cost: add. (5837->432), mult. (11535->581), div. (0->0), fcn. (6712->6), ass. (0->224)
t177 = -pkin(1) - pkin(7);
t289 = pkin(4) - t177;
t170 = sin(qJ(6));
t171 = sin(qJ(5));
t173 = cos(qJ(6));
t174 = cos(qJ(5));
t117 = t170 * t174 + t171 * t173;
t175 = cos(qJ(3));
t244 = qJD(1) * t175;
t230 = qJD(5) + qJD(6);
t54 = t230 * t117;
t285 = t117 * t244 + t54;
t243 = qJD(3) * t171;
t172 = sin(qJ(3));
t245 = qJD(1) * t172;
t112 = -t174 * t245 + t243;
t241 = qJD(3) * t174;
t114 = t171 * t245 + t241;
t192 = t112 * t170 - t114 * t173;
t47 = t112 * t173 + t114 * t170;
t290 = t47 * t192;
t256 = t171 * t175;
t187 = -pkin(5) * t172 - pkin(9) * t256;
t238 = qJD(5) * t171;
t176 = -pkin(3) - pkin(8);
t288 = pkin(9) - t176;
t119 = pkin(3) * t244 + qJ(4) * t245;
t84 = pkin(8) * t244 + t119;
t144 = qJD(1) * t177 + qJD(2);
t120 = t172 * t144;
t89 = -pkin(4) * t245 + t120;
t40 = -t171 * t84 + t174 * t89;
t310 = qJD(1) * t187 - t238 * t288 + t40;
t125 = t288 * t174;
t223 = t174 * t244;
t41 = t171 * t89 + t174 * t84;
t309 = pkin(9) * t223 + qJD(5) * t125 + t41;
t308 = t192 ^ 2 - t47 ^ 2;
t236 = qJD(5) * t174;
t193 = (qJD(3) * pkin(8) - qJD(4)) * t175;
t165 = qJD(1) * qJD(2);
t232 = qJD(1) * qJD(3);
t211 = t172 * t232;
t213 = t175 * t232;
t225 = pkin(3) * t213 + qJ(4) * t211 + t165;
t53 = qJD(1) * t193 + t225;
t121 = t175 * t144;
t297 = qJD(4) - t121;
t250 = pkin(4) * t244 + t297;
t66 = qJD(3) * t176 + t250;
t266 = qJ(4) * t175;
t197 = pkin(8) * t172 - t266;
t248 = pkin(3) * t245 + qJD(1) * qJ(2);
t73 = qJD(1) * t197 + t248;
t242 = qJD(3) * t172;
t115 = t144 * t242;
t80 = -pkin(4) * t211 + t115;
t12 = t171 * t80 + t174 * t53 + t236 * t66 - t238 * t73;
t237 = qJD(5) * t172;
t212 = qJD(1) * t237;
t231 = qJD(3) * qJD(5);
t249 = t171 * t212 + t174 * t231;
t185 = t174 * t213 - t249;
t11 = pkin(9) * t185 + t12;
t153 = qJD(5) + t244;
t35 = -t171 * t73 + t174 * t66;
t26 = -pkin(9) * t114 + t35;
t24 = pkin(5) * t153 + t26;
t36 = t171 * t66 + t174 * t73;
t27 = -pkin(9) * t112 + t36;
t276 = t173 * t27;
t6 = t170 * t24 + t276;
t13 = -qJD(5) * t36 - t171 * t53 + t174 * t80;
t68 = -t174 * t212 + (-t213 + t231) * t171;
t8 = -pkin(5) * t211 + pkin(9) * t68 + t13;
t2 = -qJD(6) * t6 - t170 * t11 + t173 * t8;
t166 = qJD(3) * qJ(4);
t75 = t166 + t89;
t44 = pkin(5) * t112 + t75;
t307 = t192 * t44 + t2;
t143 = qJD(6) + t153;
t234 = qJD(6) * t173;
t235 = qJD(6) * t170;
t18 = t112 * t234 + t114 * t235 - t170 * t185 + t173 * t68;
t306 = t143 * t47 - t18;
t1 = (qJD(6) * t24 + t11) * t173 + t170 * t8 - t27 * t235;
t305 = t44 * t47 - t1;
t181 = qJD(6) * t192 + t170 * t68 + t173 * t185;
t304 = -t143 * t192 + t181;
t103 = -t120 - t166;
t264 = t103 * t175;
t164 = qJD(3) * qJD(4);
t240 = qJD(3) * t175;
t93 = -t144 * t240 - t164;
t283 = qJD(3) * pkin(3);
t203 = qJD(4) - t283;
t96 = -t121 + t203;
t303 = qJD(3) * (t172 * (-t96 + t121) + t264) + t93 * t172;
t302 = -t153 * t35 + t12;
t301 = t153 * t36 + t13;
t188 = t112 * t153;
t300 = t68 - t188;
t254 = t173 * t174;
t258 = t170 * t171;
t191 = -t254 + t258;
t86 = t191 * t175;
t299 = pkin(3) * t172 + qJ(2);
t168 = t172 ^ 2;
t169 = t175 ^ 2;
t247 = t168 - t169;
t222 = t171 * t240;
t298 = t172 * t236 + t222;
t296 = t18 * t191 + t192 * t285;
t284 = -t170 * t238 - t171 * t235 + t173 * t223 + t230 * t254 - t244 * t258;
t295 = -t117 * t181 + t284 * t47;
t277 = t171 * t35;
t194 = -t174 * t36 + t277;
t293 = -qJD(5) * t194 + t12 * t171 + t13 * t174;
t278 = t170 * t27;
t5 = t173 * t24 - t278;
t292 = t1 * t117 - t191 * t2 + t284 * t6 - t285 * t5;
t291 = 0.2e1 * t165;
t123 = t288 * t171;
t59 = -t123 * t173 - t125 * t170;
t287 = qJD(6) * t59 - t170 * t309 + t173 * t310;
t58 = t123 * t170 - t125 * t173;
t286 = -qJD(6) * t58 + t170 * t310 + t173 * t309;
t275 = t174 * t68;
t274 = t175 * t75;
t273 = t68 * t175;
t70 = -pkin(4) * t213 - t93;
t272 = t70 * t171;
t271 = t70 * t174;
t269 = -qJD(1) * t117 - t175 * t54 + t191 * t242;
t87 = t117 * t172;
t268 = -qJD(1) * t191 - qJD(3) * t87 - t230 * t86;
t224 = -pkin(5) * t174 - pkin(4);
t267 = pkin(5) * t236 - t224 * t244 + t297;
t105 = t197 + t299;
t126 = t289 * t175;
t106 = t171 * t126;
t52 = t105 * t174 + t106;
t265 = qJD(3) * t75;
t263 = t112 * t172;
t262 = t114 * t112;
t261 = t114 * t171;
t260 = t153 * t175;
t259 = t153 * t176;
t257 = t171 * t172;
t255 = t172 * t174;
t178 = qJD(3) ^ 2;
t253 = t178 * t172;
t252 = t178 * t175;
t179 = qJD(1) ^ 2;
t251 = t179 * qJ(2);
t246 = t178 + t179;
t239 = qJD(4) * t175;
t233 = t114 * qJD(5);
t229 = 0.2e1 * qJD(1);
t228 = t153 * t256;
t227 = t170 * t257;
t226 = t172 * t254;
t221 = t174 * t240;
t220 = t153 * t238;
t219 = t171 * t237;
t217 = t153 * t236;
t216 = pkin(3) * t240 + qJ(4) * t242 + qJD(2);
t214 = t284 * t143;
t210 = -pkin(9) * t172 - t105;
t209 = t285 * t143;
t108 = t289 * t242;
t69 = t193 + t216;
t207 = -t108 * t174 - t171 * t69;
t206 = qJD(1) * t52 + t36;
t122 = -t266 + t299;
t99 = -qJ(4) * t244 + t248;
t202 = qJD(1) * t122 + t99;
t201 = -t114 + t241;
t200 = qJD(5) * t175 + qJD(1);
t199 = t175 * t211;
t109 = t289 * t240;
t107 = t174 * t126;
t39 = pkin(5) * t175 + t171 * t210 + t107;
t42 = pkin(9) * t255 + t52;
t20 = -t170 * t42 + t173 * t39;
t21 = t170 * t39 + t173 * t42;
t195 = t171 * t36 + t174 * t35;
t190 = (-t153 - t244) * t172;
t189 = t153 * t200;
t67 = -qJD(1) * t239 + t225;
t82 = t216 - t239;
t186 = -qJD(1) * t82 + t177 * t178 - t67;
t22 = -t105 * t238 - t108 * t171 + t126 * t236 + t174 * t69;
t184 = -t219 + t221;
t183 = t185 * t171;
t162 = qJ(2) * t291;
t158 = t172 * t177;
t154 = pkin(5) * t171 + qJ(4);
t149 = t175 * t179 * t172;
t138 = t171 * t211;
t137 = -0.2e1 * t199;
t136 = 0.2e1 * t199;
t129 = t246 * t175;
t128 = t246 * t172;
t127 = t247 * t179;
t124 = -pkin(4) * t172 + t158;
t100 = 0.2e1 * t247 * t232;
t91 = t172 * t224 + t158;
t88 = t117 * t175;
t85 = -t226 + t227;
t81 = t99 * t244;
t56 = -pkin(5) * t184 - t109;
t49 = -t105 * t171 + t107;
t38 = -pkin(5) * t185 + t70;
t32 = t170 * t222 + t172 * t54 - t173 * t221;
t30 = -qJD(6) * t226 - t170 * t221 - t173 * t298 + t227 * t230;
t23 = -qJD(5) * t52 + t207;
t17 = pkin(9) * t184 + t22;
t16 = t187 * qJD(3) + (t174 * t210 - t106) * qJD(5) + t207;
t10 = t173 * t26 - t278;
t9 = -t170 * t26 - t276;
t4 = -qJD(6) * t21 + t173 * t16 - t17 * t170;
t3 = qJD(6) * t20 + t170 * t16 + t17 * t173;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t291, t162, t137, t100, -t253, t136, -t252, 0, -t177 * t253 + (qJ(2) * t240 + qJD(2) * t172) * t229, -t177 * t252 + (-qJ(2) * t242 + qJD(2) * t175) * t229, 0, t162, 0, t253, t252, t137, t100, t136, t303, t172 * t186 - t202 * t240, t175 * t186 + t202 * t242, t122 * t67 - t177 * t303 + t82 * t99, t114 * t298 - t257 * t68 (-t112 * t171 + t114 * t174) * t240 + (t183 - t275 + (-t112 * t174 - t261) * qJD(5)) * t172, t172 * t217 - t273 + (-t114 * t172 + (-qJD(1) * t168 + t260) * t171) * qJD(3), -t112 * t184 + t185 * t255, -t153 * t219 - t249 * t175 + (t263 + (-qJD(1) * t247 + t260) * t174) * qJD(3), qJD(3) * t190, t23 * t153 - t109 * t112 + t124 * t249 + (t13 + (-qJD(1) * t124 - t75) * t241) * t175 + (t75 * t238 - t271 + (-qJD(1) * t49 - t35) * qJD(3)) * t172, -t109 * t114 - t124 * t68 - t153 * t22 + (t243 * t75 - t12) * t175 + (qJD(3) * t206 + t236 * t75 + t272) * t172, -t22 * t112 - t52 * t249 - t23 * t114 + t49 * t68 + (t174 * t206 - t277) * t240 + (-qJD(5) * t195 + t12 * t174 - t13 * t171) * t172, -t109 * t75 + t12 * t52 + t124 * t70 + t13 * t49 + t22 * t36 + t23 * t35, -t18 * t87 + t192 * t30, t18 * t85 + t181 * t87 + t192 * t32 + t30 * t47, -t30 * t143 - t18 * t175 + (-qJD(1) * t87 + t192) * t242, -t181 * t85 + t32 * t47, -t32 * t143 + t181 * t175 + (qJD(1) * t85 + t47) * t242 (-t143 - t244) * t242, t143 * t4 + t175 * t2 - t181 * t91 + t32 * t44 + t38 * t85 + t47 * t56 + (-qJD(1) * t20 - t5) * t242, -t1 * t175 - t143 * t3 - t18 * t91 - t30 * t44 + t38 * t87 - t192 * t56 + (qJD(1) * t21 + t6) * t242, -t1 * t85 + t18 * t20 + t181 * t21 + t192 * t4 - t2 * t87 - t3 * t47 + t30 * t5 - t32 * t6, t1 * t21 + t2 * t20 + t3 * t6 + t38 * t91 + t4 * t5 + t44 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t179, -t251, 0, 0, 0, 0, 0, 0, -t128, -t129, 0, -t251, 0, 0, 0, 0, 0, 0, 0, t128, t129, -t99 * qJD(1) - t303, 0, 0, 0, 0, 0, 0, t172 * t249 + t171 * t189 + (t112 * t175 + t153 * t255) * qJD(3), -t172 * t68 + t174 * t189 + (t114 * t175 + t171 * t190) * qJD(3) (t112 * t200 - t114 * t242 - t273) * t174 + (-t112 * t242 - t114 * t200 - t175 * t185) * t171, t194 * qJD(1) + (qJD(3) * t195 + t70) * t172 + (t265 - t293) * t175, 0, 0, 0, 0, 0, 0, -t172 * t181 - t269 * t143 + (t175 * t47 - t245 * t86) * qJD(3), -t172 * t18 + t268 * t143 + (-t175 * t192 - t245 * t88) * qJD(3), t86 * t18 - t181 * t88 - t192 * t269 + t268 * t47, -t1 * t88 + t172 * t38 + t2 * t86 + t240 * t44 - t268 * t6 - t269 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t127, 0, -t149, 0, 0, -t175 * t251, t172 * t251, 0, 0, 0, 0, 0, t149, -t127, -t149 ((-t103 - t166) * t175 + (-t203 + t96) * t172) * qJD(1), t119 * t245 + t81, 0.2e1 * t164 + (t119 * t175 - t172 * t99) * qJD(1), -qJ(4) * t93 - qJD(4) * t103 - t119 * t99 + (t264 + (-t96 - t283) * t172) * t144, -t153 * t261 - t275 (t201 * t244 - t233 - t249) * t174 + (t68 + t188) * t171, -t220 + (-t172 * t201 - t228) * qJD(1), t174 * t188 - t183, -t217 + t138 + (-t174 * t260 - t263) * qJD(1), t153 * t245, qJ(4) * t249 + t272 - t40 * t153 + t250 * t112 + (-t171 * t259 + t174 * t75) * qJD(5) + (t35 * t172 + (t274 + (-t172 * t176 - t266) * qJD(3)) * t174) * qJD(1), -qJ(4) * t68 + t153 * t41 + t271 + t250 * t114 + (-t171 * t75 - t174 * t259) * qJD(5) + (-t172 * t36 + (t176 * t242 - t274) * t171) * qJD(1), t41 * t112 + t40 * t114 + (-t36 * t244 + t176 * t68 - t13 + (-t112 * t176 - t36) * qJD(5)) * t174 + (t176 * t185 - t12 + t35 * t244 + (t114 * t176 + t35) * qJD(5)) * t171, qJ(4) * t70 + t176 * t293 + t250 * t75 - t35 * t40 - t36 * t41, t296, t117 * t18 - t181 * t191 + t192 * t284 + t285 * t47 (qJD(3) * t191 - t192) * t245 - t209, t295, -t214 + (qJD(3) * t117 - t47) * t245, t143 * t245, t117 * t38 - t154 * t181 + t267 * t47 + t284 * t44 - t287 * t143 + (-qJD(3) * t58 + t5) * t245, -t191 * t38 - t154 * t18 - t267 * t192 - t285 * t44 + t286 * t143 + (qJD(3) * t59 - t6) * t245, t18 * t58 + t181 * t59 - t192 * t287 + t286 * t47 - t292, t1 * t59 + t154 * t38 + t2 * t58 + t267 * t44 - t286 * t6 - t287 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, -t169 * t179 - t178, qJD(3) * t103 + t115 + t81, 0, 0, 0, 0, 0, 0, -t220 - qJD(3) * t112 + (-t172 * t241 - t228) * qJD(1), -t153 ^ 2 * t174 - qJD(3) * t114 + t138, t300 * t174 + (t233 + (t114 + t241) * t244 - t249) * t171, t171 * t302 + t174 * t301 - t265, 0, 0, 0, 0, 0, 0 (t191 * t245 - t47) * qJD(3) - t209, -t214 + (t117 * t245 + t192) * qJD(3), -t295 - t296, -qJD(3) * t44 + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262, -t112 ^ 2 + t114 ^ 2, -t300, -t262, t114 * t153 + t185, -t211, -t114 * t75 + t301, t112 * t75 - t302, 0, 0, -t290, t308, t306, t290, t304, -t211, -t143 * t9 + (-t114 * t47 - t143 * t235 - t173 * t211) * pkin(5) + t307, t10 * t143 + (t114 * t192 - t143 * t234 + t170 * t211) * pkin(5) + t305, t10 * t47 - t192 * t6 - t5 * t47 - t192 * t9 + (t170 * t181 + t173 * t18 + (-t170 * t192 - t173 * t47) * qJD(6)) * pkin(5), -t10 * t6 - t5 * t9 + (t1 * t170 - t114 * t44 + t173 * t2 + (-t170 * t5 + t173 * t6) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290, t308, t306, t290, t304, -t211, t143 * t6 + t307, t143 * t5 + t305, 0, 0;];
tauc_reg  = t7;
