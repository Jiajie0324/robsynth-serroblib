% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 23:57
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPR10_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 23:56:21
% EndTime: 2019-05-05 23:56:44
% DurationCPUTime: 17.58s
% Computational Cost: add. (39716->616), mult. (77025->835), div. (0->0), fcn. (49391->8), ass. (0->430)
t727 = sin(qJ(4));
t731 = cos(qJ(4));
t732 = cos(qJ(3));
t788 = qJD(1) * t732;
t692 = qJD(3) * t727 + t731 * t788;
t728 = sin(qJ(3));
t784 = qJD(1) * qJD(3);
t770 = t728 * t784;
t780 = qJDD(1) * t732;
t696 = -t770 + t780;
t764 = -t731 * qJDD(3) + t727 * t696;
t716 = qJD(1) * t728 + qJD(4);
t785 = qJD(4) + t716;
t589 = t692 * t785 + t764;
t690 = -t731 * qJD(3) + t727 * t788;
t749 = -t727 * qJDD(3) - t731 * t696;
t739 = qJD(4) * t690 + t749;
t808 = t690 * t716;
t864 = -t808 - t739;
t821 = t864 * t727;
t531 = t589 * t731 + t821;
t687 = t692 ^ 2;
t837 = t690 ^ 2;
t645 = t687 - t837;
t502 = t531 * t728 + t645 * t732;
t529 = -t589 * t727 + t731 * t864;
t729 = sin(qJ(1));
t733 = cos(qJ(1));
t923 = t502 * t729 - t529 * t733;
t922 = t502 * t733 + t529 * t729;
t836 = t716 ^ 2;
t665 = t837 - t836;
t648 = t692 * t690;
t769 = t732 * t784;
t782 = qJDD(1) * t728;
t695 = -t769 - t782;
t688 = qJDD(4) - t695;
t848 = t648 + t688;
t816 = t848 * t727;
t569 = t665 * t731 - t816;
t590 = (qJD(4) - t716) * t692 + t764;
t523 = t569 * t728 + t590 * t732;
t815 = t848 * t731;
t565 = t665 * t727 + t815;
t921 = t523 * t729 + t565 * t733;
t920 = t523 * t733 - t565 * t729;
t845 = -t808 + t739;
t871 = -t590 * t727 + t845 * t731;
t847 = t687 + t837;
t870 = -t590 * t731 - t845 * t727;
t885 = t728 * t870 + t732 * t847;
t895 = t729 * t871 - t733 * t885;
t919 = pkin(6) * t895;
t897 = t729 * t885 + t733 * t871;
t918 = pkin(6) * t897;
t666 = -t687 + t836;
t765 = -t688 + t648;
t814 = t765 * t727;
t888 = t731 * t666 - t814;
t813 = t765 * t731;
t887 = -t666 * t727 - t813;
t898 = -t728 * t887 - t732 * t845;
t917 = -t729 * t898 + t733 * t888;
t916 = t729 * t888 + t733 * t898;
t631 = t836 + t687;
t551 = t631 * t731 + t816;
t915 = pkin(2) * t551;
t914 = pkin(3) * t551;
t913 = pkin(8) * t551;
t561 = t631 * t727 - t815;
t912 = pkin(8) * t561;
t911 = qJ(2) * t551;
t910 = t551 * t729;
t909 = t551 * t733;
t908 = t561 * t728;
t907 = t561 * t732;
t833 = pkin(7) + pkin(1);
t884 = -t728 * t847 + t732 * t870;
t902 = t833 * t884;
t901 = t833 * t885;
t900 = t531 * t732 - t645 * t728;
t899 = t569 * t732 - t590 * t728;
t896 = -t728 * t845 + t732 * t887;
t894 = pkin(2) * t885 + pkin(3) * t847 + pkin(8) * t870 - qJ(2) * t884;
t893 = pkin(8) * t871;
t844 = -t836 - t837;
t863 = t727 * t844 - t813;
t883 = pkin(2) * t863;
t882 = pkin(3) * t863;
t860 = t731 * t844 + t814;
t881 = pkin(8) * t860;
t880 = pkin(8) * t863;
t879 = qJ(2) * t863;
t876 = t728 * t860;
t875 = t729 * t863;
t874 = t732 * t860;
t873 = t733 * t863;
t872 = t864 * qJ(5);
t835 = 2 * qJD(5);
t742 = (-t690 * t727 - t692 * t731) * t716;
t798 = t716 * t727;
t660 = t692 * t798;
t797 = t716 * t731;
t773 = t690 * t797;
t754 = t660 - t773;
t840 = t688 * t732 - t728 * t754;
t862 = -t729 * t840 + t733 * t742;
t628 = qJD(4) * t692 + t764;
t755 = -t731 * t628 + t690 * t798;
t746 = t628 * t727 + t773;
t774 = t732 * t648;
t841 = -t728 * t746 - t774;
t861 = -t729 * t841 + t733 * t755;
t859 = t729 * t742 + t733 * t840;
t858 = t729 * t755 + t733 * t841;
t726 = sin(qJ(6));
t683 = qJDD(6) - t688;
t730 = cos(qJ(6));
t634 = -t730 * t690 + t692 * t726;
t636 = t690 * t726 + t692 * t730;
t812 = t634 * t636;
t738 = t683 - t812;
t857 = t726 * t738;
t854 = t730 * t738;
t735 = qJD(1) ^ 2;
t851 = t735 * t833;
t536 = -qJD(6) * t634 + t628 * t726 - t730 * t739;
t709 = -qJD(6) + t716;
t616 = t634 * t709;
t850 = t536 + t616;
t706 = g(1) * t729 - t733 * g(2);
t753 = qJDD(2) - t706;
t741 = -qJ(2) * t735 + t753;
t669 = -qJDD(1) * t833 + t741;
t639 = g(3) * t728 + t669 * t732;
t734 = qJD(3) ^ 2;
t832 = pkin(3) * t728;
t759 = -pkin(8) * t732 + t832;
t745 = t735 * t759;
t600 = qJDD(3) * pkin(3) + pkin(8) * t734 - t732 * t745 + t639;
t799 = t716 * t692;
t849 = -pkin(4) * t799 + t600;
t783 = qJD(2) * qJD(1);
t721 = 0.2e1 * t783;
t707 = g(1) * t733 + g(2) * t729;
t723 = qJDD(1) * qJ(2);
t748 = t707 - t723;
t744 = t721 - t748;
t751 = -t696 + t770;
t752 = -t695 + t769;
t581 = pkin(3) * t752 + pkin(8) * t751 + t744 - t851;
t640 = -t732 * g(3) + t728 * t669;
t601 = -t734 * pkin(3) + qJDD(3) * pkin(8) - t728 * t745 + t640;
t526 = t727 * t581 + t731 * t601;
t638 = pkin(4) * t690 - qJ(5) * t692;
t750 = t688 * qJ(5) - t690 * t638 + t716 * t835 + t526;
t586 = t692 * t797 - t727 * t739;
t587 = -t731 * t739 - t660;
t747 = -t587 * t728 + t774;
t843 = t729 * t586 + t733 * t747;
t842 = t733 * t586 - t729 * t747;
t775 = t728 * t648;
t839 = t732 * t746 - t775;
t838 = t688 * t728 + t732 * t754;
t632 = t634 ^ 2;
t633 = t636 ^ 2;
t708 = t709 ^ 2;
t834 = pkin(4) + pkin(5);
t831 = pkin(4) * t628;
t830 = pkin(4) * t731;
t829 = qJ(5) * t731;
t828 = qJDD(1) * pkin(1);
t548 = -t683 - t812;
t827 = t548 * t726;
t826 = t548 * t730;
t818 = t600 * t727;
t817 = t600 * t731;
t724 = t728 ^ 2;
t725 = t732 ^ 2;
t789 = t724 + t725;
t698 = t789 * qJDD(1);
t807 = t698 * t729;
t806 = t698 * t733;
t772 = t728 * t732 * t735;
t703 = qJDD(3) + t772;
t805 = t703 * t728;
t804 = t703 * t732;
t704 = qJDD(3) - t772;
t803 = t704 * t728;
t802 = t704 * t732;
t801 = t709 * t726;
t800 = t709 * t730;
t796 = t724 * t735;
t795 = t725 * t735;
t659 = -pkin(5) * t716 - pkin(9) * t692;
t737 = t849 + t872;
t456 = -t831 - t628 * pkin(5) - t837 * pkin(9) + (t835 + t659) * t692 + t737;
t794 = t726 * t456;
t662 = t748 - 0.2e1 * t783 + t851;
t793 = t728 * t662;
t792 = t730 * t456;
t791 = t732 * t662;
t525 = -t731 * t581 + t727 * t601;
t790 = t847 - t836;
t781 = qJDD(1) * t729;
t779 = qJDD(1) * t733;
t778 = t692 * t835;
t777 = t728 * t812;
t776 = t732 * t812;
t771 = pkin(3) * t732 + pkin(2);
t768 = -qJ(5) * t727 - pkin(3);
t760 = t692 * t638 + qJDD(5) + t525;
t743 = -pkin(4) * t688 + t760;
t480 = qJ(5) * t836 - t743;
t452 = t765 * pkin(5) + pkin(9) * t845 - t480;
t479 = -pkin(4) * t836 + t750;
t455 = -pkin(5) * t837 + pkin(9) * t628 + t659 * t716 + t479;
t413 = -t730 * t452 + t455 * t726;
t462 = t525 * t727 + t731 * t526;
t767 = -t730 * t628 - t726 * t739;
t673 = -pkin(1) * t735 + t744;
t674 = -t741 + t828;
t609 = t733 * t673 - t674 * t729;
t650 = -t706 * t729 - t733 * t707;
t763 = t729 * t772;
t762 = t733 * t772;
t699 = -t729 * t735 + t779;
t758 = pkin(6) * t699 + g(3) * t729;
t700 = t733 * t735 + t781;
t757 = -pkin(6) * t700 + g(3) * t733;
t756 = t732 * t587 + t775;
t414 = t452 * t726 + t455 * t730;
t380 = -t413 * t730 + t414 * t726;
t381 = t413 * t726 + t414 * t730;
t461 = -t525 * t731 + t526 * t727;
t579 = t639 * t732 + t640 * t728;
t580 = -t639 * t728 + t640 * t732;
t606 = t673 * t729 + t674 * t733;
t649 = t706 * t733 - t707 * t729;
t740 = (-qJD(6) - t709) * t636 - t767;
t736 = t737 + t778;
t714 = -t734 - t795;
t713 = t734 - t795;
t712 = -t734 - t796;
t711 = -t734 + t796;
t702 = (-t724 + t725) * t735;
t701 = t789 * t735;
t697 = -0.2e1 * t770 + t780;
t694 = 0.2e1 * t769 + t782;
t689 = t789 * t784;
t664 = -t696 * t728 - t725 * t784;
t663 = -t695 * t732 - t724 * t784;
t657 = -t714 * t728 - t804;
t656 = t712 * t732 - t803;
t655 = t714 * t732 - t805;
t654 = -t713 * t732 - t803;
t653 = t712 * t728 + t802;
t652 = -t711 * t728 - t804;
t644 = -t701 * t733 - t807;
t643 = -t701 * t729 + t806;
t637 = t694 * t728 - t697 * t732;
t613 = -t633 + t708;
t612 = t632 - t708;
t611 = t655 * t729 + t697 * t733;
t610 = t653 * t729 + t694 * t733;
t608 = -t655 * t733 + t697 * t729;
t607 = -t653 * t733 + t694 * t729;
t599 = -t633 - t708;
t595 = t690 * t785 + t749;
t588 = t628 + t799;
t571 = t633 - t632;
t558 = -t708 - t632;
t557 = -pkin(2) * t701 - t580;
t556 = pkin(2) * t655 - qJ(2) * t657 - t640;
t555 = pkin(2) * t653 - qJ(2) * t656 + t639;
t547 = (t634 * t730 - t636 * t726) * t709;
t546 = (-t634 * t726 - t636 * t730) * t709;
t545 = pkin(2) * t694 - t656 * t833 - t791;
t544 = pkin(2) * t697 - t657 * t833 + t793;
t543 = t579 * t729 - t662 * t733;
t542 = -t579 * t733 - t662 * t729;
t537 = -t632 - t633;
t535 = -qJD(6) * t636 - t767;
t519 = t612 * t730 + t827;
t518 = -t613 * t726 + t854;
t517 = -t612 * t726 + t826;
t516 = -t613 * t730 - t857;
t515 = -t817 + t913;
t514 = pkin(2) * t579 - qJ(2) * t580;
t513 = -t818 - t880;
t512 = t588 * t728 + t874;
t511 = -t595 * t728 + t907;
t510 = -t588 * t732 + t876;
t509 = t595 * t732 + t908;
t508 = -t599 * t726 + t826;
t507 = t599 * t730 + t827;
t506 = t589 * t728 + t874;
t505 = -t728 * t864 - t907;
t504 = -t589 * t732 + t876;
t503 = t732 * t864 - t908;
t499 = t536 - t616;
t495 = (qJD(6) - t709) * t636 + t767;
t494 = -pkin(2) * t662 - t580 * t833;
t493 = t536 * t730 + t636 * t801;
t492 = -t536 * t726 + t636 * t800;
t491 = -t535 * t726 - t634 * t800;
t490 = -t535 * t730 + t634 * t801;
t489 = t558 * t730 - t857;
t488 = t558 * t726 + t854;
t483 = t736 - t831;
t482 = -t546 * t727 + t547 * t731;
t481 = t546 * t731 + t547 * t727;
t478 = t526 + t914;
t477 = t525 - t882;
t476 = -t482 * t728 - t683 * t732;
t475 = t510 * t729 + t873;
t474 = t509 * t729 - t909;
t473 = -t510 * t733 + t875;
t472 = -t509 * t733 - t910;
t471 = qJ(5) * t790 + t743;
t470 = t504 * t729 + t873;
t469 = t503 * t729 + t909;
t468 = -t504 * t733 + t875;
t467 = -t503 * t733 + t910;
t466 = -pkin(3) * t871 - pkin(4) * t845 + qJ(5) * t590;
t465 = pkin(4) * t790 + t750;
t464 = (-t588 - t628) * pkin(4) + t736;
t463 = t778 - t831 + t849 + 0.2e1 * t872;
t460 = -t517 * t727 + t519 * t731;
t459 = -t516 * t727 + t518 * t731;
t458 = t517 * t731 + t519 * t727;
t457 = t516 * t731 + t518 * t727;
t454 = t507 * t727 + t508 * t731;
t453 = -t507 * t731 + t508 * t727;
t446 = t462 * t732 - t600 * t728;
t445 = t462 * t728 + t600 * t732;
t444 = t499 * t726 + t730 * t740;
t443 = -t495 * t730 - t726 * t850;
t442 = -t499 * t730 + t726 * t740;
t441 = t495 * t726 - t730 * t850;
t440 = -t492 * t727 + t493 * t731;
t439 = -t490 * t727 + t491 * t731;
t438 = t492 * t731 + t493 * t727;
t437 = t490 * t731 + t491 * t727;
t436 = t488 * t727 + t489 * t731;
t435 = -t488 * t731 + t489 * t727;
t434 = -t882 + (-t844 - t836) * qJ(5) + (t765 - t688) * pkin(4) + t760;
t433 = -t914 - qJ(5) * t848 + (-t631 + t836) * pkin(4) - t750;
t432 = -t461 - t893;
t431 = -t464 * t727 - t588 * t829 - t880;
t430 = -pkin(4) * t821 + t463 * t731 - t913;
t429 = t479 * t731 - t480 * t727;
t428 = t479 * t727 + t480 * t731;
t427 = -t440 * t728 - t776;
t426 = -t439 * t728 + t776;
t425 = -t460 * t728 - t732 * t740;
t424 = -t459 * t728 - t499 * t732;
t423 = t454 * t732 - t728 * t850;
t422 = t454 * t728 + t732 * t850;
t421 = pkin(2) * t509 + pkin(3) * t595 - qJ(2) * t511 - t818 + t912;
t420 = pkin(2) * t504 - pkin(3) * t589 - qJ(2) * t506 + t817 + t881;
t419 = t436 * t732 - t495 * t728;
t418 = t436 * t728 + t495 * t732;
t417 = t445 * t729 + t461 * t733;
t416 = -t445 * t733 + t461 * t729;
t415 = -pkin(9) * t507 + qJ(5) * t850 + t792;
t412 = t429 * t732 - t483 * t728;
t411 = t429 * t728 + t483 * t732;
t410 = -t465 * t727 + t471 * t731 - t893;
t409 = -pkin(9) * t488 + qJ(5) * t495 + t794;
t408 = t442 * t727 + t444 * t731;
t407 = -t441 * t727 + t443 * t731;
t406 = -t442 * t731 + t444 * t727;
t405 = t441 * t731 + t443 * t727;
t404 = -t478 * t732 - t511 * t833 - t515 * t728 - t915;
t403 = -t407 * t728 - t571 * t732;
t402 = pkin(2) * t510 - qJ(2) * t512 + t464 * t731 + t588 * t768 + t881;
t401 = -t477 * t732 - t506 * t833 - t513 * t728 + t883;
t400 = -pkin(9) * t508 + t834 * t850 - t794;
t399 = pkin(2) * t503 - t912 - qJ(2) * t505 + t463 * t727 + (pkin(3) + t830) * t864;
t398 = t422 * t729 + t453 * t733;
t397 = -t422 * t733 + t453 * t729;
t396 = t462 + t894;
t395 = t408 * t732 - t537 * t728;
t394 = t408 * t728 + t537 * t732;
t393 = -pkin(9) * t489 + t495 * t834 + t792;
t392 = -pkin(8) * t428 + (-pkin(4) * t727 + t829) * t483;
t391 = -pkin(3) * t428 - pkin(4) * t480 - qJ(5) * t479;
t390 = t418 * t729 + t435 * t733;
t389 = -t418 * t733 + t435 * t729;
t388 = pkin(2) * t445 + pkin(3) * t600 + pkin(8) * t462 - qJ(2) * t446;
t387 = -t432 * t728 + t771 * t871 - t902;
t386 = t465 * t731 + t471 * t727 + t894;
t385 = t411 * t729 + t428 * t733;
t384 = -t411 * t733 + t428 * t729;
t383 = -t431 * t728 - t434 * t732 - t512 * t833 + t883;
t382 = -t430 * t728 - t433 * t732 - t505 * t833 + t915;
t379 = -pkin(3) * t453 - qJ(5) * t508 + t507 * t834 - t414;
t378 = pkin(2) * t871 - t410 * t728 - t466 * t732 - t902;
t377 = -t833 * t446 + (pkin(8) * t728 + t771) * t461;
t376 = t394 * t729 + t406 * t733;
t375 = -t394 * t733 + t406 * t729;
t374 = -pkin(3) * t435 - qJ(5) * t489 + t488 * t834 - t413;
t373 = -pkin(9) * t380 + qJ(5) * t456;
t372 = -pkin(9) * t442 + qJ(5) * t537 - t380;
t371 = -pkin(8) * t453 - t400 * t727 + t415 * t731;
t370 = -pkin(3) * t406 - qJ(5) * t444 + t442 * t834;
t369 = -pkin(9) * t444 + t537 * t834 - t381;
t368 = -pkin(8) * t435 - t393 * t727 + t409 * t731;
t367 = -pkin(9) * t381 + t456 * t834;
t366 = pkin(2) * t411 + pkin(8) * t429 - qJ(2) * t412 + (-t768 + t830) * t483;
t365 = t380 * t727 + t381 * t731;
t364 = -t380 * t731 + t381 * t727;
t363 = t365 * t732 - t456 * t728;
t362 = t365 * t728 + t456 * t732;
t361 = pkin(2) * t422 + pkin(3) * t850 + pkin(8) * t454 - qJ(2) * t423 + t400 * t731 + t415 * t727;
t360 = pkin(2) * t418 + pkin(3) * t495 + pkin(8) * t436 - qJ(2) * t419 + t393 * t731 + t409 * t727;
t359 = pkin(2) * t428 - t391 * t732 - t392 * t728 - t412 * t833;
t358 = -pkin(8) * t406 - t369 * t727 + t372 * t731;
t357 = pkin(2) * t453 - t371 * t728 - t379 * t732 - t423 * t833;
t356 = pkin(2) * t435 - t368 * t728 - t374 * t732 - t419 * t833;
t355 = t362 * t729 + t364 * t733;
t354 = -t362 * t733 + t364 * t729;
t353 = -pkin(8) * t364 - t367 * t727 + t373 * t731;
t352 = pkin(2) * t394 + pkin(3) * t537 + pkin(8) * t408 - qJ(2) * t395 + t369 * t731 + t372 * t727;
t351 = -pkin(3) * t364 - qJ(5) * t381 + t380 * t834;
t350 = pkin(2) * t406 - t358 * t728 - t370 * t732 - t395 * t833;
t349 = pkin(2) * t362 + pkin(3) * t456 + pkin(8) * t365 - qJ(2) * t363 + t367 * t731 + t373 * t727;
t348 = pkin(2) * t364 - t351 * t732 - t353 * t728 - t363 * t833;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t700, -t699, 0, t650, 0, 0, 0, 0, 0, 0, 0, t700, t699, t609, 0, 0, 0, 0, 0, 0, t610, t611, t644, t543, 0, 0, 0, 0, 0, 0, t470, t474, t897, t417, 0, 0, 0, 0, 0, 0, t475, t897, t469, t385, 0, 0, 0, 0, 0, 0, t390, t398, t376, t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t699, -t700, 0, t649, 0, 0, 0, 0, 0, 0, 0, -t699, t700, t606, 0, 0, 0, 0, 0, 0, t607, t608, t643, t542, 0, 0, 0, 0, 0, 0, t468, t472, t895, t416, 0, 0, 0, 0, 0, 0, t473, t895, t467, t384, 0, 0, 0, 0, 0, 0, t389, t397, t375, t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t656, t657, 0, t580, 0, 0, 0, 0, 0, 0, t506, t511, t884, t446, 0, 0, 0, 0, 0, 0, t512, t884, t505, t412, 0, 0, 0, 0, 0, 0, t419, t423, t395, t363; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t699, 0, -t700, 0, -t758, -t757, -t649, -pkin(6) * t649, 0, -t699, t700, 0, 0, 0, -t606, t758, t757, -pkin(6) * t606 + (-pkin(1) * t729 + qJ(2) * t733) * g(3), -t664 * t729 + t762, -t637 * t729 + t702 * t733, -t654 * t729 + t732 * t779, -t663 * t729 - t762, -t652 * t729 - t728 * t779, qJDD(3) * t733 - t689 * t729, -pkin(6) * t607 - t545 * t729 + t555 * t733, -pkin(6) * t608 - t544 * t729 + t556 * t733, -pkin(2) * t806 - pkin(6) * t643 - t557 * t729, -pkin(6) * t542 - t494 * t729 + t514 * t733, t842, -t923, t917, t861, t921, t862, -pkin(6) * t468 - t401 * t729 + t420 * t733, -pkin(6) * t472 - t404 * t729 + t421 * t733, -t387 * t729 + t396 * t733 - t919, -pkin(6) * t416 - t377 * t729 + t388 * t733, t842, t917, t923, t862, -t921, t861, -pkin(6) * t473 - t383 * t729 + t402 * t733, -t378 * t729 + t386 * t733 - t919, -pkin(6) * t467 - t382 * t729 + t399 * t733, -pkin(6) * t384 - t359 * t729 + t366 * t733, -t427 * t729 + t438 * t733, -t403 * t729 + t405 * t733, -t424 * t729 + t457 * t733, -t426 * t729 + t437 * t733, -t425 * t729 + t458 * t733, -t476 * t729 + t481 * t733, -pkin(6) * t389 - t356 * t729 + t360 * t733, -pkin(6) * t397 - t357 * t729 + t361 * t733, -pkin(6) * t375 - t350 * t729 + t352 * t733, -pkin(6) * t354 - t348 * t729 + t349 * t733; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t700, 0, t699, 0, t757, -t758, t650, pkin(6) * t650, 0, -t700, -t699, 0, 0, 0, t609, -t757, t758, pkin(6) * t609 + (pkin(1) * t733 + qJ(2) * t729) * g(3), t664 * t733 + t763, t637 * t733 + t702 * t729, t654 * t733 + t729 * t780, t663 * t733 - t763, t652 * t733 - t728 * t781, qJDD(3) * t729 + t689 * t733, pkin(6) * t610 + t545 * t733 + t555 * t729, pkin(6) * t611 + t544 * t733 + t556 * t729, -pkin(2) * t807 + pkin(6) * t644 + t557 * t733, pkin(6) * t543 + t494 * t733 + t514 * t729, t843, t922, t916, t858, -t920, t859, pkin(6) * t470 + t401 * t733 + t420 * t729, pkin(6) * t474 + t404 * t733 + t421 * t729, t387 * t733 + t396 * t729 + t918, pkin(6) * t417 + t377 * t733 + t388 * t729, t843, t916, -t922, t859, t920, t858, pkin(6) * t475 + t383 * t733 + t402 * t729, t378 * t733 + t386 * t729 + t918, pkin(6) * t469 + t382 * t733 + t399 * t729, pkin(6) * t385 + t359 * t733 + t366 * t729, t427 * t733 + t438 * t729, t403 * t733 + t405 * t729, t424 * t733 + t457 * t729, t426 * t733 + t437 * t729, t425 * t733 + t458 * t729, t476 * t733 + t481 * t729, pkin(6) * t390 + t356 * t733 + t360 * t729, pkin(6) * t398 + t357 * t733 + t361 * t729, pkin(6) * t376 + t350 * t733 + t352 * t729, pkin(6) * t355 + t348 * t733 + t349 * t729; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t706, t707, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t753 - 0.2e1 * t828, -t707 + t721 + 0.2e1 * t723, pkin(1) * t674 + qJ(2) * t673, -t751 * t732, -t694 * t732 - t697 * t728, -t713 * t728 + t802, t752 * t728, t711 * t732 - t805, 0, qJ(2) * t694 - t653 * t833 - t793, qJ(2) * t697 - t655 * t833 - t791, -qJ(2) * t701 + t698 * t833 - t579, -qJ(2) * t662 - t579 * t833, t756, -t900, t896, t839, t899, t838, -t477 * t728 - t504 * t833 + t513 * t732 + t879, -t478 * t728 - t509 * t833 + t515 * t732 - t911, t432 * t732 + (qJ(2) + t832) * t871 - t901, -t833 * t445 + (qJ(2) + t759) * t461, t756, t896, t900, t838, -t899, t839, t431 * t732 - t434 * t728 - t510 * t833 + t879, qJ(2) * t871 + t410 * t732 - t466 * t728 - t901, t430 * t732 - t433 * t728 - t503 * t833 + t911, qJ(2) * t428 - t391 * t728 + t392 * t732 - t411 * t833, t440 * t732 - t777, t407 * t732 - t571 * t728, t459 * t732 - t499 * t728, t439 * t732 + t777, t460 * t732 - t728 * t740, t482 * t732 - t683 * t728, qJ(2) * t435 + t368 * t732 - t374 * t728 - t418 * t833, qJ(2) * t453 + t371 * t732 - t379 * t728 - t422 * t833, qJ(2) * t406 + t358 * t732 - t370 * t728 - t394 * t833, qJ(2) * t364 - t351 * t728 + t353 * t732 - t362 * t833;];
tauB_reg  = t1;
