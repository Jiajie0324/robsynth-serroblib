% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPR10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR10_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR10_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPR10_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:37:10
% EndTime: 2019-03-09 05:37:20
% DurationCPUTime: 4.07s
% Computational Cost: add. (2736->332), mult. (5869->556), div. (0->0), fcn. (4706->6), ass. (0->167)
t108 = cos(qJ(3));
t105 = sin(qJ(4));
t107 = cos(qJ(4));
t201 = cos(qJ(6));
t152 = qJD(6) * t201;
t104 = sin(qJ(6));
t177 = qJD(6) * t104;
t153 = qJD(4) * t201;
t97 = qJD(4) * t107;
t214 = -t104 * t97 + t105 * t153;
t210 = -t105 * t152 + t107 * t177 + t214;
t215 = t210 * t108;
t100 = t105 ^ 2;
t102 = t107 ^ 2;
t183 = t100 + t102;
t96 = t108 * qJD(3);
t49 = t183 * t96;
t106 = sin(qJ(3));
t143 = t107 * t153;
t180 = qJD(4) * t105;
t191 = t104 * t105;
t63 = t201 * t107 + t191;
t22 = t63 * qJD(6) - t104 * t180 - t143;
t213 = t22 * t106;
t167 = t201 * t105;
t64 = -t104 * t107 + t167;
t42 = t64 * t106;
t184 = t100 - t102;
t109 = -pkin(1) - pkin(7);
t193 = qJ(5) * t107;
t203 = pkin(4) + pkin(5);
t127 = -t203 * t105 + t193;
t212 = t109 + t127;
t188 = t105 * t109;
t151 = -pkin(4) + t188;
t198 = t107 * pkin(3);
t131 = t151 - t198;
t202 = pkin(8) - pkin(9);
t209 = t202 * t108 - qJ(2);
t114 = t209 * t107 + (-pkin(5) + t131) * t106;
t101 = t106 ^ 2;
t103 = t108 ^ 2;
t150 = (t101 - t103) * qJD(3);
t68 = t184 * qJD(4);
t211 = -qJD(4) + qJD(6);
t197 = t108 * pkin(8);
t199 = t106 * pkin(3);
t141 = -t197 + t199;
t130 = qJ(2) + t141;
t187 = t107 * t106;
t80 = t109 * t187;
t196 = t105 * t130 + t80;
t200 = pkin(8) * t106;
t142 = pkin(3) * t108 + t200;
t121 = t142 * qJD(3) + qJD(2);
t48 = t107 * t121;
t115 = -qJD(4) * t196 + t48;
t190 = t105 * qJ(5);
t208 = -t203 * t107 - t190;
t138 = pkin(4) * t105 - t193;
t176 = t105 * qJD(5);
t46 = qJD(4) * t138 - t176;
t194 = t108 * t46;
t129 = -t109 + t138;
t39 = t129 * t108;
t139 = t107 * pkin(4) + t190;
t67 = -pkin(3) - t139;
t207 = (t106 * t67 + t197) * qJD(3) - qJD(4) * t39 - t194;
t174 = t107 * qJD(5);
t206 = t139 * qJD(4) - t174;
t205 = 0.2e1 * qJD(2);
t204 = 0.2e1 * qJD(5);
t195 = pkin(8) * t49;
t192 = qJD(3) * t39;
t189 = t105 * t108;
t186 = t107 * t108;
t185 = t108 * t109;
t181 = t101 + t103;
t179 = qJD(4) * t108;
t178 = qJD(4) * t109;
t175 = t106 * qJD(3);
t173 = -0.2e1 * pkin(3) * qJD(4);
t126 = t107 * t130;
t155 = t109 * t96;
t172 = qJD(4) * t126 + t105 * t121 + t107 * t155;
t27 = t106 * qJ(5) + t196;
t170 = pkin(8) * t180;
t169 = pkin(8) * t97;
t168 = t106 * t188;
t166 = qJ(5) * t96;
t165 = t105 * t179;
t164 = t105 * t178;
t163 = t107 * t179;
t160 = t105 * t97;
t159 = t109 * t175;
t158 = t107 * t175;
t157 = t107 * t96;
t156 = t106 * t96;
t154 = qJD(3) * t201;
t85 = 0.2e1 * t156;
t149 = t201 * t203;
t148 = t105 * t158;
t147 = t103 * t160;
t145 = t108 * t154;
t28 = -t107 * (qJ(2) - t197) + t131 * t106;
t137 = t105 * t28 + t107 * t27;
t136 = t105 * t27 - t107 * t28;
t36 = t126 - t168;
t135 = t105 * t196 + t107 * t36;
t134 = t105 * t36 - t107 * t196;
t132 = t202 * t167;
t111 = -t48 + (t80 + (t199 - t209) * t105) * qJD(4) + (pkin(9) * t187 + (-pkin(5) + t151) * t108) * qJD(3);
t112 = (pkin(9) * t97 + qJ(5) * qJD(3)) * t108 + (qJD(5) + (-pkin(9) * qJD(3) - t178) * t105) * t106 + t172;
t113 = t201 * t114;
t20 = pkin(9) * t189 + t27;
t1 = -qJD(6) * t113 - t104 * t111 - t201 * t112 + t20 * t177;
t66 = t201 * qJ(5) - t104 * t203;
t45 = t63 * t108;
t18 = t206 * t108 - t129 * t175;
t124 = -t18 + (t108 * t67 - t200) * qJD(4);
t123 = qJD(3) * t63;
t15 = t151 * t96 - t115;
t8 = t166 + (qJD(5) - t164) * t106 + t172;
t117 = -qJD(4) * t136 + t15 * t105 + t8 * t107;
t16 = t106 * t164 - t172;
t17 = -t105 * t155 + t115;
t116 = -qJD(4) * t135 - t17 * t105 - t16 * t107;
t6 = t114 * t104 + t201 * t20;
t110 = -t104 * t112 + t201 * t111;
t99 = qJ(2) * t205;
t84 = -0.2e1 * t160;
t83 = 0.2e1 * t160;
t78 = t202 * t107;
t65 = -t104 * qJ(5) - t149;
t60 = pkin(3) - t208;
t55 = -t105 * t175 + t163;
t54 = t105 * t96 + t106 * t97;
t53 = t181 * t97;
t52 = -t158 - t165;
t51 = t106 * t180 - t157;
t50 = t181 * t180;
t44 = t104 * t186 - t108 * t167;
t43 = t63 * t106;
t41 = t104 * qJD(5) + qJD(6) * t66;
t40 = qJ(5) * t177 - t201 * qJD(5) + qJD(6) * t149;
t38 = qJD(4) * t127 + t176;
t35 = -0.2e1 * t102 * t156 - 0.2e1 * t147;
t34 = -0.2e1 * t100 * t156 + 0.2e1 * t147;
t33 = t184 * t179 + t148;
t32 = -t105 * t150 + t106 * t163;
t31 = 0.4e1 * t108 * t160 - t184 * t175;
t30 = t202 * t191 + t201 * t78;
t29 = -t104 * t78 + t132;
t26 = t212 * t108;
t25 = -0.2e1 * t106 * t165 - 0.2e1 * t107 * t150;
t24 = t103 * t68 + 0.2e1 * t108 * t148;
t21 = (-0.1e1 + t183) * t85;
t14 = t78 * t152 + (t211 * t191 - t143) * t202;
t13 = -qJD(6) * t132 + t78 * t177 + t214 * t202;
t12 = t108 * t123 + t211 * t42;
t11 = t106 * t123 + t215;
t10 = -t106 * t105 * t154 + qJD(4) * t45 + t104 * t158 - t152 * t186 - t177 * t189;
t9 = t104 * t157 - t105 * t145 + t213;
t7 = (t208 * qJD(4) + t174) * t108 - t212 * t175;
t5 = -t104 * t20 + t113;
t2 = -qJD(6) * t6 + t110;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, t99, -0.2e1 * t156, 0.2e1 * t150, 0, t85, 0, 0, 0.2e1 * qJ(2) * t96 + 0.2e1 * qJD(2) * t106, -0.2e1 * qJ(2) * t175 + 0.2e1 * qJD(2) * t108, 0, t99, t35, 0.2e1 * t24, t25, t34, -0.2e1 * t32, t85, -0.2e1 * t103 * t107 * t178 + 0.2e1 * t17 * t106 + 0.2e1 * (t36 + 0.2e1 * t168) * t96, 0.2e1 * t103 * t164 + 0.2e1 * t16 * t106 + 0.2e1 * (-t196 + 0.2e1 * t80) * t96, 0.2e1 * t135 * t175 + 0.2e1 * (qJD(4) * t134 + t105 * t16 - t107 * t17) * t108, -0.2e1 * t109 ^ 2 * t156 - 0.2e1 * t16 * t196 + 0.2e1 * t36 * t17, t35, t25, -0.2e1 * t24, t85, 0.2e1 * t32, t34, 0.2e1 * (-t105 * t192 - t15) * t106 + 0.2e1 * (-qJD(3) * t28 + t18 * t105 + t39 * t97) * t108, 0.2e1 * t136 * t175 + 0.2e1 * (-qJD(4) * t137 - t105 * t8 + t107 * t15) * t108, 0.2e1 * (t107 * t192 + t8) * t106 + 0.2e1 * (qJD(3) * t27 - t18 * t107 + t39 * t180) * t108, 0.2e1 * t28 * t15 + 0.2e1 * t39 * t18 + 0.2e1 * t27 * t8, -0.2e1 * t45 * t11, 0.2e1 * t45 * t10 + 0.2e1 * t11 * t44, 0.2e1 * t11 * t106 - 0.2e1 * t45 * t96, -0.2e1 * t44 * t10, -0.2e1 * t10 * t106 + 0.2e1 * t44 * t96, t85, -0.2e1 * t26 * t10 - 0.2e1 * t2 * t106 + 0.2e1 * t7 * t44 - 0.2e1 * t5 * t96, -0.2e1 * t1 * t106 - 0.2e1 * t26 * t11 + 0.2e1 * t7 * t45 + 0.2e1 * t6 * t96, 0.2e1 * t1 * t44 + 0.2e1 * t6 * t10 + 0.2e1 * t5 * t11 - 0.2e1 * t2 * t45, -0.2e1 * t6 * t1 + 0.2e1 * t5 * t2 + 0.2e1 * t26 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, t50, 0, -t134 * t96 + (t116 - 0.2e1 * t155) * t106, 0, 0, 0, 0, 0, 0, -t53, 0, -t50 (qJD(3) * t137 - t18) * t108 + (t117 + t192) * t106, 0, 0, 0, 0, 0, 0, -t108 * t10 + t9 * t106 + (-t106 * t44 - t108 * t42) * qJD(3), t12 * t106 - t108 * t11 + (-t106 * t45 + t108 * t43) * qJD(3), t43 * t10 + t42 * t11 - t12 * t44 + t9 * t45, -t1 * t43 + t7 * t108 + t6 * t12 - t175 * t26 + t2 * t42 - t5 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t43 * t12 - 0.2e1 * t42 * t9 - 0.2e1 * t156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, 0, -t96, 0, -t159, -t155, 0, 0, -t33, -t31, t54, t33, -t51, 0 (-t105 * t185 - t107 * t142) * qJD(4) + (t105 * t141 - t80) * qJD(3) (t105 * t142 - t107 * t185) * qJD(4) + (-pkin(8) * t186 + (t188 + t198) * t106) * qJD(3), t116, -pkin(3) * t159 + pkin(8) * t116, -t33, t54, t31, 0, t51, t33, -t207 * t105 + t124 * t107, t117, t124 * t105 + t207 * t107, pkin(8) * t117 + t18 * t67 + t39 * t46, -t11 * t64 - t45 * t22, t64 * t10 + t11 * t63 + t210 * t45 + t22 * t44, -t64 * t96 + t213, -t10 * t63 - t210 * t44, -t106 * t210 + t63 * t96, 0, -t60 * t10 + t14 * t106 - t210 * t26 - t29 * t96 + t38 * t44 + t7 * t63, -t13 * t106 - t60 * t11 - t26 * t22 + t30 * t96 + t38 * t45 + t7 * t64, t1 * t63 + t30 * t10 + t29 * t11 + t13 * t44 + t14 * t45 - t2 * t64 + t210 * t6 + t5 * t22, -t1 * t30 - t6 * t13 - t5 * t14 + t2 * t29 + t26 * t38 + t7 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t96, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t55, t49, -pkin(3) * t175 + t195, 0, 0, 0, 0, 0, 0, t52, t49, t55, t67 * t175 - t194 + t195, 0, 0, 0, 0, 0, 0, -t175 * t63 - t215, -t108 * t22 - t175 * t64, -t12 * t63 + t210 * t43 + t42 * t22 + t9 * t64, t108 * t38 + t12 * t30 - t43 * t13 - t42 * t14 - t175 * t60 - t9 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, -0.2e1 * t68, 0, t84, 0, 0, t105 * t173, t107 * t173, 0, 0, t83, 0, 0.2e1 * t68, 0, 0, t84, -0.2e1 * t46 * t107 + 0.2e1 * t67 * t180, 0, -0.2e1 * t46 * t105 - 0.2e1 * t67 * t97, 0.2e1 * t67 * t46, -0.2e1 * t64 * t22, 0.2e1 * t210 * t64 + 0.2e1 * t22 * t63, 0, -0.2e1 * t63 * t210, 0, 0, -0.2e1 * t210 * t60 + 0.2e1 * t38 * t63, -0.2e1 * t60 * t22 + 0.2e1 * t38 * t64, 0.2e1 * t13 * t63 + 0.2e1 * t14 * t64 + 0.2e1 * t210 * t30 + 0.2e1 * t29 * t22, -0.2e1 * t30 * t13 - 0.2e1 * t29 * t14 + 0.2e1 * t60 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, 0, -t55, t96, t17, t16, 0, 0, 0, t52, 0, t96, t55, 0 (0.2e1 * pkin(4) - t188) * t96 + t115 (pkin(4) * t175 - qJ(5) * t179) * t107 + (qJ(5) * t175 + (pkin(4) * qJD(4) - qJD(5)) * t108) * t105, 0.2e1 * t166 + (t204 - t164) * t106 + t172, -t15 * pkin(4) + t8 * qJ(5) + t27 * qJD(5), 0, 0, t11, 0, -t10, t96, t41 * t106 + t114 * t177 + t152 * t20 - t65 * t96 - t110, -t40 * t106 + t66 * t96 - t1, t66 * t10 + t65 * t11 + t40 * t44 + t41 * t45, -t1 * t66 + t2 * t65 - t6 * t40 - t5 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t51, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t51, -t106 * t206 - t138 * t96, 0, 0, 0, 0, 0, 0, t9, t12, 0, t12 * t66 - t43 * t40 - t42 * t41 - t9 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, -t180, 0, -t169, t170, 0, 0, 0, t97, 0, 0, t180, 0, -t169, -t206, -t170, -t206 * pkin(8), 0, 0, t22, 0, -t210, 0, t14, -t13, t210 * t66 + t65 * t22 + t40 * t63 + t41 * t64, -t13 * t66 - t14 * t65 - t29 * t41 - t30 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, qJ(5) * t204, 0, 0, 0, 0, 0, 0, 0.2e1 * t41, -0.2e1 * t40, 0, -0.2e1 * t66 * t40 - 0.2e1 * t65 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, t52, 0, t15, 0, 0, 0, 0, 0, 0, t106 * t177 - t145, t104 * t96 + t106 * t152, t201 * t11 + t104 * t10 + (t104 * t45 - t201 * t44) * qJD(6), t2 * t201 - t1 * t104 + (-t104 * t5 + t201 * t6) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9 * t201 + t12 * t104 + (-t104 * t42 + t201 * t43) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, t169, 0, 0, 0, 0, 0, 0, 0, 0, t201 * t22 + t104 * t210 + (t104 * t64 - t201 * t63) * qJD(6), -t14 * t201 - t13 * t104 + (-t104 * t29 + t201 * t30) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, t152, 0, -t41 * t201 - t40 * t104 + (-t104 * t65 + t201 * t66) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, t10, -t96, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, t210, 0, -t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, -t152, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
