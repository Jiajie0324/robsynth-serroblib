% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:52
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPP7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRRPP7_invdynJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:52:18
% EndTime: 2019-03-09 04:52:30
% DurationCPUTime: 5.96s
% Computational Cost: add. (4789->571), mult. (9155->639), div. (0->0), fcn. (5504->6), ass. (0->270)
t183 = sin(qJ(4));
t186 = cos(qJ(4));
t299 = t186 * qJD(3);
t187 = cos(qJ(3));
t310 = qJD(1) * t187;
t114 = t183 * t310 - t299;
t184 = sin(qJ(3));
t311 = qJD(1) * t184;
t401 = -t311 - qJD(4);
t235 = t401 * t114;
t303 = qJD(4) * t187;
t218 = t183 * t303 + t184 * t299;
t294 = t187 * qJDD(1);
t47 = qJD(1) * t218 - qJD(4) * t299 - t183 * qJDD(3) - t186 * t294;
t197 = t47 + t235;
t404 = t47 - t235;
t308 = qJD(3) * t183;
t116 = t186 * t310 + t308;
t234 = t116 * t401;
t307 = qJD(3) * t184;
t278 = t183 * t307;
t48 = -qJD(1) * t278 + qJD(4) * t116 - t186 * qJDD(3) + t183 * t294;
t403 = t48 + t234;
t402 = t48 - t234;
t260 = qJD(4) * t184 + qJD(1);
t400 = (-t183 * t260 + t187 * t299) * t401 + t187 * t47;
t297 = qJD(1) * qJD(3);
t269 = t187 * t297;
t295 = t184 * qJDD(1);
t112 = qJDD(4) + t269 + t295;
t399 = t112 * qJ(5) - qJD(5) * t401;
t341 = t183 * t184;
t398 = -t112 * t341 + t114 * t307 - t187 * t48;
t306 = qJD(3) * t187;
t397 = (t114 * t260 + t116 * t306 - t47 * t184) * t183;
t368 = pkin(4) + pkin(5);
t287 = t368 * t183;
t346 = qJ(5) * t186;
t229 = t287 - t346;
t343 = t116 * t186;
t349 = t48 * t186;
t350 = t47 * t183;
t395 = t187 * (qJD(4) * (t114 * t183 - t343) - t349 + t350) + (t114 * t186 + t116 * t183) * t307;
t5 = t183 * t402 + t186 * t404;
t342 = t183 * qJ(5);
t228 = -t186 * t368 - t342;
t394 = -pkin(3) + t228;
t393 = t48 * qJ(6) + t114 * qJD(6);
t392 = 0.2e1 * t399;
t304 = qJD(4) * t186;
t272 = t401 * t304;
t277 = t183 * t306;
t391 = t184 * t272 - (-qJD(1) * t186 - t277) * t401 + t398;
t185 = sin(qJ(1));
t334 = t185 * t186;
t188 = cos(qJ(1));
t337 = t184 * t188;
t92 = t183 * t337 + t334;
t327 = t188 * t186;
t335 = t185 * t183;
t93 = t184 * t327 - t335;
t390 = t93 * pkin(4) + t92 * qJ(5);
t190 = -pkin(1) - pkin(7);
t138 = qJDD(1) * t190 + qJDD(2);
t180 = t184 ^ 2;
t181 = t187 ^ 2;
t313 = t180 + t181;
t264 = t313 * t138;
t172 = t187 * pkin(8);
t381 = pkin(3) * t184 + qJ(2) - t172;
t89 = t381 * qJD(1);
t141 = qJD(1) * t190 + qJD(2);
t122 = t184 * t141;
t96 = qJD(3) * pkin(8) + t122;
t44 = -t183 * t96 + t186 * t89;
t323 = qJD(5) - t44;
t384 = t183 * qJD(5) + t122;
t370 = t116 ^ 2;
t383 = -t401 ^ 2 - t370;
t382 = qJ(5) * t306 + t184 * qJD(5);
t328 = t187 * t188;
t155 = g(2) * t328;
t380 = g(3) * t184 + t155;
t371 = t114 ^ 2;
t379 = t370 - t371;
t100 = t112 * pkin(4);
t378 = t100 - qJDD(5);
t329 = t187 * t141;
t97 = -qJD(3) * pkin(3) - t329;
t216 = t116 * qJ(5) - t97;
t35 = pkin(4) * t114 - t216;
t365 = pkin(8) * t112;
t377 = -t35 * t401 - t365;
t305 = qJD(4) * t183;
t253 = pkin(3) * t187 + pkin(8) * t184;
t113 = qJD(3) * t253 + qJD(2);
t54 = qJD(1) * t113 + qJDD(1) * t381;
t63 = qJDD(3) * pkin(8) + t138 * t184 + t141 * t306;
t265 = t183 * t63 - t186 * t54 + t96 * t304 + t89 * t305;
t340 = t183 * t187;
t90 = t184 * t335 - t327;
t213 = g(1) * t90 - g(2) * t92 + g(3) * t340 - t265;
t207 = t213 + t378;
t23 = -t114 * t368 + qJD(6) + t216;
t356 = qJ(6) * t47;
t375 = (qJD(6) + t23) * t116 + t207 - t356;
t332 = t186 * t112;
t223 = -t305 * t401 - t332;
t374 = qJD(1) * (-t114 * t187 - t341 * t401) + t223;
t224 = t183 * t112 - t272;
t338 = t184 * t186;
t22 = qJD(1) * (-t116 * t187 - t338 * t401) + t224;
t309 = qJD(3) * t116;
t372 = t184 * (-t299 * t401 + t47) + t187 * (t223 - t309);
t194 = t184 * (-t308 * t401 - t48) - t187 * (qJD(3) * t114 + t224);
t369 = 0.2e1 * qJ(2);
t367 = pkin(4) * t183;
t366 = pkin(5) * t112;
t364 = pkin(8) * t116;
t178 = g(1) * t185;
t177 = g(2) * t188;
t363 = g(3) * t172;
t362 = pkin(8) - qJ(6);
t361 = t229 * t401 + t384;
t298 = t186 * qJD(6);
t119 = t253 * qJD(1);
t58 = t183 * t119 + t186 * t329;
t51 = qJ(5) * t310 + t58;
t360 = qJ(6) * t183 * t311 - t305 * t362 - t298 - t51;
t246 = -t346 + t367;
t359 = -t246 * t401 - t384;
t131 = t362 * t186;
t286 = t368 * t187;
t57 = t186 * t119 - t183 * t329;
t358 = qJD(4) * t131 - t183 * qJD(6) - (qJ(6) * t338 - t286) * qJD(1) + t57;
t357 = qJ(5) * t48;
t137 = t401 * qJ(5);
t45 = t183 * t89 + t186 * t96;
t27 = qJ(6) * t114 + t45;
t21 = -t137 + t27;
t355 = t401 * t21;
t33 = -t137 + t45;
t354 = t401 * t33;
t353 = t401 * t45;
t347 = pkin(1) * qJDD(1);
t345 = t114 * qJ(5);
t344 = t116 * t114;
t339 = t184 * t185;
t336 = t184 * t190;
t333 = t185 * t187;
t331 = t186 * t187;
t330 = t187 * qJ(6);
t191 = qJD(3) ^ 2;
t326 = t190 * t191;
t192 = qJD(1) ^ 2;
t325 = t192 * qJ(2);
t26 = t116 * qJ(6) + t44;
t324 = qJD(5) - t26;
t321 = g(3) * t341 + t183 * t155;
t320 = g(3) * t338 + t186 * t155;
t68 = t183 * t381 + t186 * t336;
t319 = pkin(3) * t333 + pkin(8) * t339;
t318 = g(1) * t328 + g(2) * t333;
t290 = 0.2e1 * qJD(1) * qJD(2);
t317 = (qJDD(1) * qJ(2) + t290) * qJ(2);
t316 = t188 * pkin(1) + t185 * qJ(2);
t315 = t178 - t177;
t314 = t180 - t181;
t312 = -t191 - t192;
t302 = qJD(4) * t190;
t301 = qJD(5) * t186;
t296 = qJDD(3) * t184;
t293 = pkin(8) * t333;
t292 = g(1) * t333;
t154 = g(2) * t337;
t274 = t190 * t306;
t291 = t183 * t113 + t186 * t274 + t304 * t381;
t273 = t184 * t302;
t289 = t183 * t274 + t186 * t273 + t305 * t381;
t288 = t190 * t185;
t285 = t23 * t305;
t284 = t23 * t304;
t283 = t185 * t331;
t282 = t187 * t192 * t184;
t120 = t187 * t138;
t62 = -qJDD(3) * pkin(3) + t141 * t307 - t120;
t65 = t184 * qJ(5) + t68;
t280 = g(1) * t339 + g(3) * t187 - t154;
t279 = t188 * pkin(7) + t316;
t275 = t114 * t306;
t271 = t186 * t303;
t270 = t401 * t310;
t91 = t183 * t188 + t184 * t334;
t267 = -t90 * pkin(4) + qJ(5) * t91;
t266 = t92 * pkin(4) - qJ(5) * t93;
t139 = t183 * t336;
t67 = t186 * t381 - t139;
t263 = t313 * qJDD(1);
t262 = -pkin(8) * t349 - t280;
t261 = qJDD(2) - t347;
t259 = pkin(4) * t283 + t333 * t342 + t319;
t258 = pkin(3) * t339 + t279;
t8 = t48 * pkin(4) + t47 * qJ(5) - t116 * qJD(5) + t62;
t4 = -pkin(5) * t48 + qJDD(6) - t8;
t257 = t4 - t292;
t256 = t184 * t269;
t255 = g(1) * t92 + g(2) * t90;
t254 = -g(1) * t93 - g(2) * t91;
t252 = g(1) * t188 + g(2) * t185;
t249 = -t315 - t325;
t248 = (qJD(4) * t114 - t47) * pkin(8);
t247 = pkin(4) * t186 + t342;
t18 = t368 * t401 + t324;
t245 = t18 * t186 - t183 * t21;
t244 = t18 * t183 + t186 * t21;
t32 = pkin(4) * t401 + t323;
t243 = t183 * t33 - t186 * t32;
t242 = t183 * t32 + t186 * t33;
t241 = t183 * t45 + t186 * t44;
t240 = t183 * t44 - t186 * t45;
t171 = t188 * qJ(2);
t236 = pkin(3) * t337 - pkin(8) * t328 + t171;
t29 = t186 * t113 - t289;
t233 = pkin(3) + t247;
t7 = t265 - t378;
t231 = qJDD(1) * t369 + t290;
t9 = t183 * t54 + t186 * t63 + t89 * t304 - t305 * t96;
t61 = t112 * t184 - t306 * t401;
t221 = qJDD(3) * t190 + t297 * t369;
t220 = -pkin(8) * qJD(4) * t401 + t292;
t219 = t91 * pkin(4) + t90 * qJ(5) + t258;
t217 = -t220 - t8;
t28 = -t183 * t273 + t291;
t215 = t220 + t62;
t6 = t9 + t399;
t214 = -t401 * t97 - t365;
t212 = t288 + t236;
t17 = -t183 * t235 - t349;
t209 = t231 - t252;
t208 = -t112 + t344;
t206 = -qJD(4) * t243 + t7 * t183 + t6 * t186;
t205 = -qJD(4) * t241 + t183 * t265 + t9 * t186;
t15 = t48 * t340 + (t271 - t278) * t114;
t202 = t116 * t35 - t207;
t201 = g(1) * t91 - g(2) * t93 + g(3) * t331 - t9;
t198 = -t116 * t307 + t184 * t332 - t400;
t196 = -t401 * t44 + t201;
t193 = -t186 * t275 + t260 * t343 - t48 * t338 + t397;
t166 = qJDD(3) * t187;
t144 = qJ(5) * t331;
t130 = t362 * t183;
t70 = -t144 + (-t190 + t367) * t187;
t66 = -t184 * pkin(4) - t67;
t64 = t144 + (t190 - t287) * t187;
t59 = pkin(4) * t116 + t345;
t53 = t183 * t330 + t65;
t52 = -pkin(4) * t310 - t57;
t42 = t139 + (-t381 - t330) * t186 - t368 * t184;
t36 = -t116 * t368 - t345;
t31 = (qJD(4) * t247 - t301) * t187 + (t190 - t246) * t307;
t24 = -pkin(4) * t306 - t29;
t20 = t28 + t382;
t19 = (qJD(4) * t228 + t301) * t187 + (-t190 + t229) * t307;
t16 = -t186 * t234 - t350;
t14 = -t116 * t218 - t331 * t47;
t13 = qJ(6) * t271 + (qJD(6) * t187 + (-qJ(6) * qJD(3) - t302) * t184) * t183 + t291 + t382;
t12 = (qJ(6) * t307 - t113) * t186 + (qJ(6) * t305 - qJD(3) * t368 - t298) * t187 + t289;
t2 = t6 + t393;
t1 = -qJD(6) * t116 + t356 - t366 + t7;
t3 = [0, 0, 0, 0, 0, qJDD(1), t315, t252, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t315 - 0.2e1 * t347, t209, -t261 * pkin(1) - g(1) * (-t185 * pkin(1) + t171) - g(2) * t316 + t317, qJDD(1) * t181 - 0.2e1 * t256, -0.2e1 * t184 * t294 + 0.2e1 * t297 * t314, -t184 * t191 + t166, qJDD(1) * t180 + 0.2e1 * t256, -t187 * t191 - t296, 0, t221 * t187 + (t209 - t326) * t184, -t221 * t184 + (t231 - t326) * t187 - t318, -t190 * t263 - t264 + t315, -g(1) * (t171 + t288) - g(2) * t279 + t190 * t264 + t317, t14, t395, -t372, t15, t194, t61, t67 * t112 - t29 * t401 + (-t265 + (t114 * t190 - t183 * t97) * qJD(3)) * t184 + (qJD(3) * t44 + t183 * t62 - t190 * t48 + t304 * t97) * t187 + t254, -t68 * t112 + t28 * t401 + (-t9 + (t116 * t190 - t186 * t97) * qJD(3)) * t184 + (-qJD(3) * t45 + t186 * t62 + t190 * t47 - t305 * t97) * t187 + t255, -t28 * t114 - t29 * t116 + t67 * t47 - t68 * t48 + t241 * t307 + (qJD(4) * t240 - t183 * t9 + t186 * t265) * t187 + t318, t9 * t68 + t45 * t28 - t265 * t67 + t44 * t29 - g(1) * t212 - g(2) * (t258 - t293) + (-t62 * t187 + t307 * t97) * t190, t14, -t372, -t395, t61, -t194, t15, -t66 * t112 + t31 * t114 + t24 * t401 + t70 * t48 + (-t308 * t35 - t7) * t184 + (-qJD(3) * t32 + t183 * t8 + t304 * t35) * t187 + t254, -t20 * t114 + t24 * t116 - t66 * t47 - t65 * t48 + t243 * t307 + (-qJD(4) * t242 - t183 * t6 + t186 * t7) * t187 + t318, t65 * t112 - t31 * t116 - t20 * t401 + t70 * t47 + (t299 * t35 + t6) * t184 + (qJD(3) * t33 - t186 * t8 + t305 * t35) * t187 - t255, t6 * t65 + t33 * t20 + t8 * t70 + t35 * t31 + t7 * t66 + t32 * t24 - g(1) * (t212 + t390) - g(2) * (t219 - t293) t14, -t395, t372, t15, t194, t61, -t42 * t112 - t19 * t114 + t12 * t401 - t64 * t48 + (t23 * t308 - t1) * t184 + (-qJD(3) * t18 - t183 * t4 - t284) * t187 + t254, t53 * t112 + t19 * t116 - t13 * t401 - t64 * t47 + (-t23 * t299 + t2) * t184 + (qJD(3) * t21 + t186 * t4 - t285) * t187 - t255, t13 * t114 - t12 * t116 + t42 * t47 + t53 * t48 + t245 * t307 + (qJD(4) * t244 - t1 * t186 + t183 * t2) * t187 - t318, t2 * t53 + t21 * t13 + t1 * t42 + t18 * t12 + t4 * t64 + t23 * t19 - g(1) * (t93 * pkin(5) + qJ(6) * t328 + t236 + t390) - g(2) * (t91 * pkin(5) + t219) + (g(2) * t187 * t362 - g(1) * t190) * t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t192, t249 + t261, 0, 0, 0, 0, 0, 0, t184 * t312 + t166, t187 * t312 - t296, -t263, t264 + t249, 0, 0, 0, 0, 0, 0 -(-t186 * t260 - t277) * t401 + t398 (t309 - t332) * t184 + t400, t193, -t241 * qJD(1) + (-qJD(3) * t240 - t62) * t187 + (qJD(3) * t97 + t205) * t184 - t315, 0, 0, 0, 0, 0, 0, t391, t193, t198, -t243 * qJD(1) + (qJD(3) * t242 - t8) * t187 + (qJD(3) * t35 + t206) * t184 - t315, 0, 0, 0, 0, 0, 0, t391, t198 (-t116 * t260 + t184 * t48 + t275) * t186 - t397, t245 * qJD(1) + (qJD(3) * t244 + t4) * t187 + (-qJD(3) * t23 + qJD(4) * t245 + t1 * t183 + t2 * t186) * t184 - t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t282, -t314 * t192, t294, -t282, -t295, qJDD(3), t120 + (-t325 - t178) * t187 + t380 (-t138 + t325) * t184 + t280, 0, 0, t16, -t5, t22, t17, -t374, t270, -pkin(3) * t48 - t114 * t122 + t183 * t214 - t186 * t215 - t310 * t44 + t401 * t57 + t320, pkin(3) * t47 - t116 * t122 + t183 * t215 + t186 * t214 + t310 * t45 - t401 * t58 - t321, t114 * t58 + t116 * t57 + (-t44 * t311 + t9 + (-t44 + t364) * qJD(4)) * t186 + (t265 + t248 + t353) * t183 + t262, -t45 * t58 - t44 * t57 - t97 * t122 - g(1) * t319 - t363 + (-t62 + t380) * pkin(3) + (t205 + t154) * pkin(8), t16, t22, t5, t270, t374, t17, t359 * t114 + t183 * t377 + t217 * t186 - t233 * t48 + t32 * t310 - t401 * t52 + t320, t114 * t51 - t116 * t52 + (t32 * t311 + t6 + (t32 + t364) * qJD(4)) * t186 + (t248 + t7 + t354) * t183 + t262, -t359 * t116 + t217 * t183 - t186 * t377 - t233 * t47 - t33 * t310 + t401 * t51 + t321, -t33 * t51 - t32 * t52 - g(1) * t259 - t363 + t359 * t35 + (t206 + t154) * pkin(8) + (-t8 + t380) * t233, t16, t5, -t22, t17, -t374, t270, -t285 + t394 * t48 - t112 * t130 + t257 * t186 + t358 * t401 - t361 * t114 + (t18 * t187 - t23 * t341) * qJD(1) + t320, t284 + t394 * t47 + t112 * t131 + t257 * t183 - t360 * t401 + t361 * t116 + (-t187 * t21 + t23 * t338) * qJD(1) + t321, t130 * t47 + t131 * t48 - t358 * t116 + t360 * t114 + (t18 * t401 - t2) * t186 + (-t1 - t355) * t183 + t280, t2 * t131 + t1 * t130 - t4 * t394 - g(1) * (pkin(5) * t283 + t259) - g(3) * (t172 - t330) + t361 * t23 + t360 * t21 + t358 * t18 + (qJ(6) * t178 - g(3) * (-pkin(5) * t186 - t233)) * t184 - (-t362 * t184 + t187 * t394) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, t379, -t197, -t344, -t403, t112, -t116 * t97 + t213 - t353, t114 * t97 + t196, 0, 0, t344, -t197, -t379, t112, t403, -t344, -t114 * t59 + t100 - t202 - t353, pkin(4) * t47 - t357 + (t33 - t45) * t116 + (t32 - t323) * t114, -t114 * t35 + t116 * t59 - t196 + t392, t6 * qJ(5) - t7 * pkin(4) - t35 * t59 - t32 * t45 - g(1) * t267 - g(2) * t266 - g(3) * (-pkin(4) * t340 + t144) + t323 * t33, t344, -t379, t197, -t344, -t403, t112 (pkin(5) + t368) * t112 + t114 * t36 - t401 * t27 + t375, t114 * t23 - t116 * t36 + t26 * t401 - t201 + t392 + t393, t357 - t368 * t47 + (-t21 + t27) * t116 + (-t18 + t324) * t114, t2 * qJ(5) - t1 * t368 - t18 * t27 - t23 * t36 - g(1) * (-pkin(5) * t90 + t267) - g(2) * (pkin(5) * t92 + t266) - g(3) * (-t183 * t286 + t144) + t324 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, -t197, t383, t202 + t354, 0, 0, 0, 0, 0, 0, t208, t383, t197, t355 - t366 - t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t402, -t404, -t370 - t371, -t114 * t21 + t116 * t18 + t257 + t380;];
tau_reg  = t3;
