% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 09:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:58:53
% EndTime: 2019-05-05 09:59:04
% DurationCPUTime: 12.37s
% Computational Cost: add. (37926->313), mult. (73947->422), div. (0->0), fcn. (54571->12), ass. (0->238)
t2575 = sin(qJ(3));
t2628 = qJD(2) * t2575;
t2561 = qJD(3) * t2628;
t2579 = cos(qJ(3));
t2616 = t2579 * qJDD(2);
t2612 = t2561 - t2616;
t2610 = -qJDD(4) - t2612;
t2589 = -qJDD(5) + t2610;
t2574 = sin(qJ(4));
t2578 = cos(qJ(4));
t2536 = -t2578 * qJD(3) + t2574 * t2628;
t2537 = qJD(3) * t2574 + t2578 * t2628;
t2573 = sin(qJ(5));
t2577 = cos(qJ(5));
t2513 = t2536 * t2577 + t2537 * t2573;
t2515 = -t2536 * t2573 + t2537 * t2577;
t2624 = t2513 * t2515;
t2467 = t2589 - t2624;
t2512 = t2515 ^ 2;
t2627 = qJD(2) * t2579;
t2558 = -qJD(4) + t2627;
t2554 = qJD(5) - t2558;
t2631 = t2554 ^ 2;
t2638 = -t2512 - t2631;
t2446 = t2467 * t2573 + t2577 * t2638;
t2448 = t2467 * t2577 - t2573 * t2638;
t2407 = t2446 * t2574 - t2448 * t2578;
t2615 = qJD(3) * t2627;
t2617 = t2575 * qJDD(2);
t2540 = t2615 + t2617;
t2590 = -qJDD(3) * t2574 - t2540 * t2578;
t2508 = -qJD(4) * t2536 - t2590;
t2591 = qJDD(3) * t2578 - t2540 * t2574;
t2585 = -qJD(4) * t2537 + t2591;
t2584 = -t2513 * qJD(5) + t2577 * t2508 + t2573 * t2585;
t2623 = t2513 * t2554;
t2583 = t2584 - t2623;
t2385 = t2407 * t2575 + t2579 * t2583;
t2568 = sin(pkin(6));
t2570 = cos(pkin(6));
t2387 = t2407 * t2579 - t2575 * t2583;
t2416 = t2446 * t2578 + t2448 * t2574;
t2576 = sin(qJ(2));
t2580 = cos(qJ(2));
t2605 = t2387 * t2576 + t2416 * t2580;
t2359 = -t2568 * t2385 + t2570 * t2605;
t2368 = t2387 * t2580 - t2416 * t2576;
t2567 = sin(pkin(11));
t2569 = cos(pkin(11));
t2673 = t2359 * t2567 - t2368 * t2569;
t2672 = t2359 * t2569 + t2368 * t2567;
t2357 = t2570 * t2385 + t2568 * t2605;
t2439 = t2584 + t2623;
t2613 = t2508 * t2573 - t2577 * t2585;
t2586 = (-qJD(5) + t2554) * t2515 - t2613;
t2635 = t2439 * t2573 + t2577 * t2586;
t2636 = -t2577 * t2439 + t2573 * t2586;
t2641 = t2574 * t2635 + t2578 * t2636;
t2483 = t2513 ^ 2;
t2459 = t2512 + t2483;
t2642 = -t2574 * t2636 + t2578 * t2635;
t2648 = -t2459 * t2575 + t2579 * t2642;
t2652 = t2576 * t2641 + t2580 * t2648;
t2649 = t2459 * t2579 + t2575 * t2642;
t2653 = t2576 * t2648 - t2580 * t2641;
t2660 = -t2568 * t2649 + t2570 * t2653;
t2665 = -t2567 * t2660 + t2569 * t2652;
t2664 = t2567 * t2652 + t2569 * t2660;
t2661 = t2568 * t2653 + t2570 * t2649;
t2468 = t2589 + t2624;
t2637 = -t2631 - t2483;
t2643 = t2468 * t2573 + t2577 * t2637;
t2644 = -t2577 * t2468 + t2573 * t2637;
t2647 = -t2574 * t2644 + t2578 * t2643;
t2657 = t2575 * t2647;
t2646 = t2574 * t2643 + t2578 * t2644;
t2656 = t2576 * t2646;
t2655 = t2579 * t2647;
t2654 = t2580 * t2646;
t2629 = -g(3) + qJDD(1);
t2614 = t2568 * t2629;
t2547 = g(1) * t2567 - g(2) * t2569;
t2620 = t2547 * t2570;
t2645 = t2614 + t2620;
t2634 = qJD(3) ^ 2;
t2633 = t2536 ^ 2;
t2632 = t2537 ^ 2;
t2630 = t2558 ^ 2;
t2622 = t2536 * t2537;
t2621 = t2536 * t2558;
t2619 = qJD(4) + t2558;
t2548 = -g(1) * t2569 - g(2) * t2567;
t2504 = t2580 * t2548 + t2576 * t2645;
t2581 = qJD(2) ^ 2;
t2492 = -pkin(2) * t2581 + qJDD(2) * pkin(8) + t2504;
t2587 = -t2568 * t2547 + t2570 * t2629;
t2481 = t2579 * t2492 + t2575 * t2587;
t2538 = (-pkin(3) * t2579 - pkin(9) * t2575) * qJD(2);
t2462 = -pkin(3) * t2634 + qJDD(3) * pkin(9) + t2538 * t2627 + t2481;
t2611 = t2576 * t2548 - t2580 * t2645;
t2491 = -qJDD(2) * pkin(2) - t2581 * pkin(8) + t2611;
t2464 = (-t2540 - t2615) * pkin(9) + (t2612 + t2561) * pkin(3) + t2491;
t2426 = t2578 * t2462 + t2574 * t2464;
t2524 = -pkin(4) * t2558 - pkin(10) * t2537;
t2421 = -pkin(4) * t2633 + pkin(10) * t2585 + t2558 * t2524 + t2426;
t2425 = -t2574 * t2462 + t2578 * t2464;
t2502 = -t2610 - t2622;
t2582 = (-t2508 + t2621) * pkin(10) + t2502 * pkin(4) + t2425;
t2383 = t2577 * t2421 + t2573 * t2582;
t2563 = t2575 ^ 2;
t2564 = t2579 ^ 2;
t2618 = t2563 + t2564;
t2382 = -t2421 * t2573 + t2577 * t2582;
t2482 = pkin(5) * t2513 - qJ(6) * t2515;
t2376 = -pkin(5) * t2631 - qJ(6) * t2589 + 0.2e1 * qJD(6) * t2554 - t2513 * t2482 + t2383;
t2377 = pkin(5) * t2589 - qJ(6) * t2631 + t2482 * t2515 + qJDD(6) - t2382;
t2351 = t2376 * t2573 - t2377 * t2577;
t2352 = t2376 * t2577 + t2377 * t2573;
t2342 = -t2351 * t2574 + t2352 * t2578;
t2523 = t2579 * t2587;
t2461 = -t2523 - qJDD(3) * pkin(3) - t2634 * pkin(9) + (qJD(2) * t2538 + t2492) * t2575;
t2427 = -t2585 * pkin(4) - t2633 * pkin(10) + t2524 * t2537 + t2461;
t2588 = -qJD(5) * t2515 - t2613;
t2384 = -t2588 * pkin(5) + (pkin(5) * t2554 - 0.2e1 * qJD(6)) * t2515 + t2427 - t2583 * qJ(6);
t2340 = t2342 * t2579 + t2384 * t2575;
t2341 = t2351 * t2578 + t2352 * t2574;
t2609 = t2340 * t2576 - t2341 * t2580;
t2365 = t2382 * t2577 + t2383 * t2573;
t2366 = -t2382 * t2573 + t2383 * t2577;
t2346 = -t2365 * t2574 + t2366 * t2578;
t2344 = t2346 * t2579 + t2427 * t2575;
t2345 = t2365 * t2578 + t2366 * t2574;
t2608 = t2344 * t2576 - t2345 * t2580;
t2436 = (qJD(5) + t2554) * t2515 + t2613;
t2388 = t2436 * t2575 + t2655;
t2604 = t2388 * t2576 - t2654;
t2400 = -t2425 * t2574 + t2426 * t2578;
t2390 = t2400 * t2579 + t2461 * t2575;
t2399 = t2425 * t2578 + t2426 * t2574;
t2603 = t2390 * t2576 - t2399 * t2580;
t2435 = t2515 * t2554 - t2588;
t2396 = t2435 * t2575 + t2655;
t2601 = t2396 * t2576 - t2654;
t2485 = -t2537 * t2619 + t2591;
t2487 = t2536 * t2619 + t2590;
t2453 = t2485 * t2578 - t2487 * t2574;
t2500 = -t2632 - t2633;
t2429 = t2453 * t2579 + t2500 * t2575;
t2452 = t2485 * t2574 + t2487 * t2578;
t2600 = t2429 * t2576 - t2452 * t2580;
t2480 = -t2492 * t2575 + t2523;
t2443 = -t2480 * t2575 + t2481 * t2579;
t2599 = t2443 * t2576 - t2491 * t2580;
t2509 = -t2630 - t2633;
t2471 = -t2502 * t2574 + t2509 * t2578;
t2484 = (qJD(4) - t2558) * t2537 - t2591;
t2445 = t2471 * t2579 + t2484 * t2575;
t2470 = t2502 * t2578 + t2509 * t2574;
t2598 = t2445 * t2576 - t2470 * t2580;
t2501 = t2610 - t2622;
t2516 = -t2630 - t2632;
t2479 = t2501 * t2578 - t2516 * t2574;
t2486 = t2508 + t2621;
t2451 = t2479 * t2579 + t2486 * t2575;
t2478 = t2501 * t2574 + t2516 * t2578;
t2597 = t2451 * t2576 - t2478 * t2580;
t2596 = t2576 * t2504 - t2580 * t2611;
t2557 = t2575 * t2581 * t2579;
t2549 = qJDD(3) + t2557;
t2556 = -t2564 * t2581 - t2634;
t2520 = -t2549 * t2575 + t2556 * t2579;
t2541 = -0.2e1 * t2561 + t2616;
t2595 = t2520 * t2576 + t2541 * t2580;
t2550 = -qJDD(3) + t2557;
t2555 = -t2563 * t2581 - t2634;
t2521 = t2550 * t2579 - t2555 * t2575;
t2539 = 0.2e1 * t2615 + t2617;
t2594 = t2521 * t2576 - t2539 * t2580;
t2542 = t2618 * qJDD(2);
t2545 = t2618 * t2581;
t2593 = t2542 * t2576 + t2545 * t2580;
t2592 = qJDD(2) * t2580 - t2576 * t2581;
t2544 = -qJDD(2) * t2576 - t2580 * t2581;
t2531 = t2592 * t2570;
t2530 = t2544 * t2570;
t2529 = t2592 * t2568;
t2528 = t2544 * t2568;
t2519 = t2550 * t2575 + t2555 * t2579;
t2518 = t2549 * t2579 + t2556 * t2575;
t2517 = t2542 * t2580 - t2545 * t2576;
t2511 = t2593 * t2570;
t2510 = t2593 * t2568;
t2494 = t2521 * t2580 + t2539 * t2576;
t2493 = t2520 * t2580 - t2541 * t2576;
t2475 = -t2568 * t2519 + t2570 * t2594;
t2474 = -t2568 * t2518 + t2570 * t2595;
t2473 = t2519 * t2570 + t2568 * t2594;
t2472 = t2570 * t2518 + t2568 * t2595;
t2465 = t2504 * t2580 + t2576 * t2611;
t2455 = t2568 ^ 2 * t2547 + (-t2614 + t2596) * t2570;
t2454 = t2570 ^ 2 * t2629 + (t2596 - t2620) * t2568;
t2450 = t2479 * t2575 - t2486 * t2579;
t2444 = t2471 * t2575 - t2484 * t2579;
t2442 = t2480 * t2579 + t2481 * t2575;
t2428 = t2453 * t2575 - t2500 * t2579;
t2424 = t2443 * t2580 + t2491 * t2576;
t2423 = t2451 * t2580 + t2478 * t2576;
t2422 = t2445 * t2580 + t2470 * t2576;
t2415 = t2429 * t2580 + t2452 * t2576;
t2404 = -t2568 * t2450 + t2570 * t2597;
t2403 = t2570 * t2450 + t2568 * t2597;
t2402 = -t2568 * t2442 + t2570 * t2599;
t2401 = t2570 * t2442 + t2568 * t2599;
t2398 = -t2568 * t2444 + t2570 * t2598;
t2397 = t2570 * t2444 + t2568 * t2598;
t2394 = -t2435 * t2579 + t2657;
t2392 = -t2568 * t2428 + t2570 * t2600;
t2391 = t2570 * t2428 + t2568 * t2600;
t2389 = t2400 * t2575 - t2461 * t2579;
t2386 = -t2436 * t2579 + t2657;
t2375 = t2396 * t2580 + t2656;
t2369 = t2388 * t2580 + t2656;
t2367 = t2390 * t2580 + t2399 * t2576;
t2364 = -t2568 * t2394 + t2570 * t2601;
t2362 = t2570 * t2394 + t2568 * t2601;
t2360 = -t2568 * t2386 + t2570 * t2604;
t2358 = t2570 * t2386 + t2568 * t2604;
t2356 = -t2568 * t2389 + t2570 * t2603;
t2355 = t2570 * t2389 + t2568 * t2603;
t2343 = t2346 * t2575 - t2427 * t2579;
t2339 = t2342 * t2575 - t2384 * t2579;
t2338 = t2344 * t2580 + t2345 * t2576;
t2337 = t2340 * t2580 + t2341 * t2576;
t2336 = -t2568 * t2343 + t2570 * t2608;
t2335 = t2570 * t2343 + t2568 * t2608;
t2334 = -t2568 * t2339 + t2570 * t2609;
t2333 = t2570 * t2339 + t2568 * t2609;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2547 * t2567 + t2548 * t2569, 0, 0, 0, 0, 0, 0, -t2531 * t2567 + t2544 * t2569, -t2530 * t2567 - t2569 * t2592, 0, -t2455 * t2567 + t2465 * t2569, 0, 0, 0, 0, 0, 0, -t2474 * t2567 + t2493 * t2569, -t2475 * t2567 + t2494 * t2569, -t2511 * t2567 + t2517 * t2569, -t2402 * t2567 + t2424 * t2569, 0, 0, 0, 0, 0, 0, -t2398 * t2567 + t2422 * t2569, -t2404 * t2567 + t2423 * t2569, -t2392 * t2567 + t2415 * t2569, -t2356 * t2567 + t2367 * t2569, 0, 0, 0, 0, 0, 0, -t2360 * t2567 + t2369 * t2569, t2673, t2665, -t2336 * t2567 + t2338 * t2569, 0, 0, 0, 0, 0, 0, -t2364 * t2567 + t2375 * t2569, t2665, -t2673, -t2334 * t2567 + t2337 * t2569; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2547 * t2569 + t2548 * t2567, 0, 0, 0, 0, 0, 0, t2531 * t2569 + t2544 * t2567, t2530 * t2569 - t2567 * t2592, 0, t2455 * t2569 + t2465 * t2567, 0, 0, 0, 0, 0, 0, t2474 * t2569 + t2493 * t2567, t2475 * t2569 + t2494 * t2567, t2511 * t2569 + t2517 * t2567, t2402 * t2569 + t2424 * t2567, 0, 0, 0, 0, 0, 0, t2398 * t2569 + t2422 * t2567, t2404 * t2569 + t2423 * t2567, t2392 * t2569 + t2415 * t2567, t2356 * t2569 + t2367 * t2567, 0, 0, 0, 0, 0, 0, t2360 * t2569 + t2369 * t2567, -t2672, t2664, t2336 * t2569 + t2338 * t2567, 0, 0, 0, 0, 0, 0, t2364 * t2569 + t2375 * t2567, t2664, t2672, t2334 * t2569 + t2337 * t2567; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2629, 0, 0, 0, 0, 0, 0, t2529, t2528, 0, t2454, 0, 0, 0, 0, 0, 0, t2472, t2473, t2510, t2401, 0, 0, 0, 0, 0, 0, t2397, t2403, t2391, t2355, 0, 0, 0, 0, 0, 0, t2358, -t2357, t2661, t2335, 0, 0, 0, 0, 0, 0, t2362, t2661, t2357, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2548, 0, 0, 0, 0, 0, 0, t2544, -t2592, 0, t2465, 0, 0, 0, 0, 0, 0, t2493, t2494, t2517, t2424, 0, 0, 0, 0, 0, 0, t2422, t2423, t2415, t2367, 0, 0, 0, 0, 0, 0, t2369, -t2368, t2652, t2338, 0, 0, 0, 0, 0, 0, t2375, t2652, t2368, t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2547, 0, 0, 0, 0, 0, 0, t2531, t2530, 0, t2455, 0, 0, 0, 0, 0, 0, t2474, t2475, t2511, t2402, 0, 0, 0, 0, 0, 0, t2398, t2404, t2392, t2356, 0, 0, 0, 0, 0, 0, t2360, -t2359, t2660, t2336, 0, 0, 0, 0, 0, 0, t2364, t2660, t2359, t2334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2629, 0, 0, 0, 0, 0, 0, t2529, t2528, 0, t2454, 0, 0, 0, 0, 0, 0, t2472, t2473, t2510, t2401, 0, 0, 0, 0, 0, 0, t2397, t2403, t2391, t2355, 0, 0, 0, 0, 0, 0, t2358, -t2357, t2661, t2335, 0, 0, 0, 0, 0, 0, t2362, t2661, t2357, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2581, -qJDD(2), 0, t2504, 0, 0, 0, 0, 0, 0, t2520, t2521, t2542, t2443, 0, 0, 0, 0, 0, 0, t2445, t2451, t2429, t2390, 0, 0, 0, 0, 0, 0, t2388, -t2387, t2648, t2344, 0, 0, 0, 0, 0, 0, t2396, t2648, t2387, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2581, 0, -t2611, 0, 0, 0, 0, 0, 0, t2541, -t2539, t2545, -t2491, 0, 0, 0, 0, 0, 0, -t2470, -t2478, -t2452, -t2399, 0, 0, 0, 0, 0, 0, -t2646, -t2416, -t2641, -t2345, 0, 0, 0, 0, 0, 0, -t2646, -t2641, t2416, -t2341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2587, 0, 0, 0, 0, 0, 0, t2518, t2519, 0, t2442, 0, 0, 0, 0, 0, 0, t2444, t2450, t2428, t2389, 0, 0, 0, 0, 0, 0, t2386, -t2385, t2649, t2343, 0, 0, 0, 0, 0, 0, t2394, t2649, t2385, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2556, t2550, t2616, t2481, 0, 0, 0, 0, 0, 0, t2471, t2479, t2453, t2400, 0, 0, 0, 0, 0, 0, t2647, -t2407, t2642, t2346, 0, 0, 0, 0, 0, 0, t2647, t2642, t2407, t2342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2555, -t2617, t2480, 0, 0, 0, 0, 0, 0, -t2484, -t2486, -t2500, -t2461, 0, 0, 0, 0, 0, 0, -t2436, -t2583, t2459, -t2427, 0, 0, 0, 0, 0, 0, -t2435, t2459, t2583, -t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2541, t2539, -t2545, t2491, 0, 0, 0, 0, 0, 0, t2470, t2478, t2452, t2399, 0, 0, 0, 0, 0, 0, t2646, t2416, t2641, t2345, 0, 0, 0, 0, 0, 0, t2646, t2641, -t2416, t2341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2509, t2501, t2485, t2426, 0, 0, 0, 0, 0, 0, t2643, t2448, t2635, t2366, 0, 0, 0, 0, 0, 0, t2643, t2635, -t2448, t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2502, t2516, t2487, t2425, 0, 0, 0, 0, 0, 0, t2644, t2446, t2636, t2365, 0, 0, 0, 0, 0, 0, t2644, t2636, -t2446, t2351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2484, t2486, t2500, t2461, 0, 0, 0, 0, 0, 0, t2436, t2583, -t2459, t2427, 0, 0, 0, 0, 0, 0, t2435, -t2459, -t2583, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2637, t2467, t2586, t2383, 0, 0, 0, 0, 0, 0, t2637, t2586, -t2467, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2468, t2638, -t2439, t2382, 0, 0, 0, 0, 0, 0, -t2468, -t2439, -t2638, -t2377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2436, t2583, -t2459, t2427, 0, 0, 0, 0, 0, 0, t2435, -t2459, -t2583, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2637, t2586, -t2467, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2435, -t2459, -t2583, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2468, t2439, t2638, t2377;];
f_new_reg  = t1;
