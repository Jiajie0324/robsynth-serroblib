% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:44:02
% EndTime: 2019-05-05 21:44:29
% DurationCPUTime: 24.31s
% Computational Cost: add. (53642->609), mult. (108612->825), div. (0->0), fcn. (71944->8), ass. (0->433)
t818 = sin(qJ(4));
t821 = cos(qJ(4));
t822 = cos(qJ(3));
t874 = qJD(1) * t822;
t782 = -t821 * qJD(3) + t818 * t874;
t784 = qJD(3) * t818 + t821 * t874;
t816 = sin(pkin(9));
t817 = cos(pkin(9));
t740 = -t782 * t816 + t784 * t817;
t737 = t740 ^ 2;
t819 = sin(qJ(3));
t805 = qJD(1) * t819 + qJD(4);
t921 = t805 ^ 2;
t671 = t921 + t737;
t738 = t817 * t782 + t784 * t816;
t682 = t740 * t738;
t869 = qJD(1) * qJD(3);
t855 = t822 * t869;
t867 = qJDD(1) * t819;
t787 = -t855 - t867;
t780 = qJDD(4) - t787;
t932 = t682 + t780;
t904 = t932 * t816;
t591 = t671 * t817 + t904;
t903 = t932 * t817;
t603 = t671 * t816 - t903;
t542 = t591 * t818 + t603 * t821;
t856 = t819 * t869;
t865 = qJDD(1) * t822;
t788 = -t856 + t865;
t852 = -t821 * qJDD(3) + t818 * t788;
t732 = -qJD(4) * t784 - t852;
t733 = -t782 * qJD(4) + t818 * qJDD(3) + t821 * t788;
t668 = t732 * t816 + t733 * t817;
t896 = t738 * t805;
t934 = t668 - t896;
t516 = t542 * t819 - t822 * t934;
t526 = t591 * t821 - t603 * t818;
t820 = sin(qJ(1));
t823 = cos(qJ(1));
t471 = t516 * t823 + t526 * t820;
t1047 = pkin(6) * t471;
t482 = t516 * t820 - t526 * t823;
t1046 = pkin(6) * t482;
t922 = t738 ^ 2;
t714 = t922 - t921;
t611 = t714 * t816 + t903;
t617 = t714 * t817 - t904;
t551 = t611 * t818 - t617 * t821;
t853 = -t817 * t732 + t733 * t816;
t887 = t805 * t740;
t630 = t853 - t887;
t523 = t551 * t819 - t630 * t822;
t546 = t611 * t821 + t617 * t818;
t1045 = t523 * t820 - t546 * t823;
t1044 = t523 * t823 + t546 * t820;
t833 = t853 + t887;
t565 = -t833 * t816 + t817 * t934;
t906 = t934 * t816;
t567 = t833 * t817 + t906;
t501 = t565 * t818 + t567 * t821;
t675 = t737 - t922;
t492 = t501 * t819 + t675 * t822;
t497 = -t565 * t821 + t567 * t818;
t1043 = t492 * t820 + t497 * t823;
t1042 = t492 * t823 - t497 * t820;
t920 = pkin(7) + pkin(1);
t1041 = qJ(2) * t526 + t516 * t920;
t518 = t542 * t822 + t819 * t934;
t1040 = pkin(2) * t526 + t518 * t920;
t1039 = -pkin(2) * t516 + pkin(3) * t934 - pkin(8) * t542 + qJ(2) * t518;
t1037 = pkin(8) * t526;
t1028 = -pkin(3) * t526 - pkin(4) * t591;
t1027 = t501 * t822 - t675 * t819;
t1026 = t551 * t822 + t630 * t819;
t933 = -t682 + t780;
t902 = t933 * t816;
t929 = -t921 - t922;
t944 = t817 * t929 - t902;
t656 = t817 * t933;
t945 = t816 * t929 + t656;
t963 = t818 * t944 + t821 * t945;
t964 = -t818 * t945 + t821 * t944;
t987 = t819 * t964 - t822 * t833;
t1009 = t820 * t963 - t823 * t987;
t1025 = pkin(6) * t1009;
t935 = -t668 - t896;
t946 = -t630 * t817 - t935 * t816;
t947 = -t630 * t816 + t817 * t935;
t961 = t818 * t946 + t821 * t947;
t644 = -t922 - t737;
t962 = -t818 * t947 + t821 * t946;
t986 = -t644 * t822 + t819 * t962;
t1010 = t820 * t961 - t823 * t986;
t1024 = pkin(6) * t1010;
t1012 = t820 * t987 + t823 * t963;
t1023 = pkin(6) * t1012;
t1013 = t820 * t986 + t823 * t961;
t1022 = pkin(6) * t1013;
t716 = -t737 + t921;
t970 = t817 * t716 + t902;
t971 = -t716 * t816 + t656;
t982 = -t818 * t970 + t821 * t971;
t1014 = -t819 * t982 - t822 * t935;
t983 = t818 * t971 + t821 * t970;
t1021 = -t1014 * t820 + t823 * t983;
t1020 = t1014 * t823 + t820 * t983;
t1018 = qJ(5) * t591;
t1017 = qJ(5) * t603;
t1011 = -t819 * t935 + t822 * t982;
t1008 = qJ(2) * t961 - t920 * t986;
t1007 = qJ(2) * t963 - t920 * t987;
t985 = t819 * t833 + t822 * t964;
t1006 = pkin(2) * t963 - t920 * t985;
t984 = t644 * t819 + t822 * t962;
t1005 = pkin(2) * t961 - t920 * t984;
t1004 = pkin(2) * t986 - pkin(3) * t644 + pkin(8) * t962 - qJ(2) * t984;
t1003 = pkin(2) * t987 - pkin(3) * t833 + pkin(8) * t964 - qJ(2) * t985;
t1000 = pkin(8) * t961;
t999 = pkin(8) * t963;
t475 = -pkin(3) * t961 - pkin(4) * t947;
t990 = -pkin(3) * t963 - pkin(4) * t945;
t978 = qJ(5) * t944;
t977 = qJ(5) * t945;
t976 = qJ(5) * t947;
t829 = (-t738 * t816 - t740 * t817) * t805;
t886 = t805 * t816;
t707 = t740 * t886;
t885 = t805 * t817;
t861 = t738 * t885;
t842 = t707 - t861;
t926 = t818 * t842 + t821 * t829;
t894 = t780 * t822;
t925 = -t818 * t829 + t821 * t842;
t942 = -t819 * t925 + t894;
t969 = -t820 * t942 + t823 * t926;
t834 = t816 * t853 + t861;
t843 = t738 * t886 - t817 * t853;
t923 = t818 * t834 + t821 * t843;
t862 = t822 * t682;
t924 = -t818 * t843 + t821 * t834;
t943 = -t819 * t924 - t862;
t968 = -t820 * t943 + t823 * t923;
t967 = t820 * t926 + t823 * t942;
t966 = t820 * t923 + t823 * t943;
t965 = -pkin(4) * t644 + qJ(5) * t946;
t960 = 2 * qJD(6);
t958 = qJ(6) * t934;
t748 = t784 * t782;
t931 = -t748 + t780;
t957 = t818 * t931;
t952 = t821 * t931;
t863 = t819 * t682;
t941 = t822 * t924 - t863;
t895 = t780 * t819;
t940 = t822 * t925 + t895;
t825 = qJD(1) ^ 2;
t936 = t825 * t920;
t765 = t805 * t782;
t698 = -t765 - t733;
t696 = -t765 + t733;
t674 = pkin(5) * t738 - qJ(6) * t740;
t868 = qJD(2) * qJD(1);
t811 = 0.2e1 * t868;
t799 = t823 * g(1) + t820 * g(2);
t813 = qJDD(1) * qJ(2);
t837 = t799 - t813;
t831 = t811 - t837;
t838 = -t788 + t856;
t839 = -t787 + t855;
t688 = pkin(3) * t839 + pkin(8) * t838 + t831 - t936;
t798 = t820 * g(1) - t823 * g(2);
t841 = qJDD(2) - t798;
t828 = -t825 * qJ(2) + t841;
t764 = -qJDD(1) * t920 + t828;
t743 = -t822 * g(3) + t819 * t764;
t824 = qJD(3) ^ 2;
t919 = pkin(3) * t819;
t847 = -pkin(8) * t822 + t919;
t832 = t825 * t847;
t701 = -t824 * pkin(3) + qJDD(3) * pkin(8) - t819 * t832 + t743;
t627 = -t821 * t688 + t818 * t701;
t575 = pkin(4) * t931 + qJ(5) * t698 - t627;
t628 = t818 * t688 + t821 * t701;
t778 = t782 ^ 2;
t840 = pkin(4) * t805 - qJ(5) * t784;
t582 = -t778 * pkin(4) + t732 * qJ(5) - t805 * t840 + t628;
t878 = t816 * t575 + t817 * t582;
t930 = t780 * qJ(6) - t738 * t674 + t805 * t960 + t878;
t623 = t668 * t816 + t740 * t885;
t624 = t668 * t817 - t707;
t557 = t623 * t821 + t624 * t818;
t560 = -t623 * t818 + t624 * t821;
t835 = -t560 * t819 + t862;
t928 = t820 * t557 + t823 * t835;
t927 = t823 * t557 - t820 * t835;
t693 = (qJD(4) - t805) * t784 + t852;
t779 = t784 ^ 2;
t918 = pkin(5) * t817;
t917 = t853 * pkin(5);
t916 = qJ(6) * t817;
t915 = qJDD(1) * pkin(1);
t872 = qJD(5) * t740;
t731 = 0.2e1 * t872;
t877 = -t817 * t575 + t816 * t582;
t508 = t731 + t877;
t873 = qJD(5) * t738;
t729 = -0.2e1 * t873;
t509 = t729 + t878;
t464 = -t508 * t817 + t509 * t816;
t914 = t464 * t818;
t913 = t464 * t821;
t742 = t819 * g(3) + t822 * t764;
t700 = qJDD(3) * pkin(3) + t824 * pkin(8) - t822 * t832 + t742;
t599 = t732 * pkin(4) + t778 * qJ(5) - t784 * t840 - qJDD(5) + t700;
t912 = t599 * t816;
t911 = t599 * t817;
t901 = t700 * t818;
t900 = t700 * t821;
t724 = t748 + t780;
t898 = t724 * t818;
t897 = t724 * t821;
t814 = t819 ^ 2;
t815 = t822 ^ 2;
t875 = t814 + t815;
t790 = t875 * qJDD(1);
t893 = t790 * t820;
t892 = t790 * t823;
t858 = t819 * t822 * t825;
t795 = qJDD(3) + t858;
t891 = t795 * t819;
t890 = t795 * t822;
t796 = qJDD(3) - t858;
t889 = t796 * t819;
t888 = t796 * t822;
t884 = t805 * t818;
t883 = t805 * t821;
t882 = t814 * t825;
t881 = t815 * t825;
t759 = t837 - 0.2e1 * t868 + t936;
t880 = t819 * t759;
t879 = t822 * t759;
t876 = -t644 - t921;
t866 = qJDD(1) * t820;
t864 = qJDD(1) * t823;
t860 = t819 * t748;
t859 = t822 * t748;
t857 = pkin(3) * t822 + pkin(2);
t854 = -qJ(6) * t816 - pkin(4);
t465 = t508 * t816 + t817 * t509;
t562 = t627 * t818 + t821 * t628;
t766 = -t825 * pkin(1) + t831;
t767 = -t828 + t915;
t711 = t823 * t766 - t767 * t820;
t750 = -t798 * t820 - t823 * t799;
t851 = t820 * t858;
t850 = t823 * t858;
t848 = t740 * t674 + qJDD(6) + t877;
t791 = -t820 * t825 + t864;
t846 = pkin(6) * t791 + g(3) * t820;
t792 = t823 * t825 + t866;
t845 = -pkin(6) * t792 + g(3) * t823;
t844 = t822 * t560 + t863;
t561 = -t627 * t821 + t628 * t818;
t686 = t822 * t742 + t819 * t743;
t687 = -t742 * t819 + t743 * t822;
t708 = t766 * t820 + t767 * t823;
t749 = t798 * t823 - t799 * t820;
t836 = t729 + t930;
t830 = -t780 * pkin(5) + t848;
t827 = -pkin(5) * t887 + t740 * t960 + t599;
t826 = t827 + t958;
t803 = -t824 - t881;
t802 = t824 - t881;
t801 = -t824 - t882;
t800 = -t824 + t882;
t794 = (-t814 + t815) * t825;
t793 = t875 * t825;
t789 = -0.2e1 * t856 + t865;
t786 = 0.2e1 * t855 + t867;
t781 = t875 * t869;
t763 = -t779 + t921;
t762 = t778 - t921;
t761 = -t788 * t819 - t815 * t869;
t760 = -t787 * t822 - t814 * t869;
t756 = -t803 * t819 - t890;
t755 = t801 * t822 - t889;
t754 = t803 * t822 - t891;
t753 = -t802 * t822 - t889;
t752 = t801 * t819 + t888;
t751 = -t800 * t819 - t890;
t747 = -t779 + t778;
t746 = -t793 * t823 - t893;
t745 = -t793 * t820 + t892;
t744 = -t779 - t921;
t741 = t786 * t819 - t789 * t822;
t734 = -t921 - t778;
t722 = t778 + t779;
t713 = t754 * t820 + t789 * t823;
t712 = t752 * t820 + t786 * t823;
t710 = -t754 * t823 + t789 * t820;
t709 = -t752 * t823 + t786 * t820;
t705 = (-t782 * t821 + t784 * t818) * t805;
t704 = (-t782 * t818 - t784 * t821) * t805;
t694 = (-qJD(4) - t805) * t784 - t852;
t692 = t733 * t821 - t784 * t884;
t691 = t733 * t818 + t784 * t883;
t690 = -t732 * t818 + t782 * t883;
t689 = t732 * t821 + t782 * t884;
t683 = -t705 * t819 + t894;
t680 = t762 * t821 - t898;
t679 = -t763 * t818 + t952;
t678 = t762 * t818 + t897;
t677 = t763 * t821 + t957;
t673 = -t744 * t818 - t897;
t672 = t744 * t821 - t898;
t669 = -pkin(2) * t793 - t687;
t666 = pkin(2) * t754 - qJ(2) * t756 - t743;
t665 = pkin(2) * t752 - qJ(2) * t755 + t742;
t659 = t734 * t821 - t957;
t658 = t734 * t818 + t952;
t651 = pkin(2) * t786 - t755 * t920 - t879;
t650 = pkin(2) * t789 - t756 * t920 + t880;
t649 = t686 * t820 - t759 * t823;
t648 = -t686 * t823 - t759 * t820;
t647 = -t692 * t819 + t859;
t646 = -t690 * t819 - t859;
t641 = -t693 * t821 - t698 * t818;
t640 = t694 * t821 - t696 * t818;
t639 = -t693 * t818 + t698 * t821;
t638 = t694 * t818 + t696 * t821;
t614 = -t680 * t819 - t693 * t822;
t613 = -t679 * t819 - t698 * t822;
t608 = -pkin(8) * t672 - t900;
t607 = pkin(2) * t686 - qJ(2) * t687;
t606 = -pkin(8) * t658 - t901;
t605 = t673 * t822 + t696 * t819;
t602 = t673 * t819 - t696 * t822;
t598 = t659 * t822 - t694 * t819;
t597 = t659 * t819 + t694 * t822;
t596 = -t640 * t819 - t747 * t822;
t595 = -pkin(2) * t759 - t687 * t920;
t590 = t641 * t822 - t722 * t819;
t589 = t641 * t819 + t722 * t822;
t584 = -pkin(3) * t672 + t628;
t583 = -pkin(3) * t658 + t627;
t577 = t602 * t820 + t672 * t823;
t576 = -t602 * t823 + t672 * t820;
t572 = t597 * t820 + t658 * t823;
t571 = -t597 * t823 + t658 * t820;
t539 = -t911 + t1018;
t538 = t589 * t820 + t639 * t823;
t537 = -t589 * t823 + t639 * t820;
t536 = t562 * t822 - t700 * t819;
t535 = t562 * t819 + t700 * t822;
t534 = -t912 - t977;
t525 = -pkin(8) * t639 - t561;
t520 = -pkin(4) * t934 + t1017 - t912;
t515 = t826 - t917;
t514 = -pkin(4) * t833 + t911 + t978;
t507 = pkin(2) * t602 - pkin(3) * t696 + pkin(8) * t673 - qJ(2) * t605 - t901;
t505 = pkin(2) * t597 + pkin(3) * t694 + pkin(8) * t659 - qJ(2) * t598 + t900;
t496 = (-t833 - t853) * pkin(5) + t826;
t495 = t827 - t917 + 0.2e1 * t958;
t494 = t535 * t820 + t561 * t823;
t493 = -t535 * t823 + t561 * t820;
t490 = qJ(6) * t921 - t830 - 0.2e1 * t872;
t489 = -pkin(5) * t921 + t836;
t484 = pkin(2) * t672 - t822 * t584 - t605 * t920 - t819 * t608;
t479 = qJ(6) * t876 + t731 + t830;
t478 = pkin(5) * t876 + t836;
t477 = pkin(2) * t658 - t822 * t583 - t598 * t920 - t819 * t606;
t476 = pkin(2) * t589 + pkin(3) * t722 + pkin(8) * t641 - qJ(2) * t590 + t562;
t470 = -t496 * t816 - t833 * t916 - t977;
t469 = -pkin(5) * t906 + t495 * t817 - t1018;
t468 = -t1028 + t509;
t467 = pkin(2) * t535 + pkin(3) * t700 + pkin(8) * t562 - qJ(2) * t536;
t466 = t817 * t496 + t833 * t854 + t978;
t463 = -t819 * t525 - t590 * t920 + t639 * t857;
t462 = -t1017 + t816 * t495 + (pkin(4) + t918) * t934;
t461 = t508 + t990;
t460 = -t520 * t818 + t539 * t821 + t1037;
t459 = -pkin(5) * t935 + qJ(6) * t630 + t475;
t458 = pkin(4) * t599 + qJ(5) * t465;
t457 = -t514 * t818 + t534 * t821 - t999;
t452 = t731 + (-t929 - t921) * qJ(6) + (-t933 - t780) * pkin(5) + t848 + t990;
t451 = -t464 - t976;
t450 = t489 * t817 - t490 * t816;
t449 = t489 * t816 + t490 * t817;
t448 = -qJ(6) * t932 + 0.2e1 * t873 + (-t671 + t921) * pkin(5) - t930 + t1028;
t447 = t465 + t965;
t446 = -t920 * t536 + (pkin(8) * t819 + t857) * t561;
t445 = -t478 * t816 + t479 * t817 - t976;
t444 = t478 * t817 + t479 * t816 + t965;
t443 = t465 * t821 - t914;
t442 = t465 * t818 + t913;
t441 = t520 * t821 + t539 * t818 - t1039;
t440 = -t466 * t818 + t470 * t821 - t999;
t439 = t443 * t822 - t599 * t819;
t438 = t443 * t819 + t599 * t822;
t437 = -qJ(5) * t449 + (-pkin(5) * t816 + t916) * t515;
t436 = t514 * t821 + t534 * t818 + t1003;
t435 = -t462 * t818 + t469 * t821 - t1037;
t434 = -t449 * t818 + t450 * t821;
t433 = t449 * t821 + t450 * t818;
t432 = qJ(5) * t450 + (-t854 + t918) * t515;
t431 = -pkin(3) * t442 - pkin(4) * t464;
t430 = t434 * t822 - t515 * t819;
t429 = t434 * t819 + t515 * t822;
t428 = t466 * t821 + t470 * t818 + t1003;
t427 = -t819 * t460 - t822 * t468 - t1040;
t426 = -t447 * t818 + t451 * t821 - t1000;
t425 = t462 * t821 + t469 * t818 + t1039;
t424 = -t819 * t457 - t822 * t461 + t1006;
t423 = -pkin(8) * t442 - qJ(5) * t913 - t458 * t818;
t422 = t438 * t820 + t442 * t823;
t421 = -t438 * t823 + t442 * t820;
t420 = -t444 * t818 + t445 * t821 - t1000;
t419 = -t819 * t440 - t822 * t452 + t1006;
t418 = t447 * t821 + t451 * t818 + t1004;
t417 = -t819 * t435 - t822 * t448 + t1040;
t416 = -pkin(3) * t433 - pkin(4) * t449 - pkin(5) * t490 - qJ(6) * t489;
t415 = t444 * t821 + t445 * t818 + t1004;
t414 = t429 * t820 + t433 * t823;
t413 = -t429 * t823 + t433 * t820;
t412 = -t819 * t426 - t822 * t475 + t1005;
t411 = -t819 * t420 - t822 * t459 + t1005;
t410 = -pkin(8) * t433 - t432 * t818 + t437 * t821;
t409 = pkin(2) * t438 + pkin(3) * t599 + pkin(8) * t443 - qJ(2) * t439 - qJ(5) * t914 + t458 * t821;
t408 = pkin(2) * t442 - t819 * t423 - t822 * t431 - t439 * t920;
t407 = pkin(2) * t429 + pkin(3) * t515 + pkin(8) * t434 - qJ(2) * t430 + t432 * t821 + t437 * t818;
t406 = pkin(2) * t433 - t819 * t410 - t822 * t416 - t430 * t920;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t792, -t791, 0, t750, 0, 0, 0, 0, 0, 0, 0, t792, t791, t711, 0, 0, 0, 0, 0, 0, t712, t713, t746, t649, 0, 0, 0, 0, 0, 0, t572, t577, t538, t494, 0, 0, 0, 0, 0, 0, t1012, t482, t1013, t422, 0, 0, 0, 0, 0, 0, t1012, t1013, -t482, t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t791, -t792, 0, t749, 0, 0, 0, 0, 0, 0, 0, -t791, t792, t708, 0, 0, 0, 0, 0, 0, t709, t710, t745, t648, 0, 0, 0, 0, 0, 0, t571, t576, t537, t493, 0, 0, 0, 0, 0, 0, t1009, -t471, t1010, t421, 0, 0, 0, 0, 0, 0, t1009, t1010, t471, t413; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t755, t756, 0, t687, 0, 0, 0, 0, 0, 0, t598, t605, t590, t536, 0, 0, 0, 0, 0, 0, t985, t518, t984, t439, 0, 0, 0, 0, 0, 0, t985, t984, -t518, t430; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t791, 0, -t792, 0, -t846, -t845, -t749, -pkin(6) * t749, 0, -t791, t792, 0, 0, 0, -t708, t846, t845, -pkin(6) * t708 + (-pkin(1) * t820 + qJ(2) * t823) * g(3), -t761 * t820 + t850, -t741 * t820 + t794 * t823, -t753 * t820 + t822 * t864, -t760 * t820 - t850, -t751 * t820 - t819 * t864, qJDD(3) * t823 - t781 * t820, -pkin(6) * t709 - t651 * t820 + t665 * t823, -pkin(6) * t710 - t650 * t820 + t666 * t823, -pkin(2) * t892 - pkin(6) * t745 - t669 * t820, -pkin(6) * t648 - t595 * t820 + t607 * t823, -t647 * t820 + t691 * t823, -t596 * t820 + t638 * t823, -t613 * t820 + t677 * t823, -t646 * t820 + t689 * t823, -t614 * t820 + t678 * t823, -t683 * t820 + t704 * t823, -pkin(6) * t571 - t477 * t820 + t505 * t823, -pkin(6) * t576 - t484 * t820 + t507 * t823, -pkin(6) * t537 - t463 * t820 + t476 * t823, -pkin(6) * t493 - t446 * t820 + t467 * t823, t927, -t1043, t1021, t968, -t1045, t969, -t424 * t820 + t436 * t823 - t1025, -t427 * t820 + t441 * t823 + t1047, -t412 * t820 + t418 * t823 - t1024, -pkin(6) * t421 - t408 * t820 + t409 * t823, t927, t1021, t1043, t969, t1045, t968, -t419 * t820 + t428 * t823 - t1025, -t411 * t820 + t415 * t823 - t1024, -t417 * t820 + t425 * t823 - t1047, -pkin(6) * t413 - t406 * t820 + t407 * t823; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t792, 0, t791, 0, t845, -t846, t750, pkin(6) * t750, 0, -t792, -t791, 0, 0, 0, t711, -t845, t846, pkin(6) * t711 + (pkin(1) * t823 + qJ(2) * t820) * g(3), t761 * t823 + t851, t741 * t823 + t794 * t820, t753 * t823 + t820 * t865, t760 * t823 - t851, t751 * t823 - t819 * t866, qJDD(3) * t820 + t781 * t823, pkin(6) * t712 + t651 * t823 + t665 * t820, pkin(6) * t713 + t650 * t823 + t666 * t820, -pkin(2) * t893 + pkin(6) * t746 + t669 * t823, pkin(6) * t649 + t595 * t823 + t607 * t820, t647 * t823 + t691 * t820, t596 * t823 + t638 * t820, t613 * t823 + t677 * t820, t646 * t823 + t689 * t820, t614 * t823 + t678 * t820, t683 * t823 + t704 * t820, pkin(6) * t572 + t477 * t823 + t505 * t820, pkin(6) * t577 + t484 * t823 + t507 * t820, pkin(6) * t538 + t463 * t823 + t476 * t820, pkin(6) * t494 + t446 * t823 + t467 * t820, t928, t1042, t1020, t966, t1044, t967, t424 * t823 + t436 * t820 + t1023, t427 * t823 + t441 * t820 + t1046, t412 * t823 + t418 * t820 + t1022, pkin(6) * t422 + t408 * t823 + t409 * t820, t928, t1020, -t1042, t967, -t1044, t966, t419 * t823 + t428 * t820 + t1023, t411 * t823 + t415 * t820 + t1022, t417 * t823 + t425 * t820 - t1046, pkin(6) * t414 + t406 * t823 + t407 * t820; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t798, t799, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t841 - 0.2e1 * t915, -t799 + t811 + 0.2e1 * t813, pkin(1) * t767 + qJ(2) * t766, -t838 * t822, -t786 * t822 - t789 * t819, -t802 * t819 + t888, t839 * t819, t800 * t822 - t891, 0, qJ(2) * t786 - t752 * t920 - t880, qJ(2) * t789 - t754 * t920 - t879, -qJ(2) * t793 + t790 * t920 - t686, -qJ(2) * t759 - t686 * t920, t692 * t822 + t860, t640 * t822 - t747 * t819, t679 * t822 - t698 * t819, t690 * t822 - t860, t680 * t822 - t693 * t819, t705 * t822 + t895, qJ(2) * t658 - t819 * t583 - t597 * t920 + t822 * t606, qJ(2) * t672 - t819 * t584 - t602 * t920 + t822 * t608, t822 * t525 + (qJ(2) + t919) * t639 - t920 * t589, -t920 * t535 + (qJ(2) + t847) * t561, t844, -t1027, t1011, t941, -t1026, t940, t822 * t457 - t819 * t461 + t1007, t822 * t460 - t819 * t468 - t1041, t822 * t426 - t819 * t475 + t1008, qJ(2) * t442 + t822 * t423 - t819 * t431 - t438 * t920, t844, t1011, t1027, t940, t1026, t941, t822 * t440 - t819 * t452 + t1007, t822 * t420 - t819 * t459 + t1008, t822 * t435 - t819 * t448 + t1041, qJ(2) * t433 + t822 * t410 - t819 * t416 - t429 * t920;];
tauB_reg  = t1;
