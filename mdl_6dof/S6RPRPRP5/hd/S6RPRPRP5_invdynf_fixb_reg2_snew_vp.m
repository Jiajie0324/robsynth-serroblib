% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:51:12
% EndTime: 2019-05-05 17:51:21
% DurationCPUTime: 10.49s
% Computational Cost: add. (38197->308), mult. (94856->383), div. (0->0), fcn. (72500->10), ass. (0->212)
t2445 = sin(pkin(9));
t2447 = cos(pkin(9));
t2449 = sin(qJ(3));
t2452 = cos(qJ(3));
t2422 = (t2445 * t2452 + t2447 * t2449) * qJD(1);
t2415 = t2422 * qJD(3);
t2437 = t2447 * qJDD(1);
t2473 = t2445 * qJDD(1);
t2467 = -t2452 * t2437 + t2449 * t2473;
t2465 = t2415 + t2467;
t2463 = qJDD(5) + t2465;
t2444 = sin(pkin(10));
t2446 = cos(pkin(10));
t2408 = -t2446 * qJD(3) + t2422 * t2444;
t2409 = qJD(3) * t2444 + t2422 * t2446;
t2448 = sin(qJ(5));
t2451 = cos(qJ(5));
t2379 = t2408 * t2451 + t2409 * t2448;
t2381 = -t2408 * t2448 + t2409 * t2451;
t2482 = t2379 * t2381;
t2340 = t2463 + t2482;
t2378 = t2381 ^ 2;
t2420 = (t2445 * t2449 - t2447 * t2452) * qJD(1);
t2417 = qJD(5) + t2420;
t2489 = t2417 ^ 2;
t2498 = -t2378 - t2489;
t2298 = t2340 * t2448 - t2451 * t2498;
t2300 = t2340 * t2451 + t2448 * t2498;
t2281 = t2298 * t2444 - t2300 * t2446;
t2419 = -t2449 * t2437 - t2452 * t2473;
t2478 = t2420 * qJD(3);
t2401 = -t2419 - t2478;
t2390 = qJDD(3) * t2444 + t2401 * t2446;
t2466 = qJDD(3) * t2446 - t2401 * t2444;
t2460 = -t2379 * qJD(5) + t2451 * t2390 + t2448 * t2466;
t2481 = t2379 * t2417;
t2459 = t2460 - t2481;
t2265 = t2281 * t2449 - t2452 * t2459;
t2267 = t2281 * t2452 + t2449 * t2459;
t2240 = t2265 * t2445 - t2267 * t2447;
t2271 = t2298 * t2446 + t2300 * t2444;
t2450 = sin(qJ(1));
t2453 = cos(qJ(1));
t2522 = t2240 * t2450 - t2271 * t2453;
t2521 = t2240 * t2453 + t2271 * t2450;
t2242 = t2265 * t2447 + t2267 * t2445;
t2316 = t2460 + t2481;
t2470 = t2448 * t2390 - t2451 * t2466;
t2462 = (-qJD(5) + t2417) * t2381 - t2470;
t2494 = t2316 * t2448 + t2451 * t2462;
t2495 = -t2451 * t2316 + t2448 * t2462;
t2501 = t2444 * t2494 + t2446 * t2495;
t2350 = t2379 ^ 2;
t2325 = t2378 + t2350;
t2502 = -t2444 * t2495 + t2446 * t2494;
t2507 = -t2325 * t2449 + t2452 * t2502;
t2508 = t2325 * t2452 + t2449 * t2502;
t2512 = -t2445 * t2508 + t2447 * t2507;
t2518 = t2450 * t2512 - t2453 * t2501;
t2517 = t2450 * t2501 + t2453 * t2512;
t2341 = t2463 - t2482;
t2497 = -t2489 - t2350;
t2503 = -t2341 * t2448 + t2451 * t2497;
t2504 = t2451 * t2341 + t2448 * t2497;
t2506 = -t2444 * t2504 + t2446 * t2503;
t2516 = t2449 * t2506;
t2505 = t2444 * t2503 + t2446 * t2504;
t2515 = t2450 * t2505;
t2514 = t2452 * t2506;
t2513 = t2453 * t2505;
t2511 = t2445 * t2507 + t2447 * t2508;
t2454 = qJD(1) ^ 2;
t2429 = t2450 * g(1) - t2453 * g(2);
t2468 = -qJDD(2) + t2429;
t2471 = pkin(2) * t2447 + pkin(1);
t2440 = t2445 ^ 2;
t2441 = t2447 ^ 2;
t2474 = t2440 + t2441;
t2397 = t2471 * qJDD(1) + (pkin(7) * t2474 + qJ(2)) * t2454 + t2468;
t2426 = t2474 * t2454;
t2492 = qJD(3) ^ 2;
t2491 = t2408 ^ 2;
t2490 = t2409 ^ 2;
t2403 = t2420 ^ 2;
t2488 = t2422 ^ 2;
t2487 = -2 * qJD(4);
t2486 = t2447 * g(3);
t2485 = qJD(2) * qJD(1);
t2480 = t2408 * t2409;
t2479 = t2409 * t2420;
t2477 = t2420 * t2408;
t2476 = t2420 * t2422;
t2475 = t2441 * t2454;
t2469 = t2453 * g(1) + t2450 * g(2);
t2461 = -t2454 * pkin(1) + qJDD(1) * qJ(2) - t2469;
t2405 = -g(3) * t2445 + (t2461 + 0.2e1 * t2485) * t2447;
t2391 = -pkin(2) * t2475 + pkin(7) * t2437 + t2405;
t2472 = -0.2e1 * t2485;
t2458 = -t2486 + (t2472 + t2471 * t2454 + (-pkin(7) - qJ(2)) * qJDD(1) + t2469) * t2445;
t2352 = t2452 * t2391 + t2449 * t2458;
t2394 = pkin(3) * t2420 - qJ(4) * t2422;
t2337 = -pkin(3) * t2492 + qJDD(3) * qJ(4) - t2394 * t2420 + t2352;
t2344 = (-t2401 + t2478) * qJ(4) + (t2465 + t2415) * pkin(3) - t2397;
t2296 = t2446 * t2337 + t2444 * t2344 + t2408 * t2487;
t2389 = pkin(4) * t2420 - pkin(8) * t2409;
t2288 = -pkin(4) * t2491 + pkin(8) * t2466 - t2420 * t2389 + t2296;
t2295 = -t2444 * t2337 + t2446 * t2344 + t2409 * t2487;
t2358 = -t2390 - t2477;
t2359 = t2465 - t2480;
t2457 = pkin(4) * t2359 + pkin(8) * t2358 + t2295;
t2253 = t2451 * t2288 + t2448 * t2457;
t2252 = -t2288 * t2448 + t2451 * t2457;
t2351 = -t2449 * t2391 + t2452 * t2458;
t2464 = -qJD(5) * t2381 - t2470;
t2335 = -qJDD(3) * pkin(3) - qJ(4) * t2492 + t2422 * t2394 + qJDD(4) - t2351;
t2297 = -t2466 * pkin(4) - t2491 * pkin(8) + t2409 * t2389 + t2335;
t2431 = t2445 * t2454 * t2447;
t2428 = -qJDD(1) * t2450 - t2453 * t2454;
t2427 = qJDD(1) * t2453 - t2450 * t2454;
t2425 = t2474 * qJDD(1);
t2424 = t2447 * t2426;
t2423 = t2445 * t2426;
t2418 = qJDD(1) * pkin(1) + t2454 * qJ(2) + t2468;
t2410 = -t2488 - t2492;
t2404 = -t2486 + (-t2461 + t2472) * t2445;
t2402 = t2419 + 0.2e1 * t2478;
t2400 = 0.2e1 * t2415 + t2467;
t2399 = -qJDD(3) - t2476;
t2398 = qJDD(3) - t2476;
t2395 = -t2403 - t2492;
t2383 = -t2488 - t2403;
t2382 = -t2465 + t2415;
t2377 = -t2403 - t2490;
t2375 = t2399 * t2452 - t2410 * t2449;
t2374 = t2399 * t2449 + t2410 * t2452;
t2373 = -t2403 - t2491;
t2372 = -t2404 * t2445 + t2405 * t2447;
t2371 = t2404 * t2447 + t2405 * t2445;
t2366 = t2382 * t2452 - t2419 * t2449;
t2365 = t2382 * t2449 + t2419 * t2452;
t2363 = t2395 * t2452 - t2398 * t2449;
t2362 = t2395 * t2449 + t2398 * t2452;
t2361 = -t2490 - t2491;
t2360 = -t2465 - t2480;
t2357 = t2390 - t2477;
t2356 = t2466 + t2479;
t2355 = -t2466 + t2479;
t2349 = pkin(5) * t2379 - qJ(6) * t2381;
t2348 = -t2374 * t2445 + t2375 * t2447;
t2347 = t2374 * t2447 + t2375 * t2445;
t2339 = t2360 * t2446 - t2377 * t2444;
t2338 = t2360 * t2444 + t2377 * t2446;
t2331 = -t2365 * t2445 + t2366 * t2447;
t2330 = t2365 * t2447 + t2366 * t2445;
t2329 = -t2359 * t2444 + t2373 * t2446;
t2328 = t2359 * t2446 + t2373 * t2444;
t2327 = -t2362 * t2445 + t2363 * t2447;
t2326 = t2362 * t2447 + t2363 * t2445;
t2323 = t2356 * t2446 - t2358 * t2444;
t2322 = t2356 * t2444 + t2358 * t2446;
t2321 = -t2351 * t2449 + t2352 * t2452;
t2320 = t2351 * t2452 + t2352 * t2449;
t2314 = t2417 * t2381 - t2464;
t2313 = (qJD(5) + t2417) * t2381 + t2470;
t2311 = t2339 * t2452 + t2357 * t2449;
t2310 = t2339 * t2449 - t2357 * t2452;
t2305 = t2329 * t2452 + t2355 * t2449;
t2304 = t2329 * t2449 - t2355 * t2452;
t2303 = t2323 * t2452 + t2361 * t2449;
t2302 = t2323 * t2449 - t2361 * t2452;
t2294 = -t2320 * t2445 + t2321 * t2447;
t2293 = t2320 * t2447 + t2321 * t2445;
t2286 = -t2310 * t2445 + t2311 * t2447;
t2285 = t2310 * t2447 + t2311 * t2445;
t2278 = -t2304 * t2445 + t2305 * t2447;
t2277 = t2304 * t2447 + t2305 * t2445;
t2276 = -t2302 * t2445 + t2303 * t2447;
t2275 = t2302 * t2447 + t2303 * t2445;
t2270 = -t2295 * t2444 + t2296 * t2446;
t2269 = t2295 * t2446 + t2296 * t2444;
t2268 = t2314 * t2449 + t2514;
t2266 = -t2314 * t2452 + t2516;
t2264 = -t2464 * pkin(5) + (pkin(5) * t2417 - (2 * qJD(6))) * t2381 + t2297 - t2459 * qJ(6);
t2263 = t2313 * t2449 + t2514;
t2261 = -t2313 * t2452 + t2516;
t2259 = t2270 * t2452 + t2335 * t2449;
t2258 = t2270 * t2449 - t2335 * t2452;
t2247 = -pkin(5) * t2463 - qJ(6) * t2489 + t2349 * t2381 + qJDD(6) - t2252;
t2246 = -pkin(5) * t2489 + qJ(6) * t2463 + 0.2e1 * qJD(6) * t2417 - t2379 * t2349 + t2253;
t2245 = -t2266 * t2445 + t2268 * t2447;
t2243 = t2266 * t2447 + t2268 * t2445;
t2241 = -t2261 * t2445 + t2263 * t2447;
t2239 = t2261 * t2447 + t2263 * t2445;
t2237 = -t2258 * t2445 + t2259 * t2447;
t2236 = t2258 * t2447 + t2259 * t2445;
t2235 = -t2252 * t2448 + t2253 * t2451;
t2234 = t2252 * t2451 + t2253 * t2448;
t2229 = t2246 * t2451 + t2247 * t2448;
t2228 = t2246 * t2448 - t2247 * t2451;
t2227 = -t2234 * t2444 + t2235 * t2446;
t2226 = t2234 * t2446 + t2235 * t2444;
t2225 = t2227 * t2452 + t2297 * t2449;
t2224 = t2227 * t2449 - t2297 * t2452;
t2223 = -t2228 * t2444 + t2229 * t2446;
t2222 = t2228 * t2446 + t2229 * t2444;
t2221 = t2223 * t2452 + t2264 * t2449;
t2220 = t2223 * t2449 - t2264 * t2452;
t2219 = -t2224 * t2445 + t2225 * t2447;
t2218 = t2224 * t2447 + t2225 * t2445;
t2217 = -t2220 * t2445 + t2221 * t2447;
t2216 = t2220 * t2447 + t2221 * t2445;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2428, -t2427, 0, -t2429 * t2450 - t2453 * t2469, 0, 0, 0, 0, 0, 0, -t2424 * t2453 - t2437 * t2450, t2423 * t2453 + t2450 * t2473, t2425 * t2453 - t2426 * t2450, t2372 * t2453 - t2418 * t2450, 0, 0, 0, 0, 0, 0, t2327 * t2453 + t2400 * t2450, t2348 * t2453 - t2402 * t2450, t2331 * t2453 + t2383 * t2450, t2294 * t2453 - t2397 * t2450, 0, 0, 0, 0, 0, 0, t2278 * t2453 + t2328 * t2450, t2286 * t2453 + t2338 * t2450, t2276 * t2453 + t2322 * t2450, t2237 * t2453 + t2269 * t2450, 0, 0, 0, 0, 0, 0, t2241 * t2453 + t2515, -t2521, t2517, t2219 * t2453 + t2226 * t2450, 0, 0, 0, 0, 0, 0, t2245 * t2453 + t2515, t2517, t2521, t2217 * t2453 + t2222 * t2450; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2427, t2428, 0, t2429 * t2453 - t2450 * t2469, 0, 0, 0, 0, 0, 0, -t2424 * t2450 + t2437 * t2453, t2423 * t2450 - t2453 * t2473, t2425 * t2450 + t2426 * t2453, t2372 * t2450 + t2418 * t2453, 0, 0, 0, 0, 0, 0, t2327 * t2450 - t2400 * t2453, t2348 * t2450 + t2402 * t2453, t2331 * t2450 - t2383 * t2453, t2294 * t2450 + t2397 * t2453, 0, 0, 0, 0, 0, 0, t2278 * t2450 - t2328 * t2453, t2286 * t2450 - t2338 * t2453, t2276 * t2450 - t2322 * t2453, t2237 * t2450 - t2269 * t2453, 0, 0, 0, 0, 0, 0, t2241 * t2450 - t2513, -t2522, t2518, t2219 * t2450 - t2226 * t2453, 0, 0, 0, 0, 0, 0, t2245 * t2450 - t2513, t2518, t2522, t2217 * t2450 - t2222 * t2453; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2371, 0, 0, 0, 0, 0, 0, t2326, t2347, t2330, t2293, 0, 0, 0, 0, 0, 0, t2277, t2285, t2275, t2236, 0, 0, 0, 0, 0, 0, t2239, t2242, t2511, t2218, 0, 0, 0, 0, 0, 0, t2243, t2511, -t2242, t2216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2454, -qJDD(1), 0, -t2469, 0, 0, 0, 0, 0, 0, -t2424, t2423, t2425, t2372, 0, 0, 0, 0, 0, 0, t2327, t2348, t2331, t2294, 0, 0, 0, 0, 0, 0, t2278, t2286, t2276, t2237, 0, 0, 0, 0, 0, 0, t2241, -t2240, t2512, t2219, 0, 0, 0, 0, 0, 0, t2245, t2512, t2240, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2454, 0, t2429, 0, 0, 0, 0, 0, 0, t2437, -t2473, t2426, t2418, 0, 0, 0, 0, 0, 0, -t2400, t2402, -t2383, t2397, 0, 0, 0, 0, 0, 0, -t2328, -t2338, -t2322, -t2269, 0, 0, 0, 0, 0, 0, -t2505, t2271, -t2501, -t2226, 0, 0, 0, 0, 0, 0, -t2505, -t2501, -t2271, -t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2371, 0, 0, 0, 0, 0, 0, t2326, t2347, t2330, t2293, 0, 0, 0, 0, 0, 0, t2277, t2285, t2275, t2236, 0, 0, 0, 0, 0, 0, t2239, t2242, t2511, t2218, 0, 0, 0, 0, 0, 0, t2243, t2511, -t2242, t2216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2475, t2431, t2437, t2405, 0, 0, 0, 0, 0, 0, t2363, t2375, t2366, t2321, 0, 0, 0, 0, 0, 0, t2305, t2311, t2303, t2259, 0, 0, 0, 0, 0, 0, t2263, t2267, t2507, t2225, 0, 0, 0, 0, 0, 0, t2268, t2507, -t2267, t2221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2431, -t2440 * t2454, -t2473, t2404, 0, 0, 0, 0, 0, 0, t2362, t2374, t2365, t2320, 0, 0, 0, 0, 0, 0, t2304, t2310, t2302, t2258, 0, 0, 0, 0, 0, 0, t2261, t2265, t2508, t2224, 0, 0, 0, 0, 0, 0, t2266, t2508, -t2265, t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2437, t2473, -t2426, -t2418, 0, 0, 0, 0, 0, 0, t2400, -t2402, t2383, -t2397, 0, 0, 0, 0, 0, 0, t2328, t2338, t2322, t2269, 0, 0, 0, 0, 0, 0, t2505, -t2271, t2501, t2226, 0, 0, 0, 0, 0, 0, t2505, t2501, t2271, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, t2399, t2382, t2352, 0, 0, 0, 0, 0, 0, t2329, t2339, t2323, t2270, 0, 0, 0, 0, 0, 0, t2506, t2281, t2502, t2227, 0, 0, 0, 0, 0, 0, t2506, t2502, -t2281, t2223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2398, t2410, t2419, t2351, 0, 0, 0, 0, 0, 0, -t2355, -t2357, -t2361, -t2335, 0, 0, 0, 0, 0, 0, -t2313, -t2459, t2325, -t2297, 0, 0, 0, 0, 0, 0, -t2314, t2325, t2459, -t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2400, -t2402, t2383, -t2397, 0, 0, 0, 0, 0, 0, t2328, t2338, t2322, t2269, 0, 0, 0, 0, 0, 0, t2505, -t2271, t2501, t2226, 0, 0, 0, 0, 0, 0, t2505, t2501, t2271, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2373, t2360, t2356, t2296, 0, 0, 0, 0, 0, 0, t2503, -t2300, t2494, t2235, 0, 0, 0, 0, 0, 0, t2503, t2494, t2300, t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2359, t2377, t2358, t2295, 0, 0, 0, 0, 0, 0, t2504, -t2298, t2495, t2234, 0, 0, 0, 0, 0, 0, t2504, t2495, t2298, t2228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2355, t2357, t2361, t2335, 0, 0, 0, 0, 0, 0, t2313, t2459, -t2325, t2297, 0, 0, 0, 0, 0, 0, t2314, -t2325, -t2459, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2497, -t2340, t2462, t2253, 0, 0, 0, 0, 0, 0, t2497, t2462, t2340, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2341, t2498, -t2316, t2252, 0, 0, 0, 0, 0, 0, t2341, -t2316, -t2498, -t2247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2313, t2459, -t2325, t2297, 0, 0, 0, 0, 0, 0, t2314, -t2325, -t2459, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2497, t2462, t2340, t2246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2314, -t2325, -t2459, t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2341, t2316, t2498, t2247;];
f_new_reg  = t1;
