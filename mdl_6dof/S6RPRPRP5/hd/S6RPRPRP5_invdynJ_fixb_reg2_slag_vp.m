% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRP5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP5_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:16:27
% EndTime: 2019-03-09 03:16:42
% DurationCPUTime: 8.39s
% Computational Cost: add. (11816->564), mult. (28370->672), div. (0->0), fcn. (22283->14), ass. (0->271)
t232 = sin(pkin(9));
t234 = cos(pkin(9));
t238 = sin(qJ(3));
t383 = cos(qJ(3));
t191 = t232 * t383 + t238 * t234;
t177 = t191 * qJD(1);
t231 = sin(pkin(10));
t233 = cos(pkin(10));
t149 = qJD(3) * t231 + t177 * t233;
t237 = sin(qJ(5));
t382 = cos(qJ(5));
t340 = t231 * t177;
t404 = qJD(3) * t233 - t340;
t265 = t382 * t404;
t93 = -t237 * t149 + t265;
t415 = t93 ^ 2;
t315 = t383 * t234;
t211 = qJD(1) * t315;
t337 = t238 * t232;
t313 = qJD(1) * t337;
t175 = -t211 + t313;
t172 = qJD(5) + t175;
t414 = t172 * t93;
t368 = t177 * t93;
t182 = t191 * qJD(3);
t307 = qJDD(1) * t383;
t320 = t232 * qJDD(1);
t284 = -t234 * t307 + t238 * t320;
t135 = qJD(1) * t182 + t284;
t130 = qJDD(5) + t135;
t266 = -t237 * t231 + t382 * t233;
t190 = t231 * t382 + t237 * t233;
t180 = t190 * qJD(5);
t401 = t190 * t175 + t180;
t389 = -t130 * t266 + t172 * t401;
t413 = t368 + t389;
t412 = -t389 + t368;
t405 = t149 * t382 + t237 * t404;
t386 = t405 ^ 2;
t411 = t172 * t405;
t309 = qJD(5) * t382;
t325 = qJD(5) * t237;
t394 = -t231 * t325 + t233 * t309;
t400 = t266 * t175 + t394;
t326 = qJD(3) * t238;
t312 = t232 * t326;
t319 = t234 * qJDD(1);
t316 = qJD(3) * t211 + t232 * t307 + t238 * t319;
t134 = qJD(1) * t312 - t316;
t116 = qJDD(3) * t231 - t134 * t233;
t124 = t231 * t134;
t301 = qJDD(3) * t233 + t124;
t41 = qJD(5) * t405 + t237 * t116 - t382 * t301;
t297 = -t190 * t41 + t400 * t93;
t40 = -qJD(5) * t265 - t382 * t116 + t149 * t325 - t237 * t301;
t407 = t40 * t266 + t401 * t405;
t410 = t297 - t407;
t409 = t297 + t407;
t230 = pkin(9) + qJ(3);
t225 = cos(t230);
t216 = g(3) * t225;
t223 = sin(t230);
t239 = sin(qJ(1));
t240 = cos(qJ(1));
t292 = g(1) * t240 + g(2) * t239;
t260 = t292 * t223 - t216;
t322 = qJD(1) * qJD(2);
t373 = pkin(7) + qJ(2);
t387 = qJDD(1) * t373 + t322;
t164 = t387 * t232;
t165 = t387 * t234;
t200 = t373 * t232;
t192 = qJD(1) * t200;
t202 = t373 * t234;
t193 = qJD(1) * t202;
t310 = qJD(3) * t383;
t300 = t383 * t164 + t238 * t165 - t192 * t326 + t193 * t310;
t359 = qJDD(3) * pkin(3);
t76 = qJDD(4) + t300 - t359;
t245 = t76 - t260;
t288 = t190 * t130 + t172 * t400;
t365 = t405 * t177;
t408 = t288 + t365;
t372 = pkin(8) + qJ(4);
t199 = t372 * t231;
t201 = t372 * t233;
t146 = -t237 * t199 + t201 * t382;
t229 = pkin(10) + qJ(5);
t222 = sin(t229);
t406 = t146 * t130 + t222 * t260;
t360 = qJDD(1) * pkin(1);
t395 = g(1) * t239 - g(2) * t240;
t275 = -qJDD(2) + t360 + t395;
t348 = t175 * t233;
t129 = pkin(3) * t177 + qJ(4) * t175;
t174 = t238 * t193;
t138 = -t192 * t383 - t174;
t80 = t233 * t129 - t138 * t231;
t56 = pkin(4) * t177 + pkin(8) * t348 + t80;
t349 = t175 * t231;
t81 = t231 * t129 + t233 * t138;
t67 = pkin(8) * t349 + t81;
t361 = qJD(4) * t190 + qJD(5) * t146 - t237 * t67 + t382 * t56;
t399 = t41 - t411;
t398 = t177 * t404;
t269 = t395 * t225;
t396 = -t383 * t200 - t238 * t202;
t393 = t177 * qJD(3);
t392 = qJ(2) * qJDD(1);
t391 = t41 * pkin(5) + t40 * qJ(6) - qJD(6) * t405;
t173 = t175 ^ 2;
t355 = t135 * t231;
t388 = -t173 * t233 - t355;
t375 = g(3) * t223;
t258 = -t292 * t225 - t375;
t268 = t315 - t337;
t379 = pkin(8) * t233;
t220 = pkin(2) * t234 + pkin(1);
t132 = -pkin(3) * t268 - qJ(4) * t191 - t220;
t147 = -t238 * t200 + t202 * t383;
t84 = t233 * t132 - t147 * t231;
t64 = -pkin(4) * t268 - t191 * t379 + t84;
t346 = t191 * t231;
t85 = t231 * t132 + t233 * t147;
t72 = -pkin(8) * t346 + t85;
t371 = t237 * t64 + t382 * t72;
t181 = -t234 * t310 + t312;
t111 = t268 * qJD(2) + qJD(3) * t396;
t98 = pkin(3) * t182 + qJ(4) * t181 - qJD(4) * t191;
t61 = -t111 * t231 + t233 * t98;
t44 = pkin(4) * t182 + t181 * t379 + t61;
t347 = t181 * t231;
t62 = t233 * t111 + t231 * t98;
t51 = pkin(8) * t347 + t62;
t9 = -qJD(5) * t371 - t237 * t51 + t382 * t44;
t385 = t177 ^ 2;
t381 = pkin(4) * t231;
t380 = pkin(5) * t130;
t374 = t405 * t93;
t29 = t237 * t56 + t382 * t67;
t195 = -qJDD(1) * t220 + qJDD(2);
t65 = t135 * pkin(3) + t134 * qJ(4) - t177 * qJD(4) + t195;
t317 = -t238 * t164 + t383 * t165 - t192 * t310;
t321 = qJDD(3) * qJ(4);
t73 = t321 + (qJD(4) - t174) * qJD(3) + t317;
t35 = t231 * t65 + t233 * t73;
t139 = -t238 * t192 + t193 * t383;
t96 = -pkin(4) * t349 + t139;
t370 = pkin(5) * t401 - qJ(6) * t400 - qJD(6) * t190 - t96;
t197 = -qJD(1) * t220 + qJD(2);
t108 = t175 * pkin(3) - t177 * qJ(4) + t197;
t128 = qJD(3) * qJ(4) + t139;
t70 = t233 * t108 - t128 * t231;
t47 = pkin(4) * t175 - pkin(8) * t149 + t70;
t71 = t231 * t108 + t233 * t128;
t55 = pkin(8) * t404 + t71;
t20 = t237 * t47 + t382 * t55;
t369 = t172 * t20;
t267 = -t199 * t382 - t237 * t201;
t109 = qJD(4) * t266 + qJD(5) * t267;
t24 = qJ(6) * t177 + t29;
t364 = t109 - t24;
t363 = t109 - t29;
t362 = t177 * pkin(5) + t361;
t358 = t116 * t231;
t357 = t116 * t233;
t356 = t130 * qJ(6);
t353 = t149 * t177;
t352 = t149 * t231;
t351 = t172 * t177;
t350 = t175 * t177;
t345 = t222 * t239;
t344 = t223 * t239;
t343 = t223 * t240;
t224 = cos(t229);
t342 = t224 * t240;
t219 = pkin(4) * t233 + pkin(3);
t194 = t225 * t219;
t341 = t225 * t240;
t125 = t233 * t135;
t336 = t239 * t224;
t335 = t240 * t222;
t334 = t240 * t373;
t19 = -t237 * t55 + t382 * t47;
t332 = qJD(6) - t19;
t329 = -t231 * t173 + t125;
t227 = t232 ^ 2;
t228 = t234 ^ 2;
t328 = t227 + t228;
t324 = t139 * qJD(3);
t126 = -qJD(3) * pkin(3) + qJD(4) - t138;
t323 = -qJD(4) + t126;
t318 = -t386 + t415;
t34 = -t231 * t73 + t233 * t65;
t17 = pkin(4) * t135 - pkin(8) * t116 + t34;
t23 = pkin(8) * t301 + t35;
t306 = -t382 * t17 + t237 * t23 + t55 * t309 + t47 * t325;
t305 = t328 * qJD(1) ^ 2;
t203 = t240 * t220;
t303 = t239 * t373 + t203;
t299 = 0.2e1 * t328;
t295 = -g(1) * t344 + g(2) * t343;
t157 = t225 * t345 + t342;
t159 = t225 * t335 - t336;
t294 = g(1) * t157 - g(2) * t159;
t158 = t225 * t336 - t335;
t160 = t224 * t341 + t345;
t293 = g(1) * t158 - g(2) * t160;
t290 = -t386 - t415;
t113 = pkin(4) * t346 - t396;
t120 = t190 * t191;
t75 = -t181 * t190 + t191 * t394;
t287 = t120 * t41 - t75 * t93;
t286 = pkin(3) * t225 + qJ(4) * t223;
t285 = pkin(5) * t224 + qJ(6) * t222;
t283 = -t35 * t231 - t34 * t233;
t282 = -t231 * t70 + t233 * t71;
t281 = t301 * pkin(4);
t280 = t135 * t191 - t175 * t181;
t279 = -t135 * t268 + t175 * t182;
t277 = t233 * t404;
t276 = t301 * t233;
t32 = -t237 * t72 + t382 * t64;
t3 = t237 * t17 + t382 * t23 + t47 * t309 - t325 * t55;
t8 = t237 * t44 + t64 * t309 - t325 * t72 + t382 * t51;
t264 = -t266 * t41 - t401 * t93;
t263 = t267 * t130 - t216 * t224 + (g(1) * t342 + g(2) * t336) * t223;
t262 = t275 + t360;
t261 = t277 - t352;
t257 = g(1) * t159 + g(2) * t157 + t222 * t375 - t306;
t256 = t40 - t414;
t255 = t219 * t341 + t239 * t381 + t343 * t372 + t303;
t121 = t266 * t191;
t74 = t180 * t191 + t181 * t266;
t254 = t120 * t40 - t121 * t41 - t405 * t75 - t74 * t93;
t253 = -t126 * t181 + t191 * t76 - t292;
t251 = t120 * t130 + t172 * t75 - t182 * t93 - t268 * t41;
t250 = t334 - t372 * t344 + t240 * t381 + (-t220 - t194) * t239;
t249 = t299 * t322 - t292;
t87 = -pkin(4) * t404 + t126;
t36 = -pkin(5) * t93 - qJ(6) * t405 + t87;
t248 = t36 * t405 + qJDD(6) - t257;
t247 = t109 * t93 - t146 * t41 + t267 * t40 + t258;
t48 = -t281 + t76;
t246 = -g(1) * t160 - g(2) * t158 - t224 * t375 + t3;
t112 = qJD(2) * t191 + qJD(3) * t147;
t244 = t41 + t411;
t86 = -pkin(4) * t347 + t112;
t243 = -t281 + t245;
t131 = -pkin(5) * t266 - qJ(6) * t190 - t219;
t104 = t231 * t301;
t78 = -t193 * t326 + t317;
t77 = -t130 * t268 + t172 * t182;
t53 = pkin(5) * t405 - qJ(6) * t93;
t50 = pkin(5) * t120 - qJ(6) * t121 + t113;
t31 = pkin(5) * t268 - t32;
t30 = -qJ(6) * t268 + t371;
t27 = t288 - t365;
t26 = -t40 - t414;
t18 = t172 * qJ(6) + t20;
t16 = -t172 * pkin(5) + t332;
t13 = t75 * pkin(5) + t74 * qJ(6) - t121 * qJD(6) + t86;
t12 = -t121 * t40 - t405 * t74;
t11 = -t40 * t190 + t400 * t405;
t10 = t121 * t130 - t172 * t74 + t182 * t405 + t268 * t40;
t7 = -t182 * pkin(5) - t9;
t6 = t48 + t391;
t5 = qJ(6) * t182 - qJD(6) * t268 + t8;
t2 = qJDD(6) + t306 - t380;
t1 = qJD(6) * t172 + t3 + t356;
t4 = [0, 0, 0, 0, 0, qJDD(1), t395, t292, 0, 0, t227 * qJDD(1), 0.2e1 * t232 * t319, 0, t228 * qJDD(1), 0, 0, t262 * t234, -t262 * t232, t299 * t392 + t249, pkin(1) * t275 + (t328 * t392 + t249) * qJ(2), -t134 * t191 - t177 * t181, -t134 * t268 - t177 * t182 - t280, -qJD(3) * t181 + qJDD(3) * t191, t279, -qJD(3) * t182 + qJDD(3) * t268, 0, -t112 * qJD(3) + qJDD(3) * t396 - t220 * t135 + t197 * t182 - t195 * t268 + t269, -qJD(3) * t111 - qJDD(3) * t147 + t134 * t220 - t181 * t197 + t191 * t195 + t295, -t111 * t175 + t112 * t177 + t134 * t396 - t135 * t147 + t138 * t181 - t139 * t182 + t191 * t300 + t268 * t78 - t292, t78 * t147 + t139 * t111 - t300 * t396 - t138 * t112 - t195 * t220 - g(1) * (-t220 * t239 + t334) - g(2) * t303 (t116 * t191 - t149 * t181) * t233 (t276 - t358) * t191 - t261 * t181, -t116 * t268 + t149 * t182 + t233 * t280 (t181 * t404 - t191 * t301) * t231, t182 * t404 - t231 * t280 - t268 * t301, t279, -t112 * t404 + t84 * t135 + t61 * t175 + t70 * t182 + t231 * t253 + t233 * t269 - t268 * t34 + t301 * t396, t112 * t149 - t116 * t396 - t85 * t135 - t62 * t175 - t71 * t182 - t231 * t269 + t233 * t253 + t268 * t35, t62 * t404 + t85 * t301 - t61 * t149 - t84 * t116 + t283 * t191 + (t231 * t71 + t233 * t70) * t181 - t295, -g(2) * t203 + t126 * t112 - t76 * t396 + t34 * t84 + t35 * t85 + t70 * t61 + t71 * t62 + (-g(1) * t373 - g(2) * t286) * t240 + (-g(1) * (-t220 - t286) - g(2) * t373) * t239, t12, t254, t10, t287, -t251, t77, t113 * t41 + t120 * t48 + t130 * t32 + t172 * t9 + t182 * t19 + t268 * t306 + t75 * t87 - t86 * t93 + t293, -t113 * t40 + t121 * t48 - t130 * t371 - t172 * t8 - t182 * t20 + t268 * t3 + t405 * t86 - t74 * t87 - t294, -t120 * t3 + t121 * t306 + t19 * t74 - t20 * t75 + t32 * t40 - t371 * t41 - t405 * t9 + t8 * t93 - t295, -g(1) * t250 - g(2) * t255 + t48 * t113 + t19 * t9 + t20 * t8 + t3 * t371 - t306 * t32 + t87 * t86, t12, t10, -t254, t77, t251, t287, t120 * t6 - t13 * t93 - t130 * t31 - t16 * t182 - t172 * t7 + t2 * t268 + t36 * t75 + t41 * t50 + t293, -t1 * t120 + t121 * t2 - t16 * t74 - t18 * t75 - t30 * t41 - t31 * t40 + t405 * t7 + t5 * t93 - t295, -t1 * t268 - t121 * t6 - t13 * t405 + t130 * t30 + t172 * t5 + t18 * t182 + t36 * t74 + t40 * t50 + t294, t1 * t30 + t18 * t5 + t6 * t50 + t36 * t13 + t2 * t31 + t16 * t7 - g(1) * (-t158 * pkin(5) - t157 * qJ(6) + t250) - g(2) * (pkin(5) * t160 + qJ(6) * t159 + t255); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t319, t320, -t305, -qJ(2) * t305 - t275, 0, 0, 0, 0, 0, 0, t284 + 0.2e1 * t393 (-t175 - t313) * qJD(3) + t316, -t173 - t385, t138 * t177 + t139 * t175 + t195 - t395, 0, 0, 0, 0, 0, 0, t329 + t398, -t353 + t388, -t357 + t104 + (t277 + t352) * t175, -t126 * t177 + t175 * t282 - t283 - t395, 0, 0, 0, 0, 0, 0, t412, -t408, t409, -t87 * t177 - t19 * t401 + t3 * t190 + t20 * t400 - t266 * t306 - t395, 0, 0, 0, 0, 0, 0, t412, t409, t408, t1 * t190 + t16 * t401 - t36 * t177 + t18 * t400 - t2 * t266 - t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, -t173 + t385 (t175 - t313) * qJD(3) + t316, -t350, -t284, qJDD(3), -t197 * t177 + t260 - t300 + t324, t197 * t175 + (t138 + t174) * qJD(3) - t317 - t258, 0, 0, t149 * t348 + t358, t175 * t261 + t104 + t357, -t353 - t388, -t349 * t404 + t276, t329 - t398, -t350, -qJ(4) * t355 + pkin(3) * t124 - t139 * t340 - t70 * t177 + (t231 * t323 - t80) * t175 + (-t245 + t324 + t359) * t233, -qJ(4) * t125 - pkin(3) * t116 - t139 * t149 + t71 * t177 + (t233 * t323 + t81) * t175 + t245 * t231, t80 * t149 + t81 * t340 + (qJ(4) * t124 - t81 * qJD(3) - qJD(4) * t340 - t70 * t175 + t35 + (qJD(3) * qJD(4) + t321) * t233) * t233 + (qJ(4) * t116 + qJD(4) * t149 - t175 * t71 - t34) * t231 + t258, -t126 * t139 - t70 * t80 - t71 * t81 + t282 * qJD(4) - t245 * pkin(3) + (-t34 * t231 + t35 * t233 + t258) * qJ(4), t11, t410, t27, t264, -t413, -t351, -t172 * t361 - t19 * t177 - t219 * t41 - t266 * t48 + t401 * t87 + t93 * t96 + t263, -t172 * t363 + t20 * t177 + t48 * t190 + t219 * t40 + t400 * t87 - t405 * t96 - t406, -t19 * t400 + t190 * t306 - t20 * t401 + t266 * t3 - t29 * t93 + t361 * t405 + t247, t3 * t146 - t306 * t267 - t48 * t219 - t87 * t96 - g(3) * (t223 * t372 + t194) + t363 * t20 - t361 * t19 + t292 * (t219 * t223 - t225 * t372) t11, t27, -t410, -t351, t413, t264, t131 * t41 + t16 * t177 - t172 * t362 - t266 * t6 + t36 * t401 - t370 * t93 + t263, t1 * t266 + t16 * t400 - t18 * t401 + t2 * t190 - t24 * t93 + t362 * t405 + t247, t131 * t40 + t172 * t364 - t18 * t177 - t6 * t190 - t36 * t400 - t370 * t405 + t406, -g(3) * t194 + t1 * t146 + t6 * t131 - t2 * t267 + t370 * t36 + t364 * t18 + t362 * t16 + (-g(3) * t285 - t292 * t372) * t225 + (-g(3) * t372 + t292 * (t219 + t285)) * t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149 * t175 - t301, t175 * t404 + t116, -t149 ^ 2 - t404 ^ 2, t149 * t70 - t404 * t71 + t245, 0, 0, 0, 0, 0, 0, t244, -t256, t290, t19 * t405 - t20 * t93 + t243, 0, 0, 0, 0, 0, 0, t244, t290, t256, -t16 * t405 - t18 * t93 + t243 + t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t374, -t318, t26, t374, -t399, t130, -t405 * t87 + t257 + t369, t172 * t19 - t87 * t93 - t246, 0, 0, -t374, t26, t318, t130, t399, t374, t53 * t93 - t248 + t369 + 0.2e1 * t380, pkin(5) * t40 - t41 * qJ(6) + (t18 - t20) * t405 - (t16 - t332) * t93, 0.2e1 * t356 + t36 * t93 + t53 * t405 + (0.2e1 * qJD(6) - t19) * t172 + t246, t1 * qJ(6) - t2 * pkin(5) - t36 * t53 - t16 * t20 - g(1) * (-pkin(5) * t159 + qJ(6) * t160) - g(2) * (-pkin(5) * t157 + qJ(6) * t158) - (-pkin(5) * t222 + qJ(6) * t224) * t375 + t332 * t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) - t284 - t374 - t393, t26, -t172 ^ 2 - t386, -t172 * t18 + t248 - t380;];
tau_reg  = t4;
