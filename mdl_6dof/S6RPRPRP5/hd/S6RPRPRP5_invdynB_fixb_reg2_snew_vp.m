% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:49:26
% EndTime: 2019-05-05 17:50:14
% DurationCPUTime: 50.12s
% Computational Cost: add. (146228->785), mult. (362244->1140), div. (0->0), fcn. (277208->10), ass. (0->563)
t1080 = sin(qJ(1));
t1083 = cos(qJ(1));
t1075 = sin(pkin(9));
t1077 = cos(pkin(9));
t1079 = sin(qJ(3));
t1082 = cos(qJ(3));
t1078 = sin(qJ(5));
t1081 = cos(qJ(5));
t1121 = qJDD(1) * t1082;
t1123 = qJDD(1) * t1079;
t1043 = -t1075 * t1121 - t1077 * t1123;
t1044 = (t1075 * t1079 - t1077 * t1082) * qJD(1);
t1135 = t1044 * qJD(3);
t1003 = -t1043 - t1135;
t1074 = sin(pkin(10));
t1076 = cos(pkin(10));
t1105 = -t1076 * qJDD(3) + t1003 * t1074;
t1046 = (t1075 * t1082 + t1077 * t1079) * qJD(1);
t1022 = -qJD(3) * t1076 + t1046 * t1074;
t1024 = qJD(3) * t1074 + t1046 * t1076;
t969 = t1081 * t1022 + t1024 * t1078;
t982 = t1074 * qJDD(3) + t1076 * t1003;
t1090 = -t969 * qJD(5) - t1078 * t1105 + t1081 * t982;
t1036 = qJD(5) + t1044;
t1145 = t969 * t1036;
t1197 = t1090 - t1145;
t971 = -t1022 * t1078 + t1024 * t1081;
t908 = t971 * t969;
t1042 = t1075 * t1123 - t1077 * t1121;
t1130 = t1046 * qJD(3);
t1002 = t1042 + t1130;
t994 = qJDD(5) + t1002;
t1199 = t908 + t994;
t1149 = t1081 * t1199;
t1179 = t1036 ^ 2;
t968 = t971 ^ 2;
t914 = -t968 - t1179;
t791 = t1078 * t914 + t1149;
t1159 = t1078 * t1199;
t800 = t1081 * t914 - t1159;
t717 = t1074 * t800 + t1076 * t791;
t675 = t1079 * t717 + t1082 * t1197;
t677 = -t1079 * t1197 + t1082 * t717;
t627 = t1075 * t675 - t1077 * t677;
t715 = t1074 * t791 - t1076 * t800;
t603 = t1080 * t627 + t1083 * t715;
t1317 = pkin(6) * t603;
t605 = -t1080 * t715 + t1083 * t627;
t1316 = pkin(6) * t605;
t619 = t1075 * t677 + t1077 * t675;
t1315 = qJ(2) * t619;
t1314 = -pkin(1) * t619 - pkin(2) * t675 - pkin(3) * t1197 - qJ(4) * t717;
t1313 = -pkin(1) * t715 - qJ(2) * t627;
t1107 = t1078 * t982 + t1081 * t1105;
t1092 = (-qJD(5) + t1036) * t971 - t1107;
t1182 = t969 ^ 2;
t939 = t1182 - t1179;
t818 = t1078 * t939 + t1149;
t822 = t1081 * t939 - t1159;
t751 = t1074 * t818 - t1076 * t822;
t693 = t1079 * t751 + t1082 * t1092;
t697 = -t1079 * t1092 + t1082 * t751;
t633 = t1075 * t693 - t1077 * t697;
t747 = t1074 * t822 + t1076 * t818;
t1312 = t1080 * t633 - t1083 * t747;
t825 = (qJD(5) + t1036) * t971 + t1107;
t757 = -t1078 * t825 + t1081 * t1197;
t1161 = t1078 * t1197;
t760 = t1081 * t825 + t1161;
t667 = t1074 * t757 + t1076 * t760;
t906 = t968 - t1182;
t653 = t1079 * t667 + t1082 * t906;
t655 = -t1079 * t906 + t1082 * t667;
t602 = t1075 * t653 - t1077 * t655;
t666 = t1074 * t760 - t1076 * t757;
t1311 = t1080 * t602 + t1083 * t666;
t1310 = t1080 * t747 + t1083 * t633;
t1309 = -t1080 * t666 + t1083 * t602;
t1308 = pkin(7) * t675;
t1306 = -pkin(2) * t715 + pkin(7) * t677;
t1305 = t1075 * t655 + t1077 * t653;
t1304 = t1075 * t697 + t1077 * t693;
t1301 = qJ(4) * t715;
t1294 = -pkin(3) * t715 + pkin(4) * t800;
t1196 = -t1145 - t1090;
t1190 = -t1078 * t1196 + t1081 * t1092;
t1192 = t1078 * t1092 + t1081 * t1196;
t1201 = t1074 * t1190 + t1076 * t1192;
t1202 = -t1074 * t1192 + t1076 * t1190;
t851 = t968 + t1182;
t1240 = t1079 * t1202 + t1082 * t851;
t1241 = -t1079 * t851 + t1082 * t1202;
t1255 = -t1075 * t1240 + t1077 * t1241;
t1281 = t1080 * t1201 + t1083 * t1255;
t1292 = pkin(6) * t1281;
t1282 = t1080 * t1255 - t1083 * t1201;
t1291 = pkin(6) * t1282;
t1200 = -t908 + t994;
t1158 = t1078 * t1200;
t940 = -t968 + t1179;
t1224 = t1081 * t940 + t1158;
t870 = t1081 * t1200;
t1225 = -t1078 * t940 + t870;
t1237 = -t1074 * t1225 - t1076 * t1224;
t1236 = -t1074 * t1224 + t1076 * t1225;
t1259 = -t1079 * t1196 + t1082 * t1236;
t1262 = t1079 * t1236 + t1082 * t1196;
t1280 = -t1075 * t1262 + t1077 * t1259;
t1290 = t1080 * t1280 + t1083 * t1237;
t1289 = -t1080 * t1237 + t1083 * t1280;
t1287 = pkin(8) * t791;
t1286 = pkin(8) * t800;
t1256 = t1075 * t1241 + t1077 * t1240;
t1285 = qJ(2) * t1256;
t1284 = -pkin(1) * t1256 - pkin(2) * t1240 - pkin(3) * t851 - qJ(4) * t1202;
t1283 = -pkin(1) * t1201 + qJ(2) * t1255;
t1279 = t1075 * t1259 + t1077 * t1262;
t1195 = -t1179 - t1182;
t1206 = t1081 * t1195 - t1158;
t1210 = t1078 * t1195 + t870;
t1238 = t1074 * t1206 + t1076 * t1210;
t1278 = pkin(1) * t1238;
t1277 = pkin(2) * t1238;
t1276 = pkin(7) * t1240;
t1275 = qJ(4) * t1238;
t1239 = -t1074 * t1210 + t1076 * t1206;
t1274 = qJ(4) * t1239;
t1271 = t1079 * t1239;
t1269 = t1080 * t1238;
t1268 = t1082 * t1239;
t1266 = t1083 * t1238;
t1264 = -pkin(3) * t1238 - pkin(4) * t1210;
t1263 = -pkin(2) * t1201 + pkin(7) * t1241;
t1093 = (-t1078 * t969 - t1081 * t971) * t1036;
t1138 = t1036 * t1081;
t1114 = t969 * t1138;
t1139 = t1036 * t1078;
t934 = t971 * t1139;
t1099 = t934 - t1114;
t1188 = -t1074 * t1099 - t1076 * t1093;
t1187 = -t1074 * t1093 + t1076 * t1099;
t1204 = t1079 * t994 + t1082 * t1187;
t1209 = t1079 * t1187 - t1082 * t994;
t1235 = -t1075 * t1209 + t1077 * t1204;
t1261 = t1080 * t1235 + t1083 * t1188;
t871 = -qJD(5) * t971 - t1107;
t1096 = -t1078 * t871 + t1114;
t1100 = t1081 * t871 + t1139 * t969;
t1185 = -t1074 * t1096 - t1076 * t1100;
t1118 = t1079 * t908;
t1186 = -t1074 * t1100 + t1076 * t1096;
t1205 = t1082 * t1186 - t1118;
t1117 = t1082 * t908;
t1207 = t1079 * t1186 + t1117;
t1233 = -t1075 * t1207 + t1077 * t1205;
t1260 = t1080 * t1233 + t1083 * t1185;
t1258 = -t1080 * t1188 + t1083 * t1235;
t1257 = -t1080 * t1185 + t1083 * t1233;
t1251 = pkin(8) * t1206;
t1250 = pkin(8) * t1210;
t1249 = qJ(4) * t1201;
t1057 = t1083 * g(1) + t1080 * g(2);
t1244 = -0.2e1 * qJD(2) * qJD(1) + t1057;
t1243 = pkin(4) * t851 + pkin(8) * t1190;
t635 = -pkin(3) * t1201 - pkin(4) * t1192;
t1234 = t1075 * t1204 + t1077 * t1209;
t1232 = t1075 * t1205 + t1077 * t1207;
t1231 = 2 * qJD(6);
t1227 = pkin(8) * t1192;
t1226 = qJ(6) * t1197;
t974 = t1024 * t1022;
t1198 = t1002 - t974;
t1223 = t1074 * t1198;
t1222 = t1076 * t1198;
t1008 = t1046 * t1044;
t1194 = -t1008 + qJDD(3);
t1221 = t1079 * t1194;
t1216 = t1082 * t1194;
t1084 = qJD(1) ^ 2;
t1211 = -t1084 * pkin(1) + qJDD(1) * qJ(2) - t1244;
t813 = t1078 * t1090 + t1138 * t971;
t814 = t1081 * t1090 - t934;
t744 = -t1074 * t813 + t1076 * t814;
t1102 = t1079 * t744 - t1117;
t1103 = t1082 * t744 + t1118;
t1183 = -t1075 * t1102 + t1077 * t1103;
t743 = -t1074 * t814 - t1076 * t813;
t1208 = t1080 * t1183 + t1083 * t743;
t1203 = -t1080 * t743 + t1083 * t1183;
t1056 = g(1) * t1080 - t1083 * g(2);
t1098 = -qJDD(2) + t1056;
t1116 = pkin(2) * t1077 + pkin(1);
t1070 = t1075 ^ 2;
t1071 = t1077 ^ 2;
t1125 = t1070 + t1071;
t997 = t1116 * qJDD(1) + (pkin(7) * t1125 + qJ(2)) * t1084 + t1098;
t988 = t1044 * t1022;
t928 = -t982 - t988;
t927 = t988 - t982;
t1181 = qJD(3) ^ 2;
t1175 = t1077 * g(3);
t1087 = -t1175 + (t1116 * t1084 + (-pkin(7) - qJ(2)) * qJDD(1) + t1244) * t1075;
t1010 = -g(3) * t1075 + t1077 * t1211;
t1067 = t1071 * t1084;
t1124 = qJDD(1) * t1077;
t985 = -pkin(2) * t1067 + pkin(7) * t1124 + t1010;
t912 = t1079 * t1087 + t1082 * t985;
t993 = pkin(3) * t1044 - qJ(4) * t1046;
t872 = -pkin(3) * t1181 + qJDD(3) * qJ(4) - t1044 * t993 + t912;
t887 = (-t1003 + t1135) * qJ(4) + (t1002 + t1130) * pkin(3) - t997;
t777 = 0.2e1 * qJD(4) * t1024 + t1074 * t872 - t1076 * t887;
t730 = pkin(4) * t1198 + pkin(8) * t928 - t777;
t1180 = t1022 ^ 2;
t778 = -0.2e1 * qJD(4) * t1022 + t1074 * t887 + t1076 * t872;
t981 = pkin(4) * t1044 - pkin(8) * t1024;
t755 = -pkin(4) * t1180 - pkin(8) * t1105 - t1044 * t981 + t778;
t662 = t1078 * t730 + t1081 * t755;
t903 = pkin(5) * t969 - qJ(6) * t971;
t1097 = t994 * qJ(6) + t1036 * t1231 - t969 * t903 + t662;
t1191 = t1084 * t1125;
t1184 = t1075 * t1103 + t1077 * t1102;
t1017 = t1024 ^ 2;
t1178 = t1044 ^ 2;
t1041 = t1046 ^ 2;
t1177 = pkin(3) * t1079;
t1176 = pkin(5) * t1081;
t1174 = qJDD(1) * pkin(1);
t661 = t1078 * t755 - t1081 * t730;
t1173 = qJ(6) * t1081;
t1172 = t1036 * t971;
t608 = t1078 * t662 - t1081 * t661;
t1171 = t1074 * t608;
t911 = t1079 * t985 - t1082 * t1087;
t869 = -qJDD(3) * pkin(3) - t1181 * qJ(4) + t1046 * t993 + qJDD(4) + t911;
t1170 = t1074 * t869;
t931 = t1002 + t974;
t1169 = t1074 * t931;
t842 = t1079 * t912 - t1082 * t911;
t1168 = t1075 * t842;
t1167 = t1076 * t608;
t1166 = t1076 * t869;
t1165 = t1076 * t931;
t1164 = t1077 * t842;
t788 = t1105 * pkin(4) - t1180 * pkin(8) + t1024 * t981 + t869;
t1163 = t1078 * t788;
t1154 = t1079 * t997;
t998 = qJDD(3) + t1008;
t1153 = t1079 * t998;
t1151 = t1081 * t788;
t1147 = t1082 * t997;
t1146 = t1082 * t998;
t1144 = -t1179 + t851;
t1141 = t1002 * t1079;
t1140 = t1024 * t1044;
t1037 = qJ(2) * t1084 + t1098 + t1174;
t1137 = t1037 * t1080;
t1136 = t1037 * t1083;
t1134 = t1044 * t1074;
t1133 = t1044 * t1076;
t1132 = t1044 * t1079;
t1131 = t1044 * t1082;
t1129 = t1046 * t1079;
t1128 = t1046 * t1082;
t1127 = t1070 * t1084;
t1126 = t1075 * t1077;
t1122 = qJDD(1) * t1080;
t1120 = qJDD(1) * t1083;
t1115 = -pkin(3) * t1082 - pkin(2);
t1113 = t1079 * t974;
t1112 = t1082 * t974;
t1111 = t1080 * t1008;
t1110 = t1083 * t1008;
t1109 = -qJ(6) * t1078 - pkin(4);
t1108 = t1037 + t1174;
t609 = t1078 * t661 + t1081 * t662;
t843 = t1079 * t911 + t1082 * t912;
t1009 = t1075 * t1211 + t1175;
t952 = t1009 * t1075 + t1077 * t1010;
t1025 = -t1056 * t1080 - t1083 * t1057;
t1104 = t971 * t903 + qJDD(6) + t661;
t1055 = -t1080 * t1084 + t1120;
t1101 = -pkin(6) * t1055 - g(3) * t1080;
t701 = t1074 * t778 - t1076 * t777;
t702 = t1074 * t777 + t1076 * t778;
t951 = t1009 * t1077 - t1010 * t1075;
t1023 = t1056 * t1083 - t1057 * t1080;
t1054 = t1083 * t1084 + t1122;
t1095 = -pkin(5) * t994 + t1104;
t929 = t1105 - t1140;
t1048 = t1077 * t1191;
t1019 = -t1048 * t1080 + t1077 * t1120;
t1094 = t1048 * t1083 + t1077 * t1122;
t1089 = -t871 * pkin(5) - t1226 + t788;
t1088 = t1231 * t971 - t1089;
t1066 = t1071 * qJDD(1);
t1064 = t1070 * qJDD(1);
t1053 = t1067 - t1127;
t1052 = t1067 + t1127;
t1051 = t1066 - t1064;
t1050 = t1066 + t1064;
t1047 = t1075 * t1191;
t1038 = -pkin(6) * t1054 + g(3) * t1083;
t1031 = -t1041 - t1181;
t1030 = -t1041 + t1181;
t1029 = t1178 - t1181;
t1027 = t1055 * t1126;
t1026 = t1054 * t1126;
t1020 = t1047 * t1083 + t1075 * t1122;
t1018 = t1047 * t1080 - t1075 * t1120;
t1012 = t1050 * t1083 - t1052 * t1080;
t1011 = t1050 * t1080 + t1052 * t1083;
t1006 = -t1041 + t1178;
t1004 = t1043 + 0.2e1 * t1135;
t1001 = t1042 + 0.2e1 * t1130;
t995 = -t1178 - t1181;
t992 = t1082 * t1002;
t987 = (t1129 - t1131) * qJD(3);
t986 = (-t1128 - t1132) * qJD(3);
t984 = -t1017 + t1178;
t983 = -t1178 + t1180;
t975 = -t1178 - t1041;
t972 = -t1017 + t1180;
t965 = -qJD(3) * t1129 + t1003 * t1082;
t964 = qJD(3) * t1128 + t1003 * t1079;
t963 = qJD(3) * t1131 + t1141;
t962 = qJD(3) * t1132 - t992;
t961 = -t1017 - t1178;
t959 = -t1031 * t1079 - t1146;
t958 = -t1030 * t1079 + t1216;
t957 = t1029 * t1082 - t1153;
t956 = t1031 * t1082 - t1153;
t955 = t1030 * t1082 + t1221;
t954 = t1029 * t1079 + t1146;
t953 = -t1178 - t1180;
t945 = -t1001 * t1082 + t1004 * t1079;
t944 = -t1042 * t1082 - t1043 * t1079;
t943 = -t1001 * t1079 - t1004 * t1082;
t942 = -t1042 * t1079 + t1043 * t1082;
t937 = t1082 * t995 - t1221;
t936 = t1079 * t995 + t1216;
t935 = t1017 + t1180;
t924 = -t1105 - t1140;
t923 = (t1022 * t1074 + t1024 * t1076) * t1044;
t922 = (-t1022 * t1076 + t1024 * t1074) * t1044;
t921 = -t1075 * t986 + t1077 * t987;
t920 = -t1024 * t1134 + t1076 * t982;
t919 = -t1022 * t1134 + t1076 * t1105;
t918 = -t1024 * t1133 - t1074 * t982;
t917 = t1022 * t1133 + t1074 * t1105;
t916 = t1083 * t952 - t1137;
t915 = t1080 * t952 + t1136;
t909 = -pkin(7) * t956 - t1147;
t904 = -pkin(7) * t936 - t1154;
t902 = -t1075 * t964 + t1077 * t965;
t901 = -t1075 * t962 + t1077 * t963;
t900 = -t1075 * t956 + t1077 * t959;
t899 = -t1075 * t955 + t1077 * t958;
t898 = -t1075 * t954 + t1077 * t957;
t897 = t1075 * t959 + t1077 * t956;
t896 = t1082 * t922 + t1141;
t895 = t1079 * t922 - t992;
t892 = -t1076 * t984 - t1223;
t891 = t1076 * t983 - t1169;
t890 = -t1074 * t983 - t1165;
t889 = -t1074 * t984 + t1222;
t888 = pkin(2) * t1004 + pkin(7) * t959 - t1154;
t884 = t1082 * t920 + t1113;
t883 = t1082 * t917 - t1113;
t882 = t1079 * t920 - t1112;
t881 = t1079 * t917 + t1112;
t875 = -t1074 * t961 - t1165;
t874 = t1076 * t961 - t1169;
t873 = -pkin(2) * t1001 + pkin(7) * t937 + t1147;
t860 = -t1075 * t943 + t1077 * t945;
t859 = -t1075 * t942 + t1077 * t944;
t858 = t1075 * t944 + t1077 * t942;
t857 = t1076 * t953 - t1223;
t856 = t1074 * t953 + t1222;
t855 = -t1075 * t936 + t1077 * t937;
t854 = t1075 * t937 + t1077 * t936;
t853 = -t1004 * t1080 + t1083 * t900;
t852 = t1004 * t1083 + t1080 * t900;
t847 = -t1074 * t924 + t1076 * t927;
t846 = -t1074 * t928 - t1076 * t929;
t845 = t1074 * t927 + t1076 * t924;
t844 = -t1074 * t929 + t1076 * t928;
t841 = t1001 * t1080 + t1083 * t855;
t840 = -t1001 * t1083 + t1080 * t855;
t839 = t1080 * t975 + t1083 * t859;
t838 = t1080 * t859 - t1083 * t975;
t837 = -t1079 * t929 + t1082 * t891;
t836 = -t1079 * t928 + t1082 * t889;
t835 = t1079 * t891 + t1082 * t929;
t834 = t1079 * t889 + t1082 * t928;
t826 = -t871 + t1172;
t823 = pkin(2) * t997 + pkin(7) * t843;
t808 = -pkin(1) * t858 - pkin(2) * t942;
t807 = -t1079 * t972 + t1082 * t845;
t806 = t1079 * t845 + t1082 * t972;
t805 = -t1079 * t927 + t1082 * t875;
t804 = t1079 * t875 + t1082 * t927;
t799 = -t1079 * t924 + t1082 * t857;
t798 = t1079 * t857 + t1082 * t924;
t797 = -t1079 * t935 + t1082 * t846;
t796 = t1079 * t846 + t1082 * t935;
t795 = -t1075 * t895 + t1077 * t896;
t794 = -pkin(7) * t942 - t842;
t793 = -pkin(1) * t897 - pkin(2) * t956 + t912;
t787 = -t1075 * t882 + t1077 * t884;
t786 = -t1075 * t881 + t1077 * t883;
t785 = -qJ(4) * t874 + t1166;
t780 = -qJ(4) * t856 + t1170;
t779 = -pkin(2) * t975 + pkin(7) * t944 + t843;
t776 = -pkin(1) * t854 - pkin(2) * t936 + t911;
t771 = -qJ(2) * t897 - t1075 * t888 + t1077 * t909;
t770 = t1077 * t843 - t1168;
t769 = t1075 * t843 + t1164;
t768 = -qJ(2) * t854 - t1075 * t873 + t1077 * t904;
t767 = -t1080 * t997 + t1083 * t770;
t766 = t1080 * t770 + t1083 * t997;
t765 = -t1075 * t835 + t1077 * t837;
t764 = -t1075 * t834 + t1077 * t836;
t735 = -t1075 * t806 + t1077 * t807;
t734 = -pkin(3) * t874 + t778;
t733 = -pkin(3) * t856 + t777;
t732 = -t1075 * t804 + t1077 * t805;
t731 = t1075 * t805 + t1077 * t804;
t723 = -t1075 * t798 + t1077 * t799;
t722 = t1075 * t799 + t1077 * t798;
t721 = -t1075 * t796 + t1077 * t797;
t720 = t1075 * t797 + t1077 * t796;
t719 = t1151 - t1286;
t714 = t1163 - t1250;
t705 = -pkin(1) * t769 - pkin(2) * t842;
t704 = t1080 * t874 + t1083 * t732;
t703 = t1080 * t732 - t1083 * t874;
t700 = t1080 * t856 + t1083 * t723;
t699 = t1080 * t723 - t1083 * t856;
t690 = t1080 * t844 + t1083 * t721;
t689 = t1080 * t721 - t1083 * t844;
t686 = t1079 * t826 + t1268;
t684 = -t1082 * t826 + t1271;
t682 = -qJ(2) * t858 - t1075 * t779 + t1077 * t794;
t681 = -pkin(4) * t1197 + t1163 - t1287;
t680 = t1089 + (pkin(5) * t1036 - (2 * qJD(6))) * t971;
t679 = -pkin(4) * t825 - t1151 + t1251;
t678 = t1079 * t825 + t1268;
t676 = -t1082 * t825 + t1271;
t674 = t1079 * t869 + t1082 * t702;
t673 = t1079 * t702 - t1082 * t869;
t672 = -pkin(7) * t1164 - qJ(2) * t769 - t1075 * t823;
t671 = -qJ(4) * t844 - t701;
t659 = t1088 + (-t826 - t1172) * pkin(5);
t658 = -pkin(7) * t804 - t1079 * t734 + t1082 * t785;
t657 = -pkin(5) * t1172 + t1088 + t1226;
t652 = -pkin(7) * t798 - t1079 * t733 + t1082 * t780;
t647 = -pkin(1) * t731 - pkin(2) * t804 - pkin(3) * t927 - qJ(4) * t875 - t1170;
t646 = -pkin(1) * t722 - pkin(2) * t798 - pkin(3) * t924 - qJ(4) * t857 + t1166;
t645 = -pkin(2) * t874 + pkin(7) * t805 + t1079 * t785 + t1082 * t734;
t640 = qJ(6) * t1179 - t1095;
t639 = -pkin(5) * t1179 + t1097;
t638 = -pkin(2) * t856 + pkin(7) * t799 + t1079 * t780 + t1082 * t733;
t637 = -pkin(7) * t796 + t1082 * t671 + t1177 * t844;
t636 = qJ(6) * t1144 + t1095;
t634 = pkin(5) * t1144 + t1097;
t629 = pkin(7) * t797 + t1079 * t671 + t1115 * t844;
t628 = -t1075 * t684 + t1077 * t686;
t626 = t1075 * t686 + t1077 * t684;
t624 = -t1078 * t659 - t1173 * t826 - t1250;
t623 = -pkin(5) * t1161 + t1081 * t657 + t1286;
t622 = -t1075 * t676 + t1077 * t678;
t620 = t1075 * t678 + t1077 * t676;
t618 = -t1075 * t673 + t1077 * t674;
t617 = t1075 * t674 + t1077 * t673;
t616 = -pkin(1) * t720 - pkin(2) * t796 - pkin(3) * t935 - qJ(4) * t846 - t702;
t615 = -t1294 + t662;
t614 = t1081 * t659 + t1109 * t826 + t1251;
t613 = t1287 + t1078 * t657 + (pkin(4) + t1176) * t1197;
t612 = -t1074 * t681 + t1076 * t719 + t1301;
t611 = t1264 + t661;
t610 = -pkin(5) * t1196 - qJ(6) * t1092 + t635;
t607 = -t1074 * t679 + t1076 * t714 - t1275;
t606 = t1083 * t628 + t1269;
t604 = t1080 * t628 - t1266;
t600 = -pkin(7) * t673 + (-qJ(4) * t1082 + t1177) * t701;
t599 = (-t1179 - t1195) * qJ(6) + (-t1200 - t994) * pkin(5) + t1104 + t1264;
t594 = t1083 * t622 + t1269;
t592 = t1080 * t622 - t1266;
t590 = -pkin(4) * t788 + pkin(8) * t609;
t589 = t1080 * t701 + t1083 * t618;
t588 = t1080 * t618 - t1083 * t701;
t587 = -qJ(6) * t1199 + (t1179 + t914) * pkin(5) - t1097 + t1294;
t586 = -t608 - t1227;
t585 = -t1078 * t640 + t1081 * t639;
t584 = t1078 * t639 + t1081 * t640;
t583 = t1243 + t609;
t582 = -qJ(2) * t731 - t1075 * t645 + t1077 * t658;
t581 = -qJ(2) * t722 - t1075 * t638 + t1077 * t652;
t580 = pkin(7) * t674 + (-qJ(4) * t1079 + t1115) * t701;
t575 = -t1078 * t634 + t1081 * t636 - t1227;
t574 = -qJ(2) * t720 - t1075 * t629 + t1077 * t637;
t573 = -pkin(1) * t617 - pkin(2) * t673 + pkin(3) * t869 - qJ(4) * t702;
t572 = t1078 * t636 + t1081 * t634 + t1243;
t571 = -t1074 * t614 + t1076 * t624 - t1275;
t570 = t1076 * t609 - t1171;
t569 = t1074 * t609 + t1167;
t568 = -t1074 * t613 + t1076 * t623 - t1301;
t567 = -pkin(8) * t584 + (pkin(5) * t1078 - t1173) * t680;
t566 = t1079 * t788 + t1082 * t570;
t565 = t1079 * t570 - t1082 * t788;
t564 = -t1074 * t719 - t1076 * t681 - t1314;
t563 = -t1079 * t615 + t1082 * t612 + t1308;
t562 = -pkin(7) * t676 - t1079 * t611 + t1082 * t607;
t561 = -pkin(1) * t620 - pkin(2) * t676 + pkin(3) * t825 - t1074 * t714 - t1076 * t679 - t1274;
t560 = t1079 * t612 + t1082 * t615 - t1306;
t559 = -t1074 * t584 + t1076 * t585;
t558 = t1074 * t585 + t1076 * t584;
t557 = pkin(8) * t585 + (t1109 - t1176) * t680;
t556 = pkin(7) * t678 + t1079 * t607 + t1082 * t611 - t1277;
t555 = t1079 * t680 + t1082 * t559;
t554 = t1079 * t559 - t1082 * t680;
t553 = -pkin(3) * t569 - pkin(4) * t608;
t552 = -t1074 * t583 + t1076 * t586 - t1249;
t551 = -pkin(1) * t626 - pkin(2) * t684 + pkin(3) * t826 - t1074 * t624 - t1076 * t614 - t1274;
t550 = -t1074 * t623 - t1076 * t613 + t1314;
t549 = -qJ(2) * t617 - t1075 * t580 + t1077 * t600;
t548 = -pkin(7) * t684 - t1079 * t599 + t1082 * t571;
t547 = -t1079 * t587 + t1082 * t568 - t1308;
t546 = pkin(7) * t686 + t1079 * t571 + t1082 * t599 - t1277;
t545 = -t1074 * t572 + t1076 * t575 - t1249;
t544 = t1079 * t568 + t1082 * t587 + t1306;
t543 = -pkin(8) * t1167 - qJ(4) * t569 - t1074 * t590;
t542 = -t1075 * t565 + t1077 * t566;
t541 = t1075 * t566 + t1077 * t565;
t540 = -t1079 * t635 + t1082 * t552 - t1276;
t539 = t1079 * t552 + t1082 * t635 + t1263;
t538 = -t1074 * t586 - t1076 * t583 + t1284;
t537 = -pkin(3) * t558 - pkin(4) * t584 - pkin(5) * t640 - qJ(6) * t639;
t536 = -t1079 * t610 + t1082 * t545 - t1276;
t535 = -t1075 * t560 + t1077 * t563 + t1315;
t534 = -t1074 * t575 - t1076 * t572 + t1284;
t533 = -t1075 * t554 + t1077 * t555;
t532 = t1075 * t555 + t1077 * t554;
t531 = t1079 * t545 + t1082 * t610 + t1263;
t530 = -qJ(2) * t620 - t1075 * t556 + t1077 * t562;
t529 = t1080 * t569 + t1083 * t542;
t528 = t1080 * t542 - t1083 * t569;
t527 = -qJ(4) * t558 - t1074 * t557 + t1076 * t567;
t526 = -qJ(2) * t626 - t1075 * t546 + t1077 * t548;
t525 = t1080 * t558 + t1083 * t533;
t524 = t1080 * t533 - t1083 * t558;
t523 = -t1075 * t544 + t1077 * t547 - t1315;
t522 = -pkin(7) * t565 - t1079 * t553 + t1082 * t543;
t521 = -t1075 * t539 + t1077 * t540 - t1285;
t520 = -pkin(1) * t541 - pkin(2) * t565 + pkin(3) * t788 + pkin(8) * t1171 - qJ(4) * t570 - t1076 * t590;
t519 = -pkin(2) * t569 + pkin(7) * t566 + t1079 * t543 + t1082 * t553;
t518 = -t1075 * t531 + t1077 * t536 - t1285;
t517 = -pkin(7) * t554 - t1079 * t537 + t1082 * t527;
t516 = -pkin(1) * t532 - pkin(2) * t554 + pkin(3) * t680 - qJ(4) * t559 - t1074 * t567 - t1076 * t557;
t515 = -pkin(2) * t558 + pkin(7) * t555 + t1079 * t527 + t1082 * t537;
t514 = -qJ(2) * t541 - t1075 * t519 + t1077 * t522;
t513 = -qJ(2) * t532 - t1075 * t515 + t1077 * t517;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1054, -t1055, 0, t1025, 0, 0, 0, 0, 0, 0, -t1094, t1020, t1012, t916, 0, 0, 0, 0, 0, 0, t841, t853, t839, t767, 0, 0, 0, 0, 0, 0, t700, t704, t690, t589, 0, 0, 0, 0, 0, 0, t594, t605, t1281, t529, 0, 0, 0, 0, 0, 0, t606, t1281, -t605, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1055, -t1054, 0, t1023, 0, 0, 0, 0, 0, 0, t1019, t1018, t1011, t915, 0, 0, 0, 0, 0, 0, t840, t852, t838, t766, 0, 0, 0, 0, 0, 0, t699, t703, t689, t588, 0, 0, 0, 0, 0, 0, t592, t603, t1282, t528, 0, 0, 0, 0, 0, 0, t604, t1282, -t603, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t951, 0, 0, 0, 0, 0, 0, t854, t897, t858, t769, 0, 0, 0, 0, 0, 0, t722, t731, t720, t617, 0, 0, 0, 0, 0, 0, t620, -t619, t1256, t541, 0, 0, 0, 0, 0, 0, t626, t1256, t619, t532; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1055, 0, -t1054, 0, t1101, -t1038, -t1023, -pkin(6) * t1023, t1027, t1051 * t1083 - t1053 * t1080, t1020, -t1027, t1094, 0, -pkin(6) * t1019 - t1009 * t1080 - t1075 * t1136, -pkin(6) * t1018 - t1010 * t1080 - t1077 * t1136, -pkin(6) * t1011 + t1083 * t951, -pkin(6) * t915 - (pkin(1) * t1080 - qJ(2) * t1083) * t951, t1083 * t902 + t1111, -t1006 * t1080 + t1083 * t860, -t1043 * t1080 + t1083 * t899, t1083 * t901 - t1111, -t1042 * t1080 + t1083 * t898, qJDD(3) * t1080 + t1083 * t921, -pkin(6) * t840 - t1080 * t776 + t1083 * t768, -pkin(6) * t852 - t1080 * t793 + t1083 * t771, -pkin(6) * t838 - t1080 * t808 + t1083 * t682, -pkin(6) * t766 - t1080 * t705 + t1083 * t672, -t1080 * t918 + t1083 * t787, -t1080 * t847 + t1083 * t735, -t1080 * t892 + t1083 * t764, -t1080 * t919 + t1083 * t786, -t1080 * t890 + t1083 * t765, -t1080 * t923 + t1083 * t795, -pkin(6) * t699 - t1080 * t646 + t1083 * t581, -pkin(6) * t703 - t1080 * t647 + t1083 * t582, -pkin(6) * t689 - t1080 * t616 + t1083 * t574, -pkin(6) * t588 - t1080 * t573 + t1083 * t549, t1203, t1309, t1289, t1257, t1310, t1258, -pkin(6) * t592 - t1080 * t561 + t1083 * t530, -t1080 * t564 + t1083 * t535 - t1317, -t1080 * t538 + t1083 * t521 - t1291, -pkin(6) * t528 - t1080 * t520 + t1083 * t514, t1203, t1289, -t1309, t1258, -t1310, t1257, -pkin(6) * t604 - t1080 * t551 + t1083 * t526, -t1080 * t534 + t1083 * t518 - t1291, -t1080 * t550 + t1083 * t523 + t1317, -pkin(6) * t524 - t1080 * t516 + t1083 * t513; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1054, 0, t1055, 0, t1038, t1101, t1025, pkin(6) * t1025, t1026, t1051 * t1080 + t1053 * t1083, t1018, -t1026, -t1019, 0, -pkin(6) * t1094 + t1009 * t1083 - t1075 * t1137, pkin(6) * t1020 + t1010 * t1083 - t1077 * t1137, pkin(6) * t1012 + t1080 * t951, pkin(6) * t916 - (-pkin(1) * t1083 - qJ(2) * t1080) * t951, t1080 * t902 - t1110, t1006 * t1083 + t1080 * t860, t1043 * t1083 + t1080 * t899, t1080 * t901 + t1110, t1042 * t1083 + t1080 * t898, -qJDD(3) * t1083 + t1080 * t921, pkin(6) * t841 + t1080 * t768 + t1083 * t776, pkin(6) * t853 + t1080 * t771 + t1083 * t793, pkin(6) * t839 + t1080 * t682 + t1083 * t808, pkin(6) * t767 + t1080 * t672 + t1083 * t705, t1080 * t787 + t1083 * t918, t1080 * t735 + t1083 * t847, t1080 * t764 + t1083 * t892, t1080 * t786 + t1083 * t919, t1080 * t765 + t1083 * t890, t1080 * t795 + t1083 * t923, pkin(6) * t700 + t1080 * t581 + t1083 * t646, pkin(6) * t704 + t1080 * t582 + t1083 * t647, pkin(6) * t690 + t1080 * t574 + t1083 * t616, pkin(6) * t589 + t1080 * t549 + t1083 * t573, t1208, t1311, t1290, t1260, t1312, t1261, pkin(6) * t594 + t1080 * t530 + t1083 * t561, t1080 * t535 + t1083 * t564 + t1316, t1080 * t521 + t1083 * t538 + t1292, pkin(6) * t529 + t1080 * t514 + t1083 * t520, t1208, t1290, -t1311, t1261, -t1312, t1260, pkin(6) * t606 + t1080 * t526 + t1083 * t551, t1080 * t518 + t1083 * t534 + t1292, t1080 * t523 + t1083 * t550 - t1316, pkin(6) * t525 + t1080 * t513 + t1083 * t516; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1056, t1057, 0, 0, t1064, 0.2e1 * t1075 * t1124, 0, t1066, 0, 0, -qJ(2) * t1048 + t1077 * t1108, qJ(2) * t1047 - t1075 * t1108, pkin(1) * t1052 + qJ(2) * t1050 + t952, pkin(1) * t1037 + qJ(2) * t952, t1075 * t965 + t1077 * t964, t1075 * t945 + t1077 * t943, t1075 * t958 + t1077 * t955, t1075 * t963 + t1077 * t962, t1075 * t957 + t1077 * t954, t1075 * t987 + t1077 * t986, -pkin(1) * t1001 + qJ(2) * t855 + t1075 * t904 + t1077 * t873, pkin(1) * t1004 + qJ(2) * t900 + t1075 * t909 + t1077 * t888, -pkin(1) * t975 + qJ(2) * t859 + t1075 * t794 + t1077 * t779, pkin(1) * t997 - pkin(7) * t1168 + qJ(2) * t770 + t1077 * t823, t1075 * t884 + t1077 * t882, t1075 * t807 + t1077 * t806, t1075 * t836 + t1077 * t834, t1075 * t883 + t1077 * t881, t1075 * t837 + t1077 * t835, t1075 * t896 + t1077 * t895, -pkin(1) * t856 + qJ(2) * t723 + t1075 * t652 + t1077 * t638, -pkin(1) * t874 + qJ(2) * t732 + t1075 * t658 + t1077 * t645, -pkin(1) * t844 + qJ(2) * t721 + t1075 * t637 + t1077 * t629, -pkin(1) * t701 + qJ(2) * t618 + t1075 * t600 + t1077 * t580, t1184, -t1305, t1279, t1232, -t1304, t1234, qJ(2) * t622 + t1075 * t562 + t1077 * t556 - t1278, t1075 * t563 + t1077 * t560 - t1313, t1075 * t540 + t1077 * t539 + t1283, -pkin(1) * t569 + qJ(2) * t542 + t1075 * t522 + t1077 * t519, t1184, t1279, t1305, t1234, t1304, t1232, qJ(2) * t628 + t1075 * t548 + t1077 * t546 - t1278, t1075 * t536 + t1077 * t531 + t1283, t1075 * t547 + t1077 * t544 + t1313, -pkin(1) * t558 + qJ(2) * t533 + t1075 * t517 + t1077 * t515;];
tauB_reg  = t1;
