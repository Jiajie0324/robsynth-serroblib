% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRP5_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP5_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP5_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP5_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:16:19
% EndTime: 2019-03-09 03:16:34
% DurationCPUTime: 5.41s
% Computational Cost: add. (9364->430), mult. (24615->540), div. (0->0), fcn. (19196->8), ass. (0->211)
t197 = sin(pkin(9));
t199 = cos(pkin(9));
t201 = sin(qJ(3));
t295 = cos(qJ(3));
t173 = t295 * t197 + t201 * t199;
t162 = t173 * qJD(1);
t196 = sin(pkin(10));
t198 = cos(pkin(10));
t139 = qJD(3) * t196 + t162 * t198;
t200 = sin(qJ(5));
t294 = cos(qJ(5));
t261 = t196 * t162;
t312 = qJD(3) * t198 - t261;
t213 = t294 * t312;
t89 = -t139 * t200 + t213;
t324 = t89 ^ 2;
t240 = qJD(1) * t295;
t185 = t199 * t240;
t257 = t201 * t197;
t243 = qJD(1) * t257;
t160 = -t185 + t243;
t157 = qJD(5) + t160;
t323 = t157 * t89;
t283 = t162 * t89;
t167 = t173 * qJD(3);
t152 = qJD(1) * t167;
t244 = t294 * t198;
t214 = -t196 * t200 + t244;
t172 = t294 * t196 + t200 * t198;
t165 = t172 * qJD(5);
t309 = t172 * t160 + t165;
t299 = -t152 * t214 + t157 * t309;
t322 = t283 + t299;
t321 = -t299 + t283;
t314 = t294 * t139 + t200 * t312;
t297 = t314 ^ 2;
t320 = t157 * t314;
t238 = qJD(5) * t294;
t247 = qJD(5) * t200;
t302 = -t196 * t247 + t198 * t238;
t308 = t214 * t160 + t302;
t184 = qJD(3) * t185;
t248 = qJD(3) * t201;
t242 = t197 * t248;
t151 = qJD(1) * t242 - t184;
t55 = qJD(5) * t314 - t172 * t151;
t232 = -t172 * t55 + t308 * t89;
t270 = t151 * t196;
t54 = (qJD(5) * t139 - t270) * t200 - qJD(5) * t213 + t151 * t244;
t316 = t54 * t214 + t309 * t314;
t319 = t232 - t316;
t318 = t232 + t316;
t226 = t172 * t152 + t157 * t308;
t282 = t162 * t314;
t317 = t226 + t282;
t259 = t198 * t151;
t315 = t160 * t312 - t259;
t313 = t54 - t323;
t307 = t139 * t160 - t270;
t288 = pkin(8) + qJ(4);
t177 = t288 * t196;
t179 = t288 * t198;
t136 = -t200 * t177 + t294 * t179;
t292 = pkin(8) * t198;
t119 = pkin(3) * t162 + qJ(4) * t160;
t289 = pkin(7) + qJ(2);
t180 = t289 * t199;
t175 = qJD(1) * t180;
t159 = t201 * t175;
t178 = t289 * t197;
t174 = qJD(1) * t178;
t125 = -t295 * t174 - t159;
t71 = t198 * t119 - t125 * t196;
t53 = pkin(4) * t162 + t160 * t292 + t71;
t265 = t160 * t196;
t72 = t196 * t119 + t198 * t125;
t63 = pkin(8) * t265 + t72;
t277 = t172 * qJD(4) + t136 * qJD(5) - t200 * t63 + t294 * t53;
t306 = t55 - t320;
t305 = t162 * t312;
t216 = t295 * t199 - t257;
t127 = t152 * t216;
t304 = t160 * t167 - t127;
t303 = -t295 * t178 - t201 * t180;
t301 = t162 * qJD(3);
t158 = t160 ^ 2;
t298 = -t152 * t196 - t158 * t198;
t191 = -pkin(2) * t199 - pkin(1);
t121 = -pkin(3) * t216 - qJ(4) * t173 + t191;
t137 = -t201 * t178 + t295 * t180;
t75 = t198 * t121 - t137 * t196;
t61 = -pkin(4) * t216 - t173 * t292 + t75;
t262 = t173 * t196;
t76 = t196 * t121 + t198 * t137;
t67 = -pkin(8) * t262 + t76;
t286 = t200 * t61 + t294 * t67;
t239 = qJD(3) * t295;
t166 = -t199 * t239 + t242;
t263 = t166 * t198;
t104 = t216 * qJD(2) + t303 * qJD(3);
t97 = pkin(3) * t167 + qJ(4) * t166 - qJD(4) * t173;
t58 = -t104 * t196 + t198 * t97;
t37 = pkin(4) * t167 + pkin(8) * t263 + t58;
t264 = t166 * t196;
t59 = t198 * t104 + t196 * t97;
t44 = pkin(8) * t264 + t59;
t8 = -qJD(5) * t286 - t200 * t44 + t294 * t37;
t296 = t162 ^ 2;
t293 = pkin(5) * t152;
t116 = -qJD(3) * pkin(3) + qJD(4) - t125;
t79 = -pkin(4) * t312 + t116;
t28 = -pkin(5) * t89 - qJ(6) * t314 + t79;
t291 = t28 * t314;
t290 = t314 * t89;
t126 = -t201 * t174 + t295 * t175;
t95 = -pkin(4) * t265 + t126;
t287 = -pkin(5) * t309 + qJ(6) * t308 + qJD(6) * t172 + t95;
t21 = t200 * t53 + t294 * t63;
t83 = pkin(3) * t152 + qJ(4) * t151 - qJD(4) * t162;
t246 = qJD(1) * qJD(2);
t237 = t201 * t246;
t229 = qJD(2) * t240;
t251 = -t174 * t239 + t199 * t229;
t211 = -t197 * t237 + t251;
t90 = (qJD(4) - t159) * qJD(3) + t211;
t46 = t196 * t83 + t198 * t90;
t94 = -t174 * t248 + t175 * t239 + t197 * t229 + t199 * t237;
t285 = t303 * t94;
t215 = -t294 * t177 - t179 * t200;
t102 = t214 * qJD(4) + t215 * qJD(5);
t18 = qJ(6) * t162 + t21;
t280 = t102 - t18;
t279 = t102 - t21;
t278 = t162 * pkin(5) + t277;
t176 = t191 * qJD(1) + qJD(2);
t101 = pkin(3) * t160 - qJ(4) * t162 + t176;
t118 = qJD(3) * qJ(4) + t126;
t66 = t196 * t101 + t198 * t118;
t276 = qJ(6) * t152;
t275 = t215 * t152;
t274 = t136 * t152;
t273 = t139 * t162;
t272 = t139 * t196;
t271 = t151 * t173;
t268 = t157 * t162;
t267 = t160 * t162;
t65 = t198 * t101 - t118 * t196;
t41 = pkin(4) * t160 - pkin(8) * t139 + t65;
t52 = pkin(8) * t312 + t66;
t16 = -t200 * t52 + t294 * t41;
t256 = qJD(6) - t16;
t252 = t198 * t152 - t196 * t158;
t250 = t197 ^ 2 + t199 ^ 2;
t245 = -t297 + t324;
t190 = -t198 * pkin(4) - pkin(3);
t45 = -t196 * t90 + t198 * t83;
t31 = pkin(4) * t152 + pkin(8) * t259 + t45;
t34 = pkin(8) * t270 + t46;
t236 = t200 * t34 + t52 * t238 + t41 * t247 - t294 * t31;
t235 = t250 * qJD(1) ^ 2;
t231 = t102 * t89 - t136 * t55 + t215 * t54;
t228 = -t297 - t324;
t106 = pkin(4) * t262 - t303;
t112 = t172 * t173;
t69 = -t172 * t166 + t302 * t173;
t225 = t112 * t55 - t69 * t89;
t224 = -t196 * t65 + t198 * t66;
t70 = -pkin(4) * t270 + t94;
t223 = t151 * t303 + t94 * t173;
t222 = t198 * t312;
t220 = 0.2e1 * t250 * t246;
t2 = t236 - t293;
t17 = t200 * t41 + t294 * t52;
t219 = t157 * t17 - t236;
t25 = -t200 * t67 + t294 * t61;
t3 = t200 * t31 + t41 * t238 - t52 * t247 + t294 * t34;
t7 = t200 * t37 + t61 * t238 - t67 * t247 + t294 * t44;
t212 = -t214 * t55 - t309 * t89;
t210 = -t116 * t166 + t223;
t209 = -t151 * t216 - t173 * t152 + t166 * t160;
t208 = t222 - t272;
t207 = pkin(3) * t151 - qJ(4) * t152 + (-qJD(4) + t116) * t160;
t113 = t214 * t173;
t68 = t173 * t165 + t214 * t166;
t205 = t112 * t54 - t113 * t55 - t314 * t69 - t68 * t89;
t204 = t112 * t152 + t157 * t69 - t167 * t89 - t216 * t55;
t10 = pkin(5) * t55 + qJ(6) * t54 - qJD(6) * t314 + t70;
t105 = t173 * qJD(2) + t137 * qJD(3);
t78 = -pkin(4) * t264 + t105;
t203 = t55 + t320;
t194 = t198 ^ 2;
t192 = t196 ^ 2;
t120 = -pkin(5) * t214 - qJ(6) * t172 + t190;
t93 = (-qJD(3) * t175 - t197 * t246) * t201 + t251;
t77 = t157 * t167 - t127;
t50 = pkin(5) * t314 - qJ(6) * t89;
t43 = pkin(5) * t112 - qJ(6) * t113 + t106;
t27 = -t54 - t323;
t24 = t226 - t282;
t23 = pkin(5) * t216 - t25;
t22 = -qJ(6) * t216 + t286;
t15 = t157 * qJ(6) + t17;
t14 = -t157 * pkin(5) + t256;
t13 = t69 * pkin(5) + t68 * qJ(6) - t113 * qJD(6) + t78;
t12 = -t113 * t54 - t314 * t68;
t11 = -t172 * t54 + t308 * t314;
t9 = t113 * t152 - t157 * t68 + t167 * t314 + t216 * t54;
t6 = -t167 * pkin(5) - t8;
t5 = qJ(6) * t167 - qJD(6) * t216 + t7;
t1 = qJD(6) * t157 + t276 + t3;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t220, qJ(2) * t220, -t162 * t166 - t271, -t162 * t167 + t209, -t166 * qJD(3), t304, -t167 * qJD(3), 0, -qJD(3) * t105 + t152 * t191 + t167 * t176, -qJD(3) * t104 - t151 * t191 - t166 * t176, -t104 * t160 + t105 * t162 + t125 * t166 - t126 * t167 - t137 * t152 + t216 * t93 + t223, t104 * t126 - t105 * t125 + t137 * t93 - t285, -t139 * t263 - t194 * t271, -t166 * t208 + 0.2e1 * t259 * t262, t139 * t167 - t198 * t209, -t192 * t271 + t264 * t312, t167 * t312 + t196 * t209, t304, -t105 * t312 + t75 * t152 + t58 * t160 + t65 * t167 + t196 * t210 - t216 * t45, t105 * t139 - t152 * t76 - t160 * t59 - t167 * t66 + t198 * t210 + t216 * t46, -t58 * t139 - t59 * t261 + (t59 * qJD(3) + t75 * t151 + t65 * t166 - t45 * t173) * t198 + (t76 * t151 + t66 * t166 - t46 * t173) * t196, t105 * t116 + t45 * t75 + t46 * t76 + t58 * t65 + t59 * t66 - t285, t12, t205, t9, t225, -t204, t77, t106 * t55 + t112 * t70 + t152 * t25 + t157 * t8 + t16 * t167 + t216 * t236 + t69 * t79 - t78 * t89, -t106 * t54 + t113 * t70 - t152 * t286 - t157 * t7 - t167 * t17 + t216 * t3 + t314 * t78 - t68 * t79, -t112 * t3 + t113 * t236 + t16 * t68 - t17 * t69 + t25 * t54 - t286 * t55 - t314 * t8 + t7 * t89, t106 * t70 + t16 * t8 + t17 * t7 - t236 * t25 + t286 * t3 + t78 * t79, t12, t9, -t205, t77, t204, t225, t10 * t112 - t13 * t89 - t14 * t167 - t152 * t23 - t157 * t6 + t2 * t216 + t28 * t69 + t43 * t55, -t1 * t112 + t113 * t2 - t14 * t68 - t15 * t69 - t22 * t55 - t23 * t54 + t314 * t6 + t5 * t89, -t1 * t216 - t10 * t113 - t13 * t314 + t15 * t167 + t152 * t22 + t157 * t5 + t28 * t68 + t43 * t54, t1 * t22 + t10 * t43 + t13 * t28 + t14 * t6 + t15 * t5 + t2 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, -qJ(2) * t235, 0, 0, 0, 0, 0, 0, 0.2e1 * t301, t184 + (-t160 - t243) * qJD(3), -t158 - t296, t125 * t162 + t126 * t160, 0, 0, 0, 0, 0, 0, t252 + t305, -t273 + t298 (t222 + t272) * t160 + (t192 + t194) * t151, -t116 * t162 + t160 * t224 + t46 * t196 + t45 * t198, 0, 0, 0, 0, 0, 0, t321, -t317, t318, -t16 * t309 - t162 * t79 + t17 * t308 + t172 * t3 - t214 * t236, 0, 0, 0, 0, 0, 0, t321, t318, t317, t1 * t172 + t14 * t309 + t15 * t308 - t162 * t28 - t2 * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, -t158 + t296, t184 + (t160 - t243) * qJD(3), -t267, 0, 0, t126 * qJD(3) - t162 * t176 - t94, t160 * t176 + (t125 + t159) * qJD(3) - t211, 0, 0, t307 * t198, t208 * t160 + (t192 - t194) * t151, -t273 - t298, -t315 * t196, t252 - t305, -t267, t126 * t312 - t71 * t160 - t65 * t162 + t196 * t207 - t94 * t198, -t126 * t139 + t160 * t72 + t162 * t66 + t196 * t94 + t198 * t207, t71 * t139 + t72 * t261 + (-qJD(4) * t261 - t65 * t160 + t46 + (qJD(4) * t198 - t72) * qJD(3)) * t198 + (qJD(4) * t139 - t66 * t160 - t45) * t196, -pkin(3) * t94 - t116 * t126 - t65 * t71 - t66 * t72 + t224 * qJD(4) + (-t45 * t196 + t46 * t198) * qJ(4), t11, t319, t24, t212, -t322, -t268, -t277 * t157 - t16 * t162 + t190 * t55 - t214 * t70 + t309 * t79 + t89 * t95 + t275, -t279 * t157 + t162 * t17 + t172 * t70 - t190 * t54 + t308 * t79 - t314 * t95 - t274, -t16 * t308 - t17 * t309 + t172 * t236 - t21 * t89 + t214 * t3 + t277 * t314 + t231, t136 * t3 - t277 * t16 + t279 * t17 + t190 * t70 - t215 * t236 - t79 * t95, t11, t24, -t319, -t268, t322, t212, -t10 * t214 + t120 * t55 + t14 * t162 - t278 * t157 + t28 * t309 + t287 * t89 + t275, t1 * t214 + t14 * t308 - t15 * t309 + t172 * t2 - t18 * t89 + t278 * t314 + t231, -t10 * t172 + t120 * t54 - t15 * t162 + t280 * t157 - t28 * t308 + t287 * t314 + t274, t1 * t136 + t10 * t120 + t278 * t14 + t280 * t15 - t2 * t215 - t287 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, t315, -t139 ^ 2 - t312 ^ 2, t139 * t65 - t312 * t66 + t94, 0, 0, 0, 0, 0, 0, t203, -t313, t228, t16 * t314 - t17 * t89 + t70, 0, 0, 0, 0, 0, 0, t203, t228, t313, -t14 * t314 - t15 * t89 + t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290, -t245, t27, t290, -t306, t152, -t314 * t79 + t219, t157 * t16 - t79 * t89 - t3, 0, 0, -t290, t27, t245, t152, t306, t290, t50 * t89 + t219 - t291 + 0.2e1 * t293, pkin(5) * t54 - qJ(6) * t55 + (t15 - t17) * t314 - (t14 - t256) * t89, 0.2e1 * t276 + t28 * t89 + t50 * t314 + (0.2e1 * qJD(6) - t16) * t157 + t3, -pkin(5) * t2 + qJ(6) * t1 - t14 * t17 + t15 * t256 - t28 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290 - t301, t27, -t157 ^ 2 - t297, -t15 * t157 + t2 + t291;];
tauc_reg  = t4;
