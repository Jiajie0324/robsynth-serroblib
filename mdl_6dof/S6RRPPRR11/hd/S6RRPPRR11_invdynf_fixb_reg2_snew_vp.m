% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPPRR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPPRR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR11_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR11_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR11_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:05:24
% EndTime: 2019-05-06 12:05:33
% DurationCPUTime: 9.29s
% Computational Cost: add. (57022->349), mult. (135639->469), div. (0->0), fcn. (102725->12), ass. (0->263)
t2301 = sin(pkin(6));
t2303 = cos(pkin(6));
t2295 = qJD(1) * t2303 + qJD(2);
t2310 = cos(qJ(2));
t2354 = t2301 * t2310;
t2346 = qJD(1) * t2354;
t2340 = t2295 * t2346;
t2306 = sin(qJ(2));
t2378 = (qJD(1) * qJD(2) * t2310 + qJDD(1) * t2306) * t2301;
t2321 = -t2378 - t2340;
t2291 = t2295 ^ 2;
t2312 = qJD(1) ^ 2;
t2358 = t2301 ^ 2 * t2312;
t2292 = t2306 ^ 2 * t2358;
t2250 = -t2292 - t2291;
t2280 = t2310 * t2306 * t2358;
t2294 = qJDD(1) * t2303 + qJDD(2);
t2264 = -t2280 + t2294;
t2323 = t2250 * t2310 - t2264 * t2306;
t2208 = t2301 * t2321 + t2303 * t2323;
t2232 = t2250 * t2306 + t2264 * t2310;
t2307 = sin(qJ(1));
t2311 = cos(qJ(1));
t2386 = t2208 * t2307 + t2232 * t2311;
t2385 = t2208 * t2311 - t2232 * t2307;
t2355 = t2301 * t2306;
t2347 = qJD(1) * t2355;
t2348 = qJDD(1) * t2301;
t2266 = -qJD(2) * t2347 + t2310 * t2348;
t2271 = t2295 * t2347;
t2240 = t2266 - t2271;
t2293 = t2310 ^ 2 * t2358;
t2267 = -t2293 - t2291;
t2375 = -t2294 - t2280;
t2322 = t2267 * t2306 - t2310 * t2375;
t2211 = t2301 * t2240 + t2303 * t2322;
t2235 = -t2267 * t2310 - t2306 * t2375;
t2384 = t2211 * t2307 + t2235 * t2311;
t2383 = t2211 * t2311 - t2235 * t2307;
t2316 = qJDD(5) + t2378;
t2300 = sin(pkin(11));
t2302 = cos(pkin(11));
t2253 = -t2300 * t2295 - t2302 * t2346;
t2254 = t2295 * t2302 - t2300 * t2346;
t2305 = sin(qJ(5));
t2309 = cos(qJ(5));
t2229 = -t2309 * t2253 + t2254 * t2305;
t2228 = qJD(6) + t2229;
t2377 = qJD(6) + t2228;
t2238 = -t2266 * t2300 + t2294 * t2302;
t2342 = t2253 * t2347;
t2222 = -t2238 + t2342;
t2376 = pkin(2) * t2271 - 0.2e1 * qJD(3) * t2347;
t2209 = -t2303 * t2240 + t2301 * t2322;
t2206 = t2301 * t2323 - t2303 * t2321;
t2231 = t2253 * t2305 + t2254 * t2309;
t2282 = qJD(5) + t2347;
t2304 = sin(qJ(6));
t2308 = cos(qJ(6));
t2215 = t2231 * t2304 - t2308 * t2282;
t2374 = t2215 ^ 2;
t2217 = t2231 * t2308 + t2282 * t2304;
t2373 = t2217 ^ 2;
t2372 = t2228 ^ 2;
t2371 = t2229 ^ 2;
t2370 = t2231 ^ 2;
t2251 = t2253 ^ 2;
t2369 = t2254 ^ 2;
t2368 = t2282 ^ 2;
t2367 = 0.2e1 * qJD(3);
t2366 = g(3) * t2310;
t2365 = t2303 * g(3);
t2364 = t2215 * t2217;
t2363 = t2231 * t2229;
t2362 = t2253 * t2254;
t2284 = t2307 * g(1) - g(2) * t2311;
t2260 = pkin(8) * t2301 * t2312 + qJDD(1) * pkin(1) + t2284;
t2361 = t2260 * t2303;
t2262 = (-pkin(2) * t2310 - qJ(3) * t2306) * t2301 * qJD(1);
t2360 = t2262 * t2306;
t2359 = t2295 * t2310;
t2351 = qJD(5) - t2282;
t2350 = qJD(5) + t2282;
t2349 = qJD(6) - t2228;
t2259 = pkin(3) * t2347 - qJ(4) * t2295;
t2181 = -pkin(3) * t2293 - t2365 - t2378 * qJ(3) + (-pkin(2) - qJ(4)) * t2266 + (-t2260 + (-qJ(3) * t2359 - t2259 * t2306) * qJD(1)) * t2301 + t2376;
t2285 = -g(1) * t2311 - g(2) * t2307;
t2261 = -pkin(1) * t2312 + pkin(8) * t2348 + t2285;
t2343 = t2306 * t2261 - t2310 * t2361;
t2319 = -t2294 * pkin(2) - t2291 * qJ(3) + qJDD(3) + t2343;
t2184 = t2378 * pkin(3) + t2375 * qJ(4) + (t2366 + (-pkin(3) * t2359 + t2360) * qJD(1)) * t2301 + t2319;
t2148 = 0.2e1 * qJD(4) * t2253 + t2302 * t2181 + t2300 * t2184;
t2237 = -t2302 * t2266 - t2294 * t2300;
t2239 = pkin(4) * t2347 - pkin(9) * t2254;
t2140 = -pkin(4) * t2251 + pkin(9) * t2237 - t2239 * t2347 + t2148;
t2147 = -0.2e1 * qJD(4) * t2254 - t2300 * t2181 + t2302 * t2184;
t2223 = t2378 + t2362;
t2313 = t2223 * pkin(4) + pkin(9) * t2222 + t2147;
t2114 = t2309 * t2140 + t2305 * t2313;
t2226 = -g(3) * t2355 + t2310 * t2261 + t2306 * t2361;
t2113 = -t2140 * t2305 + t2309 * t2313;
t2325 = t2305 * t2237 + t2309 * t2238;
t2189 = -qJD(5) * t2229 + t2325;
t2345 = -t2304 * t2189 + t2308 * t2316;
t2344 = -t2309 * t2237 + t2305 * t2238;
t2341 = t2254 * t2347;
t2245 = -t2301 * t2260 - t2365;
t2197 = pkin(5) * t2229 - pkin(10) * t2231;
t2109 = -pkin(5) * t2368 + pkin(10) * t2316 - t2229 * t2197 + t2114;
t2315 = -t2291 * pkin(2) + t2294 * qJ(3) + t2262 * t2346 + t2226;
t2180 = qJDD(4) + t2266 * pkin(3) - qJ(4) * t2293 + (t2367 + t2259) * t2295 + t2315;
t2159 = -t2237 * pkin(4) - t2251 * pkin(9) + t2254 * t2239 + t2180;
t2171 = t2231 * t2350 + t2344;
t2129 = (t2229 * t2282 - t2189) * pkin(10) + t2159 + t2171 * pkin(5);
t2096 = -t2109 * t2304 + t2129 * t2308;
t2097 = t2109 * t2308 + t2129 * t2304;
t2088 = -t2096 * t2304 + t2097 * t2308;
t2108 = -pkin(5) * t2316 - pkin(10) * t2368 + t2197 * t2231 - t2113;
t2076 = t2088 * t2305 - t2108 * t2309;
t2077 = t2088 * t2309 + t2108 * t2305;
t2072 = t2076 * t2302 + t2077 * t2300;
t2087 = t2096 * t2308 + t2097 * t2304;
t2339 = -t2072 * t2310 + t2087 * t2306;
t2092 = t2113 * t2309 + t2114 * t2305;
t2093 = -t2113 * t2305 + t2114 * t2309;
t2083 = t2092 * t2302 + t2093 * t2300;
t2338 = -t2083 * t2310 + t2159 * t2306;
t2150 = -t2217 * t2349 + t2345;
t2314 = -t2308 * t2189 - t2304 * t2316;
t2152 = t2215 * t2349 + t2314;
t2127 = t2150 * t2308 - t2152 * t2304;
t2166 = -t2373 - t2374;
t2115 = t2127 * t2305 - t2166 * t2309;
t2116 = t2127 * t2309 + t2166 * t2305;
t2094 = t2115 * t2302 + t2116 * t2300;
t2126 = t2150 * t2304 + t2152 * t2308;
t2337 = -t2094 * t2310 + t2126 * t2306;
t2318 = -qJD(5) * t2231 - qJDD(6) - t2344;
t2160 = -t2318 - t2364;
t2170 = -t2372 - t2374;
t2136 = -t2160 * t2304 + t2170 * t2308;
t2149 = t2217 * t2377 - t2345;
t2118 = t2136 * t2305 - t2149 * t2309;
t2119 = t2136 * t2309 + t2149 * t2305;
t2100 = t2118 * t2302 + t2119 * t2300;
t2135 = t2160 * t2308 + t2170 * t2304;
t2336 = -t2100 * t2310 + t2135 * t2306;
t2161 = t2318 - t2364;
t2177 = -t2372 - t2373;
t2138 = t2161 * t2308 - t2177 * t2304;
t2151 = -t2215 * t2377 - t2314;
t2120 = t2138 * t2305 - t2151 * t2309;
t2121 = t2138 * t2309 + t2151 * t2305;
t2102 = t2120 * t2302 + t2121 * t2300;
t2137 = t2161 * t2304 + t2177 * t2308;
t2335 = -t2102 * t2310 + t2137 * t2306;
t2172 = -t2231 * t2351 - t2344;
t2174 = t2229 * t2351 - t2325;
t2143 = t2172 * t2305 + t2174 * t2309;
t2144 = t2172 * t2309 - t2174 * t2305;
t2122 = t2143 * t2302 + t2144 * t2300;
t2183 = -t2370 - t2371;
t2334 = -t2122 * t2310 + t2183 * t2306;
t2124 = t2147 * t2302 + t2148 * t2300;
t2333 = -t2124 * t2310 + t2180 * t2306;
t2192 = t2316 - t2363;
t2195 = -t2368 - t2371;
t2162 = t2192 * t2309 + t2195 * t2305;
t2163 = -t2192 * t2305 + t2195 * t2309;
t2131 = t2162 * t2302 + t2163 * t2300;
t2332 = -t2131 * t2310 + t2171 * t2306;
t2193 = -t2363 - t2316;
t2213 = -t2368 - t2370;
t2167 = t2193 * t2305 + t2213 * t2309;
t2168 = t2193 * t2309 - t2213 * t2305;
t2141 = t2167 * t2302 + t2168 * t2300;
t2173 = -t2229 * t2350 + t2325;
t2331 = -t2141 * t2310 + t2173 * t2306;
t2220 = t2237 + t2341;
t2187 = t2220 * t2300 + t2222 * t2302;
t2218 = -t2251 - t2369;
t2330 = -t2187 * t2310 + t2218 * t2306;
t2227 = -t2292 - t2251;
t2190 = t2223 * t2302 + t2227 * t2300;
t2219 = -t2237 + t2341;
t2329 = -t2190 * t2310 + t2219 * t2306;
t2198 = t2295 * t2367 + t2315;
t2202 = (qJD(1) * t2360 + t2366) * t2301 + t2319;
t2328 = t2198 * t2306 - t2202 * t2310;
t2224 = -t2378 + t2362;
t2244 = -t2292 - t2369;
t2200 = t2224 * t2300 + t2244 * t2302;
t2221 = t2238 + t2342;
t2327 = -t2200 * t2310 + t2221 * t2306;
t2225 = -g(3) * t2354 - t2343;
t2326 = t2225 * t2310 + t2226 * t2306;
t2242 = t2378 - t2340;
t2243 = t2266 + t2271;
t2324 = -t2242 * t2310 + t2243 * t2306;
t2279 = -qJDD(1) * t2307 - t2311 * t2312;
t2278 = qJDD(1) * t2311 - t2307 * t2312;
t2268 = -t2292 - t2293;
t2214 = t2242 * t2306 + t2243 * t2310;
t2204 = -t2301 * t2268 + t2303 * t2324;
t2203 = t2303 * t2268 + t2301 * t2324;
t2201 = t2224 * t2302 - t2244 * t2300;
t2199 = -t2266 * pkin(2) + qJ(3) * t2321 + t2245 + t2376;
t2196 = -t2225 * t2306 + t2226 * t2310;
t2191 = -t2223 * t2300 + t2227 * t2302;
t2188 = t2220 * t2302 - t2222 * t2300;
t2186 = -t2301 * t2245 + t2303 * t2326;
t2185 = t2303 * t2245 + t2301 * t2326;
t2178 = t2200 * t2306 + t2221 * t2310;
t2176 = -t2204 * t2307 + t2214 * t2311;
t2175 = t2204 * t2311 + t2214 * t2307;
t2169 = t2190 * t2306 + t2219 * t2310;
t2165 = t2187 * t2306 + t2218 * t2310;
t2164 = t2198 * t2310 + t2202 * t2306;
t2158 = -t2301 * t2201 + t2303 * t2327;
t2157 = t2303 * t2201 + t2301 * t2327;
t2156 = -t2301 * t2191 + t2303 * t2329;
t2155 = t2303 * t2191 + t2301 * t2329;
t2154 = -t2301 * t2199 + t2303 * t2328;
t2153 = t2303 * t2199 + t2301 * t2328;
t2146 = -t2301 * t2188 + t2303 * t2330;
t2145 = t2303 * t2188 + t2301 * t2330;
t2142 = -t2167 * t2300 + t2168 * t2302;
t2132 = -t2162 * t2300 + t2163 * t2302;
t2130 = t2141 * t2306 + t2173 * t2310;
t2128 = t2131 * t2306 + t2171 * t2310;
t2125 = -t2147 * t2300 + t2148 * t2302;
t2123 = -t2143 * t2300 + t2144 * t2302;
t2117 = t2124 * t2306 + t2180 * t2310;
t2112 = t2122 * t2306 + t2183 * t2310;
t2111 = -t2301 * t2142 + t2303 * t2331;
t2110 = t2303 * t2142 + t2301 * t2331;
t2107 = -t2301 * t2132 + t2303 * t2332;
t2106 = t2303 * t2132 + t2301 * t2332;
t2105 = -t2301 * t2125 + t2303 * t2333;
t2104 = t2303 * t2125 + t2301 * t2333;
t2103 = -t2120 * t2300 + t2121 * t2302;
t2101 = -t2118 * t2300 + t2119 * t2302;
t2099 = -t2301 * t2123 + t2303 * t2334;
t2098 = t2303 * t2123 + t2301 * t2334;
t2095 = -t2115 * t2300 + t2116 * t2302;
t2091 = t2102 * t2306 + t2137 * t2310;
t2090 = t2100 * t2306 + t2135 * t2310;
t2089 = t2094 * t2306 + t2126 * t2310;
t2086 = -t2301 * t2103 + t2303 * t2335;
t2085 = t2303 * t2103 + t2301 * t2335;
t2084 = -t2092 * t2300 + t2093 * t2302;
t2082 = -t2301 * t2101 + t2303 * t2336;
t2081 = t2303 * t2101 + t2301 * t2336;
t2080 = t2083 * t2306 + t2159 * t2310;
t2079 = -t2301 * t2095 + t2303 * t2337;
t2078 = t2303 * t2095 + t2301 * t2337;
t2075 = -t2301 * t2084 + t2303 * t2338;
t2074 = t2303 * t2084 + t2301 * t2338;
t2073 = -t2076 * t2300 + t2077 * t2302;
t2071 = t2072 * t2306 + t2087 * t2310;
t2070 = -t2301 * t2073 + t2303 * t2339;
t2069 = t2303 * t2073 + t2301 * t2339;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2279, -t2278, 0, -t2284 * t2307 + t2285 * t2311, 0, 0, 0, 0, 0, 0, -t2384, -t2386, t2176, -t2186 * t2307 + t2196 * t2311, 0, 0, 0, 0, 0, 0, t2176, t2384, t2386, -t2154 * t2307 + t2164 * t2311, 0, 0, 0, 0, 0, 0, -t2156 * t2307 + t2169 * t2311, -t2158 * t2307 + t2178 * t2311, -t2146 * t2307 + t2165 * t2311, -t2105 * t2307 + t2117 * t2311, 0, 0, 0, 0, 0, 0, -t2107 * t2307 + t2128 * t2311, -t2111 * t2307 + t2130 * t2311, -t2099 * t2307 + t2112 * t2311, -t2075 * t2307 + t2080 * t2311, 0, 0, 0, 0, 0, 0, -t2082 * t2307 + t2090 * t2311, -t2086 * t2307 + t2091 * t2311, -t2079 * t2307 + t2089 * t2311, -t2070 * t2307 + t2071 * t2311; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2278, t2279, 0, t2284 * t2311 + t2285 * t2307, 0, 0, 0, 0, 0, 0, t2383, t2385, t2175, t2186 * t2311 + t2196 * t2307, 0, 0, 0, 0, 0, 0, t2175, -t2383, -t2385, t2154 * t2311 + t2164 * t2307, 0, 0, 0, 0, 0, 0, t2156 * t2311 + t2169 * t2307, t2158 * t2311 + t2178 * t2307, t2146 * t2311 + t2165 * t2307, t2105 * t2311 + t2117 * t2307, 0, 0, 0, 0, 0, 0, t2107 * t2311 + t2128 * t2307, t2111 * t2311 + t2130 * t2307, t2099 * t2311 + t2112 * t2307, t2075 * t2311 + t2080 * t2307, 0, 0, 0, 0, 0, 0, t2082 * t2311 + t2090 * t2307, t2086 * t2311 + t2091 * t2307, t2079 * t2311 + t2089 * t2307, t2070 * t2311 + t2071 * t2307; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2209, t2206, t2203, t2185, 0, 0, 0, 0, 0, 0, t2203, -t2209, -t2206, t2153, 0, 0, 0, 0, 0, 0, t2155, t2157, t2145, t2104, 0, 0, 0, 0, 0, 0, t2106, t2110, t2098, t2074, 0, 0, 0, 0, 0, 0, t2081, t2085, t2078, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2312, -qJDD(1), 0, t2285, 0, 0, 0, 0, 0, 0, -t2235, -t2232, t2214, t2196, 0, 0, 0, 0, 0, 0, t2214, t2235, t2232, t2164, 0, 0, 0, 0, 0, 0, t2169, t2178, t2165, t2117, 0, 0, 0, 0, 0, 0, t2128, t2130, t2112, t2080, 0, 0, 0, 0, 0, 0, t2090, t2091, t2089, t2071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2312, 0, t2284, 0, 0, 0, 0, 0, 0, t2211, t2208, t2204, t2186, 0, 0, 0, 0, 0, 0, t2204, -t2211, -t2208, t2154, 0, 0, 0, 0, 0, 0, t2156, t2158, t2146, t2105, 0, 0, 0, 0, 0, 0, t2107, t2111, t2099, t2075, 0, 0, 0, 0, 0, 0, t2082, t2086, t2079, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2209, t2206, t2203, t2185, 0, 0, 0, 0, 0, 0, t2203, -t2209, -t2206, t2153, 0, 0, 0, 0, 0, 0, t2155, t2157, t2145, t2104, 0, 0, 0, 0, 0, 0, t2106, t2110, t2098, t2074, 0, 0, 0, 0, 0, 0, t2081, t2085, t2078, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, -t2264, t2243, t2226, 0, 0, 0, 0, 0, 0, t2243, -t2267, t2264, t2198, 0, 0, 0, 0, 0, 0, t2219, t2221, t2218, t2180, 0, 0, 0, 0, 0, 0, t2171, t2173, t2183, t2159, 0, 0, 0, 0, 0, 0, t2135, t2137, t2126, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2375, t2250, -t2242, t2225, 0, 0, 0, 0, 0, 0, -t2242, t2375, -t2250, -t2202, 0, 0, 0, 0, 0, 0, -t2190, -t2200, -t2187, -t2124, 0, 0, 0, 0, 0, 0, -t2131, -t2141, -t2122, -t2083, 0, 0, 0, 0, 0, 0, -t2100, -t2102, -t2094, -t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2240, -t2321, t2268, t2245, 0, 0, 0, 0, 0, 0, t2268, t2240, t2321, t2199, 0, 0, 0, 0, 0, 0, t2191, t2201, t2188, t2125, 0, 0, 0, 0, 0, 0, t2132, t2142, t2123, t2084, 0, 0, 0, 0, 0, 0, t2101, t2103, t2095, t2073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2268, t2240, t2321, t2199, 0, 0, 0, 0, 0, 0, t2191, t2201, t2188, t2125, 0, 0, 0, 0, 0, 0, t2132, t2142, t2123, t2084, 0, 0, 0, 0, 0, 0, t2101, t2103, t2095, t2073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2243, t2267, -t2264, -t2198, 0, 0, 0, 0, 0, 0, -t2219, -t2221, -t2218, -t2180, 0, 0, 0, 0, 0, 0, -t2171, -t2173, -t2183, -t2159, 0, 0, 0, 0, 0, 0, -t2135, -t2137, -t2126, -t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2242, -t2375, t2250, t2202, 0, 0, 0, 0, 0, 0, t2190, t2200, t2187, t2124, 0, 0, 0, 0, 0, 0, t2131, t2141, t2122, t2083, 0, 0, 0, 0, 0, 0, t2100, t2102, t2094, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2227, t2224, t2220, t2148, 0, 0, 0, 0, 0, 0, t2163, t2168, t2144, t2093, 0, 0, 0, 0, 0, 0, t2119, t2121, t2116, t2077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, t2244, t2222, t2147, 0, 0, 0, 0, 0, 0, t2162, t2167, t2143, t2092, 0, 0, 0, 0, 0, 0, t2118, t2120, t2115, t2076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2219, t2221, t2218, t2180, 0, 0, 0, 0, 0, 0, t2171, t2173, t2183, t2159, 0, 0, 0, 0, 0, 0, t2135, t2137, t2126, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2193, t2172, t2114, 0, 0, 0, 0, 0, 0, t2136, t2138, t2127, t2088; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2192, t2213, t2174, t2113, 0, 0, 0, 0, 0, 0, -t2149, -t2151, -t2166, -t2108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2171, t2173, t2183, t2159, 0, 0, 0, 0, 0, 0, t2135, t2137, t2126, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2170, t2161, t2150, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2160, t2177, t2152, t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2149, t2151, t2166, t2108;];
f_new_reg  = t1;
