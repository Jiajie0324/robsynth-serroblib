% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR11_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR11_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR11_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:03:06
% EndTime: 2019-05-06 12:03:30
% DurationCPUTime: 11.16s
% Computational Cost: add. (70747->589), mult. (167702->842), div. (0->0), fcn. (126810->12), ass. (0->357)
t441 = 2 * qJD(4);
t313 = sin(pkin(11));
t316 = cos(pkin(6));
t308 = qJD(1) * t316 + qJD(2);
t315 = cos(pkin(11));
t314 = sin(pkin(6));
t323 = cos(qJ(2));
t377 = qJD(1) * t323;
t361 = t314 * t377;
t267 = -t313 * t308 - t315 * t361;
t268 = t308 * t315 - t313 * t361;
t241 = t267 * t268;
t319 = sin(qJ(2));
t279 = (qJD(2) * t377 + qJDD(1) * t319) * t314;
t428 = t241 + t279;
t440 = t313 * t428;
t439 = t315 * t428;
t317 = sin(qJ(6));
t318 = sin(qJ(5));
t322 = cos(qJ(5));
t240 = t267 * t318 + t268 * t322;
t378 = qJD(1) * t319;
t362 = t314 * t378;
t297 = qJD(5) + t362;
t321 = cos(qJ(6));
t214 = t240 * t317 - t321 * t297;
t216 = t240 * t321 + t297 * t317;
t176 = t216 * t214;
t299 = qJD(2) * t362;
t373 = qJDD(1) * t323;
t280 = t314 * t373 - t299;
t307 = qJDD(1) * t316 + qJDD(2);
t246 = -t315 * t280 - t307 * t313;
t247 = -t280 * t313 + t307 * t315;
t356 = -t322 * t246 + t247 * t318;
t184 = -qJD(5) * t240 - t356;
t183 = qJDD(6) - t184;
t430 = -t176 + t183;
t438 = t317 * t430;
t238 = -t322 * t267 + t268 * t318;
t199 = t240 * t238;
t271 = qJDD(5) + t279;
t429 = -t199 + t271;
t437 = t318 * t429;
t436 = t321 * t430;
t435 = t322 * t429;
t304 = t308 ^ 2;
t311 = t314 ^ 2;
t325 = qJD(1) ^ 2;
t386 = t311 * t325;
t421 = t323 ^ 2;
t306 = t421 * t386;
t283 = -t306 - t304;
t387 = t311 * t319;
t366 = t323 * t387;
t295 = t325 * t366;
t426 = -t307 - t295;
t434 = pkin(1) * (t283 * t319 - t323 * t426);
t305 = t319 ^ 2 * t386;
t263 = -t305 - t304;
t278 = -t295 + t307;
t433 = pkin(1) * (t263 * t323 - t278 * t319);
t392 = t426 * t319;
t432 = pkin(8) * (-t283 * t323 - t392);
t391 = t278 * t323;
t431 = pkin(8) * (t263 * t319 + t391);
t195 = pkin(5) * t238 - pkin(10) * t240;
t422 = t297 ^ 2;
t273 = pkin(3) * t362 - qJ(4) * t308;
t320 = sin(qJ(1));
t324 = cos(qJ(1));
t359 = t320 * g(1) - g(2) * t324;
t417 = pkin(8) * t314;
t274 = qJDD(1) * pkin(1) + t325 * t417 + t359;
t360 = qJD(3) * t378;
t298 = -0.2e1 * t314 * t360;
t286 = t308 * pkin(2) * t362;
t416 = g(3) * t316;
t335 = -qJ(3) * t279 + t286 - t416;
t388 = t308 * t323;
t369 = qJ(3) * t388;
t414 = -pkin(2) - qJ(4);
t170 = -pkin(3) * t306 + t298 + t414 * t280 + (-t274 + (-t273 * t319 - t369) * qJD(1)) * t314 + t335;
t383 = t319 * qJ(3);
t350 = -pkin(2) * t323 - t383;
t379 = qJD(1) * t314;
t276 = t350 * t379;
t352 = g(1) * t324 + g(2) * t320;
t275 = -pkin(1) * t325 + qJDD(1) * t417 - t352;
t393 = t274 * t316;
t355 = t275 * t319 - t323 * t393;
t332 = -t307 * pkin(2) - t304 * qJ(3) + qJDD(3) + t355;
t415 = g(3) * t323;
t173 = pkin(3) * t279 + t426 * qJ(4) + (t415 + (-pkin(3) * t388 + t276 * t319) * qJD(1)) * t314 + t332;
t128 = t313 * t170 - t315 * t173 + t268 * t441;
t256 = t267 * t362;
t221 = t247 - t256;
t423 = -t221 * pkin(9) - t128;
t326 = pkin(4) * t428 + t423;
t129 = t315 * t170 + t313 * t173 + t267 * t441;
t248 = pkin(4) * t362 - pkin(9) * t268;
t264 = t267 ^ 2;
t104 = -pkin(4) * t264 + pkin(9) * t246 - t248 * t362 + t129;
t382 = t322 * t104;
t60 = t318 * t326 + t382;
t54 = -t422 * pkin(5) + t271 * pkin(10) - t238 * t195 + t60;
t303 = t304 * pkin(2);
t385 = t314 * t319;
t351 = -g(3) * t385 + t319 * t393;
t328 = (t276 * t379 + t275) * t323 - t303 + t351;
t410 = qJ(3) * t307;
t420 = 0.2e1 * qJD(3);
t169 = t410 + qJDD(4) + t280 * pkin(3) - qJ(4) * t306 + (t420 + t273) * t308 + t328;
t136 = -t246 * pkin(4) - t264 * pkin(9) + t248 * t268 + t169;
t185 = -t238 * qJD(5) + t318 * t246 + t322 * t247;
t396 = t238 * t297;
t338 = t185 - t396;
t87 = -t338 * pkin(10) + t136 + (t240 * t297 - t184) * pkin(5);
t38 = t317 * t54 - t321 * t87;
t39 = t317 * t87 + t321 * t54;
t24 = t317 * t38 + t321 * t39;
t288 = t308 * t361;
t427 = t279 + t288;
t235 = qJD(6) + t238;
t357 = t185 * t317 - t321 * t271;
t130 = (qJD(6) - t235) * t216 + t357;
t363 = t308 * t378;
t252 = -t299 + (t363 + t373) * t314;
t425 = t314 * ((t306 - t304) * t319 + t391) + t252 * t316;
t251 = -t288 + t279;
t424 = t314 * ((-t305 + t304) * t323 - t392) + t251 * t316;
t211 = t214 ^ 2;
t212 = t216 ^ 2;
t233 = t235 ^ 2;
t236 = t238 ^ 2;
t237 = t240 ^ 2;
t265 = t268 ^ 2;
t419 = pkin(2) * t280;
t418 = pkin(5) * t318;
t59 = t104 * t318 - t322 * t326;
t53 = -t271 * pkin(5) - t422 * pkin(10) + t195 * t240 + t59;
t413 = -pkin(5) * t53 + pkin(10) * t24;
t32 = t318 * t60 - t322 * t59;
t412 = t313 * t32;
t411 = t315 * t32;
t50 = t317 * t53;
t51 = t321 * t53;
t409 = t136 * t318;
t408 = t136 * t322;
t139 = t176 + t183;
t407 = t139 * t317;
t406 = t139 * t321;
t405 = t169 * t313;
t404 = t169 * t315;
t353 = t268 * t362;
t223 = t246 + t353;
t178 = -t221 * t315 + t223 * t313;
t403 = t178 * t319;
t191 = t199 + t271;
t402 = t191 * t318;
t401 = t191 * t322;
t226 = -t241 + t279;
t400 = t226 * t313;
t399 = t226 * t315;
t398 = t235 * t317;
t397 = t235 * t321;
t390 = t297 * t318;
t389 = t297 * t322;
t384 = t314 * t323;
t285 = -t305 - t306;
t380 = pkin(1) * (-t285 * t314 + (-t251 * t323 + t252 * t319) * t316) + (t251 * t319 + t252 * t323) * t417;
t374 = qJD(6) + t235;
t372 = t308 * t420;
t160 = -t233 - t211;
t100 = t160 * t321 - t438;
t131 = -t374 * t216 - t357;
t371 = pkin(5) * t131 + pkin(10) * t100 - t51;
t167 = -t212 - t233;
t103 = -t167 * t317 - t406;
t347 = -t185 * t321 - t271 * t317;
t135 = t374 * t214 + t347;
t370 = pkin(5) * t135 + pkin(10) * t103 + t50;
t368 = t318 * t176;
t367 = t322 * t176;
t365 = t319 * t199;
t364 = -pkin(5) * t322 - pkin(4);
t33 = t318 * t59 + t322 * t60;
t149 = t211 + t212;
t146 = -qJD(6) * t214 - t347;
t193 = t235 * t214;
t134 = t146 + t193;
t84 = -t130 * t321 + t134 * t317;
t358 = pkin(5) * t149 + pkin(10) * t84 + t24;
t354 = t385 * t241;
t257 = t274 * t314 + t416;
t23 = t317 * t39 - t321 * t38;
t78 = -t128 * t315 + t129 * t313;
t348 = t128 * t313 + t129 * t315;
t340 = qJD(1) * t308 - t316 * t325;
t339 = pkin(1) - t350;
t337 = -qJD(1) * t369 - t274;
t334 = t276 * t378 + t415;
t230 = g(3) * t384 + t355;
t231 = t275 * t323 + t351;
t333 = (t230 * t319 + t231 * t323) * t314;
t331 = t323 * t414 - pkin(1) - t383;
t330 = (-qJD(5) + t297) * t240 - t356;
t329 = -t335 + t419;
t205 = t314 * t334 + t332;
t327 = t328 + t372;
t291 = t316 * t307;
t284 = t305 - t306;
t261 = t279 * t385;
t255 = -t265 - t305;
t254 = -t265 + t305;
t253 = t264 - t305;
t249 = -t299 + (-t363 + t373) * t314;
t234 = -t305 - t264;
t229 = t340 * t366 + t261;
t228 = (t280 * t314 - t340 * t387) * t323;
t224 = t247 + t256;
t222 = -t246 + t353;
t220 = -t237 + t422;
t219 = t236 - t422;
t218 = (t267 * t315 + t268 * t313) * t362;
t217 = -t264 - t265;
t213 = -pkin(2) * t251 + qJ(3) * t252;
t210 = t247 * t315 - t313 * t353;
t209 = -t246 * t313 - t256 * t315;
t208 = -t237 - t422;
t206 = t316 * t284 + (t319 * t249 + t427 * t323) * t314;
t203 = t253 * t315 - t400;
t201 = -t254 * t313 + t439;
t200 = t255 * t315 - t400;
t198 = t237 - t236;
t196 = t327 + t410;
t194 = -t422 - t236;
t189 = -t212 + t233;
t188 = t211 - t233;
t186 = t234 * t313 + t439;
t182 = (-t238 * t322 + t240 * t318) * t297;
t181 = (-t238 * t318 - t240 * t322) * t297;
t179 = -t222 * t315 - t224 * t313;
t177 = pkin(2) * t426 - qJ(3) * t283 + t205;
t175 = t212 - t211;
t174 = -pkin(2) * t263 + (t278 + t307) * qJ(3) + t327;
t172 = -t236 - t237;
t165 = -t185 - t396;
t161 = (qJD(5) + t297) * t240 + t356;
t159 = t219 * t322 - t402;
t158 = -t220 * t318 + t435;
t157 = t219 * t318 + t401;
t156 = t220 * t322 + t437;
t155 = t185 * t322 - t240 * t390;
t154 = t185 * t318 + t240 * t389;
t153 = -t184 * t318 + t238 * t389;
t152 = t184 * t322 + t238 * t390;
t151 = -t208 * t318 - t401;
t150 = t208 * t322 - t402;
t147 = -pkin(2) * t205 + qJ(3) * t196;
t145 = -qJD(6) * t216 - t357;
t144 = t194 * t322 - t437;
t143 = t194 * t318 + t435;
t142 = (-t214 * t321 + t216 * t317) * t235;
t141 = (-t214 * t317 - t216 * t321) * t235;
t137 = -t181 * t313 + t182 * t315;
t133 = t146 - t193;
t125 = t146 * t321 - t216 * t398;
t124 = t146 * t317 + t216 * t397;
t123 = -t145 * t317 + t214 * t397;
t122 = t145 * t321 + t214 * t398;
t121 = -t165 * t318 + t322 * t330;
t120 = -t161 * t322 - t318 * t338;
t119 = t165 * t322 + t318 * t330;
t118 = -t161 * t318 + t322 * t338;
t117 = t142 * t322 + t183 * t318;
t116 = t142 * t318 - t183 * t322;
t115 = -t157 * t313 + t159 * t315;
t114 = -t156 * t313 + t158 * t315;
t113 = t188 * t321 - t407;
t112 = -t189 * t317 + t436;
t111 = t188 * t317 + t406;
t110 = t189 * t321 + t438;
t109 = -t154 * t313 + t155 * t315;
t108 = -t152 * t313 + t153 * t315;
t107 = -t150 * t313 + t151 * t315;
t106 = t150 * t315 + t151 * t313;
t105 = qJ(3) * t224 + t414 * t200 + t404;
t102 = t167 * t321 - t407;
t99 = t160 * t317 + t436;
t96 = qJ(3) * t222 + t414 * t186 + t405;
t95 = -pkin(9) * t150 + t408;
t94 = t125 * t322 + t368;
t93 = t123 * t322 - t368;
t92 = t125 * t318 - t367;
t91 = t123 * t318 + t367;
t89 = t143 * t315 + t144 * t313;
t88 = -pkin(9) * t143 + t409;
t85 = -pkin(4) * t338 + pkin(9) * t151 + t409;
t83 = t131 * t321 - t133 * t317;
t82 = -t130 * t317 - t134 * t321;
t81 = t131 * t317 + t133 * t321;
t77 = -pkin(4) * t161 + pkin(9) * t144 - t408;
t76 = t113 * t322 - t130 * t318;
t75 = t112 * t322 + t134 * t318;
t74 = t113 * t318 + t130 * t322;
t73 = t112 * t318 - t134 * t322;
t71 = -t118 * t313 + t120 * t315;
t70 = t119 * t315 + t121 * t313;
t69 = -t116 * t313 + t117 * t315;
t68 = t103 * t322 - t135 * t318;
t67 = t103 * t318 + t135 * t322;
t66 = t100 * t322 - t131 * t318;
t65 = t100 * t318 + t131 * t322;
t64 = t175 * t318 + t322 * t83;
t63 = -t175 * t322 + t318 * t83;
t62 = -t149 * t318 + t322 * t84;
t61 = t149 * t322 + t318 * t84;
t57 = -t313 * t92 + t315 * t94;
t56 = -t313 * t91 + t315 * t93;
t55 = qJ(3) * t217 + t414 * t178 - t78;
t49 = -t313 * t74 + t315 * t76;
t48 = -t313 * t73 + t315 * t75;
t47 = qJ(3) * t169 + t414 * t78;
t46 = -pkin(10) * t102 + t51;
t45 = -pkin(10) * t99 + t50;
t43 = t313 * t68 + t315 * t67;
t41 = t313 * t66 + t315 * t65;
t40 = -t313 * t63 + t315 * t64;
t34 = t313 * t62 + t315 * t61;
t31 = -pkin(4) * t136 + pkin(9) * t33;
t30 = qJ(3) * t338 + t414 * t106 - t313 * t85 + t315 * t95;
t29 = -pkin(5) * t102 + t39;
t28 = -pkin(9) * t119 - t32;
t27 = -pkin(5) * t99 + t38;
t26 = -pkin(4) * t172 + pkin(9) * t121 + t33;
t25 = qJ(3) * t161 - t313 * t77 + t315 * t88 + t414 * t89;
t20 = t313 * t33 + t411;
t19 = -pkin(10) * t82 - t23;
t18 = -pkin(9) * t67 - t29 * t318 + t322 * t46;
t17 = -pkin(9) * t65 - t27 * t318 + t322 * t45;
t16 = t24 * t322 + t318 * t53;
t15 = t24 * t318 - t322 * t53;
t14 = -pkin(4) * t102 + pkin(9) * t68 + t29 * t322 + t318 * t46;
t13 = -pkin(4) * t99 + pkin(9) * t66 + t27 * t322 + t318 * t45;
t12 = -pkin(9) * t61 + t19 * t322 + t82 * t418;
t11 = qJ(3) * t172 - t26 * t313 + t28 * t315 + t414 * t70;
t10 = pkin(9) * t62 + t19 * t318 + t364 * t82;
t8 = t15 * t315 + t16 * t313;
t7 = -pkin(9) * t411 + qJ(3) * t136 + t414 * t20 - t31 * t313;
t6 = -pkin(9) * t15 + (-pkin(10) * t322 + t418) * t23;
t5 = qJ(3) * t102 - t14 * t313 + t18 * t315 + t414 * t43;
t4 = qJ(3) * t99 - t13 * t313 + t17 * t315 + t414 * t41;
t3 = pkin(9) * t16 + (-pkin(10) * t318 + t364) * t23;
t2 = qJ(3) * t82 - t10 * t313 + t12 * t315 + t414 * t34;
t1 = qJ(3) * t23 - t3 * t313 + t315 * t6 + t414 * t8;
t9 = [0, 0, 0, 0, 0, qJDD(1), t359, t352, 0, 0, t229, t206, t424, t228, t425, t291, (-t230 + t434) * t316 + (pkin(1) * t249 + t323 * t257 - t432) * t314, (-t231 + t433) * t316 + (-pkin(1) * t427 - t319 * t257 - t431) * t314, t333 + t380, pkin(1) * (t257 * t314 + (-t230 * t323 + t231 * t319) * t316) + pkin(8) * t333, t291, -t424, -t425, t229, t206, t228, t316 * t213 + (t319 * (-qJ(3) * t285 + t332) + t323 * (-pkin(2) * t285 + t231 - t303 + t372 + t410) + (qJD(1) * t276 * t421 + t319 * t334) * t314) * t314 + t380, (t177 - t434) * t316 + (t323 * (t298 - t329) + t432 + t337 * t384 - t339 * t249) * t314, (t174 - t433) * t316 + (t319 * t329 + t431 + (-t337 + 0.2e1 * t360) * t385 + t339 * t427) * t314, (t147 + pkin(1) * (t196 * t319 - t205 * t323)) * t316 + (pkin(8) * (t196 * t323 + t205 * t319) - t339 * (-qJ(3) * t427 - t257 + t286 + t298 - t419)) * t314, -t354 + (-t247 * t313 - t315 * t353) * t384 + t316 * t210, t316 * t179 + (t319 * (t265 - t264) + t323 * (t222 * t313 - t224 * t315)) * t314, t316 * t201 + (t319 * t221 + t323 * (-t254 * t315 - t440)) * t314, t354 + (-t246 * t315 + t256 * t313) * t384 + t316 * t209, t223 * t385 + (-t253 * t313 - t399) * t384 + t316 * t203, t316 * t218 + t261 + (-t267 * t313 + t268 * t315) * t377 * t387, (t96 + pkin(1) * (-t186 * t323 + t222 * t319)) * t316 + (t319 * (pkin(3) * t186 - t128) + t323 * (pkin(3) * t222 + t404) + pkin(8) * (t186 * t319 + t222 * t323) + t331 * (t234 * t315 - t440)) * t314, (t105 + pkin(1) * (-t200 * t323 + t224 * t319)) * t316 + (t319 * (pkin(3) * t200 - t129) + t323 * (pkin(3) * t224 - t405) + pkin(8) * (t200 * t319 + t224 * t323) + t331 * (-t255 * t313 - t399)) * t314, (t55 + pkin(1) * (-t178 * t323 + t217 * t319)) * t316 + (pkin(3) * t403 + t323 * (pkin(3) * t217 - t348) + pkin(8) * (t217 * t323 + t403) + t331 * (t221 * t313 + t223 * t315)) * t314, (t47 + pkin(1) * (t169 * t319 - t323 * t78)) * t316 + (t331 * t348 + (pkin(3) + pkin(8)) * (t169 * t323 + t319 * t78)) * t314, t316 * t109 + (t365 + t323 * (-t154 * t315 - t155 * t313)) * t314, t316 * t71 + (t319 * t198 + t323 * (-t118 * t315 - t120 * t313)) * t314, t316 * t114 + (-t319 * t165 + t323 * (-t156 * t315 - t158 * t313)) * t314, t316 * t108 + (-t365 + t323 * (-t152 * t315 - t153 * t313)) * t314, t316 * t115 + (t319 * t330 + t323 * (-t157 * t315 - t159 * t313)) * t314, t316 * t137 + (t319 * t271 + t323 * (-t181 * t315 - t182 * t313)) * t314, (t25 + pkin(1) * (t161 * t319 - t323 * t89)) * t316 + (t319 * (pkin(3) * t89 + pkin(4) * t143 - t59) + t323 * (pkin(3) * t161 - t313 * t88 - t315 * t77) + pkin(8) * (t161 * t323 + t319 * t89) + t331 * (-t143 * t313 + t144 * t315)) * t314, (-qJ(3) * t107 + pkin(3) * t106 - t382 - t318 * t423 + (-t318 * t428 + t150) * pkin(4)) * t385 + (pkin(3) * t338 + t414 * t107 - t313 * t95 - t315 * t85) * t384 + t316 * t30 + pkin(1) * (-t107 * t314 + (-t106 * t323 + t319 * t338) * t316) + (t106 * t319 + t323 * t338) * t417, (t11 + pkin(1) * (t172 * t319 - t323 * t70)) * t316 + (t319 * (pkin(3) * t70 + pkin(4) * t119) + t323 * (pkin(3) * t172 - t26 * t315 - t28 * t313) + pkin(8) * (t172 * t323 + t319 * t70) + t331 * (-t119 * t313 + t121 * t315)) * t314, (t7 + pkin(1) * (t136 * t319 - t20 * t323)) * t316 + (t319 * (pkin(3) * t20 + pkin(4) * t32) + t323 * (pkin(3) * t136 + pkin(9) * t412 - t31 * t315) + pkin(8) * (t136 * t323 + t20 * t319) + t331 * (t315 * t33 - t412)) * t314, t316 * t57 + (t319 * t124 + t323 * (-t313 * t94 - t315 * t92)) * t314, t316 * t40 + (t319 * t81 + t323 * (-t313 * t64 - t315 * t63)) * t314, t316 * t48 + (t319 * t110 + t323 * (-t313 * t75 - t315 * t73)) * t314, t316 * t56 + (t319 * t122 + t323 * (-t313 * t93 - t315 * t91)) * t314, t316 * t49 + (t319 * t111 + t323 * (-t313 * t76 - t315 * t74)) * t314, t316 * t69 + (t319 * t141 + t323 * (-t116 * t315 - t117 * t313)) * t314, (t4 + pkin(1) * (t319 * t99 - t323 * t41)) * t316 + (t319 * (pkin(3) * t41 + pkin(4) * t65 + t371) + t323 * (pkin(3) * t99 - t13 * t315 - t17 * t313) + pkin(8) * (t319 * t41 + t323 * t99) + t331 * (-t313 * t65 + t315 * t66)) * t314, (t5 + pkin(1) * (t102 * t319 - t323 * t43)) * t316 + (t319 * (pkin(3) * t43 + pkin(4) * t67 + t370) + t323 * (pkin(3) * t102 - t14 * t315 - t18 * t313) + pkin(8) * (t102 * t323 + t319 * t43) + t331 * (-t313 * t67 + t315 * t68)) * t314, (t2 + pkin(1) * (t319 * t82 - t323 * t34)) * t316 + (t319 * (pkin(3) * t34 + pkin(4) * t61 + t358) + t323 * (pkin(3) * t82 - t10 * t315 - t12 * t313) + pkin(8) * (t319 * t34 + t323 * t82) + t331 * (-t313 * t61 + t315 * t62)) * t314, (t1 + pkin(1) * (t23 * t319 - t323 * t8)) * t316 + (t319 * (pkin(3) * t8 + pkin(4) * t15 + t413) + t323 * (pkin(3) * t23 - t3 * t315 - t313 * t6) + pkin(8) * (t23 * t323 + t319 * t8) + t331 * (-t15 * t313 + t16 * t315)) * t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295, t284, t251, t295, t252, t307, -t230, -t231, 0, 0, t307, -t251, -t252, -t295, t284, t295, t213, t177, t174, t147, t210, t179, t201, t209, t203, t218, t96, t105, t55, t47, t109, t71, t114, t108, t115, t137, t25, t30, t11, t7, t57, t40, t48, t56, t49, t69, t4, t5, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, -t426, t263, t205, 0, 0, 0, 0, 0, 0, t186, t200, t178, t78, 0, 0, 0, 0, 0, 0, t89, t106, t70, t20, 0, 0, 0, 0, 0, 0, t41, t43, t34, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t222, t224, t217, t169, 0, 0, 0, 0, 0, 0, t161, t338, t172, t136, 0, 0, 0, 0, 0, 0, t99, t102, t82, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, t198, -t165, -t199, t330, t271, -t59, -t60, 0, 0, t124, t81, t110, t122, t111, t141, t371, t370, t358, t413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, t175, t134, -t176, -t130, t183, -t38, -t39, 0, 0;];
tauJ_reg  = t9;
