% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR11_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR11_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR11_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR11_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:42:44
% EndTime: 2019-03-09 09:43:00
% DurationCPUTime: 5.88s
% Computational Cost: add. (7501->382), mult. (18408->692), div. (0->0), fcn. (18095->10), ass. (0->220)
t231 = pkin(2) + qJ(4);
t207 = pkin(9) + t231;
t99 = sin(qJ(2));
t225 = qJ(3) * t99;
t101 = cos(qJ(2));
t264 = t231 * t101;
t95 = sin(pkin(6));
t265 = (qJD(2) * (t225 + t264) + qJD(4) * t99) * t95;
t249 = cos(qJ(5));
t178 = t207 * t249;
t248 = sin(qJ(5));
t189 = t248 * qJD(4);
t190 = t249 * qJD(4);
t192 = qJD(5) * t248;
t94 = sin(pkin(11));
t71 = t207 * t94;
t96 = cos(pkin(11));
t259 = (-qJD(5) * t178 - t189) * t96 - t94 * t190 + t71 * t192;
t252 = pkin(3) + pkin(8);
t219 = cos(pkin(6));
t220 = t101 * t95;
t229 = t219 * t94 + t96 * t220;
t197 = pkin(1) * t219;
t179 = t101 * t197;
t131 = -t219 * pkin(2) - t179;
t117 = -t219 * qJ(4) + t131;
t147 = -t96 * qJ(3) + t94 * t252;
t166 = -pkin(1) - t264;
t30 = t94 * t117 + (t147 * t99 + t166 * t96) * t95;
t108 = -t229 * pkin(9) + t30;
t116 = t96 * t117;
t148 = t94 * qJ(3) + t96 * t252;
t140 = pkin(4) + t148;
t141 = t94 * t166;
t61 = t219 * t96 - t94 * t220;
t109 = t116 - t61 * pkin(9) + (t140 * t99 - t141) * t95;
t13 = t249 * t108 + t248 * t109;
t180 = t99 * t197;
t129 = -t219 * qJ(3) - t180;
t49 = t252 * t220 - t129;
t37 = t229 * pkin(4) + t49;
t173 = t249 * t229;
t42 = t248 * t61 + t173;
t43 = -t248 * t229 + t249 * t61;
t113 = t42 * pkin(5) - t43 * pkin(10) + t37;
t187 = qJD(2) * t219;
t172 = t99 * t187;
t124 = pkin(1) * t172 - t219 * qJD(4);
t121 = t96 * t124;
t217 = qJD(3) * t99;
t152 = -qJD(4) * t101 - t217;
t139 = t94 * t152;
t234 = t94 * t99;
t104 = t121 + (-t139 + (t140 * t101 - t207 * t234) * qJD(2)) * t95;
t122 = t94 * t124;
t134 = t147 * t101;
t138 = t96 * t152;
t232 = t96 * t99;
t106 = t122 + (t138 + (t207 * t232 + t134) * qJD(2)) * t95;
t262 = t248 * t108 - t249 * t109;
t5 = t262 * qJD(5) - t248 * t104 - t249 * t106;
t213 = qJD(2) * t101;
t83 = t95 * t213;
t263 = -pkin(10) * t83 - qJD(6) * t113 + t5;
t68 = t248 * t96 + t249 * t94;
t69 = -t248 * t94 + t249 * t96;
t86 = pkin(4) * t94 + qJ(3);
t133 = pkin(5) * t68 - pkin(10) * t69 + t86;
t261 = -qJD(6) * t133 - t259;
t130 = t95 * t68;
t136 = -qJD(5) * t173 - t61 * t192;
t218 = qJD(2) * t99;
t114 = -t130 * t218 - t136;
t233 = t95 * t99;
t260 = -qJD(6) * t233 + t114;
t98 = sin(qJ(6));
t91 = t98 ^ 2;
t100 = cos(qJ(6));
t93 = t100 ^ 2;
t227 = t91 - t93;
t188 = qJD(6) * t227;
t209 = pkin(8) * t233;
t132 = -t179 + t209;
t59 = t132 * qJD(2);
t88 = t94 ^ 2;
t90 = t96 ^ 2;
t74 = (t88 + t90) * qJD(4);
t62 = t68 * qJD(5);
t193 = qJD(5) * t249;
t63 = -t94 * t192 + t96 * t193;
t150 = pkin(5) * t63 + pkin(10) * t62 + qJD(3);
t215 = qJD(6) * t98;
t177 = t207 * t248;
t48 = -t96 * t177 - t249 * t71;
t14 = t261 * t100 - t150 * t98 + t48 * t215;
t212 = qJD(6) * t100;
t15 = t100 * t150 - t48 * t212 + t261 * t98;
t25 = t100 * t133 - t98 * t48;
t26 = t100 * t48 + t133 * t98;
t156 = t100 * t26 - t25 * t98;
t257 = qJD(6) * t156 + t100 * t15 - t14 * t98;
t10 = pkin(10) * t233 + t13;
t168 = t101 * t187;
t201 = t95 * t218;
t184 = t96 * t201;
t186 = t219 * qJD(3);
t185 = t94 * t201;
t28 = t43 * qJD(5) - t249 * t184 + t248 * t185;
t103 = pkin(1) * t168 - pkin(4) * t184 + t28 * pkin(5) + t114 * pkin(10) - t252 * t201 + t186;
t1 = t10 * t215 + t263 * t100 - t103 * t98;
t7 = -t98 * t10 + t100 * t113;
t8 = t100 * t10 + t113 * t98;
t170 = t100 * t8 - t7 * t98;
t2 = -t10 * t212 + t100 * t103 + t263 * t98;
t256 = qJD(6) * t170 - t1 * t98 + t100 * t2;
t67 = t69 ^ 2;
t92 = t99 ^ 2;
t255 = 0.2e1 * t95;
t254 = 0.2e1 * qJD(2);
t253 = 0.2e1 * qJD(3);
t251 = pkin(5) * t62;
t17 = t260 * t100 + t43 * t215 - t98 * t83;
t247 = t17 * t98;
t246 = t28 * t98;
t33 = -t100 * t233 + t43 * t98;
t245 = t33 * t98;
t34 = t100 * t43 + t98 * t233;
t244 = t34 * t98;
t243 = t43 * t62;
t36 = -t71 * t193 - t94 * t189 + (-qJD(5) * t177 + t190) * t96;
t47 = t96 * t178 - t248 * t71;
t242 = t47 * t36;
t206 = pkin(8) * t220;
t65 = t180 + t206;
t60 = t65 * qJD(2);
t241 = t60 * t99;
t240 = t61 * t96;
t239 = t62 * t98;
t238 = t68 * t63;
t237 = t69 * t62;
t236 = t69 * t98;
t89 = t95 ^ 2;
t235 = t89 * t92;
t18 = -t100 * t83 + t43 * t212 - t260 * t98;
t16 = t98 * t18;
t230 = -t33 * t212 - t16;
t226 = t91 + t93;
t224 = t100 * t18;
t223 = t100 * t33;
t222 = t100 * t34;
t221 = t100 * t62;
t214 = qJ(3) * qJD(3);
t211 = 0.2e1 * t42 * t28;
t210 = 0.2e1 * t238;
t208 = -0.2e1 * pkin(5) * qJD(6);
t205 = t98 * t221;
t204 = t68 * t215;
t203 = t69 * t215;
t200 = t68 ^ 2 + t67;
t199 = t89 * t213;
t198 = t98 * t212;
t196 = t94 * t229;
t195 = t231 * t99;
t194 = t226 * t63;
t191 = t60 * t219;
t183 = t67 * t198;
t182 = t99 * t199;
t181 = t94 * t83;
t176 = -pkin(10) * t63 + t251;
t175 = pkin(5) * t69 + pkin(10) * t68;
t6 = -t13 * qJD(5) + t249 * t104 - t248 * t106;
t4 = -pkin(5) * t83 - t6;
t9 = -pkin(5) * t233 + t262;
t174 = t4 * t69 - t62 * t9;
t169 = t100 * t7 + t8 * t98;
t167 = t94 * t184;
t165 = -t17 * t69 - t34 * t62;
t23 = t121 + (-t139 + (t148 * t101 - t94 * t195) * qJD(2)) * t95;
t24 = t122 + (t138 + (t96 * t195 + t134) * qJD(2)) * t95;
t164 = t23 * t96 + t24 * t94;
t163 = t69 * t28 - t62 * t42;
t162 = t28 * t68 + t42 * t63;
t161 = t36 * t69 - t47 * t62;
t160 = t237 - t238;
t159 = t62 * t68 - t63 * t69;
t158 = -pkin(2) * t101 - t225;
t155 = t100 * t25 + t26 * t98;
t153 = t95 * t172;
t151 = t95 * t168;
t149 = t9 * t212 + t4 * t98;
t146 = -t100 * t17 - t34 * t215;
t145 = -t100 * t28 + t42 * t215;
t144 = t42 * t212 + t246;
t143 = -t203 - t221;
t142 = t69 * t212 - t239;
t45 = t68 * t212 + t63 * t98;
t137 = 0.2e1 * t160;
t135 = (-t68 * t213 - t63 * t99) * t95;
t128 = -t13 * t63 - t262 * t62 + t5 * t68 - t6 * t69;
t123 = -qJD(6) * t169 - t1 * t100 - t2 * t98;
t119 = -qJD(6) * t155 - t100 * t14 - t15 * t98;
t118 = -t224 - t247 + (t222 + t245) * qJD(6);
t115 = -t68 * t201 - t136;
t110 = t259 * t68 + t48 * t63 - t161;
t75 = t96 * t83;
t73 = -0.2e1 * t182;
t72 = 0.2e1 * t182;
t58 = (t101 ^ 2 - t92) * t89 * t254;
t56 = t131 + t209;
t54 = (-pkin(1) + t158) * t95;
t53 = t129 - t206;
t51 = -t186 + t59;
t50 = (-t217 + (pkin(2) * t99 - qJ(3) * t101) * qJD(2)) * t95;
t46 = t186 + (-t252 * t233 + t179) * qJD(2);
t44 = -t100 * t63 + t204;
t39 = t186 + (t179 + (-t96 * pkin(4) - t252) * t233) * qJD(2);
t38 = (t69 * t213 - t62 * t99) * t95;
t31 = t69 * t188 + t205;
t29 = t116 + (t148 * t99 - t141) * t95;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t58, 0.2e1 * t151, t73, -0.2e1 * t153, 0, -0.2e1 * t89 * pkin(1) * t218 - 0.2e1 * t191, -0.2e1 * pkin(1) * t199 + 0.2e1 * t59 * t219 (-t101 * t59 + t241 + (t101 * t132 - t65 * t99) * qJD(2)) * t255, 0.2e1 * t132 * t60 - 0.2e1 * t59 * t65, 0, -0.2e1 * t151, 0.2e1 * t153, t72, t58, t73 (-t101 * t51 + t241 + (t101 * t56 + t53 * t99) * qJD(2)) * t255, 0.2e1 * t191 + 0.2e1 * (t101 * t50 - t54 * t218) * t95, -0.2e1 * t51 * t219 + 0.2e1 * (-t54 * t213 - t50 * t99) * t95, 0.2e1 * t50 * t54 + 0.2e1 * t51 * t53 + 0.2e1 * t56 * t60, 0.2e1 * t61 * t185, 0.2e1 * (-t196 + t240) * t201 (t61 * t220 + t94 * t235) * t254, -0.2e1 * t229 * t184 (-t229 * t220 + t96 * t235) * t254, t72, 0.2e1 * t46 * t229 + 0.2e1 * (t23 * t99 + (t101 * t29 - t49 * t232) * qJD(2)) * t95, 0.2e1 * t46 * t61 + 0.2e1 * (-t24 * t99 + (-t101 * t30 + t234 * t49) * qJD(2)) * t95, -0.2e1 * t24 * t229 - 0.2e1 * t23 * t61 + 0.2e1 * (-t29 * t94 + t30 * t96) * t201, 0.2e1 * t23 * t29 + 0.2e1 * t24 * t30 + 0.2e1 * t46 * t49, -0.2e1 * t43 * t114, 0.2e1 * t114 * t42 - 0.2e1 * t43 * t28 (t136 * t99 + (t43 * t101 + t130 * t92) * qJD(2)) * t255, t211 (-t213 * t42 - t28 * t99) * t255, t72, 0.2e1 * t37 * t28 + 0.2e1 * t39 * t42 + 0.2e1 * (-t213 * t262 + t6 * t99) * t95, -0.2e1 * t114 * t37 - 0.2e1 * t13 * t83 + 0.2e1 * t233 * t5 + 0.2e1 * t39 * t43, -0.2e1 * t115 * t262 - 0.2e1 * t13 * t28 + 0.2e1 * t5 * t42 - 0.2e1 * t6 * t43, -0.2e1 * t13 * t5 - 0.2e1 * t262 * t6 + 0.2e1 * t37 * t39, -0.2e1 * t34 * t17, 0.2e1 * t17 * t33 - 0.2e1 * t18 * t34, -0.2e1 * t17 * t42 + 0.2e1 * t28 * t34, 0.2e1 * t33 * t18, -0.2e1 * t18 * t42 - 0.2e1 * t28 * t33, t211, 0.2e1 * t18 * t9 + 0.2e1 * t2 * t42 + 0.2e1 * t28 * t7 + 0.2e1 * t33 * t4, 0.2e1 * t1 * t42 - 0.2e1 * t17 * t9 - 0.2e1 * t28 * t8 + 0.2e1 * t34 * t4, 0.2e1 * t1 * t33 + 0.2e1 * t17 * t7 - 0.2e1 * t18 * t8 - 0.2e1 * t2 * t34, -0.2e1 * t1 * t8 + 0.2e1 * t2 * t7 + 0.2e1 * t4 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, -t201, 0, -t60, t59, 0, 0, 0, -t83, t201, 0, 0, 0 (qJD(2) * t158 + qJD(3) * t101) * t95, t60, 0.2e1 * t186 - t59, -pkin(2) * t60 - qJ(3) * t51 - qJD(3) * t53, t167 (-t88 + t90) * t201, t75, -t167, -t181, 0, qJD(3) * t229 - t265 * t96 + t46 * t94, qJD(3) * t61 + t265 * t94 + t46 * t96 (t196 + t240) * qJD(4) - t164, qJ(3) * t46 + qJD(3) * t49 - t164 * t231 + (-t29 * t96 - t30 * t94) * qJD(4), -t114 * t69 - t243, t114 * t68 - t43 * t63 - t163, t38, t162, t135, 0, qJD(3) * t42 + t86 * t28 + t37 * t63 + t39 * t68 + (-t213 * t47 - t36 * t99) * t95, qJD(3) * t43 - t114 * t86 - t233 * t259 - t37 * t62 + t39 * t69 - t48 * t83, -t115 * t47 - t259 * t42 - t48 * t28 + t36 * t43 + t128, t37 * qJD(3) + t13 * t259 + t262 * t36 + t39 * t86 - t6 * t47 - t5 * t48, t100 * t165 - t203 * t34 (t223 + t244) * t62 + (-t224 + t247 + (-t222 + t245) * qJD(6)) * t69, t100 * t163 - t17 * t68 - t203 * t42 + t34 * t63, t142 * t33 + t16 * t69, -t142 * t42 - t18 * t68 - t236 * t28 - t33 * t63, t162, t149 * t69 + t15 * t42 + t18 * t47 + t2 * t68 - t239 * t9 + t25 * t28 + t33 * t36 + t63 * t7, t1 * t68 + t100 * t174 + t14 * t42 - t17 * t47 - t203 * t9 - t26 * t28 + t34 * t36 - t63 * t8, t14 * t33 - t15 * t34 + t169 * t62 + t17 * t25 - t18 * t26 - t256 * t69, -t1 * t26 - t14 * t8 + t15 * t7 + t2 * t25 + t36 * t9 + t4 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t253, 0.2e1 * t214, 0, 0, 0, 0, 0, 0, t94 * t253, t96 * t253, 0.2e1 * t74, 0.2e1 * t231 * t74 + 0.2e1 * t214, -0.2e1 * t237, 0.2e1 * t159, 0, t210, 0, 0, 0.2e1 * qJD(3) * t68 + 0.2e1 * t63 * t86, 0.2e1 * qJD(3) * t69 - 0.2e1 * t62 * t86, -0.2e1 * t110, 0.2e1 * t86 * qJD(3) + 0.2e1 * t259 * t48 + 0.2e1 * t242, -0.2e1 * t237 * t93 - 0.2e1 * t183, 0.2e1 * t188 * t67 + 0.4e1 * t205 * t69, -0.2e1 * t100 * t159 - 0.2e1 * t203 * t68, -0.2e1 * t237 * t91 + 0.2e1 * t183, -0.2e1 * t142 * t68 - 0.2e1 * t236 * t63, t210, 0.2e1 * t142 * t47 + 0.2e1 * t15 * t68 + 0.2e1 * t236 * t36 + 0.2e1 * t25 * t63, 0.2e1 * t100 * t161 + 0.2e1 * t14 * t68 - 0.2e1 * t203 * t47 - 0.2e1 * t26 * t63, 0.2e1 * t155 * t62 - 0.2e1 * t257 * t69, -0.2e1 * t14 * t26 + 0.2e1 * t15 * t25 + 0.2e1 * t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, t60, 0, 0, 0, 0, 0, 0, t75, -t181, 0, t164, 0, 0, 0, 0, 0, 0, t38, t135, t115 * t69 - t162 + t243, -t128, 0, 0, 0, 0, 0, 0, -t18 * t69 - t246 * t68 + t33 * t62 - t42 * t45, -t100 * t162 + t204 * t42 - t165 (-t223 + t244) * t63 + t118 * t68, t123 * t68 + t170 * t63 - t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, 0, 0, 0, 0, 0, 0, 0, t137, t110, 0, 0, 0, 0, 0, 0, t137 * t98 - t200 * t212, t100 * t137 + t200 * t215, 0, t119 * t68 + t156 * t63 - t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t194 * t68 - 0.2e1 * t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t184, t185, 0, t46, 0, 0, 0, 0, 0, 0, t28, -t114, 0, t39, 0, 0, 0, 0, 0, 0, -t145, -t144, -t146 + t230, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, 0, 0, 0, 0, 0, t63, -t62, 0, qJD(3), 0, 0, 0, 0, 0, 0, -t44, -t45, t226 * t62, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t114, 0, -t28, t83, t6, t5, 0, 0, t212 * t34 - t247, t146 + t230, t144, t215 * t33 - t224, -t145, 0, -pkin(5) * t18 - pkin(10) * t144 - t100 * t4 + t215 * t9, pkin(5) * t17 + pkin(10) * t145 + t149, pkin(10) * t118 + t123, -pkin(5) * t4 + pkin(10) * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, -t63, 0, -t36, -t259, 0, 0, -t31, -0.4e1 * t198 * t69 + t227 * t62, t45, t31, -t44, 0, -t100 * t36 + t176 * t98 + (-t100 * t175 + t47 * t98) * qJD(6), t36 * t98 + t176 * t100 + (t100 * t47 + t175 * t98) * qJD(6), t119, -pkin(5) * t36 + pkin(10) * t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, -t63, 0, 0, 0, 0, 0, 0, 0, 0, t143, -t142, t194, pkin(10) * t194 - t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t198, -0.2e1 * t188, 0, -0.2e1 * t198, 0, 0, t98 * t208, t100 * t208, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, 0, -t18, t28, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, -t142, t63, t15, t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t212, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t212, 0, -t215, 0, -pkin(10) * t212, pkin(10) * t215, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
