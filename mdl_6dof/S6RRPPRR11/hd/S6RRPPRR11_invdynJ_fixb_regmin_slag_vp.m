% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR11_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:42:48
% EndTime: 2019-03-09 09:43:10
% DurationCPUTime: 11.52s
% Computational Cost: add. (8106->606), mult. (19798->817), div. (0->0), fcn. (15804->14), ass. (0->302)
t252 = sin(qJ(6));
t256 = cos(qJ(6));
t249 = cos(pkin(11));
t250 = cos(pkin(6));
t360 = qJDD(1) * t250;
t223 = qJDD(2) + t360;
t247 = sin(pkin(11));
t248 = sin(pkin(6));
t254 = sin(qJ(2));
t361 = qJD(1) * qJD(2);
t340 = t254 * t361;
t317 = t248 * t340;
t328 = t247 * t223 - t249 * t317;
t257 = cos(qJ(2));
t357 = qJDD(1) * t257;
t338 = t248 * t357;
t115 = t249 * t338 + t328;
t327 = t249 * t223 - t247 * t338;
t116 = t247 * t317 + t327;
t253 = sin(qJ(5));
t418 = cos(qJ(5));
t329 = t418 * t115 + t253 * t116;
t376 = qJD(1) * t250;
t225 = qJD(2) + t376;
t374 = qJD(1) * t257;
t345 = t248 * t374;
t153 = t225 * t249 - t247 * t345;
t383 = t247 * t225 + t249 * t345;
t434 = t418 * t153 - t253 * t383;
t36 = qJD(5) * t434 + t329;
t34 = qJDD(6) + t36;
t146 = t418 * t383;
t85 = t153 * t253 + t146;
t83 = qJD(6) + t85;
t438 = t83 ^ 2;
t439 = -t252 * t438 + t256 * t34;
t375 = qJD(1) * t254;
t346 = t248 * t375;
t200 = qJD(5) + t346;
t437 = t200 * t85;
t69 = -t256 * t200 + t252 * t434;
t436 = t434 * t69;
t71 = t200 * t252 + t256 * t434;
t435 = t434 * t71;
t354 = pkin(1) * t376;
t382 = -pkin(8) * t346 + t257 * t354;
t363 = qJD(3) - t382;
t303 = t418 * t346;
t319 = t253 * t346;
t137 = -t247 * t303 - t249 * t319;
t341 = qJD(5) * t418;
t369 = qJD(5) * t253;
t172 = -t247 * t341 - t249 * t369;
t385 = t172 + t137;
t384 = (t303 + t341) * t249 + (-t319 - t369) * t247;
t364 = pkin(3) * t346 + t363;
t243 = t248 ^ 2;
t356 = 0.2e1 * t243;
t286 = -t418 * t247 - t253 * t249;
t251 = -pkin(2) - qJ(4);
t411 = -pkin(9) + t251;
t187 = t411 * t247;
t188 = t411 * t249;
t287 = -t253 * t187 + t418 * t188;
t277 = (-pkin(9) * t247 * t254 + pkin(4) * t257) * t248;
t219 = pkin(2) * t346;
t404 = qJ(3) * t257;
t304 = qJ(4) * t254 - t404;
t377 = qJD(1) * t248;
t139 = t304 * t377 + t219;
t215 = pkin(8) * t345;
t164 = t254 * t354 + t215;
t144 = pkin(3) * t345 + t164;
t74 = -t247 * t139 + t249 * t144;
t63 = qJD(1) * t277 + t74;
t75 = t249 * t139 + t247 * t144;
t66 = pkin(9) * t249 * t346 + t75;
t431 = -qJD(4) * t286 - qJD(5) * t287 + t253 * t63 + t418 * t66;
t130 = t418 * t187 + t253 * t188;
t391 = t253 * t247;
t285 = t418 * t249 - t391;
t430 = -qJD(4) * t285 - qJD(5) * t130 + t253 * t66 - t418 * t63;
t339 = t257 * t361;
t358 = qJDD(1) * t254;
t280 = t339 + t358;
t269 = t280 * t248;
t201 = t223 * qJ(3);
t429 = -t225 * qJD(3) - t201;
t394 = t248 * t257;
t170 = t247 * t250 + t249 * t394;
t171 = -t247 * t394 + t249 * t250;
t102 = -t253 * t170 + t418 * t171;
t389 = t254 * t256;
t205 = t248 * t389;
t428 = -t102 * t252 + t205;
t347 = -pkin(4) * t249 - pkin(3);
t365 = -t347 * t346 + t363;
t337 = -qJ(3) * t254 - pkin(1);
t298 = -pkin(2) * t257 + t337;
t147 = t298 * t377;
t427 = t147 * t346 + qJDD(3);
t426 = pkin(3) * t338 + qJDD(4);
t255 = sin(qJ(1));
t387 = t255 * t257;
t258 = cos(qJ(1));
t388 = t254 * t258;
t176 = t250 * t387 + t388;
t244 = pkin(11) + qJ(5);
t238 = sin(t244);
t239 = cos(t244);
t395 = t248 * t255;
t119 = t176 * t239 - t238 * t395;
t393 = t248 * t258;
t386 = t257 * t258;
t390 = t254 * t255;
t174 = -t250 * t386 + t390;
t402 = t174 * t239;
t279 = g(1) * t119 + g(2) * (t238 * t393 + t402) + g(3) * (-t238 * t250 - t239 * t394);
t161 = qJDD(5) + t269;
t276 = t251 * t257 + t337;
t118 = t276 * t377;
t95 = t251 * t225 + t364;
t54 = -t118 * t247 + t249 * t95;
t39 = pkin(4) * t346 - pkin(9) * t153 + t54;
t55 = t249 * t118 + t247 * t95;
t41 = -t383 * pkin(9) + t55;
t14 = t253 * t39 + t418 * t41;
t396 = t248 * t254;
t227 = pkin(8) * t396;
t353 = pkin(1) * qJD(2) * t250;
t323 = qJD(1) * t353;
t352 = pkin(1) * t360;
t320 = qJD(2) * t215 + qJDD(1) * t227 + t254 * t323 - t257 * t352;
t302 = qJDD(3) + t320;
t56 = pkin(3) * t269 - qJD(4) * t225 + t251 * t223 + t302;
t195 = pkin(2) * t317;
t370 = qJD(3) * t254;
t261 = qJD(2) * t304 - qJD(4) * t257 - t370;
t60 = t195 + (qJD(1) * t261 + qJDD(1) * t276) * t248;
t25 = -t247 * t60 + t249 * t56;
t17 = pkin(4) * t269 - t116 * pkin(9) + t25;
t26 = t247 * t56 + t249 * t60;
t21 = -pkin(9) * t115 + t26;
t263 = -qJD(5) * t14 + t418 * t17 - t253 * t21;
t4 = -t161 * pkin(5) - t263;
t425 = (pkin(5) * t434 + t83 * pkin(10)) * t83 + t279 + t4;
t35 = -qJD(5) * t146 - t253 * t115 + t418 * t116 - t153 * t369;
t19 = t71 * qJD(6) - t256 * t161 + t252 * t35;
t175 = t250 * t388 + t387;
t291 = -t174 * t238 + t239 * t393;
t424 = t175 * t256 + t252 * t291;
t203 = t225 * qJ(3);
t108 = t203 + qJD(4) + t144;
t371 = qJD(2) * t257;
t423 = -t251 * t371 + (qJD(4) - t108) * t254;
t422 = -t175 * t252 + t256 * t291;
t348 = -pkin(1) * t257 - pkin(2);
t125 = pkin(3) * t396 + t227 + (-qJ(4) + t348) * t250;
t380 = pkin(2) * t394 + qJ(3) * t396;
t135 = (-qJ(4) * t257 - pkin(1)) * t248 - t380;
t72 = t249 * t125 - t135 * t247;
t50 = pkin(4) * t396 - pkin(9) * t171 + t72;
t73 = t247 * t125 + t249 * t135;
t58 = -pkin(9) * t170 + t73;
t292 = t253 * t50 + t418 * t58;
t417 = pkin(1) * t254;
t233 = t250 * t417;
t419 = pkin(3) + pkin(8);
t127 = -t250 * qJD(4) + (t419 * t394 + t233) * qJD(2);
t372 = qJD(2) * t254;
t344 = t248 * t372;
t214 = pkin(2) * t344;
t98 = t248 * t261 + t214;
t61 = t249 * t127 - t247 * t98;
t44 = qJD(2) * t277 + t61;
t318 = t249 * t344;
t62 = t247 * t127 + t249 * t98;
t49 = pkin(9) * t318 + t62;
t421 = -qJD(5) * t292 - t253 * t49 + t418 * t44;
t321 = -t254 * t352 - t257 * t323 + (t317 - t338) * pkin(8);
t77 = t321 + t429;
t64 = -pkin(3) * t317 + t426 - t77;
t40 = pkin(4) * t115 + t64;
t10 = pkin(5) * t36 - pkin(10) * t35 + t40;
t290 = t253 * t17 + t418 * t21 + t39 * t341 - t41 * t369;
t3 = pkin(10) * t161 + t290;
t12 = t200 * pkin(10) + t14;
t76 = t383 * pkin(4) + t108;
t29 = t85 * pkin(5) - pkin(10) * t434 + t76;
t308 = t12 * t252 - t256 * t29;
t1 = -t308 * qJD(6) + t252 * t10 + t256 * t3;
t235 = t247 * pkin(4) + qJ(3);
t110 = -pkin(5) * t286 - pkin(10) * t285 + t235;
t177 = -t250 * t390 + t386;
t314 = g(1) * t177 + g(2) * t175;
t420 = t238 * t314 + (-t384 * pkin(5) + t385 * pkin(10) + qJD(6) * t130 - t365) * t83 - t110 * t34;
t416 = pkin(2) * t223;
t415 = g(1) * t258;
t414 = g(3) * t248;
t413 = t69 * t83;
t412 = t71 * t83;
t409 = pkin(5) * t345 - t430;
t367 = qJD(6) * t256;
t368 = qJD(6) * t252;
t18 = t252 * t161 + t200 * t367 + t256 * t35 - t368 * t434;
t407 = t18 * t252;
t406 = t252 * t34;
t405 = t34 * t286;
t399 = t285 * t256;
t398 = t223 * t250;
t397 = t243 * qJD(1) ^ 2;
t392 = t252 * t254;
t218 = t257 * t353;
t237 = t250 * qJD(3);
t381 = t218 + t237;
t379 = pkin(8) * t394 + t233;
t245 = t254 ^ 2;
t378 = -t257 ^ 2 + t245;
t373 = qJD(2) * t247;
t366 = qJD(2) - t225;
t359 = qJDD(1) * t251;
t355 = g(3) * t396;
t351 = t245 * t397;
t350 = t257 * t397;
t349 = t248 * t392;
t157 = -t250 * qJ(3) - t379;
t343 = t248 * t371;
t332 = t256 * t83;
t331 = -t174 * pkin(2) + qJ(3) * t175;
t330 = -t176 * pkin(2) + qJ(3) * t177;
t326 = t225 + t376;
t325 = -qJD(6) * t286 + t225;
t324 = t223 + t360;
t322 = t254 * t350;
t138 = pkin(3) * t394 - t157;
t316 = g(1) * t176 + g(2) * t174;
t315 = g(1) * t174 - g(2) * t176;
t313 = g(1) * t175 - g(2) * t177;
t312 = g(2) * t255 + t415;
t310 = t285 * t161 + t385 * t200;
t6 = t12 * t256 + t252 * t29;
t23 = pkin(10) * t396 + t292;
t288 = -t418 * t170 - t253 * t171;
t96 = pkin(4) * t170 + t138;
t37 = -pkin(5) * t288 - pkin(10) * t102 + t96;
t307 = t23 * t256 + t252 * t37;
t306 = -t23 * t252 + t256 * t37;
t305 = t26 * t247 + t25 * t249;
t158 = -t248 * pkin(1) - t380;
t301 = qJD(2) * (-qJD(1) * t158 - t147);
t300 = -pkin(8) * t344 + t218;
t299 = -t314 + t64;
t297 = -g(3) * t394 + t316;
t296 = t258 * pkin(1) + t177 * pkin(2) + pkin(8) * t395 + qJ(3) * t176;
t13 = -t253 * t41 + t418 * t39;
t295 = -t253 * t58 + t418 * t50;
t82 = t102 * t256 + t349;
t289 = t253 * t44 + t50 * t341 - t58 * t369 + t418 * t49;
t284 = -qJ(3) * t371 - t370;
t145 = t248 * t284 + t214;
t80 = t195 + (qJD(1) * t284 + qJDD(1) * t298) * t248;
t283 = qJD(1) * t145 + qJDD(1) * t158 + t80;
t281 = t161 * t286 - t384 * t200;
t278 = -pkin(1) * t255 - t175 * pkin(2) + pkin(8) * t393 - qJ(3) * t174;
t165 = t379 * qJD(2);
t275 = t165 * t225 - t313;
t99 = -t137 * t252 - t256 * t345;
t274 = -t172 * t252 - t285 * t367 + t99;
t100 = -t137 * t256 + t252 * t345;
t273 = t172 * t256 - t285 * t368 - t100;
t272 = (-t247 * t54 + t249 * t55) * t396;
t270 = -t314 - t355;
t11 = -t200 * pkin(5) - t13;
t268 = -pkin(10) * t34 + (t11 + t13) * t83;
t267 = -t314 - t321;
t266 = t297 - t320;
t265 = (t366 * t374 + t358) * t248;
t97 = (-pkin(8) + t347) * t344 + t381;
t2 = -t6 * qJD(6) + t256 * t10 - t252 * t3;
t264 = t267 - t429;
t262 = t164 * t225 + t266;
t260 = -t130 * t34 + t4 * t285 + (pkin(10) * t345 - qJD(6) * t110 + t431) * t83 + t316;
t162 = -qJ(3) * t345 + t219;
t160 = t348 * t250 + t227;
t156 = -t238 * t394 + t239 * t250;
t148 = -t237 - t300;
t140 = -t203 - t164;
t134 = -pkin(2) * t225 + t363;
t126 = -t419 * t344 + t381;
t120 = t176 * t238 + t239 * t395;
t93 = t302 - t416;
t79 = t120 * t256 + t177 * t252;
t78 = -t120 * t252 + t177 * t256;
t68 = t102 * qJD(5) - t418 * t318 + t344 * t391;
t67 = qJD(5) * t288 - t286 * t344;
t31 = qJD(6) * t82 + t252 * t67 - t256 * t343;
t30 = t428 * qJD(6) + t252 * t343 + t256 * t67;
t24 = pkin(5) * t68 - pkin(10) * t67 + t97;
t22 = -pkin(5) * t396 - t295;
t8 = -pkin(5) * t343 - t421;
t7 = pkin(10) * t343 + t289;
t5 = [qJDD(1), g(1) * t255 - g(2) * t258, t312 (qJDD(1) * t245 + 0.2e1 * t254 * t339) * t243 (t254 * t357 - t378 * t361) * t356 (t324 * t254 + t326 * t371) * t248 (t324 * t257 - t326 * t372) * t248, t398, -t227 * t223 - t320 * t250 + (t257 * t398 + (-t340 + t357) * t356) * pkin(1) - t275, -t280 * pkin(1) * t356 - t379 * t223 - t300 * t225 + t321 * t250 - t315 ((qJD(2) * t134 - qJDD(1) * t157 - t77 + (qJD(2) * t160 - t148) * qJD(1)) * t257 + (qJD(2) * t140 + qJDD(1) * t160 + t93 + (qJD(2) * t157 + t165) * qJD(1)) * t254 - t312) * t248, t160 * t223 + t250 * t93 + (t254 * t301 + t257 * t283) * t248 + t275, -t148 * t225 - t157 * t223 - t250 * t77 + (-t254 * t283 + t257 * t301) * t248 + t315, -g(1) * t278 - g(2) * t296 + t134 * t165 + t140 * t148 + t147 * t145 + t77 * t157 + t80 * t158 + t93 * t160, t126 * t383 + t138 * t115 + t64 * t170 + t315 * t247 + (-t312 * t249 + (qJD(1) * t72 + t54) * t371 + (-qJD(2) * t108 * t249 + qJD(1) * t61 + qJDD(1) * t72 + t25) * t254) * t248, t138 * t116 + t126 * t153 + t64 * t171 + t315 * t249 + (t312 * t247 + (-qJD(1) * t73 - t55) * t371 + (-qJD(1) * t62 - qJDD(1) * t73 + t108 * t373 - t26) * t254) * t248, qJD(2) * t272 - t73 * t115 - t72 * t116 - t61 * t153 - t26 * t170 - t25 * t171 - t62 * t383 + t313, t26 * t73 + t55 * t62 + t25 * t72 + t54 * t61 + t64 * t138 + t108 * t126 - g(1) * (pkin(3) * t393 - qJ(4) * t175 + t278) - g(2) * (pkin(3) * t395 + qJ(4) * t177 + t296) t102 * t35 + t434 * t67, -t102 * t36 + t288 * t35 - t434 * t68 - t67 * t85, t102 * t161 + t67 * t200 + (t254 * t35 + t371 * t434) * t248, t288 * t161 - t68 * t200 + (-t254 * t36 - t371 * t85) * t248 (t161 * t254 + t200 * t371) * t248, -g(1) * t291 - g(2) * t120 + t13 * t343 + t295 * t161 + t200 * t421 + t263 * t396 - t288 * t40 + t96 * t36 + t76 * t68 + t97 * t85, -t289 * t200 - t292 * t161 + t97 * t434 + t96 * t35 + t40 * t102 + t76 * t67 + g(1) * t402 - g(2) * t119 + (-t14 * t371 + t238 * t415 - t254 * t290) * t248, t18 * t82 + t30 * t71, t18 * t428 - t19 * t82 - t30 * t69 - t31 * t71, -t18 * t288 + t30 * t83 + t34 * t82 + t68 * t71, t19 * t288 - t31 * t83 + t34 * t428 - t68 * t69, -t288 * t34 + t68 * t83 (-qJD(6) * t307 + t256 * t24 - t252 * t7) * t83 + t306 * t34 - t2 * t288 - t308 * t68 + t8 * t69 + t22 * t19 - t4 * t428 + t11 * t31 - g(1) * t422 - g(2) * t79 -(qJD(6) * t306 + t252 * t24 + t256 * t7) * t83 - t307 * t34 + t1 * t288 - t6 * t68 + t8 * t71 + t22 * t18 + t4 * t82 + t11 * t30 + g(1) * t424 - g(2) * t78; 0, 0, 0, -t322, t378 * t397, t265 (-t366 * t375 + t357) * t248, t223, t397 * t417 + t262, pkin(1) * t350 + t225 * t382 - t267 + t355 ((-pkin(2) * t254 + t404) * qJDD(1) + ((-qJ(3) * qJD(2) - t140 - t164) * t254 + (-pkin(2) * qJD(2) - t134 + t363) * t257) * qJD(1)) * t248, -t162 * t345 - t262 - 0.2e1 * t416 + t427, t201 + t363 * t225 + (-g(3) * t254 + (t147 * t257 + t162 * t254) * qJD(1)) * t248 + t264, -t93 * pkin(2) - g(1) * t330 - g(2) * t331 - g(3) * t380 - t77 * qJ(3) - t134 * t164 - t363 * t140 - t147 * t162, qJ(3) * t115 + t299 * t247 + ((-g(3) * t247 + t249 * t359) * t254 + (-t249 * t423 - t254 * t74 - t257 * t54) * qJD(1)) * t248 + t364 * t383, qJ(3) * t116 + t364 * t153 + t299 * t249 + ((-g(3) * t249 - t247 * t359) * t254 + (t247 * t423 + t254 * t75 + t257 * t55) * qJD(1)) * t248, t75 * t383 + t74 * t153 + (qJD(4) * t153 - t116 * t251 - t346 * t55 - t25) * t249 + (qJD(4) * t383 - t251 * t115 + t54 * t346 - t26) * t247 + t297, t64 * qJ(3) - t55 * t75 - t54 * t74 - g(1) * (-qJ(4) * t176 + t330) - g(2) * (-qJ(4) * t174 + t331) - g(3) * (qJ(4) * t394 + t380) + t305 * t251 + t364 * t108 + (-t247 * t55 - t249 * t54) * qJD(4), t285 * t35 + t385 * t434, -t285 * t36 + t286 * t35 - t384 * t434 - t385 * t85, -t345 * t434 + t310, t345 * t85 + t281, -t200 * t345, -t13 * t345 + t161 * t287 + t430 * t200 + t235 * t36 + t270 * t238 - t286 * t40 + t365 * t85 + t384 * t76, -t130 * t161 + t14 * t345 + t431 * t200 + t235 * t35 + t270 * t239 + t285 * t40 + t365 * t434 + t385 * t76, t18 * t399 + t273 * t71, t100 * t69 + t71 * t99 + (-t252 * t71 - t256 * t69) * t172 - (t407 + t19 * t256 + (-t252 * t69 + t256 * t71) * qJD(6)) * t285, -t18 * t286 + t273 * t83 + t34 * t399 + t384 * t71, t19 * t286 + t274 * t83 - t285 * t406 - t384 * t69, t384 * t83 - t405, -t287 * t19 - t2 * t286 + t409 * t69 - t384 * t308 - t420 * t256 + t260 * t252 - (t238 * t389 + t252 * t257) * t414 - t274 * t11, t1 * t286 - t287 * t18 + t409 * t71 - t384 * t6 + t420 * t252 + t260 * t256 - (-t238 * t392 + t256 * t257) * t414 + t273 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, t223 + t322, -t225 ^ 2 - t351, t140 * t225 - t266 - t416 + t427, -t225 * t383 - t247 * t351 + t249 * t269, -t225 * t153 - t247 * t269 - t249 * t351, -t247 * t115 - t249 * t116 + (t247 * t153 - t249 * t383) * t346, qJD(1) * t272 - t108 * t225 - t297 + t305, 0, 0, 0, 0, 0, -t225 * t85 + t310, -t225 * t434 + t281, 0, 0, 0, 0, 0, t252 * t405 - t285 * t19 - t385 * t69 + (-t384 * t252 - t325 * t256) * t83, t256 * t405 - t285 * t18 - t385 * t71 + (t325 * t252 - t384 * t256) * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t153 * t375 + t249 * t357) * t248 + t328 (-t383 + t373) * t346 + t327, -t153 ^ 2 - t383 ^ 2, t153 * t54 + t383 * t55 + (-pkin(3) * t361 - g(3)) * t396 + t264 + t426, 0, 0, 0, 0, 0, t200 * t434 + t36, t35 - t437, 0, 0, 0, 0, 0, -t436 + t439, -t256 * t438 - t406 - t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t434 * t85, t434 ^ 2 - t85 ^ 2, t35 + t437, -t329 + (-qJD(5) + t200) * t434, t161, t14 * t200 - t434 * t76 + t263 - t279, g(1) * t120 - g(2) * t291 + g(3) * t156 + t13 * t200 + t76 * t85 - t290, t332 * t71 + t407 (t18 - t413) * t256 + (-t19 - t412) * t252, t332 * t83 + t406 - t435, t436 + t439, -t83 * t434, -pkin(5) * t19 - t14 * t69 + t268 * t252 - t256 * t425 + t308 * t434, -pkin(5) * t18 - t14 * t71 + t252 * t425 + t268 * t256 + t434 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t69, -t69 ^ 2 + t71 ^ 2, t18 + t413, -t19 + t412, t34, t6 * t83 - t11 * t71 - g(1) * t78 - g(2) * t424 - g(3) * (-t156 * t252 + t205) + t2, -t308 * t83 + t11 * t69 + g(1) * t79 - g(2) * t422 - g(3) * (-t156 * t256 - t349) - t1;];
tau_reg  = t5;
