% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR11_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:03:30
% EndTime: 2019-05-06 12:04:29
% DurationCPUTime: 47.79s
% Computational Cost: add. (262289->938), mult. (622534->1444), div. (0->0), fcn. (470695->12), ass. (0->679)
t1014 = sin(qJ(1));
t1018 = cos(qJ(1));
t1008 = sin(pkin(6));
t1010 = cos(pkin(6));
t1017 = cos(qJ(2));
t1013 = sin(qJ(2));
t1004 = t1008 ^ 2;
t1019 = qJD(1) ^ 2;
t1116 = t1013 * t1019;
t1102 = t1004 * t1116;
t1093 = t1017 * t1102;
t997 = qJDD(1) * t1010 + qJDD(2);
t965 = -t1093 + t997;
t1136 = t1013 * t965;
t998 = t1010 * qJD(1) + qJD(2);
t994 = t998 ^ 2;
t1005 = t1013 ^ 2;
t1122 = t1004 * t1019;
t995 = t1005 * t1122;
t948 = -t995 - t994;
t1057 = -t1017 * t948 + t1136;
t966 = (qJD(1) * qJD(2) * t1017 + qJDD(1) * t1013) * t1008;
t1120 = t1008 * t1017;
t1103 = qJD(1) * t1120;
t976 = t998 * t1103;
t930 = t976 + t966;
t853 = t1008 * t930 + t1010 * t1057;
t1126 = t1017 * t965;
t907 = t1013 * t948 + t1126;
t792 = t1014 * t907 + t1018 * t853;
t1220 = pkin(7) * t792;
t795 = t1014 * t853 - t1018 * t907;
t1219 = pkin(7) * t795;
t964 = t1093 + t997;
t1127 = t1017 * t964;
t1006 = t1017 ^ 2;
t996 = t1006 * t1122;
t971 = -t996 - t994;
t1055 = t1013 * t971 + t1127;
t1123 = qJD(1) * t1013;
t1106 = t998 * t1123;
t1115 = qJDD(1) * t1017;
t1121 = t1008 * t1013;
t1104 = qJD(1) * t1121;
t991 = qJD(2) * t1104;
t928 = -t991 + (-t1106 + t1115) * t1008;
t861 = t1008 * t928 + t1010 * t1055;
t1137 = t1013 * t964;
t918 = -t1017 * t971 + t1137;
t805 = -t1014 * t918 + t1018 * t861;
t1218 = pkin(7) * t805;
t808 = t1014 * t861 + t1018 * t918;
t1217 = pkin(7) * t808;
t855 = t1008 * t1055 - t1010 * t928;
t1216 = pkin(8) * (t1008 * t855 + t1010 * t861);
t851 = t1008 * t1057 - t1010 * t930;
t1215 = pkin(8) * (t1008 * t851 + t1010 * t853);
t1214 = pkin(1) * t851;
t1213 = pkin(1) * t853;
t1212 = pkin(1) * t855;
t1211 = pkin(1) * t861;
t970 = t996 - t994;
t1054 = t1013 * t970 + t1126;
t932 = -t991 + (t1106 + t1115) * t1008;
t859 = -t1008 * t932 + t1010 * t1054;
t916 = -t1017 * t970 + t1136;
t1210 = t1014 * t859 + t1018 * t916;
t969 = -t995 + t994;
t1056 = t1017 * t969 + t1137;
t931 = -t976 + t966;
t857 = -t1008 * t931 + t1010 * t1056;
t914 = t1013 * t969 - t1127;
t1209 = t1014 * t857 + t1018 * t914;
t1208 = -t1014 * t916 + t1018 * t859;
t1207 = -t1014 * t914 + t1018 * t857;
t1204 = 2 * qJD(4);
t1203 = pkin(8) * t907;
t1202 = pkin(8) * t918;
t1201 = qJ(3) * t930;
t1007 = sin(pkin(11));
t1009 = cos(pkin(11));
t953 = -t1007 * t998 - t1009 * t1103;
t954 = -t1007 * t1103 + t1009 * t998;
t912 = t953 * t954;
t1185 = t912 + t966;
t1192 = t1007 * t1185;
t1191 = t1009 * t1185;
t1011 = sin(qJ(6));
t1012 = sin(qJ(5));
t1016 = cos(qJ(5));
t967 = t1008 * t1115 - t991;
t925 = -t1007 * t997 - t1009 * t967;
t926 = -t1007 * t967 + t1009 * t997;
t1099 = t1012 * t926 - t1016 * t925;
t906 = t1012 * t953 + t1016 * t954;
t813 = -qJD(5) * t906 - t1099;
t1032 = qJDD(6) - t813;
t1015 = cos(qJ(6));
t987 = qJD(5) + t1104;
t876 = t1011 * t906 - t1015 * t987;
t878 = t1011 * t987 + t1015 * t906;
t799 = t878 * t876;
t1184 = t1032 - t799;
t1190 = t1011 * t1184;
t904 = t1012 * t954 - t1016 * t953;
t833 = t906 * t904;
t958 = qJDD(5) + t966;
t1186 = -t833 + t958;
t1189 = t1012 * t1186;
t1188 = t1015 * t1184;
t1187 = t1016 * t1186;
t814 = -t904 * qJD(5) + t1012 * t925 + t1016 * t926;
t744 = -t876 * qJD(6) + t1011 * t958 + t1015 * t814;
t901 = qJD(6) + t904;
t823 = t901 * t876;
t712 = -t823 + t744;
t937 = t953 * t1104;
t884 = t926 - t937;
t1168 = t904 * t987;
t1051 = t814 - t1168;
t1162 = qJD(1) * t998;
t1183 = t1004 * (-t1010 * t1019 + t1162);
t1173 = pkin(2) * t1017;
t1088 = -qJ(3) * t1013 - t1173;
t1124 = qJD(1) * t1008;
t963 = t1088 * t1124;
t1182 = t963 * t1104 + qJDD(3);
t1169 = t1010 * g(3);
t1096 = t998 * t1104;
t974 = pkin(2) * t1096;
t1101 = -t974 + t1169;
t1163 = qJ(3) * t1017;
t1175 = -pkin(2) - qJ(4);
t960 = pkin(3) * t1104 - qJ(4) * t998;
t1171 = pkin(8) * t1008;
t989 = g(1) * t1014 - t1018 * g(2);
t961 = qJDD(1) * pkin(1) + t1019 * t1171 + t989;
t988 = -0.2e1 * qJD(3) * t1104;
t785 = -pkin(3) * t996 - t966 * qJ(3) + t988 + t1175 * t967 + (-t961 + (-t1013 * t960 - t1163 * t998) * qJD(1)) * t1008 - t1101;
t1118 = t1010 * t1017;
t990 = g(1) * t1018 + g(2) * t1014;
t962 = -pkin(1) * t1019 + qJDD(1) * t1171 - t990;
t1098 = t1013 * t962 - t961 * t1118;
t1167 = t994 * qJ(3);
t788 = t966 * pkin(3) - t1167 + t1175 * t997 + (-qJ(4) * t1102 + (-pkin(3) * t1162 + g(3)) * t1008) * t1017 + t1098 + t1182;
t708 = t1007 * t788 + t1009 * t785 + t1204 * t953;
t1100 = t1011 * t814 - t1015 * t958;
t709 = (qJD(6) - t901) * t878 + t1100;
t1181 = t1008 * t1054 + t1010 * t932;
t1180 = t1008 * t1056 + t1010 * t931;
t873 = t876 ^ 2;
t874 = t878 ^ 2;
t899 = t901 ^ 2;
t902 = t904 ^ 2;
t903 = t906 ^ 2;
t949 = t953 ^ 2;
t950 = t954 ^ 2;
t1179 = t987 ^ 2;
t1178 = 0.2e1 * qJD(3);
t1058 = t1013 * t932 - t1017 * t931;
t973 = -t995 - t996;
t849 = -t1008 * t973 + t1010 * t1058;
t867 = t1013 * t931 + t1017 * t932;
t775 = t1014 * t867 + t1018 * t849;
t1177 = pkin(7) * t775;
t1176 = t967 * pkin(2);
t1174 = pkin(2) * t1013;
t1172 = pkin(5) * t1012;
t1170 = pkin(8) * t1010;
t1166 = t997 * qJ(3);
t707 = t1007 * t785 - t1009 * t788 + t1204 * t954;
t1021 = pkin(4) * t1185 - pkin(9) * t884 - t707;
t927 = pkin(4) * t1104 - pkin(9) * t954;
t676 = -pkin(4) * t949 + pkin(9) * t925 - t1104 * t927 + t708;
t603 = t1012 * t1021 + t1016 * t676;
t829 = pkin(5) * t904 - pkin(10) * t906;
t587 = -pkin(5) * t1179 + pkin(10) * t958 - t829 * t904 + t603;
t1119 = t1010 * t1013;
t1091 = -g(3) * t1121 + t1119 * t961;
t1024 = (t1124 * t963 + t962) * t1017 - t994 * pkin(2) + t1091;
t784 = t1166 + qJDD(4) + t967 * pkin(3) - qJ(4) * t996 + (t1178 + t960) * t998 + t1024;
t728 = -t925 * pkin(4) - t949 * pkin(9) + t954 * t927 + t784;
t638 = -t1051 * pkin(10) + (t906 * t987 - t813) * pkin(5) + t728;
t556 = t1011 * t638 + t1015 * t587;
t1164 = pkin(1) * t849 + t867 * t1171;
t602 = t1012 * t676 - t1016 * t1021;
t549 = t1012 * t603 - t1016 * t602;
t1160 = t1007 * t549;
t1159 = t1007 * t784;
t890 = -t912 + t966;
t1158 = t1007 * t890;
t1153 = t1008 * t997;
t1152 = t1009 * t549;
t1151 = t1009 * t784;
t1150 = t1009 * t890;
t586 = -t958 * pkin(5) - pkin(10) * t1179 + t829 * t906 + t602;
t1145 = t1011 * t586;
t736 = t1032 + t799;
t1144 = t1011 * t736;
t1143 = t1011 * t901;
t1142 = t1012 * t728;
t821 = t833 + t958;
t1141 = t1012 * t821;
t1140 = t1012 * t987;
t1139 = t1013 * t928;
t938 = t1008 * t961 + t1169;
t1138 = t1013 * t938;
t1135 = t1015 * t586;
t1134 = t1015 * t736;
t1133 = t1015 * t901;
t1132 = t1016 * t728;
t1131 = t1016 * t821;
t1130 = t1016 * t987;
t1129 = t1017 * t928;
t1128 = t1017 * t938;
t1117 = t1013 * t1017;
t1114 = t1012 * t799;
t1113 = t1013 * t833;
t1112 = t1013 * t912;
t1111 = t1016 * t799;
t1110 = t1017 * t833;
t1109 = t1017 * t912;
t1108 = -pkin(5) * t1016 - pkin(4);
t1107 = t998 * t1124;
t847 = t1008 * t1058 + t1010 * t973;
t1105 = -pkin(1) * t847 + t867 * t1170;
t555 = t1011 * t587 - t1015 * t638;
t516 = t1011 * t555 + t1015 * t556;
t550 = t1012 * t602 + t1016 * t603;
t941 = -t1014 * t989 - t1018 * t990;
t1097 = t954 * t1104;
t1095 = t1007 * t1104;
t1094 = t1009 * t1104;
t985 = qJDD(1) * t1018 - t1014 * t1019;
t1092 = -pkin(7) * t985 - g(3) * t1014;
t1090 = -t1138 - t1203;
t1089 = t1128 - t1202;
t628 = t1007 * t708 - t1009 * t707;
t629 = t1007 * t707 + t1009 * t708;
t515 = t1011 * t556 - t1015 * t555;
t500 = t1012 * t516 - t1016 * t586;
t501 = t1012 * t586 + t1016 * t516;
t474 = t1007 * t501 + t1009 * t500;
t1087 = t1013 * t515 - t1017 * t474;
t511 = t1007 * t550 + t1152;
t1086 = t1013 * t728 - t1017 * t511;
t713 = -t823 - t744;
t633 = -t1011 * t713 - t1015 * t709;
t750 = t873 + t874;
t606 = t1012 * t633 + t1016 * t750;
t607 = -t1012 * t750 + t1016 * t633;
t551 = t1007 * t607 + t1009 * t606;
t631 = -t1011 * t709 + t1015 * t713;
t1085 = t1013 * t631 - t1017 * t551;
t710 = (-qJD(6) - t901) * t878 - t1100;
t632 = -t1011 * t712 + t1015 * t710;
t798 = -t874 + t873;
t611 = t1012 * t632 + t1016 * t798;
t612 = -t1012 * t798 + t1016 * t632;
t560 = -t1007 * t612 - t1009 * t611;
t630 = t1011 * t710 + t1015 * t712;
t1084 = t1013 * t630 + t1017 * t560;
t765 = -t899 - t873;
t668 = t1015 * t765 - t1190;
t613 = t1012 * t668 + t1016 * t710;
t614 = -t1012 * t710 + t1016 * t668;
t565 = t1007 * t614 + t1009 * t613;
t667 = t1011 * t765 + t1188;
t1083 = t1013 * t667 - t1017 * t565;
t778 = -t874 - t899;
t674 = -t1011 * t778 - t1134;
t615 = t1012 * t674 - t1016 * t712;
t616 = t1012 * t712 + t1016 * t674;
t567 = t1007 * t616 + t1009 * t615;
t673 = t1015 * t778 - t1144;
t1082 = t1013 * t673 - t1017 * t567;
t819 = -t874 + t899;
t687 = -t1011 * t819 + t1188;
t623 = t1012 * t687 + t1016 * t713;
t625 = -t1012 * t713 + t1016 * t687;
t576 = -t1007 * t625 - t1009 * t623;
t685 = t1015 * t819 + t1190;
t1081 = t1013 * t685 + t1017 * t576;
t818 = t873 - t899;
t688 = t1015 * t818 - t1144;
t624 = t1012 * t688 + t1016 * t709;
t626 = -t1012 * t709 + t1016 * t688;
t577 = -t1007 * t626 - t1009 * t624;
t686 = t1011 * t818 + t1134;
t1080 = t1013 * t686 + t1017 * t577;
t743 = -qJD(6) * t878 - t1100;
t702 = -t1011 * t743 + t1133 * t876;
t657 = t1012 * t702 + t1111;
t659 = t1016 * t702 - t1114;
t593 = -t1007 * t659 - t1009 * t657;
t701 = t1015 * t743 + t1143 * t876;
t1079 = t1013 * t701 + t1017 * t593;
t704 = t1015 * t744 - t1143 * t878;
t658 = t1012 * t704 - t1111;
t660 = t1016 * t704 + t1114;
t594 = -t1007 * t660 - t1009 * t658;
t703 = t1011 * t744 + t1133 * t878;
t1078 = t1013 * t703 + t1017 * t594;
t739 = (t1011 * t878 - t1015 * t876) * t901;
t693 = t1012 * t739 - t1016 * t1032;
t694 = t1012 * t1032 + t1016 * t739;
t617 = -t1007 * t694 - t1009 * t693;
t738 = (-t1011 * t876 - t1015 * t878) * t901;
t1077 = t1013 * t738 + t1017 * t617;
t766 = (qJD(5) + t987) * t906 + t1099;
t695 = -t1012 * t766 + t1016 * t1051;
t697 = -t1012 * t1051 - t1016 * t766;
t619 = -t1007 * t697 - t1009 * t695;
t832 = t903 - t902;
t1076 = t1013 * t832 + t1017 * t619;
t1031 = (-qJD(5) + t987) * t906 - t1099;
t770 = -t814 - t1168;
t696 = t1012 * t1031 + t1016 * t770;
t698 = -t1012 * t770 + t1016 * t1031;
t620 = t1007 * t698 + t1009 * t696;
t787 = -t902 - t903;
t1075 = t1013 * t787 - t1017 * t620;
t1074 = t1013 * t784 - t1017 * t628;
t827 = -t1179 - t902;
t740 = t1012 * t827 + t1187;
t741 = t1016 * t827 - t1189;
t655 = t1007 * t741 + t1009 * t740;
t1073 = t1013 * t766 - t1017 * t655;
t865 = -t903 - t1179;
t752 = t1016 * t865 - t1141;
t753 = -t1012 * t865 - t1131;
t679 = t1007 * t753 + t1009 * t752;
t1072 = t1013 * t1051 - t1017 * t679;
t883 = -t903 + t1179;
t761 = t1016 * t883 + t1189;
t763 = -t1012 * t883 + t1187;
t689 = -t1007 * t763 - t1009 * t761;
t1071 = -t1013 * t770 + t1017 * t689;
t882 = t902 - t1179;
t762 = t1012 * t882 + t1131;
t764 = t1016 * t882 - t1141;
t690 = -t1007 * t764 - t1009 * t762;
t1070 = t1013 * t1031 + t1017 * t690;
t810 = (-t1012 * t904 - t1016 * t906) * t987;
t811 = (t1012 * t906 - t1016 * t904) * t987;
t733 = -t1007 * t811 - t1009 * t810;
t1069 = t1013 * t958 + t1017 * t733;
t886 = t1097 - t925;
t888 = t926 + t937;
t801 = t1007 * t886 - t1009 * t888;
t911 = t950 - t949;
t1068 = t1013 * t911 + t1017 * t801;
t1028 = t1097 + t925;
t802 = t1007 * t1028 - t1009 * t884;
t879 = -t949 - t950;
t1067 = t1013 * t879 - t1017 * t802;
t1022 = t1178 * t998 + t1024;
t830 = t1022 + t1166;
t815 = -pkin(2) * t973 + t830;
t896 = g(3) * t1120 + t1098;
t1026 = t896 + t1182;
t1025 = -t997 * pkin(2) + t1026;
t826 = (-t973 - t994) * qJ(3) + t1025;
t1066 = t1013 * t826 + t1017 * t815;
t900 = -t995 - t949;
t816 = t1007 * t900 + t1191;
t1065 = t1013 * t886 - t1017 * t816;
t841 = -t1025 + t1167;
t1064 = t1013 * t830 + t1017 * t841;
t934 = -t950 + t995;
t834 = -t1009 * t934 - t1192;
t1063 = t1013 * t884 + t1017 * t834;
t935 = -t950 - t995;
t835 = t1009 * t935 - t1158;
t1062 = t1013 * t888 - t1017 * t835;
t933 = t949 - t995;
t836 = -t1007 * t933 - t1150;
t1061 = t1013 * t1028 + t1017 * t836;
t897 = t1017 * t962 + t1091;
t1060 = t1013 * t897 - t1017 * t896;
t828 = t1013 * t896 + t1017 * t897;
t1059 = t1017 * t930 + t1139;
t1053 = t1014 * t990 - t1018 * t989;
t756 = t1016 * t813 + t1140 * t904;
t757 = -t1012 * t813 + t1130 * t904;
t681 = -t1007 * t757 - t1009 * t756;
t1049 = t1017 * t681 - t1113;
t758 = t1012 * t814 + t1130 * t906;
t759 = t1016 * t814 - t1140 * t906;
t682 = -t1007 * t759 - t1009 * t758;
t1048 = t1017 * t682 + t1113;
t869 = -t1009 * t925 + t1095 * t953;
t1047 = t1017 * t869 + t1112;
t871 = -t1007 * t926 - t1094 * t954;
t1046 = t1017 * t871 - t1112;
t1045 = (-t1008 * t847 - t1010 * t849) * pkin(8);
t462 = pkin(9) * t501 + (-pkin(10) * t1012 + t1108) * t515;
t468 = -pkin(9) * t500 + (-pkin(10) * t1016 + t1172) * t515;
t475 = -t1007 * t500 + t1009 * t501;
t446 = pkin(3) * t515 - t1007 * t468 - t1009 * t462 + t1175 * t475;
t454 = pkin(3) * t474 + pkin(4) * t500 - pkin(5) * t586 + pkin(10) * t516 - qJ(3) * t475;
t467 = t1013 * t474 + t1017 * t515;
t1044 = pkin(8) * t467 + t1013 * t454 + t1017 * t446;
t506 = -pkin(10) * t631 - t515;
t486 = pkin(9) * t607 + t1012 * t506 + t1108 * t631;
t493 = -pkin(9) * t606 + t1016 * t506 + t1172 * t631;
t552 = -t1007 * t606 + t1009 * t607;
t461 = pkin(3) * t631 - t1007 * t493 - t1009 * t486 + t1175 * t552;
t477 = pkin(3) * t551 + pkin(4) * t606 + pkin(5) * t750 + pkin(10) * t633 - qJ(3) * t552 + t516;
t522 = t1013 * t551 + t1017 * t631;
t1043 = pkin(8) * t522 + t1013 * t477 + t1017 * t461;
t531 = -pkin(5) * t667 + t555;
t569 = -pkin(10) * t667 + t1145;
t498 = -pkin(4) * t667 + pkin(9) * t614 + t1012 * t569 + t1016 * t531;
t502 = -pkin(9) * t613 - t1012 * t531 + t1016 * t569;
t566 = -t1007 * t613 + t1009 * t614;
t464 = pkin(3) * t667 - t1007 * t502 - t1009 * t498 + t1175 * t566;
t491 = pkin(3) * t565 + pkin(4) * t613 + pkin(5) * t710 + pkin(10) * t668 - qJ(3) * t566 - t1135;
t538 = t1013 * t565 + t1017 * t667;
t1042 = pkin(8) * t538 + t1013 * t491 + t1017 * t464;
t533 = -pkin(5) * t673 + t556;
t572 = -pkin(10) * t673 + t1135;
t499 = -pkin(4) * t673 + pkin(9) * t616 + t1012 * t572 + t1016 * t533;
t503 = -pkin(9) * t615 - t1012 * t533 + t1016 * t572;
t568 = -t1007 * t615 + t1009 * t616;
t466 = pkin(3) * t673 - t1007 * t503 - t1009 * t499 + t1175 * t568;
t492 = pkin(3) * t567 + pkin(4) * t615 - pkin(5) * t712 + pkin(10) * t674 - qJ(3) * t568 + t1145;
t540 = t1013 * t567 + t1017 * t673;
t1041 = pkin(8) * t540 + t1013 * t492 + t1017 * t466;
t512 = t1009 * t550 - t1160;
t537 = -pkin(4) * t728 + pkin(9) * t550;
t473 = pkin(3) * t728 + pkin(9) * t1160 - t1009 * t537 + t1175 * t512;
t476 = pkin(3) * t511 + pkin(4) * t549 - qJ(3) * t512;
t508 = t1013 * t511 + t1017 * t728;
t1040 = pkin(8) * t508 + t1013 * t476 + t1017 * t473;
t527 = -pkin(4) * t787 + pkin(9) * t698 + t550;
t532 = -pkin(9) * t696 - t549;
t622 = -t1007 * t696 + t1009 * t698;
t488 = pkin(3) * t787 - t1007 * t532 - t1009 * t527 + t1175 * t622;
t543 = pkin(3) * t620 + pkin(4) * t696 - qJ(3) * t622;
t600 = t1013 * t620 + t1017 * t787;
t1039 = pkin(8) * t600 + t1013 * t543 + t1017 * t488;
t627 = -pkin(4) * t766 + pkin(9) * t741 - t1132;
t651 = -pkin(9) * t740 + t1142;
t656 = -t1007 * t740 + t1009 * t741;
t526 = pkin(3) * t766 - t1007 * t651 - t1009 * t627 + t1175 * t656;
t536 = pkin(3) * t655 + pkin(4) * t740 - qJ(3) * t656 - t602;
t634 = t1013 * t655 + t1017 * t766;
t1038 = pkin(8) * t634 + t1013 * t536 + t1017 * t526;
t635 = -pkin(4) * t1051 + pkin(9) * t753 + t1142;
t662 = -pkin(9) * t752 + t1132;
t680 = -t1007 * t752 + t1009 * t753;
t535 = pkin(3) * t1051 - t1007 * t662 - t1009 * t635 + t1175 * t680;
t542 = pkin(3) * t679 + pkin(4) * t752 - qJ(3) * t680 - t603;
t639 = t1013 * t679 + t1017 * t1051;
t1037 = pkin(8) * t639 + t1013 * t542 + t1017 * t535;
t575 = pkin(3) * t784 + t1175 * t629;
t580 = pkin(3) * t628 - qJ(3) * t629;
t610 = t1013 * t628 + t1017 * t784;
t1036 = pkin(8) * t610 + t1013 * t580 + t1017 * t575;
t804 = t1007 * t884 + t1009 * t1028;
t589 = pkin(3) * t879 + t1175 * t804 - t629;
t732 = pkin(3) * t802 - qJ(3) * t804;
t749 = t1013 * t802 + t1017 * t879;
t1035 = pkin(8) * t749 + t1013 * t732 + t1017 * t589;
t817 = t1009 * t900 - t1192;
t640 = pkin(3) * t816 - qJ(3) * t817 - t707;
t664 = pkin(3) * t886 + t1175 * t817 + t1151;
t760 = t1013 * t816 + t1017 * t886;
t1034 = pkin(8) * t760 + t1013 * t640 + t1017 * t664;
t838 = -t1007 * t935 - t1150;
t646 = pkin(3) * t835 - qJ(3) * t838 - t708;
t678 = pkin(3) * t888 + t1175 * t838 - t1159;
t781 = t1013 * t835 + t1017 * t888;
t1033 = pkin(8) * t781 + t1013 * t646 + t1017 * t678;
t796 = t1176 + (t1123 * t1178 + t961) * t1008 + 0.2e1 * t1201 + t1101;
t1030 = t1013 * t796 + t1173 * t930 + t1203;
t1023 = -t938 + t974 + t988 - t1201;
t797 = (-t928 - t967) * pkin(2) + t1023;
t1029 = -qJ(3) * t1139 + t1017 * t797 + t1202;
t747 = -t1013 * t841 + t1017 * t830;
t831 = t1023 - t1176;
t1027 = pkin(8) * t747 + t1088 * t831;
t1003 = t1008 * t1004;
t984 = qJDD(1) * t1014 + t1018 * t1019;
t980 = t1010 * t997;
t972 = t995 - t996;
t968 = -pkin(7) * t984 + g(3) * t1018;
t956 = t1017 * t966;
t946 = t966 * t1119;
t945 = t966 * t1121;
t936 = (t1005 + t1006) * t1107;
t920 = -t1005 * t1107 + t956;
t919 = -t1006 * t1107 - t1013 * t967;
t910 = t1014 * t1153 + t1018 * t936;
t909 = t1014 * t936 - t1018 * t1153;
t895 = t946 + (t1003 * t1019 + t1010 * t1107) * t1117;
t894 = t1117 * t1183 + t945;
t893 = (t1008 * t967 - t1013 * t1183) * t1017;
t892 = (-t1003 * t1116 + (t967 - t1096) * t1010) * t1017;
t881 = (t1007 * t954 + t1009 * t953) * t1104;
t880 = (-t1007 * t953 + t1009 * t954) * t1104;
t875 = -pkin(2) * t931 + qJ(3) * t932;
t872 = t1009 * t926 - t1095 * t954;
t870 = -t1007 * t925 - t1094 * t953;
t866 = -t1013 * t930 + t1129;
t850 = -t1013 * t880 + t956;
t848 = -t1008 * t972 + t1010 * t1059;
t846 = t1008 * t1059 + t1010 * t972;
t845 = -t1014 * t895 + t1018 * t920;
t844 = -t1014 * t892 + t1018 * t919;
t843 = t1014 * t920 + t1018 * t895;
t842 = t1014 * t919 + t1018 * t892;
t839 = t1009 * t933 - t1158;
t837 = -t1007 * t934 + t1191;
t825 = -t1013 * t871 - t1109;
t824 = -t1013 * t869 + t1109;
t803 = -t1007 * t888 - t1009 * t886;
t800 = (-t971 - t994) * qJ(3) + (-t964 - t997) * pkin(2) + t1026;
t791 = t1008 * t938 + t1010 * t1060;
t790 = t1008 * t1060 - t1010 * t938;
t789 = -pkin(2) * t948 + (t965 + t997) * qJ(3) + t1022;
t782 = -t1008 * t881 + t1118 * t880 + t946;
t780 = -t1013 * t836 + t1017 * t1028;
t779 = -t1013 * t834 + t1017 * t884;
t777 = -t1014 * t849 + t1018 * t867;
t776 = -t1014 * t848 + t1018 * t866;
t774 = t1014 * t866 + t1018 * t848;
t773 = pkin(7) * t777;
t772 = -t1013 * t801 + t1017 * t911;
t755 = -t1008 * t872 + t1010 * t1046;
t754 = -t1008 * t870 + t1010 * t1047;
t751 = -t1138 - t1216;
t748 = pkin(2) * t841 + qJ(3) * t830;
t746 = -t1128 + t1215;
t745 = t1008 * t896 + t1010 * t1089 - t1212;
t742 = t1008 * t897 + t1010 * t1090 + t1214;
t734 = -t1007 * t810 + t1009 * t811;
t731 = -pkin(1) * t790 + t1170 * t828;
t730 = -t1014 * t791 + t1018 * t828;
t729 = t1014 * t828 + t1018 * t791;
t727 = -t1008 * t838 + t1010 * t1062;
t726 = -t1008 * t839 + t1010 * t1061;
t725 = -t1008 * t837 + t1010 * t1063;
t724 = t1008 * t1062 + t1010 * t838;
t723 = -t1013 * t733 + t1017 * t958;
t722 = t1010 * t828 + t1105;
t721 = (-t1008 * t790 - t1010 * t791) * pkin(8);
t720 = t1045 - t1060;
t719 = -t1008 * t817 + t1010 * t1065;
t718 = t1008 * t1065 + t1010 * t817;
t717 = -t1008 * t831 + t1010 * t1064;
t716 = t1008 * t1064 + t1010 * t831;
t715 = -t1008 * t803 + t1010 * t1068;
t706 = -t1008 * t804 + t1010 * t1067;
t705 = t1008 * t1067 + t1010 * t804;
t700 = -qJ(3) * t1129 - t1013 * t797 + t1216;
t699 = t1017 * t796 - t930 * t1174 - t1215;
t692 = -t1007 * t762 + t1009 * t764;
t691 = -t1007 * t761 + t1009 * t763;
t684 = -t1007 * t758 + t1009 * t759;
t683 = -t1007 * t756 + t1009 * t757;
t677 = qJ(3) * t888 + t1175 * t835 + t1151;
t672 = -t1013 * t815 + t1017 * t826 + t1045;
t671 = -t1008 * t800 + t1010 * t1029 + t1212;
t670 = -t1014 * t727 + t1018 * t781;
t669 = t1014 * t781 + t1018 * t727;
t663 = qJ(3) * t886 + t1175 * t816 + t1159;
t661 = -t1008 * t789 + t1010 * t1030 - t1214;
t654 = -t1008 * t875 + t1010 * t1066 + t1105;
t653 = -t1013 * t682 + t1110;
t652 = -t1013 * t681 - t1110;
t650 = -t1014 * t719 + t1018 * t760;
t649 = t1014 * t760 + t1018 * t719;
t648 = -t1014 * t717 + t1018 * t747;
t647 = t1014 * t747 + t1018 * t717;
t645 = -t1014 * t706 + t1018 * t749;
t644 = t1014 * t749 + t1018 * t706;
t643 = -t1008 * t734 + t1010 * t1069;
t642 = -t1013 * t690 + t1017 * t1031;
t641 = -t1013 * t689 - t1017 * t770;
t621 = -t1007 * t695 + t1009 * t697;
t618 = -t1007 * t693 + t1009 * t694;
t609 = (-t1163 + t1174) * t831 + (-t1008 * t716 - t1010 * t717) * pkin(8);
t608 = -t1013 * t619 + t1017 * t832;
t605 = -t1008 * t684 + t1010 * t1048;
t604 = -t1008 * t683 + t1010 * t1049;
t599 = -pkin(1) * t716 - t1008 * t748 + t1010 * t1027;
t598 = -t1008 * t692 + t1010 * t1070;
t597 = -t1008 * t691 + t1010 * t1071;
t596 = -t1007 * t658 + t1009 * t660;
t595 = -t1007 * t657 + t1009 * t659;
t592 = -t1008 * t680 + t1010 * t1072;
t591 = t1008 * t1072 + t1010 * t680;
t590 = -t1013 * t617 + t1017 * t738;
t588 = qJ(3) * t879 + t1175 * t802 - t628;
t584 = -t1008 * t656 + t1010 * t1073;
t583 = t1008 * t1073 + t1010 * t656;
t582 = -t1013 * t594 + t1017 * t703;
t581 = -t1013 * t593 + t1017 * t701;
t579 = -t1007 * t624 + t1009 * t626;
t578 = -t1007 * t623 + t1009 * t625;
t574 = qJ(3) * t784 + t1175 * t628;
t573 = -t1013 * t678 + t1017 * t646 + (-t1008 * t724 - t1010 * t727) * pkin(8);
t571 = -t1008 * t629 + t1010 * t1074;
t570 = t1008 * t1074 + t1010 * t629;
t564 = -t1014 * t592 + t1018 * t639;
t563 = t1014 * t639 + t1018 * t592;
t562 = -t1008 * t621 + t1010 * t1076;
t561 = -t1007 * t611 + t1009 * t612;
t559 = -t1008 * t622 + t1010 * t1075;
t558 = t1008 * t1075 + t1010 * t622;
t557 = -t1013 * t664 + t1017 * t640 + (-t1008 * t718 - t1010 * t719) * pkin(8);
t553 = -t1008 * t618 + t1010 * t1077;
t548 = -t1014 * t584 + t1018 * t634;
t547 = t1014 * t634 + t1018 * t584;
t546 = -pkin(1) * t724 - t1008 * t677 + t1010 * t1033;
t545 = -t1013 * t577 + t1017 * t686;
t544 = -t1013 * t576 + t1017 * t685;
t541 = -t1013 * t589 + t1017 * t732 + (-t1008 * t705 - t1010 * t706) * pkin(8);
t539 = -pkin(1) * t718 - t1008 * t663 + t1010 * t1034;
t534 = qJ(3) * t1051 - t1007 * t635 + t1009 * t662 + t1175 * t679;
t530 = -t1008 * t596 + t1010 * t1078;
t529 = -t1008 * t595 + t1010 * t1079;
t528 = -t1013 * t560 + t1017 * t630;
t525 = qJ(3) * t766 - t1007 * t627 + t1009 * t651 + t1175 * t655;
t524 = -t1014 * t571 + t1018 * t610;
t523 = t1014 * t610 + t1018 * t571;
t521 = -t1014 * t559 + t1018 * t600;
t520 = t1014 * t600 + t1018 * t559;
t519 = -pkin(1) * t705 - t1008 * t588 + t1010 * t1035;
t518 = -t1008 * t579 + t1010 * t1080;
t517 = -t1008 * t578 + t1010 * t1081;
t514 = -t1008 * t568 + t1010 * t1082;
t513 = t1008 * t1082 + t1010 * t568;
t510 = -t1008 * t566 + t1010 * t1083;
t509 = t1008 * t1083 + t1010 * t566;
t507 = -t1008 * t561 + t1010 * t1084;
t505 = -t1008 * t552 + t1010 * t1085;
t504 = t1008 * t1085 + t1010 * t552;
t497 = -t1014 * t514 + t1018 * t540;
t496 = t1014 * t540 + t1018 * t514;
t495 = -t1014 * t510 + t1018 * t538;
t494 = t1014 * t538 + t1018 * t510;
t490 = -t1013 * t575 + t1017 * t580 + (-t1008 * t570 - t1010 * t571) * pkin(8);
t489 = -t1013 * t535 + t1017 * t542 + (-t1008 * t591 - t1010 * t592) * pkin(8);
t487 = qJ(3) * t787 - t1007 * t527 + t1009 * t532 + t1175 * t620;
t485 = -t1014 * t505 + t1018 * t522;
t484 = t1014 * t522 + t1018 * t505;
t483 = -pkin(1) * t570 - t1008 * t574 + t1010 * t1036;
t482 = -t1013 * t526 + t1017 * t536 + (-t1008 * t583 - t1010 * t584) * pkin(8);
t481 = -t1008 * t512 + t1010 * t1086;
t480 = t1008 * t1086 + t1010 * t512;
t479 = -pkin(1) * t591 - t1008 * t534 + t1010 * t1037;
t478 = -pkin(1) * t583 - t1008 * t525 + t1010 * t1038;
t472 = -pkin(9) * t1152 + qJ(3) * t728 - t1007 * t537 + t1175 * t511;
t471 = -t1014 * t481 + t1018 * t508;
t470 = t1014 * t508 + t1018 * t481;
t469 = -t1013 * t488 + t1017 * t543 + (-t1008 * t558 - t1010 * t559) * pkin(8);
t465 = qJ(3) * t673 - t1007 * t499 + t1009 * t503 + t1175 * t567;
t463 = qJ(3) * t667 - t1007 * t498 + t1009 * t502 + t1175 * t565;
t460 = qJ(3) * t631 - t1007 * t486 + t1009 * t493 + t1175 * t551;
t459 = -pkin(1) * t558 - t1008 * t487 + t1010 * t1039;
t458 = -t1008 * t475 + t1010 * t1087;
t457 = t1008 * t1087 + t1010 * t475;
t456 = -t1013 * t466 + t1017 * t492 + (-t1008 * t513 - t1010 * t514) * pkin(8);
t455 = -t1013 * t464 + t1017 * t491 + (-t1008 * t509 - t1010 * t510) * pkin(8);
t453 = -t1013 * t461 + t1017 * t477 + (-t1008 * t504 - t1010 * t505) * pkin(8);
t452 = -t1014 * t458 + t1018 * t467;
t451 = t1014 * t467 + t1018 * t458;
t450 = -t1013 * t473 + t1017 * t476 + (-t1008 * t480 - t1010 * t481) * pkin(8);
t449 = -pkin(1) * t513 - t1008 * t465 + t1010 * t1041;
t448 = -pkin(1) * t509 - t1008 * t463 + t1010 * t1042;
t447 = -pkin(1) * t480 - t1008 * t472 + t1010 * t1040;
t445 = qJ(3) * t515 - t1007 * t462 + t1009 * t468 + t1175 * t474;
t444 = -pkin(1) * t504 - t1008 * t460 + t1010 * t1043;
t443 = -t1013 * t446 + t1017 * t454 + (-t1008 * t457 - t1010 * t458) * pkin(8);
t442 = -pkin(1) * t457 - t1008 * t445 + t1010 * t1044;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t984, -t985, 0, t941, 0, 0, 0, 0, 0, 0, -t808, t795, t777, t730, 0, 0, 0, 0, 0, 0, t777, t808, -t795, t648, 0, 0, 0, 0, 0, 0, t650, t670, t645, t524, 0, 0, 0, 0, 0, 0, t548, t564, t521, t471, 0, 0, 0, 0, 0, 0, t495, t497, t485, t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t985, -t984, 0, -t1053, 0, 0, 0, 0, 0, 0, t805, -t792, t775, t729, 0, 0, 0, 0, 0, 0, t775, -t805, t792, t647, 0, 0, 0, 0, 0, 0, t649, t669, t644, t523, 0, 0, 0, 0, 0, 0, t547, t563, t520, t470, 0, 0, 0, 0, 0, 0, t494, t496, t484, t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t855, -t851, t847, t790, 0, 0, 0, 0, 0, 0, t847, -t855, t851, t716, 0, 0, 0, 0, 0, 0, t718, t724, t705, t570, 0, 0, 0, 0, 0, 0, t583, t591, t558, t480, 0, 0, 0, 0, 0, 0, t509, t513, t504, t457; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t985, 0, -t984, 0, t1092, -t968, t1053, pkin(7) * t1053, t845, t776, -t1209, t844, -t1210, t910, -t1014 * t745 + t1018 * t751 - t1218, -t1014 * t742 + t1018 * t746 + t1220, -t1014 * t722 + t1018 * t720 - t1177, -pkin(7) * t729 - t1014 * t731 + t1018 * t721, t910, t1209, t1210, t845, t776, t844, -t1014 * t654 + t1018 * t672 - t1177, -t1014 * t671 + t1018 * t700 + t1218, -t1014 * t661 + t1018 * t699 - t1220, -pkin(7) * t647 - t1014 * t599 + t1018 * t609, -t1014 * t755 + t1018 * t825, -t1014 * t715 + t1018 * t772, -t1014 * t725 + t1018 * t779, -t1014 * t754 + t1018 * t824, -t1014 * t726 + t1018 * t780, -t1014 * t782 + t1018 * t850, -pkin(7) * t649 - t1014 * t539 + t1018 * t557, -pkin(7) * t669 - t1014 * t546 + t1018 * t573, -pkin(7) * t644 - t1014 * t519 + t1018 * t541, -pkin(7) * t523 - t1014 * t483 + t1018 * t490, -t1014 * t605 + t1018 * t653, -t1014 * t562 + t1018 * t608, -t1014 * t597 + t1018 * t641, -t1014 * t604 + t1018 * t652, -t1014 * t598 + t1018 * t642, -t1014 * t643 + t1018 * t723, -pkin(7) * t547 - t1014 * t478 + t1018 * t482, -pkin(7) * t563 - t1014 * t479 + t1018 * t489, -pkin(7) * t520 - t1014 * t459 + t1018 * t469, -pkin(7) * t470 - t1014 * t447 + t1018 * t450, -t1014 * t530 + t1018 * t582, -t1014 * t507 + t1018 * t528, -t1014 * t517 + t1018 * t544, -t1014 * t529 + t1018 * t581, -t1014 * t518 + t1018 * t545, -t1014 * t553 + t1018 * t590, -pkin(7) * t494 - t1014 * t448 + t1018 * t455, -pkin(7) * t496 - t1014 * t449 + t1018 * t456, -pkin(7) * t484 - t1014 * t444 + t1018 * t453, -pkin(7) * t451 - t1014 * t442 + t1018 * t443; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t984, 0, t985, 0, t968, t1092, t941, pkin(7) * t941, t843, t774, t1207, t842, t1208, t909, t1014 * t751 + t1018 * t745 - t1217, t1014 * t746 + t1018 * t742 + t1219, t1014 * t720 + t1018 * t722 + t773, pkin(7) * t730 + t1014 * t721 + t1018 * t731, t909, -t1207, -t1208, t843, t774, t842, t1014 * t672 + t1018 * t654 + t773, t1014 * t700 + t1018 * t671 + t1217, t1014 * t699 + t1018 * t661 - t1219, pkin(7) * t648 + t1014 * t609 + t1018 * t599, t1014 * t825 + t1018 * t755, t1014 * t772 + t1018 * t715, t1014 * t779 + t1018 * t725, t1014 * t824 + t1018 * t754, t1014 * t780 + t1018 * t726, t1014 * t850 + t1018 * t782, pkin(7) * t650 + t1014 * t557 + t1018 * t539, pkin(7) * t670 + t1014 * t573 + t1018 * t546, pkin(7) * t645 + t1014 * t541 + t1018 * t519, pkin(7) * t524 + t1014 * t490 + t1018 * t483, t1014 * t653 + t1018 * t605, t1014 * t608 + t1018 * t562, t1014 * t641 + t1018 * t597, t1014 * t652 + t1018 * t604, t1014 * t642 + t1018 * t598, t1014 * t723 + t1018 * t643, pkin(7) * t548 + t1014 * t482 + t1018 * t478, pkin(7) * t564 + t1014 * t489 + t1018 * t479, pkin(7) * t521 + t1014 * t469 + t1018 * t459, pkin(7) * t471 + t1014 * t450 + t1018 * t447, t1014 * t582 + t1018 * t530, t1014 * t528 + t1018 * t507, t1014 * t544 + t1018 * t517, t1014 * t581 + t1018 * t529, t1014 * t545 + t1018 * t518, t1014 * t590 + t1018 * t553, pkin(7) * t495 + t1014 * t455 + t1018 * t448, pkin(7) * t497 + t1014 * t456 + t1018 * t449, pkin(7) * t485 + t1014 * t453 + t1018 * t444, pkin(7) * t452 + t1014 * t443 + t1018 * t442; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t989, t990, 0, 0, t894, t846, t1180, t893, t1181, t980, t1008 * t1089 - t1010 * t896 + t1211, t1008 * t1090 - t1010 * t897 - t1213, t1008 * t828 + t1164, pkin(1) * t791 + t1171 * t828, t980, -t1180, -t1181, t894, t846, t893, t1008 * t1066 + t1010 * t875 + t1164, t1008 * t1029 + t1010 * t800 - t1211, t1008 * t1030 + t1010 * t789 + t1213, pkin(1) * t717 + t1008 * t1027 + t1010 * t748, t1008 * t1046 + t1010 * t872, t1008 * t1068 + t1010 * t803, t1008 * t1063 + t1010 * t837, t1008 * t1047 + t1010 * t870, t1008 * t1061 + t1010 * t839, t1010 * t881 + t1120 * t880 + t945, pkin(1) * t719 + t1008 * t1034 + t1010 * t663, pkin(1) * t727 + t1008 * t1033 + t1010 * t677, pkin(1) * t706 + t1008 * t1035 + t1010 * t588, pkin(1) * t571 + t1008 * t1036 + t1010 * t574, t1008 * t1048 + t1010 * t684, t1008 * t1076 + t1010 * t621, t1008 * t1071 + t1010 * t691, t1008 * t1049 + t1010 * t683, t1008 * t1070 + t1010 * t692, t1008 * t1069 + t1010 * t734, pkin(1) * t584 + t1008 * t1038 + t1010 * t525, pkin(1) * t592 + t1008 * t1037 + t1010 * t534, pkin(1) * t559 + t1008 * t1039 + t1010 * t487, pkin(1) * t481 + t1008 * t1040 + t1010 * t472, t1008 * t1078 + t1010 * t596, t1008 * t1084 + t1010 * t561, t1008 * t1081 + t1010 * t578, t1008 * t1079 + t1010 * t595, t1008 * t1080 + t1010 * t579, t1008 * t1077 + t1010 * t618, pkin(1) * t510 + t1008 * t1042 + t1010 * t463, pkin(1) * t514 + t1008 * t1041 + t1010 * t465, pkin(1) * t505 + t1008 * t1043 + t1010 * t460, pkin(1) * t458 + t1008 * t1044 + t1010 * t445;];
tauB_reg  = t1;
