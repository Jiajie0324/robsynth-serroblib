% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:18
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t68 = sin(qJ(4));
t69 = sin(qJ(3));
t72 = cos(qJ(4));
t73 = cos(qJ(3));
t39 = t68 * t73 + t72 * t69;
t41 = -t68 * t69 + t72 * t73;
t67 = sin(qJ(5));
t71 = cos(qJ(5));
t19 = t67 * t39 - t71 * t41;
t81 = t71 * t39 + t67 * t41;
t135 = (t19 * t71 - t67 * t81) * pkin(4);
t74 = -pkin(1) - pkin(7);
t104 = -pkin(8) + t74;
t90 = t104 * t73;
t91 = t104 * t69;
t26 = t68 * t90 + t72 * t91;
t12 = -t39 * pkin(9) + t26;
t25 = -t68 * t91 + t72 * t90;
t79 = -t41 * pkin(9) + t25;
t5 = t67 * t12 - t71 * t79;
t108 = t5 * t19;
t7 = t71 * t12 + t67 * t79;
t134 = t7 * t81 + t108;
t122 = t81 ^ 2;
t132 = t19 ^ 2;
t133 = t122 + t132;
t131 = t19 * pkin(5);
t105 = t68 * pkin(3);
t59 = t72 * pkin(3);
t54 = t59 + pkin(4);
t87 = t67 * t105 - t71 * t54;
t32 = -pkin(5) + t87;
t130 = t19 * t32;
t58 = t71 * pkin(4);
t53 = -t58 - pkin(5);
t129 = t19 * t53;
t66 = sin(qJ(6));
t128 = t19 * t66;
t70 = cos(qJ(6));
t127 = t19 * t70;
t92 = t71 * t105;
t35 = t67 * t54 + t92;
t33 = pkin(10) + t35;
t61 = t66 ^ 2;
t63 = t70 ^ 2;
t94 = t61 + t63;
t126 = t94 * t33;
t106 = t67 * pkin(4);
t52 = pkin(10) + t106;
t125 = t94 * t52;
t123 = t19 * t87 + t35 * t81;
t120 = (t39 * t68 + t41 * t72) * pkin(3);
t14 = t66 * t81;
t15 = t70 * t81;
t113 = t39 ^ 2;
t38 = t41 ^ 2;
t117 = t38 + t113;
t116 = t5 ^ 2;
t50 = t69 * pkin(3) + qJ(2);
t30 = t39 * pkin(4) + t50;
t112 = 0.2e1 * t30;
t111 = 0.2e1 * t50;
t110 = 0.2e1 * qJ(2);
t109 = pkin(5) * t66;
t107 = t5 * t70;
t102 = t32 * t70;
t101 = t53 * t70;
t99 = t66 * t70;
t95 = pkin(10) * t94;
t62 = t69 ^ 2;
t64 = t73 ^ 2;
t47 = t62 + t64;
t93 = 0.2e1 * t19 * t81;
t10 = t94 * t81;
t86 = -pkin(10) * t81 + t131;
t8 = pkin(5) * t81 + pkin(10) * t19 + t30;
t2 = -t66 * t7 + t70 * t8;
t3 = t66 * t8 + t70 * t7;
t1 = -t2 * t66 + t3 * t70;
t84 = -t33 * t81 - t130;
t83 = -t52 * t81 - t129;
t82 = t25 * t41 + t26 * t39;
t75 = qJ(2) ^ 2;
t60 = pkin(5) * t70;
t48 = 0.2e1 * t99;
t46 = t53 * t66;
t42 = t47 * t74;
t29 = t32 * t66;
t13 = t66 * t127;
t9 = (-t61 + t63) * t19;
t4 = t5 * t66;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t110 (pkin(1) ^ 2) + t75, t64, -0.2e1 * t73 * t69, 0, t62, 0, 0, t69 * t110, t73 * t110, -0.2e1 * t42, t47 * t74 ^ 2 + t75, t38, -0.2e1 * t41 * t39, 0, t113, 0, 0, t39 * t111, t41 * t111, -0.2e1 * t82, t25 ^ 2 + t26 ^ 2 + t50 ^ 2, t132, t93, 0, t122, 0, 0, t81 * t112, -t19 * t112, -0.2e1 * t134, t30 ^ 2 + t7 ^ 2 + t116, t63 * t132, -0.2e1 * t132 * t99, -0.2e1 * t81 * t127, t61 * t132, t66 * t93, t122, -0.2e1 * t128 * t5 + 0.2e1 * t2 * t81, -0.2e1 * t127 * t5 - 0.2e1 * t3 * t81, -0.2e1 * (-t2 * t70 - t3 * t66) * t19, t2 ^ 2 + t3 ^ 2 + t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t47, t42, 0, 0, 0, 0, 0, 0, 0, 0, -t117, t82, 0, 0, 0, 0, 0, 0, 0, 0, -t133, t134, 0, 0, 0, 0, 0, 0, -t133 * t66, -t133 * t70, 0, t1 * t81 + t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122 * t94 + t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, -t69, 0, t73 * t74, -t69 * t74, 0, 0, 0, 0, t41, 0, -t39, 0, t25, -t26, -t120 (t25 * t72 + t26 * t68) * pkin(3), 0, 0, -t19, 0, -t81, 0, -t5, -t7, -t123, t35 * t7 + t5 * t87, -t13, -t9, t14, t13, t15, 0, t84 * t66 - t107, t84 * t70 + t4, t1, t1 * t33 + t5 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, -t69, 0, 0, 0, 0, 0, 0, 0, 0, t41, -t39, 0, t120, 0, 0, 0, 0, 0, 0, -t19, -t81, 0, t123, 0, 0, 0, 0, 0, 0, -t127, t128, t10, t126 * t81 + t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t59, -0.2e1 * t105, 0 (t68 ^ 2 + t72 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t87, -0.2e1 * t35, 0, t35 ^ 2 + t87 ^ 2, t61, t48, 0, t63, 0, 0, -0.2e1 * t102, 0.2e1 * t29, 0.2e1 * t126, t94 * t33 ^ 2 + t32 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, -t39, 0, t25, -t26, 0, 0, 0, 0, -t19, 0, -t81, 0, -t5, -t7, t135 (-t5 * t71 + t67 * t7) * pkin(4), -t13, -t9, t14, t13, t15, 0, t83 * t66 - t107, t83 * t70 + t4, t1, t1 * t52 + t5 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, -t39, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t81, 0, -t135, 0, 0, 0, 0, 0, 0, -t127, t128, t10, t125 * t81 + t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t59, -t105, 0, 0, 0, 0, 0, 0, 0, 1, t58 - t87, -t92 + (-pkin(4) - t54) * t67, 0 (t35 * t67 - t71 * t87) * pkin(4), t61, t48, 0, t63, 0, 0 (-t32 - t53) * t70, t46 + t29, t125 + t126, t125 * t33 + t32 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t58, -0.2e1 * t106, 0 (t67 ^ 2 + t71 ^ 2) * pkin(4) ^ 2, t61, t48, 0, t63, 0, 0, -0.2e1 * t101, 0.2e1 * t46, 0.2e1 * t125, t94 * t52 ^ 2 + t53 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t81, 0, -t5, -t7, 0, 0, -t13, -t9, t14, t13, t15, 0, t86 * t66 - t107, t86 * t70 + t4, t1, -t5 * pkin(5) + t1 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t81, 0, 0, 0, 0, 0, 0, 0, 0, -t127, t128, t10, pkin(10) * t10 - t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t87, -t35, 0, 0, t61, t48, 0, t63, 0, 0, t60 - t102, t29 - t109, t95 + t126, -t32 * pkin(5) + pkin(10) * t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t58, -t106, 0, 0, t61, t48, 0, t63, 0, 0, t60 - t101, t46 - t109, t95 + t125, -t53 * pkin(5) + pkin(10) * t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, t48, 0, t63, 0, 0, 0.2e1 * t60, -0.2e1 * t109, 0.2e1 * t95, t94 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, 0, t128, t81, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t70, 0, -t66 * t33, -t70 * t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t70, 0, -t66 * t52, -t70 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t70, 0, -t66 * pkin(10), -t70 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
