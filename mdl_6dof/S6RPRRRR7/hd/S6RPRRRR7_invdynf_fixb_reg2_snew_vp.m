% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 04:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 04:06:08
% EndTime: 2019-05-06 04:06:13
% DurationCPUTime: 5.82s
% Computational Cost: add. (38106->296), mult. (80276->363), div. (0->0), fcn. (58627->10), ass. (0->209)
t1772 = cos(qJ(3));
t1807 = qJD(1) * t1772;
t1792 = qJD(3) * t1807;
t1767 = sin(qJ(3));
t1796 = t1767 * qJDD(1);
t1737 = -t1792 - t1796;
t1762 = t1767 ^ 2;
t1775 = qJD(1) ^ 2;
t1768 = sin(qJ(1));
t1773 = cos(qJ(1));
t1747 = -t1773 * g(1) - t1768 * g(2);
t1779 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1747;
t1782 = qJD(3) * pkin(3) - pkin(8) * t1807;
t1811 = pkin(7) + pkin(1);
t1699 = t1737 * pkin(3) + (pkin(8) * t1762 + t1811) * t1775 - t1782 * t1807 + t1779;
t1766 = sin(qJ(4));
t1771 = cos(qJ(4));
t1808 = qJD(1) * t1767;
t1733 = -t1766 * t1808 + t1771 * t1807;
t1793 = qJD(3) * t1808;
t1795 = t1772 * qJDD(1);
t1738 = -t1793 + t1795;
t1786 = -t1771 * t1737 + t1766 * t1738;
t1705 = -qJD(4) * t1733 - t1786;
t1731 = (-t1766 * t1772 - t1767 * t1771) * qJD(1);
t1730 = t1731 ^ 2;
t1760 = qJD(3) + qJD(4);
t1785 = pkin(4) * t1760 - pkin(9) * t1733;
t1666 = t1705 * pkin(4) + t1730 * pkin(9) - t1733 * t1785 + t1699;
t1765 = sin(qJ(5));
t1770 = cos(qJ(5));
t1710 = -t1770 * t1731 + t1733 * t1765;
t1708 = qJD(6) + t1710;
t1821 = qJD(6) + t1708;
t1712 = t1731 * t1765 + t1733 * t1770;
t1755 = qJD(5) + t1760;
t1764 = sin(qJ(6));
t1769 = cos(qJ(6));
t1701 = t1712 * t1764 - t1769 * t1755;
t1819 = t1701 ^ 2;
t1703 = t1712 * t1769 + t1755 * t1764;
t1818 = t1703 ^ 2;
t1817 = t1708 ^ 2;
t1816 = t1710 ^ 2;
t1815 = t1712 ^ 2;
t1814 = t1733 ^ 2;
t1813 = t1755 ^ 2;
t1812 = t1760 ^ 2;
t1806 = t1701 * t1703;
t1805 = t1710 * t1712;
t1804 = t1731 * t1733;
t1803 = t1762 * t1775;
t1802 = qJD(4) - t1760;
t1801 = qJD(4) + t1760;
t1800 = qJD(5) - t1755;
t1799 = qJD(5) + t1755;
t1798 = qJD(6) - t1708;
t1746 = t1768 * g(1) - t1773 * g(2);
t1781 = -t1775 * qJ(2) + qJDD(2) - t1746;
t1726 = -qJDD(1) * t1811 + t1781;
t1716 = t1767 * g(3) + t1772 * t1726;
t1791 = t1767 * t1772 * t1775;
t1744 = qJDD(3) - t1791;
t1697 = (-t1738 - t1793) * pkin(8) + t1744 * pkin(3) + t1716;
t1717 = -t1772 * g(3) + t1767 * t1726;
t1698 = -pkin(3) * t1803 + t1737 * pkin(8) - qJD(3) * t1782 + t1717;
t1678 = t1766 * t1697 + t1771 * t1698;
t1657 = -t1730 * pkin(4) + t1705 * pkin(9) - t1760 * t1785 + t1678;
t1677 = t1771 * t1697 - t1766 * t1698;
t1783 = t1766 * t1737 + t1771 * t1738;
t1706 = qJD(4) * t1731 + t1783;
t1794 = qJDD(3) + qJDD(4);
t1714 = t1794 + t1804;
t1776 = (t1731 * t1760 - t1706) * pkin(9) + t1714 * pkin(4) + t1677;
t1633 = t1770 * t1657 + t1765 * t1776;
t1763 = t1772 ^ 2;
t1797 = t1762 + t1763;
t1790 = qJDD(5) + t1794;
t1632 = -t1657 * t1765 + t1770 * t1776;
t1784 = t1765 * t1705 + t1770 * t1706;
t1668 = -qJD(5) * t1710 + t1784;
t1788 = -t1764 * t1668 + t1769 * t1790;
t1787 = -t1770 * t1705 + t1765 * t1706;
t1780 = -qJD(5) * t1712 - qJDD(6) - t1787;
t1658 = t1712 * t1799 + t1787;
t1778 = -t1769 * t1668 - t1764 * t1790;
t1774 = qJD(3) ^ 2;
t1751 = -t1763 * t1775 - t1774;
t1750 = -t1774 - t1803;
t1745 = -qJDD(3) - t1791;
t1743 = t1797 * t1775;
t1742 = qJDD(1) * t1768 + t1773 * t1775;
t1741 = qJDD(1) * t1773 - t1768 * t1775;
t1740 = t1797 * qJDD(1);
t1739 = -0.2e1 * t1793 + t1795;
t1736 = 0.2e1 * t1792 + t1796;
t1729 = qJDD(1) * pkin(1) - t1781;
t1727 = t1775 * pkin(1) + t1779;
t1725 = t1775 * t1811 + t1779;
t1722 = -t1812 - t1814;
t1721 = t1745 * t1772 - t1751 * t1767;
t1720 = -t1744 * t1767 + t1750 * t1772;
t1719 = t1745 * t1767 + t1751 * t1772;
t1718 = t1744 * t1772 + t1750 * t1767;
t1715 = -t1794 + t1804;
t1713 = -t1812 - t1730;
t1707 = -t1730 - t1814;
t1704 = -t1813 - t1815;
t1694 = -t1716 * t1767 + t1717 * t1772;
t1693 = t1716 * t1772 + t1717 * t1767;
t1692 = t1715 * t1771 - t1722 * t1766;
t1691 = t1715 * t1766 + t1722 * t1771;
t1690 = -t1731 * t1802 - t1783;
t1689 = t1731 * t1801 + t1783;
t1688 = -t1733 * t1802 - t1786;
t1687 = t1733 * t1801 + t1786;
t1686 = t1713 * t1771 - t1714 * t1766;
t1685 = t1713 * t1766 + t1714 * t1771;
t1684 = pkin(5) * t1710 - pkin(10) * t1712;
t1683 = -t1790 - t1805;
t1682 = t1790 - t1805;
t1681 = -t1813 - t1816;
t1679 = -t1815 - t1816;
t1676 = -t1817 - t1818;
t1675 = t1683 * t1770 - t1704 * t1765;
t1674 = t1683 * t1765 + t1704 * t1770;
t1673 = -t1691 * t1767 + t1692 * t1772;
t1672 = t1691 * t1772 + t1692 * t1767;
t1671 = -t1817 - t1819;
t1670 = t1688 * t1771 - t1690 * t1766;
t1669 = t1688 * t1766 + t1690 * t1771;
t1667 = -t1818 - t1819;
t1665 = -t1685 * t1767 + t1686 * t1772;
t1664 = t1685 * t1772 + t1686 * t1767;
t1663 = t1681 * t1770 - t1682 * t1765;
t1662 = t1681 * t1765 + t1682 * t1770;
t1661 = t1710 * t1800 - t1784;
t1660 = -t1710 * t1799 + t1784;
t1659 = -t1712 * t1800 - t1787;
t1653 = t1780 - t1806;
t1652 = -t1780 - t1806;
t1651 = -t1677 * t1766 + t1678 * t1771;
t1650 = t1677 * t1771 + t1678 * t1766;
t1649 = -t1674 * t1766 + t1675 * t1771;
t1648 = t1674 * t1771 + t1675 * t1766;
t1647 = -t1669 * t1767 + t1670 * t1772;
t1646 = t1669 * t1772 + t1670 * t1767;
t1645 = t1701 * t1798 + t1778;
t1644 = -t1701 * t1821 - t1778;
t1643 = -t1703 * t1798 + t1788;
t1642 = t1703 * t1821 - t1788;
t1641 = -t1662 * t1766 + t1663 * t1771;
t1640 = t1662 * t1771 + t1663 * t1766;
t1639 = t1659 * t1770 - t1661 * t1765;
t1638 = t1659 * t1765 + t1661 * t1770;
t1637 = t1653 * t1769 - t1676 * t1764;
t1636 = t1653 * t1764 + t1676 * t1769;
t1635 = -t1652 * t1764 + t1671 * t1769;
t1634 = t1652 * t1769 + t1671 * t1764;
t1631 = -t1650 * t1767 + t1651 * t1772;
t1630 = t1650 * t1772 + t1651 * t1767;
t1629 = (t1710 * t1755 - t1668) * pkin(10) + t1658 * pkin(5) - t1666;
t1628 = -t1648 * t1767 + t1649 * t1772;
t1627 = t1648 * t1772 + t1649 * t1767;
t1626 = -pkin(5) * t1813 + pkin(10) * t1790 - t1710 * t1684 + t1633;
t1625 = -pkin(5) * t1790 - pkin(10) * t1813 + t1684 * t1712 - t1632;
t1624 = t1643 * t1769 - t1645 * t1764;
t1623 = t1643 * t1764 + t1645 * t1769;
t1622 = t1637 * t1770 + t1644 * t1765;
t1621 = t1637 * t1765 - t1644 * t1770;
t1620 = t1635 * t1770 + t1642 * t1765;
t1619 = t1635 * t1765 - t1642 * t1770;
t1618 = -t1640 * t1767 + t1641 * t1772;
t1617 = t1640 * t1772 + t1641 * t1767;
t1616 = t1624 * t1770 + t1667 * t1765;
t1615 = t1624 * t1765 - t1667 * t1770;
t1614 = -t1638 * t1766 + t1639 * t1771;
t1613 = t1638 * t1771 + t1639 * t1766;
t1612 = -t1632 * t1765 + t1633 * t1770;
t1611 = t1632 * t1770 + t1633 * t1765;
t1610 = t1626 * t1769 + t1629 * t1764;
t1609 = -t1626 * t1764 + t1629 * t1769;
t1608 = -t1621 * t1766 + t1622 * t1771;
t1607 = t1621 * t1771 + t1622 * t1766;
t1606 = -t1619 * t1766 + t1620 * t1771;
t1605 = t1619 * t1771 + t1620 * t1766;
t1604 = -t1615 * t1766 + t1616 * t1771;
t1603 = t1615 * t1771 + t1616 * t1766;
t1602 = -t1613 * t1767 + t1614 * t1772;
t1601 = t1613 * t1772 + t1614 * t1767;
t1600 = -t1611 * t1766 + t1612 * t1771;
t1599 = t1611 * t1771 + t1612 * t1766;
t1598 = -t1609 * t1764 + t1610 * t1769;
t1597 = t1609 * t1769 + t1610 * t1764;
t1596 = -t1607 * t1767 + t1608 * t1772;
t1595 = t1607 * t1772 + t1608 * t1767;
t1594 = -t1605 * t1767 + t1606 * t1772;
t1593 = t1605 * t1772 + t1606 * t1767;
t1592 = t1598 * t1770 + t1625 * t1765;
t1591 = t1598 * t1765 - t1625 * t1770;
t1590 = -t1603 * t1767 + t1604 * t1772;
t1589 = t1603 * t1772 + t1604 * t1767;
t1588 = -t1599 * t1767 + t1600 * t1772;
t1587 = t1599 * t1772 + t1600 * t1767;
t1586 = -t1591 * t1766 + t1592 * t1771;
t1585 = t1591 * t1771 + t1592 * t1766;
t1584 = -t1585 * t1767 + t1586 * t1772;
t1583 = t1585 * t1772 + t1586 * t1767;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1742, -t1741, 0, -t1746 * t1768 + t1747 * t1773, 0, 0, 0, 0, 0, 0, 0, t1742, t1741, -t1727 * t1773 - t1729 * t1768, 0, 0, 0, 0, 0, 0, t1718 * t1768 + t1736 * t1773, t1719 * t1768 + t1739 * t1773, -t1740 * t1768 - t1743 * t1773, t1693 * t1768 - t1725 * t1773, 0, 0, 0, 0, 0, 0, t1664 * t1768 + t1687 * t1773, t1672 * t1768 + t1689 * t1773, t1646 * t1768 + t1707 * t1773, t1630 * t1768 - t1699 * t1773, 0, 0, 0, 0, 0, 0, t1617 * t1768 + t1658 * t1773, t1627 * t1768 + t1660 * t1773, t1601 * t1768 + t1679 * t1773, t1587 * t1768 - t1666 * t1773, 0, 0, 0, 0, 0, 0, t1593 * t1768 + t1634 * t1773, t1595 * t1768 + t1636 * t1773, t1589 * t1768 + t1623 * t1773, t1583 * t1768 + t1597 * t1773; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1741, -t1742, 0, t1746 * t1773 + t1747 * t1768, 0, 0, 0, 0, 0, 0, 0, -t1741, t1742, -t1727 * t1768 + t1729 * t1773, 0, 0, 0, 0, 0, 0, -t1718 * t1773 + t1736 * t1768, -t1719 * t1773 + t1739 * t1768, t1740 * t1773 - t1743 * t1768, -t1693 * t1773 - t1725 * t1768, 0, 0, 0, 0, 0, 0, -t1664 * t1773 + t1687 * t1768, -t1672 * t1773 + t1689 * t1768, -t1646 * t1773 + t1707 * t1768, -t1630 * t1773 - t1699 * t1768, 0, 0, 0, 0, 0, 0, -t1617 * t1773 + t1658 * t1768, -t1627 * t1773 + t1660 * t1768, -t1601 * t1773 + t1679 * t1768, -t1587 * t1773 - t1666 * t1768, 0, 0, 0, 0, 0, 0, -t1593 * t1773 + t1634 * t1768, -t1595 * t1773 + t1636 * t1768, -t1589 * t1773 + t1623 * t1768, -t1583 * t1773 + t1597 * t1768; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1720, t1721, 0, t1694, 0, 0, 0, 0, 0, 0, t1665, t1673, t1647, t1631, 0, 0, 0, 0, 0, 0, t1618, t1628, t1602, t1588, 0, 0, 0, 0, 0, 0, t1594, t1596, t1590, t1584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1775, -qJDD(1), 0, t1747, 0, 0, 0, 0, 0, 0, 0, t1775, qJDD(1), -t1727, 0, 0, 0, 0, 0, 0, t1736, t1739, -t1743, -t1725, 0, 0, 0, 0, 0, 0, t1687, t1689, t1707, -t1699, 0, 0, 0, 0, 0, 0, t1658, t1660, t1679, -t1666, 0, 0, 0, 0, 0, 0, t1634, t1636, t1623, t1597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1775, 0, t1746, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1775, t1729, 0, 0, 0, 0, 0, 0, -t1718, -t1719, t1740, -t1693, 0, 0, 0, 0, 0, 0, -t1664, -t1672, -t1646, -t1630, 0, 0, 0, 0, 0, 0, -t1617, -t1627, -t1601, -t1587, 0, 0, 0, 0, 0, 0, -t1593, -t1595, -t1589, -t1583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1720, t1721, 0, t1694, 0, 0, 0, 0, 0, 0, t1665, t1673, t1647, t1631, 0, 0, 0, 0, 0, 0, t1618, t1628, t1602, t1588, 0, 0, 0, 0, 0, 0, t1594, t1596, t1590, t1584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1720, t1721, 0, t1694, 0, 0, 0, 0, 0, 0, t1665, t1673, t1647, t1631, 0, 0, 0, 0, 0, 0, t1618, t1628, t1602, t1588, 0, 0, 0, 0, 0, 0, t1594, t1596, t1590, t1584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1775, -qJDD(1), t1727, 0, 0, 0, 0, 0, 0, -t1736, -t1739, t1743, t1725, 0, 0, 0, 0, 0, 0, -t1687, -t1689, -t1707, t1699, 0, 0, 0, 0, 0, 0, -t1658, -t1660, -t1679, t1666, 0, 0, 0, 0, 0, 0, -t1634, -t1636, -t1623, -t1597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1775, -t1729, 0, 0, 0, 0, 0, 0, t1718, t1719, -t1740, t1693, 0, 0, 0, 0, 0, 0, t1664, t1672, t1646, t1630, 0, 0, 0, 0, 0, 0, t1617, t1627, t1601, t1587, 0, 0, 0, 0, 0, 0, t1593, t1595, t1589, t1583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1750, t1745, -t1796, t1717, 0, 0, 0, 0, 0, 0, t1686, t1692, t1670, t1651, 0, 0, 0, 0, 0, 0, t1641, t1649, t1614, t1600, 0, 0, 0, 0, 0, 0, t1606, t1608, t1604, t1586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1744, t1751, -t1795, t1716, 0, 0, 0, 0, 0, 0, t1685, t1691, t1669, t1650, 0, 0, 0, 0, 0, 0, t1640, t1648, t1613, t1599, 0, 0, 0, 0, 0, 0, t1605, t1607, t1603, t1585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1736, t1739, -t1743, -t1725, 0, 0, 0, 0, 0, 0, t1687, t1689, t1707, -t1699, 0, 0, 0, 0, 0, 0, t1658, t1660, t1679, -t1666, 0, 0, 0, 0, 0, 0, t1634, t1636, t1623, t1597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1713, t1715, t1688, t1678, 0, 0, 0, 0, 0, 0, t1663, t1675, t1639, t1612, 0, 0, 0, 0, 0, 0, t1620, t1622, t1616, t1592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1714, t1722, t1690, t1677, 0, 0, 0, 0, 0, 0, t1662, t1674, t1638, t1611, 0, 0, 0, 0, 0, 0, t1619, t1621, t1615, t1591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1687, t1689, t1707, -t1699, 0, 0, 0, 0, 0, 0, t1658, t1660, t1679, -t1666, 0, 0, 0, 0, 0, 0, t1634, t1636, t1623, t1597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1681, t1683, t1659, t1633, 0, 0, 0, 0, 0, 0, t1635, t1637, t1624, t1598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1682, t1704, t1661, t1632, 0, 0, 0, 0, 0, 0, -t1642, -t1644, -t1667, -t1625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1658, t1660, t1679, -t1666, 0, 0, 0, 0, 0, 0, t1634, t1636, t1623, t1597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1671, t1653, t1643, t1610; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1652, t1676, t1645, t1609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1642, t1644, t1667, t1625;];
f_new_reg  = t1;
