% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:18
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:17:55
% EndTime: 2019-03-09 07:18:07
% DurationCPUTime: 4.28s
% Computational Cost: add. (7430->269), mult. (14257->441), div. (0->0), fcn. (13909->8), ass. (0->164)
t100 = sin(qJ(5));
t199 = cos(qJ(5));
t101 = sin(qJ(3));
t103 = cos(qJ(3));
t198 = sin(qJ(4));
t200 = cos(qJ(4));
t187 = t200 * t101 + t198 * t103;
t211 = t100 * t187;
t72 = -t198 * t101 + t200 * t103;
t51 = t199 * t72 - t211;
t182 = t100 * t51;
t210 = t199 * t187;
t217 = t100 * t72 + t210;
t118 = (-t199 * t217 + t182) * qJD(5);
t106 = (qJD(3) + qJD(4)) * t72;
t154 = t198 * qJD(4);
t158 = qJD(4) * t200;
t151 = t187 * qJD(3) + t101 * t158 + t103 * t154;
t157 = qJD(5) * t199;
t215 = qJD(5) * t211 + t100 * t151 - t72 * t157;
t19 = -t199 * t106 + t215;
t176 = qJD(5) * t100;
t216 = qJD(5) * t210 + t199 * t151 + t72 * t176;
t21 = t100 * t106 + t216;
t194 = t21 * t51;
t228 = -t19 * t217 - t194;
t166 = pkin(4) * t176;
t145 = t198 * t199;
t218 = (qJD(4) + qJD(5)) * pkin(3) * (t200 * t100 + t145);
t41 = t166 + t218;
t193 = t41 * t51;
t169 = t200 * pkin(3);
t146 = t169 + pkin(4);
t120 = t199 * t146;
t149 = pkin(3) * t158;
t40 = -qJD(5) * t120 - t199 * t149 + (t198 * qJD(5) + t154) * t100 * pkin(3);
t138 = t217 * t40 + t193;
t47 = t51 ^ 2;
t203 = -pkin(1) - pkin(7);
t173 = pkin(8) - t203;
t130 = t173 * t198;
t121 = qJD(4) * t130;
t131 = t173 * t200;
t122 = qJD(4) * t131;
t175 = t101 * qJD(3);
t129 = t173 * t175;
t69 = t103 * t130;
t32 = qJD(3) * t69 + t101 * t122 + t103 * t121 + t200 * t129;
t104 = -t151 * pkin(9) - t32;
t126 = t103 * t131;
t52 = t101 * t130 - t126;
t110 = -t72 * pkin(9) + t52;
t109 = t100 * t110;
t116 = t72 * qJD(4);
t107 = -t72 * qJD(3) - t116;
t31 = qJD(3) * t126 - t101 * t121 + t103 * t122 - t198 * t129;
t26 = t107 * pkin(9) - t31;
t53 = -t101 * t131 - t69;
t34 = -t187 * pkin(9) + t53;
t7 = qJD(5) * t109 + t100 * t26 + t199 * t104 + t34 * t157;
t227 = t7 * t51;
t20 = -t100 * t107 + t216;
t192 = t51 * t20;
t102 = cos(qJ(6));
t95 = qJD(6) * t102;
t226 = t51 * t95;
t99 = sin(qJ(6));
t177 = qJD(6) * t99;
t165 = t51 * t177;
t108 = t199 * t110;
t6 = -qJD(5) * t108 + t100 * t104 + t34 * t176 - t199 * t26;
t225 = t217 * t6;
t97 = t99 ^ 2;
t98 = t102 ^ 2;
t212 = t97 + t98;
t30 = t212 * t40;
t22 = -t199 * t107 - t215;
t223 = t217 * t22;
t221 = t217 * t95;
t220 = t177 * t217;
t185 = t97 - t98;
t208 = t185 * qJD(6);
t89 = t101 * pkin(3) + qJ(2);
t56 = t187 * pkin(4) + t89;
t113 = pkin(5) * t217 - t51 * pkin(10) + t56;
t213 = -qJD(6) * t113 + t6;
t132 = t72 * t151;
t29 = t199 * t34 + t109;
t11 = t102 * t113 - t99 * t29;
t12 = t102 * t29 + t99 * t113;
t209 = t102 * t12 - t11 * t99;
t206 = -t52 * t151 - t31 * t187 + t32 * t72;
t148 = pkin(3) * t154;
t205 = -t72 * t148 + t187 * t149 - t151 * t169;
t204 = 2 * qJD(2);
t28 = t100 * t34 - t108;
t202 = t28 * t7;
t5 = t7 * t99;
t201 = t28 * t95 + t5;
t196 = t28 * t41;
t191 = t99 * t22;
t168 = t198 * pkin(3);
t64 = -t100 * t168 + t120;
t57 = -pkin(5) - t64;
t190 = t41 * t99 + t57 * t95;
t147 = pkin(4) * t157;
t61 = t212 * t147;
t94 = -t199 * pkin(4) - pkin(5);
t188 = t99 * t166 + t94 * t95;
t65 = pkin(3) * t145 + t100 * t146;
t184 = qJD(5) * pkin(4);
t183 = t100 * t28;
t179 = t102 * t20;
t174 = t103 * qJD(3);
t172 = 0.2e1 * t223;
t171 = pkin(5) * t177;
t170 = t99 * t179;
t167 = pkin(5) * t95;
t24 = t28 * t177;
t164 = t99 * t95;
t163 = t203 * qJD(3);
t10 = t212 * t19;
t162 = t212 * t217;
t58 = pkin(10) + t65;
t161 = t212 * t58;
t93 = t100 * pkin(4) + pkin(10);
t160 = t212 * t93;
t159 = t101 * t174;
t54 = t57 * t177;
t153 = -t41 * t102 + t54;
t152 = -0.2e1 * t166;
t150 = t47 * t164;
t141 = -t28 * t20 + t227;
t140 = t28 * t21 - t227;
t83 = pkin(3) * t174 + qJD(2);
t139 = t20 * t217 - t51 * t22;
t137 = -t217 ^ 2 - t47;
t136 = t217 * t58 - t51 * t57;
t135 = t217 * t93 - t51 * t94;
t133 = t102 * t11 + t12 * t99;
t73 = t94 * t177;
t127 = -t102 * t166 + t73;
t125 = t165 + t179;
t124 = -t99 * t20 + t226;
t123 = -t102 * t22 + t220;
t119 = t212 * t199;
t115 = t192 - t223 - t228;
t114 = -t20 * t57 - t22 * t58 + t138;
t105 = -t107 * pkin(4) + t22 * pkin(5) + t20 * pkin(10) + t83;
t2 = t102 * t213 - t99 * t105 + t29 * t177;
t3 = t102 * t105 + t213 * t99 - t29 * t95;
t1 = -t133 * qJD(6) - t2 * t102 - t3 * t99;
t111 = pkin(4) * t118 - t20 * t94 - t22 * t93;
t96 = qJ(2) * t204;
t82 = -0.2e1 * t164;
t81 = 0.2e1 * t164;
t71 = -0.2e1 * t208;
t35 = qJD(2) + pkin(4) * t116 + (t103 * pkin(3) + t72 * pkin(4)) * qJD(3);
t17 = -t21 * t102 - t165;
t16 = t21 * t99 - t226;
t15 = t191 + t221;
t13 = t51 * t208 + t170;
t8 = -0.4e1 * t51 * t164 + t185 * t20;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, t96, -0.2e1 * t159, 0.2e1 * (t101 ^ 2 - t103 ^ 2) * qJD(3), 0, 0.2e1 * t159, 0, 0, 0.2e1 * qJ(2) * t174 + 0.2e1 * qJD(2) * t101, -0.2e1 * qJ(2) * t175 + 0.2e1 * qJD(2) * t103, 0, t96, -0.2e1 * t132, 0.2e1 * t72 * t107 + 0.2e1 * t151 * t187, 0, -0.2e1 * t187 * t107, 0, 0, 0.2e1 * t89 * t106 + 0.2e1 * t83 * t187, -0.2e1 * t89 * t151 + 0.2e1 * t83 * t72, 0.2e1 * t53 * t107 - 0.2e1 * t206, -0.2e1 * t53 * t31 + 0.2e1 * t52 * t32 + 0.2e1 * t89 * t83, -0.2e1 * t192, 0.2e1 * t139, 0, t172, 0, 0, 0.2e1 * t217 * t35 + 0.2e1 * t56 * t22, -0.2e1 * t56 * t20 + 0.2e1 * t35 * t51, -0.2e1 * t29 * t22 + 0.2e1 * t141 + 0.2e1 * t225, -0.2e1 * t29 * t6 + 0.2e1 * t56 * t35 + 0.2e1 * t202, -0.2e1 * t192 * t98 - 0.2e1 * t150, 0.4e1 * t170 * t51 + 0.2e1 * t208 * t47, -0.2e1 * t102 * t139 - 0.2e1 * t165 * t217, -0.2e1 * t192 * t97 + 0.2e1 * t150, -0.2e1 * t124 * t217 - 0.2e1 * t191 * t51, t172, 0.2e1 * t11 * t22 + 0.2e1 * t124 * t28 + 0.2e1 * t217 * t3 + 0.2e1 * t5 * t51, 0.2e1 * t102 * t141 - 0.2e1 * t12 * t22 + 0.2e1 * t2 * t217 - 0.2e1 * t24 * t51, 0.2e1 * t133 * t20 + 0.2e1 * (-qJD(6) * t209 - t102 * t3 + t2 * t99) * t51, 0.2e1 * t11 * t3 - 0.2e1 * t12 * t2 + 0.2e1 * t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t132 + (-t106 + t107) * t187, t53 * t106 + t206, 0, 0, 0, 0, 0, 0, 0, 0, t115, -t29 * t19 + t140 - t225, 0, 0, 0, 0, 0, 0, t115 * t99 + t137 * t95, t102 * t115 - t137 * t177, 0, t1 * t217 - t19 * t209 + t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t187 * t106 - 0.2e1 * t132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t228, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t162 * t19 - 0.2e1 * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, 0, -t174, 0, -t101 * t163, -t103 * t163, 0, 0, 0, 0, -t151, 0, t107, 0, t32, t31, t107 * t168 - t205 (t200 * t32 - t198 * t31 + (-t198 * t52 + t200 * t53) * qJD(4)) * pkin(3), 0, 0, -t20, 0, -t22, 0, -t7, t6, t64 * t20 - t65 * t22 + t138, -t29 * t40 - t6 * t65 - t7 * t64 + t196, -t13, t8, t15, t13, -t123, 0, t24 + (-qJD(6) * t136 - t7) * t102 + t114 * t99, t102 * t114 + t136 * t177 + t201, t1, t1 * t58 - t209 * t40 + t7 * t57 + t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t174, 0, 0, 0, 0, 0, 0, 0, 0, -t151, t107, 0, t106 * t168 + t205, 0, 0, 0, 0, 0, 0, -t21, t19, 0, -t19 * t65 - t21 * t64 - t138, 0, 0, 0, 0, 0, 0, t17, t16, -t10, -t161 * t19 - t162 * t40 + t21 * t57 - t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t148, -0.2e1 * t149, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t41, 0.2e1 * t40, 0, -0.2e1 * t65 * t40 - 0.2e1 * t64 * t41, t81, t71, 0, t82, 0, 0, 0.2e1 * t153, 0.2e1 * t190, -0.2e1 * t30, -0.2e1 * t161 * t40 + 0.2e1 * t57 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, 0, t107, 0, t32, t31, 0, 0, 0, 0, -t20, 0, -t22, 0, -t7, t6 (-t100 * t22 + t199 * t20 + t118) * pkin(4) (-t199 * t7 - t100 * t6 + (t199 * t29 + t183) * qJD(5)) * pkin(4), -t13, t8, t15, t13, -t123, 0, t24 + (-qJD(6) * t135 - t7) * t102 + t111 * t99, t102 * t111 + t135 * t177 + t201, t1, t7 * t94 + (t199 * t209 + t183) * t184 + t1 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, t107, 0, 0, 0, 0, 0, 0, 0, 0, -t21, t19, 0 (-t100 * t19 - t199 * t21 - t118) * pkin(4), 0, 0, 0, 0, 0, 0, t17, t16, -t10, t21 * t94 - t19 * t160 + (t119 * t217 - t182) * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t149, 0, 0, 0, 0, 0, 0, 0, 0, t152 - t218, -t147 + t40, 0 (-t199 * t41 - t100 * t40 + (-t100 * t64 + t199 * t65) * qJD(5)) * pkin(4), t81, t71, 0, t82, 0, 0, t54 + t73 + (-t41 - t166) * t102, t188 + t190, t61 - t30, t41 * t94 - t40 * t160 + (t100 * t57 + t119 * t58) * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, -0.2e1 * t147, 0, 0, t81, t71, 0, t82, 0, 0, 0.2e1 * t127, 0.2e1 * t188, 0.2e1 * t61, 0.2e1 * (t100 * t94 + t119 * t93) * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, 0, -t22, 0, -t7, t6, 0, 0, -t13, t8, t15, t13, -t123, 0, t24 + (pkin(5) * t20 - pkin(10) * t22) * t99 + (-t7 + (-pkin(5) * t51 - pkin(10) * t217) * qJD(6)) * t102, pkin(5) * t125 + pkin(10) * t123 + t201, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, t19, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, -t10, -t21 * pkin(5) - pkin(10) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t40, 0, 0, t81, t71, 0, t82, 0, 0, t153 - t171, -t167 + t190, -t30, -t41 * pkin(5) - pkin(10) * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t147, 0, 0, t81, t71, 0, t82, 0, 0, t127 - t171, -t167 + t188, t61 (-pkin(5) * t100 + pkin(10) * t119) * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, t71, 0, t82, 0, 0, -0.2e1 * t171, -0.2e1 * t167, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, 0, -t124, t22, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 * t19 - t221, t102 * t19 + t220, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t177, 0, t99 * t40 - t58 * t95, t102 * t40 + t177 * t58, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t177, 0, -t147 * t99 - t93 * t95, -t102 * t147 + t177 * t93, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t177, 0, -pkin(10) * t95, pkin(10) * t177, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
