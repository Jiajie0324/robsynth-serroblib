% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:27:54
% EndTime: 2019-05-05 03:28:36
% DurationCPUTime: 38.16s
% Computational Cost: add. (110819->841), mult. (235794->1295), div. (0->0), fcn. (155161->12), ass. (0->610)
t822 = sin(qJ(3));
t809 = t822 ^ 2;
t828 = qJD(2) ^ 2;
t803 = t809 * t828;
t827 = qJD(3) ^ 2;
t791 = -t803 - t827;
t825 = cos(qJ(3));
t921 = t822 * t825 * t828;
t787 = qJDD(3) - t921;
t965 = t787 * t822;
t721 = -t791 * t825 + t965;
t815 = sin(pkin(6));
t818 = cos(pkin(6));
t946 = t825 * t787;
t729 = t791 * t822 + t946;
t933 = qJD(2) * qJD(3);
t911 = t825 * t933;
t930 = qJDD(2) * t822;
t775 = 0.2e1 * t911 + t930;
t823 = sin(qJ(2));
t826 = cos(qJ(2));
t866 = t729 * t823 + t775 * t826;
t621 = -t815 * t721 + t818 * t866;
t665 = t729 * t826 - t775 * t823;
t814 = sin(pkin(10));
t817 = cos(pkin(10));
t549 = t621 * t817 + t665 * t814;
t1040 = qJ(1) * t549;
t554 = t621 * t814 - t665 * t817;
t1039 = qJ(1) * t554;
t617 = t818 * t721 + t815 * t866;
t1038 = pkin(7) * (t617 * t815 + t621 * t818);
t810 = t825 ^ 2;
t805 = t810 * t828;
t793 = -t805 - t827;
t786 = qJDD(3) + t921;
t947 = t825 * t786;
t718 = t793 * t822 + t947;
t966 = t786 * t822;
t727 = -t793 * t825 + t966;
t912 = t822 * t933;
t928 = qJDD(2) * t825;
t777 = -0.2e1 * t912 + t928;
t867 = t727 * t823 - t777 * t826;
t620 = t815 * t718 + t818 * t867;
t664 = t727 * t826 + t777 * t823;
t548 = t620 * t817 + t664 * t814;
t1037 = qJ(1) * t548;
t551 = t620 * t814 - t664 * t817;
t1036 = qJ(1) * t551;
t1035 = pkin(1) * t617;
t1034 = pkin(1) * t621;
t616 = -t818 * t718 + t815 * t867;
t1033 = pkin(7) * (t616 * t815 + t620 * t818);
t790 = -t803 + t827;
t720 = t790 * t825 + t966;
t728 = -t790 * t822 + t947;
t927 = qJDD(2) * t826;
t853 = t728 * t823 - t822 * t927;
t633 = -t815 * t720 + t818 * t853;
t929 = qJDD(2) * t823;
t685 = t728 * t826 + t822 * t929;
t1032 = t633 * t814 - t685 * t817;
t1031 = t633 * t817 + t685 * t814;
t1029 = pkin(1) * t616;
t1028 = pkin(1) * t620;
t792 = t805 - t827;
t716 = t792 * t822 + t946;
t725 = -t792 * t825 + t965;
t854 = t725 * t823 + t825 * t927;
t632 = t815 * t716 + t818 * t854;
t684 = t725 * t826 - t823 * t928;
t1027 = t632 * t814 - t684 * t817;
t1026 = t632 * t817 + t684 * t814;
t1024 = pkin(7) * t665;
t1019 = t818 * t720 + t815 * t853;
t1018 = pkin(7) * t664;
t1013 = -t818 * t716 + t815 * t854;
t1012 = pkin(2) * t718;
t1011 = pkin(8) * t718;
t1010 = pkin(8) * t729;
t1005 = -2 * qJD(5);
t1004 = pkin(2) * t721;
t1003 = pkin(8) * t721;
t1002 = pkin(8) * t727;
t813 = sin(pkin(11));
t816 = cos(pkin(11));
t938 = qJD(2) * t825;
t760 = qJD(3) * t813 + t816 * t938;
t762 = qJD(3) * t816 - t813 * t938;
t712 = t762 * t760;
t776 = t911 + t930;
t989 = -t712 + t776;
t1001 = t813 * t989;
t998 = t816 * t989;
t821 = sin(qJ(6));
t824 = cos(qJ(6));
t696 = t824 * t760 + t762 * t821;
t698 = -t760 * t821 + t762 * t824;
t641 = t698 * t696;
t764 = qJDD(6) + t776;
t990 = -t641 + t764;
t995 = t821 * t990;
t994 = t824 * t990;
t909 = g(1) * t814 - t817 * g(2);
t944 = g(3) - qJDD(1);
t993 = -t815 * t944 + t818 * t909;
t784 = g(1) * t817 + g(2) * t814;
t682 = -t826 * t784 + t823 * t993;
t662 = -t828 * pkin(2) + qJDD(2) * pkin(8) + t682;
t741 = t815 * t909 + t818 * t944;
t627 = t822 * t662 + t825 * t741;
t979 = qJ(4) * t822;
t984 = pkin(3) * t825;
t899 = -t979 - t984;
t773 = t899 * qJD(2);
t939 = qJD(2) * t822;
t858 = -qJDD(3) * pkin(3) - t827 * qJ(4) + t773 * t939 + qJDD(4) + t627;
t544 = -t786 * qJ(5) + (t776 - t911) * pkin(4) + t858;
t681 = -t823 * t784 - t826 * t993;
t661 = -qJDD(2) * pkin(2) - t828 * pkin(8) + t681;
t851 = t912 - t928;
t831 = t851 * pkin(3) + t661 + (-t776 - t911) * qJ(4);
t935 = pkin(4) * t939 - qJD(3) * qJ(5) + (2 * qJD(4));
t981 = pkin(3) + qJ(5);
t563 = -pkin(4) * t805 - qJ(5) * t928 + (qJD(3) * t981 - t935) * t939 + t831;
t475 = t1005 * t760 + t813 * t544 + t816 * t563;
t988 = t1005 * t762 + t816 * t544 - t813 * t563;
t412 = t816 * t475 - t813 * t988;
t411 = t813 * t475 + t816 * t988;
t992 = t814 * t944;
t991 = t817 * t944;
t739 = t816 * qJDD(3) + t813 * t851;
t920 = t760 * t939;
t859 = t920 + t739;
t711 = -t817 * t784 - t814 * t909;
t710 = -t814 * t784 + t817 * t909;
t950 = t822 * t741;
t987 = -(qJD(2) * t773 + t662) * t825 + t827 * pkin(3) + t950;
t690 = t696 ^ 2;
t691 = t698 ^ 2;
t758 = t760 ^ 2;
t986 = t762 ^ 2;
t796 = qJD(6) + t939;
t794 = t796 ^ 2;
t985 = -2 * qJD(4);
t983 = pkin(7) * t815;
t982 = pkin(7) * t818;
t940 = t809 + t810;
t779 = t940 * qJDD(2);
t782 = t803 + t805;
t862 = t779 * t823 + t782 * t826;
t700 = t862 * t818;
t707 = t779 * t826 - t782 * t823;
t639 = t700 * t817 + t707 * t814;
t980 = qJ(1) * t639;
t450 = pkin(5) * t989 - pkin(9) * t859 + t988;
t738 = -qJDD(3) * t813 + t816 * t851;
t740 = pkin(5) * t939 - pkin(9) * t762;
t461 = -pkin(5) * t758 + pkin(9) * t738 - t740 * t939 + t475;
t389 = -t824 * t450 + t821 * t461;
t390 = t821 * t450 + t824 * t461;
t357 = -t824 * t389 + t821 * t390;
t978 = t357 * t816;
t628 = t662 * t825 - t950;
t520 = t627 * t825 - t628 * t822;
t977 = t520 * t823;
t607 = t641 + t764;
t976 = t607 * t821;
t975 = t607 * t824;
t974 = t661 * t822;
t973 = t661 * t825;
t680 = t712 + t776;
t972 = t680 * t816;
t971 = t775 * t822;
t714 = t777 * t825;
t960 = t796 * t821;
t959 = t796 * t824;
t958 = t813 * t357;
t830 = qJDD(3) * qJ(4) - t987;
t539 = -t851 * pkin(4) - qJ(5) * t805 + qJD(3) * t935 + qJDD(5) + t830;
t956 = t813 * t539;
t955 = t813 * t680;
t952 = t816 * t539;
t505 = -t738 * pkin(5) - t758 * pkin(9) + t740 * t762 + t539;
t951 = t821 * t505;
t949 = t823 * t741;
t948 = t824 * t505;
t945 = t826 * t741;
t942 = pkin(1) * t700 + t707 * t983;
t941 = pkin(2) * t782 + pkin(8) * t779;
t934 = qJD(6) + t796;
t932 = qJD(4) * qJD(3);
t931 = qJDD(2) * t815;
t926 = -t803 - t986;
t925 = t822 * t641;
t924 = t825 * t641;
t923 = t822 * t712;
t922 = t825 * t712;
t919 = t762 * t939;
t918 = t813 * t939;
t917 = t816 * t939;
t699 = t862 * t815;
t910 = -pkin(1) * t699 + t707 * t982;
t358 = t389 * t821 + t824 * t390;
t521 = t627 * t822 + t825 * t628;
t906 = -t824 * t738 + t821 * t739;
t903 = t823 * t921;
t902 = t826 * t921;
t898 = pkin(3) * t822 - qJ(4) * t825;
t780 = -t823 * t828 + t927;
t897 = -pkin(7) * t780 - t949;
t861 = t826 * t828 + t929;
t896 = -pkin(7) * t861 + t945;
t330 = t358 * t813 + t978;
t326 = t330 * t822 + t505 * t825;
t331 = t358 * t816 - t958;
t895 = t326 * t823 - t331 * t826;
t392 = t411 * t822 + t539 * t825;
t894 = t392 * t823 - t412 * t826;
t864 = t821 * t738 + t824 * t739;
t603 = -qJD(6) * t696 + t864;
t674 = t796 * t696;
t560 = t603 + t674;
t834 = (-qJD(6) + t796) * t698 - t906;
t486 = t560 * t821 + t824 * t834;
t880 = -t560 * t824 + t821 * t834;
t414 = t813 * t486 + t816 * t880;
t583 = -t690 - t691;
t396 = t414 * t822 + t583 * t825;
t416 = t486 * t816 - t813 * t880;
t893 = t396 * t823 - t416 * t826;
t555 = t698 * t934 + t906;
t559 = t603 - t674;
t485 = -t555 * t821 + t559 * t824;
t487 = -t555 * t824 - t559 * t821;
t415 = -t485 * t816 - t487 * t813;
t630 = t691 - t690;
t403 = -t415 * t822 + t630 * t825;
t413 = t485 * t813 - t487 * t816;
t892 = t403 * t823 + t413 * t826;
t623 = -t794 - t690;
t516 = t623 * t824 - t995;
t873 = t623 * t821 + t994;
t463 = t813 * t516 + t816 * t873;
t425 = t463 * t822 + t555 * t825;
t464 = t516 * t816 - t813 * t873;
t891 = t425 * t823 - t464 * t826;
t654 = -t691 - t794;
t529 = -t654 * t821 - t975;
t874 = -t654 * t824 + t976;
t472 = t813 * t529 - t816 * t874;
t558 = -t696 * t934 + t864;
t432 = t472 * t822 + t558 * t825;
t473 = t529 * t816 + t813 * t874;
t890 = t432 * t823 - t473 * t826;
t667 = t690 - t794;
t541 = t667 * t821 + t975;
t543 = t667 * t824 - t976;
t483 = -t541 * t816 - t543 * t813;
t438 = -t483 * t822 + t825 * t834;
t481 = t541 * t813 - t543 * t816;
t889 = t438 * t823 + t481 * t826;
t668 = -t691 + t794;
t540 = t668 * t824 + t995;
t542 = -t668 * t821 + t994;
t482 = -t540 * t816 - t542 * t813;
t439 = -t482 * t822 + t560 * t825;
t480 = t540 * t813 - t542 * t816;
t888 = t439 * t823 + t480 * t826;
t602 = -qJD(6) * t698 - t906;
t534 = t602 * t824 + t696 * t960;
t535 = -t602 * t821 + t696 * t959;
t477 = -t534 * t816 - t535 * t813;
t453 = -t477 * t822 - t924;
t476 = t534 * t813 - t535 * t816;
t887 = t453 * t823 + t476 * t826;
t536 = t603 * t821 + t698 * t959;
t537 = t603 * t824 - t698 * t960;
t479 = -t536 * t816 - t537 * t813;
t454 = -t479 * t822 + t924;
t478 = t536 * t813 - t537 * t816;
t886 = t454 * t823 + t478 * t826;
t586 = t830 + 0.2e1 * t932;
t578 = pkin(3) * t782 + t586;
t580 = qJ(4) * t782 + t858;
t492 = -t578 * t822 + t580 * t825;
t772 = t898 * qJDD(2);
t885 = t492 * t823 + t772 * t826;
t592 = (-t696 * t821 - t698 * t824) * t796;
t593 = (-t696 * t824 + t698 * t821) * t796;
t511 = -t592 * t816 - t593 * t813;
t501 = -t511 * t822 + t764 * t825;
t510 = t592 * t813 - t593 * t816;
t884 = t501 * t823 + t510 * t826;
t504 = t586 * t825 + t822 * t858;
t590 = (pkin(3) * qJD(3) + t985) * t939 + t831;
t883 = t504 * t823 - t590 * t826;
t882 = t521 * t823 - t661 * t826;
t835 = t738 + t919;
t598 = t813 * t835 - t816 * t859;
t673 = -t758 - t986;
t531 = t598 * t822 + t673 * t825;
t601 = t813 * t859 + t816 * t835;
t881 = t531 * t823 - t601 * t826;
t701 = -t803 - t758;
t613 = t813 * t701 + t998;
t675 = -t738 + t919;
t562 = t613 * t822 + t675 * t825;
t614 = t701 * t816 - t1001;
t879 = t562 * t823 - t614 * t826;
t678 = -t920 + t739;
t599 = t675 * t813 - t678 * t816;
t706 = -t758 + t986;
t565 = -t599 * t822 + t706 * t825;
t600 = t675 * t816 + t678 * t813;
t878 = t565 * t823 + t600 * t826;
t742 = t758 - t803;
t645 = -t742 * t813 - t972;
t575 = -t645 * t822 + t825 * t835;
t643 = -t742 * t816 + t955;
t877 = t575 * t823 + t643 * t826;
t644 = t816 * t926 - t955;
t576 = t644 * t822 + t678 * t825;
t647 = -t813 * t926 - t972;
t876 = t576 * t823 - t647 * t826;
t743 = t803 - t986;
t642 = -t743 * t816 - t1001;
t577 = -t822 * t642 + t825 * t859;
t646 = t743 * t813 - t998;
t875 = t577 * t823 + t646 * t826;
t657 = -t738 * t816 - t760 * t918;
t611 = -t657 * t822 - t922;
t659 = t738 * t813 - t760 * t917;
t872 = t611 * t823 + t659 * t826;
t660 = -t739 * t813 - t762 * t917;
t612 = -t660 * t822 + t922;
t658 = -t739 * t816 + t762 * t918;
t871 = t612 * t823 + t658 * t826;
t670 = (t760 * t813 + t762 * t816) * t939;
t756 = t825 * t776;
t651 = -t670 * t822 + t756;
t671 = (t760 * t816 - t762 * t813) * t939;
t870 = t651 * t823 + t671 * t826;
t604 = t681 * t826 - t682 * t823;
t605 = t681 * t823 + t682 * t826;
t705 = t714 - t971;
t783 = -t803 + t805;
t869 = t705 * t823 + t783 * t826;
t748 = t861 * t818;
t863 = t748 * t817 + t780 * t814;
t694 = t748 * t814 - t780 * t817;
t767 = t940 * t933;
t860 = -qJDD(3) * t826 + t767 * t823;
t856 = (-t699 * t815 - t700 * t818) * pkin(7);
t735 = -t810 * t933 + t822 * t851;
t850 = t735 * t823 - t902;
t736 = -t809 * t933 + t756;
t849 = t736 * t823 + t902;
t353 = -pkin(5) * t505 + pkin(9) * t358;
t307 = pkin(4) * t505 + pkin(9) * t958 - t331 * t981 - t816 * t353;
t311 = pkin(4) * t330 + pkin(5) * t357 - qJ(4) * t331;
t325 = -t330 * t825 + t505 * t822;
t296 = -pkin(8) * t325 - t307 * t822 + t311 * t825;
t301 = -pkin(2) * t325 + pkin(9) * t978 - qJ(4) * t505 + t330 * t981 + t813 * t353;
t313 = t326 * t826 + t331 * t823;
t848 = pkin(7) * t313 + t296 * t823 + t301 * t826;
t349 = -pkin(5) * t583 + pkin(9) * t486 + t358;
t352 = -pkin(9) * t880 - t357;
t315 = pkin(4) * t583 - t816 * t349 - t813 * t352 - t416 * t981;
t360 = pkin(4) * t414 + pkin(5) * t880 - qJ(4) * t416;
t395 = -t414 * t825 + t583 * t822;
t312 = -pkin(8) * t395 - t315 * t822 + t360 * t825;
t314 = -pkin(2) * t395 - qJ(4) * t583 + t813 * t349 - t816 * t352 + t414 * t981;
t366 = t396 * t826 + t416 * t823;
t847 = pkin(7) * t366 + t312 * t823 + t314 * t826;
t419 = -pkin(5) * t555 + pkin(9) * t516 - t948;
t444 = -pkin(9) * t873 + t951;
t351 = pkin(4) * t555 - t816 * t419 - t813 * t444 - t464 * t981;
t354 = pkin(4) * t463 + pkin(5) * t873 - qJ(4) * t464 - t389;
t424 = -t463 * t825 + t555 * t822;
t318 = -pkin(8) * t424 - t351 * t822 + t354 * t825;
t334 = -pkin(2) * t424 - qJ(4) * t555 + t813 * t419 - t816 * t444 + t463 * t981;
t385 = t425 * t826 + t464 * t823;
t846 = pkin(7) * t385 + t318 * t823 + t334 * t826;
t423 = -pkin(5) * t558 + pkin(9) * t529 + t951;
t455 = pkin(9) * t874 + t948;
t355 = pkin(4) * t558 - t816 * t423 - t813 * t455 - t473 * t981;
t359 = pkin(4) * t472 - pkin(5) * t874 - qJ(4) * t473 - t390;
t431 = -t472 * t825 + t558 * t822;
t321 = -pkin(8) * t431 - t355 * t822 + t359 * t825;
t342 = -pkin(2) * t431 - qJ(4) * t558 + t813 * t423 - t816 * t455 + t472 * t981;
t388 = t432 * t826 + t473 * t823;
t845 = pkin(7) * t388 + t321 * t823 + t342 * t826;
t364 = pkin(4) * t539 - t412 * t981;
t370 = pkin(4) * t411 - qJ(4) * t412;
t391 = -t411 * t825 + t539 * t822;
t324 = -pkin(8) * t391 - t364 * t822 + t370 * t825;
t341 = -pkin(2) * t391 - qJ(4) * t539 + t411 * t981;
t363 = t392 * t826 + t412 * t823;
t844 = pkin(7) * t363 + t324 * t823 + t341 * t826;
t386 = pkin(4) * t673 - t601 * t981 - t412;
t514 = pkin(4) * t598 - qJ(4) * t601;
t530 = -t598 * t825 + t673 * t822;
t372 = -pkin(8) * t530 - t386 * t822 + t514 * t825;
t379 = -pkin(2) * t530 - qJ(4) * t673 + t598 * t981 + t411;
t491 = t531 * t826 + t601 * t823;
t843 = pkin(7) * t491 + t372 * t823 + t379 * t826;
t429 = pkin(4) * t613 - qJ(4) * t614 + t988;
t462 = pkin(4) * t675 - t614 * t981 + t952;
t561 = -t613 * t825 + t675 * t822;
t381 = -pkin(8) * t561 + t429 * t825 - t462 * t822;
t426 = -pkin(2) * t561 - qJ(4) * t675 + t613 * t981 - t956;
t496 = t562 * t826 + t614 * t823;
t842 = pkin(7) * t496 + t381 * t823 + t426 * t826;
t433 = pkin(4) * t644 - qJ(4) * t647 - t475;
t466 = pkin(4) * t678 - t647 * t981 - t956;
t571 = -t644 * t825 + t678 * t822;
t382 = -pkin(8) * t571 + t433 * t825 - t466 * t822;
t430 = -pkin(2) * t571 - qJ(4) * t678 + t644 * t981 - t952;
t508 = t576 * t826 + t647 * t823;
t841 = pkin(7) * t508 + t382 * t823 + t430 * t826;
t503 = t586 * t822 - t825 * t858;
t435 = -pkin(2) * t503 + pkin(3) * t858 - qJ(4) * t586;
t442 = -pkin(8) * t503 + t590 * t898;
t471 = t504 * t826 + t590 * t823;
t840 = pkin(7) * t471 + t435 * t826 + t442 * t823;
t829 = t939 * t985 + t831;
t582 = (-t777 + t912) * pkin(3) + t829;
t522 = -qJ(4) * t714 - t582 * t822 + t1011;
t525 = pkin(3) * t786 + qJ(4) * t793 + t1012 - t858;
t839 = t522 * t823 + t525 * t826 + t1018;
t581 = -pkin(3) * t912 + qJ(4) * t775 - t829;
t523 = -pkin(3) * t971 + t581 * t825 - t1003;
t524 = -t1004 + pkin(3) * t791 - 0.2e1 * t932 + (-qJDD(3) - t787) * qJ(4) + t987;
t838 = t523 * t823 + t524 * t826 + t1024;
t587 = t627 - t1012;
t625 = t974 - t1011;
t837 = t587 * t826 + t625 * t823 - t1018;
t588 = t628 + t1004;
t626 = t973 + t1003;
t836 = t588 * t826 + t626 * t823 - t1024;
t502 = t521 * t826 + t661 * t823;
t833 = pkin(7) * t502 - (-pkin(2) * t826 - pkin(8) * t823) * t520;
t755 = t822 * t776;
t749 = t780 * t818;
t747 = t780 * t815;
t746 = t861 * t815;
t737 = qJDD(3) * t823 + t767 * t826;
t715 = t822 * t911 + t755;
t709 = t860 * t818;
t708 = t860 * t815;
t704 = t775 * t825 + t777 * t822;
t695 = -t749 * t814 - t817 * t861;
t693 = t749 * t817 - t814 * t861;
t688 = t736 * t826 - t903;
t687 = t735 * t826 + t903;
t656 = t705 * t826 - t783 * t823;
t653 = -t709 * t814 + t737 * t817;
t652 = t709 * t817 + t737 * t814;
t650 = t670 * t825 + t755;
t649 = -t945 + (t746 * t815 + t748 * t818) * pkin(7);
t648 = -t949 + (-t747 * t815 - t749 * t818) * pkin(7);
t640 = -t700 * t814 + t707 * t817;
t638 = -t815 * t715 + t818 * t849;
t637 = -t815 * t714 + t818 * t850;
t636 = t818 * t715 + t815 * t849;
t635 = t818 * t714 + t815 * t850;
t629 = qJ(1) * t640;
t610 = t660 * t825 + t923;
t609 = t657 * t825 - t923;
t597 = -t815 * t704 + t818 * t869;
t596 = t818 * t704 + t815 * t869;
t595 = pkin(2) * t777 - t1002 - t973;
t594 = -pkin(2) * t775 - t1010 + t974;
t591 = t605 * t818;
t585 = -pkin(1) * t747 + t815 * t681 + t818 * t896;
t584 = pkin(1) * t746 + t815 * t682 + t818 * t897;
t579 = t651 * t826 - t671 * t823;
t574 = -t638 * t814 + t688 * t817;
t573 = -t637 * t814 + t687 * t817;
t572 = t825 * t642 + t822 * t859;
t570 = t645 * t825 + t822 * t835;
t569 = t638 * t817 + t688 * t814;
t568 = t637 * t817 + t687 * t814;
t567 = -t604 * t818 + t815 * t741;
t566 = -t604 * t815 - t818 * t741;
t564 = t599 * t825 + t706 * t822;
t533 = t612 * t826 - t658 * t823;
t532 = t611 * t826 - t659 * t823;
t527 = -t597 * t814 + t656 * t817;
t526 = t597 * t817 + t656 * t814;
t518 = t1010 + t822 * t581 + (pkin(2) + t984) * t775;
t517 = t1002 + t825 * t582 + (-pkin(2) - t979) * t777;
t513 = t521 + t941;
t512 = -t815 * t650 + t818 * t870;
t509 = t577 * t826 - t646 * t823;
t507 = t575 * t826 - t643 * t823;
t506 = -pkin(2) * t661 + pkin(8) * t521;
t500 = t511 * t825 + t764 * t822;
t499 = -pkin(1) * t566 + t605 * t982;
t498 = -t567 * t814 + t605 * t817;
t497 = t567 * t817 + t605 * t814;
t495 = t565 * t826 - t600 * t823;
t494 = -t815 * t610 + t818 * t871;
t493 = -t815 * t609 + t818 * t872;
t490 = t826 * t520 + t856;
t489 = (-t566 * t815 - t567 * t818) * pkin(7);
t488 = t578 * t825 + t580 * t822 + t941;
t470 = -t815 * t572 + t818 * t875;
t469 = -t815 * t571 + t818 * t876;
t468 = -t815 * t570 + t818 * t877;
t467 = t818 * t571 + t815 * t876;
t465 = t826 * t492 - t823 * t772 + t856;
t460 = -t823 * t588 + t826 * t626 + t1038;
t459 = -t823 * t587 + t826 * t625 + t1033;
t458 = -t815 * t564 + t818 * t878;
t457 = -t815 * t561 + t818 * t879;
t456 = t818 * t561 + t815 * t879;
t452 = t479 * t825 + t925;
t451 = t477 * t825 - t925;
t448 = t520 * t815 + t818 * t882;
t447 = -t520 * t818 + t815 * t882;
t446 = -t815 * t530 + t818 * t881;
t445 = t818 * t530 + t815 * t881;
t443 = t501 * t826 - t510 * t823;
t441 = -t815 * t594 + t818 * t836 + t1035;
t440 = -t815 * t595 + t818 * t837 + t1029;
t437 = t482 * t825 + t560 * t822;
t436 = t483 * t825 + t822 * t834;
t434 = -t513 * t815 + t818 * t977 + t910;
t428 = t826 * t522 - t823 * t525 - t1033;
t427 = t826 * t523 - t823 * t524 - t1038;
t422 = pkin(8) * t504 + (-pkin(2) + t899) * t590;
t421 = -t469 * t814 + t508 * t817;
t420 = t469 * t817 + t508 * t814;
t418 = -t815 * t503 + t818 * t883;
t417 = t818 * t503 + t815 * t883;
t410 = -t457 * t814 + t496 * t817;
t409 = t457 * t817 + t496 * t814;
t408 = -t815 * t488 + t818 * t885 + t910;
t407 = -t448 * t814 + t502 * t817;
t406 = t448 * t817 + t502 * t814;
t405 = -t815 * t517 + t818 * t839 - t1029;
t404 = -t815 * t518 + t818 * t838 - t1035;
t402 = t415 * t825 + t630 * t822;
t401 = -t446 * t814 + t491 * t817;
t400 = t446 * t817 + t491 * t814;
t399 = -t815 * t500 + t818 * t884;
t398 = t454 * t826 - t478 * t823;
t397 = t453 * t826 - t476 * t823;
t394 = t439 * t826 - t480 * t823;
t393 = t438 * t826 - t481 * t823;
t384 = -t418 * t814 + t471 * t817;
t383 = t418 * t817 + t471 * t814;
t380 = -pkin(2) * t647 + pkin(8) * t576 + t433 * t822 + t466 * t825;
t378 = -t815 * t452 + t818 * t886;
t377 = -t815 * t451 + t818 * t887;
t376 = -pkin(2) * t614 + pkin(8) * t562 + t429 * t822 + t462 * t825;
t375 = -(pkin(2) * t823 - pkin(8) * t826) * t520 + (-t447 * t815 - t448 * t818) * pkin(7);
t374 = -t815 * t437 + t818 * t888;
t373 = -t815 * t436 + t818 * t889;
t371 = -pkin(1) * t447 - t815 * t506 + t818 * t833;
t369 = -t815 * t431 + t818 * t890;
t368 = t818 * t431 + t815 * t890;
t367 = t403 * t826 - t413 * t823;
t365 = -pkin(2) * t601 + pkin(8) * t531 + t386 * t825 + t514 * t822;
t362 = -t815 * t424 + t818 * t891;
t361 = t818 * t424 + t815 * t891;
t350 = -t815 * t402 + t818 * t892;
t348 = -t815 * t395 + t818 * t893;
t347 = t818 * t395 + t815 * t893;
t346 = -t369 * t814 + t388 * t817;
t345 = t369 * t817 + t388 * t814;
t344 = -t823 * t435 + t826 * t442 + (-t417 * t815 - t418 * t818) * pkin(7);
t343 = t826 * t382 - t823 * t430 + (-t467 * t815 - t469 * t818) * pkin(7);
t340 = -t815 * t391 + t818 * t894;
t339 = t818 * t391 + t815 * t894;
t338 = t826 * t381 - t823 * t426 + (-t456 * t815 - t457 * t818) * pkin(7);
t337 = -t362 * t814 + t385 * t817;
t336 = t362 * t817 + t385 * t814;
t335 = -pkin(1) * t417 - t815 * t422 + t818 * t840;
t333 = -pkin(1) * t467 - t815 * t380 + t818 * t841;
t332 = t826 * t372 - t823 * t379 + (-t445 * t815 - t446 * t818) * pkin(7);
t329 = -pkin(1) * t456 - t815 * t376 + t818 * t842;
t328 = -t348 * t814 + t366 * t817;
t327 = t348 * t817 + t366 * t814;
t323 = -t340 * t814 + t363 * t817;
t322 = t340 * t817 + t363 * t814;
t320 = -pkin(2) * t473 + pkin(8) * t432 + t355 * t825 + t359 * t822;
t319 = -pkin(2) * t412 + pkin(8) * t392 + t364 * t825 + t370 * t822;
t317 = -pkin(1) * t445 - t815 * t365 + t818 * t843;
t316 = -pkin(2) * t464 + pkin(8) * t425 + t351 * t825 + t354 * t822;
t310 = -pkin(2) * t416 + pkin(8) * t396 + t315 * t825 + t360 * t822;
t309 = t826 * t321 - t823 * t342 + (-t368 * t815 - t369 * t818) * pkin(7);
t308 = t826 * t318 - t823 * t334 + (-t361 * t815 - t362 * t818) * pkin(7);
t306 = -t815 * t325 + t818 * t895;
t305 = t818 * t325 + t815 * t895;
t304 = t826 * t324 - t823 * t341 + (-t339 * t815 - t340 * t818) * pkin(7);
t303 = -pkin(1) * t368 - t815 * t320 + t818 * t845;
t302 = -pkin(1) * t339 - t815 * t319 + t818 * t844;
t300 = -pkin(1) * t361 - t815 * t316 + t818 * t846;
t299 = -t306 * t814 + t313 * t817;
t298 = t306 * t817 + t313 * t814;
t297 = t826 * t312 - t823 * t314 + (-t347 * t815 - t348 * t818) * pkin(7);
t295 = -pkin(2) * t331 + pkin(8) * t326 + t307 * t825 + t311 * t822;
t294 = -pkin(1) * t347 - t815 * t310 + t818 * t847;
t293 = t826 * t296 - t823 * t301 + (-t305 * t815 - t306 * t818) * pkin(7);
t292 = -pkin(1) * t305 - t815 * t295 + t818 * t848;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, 0, 0, 0, 0, 0, t695, t694, 0, t498, 0, 0, 0, 0, 0, 0, t551, t554, t640, t407, 0, 0, 0, 0, 0, 0, t640, -t551, -t554, t384, 0, 0, 0, 0, 0, 0, t410, t421, t401, t323, 0, 0, 0, 0, 0, 0, t337, t346, t328, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t693, -t863, 0, t497, 0, 0, 0, 0, 0, 0, -t548, -t549, t639, t406, 0, 0, 0, 0, 0, 0, t639, t548, t549, t383, 0, 0, 0, 0, 0, 0, t409, t420, t400, t322, 0, 0, 0, 0, 0, 0, t336, t345, t327, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t944, 0, 0, 0, 0, 0, 0, t747, -t746, 0, t566, 0, 0, 0, 0, 0, 0, -t616, -t617, t699, t447, 0, 0, 0, 0, 0, 0, t699, t616, t617, t417, 0, 0, 0, 0, 0, 0, t456, t467, t445, t339, 0, 0, 0, 0, 0, 0, t361, t368, t347, t305; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t992, -t991, -t710, -qJ(1) * t710, 0, 0, -t694, 0, t695, t814 * t931, -qJ(1) * t693 - t585 * t814 + t648 * t817, qJ(1) * t863 - t584 * t814 + t649 * t817, -t591 * t814 + t604 * t817, -qJ(1) * t497 + t489 * t817 - t499 * t814, t574, t527, -t1032, t573, t1027, t653, -t440 * t814 + t459 * t817 + t1037, -t441 * t814 + t460 * t817 + t1040, -t434 * t814 + t490 * t817 - t980, -qJ(1) * t406 - t371 * t814 + t375 * t817, t653, t1032, -t1027, t574, t527, t573, -t408 * t814 + t465 * t817 - t980, -t405 * t814 + t428 * t817 - t1037, -t404 * t814 + t427 * t817 - t1040, -qJ(1) * t383 - t335 * t814 + t344 * t817, -t494 * t814 + t533 * t817, -t458 * t814 + t495 * t817, -t470 * t814 + t509 * t817, -t493 * t814 + t532 * t817, -t468 * t814 + t507 * t817, -t512 * t814 + t579 * t817, -qJ(1) * t409 - t329 * t814 + t338 * t817, -qJ(1) * t420 - t333 * t814 + t343 * t817, -qJ(1) * t400 - t317 * t814 + t332 * t817, -qJ(1) * t322 - t302 * t814 + t304 * t817, -t378 * t814 + t398 * t817, -t350 * t814 + t367 * t817, -t374 * t814 + t394 * t817, -t377 * t814 + t397 * t817, -t373 * t814 + t393 * t817, -t399 * t814 + t443 * t817, -qJ(1) * t336 - t300 * t814 + t308 * t817, -qJ(1) * t345 - t303 * t814 + t309 * t817, -qJ(1) * t327 - t294 * t814 + t297 * t817, -qJ(1) * t298 - t292 * t814 + t293 * t817; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t991, -t992, t711, qJ(1) * t711, 0, 0, t863, 0, t693, -t817 * t931, qJ(1) * t695 + t585 * t817 + t648 * t814, qJ(1) * t694 + t584 * t817 + t649 * t814, t591 * t817 + t604 * t814, qJ(1) * t498 + t489 * t814 + t499 * t817, t569, t526, t1031, t568, -t1026, t652, t440 * t817 + t459 * t814 + t1036, t441 * t817 + t460 * t814 + t1039, t434 * t817 + t490 * t814 + t629, qJ(1) * t407 + t371 * t817 + t375 * t814, t652, -t1031, t1026, t569, t526, t568, t408 * t817 + t465 * t814 + t629, t405 * t817 + t428 * t814 - t1036, t404 * t817 + t427 * t814 - t1039, qJ(1) * t384 + t335 * t817 + t344 * t814, t494 * t817 + t533 * t814, t458 * t817 + t495 * t814, t470 * t817 + t509 * t814, t493 * t817 + t532 * t814, t468 * t817 + t507 * t814, t512 * t817 + t579 * t814, qJ(1) * t410 + t329 * t817 + t338 * t814, qJ(1) * t421 + t333 * t817 + t343 * t814, qJ(1) * t401 + t317 * t817 + t332 * t814, qJ(1) * t323 + t302 * t817 + t304 * t814, t378 * t817 + t398 * t814, t350 * t817 + t367 * t814, t374 * t817 + t394 * t814, t377 * t817 + t397 * t814, t373 * t817 + t393 * t814, t399 * t817 + t443 * t814, qJ(1) * t337 + t300 * t817 + t308 * t814, qJ(1) * t346 + t303 * t817 + t309 * t814, qJ(1) * t328 + t294 * t817 + t297 * t814, qJ(1) * t299 + t292 * t817 + t293 * t814; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t909, t784, 0, 0, 0, 0, t746, 0, t747, t818 * qJDD(2), pkin(1) * t749 - t818 * t681 + t815 * t896, -pkin(1) * t748 - t818 * t682 + t815 * t897, t605 * t815, pkin(1) * t567 + t605 * t983, t636, t596, t1019, t635, -t1013, t708, t818 * t595 + t815 * t837 - t1028, t818 * t594 + t815 * t836 - t1034, t513 * t818 + t815 * t977 + t942, pkin(1) * t448 + t818 * t506 + t815 * t833, t708, -t1019, t1013, t636, t596, t635, t818 * t488 + t815 * t885 + t942, t818 * t517 + t815 * t839 + t1028, t818 * t518 + t815 * t838 + t1034, pkin(1) * t418 + t818 * t422 + t815 * t840, t818 * t610 + t815 * t871, t818 * t564 + t815 * t878, t818 * t572 + t815 * t875, t818 * t609 + t815 * t872, t818 * t570 + t815 * t877, t818 * t650 + t815 * t870, pkin(1) * t457 + t818 * t376 + t815 * t842, pkin(1) * t469 + t818 * t380 + t815 * t841, pkin(1) * t446 + t818 * t365 + t815 * t843, pkin(1) * t340 + t818 * t319 + t815 * t844, t818 * t452 + t815 * t886, t818 * t402 + t815 * t892, t818 * t437 + t815 * t888, t818 * t451 + t815 * t887, t818 * t436 + t815 * t889, t818 * t500 + t815 * t884, pkin(1) * t362 + t818 * t316 + t815 * t846, pkin(1) * t369 + t818 * t320 + t815 * t845, pkin(1) * t348 + t818 * t310 + t815 * t847, pkin(1) * t306 + t818 * t295 + t815 * t848;];
tauB_reg  = t1;
