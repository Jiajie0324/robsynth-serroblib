% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPPR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:21:12
% EndTime: 2019-03-08 21:21:24
% DurationCPUTime: 6.62s
% Computational Cost: add. (5964->590), mult. (13360->783), div. (0->0), fcn. (9869->14), ass. (0->292)
t223 = cos(qJ(3));
t323 = qJD(3) * t223;
t383 = pkin(4) + pkin(8);
t154 = t383 * t323;
t213 = sin(pkin(11));
t215 = cos(pkin(11));
t221 = sin(qJ(2));
t214 = sin(pkin(6));
t333 = qJD(1) * t214;
t220 = sin(qJ(3));
t224 = cos(qJ(2));
t344 = t220 * t224;
t324 = qJD(3) * t220;
t198 = pkin(3) * t324;
t359 = qJ(4) * t223;
t262 = qJ(5) * t220 - t359;
t322 = qJD(4) * t220;
t233 = qJD(3) * t262 - qJD(5) * t223 - t322;
t88 = t198 + t233;
t372 = t215 * t154 - t213 * t88 - (-t213 * t221 + t215 * t344) * t333;
t371 = t213 * t154 + t215 * t88 - (t213 * t344 + t215 * t221) * t333;
t319 = t213 * qJD(3);
t327 = qJD(2) * t223;
t143 = t215 * t327 + t319;
t299 = t213 * t327;
t326 = qJD(3) * t215;
t145 = -t299 + t326;
t219 = sin(qJ(6));
t222 = cos(qJ(6));
t61 = t143 * t219 - t145 * t222;
t405 = t61 ^ 2;
t62 = t222 * t143 + t145 * t219;
t404 = t62 ^ 2;
t349 = t213 * t220;
t255 = pkin(5) * t223 - pkin(9) * t349;
t403 = qJD(3) * t255 + t372;
t402 = pkin(9) * t215 * t324 + t371;
t329 = qJD(2) * t220;
t190 = qJD(6) + t329;
t401 = t190 * t61;
t400 = t190 * t62;
t148 = t213 * t222 + t215 * t219;
t132 = t148 * qJD(6);
t245 = t148 * t220;
t337 = qJD(2) * t245 + t132;
t318 = qJD(1) * qJD(2);
t297 = t224 * t318;
t216 = cos(pkin(6));
t325 = qJD(3) * t216;
t399 = qJDD(2) * pkin(8) + (qJDD(1) * t221 + t297) * t214 + qJD(1) * t325;
t307 = t221 * t333;
t157 = qJD(2) * pkin(8) + t307;
t332 = qJD(1) * t223;
t184 = t216 * t332;
t101 = t157 * t220 - t184;
t398 = -qJD(4) - t101;
t345 = t216 * t220;
t348 = t214 * t221;
t137 = t223 * t348 + t345;
t226 = qJD(2) ^ 2;
t256 = qJDD(2) * t224 - t221 * t226;
t317 = qJD(2) * qJD(3);
t293 = t224 * t317;
t347 = t214 * t224;
t302 = qJD(2) * t347;
t310 = t220 * t348;
t83 = -qJD(3) * t310 + (t302 + t325) * t223;
t397 = qJD(3) * t83 + qJDD(3) * t137 + t214 * (t220 * t256 + t223 * t293);
t136 = -t216 * t223 + t310;
t84 = qJD(3) * t137 + t220 * t302;
t396 = -qJD(3) * t84 - qJDD(3) * t136 + t214 * (-t220 * t293 + t223 * t256);
t90 = -qJD(3) * pkin(3) - t398;
t102 = qJD(1) * t345 + t157 * t223;
t92 = -qJD(3) * qJ(4) - t102;
t395 = qJD(4) - t184;
t331 = qJD(1) * t224;
t306 = t214 * t331;
t360 = qJ(4) * t220;
t291 = -pkin(2) - t360;
t159 = -pkin(3) * t223 + t291;
t330 = qJD(2) * t159;
t104 = -t306 + t330;
t394 = t104 * t329 + qJDD(4);
t316 = qJDD(1) * t216;
t275 = t157 * t323 + t220 * t399 - t223 * t316;
t276 = t157 * t324 - t220 * t316 - t223 * t399;
t393 = (t101 * t223 - t102 * t220) * qJD(3) + t275 * t220 - t276 * t223;
t208 = qJDD(3) * qJ(4);
t209 = qJD(3) * qJD(4);
t34 = -t208 - t209 + t276;
t263 = qJDD(4) + t275;
t357 = qJDD(3) * pkin(3);
t36 = t263 - t357;
t392 = (t220 * t92 + t223 * t90) * qJD(3) + t36 * t220 - t34 * t223;
t295 = t220 * t317;
t311 = t223 * qJDD(2);
t180 = t215 * t311;
t336 = t213 * qJDD(3) + t180;
t105 = -t215 * t295 + t336;
t177 = t213 * t311;
t274 = qJDD(3) * t215 - t177;
t106 = t213 * t295 + t274;
t320 = qJD(6) * t222;
t321 = qJD(6) * t219;
t20 = t219 * t105 - t222 * t106 + t143 * t320 + t145 * t321;
t260 = t213 * t219 - t215 * t222;
t391 = t20 * t260 + t337 * t61;
t21 = -qJD(6) * t61 + t222 * t105 + t106 * t219;
t301 = t215 * t329;
t304 = t213 * t329;
t338 = t213 * t321 - t215 * t320 + t219 * t304 - t222 * t301;
t390 = t148 * t21 - t338 * t62;
t298 = t221 * t318;
t265 = -qJDD(1) * t347 + t214 * t298;
t358 = qJDD(2) * pkin(2);
t110 = t265 - t358;
t362 = sin(pkin(10));
t284 = t362 * t221;
t363 = cos(pkin(10));
t285 = t363 * t224;
t128 = -t216 * t285 + t284;
t283 = t362 * t224;
t286 = t363 * t221;
t130 = t216 * t283 + t286;
t269 = g(1) * t130 + g(2) * t128;
t225 = qJD(3) ^ 2;
t379 = pkin(8) * t225;
t389 = t214 * (-g(3) * t224 + t298) - t110 + t269 + t358 - t379;
t218 = -pkin(3) - qJ(5);
t197 = pkin(4) * t327;
t66 = qJD(5) + t197 - t92;
t387 = -t218 * t323 + (qJD(5) - t66) * t220;
t249 = -qJ(4) * t323 - t322;
t125 = t198 + t249;
t240 = g(3) * t347 - t269;
t315 = qJDD(2) * t159;
t252 = pkin(3) * t295 + t265;
t45 = qJD(2) * t249 + t252 + t315;
t385 = qJD(2) * (-t125 + t307) - t240 - t315 - t379 - t45;
t341 = (pkin(4) * qJD(2) + t157) * t220 + t395;
t294 = t223 * t317;
t312 = t220 * qJDD(2);
t243 = t294 + t312;
t25 = pkin(4) * t243 - qJD(3) * qJD(5) + qJDD(3) * t218 + t263;
t140 = t218 * t223 + t291;
t30 = qJD(2) * t233 + qJDD(2) * t140 + t252;
t12 = -t213 * t30 + t215 * t25;
t6 = pkin(5) * t243 - pkin(9) * t106 + t12;
t13 = t213 * t25 + t215 * t30;
t9 = -pkin(9) * t105 + t13;
t267 = t219 * t6 + t222 * t9;
t60 = qJD(3) * t218 + t341;
t85 = qJD(2) * t140 - t306;
t28 = -t213 * t85 + t215 * t60;
t17 = pkin(5) * t329 - pkin(9) * t145 + t28;
t29 = t213 * t60 + t215 * t85;
t22 = -pkin(9) * t143 + t29;
t7 = t17 * t222 - t219 * t22;
t1 = t7 * qJD(6) + t267;
t8 = t17 * t219 + t22 * t222;
t2 = -qJD(6) * t8 - t219 * t9 + t222 * t6;
t129 = t216 * t286 + t283;
t288 = t214 * t363;
t79 = t129 * t220 + t223 * t288;
t131 = -t216 * t284 + t285;
t287 = t214 * t362;
t81 = t131 * t220 - t223 * t287;
t247 = g(1) * t81 + g(2) * t79 + g(3) * t136;
t384 = t1 * t148 - t2 * t260 - t337 * t7 - t338 * t8 - t247;
t171 = t383 * t220;
t151 = t215 * t171;
t53 = pkin(5) * t220 + t151 + (pkin(9) * t223 - t140) * t213;
t346 = t215 * t223;
t71 = t215 * t140 + t213 * t171;
t58 = -pkin(9) * t346 + t71;
t18 = -t219 * t58 + t222 * t53;
t382 = qJD(6) * t18 + t219 * t403 + t222 * t402;
t19 = t219 * t53 + t222 * t58;
t381 = -qJD(6) * t19 - t219 * t402 + t222 * t403;
t380 = pkin(5) * t105;
t378 = g(3) * t221;
t377 = t61 * t62;
t193 = pkin(5) * t215 + pkin(4);
t376 = pkin(8) + t193;
t375 = -pkin(9) + t218;
t199 = pkin(3) * t329;
t120 = qJD(2) * t262 + t199;
t87 = t102 + t197;
t43 = -t120 * t213 + t215 * t87;
t31 = qJD(2) * t255 + t43;
t44 = t215 * t120 + t213 * t87;
t35 = pkin(9) * t301 + t44;
t155 = t375 * t213;
t156 = t375 * t215;
t75 = -t155 * t219 + t156 * t222;
t374 = -qJD(5) * t148 + qJD(6) * t75 - t219 * t31 - t222 * t35;
t76 = t155 * t222 + t156 * t219;
t373 = qJD(5) * t260 - qJD(6) * t76 + t219 * t35 - t222 * t31;
t370 = qJD(2) * pkin(2);
t361 = pkin(8) * qJDD(3);
t356 = t105 * t213;
t355 = t106 * t215;
t354 = t128 * t223;
t353 = t130 * t223;
t207 = pkin(11) + qJ(6);
t202 = sin(t207);
t352 = t202 * t220;
t203 = cos(t207);
t351 = t203 * t220;
t211 = t220 ^ 2;
t350 = t211 * t226;
t343 = t223 * t224;
t342 = -(-qJD(2) * t193 - t157) * t220 + t395;
t339 = qJDD(1) - g(3);
t335 = pkin(2) * t347 + pkin(8) * t348;
t172 = t383 * t223;
t212 = t223 ^ 2;
t334 = t211 - t212;
t328 = qJD(2) * t221;
t314 = qJDD(2) * t211;
t313 = qJDD(2) * t212;
t122 = t128 * pkin(2);
t309 = -pkin(3) * t354 - t128 * t360 - t122;
t123 = t130 * pkin(2);
t308 = -pkin(3) * t353 - t130 * t360 - t123;
t305 = t223 * t331;
t303 = t214 * t328;
t292 = t213 * t312;
t179 = t215 * t312;
t191 = pkin(5) * t213 + qJ(4);
t73 = t79 * pkin(3);
t80 = t129 * t223 - t220 * t288;
t290 = qJ(4) * t80 - t73;
t74 = t81 * pkin(3);
t82 = t131 * t223 + t220 * t287;
t289 = qJ(4) * t82 - t74;
t124 = t136 * pkin(3);
t279 = qJ(4) * t137 - t124;
t278 = qJD(2) * t334;
t277 = -t143 + t319;
t273 = t220 * t294;
t147 = qJDD(6) + t243;
t270 = -t260 * t147 - t190 * t337;
t268 = g(1) * t131 + g(2) * t129;
t264 = t12 * t215 + t13 * t213;
t77 = t136 * t215 + t213 * t347;
t78 = t136 * t213 - t215 * t347;
t32 = -t219 * t78 + t222 * t77;
t33 = t219 * t77 + t222 * t78;
t261 = t143 * t213 - t145 * t215;
t259 = g(3) * (t335 + (pkin(3) * t343 + qJ(4) * t344) * t214);
t254 = -t213 * t350 + t215 * t294 + t179;
t217 = -pkin(9) - qJ(5);
t253 = pkin(5) * t349 - t217 * t223;
t250 = (-t213 * t28 + t215 * t29) * t220;
t246 = -g(1) * t82 - g(2) * t80 - g(3) * t137;
t117 = t260 * t223;
t244 = -t147 * t148 + t190 * t338;
t241 = -t215 * t350 - t292;
t26 = qJDD(5) - t34 + (-t295 + t311) * pkin(4);
t228 = t246 + t26;
t239 = g(3) * t348 - t223 * t26 + t268;
t237 = t247 - t275;
t158 = -t306 - t370;
t235 = -t361 + (t158 + t306 - t370) * qJD(3);
t234 = t361 + (-t104 - t306 - t330) * qJD(3);
t232 = qJD(3) * t101 + t246 - t276;
t231 = qJD(3) * t102 + t237;
t229 = (-t378 + (-t211 - t212) * t297) * t214 - t268 + (t314 + t313) * pkin(8);
t227 = (t136 * t220 + t137 * t223) * qJDD(2) + (t220 * t84 + t223 * t83 + (t136 * t223 - t137 * t220) * qJD(3)) * qJD(2);
t186 = t220 * t226 * t223;
t164 = t334 * t226;
t161 = qJDD(3) * t223 - t220 * t225;
t160 = qJDD(3) * t220 + t223 * t225;
t153 = t383 * t324;
t152 = -qJ(4) * t327 + t199;
t142 = -0.2e1 * t273 + t313;
t141 = 0.2e1 * t273 + t314;
t127 = pkin(5) * t346 + t172;
t118 = t148 * t223;
t114 = t376 * t324;
t103 = 0.2e1 * t220 * t311 - 0.2e1 * t317 * t334;
t70 = -t140 * t213 + t151;
t55 = t132 * t223 - t260 * t324;
t54 = qJD(3) * t245 + qJD(6) * t117;
t52 = t213 * t84 + t215 * t303;
t51 = -t213 * t303 + t215 * t84;
t48 = pkin(5) * t143 + t66;
t16 = t26 + t380;
t11 = -qJD(6) * t33 - t219 * t52 + t222 * t51;
t10 = qJD(6) * t32 + t219 * t51 + t222 * t52;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t339, 0, 0, 0, 0, 0, 0, t256 * t214 (-qJDD(2) * t221 - t224 * t226) * t214, 0, -g(3) + (t216 ^ 2 + (t221 ^ 2 + t224 ^ 2) * t214 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t396, -t397, t227, t101 * t84 + t102 * t83 + t136 * t275 - t137 * t276 - g(3) + (-t110 * t224 + t158 * t328) * t214, 0, 0, 0, 0, 0, 0, t227, -t396, t397, t136 * t36 - t137 * t34 - t83 * t92 + t84 * t90 - g(3) + (t104 * t328 - t224 * t45) * t214, 0, 0, 0, 0, 0, 0, t77 * t312 + t105 * t137 + t143 * t83 + (t220 * t51 + t323 * t77) * qJD(2), -t78 * t312 + t106 * t137 + t145 * t83 + (-t220 * t52 - t323 * t78) * qJD(2), -t105 * t78 - t106 * t77 - t143 * t52 - t145 * t51, t12 * t77 + t13 * t78 + t137 * t26 + t28 * t51 + t29 * t52 + t66 * t83 - g(3), 0, 0, 0, 0, 0, 0, t11 * t190 + t137 * t21 + t147 * t32 + t62 * t83, -t10 * t190 - t137 * t20 - t147 * t33 - t61 * t83, -t10 * t62 + t11 * t61 + t20 * t32 - t21 * t33, t1 * t33 + t10 * t8 + t11 * t7 + t137 * t16 + t2 * t32 + t48 * t83 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t339 * t347 + t269, -t339 * t348 + t268, 0, 0, t141, t103, t160, t142, t161, 0, t235 * t220 + t223 * t389, -t220 * t389 + t235 * t223, t229 + t393, -t110 * pkin(2) + g(1) * t123 + g(2) * t122 - g(3) * t335 + (-t158 * t221 + (-t101 * t220 - t102 * t223) * t224) * t333 + (-t268 + t393) * pkin(8), 0, -t160, -t161, t141, t103, t142, t229 + t392, t234 * t220 - t223 * t385, t220 * t385 + t234 * t223, t45 * t159 + t104 * t125 - g(1) * t308 - g(2) * t309 - t259 + (-t104 * t221 + (-t220 * t90 + t223 * t92) * t224) * t333 + (-t268 + t392) * pkin(8) (-t106 * t223 + t145 * t324) * t213 (-t355 + t356) * t223 - t261 * t324 (t106 - t177) * t220 + (t145 * t223 + t213 * t278) * qJD(3) (t105 * t223 - t143 * t324) * t215 (-t105 - t180) * t220 + (-t143 * t223 + t215 * t278) * qJD(3), t141, t172 * t105 - t153 * t143 + (-t143 * t306 + (qJD(2) * t70 + t28) * qJD(3)) * t223 - t239 * t215 + (qJD(2) * t372 + t70 * qJDD(2) - t213 * t240 - t326 * t66 + t12) * t220, t172 * t106 - t153 * t145 + (-t145 * t306 + (-qJD(2) * t71 - t29) * qJD(3)) * t223 + t239 * t213 + (-qJD(2) * t371 - t71 * qJDD(2) - t215 * t240 + t319 * t66 - t13) * t220, -t105 * t71 - t106 * t70 - t372 * t145 - t371 * t143 + qJD(3) * t250 + (t12 * t213 - t13 * t215 - t240) * t223, t13 * t71 + t12 * t70 + t26 * t172 - t66 * t153 - g(1) * (-qJ(5) * t353 + t131 * t383 + t308) - g(2) * (-qJ(5) * t354 + t129 * t383 + t309) - t259 + t371 * t29 + t372 * t28 + (-t66 * t305 - g(3) * (pkin(4) * t221 + qJ(5) * t343)) * t214, t118 * t20 - t54 * t61, -t117 * t20 + t118 * t21 - t54 * t62 - t55 * t61, -t118 * t147 + t190 * t54 - t20 * t220 - t323 * t61, -t117 * t21 - t55 * t62, t117 * t147 + t190 * t55 - t21 * t220 - t323 * t62, t147 * t220 + t190 * t323, t18 * t147 + t2 * t220 + t7 * t323 - t114 * t62 + t127 * t21 - t16 * t117 - t48 * t55 - g(1) * (-t130 * t352 + t131 * t203) - g(2) * (-t128 * t352 + t129 * t203) + t381 * t190 + (-t62 * t305 - g(3) * (t202 * t344 + t203 * t221)) * t214, -t19 * t147 - t1 * t220 - t8 * t323 + t114 * t61 - t127 * t20 - t16 * t118 + t48 * t54 - g(1) * (-t130 * t351 - t131 * t202) - g(2) * (-t128 * t351 - t129 * t202) - t382 * t190 + (t61 * t305 - g(3) * (-t202 * t221 + t203 * t344)) * t214, t1 * t117 + t118 * t2 + t18 * t20 - t19 * t21 - t223 * t240 + t381 * t61 - t382 * t62 - t54 * t7 + t55 * t8, t1 * t19 + t2 * t18 + t16 * t127 - t48 * t114 - g(1) * (-t130 * t253 + t131 * t376 + t308) - g(2) * (-t128 * t253 + t129 * t376 + t309) - t259 + t382 * t8 + t381 * t7 + (-t193 * t378 + (-g(3) * t253 - t332 * t48) * t224) * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t186, t164, t312, t186, t311, qJDD(3), -t158 * t329 + t231, -t158 * t327 - t232, 0, 0, qJDD(3), -t312, -t311, -t186, t164, t186 (-pkin(3) * t220 + t359) * qJDD(2), -t152 * t327 - t231 - 0.2e1 * t357 + t394, 0.2e1 * t208 + 0.2e1 * t209 + (t104 * t223 + t152 * t220) * qJD(2) + t232, -t36 * pkin(3) - g(1) * t289 - g(2) * t290 - g(3) * t279 - t34 * qJ(4) - t90 * t102 - t104 * t152 + t398 * t92, -t145 * t304 + t355, -t105 * t215 - t106 * t213 + t261 * t329, -t145 * t327 + t254, t143 * t301 + t356, -t277 * t327 + t241, -t186, t218 * t179 + qJ(4) * t105 + t341 * t143 + t228 * t213 + (-t215 * t387 - t220 * t43 - t28 * t223) * qJD(2), -t218 * t292 + qJ(4) * t106 + t341 * t145 + t228 * t215 + (t213 * t387 + t220 * t44 + t29 * t223) * qJD(2), t143 * t44 + t145 * t43 + (qJD(5) * t145 - t106 * t218 - t29 * t329 - t12) * t215 + (qJD(5) * t143 - t105 * t218 + t28 * t329 - t13) * t213 + t247, t26 * qJ(4) - t29 * t44 - t28 * t43 - g(1) * (-qJ(5) * t81 + t289) - g(2) * (-qJ(5) * t79 + t290) - g(3) * (-qJ(5) * t136 + t279) + t341 * t66 + t264 * t218 + (-t213 * t29 - t215 * t28) * qJD(5), t391, t148 * t20 + t21 * t260 + t337 * t62 - t338 * t61, t327 * t61 + t270, t390, t327 * t62 + t244, -t190 * t327, t147 * t75 + t148 * t16 + t190 * t373 + t191 * t21 + t202 * t246 - t327 * t7 - t338 * t48 + t342 * t62, -t147 * t76 - t16 * t260 - t190 * t374 - t191 * t20 + t203 * t246 + t327 * t8 - t337 * t48 - t342 * t61, t20 * t75 - t21 * t76 + t373 * t61 - t374 * t62 - t384, t1 * t76 + t2 * t75 + t16 * t191 - g(1) * (t191 * t82 + t217 * t81 - t74) - g(2) * (t191 * t80 + t217 * t79 - t73) - g(3) * (t136 * t217 + t137 * t191 - t124) + t374 * t8 + t373 * t7 + t342 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, qJDD(3) + t186, -t225 - t350, qJD(3) * t92 - t237 - t357 + t394, 0, 0, 0, 0, 0, 0, -qJD(3) * t143 + t254 (-t145 - t299) * qJD(3) + t241, -t356 - t355 + (-t143 * t215 + t145 * t213) * t329, qJD(2) * t250 - qJD(3) * t66 - t247 + t264, 0, 0, 0, 0, 0, 0, -qJD(3) * t62 + t270, qJD(3) * t61 + t244, -t390 - t391, -qJD(3) * t48 + t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t145 - t326) * t329 + t336, t277 * t329 + t274, -t143 ^ 2 - t145 ^ 2, t143 * t29 + t145 * t28 + t228, 0, 0, 0, 0, 0, 0, t21 - t401, -t20 - t400, -t404 - t405, -t61 * t7 + t62 * t8 + t228 + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t377, -t404 + t405, -t20 + t400, t377, -t21 - t401, t147, t8 * t190 + t48 * t61 - g(1) * (-t130 * t202 + t203 * t81) - g(2) * (-t128 * t202 + t203 * t79) - g(3) * (t136 * t203 + t202 * t347) + t2, t48 * t62 - g(1) * (-t130 * t203 - t202 * t81) - g(2) * (-t128 * t203 - t202 * t79) - g(3) * (-t136 * t202 + t203 * t347) - t267 + (t190 - qJD(6)) * t7, 0, 0;];
tau_reg  = t3;
