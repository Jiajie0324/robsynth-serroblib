% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPPR5_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR5_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR5_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPPR5_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:21:08
% EndTime: 2019-03-08 21:21:22
% DurationCPUTime: 5.40s
% Computational Cost: add. (2982->435), mult. (7369->635), div. (0->0), fcn. (7801->10), ass. (0->333)
t269 = sin(qJ(3));
t266 = cos(pkin(11));
t271 = cos(qJ(6));
t393 = t271 * t266;
t235 = t269 * t393;
t264 = sin(pkin(11));
t268 = sin(qJ(6));
t401 = t268 * t264;
t207 = t393 - t401;
t289 = t207 * t269;
t399 = t268 * t269;
t337 = t399 / 0.2e1;
t92 = t264 * t337 - t235 / 0.2e1 + t289 / 0.2e1;
t461 = t92 * qJD(6);
t198 = t207 * qJD(6);
t338 = -t401 / 0.2e1;
t439 = t207 / 0.2e1;
t285 = t235 / 0.2e1 + (t338 + t439) * t269;
t451 = t285 * qJD(2);
t460 = -t198 - t451;
t258 = t264 ^ 2;
t259 = t266 ^ 2;
t237 = t258 + t259;
t366 = t207 * qJD(3);
t394 = t271 * t264;
t400 = t268 * t266;
t204 = t394 + t400;
t272 = cos(qJ(3));
t180 = t204 * t272;
t372 = t180 * qJD(2);
t459 = t366 - t372;
t295 = -t394 / 0.2e1 - t400 / 0.2e1;
t441 = t204 / 0.2e1;
t287 = t441 + t295;
t97 = t287 * t272;
t458 = t97 * qJD(2) + t366;
t368 = t204 * qJD(3);
t236 = t272 * t393;
t177 = t272 * t401 - t236;
t376 = t177 * qJD(2);
t457 = t368 - t376;
t438 = t236 / 0.2e1;
t440 = -t207 / 0.2e1;
t96 = t438 + (t338 + t440) * t272;
t456 = t96 * qJD(2) + t368;
t267 = -pkin(3) - qJ(5);
t398 = t269 * qJ(4);
t321 = -t267 * t272 + t398;
t200 = -pkin(2) - t321;
t449 = pkin(4) + pkin(8);
t233 = t449 * t269;
t211 = t266 * t233;
t129 = -t264 * t200 + t211;
t210 = t264 * t233;
t130 = t266 * t200 + t210;
t257 = pkin(3) * t269;
t425 = qJ(4) * t272;
t232 = t257 - t425;
t201 = t269 * qJ(5) + t232;
t255 = t272 * pkin(8);
t256 = t272 * pkin(4);
t234 = t255 + t256;
t213 = t234 * t266;
t135 = -t264 * t201 + t213;
t136 = t266 * t201 + t234 * t264;
t407 = t264 * t272;
t408 = t264 * t269;
t17 = t129 * t408 - t135 * t407 + (-t130 * t269 + t136 * t272) * t266;
t265 = sin(pkin(6));
t273 = cos(qJ(2));
t405 = t265 * t273;
t350 = t264 * t405;
t426 = cos(pkin(6));
t245 = t426 * t272;
t270 = sin(qJ(2));
t406 = t265 * t270;
t352 = t269 * t406;
t191 = -t245 + t352;
t413 = t191 * t266;
t141 = t350 + t413;
t349 = t266 * t405;
t414 = t191 * t264;
t142 = -t349 + t414;
t397 = t269 * t273;
t166 = (-t264 * t270 + t266 * t397) * t265;
t435 = t269 / 0.2e1;
t436 = -t269 / 0.2e1;
t167 = (t264 * t397 + t266 * t270) * t265;
t447 = t167 / 0.2e1;
t25 = (t166 / 0.2e1 + t142 * t435) * t266 + (t141 * t436 + t447) * t264;
t411 = t25 * qJD(1);
t455 = t17 * qJD(2) - t411;
t44 = (-t129 * t264 + t130 * t266) * t269;
t454 = -qJD(2) * t44 - t411;
t442 = -t204 / 0.2e1;
t453 = t442 + t295;
t452 = qJD(6) * t285;
t379 = qJD(5) * t269;
t380 = qJD(4) * t272;
t450 = qJD(3) * t321 + t379 - t380;
t448 = -t141 / 0.2e1;
t446 = -t180 / 0.2e1;
t445 = -t191 / 0.2e1;
t334 = t426 * t269;
t351 = t272 * t406;
t192 = t334 + t351;
t444 = -t192 / 0.2e1;
t443 = t192 / 0.2e1;
t437 = t266 / 0.2e1;
t434 = -t272 / 0.2e1;
t433 = t272 / 0.2e1;
t432 = pkin(9) * t269;
t431 = -pkin(9) + t267;
t82 = t272 * pkin(5) + t213 + (-t201 - t432) * t264;
t430 = t268 * t82;
t89 = t266 * t432 + t136;
t429 = t268 * t89;
t428 = t271 * t82;
t427 = t271 * t89;
t423 = t129 * t266;
t422 = t130 * t264;
t421 = t135 * t266;
t420 = t136 * t264;
t419 = t141 * t266;
t418 = t142 * t264;
t19 = (-t191 + t418 + t419) * t192;
t416 = t19 * qJD(1);
t415 = t191 * qJ(4);
t348 = t272 * t405;
t20 = t141 * t166 + t142 * t167 + t192 * t348;
t412 = t20 * qJD(1);
t410 = t25 * qJD(2);
t299 = t166 * t437 + t264 * t447;
t300 = t142 * t437 + t264 * t448;
t26 = t269 * t300 - t299;
t409 = t26 * qJD(2);
t404 = t266 * t272;
t403 = t268 * t166;
t402 = t268 * t167;
t396 = t271 * t166;
t395 = t271 * t167;
t176 = t264 * t399 - t235;
t179 = t204 * t269;
t50 = t180 * t176 + t179 * t177;
t392 = t50 * qJD(2);
t65 = -t191 * t265 * t397 + (-t192 * t272 + t406) * t405;
t391 = t65 * qJD(1);
t77 = -t176 * t269 + t177 * t272;
t390 = t77 * qJD(2);
t78 = t179 * t269 - t180 * t272;
t389 = t78 * qJD(2);
t388 = t92 * qJD(2);
t99 = t204 * t436 + t266 * t337 + t394 * t435;
t383 = t99 * qJD(2);
t382 = qJD(2) * t269;
t381 = qJD(2) * t270;
t100 = t453 * t269;
t87 = t100 * qJD(2);
t328 = -t272 * pkin(3) - t398;
t220 = -pkin(2) + t328;
t144 = t220 * t272 + t232 * t269;
t378 = t144 * qJD(2);
t145 = -t220 * t269 + t232 * t272;
t377 = t145 * qJD(2);
t375 = t177 * qJD(5);
t374 = t177 * qJD(6);
t178 = t237 * t272 * t269;
t373 = t178 * qJD(2);
t371 = t180 * qJD(5);
t370 = t180 * qJD(6);
t369 = t192 * qJD(3);
t195 = t204 * qJD(6);
t263 = t272 ^ 2;
t206 = t237 * t263;
t367 = t206 * qJD(2);
t335 = -t258 / 0.2e1 - t259 / 0.2e1;
t219 = -0.1e1 / 0.2e1 + t335;
t365 = t219 * qJD(3);
t364 = t237 * qJD(3);
t262 = t269 ^ 2;
t240 = t263 - t262;
t363 = t240 * qJD(2);
t362 = t262 * qJD(2);
t361 = t262 * qJD(4);
t360 = t264 * qJD(3);
t359 = t266 * qJD(3);
t358 = t269 * qJD(3);
t357 = t269 * qJD(4);
t356 = t272 * qJD(2);
t254 = t272 * qJD(3);
t355 = pkin(2) * t382;
t354 = pkin(2) * t356;
t353 = pkin(8) * t358;
t347 = t176 * t382;
t346 = t179 * t382;
t345 = t220 * t382;
t344 = t264 * t362;
t343 = qJD(2) * t405;
t342 = t266 * t362;
t241 = t269 * t356;
t341 = t407 / 0.2e1;
t340 = t405 / 0.2e1;
t339 = -t404 / 0.2e1;
t336 = t255 / 0.2e1 + t256 / 0.2e1;
t202 = t237 * t267;
t165 = t269 * t372;
t333 = qJD(3) * t285 - t165;
t332 = qJD(2) * (t262 + t263);
t243 = t264 * pkin(5) + qJ(4);
t331 = qJD(3) * t243 + qJD(5);
t330 = (-pkin(8) / 0.2e1 - pkin(4) / 0.2e1) * t269;
t329 = t272 * t340;
t189 = (-pkin(5) * t266 - t449) * t269;
t190 = pkin(5) * t404 + t234;
t283 = t269 * pkin(5) + t211 + (pkin(9) * t272 - t200) * t264;
t88 = -pkin(9) * t404 + t130;
t31 = t268 * t88 - t271 * t283;
t3 = (t428 - t429) * t269 - t31 * t272 - t189 * t177 + t190 * t176;
t311 = t271 * t141 - t268 * t142;
t278 = t177 * t445 + t311 * t434;
t323 = t204 * t329;
t5 = t323 + (-t289 / 0.2e1 - t176 / 0.2e1) * t192 + t278;
t327 = -t5 * qJD(1) + t3 * qJD(2);
t32 = t268 * t283 + t271 * t88;
t4 = (t427 + t430) * t269 + t32 * t272 + t189 * t180 - t190 * t179;
t310 = t268 * t141 + t271 * t142;
t277 = t180 * t445 + t310 * t433;
t322 = t207 * t329;
t6 = t322 + t277;
t326 = -t6 * qJD(1) - t4 * qJD(2);
t274 = qJ(4) * t329 + t267 * t299;
t280 = t135 * t448 - t142 * t136 / 0.2e1 + t191 * t234 / 0.2e1;
t303 = -t423 / 0.2e1 - t422 / 0.2e1;
t1 = (t233 / 0.2e1 + t303) * t192 + t274 + t280;
t18 = t129 * t135 + t130 * t136 - t234 * t233;
t325 = -t1 * qJD(1) + t18 * qJD(2);
t296 = t338 + t393 / 0.2e1;
t46 = (t440 + t296) * t192;
t214 = t431 * t264;
t215 = t431 * t266;
t138 = t271 * t214 + t268 * t215;
t281 = t138 * t436 + t190 * t439 + t243 * t446;
t305 = -t429 / 0.2e1 + t428 / 0.2e1;
t9 = -t281 + t305;
t324 = t46 * qJD(1) + t9 * qJD(2);
t137 = t268 * t214 - t271 * t215;
t282 = t137 * t435 + t190 * t442 + t243 * t177 / 0.2e1;
t306 = -t430 / 0.2e1 - t427 / 0.2e1;
t10 = -t282 + t306;
t47 = t287 * t192;
t320 = t47 * qJD(1) + t10 * qJD(2);
t275 = t180 * t443 + t310 * t435;
t297 = -t402 / 0.2e1 + t396 / 0.2e1;
t13 = t275 + t297;
t22 = -t190 * t180 - t32 * t269;
t319 = t13 * qJD(1) - t22 * qJD(2);
t276 = t177 * t444 + t311 * t435;
t298 = -t403 / 0.2e1 - t395 / 0.2e1;
t14 = t276 + t298;
t21 = -t190 * t177 - t31 * t269;
t318 = t14 * qJD(1) + t21 * qJD(2);
t28 = t129 * t272 + t135 * t269 + (-t233 * t272 - t234 * t269) * t266;
t55 = (t264 * t340 + t448 + t413 / 0.2e1) * t272;
t317 = t55 * qJD(1) - t28 * qJD(2);
t29 = t136 * t269 - t234 * t408 + (t130 - t210) * t272;
t56 = (t266 * t340 + t142 / 0.2e1 - t414 / 0.2e1) * t272;
t316 = t56 * qJD(1) + t29 * qJD(2);
t36 = (t340 + t300) * t272;
t45 = -t129 * t407 + t130 * t404;
t315 = qJD(1) * t36 + qJD(2) * t45;
t30 = -t204 * t177 + t207 * t180;
t68 = t177 ^ 2 - t180 ^ 2;
t314 = qJD(2) * t68 + t30 * qJD(3);
t83 = t204 ^ 2 - t207 ^ 2;
t313 = t30 * qJD(2) + qJD(3) * t83;
t312 = t420 + t421;
t308 = t245 / 0.2e1 - t352 / 0.2e1;
t307 = t425 / 0.2e1 - t257 / 0.2e1;
t260 = qJD(3) * qJ(4);
t302 = -t421 / 0.2e1 - t420 / 0.2e1;
t41 = t302 + t336;
t284 = t351 / 0.2e1 + t334 / 0.2e1;
t67 = t192 * t335 + t284;
t304 = t67 * qJD(1) + t41 * qJD(2) + t260;
t301 = -t419 / 0.2e1 - t418 / 0.2e1;
t42 = (t232 / 0.2e1 + t307) * t405;
t294 = -t220 * t232 * qJD(2) + t42 * qJD(1);
t60 = t177 * t439 + t180 * t441;
t293 = -t60 * qJD(3) + t177 * t372;
t292 = -t60 * qJD(2) + t204 * t366;
t291 = t92 * qJD(3) - t165 - t370;
t290 = t272 * t379 + t361;
t288 = -t191 * qJD(3) + t272 * t343;
t143 = t269 * t343 + t369;
t33 = -t301 + t308;
t38 = t330 - t303;
t286 = -t33 * qJD(1) - t38 * qJD(2) - t202 * qJD(3);
t279 = qJD(3) * t328 + t380;
t261 = qJ(4) * qJD(4);
t251 = pkin(8) * t254;
t246 = t254 / 0.2e1;
t242 = t269 * t254;
t218 = 0.1e1 / 0.2e1 + t335;
t203 = qJD(6) * t433 + t241;
t171 = (t270 * t356 + t273 * t358) * t265;
t170 = (-t254 * t273 + t269 * t381) * t265;
t98 = t272 * t295 + t446;
t95 = t207 * t433 + t272 * t338 + t438;
t86 = t100 * qJD(6);
t85 = t99 * qJD(6);
t69 = -t195 + t87;
t66 = t237 * t443 + t284;
t62 = -t100 * qJD(3) - t269 * t376;
t59 = t60 * qJD(6);
t58 = t142 * t434 + t191 * t341 + t266 * t329;
t57 = t141 * t433 + t191 * t339 + t264 * t329;
t49 = (t296 + t439) * t192;
t48 = t453 * t192;
t43 = (-t232 / 0.2e1 + t307) * t405;
t40 = -t302 + t336;
t39 = t330 + t303;
t37 = t141 * t341 + t142 * t339 + t329;
t35 = t99 * qJD(3) + (qJD(6) + t382) * t177;
t34 = t301 + t308;
t27 = t30 * qJD(6);
t16 = -t275 + t297;
t15 = -t276 + t298;
t12 = t281 + t305;
t11 = t282 + t306;
t8 = t322 - t277;
t7 = -t278 + t323 + (t176 + t289) * t443;
t2 = t233 * t444 + t274 - t280 + (t422 + t423) * t443;
t23 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t65, 0, 0, 0, qJD(2) * t20 + qJD(3) * t19, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t265 * t381, -t343, 0, 0, 0, 0, 0, -t171, t170, t332 * t405, t171, -t170, -t391 + t43 * qJD(3) + (t220 * t381 + (pkin(8) * t332 + t357) * t273) * t265 (t166 * t269 + t263 * t349) * qJD(2) + t57 * qJD(3) (-t167 * t269 - t263 * t350) * qJD(2) + t58 * qJD(3), t26 * qJD(3) + (t166 * t264 - t167 * t266) * t356, t412 + (t166 * t129 + t167 * t130 + t234 * t348) * qJD(2) + t2 * qJD(3) - t26 * qJD(4) + t37 * qJD(5), 0, 0, 0, 0, 0 ((t396 - t402) * t269 - t177 * t348) * qJD(2) + t7 * qJD(3) + t16 * qJD(6) (-(t395 + t403) * t269 - t180 * t348) * qJD(2) + t8 * qJD(3) + t15 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t288, 0, t143, t288, t43 * qJD(2) + (-t192 * pkin(3) - t415) * qJD(3) + t192 * qJD(4), t57 * qJD(2) - t191 * t360, t58 * qJD(2) - t191 * t359, -t237 * t369 + t409, t416 + t2 * qJD(2) + (t192 * t202 - t415) * qJD(3) + t66 * qJD(4) + t34 * qJD(5), 0, 0, 0, 0, 0, t7 * qJD(2) + t49 * qJD(6) - t191 * t368, t8 * qJD(2) + t48 * qJD(6) - t191 * t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, 0, 0, qJD(3) * t66 - t409, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t37 + qJD(3) * t34, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * qJD(2) + t49 * qJD(3) - qJD(6) * t310, t15 * qJD(2) + t48 * qJD(3) - qJD(6) * t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t42 + t391, -t55 * qJD(3), -t56 * qJD(3), t25 * qJD(3), -t1 * qJD(3) - t25 * qJD(4) - qJD(5) * t36 - t412, 0, 0, 0, 0, 0, -qJD(3) * t5 - qJD(6) * t13, -qJD(3) * t6 - qJD(6) * t14; 0, 0, 0, 0, t242, t240 * qJD(3), 0, 0, 0, -pkin(2) * t358, -pkin(2) * t254, 0, t145 * qJD(3) - t272 * t357, -t144 * qJD(3) + t361 (qJD(3) * t232 - t357) * t220, t28 * qJD(3) + t264 * t290, -t29 * qJD(3) + t266 * t290, -t17 * qJD(3) + t178 * qJD(4) + t206 * qJD(5), t18 * qJD(3) - qJD(4) * t44 - qJD(5) * t45 (-qJD(3) * t179 - t374) * t180, qJD(3) * t50 + qJD(6) * t68, t78 * qJD(3) + t269 * t374, t77 * qJD(3) + t269 * t370, t242, t3 * qJD(3) + t22 * qJD(6) + (qJD(4) * t179 + t371) * t269, -t4 * qJD(3) - t21 * qJD(6) + (-qJD(4) * t176 - t375) * t269; 0, 0, 0, 0, t241, t363, t254, -t358, 0, -t251 - t355, t353 - t354, t279, t251 + t377, -t353 - t378, pkin(8) * t279 - t294, -t233 * t360 - t266 * t450 - t317, -t233 * t359 + t264 * t450 - t316, -qJD(3) * t312 - t455 (-t233 * qJ(4) + t267 * t312) * qJD(3) + t40 * qJD(4) + t39 * qJD(5) + t325, t179 * t459 + t59, t392 + (-t207 * t176 - t179 * t204) * qJD(3) + t27, t207 * t254 + t389 + t85, -t204 * t254 + t390 - t461, t203 (-t137 * t272 + t243 * t176 + t189 * t204) * qJD(3) + t95 * qJD(4) - t285 * qJD(5) + t12 * qJD(6) + t327 (-t138 * t272 + t243 * t179 + t189 * t207) * qJD(3) + t98 * qJD(4) - t100 * qJD(5) + t11 * qJD(6) + t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, -t241, t362, t251 - t345, t254 * t266 + t344, -t254 * t264 + t342, t373, qJD(3) * t40 + t454, 0, 0, 0, 0, 0, t95 * qJD(3) + t346 + t85, t98 * qJD(3) - t347 - t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t264 * t356 - t359) * t269 (t266 * t356 + t360) * t269, t367, qJD(3) * t39 - t315, 0, 0, 0, 0, 0, -t333, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, t314, t35, -t291, t246, t12 * qJD(3) + t99 * qJD(4) - t32 * qJD(6) - t319, t11 * qJD(3) - qJD(4) * t92 + t31 * qJD(6) - t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t42, t55 * qJD(2), t56 * qJD(2), -t410, t1 * qJD(2) + qJD(4) * t67 - qJD(5) * t33 - t416, 0, 0, 0, 0, 0, t5 * qJD(2) - qJD(6) * t46, t6 * qJD(2) - qJD(6) * t47; 0, 0, 0, 0, -t241, -t363, 0, 0, 0, t355, t354, 0, -t377, t378, t294, t317, t316, t455, qJD(4) * t41 - qJD(5) * t38 - t325, t179 * t372 + t59, t27 - t392, t86 - t389, -t390 - t452, -t203, qJD(4) * t96 - qJD(5) * t92 - t9 * qJD(6) - t327, t97 * qJD(4) - t99 * qJD(5) - t10 * qJD(6) - t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t261, qJD(4) * t264, qJD(4) * t266, t237 * qJD(5), -t202 * qJD(5) + t261, -t204 * t198, t83 * qJD(6), 0, 0, 0, qJD(4) * t204 + t198 * t243, qJD(4) * t207 - t195 * t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t260, t360, t359, 0, t218 * qJD(5) + t304, 0, 0, 0, 0, 0, t456, t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, t218 * qJD(4) + t286, 0, 0, 0, 0, 0, -t388, -t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t292, t313, t69, t460, -t356 / 0.2e1, -t138 * qJD(6) + t243 * t366 - t324, t137 * qJD(6) - t243 * t368 - t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t67 + t410, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241, -t362, t345, -t344, -t342, -t373, -qJD(3) * t41 - t454, 0, 0, 0, 0, 0, -t96 * qJD(3) - t346 + t86, -t97 * qJD(3) + t347 - t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t260, -t360, -t359, 0, t219 * qJD(5) - t304, 0, 0, 0, 0, 0, -t456, -t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t365, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, t460; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t36 + qJD(3) * t33, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t264 * t241, -t266 * t241, -t367, qJD(3) * t38 + t315, 0, 0, 0, 0, 0, t291, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t364, -t219 * qJD(4) - t286, 0, 0, 0, 0, 0, t198 + t388, -t195 + t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t459, -t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * qJD(2) + qJD(3) * t46, t14 * qJD(2) + qJD(3) * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, -t314, t62, t333, t246, t9 * qJD(3) - t100 * qJD(4) + t319 + t371, t10 * qJD(3) + qJD(4) * t285 + t318 - t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, -t313, -t87, t451, t356 / 0.2e1, -t207 * t331 + t324, t204 * t331 + t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t459, t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t23;
