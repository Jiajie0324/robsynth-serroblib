% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 10:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR5_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:42:38
% EndTime: 2019-05-06 10:42:55
% DurationCPUTime: 6.62s
% Computational Cost: add. (23106->486), mult. (53754->635), div. (0->0), fcn. (37452->10), ass. (0->303)
t236 = sin(pkin(6));
t244 = cos(qJ(2));
t240 = sin(qJ(2));
t234 = t240 ^ 2;
t233 = t236 ^ 2;
t246 = qJD(1) ^ 2;
t331 = t233 * t246;
t305 = t234 * t331;
t214 = t244 * t240 * t331;
t237 = cos(pkin(6));
t290 = qJDD(1) * t237 + qJDD(2);
t194 = t214 + t290;
t324 = t240 * t194;
t229 = qJD(1) * t237 + qJD(2);
t359 = t229 ^ 2;
t391 = t236 * (t244 * (t359 - t305) + t324);
t390 = pkin(3) * t194;
t238 = sin(qJ(6));
t239 = sin(qJ(5));
t243 = cos(qJ(5));
t321 = qJD(1) * t240;
t300 = t236 * t321;
t180 = -t229 * t239 + t243 * t300;
t320 = qJD(1) * t244;
t299 = t236 * t320;
t216 = qJD(5) + t299;
t242 = cos(qJ(6));
t145 = t180 * t238 - t216 * t242;
t147 = t180 * t242 + t216 * t238;
t120 = t147 * t145;
t312 = t240 * qJDD(1);
t196 = (qJD(2) * t320 + t312) * t236;
t292 = t239 * t196 + t243 * t290;
t132 = -qJD(5) * t180 - t292;
t131 = qJDD(6) - t132;
t373 = -t120 + t131;
t389 = t238 * t373;
t178 = t229 * t243 + t239 * t300;
t141 = t180 * t178;
t221 = qJD(2) * t300;
t313 = qJDD(1) * t244;
t197 = t236 * t313 - t221;
t189 = qJDD(5) + t197;
t372 = -t141 + t189;
t388 = t239 * t372;
t387 = t242 * t373;
t386 = t243 * t372;
t195 = -t214 + t290;
t182 = t244 * t195;
t235 = t244 ^ 2;
t304 = t235 * t331;
t199 = -t359 + t304;
t330 = t236 * t240;
t302 = t229 * t321;
t259 = -t221 + (t302 + t313) * t236;
t338 = t237 * t259;
t385 = t182 * t236 + t199 * t330 + t338;
t368 = -t359 - t304;
t384 = pkin(2) * t194 + qJ(3) * t368;
t327 = t237 * t244;
t328 = t237 * t240;
t366 = t359 + t305;
t382 = pkin(1) * (t195 * t328 + t327 * t366);
t381 = pkin(1) * (t194 * t327 + t328 * t368);
t319 = qJD(3) * t229;
t215 = 0.2e1 * t319;
t241 = sin(qJ(1));
t245 = cos(qJ(1));
t286 = g(1) * t245 + g(2) * t241;
t353 = pkin(8) * t236;
t192 = -pkin(1) * t246 + qJDD(1) * t353 - t286;
t285 = t241 * g(1) - t245 * g(2);
t257 = qJDD(1) * pkin(1) + t246 * t353 + t285;
t255 = t237 * t257;
t138 = -g(3) * t330 + t192 * t244 + t240 * t255;
t326 = t240 * qJ(3);
t284 = -pkin(2) * t244 - t326;
t322 = qJD(1) * t236;
t193 = t284 * t322;
t281 = qJ(3) * t290 + t193 * t299 + t138;
t274 = t215 + t281;
t86 = (t366 - t359) * pkin(2) + qJ(3) * t195 + t274;
t347 = qJ(4) - pkin(8);
t139 = pkin(5) * t178 - pkin(10) * t180;
t349 = t237 * g(3);
t377 = t236 * t257;
t160 = t349 + t377;
t204 = t229 * pkin(2) * t300;
t351 = t197 * pkin(2);
t249 = -t160 + t204 - t351;
t363 = pkin(3) * t197 - qJ(4) * t304 + qJDD(4);
t248 = -t249 + t363;
t335 = t196 * qJ(3);
t191 = -pkin(3) * t229 - qJ(4) * t300;
t291 = (0.2e1 * qJD(3) + t191) * t240;
t348 = qJ(3) - pkin(9);
t252 = (t291 + (-pkin(4) * t240 + t244 * t348) * t229) * qJD(1);
t265 = (pkin(4) * t244 - pkin(9) * t240) * t331;
t314 = qJD(1) * qJD(4);
t298 = t236 * t314;
t218 = -0.2e1 * t244 * t298;
t264 = -pkin(2) * t359 + t281;
t371 = -qJ(4) * t197 + t191 * t229;
t253 = -pkin(3) * t304 + t264 + t371;
t83 = t215 + t218 + t253;
t60 = -pkin(4) * t359 - pkin(9) * t290 - t244 * t265 + t83;
t369 = t236 * t239 * t252 + t243 * t60;
t35 = t239 * (t197 * pkin(4) - t196 * pkin(9) + t248 + t335) + t369;
t360 = t216 ^ 2;
t29 = -pkin(5) * t360 + t189 * pkin(10) - t178 * t139 + t35;
t133 = -qJD(5) * t178 + t196 * t243 - t239 * t290;
t159 = t216 * t178;
t115 = -t159 + t133;
t165 = t244 * t255;
t325 = t240 * t192;
t364 = -pkin(2) * t290 - qJ(3) * t359 + qJDD(3);
t267 = -t165 + t325 + t364;
t258 = -t196 * qJ(4) + t267 - t390;
t256 = 0.2e1 * t240 * t298 - t258;
t332 = t229 * t244;
t308 = qJ(4) * t332;
t352 = g(3) * t244;
t247 = (-t352 + (-t193 * t240 - t308) * qJD(1)) * t236 + t256;
t365 = -pkin(4) * t290 + pkin(9) * t359 - t240 * t265;
t43 = -t115 * pkin(10) + (t180 * t216 - t132) * pkin(5) + t247 - t365;
t17 = t238 * t29 - t242 * t43;
t18 = t238 * t43 + t242 * t29;
t11 = t17 * t238 + t18 * t242;
t380 = qJ(3) * t259;
t206 = t229 * t299;
t370 = t206 + t196;
t379 = qJ(3) * t370;
t376 = t240 * t259;
t260 = -t221 + (-t302 + t313) * t236;
t375 = t240 * t260;
t374 = t244 * t259;
t358 = pkin(2) + pkin(3);
t289 = t244 * t358 + pkin(1);
t268 = t289 + t326;
t174 = qJD(6) + t178;
t294 = t133 * t238 - t189 * t242;
t74 = (qJD(6) - t174) * t147 + t294;
t155 = (t312 + (qJD(2) + t229) * t320) * t236;
t203 = (-t234 + t235) * t331;
t184 = t237 * t203;
t362 = t236 * (t155 * t244 + t375) - t184;
t273 = t193 * t321 + t352;
t108 = t236 * t273 + t267;
t296 = -t204 + t349;
t357 = pkin(2) + pkin(4);
t361 = t196 * t348 + t197 * t357 + t296 + t363;
t143 = t145 ^ 2;
t144 = t147 ^ 2;
t171 = t174 ^ 2;
t176 = t178 ^ 2;
t177 = t180 ^ 2;
t34 = t239 * t60 - t243 * ((t252 + t257) * t236 + t361);
t28 = -pkin(5) * t189 - pkin(10) * t360 + t139 * t180 + t34;
t356 = -pkin(5) * t28 + pkin(10) * t11;
t355 = pkin(5) * t239;
t354 = pkin(8) * t182;
t25 = t238 * t28;
t89 = t120 + t131;
t346 = t238 * t89;
t84 = (t352 + (t308 + (-0.2e1 * qJD(4) + t193) * t240) * qJD(1)) * t236 + t258;
t62 = t84 + t365;
t345 = t239 * t62;
t26 = t242 * t28;
t344 = t242 * t89;
t342 = t243 * t62;
t116 = t159 + t133;
t263 = (-qJD(5) + t216) * t180 - t292;
t82 = t116 * t239 + t243 * t263;
t341 = t244 * t82;
t128 = t141 + t189;
t340 = t128 * t239;
t339 = t128 * t243;
t337 = t174 * t238;
t336 = t174 * t242;
t334 = t216 * t239;
t333 = t216 * t243;
t329 = t236 * t244;
t153 = (t312 + (qJD(2) - t229) * t320) * t236;
t202 = (t234 + t235) * t331;
t323 = pkin(1) * (t202 * t236 + (-t153 * t244 + t376) * t237) + (t153 * t240 + t374) * t353;
t318 = qJD(3) * t240;
t316 = qJD(6) + t174;
t315 = pkin(3) + t357;
t117 = -t144 - t171;
t58 = -t117 * t238 - t344;
t280 = -t133 * t242 - t189 * t238;
t79 = t145 * t316 + t280;
t311 = pkin(5) * t79 + pkin(10) * t58 + t25;
t106 = -t171 - t143;
t53 = t106 * t242 - t389;
t75 = -t147 * t316 - t294;
t310 = pkin(5) * t75 + pkin(10) * t53 - t26;
t309 = qJ(3) * t332;
t307 = t239 * t120;
t306 = t243 * t120;
t303 = t244 * t141;
t301 = t229 * t320;
t297 = qJD(1) * t318;
t130 = t174 * t145;
t96 = -qJD(6) * t145 - t280;
t78 = t130 + t96;
t48 = t238 * t78 - t242 * t74;
t98 = t143 + t144;
t295 = pkin(5) * t98 + pkin(10) * t48 + t11;
t288 = g(3) * t329 - t165;
t287 = pkin(5) * t243 + t315;
t10 = -t17 * t242 + t18 * t238;
t19 = t239 * t35 - t243 * t34;
t20 = t239 * t34 + t243 * t35;
t277 = pkin(1) - t284;
t276 = t296 + t351;
t137 = t288 + t325;
t271 = (t137 * t240 + t138 * t244) * t236;
t269 = t233 * t240 * t301 - t214 * t237;
t135 = t196 * t330 + t269;
t134 = t197 * t329 - t269;
t262 = t276 + t335;
t261 = t240 * t348 + t244 * t315 + pkin(1);
t254 = t276 + t379;
t251 = t257 + 0.2e1 * t297;
t211 = t237 * t290;
t151 = t206 - t196;
t149 = -t177 + t360;
t148 = t176 - t360;
t142 = -t177 - t360;
t140 = t177 - t176;
t136 = -t360 - t176;
t126 = -t144 + t171;
t125 = t143 - t171;
t124 = -t176 - t177;
t123 = -pkin(2) * t153 + t380;
t122 = (t178 * t239 + t180 * t243) * t216;
t119 = t144 - t143;
t118 = t237 * t153 + t391;
t111 = (qJD(5) + t216) * t180 + t292;
t110 = -t133 * t239 - t180 * t333;
t109 = -t132 * t243 - t178 * t334;
t105 = -t151 * t358 - t380;
t104 = -t148 * t239 - t339;
t103 = -t149 * t243 - t388;
t101 = t215 + t264;
t100 = -t142 * t239 - t339;
t99 = t142 * t243 - t340;
t95 = -qJD(6) * t147 - t294;
t94 = t136 * t243 - t388;
t93 = t136 * t239 + t386;
t92 = (-t145 * t242 + t147 * t238) * t174;
t91 = (-t145 * t238 - t147 * t242) * t174;
t87 = -t108 + t384;
t85 = ((t291 + t309) * qJD(1) + t257) * t236 + t262 + t363;
t81 = -t116 * t243 + t239 * t263;
t80 = t111 * t239 - t115 * t243;
t77 = -t130 + t96;
t71 = -t147 * t337 + t242 * t96;
t70 = t147 * t336 + t238 * t96;
t69 = t145 * t336 - t238 * t95;
t68 = t145 * t337 + t242 * t95;
t67 = t131 * t243 - t239 * t92;
t66 = t125 * t242 - t346;
t65 = -t126 * t238 + t387;
t64 = t125 * t238 + t344;
t63 = t126 * t242 + t389;
t61 = -pkin(2) * t108 + qJ(3) * t101;
t59 = t247 + t384 + t390;
t57 = t117 * t242 - t346;
t54 = t218 + (t366 - t304) * pkin(3) + t371 + t86;
t52 = t106 * t238 + t387;
t50 = -t239 * t71 + t306;
t49 = -t239 * t69 - t306;
t47 = -t238 * t77 + t242 * t75;
t46 = -t238 * t74 - t242 * t78;
t45 = t238 * t75 + t242 * t77;
t41 = -t239 * t66 - t243 * t74;
t40 = -t239 * t65 + t243 * t78;
t39 = -t239 * t79 + t243 * t58;
t38 = t239 * t58 + t243 * t79;
t37 = -t239 * t75 + t243 * t53;
t36 = t239 * t53 + t243 * t75;
t33 = t119 * t243 - t239 * t47;
t32 = -t239 * t98 + t243 * t48;
t31 = t239 * t48 + t243 * t98;
t30 = qJ(3) * t83 - t358 * t84;
t24 = t100 * t348 + t115 * t315 + t345;
t23 = t111 * t315 + t348 * t94 - t342;
t22 = -pkin(10) * t57 + t26;
t21 = -pkin(10) * t52 + t25;
t14 = -pkin(5) * t57 + t18;
t13 = -pkin(5) * t52 + t17;
t12 = t124 * t315 + t348 * t82 - t20;
t8 = -pkin(10) * t46 - t10;
t7 = t20 * t348 - t315 * t62;
t6 = t11 * t243 + t239 * t28;
t5 = t11 * t239 - t243 * t28;
t4 = -t14 * t243 - t22 * t239 + t315 * t57 + t348 * t39;
t3 = -t13 * t243 - t21 * t239 + t315 * t52 + t348 * t37;
t2 = -t239 * t8 + t287 * t46 + t32 * t348;
t1 = t348 * t6 + (pkin(10) * t239 + t287) * t10;
t9 = [0, 0, 0, 0, 0, qJDD(1), t285, t286, 0, 0, t135, t362, t118, t134, t385, t211, -t237 * t137 + t381 + (t244 * t160 + pkin(1) * t260 + pkin(8) * (t244 * t368 - t324)) * t236, (-t138 + pkin(1) * (-t195 * t240 - t244 * t366)) * t237 + (-t240 * t160 - pkin(1) * t370 + pkin(8) * (t240 * t366 - t182)) * t236, t271 + t323, pkin(1) * (t236 * t160 + (-t137 * t244 + t138 * t240) * t237) + pkin(8) * t271, t135, t118, -t362, t211, -t338 + (-t199 * t240 - t182) * t236, t134, t237 * t87 + t381 + (-pkin(8) * t324 + (pkin(8) * t368 + t236 * t251 + t254) * t244 + t277 * t260) * t236, t237 * t123 + (t244 * ((t202 - t359) * pkin(2) + t274) + (qJ(3) * t202 + (t193 * t322 + t192) * t240 + t288 + t364) * t240) * t236 + t323, t237 * t86 + t382 + (t354 + (-pkin(8) * t366 + ((t309 + 0.2e1 * t318) * qJD(1) + t257) * t236 + t262) * t240 + t277 * t155) * t236, (t61 + pkin(1) * (t101 * t240 - t108 * t244)) * t237 + (pkin(8) * (t101 * t244 + t108 * t240) - t277 * (-0.2e1 * t236 * t297 + t249 - t379)) * t236, t135, t184 + (-t244 * t370 - t375) * t236, t151 * t237 - t391, t134, t385, t211, t237 * t59 + t381 + (t347 * t324 + ((t191 * t321 + t251) * t236 - t347 * t368 + t254 + t363) * t244 + t268 * t260) * t236, t237 * t54 + t382 + (-qJ(4) * t182 + t354 + t289 * t155 + (t347 * t366 + t291 * t322 + (t155 + t370) * qJ(3) + t248) * t240) * t236, (t105 + pkin(1) * (-t151 * t244 - t376)) * t237 + (t240 * (-qJ(4) * t151 + t256) + t244 * (qJ(4) * t259 - t253 - 0.2e1 * t319) + pkin(8) * (t151 * t240 - t374) + (t240 * (-qJ(4) * t301 - t273) + 0.2e1 * t235 * t314) * t236 - t268 * t202) * t236, (t30 + pkin(1) * (t240 * t83 - t244 * t84)) * t237 + (t268 * t85 - t347 * (t240 * t84 + t244 * t83)) * t236, t237 * t110 + (t240 * (t133 * t243 - t180 * t334) + t303) * t236, t237 * t80 + (t240 * (-t111 * t243 - t115 * t239) + t244 * t140) * t236, t237 * t103 + (t240 * (-t149 * t239 + t386) + t244 * t116) * t236, t237 * t109 + (t240 * (-t132 * t239 + t178 * t333) - t303) * t236, t237 * t104 + (t240 * (t148 * t243 - t340) + t244 * t263) * t236, t189 * t329 + t237 * t122 + (-t178 * t243 + t180 * t239) * t216 * t330, (t23 + pkin(1) * (t111 * t244 + t240 * t94)) * t237 + (t240 * (qJ(4) * t111 - t345) + t244 * (-qJ(4) * t94 - t34) + pkin(8) * (-t111 * t240 + t244 * t94) + t261 * t93) * t236, (t24 + pkin(1) * (t100 * t240 + t115 * t244)) * t237 + ((t115 * t347 - t342) * t240 + t261 * t99 + (-t347 * t100 + (-t361 - t377) * t239 - t369) * t244) * t236, (t12 + pkin(1) * (t124 * t244 + t240 * t82)) * t237 + (t240 * (qJ(4) * t124 - t19) - qJ(4) * t341 + pkin(8) * (-t124 * t240 + t341) + t261 * t81) * t236, (t7 + pkin(1) * (t20 * t240 - t244 * t62)) * t237 + (t19 * t261 - t347 * (t20 * t244 + t240 * t62)) * t236, t237 * t50 + (t240 * (t243 * t71 + t307) + t244 * t70) * t236, t237 * t33 + (t240 * (t119 * t239 + t243 * t47) + t244 * t45) * t236, t237 * t40 + (t240 * (t239 * t78 + t243 * t65) + t244 * t63) * t236, t237 * t49 + (t240 * (t243 * t69 - t307) + t244 * t68) * t236, t237 * t41 + (t240 * (-t239 * t74 + t243 * t66) + t244 * t64) * t236, t237 * t67 + (t240 * (t131 * t239 + t243 * t92) + t244 * t91) * t236, (t3 + pkin(1) * (t240 * t37 + t244 * t52)) * t237 + (t240 * (qJ(4) * t52 - t13 * t239 + t21 * t243) + t244 * (-qJ(4) * t37 + t310) + pkin(8) * (-t240 * t52 + t244 * t37) + t261 * t36) * t236, (t4 + pkin(1) * (t240 * t39 + t244 * t57)) * t237 + (t240 * (qJ(4) * t57 - t14 * t239 + t22 * t243) + t244 * (-qJ(4) * t39 + t311) + pkin(8) * (-t240 * t57 + t244 * t39) + t261 * t38) * t236, (t2 + pkin(1) * (t240 * t32 + t244 * t46)) * t237 + (t240 * (t243 * t8 + (qJ(4) + t355) * t46) + t244 * (-qJ(4) * t32 + t295) + pkin(8) * (-t240 * t46 + t244 * t32) + t261 * t31) * t236, (t1 + pkin(1) * (t10 * t244 + t240 * t6)) * t237 + ((-t347 * t6 + t356) * t244 + (-pkin(10) * t243 + t347 + t355) * t240 * t10 + t261 * t5) * t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214, -t203, t153, t214, t259, t290, -t137, -t138, 0, 0, -t214, t153, t203, t290, -t259, t214, t87, t123, t86, t61, -t214, t203, t151, t214, t259, t290, t59, t54, t105, t30, t110, t80, t103, t109, t104, t122, t23, t24, t12, t7, t50, t33, t40, t49, t41, t67, t3, t4, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194, t153, -t366, t108, 0, 0, 0, 0, 0, 0, -t194, -t366, t151, t84, 0, 0, 0, 0, 0, 0, -t111, -t115, -t124, t62, 0, 0, 0, 0, 0, 0, -t52, -t57, -t46, -t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t260, t155, -t202, t85, 0, 0, 0, 0, 0, 0, t93, t99, t81, t19, 0, 0, 0, 0, 0, 0, t36, t38, t31, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, t116, -t141, t263, t189, -t34, -t35, 0, 0, t70, t45, t63, t68, t64, t91, t310, t311, t295, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, t119, t78, -t120, -t74, t131, -t17, -t18, 0, 0;];
tauJ_reg  = t9;
