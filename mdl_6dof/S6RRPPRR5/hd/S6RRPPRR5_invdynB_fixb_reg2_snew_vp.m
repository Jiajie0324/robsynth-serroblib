% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 10:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:42:56
% EndTime: 2019-05-06 10:43:31
% DurationCPUTime: 28.33s
% Computational Cost: add. (85794->784), mult. (200254->1162), div. (0->0), fcn. (139818->10), ass. (0->579)
t895 = qJD(1) ^ 2;
t885 = sin(pkin(6));
t882 = t885 ^ 2;
t889 = sin(qJ(2));
t893 = cos(qJ(2));
t998 = t882 * t889 * t893;
t859 = t895 * t998;
t886 = cos(pkin(6));
t984 = qJDD(1) * t886 + qJDD(2);
t827 = t859 + t984;
t1031 = t827 * t889;
t875 = t886 * qJD(1) + qJD(2);
t1065 = t875 ^ 2;
t1023 = t882 * t895;
t884 = t893 ^ 2;
t999 = t884 * t1023;
t1072 = -t1065 - t999;
t1082 = t1072 * t893 - t1031;
t1019 = t886 * t893;
t1020 = t886 * t889;
t1007 = qJDD(1) * t885;
t1012 = qJD(1) * t889;
t996 = t885 * t1012;
t830 = -qJD(2) * t996 + t1007 * t893;
t985 = t875 * t996;
t777 = t830 - t985;
t1109 = t827 * t1019 + t1020 * t1072 + t777 * t885;
t890 = sin(qJ(1));
t894 = cos(qJ(1));
t1125 = t1082 * t890 + t1109 * t894;
t1130 = pkin(7) * t1125;
t1126 = t1082 * t894 - t1109 * t890;
t1129 = pkin(7) * t1126;
t883 = t889 ^ 2;
t1000 = t883 * t1023;
t834 = t1065 - t1000;
t751 = -t827 * t893 + t834 * t889;
t1138 = t751 * t890;
t1137 = t751 * t894;
t946 = t834 * t893 + t1031;
t1136 = t885 * t946;
t1135 = t886 * t946;
t828 = -t859 + t984;
t1029 = t828 * t889;
t1071 = -t1065 + t999;
t753 = t1071 * t893 - t1029;
t1098 = t753 * t894;
t1074 = t830 + t985;
t1042 = t1074 * t885;
t813 = t893 * t828;
t1113 = t1020 * t1071 + t886 * t813 - t1042;
t1134 = -t1113 * t890 + t1098;
t1099 = t753 * t890;
t1133 = t1113 * t894 + t1099;
t1122 = pkin(1) * t1109;
t1021 = t885 * t893;
t1022 = t885 * t889;
t1110 = t827 * t1021 + t1022 * t1072 - t777 * t886;
t1124 = pkin(1) * t1110;
t1070 = t1065 + t1000;
t1006 = qJDD(1) * t889;
t1011 = qJD(1) * t893;
t776 = (t1006 + (qJD(2) + t875) * t1011) * t885;
t1086 = t1019 * t1070 + t828 * t1020 + t776 * t885;
t1087 = -t1070 * t889 + t813;
t1115 = t1087 * t894;
t1105 = -t1086 * t890 + t1115;
t1132 = pkin(7) * t1105;
t1116 = t1087 * t890;
t1106 = t1086 * t894 + t1116;
t1131 = pkin(7) * t1106;
t1104 = (-t1109 * t886 - t1110 * t885) * pkin(8);
t1062 = pkin(2) * t777;
t1081 = t1021 * t1070 + t828 * t1022 - t886 * t776;
t1123 = pkin(1) * t1081;
t1121 = pkin(1) * t1086;
t1120 = pkin(8) * t1082;
t1119 = pkin(8) * t1087;
t1038 = t777 * t889;
t1037 = t777 * t893;
t829 = (qJD(2) * t1011 + t1006) * t885;
t995 = t885 * t1011;
t845 = t875 * t995;
t775 = t845 + t829;
t1041 = t1074 * t886;
t1114 = t1022 * t1071 + t885 * t813 + t1041;
t840 = (-t883 + t884) * t1023;
t1026 = t840 * t885;
t1039 = t776 * t893;
t949 = t1039 + t1038;
t672 = t886 * t949 + t1026;
t1040 = t776 * t889;
t715 = t1040 - t1037;
t1112 = t672 * t890 + t715 * t894;
t1111 = t672 * t894 - t715 * t890;
t1103 = (-t1081 * t885 - t1086 * t886) * pkin(8);
t1102 = pkin(3) * t827;
t1097 = qJ(3) * t1074;
t1096 = t1074 * t889;
t1095 = t1074 * t893;
t888 = sin(qJ(5));
t892 = cos(qJ(5));
t809 = t892 * t875 + t888 * t996;
t811 = -t875 * t888 + t892 * t996;
t747 = t811 * t809;
t822 = qJDD(5) + t830;
t1075 = -t747 + t822;
t1094 = t1075 * t888;
t1093 = t1075 * t892;
t861 = qJD(5) + t995;
t887 = sin(qJ(6));
t891 = cos(qJ(6));
t760 = t811 * t887 - t891 * t861;
t762 = t811 * t891 + t861 * t887;
t708 = t762 * t760;
t986 = t829 * t888 + t892 * t984;
t728 = -qJD(5) * t811 - t986;
t916 = qJDD(6) - t728;
t1076 = -t708 + t916;
t1092 = t1076 * t887;
t1091 = t1076 * t891;
t1088 = pkin(2) * t827 + qJ(3) * t1072;
t1079 = qJ(3) * t828 + (t1070 - t1065) * pkin(2);
t1014 = t883 + t884;
t839 = t1014 * t1023;
t1078 = (t839 - t1065) * pkin(2);
t824 = -pkin(3) * t875 - qJ(4) * t996;
t1060 = pkin(8) * t885;
t867 = t890 * g(1) - t894 * g(2);
t907 = qJDD(1) * pkin(1) + t1060 * t895 + t867;
t1077 = t885 * (t1012 * t824 + t907);
t729 = -t809 * qJD(5) + t892 * t829 - t888 * t984;
t649 = -t760 * qJD(6) + t891 * t729 + t887 * t822;
t804 = qJD(6) + t809;
t725 = t804 * t760;
t602 = -t725 + t649;
t780 = t861 * t809;
t692 = -t780 + t729;
t868 = g(1) * t894 + g(2) * t890;
t825 = -pkin(1) * t895 + pkin(8) * t1007 - t868;
t904 = t886 * t907;
t739 = -g(3) * t1022 + t893 * t825 + t889 * t904;
t1013 = qJD(1) * t885;
t978 = -pkin(2) * t893 - qJ(3) * t889;
t826 = t978 * t1013;
t975 = -t984 * qJ(3) - t826 * t995 - t739;
t994 = qJD(4) * t1013;
t1073 = -t830 * qJ(4) + t875 * t824 - 0.2e1 * t893 * t994 - t975;
t930 = (pkin(4) * t893 - pkin(9) * t889) * t1023;
t1069 = -t984 * pkin(4) + t1065 * pkin(9) - t889 * t930;
t816 = t886 * t840;
t1068 = t885 * t949 - t816;
t997 = t875 * t1013;
t942 = t1014 * t997;
t943 = t885 * t984;
t744 = t890 * t943 + t894 * t942;
t1054 = t893 * g(3);
t987 = t889 * t825 - t893 * t904;
t932 = -t984 * pkin(2) - qJ(3) * t1065 + qJDD(3) + t987;
t664 = -t885 * (t1012 * t826 + t1054) - t932;
t743 = t890 * t942 - t894 * t943;
t991 = t729 * t887 - t891 * t822;
t599 = (qJD(6) - t804) * t762 + t991;
t1067 = -qJ(3) * t775 - t1062;
t914 = t1020 * t845 + t885 * t859;
t909 = t830 * t1019 - t914;
t929 = -t830 * t889 - t884 * t997;
t665 = t890 * t929 + t894 * t909;
t667 = -t890 * t909 + t894 * t929;
t910 = t829 * t1020 + t914;
t941 = t893 * t829 - t883 * t997;
t666 = t890 * t941 + t894 * t910;
t668 = -t890 * t910 + t894 * t941;
t758 = t760 ^ 2;
t759 = t762 ^ 2;
t801 = t804 ^ 2;
t807 = t809 ^ 2;
t808 = t811 ^ 2;
t1066 = t861 ^ 2;
t1064 = pkin(2) + pkin(3);
t1063 = pkin(3) + pkin(4);
t1028 = t839 * t885;
t774 = (t1006 + (qJD(2) - t875) * t1011) * t885;
t951 = -t774 * t893 + t1096;
t671 = t886 * t951 + t1028;
t711 = t774 * t889 + t1095;
t610 = t671 * t894 + t711 * t890;
t1061 = pkin(7) * t610;
t1059 = pkin(8) * t886;
t1058 = t830 * pkin(3);
t1057 = t1065 * pkin(2);
t1055 = t886 * g(3);
t1053 = qJ(3) - pkin(9);
t1052 = qJ(3) * t776;
t1051 = qJ(3) * t839;
t1010 = qJD(3) * t875;
t860 = 0.2e1 * t1010;
t908 = t860 + t1073;
t615 = -pkin(3) * t999 - t1057 + t908;
t581 = -pkin(4) * t1065 - pkin(9) * t984 - t893 * t930 + t615;
t983 = qJD(3) * t996;
t864 = 0.2e1 * t983;
t915 = -qJDD(4) - t1055 + t1067;
t903 = qJ(4) * t999 + t915;
t897 = -t829 * pkin(9) + t864 + t1063 * t830 + ((t824 * t889 + (-pkin(4) * t889 - pkin(9) * t893) * t875) * qJD(1) + t907) * t885 - t903;
t517 = t581 * t888 - t892 * t897;
t745 = pkin(5) * t809 - pkin(10) * t811;
t493 = -t822 * pkin(5) - pkin(10) * t1066 + t745 * t811 + t517;
t1050 = t493 * t887;
t1049 = t493 * t891;
t1005 = qJ(4) * t875 * t893;
t905 = -t829 * qJ(4) - t1102 + t932;
t616 = (t1054 + (t1005 + (-0.2e1 * qJD(4) + t826) * t889) * qJD(1)) * t885 + t905;
t585 = t616 + t1069;
t1048 = t585 * t888;
t1047 = t585 * t892;
t633 = t708 + t916;
t1046 = t633 * t887;
t1045 = t633 * t891;
t723 = t747 + t822;
t1044 = t723 * t888;
t1043 = t723 * t892;
t783 = t885 * t907 + t1055;
t1036 = t783 * t889;
t1035 = t783 * t893;
t1033 = t804 * t887;
t1032 = t804 * t891;
t1027 = t839 * t886;
t1025 = t861 * t888;
t1024 = t861 * t892;
t518 = t892 * t581 + t888 * t897;
t494 = -pkin(5) * t1066 + pkin(10) * t822 - t745 * t809 + t518;
t898 = 0.2e1 * t889 * t994 + (-t1054 + (-t826 * t889 - t1005) * qJD(1)) * t885 - t905;
t532 = t898 - t692 * pkin(10) + (t811 * t861 - t728) * pkin(5) - t1069;
t463 = t891 * t494 + t887 * t532;
t1018 = pkin(1) * t671 + t711 * t1060;
t1008 = pkin(2) + t1063;
t1004 = t888 * t708;
t1003 = t892 * t708;
t1002 = t889 * t747;
t1001 = t893 * t747;
t669 = t885 * t951 - t1027;
t993 = -pkin(1) * t669 + t711 * t1059;
t992 = pkin(5) * t888 + qJ(4);
t462 = t494 * t887 - t891 * t532;
t439 = t462 * t887 + t891 * t463;
t787 = -t867 * t890 - t894 * t868;
t981 = pkin(5) * t892 + t1008;
t857 = qJDD(1) * t894 - t890 * t895;
t980 = -pkin(7) * t857 - g(3) * t890;
t979 = t1070 - t999;
t977 = -t1036 - t1119;
t976 = t1035 + t1120;
t427 = t439 * t892 + t493 * t888;
t438 = -t462 * t891 + t463 * t887;
t974 = t427 * t889 + t438 * t893;
t465 = t517 * t888 + t518 * t892;
t973 = t465 * t889 - t585 * t893;
t603 = -t725 - t649;
t536 = -t599 * t891 - t603 * t887;
t650 = t758 + t759;
t507 = t536 * t892 - t650 * t888;
t534 = -t599 * t887 + t603 * t891;
t972 = t507 * t889 + t534 * t893;
t600 = (-qJD(6) - t804) * t762 - t991;
t535 = t600 * t891 - t602 * t887;
t707 = -t759 + t758;
t515 = t535 * t892 - t707 * t888;
t533 = t600 * t887 + t602 * t891;
t971 = t515 * t889 + t533 * t893;
t464 = -t517 * t892 + t518 * t888;
t662 = -t801 - t758;
t565 = t662 * t891 - t1092;
t522 = t565 * t892 - t600 * t888;
t564 = t662 * t887 + t1091;
t970 = t522 * t889 + t564 * t893;
t694 = -t759 - t801;
t573 = -t694 * t887 - t1045;
t525 = t573 * t892 + t602 * t888;
t572 = t694 * t891 - t1046;
t969 = t525 * t889 + t572 * t893;
t721 = -t759 + t801;
t589 = -t721 * t887 + t1091;
t528 = t589 * t892 - t603 * t888;
t587 = t721 * t891 + t1092;
t968 = t528 * t889 + t587 * t893;
t720 = t758 - t801;
t590 = t720 * t891 - t1046;
t529 = t590 * t892 - t599 * t888;
t588 = t720 * t887 + t1045;
t967 = t529 * t889 + t588 * t893;
t648 = -qJD(6) * t762 - t991;
t596 = t1032 * t760 - t648 * t887;
t555 = t596 * t892 - t1004;
t595 = t1033 * t760 + t648 * t891;
t966 = t555 * t889 + t595 * t893;
t598 = -t1033 * t762 + t649 * t891;
t556 = t598 * t892 + t1004;
t597 = t1032 * t762 + t649 * t887;
t965 = t556 * t889 + t597 * t893;
t644 = (-t760 * t891 + t762 * t887) * t804;
t594 = t644 * t892 + t888 * t916;
t643 = (-t760 * t887 - t762 * t891) * t804;
t964 = t594 * t889 + t643 * t893;
t688 = (qJD(5) + t861) * t811 + t986;
t607 = -t688 * t892 - t692 * t888;
t746 = t808 - t807;
t963 = t607 * t889 + t746 * t893;
t693 = t780 + t729;
t913 = (-qJD(5) + t861) * t811 - t986;
t608 = t693 * t888 + t892 * t913;
t719 = -t807 - t808;
t962 = t608 * t889 + t719 * t893;
t961 = t615 * t889 - t616 * t893;
t736 = -t1066 - t807;
t646 = t736 * t892 - t1094;
t960 = t646 * t889 + t688 * t893;
t940 = t860 - t975;
t647 = t940 + t1078;
t651 = t1051 - t664;
t959 = t647 * t893 + t651 * t889;
t748 = -t808 - t1066;
t654 = -t748 * t888 - t1043;
t958 = t654 * t889 + t692 * t893;
t655 = t940 - t1057;
t957 = t655 * t889 + t664 * t893;
t770 = -t808 + t1066;
t659 = -t770 * t888 + t1093;
t956 = t659 * t889 + t693 * t893;
t769 = t807 - t1066;
t660 = t769 * t892 - t1044;
t955 = t660 * t889 + t893 * t913;
t717 = (-t809 * t892 + t811 * t888) * t861;
t954 = t717 * t889 + t822 * t893;
t738 = g(3) * t1021 + t987;
t953 = -t738 * t893 + t739 * t889;
t652 = t738 * t889 + t739 * t893;
t772 = t845 - t829;
t952 = -t772 * t893 - t1096;
t950 = -t775 * t893 - t1038;
t948 = -t1070 * t893 - t1029;
t945 = -t1071 * t889 - t813;
t786 = t867 * t894 - t868 * t890;
t678 = t1024 * t809 - t728 * t888;
t938 = t678 * t889 - t1001;
t680 = -t1025 * t811 + t729 * t892;
t937 = t680 * t889 + t1001;
t936 = (-t669 * t885 - t671 * t886) * pkin(8);
t933 = qJD(1) * t875 * t998 - t886 * t859;
t426 = t439 * t888 - t493 * t892;
t396 = -pkin(5) * t493 + pkin(10) * t439 - qJ(4) * t427 + t1008 * t426;
t403 = t1053 * t426 + (-pkin(10) * t892 + t992) * t438;
t411 = t427 * t893 - t438 * t889;
t928 = pkin(8) * t411 + t396 * t893 + t403 * t889;
t506 = t536 * t888 + t650 * t892;
t410 = pkin(5) * t650 + pkin(10) * t536 - qJ(4) * t507 + t1008 * t506 + t439;
t431 = -pkin(10) * t534 - t438;
t413 = t1053 * t506 + t431 * t892 + t534 * t992;
t468 = t507 * t893 - t534 * t889;
t927 = pkin(8) * t468 + t410 * t893 + t413 * t889;
t414 = -qJ(4) * t465 + t1008 * t464;
t437 = -qJ(4) * t585 + t1053 * t464;
t454 = t465 * t893 + t585 * t889;
t926 = pkin(8) * t454 + t414 * t893 + t437 * t889;
t450 = -pkin(5) * t564 + t462;
t472 = -pkin(10) * t564 + t1050;
t521 = t565 * t888 + t600 * t892;
t419 = qJ(4) * t564 + t1053 * t521 - t450 * t888 + t472 * t892;
t423 = pkin(5) * t600 + pkin(10) * t565 - qJ(4) * t522 + t1008 * t521 - t1049;
t483 = t522 * t893 - t564 * t889;
t925 = pkin(8) * t483 + t419 * t889 + t423 * t893;
t451 = -pkin(5) * t572 + t463;
t473 = -pkin(10) * t572 + t1049;
t524 = t573 * t888 - t602 * t892;
t420 = qJ(4) * t572 + t1053 * t524 - t451 * t888 + t473 * t892;
t425 = -pkin(5) * t602 + pkin(10) * t573 - qJ(4) * t525 + t1008 * t524 + t1050;
t486 = t525 * t893 - t572 * t889;
t924 = pkin(8) * t486 + t420 * t889 + t425 * t893;
t606 = -t693 * t892 + t888 * t913;
t448 = qJ(4) * t719 + t1053 * t606 - t464;
t477 = -qJ(4) * t608 + t1008 * t606;
t560 = t608 * t893 - t719 * t889;
t923 = pkin(8) * t560 + t448 * t889 + t477 * t893;
t645 = t736 * t888 + t1093;
t460 = -qJ(4) * t646 + t1008 * t645 - t517;
t492 = qJ(4) * t688 + t1053 * t645 - t1048;
t578 = t646 * t893 - t688 * t889;
t922 = pkin(8) * t578 + t460 * t893 + t492 * t889;
t653 = t748 * t892 - t1044;
t466 = -qJ(4) * t654 + t1008 * t653 - t518;
t500 = qJ(4) * t692 + t1053 * t653 - t1047;
t584 = t654 * t893 - t692 * t889;
t921 = pkin(8) * t584 + t466 * t893 + t500 * t889;
t865 = -0.2e1 * t983;
t617 = -t1058 + t865 + t903 - t1077;
t508 = -qJ(4) * t615 - t1064 * t617;
t541 = t615 * t893 + t616 * t889;
t545 = -qJ(3) * t617 - qJ(4) * t616;
t920 = pkin(8) * t541 + t508 * t893 + t545 * t889;
t899 = t864 - t915 + t1077;
t563 = t1062 + (-t1072 - t999) * qJ(4) + (t777 + t830) * pkin(3) + t899;
t737 = qJ(3) * t777 + qJ(4) * t827;
t919 = t563 * t893 + t737 * t889 + t1120;
t566 = qJ(4) * t1074 - 0.2e1 * t1010 + (-t839 + t999) * pkin(3) - t1078 - t1073;
t580 = -qJ(4) * t772 - t1051 + t898;
t713 = t772 * t889 - t1095;
t918 = pkin(8) * t713 + t566 * t893 + t580 * t889;
t575 = qJ(4) * t979 + t1052 + t1058 + t899;
t687 = -qJ(4) * t828 + t1064 * t776;
t917 = t575 * t889 + t687 * t893 + t1119;
t733 = t829 * t1022 + t933;
t732 = t830 * t1021 - t933;
t901 = -t783 + t1067;
t900 = t864 - t901;
t630 = t900 + t1052;
t912 = pkin(2) * t1039 + t630 * t889 + t1119;
t631 = t900 + t1062;
t911 = qJ(3) * t1038 + t631 * t893 + t1120;
t582 = t655 * t893 - t664 * t889;
t656 = t865 + t901;
t906 = pkin(8) * t582 + t656 * t978;
t856 = qJDD(1) * t890 + t894 * t895;
t853 = t886 * t984;
t831 = -pkin(7) * t856 + g(3) * t894;
t718 = -pkin(2) * t774 + t1097;
t716 = (t809 * t888 + t811 * t892) * t861;
t714 = t775 * t889 - t1037;
t704 = t886 * t945 + t1042;
t701 = -t772 * t885 - t1135;
t699 = -t774 * t885 + t1135;
t695 = t774 * t886 + t1136;
t685 = -t775 * t885 + t886 * t948;
t682 = t775 * t886 + t885 * t948;
t679 = -t1024 * t811 - t729 * t888;
t677 = -t1025 * t809 - t728 * t892;
t676 = t717 * t893 - t822 * t889;
t674 = t886 * t950 - t1026;
t673 = t886 * t952 - t1028;
t670 = t885 * t952 + t1027;
t661 = -t1064 * t772 - t1097;
t658 = -t769 * t888 - t1043;
t657 = -t770 * t892 - t1094;
t639 = -t699 * t890 - t1137;
t635 = t699 * t894 - t1138;
t629 = t1088 + t664;
t628 = t940 + t1079;
t627 = t680 * t893 - t1002;
t626 = t678 * t893 + t1002;
t624 = -t685 * t890 - t1115;
t621 = t685 * t894 - t1116;
t619 = t783 * t885 + t886 * t953;
t618 = -t783 * t886 + t885 * t953;
t614 = -t716 * t885 + t886 * t954;
t613 = -t673 * t890 + t713 * t894;
t612 = -t671 * t890 + t711 * t894;
t611 = t673 * t894 + t713 * t890;
t609 = pkin(7) * t612;
t605 = t688 * t888 - t692 * t892;
t593 = -t644 * t888 + t892 * t916;
t592 = t660 * t893 - t889 * t913;
t591 = t659 * t893 - t693 * t889;
t586 = -t1036 + t1104;
t583 = pkin(2) * t664 + qJ(3) * t655;
t577 = t1088 + t898 + t1102;
t576 = -t1035 + (-t682 * t885 - t685 * t886) * pkin(8);
t574 = t738 * t885 + t886 * t976 - t1124;
t569 = t607 * t893 - t746 * t889;
t568 = -pkin(1) * t682 + t739 * t885 + t886 * t977;
t567 = t979 * pkin(3) + t1079 + t908;
t562 = -t679 * t885 + t886 * t937;
t561 = -t677 * t885 + t886 * t938;
t559 = -pkin(1) * t618 + t1059 * t652;
t558 = -t619 * t890 + t652 * t894;
t557 = t619 * t894 + t652 * t890;
t554 = -t598 * t888 + t1003;
t553 = -t596 * t888 - t1003;
t552 = t652 * t886 + t993;
t551 = -t658 * t885 + t886 * t955;
t550 = -t657 * t885 + t886 * t956;
t549 = (-t618 * t885 - t619 * t886) * pkin(8);
t548 = t936 - t953;
t547 = -t656 * t885 + t886 * t957;
t546 = t656 * t886 + t885 * t957;
t544 = t653 * t885 + t886 * t958;
t543 = -t653 * t886 + t885 * t958;
t542 = t594 * t893 - t643 * t889;
t540 = t645 * t885 + t886 * t960;
t539 = -t645 * t886 + t885 * t960;
t538 = -pkin(2) * t1040 + t630 * t893 + t1103;
t537 = qJ(3) * t1037 - t631 * t889 + t1104;
t527 = -t590 * t888 - t599 * t892;
t526 = -t589 * t888 - t603 * t892;
t523 = -t605 * t885 + t886 * t963;
t520 = t606 * t885 + t886 * t962;
t519 = -t606 * t886 + t885 * t962;
t516 = -t647 * t889 + t651 * t893 + t936;
t514 = -t535 * t888 - t707 * t892;
t513 = -t628 * t885 + t886 * t912 - t1123;
t512 = t556 * t893 - t597 * t889;
t511 = t555 * t893 - t595 * t889;
t510 = -t629 * t885 + t886 * t911 - t1124;
t509 = -t563 * t889 + t737 * t893 + t1104;
t505 = -t718 * t885 + t886 * t959 + t993;
t504 = qJ(3) * t615 - t1064 * t616;
t503 = t575 * t893 - t687 * t889 + t1103;
t502 = -t617 * t885 + t886 * t961;
t501 = t617 * t886 + t885 * t961;
t499 = -t593 * t885 + t886 * t964;
t498 = -t544 * t890 + t584 * t894;
t497 = t544 * t894 + t584 * t890;
t496 = -t547 * t890 + t582 * t894;
t495 = t547 * t894 + t582 * t890;
t490 = -t540 * t890 + t578 * t894;
t489 = t540 * t894 + t578 * t890;
t488 = t529 * t893 - t588 * t889;
t487 = t528 * t893 - t587 * t889;
t485 = -t566 * t889 + t580 * t893 + (-t670 * t885 - t673 * t886) * pkin(8);
t484 = -t577 * t885 + t886 * t919 - t1124;
t482 = t1008 * t692 + t1053 * t654 + t1048;
t481 = -t567 * t885 + t886 * t917 - t1123;
t480 = -t520 * t890 + t560 * t894;
t479 = t520 * t894 + t560 * t890;
t478 = t1008 * t688 + t1053 * t646 - t1047;
t476 = -pkin(1) * t670 - t661 * t885 + t886 * t918;
t475 = -t554 * t885 + t886 * t965;
t474 = -t553 * t885 + t886 * t966;
t471 = t515 * t893 - t533 * t889;
t470 = -t502 * t890 + t541 * t894;
t469 = t502 * t894 + t541 * t890;
t467 = (pkin(2) * t889 - qJ(3) * t893) * t656 + (-t546 * t885 - t547 * t886) * pkin(8);
t459 = -pkin(1) * t546 - t583 * t885 + t886 * t906;
t458 = -t527 * t885 + t886 * t967;
t457 = -t526 * t885 + t886 * t968;
t456 = t524 * t885 + t886 * t969;
t455 = -t524 * t886 + t885 * t969;
t453 = t521 * t885 + t886 * t970;
t452 = -t521 * t886 + t885 * t970;
t449 = -t514 * t885 + t886 * t971;
t447 = t506 * t885 + t886 * t972;
t446 = -t506 * t886 + t885 * t972;
t445 = t1008 * t719 + t1053 * t608 - t465;
t444 = -t456 * t890 + t486 * t894;
t443 = t456 * t894 + t486 * t890;
t442 = -t453 * t890 + t483 * t894;
t441 = t453 * t894 + t483 * t890;
t440 = -t508 * t889 + t545 * t893 + (-t501 * t885 - t502 * t886) * pkin(8);
t436 = t464 * t885 + t886 * t973;
t435 = -t464 * t886 + t885 * t973;
t434 = -t466 * t889 + t500 * t893 + (-t543 * t885 - t544 * t886) * pkin(8);
t433 = -pkin(1) * t501 - t504 * t885 + t886 * t920;
t432 = -t460 * t889 + t492 * t893 + (-t539 * t885 - t540 * t886) * pkin(8);
t430 = -t447 * t890 + t468 * t894;
t429 = t447 * t894 + t468 * t890;
t428 = -t1008 * t585 + t1053 * t465;
t424 = -pkin(1) * t543 - t482 * t885 + t886 * t921;
t422 = -pkin(1) * t539 - t478 * t885 + t886 * t922;
t421 = t448 * t893 - t477 * t889 + (-t519 * t885 - t520 * t886) * pkin(8);
t418 = -t436 * t890 + t454 * t894;
t417 = t436 * t894 + t454 * t890;
t416 = t1008 * t572 + t1053 * t525 - t451 * t892 - t473 * t888;
t415 = t1008 * t564 + t1053 * t522 - t450 * t892 - t472 * t888;
t412 = -pkin(1) * t519 - t445 * t885 + t886 * t923;
t409 = t1053 * t507 - t431 * t888 + t534 * t981;
t408 = t426 * t885 + t886 * t974;
t407 = -t426 * t886 + t885 * t974;
t406 = t420 * t893 - t425 * t889 + (-t455 * t885 - t456 * t886) * pkin(8);
t405 = t419 * t893 - t423 * t889 + (-t452 * t885 - t453 * t886) * pkin(8);
t404 = -t414 * t889 + t437 * t893 + (-t435 * t885 - t436 * t886) * pkin(8);
t402 = -pkin(1) * t455 - t416 * t885 + t886 * t924;
t401 = -t408 * t890 + t411 * t894;
t400 = t408 * t894 + t411 * t890;
t399 = -t410 * t889 + t413 * t893 + (-t446 * t885 - t447 * t886) * pkin(8);
t398 = -pkin(1) * t452 - t415 * t885 + t886 * t925;
t397 = -pkin(1) * t435 - t428 * t885 + t886 * t926;
t395 = t1053 * t427 + (pkin(10) * t888 + t981) * t438;
t394 = -pkin(1) * t446 - t409 * t885 + t886 * t927;
t393 = -t396 * t889 + t403 * t893 + (-t407 * t885 - t408 * t886) * pkin(8);
t392 = -pkin(1) * t407 - t395 * t885 + t886 * t928;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t856, -t857, 0, t787, 0, 0, 0, 0, 0, 0, t1126, t624, t612, t558, 0, 0, 0, 0, 0, 0, t1126, t612, t1105, t496, 0, 0, 0, 0, 0, 0, t1126, t1105, t613, t470, 0, 0, 0, 0, 0, 0, t490, t498, t480, t418, 0, 0, 0, 0, 0, 0, t442, t444, t430, t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t857, -t856, 0, t786, 0, 0, 0, 0, 0, 0, t1125, t621, t610, t557, 0, 0, 0, 0, 0, 0, t1125, t610, t1106, t495, 0, 0, 0, 0, 0, 0, t1125, t1106, t611, t469, 0, 0, 0, 0, 0, 0, t489, t497, t479, t417, 0, 0, 0, 0, 0, 0, t441, t443, t429, t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1110, t682, t669, t618, 0, 0, 0, 0, 0, 0, t1110, t669, t1081, t546, 0, 0, 0, 0, 0, 0, t1110, t1081, t670, t501, 0, 0, 0, 0, 0, 0, t539, t543, t519, t435, 0, 0, 0, 0, 0, 0, t452, t455, t446, t407; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t857, 0, -t856, 0, t980, -t831, -t786, -pkin(7) * t786, t668, -t1112, t639, t667, t1134, t744, -t574 * t890 + t586 * t894 - t1130, -pkin(7) * t621 - t568 * t890 + t576 * t894, t548 * t894 - t552 * t890 - t1061, -pkin(7) * t557 + t549 * t894 - t559 * t890, t668, t639, t1112, t744, -t704 * t890 - t1098, t667, -t510 * t890 + t537 * t894 - t1130, -t505 * t890 + t516 * t894 - t1061, -t513 * t890 + t538 * t894 - t1131, -pkin(7) * t495 - t459 * t890 + t467 * t894, t668, -t674 * t890 + t714 * t894, -t701 * t890 + t1137, t667, t1134, t744, -t484 * t890 + t509 * t894 - t1130, -t481 * t890 + t503 * t894 - t1131, -pkin(7) * t611 - t476 * t890 + t485 * t894, -pkin(7) * t469 - t433 * t890 + t440 * t894, -t562 * t890 + t627 * t894, -t523 * t890 + t569 * t894, -t550 * t890 + t591 * t894, -t561 * t890 + t626 * t894, -t551 * t890 + t592 * t894, -t614 * t890 + t676 * t894, -pkin(7) * t489 - t422 * t890 + t432 * t894, -pkin(7) * t497 - t424 * t890 + t434 * t894, -pkin(7) * t479 - t412 * t890 + t421 * t894, -pkin(7) * t417 - t397 * t890 + t404 * t894, -t475 * t890 + t512 * t894, -t449 * t890 + t471 * t894, -t457 * t890 + t487 * t894, -t474 * t890 + t511 * t894, -t458 * t890 + t488 * t894, -t499 * t890 + t542 * t894, -pkin(7) * t441 - t398 * t890 + t405 * t894, -pkin(7) * t443 - t402 * t890 + t406 * t894, -pkin(7) * t429 - t394 * t890 + t399 * t894, -pkin(7) * t400 - t392 * t890 + t393 * t894; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t856, 0, t857, 0, t831, t980, t787, pkin(7) * t787, t666, t1111, t635, t665, t1133, t743, t574 * t894 + t586 * t890 + t1129, pkin(7) * t624 + t568 * t894 + t576 * t890, t548 * t890 + t552 * t894 + t609, pkin(7) * t558 + t549 * t890 + t559 * t894, t666, t635, -t1111, t743, t704 * t894 - t1099, t665, t510 * t894 + t537 * t890 + t1129, t505 * t894 + t516 * t890 + t609, t513 * t894 + t538 * t890 + t1132, pkin(7) * t496 + t459 * t894 + t467 * t890, t666, t674 * t894 + t714 * t890, t701 * t894 + t1138, t665, t1133, t743, t484 * t894 + t509 * t890 + t1129, t481 * t894 + t503 * t890 + t1132, pkin(7) * t613 + t476 * t894 + t485 * t890, pkin(7) * t470 + t433 * t894 + t440 * t890, t562 * t894 + t627 * t890, t523 * t894 + t569 * t890, t550 * t894 + t591 * t890, t561 * t894 + t626 * t890, t551 * t894 + t592 * t890, t614 * t894 + t676 * t890, pkin(7) * t490 + t422 * t894 + t432 * t890, pkin(7) * t498 + t424 * t894 + t434 * t890, pkin(7) * t480 + t412 * t894 + t421 * t890, pkin(7) * t418 + t397 * t894 + t404 * t890, t475 * t894 + t512 * t890, t449 * t894 + t471 * t890, t457 * t894 + t487 * t890, t474 * t894 + t511 * t890, t458 * t894 + t488 * t890, t499 * t894 + t542 * t890, pkin(7) * t442 + t398 * t894 + t405 * t890, pkin(7) * t444 + t402 * t894 + t406 * t890, pkin(7) * t430 + t394 * t894 + t399 * t890, pkin(7) * t401 + t392 * t894 + t393 * t890; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t867, t868, 0, 0, t733, t1068, t695, t732, t1114, t853, -t738 * t886 + t885 * t976 + t1122, pkin(1) * t685 - t739 * t886 + t885 * t977, t652 * t885 + t1018, pkin(1) * t619 + t1060 * t652, t733, t695, -t1068, t853, t885 * t945 - t1041, t732, t629 * t886 + t885 * t911 + t1122, t718 * t886 + t885 * t959 + t1018, t628 * t886 + t885 * t912 + t1121, pkin(1) * t547 + t583 * t886 + t885 * t906, t733, t885 * t950 + t816, t772 * t886 - t1136, t732, t1114, t853, t577 * t886 + t885 * t919 + t1122, t567 * t886 + t885 * t917 + t1121, pkin(1) * t673 + t661 * t886 + t885 * t918, pkin(1) * t502 + t504 * t886 + t885 * t920, t679 * t886 + t885 * t937, t605 * t886 + t885 * t963, t657 * t886 + t885 * t956, t677 * t886 + t885 * t938, t658 * t886 + t885 * t955, t716 * t886 + t885 * t954, pkin(1) * t540 + t478 * t886 + t885 * t922, pkin(1) * t544 + t482 * t886 + t885 * t921, pkin(1) * t520 + t445 * t886 + t885 * t923, pkin(1) * t436 + t428 * t886 + t885 * t926, t554 * t886 + t885 * t965, t514 * t886 + t885 * t971, t526 * t886 + t885 * t968, t553 * t886 + t885 * t966, t527 * t886 + t885 * t967, t593 * t886 + t885 * t964, pkin(1) * t453 + t415 * t886 + t885 * t925, pkin(1) * t456 + t416 * t886 + t885 * t924, pkin(1) * t447 + t409 * t886 + t885 * t927, pkin(1) * t408 + t395 * t886 + t885 * t928;];
tauB_reg  = t1;
