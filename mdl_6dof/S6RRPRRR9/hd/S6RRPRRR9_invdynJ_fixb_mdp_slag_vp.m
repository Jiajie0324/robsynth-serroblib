% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR9_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:14:34
% EndTime: 2019-03-09 14:15:04
% DurationCPUTime: 22.34s
% Computational Cost: add. (19201->768), mult. (47296->1043), div. (0->0), fcn. (40291->18), ass. (0->327)
t819 = sin(qJ(2));
t824 = cos(qJ(2));
t870 = pkin(2) * t819 - qJ(3) * t824;
t813 = sin(pkin(6));
t941 = qJD(1) * t813;
t743 = t870 * t941;
t910 = t819 * t941;
t815 = cos(pkin(6));
t940 = qJD(1) * t815;
t919 = pkin(1) * t940;
t744 = -pkin(8) * t910 + t824 * t919;
t812 = sin(pkin(12));
t814 = cos(pkin(12));
t678 = t812 * t743 + t814 * t744;
t909 = t824 * t941;
t882 = t812 * t909;
t665 = -pkin(9) * t882 + t678;
t1027 = qJD(3) * t814 - t665;
t818 = sin(qJ(4));
t823 = cos(qJ(4));
t762 = t812 * t818 - t823 * t814;
t965 = t813 * t824;
t842 = t762 * t965;
t948 = qJD(1) * t842 - t762 * qJD(4);
t763 = t812 * t823 + t814 * t818;
t843 = t763 * t965;
t947 = -qJD(1) * t843 + t763 * qJD(4);
t888 = qJD(2) + t940;
t728 = t812 * t910 - t814 * t888;
t730 = t812 * t888 + t814 * t910;
t670 = t728 * t818 - t730 * t823;
t817 = sin(qJ(5));
t822 = cos(qJ(5));
t857 = -t728 * t823 - t818 * t730;
t610 = t670 * t817 + t822 * t857;
t821 = cos(qJ(6));
t1016 = t610 * t821;
t929 = qJD(6) * t821;
t1026 = t1016 - t929;
t779 = -qJD(4) + t909;
t767 = -qJD(5) + t779;
t1025 = t610 * t767;
t677 = t814 * t743 - t744 * t812;
t846 = (-pkin(9) * t814 * t824 + pkin(3) * t819) * t813;
t647 = qJD(1) * t846 + t677;
t983 = pkin(9) + qJ(3);
t774 = t983 * t812;
t775 = t983 * t814;
t856 = qJD(3) * t812 + qJD(4) * t775;
t933 = qJD(4) * t823;
t1024 = -t774 * t933 + t1027 * t823 + (-t647 - t856) * t818;
t928 = -qJD(6) + t610;
t645 = t823 * t647;
t946 = -t818 * t774 + t823 * t775;
t1023 = pkin(4) * t910 + pkin(10) * t948 + t763 * qJD(3) + qJD(4) * t946 - t665 * t818 + t645;
t1022 = -pkin(10) * t947 + t1024;
t1009 = -t670 * t822 + t817 * t857;
t816 = sin(qJ(6));
t978 = t1009 * t816;
t598 = t821 * t767 + t978;
t1021 = t1009 * t598;
t600 = t1009 * t821 - t767 * t816;
t1020 = t1009 * t600;
t1019 = t1009 * t767;
t1014 = t928 * t816;
t924 = qJDD(1) * t815;
t794 = qJDD(2) + t924;
t769 = t814 * t794;
t925 = qJD(1) * qJD(2);
t904 = t824 * t925;
t922 = t819 * qJDD(1);
t852 = t904 + t922;
t837 = t852 * t813;
t695 = t812 * t837 - t769;
t972 = t794 * t812;
t696 = t814 * t837 + t972;
t934 = qJD(4) * t818;
t596 = -t818 * t695 + t823 * t696 - t728 * t933 - t730 * t934;
t597 = -qJD(4) * t670 + t823 * t695 + t696 * t818;
t931 = qJD(5) * t822;
t932 = qJD(5) * t817;
t550 = t822 * t596 - t817 * t597 + t670 * t932 + t857 * t931;
t923 = qJDD(1) * t824;
t792 = t813 * t923;
t905 = t819 * t925;
t880 = t813 * t905;
t742 = qJDD(4) - t792 + t880;
t736 = qJDD(5) + t742;
t912 = t821 * t550 + t816 * t736 - t767 * t929;
t930 = qJD(6) * t816;
t533 = -t1009 * t930 + t912;
t531 = t533 * t816;
t899 = t550 * t816 - t821 * t736;
t534 = qJD(6) * t600 + t899;
t551 = qJD(5) * t1009 + t596 * t817 + t822 * t597;
t549 = qJDD(6) + t551;
t545 = t816 * t549;
t546 = t821 * t549;
t1018 = t736 * MDP(26) + (-t551 - t1019) * MDP(25) - t610 ^ 2 * MDP(23) + (t550 + t1025) * MDP(24) + (-MDP(22) * t610 + MDP(23) * t1009 + MDP(33) * t928) * t1009 + (-t1014 * t928 + t1021 + t546) * MDP(32) + (-t1026 * t600 + t531) * MDP(29) + (t1026 * t928 - t1020 + t545) * MDP(31) + (t1014 * t600 + t1026 * t598 + t533 * t821 - t816 * t534) * MDP(30);
t787 = pkin(8) * t909;
t745 = t819 * t919 + t787;
t713 = qJ(3) * t888 + t745;
t854 = -pkin(2) * t824 - qJ(3) * t819 - pkin(1);
t738 = t854 * t813;
t718 = qJD(1) * t738;
t653 = -t713 * t812 + t814 * t718;
t621 = -pkin(3) * t909 - pkin(9) * t730 + t653;
t654 = t814 * t713 + t812 * t718;
t625 = -pkin(9) * t728 + t654;
t579 = t823 * t621 - t625 * t818;
t567 = pkin(10) * t670 + t579;
t563 = -pkin(4) * t779 + t567;
t580 = t621 * t818 + t625 * t823;
t568 = pkin(10) * t857 + t580;
t982 = t568 * t817;
t539 = t563 * t822 - t982;
t537 = pkin(5) * t767 - t539;
t1017 = t537 * t610;
t1015 = t670 * t779;
t697 = t822 * t762 + t763 * t817;
t952 = -qJD(5) * t697 - t817 * t947 + t822 * t948;
t698 = -t762 * t817 + t763 * t822;
t951 = qJD(5) * t698 + t817 * t948 + t822 * t947;
t825 = cos(qJ(1));
t958 = t824 * t825;
t820 = sin(qJ(1));
t962 = t819 * t820;
t756 = -t815 * t962 + t958;
t809 = pkin(12) + qJ(4);
t807 = qJ(5) + t809;
t800 = sin(t807);
t801 = cos(t807);
t966 = t813 * t820;
t693 = -t756 * t800 + t801 * t966;
t964 = t813 * t825;
t967 = t813 * t819;
t960 = t820 * t824;
t961 = t819 * t825;
t754 = t815 * t961 + t960;
t974 = t754 * t800;
t1013 = g(3) * (-t800 * t967 + t801 * t815) + g(2) * (-t801 * t964 - t974) + g(1) * t693;
t571 = pkin(5) * t1009 - pkin(11) * t610;
t707 = -pkin(2) * t888 + qJD(3) - t744;
t669 = t728 * pkin(3) + t707;
t612 = -pkin(4) * t857 + t669;
t691 = t754 * t801 - t800 * t964;
t694 = t756 * t801 + t800 * t966;
t726 = t800 * t815 + t801 * t967;
t918 = pkin(1) * qJD(2) * t815;
t885 = qJD(1) * t918;
t917 = pkin(1) * t924;
t911 = pkin(8) * t792 + t819 * t917 + t824 * t885;
t836 = -pkin(8) * t880 + t911;
t661 = t794 * qJ(3) + qJD(3) * t888 + t836;
t833 = qJD(2) * t870 - qJD(3) * t819;
t668 = (qJD(1) * t833 + qJDD(1) * t854) * t813;
t601 = -t661 * t812 + t814 * t668;
t851 = t905 - t923;
t583 = pkin(3) * t813 * t851 - pkin(9) * t696 + t601;
t602 = t814 * t661 + t812 * t668;
t590 = -pkin(9) * t695 + t602;
t829 = -qJD(4) * t580 + t823 * t583 - t818 * t590;
t526 = pkin(4) * t742 - pkin(10) * t596 + t829;
t850 = -t818 * t583 - t823 * t590 - t621 * t933 + t625 * t934;
t528 = -pkin(10) * t597 - t850;
t884 = -t817 * t526 - t822 * t528 - t563 * t931 + t568 * t932;
t1012 = g(1) * t694 + g(2) * t691 + g(3) * t726 - t610 * t612 + t884;
t753 = -t815 * t958 + t962;
t1011 = t691 * t816 - t753 * t821;
t1010 = t691 * t821 + t753 * t816;
t1005 = t779 * t857;
t892 = -t823 * t774 - t775 * t818;
t680 = -pkin(10) * t763 + t892;
t681 = -pkin(10) * t762 + t946;
t858 = t680 * t822 - t681 * t817;
t1002 = qJD(5) * t858 + t1022 * t822 - t1023 * t817;
t619 = t680 * t817 + t681 * t822;
t1001 = qJD(5) * t619 + t1022 * t817 + t1023 * t822;
t747 = t812 * t967 - t815 * t814;
t748 = t812 * t815 + t814 * t967;
t683 = -t747 * t818 + t748 * t823;
t991 = pkin(1) * t819;
t945 = pkin(8) * t965 + t815 * t991;
t737 = qJ(3) * t815 + t945;
t675 = -t737 * t812 + t814 * t738;
t637 = -pkin(3) * t965 - pkin(9) * t748 + t675;
t676 = t814 * t737 + t812 * t738;
t646 = -pkin(9) * t747 + t676;
t897 = t823 * t637 - t646 * t818;
t575 = -pkin(4) * t965 - pkin(10) * t683 + t897;
t682 = t823 * t747 + t748 * t818;
t950 = t818 * t637 + t823 * t646;
t577 = -pkin(10) * t682 + t950;
t1000 = t817 * t575 + t822 * t577;
t705 = pkin(3) * t882 + t745;
t902 = pkin(4) * t947 - t705;
t999 = -pkin(2) * t794 + qJDD(3);
t981 = t568 * t822;
t540 = t563 * t817 + t981;
t538 = -pkin(11) * t767 + t540;
t559 = -pkin(5) * t610 - pkin(11) * t1009 + t612;
t866 = t538 * t816 - t559 * t821;
t998 = t1009 * t866 + t537 * t930;
t831 = -qJD(5) * t540 + t822 * t526 - t528 * t817;
t517 = -pkin(5) * t736 - t831;
t515 = t517 * t816;
t523 = t538 * t821 + t559 * t816;
t997 = t1009 * t523 + t1013 * t816 + t537 * t929 + t515;
t994 = -t1009 * t612 - t1013 + t831;
t640 = -qJD(2) * t842 - qJD(4) * t682;
t716 = t833 * t813;
t937 = qJD(2) * t819;
t908 = t813 * t937;
t855 = -pkin(8) * t908 + t824 * t918;
t724 = qJD(3) * t815 + t855;
t662 = t814 * t716 - t724 * t812;
t630 = qJD(2) * t846 + t662;
t663 = t812 * t716 + t814 * t724;
t936 = qJD(2) * t824;
t907 = t813 * t936;
t881 = t812 * t907;
t643 = -pkin(9) * t881 + t663;
t830 = -qJD(4) * t950 + t823 * t630 - t643 * t818;
t552 = pkin(4) * t908 - pkin(10) * t640 + t830;
t641 = qJD(2) * t843 + qJD(4) * t683;
t849 = t818 * t630 + t637 * t933 + t823 * t643 - t646 * t934;
t554 = -pkin(10) * t641 + t849;
t993 = -qJD(5) * t1000 + t552 * t822 - t554 * t817;
t826 = qJD(1) ^ 2;
t987 = g(1) * t825;
t984 = g(3) * t813;
t977 = t698 * t821;
t805 = sin(t809);
t973 = t754 * t805;
t971 = t794 * t815;
t970 = t801 * t816;
t969 = t801 * t821;
t808 = t813 ^ 2;
t968 = t808 * t826;
t963 = t816 * t824;
t959 = t821 * t824;
t955 = pkin(5) * t910 + t1001;
t746 = pkin(8) * t907 + t819 * t918;
t810 = t819 ^ 2;
t944 = -t824 ^ 2 + t810;
t939 = qJD(2) * t812;
t938 = qJD(2) * t814;
t926 = qJ(3) * qJDD(1);
t921 = 0.2e1 * t808;
t920 = g(3) * t965;
t916 = t824 * t968;
t915 = t813 * t963;
t914 = t813 * t959;
t706 = pkin(3) * t881 + t746;
t802 = -pkin(3) * t814 - pkin(2);
t906 = t813 * t815 * t826;
t903 = t813 * t922;
t516 = pkin(11) * t736 - t884;
t883 = -pkin(8) * t903 - qJD(2) * t787 - t819 * t885 + t824 * t917;
t674 = -t883 + t999;
t624 = pkin(3) * t695 + t674;
t572 = pkin(4) * t597 + t624;
t521 = pkin(5) * t551 - pkin(11) * t550 + t572;
t901 = -t816 * t516 + t821 * t521;
t896 = -t816 * t952 - t821 * t910;
t895 = t816 * t910 - t821 * t952;
t806 = cos(t809);
t893 = t754 * t806 - t805 * t964;
t803 = pkin(4) * t817 + pkin(11);
t889 = -pkin(4) * t670 + qJD(6) * t803 + t571;
t887 = qJD(2) + 0.2e1 * t940;
t886 = t794 + t924;
t541 = t567 * t817 + t981;
t879 = pkin(4) * t932 - t541;
t542 = t567 * t822 - t982;
t878 = -pkin(4) * t931 + t542;
t755 = t815 * t960 + t961;
t877 = g(1) * t755 + g(2) * t753;
t876 = -g(1) * t753 + g(2) * t755;
t875 = g(1) * t756 + g(2) * t754;
t874 = g(1) * t754 - g(2) * t756;
t873 = g(2) * t820 + t987;
t735 = pkin(4) * t762 + t802;
t620 = pkin(5) * t697 - pkin(11) * t698 + t735;
t872 = pkin(11) * t910 - qJD(6) * t620 - t1002;
t871 = -pkin(5) * t951 + pkin(11) * t952 + qJD(6) * t619 - t902;
t868 = t821 * t516 + t816 * t521;
t867 = -t803 * t549 - t1017;
t544 = -pkin(11) * t965 + t1000;
t622 = t822 * t682 + t683 * t817;
t623 = -t682 * t817 + t683 * t822;
t795 = pkin(8) * t967;
t740 = t795 + (-pkin(1) * t824 - pkin(2)) * t815;
t689 = pkin(3) * t747 + t740;
t628 = pkin(4) * t682 + t689;
t561 = pkin(5) * t622 - pkin(11) * t623 + t628;
t865 = t544 * t821 + t561 * t816;
t864 = -t544 * t816 + t561 * t821;
t862 = t575 * t822 - t577 * t817;
t615 = pkin(4) * t641 + t706;
t853 = -t674 + t877;
t613 = t623 * t816 + t914;
t848 = t817 * t552 + t822 * t554 + t575 * t931 - t577 * t932;
t845 = t698 * t929 - t896;
t844 = -t698 * t930 - t895;
t841 = -t877 + t920;
t840 = -g(3) * t967 - t875;
t839 = -t517 - t1013;
t838 = -qJ(3) * t937 + (qJD(3) - t707) * t824;
t835 = t877 + t883;
t804 = -pkin(4) * t822 - pkin(5);
t700 = t756 * t806 + t805 * t966;
t699 = -t756 * t805 + t806 * t966;
t657 = t694 * t821 + t755 * t816;
t656 = -t694 * t816 + t755 * t821;
t614 = t623 * t821 - t915;
t566 = qJD(5) * t623 + t640 * t817 + t822 * t641;
t565 = -qJD(5) * t622 + t640 * t822 - t641 * t817;
t556 = -qJD(6) * t915 + t565 * t816 + t623 * t929 - t821 * t908;
t555 = -qJD(6) * t613 + t565 * t821 + t816 * t908;
t543 = pkin(5) * t965 - t862;
t529 = pkin(5) * t566 - pkin(11) * t565 + t615;
t519 = -pkin(5) * t908 - t993;
t518 = pkin(11) * t908 + t848;
t514 = -qJD(6) * t523 + t901;
t513 = -qJD(6) * t866 + t868;
t1 = [((qJDD(1) * t810 + 0.2e1 * t819 * t904) * MDP(4) + 0.2e1 * (t824 * t922 - t925 * t944) * MDP(5)) * t808 + (-g(1) * t974 - g(2) * t693 - t1000 * t736 + t1009 * t615 + t628 * t550 + t612 * t565 + t572 * t623 + t848 * t767) * MDP(28) + (t1009 * t565 + t550 * t623) * MDP(22) + (-t596 * t682 - t597 * t683 + t640 * t857 + t641 * t670) * MDP(16) + (t596 * t683 - t640 * t670) * MDP(15) + (-g(1) * t973 - g(2) * t699 + t689 * t596 + t624 * t683 + t669 * t640 - t670 * t706 - t950 * t742 + t849 * t779) * MDP(21) + (t641 * t779 - t682 * t742) * MDP(18) + (-t640 * t779 + t683 * t742) * MDP(17) + (-t565 * t767 + t623 * t736) * MDP(24) + (t566 * t767 - t622 * t736) * MDP(25) + (-t534 * t622 - t549 * t613 + t556 * t928 - t566 * t598) * MDP(32) + (t533 * t622 + t549 * t614 - t555 * t928 + t566 * t600) * MDP(31) + (t549 * t622 - t566 * t928) * MDP(33) + (g(1) * t820 - g(2) * t825) * MDP(2) + qJDD(1) * MDP(1) + (g(1) * t893 - g(2) * t700 + t689 * t597 + t624 * t682 + t669 * t641 - t706 * t857 + t897 * t742 - t830 * t779) * MDP(20) + (t602 * t676 + t654 * t663 + t601 * t675 + t653 * t662 + t674 * t740 + t707 * t746 - g(1) * (-pkin(1) * t820 - pkin(2) * t754 + pkin(8) * t964 - qJ(3) * t753) - g(2) * (pkin(1) * t825 + pkin(2) * t756 + pkin(8) * t966 + qJ(3) * t755)) * MDP(14) + (-t746 * t888 - t795 * t794 + t883 * t815 + (t824 * t971 - t851 * t921) * pkin(1) + t874) * MDP(9) + (-(-qJD(6) * t865 - t518 * t816 + t529 * t821) * t928 + t864 * t549 + t514 * t622 - t866 * t566 + t519 * t598 + t543 * t534 + t517 * t613 + t537 * t556 + g(1) * t1010 - g(2) * t657) * MDP(34) + ((qJD(6) * t864 + t518 * t821 + t529 * t816) * t928 - t865 * t549 - t513 * t622 - t523 * t566 + t519 * t600 + t543 * t533 + t517 * t614 + t537 * t555 - g(1) * t1011 - g(2) * t656) * MDP(35) + ((-t580 * t937 - t806 * t987 - t824 * t850) * MDP(21) + (-t540 * t937 - t801 * t987 - t824 * t884) * MDP(28) + (t1009 * t937 - t550 * t824) * MDP(24) + (-t873 * t814 + (-qJD(1) * t676 - t654) * t937 + (qJD(1) * t663 + qJDD(1) * t676 + t707 * t938 + t602) * t824) * MDP(12) + (-t873 * t812 + (qJD(1) * t675 + t653) * t937 + (-qJD(1) * t662 - qJDD(1) * t675 + t707 * t939 - t601) * t824) * MDP(11) + (t551 * t824 + t610 * t937) * MDP(25) + (t579 * t937 - t824 * t829) * MDP(20) + (t539 * t937 - t824 * t831) * MDP(27) + (-t596 * t824 - t670 * t937) * MDP(17) + (t597 * t824 + t857 * t937) * MDP(18) + (t819 * t886 + t887 * t936) * MDP(6) + (t824 * t886 - t887 * t937) * MDP(7) + (-t742 * t824 - t779 * t937) * MDP(19) + (-t736 * t824 - t767 * t937) * MDP(26)) * t813 + (-t1009 * t566 - t550 * t622 - t551 * t623 + t565 * t610) * MDP(23) + (g(1) * t691 - g(2) * t694 + t628 * t551 + t612 * t566 + t572 * t622 - t610 * t615 + t862 * t736 - t767 * t993) * MDP(27) + t873 * MDP(3) + (-t533 * t613 - t534 * t614 - t555 * t598 - t556 * t600) * MDP(30) + (t533 * t614 + t555 * t600) * MDP(29) + (-t601 * t748 - t602 * t747 - t662 * t730 - t663 * t728 - t675 * t696 - t676 * t695 + (-t653 * t814 - t654 * t812) * t907 - t876) * MDP(13) + (-pkin(1) * t852 * t921 - t794 * t945 - t815 * t836 - t855 * t888 + t876) * MDP(10) + MDP(8) * t971 + (t674 * t748 + t740 * t696 + t746 * t730 - t874 * t812) * MDP(12) + (t674 * t747 + t740 * t695 + t746 * t728 + t874 * t814) * MDP(11); (t742 * t763 - t779 * t948) * MDP(17) + (t1009 * t952 + t550 * t698) * MDP(22) + (t1002 * t767 + t1009 * t902 + t735 * t550 + t572 * t698 + t952 * t612 - t619 * t736 + t841 * t800) * MDP(28) + (-(t619 * t821 + t620 * t816) * t549 - t513 * t697 - t858 * t533 + t517 * t977 - g(1) * (t755 * t970 + t756 * t821) - g(2) * (t753 * t970 + t754 * t821) - (-t801 * t963 + t819 * t821) * t984 - (t816 * t871 + t821 * t872) * t928 + t955 * t600 - t951 * t523 + t844 * t537) * MDP(35) + ((-t619 * t816 + t620 * t821) * t549 + t514 * t697 - t858 * t534 + t698 * t515 - g(1) * (-t755 * t969 + t756 * t816) - g(2) * (-t753 * t969 + t754 * t816) - (t801 * t959 + t816 * t819) * t984 - (t816 * t872 - t821 * t871) * t928 + t955 * t598 - t951 * t866 + t845 * t537) * MDP(34) + (t596 * t763 - t670 * t948) * MDP(15) + (-t596 * t762 - t597 * t763 + t670 * t947 + t857 * t948) * MDP(16) + (-t534 * t697 - t545 * t698 - t598 * t951 + t845 * t928) * MDP(32) + (t549 * t697 - t928 * t951) * MDP(33) + (t533 * t697 + t546 * t698 + t600 * t951 - t844 * t928) * MDP(31) + (-t742 * t762 + t779 * t947) * MDP(18) + (t896 * t600 + t895 * t598 + (-t531 - t534 * t821 + (t598 * t816 - t600 * t821) * qJD(6)) * t698) * MDP(30) + (t1024 * t779 + t802 * t596 + t624 * t763 + t948 * t669 + t705 * t670 - t946 * t742 + t841 * t805) * MDP(21) + t944 * MDP(5) * t968 + (-pkin(2) * t696 - t730 * t745 - t853 * t812 + ((g(3) * t812 + t814 * t926) * t824 + (t654 * t819 - t678 * t824 + t814 * t838) * qJD(1)) * t813) * MDP(12) + (-pkin(2) * t695 - t728 * t745 + t853 * t814 + ((-g(3) * t814 + t812 * t926) * t824 + (-t653 * t819 + t677 * t824 + t812 * t838) * qJD(1)) * t813) * MDP(11) + (t892 * t742 + t802 * t597 + t624 * t762 + t705 * t857 + (t645 + t856 * t823 + (-qJD(4) * t774 + t1027) * t818) * t779 + t947 * t669 - t841 * t806) * MDP(20) + (pkin(1) * t916 + t744 * t888 + (pkin(8) * t925 + g(3)) * t967 + t875 - t911) * MDP(10) + (t533 * t977 + t600 * t844) * MDP(29) + (t698 * t736 - t767 * t952) * MDP(24) + (MDP(17) * t670 - MDP(18) * t857 + t779 * MDP(19) - t579 * MDP(20) + t580 * MDP(21) - MDP(24) * t1009 - MDP(25) * t610 + t767 * MDP(26) - t539 * MDP(27) + t540 * MDP(28)) * t910 + (-t1009 * t951 - t550 * t697 - t551 * t698 + t610 * t952) * MDP(23) + (t1001 * t767 + t735 * t551 + t572 * t697 - t610 * t902 + t951 * t612 + t736 * t858 - t841 * t801) * MDP(27) + t794 * MDP(8) + (-t697 * t736 + t767 * t951) * MDP(25) + (-t824 * t906 + t903) * MDP(6) + (t819 * t906 + t792) * MDP(7) + (-t653 * t677 - t654 * t678 - t707 * t745 + (-t653 * t812 + t654 * t814) * qJD(3) + (-t674 - t841) * pkin(2) + (-t601 * t812 + t602 * t814 + t840) * qJ(3)) * MDP(14) - t819 * MDP(4) * t916 + (t745 * t888 + t968 * t991 + t835 - t920) * MDP(9) + (t677 * t730 + t678 * t728 + (-qJ(3) * t695 - qJD(3) * t728 + t653 * t909 + t602) * t814 + (qJ(3) * t696 + qJD(3) * t730 + t654 * t909 - t601) * t812 + t840) * MDP(13); -t769 * MDP(11) + MDP(12) * t972 + (-t728 ^ 2 - t730 ^ 2) * MDP(13) + (t653 * t730 + t654 * t728 - t835 + t999) * MDP(14) + (t597 + t1015) * MDP(20) + (t596 - t1005) * MDP(21) + (t551 - t1019) * MDP(27) + (t550 - t1025) * MDP(28) + (t546 - t1021) * MDP(34) + (-t545 - t1020) * MDP(35) + ((MDP(11) * t812 + MDP(12) * t814) * t922 + (g(3) * MDP(14) + ((-t730 + t939) * MDP(11) + (t728 + t938) * MDP(12)) * qJD(1)) * t824) * t813 - (MDP(34) * t816 + MDP(35) * t821) * t928 ^ 2; (t804 * t534 + t879 * t598 + (-t878 * t928 + t867) * t816 + (t889 * t928 + t839) * t821 + t998) * MDP(34) + (t804 * t533 + t867 * t821 + t879 * t600 - (t816 * t889 + t821 * t878) * t928 + t997) * MDP(35) + (-t597 + t1015) * MDP(18) + (-t580 * t779 + t669 * t670 - g(1) * t699 - g(2) * (-t806 * t964 - t973) - g(3) * (-t805 * t967 + t806 * t815) + t829) * MDP(20) + (-t541 * t767 + (-t610 * t670 + t736 * t822 + t767 * t932) * pkin(4) + t994) * MDP(27) + (-t542 * t767 + (t1009 * t670 - t736 * t817 + t767 * t931) * pkin(4) + t1012) * MDP(28) + t670 * t857 * MDP(15) + (t670 ^ 2 - t857 ^ 2) * MDP(16) + (t596 + t1005) * MDP(17) + (-t579 * t779 - t669 * t857 + g(1) * t700 + g(2) * t893 - g(3) * (-t805 * t815 - t806 * t967) + t850) * MDP(21) + t742 * MDP(19) + t1018; (-t540 * t767 + t994) * MDP(27) + (-t539 * t767 + t1012) * MDP(28) + (-pkin(5) * t534 - t540 * t598 + (-pkin(11) * t549 - t539 * t928 - t1017) * t816 + (-(-pkin(11) * qJD(6) - t571) * t928 + t839) * t821 + t998) * MDP(34) + (-pkin(5) * t533 - (t539 * t821 + t571 * t816) * t928 - t540 * t600 - t537 * t1016 + (-t928 * t930 - t546) * pkin(11) + t997) * MDP(35) + t1018; t600 * t598 * MDP(29) + (-t598 ^ 2 + t600 ^ 2) * MDP(30) + (-t598 * t928 + t912) * MDP(31) + (-t600 * t928 - t899) * MDP(32) + t549 * MDP(33) + (-t523 * t928 - t537 * t600 - g(1) * t656 + g(2) * t1011 - g(3) * (-t726 * t816 - t914) + t901) * MDP(34) + (t866 * t928 + t537 * t598 + g(1) * t657 + g(2) * t1010 - g(3) * (-t726 * t821 + t915) - t868) * MDP(35) + (-MDP(31) * t978 - MDP(32) * t600 - MDP(34) * t523 + MDP(35) * t866) * qJD(6);];
tau  = t1;
