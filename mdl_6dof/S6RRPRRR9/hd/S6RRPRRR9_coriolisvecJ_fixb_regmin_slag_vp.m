% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR9_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR9_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:14:04
% EndTime: 2019-03-09 14:14:26
% DurationCPUTime: 9.67s
% Computational Cost: add. (15852->522), mult. (41628->749), div. (0->0), fcn. (35310->12), ass. (0->266)
t264 = sin(qJ(2));
t268 = cos(qJ(2));
t303 = pkin(2) * t264 - qJ(3) * t268;
t258 = sin(pkin(6));
t349 = qJD(1) * t258;
t206 = t303 * t349;
t331 = t264 * t349;
t260 = cos(pkin(6));
t348 = qJD(1) * t260;
t336 = pkin(1) * t348;
t207 = -pkin(8) * t331 + t268 * t336;
t257 = sin(pkin(12));
t259 = cos(pkin(12));
t156 = t257 * t206 + t259 * t207;
t347 = qJD(1) * t268;
t330 = t258 * t347;
t310 = t257 * t330;
t145 = -pkin(9) * t310 + t156;
t421 = qJD(3) * t259 - t145;
t263 = sin(qJ(4));
t267 = cos(qJ(4));
t359 = t267 * t259;
t222 = t257 * t263 - t359;
t361 = t258 * t268;
t280 = t222 * t361;
t181 = qJD(1) * t280;
t213 = t222 * qJD(4);
t420 = t213 - t181;
t223 = t257 * t267 + t259 * t263;
t281 = t223 * t361;
t180 = qJD(1) * t281;
t214 = t223 * qJD(4);
t352 = t214 - t180;
t265 = cos(qJ(6));
t339 = qJD(6) * t265;
t313 = qJD(2) + t348;
t192 = t257 * t331 - t259 * t313;
t194 = t257 * t313 + t259 * t331;
t149 = t192 * t263 - t194 * t267;
t262 = sin(qJ(5));
t266 = cos(qJ(5));
t292 = -t192 * t267 - t263 * t194;
t85 = t149 * t262 + t266 * t292;
t406 = t265 * t85;
t419 = -t339 + t406;
t239 = -qJD(4) + t330;
t229 = -qJD(5) + t239;
t418 = t229 * t85;
t358 = -qJD(6) + t85;
t155 = t259 * t206 - t207 * t257;
t360 = t259 * t268;
t284 = t258 * (pkin(3) * t264 - pkin(9) * t360);
t133 = qJD(1) * t284 + t155;
t376 = pkin(9) + qJ(3);
t234 = t376 * t257;
t235 = t376 * t259;
t290 = qJD(3) * t257 + qJD(4) * t235;
t343 = qJD(4) * t267;
t417 = -t234 * t343 + t421 * t267 + (-t133 - t290) * t263;
t399 = -t149 * t266 + t262 * t292;
t261 = sin(qJ(6));
t74 = t265 * t229 + t261 * t399;
t416 = t399 * t74;
t415 = -pkin(10) * t352 + t417;
t131 = t267 * t133;
t351 = -t263 * t234 + t267 * t235;
t414 = -pkin(4) * t331 + pkin(10) * t420 - t223 * qJD(3) - t351 * qJD(4) + t263 * t145 - t131;
t413 = t229 * t399;
t295 = t229 * t261 - t265 * t399;
t412 = t295 * t399;
t338 = qJD(1) * qJD(2);
t326 = t258 * t338;
t240 = t264 * t326;
t340 = qJD(6) * t261;
t308 = t268 * t326;
t291 = t257 * t308;
t106 = -t192 * t343 + t308 * t359 + (-qJD(4) * t194 - t291) * t263;
t278 = qJD(2) * t281;
t389 = qJD(4) * t149;
t107 = qJD(1) * t278 - t389;
t341 = qJD(5) * t266;
t342 = qJD(5) * t262;
t45 = t266 * t106 - t262 * t107 + t149 * t342 + t292 * t341;
t29 = -t229 * t339 + t261 * t240 + t265 * t45 - t340 * t399;
t27 = t29 * t261;
t411 = t295 * t419 + t27;
t46 = qJD(5) * t399 + t106 * t262 + t266 * t107;
t42 = t261 * t46;
t374 = -t339 * t358 + t42;
t410 = t358 * t406 + t374 + t412;
t403 = t261 * t358;
t44 = t265 * t46;
t409 = -t358 * t403 + t416 + t44;
t30 = -qJD(6) * t295 - t265 * t240 + t261 * t45;
t408 = -t261 * t30 + t29 * t265 - t295 * t403 + t419 * t74;
t208 = pkin(8) * t330 + t264 * t336;
t182 = qJ(3) * t313 + t208;
t202 = (-pkin(2) * t268 - qJ(3) * t264 - pkin(1)) * t258;
t187 = qJD(1) * t202;
t139 = t259 * t182 + t257 * t187;
t108 = -pkin(9) * t192 + t139;
t138 = -t182 * t257 + t259 * t187;
t98 = -pkin(3) * t330 - pkin(9) * t194 + t138;
t66 = t108 * t267 + t263 * t98;
t55 = pkin(10) * t292 + t66;
t371 = t262 * t55;
t65 = -t108 * t263 + t267 * t98;
t54 = pkin(10) * t149 + t65;
t50 = -pkin(4) * t239 + t54;
t17 = t266 * t50 - t371;
t15 = pkin(5) * t229 - t17;
t407 = t15 * t85;
t405 = t399 * t85;
t404 = t149 * t239;
t163 = t266 * t222 + t223 * t262;
t119 = -qJD(5) * t163 - t213 * t266 - t214 * t262;
t137 = -t180 * t262 - t181 * t266;
t357 = t119 - t137;
t164 = -t222 * t262 + t223 * t266;
t356 = qJD(5) * t164 - t262 * t420 + t266 * t352;
t402 = t399 ^ 2 - t85 ^ 2;
t58 = pkin(5) * t399 - pkin(11) * t85;
t401 = t45 + t418;
t185 = (qJD(2) * t303 - qJD(3) * t264) * t258;
t171 = qJD(1) * t185;
t335 = pkin(1) * qJD(2) * t260;
t311 = qJD(1) * t335;
t286 = -pkin(8) * t240 + t268 * t311;
t172 = qJD(3) * t313 + t286;
t129 = t257 * t171 + t259 * t172;
t109 = -pkin(9) * t291 + t129;
t128 = t259 * t171 - t172 * t257;
t279 = qJD(2) * t284;
t99 = qJD(1) * t279 + t128;
t274 = -qJD(4) * t66 - t263 * t109 + t267 * t99;
t23 = pkin(4) * t240 - pkin(10) * t106 + t274;
t344 = qJD(4) * t263;
t287 = -t108 * t344 + t267 * t109 + t263 * t99 + t98 * t343;
t25 = -pkin(10) * t107 + t287;
t322 = -t262 * t23 - t266 * t25 - t50 * t341 + t55 * t342;
t177 = -pkin(2) * t313 + qJD(3) - t207;
t148 = t192 * pkin(3) + t177;
t87 = -pkin(4) * t292 + t148;
t400 = -t85 * t87 + t322;
t252 = pkin(4) * t262 + pkin(11);
t396 = (-pkin(4) * t149 + qJD(6) * t252 + t58) * t358;
t395 = t358 * t399;
t315 = -t267 * t234 - t235 * t263;
t158 = -pkin(10) * t223 + t315;
t159 = -pkin(10) * t222 + t351;
t96 = t158 * t262 + t159 * t266;
t394 = qJD(5) * t96 + t415 * t262 - t414 * t266;
t293 = t158 * t266 - t159 * t262;
t393 = qJD(5) * t293 + t414 * t262 + t415 * t266;
t392 = t239 * t292;
t379 = pkin(1) * t264;
t201 = pkin(8) * t361 + (qJ(3) + t379) * t260;
t153 = -t201 * t257 + t259 * t202;
t362 = t258 * t264;
t211 = t257 * t260 + t259 * t362;
t121 = -pkin(3) * t361 - pkin(9) * t211 + t153;
t154 = t259 * t201 + t257 * t202;
t210 = t257 * t362 - t260 * t259;
t132 = -pkin(9) * t210 + t154;
t355 = t263 * t121 + t267 * t132;
t175 = pkin(3) * t310 + t208;
t325 = t352 * pkin(4) - t175;
t368 = t266 * t55;
t18 = t262 * t50 + t368;
t16 = -pkin(11) * t229 + t18;
t41 = -pkin(5) * t85 - pkin(11) * t399 + t87;
t302 = t16 * t261 - t265 * t41;
t388 = t15 * t340 + t302 * t399;
t275 = -qJD(5) * t18 + t266 * t23 - t262 * t25;
t5 = -pkin(5) * t240 - t275;
t9 = t16 * t265 + t261 * t41;
t387 = t15 * t339 + t5 * t261 + t399 * t9;
t385 = -t399 * t87 + t275;
t251 = -pkin(3) * t259 - pkin(2);
t199 = pkin(4) * t222 + t251;
t97 = pkin(5) * t163 - pkin(11) * t164 + t199;
t383 = (-pkin(5) * t356 + pkin(11) * t357 + qJD(6) * t96 - t325) * t358 + t97 * t46;
t382 = -t46 - t413;
t161 = -t210 * t263 + t211 * t267;
t316 = t267 * t121 - t132 * t263;
t61 = -pkin(4) * t361 - pkin(10) * t161 + t316;
t160 = t267 * t210 + t211 * t263;
t63 = -pkin(10) * t160 + t355;
t297 = t262 * t61 + t266 * t63;
t124 = -qJD(2) * t280 - qJD(4) * t160;
t346 = qJD(2) * t264;
t329 = t258 * t346;
t289 = -pkin(8) * t329 + t268 * t335;
t191 = qJD(3) * t260 + t289;
t142 = t259 * t185 - t191 * t257;
t114 = t142 + t279;
t143 = t257 * t185 + t259 * t191;
t328 = qJD(2) * t361;
t309 = t257 * t328;
t127 = -pkin(9) * t309 + t143;
t272 = -t355 * qJD(4) + t267 * t114 - t127 * t263;
t34 = pkin(4) * t329 - pkin(10) * t124 + t272;
t125 = qJD(4) * t161 + t278;
t285 = t263 * t114 + t121 * t343 + t267 * t127 - t132 * t344;
t36 = -pkin(10) * t125 + t285;
t381 = -qJD(5) * t297 - t262 * t36 + t266 * t34;
t200 = pkin(8) * t308 + t264 * t311;
t167 = pkin(3) * t291 + t200;
t77 = pkin(4) * t107 + t167;
t11 = pkin(5) * t46 - pkin(11) * t45 + t77;
t4 = pkin(11) * t240 - t322;
t1 = -qJD(6) * t302 + t11 * t261 + t265 * t4;
t269 = qJD(1) ^ 2;
t373 = pkin(5) * t331 + t394;
t367 = t138 * t264;
t366 = t139 * t264;
t365 = t164 * t265;
t254 = t258 ^ 2;
t364 = t254 * t269;
t363 = t257 * t268;
t209 = pkin(8) * t328 + t264 * t335;
t350 = t264 ^ 2 - t268 ^ 2;
t334 = t268 * t364;
t333 = t261 * t361;
t176 = pkin(3) * t309 + t209;
t332 = t254 * t347;
t327 = t254 * t338;
t323 = t358 ^ 2;
t314 = 0.2e1 * t327;
t312 = qJD(2) + 0.2e1 * t348;
t19 = t262 * t54 + t368;
t307 = pkin(4) * t342 - t19;
t305 = -0.2e1 * pkin(1) * t327;
t32 = -pkin(11) * t361 + t297;
t100 = t266 * t160 + t161 * t262;
t101 = -t160 * t262 + t161 * t266;
t204 = pkin(8) * t362 + (-pkin(1) * t268 - pkin(2)) * t260;
t162 = pkin(3) * t210 + t204;
t112 = pkin(4) * t160 + t162;
t48 = pkin(5) * t100 - pkin(11) * t101 + t112;
t301 = t261 * t48 + t265 * t32;
t300 = -t261 * t32 + t265 * t48;
t298 = -t262 * t63 + t266 * t61;
t90 = pkin(4) * t125 + t176;
t88 = t101 * t261 + t265 * t361;
t288 = t262 * t34 + t266 * t36 + t61 * t341 - t342 * t63;
t117 = t137 * t261 - t265 * t331;
t283 = t119 * t261 + t164 * t339 - t117;
t118 = t137 * t265 + t261 * t331;
t282 = t119 * t265 - t164 * t340 - t118;
t2 = -qJD(6) * t9 + t265 * t11 - t261 * t4;
t276 = -qJ(3) * t346 + (-qJD(2) * pkin(2) + qJD(3) - t177) * t268;
t273 = t5 * t164 - t96 * t46 - (pkin(11) * t331 - qJD(6) * t97 - t393) * t358;
t20 = t266 * t54 - t371;
t271 = -t407 - t252 * t46 - (-pkin(4) * t341 + t20) * t358;
t253 = -pkin(4) * t266 - pkin(5);
t89 = t101 * t265 - t333;
t53 = qJD(5) * t101 + t124 * t262 + t266 * t125;
t52 = -qJD(5) * t100 + t124 * t266 - t125 * t262;
t38 = -qJD(6) * t333 + t101 * t339 + t261 * t52 - t265 * t329;
t37 = -qJD(6) * t88 + t261 * t329 + t265 * t52;
t31 = pkin(5) * t361 - t298;
t12 = pkin(5) * t53 - pkin(11) * t52 + t90;
t7 = -pkin(5) * t329 - t381;
t6 = pkin(11) * t329 + t288;
t3 = [0, 0, 0, t264 * t268 * t314, -t350 * t314, t312 * t328, -t312 * t329, 0, -t200 * t260 - t209 * t313 + t264 * t305, -t260 * t286 + t268 * t305 - t289 * t313, t192 * t209 + t200 * t210 + ((-qJD(1) * t142 - t128) * t268 + (t177 * t363 + t367 + (t153 * t264 + t204 * t363) * qJD(1)) * qJD(2)) * t258, t194 * t209 + t200 * t211 + ((qJD(1) * t143 + t129) * t268 + (t177 * t360 - t366 + (-t154 * t264 + t204 * t360) * qJD(1)) * qJD(2)) * t258, -t128 * t211 - t129 * t210 - t142 * t194 - t143 * t192 + (-t138 * t259 - t139 * t257 + (-t153 * t259 - t154 * t257) * qJD(1)) * t328, t128 * t153 + t129 * t154 + t138 * t142 + t139 * t143 + t177 * t209 + t200 * t204, t106 * t161 - t124 * t149, -t106 * t160 - t107 * t161 + t124 * t292 + t125 * t149, -t124 * t239 + (-t106 * t268 + (qJD(1) * t161 - t149) * t346) * t258, t125 * t239 + (t107 * t268 + (-qJD(1) * t160 + t292) * t346) * t258 (-t239 * t258 - t332) * t346, -t272 * t239 - t176 * t292 + t162 * t107 + t167 * t160 + t148 * t125 + (-t274 * t268 + (qJD(1) * t316 + t65) * t346) * t258, t285 * t239 - t176 * t149 + t162 * t106 + t167 * t161 + t148 * t124 + (t287 * t268 + (-qJD(1) * t355 - t66) * t346) * t258, t101 * t45 + t399 * t52, -t100 * t45 - t101 * t46 - t399 * t53 + t52 * t85, -t229 * t52 + (-t268 * t45 + (qJD(1) * t101 + t399) * t346) * t258, t229 * t53 + (t268 * t46 + (-qJD(1) * t100 + t85) * t346) * t258 (-t229 * t258 - t332) * t346, -t381 * t229 - t90 * t85 + t112 * t46 + t77 * t100 + t87 * t53 + (-t275 * t268 + (qJD(1) * t298 + t17) * t346) * t258, t288 * t229 + t90 * t399 + t112 * t45 + t77 * t101 + t87 * t52 + (-t322 * t268 + (-qJD(1) * t297 - t18) * t346) * t258, t29 * t89 - t295 * t37, -t29 * t88 + t295 * t38 - t30 * t89 - t37 * t74, t100 * t29 - t295 * t53 - t358 * t37 + t46 * t89, -t100 * t30 + t358 * t38 - t46 * t88 - t53 * t74, t100 * t46 - t358 * t53 -(-qJD(6) * t301 + t12 * t265 - t261 * t6) * t358 + t300 * t46 + t2 * t100 - t302 * t53 + t7 * t74 + t31 * t30 + t5 * t88 + t15 * t38 (qJD(6) * t300 + t12 * t261 + t265 * t6) * t358 - t301 * t46 - t1 * t100 - t9 * t53 - t7 * t295 + t31 * t29 + t5 * t89 + t15 * t37; 0, 0, 0, -t264 * t334, t350 * t364, -t260 * t269 * t361, t313 * t331 - t240, 0, t208 * t313 + t364 * t379 - t200, pkin(1) * t334 + t207 * t313 - t286, -t192 * t208 - t200 * t259 + (t155 * t268 + t257 * t276 - t367) * t349, -t194 * t208 + t200 * t257 + (-t156 * t268 + t259 * t276 + t366) * t349, t155 * t194 + t156 * t192 + (-qJD(3) * t192 + t138 * t330 + t129) * t259 + (qJD(3) * t194 + t139 * t330 - t128) * t257, -pkin(2) * t200 - t138 * t155 - t139 * t156 - t177 * t208 + (-t138 * t257 + t139 * t259) * qJD(3) + (-t128 * t257 + t129 * t259) * qJ(3), t106 * t223 + t149 * t420, -t106 * t222 - t107 * t223 + t149 * t352 - t292 * t420, t420 * t239 + (qJD(2) * t223 + t149) * t331, t352 * t239 + (-qJD(2) * t222 - t292) * t331, t239 * t331, t251 * t107 + t175 * t292 + t167 * t222 + (t131 + t290 * t267 + (-qJD(4) * t234 + t421) * t263) * t239 + t352 * t148 + (qJD(2) * t315 - t65) * t331, t251 * t106 + t175 * t149 + t167 * t223 + t417 * t239 - t420 * t148 + (-qJD(2) * t351 + t66) * t331, t164 * t45 + t357 * t399, -t163 * t45 - t164 * t46 - t356 * t399 + t357 * t85, -t357 * t229 + (qJD(2) * t164 - t399) * t331, t356 * t229 + (-qJD(2) * t163 - t85) * t331, t229 * t331, t77 * t163 + t199 * t46 + t356 * t87 - t325 * t85 + t394 * t229 + (qJD(2) * t293 - t17) * t331, t77 * t164 + t199 * t45 + t357 * t87 + t325 * t399 + t393 * t229 + (-qJD(2) * t96 + t18) * t331, -t282 * t295 + t29 * t365, -t117 * t295 + t118 * t74 + (t261 * t295 - t265 * t74) * t119 + (-t27 - t265 * t30 + (t261 * t74 + t265 * t295) * qJD(6)) * t164, t163 * t29 - t282 * t358 - t295 * t356 + t365 * t46, -t163 * t30 - t164 * t42 + t283 * t358 - t356 * t74, t163 * t46 - t356 * t358, t283 * t15 + t2 * t163 + t273 * t261 + t265 * t383 - t293 * t30 - t302 * t356 + t373 * t74, -t1 * t163 + t282 * t15 - t261 * t383 + t273 * t265 - t29 * t293 - t295 * t373 - t356 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t257 * qJD(2) - t194) * t330 (qJD(2) * t259 + t192) * t330, -t192 ^ 2 - t194 ^ 2, t138 * t194 + t139 * t192 + t200, 0, 0, 0, 0, 0, t107 + t404, t106 - t392, 0, 0, 0, 0, 0, t46 - t413, t45 - t418, 0, 0, 0, 0, 0, -t261 * t323 - t416 + t44, -t265 * t323 + t412 - t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149 * t292, t149 ^ 2 - t292 ^ 2, t106 + t392, -t223 * t308 + t389 + t404, t240, t148 * t149 - t239 * t66 + t274, -t148 * t292 - t239 * t65 - t287, -t405, t402, t401, t382, t240, -t19 * t229 + (-t149 * t85 + t229 * t342 + t240 * t266) * pkin(4) + t385, -t20 * t229 + (t149 * t399 + t229 * t341 - t240 * t262) * pkin(4) + t400, t411, t408, t410, t409, t395, t253 * t30 + t307 * t74 + (-t5 + t396) * t265 + t271 * t261 + t388, t253 * t29 - t261 * t396 + t265 * t271 - t295 * t307 + t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t405, t402, t401, t382, t240, -t18 * t229 + t385, -t17 * t229 + t400, t411, t408, t410, t409, t395, -pkin(5) * t30 - t5 * t265 + (-t17 * t261 + t265 * t58) * t358 - t18 * t74 - t261 * t407 - t374 * pkin(11) + t388, -pkin(5) * t29 - (t17 * t265 + t261 * t58) * t358 + t18 * t295 - t15 * t406 + (-t340 * t358 - t44) * pkin(11) + t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295 * t74, t295 ^ 2 - t74 ^ 2, -t358 * t74 + t29, t295 * t358 - t30, t46, t15 * t295 - t358 * t9 + t2, t15 * t74 + t302 * t358 - t1;];
tauc_reg  = t3;
