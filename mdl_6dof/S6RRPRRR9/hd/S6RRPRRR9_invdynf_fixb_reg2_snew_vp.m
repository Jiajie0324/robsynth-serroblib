% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 23:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 23:11:59
% EndTime: 2019-05-06 23:12:14
% DurationCPUTime: 15.81s
% Computational Cost: add. (197222->380), mult. (450341->584), div. (0->0), fcn. (373562->14), ass. (0->326)
t2649 = sin(pkin(6));
t2662 = qJD(1) ^ 2;
t2736 = t2649 * t2662;
t2651 = cos(pkin(6));
t2703 = qJD(1) * t2651 + qJD(2);
t2695 = t2703 ^ 2;
t2648 = sin(pkin(12));
t2650 = cos(pkin(12));
t2655 = sin(qJ(2));
t2714 = t2649 * t2655;
t2707 = qJD(1) * t2714;
t2614 = t2648 * t2707 - t2650 * t2703;
t2615 = t2648 * t2703 + t2650 * t2707;
t2654 = sin(qJ(4));
t2659 = cos(qJ(4));
t2589 = t2614 * t2659 + t2615 * t2654;
t2591 = -t2614 * t2654 + t2615 * t2659;
t2653 = sin(qJ(5));
t2658 = cos(qJ(5));
t2556 = t2658 * t2589 + t2591 * t2653;
t2555 = qJD(6) + t2556;
t2735 = qJD(6) + t2555;
t2660 = cos(qJ(2));
t2713 = t2649 * t2660;
t2706 = qJD(1) * t2713;
t2708 = qJDD(1) * t2649;
t2621 = qJD(2) * t2706 + t2655 * t2708;
t2696 = qJDD(1) * t2651 + qJDD(2);
t2596 = t2650 * t2621 + t2648 * t2696;
t2603 = t2614 * t2706;
t2580 = t2603 - t2596;
t2622 = -qJD(2) * t2707 + t2660 * t2708;
t2716 = t2614 * t2615;
t2582 = -t2622 - t2716;
t2558 = -t2589 * t2653 + t2591 * t2658;
t2635 = -qJD(4) + t2706;
t2628 = -qJD(5) + t2635;
t2652 = sin(qJ(6));
t2657 = cos(qJ(6));
t2542 = t2558 * t2652 + t2657 * t2628;
t2734 = t2542 ^ 2;
t2544 = t2558 * t2657 - t2628 * t2652;
t2733 = t2544 ^ 2;
t2732 = t2555 ^ 2;
t2731 = t2556 ^ 2;
t2730 = t2558 ^ 2;
t2729 = t2589 ^ 2;
t2728 = t2591 ^ 2;
t2727 = t2614 ^ 2;
t2726 = t2615 ^ 2;
t2725 = t2628 ^ 2;
t2724 = t2635 ^ 2;
t2723 = -2 * qJD(3);
t2722 = t2651 * g(3);
t2721 = (-pkin(2) * t2660 - qJ(3) * t2655) * t2736;
t2720 = t2542 * t2544;
t2719 = t2556 * t2558;
t2718 = t2589 * t2591;
t2717 = t2589 * t2635;
t2715 = t2649 ^ 2 * t2662;
t2712 = qJD(4) + t2635;
t2711 = qJD(5) + t2628;
t2710 = qJD(6) - t2555;
t2656 = sin(qJ(1));
t2661 = cos(qJ(1));
t2638 = -g(1) * t2661 - g(2) * t2656;
t2617 = -pkin(1) * t2662 + pkin(8) * t2708 + t2638;
t2637 = t2656 * g(1) - t2661 * g(2);
t2665 = qJDD(1) * pkin(1) + pkin(8) * t2736 + t2637;
t2664 = t2651 * t2665;
t2709 = t2660 * t2617 + t2655 * t2664;
t2567 = -t2695 * pkin(2) + t2696 * qJ(3) + (-g(3) * t2655 + t2660 * t2721) * t2649 + t2709;
t2692 = qJD(1) * t2703;
t2669 = t2660 * t2692;
t2670 = t2655 * t2692;
t2568 = -t2622 * pkin(2) - t2722 - t2621 * qJ(3) + (pkin(2) * t2670 - qJ(3) * t2669 - t2665) * t2649;
t2522 = -t2648 * t2567 + t2650 * t2568 + t2615 * t2723;
t2505 = pkin(3) * t2582 + pkin(9) * t2580 + t2522;
t2523 = t2650 * t2567 + t2648 * t2568 + t2614 * t2723;
t2597 = -pkin(3) * t2706 - pkin(9) * t2615;
t2697 = -t2621 * t2648 + t2650 * t2696;
t2513 = -pkin(3) * t2727 + pkin(9) * t2697 + t2597 * t2706 + t2523;
t2479 = t2654 * t2505 + t2659 * t2513;
t2699 = t2654 * t2596 - t2659 * t2697;
t2546 = -qJD(4) * t2591 - t2699;
t2576 = -pkin(4) * t2635 - pkin(10) * t2591;
t2467 = -pkin(4) * t2729 + pkin(10) * t2546 + t2576 * t2635 + t2479;
t2478 = t2659 * t2505 - t2654 * t2513;
t2667 = -t2659 * t2596 - t2654 * t2697;
t2547 = -t2589 * qJD(4) - t2667;
t2704 = -qJDD(4) + t2622;
t2551 = -t2704 - t2718;
t2663 = (-t2547 + t2717) * pkin(10) + t2551 * pkin(4) + t2478;
t2432 = t2658 * t2467 + t2653 * t2663;
t2647 = t2660 ^ 2;
t2705 = t2647 * t2715;
t2431 = -t2653 * t2467 + t2658 * t2663;
t2677 = -t2653 * t2546 - t2658 * t2547;
t2502 = -qJD(5) * t2556 - t2677;
t2702 = -t2556 * t2628 - t2502;
t2693 = -qJDD(5) + t2704;
t2701 = -t2652 * t2502 - t2657 * t2693;
t2700 = -t2658 * t2546 + t2653 * t2547;
t2698 = t2655 * t2617 - t2660 * t2664;
t2694 = t2615 * t2706;
t2524 = pkin(5) * t2556 - pkin(11) * t2558;
t2427 = -pkin(5) * t2725 - pkin(11) * t2693 - t2556 * t2524 + t2432;
t2564 = qJDD(3) - t2696 * pkin(2) - t2695 * qJ(3) + (g(3) * t2660 + t2655 * t2721) * t2649 + t2698;
t2525 = -t2697 * pkin(3) - t2727 * pkin(9) + t2615 * t2597 + t2564;
t2484 = -t2546 * pkin(4) - t2729 * pkin(10) + t2591 * t2576 + t2525;
t2487 = (qJD(5) - t2628) * t2558 + t2700;
t2447 = pkin(5) * t2487 + pkin(11) * t2702 + t2484;
t2414 = -t2427 * t2652 + t2447 * t2657;
t2415 = t2427 * t2657 + t2447 * t2652;
t2398 = -t2414 * t2652 + t2415 * t2657;
t2426 = pkin(5) * t2693 - pkin(11) * t2725 + t2558 * t2524 - t2431;
t2386 = t2398 * t2653 - t2426 * t2658;
t2387 = t2398 * t2658 + t2426 * t2653;
t2375 = t2386 * t2659 + t2387 * t2654;
t2376 = -t2386 * t2654 + t2387 * t2659;
t2372 = -t2375 * t2648 + t2376 * t2650;
t2397 = t2414 * t2657 + t2415 * t2652;
t2691 = t2372 * t2655 - t2397 * t2660;
t2410 = t2431 * t2658 + t2432 * t2653;
t2411 = -t2431 * t2653 + t2432 * t2658;
t2393 = t2410 * t2659 + t2411 * t2654;
t2394 = -t2410 * t2654 + t2411 * t2659;
t2381 = -t2393 * t2648 + t2394 * t2650;
t2690 = t2381 * t2655 - t2484 * t2660;
t2474 = -t2544 * t2710 + t2701;
t2666 = -t2657 * t2502 + t2652 * t2693;
t2476 = t2542 * t2710 + t2666;
t2446 = t2474 * t2657 - t2476 * t2652;
t2497 = -t2733 - t2734;
t2435 = t2446 * t2653 - t2497 * t2658;
t2436 = t2446 * t2658 + t2497 * t2653;
t2412 = t2435 * t2659 + t2436 * t2654;
t2413 = -t2435 * t2654 + t2436 * t2659;
t2396 = -t2412 * t2648 + t2413 * t2650;
t2445 = t2474 * t2652 + t2476 * t2657;
t2689 = t2396 * t2655 - t2445 * t2660;
t2668 = -qJD(5) * t2558 - qJDD(6) - t2700;
t2480 = -t2668 - t2720;
t2503 = -t2732 - t2734;
t2457 = -t2480 * t2652 + t2503 * t2657;
t2473 = t2544 * t2735 - t2701;
t2437 = t2457 * t2653 - t2473 * t2658;
t2438 = t2457 * t2658 + t2473 * t2653;
t2418 = t2437 * t2659 + t2438 * t2654;
t2419 = -t2437 * t2654 + t2438 * t2659;
t2400 = -t2418 * t2648 + t2419 * t2650;
t2456 = t2480 * t2657 + t2503 * t2652;
t2688 = t2400 * t2655 - t2456 * t2660;
t2481 = t2668 - t2720;
t2506 = -t2732 - t2733;
t2463 = t2481 * t2657 - t2506 * t2652;
t2475 = -t2542 * t2735 - t2666;
t2439 = t2463 * t2653 - t2475 * t2658;
t2440 = t2463 * t2658 + t2475 * t2653;
t2420 = t2439 * t2659 + t2440 * t2654;
t2421 = -t2439 * t2654 + t2440 * t2659;
t2402 = -t2420 * t2648 + t2421 * t2650;
t2462 = t2481 * t2652 + t2506 * t2657;
t2687 = t2402 * t2655 - t2462 * t2660;
t2488 = -t2558 * t2711 - t2700;
t2490 = t2556 * t2711 + t2677;
t2460 = t2488 * t2653 + t2490 * t2658;
t2461 = t2488 * t2658 - t2490 * t2653;
t2429 = t2460 * t2659 + t2461 * t2654;
t2430 = -t2460 * t2654 + t2461 * t2659;
t2409 = -t2429 * t2648 + t2430 * t2650;
t2509 = -t2730 - t2731;
t2686 = t2409 * t2655 - t2509 * t2660;
t2448 = t2478 * t2659 + t2479 * t2654;
t2449 = -t2478 * t2654 + t2479 * t2659;
t2424 = -t2448 * t2648 + t2449 * t2650;
t2685 = t2424 * t2655 - t2525 * t2660;
t2519 = -t2693 - t2719;
t2521 = -t2725 - t2731;
t2491 = t2519 * t2658 + t2521 * t2653;
t2492 = -t2519 * t2653 + t2521 * t2658;
t2464 = t2491 * t2659 + t2492 * t2654;
t2465 = -t2491 * t2654 + t2492 * t2659;
t2434 = -t2464 * t2648 + t2465 * t2650;
t2684 = t2434 * t2655 - t2487 * t2660;
t2518 = t2693 - t2719;
t2538 = -t2725 - t2730;
t2500 = t2518 * t2653 + t2538 * t2658;
t2501 = t2518 * t2658 - t2538 * t2653;
t2471 = t2500 * t2659 + t2501 * t2654;
t2472 = -t2500 * t2654 + t2501 * t2659;
t2444 = -t2471 * t2648 + t2472 * t2650;
t2683 = t2444 * t2655 + t2660 * t2702;
t2531 = -t2591 * t2712 - t2699;
t2533 = t2589 * t2712 + t2667;
t2498 = t2531 * t2654 + t2533 * t2659;
t2499 = t2531 * t2659 - t2533 * t2654;
t2470 = -t2498 * t2648 + t2499 * t2650;
t2535 = -t2728 - t2729;
t2682 = t2470 * t2655 - t2535 * t2660;
t2553 = -t2724 - t2729;
t2516 = t2551 * t2659 + t2553 * t2654;
t2517 = -t2551 * t2654 + t2553 * t2659;
t2486 = -t2516 * t2648 + t2517 * t2650;
t2530 = (qJD(4) - t2635) * t2591 + t2699;
t2681 = t2486 * t2655 - t2530 * t2660;
t2494 = -t2522 * t2648 + t2523 * t2650;
t2680 = t2494 * t2655 - t2564 * t2660;
t2550 = t2704 - t2718;
t2573 = -t2724 - t2728;
t2527 = t2550 * t2654 + t2573 * t2659;
t2528 = t2550 * t2659 - t2573 * t2654;
t2496 = -t2527 * t2648 + t2528 * t2650;
t2532 = t2547 + t2717;
t2679 = t2496 * t2655 - t2532 * t2660;
t2578 = -t2694 + t2697;
t2540 = t2578 * t2650 - t2580 * t2648;
t2575 = -t2726 - t2727;
t2678 = t2540 * t2655 - t2575 * t2660;
t2587 = -t2705 - t2727;
t2549 = -t2582 * t2648 + t2587 * t2650;
t2577 = -t2694 - t2697;
t2676 = t2549 * t2655 - t2577 * t2660;
t2581 = t2622 - t2716;
t2602 = -t2705 - t2726;
t2560 = t2581 * t2650 - t2602 * t2648;
t2579 = t2603 + t2596;
t2675 = t2560 * t2655 - t2579 * t2660;
t2585 = -g(3) * t2713 - t2698;
t2586 = -g(3) * t2714 + t2709;
t2674 = t2585 * t2660 + t2586 * t2655;
t2599 = t2649 * t2669 - t2621;
t2625 = t2649 * t2670;
t2600 = t2625 + t2622;
t2673 = t2599 * t2660 + t2600 * t2655;
t2646 = t2655 ^ 2;
t2612 = -t2646 * t2715 - t2695;
t2634 = t2660 * t2655 * t2715;
t2620 = t2634 - t2696;
t2672 = t2612 * t2660 + t2620 * t2655;
t2619 = t2634 + t2696;
t2623 = -t2695 - t2705;
t2671 = t2619 * t2660 + t2623 * t2655;
t2633 = -qJDD(1) * t2656 - t2661 * t2662;
t2632 = qJDD(1) * t2661 - t2656 * t2662;
t2624 = (-t2646 - t2647) * t2715;
t2605 = -t2649 * t2665 - t2722;
t2601 = t2625 - t2622;
t2598 = t2703 * t2706 + t2621;
t2593 = -t2619 * t2655 + t2623 * t2660;
t2592 = -t2612 * t2655 + t2620 * t2660;
t2574 = -t2599 * t2655 + t2600 * t2660;
t2572 = -t2649 * t2601 + t2651 * t2671;
t2571 = t2651 * t2601 + t2649 * t2671;
t2570 = -t2649 * t2598 + t2651 * t2672;
t2569 = t2651 * t2598 + t2649 * t2672;
t2566 = -t2649 * t2624 + t2651 * t2673;
t2565 = t2651 * t2624 + t2649 * t2673;
t2559 = t2581 * t2648 + t2602 * t2650;
t2554 = -t2585 * t2655 + t2586 * t2660;
t2548 = t2582 * t2650 + t2587 * t2648;
t2539 = t2578 * t2648 + t2580 * t2650;
t2537 = -t2649 * t2605 + t2651 * t2674;
t2536 = t2651 * t2605 + t2649 * t2674;
t2534 = t2560 * t2660 + t2579 * t2655;
t2529 = t2549 * t2660 + t2577 * t2655;
t2526 = t2540 * t2660 + t2575 * t2655;
t2515 = -t2649 * t2559 + t2651 * t2675;
t2514 = t2651 * t2559 + t2649 * t2675;
t2512 = -t2649 * t2548 + t2651 * t2676;
t2511 = t2651 * t2548 + t2649 * t2676;
t2508 = -t2649 * t2539 + t2651 * t2678;
t2507 = t2651 * t2539 + t2649 * t2678;
t2495 = t2527 * t2650 + t2528 * t2648;
t2493 = t2522 * t2650 + t2523 * t2648;
t2485 = t2516 * t2650 + t2517 * t2648;
t2483 = t2494 * t2660 + t2564 * t2655;
t2482 = t2496 * t2660 + t2532 * t2655;
t2477 = t2486 * t2660 + t2530 * t2655;
t2469 = t2498 * t2650 + t2499 * t2648;
t2468 = t2470 * t2660 + t2535 * t2655;
t2455 = -t2649 * t2495 + t2651 * t2679;
t2454 = t2651 * t2495 + t2649 * t2679;
t2453 = -t2649 * t2493 + t2651 * t2680;
t2452 = t2651 * t2493 + t2649 * t2680;
t2451 = -t2649 * t2485 + t2651 * t2681;
t2450 = t2651 * t2485 + t2649 * t2681;
t2443 = t2471 * t2650 + t2472 * t2648;
t2442 = -t2649 * t2469 + t2651 * t2682;
t2441 = t2651 * t2469 + t2649 * t2682;
t2433 = t2464 * t2650 + t2465 * t2648;
t2428 = t2444 * t2660 - t2655 * t2702;
t2425 = t2434 * t2660 + t2487 * t2655;
t2423 = t2448 * t2650 + t2449 * t2648;
t2422 = t2424 * t2660 + t2525 * t2655;
t2417 = -t2649 * t2443 + t2651 * t2683;
t2416 = t2651 * t2443 + t2649 * t2683;
t2408 = t2429 * t2650 + t2430 * t2648;
t2407 = t2409 * t2660 + t2509 * t2655;
t2406 = -t2649 * t2433 + t2651 * t2684;
t2405 = t2651 * t2433 + t2649 * t2684;
t2404 = -t2649 * t2423 + t2651 * t2685;
t2403 = t2651 * t2423 + t2649 * t2685;
t2401 = t2420 * t2650 + t2421 * t2648;
t2399 = t2418 * t2650 + t2419 * t2648;
t2395 = t2412 * t2650 + t2413 * t2648;
t2392 = t2402 * t2660 + t2462 * t2655;
t2391 = t2400 * t2660 + t2456 * t2655;
t2390 = -t2649 * t2408 + t2651 * t2686;
t2389 = t2651 * t2408 + t2649 * t2686;
t2388 = t2396 * t2660 + t2445 * t2655;
t2385 = -t2649 * t2401 + t2651 * t2687;
t2384 = t2651 * t2401 + t2649 * t2687;
t2383 = -t2649 * t2399 + t2651 * t2688;
t2382 = t2651 * t2399 + t2649 * t2688;
t2380 = t2393 * t2650 + t2394 * t2648;
t2379 = t2381 * t2660 + t2484 * t2655;
t2378 = -t2649 * t2395 + t2651 * t2689;
t2377 = t2651 * t2395 + t2649 * t2689;
t2374 = -t2649 * t2380 + t2651 * t2690;
t2373 = t2651 * t2380 + t2649 * t2690;
t2371 = t2375 * t2650 + t2376 * t2648;
t2370 = t2372 * t2660 + t2397 * t2655;
t2369 = -t2649 * t2371 + t2651 * t2691;
t2368 = t2651 * t2371 + t2649 * t2691;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2633, -t2632, 0, -t2637 * t2656 + t2638 * t2661, 0, 0, 0, 0, 0, 0, -t2572 * t2656 + t2593 * t2661, -t2570 * t2656 + t2592 * t2661, -t2566 * t2656 + t2574 * t2661, -t2537 * t2656 + t2554 * t2661, 0, 0, 0, 0, 0, 0, -t2512 * t2656 + t2529 * t2661, -t2515 * t2656 + t2534 * t2661, -t2508 * t2656 + t2526 * t2661, -t2453 * t2656 + t2483 * t2661, 0, 0, 0, 0, 0, 0, -t2451 * t2656 + t2477 * t2661, -t2455 * t2656 + t2482 * t2661, -t2442 * t2656 + t2468 * t2661, -t2404 * t2656 + t2422 * t2661, 0, 0, 0, 0, 0, 0, -t2406 * t2656 + t2425 * t2661, -t2417 * t2656 + t2428 * t2661, -t2390 * t2656 + t2407 * t2661, -t2374 * t2656 + t2379 * t2661, 0, 0, 0, 0, 0, 0, -t2383 * t2656 + t2391 * t2661, -t2385 * t2656 + t2392 * t2661, -t2378 * t2656 + t2388 * t2661, -t2369 * t2656 + t2370 * t2661; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2632, t2633, 0, t2637 * t2661 + t2638 * t2656, 0, 0, 0, 0, 0, 0, t2572 * t2661 + t2593 * t2656, t2570 * t2661 + t2592 * t2656, t2566 * t2661 + t2574 * t2656, t2537 * t2661 + t2554 * t2656, 0, 0, 0, 0, 0, 0, t2512 * t2661 + t2529 * t2656, t2515 * t2661 + t2534 * t2656, t2508 * t2661 + t2526 * t2656, t2453 * t2661 + t2483 * t2656, 0, 0, 0, 0, 0, 0, t2451 * t2661 + t2477 * t2656, t2455 * t2661 + t2482 * t2656, t2442 * t2661 + t2468 * t2656, t2404 * t2661 + t2422 * t2656, 0, 0, 0, 0, 0, 0, t2406 * t2661 + t2425 * t2656, t2417 * t2661 + t2428 * t2656, t2390 * t2661 + t2407 * t2656, t2374 * t2661 + t2379 * t2656, 0, 0, 0, 0, 0, 0, t2383 * t2661 + t2391 * t2656, t2385 * t2661 + t2392 * t2656, t2378 * t2661 + t2388 * t2656, t2369 * t2661 + t2370 * t2656; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2571, t2569, t2565, t2536, 0, 0, 0, 0, 0, 0, t2511, t2514, t2507, t2452, 0, 0, 0, 0, 0, 0, t2450, t2454, t2441, t2403, 0, 0, 0, 0, 0, 0, t2405, t2416, t2389, t2373, 0, 0, 0, 0, 0, 0, t2382, t2384, t2377, t2368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2662, -qJDD(1), 0, t2638, 0, 0, 0, 0, 0, 0, t2593, t2592, t2574, t2554, 0, 0, 0, 0, 0, 0, t2529, t2534, t2526, t2483, 0, 0, 0, 0, 0, 0, t2477, t2482, t2468, t2422, 0, 0, 0, 0, 0, 0, t2425, t2428, t2407, t2379, 0, 0, 0, 0, 0, 0, t2391, t2392, t2388, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2662, 0, t2637, 0, 0, 0, 0, 0, 0, t2572, t2570, t2566, t2537, 0, 0, 0, 0, 0, 0, t2512, t2515, t2508, t2453, 0, 0, 0, 0, 0, 0, t2451, t2455, t2442, t2404, 0, 0, 0, 0, 0, 0, t2406, t2417, t2390, t2374, 0, 0, 0, 0, 0, 0, t2383, t2385, t2378, t2369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2571, t2569, t2565, t2536, 0, 0, 0, 0, 0, 0, t2511, t2514, t2507, t2452, 0, 0, 0, 0, 0, 0, t2450, t2454, t2441, t2403, 0, 0, 0, 0, 0, 0, t2405, t2416, t2389, t2373, 0, 0, 0, 0, 0, 0, t2382, t2384, t2377, t2368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2623, t2620, t2600, t2586, 0, 0, 0, 0, 0, 0, t2549, t2560, t2540, t2494, 0, 0, 0, 0, 0, 0, t2486, t2496, t2470, t2424, 0, 0, 0, 0, 0, 0, t2434, t2444, t2409, t2381, 0, 0, 0, 0, 0, 0, t2400, t2402, t2396, t2372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2619, t2612, t2599, t2585, 0, 0, 0, 0, 0, 0, -t2577, -t2579, -t2575, -t2564, 0, 0, 0, 0, 0, 0, -t2530, -t2532, -t2535, -t2525, 0, 0, 0, 0, 0, 0, -t2487, t2702, -t2509, -t2484, 0, 0, 0, 0, 0, 0, -t2456, -t2462, -t2445, -t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2601, t2598, t2624, t2605, 0, 0, 0, 0, 0, 0, t2548, t2559, t2539, t2493, 0, 0, 0, 0, 0, 0, t2485, t2495, t2469, t2423, 0, 0, 0, 0, 0, 0, t2433, t2443, t2408, t2380, 0, 0, 0, 0, 0, 0, t2399, t2401, t2395, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2587, t2581, t2578, t2523, 0, 0, 0, 0, 0, 0, t2517, t2528, t2499, t2449, 0, 0, 0, 0, 0, 0, t2465, t2472, t2430, t2394, 0, 0, 0, 0, 0, 0, t2419, t2421, t2413, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2582, t2602, t2580, t2522, 0, 0, 0, 0, 0, 0, t2516, t2527, t2498, t2448, 0, 0, 0, 0, 0, 0, t2464, t2471, t2429, t2393, 0, 0, 0, 0, 0, 0, t2418, t2420, t2412, t2375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2577, t2579, t2575, t2564, 0, 0, 0, 0, 0, 0, t2530, t2532, t2535, t2525, 0, 0, 0, 0, 0, 0, t2487, -t2702, t2509, t2484, 0, 0, 0, 0, 0, 0, t2456, t2462, t2445, t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2553, t2550, t2531, t2479, 0, 0, 0, 0, 0, 0, t2492, t2501, t2461, t2411, 0, 0, 0, 0, 0, 0, t2438, t2440, t2436, t2387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2551, t2573, t2533, t2478, 0, 0, 0, 0, 0, 0, t2491, t2500, t2460, t2410, 0, 0, 0, 0, 0, 0, t2437, t2439, t2435, t2386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2530, t2532, t2535, t2525, 0, 0, 0, 0, 0, 0, t2487, -t2702, t2509, t2484, 0, 0, 0, 0, 0, 0, t2456, t2462, t2445, t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2521, t2518, t2488, t2432, 0, 0, 0, 0, 0, 0, t2457, t2463, t2446, t2398; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2519, t2538, t2490, t2431, 0, 0, 0, 0, 0, 0, -t2473, -t2475, -t2497, -t2426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2487, -t2702, t2509, t2484, 0, 0, 0, 0, 0, 0, t2456, t2462, t2445, t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2503, t2481, t2474, t2415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2480, t2506, t2476, t2414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2473, t2475, t2497, t2426;];
f_new_reg  = t1;
