% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR9_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR9_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR9_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:14:04
% EndTime: 2019-03-09 14:14:34
% DurationCPUTime: 14.08s
% Computational Cost: add. (19097->657), mult. (47177->917), div. (0->0), fcn. (40291->18), ass. (0->333)
t306 = sin(qJ(2));
t311 = cos(qJ(2));
t357 = pkin(2) * t306 - qJ(3) * t311;
t300 = sin(pkin(6));
t423 = qJD(1) * t300;
t230 = t357 * t423;
t395 = t306 * t423;
t302 = cos(pkin(6));
t422 = qJD(1) * t302;
t402 = pkin(1) * t422;
t231 = -pkin(8) * t395 + t311 * t402;
t299 = sin(pkin(12));
t301 = cos(pkin(12));
t166 = t299 * t230 + t301 * t231;
t421 = qJD(1) * t311;
t394 = t300 * t421;
t369 = t299 * t394;
t153 = -pkin(9) * t369 + t166;
t512 = qJD(3) * t301 - t153;
t305 = sin(qJ(4));
t310 = cos(qJ(4));
t249 = t299 * t305 - t310 * t301;
t441 = t300 * t311;
t330 = t249 * t441;
t199 = qJD(1) * t330;
t237 = t249 * qJD(4);
t511 = t237 - t199;
t250 = t299 * t310 + t301 * t305;
t331 = t250 * t441;
t198 = qJD(1) * t331;
t238 = t250 * qJD(4);
t427 = t238 - t198;
t308 = cos(qJ(6));
t410 = qJD(6) * t308;
t374 = qJD(2) + t422;
t215 = t299 * t395 - t301 * t374;
t217 = t299 * t374 + t301 * t395;
t158 = t215 * t305 - t217 * t310;
t304 = sin(qJ(5));
t309 = cos(qJ(5));
t346 = -t215 * t310 - t305 * t217;
t98 = t158 * t304 + t309 * t346;
t497 = t308 * t98;
t510 = -t410 + t497;
t266 = -qJD(4) + t394;
t254 = -qJD(5) + t266;
t509 = t254 * t98;
t433 = -qJD(6) + t98;
t165 = t301 * t230 - t231 * t299;
t335 = (-pkin(9) * t301 * t311 + pkin(3) * t306) * t300;
t135 = qJD(1) * t335 + t165;
t461 = pkin(9) + qJ(3);
t261 = t461 * t299;
t262 = t461 * t301;
t345 = qJD(3) * t299 + qJD(4) * t262;
t414 = qJD(4) * t310;
t508 = -t261 * t414 + t512 * t310 + (-t135 - t345) * t305;
t490 = -t158 * t309 + t304 * t346;
t303 = sin(qJ(6));
t86 = t308 * t254 + t303 * t490;
t507 = t490 * t86;
t506 = -pkin(10) * t427 + t508;
t133 = t310 * t135;
t426 = -t305 * t261 + t310 * t262;
t505 = -pkin(4) * t395 + pkin(10) * t511 - t250 * qJD(3) - qJD(4) * t426 + t153 * t305 - t133;
t504 = t254 * t490;
t349 = t254 * t303 - t308 * t490;
t503 = t349 * t490;
t406 = qJDD(1) * t311;
t279 = t300 * t406;
t408 = qJD(1) * qJD(2);
t390 = t306 * t408;
t367 = t300 * t390;
t229 = qJDD(4) - t279 + t367;
t223 = qJDD(5) + t229;
t412 = qJD(5) * t309;
t413 = qJD(5) * t304;
t407 = qJDD(1) * t302;
t281 = qJDD(2) + t407;
t256 = t301 * t281;
t389 = t311 * t408;
t405 = t306 * qJDD(1);
t339 = t389 + t405;
t326 = t300 * t339;
t183 = t299 * t326 - t256;
t446 = t281 * t299;
t184 = t301 * t326 + t446;
t415 = qJD(4) * t305;
t84 = -t305 * t183 + t310 * t184 - t215 * t414 - t217 * t415;
t85 = -qJD(4) * t158 + t310 * t183 + t184 * t305;
t38 = t158 * t413 - t304 * t85 + t309 * t84 + t346 * t412;
t411 = qJD(6) * t303;
t21 = t303 * t223 - t254 * t410 + t308 * t38 - t411 * t490;
t19 = t21 * t303;
t502 = t349 * t510 + t19;
t39 = qJD(5) * t490 + t304 * t84 + t309 * t85;
t37 = qJDD(6) + t39;
t33 = t303 * t37;
t501 = t433 * t510 + t33 + t503;
t34 = t308 * t37;
t494 = t303 * t433;
t500 = -t433 * t494 + t34 + t507;
t22 = -qJD(6) * t349 - t308 * t223 + t303 * t38;
t499 = t21 * t308 - t303 * t22 - t349 * t494 + t510 * t86;
t274 = pkin(8) * t394;
t232 = t306 * t402 + t274;
t201 = qJ(3) * t374 + t232;
t343 = -pkin(2) * t311 - qJ(3) * t306 - pkin(1);
t225 = t343 * t300;
t206 = qJD(1) * t225;
t141 = -t201 * t299 + t301 * t206;
t109 = -pkin(3) * t394 - pkin(9) * t217 + t141;
t142 = t301 * t201 + t299 * t206;
t113 = -pkin(9) * t215 + t142;
t68 = t109 * t305 + t113 * t310;
t56 = pkin(10) * t346 + t68;
t455 = t304 * t56;
t67 = t310 * t109 - t113 * t305;
t55 = pkin(10) * t158 + t67;
t51 = -pkin(4) * t266 + t55;
t27 = t309 * t51 - t455;
t25 = pkin(5) * t254 - t27;
t498 = t25 * t98;
t312 = cos(qJ(1));
t434 = t311 * t312;
t307 = sin(qJ(1));
t438 = t306 * t307;
t243 = -t302 * t438 + t434;
t296 = pkin(12) + qJ(4);
t294 = qJ(5) + t296;
t287 = sin(t294);
t288 = cos(t294);
t442 = t300 * t307;
t181 = -t243 * t287 + t288 * t442;
t440 = t300 * t312;
t443 = t300 * t306;
t436 = t307 * t311;
t437 = t306 * t312;
t241 = t302 * t437 + t436;
t448 = t241 * t287;
t336 = -g(3) * (-t287 * t443 + t288 * t302) - g(2) * (-t288 * t440 - t448) - g(1) * t181;
t338 = t390 - t406;
t401 = pkin(1) * qJD(2) * t302;
t371 = qJD(1) * t401;
t400 = pkin(1) * t407;
t396 = pkin(8) * t279 + t306 * t400 + t311 * t371;
t325 = -pkin(8) * t367 + t396;
t149 = t281 * qJ(3) + qJD(3) * t374 + t325;
t323 = qJD(2) * t357 - qJD(3) * t306;
t156 = (qJD(1) * t323 + qJDD(1) * t343) * t300;
t89 = -t149 * t299 + t301 * t156;
t71 = pkin(3) * t300 * t338 - pkin(9) * t184 + t89;
t90 = t301 * t149 + t299 * t156;
t78 = -pkin(9) * t183 + t90;
t320 = -qJD(4) * t68 - t305 * t78 + t310 * t71;
t14 = pkin(4) * t229 - pkin(10) * t84 + t320;
t340 = -t109 * t414 + t113 * t415 - t305 * t71 - t310 * t78;
t16 = -pkin(10) * t85 - t340;
t452 = t309 * t56;
t28 = t304 * t51 + t452;
t321 = -qJD(5) * t28 + t309 * t14 - t16 * t304;
t5 = -pkin(5) * t223 - t321;
t332 = t336 - t5;
t496 = t490 * t98;
t495 = t158 * t266;
t185 = t309 * t249 + t250 * t304;
t123 = -qJD(5) * t185 - t237 * t309 - t238 * t304;
t139 = -t198 * t304 - t199 * t309;
t432 = t123 - t139;
t186 = -t249 * t304 + t250 * t309;
t431 = qJD(5) * t186 - t304 * t511 + t309 * t427;
t493 = t490 ^ 2 - t98 ^ 2;
t59 = pkin(5) * t490 - pkin(11) * t98;
t492 = t38 + t509;
t195 = -pkin(2) * t374 + qJD(3) - t231;
t157 = t215 * pkin(3) + t195;
t100 = -pkin(4) * t346 + t157;
t179 = t241 * t288 - t287 * t440;
t182 = t243 * t288 + t287 * t442;
t214 = t287 * t302 + t288 * t443;
t383 = -t304 * t14 - t309 * t16 - t51 * t412 + t56 * t413;
t491 = g(1) * t182 + g(2) * t179 + g(3) * t214 - t100 * t98 + t383;
t240 = -t302 * t434 + t438;
t489 = t179 * t303 - t240 * t308;
t488 = t179 * t308 + t240 * t303;
t295 = t300 ^ 2;
t404 = 0.2e1 * t295;
t290 = pkin(4) * t304 + pkin(11);
t485 = (-pkin(4) * t158 + qJD(6) * t290 + t59) * t433;
t484 = t433 * t490;
t375 = -t310 * t261 - t262 * t305;
t168 = -pkin(10) * t250 + t375;
t169 = -pkin(10) * t249 + t426;
t107 = t168 * t304 + t169 * t309;
t483 = qJD(5) * t107 + t304 * t506 - t309 * t505;
t347 = t168 * t309 - t169 * t304;
t482 = qJD(5) * t347 + t304 * t505 + t309 * t506;
t481 = t266 * t346;
t469 = pkin(1) * t306;
t425 = pkin(8) * t441 + t302 * t469;
t224 = qJ(3) * t302 + t425;
t163 = -t224 * t299 + t301 * t225;
t235 = t299 * t302 + t301 * t443;
t125 = -pkin(3) * t441 - pkin(9) * t235 + t163;
t164 = t301 * t224 + t299 * t225;
t234 = t299 * t443 - t302 * t301;
t134 = -pkin(9) * t234 + t164;
t430 = t305 * t125 + t310 * t134;
t193 = pkin(3) * t369 + t232;
t387 = pkin(4) * t427 - t193;
t478 = -pkin(2) * t281 + qJDD(3);
t26 = -pkin(11) * t254 + t28;
t47 = -pkin(5) * t98 - pkin(11) * t490 + t100;
t356 = t26 * t303 - t308 * t47;
t477 = t25 * t411 + t356 * t490;
t11 = t26 * t308 + t303 * t47;
t475 = t11 * t490 + t25 * t410 - t303 * t332;
t473 = -t100 * t490 + t321 + t336;
t472 = -t39 - t504;
t171 = -t234 * t305 + t235 * t310;
t378 = t310 * t125 - t134 * t305;
t63 = -pkin(4) * t441 - pkin(10) * t171 + t378;
t170 = t310 * t234 + t235 * t305;
t65 = -pkin(10) * t170 + t430;
t351 = t304 * t63 + t309 * t65;
t128 = -qJD(2) * t330 - qJD(4) * t170;
t204 = t323 * t300;
t418 = qJD(2) * t306;
t393 = t300 * t418;
t344 = -pkin(8) * t393 + t311 * t401;
t212 = qJD(3) * t302 + t344;
t150 = t301 * t204 - t212 * t299;
t118 = qJD(2) * t335 + t150;
t151 = t299 * t204 + t301 * t212;
t417 = qJD(2) * t311;
t392 = t300 * t417;
t368 = t299 * t392;
t131 = -pkin(9) * t368 + t151;
t318 = -qJD(4) * t430 + t310 * t118 - t131 * t305;
t40 = pkin(4) * t393 - pkin(10) * t128 + t318;
t129 = qJD(2) * t331 + qJD(4) * t171;
t337 = t305 * t118 + t125 * t414 + t310 * t131 - t134 * t415;
t42 = -pkin(10) * t129 + t337;
t471 = -qJD(5) * t351 - t304 * t42 + t309 * t40;
t4 = pkin(11) * t223 - t383;
t388 = t300 * t405;
t370 = -pkin(8) * t388 - qJD(2) * t274 - t306 * t371 + t311 * t400;
t162 = -t370 + t478;
t112 = pkin(3) * t183 + t162;
t60 = pkin(4) * t85 + t112;
t9 = pkin(5) * t39 - pkin(11) * t38 + t60;
t1 = -t356 * qJD(6) + t303 * t9 + t308 * t4;
t289 = -pkin(3) * t301 - pkin(2);
t222 = pkin(4) * t249 + t289;
t108 = pkin(5) * t185 - pkin(11) * t186 + t222;
t242 = t302 * t436 + t437;
t363 = g(1) * t242 + g(2) * t240;
t470 = t288 * t363 + (-pkin(5) * t431 + pkin(11) * t432 + qJD(6) * t107 - t387) * t433 + t108 * t37;
t313 = qJD(1) ^ 2;
t465 = g(1) * t312;
t462 = g(3) * t300;
t458 = pkin(5) * t395 + t483;
t451 = t186 * t308;
t292 = sin(t296);
t447 = t241 * t292;
t445 = t281 * t302;
t444 = t295 * t313;
t439 = t303 * t311;
t435 = t308 * t311;
t233 = pkin(8) * t392 + t306 * t401;
t297 = t306 ^ 2;
t424 = -t311 ^ 2 + t297;
t420 = qJD(2) * t299;
t419 = qJD(2) * t301;
t409 = qJ(3) * qJDD(1);
t399 = t311 * t444;
t398 = t300 * t439;
t397 = t300 * t435;
t194 = pkin(3) * t368 + t233;
t391 = t300 * t302 * t313;
t384 = t433 ^ 2;
t293 = cos(t296);
t376 = t241 * t293 - t292 * t440;
t373 = qJD(2) + 0.2e1 * t422;
t372 = t281 + t407;
t29 = t304 * t55 + t452;
t366 = pkin(4) * t413 - t29;
t362 = -g(1) * t240 + g(2) * t242;
t361 = g(1) * t243 + g(2) * t241;
t360 = g(1) * t241 - g(2) * t243;
t359 = g(2) * t307 + t465;
t32 = -pkin(11) * t441 + t351;
t110 = t309 * t170 + t171 * t304;
t111 = -t170 * t304 + t171 * t309;
t282 = pkin(8) * t443;
t227 = t282 + (-pkin(1) * t311 - pkin(2)) * t302;
t177 = pkin(3) * t234 + t227;
t116 = pkin(4) * t170 + t177;
t49 = pkin(5) * t110 - pkin(11) * t111 + t116;
t355 = t303 * t49 + t308 * t32;
t354 = -t303 * t32 + t308 * t49;
t352 = -t304 * t65 + t309 * t63;
t103 = pkin(4) * t129 + t194;
t342 = -t162 + t363;
t101 = t111 * t303 + t397;
t341 = t304 * t40 + t309 * t42 + t63 * t412 - t413 * t65;
t121 = t139 * t303 - t308 * t395;
t334 = t123 * t303 + t186 * t410 - t121;
t122 = t139 * t308 + t303 * t395;
t333 = t123 * t308 - t186 * t411 - t122;
t329 = g(3) * t441 - t363;
t328 = -g(3) * t443 - t361;
t327 = -qJ(3) * t418 + (qJD(3) - t195) * t311;
t2 = -qJD(6) * t11 - t303 * t4 + t308 * t9;
t30 = t309 * t55 - t455;
t317 = -t498 - t290 * t37 - (-pkin(4) * t412 + t30) * t433;
t316 = -t329 + t370;
t315 = -t107 * t37 + t5 * t186 - (pkin(11) * t395 - qJD(6) * t108 - t482) * t433 - t361;
t291 = -pkin(4) * t309 - pkin(5);
t188 = t243 * t293 + t292 * t442;
t187 = -t243 * t292 + t293 * t442;
t145 = t182 * t308 + t242 * t303;
t144 = -t182 * t303 + t242 * t308;
t102 = t111 * t308 - t398;
t54 = qJD(5) * t111 + t128 * t304 + t309 * t129;
t53 = -qJD(5) * t110 + t128 * t309 - t129 * t304;
t44 = -qJD(6) * t398 + t111 * t410 + t303 * t53 - t308 * t393;
t43 = -qJD(6) * t101 + t303 * t393 + t308 * t53;
t31 = pkin(5) * t441 - t352;
t17 = pkin(5) * t54 - pkin(11) * t53 + t103;
t7 = -pkin(5) * t393 - t471;
t6 = pkin(11) * t393 + t341;
t3 = [qJDD(1), g(1) * t307 - g(2) * t312, t359 (qJDD(1) * t297 + 0.2e1 * t306 * t389) * t295 (t311 * t405 - t408 * t424) * t404 (t306 * t372 + t373 * t417) * t300 (t311 * t372 - t373 * t418) * t300, t445, -t233 * t374 - t282 * t281 + t370 * t302 + (t311 * t445 - t338 * t404) * pkin(1) + t360, -pkin(1) * t339 * t404 - t281 * t425 - t302 * t325 - t344 * t374 + t362, t162 * t234 + t227 * t183 + t233 * t215 + t360 * t301 + (-t359 * t299 + (qJD(1) * t163 + t141) * t418 + (-qJD(1) * t150 - qJDD(1) * t163 + t195 * t420 - t89) * t311) * t300, t162 * t235 + t227 * t184 + t233 * t217 - t360 * t299 + (-t359 * t301 + (-qJD(1) * t164 - t142) * t418 + (qJD(1) * t151 + qJDD(1) * t164 + t195 * t419 + t90) * t311) * t300, -t150 * t217 - t151 * t215 - t163 * t184 - t164 * t183 - t234 * t90 - t235 * t89 + (-t141 * t301 - t142 * t299) * t392 - t362, t90 * t164 + t142 * t151 + t89 * t163 + t141 * t150 + t162 * t227 + t195 * t233 - g(1) * (-pkin(1) * t307 - pkin(2) * t241 + pkin(8) * t440 - qJ(3) * t240) - g(2) * (pkin(1) * t312 + pkin(2) * t243 + pkin(8) * t442 + qJ(3) * t242) -t128 * t158 + t171 * t84, t128 * t346 + t129 * t158 - t170 * t84 - t171 * t85, -t128 * t266 + t171 * t229 + (-t158 * t418 - t311 * t84) * t300, t129 * t266 - t170 * t229 + (t311 * t85 + t346 * t418) * t300 (-t229 * t311 - t266 * t418) * t300, -t318 * t266 + t378 * t229 - t194 * t346 + t177 * t85 + t112 * t170 + t157 * t129 + g(1) * t376 - g(2) * t188 + (-t311 * t320 + t418 * t67) * t300, t337 * t266 - t430 * t229 - t194 * t158 + t177 * t84 + t112 * t171 + t157 * t128 - g(1) * t447 - g(2) * t187 + (-t293 * t465 - t311 * t340 - t418 * t68) * t300, t111 * t38 + t490 * t53, -t110 * t38 - t111 * t39 - t490 * t54 + t53 * t98, t111 * t223 - t254 * t53 + (-t311 * t38 + t418 * t490) * t300, -t110 * t223 + t254 * t54 + (t311 * t39 + t418 * t98) * t300 (-t223 * t311 - t254 * t418) * t300, -t471 * t254 + t352 * t223 - t103 * t98 + t116 * t39 + t60 * t110 + t100 * t54 + g(1) * t179 - g(2) * t182 + (t27 * t418 - t311 * t321) * t300, t341 * t254 - t351 * t223 + t103 * t490 + t116 * t38 + t60 * t111 + t100 * t53 - g(1) * t448 - g(2) * t181 + (-t28 * t418 - t288 * t465 - t311 * t383) * t300, t102 * t21 - t349 * t43, -t101 * t21 - t102 * t22 + t349 * t44 - t43 * t86, t102 * t37 + t110 * t21 - t349 * t54 - t43 * t433, -t101 * t37 - t110 * t22 + t433 * t44 - t54 * t86, t110 * t37 - t433 * t54 -(-qJD(6) * t355 + t17 * t308 - t303 * t6) * t433 + t354 * t37 + t2 * t110 - t356 * t54 + t7 * t86 + t31 * t22 + t5 * t101 + t25 * t44 + g(1) * t488 - g(2) * t145 (qJD(6) * t354 + t17 * t303 + t308 * t6) * t433 - t355 * t37 - t1 * t110 - t11 * t54 - t7 * t349 + t31 * t21 + t5 * t102 + t25 * t43 - g(1) * t489 - g(2) * t144; 0, 0, 0, -t306 * t399, t424 * t444, -t311 * t391 + t388, t306 * t391 + t279, t281, t232 * t374 + t444 * t469 + t316, pkin(1) * t399 + t231 * t374 + (pkin(8) * t408 + g(3)) * t443 + t361 - t396, -pkin(2) * t183 - t215 * t232 + t342 * t301 + ((-g(3) * t301 + t299 * t409) * t311 + (-t141 * t306 + t165 * t311 + t299 * t327) * qJD(1)) * t300, -pkin(2) * t184 - t217 * t232 - t342 * t299 + ((g(3) * t299 + t301 * t409) * t311 + (t142 * t306 - t166 * t311 + t301 * t327) * qJD(1)) * t300, t165 * t217 + t166 * t215 + (-qJ(3) * t183 - qJD(3) * t215 + t141 * t394 + t90) * t301 + (qJ(3) * t184 + qJD(3) * t217 + t142 * t394 - t89) * t299 + t328, -t141 * t165 - t142 * t166 - t195 * t232 + (-t141 * t299 + t142 * t301) * qJD(3) + (-t162 - t329) * pkin(2) + (-t299 * t89 + t301 * t90 + t328) * qJ(3), t158 * t511 + t250 * t84, t158 * t427 - t249 * t84 - t250 * t85 - t346 * t511, t158 * t395 + t229 * t250 + t266 * t511, -t229 * t249 + t266 * t427 - t346 * t395, t266 * t395, t375 * t229 + t289 * t85 + t112 * t249 - t67 * t395 + t193 * t346 + (t133 + t345 * t310 + (-qJD(4) * t261 + t512) * t305) * t266 + t427 * t157 - t329 * t293, t112 * t250 - t157 * t511 + t193 * t158 - t426 * t229 + t266 * t508 + t289 * t84 + t329 * t292 + t68 * t395, t186 * t38 + t432 * t490, -t185 * t38 - t186 * t39 - t431 * t490 + t432 * t98, t186 * t223 - t254 * t432 - t395 * t490, -t185 * t223 + t254 * t431 - t395 * t98, t254 * t395, t431 * t100 + t60 * t185 + t222 * t39 + t223 * t347 + t254 * t483 - t27 * t395 - t329 * t288 - t387 * t98, t432 * t100 - t107 * t223 + t60 * t186 + t222 * t38 + t254 * t482 + t28 * t395 + t329 * t287 + t387 * t490, t21 * t451 - t333 * t349, -t121 * t349 + t122 * t86 + (t303 * t349 - t308 * t86) * t123 + (-t19 - t22 * t308 + (t303 * t86 + t308 * t349) * qJD(6)) * t186, t185 * t21 - t333 * t433 - t349 * t431 + t37 * t451, -t185 * t22 - t186 * t33 + t334 * t433 - t431 * t86, t185 * t37 - t431 * t433, -t347 * t22 + t2 * t185 + t458 * t86 + t470 * t308 + t315 * t303 - (t288 * t435 + t303 * t306) * t462 - t431 * t356 + t334 * t25, -t1 * t185 - t347 * t21 - t458 * t349 - t470 * t303 + t315 * t308 - (-t288 * t439 + t306 * t308) * t462 - t431 * t11 + t333 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256 + (t299 * t405 + (-t217 + t420) * t421) * t300, t446 + (t301 * t405 + (t215 + t419) * t421) * t300, -t215 ^ 2 - t217 ^ 2, t141 * t217 + t142 * t215 - t316 + t478, 0, 0, 0, 0, 0, t85 + t495, t84 - t481, 0, 0, 0, 0, 0, t39 - t504, t38 - t509, 0, 0, 0, 0, 0, -t303 * t384 + t34 - t507, -t308 * t384 - t33 + t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158 * t346, t158 ^ 2 - t346 ^ 2, t84 + t481, -t85 + t495, t229, -t68 * t266 + t157 * t158 - g(1) * t187 - g(2) * (-t293 * t440 - t447) - g(3) * (-t292 * t443 + t293 * t302) + t320, -t67 * t266 - t157 * t346 + g(1) * t188 + g(2) * t376 - g(3) * (-t292 * t302 - t293 * t443) + t340, -t496, t493, t492, t472, t223, -t254 * t29 + (-t158 * t98 + t223 * t309 + t254 * t413) * pkin(4) + t473, -t254 * t30 + (t158 * t490 - t223 * t304 + t254 * t412) * pkin(4) + t491, t502, t499, t501, t500, t484, t291 * t22 + t366 * t86 + t317 * t303 + (t332 + t485) * t308 + t477, t291 * t21 - t303 * t485 + t308 * t317 - t349 * t366 + t475; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t496, t493, t492, t472, t223, -t254 * t28 + t473, -t254 * t27 + t491, t502, t499, t501, t500, t484, -pkin(5) * t22 - t28 * t86 + (-pkin(11) * t37 - t27 * t433 - t498) * t303 + (-(-pkin(11) * qJD(6) - t59) * t433 + t332) * t308 + t477, -pkin(5) * t21 - (t27 * t308 + t303 * t59) * t433 + t28 * t349 - t25 * t497 + (-t411 * t433 - t34) * pkin(11) + t475; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t349 * t86, t349 ^ 2 - t86 ^ 2, -t433 * t86 + t21, t349 * t433 - t22, t37, -t11 * t433 + t25 * t349 - g(1) * t144 + g(2) * t489 - g(3) * (-t214 * t303 - t397) + t2, t356 * t433 + t25 * t86 + g(1) * t145 + g(2) * t488 - g(3) * (-t214 * t308 + t398) - t1;];
tau_reg  = t3;
