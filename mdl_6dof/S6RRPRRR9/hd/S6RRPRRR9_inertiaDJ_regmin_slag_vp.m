% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:13:59
% EndTime: 2019-03-09 14:14:09
% DurationCPUTime: 3.49s
% Computational Cost: add. (8323->332), mult. (21597->614), div. (0->0), fcn. (23108->12), ass. (0->178)
t155 = sin(pkin(12));
t234 = pkin(9) + qJ(3);
t135 = t234 * t155;
t157 = cos(pkin(12));
t136 = t234 * t157;
t161 = sin(qJ(4));
t164 = cos(qJ(4));
t223 = -t161 * t135 + t164 * t136;
t163 = cos(qJ(6));
t154 = t163 ^ 2;
t159 = sin(qJ(6));
t221 = t159 ^ 2 - t154;
t196 = t221 * qJD(6);
t217 = qJD(4) * t164;
t227 = t157 * t164;
t86 = (qJD(3) * t155 + qJD(4) * t136) * t161 - qJD(3) * t227 + t135 * t217;
t160 = sin(qJ(5));
t158 = cos(pkin(6));
t156 = sin(pkin(6));
t162 = sin(qJ(2));
t229 = t156 * t162;
t116 = t155 * t158 + t157 * t229;
t165 = cos(qJ(2));
t228 = t156 * t165;
t109 = pkin(8) * t228 + (pkin(1) * t162 + qJ(3)) * t158;
t185 = -pkin(2) * t165 - qJ(3) * t162;
t110 = (-pkin(1) + t185) * t156;
t83 = -t155 * t109 + t157 * t110;
t70 = -pkin(3) * t228 - t116 * pkin(9) + t83;
t115 = t155 * t229 - t158 * t157;
t84 = t157 * t109 + t155 * t110;
t80 = -pkin(9) * t115 + t84;
t199 = -t161 * t80 + t164 * t70;
t214 = pkin(4) * t228;
t92 = -t115 * t161 + t116 * t164;
t41 = -t92 * pkin(10) + t199 - t214;
t237 = cos(qJ(5));
t232 = t161 * t70 + t164 * t80;
t91 = t115 * t164 + t116 * t161;
t45 = -pkin(10) * t91 + t232;
t42 = t237 * t45;
t178 = t160 * t41 + t42;
t220 = qJD(2) * t162;
t142 = t156 * t220;
t195 = pkin(4) * t142;
t226 = t157 * t165;
t101 = (-qJD(3) * t162 + (pkin(2) * t162 - qJ(3) * t165) * qJD(2)) * t156;
t219 = qJD(2) * t165;
t113 = -t158 * pkin(1) * t219 + pkin(8) * t142;
t105 = qJD(3) * t158 - t113;
t81 = t157 * t101 - t155 * t105;
t65 = (pkin(3) * t162 - pkin(9) * t226) * t156 * qJD(2) + t81;
t204 = t156 * t219;
t192 = t155 * t204;
t82 = t155 * t101 + t157 * t105;
t76 = -pkin(9) * t192 + t82;
t29 = -t232 * qJD(4) - t161 * t76 + t164 * t65;
t124 = t155 * t161 - t227;
t73 = -qJD(4) * t91 - t124 * t204;
t21 = -pkin(10) * t73 + t195 + t29;
t218 = qJD(4) * t161;
t28 = -t161 * t65 - t164 * t76 - t70 * t217 + t218 * t80;
t191 = t157 * t204;
t74 = -t115 * t218 + t116 * t217 + t161 * t191 + t164 * t192;
t23 = -pkin(10) * t74 - t28;
t200 = t160 * t23 - t237 * t21;
t7 = -qJD(5) * t178 - t200;
t146 = -pkin(3) * t157 - pkin(2);
t240 = 0.2e1 * t146;
t239 = 0.2e1 * t156;
t149 = qJD(6) * t163;
t179 = -t160 * t45 + t237 * t41;
t17 = pkin(5) * t228 - t179;
t16 = t17 * t149;
t5 = -pkin(5) * t142 - t7;
t238 = t5 * t159 + t16;
t125 = t155 * t164 + t157 * t161;
t119 = t125 * qJD(4);
t236 = pkin(4) * t119;
t118 = t124 * qJD(4);
t173 = -t237 * t124 - t160 * t125;
t68 = t173 * qJD(5) - t237 * t118 - t160 * t119;
t96 = -t160 * t124 + t237 * t125;
t235 = t96 * t68;
t87 = -t125 * qJD(3) - t223 * qJD(4);
t166 = -pkin(10) * t118 - t87;
t168 = -pkin(10) * t119 - t86;
t197 = -t164 * t135 - t136 * t161;
t89 = -pkin(10) * t125 + t197;
t90 = -pkin(10) * t124 + t223;
t57 = t160 * t89 + t237 * t90;
t37 = t57 * qJD(5) + t160 * t168 + t237 * t166;
t56 = t160 * t90 - t237 * t89;
t54 = t56 * t149;
t233 = t37 * t159 + t54;
t231 = pkin(4) * qJD(5);
t177 = -t160 * t92 - t237 * t91;
t32 = t177 * qJD(5) - t160 * t74 + t237 * t73;
t60 = -t160 * t91 + t237 * t92;
t50 = t159 * t60 + t163 * t228;
t24 = -qJD(6) * t50 + t142 * t159 + t163 * t32;
t230 = t159 * t24;
t225 = t159 * t163;
t213 = pkin(1) * t220;
t114 = pkin(8) * t204 + t158 * t213;
t148 = -t237 * pkin(4) - pkin(5);
t216 = qJD(5) * t160;
t210 = pkin(4) * t216;
t222 = t148 * t149 + t159 * t210;
t215 = qJD(6) * t159;
t212 = pkin(5) * t215;
t211 = pkin(5) * t149;
t209 = t177 * t237;
t208 = t96 * t215;
t207 = t96 * t149;
t206 = t159 * t228;
t15 = t17 * t215;
t53 = t56 * t215;
t99 = pkin(3) * t192 + t114;
t151 = t156 ^ 2;
t205 = t151 * t219;
t203 = t159 * t149;
t202 = -t5 * t163 + t15;
t201 = qJD(5) * t237;
t198 = -0.4e1 * t96 * t225;
t194 = pkin(4) * t201;
t193 = t162 * t205;
t190 = 0.2e1 * (t155 ^ 2 + t157 ^ 2) * qJD(3);
t189 = t17 * t68 + t5 * t96;
t33 = t60 * qJD(5) + t160 * t73 + t237 * t74;
t188 = -t177 * t68 + t33 * t96;
t187 = t37 * t96 + t56 * t68;
t69 = t96 * qJD(5) - t160 * t118 + t237 * t119;
t186 = -t173 * t68 + t69 * t96;
t147 = pkin(4) * t160 + pkin(11);
t184 = -t147 * t173 - t148 * t96;
t183 = -t155 * t81 + t157 * t82;
t18 = -pkin(11) * t228 + t178;
t111 = pkin(8) * t229 + (-pkin(1) * t165 - pkin(2)) * t158;
t93 = t115 * pkin(3) + t111;
t63 = t91 * pkin(4) + t93;
t31 = -pkin(5) * t177 - t60 * pkin(11) + t63;
t10 = t159 * t31 + t163 * t18;
t51 = t163 * t60 - t206;
t182 = -t159 * t51 - t163 * t50;
t108 = pkin(4) * t124 + t146;
t58 = -pkin(5) * t173 - pkin(11) * t96 + t108;
t44 = t159 * t58 + t163 * t57;
t52 = pkin(4) * t74 + t99;
t180 = t148 * t215 - t163 * t210;
t27 = -t149 * t177 + t159 * t33;
t176 = -t163 * t33 - t177 * t215;
t175 = -t163 * t68 + t208;
t49 = -t149 * t173 + t159 * t69;
t174 = -t163 * t69 - t173 * t215;
t6 = -t160 * t21 - t41 * t201 + t216 * t45 - t237 * t23;
t172 = pkin(5) * t69 - pkin(11) * t68 + t236;
t171 = pkin(5) * t33 - pkin(11) * t32 + t52;
t170 = pkin(11) * t142 - t6;
t169 = (qJD(2) * t185 + qJD(3) * t165) * t156;
t167 = -t147 * t69 + t148 * t68 + (t160 * t96 + t173 * t237) * t231;
t141 = 0.2e1 * t203;
t130 = -0.2e1 * t193;
t128 = -0.2e1 * t196;
t94 = t96 ^ 2;
t47 = -t196 * t96 + t68 * t225;
t43 = -t159 * t57 + t163 * t58;
t39 = qJD(6) * t198 - t221 * t68;
t36 = t160 * t166 - t237 * t168 - t89 * t201 + t90 * t216;
t25 = -qJD(6) * t206 - t142 * t163 + t149 * t60 + t159 * t32;
t14 = t149 * t51 + t230;
t12 = -qJD(6) * t44 + t159 * t36 + t163 * t172;
t11 = -t149 * t58 - t159 * t172 + t163 * t36 + t215 * t57;
t9 = -t159 * t18 + t163 * t31;
t8 = qJD(6) * t182 - t159 * t25 + t163 * t24;
t2 = -qJD(6) * t10 - t159 * t170 + t163 * t171;
t1 = -t149 * t31 - t159 * t171 - t163 * t170 + t18 * t215;
t3 = [0, 0, 0, 0.2e1 * t193, 0.2e1 * (-t162 ^ 2 + t165 ^ 2) * t151 * qJD(2), 0.2e1 * t158 * t204, -0.2e1 * t158 * t142, 0, -0.2e1 * t114 * t158 - 0.2e1 * t151 * t213, -0.2e1 * pkin(1) * t205 + 0.2e1 * t113 * t158, 0.2e1 * t114 * t115 + 0.2e1 * (-t165 * t81 + (t111 * t155 * t165 + t162 * t83) * qJD(2)) * t156, 0.2e1 * t114 * t116 + 0.2e1 * (t165 * t82 + (t111 * t226 - t162 * t84) * qJD(2)) * t156, -0.2e1 * t82 * t115 - 0.2e1 * t81 * t116 + 0.2e1 * (-t155 * t84 - t157 * t83) * t204, 0.2e1 * t111 * t114 + 0.2e1 * t81 * t83 + 0.2e1 * t82 * t84, 0.2e1 * t92 * t73, -0.2e1 * t73 * t91 - 0.2e1 * t74 * t92 (-t165 * t73 + t220 * t92) * t239 (t165 * t74 - t220 * t91) * t239, t130, 0.2e1 * t93 * t74 + 0.2e1 * t99 * t91 + 0.2e1 * (-t29 * t165 + t199 * t220) * t156, 0.2e1 * t93 * t73 + 0.2e1 * t99 * t92 + 0.2e1 * (-t28 * t165 - t232 * t220) * t156, 0.2e1 * t60 * t32, 0.2e1 * t177 * t32 - 0.2e1 * t33 * t60 (-t165 * t32 + t220 * t60) * t239 (t165 * t33 + t177 * t220) * t239, t130, 0.2e1 * t63 * t33 - 0.2e1 * t52 * t177 + 0.2e1 * (-t7 * t165 + t179 * t220) * t156, 0.2e1 * t63 * t32 + 0.2e1 * t52 * t60 + 0.2e1 * (-t6 * t165 - t178 * t220) * t156, 0.2e1 * t51 * t24, -0.2e1 * t24 * t50 - 0.2e1 * t25 * t51, -0.2e1 * t177 * t24 + 0.2e1 * t33 * t51, 0.2e1 * t177 * t25 - 0.2e1 * t33 * t50, -0.2e1 * t177 * t33, 0.2e1 * t17 * t25 - 0.2e1 * t177 * t2 + 0.2e1 * t33 * t9 + 0.2e1 * t5 * t50, -0.2e1 * t1 * t177 - 0.2e1 * t10 * t33 + 0.2e1 * t17 * t24 + 0.2e1 * t5 * t51; 0, 0, 0, 0, 0, t204, -t142, 0, -t114, t113, -t114 * t157 + t155 * t169, t114 * t155 + t157 * t169 (-t115 * t157 + t116 * t155) * qJD(3) + t183, -pkin(2) * t114 + (-t155 * t83 + t157 * t84) * qJD(3) + t183 * qJ(3), -t118 * t92 + t125 * t73, t118 * t91 - t119 * t92 - t124 * t73 - t125 * t74 (t118 * t165 + t125 * t220) * t156 (t119 * t165 - t124 * t220) * t156, 0, t93 * t119 + t99 * t124 + t146 * t74 + (-t87 * t165 + t197 * t220) * t156, -t93 * t118 + t99 * t125 + t146 * t73 + (-t86 * t165 - t223 * t220) * t156, t32 * t96 + t60 * t68, t173 * t32 - t60 * t69 - t188 (-t165 * t68 + t220 * t96) * t156 (t165 * t69 + t173 * t220) * t156, 0, -t177 * t236 + t108 * t33 - t52 * t173 + t63 * t69 + (t165 * t37 - t220 * t56) * t156, t60 * t236 + t108 * t32 + t52 * t96 + t63 * t68 + (-t165 * t36 - t220 * t57) * t156, -t51 * t208 + (t24 * t96 + t51 * t68) * t163, t182 * t68 + (-t230 - t163 * t25 + (t159 * t50 - t163 * t51) * qJD(6)) * t96, t163 * t188 - t173 * t24 + t177 * t208 + t51 * t69, -t159 * t188 + t173 * t25 + t177 * t207 - t50 * t69, -t173 * t33 - t177 * t69, -t12 * t177 + t159 * t189 + t16 * t96 - t173 * t2 + t25 * t56 + t33 * t43 + t37 * t50 + t69 * t9, -t1 * t173 - t10 * t69 - t11 * t177 - t15 * t96 + t163 * t189 + t24 * t56 - t33 * t44 + t37 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190, qJ(3) * t190, -0.2e1 * t125 * t118, 0.2e1 * t118 * t124 - 0.2e1 * t119 * t125, 0, 0, 0, t119 * t240, -t118 * t240, 0.2e1 * t235, -0.2e1 * t186, 0, 0, 0, 0.2e1 * t108 * t69 - 0.2e1 * t173 * t236, 0.2e1 * t108 * t68 + 0.2e1 * t96 * t236, 0.2e1 * t154 * t235 - 0.2e1 * t203 * t94, 0.2e1 * t94 * t196 + t198 * t68, 0.2e1 * t163 * t186 + 0.2e1 * t173 * t208, -0.2e1 * t159 * t186 + 0.2e1 * t173 * t207, -0.2e1 * t173 * t69, -0.2e1 * t12 * t173 + 0.2e1 * t159 * t187 + 0.2e1 * t43 * t69 + 0.2e1 * t54 * t96, -0.2e1 * t11 * t173 + 0.2e1 * t163 * t187 - 0.2e1 * t44 * t69 - 0.2e1 * t53 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t191, 0, t114, 0, 0, 0, 0, 0, t74, t73, 0, 0, 0, 0, 0, t33, t32, 0, 0, 0, 0, 0, -t176, -t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, -t118, 0, 0, 0, 0, 0, t69, t68, 0, 0, 0, 0, 0, -t174, -t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, -t74, t142, t29, t28, 0, 0, t32, -t33, t142, t237 * t195 + (-t42 + (-t41 + t214) * t160) * qJD(5) - t200 (-t160 * t220 + t165 * t201) * t156 * pkin(4) + t6, t14, t8, t27, -t176, 0, t148 * t25 - t27 * t147 + (t159 * t209 + t160 * t50) * t231 + t202, t148 * t24 + t176 * t147 + (t160 * t51 + t163 * t209) * t231 + t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t119, 0, t87, t86, 0, 0, t68, -t69, 0, -t37, t36, t47, t39, t49, -t174, 0, t53 + (-qJD(6) * t184 - t37) * t163 + t167 * t159, t163 * t167 + t184 * t215 + t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t210, -0.2e1 * t194, t141, t128, 0, 0, 0, 0.2e1 * t180, 0.2e1 * t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t33, t142, t7, t6, t14, t8, t27, -t176, 0, -pkin(5) * t25 - pkin(11) * t27 + t202, -pkin(5) * t24 + pkin(11) * t176 + t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, -t69, 0, -t37, t36, t47, t39, t49, -t174, 0, t53 + (-pkin(5) * t68 - pkin(11) * t69) * t159 + (-t37 + (-pkin(5) * t96 + pkin(11) * t173) * qJD(6)) * t163, pkin(5) * t175 + pkin(11) * t174 + t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t210, -t194, t141, t128, 0, 0, 0, t180 - t212, -t211 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t128, 0, 0, 0, -0.2e1 * t212, -0.2e1 * t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t25, t33, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t159 * t68 - t207, t69, t12, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t215, 0, -t147 * t149 - t159 * t194, t147 * t215 - t163 * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t215, 0, -pkin(11) * t149, pkin(11) * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
