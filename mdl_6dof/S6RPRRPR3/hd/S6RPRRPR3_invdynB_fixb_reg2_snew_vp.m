% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 22:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:18:15
% EndTime: 2019-05-05 22:18:52
% DurationCPUTime: 31.18s
% Computational Cost: add. (75615->753), mult. (146166->1081), div. (0->0), fcn. (96184->10), ass. (0->530)
t882 = sin(qJ(4));
t886 = cos(qJ(4));
t883 = sin(qJ(3));
t937 = qJD(1) * t883;
t831 = t882 * qJD(3) + t886 * t937;
t887 = cos(qJ(3));
t932 = qJD(1) * qJD(3);
t922 = t887 * t932;
t931 = qJDD(1) * t883;
t836 = t922 + t931;
t916 = -t886 * qJDD(3) + t882 * t836;
t936 = qJD(1) * t887;
t860 = -qJD(4) + t936;
t934 = qJD(4) - t860;
t711 = t831 * t934 + t916;
t829 = -t886 * qJD(3) + t882 * t937;
t900 = -t882 * qJDD(3) - t886 * t836;
t892 = qJD(4) * t829 + t900;
t954 = t829 * t860;
t999 = t954 - t892;
t967 = t999 * t882;
t641 = -t711 * t886 - t967;
t825 = t831 ^ 2;
t988 = t829 ^ 2;
t783 = t825 - t988;
t605 = t641 * t887 + t783 * t883;
t635 = -t711 * t882 + t886 * t999;
t877 = sin(pkin(10));
t878 = cos(pkin(10));
t537 = t605 * t877 - t635 * t878;
t539 = t605 * t878 + t635 * t877;
t884 = sin(qJ(1));
t888 = cos(qJ(1));
t1095 = t537 * t888 + t539 * t884;
t1094 = t537 * t884 - t539 * t888;
t987 = t860 ^ 2;
t800 = t988 - t987;
t865 = t883 * t932;
t930 = qJDD(1) * t887;
t837 = -t865 + t930;
t826 = -qJDD(4) + t837;
t955 = t829 * t831;
t894 = t826 - t955;
t964 = t894 * t882;
t692 = t800 * t886 + t964;
t712 = (qJD(4) + t860) * t831 + t916;
t629 = t692 * t887 - t712 * t883;
t963 = t894 * t886;
t688 = t800 * t882 - t963;
t566 = t629 * t877 - t688 * t878;
t570 = t629 * t878 + t688 * t877;
t1093 = t566 * t888 + t570 * t884;
t1092 = t566 * t884 - t570 * t888;
t998 = t954 + t892;
t1041 = -t712 * t882 + t998 * t886;
t1000 = t825 + t988;
t1040 = -t712 * t886 - t998 * t882;
t1057 = -t1000 * t883 + t1040 * t887;
t1067 = t1041 * t877 + t1057 * t878;
t1068 = -t1041 * t878 + t1057 * t877;
t1085 = t1067 * t884 + t1068 * t888;
t1091 = pkin(6) * t1085;
t1086 = t1067 * t888 - t1068 * t884;
t1090 = pkin(6) * t1086;
t1089 = qJ(2) * t1068;
t1088 = pkin(1) * t1068 + pkin(7) * t1057;
t1058 = t1000 * t887 + t1040 * t883;
t1087 = -pkin(1) * t1058 + qJ(2) * t1067;
t765 = t987 + t825;
t664 = t765 * t886 - t964;
t1084 = pkin(2) * t664;
t1083 = pkin(3) * t664;
t1082 = pkin(8) * t664;
t673 = t765 * t882 + t963;
t1081 = pkin(8) * t673;
t1078 = pkin(7) * t1058;
t1077 = t664 * t877;
t1076 = t664 * t878;
t1075 = t673 * t883;
t1074 = t673 * t887;
t1071 = -pkin(2) * t1058 - pkin(3) * t1000 - pkin(8) * t1040;
t1070 = t692 * t883 + t712 * t887;
t1069 = t641 * t883 - t783 * t887;
t801 = -t825 + t987;
t917 = t826 + t955;
t962 = t917 * t882;
t1025 = -t801 * t886 + t962;
t961 = t917 * t886;
t1024 = -t801 * t882 - t961;
t1037 = t1024 * t887 - t883 * t998;
t1055 = -t1025 * t877 + t1037 * t878;
t1056 = t1025 * t878 + t1037 * t877;
t1066 = t1055 * t888 - t1056 * t884;
t1065 = t1055 * t884 + t1056 * t888;
t1064 = pkin(8) * t1041;
t997 = -t987 - t988;
t1019 = t882 * t997 - t961;
t1054 = pkin(2) * t1019;
t1053 = pkin(3) * t1019;
t1018 = t886 * t997 + t962;
t1052 = pkin(8) * t1018;
t1051 = pkin(8) * t1019;
t1050 = qJ(5) * t999;
t1047 = t1018 * t883;
t1046 = t1018 * t887;
t1045 = t1019 * t877;
t1044 = t1019 * t878;
t850 = g(1) * t888 + g(2) * t884;
t889 = qJD(1) ^ 2;
t833 = -pkin(1) * t889 - t850;
t849 = g(1) * t884 - t888 * g(2);
t899 = qJDD(1) * pkin(1) + t849;
t771 = t877 * t833 - t878 * t899;
t772 = t878 * t833 + t877 * t899;
t919 = t771 * t877 + t878 * t772;
t681 = t771 * t878 - t772 * t877;
t975 = t681 * t888;
t606 = t884 * t919 - t975;
t976 = t681 * t884;
t607 = t888 * t919 + t976;
t839 = qJDD(1) * t877 + t878 * t889;
t840 = qJDD(1) * t878 - t877 * t889;
t1001 = t888 * t839 + t840 * t884;
t940 = g(3) - qJDD(2);
t806 = -qJ(2) * t839 + t878 * t940;
t993 = -qJ(2) * t840 - t877 * t940;
t1039 = -pkin(6) * t1001 + t806 * t888 + t884 * t993;
t1038 = t1024 * t883 + t887 * t998;
t762 = qJD(4) * t831 + t916;
t945 = t860 * t882;
t925 = t829 * t945;
t897 = t762 * t886 + t925;
t944 = t860 * t886;
t924 = t829 * t944;
t898 = t762 * t882 - t924;
t927 = t883 * t955;
t990 = t887 * t898 - t927;
t1014 = -t877 * t897 + t878 * t990;
t1016 = t877 * t990 + t878 * t897;
t1036 = t1014 * t888 - t1016 * t884;
t1035 = t1014 * t884 + t1016 * t888;
t795 = t831 * t944;
t904 = -t795 - t925;
t794 = t831 * t945;
t905 = -t794 + t924;
t989 = -t826 * t883 + t887 * t905;
t1015 = -t877 * t904 + t878 * t989;
t1017 = t877 * t989 + t878 * t904;
t1034 = t1015 * t888 - t1017 * t884;
t1033 = t1015 * t884 + t1017 * t888;
t775 = -t839 * t884 + t888 * t840;
t1032 = -pkin(6) * t775 - t806 * t884 + t888 * t993;
t1031 = -2 * qJD(5);
t749 = -pkin(2) * t889 + qJDD(1) * pkin(7) + t772;
t983 = pkin(3) * t887;
t910 = -pkin(8) * t883 - t983;
t834 = t910 * qJD(1);
t864 = t887 * t940;
t986 = qJD(3) ^ 2;
t683 = (qJD(1) * t834 + t749) * t883 - qJDD(3) * pkin(3) - t986 * pkin(8) + t864;
t1026 = t762 * pkin(4) - t1050 + t683;
t881 = sin(qJ(6));
t885 = cos(qJ(6));
t768 = -t885 * t829 + t831 * t881;
t770 = t829 * t881 + t831 * t885;
t698 = t770 * t768;
t819 = qJDD(6) + t826;
t1002 = -t698 + t819;
t1021 = t1002 * t881;
t1020 = t1002 * t885;
t708 = t882 * t892 + t795;
t709 = -t886 * t892 + t794;
t906 = t887 * t709 + t927;
t992 = -t708 * t877 + t878 * t906;
t995 = t878 * t708 + t877 * t906;
t1012 = -t884 * t995 + t888 * t992;
t1011 = t884 * t992 + t888 * t995;
t644 = -qJD(6) * t768 + t762 * t881 - t885 * t892;
t852 = qJD(6) + t860;
t738 = t852 * t768;
t1003 = t644 - t738;
t748 = -qJDD(1) * pkin(2) - t889 * pkin(7) + t771;
t902 = -t837 + t865;
t903 = t836 + t922;
t669 = pkin(3) * t902 - pkin(8) * t903 + t748;
t724 = t887 * t749 - t883 * t940;
t684 = -pkin(3) * t986 + qJDD(3) * pkin(8) + t834 * t936 + t724;
t597 = t882 * t669 + t886 * t684;
t774 = pkin(4) * t829 - qJ(5) * t831;
t901 = -t826 * qJ(5) + t1031 * t860 - t829 * t774 + t597;
t994 = t887 * t826 + t883 * t905;
t926 = t887 * t955;
t991 = t883 * t898 + t926;
t766 = t768 ^ 2;
t767 = t770 ^ 2;
t851 = t852 ^ 2;
t985 = pkin(4) + pkin(5);
t984 = pkin(3) * t883;
t982 = pkin(4) * t886;
t979 = qJ(5) * t886;
t662 = t698 + t819;
t978 = t662 * t881;
t977 = t662 * t885;
t974 = t683 * t882;
t973 = t683 * t886;
t960 = t748 * t883;
t959 = t748 * t887;
t953 = t831 * t860;
t859 = t887 * t889 * t883;
t846 = -t859 + qJDD(3);
t950 = t846 * t883;
t949 = t846 * t887;
t847 = qJDD(3) + t859;
t948 = t847 * t883;
t947 = t852 * t881;
t946 = t852 * t885;
t873 = t883 ^ 2;
t943 = t873 * t889;
t572 = (-pkin(4) * t860 + t1031) * t831 + t1026;
t909 = pkin(5) * t860 - pkin(9) * t831;
t533 = t762 * pkin(5) + pkin(9) * t988 - t831 * t909 + t572;
t942 = t881 * t533;
t941 = t885 * t533;
t596 = -t886 * t669 + t882 * t684;
t939 = t1000 - t987;
t874 = t887 ^ 2;
t938 = t873 + t874;
t929 = t883 * t698;
t928 = t887 * t698;
t921 = qJ(5) * t882 + pkin(3);
t911 = t831 * t774 + qJDD(5) + t596;
t896 = t826 * pkin(4) + t911;
t891 = -qJ(5) * t987 + t896;
t519 = t917 * pkin(5) + pkin(9) * t998 + t891;
t551 = -pkin(4) * t987 + t901;
t526 = -pkin(5) * t988 + t762 * pkin(9) - t860 * t909 + t551;
t465 = -t885 * t519 + t881 * t526;
t722 = t883 * t749 + t864;
t647 = t722 * t883 + t887 * t724;
t920 = -t885 * t762 - t881 * t892;
t787 = -t849 * t884 - t888 * t850;
t914 = t877 * t859;
t913 = t878 * t859;
t843 = qJDD(1) * t888 - t884 * t889;
t908 = -pkin(6) * t843 - g(3) * t884;
t907 = t883 * t709 - t926;
t466 = t881 * t519 + t885 * t526;
t425 = -t465 * t885 + t466 * t881;
t426 = t881 * t465 + t885 * t466;
t520 = -t596 * t886 + t597 * t882;
t521 = t596 * t882 + t597 * t886;
t646 = t722 * t887 - t724 * t883;
t786 = t849 * t888 - t850 * t884;
t893 = (-qJD(6) + t852) * t770 - t920;
t890 = 0.2e1 * qJD(5) * t831 - t1026;
t871 = t874 * t889;
t856 = -t871 - t986;
t855 = t871 - t986;
t854 = -t943 - t986;
t853 = -t943 + t986;
t845 = t871 - t943;
t844 = t871 + t943;
t842 = qJDD(1) * t884 + t888 * t889;
t841 = t938 * qJDD(1);
t838 = -0.2e1 * t865 + t930;
t835 = 0.2e1 * t922 + t931;
t828 = t887 * t847;
t827 = t938 * t932;
t811 = -pkin(6) * t842 + g(3) * t888;
t799 = t836 * t887 - t873 * t932;
t798 = -t837 * t883 - t874 * t932;
t797 = qJDD(3) * t877 + t827 * t878;
t796 = -qJDD(3) * t878 + t827 * t877;
t793 = -t854 * t883 - t949;
t792 = -t853 * t883 + t828;
t791 = t856 * t887 - t948;
t790 = t855 * t887 - t950;
t789 = t854 * t887 - t950;
t788 = t856 * t883 + t828;
t780 = t841 * t878 - t844 * t877;
t779 = t841 * t877 + t844 * t878;
t773 = -t835 * t883 + t838 * t887;
t760 = t799 * t878 - t914;
t759 = t798 * t878 + t914;
t758 = t799 * t877 + t913;
t757 = t798 * t877 - t913;
t756 = t792 * t878 + t877 * t931;
t755 = t790 * t878 + t877 * t930;
t754 = t792 * t877 - t878 * t931;
t753 = t790 * t877 - t878 * t930;
t734 = -t767 + t851;
t733 = t766 - t851;
t732 = t793 * t878 + t835 * t877;
t731 = t791 * t878 - t838 * t877;
t730 = t793 * t877 - t835 * t878;
t729 = t791 * t877 + t838 * t878;
t723 = t773 * t878 - t845 * t877;
t721 = t773 * t877 + t845 * t878;
t720 = -t767 - t851;
t717 = t829 * t934 + t900;
t710 = t762 - t953;
t703 = -t779 * t884 + t780 * t888;
t702 = t779 * t888 + t780 * t884;
t695 = t767 - t766;
t694 = -pkin(7) * t789 + t959;
t689 = -pkin(7) * t788 + t960;
t676 = -pkin(2) * t789 + t724;
t675 = -pkin(2) * t788 + t722;
t670 = -t851 - t766;
t668 = pkin(1) * t940 + qJ(2) * t919;
t658 = (-t768 * t885 + t770 * t881) * t852;
t657 = (t768 * t881 + t770 * t885) * t852;
t652 = -t730 * t884 + t732 * t888;
t651 = -t729 * t884 + t731 * t888;
t650 = t730 * t888 + t732 * t884;
t649 = t729 * t888 + t731 * t884;
t648 = -t766 - t767;
t643 = -qJD(6) * t770 - t920;
t626 = t733 * t885 - t978;
t625 = -t734 * t881 + t1020;
t624 = -t733 * t881 - t977;
t623 = -t734 * t885 - t1021;
t622 = t710 * t883 + t1046;
t621 = -t717 * t883 + t1074;
t620 = -t710 * t887 + t1047;
t619 = t717 * t887 + t1075;
t618 = -t720 * t881 - t977;
t617 = t720 * t885 - t978;
t616 = -qJ(2) * t779 + t646 * t878;
t615 = qJ(2) * t780 + t646 * t877;
t614 = t711 * t883 + t1046;
t613 = -t883 * t999 - t1074;
t612 = -t711 * t887 + t1047;
t611 = t887 * t999 - t1075;
t610 = t647 * t878 + t748 * t877;
t609 = t647 * t877 - t748 * t878;
t608 = t973 + t1082;
t602 = t644 + t738;
t598 = (qJD(6) + t852) * t770 + t920;
t595 = t974 - t1051;
t594 = t644 * t885 - t770 * t947;
t593 = -t644 * t881 - t770 * t946;
t592 = -t643 * t881 + t768 * t946;
t591 = -t643 * t885 - t768 * t947;
t590 = t670 * t885 - t1021;
t589 = t670 * t881 + t1020;
t576 = -t657 * t882 + t658 * t886;
t575 = -t657 * t886 - t658 * t882;
t574 = -qJ(2) * t730 - t676 * t877 + t694 * t878;
t573 = -qJ(2) * t729 - t675 * t877 + t689 * t878;
t563 = t576 * t887 - t819 * t883;
t562 = t622 * t878 + t1045;
t561 = t621 * t878 - t1077;
t560 = t622 * t877 - t1044;
t559 = t621 * t877 + t1076;
t558 = -pkin(1) * t789 + qJ(2) * t732 + t676 * t878 + t694 * t877;
t557 = -pkin(1) * t788 + qJ(2) * t731 + t675 * t878 + t689 * t877;
t555 = t614 * t878 + t1045;
t554 = t613 * t878 + t1077;
t553 = t614 * t877 - t1044;
t552 = t613 * t877 - t1076;
t550 = t597 + t1083;
t549 = -pkin(3) * t1041 - pkin(4) * t998 + qJ(5) * t712;
t548 = t596 - t1053;
t547 = (-t710 + t953) * pkin(4) + t890;
t546 = pkin(4) * t953 + t1050 + t890;
t545 = qJ(5) * t939 + t896;
t544 = -t624 * t882 + t626 * t886;
t543 = -t623 * t882 + t625 * t886;
t542 = -t624 * t886 - t626 * t882;
t541 = -t623 * t886 - t625 * t882;
t540 = pkin(4) * t939 + t901;
t535 = t617 * t882 + t618 * t886;
t534 = -t617 * t886 + t618 * t882;
t528 = -t609 * t884 + t610 * t888;
t527 = t609 * t888 + t610 * t884;
t525 = t602 * t881 + t885 * t893;
t524 = -t1003 * t881 - t598 * t885;
t523 = -t602 * t885 + t881 * t893;
t522 = -t1003 * t885 + t598 * t881;
t517 = -t593 * t882 + t594 * t886;
t516 = -t591 * t882 + t592 * t886;
t515 = -t593 * t886 - t594 * t882;
t514 = -t591 * t886 - t592 * t882;
t513 = t589 * t882 + t590 * t886;
t512 = -t589 * t886 + t590 * t882;
t511 = -pkin(2) * t619 - pkin(3) * t717 - t1081 - t974;
t510 = -pkin(2) * t612 + pkin(3) * t711 - t1052 + t973;
t509 = -qJ(2) * t609 - (pkin(2) * t877 - pkin(7) * t878) * t646;
t508 = -t1053 + (-t997 - t987) * qJ(5) + (t917 + t826) * pkin(4) + t911;
t507 = -t1083 + qJ(5) * t894 + (-t765 + t987) * pkin(4) - t901;
t506 = -t547 * t882 - t710 * t979 - t1051;
t505 = t521 * t887 + t683 * t883;
t504 = t521 * t883 - t683 * t887;
t503 = t563 * t878 - t575 * t877;
t502 = t563 * t877 + t575 * t878;
t501 = t517 * t887 - t929;
t500 = t516 * t887 + t929;
t499 = -pkin(4) * t967 + t546 * t886 - t1082;
t498 = t544 * t887 - t883 * t893;
t497 = t543 * t887 - t602 * t883;
t496 = -t520 - t1064;
t495 = -t1003 * t883 + t535 * t887;
t494 = t1003 * t887 + t535 * t883;
t493 = -t560 * t884 + t562 * t888;
t492 = -t559 * t884 + t561 * t888;
t491 = t560 * t888 + t562 * t884;
t490 = t559 * t888 + t561 * t884;
t489 = t551 * t886 + t882 * t891;
t488 = t551 * t882 - t886 * t891;
t487 = -t553 * t884 + t555 * t888;
t486 = -t552 * t884 + t554 * t888;
t485 = t553 * t888 + t555 * t884;
t484 = t552 * t888 + t554 * t884;
t483 = qJ(2) * t610 - (-pkin(2) * t878 - pkin(7) * t877 - pkin(1)) * t646;
t482 = t513 * t887 - t598 * t883;
t481 = t513 * t883 + t598 * t887;
t480 = -pkin(7) * t619 - t550 * t883 + t608 * t887;
t479 = -pkin(7) * t612 - t548 * t883 + t595 * t887;
t474 = -pkin(9) * t617 + qJ(5) * t1003 - t941;
t473 = -pkin(2) * t620 - t886 * t547 + t710 * t921 - t1052;
t472 = -pkin(2) * t611 + t1081 - t882 * t546 + (-pkin(3) - t982) * t999;
t471 = -pkin(9) * t589 + qJ(5) * t598 - t942;
t470 = t523 * t882 + t525 * t886;
t469 = -t522 * t882 + t524 * t886;
t468 = -t523 * t886 + t525 * t882;
t467 = -t522 * t886 - t524 * t882;
t464 = t1071 - t521;
t463 = -t540 * t882 + t545 * t886 - t1064;
t462 = t489 * t887 + t572 * t883;
t461 = t489 * t883 - t572 * t887;
t460 = t498 * t878 - t542 * t877;
t459 = t497 * t878 - t541 * t877;
t458 = t498 * t877 + t542 * t878;
t457 = t497 * t877 + t541 * t878;
t456 = t469 * t887 - t695 * t883;
t455 = t505 * t878 + t520 * t877;
t454 = t505 * t877 - t520 * t878;
t453 = t1041 * t984 + t496 * t887 - t1078;
t452 = t501 * t878 - t515 * t877;
t451 = t500 * t878 - t514 * t877;
t450 = t501 * t877 + t515 * t878;
t449 = t500 * t877 + t514 * t878;
t448 = t495 * t878 + t534 * t877;
t447 = t495 * t877 - t534 * t878;
t446 = t470 * t887 - t648 * t883;
t445 = t470 * t883 + t648 * t887;
t444 = -pkin(9) * t618 + t1003 * t985 + t942;
t443 = -pkin(9) * t590 + t598 * t985 - t941;
t442 = -pkin(2) * t504 + pkin(3) * t683 - pkin(8) * t521;
t441 = t482 * t878 + t512 * t877;
t440 = t482 * t877 - t512 * t878;
t439 = -t540 * t886 - t545 * t882 + t1071;
t438 = -pkin(8) * t488 + (pkin(4) * t882 - t979) * t572;
t437 = -pkin(7) * t620 + t506 * t887 - t508 * t883;
t436 = -pkin(3) * t488 + pkin(4) * t891 - qJ(5) * t551;
t435 = -pkin(7) * t611 + t499 * t887 - t507 * t883;
t434 = -pkin(7) * t504 + (-pkin(8) * t887 + t984) * t520;
t433 = t463 * t887 - t549 * t883 - t1078;
t432 = -qJ(2) * t559 + t480 * t878 - t511 * t877;
t431 = t462 * t878 + t488 * t877;
t430 = t462 * t877 - t488 * t878;
t429 = -qJ(2) * t553 + t479 * t878 - t510 * t877;
t428 = -pkin(1) * t619 + qJ(2) * t561 + t480 * t877 + t511 * t878;
t427 = -pkin(1) * t612 + qJ(2) * t555 + t479 * t877 + t510 * t878;
t424 = -pkin(3) * t534 - qJ(5) * t618 + t617 * t985 - t466;
t423 = t456 * t878 - t467 * t877;
t422 = t456 * t877 + t467 * t878;
t421 = t446 * t878 + t468 * t877;
t420 = t446 * t877 - t468 * t878;
t419 = -t454 * t884 + t455 * t888;
t418 = t454 * t888 + t455 * t884;
t417 = -pkin(3) * t512 - qJ(5) * t590 + t589 * t985 - t465;
t416 = -t447 * t884 + t448 * t888;
t415 = t447 * t888 + t448 * t884;
t414 = -pkin(3) * t468 - qJ(5) * t525 + t523 * t985;
t413 = -pkin(9) * t425 - qJ(5) * t533;
t412 = -pkin(8) * t534 - t444 * t882 + t474 * t886;
t411 = -t440 * t884 + t441 * t888;
t410 = t440 * t888 + t441 * t884;
t409 = t453 * t878 - t464 * t877 - t1089;
t408 = -pkin(9) * t523 + qJ(5) * t648 - t425;
t407 = -pkin(8) * t512 - t443 * t882 + t471 * t886;
t406 = -qJ(2) * t560 + t437 * t878 - t473 * t877;
t405 = -pkin(2) * t461 - pkin(8) * t489 + (t921 + t982) * t572;
t404 = -qJ(2) * t552 + t435 * t878 - t472 * t877;
t403 = -pkin(9) * t525 + t648 * t985 - t426;
t402 = t453 * t877 + t464 * t878 + t1087;
t401 = -pkin(1) * t620 + qJ(2) * t562 + t437 * t877 + t473 * t878;
t400 = -pkin(9) * t426 - t533 * t985;
t399 = -pkin(1) * t611 + qJ(2) * t554 + t435 * t877 + t472 * t878;
t398 = -pkin(2) * t494 - pkin(3) * t1003 - pkin(8) * t535 - t444 * t886 - t474 * t882;
t397 = t433 * t878 - t439 * t877 - t1089;
t396 = -t430 * t884 + t431 * t888;
t395 = t430 * t888 + t431 * t884;
t394 = -pkin(2) * t481 - pkin(3) * t598 - pkin(8) * t513 - t443 * t886 - t471 * t882;
t393 = t433 * t877 + t439 * t878 + t1087;
t392 = -pkin(7) * t461 - t436 * t883 + t438 * t887;
t391 = -qJ(2) * t454 + t434 * t878 - t442 * t877;
t390 = t425 * t882 + t426 * t886;
t389 = -t425 * t886 + t426 * t882;
t388 = -t420 * t884 + t421 * t888;
t387 = t420 * t888 + t421 * t884;
t386 = t390 * t887 + t533 * t883;
t385 = t390 * t883 - t533 * t887;
t384 = -pkin(1) * t504 + qJ(2) * t455 + t434 * t877 + t442 * t878;
t383 = -pkin(7) * t494 + t412 * t887 - t424 * t883;
t382 = -pkin(7) * t481 + t407 * t887 - t417 * t883;
t381 = -pkin(8) * t468 - t403 * t882 + t408 * t886;
t380 = -pkin(2) * t445 - pkin(3) * t648 - pkin(8) * t470 - t403 * t886 - t408 * t882;
t379 = -qJ(2) * t430 + t392 * t878 - t405 * t877;
t378 = t386 * t878 + t389 * t877;
t377 = t386 * t877 - t389 * t878;
t376 = -pkin(1) * t461 + qJ(2) * t431 + t392 * t877 + t405 * t878;
t375 = -pkin(8) * t389 - t400 * t882 + t413 * t886;
t374 = -qJ(2) * t447 + t383 * t878 - t398 * t877;
t373 = -pkin(3) * t389 - qJ(5) * t426 + t425 * t985;
t372 = -pkin(7) * t445 + t381 * t887 - t414 * t883;
t371 = -pkin(1) * t494 + qJ(2) * t448 + t383 * t877 + t398 * t878;
t370 = -qJ(2) * t440 + t382 * t878 - t394 * t877;
t369 = -pkin(1) * t481 + qJ(2) * t441 + t382 * t877 + t394 * t878;
t368 = -pkin(2) * t385 + pkin(3) * t533 - pkin(8) * t390 - t400 * t886 - t413 * t882;
t367 = -t377 * t884 + t378 * t888;
t366 = t377 * t888 + t378 * t884;
t365 = -qJ(2) * t420 + t372 * t878 - t380 * t877;
t364 = -pkin(1) * t445 + qJ(2) * t421 + t372 * t877 + t380 * t878;
t363 = -pkin(7) * t385 - t373 * t883 + t375 * t887;
t362 = -qJ(2) * t377 + t363 * t878 - t368 * t877;
t361 = -pkin(1) * t385 + qJ(2) * t378 + t363 * t877 + t368 * t878;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t842, -t843, 0, t787, 0, 0, 0, 0, 0, 0, -t1001, -t775, 0, t607, 0, 0, 0, 0, 0, 0, t651, t652, t703, t528, 0, 0, 0, 0, 0, 0, t487, t492, t1086, t419, 0, 0, 0, 0, 0, 0, t493, t1086, t486, t396, 0, 0, 0, 0, 0, 0, t411, t416, t388, t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t843, -t842, 0, t786, 0, 0, 0, 0, 0, 0, t775, -t1001, 0, t606, 0, 0, 0, 0, 0, 0, t649, t650, t702, t527, 0, 0, 0, 0, 0, 0, t485, t490, t1085, t418, 0, 0, 0, 0, 0, 0, t491, t1085, t484, t395, 0, 0, 0, 0, 0, 0, t410, t415, t387, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t940, 0, 0, 0, 0, 0, 0, t788, t789, 0, -t646, 0, 0, 0, 0, 0, 0, t612, t619, t1058, t504, 0, 0, 0, 0, 0, 0, t620, t1058, t611, t461, 0, 0, 0, 0, 0, 0, t481, t494, t445, t385; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t843, 0, -t842, 0, t908, -t811, -t786, -pkin(6) * t786, 0, 0, t775, 0, -t1001, 0, t1032, -t1039, -t606, -pkin(6) * t606 + qJ(2) * t975 - t668 * t884, -t758 * t884 + t760 * t888, -t721 * t884 + t723 * t888, -t754 * t884 + t756 * t888, -t757 * t884 + t759 * t888, -t753 * t884 + t755 * t888, -t796 * t884 + t797 * t888, -pkin(6) * t649 - t557 * t884 + t573 * t888, -pkin(6) * t650 - t558 * t884 + t574 * t888, -pkin(6) * t702 - t615 * t884 + t616 * t888, -pkin(6) * t527 - t483 * t884 + t509 * t888, t1012, -t1094, t1066, t1036, -t1092, t1034, -pkin(6) * t485 - t427 * t884 + t429 * t888, -pkin(6) * t490 - t428 * t884 + t432 * t888, -t402 * t884 + t409 * t888 - t1091, -pkin(6) * t418 - t384 * t884 + t391 * t888, t1012, t1066, t1094, t1034, t1092, t1036, -pkin(6) * t491 - t401 * t884 + t406 * t888, -t393 * t884 + t397 * t888 - t1091, -pkin(6) * t484 - t399 * t884 + t404 * t888, -pkin(6) * t395 - t376 * t884 + t379 * t888, -t450 * t884 + t452 * t888, -t422 * t884 + t423 * t888, -t457 * t884 + t459 * t888, -t449 * t884 + t451 * t888, -t458 * t884 + t460 * t888, -t502 * t884 + t503 * t888, -pkin(6) * t410 - t369 * t884 + t370 * t888, -pkin(6) * t415 - t371 * t884 + t374 * t888, -pkin(6) * t387 - t364 * t884 + t365 * t888, -pkin(6) * t366 - t361 * t884 + t362 * t888; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t842, 0, t843, 0, t811, t908, t787, pkin(6) * t787, 0, 0, t1001, 0, t775, 0, t1039, t1032, t607, pkin(6) * t607 + qJ(2) * t976 + t668 * t888, t758 * t888 + t760 * t884, t721 * t888 + t723 * t884, t754 * t888 + t756 * t884, t757 * t888 + t759 * t884, t753 * t888 + t755 * t884, t796 * t888 + t797 * t884, pkin(6) * t651 + t557 * t888 + t573 * t884, pkin(6) * t652 + t558 * t888 + t574 * t884, pkin(6) * t703 + t615 * t888 + t616 * t884, pkin(6) * t528 + t483 * t888 + t509 * t884, t1011, t1095, t1065, t1035, t1093, t1033, pkin(6) * t487 + t427 * t888 + t429 * t884, pkin(6) * t492 + t428 * t888 + t432 * t884, t402 * t888 + t409 * t884 + t1090, pkin(6) * t419 + t384 * t888 + t391 * t884, t1011, t1065, -t1095, t1033, -t1093, t1035, pkin(6) * t493 + t401 * t888 + t406 * t884, t393 * t888 + t397 * t884 + t1090, pkin(6) * t486 + t399 * t888 + t404 * t884, pkin(6) * t396 + t376 * t888 + t379 * t884, t450 * t888 + t452 * t884, t422 * t888 + t423 * t884, t457 * t888 + t459 * t884, t449 * t888 + t451 * t884, t458 * t888 + t460 * t884, t502 * t888 + t503 * t884, pkin(6) * t411 + t369 * t888 + t370 * t884, pkin(6) * t416 + t371 * t888 + t374 * t884, pkin(6) * t388 + t364 * t888 + t365 * t884, pkin(6) * t367 + t361 * t888 + t362 * t884; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t849, t850, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t840 - t771, -pkin(1) * t839 - t772, 0, -pkin(1) * t681, t903 * t883, t835 * t887 + t838 * t883, t853 * t887 + t948, -t902 * t887, t855 * t883 + t949, 0, pkin(1) * t729 + pkin(2) * t838 + pkin(7) * t791 - t959, pkin(1) * t730 - pkin(2) * t835 + pkin(7) * t793 + t960, pkin(1) * t779 + pkin(2) * t844 + pkin(7) * t841 + t647, pkin(1) * t609 - pkin(2) * t748 + pkin(7) * t647, t907, t1069, t1038, t991, t1070, t994, pkin(1) * t553 + pkin(7) * t614 + t548 * t887 + t595 * t883 - t1054, pkin(1) * t559 + pkin(7) * t621 + t550 * t887 + t608 * t883 + t1084, t883 * t496 + (-pkin(2) - t983) * t1041 + t1088, pkin(1) * t454 + pkin(7) * t505 + (-pkin(2) + t910) * t520, t907, t1038, -t1069, t994, -t1070, t991, pkin(1) * t560 + pkin(7) * t622 + t506 * t883 + t508 * t887 - t1054, -pkin(2) * t1041 + t463 * t883 + t549 * t887 + t1088, pkin(1) * t552 + pkin(7) * t613 + t499 * t883 + t507 * t887 - t1084, pkin(1) * t430 - pkin(2) * t488 + pkin(7) * t462 + t436 * t887 + t438 * t883, t517 * t883 + t928, t469 * t883 + t695 * t887, t543 * t883 + t602 * t887, t516 * t883 - t928, t544 * t883 + t887 * t893, t576 * t883 + t819 * t887, pkin(1) * t440 - pkin(2) * t512 + pkin(7) * t482 + t407 * t883 + t417 * t887, pkin(1) * t447 - pkin(2) * t534 + pkin(7) * t495 + t412 * t883 + t424 * t887, pkin(1) * t420 - pkin(2) * t468 + pkin(7) * t446 + t381 * t883 + t414 * t887, pkin(1) * t377 - pkin(2) * t389 + pkin(7) * t386 + t373 * t887 + t375 * t883;];
tauB_reg  = t1;
