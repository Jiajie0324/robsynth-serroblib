% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:08
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:07:22
% EndTime: 2019-03-09 05:07:36
% DurationCPUTime: 7.59s
% Computational Cost: add. (8054->638), mult. (16284->774), div. (0->0), fcn. (10588->12), ass. (0->310)
t248 = cos(qJ(4));
t244 = sin(qJ(4));
t372 = qJD(3) * t244;
t245 = sin(qJ(3));
t374 = qJD(1) * t245;
t161 = t248 * t374 + t372;
t241 = sin(pkin(10));
t217 = pkin(1) * t241 + pkin(7);
t184 = t217 * qJD(1);
t249 = cos(qJ(3));
t370 = qJD(3) * t249;
t178 = t217 * qJDD(1);
t454 = -qJD(2) * qJD(3) - t178;
t79 = t249 * qJDD(2) - t184 * t370 + t245 * t454;
t278 = qJDD(3) * pkin(3) + t79;
t360 = qJD(1) * qJD(3);
t336 = t249 * t360;
t358 = t245 * qJDD(1);
t361 = t248 * qJD(3);
t368 = qJD(4) * t245;
t453 = qJD(1) * t368 - qJDD(3);
t84 = -qJD(4) * t361 + (-t336 - t358) * t248 + t453 * t244;
t262 = -t84 * qJ(5) + t161 * qJD(5) + t278;
t435 = pkin(4) + pkin(5);
t373 = qJD(1) * t249;
t85 = t244 * (qJD(3) * (qJD(4) + t373) + t358) + t453 * t248;
t10 = -t435 * t85 + t262;
t238 = qJ(1) + pkin(10);
t224 = sin(t238);
t225 = cos(t238);
t314 = g(1) * t225 + g(2) * t224;
t441 = t245 * t314;
t463 = t10 + t441;
t362 = t245 * qJD(2);
t137 = t249 * t184 + t362;
t116 = qJD(3) * pkin(8) + t137;
t233 = t245 * pkin(8);
t235 = t249 * pkin(3);
t348 = -pkin(2) - t235;
t296 = t348 - t233;
t242 = cos(pkin(10));
t431 = pkin(1) * t242;
t269 = t296 - t431;
t121 = t269 * qJD(1);
t58 = -t244 * t116 + t248 * t121;
t382 = qJD(5) - t58;
t243 = sin(qJ(6));
t385 = t245 * t248;
t247 = cos(qJ(6));
t387 = t244 * t247;
t138 = t243 * t385 - t245 * t387;
t159 = t244 * t374 - t361;
t158 = t245 * t184;
t136 = t249 * qJD(2) - t158;
t318 = qJD(3) * pkin(3) + t136;
t273 = t161 * qJ(5) + t318;
t41 = -t159 * t435 + t273;
t386 = t244 * t249;
t127 = t224 * t386 + t225 * t248;
t383 = t248 * t249;
t128 = t224 * t383 - t225 * t244;
t445 = t127 * t247 - t128 * t243;
t129 = -t224 * t248 + t225 * t386;
t130 = t224 * t244 + t225 * t383;
t60 = t129 * t247 - t130 * t243;
t95 = t159 * t243 + t161 * t247;
t462 = -g(1) * t60 - g(2) * t445 + g(3) * t138 - t41 * t95;
t210 = -qJD(4) + t373;
t396 = t161 * t210;
t398 = t159 * t210;
t461 = t244 * (t85 - t396) + t248 * (t84 - t398);
t298 = -t247 * t159 + t161 * t243;
t421 = t95 * t298;
t346 = t244 * t373;
t369 = qJD(4) * t244;
t434 = pkin(8) - pkin(9);
t317 = pkin(3) * t245 - pkin(8) * t249;
t167 = t317 * qJD(1);
t83 = t248 * t136 + t244 * t167;
t66 = qJ(5) * t374 + t83;
t460 = pkin(9) * t346 + t434 * t369 + t66;
t187 = t434 * t248;
t354 = t435 * t245;
t357 = pkin(9) * t383;
t82 = -t244 * t136 + t248 * t167;
t459 = qJD(4) * t187 - (-t354 - t357) * qJD(1) + t82;
t456 = t85 + t396;
t455 = -t161 * pkin(9) + t382;
t452 = -t298 ^ 2 + t95 ^ 2;
t200 = qJD(6) + t210;
t25 = qJD(6) * t95 - t243 * t84 - t247 * t85;
t447 = t95 * t200 - t25;
t389 = t244 * qJ(5);
t286 = -t248 * t435 - t389;
t151 = pkin(3) - t286;
t34 = t210 * t435 + t455;
t198 = t210 * qJ(5);
t59 = t116 * t248 + t121 * t244;
t43 = pkin(9) * t159 + t59;
t37 = -t198 + t43;
t12 = t243 * t34 + t247 * t37;
t230 = t249 * qJDD(1);
t155 = t245 * t360 + qJDD(4) - t230;
t367 = qJD(4) * t248;
t351 = -t245 * qJDD(2) + t249 * t454;
t371 = qJD(3) * t245;
t78 = -t184 * t371 - t351;
t71 = qJDD(3) * pkin(8) + t78;
t170 = t317 * qJD(3);
t86 = qJD(1) * t170 + qJDD(1) * t269;
t324 = t116 * t367 + t121 * t369 + t244 * t71 - t248 * t86;
t302 = qJDD(5) + t324;
t7 = t84 * pkin(9) - t155 * t435 + t302;
t148 = t155 * qJ(5);
t15 = -t116 * t369 + t121 * t367 + t244 * t86 + t248 * t71;
t196 = t210 * qJD(5);
t13 = t148 + t15 - t196;
t9 = pkin(9) * t85 + t13;
t2 = -qJD(6) * t12 - t243 * t9 + t247 * t7;
t449 = t12 * t200 + t2;
t364 = qJD(6) * t247;
t365 = qJD(6) * t243;
t24 = -t159 * t364 + t161 * t365 - t243 * t85 + t247 * t84;
t448 = -t200 * t298 + t24;
t402 = pkin(1) * qJDD(1);
t446 = t244 * qJD(5) + t362;
t163 = t243 * t244 + t247 * t248;
t443 = t163 * qJD(6) - t243 * t369 - t247 * t367;
t428 = pkin(8) * t155;
t57 = pkin(4) * t159 - t273;
t442 = t210 * t57 + t428;
t341 = t245 * t367;
t345 = t244 * t370;
t271 = t341 + t345;
t388 = t244 * t245;
t440 = t155 * t388 - t210 * t271;
t343 = t210 * t369;
t384 = t248 * t155;
t439 = qJD(1) * (-t159 * t245 + t210 * t386) - t343 - t384;
t139 = t163 * t245;
t289 = -t243 * t7 - t247 * t9 - t34 * t364 + t365 * t37;
t299 = t127 * t243 + t128 * t247;
t61 = t129 * t243 + t130 * t247;
t437 = g(1) * t61 + g(2) * t299 + g(3) * t139 + t298 * t41 + t289;
t436 = t161 ^ 2;
t430 = pkin(4) * t155;
t429 = pkin(4) * t244;
t427 = pkin(8) * t161;
t426 = g(1) * t224;
t422 = g(3) * t249;
t277 = t163 * t249;
t390 = t243 * t248;
t297 = -t387 + t390;
t47 = qJD(3) * t277 + (qJD(4) - qJD(6)) * t245 * t297;
t420 = -t139 * t25 - t298 * t47;
t186 = t434 * t244;
t104 = t186 * t247 - t187 * t243;
t419 = qJD(6) * t104 + t243 * t459 - t247 * t460;
t105 = t186 * t243 + t187 * t247;
t418 = -qJD(6) * t105 + t243 * t460 + t247 * t459;
t149 = -qJDD(6) + t155;
t344 = t249 * t361;
t46 = t243 * t344 + t245 * t443 - t247 * t345;
t417 = t138 * t149 - t46 * t200;
t11 = -t243 * t37 + t247 * t34;
t416 = t11 * t200;
t52 = -t198 + t59;
t413 = t210 * t52;
t412 = t210 * t59;
t411 = t249 * t84;
t410 = t85 * t248;
t355 = t435 * t244;
t401 = qJ(5) * t248;
t287 = -t355 + t401;
t408 = qJD(4) * t287 - (qJD(1) * t287 - t184) * t249 + t446;
t69 = t85 * t385;
t407 = -t159 * t344 - t69;
t173 = -qJ(5) * t243 - t247 * t435;
t406 = qJD(6) * t173 - t243 * t43 + t247 * t455;
t174 = qJ(5) * t247 - t243 * t435;
t405 = -qJD(6) * t174 - t243 * t455 - t247 * t43;
t307 = -t401 + t429;
t404 = qJD(4) * t307 - (qJD(1) * t307 + t184) * t249 - t446;
t403 = -qJD(1) * t277 - t443;
t399 = t159 * qJ(5);
t397 = t161 * t159;
t395 = t217 * t244;
t394 = t224 * t245;
t393 = t224 * t249;
t392 = t225 * t245;
t391 = t225 * t249;
t381 = t243 * t367 + t244 * t364 - t248 * t365 - t373 * t390 + (t346 - t369) * t247;
t131 = t245 * t384;
t380 = -t210 * t344 + t131;
t218 = -pkin(2) - t431;
t376 = t235 + t233;
t150 = t218 - t376;
t379 = t150 * t367 + t244 * t170;
t166 = t217 * t383;
t98 = t244 * t150 + t166;
t378 = t314 * t385;
t377 = g(1) * t394 - g(2) * t392;
t239 = t245 ^ 2;
t240 = t249 ^ 2;
t375 = t239 - t240;
t185 = qJD(1) * t218;
t366 = qJD(5) * t248;
t179 = qJDD(1) * t218;
t126 = t161 * t341;
t356 = -t161 * t345 + t84 * t388 - t126;
t253 = qJD(1) ^ 2;
t352 = t245 * t253 * t249;
t350 = g(1) * t391 + g(2) * t393 + g(3) * t245;
t250 = cos(qJ(1));
t349 = t250 * pkin(1) + t225 * pkin(2) + t224 * pkin(7);
t342 = t244 * t368;
t340 = t210 * t374;
t337 = t159 ^ 2 - t436;
t246 = sin(qJ(1));
t334 = -t246 * pkin(1) + t225 * pkin(7);
t333 = -pkin(4) - t395;
t331 = t161 * t371 + t411;
t330 = t159 * t371 - t249 * t85;
t329 = -t127 * pkin(4) + qJ(5) * t128;
t328 = -t129 * pkin(4) + qJ(5) * t130;
t327 = qJD(4) * t159 - t84;
t165 = t217 * t386;
t97 = t150 * t248 - t165;
t325 = t200 ^ 2;
t323 = -pkin(8) * t410 - t350;
t321 = pkin(4) * t383 + qJ(5) * t386 + t376;
t320 = t245 * t336;
t319 = -t24 * t249 - t371 * t95;
t316 = -g(1) * t127 + g(2) * t129;
t315 = g(1) * t128 - g(2) * t130;
t313 = -g(2) * t225 + t426;
t312 = g(1) * t246 - g(2) * t250;
t88 = -qJ(5) * t249 + t98;
t311 = qJD(4) * t166 + t150 * t369 - t248 * t170;
t310 = -t138 * t24 + t46 * t95;
t309 = t327 * pkin(8);
t308 = pkin(4) * t248 + t389;
t234 = t249 * pkin(4);
t62 = t249 * pkin(5) + t165 + t234 + (-pkin(9) * t245 - t150) * t248;
t73 = pkin(9) * t388 + t88;
t27 = -t243 * t73 + t247 * t62;
t28 = t243 * t62 + t247 * t73;
t49 = pkin(4) * t210 + t382;
t306 = -t244 * t52 + t248 * t49;
t305 = t244 * t49 + t248 * t52;
t304 = -t244 * t59 - t248 * t58;
t303 = t244 * t58 - t248 * t59;
t301 = pkin(3) * t391 + pkin(8) * t392 + t349;
t300 = -t139 * t149 + t200 * t47;
t293 = pkin(3) + t308;
t292 = -g(1) * t129 - g(2) * t127 - g(3) * t388;
t291 = pkin(8) * qJD(4) * t210 - t422;
t288 = t249 * t25 - t298 * t371;
t284 = t244 * t155 - t210 * t367;
t252 = qJD(3) ^ 2;
t282 = t217 * t252 + 0.2e1 * t179;
t19 = pkin(4) * t85 - t262;
t281 = -t19 + t291;
t280 = t291 + t278;
t279 = t159 * t342 + t407;
t274 = -t128 * pkin(4) - t127 * qJ(5) + t334;
t272 = -t342 + t344;
t270 = t296 * t426;
t267 = t210 * t318 - t428;
t266 = t130 * pkin(4) + qJ(5) * t129 + t301;
t265 = 0.2e1 * qJD(3) * t185 - qJDD(3) * t217;
t264 = -t292 - t324;
t263 = -t244 * t398 - t410;
t44 = (-t245 * t361 - t249 * t369) * t217 + t379;
t14 = t302 - t430;
t261 = qJD(4) * t306 + t13 * t248 + t14 * t244;
t260 = qJD(4) * t304 + t15 * t248 + t244 * t324;
t259 = -t79 * t245 + t78 * t249 + (-t136 * t249 - t137 * t245) * qJD(3);
t258 = t159 * t271 + t388 * t85;
t257 = t161 * t57 + qJDD(5) - t264;
t256 = t330 - t440;
t255 = g(1) * t130 + g(2) * t128 + g(3) * t385 - t210 * t58 - t15;
t223 = qJ(5) * t371;
t208 = qJ(5) * t385;
t190 = pkin(8) * t391;
t188 = pkin(8) * t393;
t177 = qJDD(3) * t249 - t245 * t252;
t176 = qJDD(3) * t245 + t249 * t252;
t109 = -t208 + (t217 + t429) * t245;
t102 = -t155 * t249 - t210 * t371;
t101 = pkin(4) * t161 + t399;
t96 = t208 + (-t217 - t355) * t245;
t89 = t234 - t97;
t68 = -pkin(4) * t374 - t82;
t65 = -t161 * t435 - t399;
t55 = (qJD(4) * t308 - t366) * t245 + (t217 + t307) * t370;
t53 = -t84 - t398;
t48 = (-t161 * t245 + t210 * t383) * qJD(1) + t284;
t45 = t371 * t395 - t311;
t40 = t333 * t371 + t311;
t39 = (qJD(4) * t286 + t366) * t245 + (-t217 + t287) * t370;
t36 = -t249 * qJD(5) + t223 + t44;
t35 = -t84 * t244 - t248 * t396;
t33 = t161 * t272 - t385 * t84;
t31 = t223 + (pkin(9) * qJD(4) - qJD(3) * t217) * t385 + (-qJD(5) + (pkin(9) * qJD(3) - qJD(4) * t217) * t244) * t249 + t379;
t30 = pkin(9) * t342 + (-t357 + (-pkin(5) + t333) * t245) * qJD(3) + t311;
t26 = t210 * t342 + t331 + t380;
t4 = -qJD(6) * t28 - t243 * t31 + t247 * t30;
t3 = qJD(6) * t27 + t243 * t30 + t247 * t31;
t1 = [0, 0, 0, 0, 0, qJDD(1), t312, g(1) * t250 + g(2) * t246, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t242 * t402 + t313, -0.2e1 * t241 * t402 + t314, 0 (t312 + (t241 ^ 2 + t242 ^ 2) * t402) * pkin(1), qJDD(1) * t239 + 0.2e1 * t320, 0.2e1 * t230 * t245 - 0.2e1 * t360 * t375, t176, qJDD(1) * t240 - 0.2e1 * t320, t177, 0, t265 * t245 + (-t282 + t313) * t249, t245 * t282 + t249 * t265 - t377 (t239 + t240) * t178 + t259 - t314, t179 * t218 - g(1) * (-t224 * pkin(2) + t334) - g(2) * t349 + t259 * t217, t33, t279 + t356, t26, t258 (t210 * t372 + t85) * t249 + (-qJD(3) * t159 - t284) * t245, t102, t97 * t155 - t45 * t210 + (t324 + (t159 * t217 - t244 * t318) * qJD(3)) * t249 + (qJD(3) * t58 + t217 * t85 - t244 * t278 - t318 * t367) * t245 + t315, -t98 * t155 + t44 * t210 + (t15 + (t161 * t217 - t248 * t318) * qJD(3)) * t249 + (-qJD(3) * t59 - t217 * t84 - t248 * t278 + t318 * t369) * t245 + t316, -t159 * t44 - t161 * t45 + t84 * t97 - t85 * t98 + t304 * t370 + (qJD(4) * t303 - t15 * t244 + t248 * t324) * t245 + t377, t15 * t98 + t59 * t44 - t324 * t97 + t58 * t45 - g(1) * t334 - g(2) * t301 - t270 + (-t245 * t278 - t318 * t370) * t217, t33, t26, t159 * t272 - t356 + t69, t102, t330 + t440, t258, t109 * t85 - t89 * t155 + t55 * t159 + t40 * t210 + (t372 * t57 + t14) * t249 + (-qJD(3) * t49 + t19 * t244 + t367 * t57) * t245 + t315, -t36 * t159 + t40 * t161 - t89 * t84 - t88 * t85 + t306 * t370 + (-qJD(4) * t305 - t13 * t244 + t14 * t248) * t245 + t377, t109 * t84 + t88 * t155 - t55 * t161 - t36 * t210 + (-t361 * t57 - t13) * t249 + (qJD(3) * t52 - t19 * t248 + t369 * t57) * t245 - t316, -g(1) * t274 - g(2) * t266 + t19 * t109 + t13 * t88 + t14 * t89 + t52 * t36 + t49 * t40 + t57 * t55 - t270, -t139 * t24 + t47 * t95, -t310 + t420, t300 + t319, t138 * t25 + t298 * t46, -t288 + t417, -t149 * t249 - t200 * t371, g(1) * t299 - g(2) * t61 + t10 * t138 - t11 * t371 - t27 * t149 + t2 * t249 + t4 * t200 + t96 * t25 + t298 * t39 + t41 * t46, g(1) * t445 - g(2) * t60 + t10 * t139 + t12 * t371 + t28 * t149 - t3 * t200 - t96 * t24 + t249 * t289 + t39 * t95 + t41 * t47, -t11 * t47 - t12 * t46 + t138 * t289 - t139 * t2 + t24 * t27 - t25 * t28 - t298 * t3 - t4 * t95 - t377, -t289 * t28 + t12 * t3 + t2 * t27 + t11 * t4 + t10 * t96 + t41 * t39 - g(1) * (-t128 * pkin(5) + t274) - g(2) * (pkin(5) * t130 - pkin(9) * t392 + t266) - (-t245 * t434 + t348) * t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t177, -t176, 0, t78 * t245 + t79 * t249 - g(3) + (-t136 * t245 + t137 * t249) * qJD(3), 0, 0, 0, 0, 0, 0, t256, t210 * t272 - t131 + t331, t126 + (t161 * t370 + t245 * t327) * t244 + t407, -g(3) + (-qJD(3) * t303 + t278) * t249 + (-qJD(3) * t318 + t260) * t245, 0, 0, 0, 0, 0, 0, t256, t279 - t356, -t411 + (-qJD(3) * t161 + t343) * t245 + t380, -g(3) + (qJD(3) * t305 - t19) * t249 + (qJD(3) * t57 + t261) * t245, 0, 0, 0, 0, 0, 0, t288 + t417, -t300 + t319, t310 + t420, t10 * t249 - t11 * t46 + t12 * t47 - t138 * t2 - t139 * t289 - t371 * t41 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t352, t375 * t253, t358, t352, t230, qJDD(3), -t422 + t137 * qJD(3) + (-qJD(1) * t185 + t314) * t245 + t79, -t185 * t373 + (t136 + t158) * qJD(3) + t350 + t351, 0, 0, t35, -t461, t48, t263, -t439, t340, -pkin(3) * t85 - t137 * t159 + t82 * t210 + t244 * t267 + t248 * t280 - t374 * t58 + t378, t59 * t374 + pkin(3) * t84 - t137 * t161 - t210 * t83 + t267 * t248 + (-t280 - t441) * t244, t159 * t83 + t161 * t82 + (t58 * t373 + t15 + (-t58 + t427) * qJD(4)) * t248 + (t324 + t309 + t412) * t244 + t323, t278 * pkin(3) - t59 * t83 - t58 * t82 + t318 * t137 - g(1) * (-pkin(3) * t392 + t190) - g(2) * (-pkin(3) * t394 + t188) - g(3) * t376 + t260 * pkin(8), t35, t48, t461, t340, t439, t263, t404 * t159 - t210 * t68 - t244 * t442 + t281 * t248 - t293 * t85 + t49 * t374 + t378, t159 * t66 - t161 * t68 + (-t49 * t373 + t13 + (t49 + t427) * qJD(4)) * t248 + (t14 + t309 + t413) * t244 + t323, -t52 * t374 - t293 * t84 + t210 * t66 - t404 * t161 + t442 * t248 + (t281 + t441) * t244, t261 * pkin(8) - g(1) * t190 - g(2) * t188 - g(3) * t321 + t404 * t57 - t49 * t68 - t52 * t66 + (-t19 + t441) * t293, t24 * t297 + t403 * t95, t24 * t163 + t25 * t297 - t298 * t403 - t381 * t95, t149 * t297 + t200 * t403 + t374 * t95, t25 * t163 + t298 * t381, t163 * t149 - t200 * t381 - t298 * t374, t200 * t374, -g(3) * t277 - t104 * t149 + t11 * t374 + t151 * t25 + t163 * t463 + t418 * t200 + t408 * t298 + t381 * t41, t105 * t149 - t12 * t374 - t151 * t24 - t419 * t200 + t403 * t41 + t408 * t95 + (t422 - t463) * t297, t104 * t24 - t105 * t25 - t11 * t403 - t12 * t381 + t163 * t289 + t2 * t297 - t298 * t419 - t418 * t95 + t350, -t289 * t105 + t2 * t104 + t10 * t151 - g(1) * (-pkin(9) * t391 + t190) - g(2) * (-pkin(9) * t393 + t188) - g(3) * (pkin(5) * t383 + t321) + t408 * t41 + t419 * t12 + t418 * t11 + (g(3) * pkin(9) + t151 * t314) * t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, -t337, t53, -t397, -t456, t155, t161 * t318 + t264 - t412, -t159 * t318 + t255, 0, 0, t397, t53, t337, t155, t456, -t397, -t101 * t159 - t257 - t412 + 0.2e1 * t430, pkin(4) * t84 - t85 * qJ(5) + (t52 - t59) * t161 + (t49 - t382) * t159, t101 * t161 - t159 * t57 + 0.2e1 * t148 - 0.2e1 * t196 - t255, t13 * qJ(5) - t14 * pkin(4) - t57 * t101 - t49 * t59 - g(1) * t328 - g(2) * t329 - g(3) * (-pkin(4) * t388 + t208) + t382 * t52, -t421, -t452, t448, t421, -t447, t149, -t173 * t149 + t200 * t405 - t298 * t65 - t2 - t462, t174 * t149 - t200 * t406 - t65 * t95 - t437, t173 * t24 - t174 * t25 + (t11 - t406) * t298 + (-t12 - t405) * t95, -t289 * t174 + t2 * t173 - t41 * t65 - g(1) * (-pkin(5) * t129 + t328) - g(2) * (-pkin(5) * t127 + t329) - g(3) * (-t244 * t354 + t208) + t406 * t12 + t405 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155 + t397, t53, -t210 ^ 2 - t436, t257 + t413 - t430, 0, 0, 0, 0, 0, 0, -t247 * t149 - t161 * t298 - t243 * t325, t243 * t149 - t161 * t95 - t247 * t325, t243 * t447 + t247 * t448, -t41 * t161 + t449 * t247 + (-t289 - t416) * t243 + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t421, t452, -t448, -t421, t447, -t149, t449 + t462, t416 + t437, 0, 0;];
tau_reg  = t1;
