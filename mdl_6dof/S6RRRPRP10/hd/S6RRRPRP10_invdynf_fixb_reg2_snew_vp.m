% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRP10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 09:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRP10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP10_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:05:56
% EndTime: 2019-05-07 09:06:13
% DurationCPUTime: 18.07s
% Computational Cost: add. (93923->357), mult. (206026->495), div. (0->0), fcn. (165611->12), ass. (0->275)
t2987 = cos(pkin(6));
t2979 = qJD(1) * t2987 + qJD(2);
t2989 = sin(qJ(3));
t2993 = cos(qJ(3));
t2985 = sin(pkin(6));
t2990 = sin(qJ(2));
t3045 = t2985 * t2990;
t3040 = qJD(1) * t3045;
t2954 = t2979 * t2989 + t2993 * t3040;
t2994 = cos(qJ(2));
t3044 = t2985 * t2994;
t3039 = qJD(1) * t3044;
t3042 = qJDD(1) * t2985;
t2961 = qJD(2) * t3039 + t2990 * t3042;
t2978 = t2987 * qJDD(1) + qJDD(2);
t3036 = t2989 * t2961 - t2993 * t2978;
t3011 = t2954 * qJD(3) + t3036;
t3008 = qJDD(5) + t3011;
t2984 = sin(pkin(11));
t2986 = cos(pkin(11));
t3034 = -qJD(3) + t3039;
t2938 = t2954 * t2984 + t2986 * t3034;
t2939 = t2986 * t2954 - t2984 * t3034;
t2988 = sin(qJ(5));
t2992 = cos(qJ(5));
t2911 = t2938 * t2992 + t2939 * t2988;
t2913 = -t2938 * t2988 + t2939 * t2992;
t3052 = t2911 * t2913;
t2858 = t3008 + t3052;
t2910 = t2913 ^ 2;
t2952 = -t2993 * t2979 + t2989 * t3040;
t2951 = qJD(5) + t2952;
t3061 = t2951 ^ 2;
t3067 = -t2910 - t3061;
t2815 = t2858 * t2988 - t2992 * t3067;
t2817 = t2858 * t2992 + t2988 * t3067;
t2800 = t2815 * t2984 - t2817 * t2986;
t3012 = t2993 * t2961 + t2989 * t2978;
t2926 = -t2952 * qJD(3) + t3012;
t3041 = qJDD(1) * t2994;
t3056 = qJD(1) * t2990;
t3068 = (qJD(2) * t3056 - t3041) * t2985;
t3004 = qJDD(3) + t3068;
t2918 = t2986 * t2926 + t2984 * t3004;
t3001 = -t2984 * t2926 + t2986 * t3004;
t3000 = -t2911 * qJD(5) + t2992 * t2918 + t2988 * t3001;
t3051 = t2911 * t2951;
t2998 = t3000 - t3051;
t2780 = t2800 * t2989 - t2993 * t2998;
t2782 = t2800 * t2993 + t2989 * t2998;
t2792 = t2815 * t2986 + t2817 * t2984;
t3025 = t2782 * t2990 + t2792 * t2994;
t2750 = -t2985 * t2780 + t2987 * t3025;
t2757 = t2782 * t2994 - t2792 * t2990;
t2991 = sin(qJ(1));
t2995 = cos(qJ(1));
t3102 = t2750 * t2991 - t2757 * t2995;
t3101 = t2750 * t2995 + t2757 * t2991;
t2748 = t2987 * t2780 + t2985 * t3025;
t2831 = t3000 + t3051;
t3038 = t2988 * t2918 - t2992 * t3001;
t3007 = (-qJD(5) + t2951) * t2913 - t3038;
t3064 = t2831 * t2988 + t2992 * t3007;
t3065 = -t2992 * t2831 + t2988 * t3007;
t3071 = t2984 * t3064 + t2986 * t3065;
t2872 = t2911 ^ 2;
t2853 = t2910 + t2872;
t3072 = -t2984 * t3065 + t2986 * t3064;
t3077 = -t2853 * t2989 + t2993 * t3072;
t3081 = t2990 * t3071 + t2994 * t3077;
t3078 = t2853 * t2993 + t2989 * t3072;
t3082 = t2990 * t3077 - t2994 * t3071;
t3089 = -t2985 * t3078 + t2987 * t3082;
t3094 = -t2991 * t3089 + t2995 * t3081;
t3093 = t2991 * t3081 + t2995 * t3089;
t3090 = t2985 * t3082 + t2987 * t3078;
t2859 = t3008 - t3052;
t3066 = -t3061 - t2872;
t3073 = -t2859 * t2988 + t2992 * t3066;
t3074 = t2992 * t2859 + t2988 * t3066;
t3076 = -t2984 * t3074 + t2986 * t3073;
t3086 = t2989 * t3076;
t3075 = t2984 * t3073 + t2986 * t3074;
t3085 = t2990 * t3075;
t3084 = t2993 * t3076;
t3083 = t2994 * t3075;
t3033 = t3034 ^ 2;
t2907 = t2952 * t3034 + t2926;
t3063 = t2938 ^ 2;
t3062 = t2939 ^ 2;
t2933 = t2952 ^ 2;
t3060 = t2954 ^ 2;
t3059 = t2979 ^ 2;
t3058 = -2 * qJD(4);
t3057 = t2987 * g(3);
t3055 = qJD(1) * t2994;
t3050 = t2938 * t2939;
t3049 = t2952 * t2938;
t3048 = t2952 * t2939;
t3047 = t2954 * t2952;
t2996 = qJD(1) ^ 2;
t3046 = t2985 ^ 2 * t2996;
t2960 = (-pkin(2) * t2994 - pkin(9) * t2990) * t2985 * qJD(1);
t2973 = -g(1) * t2995 - g(2) * t2991;
t2957 = -pkin(1) * t2996 + pkin(8) * t3042 + t2973;
t2972 = t2991 * g(1) - t2995 * g(2);
t3003 = t2996 * t2985 * pkin(8) + qJDD(1) * pkin(1) + t2972;
t3002 = t2987 * t3003;
t3043 = t2994 * t2957 + t2990 * t3002;
t2901 = -t3059 * pkin(2) + t2978 * pkin(9) + (-g(3) * t2990 + t2960 * t3055) * t2985 + t3043;
t2997 = -t2961 * pkin(9) - t3057 + (-t2979 * pkin(9) * t3055 + (-t3041 + (qJD(2) + t2979) * t3056) * pkin(2) - t3003) * t2985;
t2866 = t2993 * t2901 + t2989 * t2997;
t2931 = pkin(3) * t2952 - qJ(4) * t2954;
t2845 = -pkin(3) * t3033 + qJ(4) * t3004 - t2952 * t2931 + t2866;
t3037 = t2990 * t2957 - t2994 * t3002;
t2900 = -t2978 * pkin(2) - t3059 * pkin(9) + (g(3) * t2994 + t2960 * t3056) * t2985 + t3037;
t2905 = (0.2e1 * qJD(3) - t3039) * t2954 + t3036;
t2849 = t2905 * pkin(3) - qJ(4) * t2907 + t2900;
t2809 = t2986 * t2845 + t2984 * t2849 + t2938 * t3058;
t2921 = pkin(4) * t2952 - pkin(10) * t2939;
t2797 = -pkin(4) * t3063 + pkin(10) * t3001 - t2952 * t2921 + t2809;
t2808 = -t2984 * t2845 + t2986 * t2849 + t2939 * t3058;
t2878 = -t2918 - t3049;
t2879 = t3011 - t3050;
t2999 = pkin(4) * t2879 + pkin(10) * t2878 + t2808;
t2764 = t2992 * t2797 + t2988 * t2999;
t2763 = -t2797 * t2988 + t2992 * t2999;
t2865 = -t2989 * t2901 + t2993 * t2997;
t3035 = t2979 * t3039;
t2871 = pkin(5) * t2911 - qJ(6) * t2913;
t2755 = -pkin(5) * t3061 + qJ(6) * t3008 + 0.2e1 * qJD(6) * t2951 - t2911 * t2871 + t2764;
t2756 = -pkin(5) * t3008 - qJ(6) * t3061 + t2871 * t2913 + qJDD(6) - t2763;
t2738 = t2755 * t2988 - t2756 * t2992;
t2739 = t2755 * t2992 + t2756 * t2988;
t2727 = -t2738 * t2984 + t2739 * t2986;
t2844 = -t3004 * pkin(3) - t3033 * qJ(4) + t2954 * t2931 + qJDD(4) - t2865;
t2811 = -t3001 * pkin(4) - t3063 * pkin(10) + t2939 * t2921 + t2844;
t3010 = -qJD(5) * t2913 - t3038;
t2771 = -t3010 * pkin(5) + (pkin(5) * t2951 - 0.2e1 * qJD(6)) * t2913 + t2811 - t2998 * qJ(6);
t2725 = t2727 * t2993 + t2771 * t2989;
t2726 = t2738 * t2986 + t2739 * t2984;
t3032 = t2725 * t2990 - t2726 * t2994;
t2740 = t2763 * t2992 + t2764 * t2988;
t2741 = -t2763 * t2988 + t2764 * t2992;
t2731 = -t2740 * t2984 + t2741 * t2986;
t2729 = t2731 * t2993 + t2811 * t2989;
t2730 = t2740 * t2986 + t2741 * t2984;
t3031 = t2729 * t2990 - t2730 * t2994;
t2773 = -t2808 * t2984 + t2809 * t2986;
t2766 = t2773 * t2993 + t2844 * t2989;
t2772 = t2808 * t2986 + t2809 * t2984;
t3028 = t2766 * t2990 - t2772 * t2994;
t2828 = (qJD(5) + t2951) * t2913 + t3038;
t2777 = t2828 * t2989 + t3084;
t3026 = t2777 * t2990 - t3083;
t2829 = t2951 * t2913 - t3010;
t2783 = t2829 * t2989 + t3084;
t3024 = t2783 * t2990 - t3083;
t2876 = t3001 + t3048;
t2847 = t2876 * t2986 - t2878 * t2984;
t2885 = -t3062 - t3063;
t2820 = t2847 * t2993 + t2885 * t2989;
t2846 = t2876 * t2984 + t2878 * t2986;
t3023 = t2820 * t2990 - t2846 * t2994;
t2822 = -t2865 * t2989 + t2866 * t2993;
t3022 = t2822 * t2990 - t2900 * t2994;
t2894 = -t2933 - t3063;
t2856 = -t2879 * t2984 + t2894 * t2986;
t2875 = -t3001 + t3048;
t2824 = t2856 * t2993 + t2875 * t2989;
t2855 = t2879 * t2986 + t2894 * t2984;
t3021 = t2824 * t2990 - t2855 * t2994;
t2880 = -t3011 - t3050;
t2915 = -t2933 - t3062;
t2862 = t2880 * t2986 - t2915 * t2984;
t2877 = t2918 - t3049;
t2826 = t2862 * t2993 + t2877 * t2989;
t2861 = t2880 * t2984 + t2915 * t2986;
t3020 = t2826 * t2990 - t2861 * t2994;
t2906 = -t2954 * t3039 - t3036;
t2908 = t2952 * t3039 - t3012;
t2870 = t2906 * t2993 - t2908 * t2989;
t2920 = -t3060 - t2933;
t3019 = t2870 * t2990 - t2920 * t2994;
t2923 = t3004 - t3047;
t2927 = -t2933 - t3033;
t2884 = -t2923 * t2989 + t2927 * t2993;
t3018 = t2884 * t2990 - t2905 * t2994;
t2922 = -t3047 - t3004;
t2934 = -t3060 - t3033;
t2888 = t2922 * t2993 - t2934 * t2989;
t3017 = t2888 * t2990 - t2907 * t2994;
t2928 = -g(3) * t3044 - t3037;
t2929 = -g(3) * t3045 + t3043;
t3016 = t2928 * t2994 + t2929 * t2990;
t2941 = t3035 - t2961;
t2964 = t2979 * t3040;
t2942 = t2964 - t3068;
t3015 = t2941 * t2994 + t2942 * t2990;
t2982 = t2990 ^ 2;
t2950 = -t2982 * t3046 - t3059;
t2971 = t2994 * t2990 * t3046;
t2959 = t2971 - t2978;
t3014 = t2950 * t2994 + t2959 * t2990;
t2958 = t2971 + t2978;
t2983 = t2994 ^ 2;
t2962 = -t2983 * t3046 - t3059;
t3013 = t2958 * t2994 + t2962 * t2990;
t2970 = -qJDD(1) * t2991 - t2995 * t2996;
t2969 = qJDD(1) * t2995 - t2991 * t2996;
t2963 = (-t2982 - t2983) * t3046;
t2945 = -t2985 * t3003 - t3057;
t2943 = t2964 + t3068;
t2940 = t3035 + t2961;
t2936 = -t2958 * t2990 + t2962 * t2994;
t2930 = -t2950 * t2990 + t2959 * t2994;
t2919 = -t2941 * t2990 + t2942 * t2994;
t2917 = -t2985 * t2943 + t2987 * t3013;
t2916 = t2987 * t2943 + t2985 * t3013;
t2903 = -t2985 * t2940 + t2987 * t3014;
t2902 = t2987 * t2940 + t2985 * t3014;
t2899 = -t2985 * t2963 + t2987 * t3015;
t2898 = t2987 * t2963 + t2985 * t3015;
t2887 = t2922 * t2989 + t2934 * t2993;
t2886 = -t2928 * t2990 + t2929 * t2994;
t2883 = t2923 * t2993 + t2927 * t2989;
t2874 = -t2985 * t2945 + t2987 * t3016;
t2873 = t2987 * t2945 + t2985 * t3016;
t2869 = t2906 * t2989 + t2908 * t2993;
t2864 = t2888 * t2994 + t2907 * t2990;
t2863 = t2884 * t2994 + t2905 * t2990;
t2854 = t2870 * t2994 + t2920 * t2990;
t2842 = -t2985 * t2887 + t2987 * t3017;
t2841 = t2987 * t2887 + t2985 * t3017;
t2840 = -t2985 * t2883 + t2987 * t3018;
t2839 = t2987 * t2883 + t2985 * t3018;
t2825 = t2862 * t2989 - t2877 * t2993;
t2823 = t2856 * t2989 - t2875 * t2993;
t2821 = t2865 * t2993 + t2866 * t2989;
t2819 = t2847 * t2989 - t2885 * t2993;
t2814 = -t2985 * t2869 + t2987 * t3019;
t2813 = t2987 * t2869 + t2985 * t3019;
t2812 = t2822 * t2994 + t2900 * t2990;
t2810 = t2826 * t2994 + t2861 * t2990;
t2807 = t2824 * t2994 + t2855 * t2990;
t2806 = t2820 * t2994 + t2846 * t2990;
t2789 = -t2985 * t2821 + t2987 * t3022;
t2788 = t2987 * t2821 + t2985 * t3022;
t2787 = -t2985 * t2825 + t2987 * t3020;
t2786 = t2987 * t2825 + t2985 * t3020;
t2785 = -t2985 * t2823 + t2987 * t3021;
t2784 = t2987 * t2823 + t2985 * t3021;
t2781 = -t2829 * t2993 + t3086;
t2779 = -t2985 * t2819 + t2987 * t3023;
t2778 = t2987 * t2819 + t2985 * t3023;
t2775 = -t2828 * t2993 + t3086;
t2765 = t2773 * t2989 - t2844 * t2993;
t2758 = t2783 * t2994 + t3085;
t2754 = t2777 * t2994 + t3085;
t2752 = t2766 * t2994 + t2772 * t2990;
t2751 = -t2985 * t2781 + t2987 * t3024;
t2749 = t2987 * t2781 + t2985 * t3024;
t2745 = -t2985 * t2775 + t2987 * t3026;
t2743 = t2987 * t2775 + t2985 * t3026;
t2737 = -t2985 * t2765 + t2987 * t3028;
t2736 = t2987 * t2765 + t2985 * t3028;
t2728 = t2731 * t2989 - t2811 * t2993;
t2724 = t2727 * t2989 - t2771 * t2993;
t2723 = t2729 * t2994 + t2730 * t2990;
t2722 = t2725 * t2994 + t2726 * t2990;
t2721 = -t2985 * t2728 + t2987 * t3031;
t2720 = t2987 * t2728 + t2985 * t3031;
t2719 = -t2985 * t2724 + t2987 * t3032;
t2718 = t2987 * t2724 + t2985 * t3032;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2970, -t2969, 0, -t2972 * t2991 + t2973 * t2995, 0, 0, 0, 0, 0, 0, -t2917 * t2991 + t2936 * t2995, -t2903 * t2991 + t2930 * t2995, -t2899 * t2991 + t2919 * t2995, -t2874 * t2991 + t2886 * t2995, 0, 0, 0, 0, 0, 0, -t2840 * t2991 + t2863 * t2995, -t2842 * t2991 + t2864 * t2995, -t2814 * t2991 + t2854 * t2995, -t2789 * t2991 + t2812 * t2995, 0, 0, 0, 0, 0, 0, -t2785 * t2991 + t2807 * t2995, -t2787 * t2991 + t2810 * t2995, -t2779 * t2991 + t2806 * t2995, -t2737 * t2991 + t2752 * t2995, 0, 0, 0, 0, 0, 0, -t2745 * t2991 + t2754 * t2995, -t3102, t3094, -t2721 * t2991 + t2723 * t2995, 0, 0, 0, 0, 0, 0, -t2751 * t2991 + t2758 * t2995, t3094, t3102, -t2719 * t2991 + t2722 * t2995; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2969, t2970, 0, t2972 * t2995 + t2973 * t2991, 0, 0, 0, 0, 0, 0, t2917 * t2995 + t2936 * t2991, t2903 * t2995 + t2930 * t2991, t2899 * t2995 + t2919 * t2991, t2874 * t2995 + t2886 * t2991, 0, 0, 0, 0, 0, 0, t2840 * t2995 + t2863 * t2991, t2842 * t2995 + t2864 * t2991, t2814 * t2995 + t2854 * t2991, t2789 * t2995 + t2812 * t2991, 0, 0, 0, 0, 0, 0, t2785 * t2995 + t2807 * t2991, t2787 * t2995 + t2810 * t2991, t2779 * t2995 + t2806 * t2991, t2737 * t2995 + t2752 * t2991, 0, 0, 0, 0, 0, 0, t2745 * t2995 + t2754 * t2991, t3101, t3093, t2721 * t2995 + t2723 * t2991, 0, 0, 0, 0, 0, 0, t2751 * t2995 + t2758 * t2991, t3093, -t3101, t2719 * t2995 + t2722 * t2991; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2916, t2902, t2898, t2873, 0, 0, 0, 0, 0, 0, t2839, t2841, t2813, t2788, 0, 0, 0, 0, 0, 0, t2784, t2786, t2778, t2736, 0, 0, 0, 0, 0, 0, t2743, t2748, t3090, t2720, 0, 0, 0, 0, 0, 0, t2749, t3090, -t2748, t2718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2996, -qJDD(1), 0, t2973, 0, 0, 0, 0, 0, 0, t2936, t2930, t2919, t2886, 0, 0, 0, 0, 0, 0, t2863, t2864, t2854, t2812, 0, 0, 0, 0, 0, 0, t2807, t2810, t2806, t2752, 0, 0, 0, 0, 0, 0, t2754, t2757, t3081, t2723, 0, 0, 0, 0, 0, 0, t2758, t3081, -t2757, t2722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2996, 0, t2972, 0, 0, 0, 0, 0, 0, t2917, t2903, t2899, t2874, 0, 0, 0, 0, 0, 0, t2840, t2842, t2814, t2789, 0, 0, 0, 0, 0, 0, t2785, t2787, t2779, t2737, 0, 0, 0, 0, 0, 0, t2745, t2750, t3089, t2721, 0, 0, 0, 0, 0, 0, t2751, t3089, -t2750, t2719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2916, t2902, t2898, t2873, 0, 0, 0, 0, 0, 0, t2839, t2841, t2813, t2788, 0, 0, 0, 0, 0, 0, t2784, t2786, t2778, t2736, 0, 0, 0, 0, 0, 0, t2743, t2748, t3090, t2720, 0, 0, 0, 0, 0, 0, t2749, t3090, -t2748, t2718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2962, t2959, t2942, t2929, 0, 0, 0, 0, 0, 0, t2884, t2888, t2870, t2822, 0, 0, 0, 0, 0, 0, t2824, t2826, t2820, t2766, 0, 0, 0, 0, 0, 0, t2777, t2782, t3077, t2729, 0, 0, 0, 0, 0, 0, t2783, t3077, -t2782, t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2958, t2950, t2941, t2928, 0, 0, 0, 0, 0, 0, -t2905, -t2907, -t2920, -t2900, 0, 0, 0, 0, 0, 0, -t2855, -t2861, -t2846, -t2772, 0, 0, 0, 0, 0, 0, -t3075, t2792, -t3071, -t2730, 0, 0, 0, 0, 0, 0, -t3075, -t3071, -t2792, -t2726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2943, t2940, t2963, t2945, 0, 0, 0, 0, 0, 0, t2883, t2887, t2869, t2821, 0, 0, 0, 0, 0, 0, t2823, t2825, t2819, t2765, 0, 0, 0, 0, 0, 0, t2775, t2780, t3078, t2728, 0, 0, 0, 0, 0, 0, t2781, t3078, -t2780, t2724; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2927, t2922, t2906, t2866, 0, 0, 0, 0, 0, 0, t2856, t2862, t2847, t2773, 0, 0, 0, 0, 0, 0, t3076, t2800, t3072, t2731, 0, 0, 0, 0, 0, 0, t3076, t3072, -t2800, t2727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2923, t2934, t2908, t2865, 0, 0, 0, 0, 0, 0, -t2875, -t2877, -t2885, -t2844, 0, 0, 0, 0, 0, 0, -t2828, -t2998, t2853, -t2811, 0, 0, 0, 0, 0, 0, -t2829, t2853, t2998, -t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2905, t2907, t2920, t2900, 0, 0, 0, 0, 0, 0, t2855, t2861, t2846, t2772, 0, 0, 0, 0, 0, 0, t3075, -t2792, t3071, t2730, 0, 0, 0, 0, 0, 0, t3075, t3071, t2792, t2726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2894, t2880, t2876, t2809, 0, 0, 0, 0, 0, 0, t3073, -t2817, t3064, t2741, 0, 0, 0, 0, 0, 0, t3073, t3064, t2817, t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2879, t2915, t2878, t2808, 0, 0, 0, 0, 0, 0, t3074, -t2815, t3065, t2740, 0, 0, 0, 0, 0, 0, t3074, t3065, t2815, t2738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2875, t2877, t2885, t2844, 0, 0, 0, 0, 0, 0, t2828, t2998, -t2853, t2811, 0, 0, 0, 0, 0, 0, t2829, -t2853, -t2998, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3066, -t2858, t3007, t2764, 0, 0, 0, 0, 0, 0, t3066, t3007, t2858, t2755; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2859, t3067, -t2831, t2763, 0, 0, 0, 0, 0, 0, t2859, -t2831, -t3067, -t2756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2828, t2998, -t2853, t2811, 0, 0, 0, 0, 0, 0, t2829, -t2853, -t2998, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3066, t3007, t2858, t2755; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2829, -t2853, -t2998, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2859, t2831, t3067, t2756;];
f_new_reg  = t1;
