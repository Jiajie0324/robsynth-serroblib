% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP10_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:37:05
% EndTime: 2019-03-09 17:37:44
% DurationCPUTime: 22.10s
% Computational Cost: add. (25963->917), mult. (63827->1181), div. (0->0), fcn. (51465->14), ass. (0->391)
t375 = sin(qJ(3));
t377 = cos(qJ(3));
t573 = cos(pkin(6));
t483 = t573 * qJD(1);
t442 = t483 + qJD(2);
t376 = sin(qJ(2));
t371 = sin(pkin(6));
t521 = qJD(1) * t371;
t499 = t376 * t521;
t264 = t375 * t442 + t377 * t499;
t378 = cos(qJ(2));
t498 = t378 * t521;
t333 = -qJD(3) + t498;
t370 = sin(pkin(11));
t372 = cos(pkin(11));
t199 = t264 * t372 - t333 * t370;
t374 = sin(qJ(5));
t246 = t370 * t264;
t480 = t333 * t372 + t246;
t592 = cos(qJ(5));
t431 = t592 * t480;
t114 = t199 * t374 + t431;
t627 = t114 ^ 2;
t475 = t375 * t499;
t262 = -t377 * t442 + t475;
t255 = qJD(5) + t262;
t626 = t114 * t255;
t504 = pkin(1) * t573;
t357 = t376 * t504;
t454 = pkin(3) * t375 - qJ(4) * t377;
t546 = t371 * t378;
t625 = -(t357 + (pkin(8) + t454) * t546) * qJD(1) + qJD(3) * t454 - qJD(4) * t375;
t618 = t199 * t592 - t374 * t480;
t595 = t618 ^ 2;
t624 = t255 * t618;
t472 = pkin(1) * t483;
t289 = -pkin(8) * t499 + t378 * t472;
t463 = pkin(2) * t376 - pkin(9) * t378;
t290 = t463 * t521;
t191 = t377 * t289 + t375 * t290;
t160 = qJ(4) * t499 + t191;
t518 = qJD(3) * t375;
t509 = pkin(9) * t518;
t529 = t625 * t372 + (t160 + t509) * t370;
t473 = t377 * t498;
t249 = t370 * t473 - t372 * t499;
t517 = qJD(3) * t377;
t619 = -t370 * t517 + t249;
t537 = t377 * t378;
t250 = (t370 * t376 + t372 * t537) * t521;
t623 = -t372 * t517 + t250;
t622 = -t372 * t160 + t370 * t625;
t416 = qJD(3) * t442;
t479 = t573 * qJDD(1);
t436 = t479 + qJDD(2);
t519 = qJD(2) * t378;
t495 = t375 * t519;
t513 = qJDD(1) * t376;
t144 = t371 * (qJD(1) * (t376 * t517 + t495) + t375 * t513) + t375 * t416 - t377 * t436;
t138 = qJDD(5) + t144;
t474 = t375 * t498;
t543 = t372 * t377;
t621 = -pkin(4) * t474 + pkin(10) * t250 + (pkin(4) * t375 - pkin(10) * t543) * qJD(3) + t529;
t544 = t372 * t375;
t548 = t370 * t377;
t620 = pkin(10) * t249 + (-pkin(9) * t544 - pkin(10) * t548) * qJD(3) + t622;
t589 = pkin(4) * t370;
t617 = pkin(9) + t589;
t316 = t370 * t592 + t374 * t372;
t489 = qJD(5) * t592;
t516 = qJD(5) * t374;
t606 = -t370 * t516 + t372 * t489;
t535 = t249 * t592 + t250 * t374 - t316 * t517 - t375 * t606;
t301 = t316 * qJD(5);
t534 = t301 * t375 - t374 * t619 + t592 * t623;
t614 = t316 * t262 + t301;
t427 = -t374 * t370 + t592 * t372;
t532 = -t427 * t262 - t606;
t514 = qJD(1) * qJD(2);
t486 = t378 * t514;
t422 = t486 + t513;
t386 = t371 * t422 + t416;
t405 = qJD(3) * t475 - t375 * t436;
t608 = t386 * t377 - t405;
t604 = t474 - t518;
t360 = pkin(4) * t372 + pkin(3);
t586 = pkin(10) + qJ(4);
t613 = -t360 * t377 - t586 * t375;
t547 = t371 * t376;
t308 = -pkin(8) * t547 + t378 * t504;
t293 = qJD(2) * t308;
t287 = t316 * t375;
t425 = t333 * t375;
t512 = qJDD(1) * t378;
t346 = t371 * t512;
t487 = t376 * t514;
t469 = t371 * t487;
t286 = qJDD(3) - t346 + t469;
t121 = t370 * t286 + t372 * t608;
t137 = t370 * t608;
t481 = t286 * t372 - t137;
t48 = qJD(5) * t618 + t374 * t121 - t592 * t481;
t612 = t114 * t425 - t138 * t287 + t255 * t535 + t377 * t48;
t593 = cos(qJ(1));
t466 = t573 * t593;
t591 = sin(qJ(1));
t305 = t376 * t466 + t378 * t591;
t503 = t371 * t593;
t230 = t305 * t377 - t375 * t503;
t304 = t376 * t591 - t378 * t466;
t367 = pkin(11) + qJ(5);
t362 = sin(t367);
t363 = cos(t367);
t149 = t230 * t362 - t304 * t363;
t150 = t230 * t363 + t304 * t362;
t366 = t371 ^ 2;
t611 = 0.2e1 * t366;
t590 = pkin(3) * t377;
t455 = qJ(4) * t375 + t590;
t324 = -pkin(2) - t455;
t313 = t372 * t324;
t214 = -pkin(10) * t544 + t313 + (-pkin(9) * t370 - pkin(4)) * t377;
t261 = pkin(9) * t543 + t370 * t324;
t549 = t370 * t375;
t228 = -pkin(10) * t549 + t261;
t583 = t214 * t489 - t228 * t516 + t374 * t621 + t620 * t592;
t327 = t586 * t370;
t328 = t586 * t372;
t240 = -t374 * t327 + t328 * t592;
t563 = t262 * t372;
t524 = pkin(8) * t546 + t357;
t283 = t573 * pkin(9) + t524;
t242 = qJD(2) * pkin(9) + qJD(1) * t283;
t439 = -pkin(2) * t378 - pkin(9) * t376 - pkin(1);
t254 = t439 * t521;
t141 = -t375 * t242 + t377 * t254;
t175 = pkin(3) * t264 + qJ(4) * t262;
t98 = -t141 * t370 + t372 * t175;
t76 = pkin(4) * t264 + pkin(10) * t563 + t98;
t564 = t262 * t370;
t99 = t372 * t141 + t370 * t175;
t88 = pkin(10) * t564 + t99;
t574 = qJD(4) * t316 + qJD(5) * t240 - t374 * t88 + t592 * t76;
t610 = t48 - t624;
t609 = t374 * t214 + t592 * t228;
t528 = -t372 * t509 + t622;
t190 = -t375 * t289 + t290 * t377;
t162 = -pkin(3) * t499 - t190;
t361 = pkin(9) * t517;
t526 = -pkin(4) * t619 - t162 + t361;
t607 = (qJDD(2) + 0.2e1 * t479) * t371;
t605 = t473 - t517;
t603 = -t377 * t286 - t333 * t518;
t294 = t524 * qJD(2);
t587 = t286 * pkin(3);
t602 = qJDD(4) - t587;
t601 = t114 * t264 + t138 * t427 - t255 * t614;
t229 = t305 * t375 + t377 * t503;
t465 = t573 * t591;
t307 = -t376 * t465 + t378 * t593;
t502 = t371 * t591;
t233 = t307 * t375 - t377 * t502;
t302 = t375 * t547 - t377 * t573;
t418 = g(1) * t233 + g(2) * t229 + g(3) * t302;
t599 = -t138 * t240 - t362 * t418;
t496 = t371 * t519;
t227 = -qJD(3) * t302 + t377 * t496;
t520 = qJD(2) * t376;
t497 = t371 * t520;
t188 = t227 * t372 + t370 * t497;
t303 = t375 * t573 + t377 * t547;
t226 = qJD(3) * t303 + t371 * t495;
t525 = pkin(2) * t546 + pkin(9) * t547;
t284 = -pkin(1) * t371 - t525;
t432 = t463 * qJD(2);
t291 = t371 * t432;
t109 = -t283 * t518 + t284 * t517 + t375 * t291 + t377 * t293;
t102 = (qJ(4) * t520 - qJD(4) * t378) * t371 + t109;
t108 = t226 * pkin(3) - t227 * qJ(4) - t303 * qJD(4) + t294;
t55 = -t102 * t370 + t372 * t108;
t40 = pkin(4) * t226 - pkin(10) * t188 + t55;
t415 = -t227 * t370 + t372 * t497;
t56 = t372 * t102 + t370 * t108;
t50 = pkin(10) * t415 + t56;
t225 = t303 * t372 - t370 * t546;
t282 = -pkin(2) * t573 - t308;
t156 = t302 * pkin(3) - t303 * qJ(4) + t282;
t177 = t377 * t283 + t375 * t284;
t157 = -qJ(4) * t546 + t177;
t96 = t372 * t156 - t157 * t370;
t72 = pkin(4) * t302 - pkin(10) * t225 + t96;
t433 = t303 * t370 + t372 * t546;
t97 = t370 * t156 + t372 * t157;
t84 = -pkin(10) * t433 + t97;
t581 = t374 * t72 + t592 * t84;
t9 = -qJD(5) * t581 - t374 * t50 + t40 * t592;
t582 = -qJD(5) * t609 - t620 * t374 + t592 * t621;
t47 = qJD(5) * t431 - t592 * t121 + t199 * t516 - t374 * t481;
t597 = t114 * t532 - t316 * t48 - t427 * t47 - t614 * t618;
t288 = t427 * t375;
t596 = t114 * t534 + t287 * t47 - t288 * t48 + t535 * t618;
t594 = t262 ^ 2;
t379 = qJD(1) ^ 2;
t588 = pkin(5) * t138;
t364 = t375 * pkin(9);
t440 = qJ(4) * t286 - qJD(4) * t333;
t437 = qJD(2) * t472;
t468 = pkin(1) * t479;
t505 = pkin(8) * t346 + t376 * t468 + t378 * t437;
t202 = -pkin(8) * t469 + t505;
t173 = pkin(9) * t436 + t202;
t184 = (qJD(1) * t432 + qJDD(1) * t439) * t371;
t79 = t377 * t173 + t375 * t184 - t242 * t518 + t254 * t517;
t63 = t440 + t79;
t485 = t371 * t513;
t477 = t376 * t437 - t378 * t468 + (t371 * t486 + t485) * pkin(8);
t174 = -pkin(2) * t436 + t477;
t65 = t144 * pkin(3) - qJ(4) * t608 - t264 * qJD(4) + t174;
t27 = t370 * t65 + t372 * t63;
t585 = -qJ(6) * t604 - qJD(6) * t377 + t583;
t584 = pkin(5) * t604 - t582;
t36 = t374 * t76 + t592 * t88;
t580 = -pkin(5) * t535 + qJ(6) * t534 - qJD(6) * t288 + t526;
t241 = -pkin(2) * t442 - t289;
t128 = t262 * pkin(3) - t264 * qJ(4) + t241;
t142 = t242 * t377 + t254 * t375;
t133 = -qJ(4) * t333 + t142;
t82 = t372 * t128 - t133 * t370;
t54 = pkin(4) * t262 - pkin(10) * t199 + t82;
t83 = t370 * t128 + t372 * t133;
t64 = -pkin(10) * t480 + t83;
t25 = t374 * t54 + t592 * t64;
t579 = t25 * t255;
t122 = -pkin(4) * t564 + t142;
t578 = pkin(5) * t614 + qJ(6) * t532 - qJD(6) * t316 - t122;
t428 = -t327 * t592 - t374 * t328;
t178 = qJD(4) * t427 + qJD(5) * t428;
t31 = qJ(6) * t264 + t36;
t577 = t178 - t31;
t576 = t178 - t36;
t575 = t264 * pkin(5) + t574;
t572 = qJ(6) * t138;
t571 = t618 * t114;
t569 = t121 * t370;
t567 = t142 * t333;
t566 = t255 * t264;
t565 = t262 * t264;
t562 = t264 * t333;
t559 = t304 * t370;
t558 = t304 * t375;
t306 = t376 * t593 + t378 * t465;
t557 = t306 * t370;
t556 = t306 * t375;
t553 = t362 * t377;
t552 = t363 * t377;
t551 = t366 * t379;
t550 = t370 * t144;
t545 = t372 * t144;
t540 = t375 * t378;
t539 = t377 * t144;
t24 = -t374 * t64 + t54 * t592;
t536 = qJD(6) - t24;
t531 = -t229 * t360 + t230 * t586;
t234 = t307 * t377 + t375 * t502;
t530 = -t233 * t360 + t234 * t586;
t527 = -t302 * t360 + t303 * t586;
t317 = pkin(4) * t549 + t364;
t523 = t593 * pkin(1) + pkin(8) * t502;
t368 = t376 ^ 2;
t369 = t378 ^ 2;
t522 = t368 - t369;
t130 = t333 * pkin(3) + qJD(4) - t141;
t515 = -qJD(4) + t130;
t510 = g(3) * t547;
t508 = t378 * t551;
t507 = t371 * t540;
t506 = t362 * t546;
t490 = -t595 + t627;
t488 = pkin(1) * t611;
t26 = -t370 * t63 + t372 * t65;
t17 = pkin(4) * t144 - pkin(10) * t121 + t26;
t21 = pkin(10) * t481 + t27;
t4 = t592 * t17 - t374 * t21 - t64 * t489 - t54 * t516;
t176 = -t375 * t283 + t377 * t284;
t478 = t376 * t508;
t80 = -t375 * t173 + t377 * t184 - t242 * t517 - t254 * t518;
t470 = t376 * t486;
t467 = -pkin(1) * t591 + pkin(8) * t503;
t464 = t371 * t379 * t573;
t153 = t234 * t362 - t306 * t363;
t462 = g(1) * t149 - g(2) * t153;
t154 = t234 * t363 + t306 * t362;
t461 = g(1) * t150 - g(2) * t154;
t460 = -g(1) * t229 + g(2) * t233;
t459 = -g(1) * t304 + g(2) * t306;
t458 = g(1) * t307 + g(2) * t305;
t158 = pkin(3) * t546 - t176;
t456 = t481 * pkin(4);
t453 = -pkin(5) * t363 - qJ(6) * t362;
t404 = t592 * t433;
t134 = t225 * t374 + t404;
t135 = t225 * t592 - t374 * t433;
t75 = qJD(5) * t135 + t374 * t188 - t415 * t592;
t452 = t114 * t75 + t134 * t48;
t448 = t481 * t372;
t447 = -t595 - t627;
t445 = t144 * t302 + t226 * t262;
t444 = t480 * qJD(3);
t441 = 0.2e1 * t483 + qJD(2);
t438 = t307 * pkin(2) + pkin(9) * t306 + t523;
t110 = -t283 * t517 - t284 * t518 + t377 * t291 - t375 * t293;
t33 = -t374 * t84 + t592 * t72;
t3 = t374 * t17 + t592 * t21 + t54 * t489 - t516 * t64;
t8 = t374 * t40 + t72 * t489 + t592 * t50 - t516 * t84;
t131 = t214 * t592 - t374 * t228;
t424 = -t114 * t535 + t287 * t48;
t423 = t114 * t614 - t427 * t48;
t421 = g(1) * t593 + g(2) * t591;
t180 = -t304 * t553 - t305 * t363;
t182 = -t306 * t553 - t307 * t363;
t244 = -t363 * t547 + t377 * t506;
t420 = -g(1) * t182 - g(2) * t180 - g(3) * t244;
t181 = -t304 * t552 + t305 * t362;
t183 = -t306 * t552 + t307 * t362;
t245 = (t362 * t376 + t363 * t537) * t371;
t419 = -g(1) * t183 - g(2) * t181 - g(3) * t245;
t417 = -g(1) * t234 - g(2) * t230 - g(3) * t303;
t66 = -t80 + t602;
t413 = -t305 * pkin(2) - t304 * pkin(9) + t467;
t412 = t418 - t66;
t411 = -g(1) * t306 - g(2) * t304 + g(3) * t546;
t410 = -t458 - t510;
t408 = -t199 * t370 - t372 * t480;
t407 = pkin(4) * t557 + t233 * t586 + t234 * t360 + t438;
t406 = t371 * t360 * t537 + t507 * t586 + t547 * t589 + t525;
t295 = t304 * pkin(2);
t403 = t613 * t304 + t305 * t617 - t295;
t297 = t306 * pkin(2);
t402 = t613 * t306 + t307 * t617 - t297;
t401 = t47 + t626;
t400 = t411 * t375;
t399 = -t80 * t375 + t79 * t377 - t458;
t74 = qJD(5) * t404 - t188 * t592 + t225 * t516 - t374 * t415;
t397 = t114 * t74 + t134 * t47 - t135 * t48 - t618 * t75;
t396 = t114 * t226 + t134 * t138 + t255 * t75 + t302 * t48;
t107 = -pkin(3) * t497 - t110;
t212 = t303 * t362 + t363 * t546;
t395 = g(1) * t153 + g(2) * t149 + g(3) * t212 + t4;
t394 = -t262 * t425 - t539;
t393 = -pkin(4) * t559 - t229 * t586 - t230 * t360 + t413;
t392 = t418 + t80;
t391 = -t178 * t114 - t240 * t48 + t428 * t47 + t417;
t390 = t138 * t428 + t363 * t418;
t101 = pkin(4) * t480 + t130;
t120 = pkin(4) * t433 + t158;
t46 = -t456 + t66;
t213 = t303 * t363 - t506;
t389 = -g(1) * t154 - g(2) * t150 - g(3) * t213 + t3;
t41 = t114 * pkin(5) - qJ(6) * t618 + t101;
t388 = t41 * t618 + qJDD(6) - t395;
t387 = -t392 + t602;
t385 = t48 + t624;
t85 = -pkin(4) * t415 + t107;
t7 = t48 * pkin(5) + t47 * qJ(6) - qJD(6) * t618 + t46;
t292 = t524 * qJD(1);
t260 = -pkin(9) * t548 + t313;
t206 = -pkin(5) * t427 - qJ(6) * t316 - t360;
t159 = pkin(5) * t287 - qJ(6) * t288 + t317;
t127 = t377 * pkin(5) - t131;
t126 = -qJ(6) * t377 + t609;
t94 = -t138 * t377 - t255 * t425;
t92 = t138 * t302 + t226 * t255;
t67 = pkin(5) * t618 + qJ(6) * t114;
t51 = t134 * pkin(5) - t135 * qJ(6) + t120;
t37 = t138 * t316 - t255 * t532 - t264 * t618;
t30 = -t302 * pkin(5) - t33;
t29 = qJ(6) * t302 + t581;
t28 = -t47 + t626;
t23 = t255 * qJ(6) + t25;
t22 = -t255 * pkin(5) + t536;
t18 = -t316 * t47 - t532 * t618;
t14 = t75 * pkin(5) + t74 * qJ(6) - t135 * qJD(6) + t85;
t13 = -t288 * t47 - t534 * t618;
t12 = -t135 * t47 - t618 * t74;
t11 = t138 * t288 - t255 * t534 + t377 * t47 - t425 * t618;
t10 = t135 * t138 + t226 * t618 - t255 * t74 - t302 * t47;
t6 = -t226 * pkin(5) - t9;
t5 = qJ(6) * t226 + qJD(6) * t302 + t8;
t2 = qJDD(6) - t4 - t588;
t1 = qJD(6) * t255 + t3 + t572;
t15 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t591 - g(2) * t593, t421, 0, 0 (qJDD(1) * t368 + 0.2e1 * t470) * t366 (t376 * t512 - t514 * t522) * t611, t376 * t607 + t441 * t496 (qJDD(1) * t369 - 0.2e1 * t470) * t366, t378 * t607 - t441 * t497, t436 * t573, -t294 * t442 + t308 * t436 - t477 * t573 + g(1) * t305 - g(2) * t307 + (-t487 + t512) * t488, -t202 * t573 - t293 * t442 - t422 * t488 - t436 * t524 + t459 ((-t289 * qJD(2) + qJDD(1) * t524 + t202) * t378 + (-qJD(2) * t292 - qJDD(1) * t308 + t477) * t376 - t421) * t371, t366 * qJDD(1) * pkin(1) ^ 2 - g(1) * t467 - g(2) * t523 + t202 * t524 - t289 * t294 + t292 * t293 - t308 * t477, t264 * t227 + t303 * t608, -t303 * t144 - t264 * t226 - t227 * t262 - t302 * t608, -t227 * t333 + t303 * t286 + (t264 * t520 - t378 * t608) * t371, t445, t226 * t333 - t286 * t302 + (t144 * t378 - t262 * t520) * t371 (-t286 * t378 - t333 * t520) * t371, g(1) * t230 - g(2) * t234 - t110 * t333 + t144 * t282 + t174 * t302 + t176 * t286 + t226 * t241 + t262 * t294 + (t141 * t520 - t378 * t80) * t371, t109 * t333 - t142 * t497 + t174 * t303 - t177 * t286 + t241 * t227 + t294 * t264 + t282 * t608 + t546 * t79 + t460, -t109 * t262 - t110 * t264 - t141 * t227 - t142 * t226 - t177 * t144 - t176 * t608 - t79 * t302 - t80 * t303 - t459, -g(1) * t413 - g(2) * t438 + t142 * t109 + t141 * t110 + t174 * t282 + t80 * t176 + t79 * t177 + t241 * t294, t121 * t225 + t188 * t199, -t121 * t433 - t188 * t480 + t199 * t415 + t225 * t481, t121 * t302 + t144 * t225 + t188 * t262 + t199 * t226, -t415 * t480 - t433 * t481, -t144 * t433 - t226 * t480 + t262 * t415 + t302 * t481, t445, t55 * t262 + t96 * t144 + t26 * t302 + t82 * t226 + t107 * t480 - t158 * t481 + t66 * t433 - t130 * t415 - g(1) * (-t230 * t372 - t559) - g(2) * (t234 * t372 + t557) -t56 * t262 - t97 * t144 - t27 * t302 - t83 * t226 + t107 * t199 + t158 * t121 + t66 * t225 + t130 * t188 - g(1) * (t230 * t370 - t304 * t372) - g(2) * (-t234 * t370 + t306 * t372) -t96 * t121 - t82 * t188 - t55 * t199 - t26 * t225 - t27 * t433 + t415 * t83 - t480 * t56 + t481 * t97 - t460, t27 * t97 + t83 * t56 + t26 * t96 + t82 * t55 + t66 * t158 + t130 * t107 - g(1) * (-pkin(3) * t230 - qJ(4) * t229 + t413) - g(2) * (pkin(3) * t234 + qJ(4) * t233 + t438) t12, t397, t10, t452, -t396, t92, t101 * t75 + t114 * t85 + t120 * t48 + t134 * t46 + t138 * t33 + t226 * t24 + t255 * t9 + t302 * t4 + t461, -t101 * t74 - t120 * t47 + t135 * t46 - t138 * t581 - t226 * t25 - t255 * t8 - t3 * t302 + t618 * t85 - t462, -t114 * t8 - t134 * t3 - t135 * t4 + t24 * t74 - t25 * t75 + t33 * t47 - t48 * t581 - t618 * t9 - t460, -g(1) * t393 - g(2) * t407 + t101 * t85 + t46 * t120 + t24 * t9 + t25 * t8 + t3 * t581 + t4 * t33, t12, t10, -t397, t92, t396, t452, t114 * t14 + t134 * t7 - t138 * t30 - t2 * t302 - t22 * t226 - t255 * t6 + t41 * t75 + t48 * t51 + t461, -t1 * t134 - t114 * t5 + t135 * t2 - t22 * t74 - t23 * t75 - t29 * t48 - t30 * t47 + t6 * t618 - t460, t1 * t302 - t135 * t7 + t138 * t29 - t14 * t618 + t226 * t23 + t255 * t5 + t41 * t74 + t47 * t51 + t462, t1 * t29 + t23 * t5 + t7 * t51 + t41 * t14 + t2 * t30 + t22 * t6 - g(1) * (-pkin(5) * t150 - qJ(6) * t149 + t393) - g(2) * (pkin(5) * t154 + qJ(6) * t153 + t407); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t478, t522 * t551, -t378 * t464 + t485, t478, t376 * t464 + t346, t436, pkin(1) * t376 * t551 + t292 * t442 - t411 - t477, pkin(1) * t508 + t289 * t442 + (pkin(8) * t514 + g(3)) * t547 + t458 - t505, 0, 0, -t405 * t375 + (t375 * t386 - t562) * t377, -t375 * t144 + t262 * t605 + t264 * t604 + t377 * t608, -t333 * t517 + t286 * t375 + (-t264 * t376 + t333 * t537) * t521, t394 (t262 * t376 - t333 * t540) * t521 - t603, t333 * t499, -t141 * t499 - pkin(2) * t144 + t190 * t333 - t262 * t292 + (-pkin(9) * t286 - t241 * t333) * t375 + (pkin(9) * qJD(3) * t333 - t174 - t411) * t377, -pkin(2) * t608 + pkin(9) * t603 - g(1) * t556 - g(2) * t558 + g(3) * t507 + t142 * t499 + t174 * t375 - t191 * t333 - t241 * t605 - t292 * t264, -pkin(9) * t539 + t608 * t364 + t399 - t510 + (t190 + t361) * t264 + (t191 + t509) * t262 + t604 * t142 + t605 * t141, -t174 * pkin(2) - t142 * t191 - t141 * t190 - t241 * t292 + g(1) * t297 + g(2) * t295 - g(3) * t525 + ((-t141 * t377 - t142 * t375) * qJD(3) + t399) * pkin(9), t121 * t544 - t199 * t623, t250 * t480 + t199 * t249 + (t448 - t569) * t375 + t408 * t517, -t121 * t377 - t623 * t262 + (-t199 * t333 + t545) * t375, -t480 * t249 + (-t375 * t481 + t377 * t444) * t370, -t481 * t377 + t619 * t262 + (t480 * t498 - t444 - t550) * t375, t394, t260 * t144 - t162 * t480 - t130 * t249 + t529 * t262 + t410 * t370 + (-t26 - t411 * t372 + (pkin(9) * t480 + t130 * t370) * qJD(3)) * t377 + (-pkin(9) * t481 - t333 * t82 + t66 * t370) * t375, -t130 * t250 - t261 * t144 - t162 * t199 - t528 * t262 + t410 * t372 + (t27 + (pkin(9) * t199 + t130 * t372) * qJD(3) + t411 * t370) * t377 + (pkin(9) * t121 + t333 * t83 + t66 * t372) * t375, t261 * t481 - t260 * t121 + t83 * t249 + t82 * t250 - t529 * t199 + (-t370 * t83 - t372 * t82) * t517 + (-t26 * t372 - t27 * t370 - t411) * t375 - t528 * t480, t27 * t261 + t26 * t260 - t130 * t162 - g(1) * (-qJ(4) * t556 - t306 * t590 - t297) - g(2) * (-qJ(4) * t558 - t304 * t590 - t295) - g(3) * (t455 * t546 + t525) + t528 * t83 + t529 * t82 + (t130 * t517 + t375 * t66 - t458) * pkin(9), t13, t596, t11, t424, t612, t94, -t101 * t535 + t114 * t526 + t131 * t138 - t24 * t425 + t255 * t582 + t287 * t46 + t317 * t48 - t377 * t4 + t419, -t101 * t534 - t138 * t609 + t25 * t425 - t255 * t583 + t288 * t46 + t3 * t377 - t317 * t47 + t526 * t618 - t420, -t114 * t583 + t131 * t47 + t24 * t534 + t25 * t535 - t287 * t3 - t288 * t4 - t48 * t609 - t582 * t618 - t400, -g(1) * t402 - g(2) * t403 - g(3) * t406 + t101 * t526 + t4 * t131 + t24 * t582 + t25 * t583 + t3 * t609 + t46 * t317, t13, t11, -t596, t94, -t612, t424, t114 * t580 - t127 * t138 + t159 * t48 + t2 * t377 + t22 * t425 - t255 * t584 + t287 * t7 - t41 * t535 + t419, -t1 * t287 - t114 * t585 - t126 * t48 - t127 * t47 + t2 * t288 - t22 * t534 + t23 * t535 + t584 * t618 - t400, -t1 * t377 + t126 * t138 + t159 * t47 - t23 * t425 + t255 * t585 - t288 * t7 + t41 * t534 - t580 * t618 + t420, t1 * t126 + t7 * t159 + t2 * t127 - g(1) * (pkin(5) * t183 + qJ(6) * t182 + t402) - g(2) * (pkin(5) * t181 + qJ(6) * t180 + t403) - g(3) * (pkin(5) * t245 + qJ(6) * t244 + t406) + t580 * t41 + t585 * t23 + t584 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, t264 ^ 2 - t594, -t262 * t333 + t608, -t565, -t144 - t562, t286, -t241 * t264 + t392 - t567, -t141 * t333 + t241 * t262 - t417 - t79, 0, 0, t199 * t563 + t569, t121 * t372 + t262 * t408 + t370 * t481, -t199 * t264 + t372 * t594 + t550, t480 * t564 + t448, t264 * t480 - t370 * t594 + t545, -t565, -qJ(4) * t550 - pkin(3) * t137 - t142 * t246 - t82 * t264 + (t370 * t515 - t98) * t262 + (t412 - t567 + t587) * t372, -qJ(4) * t545 - pkin(3) * t121 - t142 * t199 + t264 * t83 + (t372 * t515 + t99) * t262 - t412 * t370, t98 * t199 + t99 * t246 + (-qJ(4) * t137 - qJD(4) * t246 - t82 * t262 + t99 * t333 + t372 * t440 + t27) * t372 + (qJ(4) * t121 + qJD(4) * t199 - t262 * t83 - t26) * t370 + t417, -t130 * t142 - t82 * t98 - t83 * t99 + (-t370 * t82 + t372 * t83) * qJD(4) + t412 * pkin(3) + (-t26 * t370 + t27 * t372 + t417) * qJ(4), t18, t597, t37, t423, t601, -t566, t101 * t614 - t114 * t122 - t24 * t264 - t255 * t574 - t360 * t48 - t427 * t46 + t390, -t101 * t532 - t122 * t618 + t25 * t264 - t255 * t576 + t316 * t46 + t360 * t47 + t599, t114 * t36 + t24 * t532 - t25 * t614 + t3 * t427 - t316 * t4 + t574 * t618 + t391, -g(1) * t530 - g(2) * t531 - g(3) * t527 - t101 * t122 - t24 * t574 + t3 * t240 + t25 * t576 - t46 * t360 + t4 * t428, t18, t37, -t597, -t566, -t601, t423, t114 * t578 + t206 * t48 + t22 * t264 - t255 * t575 + t41 * t614 - t427 * t7 + t390, t1 * t427 + t114 * t31 + t2 * t316 - t22 * t532 - t23 * t614 + t575 * t618 + t391, t206 * t47 - t23 * t264 + t255 * t577 - t316 * t7 + t41 * t532 - t578 * t618 - t599, t1 * t240 + t7 * t206 - t2 * t428 - g(1) * (t233 * t453 + t530) - g(2) * (t229 * t453 + t531) - g(3) * (t302 * t453 + t527) + t578 * t41 + t577 * t23 + t575 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199 * t262 - t481, -t262 * t480 + t121, -t199 ^ 2 - t480 ^ 2, t199 * t82 + t480 * t83 + t387, 0, 0, 0, 0, 0, 0, t385, -t401, t447, t114 * t25 + t24 * t618 + t387 - t456, 0, 0, 0, 0, 0, 0, t385, t447, t401, t114 * t23 - t22 * t618 - t418 + t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t571, -t490, t28, -t571, -t610, t138, -t101 * t618 + t395 + t579, t101 * t114 + t24 * t255 - t389, 0, 0, t571, t28, t490, t138, t610, -t571, -t114 * t67 - t388 + t579 + 0.2e1 * t588, pkin(5) * t47 - qJ(6) * t48 + (t23 - t25) * t618 + (t22 - t536) * t114, 0.2e1 * t572 - t114 * t41 + t618 * t67 + (0.2e1 * qJD(6) - t24) * t255 + t389, t1 * qJ(6) - t2 * pkin(5) - t41 * t67 - t22 * t25 - g(1) * (-pkin(5) * t153 + qJ(6) * t154) - g(2) * (-pkin(5) * t149 + qJ(6) * t150) - g(3) * (-pkin(5) * t212 + qJ(6) * t213) + t536 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t571 - t138, t28, -t255 ^ 2 - t595, -t23 * t255 + t388 - t588;];
tau_reg  = t15;
