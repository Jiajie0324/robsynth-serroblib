% Calculate vector of inverse dynamics joint torques for
% S6RRRPRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRP10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRP10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRPRP10_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:37:37
% EndTime: 2019-03-09 17:38:17
% DurationCPUTime: 30.54s
% Computational Cost: add. (18470->863), mult. (44972->1114), div. (0->0), fcn. (36090->14), ass. (0->334)
t863 = cos(qJ(2));
t856 = sin(pkin(6));
t989 = qJD(1) * t856;
t965 = t863 * t989;
t817 = -qJD(3) + t965;
t860 = sin(qJ(3));
t862 = cos(qJ(3));
t1038 = cos(pkin(6));
t949 = t1038 * qJD(1);
t921 = t949 + qJD(2);
t861 = sin(qJ(2));
t966 = t861 * t989;
t759 = t860 * t921 + t862 * t966;
t855 = sin(pkin(11));
t857 = cos(pkin(11));
t706 = t759 * t857 - t817 * t855;
t859 = sin(qJ(5));
t1048 = cos(qJ(5));
t744 = t855 * t759;
t947 = t817 * t857 + t744;
t910 = t1048 * t947;
t630 = t706 * t859 + t910;
t1082 = t630 ^ 2;
t757 = t860 * t966 - t862 * t921;
t751 = qJD(5) + t757;
t1081 = t630 * t751;
t829 = pkin(8) * t965;
t938 = pkin(1) * t949;
t782 = t861 * t938 + t829;
t1080 = qJD(4) * t860 + t782 + t817 * (pkin(3) * t860 - qJ(4) * t862);
t924 = t859 * t947;
t1077 = t1048 * t706 - t924;
t1050 = t1077 ^ 2;
t1079 = t1077 * t751;
t779 = -pkin(8) * t966 + t863 * t938;
t931 = pkin(2) * t861 - pkin(9) * t863;
t780 = t931 * t989;
t995 = t862 * t779 + t860 * t780;
t673 = qJ(4) * t966 + t995;
t1078 = t1080 * t855 + t857 * t673;
t986 = qJD(3) * t860;
t975 = pkin(9) * t986;
t997 = -t1080 * t857 + (t673 + t975) * t855;
t939 = t862 * t965;
t745 = t855 * t939 - t857 * t966;
t984 = qJD(3) * t862;
t1074 = -t855 * t984 + t745;
t1010 = t862 * t863;
t1016 = t855 * t861;
t746 = (t1010 * t857 + t1016) * t989;
t1060 = t857 * t984 - t746;
t888 = qJD(3) * t921;
t945 = t1038 * qJDD(1);
t916 = t945 + qJDD(2);
t987 = qJD(2) * t863;
t963 = t860 * t987;
t979 = qJDD(1) * t861;
t657 = (qJD(1) * (t861 * t984 + t963) + t860 * t979) * t856 + t860 * t888 - t862 * t916;
t651 = qJDD(5) + t657;
t1011 = t857 * t862;
t940 = t860 * t965;
t1076 = pkin(4) * t940 - pkin(10) * t746 - (pkin(4) * t860 - pkin(10) * t1011) * qJD(3) - t997;
t1012 = t857 * t860;
t1015 = t855 * t862;
t1075 = -pkin(10) * t745 - (-pkin(9) * t1012 - pkin(10) * t1015) * qJD(3) + t1078;
t957 = qJD(5) * t1048;
t982 = qJD(5) * t859;
t1062 = -t855 * t982 + t857 * t957;
t802 = t1048 * t855 + t859 * t857;
t1003 = t1048 * t745 - t1062 * t860 + t746 * t859 - t802 * t984;
t791 = t802 * qJD(5);
t999 = t1048 * t1060 + t1074 * t859 - t791 * t860;
t900 = t1048 * t857 - t859 * t855;
t994 = t900 * t757 + t1062;
t993 = t802 * t757 + t791;
t760 = t860 * t779;
t675 = -pkin(3) * t966 - t780 * t862 + t760;
t1072 = pkin(9) * t984 - t675;
t1059 = t986 - t940;
t1047 = sin(qJ(1));
t1049 = cos(qJ(1));
t934 = t1038 * t1049;
t795 = t1047 * t863 + t861 * t934;
t968 = t856 * t1049;
t727 = t795 * t860 + t862 * t968;
t933 = t1038 * t1047;
t797 = t1049 * t863 - t861 * t933;
t967 = t856 * t1047;
t731 = t797 * t860 - t862 * t967;
t1014 = t856 * t861;
t792 = t1014 * t860 - t1038 * t862;
t890 = g(1) * t731 + g(2) * t727 + g(3) * t792;
t728 = t795 * t862 - t860 * t968;
t794 = t1047 * t861 - t863 * t934;
t852 = pkin(11) + qJ(5);
t847 = sin(t852);
t848 = cos(t852);
t662 = t728 * t847 - t794 * t848;
t663 = t728 * t848 + t794 * t847;
t969 = pkin(1) * t1038;
t914 = -pkin(8) * t1014 + t863 * t969;
t773 = -pkin(2) * t1038 - t914;
t793 = t1014 * t862 + t1038 * t860;
t669 = t792 * pkin(3) - t793 * qJ(4) + t773;
t1013 = t856 * t863;
t991 = pkin(8) * t1013 + t861 * t969;
t774 = pkin(9) * t1038 + t991;
t992 = pkin(2) * t1013 + pkin(9) * t1014;
t775 = -pkin(1) * t856 - t992;
t996 = t862 * t774 + t860 * t775;
t670 = -qJ(4) * t1013 + t996;
t614 = t857 * t669 - t670 * t855;
t723 = -t1013 * t855 + t793 * t857;
t597 = pkin(4) * t792 - pkin(10) * t723 + t614;
t615 = t855 * t669 + t857 * t670;
t912 = t1013 * t857 + t793 * t855;
t605 = -pkin(10) * t912 + t615;
t1070 = t1048 * t605 + t859 * t597;
t740 = pkin(9) * t921 + t782;
t919 = -pkin(2) * t863 - pkin(9) * t861 - pkin(1);
t750 = t919 * t989;
t654 = -t860 * t740 + t862 * t750;
t688 = pkin(3) * t759 + qJ(4) * t757;
t617 = t857 * t654 + t855 * t688;
t1069 = -qJD(4) * t857 + t617;
t1028 = t757 * t857;
t616 = -t654 * t855 + t857 * t688;
t601 = pkin(4) * t759 + pkin(10) * t1028 + t616;
t1029 = t757 * t855;
t609 = pkin(10) * t1029 + t617;
t1039 = pkin(10) + qJ(4);
t812 = t1039 * t855;
t813 = t1039 * t857;
t737 = t1048 * t813 - t859 * t812;
t1068 = -qJD(4) * t802 - qJD(5) * t737 - t1048 * t601 + t859 * t609;
t1046 = pkin(3) * t862;
t926 = qJ(4) * t860 + t1046;
t809 = -pkin(2) - t926;
t800 = t857 * t809;
t715 = -pkin(10) * t1012 + t800 + (-pkin(9) * t855 - pkin(4)) * t862;
t1017 = t855 * t860;
t756 = pkin(9) * t1011 + t855 * t809;
t726 = -pkin(10) * t1017 + t756;
t1067 = t1048 * t726 + t859 * t715;
t1066 = -t857 * t975 - t1078;
t1065 = -pkin(4) * t1074 + t1072;
t868 = t860 * t916 + t862 * t888;
t950 = t862 * t979;
t962 = t862 * t987;
t985 = qJD(3) * t861;
t867 = (t950 + (-t860 * t985 + t962) * qJD(1)) * t856 + t868;
t1063 = (qJDD(2) + 0.2e1 * t945) * t856;
t1061 = t939 - t984;
t978 = qJDD(1) * t863;
t831 = t856 * t978;
t980 = qJD(1) * qJD(2);
t955 = t861 * t980;
t936 = t856 * t955;
t776 = qJDD(3) - t831 + t936;
t1058 = -t776 * t862 - t817 * t986;
t901 = -t1048 * t812 - t859 * t813;
t1057 = -qJD(4) * t900 - qJD(5) * t901 + t1048 * t609 + t859 * t601;
t1056 = t1048 * t1075 + t1076 * t859 - t715 * t957 + t726 * t982;
t1040 = t776 * pkin(3);
t1055 = qJDD(4) - t1040;
t911 = t931 * qJD(2);
t781 = t856 * t911;
t783 = t914 * qJD(2);
t895 = -t774 * t986 + t775 * t984 + t860 * t781 + t862 * t783;
t988 = qJD(2) * t861;
t620 = (qJ(4) * t988 - qJD(4) * t863) * t856 + t895;
t724 = qJD(3) * t793 + t856 * t963;
t725 = -qJD(3) * t792 + t856 * t962;
t784 = t991 * qJD(2);
t626 = t724 * pkin(3) - t725 * qJ(4) - t793 * qJD(4) + t784;
t580 = -t855 * t620 + t857 * t626;
t964 = t856 * t988;
t885 = t725 * t857 + t855 * t964;
t567 = t724 * pkin(4) - pkin(10) * t885 + t580;
t581 = t857 * t620 + t855 * t626;
t886 = -t725 * t855 + t857 * t964;
t575 = pkin(10) * t886 + t581;
t1053 = -qJD(5) * t1070 + t1048 * t567 - t859 * t575;
t1052 = -t737 * t651 - t890 * t847;
t1051 = -qJD(5) * t1067 - t1048 * t1076 + t1075 * t859;
t864 = qJD(1) ^ 2;
t1045 = pkin(5) * t651;
t1041 = g(3) * t856;
t849 = t860 * pkin(9);
t1037 = qJ(4) * t855;
t1036 = qJ(4) * t857;
t1035 = qJ(6) * t651;
t739 = -pkin(2) * t921 - t779;
t643 = t757 * pkin(3) - t759 * qJ(4) + t739;
t655 = t862 * t740 + t860 * t750;
t646 = -qJ(4) * t817 + t655;
t603 = t857 * t643 - t646 * t855;
t579 = pkin(4) * t757 - pkin(10) * t706 + t603;
t604 = t855 * t643 + t857 * t646;
t589 = -pkin(10) * t947 + t604;
t558 = t1048 * t589 + t859 * t579;
t1034 = t558 * t751;
t918 = qJD(2) * t938;
t935 = pkin(1) * t945;
t971 = pkin(8) * t831 + t861 * t935 + t863 * t918;
t881 = -pkin(8) * t936 + t971;
t686 = pkin(9) * t916 + t881;
t695 = (qJD(1) * t911 + qJDD(1) * t919) * t856;
t943 = t860 * t686 - t862 * t695 + t740 * t984 + t750 * t986;
t591 = t943 + t1055;
t1033 = t591 * t855;
t1032 = t1077 * t630;
t1031 = t655 * t817;
t1027 = t759 * t817;
t1023 = t794 * t860;
t796 = t1049 * t861 + t863 * t933;
t1022 = t796 * t860;
t898 = t817 * t860;
t1020 = t847 * t862;
t1019 = t848 * t862;
t851 = t856 ^ 2;
t1018 = t851 * t864;
t896 = t862 * t686 + t860 * t695 - t740 * t986 + t750 * t984;
t588 = qJ(4) * t776 - qJD(4) * t817 + t896;
t952 = t856 * t979;
t942 = pkin(8) * t952 + qJD(2) * t829 + t861 * t918 - t863 * t935;
t687 = -pkin(2) * t916 + t942;
t590 = t657 * pkin(3) - qJ(4) * t867 - t759 * qJD(4) + t687;
t560 = t857 * t588 + t855 * t590;
t1009 = qJ(6) * t1059 - qJD(6) * t862 - t1056;
t1008 = -pkin(5) * t1059 - t1051;
t778 = t900 * t860;
t1004 = -pkin(5) * t1003 - qJ(6) * t999 - qJD(6) * t778 + t1065;
t637 = -pkin(4) * t1029 + t655;
t1002 = pkin(5) * t993 - qJ(6) * t994 - qJD(6) * t802 - t637;
t1001 = -qJ(6) * t759 - t1057;
t1000 = t759 * pkin(5) - t1068;
t803 = pkin(4) * t1017 + t849;
t853 = t861 ^ 2;
t990 = -t863 ^ 2 + t853;
t557 = t1048 * t579 - t859 * t589;
t981 = qJD(6) - t557;
t976 = g(3) * t1013;
t974 = t863 * t1018;
t973 = t847 * t1013;
t972 = t1049 * pkin(1) + t797 * pkin(2) + pkin(8) * t967;
t845 = pkin(4) * t857 + pkin(3);
t970 = pkin(4) * t855 + pkin(9);
t956 = 0.2e1 * pkin(1) * t851;
t954 = t863 * t980;
t953 = qJD(1) * t985;
t559 = -t855 * t588 + t857 * t590;
t650 = t855 * t867;
t948 = t776 * t857 - t650;
t946 = -t860 * t774 + t862 * t775;
t866 = t855 * t776 + t857 * t867;
t551 = t657 * pkin(4) - pkin(10) * t866 + t559;
t554 = pkin(10) * t948 + t560;
t944 = -t1048 * t551 + t859 * t554 + t579 * t982 + t589 * t957;
t932 = t856 * t864 * t1038;
t732 = t797 * t862 + t860 * t967;
t666 = t732 * t847 - t796 * t848;
t930 = -g(1) * t662 + g(2) * t666;
t667 = t732 * t848 + t796 * t847;
t929 = g(1) * t663 - g(2) * t667;
t928 = -g(1) * t727 + g(2) * t731;
t927 = g(1) * t797 + g(2) * t795;
t671 = pkin(3) * t1013 - t946;
t923 = t1039 * t860 + t845 * t862;
t920 = 0.2e1 * t949 + qJD(2);
t917 = -pkin(1) * t1047 - t795 * pkin(2) + pkin(8) * t968;
t915 = -t774 * t984 - t775 * t986 + t862 * t781 - t860 * t783;
t909 = t1048 * t597 - t859 * t605;
t906 = t1048 * t715 - t859 * t726;
t897 = t954 + t979;
t543 = t1048 * t554 + t859 * t551 + t579 * t957 - t589 * t982;
t894 = t1048 * t575 + t859 * t567 + t597 * t957 - t605 * t982;
t572 = qJD(5) * t910 - t1048 * t866 + t706 * t982 - t859 * t948;
t691 = -t1020 * t794 - t795 * t848;
t693 = -t1020 * t796 - t797 * t848;
t742 = -t1014 * t848 + t862 * t973;
t892 = -g(1) * t693 - g(2) * t691 - g(3) * t742;
t692 = -t1019 * t794 + t795 * t847;
t694 = -t1019 * t796 + t797 * t847;
t743 = (t1010 * t848 + t847 * t861) * t856;
t891 = -g(1) * t694 - g(2) * t692 - g(3) * t743;
t889 = g(1) * t732 + g(2) * t728 + g(3) * t793;
t645 = t817 * pkin(3) + qJD(4) - t654;
t887 = t916 * MDP(8);
t883 = g(1) * t796 + g(2) * t794 - t976;
t882 = -t591 + t890;
t880 = t1048 * t912;
t625 = -pkin(3) * t964 - t915;
t877 = -g(1) * t1022 - g(2) * t1023 + t860 * t976;
t713 = t1013 * t848 + t793 * t847;
t876 = g(1) * t666 + g(2) * t662 + g(3) * t713 - t944;
t875 = t890 - t943;
t874 = t651 * t901 + t848 * t890;
t648 = t1048 * t723 - t859 * t912;
t873 = -t559 * t855 + t560 * t857 - t889;
t619 = pkin(4) * t947 + t645;
t636 = pkin(4) * t912 + t671;
t571 = -pkin(4) * t948 + t591;
t714 = t793 * t848 - t973;
t872 = -g(1) * t667 - g(2) * t663 - g(3) * t714 + t543;
t568 = t630 * pkin(5) - qJ(6) * t1077 + t619;
t871 = t1077 * t568 + qJDD(6) - t876;
t606 = -pkin(4) * t886 + t625;
t573 = -qJD(5) * t924 - t1048 * t948 + t706 * t957 + t859 * t866;
t547 = t573 * pkin(5) + t572 * qJ(6) - qJD(6) * t1077 + t571;
t787 = t796 * pkin(2);
t785 = t794 * pkin(2);
t777 = t802 * t860;
t755 = -pkin(9) * t1015 + t800;
t711 = -pkin(5) * t900 - qJ(6) * t802 - t845;
t672 = pkin(5) * t777 - qJ(6) * t778 + t803;
t647 = t723 * t859 + t880;
t642 = t862 * pkin(5) - t906;
t641 = -qJ(6) * t862 + t1067;
t600 = qJD(5) * t648 - t1048 * t886 + t859 * t885;
t599 = qJD(5) * t880 - t1048 * t885 + t723 * t982 - t859 * t886;
t592 = pkin(5) * t1077 + qJ(6) * t630;
t576 = t647 * pkin(5) - t648 * qJ(6) + t636;
t563 = -t792 * pkin(5) - t909;
t562 = qJ(6) * t792 + t1070;
t561 = -t572 + t1081;
t556 = t751 * qJ(6) + t558;
t555 = -t751 * pkin(5) + t981;
t548 = t600 * pkin(5) + t599 * qJ(6) - t648 * qJD(6) + t606;
t546 = -t724 * pkin(5) - t1053;
t545 = qJ(6) * t724 + qJD(6) * t792 + t894;
t542 = qJDD(6) + t944 - t1045;
t541 = qJD(6) * t751 + t1035 + t543;
t1 = [(g(1) * t1047 - g(2) * t1049) * MDP(2) + (g(1) * t1049 + g(2) * t1047) * MDP(3) + (-g(1) * t794 + g(2) * t796 - t1038 * t881 - t783 * t921 - t897 * t956 - t916 * t991) * MDP(10) + (-t784 * t921 + t914 * t916 - t942 * t1038 + g(1) * t795 - g(2) * t797 + (-t955 + t978) * t956) * MDP(9) + t1038 * t887 + (-t559 * t723 - t560 * t912 - t580 * t706 - t581 * t947 - t603 * t885 + t604 * t886 - t614 * t866 + t615 * t948 - t928) * MDP(20) + (t1053 * t751 + t557 * t724 + t571 * t647 + t636 * t573 + t619 * t600 + t606 * t630 + t909 * t651 - t792 * t944 + t929) * MDP(27) + (-t915 * t817 + t946 * t776 + t784 * t757 + t773 * t657 + t687 * t792 + t739 * t724 + g(1) * t728 - g(2) * t732 + (t654 * t988 + t863 * t943) * t856) * MDP(16) + (t580 * t757 + t614 * t657 + t559 * t792 + t603 * t724 + t625 * t947 - t671 * t948 + t591 * t912 - t645 * t886 - g(1) * (-t728 * t857 - t794 * t855) - g(2) * (t732 * t857 + t796 * t855)) * MDP(18) + (-t581 * t757 - t615 * t657 - t560 * t792 - t604 * t724 + t625 * t706 + t671 * t866 + t591 * t723 + t645 * t885 - g(1) * (t728 * t855 - t794 * t857) - g(2) * (-t732 * t855 + t796 * t857)) * MDP(19) + (t560 * t615 + t604 * t581 + t559 * t614 + t603 * t580 + t591 * t671 + t645 * t625 - g(1) * (-pkin(3) * t728 - t794 * pkin(9) - qJ(4) * t727 + t917) - g(2) * (pkin(3) * t732 + pkin(9) * t796 + qJ(4) * t731 + t972)) * MDP(21) + (-t542 * t792 - t546 * t751 + t547 * t647 + t548 * t630 - t555 * t724 - t563 * t651 + t568 * t600 + t573 * t576 + t929) * MDP(29) + (0.2e1 * (t861 * t978 - t980 * t990) * MDP(5) + (qJDD(1) * t853 + 0.2e1 * t861 * t954) * MDP(4)) * t851 + (-t725 * t817 + t793 * t776 + (-t868 * t863 + t759 * t988 - (-t860 * t953 + t862 * t954 + t950) * t1013) * t856) * MDP(13) + (t1013 * t896 - t655 * t964 + t687 * t793 + t739 * t725 + t784 * t759 + t773 * t867 - t776 * t996 + t817 * t895 + t928) * MDP(17) + (-t776 * t863 - t817 * t988) * t856 * MDP(15) + (t856 * t920 * t987 + t1063 * t861) * MDP(6) + (t1063 * t863 - t920 * t964) * MDP(7) + (t759 * t725 + t793 * t867) * MDP(11) + (-t793 * t657 - t759 * t724 - t725 * t757 - t792 * t867) * MDP(12) + (t724 * t817 - t776 * t792 + (t657 * t863 - t757 * t988) * t856) * MDP(14) + (-t573 * t792 - t600 * t751 - t630 * t724 - t647 * t651) * MDP(25) + (t651 * t792 + t724 * t751) * MDP(26) + (-t1070 * t651 + t1077 * t606 - t543 * t792 - t558 * t724 + t571 * t648 - t636 * t572 - t619 * t599 - t751 * t894 + t930) * MDP(28) + (t1077 * t546 - t541 * t647 + t542 * t648 - t545 * t630 - t555 * t599 - t556 * t600 - t562 * t573 - t563 * t572 - t928) * MDP(30) + (-t1077 * t548 + t541 * t792 + t545 * t751 - t547 * t648 + t556 * t724 + t562 * t651 + t568 * t599 + t572 * t576 - t930) * MDP(31) + (t1077 * t724 - t572 * t792 - t599 * t751 + t648 * t651) * MDP(24) + (-t1077 * t600 + t572 * t647 - t573 * t648 + t599 * t630) * MDP(23) + (-t1077 * t599 - t572 * t648) * MDP(22) + (t541 * t562 + t556 * t545 + t547 * t576 + t568 * t548 + t542 * t563 + t555 * t546 - g(1) * (-pkin(5) * t663 - qJ(6) * t662 - t1039 * t727 - t728 * t845 - t794 * t970 + t917) - g(2) * (pkin(5) * t667 + qJ(6) * t666 + t1039 * t731 + t732 * t845 + t796 * t970 + t972)) * MDP(32) + qJDD(1) * MDP(1); (-t756 * t657 + t560 * t862 + t866 * t849 + t591 * t1012 - g(1) * (t1015 * t796 + t797 * t857) - g(2) * (t1015 * t794 + t795 * t857) - (-t1010 * t855 + t857 * t861) * t1041 - t1066 * t757 + t1072 * t706 + t1060 * t645 - t1059 * t604) * MDP(19) + (t1003 * t751 + t573 * t862 + t630 * t898 - t651 * t777) * MDP(25) + (-t654 * t966 - pkin(2) * t657 - t782 * t757 - t760 * t817 + (-pkin(9) * t776 - t739 * t817) * t860 + (-t687 + (pkin(9) * qJD(3) + t780) * t817 + t883) * t862) * MDP(16) + (-t863 * t932 + t952) * MDP(6) + (-t1059 * t759 + t1061 * t757 - t860 * t657 + t862 * t867) * MDP(12) + (-pkin(2) * t867 + pkin(9) * t1058 - t1061 * t739 + t655 * t966 + t687 * t860 - t782 * t759 - t817 * t995 + t877) * MDP(17) + (-t1003 * t568 + t1004 * t630 - t1008 * t751 + t542 * t862 + t547 * t777 + t555 * t898 + t573 * t672 - t642 * t651 + t891) * MDP(29) + (-t1003 * t619 + t1051 * t751 + t1059 * t557 + t1065 * t630 + t571 * t777 + t803 * t573 + t906 * t651 + t862 * t944 + t891) * MDP(27) + (-t651 * t862 - t751 * t898) * MDP(26) + t817 * MDP(15) * t966 + t887 + ((t757 * t861 - t863 * t898) * t989 - t1058) * MDP(14) + (t861 * t932 + t831) * MDP(7) + (pkin(1) * t1018 * t861 + t782 * t921 + t883 - t942) * MDP(9) + (pkin(1) * t974 + t779 * t921 + (pkin(8) * t980 + g(3)) * t1014 + t927 - t971) * MDP(10) + ((-t856 * t953 + t916) * t860 ^ 2 + ((t856 * t897 + t888) * t860 - t1027) * t862) * MDP(11) + (t541 * t641 + t547 * t672 + t542 * t642 - g(1) * (pkin(5) * t694 + qJ(6) * t693 - t796 * t923 + t797 * t970 - t787) - g(2) * (pkin(5) * t692 + qJ(6) * t691 - t794 * t923 + t795 * t970 - t785) - g(3) * (pkin(5) * t743 + qJ(6) * t742 + t992) - (pkin(4) * t1016 + t863 * t923) * t1041 + t1004 * t568 + t1009 * t556 + t1008 * t555) * MDP(32) - t861 * MDP(4) * t974 + (t560 * t756 + t559 * t755 - t645 * t675 - g(1) * (-qJ(4) * t1022 - t1046 * t796 - t787) - g(2) * (-qJ(4) * t1023 - t1046 * t794 - t785) - g(3) * (t1013 * t926 + t992) + t1066 * t604 + t997 * t603 + (t591 * t860 + t645 * t984 - t927) * pkin(9)) * MDP(21) + (-t1012 * t559 - t1017 * t560 - t1060 * t603 - t1066 * t947 + t1074 * t604 - t997 * t706 - t755 * t866 + t756 * t948 - t877) * MDP(20) + (t1077 * t999 - t572 * t778) * MDP(22) + (t1003 * t1077 + t572 * t777 - t573 * t778 - t630 * t999) * MDP(23) + (t1003 * t556 + t1008 * t1077 - t1009 * t630 - t541 * t777 + t542 * t778 + t555 * t999 - t572 * t642 - t573 * t641 + t860 * t883) * MDP(30) + (-t1077 * t898 + t572 * t862 + t651 * t778 + t751 * t999) * MDP(24) + (-t1004 * t1077 + t1009 * t751 - t541 * t862 - t547 * t778 - t556 * t898 - t568 * t999 + t572 * t672 + t641 * t651 + t892) * MDP(31) + (t1056 * t751 + t1065 * t1077 - t1067 * t651 + t543 * t862 + t558 * t898 + t571 * t778 - t803 * t572 + t999 * t619 - t892) * MDP(28) + t990 * MDP(5) * t1018 + (-t817 * t984 + t776 * t860 + (t1010 * t817 - t759 * t861) * t989) * MDP(13) + (t755 * t657 - t675 * t947 - t645 * t745 + t997 * t757 + (-g(3) * t1014 - t927) * t855 + (-t559 + t883 * t857 + (pkin(9) * t947 + t645 * t855) * qJD(3)) * t862 + (-pkin(9) * t948 - t603 * t817 + t1033) * t860) * MDP(18); t867 * MDP(13) + (-t1027 - t657) * MDP(14) + t776 * MDP(15) + (-t1031 + t875) * MDP(16) + (-t654 * t817 + t889 - t896) * MDP(17) + (-t657 * t1037 - pkin(3) * t650 - t655 * t744 + (-t1031 + t882 + t1040) * t857) * MDP(18) + (-pkin(3) * t866 + t1028 * t645 - t1036 * t657 - t655 * t706 - t855 * t890 + t1033) * MDP(19) + (-t1028 * t603 - t1029 * t604 + t1036 * t948 + t1037 * t866 + t873 + t1069 * t947 + (qJD(4) * t855 + t616) * t706) * MDP(20) + (-t603 * t616 - t604 * t617 - t645 * t655 + (-t603 * t855 + t604 * t857) * qJD(4) + t882 * pkin(3) + t873 * qJ(4)) * MDP(21) + (t1077 * t994 - t572 * t802) * MDP(22) + (-t1077 * t993 - t572 * t900 - t573 * t802 - t630 * t994) * MDP(23) + (t651 * t802 + t751 * t994) * MDP(24) + (t651 * t900 - t751 * t993) * MDP(25) + (t1068 * t751 - t571 * t900 - t845 * t573 + t993 * t619 - t637 * t630 + t874) * MDP(27) + (t1057 * t751 - t1077 * t637 + t571 * t802 + t845 * t572 + t994 * t619 + t1052) * MDP(28) + (-t1000 * t751 + t1002 * t630 - t547 * t900 + t568 * t993 + t573 * t711 + t874) * MDP(29) + (t1000 * t1077 - t1001 * t630 + t541 * t900 + t542 * t802 + t555 * t994 - t556 * t993 + t572 * t901 - t573 * t737 - t889) * MDP(30) + (t1001 * t751 - t1002 * t1077 - t547 * t802 - t568 * t994 + t572 * t711 - t1052) * MDP(31) + (MDP(12) * t759 - MDP(16) * t739 - MDP(18) * t603 + MDP(19) * t604 - MDP(24) * t1077 + MDP(25) * t630 - MDP(26) * t751 - MDP(27) * t557 + MDP(28) * t558 + MDP(29) * t555 - MDP(31) * t556) * t759 + (t759 * MDP(11) - t817 * MDP(13) + t739 * MDP(17) + (-t616 + (-qJD(4) + t645) * t855) * MDP(18) + t1069 * MDP(19) - t757 * MDP(12)) * t757 + (t1000 * t555 + t1001 * t556 + t1002 * t568 + t541 * t737 - t542 * t901 + t547 * t711 - t1039 * t889 + t890 * (pkin(5) * t848 + qJ(6) * t847 + t845)) * MDP(32); (t706 * t757 - t948) * MDP(18) + (-t757 * t947 + t866) * MDP(19) + (-t706 ^ 2 - t947 ^ 2) * MDP(20) + (t603 * t706 + t604 * t947 + t1055 - t875) * MDP(21) + (-t1050 - t1082) * MDP(30) + (-t1077 * t555 + t556 * t630 + t547 - t890) * MDP(32) + (-MDP(28) + MDP(31)) * (t572 + t1081) + (MDP(27) + MDP(29)) * (t573 + t1079); MDP(22) * t1032 + (t1050 - t1082) * MDP(23) + t561 * MDP(24) + (-t573 + t1079) * MDP(25) + t651 * MDP(26) + (-t1077 * t619 + t1034 + t876) * MDP(27) + (t557 * t751 + t619 * t630 - t872) * MDP(28) + (-t592 * t630 + t1034 + 0.2e1 * t1045 - t871) * MDP(29) + (pkin(5) * t572 - qJ(6) * t573 + (t556 - t558) * t1077 + (t555 - t981) * t630) * MDP(30) + (0.2e1 * t1035 - t568 * t630 + t592 * t1077 + (0.2e1 * qJD(6) - t557) * t751 + t872) * MDP(31) + (t541 * qJ(6) - t542 * pkin(5) - t568 * t592 - t555 * t558 - g(1) * (-pkin(5) * t666 + qJ(6) * t667) - g(2) * (-pkin(5) * t662 + qJ(6) * t663) - g(3) * (-pkin(5) * t713 + qJ(6) * t714) + t981 * t556) * MDP(32); t561 * MDP(30) + (-t751 ^ 2 - t1050) * MDP(31) + (-t556 * t751 - t1045 + t871) * MDP(32) + (t1032 - t651) * MDP(29);];
tau  = t1;
