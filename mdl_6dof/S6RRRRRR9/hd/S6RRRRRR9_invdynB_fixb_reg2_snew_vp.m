% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 16:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 16:17:39
% EndTime: 2019-05-08 16:21:43
% DurationCPUTime: 204.60s
% Computational Cost: add. (2493585->1294), mult. (6136412->2167), div. (0->0), fcn. (5257501->16), ass. (0->946)
t1422 = sin(qJ(6));
t1421 = cos(pkin(6));
t1664 = qJD(1) * t1421;
t1410 = qJD(2) + t1664;
t1425 = sin(qJ(3));
t1426 = sin(qJ(2));
t1431 = cos(qJ(3));
t1420 = cos(pkin(7));
t1432 = cos(qJ(2));
t1623 = t1420 * t1432;
t1418 = sin(pkin(7));
t1629 = t1418 * t1425;
t1419 = sin(pkin(6));
t1665 = qJD(1) * t1419;
t1368 = t1410 * t1629 + (t1425 * t1623 + t1426 * t1431) * t1665;
t1625 = t1419 * t1432;
t1607 = qJD(1) * t1625;
t1589 = t1418 * t1607;
t1632 = t1410 * t1420;
t1385 = qJD(3) - t1589 + t1632;
t1424 = sin(qJ(4));
t1430 = cos(qJ(4));
t1347 = t1368 * t1430 + t1385 * t1424;
t1590 = t1420 * t1607;
t1626 = t1419 * t1426;
t1608 = qJD(1) * t1626;
t1628 = t1418 * t1431;
t1366 = -t1410 * t1628 + t1425 * t1608 - t1431 * t1590;
t1361 = qJD(4) + t1366;
t1423 = sin(qJ(5));
t1429 = cos(qJ(5));
t1305 = t1347 * t1423 - t1429 * t1361;
t1307 = t1347 * t1429 + t1361 * t1423;
t1428 = cos(qJ(6));
t1248 = t1428 * t1305 + t1307 * t1422;
t1250 = -t1305 * t1422 + t1307 * t1428;
t1174 = t1250 * t1248;
t1408 = qJD(2) * t1608;
t1613 = qJDD(1) * t1432;
t1582 = t1419 * t1613 - t1408;
t1591 = qJDD(1) * t1421 + qJDD(2);
t1445 = t1418 * t1591 + t1420 * t1582;
t1614 = qJDD(1) * t1426;
t1663 = qJD(1) * t1432;
t1490 = qJD(2) * t1663 + t1614;
t1454 = t1490 * t1419;
t1441 = t1425 * t1445 + t1431 * t1454;
t1322 = -t1366 * qJD(3) + t1441;
t1372 = -t1418 * t1582 + t1420 * t1591 + qJDD(3);
t1596 = t1347 * qJD(4) + t1424 * t1322 - t1430 * t1372;
t1261 = qJDD(5) + t1596;
t1496 = qJDD(6) + t1261;
t1687 = -t1174 + t1496;
t1698 = t1422 * t1687;
t1253 = t1307 * t1305;
t1685 = -t1253 + t1261;
t1697 = t1423 * t1685;
t1345 = t1368 * t1424 - t1430 * t1385;
t1295 = t1347 * t1345;
t1447 = t1425 * t1454 - t1431 * t1445;
t1444 = t1368 * qJD(3) + t1447;
t1321 = qJDD(4) + t1444;
t1684 = -t1295 + t1321;
t1696 = t1424 * t1684;
t1695 = t1428 * t1687;
t1694 = t1429 * t1685;
t1693 = t1430 * t1684;
t1342 = qJD(5) + t1345;
t1270 = t1342 * t1305;
t1595 = t1345 * qJD(4) - t1430 * t1322 - t1424 * t1372;
t1597 = t1305 * qJD(5) - t1423 * t1321 + t1429 * t1595;
t1156 = -t1270 + t1597;
t1409 = t1410 ^ 2;
t1427 = sin(qJ(1));
t1433 = cos(qJ(1));
t1406 = t1427 * g(1) - t1433 * g(2);
t1494 = qJDD(1) * pkin(1) + t1406;
t1467 = t1421 * t1494;
t1407 = g(1) * t1433 + t1427 * g(2);
t1683 = qJD(1) ^ 2;
t1672 = t1683 * pkin(1);
t1489 = t1407 + t1672;
t1557 = t1591 * pkin(2);
t1674 = pkin(10) * t1418;
t1440 = t1409 * t1674 + t1426 * t1489 + t1432 * t1467 + t1557;
t1495 = -pkin(2) * t1432 - t1426 * t1674;
t1487 = t1426 * t1495;
t1673 = pkin(10) * t1420;
t1610 = -pkin(9) - t1673;
t1675 = pkin(9) * t1421;
t1612 = t1432 * t1675;
t1670 = t1432 * g(3);
t1437 = (-t1670 + t1610 * t1614 + ((-t1419 * t1487 + t1612) * qJD(1) + (-qJD(2) + t1410) * pkin(10) * t1623) * qJD(1)) * t1419 + t1440;
t1671 = t1421 * g(3);
t1588 = t1408 * pkin(2) - t1671;
t1416 = t1426 ^ 2;
t1417 = t1432 ^ 2;
t1615 = t1416 + t1417;
t1619 = qJD(2) + t1410;
t1627 = t1418 * t1432;
t1631 = t1410 * t1426;
t1439 = ((-pkin(1) + t1495) * qJDD(1) + (pkin(2) * t1631 - pkin(9) * t1665 + (-t1420 * t1615 * t1665 - t1619 * t1627) * pkin(10)) * qJD(1) - t1406) * t1419 + t1588;
t1692 = t1418 * t1439 + t1420 * t1437;
t1314 = t1361 * t1345;
t1224 = t1595 + t1314;
t1644 = t1347 * t1361;
t1691 = t1596 + t1644;
t1415 = t1419 ^ 2;
t1690 = t1415 * t1426;
t1641 = t1368 * t1366;
t1446 = t1372 - t1641;
t1689 = t1425 * t1446;
t1688 = t1431 * t1446;
t1338 = qJD(6) + t1342;
t1230 = t1338 * t1248;
t1592 = -t1429 * t1321 - t1423 * t1595;
t1184 = -qJD(5) * t1307 - t1592;
t1456 = qJD(6) * t1248 - t1184 * t1422 + t1428 * t1597;
t1686 = -t1230 - t1456;
t1350 = t1385 * t1366;
t1284 = -t1350 + t1322;
t1157 = t1597 + t1270;
t1593 = -t1428 * t1184 - t1422 * t1597;
t1043 = (qJD(6) - t1338) * t1250 + t1593;
t1152 = (qJD(5) - t1342) * t1307 + t1592;
t1246 = t1248 ^ 2;
t1247 = t1250 ^ 2;
t1682 = t1305 ^ 2;
t1303 = t1307 ^ 2;
t1337 = t1338 ^ 2;
t1341 = t1342 ^ 2;
t1343 = t1345 ^ 2;
t1344 = t1347 ^ 2;
t1681 = t1361 ^ 2;
t1362 = t1366 ^ 2;
t1363 = t1368 ^ 2;
t1680 = t1385 ^ 2;
t1679 = pkin(3) * t1425;
t1678 = pkin(3) * t1431;
t1677 = pkin(4) * t1424;
t1676 = pkin(9) * t1419;
t1333 = pkin(3) * t1366 - pkin(11) * t1368;
t1411 = g(3) * t1626;
t1455 = qJDD(1) * t1676 - t1407;
t1622 = t1421 * t1426;
t1292 = t1432 * t1455 + t1426 * t1467 - t1411 - t1409 * pkin(2) + t1445 * pkin(10) + (-pkin(1) * t1663 + (t1631 * t1673 + (pkin(9) * t1622 + t1495 * t1625) * qJD(1)) * t1419) * qJD(1);
t1620 = t1431 * t1292;
t1161 = -t1680 * pkin(3) + t1372 * pkin(11) - t1366 * t1333 + t1425 * t1692 + t1620;
t1638 = t1385 * t1368;
t1435 = -t1418 * t1437 + t1420 * t1439 - t1284 * pkin(11) + (t1444 + t1638) * pkin(3);
t1079 = t1430 * t1161 + t1424 * t1435;
t1293 = pkin(4) * t1345 - pkin(12) * t1347;
t1024 = -pkin(4) * t1681 + pkin(12) * t1321 - t1293 * t1345 + t1079;
t1186 = t1292 * t1425 - t1431 * t1692;
t1160 = -t1372 * pkin(3) - t1680 * pkin(11) + t1333 * t1368 + t1186;
t1066 = pkin(4) * t1691 + pkin(12) * t1224 + t1160;
t969 = t1024 * t1423 - t1429 * t1066;
t920 = t1685 * pkin(5) + pkin(13) * t1156 - t969;
t1267 = pkin(5) * t1342 - pkin(13) * t1307;
t970 = t1429 * t1024 + t1423 * t1066;
t928 = -pkin(5) * t1682 + pkin(13) * t1184 - t1267 * t1342 + t970;
t851 = t1422 * t920 + t1428 * t928;
t1078 = t1161 * t1424 - t1430 * t1435;
t1023 = -t1321 * pkin(4) - t1681 * pkin(12) + t1293 * t1347 + t1078;
t980 = -t1184 * pkin(5) - pkin(13) * t1682 + t1267 * t1307 + t1023;
t1669 = t1422 * t980;
t850 = t1422 * t928 - t1428 * t920;
t797 = t1422 * t851 - t1428 * t850;
t1668 = t1423 * t797;
t1667 = t1428 * t980;
t1666 = t1429 * t797;
t1662 = t1023 * t1423;
t1661 = t1023 * t1429;
t1132 = t1174 + t1496;
t1660 = t1132 * t1422;
t1659 = t1132 * t1428;
t1658 = t1160 * t1424;
t1657 = t1160 * t1430;
t1180 = t1253 + t1261;
t1656 = t1180 * t1423;
t1655 = t1180 * t1429;
t1234 = t1418 * t1440 - t1420 * t1588 + (t1418 * (-pkin(9) * t1614 - t1670) - t1420 * (-pkin(2) * t1613 - t1494) + ((t1418 * t1612 + (-t1418 * t1487 - t1420 * (-t1615 * t1673 - pkin(9))) * t1419) * qJD(1) + (-pkin(2) * t1426 + 0.2e1 * pkin(10) * t1627) * t1632) * qJD(1)) * t1419;
t1654 = t1234 * t1425;
t1653 = t1234 * t1431;
t1244 = t1295 + t1321;
t1652 = t1244 * t1424;
t1651 = t1244 * t1430;
t1309 = -t1372 - t1641;
t1650 = t1309 * t1425;
t1649 = t1309 * t1431;
t1648 = t1338 * t1422;
t1647 = t1338 * t1428;
t1646 = t1342 * t1423;
t1645 = t1342 * t1429;
t1643 = t1361 * t1424;
t1642 = t1361 * t1430;
t1450 = t1676 * t1683 + t1494;
t1379 = t1419 * t1450 + t1671;
t1640 = t1379 * t1426;
t1639 = t1379 * t1432;
t1637 = t1385 * t1431;
t1621 = t1426 * t1683;
t1598 = t1432 * t1621;
t1405 = t1415 * t1598;
t1387 = t1405 + t1591;
t1636 = t1387 * t1426;
t1635 = t1387 * t1432;
t1388 = -t1405 + t1591;
t1634 = t1388 * t1426;
t1633 = t1388 * t1432;
t1630 = t1415 * t1683;
t1624 = t1420 * t1425;
t1618 = qJD(3) + t1385;
t1611 = -pkin(4) * t1430 - pkin(3);
t1609 = t1410 * t1665;
t1606 = t1416 * t1630;
t1605 = t1417 * t1630;
t1604 = t1424 * t1174;
t1603 = t1430 * t1174;
t1602 = t1424 * t1253;
t1601 = t1430 * t1253;
t1600 = t1425 * t1295;
t1599 = t1431 * t1295;
t798 = t1422 * t850 + t1428 * t851;
t1594 = -t1410 + t1664;
t979 = t1078 * t1424 + t1430 * t1079;
t1382 = -t1406 * t1427 - t1433 * t1407;
t1404 = qJDD(1) * t1433 - t1427 * t1683;
t1587 = -pkin(8) * t1404 - g(3) * t1427;
t1386 = -t1606 - t1409;
t1355 = -t1386 * t1426 - t1633;
t1586 = pkin(9) * t1355 - t1640;
t1392 = -t1409 - t1605;
t1359 = t1392 * t1432 - t1636;
t1585 = pkin(9) * t1359 + t1639;
t1320 = -t1680 - t1362;
t1258 = t1320 * t1431 - t1689;
t1584 = pkin(10) * t1258 + t1653;
t1328 = -t1363 - t1680;
t1266 = -t1328 * t1425 + t1649;
t1583 = pkin(10) * t1266 - t1654;
t883 = t1423 * t970 - t1429 * t969;
t884 = t1423 * t969 + t1429 * t970;
t748 = t1429 * t798 - t1668;
t744 = t1424 * t980 + t1430 * t748;
t747 = t1423 * t798 + t1666;
t1581 = t1425 * t744 - t1431 * t747;
t855 = t1023 * t1424 + t1430 * t884;
t1580 = t1425 * t855 - t1431 * t883;
t1128 = -t1246 - t1247;
t1047 = -t1230 + t1456;
t965 = -t1043 * t1422 + t1047 * t1428;
t967 = -t1043 * t1428 - t1047 * t1422;
t882 = -t1423 * t965 + t1429 * t967;
t863 = t1128 * t1424 + t1430 * t882;
t880 = t1423 * t967 + t1429 * t965;
t1579 = t1425 * t863 - t1431 * t880;
t1173 = -t1247 + t1246;
t1042 = (qJD(6) + t1338) * t1250 + t1593;
t964 = -t1042 * t1422 + t1428 * t1686;
t966 = -t1042 * t1428 - t1422 * t1686;
t881 = -t1423 * t964 + t1429 * t966;
t872 = -t1173 * t1424 + t1430 * t881;
t879 = -t1423 * t966 - t1429 * t964;
t1578 = t1425 * t872 + t1431 * t879;
t1169 = -t1337 - t1246;
t1075 = t1169 * t1422 + t1695;
t1076 = t1169 * t1428 - t1698;
t977 = -t1075 * t1423 + t1076 * t1429;
t917 = t1042 * t1424 + t1430 * t977;
t976 = t1075 * t1429 + t1076 * t1423;
t1577 = t1425 * t917 - t1431 * t976;
t1198 = -t1247 - t1337;
t1089 = t1198 * t1428 - t1660;
t1090 = -t1198 * t1422 - t1659;
t991 = -t1089 * t1423 + t1090 * t1429;
t931 = t1424 * t1686 + t1430 * t991;
t990 = t1089 * t1429 + t1090 * t1423;
t1576 = t1425 * t931 - t1431 * t990;
t1087 = -qJD(6) * t1250 - t1593;
t1038 = t1087 * t1428 + t1248 * t1648;
t1039 = -t1087 * t1422 + t1248 * t1647;
t962 = -t1038 * t1423 + t1039 * t1429;
t944 = t1430 * t962 - t1604;
t960 = -t1038 * t1429 - t1039 * t1423;
t1575 = t1425 * t944 + t1431 * t960;
t1040 = t1250 * t1647 - t1422 * t1456;
t1041 = -t1250 * t1648 - t1428 * t1456;
t963 = -t1040 * t1423 + t1041 * t1429;
t945 = t1430 * t963 + t1604;
t961 = -t1040 * t1429 - t1041 * t1423;
t1574 = t1425 * t945 + t1431 * t961;
t743 = t1424 * t748 - t1430 * t980;
t703 = -t1418 * t743 + t1420 * t1581;
t721 = t1425 * t747 + t1431 * t744;
t1573 = t1426 * t721 + t1432 * t703;
t854 = -t1023 * t1430 + t1424 * t884;
t774 = -t1418 * t854 + t1420 * t1580;
t809 = t1425 * t883 + t1431 * t855;
t1572 = t1426 * t809 + t1432 * t774;
t862 = -t1128 * t1430 + t1424 * t882;
t781 = -t1418 * t862 + t1420 * t1579;
t810 = t1425 * t880 + t1431 * t863;
t1571 = t1426 * t810 + t1432 * t781;
t871 = t1173 * t1430 + t1424 * t881;
t784 = -t1418 * t871 + t1420 * t1578;
t811 = -t1425 * t879 + t1431 * t872;
t1570 = t1426 * t811 + t1432 * t784;
t916 = -t1042 * t1430 + t1424 * t977;
t824 = -t1418 * t916 + t1420 * t1577;
t864 = t1425 * t976 + t1431 * t917;
t1569 = t1426 * t864 + t1432 * t824;
t942 = t1424 * t962 + t1603;
t828 = -t1418 * t942 + t1420 * t1575;
t869 = -t1425 * t960 + t1431 * t944;
t1568 = t1426 * t869 + t1432 * t828;
t943 = t1424 * t963 - t1603;
t829 = -t1418 * t943 + t1420 * t1574;
t870 = -t1425 * t961 + t1431 * t945;
t1567 = t1426 * t870 + t1432 * t829;
t930 = t1424 * t991 - t1430 * t1686;
t833 = -t1418 * t930 + t1420 * t1576;
t878 = t1425 * t990 + t1431 * t931;
t1566 = t1426 * t878 + t1432 * t833;
t1229 = -t1247 + t1337;
t1101 = t1229 * t1428 + t1698;
t1103 = -t1229 * t1422 + t1695;
t1001 = -t1101 * t1429 - t1103 * t1423;
t1003 = -t1101 * t1423 + t1103 * t1429;
t938 = t1003 * t1430 - t1047 * t1424;
t1556 = t1001 * t1431 + t1425 * t938;
t936 = t1003 * t1424 + t1047 * t1430;
t838 = -t1418 * t936 + t1420 * t1556;
t888 = -t1001 * t1425 + t1431 * t938;
t1565 = t1426 * t888 + t1432 * t838;
t1228 = t1246 - t1337;
t1102 = t1228 * t1422 + t1659;
t1104 = t1228 * t1428 - t1660;
t1002 = -t1102 * t1429 - t1104 * t1423;
t1004 = -t1102 * t1423 + t1104 * t1429;
t939 = t1004 * t1430 - t1043 * t1424;
t1555 = t1002 * t1431 + t1425 * t939;
t937 = t1004 * t1424 + t1043 * t1430;
t839 = -t1418 * t937 + t1420 * t1555;
t889 = -t1002 * t1425 + t1431 * t939;
t1564 = t1426 * t889 + t1432 * t839;
t1550 = -t1160 * t1431 + t1425 * t979;
t978 = -t1078 * t1430 + t1079 * t1424;
t887 = -t1418 * t978 + t1420 * t1550;
t956 = t1160 * t1425 + t1431 * t979;
t1563 = t1426 * t956 + t1432 * t887;
t1074 = -t1152 * t1429 - t1156 * t1423;
t1211 = t1303 + t1682;
t1018 = t1074 * t1424 + t1211 * t1430;
t1019 = t1074 * t1430 - t1211 * t1424;
t1072 = -t1152 * t1423 + t1156 * t1429;
t1549 = t1019 * t1425 - t1072 * t1431;
t906 = -t1018 * t1418 + t1420 * t1549;
t968 = t1019 * t1431 + t1072 * t1425;
t1562 = t1426 * t968 + t1432 * t906;
t1153 = (-qJD(5) - t1342) * t1307 - t1592;
t1073 = t1153 * t1429 + t1157 * t1423;
t1252 = -t1303 + t1682;
t1031 = t1073 * t1424 + t1252 * t1430;
t1032 = t1073 * t1430 - t1252 * t1424;
t1071 = -t1153 * t1423 + t1157 * t1429;
t1546 = t1032 * t1425 + t1071 * t1431;
t912 = -t1031 * t1418 + t1420 * t1546;
t973 = t1032 * t1431 - t1071 * t1425;
t1561 = t1426 * t973 + t1432 * t912;
t1150 = (-t1248 * t1422 - t1250 * t1428) * t1338;
t1151 = (-t1248 * t1428 + t1250 * t1422) * t1338;
t1068 = -t1150 * t1423 + t1151 * t1429;
t1033 = t1068 * t1424 - t1430 * t1496;
t1034 = t1068 * t1430 + t1424 * t1496;
t1067 = -t1150 * t1429 - t1151 * t1423;
t1545 = t1034 * t1425 + t1067 * t1431;
t914 = -t1033 * t1418 + t1420 * t1545;
t974 = t1034 * t1431 - t1067 * t1425;
t1560 = t1426 * t974 + t1432 * t914;
t1232 = -t1341 - t1682;
t1124 = t1232 * t1429 - t1697;
t1048 = t1124 * t1424 + t1153 * t1430;
t1049 = t1124 * t1430 - t1153 * t1424;
t1123 = t1232 * t1423 + t1694;
t1543 = t1049 * t1425 - t1123 * t1431;
t934 = -t1048 * t1418 + t1420 * t1543;
t992 = t1049 * t1431 + t1123 * t1425;
t1559 = t1426 * t992 + t1432 * t934;
t1238 = -t1303 - t1341;
t1130 = -t1238 * t1423 - t1655;
t1053 = t1130 * t1424 + t1157 * t1430;
t1054 = t1130 * t1430 - t1157 * t1424;
t1129 = t1238 * t1429 - t1656;
t1542 = t1054 * t1425 - t1129 * t1431;
t941 = -t1053 * t1418 + t1420 * t1542;
t998 = t1054 * t1431 + t1129 * t1425;
t1558 = t1426 * t998 + t1432 * t941;
t1269 = -t1303 + t1341;
t1144 = -t1269 * t1423 + t1694;
t1062 = t1144 * t1430 - t1156 * t1424;
t1142 = -t1269 * t1429 - t1697;
t1006 = t1062 * t1431 - t1142 * t1425;
t1060 = t1144 * t1424 + t1156 * t1430;
t1541 = t1062 * t1425 + t1142 * t1431;
t951 = -t1060 * t1418 + t1420 * t1541;
t1554 = t1006 * t1426 + t1432 * t951;
t1268 = -t1341 + t1682;
t1145 = t1268 * t1429 - t1656;
t1063 = t1145 * t1430 - t1152 * t1424;
t1143 = -t1268 * t1423 - t1655;
t1007 = t1063 * t1431 - t1143 * t1425;
t1061 = t1145 * t1424 + t1152 * t1430;
t1540 = t1063 * t1425 + t1143 * t1431;
t952 = -t1061 * t1418 + t1420 * t1540;
t1553 = t1007 * t1426 + t1432 * t952;
t1147 = -t1184 * t1423 + t1305 * t1645;
t1114 = t1147 * t1430 - t1602;
t1146 = -t1184 * t1429 - t1305 * t1646;
t1029 = t1114 * t1431 - t1146 * t1425;
t1112 = t1147 * t1424 + t1601;
t1534 = t1114 * t1425 + t1146 * t1431;
t984 = -t1112 * t1418 + t1420 * t1534;
t1552 = t1029 * t1426 + t1432 * t984;
t1149 = -t1307 * t1646 - t1429 * t1597;
t1115 = t1149 * t1430 + t1602;
t1148 = -t1307 * t1645 + t1423 * t1597;
t1030 = t1115 * t1431 - t1148 * t1425;
t1113 = t1149 * t1424 - t1601;
t1533 = t1115 * t1425 + t1148 * t1431;
t985 = -t1113 * t1418 + t1420 * t1533;
t1551 = t1030 * t1426 + t1432 * t985;
t1200 = (-t1305 * t1429 + t1307 * t1423) * t1342;
t1164 = t1200 * t1424 - t1261 * t1430;
t1165 = t1200 * t1430 + t1261 * t1424;
t1199 = (t1305 * t1423 + t1307 * t1429) * t1342;
t1528 = t1165 * t1425 + t1199 * t1431;
t1021 = -t1164 * t1418 + t1420 * t1528;
t1105 = t1165 * t1431 - t1199 * t1425;
t1548 = t1021 * t1432 + t1105 * t1426;
t1221 = -t1596 + t1644;
t1223 = -t1314 + t1595;
t1139 = t1221 * t1424 + t1223 * t1430;
t1141 = t1221 * t1430 - t1223 * t1424;
t1264 = t1343 + t1344;
t1529 = t1141 * t1425 + t1264 * t1431;
t1028 = -t1139 * t1418 + t1420 * t1529;
t1116 = t1141 * t1431 - t1264 * t1425;
t1547 = t1028 * t1432 + t1116 * t1426;
t1138 = -t1224 * t1430 - t1424 * t1691;
t1140 = t1224 * t1424 - t1430 * t1691;
t1294 = -t1344 + t1343;
t1530 = t1140 * t1425 + t1294 * t1431;
t1037 = -t1138 * t1418 + t1420 * t1530;
t1121 = t1140 * t1431 - t1294 * t1425;
t1544 = t1037 * t1432 + t1121 * t1426;
t1273 = -t1681 - t1343;
t1190 = t1273 * t1424 + t1693;
t1191 = t1273 * t1430 - t1696;
t1524 = t1191 * t1425 - t1431 * t1691;
t1081 = -t1190 * t1418 + t1420 * t1524;
t1126 = t1191 * t1431 + t1425 * t1691;
t1539 = t1081 * t1432 + t1126 * t1426;
t1448 = t1421 * t1450;
t1464 = t1410 * t1418 + t1590;
t1451 = t1464 * qJD(1);
t1187 = t1620 + (t1420 * (-g(3) * t1625 + t1432 * t1448 + t1557) + t1418 * (-pkin(2) * t1582 - t1379) + (t1420 * (-qJD(2) * t1590 + t1410 * t1464) + t1418 * (-qJD(2) * t1589 - t1451 * t1625)) * pkin(10) + (t1420 * t1489 + (pkin(2) * t1451 + (-pkin(10) * t1418 ^ 2 + t1420 * t1610) * qJDD(1)) * t1419) * t1426) * t1425;
t1525 = -t1186 * t1431 + t1187 * t1425;
t1084 = t1234 * t1418 + t1420 * t1525;
t1111 = t1186 * t1425 + t1187 * t1431;
t1538 = t1084 * t1432 + t1111 * t1426;
t1289 = -t1344 - t1681;
t1194 = t1289 * t1430 - t1652;
t1195 = -t1289 * t1424 - t1651;
t1522 = t1195 * t1425 + t1224 * t1431;
t1086 = -t1194 * t1418 + t1420 * t1522;
t1127 = t1195 * t1431 - t1224 * t1425;
t1537 = t1086 * t1432 + t1127 * t1426;
t1313 = -t1344 + t1681;
t1203 = t1313 * t1430 + t1696;
t1205 = -t1313 * t1424 + t1693;
t1519 = t1205 * t1425 + t1223 * t1431;
t1094 = -t1203 * t1418 + t1420 * t1519;
t1136 = t1205 * t1431 - t1223 * t1425;
t1536 = t1094 * t1432 + t1136 * t1426;
t1312 = t1343 - t1681;
t1204 = t1312 * t1424 + t1651;
t1206 = t1312 * t1430 - t1652;
t1518 = t1206 * t1425 - t1221 * t1431;
t1095 = -t1204 * t1418 + t1420 * t1518;
t1137 = t1206 * t1431 + t1221 * t1425;
t1535 = t1095 * t1432 + t1137 * t1426;
t1215 = t1345 * t1643 - t1430 * t1596;
t1216 = t1345 * t1642 + t1424 * t1596;
t1493 = t1216 * t1425 + t1599;
t1119 = -t1215 * t1418 + t1420 * t1493;
t1175 = t1216 * t1431 - t1600;
t1532 = t1119 * t1432 + t1175 * t1426;
t1217 = t1347 * t1642 - t1424 * t1595;
t1218 = -t1347 * t1643 - t1430 * t1595;
t1492 = t1218 * t1425 - t1599;
t1120 = -t1217 * t1418 + t1420 * t1492;
t1176 = t1218 * t1431 + t1600;
t1531 = t1120 * t1432 + t1176 * t1426;
t1254 = (-t1345 * t1424 - t1347 * t1430) * t1361;
t1255 = (-t1345 * t1430 + t1347 * t1424) * t1361;
t1513 = t1255 * t1425 - t1321 * t1431;
t1168 = -t1254 * t1418 + t1420 * t1513;
t1212 = t1255 * t1431 + t1321 * t1425;
t1527 = t1168 * t1432 + t1212 * t1426;
t1304 = -t1362 - t1363;
t1285 = t1350 + t1322;
t1442 = (-qJD(3) + t1385) * t1368 - t1447;
t1510 = -t1285 * t1431 + t1425 * t1442;
t1178 = -t1304 * t1418 + t1420 * t1510;
t1214 = t1285 * t1425 + t1431 * t1442;
t1526 = t1178 * t1432 + t1214 * t1426;
t1334 = t1363 - t1362;
t1280 = t1368 * t1618 + t1447;
t1511 = -t1280 * t1425 + t1284 * t1431;
t1193 = -t1334 * t1418 + t1420 * t1511;
t1213 = -t1280 * t1431 - t1284 * t1425;
t1523 = t1193 * t1432 + t1213 * t1426;
t1506 = t1320 * t1425 + t1688;
t1197 = -t1280 * t1418 + t1420 * t1506;
t1521 = t1197 * t1432 + t1258 * t1426;
t1283 = -t1366 * t1618 + t1441;
t1509 = t1328 * t1431 + t1650;
t1202 = -t1283 * t1418 + t1420 * t1509;
t1520 = t1202 * t1432 + t1266 * t1426;
t1349 = -t1363 + t1680;
t1507 = t1349 * t1431 + t1689;
t1209 = -t1285 * t1418 + t1420 * t1507;
t1271 = -t1349 * t1425 + t1688;
t1517 = t1209 * t1432 + t1271 * t1426;
t1348 = t1362 - t1680;
t1508 = t1348 * t1425 - t1649;
t1210 = -t1418 * t1442 + t1420 * t1508;
t1272 = t1348 * t1431 + t1650;
t1516 = t1210 * t1432 + t1272 * t1426;
t1443 = t1431 * t1444;
t1240 = -t1420 * t1443 + (t1368 * t1418 + t1385 * t1624) * t1366;
t1278 = t1366 * t1637 + t1425 * t1444;
t1515 = t1240 * t1432 + t1278 * t1426;
t1242 = t1322 * t1624 + (-t1366 * t1418 + t1420 * t1637) * t1368;
t1279 = t1322 * t1431 - t1425 * t1638;
t1514 = t1242 * t1432 + t1279 * t1426;
t1488 = t1385 * (-t1366 * t1425 - t1368 * t1431);
t1277 = -t1372 * t1418 + t1420 * t1488;
t1299 = (-t1366 * t1431 + t1368 * t1425) * t1385;
t1512 = t1277 * t1432 + t1299 * t1426;
t1449 = t1455 - t1672;
t1353 = t1426 * t1449 + (t1419 * g(3) - t1448) * t1432;
t1354 = t1426 * t1448 + t1432 * t1449 - t1411;
t1505 = -t1353 * t1432 + t1354 * t1426;
t1308 = t1353 * t1426 + t1354 * t1432;
t1396 = t1410 * t1607;
t1374 = t1396 + t1454;
t1395 = t1410 * t1608;
t1377 = -t1395 + t1582;
t1504 = t1374 * t1432 + t1377 * t1426;
t1375 = -t1396 + t1454;
t1376 = t1395 + t1582;
t1503 = -t1375 * t1432 + t1376 * t1426;
t1502 = t1386 * t1432 - t1634;
t1390 = t1409 - t1606;
t1501 = t1390 * t1432 + t1636;
t1500 = t1392 * t1426 + t1635;
t1391 = -t1409 + t1605;
t1499 = t1391 * t1426 + t1633;
t1381 = t1406 * t1433 - t1427 * t1407;
t1497 = t1419 * t1591;
t786 = -pkin(5) * t980 + pkin(13) * t798;
t722 = -pkin(12) * t747 - pkin(13) * t1666 - t1423 * t786;
t734 = -pkin(4) * t747 - pkin(5) * t797;
t699 = -pkin(11) * t743 - t1424 * t734 + t1430 * t722;
t701 = -pkin(3) * t743 + pkin(4) * t980 - pkin(12) * t748 + pkin(13) * t1668 - t1429 * t786;
t1475 = pkin(10) * t721 + t1425 * t699 + t1431 * t701;
t696 = -pkin(3) * t747 + pkin(11) * t744 + t1424 * t722 + t1430 * t734;
t702 = t1418 * t1581 + t1420 * t743;
t681 = -pkin(2) * t702 - t1418 * t696 + t1420 * t1475;
t683 = -t1425 * t701 + t1431 * t699 + (-t1418 * t702 - t1420 * t703) * pkin(10);
t697 = -t1426 * t703 + t1432 * t721;
t1486 = pkin(9) * t697 + t1426 * t683 + t1432 * t681;
t778 = -pkin(5) * t1128 + pkin(13) * t967 + t798;
t785 = -pkin(13) * t965 - t797;
t737 = -pkin(12) * t880 - t1423 * t778 + t1429 * t785;
t844 = -pkin(4) * t880 - pkin(5) * t965;
t727 = -pkin(11) * t862 - t1424 * t844 + t1430 * t737;
t730 = -pkin(3) * t862 + pkin(4) * t1128 - pkin(12) * t882 - t1423 * t785 - t1429 * t778;
t1474 = pkin(10) * t810 + t1425 * t727 + t1431 * t730;
t720 = -pkin(3) * t880 + pkin(11) * t863 + t1424 * t737 + t1430 * t844;
t780 = t1418 * t1579 + t1420 * t862;
t694 = -pkin(2) * t780 - t1418 * t720 + t1420 * t1474;
t698 = -t1425 * t730 + t1431 * t727 + (-t1418 * t780 - t1420 * t781) * pkin(10);
t746 = -t1426 * t781 + t1432 * t810;
t1485 = pkin(9) * t746 + t1426 * t698 + t1432 * t694;
t779 = -pkin(11) * t854 + (-pkin(12) * t1430 + t1677) * t883;
t802 = -pkin(3) * t854 + pkin(4) * t1023 - pkin(12) * t884;
t1471 = pkin(10) * t809 + t1425 * t779 + t1431 * t802;
t765 = pkin(11) * t855 + (-pkin(12) * t1424 + t1611) * t883;
t773 = t1418 * t1580 + t1420 * t854;
t705 = -pkin(2) * t773 - t1418 * t765 + t1420 * t1471;
t717 = -t1425 * t802 + t1431 * t779 + (-t1418 * t773 - t1420 * t774) * pkin(10);
t742 = -t1426 * t774 + t1432 * t809;
t1484 = pkin(9) * t742 + t1426 * t717 + t1432 * t705;
t815 = -pkin(4) * t976 - pkin(5) * t1075 + t850;
t895 = -pkin(5) * t1042 + pkin(13) * t1076 - t1667;
t926 = -pkin(13) * t1075 + t1669;
t816 = -pkin(12) * t976 - t1423 * t895 + t1429 * t926;
t755 = -pkin(11) * t916 - t1424 * t815 + t1430 * t816;
t792 = -pkin(3) * t916 + pkin(4) * t1042 - pkin(12) * t977 - t1423 * t926 - t1429 * t895;
t1473 = pkin(10) * t864 + t1425 * t755 + t1431 * t792;
t750 = -pkin(3) * t976 + pkin(11) * t917 + t1424 * t816 + t1430 * t815;
t823 = t1418 * t1577 + t1420 * t916;
t707 = -pkin(2) * t823 - t1418 * t750 + t1420 * t1473;
t719 = -t1425 * t792 + t1431 * t755 + (-t1418 * t823 - t1420 * t824) * pkin(10);
t788 = -t1426 * t824 + t1432 * t864;
t1483 = pkin(9) * t788 + t1426 * t719 + t1432 * t707;
t821 = -pkin(4) * t990 - pkin(5) * t1089 + t851;
t901 = -pkin(5) * t1686 + pkin(13) * t1090 + t1669;
t935 = -pkin(13) * t1089 + t1667;
t822 = -pkin(12) * t990 - t1423 * t901 + t1429 * t935;
t760 = -pkin(11) * t930 - t1424 * t821 + t1430 * t822;
t796 = -pkin(3) * t930 + pkin(4) * t1686 - pkin(12) * t991 - t1423 * t935 - t1429 * t901;
t1472 = pkin(10) * t878 + t1425 * t760 + t1431 * t796;
t752 = -pkin(3) * t990 + pkin(11) * t931 + t1424 * t822 + t1430 * t821;
t832 = t1418 * t1576 + t1420 * t930;
t713 = -pkin(2) * t832 - t1418 * t752 + t1420 * t1472;
t726 = -t1425 * t796 + t1431 * t760 + (-t1418 * t832 - t1420 * t833) * pkin(10);
t799 = -t1426 * t833 + t1432 * t878;
t1482 = pkin(9) * t799 + t1426 * t726 + t1432 * t713;
t860 = -pkin(12) * t1072 - t883;
t825 = -pkin(11) * t1018 + t1072 * t1677 + t1430 * t860;
t840 = -pkin(3) * t1018 - pkin(4) * t1211 - pkin(12) * t1074 - t884;
t1470 = pkin(10) * t968 + t1425 * t825 + t1431 * t840;
t819 = pkin(11) * t1019 + t1072 * t1611 + t1424 * t860;
t905 = t1018 * t1420 + t1418 * t1549;
t741 = -pkin(2) * t905 - t1418 * t819 + t1420 * t1470;
t751 = -t1425 * t840 + t1431 * t825 + (-t1418 * t905 - t1420 * t906) * pkin(10);
t852 = -t1426 * t906 + t1432 * t968;
t1481 = pkin(9) * t852 + t1426 * t751 + t1432 * t741;
t929 = -pkin(4) * t1123 + t969;
t987 = -pkin(12) * t1123 + t1662;
t853 = -pkin(11) * t1048 - t1424 * t929 + t1430 * t987;
t908 = -pkin(3) * t1048 - pkin(4) * t1153 - pkin(12) * t1124 + t1661;
t1469 = pkin(10) * t992 + t1425 * t853 + t1431 * t908;
t847 = -pkin(3) * t1123 + pkin(11) * t1049 + t1424 * t987 + t1430 * t929;
t933 = t1048 * t1420 + t1418 * t1543;
t759 = -pkin(2) * t933 - t1418 * t847 + t1420 * t1469;
t777 = -t1425 * t908 + t1431 * t853 + (-t1418 * t933 - t1420 * t934) * pkin(10);
t885 = -t1426 * t934 + t1432 * t992;
t1480 = pkin(9) * t885 + t1426 * t777 + t1432 * t759;
t932 = -pkin(4) * t1129 + t970;
t988 = -pkin(12) * t1129 + t1661;
t857 = -pkin(11) * t1053 - t1424 * t932 + t1430 * t988;
t910 = -pkin(3) * t1053 - pkin(4) * t1157 - pkin(12) * t1130 - t1662;
t1468 = pkin(10) * t998 + t1425 * t857 + t1431 * t910;
t848 = -pkin(3) * t1129 + pkin(11) * t1054 + t1424 * t988 + t1430 * t932;
t940 = t1053 * t1420 + t1418 * t1542;
t762 = -pkin(2) * t940 - t1418 * t848 + t1420 * t1468;
t782 = -t1425 * t910 + t1431 * t857 + (-t1418 * t940 - t1420 * t941) * pkin(10);
t890 = -t1426 * t941 + t1432 * t998;
t1479 = pkin(9) * t890 + t1426 * t782 + t1432 * t762;
t1452 = pkin(10) * t956 + (-pkin(11) * t1425 - t1678) * t978;
t886 = t1418 * t1550 + t1420 * t978;
t957 = -pkin(3) * t1160 + pkin(11) * t979;
t791 = -pkin(2) * t886 - t1418 * t957 + t1420 * t1452;
t793 = (-pkin(11) * t1431 + t1679) * t978 + (-t1418 * t886 - t1420 * t887) * pkin(10);
t843 = -t1426 * t887 + t1432 * t956;
t1478 = pkin(9) * t843 + t1426 * t793 + t1432 * t791;
t1027 = t1139 * t1420 + t1418 * t1529;
t955 = -pkin(11) * t1139 - t978;
t1453 = pkin(10) * t1116 - t1139 * t1678 + t1425 * t955;
t946 = pkin(3) * t1264 + pkin(11) * t1141 + t979;
t831 = -pkin(2) * t1027 - t1418 * t946 + t1420 * t1453;
t861 = t1139 * t1679 + t1431 * t955 + (-t1027 * t1418 - t1028 * t1420) * pkin(10);
t981 = -t1028 * t1426 + t1116 * t1432;
t1477 = pkin(9) * t981 + t1426 * t861 + t1432 * t831;
t1083 = -t1234 * t1420 + t1418 * t1525;
t986 = (-t1083 * t1418 - t1084 * t1420) * pkin(10);
t995 = -t1084 * t1426 + t1111 * t1432;
t996 = -pkin(2) * t1083 + t1111 * t1673;
t1476 = pkin(9) * t995 + t1426 * t986 + t1432 * t996;
t1005 = -t1081 * t1426 + t1126 * t1432;
t1050 = -pkin(3) * t1691 + pkin(11) * t1191 - t1657;
t1080 = t1190 * t1420 + t1418 * t1524;
t1014 = -pkin(3) * t1190 + t1078;
t1097 = -pkin(11) * t1190 + t1658;
t1459 = pkin(10) * t1126 + t1014 * t1431 + t1097 * t1425;
t874 = -pkin(2) * t1080 - t1050 * t1418 + t1420 * t1459;
t900 = -t1014 * t1425 + t1097 * t1431 + (-t1080 * t1418 - t1081 * t1420) * pkin(10);
t1466 = pkin(9) * t1005 + t1426 * t900 + t1432 * t874;
t1008 = -t1086 * t1426 + t1127 * t1432;
t1055 = pkin(3) * t1224 + pkin(11) * t1195 + t1658;
t1085 = t1194 * t1420 + t1418 * t1522;
t1017 = -pkin(3) * t1194 + t1079;
t1100 = -pkin(11) * t1194 + t1657;
t1458 = pkin(10) * t1127 + t1017 * t1431 + t1100 * t1425;
t877 = -pkin(2) * t1085 - t1055 * t1418 + t1420 * t1458;
t902 = -t1017 * t1425 + t1100 * t1431 + (-t1085 * t1418 - t1086 * t1420) * pkin(10);
t1465 = pkin(9) * t1008 + t1426 * t902 + t1432 * t877;
t1177 = t1304 * t1420 + t1418 * t1510;
t1009 = (-t1177 * t1418 - t1178 * t1420) * pkin(10) - t1525;
t1457 = pkin(10) * t1214 + t1111;
t1013 = -pkin(2) * t1177 + t1420 * t1457;
t1122 = -t1178 * t1426 + t1214 * t1432;
t1463 = pkin(9) * t1122 + t1009 * t1426 + t1013 * t1432;
t1196 = t1280 * t1420 + t1418 * t1506;
t1052 = -pkin(2) * t1196 + t1186 * t1418 + t1420 * t1584;
t1091 = -t1654 + (-t1196 * t1418 - t1197 * t1420) * pkin(10);
t1159 = -t1197 * t1426 + t1258 * t1432;
t1462 = pkin(9) * t1159 + t1052 * t1432 + t1091 * t1426;
t1201 = t1283 * t1420 + t1418 * t1509;
t1057 = -pkin(2) * t1201 + t1187 * t1418 + t1420 * t1583;
t1096 = -t1653 + (-t1201 * t1418 - t1202 * t1420) * pkin(10);
t1166 = -t1202 * t1426 + t1266 * t1432;
t1461 = pkin(9) * t1166 + t1057 * t1432 + t1096 * t1426;
t1335 = t1375 * t1426 + t1376 * t1432;
t1460 = pkin(9) * t1335 + t1308;
t1373 = (t1619 * t1663 + t1614) * t1419;
t1414 = t1419 * t1415;
t1403 = t1427 * qJDD(1) + t1433 * t1683;
t1394 = t1615 * t1630;
t1393 = (t1416 - t1417) * t1630;
t1389 = -pkin(8) * t1403 + g(3) * t1433;
t1378 = t1615 * t1609;
t1370 = (-t1416 * t1410 * qJD(1) + t1432 * t1490) * t1419;
t1369 = -t1417 * t1609 - t1426 * t1582;
t1358 = t1391 * t1432 - t1634;
t1357 = -t1390 * t1426 + t1635;
t1352 = t1373 * t1622 + t1414 * t1598;
t1351 = (-t1414 * t1621 + (-t1408 + (-qJD(1) * t1631 + t1613) * t1419) * t1421) * t1432;
t1336 = -t1374 * t1426 + t1377 * t1432;
t1332 = t1377 * t1419 + t1421 * t1500;
t1331 = -t1376 * t1419 + t1421 * t1499;
t1330 = -t1375 * t1419 + t1421 * t1501;
t1329 = -t1377 * t1421 + t1419 * t1500;
t1327 = -t1373 * t1419 + t1421 * t1502;
t1326 = t1373 * t1421 + t1419 * t1502;
t1325 = -t1393 * t1419 + t1421 * t1504;
t1324 = t1394 * t1419 + t1421 * t1503;
t1323 = -t1394 * t1421 + t1419 * t1503;
t1298 = -t1427 * t1332 + t1359 * t1433;
t1297 = t1332 * t1433 + t1427 * t1359;
t1291 = -t1427 * t1327 + t1355 * t1433;
t1290 = t1327 * t1433 + t1427 * t1355;
t1287 = t1379 * t1419 + t1421 * t1505;
t1286 = -t1379 * t1421 + t1419 * t1505;
t1276 = t1372 * t1420 + t1418 * t1488;
t1275 = -t1427 * t1324 + t1335 * t1433;
t1274 = t1324 * t1433 + t1427 * t1335;
t1265 = -t1640 + (-t1329 * t1419 - t1332 * t1421) * pkin(9);
t1257 = -t1639 + (-t1326 * t1419 - t1327 * t1421) * pkin(9);
t1256 = -pkin(1) * t1329 + t1353 * t1419 + t1421 * t1585;
t1251 = -pkin(1) * t1326 + t1354 * t1419 + t1421 * t1586;
t1241 = t1322 * t1629 + (t1366 * t1420 + t1385 * t1628) * t1368;
t1239 = -t1418 * t1443 + (-t1368 * t1420 + t1385 * t1629) * t1366;
t1237 = -pkin(1) * t1286 + t1308 * t1675;
t1236 = -t1427 * t1287 + t1308 * t1433;
t1235 = t1287 * t1433 + t1427 * t1308;
t1233 = -pkin(1) * t1323 + t1421 * t1460;
t1227 = -t1277 * t1426 + t1299 * t1432;
t1226 = (-t1286 * t1419 - t1287 * t1421) * pkin(9);
t1225 = (-t1323 * t1419 - t1324 * t1421) * pkin(9) - t1505;
t1208 = t1418 * t1508 + t1420 * t1442;
t1207 = t1285 * t1420 + t1418 * t1507;
t1192 = t1334 * t1420 + t1418 * t1511;
t1189 = -t1242 * t1426 + t1279 * t1432;
t1188 = -t1240 * t1426 + t1278 * t1432;
t1172 = -t1276 * t1419 + t1421 * t1512;
t1171 = -t1210 * t1426 + t1272 * t1432;
t1170 = -t1209 * t1426 + t1271 * t1432;
t1167 = t1254 * t1420 + t1418 * t1513;
t1135 = -t1241 * t1419 + t1421 * t1514;
t1134 = -t1239 * t1419 + t1421 * t1515;
t1125 = -t1193 * t1426 + t1213 * t1432;
t1118 = t1217 * t1420 + t1418 * t1492;
t1117 = t1215 * t1420 + t1418 * t1493;
t1110 = -t1168 * t1426 + t1212 * t1432;
t1109 = -t1208 * t1419 + t1421 * t1516;
t1108 = -t1207 * t1419 + t1421 * t1517;
t1107 = -t1201 * t1419 + t1421 * t1520;
t1106 = t1201 * t1421 + t1419 * t1520;
t1099 = -t1196 * t1419 + t1421 * t1521;
t1098 = t1196 * t1421 + t1419 * t1521;
t1093 = t1204 * t1420 + t1418 * t1518;
t1092 = t1203 * t1420 + t1418 * t1519;
t1082 = -t1192 * t1419 + t1421 * t1523;
t1070 = -t1177 * t1419 + t1421 * t1526;
t1069 = t1177 * t1421 + t1419 * t1526;
t1059 = -t1120 * t1426 + t1176 * t1432;
t1058 = -t1119 * t1426 + t1175 * t1432;
t1056 = pkin(2) * t1202 - t1187 * t1420 + t1418 * t1583;
t1051 = pkin(2) * t1197 - t1186 * t1420 + t1418 * t1584;
t1036 = t1138 * t1420 + t1418 * t1530;
t1035 = -t1167 * t1419 + t1421 * t1527;
t1026 = -t1427 * t1107 + t1166 * t1433;
t1025 = t1107 * t1433 + t1427 * t1166;
t1020 = t1164 * t1420 + t1418 * t1528;
t1016 = -t1427 * t1099 + t1159 * t1433;
t1015 = t1099 * t1433 + t1427 * t1159;
t1012 = pkin(2) * t1178 + t1418 * t1457;
t1011 = -t1095 * t1426 + t1137 * t1432;
t1010 = -t1094 * t1426 + t1136 * t1432;
t1000 = -t1427 * t1070 + t1122 * t1433;
t999 = t1070 * t1433 + t1427 * t1122;
t997 = pkin(2) * t1084 + t1111 * t1674;
t994 = -t1118 * t1419 + t1421 * t1531;
t993 = -t1117 * t1419 + t1421 * t1532;
t989 = -t1037 * t1426 + t1121 * t1432;
t983 = t1113 * t1420 + t1418 * t1533;
t982 = t1112 * t1420 + t1418 * t1534;
t975 = -t1021 * t1426 + t1105 * t1432;
t972 = -t1093 * t1419 + t1421 * t1535;
t971 = -t1092 * t1419 + t1421 * t1536;
t959 = -t1085 * t1419 + t1421 * t1537;
t958 = t1085 * t1421 + t1419 * t1537;
t954 = -t1080 * t1419 + t1421 * t1539;
t953 = t1080 * t1421 + t1419 * t1539;
t950 = t1061 * t1420 + t1418 * t1540;
t949 = t1060 * t1420 + t1418 * t1541;
t948 = -t1083 * t1419 + t1421 * t1538;
t947 = t1083 * t1421 + t1419 * t1538;
t925 = -t1036 * t1419 + t1421 * t1544;
t924 = t1030 * t1432 - t1426 * t985;
t923 = t1029 * t1432 - t1426 * t984;
t922 = -t1027 * t1419 + t1421 * t1547;
t921 = t1027 * t1421 + t1419 * t1547;
t915 = -t1020 * t1419 + t1421 * t1548;
t913 = t1033 * t1420 + t1418 * t1545;
t911 = t1031 * t1420 + t1418 * t1546;
t909 = -t1057 * t1426 + t1096 * t1432 + (-t1106 * t1419 - t1107 * t1421) * pkin(9);
t907 = -t1052 * t1426 + t1091 * t1432 + (-t1098 * t1419 - t1099 * t1421) * pkin(9);
t904 = t1008 * t1433 - t1427 * t959;
t903 = t1427 * t1008 + t1433 * t959;
t899 = t1005 * t1433 - t1427 * t954;
t898 = t1427 * t1005 + t1433 * t954;
t897 = t1007 * t1432 - t1426 * t952;
t896 = t1006 * t1432 - t1426 * t951;
t894 = -pkin(1) * t1106 - t1056 * t1419 + t1421 * t1461;
t893 = -t1427 * t948 + t1433 * t995;
t892 = t1427 * t995 + t1433 * t948;
t891 = -pkin(1) * t1098 - t1051 * t1419 + t1421 * t1462;
t876 = pkin(2) * t1086 + t1055 * t1420 + t1418 * t1458;
t875 = t1009 * t1432 - t1013 * t1426 + (-t1069 * t1419 - t1070 * t1421) * pkin(9);
t873 = pkin(2) * t1081 + t1050 * t1420 + t1418 * t1459;
t868 = -t1419 * t983 + t1421 * t1551;
t867 = -t1419 * t982 + t1421 * t1552;
t866 = -t1427 * t922 + t1433 * t981;
t865 = t1427 * t981 + t1433 * t922;
t859 = -t1426 * t914 + t1432 * t974;
t858 = -t1426 * t912 + t1432 * t973;
t856 = -pkin(1) * t1069 - t1012 * t1419 + t1421 * t1463;
t846 = -t1419 * t950 + t1421 * t1553;
t845 = -t1419 * t949 + t1421 * t1554;
t842 = -t1419 * t940 + t1421 * t1558;
t841 = t1419 * t1558 + t1421 * t940;
t837 = t1418 * t1555 + t1420 * t937;
t836 = t1418 * t1556 + t1420 * t936;
t835 = -t1419 * t933 + t1421 * t1559;
t834 = t1419 * t1559 + t1421 * t933;
t830 = pkin(2) * t1028 + t1418 * t1453 + t1420 * t946;
t827 = t1418 * t1574 + t1420 * t943;
t826 = t1418 * t1575 + t1420 * t942;
t820 = -t1426 * t996 + t1432 * t986 + (-t1419 * t947 - t1421 * t948) * pkin(9);
t818 = -t1419 * t913 + t1421 * t1560;
t817 = -t1419 * t911 + t1421 * t1561;
t814 = -pkin(1) * t947 - t1419 * t997 + t1421 * t1476;
t813 = -t1419 * t905 + t1421 * t1562;
t812 = t1419 * t1562 + t1421 * t905;
t808 = -t1419 * t886 + t1421 * t1563;
t807 = t1419 * t1563 + t1421 * t886;
t806 = -t1427 * t842 + t1433 * t890;
t805 = t1427 * t890 + t1433 * t842;
t804 = -t1426 * t839 + t1432 * t889;
t803 = -t1426 * t838 + t1432 * t888;
t801 = -t1427 * t835 + t1433 * t885;
t800 = t1427 * t885 + t1433 * t835;
t795 = -t1426 * t829 + t1432 * t870;
t794 = -t1426 * t828 + t1432 * t869;
t790 = pkin(2) * t887 + t1418 * t1452 + t1420 * t957;
t789 = -t1426 * t877 + t1432 * t902 + (-t1419 * t958 - t1421 * t959) * pkin(9);
t787 = -t1426 * t874 + t1432 * t900 + (-t1419 * t953 - t1421 * t954) * pkin(9);
t783 = t1418 * t1578 + t1420 * t871;
t776 = -t1427 * t813 + t1433 * t852;
t775 = t1427 * t852 + t1433 * t813;
t772 = -pkin(1) * t958 - t1419 * t876 + t1421 * t1465;
t771 = -pkin(1) * t953 - t1419 * t873 + t1421 * t1466;
t770 = -t1427 * t808 + t1433 * t843;
t769 = t1427 * t843 + t1433 * t808;
t768 = -t1419 * t837 + t1421 * t1564;
t767 = -t1419 * t836 + t1421 * t1565;
t766 = -t1426 * t831 + t1432 * t861 + (-t1419 * t921 - t1421 * t922) * pkin(9);
t764 = -t1419 * t832 + t1421 * t1566;
t763 = t1419 * t1566 + t1421 * t832;
t761 = pkin(2) * t941 + t1418 * t1468 + t1420 * t848;
t758 = pkin(2) * t934 + t1418 * t1469 + t1420 * t847;
t757 = -t1419 * t827 + t1421 * t1567;
t756 = -t1419 * t826 + t1421 * t1568;
t754 = -t1419 * t823 + t1421 * t1569;
t753 = t1419 * t1569 + t1421 * t823;
t749 = -t1426 * t784 + t1432 * t811;
t745 = -pkin(1) * t921 - t1419 * t830 + t1421 * t1477;
t740 = pkin(2) * t906 + t1418 * t1470 + t1420 * t819;
t739 = -t1427 * t764 + t1433 * t799;
t738 = t1427 * t799 + t1433 * t764;
t736 = -t1427 * t754 + t1433 * t788;
t735 = t1427 * t788 + t1433 * t754;
t733 = -t1419 * t783 + t1421 * t1570;
t732 = -t1419 * t780 + t1421 * t1571;
t731 = t1419 * t1571 + t1421 * t780;
t729 = -t1419 * t773 + t1421 * t1572;
t728 = t1419 * t1572 + t1421 * t773;
t725 = -t1426 * t762 + t1432 * t782 + (-t1419 * t841 - t1421 * t842) * pkin(9);
t724 = -t1426 * t791 + t1432 * t793 + (-t1419 * t807 - t1421 * t808) * pkin(9);
t723 = -t1426 * t759 + t1432 * t777 + (-t1419 * t834 - t1421 * t835) * pkin(9);
t718 = -pkin(1) * t807 - t1419 * t790 + t1421 * t1478;
t716 = -t1427 * t732 + t1433 * t746;
t715 = t1427 * t746 + t1433 * t732;
t714 = -pkin(1) * t841 - t1419 * t761 + t1421 * t1479;
t712 = pkin(2) * t833 + t1418 * t1472 + t1420 * t752;
t711 = -pkin(1) * t834 - t1419 * t758 + t1421 * t1480;
t710 = -t1427 * t729 + t1433 * t742;
t709 = t1427 * t742 + t1433 * t729;
t708 = -t1426 * t741 + t1432 * t751 + (-t1419 * t812 - t1421 * t813) * pkin(9);
t706 = pkin(2) * t824 + t1418 * t1473 + t1420 * t750;
t704 = pkin(2) * t774 + t1418 * t1471 + t1420 * t765;
t700 = -pkin(1) * t812 - t1419 * t740 + t1421 * t1481;
t695 = -t1426 * t713 + t1432 * t726 + (-t1419 * t763 - t1421 * t764) * pkin(9);
t693 = pkin(2) * t781 + t1418 * t1474 + t1420 * t720;
t692 = -t1426 * t707 + t1432 * t719 + (-t1419 * t753 - t1421 * t754) * pkin(9);
t691 = -t1419 * t702 + t1421 * t1573;
t690 = t1419 * t1573 + t1421 * t702;
t689 = -pkin(1) * t763 - t1419 * t712 + t1421 * t1482;
t688 = -t1426 * t705 + t1432 * t717 + (-t1419 * t728 - t1421 * t729) * pkin(9);
t687 = -pkin(1) * t753 - t1419 * t706 + t1421 * t1483;
t686 = -pkin(1) * t728 - t1419 * t704 + t1421 * t1484;
t685 = -t1427 * t691 + t1433 * t697;
t684 = t1427 * t697 + t1433 * t691;
t682 = -t1426 * t694 + t1432 * t698 + (-t1419 * t731 - t1421 * t732) * pkin(9);
t680 = pkin(2) * t703 + t1418 * t1475 + t1420 * t696;
t679 = -pkin(1) * t731 - t1419 * t693 + t1421 * t1485;
t678 = -t1426 * t681 + t1432 * t683 + (-t1419 * t690 - t1421 * t691) * pkin(9);
t677 = -pkin(1) * t690 - t1419 * t680 + t1421 * t1486;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1403, -t1404, 0, t1382, 0, 0, 0, 0, 0, 0, t1298, t1291, t1275, t1236, 0, 0, 0, 0, 0, 0, t1016, t1026, t1000, t893, 0, 0, 0, 0, 0, 0, t899, t904, t866, t770, 0, 0, 0, 0, 0, 0, t801, t806, t776, t710, 0, 0, 0, 0, 0, 0, t736, t739, t716, t685; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1404, -t1403, 0, t1381, 0, 0, 0, 0, 0, 0, t1297, t1290, t1274, t1235, 0, 0, 0, 0, 0, 0, t1015, t1025, t999, t892, 0, 0, 0, 0, 0, 0, t898, t903, t865, t769, 0, 0, 0, 0, 0, 0, t800, t805, t775, t709, 0, 0, 0, 0, 0, 0, t735, t738, t715, t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1329, t1326, t1323, t1286, 0, 0, 0, 0, 0, 0, t1098, t1106, t1069, t947, 0, 0, 0, 0, 0, 0, t953, t958, t921, t807, 0, 0, 0, 0, 0, 0, t834, t841, t812, t728, 0, 0, 0, 0, 0, 0, t753, t763, t731, t690; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1404, 0, -t1403, 0, t1587, -t1389, -t1381, -pkin(8) * t1381, -t1427 * t1352 + t1370 * t1433, -t1427 * t1325 + t1336 * t1433, -t1427 * t1330 + t1357 * t1433, -t1427 * t1351 + t1369 * t1433, -t1427 * t1331 + t1358 * t1433, t1433 * t1378 + t1427 * t1497, -pkin(8) * t1297 - t1427 * t1256 + t1265 * t1433, -pkin(8) * t1290 - t1427 * t1251 + t1257 * t1433, -pkin(8) * t1274 + t1225 * t1433 - t1427 * t1233, -pkin(8) * t1235 + t1226 * t1433 - t1427 * t1237, -t1427 * t1135 + t1189 * t1433, -t1427 * t1082 + t1125 * t1433, -t1427 * t1108 + t1170 * t1433, -t1427 * t1134 + t1188 * t1433, -t1427 * t1109 + t1171 * t1433, -t1427 * t1172 + t1227 * t1433, -pkin(8) * t1015 - t1427 * t891 + t1433 * t907, -pkin(8) * t1025 - t1427 * t894 + t1433 * t909, -pkin(8) * t999 - t1427 * t856 + t1433 * t875, -pkin(8) * t892 - t1427 * t814 + t1433 * t820, t1059 * t1433 - t1427 * t994, -t1427 * t925 + t1433 * t989, t1010 * t1433 - t1427 * t971, t1058 * t1433 - t1427 * t993, t1011 * t1433 - t1427 * t972, -t1427 * t1035 + t1110 * t1433, -pkin(8) * t898 - t1427 * t771 + t1433 * t787, -pkin(8) * t903 - t1427 * t772 + t1433 * t789, -pkin(8) * t865 - t1427 * t745 + t1433 * t766, -pkin(8) * t769 - t1427 * t718 + t1433 * t724, -t1427 * t868 + t1433 * t924, -t1427 * t817 + t1433 * t858, -t1427 * t845 + t1433 * t896, -t1427 * t867 + t1433 * t923, -t1427 * t846 + t1433 * t897, -t1427 * t915 + t1433 * t975, -pkin(8) * t800 - t1427 * t711 + t1433 * t723, -pkin(8) * t805 - t1427 * t714 + t1433 * t725, -pkin(8) * t775 - t1427 * t700 + t1433 * t708, -pkin(8) * t709 - t1427 * t686 + t1433 * t688, -t1427 * t757 + t1433 * t795, -t1427 * t733 + t1433 * t749, -t1427 * t767 + t1433 * t803, -t1427 * t756 + t1433 * t794, -t1427 * t768 + t1433 * t804, -t1427 * t818 + t1433 * t859, -pkin(8) * t735 - t1427 * t687 + t1433 * t692, -pkin(8) * t738 - t1427 * t689 + t1433 * t695, -pkin(8) * t715 - t1427 * t679 + t1433 * t682, -pkin(8) * t684 - t1427 * t677 + t1433 * t678; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1403, 0, t1404, 0, t1389, t1587, t1382, pkin(8) * t1382, t1352 * t1433 + t1427 * t1370, t1325 * t1433 + t1427 * t1336, t1330 * t1433 + t1427 * t1357, t1351 * t1433 + t1427 * t1369, t1331 * t1433 + t1427 * t1358, t1427 * t1378 - t1433 * t1497, pkin(8) * t1298 + t1256 * t1433 + t1427 * t1265, pkin(8) * t1291 + t1251 * t1433 + t1427 * t1257, pkin(8) * t1275 + t1427 * t1225 + t1233 * t1433, pkin(8) * t1236 + t1427 * t1226 + t1237 * t1433, t1135 * t1433 + t1427 * t1189, t1082 * t1433 + t1427 * t1125, t1108 * t1433 + t1427 * t1170, t1134 * t1433 + t1427 * t1188, t1109 * t1433 + t1427 * t1171, t1172 * t1433 + t1427 * t1227, pkin(8) * t1016 + t1427 * t907 + t1433 * t891, pkin(8) * t1026 + t1427 * t909 + t1433 * t894, pkin(8) * t1000 + t1427 * t875 + t1433 * t856, pkin(8) * t893 + t1427 * t820 + t1433 * t814, t1427 * t1059 + t1433 * t994, t1427 * t989 + t1433 * t925, t1427 * t1010 + t1433 * t971, t1427 * t1058 + t1433 * t993, t1427 * t1011 + t1433 * t972, t1035 * t1433 + t1427 * t1110, pkin(8) * t899 + t1427 * t787 + t1433 * t771, pkin(8) * t904 + t1427 * t789 + t1433 * t772, pkin(8) * t866 + t1427 * t766 + t1433 * t745, pkin(8) * t770 + t1427 * t724 + t1433 * t718, t1427 * t924 + t1433 * t868, t1427 * t858 + t1433 * t817, t1427 * t896 + t1433 * t845, t1427 * t923 + t1433 * t867, t1427 * t897 + t1433 * t846, t1427 * t975 + t1433 * t915, pkin(8) * t801 + t1427 * t723 + t1433 * t711, pkin(8) * t806 + t1427 * t725 + t1433 * t714, pkin(8) * t776 + t1427 * t708 + t1433 * t700, pkin(8) * t710 + t1427 * t688 + t1433 * t686, t1427 * t795 + t1433 * t757, t1427 * t749 + t1433 * t733, t1427 * t803 + t1433 * t767, t1427 * t794 + t1433 * t756, t1427 * t804 + t1433 * t768, t1427 * t859 + t1433 * t818, pkin(8) * t736 + t1427 * t692 + t1433 * t687, pkin(8) * t739 + t1427 * t695 + t1433 * t689, pkin(8) * t716 + t1427 * t682 + t1433 * t679, pkin(8) * t685 + t1427 * t678 + t1433 * t677; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1406, t1407, 0, 0, (t1614 + (qJD(2) - t1594) * t1663) * t1690, t1393 * t1421 + t1419 * t1504, t1375 * t1421 + t1419 * t1501, (qJD(1) * t1594 * t1690 + t1419 * t1582) * t1432, t1376 * t1421 + t1419 * t1499, t1421 * t1591, pkin(1) * t1332 - t1353 * t1421 + t1419 * t1585, pkin(1) * t1327 - t1354 * t1421 + t1419 * t1586, pkin(1) * t1324 + t1419 * t1460, pkin(1) * t1287 + t1308 * t1676, t1241 * t1421 + t1419 * t1514, t1192 * t1421 + t1419 * t1523, t1207 * t1421 + t1419 * t1517, t1239 * t1421 + t1419 * t1515, t1208 * t1421 + t1419 * t1516, t1276 * t1421 + t1419 * t1512, pkin(1) * t1099 + t1051 * t1421 + t1419 * t1462, pkin(1) * t1107 + t1056 * t1421 + t1419 * t1461, pkin(1) * t1070 + t1012 * t1421 + t1419 * t1463, pkin(1) * t948 + t1419 * t1476 + t1421 * t997, t1118 * t1421 + t1419 * t1531, t1036 * t1421 + t1419 * t1544, t1092 * t1421 + t1419 * t1536, t1117 * t1421 + t1419 * t1532, t1093 * t1421 + t1419 * t1535, t1167 * t1421 + t1419 * t1527, pkin(1) * t954 + t1419 * t1466 + t1421 * t873, pkin(1) * t959 + t1419 * t1465 + t1421 * t876, pkin(1) * t922 + t1419 * t1477 + t1421 * t830, pkin(1) * t808 + t1419 * t1478 + t1421 * t790, t1419 * t1551 + t1421 * t983, t1419 * t1561 + t1421 * t911, t1419 * t1554 + t1421 * t949, t1419 * t1552 + t1421 * t982, t1419 * t1553 + t1421 * t950, t1020 * t1421 + t1419 * t1548, pkin(1) * t835 + t1419 * t1480 + t1421 * t758, pkin(1) * t842 + t1419 * t1479 + t1421 * t761, pkin(1) * t813 + t1419 * t1481 + t1421 * t740, pkin(1) * t729 + t1419 * t1484 + t1421 * t704, t1419 * t1567 + t1421 * t827, t1419 * t1570 + t1421 * t783, t1419 * t1565 + t1421 * t836, t1419 * t1568 + t1421 * t826, t1419 * t1564 + t1421 * t837, t1419 * t1560 + t1421 * t913, pkin(1) * t754 + t1419 * t1483 + t1421 * t706, pkin(1) * t764 + t1419 * t1482 + t1421 * t712, pkin(1) * t732 + t1419 * t1485 + t1421 * t693, pkin(1) * t691 + t1419 * t1486 + t1421 * t680;];
tauB_reg  = t1;
