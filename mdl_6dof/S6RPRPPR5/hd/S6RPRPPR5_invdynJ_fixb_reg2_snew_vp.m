% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRPPR5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR5_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:59:29
% EndTime: 2019-05-05 16:59:50
% DurationCPUTime: 11.62s
% Computational Cost: add. (32187->502), mult. (80739->694), div. (0->0), fcn. (59774->10), ass. (0->286)
t269 = qJD(3) ^ 2;
t262 = cos(pkin(9));
t265 = sin(qJ(3));
t260 = sin(pkin(9));
t268 = cos(qJ(3));
t319 = t260 * t268;
t285 = t262 * t265 + t319;
t242 = t285 * qJD(1);
t357 = t242 ^ 2;
t223 = t357 + t269;
t320 = t260 * t265;
t240 = (-t262 * t268 + t320) * qJD(1);
t323 = t242 * t240;
t377 = qJDD(3) + t323;
t388 = t377 * t265;
t153 = t223 * t268 + t388;
t387 = t377 * t268;
t155 = -t223 * t265 + t387;
t401 = qJ(2) * (t153 * t260 - t155 * t262);
t400 = pkin(7) * t153;
t399 = pkin(7) * t155;
t224 = t357 - t269;
t193 = t323 - qJDD(3);
t394 = t193 * t268;
t395 = t193 * t265;
t397 = t260 * (-t224 * t265 + t394) + t262 * (t224 * t268 + t395);
t235 = t240 ^ 2;
t222 = t269 - t235;
t396 = t260 * (t222 * t268 + t388) - t262 * (-t222 * t265 + t387);
t191 = -t269 - t235;
t142 = t191 * t265 - t394;
t145 = -t191 * t268 - t395;
t389 = qJ(2) * (t142 * t260 + t145 * t262);
t386 = pkin(7) * t142;
t385 = pkin(7) * t145;
t229 = t240 * qJD(3);
t239 = t285 * qJDD(1);
t202 = t239 - t229;
t168 = -t229 + t202;
t367 = qJ(4) * t168;
t270 = qJD(1) ^ 2;
t266 = sin(qJ(1));
t355 = cos(qJ(1));
t283 = g(1) * t355 + t266 * g(2);
t368 = -t270 * pkin(1) + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t283;
t255 = t260 ^ 2;
t256 = t262 ^ 2;
t317 = t255 + t256;
t299 = t266 * g(1) - t355 * g(2);
t289 = -qJDD(2) + t299;
t353 = t262 * pkin(2);
t192 = t270 * (pkin(7) * t317 + qJ(2)) + (pkin(1) + t353) * qJDD(1) + t289;
t313 = t242 * qJD(3);
t378 = pkin(3) * t313 - 0.2e1 * qJD(4) * t242 - t192;
t375 = -2 * qJD(5);
t363 = -t235 - t357;
t374 = pkin(1) * t363;
t373 = pkin(2) * t363;
t259 = sin(pkin(10));
t261 = cos(pkin(10));
t214 = qJD(3) * t259 - t261 * t240;
t216 = qJD(3) * t261 + t240 * t259;
t169 = t216 * t214;
t365 = -t169 + t202;
t372 = t259 * t365;
t371 = t261 * t365;
t264 = sin(qJ(6));
t267 = cos(qJ(6));
t161 = t267 * t214 + t216 * t264;
t163 = -t214 * t264 + t216 * t267;
t124 = t163 * t161;
t189 = qJDD(6) + t202;
t366 = -t124 + t189;
t370 = t264 * t366;
t369 = t267 * t366;
t309 = t262 * qJDD(1);
t310 = t260 * qJDD(1);
t287 = t265 * t310 - t268 * t309;
t200 = t287 + t313;
t179 = t261 * qJDD(3) + t259 * t200;
t327 = t214 * t242;
t136 = -t179 - t327;
t167 = t229 + t202;
t217 = pkin(4) * t242 - qJD(3) * qJ(5);
t273 = -t367 + t378;
t351 = pkin(3) + qJ(5);
t73 = -pkin(4) * t235 + t200 * t351 - t242 * t217 + t273;
t352 = t262 * g(3);
t176 = -t352 + (-pkin(7) * qJDD(1) + t270 * t353 - t368) * t260;
t291 = -g(3) * t260 + t262 * t368;
t182 = -pkin(2) * t256 * t270 + pkin(7) * t309 + t291;
t126 = -t268 * t176 + t265 * t182;
t188 = pkin(3) * t240 - qJ(4) * t242;
t112 = -qJDD(3) * pkin(3) - t269 * qJ(4) + t242 * t188 + qJDD(4) + t126;
t78 = pkin(4) * t167 + qJ(5) * t193 + t112;
t290 = t216 * t375 - t259 * t73 + t261 * t78;
t50 = t214 * t375 + t259 * t78 + t261 * t73;
t362 = t357 - t235;
t318 = t270 * qJ(2);
t342 = qJDD(1) * pkin(1);
t234 = t289 + t318 + t342;
t361 = t317 * t318 - t234 - t342;
t358 = pkin(8) * t136 + t290;
t159 = t161 ^ 2;
t160 = t163 ^ 2;
t212 = t214 ^ 2;
t213 = t216 ^ 2;
t233 = qJD(6) + t242;
t231 = t233 ^ 2;
t356 = 0.2e1 * qJD(4);
t354 = pkin(3) * t268;
t277 = pkin(5) * t365 + t358;
t178 = pkin(5) * t242 - pkin(8) * t216;
t293 = qJDD(3) * t259 - t261 * t200;
t43 = -t212 * pkin(5) - pkin(8) * t293 - t242 * t178 + t50;
t22 = t264 * t43 - t267 * t277;
t344 = t267 * t43;
t23 = t264 * t277 + t344;
t13 = -t22 * t267 + t23 * t264;
t349 = t13 * t259;
t348 = t13 * t261;
t127 = t265 * t176 + t268 * t182;
t280 = -t269 * pkin(3) - t240 * t188 + t127;
t311 = qJDD(3) * qJ(4);
t85 = t311 + qJDD(5) - t200 * pkin(4) - t235 * qJ(5) + (t356 + t217) * qJD(3) + t280;
t347 = t259 * t85;
t346 = t261 * t85;
t61 = pkin(5) * t293 - t212 * pkin(8) + t216 * t178 + t85;
t345 = t264 * t61;
t343 = t267 * t61;
t100 = -t126 * t268 + t127 * t265;
t341 = t100 * t260;
t118 = t124 + t189;
t340 = t118 * t264;
t339 = t118 * t267;
t139 = t169 + t202;
t338 = t139 * t259;
t337 = t139 * t261;
t336 = t161 * t233;
t333 = t192 * t265;
t332 = t192 * t268;
t326 = t216 * t242;
t325 = t233 * t264;
t324 = t233 * t267;
t322 = t242 * t259;
t321 = t242 * t261;
t305 = t265 * t124;
t304 = t268 * t124;
t303 = t265 * t169;
t302 = t268 * t169;
t114 = -t161 * qJD(6) + t267 * t179 - t264 * t293;
t300 = qJ(4) * t265 + pkin(2);
t14 = t22 * t264 + t267 * t23;
t101 = t126 * t265 + t268 * t127;
t296 = t264 * t179 + t267 * t293;
t295 = t260 * (t260 * t368 + t352) + t262 * t291;
t288 = t179 - t327;
t28 = t259 * t50 + t261 * t290;
t29 = -t259 * t290 + t261 * t50;
t284 = t114 - t336;
t282 = -t293 + t326;
t281 = (-qJD(6) + t233) * t163 - t296;
t279 = qJD(3) * t356 + t280;
t185 = t265 * t202;
t187 = t268 * t202;
t278 = t260 * (-t265 * t313 + t187) + t262 * (t268 * t313 + t185);
t109 = t279 + t311;
t276 = t260 * (t200 * t265 + t229 * t268) + t262 * (-t268 * t200 + t229 * t265);
t275 = (t260 * (-t240 * t268 + t242 * t265) + t262 * (-t240 * t265 - t242 * t268)) * qJD(3);
t274 = -t200 * pkin(3) - t378;
t252 = t256 * qJDD(1);
t250 = t255 * qJDD(1);
t245 = t317 * t270;
t201 = t239 - 0.2e1 * t229;
t199 = t287 + 0.2e1 * t313;
t181 = -t213 + t357;
t180 = t212 - t357;
t166 = t200 + t313;
t165 = t200 - t313;
t164 = t213 - t212;
t158 = -t213 - t357;
t152 = -t357 - t212;
t151 = t167 * t265 - t268 * t287;
t150 = -t165 * t268 + t239 * t265;
t149 = -t167 * t268 - t265 * t287;
t148 = -t165 * t265 - t239 * t268;
t147 = -t160 + t231;
t146 = t159 - t231;
t141 = -t212 - t213;
t132 = t293 + t326;
t131 = (t214 * t259 + t216 * t261) * t242;
t130 = -t179 * t259 - t216 * t321;
t129 = -t214 * t322 + t261 * t293;
t128 = -t160 - t231;
t123 = t160 - t159;
t122 = -t231 - t159;
t121 = -t180 * t259 - t337;
t120 = -t181 * t261 - t372;
t116 = -t158 * t259 - t337;
t115 = t158 * t261 - t338;
t113 = -qJD(6) * t163 - t296;
t111 = (-t161 * t267 + t163 * t264) * t233;
t110 = (-t161 * t264 - t163 * t267) * t233;
t108 = t152 * t261 - t372;
t107 = t152 * t259 + t371;
t106 = t274 + t367;
t105 = -t159 - t160;
t104 = -t136 * t259 + t261 * t282;
t103 = t136 * t261 + t259 * t282;
t102 = t132 * t259 - t261 * t288;
t99 = -qJ(4) * t363 + t112;
t98 = -pkin(3) * t363 + t109;
t97 = (t166 + t200) * pkin(3) + t273;
t96 = t274 + 0.2e1 * t367;
t94 = -t114 - t336;
t90 = (qJD(6) + t233) * t163 + t296;
t89 = t146 * t267 - t340;
t88 = -t147 * t264 + t369;
t87 = t146 * t264 + t339;
t86 = t147 * t267 + t370;
t84 = t114 * t267 - t163 * t325;
t83 = t114 * t264 + t163 * t324;
t82 = -t113 * t264 + t161 * t324;
t81 = t113 * t267 + t161 * t325;
t80 = t115 * t265 + t268 * t288;
t79 = -t115 * t268 + t265 * t288;
t75 = -t128 * t264 - t339;
t74 = t128 * t267 - t340;
t72 = t107 * t265 + t132 * t268;
t71 = -t107 * t268 + t132 * t265;
t69 = t103 * t265 + t141 * t268;
t68 = -t103 * t268 + t141 * t265;
t67 = t122 * t267 - t370;
t66 = t122 * t264 + t369;
t63 = -t110 * t261 - t111 * t259;
t62 = pkin(4) * t103 - qJ(4) * t104;
t60 = -t264 * t94 + t267 * t281;
t59 = -t264 * t284 - t267 * t90;
t58 = t264 * t281 + t267 * t94;
t57 = -t264 * t90 + t267 * t284;
t56 = -t259 * t89 - t261 * t87;
t55 = -t259 * t88 - t261 * t86;
t54 = -t259 * t84 - t261 * t83;
t53 = -t259 * t82 - t261 * t81;
t52 = -t259 * t74 + t261 * t75;
t51 = t259 * t75 + t261 * t74;
t48 = -t259 * t66 + t261 * t67;
t47 = t259 * t67 + t261 * t66;
t46 = pkin(4) * t288 - t116 * t351 - t347;
t45 = -pkin(8) * t74 + t343;
t44 = pkin(4) * t132 - t108 * t351 + t346;
t42 = -pkin(8) * t66 + t345;
t40 = t265 * t51 + t268 * t284;
t39 = t265 * t284 - t268 * t51;
t38 = t265 * t47 + t268 * t90;
t37 = t265 * t90 - t268 * t47;
t36 = pkin(4) * t115 - qJ(4) * t116 - t50;
t35 = pkin(4) * t107 - qJ(4) * t108 + t290;
t34 = -pkin(5) * t284 + pkin(8) * t75 + t345;
t33 = -pkin(5) * t90 + pkin(8) * t67 - t343;
t32 = -t259 * t58 + t261 * t60;
t31 = t259 * t60 + t261 * t58;
t30 = -t259 * t59 - t261 * t57;
t27 = t105 * t268 + t265 * t31;
t26 = t105 * t265 - t268 * t31;
t25 = t265 * t28 + t268 * t85;
t24 = t265 * t85 - t268 * t28;
t20 = pkin(4) * t141 - t104 * t351 - t29;
t19 = pkin(4) * t28 - qJ(4) * t29;
t18 = pkin(4) * t31 + pkin(5) * t58 - qJ(4) * t32;
t17 = pkin(4) * t85 - t29 * t351;
t16 = -qJ(4) * t52 + pkin(4) * t51 - t344 - t264 * t358 + (-t264 * t365 + t74) * pkin(5);
t15 = pkin(4) * t284 - t259 * t45 - t261 * t34 - t351 * t52;
t12 = pkin(4) * t47 + pkin(5) * t66 - qJ(4) * t48 - t22;
t11 = pkin(4) * t90 - t259 * t42 - t261 * t33 - t351 * t48;
t10 = -pkin(5) * t61 + pkin(8) * t14;
t9 = -pkin(8) * t58 - t13;
t8 = -pkin(5) * t105 + pkin(8) * t60 + t14;
t7 = t14 * t261 - t349;
t6 = t14 * t259 + t348;
t5 = t265 * t6 + t268 * t61;
t4 = t265 * t61 - t268 * t6;
t3 = pkin(4) * t105 - t259 * t9 - t261 * t8 - t32 * t351;
t2 = pkin(4) * t6 + pkin(5) * t13 - qJ(4) * t7;
t1 = pkin(4) * t61 + pkin(8) * t349 - t261 * t10 - t351 * t7;
t21 = [0, 0, 0, 0, 0, qJDD(1), t299, t283, 0, 0, t250, 0.2e1 * t260 * t309, 0, t252, 0, 0, -t361 * t262, t361 * t260, pkin(1) * t245 + qJ(2) * (t252 + t250) + t295, pkin(1) * t234 + qJ(2) * t295, t278, t260 * (-t199 * t268 - t201 * t265) + t262 * (-t199 * t265 + t201 * t268), -t397, t276, -t396, t275, t260 * (-t333 - t386) + t262 * (-pkin(2) * t199 + t332 - t385) - pkin(1) * t199 - t389, t260 * (-t332 + t400) + t262 * (-pkin(2) * t201 - t333 - t399) - pkin(1) * t201 + t401, t260 * (-pkin(7) * t148 - t100) + t262 * (pkin(7) * t150 + t101 - t373) - t374 + qJ(2) * (-t148 * t260 + t150 * t262), -pkin(7) * t341 + t262 * (pkin(2) * t192 + pkin(7) * t101) + pkin(1) * t192 + qJ(2) * (t101 * t262 - t341), t275, t397, t396, t278, t260 * (-t166 * t268 - t168 * t265) + t262 * (-t166 * t265 + t168 * t268), t276, t260 * (-pkin(7) * t149 - t265 * t98 + t268 * t99) + t262 * (pkin(7) * t151 + t265 * t99 + t268 * t98 - t373) - t374 + qJ(2) * (-t149 * t260 + t151 * t262), t260 * (-t265 * t97 + t386) + t262 * (t268 * t97 + t385) + t389 + (qJ(4) * t319 + t262 * t300 + pkin(1)) * t166, t260 * (t268 * t96 - t400) + t262 * (t265 * t96 + t399) - t401 + (-pkin(3) * t320 + t262 * (pkin(2) + t354) + pkin(1)) * t168, (t260 * (-pkin(3) * t265 + qJ(4) * t268) + t262 * (t300 + t354) + pkin(1)) * t106 + (qJ(2) + pkin(7)) * (-t260 * (t109 * t265 - t112 * t268) + t262 * (t109 * t268 + t112 * t265)), t260 * (-t130 * t265 + t302) + t262 * (t130 * t268 + t303), t260 * (-t102 * t265 + t164 * t268) + t262 * (t102 * t268 + t164 * t265), t260 * (-t120 * t265 - t136 * t268) + t262 * (t120 * t268 - t136 * t265), t260 * (-t129 * t265 - t302) + t262 * (t129 * t268 - t303), t260 * (-t121 * t265 + t268 * t282) + t262 * (t121 * t268 + t265 * t282), t260 * (-t131 * t265 + t187) + t262 * (t131 * t268 + t185), t260 * (-pkin(7) * t71 - t265 * t44 + t268 * t35) + t262 * (-pkin(2) * t108 + pkin(7) * t72 + t265 * t35 + t268 * t44) - pkin(1) * t108 + qJ(2) * (-t260 * t71 + t262 * t72), t260 * (-pkin(7) * t79 - t265 * t46 + t268 * t36) + t262 * (-pkin(2) * t116 + pkin(7) * t80 + t265 * t36 + t268 * t46) - pkin(1) * t116 + qJ(2) * (-t260 * t79 + t262 * t80), t260 * (-pkin(7) * t68 - t20 * t265 + t268 * t62) + t262 * (-pkin(2) * t104 + pkin(7) * t69 + t20 * t268 + t265 * t62) - pkin(1) * t104 + qJ(2) * (-t260 * t68 + t262 * t69), t260 * (-pkin(7) * t24 - t17 * t265 + t19 * t268) + t262 * (-pkin(2) * t29 + pkin(7) * t25 + t17 * t268 + t19 * t265) - pkin(1) * t29 + qJ(2) * (-t24 * t260 + t25 * t262), t260 * (-t265 * t54 + t304) + t262 * (t268 * t54 + t305), t260 * (t123 * t268 - t265 * t30) + t262 * (t123 * t265 + t268 * t30), t260 * (-t265 * t55 - t268 * t94) + t262 * (-t265 * t94 + t268 * t55), t260 * (-t265 * t53 - t304) + t262 * (t268 * t53 - t305), t260 * (-t265 * t56 + t268 * t281) + t262 * (t265 * t281 + t268 * t56), t260 * (t189 * t268 - t265 * t63) + t262 * (t189 * t265 + t268 * t63), t260 * (-pkin(7) * t37 - t11 * t265 + t12 * t268) + t262 * (-pkin(2) * t48 + pkin(7) * t38 + t11 * t268 + t12 * t265) - pkin(1) * t48 + qJ(2) * (-t260 * t37 + t262 * t38), t260 * (-pkin(7) * t39 - t15 * t265 + t16 * t268) + t262 * (-pkin(2) * t52 + pkin(7) * t40 + t15 * t268 + t16 * t265) - pkin(1) * t52 + qJ(2) * (-t260 * t39 + t262 * t40), t260 * (-pkin(7) * t26 + t18 * t268 - t265 * t3) + t262 * (-pkin(2) * t32 + pkin(7) * t27 + t18 * t265 + t268 * t3) - pkin(1) * t32 + qJ(2) * (-t26 * t260 + t262 * t27), t260 * (-pkin(7) * t4 - t1 * t265 + t2 * t268) + t262 * (-pkin(2) * t7 + pkin(7) * t5 + t1 * t268 + t2 * t265) - pkin(1) * t7 + qJ(2) * (-t260 * t4 + t262 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309, t310, -t245, -t234, 0, 0, 0, 0, 0, 0, t199, t201, t363, -t192, 0, 0, 0, 0, 0, 0, t363, -t166, -t168, -t106, 0, 0, 0, 0, 0, 0, t108, t116, t104, t29, 0, 0, 0, 0, 0, 0, t48, t52, t32, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t323, t362, t239, -t323, -t287, qJDD(3), -t126, -t127, 0, 0, qJDD(3), -t167, t165, t323, t362, -t323, -pkin(3) * t167 - qJ(4) * t287, pkin(3) * t193 - qJ(4) * t191 + t112, pkin(3) * t223 + (qJDD(3) + t377) * qJ(4) + t279, -pkin(3) * t112 + qJ(4) * t109, t179 * t261 - t216 * t322, -t132 * t261 - t259 * t288, -t181 * t259 + t371, t214 * t321 + t259 * t293, t180 * t261 - t338, (-t214 * t261 + t216 * t259) * t242, qJ(4) * t132 - t107 * t351 + t347, qJ(4) * t288 - t115 * t351 + t346, qJ(4) * t141 - t103 * t351 - t28, qJ(4) * t85 - t28 * t351, -t259 * t83 + t261 * t84, -t259 * t57 + t261 * t59, -t259 * t86 + t261 * t88, -t259 * t81 + t261 * t82, -t259 * t87 + t261 * t89, -t110 * t259 + t111 * t261, qJ(4) * t90 - t259 * t33 + t261 * t42 - t351 * t47, qJ(4) * t284 - t259 * t34 + t261 * t45 - t351 * t51, qJ(4) * t105 - t259 * t8 + t261 * t9 - t31 * t351, -pkin(8) * t348 + qJ(4) * t61 - t259 * t10 - t351 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t167, -t193, -t223, t112, 0, 0, 0, 0, 0, 0, t107, t115, t103, t28, 0, 0, 0, 0, 0, 0, t47, t51, t31, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, t288, t141, t85, 0, 0, 0, 0, 0, 0, t90, t284, t105, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, t123, -t94, -t124, t281, t189, -t22, -t23, 0, 0;];
tauJ_reg  = t21;
