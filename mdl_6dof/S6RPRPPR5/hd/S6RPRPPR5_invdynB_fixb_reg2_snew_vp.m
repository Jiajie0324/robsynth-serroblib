% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:59:50
% EndTime: 2019-05-05 17:00:22
% DurationCPUTime: 32.90s
% Computational Cost: add. (107668->769), mult. (269886->1133), div. (0->0), fcn. (199934->10), ass. (0->533)
t916 = cos(pkin(9));
t922 = cos(qJ(3));
t914 = sin(pkin(9));
t919 = sin(qJ(3));
t977 = t914 * t919;
t881 = (-t916 * t922 + t977) * qJD(1);
t942 = t914 * t922 + t916 * t919;
t883 = t942 * qJD(1);
t985 = t883 * t881;
t1052 = qJDD(3) + t985;
t1061 = t1052 * t919;
t1016 = t883 ^ 2;
t924 = qJD(3) ^ 2;
t862 = t1016 + t924;
t762 = t862 * t922 + t1061;
t1060 = t1052 * t922;
t768 = -t862 * t919 + t1060;
t698 = t762 * t916 + t768 * t914;
t1085 = qJ(2) * t698;
t705 = t762 * t914 - t768 * t916;
t1084 = qJ(2) * t705;
t820 = t985 - qJDD(3);
t1066 = t820 * t919;
t863 = t1016 - t924;
t758 = t863 * t922 + t1066;
t1065 = t820 * t922;
t764 = -t863 * t919 + t1065;
t701 = t758 * t914 - t764 * t916;
t920 = sin(qJ(1));
t1083 = t701 * t920;
t923 = cos(qJ(1));
t1082 = t701 * t923;
t876 = t881 ^ 2;
t861 = t924 - t876;
t760 = -t861 * t919 + t1060;
t767 = t861 * t922 + t1061;
t703 = t760 * t914 + t767 * t916;
t1081 = t703 * t920;
t1080 = t703 * t923;
t1079 = t705 * t920;
t1078 = t705 * t923;
t1077 = -pkin(1) * t698 - pkin(2) * t762;
t1075 = pkin(7) * t762;
t1074 = pkin(7) * t768;
t1073 = t758 * t916 + t764 * t914;
t1072 = t760 * t916 - t767 * t914;
t818 = -t924 - t876;
t741 = t818 * t919 - t1065;
t744 = -t818 * t922 - t1066;
t663 = t741 * t916 - t744 * t914;
t1071 = qJ(2) * t663;
t666 = t741 * t914 + t744 * t916;
t1070 = qJ(2) * t666;
t1069 = t666 * t920;
t1068 = t666 * t923;
t1067 = -pkin(1) * t663 - pkin(2) * t741;
t1063 = pkin(7) * t741;
t1062 = pkin(7) * t744;
t1026 = t942 * qJDD(1);
t869 = t881 * qJD(3);
t829 = t1026 - t869;
t789 = -t869 + t829;
t1032 = qJ(4) * t789;
t896 = g(1) * t923 + g(2) * t920;
t925 = qJD(1) ^ 2;
t1047 = -pkin(1) * t925 + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t896;
t1051 = -2 * qJD(4);
t1015 = pkin(2) * t916;
t895 = t920 * g(1) - t923 * g(2);
t948 = -qJDD(2) + t895;
t909 = t914 ^ 2;
t910 = t916 ^ 2;
t974 = t909 + t910;
t819 = (pkin(7) * t974 + qJ(2)) * t925 + (pkin(1) + t1015) * qJDD(1) + t948;
t970 = t883 * qJD(3);
t1053 = pkin(3) * t970 + t1051 * t883 - t819;
t1050 = -2 * qJD(5);
t1028 = -t876 - t1016;
t1049 = pkin(1) * t1028;
t1048 = pkin(2) * t1028;
t1027 = t876 - t1016;
t1046 = t1027 * t920;
t1045 = t1027 * t923;
t1044 = t1028 * t920;
t1043 = t1028 * t923;
t913 = sin(pkin(10));
t915 = cos(pkin(10));
t849 = qJD(3) * t913 - t915 * t881;
t852 = qJD(3) * t915 + t881 * t913;
t790 = t852 * t849;
t1030 = -t790 + t829;
t1042 = t1030 * t913;
t1041 = t1030 * t915;
t918 = sin(qJ(6));
t921 = cos(qJ(6));
t781 = t921 * t849 + t852 * t918;
t783 = -t849 * t918 + t852 * t921;
t712 = t783 * t781;
t816 = qJDD(6) + t829;
t1031 = -t712 + t816;
t1040 = t1031 * t918;
t1039 = t1031 * t921;
t814 = t922 * t829;
t943 = -t919 * t970 + t814;
t812 = t919 * t829;
t945 = t922 * t970 + t812;
t1018 = -t914 * t945 + t916 * t943;
t956 = t923 * t985;
t1038 = t1018 * t920 - t956;
t957 = t920 * t985;
t1037 = t1018 * t923 + t957;
t968 = qJDD(1) * t916;
t879 = qJDD(1) * t977 - t922 * t968;
t827 = t879 + t970;
t939 = t827 * t919 + t869 * t922;
t944 = -t922 * t827 + t869 * t919;
t1020 = -t914 * t944 + t916 * t939;
t1036 = t1020 * t920 + t956;
t1035 = t1020 * t923 - t957;
t935 = (-t881 * t919 - t883 * t922) * qJD(3);
t936 = (-t881 * t922 + t883 * t919) * qJD(3);
t1021 = -t914 * t935 + t916 * t936;
t1034 = t920 * qJDD(3) + t1021 * t923;
t1033 = -qJDD(3) * t923 + t1021 * t920;
t802 = t915 * qJDD(3) + t913 * t827;
t991 = t849 * t883;
t736 = -t802 - t991;
t788 = t869 + t829;
t1012 = pkin(3) + qJ(5);
t856 = pkin(4) * t883 - qJD(3) * qJ(5);
t928 = -t1032 + t1053;
t607 = -pkin(4) * t876 + t1012 * t827 - t883 * t856 + t928;
t1013 = t916 * g(3);
t798 = -t1013 + (-pkin(7) * qJDD(1) + t1015 * t925 - t1047) * t914;
t836 = -g(3) * t914 + t1047 * t916;
t904 = t910 * t925;
t805 = -pkin(2) * t904 + pkin(7) * t968 + t836;
t717 = -t922 * t798 + t919 * t805;
t815 = pkin(3) * t881 - qJ(4) * t883;
t940 = -qJDD(3) * pkin(3) - t924 * qJ(4) + t883 * t815 + qJDD(4) + t717;
t612 = pkin(4) * t788 + qJ(5) * t820 + t940;
t947 = t1050 * t852 - t913 * t607 + t915 * t612;
t544 = t1050 * t849 + t915 * t607 + t913 * t612;
t1024 = t925 * t974;
t1022 = t914 * t936 + t916 * t935;
t1019 = t914 * t939 + t916 * t944;
t1017 = t914 * t943 + t916 * t945;
t779 = t781 ^ 2;
t780 = t783 ^ 2;
t843 = t849 ^ 2;
t844 = t852 ^ 2;
t873 = qJD(6) + t883;
t871 = t873 ^ 2;
t1014 = pkin(3) * t922;
t1011 = qJDD(1) * pkin(1);
t521 = pkin(5) * t1030 + pkin(8) * t736 + t947;
t800 = pkin(5) * t883 - pkin(8) * t852;
t801 = -qJDD(3) * t913 + t915 * t827;
t525 = -pkin(5) * t843 + pkin(8) * t801 - t800 * t883 + t544;
t479 = -t921 * t521 + t525 * t918;
t480 = t521 * t918 + t525 * t921;
t446 = -t479 * t921 + t480 * t918;
t1010 = t446 * t915;
t718 = t919 * t798 + t922 * t805;
t932 = t924 * pkin(3) + t881 * t815 - t718;
t965 = qJDD(3) * qJ(4);
t622 = t965 + qJDD(5) - t827 * pkin(4) - t876 * qJ(5) + ((2 * qJD(4)) + t856) * qJD(3) - t932;
t580 = -t801 * pkin(5) - t843 * pkin(8) + t852 * t800 + t622;
t1009 = t580 * t918;
t1008 = t580 * t921;
t651 = -t717 * t922 + t718 * t919;
t1007 = t651 * t914;
t1006 = t651 * t916;
t684 = t712 + t816;
t1005 = t684 * t918;
t1004 = t684 * t921;
t739 = t790 + t829;
t1003 = t739 * t915;
t1002 = t781 * t873;
t786 = t827 + t970;
t1001 = t786 * t922;
t1000 = t789 * t919;
t997 = t819 * t919;
t996 = t819 * t922;
t990 = t852 * t883;
t989 = t873 * t918;
t988 = t873 * t921;
t874 = t925 * qJ(2) + t1011 + t948;
t987 = t874 * t920;
t986 = t874 * t923;
t984 = t883 * t913;
t983 = t883 * t915;
t982 = t909 * t925;
t981 = t913 * t446;
t980 = t913 * t622;
t979 = t913 * t739;
t978 = t914 * t916;
t976 = t915 * t622;
t967 = qJDD(1) * t920;
t966 = qJDD(1) * t923;
t963 = -t844 - t1016;
t961 = t919 * t712;
t960 = t922 * t712;
t959 = t919 * t790;
t958 = t922 * t790;
t679 = -t781 * qJD(6) + t918 * t801 + t921 * t802;
t954 = qJ(4) * t919 + pkin(2);
t953 = t874 + t1011;
t447 = t479 * t918 + t921 * t480;
t652 = t717 * t919 + t922 * t718;
t951 = -t921 * t801 + t918 * t802;
t835 = t1047 * t914 + t1013;
t755 = t835 * t914 + t916 * t836;
t853 = -t895 * t920 - t923 * t896;
t894 = -t920 * t925 + t966;
t949 = -pkin(6) * t894 - g(3) * t920;
t946 = t802 - t991;
t490 = t913 * t544 + t915 * t947;
t491 = t915 * t544 - t913 * t947;
t754 = t835 * t916 - t836 * t914;
t851 = t895 * t923 - t896 * t920;
t893 = t923 * t925 + t967;
t941 = t679 - t1002;
t887 = t916 * t1024;
t846 = -t887 * t920 + t916 * t966;
t938 = t887 * t923 + t916 * t967;
t937 = t801 + t990;
t933 = (-qJD(6) + t873) * t783 - t951;
t931 = qJD(3) * t1051 + t932;
t674 = -t931 + t965;
t929 = -t827 * pkin(3) - t1053;
t903 = t910 * qJDD(1);
t901 = t909 * qJDD(1);
t892 = t904 - t982;
t891 = t904 + t982;
t890 = t903 - t901;
t889 = t903 + t901;
t886 = t914 * t1024;
t875 = -pkin(6) * t893 + g(3) * t923;
t855 = t894 * t978;
t854 = t893 * t978;
t847 = t886 * t923 + t914 * t967;
t845 = t886 * t920 - t914 * t966;
t838 = t889 * t923 - t891 * t920;
t837 = t889 * t920 + t891 * t923;
t828 = t1026 - 0.2e1 * t869;
t826 = t879 + 0.2e1 * t970;
t804 = -t844 + t1016;
t803 = t843 - t1016;
t787 = -t827 + t970;
t784 = t844 - t843;
t756 = -t1016 - t843;
t752 = t788 * t919 - t879 * t922;
t751 = -t826 * t922 - t828 * t919;
t750 = t1026 * t919 + t787 * t922;
t749 = -t788 * t922 - t879 * t919;
t748 = -t826 * t919 + t828 * t922;
t747 = -t1026 * t922 + t787 * t919;
t746 = -t780 + t871;
t745 = t779 - t871;
t740 = -t843 - t844;
t732 = -t801 + t990;
t729 = (t849 * t915 - t852 * t913) * t883;
t728 = (t849 * t913 + t852 * t915) * t883;
t725 = -t802 * t915 + t852 * t984;
t724 = -t802 * t913 - t852 * t983;
t723 = t801 * t913 - t849 * t983;
t722 = -t801 * t915 - t849 * t984;
t721 = t755 * t923 - t987;
t720 = t755 * t920 + t986;
t719 = -t780 - t871;
t715 = -t996 + t1075;
t714 = -t1000 - t1001;
t713 = -t786 * t919 + t789 * t922;
t711 = t780 - t779;
t710 = -t997 - t1063;
t697 = -t728 * t919 + t814;
t696 = t728 * t922 + t812;
t695 = -t871 - t779;
t694 = -t803 * t915 + t979;
t693 = t804 * t913 - t1041;
t692 = -t803 * t913 - t1003;
t691 = -t804 * t915 - t1042;
t690 = -pkin(2) * t828 - t1074 - t997;
t689 = -t724 * t919 + t958;
t688 = -t722 * t919 - t958;
t687 = t724 * t922 + t959;
t686 = t722 * t922 - t959;
t682 = -t913 * t963 - t1003;
t681 = t915 * t963 - t979;
t680 = -pkin(2) * t826 - t1062 + t996;
t678 = -qJD(6) * t783 - t951;
t676 = (-t781 * t921 + t783 * t918) * t873;
t675 = (-t781 * t918 - t783 * t921) * t873;
t673 = -t749 * t914 + t752 * t916;
t672 = -t748 * t914 + t751 * t916;
t671 = -t747 * t914 + t750 * t916;
t670 = t749 * t916 + t752 * t914;
t669 = t747 * t916 + t750 * t914;
t668 = t756 * t915 - t1042;
t667 = t913 * t756 + t1041;
t662 = t929 + t1032;
t661 = t828 * t920 + t1078;
t660 = -t828 * t923 + t1079;
t659 = -t779 - t780;
t658 = -t913 * t736 + t915 * t937;
t657 = t732 * t915 + t913 * t946;
t656 = t736 * t915 + t913 * t937;
t655 = t732 * t913 - t915 * t946;
t654 = -t789 * t920 - t1078;
t653 = t789 * t923 - t1079;
t650 = t826 * t920 - t1068;
t649 = -t826 * t923 - t1069;
t648 = -qJ(4) * t1028 + t940;
t647 = -pkin(3) * t1028 + t674;
t646 = t673 * t923 + t1044;
t645 = t671 * t923 + t1044;
t644 = t673 * t920 - t1043;
t643 = t671 * t920 - t1043;
t642 = (t786 + t827) * pkin(3) + t928;
t641 = t929 + 0.2e1 * t1032;
t640 = -t786 * t920 + t1068;
t639 = t786 * t923 + t1069;
t638 = -t692 * t919 + t922 * t937;
t637 = -t691 * t919 - t736 * t922;
t636 = t692 * t922 + t919 * t937;
t635 = t691 * t922 - t736 * t919;
t633 = -t679 - t1002;
t629 = (qJD(6) + t873) * t783 + t951;
t628 = -t713 * t914 + t714 * t916;
t627 = pkin(2) * t819 + pkin(7) * t652;
t626 = t745 * t921 - t1005;
t625 = -t746 * t918 + t1039;
t624 = t745 * t918 + t1004;
t623 = t746 * t921 + t1040;
t621 = t679 * t921 - t783 * t989;
t620 = t679 * t918 + t783 * t988;
t619 = -t678 * t918 + t781 * t988;
t618 = t678 * t921 + t781 * t989;
t617 = -pkin(1) * t669 - pkin(2) * t747;
t616 = -t655 * t919 + t784 * t922;
t615 = t655 * t922 + t784 * t919;
t614 = t681 * t919 + t922 * t946;
t613 = -t681 * t922 + t919 * t946;
t609 = -t719 * t918 - t1004;
t608 = t719 * t921 - t1005;
t606 = t667 * t919 + t732 * t922;
t605 = -t667 * t922 + t732 * t919;
t602 = t656 * t919 + t740 * t922;
t601 = -t656 * t922 + t740 * t919;
t600 = -t696 * t914 + t697 * t916;
t599 = -pkin(7) * t747 - t651;
t598 = -t1077 + t718;
t597 = t695 * t921 - t1040;
t596 = t695 * t918 + t1039;
t594 = -t687 * t914 + t689 * t916;
t593 = -t686 * t914 + t688 * t916;
t592 = -pkin(1) * t670 - pkin(2) * t749 + pkin(3) * t788 + qJ(4) * t879;
t591 = t674 * t922 + t919 * t940;
t590 = t674 * t919 - t922 * t940;
t589 = t675 * t913 - t676 * t915;
t588 = -t675 * t915 - t676 * t913;
t587 = pkin(7) * t750 - t1048 + t652;
t586 = t1067 + t717;
t585 = -pkin(3) * t1000 + t641 * t922 - t1075;
t584 = qJ(4) * t1001 - t642 * t919 + t1063;
t583 = pkin(4) * t656 - qJ(4) * t658;
t582 = -t588 * t919 + t816 * t922;
t581 = t588 * t922 + t816 * t919;
t579 = -t690 * t914 + t715 * t916 + t1085;
t578 = t1074 + t919 * t641 + (pkin(2) + t1014) * t789;
t577 = t652 * t916 - t1007;
t576 = t652 * t914 + t1006;
t575 = t922 * t642 + t786 * t954 + t1062;
t574 = -pkin(3) * t862 + (-qJDD(3) - t1052) * qJ(4) + t931 + t1077;
t573 = -t680 * t914 + t710 * t916 - t1071;
t572 = t577 * t923 - t819 * t920;
t571 = t577 * t920 + t819 * t923;
t570 = -t636 * t914 + t638 * t916;
t569 = -t635 * t914 + t637 * t916;
t568 = -t633 * t918 + t921 * t933;
t567 = -t629 * t921 - t918 * t941;
t566 = t633 * t921 + t918 * t933;
t565 = -t629 * t918 + t921 * t941;
t563 = -pkin(3) * t820 + qJ(4) * t818 - t1067 - t940;
t562 = t624 * t913 - t626 * t915;
t561 = t623 * t913 - t625 * t915;
t560 = -t624 * t915 - t626 * t913;
t559 = -t623 * t915 - t625 * t913;
t558 = t620 * t913 - t621 * t915;
t557 = t618 * t913 - t619 * t915;
t556 = -t620 * t915 - t621 * t913;
t555 = -t618 * t915 - t619 * t913;
t554 = -t615 * t914 + t616 * t916;
t553 = -t613 * t914 + t614 * t916;
t552 = t613 * t916 + t614 * t914;
t551 = -pkin(7) * t749 - t647 * t919 + t648 * t922;
t550 = -t913 * t608 + t609 * t915;
t549 = t608 * t915 + t609 * t913;
t548 = -t605 * t914 + t606 * t916;
t547 = t605 * t916 + t606 * t914;
t546 = -t601 * t914 + t602 * t916;
t545 = t601 * t916 + t602 * t914;
t541 = pkin(7) * t752 + t647 * t922 + t648 * t919 - t1048;
t540 = -t913 * t596 + t597 * t915;
t539 = t596 * t915 + t597 * t913;
t538 = -t556 * t919 + t960;
t537 = -t555 * t919 - t960;
t536 = t556 * t922 + t961;
t535 = t555 * t922 - t961;
t534 = -pkin(1) * t576 - pkin(2) * t651;
t533 = pkin(4) * t946 - t1012 * t682 - t980;
t532 = -pkin(8) * t608 + t1008;
t531 = -t590 * t914 + t591 * t916;
t530 = t590 * t916 + t591 * t914;
t529 = pkin(4) * t732 - t1012 * t668 + t976;
t528 = -pkin(7) * t590 + (-pkin(3) * t919 + qJ(4) * t922) * t662;
t527 = t553 * t923 + t682 * t920;
t526 = t553 * t920 - t682 * t923;
t524 = -pkin(8) * t596 + t1009;
t523 = t548 * t923 + t668 * t920;
t522 = t548 * t920 - t668 * t923;
t519 = -t560 * t919 + t922 * t933;
t518 = -t559 * t919 - t633 * t922;
t517 = t560 * t922 + t919 * t933;
t516 = t559 * t922 - t633 * t919;
t515 = t546 * t923 + t658 * t920;
t514 = t546 * t920 - t658 * t923;
t513 = -t581 * t914 + t582 * t916;
t512 = t549 * t919 + t922 * t941;
t511 = -t549 * t922 + t919 * t941;
t510 = -qJ(2) * t669 - t587 * t914 + t599 * t916;
t509 = t531 * t923 - t662 * t920;
t508 = t531 * t920 + t662 * t923;
t507 = pkin(7) * t591 + (t954 + t1014) * t662;
t506 = t539 * t919 + t629 * t922;
t505 = -t539 * t922 + t629 * t919;
t504 = pkin(4) * t681 - qJ(4) * t682 - t544;
t503 = -pkin(7) * t1006 - qJ(2) * t576 - t627 * t914;
t502 = pkin(4) * t667 - qJ(4) * t668 + t947;
t501 = -pkin(5) * t941 + pkin(8) * t609 + t1009;
t500 = -t578 * t914 + t585 * t916 - t1085;
t499 = -pkin(5) * t629 + pkin(8) * t597 - t1008;
t498 = -t575 * t914 + t584 * t916 + t1071;
t497 = -t913 * t566 + t568 * t915;
t496 = t565 * t913 - t567 * t915;
t495 = t566 * t915 + t568 * t913;
t494 = -t565 * t915 - t567 * t913;
t493 = -t494 * t919 + t711 * t922;
t492 = t494 * t922 + t711 * t919;
t489 = t495 * t919 + t659 * t922;
t488 = -t495 * t922 + t659 * t919;
t487 = -t536 * t914 + t538 * t916;
t486 = -t535 * t914 + t537 * t916;
t485 = -qJ(2) * t670 - t541 * t914 + t551 * t916;
t484 = -pkin(1) * t530 - pkin(2) * t590 + pkin(3) * t940 - qJ(4) * t674;
t483 = t490 * t919 + t622 * t922;
t482 = -t490 * t922 + t622 * t919;
t481 = -pkin(1) * t552 - pkin(2) * t613 - qJ(4) * t946 + t1012 * t681 - t976;
t477 = -pkin(1) * t547 - pkin(2) * t605 - qJ(4) * t732 + t1012 * t667 - t980;
t476 = -t517 * t914 + t519 * t916;
t475 = -t516 * t914 + t518 * t916;
t474 = -t511 * t914 + t512 * t916;
t473 = t511 * t916 + t512 * t914;
t472 = pkin(4) * t740 - t1012 * t658 - t491;
t471 = -t505 * t914 + t506 * t916;
t470 = t505 * t916 + t506 * t914;
t469 = -pkin(7) * t613 + t504 * t922 - t533 * t919;
t468 = -pkin(7) * t605 + t502 * t922 - t529 * t919;
t467 = -pkin(2) * t682 + pkin(7) * t614 + t504 * t919 + t533 * t922;
t466 = -pkin(2) * t668 + pkin(7) * t606 + t502 * t919 + t529 * t922;
t465 = t474 * t923 + t550 * t920;
t464 = t474 * t920 - t550 * t923;
t463 = -qJ(2) * t530 - t507 * t914 + t528 * t916;
t462 = -t492 * t914 + t493 * t916;
t461 = -pkin(7) * t601 - t472 * t919 + t583 * t922;
t460 = pkin(4) * t490 - qJ(4) * t491;
t459 = -t488 * t914 + t489 * t916;
t458 = t488 * t916 + t489 * t914;
t457 = t471 * t923 + t540 * t920;
t456 = t471 * t920 - t540 * t923;
t455 = -pkin(1) * t545 - pkin(2) * t601 - qJ(4) * t740 + t1012 * t656 + t490;
t454 = -pkin(2) * t658 + pkin(7) * t602 + t472 * t922 + t583 * t919;
t453 = pkin(4) * t495 + pkin(5) * t566 - qJ(4) * t497;
t452 = pkin(4) * t622 - t1012 * t491;
t451 = -t482 * t914 + t483 * t916;
t450 = t482 * t916 + t483 * t914;
t449 = pkin(4) * t549 + pkin(5) * t608 - qJ(4) * t550 - t480;
t448 = pkin(4) * t941 - t1012 * t550 - t915 * t501 - t913 * t532;
t444 = pkin(4) * t539 + pkin(5) * t596 - qJ(4) * t540 - t479;
t443 = pkin(4) * t629 - t1012 * t540 - t915 * t499 - t913 * t524;
t442 = -pkin(5) * t580 + pkin(8) * t447;
t441 = t459 * t923 + t497 * t920;
t440 = t459 * t920 - t497 * t923;
t439 = -pkin(8) * t566 - t446;
t438 = -pkin(5) * t659 + pkin(8) * t568 + t447;
t437 = t451 * t923 + t491 * t920;
t436 = t451 * t920 - t491 * t923;
t435 = -qJ(2) * t552 - t467 * t914 + t469 * t916;
t434 = -qJ(2) * t547 - t466 * t914 + t468 * t916;
t433 = -qJ(2) * t545 - t454 * t914 + t461 * t916;
t432 = -pkin(1) * t473 - pkin(2) * t511 - qJ(4) * t941 + t1012 * t549 + t913 * t501 - t915 * t532;
t431 = -pkin(1) * t470 - pkin(2) * t505 - qJ(4) * t629 + t1012 * t539 + t913 * t499 - t915 * t524;
t430 = t447 * t915 - t981;
t429 = t447 * t913 + t1010;
t428 = -pkin(7) * t482 - t452 * t919 + t460 * t922;
t427 = t429 * t919 + t580 * t922;
t426 = -t429 * t922 + t580 * t919;
t425 = -pkin(7) * t511 - t448 * t919 + t449 * t922;
t424 = -pkin(1) * t450 - pkin(2) * t482 - qJ(4) * t622 + t1012 * t490;
t423 = -pkin(2) * t550 + pkin(7) * t512 + t448 * t922 + t449 * t919;
t422 = -pkin(7) * t505 - t443 * t919 + t444 * t922;
t421 = -pkin(2) * t491 + pkin(7) * t483 + t452 * t922 + t460 * t919;
t420 = -pkin(2) * t540 + pkin(7) * t506 + t443 * t922 + t444 * t919;
t419 = pkin(4) * t659 - t1012 * t497 - t915 * t438 - t913 * t439;
t418 = -t426 * t914 + t427 * t916;
t417 = t426 * t916 + t427 * t914;
t416 = -pkin(1) * t458 - pkin(2) * t488 - qJ(4) * t659 + t1012 * t495 + t913 * t438 - t915 * t439;
t415 = -pkin(7) * t488 - t419 * t919 + t453 * t922;
t414 = -pkin(2) * t497 + pkin(7) * t489 + t419 * t922 + t453 * t919;
t413 = pkin(4) * t429 + pkin(5) * t446 - qJ(4) * t430;
t412 = -qJ(2) * t473 - t423 * t914 + t425 * t916;
t411 = -qJ(2) * t450 - t421 * t914 + t428 * t916;
t410 = -qJ(2) * t470 - t420 * t914 + t422 * t916;
t409 = pkin(4) * t580 + pkin(8) * t981 - t1012 * t430 - t915 * t442;
t408 = t418 * t923 + t430 * t920;
t407 = t418 * t920 - t430 * t923;
t406 = -qJ(2) * t458 - t414 * t914 + t415 * t916;
t405 = -pkin(1) * t417 - pkin(2) * t426 + pkin(8) * t1010 - qJ(4) * t580 + t1012 * t429 + t913 * t442;
t404 = -pkin(7) * t426 - t409 * t919 + t413 * t922;
t403 = -pkin(2) * t430 + pkin(7) * t427 + t409 * t922 + t413 * t919;
t402 = -qJ(2) * t417 - t403 * t914 + t404 * t916;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t893, -t894, 0, t853, 0, 0, 0, 0, 0, 0, -t938, t847, t838, t721, 0, 0, 0, 0, 0, 0, t650, t661, t645, t572, 0, 0, 0, 0, 0, 0, t646, t640, t654, t509, 0, 0, 0, 0, 0, 0, t523, t527, t515, t437, 0, 0, 0, 0, 0, 0, t457, t465, t441, t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t894, -t893, 0, t851, 0, 0, 0, 0, 0, 0, t846, t845, t837, t720, 0, 0, 0, 0, 0, 0, t649, t660, t643, t571, 0, 0, 0, 0, 0, 0, t644, t639, t653, t508, 0, 0, 0, 0, 0, 0, t522, t526, t514, t436, 0, 0, 0, 0, 0, 0, t456, t464, t440, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t754, 0, 0, 0, 0, 0, 0, t663, -t698, t669, t576, 0, 0, 0, 0, 0, 0, t670, -t663, t698, t530, 0, 0, 0, 0, 0, 0, t547, t552, t545, t450, 0, 0, 0, 0, 0, 0, t470, t473, t458, t417; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t894, 0, -t893, 0, t949, -t875, -t851, -pkin(6) * t851, t855, t890 * t923 - t892 * t920, t847, -t855, t938, 0, -pkin(6) * t846 - t835 * t920 - t914 * t986, -pkin(6) * t845 - t836 * t920 - t916 * t986, -pkin(6) * t837 + t754 * t923, -pkin(6) * t720 - (pkin(1) * t920 - qJ(2) * t923) * t754, t1037, t672 * t923 - t1046, t1026 * t920 + t1082, t1035, -t879 * t920 - t1080, t1034, -pkin(6) * t649 + t573 * t923 - t586 * t920, -pkin(6) * t660 + t579 * t923 - t598 * t920, -pkin(6) * t643 + t510 * t923 - t617 * t920, -pkin(6) * t571 + t503 * t923 - t534 * t920, t1034, -t788 * t920 - t1082, -t787 * t920 + t1080, t1037, t628 * t923 - t1046, t1035, -pkin(6) * t644 + t485 * t923 - t592 * t920, -pkin(6) * t639 + t498 * t923 - t563 * t920, -pkin(6) * t653 + t500 * t923 - t574 * t920, -pkin(6) * t508 + t463 * t923 - t484 * t920, t594 * t923 - t725 * t920, t554 * t923 - t657 * t920, t569 * t923 - t693 * t920, t593 * t923 - t723 * t920, t570 * t923 - t694 * t920, t600 * t923 - t729 * t920, -pkin(6) * t522 + t434 * t923 - t477 * t920, -pkin(6) * t526 + t435 * t923 - t481 * t920, -pkin(6) * t514 + t433 * t923 - t455 * t920, -pkin(6) * t436 + t411 * t923 - t424 * t920, t487 * t923 - t558 * t920, t462 * t923 - t496 * t920, t475 * t923 - t561 * t920, t486 * t923 - t557 * t920, t476 * t923 - t562 * t920, t513 * t923 - t589 * t920, -pkin(6) * t456 + t410 * t923 - t431 * t920, -pkin(6) * t464 + t412 * t923 - t432 * t920, -pkin(6) * t440 + t406 * t923 - t416 * t920, -pkin(6) * t407 + t402 * t923 - t405 * t920; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t893, 0, t894, 0, t875, t949, t853, pkin(6) * t853, t854, t890 * t920 + t892 * t923, t845, -t854, -t846, 0, -pkin(6) * t938 + t835 * t923 - t914 * t987, pkin(6) * t847 + t836 * t923 - t916 * t987, pkin(6) * t838 + t754 * t920, pkin(6) * t721 - (-pkin(1) * t923 - qJ(2) * t920) * t754, t1038, t672 * t920 + t1045, -t1026 * t923 + t1083, t1036, t879 * t923 - t1081, t1033, pkin(6) * t650 + t573 * t920 + t586 * t923, pkin(6) * t661 + t579 * t920 + t598 * t923, pkin(6) * t645 + t510 * t920 + t617 * t923, pkin(6) * t572 + t503 * t920 + t534 * t923, t1033, t788 * t923 - t1083, t787 * t923 + t1081, t1038, t628 * t920 + t1045, t1036, pkin(6) * t646 + t485 * t920 + t592 * t923, pkin(6) * t640 + t498 * t920 + t563 * t923, pkin(6) * t654 + t500 * t920 + t574 * t923, pkin(6) * t509 + t463 * t920 + t484 * t923, t594 * t920 + t725 * t923, t554 * t920 + t657 * t923, t569 * t920 + t693 * t923, t593 * t920 + t723 * t923, t570 * t920 + t694 * t923, t600 * t920 + t729 * t923, pkin(6) * t523 + t434 * t920 + t477 * t923, pkin(6) * t527 + t435 * t920 + t481 * t923, pkin(6) * t515 + t433 * t920 + t455 * t923, pkin(6) * t437 + t411 * t920 + t424 * t923, t487 * t920 + t558 * t923, t462 * t920 + t496 * t923, t475 * t920 + t561 * t923, t486 * t920 + t557 * t923, t476 * t920 + t562 * t923, t513 * t920 + t589 * t923, pkin(6) * t457 + t410 * t920 + t431 * t923, pkin(6) * t465 + t412 * t920 + t432 * t923, pkin(6) * t441 + t406 * t920 + t416 * t923, pkin(6) * t408 + t402 * t920 + t405 * t923; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t895, t896, 0, 0, t901, 0.2e1 * t914 * t968, 0, t903, 0, 0, -qJ(2) * t887 + t916 * t953, qJ(2) * t886 - t914 * t953, pkin(1) * t891 + qJ(2) * t889 + t755, pkin(1) * t874 + qJ(2) * t755, t1017, t748 * t916 + t751 * t914, -t1073, t1019, t1072, t1022, -pkin(1) * t826 + t680 * t916 + t710 * t914 - t1070, -pkin(1) * t828 + t690 * t916 + t715 * t914 + t1084, qJ(2) * t671 + t587 * t916 + t599 * t914 - t1049, pkin(1) * t819 - pkin(7) * t1007 + qJ(2) * t577 + t627 * t916, t1022, t1073, -t1072, t1017, t713 * t916 + t714 * t914, t1019, qJ(2) * t673 + t541 * t916 + t551 * t914 - t1049, pkin(1) * t786 + t575 * t916 + t584 * t914 + t1070, pkin(1) * t789 + t578 * t916 + t585 * t914 - t1084, pkin(1) * t662 + qJ(2) * t531 + t507 * t916 + t528 * t914, t687 * t916 + t689 * t914, t615 * t916 + t616 * t914, t635 * t916 + t637 * t914, t686 * t916 + t688 * t914, t636 * t916 + t638 * t914, t696 * t916 + t697 * t914, -pkin(1) * t668 + qJ(2) * t548 + t466 * t916 + t468 * t914, -pkin(1) * t682 + qJ(2) * t553 + t467 * t916 + t469 * t914, -pkin(1) * t658 + qJ(2) * t546 + t454 * t916 + t461 * t914, -pkin(1) * t491 + qJ(2) * t451 + t421 * t916 + t428 * t914, t536 * t916 + t538 * t914, t492 * t916 + t493 * t914, t516 * t916 + t518 * t914, t535 * t916 + t537 * t914, t517 * t916 + t519 * t914, t581 * t916 + t582 * t914, -pkin(1) * t540 + qJ(2) * t471 + t420 * t916 + t422 * t914, -pkin(1) * t550 + qJ(2) * t474 + t423 * t916 + t425 * t914, -pkin(1) * t497 + qJ(2) * t459 + t414 * t916 + t415 * t914, -pkin(1) * t430 + qJ(2) * t418 + t403 * t916 + t404 * t914;];
tauB_reg  = t1;
