% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPR4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:09:20
% EndTime: 2019-03-09 22:09:47
% DurationCPUTime: 11.76s
% Computational Cost: add. (27382->647), mult. (64964->842), div. (0->0), fcn. (48682->10), ass. (0->323)
t359 = sin(qJ(3));
t360 = sin(qJ(2));
t426 = qJD(1) * t360;
t411 = t359 * t426;
t362 = cos(qJ(2));
t493 = cos(qJ(3));
t412 = t493 * t362;
t304 = -qJD(1) * t412 + t411;
t322 = t359 * t362 + t360 * t493;
t306 = t322 * qJD(1);
t240 = pkin(3) * t306 + pkin(9) * t304;
t224 = pkin(2) * t426 + t240;
t494 = -pkin(8) - pkin(7);
t334 = t494 * t362;
t326 = qJD(1) * t334;
t307 = t359 * t326;
t333 = t494 * t360;
t324 = qJD(1) * t333;
t252 = t324 * t493 + t307;
t358 = sin(qJ(4));
t361 = cos(qJ(4));
t166 = t358 * t224 + t361 * t252;
t407 = t493 * qJD(3);
t396 = pkin(2) * t407;
t526 = -t361 * t396 + t166;
t450 = t304 * t358;
t525 = qJ(5) * t450 - t361 * qJD(5);
t165 = t361 * t224 - t252 * t358;
t352 = t361 * qJ(5);
t391 = t306 * pkin(4) + t304 * t352;
t491 = pkin(2) * t359;
t345 = pkin(9) + t491;
t436 = -qJ(5) - t345;
t400 = qJD(4) * t436;
t524 = -t165 - t391 + (-t396 - qJD(5)) * t358 + t361 * t400;
t479 = qJD(2) * pkin(2);
t310 = t324 + t479;
t244 = t310 * t493 + t307;
t169 = t361 * t240 - t244 * t358;
t484 = -qJ(5) - pkin(9);
t404 = qJD(4) * t484;
t523 = -t358 * qJD(5) + t361 * t404 - t169 - t391;
t522 = -t358 * t400 + t525 + t526;
t170 = t358 * t240 + t361 * t244;
t521 = -t358 * t404 + t170 + t525;
t355 = sin(pkin(11));
t356 = cos(pkin(11));
t317 = t355 * t361 + t356 * t358;
t302 = t317 * qJD(4);
t507 = t317 * t304 + t302;
t496 = -t355 * t358 + t356 * t361;
t303 = t496 * qJD(4);
t506 = t496 * t304 + t303;
t420 = qJD(2) + qJD(3);
t263 = t306 * t358 - t361 * t420;
t265 = t361 * t306 + t358 * t420;
t191 = t263 * t356 + t355 * t265;
t357 = sin(qJ(6));
t386 = -t263 * t355 + t356 * t265;
t492 = cos(qJ(6));
t110 = t191 * t492 + t357 * t386;
t470 = t110 ^ 2;
t505 = -t357 * t191 + t386 * t492;
t472 = t505 ^ 2;
t520 = -t470 + t472;
t397 = qJD(4) * t420;
t424 = qJD(4) * t358;
t373 = t362 * (t493 * qJD(2) + t407);
t421 = qJD(1) * qJD(2);
t406 = t360 * t421;
t428 = qJD(3) * t411 + t359 * t406;
t504 = -qJD(1) * t373 + t428;
t182 = t306 * t424 + (t504 - t397) * t361;
t366 = t358 * t504;
t183 = qJD(4) * t265 - t366;
t100 = -t355 * t182 + t183 * t356;
t101 = -t182 * t356 - t183 * t355;
t409 = qJD(6) * t492;
t422 = qJD(6) * t357;
t34 = t357 * t100 - t492 * t101 + t191 * t409 + t386 * t422;
t297 = qJD(4) + t304;
t282 = qJD(6) + t297;
t469 = t110 * t282;
t519 = -t34 + t469;
t468 = t110 * t505;
t225 = -pkin(3) * t420 - t244;
t179 = t263 * pkin(4) + qJD(5) + t225;
t108 = t191 * pkin(5) + t179;
t256 = t420 * t322;
t239 = t256 * qJD(1);
t348 = -pkin(2) * t362 - pkin(1);
t332 = qJD(1) * t348;
t216 = t304 * pkin(3) - t306 * pkin(9) + t332;
t308 = t493 * t326;
t245 = t359 * t310 - t308;
t226 = pkin(9) * t420 + t245;
t152 = t216 * t358 + t226 * t361;
t418 = t360 * t479;
t164 = t428 * pkin(9) + t239 * pkin(3) + (-pkin(9) * t373 + t418) * qJD(1);
t413 = qJD(2) * t494;
t395 = qJD(1) * t413;
t312 = t360 * t395;
t313 = t362 * t395;
t425 = qJD(3) * t359;
t173 = t310 * t407 + t312 * t493 + t359 * t313 + t326 * t425;
t73 = -qJD(4) * t152 + t361 * t164 - t358 * t173;
t40 = pkin(4) * t239 + qJ(5) * t182 - qJD(5) * t265 + t73;
t423 = qJD(4) * t361;
t72 = t358 * t164 + t361 * t173 + t216 * t423 - t226 * t424;
t42 = -qJ(5) * t183 - qJD(5) * t263 + t72;
t16 = t355 * t40 + t356 * t42;
t10 = -pkin(10) * t100 + t16;
t502 = pkin(10) * t386;
t151 = t361 * t216 - t226 * t358;
t120 = -qJ(5) * t265 + t151;
t107 = pkin(4) * t297 + t120;
t121 = -qJ(5) * t263 + t152;
t114 = t355 * t121;
t69 = t356 * t107 - t114;
t43 = pkin(5) * t297 - t502 + t69;
t513 = pkin(10) * t191;
t444 = t356 * t121;
t70 = t355 * t107 + t444;
t47 = t70 - t513;
t15 = -t355 * t42 + t356 * t40;
t9 = pkin(5) * t239 - pkin(10) * t101 + t15;
t371 = -t10 * t492 - t357 * t9 - t409 * t43 + t47 * t422;
t518 = t108 * t110 + t371;
t478 = t522 * t355 + t356 * t524;
t477 = t355 * t524 - t522 * t356;
t476 = t355 * t521 + t356 * t523;
t475 = t355 * t523 - t356 * t521;
t35 = qJD(6) * t505 + t492 * t100 + t357 * t101;
t471 = t505 * t282;
t517 = -t35 + t471;
t516 = t507 * pkin(10);
t515 = t306 * pkin(5) + pkin(10) * t506;
t23 = t357 * t43 + t47 * t492;
t4 = -qJD(6) * t23 - t357 * t10 + t492 * t9;
t514 = -t108 * t505 + t4;
t512 = t515 - t478;
t511 = -t516 + t477;
t510 = t515 - t476;
t509 = -t516 + t475;
t508 = t191 * t386;
t247 = t317 * t492 + t357 * t496;
t433 = -qJD(6) * t247 - t357 * t506 - t492 * t507;
t432 = t317 * t422 + t357 * t507 - t409 * t496 - t492 * t506;
t251 = t324 * t359 - t308;
t393 = pkin(2) * t425 - t251;
t398 = t359 * t420;
t255 = t360 * t398 - t373;
t410 = t322 * t423;
t383 = -t255 * t358 + t410;
t503 = -0.2e1 * t421;
t321 = t359 * t360 - t412;
t243 = pkin(3) * t321 - pkin(9) * t322 + t348;
t267 = t359 * t333 - t334 * t493;
t260 = t361 * t267;
t185 = t358 * t243 + t260;
t349 = pkin(4) * t424;
t499 = pkin(5) * t507 + t349;
t498 = t493 * t333 + t359 * t334;
t277 = pkin(4) * t450;
t497 = t277 + t393;
t495 = -t151 * t358 + t152 * t361;
t490 = pkin(4) * t355;
t488 = pkin(10) * t317;
t486 = t496 * pkin(5);
t485 = t361 * pkin(4);
t314 = t436 * t358;
t315 = t345 * t361 + t352;
t236 = t356 * t314 - t315 * t355;
t201 = t236 - t488;
t237 = t355 * t314 + t356 * t315;
t311 = t496 * pkin(10);
t202 = t311 + t237;
t133 = t357 * t201 + t202 * t492;
t483 = qJD(6) * t133 + t357 * t511 + t492 * t512;
t132 = t201 * t492 - t357 * t202;
t482 = -qJD(6) * t132 + t357 * t512 - t492 * t511;
t330 = t484 * t358;
t331 = pkin(9) * t361 + t352;
t261 = t356 * t330 - t331 * t355;
t221 = t261 - t488;
t262 = t355 * t330 + t356 * t331;
t222 = t311 + t262;
t149 = t357 * t221 + t222 * t492;
t481 = qJD(6) * t149 + t357 * t509 + t492 * t510;
t148 = t221 * t492 - t357 * t222;
t480 = -qJD(6) * t148 + t357 * t510 - t492 * t509;
t385 = qJ(5) * t255 - qJD(5) * t322;
t178 = pkin(3) * t256 + pkin(9) * t255 + t418;
t325 = t360 * t413;
t327 = t362 * t413;
t196 = qJD(3) * t498 + t493 * t325 + t359 * t327;
t401 = t361 * t178 - t358 * t196;
t54 = pkin(4) * t256 + t385 * t361 + (-t260 + (qJ(5) * t322 - t243) * t358) * qJD(4) + t401;
t414 = t358 * t178 + t361 * t196 + t243 * t423;
t66 = -qJ(5) * t410 + (-qJD(4) * t267 + t385) * t358 + t414;
t27 = t355 * t54 + t356 * t66;
t71 = t72 * t361;
t343 = pkin(4) * t356 + pkin(5);
t292 = t357 * t343 + t490 * t492;
t75 = -t120 * t355 - t444;
t55 = t75 + t513;
t76 = t356 * t120 - t114;
t56 = t76 - t502;
t474 = t292 * qJD(6) - t357 * t56 + t492 * t55;
t291 = t343 * t492 - t357 * t490;
t473 = -t291 * qJD(6) + t357 * t55 + t492 * t56;
t174 = t310 * t425 + t359 * t312 - t493 * t313 - t326 * t407;
t465 = t174 * t498;
t464 = t182 * t358;
t463 = t183 * t361;
t462 = t386 ^ 2;
t461 = t386 * t297;
t460 = t191 ^ 2;
t459 = t191 * t297;
t204 = t239 * t321;
t457 = t263 * t297;
t456 = t263 * t358;
t455 = t265 * t263;
t454 = t265 * t297;
t453 = t265 * t361;
t452 = t282 * t306;
t451 = t297 * t306;
t449 = t304 * t361;
t448 = t306 * t304;
t447 = t322 * t358;
t446 = t322 * t361;
t442 = t358 * t239;
t440 = t361 * t239;
t364 = qJD(1) ^ 2;
t439 = t362 * t364;
t363 = qJD(2) ^ 2;
t438 = t363 * t360;
t437 = t363 * t362;
t200 = -t277 + t245;
t435 = -t200 + t499;
t434 = t497 + t499;
t184 = t361 * t243 - t267 * t358;
t142 = pkin(4) * t321 - t322 * t352 + t184;
t162 = -qJ(5) * t447 + t185;
t92 = t355 * t142 + t356 * t162;
t431 = t349 + t497;
t427 = t360 ^ 2 - t362 ^ 2;
t419 = t493 * pkin(2);
t417 = -t151 * t449 - t152 * t450 + t71;
t415 = t360 * t439;
t347 = -pkin(3) - t485;
t26 = -t355 * t66 + t356 * t54;
t402 = pkin(1) * t503;
t91 = t356 * t142 - t162 * t355;
t399 = t297 * t361;
t346 = -t419 - pkin(3);
t394 = t362 * t406;
t392 = -t200 + t349;
t390 = t152 * t306 + t174 * t358 + t225 * t423;
t218 = pkin(4) * t447 - t498;
t388 = t151 * t361 + t152 * t358;
t387 = t225 * t304 - t239 * t345;
t230 = t496 * t322;
t74 = pkin(5) * t321 - pkin(10) * t230 + t91;
t229 = t317 * t322;
t77 = -pkin(10) * t229 + t92;
t32 = -t357 * t77 + t492 * t74;
t33 = t357 * t74 + t492 * t77;
t384 = -t151 * t306 - t174 * t361 + t225 * t424;
t161 = -t357 * t229 + t230 * t492;
t382 = -t255 * t361 - t322 * t424;
t102 = pkin(4) * t183 + t174;
t329 = t346 - t485;
t381 = -t332 * t306 - t174;
t22 = -t357 * t47 + t43 * t492;
t246 = t317 * t357 - t492 * t496;
t60 = pkin(5) * t100 + t102;
t380 = -t108 * t433 - t22 * t306 + t60 * t246;
t379 = -t108 * t432 + t23 * t306 + t60 * t247;
t378 = -t102 * t496 + t179 * t507 - t306 * t69;
t377 = t102 * t317 + t179 * t506 + t306 * t70;
t375 = t22 * t432 + t23 * t433 + t371 * t246 - t4 * t247;
t374 = -t15 * t317 + t16 * t496 - t506 * t69 - t507 * t70;
t372 = -qJD(4) * t388 - t73 * t358;
t197 = qJD(3) * t267 + t359 * t325 - t493 * t327;
t369 = t372 + t71;
t131 = pkin(4) * t383 + t197;
t365 = t332 * t304 - t173;
t271 = t347 - t486;
t268 = t329 - t486;
t205 = -t304 ^ 2 + t306 ^ 2;
t198 = t304 * t420 - t504;
t163 = pkin(5) * t229 + t218;
t160 = t229 * t492 + t230 * t357;
t150 = pkin(4) * t265 + pkin(5) * t386;
t143 = t256 * t297 + t204;
t129 = t255 * t496 + t302 * t322;
t128 = t255 * t317 - t303 * t322;
t106 = -t265 * t306 + t297 * t399 + t442;
t105 = -t297 ^ 2 * t358 + t263 * t306 + t440;
t96 = t297 * t456 - t463;
t95 = t265 * t399 - t464;
t90 = -qJD(4) * t185 + t401;
t89 = -t267 * t424 + t414;
t82 = t317 * t239 + t297 * t506 - t306 * t386;
t81 = t191 * t306 + t239 * t496 - t297 * t507;
t78 = -t128 * pkin(5) + t131;
t57 = (-t182 - t457) * t361 + (-t183 - t454) * t358;
t51 = qJD(6) * t161 - t128 * t492 - t357 * t129;
t50 = -t357 * t128 + t129 * t492 + t229 * t409 + t230 * t422;
t45 = t101 * t317 + t386 * t506;
t44 = -t100 * t496 + t191 * t507;
t37 = t110 * t306 - t246 * t239 + t282 * t433;
t36 = t247 * t239 - t282 * t432 - t306 * t505;
t21 = -t317 * t100 + t101 * t496 - t191 * t506 - t386 * t507;
t20 = pkin(10) * t128 + t27;
t19 = pkin(5) * t256 + pkin(10) * t129 + t26;
t12 = -t110 * t433 + t35 * t246;
t11 = -t34 * t247 - t432 * t505;
t7 = t110 * t432 + t34 * t246 - t247 * t35 + t433 * t505;
t6 = -qJD(6) * t33 + t19 * t492 - t357 * t20;
t5 = qJD(6) * t32 + t357 * t19 + t20 * t492;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t394, t427 * t503, t437, -0.2e1 * t394, -t438, 0, -pkin(7) * t437 + t360 * t402, pkin(7) * t438 + t362 * t402, 0, 0, -t306 * t255 - t322 * t504, -t322 * t239 + t255 * t304 - t306 * t256 + t321 * t504, -t255 * t420, t256 * t304 + t204, -t256 * t420, 0, t348 * t239 + t332 * t256 - t197 * t420 + (qJD(1) * t321 + t304) * t418, pkin(2) * t322 * t406 - t196 * t420 - t332 * t255 + t306 * t418 - t348 * t504, -t173 * t321 + t174 * t322 - t196 * t304 + t197 * t306 - t267 * t239 + t244 * t255 - t245 * t256 + t498 * t504, t173 * t267 + t245 * t196 - t244 * t197 + 0.2e1 * t332 * t418 - t465, -t182 * t446 + t265 * t382 (t263 * t361 + t265 * t358) * t255 + (t464 - t463 + (-t453 + t456) * qJD(4)) * t322, -t182 * t321 + t265 * t256 + t297 * t382 + t322 * t440, t183 * t447 + t263 * t383, -t183 * t321 - t263 * t256 - t297 * t383 - t322 * t442, t143, t151 * t256 + t174 * t447 - t183 * t498 + t184 * t239 + t197 * t263 + t225 * t383 + t297 * t90 + t321 * t73, -t152 * t256 + t174 * t446 + t182 * t498 - t185 * t239 + t197 * t265 + t225 * t382 - t297 * t89 - t321 * t72, t182 * t184 - t183 * t185 - t263 * t89 - t265 * t90 + t388 * t255 + (-qJD(4) * t495 - t358 * t72 - t361 * t73) * t322, t151 * t90 + t152 * t89 + t184 * t73 + t185 * t72 + t197 * t225 - t465, t101 * t230 - t129 * t386, -t100 * t230 - t101 * t229 + t128 * t386 + t129 * t191, t101 * t321 - t129 * t297 + t230 * t239 + t256 * t386, t100 * t229 - t128 * t191, -t100 * t321 + t128 * t297 - t191 * t256 - t229 * t239, t143, t100 * t218 + t102 * t229 - t128 * t179 + t131 * t191 + t15 * t321 + t239 * t91 + t256 * t69 + t26 * t297, t101 * t218 + t102 * t230 - t129 * t179 + t131 * t386 - t16 * t321 - t239 * t92 - t256 * t70 - t27 * t297, -t100 * t92 - t101 * t91 + t128 * t70 + t129 * t69 - t15 * t230 - t16 * t229 - t191 * t27 - t26 * t386, t102 * t218 + t131 * t179 + t15 * t91 + t16 * t92 + t26 * t69 + t27 * t70, -t161 * t34 - t50 * t505, t110 * t50 + t160 * t34 - t161 * t35 - t505 * t51, t161 * t239 + t256 * t505 - t282 * t50 - t321 * t34, t110 * t51 + t160 * t35, -t110 * t256 - t160 * t239 - t282 * t51 - t321 * t35, t256 * t282 + t204, t108 * t51 + t110 * t78 + t160 * t60 + t163 * t35 + t22 * t256 + t239 * t32 + t282 * t6 + t321 * t4, -t108 * t50 + t161 * t60 - t163 * t34 - t23 * t256 - t239 * t33 - t282 * t5 + t321 * t371 + t505 * t78, -t110 * t5 + t160 * t371 - t161 * t4 + t22 * t50 - t23 * t51 + t32 * t34 - t33 * t35 - t505 * t6, t108 * t78 + t163 * t60 + t22 * t6 + t23 * t5 + t32 * t4 - t33 * t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t415, t427 * t364, 0, t415, 0, 0, t364 * pkin(1) * t360, pkin(1) * t439, 0, 0, t448, t205, t198, -t448, 0, 0, t251 * t420 + (-qJD(3) * t398 - t304 * t426) * pkin(2) + t381, t252 * t420 + (-t306 * t426 - t407 * t420) * pkin(2) + t365, -t239 * t491 + t504 * t419 + (t245 + t393) * t306 + (-t244 + t252 - t396) * t304, t244 * t251 - t245 * t252 + (-t332 * t426 - t493 * t174 + t173 * t359 + (-t244 * t359 + t245 * t493) * qJD(3)) * pkin(2), t95, t57, t106, t96, t105, -t451, t346 * t183 + t387 * t358 + t393 * t263 + (-t345 * t423 - t358 * t396 - t165) * t297 + t384, -t346 * t182 + t387 * t361 + t393 * t265 + (t345 * t424 + t526) * t297 + t390, t165 * t265 + t166 * t263 + (-t263 * t396 - t183 * t345 + (t265 * t345 - t151) * qJD(4)) * t361 + (t265 * t396 - t182 * t345 - t73 + (t263 * t345 - t152) * qJD(4)) * t358 + t417, -t151 * t165 - t152 * t166 + t174 * t346 - t225 * t251 + (t225 * t359 + t493 * t495) * qJD(3) * pkin(2) + t369 * t345, t45, t21, t82, t44, t81, -t451, t100 * t329 + t191 * t431 + t236 * t239 + t297 * t478 + t378, t101 * t329 - t237 * t239 - t297 * t477 + t386 * t431 + t377, -t100 * t237 - t101 * t236 - t191 * t477 - t386 * t478 + t374, t102 * t329 + t15 * t236 + t16 * t237 + t179 * t431 + t477 * t70 + t478 * t69, t11, t7, t36, t12, t37, -t452, t110 * t434 + t132 * t239 + t268 * t35 - t282 * t483 + t380, -t133 * t239 - t268 * t34 + t282 * t482 + t434 * t505 + t379, t110 * t482 + t132 * t34 - t133 * t35 + t483 * t505 + t375, t108 * t434 + t132 * t4 - t133 * t371 - t22 * t483 - t23 * t482 + t268 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t448, t205, t198, -t448, 0, 0, t245 * t420 + t381, t244 * t420 + t365, 0, 0, t95, t57, t106, t96, t105, -t451, t225 * t450 - pkin(3) * t183 - t169 * t297 - t245 * t263 + (-t297 * t423 - t442) * pkin(9) + t384, t225 * t449 + pkin(3) * t182 + t170 * t297 - t245 * t265 + (t297 * t424 - t440) * pkin(9) + t390, t169 * t265 + t170 * t263 + (-t464 - t463 + (t453 + t456) * qJD(4)) * pkin(9) + t372 + t417, -pkin(3) * t174 + pkin(9) * t369 - t151 * t169 - t152 * t170 - t225 * t245, t45, t21, t82, t44, t81, -t451, t100 * t347 + t191 * t392 + t239 * t261 + t297 * t476 + t378, t101 * t347 - t239 * t262 - t297 * t475 + t386 * t392 + t377, -t100 * t262 - t101 * t261 - t191 * t475 - t386 * t476 + t374, t102 * t347 + t15 * t261 + t16 * t262 + t179 * t392 + t475 * t70 + t476 * t69, t11, t7, t36, t12, t37, -t452, t110 * t435 + t148 * t239 + t271 * t35 - t282 * t481 + t380, -t149 * t239 - t271 * t34 + t282 * t480 + t435 * t505 + t379, t110 * t480 + t148 * t34 - t149 * t35 + t481 * t505 + t375, t108 * t435 + t148 * t4 - t149 * t371 - t22 * t481 - t23 * t480 + t271 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t455, -t263 ^ 2 + t265 ^ 2, -t182 + t457, -t455, -t306 * t423 - t358 * t397 + t366 + t454, t239, t152 * t297 - t225 * t265 + t73, t151 * t297 + t225 * t263 - t72, 0, 0, t508, -t460 + t462, t101 + t459, -t508, -t100 + t461, t239, -t179 * t386 - t75 * t297 + (-t191 * t265 + t239 * t356) * pkin(4) + t15, t179 * t191 + t76 * t297 + (-t239 * t355 - t265 * t386) * pkin(4) - t16 (-t100 * t355 - t101 * t356) * pkin(4) + (t70 + t75) * t386 + (t76 - t69) * t191, -t69 * t75 - t70 * t76 + (t15 * t356 + t16 * t355 - t179 * t265) * pkin(4), t468, t520, t519, -t468, t517, t239, -t150 * t110 + t291 * t239 - t282 * t474 + t514, -t150 * t505 - t292 * t239 + t282 * t473 + t518, t291 * t34 - t292 * t35 + (t23 + t474) * t505 + (t473 - t22) * t110, -t108 * t150 - t22 * t474 - t23 * t473 + t291 * t4 - t292 * t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100 + t461, t101 - t459, -t460 - t462, t191 * t70 + t386 * t69 + t102, 0, 0, 0, 0, 0, 0, t35 + t471, -t34 - t469, -t470 - t472, t110 * t23 + t22 * t505 + t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t468, t520, t519, -t468, t517, t239, t23 * t282 + t514, t22 * t282 + t518, 0, 0;];
tauc_reg  = t1;
