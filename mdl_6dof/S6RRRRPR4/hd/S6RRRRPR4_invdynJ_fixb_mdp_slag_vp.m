% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR4_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR4_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRPR4_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:09:43
% EndTime: 2019-03-09 22:10:02
% DurationCPUTime: 13.73s
% Computational Cost: add. (14274->645), mult. (31567->826), div. (0->0), fcn. (24053->16), ass. (0->305)
t1004 = cos(qJ(3));
t860 = cos(qJ(2));
t862 = -pkin(8) - pkin(7);
t809 = t862 * t860;
t800 = qJD(1) * t809;
t855 = sin(qJ(3));
t777 = t855 * t800;
t856 = sin(qJ(2));
t808 = t862 * t856;
t798 = qJD(1) * t808;
t718 = t1004 * t798 + t777;
t929 = qJD(3) * t1004;
t1034 = -pkin(2) * t929 + t718;
t930 = qJD(1) * t1004;
t950 = qJD(1) * t856;
t1020 = -t855 * t950 + t860 * t930;
t764 = qJD(4) - t1020;
t858 = cos(qJ(6));
t969 = t855 * t860;
t774 = -qJD(1) * t969 - t856 * t930;
t846 = qJD(2) + qJD(3);
t854 = sin(qJ(4));
t859 = cos(qJ(4));
t730 = -t774 * t854 - t859 * t846;
t850 = sin(pkin(11));
t851 = cos(pkin(11));
t897 = t774 * t859 - t846 * t854;
t898 = -t730 * t851 + t850 * t897;
t966 = t858 * t898;
t658 = t730 * t850 + t851 * t897;
t853 = sin(qJ(6));
t986 = t658 * t853;
t597 = t966 + t986;
t749 = qJD(6) + t764;
t988 = t597 * t749;
t1033 = t1020 * t846;
t849 = qJ(2) + qJ(3);
t842 = sin(t849);
t857 = sin(qJ(1));
t861 = cos(qJ(1));
t911 = g(1) * t861 + g(2) * t857;
t1030 = t911 * t842;
t843 = cos(t849);
t995 = g(3) * t843;
t1005 = -t995 + t1030;
t922 = qJDD(1) * t1004;
t942 = qJDD(1) * t860;
t672 = t855 * t942 + t856 * t922 + t1033;
t793 = t1004 * t856 + t969;
t722 = t846 * t793;
t943 = qJDD(1) * t856;
t902 = t855 * t943 - t860 * t922;
t673 = qJD(1) * t722 + t902;
t1003 = pkin(2) * t860;
t837 = pkin(1) + t1003;
t944 = qJD(1) * qJD(2);
t928 = t856 * t944;
t766 = pkin(2) * t928 - qJDD(1) * t837;
t605 = pkin(3) * t673 - pkin(9) * t672 + t766;
t600 = t859 * t605;
t845 = qJDD(2) + qJDD(3);
t927 = t860 * t944;
t725 = qJDD(2) * pkin(2) - t862 * (-t927 - t943);
t729 = t862 * (-t928 + t942);
t990 = qJD(2) * pkin(2);
t779 = t798 + t990;
t949 = qJD(3) * t855;
t870 = -t1004 * t729 + t855 * t725 + t779 * t929 + t800 * t949;
t619 = t845 * pkin(9) + t870;
t946 = qJD(4) * t859;
t947 = qJD(4) * t854;
t633 = t859 * t672 + t774 * t947 + t854 * t845 + t846 * t946;
t807 = t837 * qJD(1);
t685 = -pkin(3) * t1020 + pkin(9) * t774 - t807;
t778 = t1004 * t800;
t710 = t855 * t779 - t778;
t693 = pkin(9) * t846 + t710;
t636 = t685 * t854 + t693 * t859;
t669 = qJDD(4) + t673;
t539 = pkin(4) * t669 - qJ(5) * t633 - qJD(4) * t636 + qJD(5) * t897 - t619 * t854 + t600;
t634 = -qJD(4) * t897 + t672 * t854 - t859 * t845;
t878 = t854 * t605 + t859 * t619 + t685 * t946 - t693 * t947;
t541 = -qJ(5) * t634 - qJD(5) * t730 + t878;
t527 = t851 * t539 - t541 * t850;
t586 = t633 * t851 - t634 * t850;
t522 = pkin(5) * t669 - pkin(10) * t586 + t527;
t528 = t850 * t539 + t851 * t541;
t585 = -t633 * t850 - t634 * t851;
t523 = pkin(10) * t585 + t528;
t1014 = pkin(10) * t898;
t635 = t859 * t685 - t693 * t854;
t608 = qJ(5) * t897 + t635;
t592 = pkin(4) * t764 + t608;
t609 = -qJ(5) * t730 + t636;
t974 = t851 * t609;
t567 = t850 * t592 + t974;
t550 = t567 + t1014;
t945 = qJD(6) * t853;
t549 = t550 * t945;
t709 = t1004 * t779 + t777;
t692 = -t846 * pkin(3) - t709;
t651 = t730 * pkin(4) + qJD(5) + t692;
t593 = -pkin(5) * t898 + t651;
t840 = qJ(4) + pkin(11) + qJ(6);
t828 = sin(t840);
t829 = cos(t840);
t977 = t843 * t857;
t737 = t828 * t861 - t829 * t977;
t976 = t843 * t861;
t739 = t828 * t857 + t829 * t976;
t831 = g(3) * t842;
t1032 = g(1) * t739 - g(2) * t737 - t853 * t522 - t858 * t523 - t593 * t597 + t829 * t831 + t549;
t1015 = -t858 * t658 + t853 * t898;
t668 = qJDD(6) + t669;
t1031 = t668 * MDP(31) + (t1015 ^ 2 - t597 ^ 2) * MDP(28) - t597 * MDP(27) * t1015;
t788 = t850 * t859 + t851 * t854;
t1022 = t764 * t788;
t894 = t850 * t854 - t851 * t859;
t1021 = t764 * t894;
t705 = -pkin(3) * t774 - pkin(9) * t1020;
t691 = pkin(2) * t950 + t705;
t1029 = t1034 * t859 + t854 * t691;
t981 = t1020 * t854;
t1028 = -qJ(5) * t981 - t859 * qJD(5);
t684 = t859 * t691;
t844 = t859 * qJ(5);
t909 = -t774 * pkin(4) - t1020 * t844;
t834 = pkin(2) * t855 + pkin(9);
t964 = -qJ(5) - t834;
t917 = qJD(4) * t964;
t1026 = t859 * t917 - t684 - t909 + (-qJD(5) + t1034) * t854;
t698 = t859 * t705;
t852 = -qJ(5) - pkin(9);
t923 = qJD(4) * t852;
t1025 = t859 * t923 - t698 - t909 + (-qJD(5) + t709) * t854;
t1024 = -t854 * t917 + t1028 + t1029;
t957 = t854 * t705 + t859 * t709;
t1023 = -t854 * t923 + t1028 + t957;
t989 = t1015 * t749;
t736 = t828 * t977 + t829 * t861;
t738 = -t828 * t976 + t829 * t857;
t921 = t858 * t522 - t853 * t523;
t1019 = -g(1) * t738 + g(2) * t736 - t593 * t1015 + t828 * t831 + t921;
t1018 = pkin(10) * t658;
t712 = t788 * t858 - t853 * t894;
t963 = -qJD(6) * t712 + t1021 * t853 - t1022 * t858;
t896 = -t788 * t853 - t858 * t894;
t962 = -qJD(6) * t896 + t1021 * t858 + t1022 * t853;
t717 = t855 * t798 - t778;
t912 = pkin(2) * t949 - t717;
t883 = t1004 * t860 - t855 * t856;
t721 = t846 * t883;
t931 = t793 * t946;
t1016 = t721 * t854 + t931;
t910 = g(1) * t857 - g(2) * t861;
t1013 = t842 * t910;
t961 = t1024 * t850 + t1026 * t851;
t960 = -t1024 * t851 + t1026 * t850;
t1011 = t1022 * pkin(10);
t959 = t1023 * t850 + t1025 * t851;
t958 = -t1023 * t851 + t1025 * t850;
t838 = pkin(4) * t947;
t1010 = pkin(5) * t1022 + t838;
t991 = t859 * pkin(4);
t835 = pkin(3) + t991;
t918 = t843 * t835 - t842 * t852;
t746 = pkin(4) * t981;
t1009 = -t746 + t912;
t1008 = t1004 * t808 + t855 * t809;
t965 = t859 * t861;
t971 = t854 * t857;
t756 = t843 * t971 + t965;
t968 = t857 * t859;
t970 = t854 * t861;
t758 = -t843 * t970 + t968;
t1007 = -g(1) * t758 + g(2) * t756;
t1006 = -t774 * pkin(5) - pkin(10) * t1021;
t920 = -t858 * t585 + t586 * t853;
t536 = qJD(6) * t1015 + t920;
t1002 = pkin(4) * t850;
t1000 = pkin(10) * t788;
t994 = g(3) * t854;
t992 = t894 * pkin(5);
t987 = t633 * t854;
t985 = t692 * t1020;
t983 = t730 * t764;
t982 = t897 * t764;
t980 = t793 * t854;
t979 = t793 * t859;
t601 = t850 * t609;
t972 = t854 * t669;
t566 = t851 * t592 - t601;
t547 = pkin(5) * t764 + t1018 + t566;
t967 = t858 * t547;
t734 = -t1004 * t809 + t855 * t808;
t726 = t859 * t734;
t941 = t856 * t990;
t650 = pkin(3) * t722 - pkin(9) * t721 + t941;
t647 = t859 * t650;
t934 = qJD(2) * t862;
t799 = t856 * t934;
t801 = t860 * t934;
t664 = qJD(3) * t1008 + t1004 * t799 + t855 * t801;
t708 = -pkin(3) * t883 - pkin(9) * t793 - t837;
t893 = -qJ(5) * t721 - qJD(5) * t793;
t555 = pkin(4) * t722 - t664 * t854 + t647 + t893 * t859 + (-t726 + (qJ(5) * t793 - t708) * t854) * qJD(4);
t937 = t854 * t650 + t859 * t664 + t708 * t946;
t563 = -qJ(5) * t931 + (-qJD(4) * t734 + t893) * t854 + t937;
t534 = t850 * t555 + t851 * t563;
t570 = t851 * t608 - t601;
t700 = t859 * t708;
t627 = -pkin(4) * t883 - t734 * t854 - t793 * t844 + t700;
t954 = t854 * t708 + t726;
t642 = -qJ(5) * t980 + t954;
t584 = t850 * t627 + t851 * t642;
t955 = t1009 + t1010;
t936 = t746 + t710;
t953 = -t936 + t1010;
t783 = t964 * t854;
t784 = t834 * t859 + t844;
t703 = t850 * t783 + t851 * t784;
t805 = t852 * t854;
t806 = pkin(9) * t859 + t844;
t728 = t850 * t805 + t851 * t806;
t847 = t856 ^ 2;
t952 = -t860 ^ 2 + t847;
t948 = qJD(4) * t793;
t940 = qJD(4) * pkin(9) * t764;
t938 = qJD(6) * t966 + t853 * t585 + t858 * t586;
t935 = g(1) * t976 + g(2) * t977 + t831;
t682 = t692 * t946;
t926 = pkin(4) * t854 - t862;
t913 = -t1004 * t725 - t855 * t729 + t779 * t949 - t800 * t929;
t620 = -pkin(3) * t845 + t913;
t924 = -t620 - t995;
t533 = t851 * t555 - t563 * t850;
t569 = -t608 * t850 - t974;
t583 = t851 * t627 - t642 * t850;
t702 = t851 * t783 - t784 * t850;
t727 = t851 * t805 - t806 * t850;
t916 = t859 * t764;
t915 = -qJD(4) * t685 - t619;
t836 = -pkin(2) * t1004 - pkin(3);
t908 = -t693 * t946 + t600;
t782 = t894 * pkin(10);
t671 = -t782 + t703;
t907 = qJD(6) * t671 + t1006 - t961;
t689 = -t782 + t728;
t906 = qJD(6) * t689 + t1006 - t959;
t670 = t702 - t1000;
t905 = -qJD(6) * t670 + t1011 - t960;
t688 = t727 - t1000;
t904 = -qJD(6) * t688 + t1011 - t958;
t903 = -pkin(9) * t669 - t985;
t532 = t853 * t547 + t858 * t550;
t900 = -t669 * t834 - t985;
t695 = t788 * t793;
t696 = t894 * t793;
t899 = -t858 * t695 + t696 * t853;
t641 = -t695 * t853 - t696 * t858;
t895 = t835 * t842 + t843 * t852;
t892 = t620 * t854 - t636 * t774 + t843 * t994 + t682;
t891 = t1030 * t859 + t635 * t774 + t692 * t947;
t889 = pkin(4) * t980 - t1008;
t830 = pkin(4) * t851 + pkin(5);
t888 = t1002 * t858 + t830 * t853;
t887 = -t1002 * t853 + t830 * t858;
t885 = -0.2e1 * pkin(1) * t944 - pkin(7) * qJDD(2);
t884 = t837 + t918;
t882 = t721 * t859 - t793 * t947;
t881 = t836 - t991;
t665 = -t1004 * t801 + t855 * t799 + t808 * t949 - t809 * t929;
t535 = t658 * t945 + t938;
t876 = pkin(4) * t1016 + t665;
t863 = qJD(2) ^ 2;
t874 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t863 + t910;
t864 = qJD(1) ^ 2;
t873 = pkin(1) * t864 - pkin(7) * qJDD(1) + t911;
t579 = pkin(4) * t634 + qJDD(5) + t620;
t872 = -t807 * t774 + t1005 - t913;
t869 = t1021 * t566 - t1022 * t567 - t527 * t788 - t528 * t894 - t935;
t531 = -t550 * t853 + t967;
t546 = -pkin(5) * t585 + t579;
t868 = t1005 * t829 + t531 * t774 - t546 * t896 - t593 * t963;
t867 = -t1005 * t828 - t532 * t774 + t546 * t712 - t962 * t593;
t866 = t1020 * t807 - t870 + t935;
t865 = (t1015 * t963 + t535 * t896 - t536 * t712 - t597 * t962) * MDP(28) + (-t1015 * t962 + t535 * t712) * MDP(27) + (t1015 * t774 + t668 * t712 - t749 * t962) * MDP(29) + (t597 * t774 + t668 * t896 + t749 * t963) * MDP(30) + ((t633 - t983) * t859 + (-t634 + t982) * t854) * MDP(19) + (-t897 * t916 + t987) * MDP(18) + (-t764 ^ 2 * t854 + t669 * t859 - t730 * t774) * MDP(21) + (t764 * t916 - t774 * t897 + t972) * MDP(20) + (t672 - t1033) * MDP(13) + (-t902 + (-qJD(1) * t793 - t774) * t846) * MDP(14) + (-t1020 ^ 2 + t774 ^ 2) * MDP(12) + t845 * MDP(15) + (MDP(11) * t1020 + MDP(22) * t764 + MDP(31) * t749) * t774;
t759 = t843 * t965 + t971;
t757 = -t843 * t968 + t970;
t742 = -t835 + t992;
t735 = t881 + t992;
t643 = t695 * pkin(5) + t889;
t632 = -pkin(4) * t897 - pkin(5) * t658;
t615 = t721 * t894 + t788 * t948;
t614 = -t721 * t788 + t894 * t948;
t572 = -t614 * pkin(5) + t876;
t571 = -pkin(10) * t695 + t584;
t568 = -pkin(5) * t883 + pkin(10) * t696 + t583;
t557 = t570 + t1018;
t556 = t569 - t1014;
t552 = qJD(6) * t641 - t858 * t614 - t615 * t853;
t551 = qJD(6) * t899 + t614 * t853 - t615 * t858;
t530 = pkin(10) * t614 + t534;
t529 = pkin(5) * t722 + pkin(10) * t615 + t533;
t1 = [(t1015 * t722 - t535 * t883 + t551 * t749 + t641 * t668) * MDP(29) + (-g(1) * t736 - g(2) * t738 - t532 * t722 + t643 * t535 + t546 * t641 - t549 * t883 + t593 * t551 + t572 * t1015 + (-(-qJD(6) * t571 + t529) * t749 - t568 * t668 + t522 * t883) * t853 + (-(qJD(6) * t568 + t530) * t749 - t571 * t668 + (qJD(6) * t547 + t523) * t883) * t858) * MDP(33) + (t1015 * t551 + t535 * t641) * MDP(27) + ((-t734 * t946 + t647) * t764 + t700 * t669 - t908 * t883 + t635 * t722 + t665 * t730 - t1008 * t634 + t793 * t682 - g(1) * t757 - g(2) * t759 + ((-qJD(4) * t708 - t664) * t764 - t734 * t669 - t915 * t883 + t620 * t793 + t692 * t721) * t854) * MDP(23) + (-(-t734 * t947 + t937) * t764 - t954 * t669 + t878 * t883 - t636 * t722 - t665 * t897 - t1008 * t633 + t620 * t979 - g(1) * t756 - g(2) * t758 + t882 * t692) * MDP(24) + 0.2e1 * (t856 * t942 - t944 * t952) * MDP(5) + (qJDD(1) * t847 + 0.2e1 * t856 * t927) * MDP(4) + (t528 * t584 + t567 * t534 + t527 * t583 + t566 * t533 + t579 * t889 + t651 * t876 + (-g(1) * t926 - g(2) * t884) * t861 + (g(1) * t884 - g(2) * t926) * t857) * MDP(26) + t910 * MDP(2) + t911 * MDP(3) + (t856 * t885 + t860 * t874) * MDP(9) + (-t856 * t874 + t860 * t885) * MDP(10) + (-t1016 * t764 + t634 * t883 - t722 * t730 - t793 * t972) * MDP(21) + (-t1015 * t552 + t535 * t899 - t536 * t641 + t551 * t597) * MDP(28) + ((t529 * t858 - t530 * t853) * t749 + (t568 * t858 - t571 * t853) * t668 - t921 * t883 + t531 * t722 - t572 * t597 + t643 * t536 - t546 * t899 + t593 * t552 - g(1) * t737 - g(2) * t739 + ((-t568 * t853 - t571 * t858) * t749 + t532 * t883) * qJD(6)) * MDP(32) + (t536 * t883 - t552 * t749 + t597 * t722 + t668 * t899) * MDP(30) + (t1008 * t845 - t1020 * t941 - t665 * t846 - t673 * t837 - t722 * t807 - t766 * t883 + t843 * t910) * MDP(16) + (t1020 * t721 + t672 * t883 - t673 * t793 + t722 * t774) * MDP(12) + (qJDD(2) * t856 + t860 * t863) * MDP(6) + (qJDD(2) * t860 - t856 * t863) * MDP(7) + (t721 * t846 + t793 * t845) * MDP(13) + (t527 * t696 - t528 * t695 + t533 * t658 + t534 * t898 + t566 * t615 + t567 * t614 - t583 * t586 + t584 * t585 + t1013) * MDP(25) + (t633 * t979 - t882 * t897) * MDP(18) + ((-t730 * t859 + t854 * t897) * t721 + (-t987 - t634 * t859 + (t730 * t854 + t859 * t897) * qJD(4)) * t793) * MDP(19) + (-t722 * t846 + t845 * t883) * MDP(14) + (-t669 * t883 + t722 * t764) * MDP(22) + (-t668 * t883 + t722 * t749) * MDP(31) + (t672 * t793 - t721 * t774) * MDP(11) + (-t633 * t883 + t669 * t979 - t722 * t897 + t764 * t882) * MDP(20) + qJDD(1) * MDP(1) + (-t664 * t846 - t672 * t837 - t721 * t807 - t734 * t845 + t766 * t793 - t774 * t941 - t1013) * MDP(17); (t717 * t846 + (t1004 * t845 + t1020 * t950 - t846 * t949) * pkin(2) + t872) * MDP(16) + t865 + (t585 * t703 - t586 * t702 + t658 * t961 + t898 * t960 + t869) * MDP(25) + (t528 * t703 + t527 * t702 + t579 * t881 - g(3) * (t918 + t1003) + (t838 + t1009) * t651 + t960 * t567 + t961 * t566 + t911 * (pkin(2) * t856 + t895)) * MDP(26) + (t836 * t634 + t924 * t859 + t900 * t854 + t912 * t730 + (t1034 * t854 - t834 * t946 - t684) * t764 + t891) * MDP(23) + (-g(3) * t860 + t856 * t873) * MDP(9) + (t836 * t633 + t900 * t859 - t854 * t1030 - t912 * t897 + (t834 * t947 + t1029) * t764 + t892) * MDP(24) + (g(3) * t856 + t860 * t873) * MDP(10) + ((t670 * t858 - t671 * t853) * t668 + t735 * t536 + (t853 * t905 - t858 * t907) * t749 - t955 * t597 + t868) * MDP(32) + qJDD(2) * MDP(8) + (-(t670 * t853 + t671 * t858) * t668 + t735 * t535 + (t853 * t907 + t858 * t905) * t749 + t955 * t1015 + t867) * MDP(33) + (t718 * t846 + (t774 * t950 - t845 * t855 - t846 * t929) * pkin(2) + t866) * MDP(17) + MDP(6) * t943 + MDP(7) * t942 + (-MDP(4) * t856 * t860 + MDP(5) * t952) * t864; t865 + (t585 * t728 - t586 * t727 + t658 * t959 + t898 * t958 + t869) * MDP(25) + (t528 * t728 + t527 * t727 - t579 * t835 - g(3) * t918 + (-t936 + t838) * t651 + t958 * t567 + t959 * t566 + t911 * t895) * MDP(26) + (t709 * t846 + t866) * MDP(17) + (t710 * t846 + t872) * MDP(16) + ((t688 * t858 - t689 * t853) * t668 + t742 * t536 + (t853 * t904 - t858 * t906) * t749 - t953 * t597 + t868) * MDP(32) + (-(t688 * t853 + t689 * t858) * t668 + t742 * t535 + (t853 * t906 + t858 * t904) * t749 + t953 * t1015 + t867) * MDP(33) + (-pkin(3) * t633 + t957 * t764 + t710 * t897 + t903 * t859 + (-t1030 + t940) * t854 + t892) * MDP(24) + (-pkin(3) * t634 - t698 * t764 - t710 * t730 + (t709 * t764 + t903) * t854 + (t924 - t940) * t859 + t891) * MDP(23); -t897 * t730 * MDP(18) + (-t730 ^ 2 + t897 ^ 2) * MDP(19) + (t633 + t983) * MDP(20) + (-t634 - t982) * MDP(21) + t669 * MDP(22) + (t636 * t764 + t692 * t897 + (t915 + t831) * t854 + t908 + t1007) * MDP(23) + (g(1) * t759 - g(2) * t757 + t635 * t764 + t692 * t730 + t831 * t859 - t878) * MDP(24) + ((t585 * t850 - t586 * t851) * pkin(4) + (t566 - t570) * t898 + (-t567 - t569) * t658) * MDP(25) + (-t566 * t569 - t567 * t570 + (t527 * t851 + t528 * t850 + t651 * t897 + t842 * t994 + t1007) * pkin(4)) * MDP(26) + (t535 - t988) * MDP(29) + (-t536 + t989) * MDP(30) + (t887 * t668 - (t556 * t858 - t557 * t853) * t749 + t632 * t597 + (-t749 * t888 - t532) * qJD(6) + t1019) * MDP(32) + (-t888 * t668 + (t556 * t853 + t557 * t858) * t749 - t632 * t1015 + (-t749 * t887 - t967) * qJD(6) + t1032) * MDP(33) + t1031; (-t658 ^ 2 - t898 ^ 2) * MDP(25) + (-t566 * t658 - t567 * t898 - t1005 + t579) * MDP(26) + (t536 + t989) * MDP(32) + (t535 + t988) * MDP(33); (t938 - t988) * MDP(29) + (-t920 + t989) * MDP(30) + (t532 * t749 + t1019) * MDP(32) + (t531 * t749 + t1032) * MDP(33) + (MDP(29) * t986 - MDP(30) * t1015 - MDP(32) * t532 - MDP(33) * t967) * qJD(6) + t1031;];
tau  = t1;
