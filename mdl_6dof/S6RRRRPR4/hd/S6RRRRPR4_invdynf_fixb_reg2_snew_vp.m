% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 20:14
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:14:28
% EndTime: 2019-05-07 20:14:38
% DurationCPUTime: 10.84s
% Computational Cost: add. (128262->341), mult. (259924->483), div. (0->0), fcn. (194698->12), ass. (0->273)
t2383 = qJD(2) + qJD(3);
t2377 = t2383 ^ 2;
t2348 = sin(qJ(3));
t2353 = cos(qJ(3));
t2354 = cos(qJ(2));
t2393 = qJD(1) * t2354;
t2349 = sin(qJ(2));
t2394 = qJD(1) * t2349;
t2312 = t2348 * t2394 - t2353 * t2393;
t2311 = qJD(4) + t2312;
t2308 = qJD(6) + t2311;
t2407 = qJD(6) + t2308;
t2374 = qJD(2) * t2393;
t2379 = t2349 * qJDD(1);
t2320 = t2374 + t2379;
t2340 = t2354 * qJDD(1);
t2375 = qJD(2) * t2394;
t2321 = t2340 - t2375;
t2368 = t2353 * t2320 + t2348 * t2321;
t2285 = -t2312 * qJD(3) + t2368;
t2406 = t2312 * t2383 - t2285;
t2343 = t2354 ^ 2;
t2357 = qJD(1) ^ 2;
t2350 = sin(qJ(1));
t2355 = cos(qJ(1));
t2329 = t2350 * g(1) - t2355 * g(2);
t2365 = qJDD(1) * pkin(1) + t2329;
t2366 = qJD(2) * pkin(2) - pkin(8) * t2394;
t2287 = t2321 * pkin(2) + (pkin(8) * t2343 + pkin(7)) * t2357 - t2366 * t2394 + t2365;
t2314 = (t2348 * t2354 + t2349 * t2353) * qJD(1);
t2347 = sin(qJ(4));
t2352 = cos(qJ(4));
t2297 = t2314 * t2347 - t2352 * t2383;
t2298 = t2352 * t2314 + t2347 * t2383;
t2344 = sin(pkin(11));
t2345 = cos(pkin(11));
t2275 = t2345 * t2297 + t2298 * t2344;
t2277 = -t2297 * t2344 + t2298 * t2345;
t2346 = sin(qJ(6));
t2351 = cos(qJ(6));
t2247 = t2351 * t2275 + t2277 * t2346;
t2405 = t2247 ^ 2;
t2249 = -t2275 * t2346 + t2277 * t2351;
t2404 = t2249 ^ 2;
t2403 = t2275 ^ 2;
t2402 = t2277 ^ 2;
t2401 = t2297 ^ 2;
t2400 = t2298 ^ 2;
t2399 = t2308 ^ 2;
t2398 = t2311 ^ 2;
t2397 = t2312 ^ 2;
t2396 = t2314 ^ 2;
t2395 = -2 * qJD(5);
t2392 = t2247 * t2249;
t2391 = t2275 * t2277;
t2390 = t2277 * t2311;
t2389 = t2297 * t2298;
t2388 = t2311 * t2275;
t2387 = t2311 * t2297;
t2386 = t2312 * t2314;
t2385 = t2343 * t2357;
t2384 = t2349 * t2357;
t2372 = t2383 * t2314;
t2373 = -t2314 * qJD(3) - t2348 * t2320 + t2353 * t2321;
t2264 = t2372 - t2373;
t2220 = t2264 * pkin(3) + pkin(9) * t2406 - t2287;
t2330 = -g(1) * t2355 - g(2) * t2350;
t2360 = -pkin(1) * t2357 + qJDD(1) * pkin(7) + t2330;
t2305 = -t2349 * g(3) + t2354 * t2360;
t2283 = -pkin(2) * t2385 + t2321 * pkin(8) - qJD(2) * t2366 + t2305;
t2359 = t2349 * t2360;
t2358 = -t2359 - t2320 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2384 - g(3)) * t2354;
t2251 = t2353 * t2283 + t2348 * t2358;
t2293 = pkin(3) * t2312 - pkin(9) * t2314;
t2378 = qJDD(2) + qJDD(3);
t2229 = -pkin(3) * t2377 + pkin(9) * t2378 - t2312 * t2293 + t2251;
t2193 = t2347 * t2220 + t2352 * t2229;
t2382 = -t2308 + qJD(6);
t2381 = -t2311 + qJD(4);
t2342 = t2349 ^ 2;
t2380 = t2342 + t2343;
t2192 = t2352 * t2220 - t2347 * t2229;
t2284 = qJDD(4) - t2373;
t2252 = t2284 - t2389;
t2363 = -t2352 * t2285 - t2347 * t2378;
t2257 = -t2297 * qJD(4) - t2363;
t2178 = (-t2257 - t2387) * qJ(5) + t2252 * pkin(4) + t2192;
t2288 = pkin(4) * t2311 - qJ(5) * t2298;
t2369 = t2347 * t2285 - t2352 * t2378;
t2364 = -qJD(4) * t2298 - t2369;
t2184 = -pkin(4) * t2401 + qJ(5) * t2364 - t2311 * t2288 + t2193;
t2148 = t2344 * t2178 + t2345 * t2184 + t2275 * t2395;
t2223 = t2345 * t2257 + t2344 * t2364;
t2370 = t2257 * t2344 - t2345 * t2364;
t2371 = -t2346 * t2223 - t2351 * t2370;
t2215 = -t2223 - t2388;
t2232 = t2284 - t2391;
t2250 = -t2283 * t2348 + t2353 * t2358;
t2147 = t2345 * t2178 - t2344 * t2184 + t2277 * t2395;
t2367 = -qJDD(6) - t2284;
t2362 = -t2351 * t2223 + t2346 * t2370;
t2228 = -t2378 * pkin(3) - t2377 * pkin(9) + t2293 * t2314 - t2250;
t2194 = -t2364 * pkin(4) - t2401 * qJ(5) + t2288 * t2298 + qJDD(5) + t2228;
t2356 = qJD(2) ^ 2;
t2334 = t2354 * t2384;
t2332 = -t2356 - t2385;
t2331 = -t2342 * t2357 - t2356;
t2328 = -qJDD(2) + t2334;
t2327 = qJDD(2) + t2334;
t2326 = t2380 * t2357;
t2325 = -qJDD(1) * t2350 - t2355 * t2357;
t2324 = qJDD(1) * t2355 - t2350 * t2357;
t2323 = t2380 * qJDD(1);
t2322 = t2340 - 0.2e1 * t2375;
t2319 = 0.2e1 * t2374 + t2379;
t2315 = t2357 * pkin(7) + t2365;
t2304 = -t2354 * g(3) - t2359;
t2303 = -t2396 - t2377;
t2302 = t2328 * t2354 - t2331 * t2349;
t2301 = -t2327 * t2349 + t2332 * t2354;
t2300 = t2328 * t2349 + t2331 * t2354;
t2299 = t2327 * t2354 + t2332 * t2349;
t2292 = -t2378 - t2386;
t2291 = t2378 - t2386;
t2290 = -t2377 - t2397;
t2286 = -t2396 - t2397;
t2282 = -t2304 * t2349 + t2305 * t2354;
t2281 = t2304 * t2354 + t2305 * t2349;
t2274 = -t2398 - t2400;
t2269 = t2292 * t2353 - t2303 * t2348;
t2268 = t2292 * t2348 + t2303 * t2353;
t2267 = -qJD(2) * t2312 - t2368;
t2265 = t2372 + t2373;
t2263 = -t2398 - t2401;
t2261 = t2290 * t2353 - t2291 * t2348;
t2260 = t2290 * t2348 + t2291 * t2353;
t2259 = -t2400 - t2401;
t2258 = pkin(5) * t2311 - pkin(10) * t2277;
t2254 = -t2398 - t2402;
t2253 = -t2284 - t2389;
t2246 = t2297 * t2381 + t2363;
t2245 = t2257 - t2387;
t2244 = -t2298 * t2381 - t2369;
t2243 = (qJD(4) + t2311) * t2298 + t2369;
t2242 = -t2398 - t2403;
t2241 = -t2268 * t2349 + t2269 * t2354;
t2240 = t2268 * t2354 + t2269 * t2349;
t2239 = t2265 * t2353 - t2267 * t2348;
t2238 = t2265 * t2348 + t2267 * t2353;
t2236 = -t2260 * t2349 + t2261 * t2354;
t2235 = t2260 * t2354 + t2261 * t2349;
t2234 = -t2399 - t2404;
t2233 = -t2284 - t2391;
t2231 = t2253 * t2352 - t2274 * t2347;
t2230 = t2253 * t2347 + t2274 * t2352;
t2226 = -t2252 * t2347 + t2263 * t2352;
t2225 = t2252 * t2352 + t2263 * t2347;
t2224 = -t2402 - t2403;
t2217 = -t2250 * t2348 + t2251 * t2353;
t2216 = t2250 * t2353 + t2251 * t2348;
t2214 = t2223 - t2388;
t2213 = -t2370 + t2390;
t2212 = t2370 + t2390;
t2211 = t2244 * t2352 - t2246 * t2347;
t2210 = t2244 * t2347 + t2246 * t2352;
t2209 = t2233 * t2345 - t2254 * t2344;
t2208 = t2233 * t2344 + t2254 * t2345;
t2207 = -t2399 - t2405;
t2206 = -t2238 * t2349 + t2239 * t2354;
t2205 = t2238 * t2354 + t2239 * t2349;
t2204 = t2367 - t2392;
t2203 = -t2367 - t2392;
t2202 = t2231 * t2353 + t2245 * t2348;
t2201 = t2231 * t2348 - t2245 * t2353;
t2200 = -t2232 * t2344 + t2242 * t2345;
t2199 = t2232 * t2345 + t2242 * t2344;
t2198 = t2226 * t2353 + t2243 * t2348;
t2197 = t2226 * t2348 - t2243 * t2353;
t2196 = t2211 * t2353 + t2259 * t2348;
t2195 = t2211 * t2348 - t2259 * t2353;
t2191 = -t2404 - t2405;
t2190 = t2204 * t2351 - t2234 * t2346;
t2189 = t2204 * t2346 + t2234 * t2351;
t2188 = -t2216 * t2349 + t2217 * t2354;
t2187 = t2216 * t2354 + t2217 * t2349;
t2186 = t2213 * t2345 - t2215 * t2344;
t2185 = t2213 * t2344 + t2215 * t2345;
t2183 = -t2208 * t2347 + t2209 * t2352;
t2182 = t2208 * t2352 + t2209 * t2347;
t2180 = -t2203 * t2346 + t2207 * t2351;
t2179 = t2203 * t2351 + t2207 * t2346;
t2175 = -t2201 * t2349 + t2202 * t2354;
t2174 = t2201 * t2354 + t2202 * t2349;
t2173 = -t2199 * t2347 + t2200 * t2352;
t2172 = t2199 * t2352 + t2200 * t2347;
t2171 = -t2197 * t2349 + t2198 * t2354;
t2170 = t2197 * t2354 + t2198 * t2349;
t2169 = t2247 * t2382 + t2362;
t2168 = -t2247 * t2407 - t2362;
t2167 = -t2249 * t2382 + t2371;
t2166 = t2249 * t2407 - t2371;
t2165 = -t2195 * t2349 + t2196 * t2354;
t2164 = t2195 * t2354 + t2196 * t2349;
t2163 = -t2192 * t2347 + t2193 * t2352;
t2162 = t2192 * t2352 + t2193 * t2347;
t2161 = pkin(5) * t2370 - pkin(10) * t2403 + t2258 * t2277 + t2194;
t2160 = t2183 * t2353 + t2214 * t2348;
t2159 = t2183 * t2348 - t2214 * t2353;
t2158 = t2173 * t2353 + t2212 * t2348;
t2157 = t2173 * t2348 - t2212 * t2353;
t2156 = t2163 * t2353 + t2228 * t2348;
t2155 = t2163 * t2348 - t2228 * t2353;
t2154 = -t2189 * t2344 + t2190 * t2345;
t2153 = t2189 * t2345 + t2190 * t2344;
t2152 = -t2185 * t2347 + t2186 * t2352;
t2151 = t2185 * t2352 + t2186 * t2347;
t2150 = -t2179 * t2344 + t2180 * t2345;
t2149 = t2179 * t2345 + t2180 * t2344;
t2146 = t2152 * t2353 + t2224 * t2348;
t2145 = t2152 * t2348 - t2224 * t2353;
t2144 = t2167 * t2351 - t2169 * t2346;
t2143 = t2167 * t2346 + t2169 * t2351;
t2142 = -pkin(5) * t2403 - pkin(10) * t2370 - t2311 * t2258 + t2148;
t2141 = -t2159 * t2349 + t2160 * t2354;
t2140 = t2159 * t2354 + t2160 * t2349;
t2139 = pkin(5) * t2232 + pkin(10) * t2215 + t2147;
t2138 = -t2157 * t2349 + t2158 * t2354;
t2137 = t2157 * t2354 + t2158 * t2349;
t2136 = -t2155 * t2349 + t2156 * t2354;
t2135 = t2155 * t2354 + t2156 * t2349;
t2134 = -t2153 * t2347 + t2154 * t2352;
t2133 = t2153 * t2352 + t2154 * t2347;
t2132 = -t2149 * t2347 + t2150 * t2352;
t2131 = t2149 * t2352 + t2150 * t2347;
t2130 = -t2147 * t2344 + t2148 * t2345;
t2129 = t2147 * t2345 + t2148 * t2344;
t2128 = -t2145 * t2349 + t2146 * t2354;
t2127 = t2145 * t2354 + t2146 * t2349;
t2126 = t2134 * t2353 + t2168 * t2348;
t2125 = t2134 * t2348 - t2168 * t2353;
t2124 = -t2143 * t2344 + t2144 * t2345;
t2123 = t2143 * t2345 + t2144 * t2344;
t2122 = t2132 * t2353 + t2166 * t2348;
t2121 = t2132 * t2348 - t2166 * t2353;
t2120 = t2139 * t2346 + t2142 * t2351;
t2119 = t2139 * t2351 - t2142 * t2346;
t2118 = -t2129 * t2347 + t2130 * t2352;
t2117 = t2129 * t2352 + t2130 * t2347;
t2116 = -t2125 * t2349 + t2126 * t2354;
t2115 = t2125 * t2354 + t2126 * t2349;
t2114 = -t2123 * t2347 + t2124 * t2352;
t2113 = t2123 * t2352 + t2124 * t2347;
t2112 = t2118 * t2353 + t2194 * t2348;
t2111 = t2118 * t2348 - t2194 * t2353;
t2110 = t2114 * t2353 + t2191 * t2348;
t2109 = t2114 * t2348 - t2191 * t2353;
t2108 = -t2121 * t2349 + t2122 * t2354;
t2107 = t2121 * t2354 + t2122 * t2349;
t2106 = -t2119 * t2346 + t2120 * t2351;
t2105 = t2119 * t2351 + t2120 * t2346;
t2104 = -t2111 * t2349 + t2112 * t2354;
t2103 = t2111 * t2354 + t2112 * t2349;
t2102 = -t2109 * t2349 + t2110 * t2354;
t2101 = t2109 * t2354 + t2110 * t2349;
t2100 = -t2105 * t2344 + t2106 * t2345;
t2099 = t2105 * t2345 + t2106 * t2344;
t2098 = -t2099 * t2347 + t2100 * t2352;
t2097 = t2099 * t2352 + t2100 * t2347;
t2096 = t2098 * t2353 + t2161 * t2348;
t2095 = t2098 * t2348 - t2161 * t2353;
t2094 = -t2095 * t2349 + t2096 * t2354;
t2093 = t2095 * t2354 + t2096 * t2349;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2325, -t2324, 0, -t2329 * t2350 + t2330 * t2355, 0, 0, 0, 0, 0, 0, t2301 * t2355 - t2322 * t2350, t2302 * t2355 + t2319 * t2350, t2323 * t2355 - t2326 * t2350, t2282 * t2355 - t2315 * t2350, 0, 0, 0, 0, 0, 0, t2236 * t2355 + t2264 * t2350, t2241 * t2355 - t2350 * t2406, t2206 * t2355 + t2286 * t2350, t2188 * t2355 - t2287 * t2350, 0, 0, 0, 0, 0, 0, t2171 * t2355 + t2225 * t2350, t2175 * t2355 + t2230 * t2350, t2165 * t2355 + t2210 * t2350, t2136 * t2355 + t2162 * t2350, 0, 0, 0, 0, 0, 0, t2138 * t2355 + t2172 * t2350, t2141 * t2355 + t2182 * t2350, t2128 * t2355 + t2151 * t2350, t2104 * t2355 + t2117 * t2350, 0, 0, 0, 0, 0, 0, t2108 * t2355 + t2131 * t2350, t2116 * t2355 + t2133 * t2350, t2102 * t2355 + t2113 * t2350, t2094 * t2355 + t2097 * t2350; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2324, t2325, 0, t2329 * t2355 + t2330 * t2350, 0, 0, 0, 0, 0, 0, t2301 * t2350 + t2322 * t2355, t2302 * t2350 - t2319 * t2355, t2323 * t2350 + t2326 * t2355, t2282 * t2350 + t2315 * t2355, 0, 0, 0, 0, 0, 0, t2236 * t2350 - t2264 * t2355, t2241 * t2350 + t2355 * t2406, t2206 * t2350 - t2286 * t2355, t2188 * t2350 + t2287 * t2355, 0, 0, 0, 0, 0, 0, t2171 * t2350 - t2225 * t2355, t2175 * t2350 - t2230 * t2355, t2165 * t2350 - t2210 * t2355, t2136 * t2350 - t2162 * t2355, 0, 0, 0, 0, 0, 0, t2138 * t2350 - t2172 * t2355, t2141 * t2350 - t2182 * t2355, t2128 * t2350 - t2151 * t2355, t2104 * t2350 - t2117 * t2355, 0, 0, 0, 0, 0, 0, t2108 * t2350 - t2131 * t2355, t2116 * t2350 - t2133 * t2355, t2102 * t2350 - t2113 * t2355, t2094 * t2350 - t2097 * t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2299, t2300, 0, t2281, 0, 0, 0, 0, 0, 0, t2235, t2240, t2205, t2187, 0, 0, 0, 0, 0, 0, t2170, t2174, t2164, t2135, 0, 0, 0, 0, 0, 0, t2137, t2140, t2127, t2103, 0, 0, 0, 0, 0, 0, t2107, t2115, t2101, t2093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2357, -qJDD(1), 0, t2330, 0, 0, 0, 0, 0, 0, t2301, t2302, t2323, t2282, 0, 0, 0, 0, 0, 0, t2236, t2241, t2206, t2188, 0, 0, 0, 0, 0, 0, t2171, t2175, t2165, t2136, 0, 0, 0, 0, 0, 0, t2138, t2141, t2128, t2104, 0, 0, 0, 0, 0, 0, t2108, t2116, t2102, t2094; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2357, 0, t2329, 0, 0, 0, 0, 0, 0, t2322, -t2319, t2326, t2315, 0, 0, 0, 0, 0, 0, -t2264, t2406, -t2286, t2287, 0, 0, 0, 0, 0, 0, -t2225, -t2230, -t2210, -t2162, 0, 0, 0, 0, 0, 0, -t2172, -t2182, -t2151, -t2117, 0, 0, 0, 0, 0, 0, -t2131, -t2133, -t2113, -t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2299, t2300, 0, t2281, 0, 0, 0, 0, 0, 0, t2235, t2240, t2205, t2187, 0, 0, 0, 0, 0, 0, t2170, t2174, t2164, t2135, 0, 0, 0, 0, 0, 0, t2137, t2140, t2127, t2103, 0, 0, 0, 0, 0, 0, t2107, t2115, t2101, t2093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2332, t2328, t2340, t2305, 0, 0, 0, 0, 0, 0, t2261, t2269, t2239, t2217, 0, 0, 0, 0, 0, 0, t2198, t2202, t2196, t2156, 0, 0, 0, 0, 0, 0, t2158, t2160, t2146, t2112, 0, 0, 0, 0, 0, 0, t2122, t2126, t2110, t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2327, t2331, -t2379, t2304, 0, 0, 0, 0, 0, 0, t2260, t2268, t2238, t2216, 0, 0, 0, 0, 0, 0, t2197, t2201, t2195, t2155, 0, 0, 0, 0, 0, 0, t2157, t2159, t2145, t2111, 0, 0, 0, 0, 0, 0, t2121, t2125, t2109, t2095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2322, t2319, -t2326, -t2315, 0, 0, 0, 0, 0, 0, t2264, -t2406, t2286, -t2287, 0, 0, 0, 0, 0, 0, t2225, t2230, t2210, t2162, 0, 0, 0, 0, 0, 0, t2172, t2182, t2151, t2117, 0, 0, 0, 0, 0, 0, t2131, t2133, t2113, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, t2292, t2265, t2251, 0, 0, 0, 0, 0, 0, t2226, t2231, t2211, t2163, 0, 0, 0, 0, 0, 0, t2173, t2183, t2152, t2118, 0, 0, 0, 0, 0, 0, t2132, t2134, t2114, t2098; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2291, t2303, t2267, t2250, 0, 0, 0, 0, 0, 0, -t2243, -t2245, -t2259, -t2228, 0, 0, 0, 0, 0, 0, -t2212, -t2214, -t2224, -t2194, 0, 0, 0, 0, 0, 0, -t2166, -t2168, -t2191, -t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2264, -t2406, t2286, -t2287, 0, 0, 0, 0, 0, 0, t2225, t2230, t2210, t2162, 0, 0, 0, 0, 0, 0, t2172, t2182, t2151, t2117, 0, 0, 0, 0, 0, 0, t2131, t2133, t2113, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, t2253, t2244, t2193, 0, 0, 0, 0, 0, 0, t2200, t2209, t2186, t2130, 0, 0, 0, 0, 0, 0, t2150, t2154, t2124, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2252, t2274, t2246, t2192, 0, 0, 0, 0, 0, 0, t2199, t2208, t2185, t2129, 0, 0, 0, 0, 0, 0, t2149, t2153, t2123, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2243, t2245, t2259, t2228, 0, 0, 0, 0, 0, 0, t2212, t2214, t2224, t2194, 0, 0, 0, 0, 0, 0, t2166, t2168, t2191, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2242, t2233, t2213, t2148, 0, 0, 0, 0, 0, 0, t2180, t2190, t2144, t2106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2232, t2254, t2215, t2147, 0, 0, 0, 0, 0, 0, t2179, t2189, t2143, t2105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2212, t2214, t2224, t2194, 0, 0, 0, 0, 0, 0, t2166, t2168, t2191, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2207, t2204, t2167, t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2203, t2234, t2169, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2168, t2191, t2161;];
f_new_reg  = t1;
