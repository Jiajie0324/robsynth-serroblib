% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR4_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR4_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR4_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR4_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:09:24
% EndTime: 2019-03-09 22:09:43
% DurationCPUTime: 8.83s
% Computational Cost: add. (14179->556), mult. (31456->733), div. (0->0), fcn. (24053->16), ass. (0->320)
t339 = cos(qJ(2));
t341 = -pkin(8) - pkin(7);
t289 = t341 * t339;
t280 = qJD(1) * t289;
t334 = sin(qJ(3));
t257 = t334 * t280;
t335 = sin(qJ(2));
t288 = t341 * t335;
t278 = qJD(1) * t288;
t485 = cos(qJ(3));
t198 = t278 * t485 + t257;
t408 = qJD(3) * t485;
t517 = -pkin(2) * t408 + t198;
t409 = qJD(1) * t485;
t429 = qJD(1) * t335;
t501 = -t334 * t429 + t339 * t409;
t244 = qJD(4) - t501;
t443 = t334 * t339;
t254 = -qJD(1) * t443 - t335 * t409;
t325 = qJD(2) + qJD(3);
t333 = sin(qJ(4));
t338 = cos(qJ(4));
t210 = -t254 * t333 - t338 * t325;
t329 = sin(pkin(11));
t330 = cos(pkin(11));
t376 = t254 * t338 - t325 * t333;
t139 = t210 * t329 + t330 * t376;
t332 = sin(qJ(6));
t337 = cos(qJ(6));
t424 = qJD(6) * t332;
t377 = -t210 * t330 + t329 * t376;
t441 = t337 * t377;
t399 = qJDD(1) * t485;
t421 = t339 * qJDD(1);
t518 = t325 * t501;
t152 = t334 * t421 + t335 * t399 + t518;
t324 = qJDD(2) + qJDD(3);
t425 = qJD(4) * t338;
t426 = qJD(4) * t333;
t114 = t338 * t152 + t254 * t426 + t333 * t324 + t325 * t425;
t115 = -qJD(4) * t376 + t152 * t333 - t338 * t324;
t66 = -t114 * t329 - t115 * t330;
t67 = t114 * t330 - t115 * t329;
t16 = qJD(6) * t441 + t139 * t424 + t332 * t66 + t337 * t67;
t229 = qJD(6) + t244;
t78 = t139 * t332 + t441;
t469 = t229 * t78;
t519 = t16 - t469;
t328 = qJ(2) + qJ(3);
t322 = cos(t328);
t476 = g(3) * t322;
t321 = sin(t328);
t336 = sin(qJ(1));
t340 = cos(qJ(1));
t390 = g(1) * t340 + g(2) * t336;
t514 = t390 * t321;
t516 = -t514 + t476;
t496 = -t337 * t139 + t332 * t377;
t515 = t496 * t78;
t268 = t329 * t338 + t330 * t333;
t503 = t244 * t268;
t373 = t329 * t333 - t330 * t338;
t502 = t244 * t373;
t455 = t501 * t333;
t513 = -qJ(5) * t455 - t338 * qJD(5);
t185 = -pkin(3) * t254 - pkin(9) * t501;
t171 = pkin(2) * t429 + t185;
t512 = t333 * t171 + t338 * t517;
t511 = t496 ^ 2 - t78 ^ 2;
t319 = qJ(4) + pkin(11) + qJ(6);
t308 = sin(t319);
t309 = cos(t319);
t450 = t322 * t336;
t217 = t308 * t340 - t309 * t450;
t449 = t322 * t340;
t219 = t308 * t336 + t309 * t449;
t273 = t335 * t485 + t443;
t202 = t325 * t273;
t422 = t335 * qJDD(1);
t381 = t334 * t422 - t339 * t399;
t153 = qJD(1) * t202 + t381;
t149 = qJDD(4) + t153;
t423 = qJD(1) * qJD(2);
t406 = t339 * t423;
t205 = qJDD(2) * pkin(2) - t341 * (-t406 - t422);
t407 = t335 * t423;
t209 = t341 * (-t407 + t421);
t471 = qJD(2) * pkin(2);
t259 = t278 + t471;
t428 = qJD(3) * t334;
t346 = t334 * t205 - t209 * t485 + t259 * t408 + t280 * t428;
t100 = t324 * pkin(9) + t346;
t484 = pkin(2) * t339;
t316 = pkin(1) + t484;
t287 = t316 * qJD(1);
t165 = -pkin(3) * t501 + pkin(9) * t254 - t287;
t258 = t485 * t280;
t190 = t334 * t259 - t258;
t173 = pkin(9) * t325 + t190;
t117 = t165 * t333 + t173 * t338;
t246 = pkin(2) * t407 - qJDD(1) * t316;
t86 = pkin(3) * t153 - pkin(9) * t152 + t246;
t81 = t338 * t86;
t20 = pkin(4) * t149 - qJ(5) * t114 - qJD(4) * t117 + qJD(5) * t376 - t100 * t333 + t81;
t359 = t338 * t100 + t165 * t425 - t173 * t426 + t333 * t86;
t22 = -qJ(5) * t115 - qJD(5) * t210 + t359;
t8 = t330 * t20 - t22 * t329;
t3 = pkin(5) * t149 - pkin(10) * t67 + t8;
t90 = -qJ(5) * t210 + t117;
t468 = t330 * t90;
t116 = t338 * t165 - t173 * t333;
t89 = qJ(5) * t376 + t116;
t73 = pkin(4) * t244 + t89;
t48 = t329 * t73 + t468;
t495 = pkin(10) * t377;
t31 = t48 + t495;
t30 = t31 * t424;
t311 = g(3) * t321;
t189 = t259 * t485 + t257;
t172 = -t325 * pkin(3) - t189;
t132 = t210 * pkin(4) + qJD(5) + t172;
t74 = -pkin(5) * t377 + t132;
t510 = g(1) * t219 - g(2) * t217 - t332 * t3 + t309 * t311 - t74 * t78 + t30;
t17 = qJD(6) * t496 + t332 * t67 - t337 * t66;
t470 = t229 * t496;
t508 = -t17 + t470;
t164 = t338 * t171;
t323 = t338 * qJ(5);
t388 = -t254 * pkin(4) - t323 * t501;
t313 = pkin(2) * t334 + pkin(9);
t438 = -qJ(5) - t313;
t396 = qJD(4) * t438;
t507 = t338 * t396 - t164 - t388 + (-qJD(5) + t517) * t333;
t178 = t338 * t185;
t331 = -qJ(5) - pkin(9);
t400 = qJD(4) * t331;
t506 = t338 * t400 - t178 - t388 + (-qJD(5) + t189) * t333;
t505 = -t333 * t396 + t512 + t513;
t435 = t333 * t185 + t338 * t189;
t504 = -t333 * t400 + t435 + t513;
t216 = t308 * t450 + t309 * t340;
t218 = -t308 * t449 + t309 * t336;
t9 = t329 * t20 + t330 * t22;
t4 = pkin(10) * t66 + t9;
t414 = t337 * t3 - t332 * t4;
t500 = -g(1) * t218 + g(2) * t216 + t308 * t311 - t74 * t496 + t414;
t499 = pkin(10) * t139;
t192 = t268 * t337 - t332 * t373;
t437 = -qJD(6) * t192 + t332 * t502 - t337 * t503;
t375 = -t268 * t332 - t337 * t373;
t436 = -qJD(6) * t375 + t332 * t503 + t337 * t502;
t197 = t334 * t278 - t258;
t391 = pkin(2) * t428 - t197;
t362 = -t334 * t335 + t339 * t485;
t201 = t325 * t362;
t410 = t273 * t425;
t497 = t201 * t333 + t410;
t466 = t329 * t505 + t330 * t507;
t465 = t329 * t507 - t330 * t505;
t464 = t329 * t504 + t330 * t506;
t463 = t329 * t506 - t330 * t504;
t389 = g(1) * t336 - g(2) * t340;
t494 = t321 * t389;
t492 = t503 * pkin(10);
t317 = pkin(4) * t426;
t491 = pkin(5) * t503 + t317;
t472 = t338 * pkin(4);
t314 = pkin(3) + t472;
t397 = t322 * t314 - t321 * t331;
t226 = pkin(4) * t455;
t490 = -t226 + t391;
t489 = -t254 * pkin(5) - pkin(10) * t502;
t488 = t485 * t288 + t334 * t289;
t439 = t338 * t340;
t445 = t333 * t336;
t236 = t322 * t445 + t439;
t442 = t336 * t338;
t444 = t333 * t340;
t238 = -t322 * t444 + t442;
t487 = -g(1) * t238 + g(2) * t236;
t483 = pkin(4) * t329;
t481 = pkin(10) * t268;
t475 = g(3) * t333;
t473 = t373 * pkin(5);
t420 = t335 * t471;
t131 = pkin(3) * t202 - pkin(9) * t201 + t420;
t128 = t338 * t131;
t413 = qJD(2) * t341;
t279 = t335 * t413;
t281 = t339 * t413;
t145 = qJD(3) * t488 + t485 * t279 + t334 * t281;
t188 = -pkin(3) * t362 - pkin(9) * t273 - t316;
t214 = t334 * t288 - t289 * t485;
t206 = t338 * t214;
t372 = -qJ(5) * t201 - qJD(5) * t273;
t36 = pkin(4) * t202 - t145 * t333 + t128 + t372 * t338 + (-t206 + (qJ(5) * t273 - t188) * t333) * qJD(4);
t417 = t333 * t131 + t338 * t145 + t188 * t425;
t44 = -qJ(5) * t410 + (-qJD(4) * t214 + t372) * t333 + t417;
t15 = t329 * t36 + t330 * t44;
t82 = t329 * t90;
t51 = t330 * t89 - t82;
t47 = t330 * t73 - t82;
t28 = pkin(5) * t244 + t47 + t499;
t467 = t337 * t28;
t462 = t114 * t333;
t461 = t172 * t501;
t459 = t210 * t244;
t458 = t376 * t244;
t457 = t229 * t254;
t456 = t244 * t254;
t454 = t254 * t501;
t453 = t273 * t333;
t452 = t273 * t338;
t446 = t333 * t149;
t440 = t338 * t149;
t180 = t338 * t188;
t108 = -pkin(4) * t362 - t214 * t333 - t273 * t323 + t180;
t432 = t333 * t188 + t206;
t123 = -qJ(5) * t453 + t432;
t65 = t329 * t108 + t330 * t123;
t433 = t490 + t491;
t416 = t226 + t190;
t431 = -t416 + t491;
t263 = t438 * t333;
t264 = t313 * t338 + t323;
t183 = t329 * t263 + t330 * t264;
t285 = t331 * t333;
t286 = pkin(9) * t338 + t323;
t208 = t329 * t285 + t330 * t286;
t326 = t335 ^ 2;
t430 = -t339 ^ 2 + t326;
t427 = qJD(4) * t273;
t419 = qJD(4) * pkin(9) * t244;
t415 = g(1) * t449 + g(2) * t450 + t311;
t162 = t172 * t425;
t405 = pkin(4) * t333 - t341;
t392 = -t485 * t205 - t334 * t209 + t259 * t428 - t280 * t408;
t101 = -pkin(3) * t324 + t392;
t403 = -t101 - t476;
t402 = qJD(6) * t28 + t4;
t14 = -t329 * t44 + t330 * t36;
t50 = -t329 * t89 - t468;
t64 = t330 * t108 - t123 * t329;
t182 = t330 * t263 - t264 * t329;
t207 = t330 * t285 - t286 * t329;
t395 = t244 * t338;
t394 = -qJD(4) * t165 - t100;
t315 = -pkin(2) * t485 - pkin(3);
t387 = -t173 * t425 + t81;
t262 = t373 * pkin(10);
t151 = -t262 + t183;
t386 = qJD(6) * t151 - t466 + t489;
t150 = t182 - t481;
t385 = -qJD(6) * t150 - t465 + t492;
t169 = -t262 + t208;
t384 = qJD(6) * t169 - t464 + t489;
t168 = t207 - t481;
t383 = -qJD(6) * t168 - t463 + t492;
t382 = -pkin(9) * t149 - t461;
t13 = t332 * t28 + t337 * t31;
t379 = -t149 * t313 - t461;
t175 = t268 * t273;
t176 = t373 * t273;
t378 = -t337 * t175 + t176 * t332;
t122 = -t175 * t332 - t176 * t337;
t374 = t314 * t321 + t322 * t331;
t371 = t101 * t333 - t117 * t254 + t322 * t475 + t162;
t370 = t116 * t254 + t172 * t426 + t338 * t514;
t368 = pkin(4) * t453 - t488;
t310 = pkin(4) * t330 + pkin(5);
t367 = t310 * t332 + t337 * t483;
t366 = t310 * t337 - t332 * t483;
t364 = -0.2e1 * pkin(1) * t423 - pkin(7) * qJDD(2);
t363 = t316 + t397;
t361 = t201 * t338 - t273 * t426;
t360 = t315 - t472;
t146 = t334 * t279 - t281 * t485 + t288 * t428 - t289 * t408;
t354 = pkin(4) * t497 + t146;
t342 = qJD(2) ^ 2;
t352 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t342 + t389;
t343 = qJD(1) ^ 2;
t351 = pkin(1) * t343 - pkin(7) * qJDD(1) + t390;
t60 = pkin(4) * t115 + qJDD(5) + t101;
t349 = -t287 * t254 - t392 - t516;
t348 = -t8 * t268 - t9 * t373 + t47 * t502 - t48 * t503 - t415;
t12 = -t31 * t332 + t467;
t27 = -pkin(5) * t66 + t60;
t347 = t12 * t254 - t27 * t375 - t309 * t516 - t437 * t74;
t345 = -t13 * t254 + t27 * t192 + t308 * t516 - t436 * t74;
t344 = t287 * t501 - t346 + t415;
t239 = t322 * t439 + t445;
t237 = -t322 * t442 + t444;
t222 = -t314 + t473;
t215 = t360 + t473;
t154 = t254 ^ 2 - t501 ^ 2;
t148 = qJDD(6) + t149;
t130 = -t381 + (-qJD(1) * t273 - t254) * t325;
t129 = t152 - t518;
t124 = t175 * pkin(5) + t368;
t113 = -pkin(4) * t376 - pkin(5) * t139;
t96 = t201 * t373 + t268 * t427;
t95 = -t201 * t268 + t373 * t427;
t70 = t244 * t395 - t254 * t376 + t446;
t69 = -t244 ^ 2 * t333 - t210 * t254 + t440;
t68 = -t376 * t395 + t462;
t53 = -t95 * pkin(5) + t354;
t52 = -pkin(10) * t175 + t65;
t49 = -pkin(5) * t362 + pkin(10) * t176 + t64;
t38 = t51 + t499;
t37 = t50 - t495;
t33 = qJD(6) * t122 - t332 * t96 - t337 * t95;
t32 = qJD(6) * t378 + t332 * t95 - t337 * t96;
t29 = (t114 - t459) * t338 + (-t115 + t458) * t333;
t24 = t148 * t375 + t229 * t437 + t254 * t78;
t23 = t148 * t192 - t229 * t436 + t254 * t496;
t11 = pkin(10) * t95 + t15;
t10 = pkin(5) * t202 + pkin(10) * t96 + t14;
t5 = t16 * t192 - t436 * t496;
t1 = t16 * t375 - t17 * t192 - t436 * t78 + t437 * t496;
t2 = [qJDD(1), t389, t390, qJDD(1) * t326 + 0.2e1 * t335 * t406, 0.2e1 * t335 * t421 - 0.2e1 * t423 * t430, qJDD(2) * t335 + t339 * t342, qJDD(2) * t339 - t335 * t342, 0, t335 * t364 + t339 * t352, -t335 * t352 + t339 * t364, t152 * t273 - t201 * t254, t152 * t362 - t153 * t273 + t201 * t501 + t202 * t254, t201 * t325 + t273 * t324, -t202 * t325 + t324 * t362, 0, -t146 * t325 - t153 * t316 - t202 * t287 - t246 * t362 + t322 * t389 + t324 * t488 - t420 * t501, -t145 * t325 - t152 * t316 - t201 * t287 - t214 * t324 + t246 * t273 - t254 * t420 - t494, t114 * t452 - t361 * t376 (-t210 * t338 + t333 * t376) * t201 + (-t462 - t115 * t338 + (t210 * t333 + t338 * t376) * qJD(4)) * t273, -t114 * t362 - t202 * t376 + t244 * t361 + t273 * t440, t115 * t362 - t202 * t210 - t244 * t497 - t273 * t446, -t149 * t362 + t202 * t244 (-t214 * t425 + t128) * t244 + t180 * t149 - t387 * t362 + t116 * t202 + t146 * t210 - t488 * t115 + t273 * t162 - g(1) * t237 - g(2) * t239 + ((-qJD(4) * t188 - t145) * t244 - t214 * t149 - t394 * t362 + t101 * t273 + t172 * t201) * t333 -(-t214 * t426 + t417) * t244 - t432 * t149 + t359 * t362 - t117 * t202 - t146 * t376 - t488 * t114 + t101 * t452 - g(1) * t236 - g(2) * t238 + t361 * t172, t139 * t14 + t15 * t377 - t175 * t9 + t176 * t8 + t47 * t96 + t48 * t95 - t64 * t67 + t65 * t66 + t494, t9 * t65 + t48 * t15 + t8 * t64 + t47 * t14 + t60 * t368 + t132 * t354 + (-g(1) * t405 - g(2) * t363) * t340 + (g(1) * t363 - g(2) * t405) * t336, t122 * t16 + t32 * t496, -t122 * t17 + t16 * t378 + t32 * t78 - t33 * t496, t122 * t148 - t16 * t362 + t202 * t496 + t229 * t32, t148 * t378 + t17 * t362 + t202 * t78 - t229 * t33, -t148 * t362 + t202 * t229 (t10 * t337 - t11 * t332) * t229 + (-t332 * t52 + t337 * t49) * t148 - t414 * t362 + t12 * t202 - t53 * t78 + t124 * t17 - t27 * t378 + t74 * t33 - g(1) * t217 - g(2) * t219 + ((-t332 * t49 - t337 * t52) * t229 + t13 * t362) * qJD(6), -g(1) * t216 - g(2) * t218 + t27 * t122 + t124 * t16 - t13 * t202 - t30 * t362 + t74 * t32 + t53 * t496 + (-(-qJD(6) * t52 + t10) * t229 - t49 * t148 + t3 * t362) * t332 + (-(qJD(6) * t49 + t11) * t229 - t52 * t148 + t402 * t362) * t337; 0, 0, 0, -t335 * t343 * t339, t430 * t343, t422, t421, qJDD(2), -g(3) * t339 + t335 * t351, g(3) * t335 + t339 * t351, t454, t154, t129, t130, t324, t197 * t325 + (t324 * t485 - t325 * t428 + t429 * t501) * pkin(2) + t349, t198 * t325 + (t254 * t429 - t324 * t334 - t325 * t408) * pkin(2) + t344, t68, t29, t70, t69, t456, t315 * t115 + t403 * t338 + t379 * t333 + t391 * t210 + (-t313 * t425 + t333 * t517 - t164) * t244 + t370, t315 * t114 + t379 * t338 - t333 * t514 - t391 * t376 + (t313 * t426 + t512) * t244 + t371, t139 * t466 - t182 * t67 + t183 * t66 + t377 * t465 + t348, t9 * t183 + t8 * t182 + t60 * t360 - g(3) * (t397 + t484) + t465 * t48 + t466 * t47 + (t317 + t490) * t132 + t390 * (pkin(2) * t335 + t374) t5, t1, t23, t24, t457 (t150 * t337 - t151 * t332) * t148 + t215 * t17 - t433 * t78 + (t332 * t385 - t337 * t386) * t229 + t347 -(t150 * t332 + t151 * t337) * t148 + t215 * t16 + t433 * t496 + (t332 * t386 + t337 * t385) * t229 + t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t454, t154, t129, t130, t324, t190 * t325 + t349, t189 * t325 + t344, t68, t29, t70, t69, t456, -pkin(3) * t115 - t178 * t244 - t190 * t210 + (t189 * t244 + t382) * t333 + (t403 - t419) * t338 + t370, -pkin(3) * t114 + t435 * t244 + t190 * t376 + t382 * t338 + (-t514 + t419) * t333 + t371, t139 * t464 - t207 * t67 + t208 * t66 + t377 * t463 + t348, t9 * t208 + t8 * t207 - t60 * t314 - g(3) * t397 + t463 * t48 + t464 * t47 + (-t416 + t317) * t132 + t390 * t374, t5, t1, t23, t24, t457 (t168 * t337 - t169 * t332) * t148 + t222 * t17 - t431 * t78 + (t332 * t383 - t337 * t384) * t229 + t347 -(t168 * t332 + t169 * t337) * t148 + t222 * t16 + t431 * t496 + (t332 * t384 + t337 * t383) * t229 + t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t376 * t210, -t210 ^ 2 + t376 ^ 2, t114 + t459, -t115 - t458, t149, t117 * t244 + t172 * t376 + (t394 + t311) * t333 + t387 + t487, g(1) * t239 - g(2) * t237 + t116 * t244 + t172 * t210 + t311 * t338 - t359 (t329 * t66 - t330 * t67) * pkin(4) + (-t51 + t47) * t377 + (-t48 - t50) * t139, -t47 * t50 - t48 * t51 + (t132 * t376 + t321 * t475 + t9 * t329 + t8 * t330 + t487) * pkin(4), -t515, t511, t519, t508, t148, t366 * t148 - (-t332 * t38 + t337 * t37) * t229 + t113 * t78 + (-t229 * t367 - t13) * qJD(6) + t500, -t367 * t148 - t337 * t4 + (t332 * t37 + t337 * t38) * t229 - t113 * t496 + (-t229 * t366 - t467) * qJD(6) + t510; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t139 ^ 2 - t377 ^ 2, -t139 * t47 - t377 * t48 + t516 + t60, 0, 0, 0, 0, 0, t17 + t470, t16 + t469; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t515, t511, t519, t508, t148 (-qJD(6) + t229) * t13 + t500, t12 * t229 - t337 * t402 + t510;];
tau_reg  = t2;
