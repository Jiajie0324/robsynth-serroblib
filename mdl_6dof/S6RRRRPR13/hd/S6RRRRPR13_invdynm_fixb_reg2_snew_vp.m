% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 01:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RRRRPR13_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR13_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR13_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR13_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_invdynm_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 01:39:03
% EndTime: 2019-05-08 01:40:46
% DurationCPUTime: 108.23s
% Computational Cost: add. (547451->1118), mult. (1162919->1550), div. (0->0), fcn. (933692->12), ass. (0->762)
t2210 = cos(qJ(4));
t2205 = sin(qJ(4));
t2206 = sin(qJ(3));
t2211 = cos(qJ(3));
t2203 = cos(pkin(6));
t2420 = qJD(1) * t2203;
t2346 = qJD(2) + t2420;
t2202 = sin(pkin(6));
t2207 = sin(qJ(2));
t2378 = t2202 * t2207;
t2362 = qJD(1) * t2378;
t2166 = t2206 * t2346 + t2211 * t2362;
t2212 = cos(qJ(2));
t2377 = t2202 * t2212;
t2195 = qJD(1) * t2377;
t2369 = t2195 - qJD(3);
t2133 = t2166 * t2205 + t2210 * t2369;
t2164 = t2206 * t2362 - t2211 * t2346;
t2417 = qJD(2) * qJD(1);
t2351 = t2212 * t2417;
t2366 = t2207 * qJDD(1);
t2172 = (t2351 + t2366) * t2202;
t2338 = qJDD(1) * t2203 + qJDD(2);
t2235 = -t2211 * t2172 - t2206 * t2338;
t2112 = -t2164 * qJD(3) - t2235;
t2367 = qJDD(1) * t2212;
t2256 = t2207 * t2417 - t2367;
t2238 = t2256 * t2202;
t2231 = qJDD(3) + t2238;
t2216 = -t2210 * t2112 - t2205 * t2231;
t2031 = -t2133 * qJD(4) - t2216;
t2160 = qJD(4) + t2164;
t2390 = t2133 * t2160;
t2455 = -t2390 + t2031;
t2403 = t2455 * t2205;
t2135 = t2210 * t2166 - t2205 * t2369;
t2103 = t2160 * t2135;
t2342 = t2205 * t2112 - t2210 * t2231;
t2257 = qJD(4) * t2135 + t2342;
t2458 = t2103 + t2257;
t1891 = -t2458 * t2210 - t2403;
t2132 = t2135 ^ 2;
t2437 = t2133 ^ 2;
t2457 = t2132 - t2437;
t1846 = t1891 * t2206 - t2211 * t2457;
t1848 = t1891 * t2211 + t2206 * t2457;
t1887 = -t2458 * t2205 + t2210 * t2455;
t2296 = t1848 * t2207 - t1887 * t2212;
t1731 = -t2202 * t1846 + t2203 * t2296;
t1793 = t1848 * t2212 + t1887 * t2207;
t2208 = sin(qJ(1));
t2213 = cos(qJ(1));
t2571 = t2208 * t1731 - t1793 * t2213;
t2570 = t1731 * t2213 + t2208 * t1793;
t2436 = t2160 ^ 2;
t2096 = t2437 - t2436;
t2088 = t2135 * t2133;
t2340 = -t2206 * t2172 + t2211 * t2338;
t2258 = t2166 * qJD(3) - t2340;
t2110 = qJDD(4) + t2258;
t2459 = t2088 + t2110;
t2478 = t2459 * t2205;
t1972 = t2096 * t2210 - t2478;
t1994 = -t2103 + t2257;
t1880 = t1972 * t2206 + t1994 * t2211;
t1884 = t1972 * t2211 - t1994 * t2206;
t2477 = t2459 * t2210;
t1968 = t2096 * t2205 + t2477;
t2287 = t1884 * t2207 - t1968 * t2212;
t1770 = -t2202 * t1880 + t2203 * t2287;
t1822 = t1884 * t2212 + t1968 * t2207;
t2569 = t2208 * t1770 - t1822 * t2213;
t2568 = t1770 * t2213 + t2208 * t1822;
t1766 = t2203 * t1880 + t2202 * t2287;
t1729 = t2203 * t1846 + t2202 * t2296;
t2097 = t2132 - t2436;
t2343 = -t2110 + t2088;
t2400 = t2343 * t2205;
t2519 = -t2097 * t2210 - t2400;
t2454 = t2390 + t2031;
t2399 = t2343 * t2210;
t2518 = t2097 * t2205 - t2399;
t2526 = t2206 * t2454 + t2211 * t2518;
t2548 = t2207 * t2519 + t2212 * t2526;
t2527 = t2206 * t2518 - t2211 * t2454;
t2549 = t2207 * t2526 - t2212 * t2519;
t2554 = -t2202 * t2527 + t2203 * t2549;
t2563 = -t2208 * t2554 + t2213 * t2548;
t2562 = t2208 * t2548 + t2213 * t2554;
t2555 = t2202 * t2549 + t2203 * t2527;
t2453 = -t2436 - t2437;
t2473 = t2210 * t2453 + t2400;
t2496 = t2206 * t2473 - t2211 * t2458;
t2474 = t2205 * t2453 - t2399;
t2495 = t2206 * t2458 + t2211 * t2473;
t2516 = t2207 * t2495 - t2212 * t2474;
t2528 = -t2202 * t2496 + t2203 * t2516;
t2553 = pkin(1) * t2528;
t2529 = t2202 * t2516 + t2203 * t2496;
t2552 = pkin(1) * t2529;
t2513 = t2207 * t2474 + t2212 * t2495;
t2547 = pkin(7) * (-t2208 * t2528 + t2213 * t2513);
t2546 = pkin(7) * (t2208 * t2513 + t2213 * t2528);
t2545 = (-t2202 * t2529 - t2203 * t2528) * pkin(8);
t2047 = t2436 + t2132;
t1941 = t2047 * t2210 + t2478;
t2544 = pkin(2) * t1941;
t2543 = pkin(3) * t1941;
t2542 = pkin(8) * t2513;
t2541 = pkin(10) * t1941;
t1950 = t2047 * t2205 - t2477;
t2540 = pkin(10) * t1950;
t2539 = t1941 * t2207;
t2538 = t1941 * t2212;
t2537 = t1950 * t2206;
t2536 = t1950 * t2211;
t2525 = pkin(2) * t2496;
t2524 = pkin(9) * t2496;
t2517 = -pkin(2) * t2474 + pkin(9) * t2495;
t2386 = t2160 * t2205;
t1988 = t2133 * t2386 - t2210 * t2257;
t2385 = t2160 * t2210;
t2352 = t2133 * t2385;
t2221 = t2205 * t2257 + t2352;
t2359 = t2206 * t2088;
t2443 = t2211 * t2221 - t2359;
t2471 = t1988 * t2207 + t2212 * t2443;
t2358 = t2211 * t2088;
t2444 = t2206 * t2221 + t2358;
t2472 = -t1988 * t2212 + t2207 * t2443;
t2497 = -t2202 * t2444 + t2203 * t2472;
t2515 = -t2208 * t2497 + t2213 * t2471;
t2094 = t2135 * t2386;
t2322 = t2094 - t2352;
t2442 = t2110 * t2206 + t2211 * t2322;
t2461 = (t2133 * t2205 + t2135 * t2210) * t2160;
t2470 = -t2207 * t2461 + t2212 * t2442;
t2445 = -t2211 * t2110 + t2206 * t2322;
t2469 = t2207 * t2442 + t2212 * t2461;
t2498 = -t2202 * t2445 + t2203 * t2469;
t2514 = -t2208 * t2498 + t2213 * t2470;
t2512 = t2208 * t2471 + t2213 * t2497;
t2511 = t2208 * t2470 + t2213 * t2498;
t2509 = pkin(3) * t2474;
t2508 = pkin(10) * t2473;
t2507 = pkin(10) * t2474;
t2500 = t2202 * t2469 + t2203 * t2445;
t2499 = t2202 * t2472 + t2203 * t2444;
t2456 = t2132 + t2437;
t2494 = pkin(3) * t2456;
t2493 = qJ(5) * t2455;
t2204 = sin(qJ(6));
t2209 = cos(qJ(6));
t2075 = -t2209 * t2133 + t2135 * t2204;
t2077 = t2133 * t2204 + t2135 * t2209;
t2009 = t2077 * t2075;
t2108 = -qJDD(6) + t2110;
t2460 = -t2009 - t2108;
t2488 = t2204 * t2460;
t2486 = t2206 * t2456;
t2483 = t2209 * t2460;
t2481 = t2211 * t2456;
t2146 = t2369 * t2166;
t2476 = t2258 - t2146;
t2145 = t2369 * t2164;
t2328 = t2211 * t2145;
t2329 = t2206 * t2146;
t2092 = t2328 - t2329;
t2475 = t2207 * t2092 - t2212 * t2231;
t1991 = t2031 * t2205 + t2135 * t2385;
t1992 = t2031 * t2210 - t2094;
t2323 = t2211 * t1992 + t2359;
t2324 = t2206 * t1992 - t2358;
t2375 = t2203 * t2212;
t2439 = t2203 * t2207 * t2323 - t1991 * t2375 - t2202 * t2324;
t2441 = t1991 * t2207 + t2212 * t2323;
t2468 = t2208 * t2441 + t2213 * t2439;
t2467 = -t2208 * t2439 + t2213 * t2441;
t2337 = t2346 ^ 2;
t2365 = t2369 ^ 2;
t2384 = t2166 * t2164;
t2220 = t2231 - t2384;
t2465 = t2206 * t2220;
t2463 = t2211 * t2220;
t2192 = g(1) * t2213 + t2208 * g(2);
t2430 = pkin(8) * t2202;
t2438 = qJD(1) ^ 2;
t2168 = -pkin(1) * t2438 + qJDD(1) * t2430 - t2192;
t2433 = pkin(2) * t2212;
t2336 = -pkin(9) * t2207 - t2433;
t2421 = qJD(1) * t2202;
t2171 = t2336 * t2421;
t2191 = t2208 * g(1) - t2213 * g(2);
t2233 = qJDD(1) * pkin(1) + t2430 * t2438 + t2191;
t2223 = t2203 * t2233;
t2218 = -g(3) * t2378 + t2207 * t2223;
t2056 = t2338 * pkin(9) - t2337 * pkin(2) + (t2171 * t2421 + t2168) * t2212 + t2218;
t2429 = pkin(9) * t2212;
t2434 = pkin(2) * t2207;
t2335 = -t2429 + t2434;
t2425 = t2203 * g(3);
t2215 = -t2172 * pkin(9) - t2425 + ((-pkin(1) - t2433) * qJDD(1) + ((t2203 * t2335 - t2430) * qJD(1) + (-t2429 + 0.2e1 * t2434) * qJD(2)) * qJD(1) - t2191) * t2202;
t1975 = t2211 * t2056 + t2206 * t2215;
t2121 = pkin(3) * t2164 - pkin(10) * t2166;
t1919 = -pkin(3) * t2365 + pkin(10) * t2231 - t2164 * t2121 + t1975;
t2341 = t2207 * t2168 - t2212 * t2223;
t2419 = qJD(1) * t2207;
t2055 = -t2338 * pkin(2) - t2337 * pkin(9) + (g(3) * t2212 + t2171 * t2419) * t2202 + t2341;
t2067 = t2145 + t2112;
t1924 = pkin(3) * t2476 - t2067 * pkin(10) + t2055;
t1825 = t1919 * t2205 - t2210 * t1924;
t2084 = pkin(4) * t2133 - qJ(5) * t2135;
t1797 = -t2110 * pkin(4) - qJ(5) * t2436 + t2084 * t2135 + qJDD(5) + t1825;
t1752 = t2343 * pkin(5) - pkin(11) * t2454 + t1797;
t2416 = qJD(5) * t2160;
t2149 = 0.2e1 * t2416;
t1826 = t2210 * t1919 + t2205 * t1924;
t2312 = -pkin(4) * t2436 + t2110 * qJ(5) - t2133 * t2084 + t1826;
t1796 = t2149 + t2312;
t2333 = -pkin(5) * t2160 - pkin(11) * t2135;
t1762 = -pkin(5) * t2437 + pkin(11) * t2257 + t2160 * t2333 + t1796;
t1682 = -t2209 * t1752 + t2204 * t1762;
t1683 = t2204 * t1752 + t2209 * t1762;
t1636 = -t2209 * t1682 + t1683 * t2204;
t1637 = t2204 * t1682 + t2209 * t1683;
t2435 = pkin(4) + pkin(5);
t2452 = qJ(5) * t1637 - t1636 * t2435;
t2156 = -qJD(6) + t2160;
t2344 = t2204 * t2031 - t2209 * t2257;
t1858 = (qJD(6) + t2156) * t2077 + t2344;
t2350 = t2075 * qJD(6) - t2209 * t2031 - t2204 * t2257;
t2396 = t2075 * t2156;
t1862 = t2350 + t2396;
t1783 = -t1858 * t2204 + t1862 * t2209;
t1785 = -t1858 * t2209 - t1862 * t2204;
t2451 = qJ(5) * t1785 - t1783 * t2435;
t1710 = t1796 * t2210 + t1797 * t2205;
t1974 = t2206 * t2056 - t2211 * t2215;
t1918 = -t2231 * pkin(3) - t2365 * pkin(10) + t2166 * t2121 + t1974;
t2222 = t2257 * pkin(4) + t1918 - t2493;
t2348 = pkin(4) * t2160 - 0.2e1 * qJD(5);
t1809 = t2135 * t2348 + t2222;
t2349 = qJ(5) * t2205 + pkin(3);
t2431 = pkin(4) * t2210;
t2450 = -t1809 * (t2349 + t2431) + pkin(10) * t1710;
t2073 = t2075 ^ 2;
t2151 = t2156 ^ 2;
t1980 = -t2151 - t2073;
t1867 = t1980 * t2204 + t2483;
t1868 = t1980 * t2209 - t2488;
t2449 = qJ(5) * t1868 - t1867 * t2435 + t1682;
t2074 = t2077 ^ 2;
t2019 = -t2074 - t2151;
t1952 = -t2009 + t2108;
t2412 = t1952 * t2204;
t1893 = t2019 * t2209 + t2412;
t2411 = t1952 * t2209;
t1894 = -t2019 * t2204 + t2411;
t2448 = qJ(5) * t1894 - t1893 * t2435 + t1683;
t2219 = 0.2e1 * qJD(5) * t2135 - t2222;
t1787 = (-t2458 - t2103) * pkin(4) + t2219;
t2447 = t2210 * t1787 - t2349 * t2458 + t2508;
t1786 = -pkin(4) * t2103 + t2219 + t2493;
t2446 = -t2540 + t2205 * t1786 + t2455 * (pkin(3) + t2431);
t2440 = -t1991 * t2377 + t2203 * t2324 + t2323 * t2378;
t2162 = t2164 ^ 2;
t2163 = t2166 ^ 2;
t2199 = t2202 ^ 2;
t2432 = pkin(3) * t2206;
t2427 = pkin(11) * t1636;
t2426 = pkin(11) * t1637;
t2422 = qJ(5) * t2210;
t2418 = qJD(1) * t2212;
t2414 = t1918 * t2205;
t2413 = t1918 * t2210;
t2405 = t2454 * t2205;
t2404 = t2454 * t2210;
t2398 = t2055 * t2206;
t2397 = t2055 * t2211;
t2099 = -t2231 - t2384;
t2393 = t2099 * t2206;
t2392 = t2099 * t2211;
t2389 = t2156 * t2077;
t2388 = t2156 * t2204;
t2387 = t2156 * t2209;
t2353 = t2207 * t2212 * t2438;
t2190 = t2199 * t2353;
t2169 = t2190 + t2338;
t2383 = t2169 * t2207;
t2382 = t2169 * t2212;
t2170 = -t2190 + t2338;
t2381 = t2170 * t2207;
t2380 = t2170 * t2212;
t2379 = t2199 * t2438;
t1772 = t2342 * pkin(5) + t2437 * pkin(11) + t2222 + (pkin(5) * qJD(4) - t2333 + t2348) * t2135;
t2374 = t2204 * t1772;
t2148 = t2202 * t2233 + t2425;
t2372 = t2207 * t2148;
t1771 = t2209 * t1772;
t2371 = t2212 * t2148;
t2200 = t2207 ^ 2;
t2201 = t2212 ^ 2;
t2368 = t2200 + t2201;
t2364 = -pkin(3) * t2211 - pkin(2);
t2361 = t2206 * t2009;
t2360 = t2211 * t2009;
t2357 = t2207 * t2384;
t2356 = t2212 * t2384;
t2355 = t2200 * t2379;
t2354 = t2201 * t2379;
t2347 = -pkin(11) * t1893 - t1771;
t2345 = 0.2e1 * qJD(2) + t2420;
t1739 = t1825 * t2205 + t2210 * t1826;
t1876 = t1974 * t2206 + t2211 * t1975;
t2339 = -t2191 * t2208 - t2213 * t2192;
t2334 = -pkin(3) * t1918 + pkin(10) * t1739;
t2189 = qJDD(1) * t2213 - t2208 * t2438;
t2332 = -pkin(7) * t2189 - g(3) * t2208;
t2330 = t2206 * t2145;
t2327 = t2211 * t2146;
t2326 = -pkin(4) * t1797 + qJ(5) * t1796;
t2325 = -pkin(4) * t2454 - qJ(5) * t1994;
t2159 = -t2355 - t2337;
t2120 = -t2159 * t2207 - t2380;
t2321 = pkin(8) * t2120 - t2372;
t2176 = -t2337 - t2354;
t2128 = t2176 * t2212 - t2383;
t2320 = pkin(8) * t2128 + t2371;
t2317 = -pkin(11) * t1867 - t2374;
t2316 = -pkin(11) * t1868 - t1771;
t2315 = -pkin(11) * t1894 + t2374;
t2314 = qJD(1) * t2346;
t2313 = t2199 * t2207 * t2351;
t1608 = t1636 * t2205 + t1637 * t2210;
t1603 = t1608 * t2211 + t1772 * t2206;
t1607 = -t1636 * t2210 + t1637 * t2205;
t2311 = t1603 * t2207 - t1607 * t2212;
t1675 = t1710 * t2211 + t1809 * t2206;
t1709 = t1796 * t2205 - t1797 * t2210;
t2310 = t1675 * t2207 - t1709 * t2212;
t1705 = t1783 * t2205 + t1785 * t2210;
t1936 = -t2073 - t2074;
t1688 = t1705 * t2211 - t1936 * t2206;
t1703 = -t1783 * t2210 + t1785 * t2205;
t2309 = t1688 * t2207 - t1703 * t2212;
t1857 = (qJD(6) - t2156) * t2077 + t2344;
t2265 = -t2350 + t2396;
t1782 = -t1857 * t2204 + t2209 * t2265;
t1784 = -t1857 * t2209 - t2204 * t2265;
t1704 = t1782 * t2205 + t1784 * t2210;
t2008 = t2074 - t2073;
t1694 = t1704 * t2211 - t2008 * t2206;
t1702 = -t1782 * t2210 + t1784 * t2205;
t2308 = t1694 * t2207 - t1702 * t2212;
t1715 = t1739 * t2211 + t1918 * t2206;
t1738 = -t1825 * t2210 + t1826 * t2205;
t2307 = t1715 * t2207 - t1738 * t2212;
t1791 = t1867 * t2205 + t1868 * t2210;
t1727 = t1791 * t2211 - t1857 * t2206;
t1790 = -t1867 * t2210 + t1868 * t2205;
t2306 = t1727 * t2207 - t1790 * t2212;
t1808 = t1893 * t2205 + t1894 * t2210;
t1737 = t1808 * t2211 - t2206 * t2265;
t1807 = -t1893 * t2210 + t1894 * t2205;
t2305 = t1737 * t2207 - t1807 * t2212;
t2039 = -t2074 + t2151;
t1897 = t2039 * t2209 + t2488;
t1899 = -t2039 * t2204 + t2483;
t1812 = t1897 * t2205 + t1899 * t2210;
t1743 = t1812 * t2211 + t1862 * t2206;
t1810 = -t1897 * t2210 + t1899 * t2205;
t2304 = t1743 * t2207 - t1810 * t2212;
t2038 = t2073 - t2151;
t1898 = t2038 * t2204 - t2411;
t1900 = t2038 * t2209 + t2412;
t1813 = t1898 * t2205 + t1900 * t2210;
t1744 = t1813 * t2211 + t1858 * t2206;
t1811 = -t1898 * t2210 + t1900 * t2205;
t2303 = t1744 * t2207 - t1811 * t2212;
t1901 = -qJD(6) * t2077 - t2344;
t1851 = -t1901 * t2209 + t2075 * t2388;
t1852 = -t1901 * t2204 - t2075 * t2387;
t1779 = -t1851 * t2205 + t1852 * t2210;
t1755 = t1779 * t2211 + t2361;
t1777 = t1851 * t2210 + t1852 * t2205;
t2302 = t1755 * t2207 - t1777 * t2212;
t1853 = -t2077 * t2387 - t2204 * t2350;
t1854 = t2077 * t2388 - t2209 * t2350;
t1780 = t1853 * t2205 + t1854 * t2210;
t1756 = t1780 * t2211 - t2361;
t1778 = -t1853 * t2210 + t1854 * t2205;
t2301 = t1756 * t2207 - t1778 * t2212;
t1956 = (t2075 * t2204 + t2077 * t2209) * t2156;
t1957 = (t2075 * t2209 - t2077 * t2204) * t2156;
t1850 = t1956 * t2205 + t1957 * t2210;
t1834 = t1850 * t2211 + t2108 * t2206;
t1849 = -t1956 * t2210 + t1957 * t2205;
t2300 = t1834 * t2207 - t1849 * t2212;
t1890 = -t1994 * t2210 + t2405;
t1839 = t1890 * t2211 - t2486;
t1886 = -t1994 * t2205 - t2404;
t2299 = t1839 * t2207 - t1886 * t2212;
t1996 = (-qJD(4) + t2160) * t2135 - t2342;
t1892 = t1996 * t2210 + t2405;
t1840 = t1892 * t2211 - t2486;
t1888 = t1996 * t2205 - t2404;
t2298 = t1840 * t2207 - t1888 * t2212;
t1865 = -t2206 * t2455 - t2536;
t2295 = t1865 * t2207 - t2538;
t2001 = (qJD(4) + t2160) * t2133 + t2216;
t1873 = -t2001 * t2206 + t2536;
t2293 = t1873 * t2207 + t2538;
t2291 = t1876 * t2207 - t2055 * t2212;
t1875 = -t1974 * t2211 + t1975 * t2206;
t2004 = -t2067 * t2206 - t2211 * t2476;
t2123 = t2163 - t2162;
t2282 = t2004 * t2207 - t2123 * t2212;
t2066 = -t2166 * t2195 + t2340;
t2068 = -t2145 + t2112;
t2005 = t2066 * t2211 + t2068 * t2206;
t2093 = t2162 + t2163;
t2281 = t2005 * t2207 + t2093 * t2212;
t2117 = -t2365 - t2162;
t2029 = t2117 * t2211 - t2465;
t2280 = t2029 * t2207 - t2212 * t2476;
t2124 = -t2163 - t2365;
t2037 = -t2124 * t2206 + t2392;
t2069 = (0.2e1 * qJD(3) - t2195) * t2164 + t2235;
t2279 = t2037 * t2207 + t2069 * t2212;
t2139 = t2365 - t2163;
t2044 = -t2139 * t2206 + t2463;
t2278 = t2044 * t2207 - t2068 * t2212;
t2138 = t2162 - t2365;
t2045 = t2138 * t2211 + t2393;
t2064 = t2146 + t2258;
t2277 = t2045 * t2207 + t2064 * t2212;
t2118 = g(3) * t2377 + t2341;
t2119 = t2212 * t2168 + t2218;
t2276 = -t2212 * t2118 + t2207 * t2119;
t2035 = t2118 * t2207 + t2119 * t2212;
t2261 = t2202 * t2314;
t2180 = t2212 * t2261;
t2141 = t2180 + t2172;
t2179 = t2207 * t2261;
t2144 = -t2179 - t2238;
t2274 = t2141 * t2212 + t2144 * t2207;
t2142 = -t2180 + t2172;
t2143 = t2179 - t2238;
t2273 = -t2142 * t2212 + t2143 * t2207;
t2272 = t2159 * t2212 - t2381;
t2174 = t2337 - t2355;
t2271 = t2174 * t2212 + t2383;
t2270 = t2176 * t2207 + t2382;
t2175 = -t2337 + t2354;
t2269 = t2175 * t2207 + t2380;
t2268 = t2191 * t2213 - t2208 * t2192;
t2266 = t2202 * t2338;
t2264 = -pkin(11) * t1783 - t1636;
t2263 = -pkin(11) * t1785 - t1637;
t2059 = t2206 * t2258 - t2328;
t2260 = t2059 * t2207 + t2356;
t2061 = t2211 * t2112 + t2329;
t2259 = t2061 * t2207 - t2356;
t2255 = -pkin(3) * t2458 - t2413 + t2508;
t2254 = pkin(3) * t2001 + t2414 + t2540;
t1581 = -pkin(3) * t1607 - t2452;
t1619 = -t1772 * t2435 - t2426;
t1629 = -qJ(5) * t1772 - t2427;
t1583 = -pkin(10) * t1607 - t1619 * t2205 + t1629 * t2210;
t1602 = t1608 * t2206 - t1772 * t2211;
t1567 = -pkin(9) * t1602 - t1581 * t2206 + t1583 * t2211;
t2230 = -pkin(3) * t1772 + pkin(10) * t1608 + t1619 * t2210 + t1629 * t2205;
t1575 = -pkin(2) * t1602 - t2230;
t1587 = t1603 * t2212 + t1607 * t2207;
t2253 = pkin(8) * t1587 + t1567 * t2207 + t1575 * t2212;
t1627 = t1936 * t2435 + t2263;
t1628 = qJ(5) * t1936 + t2264;
t1590 = -pkin(10) * t1703 - t1627 * t2205 + t1628 * t2210;
t1635 = -pkin(3) * t1703 - t2451;
t1687 = t1705 * t2206 + t1936 * t2211;
t1584 = -pkin(9) * t1687 + t1590 * t2211 - t1635 * t2206;
t2229 = pkin(3) * t1936 + pkin(10) * t1705 + t1627 * t2210 + t1628 * t2205;
t1588 = -pkin(2) * t1687 - t2229;
t1643 = t1688 * t2212 + t1703 * t2207;
t2252 = pkin(8) * t1643 + t1584 * t2207 + t1588 * t2212;
t1676 = t1857 * t2435 + t2316;
t1698 = qJ(5) * t1857 + t2317;
t1632 = -pkin(10) * t1790 - t1676 * t2205 + t1698 * t2210;
t1638 = -pkin(3) * t1790 - t2449;
t1726 = t1791 * t2206 + t1857 * t2211;
t1595 = -pkin(9) * t1726 + t1632 * t2211 - t1638 * t2206;
t2228 = pkin(3) * t1857 + pkin(10) * t1791 + t1676 * t2210 + t1698 * t2205;
t1615 = -pkin(2) * t1726 - t2228;
t1679 = t1727 * t2212 + t1790 * t2207;
t2251 = pkin(8) * t1679 + t1595 * t2207 + t1615 * t2212;
t1677 = t2265 * t2435 + t2315;
t1706 = qJ(5) * t2265 + t2347;
t1634 = -pkin(10) * t1807 - t1677 * t2205 + t1706 * t2210;
t1641 = -pkin(3) * t1807 - t2448;
t1736 = t1808 * t2206 + t2211 * t2265;
t1599 = -pkin(9) * t1736 + t1634 * t2211 - t1641 * t2206;
t2227 = pkin(3) * t2265 + pkin(10) * t1808 + t1677 * t2210 + t1706 * t2205;
t1618 = -pkin(2) * t1736 - t2227;
t1696 = t1737 * t2212 + t1807 * t2207;
t2250 = pkin(8) * t1696 + t1599 * t2207 + t1618 * t2212;
t1652 = -pkin(3) * t1709 - t2326;
t1660 = -pkin(10) * t1709 + (pkin(4) * t2205 - t2422) * t1809;
t1674 = t1710 * t2206 - t1809 * t2211;
t1609 = -pkin(9) * t1674 - t1652 * t2206 + t1660 * t2211;
t1622 = -pkin(2) * t1674 - t2450;
t1642 = t1675 * t2212 + t1709 * t2207;
t2249 = pkin(8) * t1642 + t1609 * t2207 + t1622 * t2212;
t1714 = t1739 * t2206 - t1918 * t2211;
t1645 = -pkin(9) * t1714 + (-pkin(10) * t2211 + t2432) * t1738;
t1666 = -pkin(2) * t1714 - t2334;
t1672 = t1715 * t2212 + t1738 * t2207;
t2248 = pkin(8) * t1672 + t1645 * t2207 + t1666 * t2212;
t1774 = pkin(4) * t2456 + t1796;
t1781 = qJ(5) * t2456 + t1797;
t1678 = -pkin(10) * t1886 - t1774 * t2205 + t1781 * t2210;
t1806 = -pkin(3) * t1886 - t2325;
t1837 = t1890 * t2206 + t2481;
t1649 = -pkin(9) * t1837 + t1678 * t2211 - t1806 * t2206;
t2226 = pkin(10) * t1890 + t1774 * t2210 + t1781 * t2205 + t2494;
t1667 = -pkin(2) * t1837 - t2226;
t1788 = t1839 * t2212 + t1886 * t2207;
t2247 = pkin(8) * t1788 + t1649 * t2207 + t1667 * t2212;
t1724 = -pkin(4) * t2403 + t1786 * t2210 - t2541;
t2225 = pkin(4) * t2047 + qJ(5) * t2459 + t2312;
t1732 = -t2225 - 0.2e1 * t2416 - t2543;
t1863 = t2211 * t2455 - t2537;
t1659 = -pkin(9) * t1863 + t1724 * t2211 - t1732 * t2206;
t1695 = -pkin(2) * t1863 - t2446;
t1814 = t1865 * t2212 + t2539;
t2246 = pkin(8) * t1814 + t1659 * t2207 + t1695 * t2212;
t1725 = -t1787 * t2205 - t2422 * t2458 - t2507;
t2217 = -pkin(4) * t2343 + qJ(5) * t2453 - t1797;
t1734 = -t2217 - t2509;
t1665 = t1725 * t2211 - t1734 * t2206 - t2524;
t1697 = -t2447 - t2525;
t2245 = t1665 * t2207 + t1697 * t2212 + t2542;
t1711 = -pkin(10) * t1888 - t1738;
t1838 = t1892 * t2206 + t2481;
t1673 = -pkin(9) * t1838 + t1711 * t2211 + t1888 * t2432;
t2236 = pkin(10) * t1892 + t1739 + t2494;
t1684 = -pkin(2) * t1838 - t2236;
t1789 = t1840 * t2212 + t1888 * t2207;
t2244 = pkin(8) * t1789 + t1673 * t2207 + t1684 * t2212;
t1794 = t1825 - t2509;
t1827 = t2414 - t2507;
t1701 = -t1794 * t2206 + t1827 * t2211 - t2524;
t1740 = -t2255 - t2525;
t2243 = t1701 * t2207 + t1740 * t2212 + t2542;
t1795 = t1826 + t2543;
t1832 = t2413 + t2541;
t1871 = t2001 * t2211 + t2537;
t1707 = -pkin(9) * t1871 - t1795 * t2206 + t1832 * t2211;
t1745 = -pkin(2) * t1871 - t2254;
t1817 = t1873 * t2212 - t2539;
t2242 = pkin(8) * t1817 + t1707 * t2207 + t1745 * t2212;
t2028 = t2117 * t2206 + t2463;
t1907 = -pkin(2) * t2028 + t1974;
t1955 = -pkin(9) * t2028 + t2398;
t1961 = t2029 * t2212 + t2207 * t2476;
t2241 = pkin(8) * t1961 + t1907 * t2212 + t1955 * t2207;
t2036 = t2124 * t2211 + t2393;
t1910 = -pkin(2) * t2036 + t1975;
t1962 = -pkin(9) * t2036 + t2397;
t1963 = t2037 * t2212 - t2069 * t2207;
t2240 = pkin(8) * t1963 + t1910 * t2212 + t1962 * t2207;
t2089 = t2142 * t2207 + t2143 * t2212;
t2239 = pkin(8) * t2089 + t2035;
t2003 = t2066 * t2206 - t2068 * t2211;
t1823 = -pkin(9) * t2003 - t1875;
t1935 = t2005 * t2212 - t2093 * t2207;
t2237 = pkin(8) * t1935 + t1823 * t2207 - t2003 * t2433;
t1835 = t1876 * t2212 + t2055 * t2207;
t2234 = pkin(8) * t1835 + t1875 * t2336;
t2198 = t2202 * t2199;
t2188 = t2208 * qJDD(1) + t2213 * t2438;
t2185 = t2203 * t2338;
t2178 = t2368 * t2379;
t2177 = (t2200 - t2201) * t2379;
t2173 = -pkin(7) * t2188 + g(3) * t2213;
t2147 = t2346 * t2368 * t2421;
t2140 = (t2345 * t2418 + t2366) * t2202;
t2137 = t2212 * t2172 - t2200 * t2261;
t2136 = (-t2201 * t2314 + t2207 * t2256) * t2202;
t2127 = t2175 * t2212 - t2381;
t2126 = -t2174 * t2207 + t2382;
t2116 = (t2203 * t2172 + (qJD(2) * t2203 * t2202 + (t2202 * t2203 ^ 2 + t2198) * qJD(1)) * t2418) * t2207;
t2115 = t2172 * t2378 + t2313;
t2114 = -t2199 * t2212 * t2256 - t2313;
t2113 = -t2198 * t2353 + (-t2345 * t2419 + t2367) * t2202 * t2375;
t2091 = t2330 + t2327;
t2090 = -t2141 * t2207 + t2144 * t2212;
t2083 = t2202 * t2144 + t2203 * t2270;
t2082 = -t2202 * t2143 + t2203 * t2269;
t2081 = -t2202 * t2142 + t2203 * t2271;
t2080 = -t2203 * t2144 + t2202 * t2270;
t2079 = t2203 * t2143 + t2202 * t2269;
t2078 = t2203 * t2142 + t2202 * t2271;
t2063 = -t2202 * t2140 + t2203 * t2272;
t2062 = t2203 * t2140 + t2202 * t2272;
t2060 = t2206 * t2112 - t2327;
t2058 = -t2211 * t2258 - t2330;
t2057 = t2212 * t2092 + t2207 * t2231;
t2054 = -t2202 * t2177 + t2203 * t2274;
t2053 = t2202 * t2178 + t2203 * t2273;
t2052 = t2203 * t2177 + t2202 * t2274;
t2051 = -t2203 * t2178 + t2202 * t2273;
t2043 = t2138 * t2206 - t2392;
t2042 = t2139 * t2211 + t2465;
t2013 = t2061 * t2212 + t2357;
t2012 = t2059 * t2212 - t2357;
t2011 = t2202 * t2148 + t2203 * t2276;
t2010 = -t2203 * t2148 + t2202 * t2276;
t2007 = -t2202 * t2091 + t2203 * t2475;
t2006 = t2203 * t2091 + t2202 * t2475;
t2002 = t2067 * t2211 - t2206 * t2476;
t1977 = t2045 * t2212 - t2064 * t2207;
t1976 = t2044 * t2212 + t2068 * t2207;
t1964 = -t2372 + (-t2080 * t2202 - t2083 * t2203) * pkin(8);
t1960 = -t2371 + (-t2062 * t2202 - t2063 * t2203) * pkin(8);
t1959 = -pkin(1) * t2080 + t2202 * t2118 + t2203 * t2320;
t1958 = pkin(1) * t2083 - t2203 * t2118 + t2202 * t2320;
t1947 = t2004 * t2212 + t2123 * t2207;
t1946 = -pkin(1) * t2062 + t2202 * t2119 + t2203 * t2321;
t1945 = pkin(1) * t2063 - t2203 * t2119 + t2202 * t2321;
t1940 = -t2202 * t2060 + t2203 * t2259;
t1939 = -t2202 * t2058 + t2203 * t2260;
t1938 = t2203 * t2060 + t2202 * t2259;
t1937 = t2203 * t2058 + t2202 * t2260;
t1934 = pkin(1) * t2011 + t2035 * t2430;
t1933 = pkin(8) * t2035 * t2203 - pkin(1) * t2010;
t1921 = -pkin(1) * t2051 + t2203 * t2239;
t1920 = pkin(1) * t2053 + t2202 * t2239;
t1917 = pkin(2) * t2069 + pkin(9) * t2037 + t2398;
t1915 = -t2202 * t2043 + t2203 * t2277;
t1914 = -t2202 * t2042 + t2203 * t2278;
t1913 = t2203 * t2043 + t2202 * t2277;
t1912 = t2203 * t2042 + t2202 * t2278;
t1911 = (-t2010 * t2202 - t2011 * t2203) * pkin(8);
t1909 = -pkin(2) * t2476 + pkin(9) * t2029 - t2397;
t1908 = (-t2051 * t2202 - t2053 * t2203) * pkin(8) - t2276;
t1906 = -t2202 * t2036 + t2203 * t2279;
t1905 = t2203 * t2036 + t2202 * t2279;
t1896 = -t2202 * t2028 + t2203 * t2280;
t1895 = t2203 * t2028 + t2202 * t2280;
t1870 = -t2202 * t2002 + t2203 * t2282;
t1869 = t2203 * t2002 + t2202 * t2282;
t1856 = -t2202 * t2003 + t2203 * t2281;
t1855 = t2203 * t2003 + t2202 * t2281;
t1836 = -pkin(2) * t2055 + pkin(9) * t1876;
t1833 = t1850 * t2206 - t2108 * t2211;
t1816 = pkin(2) * t2093 + pkin(9) * t2005 + t1876;
t1776 = -t2202 * t1875 + t2203 * t2291;
t1775 = t2203 * t1875 + t2202 * t2291;
t1773 = t1834 * t2212 + t1849 * t2207;
t1759 = -t2202 * t1871 + t2203 * t2293;
t1757 = t2203 * t1871 + t2202 * t2293;
t1754 = t1780 * t2206 + t2360;
t1753 = t1779 * t2206 - t2360;
t1748 = -t2202 * t1863 + t2203 * t2295;
t1746 = t2203 * t1863 + t2202 * t2295;
t1742 = t1813 * t2206 - t1858 * t2211;
t1741 = t1812 * t2206 - t1862 * t2211;
t1735 = -t2207 * t1910 + t2212 * t1962 + (-t1905 * t2202 - t1906 * t2203) * pkin(8);
t1733 = -t2207 * t1907 + t2212 * t1955 + (-t1895 * t2202 - t1896 * t2203) * pkin(8);
t1723 = -pkin(1) * t1905 - t1917 * t2202 + t2203 * t2240;
t1722 = pkin(1) * t1906 + t1917 * t2203 + t2202 * t2240;
t1721 = -t2202 * t1838 + t2203 * t2298;
t1720 = -t2202 * t1837 + t2203 * t2299;
t1719 = t2203 * t1838 + t2202 * t2298;
t1718 = t2203 * t1837 + t2202 * t2299;
t1717 = -pkin(1) * t1895 - t1909 * t2202 + t2203 * t2241;
t1716 = pkin(1) * t1896 + t1909 * t2203 + t2202 * t2241;
t1713 = -t2202 * t1833 + t2203 * t2300;
t1712 = t2203 * t1833 + t2202 * t2300;
t1708 = t2003 * t2434 + t2212 * t1823 + (-t1855 * t2202 - t1856 * t2203) * pkin(8);
t1700 = t1744 * t2212 + t1811 * t2207;
t1699 = t1743 * t2212 + t1810 * t2207;
t1693 = t1704 * t2206 + t2008 * t2211;
t1692 = pkin(9) * t1873 + t1795 * t2211 + t1832 * t2206 + t2544;
t1691 = t1756 * t2212 + t1778 * t2207;
t1690 = t1755 * t2212 + t1777 * t2207;
t1689 = t1794 * t2211 + t1827 * t2206 + t2517;
t1686 = -pkin(1) * t1855 - t1816 * t2202 + t2203 * t2237;
t1685 = pkin(1) * t1856 + t1816 * t2203 + t2202 * t2237;
t1671 = t2335 * t1875 + (-t1775 * t2202 - t1776 * t2203) * pkin(8);
t1670 = -pkin(1) * t1775 - t1836 * t2202 + t2203 * t2234;
t1669 = pkin(1) * t1776 + t1836 * t2203 + t2202 * t2234;
t1668 = pkin(9) * t1840 + t2206 * t1711 + t1888 * t2364;
t1664 = -t2202 * t1742 + t2203 * t2303;
t1663 = -t2202 * t1741 + t2203 * t2304;
t1662 = t2203 * t1742 + t2202 * t2303;
t1661 = t2203 * t1741 + t2202 * t2304;
t1658 = -t2202 * t1754 + t2203 * t2301;
t1657 = -t2202 * t1753 + t2203 * t2302;
t1656 = t2203 * t1754 + t2202 * t2301;
t1655 = t2203 * t1753 + t2202 * t2302;
t1654 = -t2202 * t1736 + t2203 * t2305;
t1653 = t2203 * t1736 + t2202 * t2305;
t1651 = t1725 * t2206 + t1734 * t2211 + t2517;
t1650 = pkin(9) * t1865 + t1724 * t2206 + t1732 * t2211 - t2544;
t1648 = -t2202 * t1726 + t2203 * t2306;
t1647 = t2203 * t1726 + t2202 * t2306;
t1646 = t1694 * t2212 + t1702 * t2207;
t1644 = -pkin(2) * t1886 + pkin(9) * t1839 + t1678 * t2206 + t1806 * t2211;
t1640 = -t2202 * t1714 + t2203 * t2307;
t1639 = t2203 * t1714 + t2202 * t2307;
t1633 = pkin(9) * t1715 + (-pkin(10) * t2206 + t2364) * t1738;
t1631 = t2212 * t1707 - t2207 * t1745 + (-t1757 * t2202 - t1759 * t2203) * pkin(8);
t1630 = t2212 * t1701 - t2207 * t1740 + t2545;
t1626 = -t2202 * t1693 + t2203 * t2308;
t1625 = t2203 * t1693 + t2202 * t2308;
t1624 = -t2202 * t1687 + t2203 * t2309;
t1623 = t2203 * t1687 + t2202 * t2309;
t1621 = -t2202 * t1674 + t2203 * t2310;
t1620 = t2203 * t1674 + t2202 * t2310;
t1617 = -pkin(1) * t1757 - t1692 * t2202 + t2203 * t2242;
t1616 = pkin(1) * t1759 + t1692 * t2203 + t2202 * t2242;
t1614 = -t1689 * t2202 + t2203 * t2243 - t2552;
t1613 = t1689 * t2203 + t2202 * t2243 + t2553;
t1612 = t2212 * t1665 - t2207 * t1697 + t2545;
t1611 = t2212 * t1659 - t2207 * t1695 + (-t1746 * t2202 - t1748 * t2203) * pkin(8);
t1610 = t2212 * t1673 - t2207 * t1684 + (-t1719 * t2202 - t1721 * t2203) * pkin(8);
t1606 = t2212 * t1649 - t2207 * t1667 + (-t1718 * t2202 - t1720 * t2203) * pkin(8);
t1605 = -pkin(1) * t1719 - t1668 * t2202 + t2203 * t2244;
t1604 = pkin(1) * t1721 + t1668 * t2203 + t2202 * t2244;
t1601 = -t1651 * t2202 + t2203 * t2245 - t2552;
t1600 = t1651 * t2203 + t2202 * t2245 + t2553;
t1598 = -pkin(1) * t1746 - t2202 * t1650 + t2203 * t2246;
t1597 = pkin(1) * t1748 + t1650 * t2203 + t2202 * t2246;
t1596 = -pkin(2) * t1709 + pkin(9) * t1675 + t1652 * t2211 + t1660 * t2206;
t1594 = -pkin(2) * t1807 + pkin(9) * t1737 + t1634 * t2206 + t1641 * t2211;
t1593 = -pkin(2) * t1790 + pkin(9) * t1727 + t1632 * t2206 + t1638 * t2211;
t1592 = -pkin(1) * t1718 - t2202 * t1644 + t2203 * t2247;
t1591 = pkin(1) * t1720 + t2203 * t1644 + t2202 * t2247;
t1589 = t2212 * t1645 - t2207 * t1666 + (-t1639 * t2202 - t1640 * t2203) * pkin(8);
t1586 = -pkin(1) * t1639 - t2202 * t1633 + t2203 * t2248;
t1585 = pkin(1) * t1640 + t2203 * t1633 + t2202 * t2248;
t1582 = -pkin(2) * t1703 + pkin(9) * t1688 + t1590 * t2206 + t1635 * t2211;
t1580 = t2212 * t1599 - t2207 * t1618 + (-t1653 * t2202 - t1654 * t2203) * pkin(8);
t1579 = t2212 * t1595 - t2207 * t1615 + (-t1647 * t2202 - t1648 * t2203) * pkin(8);
t1578 = t2212 * t1609 - t2207 * t1622 + (-t1620 * t2202 - t1621 * t2203) * pkin(8);
t1577 = -t2202 * t1602 + t2203 * t2311;
t1576 = t2203 * t1602 + t2202 * t2311;
t1574 = -pkin(1) * t1653 - t2202 * t1594 + t2203 * t2250;
t1573 = pkin(1) * t1654 + t2203 * t1594 + t2202 * t2250;
t1572 = -pkin(1) * t1647 - t2202 * t1593 + t2203 * t2251;
t1571 = pkin(1) * t1648 + t2203 * t1593 + t2202 * t2251;
t1570 = -pkin(1) * t1620 - t2202 * t1596 + t2203 * t2249;
t1569 = pkin(1) * t1621 + t2203 * t1596 + t2202 * t2249;
t1568 = t2212 * t1584 - t2207 * t1588 + (-t1623 * t2202 - t1624 * t2203) * pkin(8);
t1566 = -pkin(2) * t1607 + pkin(9) * t1603 + t1581 * t2211 + t1583 * t2206;
t1565 = -pkin(1) * t1623 - t2202 * t1582 + t2203 * t2252;
t1564 = pkin(1) * t1624 + t2203 * t1582 + t2202 * t2252;
t1563 = t2212 * t1567 - t2207 * t1575 + (-t1576 * t2202 - t1577 * t2203) * pkin(8);
t1562 = -pkin(1) * t1576 - t2202 * t1566 + t2203 * t2253;
t1561 = pkin(1) * t1577 + t2203 * t1566 + t2202 * t2253;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t2189, 0, -t2188, 0, t2332, -t2173, -t2268, -pkin(7) * t2268, -t2208 * t2116 + t2137 * t2213, -t2208 * t2054 + t2090 * t2213, -t2208 * t2081 + t2126 * t2213, -t2208 * t2113 + t2136 * t2213, -t2208 * t2082 + t2127 * t2213, t2213 * t2147 + t2208 * t2266, t2213 * t1964 - t2208 * t1959 - pkin(7) * (t2083 * t2213 + t2208 * t2128), t2213 * t1960 - t2208 * t1946 - pkin(7) * (t2063 * t2213 + t2208 * t2120), t2213 * t1908 - t2208 * t1921 - pkin(7) * (t2053 * t2213 + t2208 * t2089), t2213 * t1911 - t2208 * t1933 - pkin(7) * (t2011 * t2213 + t2208 * t2035), -t2208 * t1940 + t2013 * t2213, -t2208 * t1870 + t1947 * t2213, -t2208 * t1914 + t1976 * t2213, -t2208 * t1939 + t2012 * t2213, -t2208 * t1915 + t1977 * t2213, -t2208 * t2007 + t2057 * t2213, t2213 * t1733 - t2208 * t1717 - pkin(7) * (t1896 * t2213 + t2208 * t1961), t2213 * t1735 - t2208 * t1723 - pkin(7) * (t1906 * t2213 + t2208 * t1963), t2213 * t1708 - t2208 * t1686 - pkin(7) * (t1856 * t2213 + t2208 * t1935), t2213 * t1671 - t2208 * t1670 - pkin(7) * (t1776 * t2213 + t2208 * t1835), t2467, -t2571, t2563, t2515, -t2569, t2514, -t2208 * t1614 + t2213 * t1630 - t2546, t2213 * t1631 - t2208 * t1617 - pkin(7) * (t1759 * t2213 + t2208 * t1817), t2213 * t1610 - t2208 * t1605 - pkin(7) * (t1721 * t2213 + t2208 * t1789), t2213 * t1589 - t2208 * t1586 - pkin(7) * (t1640 * t2213 + t2208 * t1672), t2467, t2563, t2571, t2514, t2569, t2515, -t2208 * t1601 + t2213 * t1612 - t2546, t2213 * t1606 - t2208 * t1592 - pkin(7) * (t1720 * t2213 + t2208 * t1788), t2213 * t1611 - t2208 * t1598 - pkin(7) * (t1748 * t2213 + t2208 * t1814), t2213 * t1578 - t2208 * t1570 - pkin(7) * (t1621 * t2213 + t2208 * t1642), -t2208 * t1658 + t1691 * t2213, -t2208 * t1626 + t1646 * t2213, -t2208 * t1663 + t1699 * t2213, -t2208 * t1657 + t1690 * t2213, -t2208 * t1664 + t1700 * t2213, -t2208 * t1713 + t1773 * t2213, t2213 * t1579 - t2208 * t1572 - pkin(7) * (t1648 * t2213 + t2208 * t1679), t2213 * t1580 - t2208 * t1574 - pkin(7) * (t1654 * t2213 + t2208 * t1696), t2213 * t1568 - t2208 * t1565 - pkin(7) * (t1624 * t2213 + t2208 * t1643), t2213 * t1563 - t2208 * t1562 - pkin(7) * (t1577 * t2213 + t2208 * t1587); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t2188, 0, t2189, 0, t2173, t2332, t2339, pkin(7) * t2339, t2116 * t2213 + t2208 * t2137, t2054 * t2213 + t2208 * t2090, t2081 * t2213 + t2208 * t2126, t2113 * t2213 + t2208 * t2136, t2082 * t2213 + t2208 * t2127, t2208 * t2147 - t2213 * t2266, t2208 * t1964 + t2213 * t1959 + pkin(7) * (-t2208 * t2083 + t2128 * t2213), t2208 * t1960 + t2213 * t1946 + pkin(7) * (-t2208 * t2063 + t2120 * t2213), t2208 * t1908 + t2213 * t1921 + pkin(7) * (-t2208 * t2053 + t2089 * t2213), t2208 * t1911 + t2213 * t1933 + pkin(7) * (-t2208 * t2011 + t2035 * t2213), t1940 * t2213 + t2208 * t2013, t1870 * t2213 + t2208 * t1947, t1914 * t2213 + t2208 * t1976, t1939 * t2213 + t2208 * t2012, t1915 * t2213 + t2208 * t1977, t2007 * t2213 + t2208 * t2057, t2208 * t1733 + t2213 * t1717 + pkin(7) * (-t2208 * t1896 + t1961 * t2213), t2208 * t1735 + t2213 * t1723 + pkin(7) * (-t2208 * t1906 + t1963 * t2213), t2208 * t1708 + t2213 * t1686 + pkin(7) * (-t2208 * t1856 + t1935 * t2213), t2208 * t1671 + t2213 * t1670 + pkin(7) * (-t2208 * t1776 + t1835 * t2213), t2468, t2570, t2562, t2512, t2568, t2511, t2213 * t1614 + t2208 * t1630 + t2547, t2208 * t1631 + t2213 * t1617 + pkin(7) * (-t2208 * t1759 + t1817 * t2213), t2208 * t1610 + t2213 * t1605 + pkin(7) * (-t2208 * t1721 + t1789 * t2213), t2208 * t1589 + t2213 * t1586 + pkin(7) * (-t2208 * t1640 + t1672 * t2213), t2468, t2562, -t2570, t2511, -t2568, t2512, t2213 * t1601 + t2208 * t1612 + t2547, t2208 * t1606 + t2213 * t1592 + pkin(7) * (-t2208 * t1720 + t1788 * t2213), t2208 * t1611 + t2213 * t1598 + pkin(7) * (-t2208 * t1748 + t1814 * t2213), t2208 * t1578 + t2213 * t1570 + pkin(7) * (-t2208 * t1621 + t1642 * t2213), t1658 * t2213 + t2208 * t1691, t1626 * t2213 + t2208 * t1646, t1663 * t2213 + t2208 * t1699, t1657 * t2213 + t2208 * t1690, t1664 * t2213 + t2208 * t1700, t1713 * t2213 + t2208 * t1773, t2208 * t1579 + t2213 * t1572 + pkin(7) * (-t2208 * t1648 + t1679 * t2213), t2208 * t1580 + t2213 * t1574 + pkin(7) * (-t2208 * t1654 + t1696 * t2213), t2208 * t1568 + t2213 * t1565 + pkin(7) * (-t2208 * t1624 + t1643 * t2213), t2208 * t1563 + t2213 * t1562 + pkin(7) * (-t2208 * t1577 + t1587 * t2213); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2191, t2192, 0, 0, t2115, t2052, t2078, t2114, t2079, t2185, t1958, t1945, t1920, t1934, t1938, t1869, t1912, t1937, t1913, t2006, t1716, t1722, t1685, t1669, t2440, t1729, t2555, t2499, t1766, t2500, t1613, t1616, t1604, t1585, t2440, t2555, -t1729, t2500, -t1766, t2499, t1600, t1591, t1597, t1569, t1656, t1625, t1661, t1655, t1662, t1712, t1571, t1573, t1564, t1561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t2438, 0, 0, -g(3), -t2191, 0, t2137, t2090, t2126, t2136, t2127, t2147, t1964, t1960, t1908, t1911, t2013, t1947, t1976, t2012, t1977, t2057, t1733, t1735, t1708, t1671, t2441, t1793, t2548, t2471, t1822, t2470, t1630, t1631, t1610, t1589, t2441, t2548, -t1793, t2470, -t1822, t2471, t1612, t1606, t1611, t1578, t1691, t1646, t1699, t1690, t1700, t1773, t1579, t1580, t1568, t1563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2438, 0, qJDD(1), 0, g(3), 0, -t2192, 0, t2116, t2054, t2081, t2113, t2082, -t2266, t1959, t1946, t1921, t1933, t1940, t1870, t1914, t1939, t1915, t2007, t1717, t1723, t1686, t1670, t2439, t1731, t2554, t2497, t1770, t2498, t1614, t1617, t1605, t1586, t2439, t2554, -t1731, t2498, -t1770, t2497, t1601, t1592, t1598, t1570, t1658, t1626, t1663, t1657, t1664, t1713, t1572, t1574, t1565, t1562; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2191, t2192, 0, 0, t2115, t2052, t2078, t2114, t2079, t2185, t1958, t1945, t1920, t1934, t1938, t1869, t1912, t1937, t1913, t2006, t1716, t1722, t1685, t1669, t2440, t1729, t2555, t2499, t1766, t2500, t1613, t1616, t1604, t1585, t2440, t2555, -t1729, t2500, -t1766, t2499, t1600, t1591, t1597, t1569, t1656, t1625, t1661, t1655, t1662, t1712, t1571, t1573, t1564, t1561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2172, t2144, t2169, -t2180, t2175, t2180, 0, -t2148, t2118, 0, t2061, t2004, t2044, t2059, t2045, t2092, t1955, t1962, t1823, -pkin(9) * t1875, t2323, t1848, t2526, t2443, t1884, t2442, t1701, t1707, t1673, t1645, t2323, t2526, -t1848, t2442, -t1884, t2443, t1665, t1649, t1659, t1609, t1756, t1694, t1743, t1755, t1744, t1834, t1595, t1599, t1584, t1567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2179, t2141, t2174, -t2238, t2170, -t2179, t2148, 0, t2119, 0, -t2384, -t2123, -t2068, t2384, t2064, -t2231, t1907, t1910, -pkin(2) * t2003, -pkin(2) * t1875, -t1991, -t1887, -t2519, -t1988, -t1968, t2461, t1740, t1745, t1684, t1666, -t1991, -t2519, t1887, t2461, t1968, -t1988, t1697, t1667, t1695, t1622, -t1778, -t1702, -t1810, -t1777, -t1811, -t1849, t1615, t1618, t1588, t1575; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2190, t2177, t2142, t2190, t2143, t2338, -t2118, -t2119, 0, 0, t2060, t2002, t2042, t2058, t2043, t2091, t1909, t1917, t1816, t1836, t2324, t1846, t2527, t2444, t1880, t2445, t1689, t1692, t1668, t1633, t2324, t2527, -t1846, t2445, -t1880, t2444, t1651, t1644, t1650, t1596, t1754, t1693, t1741, t1753, t1742, t1833, t1593, t1594, t1582, t1566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2112, -t2476, t2220, -t2145, t2138, t2145, 0, t2055, t1974, 0, t1992, t1891, t2518, t2221, t1972, t2322, t1827, t1832, t1711, -pkin(10) * t1738, t1992, t2518, -t1891, t2322, -t1972, t2221, t1725, t1678, t1724, t1660, t1780, t1704, t1812, t1779, t1813, t1850, t1632, t1634, t1590, t1583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2146, t2067, t2139, -t2258, -t2099, t2146, -t2055, 0, t1975, 0, -t2088, -t2457, -t2454, t2088, t1994, -t2110, t1794, t1795, -pkin(3) * t1888, -pkin(3) * t1738, -t2088, -t2454, t2457, -t2110, -t1994, t2088, t1734, t1806, t1732, t1652, t2009, t2008, -t1862, -t2009, -t1858, -t2108, t1638, t1641, t1635, t1581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2384, t2123, t2068, -t2384, -t2064, t2231, -t1974, -t1975, 0, 0, t1991, t1887, t2519, t1988, t1968, -t2461, t2255, t2254, t2236, t2334, t1991, t2519, -t1887, -t2461, -t1968, t1988, t2447, t2226, t2446, t2450, t1778, t1702, t1810, t1777, t1811, t1849, t2228, t2227, t2229, t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2031, -t2458, -t2343, t2390, t2096, -t2390, 0, t1918, t1825, 0, t2031, -t2343, t2458, -t2390, -t2096, t2390, -qJ(5) * t2458, t1781, t1786, -qJ(5) * t1809, t1854, t1784, t1899, t1852, t1900, t1957, t1698, t1706, t1628, t1629; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2103, t2455, -t2097, -t2257, t2459, -t2103, -t1918, 0, t1826, 0, t2103, -t2097, -t2455, -t2103, -t2459, -t2257, t1787, t1774, pkin(4) * t2455, -pkin(4) * t1809, -t1853, -t1782, -t1897, t1851, -t1898, -t1956, t1676, t1677, t1627, t1619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2088, t2457, t2454, -t2088, -t1994, t2110, -t1825, -t1826, 0, 0, t2088, t2454, -t2457, t2110, t1994, -t2088, t2217, t2325, t2149 + t2225, t2326, -t2009, -t2008, t1862, t2009, t1858, t2108, t2449, t2448, t2451, t2452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2031, -t2343, t2458, -t2390, -t2096, t2390, 0, t1797, -t1809, 0, t1854, t1784, t1899, t1852, t1900, t1957, t2317, t2347, t2264, -t2427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2088, t2454, -t2457, t2110, t1994, -t2088, -t1797, 0, t1796, 0, -t2009, -t2008, t1862, t2009, t1858, t2108, -pkin(5) * t1867 + t1682, -pkin(5) * t1893 + t1683, -pkin(5) * t1783, -pkin(5) * t1636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2103, t2097, t2455, t2103, t2459, t2257, t1809, -t1796, 0, 0, t1853, t1782, t1897, -t1851, t1898, t1956, -pkin(5) * t1857 - t2316, -pkin(5) * t2265 - t2315, -pkin(5) * t1936 - t2263, pkin(5) * t1772 + t2426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2350, -t1857, t2460, -t2396, t2038, t2396, 0, -t1772, t1682, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2389, t2265, t2039, t1901, -t1952, t2389, t1772, 0, t1683, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2009, t2008, -t1862, -t2009, -t1858, -t2108, -t1682, -t1683, 0, 0;];
m_new_reg  = t1;
