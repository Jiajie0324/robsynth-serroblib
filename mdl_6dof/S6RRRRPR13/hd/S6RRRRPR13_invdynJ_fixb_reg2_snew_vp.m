% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 01:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPR13_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR13_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 01:35:47
% EndTime: 2019-05-08 01:36:48
% DurationCPUTime: 21.43s
% Computational Cost: add. (93701->664), mult. (198939->915), div. (0->0), fcn. (159638->12), ass. (0->424)
t365 = cos(pkin(6));
t455 = qJD(1) * t365;
t359 = qJD(2) + t455;
t368 = sin(qJ(3));
t372 = cos(qJ(3));
t364 = sin(pkin(6));
t369 = sin(qJ(2));
t454 = qJD(1) * t369;
t433 = t364 * t454;
t333 = -t372 * t359 + t368 * t433;
t329 = qJD(4) + t333;
t509 = t329 ^ 2;
t335 = t359 * t368 + t372 * t433;
t367 = sin(qJ(4));
t371 = cos(qJ(4));
t373 = cos(qJ(2));
t453 = qJD(1) * t373;
t357 = t364 * t453;
t447 = t357 - qJD(3);
t310 = t335 * t367 + t371 * t447;
t510 = t310 ^ 2;
t281 = t510 - t509;
t446 = qJDD(1) * t364;
t341 = qJD(2) * t357 + t369 * t446;
t358 = qJDD(1) * t365 + qJDD(2);
t425 = t368 * t341 - t372 * t358;
t296 = -t335 * qJD(3) - t425;
t295 = qJDD(4) - t296;
t312 = t371 * t335 - t367 * t447;
t469 = t312 * t310;
t223 = -t469 - t295;
t482 = t223 * t367;
t188 = -t281 * t371 - t482;
t288 = t329 * t312;
t405 = -t372 * t341 - t368 * t358;
t297 = -t333 * qJD(3) - t405;
t445 = qJDD(1) * t373;
t391 = (qJD(2) * t454 - t445) * t364;
t384 = qJDD(3) + t391;
t427 = t297 * t367 - t371 * t384;
t400 = qJD(4) * t312 + t427;
t206 = -t288 + t400;
t138 = t188 * t368 - t206 * t372;
t481 = t223 * t371;
t184 = -t281 * t367 + t481;
t591 = t365 * t138 + t364 * (t369 * (t188 * t372 + t206 * t368) - t373 * t184);
t376 = -t371 * t297 - t367 * t384;
t236 = -t310 * qJD(4) - t376;
t470 = t310 * t329;
t527 = -t470 + t236;
t483 = t527 * t367;
t533 = t288 + t400;
t144 = t533 * t371 + t483;
t309 = t312 ^ 2;
t531 = t309 - t510;
t110 = t144 * t368 + t372 * t531;
t142 = -t533 * t367 + t371 * t527;
t589 = t365 * t110 + t364 * (t373 * t142 + t369 * (t144 * t372 - t368 * t531));
t532 = -t309 - t509;
t173 = t371 * t532 + t482;
t588 = pkin(2) * t173;
t587 = pkin(3) * t173;
t586 = pkin(10) * t173;
t175 = -t367 * t532 + t481;
t585 = pkin(10) * t175;
t584 = t173 * t373;
t583 = t175 * t368;
t582 = t175 * t372;
t581 = t369 * t173;
t526 = t470 + t236;
t282 = -t309 + t509;
t528 = -t469 + t295;
t479 = t528 * t371;
t558 = -t282 * t367 + t479;
t480 = t528 * t367;
t559 = t282 * t371 + t480;
t571 = t368 * t558 - t372 * t526;
t576 = t365 * t571 + (t369 * (t368 * t526 + t372 * t558) - t373 * t559) * t364;
t525 = -t509 - t510;
t540 = t371 * t525 - t480;
t557 = t368 * t540 - t372 * t533;
t575 = pkin(2) * t557;
t574 = pkin(9) * t557;
t541 = t367 * t525 + t479;
t556 = t368 * t533 + t372 * t540;
t572 = -pkin(2) * t541 + pkin(9) * t556;
t570 = pkin(1) * (t369 * t556 - t373 * t541);
t569 = pkin(8) * (t369 * t541 + t373 * t556) - pkin(1) * t557;
t566 = pkin(3) * t541;
t565 = pkin(10) * t540;
t564 = pkin(10) * t541;
t530 = t309 + t510;
t555 = pkin(3) * t530;
t554 = qJ(5) * t527;
t366 = sin(qJ(6));
t370 = cos(qJ(6));
t268 = -t370 * t310 + t312 * t366;
t270 = t310 * t366 + t312 * t370;
t218 = t270 * t268;
t293 = -qJDD(6) + t295;
t534 = -t218 - t293;
t553 = t366 * t534;
t550 = t368 * t530;
t547 = t370 * t534;
t544 = t372 * t530;
t466 = t329 * t367;
t200 = t310 * t466 - t371 * t400;
t465 = t329 * t371;
t439 = t310 * t465;
t382 = t367 * t400 + t439;
t441 = t368 * t469;
t440 = t372 * t469;
t513 = t368 * t382 + t440;
t539 = t365 * t513 + (-t373 * t200 + t369 * (t372 * t382 - t441)) * t364;
t279 = t312 * t466;
t416 = t279 - t439;
t515 = -t372 * t295 + t368 * t416;
t535 = (t310 * t367 + t312 * t371) * t329;
t538 = t365 * t515 + (t373 * t535 + t369 * (t295 * t368 + t372 * t416)) * t364;
t444 = t447 ^ 2;
t464 = t335 * t333;
t380 = t384 - t464;
t537 = t368 * t380;
t536 = t372 * t380;
t318 = t447 * t333;
t260 = t297 + t318;
t504 = sin(qJ(1));
t505 = cos(qJ(1));
t397 = g(1) * t505 + g(2) * t504;
t508 = qJD(1) ^ 2;
t337 = -pkin(1) * t508 + pkin(8) * t446 - t397;
t396 = g(1) * t504 - g(2) * t505;
t450 = t364 * t508;
t379 = qJDD(1) * pkin(1) + pkin(8) * t450 + t396;
t377 = t365 * t379;
t426 = t369 * t337 - t373 * t377;
t462 = t364 * t373;
t299 = g(3) * t462 + t426;
t463 = t364 * t369;
t375 = -g(3) * t463 + t369 * t377;
t300 = t373 * t337 + t375;
t529 = t369 * t299 + t373 * t300;
t503 = pkin(2) * t373;
t420 = -pkin(9) * t369 - t503;
t456 = qJD(1) * t364;
t340 = t420 * t456;
t356 = t359 ^ 2;
t254 = t358 * pkin(9) - t356 * pkin(2) + (t340 * t456 + t337) * t373 + t375;
t499 = t365 * g(3);
t374 = -t341 * pkin(9) - t499 + ((-pkin(1) - t503) * qJDD(1) + (-pkin(8) * t456 - t373 * t359 * pkin(9) + (qJD(2) + t359) * t369 * pkin(2)) * qJD(1) - t396) * t364;
t192 = t372 * t254 + t368 * t374;
t301 = pkin(3) * t333 - pkin(10) * t335;
t160 = -pkin(3) * t444 + pkin(10) * t384 - t333 * t301 + t192;
t253 = -t358 * pkin(2) - t356 * pkin(9) + (g(3) * t373 + t340 * t454) * t364 + t426;
t424 = t447 * t335;
t163 = -t260 * pkin(10) + (-t296 - t424) * pkin(3) + t253;
t101 = t371 * t160 + t367 * t163;
t271 = pkin(4) * t310 - qJ(5) * t312;
t422 = -t295 * qJ(5) + t310 * t271 - t101;
t523 = -pkin(4) * (t532 + t509) - qJ(5) * t223 - t422;
t100 = t160 * t367 - t371 * t163;
t89 = -t295 * pkin(4) - qJ(5) * t509 + t271 * t312 + qJDD(5) + t100;
t67 = -pkin(5) * t528 - pkin(11) * t526 + t89;
t418 = -pkin(5) * t329 - pkin(11) * t312;
t452 = qJD(5) * t329;
t320 = 0.2e1 * t452;
t408 = t320 - t422;
t88 = -pkin(4) * t509 + t408;
t70 = -pkin(5) * t510 + pkin(11) * t400 + t329 * t418 + t88;
t36 = t366 * t70 - t370 * t67;
t37 = t366 * t67 + t370 * t70;
t21 = -t36 * t370 + t366 * t37;
t22 = t36 * t366 + t37 * t370;
t507 = pkin(4) + pkin(5);
t522 = qJ(5) * t22 - t21 * t507;
t430 = qJ(5) * t367 + pkin(3);
t50 = t367 * t89 + t371 * t88;
t501 = pkin(4) * t371;
t191 = t368 * t254 - t372 * t374;
t159 = -t384 * pkin(3) - t444 * pkin(10) + t335 * t301 + t191;
t383 = t400 * pkin(4) + t159 - t554;
t429 = pkin(4) * t329 - 0.2e1 * qJD(5);
t93 = t429 * t312 + t383;
t521 = -(t430 + t501) * t93 + pkin(10) * t50;
t325 = -qJD(6) + t329;
t428 = t236 * t366 - t370 * t400;
t119 = t270 * (qJD(6) + t325) + t428;
t437 = t268 * qJD(6) - t370 * t236 - t366 * t400;
t476 = t268 * t325;
t123 = t437 + t476;
t79 = -t119 * t366 + t123 * t370;
t81 = -t119 * t370 - t123 * t366;
t520 = qJ(5) * t81 - t507 * t79;
t266 = t268 ^ 2;
t321 = t325 ^ 2;
t194 = -t321 - t266;
t128 = t194 * t366 + t547;
t129 = t194 * t370 - t553;
t519 = qJ(5) * t129 - t128 * t507 + t36;
t267 = t270 ^ 2;
t224 = -t267 - t321;
t177 = -t218 + t293;
t491 = t177 * t366;
t148 = t224 * t370 + t491;
t490 = t177 * t370;
t149 = -t224 * t366 + t490;
t518 = qJ(5) * t149 - t148 * t507 + t37;
t381 = 0.2e1 * qJD(5) * t312 - t383;
t83 = (-t533 - t288) * pkin(4) + t381;
t517 = t371 * t83 - t430 * t533 + t565;
t82 = -pkin(4) * t288 + t381 + t554;
t516 = -t585 + t527 * (pkin(3) + t501) + t367 * t82;
t203 = t236 * t367 + t312 * t465;
t204 = t236 * t371 - t279;
t417 = t368 * t204 - t440;
t514 = t365 * t417 + (t372 * t204 + t441) * t463 - t203 * t462;
t331 = t333 ^ 2;
t332 = t335 ^ 2;
t361 = t364 ^ 2;
t502 = pkin(3) * t368;
t500 = pkin(8) * t364;
t71 = t427 * pkin(5) + t510 * pkin(11) + t383 + (pkin(5) * qJD(4) - t418 + t429) * t312;
t496 = t366 * t71;
t495 = t370 * t71;
t494 = qJ(5) * t371;
t493 = t159 * t367;
t492 = t159 * t371;
t485 = t526 * t367;
t484 = t526 * t371;
t478 = t253 * t368;
t477 = t253 * t372;
t284 = -t464 - t384;
t473 = t284 * t368;
t472 = t284 * t372;
t468 = t325 * t366;
t467 = t325 * t370;
t451 = t361 * t508;
t351 = t373 * t369 * t451;
t338 = t351 + t358;
t460 = t369 * t338;
t339 = -t351 + t358;
t458 = t373 * t339;
t449 = 0.2e1 * qJD(3) - t357;
t443 = t368 * t218;
t442 = t372 * t218;
t438 = t373 * t464;
t345 = t359 * t357;
t436 = t345 + t341;
t435 = -pkin(3) * t372 - pkin(2);
t362 = t369 ^ 2;
t432 = t362 * t451;
t363 = t373 ^ 2;
t431 = t363 * t451;
t63 = t100 * t367 + t371 * t101;
t135 = t191 * t368 + t372 * t192;
t423 = -t359 + t455;
t421 = -pkin(3) * t159 + pkin(10) * t63;
t419 = -pkin(4) * t89 + qJ(5) * t88;
t415 = t368 * t318;
t414 = t368 * t424;
t413 = t372 * t318;
t412 = t372 * t424;
t409 = -pkin(4) * t526 - qJ(5) * t206;
t62 = -t100 * t371 + t101 * t367;
t407 = t191 * t372 - t192 * t368;
t404 = -pkin(1) + t420;
t402 = -t437 + t476;
t257 = t335 * t357 + t425;
t395 = -pkin(3) * t533 - t492 + t565;
t213 = (qJD(4) + t329) * t310 + t376;
t394 = pkin(3) * t213 + t493 + t585;
t208 = (-qJD(4) + t329) * t312 - t427;
t147 = t208 * t371 + t485;
t392 = pkin(10) * t147 + t555 + t63;
t12 = t21 * t367 + t22 * t371;
t13 = -pkin(11) * t22 - t507 * t71;
t16 = -pkin(11) * t21 - qJ(5) * t71;
t389 = -pkin(3) * t71 + pkin(10) * t12 + t13 * t371 + t16 * t367;
t118 = (qJD(6) - t325) * t270 + t428;
t33 = -pkin(11) * t129 + t118 * t507 - t495;
t43 = -pkin(11) * t128 + qJ(5) * t118 - t496;
t85 = t128 * t367 + t129 * t371;
t388 = pkin(3) * t118 + pkin(10) * t85 + t33 * t371 + t367 * t43;
t34 = -pkin(11) * t149 + t402 * t507 + t496;
t48 = -pkin(11) * t148 + qJ(5) * t402 - t495;
t92 = t148 * t367 + t149 * t371;
t387 = pkin(3) * t402 + pkin(10) * t92 + t34 * t371 + t367 * t48;
t168 = -t266 - t267;
t14 = -pkin(11) * t81 + t168 * t507 - t22;
t15 = -pkin(11) * t79 + qJ(5) * t168 - t21;
t47 = t367 * t79 + t371 * t81;
t386 = pkin(3) * t168 + pkin(10) * t47 + t14 * t371 + t15 * t367;
t145 = -t206 * t371 + t485;
t72 = (t530 - t509) * pkin(4) + t408;
t77 = qJ(5) * t530 + t89;
t385 = pkin(10) * t145 + t367 * t77 + t371 * t72 + t555;
t378 = pkin(4) * t528 + qJ(5) * t525 - t89;
t344 = t359 * t433;
t343 = (t362 - t363) * t451;
t342 = -t356 - t431;
t328 = -t432 - t356;
t319 = t364 * t379 + t499;
t317 = -t344 - t391;
t316 = t344 - t391;
t315 = -t345 + t341;
t314 = t444 - t332;
t313 = t331 - t444;
t304 = -t332 - t444;
t303 = t332 - t331;
t298 = -t444 - t331;
t278 = t331 + t332;
t277 = t415 + t412;
t262 = t333 * t449 + t405;
t261 = t297 - t318;
t258 = -t335 * t449 - t425;
t256 = t368 * t297 - t412;
t255 = t372 * t296 - t415;
t247 = t313 * t368 - t472;
t246 = t314 * t372 + t537;
t243 = -t267 + t321;
t242 = t266 - t321;
t241 = -t304 * t368 + t472;
t240 = t304 * t372 + t473;
t234 = t298 * t372 - t537;
t233 = t298 * t368 + t536;
t217 = t267 - t266;
t216 = -t257 * t372 + t261 * t368;
t214 = t258 * t368 + t260 * t372;
t181 = (t268 * t370 - t270 * t366) * t325;
t180 = (-t268 * t366 - t270 * t370) * t325;
t158 = pkin(2) * t262 + pkin(9) * t241 + t478;
t156 = pkin(2) * t258 + pkin(9) * t234 - t477;
t154 = -qJD(6) * t270 - t428;
t153 = t242 * t370 + t491;
t152 = -t243 * t366 + t547;
t151 = -t242 * t366 + t490;
t150 = -t243 * t370 - t553;
t143 = t208 * t367 - t484;
t141 = -t206 * t367 - t484;
t132 = -t213 * t368 + t582;
t130 = t213 * t372 + t583;
t126 = -t368 * t527 - t582;
t124 = t372 * t527 - t583;
t117 = t270 * t468 - t370 * t437;
t116 = t270 * t467 + t366 * t437;
t115 = -t154 * t366 - t268 * t467;
t114 = -t154 * t370 + t268 * t468;
t113 = -t180 * t367 + t181 * t371;
t112 = t180 * t371 + t181 * t367;
t109 = t147 * t372 - t550;
t108 = t145 * t372 - t550;
t107 = t147 * t368 + t544;
t106 = t145 * t368 + t544;
t105 = -pkin(2) * t253 + pkin(9) * t135;
t104 = t113 * t368 - t293 * t372;
t103 = t492 - t586;
t102 = t493 - t564;
t98 = pkin(2) * t278 + pkin(9) * t216 + t135;
t97 = -t151 * t367 + t153 * t371;
t96 = -t150 * t367 + t152 * t371;
t95 = t151 * t371 + t153 * t367;
t94 = t150 * t371 + t152 * t367;
t91 = -t148 * t371 + t149 * t367;
t90 = -pkin(3) * t141 - t409;
t87 = t101 - t587;
t86 = t100 - t566;
t84 = -t128 * t371 + t129 * t367;
t80 = -t118 * t370 - t366 * t402;
t78 = t118 * t366 - t370 * t402;
t76 = -t116 * t367 + t117 * t371;
t75 = -t114 * t367 + t115 * t371;
t74 = t116 * t371 + t117 * t367;
t73 = t114 * t371 + t115 * t367;
t69 = t368 * t76 + t442;
t68 = t368 * t75 - t442;
t65 = -t119 * t372 + t368 * t97;
t64 = -t123 * t372 + t368 * t96;
t61 = -t368 * t402 + t372 * t92;
t60 = t368 * t92 + t372 * t402;
t59 = -t378 - t566;
t58 = -0.2e1 * t452 - t523 + t587;
t57 = -t118 * t368 + t372 * t85;
t56 = t118 * t372 + t368 * t85;
t55 = -t367 * t83 - t494 * t533 - t564;
t54 = -pkin(4) * t483 + t371 * t82 + t586;
t53 = t159 * t368 + t372 * t63;
t52 = -t159 * t372 + t368 * t63;
t51 = -pkin(10) * t143 - t62;
t49 = t367 * t88 - t371 * t89;
t46 = -t367 * t78 + t371 * t80;
t45 = t367 * t81 - t371 * t79;
t44 = t367 * t80 + t371 * t78;
t42 = t217 * t372 + t368 * t46;
t41 = pkin(9) * t132 + t103 * t368 + t372 * t87 - t588;
t40 = t102 * t368 + t372 * t86 + t572;
t39 = -t168 * t368 + t372 * t47;
t38 = t168 * t372 + t368 * t47;
t35 = -pkin(10) * t141 - t367 * t72 + t371 * t77;
t32 = t368 * t93 + t372 * t50;
t31 = t368 * t50 - t372 * t93;
t30 = pkin(9) * t109 + t143 * t435 + t368 * t51;
t29 = -pkin(10) * t49 + (pkin(4) * t367 - t494) * t93;
t28 = -pkin(3) * t49 - t419;
t27 = t368 * t55 + t372 * t59 + t572;
t26 = pkin(9) * t126 + t368 * t54 + t372 * t58 + t588;
t25 = -pkin(2) * t141 + pkin(9) * t108 + t35 * t368 + t372 * t90;
t24 = -pkin(3) * t91 - t518;
t23 = -pkin(3) * t84 - t519;
t20 = -pkin(3) * t45 - t520;
t19 = -pkin(10) * t91 - t34 * t367 + t371 * t48;
t18 = pkin(9) * t53 + (-pkin(10) * t368 + t435) * t62;
t17 = -pkin(10) * t84 - t33 * t367 + t371 * t43;
t11 = -t21 * t371 + t22 * t367;
t10 = t12 * t372 + t368 * t71;
t9 = t12 * t368 - t372 * t71;
t8 = -pkin(2) * t49 + pkin(9) * t32 + t28 * t372 + t29 * t368;
t7 = -pkin(2) * t91 + pkin(9) * t61 + t19 * t368 + t24 * t372;
t6 = -pkin(2) * t84 + pkin(9) * t57 + t17 * t368 + t23 * t372;
t5 = -pkin(10) * t45 - t14 * t367 + t15 * t371;
t4 = -pkin(10) * t11 - t13 * t367 + t16 * t371;
t3 = -pkin(2) * t45 + pkin(9) * t39 + t20 * t372 + t368 * t5;
t2 = -pkin(3) * t11 - t522;
t1 = -pkin(2) * t11 + pkin(9) * t10 + t2 * t372 + t368 * t4;
t66 = [0, 0, 0, 0, 0, qJDD(1), t396, t397, 0, 0, (-t361 * t423 * t453 + t341 * t364) * t369, t365 * t343 + (t369 * t317 + t373 * t436) * t364, t365 * t315 + (t460 + t373 * (t356 - t432)) * t364, (t445 + (-qJD(2) + t423) * t454) * t361 * t373, t365 * t316 + (t369 * (-t356 + t431) + t458) * t364, t365 * t358, (-t299 + pkin(1) * (t338 * t373 + t342 * t369)) * t365 + (t373 * t319 + pkin(1) * t317 + pkin(8) * (t342 * t373 - t460)) * t364, -t319 * t463 - t365 * t300 + pkin(1) * (-t364 * t436 + (t328 * t373 - t339 * t369) * t365) + (-t369 * t328 - t458) * t500, pkin(1) * ((-t315 * t373 + t316 * t369) * t365 - (-t362 - t363) * t361 * t450) + (t369 * t315 + t316 * t373) * t500 + t529 * t364, pkin(1) * (t364 * t319 + (-t299 * t373 + t300 * t369) * t365) + t529 * t500, t365 * t256 + (t369 * (t372 * t297 + t414) - t438) * t364, t365 * t214 + (t369 * (t258 * t372 - t260 * t368) - t373 * t303) * t364, t365 * t246 + (t369 * (-t314 * t368 + t536) - t373 * t261) * t364, t365 * t255 + (t369 * (-t368 * t296 - t413) + t438) * t364, t365 * t247 + (t369 * (t313 * t372 + t473) + t373 * t257) * t364, t365 * t277 + (t369 * (t413 - t414) - t384 * t373) * t364, (t156 + pkin(1) * (t234 * t369 + t258 * t373)) * t365 + (t369 * (-pkin(9) * t233 + t478) + t373 * (-pkin(2) * t233 + t191) - pkin(1) * t233 + pkin(8) * (t234 * t373 - t369 * t258)) * t364, (t158 + pkin(1) * (t241 * t369 + t262 * t373)) * t365 + (t369 * (-pkin(9) * t240 + t477) + t373 * (-pkin(2) * t240 + t192) - pkin(1) * t240 + pkin(8) * (t241 * t373 - t369 * t262)) * t364, (t98 + pkin(1) * (t216 * t369 + t278 * t373)) * t365 + (t369 * t407 + pkin(8) * (t216 * t373 - t369 * t278) + t404 * (-t257 * t368 - t261 * t372)) * t364, (t105 + pkin(1) * (t135 * t369 - t253 * t373)) * t365 + (pkin(8) * (t135 * t373 + t369 * t253) - t404 * t407) * t364, t514, -t589, t576, t539, -t591, t538, (t40 + t570) * t365 + (t369 * (t102 * t372 - t368 * t86 - t574) + t373 * (-t395 - t575) + t569) * t364, (t41 + pkin(1) * (t132 * t369 - t584)) * t365 + (t369 * (-pkin(9) * t130 + t103 * t372 - t368 * t87) + t373 * (-pkin(2) * t130 - t394) - pkin(1) * t130 + pkin(8) * (t132 * t373 + t581)) * t364, (t30 + pkin(1) * (t109 * t369 - t143 * t373)) * t365 + (t369 * (-pkin(9) * t107 + t143 * t502 + t372 * t51) + t373 * (-pkin(2) * t107 - t392) - pkin(1) * t107 + pkin(8) * (t109 * t373 + t369 * t143)) * t364, (t18 + pkin(1) * (t369 * t53 - t373 * t62)) * t365 + (t369 * (-pkin(9) * t52 + (-pkin(10) * t372 + t502) * t62) + t373 * (-pkin(2) * t52 - t421) - pkin(1) * t52 + pkin(8) * (t369 * t62 + t373 * t53)) * t364, t514, t576, t589, t538, t591, t539, (t27 + t570) * t365 + (t369 * (-t368 * t59 + t372 * t55 - t574) + t373 * (-t517 - t575) + t569) * t364, (t25 + pkin(1) * (t108 * t369 - t141 * t373)) * t365 + (t369 * (-pkin(9) * t106 + t35 * t372 - t368 * t90) + t373 * (-pkin(2) * t106 - t385) - pkin(1) * t106 + pkin(8) * (t108 * t373 + t369 * t141)) * t364, (t26 + pkin(1) * (t126 * t369 + t584)) * t365 + (t369 * (-pkin(9) * t124 - t368 * t58 + t372 * t54) + t373 * (-pkin(2) * t124 - t516) - pkin(1) * t124 + pkin(8) * (t126 * t373 - t581)) * t364, (t8 + pkin(1) * (t32 * t369 - t373 * t49)) * t365 + (-pkin(1) * t31 + (pkin(8) * t49 - pkin(9) * t31 - t28 * t368 + t29 * t372) * t369 + (-pkin(2) * t31 + pkin(8) * t32 - t521) * t373) * t364, t365 * t69 + (t369 * (t372 * t76 - t443) - t373 * t74) * t364, t365 * t42 + (t369 * (-t217 * t368 + t372 * t46) - t373 * t44) * t364, t365 * t64 + (t369 * (t123 * t368 + t372 * t96) - t373 * t94) * t364, t365 * t68 + (t369 * (t372 * t75 + t443) - t373 * t73) * t364, t365 * t65 + (t369 * (t119 * t368 + t372 * t97) - t373 * t95) * t364, t365 * t104 + (t369 * (t113 * t372 + t293 * t368) - t373 * t112) * t364, (t6 + pkin(1) * (t369 * t57 - t373 * t84)) * t365 + (t369 * (-pkin(9) * t56 + t17 * t372 - t23 * t368) + t373 * (-pkin(2) * t56 - t388) - pkin(1) * t56 + pkin(8) * (t369 * t84 + t373 * t57)) * t364, (t7 + pkin(1) * (t369 * t61 - t373 * t91)) * t365 + (t369 * (-pkin(9) * t60 + t19 * t372 - t24 * t368) + t373 * (-pkin(2) * t60 - t387) - pkin(1) * t60 + pkin(8) * (t369 * t91 + t373 * t61)) * t364, (t3 + pkin(1) * (t369 * t39 - t373 * t45)) * t365 + (t369 * (-pkin(9) * t38 - t20 * t368 + t372 * t5) + t373 * (-pkin(2) * t38 - t386) - pkin(1) * t38 + pkin(8) * (t369 * t45 + t373 * t39)) * t364, (t1 + pkin(1) * (t10 * t369 - t11 * t373)) * t365 + (t369 * (-pkin(9) * t9 - t2 * t368 + t372 * t4) + t373 * (-pkin(2) * t9 - t389) - pkin(1) * t9 + pkin(8) * (t10 * t373 + t369 * t11)) * t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t351, t343, t315, t351, t316, t358, -t299, -t300, 0, 0, t256, t214, t246, t255, t247, t277, t156, t158, t98, t105, t417, -t110, t571, t513, -t138, t515, t40, t41, t30, t18, t417, t571, t110, t515, t138, t513, t27, t25, t26, t8, t69, t42, t64, t68, t65, t104, t6, t7, t3, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t464, t303, t261, -t464, -t257, t384, -t191, -t192, 0, 0, t203, t142, t559, t200, -t184, -t535, t395, t394, t392, t421, t203, t559, -t142, -t535, t184, t200, t517, t385, t516, t521, t74, t44, t94, t73, t95, t112, t388, t387, t386, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t469, t531, t526, -t469, -t206, t295, -t100, -t101, 0, 0, t469, t526, -t531, t295, t206, -t469, t378, t409, t320 + t523, t419, -t218, -t217, t123, t218, t119, t293, t519, t518, t520, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t528, t526, t532, t89, 0, 0, 0, 0, 0, 0, t128, t148, t79, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, t217, -t123, -t218, -t119, -t293, -t36, -t37, 0, 0;];
tauJ_reg  = t66;
