% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR13_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR13_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR13_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:04:45
% EndTime: 2019-03-10 00:05:26
% DurationCPUTime: 31.38s
% Computational Cost: add. (14020->911), mult. (33890->1186), div. (0->0), fcn. (27297->12), ass. (0->352)
t874 = sin(pkin(6));
t1039 = qJD(1) * t874;
t881 = cos(qJ(2));
t859 = t881 * t1039;
t948 = t859 - qJD(3);
t1098 = cos(qJ(3));
t854 = pkin(8) * t859;
t878 = sin(qJ(2));
t1082 = cos(pkin(6));
t989 = t1082 * qJD(1);
t972 = pkin(1) * t989;
t801 = t878 * t972 + t854;
t877 = sin(qJ(3));
t1139 = t801 + t948 * (pkin(3) * t877 - pkin(10) * t1098);
t1038 = qJD(1) * t878;
t1001 = t874 * t1038;
t935 = t989 + qJD(2);
t828 = t1098 * t935;
t775 = t1001 * t877 - t828;
t767 = qJD(4) + t775;
t1022 = qJDD(1) * t878;
t912 = t877 * t935;
t979 = t1082 * qJDD(1);
t930 = t979 + qJDD(2);
t996 = qJD(3) * t1098;
t1036 = qJD(2) * t881;
t999 = t877 * t1036;
t683 = qJD(3) * t912 - t1098 * t930 + (qJD(1) * (t878 * t996 + t999) + t877 * t1022) * t874;
t677 = qJDD(4) + t683;
t1099 = cos(qJ(1));
t1008 = t874 * t1099;
t1097 = sin(qJ(1));
t964 = t1082 * t1099;
t811 = t1097 * t881 + t878 * t964;
t741 = -t877 * t1008 + t1098 * t811;
t810 = t1097 * t878 - t881 * t964;
t876 = sin(qJ(4));
t880 = cos(qJ(4));
t698 = t741 * t876 - t810 * t880;
t699 = t741 * t880 + t810 * t876;
t875 = sin(qJ(6));
t879 = cos(qJ(6));
t1138 = t698 * t879 - t699 * t875;
t1137 = t698 * t875 + t699 * t879;
t1033 = qJD(4) * t876;
t798 = -pkin(8) * t1001 + t881 * t972;
t961 = pkin(2) * t878 - pkin(9) * t881;
t799 = t961 * t1039;
t1046 = t1098 * t798 + t877 * t799;
t697 = pkin(10) * t1001 + t1046;
t1004 = t880 * t1098;
t867 = pkin(9) * t1004;
t918 = pkin(3) * t1098 + t877 * pkin(10) + pkin(2);
t1132 = -qJD(4) * t867 + t1033 * t918 - t1139 * t880 + t876 * t697;
t1101 = pkin(4) + pkin(5);
t1007 = t874 * t1098;
t971 = qJD(1) * t1007;
t777 = t878 * t971 + t912;
t724 = t880 * t777 - t876 * t948;
t1034 = qJD(4) * t724;
t887 = qJD(3) * t828 + t877 * t930;
t1035 = qJD(3) * t877;
t1003 = t881 * t1098;
t970 = qJD(2) * t1003;
t902 = -t1035 * t878 + t970;
t990 = t1098 * qJDD(1);
t965 = t878 * t990;
t885 = t887 + (qJD(1) * t902 + t965) * t874;
t1021 = qJDD(1) * t881;
t858 = t874 * t1021;
t1019 = qJDD(3) - t858;
t1023 = qJD(1) * qJD(2);
t994 = t878 * t1023;
t967 = t874 * t994;
t906 = t967 + t1019;
t629 = t876 * t885 - t880 * t906 + t1034;
t931 = qJD(2) * t972;
t966 = pkin(1) * t979;
t1011 = pkin(8) * t858 + t878 * t966 + t881 * t931;
t899 = -pkin(8) * t967 + t1011;
t710 = pkin(9) * t930 + t899;
t921 = t961 * qJD(2);
t1095 = pkin(9) * t878;
t932 = -pkin(2) * t881 - pkin(1) - t1095;
t713 = (qJD(1) * t921 + qJDD(1) * t932) * t874;
t753 = pkin(9) * t935 + t801;
t790 = t932 * t874;
t765 = qJD(1) * t790;
t977 = t765 * t1035 - t1098 * t713 + t877 * t710 + t753 * t996;
t605 = -pkin(3) * t906 + t977;
t981 = t880 * t948;
t628 = qJD(4) * t981 + t1033 * t777 - t876 * t906 - t880 * t885;
t886 = -t628 * qJ(5) + t724 * qJD(5) - t605;
t575 = -t1101 * t629 + t886;
t1006 = t874 * t1097;
t963 = t1082 * t1097;
t813 = t1099 * t881 - t878 * t963;
t744 = -t1006 * t1098 + t813 * t877;
t1070 = t874 * t878;
t808 = t1070 * t877 - t1082 * t1098;
t983 = -t1099 * t1007 - t811 * t877;
t909 = g(1) * t744 - g(2) * t983 + g(3) * t808;
t1136 = t575 + t909;
t779 = (t1003 * t880 + t876 * t878) * t874;
t764 = qJD(1) * t779;
t924 = t880 * t996 - t764;
t998 = t877 * t1033;
t1128 = t924 - t998;
t938 = t881 * t971;
t763 = -t1001 * t880 + t876 * t938;
t925 = t876 * t996 - t763;
t973 = t877 * t859;
t1135 = t1035 - t973;
t722 = t777 * t876 + t981;
t646 = t722 * t875 + t724 * t879;
t672 = -qJDD(6) + t677;
t941 = -t879 * t722 + t724 * t875;
t1133 = MDP(29) * t646 * t941 + (t646 ^ 2 - t941 ^ 2) * MDP(30) - t672 * MDP(33);
t1024 = qJD(6) - t767;
t1131 = t1024 * t646;
t1005 = t876 * t1098;
t1032 = qJD(4) * t880;
t1130 = t880 * t697 + t918 * t1032 - (-qJD(4) * t1005 - t1035 * t880) * pkin(9) + t1139 * t876;
t1129 = t877 * t1032 + t925;
t1127 = qJD(6) - qJD(4);
t681 = t1098 * t765 - t877 * t753;
t663 = pkin(3) * t948 - t681;
t900 = t724 * qJ(5) - t663;
t596 = -t1101 * t722 + t900;
t745 = t1006 * t877 + t1098 * t813;
t812 = t1099 * t878 + t881 * t963;
t702 = t745 * t876 - t812 * t880;
t703 = t745 * t880 + t812 * t876;
t634 = t702 * t879 - t703 * t875;
t1069 = t874 * t881;
t809 = t1007 * t878 + t1082 * t877;
t738 = t1069 * t880 + t809 * t876;
t1014 = t876 * t1069;
t739 = t809 * t880 - t1014;
t940 = t738 * t879 - t739 * t875;
t915 = t1035 * t753 - t1098 * t710 - t877 * t713 - t765 * t996;
t604 = pkin(10) * t906 - t915;
t992 = t874 * t1022;
t975 = pkin(8) * t992 + qJD(2) * t854 + t878 * t931 - t881 * t966;
t711 = -pkin(2) * t930 + t975;
t610 = t683 * pkin(3) - pkin(10) * t885 + t711;
t752 = -pkin(2) * t935 - t798;
t660 = t775 * pkin(3) - t777 * pkin(10) + t752;
t682 = t1098 * t753 + t877 * t765;
t664 = -pkin(10) * t948 + t682;
t978 = t664 * t1032 + t660 * t1033 + t876 * t604 - t880 * t610;
t933 = qJDD(5) + t978;
t572 = pkin(11) * t628 - t1101 * t677 + t933;
t578 = t660 * t1032 - t1033 * t664 + t880 * t604 + t876 * t610;
t670 = t677 * qJ(5);
t757 = t767 * qJD(5);
t576 = t578 + t670 + t757;
t574 = pkin(11) * t629 + t576;
t987 = t879 * t572 - t875 * t574;
t1125 = g(1) * t634 + g(2) * t1138 + g(3) * t940 + t596 * t646 - t987;
t1123 = t1024 * t941;
t1122 = t877 * t948;
t1057 = qJ(5) * t1135 - qJD(5) * t1098 - t1130;
t1010 = -pkin(9) * t876 - pkin(4);
t1054 = pkin(4) * t973 + t1010 * t1035 - t1132;
t1030 = qJD(5) * t880;
t1047 = t1098 * t799 - t877 * t798;
t917 = pkin(3) * t1001 + t1047;
t898 = qJ(5) * t764 + t917;
t1002 = t1098 * qJ(5);
t1016 = t1098 * pkin(9);
t904 = -t1002 * t880 + t1016;
t1066 = t876 * qJ(5);
t950 = pkin(4) * t880 + t1066;
t1053 = -pkin(4) * t763 + (qJD(4) * t950 - t1030) * t877 + (pkin(4) * t1005 + t904) * qJD(3) + t898;
t1009 = pkin(1) * t1082;
t927 = -pkin(8) * t1070 + t881 * t1009;
t1120 = t938 - t996;
t614 = t880 * t660 - t876 * t664;
t1025 = qJD(5) - t614;
t1117 = (qJDD(2) + 0.2e1 * t979) * t874;
t1116 = qJD(5) * t876 + t682;
t870 = t1098 * pkin(4);
t1114 = -t1098 * pkin(5) - t870;
t1064 = t876 * t879;
t1112 = -t875 * t880 + t1064;
t1111 = g(1) * t812 + g(2) * t810;
t905 = -g(3) * t1069 + t1111;
t1094 = pkin(10) * t677;
t613 = t722 * pkin(4) - t900;
t1109 = t613 * t767 - t1094;
t1107 = -t1101 * t880 - t1066;
t1080 = qJ(5) * t880;
t1106 = t1101 * t876 - t1080;
t1028 = qJD(6) * t879;
t1026 = -pkin(11) * t724 + t1025;
t592 = -t1101 * t767 + t1026;
t1013 = t592 * t1028 + t875 * t572 + t879 * t574;
t635 = t702 * t875 + t703 * t879;
t666 = t738 * t875 + t739 * t879;
t1104 = -g(1) * t635 - g(2) * t1137 - g(3) * t666 - t596 * t941 + t1013;
t1103 = t724 ^ 2;
t1102 = t767 ^ 2;
t883 = qJD(1) ^ 2;
t1100 = pkin(10) - pkin(11);
t1096 = pkin(4) * t677;
t1093 = pkin(11) * t775;
t1092 = pkin(11) * t877;
t1083 = pkin(10) * qJD(4);
t1081 = qJ(5) * t722;
t615 = t876 * t660 + t880 * t664;
t758 = t767 * qJ(5);
t607 = t758 + t615;
t1079 = t607 * t767;
t1078 = t615 * t767;
t1077 = t628 * t876;
t1076 = t722 * t767;
t1075 = t724 * t722;
t1074 = t724 * t767;
t871 = t874 ^ 2;
t1071 = t871 * t883;
t598 = pkin(11) * t722 + t615;
t595 = t598 + t758;
t1068 = t875 * t595;
t1065 = t876 * t677;
t1063 = t877 * t880;
t1062 = t880 * t677;
t1061 = t1101 * t763 + (qJD(4) * t1107 + t1030) * t877 + (t1114 * t876 - t904) * qJD(3) - t898;
t712 = pkin(3) * t777 + pkin(10) * t775;
t1060 = t880 * t681 + t876 * t712;
t1059 = (t1004 * t879 + t1005 * t875) * qJD(3) + t1127 * t877 * t1112 - t763 * t875 - t764 * t879;
t821 = t875 * t876 + t879 * t880;
t805 = t821 * t877;
t1058 = qJD(6) * t805 + t1128 * t875 - t1129 * t879;
t788 = -pkin(2) * t1082 - t927;
t692 = t808 * pkin(3) - t809 * pkin(10) + t788;
t1043 = pkin(8) * t1069 + t878 * t1009;
t789 = pkin(9) * t1082 + t1043;
t1049 = t1098 * t789 + t877 * t790;
t694 = -pkin(10) * t1069 + t1049;
t1056 = t876 * t692 + t880 * t694;
t1052 = (-t1127 + t775) * t821;
t1029 = qJD(6) * t875;
t1051 = t1028 * t876 - t1029 * t880 + t1032 * t875 - t1033 * t879 - t1112 * t775;
t1050 = t1098 * t790 - t877 * t789;
t1048 = -t1106 * t767 + t1116;
t949 = pkin(4) * t876 - t1080;
t1045 = t767 * t949 - t1116;
t1042 = -t876 * t918 + t867;
t872 = t878 ^ 2;
t1041 = -t881 ^ 2 + t872;
t1037 = qJD(2) * t878;
t841 = t1100 * t880;
t1015 = t881 * t1071;
t1012 = t722 * t1028 - t879 * t628 + t875 * t629;
t619 = t777 * qJ(5) + t1060;
t622 = t808 * qJ(5) + t1056;
t693 = pkin(3) * t1069 - t1050;
t1000 = t874 * t1037;
t995 = 0.2e1 * pkin(1) * t871;
t993 = t881 * t1023;
t988 = -t738 * pkin(4) + qJ(5) * t739;
t986 = -t628 * t875 - t879 * t629;
t985 = t692 * t880 - t876 * t694;
t866 = pkin(9) * t1005;
t982 = -t880 * t918 - t866;
t980 = t767 * t880;
t800 = t874 * t921;
t802 = t927 * qJD(2);
t976 = -t790 * t1035 + t1098 * t800 - t789 * t996 - t877 * t802;
t962 = t874 * t883 * t1082;
t960 = -g(1) * t698 + g(2) * t702;
t959 = g(1) * t699 - g(2) * t703;
t958 = g(1) * t983 + g(2) * t744;
t668 = t876 * t681;
t956 = t668 + (-t712 + t1093) * t880 - t1101 * t777 + t1127 * t841;
t840 = t1100 * t876;
t955 = qJD(6) * t840 - t1100 * t1033 + t1093 * t876 - t619;
t755 = -t1002 + t1042;
t727 = t1092 * t876 + t755;
t954 = qJD(6) * t727 - t1101 * t973 - (-pkin(5) + t1010) * t1035 + (qJD(3) * t1004 - t764 - t998) * pkin(11) + t1132;
t726 = t866 + (t918 - t1092) * t880 - t1114;
t953 = pkin(11) * t1129 + qJD(6) * t726 + t1057;
t952 = t948 * t1098;
t951 = t948 * t1039;
t947 = qJ(5) * t879 - t1101 * t875;
t946 = -qJ(5) * t875 - t1101 * t879;
t582 = t875 * t592 + t879 * t595;
t603 = -pkin(11) * t739 - t1101 * t808 - t985;
t611 = pkin(11) * t738 + t622;
t945 = t603 * t879 - t611 * t875;
t944 = t603 * t875 + t611 * t879;
t937 = t874 * t970;
t934 = 0.2e1 * t989 + qJD(2);
t929 = pkin(3) + t950;
t914 = -t1035 * t789 + t1098 * t802 + t790 * t996 + t877 * t800;
t640 = pkin(10) * t1000 + t914;
t736 = qJD(3) * t809 + t874 * t999;
t737 = -qJD(3) * t808 + t937;
t803 = t1043 * qJD(2);
t649 = t736 * pkin(3) - t737 * pkin(10) + t803;
t928 = -t694 * t1032 - t692 * t1033 - t876 * t640 + t649 * t880;
t923 = qJD(3) * t952;
t916 = t663 * t767 - t1094;
t631 = -t988 + t693;
t913 = t692 * t1032 - t1033 * t694 + t880 * t640 + t876 * t649;
t587 = -t1029 * t724 + t1012;
t717 = -t1005 * t810 - t811 * t880;
t719 = -t1005 * t812 - t813 * t880;
t778 = t1003 * t874 * t876 - t1070 * t880;
t911 = -g(1) * t719 - g(2) * t717 - g(3) * t778;
t718 = -t1004 * t810 + t811 * t876;
t720 = -t1004 * t812 + t813 * t876;
t910 = -g(1) * t720 - g(2) * t718 - g(3) * t779;
t908 = -g(1) * t745 - g(2) * t741 - g(3) * t809;
t907 = t930 * MDP(8);
t903 = pkin(3) * t1000 + t976;
t586 = t736 * qJ(5) + t808 * qJD(5) + t913;
t896 = -t1083 * t767 + t909;
t895 = g(1) * t702 + g(2) * t698 + g(3) * t738 - t978;
t588 = qJD(6) * t646 + t986;
t580 = t629 * pkin(4) - t886;
t894 = -t580 + t896;
t657 = -qJD(4) * t738 + t1000 * t876 + t737 * t880;
t892 = qJ(5) * t657 + qJD(5) * t739 + t903;
t891 = t613 * t724 + qJDD(5) - t895;
t890 = g(1) * t703 + g(2) * t699 + g(3) * t739 + t614 * t767 - t578;
t817 = pkin(3) - t1107;
t804 = t1063 * t875 - t1064 * t877;
t791 = (pkin(9) + t949) * t877;
t756 = t870 - t982;
t754 = (-pkin(9) - t1106) * t877;
t656 = -qJD(4) * t1014 - t1000 * t880 + t1032 * t809 + t737 * t876;
t648 = pkin(4) * t724 + t1081;
t630 = -t1101 * t724 - t1081;
t623 = -pkin(4) * t808 - t985;
t621 = -pkin(4) * t777 - t712 * t880 + t668;
t617 = -pkin(5) * t738 - t631;
t606 = -pkin(4) * t767 + t1025;
t599 = -t628 + t1076;
t594 = qJD(6) * t940 + t656 * t875 + t657 * t879;
t593 = qJD(6) * t666 - t656 * t879 + t657 * t875;
t590 = pkin(4) * t656 - t892;
t589 = -pkin(4) * t736 - t928;
t585 = -t1101 * t656 + t892;
t584 = pkin(11) * t656 + t586;
t583 = -pkin(11) * t657 - t1101 * t736 - t928;
t581 = t592 * t879 - t1068;
t577 = t933 - t1096;
t569 = -qJD(6) * t582 + t987;
t568 = -t1029 * t595 + t1013;
t1 = [(-t576 * t738 + t577 * t739 - t586 * t722 + t589 * t724 + t606 * t657 - t607 * t656 - t622 * t629 - t623 * t628 - t958) * MDP(26) + (-t577 * t808 + t580 * t738 - t589 * t767 + t590 * t722 - t606 * t736 + t613 * t656 - t623 * t677 + t629 * t631 + t959) * MDP(25) + (t576 * t808 - t580 * t739 + t586 * t767 - t590 * t724 + t607 * t736 - t613 * t657 + t622 * t677 + t628 * t631 - t960) * MDP(27) + (t576 * t622 + t607 * t586 + t580 * t631 + t613 * t590 + t577 * t623 + t606 * t589 - g(1) * (-pkin(1) * t1097 - t811 * pkin(2) - pkin(3) * t741 - pkin(4) * t699 + pkin(8) * t1008 - t810 * pkin(9) + pkin(10) * t983 - qJ(5) * t698) - g(2) * (pkin(1) * t1099 + t813 * pkin(2) + t745 * pkin(3) + t703 * pkin(4) + pkin(8) * t1006 + t812 * pkin(9) + t744 * pkin(10) + t702 * qJ(5))) * MDP(28) + (t1024 * t594 - t587 * t808 - t646 * t736 - t666 * t672) * MDP(31) + (-t1024 * t593 + t588 * t808 - t672 * t940 + t736 * t941) * MDP(32) + (-t1024 * t736 + t672 * t808) * MDP(33) + (g(1) * t1097 - g(2) * t1099) * MDP(2) + (g(1) * t1099 + g(2) * t1097) * MDP(3) + (-t737 * t948 + t809 * t1019 + ((-qJD(1) * t937 - t887) * t881 + (-(-qJD(1) * t1035 + t990) * t1069 + (qJD(1) * t809 + t777) * qJD(2)) * t878) * t874) * MDP(13) + (-t1000 * t682 - t1049 * t906 - t1069 * t915 + t711 * t809 + t752 * t737 + t803 * t777 + t788 * t885 + t914 * t948 + t958) * MDP(17) + t1082 * t907 + (-t803 * t935 + t927 * t930 - t975 * t1082 + g(1) * t811 - g(2) * t813 + (-t994 + t1021) * t995) * MDP(9) + (-t802 * t935 - t1043 * t930 - t899 * t1082 - g(1) * t810 + g(2) * t812 + (-t993 - t1022) * t995) * MDP(10) + (t736 * t948 - t808 * t1019 + (t683 * t881 + (-qJD(1) * t808 - t775) * t1037) * t874) * MDP(14) + ((qJDD(1) * t872 + 0.2e1 * t878 * t993) * MDP(4) + 0.2e1 * (t1021 * t878 - t1023 * t1041) * MDP(5)) * t871 + (t605 * t738 + t614 * t736 + t693 * t629 + t663 * t656 + t677 * t985 - t722 * t903 + t767 * t928 - t808 * t978 + t959) * MDP(23) + (-t1056 * t677 - t578 * t808 + t605 * t739 - t615 * t736 - t693 * t628 + t663 * t657 - t724 * t903 - t767 * t913 + t960) * MDP(24) + (t587 * t940 - t588 * t666 - t593 * t646 - t594 * t941) * MDP(30) + (-t976 * t948 + t1050 * t1019 + t803 * t775 + t788 * t683 + t711 * t808 + t752 * t736 + g(1) * t741 - g(2) * t745 + (t977 * t881 + (qJD(1) * t1050 + t681) * t1037) * t874) * MDP(16) + qJDD(1) * MDP(1) + ((-qJD(6) * t944 + t583 * t879 - t584 * t875) * t1024 - t945 * t672 - t569 * t808 - t581 * t736 + t585 * t941 + t617 * t588 - t575 * t940 + t596 * t593 + g(1) * t1137 - g(2) * t635) * MDP(34) + (-(qJD(6) * t945 + t583 * t875 + t584 * t879) * t1024 + t944 * t672 + t568 * t808 + t582 * t736 + t585 * t646 + t617 * t587 + t575 * t666 + t596 * t594 + g(1) * t1138 - g(2) * t634) * MDP(35) + (-t629 * t808 - t656 * t767 - t677 * t738 - t722 * t736) * MDP(21) + (-t628 * t808 + t657 * t767 + t677 * t739 + t724 * t736) * MDP(20) + (t677 * t808 + t736 * t767) * MDP(22) + (t628 * t738 - t629 * t739 - t656 * t724 - t657 * t722) * MDP(19) + (-t628 * t739 + t657 * t724) * MDP(18) + (t587 * t666 + t594 * t646) * MDP(29) + (t1036 * t874 * t934 + t1117 * t878) * MDP(6) + (-t1000 * t934 + t1117 * t881) * MDP(7) + (t777 * t737 + t809 * t885) * MDP(11) + (-t809 * t683 - t777 * t736 - t737 * t775 - t808 * t885) * MDP(12) + (-t1019 * t881 + (-t859 - t948) * t1037) * t874 * MDP(15); (-t606 * t764 + t607 * t763 - t756 * t628 - t755 * t629 + t1054 * t724 - t1057 * t722 + (t1004 * t606 - t1005 * t607) * qJD(3) + (-t576 * t876 + t577 * t880 + (-t606 * t876 - t607 * t880) * qJD(4) + t905) * t877) * MDP(26) + (t1059 * t646 + t587 * t805) * MDP(29) + (t764 * t722 + t724 * t763 + (-t1004 * t722 - t1005 * t724) * qJD(3) + (t1077 - t629 * t880 + (t722 * t876 - t724 * t880) * qJD(4)) * t877) * MDP(19) + (pkin(1) * t1015 + t798 * t935 + g(1) * t813 + g(2) * t811 + (pkin(8) * t1023 + g(3)) * t1070 - t1011) * MDP(10) + (pkin(1) * t1071 * t878 + t801 * t935 + t905 - t975) * MDP(9) + (t1024 * t1059 + t1098 * t587 + t1122 * t646 - t805 * t672) * MDP(31) + (-(t726 * t879 - t727 * t875) * t672 + t569 * t1098 + t754 * t588 + t575 * t804 - g(1) * (t719 * t875 + t720 * t879) - g(2) * (t717 * t875 + t718 * t879) - g(3) * (t778 * t875 + t779 * t879) - (t875 * t953 + t879 * t954) * t1024 + t1061 * t941 + t1058 * t596 + t581 * t1122) * MDP(34) + ((t726 * t875 + t727 * t879) * t672 - t568 * t1098 + t754 * t587 + t575 * t805 - g(1) * (t719 * t879 - t720 * t875) - g(2) * (t717 * t879 - t718 * t875) - g(3) * (t778 * t879 - t779 * t875) - (-t875 * t954 + t879 * t953) * t1024 + t1061 * t646 + t1059 * t596 - t582 * t1122) * MDP(35) + (-t1024 * t1058 - t1098 * t588 - t1122 * t941 + t804 * t672) * MDP(32) + (t1024 * t1122 - t1098 * t672) * MDP(33) + (-t1098 * t677 - t1122 * t767) * MDP(22) + (-t923 + t877 * t1019 + (t881 * t952 + (qJD(2) * t877 - t777) * t878) * t1039) * MDP(13) + (pkin(9) * t923 - pkin(2) * t683 + t1047 * t948 - t801 * t775 + (-g(3) * t1003 - t1038 * t681) * t874 + (-pkin(9) * t906 - t752 * t948) * t877 + (-t711 + t1111) * t1098) * MDP(16) + (-t1042 * t677 + t1063 * t605 + t1098 * t578 + t917 * t724 - t911 + t1130 * t767 - t1135 * t615 + (-t628 * t877 + t724 * t996) * pkin(9) + t1128 * t663) * MDP(24) + (t1098 * t885 + t1120 * t775 - t1135 * t777 - t877 * t683) * MDP(12) + (-t881 * t962 + t992) * MDP(6) + (t1098 * t906 + t775 * t1001 + (qJD(3) * t948 - t881 * t951) * t877) * MDP(14) + (t628 * t1098 + t924 * t767 + (-t1033 * t767 - t724 * t948 + t1062) * t877) * MDP(20) + (t577 * t1098 + t791 * t629 - t756 * t677 - t1054 * t767 + t1053 * t722 + t925 * t613 + (t1032 * t613 + t580 * t876 + t606 * t948) * t877 + t910) * MDP(25) + (-t576 * t1098 + t791 * t628 + t755 * t677 + t1057 * t767 - t1053 * t724 - t924 * t613 + (t1033 * t613 - t580 * t880 - t607 * t948) * t877 + t911) * MDP(27) + (t629 * t1098 - t925 * t767 + (-t1032 * t767 + t722 * t948 - t1065) * t877) * MDP(21) + t1041 * MDP(5) * t1071 + (t982 * t677 + t978 * t1098 + t917 * t722 - t663 * t763 + t1132 * t767 + (t1005 * t663 + t1016 * t722) * qJD(3) + (t663 * t1032 + t605 * t876 - t948 * t614 + (qJD(3) * t767 * t876 + t629) * pkin(9)) * t877 + t910) * MDP(23) + (t887 * t877 + t777 * t996 + (t877 * t965 + (-t1003 * t777 + t877 * t902) * qJD(1)) * t874) * MDP(11) + (-t628 * t1063 + t1128 * t724) * MDP(18) - t878 * MDP(4) * t1015 + t878 * MDP(15) * t951 + (t878 * t962 + t858) * MDP(7) + t907 + (-t1058 * t646 - t1059 * t941 - t587 * t804 - t588 * t805) * MDP(30) + (-pkin(2) * t885 + t1001 * t682 - t1016 * t906 - t801 * t777 + (-pkin(9) * t1035 - t1046) * t948 - t1120 * t752 + (t711 - t905) * t877) * MDP(17) + (t576 * t755 + t580 * t791 + t577 * t756 - g(1) * (t720 * pkin(4) + t813 * pkin(9) + t719 * qJ(5) - t812 * t918) - g(2) * (t718 * pkin(4) + t811 * pkin(9) + t717 * qJ(5) - t810 * t918) - g(3) * (t779 * pkin(4) + t778 * qJ(5) + (t881 * t918 + t1095) * t874) + t1053 * t613 + t1057 * t607 + t1054 * t606) * MDP(28); (t619 * t722 - t621 * t724 + (t576 + t767 * t606 + (-t629 + t1034) * pkin(10)) * t880 + (t577 - t1079 + (qJD(4) * t722 - t628) * pkin(10)) * t876 + t908) * MDP(26) + (pkin(3) * t628 + t1060 * t767 - t682 * t724 + t916 * t880 + (t605 - t896) * t876) * MDP(24) + (t724 * t980 - t1077) * MDP(18) + t906 * MDP(15) + (t767 * t980 + t1065) * MDP(20) + ((-t628 - t1076) * t880 + (-t629 - t1074) * t876) * MDP(19) + (-pkin(3) * t629 + t668 * t767 - t682 * t722 + t916 * t876 + (-t605 + (-t712 - t1083) * t767 + t909) * t880) * MDP(23) + (-t681 * t948 + t752 * t775 - t908 + t915) * MDP(17) + (-t682 * t948 + t909 - t977) * MDP(16) + (-t775 * t948 + t885) * MDP(13) + (-t1102 * t876 + t1062) * MDP(21) + (t1052 * t646 + t1112 * t587) * MDP(29) + (t1024 * t1052 - t1112 * t672) * MDP(31) + (-t1051 * t646 - t1052 * t941 - t1112 * t588 - t587 * t821) * MDP(30) + (-t1024 * t1051 + t672 * t821) * MDP(32) - t775 ^ 2 * MDP(12) + (t1045 * t722 + t1109 * t876 + t621 * t767 - t629 * t929 + t894 * t880) * MDP(25) + (-t1045 * t724 - t1109 * t880 - t619 * t767 - t628 * t929 + t894 * t876) * MDP(27) + (-(t840 * t879 - t841 * t875) * t672 + t817 * t588 - (t875 * t955 + t879 * t956) * t1024 + t1048 * t941 + t1051 * t596 + t1136 * t821) * MDP(34) + (-t606 * t621 - t607 * t619 + t1045 * t613 + (t576 * t880 + t577 * t876 + (t606 * t880 - t607 * t876) * qJD(4) + t908) * pkin(10) + (-t580 + t909) * t929) * MDP(28) + ((t840 * t875 + t841 * t879) * t672 + t817 * t587 - (-t875 * t956 + t879 * t955) * t1024 + t1048 * t646 + t1052 * t596 + t1136 * t1112) * MDP(35) - t683 * MDP(14) + (t775 * MDP(11) - t948 * MDP(14) - t752 * MDP(16) - t724 * MDP(20) + t722 * MDP(21) - t767 * MDP(22) - t614 * MDP(23) + t615 * MDP(24) + t606 * MDP(25) - t607 * MDP(27) + t646 * MDP(31) - t941 * MDP(32) + t1024 * MDP(33) + t581 * MDP(34) - t582 * MDP(35) + MDP(12) * t777) * t777; MDP(18) * t1075 + (-t722 ^ 2 + t1103) * MDP(19) + t599 * MDP(20) + (t1074 - t629) * MDP(21) + t677 * MDP(22) + (-t663 * t724 + t1078 + t895) * MDP(23) + (t663 * t722 + t890) * MDP(24) + (-t648 * t722 + t1078 + 0.2e1 * t1096 - t891) * MDP(25) + (pkin(4) * t628 - qJ(5) * t629 + (t607 - t615) * t724 + (t606 - t1025) * t722) * MDP(26) + (-t613 * t722 + t648 * t724 + 0.2e1 * t670 + 0.2e1 * t757 - t890) * MDP(27) + (t576 * qJ(5) - t577 * pkin(4) - t613 * t648 - t606 * t615 - g(1) * (-pkin(4) * t702 + qJ(5) * t703) - g(2) * (-pkin(4) * t698 + qJ(5) * t699) - g(3) * t988 + t1025 * t607) * MDP(28) + (-t587 - t1123) * MDP(31) + (t588 - t1131) * MDP(32) + (-t946 * t672 - t630 * t941 - (t1026 * t875 + t879 * t598) * t1024 + (-t1024 * t947 + t582) * qJD(6) + t1125) * MDP(34) + (t947 * t672 - t630 * t646 - (t1026 * t879 - t875 * t598) * t1024 + (-t1024 * t946 - t1068) * qJD(6) + t1104) * MDP(35) - t1133; t599 * MDP(26) + (-t1102 - t1103) * MDP(27) + (-t1079 + t891 - t1096) * MDP(28) + (-t879 * t672 - t724 * t941) * MDP(34) + (-t646 * t724 + t875 * t672) * MDP(35) - (MDP(34) * t875 + MDP(35) * t879) * t1024 ^ 2 + (t1075 - t677) * MDP(25); (t1012 + t1123) * MDP(31) + (-t986 + t1131) * MDP(32) + (t1024 * t582 - t1125) * MDP(34) + (t1024 * t581 - t1104) * MDP(35) + ((-MDP(32) * t724 - MDP(34) * t595) * t879 + (-MDP(31) * t724 - MDP(32) * t722 - MDP(34) * t592 + MDP(35) * t595) * t875) * qJD(6) + t1133;];
tau  = t1;
