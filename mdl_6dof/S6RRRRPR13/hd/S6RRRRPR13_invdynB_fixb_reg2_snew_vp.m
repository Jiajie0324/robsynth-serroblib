% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 01:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR13_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 01:36:48
% EndTime: 2019-05-08 01:39:03
% DurationCPUTime: 88.70s
% Computational Cost: add. (327543->985), mult. (696138->1519), div. (0->0), fcn. (558857->12), ass. (0->731)
t1227 = sin(qJ(1));
t1232 = cos(qJ(1));
t1221 = sin(pkin(6));
t1222 = cos(pkin(6));
t1226 = sin(qJ(2));
t1231 = cos(qJ(2));
t1408 = qJD(1) * t1222;
t1213 = qJD(2) + t1408;
t1225 = sin(qJ(3));
t1230 = cos(qJ(3));
t1369 = t1221 * t1226;
t1351 = qJD(1) * t1369;
t1181 = t1213 * t1225 + t1230 * t1351;
t1224 = sin(qJ(4));
t1229 = cos(qJ(4));
t1368 = t1221 * t1231;
t1211 = qJD(1) * t1368;
t1358 = t1211 - qJD(3);
t1151 = t1229 * t1181 - t1224 * t1358;
t1179 = -t1230 * t1213 + t1225 * t1351;
t1175 = qJD(4) + t1179;
t1356 = qJDD(1) * t1226;
t1406 = qJD(1) * t1231;
t1188 = (qJD(2) * t1406 + t1356) * t1221;
t1212 = qJDD(1) * t1222 + qJDD(2);
t1130 = -t1179 * qJD(3) + t1230 * t1188 + t1225 * t1212;
t1355 = qJDD(1) * t1231;
t1407 = qJD(1) * t1226;
t1266 = qJD(2) * t1407 - t1355;
t1248 = t1266 * t1221;
t1244 = qJDD(3) + t1248;
t1332 = t1224 * t1130 - t1229 * t1244;
t1011 = (qJD(4) - t1175) * t1151 + t1332;
t1426 = t1175 ^ 2;
t1149 = t1181 * t1224 + t1229 * t1358;
t1427 = t1149 ^ 2;
t1116 = t1427 - t1426;
t1107 = t1151 * t1149;
t1330 = t1225 * t1188 - t1230 * t1212;
t1129 = -t1181 * qJD(3) - t1330;
t1128 = qJDD(4) - t1129;
t1439 = t1107 + t1128;
t1396 = t1439 * t1224;
t989 = t1116 * t1229 - t1396;
t906 = -t1011 * t1225 + t1230 * t989;
t1395 = t1439 * t1229;
t984 = t1116 * t1224 + t1395;
t1290 = t1226 * t906 - t1231 * t984;
t902 = t1011 * t1230 + t1225 * t989;
t795 = -t1221 * t902 + t1222 * t1290;
t844 = t1226 * t984 + t1231 * t906;
t1560 = t1227 * t795 - t1232 * t844;
t1148 = t1151 ^ 2;
t1104 = t1148 - t1427;
t1360 = qJD(4) + t1175;
t1010 = t1151 * t1360 + t1332;
t1235 = -t1229 * t1130 - t1224 * t1244;
t1052 = -t1149 * qJD(4) - t1235;
t1383 = t1149 * t1175;
t1437 = -t1383 + t1052;
t1399 = t1437 * t1224;
t913 = -t1010 * t1229 - t1399;
t871 = t1104 * t1225 + t1230 * t913;
t907 = -t1010 * t1224 + t1229 * t1437;
t1298 = t1226 * t871 - t1231 * t907;
t869 = -t1104 * t1230 + t1225 * t913;
t762 = -t1221 * t869 + t1222 * t1298;
t817 = t1226 * t907 + t1231 * t871;
t1559 = t1227 * t762 - t1232 * t817;
t1558 = t1227 * t844 + t1232 * t795;
t1557 = t1227 * t817 + t1232 * t762;
t1552 = t1221 * t1290 + t1222 * t902;
t1551 = t1221 * t1298 + t1222 * t869;
t1440 = -t1052 - t1383;
t1475 = -t1011 * t1224 + t1440 * t1229;
t1438 = t1148 + t1427;
t1474 = -t1011 * t1229 - t1440 * t1224;
t1492 = -t1225 * t1438 + t1230 * t1474;
t1504 = t1226 * t1475 + t1231 * t1492;
t1495 = t1225 * t1474 + t1230 * t1438;
t1506 = t1226 * t1492 - t1231 * t1475;
t1527 = -t1221 * t1495 + t1222 * t1506;
t1535 = t1227 * t1504 + t1232 * t1527;
t1550 = pkin(7) * t1535;
t1536 = -t1227 * t1527 + t1232 * t1504;
t1549 = pkin(7) * t1536;
t1117 = -t1148 + t1426;
t1333 = -t1128 + t1107;
t1394 = t1333 * t1224;
t1498 = -t1117 * t1229 + t1394;
t1393 = t1333 * t1229;
t1497 = -t1117 * t1224 - t1393;
t1505 = -t1225 * t1440 + t1230 * t1497;
t1525 = -t1226 * t1498 + t1231 * t1505;
t1507 = t1225 * t1497 + t1230 * t1440;
t1526 = t1226 * t1505 + t1231 * t1498;
t1537 = -t1221 * t1507 + t1222 * t1526;
t1548 = -t1227 * t1537 + t1232 * t1525;
t1547 = t1227 * t1525 + t1232 * t1537;
t1546 = pkin(1) * t1527;
t1528 = t1221 * t1506 + t1222 * t1495;
t1545 = pkin(1) * t1528;
t1538 = t1221 * t1526 + t1222 * t1507;
t1534 = (-t1221 * t1528 - t1222 * t1527) * pkin(8);
t1533 = pkin(8) * t1504;
t1069 = t1426 + t1148;
t960 = t1069 * t1229 + t1396;
t1524 = pkin(2) * t960;
t1523 = pkin(3) * t960;
t1522 = pkin(10) * t960;
t968 = t1069 * t1224 - t1395;
t1521 = pkin(10) * t968;
t1520 = pkin(9) * t1492;
t1519 = pkin(9) * t1495;
t1518 = t1225 * t968;
t1517 = t1226 * t960;
t1515 = t1230 * t968;
t1514 = t1231 * t960;
t1508 = -pkin(2) * t1495 - pkin(3) * t1438 - pkin(10) * t1474;
t1503 = pkin(10) * t1475;
t1378 = t1175 * t1229;
t1114 = t1151 * t1378;
t1379 = t1175 * t1224;
t1342 = t1149 * t1379;
t1317 = t1114 + t1342;
t1113 = t1151 * t1379;
t1340 = t1149 * t1378;
t1318 = t1113 - t1340;
t1432 = t1128 * t1225 + t1230 * t1318;
t1453 = -t1226 * t1317 + t1231 * t1432;
t1435 = -t1230 * t1128 + t1225 * t1318;
t1456 = t1226 * t1432 + t1231 * t1317;
t1470 = -t1221 * t1435 + t1222 * t1456;
t1494 = -t1227 * t1470 + t1232 * t1453;
t1268 = qJD(4) * t1151 + t1332;
t1240 = t1229 * t1268 - t1342;
t1239 = t1224 * t1268 + t1340;
t1346 = t1225 * t1107;
t1433 = t1230 * t1239 - t1346;
t1452 = -t1226 * t1240 + t1231 * t1433;
t1345 = t1230 * t1107;
t1434 = t1225 * t1239 + t1345;
t1455 = t1226 * t1433 + t1231 * t1240;
t1471 = -t1221 * t1434 + t1222 * t1455;
t1493 = -t1227 * t1471 + t1232 * t1452;
t1491 = t1227 * t1453 + t1232 * t1470;
t1490 = t1227 * t1452 + t1232 * t1471;
t1436 = -t1426 - t1427;
t1457 = t1224 * t1436 - t1393;
t1489 = pkin(2) * t1457;
t1488 = pkin(3) * t1457;
t1454 = t1229 * t1436 + t1394;
t1487 = pkin(10) * t1454;
t1486 = pkin(10) * t1457;
t1483 = t1225 * t1454;
t1482 = t1226 * t1457;
t1479 = t1230 * t1454;
t1478 = t1231 * t1457;
t1473 = t1221 * t1455 + t1222 * t1434;
t1472 = t1221 * t1456 + t1222 * t1435;
t1469 = 2 * qJD(5);
t1467 = qJ(5) * t1437;
t1161 = t1179 * t1358;
t1088 = t1161 + t1130;
t1320 = t1230 * t1161;
t1336 = t1358 * t1181;
t1321 = t1225 * t1336;
t1111 = t1320 - t1321;
t1458 = t1226 * t1111 - t1231 * t1244;
t1008 = -t1052 * t1224 - t1114;
t1009 = t1052 * t1229 - t1113;
t1323 = t1225 * t1009 - t1345;
t1324 = t1230 * t1009 + t1346;
t1366 = t1222 * t1231;
t1430 = t1222 * t1226 * t1324 + t1008 * t1366 - t1221 * t1323;
t1431 = -t1008 * t1226 + t1231 * t1324;
t1451 = t1227 * t1431 + t1232 * t1430;
t1450 = -t1227 * t1430 + t1232 * t1431;
t1354 = t1358 ^ 2;
t1223 = sin(qJ(6));
t1127 = qJDD(6) - t1128;
t1228 = cos(qJ(6));
t1096 = -t1228 * t1149 + t1151 * t1223;
t1098 = t1149 * t1223 + t1151 * t1228;
t1390 = t1096 * t1098;
t1242 = t1127 - t1390;
t1449 = t1223 * t1242;
t1377 = t1181 * t1179;
t1238 = t1244 - t1377;
t1448 = t1225 * t1238;
t1445 = t1228 * t1242;
t1444 = t1230 * t1238;
t1103 = pkin(4) * t1149 - qJ(5) * t1151;
t1137 = pkin(3) * t1179 - pkin(10) * t1181;
t1208 = g(1) * t1232 + t1227 * g(2);
t1419 = pkin(8) * t1221;
t1428 = qJD(1) ^ 2;
t1184 = -pkin(1) * t1428 + qJDD(1) * t1419 - t1208;
t1422 = pkin(2) * t1231;
t1327 = -pkin(9) * t1226 - t1422;
t1409 = qJD(1) * t1221;
t1187 = t1327 * t1409;
t1207 = t1227 * g(1) - t1232 * g(2);
t1246 = qJDD(1) * pkin(1) + t1419 * t1428 + t1207;
t1243 = t1222 * t1246;
t1236 = -g(3) * t1369 + t1226 * t1243;
t1425 = t1213 ^ 2;
t1077 = t1212 * pkin(9) - t1425 * pkin(2) + (t1187 * t1409 + t1184) * t1231 + t1236;
t1362 = qJD(2) + t1213;
t1417 = t1222 * g(3);
t1418 = pkin(9) * t1231;
t1423 = pkin(2) * t1226;
t1234 = -t1188 * pkin(9) - t1417 + ((-pkin(1) - t1422) * qJDD(1) + (-pkin(8) * t1409 - t1213 * t1418 + t1362 * t1423) * qJD(1) - t1207) * t1221;
t992 = t1230 * t1077 + t1225 * t1234;
t940 = -pkin(3) * t1354 + pkin(10) * t1244 - t1179 * t1137 + t992;
t1331 = t1226 * t1184 - t1231 * t1243;
t1076 = -t1212 * pkin(2) - t1425 * pkin(9) + (g(3) * t1231 + t1187 * t1407) * t1221 + t1331;
t944 = -t1088 * pkin(10) + (-t1129 - t1336) * pkin(3) + t1076;
t847 = t1224 * t944 + t1229 * t940;
t1314 = t1128 * qJ(5) - t1149 * t1103 + t1175 * t1469 + t847;
t1429 = t1008 * t1368 + t1222 * t1323 + t1324 * t1369;
t1094 = t1096 ^ 2;
t1095 = t1098 ^ 2;
t1170 = -qJD(6) + t1175;
t1167 = t1170 ^ 2;
t1177 = t1179 ^ 2;
t1178 = t1181 ^ 2;
t1218 = t1221 ^ 2;
t1424 = pkin(4) + pkin(5);
t1421 = pkin(3) * t1225;
t1420 = pkin(4) * t1229;
t846 = t1224 * t940 - t1229 * t944;
t1416 = qJ(5) * t1229;
t991 = t1225 * t1077 - t1230 * t1234;
t939 = -t1244 * pkin(3) - t1354 * pkin(10) + t1181 * t1137 + t991;
t1241 = t1268 * pkin(4) - t1467 + t939;
t1326 = -pkin(5) * t1175 - pkin(11) * t1151;
t1337 = pkin(4) * t1175 - (2 * qJD(5));
t796 = t1332 * pkin(5) + t1427 * pkin(11) + t1241 + (pkin(5) * qJD(4) - t1326 + t1337) * t1151;
t1415 = t1223 * t796;
t970 = -t1127 - t1390;
t1414 = t1223 * t970;
t1413 = t1224 * t939;
t1412 = t1228 * t796;
t1411 = t1228 * t970;
t1410 = t1229 * t939;
t1392 = t1076 * t1225;
t1391 = t1076 * t1230;
t1389 = t1096 * t1170;
t1119 = -t1244 - t1377;
t1386 = t1119 * t1225;
t1385 = t1119 * t1230;
t1382 = t1170 * t1223;
t1381 = t1170 * t1228;
t1380 = t1175 * t1151;
t1341 = t1226 * t1231 * t1428;
t1206 = t1218 * t1341;
t1185 = t1206 + t1212;
t1376 = t1185 * t1226;
t1375 = t1185 * t1231;
t1186 = -t1206 + t1212;
t1374 = t1186 * t1226;
t1373 = t1186 * t1231;
t1372 = t1212 * t1221;
t1371 = t1213 * t1221;
t1370 = t1218 * t1428;
t1163 = t1221 * t1246 + t1417;
t1364 = t1226 * t1163;
t1363 = t1231 * t1163;
t1359 = t1438 - t1426;
t1219 = t1226 ^ 2;
t1220 = t1231 ^ 2;
t1357 = t1219 + t1220;
t1353 = -pkin(3) * t1230 - pkin(2);
t1352 = qJD(1) * t1371;
t1350 = t1219 * t1370;
t1349 = t1220 * t1370;
t1348 = t1225 * t1390;
t1347 = t1230 * t1390;
t1344 = t1226 * t1377;
t1343 = t1231 * t1377;
t1339 = t1096 * qJD(6) - t1228 * t1052 - t1223 * t1268;
t1338 = qJ(5) * t1224 + pkin(3);
t1328 = t1151 * t1103 + qJDD(5) + t846;
t1267 = -pkin(4) * t1128 + t1328;
t821 = qJ(5) * t1426 - t1267;
t782 = t1333 * pkin(5) + pkin(11) * t1440 - t821;
t820 = -pkin(4) * t1426 + t1314;
t791 = -pkin(5) * t1427 + pkin(11) * t1268 + t1175 * t1326 + t820;
t709 = t1223 * t791 - t1228 * t782;
t898 = t1225 * t991 + t1230 * t992;
t1335 = -t1213 + t1408;
t1334 = t1223 * t1052 - t1228 * t1268;
t1166 = -t1207 * t1227 - t1232 * t1208;
t1205 = qJDD(1) * t1232 - t1227 * t1428;
t1325 = -pkin(7) * t1205 - g(3) * t1227;
t1322 = t1225 * t1161;
t1319 = t1230 * t1336;
t1174 = -t1350 - t1425;
t1136 = -t1174 * t1226 - t1373;
t1316 = pkin(8) * t1136 - t1364;
t1192 = -t1349 - t1425;
t1144 = t1192 * t1231 - t1376;
t1315 = pkin(8) * t1144 + t1363;
t710 = t1223 * t782 + t1228 * t791;
t666 = t1223 * t710 - t1228 * t709;
t667 = t1223 * t709 + t1228 * t710;
t769 = t1224 * t847 - t1229 * t846;
t770 = t1224 * t846 + t1229 * t847;
t897 = t1225 * t992 - t1230 * t991;
t635 = t1224 * t666 + t1229 * t667;
t631 = t1225 * t796 + t1230 * t635;
t634 = t1224 * t667 - t1229 * t666;
t1313 = t1226 * t631 - t1231 * t634;
t744 = -t1224 * t821 + t1229 * t820;
t829 = t1151 * t1337 + t1241;
t700 = t1225 * t829 + t1230 * t744;
t743 = t1224 * t820 + t1229 * t821;
t1312 = t1226 * t700 - t1231 * t743;
t1250 = (-qJD(6) - t1170) * t1098 - t1334;
t884 = t1339 + t1389;
t807 = t1223 * t1250 + t1228 * t884;
t809 = -t1223 * t884 + t1228 * t1250;
t735 = t1224 * t807 + t1229 * t809;
t957 = -t1094 - t1095;
t714 = -t1225 * t957 + t1230 * t735;
t733 = t1224 * t809 - t1229 * t807;
t1311 = t1226 * t714 - t1231 * t733;
t1026 = t1095 - t1094;
t1271 = -t1339 + t1389;
t880 = (qJD(6) - t1170) * t1098 + t1334;
t806 = t1223 * t880 - t1228 * t1271;
t808 = -t1223 * t1271 - t1228 * t880;
t734 = -t1224 * t806 + t1229 * t808;
t720 = -t1026 * t1225 + t1230 * t734;
t732 = -t1224 * t808 - t1229 * t806;
t1310 = t1226 * t720 + t1231 * t732;
t748 = t1225 * t939 + t1230 * t770;
t1309 = t1226 * t748 - t1231 * t769;
t997 = -t1167 - t1094;
t890 = t1223 * t997 + t1445;
t891 = t1228 * t997 - t1449;
t815 = t1224 * t890 + t1229 * t891;
t760 = -t1225 * t880 + t1230 * t815;
t814 = t1224 * t891 - t1229 * t890;
t1308 = t1226 * t760 - t1231 * t814;
t1038 = -t1095 - t1167;
t915 = t1038 * t1228 + t1414;
t916 = -t1038 * t1223 + t1411;
t828 = t1224 * t915 + t1229 * t916;
t768 = -t1225 * t1271 + t1230 * t828;
t827 = t1224 * t916 - t1229 * t915;
t1307 = t1226 * t768 - t1231 * t827;
t1061 = -t1095 + t1167;
t919 = -t1061 * t1228 - t1449;
t921 = -t1061 * t1223 + t1445;
t834 = -t1224 * t919 + t1229 * t921;
t774 = t1225 * t884 + t1230 * t834;
t832 = -t1224 * t921 - t1229 * t919;
t1306 = t1226 * t774 + t1231 * t832;
t1060 = t1094 - t1167;
t920 = -t1060 * t1223 + t1411;
t922 = t1060 * t1228 + t1414;
t835 = -t1224 * t920 + t1229 * t922;
t775 = -t1225 * t1250 + t1230 * t835;
t833 = -t1224 * t922 - t1229 * t920;
t1305 = t1226 * t775 + t1231 * t833;
t923 = -qJD(6) * t1098 - t1334;
t874 = t1096 * t1382 - t1228 * t923;
t875 = -t1096 * t1381 - t1223 * t923;
t803 = -t1224 * t874 + t1229 * t875;
t785 = t1230 * t803 + t1348;
t801 = -t1224 * t875 - t1229 * t874;
t1304 = t1226 * t785 + t1231 * t801;
t876 = t1098 * t1381 + t1223 * t1339;
t877 = t1098 * t1382 - t1228 * t1339;
t804 = -t1224 * t876 + t1229 * t877;
t786 = t1230 * t804 - t1348;
t802 = -t1224 * t877 - t1229 * t876;
t1303 = t1226 * t786 + t1231 * t802;
t974 = (-t1096 * t1223 - t1098 * t1228) * t1170;
t975 = (t1096 * t1228 - t1098 * t1223) * t1170;
t873 = -t1224 * t974 + t1229 * t975;
t857 = -t1127 * t1225 + t1230 * t873;
t872 = -t1224 * t975 - t1229 * t974;
t1302 = t1226 * t857 + t1231 * t872;
t888 = -t1225 * t1437 - t1515;
t1297 = t1226 * t888 - t1514;
t889 = t1010 * t1225 + t1479;
t1296 = t1226 * t889 - t1478;
t1018 = t1149 * t1360 + t1235;
t895 = -t1018 * t1225 + t1515;
t1295 = t1226 * t895 + t1514;
t1012 = t1268 + t1380;
t896 = t1012 * t1225 + t1479;
t1294 = t1226 * t896 - t1478;
t1287 = -t1076 * t1231 + t1226 * t898;
t1086 = (-0.2e1 * qJD(3) + t1211) * t1181 - t1330;
t1021 = t1086 * t1230 - t1088 * t1225;
t1139 = -t1178 + t1177;
t1284 = t1021 * t1226 + t1139 * t1231;
t1085 = t1181 * t1211 + t1330;
t1090 = -t1130 + t1161;
t1022 = -t1085 * t1230 - t1090 * t1225;
t1112 = t1177 + t1178;
t1283 = t1022 * t1226 + t1112 * t1231;
t1133 = -t1354 - t1177;
t1050 = t1133 * t1230 - t1448;
t1282 = t1050 * t1226 + t1086 * t1231;
t1140 = -t1178 - t1354;
t1059 = -t1140 * t1225 + t1385;
t1281 = t1059 * t1226 - t1088 * t1231;
t1155 = t1354 - t1178;
t1066 = -t1155 * t1225 + t1444;
t1280 = t1066 * t1226 + t1090 * t1231;
t1154 = t1177 - t1354;
t1067 = t1154 * t1230 + t1386;
t1279 = t1067 * t1226 + t1085 * t1231;
t1134 = g(3) * t1368 + t1331;
t1135 = t1231 * t1184 + t1236;
t1278 = -t1231 * t1134 + t1226 * t1135;
t1057 = t1134 * t1226 + t1135 * t1231;
t1196 = t1213 * t1211;
t1157 = t1196 + t1188;
t1195 = t1213 * t1351;
t1160 = -t1195 - t1248;
t1277 = t1157 * t1231 + t1160 * t1226;
t1158 = -t1196 + t1188;
t1159 = t1195 - t1248;
t1276 = -t1158 * t1231 + t1159 * t1226;
t1275 = t1174 * t1231 - t1374;
t1190 = -t1350 + t1425;
t1274 = t1190 * t1231 + t1376;
t1273 = t1192 * t1226 + t1375;
t1191 = t1349 - t1425;
t1272 = t1191 * t1226 + t1373;
t1165 = t1207 * t1232 - t1227 * t1208;
t1080 = -t1225 * t1129 - t1320;
t1270 = t1080 * t1226 + t1343;
t1082 = t1230 * t1130 + t1321;
t1269 = t1082 * t1226 - t1343;
t609 = -pkin(3) * t634 - qJ(5) * t667 + t1424 * t666;
t646 = -pkin(11) * t667 - t1424 * t796;
t657 = -pkin(11) * t666 - qJ(5) * t796;
t611 = -pkin(10) * t634 - t1224 * t646 + t1229 * t657;
t630 = t1225 * t635 - t1230 * t796;
t596 = -pkin(9) * t630 - t1225 * t609 + t1230 * t611;
t603 = -pkin(2) * t630 + pkin(3) * t796 - pkin(10) * t635 - t1224 * t657 - t1229 * t646;
t614 = t1226 * t634 + t1231 * t631;
t1265 = pkin(8) * t614 + t1226 * t596 + t1231 * t603;
t653 = -pkin(11) * t809 + t1424 * t957 - t667;
t656 = -pkin(11) * t807 + qJ(5) * t957 - t666;
t617 = -pkin(10) * t733 - t1224 * t653 + t1229 * t656;
t665 = -pkin(3) * t733 - qJ(5) * t809 + t1424 * t807;
t713 = t1225 * t735 + t1230 * t957;
t612 = -pkin(9) * t713 - t1225 * t665 + t1230 * t617;
t615 = -pkin(2) * t713 - pkin(3) * t957 - pkin(10) * t735 - t1224 * t656 - t1229 * t653;
t673 = t1226 * t733 + t1231 * t714;
t1264 = pkin(8) * t673 + t1226 * t612 + t1231 * t615;
t701 = -pkin(11) * t891 + t1424 * t880 - t1412;
t724 = -pkin(11) * t890 + qJ(5) * t880 - t1415;
t662 = -pkin(10) * t814 - t1224 * t701 + t1229 * t724;
t668 = -pkin(3) * t814 - qJ(5) * t891 + t1424 * t890 - t709;
t759 = t1225 * t815 + t1230 * t880;
t621 = -pkin(9) * t759 - t1225 * t668 + t1230 * t662;
t643 = -pkin(2) * t759 - pkin(3) * t880 - pkin(10) * t815 - t1224 * t724 - t1229 * t701;
t708 = t1226 * t814 + t1231 * t760;
t1263 = pkin(8) * t708 + t1226 * t621 + t1231 * t643;
t706 = -pkin(11) * t916 + t1271 * t1424 + t1415;
t736 = -pkin(11) * t915 + qJ(5) * t1271 - t1412;
t664 = -pkin(10) * t827 - t1224 * t706 + t1229 * t736;
t671 = -pkin(3) * t827 - qJ(5) * t916 + t1424 * t915 - t710;
t767 = t1225 * t828 + t1230 * t1271;
t626 = -pkin(9) * t767 - t1225 * t671 + t1230 * t664;
t645 = -pkin(2) * t767 - pkin(3) * t1271 - pkin(10) * t828 - t1224 * t736 - t1229 * t706;
t722 = t1226 * t827 + t1231 * t768;
t1262 = pkin(8) * t722 + t1226 * t626 + t1231 * t645;
t682 = -pkin(3) * t743 - pkin(4) * t821 - qJ(5) * t820;
t688 = -pkin(10) * t743 + (pkin(4) * t1224 - t1416) * t829;
t699 = t1225 * t744 - t1230 * t829;
t636 = -pkin(9) * t699 - t1225 * t682 + t1230 * t688;
t649 = -pkin(2) * t699 - pkin(10) * t744 + (t1338 + t1420) * t829;
t672 = t1226 * t743 + t1231 * t700;
t1261 = pkin(8) * t672 + t1226 * t636 + t1231 * t649;
t747 = t1225 * t770 - t1230 * t939;
t675 = -pkin(9) * t747 + (-pkin(10) * t1230 + t1421) * t769;
t692 = -pkin(2) * t747 + pkin(3) * t939 - pkin(10) * t770;
t697 = t1226 * t769 + t1231 * t748;
t1260 = pkin(8) * t697 + t1226 * t675 + t1231 * t692;
t798 = pkin(4) * t1359 + t1314;
t805 = qJ(5) * t1359 + t1267;
t707 = -t1224 * t798 + t1229 * t805 - t1503;
t826 = -pkin(3) * t1475 - pkin(4) * t1440 + qJ(5) * t1011;
t679 = -t1225 * t826 + t1230 * t707 - t1519;
t693 = -t1224 * t805 - t1229 * t798 + t1508;
t1259 = t1226 * t679 + t1231 * t693 + t1533;
t1237 = t1151 * t1469 - t1241;
t810 = -pkin(4) * t1380 + t1237 + t1467;
t757 = -pkin(4) * t1399 + t1229 * t810 - t1522;
t763 = -t1523 - qJ(5) * t1439 + (-t1069 + t1426) * pkin(4) - t1314;
t886 = t1230 * t1437 - t1518;
t687 = -pkin(9) * t886 - t1225 * t763 + t1230 * t757;
t721 = -pkin(2) * t886 + t1521 - t1224 * t810 + (-pkin(3) - t1420) * t1437;
t836 = t1231 * t888 + t1517;
t1258 = pkin(8) * t836 + t1226 * t687 + t1231 * t721;
t811 = (-t1012 - t1380) * pkin(4) + t1237;
t758 = -t1012 * t1416 - t1224 * t811 - t1486;
t765 = -t1488 + (-t1436 - t1426) * qJ(5) + (t1333 - t1128) * pkin(4) + t1328;
t894 = -t1012 * t1230 + t1483;
t691 = -pkin(9) * t894 - t1225 * t765 + t1230 * t758;
t723 = -pkin(2) * t894 + t1012 * t1338 - t1229 * t811 - t1487;
t840 = t1231 * t896 + t1482;
t1257 = pkin(8) * t840 + t1226 * t691 + t1231 * t723;
t745 = -t769 - t1503;
t698 = t1230 * t745 + t1421 * t1475 - t1519;
t711 = t1508 - t770;
t1256 = t1226 * t698 + t1231 * t711 + t1533;
t818 = t846 - t1488;
t850 = t1413 - t1486;
t887 = -t1010 * t1230 + t1483;
t731 = -pkin(9) * t887 - t1225 * t818 + t1230 * t850;
t771 = -pkin(2) * t887 + pkin(3) * t1010 + t1410 - t1487;
t837 = t1231 * t889 + t1482;
t1255 = pkin(8) * t837 + t1226 * t731 + t1231 * t771;
t819 = t847 + t1523;
t855 = t1410 + t1522;
t893 = t1018 * t1230 + t1518;
t737 = -pkin(9) * t893 - t1225 * t819 + t1230 * t855;
t776 = -pkin(2) * t893 - pkin(3) * t1018 - t1413 - t1521;
t839 = t1231 * t895 - t1517;
t1254 = pkin(8) * t839 + t1226 * t737 + t1231 * t776;
t1049 = t1133 * t1225 + t1444;
t929 = -pkin(2) * t1049 + t991;
t973 = -pkin(9) * t1049 + t1392;
t978 = t1050 * t1231 - t1086 * t1226;
t1253 = pkin(8) * t978 + t1226 * t973 + t1231 * t929;
t1058 = t1140 * t1230 + t1386;
t932 = -pkin(2) * t1058 + t992;
t979 = -pkin(9) * t1058 + t1391;
t980 = t1059 * t1231 + t1088 * t1226;
t1252 = pkin(8) * t980 + t1226 * t979 + t1231 * t932;
t1108 = t1158 * t1226 + t1159 * t1231;
t1251 = pkin(8) * t1108 + t1057;
t1020 = -t1085 * t1225 + t1090 * t1230;
t845 = -pkin(9) * t1020 - t897;
t956 = t1022 * t1231 - t1112 * t1226;
t1249 = pkin(8) * t956 - t1020 * t1422 + t1226 * t845;
t858 = t1076 * t1226 + t1231 * t898;
t1247 = pkin(8) * t858 + t1327 * t897;
t1217 = t1221 * t1218;
t1204 = t1227 * qJDD(1) + t1232 * t1428;
t1194 = t1357 * t1370;
t1193 = (t1219 - t1220) * t1370;
t1189 = -pkin(7) * t1204 + g(3) * t1232;
t1162 = t1357 * t1352;
t1156 = (t1362 * t1406 + t1356) * t1221;
t1153 = t1188 * t1231 - t1219 * t1352;
t1152 = (-t1220 * t1213 * qJD(1) + t1226 * t1266) * t1221;
t1143 = t1191 * t1231 - t1374;
t1142 = -t1190 * t1226 + t1375;
t1132 = (t1188 * t1222 + (qJD(1) * t1217 + t1222 * t1371) * t1406) * t1226;
t1131 = -t1217 * t1341 + (-t1362 * t1407 + t1355) * t1221 * t1366;
t1110 = t1322 + t1319;
t1109 = -t1157 * t1226 + t1160 * t1231;
t1102 = t1221 * t1160 + t1222 * t1273;
t1101 = -t1221 * t1159 + t1222 * t1272;
t1100 = -t1221 * t1158 + t1222 * t1274;
t1099 = -t1222 * t1160 + t1221 * t1273;
t1084 = -t1221 * t1156 + t1222 * t1275;
t1083 = t1222 * t1156 + t1221 * t1275;
t1081 = t1225 * t1130 - t1319;
t1079 = t1230 * t1129 - t1322;
t1078 = t1231 * t1111 + t1226 * t1244;
t1075 = -t1221 * t1193 + t1222 * t1277;
t1074 = t1221 * t1194 + t1222 * t1276;
t1073 = -t1222 * t1194 + t1221 * t1276;
t1065 = t1154 * t1225 - t1385;
t1064 = t1155 * t1230 + t1448;
t1040 = -t1227 * t1102 + t1144 * t1232;
t1039 = t1102 * t1232 + t1227 * t1144;
t1032 = t1082 * t1231 + t1344;
t1031 = t1080 * t1231 - t1344;
t1030 = -t1227 * t1084 + t1136 * t1232;
t1029 = t1084 * t1232 + t1227 * t1136;
t1028 = t1221 * t1163 + t1222 * t1278;
t1027 = -t1222 * t1163 + t1221 * t1278;
t1025 = -t1221 * t1110 + t1222 * t1458;
t1024 = -t1227 * t1074 + t1108 * t1232;
t1023 = t1074 * t1232 + t1227 * t1108;
t1019 = t1086 * t1225 + t1088 * t1230;
t994 = t1067 * t1231 - t1085 * t1226;
t993 = t1066 * t1231 - t1090 * t1226;
t981 = -t1364 + (-t1099 * t1221 - t1102 * t1222) * pkin(8);
t977 = -t1363 + (-t1083 * t1221 - t1084 * t1222) * pkin(8);
t976 = -pkin(1) * t1099 + t1221 * t1134 + t1222 * t1315;
t965 = t1021 * t1231 - t1139 * t1226;
t964 = -pkin(1) * t1083 + t1221 * t1135 + t1222 * t1316;
t959 = -t1221 * t1081 + t1222 * t1269;
t958 = -t1221 * t1079 + t1222 * t1270;
t955 = pkin(8) * t1057 * t1222 - pkin(1) * t1027;
t954 = -t1227 * t1028 + t1057 * t1232;
t953 = t1028 * t1232 + t1227 * t1057;
t941 = -pkin(1) * t1073 + t1222 * t1251;
t938 = -pkin(2) * t1088 + pkin(9) * t1059 + t1392;
t935 = -t1221 * t1065 + t1222 * t1279;
t934 = -t1221 * t1064 + t1222 * t1280;
t933 = (-t1027 * t1221 - t1028 * t1222) * pkin(8);
t931 = pkin(2) * t1086 + pkin(9) * t1050 - t1391;
t930 = (-t1073 * t1221 - t1074 * t1222) * pkin(8) - t1278;
t928 = -t1221 * t1058 + t1222 * t1281;
t927 = t1222 * t1058 + t1221 * t1281;
t918 = -t1221 * t1049 + t1222 * t1282;
t917 = t1222 * t1049 + t1221 * t1282;
t892 = -t1221 * t1019 + t1222 * t1284;
t879 = -t1221 * t1020 + t1222 * t1283;
t878 = t1222 * t1020 + t1221 * t1283;
t859 = -pkin(2) * t1076 + pkin(9) * t898;
t856 = t1127 * t1230 + t1225 * t873;
t852 = -t1227 * t928 + t1232 * t980;
t851 = t1227 * t980 + t1232 * t928;
t849 = -t1227 * t918 + t1232 * t978;
t848 = t1227 * t978 + t1232 * t918;
t838 = pkin(2) * t1112 + pkin(9) * t1022 + t898;
t831 = -t1227 * t879 + t1232 * t956;
t830 = t1227 * t956 + t1232 * t879;
t800 = -t1221 * t897 + t1222 * t1287;
t799 = t1221 * t1287 + t1222 * t897;
t797 = -t1226 * t872 + t1231 * t857;
t790 = -t1221 * t894 + t1222 * t1294;
t789 = -t1221 * t893 + t1222 * t1295;
t788 = t1221 * t1294 + t1222 * t894;
t787 = t1221 * t1295 + t1222 * t893;
t784 = t1225 * t804 + t1347;
t783 = t1225 * t803 - t1347;
t780 = -t1221 * t887 + t1222 * t1296;
t779 = -t1221 * t886 + t1222 * t1297;
t778 = t1221 * t1296 + t1222 * t887;
t777 = t1221 * t1297 + t1222 * t886;
t773 = t1225 * t835 + t1230 * t1250;
t772 = t1225 * t834 - t1230 * t884;
t766 = -t1226 * t932 + t1231 * t979 + (-t1221 * t927 - t1222 * t928) * pkin(8);
t764 = -t1226 * t929 + t1231 * t973 + (-t1221 * t917 - t1222 * t918) * pkin(8);
t756 = -pkin(1) * t927 - t1221 * t938 + t1222 * t1252;
t751 = -t1227 * t800 + t1232 * t858;
t750 = t1227 * t858 + t1232 * t800;
t749 = -pkin(1) * t917 - t1221 * t931 + t1222 * t1253;
t746 = -t1221 * t856 + t1222 * t1302;
t742 = t1020 * t1423 + t1231 * t845 + (-t1221 * t878 - t1222 * t879) * pkin(8);
t741 = -t1227 * t790 + t1232 * t840;
t740 = -t1227 * t789 + t1232 * t839;
t739 = t1227 * t840 + t1232 * t790;
t738 = t1227 * t839 + t1232 * t789;
t730 = -t1227 * t780 + t1232 * t837;
t729 = -t1227 * t779 + t1232 * t836;
t728 = t1227 * t837 + t1232 * t780;
t727 = t1227 * t836 + t1232 * t779;
t726 = -t1226 * t833 + t1231 * t775;
t725 = -t1226 * t832 + t1231 * t774;
t719 = t1026 * t1230 + t1225 * t734;
t718 = pkin(9) * t895 + t1225 * t855 + t1230 * t819 + t1524;
t717 = -t1226 * t802 + t1231 * t786;
t716 = -t1226 * t801 + t1231 * t785;
t715 = pkin(9) * t889 + t1225 * t850 + t1230 * t818 - t1489;
t712 = -pkin(1) * t878 - t1221 * t838 + t1222 * t1249;
t696 = (-t1418 + t1423) * t897 + (-t1221 * t799 - t1222 * t800) * pkin(8);
t695 = -pkin(1) * t799 - t1221 * t859 + t1222 * t1247;
t694 = t1225 * t745 + t1353 * t1475 + t1520;
t690 = -t1221 * t773 + t1222 * t1305;
t689 = -t1221 * t772 + t1222 * t1306;
t686 = -t1221 * t784 + t1222 * t1303;
t685 = -t1221 * t783 + t1222 * t1304;
t684 = -t1221 * t767 + t1222 * t1307;
t683 = t1221 * t1307 + t1222 * t767;
t681 = pkin(9) * t896 + t1225 * t758 + t1230 * t765 - t1489;
t680 = pkin(9) * t888 + t1225 * t757 + t1230 * t763 - t1524;
t678 = -t1221 * t759 + t1222 * t1308;
t677 = t1221 * t1308 + t1222 * t759;
t676 = -t1226 * t732 + t1231 * t720;
t674 = -pkin(2) * t1475 + t1225 * t707 + t1230 * t826 + t1520;
t670 = -t1221 * t747 + t1222 * t1309;
t669 = t1221 * t1309 + t1222 * t747;
t663 = pkin(9) * t748 + (-pkin(10) * t1225 + t1353) * t769;
t661 = -t1226 * t776 + t1231 * t737 + (-t1221 * t787 - t1222 * t789) * pkin(8);
t660 = -t1227 * t684 + t1232 * t722;
t659 = t1227 * t722 + t1232 * t684;
t658 = -t1226 * t771 + t1231 * t731 + (-t1221 * t778 - t1222 * t780) * pkin(8);
t655 = -t1227 * t678 + t1232 * t708;
t654 = t1227 * t708 + t1232 * t678;
t652 = -t1221 * t719 + t1222 * t1310;
t651 = -t1221 * t713 + t1222 * t1311;
t650 = t1221 * t1311 + t1222 * t713;
t648 = -t1221 * t699 + t1222 * t1312;
t647 = t1221 * t1312 + t1222 * t699;
t644 = -pkin(1) * t787 - t1221 * t718 + t1222 * t1254;
t642 = -t1227 * t670 + t1232 * t697;
t641 = t1227 * t697 + t1232 * t670;
t640 = -pkin(1) * t778 - t1221 * t715 + t1222 * t1255;
t639 = -t1226 * t723 + t1231 * t691 + (-t1221 * t788 - t1222 * t790) * pkin(8);
t638 = -t1226 * t721 + t1231 * t687 + (-t1221 * t777 - t1222 * t779) * pkin(8);
t637 = -t1226 * t711 + t1231 * t698 + t1534;
t633 = -t1226 * t693 + t1231 * t679 + t1534;
t632 = -t1221 * t694 + t1222 * t1256 - t1545;
t629 = -t1227 * t651 + t1232 * t673;
t628 = t1227 * t673 + t1232 * t651;
t627 = -pkin(1) * t788 - t1221 * t681 + t1222 * t1257;
t625 = -pkin(1) * t777 - t1221 * t680 + t1222 * t1258;
t624 = -pkin(2) * t743 + pkin(9) * t700 + t1225 * t688 + t1230 * t682;
t623 = -t1227 * t648 + t1232 * t672;
t622 = t1227 * t672 + t1232 * t648;
t620 = -pkin(2) * t827 + pkin(9) * t768 + t1225 * t664 + t1230 * t671;
t619 = -pkin(2) * t814 + pkin(9) * t760 + t1225 * t662 + t1230 * t668;
t618 = -t1221 * t674 + t1222 * t1259 - t1545;
t616 = -t1226 * t692 + t1231 * t675 + (-t1221 * t669 - t1222 * t670) * pkin(8);
t613 = -pkin(1) * t669 - t1221 * t663 + t1222 * t1260;
t610 = -pkin(2) * t733 + pkin(9) * t714 + t1225 * t617 + t1230 * t665;
t608 = -t1226 * t645 + t1231 * t626 + (-t1221 * t683 - t1222 * t684) * pkin(8);
t607 = -t1226 * t643 + t1231 * t621 + (-t1221 * t677 - t1222 * t678) * pkin(8);
t606 = -t1226 * t649 + t1231 * t636 + (-t1221 * t647 - t1222 * t648) * pkin(8);
t605 = -t1221 * t630 + t1222 * t1313;
t604 = t1221 * t1313 + t1222 * t630;
t602 = -pkin(1) * t683 - t1221 * t620 + t1222 * t1262;
t601 = -pkin(1) * t677 - t1221 * t619 + t1222 * t1263;
t600 = -pkin(1) * t647 - t1221 * t624 + t1222 * t1261;
t599 = -t1227 * t605 + t1232 * t614;
t598 = t1227 * t614 + t1232 * t605;
t597 = -t1226 * t615 + t1231 * t612 + (-t1221 * t650 - t1222 * t651) * pkin(8);
t595 = -pkin(2) * t634 + pkin(9) * t631 + t1225 * t611 + t1230 * t609;
t594 = -pkin(1) * t650 - t1221 * t610 + t1222 * t1264;
t593 = -t1226 * t603 + t1231 * t596 + (-t1221 * t604 - t1222 * t605) * pkin(8);
t592 = -pkin(1) * t604 - t1221 * t595 + t1222 * t1265;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1204, -t1205, 0, t1166, 0, 0, 0, 0, 0, 0, t1040, t1030, t1024, t954, 0, 0, 0, 0, 0, 0, t849, t852, t831, t751, 0, 0, 0, 0, 0, 0, t730, t740, t1536, t642, 0, 0, 0, 0, 0, 0, t741, t1536, t729, t623, 0, 0, 0, 0, 0, 0, t655, t660, t629, t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1205, -t1204, 0, t1165, 0, 0, 0, 0, 0, 0, t1039, t1029, t1023, t953, 0, 0, 0, 0, 0, 0, t848, t851, t830, t750, 0, 0, 0, 0, 0, 0, t728, t738, t1535, t641, 0, 0, 0, 0, 0, 0, t739, t1535, t727, t622, 0, 0, 0, 0, 0, 0, t654, t659, t628, t598; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1099, t1083, t1073, t1027, 0, 0, 0, 0, 0, 0, t917, t927, t878, t799, 0, 0, 0, 0, 0, 0, t778, t787, t1528, t669, 0, 0, 0, 0, 0, 0, t788, t1528, t777, t647, 0, 0, 0, 0, 0, 0, t677, t683, t650, t604; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1205, 0, -t1204, 0, t1325, -t1189, -t1165, -pkin(7) * t1165, -t1227 * t1132 + t1153 * t1232, -t1227 * t1075 + t1109 * t1232, -t1227 * t1100 + t1142 * t1232, -t1227 * t1131 + t1152 * t1232, -t1227 * t1101 + t1143 * t1232, t1162 * t1232 + t1227 * t1372, -pkin(7) * t1039 - t1227 * t976 + t1232 * t981, -pkin(7) * t1029 - t1227 * t964 + t1232 * t977, -pkin(7) * t1023 - t1227 * t941 + t1232 * t930, -pkin(7) * t953 - t1227 * t955 + t1232 * t933, t1032 * t1232 - t1227 * t959, -t1227 * t892 + t1232 * t965, -t1227 * t934 + t1232 * t993, t1031 * t1232 - t1227 * t958, -t1227 * t935 + t1232 * t994, -t1227 * t1025 + t1078 * t1232, -pkin(7) * t848 - t1227 * t749 + t1232 * t764, -pkin(7) * t851 - t1227 * t756 + t1232 * t766, -pkin(7) * t830 - t1227 * t712 + t1232 * t742, -pkin(7) * t750 - t1227 * t695 + t1232 * t696, t1450, -t1559, t1548, t1493, -t1560, t1494, -pkin(7) * t728 - t1227 * t640 + t1232 * t658, -pkin(7) * t738 - t1227 * t644 + t1232 * t661, -t1227 * t632 + t1232 * t637 - t1550, -pkin(7) * t641 - t1227 * t613 + t1232 * t616, t1450, t1548, t1559, t1494, t1560, t1493, -pkin(7) * t739 - t1227 * t627 + t1232 * t639, -t1227 * t618 + t1232 * t633 - t1550, -pkin(7) * t727 - t1227 * t625 + t1232 * t638, -pkin(7) * t622 - t1227 * t600 + t1232 * t606, -t1227 * t686 + t1232 * t717, -t1227 * t652 + t1232 * t676, -t1227 * t689 + t1232 * t725, -t1227 * t685 + t1232 * t716, -t1227 * t690 + t1232 * t726, -t1227 * t746 + t1232 * t797, -pkin(7) * t654 - t1227 * t601 + t1232 * t607, -pkin(7) * t659 - t1227 * t602 + t1232 * t608, -pkin(7) * t628 - t1227 * t594 + t1232 * t597, -pkin(7) * t598 - t1227 * t592 + t1232 * t593; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1204, 0, t1205, 0, t1189, t1325, t1166, pkin(7) * t1166, t1132 * t1232 + t1227 * t1153, t1075 * t1232 + t1227 * t1109, t1100 * t1232 + t1227 * t1142, t1131 * t1232 + t1227 * t1152, t1101 * t1232 + t1227 * t1143, t1227 * t1162 - t1232 * t1372, pkin(7) * t1040 + t1227 * t981 + t1232 * t976, pkin(7) * t1030 + t1227 * t977 + t1232 * t964, pkin(7) * t1024 + t1227 * t930 + t1232 * t941, pkin(7) * t954 + t1227 * t933 + t1232 * t955, t1227 * t1032 + t1232 * t959, t1227 * t965 + t1232 * t892, t1227 * t993 + t1232 * t934, t1227 * t1031 + t1232 * t958, t1227 * t994 + t1232 * t935, t1025 * t1232 + t1227 * t1078, pkin(7) * t849 + t1227 * t764 + t1232 * t749, pkin(7) * t852 + t1227 * t766 + t1232 * t756, pkin(7) * t831 + t1227 * t742 + t1232 * t712, pkin(7) * t751 + t1227 * t696 + t1232 * t695, t1451, t1557, t1547, t1490, t1558, t1491, pkin(7) * t730 + t1227 * t658 + t1232 * t640, pkin(7) * t740 + t1227 * t661 + t1232 * t644, t1227 * t637 + t1232 * t632 + t1549, pkin(7) * t642 + t1227 * t616 + t1232 * t613, t1451, t1547, -t1557, t1491, -t1558, t1490, pkin(7) * t741 + t1227 * t639 + t1232 * t627, t1227 * t633 + t1232 * t618 + t1549, pkin(7) * t729 + t1227 * t638 + t1232 * t625, pkin(7) * t623 + t1227 * t606 + t1232 * t600, t1227 * t717 + t1232 * t686, t1227 * t676 + t1232 * t652, t1227 * t725 + t1232 * t689, t1227 * t716 + t1232 * t685, t1227 * t726 + t1232 * t690, t1227 * t797 + t1232 * t746, pkin(7) * t655 + t1227 * t607 + t1232 * t601, pkin(7) * t660 + t1227 * t608 + t1232 * t602, pkin(7) * t629 + t1227 * t597 + t1232 * t594, pkin(7) * t599 + t1227 * t593 + t1232 * t592; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1207, t1208, 0, 0, (-t1218 * t1335 * t1406 + t1188 * t1221) * t1226, t1222 * t1193 + t1221 * t1277, t1222 * t1158 + t1221 * t1274, (t1355 + (-qJD(2) + t1335) * t1407) * t1218 * t1231, t1222 * t1159 + t1221 * t1272, t1222 * t1212, pkin(1) * t1102 - t1222 * t1134 + t1221 * t1315, pkin(1) * t1084 - t1222 * t1135 + t1221 * t1316, pkin(1) * t1074 + t1221 * t1251, pkin(1) * t1028 + t1057 * t1419, t1222 * t1081 + t1221 * t1269, t1222 * t1019 + t1221 * t1284, t1222 * t1064 + t1221 * t1280, t1222 * t1079 + t1221 * t1270, t1222 * t1065 + t1221 * t1279, t1222 * t1110 + t1221 * t1458, pkin(1) * t918 + t1221 * t1253 + t1222 * t931, pkin(1) * t928 + t1221 * t1252 + t1222 * t938, pkin(1) * t879 + t1221 * t1249 + t1222 * t838, pkin(1) * t800 + t1221 * t1247 + t1222 * t859, t1429, t1551, t1538, t1473, t1552, t1472, pkin(1) * t780 + t1221 * t1255 + t1222 * t715, pkin(1) * t789 + t1221 * t1254 + t1222 * t718, t1221 * t1256 + t1222 * t694 + t1546, pkin(1) * t670 + t1221 * t1260 + t1222 * t663, t1429, t1538, -t1551, t1472, -t1552, t1473, pkin(1) * t790 + t1221 * t1257 + t1222 * t681, t1221 * t1259 + t1222 * t674 + t1546, pkin(1) * t779 + t1221 * t1258 + t1222 * t680, pkin(1) * t648 + t1221 * t1261 + t1222 * t624, t1221 * t1303 + t1222 * t784, t1221 * t1310 + t1222 * t719, t1221 * t1306 + t1222 * t772, t1221 * t1304 + t1222 * t783, t1221 * t1305 + t1222 * t773, t1221 * t1302 + t1222 * t856, pkin(1) * t678 + t1221 * t1263 + t1222 * t619, pkin(1) * t684 + t1221 * t1262 + t1222 * t620, pkin(1) * t651 + t1221 * t1264 + t1222 * t610, pkin(1) * t605 + t1221 * t1265 + t1222 * t595;];
tauB_reg  = t1;
