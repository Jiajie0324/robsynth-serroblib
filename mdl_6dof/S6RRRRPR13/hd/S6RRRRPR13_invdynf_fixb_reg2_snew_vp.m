% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 01:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR13_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR13_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 01:40:46
% EndTime: 2019-05-08 01:41:01
% DurationCPUTime: 15.85s
% Computational Cost: add. (71994->364), mult. (153221->493), div. (0->0), fcn. (123035->12), ass. (0->280)
t2834 = cos(pkin(6));
t2828 = qJD(1) * t2834 + qJD(2);
t2837 = sin(qJ(3));
t2842 = cos(qJ(3));
t2833 = sin(pkin(6));
t2838 = sin(qJ(2));
t2899 = t2833 * t2838;
t2891 = qJD(1) * t2899;
t2802 = t2828 * t2837 + t2842 * t2891;
t2843 = cos(qJ(2));
t2898 = t2833 * t2843;
t2890 = qJD(1) * t2898;
t2893 = qJDD(1) * t2833;
t2809 = qJD(2) * t2890 + t2838 * t2893;
t2827 = t2834 * qJDD(1) + qJDD(2);
t2884 = t2837 * t2809 - t2842 * t2827;
t2766 = qJD(3) * t2802 + qJDD(4) + t2884;
t2819 = -qJD(3) + t2890;
t2836 = sin(qJ(4));
t2841 = cos(qJ(4));
t2780 = t2836 * t2802 + t2819 * t2841;
t2782 = t2802 * t2841 - t2819 * t2836;
t2903 = t2780 * t2782;
t2714 = t2766 + t2903;
t2779 = t2782 ^ 2;
t2800 = -t2842 * t2828 + t2837 * t2891;
t2798 = qJD(4) + t2800;
t2916 = t2798 ^ 2;
t2924 = -t2779 - t2916;
t2690 = t2714 * t2841 + t2836 * t2924;
t2860 = -t2842 * t2809 - t2837 * t2827;
t2767 = -qJD(3) * t2800 - t2860;
t2822 = qJD(2) * t2891;
t2892 = qJDD(1) * t2843;
t2881 = t2833 * t2892 - t2822;
t2859 = qJDD(3) - t2881;
t2854 = -t2841 * t2767 - t2836 * t2859;
t2851 = -t2780 * qJD(4) - t2854;
t2902 = t2780 * t2798;
t2850 = t2851 - t2902;
t2659 = t2690 * t2837 + t2842 * t2850;
t2661 = t2690 * t2842 - t2837 * t2850;
t2688 = t2714 * t2836 - t2841 * t2924;
t2872 = t2661 * t2838 - t2688 * t2843;
t2620 = -t2833 * t2659 + t2834 * t2872;
t2642 = t2661 * t2843 + t2688 * t2838;
t2839 = sin(qJ(1));
t2844 = cos(qJ(1));
t2957 = t2620 * t2839 - t2642 * t2844;
t2956 = t2620 * t2844 + t2642 * t2839;
t2618 = t2834 * t2659 + t2833 * t2872;
t2707 = t2851 + t2902;
t2887 = t2836 * t2767 - t2841 * t2859;
t2896 = qJD(4) - t2798;
t2857 = -t2782 * t2896 - t2887;
t2922 = -t2707 * t2841 + t2836 * t2857;
t2918 = t2780 ^ 2;
t2725 = t2779 + t2918;
t2921 = t2707 * t2836 + t2841 * t2857;
t2935 = -t2725 * t2837 + t2842 * t2921;
t2940 = t2838 * t2922 + t2843 * t2935;
t2934 = t2725 * t2842 + t2837 * t2921;
t2941 = t2838 * t2935 - t2843 * t2922;
t2946 = -t2833 * t2934 + t2834 * t2941;
t2951 = -t2839 * t2946 + t2844 * t2940;
t2950 = t2839 * t2940 + t2844 * t2946;
t2947 = t2833 * t2941 + t2834 * t2934;
t2888 = -t2766 + t2903;
t2923 = -t2916 - t2918;
t2928 = t2888 * t2836 + t2841 * t2923;
t2939 = t2837 * t2928;
t2929 = t2836 * t2923 - t2888 * t2841;
t2938 = t2838 * t2929;
t2937 = t2842 * t2928;
t2936 = t2843 * t2929;
t2794 = -qJD(6) + t2798;
t2925 = qJD(6) - t2794;
t2835 = sin(qJ(6));
t2840 = cos(qJ(6));
t2748 = -t2840 * t2780 + t2782 * t2835;
t2920 = t2748 ^ 2;
t2750 = t2780 * t2835 + t2782 * t2840;
t2919 = t2750 ^ 2;
t2917 = t2794 ^ 2;
t2915 = t2800 ^ 2;
t2914 = t2802 ^ 2;
t2913 = t2819 ^ 2;
t2912 = t2828 ^ 2;
t2911 = t2834 * g(3);
t2910 = qJD(1) * t2838;
t2909 = qJD(1) * t2843;
t2904 = t2748 * t2750;
t2901 = t2800 * t2802;
t2845 = qJD(1) ^ 2;
t2900 = t2833 ^ 2 * t2845;
t2897 = qJD(3) + t2819;
t2895 = qJD(6) + t2794;
t2808 = (-pkin(2) * t2843 - pkin(9) * t2838) * t2833 * qJD(1);
t2821 = -g(1) * t2844 - g(2) * t2839;
t2805 = -pkin(1) * t2845 + pkin(8) * t2893 + t2821;
t2820 = t2839 * g(1) - t2844 * g(2);
t2855 = t2845 * t2833 * pkin(8) + qJDD(1) * pkin(1) + t2820;
t2852 = t2834 * t2855;
t2894 = t2843 * t2805 + t2838 * t2852;
t2739 = -t2912 * pkin(2) + t2827 * pkin(9) + (-g(3) * t2838 + t2808 * t2909) * t2833 + t2894;
t2846 = t2822 * pkin(2) - t2809 * pkin(9) - t2911 + (-t2828 * pkin(9) * t2909 + (t2828 * t2910 - t2892) * pkin(2) - t2855) * t2833;
t2701 = t2842 * t2739 + t2837 * t2846;
t2772 = pkin(3) * t2800 - pkin(10) * t2802;
t2683 = -pkin(3) * t2913 + pkin(10) * t2859 - t2800 * t2772 + t2701;
t2885 = t2838 * t2805 - t2843 * t2852;
t2738 = -t2827 * pkin(2) - t2912 * pkin(9) + (g(3) * t2843 + t2808 * t2910) * t2833 + t2885;
t2742 = (qJD(3) - t2819) * t2802 + t2884;
t2886 = -t2800 * t2819 - t2767;
t2847 = pkin(3) * t2742 + pkin(10) * t2886 + t2738;
t2647 = t2841 * t2683 + t2836 * t2847;
t2889 = pkin(4) * t2798 - (2 * qJD(5));
t2646 = -t2836 * t2683 + t2841 * t2847;
t2700 = -t2837 * t2739 + t2842 * t2846;
t2883 = t2828 * t2890;
t2882 = -pkin(5) * t2798 - pkin(11) * t2782;
t2753 = pkin(4) * t2780 - qJ(5) * t2782;
t2638 = -t2766 * pkin(4) - qJ(5) * t2916 + t2782 * t2753 + qJDD(5) - t2646;
t2622 = (t2780 * t2896 + t2854) * pkin(11) + t2888 * pkin(5) + t2638;
t2637 = -pkin(4) * t2916 + t2766 * qJ(5) + 0.2e1 * qJD(5) * t2798 - t2780 * t2753 + t2647;
t2858 = qJD(4) * t2782 + t2887;
t2627 = -pkin(5) * t2918 + pkin(11) * t2858 + t2798 * t2882 + t2637;
t2597 = t2622 * t2840 - t2627 * t2835;
t2598 = t2622 * t2835 + t2627 * t2840;
t2583 = t2597 * t2840 + t2598 * t2835;
t2584 = -t2597 * t2835 + t2598 * t2840;
t2578 = t2583 * t2836 + t2584 * t2841;
t2682 = -t2859 * pkin(3) - t2913 * pkin(10) + t2802 * t2772 - t2700;
t2853 = t2858 * pkin(4) - qJ(5) * t2850 + t2682;
t2628 = t2887 * pkin(5) + t2918 * pkin(11) + t2853 + (pkin(5) * qJD(4) - t2882 + t2889) * t2782;
t2576 = t2578 * t2842 + t2628 * t2837;
t2577 = -t2583 * t2841 + t2584 * t2836;
t2880 = t2576 * t2838 - t2577 * t2843;
t2605 = t2637 * t2841 + t2638 * t2836;
t2641 = t2889 * t2782 + t2853;
t2595 = t2605 * t2842 + t2641 * t2837;
t2604 = t2637 * t2836 - t2638 * t2841;
t2879 = t2595 * t2838 - t2604 * t2843;
t2849 = -t2835 * t2851 + t2840 * t2858;
t2656 = -t2750 * t2895 + t2849;
t2848 = -t2835 * t2858 - t2840 * t2851;
t2658 = t2748 * t2895 + t2848;
t2631 = t2656 * t2835 + t2658 * t2840;
t2632 = t2656 * t2840 - t2658 * t2835;
t2603 = t2631 * t2836 + t2632 * t2841;
t2687 = -t2919 - t2920;
t2600 = t2603 * t2842 - t2687 * t2837;
t2602 = -t2631 * t2841 + t2632 * t2836;
t2878 = t2600 * t2838 - t2602 * t2843;
t2617 = -t2646 * t2836 + t2647 * t2841;
t2607 = t2617 * t2842 + t2682 * t2837;
t2616 = t2646 * t2841 + t2647 * t2836;
t2877 = t2607 * t2838 - t2616 * t2843;
t2856 = qJDD(6) - t2766;
t2697 = t2856 - t2904;
t2702 = -t2917 - t2920;
t2663 = t2697 * t2840 + t2702 * t2835;
t2664 = -t2697 * t2835 + t2702 * t2840;
t2636 = t2663 * t2836 + t2664 * t2841;
t2655 = t2750 * t2925 - t2849;
t2613 = t2636 * t2842 - t2655 * t2837;
t2635 = -t2663 * t2841 + t2664 * t2836;
t2876 = t2613 * t2838 - t2635 * t2843;
t2696 = -t2856 - t2904;
t2717 = -t2917 - t2919;
t2675 = t2696 * t2835 + t2717 * t2840;
t2676 = t2696 * t2840 - t2717 * t2835;
t2640 = t2675 * t2836 + t2676 * t2841;
t2657 = -t2748 * t2925 - t2848;
t2615 = t2640 * t2842 - t2657 * t2837;
t2639 = -t2675 * t2841 + t2676 * t2836;
t2875 = t2615 * t2838 - t2639 * t2843;
t2703 = (qJD(4) + t2798) * t2782 + t2887;
t2662 = t2703 * t2837 + t2937;
t2871 = t2662 * t2838 - t2936;
t2704 = t2798 * t2782 + t2858;
t2668 = t2704 * t2837 + t2937;
t2869 = t2668 * t2838 - t2936;
t2670 = -t2700 * t2837 + t2701 * t2842;
t2868 = t2670 * t2838 - t2738 * t2843;
t2743 = -t2802 * t2897 - t2884;
t2745 = t2800 * t2897 + t2860;
t2711 = t2743 * t2842 - t2745 * t2837;
t2756 = -t2914 - t2915;
t2867 = t2711 * t2838 - t2756 * t2843;
t2759 = t2859 - t2901;
t2768 = -t2913 - t2915;
t2721 = -t2759 * t2837 + t2768 * t2842;
t2866 = t2721 * t2838 - t2742 * t2843;
t2758 = -t2859 - t2901;
t2774 = -t2913 - t2914;
t2728 = t2758 * t2842 - t2774 * t2837;
t2865 = t2728 * t2838 + t2843 * t2886;
t2769 = -g(3) * t2898 - t2885;
t2770 = -g(3) * t2899 + t2894;
t2864 = t2769 * t2843 + t2770 * t2838;
t2784 = t2883 - t2809;
t2812 = t2828 * t2891;
t2785 = t2812 + t2881;
t2863 = t2784 * t2843 + t2785 * t2838;
t2831 = t2838 ^ 2;
t2797 = -t2831 * t2900 - t2912;
t2818 = t2843 * t2838 * t2900;
t2807 = t2818 - t2827;
t2862 = t2797 * t2843 + t2807 * t2838;
t2806 = t2818 + t2827;
t2832 = t2843 ^ 2;
t2810 = -t2832 * t2900 - t2912;
t2861 = t2806 * t2843 + t2810 * t2838;
t2817 = -qJDD(1) * t2839 - t2844 * t2845;
t2816 = qJDD(1) * t2844 - t2839 * t2845;
t2811 = (-t2831 - t2832) * t2900;
t2788 = -t2833 * t2855 - t2911;
t2786 = t2812 - t2881;
t2783 = t2883 + t2809;
t2776 = -t2806 * t2838 + t2810 * t2843;
t2771 = -t2797 * t2838 + t2807 * t2843;
t2755 = -t2784 * t2838 + t2785 * t2843;
t2752 = -t2833 * t2786 + t2834 * t2861;
t2751 = t2834 * t2786 + t2833 * t2861;
t2741 = -t2833 * t2783 + t2834 * t2862;
t2740 = t2834 * t2783 + t2833 * t2862;
t2737 = -t2833 * t2811 + t2834 * t2863;
t2736 = t2834 * t2811 + t2833 * t2863;
t2727 = t2758 * t2837 + t2774 * t2842;
t2726 = -t2769 * t2838 + t2770 * t2843;
t2720 = t2759 * t2842 + t2768 * t2837;
t2713 = -t2833 * t2788 + t2834 * t2864;
t2712 = t2834 * t2788 + t2833 * t2864;
t2710 = t2743 * t2837 + t2745 * t2842;
t2699 = t2728 * t2843 - t2838 * t2886;
t2698 = t2721 * t2843 + t2742 * t2838;
t2686 = t2711 * t2843 + t2756 * t2838;
t2680 = -t2833 * t2727 + t2834 * t2865;
t2679 = t2834 * t2727 + t2833 * t2865;
t2678 = -t2833 * t2720 + t2834 * t2866;
t2677 = t2834 * t2720 + t2833 * t2866;
t2669 = t2700 * t2842 + t2701 * t2837;
t2666 = -t2704 * t2842 + t2939;
t2660 = -t2703 * t2842 + t2939;
t2654 = -t2833 * t2710 + t2834 * t2867;
t2653 = t2834 * t2710 + t2833 * t2867;
t2648 = t2670 * t2843 + t2738 * t2838;
t2645 = t2668 * t2843 + t2938;
t2643 = t2662 * t2843 + t2938;
t2630 = -t2833 * t2669 + t2834 * t2868;
t2629 = t2834 * t2669 + t2833 * t2868;
t2626 = -t2833 * t2666 + t2834 * t2869;
t2624 = t2834 * t2666 + t2833 * t2869;
t2621 = -t2833 * t2660 + t2834 * t2871;
t2619 = t2834 * t2660 + t2833 * t2871;
t2614 = t2640 * t2837 + t2657 * t2842;
t2612 = t2636 * t2837 + t2655 * t2842;
t2606 = t2617 * t2837 - t2682 * t2842;
t2601 = t2615 * t2843 + t2639 * t2838;
t2599 = t2603 * t2837 + t2687 * t2842;
t2596 = t2613 * t2843 + t2635 * t2838;
t2594 = t2605 * t2837 - t2641 * t2842;
t2593 = t2607 * t2843 + t2616 * t2838;
t2592 = -t2833 * t2614 + t2834 * t2875;
t2591 = t2834 * t2614 + t2833 * t2875;
t2590 = -t2833 * t2612 + t2834 * t2876;
t2589 = t2834 * t2612 + t2833 * t2876;
t2588 = t2600 * t2843 + t2602 * t2838;
t2587 = t2595 * t2843 + t2604 * t2838;
t2586 = -t2833 * t2606 + t2834 * t2877;
t2585 = t2834 * t2606 + t2833 * t2877;
t2582 = -t2833 * t2599 + t2834 * t2878;
t2581 = t2834 * t2599 + t2833 * t2878;
t2580 = -t2833 * t2594 + t2834 * t2879;
t2579 = t2834 * t2594 + t2833 * t2879;
t2575 = t2578 * t2837 - t2628 * t2842;
t2574 = t2576 * t2843 + t2577 * t2838;
t2573 = -t2833 * t2575 + t2834 * t2880;
t2572 = t2834 * t2575 + t2833 * t2880;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2817, -t2816, 0, -t2820 * t2839 + t2821 * t2844, 0, 0, 0, 0, 0, 0, -t2752 * t2839 + t2776 * t2844, -t2741 * t2839 + t2771 * t2844, -t2737 * t2839 + t2755 * t2844, -t2713 * t2839 + t2726 * t2844, 0, 0, 0, 0, 0, 0, -t2678 * t2839 + t2698 * t2844, -t2680 * t2839 + t2699 * t2844, -t2654 * t2839 + t2686 * t2844, -t2630 * t2839 + t2648 * t2844, 0, 0, 0, 0, 0, 0, -t2621 * t2839 + t2643 * t2844, t2957, t2951, -t2586 * t2839 + t2593 * t2844, 0, 0, 0, 0, 0, 0, -t2626 * t2839 + t2645 * t2844, t2951, -t2957, -t2580 * t2839 + t2587 * t2844, 0, 0, 0, 0, 0, 0, -t2590 * t2839 + t2596 * t2844, -t2592 * t2839 + t2601 * t2844, -t2582 * t2839 + t2588 * t2844, -t2573 * t2839 + t2574 * t2844; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2816, t2817, 0, t2820 * t2844 + t2821 * t2839, 0, 0, 0, 0, 0, 0, t2752 * t2844 + t2776 * t2839, t2741 * t2844 + t2771 * t2839, t2737 * t2844 + t2755 * t2839, t2713 * t2844 + t2726 * t2839, 0, 0, 0, 0, 0, 0, t2678 * t2844 + t2698 * t2839, t2680 * t2844 + t2699 * t2839, t2654 * t2844 + t2686 * t2839, t2630 * t2844 + t2648 * t2839, 0, 0, 0, 0, 0, 0, t2621 * t2844 + t2643 * t2839, -t2956, t2950, t2586 * t2844 + t2593 * t2839, 0, 0, 0, 0, 0, 0, t2626 * t2844 + t2645 * t2839, t2950, t2956, t2580 * t2844 + t2587 * t2839, 0, 0, 0, 0, 0, 0, t2590 * t2844 + t2596 * t2839, t2592 * t2844 + t2601 * t2839, t2582 * t2844 + t2588 * t2839, t2573 * t2844 + t2574 * t2839; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2751, t2740, t2736, t2712, 0, 0, 0, 0, 0, 0, t2677, t2679, t2653, t2629, 0, 0, 0, 0, 0, 0, t2619, -t2618, t2947, t2585, 0, 0, 0, 0, 0, 0, t2624, t2947, t2618, t2579, 0, 0, 0, 0, 0, 0, t2589, t2591, t2581, t2572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2845, -qJDD(1), 0, t2821, 0, 0, 0, 0, 0, 0, t2776, t2771, t2755, t2726, 0, 0, 0, 0, 0, 0, t2698, t2699, t2686, t2648, 0, 0, 0, 0, 0, 0, t2643, -t2642, t2940, t2593, 0, 0, 0, 0, 0, 0, t2645, t2940, t2642, t2587, 0, 0, 0, 0, 0, 0, t2596, t2601, t2588, t2574; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2845, 0, t2820, 0, 0, 0, 0, 0, 0, t2752, t2741, t2737, t2713, 0, 0, 0, 0, 0, 0, t2678, t2680, t2654, t2630, 0, 0, 0, 0, 0, 0, t2621, -t2620, t2946, t2586, 0, 0, 0, 0, 0, 0, t2626, t2946, t2620, t2580, 0, 0, 0, 0, 0, 0, t2590, t2592, t2582, t2573; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2751, t2740, t2736, t2712, 0, 0, 0, 0, 0, 0, t2677, t2679, t2653, t2629, 0, 0, 0, 0, 0, 0, t2619, -t2618, t2947, t2585, 0, 0, 0, 0, 0, 0, t2624, t2947, t2618, t2579, 0, 0, 0, 0, 0, 0, t2589, t2591, t2581, t2572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2810, t2807, t2785, t2770, 0, 0, 0, 0, 0, 0, t2721, t2728, t2711, t2670, 0, 0, 0, 0, 0, 0, t2662, -t2661, t2935, t2607, 0, 0, 0, 0, 0, 0, t2668, t2935, t2661, t2595, 0, 0, 0, 0, 0, 0, t2613, t2615, t2600, t2576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2806, t2797, t2784, t2769, 0, 0, 0, 0, 0, 0, -t2742, t2886, -t2756, -t2738, 0, 0, 0, 0, 0, 0, -t2929, t2688, -t2922, -t2616, 0, 0, 0, 0, 0, 0, -t2929, -t2922, -t2688, -t2604, 0, 0, 0, 0, 0, 0, -t2635, -t2639, -t2602, -t2577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2786, t2783, t2811, t2788, 0, 0, 0, 0, 0, 0, t2720, t2727, t2710, t2669, 0, 0, 0, 0, 0, 0, t2660, -t2659, t2934, t2606, 0, 0, 0, 0, 0, 0, t2666, t2934, t2659, t2594, 0, 0, 0, 0, 0, 0, t2612, t2614, t2599, t2575; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2768, t2758, t2743, t2701, 0, 0, 0, 0, 0, 0, t2928, -t2690, t2921, t2617, 0, 0, 0, 0, 0, 0, t2928, t2921, t2690, t2605, 0, 0, 0, 0, 0, 0, t2636, t2640, t2603, t2578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2759, t2774, t2745, t2700, 0, 0, 0, 0, 0, 0, -t2703, -t2850, t2725, -t2682, 0, 0, 0, 0, 0, 0, -t2704, t2725, t2850, -t2641, 0, 0, 0, 0, 0, 0, t2655, t2657, t2687, -t2628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2742, -t2886, t2756, t2738, 0, 0, 0, 0, 0, 0, t2929, -t2688, t2922, t2616, 0, 0, 0, 0, 0, 0, t2929, t2922, t2688, t2604, 0, 0, 0, 0, 0, 0, t2635, t2639, t2602, t2577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2923, -t2714, t2857, t2647, 0, 0, 0, 0, 0, 0, t2923, t2857, t2714, t2637, 0, 0, 0, 0, 0, 0, t2664, t2676, t2632, t2584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2888, t2924, -t2707, t2646, 0, 0, 0, 0, 0, 0, -t2888, -t2707, -t2924, -t2638, 0, 0, 0, 0, 0, 0, -t2663, -t2675, -t2631, -t2583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, t2850, -t2725, t2682, 0, 0, 0, 0, 0, 0, t2704, -t2725, -t2850, t2641, 0, 0, 0, 0, 0, 0, -t2655, -t2657, -t2687, t2628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2923, t2857, t2714, t2637, 0, 0, 0, 0, 0, 0, t2664, t2676, t2632, t2584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2704, -t2725, -t2850, t2641, 0, 0, 0, 0, 0, 0, -t2655, -t2657, -t2687, t2628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2888, t2707, t2924, t2638, 0, 0, 0, 0, 0, 0, t2663, t2675, t2631, t2583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2702, t2696, t2656, t2598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2697, t2717, t2658, t2597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2655, t2657, t2687, -t2628;];
f_new_reg  = t1;
