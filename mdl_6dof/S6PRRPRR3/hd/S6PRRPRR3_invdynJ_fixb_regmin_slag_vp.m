% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6PRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x27]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR3_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR3_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR3_invdynJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:07:47
% EndTime: 2019-03-08 22:08:09
% DurationCPUTime: 10.24s
% Computational Cost: add. (7579->581), mult. (21575->868), div. (0->0), fcn. (19066->16), ass. (0->300)
t231 = cos(pkin(7));
t239 = cos(qJ(3));
t355 = t231 * t239;
t216 = pkin(2) * t355;
t228 = sin(pkin(6));
t240 = cos(qJ(2));
t347 = t239 * t240;
t235 = sin(qJ(3));
t236 = sin(qJ(2));
t352 = t235 * t236;
t266 = -t231 * t352 + t347;
t253 = t266 * t228;
t409 = -qJD(1) * t253 + qJD(3) * t216;
t227 = sin(pkin(7));
t395 = -pkin(9) - qJ(4);
t311 = t395 * t235;
t408 = (qJD(3) * t311 + qJD(4) * t239) * t227 + t409;
t350 = t236 * t239;
t351 = t235 * t240;
t268 = -t231 * t350 - t351;
t254 = t228 * t268;
t163 = qJD(1) * t254;
t356 = t231 * t235;
t215 = pkin(2) * t356;
t312 = t395 * t227;
t364 = t227 * t235;
t407 = -qJD(4) * t364 + (t239 * t312 - t215) * qJD(3) - t163;
t225 = sin(pkin(13));
t229 = cos(pkin(13));
t380 = t407 * t225 + t229 * t408;
t276 = t225 * t239 + t229 * t235;
t257 = t276 * qJD(3);
t171 = t227 * t257;
t348 = t239 * t229;
t191 = t225 * t235 - t348;
t172 = t191 * t227 * qJD(3);
t335 = qJD(3) * t235;
t316 = t227 * t335;
t359 = t228 * t236;
t319 = qJD(1) * t359;
t406 = pkin(3) * t316 + pkin(4) * t171 + pkin(10) * t172 - t227 * t319;
t340 = qJD(1) * t240;
t165 = pkin(9) * qJDD(2) * t227 + (qJD(2) * t340 + qJDD(1) * t236) * t228;
t392 = qJD(2) * pkin(2);
t197 = t228 * t340 + t392;
t336 = qJD(3) * t231;
t405 = t197 * t336 + t165;
t339 = qJD(2) * t227;
t318 = t235 * t339;
t321 = t227 * t348;
t170 = qJD(2) * t321 - t225 * t318;
t167 = qJD(5) - t170;
t258 = qJD(2) * t276;
t173 = t227 * t258;
t238 = cos(qJ(5));
t338 = qJD(2) * t231;
t298 = qJD(3) + t338;
t205 = t238 * t298;
t234 = sin(qJ(5));
t136 = t173 * t234 - t205;
t135 = qJD(6) + t136;
t233 = sin(qJ(6));
t237 = cos(qJ(6));
t250 = -t238 * t173 - t234 * t298;
t86 = -t237 * t167 - t233 * t250;
t404 = t167 * t86;
t177 = t225 * t364 - t321;
t178 = t276 * t227;
t221 = pkin(3) * t239 + pkin(2);
t120 = pkin(4) * t177 - pkin(10) * t178 - t221 * t227;
t331 = qJD(5) * t238;
t332 = qJD(5) * t234;
t153 = pkin(3) * t231 + t227 * t311 + t216;
t362 = t227 * t239;
t343 = pkin(9) * t362 + t215;
t168 = qJ(4) * t362 + t343;
t110 = t225 * t153 + t229 * t168;
t96 = pkin(10) * t231 + t110;
t403 = -t120 * t331 - t406 * t234 - t238 * t380 + t332 * t96;
t402 = -t234 * t380 + t406 * t238;
t381 = t225 * t408 - t407 * t229;
t401 = t234 * t120 + t238 * t96;
t372 = t170 * t238;
t122 = t173 * t233 + t237 * t372;
t330 = qJD(6) * t233;
t251 = -t234 * t330 + t237 * t331 - t122;
t400 = t251 * t135;
t232 = cos(pkin(6));
t358 = t228 * t240;
t184 = -t227 * t358 + t231 * t232;
t176 = t184 * t238;
t269 = t231 * t347 - t352;
t144 = t228 * t269 + t232 * t362;
t267 = t231 * t351 + t350;
t145 = t228 * t267 + t232 * t364;
t81 = t144 * t225 + t145 * t229;
t399 = -t234 * t81 + t176;
t323 = t239 * qJDD(2);
t306 = t227 * t323;
t200 = t229 * t306;
t324 = t235 * qJDD(2);
t307 = t225 * t324;
t129 = qJDD(5) - t200 + (qJD(2) * t257 + t307) * t227;
t328 = qJD(2) * qJD(3);
t310 = t235 * t328;
t291 = t227 * t310;
t309 = t239 * t328;
t131 = -t225 * t291 + (qJDD(2) * t276 + t229 * t309) * t227;
t325 = qJDD(2) * t231;
t213 = qJDD(3) + t325;
t57 = qJD(5) * t205 + t238 * t131 - t173 * t332 + t234 * t213;
t88 = t167 * t233 - t237 * t250;
t23 = qJD(6) * t88 - t237 * t129 + t233 * t57;
t226 = sin(pkin(12));
t230 = cos(pkin(12));
t353 = t232 * t240;
t185 = -t226 * t236 + t230 * t353;
t360 = t228 * t231;
t147 = -t185 * t227 - t230 * t360;
t187 = -t226 * t353 - t230 * t236;
t148 = -t187 * t227 + t226 * t360;
t180 = t276 * t231;
t245 = t178 * t232 + (t180 * t240 - t191 * t236) * t228;
t354 = t232 * t236;
t188 = -t226 * t354 + t230 * t240;
t366 = t226 * t228;
t247 = t178 * t366 + t180 * t187 - t188 * t191;
t186 = t226 * t240 + t230 * t354;
t361 = t228 * t230;
t248 = -t178 * t361 + t180 * t185 - t186 * t191;
t264 = g(1) * (t148 * t238 - t234 * t247) + g(2) * (t147 * t238 - t234 * t248) + g(3) * (-t234 * t245 + t176);
t190 = pkin(9) * t339 + t319;
t337 = qJD(2) * t239;
t341 = qJD(1) * t232;
t119 = t197 * t356 + t190 * t239 + (qJ(4) * t337 + t235 * t341) * t227;
t357 = t229 * t119;
t284 = -qJ(4) * t339 - t190;
t320 = t227 * t341;
t203 = t239 * t320;
t344 = t197 * t355 + t203;
t118 = t235 * t284 + t344;
t94 = pkin(3) * t298 + t118;
t48 = t225 * t94 + t357;
t42 = pkin(10) * t298 + t48;
t211 = t231 * t341;
t142 = qJD(4) + t211 + (-pkin(3) * t337 - t197) * t227;
t72 = -pkin(4) * t170 - pkin(10) * t173 + t142;
t21 = t234 * t72 + t238 * t42;
t327 = qJD(2) * qJD(4);
t334 = qJD(3) * t239;
t212 = qJDD(1) * t358;
t317 = qJD(2) * t359;
t292 = qJD(1) * t317;
t175 = qJDD(2) * pkin(2) + t212 - t292;
t326 = qJDD(1) * t232;
t308 = t227 * t326;
t345 = t175 * t355 + t239 * t308;
t30 = pkin(3) * t213 + t284 * t334 + ((-qJ(4) * qJDD(2) - qJD(3) * t341 - t327) * t227 - t405) * t235 + t345;
t280 = qJD(3) * t203 + t175 * t356 + t235 * t308 + t239 * t405;
t246 = -t190 * t335 + t280;
t259 = t310 - t323;
t38 = (-qJ(4) * t259 + t239 * t327) * t227 + t246;
t13 = t225 * t30 + t229 * t38;
t11 = pkin(10) * t213 + t13;
t210 = t231 * t326;
t123 = qJDD(4) + pkin(3) * t291 + t210 + (-pkin(3) * t323 - t175) * t227;
t130 = t200 + (-qJD(3) * t258 - t307) * t227;
t33 = -pkin(4) * t130 - pkin(10) * t131 + t123;
t304 = t11 * t234 - t238 * t33;
t4 = -pkin(5) * t129 + qJD(5) * t21 + t304;
t398 = t135 * (-pkin(5) * t250 + pkin(11) * t135) + t264 + t4;
t220 = -pkin(3) * t229 - pkin(4);
t189 = -pkin(5) * t238 - pkin(11) * t234 + t220;
t53 = t118 * t225 + t357;
t58 = -qJD(5) * t250 + t234 * t131 - t238 * t213;
t56 = qJDD(6) + t58;
t397 = t135 * (-t53 + t167 * (pkin(5) * t234 - pkin(11) * t238)) + t189 * t56;
t17 = pkin(11) * t167 + t21;
t101 = t225 * t119;
t47 = t229 * t94 - t101;
t41 = -pkin(4) * t298 - t47;
t24 = t136 * pkin(5) + pkin(11) * t250 + t41;
t283 = t17 * t233 - t237 * t24;
t273 = t238 * t11 + t234 * t33 + t72 * t331 - t332 * t42;
t3 = pkin(11) * t129 + t273;
t12 = -t225 * t38 + t229 * t30;
t10 = -pkin(4) * t213 - t12;
t6 = pkin(5) * t58 - pkin(11) * t57 + t10;
t1 = -t283 * qJD(6) + t233 * t6 + t237 * t3;
t396 = g(1) * (t187 * t231 + t227 * t366) - g(2) * (-t185 * t231 + t227 * t361);
t241 = qJD(2) ^ 2;
t394 = -pkin(5) * t171 + qJD(5) * t401 - t402;
t114 = pkin(3) * t318 + pkin(4) * t173 - pkin(10) * t170;
t54 = t118 * t229 - t101;
t393 = t234 * t114 + t238 * t54;
t391 = t135 * t86;
t390 = t135 * t88;
t389 = t170 * t88;
t329 = qJD(6) * t237;
t22 = t233 * t129 + t167 * t329 + t237 * t57 + t250 * t330;
t387 = t22 * t233;
t386 = t23 * t238;
t385 = t233 * t56;
t383 = t237 * t56;
t378 = t129 * t234;
t377 = t136 * t167;
t376 = t136 * t173;
t375 = t250 * t167;
t374 = t250 * t173;
t373 = t167 * t234;
t371 = t184 * t227;
t370 = t184 * t234;
t219 = pkin(3) * t225 + pkin(10);
t369 = t219 * t233;
t368 = t219 * t237;
t222 = t227 ^ 2;
t367 = t222 * t241;
t365 = t227 * t234;
t363 = t227 * t238;
t349 = t236 * t241;
t346 = qJDD(1) - g(3);
t223 = t235 ^ 2;
t342 = -t239 ^ 2 + t223;
t333 = qJD(5) * t219;
t322 = t227 * t359;
t315 = t227 * t334;
t314 = t227 * t231 * t241;
t303 = -t22 * t238 + t88 * t332;
t109 = t153 * t229 - t225 * t168;
t300 = t167 * t238;
t299 = t135 * t237;
t297 = qJD(3) + 0.2e1 * t338;
t296 = t213 + t325;
t295 = t222 * t228 * t349;
t293 = t227 * t317;
t149 = t178 * t234 - t238 * t231;
t150 = t178 * t238 + t231 * t234;
t95 = -pkin(4) * t231 - t109;
t51 = pkin(5) * t149 - pkin(11) * t150 + t95;
t290 = -pkin(11) * t171 - qJD(6) * t51 + t403;
t107 = -qJD(5) * t149 - t172 * t238;
t108 = qJD(5) * t150 - t172 * t234;
t40 = pkin(11) * t177 + t401;
t289 = -pkin(5) * t108 + pkin(11) * t107 + qJD(6) * t40 - t381;
t287 = -g(1) * t187 - g(2) * t185;
t286 = g(1) * t188 + g(2) * t186;
t8 = t17 * t237 + t233 * t24;
t62 = t238 * t81 + t370;
t80 = -t229 * t144 + t145 * t225;
t282 = t233 * t80 + t237 * t62;
t281 = -t233 * t62 + t237 * t80;
t20 = -t234 * t42 + t238 * t72;
t278 = t120 * t238 - t234 * t96;
t117 = t150 * t237 + t177 * t233;
t116 = t150 * t233 - t237 * t177;
t275 = -t165 + t286;
t274 = t238 * t129 - t167 * t332 + t170 * t373;
t272 = -t135 * t329 - t385;
t121 = -t237 * t173 + t233 * t372;
t265 = (-t233 * t331 + t121) * t135;
t179 = t191 * t231;
t64 = t177 * t361 - t179 * t185 - t186 * t276;
t67 = -t177 * t366 - t179 * t187 - t188 * t276;
t83 = -t177 * t232 + (-t179 * t240 - t236 * t276) * t228;
t263 = g(1) * t67 + g(2) * t64 + g(3) * t83;
t261 = -t219 * t129 + t167 * t41;
t260 = t309 + t324;
t255 = -t10 - t263;
t252 = -g(3) * t359 - t286;
t16 = -pkin(5) * t167 - t20;
t249 = -pkin(11) * t56 + (t16 + t20) * t135;
t2 = -qJD(6) * t8 - t233 * t3 + t237 * t6;
t244 = qJD(6) * t135 * t219 + t263;
t243 = -g(1) * t247 - g(2) * t248 - g(3) * t245 + (pkin(11) * t173 - qJD(6) * t189 + t393) * t135;
t183 = pkin(3) * t356 + t312;
t166 = -t197 * t227 + t211;
t143 = -t175 * t227 + t210;
t133 = (-t180 * t236 - t191 * t240) * t228;
t132 = (-t179 * t236 + t240 * t276) * t228;
t106 = t232 * t315 + (qJD(2) * t266 + qJD(3) * t269) * t228;
t105 = -t232 * t316 + (qJD(2) * t268 - qJD(3) * t267) * t228;
t98 = t133 * t238 + t234 * t322;
t92 = -t180 * t188 - t187 * t191;
t91 = -t179 * t188 + t187 * t276;
t90 = -t180 * t186 - t185 * t191;
t89 = -t179 * t186 + t185 * t276;
t70 = t238 * t245 + t370;
t60 = t188 * t365 + t238 * t92;
t59 = t186 * t365 + t238 * t90;
t50 = t105 * t225 + t106 * t229;
t49 = -t229 * t105 + t106 * t225;
t46 = t148 * t234 + t238 * t247;
t44 = t147 * t234 + t238 * t248;
t39 = -pkin(5) * t177 - t278;
t37 = qJD(6) * t117 + t107 * t233 - t237 * t171;
t36 = -qJD(6) * t116 + t107 * t237 + t171 * t233;
t25 = -pkin(5) * t173 - t114 * t238 + t234 * t54;
t19 = qJD(5) * t62 + t234 * t50 - t238 * t293;
t18 = qJD(5) * t399 + t234 * t293 + t238 * t50;
t5 = [t346, 0 (qJDD(2) * t240 - t349) * t228 (-qJDD(2) * t236 - t240 * t241) * t228, 0, 0, 0, 0, 0, t105 * t298 + t144 * t213 - t239 * t295 + t259 * t371, -t106 * t298 - t145 * t213 + t235 * t295 + t260 * t371, t130 * t81 + t131 * t80 + t170 * t50 + t173 * t49, -t12 * t80 + t123 * t184 + t13 * t81 + t142 * t293 - t47 * t49 + t48 * t50 - g(3), 0, 0, 0, 0, 0, t129 * t399 + t136 * t49 - t167 * t19 + t58 * t80, -t129 * t62 - t167 * t18 - t250 * t49 + t57 * t80, 0, 0, 0, 0, 0 (-qJD(6) * t282 - t18 * t233 + t237 * t49) * t135 + t281 * t56 + t19 * t86 - t399 * t23 -(qJD(6) * t281 + t18 * t237 + t233 * t49) * t135 - t282 * t56 + t19 * t88 - t399 * t22; 0, qJDD(2), -g(3) * t358 + t212 + t287, -t346 * t359 + t286 (qJDD(2) * t223 + 0.2e1 * t235 * t309) * t222, 0.2e1 * (t235 * t323 - t328 * t342) * t222 (t235 * t296 + t297 * t334) * t227 (t239 * t296 - t297 * t335) * t227, t213 * t231, t216 * t213 + t345 * t231 - t163 * t298 + (-t190 * t336 + (-pkin(9) * qJD(3) * t298 - t143) * t227 + t287) * t239 + ((-pkin(9) * t213 + qJD(3) * t166) * t227 + ((-t320 + (-t197 - t392) * t231 - pkin(2) * qJD(3)) * qJD(3) + t275) * t231) * t235 - g(3) * t253 + (-pkin(2) * t259 + t239 * t292) * t222, -t343 * t213 - t246 * t231 + t143 * t364 + t166 * t315 - g(1) * (-t187 * t235 - t188 * t355) - g(2) * (-t185 * t235 - t186 * t355) - g(3) * t254 + (-pkin(2) * t260 - t235 * t292) * t222 + (pkin(9) * t316 - t409) * t298, -t109 * t131 + t110 * t130 - t12 * t178 - t13 * t177 + t170 * t380 - t171 * t48 + t172 * t47 + t173 * t381 + t227 * t252, t13 * t110 + t12 * t109 - g(1) * (-t183 * t188 + t187 * t221) - g(2) * (-t183 * t186 + t185 * t221) + t380 * t48 - t381 * t47 - g(3) * (-t183 * t236 + t221 * t240) * t228 + (-t123 * t221 + (pkin(3) * t335 - t319) * t142) * t227, -t107 * t250 + t150 * t57, -t107 * t136 + t108 * t250 - t149 * t57 - t150 * t58, t107 * t167 + t129 * t150 - t171 * t250 + t177 * t57, -t108 * t167 - t129 * t149 - t136 * t171 - t177 * t58, t129 * t177 + t167 * t171, t278 * t129 - t304 * t177 + t20 * t171 + t95 * t58 + t10 * t149 + t41 * t108 - g(1) * t60 - g(2) * t59 - g(3) * t98 + t402 * t167 + t381 * t136 + (-t167 * t401 - t177 * t21) * qJD(5), -t401 * t129 - t273 * t177 - t21 * t171 + t95 * t57 + t10 * t150 + t41 * t107 - g(1) * (t188 * t363 - t234 * t92) - g(2) * (t186 * t363 - t234 * t90) - g(3) * (-t133 * t234 + t238 * t322) + t403 * t167 - t381 * t250, t117 * t22 + t36 * t88, -t116 * t22 - t117 * t23 - t36 * t86 - t37 * t88, t108 * t88 + t117 * t56 + t135 * t36 + t149 * t22, -t108 * t86 - t116 * t56 - t135 * t37 - t149 * t23, t108 * t135 + t149 * t56 (-t233 * t40 + t237 * t51) * t56 + t2 * t149 - t283 * t108 + t39 * t23 + t4 * t116 + t16 * t37 - g(1) * (t233 * t91 + t237 * t60) - g(2) * (t233 * t89 + t237 * t59) - g(3) * (t132 * t233 + t237 * t98) + t394 * t86 + (t233 * t290 - t237 * t289) * t135 -(t233 * t51 + t237 * t40) * t56 - t1 * t149 - t8 * t108 + t39 * t22 + t4 * t117 + t16 * t36 - g(1) * (-t233 * t60 + t237 * t91) - g(2) * (-t233 * t59 + t237 * t89) - g(3) * (t132 * t237 - t233 * t98) + t394 * t88 + (t233 * t289 + t237 * t290) * t135; 0, 0, 0, 0, -t235 * t239 * t367, t342 * t367, t227 * t324 - t239 * t314, t235 * t314 + t306, t213, -g(3) * t144 + t275 * t235 - t396 * t239 + (t190 * t355 + (-(-t197 * t231 - t320) * t231 - t166 * t227) * t235) * qJD(2) + t345, g(3) * t145 + t286 * t239 + t396 * t235 + ((-t235 * t190 + t344) * t231 - t166 * t362) * qJD(2) + t344 * qJD(3) - t280 (t48 - t53) * t173 + (t47 - t54) * t170 + (t130 * t225 - t131 * t229) * pkin(3), t47 * t53 - t48 * t54 + (t12 * t229 + t13 * t225 + (-t142 * t339 - t252) * t235 + (-g(3) * (t227 * t232 + t231 * t358) - t396) * t239) * pkin(3), t234 * t57 - t250 * t300 (t57 - t377) * t238 + (-t58 + t375) * t234, t167 * t300 + t374 + t378, t274 + t376, -t167 * t173, -t53 * t136 - t20 * t173 + t220 * t58 + (t54 * t167 + t261) * t234 + ((-t114 - t333) * t167 + t255) * t238, t220 * t57 + t393 * t167 + t21 * t173 + t53 * t250 + t261 * t238 + (t167 * t333 - t255) * t234, t22 * t234 * t237 + t251 * t88, t121 * t88 + t122 * t86 + (-t233 * t88 - t237 * t86) * t331 + (-t387 - t23 * t237 + (t233 * t86 - t237 * t88) * qJD(6)) * t234 (t383 - t389) * t234 + t400 + t303, t386 + t265 + (t272 - t404) * t234, t135 * t373 - t238 * t56, -t16 * t121 - t25 * t86 + t397 * t237 + t243 * t233 + (-t56 * t369 - t2 + (t16 * t233 + t219 * t86) * qJD(5) - t244 * t237) * t238 + (t16 * t329 + t283 * t170 + t219 * t23 + t4 * t233 + (t135 * t369 - t283) * qJD(5)) * t234, -t16 * t122 - t25 * t88 - t397 * t233 + t243 * t237 + (-t56 * t368 + t1 + (t16 * t237 + t219 * t88) * qJD(5) + t244 * t233) * t238 + (-t16 * t330 + t8 * t170 + t219 * t22 + t4 * t237 + (t135 * t368 - t8) * qJD(5)) * t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170 ^ 2 - t173 ^ 2, -g(1) * t148 - g(2) * t147 - g(3) * t184 - t170 * t48 + t173 * t47 + t123, 0, 0, 0, 0, 0, t274 - t376, -t167 ^ 2 * t238 + t374 - t378, 0, 0, 0, 0, 0, -t386 + t265 + (t272 + t404) * t234 (-t383 - t389) * t234 - t400 + t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250 * t136, -t136 ^ 2 + t250 ^ 2, t57 + t377, -t58 - t375, t129, t250 * t41 - t264 - t304 + (-qJD(5) + t167) * t21, g(1) * t46 + g(2) * t44 + g(3) * t70 + t136 * t41 + t167 * t20 - t273, t299 * t88 + t387 (t22 - t391) * t237 + (-t23 - t390) * t233, t135 * t299 + t250 * t88 + t385, -t135 ^ 2 * t233 - t250 * t86 + t383, t135 * t250, -pkin(5) * t23 - t21 * t86 + t249 * t233 - t237 * t398 - t250 * t283, -pkin(5) * t22 - t21 * t88 + t233 * t398 + t249 * t237 - t250 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88 * t86, -t86 ^ 2 + t88 ^ 2, t22 + t391, -t23 + t390, t56, t8 * t135 - t16 * t88 - g(1) * (-t233 * t46 - t237 * t67) - g(2) * (-t233 * t44 - t237 * t64) - g(3) * (-t233 * t70 - t237 * t83) + t2, -t283 * t135 + t16 * t86 - g(1) * (t233 * t67 - t237 * t46) - g(2) * (t233 * t64 - t237 * t44) - g(3) * (t233 * t83 - t237 * t70) - t1;];
tau_reg  = t5;
