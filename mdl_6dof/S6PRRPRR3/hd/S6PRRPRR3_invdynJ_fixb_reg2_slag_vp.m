% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:07:52
% EndTime: 2019-03-08 22:08:27
% DurationCPUTime: 23.87s
% Computational Cost: add. (18449->841), mult. (51877->1182), div. (0->0), fcn. (44824->16), ass. (0->390)
t298 = sin(pkin(6));
t300 = cos(pkin(7));
t308 = cos(qJ(3));
t309 = cos(qJ(2));
t461 = t308 * t309;
t304 = sin(qJ(3));
t305 = sin(qJ(2));
t467 = t304 * t305;
t354 = -t300 * t467 + t461;
t336 = t354 * t298;
t439 = qJD(3) * t308;
t412 = t300 * t439;
t559 = pkin(2) * t412 - qJD(1) * t336;
t297 = sin(pkin(7));
t514 = -pkin(9) - qJ(4);
t406 = t514 * t304;
t558 = (qJD(3) * t406 + qJD(4) * t308) * t297 + t559;
t465 = t305 * t308;
t466 = t304 * t309;
t356 = -t300 * t465 - t466;
t337 = t356 * t298;
t211 = qJD(1) * t337;
t475 = t300 * t304;
t284 = pkin(2) * t475;
t407 = t514 * t297;
t482 = t297 * t304;
t557 = t211 - (t308 * t407 - t284) * qJD(3) + qJD(4) * t482;
t502 = cos(pkin(13));
t400 = t308 * t502;
t381 = t297 * t400;
t267 = qJDD(2) * t381;
t295 = sin(pkin(13));
t427 = qJDD(2) * t304;
t402 = t295 * t427;
t252 = -t308 * t295 - t304 * t502;
t528 = qJD(3) * t252;
t553 = (qJD(2) * t528 - t402) * t297;
t313 = t267 + t553;
t311 = qJDD(5) - t313;
t458 = -t557 * t295 + t558 * t502;
t380 = qJD(3) * t400;
t440 = qJD(3) * t304;
t413 = t297 * t440;
t225 = t295 * t413 - t297 * t380;
t226 = t297 * t528;
t446 = qJD(1) * t305;
t416 = t298 * t446;
t556 = pkin(3) * t413 - pkin(4) * t226 + pkin(10) * t225 - t297 * t416;
t303 = sin(qJ(5));
t307 = cos(qJ(5));
t425 = qJDD(5) - t267;
t530 = t425 - t553;
t271 = qJD(2) * t381;
t444 = qJD(2) * t297;
t415 = t304 * t444;
t223 = t295 * t415 - t271;
t339 = qJD(5) + t223;
t527 = qJD(5) * t339;
t543 = t223 * t339 + t527;
t555 = -t530 * t303 - t543 * t307;
t474 = t300 * t308;
t285 = pkin(2) * t474;
t197 = pkin(3) * t300 + t297 * t406 + t285;
t480 = t297 * t308;
t248 = pkin(9) * t480 + t284;
t221 = qJ(4) * t480 + t248;
t149 = t295 * t197 + t502 * t221;
t131 = pkin(10) * t300 + t149;
t468 = t304 * t295;
t233 = t297 * t468 - t381;
t234 = t252 * t297;
t290 = pkin(3) * t308 + pkin(2);
t257 = t290 * t297;
t159 = pkin(4) * t233 + pkin(10) * t234 - t257;
t434 = t303 * qJD(5);
t438 = qJD(5) * t307;
t504 = -t131 * t434 + t159 * t438 + t556 * t303 + t307 * t458;
t459 = t558 * t295 + t557 * t502;
t551 = pkin(11) * t226 - t504;
t146 = t307 * t225 - t234 * t434 - t300 * t438;
t194 = -t234 * t307 + t300 * t303;
t147 = qJD(5) * t194 - t225 * t303;
t550 = pkin(5) * t147 + pkin(11) * t146 + t459;
t250 = pkin(9) * t444 + t416;
t375 = -qJ(4) * t444 - t250;
t445 = qJD(1) * t309;
t263 = qJD(2) * pkin(2) + t298 * t445;
t301 = cos(pkin(6));
t447 = qJD(1) * t301;
t417 = t297 * t447;
t269 = t308 * t417;
t450 = t263 * t474 + t269;
t157 = t304 * t375 + t450;
t442 = qJD(2) * t308;
t462 = t308 * t250;
t158 = t263 * t475 + t462 + (qJ(4) * t442 + t304 * t447) * t297;
t399 = t502 * t158;
t77 = t157 * t295 + t399;
t549 = -t77 + t339 * (pkin(5) * t303 - pkin(11) * t307);
t227 = t252 * t444;
t288 = pkin(3) * t295 + pkin(10);
t153 = pkin(3) * t415 - pkin(4) * t227 + pkin(10) * t223;
t140 = t295 * t158;
t78 = t157 * t502 - t140;
t44 = t303 * t153 + t307 * t78;
t548 = -pkin(11) * t227 + t288 * t434 + t44;
t443 = qJD(2) * t300;
t392 = qJD(3) + t443;
t179 = -t307 * t227 + t303 * t392;
t302 = sin(qJ(6));
t306 = cos(qJ(6));
t329 = t306 * t339;
t121 = t179 * t302 - t329;
t395 = -t303 * t227 - t307 * t392;
t526 = qJD(6) + t395;
t547 = t121 * t526;
t123 = t306 * t179 + t302 * t339;
t546 = t123 * t526;
t279 = t300 * t447;
t184 = qJD(4) + t279 + (-pkin(3) * t442 - t263) * t297;
t103 = pkin(4) * t223 + pkin(10) * t227 + t184;
t129 = pkin(3) * t392 + t157;
t70 = t295 * t129 + t399;
t64 = pkin(10) * t392 + t70;
t35 = t307 * t103 - t303 * t64;
t516 = pkin(9) * t297;
t214 = qJDD(2) * t516 + (qJD(2) * t445 + qJDD(1) * t305) * t298;
t428 = qJDD(2) * t300;
t282 = qJDD(3) + t428;
t430 = qJD(2) * qJD(4);
t476 = t298 * t309;
t280 = qJDD(1) * t476;
t477 = t298 * t305;
t414 = qJD(2) * t477;
t384 = qJD(1) * t414;
t229 = qJDD(2) * pkin(2) + t280 - t384;
t429 = qJDD(1) * t301;
t403 = t297 * t429;
t457 = t229 * t474 + t308 * t403;
t488 = t263 * t300;
t50 = pkin(3) * t282 + t375 * t439 + (-qJD(3) * t488 - t214 + (-qJ(4) * qJDD(2) - qJD(3) * t447 - t430) * t297) * t304 + t457;
t431 = qJD(2) * qJD(3);
t405 = t304 * t431;
t426 = qJDD(2) * t308;
t342 = t405 - t426;
t368 = qJD(3) * t269 + t308 * t214 + t229 * t475 + t263 * t412 + t304 * t403;
t79 = -t250 * t440 + t368;
t58 = (-qJ(4) * t342 + t308 * t430) * t297 + t79;
t23 = t295 * t50 + t502 * t58;
t19 = pkin(10) * t282 + t23;
t278 = t300 * t429;
t382 = t297 * t405;
t162 = qJDD(4) + pkin(3) * t382 + t278 + (-pkin(3) * t426 - t229) * t297;
t171 = -t295 * t382 + (qJD(2) * t380 - qJDD(2) * t252) * t297;
t53 = -pkin(4) * t313 - pkin(10) * t171 + t162;
t350 = -t103 * t438 - t307 * t19 - t303 * t53 + t434 * t64;
t545 = -t339 * t35 - t350;
t463 = t306 * t307;
t161 = -t223 * t463 - t227 * t302;
t436 = qJD(6) * t302;
t544 = t303 * t436 - t306 * t438 + t161;
t36 = t303 * t103 + t307 * t64;
t31 = pkin(11) * t339 + t36;
t69 = t129 * t502 - t140;
t63 = -pkin(4) * t392 - t69;
t39 = pkin(5) * t395 - t179 * pkin(11) + t63;
t14 = t302 * t39 + t306 * t31;
t22 = -t295 * t58 + t502 * t50;
t18 = -pkin(4) * t282 - t22;
t365 = -t307 * t171 - t303 * t282;
t84 = qJD(5) * t395 + t365;
t396 = t303 * t171 - t307 * t282;
t85 = qJD(5) * t179 + t396;
t12 = pkin(5) * t85 + pkin(11) * t84 + t18;
t5 = pkin(11) * t530 - t350;
t2 = -qJD(6) * t14 + t306 * t12 - t302 * t5;
t542 = -t14 * t526 - t2;
t369 = t302 * t31 - t306 * t39;
t1 = -t369 * qJD(6) + t302 * t12 + t306 * t5;
t541 = t369 * t526 + t1;
t533 = t307 * t131 + t303 * t159;
t503 = -qJD(5) * t533 - t458 * t303 + t307 * t556;
t538 = t121 * t339;
t394 = t339 * t303;
t537 = t179 * t394;
t536 = t223 * t392;
t535 = t302 * t526;
t534 = t544 * t526;
t418 = t300 * t461;
t357 = t418 - t467;
t419 = t301 * t480;
t186 = t298 * t357 + t419;
t355 = t300 * t466 + t465;
t187 = t298 * t355 + t301 * t482;
t114 = t295 * t186 + t187 * t502;
t242 = -t297 * t476 + t300 * t301;
t232 = t242 * t307;
t532 = -t114 * t303 + t232;
t452 = -pkin(9) * t413 + t559;
t239 = qJD(3) * t248;
t451 = -t239 - t211;
t437 = qJD(6) * t123;
t38 = -t302 * t84 - t306 * t311 + t437;
t351 = t417 + t488;
t169 = t304 * t351 + t462;
t529 = qJD(3) * t169;
t349 = t400 - t468;
t235 = t349 * t300;
t116 = -t233 * t301 + (t235 * t309 + t252 * t305) * t298;
t296 = sin(pkin(12));
t299 = cos(pkin(12));
t472 = t301 * t309;
t243 = -t296 * t305 + t299 * t472;
t473 = t301 * t305;
t244 = t296 * t309 + t299 * t473;
t479 = t298 * t299;
t95 = t233 * t479 + t235 * t243 + t244 * t252;
t245 = -t296 * t472 - t299 * t305;
t246 = -t296 * t473 + t299 * t309;
t484 = t296 * t298;
t98 = -t233 * t484 + t235 * t245 + t246 * t252;
t345 = g(1) * t98 + g(2) * t95 + g(3) * t116;
t401 = t303 * t19 - t307 * t53;
t8 = -qJD(5) * t36 - t401;
t470 = t302 * t307;
t160 = -t223 * t470 + t306 * t227;
t374 = -t302 * t438 + t160;
t435 = qJD(6) * t306;
t328 = t303 * t435 - t374;
t37 = -qJD(6) * t329 + t179 * t436 - t302 * t311 + t306 * t84;
t471 = t302 * t303;
t525 = -t123 * t328 + t37 * t471;
t236 = t252 * t300;
t117 = t298 * (-t236 * t309 + t305 * t349) - t234 * t301;
t524 = t18 + t345;
t523 = g(1) * (t245 * t300 + t297 * t484) - g(2) * (-t243 * t300 + t297 * t479) + qJD(3) * t250;
t522 = t227 ^ 2;
t310 = qJD(2) ^ 2;
t60 = pkin(11) * t233 + t533;
t148 = t197 * t502 - t295 * t221;
t130 = -t300 * pkin(4) - t148;
t193 = -t234 * t303 - t307 * t300;
t73 = t193 * pkin(5) - t194 * pkin(11) + t130;
t26 = -t302 * t60 + t306 * t73;
t519 = qJD(6) * t26 + t550 * t302 - t551 * t306;
t27 = t302 * t73 + t306 * t60;
t518 = -qJD(6) * t27 + t551 * t302 + t550 * t306;
t517 = pkin(3) * t298;
t513 = t223 * t36;
t83 = qJDD(6) + t85;
t512 = t302 * t83;
t511 = t306 * t83;
t510 = t307 * t38;
t509 = t63 * t223;
t289 = -pkin(3) * t502 - pkin(4);
t379 = t307 * pkin(5) + t303 * pkin(11);
t249 = -t379 + t289;
t189 = t249 * t306 - t288 * t470;
t508 = qJD(6) * t189 + t549 * t302 - t548 * t306;
t190 = t249 * t302 + t288 * t463;
t507 = -qJD(6) * t190 + t548 * t302 + t549 * t306;
t506 = -t303 * t85 - t395 * t438;
t505 = pkin(5) * t226 - t503;
t500 = t123 * t121;
t499 = t123 * t223;
t498 = t395 * t223;
t497 = t179 * t395;
t496 = t179 * t227;
t495 = t227 * t395;
t494 = t227 * t223;
t492 = t242 * t297;
t491 = t242 * t303;
t490 = t244 * t297;
t489 = t246 * t297;
t487 = t288 * t303;
t486 = t288 * t307;
t291 = t297 ^ 2;
t485 = t291 * t310;
t483 = t297 * t303;
t481 = t297 * t307;
t478 = t298 * t300;
t469 = t303 * t306;
t464 = t305 * t310;
t460 = qJDD(1) - g(3);
t420 = t298 * t480;
t424 = pkin(3) * t474;
t456 = t296 * pkin(3) * t420 + t245 * t424;
t241 = pkin(3) * t475 + t407;
t455 = -t244 * t241 + t243 * t290;
t454 = -t246 * t241 + t245 * t290;
t453 = -g(1) * t489 - g(2) * t490;
t449 = pkin(3) * t419 + t418 * t517;
t293 = t304 ^ 2;
t294 = t308 ^ 2;
t448 = t293 - t294;
t433 = qJD(5) - t271;
t423 = g(3) * t477;
t421 = t297 * t477;
t408 = t297 * t300 * t310;
t404 = t308 * t431;
t398 = t123 * t434 + t307 * t37;
t393 = t526 * t306;
t391 = qJD(3) + 0.2e1 * t443;
t390 = t282 + t428;
t389 = t291 * t298 * t464;
t388 = t304 * t308 * t485;
t387 = t299 * t420;
t385 = t297 * t414;
t383 = t304 * t404;
t377 = g(1) * t246 + g(2) * t244;
t376 = -t241 * t477 + t290 * t476;
t371 = -t14 * t302 + t306 * t369;
t370 = -t14 * t306 - t302 * t369;
t113 = -t186 * t502 + t187 * t295;
t93 = t114 * t307 + t491;
t46 = t113 * t306 - t302 * t93;
t47 = t113 * t302 + t306 * t93;
t43 = t153 * t307 - t303 * t78;
t74 = -t131 * t303 + t159 * t307;
t156 = t194 * t306 + t233 * t302;
t124 = -t235 * t244 + t243 * t252;
t125 = t236 * t244 + t243 * t349;
t363 = t125 * pkin(4) - pkin(10) * t124 + t455;
t126 = -t235 * t246 + t245 * t252;
t127 = t236 * t246 + t245 * t349;
t362 = t127 * pkin(4) - pkin(10) * t126 + t454;
t361 = t227 * t392;
t360 = -t435 * t526 - t512;
t353 = t374 * t526;
t30 = -pkin(5) * t339 - t35;
t352 = -pkin(11) * t83 + t30 * t526;
t191 = -t243 * t297 - t299 * t478;
t192 = -t245 * t297 + t296 * t478;
t94 = -t234 * t479 + t236 * t243 - t244 * t349;
t99 = -t234 * t484 - t236 * t245 + t246 * t349;
t348 = -g(1) * (t192 * t307 - t303 * t99) - g(2) * (t191 * t307 + t303 * t94) - g(3) * (-t117 * t303 + t232);
t101 = t117 * t307 + t491;
t66 = t191 * t303 - t307 * t94;
t68 = t192 * t303 + t307 * t99;
t347 = -g(1) * t68 - g(2) * t66 - g(3) * t101;
t346 = -g(1) * t99 + g(2) * t94 - g(3) * t117;
t173 = (t236 * t305 + t309 * t349) * t298;
t135 = t173 * t303 - t307 * t421;
t88 = t125 * t303 - t244 * t481;
t90 = t127 * t303 - t246 * t481;
t344 = -g(1) * t90 - g(2) * t88 - g(3) * t135;
t343 = t404 + t427;
t172 = -t235 * t477 + t252 * t476;
t341 = g(1) * t126 + g(2) * t124 + g(3) * t172;
t340 = -g(1) * t192 - g(2) * t191 - g(3) * t242;
t6 = -pkin(5) * t530 - t8;
t338 = t348 - t6;
t335 = t173 * pkin(4) - pkin(10) * t172 + t376;
t215 = -t263 * t297 + t279;
t332 = -t215 * t444 + t377;
t331 = -pkin(3) * t246 * t304 + t98 * pkin(4) + pkin(10) * t99 + t456;
t323 = (pkin(3) * t440 - t416) * t297;
t322 = t121 * t544 - t38 * t469;
t321 = t116 * pkin(4) + pkin(10) * t117 - t467 * t517 + t449;
t319 = pkin(11) * qJD(6) * t526 - t338;
t318 = qJD(6) * t371 + t1 * t306 - t2 * t302;
t317 = -t303 * t543 + t307 * t311;
t216 = t243 * t424;
t316 = -pkin(10) * t94 + t216 + t95 * pkin(4) + (-t244 * t304 - t387) * pkin(3);
t264 = t282 * t300;
t247 = -pkin(9) * t482 + t285;
t220 = t223 ^ 2;
t185 = -t229 * t297 + t278;
t168 = -t304 * t250 + t450;
t155 = t194 * t302 - t306 * t233;
t145 = qJD(3) * t419 + (qJD(2) * t354 + qJD(3) * t357) * t298;
t144 = -t301 * t413 + (qJD(2) * t356 - qJD(3) * t355) * t298;
t136 = t173 * t307 + t303 * t421;
t107 = pkin(5) * t179 + pkin(11) * t395;
t91 = t127 * t307 + t246 * t483;
t89 = t125 * t307 + t244 * t483;
t80 = -t304 * t214 + t457 - t529;
t72 = t295 * t144 + t145 * t502;
t71 = -t144 * t502 + t145 * t295;
t59 = -pkin(5) * t233 - t74;
t57 = qJD(6) * t156 - t146 * t302 + t306 * t226;
t56 = t306 * t146 + t194 * t436 + t302 * t226 - t233 * t435;
t40 = pkin(5) * t227 - t43;
t33 = qJD(5) * t93 + t303 * t72 - t307 * t385;
t32 = qJD(5) * t532 + t303 * t385 + t307 * t72;
t21 = t107 * t302 + t306 * t35;
t20 = t107 * t306 - t302 * t35;
t10 = -qJD(6) * t47 - t302 * t32 + t306 * t71;
t9 = qJD(6) * t46 + t302 * t71 + t306 * t32;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t460, 0, 0, 0, 0, 0, 0 (qJDD(2) * t309 - t464) * t298 (-qJDD(2) * t305 - t309 * t310) * t298, 0, -g(3) + (t301 ^ 2 + (t305 ^ 2 + t309 ^ 2) * t298 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t144 * t392 + t186 * t282 - t308 * t389 + t342 * t492, -t145 * t392 - t187 * t282 + t304 * t389 + t343 * t492 ((-t186 * t304 + t187 * t308) * qJDD(2) + (-t144 * t304 + t145 * t308 + (-t186 * t308 - t187 * t304) * qJD(3)) * qJD(2)) * t297, t144 * t168 + t145 * t169 + t185 * t242 + t186 * t80 + t187 * t79 + t215 * t385 - g(3), 0, 0, 0, 0, 0, 0, -t113 * t282 + t223 * t385 - t242 * t313 - t392 * t71, -t114 * t282 + t242 * t171 - t227 * t385 - t392 * t72, t113 * t171 + t114 * t313 - t223 * t72 - t227 * t71, -t113 * t22 + t114 * t23 + t162 * t242 + t184 * t385 - t69 * t71 + t70 * t72 - g(3), 0, 0, 0, 0, 0, 0, -t33 * t433 + t532 * t425 + t71 * t395 + t113 * t85 + (t532 * t402 + (-t33 * t468 - t528 * t532) * qJD(2)) * t297, -t32 * t433 - t93 * t425 + t71 * t179 - t113 * t84 + (-t93 * t402 + (-t32 * t468 + t528 * t93) * qJD(2)) * t297, t179 * t33 - t32 * t395 + t532 * t84 - t85 * t93, t113 * t18 + t32 * t36 - t33 * t35 - t350 * t93 + t532 * t8 + t63 * t71 - g(3), 0, 0, 0, 0, 0, 0, t10 * t526 + t121 * t33 - t38 * t532 + t46 * t83, t123 * t33 + t37 * t532 - t47 * t83 - t526 * t9, -t10 * t123 - t121 * t9 + t37 * t46 - t38 * t47, t1 * t47 - t10 * t369 + t14 * t9 + t2 * t46 + t30 * t33 - t532 * t6 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -g(1) * t245 - g(2) * t243 - g(3) * t476 + t280, -t460 * t477 + t377, 0, 0 (qJDD(2) * t293 + 0.2e1 * t383) * t291, 0.2e1 * (t304 * t426 - t431 * t448) * t291 (t304 * t390 + t391 * t439) * t297 (qJDD(2) * t294 - 0.2e1 * t383) * t291 (t308 * t390 - t391 * t440) * t297, t264, t247 * t282 + t80 * t300 - g(1) * (t245 * t308 - t246 * t475) - g(2) * (t243 * t308 - t244 * t475) - g(3) * t336 + (-t185 * t308 + t215 * t440) * t297 + (-pkin(2) * t342 + t308 * t384) * t291 + t451 * t392, -t248 * t282 - t79 * t300 - g(1) * (-t245 * t304 - t246 * t474) - g(2) * (-t243 * t304 - t244 * t474) - g(3) * t337 + (t185 * t304 + t215 * t439) * t297 + (-pkin(2) * t343 - t304 * t384) * t291 - t452 * t392 (-t423 + (-qJD(3) * t168 + qJDD(2) * t248 + t79) * t308 + (-qJDD(2) * t247 - t529 - t80) * t304 + ((-qJD(3) * t247 + t452) * t308 + (-t451 - t239) * t304) * qJD(2)) * t297 + t453, t79 * t248 + t80 * t247 - t185 * t297 * pkin(2) - g(1) * (pkin(2) * t245 + pkin(9) * t489) - g(2) * (pkin(2) * t243 + pkin(9) * t490) + t452 * t169 + t451 * t168 + (-t215 * t297 * t446 - g(3) * (pkin(2) * t309 + t305 * t516)) * t298, -t171 * t234 + t225 * t227, -t171 * t233 + t223 * t225 - t226 * t227 - t234 * t313, t171 * t300 - t225 * t392 - t234 * t282, -t223 * t226 - t233 * t313, t226 * t392 - t233 * t282 + t300 * t313, t264, -g(1) * t127 - g(2) * t125 - g(3) * t173 + t148 * t282 + t162 * t233 - t184 * t226 + t22 * t300 + t223 * t323 + t257 * t313 - t392 * t459, -t149 * t282 - t162 * t234 - t257 * t171 - t184 * t225 - t227 * t323 - t23 * t300 - t392 * t458 - t341, -g(3) * t421 - t148 * t171 + t149 * t313 + t22 * t234 - t223 * t458 + t225 * t69 + t226 * t70 - t227 * t459 - t23 * t233 + t453, -g(1) * t454 - g(2) * t455 - g(3) * t376 + t22 * t148 + t23 * t149 - t162 * t257 + t184 * t323 + t458 * t70 - t459 * t69, -t146 * t179 - t194 * t84, t146 * t395 - t147 * t179 + t193 * t84 - t194 * t85, -t146 * t433 + t194 * t425 - t84 * t233 - t179 * t226 + (t194 * t402 + (-t146 * t468 - t194 * t528) * qJD(2)) * t297, t147 * t395 + t193 * t85, -t147 * t433 - t193 * t425 - t85 * t233 + t395 * t226 + (-t193 * t402 + (-t147 * t468 + t193 * t528) * qJD(2)) * t297, t425 * t233 - t433 * t226 + (t233 * t402 + (-t226 * t468 - t233 * t528) * qJD(2)) * t297, -g(1) * t91 - g(2) * t89 - g(3) * t136 + t130 * t85 + t63 * t147 + t18 * t193 - t35 * t226 + t8 * t233 + t311 * t74 + t339 * t503 + t395 * t459, -t130 * t84 - t63 * t146 + t179 * t459 + t18 * t194 + t36 * t226 + t233 * t350 - t311 * t533 - t339 * t504 - t344, t146 * t35 - t147 * t36 - t179 * t503 + t193 * t350 - t194 * t8 - t395 * t504 - t533 * t85 + t74 * t84 + t341, -g(1) * t362 - g(2) * t363 - g(3) * t335 + t18 * t130 + t35 * t503 - t350 * t533 + t36 * t504 + t459 * t63 + t8 * t74, -t123 * t56 - t156 * t37, t121 * t56 - t123 * t57 + t155 * t37 - t156 * t38, t123 * t147 + t156 * t83 - t193 * t37 - t526 * t56, t121 * t57 + t155 * t38, -t121 * t147 - t155 * t83 - t193 * t38 - t526 * t57, t147 * t526 + t193 * t83, t26 * t83 + t2 * t193 - t369 * t147 + t59 * t38 + t6 * t155 + t30 * t57 - g(1) * (-t126 * t302 + t306 * t91) - g(2) * (-t124 * t302 + t306 * t89) - g(3) * (t136 * t306 - t172 * t302) + t518 * t526 + t505 * t121, -t27 * t83 - t1 * t193 - t14 * t147 - t59 * t37 + t6 * t156 - t30 * t56 - g(1) * (-t126 * t306 - t302 * t91) - g(2) * (-t124 * t306 - t302 * t89) - g(3) * (-t136 * t302 - t172 * t306) - t519 * t526 + t505 * t123, -t1 * t155 - t121 * t519 - t123 * t518 - t14 * t57 - t156 * t2 + t26 * t37 - t27 * t38 - t369 * t56 + t344, t1 * t27 + t2 * t26 + t6 * t59 - g(1) * (pkin(5) * t91 + pkin(11) * t90 + t362) - g(2) * (pkin(5) * t89 + pkin(11) * t88 + t363) - g(3) * (pkin(5) * t136 + pkin(11) * t135 + t335) + t505 * t30 + t519 * t14 - t518 * t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t388, t448 * t485, t297 * t427 - t308 * t408, t388, t297 * t426 + t304 * t408, t282, t169 * t392 - g(3) * t186 - t523 * t308 + (-qJD(3) * t351 - t214 + t332) * t304 + t457, g(3) * t187 + t168 * t392 + t304 * t523 + t332 * t308 - t368, 0, 0, -t494, -t220 + t522, t171 + t536, t494, -t361 + t313, t282, t184 * t227 + t77 * t392 + (-t223 * t415 + t282 * t502) * pkin(3) - t345 + t22, t184 * t223 + t78 * t392 + (t227 * t415 - t282 * t295) * pkin(3) - t346 - t23 -(t70 - t77) * t227 + (-t69 + t78) * t223 + (-t171 * t502 + t295 * t313) * pkin(3), -t70 * t78 + t69 * t77 - g(1) * t456 - g(2) * t216 - g(3) * t449 + (g(2) * t387 + t22 * t502 + t23 * t295 + (-t184 * t444 + t377 + t423) * t304) * pkin(3), t179 * t307 * t339 - t303 * t84 (-t84 - t498) * t307 - t537 + t506, t496 - t555, -t307 * t85 + t394 * t395, t317 - t495, t339 * t227, t35 * t227 + t289 * t85 + t303 * t509 - t307 * t524 - t311 * t487 - t339 * t43 - t77 * t395 + t434 * t63 - t486 * t527, -t77 * t179 - t36 * t227 - t289 * t84 + t303 * t524 + t307 * t509 - t311 * t486 + t339 * t44 + t438 * t63 + t487 * t527, t395 * t44 + t179 * t43 + (-t223 * t35 - t288 * t85 - t350 + (t179 * t288 - t35) * qJD(5)) * t307 + (-t513 - t288 * t84 - t8 + (t288 * t395 - t36) * qJD(5)) * t303 + t346, t18 * t289 - t36 * t44 - t35 * t43 - t63 * t77 - g(1) * t331 - g(2) * t316 - g(3) * t321 + (-t8 * t303 - t350 * t307 + (-t303 * t36 - t307 * t35) * qJD(5)) * t288, -t123 * t544 - t37 * t469, t322 + t525 (t499 + t511) * t303 - t534 + t398, t121 * t328 + t38 * t471, t510 + t353 + (t360 - t538) * t303, -t307 * t83 + t394 * t526, -t40 * t121 - t30 * t160 + t189 * t83 + t507 * t526 + t346 * t302 + (-t2 + (t121 * t288 + t30 * t302) * qJD(5) - t345 * t306) * t307 + (t288 * t38 + t30 * t435 + t6 * t302 - t339 * t369) * t303, -t40 * t123 - t30 * t161 - t190 * t83 - t508 * t526 + t346 * t306 + (t1 + (t123 * t288 + t30 * t306) * qJD(5) + t345 * t302) * t307 + (-t14 * t339 - t288 * t37 - t30 * t436 + t6 * t306) * t303, -t369 * t161 + t14 * t160 + t189 * t37 - t190 * t38 - t507 * t123 - t508 * t121 + t371 * t438 + (qJD(6) * t370 - t1 * t302 - t2 * t306 - t345) * t303, t1 * t190 + t2 * t189 - t30 * t40 - g(1) * (t379 * t98 + t331) - g(2) * (t379 * t95 + t316) - g(3) * (t116 * t379 + t321) + (t30 * t438 + t303 * t6) * t288 + t508 * t14 - t507 * t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t361 - t313, t171 - t536, -t220 - t522, t223 * t70 - t227 * t69 + t162 + t340, 0, 0, 0, 0, 0, 0, t317 + t495, t496 + t555 (t84 - t498) * t307 + t537 + t506, t227 * t63 + (t339 * t36 + t8) * t307 + t545 * t303 + t340, 0, 0, 0, 0, 0, 0, -t510 + t353 + (t360 + t538) * t303 (t499 - t511) * t303 + t534 + t398, t322 - t525, -t369 * t160 - t14 * t161 + (-qJD(5) * t370 - t6) * t307 + (t30 * t339 + t318) * t303 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t497, t179 ^ 2 - t395 ^ 2, t498 - t365, -t497, t179 * t223 - t396, t311, -t63 * t179 + t348 - t401 + t513, t395 * t63 - t347 - t545, 0, 0, t123 * t393 - t302 * t37 (-t37 - t547) * t306 + (-t38 - t546) * t302, -t123 * t179 + t393 * t526 + t512, t121 * t535 - t306 * t38, t121 * t179 - t526 * t535 + t511, -t526 * t179, -pkin(5) * t38 - t121 * t36 + t179 * t369 - t20 * t526 + t302 * t352 - t306 * t319, pkin(5) * t37 - t123 * t36 + t14 * t179 + t21 * t526 + t302 * t319 + t306 * t352, t121 * t21 + t123 * t20 + ((-t38 + t437) * pkin(11) + t541) * t306 + ((qJD(6) * t121 - t37) * pkin(11) + t542) * t302 + t347, t369 * t20 - t14 * t21 - t30 * t36 + t338 * pkin(5) + (t318 + t347) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t500, -t121 ^ 2 + t123 ^ 2, -t37 + t547, -t500, -t38 + t546, t83, -t30 * t123 - g(1) * (-t302 * t68 - t306 * t98) - g(2) * (-t302 * t66 - t306 * t95) - g(3) * (-t101 * t302 - t116 * t306) - t542, t30 * t121 - g(1) * (t302 * t98 - t306 * t68) - g(2) * (t302 * t95 - t306 * t66) - g(3) * (-t101 * t306 + t116 * t302) - t541, 0, 0;];
tau_reg  = t3;
