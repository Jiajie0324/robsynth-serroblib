% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:54
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:53:49
% EndTime: 2019-05-05 04:54:00
% DurationCPUTime: 12.10s
% Computational Cost: add. (118661->357), mult. (291025->593), div. (0->0), fcn. (236871->16), ass. (0->324)
t2576 = sin(pkin(12));
t2580 = cos(pkin(12));
t2558 = g(1) * t2576 - g(2) * t2580;
t2574 = -g(3) + qJDD(1);
t2578 = sin(pkin(6));
t2582 = cos(pkin(6));
t2666 = t2558 * t2582 + t2574 * t2578;
t2575 = sin(pkin(13));
t2577 = sin(pkin(7));
t2579 = cos(pkin(13));
t2585 = sin(qJ(3));
t2589 = cos(qJ(3));
t2530 = (t2575 * t2589 + t2579 * t2585) * t2577 * qJD(2);
t2581 = cos(pkin(7));
t2569 = qJD(2) * t2581 + qJD(3);
t2584 = sin(qJ(5));
t2588 = cos(qJ(5));
t2512 = t2530 * t2584 - t2588 * t2569;
t2511 = qJD(6) + t2512;
t2665 = qJD(6) + t2511;
t2644 = t2577 * t2589;
t2638 = qJD(2) * t2644;
t2640 = qJDD(2) * t2577;
t2539 = qJD(3) * t2638 + t2585 * t2640;
t2645 = t2577 * t2585;
t2639 = qJD(2) * t2645;
t2540 = -qJD(3) * t2639 + t2589 * t2640;
t2506 = t2579 * t2539 + t2575 * t2540;
t2528 = t2575 * t2639 - t2579 * t2638;
t2650 = t2528 * t2569;
t2486 = t2506 - t2650;
t2631 = t2569 * t2638;
t2516 = -t2539 + t2631;
t2591 = qJD(2) ^ 2;
t2647 = t2577 ^ 2 * t2591;
t2557 = t2585 * t2589 * t2647;
t2568 = t2581 * qJDD(2) + qJDD(3);
t2537 = t2568 + t2557;
t2514 = t2530 * t2588 + t2569 * t2584;
t2526 = qJD(5) + t2528;
t2583 = sin(qJ(6));
t2587 = cos(qJ(6));
t2490 = t2514 * t2583 - t2587 * t2526;
t2664 = t2490 ^ 2;
t2492 = t2514 * t2587 + t2526 * t2583;
t2663 = t2492 ^ 2;
t2662 = t2511 ^ 2;
t2661 = t2512 ^ 2;
t2660 = t2514 ^ 2;
t2659 = t2526 ^ 2;
t2658 = t2528 ^ 2;
t2657 = t2530 ^ 2;
t2656 = t2569 ^ 2;
t2655 = -2 * qJD(4);
t2654 = t2490 * t2492;
t2559 = -g(1) * t2580 - g(2) * t2576;
t2586 = sin(qJ(2));
t2590 = cos(qJ(2));
t2508 = -t2559 * t2586 + t2590 * t2666;
t2501 = pkin(9) * t2577 * t2591 + qJDD(2) * pkin(2) + t2508;
t2653 = t2501 * t2581;
t2652 = t2512 * t2514;
t2651 = t2528 * t2530;
t2649 = t2530 * t2569;
t2643 = qJD(5) - t2526;
t2642 = qJD(6) - t2511;
t2509 = t2590 * t2559 + t2586 * t2666;
t2502 = -pkin(2) * t2591 + pkin(9) * t2640 + t2509;
t2535 = -t2558 * t2578 + t2574 * t2582;
t2459 = t2589 * t2502 + t2535 * t2645 + t2585 * t2653;
t2536 = pkin(3) * t2569 - qJ(4) * t2639;
t2573 = t2589 ^ 2;
t2637 = t2573 * t2647;
t2447 = -pkin(3) * t2637 + qJ(4) * t2540 - t2536 * t2569 + t2459;
t2458 = -t2585 * t2502 + t2535 * t2644 + t2589 * t2653;
t2593 = pkin(3) * t2537 + qJ(4) * t2516 + t2458;
t2404 = t2579 * t2447 + t2528 * t2655 + t2575 * t2593;
t2504 = pkin(4) * t2528 - pkin(10) * t2530;
t2398 = -pkin(4) * t2656 + pkin(10) * t2568 - t2504 * t2528 + t2404;
t2525 = t2581 * t2535;
t2460 = -qJ(4) * t2637 - t2540 * pkin(3) + qJDD(4) + t2525 + (qJD(2) * t2536 * t2585 - t2501) * t2577;
t2641 = t2575 * t2539 - t2579 * t2540;
t2484 = t2641 + t2649;
t2592 = t2484 * pkin(4) - pkin(10) * t2486 + t2460;
t2383 = t2588 * t2398 + t2584 * t2592;
t2636 = qJDD(5) + t2641;
t2382 = -t2398 * t2584 + t2588 * t2592;
t2635 = t2575 * t2447 - t2579 * t2593;
t2601 = -t2588 * t2506 - t2584 * t2568;
t2475 = -qJD(5) * t2512 - t2601;
t2634 = -t2583 * t2475 + t2587 * t2636;
t2633 = t2526 * t2512 - t2475;
t2632 = t2584 * t2506 - t2588 * t2568;
t2483 = pkin(5) * t2512 - pkin(11) * t2514;
t2371 = -pkin(5) * t2659 + pkin(11) * t2636 - t2512 * t2483 + t2383;
t2397 = -t2568 * pkin(4) - t2656 * pkin(10) + ((2 * qJD(4)) + t2504) * t2530 + t2635;
t2450 = (qJD(5) + t2526) * t2514 + t2632;
t2379 = pkin(5) * t2450 + pkin(11) * t2633 + t2397;
t2348 = -t2371 * t2583 + t2379 * t2587;
t2349 = t2371 * t2587 + t2379 * t2583;
t2327 = -t2348 * t2583 + t2349 * t2587;
t2370 = -pkin(5) * t2636 - pkin(11) * t2659 + t2483 * t2514 - t2382;
t2321 = t2327 * t2584 - t2370 * t2588;
t2322 = t2327 * t2588 + t2370 * t2584;
t2326 = t2348 * t2587 + t2349 * t2583;
t2310 = t2322 * t2575 - t2326 * t2579;
t2311 = t2322 * t2579 + t2326 * t2575;
t2629 = t2310 * t2589 + t2311 * t2585;
t2301 = -t2577 * t2321 + t2581 * t2629;
t2302 = -t2310 * t2585 + t2311 * t2589;
t2630 = t2301 * t2590 + t2302 * t2586;
t2352 = t2382 * t2588 + t2383 * t2584;
t2353 = -t2382 * t2584 + t2383 * t2588;
t2343 = t2353 * t2575 - t2397 * t2579;
t2344 = t2353 * t2579 + t2397 * t2575;
t2624 = t2343 * t2589 + t2344 * t2585;
t2316 = -t2577 * t2352 + t2581 * t2624;
t2323 = -t2343 * t2585 + t2344 * t2589;
t2628 = t2316 * t2590 + t2323 * t2586;
t2416 = -t2492 * t2642 + t2634;
t2594 = -t2587 * t2475 - t2583 * t2636;
t2418 = t2490 * t2642 + t2594;
t2392 = t2416 * t2587 - t2418 * t2583;
t2443 = -t2663 - t2664;
t2375 = t2392 * t2584 - t2443 * t2588;
t2376 = t2392 * t2588 + t2443 * t2584;
t2391 = t2416 * t2583 + t2418 * t2587;
t2354 = t2376 * t2575 - t2391 * t2579;
t2355 = t2376 * t2579 + t2391 * t2575;
t2622 = t2354 * t2589 + t2355 * t2585;
t2325 = -t2577 * t2375 + t2581 * t2622;
t2333 = -t2354 * t2585 + t2355 * t2589;
t2627 = t2325 * t2590 + t2333 * t2586;
t2595 = -qJD(5) * t2514 - qJDD(6) - t2632;
t2434 = -t2595 - t2654;
t2449 = -t2662 - t2664;
t2402 = -t2434 * t2583 + t2449 * t2587;
t2415 = t2492 * t2665 - t2634;
t2386 = t2402 * t2584 - t2415 * t2588;
t2387 = t2402 * t2588 + t2415 * t2584;
t2401 = t2434 * t2587 + t2449 * t2583;
t2358 = t2387 * t2575 - t2401 * t2579;
t2359 = t2387 * t2579 + t2401 * t2575;
t2620 = t2358 * t2589 + t2359 * t2585;
t2332 = -t2577 * t2386 + t2581 * t2620;
t2340 = -t2358 * t2585 + t2359 * t2589;
t2626 = t2332 * t2590 + t2340 * t2586;
t2435 = t2595 - t2654;
t2457 = -t2662 - t2663;
t2410 = t2435 * t2587 - t2457 * t2583;
t2417 = -t2490 * t2665 - t2594;
t2388 = t2410 * t2584 - t2417 * t2588;
t2389 = t2410 * t2588 + t2417 * t2584;
t2409 = t2435 * t2583 + t2457 * t2587;
t2362 = t2389 * t2575 - t2409 * t2579;
t2363 = t2389 * t2579 + t2409 * t2575;
t2619 = t2362 * t2589 + t2363 * t2585;
t2335 = -t2577 * t2388 + t2581 * t2619;
t2341 = -t2362 * t2585 + t2363 * t2589;
t2625 = t2335 * t2590 + t2341 * t2586;
t2403 = t2530 * t2655 - t2635;
t2377 = t2403 * t2579 + t2404 * t2575;
t2378 = -t2403 * t2575 + t2404 * t2579;
t2616 = t2377 * t2589 + t2378 * t2585;
t2347 = -t2577 * t2460 + t2581 * t2616;
t2351 = -t2377 * t2585 + t2378 * t2589;
t2623 = t2347 * t2590 + t2351 * t2586;
t2451 = -t2514 * t2643 - t2632;
t2453 = t2512 * t2643 + t2601;
t2419 = t2451 * t2584 + t2453 * t2588;
t2420 = t2451 * t2588 - t2453 * t2584;
t2468 = -t2660 - t2661;
t2399 = t2420 * t2575 - t2468 * t2579;
t2400 = t2420 * t2579 + t2468 * t2575;
t2615 = t2399 * t2589 + t2400 * t2585;
t2357 = -t2577 * t2419 + t2581 * t2615;
t2372 = -t2399 * t2585 + t2400 * t2589;
t2621 = t2357 * t2590 + t2372 * t2586;
t2462 = t2636 - t2652;
t2472 = -t2659 - t2661;
t2438 = t2462 * t2588 + t2472 * t2584;
t2439 = -t2462 * t2584 + t2472 * t2588;
t2407 = t2439 * t2575 - t2450 * t2579;
t2408 = t2439 * t2579 + t2450 * t2575;
t2613 = t2407 * t2589 + t2408 * t2585;
t2365 = -t2577 * t2438 + t2581 * t2613;
t2384 = -t2407 * t2585 + t2408 * t2589;
t2618 = t2365 * t2590 + t2384 * t2586;
t2463 = -t2636 - t2652;
t2479 = -t2659 - t2660;
t2440 = t2463 * t2584 + t2479 * t2588;
t2441 = t2463 * t2588 - t2479 * t2584;
t2411 = t2441 * t2575 + t2579 * t2633;
t2412 = t2441 * t2579 - t2575 * t2633;
t2612 = t2411 * t2589 + t2412 * t2585;
t2369 = -t2577 * t2440 + t2581 * t2612;
t2385 = -t2411 * t2585 + t2412 * t2589;
t2617 = t2369 * t2590 + t2385 * t2586;
t2489 = -t2657 - t2658;
t2485 = -t2641 + t2649;
t2487 = -t2506 - t2650;
t2454 = t2485 * t2575 + t2487 * t2579;
t2455 = t2485 * t2579 - t2487 * t2575;
t2608 = t2454 * t2589 + t2455 * t2585;
t2406 = -t2577 * t2489 + t2581 * t2608;
t2423 = -t2454 * t2585 + t2455 * t2589;
t2614 = t2406 * t2590 + t2423 * t2586;
t2482 = -t2577 * t2501 + t2525;
t2607 = t2458 * t2589 + t2459 * t2585;
t2414 = -t2577 * t2482 + t2581 * t2607;
t2430 = -t2458 * t2585 + t2459 * t2589;
t2611 = t2414 * t2590 + t2430 * t2586;
t2496 = -t2656 - t2658;
t2497 = t2568 - t2651;
t2466 = t2496 * t2575 + t2497 * t2579;
t2467 = t2496 * t2579 - t2497 * t2575;
t2606 = t2466 * t2589 + t2467 * t2585;
t2422 = -t2577 * t2484 + t2581 * t2606;
t2433 = -t2466 * t2585 + t2467 * t2589;
t2610 = t2422 * t2590 + t2433 * t2586;
t2498 = -t2568 - t2651;
t2510 = -t2656 - t2657;
t2470 = t2498 * t2575 + t2510 * t2579;
t2471 = t2498 * t2579 - t2510 * t2575;
t2605 = t2470 * t2589 + t2471 * t2585;
t2427 = -t2577 * t2486 + t2581 * t2605;
t2442 = -t2470 * t2585 + t2471 * t2589;
t2609 = t2427 * t2590 + t2442 * t2586;
t2572 = t2585 ^ 2;
t2546 = (-t2572 - t2573) * t2647;
t2550 = t2569 * t2639;
t2517 = t2540 + t2550;
t2599 = t2516 * t2589 + t2517 * t2585;
t2474 = -t2577 * t2546 + t2581 * t2599;
t2488 = -t2516 * t2585 + t2517 * t2589;
t2604 = t2474 * t2590 + t2488 * t2586;
t2515 = t2631 + t2539;
t2527 = -t2572 * t2647 - t2656;
t2538 = t2557 - t2568;
t2598 = t2527 * t2589 + t2538 * t2585;
t2477 = -t2577 * t2515 + t2581 * t2598;
t2500 = -t2527 * t2585 + t2538 * t2589;
t2603 = t2477 * t2590 + t2500 * t2586;
t2518 = -t2540 + t2550;
t2541 = -t2656 - t2637;
t2597 = t2537 * t2589 + t2541 * t2585;
t2481 = -t2577 * t2518 + t2581 * t2597;
t2507 = -t2537 * t2585 + t2541 * t2589;
t2602 = t2481 * t2590 + t2507 * t2586;
t2600 = t2508 * t2590 + t2509 * t2586;
t2596 = qJDD(2) * t2590 - t2586 * t2591;
t2556 = -qJDD(2) * t2586 - t2590 * t2591;
t2545 = t2596 * t2582;
t2544 = t2556 * t2582;
t2543 = t2596 * t2578;
t2542 = t2556 * t2578;
t2480 = t2581 * t2518 + t2577 * t2597;
t2478 = -t2508 * t2586 + t2509 * t2590;
t2476 = t2581 * t2515 + t2577 * t2598;
t2473 = t2581 * t2546 + t2577 * t2599;
t2465 = -t2578 * t2535 + t2582 * t2600;
t2464 = t2582 * t2535 + t2578 * t2600;
t2461 = -t2481 * t2586 + t2507 * t2590;
t2456 = -t2477 * t2586 + t2500 * t2590;
t2448 = -t2474 * t2586 + t2488 * t2590;
t2437 = -t2578 * t2480 + t2582 * t2602;
t2436 = t2582 * t2480 + t2578 * t2602;
t2432 = -t2578 * t2476 + t2582 * t2603;
t2431 = t2582 * t2476 + t2578 * t2603;
t2429 = -t2578 * t2473 + t2582 * t2604;
t2428 = t2582 * t2473 + t2578 * t2604;
t2426 = t2581 * t2486 + t2577 * t2605;
t2421 = t2581 * t2484 + t2577 * t2606;
t2413 = t2581 * t2482 + t2577 * t2607;
t2405 = t2581 * t2489 + t2577 * t2608;
t2396 = -t2427 * t2586 + t2442 * t2590;
t2394 = -t2422 * t2586 + t2433 * t2590;
t2393 = -t2414 * t2586 + t2430 * t2590;
t2390 = -t2406 * t2586 + t2423 * t2590;
t2381 = -t2578 * t2426 + t2582 * t2609;
t2380 = t2582 * t2426 + t2578 * t2609;
t2374 = -t2578 * t2421 + t2582 * t2610;
t2373 = t2582 * t2421 + t2578 * t2610;
t2368 = t2581 * t2440 + t2577 * t2612;
t2367 = -t2578 * t2413 + t2582 * t2611;
t2366 = t2582 * t2413 + t2578 * t2611;
t2364 = t2581 * t2438 + t2577 * t2613;
t2361 = -t2578 * t2405 + t2582 * t2614;
t2360 = t2582 * t2405 + t2578 * t2614;
t2356 = t2581 * t2419 + t2577 * t2615;
t2350 = -t2369 * t2586 + t2385 * t2590;
t2346 = t2581 * t2460 + t2577 * t2616;
t2345 = -t2365 * t2586 + t2384 * t2590;
t2342 = -t2357 * t2586 + t2372 * t2590;
t2339 = -t2578 * t2368 + t2582 * t2617;
t2338 = t2582 * t2368 + t2578 * t2617;
t2337 = -t2578 * t2364 + t2582 * t2618;
t2336 = t2582 * t2364 + t2578 * t2618;
t2334 = t2581 * t2388 + t2577 * t2619;
t2331 = t2581 * t2386 + t2577 * t2620;
t2330 = -t2578 * t2356 + t2582 * t2621;
t2329 = t2582 * t2356 + t2578 * t2621;
t2328 = -t2347 * t2586 + t2351 * t2590;
t2324 = t2581 * t2375 + t2577 * t2622;
t2320 = -t2335 * t2586 + t2341 * t2590;
t2319 = -t2578 * t2346 + t2582 * t2623;
t2318 = t2582 * t2346 + t2578 * t2623;
t2317 = -t2332 * t2586 + t2340 * t2590;
t2315 = t2581 * t2352 + t2577 * t2624;
t2314 = -t2325 * t2586 + t2333 * t2590;
t2313 = -t2578 * t2334 + t2582 * t2625;
t2312 = t2582 * t2334 + t2578 * t2625;
t2309 = -t2578 * t2331 + t2582 * t2626;
t2308 = t2582 * t2331 + t2578 * t2626;
t2307 = -t2316 * t2586 + t2323 * t2590;
t2306 = -t2578 * t2324 + t2582 * t2627;
t2305 = t2582 * t2324 + t2578 * t2627;
t2304 = -t2578 * t2315 + t2582 * t2628;
t2303 = t2582 * t2315 + t2578 * t2628;
t2300 = t2581 * t2321 + t2577 * t2629;
t2299 = -t2301 * t2586 + t2302 * t2590;
t2298 = -t2578 * t2300 + t2582 * t2630;
t2297 = t2582 * t2300 + t2578 * t2630;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2558 * t2576 + t2559 * t2580, 0, 0, 0, 0, 0, 0, -t2545 * t2576 + t2556 * t2580, -t2544 * t2576 - t2580 * t2596, 0, -t2465 * t2576 + t2478 * t2580, 0, 0, 0, 0, 0, 0, -t2437 * t2576 + t2461 * t2580, -t2432 * t2576 + t2456 * t2580, -t2429 * t2576 + t2448 * t2580, -t2367 * t2576 + t2393 * t2580, 0, 0, 0, 0, 0, 0, -t2374 * t2576 + t2394 * t2580, -t2381 * t2576 + t2396 * t2580, -t2361 * t2576 + t2390 * t2580, -t2319 * t2576 + t2328 * t2580, 0, 0, 0, 0, 0, 0, -t2337 * t2576 + t2345 * t2580, -t2339 * t2576 + t2350 * t2580, -t2330 * t2576 + t2342 * t2580, -t2304 * t2576 + t2307 * t2580, 0, 0, 0, 0, 0, 0, -t2309 * t2576 + t2317 * t2580, -t2313 * t2576 + t2320 * t2580, -t2306 * t2576 + t2314 * t2580, -t2298 * t2576 + t2299 * t2580; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2558 * t2580 + t2559 * t2576, 0, 0, 0, 0, 0, 0, t2545 * t2580 + t2556 * t2576, t2544 * t2580 - t2576 * t2596, 0, t2465 * t2580 + t2478 * t2576, 0, 0, 0, 0, 0, 0, t2437 * t2580 + t2461 * t2576, t2432 * t2580 + t2456 * t2576, t2429 * t2580 + t2448 * t2576, t2367 * t2580 + t2393 * t2576, 0, 0, 0, 0, 0, 0, t2374 * t2580 + t2394 * t2576, t2381 * t2580 + t2396 * t2576, t2361 * t2580 + t2390 * t2576, t2319 * t2580 + t2328 * t2576, 0, 0, 0, 0, 0, 0, t2337 * t2580 + t2345 * t2576, t2339 * t2580 + t2350 * t2576, t2330 * t2580 + t2342 * t2576, t2304 * t2580 + t2307 * t2576, 0, 0, 0, 0, 0, 0, t2309 * t2580 + t2317 * t2576, t2313 * t2580 + t2320 * t2576, t2306 * t2580 + t2314 * t2576, t2298 * t2580 + t2299 * t2576; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2574, 0, 0, 0, 0, 0, 0, t2543, t2542, 0, t2464, 0, 0, 0, 0, 0, 0, t2436, t2431, t2428, t2366, 0, 0, 0, 0, 0, 0, t2373, t2380, t2360, t2318, 0, 0, 0, 0, 0, 0, t2336, t2338, t2329, t2303, 0, 0, 0, 0, 0, 0, t2308, t2312, t2305, t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2559, 0, 0, 0, 0, 0, 0, t2556, -t2596, 0, t2478, 0, 0, 0, 0, 0, 0, t2461, t2456, t2448, t2393, 0, 0, 0, 0, 0, 0, t2394, t2396, t2390, t2328, 0, 0, 0, 0, 0, 0, t2345, t2350, t2342, t2307, 0, 0, 0, 0, 0, 0, t2317, t2320, t2314, t2299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2558, 0, 0, 0, 0, 0, 0, t2545, t2544, 0, t2465, 0, 0, 0, 0, 0, 0, t2437, t2432, t2429, t2367, 0, 0, 0, 0, 0, 0, t2374, t2381, t2361, t2319, 0, 0, 0, 0, 0, 0, t2337, t2339, t2330, t2304, 0, 0, 0, 0, 0, 0, t2309, t2313, t2306, t2298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2574, 0, 0, 0, 0, 0, 0, t2543, t2542, 0, t2464, 0, 0, 0, 0, 0, 0, t2436, t2431, t2428, t2366, 0, 0, 0, 0, 0, 0, t2373, t2380, t2360, t2318, 0, 0, 0, 0, 0, 0, t2336, t2338, t2329, t2303, 0, 0, 0, 0, 0, 0, t2308, t2312, t2305, t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2591, -qJDD(2), 0, t2509, 0, 0, 0, 0, 0, 0, t2507, t2500, t2488, t2430, 0, 0, 0, 0, 0, 0, t2433, t2442, t2423, t2351, 0, 0, 0, 0, 0, 0, t2384, t2385, t2372, t2323, 0, 0, 0, 0, 0, 0, t2340, t2341, t2333, t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2591, 0, t2508, 0, 0, 0, 0, 0, 0, t2481, t2477, t2474, t2414, 0, 0, 0, 0, 0, 0, t2422, t2427, t2406, t2347, 0, 0, 0, 0, 0, 0, t2365, t2369, t2357, t2316, 0, 0, 0, 0, 0, 0, t2332, t2335, t2325, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2535, 0, 0, 0, 0, 0, 0, t2480, t2476, t2473, t2413, 0, 0, 0, 0, 0, 0, t2421, t2426, t2405, t2346, 0, 0, 0, 0, 0, 0, t2364, t2368, t2356, t2315, 0, 0, 0, 0, 0, 0, t2331, t2334, t2324, t2300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2541, t2538, t2517, t2459, 0, 0, 0, 0, 0, 0, t2467, t2471, t2455, t2378, 0, 0, 0, 0, 0, 0, t2408, t2412, t2400, t2344, 0, 0, 0, 0, 0, 0, t2359, t2363, t2355, t2311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2537, t2527, t2516, t2458, 0, 0, 0, 0, 0, 0, t2466, t2470, t2454, t2377, 0, 0, 0, 0, 0, 0, t2407, t2411, t2399, t2343, 0, 0, 0, 0, 0, 0, t2358, t2362, t2354, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2518, t2515, t2546, t2482, 0, 0, 0, 0, 0, 0, t2484, t2486, t2489, t2460, 0, 0, 0, 0, 0, 0, t2438, t2440, t2419, t2352, 0, 0, 0, 0, 0, 0, t2386, t2388, t2375, t2321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2496, t2498, t2485, t2404, 0, 0, 0, 0, 0, 0, t2439, t2441, t2420, t2353, 0, 0, 0, 0, 0, 0, t2387, t2389, t2376, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2497, t2510, t2487, t2403, 0, 0, 0, 0, 0, 0, -t2450, t2633, -t2468, -t2397, 0, 0, 0, 0, 0, 0, -t2401, -t2409, -t2391, -t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2484, t2486, t2489, t2460, 0, 0, 0, 0, 0, 0, t2438, t2440, t2419, t2352, 0, 0, 0, 0, 0, 0, t2386, t2388, t2375, t2321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2472, t2463, t2451, t2383, 0, 0, 0, 0, 0, 0, t2402, t2410, t2392, t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2462, t2479, t2453, t2382, 0, 0, 0, 0, 0, 0, -t2415, -t2417, -t2443, -t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2450, -t2633, t2468, t2397, 0, 0, 0, 0, 0, 0, t2401, t2409, t2391, t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2449, t2435, t2416, t2349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2434, t2457, t2418, t2348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2415, t2417, t2443, t2370;];
f_new_reg  = t1;
