% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPRP3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:39:53
% EndTime: 2019-05-07 07:40:33
% DurationCPUTime: 19.27s
% Computational Cost: add. (66641->582), mult. (138333->780), div. (0->0), fcn. (101710->10), ass. (0->372)
t387 = cos(qJ(5));
t386 = sin(qJ(2));
t388 = cos(qJ(3));
t385 = sin(qJ(3));
t389 = cos(qJ(2));
t452 = t385 * t389;
t359 = (t386 * t388 + t452) * qJD(1);
t374 = t386 * qJDD(1);
t444 = qJD(1) * qJD(2);
t432 = t389 * t444;
t364 = t374 + t432;
t375 = t389 * qJDD(1);
t433 = t386 * t444;
t365 = t375 - t433;
t423 = t385 * t364 - t388 * t365;
t318 = qJD(3) * t359 + t423;
t317 = qJDD(5) + t318;
t379 = qJD(2) + qJD(3);
t382 = sin(pkin(10));
t383 = cos(pkin(10));
t341 = t359 * t382 - t383 * t379;
t342 = t359 * t383 + t379 * t382;
t384 = sin(qJ(5));
t304 = t387 * t341 + t342 * t384;
t306 = -t341 * t384 + t342 * t387;
t466 = t306 * t304;
t230 = -t466 - t317;
t473 = t230 * t384;
t302 = t306 ^ 2;
t447 = qJD(1) * t386;
t357 = -t388 * t389 * qJD(1) + t385 * t447;
t353 = qJD(5) + t357;
t499 = t353 ^ 2;
t514 = -t302 - t499;
t165 = t387 * t514 + t473;
t472 = t230 * t387;
t167 = -t384 * t514 + t472;
t115 = t165 * t383 + t167 * t382;
t102 = t165 * t382 - t167 * t383;
t409 = t388 * t364 + t385 * t365;
t319 = -qJD(3) * t357 + t409;
t443 = qJDD(2) + qJDD(3);
t307 = t383 * t319 + t382 * t443;
t401 = t382 * t319 - t383 * t443;
t393 = -t304 * qJD(5) + t387 * t307 - t384 * t401;
t467 = t304 * t353;
t510 = t393 - t467;
t83 = t102 * t385 + t388 * t510;
t85 = t102 * t388 - t385 * t510;
t584 = pkin(1) * t115 - pkin(7) * (t386 * t83 - t389 * t85);
t583 = pkin(2) * t83;
t582 = pkin(8) * t83;
t581 = pkin(2) * t115 + pkin(8) * t85;
t501 = t304 ^ 2;
t279 = t501 - t499;
t191 = -t279 * t384 + t472;
t195 = -t279 * t387 - t473;
t142 = t191 * t382 - t195 * t383;
t285 = t353 * t306;
t425 = -t384 * t307 - t387 * t401;
t406 = qJD(5) * t306 - t425;
t181 = -t285 + t406;
t579 = t386 * (t142 * t388 - t181 * t385) + t389 * (t142 * t385 + t181 * t388);
t576 = qJ(4) * t115;
t575 = -pkin(3) * t115 - pkin(4) * t165;
t574 = -pkin(3) * t510 - qJ(4) * t102;
t247 = t501 - t302;
t515 = t285 + t406;
t129 = -t515 * t384 + t387 * t510;
t475 = t510 * t384;
t131 = t515 * t387 + t475;
t72 = t129 * t382 + t131 * t383;
t571 = t386 * (t247 * t385 + t388 * t72) + t389 * (-t247 * t388 + t385 * t72);
t567 = pkin(9) * t165;
t566 = pkin(9) * t167;
t137 = t191 * t383 + t195 * t382;
t509 = -t466 + t317;
t471 = t509 * t384;
t507 = -t499 - t501;
t518 = t387 * t507 - t471;
t225 = t387 * t509;
t519 = t384 * t507 + t225;
t536 = -t382 * t519 + t383 * t518;
t553 = t385 * t536 - t388 * t515;
t565 = pkin(2) * t553;
t564 = pkin(8) * t553;
t535 = t382 * t518 + t383 * t519;
t552 = t385 * t515 + t388 * t536;
t563 = -pkin(2) * t535 + pkin(8) * t552;
t68 = -t129 * t383 + t131 * t382;
t562 = pkin(7) * (-t386 * t553 + t389 * t552) - pkin(1) * t535;
t508 = t467 + t393;
t280 = -t302 + t499;
t537 = t387 * t280 + t471;
t538 = -t280 * t384 + t225;
t550 = -t382 * t537 + t383 * t538;
t561 = t386 * (t385 * t508 + t388 * t550) + t389 * (t385 * t550 - t388 * t508);
t558 = qJ(4) * t535;
t555 = -pkin(3) * t535 - pkin(4) * t519;
t554 = -pkin(3) * t515 + qJ(4) * t536;
t551 = t382 * t538 + t383 * t537;
t214 = -t501 - t302;
t549 = pkin(3) * t214;
t548 = pkin(4) * t214;
t546 = pkin(9) * t518;
t545 = pkin(9) * t519;
t544 = t214 * t385;
t543 = t214 * t388;
t532 = qJ(6) * t510;
t311 = t342 * t341;
t513 = -t311 + t318;
t531 = t382 * t513;
t530 = t383 * t513;
t335 = t359 * t357;
t511 = -t335 + t443;
t526 = t385 * t511;
t521 = t388 * t511;
t441 = t388 * t466;
t442 = t385 * t466;
t458 = t353 * t387;
t440 = t304 * t458;
t407 = t384 * t406 + t440;
t459 = t353 * t384;
t416 = t304 * t459 - t387 * t406;
t503 = -t382 * t416 + t383 * t407;
t517 = t386 * (t388 * t503 - t442) + t389 * (t385 * t503 + t441);
t404 = (-t304 * t384 - t306 * t387) * t353;
t277 = t306 * t459;
t415 = t277 - t440;
t504 = -t382 * t404 + t383 * t415;
t516 = t386 * (t317 * t385 + t388 * t504) + t389 * (-t388 * t317 + t385 * t504);
t350 = t379 * t357;
t294 = t319 - t350;
t381 = t389 ^ 2;
t494 = sin(qJ(1));
t495 = cos(qJ(1));
t418 = g(1) * t494 - t495 * g(2);
t402 = qJDD(1) * pkin(1) + t418;
t496 = qJD(1) ^ 2;
t321 = (pkin(8) * t381 + pkin(7)) * t496 + t365 * pkin(2) - (qJD(2) * pkin(2) - pkin(8) * t447) * t447 + t402;
t210 = -t294 * qJ(4) + (t359 * t379 + t318) * pkin(3) - t321;
t403 = g(1) * t495 + g(2) * t494;
t483 = qJDD(1) * pkin(7);
t399 = -t403 + t483;
t397 = -pkin(1) * t496 + t399;
t396 = t386 * t397;
t491 = t364 * pkin(8);
t414 = qJDD(2) * pkin(2) - t491;
t390 = qJD(2) ^ 2;
t488 = pkin(8) * qJD(2);
t490 = t386 * g(3);
t312 = t389 * t399 - t490 + t365 * pkin(8) - t390 * pkin(2) + (t386 * t488 + (-pkin(1) * t389 - pkin(2) * t381) * qJD(1)) * qJD(1);
t450 = t388 * t312;
t254 = t450 + t385 * (-t396 + t414) + (-g(3) + (pkin(2) * t447 + t488) * qJD(1)) * t452;
t331 = pkin(3) * t357 - qJ(4) * t359;
t497 = t379 ^ 2;
t224 = -pkin(3) * t497 + qJ(4) * t443 - t357 * t331 + t254;
t145 = 0.2e1 * qJD(4) * t342 - t383 * t210 + t382 * t224;
t146 = -0.2e1 * qJD(4) * t341 + t382 * t210 + t383 * t224;
t95 = t382 * t145 + t383 * t146;
t325 = t357 * t341;
t266 = -t325 - t307;
t512 = -t325 + t307;
t246 = pkin(5) * t304 - qJ(6) * t306;
t108 = pkin(4) * t513 + pkin(9) * t266 - t145;
t322 = pkin(4) * t357 - pkin(9) * t342;
t500 = t341 ^ 2;
t126 = -pkin(4) * t500 - pkin(9) * t401 - t357 * t322 + t146;
t65 = t384 * t108 + t387 * t126;
t419 = -t317 * qJ(6) + t304 * t246 - t65;
t506 = -pkin(5) * (t514 + t499) - qJ(6) * t230 - t419;
t505 = t382 * t415 + t383 * t404;
t502 = t382 * t407 + t383 * t416;
t340 = t342 ^ 2;
t498 = t357 ^ 2;
t356 = t359 ^ 2;
t493 = pkin(3) * t385;
t492 = pkin(5) * t387;
t489 = t389 * g(3);
t64 = -t387 * t108 + t126 * t384;
t37 = t384 * t65 - t387 * t64;
t487 = t37 * t382;
t486 = t37 * t383;
t253 = t385 * t312 - t388 * (-t386 * t399 - t489 + (t389 * t488 + (t389 * pkin(2) + pkin(1)) * t447) * qJD(1) + t414);
t223 = -t443 * pkin(3) - t497 * qJ(4) + t359 * t331 + qJDD(4) + t253;
t485 = -pkin(3) * t223 + qJ(4) * t95;
t484 = qJ(6) * t387;
t150 = t401 * pkin(4) - t500 * pkin(9) + t342 * t322 + t223;
t482 = t150 * t384;
t481 = t150 * t387;
t476 = t508 * t384;
t197 = -t253 * t388 + t254 * t385;
t474 = t197 * t386;
t268 = t311 + t318;
t470 = t268 * t382;
t469 = t268 * t383;
t464 = t318 * t385;
t463 = t321 * t385;
t462 = t321 * t388;
t329 = t335 + t443;
t461 = t329 * t385;
t460 = t329 * t388;
t457 = t357 * t342;
t456 = t357 * t382;
t455 = t357 * t383;
t454 = t379 * t385;
t453 = t379 * t388;
t217 = t382 * t223;
t218 = t383 * t223;
t370 = t389 * t496 * t386;
t367 = qJDD(2) + t370;
t451 = t386 * t367;
t449 = t389 * (qJDD(2) - t370);
t446 = qJD(6) * t353;
t445 = qJD(3) + t379;
t439 = t385 * t311;
t438 = t388 * t311;
t308 = -t340 - t498;
t233 = -t308 * t382 - t469;
t437 = -pkin(3) * t512 + qJ(4) * t233 + t217;
t289 = -t498 - t500;
t220 = t289 * t383 - t531;
t261 = t401 + t457;
t436 = -pkin(3) * t261 + qJ(4) * t220 - t218;
t435 = -pkin(3) * t388 - pkin(2);
t349 = 0.2e1 * t446;
t411 = t349 - t419;
t55 = -pkin(5) * t499 + t411;
t56 = -t317 * pkin(5) - qJ(6) * t499 + t246 * t306 + qJDD(6) + t64;
t31 = t384 * t55 - t387 * t56;
t32 = t384 * t56 + t387 * t55;
t11 = -t31 * t382 + t32 * t383;
t430 = -qJ(6) * t384 - pkin(4);
t392 = t406 * pkin(5) + t150 - t532;
t80 = t392 + (pkin(5) * t353 - 0.2e1 * qJD(6)) * t306;
t13 = pkin(9) * t32 + (t430 - t492) * t80;
t17 = -pkin(9) * t31 + (pkin(5) * t384 - t484) * t80;
t431 = -pkin(3) * t80 + qJ(4) * t11 + t383 * t13 + t382 * t17;
t38 = t384 * t64 + t387 * t65;
t132 = -t181 * t387 + t476;
t53 = (-t214 - t499) * pkin(5) + t411;
t54 = -qJ(6) * t214 + t56;
t24 = pkin(9) * t132 + t384 * t54 + t387 * t53 - t548;
t175 = t387 * t508;
t128 = -t181 * t384 - t175;
t26 = -pkin(9) * t128 - t384 * t53 + t387 * t54;
t73 = -t128 * t382 + t132 * t383;
t429 = qJ(4) * t73 + t383 * t24 + t382 * t26 - t549;
t183 = (-qJD(5) + t353) * t306 + t425;
t134 = t183 * t387 + t476;
t28 = pkin(9) * t134 + t38 - t548;
t130 = t183 * t384 - t175;
t30 = -pkin(9) * t130 - t37;
t75 = -t130 * t382 + t134 * t383;
t428 = qJ(4) * t75 + t383 * t28 + t382 * t30 - t549;
t391 = 0.2e1 * qJD(6) * t306 - t392;
t61 = -pkin(5) * t285 + t391 + t532;
t44 = -t566 + t384 * t61 + (pkin(4) + t492) * t510;
t49 = -pkin(5) * t475 + t387 * t61 + t567;
t427 = t382 * t49 + t383 * t44 - t574;
t82 = -pkin(4) * t515 - t481 + t546;
t97 = t482 - t545;
t426 = t382 * t97 + t383 * t82 + t554;
t198 = t253 * t385 + t388 * t254;
t345 = t396 + t489;
t346 = t389 * t397 - t490;
t424 = t386 * t345 + t389 * t346;
t62 = (-t515 - t285) * pkin(5) + t391;
t46 = t387 * t62 + t430 * t515 + t546;
t51 = -t384 * t62 - t484 * t515 - t545;
t422 = t382 * t51 + t383 * t46 + t554;
t105 = t481 - t567;
t88 = -pkin(4) * t510 + t482 + t566;
t421 = t382 * t105 + t383 * t88 + t574;
t262 = t401 - t457;
t203 = -t262 * t383 - t266 * t382;
t276 = -t340 - t500;
t420 = -pkin(3) * t276 + qJ(4) * t203 + t95;
t417 = -pkin(5) * t56 + qJ(6) * t55;
t413 = -pkin(5) * t508 - qJ(6) * t181;
t410 = -t145 * t383 + t146 * t382;
t20 = t38 * t383 - t487;
t35 = -pkin(4) * t150 + pkin(9) * t38;
t408 = -pkin(3) * t150 - pkin(9) * t487 + qJ(4) * t20 + t383 * t35;
t400 = (-qJD(3) + t379) * t359 - t423;
t173 = t306 * t458 + t384 * t393;
t174 = t387 * t393 - t277;
t124 = -t173 * t382 + t174 * t383;
t395 = t386 * (t388 * t124 + t442) + t389 * (t385 * t124 - t441);
t394 = pkin(5) * t509 + qJ(6) * t507 - t56;
t380 = t386 ^ 2;
t377 = t381 * t496;
t376 = t380 * t496;
t366 = t375 - 0.2e1 * t433;
t363 = t374 + 0.2e1 * t432;
t360 = pkin(7) * t496 + t402;
t348 = -t356 + t497;
t347 = t498 - t497;
t344 = -t356 - t497;
t333 = t356 - t498;
t327 = -t498 - t497;
t324 = -t340 + t498;
t323 = -t498 + t500;
t320 = -t498 - t356;
t315 = t388 * t318;
t310 = -t340 + t500;
t297 = -t344 * t385 - t460;
t296 = t344 * t388 - t461;
t295 = t319 + t350;
t293 = -t357 * t445 + t409;
t290 = t359 * t445 + t423;
t283 = t327 * t388 - t526;
t282 = t327 * t385 + t521;
t273 = (-t341 * t383 + t342 * t382) * t357;
t272 = (-t341 * t382 - t342 * t383) * t357;
t258 = t307 * t383 - t342 * t456;
t257 = t307 * t382 + t342 * t455;
t256 = t341 * t455 + t382 * t401;
t255 = t341 * t456 - t383 * t401;
t243 = t295 * t385 + t388 * t400;
t242 = -t295 * t388 + t385 * t400;
t241 = t323 * t383 - t470;
t240 = -t324 * t382 + t530;
t239 = t323 * t382 + t469;
t238 = t324 * t383 + t531;
t232 = t308 * t383 - t470;
t219 = t289 * t382 + t530;
t202 = -t261 * t383 - t382 * t512;
t201 = -t262 * t382 + t266 * t383;
t200 = -t261 * t382 + t383 * t512;
t164 = t233 * t388 + t385 * t512;
t163 = t233 * t385 - t388 * t512;
t162 = t220 * t388 + t261 * t385;
t161 = t220 * t385 - t261 * t388;
t160 = t203 * t388 + t276 * t385;
t159 = t203 * t385 - t276 * t388;
t148 = -qJ(4) * t232 + t218;
t147 = -qJ(4) * t219 + t217;
t121 = t173 * t383 + t174 * t382;
t110 = -pkin(3) * t232 + t146;
t109 = -pkin(3) * t219 + t145;
t77 = -t223 * t388 + t385 * t95;
t76 = -qJ(4) * t201 - t410;
t71 = t130 * t383 + t134 * t382;
t69 = t128 * t383 + t132 * t382;
t60 = t388 * t75 + t544;
t59 = t388 * t73 + t544;
t58 = t385 * t75 - t543;
t57 = t385 * t73 - t543;
t52 = -pkin(3) * t71 - pkin(4) * t130;
t47 = t575 + t65;
t43 = t105 * t383 - t382 * t88 - t576;
t41 = t555 + t64;
t40 = -pkin(3) * t69 - pkin(4) * t128 - t413;
t39 = -t382 * t82 + t383 * t97 - t558;
t36 = -t394 + t555;
t33 = -0.2e1 * t446 - t506 - t575;
t22 = -t382 * t46 + t383 * t51 - t558;
t21 = -t382 * t44 + t383 * t49 + t576;
t19 = t38 * t382 + t486;
t15 = t150 * t385 + t20 * t388;
t14 = -t150 * t388 + t20 * t385;
t10 = t31 * t383 + t32 * t382;
t8 = t11 * t388 + t385 * t80;
t7 = t11 * t385 - t388 * t80;
t6 = -pkin(3) * t19 - pkin(4) * t37;
t5 = -qJ(4) * t71 - t28 * t382 + t30 * t383;
t4 = -qJ(4) * t69 - t24 * t382 + t26 * t383;
t3 = -pkin(9) * t486 - qJ(4) * t19 - t35 * t382;
t2 = -pkin(3) * t10 - pkin(4) * t31 - t417;
t1 = -qJ(4) * t10 - t13 * t382 + t17 * t383;
t9 = [0, 0, 0, 0, 0, qJDD(1), t418, t403, 0, 0, (t364 + t432) * t386, t363 * t389 + t366 * t386, t451 + t389 * (-t376 + t390), (t365 - t433) * t389, t386 * (t377 - t390) + t449, 0, t389 * t360 + pkin(1) * t366 + pkin(7) * (t389 * (-t377 - t390) - t451), -t386 * t360 - pkin(1) * t363 + pkin(7) * (-t449 - t386 * (-t376 - t390)), pkin(1) * (t376 + t377) + (t380 + t381) * t483 + t424, pkin(1) * t360 + pkin(7) * t424, t386 * (t319 * t388 - t359 * t454) + t389 * (t319 * t385 + t359 * t453), t386 * (-t290 * t388 - t294 * t385) + t389 * (-t290 * t385 + t294 * t388), t386 * (-t348 * t385 + t521) + t389 * (t348 * t388 + t526), t386 * (t357 * t453 + t464) + t389 * (t357 * t454 - t315), t386 * (t347 * t388 - t461) + t389 * (t347 * t385 + t460), (t386 * (-t357 * t388 + t359 * t385) + t389 * (-t357 * t385 - t359 * t388)) * t379, t386 * (-pkin(8) * t282 - t463) + t389 * (-pkin(2) * t290 + pkin(8) * t283 + t462) - pkin(1) * t290 + pkin(7) * (-t282 * t386 + t283 * t389), t386 * (-pkin(8) * t296 - t462) + t389 * (-pkin(2) * t293 + pkin(8) * t297 - t463) - pkin(1) * t293 + pkin(7) * (-t296 * t386 + t297 * t389), t386 * (-pkin(8) * t242 - t197) + t389 * (-pkin(2) * t320 + pkin(8) * t243 + t198) - pkin(1) * t320 + pkin(7) * (-t242 * t386 + t243 * t389), -pkin(8) * t474 + t389 * (pkin(2) * t321 + pkin(8) * t198) + pkin(1) * t321 + pkin(7) * (t198 * t389 - t474), t386 * (t258 * t388 + t439) + t389 * (t258 * t385 - t438), t386 * (t202 * t388 - t310 * t385) + t389 * (t202 * t385 + t310 * t388), t386 * (t240 * t388 - t266 * t385) + t389 * (t240 * t385 + t266 * t388), t386 * (t256 * t388 - t439) + t389 * (t256 * t385 + t438), t386 * (t241 * t388 - t262 * t385) + t389 * (t241 * t385 + t262 * t388), t386 * (t273 * t388 + t464) + t389 * (t273 * t385 - t315), t386 * (-pkin(8) * t161 - t109 * t385 + t147 * t388) + t389 * (-pkin(2) * t219 + pkin(8) * t162 + t109 * t388 + t147 * t385) - pkin(1) * t219 + pkin(7) * (-t161 * t386 + t162 * t389), t386 * (-pkin(8) * t163 - t110 * t385 + t148 * t388) + t389 * (-pkin(2) * t232 + pkin(8) * t164 + t110 * t388 + t148 * t385) - pkin(1) * t232 + pkin(7) * (-t163 * t386 + t164 * t389), t386 * (-pkin(8) * t159 + t388 * t76) + t389 * (pkin(8) * t160 + t385 * t76) + pkin(7) * (-t159 * t386 + t160 * t389) + (t386 * t493 + t389 * t435 - pkin(1)) * t201, (t386 * (-qJ(4) * t388 + t493) + t389 * (-qJ(4) * t385 + t435) - pkin(1)) * t410 + (pkin(7) + pkin(8)) * (-t386 * t77 + t389 * (t223 * t385 + t388 * t95)), t395, -t571, t561, t517, t579, t516, t386 * (-t385 * t41 + t388 * t39 - t564) + t389 * (t385 * t39 + t388 * t41 + t563) + t562, t386 * (-t385 * t47 + t388 * t43 + t582) + t389 * (t385 * t43 + t388 * t47 - t581) - t584, t386 * (-pkin(8) * t58 - t385 * t52 + t388 * t5) + t389 * (-pkin(2) * t71 + pkin(8) * t60 + t385 * t5 + t388 * t52) - pkin(1) * t71 + pkin(7) * (-t386 * t58 + t389 * t60), t386 * (-pkin(8) * t14 + t3 * t388 - t385 * t6) + t389 * (-pkin(2) * t19 + pkin(8) * t15 + t3 * t385 + t388 * t6) - pkin(1) * t19 + pkin(7) * (-t14 * t386 + t15 * t389), t395, t561, t571, t516, -t579, t517, t386 * (t22 * t388 - t36 * t385 - t564) + t389 * (t22 * t385 + t36 * t388 + t563) + t562, t386 * (-pkin(8) * t57 - t385 * t40 + t388 * t4) + t389 * (-pkin(2) * t69 + pkin(8) * t59 + t385 * t4 + t388 * t40) - pkin(1) * t69 + pkin(7) * (-t386 * t57 + t389 * t59), t386 * (t21 * t388 - t33 * t385 - t582) + t389 * (t21 * t385 + t33 * t388 + t581) + t584, t386 * (-pkin(8) * t7 + t1 * t388 - t2 * t385) + t389 * (-pkin(2) * t10 + pkin(8) * t8 + t1 * t385 + t2 * t388) - pkin(1) * t10 + pkin(7) * (-t386 * t7 + t389 * t8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t370, t376 - t377, t374, t370, t375, qJDD(2), -t345, -t346, 0, 0, t335, t333, t295, -t335, t400, t443, pkin(2) * t282 - t253, -t450 - t385 * (pkin(8) * t432 - t345 - t491) + (-t367 * t385 + t296) * pkin(2), pkin(2) * t242, pkin(2) * t197, t257, t200, t238, t255, t239, t272, pkin(2) * t161 + t436, pkin(2) * t163 + t437, pkin(2) * t159 + t420, pkin(2) * t77 + t485, t121, -t68, t551, t502, -t137, t505, t426 + t565, t421 - t583, pkin(2) * t58 + t428, pkin(2) * t14 + t408, t121, t551, t68, t505, t137, t502, t422 + t565, pkin(2) * t57 + t429, t427 + t583, pkin(2) * t7 + t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, t333, t295, -t335, t400, t443, -t253, -t254, 0, 0, t257, t200, t238, t255, t239, t272, t436, t437, t420, t485, t121, -t68, t551, t502, -t137, t505, t426, t421, t428, t408, t121, t551, t68, t505, t137, t502, t422, t429, t427, t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t261, t512, t276, t223, 0, 0, 0, 0, 0, 0, t515, t510, t214, t150, 0, 0, 0, 0, 0, 0, t515, t214, -t510, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t466, -t247, t508, -t466, -t181, t317, -t64, -t65, 0, 0, t466, t508, t247, t317, t181, -t466, t394, t413, t349 + t506, t417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t509, t508, t514, t56;];
tauJ_reg  = t9;
