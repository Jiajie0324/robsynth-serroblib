% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:40:33
% EndTime: 2019-05-07 07:41:35
% DurationCPUTime: 57.60s
% Computational Cost: add. (196382->824), mult. (408307->1193), div. (0->0), fcn. (299496->10), ass. (0->588)
t1171 = sin(qJ(1));
t1175 = cos(qJ(1));
t1170 = sin(qJ(2));
t1174 = cos(qJ(2));
t1169 = sin(qJ(3));
t1173 = cos(qJ(3));
t1129 = (t1169 * t1174 + t1170 * t1173) * qJD(1);
t1163 = qJD(2) + qJD(3);
t1166 = sin(pkin(10));
t1167 = cos(pkin(10));
t1099 = t1129 * t1166 - t1163 * t1167;
t1100 = t1129 * t1167 + t1163 * t1166;
t1168 = sin(qJ(5));
t1172 = cos(qJ(5));
t1045 = t1172 * t1099 + t1100 * t1168;
t1249 = qJD(1) * t1174;
t1250 = qJD(1) * t1170;
t1127 = t1169 * t1250 - t1173 * t1249;
t1205 = qJD(2) * t1249;
t1219 = qJDD(1) * t1170;
t1137 = t1205 + t1219;
t1159 = t1174 * qJDD(1);
t1213 = qJD(2) * t1250;
t1138 = t1159 - t1213;
t1185 = qJD(3) * t1127 - t1137 * t1173 - t1138 * t1169;
t1216 = qJDD(2) + qJDD(3);
t1048 = t1166 * t1216 - t1167 * t1185;
t1186 = -t1166 * t1185 - t1167 * t1216;
t1181 = -t1045 * qJD(5) + t1172 * t1048 - t1168 * t1186;
t1122 = qJD(5) + t1127;
t1244 = t1045 * t1122;
t1287 = t1181 - t1244;
t1202 = t1169 * t1137 - t1173 * t1138;
t1066 = qJD(3) * t1129 + t1202;
t1063 = qJDD(5) + t1066;
t1047 = -t1099 * t1168 + t1100 * t1172;
t984 = t1047 * t1045;
t1291 = t1063 + t984;
t1262 = t1168 * t1291;
t1043 = t1047 ^ 2;
t1276 = t1122 ^ 2;
t976 = t1276 + t1043;
t866 = t1172 * t976 + t1262;
t1255 = t1172 * t1291;
t885 = t1168 * t976 - t1255;
t809 = t1166 * t866 + t1167 * t885;
t755 = t1169 * t809 - t1173 * t1287;
t757 = t1169 * t1287 + t1173 * t809;
t693 = t1170 * t755 - t1174 * t757;
t807 = t1166 * t885 - t1167 * t866;
t669 = t1171 * t693 + t1175 * t807;
t1415 = pkin(6) * t669;
t671 = -t1171 * t807 + t1175 * t693;
t1414 = pkin(6) * t671;
t698 = t1170 * t757 + t1174 * t755;
t1413 = pkin(7) * t698;
t1412 = pkin(1) * t698 + pkin(2) * t755 - pkin(3) * t1287 + qJ(4) * t809;
t1411 = pkin(1) * t807 + pkin(7) * t693;
t1278 = t1045 ^ 2;
t1011 = t1278 - t1276;
t910 = t1011 * t1168 + t1255;
t914 = t1011 * t1172 - t1262;
t838 = t1166 * t910 - t1167 * t914;
t1203 = t1168 * t1048 + t1172 * t1186;
t895 = (qJD(5) - t1122) * t1047 + t1203;
t765 = t1169 * t838 - t1173 * t895;
t769 = t1169 * t895 + t1173 * t838;
t708 = t1170 * t765 - t1174 * t769;
t834 = t1166 * t914 + t1167 * t910;
t1410 = t1171 * t708 - t1175 * t834;
t894 = (qJD(5) + t1122) * t1047 + t1203;
t822 = -t1168 * t894 + t1172 * t1287;
t1264 = t1168 * t1287;
t824 = t1172 * t894 + t1264;
t740 = t1166 * t822 + t1167 * t824;
t981 = t1278 - t1043;
t725 = t1169 * t740 - t1173 * t981;
t727 = t1169 * t981 + t1173 * t740;
t674 = t1170 * t725 - t1174 * t727;
t738 = t1166 * t824 - t1167 * t822;
t1409 = t1171 * t674 + t1175 * t738;
t1408 = t1171 * t834 + t1175 * t708;
t1407 = -t1171 * t738 + t1175 * t674;
t1406 = pkin(8) * t755;
t1404 = pkin(2) * t807 - pkin(8) * t757;
t1403 = t1170 * t727 + t1174 * t725;
t1402 = t1170 * t769 + t1174 * t765;
t1286 = -t1244 - t1181;
t1324 = -t1168 * t1286 - t1172 * t895;
t1325 = -t1168 * t895 + t1172 * t1286;
t1338 = t1166 * t1324 + t1167 * t1325;
t1339 = -t1166 * t1325 + t1167 * t1324;
t936 = -t1278 - t1043;
t1360 = t1169 * t936 + t1173 * t1339;
t1362 = t1169 * t1339 - t1173 * t936;
t1378 = -t1170 * t1362 + t1174 * t1360;
t1382 = t1171 * t1338 + t1175 * t1378;
t1401 = pkin(6) * t1382;
t1384 = t1171 * t1378 - t1175 * t1338;
t1400 = pkin(6) * t1384;
t1377 = t1170 * t1360 + t1174 * t1362;
t1397 = pkin(7) * t1377;
t1396 = qJ(4) * t807;
t1389 = pkin(3) * t807 - pkin(4) * t866;
t1388 = -pkin(1) * t1377 - pkin(2) * t1362 + pkin(3) * t936 - qJ(4) * t1339;
t1387 = -pkin(1) * t1338 + pkin(7) * t1378;
t1012 = -t1043 + t1276;
t1292 = t1063 - t984;
t943 = t1172 * t1292;
t1314 = -t1012 * t1168 + t943;
t1261 = t1168 * t1292;
t1326 = t1172 * t1012 + t1261;
t1344 = -t1166 * t1314 - t1167 * t1326;
t1345 = -t1166 * t1326 + t1167 * t1314;
t1361 = -t1169 * t1286 + t1173 * t1345;
t1363 = t1169 * t1345 + t1173 * t1286;
t1376 = -t1170 * t1363 + t1174 * t1361;
t1385 = t1171 * t1376 + t1175 * t1344;
t1383 = -t1171 * t1344 + t1175 * t1376;
t1381 = pkin(8) * t1362;
t1379 = -pkin(2) * t1338 + pkin(8) * t1360;
t1375 = t1170 * t1361 + t1174 * t1363;
t1373 = pkin(9) * t866;
t1372 = pkin(9) * t885;
t1369 = qJ(4) * t1338;
t702 = -pkin(3) * t1338 - pkin(4) * t1325;
t1285 = -t1276 - t1278;
t1296 = t1172 * t1285 - t1261;
t1300 = t1168 * t1285 + t943;
t1322 = t1166 * t1296 + t1167 * t1300;
t1359 = pkin(1) * t1322;
t1358 = pkin(2) * t1322;
t1356 = pkin(9) * t1325;
t1355 = qJ(4) * t1322;
t1323 = -t1166 * t1300 + t1167 * t1296;
t1354 = qJ(4) * t1323;
t1351 = t1169 * t1323;
t1350 = t1171 * t1322;
t1349 = t1173 * t1323;
t1348 = t1175 * t1322;
t1347 = -pkin(3) * t1322 - pkin(4) * t1300;
t1346 = -pkin(4) * t936 + pkin(9) * t1324;
t1187 = (-t1045 * t1168 - t1047 * t1172) * t1122;
t1236 = t1122 * t1168;
t1009 = t1047 * t1236;
t1235 = t1122 * t1172;
t1210 = t1045 * t1235;
t1193 = t1009 - t1210;
t1284 = -t1166 * t1193 - t1167 * t1187;
t1283 = -t1166 * t1187 + t1167 * t1193;
t1294 = t1063 * t1169 + t1173 * t1283;
t1298 = -t1173 * t1063 + t1169 * t1283;
t1321 = -t1170 * t1298 + t1174 * t1294;
t1343 = t1171 * t1321 + t1175 * t1284;
t931 = -qJD(5) * t1047 - t1203;
t1189 = -t1168 * t931 + t1210;
t1194 = t1045 * t1236 + t1172 * t931;
t1281 = -t1166 * t1189 - t1167 * t1194;
t1212 = t1169 * t984;
t1282 = -t1166 * t1194 + t1167 * t1189;
t1295 = t1173 * t1282 - t1212;
t1211 = t1173 * t984;
t1297 = t1169 * t1282 + t1211;
t1319 = -t1170 * t1297 + t1174 * t1295;
t1342 = t1171 * t1319 + t1175 * t1281;
t1341 = -t1171 * t1284 + t1175 * t1321;
t1340 = -t1171 * t1281 + t1175 * t1319;
t1334 = pkin(9) * t1296;
t1333 = pkin(9) * t1300;
t1320 = t1170 * t1294 + t1174 * t1298;
t1318 = t1170 * t1295 + t1174 * t1297;
t1317 = 2 * qJD(6);
t1315 = qJ(6) * t1287;
t1054 = t1100 * t1099;
t1290 = -t1054 + t1066;
t1313 = t1166 * t1290;
t1312 = t1167 * t1290;
t1090 = t1129 * t1127;
t1289 = -t1090 + t1216;
t1309 = t1169 * t1289;
t1304 = t1173 * t1289;
t1119 = t1163 * t1127;
t1301 = t1185 + t1119;
t891 = t1047 * t1235 + t1168 * t1181;
t892 = t1172 * t1181 - t1009;
t816 = -t1166 * t891 + t1167 * t892;
t1195 = t1169 * t816 - t1211;
t1196 = t1173 * t816 + t1212;
t1279 = -t1170 * t1195 + t1174 * t1196;
t813 = -t1166 * t892 - t1167 * t891;
t1299 = t1171 * t1279 + t1175 * t813;
t1293 = -t1171 * t813 + t1175 * t1279;
t1081 = t1127 * t1099;
t997 = -t1081 - t1048;
t996 = -t1081 + t1048;
t1165 = t1174 ^ 2;
t1177 = qJD(1) ^ 2;
t1147 = t1171 * g(1) - t1175 * g(2);
t1190 = qJDD(1) * pkin(1) + t1147;
t1191 = qJD(2) * pkin(2) - pkin(8) * t1250;
t1069 = t1138 * pkin(2) + (pkin(8) * t1165 + pkin(7)) * t1177 - t1191 * t1250 + t1190;
t933 = t1301 * qJ(4) + (t1129 * t1163 + t1066) * pkin(3) - t1069;
t1086 = pkin(3) * t1127 - qJ(4) * t1129;
t1274 = t1163 ^ 2;
t1148 = g(1) * t1175 + g(2) * t1171;
t1183 = -pkin(1) * t1177 + qJDD(1) * pkin(7) - t1148;
t1112 = -t1170 * g(3) + t1174 * t1183;
t1161 = t1165 * t1177;
t1058 = -pkin(2) * t1161 + t1138 * pkin(8) - qJD(2) * t1191 + t1112;
t1182 = t1170 * t1183;
t1223 = t1170 * t1177;
t1251 = qJD(1) * qJD(2);
t1178 = -t1182 - t1137 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1223 + pkin(8) * t1251 - g(3)) * t1174;
t988 = t1173 * t1058 + t1169 * t1178;
t942 = -pkin(3) * t1274 + qJ(4) * t1216 - t1127 * t1086 + t988;
t846 = 0.2e1 * qJD(4) * t1100 + t1166 * t942 - t1167 * t933;
t796 = pkin(4) * t1290 + pkin(9) * t997 - t846;
t1070 = pkin(4) * t1127 - pkin(9) * t1100;
t1277 = t1099 ^ 2;
t847 = -0.2e1 * qJD(4) * t1099 + t1166 * t933 + t1167 * t942;
t819 = -pkin(4) * t1277 - pkin(9) * t1186 - t1127 * t1070 + t847;
t734 = t1168 * t796 + t1172 * t819;
t980 = pkin(5) * t1045 - qJ(6) * t1047;
t1192 = t1063 * qJ(6) - t1045 * t980 + t1122 * t1317 + t734;
t1028 = (qJD(3) - t1163) * t1129 + t1202;
t1280 = t1170 * t1196 + t1174 * t1195;
t1098 = t1100 ^ 2;
t1275 = t1127 ^ 2;
t1126 = t1129 ^ 2;
t1273 = pkin(3) * t1169;
t1272 = pkin(5) * t1172;
t733 = t1168 * t819 - t1172 * t796;
t1271 = qJ(6) * t1172;
t675 = t1168 * t734 - t1172 * t733;
t1270 = t1166 * t675;
t987 = t1169 * t1058 - t1173 * t1178;
t941 = -t1216 * pkin(3) - t1274 * qJ(4) + t1129 * t1086 + qJDD(4) + t987;
t1269 = t1166 * t941;
t1268 = t1167 * t675;
t1267 = t1167 * t941;
t860 = t1186 * pkin(4) - t1277 * pkin(9) + t1100 * t1070 + t941;
t1266 = t1168 * t860;
t917 = t1169 * t988 - t1173 * t987;
t1259 = t1170 * t917;
t1257 = t1172 * t860;
t1253 = t1174 * t917;
t1252 = -t1276 - t936;
t1000 = t1054 + t1066;
t1247 = t1000 * t1166;
t1246 = t1000 * t1167;
t1242 = t1066 * t1169;
t1241 = t1069 * t1169;
t1240 = t1069 * t1173;
t1084 = t1090 + t1216;
t1239 = t1084 * t1169;
t1238 = t1084 * t1173;
t1237 = t1122 * t1047;
t1234 = t1127 * t1100;
t1233 = t1127 * t1166;
t1232 = t1127 * t1167;
t1130 = t1177 * pkin(7) + t1190;
t1231 = t1130 * t1170;
t1230 = t1130 * t1174;
t1155 = t1174 * t1223;
t1145 = qJDD(2) + t1155;
t1229 = t1145 * t1170;
t1146 = qJDD(2) - t1155;
t1228 = t1146 * t1170;
t1227 = t1146 * t1174;
t1226 = t1163 * t1169;
t1225 = t1163 * t1173;
t1164 = t1170 ^ 2;
t1224 = t1164 * t1177;
t1220 = t1164 + t1165;
t1218 = qJDD(1) * t1171;
t1217 = qJDD(1) * t1175;
t1215 = -pkin(3) * t1173 - pkin(2);
t1209 = t1169 * t1054;
t1208 = t1173 * t1054;
t1207 = t1171 * t1090;
t1206 = t1175 * t1090;
t1204 = -qJ(6) * t1168 - pkin(4);
t676 = t1168 * t733 + t1172 * t734;
t918 = t1169 * t987 + t1173 * t988;
t1111 = t1174 * g(3) + t1182;
t1057 = t1111 * t1170 + t1174 * t1112;
t1103 = -t1147 * t1171 - t1175 * t1148;
t1200 = t1047 * t980 + qJDD(6) + t733;
t1199 = t1171 * t1155;
t1198 = t1175 * t1155;
t1142 = -t1171 * t1177 + t1217;
t1197 = -pkin(6) * t1142 - g(3) * t1171;
t761 = t1166 * t847 - t1167 * t846;
t762 = t1166 * t846 + t1167 * t847;
t1056 = t1111 * t1174 - t1112 * t1170;
t1102 = t1147 * t1175 - t1148 * t1171;
t1188 = -pkin(5) * t1063 + t1200;
t993 = t1186 - t1234;
t1180 = -t931 * pkin(5) - t1315 + t860;
t1179 = t1047 * t1317 - t1180;
t1176 = qJD(2) ^ 2;
t1152 = -t1161 - t1176;
t1151 = t1161 - t1176;
t1150 = -t1176 - t1224;
t1149 = t1176 - t1224;
t1144 = t1161 - t1224;
t1143 = t1161 + t1224;
t1141 = t1175 * t1177 + t1218;
t1140 = t1220 * qJDD(1);
t1139 = t1159 - 0.2e1 * t1213;
t1136 = 0.2e1 * t1205 + t1219;
t1134 = t1174 * t1145;
t1133 = t1220 * t1251;
t1123 = -pkin(6) * t1141 + g(3) * t1175;
t1116 = -t1126 + t1274;
t1115 = t1275 - t1274;
t1114 = t1137 * t1174 - t1164 * t1251;
t1113 = -t1138 * t1170 - t1165 * t1251;
t1110 = -t1126 - t1274;
t1109 = -t1150 * t1170 - t1227;
t1108 = -t1149 * t1170 + t1134;
t1107 = t1152 * t1174 - t1229;
t1106 = t1151 * t1174 - t1228;
t1105 = t1150 * t1174 - t1228;
t1104 = t1152 * t1170 + t1134;
t1097 = t1140 * t1175 - t1143 * t1171;
t1096 = t1140 * t1171 + t1143 * t1175;
t1091 = -t1136 * t1170 + t1139 * t1174;
t1088 = -t1126 + t1275;
t1082 = -t1275 - t1274;
t1080 = t1109 * t1175 + t1136 * t1171;
t1079 = t1107 * t1175 - t1139 * t1171;
t1078 = t1109 * t1171 - t1136 * t1175;
t1077 = t1107 * t1171 + t1139 * t1175;
t1076 = -t1098 + t1275;
t1075 = -t1275 + t1277;
t1074 = (-t1127 * t1173 + t1129 * t1169) * t1163;
t1073 = (-t1127 * t1169 - t1129 * t1173) * t1163;
t1072 = -pkin(7) * t1105 - t1230;
t1071 = -pkin(7) * t1104 - t1231;
t1068 = -t1275 - t1126;
t1065 = -pkin(1) * t1105 + t1112;
t1064 = -pkin(1) * t1104 + t1111;
t1062 = t1173 * t1066;
t1053 = -t1098 + t1277;
t1049 = -t1098 - t1275;
t1039 = t1115 * t1173 - t1239;
t1038 = -t1116 * t1169 + t1304;
t1037 = t1115 * t1169 + t1238;
t1036 = t1116 * t1173 + t1309;
t1034 = -t1110 * t1169 - t1238;
t1033 = t1110 * t1173 - t1239;
t1032 = -t1119 + t1185;
t1027 = (qJD(3) + t1163) * t1129 + t1202;
t1026 = -t1275 - t1277;
t1025 = -t1129 * t1226 - t1173 * t1185;
t1024 = t1129 * t1225 - t1169 * t1185;
t1023 = t1127 * t1225 + t1242;
t1022 = t1127 * t1226 - t1062;
t1021 = t1057 * t1175 - t1130 * t1171;
t1020 = t1057 * t1171 + t1130 * t1175;
t1015 = t1082 * t1173 - t1309;
t1014 = t1082 * t1169 + t1304;
t1008 = t1098 + t1277;
t1006 = (-t1099 * t1167 + t1100 * t1166) * t1127;
t1005 = (t1099 * t1166 + t1100 * t1167) * t1127;
t1002 = -t1073 * t1170 + t1074 * t1174;
t994 = -t1186 - t1234;
t992 = t1048 * t1167 - t1100 * t1233;
t991 = -t1048 * t1166 - t1100 * t1232;
t990 = t1099 * t1232 + t1166 * t1186;
t989 = -t1099 * t1233 + t1167 * t1186;
t985 = -pkin(8) * t1033 - t1240;
t979 = -pkin(8) * t1014 - t1241;
t978 = -t1037 * t1170 + t1039 * t1174;
t977 = -t1036 * t1170 + t1038 * t1174;
t974 = -t1033 * t1170 + t1034 * t1174;
t973 = t1033 * t1174 + t1034 * t1170;
t972 = -t1028 * t1173 - t1032 * t1169;
t971 = -t1027 * t1173 + t1169 * t1301;
t970 = -t1028 * t1169 + t1032 * t1173;
t969 = -t1027 * t1169 - t1173 * t1301;
t968 = t1006 * t1173 + t1242;
t967 = t1006 * t1169 - t1062;
t966 = t1075 * t1167 - t1247;
t965 = -t1076 * t1166 + t1312;
t964 = -t1075 * t1166 - t1246;
t963 = -t1076 * t1167 - t1313;
t962 = -t1024 * t1170 + t1025 * t1174;
t961 = -t1022 * t1170 + t1023 * t1174;
t956 = -t1014 * t1170 + t1015 * t1174;
t955 = t1014 * t1174 + t1015 * t1170;
t954 = -t1049 * t1166 - t1246;
t953 = t1049 * t1167 - t1247;
t952 = t1173 * t992 + t1209;
t951 = t1173 * t990 - t1209;
t950 = t1169 * t992 - t1208;
t949 = t1169 * t990 + t1208;
t939 = t1026 * t1167 - t1313;
t938 = t1026 * t1166 + t1312;
t932 = pkin(2) * t1301 + pkin(8) * t1034 - t1241;
t925 = -pkin(2) * t1027 + pkin(8) * t1015 + t1240;
t924 = -t1166 * t997 - t1167 * t993;
t923 = -t1166 * t996 + t1167 * t994;
t922 = -t1166 * t993 + t1167 * t997;
t921 = -t1166 * t994 - t1167 * t996;
t920 = -t1171 * t1301 + t1175 * t974;
t919 = t1171 * t974 + t1175 * t1301;
t916 = t1027 * t1171 + t1175 * t956;
t915 = -t1027 * t1175 + t1171 * t956;
t906 = -t1169 * t993 + t1173 * t966;
t905 = -t1169 * t997 + t1173 * t965;
t904 = t1169 * t966 + t1173 * t993;
t903 = t1169 * t965 + t1173 * t997;
t896 = -t931 + t1237;
t882 = -t1053 * t1169 + t1173 * t923;
t881 = t1053 * t1173 + t1169 * t923;
t880 = t1169 * t996 + t1173 * t954;
t879 = t1169 * t954 - t1173 * t996;
t878 = pkin(2) * t1069 + pkin(8) * t918;
t877 = -t1169 * t994 + t1173 * t939;
t876 = t1169 * t939 + t1173 * t994;
t875 = -t1170 * t970 + t1174 * t972;
t874 = -t1170 * t969 + t1174 * t971;
t873 = t1170 * t972 + t1174 * t970;
t872 = -t1170 * t967 + t1174 * t968;
t871 = -t1008 * t1169 + t1173 * t924;
t870 = t1008 * t1173 + t1169 * t924;
t865 = -pkin(1) * t973 - pkin(2) * t1033 + t988;
t859 = t1068 * t1171 + t1175 * t875;
t858 = -t1068 * t1175 + t1171 * t875;
t857 = -t1170 * t950 + t1174 * t952;
t856 = -t1170 * t949 + t1174 * t951;
t855 = -qJ(4) * t953 + t1267;
t854 = -pkin(1) * t955 - pkin(2) * t1014 + t987;
t853 = -qJ(4) * t938 + t1269;
t852 = -pkin(8) * t970 - t917;
t845 = -pkin(2) * t1068 + pkin(8) * t972 + t918;
t844 = -pkin(1) * t873 - pkin(2) * t970;
t843 = -pkin(7) * t973 - t1170 * t932 + t1174 * t985;
t842 = t1174 * t918 - t1259;
t841 = t1170 * t918 + t1253;
t840 = -pkin(7) * t955 - t1170 * t925 + t1174 * t979;
t831 = -t1170 * t904 + t1174 * t906;
t830 = -t1170 * t903 + t1174 * t905;
t829 = -t1069 * t1171 + t1175 * t842;
t828 = t1069 * t1175 + t1171 * t842;
t806 = -t1170 * t881 + t1174 * t882;
t802 = -t1170 * t879 + t1174 * t880;
t801 = t1170 * t880 + t1174 * t879;
t800 = -pkin(3) * t953 + t847;
t799 = -pkin(3) * t938 + t846;
t798 = -t1170 * t876 + t1174 * t877;
t797 = t1170 * t877 + t1174 * t876;
t795 = -t1170 * t870 + t1174 * t871;
t794 = t1170 * t871 + t1174 * t870;
t791 = t1257 + t1373;
t786 = t1266 - t1333;
t777 = -pkin(1) * t841 - pkin(2) * t917;
t776 = t1171 * t953 + t1175 * t802;
t775 = t1171 * t802 - t1175 * t953;
t774 = t1171 * t938 + t1175 * t798;
t773 = t1171 * t798 - t1175 * t938;
t760 = t1171 * t922 + t1175 * t795;
t759 = t1171 * t795 - t1175 * t922;
t758 = t1169 * t896 + t1349;
t756 = -t1173 * t896 + t1351;
t754 = -pkin(4) * t1287 + t1266 + t1372;
t753 = t1169 * t894 + t1349;
t751 = -t1173 * t894 + t1351;
t749 = -pkin(4) * t894 - t1257 + t1334;
t748 = (pkin(5) * t1122 - (2 * qJD(6))) * t1047 + t1180;
t747 = t1169 * t941 + t1173 * t762;
t746 = t1169 * t762 - t1173 * t941;
t745 = -pkin(7) * t841 - pkin(8) * t1253 - t1170 * t878;
t744 = -qJ(4) * t922 - t761;
t735 = -pkin(7) * t873 - t1170 * t845 + t1174 * t852;
t731 = (-t896 - t1237) * pkin(5) + t1179;
t730 = -pkin(8) * t879 - t1169 * t800 + t1173 * t855;
t729 = -pkin(5) * t1237 + t1179 + t1315;
t724 = -pkin(8) * t876 - t1169 * t799 + t1173 * t853;
t719 = -pkin(1) * t801 - pkin(2) * t879 + pkin(3) * t996 - qJ(4) * t954 - t1269;
t718 = -pkin(1) * t797 - pkin(2) * t876 - pkin(3) * t994 - qJ(4) * t939 + t1267;
t713 = -pkin(2) * t953 + pkin(8) * t880 + t1169 * t855 + t1173 * t800;
t712 = qJ(6) * t1276 - t1188;
t711 = -pkin(2) * t938 + pkin(8) * t877 + t1169 * t853 + t1173 * t799;
t710 = -pkin(5) * t1276 + t1192;
t709 = -pkin(8) * t870 + t1173 * t744 + t1273 * t922;
t704 = qJ(6) * t1252 + t1188;
t703 = pkin(5) * t1252 + t1192;
t701 = -t1170 * t756 + t1174 * t758;
t699 = t1170 * t758 + t1174 * t756;
t697 = pkin(8) * t871 + t1169 * t744 + t1215 * t922;
t696 = -t1168 * t731 - t1271 * t896 - t1333;
t695 = -pkin(5) * t1264 + t1172 * t729 - t1373;
t694 = -t1170 * t751 + t1174 * t753;
t692 = t1170 * t753 + t1174 * t751;
t690 = -t1170 * t746 + t1174 * t747;
t689 = t1170 * t747 + t1174 * t746;
t688 = -t1389 + t734;
t687 = -pkin(1) * t794 - pkin(2) * t870 - pkin(3) * t1008 - qJ(4) * t924 - t762;
t686 = t1172 * t731 + t1204 * t896 + t1334;
t685 = -t1372 + t1168 * t729 + (pkin(4) + t1272) * t1287;
t684 = -t1166 * t754 + t1167 * t791 - t1396;
t683 = t1347 + t733;
t682 = -pkin(5) * t1286 + qJ(6) * t895 + t702;
t681 = t1175 * t701 + t1350;
t679 = t1171 * t701 - t1348;
t677 = -t1166 * t749 + t1167 * t786 - t1355;
t672 = t1175 * t694 + t1350;
t670 = t1171 * t694 - t1348;
t668 = (-t1285 - t1276) * qJ(6) + (-t1063 - t1292) * pkin(5) + t1200 + t1347;
t663 = -pkin(8) * t746 + (-qJ(4) * t1173 + t1273) * t761;
t662 = -pkin(4) * t860 + pkin(9) * t676;
t661 = -qJ(6) * t1291 + (t1276 - t976) * pkin(5) - t1192 + t1389;
t660 = t1171 * t761 + t1175 * t690;
t659 = t1171 * t690 - t1175 * t761;
t658 = -t1168 * t712 + t1172 * t710;
t657 = t1168 * t710 + t1172 * t712;
t656 = -t675 - t1356;
t655 = t1346 + t676;
t654 = -pkin(7) * t801 - t1170 * t713 + t1174 * t730;
t653 = -pkin(7) * t797 - t1170 * t711 + t1174 * t724;
t652 = pkin(8) * t747 + (-qJ(4) * t1169 + t1215) * t761;
t647 = -t1168 * t703 + t1172 * t704 - t1356;
t646 = -pkin(7) * t794 - t1170 * t697 + t1174 * t709;
t645 = t1168 * t704 + t1172 * t703 + t1346;
t644 = -pkin(1) * t689 - pkin(2) * t746 + pkin(3) * t941 - qJ(4) * t762;
t643 = -t1166 * t686 + t1167 * t696 - t1355;
t642 = -t1166 * t685 + t1167 * t695 + t1396;
t641 = t1167 * t676 - t1270;
t640 = t1166 * t676 + t1268;
t639 = -pkin(9) * t657 + (pkin(5) * t1168 - t1271) * t748;
t638 = -t1166 * t791 - t1167 * t754 - t1412;
t637 = -t1169 * t688 + t1173 * t684 - t1406;
t636 = t1169 * t860 + t1173 * t641;
t635 = t1169 * t641 - t1173 * t860;
t634 = -pkin(1) * t692 - pkin(2) * t751 + pkin(3) * t894 - t1166 * t786 - t1167 * t749 - t1354;
t633 = -pkin(8) * t751 - t1169 * t683 + t1173 * t677;
t632 = t1169 * t684 + t1173 * t688 - t1404;
t631 = pkin(9) * t658 + (t1204 - t1272) * t748;
t630 = -t1166 * t657 + t1167 * t658;
t629 = t1166 * t658 + t1167 * t657;
t628 = pkin(8) * t753 + t1169 * t677 + t1173 * t683 - t1358;
t627 = t1169 * t748 + t1173 * t630;
t626 = t1169 * t630 - t1173 * t748;
t625 = -pkin(3) * t640 - pkin(4) * t675;
t624 = -t1166 * t655 + t1167 * t656 - t1369;
t623 = -pkin(1) * t699 - pkin(2) * t756 + pkin(3) * t896 - t1166 * t696 - t1167 * t686 - t1354;
t622 = -t1166 * t695 - t1167 * t685 + t1412;
t621 = -pkin(8) * t756 - t1169 * t668 + t1173 * t643;
t620 = -pkin(7) * t689 - t1170 * t652 + t1174 * t663;
t619 = -t1169 * t661 + t1173 * t642 + t1406;
t618 = pkin(8) * t758 + t1169 * t643 + t1173 * t668 - t1358;
t617 = t1169 * t642 + t1173 * t661 + t1404;
t616 = -t1166 * t645 + t1167 * t647 - t1369;
t615 = -pkin(9) * t1268 - qJ(4) * t640 - t1166 * t662;
t614 = -t1169 * t702 + t1173 * t624 - t1381;
t613 = -t1170 * t635 + t1174 * t636;
t612 = t1170 * t636 + t1174 * t635;
t611 = t1169 * t624 + t1173 * t702 + t1379;
t610 = -t1166 * t656 - t1167 * t655 + t1388;
t609 = -pkin(3) * t629 - pkin(4) * t657 - pkin(5) * t712 - qJ(6) * t710;
t608 = -t1170 * t632 + t1174 * t637 - t1413;
t607 = -t1169 * t682 + t1173 * t616 - t1381;
t606 = -t1166 * t647 - t1167 * t645 + t1388;
t605 = -pkin(7) * t692 - t1170 * t628 + t1174 * t633;
t604 = t1169 * t616 + t1173 * t682 + t1379;
t603 = -t1170 * t626 + t1174 * t627;
t602 = t1170 * t627 + t1174 * t626;
t601 = t1171 * t640 + t1175 * t613;
t600 = t1171 * t613 - t1175 * t640;
t599 = -qJ(4) * t629 - t1166 * t631 + t1167 * t639;
t598 = -pkin(7) * t699 - t1170 * t618 + t1174 * t621;
t597 = -t1170 * t617 + t1174 * t619 + t1413;
t596 = t1171 * t629 + t1175 * t603;
t595 = t1171 * t603 - t1175 * t629;
t594 = -pkin(8) * t635 - t1169 * t625 + t1173 * t615;
t593 = -t1170 * t611 + t1174 * t614 - t1397;
t592 = -pkin(1) * t612 - pkin(2) * t635 + pkin(3) * t860 + pkin(9) * t1270 - qJ(4) * t641 - t1167 * t662;
t591 = -pkin(2) * t640 + pkin(8) * t636 + t1169 * t615 + t1173 * t625;
t590 = -t1170 * t604 + t1174 * t607 - t1397;
t589 = -pkin(8) * t626 - t1169 * t609 + t1173 * t599;
t588 = -pkin(1) * t602 - pkin(2) * t626 + pkin(3) * t748 - qJ(4) * t630 - t1166 * t639 - t1167 * t631;
t587 = -pkin(2) * t629 + pkin(8) * t627 + t1169 * t599 + t1173 * t609;
t586 = -pkin(7) * t612 - t1170 * t591 + t1174 * t594;
t585 = -pkin(7) * t602 - t1170 * t587 + t1174 * t589;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1141, -t1142, 0, t1103, 0, 0, 0, 0, 0, 0, t1079, t1080, t1097, t1021, 0, 0, 0, 0, 0, 0, t916, t920, t859, t829, 0, 0, 0, 0, 0, 0, t774, t776, t760, t660, 0, 0, 0, 0, 0, 0, t672, -t671, t1382, t601, 0, 0, 0, 0, 0, 0, t681, t1382, t671, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1142, -t1141, 0, t1102, 0, 0, 0, 0, 0, 0, t1077, t1078, t1096, t1020, 0, 0, 0, 0, 0, 0, t915, t919, t858, t828, 0, 0, 0, 0, 0, 0, t773, t775, t759, t659, 0, 0, 0, 0, 0, 0, t670, -t669, t1384, t600, 0, 0, 0, 0, 0, 0, t679, t1384, t669, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1104, t1105, 0, -t1056, 0, 0, 0, 0, 0, 0, t955, t973, t873, t841, 0, 0, 0, 0, 0, 0, t797, t801, t794, t689, 0, 0, 0, 0, 0, 0, t692, t698, t1377, t612, 0, 0, 0, 0, 0, 0, t699, t1377, -t698, t602; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1142, 0, -t1141, 0, t1197, -t1123, -t1102, -pkin(6) * t1102, t1114 * t1175 - t1199, t1091 * t1175 - t1144 * t1171, t1108 * t1175 + t1170 * t1218, t1113 * t1175 + t1199, t1106 * t1175 + t1159 * t1171, qJDD(2) * t1171 + t1133 * t1175, -pkin(6) * t1077 - t1064 * t1171 + t1071 * t1175, -pkin(6) * t1078 - t1065 * t1171 + t1072 * t1175, -pkin(6) * t1096 + t1056 * t1175, -pkin(6) * t1020 - (pkin(1) * t1171 - pkin(7) * t1175) * t1056, t1175 * t962 + t1207, -t1088 * t1171 + t1175 * t874, -t1032 * t1171 + t1175 * t977, t1175 * t961 - t1207, -t1028 * t1171 + t1175 * t978, t1175 * t1002 + t1171 * t1216, -pkin(6) * t915 - t1171 * t854 + t1175 * t840, -pkin(6) * t919 - t1171 * t865 + t1175 * t843, -pkin(6) * t858 - t1171 * t844 + t1175 * t735, -pkin(6) * t828 - t1171 * t777 + t1175 * t745, -t1171 * t991 + t1175 * t857, -t1171 * t921 + t1175 * t806, -t1171 * t963 + t1175 * t830, -t1171 * t989 + t1175 * t856, -t1171 * t964 + t1175 * t831, -t1005 * t1171 + t1175 * t872, -pkin(6) * t773 - t1171 * t718 + t1175 * t653, -pkin(6) * t775 - t1171 * t719 + t1175 * t654, -pkin(6) * t759 - t1171 * t687 + t1175 * t646, -pkin(6) * t659 - t1171 * t644 + t1175 * t620, t1293, t1407, t1383, t1340, t1408, t1341, -pkin(6) * t670 - t1171 * t634 + t1175 * t605, -t1171 * t638 + t1175 * t608 + t1415, -t1171 * t610 + t1175 * t593 - t1400, -pkin(6) * t600 - t1171 * t592 + t1175 * t586, t1293, t1383, -t1407, t1341, -t1408, t1340, -pkin(6) * t679 - t1171 * t623 + t1175 * t598, -t1171 * t606 + t1175 * t590 - t1400, -t1171 * t622 + t1175 * t597 - t1415, -pkin(6) * t595 - t1171 * t588 + t1175 * t585; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1141, 0, t1142, 0, t1123, t1197, t1103, pkin(6) * t1103, t1114 * t1171 + t1198, t1091 * t1171 + t1144 * t1175, t1108 * t1171 - t1170 * t1217, t1113 * t1171 - t1198, t1106 * t1171 - t1159 * t1175, -qJDD(2) * t1175 + t1133 * t1171, pkin(6) * t1079 + t1064 * t1175 + t1071 * t1171, pkin(6) * t1080 + t1065 * t1175 + t1072 * t1171, pkin(6) * t1097 + t1056 * t1171, pkin(6) * t1021 - (-pkin(1) * t1175 - pkin(7) * t1171) * t1056, t1171 * t962 - t1206, t1088 * t1175 + t1171 * t874, t1032 * t1175 + t1171 * t977, t1171 * t961 + t1206, t1028 * t1175 + t1171 * t978, t1171 * t1002 - t1175 * t1216, pkin(6) * t916 + t1171 * t840 + t1175 * t854, pkin(6) * t920 + t1171 * t843 + t1175 * t865, pkin(6) * t859 + t1171 * t735 + t1175 * t844, pkin(6) * t829 + t1171 * t745 + t1175 * t777, t1171 * t857 + t1175 * t991, t1171 * t806 + t1175 * t921, t1171 * t830 + t1175 * t963, t1171 * t856 + t1175 * t989, t1171 * t831 + t1175 * t964, t1005 * t1175 + t1171 * t872, pkin(6) * t774 + t1171 * t653 + t1175 * t718, pkin(6) * t776 + t1171 * t654 + t1175 * t719, pkin(6) * t760 + t1171 * t646 + t1175 * t687, pkin(6) * t660 + t1171 * t620 + t1175 * t644, t1299, t1409, t1385, t1342, t1410, t1343, pkin(6) * t672 + t1171 * t605 + t1175 * t634, t1171 * t608 + t1175 * t638 - t1414, t1171 * t593 + t1175 * t610 + t1401, pkin(6) * t601 + t1171 * t586 + t1175 * t592, t1299, t1385, -t1409, t1343, -t1410, t1342, pkin(6) * t681 + t1171 * t598 + t1175 * t623, t1171 * t590 + t1175 * t606 + t1401, t1171 * t597 + t1175 * t622 + t1414, pkin(6) * t596 + t1171 * t585 + t1175 * t588; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1147, t1148, 0, 0, (t1137 + t1205) * t1170, t1136 * t1174 + t1139 * t1170, t1149 * t1174 + t1229, (t1138 - t1213) * t1174, t1151 * t1170 + t1227, 0, pkin(1) * t1139 + pkin(7) * t1107 + t1230, -pkin(1) * t1136 + pkin(7) * t1109 - t1231, pkin(1) * t1143 + pkin(7) * t1140 + t1057, pkin(1) * t1130 + pkin(7) * t1057, t1024 * t1174 + t1025 * t1170, t1170 * t971 + t1174 * t969, t1036 * t1174 + t1038 * t1170, t1022 * t1174 + t1023 * t1170, t1037 * t1174 + t1039 * t1170, t1073 * t1174 + t1074 * t1170, -pkin(1) * t1027 + pkin(7) * t956 + t1170 * t979 + t1174 * t925, pkin(1) * t1301 + pkin(7) * t974 + t1170 * t985 + t1174 * t932, -pkin(1) * t1068 + pkin(7) * t875 + t1170 * t852 + t1174 * t845, pkin(1) * t1069 + pkin(7) * t842 - pkin(8) * t1259 + t1174 * t878, t1170 * t952 + t1174 * t950, t1170 * t882 + t1174 * t881, t1170 * t905 + t1174 * t903, t1170 * t951 + t1174 * t949, t1170 * t906 + t1174 * t904, t1170 * t968 + t1174 * t967, -pkin(1) * t938 + pkin(7) * t798 + t1170 * t724 + t1174 * t711, -pkin(1) * t953 + pkin(7) * t802 + t1170 * t730 + t1174 * t713, -pkin(1) * t922 + pkin(7) * t795 + t1170 * t709 + t1174 * t697, -pkin(1) * t761 + pkin(7) * t690 + t1170 * t663 + t1174 * t652, t1280, -t1403, t1375, t1318, -t1402, t1320, pkin(7) * t694 + t1170 * t633 + t1174 * t628 - t1359, t1170 * t637 + t1174 * t632 - t1411, t1170 * t614 + t1174 * t611 + t1387, -pkin(1) * t640 + pkin(7) * t613 + t1170 * t594 + t1174 * t591, t1280, t1375, t1403, t1320, t1402, t1318, pkin(7) * t701 + t1170 * t621 + t1174 * t618 - t1359, t1170 * t607 + t1174 * t604 + t1387, t1170 * t619 + t1174 * t617 + t1411, -pkin(1) * t629 + pkin(7) * t603 + t1170 * t589 + t1174 * t587;];
tauB_reg  = t1;
