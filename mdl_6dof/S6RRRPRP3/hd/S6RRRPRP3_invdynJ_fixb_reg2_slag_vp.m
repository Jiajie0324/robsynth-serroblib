% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:41:47
% EndTime: 2019-03-09 16:42:02
% DurationCPUTime: 10.22s
% Computational Cost: add. (18452->698), mult. (41397->833), div. (0->0), fcn. (30796->14), ass. (0->332)
t314 = sin(qJ(3));
t315 = sin(qJ(2));
t317 = cos(qJ(2));
t485 = cos(qJ(3));
t249 = t314 * t317 + t315 * t485;
t233 = t249 * qJD(1);
t306 = qJD(2) + qJD(3);
t310 = sin(pkin(10));
t311 = cos(pkin(10));
t205 = t233 * t311 + t306 * t310;
t313 = sin(qJ(5));
t484 = cos(qJ(5));
t219 = t310 * t233;
t499 = t306 * t311 - t219;
t356 = t484 * t499;
t145 = -t205 * t313 + t356;
t510 = t145 ^ 2;
t402 = t485 * t317;
t417 = qJD(1) * t315;
t231 = -qJD(1) * t402 + t314 * t417;
t225 = qJD(5) + t231;
t509 = t145 * t225;
t503 = t205 * t484 + t313 * t499;
t487 = t503 ^ 2;
t508 = t225 * t503;
t247 = t310 * t484 + t313 * t311;
t230 = t247 * qJD(5);
t506 = t247 * t231 + t230;
t351 = -t313 * t310 + t484 * t311;
t397 = qJD(5) * t484;
t415 = qJD(5) * t313;
t495 = -t310 * t415 + t311 * t397;
t505 = t351 * t231 + t495;
t309 = qJ(2) + qJ(3);
t301 = sin(t309);
t318 = cos(qJ(1));
t437 = t301 * t318;
t316 = sin(qJ(1));
t438 = t301 * t316;
t504 = g(1) * t437 + g(2) * t438;
t319 = -pkin(8) - pkin(7);
t268 = t319 * t317;
t253 = qJD(1) * t268;
t235 = t485 * t253;
t267 = t319 * t315;
t251 = qJD(1) * t267;
t192 = t251 * t314 - t235;
t416 = qJD(3) * t314;
t494 = -pkin(2) * t416 + t192;
t183 = pkin(3) * t233 + qJ(4) * t231;
t169 = pkin(2) * t417 + t183;
t234 = t314 * t253;
t193 = t251 * t485 + t234;
t125 = t310 * t169 + t311 * t193;
t443 = t231 * t310;
t410 = pkin(9) * t443;
t109 = t410 + t125;
t291 = pkin(2) * t314 + qJ(4);
t237 = (-pkin(9) - t291) * t310;
t303 = t311 * pkin(9);
t238 = t291 * t311 + t303;
t180 = t313 * t237 + t238 * t484;
t398 = qJD(3) * t485;
t280 = pkin(2) * t398 + qJD(4);
t124 = t311 * t169 - t193 * t310;
t442 = t231 * t311;
t385 = t233 * pkin(4) + pkin(9) * t442;
t91 = t124 + t385;
t465 = qJD(5) * t180 - t313 * t109 + t247 * t280 + t484 * t91;
t472 = qJD(2) * pkin(2);
t239 = t251 + t472;
t187 = t239 * t485 + t234;
t127 = t310 * t183 + t311 * t187;
t113 = t410 + t127;
t312 = -pkin(9) - qJ(4);
t264 = t312 * t310;
t265 = qJ(4) * t311 + t303;
t203 = t313 * t264 + t265 * t484;
t126 = t311 * t183 - t187 * t310;
t95 = t126 + t385;
t459 = qJD(4) * t247 + qJD(5) * t203 - t313 * t113 + t484 * t95;
t428 = t314 * t315;
t355 = t402 - t428;
t488 = qJD(1) * t306;
t493 = t249 * qJDD(1);
t154 = -t355 * t488 - t493;
t304 = qJDD(2) + qJDD(3);
t138 = -t154 * t311 + t304 * t310;
t149 = t310 * t154;
t393 = t304 * t311 + t149;
t63 = qJD(5) * t503 + t313 * t138 - t484 * t393;
t502 = t63 - t508;
t413 = qJD(1) * qJD(2);
t395 = t317 * t413;
t412 = t315 * qJDD(1);
t200 = qJDD(2) * pkin(2) - t319 * (-t395 - t412);
t396 = t315 * t413;
t411 = t317 * qJDD(1);
t207 = t319 * (-t396 + t411);
t388 = -t485 * t200 - t314 * t207 + t239 * t416 - t253 * t398;
t474 = t304 * pkin(3);
t104 = qJDD(4) + t388 - t474;
t302 = cos(t309);
t295 = g(3) * t302;
t501 = -t104 - t295;
t482 = pkin(2) * t317;
t298 = pkin(1) + t482;
t186 = -pkin(3) * t355 - qJ(4) * t249 - t298;
t209 = t314 * t267 - t268 * t485;
t133 = t311 * t186 - t209 * t310;
t110 = -pkin(4) * t355 - t249 * t303 + t133;
t134 = t310 * t186 + t311 * t209;
t441 = t249 * t310;
t122 = -pkin(9) * t441 + t134;
t500 = t313 * t110 + t484 * t122;
t216 = pkin(4) * t443;
t383 = t216 - t494;
t498 = t485 * t267 + t314 * t268;
t305 = pkin(10) + qJ(5);
t300 = cos(t305);
t439 = t300 * t302;
t299 = sin(t305);
t440 = t299 * t302;
t497 = pkin(5) * t439 + qJ(6) * t440;
t496 = t302 * pkin(3) + t301 * qJ(4);
t378 = g(1) * t318 + g(2) * t316;
t353 = t237 * t484 - t313 * t238;
t131 = qJD(5) * t353 + t280 * t351;
t62 = -qJD(5) * t356 - t484 * t138 + t205 * t415 - t313 * t393;
t492 = t131 * t145 - t180 * t63 + t353 * t62;
t352 = t264 * t484 - t313 * t265;
t159 = qJD(4) * t351 + qJD(5) * t352;
t491 = t145 * t159 - t203 * t63 + t352 * t62;
t490 = pkin(5) * t506 - qJ(6) * t505 - qJD(6) * t247;
t489 = t295 - t504;
t197 = t306 * t249;
t374 = -qJDD(1) * t402 + t314 * t412;
t155 = qJD(1) * t197 + t374;
t151 = qJDD(5) + t155;
t46 = -t145 * t233 + t151 * t351 - t225 * t506;
t196 = -qJD(2) * t402 + t306 * t428 - t317 * t398;
t408 = t315 * t472;
t123 = pkin(3) * t197 + qJ(4) * t196 - qJD(4) * t249 + t408;
t403 = qJD(2) * t319;
t252 = t315 * t403;
t254 = t317 * t403;
t146 = qJD(3) * t498 + t485 * t252 + t314 * t254;
t72 = t311 * t123 - t146 * t310;
t57 = pkin(4) * t197 + t196 * t303 + t72;
t446 = t196 * t310;
t73 = t310 * t123 + t311 * t146;
t68 = pkin(9) * t446 + t73;
t17 = -qJD(5) * t500 - t313 * t68 + t484 * t57;
t10 = t145 * t505 - t247 * t63 - t351 * t62 - t503 * t506;
t486 = t231 ^ 2;
t483 = pkin(2) * t315;
t481 = pkin(4) * t310;
t480 = pkin(5) * t151;
t294 = g(3) * t301;
t477 = g(3) * t317;
t475 = t233 * pkin(5);
t473 = t311 * pkin(4);
t226 = pkin(2) * t396 - qJDD(1) * t298;
t80 = pkin(3) * t155 + qJ(4) * t154 - qJD(4) * t233 + t226;
t389 = -t314 * t200 + t485 * t207 - t239 * t398 - t253 * t416;
t99 = qJ(4) * t304 + qJD(4) * t306 - t389;
t41 = t310 * t80 + t311 * t99;
t266 = t298 * qJD(1);
t165 = pkin(3) * t231 - qJ(4) * t233 - t266;
t188 = t314 * t239 - t235;
t171 = t306 * qJ(4) + t188;
t115 = t311 * t165 - t171 * t310;
t81 = pkin(4) * t231 - pkin(9) * t205 + t115;
t116 = t310 * t165 + t311 * t171;
t89 = pkin(9) * t499 + t116;
t38 = t313 * t81 + t484 * t89;
t469 = t225 * t38;
t39 = t41 * t311;
t53 = t484 * t109 + t313 * t91;
t56 = t484 * t113 + t313 * t95;
t222 = t233 * qJ(6);
t42 = t222 + t53;
t468 = t131 - t42;
t467 = t131 - t53;
t466 = t475 + t465;
t464 = t490 + t383;
t150 = -t216 + t188;
t463 = -t150 + t490;
t47 = t222 + t56;
t462 = t159 - t47;
t461 = t159 - t56;
t460 = t475 + t459;
t458 = pkin(7) * qJDD(1);
t457 = qJ(6) * t151;
t456 = t138 * t310;
t455 = t503 * t145;
t453 = t151 * t353;
t452 = t151 * t180;
t451 = t151 * t352;
t450 = t151 * t203;
t449 = t155 * t310;
t447 = t188 * t306;
t445 = t225 * t233;
t444 = t231 * t233;
t292 = pkin(3) + t473;
t258 = t302 * t292;
t436 = t302 * t310;
t435 = t302 * t312;
t434 = t302 * t316;
t433 = t302 * t318;
t431 = t311 * t155;
t427 = t316 * t300;
t426 = t318 * t299;
t425 = t318 * t319;
t37 = -t313 * t89 + t484 * t81;
t424 = qJD(6) - t37;
t168 = -t306 * pkin(3) + qJD(4) - t187;
t421 = t168 - t280;
t307 = t315 ^ 2;
t308 = t317 ^ 2;
t419 = t307 - t308;
t418 = t307 + t308;
t414 = -qJD(4) + t168;
t409 = t485 * pkin(2);
t321 = qJD(1) ^ 2;
t406 = t315 * t321 * t317;
t405 = g(3) * t440 - t299 * t504;
t404 = g(1) * t433 + g(2) * t434 + t294;
t399 = -t487 + t510;
t40 = -t310 * t99 + t311 * t80;
t25 = pkin(4) * t155 - pkin(9) * t138 + t40;
t29 = pkin(9) * t393 + t41;
t8 = t484 * t25 - t313 * t29 - t89 * t397 - t81 * t415;
t391 = -t301 * t312 + t258;
t272 = t318 * t298;
t390 = -t316 * t319 + t272;
t297 = -t409 - pkin(3);
t386 = t315 * t395;
t384 = -g(1) * t438 + g(2) * t437;
t381 = -pkin(3) * t301 - t483;
t210 = t299 * t434 + t300 * t318;
t212 = t302 * t426 - t427;
t380 = g(1) * t210 - g(2) * t212;
t211 = t302 * t427 - t426;
t213 = t299 * t316 + t300 * t433;
t379 = g(1) * t211 - g(2) * t213;
t377 = g(1) * t316 - g(2) * t318;
t376 = -t115 * t233 + t311 * t504;
t167 = pkin(4) * t441 - t498;
t174 = t247 * t249;
t94 = -t196 * t247 + t249 * t495;
t373 = -t145 * t94 + t174 * t63;
t371 = -t40 * t310 + t39;
t370 = t311 * t499;
t369 = t393 * t311;
t368 = -t487 - t510;
t366 = t155 * t249 - t196 * t231;
t365 = -t155 * t355 + t197 * t231;
t364 = t292 * t301 + t435;
t363 = -g(3) * t439 + t300 * t504;
t362 = -t115 * t442 - t116 * t443 + t39 - t404;
t361 = t391 + t482;
t360 = pkin(5) * t300 + qJ(6) * t299 + t292;
t358 = t377 * t302;
t357 = -0.2e1 * pkin(1) * t413 - pkin(7) * qJDD(2);
t7 = t313 * t25 + t484 * t29 + t81 * t397 - t415 * t89;
t65 = t110 * t484 - t313 * t122;
t16 = t110 * t397 - t122 * t415 + t313 * t57 + t484 * t68;
t350 = -t145 * t506 - t351 * t63;
t182 = -pkin(5) * t351 - t247 * qJ(6) - t292;
t346 = -t205 * t310 + t370;
t345 = g(1) * t212 + g(2) * t210 + t299 * t294 + t8;
t344 = t292 * t433 - t312 * t437 + t316 * t481 + t390;
t343 = t62 - t509;
t320 = qJD(2) ^ 2;
t342 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t320 + t377;
t341 = pkin(1) * t321 + t378 - t458;
t71 = -pkin(4) * t393 + t104;
t15 = t63 * pkin(5) + t62 * qJ(6) - qJD(6) * t503 + t71;
t33 = t225 * qJ(6) + t38;
t130 = -pkin(4) * t499 + t168;
t64 = -pkin(5) * t145 - qJ(6) * t503 + t130;
t340 = -t15 * t247 - t233 * t33 - t505 * t64 - t405;
t339 = -t266 * t231 + t389 + t404;
t338 = t266 * t233 - t388 - t489;
t337 = t104 * t249 - t168 * t196 - t378;
t175 = t351 * t249;
t93 = t196 * t351 + t230 * t249;
t336 = -t145 * t93 + t174 * t62 - t175 * t63 - t503 * t94;
t335 = t130 * t505 + t233 * t38 + t71 * t247 + t405;
t334 = -t145 * t197 + t151 * t174 + t225 * t94 - t355 * t63;
t333 = -t425 + t312 * t438 + t318 * t481 + (-t298 - t258) * t316;
t2 = qJD(6) * t225 + t457 + t7;
t32 = -t225 * pkin(5) + t424;
t4 = qJDD(6) - t8 - t480;
t332 = t2 * t351 + t4 * t247 + t32 * t505 - t33 * t506 - t404;
t331 = -t8 * t247 + t7 * t351 - t37 * t505 - t38 * t506 - t404;
t330 = -t15 * t351 + t233 * t32 + t506 * t64 + t363;
t147 = qJD(3) * t209 + t314 * t252 - t485 * t254;
t329 = t130 * t506 - t233 * t37 - t71 * t351 + t363;
t328 = g(3) * t436 + t116 * t233 + (-t301 * t378 + t104) * t310;
t327 = t503 * t64 + qJDD(6) - t345;
t114 = -pkin(4) * t446 + t147;
t325 = -g(1) * t213 - g(2) * t211 - t294 * t300 + t7;
t324 = t63 + t508;
t323 = -t249 * t488 - t374;
t270 = qJ(4) * t433;
t269 = qJ(4) * t434;
t263 = t297 - t473;
t170 = -t409 + t182;
t156 = t233 ^ 2 - t486;
t129 = t233 * t306 + t323;
t128 = t493 + (qJD(1) * t355 + t231) * t306;
t98 = t205 * t442 + t456;
t97 = -t443 * t499 + t369;
t96 = -t151 * t355 + t197 * t225;
t87 = pkin(5) * t174 - qJ(6) * t175 + t167;
t85 = pkin(5) * t503 - qJ(6) * t145;
t83 = -t233 * t499 - t310 * t486 + t431;
t82 = -t205 * t233 + t311 * t486 + t449;
t61 = pkin(5) * t355 - t65;
t60 = -qJ(6) * t355 + t500;
t50 = t138 * t311 + t231 * t346 + t310 * t393;
t45 = t151 * t247 + t225 * t505 - t233 * t503;
t36 = -t62 - t509;
t26 = t94 * pkin(5) + t93 * qJ(6) - t175 * qJD(6) + t114;
t20 = -t247 * t62 + t503 * t505;
t19 = -t175 * t62 - t503 * t93;
t18 = t151 * t175 + t197 * t503 - t225 * t93 + t355 * t62;
t14 = -t197 * pkin(5) - t17;
t11 = qJ(6) * t197 - qJD(6) * t355 + t16;
t1 = [0, 0, 0, 0, 0, qJDD(1), t377, t378, 0, 0, qJDD(1) * t307 + 0.2e1 * t386, 0.2e1 * t315 * t411 - 0.2e1 * t413 * t419, qJDD(2) * t315 + t317 * t320, qJDD(1) * t308 - 0.2e1 * t386, qJDD(2) * t317 - t315 * t320, 0, t315 * t357 + t317 * t342, -t315 * t342 + t317 * t357, 0.2e1 * t418 * t458 - t378, -g(1) * (-pkin(1) * t316 + pkin(7) * t318) - g(2) * (pkin(1) * t318 + pkin(7) * t316) + (pkin(7) ^ 2 * t418 + pkin(1) ^ 2) * qJDD(1), -t154 * t249 - t196 * t233, -t154 * t355 - t197 * t233 - t366, -t196 * t306 + t249 * t304, t365, -t197 * t306 + t304 * t355, 0, -t147 * t306 - t155 * t298 - t197 * t266 - t226 * t355 + t231 * t408 + t304 * t498 + t358, -t146 * t306 + t154 * t298 + t196 * t266 - t209 * t304 + t226 * t249 + t233 * t408 + t384, -t146 * t231 + t147 * t233 + t154 * t498 - t155 * t209 + t187 * t196 - t188 * t197 + t249 * t388 - t355 * t389 - t378, -t389 * t209 + t188 * t146 - t388 * t498 - t187 * t147 - t226 * t298 - t266 * t408 - g(1) * (-t298 * t316 - t425) - g(2) * t390 (t138 * t249 - t196 * t205) * t311 (t369 - t456) * t249 - t346 * t196, -t138 * t355 + t197 * t205 + t311 * t366 (t196 * t499 - t249 * t393) * t310, t197 * t499 - t310 * t366 - t355 * t393, t365, t115 * t197 + t133 * t155 - t147 * t499 + t72 * t231 + t310 * t337 + t311 * t358 - t355 * t40 + t393 * t498, -t116 * t197 - t134 * t155 - t138 * t498 + t147 * t205 - t73 * t231 + t311 * t337 + t355 * t41 - t377 * t436, t73 * t499 + t134 * t393 - t72 * t205 - t133 * t138 + (-t310 * t41 - t311 * t40) * t249 + (t115 * t311 + t116 * t310) * t196 - t384, -g(2) * t272 - t104 * t498 + t115 * t72 + t116 * t73 + t40 * t133 + t41 * t134 + t168 * t147 + (g(1) * t319 - g(2) * t496) * t318 + (-g(1) * (-t298 - t496) + g(2) * t319) * t316, t19, t336, t18, t373, -t334, t96, -t114 * t145 + t130 * t94 + t151 * t65 + t167 * t63 + t17 * t225 + t174 * t71 + t197 * t37 - t355 * t8 + t379, t114 * t503 - t130 * t93 - t151 * t500 - t16 * t225 - t167 * t62 + t175 * t71 - t197 * t38 + t355 * t7 - t380, t145 * t16 - t17 * t503 - t174 * t7 - t175 * t8 + t37 * t93 - t38 * t94 - t500 * t63 + t62 * t65 - t384, -g(1) * t333 - g(2) * t344 + t130 * t114 + t38 * t16 + t71 * t167 + t37 * t17 + t500 * t7 + t8 * t65, t19, t18, -t336, t96, t334, t373, -t14 * t225 - t145 * t26 + t15 * t174 - t151 * t61 - t197 * t32 + t355 * t4 + t63 * t87 + t64 * t94 + t379, t11 * t145 + t14 * t503 - t174 * t2 + t175 * t4 - t32 * t93 - t33 * t94 - t60 * t63 - t61 * t62 - t384, t11 * t225 - t15 * t175 + t151 * t60 + t197 * t33 - t2 * t355 - t26 * t503 + t62 * t87 + t64 * t93 + t380, t2 * t60 + t33 * t11 + t15 * t87 + t64 * t26 + t4 * t61 + t32 * t14 - g(1) * (-pkin(5) * t211 - qJ(6) * t210 + t333) - g(2) * (pkin(5) * t213 + qJ(6) * t212 + t344); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, t419 * t321, t412, t406, t411, qJDD(2), t315 * t341 - t477, g(3) * t315 + t317 * t341, 0, 0, t444, t156, t128, -t444, t129, t304, t192 * t306 + (-t231 * t417 + t304 * t485 - t306 * t416) * pkin(2) + t338, t193 * t306 + (-t233 * t417 - t304 * t314 - t306 * t398) * pkin(2) + t339 (t188 - t192) * t233 + (-t187 + t193) * t231 + (t485 * t154 - t155 * t314 + (-t231 * t485 + t233 * t314) * qJD(3)) * pkin(2), t187 * t192 - t188 * t193 + (-t485 * t388 - t477 - t389 * t314 + (-t187 * t314 + t188 * t485) * qJD(3) + (qJD(1) * t266 + t378) * t315) * pkin(2), t98, t50, t82, t97, t83, -t444, -t291 * t449 - t297 * t393 + (t310 * t421 - t124) * t231 + t376 + t494 * t499 + t501 * t311, -t291 * t431 + t138 * t297 - t494 * t205 + (t311 * t421 + t125) * t231 + t328, t280 * t370 + t291 * t369 - t125 * t499 + t124 * t205 + (t138 * t291 + t205 * t280 - t40) * t310 + t362, t104 * t297 - g(1) * (t318 * t381 + t270) - g(2) * (t316 * t381 + t269) - g(3) * (t496 + t482) + t371 * t291 - t494 * t168 + (t280 * t311 - t125) * t116 + (-t280 * t310 - t124) * t115, t20, t10, t45, t350, t46, -t445, -t145 * t383 - t225 * t465 + t263 * t63 + t329 + t453, -t225 * t467 - t263 * t62 + t383 * t503 + t335 - t452, -t145 * t53 + t465 * t503 + t331 + t492, -g(3) * t361 + t130 * t383 + t8 * t353 + t7 * t180 + t71 * t263 - t37 * t465 + t38 * t467 + t378 * (t364 + t483) t20, t45, -t10, -t445, -t46, t350, -t145 * t464 + t170 * t63 - t225 * t466 + t330 + t453, -t145 * t42 + t466 * t503 + t332 + t492, t170 * t62 + t225 * t468 - t464 * t503 + t340 + t452, t2 * t180 + t15 * t170 - t4 * t353 - g(3) * (t361 + t497) + t464 * t64 + t468 * t33 + t466 * t32 + t378 * (t301 * t360 + t435 + t483); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, t156, t128, -t444, t129, t304, t338 + t447, t187 * t306 + t339, 0, 0, t98, t50, t82, t97, t83, -t444, -qJ(4) * t449 + pkin(3) * t149 - t188 * t219 + (t447 + t474 + t501) * t311 + (t310 * t414 - t126) * t231 + t376, -qJ(4) * t431 - pkin(3) * t138 - t188 * t205 + (t311 * t414 + t127) * t231 + t328, qJD(4) * t370 + qJ(4) * t369 - t127 * t499 + t126 * t205 + (qJ(4) * t138 + qJD(4) * t205 - t40) * t310 + t362, -t104 * pkin(3) - t116 * t127 - t115 * t126 - t168 * t188 - g(1) * (-pkin(3) * t437 + t270) - g(2) * (-pkin(3) * t438 + t269) - g(3) * t496 + (-t115 * t310 + t116 * t311) * qJD(4) + t371 * qJ(4), t20, t10, t45, t350, t46, -t445, t145 * t150 - t225 * t459 - t292 * t63 + t329 + t451, -t150 * t503 - t225 * t461 + t292 * t62 + t335 - t450, -t145 * t56 + t459 * t503 + t331 + t491, -g(3) * t391 - t130 * t150 + t7 * t203 - t71 * t292 + t352 * t8 + t364 * t378 - t37 * t459 + t38 * t461, t20, t45, -t10, -t445, -t46, t350, -t145 * t463 + t182 * t63 - t225 * t460 + t330 + t451, -t145 * t47 + t460 * t503 + t332 + t491, t182 * t62 + t225 * t462 - t463 * t503 + t340 + t450, t2 * t203 + t15 * t182 - t4 * t352 - g(3) * (t258 + t497) + t463 * t64 + t462 * t33 + t460 * t32 + t378 * t435 + (g(3) * t312 + t360 * t378) * t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205 * t231 - t393, t231 * t499 + t138, -t205 ^ 2 - t499 ^ 2, t115 * t205 - t116 * t499 + t104 + t489, 0, 0, 0, 0, 0, 0, t324, -t343, t368, -t38 * t145 + t37 * t503 + t489 + t71, 0, 0, 0, 0, 0, 0, t324, t368, t343, -t33 * t145 - t32 * t503 + t15 + t489; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t455, -t399, t36, t455, -t502, t151, -t130 * t503 + t345 + t469, -t130 * t145 + t225 * t37 - t325, 0, 0, -t455, t36, t399, t151, t502, t455, t145 * t85 - t327 + t469 + 0.2e1 * t480, pkin(5) * t62 - qJ(6) * t63 + (t33 - t38) * t503 - (t32 - t424) * t145, 0.2e1 * t457 + t145 * t64 + t503 * t85 + (0.2e1 * qJD(6) - t37) * t225 + t325, t2 * qJ(6) - t4 * pkin(5) - t64 * t85 - t32 * t38 - g(1) * (-pkin(5) * t212 + qJ(6) * t213) - g(2) * (-pkin(5) * t210 + qJ(6) * t211) + t424 * t33 - (-pkin(5) * t299 + qJ(6) * t300) * t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) + t323 - t455, t36, -t225 ^ 2 - t487, -t225 * t33 + t327 - t480;];
tau_reg  = t1;
