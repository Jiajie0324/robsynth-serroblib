% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:42:39
% EndTime: 2019-05-07 07:42:49
% DurationCPUTime: 11.35s
% Computational Cost: add. (51348->318), mult. (107065->401), div. (0->0), fcn. (78430->10), ass. (0->228)
t2566 = sin(qJ(3));
t2567 = sin(qJ(2));
t2570 = cos(qJ(3));
t2571 = cos(qJ(2));
t2534 = (t2566 * t2571 + t2567 * t2570) * qJD(1);
t2610 = qJD(1) * t2571;
t2593 = qJD(2) * t2610;
t2597 = t2567 * qJDD(1);
t2539 = t2593 + t2597;
t2558 = t2571 * qJDD(1);
t2611 = qJD(1) * t2567;
t2594 = qJD(2) * t2611;
t2540 = t2558 - t2594;
t2590 = t2566 * t2539 - t2570 * t2540;
t2586 = qJD(3) * t2534 + t2590;
t2583 = qJDD(5) + t2586;
t2560 = qJD(2) + qJD(3);
t2563 = sin(pkin(10));
t2564 = cos(pkin(10));
t2518 = t2534 * t2563 - t2564 * t2560;
t2519 = t2534 * t2564 + t2560 * t2563;
t2565 = sin(qJ(5));
t2569 = cos(qJ(5));
t2493 = t2518 * t2569 + t2519 * t2565;
t2495 = -t2518 * t2565 + t2519 * t2569;
t2607 = t2493 * t2495;
t2449 = t2583 + t2607;
t2491 = t2495 ^ 2;
t2532 = t2566 * t2611 - t2570 * t2610;
t2531 = qJD(5) + t2532;
t2615 = t2531 ^ 2;
t2621 = -t2491 - t2615;
t2409 = t2449 * t2565 - t2569 * t2621;
t2411 = t2449 * t2569 + t2565 * t2621;
t2396 = t2409 * t2563 - t2411 * t2564;
t2589 = -t2570 * t2539 - t2566 * t2540;
t2505 = -qJD(3) * t2532 - t2589;
t2596 = qJDD(2) + qJDD(3);
t2496 = t2564 * t2505 + t2563 * t2596;
t2584 = -t2563 * t2505 + t2564 * t2596;
t2578 = -t2493 * qJD(5) + t2569 * t2496 + t2565 * t2584;
t2606 = t2493 * t2531;
t2577 = t2578 - t2606;
t2376 = t2396 * t2566 - t2570 * t2577;
t2378 = t2396 * t2570 + t2566 * t2577;
t2351 = t2376 * t2567 - t2378 * t2571;
t2382 = t2409 * t2564 + t2411 * t2563;
t2568 = sin(qJ(1));
t2572 = cos(qJ(1));
t2645 = t2351 * t2568 - t2382 * t2572;
t2644 = t2351 * t2572 + t2382 * t2568;
t2353 = t2376 * t2571 + t2378 * t2567;
t2430 = t2578 + t2606;
t2592 = t2565 * t2496 - t2569 * t2584;
t2582 = (-qJD(5) + t2531) * t2495 - t2592;
t2618 = t2430 * t2565 + t2569 * t2582;
t2619 = -t2569 * t2430 + t2565 * t2582;
t2624 = t2563 * t2618 + t2564 * t2619;
t2463 = t2493 ^ 2;
t2442 = t2491 + t2463;
t2625 = -t2563 * t2619 + t2564 * t2618;
t2630 = -t2442 * t2566 + t2570 * t2625;
t2631 = t2442 * t2570 + t2566 * t2625;
t2635 = -t2567 * t2631 + t2571 * t2630;
t2641 = t2568 * t2635 - t2572 * t2624;
t2640 = t2568 * t2624 + t2572 * t2635;
t2450 = t2583 - t2607;
t2620 = -t2615 - t2463;
t2626 = -t2450 * t2565 + t2569 * t2620;
t2627 = t2569 * t2450 + t2565 * t2620;
t2629 = -t2563 * t2627 + t2564 * t2626;
t2639 = t2566 * t2629;
t2628 = t2563 * t2626 + t2564 * t2627;
t2638 = t2568 * t2628;
t2637 = t2570 * t2629;
t2636 = t2572 * t2628;
t2634 = t2567 * t2630 + t2571 * t2631;
t2562 = t2571 ^ 2;
t2574 = qJD(1) ^ 2;
t2548 = t2568 * g(1) - t2572 * g(2);
t2587 = qJDD(1) * pkin(1) + t2548;
t2588 = qJD(2) * pkin(2) - pkin(8) * t2611;
t2507 = t2540 * pkin(2) + (pkin(8) * t2562 + pkin(7)) * t2574 - t2588 * t2611 + t2587;
t2617 = t2518 ^ 2;
t2616 = t2519 ^ 2;
t2515 = t2532 ^ 2;
t2614 = t2534 ^ 2;
t2613 = t2560 ^ 2;
t2612 = -2 * qJD(4);
t2605 = t2518 * t2519;
t2604 = t2532 * t2518;
t2603 = t2532 * t2519;
t2602 = t2532 * t2534;
t2601 = t2562 * t2574;
t2600 = t2567 * t2574;
t2599 = qJD(3) - t2560;
t2483 = (qJD(3) + t2560) * t2534 + t2590;
t2591 = t2560 * t2532 - t2505;
t2440 = pkin(3) * t2483 + qJ(4) * t2591 - t2507;
t2549 = -g(1) * t2572 - g(2) * t2568;
t2580 = -pkin(1) * t2574 + qJDD(1) * pkin(7) + t2549;
t2526 = -t2567 * g(3) + t2571 * t2580;
t2503 = -pkin(2) * t2601 + t2540 * pkin(8) - qJD(2) * t2588 + t2526;
t2579 = t2567 * t2580;
t2575 = -t2579 - t2539 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2600 - g(3)) * t2571;
t2465 = t2570 * t2503 + t2566 * t2575;
t2513 = pkin(3) * t2532 - qJ(4) * t2534;
t2447 = -pkin(3) * t2613 + qJ(4) * t2596 - t2532 * t2513 + t2465;
t2407 = t2563 * t2440 + t2564 * t2447 + t2518 * t2612;
t2508 = pkin(4) * t2532 - pkin(9) * t2519;
t2399 = -pkin(4) * t2617 + pkin(9) * t2584 - t2532 * t2508 + t2407;
t2406 = t2564 * t2440 - t2563 * t2447 + t2519 * t2612;
t2469 = -t2496 - t2604;
t2470 = t2586 - t2605;
t2576 = pkin(4) * t2470 + pkin(9) * t2469 + t2406;
t2364 = t2569 * t2399 + t2565 * t2576;
t2561 = t2567 ^ 2;
t2598 = t2561 + t2562;
t2363 = -t2565 * t2399 + t2569 * t2576;
t2464 = -t2566 * t2503 + t2570 * t2575;
t2585 = -qJD(5) * t2495 - t2592;
t2446 = -t2596 * pkin(3) - t2613 * qJ(4) + t2534 * t2513 + qJDD(4) - t2464;
t2408 = -t2584 * pkin(4) - t2617 * pkin(9) + t2519 * t2508 + t2446;
t2573 = qJD(2) ^ 2;
t2553 = t2571 * t2600;
t2551 = -t2573 - t2601;
t2550 = -t2561 * t2574 - t2573;
t2547 = -qJDD(2) + t2553;
t2546 = qJDD(2) + t2553;
t2545 = t2598 * t2574;
t2544 = -qJDD(1) * t2568 - t2572 * t2574;
t2543 = qJDD(1) * t2572 - t2568 * t2574;
t2542 = t2598 * qJDD(1);
t2541 = t2558 - 0.2e1 * t2594;
t2538 = 0.2e1 * t2593 + t2597;
t2535 = t2574 * pkin(7) + t2587;
t2525 = -t2571 * g(3) - t2579;
t2524 = -t2613 - t2614;
t2523 = t2547 * t2571 - t2550 * t2567;
t2522 = -t2546 * t2567 + t2551 * t2571;
t2521 = t2547 * t2567 + t2550 * t2571;
t2520 = t2546 * t2571 + t2551 * t2567;
t2512 = -t2596 - t2602;
t2511 = t2596 - t2602;
t2510 = -t2515 - t2613;
t2506 = -t2614 - t2515;
t2502 = -t2525 * t2567 + t2526 * t2571;
t2501 = t2525 * t2571 + t2526 * t2567;
t2497 = -t2515 - t2616;
t2488 = t2512 * t2570 - t2524 * t2566;
t2487 = t2512 * t2566 + t2524 * t2570;
t2486 = t2532 * t2599 + t2589;
t2484 = -t2534 * t2599 - t2590;
t2482 = -t2515 - t2617;
t2477 = t2510 * t2570 - t2511 * t2566;
t2476 = t2510 * t2566 + t2511 * t2570;
t2474 = -t2616 - t2617;
t2471 = -t2586 - t2605;
t2468 = t2496 - t2604;
t2467 = t2584 + t2603;
t2466 = -t2584 + t2603;
t2462 = pkin(5) * t2493 - qJ(6) * t2495;
t2459 = -t2487 * t2567 + t2488 * t2571;
t2458 = t2487 * t2571 + t2488 * t2567;
t2457 = t2484 * t2570 - t2486 * t2566;
t2456 = t2484 * t2566 + t2486 * t2570;
t2455 = -t2476 * t2567 + t2477 * t2571;
t2454 = t2476 * t2571 + t2477 * t2567;
t2453 = t2471 * t2564 - t2497 * t2563;
t2452 = t2471 * t2563 + t2497 * t2564;
t2444 = -t2470 * t2563 + t2482 * t2564;
t2443 = t2470 * t2564 + t2482 * t2563;
t2436 = t2467 * t2564 - t2469 * t2563;
t2435 = t2467 * t2563 + t2469 * t2564;
t2434 = -t2464 * t2566 + t2465 * t2570;
t2433 = t2464 * t2570 + t2465 * t2566;
t2427 = t2531 * t2495 - t2585;
t2426 = (qJD(5) + t2531) * t2495 + t2592;
t2420 = t2453 * t2570 + t2468 * t2566;
t2419 = t2453 * t2566 - t2468 * t2570;
t2418 = t2444 * t2570 + t2466 * t2566;
t2417 = t2444 * t2566 - t2466 * t2570;
t2416 = -t2456 * t2567 + t2457 * t2571;
t2415 = t2456 * t2571 + t2457 * t2567;
t2414 = t2436 * t2570 + t2474 * t2566;
t2413 = t2436 * t2566 - t2474 * t2570;
t2405 = -t2433 * t2567 + t2434 * t2571;
t2404 = t2433 * t2571 + t2434 * t2567;
t2393 = -t2419 * t2567 + t2420 * t2571;
t2392 = t2419 * t2571 + t2420 * t2567;
t2391 = -t2417 * t2567 + t2418 * t2571;
t2390 = t2417 * t2571 + t2418 * t2567;
t2389 = -t2413 * t2567 + t2414 * t2571;
t2388 = t2413 * t2571 + t2414 * t2567;
t2381 = -t2406 * t2563 + t2407 * t2564;
t2380 = t2406 * t2564 + t2407 * t2563;
t2379 = t2427 * t2566 + t2637;
t2377 = -t2427 * t2570 + t2639;
t2375 = t2426 * t2566 + t2637;
t2373 = -t2426 * t2570 + t2639;
t2371 = -t2585 * pkin(5) + (pkin(5) * t2531 - (2 * qJD(6))) * t2495 + t2408 - t2577 * qJ(6);
t2370 = t2381 * t2570 + t2446 * t2566;
t2369 = t2381 * t2566 - t2446 * t2570;
t2358 = -pkin(5) * t2583 - qJ(6) * t2615 + t2495 * t2462 + qJDD(6) - t2363;
t2357 = -pkin(5) * t2615 + qJ(6) * t2583 + 0.2e1 * qJD(6) * t2531 - t2493 * t2462 + t2364;
t2356 = -t2377 * t2567 + t2379 * t2571;
t2354 = t2377 * t2571 + t2379 * t2567;
t2352 = -t2373 * t2567 + t2375 * t2571;
t2350 = t2373 * t2571 + t2375 * t2567;
t2348 = -t2369 * t2567 + t2370 * t2571;
t2347 = t2369 * t2571 + t2370 * t2567;
t2346 = -t2363 * t2565 + t2364 * t2569;
t2345 = t2363 * t2569 + t2364 * t2565;
t2340 = t2357 * t2569 + t2358 * t2565;
t2339 = t2357 * t2565 - t2358 * t2569;
t2338 = -t2345 * t2563 + t2346 * t2564;
t2337 = t2345 * t2564 + t2346 * t2563;
t2336 = t2338 * t2570 + t2408 * t2566;
t2335 = t2338 * t2566 - t2408 * t2570;
t2334 = -t2339 * t2563 + t2340 * t2564;
t2333 = t2339 * t2564 + t2340 * t2563;
t2332 = t2334 * t2570 + t2371 * t2566;
t2331 = t2334 * t2566 - t2371 * t2570;
t2330 = -t2335 * t2567 + t2336 * t2571;
t2329 = t2335 * t2571 + t2336 * t2567;
t2328 = -t2331 * t2567 + t2332 * t2571;
t2327 = t2331 * t2571 + t2332 * t2567;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2544, -t2543, 0, -t2548 * t2568 + t2549 * t2572, 0, 0, 0, 0, 0, 0, t2522 * t2572 - t2541 * t2568, t2523 * t2572 + t2538 * t2568, t2542 * t2572 - t2545 * t2568, t2502 * t2572 - t2535 * t2568, 0, 0, 0, 0, 0, 0, t2455 * t2572 + t2483 * t2568, t2459 * t2572 - t2568 * t2591, t2416 * t2572 + t2506 * t2568, t2405 * t2572 - t2507 * t2568, 0, 0, 0, 0, 0, 0, t2391 * t2572 + t2443 * t2568, t2393 * t2572 + t2452 * t2568, t2389 * t2572 + t2435 * t2568, t2348 * t2572 + t2380 * t2568, 0, 0, 0, 0, 0, 0, t2352 * t2572 + t2638, -t2644, t2640, t2330 * t2572 + t2337 * t2568, 0, 0, 0, 0, 0, 0, t2356 * t2572 + t2638, t2640, t2644, t2328 * t2572 + t2333 * t2568; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2543, t2544, 0, t2548 * t2572 + t2549 * t2568, 0, 0, 0, 0, 0, 0, t2522 * t2568 + t2541 * t2572, t2523 * t2568 - t2538 * t2572, t2542 * t2568 + t2545 * t2572, t2502 * t2568 + t2535 * t2572, 0, 0, 0, 0, 0, 0, t2455 * t2568 - t2483 * t2572, t2459 * t2568 + t2572 * t2591, t2416 * t2568 - t2506 * t2572, t2405 * t2568 + t2507 * t2572, 0, 0, 0, 0, 0, 0, t2391 * t2568 - t2443 * t2572, t2393 * t2568 - t2452 * t2572, t2389 * t2568 - t2435 * t2572, t2348 * t2568 - t2380 * t2572, 0, 0, 0, 0, 0, 0, t2352 * t2568 - t2636, -t2645, t2641, t2330 * t2568 - t2337 * t2572, 0, 0, 0, 0, 0, 0, t2356 * t2568 - t2636, t2641, t2645, t2328 * t2568 - t2333 * t2572; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2520, t2521, 0, t2501, 0, 0, 0, 0, 0, 0, t2454, t2458, t2415, t2404, 0, 0, 0, 0, 0, 0, t2390, t2392, t2388, t2347, 0, 0, 0, 0, 0, 0, t2350, t2353, t2634, t2329, 0, 0, 0, 0, 0, 0, t2354, t2634, -t2353, t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2574, -qJDD(1), 0, t2549, 0, 0, 0, 0, 0, 0, t2522, t2523, t2542, t2502, 0, 0, 0, 0, 0, 0, t2455, t2459, t2416, t2405, 0, 0, 0, 0, 0, 0, t2391, t2393, t2389, t2348, 0, 0, 0, 0, 0, 0, t2352, -t2351, t2635, t2330, 0, 0, 0, 0, 0, 0, t2356, t2635, t2351, t2328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2574, 0, t2548, 0, 0, 0, 0, 0, 0, t2541, -t2538, t2545, t2535, 0, 0, 0, 0, 0, 0, -t2483, t2591, -t2506, t2507, 0, 0, 0, 0, 0, 0, -t2443, -t2452, -t2435, -t2380, 0, 0, 0, 0, 0, 0, -t2628, t2382, -t2624, -t2337, 0, 0, 0, 0, 0, 0, -t2628, -t2624, -t2382, -t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2520, t2521, 0, t2501, 0, 0, 0, 0, 0, 0, t2454, t2458, t2415, t2404, 0, 0, 0, 0, 0, 0, t2390, t2392, t2388, t2347, 0, 0, 0, 0, 0, 0, t2350, t2353, t2634, t2329, 0, 0, 0, 0, 0, 0, t2354, t2634, -t2353, t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2551, t2547, t2558, t2526, 0, 0, 0, 0, 0, 0, t2477, t2488, t2457, t2434, 0, 0, 0, 0, 0, 0, t2418, t2420, t2414, t2370, 0, 0, 0, 0, 0, 0, t2375, t2378, t2630, t2336, 0, 0, 0, 0, 0, 0, t2379, t2630, -t2378, t2332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2546, t2550, -t2597, t2525, 0, 0, 0, 0, 0, 0, t2476, t2487, t2456, t2433, 0, 0, 0, 0, 0, 0, t2417, t2419, t2413, t2369, 0, 0, 0, 0, 0, 0, t2373, t2376, t2631, t2335, 0, 0, 0, 0, 0, 0, t2377, t2631, -t2376, t2331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2541, t2538, -t2545, -t2535, 0, 0, 0, 0, 0, 0, t2483, -t2591, t2506, -t2507, 0, 0, 0, 0, 0, 0, t2443, t2452, t2435, t2380, 0, 0, 0, 0, 0, 0, t2628, -t2382, t2624, t2337, 0, 0, 0, 0, 0, 0, t2628, t2624, t2382, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2510, t2512, t2484, t2465, 0, 0, 0, 0, 0, 0, t2444, t2453, t2436, t2381, 0, 0, 0, 0, 0, 0, t2629, t2396, t2625, t2338, 0, 0, 0, 0, 0, 0, t2629, t2625, -t2396, t2334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2511, t2524, t2486, t2464, 0, 0, 0, 0, 0, 0, -t2466, -t2468, -t2474, -t2446, 0, 0, 0, 0, 0, 0, -t2426, -t2577, t2442, -t2408, 0, 0, 0, 0, 0, 0, -t2427, t2442, t2577, -t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2483, -t2591, t2506, -t2507, 0, 0, 0, 0, 0, 0, t2443, t2452, t2435, t2380, 0, 0, 0, 0, 0, 0, t2628, -t2382, t2624, t2337, 0, 0, 0, 0, 0, 0, t2628, t2624, t2382, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2482, t2471, t2467, t2407, 0, 0, 0, 0, 0, 0, t2626, -t2411, t2618, t2346, 0, 0, 0, 0, 0, 0, t2626, t2618, t2411, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2470, t2497, t2469, t2406, 0, 0, 0, 0, 0, 0, t2627, -t2409, t2619, t2345, 0, 0, 0, 0, 0, 0, t2627, t2619, t2409, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2466, t2468, t2474, t2446, 0, 0, 0, 0, 0, 0, t2426, t2577, -t2442, t2408, 0, 0, 0, 0, 0, 0, t2427, -t2442, -t2577, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620, -t2449, t2582, t2364, 0, 0, 0, 0, 0, 0, t2620, t2582, t2449, t2357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2450, t2621, -t2430, t2363, 0, 0, 0, 0, 0, 0, t2450, -t2430, -t2621, -t2358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, t2577, -t2442, t2408, 0, 0, 0, 0, 0, 0, t2427, -t2442, -t2577, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620, t2582, t2449, t2357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2427, -t2442, -t2577, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2450, t2430, t2621, t2358;];
f_new_reg  = t1;
