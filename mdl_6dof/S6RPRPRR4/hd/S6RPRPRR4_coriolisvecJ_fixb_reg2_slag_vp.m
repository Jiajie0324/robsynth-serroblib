% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:46:27
% EndTime: 2019-03-09 03:46:37
% DurationCPUTime: 3.51s
% Computational Cost: add. (6005->397), mult. (12875->535), div. (0->0), fcn. (7798->8), ass. (0->224)
t153 = sin(pkin(10)) * pkin(1) + pkin(7);
t285 = pkin(4) + t153;
t172 = sin(qJ(6));
t173 = sin(qJ(5));
t175 = cos(qJ(6));
t176 = cos(qJ(5));
t130 = t172 * t176 + t173 * t175;
t174 = sin(qJ(3));
t188 = t130 * t174;
t292 = qJD(5) + qJD(6);
t64 = t292 * t130;
t278 = qJD(1) * t188 + t64;
t242 = qJD(3) * t173;
t177 = cos(qJ(3));
t243 = qJD(1) * t177;
t127 = t176 * t243 + t242;
t240 = qJD(3) * t176;
t129 = -t173 * t243 + t240;
t202 = t127 * t172 - t175 * t129;
t54 = t175 * t127 + t129 * t172;
t286 = t54 * t202;
t253 = t173 * t174;
t195 = pkin(5) * t177 - pkin(9) * t253;
t238 = qJD(5) * t173;
t178 = -pkin(3) - pkin(8);
t284 = pkin(9) - t178;
t245 = qJD(1) * t174;
t161 = pkin(3) * t245;
t206 = pkin(8) * t174 - qJ(4) * t177;
t106 = t206 * qJD(1) + t161;
t137 = t153 * qJD(1);
t233 = t174 * qJD(2);
t105 = t137 * t177 + t233;
t159 = pkin(4) * t243;
t84 = t105 + t159;
t42 = -t173 * t106 + t176 * t84;
t305 = qJD(1) * t195 - t284 * t238 + t42;
t134 = t284 * t176;
t244 = qJD(1) * t176;
t227 = t174 * t244;
t43 = t176 * t106 + t173 * t84;
t304 = pkin(9) * t227 + qJD(5) * t134 + t43;
t236 = qJD(5) * t177;
t224 = t173 * t236;
t225 = t174 * t240;
t186 = t224 + t225;
t162 = t177 * qJD(2);
t104 = t174 * t137 - t162;
t303 = -qJD(4) - t104;
t302 = t202 ^ 2 - t54 ^ 2;
t215 = pkin(4) * qJD(1) + t137;
t293 = qJD(4) - t162;
t249 = t215 * t174 + t293;
t63 = t178 * qJD(3) + t249;
t154 = -cos(pkin(10)) * pkin(1) - pkin(2);
t194 = -t174 * qJ(4) + t154;
t101 = t178 * t177 + t194;
t77 = t101 * qJD(1);
t33 = t173 * t63 + t176 * t77;
t231 = qJD(1) * qJD(3);
t220 = t174 * t231;
t151 = pkin(3) * t220;
t232 = t174 * qJD(4);
t184 = t206 * qJD(3) - t232;
t68 = qJD(1) * t184 + t151;
t69 = (t215 * t177 + t233) * qJD(3);
t13 = -qJD(5) * t33 - t173 * t68 + t176 * t69;
t156 = t177 * t231;
t81 = qJD(5) * t127 - t173 * t220;
t10 = pkin(5) * t156 + t81 * pkin(9) + t13;
t237 = qJD(5) * t176;
t12 = t173 * t69 + t176 * t68 + t63 * t237 - t77 * t238;
t82 = -qJD(1) * t186 + qJD(3) * t237;
t11 = -pkin(9) * t82 + t12;
t152 = qJD(5) + t245;
t32 = -t173 * t77 + t176 * t63;
t29 = -pkin(9) * t129 + t32;
t27 = pkin(5) * t152 + t29;
t30 = -pkin(9) * t127 + t33;
t270 = t175 * t30;
t6 = t172 * t27 + t270;
t2 = -t6 * qJD(6) + t175 * t10 - t172 * t11;
t89 = -qJD(3) * qJ(4) - t105;
t74 = t159 - t89;
t45 = pkin(5) * t127 + t74;
t301 = t45 * t202 + t2;
t145 = qJD(6) + t152;
t234 = qJD(6) * t175;
t235 = qJD(6) * t172;
t23 = t127 * t234 + t129 * t235 + t172 * t82 + t175 * t81;
t300 = t145 * t54 - t23;
t1 = (qJD(6) * t27 + t11) * t175 + t172 * t10 - t30 * t235;
t299 = t45 * t54 - t1;
t183 = t202 * qJD(6) + t172 * t81 - t175 * t82;
t298 = -t145 * t202 + t183;
t297 = -t152 * t32 + t12;
t296 = t33 * t152 + t13;
t196 = t127 * t152;
t295 = t81 - t196;
t258 = t129 * t152;
t294 = -t82 + t258;
t252 = t175 * t176;
t254 = t172 * t173;
t201 = -t252 + t254;
t107 = t201 * t177;
t86 = -qJD(3) * pkin(3) - t303;
t291 = t201 * t23 + t202 * t278;
t277 = -t172 * t238 - t173 * t235 + t175 * t227 - t245 * t254 + t292 * t252;
t290 = -t130 * t183 + t277 * t54;
t169 = t177 ^ 2;
t222 = t176 * t236;
t256 = t152 * t174;
t289 = -(qJD(1) * t169 - t256) * t242 - t152 * t222;
t203 = t173 * t32 - t176 * t33;
t288 = -t203 * qJD(5) + t12 * t173 + t13 * t176;
t273 = t172 * t30;
t5 = t175 * t27 - t273;
t287 = t1 * t130 - t2 * t201 + t277 * t6 - t278 * t5;
t133 = t284 * t173;
t67 = -t133 * t175 - t134 * t172;
t283 = t67 * qJD(6) - t172 * t304 + t175 * t305;
t66 = t133 * t172 - t134 * t175;
t282 = -t66 * qJD(6) + t172 * t305 + t175 * t304;
t108 = t130 * t177;
t37 = qJD(3) * t188 + t292 * t107;
t281 = -t108 * t183 - t37 * t54;
t241 = qJD(3) * t174;
t38 = t64 * t177 - t201 * t241;
t280 = t107 * t156 + t38 * t145;
t239 = qJD(3) * t177;
t279 = -t23 * t174 - t202 * t239;
t166 = qJD(3) * qJD(4);
t248 = -qJD(3) * t162 + t137 * t241;
t80 = -t166 + t248;
t59 = -pkin(4) * t220 - t80;
t272 = t173 * t59;
t271 = t174 * t82;
t269 = t176 * t59;
t268 = t176 * t81;
t266 = t82 * t173;
t94 = t105 * qJD(3);
t265 = t94 * t174;
t264 = t94 * t177;
t263 = t129 * t239 - t81 * t174;
t229 = -pkin(5) * t176 - pkin(4);
t262 = pkin(5) * t237 - (t229 * qJD(1) - t137) * t174 + t293;
t120 = t285 * t174;
t109 = t173 * t120;
t47 = t176 * t101 + t109;
t261 = t127 * t176;
t260 = t127 * t177;
t259 = t129 * t127;
t257 = t129 * t173;
t255 = t152 * t178;
t251 = t176 * t177;
t179 = qJD(3) ^ 2;
t163 = t179 * t174;
t164 = t179 * t177;
t250 = t74 * qJD(3);
t247 = t186 * t152;
t121 = t285 * t177;
t168 = t174 ^ 2;
t246 = t168 - t169;
t119 = -pkin(3) * t177 + t194;
t90 = qJD(1) * t119;
t138 = qJD(1) * t154;
t230 = t176 * t256;
t228 = t169 * t244;
t226 = t173 * t241;
t223 = t152 * t237;
t221 = t277 * t145;
t219 = pkin(9) * t177 - t101;
t114 = t285 * t239;
t160 = pkin(3) * t241;
t87 = t160 + t184;
t216 = t176 * t114 - t173 * t87;
t211 = t129 * t225;
t210 = -t145 * t278 - t201 * t156;
t208 = -t107 * t23 - t202 * t38;
t207 = t104 * qJD(3) - t248;
t110 = t176 * t120;
t41 = t174 * pkin(5) + t219 * t173 + t110;
t44 = -pkin(9) * t251 + t47;
t18 = -t172 * t44 + t175 * t41;
t19 = t172 * t41 + t175 * t44;
t204 = t173 * t33 + t176 * t32;
t200 = -0.2e1 * qJD(3) * t90;
t198 = 0.2e1 * qJD(3) * t138;
t197 = t152 * t173;
t193 = t174 * t183 - t54 * t239;
t192 = t174 * t74 + t178 * t239;
t189 = -qJ(4) * t239 - t232;
t115 = t160 + t189;
t91 = qJD(1) * t189 + t151;
t191 = qJD(1) * t115 + t153 * t179 + t91;
t25 = -t101 * t238 + t173 * t114 + t120 * t237 + t176 * t87;
t187 = -t108 * t156 + t145 * t37;
t182 = t265 - t80 * t177 + (t174 * t89 + t177 * t86) * qJD(3);
t181 = t265 - t248 * t177 + (t104 * t177 - t105 * t174) * qJD(3);
t180 = qJD(1) ^ 2;
t155 = pkin(5) * t173 + qJ(4);
t149 = t177 * t180 * t174;
t144 = t176 * t156;
t143 = t174 * t156;
t140 = -0.2e1 * t143;
t139 = 0.2e1 * t143;
t135 = t246 * t180;
t132 = -qJ(4) * t243 + t161;
t118 = -0.2e1 * t246 * t231;
t113 = t285 * t241;
t100 = t127 * t226;
t92 = pkin(5) * t251 + t121;
t78 = t90 * t245;
t52 = -pkin(5) * t224 + (-t153 + t229) * t241;
t46 = -t101 * t173 + t110;
t39 = pkin(5) * t82 + t59;
t26 = -t47 * qJD(5) + t216;
t20 = pkin(9) * t186 + t25;
t16 = t195 * qJD(3) + (t219 * t176 - t109) * qJD(5) + t216;
t9 = t175 * t29 - t273;
t8 = -t172 * t29 - t270;
t4 = -t19 * qJD(6) + t175 * t16 - t172 * t20;
t3 = t18 * qJD(6) + t172 * t16 + t175 * t20;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, t118, t164, t140, -t163, 0, -t153 * t164 + t174 * t198, t153 * t163 + t177 * t198, t181, t181 * t153, 0, -t164, t163, t139, t118, t140, t182, t174 * t200 + t191 * t177, -t191 * t174 + t177 * t200, t90 * t115 + t91 * t119 + t153 * t182, t81 * t173 * t177 + (-t222 + t226) * t129, t211 - t100 + (t266 + t268 + (t257 + t261) * qJD(5)) * t177, t263 + t289, -t127 * t186 + t82 * t251, -t271 + (-t228 - t260) * qJD(3) + t247, t152 * t239 + t143, -t113 * t127 + t121 * t82 + t152 * t26 + (-t74 * t240 + t13) * t174 + (-t74 * t238 + t269 + (qJD(1) * t46 + t32) * qJD(3)) * t177, -t113 * t129 - t121 * t81 - t152 * t25 + (t74 * t242 - t12) * t174 + (-t74 * t237 - t272 + (-qJD(1) * t47 - t33) * qJD(3)) * t177, -t127 * t25 - t129 * t26 + t46 * t81 - t47 * t82 - t203 * t241 + (t204 * qJD(5) - t12 * t176 + t13 * t173) * t177, -t113 * t74 + t12 * t47 + t121 * t59 + t13 * t46 + t25 * t33 + t26 * t32, t108 * t23 - t202 * t37, t208 + t281, t187 + t279, t107 * t183 - t38 * t54, t193 + t280, t145 * t239 + t143, -t107 * t39 + t145 * t4 + t174 * t2 - t183 * t92 - t38 * t45 + t52 * t54 + (qJD(1) * t18 + t5) * t239, -t1 * t174 - t108 * t39 - t145 * t3 - t23 * t92 + t37 * t45 - t52 * t202 + (-qJD(1) * t19 - t6) * t239, t1 * t107 + t108 * t2 + t18 * t23 + t183 * t19 + t202 * t4 - t3 * t54 - t37 * t5 + t38 * t6, t1 * t19 + t18 * t2 + t3 * t6 + t39 * t92 + t4 * t5 + t45 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t164, 0, -t248 * t174 - t264 + (t104 * t174 + t105 * t177) * qJD(3), 0, 0, 0, 0, 0, 0, 0, t163, t164, -t80 * t174 - t264 + (t174 * t86 - t177 * t89) * qJD(3), 0, 0, 0, 0, 0, 0, t271 + (-t228 + t260) * qJD(3) + t247, t263 - t289, -t211 - t100 + (t266 - t268 + (-t257 + t261) * qJD(5)) * t177 (t204 * qJD(3) + t59) * t174 + (t250 - t288) * t177, 0, 0, 0, 0, 0, 0, -t193 + t280, -t187 + t279, -t208 + t281, -t1 * t108 + t107 * t2 + t174 * t39 + t239 * t45 + t37 * t6 + t38 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, t135, 0, t149, 0, 0, -t138 * t245, -t138 * t243 - t207, 0, 0, 0, 0, 0, -t149, t135, t149, 0, -t132 * t243 + t78, 0.2e1 * t166 + (t132 * t174 + t177 * t90) * qJD(1) + t207, -t94 * pkin(3) - t80 * qJ(4) - t86 * t105 - t90 * t132 + t303 * t89, -t129 * t197 - t268 (-t82 - t258) * t176 + (t81 + t196) * t173, -t152 * t238 + t144 + (-t129 * t177 - t152 * t253) * qJD(1), t176 * t196 + t266, -t223 + (-t230 + (t127 - t242) * t177) * qJD(1), -t152 * t243, qJ(4) * t82 - t152 * t42 + t272 + t249 * t127 + (-t173 * t255 + t176 * t74) * qJD(5) + (t176 * t192 - t177 * t32) * qJD(1), -qJ(4) * t81 + t152 * t43 + t269 + t249 * t129 + (-t173 * t74 - t176 * t255) * qJD(5) + (-t173 * t192 + t177 * t33) * qJD(1), t127 * t43 + t129 * t42 + (-t33 * t245 + t178 * t81 - t13 + (-t127 * t178 - t33) * qJD(5)) * t176 + (t32 * t245 - t178 * t82 - t12 + (t129 * t178 + t32) * qJD(5)) * t173, qJ(4) * t59 + t288 * t178 + t249 * t74 - t32 * t42 - t33 * t43, t291, t23 * t130 - t183 * t201 + t202 * t277 + t278 * t54, t202 * t243 + t210, t290, -t221 + (-qJD(3) * t130 + t54) * t243, -t145 * t243, t130 * t39 - t155 * t183 + t262 * t54 + t277 * t45 - t283 * t145 + (qJD(3) * t66 - t5) * t243, -t201 * t39 - t155 * t23 - t262 * t202 - t278 * t45 + t282 * t145 + (-qJD(3) * t67 + t6) * t243, t183 * t67 - t202 * t283 + t23 * t66 + t282 * t54 - t287, t1 * t67 + t155 * t39 + t2 * t66 + t262 * t45 - t282 * t6 - t283 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t168 * t180 - t179, t78 + (t105 + t89) * qJD(3), 0, 0, 0, 0, 0, 0, -qJD(3) * t127 - t152 * t197 + t144, -t223 - qJD(3) * t129 + (-t173 * t239 - t230) * qJD(1), t294 * t173 + t295 * t176, t297 * t173 + t296 * t176 - t250, 0, 0, 0, 0, 0, 0, -qJD(3) * t54 + t210, -t221 + (-t130 * t243 + t202) * qJD(3), -t290 - t291, -qJD(3) * t45 + t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t259, -t127 ^ 2 + t129 ^ 2, -t295, -t259, t294, t156, -t74 * t129 + t296, t127 * t74 - t297, 0, 0, -t286, t302, t300, t286, t298, t156, -t145 * t8 + (-t129 * t54 - t145 * t235 + t156 * t175) * pkin(5) + t301, t145 * t9 + (t129 * t202 - t145 * t234 - t156 * t172) * pkin(5) + t299, -t5 * t54 - t202 * t6 + t54 * t9 - t202 * t8 + (t172 * t183 + t175 * t23 + (-t172 * t202 - t175 * t54) * qJD(6)) * pkin(5), -t5 * t8 - t6 * t9 + (t1 * t172 - t129 * t45 + t175 * t2 + (-t172 * t5 + t175 * t6) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t286, t302, t300, t286, t298, t156, t6 * t145 + t301, t5 * t145 + t299, 0, 0;];
tauc_reg  = t7;
