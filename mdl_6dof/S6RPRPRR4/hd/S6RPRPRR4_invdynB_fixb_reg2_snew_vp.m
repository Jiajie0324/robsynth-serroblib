% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:45:04
% EndTime: 2019-05-05 18:45:31
% DurationCPUTime: 22.92s
% Computational Cost: add. (73341->723), mult. (147518->1038), div. (0->0), fcn. (89961->10), ass. (0->497)
t781 = sin(qJ(3));
t770 = t781 ^ 2;
t788 = qJD(1) ^ 2;
t764 = t770 * t788;
t787 = qJD(3) ^ 2;
t749 = -t764 - t787;
t785 = cos(qJ(3));
t819 = t781 * t785 * t788;
t742 = qJDD(3) - t819;
t833 = t785 * t742;
t684 = t749 * t781 + t833;
t828 = qJD(1) * qJD(3);
t760 = t785 * t828;
t826 = qJDD(1) * t781;
t730 = 0.2e1 * t760 + t826;
t775 = sin(pkin(10));
t776 = cos(pkin(10));
t616 = t684 * t775 + t730 * t776;
t620 = t684 * t776 - t730 * t775;
t782 = sin(qJ(1));
t786 = cos(qJ(1));
t547 = t616 * t786 + t620 * t782;
t914 = pkin(6) * t547;
t552 = t616 * t782 - t620 * t786;
t913 = pkin(6) * t552;
t771 = t785 ^ 2;
t766 = t771 * t788;
t751 = -t766 - t787;
t741 = qJDD(3) + t819;
t849 = t741 * t781;
t683 = -t751 * t785 + t849;
t813 = t781 * t828;
t825 = qJDD(1) * t785;
t729 = -0.2e1 * t813 + t825;
t615 = t683 * t775 - t729 * t776;
t619 = t683 * t776 + t729 * t775;
t546 = t615 * t786 + t619 * t782;
t912 = pkin(6) * t546;
t549 = t615 * t782 - t619 * t786;
t911 = pkin(6) * t549;
t910 = qJ(2) * t616;
t909 = pkin(1) * t616 + pkin(7) * t684;
t848 = t742 * t781;
t676 = -t749 * t785 + t848;
t908 = -pkin(1) * t676 + qJ(2) * t620;
t748 = -t764 + t787;
t834 = t785 * t741;
t678 = -t748 * t781 + t834;
t634 = t678 * t775 - t776 * t826;
t638 = t678 * t776 + t775 * t826;
t907 = t634 * t786 + t638 * t782;
t906 = t634 * t782 - t638 * t786;
t905 = qJ(2) * t615;
t904 = pkin(1) * t615 + pkin(7) * t683;
t674 = t751 * t781 + t834;
t903 = pkin(1) * t674 + qJ(2) * t619;
t750 = t766 - t787;
t681 = -t750 * t785 + t848;
t637 = t681 * t775 + t776 * t825;
t641 = t681 * t776 - t775 * t825;
t902 = t637 * t786 + t641 * t782;
t901 = t637 * t782 - t641 * t786;
t899 = pkin(2) * t674;
t898 = pkin(7) * t674;
t745 = g(1) * t786 + g(2) * t782;
t727 = -pkin(1) * t788 - t745;
t744 = g(1) * t782 - t786 * g(2);
t796 = qJDD(1) * pkin(1) + t744;
t655 = t775 * t727 - t776 * t796;
t656 = t776 * t727 + t775 * t796;
t810 = t655 * t775 + t776 * t656;
t579 = t655 * t776 - t656 * t775;
t863 = t579 * t782;
t501 = t786 * t810 + t863;
t862 = t579 * t786;
t896 = -t782 * t810 + t862;
t734 = qJDD(1) * t775 + t776 * t788;
t735 = qJDD(1) * t776 - t775 * t788;
t662 = -t734 * t782 + t786 * t735;
t772 = g(3) - qJDD(2);
t696 = qJ(2) * t734 - t772 * t776;
t800 = -qJ(2) * t735 - t772 * t775;
t895 = -pkin(6) * t662 + t696 * t782 + t786 * t800;
t893 = pkin(2) * t676;
t892 = pkin(7) * t676;
t779 = sin(qJ(6));
t780 = sin(qJ(5));
t784 = cos(qJ(5));
t830 = qJD(1) * t785;
t721 = qJD(3) * t780 + t784 * t830;
t723 = qJD(3) * t784 - t780 * t830;
t783 = cos(qJ(6));
t652 = t783 * t721 + t723 * t779;
t654 = -t721 * t779 + t723 * t783;
t589 = t654 * t652;
t731 = t760 + t826;
t713 = qJDD(5) + t731;
t705 = qJDD(6) + t713;
t880 = -t589 + t705;
t890 = t779 * t880;
t669 = t723 * t721;
t879 = -t669 + t713;
t889 = t780 * t879;
t888 = t783 * t880;
t887 = t784 * t879;
t886 = t731 + t760;
t878 = t786 * t734 + t735 * t782;
t884 = pkin(6) * t878 + t696 * t786 - t782 * t800;
t732 = -t813 + t825;
t648 = -t721 * qJD(5) + t784 * qJDD(3) - t780 * t732;
t831 = qJD(1) * t781;
t755 = qJD(5) + t831;
t858 = t721 * t755;
t603 = t648 + t858;
t877 = t750 * t781 + t833;
t632 = -pkin(2) * t788 + qJDD(1) * pkin(7) + t656;
t869 = qJ(4) * t781;
t872 = pkin(3) * t785;
t802 = -t869 - t872;
t726 = t802 * qJD(1);
t836 = t781 * t772;
t876 = -(qJD(1) * t726 + t632) * t785 + t787 * pkin(3) + t836;
t650 = t652 ^ 2;
t651 = t654 ^ 2;
t711 = t721 ^ 2;
t712 = t723 ^ 2;
t747 = qJD(6) + t755;
t746 = t747 ^ 2;
t752 = t755 ^ 2;
t874 = -2 * qJD(4);
t873 = pkin(3) + pkin(8);
t832 = t770 + t771;
t736 = t832 * qJDD(1);
t739 = t764 + t766;
t666 = t736 * t775 + t739 * t776;
t667 = t736 * t776 - t739 * t775;
t591 = t666 * t786 + t667 * t782;
t871 = pkin(6) * t591;
t870 = qJ(2) * t666;
t743 = pkin(4) * t831 - qJD(3) * pkin(8);
t631 = -qJDD(1) * pkin(2) - t788 * pkin(7) + t655;
t791 = -t732 * pkin(3) - qJ(4) * t886 + t631;
t812 = pkin(3) * qJD(3) + t874;
t530 = -pkin(4) * t766 - t732 * pkin(8) + (-t743 + t812) * t831 + t791;
t609 = t781 * t632 + t785 * t772;
t795 = -qJDD(3) * pkin(3) - t787 * qJ(4) + t726 * t831 + qJDD(4) + t609;
t536 = -t741 * pkin(8) + (t731 - t760) * pkin(4) + t795;
t461 = t780 * t530 - t784 * t536;
t426 = pkin(5) * t879 - pkin(9) * t603 - t461;
t462 = t784 * t530 + t780 * t536;
t806 = t780 * qJDD(3) + t784 * t732;
t647 = -qJD(5) * t723 - t806;
t686 = pkin(5) * t755 - pkin(9) * t723;
t439 = -pkin(5) * t711 + pkin(9) * t647 - t686 * t755 + t462;
t381 = -t783 * t426 + t439 * t779;
t382 = t426 * t779 + t439 * t783;
t352 = -t381 * t783 + t382 * t779;
t868 = t352 * t784;
t790 = qJDD(3) * qJ(4) - t876;
t535 = t732 * pkin(4) - pkin(8) * t766 + ((2 * qJD(4)) + t743) * qJD(3) + t790;
t474 = -t647 * pkin(5) - t711 * pkin(9) + t723 * t686 + t535;
t867 = t474 * t779;
t866 = t474 * t783;
t561 = t589 + t705;
t865 = t561 * t779;
t864 = t561 * t783;
t629 = t669 + t713;
t861 = t629 * t784;
t860 = t631 * t781;
t859 = t631 * t785;
t855 = t729 * t785;
t852 = t730 * t781;
t847 = t747 * t779;
t846 = t747 * t783;
t841 = t755 * t780;
t840 = t755 * t784;
t839 = t780 * t352;
t838 = t780 * t535;
t837 = t780 * t629;
t835 = t784 * t535;
t829 = qJD(6) + t747;
t827 = qJD(4) * qJD(3);
t824 = -t712 - t752;
t823 = t781 * t589;
t822 = t785 * t589;
t821 = t781 * t669;
t820 = t785 * t669;
t818 = pkin(1) * t666 + pkin(2) * t739 + pkin(7) * t736;
t353 = t381 * t779 + t783 * t382;
t611 = t785 * t632 - t836;
t540 = t609 * t781 + t785 * t611;
t811 = -t783 * t647 + t779 * t648;
t671 = -t744 * t782 - t786 * t745;
t805 = t775 * t819;
t804 = t776 * t819;
t738 = qJDD(1) * t786 - t782 * t788;
t803 = -pkin(6) * t738 - g(3) * t782;
t801 = pkin(3) * t781 - qJ(4) * t785;
t401 = -t784 * t461 + t780 * t462;
t402 = t780 * t461 + t784 * t462;
t539 = t609 * t785 - t611 * t781;
t799 = t779 * t647 + t783 * t648;
t798 = t748 * t785 + t849;
t670 = t744 * t786 - t745 * t782;
t797 = t648 - t858;
t793 = (-qJD(6) + t747) * t654 - t811;
t532 = -qJD(6) * t652 + t799;
t792 = (-qJD(5) + t755) * t723 - t806;
t789 = t831 * t874 + t791;
t571 = t790 + 0.2e1 * t827;
t740 = -t764 + t766;
t737 = qJDD(1) * t782 + t786 * t788;
t724 = t801 * qJDD(1);
t716 = t832 * t828;
t698 = -pkin(6) * t737 + g(3) * t786;
t692 = -t712 + t752;
t691 = t711 - t752;
t690 = t731 * t785 - t770 * t828;
t689 = -t732 * t781 - t771 * t828;
t688 = qJDD(3) * t775 + t716 * t776;
t687 = -qJDD(3) * t776 + t716 * t775;
t673 = t886 * t781;
t672 = (t732 - t813) * t785;
t668 = t712 - t711;
t660 = qJ(2) * t667;
t659 = -t852 + t855;
t658 = t729 * t781 + t730 * t785;
t649 = -t752 - t711;
t645 = t690 * t776 - t805;
t644 = t689 * t776 + t805;
t643 = t690 * t775 + t804;
t642 = t689 * t775 - t804;
t627 = -t711 - t712;
t626 = t747 * t652;
t623 = -t651 + t746;
t622 = t650 - t746;
t613 = (t721 * t784 - t723 * t780) * t755;
t612 = (t721 * t780 + t723 * t784) * t755;
t610 = t659 * t776 - t740 * t775;
t608 = t659 * t775 + t740 * t776;
t607 = -t651 - t746;
t605 = -t687 * t782 + t688 * t786;
t604 = t687 * t786 + t688 * t782;
t598 = (qJD(5) + t755) * t723 + t806;
t596 = -t648 * t784 + t723 * t841;
t595 = -t648 * t780 - t723 * t840;
t594 = t647 * t780 - t721 * t840;
t593 = -t647 * t784 - t721 * t841;
t592 = -t666 * t782 + t667 * t786;
t590 = pkin(6) * t592;
t588 = -t612 * t781 + t713 * t785;
t587 = t651 - t650;
t586 = t859 + t892;
t585 = -t691 * t784 + t837;
t584 = t692 * t780 - t887;
t583 = t860 - t898;
t582 = -t691 * t780 - t861;
t581 = -t692 * t784 - t889;
t575 = t611 + t893;
t574 = t609 - t899;
t573 = -t780 * t824 - t861;
t572 = t784 * t824 - t837;
t570 = -t746 - t650;
t569 = pkin(1) * t772 + qJ(2) * t810;
t568 = -t643 * t782 + t645 * t786;
t567 = -t642 * t782 + t644 * t786;
t566 = t643 * t786 + t645 * t782;
t565 = t642 * t786 + t644 * t782;
t564 = t649 * t784 - t889;
t563 = t780 * t649 + t887;
t559 = t812 * t831 + t791;
t558 = qJ(4) * t739 + t795;
t557 = pkin(3) * t739 + t571;
t556 = (-t652 * t783 + t654 * t779) * t747;
t555 = (-t652 * t779 - t654 * t783) * t747;
t554 = -t595 * t781 + t820;
t553 = -t593 * t781 - t820;
t544 = (-t729 + t813) * pkin(3) + t789;
t543 = -pkin(3) * t813 + qJ(4) * t730 - t789;
t542 = -t650 - t651;
t541 = -t608 * t782 + t610 * t786;
t538 = t608 * t786 + t610 * t782;
t531 = -qJD(6) * t654 - t811;
t529 = t780 * t603 + t784 * t792;
t528 = t598 * t784 + t780 * t797;
t527 = -t603 * t784 + t780 * t792;
t526 = t598 * t780 - t784 * t797;
t525 = pkin(3) * t741 + qJ(4) * t751 - t795 + t899;
t524 = t588 * t776 - t613 * t775;
t523 = t588 * t775 + t613 * t776;
t521 = -t893 + pkin(3) * t749 - 0.2e1 * t827 + (-qJDD(3) - t742) * qJ(4) + t876;
t520 = -t581 * t781 + t603 * t785;
t519 = -t582 * t781 + t785 * t792;
t518 = t622 * t783 - t865;
t517 = -t623 * t779 + t888;
t516 = t622 * t779 + t864;
t515 = t623 * t783 + t890;
t514 = t572 * t781 + t785 * t797;
t513 = -t572 * t785 + t781 * t797;
t512 = -t607 * t779 - t864;
t511 = t607 * t783 - t865;
t510 = t539 * t776 - t870;
t509 = t539 * t775 + t660;
t507 = t563 * t781 + t598 * t785;
t506 = -t563 * t785 + t598 * t781;
t505 = -pkin(3) * t852 + t543 * t785 - t892;
t504 = -qJ(4) * t855 - t544 * t781 + t898;
t503 = t540 * t776 + t631 * t775;
t502 = t540 * t775 - t631 * t776;
t499 = -t526 * t781 + t668 * t785;
t498 = -t652 * t829 + t799;
t497 = t532 + t626;
t496 = t532 - t626;
t493 = t654 * t829 + t811;
t492 = t571 * t785 + t781 * t795;
t491 = t571 * t781 - t785 * t795;
t490 = t532 * t783 - t654 * t847;
t489 = t532 * t779 + t654 * t846;
t488 = -t531 * t779 + t652 * t846;
t487 = t531 * t783 + t652 * t847;
t486 = t570 * t783 - t890;
t485 = t570 * t779 + t888;
t484 = t554 * t776 - t596 * t775;
t483 = t553 * t776 - t594 * t775;
t482 = t554 * t775 + t596 * t776;
t481 = t553 * t775 + t594 * t776;
t480 = t527 * t781 + t627 * t785;
t479 = -t527 * t785 + t627 * t781;
t477 = -t557 * t781 + t558 * t785;
t476 = t555 * t780 - t556 * t784;
t475 = -t555 * t784 - t556 * t780;
t473 = -t575 * t775 + t586 * t776 + t910;
t472 = -t574 * t775 + t583 * t776 + t905;
t471 = t520 * t776 - t584 * t775;
t470 = t519 * t776 - t585 * t775;
t469 = t520 * t775 + t584 * t776;
t468 = t519 * t775 + t585 * t776;
t467 = -t475 * t781 + t705 * t785;
t466 = t514 * t776 + t573 * t775;
t465 = t514 * t775 - t573 * t776;
t464 = t575 * t776 + t586 * t775 - t908;
t463 = t574 * t776 + t583 * t775 - t903;
t460 = t477 * t776 - t724 * t775 - t870;
t459 = t477 * t775 + t724 * t776 + t660;
t458 = t507 * t776 + t564 * t775;
t457 = t507 * t775 - t564 * t776;
t455 = pkin(4) * t527 - qJ(4) * t529;
t454 = t492 * t776 + t559 * t775;
t453 = t492 * t775 - t559 * t776;
t452 = t516 * t780 - t518 * t784;
t451 = t515 * t780 - t517 * t784;
t450 = -t516 * t784 - t518 * t780;
t449 = -t515 * t784 - t517 * t780;
t448 = t499 * t776 - t528 * t775;
t447 = t499 * t775 + t528 * t776;
t446 = -t780 * t511 + t512 * t784;
t445 = t511 * t784 + t512 * t780;
t444 = t480 * t776 + t529 * t775;
t443 = t480 * t775 - t529 * t776;
t442 = -t502 * t782 + t503 * t786;
t441 = t502 * t786 + t503 * t782;
t440 = -pkin(2) * t491 + pkin(3) * t795 - qJ(4) * t571;
t438 = t497 * t779 + t783 * t793;
t437 = -t493 * t783 - t496 * t779;
t436 = -t497 * t783 + t779 * t793;
t435 = -t493 * t779 + t496 * t783;
t434 = t504 * t776 - t525 * t775 - t905;
t432 = pkin(4) * t797 - t573 * t873 - t838;
t431 = t505 * t776 - t521 * t775 - t910;
t430 = t489 * t780 - t490 * t784;
t429 = t487 * t780 - t488 * t784;
t428 = -t489 * t784 - t490 * t780;
t427 = -t487 * t784 - t488 * t780;
t425 = pkin(4) * t598 - t564 * t873 + t835;
t423 = -t780 * t485 + t486 * t784;
t422 = t485 * t784 + t486 * t780;
t421 = -pkin(7) * t491 + t559 * t801;
t420 = -pkin(9) * t511 + t866;
t419 = t504 * t775 + t525 * t776 + t903;
t418 = t505 * t775 + t521 * t776 + t908;
t417 = -pkin(9) * t485 + t867;
t416 = -qJ(2) * t502 - (pkin(2) * t775 - pkin(7) * t776) * t539;
t415 = pkin(4) * t572 - qJ(4) * t573 - t462;
t414 = pkin(4) * t563 - qJ(4) * t564 - t461;
t413 = t467 * t776 - t476 * t775;
t412 = t467 * t775 + t476 * t776;
t411 = -t428 * t781 + t822;
t410 = -t427 * t781 - t822;
t409 = -t449 * t781 + t497 * t785;
t408 = -t450 * t781 + t785 * t793;
t407 = t445 * t781 + t498 * t785;
t406 = -t445 * t785 + t498 * t781;
t405 = -t465 * t782 + t466 * t786;
t404 = t465 * t786 + t466 * t782;
t403 = -pkin(2) * t513 - qJ(4) * t797 + t572 * t873 - t835;
t400 = -t457 * t782 + t458 * t786;
t399 = t457 * t786 + t458 * t782;
t398 = -pkin(2) * t506 - qJ(4) * t598 + t563 * t873 - t838;
t397 = qJ(2) * t503 - (-pkin(2) * t776 - pkin(7) * t775 - pkin(1)) * t539;
t396 = -pkin(5) * t498 + pkin(9) * t512 + t867;
t395 = t422 * t781 + t493 * t785;
t394 = -t422 * t785 + t493 * t781;
t393 = -t453 * t782 + t454 * t786;
t392 = t453 * t786 + t454 * t782;
t391 = -pkin(5) * t493 + pkin(9) * t486 - t866;
t390 = t401 * t781 + t535 * t785;
t389 = -t401 * t785 + t535 * t781;
t388 = -t443 * t782 + t444 * t786;
t387 = t443 * t786 + t444 * t782;
t386 = -t780 * t436 + t438 * t784;
t385 = t435 * t780 - t437 * t784;
t384 = t436 * t784 + t438 * t780;
t383 = -t435 * t784 - t437 * t780;
t379 = t409 * t776 - t451 * t775;
t378 = t408 * t776 - t452 * t775;
t377 = t409 * t775 + t451 * t776;
t376 = t408 * t775 + t452 * t776;
t375 = -t383 * t781 + t587 * t785;
t374 = t411 * t776 - t430 * t775;
t373 = t410 * t776 - t429 * t775;
t372 = t411 * t775 + t430 * t776;
t371 = t410 * t775 + t429 * t776;
t370 = t407 * t776 + t446 * t775;
t369 = t407 * t775 - t446 * t776;
t368 = t384 * t781 + t542 * t785;
t367 = -t384 * t785 + t542 * t781;
t366 = pkin(4) * t627 - t529 * t873 - t402;
t365 = t395 * t776 + t423 * t775;
t364 = t395 * t775 - t423 * t776;
t363 = -pkin(7) * t513 + t415 * t785 - t432 * t781;
t362 = -pkin(7) * t506 + t414 * t785 - t425 * t781;
t361 = -qJ(2) * t453 + t421 * t776 - t440 * t775;
t360 = -pkin(2) * t479 - qJ(4) * t627 + t527 * t873 + t401;
t359 = pkin(4) * t401 - qJ(4) * t402;
t358 = pkin(4) * t535 - t402 * t873;
t357 = t390 * t776 + t402 * t775;
t356 = t390 * t775 - t402 * t776;
t355 = -pkin(1) * t491 + qJ(2) * t454 + t421 * t775 + t440 * t776;
t354 = -pkin(7) * t479 - t366 * t781 + t455 * t785;
t350 = t375 * t776 - t385 * t775;
t349 = t375 * t775 + t385 * t776;
t348 = pkin(4) * t445 + pkin(5) * t511 - qJ(4) * t446 - t382;
t347 = t368 * t776 + t386 * t775;
t346 = t368 * t775 - t386 * t776;
t345 = pkin(4) * t422 + pkin(5) * t485 - qJ(4) * t423 - t381;
t344 = -t369 * t782 + t370 * t786;
t343 = t369 * t786 + t370 * t782;
t342 = -pkin(5) * t474 + pkin(9) * t353;
t341 = -qJ(2) * t465 + t363 * t776 - t403 * t775;
t340 = pkin(4) * t498 - t784 * t396 - t780 * t420 - t446 * t873;
t339 = -qJ(2) * t457 + t362 * t776 - t398 * t775;
t338 = pkin(4) * t384 + pkin(5) * t436 - qJ(4) * t386;
t337 = -pkin(9) * t436 - t352;
t336 = -pkin(2) * t389 - qJ(4) * t535 + t401 * t873;
t335 = -pkin(1) * t513 + qJ(2) * t466 + t363 * t775 + t403 * t776;
t334 = -t364 * t782 + t365 * t786;
t333 = t364 * t786 + t365 * t782;
t332 = pkin(4) * t493 - t784 * t391 - t780 * t417 - t423 * t873;
t331 = -pkin(5) * t542 + pkin(9) * t438 + t353;
t330 = -pkin(1) * t506 + qJ(2) * t458 + t362 * t775 + t398 * t776;
t329 = -pkin(2) * t406 - qJ(4) * t498 + t780 * t396 - t784 * t420 + t445 * t873;
t328 = -t356 * t782 + t357 * t786;
t327 = t356 * t786 + t357 * t782;
t326 = -pkin(2) * t394 - qJ(4) * t493 + t780 * t391 - t784 * t417 + t422 * t873;
t325 = -qJ(2) * t443 + t354 * t776 - t360 * t775;
t324 = -pkin(1) * t479 + qJ(2) * t444 + t354 * t775 + t360 * t776;
t323 = -pkin(7) * t389 - t358 * t781 + t359 * t785;
t322 = t353 * t784 - t839;
t321 = t353 * t780 + t868;
t320 = -t346 * t782 + t347 * t786;
t319 = t346 * t786 + t347 * t782;
t318 = t321 * t781 + t474 * t785;
t317 = -t321 * t785 + t474 * t781;
t316 = -pkin(7) * t406 - t340 * t781 + t348 * t785;
t315 = -pkin(7) * t394 - t332 * t781 + t345 * t785;
t314 = pkin(4) * t542 - t784 * t331 - t780 * t337 - t386 * t873;
t313 = -qJ(2) * t356 + t323 * t776 - t336 * t775;
t312 = t318 * t776 + t322 * t775;
t311 = t318 * t775 - t322 * t776;
t310 = -pkin(2) * t367 - qJ(4) * t542 + t780 * t331 - t784 * t337 + t384 * t873;
t309 = -pkin(1) * t389 + qJ(2) * t357 + t323 * t775 + t336 * t776;
t308 = -qJ(2) * t369 + t316 * t776 - t329 * t775;
t307 = pkin(4) * t321 + pkin(5) * t352 - qJ(4) * t322;
t306 = -pkin(1) * t406 + qJ(2) * t370 + t316 * t775 + t329 * t776;
t305 = -qJ(2) * t364 + t315 * t776 - t326 * t775;
t304 = -pkin(7) * t367 - t314 * t781 + t338 * t785;
t303 = -pkin(1) * t394 + qJ(2) * t365 + t315 * t775 + t326 * t776;
t302 = pkin(4) * t474 + pkin(9) * t839 - t322 * t873 - t784 * t342;
t301 = -t311 * t782 + t312 * t786;
t300 = t311 * t786 + t312 * t782;
t299 = -pkin(2) * t317 + pkin(9) * t868 - qJ(4) * t474 + t321 * t873 + t780 * t342;
t298 = -qJ(2) * t346 + t304 * t776 - t310 * t775;
t297 = -pkin(1) * t367 + qJ(2) * t347 + t304 * t775 + t310 * t776;
t296 = -pkin(7) * t317 - t302 * t781 + t307 * t785;
t295 = -qJ(2) * t311 + t296 * t776 - t299 * t775;
t294 = -pkin(1) * t317 + qJ(2) * t312 + t296 * t775 + t299 * t776;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t737, -t738, 0, t671, 0, 0, 0, 0, 0, 0, -t878, -t662, 0, t501, 0, 0, 0, 0, 0, 0, t549, t552, t592, t442, 0, 0, 0, 0, 0, 0, t592, -t549, -t552, t393, 0, 0, 0, 0, 0, 0, t400, t405, t388, t328, 0, 0, 0, 0, 0, 0, t334, t344, t320, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t738, -t737, 0, t670, 0, 0, 0, 0, 0, 0, t662, -t878, 0, -t896, 0, 0, 0, 0, 0, 0, -t546, -t547, t591, t441, 0, 0, 0, 0, 0, 0, t591, t546, t547, t392, 0, 0, 0, 0, 0, 0, t399, t404, t387, t327, 0, 0, 0, 0, 0, 0, t333, t343, t319, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t772, 0, 0, 0, 0, 0, 0, t674, -t676, 0, -t539, 0, 0, 0, 0, 0, 0, 0, -t674, t676, t491, 0, 0, 0, 0, 0, 0, t506, t513, t479, t389, 0, 0, 0, 0, 0, 0, t394, t406, t367, t317; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t738, 0, -t737, 0, t803, -t698, -t670, -pkin(6) * t670, 0, 0, t662, 0, -t878, 0, t895, t884, t896, pkin(6) * t896 + qJ(2) * t862 - t569 * t782, t568, t541, -t906, t567, t901, t605, -t463 * t782 + t472 * t786 + t912, -t464 * t782 + t473 * t786 + t914, -t509 * t782 + t510 * t786 - t871, -pkin(6) * t441 - t397 * t782 + t416 * t786, t605, t906, -t901, t568, t541, t567, -t459 * t782 + t460 * t786 - t871, -t419 * t782 + t434 * t786 - t912, -t418 * t782 + t431 * t786 - t914, -pkin(6) * t392 - t355 * t782 + t361 * t786, -t482 * t782 + t484 * t786, -t447 * t782 + t448 * t786, -t469 * t782 + t471 * t786, -t481 * t782 + t483 * t786, -t468 * t782 + t470 * t786, -t523 * t782 + t524 * t786, -pkin(6) * t399 - t330 * t782 + t339 * t786, -pkin(6) * t404 - t335 * t782 + t341 * t786, -pkin(6) * t387 - t324 * t782 + t325 * t786, -pkin(6) * t327 - t309 * t782 + t313 * t786, -t372 * t782 + t374 * t786, -t349 * t782 + t350 * t786, -t377 * t782 + t379 * t786, -t371 * t782 + t373 * t786, -t376 * t782 + t378 * t786, -t412 * t782 + t413 * t786, -pkin(6) * t333 - t303 * t782 + t305 * t786, -pkin(6) * t343 - t306 * t782 + t308 * t786, -pkin(6) * t319 - t297 * t782 + t298 * t786, -pkin(6) * t300 - t294 * t782 + t295 * t786; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t737, 0, t738, 0, t698, t803, t671, pkin(6) * t671, 0, 0, t878, 0, t662, 0, -t884, t895, t501, pkin(6) * t501 + qJ(2) * t863 + t569 * t786, t566, t538, t907, t565, -t902, t604, t463 * t786 + t472 * t782 + t911, t464 * t786 + t473 * t782 + t913, t509 * t786 + t510 * t782 + t590, pkin(6) * t442 + t397 * t786 + t416 * t782, t604, -t907, t902, t566, t538, t565, t459 * t786 + t460 * t782 + t590, t419 * t786 + t434 * t782 - t911, t418 * t786 + t431 * t782 - t913, pkin(6) * t393 + t355 * t786 + t361 * t782, t482 * t786 + t484 * t782, t447 * t786 + t448 * t782, t469 * t786 + t471 * t782, t481 * t786 + t483 * t782, t468 * t786 + t470 * t782, t523 * t786 + t524 * t782, pkin(6) * t400 + t330 * t786 + t339 * t782, pkin(6) * t405 + t335 * t786 + t341 * t782, pkin(6) * t388 + t324 * t786 + t325 * t782, pkin(6) * t328 + t309 * t786 + t313 * t782, t372 * t786 + t374 * t782, t349 * t786 + t350 * t782, t377 * t786 + t379 * t782, t371 * t786 + t373 * t782, t376 * t786 + t378 * t782, t412 * t786 + t413 * t782, pkin(6) * t334 + t303 * t786 + t305 * t782, pkin(6) * t344 + t306 * t786 + t308 * t782, pkin(6) * t320 + t297 * t786 + t298 * t782, pkin(6) * t301 + t294 * t786 + t295 * t782; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t744, t745, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t735 - t655, -pkin(1) * t734 - t656, 0, -pkin(1) * t579, t673, t658, t798, t672, t877, 0, pkin(2) * t729 - t859 - t904, -pkin(2) * t730 + t860 - t909, t540 + t818, pkin(1) * t502 - pkin(2) * t631 + pkin(7) * t540, 0, -t798, -t877, t673, t658, t672, t557 * t785 + t558 * t781 + t818, t785 * t544 + (-pkin(2) - t869) * t729 + t904, t781 * t543 + (pkin(2) + t872) * t730 + t909, pkin(1) * t453 + pkin(7) * t492 + (-pkin(2) + t802) * t559, t595 * t785 + t821, t526 * t785 + t668 * t781, t581 * t785 + t603 * t781, t593 * t785 - t821, t582 * t785 + t781 * t792, t612 * t785 + t713 * t781, pkin(1) * t457 - pkin(2) * t564 + pkin(7) * t507 + t414 * t781 + t425 * t785, pkin(1) * t465 - pkin(2) * t573 + pkin(7) * t514 + t415 * t781 + t432 * t785, pkin(1) * t443 - pkin(2) * t529 + pkin(7) * t480 + t366 * t785 + t455 * t781, pkin(1) * t356 - pkin(2) * t402 + pkin(7) * t390 + t358 * t785 + t359 * t781, t428 * t785 + t823, t383 * t785 + t587 * t781, t449 * t785 + t497 * t781, t427 * t785 - t823, t450 * t785 + t781 * t793, t475 * t785 + t705 * t781, pkin(1) * t364 - pkin(2) * t423 + pkin(7) * t395 + t332 * t785 + t345 * t781, pkin(1) * t369 - pkin(2) * t446 + pkin(7) * t407 + t340 * t785 + t348 * t781, pkin(1) * t346 - pkin(2) * t386 + pkin(7) * t368 + t314 * t785 + t338 * t781, pkin(1) * t311 - pkin(2) * t322 + pkin(7) * t318 + t302 * t785 + t307 * t781;];
tauB_reg  = t1;
