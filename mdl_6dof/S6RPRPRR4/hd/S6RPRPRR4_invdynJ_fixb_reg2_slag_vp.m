% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:46:34
% EndTime: 2019-03-09 03:46:44
% DurationCPUTime: 5.31s
% Computational Cost: add. (7648->549), mult. (15033->680), div. (0->0), fcn. (9238->14), ass. (0->291)
t217 = sin(pkin(10));
t184 = pkin(1) * t217 + pkin(7);
t372 = pkin(4) + t184;
t224 = cos(qJ(5));
t220 = sin(qJ(5));
t322 = qJD(3) * t220;
t225 = cos(qJ(3));
t324 = qJD(1) * t225;
t144 = t224 * t324 + t322;
t320 = qJD(3) * t224;
t146 = -t220 * t324 + t320;
t219 = sin(qJ(6));
t223 = cos(qJ(6));
t267 = t144 * t219 - t223 * t146;
t72 = t223 * t144 + t146 * t219;
t373 = t72 * t267;
t147 = t219 * t224 + t220 * t223;
t221 = sin(qJ(3));
t253 = t221 * t147;
t391 = qJD(5) + qJD(6);
t78 = t391 * t147;
t355 = qJD(1) * t253 + t78;
t335 = t220 * t221;
t261 = pkin(5) * t225 - pkin(9) * t335;
t317 = qJD(5) * t220;
t383 = pkin(3) + pkin(8);
t371 = pkin(9) + t383;
t325 = qJD(1) * t221;
t194 = pkin(3) * t325;
t351 = qJ(4) * t225;
t273 = pkin(8) * t221 - t351;
t116 = qJD(1) * t273 + t194;
t160 = t184 * qJD(1);
t115 = qJD(2) * t221 + t160 * t225;
t192 = pkin(4) * t324;
t90 = t115 + t192;
t48 = -t116 * t220 + t224 * t90;
t407 = -qJD(1) * t261 + t371 * t317 - t48;
t153 = t371 * t224;
t298 = t224 * t325;
t49 = t224 * t116 + t220 * t90;
t406 = pkin(9) * t298 + qJD(5) * t153 + t49;
t405 = qJD(2) * qJD(3) + qJDD(1) * t184;
t312 = qJD(1) * qJD(3);
t293 = t221 * t312;
t306 = t225 * qJDD(1);
t404 = -t293 + t306;
t315 = qJD(5) * t225;
t295 = t220 * t315;
t296 = t221 * t320;
t249 = t295 + t296;
t201 = t225 * qJD(2);
t114 = t160 * t221 - t201;
t403 = -qJD(4) - t114;
t402 = t267 ^ 2 - t72 ^ 2;
t180 = qJD(5) + t325;
t172 = qJD(6) + t180;
t313 = qJD(6) * t223;
t314 = qJD(6) * t219;
t65 = qJD(5) * t144 - t224 * qJDD(3) + t220 * t404;
t316 = qJD(5) * t224;
t66 = -qJD(1) * t249 + qJD(3) * t316 + t220 * qJDD(3) + t224 * t306;
t18 = t144 * t313 + t146 * t314 + t219 * t66 + t223 * t65;
t401 = t172 * t72 - t18;
t392 = qJD(4) - t201;
t329 = (pkin(4) * qJD(1) + t160) * t221 + t392;
t77 = -qJD(3) * t383 + t329;
t205 = t221 * qJ(4);
t290 = -pkin(2) - t205;
t218 = cos(pkin(10));
t382 = pkin(1) * t218;
t241 = -t225 * t383 + t290 - t382;
t86 = t241 * qJD(1);
t33 = -t220 * t86 + t224 * t77;
t30 = -pkin(9) * t146 + t33;
t28 = pkin(5) * t180 + t30;
t34 = t220 * t77 + t224 * t86;
t31 = -pkin(9) * t144 + t34;
t292 = t225 * t312;
t307 = t221 * qJDD(1);
t252 = t292 + t307;
t141 = qJDD(5) + t252;
t319 = qJD(3) * t225;
t282 = -t225 * qJDD(2) + t160 * t319 + t221 * t405;
t265 = qJDD(4) + t282;
t42 = t252 * pkin(4) - qJDD(3) * t383 + t265;
t179 = pkin(3) * t293;
t318 = qJD(4) * t221;
t239 = qJD(3) * t273 - t318;
t46 = qJD(1) * t239 + qJDD(1) * t241 + t179;
t9 = -qJD(5) * t34 - t220 * t46 + t224 * t42;
t6 = pkin(5) * t141 + pkin(9) * t65 + t9;
t305 = -t220 * t42 - t224 * t46 - t77 * t316;
t8 = -t317 * t86 - t305;
t7 = -pkin(9) * t66 + t8;
t1 = (qJD(6) * t28 + t7) * t223 + t219 * t6 - t31 * t314;
t216 = qJ(5) + qJ(6);
t203 = sin(t216);
t209 = g(3) * t225;
t99 = -qJD(3) * qJ(4) - t115;
t83 = t192 - t99;
t54 = pkin(5) * t144 + t83;
t210 = qJ(1) + pkin(10);
t195 = sin(t210);
t196 = cos(t210);
t204 = cos(t216);
t338 = t203 * t221;
t92 = t195 * t204 + t196 * t338;
t94 = -t195 * t338 + t196 * t204;
t400 = g(1) * t92 - g(2) * t94 - t203 * t209 + t54 * t72 - t1;
t358 = t223 * t31;
t11 = t219 * t28 + t358;
t2 = -qJD(6) * t11 - t219 * t7 + t223 * t6;
t337 = t204 * t221;
t91 = -t195 * t203 + t196 * t337;
t93 = t195 * t337 + t196 * t203;
t399 = -g(1) * t91 - g(2) * t93 + t204 * t209 + t54 * t267 + t2;
t238 = qJD(6) * t267 + t219 * t65 - t223 * t66;
t398 = -t172 * t267 + t238;
t397 = t180 * t34 + t9;
t262 = t144 * t180;
t396 = t65 - t262;
t344 = t146 * t180;
t395 = -t66 + t344;
t352 = pkin(1) * qJDD(1);
t332 = t223 * t224;
t336 = t219 * t220;
t266 = -t332 + t336;
t117 = t266 * t225;
t96 = -qJD(3) * pkin(3) - t403;
t126 = t224 * t141;
t323 = qJD(3) * t144;
t394 = t323 - t126;
t393 = -g(1) * t196 - g(2) * t195;
t333 = t221 * t224;
t108 = -t195 * t220 + t196 * t333;
t110 = t195 * t333 + t196 * t220;
t331 = t224 * t225;
t390 = -g(1) * t108 - g(2) * t110 + g(3) * t331;
t389 = -t141 * t383 + t180 * t83;
t388 = t18 * t266 + t267 * t355;
t356 = t219 * t317 + t220 * t314 - t223 * t298 + t325 * t336 - t332 * t391;
t387 = -t147 * t238 - t356 * t72;
t321 = qJD(3) * t221;
t297 = t220 * t321;
t248 = -t224 * t315 + t297;
t334 = t220 * t225;
t386 = t141 * t334 - t180 * t248;
t270 = t220 * t33 - t224 * t34;
t385 = -qJD(5) * t270 + t8 * t220 + t9 * t224;
t361 = t219 * t31;
t10 = t223 * t28 - t361;
t340 = t196 * t221;
t342 = t195 * t221;
t299 = -g(1) * t340 - g(2) * t342 + t209;
t384 = t1 * t147 - t10 * t355 - t11 * t356 - t2 * t266 + t299;
t381 = pkin(8) * t225;
t379 = g(1) * t195;
t375 = g(2) * t196;
t374 = g(3) * t221;
t207 = t225 * pkin(3);
t118 = t147 * t225;
t40 = qJD(3) * t253 + t117 * t391;
t370 = -t118 * t238 - t40 * t72;
t129 = qJDD(6) + t141;
t41 = t225 * t78 - t266 * t321;
t369 = t117 * t129 + t41 * t172;
t152 = t371 * t220;
t80 = t152 * t219 - t153 * t223;
t368 = qJD(6) * t80 + t219 * t407 - t223 * t406;
t81 = -t152 * t223 - t153 * t219;
t367 = -qJD(6) * t81 + t219 * t406 + t223 * t407;
t366 = -t18 * t221 - t267 * t319;
t363 = t180 * t33;
t360 = t220 * t66;
t359 = t221 * t66;
t357 = t224 * t65;
t354 = t146 * t319 - t65 * t221;
t190 = pkin(5) * t224 + pkin(4);
t353 = pkin(5) * t316 - (-qJD(1) * t190 - t160) * t221 + t392;
t185 = -pkin(2) - t382;
t327 = t207 + t205;
t130 = t185 - t327;
t112 = t130 - t381;
t133 = t372 * t221;
t119 = t220 * t133;
t56 = t224 * t112 + t119;
t350 = qJD(3) * t83;
t349 = qJDD(3) * pkin(3);
t348 = t141 * t220;
t346 = t144 * t224;
t345 = t146 * t144;
t343 = t146 * t220;
t341 = t195 * t225;
t339 = t196 * t225;
t227 = -pkin(9) - pkin(8);
t330 = t225 * t227;
t328 = t249 * t180;
t134 = t372 * t225;
t214 = t221 ^ 2;
t215 = t225 ^ 2;
t326 = t214 - t215;
t161 = qJD(1) * t185;
t158 = qJDD(1) * t185;
t310 = qJDD(1) * t214;
t309 = qJDD(1) * t215;
t308 = qJDD(3) * t184;
t302 = t196 * t335;
t226 = cos(qJ(1));
t300 = t226 * pkin(1) + t196 * pkin(2) + t195 * pkin(7);
t222 = sin(qJ(1));
t291 = -pkin(1) * t222 + t196 * pkin(7);
t289 = pkin(9) * t225 - t112;
t124 = t372 * t319;
t193 = pkin(3) * t321;
t97 = t193 + t239;
t285 = t224 * t124 - t220 * t97;
t283 = -t221 * qJDD(2) + t160 * t321 - t225 * t405;
t281 = t146 * t296;
t280 = t221 * t292;
t279 = -t266 * t129 - t172 * t355;
t162 = qJ(4) * t341;
t164 = qJ(4) * t339;
t278 = -g(1) * t164 - g(2) * t162;
t276 = g(1) * t222 - g(2) * t226;
t274 = -t117 * t18 - t267 * t41;
t229 = qJD(3) ^ 2;
t272 = t184 * t229 + t375;
t120 = t224 * t133;
t47 = pkin(5) * t221 + t220 * t289 + t120;
t50 = -pkin(9) * t331 + t56;
t21 = -t219 * t50 + t223 * t47;
t22 = t219 * t47 + t223 * t50;
t271 = t220 * t34 + t224 * t33;
t269 = pkin(3) * t339 + t196 * t205 + t300;
t268 = -t118 * t129 + t172 * t40;
t264 = t180 ^ 2;
t260 = t290 - t207;
t259 = pkin(5) * t335 - t330;
t211 = qJDD(3) * qJ(4);
t212 = qJD(3) * qJD(4);
t51 = -t211 - t212 + t283;
t257 = t221 * t238 - t319 * t72;
t256 = -qJ(4) * t319 - t318;
t255 = -t129 * t147 + t172 * t356;
t254 = t393 + (t309 + t310) * t184;
t26 = -t112 * t317 + t220 * t124 + t133 * t316 + t224 * t97;
t251 = -qJD(3) * t114 + t283;
t246 = t260 - t382;
t52 = t265 - t349;
t245 = -0.2e1 * t158 - t272;
t244 = 0.2e1 * qJD(3) * t161 - t308;
t100 = t246 * qJD(1);
t243 = t308 + (-qJD(1) * t130 - t100) * qJD(3);
t242 = t225 * t393 - t374;
t240 = qJD(3) * t115 - t282 - t299;
t125 = t193 + t256;
t53 = qJD(1) * t256 + qJDD(1) * t246 + t179;
t237 = qJD(1) * t125 + qJDD(1) * t130 + t272 + t53;
t43 = pkin(4) * t404 - t51;
t236 = t52 * t221 - t51 * t225 + (t221 * t99 + t225 * t96) * qJD(3);
t235 = t282 * t221 - t283 * t225 + (t114 * t225 - t115 * t221) * qJD(3);
t234 = qJD(5) * t180 * t383 + t242 + t43;
t230 = qJD(1) ^ 2;
t186 = pkin(5) * t220 + qJ(4);
t177 = t225 * t230 * t221;
t168 = g(1) * t341;
t156 = t326 * t230;
t155 = qJDD(3) * t225 - t229 * t221;
t154 = qJDD(3) * t221 + t225 * t229;
t149 = -qJ(4) * t324 + t194;
t132 = -0.2e1 * t280 + t309;
t131 = 0.2e1 * t280 + t310;
t123 = t372 * t321;
t111 = -t195 * t335 + t196 * t224;
t109 = t195 * t224 + t302;
t107 = t144 * t297;
t101 = pkin(5) * t331 + t134;
t95 = 0.2e1 * t221 * t306 - 0.2e1 * t312 * t326;
t87 = t100 * t325;
t69 = -pkin(5) * t295 + (-t184 - t190) * t321;
t55 = -t112 * t220 + t120;
t27 = -qJD(5) * t56 + t285;
t24 = pkin(5) * t66 + t43;
t23 = pkin(9) * t249 + t26;
t20 = t261 * qJD(3) + (t224 * t289 - t119) * qJD(5) + t285;
t13 = t223 * t30 - t361;
t12 = -t219 * t30 - t358;
t4 = -qJD(6) * t22 + t20 * t223 - t219 * t23;
t3 = qJD(6) * t21 + t20 * t219 + t223 * t23;
t5 = [0, 0, 0, 0, 0, qJDD(1), t276, g(1) * t226 + g(2) * t222, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t218 * t352 - t375 + t379, -0.2e1 * t217 * t352 - t393, 0 (t276 + (t217 ^ 2 + t218 ^ 2) * t352) * pkin(1), t131, t95, t154, t132, t155, 0, t221 * t244 + t225 * t245 + t168, t244 * t225 + (-t245 - t379) * t221, t235 + t254, t158 * t185 - g(1) * (-pkin(2) * t195 + t291) - g(2) * t300 + t235 * t184, 0, -t154, -t155, t131, t95, t132, t236 + t254, t221 * t243 + t225 * t237 - t168, t243 * t225 + (-t237 + t379) * t221, -g(1) * t291 - g(2) * t269 + t100 * t125 + t53 * t130 + t184 * t236 - t260 * t379, t146 * t248 + t334 * t65, t281 - t107 + (t360 + t357 + (t343 + t346) * qJD(5)) * t225, t354 - t386, -t144 * t249 + t331 * t66, -t359 + (-t323 - t126) * t225 + t328, t141 * t221 + t180 * t319, -g(1) * t111 - g(2) * t109 - t123 * t144 + t134 * t66 + t141 * t55 + t180 * t27 + (-t320 * t83 + t9) * t221 + (qJD(3) * t33 + t224 * t43 - t317 * t83) * t225, g(1) * t110 - g(2) * t108 - t123 * t146 - t134 * t65 - t141 * t56 - t180 * t26 + (t322 * t83 - t8) * t221 + (-qJD(3) * t34 - t220 * t43 - t316 * t83) * t225, -t144 * t26 - t146 * t27 + t55 * t65 - t56 * t66 + t168 - t270 * t321 + (qJD(5) * t271 + t220 * t9 - t224 * t8 - t375) * t225, t8 * t56 + t34 * t26 + t9 * t55 + t33 * t27 + t43 * t134 - t83 * t123 - g(1) * (pkin(4) * t196 + t291) - g(2) * (pkin(8) * t339 + t269) + (-g(1) * (t260 - t381) - g(2) * pkin(4)) * t195, t118 * t18 - t267 * t40, t274 + t370, t268 + t366, t117 * t238 - t41 * t72, t257 + t369, t129 * t221 + t172 * t319, -g(1) * t94 - g(2) * t92 + t10 * t319 - t101 * t238 - t117 * t24 + t129 * t21 + t172 * t4 + t2 * t221 - t41 * t54 + t69 * t72, g(1) * t93 - g(2) * t91 - t1 * t221 - t101 * t18 - t11 * t319 - t118 * t24 - t129 * t22 - t172 * t3 - t267 * t69 + t40 * t54, -g(2) * t339 + t1 * t117 - t10 * t40 + t11 * t41 + t118 * t2 + t18 * t21 + t22 * t238 + t267 * t4 - t3 * t72 + t168, t1 * t22 + t11 * t3 + t2 * t21 + t10 * t4 + t24 * t101 + t54 * t69 - g(1) * (t190 * t196 + t291) - g(2) * (pkin(5) * t302 - t196 * t330 + t269) + (-g(1) * (-t259 + t260) - g(2) * t190) * t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t155, -t154, 0, -t221 * t283 - t225 * t282 - g(3) + (t114 * t221 + t115 * t225) * qJD(3), 0, 0, 0, 0, 0, 0, 0, -t155, t154, -t221 * t51 - t225 * t52 - g(3) + (t221 * t96 - t225 * t99) * qJD(3), 0, 0, 0, 0, 0, 0, t225 * t394 + t328 + t359, t354 + t386, -t281 - t107 + (t360 - t357 + (-t343 + t346) * qJD(5)) * t225, -g(3) + (qJD(3) * t271 + t43) * t221 + (t350 - t385) * t225, 0, 0, 0, 0, 0, 0, -t257 + t369, -t268 + t366, -t274 + t370, -t1 * t118 + t10 * t41 + t11 * t40 + t117 * t2 + t221 * t24 + t319 * t54 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, t156, t307, t177, t306, qJDD(3), -t161 * t325 + t240, t374 + (-qJD(1) * t161 - t393) * t225 + t251, 0, 0, qJDD(3), -t307, -t306, -t177, t156, t177 (-pkin(3) * t221 + t351) * qJDD(1), -t149 * t324 + qJDD(4) - t240 - 0.2e1 * t349 + t87, 0.2e1 * t211 + 0.2e1 * t212 + (qJD(1) * t149 - g(3)) * t221 + (qJD(1) * t100 + t393) * t225 - t251, -t51 * qJ(4) - t52 * pkin(3) - t100 * t149 - t96 * t115 - g(1) * (-pkin(3) * t340 + t164) - g(2) * (-pkin(3) * t342 + t162) - g(3) * t327 + t403 * t99, -t220 * t344 - t357 (-t66 - t344) * t224 + (t65 + t262) * t220, -t180 * t317 + t126 + (-t146 * t225 - t180 * t335) * qJD(1), t224 * t262 + t360, -t180 * t316 - t348 + (t144 * t225 - t180 * t333) * qJD(1), -t180 * t324, qJ(4) * t66 + t329 * t144 - t180 * t48 + t234 * t220 + t224 * t389 - t33 * t324, -qJ(4) * t65 + t329 * t146 + t180 * t49 - t220 * t389 + t234 * t224 + t34 * t324, t144 * t49 + t146 * t48 + (-t34 * t325 - t383 * t65 - t9 + (t144 * t383 - t34) * qJD(5)) * t224 + (t33 * t325 + t383 * t66 - t8 + (-t146 * t383 + t33) * qJD(5)) * t220 - t299, t43 * qJ(4) - t34 * t49 - t33 * t48 - g(3) * (t327 + t381) + t329 * t83 + t278 + (-t221 * t393 - t385) * t383, t388, t147 * t18 - t238 * t266 - t267 * t356 + t355 * t72, t267 * t324 + t279, t387, t324 * t72 + t255, -t172 * t324, -t10 * t324 + t129 * t80 + t147 * t24 + t172 * t367 - t186 * t238 + t203 * t242 + t353 * t72 - t356 * t54, t11 * t324 - t129 * t81 - t172 * t368 - t18 * t186 + t204 * t242 - t24 * t266 - t267 * t353 - t355 * t54, t18 * t80 + t238 * t81 + t267 * t367 - t368 * t72 - t384, t1 * t81 + t2 * t80 + t24 * t186 - g(3) * (t259 + t327) + t353 * t54 + t368 * t11 + t367 * t10 + t278 + t393 * (pkin(5) * t334 + (-pkin(3) + t227) * t221); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, qJDD(3) + t177, -t214 * t230 - t229, qJD(3) * t99 + t299 + t52 + t87, 0, 0, 0, 0, 0, 0, -t220 * t264 - t394, -qJD(3) * t146 - t224 * t264 - t348, t220 * t395 + t224 * t396, -t350 + t397 * t224 + (t8 - t363) * t220 + t299, 0, 0, 0, 0, 0, 0, -qJD(3) * t72 + t279, qJD(3) * t267 + t255, -t387 - t388, -qJD(3) * t54 + t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t345, -t144 ^ 2 + t146 ^ 2, -t396, -t345, t395, t141, -t146 * t83 + t390 + t397, g(1) * t109 - g(2) * t111 + t144 * t83 + t363 + (qJD(5) * t86 - t209) * t220 + t305, 0, 0, -t373, t402, t401, t373, t398, t129, -t12 * t172 + (t129 * t223 - t146 * t72 - t172 * t314) * pkin(5) + t399, t13 * t172 + (-t129 * t219 + t146 * t267 - t172 * t313) * pkin(5) + t400, -t10 * t72 - t11 * t267 - t12 * t267 + t13 * t72 + (t18 * t223 + t238 * t219 + (-t219 * t267 - t223 * t72) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t219 + t2 * t223 - t54 * t146 + (-t10 * t219 + t11 * t223) * qJD(6) + t390) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t373, t402, t401, t373, t398, t129, t11 * t172 + t399, t10 * t172 + t400, 0, 0;];
tau_reg  = t5;
