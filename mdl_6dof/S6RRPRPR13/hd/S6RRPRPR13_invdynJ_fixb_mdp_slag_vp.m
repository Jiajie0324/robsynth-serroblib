% Calculate vector of inverse dynamics joint torques for
% S6RRPRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRPR13_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRPR13_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRPR13_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:30:01
% EndTime: 2019-03-09 11:30:25
% DurationCPUTime: 16.98s
% Computational Cost: add. (9857->789), mult. (23743->1042), div. (0->0), fcn. (18280->14), ass. (0->322)
t764 = cos(qJ(2));
t755 = sin(pkin(6));
t760 = sin(qJ(2));
t876 = qJD(1) * t760;
t849 = t755 * t876;
t757 = cos(pkin(6));
t877 = qJD(1) * t757;
t856 = pkin(1) * t877;
t883 = -pkin(8) * t849 + t764 * t856;
t864 = qJD(3) - t883;
t733 = qJD(2) + t877;
t763 = cos(qJ(4));
t759 = sin(qJ(4));
t875 = qJD(1) * t764;
t848 = t755 * t875;
t824 = t759 * t848;
t654 = t733 * t763 - t824;
t709 = qJD(4) + t849;
t754 = sin(pkin(11));
t756 = cos(pkin(11));
t590 = t654 * t754 - t756 * t709;
t762 = cos(qJ(6));
t896 = t762 * t590;
t592 = t654 * t756 + t709 * t754;
t758 = sin(qJ(6));
t918 = t592 * t758;
t530 = t896 + t918;
t652 = t733 * t759 + t763 * t848;
t647 = qJD(6) + t652;
t946 = t530 * t647;
t814 = pkin(4) * t763 + qJ(5) * t759;
t945 = (-pkin(3) - t814) * t849 - qJD(4) * t814 + qJD(5) * t763 - t864;
t862 = qJD(1) * qJD(2);
t841 = t760 * t862;
t823 = t755 * t841;
t859 = qJDD(1) * t764;
t942 = -t755 * t859 + t823;
t940 = -t754 * t758 + t762 * t756;
t939 = t940 * qJD(6);
t806 = t590 * t758 - t592 * t762;
t944 = t647 * t806;
t641 = t754 * t759 * t849 - t756 * t848;
t870 = qJD(4) * t759;
t943 = -t754 * t870 - t641;
t730 = pkin(2) * t849;
t923 = qJ(3) * t764;
t812 = pkin(9) * t760 - t923;
t878 = qJD(1) * t755;
t634 = t812 * t878 + t730;
t726 = pkin(8) * t848;
t667 = t760 * t856 + t726;
t636 = pkin(3) * t848 + t667;
t887 = t763 * t634 + t759 * t636;
t551 = qJ(5) * t848 + t887;
t941 = -t551 * t754 + t756 * t945;
t766 = -pkin(2) - pkin(9);
t868 = qJD(4) * t766;
t843 = t763 * t868;
t889 = (-t551 + t843) * t756 - t945 * t754;
t765 = cos(qJ(1));
t894 = t764 * t765;
t761 = sin(qJ(1));
t899 = t760 * t761;
t678 = -t757 * t894 + t899;
t897 = t761 * t764;
t898 = t760 * t765;
t680 = t757 * t897 + t898;
t904 = t755 * t764;
t778 = g(1) * t680 + g(2) * t678 - g(3) * t904;
t679 = t757 * t898 + t897;
t681 = -t757 * t899 + t894;
t819 = -g(1) * t681 - g(2) * t679;
t902 = t756 * t758;
t687 = t754 * t762 + t902;
t784 = t687 * qJD(6);
t865 = pkin(3) * t849 + t864;
t838 = -qJ(3) * t760 - pkin(1);
t802 = -pkin(2) * t764 + t838;
t643 = t802 * t878;
t938 = t643 * t849 + qJDD(3);
t840 = t764 * t862;
t860 = qJDD(1) * t760;
t787 = t840 + t860;
t775 = t787 * t755;
t658 = qJDD(4) + t775;
t937 = -pkin(4) * t658 + qJDD(5);
t751 = pkin(11) + qJ(6);
t746 = sin(t751);
t747 = cos(t751);
t903 = t755 * t765;
t798 = -t678 * t759 + t763 * t903;
t936 = t679 * t747 + t746 * t798;
t935 = -t679 * t746 + t747 * t798;
t861 = qJDD(1) * t757;
t731 = qJDD(2) + t861;
t560 = -qJD(4) * t824 + t731 * t759 + (qJD(4) * t733 - t942) * t763;
t934 = pkin(3) + pkin(8);
t933 = pkin(1) * t760;
t932 = pkin(2) * t731;
t930 = pkin(9) * t764;
t929 = pkin(10) * t756;
t928 = pkin(10) * t763;
t925 = pkin(10) + qJ(5);
t924 = MDP(7) * t755;
t558 = qJDD(6) + t560;
t922 = t558 * t940;
t921 = t558 * t687;
t920 = t560 * t754;
t919 = t560 * t756;
t917 = t652 * t709;
t916 = t652 * t754;
t915 = t654 * t709;
t914 = t658 * t759;
t794 = t709 * t763;
t710 = t731 * qJ(3);
t911 = t731 * t757;
t910 = t746 * t759;
t909 = t747 * t759;
t750 = t755 ^ 2;
t908 = t750 * qJD(1) ^ 2;
t906 = t755 * t760;
t905 = t755 * t761;
t901 = t759 * t760;
t900 = t759 * t766;
t893 = t766 * t658;
t735 = pkin(8) * t906;
t855 = pkin(1) * qJD(2) * t757;
t830 = qJD(1) * t855;
t854 = pkin(1) * t861;
t826 = qJD(2) * t726 + qJDD(1) * t735 + t760 * t830 - t764 * t854;
t805 = qJDD(3) + t826;
t543 = pkin(3) * t775 + t731 * t766 + t805;
t704 = pkin(2) * t823;
t872 = qJD(3) * t760;
t771 = qJD(2) * t812 - t872;
t783 = t764 * t766 + t838;
t550 = t704 + (qJD(1) * t771 + qJDD(1) * t783) * t755;
t581 = t733 * t766 + t865;
t607 = t783 * t878;
t869 = qJD(4) * t763;
t786 = t759 * t543 + t763 * t550 + t581 * t869 - t607 * t870;
t485 = qJ(5) * t658 + qJD(5) * t709 + t786;
t712 = t733 * qJD(3);
t827 = pkin(8) * t942 - t760 * t854 - t764 * t830;
t561 = -t710 - t712 + t827;
t546 = -pkin(3) * t942 - t561;
t559 = -qJD(4) * t652 + t763 * t731 + t759 * t942;
t495 = pkin(4) * t560 - qJ(5) * t559 - qJD(5) * t654 + t546;
t478 = t756 * t485 + t754 * t495;
t874 = qJD(2) * t760;
t846 = t755 * t874;
t725 = pkin(2) * t846;
t603 = t755 * t771 + t725;
t850 = -pkin(1) * t764 - pkin(2);
t611 = pkin(3) * t906 + t735 + (-pkin(9) + t850) * t757;
t882 = pkin(2) * t904 + qJ(3) * t906;
t632 = (-pkin(1) - t930) * t755 - t882;
t741 = t757 * t933;
t637 = (t904 * t934 + t741) * qJD(2);
t785 = t763 * t603 + t611 * t869 - t632 * t870 + t759 * t637;
t873 = qJD(2) * t764;
t508 = (qJ(5) * t873 + qJD(5) * t760) * t755 + t785;
t729 = t764 * t855;
t745 = t757 * qJD(3);
t610 = -t846 * t934 + t729 + t745;
t676 = t757 * t759 + t763 * t904;
t621 = -qJD(4) * t676 + t759 * t846;
t852 = t759 * t904;
t622 = -qJD(4) * t852 + t757 * t869 - t763 * t846;
t677 = t757 * t763 - t852;
t520 = pkin(4) * t622 - qJ(5) * t621 - qJD(5) * t677 + t610;
t487 = t756 * t508 + t754 * t520;
t536 = t759 * t581 + t763 * t607;
t524 = qJ(5) * t709 + t536;
t713 = t733 * qJ(3);
t600 = t713 + t636;
t539 = pkin(4) * t652 - qJ(5) * t654 + t600;
t500 = t756 * t524 + t754 * t539;
t535 = t581 * t763 - t759 * t607;
t579 = pkin(4) * t654 + qJ(5) * t652;
t513 = t756 * t535 + t754 * t579;
t888 = t759 * t611 + t763 * t632;
t547 = qJ(5) * t906 + t888;
t881 = pkin(8) * t904 + t741;
t655 = -t757 * qJ(3) - t881;
t631 = pkin(3) * t904 - t655;
t557 = pkin(4) * t676 - qJ(5) * t677 + t631;
t511 = t756 * t547 + t754 * t557;
t642 = (t754 * t764 + t756 * t901) * t878;
t892 = t641 * t758 - t642 * t762 - t763 * t784 - t870 * t940;
t891 = -t642 * t758 + t762 * t943 + t763 * t939 - t870 * t902;
t890 = -t754 * t843 - t941;
t615 = t759 * t634;
t552 = -pkin(4) * t848 - t636 * t763 + t615;
t836 = pkin(5) * t754 - t766;
t886 = -pkin(5) * t641 - t836 * t870 - t552;
t885 = t652 * t940 + t939;
t884 = t687 * t652 + t784;
t813 = pkin(4) * t759 - qJ(5) * t763;
t692 = qJ(3) + t813;
t645 = t754 * t692 + t756 * t900;
t752 = t760 ^ 2;
t880 = -t764 ^ 2 + t752;
t879 = MDP(11) * t755;
t871 = qJD(4) * t647;
t866 = qJD(2) - t733;
t523 = -pkin(4) * t709 + qJD(5) - t535;
t863 = -qJD(5) + t523;
t858 = 0.2e1 * t750;
t857 = g(3) * t906;
t853 = t764 * t908;
t537 = t559 * t754 - t756 * t658;
t538 = t559 * t756 + t658 * t754;
t851 = -qJD(6) * t896 - t758 * t537 + t762 * t538;
t847 = t763 * t876;
t845 = t755 * t873;
t842 = g(3) * t882;
t837 = -t754 * t766 + pkin(5);
t477 = -t485 * t754 + t756 * t495;
t475 = pkin(5) * t560 - pkin(10) * t538 + t477;
t476 = -pkin(10) * t537 + t478;
t835 = t762 * t475 - t758 * t476;
t486 = -t508 * t754 + t756 * t520;
t499 = -t524 * t754 + t756 * t539;
t834 = t762 * t537 + t758 * t538;
t512 = -t535 * t754 + t756 * t579;
t510 = -t547 * t754 + t756 * t557;
t833 = t611 * t763 - t759 * t632;
t832 = t733 + t877;
t831 = t731 + t861;
t829 = t760 * t853;
t828 = -t763 * t543 + t759 * t550 + t581 * t870 + t607 * t869;
t825 = t755 * t847;
t623 = -t680 * t763 + t759 * t905;
t797 = t678 * t763 + t759 * t903;
t822 = g(1) * t797 + g(2) * t623;
t820 = g(1) * t678 - g(2) * t680;
t818 = g(1) * t765 + g(2) * t761;
t612 = -t754 * t928 + t645;
t816 = -pkin(5) * t825 - pkin(10) * t642 + qJD(6) * t612 - (t759 * t929 + t763 * t837) * qJD(4) + t941;
t683 = t756 * t692;
t601 = -t756 * t928 + t759 * t837 + t683;
t815 = pkin(10) * t943 - qJD(6) * t601 - t889;
t811 = t758 * t475 + t762 * t476;
t810 = -t477 * t754 + t478 * t756;
t491 = pkin(5) * t652 - pkin(10) * t592 + t499;
t492 = -pkin(10) * t590 + t500;
t479 = t491 * t762 - t492 * t758;
t480 = t491 * t758 + t492 * t762;
t620 = t677 * t756 + t754 * t906;
t496 = pkin(5) * t676 - pkin(10) * t620 + t510;
t619 = t677 * t754 - t756 * t906;
t501 = -pkin(10) * t619 + t511;
t809 = t496 * t762 - t501 * t758;
t808 = t496 * t758 + t501 * t762;
t807 = -t499 * t754 + t500 * t756;
t553 = t762 * t619 + t620 * t758;
t554 = -t619 * t758 + t620 * t762;
t656 = -pkin(1) * t755 - t882;
t804 = qJD(2) * (-qJD(1) * t656 - t643);
t803 = -pkin(8) * t846 + t729;
t800 = t765 * pkin(1) + t681 * pkin(2) + pkin(8) * t905 + qJ(3) * t680;
t799 = -t759 * t603 - t611 * t870 - t632 * t869 + t637 * t763;
t793 = -qJ(3) * t873 - t872;
t702 = t925 * t756;
t792 = pkin(5) * t654 + qJD(5) * t754 + qJD(6) * t702 + t652 * t929 + t512;
t701 = t925 * t754;
t791 = pkin(10) * t916 - qJD(5) * t756 + qJD(6) * t701 + t513;
t568 = t704 + (qJD(1) * t793 + qJDD(1) * t802) * t755;
t638 = t755 * t793 + t725;
t788 = qJD(1) * t638 + qJDD(1) * t656 + t568;
t489 = -qJD(6) * t918 + t851;
t549 = -pkin(4) * t906 - t833;
t782 = g(1) * t623 - g(2) * t797 + g(3) * t676;
t624 = t680 * t759 + t763 * t905;
t781 = -g(1) * t624 + g(2) * t798 - g(3) * t677;
t780 = -pkin(1) * t761 - t679 * pkin(2) + pkin(8) * t903 - qJ(3) * t678;
t668 = t881 * qJD(2);
t779 = -g(1) * t679 + g(2) * t681 + t668 * t733;
t488 = t828 + t937;
t777 = -t819 + t857;
t776 = -t488 + t782;
t774 = t819 - t827;
t773 = t778 - t826;
t772 = t755 * (t866 * t875 + t860);
t509 = -pkin(4) * t845 - t799;
t770 = t782 - t828;
t490 = -qJD(6) * t806 + t834;
t769 = t667 * t733 + t773;
t768 = -t709 * t868 + t546 - t777;
t744 = -pkin(5) * t756 - pkin(4);
t684 = t836 * t763;
t671 = t680 * pkin(2);
t669 = t678 * pkin(2);
t665 = -qJ(3) * t848 + t730;
t663 = t940 * t763;
t662 = t687 * t763;
t657 = t757 * t850 + t735;
t649 = t763 * t658;
t646 = -t745 - t803;
t644 = -t754 * t900 + t683;
t640 = t733 * t754 - t756 * t825;
t639 = t733 * t756 + t754 * t825;
t633 = -t713 - t667;
t629 = -pkin(2) * t733 + t864;
t583 = t621 * t756 + t754 * t845;
t582 = t621 * t754 - t756 * t845;
t576 = t805 - t932;
t567 = t624 * t747 + t681 * t746;
t566 = -t624 * t746 + t681 * t747;
t521 = pkin(5) * t619 + t549;
t519 = -pkin(5) * t916 + t536;
t514 = pkin(5) * t590 + t523;
t504 = qJD(6) * t554 + t762 * t582 + t583 * t758;
t503 = -qJD(6) * t553 - t582 * t758 + t583 * t762;
t497 = pkin(5) * t582 + t509;
t483 = -pkin(10) * t582 + t487;
t482 = pkin(5) * t622 - pkin(10) * t583 + t486;
t481 = pkin(5) * t537 + t488;
t473 = -qJD(6) * t480 + t835;
t472 = t479 * qJD(6) + t811;
t1 = [(-t735 * t731 - t826 * t757 + (t764 * t911 + (-t841 + t859) * t858) * pkin(1) - t779) * MDP(9) + (-t622 * t709 - t658 * t676) * MDP(18) + (t621 * t709 + t658 * t677) * MDP(17) + (t546 * t677 + t631 * t559 + t600 * t621 + t610 * t654 - t888 * t658 - t785 * t709 + t822) * MDP(21) + (-t561 * t757 - t646 * t733 - t655 * t731 + t820) * MDP(13) + (t576 * t757 + t657 * t731 + t779) * MDP(12) + ((-t536 * t873 - t760 * t786) * MDP(21) + (-t760 * t788 + t764 * t804) * MDP(13) + (t760 * t804 + t764 * t788) * MDP(12) + (-t560 * t760 - t652 * t873) * MDP(18) + (t535 * t873 - t760 * t828) * MDP(20) + (t559 * t760 + t654 * t873) * MDP(17) + (t760 * t831 + t832 * t873) * MDP(6) + (t658 * t760 + t709 * t873) * MDP(19)) * t755 + (-pkin(1) * t787 * t858 - t731 * t881 - t733 * t803 + t757 * t827 - t820) * MDP(10) + ((-qJD(6) * t808 + t482 * t762 - t483 * t758) * t647 + t809 * t558 + t473 * t676 + t479 * t622 + t497 * t530 + t521 * t490 + t481 * t553 + t514 * t504 - g(1) * t935 - g(2) * t567) * MDP(31) + t818 * MDP(3) + (-t477 * t620 - t478 * t619 - t486 * t592 - t487 * t590 - t499 * t583 - t500 * t582 - t510 * t538 - t511 * t537 - t822) * MDP(24) + (-t489 * t553 - t490 * t554 - t503 * t530 + t504 * t806) * MDP(27) + (t489 * t676 + t503 * t647 + t554 * t558 - t622 * t806) * MDP(28) + (-(qJD(6) * t809 + t482 * t758 + t483 * t762) * t647 - t808 * t558 - t472 * t676 - t480 * t622 - t497 * t806 + t521 * t489 + t481 * t554 + t514 * t503 + g(1) * t936 - g(2) * t566) * MDP(32) + (t489 * t554 - t503 * t806) * MDP(26) + (-g(1) * t780 - g(2) * t800 + t561 * t655 + t568 * t656 + t576 * t657 + t629 * t668 + t633 * t646 + t643 * t638) * MDP(14) + (-g(1) * t798 - g(2) * t624 + t546 * t676 + t631 * t560 + t600 * t622 + t610 * t652 + t833 * t658 + t799 * t709) * MDP(20) + (t478 * t511 + t500 * t487 + t477 * t510 + t499 * t486 + t488 * t549 + t523 * t509 - g(1) * (pkin(3) * t903 + pkin(4) * t798 - pkin(9) * t679 + qJ(5) * t797 + t780) - g(2) * (pkin(3) * t905 + pkin(4) * t624 + pkin(9) * t681 + qJ(5) * t623 + t800)) * MDP(25) + (t486 * t652 + t510 * t560 + t477 * t676 + t499 * t622 + t509 * t590 + t549 * t537 + t488 * t619 + t523 * t582 - g(1) * (-t679 * t754 + t756 * t798) - g(2) * (t624 * t756 + t681 * t754)) * MDP(22) + (-t487 * t652 - t511 * t560 - t478 * t676 - t500 * t622 + t509 * t592 + t549 * t538 + t488 * t620 + t523 * t583 - g(1) * (-t679 * t756 - t754 * t798) - g(2) * (-t624 * t754 + t681 * t756)) * MDP(23) + ((qJDD(1) * t752 + 0.2e1 * t760 * t840) * MDP(4) + 0.2e1 * (t760 * t859 - t862 * t880) * MDP(5)) * t750 + (t764 * t831 - t832 * t874) * t924 + MDP(8) * t911 + ((qJD(2) * t629 - qJDD(1) * t655 - t561 + (qJD(2) * t657 - t646) * qJD(1)) * t764 + (qJD(2) * t633 + qJDD(1) * t657 + t576 + (qJD(2) * t655 + t668) * qJD(1)) * t760 - t818) * t879 + (g(1) * t761 - g(2) * t765) * MDP(2) + qJDD(1) * MDP(1) + (t558 * t676 + t622 * t647) * MDP(30) + (-t490 * t676 - t504 * t647 - t530 * t622 - t553 * t558) * MDP(29) + (t559 * t677 + t621 * t654) * MDP(15) + (-t559 * t676 - t560 * t677 - t621 * t652 - t622 * t654) * MDP(16); (-t709 * t869 - t914 + (t652 * t764 - t760 * t794) * t878) * MDP(18) + (qJ(3) * t560 - t535 * t848 + t865 * t652 + t768 * t759 + t893 * t763 + (t615 + (t600 - t636) * t763) * t709) * MDP(20) + (0.2e1 * t710 + t712 + t864 * t733 + (-g(3) * t760 + (t643 * t764 + t665 * t760) * qJD(1)) * t755 + t774) * MDP(13) + (pkin(1) * t853 + t733 * t883 - t774 + t857) * MDP(10) + (-t490 * t759 - t530 * t794 - t558 * t662 - t647 * t891) * MDP(29) + ((-t560 - t915) * t763 + (-t559 + t917) * t759) * MDP(16) + (t559 * t763 - t759 * t915) * MDP(15) + ((t601 * t762 - t612 * t758) * t558 + t473 * t759 + t479 * t869 + t684 * t490 + t481 * t662 - g(1) * (-t680 * t746 + t681 * t909) - g(2) * (-t678 * t746 + t679 * t909) + (t758 * t815 - t762 * t816) * t647 + t886 * t530 + t891 * t514 + (t479 * t847 - g(3) * (t746 * t764 + t747 * t901)) * t755) * MDP(31) + (-t561 * qJ(3) - t576 * pkin(2) - t643 * t665 - t629 * t667 - g(1) * (qJ(3) * t681 - t671) - g(2) * (qJ(3) * t679 - t669) - t842 - t864 * t633) * MDP(14) + (t558 * t759 + t647 * t794) * MDP(30) + t880 * MDP(5) * t908 + (-t709 * t870 + t649 + (-t654 * t764 - t709 * t901) * t878) * MDP(17) - MDP(4) * t829 + (-t523 * t642 - t552 * t592 - t645 * t560 - t889 * t652 + t778 * t756 + (-t478 + (-t523 * t756 + t592 * t766) * qJD(4) + t777 * t754) * t759 + (t488 * t756 - t500 * t709 - t766 * t538) * t763) * MDP(23) + (-t523 * t641 - t552 * t590 + t644 * t560 + t890 * t652 + t778 * t754 + (t477 + (-t523 * t754 + t590 * t766) * qJD(4) - t777 * t756) * t759 + (t488 * t754 + t499 * t709 - t766 * t537) * t763) * MDP(22) + (t499 * t642 + t500 * t641 - t537 * t645 - t538 * t644 - t890 * t592 - t889 * t590 + (t499 * t756 + t500 * t754) * t870 + (-t477 * t756 - t478 * t754 + t777) * t763) * MDP(24) + (t478 * t645 + t477 * t644 - t488 * t763 * t766 - g(1) * (-pkin(9) * t680 - t671) - g(2) * (-pkin(9) * t678 - t669) - t842 - g(3) * (t760 * t813 + t930) * t755 + (t759 * t868 - t552) * t523 + t889 * t500 + t890 * t499 + t819 * t692) * MDP(25) + ((-pkin(2) * t760 + t923) * qJDD(1) + ((-qJ(3) * qJD(2) - t633 - t667) * t760 + (-pkin(2) * qJD(2) - t629 + t864) * t764) * qJD(1)) * t879 + (t908 * t933 + t769) * MDP(9) + (-t665 * t848 - t769 - 0.2e1 * t932 + t938) * MDP(12) + (qJ(3) * t559 + t887 * t709 + t536 * t848 + t865 * t654 + (-t600 * t709 - t893) * t759 + t768 * t763) * MDP(21) - t709 * MDP(19) * t848 + (-t866 * t876 + t859) * t924 + MDP(6) * t772 + t731 * MDP(8) + (-(t601 * t758 + t612 * t762) * t558 - t472 * t759 - t480 * t869 + t684 * t489 + t481 * t663 - g(1) * (-t680 * t747 - t681 * t910) - g(2) * (-t678 * t747 - t679 * t910) + (t758 * t816 + t762 * t815) * t647 - t886 * t806 + t892 * t514 + (-t480 * t847 - g(3) * (-t746 * t901 + t747 * t764)) * t755) * MDP(32) + (t489 * t663 - t806 * t892) * MDP(26) + (t489 * t759 + t558 * t663 + t647 * t892 - t794 * t806) * MDP(28) + (-t489 * t662 - t490 * t663 - t530 * t892 + t806 * t891) * MDP(27); MDP(11) * t772 + (t731 + t829) * MDP(12) + (-t733 ^ 2 - t752 * t908) * MDP(13) + (t633 * t733 - t773 - t932 + t938) * MDP(14) + (-t709 ^ 2 * t759 - t652 * t733 + t649) * MDP(20) + (-t654 * t733 - t709 * t794 - t914) * MDP(21) + (-t537 * t763 + (-t754 * t869 - t639) * t652 + (t590 * t709 - t920) * t759) * MDP(22) + (-t538 * t763 + (-t756 * t869 + t640) * t652 + (t592 * t709 - t919) * t759) * MDP(23) + (t590 * t640 + t592 * t639 + (-t537 * t756 + t538 * t754) * t759 + (-t590 * t756 + t592 * t754) * t869) * MDP(24) + (-t499 * t639 - t500 * t640 + (qJD(4) * t807 - t488) * t763 + (t523 * t709 + t810) * t759 - t778) * MDP(25) + (-(t639 * t762 - t640 * t758) * t647 + (-t687 * t871 - t490) * t763 + (t530 * t709 - t647 * t939 - t921) * t759) * MDP(31) + ((t639 * t758 + t640 * t762) * t647 + (-t871 * t940 - t489) * t763 + (t647 * t784 - t709 * t806 - t922) * t759) * MDP(32); -t652 ^ 2 * MDP(16) + (t559 + t917) * MDP(17) + (-t560 + t915) * MDP(18) + t658 * MDP(19) + (t536 * t709 + t770) * MDP(20) + (t535 * t709 + t600 * t652 - t781 - t786) * MDP(21) + (-qJ(5) * t920 - pkin(4) * t537 - t536 * t590 + (t754 * t863 - t512) * t652 + t776 * t756) * MDP(22) + (-qJ(5) * t919 - pkin(4) * t538 - t536 * t592 + (t756 * t863 + t513) * t652 - t776 * t754) * MDP(23) + (t512 * t592 + t513 * t590 + (-qJ(5) * t537 - qJD(5) * t590 - t499 * t652 + t478) * t756 + (qJ(5) * t538 + qJD(5) * t592 - t500 * t652 - t477) * t754 + t781) * MDP(24) + (-t499 * t512 - t500 * t513 - t523 * t536 + t807 * qJD(5) + t776 * pkin(4) + (t781 + t810) * qJ(5)) * MDP(25) + (t489 * t687 - t806 * t885) * MDP(26) + (t489 * t940 - t490 * t687 - t530 * t885 + t806 * t884) * MDP(27) + (t647 * t885 + t921) * MDP(28) + (-t647 * t884 + t922) * MDP(29) + ((-t701 * t762 - t702 * t758) * t558 + t744 * t490 - t481 * t940 - t519 * t530 + (t758 * t791 - t762 * t792) * t647 + t884 * t514 + t782 * t747) * MDP(31) + (-(-t701 * t758 + t702 * t762) * t558 + t744 * t489 + t481 * t687 + t519 * t806 + (t758 * t792 + t762 * t791) * t647 + t885 * t514 - t782 * t746) * MDP(32) + (MDP(15) * t652 + MDP(16) * t654 - MDP(20) * t600 - MDP(22) * t499 + MDP(23) * t500 + MDP(28) * t806 + MDP(29) * t530 - MDP(30) * t647 - MDP(31) * t479 + MDP(32) * t480) * t654; (t592 * t652 + t537) * MDP(22) + (-t590 * t652 + t538) * MDP(23) + (-t590 ^ 2 - t592 ^ 2) * MDP(24) + (t499 * t592 + t500 * t590 - t770 + t937) * MDP(25) + (t490 - t944) * MDP(31) + (t489 - t946) * MDP(32); -t806 * t530 * MDP(26) + (-t530 ^ 2 + t806 ^ 2) * MDP(27) + (t851 + t946) * MDP(28) + (-t834 - t944) * MDP(29) + t558 * MDP(30) + (t480 * t647 + t514 * t806 - g(1) * t566 - g(2) * t936 - g(3) * (-t677 * t746 + t747 * t906) + t835) * MDP(31) + (t479 * t647 + t514 * t530 + g(1) * t567 - g(2) * t935 - g(3) * (-t677 * t747 - t746 * t906) - t811) * MDP(32) + (-MDP(28) * t918 + MDP(29) * t806 - MDP(31) * t480 - MDP(32) * t479) * qJD(6);];
tau  = t1;
