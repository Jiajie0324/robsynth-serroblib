% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 16:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR13_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR13_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR13_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:39:36
% EndTime: 2019-05-06 16:41:10
% DurationCPUTime: 50.04s
% Computational Cost: add. (284426->935), mult. (647968->1446), div. (0->0), fcn. (486452->12), ass. (0->676)
t1045 = sin(qJ(1));
t1049 = cos(qJ(1));
t1039 = sin(pkin(6));
t1041 = cos(pkin(6));
t1048 = cos(qJ(2));
t1044 = sin(qJ(2));
t1030 = qJDD(1) * t1041 + qJDD(2);
t1051 = t1039 ^ 2;
t1050 = qJD(1) ^ 2;
t1154 = t1044 * t1050;
t1136 = t1048 * t1154;
t1129 = t1051 * t1136;
t998 = t1030 - t1129;
t1175 = t1044 * t998;
t1031 = t1041 * qJD(1) + qJD(2);
t1027 = t1031 ^ 2;
t1153 = t1050 * t1051;
t1214 = t1044 ^ 2;
t1028 = t1214 * t1153;
t979 = -t1028 - t1027;
t1089 = -t1048 * t979 + t1175;
t1156 = t1039 * t1048;
t1138 = qJD(1) * t1156;
t1008 = t1031 * t1138;
t1151 = qJDD(1) * t1044;
t1161 = qJD(1) * t1048;
t1080 = qJD(2) * t1161 + t1151;
t1062 = t1080 * t1039;
t1220 = t1008 + t1062;
t885 = t1039 * t1220 + t1041 * t1089;
t1165 = t1048 * t998;
t939 = t1044 * t979 + t1165;
t824 = t1045 * t939 + t1049 * t885;
t1259 = pkin(7) * t824;
t827 = t1045 * t885 - t1049 * t939;
t1258 = pkin(7) * t827;
t1037 = t1048 ^ 2;
t1029 = t1037 * t1153;
t1003 = -t1029 - t1027;
t997 = t1030 + t1129;
t1166 = t1048 * t997;
t1086 = t1003 * t1044 + t1166;
t1157 = t1039 * t1044;
t1139 = qJD(1) * t1157;
t1024 = qJD(2) * t1139;
t1162 = qJD(1) * t1044;
t1140 = t1031 * t1162;
t1150 = qJDD(1) * t1048;
t970 = -t1024 + (-t1140 + t1150) * t1039;
t907 = t1039 * t970 + t1041 * t1086;
t1176 = t1044 * t997;
t955 = t1003 * t1048 - t1176;
t843 = t1045 * t955 + t1049 * t907;
t1257 = pkin(7) * t843;
t846 = t1045 * t907 - t1049 * t955;
t1256 = pkin(7) * t846;
t901 = t1039 * t1086 - t1041 * t970;
t1255 = pkin(8) * (t1039 * t901 + t1041 * t907);
t883 = t1039 * t1089 - t1041 * t1220;
t1254 = pkin(8) * (t1039 * t883 + t1041 * t885);
t1253 = pkin(1) * t883;
t1252 = pkin(1) * t885;
t1251 = pkin(1) * t901;
t1250 = pkin(1) * t907;
t1002 = t1029 - t1027;
t1087 = t1002 * t1044 + t1165;
t969 = -t1024 + (t1140 + t1150) * t1039;
t905 = -t1039 * t969 + t1041 * t1087;
t953 = t1002 * t1048 - t1175;
t1249 = t1045 * t905 - t1049 * t953;
t1001 = -t1028 + t1027;
t1088 = t1001 * t1048 + t1176;
t968 = -t1008 + t1062;
t903 = -t1039 * t968 + t1041 * t1088;
t952 = t1001 * t1044 - t1166;
t1248 = t1045 * t903 + t1049 * t952;
t1247 = t1045 * t953 + t1049 * t905;
t1246 = -t1045 * t952 + t1049 * t903;
t1243 = pkin(8) * t939;
t1242 = pkin(8) * t955;
t1061 = (qJD(2) + t1031) * t1161 + t1151;
t1022 = g(1) * t1045 - t1049 * g(2);
t1208 = pkin(8) * t1039;
t994 = qJDD(1) * pkin(1) + t1050 * t1208 + t1022;
t1057 = -qJ(3) * t1061 - t994;
t1038 = sin(pkin(11));
t1019 = qJD(4) + t1139;
t1040 = cos(pkin(11));
t1043 = sin(qJ(4));
t1047 = cos(qJ(4));
t988 = t1031 * t1047 - t1043 * t1138;
t959 = -t1040 * t1019 + t1038 * t988;
t961 = t1019 * t1038 + t1040 * t988;
t912 = t961 * t959;
t999 = t1039 * t1150 - t1024;
t1131 = t1043 * t1030 + t1047 * t999;
t930 = qJD(4) * t988 + t1131;
t1227 = -t912 + t930;
t1233 = t1038 * t1227;
t1232 = t1040 * t1227;
t1042 = sin(qJ(6));
t1067 = qJDD(6) + t930;
t1046 = cos(qJ(6));
t896 = t1042 * t961 + t1046 * t959;
t898 = -t1042 * t959 + t1046 * t961;
t811 = t898 * t896;
t1223 = t1067 - t811;
t1231 = t1042 * t1223;
t986 = t1031 * t1043 + t1047 * t1138;
t946 = t988 * t986;
t992 = qJDD(4) + t1062;
t1226 = -t946 + t992;
t1230 = t1043 * t1226;
t1229 = t1046 * t1223;
t1228 = t1047 * t1226;
t931 = -t986 * qJD(4) + t1047 * t1030 - t1043 * t999;
t910 = t1038 * t992 + t1040 * t931;
t927 = t986 * t959;
t835 = -t927 - t910;
t833 = -t927 + t910;
t909 = -t1038 * t931 + t1040 * t992;
t1065 = qJD(6) * t896 - t1042 * t909 - t1046 * t910;
t980 = qJD(6) + t986;
t859 = t980 * t896;
t1224 = -t1065 - t859;
t1201 = t1019 * t986;
t1084 = t931 - t1201;
t1209 = pkin(2) * t1048;
t1123 = -qJ(3) * t1044 - t1209;
t1066 = t1123 * t1157;
t1204 = t1048 * g(3);
t1222 = t1039 * (t1050 * t1066 + t1204);
t1221 = t1044 * t1051;
t1133 = t1042 * t910 - t1046 * t909;
t722 = (qJD(6) - t980) * t898 + t1133;
t1219 = t1039 * t1087 + t1041 * t969;
t1218 = t1039 * t1088 + t1041 * t968;
t894 = t896 ^ 2;
t895 = t898 ^ 2;
t1217 = t959 ^ 2;
t958 = t961 ^ 2;
t978 = t980 ^ 2;
t1216 = t986 ^ 2;
t985 = t988 ^ 2;
t1215 = t1019 ^ 2;
t1213 = -pkin(2) - pkin(9);
t1005 = -t1028 - t1029;
t1090 = t1044 * t969 - t1048 * t968;
t876 = -t1039 * t1005 + t1041 * t1090;
t915 = t1044 * t968 + t1048 * t969;
t805 = t1045 * t915 + t1049 * t876;
t1212 = pkin(7) * t805;
t1211 = t999 * pkin(2);
t1210 = pkin(2) * t1044;
t1207 = pkin(8) * t1041;
t1206 = t1030 * pkin(2);
t1205 = t1041 * g(3);
t1203 = t961 * t986;
t1023 = g(1) * t1049 + g(2) * t1045;
t995 = -pkin(1) * t1050 + qJDD(1) * t1208 - t1023;
t1132 = -t1041 * t1048 * t994 + t1044 * t995;
t1124 = qJDD(3) + t1132;
t1058 = t1027 * qJ(3) - t1124 + t1206;
t1053 = -t997 * pkin(9) + (pkin(3) * t1151 + t1204 + (qJD(1) * t1066 + (qJD(2) - t1031) * t1048 * pkin(3)) * qJD(1)) * t1039 - t1058;
t1130 = t1031 * t1139;
t1134 = -pkin(2) * t1130 + t1205;
t1137 = qJD(3) * t1162;
t1128 = -0.2e1 * t1039 * t1137 - t1134;
t996 = pkin(3) * t1139 - pkin(9) * t1031;
t814 = -pkin(3) * t1029 + t1213 * t999 + (-t1162 * t996 + t1057) * t1039 + t1128;
t750 = t1043 * t1053 + t1047 * t814;
t943 = pkin(4) * t986 - qJ(5) * t988;
t707 = -pkin(4) * t1215 + qJ(5) * t992 - t943 * t986 + t750;
t1155 = t1041 * t1044;
t938 = -g(3) * t1157 + t1048 * t995 + t1155 * t994;
t861 = t1048 * t1123 * t1153 - t1027 * pkin(2) + t1030 * qJ(3) + 0.2e1 * qJD(3) * t1031 + t938;
t813 = t999 * pkin(3) - pkin(9) * t1029 + t1031 * t996 + t861;
t743 = -t1084 * qJ(5) + (t1019 * t988 + t930) * pkin(4) + t813;
t646 = 0.2e1 * qJD(5) * t961 + t1038 * t707 - t1040 * t743;
t615 = pkin(5) * t1227 + pkin(10) * t835 - t646;
t647 = -0.2e1 * qJD(5) * t959 + t1038 * t743 + t1040 * t707;
t921 = pkin(5) * t986 - pkin(10) * t961;
t630 = -pkin(5) * t1217 + pkin(10) * t909 - t921 * t986 + t647;
t569 = t1042 * t615 + t1046 * t630;
t1202 = pkin(1) * t876 + t915 * t1208;
t568 = t1042 * t630 - t1046 * t615;
t536 = t1042 * t569 - t1046 * t568;
t1200 = t1038 * t536;
t749 = t1043 * t814 - t1047 * t1053;
t704 = -t992 * pkin(4) - t1215 * qJ(5) + t943 * t988 + qJDD(5) + t749;
t1199 = t1038 * t704;
t840 = t912 + t930;
t1198 = t1038 * t840;
t1197 = t1038 * t986;
t1192 = t1040 * t536;
t1191 = t1040 * t704;
t1190 = t1040 * t840;
t1189 = t1040 * t986;
t668 = -t909 * pkin(5) - pkin(10) * t1217 + t921 * t961 + t704;
t1184 = t1042 * t668;
t778 = t1067 + t811;
t1183 = t1042 * t778;
t1182 = t1042 * t980;
t1181 = t1043 * t813;
t923 = t946 + t992;
t1180 = t1043 * t923;
t1179 = t1043 * t930;
t1178 = t1044 * t970;
t972 = t1039 * t994 + t1205;
t1177 = t1044 * t972;
t1174 = t1046 * t668;
t1173 = t1046 * t778;
t1172 = t1046 * t980;
t1171 = t1047 * t813;
t1170 = t1047 * t923;
t1169 = t1047 * t930;
t1168 = t1048 * t970;
t1167 = t1048 * t972;
t1163 = qJD(1) * t1031;
t1160 = t1019 * t1043;
t1159 = t1019 * t1047;
t1158 = t1030 * t1039;
t1149 = t1043 * t811;
t1148 = t1043 * t912;
t1147 = t1044 * t946;
t1146 = t1047 * t811;
t1145 = t1047 * t912;
t1144 = t1048 * t946;
t1143 = pkin(4) * t1047 + pkin(3);
t874 = t1041 * t1005 + t1039 * t1090;
t1142 = -pkin(1) * t874 + t915 * t1207;
t1141 = t1039 * t1163;
t1135 = pkin(4) * t1043 + qJ(3);
t590 = t1038 * t646 + t1040 * t647;
t537 = t1042 * t568 + t1046 * t569;
t975 = -t1022 * t1045 - t1049 * t1023;
t1015 = qJDD(1) * t1049 - t1045 * t1050;
t1127 = -pkin(7) * t1015 - g(3) * t1045;
t1126 = -t1177 - t1243;
t1125 = t1167 + t1242;
t589 = t1038 * t647 - t1040 * t646;
t669 = t1043 * t750 - t1047 * t749;
t670 = t1043 * t749 + t1047 * t750;
t514 = t1040 * t537 - t1200;
t506 = t1043 * t514 - t1047 * t668;
t513 = t1038 * t537 + t1192;
t1122 = t1044 * t513 - t1048 * t506;
t571 = t1043 * t590 - t1047 * t704;
t1121 = t1044 * t589 - t1048 * t571;
t726 = t1065 - t859;
t655 = -t1042 * t722 + t1046 * t726;
t657 = -t1042 * t726 - t1046 * t722;
t599 = -t1038 * t655 + t1040 * t657;
t765 = -t894 - t895;
t580 = t1043 * t599 - t1047 * t765;
t597 = t1038 * t657 + t1040 * t655;
t1120 = t1044 * t597 - t1048 * t580;
t721 = (qJD(6) + t980) * t898 + t1133;
t654 = -t1042 * t721 + t1046 * t1224;
t656 = -t1042 * t1224 - t1046 * t721;
t598 = -t1038 * t654 + t1040 * t656;
t810 = -t895 + t894;
t587 = -t1043 * t598 - t1047 * t810;
t596 = t1038 * t656 + t1040 * t654;
t1119 = t1044 * t596 + t1048 * t587;
t797 = -t978 - t894;
t700 = t1042 * t797 + t1229;
t701 = t1046 * t797 - t1231;
t643 = -t1038 * t700 + t1040 * t701;
t607 = t1043 * t643 - t1047 * t721;
t642 = t1038 * t701 + t1040 * t700;
t1118 = t1044 * t642 - t1048 * t607;
t842 = -t895 - t978;
t727 = t1046 * t842 - t1183;
t728 = -t1042 * t842 - t1173;
t653 = -t1038 * t727 + t1040 * t728;
t611 = t1043 * t653 - t1047 * t1224;
t652 = t1038 * t728 + t1040 * t727;
t1117 = t1044 * t652 - t1048 * t611;
t858 = -t895 + t978;
t737 = t1046 * t858 + t1231;
t739 = -t1042 * t858 + t1229;
t663 = -t1038 * t737 + t1040 * t739;
t620 = -t1043 * t663 - t1047 * t726;
t661 = t1038 * t739 + t1040 * t737;
t1116 = t1044 * t661 + t1048 * t620;
t857 = t894 - t978;
t738 = t1042 * t857 + t1173;
t740 = t1046 * t857 - t1183;
t664 = -t1038 * t738 + t1040 * t740;
t621 = -t1043 * t664 - t1047 * t722;
t662 = t1038 * t740 + t1040 * t738;
t1115 = t1044 * t662 + t1048 * t621;
t763 = -qJD(6) * t898 - t1133;
t716 = t1046 * t763 + t1182 * t896;
t717 = -t1042 * t763 + t1172 * t896;
t650 = -t1038 * t716 + t1040 * t717;
t635 = -t1043 * t650 - t1146;
t648 = t1038 * t717 + t1040 * t716;
t1114 = t1044 * t648 + t1048 * t635;
t718 = -t1042 * t1065 + t1172 * t898;
t719 = -t1046 * t1065 - t1182 * t898;
t651 = -t1038 * t718 + t1040 * t719;
t636 = -t1043 * t651 + t1146;
t649 = t1038 * t719 + t1040 * t718;
t1113 = t1044 * t649 + t1048 * t636;
t1112 = t1044 * t813 - t1048 * t669;
t782 = (-t1042 * t896 - t1046 * t898) * t980;
t783 = (t1042 * t898 - t1046 * t896) * t980;
t696 = -t1038 * t782 + t1040 * t783;
t686 = -t1043 * t696 + t1047 * t1067;
t695 = t1038 * t783 + t1040 * t782;
t1111 = t1044 * t695 + t1048 * t686;
t830 = -t909 - t1203;
t758 = -t1038 * t835 - t1040 * t830;
t852 = t958 + t1217;
t705 = t1043 * t758 + t1047 * t852;
t756 = -t1038 * t830 + t1040 * t835;
t1110 = t1044 * t756 - t1048 * t705;
t867 = -t1216 - t1217;
t770 = t1040 * t867 - t1233;
t831 = t909 - t1203;
t708 = t1043 * t770 + t1047 * t831;
t769 = t1038 * t867 + t1232;
t1109 = t1044 * t769 - t1048 * t708;
t757 = -t1038 * t833 + t1040 * t831;
t911 = -t958 + t1217;
t712 = -t1043 * t757 - t1047 * t911;
t755 = t1038 * t831 + t1040 * t833;
t1108 = t1044 * t755 + t1048 * t712;
t900 = -t958 - t1216;
t781 = -t1038 * t900 - t1190;
t714 = t1043 * t781 - t1047 * t833;
t780 = t1040 * t900 - t1198;
t1107 = t1044 * t780 - t1048 * t714;
t926 = -t958 + t1216;
t793 = -t1038 * t926 + t1232;
t730 = -t1043 * t793 - t1047 * t835;
t791 = t1040 * t926 + t1233;
t1106 = t1044 * t791 + t1048 * t730;
t925 = -t1216 + t1217;
t794 = t1040 * t925 - t1198;
t731 = -t1043 * t794 - t1047 * t830;
t792 = t1038 * t925 + t1190;
t1105 = t1044 * t792 + t1048 * t731;
t818 = -t1038 * t909 + t1189 * t959;
t771 = -t1043 * t818 - t1145;
t817 = t1040 * t909 + t1197 * t959;
t1104 = t1044 * t817 + t1048 * t771;
t820 = t1040 * t910 - t1197 * t961;
t772 = -t1043 * t820 + t1145;
t819 = t1038 * t910 + t1189 * t961;
t1103 = t1044 * t819 + t1048 * t772;
t848 = (t1038 * t961 - t1040 * t959) * t986;
t798 = -t1043 * t848 + t1169;
t847 = (-t1038 * t959 - t1040 * t961) * t986;
t1102 = t1044 * t847 + t1048 * t798;
t887 = (qJD(4) + t1019) * t988 + t1131;
t800 = t1043 * t887 - t1047 * t1084;
t944 = t985 - t1216;
t1101 = t1044 * t944 + t1048 * t800;
t1064 = (-qJD(4) + t1019) * t988 - t1131;
t891 = -t931 - t1201;
t801 = t1043 * t1064 + t1047 * t891;
t920 = -t1216 - t985;
t1100 = t1044 * t920 - t1048 * t801;
t936 = -t1216 - t1215;
t849 = t1043 * t936 + t1228;
t1099 = t1044 * t887 - t1048 * t849;
t851 = -pkin(2) * t1005 + t861;
t1054 = t1124 + t1222;
t853 = -t1206 + (-t1005 - t1027) * qJ(3) + t1054;
t1098 = t1044 * t853 + t1048 * t851;
t947 = -t985 - t1215;
t855 = t1047 * t947 - t1180;
t1097 = t1044 * t1084 - t1048 * t855;
t869 = t1058 - t1222;
t1096 = t1044 * t861 + t1048 * t869;
t965 = -t985 + t1215;
t863 = -t1047 * t965 - t1230;
t1095 = -t1044 * t891 + t1048 * t863;
t964 = t1216 - t1215;
t864 = -t1043 * t964 - t1170;
t1094 = t1044 * t1064 + t1048 * t864;
t917 = (t1043 * t986 + t1047 * t988) * t1019;
t1093 = t1044 * t992 + t1048 * t917;
t937 = g(3) * t1156 + t1132;
t1092 = t1044 * t938 - t1048 * t937;
t854 = t1044 * t937 + t1048 * t938;
t1091 = t1048 * t1220 + t1178;
t1085 = -t1041 * t1050 + t1163;
t974 = t1022 * t1049 - t1023 * t1045;
t879 = -t1160 * t986 + t1169;
t1083 = t1048 * t879 - t1147;
t881 = -t1043 * t931 - t1159 * t988;
t1082 = t1048 * t881 + t1147;
t1081 = (-t1039 * t874 - t1041 * t876) * pkin(8);
t532 = -pkin(5) * t668 + pkin(10) * t537;
t495 = -pkin(10) * t1192 - qJ(5) * t513 - t1038 * t532;
t497 = -pkin(4) * t513 - pkin(5) * t536;
t507 = t1043 * t668 + t1047 * t514;
t479 = pkin(3) * t513 - t1043 * t495 - t1047 * t497 + t1213 * t507;
t483 = pkin(3) * t506 - pkin(4) * t668 - pkin(10) * t1200 - qJ(3) * t507 + qJ(5) * t514 + t1040 * t532;
t494 = t1044 * t506 + t1048 * t513;
t1079 = pkin(8) * t494 + t1044 * t483 + t1048 * t479;
t528 = -pkin(5) * t765 + pkin(10) * t657 + t537;
t531 = -pkin(10) * t655 - t536;
t498 = -qJ(5) * t597 - t1038 * t528 + t1040 * t531;
t564 = -pkin(4) * t597 - pkin(5) * t655;
t581 = t1043 * t765 + t1047 * t599;
t493 = pkin(3) * t597 - t1043 * t498 - t1047 * t564 + t1213 * t581;
t496 = pkin(3) * t580 - pkin(4) * t765 - qJ(3) * t581 + qJ(5) * t599 + t1038 * t531 + t1040 * t528;
t545 = t1044 * t580 + t1048 * t597;
t1078 = pkin(8) * t545 + t1044 * t496 + t1048 * t493;
t604 = -pkin(5) * t721 + pkin(10) * t701 - t1174;
t616 = -pkin(10) * t700 + t1184;
t539 = -qJ(5) * t642 - t1038 * t604 + t1040 * t616;
t540 = -pkin(4) * t642 - pkin(5) * t700 + t568;
t608 = t1043 * t721 + t1047 * t643;
t501 = pkin(3) * t642 - t1043 * t539 - t1047 * t540 + t1213 * t608;
t519 = pkin(3) * t607 - pkin(4) * t721 - qJ(3) * t608 + qJ(5) * t643 + t1038 * t616 + t1040 * t604;
t566 = t1044 * t607 + t1048 * t642;
t1077 = pkin(8) * t566 + t1044 * t519 + t1048 * t501;
t547 = -pkin(4) * t652 - pkin(5) * t727 + t569;
t605 = -pkin(5) * t1224 + pkin(10) * t728 + t1184;
t628 = -pkin(10) * t727 + t1174;
t549 = -qJ(5) * t652 - t1038 * t605 + t1040 * t628;
t612 = t1043 * t1224 + t1047 * t653;
t505 = pkin(3) * t652 - t1043 * t549 - t1047 * t547 + t1213 * t612;
t522 = pkin(3) * t611 - pkin(4) * t1224 - qJ(3) * t612 + qJ(5) * t653 + t1038 * t628 + t1040 * t605;
t576 = t1044 * t611 + t1048 * t652;
t1076 = pkin(8) * t576 + t1044 * t522 + t1048 * t505;
t572 = t1043 * t704 + t1047 * t590;
t509 = t1213 * t572 + (qJ(5) * t1043 + t1143) * t589;
t521 = pkin(3) * t571 - pkin(4) * t704 - qJ(3) * t572 + qJ(5) * t590;
t538 = t1044 * t571 + t1048 * t589;
t1075 = pkin(8) * t538 + t1044 * t521 + t1048 * t509;
t573 = -qJ(5) * t756 - t589;
t706 = -t1043 * t852 + t1047 * t758;
t544 = -t1043 * t573 + t1143 * t756 + t1213 * t706;
t552 = pkin(3) * t705 + pkin(4) * t852 - qJ(3) * t706 + qJ(5) * t758 + t590;
t658 = t1044 * t705 + t1048 * t756;
t1074 = pkin(8) * t658 + t1044 * t552 + t1048 * t544;
t624 = -pkin(4) * t769 + t646;
t666 = -qJ(5) * t769 + t1199;
t709 = -t1043 * t831 + t1047 * t770;
t556 = pkin(3) * t769 - t1043 * t666 - t1047 * t624 + t1213 * t709;
t593 = pkin(3) * t708 + pkin(4) * t831 - qJ(3) * t709 + qJ(5) * t770 - t1191;
t671 = t1044 * t708 + t1048 * t769;
t1073 = pkin(8) * t671 + t1044 * t593 + t1048 * t556;
t627 = -pkin(4) * t780 + t647;
t667 = -qJ(5) * t780 + t1191;
t715 = t1043 * t833 + t1047 * t781;
t558 = pkin(3) * t780 - t1043 * t667 - t1047 * t627 + t1213 * t715;
t594 = pkin(3) * t714 - pkin(4) * t833 - qJ(3) * t715 + qJ(5) * t781 + t1199;
t674 = t1044 * t714 + t1048 * t780;
t1072 = pkin(8) * t674 + t1044 * t594 + t1048 * t558;
t603 = pkin(3) * t813 + t1213 * t670;
t606 = pkin(3) * t669 - qJ(3) * t670;
t644 = t1044 * t669 + t1048 * t813;
t1071 = pkin(8) * t644 + t1044 * t606 + t1048 * t603;
t803 = -t1043 * t891 + t1047 * t1064;
t618 = pkin(3) * t920 + t1213 * t803 - t670;
t729 = pkin(3) * t801 - qJ(3) * t803;
t766 = t1044 * t801 + t1048 * t920;
t1070 = pkin(8) * t766 + t1044 * t729 + t1048 * t618;
t850 = t1047 * t936 - t1230;
t677 = pkin(3) * t849 - qJ(3) * t850 - t749;
t689 = pkin(3) * t887 + t1213 * t850 + t1171;
t786 = t1044 * t849 + t1048 * t887;
t1069 = pkin(8) * t786 + t1044 * t677 + t1048 * t689;
t856 = -t1043 * t947 - t1170;
t680 = pkin(3) * t855 - qJ(3) * t856 - t750;
t693 = pkin(3) * t1084 + t1213 * t856 - t1181;
t789 = t1044 * t855 + t1048 * t1084;
t1068 = pkin(8) * t789 + t1044 * t680 + t1048 * t693;
t836 = t1211 + qJ(3) * t1220 + (0.2e1 * t1137 - t1057) * t1039 + t1134;
t1063 = t1044 * t836 + t1209 * t1220 + t1243;
t1055 = t1039 * t1057 + t1128;
t837 = (-t999 - t970) * pkin(2) + t1055;
t1060 = -qJ(3) * t1178 + t1048 * t837 - t1242;
t787 = -t1044 * t869 + t1048 * t861;
t862 = t1055 - t1211;
t1059 = pkin(8) * t787 + t1123 * t862;
t1036 = t1039 * t1051;
t1014 = qJDD(1) * t1045 + t1049 * t1050;
t1012 = t1041 * t1030;
t1004 = t1028 - t1029;
t1000 = -pkin(7) * t1014 + g(3) * t1049;
t971 = (t1037 + t1214) * t1141;
t963 = (t1048 * t1080 - t1163 * t1214) * t1039;
t962 = -t1037 * t1141 - t1044 * t999;
t942 = t1045 * t1158 + t1049 * t971;
t941 = t1045 * t971 - t1049 * t1158;
t935 = t1039 * t1061 * t1155 + t1036 * t1136;
t934 = (t1048 * t1085 + t1080) * t1221;
t933 = (t1039 * t999 - t1085 * t1221) * t1048;
t932 = (-t1036 * t1154 + (t999 - t1130) * t1041) * t1048;
t919 = -pkin(2) * t968 + qJ(3) * t969;
t918 = (t1043 * t988 - t1047 * t986) * t1019;
t916 = -t1044 * t1220 + t1168;
t882 = t1047 * t931 - t1160 * t988;
t880 = t1159 * t986 + t1179;
t878 = -t1044 * t917 + t1048 * t992;
t877 = -t1039 * t1004 + t1041 * t1091;
t875 = t1041 * t1004 + t1039 * t1091;
t873 = -t1045 * t935 + t1049 * t963;
t872 = -t1045 * t932 + t1049 * t962;
t871 = t1045 * t963 + t1049 * t935;
t870 = t1045 * t962 + t1049 * t932;
t866 = t1047 * t964 - t1180;
t865 = -t1043 * t965 + t1228;
t838 = (-t1003 - t1027) * qJ(3) + (-t1030 - t997) * pkin(2) + t1054;
t829 = -t1044 * t881 + t1144;
t828 = -t1044 * t879 - t1144;
t823 = t1039 * t972 + t1041 * t1092;
t822 = t1039 * t1092 - t1041 * t972;
t821 = -pkin(2) * t979 + qJ(3) * t998 + t861;
t809 = -t1039 * t918 + t1041 * t1093;
t808 = -t1045 * t877 + t1049 * t916;
t807 = -t1045 * t876 + t1049 * t915;
t806 = t1045 * t916 + t1049 * t877;
t804 = pkin(7) * t807;
t802 = -t1043 * t1084 - t1047 * t887;
t799 = t1047 * t848 + t1179;
t796 = -t1044 * t864 + t1048 * t1064;
t795 = -t1044 * t863 - t1048 * t891;
t790 = -t1177 - t1255;
t788 = pkin(2) * t869 + qJ(3) * t861;
t785 = -t1167 + t1254;
t784 = t1039 * t937 + t1041 * t1125 - t1251;
t776 = -t1044 * t800 + t1048 * t944;
t775 = t1039 * t938 + t1041 * t1126 + t1253;
t774 = t1047 * t820 + t1148;
t773 = t1047 * t818 - t1148;
t768 = -t1039 * t882 + t1041 * t1082;
t767 = -t1039 * t880 + t1041 * t1083;
t762 = -pkin(1) * t822 + t1207 * t854;
t761 = -t1045 * t823 + t1049 * t854;
t760 = t1045 * t854 + t1049 * t823;
t759 = t1041 * t854 + t1142;
t754 = -t1039 * t866 + t1041 * t1094;
t753 = -t1039 * t865 + t1041 * t1095;
t752 = (-t1039 * t822 - t1041 * t823) * pkin(8);
t751 = t1081 - t1092;
t748 = -t1044 * t798 + t1048 * t847;
t747 = -t1039 * t862 + t1041 * t1096;
t746 = t1039 * t1096 + t1041 * t862;
t745 = -t1039 * t856 + t1041 * t1097;
t744 = t1039 * t1097 + t1041 * t856;
t736 = -t1039 * t850 + t1041 * t1099;
t735 = t1039 * t1099 + t1041 * t850;
t734 = -qJ(3) * t1168 - t1044 * t837 + t1255;
t733 = -t1043 * t830 + t1047 * t794;
t732 = -t1043 * t835 + t1047 * t793;
t720 = t1048 * t836 - t1220 * t1210 - t1254;
t713 = -t1043 * t911 + t1047 * t757;
t711 = -t1044 * t772 + t1048 * t819;
t710 = -t1044 * t771 + t1048 * t817;
t702 = -t1039 * t802 + t1041 * t1101;
t699 = -t1039 * t803 + t1041 * t1100;
t698 = t1039 * t1100 + t1041 * t803;
t697 = -t1044 * t851 + t1048 * t853 + t1081;
t694 = -t1039 * t838 + t1041 * t1060 + t1251;
t692 = qJ(3) * t1084 + t1213 * t855 + t1171;
t691 = -t1039 * t821 + t1041 * t1063 - t1253;
t690 = -t1039 * t919 + t1041 * t1098 + t1142;
t688 = qJ(3) * t887 + t1213 * t849 + t1181;
t687 = t1043 * t1067 + t1047 * t696;
t685 = -t1039 * t799 + t1041 * t1102;
t684 = -t1045 * t745 + t1049 * t789;
t683 = t1045 * t789 + t1049 * t745;
t682 = -t1045 * t747 + t1049 * t787;
t681 = t1045 * t787 + t1049 * t747;
t679 = -t1044 * t731 + t1048 * t792;
t678 = -t1044 * t730 + t1048 * t791;
t676 = -t1045 * t736 + t1049 * t786;
t675 = t1045 * t786 + t1049 * t736;
t673 = -t1039 * t774 + t1041 * t1103;
t672 = -t1039 * t773 + t1041 * t1104;
t665 = -t1044 * t712 + t1048 * t755;
t660 = -t1045 * t699 + t1049 * t766;
t659 = t1045 * t766 + t1049 * t699;
t641 = (-qJ(3) * t1048 + t1210) * t862 + (-t1039 * t746 - t1041 * t747) * pkin(8);
t640 = -t1039 * t733 + t1041 * t1105;
t639 = -t1039 * t732 + t1041 * t1106;
t638 = t1047 * t651 + t1149;
t637 = t1047 * t650 - t1149;
t634 = -t1044 * t686 + t1048 * t695;
t633 = -pkin(1) * t746 - t1039 * t788 + t1041 * t1059;
t632 = -t1039 * t715 + t1041 * t1107;
t631 = t1039 * t1107 + t1041 * t715;
t626 = -t1039 * t709 + t1041 * t1109;
t625 = t1039 * t1109 + t1041 * t709;
t623 = -t1043 * t722 + t1047 * t664;
t622 = -t1043 * t726 + t1047 * t663;
t619 = -t1039 * t713 + t1041 * t1108;
t617 = qJ(3) * t920 + t1213 * t801 - t669;
t610 = -t1039 * t706 + t1041 * t1110;
t609 = t1039 * t1110 + t1041 * t706;
t602 = qJ(3) * t813 + t1213 * t669;
t601 = -t1039 * t670 + t1041 * t1112;
t600 = t1039 * t1112 + t1041 * t670;
t595 = -t1039 * t687 + t1041 * t1111;
t592 = -t1045 * t632 + t1049 * t674;
t591 = t1045 * t674 + t1049 * t632;
t588 = -t1043 * t810 + t1047 * t598;
t586 = -t1044 * t636 + t1048 * t649;
t585 = -t1044 * t635 + t1048 * t648;
t584 = -t1045 * t626 + t1049 * t671;
t583 = t1045 * t671 + t1049 * t626;
t582 = -t1044 * t693 + t1048 * t680 + (-t1039 * t744 - t1041 * t745) * pkin(8);
t579 = -t1044 * t621 + t1048 * t662;
t578 = -t1044 * t620 + t1048 * t661;
t577 = -t1044 * t689 + t1048 * t677 + (-t1039 * t735 - t1041 * t736) * pkin(8);
t575 = -t1045 * t610 + t1049 * t658;
t574 = t1045 * t658 + t1049 * t610;
t570 = -pkin(1) * t744 - t1039 * t692 + t1041 * t1068;
t565 = -pkin(1) * t735 - t1039 * t688 + t1041 * t1069;
t563 = -t1045 * t601 + t1049 * t644;
t562 = t1045 * t644 + t1049 * t601;
t561 = -t1044 * t618 + t1048 * t729 + (-t1039 * t698 - t1041 * t699) * pkin(8);
t560 = -t1039 * t638 + t1041 * t1113;
t559 = -t1039 * t637 + t1041 * t1114;
t557 = qJ(3) * t780 - t1043 * t627 + t1047 * t667 + t1213 * t714;
t555 = qJ(3) * t769 - t1043 * t624 + t1047 * t666 + t1213 * t708;
t554 = -t1039 * t623 + t1041 * t1115;
t553 = -t1039 * t622 + t1041 * t1116;
t551 = -t1039 * t612 + t1041 * t1117;
t550 = t1039 * t1117 + t1041 * t612;
t548 = -t1044 * t587 + t1048 * t596;
t546 = -pkin(1) * t698 - t1039 * t617 + t1041 * t1070;
t543 = t1047 * t573 + t1135 * t756 + t1213 * t705;
t542 = -t1039 * t608 + t1041 * t1118;
t541 = t1039 * t1118 + t1041 * t608;
t535 = -t1039 * t588 + t1041 * t1119;
t534 = -t1045 * t551 + t1049 * t576;
t533 = t1045 * t576 + t1049 * t551;
t530 = -t1039 * t581 + t1041 * t1120;
t529 = t1039 * t1120 + t1041 * t581;
t527 = -t1045 * t542 + t1049 * t566;
t526 = t1045 * t566 + t1049 * t542;
t525 = -t1044 * t603 + t1048 * t606 + (-t1039 * t600 - t1041 * t601) * pkin(8);
t524 = -t1039 * t572 + t1041 * t1121;
t523 = t1039 * t1121 + t1041 * t572;
t520 = -t1044 * t558 + t1048 * t594 + (-t1039 * t631 - t1041 * t632) * pkin(8);
t518 = -t1044 * t556 + t1048 * t593 + (-t1039 * t625 - t1041 * t626) * pkin(8);
t517 = -pkin(1) * t600 - t1039 * t602 + t1041 * t1071;
t516 = -t1045 * t530 + t1049 * t545;
t515 = t1045 * t545 + t1049 * t530;
t512 = -pkin(1) * t631 - t1039 * t557 + t1041 * t1072;
t511 = -t1044 * t544 + t1048 * t552 + (-t1039 * t609 - t1041 * t610) * pkin(8);
t510 = -pkin(1) * t625 - t1039 * t555 + t1041 * t1073;
t508 = t1213 * t571 + (-qJ(5) * t1047 + t1135) * t589;
t504 = qJ(3) * t652 - t1043 * t547 + t1047 * t549 + t1213 * t611;
t503 = -t1045 * t524 + t1049 * t538;
t502 = t1045 * t538 + t1049 * t524;
t500 = qJ(3) * t642 - t1043 * t540 + t1047 * t539 + t1213 * t607;
t499 = -pkin(1) * t609 - t1039 * t543 + t1041 * t1074;
t492 = qJ(3) * t597 - t1043 * t564 + t1047 * t498 + t1213 * t580;
t491 = -t1044 * t505 + t1048 * t522 + (-t1039 * t550 - t1041 * t551) * pkin(8);
t490 = -t1044 * t501 + t1048 * t519 + (-t1039 * t541 - t1041 * t542) * pkin(8);
t489 = -t1044 * t509 + t1048 * t521 + (-t1039 * t523 - t1041 * t524) * pkin(8);
t488 = -t1039 * t507 + t1041 * t1122;
t487 = t1039 * t1122 + t1041 * t507;
t486 = -pkin(1) * t550 - t1039 * t504 + t1041 * t1076;
t485 = -pkin(1) * t541 - t1039 * t500 + t1041 * t1077;
t484 = -pkin(1) * t523 - t1039 * t508 + t1041 * t1075;
t482 = -t1045 * t488 + t1049 * t494;
t481 = t1045 * t494 + t1049 * t488;
t480 = -t1044 * t493 + t1048 * t496 + (-t1039 * t529 - t1041 * t530) * pkin(8);
t478 = qJ(3) * t513 - t1043 * t497 + t1047 * t495 + t1213 * t506;
t477 = -pkin(1) * t529 - t1039 * t492 + t1041 * t1078;
t476 = -t1044 * t479 + t1048 * t483 + (-t1039 * t487 - t1041 * t488) * pkin(8);
t475 = -pkin(1) * t487 - t1039 * t478 + t1041 * t1079;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1014, -t1015, 0, t975, 0, 0, 0, 0, 0, 0, -t846, t827, t807, t761, 0, 0, 0, 0, 0, 0, t807, t846, -t827, t682, 0, 0, 0, 0, 0, 0, t676, t684, t660, t563, 0, 0, 0, 0, 0, 0, t584, t592, t575, t503, 0, 0, 0, 0, 0, 0, t527, t534, t516, t482; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1015, -t1014, 0, t974, 0, 0, 0, 0, 0, 0, t843, -t824, t805, t760, 0, 0, 0, 0, 0, 0, t805, -t843, t824, t681, 0, 0, 0, 0, 0, 0, t675, t683, t659, t562, 0, 0, 0, 0, 0, 0, t583, t591, t574, t502, 0, 0, 0, 0, 0, 0, t526, t533, t515, t481; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t901, -t883, t874, t822, 0, 0, 0, 0, 0, 0, t874, -t901, t883, t746, 0, 0, 0, 0, 0, 0, t735, t744, t698, t600, 0, 0, 0, 0, 0, 0, t625, t631, t609, t523, 0, 0, 0, 0, 0, 0, t541, t550, t529, t487; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1015, 0, -t1014, 0, t1127, -t1000, -t974, -pkin(7) * t974, t873, t808, -t1248, t872, -t1249, t942, -t1045 * t784 + t1049 * t790 - t1257, -t1045 * t775 + t1049 * t785 + t1259, -t1045 * t759 + t1049 * t751 - t1212, -pkin(7) * t760 - t1045 * t762 + t1049 * t752, t942, t1248, t1249, t873, t808, t872, -t1045 * t690 + t1049 * t697 - t1212, -t1045 * t694 + t1049 * t734 + t1257, -t1045 * t691 + t1049 * t720 - t1259, -pkin(7) * t681 - t1045 * t633 + t1049 * t641, -t1045 * t768 + t1049 * t829, -t1045 * t702 + t1049 * t776, -t1045 * t753 + t1049 * t795, -t1045 * t767 + t1049 * t828, -t1045 * t754 + t1049 * t796, -t1045 * t809 + t1049 * t878, -pkin(7) * t675 - t1045 * t565 + t1049 * t577, -pkin(7) * t683 - t1045 * t570 + t1049 * t582, -pkin(7) * t659 - t1045 * t546 + t1049 * t561, -pkin(7) * t562 - t1045 * t517 + t1049 * t525, -t1045 * t673 + t1049 * t711, -t1045 * t619 + t1049 * t665, -t1045 * t639 + t1049 * t678, -t1045 * t672 + t1049 * t710, -t1045 * t640 + t1049 * t679, -t1045 * t685 + t1049 * t748, -pkin(7) * t583 - t1045 * t510 + t1049 * t518, -pkin(7) * t591 - t1045 * t512 + t1049 * t520, -pkin(7) * t574 - t1045 * t499 + t1049 * t511, -pkin(7) * t502 - t1045 * t484 + t1049 * t489, -t1045 * t560 + t1049 * t586, -t1045 * t535 + t1049 * t548, -t1045 * t553 + t1049 * t578, -t1045 * t559 + t1049 * t585, -t1045 * t554 + t1049 * t579, -t1045 * t595 + t1049 * t634, -pkin(7) * t526 - t1045 * t485 + t1049 * t490, -pkin(7) * t533 - t1045 * t486 + t1049 * t491, -pkin(7) * t515 - t1045 * t477 + t1049 * t480, -pkin(7) * t481 - t1045 * t475 + t1049 * t476; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1014, 0, t1015, 0, t1000, t1127, t975, pkin(7) * t975, t871, t806, t1246, t870, t1247, t941, t1045 * t790 + t1049 * t784 - t1256, t1045 * t785 + t1049 * t775 + t1258, t1045 * t751 + t1049 * t759 + t804, pkin(7) * t761 + t1045 * t752 + t1049 * t762, t941, -t1246, -t1247, t871, t806, t870, t1045 * t697 + t1049 * t690 + t804, t1045 * t734 + t1049 * t694 + t1256, t1045 * t720 + t1049 * t691 - t1258, pkin(7) * t682 + t1045 * t641 + t1049 * t633, t1045 * t829 + t1049 * t768, t1045 * t776 + t1049 * t702, t1045 * t795 + t1049 * t753, t1045 * t828 + t1049 * t767, t1045 * t796 + t1049 * t754, t1045 * t878 + t1049 * t809, pkin(7) * t676 + t1045 * t577 + t1049 * t565, pkin(7) * t684 + t1045 * t582 + t1049 * t570, pkin(7) * t660 + t1045 * t561 + t1049 * t546, pkin(7) * t563 + t1045 * t525 + t1049 * t517, t1045 * t711 + t1049 * t673, t1045 * t665 + t1049 * t619, t1045 * t678 + t1049 * t639, t1045 * t710 + t1049 * t672, t1045 * t679 + t1049 * t640, t1045 * t748 + t1049 * t685, pkin(7) * t584 + t1045 * t518 + t1049 * t510, pkin(7) * t592 + t1045 * t520 + t1049 * t512, pkin(7) * t575 + t1045 * t511 + t1049 * t499, pkin(7) * t503 + t1045 * t489 + t1049 * t484, t1045 * t586 + t1049 * t560, t1045 * t548 + t1049 * t535, t1045 * t578 + t1049 * t553, t1045 * t585 + t1049 * t559, t1045 * t579 + t1049 * t554, t1045 * t634 + t1049 * t595, pkin(7) * t527 + t1045 * t490 + t1049 * t485, pkin(7) * t534 + t1045 * t491 + t1049 * t486, pkin(7) * t516 + t1045 * t480 + t1049 * t477, pkin(7) * t482 + t1045 * t476 + t1049 * t475; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1022, t1023, 0, 0, t934, t875, t1218, t933, t1219, t1012, t1039 * t1125 - t1041 * t937 + t1250, t1039 * t1126 - t1041 * t938 - t1252, t1039 * t854 + t1202, pkin(1) * t823 + t1208 * t854, t1012, -t1218, -t1219, t934, t875, t933, t1039 * t1098 + t1041 * t919 + t1202, t1039 * t1060 + t1041 * t838 - t1250, t1039 * t1063 + t1041 * t821 + t1252, pkin(1) * t747 + t1039 * t1059 + t1041 * t788, t1039 * t1082 + t1041 * t882, t1039 * t1101 + t1041 * t802, t1039 * t1095 + t1041 * t865, t1039 * t1083 + t1041 * t880, t1039 * t1094 + t1041 * t866, t1039 * t1093 + t1041 * t918, pkin(1) * t736 + t1039 * t1069 + t1041 * t688, pkin(1) * t745 + t1039 * t1068 + t1041 * t692, pkin(1) * t699 + t1039 * t1070 + t1041 * t617, pkin(1) * t601 + t1039 * t1071 + t1041 * t602, t1039 * t1103 + t1041 * t774, t1039 * t1108 + t1041 * t713, t1039 * t1106 + t1041 * t732, t1039 * t1104 + t1041 * t773, t1039 * t1105 + t1041 * t733, t1039 * t1102 + t1041 * t799, pkin(1) * t626 + t1039 * t1073 + t1041 * t555, pkin(1) * t632 + t1039 * t1072 + t1041 * t557, pkin(1) * t610 + t1039 * t1074 + t1041 * t543, pkin(1) * t524 + t1039 * t1075 + t1041 * t508, t1039 * t1113 + t1041 * t638, t1039 * t1119 + t1041 * t588, t1039 * t1116 + t1041 * t622, t1039 * t1114 + t1041 * t637, t1039 * t1115 + t1041 * t623, t1039 * t1111 + t1041 * t687, pkin(1) * t542 + t1039 * t1077 + t1041 * t500, pkin(1) * t551 + t1039 * t1076 + t1041 * t504, pkin(1) * t530 + t1039 * t1078 + t1041 * t492, pkin(1) * t488 + t1039 * t1079 + t1041 * t478;];
tauB_reg  = t1;
