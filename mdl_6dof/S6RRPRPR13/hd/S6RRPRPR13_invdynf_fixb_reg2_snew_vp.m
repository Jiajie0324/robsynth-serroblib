% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 16:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR13_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR13_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR13_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR13_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:42:11
% EndTime: 2019-05-06 16:42:20
% DurationCPUTime: 9.55s
% Computational Cost: add. (63128->356), mult. (144039->474), div. (0->0), fcn. (108274->12), ass. (0->267)
t2372 = sin(pkin(6));
t2377 = sin(qJ(2));
t2419 = qJDD(1) * t2377;
t2381 = cos(qJ(2));
t2437 = qJD(1) * t2381;
t2388 = (qJD(2) * t2437 + t2419) * t2372;
t2374 = cos(pkin(6));
t2367 = qJD(1) * t2374 + qJD(2);
t2426 = t2372 * t2381;
t2417 = qJD(1) * t2426;
t2412 = t2367 * t2417;
t2318 = t2388 + t2412;
t2383 = qJD(1) ^ 2;
t2422 = t2383 * t2372 ^ 2;
t2364 = t2377 ^ 2 * t2422;
t2442 = t2367 ^ 2;
t2326 = -t2364 - t2442;
t2354 = t2381 * t2377 * t2422;
t2366 = qJDD(1) * t2374 + qJDD(2);
t2340 = -t2354 + t2366;
t2394 = t2326 * t2381 - t2340 * t2377;
t2277 = -t2372 * t2318 + t2374 * t2394;
t2304 = t2326 * t2377 + t2340 * t2381;
t2378 = sin(qJ(1));
t2382 = cos(qJ(1));
t2458 = t2277 * t2378 + t2304 * t2382;
t2457 = t2277 * t2382 - t2304 * t2378;
t2427 = t2372 * t2377;
t2418 = qJD(1) * t2427;
t2420 = qJDD(1) * t2372;
t2341 = -qJD(2) * t2418 + t2381 * t2420;
t2346 = t2367 * t2418;
t2321 = t2341 - t2346;
t2339 = t2354 + t2366;
t2370 = t2381 ^ 2;
t2365 = t2370 * t2422;
t2342 = -t2365 - t2442;
t2393 = t2339 * t2381 + t2342 * t2377;
t2290 = t2372 * t2321 + t2374 * t2393;
t2313 = t2339 * t2377 - t2342 * t2381;
t2456 = t2290 * t2378 + t2313 * t2382;
t2455 = t2290 * t2382 - t2313 * t2378;
t2386 = qJDD(4) + t2388;
t2376 = sin(qJ(4));
t2380 = cos(qJ(4));
t2329 = t2367 * t2376 + t2380 * t2417;
t2327 = qJD(6) + t2329;
t2450 = qJD(6) + t2327;
t2331 = t2367 * t2380 - t2376 * t2417;
t2299 = t2331 * qJD(4) + t2380 * t2341 + t2376 * t2366;
t2356 = qJD(4) + t2418;
t2431 = t2331 * t2356;
t2278 = t2299 + t2431;
t2371 = sin(pkin(11));
t2373 = cos(pkin(11));
t2315 = t2331 * t2371 - t2373 * t2356;
t2317 = t2331 * t2373 + t2356 * t2371;
t2435 = t2315 * t2317;
t2258 = t2299 - t2435;
t2288 = -t2374 * t2321 + t2372 * t2393;
t2275 = t2374 * t2318 + t2372 * t2394;
t2375 = sin(qJ(6));
t2379 = cos(qJ(6));
t2283 = t2379 * t2315 + t2317 * t2375;
t2449 = t2283 ^ 2;
t2285 = -t2315 * t2375 + t2317 * t2379;
t2448 = t2285 ^ 2;
t2447 = t2315 ^ 2;
t2446 = t2317 ^ 2;
t2445 = t2327 ^ 2;
t2307 = t2329 ^ 2;
t2444 = t2331 ^ 2;
t2443 = t2356 ^ 2;
t2441 = 2 * qJD(3);
t2440 = -2 * qJD(5);
t2439 = t2374 * g(3);
t2438 = qJD(1) * t2377;
t2436 = t2283 * t2285;
t2434 = t2317 * t2329;
t2433 = t2329 * t2315;
t2432 = t2331 * t2329;
t2358 = t2378 * g(1) - g(2) * t2382;
t2425 = t2372 * t2383;
t2335 = qJDD(1) * pkin(1) + pkin(8) * t2425 + t2358;
t2430 = t2335 * t2374;
t2421 = qJD(6) - t2327;
t2338 = pkin(3) * t2418 - pkin(9) * t2367;
t2385 = -t2335 + (-t2419 + (-qJD(2) - t2367) * t2437) * qJ(3);
t2410 = pkin(2) * t2346 - 0.2e1 * qJD(3) * t2418 - t2439;
t2416 = t2370 * t2425;
t2249 = (-pkin(2) - pkin(9)) * t2341 + (-pkin(3) * t2416 - t2338 * t2438 + t2385) * t2372 + t2410;
t2337 = (-pkin(2) * t2381 - qJ(3) * t2377) * t2372 * qJD(1);
t2359 = -g(1) * t2382 - g(2) * t2378;
t2336 = -pkin(1) * t2383 + pkin(8) * t2420 + t2359;
t2413 = t2377 * t2336 - t2381 * t2430;
t2389 = -t2366 * pkin(2) - t2442 * qJ(3) + qJDD(3) + t2413;
t2384 = -t2366 * pkin(9) + ((pkin(3) * qJDD(1) + qJD(1) * t2337) * t2377 + (-t2377 * pkin(9) * t2425 + g(3) + (qJD(2) - t2367) * qJD(1) * pkin(3)) * t2381) * t2372 + t2389;
t2228 = t2380 * t2249 + t2376 * t2384;
t2306 = pkin(4) * t2329 - qJ(5) * t2331;
t2207 = -pkin(4) * t2443 + qJ(5) * t2386 - t2329 * t2306 + t2228;
t2303 = -g(3) * t2427 + t2381 * t2336 + t2377 * t2430;
t2390 = -t2442 * pkin(2) + t2366 * qJ(3) + t2303;
t2248 = t2341 * pkin(3) + (-pkin(9) * t2416 + t2337 * t2437) * t2372 + (t2441 + t2338) * t2367 + t2390;
t2392 = t2376 * t2341 - t2380 * t2366;
t2300 = -qJD(4) * t2329 - t2392;
t2222 = (t2329 * t2356 - t2300) * qJ(5) + t2278 * pkin(4) + t2248;
t2188 = t2373 * t2207 + t2371 * t2222 + t2315 * t2440;
t2227 = -t2376 * t2249 + t2380 * t2384;
t2292 = t2373 * t2300 + t2371 * t2386;
t2414 = t2300 * t2371 - t2373 * t2386;
t2415 = -t2375 * t2292 - t2379 * t2414;
t2257 = -t2292 - t2433;
t2411 = -qJDD(6) - t2299;
t2187 = -t2371 * t2207 + t2373 * t2222 + t2317 * t2440;
t2178 = pkin(5) * t2258 + t2257 * pkin(10) + t2187;
t2295 = pkin(5) * t2329 - pkin(10) * t2317;
t2181 = -pkin(5) * t2447 - pkin(10) * t2414 - t2329 * t2295 + t2188;
t2159 = t2178 * t2379 - t2181 * t2375;
t2160 = t2178 * t2375 + t2181 * t2379;
t2150 = t2159 * t2379 + t2160 * t2375;
t2151 = -t2159 * t2375 + t2160 * t2379;
t2145 = -t2150 * t2371 + t2151 * t2373;
t2204 = -t2386 * pkin(4) - t2443 * qJ(5) + t2331 * t2306 + qJDD(5) - t2227;
t2194 = pkin(5) * t2414 - pkin(10) * t2447 + t2317 * t2295 + t2204;
t2142 = t2145 * t2376 - t2194 * t2380;
t2144 = t2150 * t2373 + t2151 * t2371;
t2409 = -t2142 * t2381 + t2144 * t2377;
t2167 = -t2187 * t2371 + t2188 * t2373;
t2161 = t2167 * t2376 - t2204 * t2380;
t2166 = t2187 * t2373 + t2188 * t2371;
t2408 = -t2161 * t2381 + t2166 * t2377;
t2213 = -t2285 * t2421 + t2415;
t2387 = -t2379 * t2292 + t2375 * t2414;
t2215 = t2283 * t2421 + t2387;
t2191 = t2213 * t2375 + t2215 * t2379;
t2192 = t2213 * t2379 - t2215 * t2375;
t2169 = -t2191 * t2371 + t2192 * t2373;
t2231 = -t2448 - t2449;
t2164 = t2169 * t2376 - t2231 * t2380;
t2168 = t2191 * t2373 + t2192 * t2371;
t2407 = -t2164 * t2381 + t2168 * t2377;
t2235 = -t2411 - t2436;
t2242 = -t2445 - t2449;
t2201 = t2235 * t2379 + t2242 * t2375;
t2202 = -t2235 * t2375 + t2242 * t2379;
t2185 = -t2201 * t2371 + t2202 * t2373;
t2212 = t2285 * t2450 - t2415;
t2172 = t2185 * t2376 - t2212 * t2380;
t2184 = t2201 * t2373 + t2202 * t2371;
t2406 = -t2172 * t2381 + t2184 * t2377;
t2236 = t2411 - t2436;
t2260 = -t2445 - t2448;
t2216 = t2236 * t2375 + t2260 * t2379;
t2217 = t2236 * t2379 - t2260 * t2375;
t2190 = -t2216 * t2371 + t2217 * t2373;
t2214 = -t2283 * t2450 - t2387;
t2176 = t2190 * t2376 - t2214 * t2380;
t2189 = t2216 * t2373 + t2217 * t2371;
t2405 = -t2176 * t2381 + t2189 * t2377;
t2195 = t2227 * t2380 + t2228 * t2376;
t2404 = -t2195 * t2381 + t2248 * t2377;
t2255 = -t2414 + t2434;
t2230 = t2255 * t2373 - t2257 * t2371;
t2263 = -t2446 - t2447;
t2205 = t2230 * t2376 - t2263 * t2380;
t2229 = t2255 * t2371 + t2257 * t2373;
t2403 = -t2205 * t2381 + t2229 * t2377;
t2270 = -t2307 - t2447;
t2234 = -t2258 * t2371 + t2270 * t2373;
t2254 = t2414 + t2434;
t2208 = t2234 * t2376 - t2254 * t2380;
t2233 = t2258 * t2373 + t2270 * t2371;
t2402 = -t2208 * t2381 + t2233 * t2377;
t2259 = -t2299 - t2435;
t2287 = -t2307 - t2446;
t2238 = t2259 * t2373 - t2287 * t2371;
t2256 = t2292 - t2433;
t2210 = t2238 * t2376 - t2256 * t2380;
t2237 = t2259 * t2371 + t2287 * t2373;
t2401 = -t2210 * t2381 + t2237 * t2377;
t2279 = -t2299 + t2431;
t2281 = (qJD(4) - t2356) * t2329 + t2392;
t2243 = t2279 * t2376 + t2281 * t2380;
t2294 = -t2444 - t2307;
t2400 = -t2243 * t2381 + t2294 * t2377;
t2296 = t2386 - t2432;
t2301 = -t2307 - t2443;
t2261 = t2296 * t2380 + t2301 * t2376;
t2399 = -t2261 * t2381 + t2278 * t2377;
t2297 = -t2432 - t2386;
t2308 = -t2443 - t2444;
t2265 = t2297 * t2376 + t2308 * t2380;
t2280 = (-qJD(4) - t2356) * t2329 - t2392;
t2398 = -t2265 * t2381 + t2280 * t2377;
t2268 = t2337 * t2417 + t2367 * t2441 + t2390;
t2271 = (t2381 * g(3) + t2337 * t2438) * t2372 + t2389;
t2397 = t2268 * t2377 - t2271 * t2381;
t2302 = -g(3) * t2426 - t2413;
t2396 = t2302 * t2381 + t2303 * t2377;
t2319 = t2388 - t2412;
t2320 = t2341 + t2346;
t2395 = -t2319 * t2381 + t2320 * t2377;
t2352 = -qJDD(1) * t2378 - t2382 * t2383;
t2351 = qJDD(1) * t2382 - t2378 * t2383;
t2343 = -t2364 - t2365;
t2322 = -t2372 * t2335 - t2439;
t2293 = t2319 * t2377 + t2320 * t2381;
t2273 = -t2372 * t2343 + t2374 * t2395;
t2272 = t2374 * t2343 + t2372 * t2395;
t2269 = -t2341 * pkin(2) + t2372 * t2385 + t2410;
t2266 = t2297 * t2380 - t2308 * t2376;
t2264 = -t2302 * t2377 + t2303 * t2381;
t2262 = -t2296 * t2376 + t2301 * t2380;
t2253 = -t2372 * t2322 + t2374 * t2396;
t2252 = t2374 * t2322 + t2372 * t2396;
t2246 = -t2273 * t2378 + t2293 * t2382;
t2245 = t2273 * t2382 + t2293 * t2378;
t2244 = t2279 * t2380 - t2281 * t2376;
t2241 = t2265 * t2377 + t2280 * t2381;
t2240 = t2268 * t2381 + t2271 * t2377;
t2239 = t2261 * t2377 + t2278 * t2381;
t2232 = t2243 * t2377 + t2294 * t2381;
t2226 = -t2372 * t2269 + t2374 * t2397;
t2225 = t2374 * t2269 + t2372 * t2397;
t2224 = -t2372 * t2266 + t2374 * t2398;
t2223 = t2374 * t2266 + t2372 * t2398;
t2219 = -t2372 * t2262 + t2374 * t2399;
t2218 = t2374 * t2262 + t2372 * t2399;
t2211 = t2238 * t2380 + t2256 * t2376;
t2209 = t2234 * t2380 + t2254 * t2376;
t2206 = t2230 * t2380 + t2263 * t2376;
t2200 = -t2372 * t2244 + t2374 * t2400;
t2199 = t2374 * t2244 + t2372 * t2400;
t2198 = t2210 * t2377 + t2237 * t2381;
t2197 = t2208 * t2377 + t2233 * t2381;
t2196 = -t2227 * t2376 + t2228 * t2380;
t2193 = t2205 * t2377 + t2229 * t2381;
t2186 = t2195 * t2377 + t2248 * t2381;
t2183 = -t2372 * t2211 + t2374 * t2401;
t2182 = t2374 * t2211 + t2372 * t2401;
t2180 = -t2372 * t2209 + t2374 * t2402;
t2179 = t2374 * t2209 + t2372 * t2402;
t2177 = t2190 * t2380 + t2214 * t2376;
t2175 = -t2372 * t2206 + t2374 * t2403;
t2174 = t2374 * t2206 + t2372 * t2403;
t2173 = t2185 * t2380 + t2212 * t2376;
t2171 = -t2372 * t2196 + t2374 * t2404;
t2170 = t2374 * t2196 + t2372 * t2404;
t2165 = t2169 * t2380 + t2231 * t2376;
t2163 = t2176 * t2377 + t2189 * t2381;
t2162 = t2167 * t2380 + t2204 * t2376;
t2158 = t2172 * t2377 + t2184 * t2381;
t2157 = -t2372 * t2177 + t2374 * t2405;
t2156 = t2374 * t2177 + t2372 * t2405;
t2155 = t2164 * t2377 + t2168 * t2381;
t2154 = -t2372 * t2173 + t2374 * t2406;
t2153 = t2374 * t2173 + t2372 * t2406;
t2152 = t2161 * t2377 + t2166 * t2381;
t2149 = -t2372 * t2165 + t2374 * t2407;
t2148 = t2374 * t2165 + t2372 * t2407;
t2147 = -t2372 * t2162 + t2374 * t2408;
t2146 = t2374 * t2162 + t2372 * t2408;
t2143 = t2145 * t2380 + t2194 * t2376;
t2141 = t2142 * t2377 + t2144 * t2381;
t2140 = -t2372 * t2143 + t2374 * t2409;
t2139 = t2374 * t2143 + t2372 * t2409;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2352, -t2351, 0, -t2358 * t2378 + t2359 * t2382, 0, 0, 0, 0, 0, 0, -t2456, -t2458, t2246, -t2253 * t2378 + t2264 * t2382, 0, 0, 0, 0, 0, 0, t2246, t2456, t2458, -t2226 * t2378 + t2240 * t2382, 0, 0, 0, 0, 0, 0, -t2219 * t2378 + t2239 * t2382, -t2224 * t2378 + t2241 * t2382, -t2200 * t2378 + t2232 * t2382, -t2171 * t2378 + t2186 * t2382, 0, 0, 0, 0, 0, 0, -t2180 * t2378 + t2197 * t2382, -t2183 * t2378 + t2198 * t2382, -t2175 * t2378 + t2193 * t2382, -t2147 * t2378 + t2152 * t2382, 0, 0, 0, 0, 0, 0, -t2154 * t2378 + t2158 * t2382, -t2157 * t2378 + t2163 * t2382, -t2149 * t2378 + t2155 * t2382, -t2140 * t2378 + t2141 * t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2351, t2352, 0, t2358 * t2382 + t2359 * t2378, 0, 0, 0, 0, 0, 0, t2455, t2457, t2245, t2253 * t2382 + t2264 * t2378, 0, 0, 0, 0, 0, 0, t2245, -t2455, -t2457, t2226 * t2382 + t2240 * t2378, 0, 0, 0, 0, 0, 0, t2219 * t2382 + t2239 * t2378, t2224 * t2382 + t2241 * t2378, t2200 * t2382 + t2232 * t2378, t2171 * t2382 + t2186 * t2378, 0, 0, 0, 0, 0, 0, t2180 * t2382 + t2197 * t2378, t2183 * t2382 + t2198 * t2378, t2175 * t2382 + t2193 * t2378, t2147 * t2382 + t2152 * t2378, 0, 0, 0, 0, 0, 0, t2154 * t2382 + t2158 * t2378, t2157 * t2382 + t2163 * t2378, t2149 * t2382 + t2155 * t2378, t2140 * t2382 + t2141 * t2378; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2288, t2275, t2272, t2252, 0, 0, 0, 0, 0, 0, t2272, -t2288, -t2275, t2225, 0, 0, 0, 0, 0, 0, t2218, t2223, t2199, t2170, 0, 0, 0, 0, 0, 0, t2179, t2182, t2174, t2146, 0, 0, 0, 0, 0, 0, t2153, t2156, t2148, t2139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2383, -qJDD(1), 0, t2359, 0, 0, 0, 0, 0, 0, -t2313, -t2304, t2293, t2264, 0, 0, 0, 0, 0, 0, t2293, t2313, t2304, t2240, 0, 0, 0, 0, 0, 0, t2239, t2241, t2232, t2186, 0, 0, 0, 0, 0, 0, t2197, t2198, t2193, t2152, 0, 0, 0, 0, 0, 0, t2158, t2163, t2155, t2141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2383, 0, t2358, 0, 0, 0, 0, 0, 0, t2290, t2277, t2273, t2253, 0, 0, 0, 0, 0, 0, t2273, -t2290, -t2277, t2226, 0, 0, 0, 0, 0, 0, t2219, t2224, t2200, t2171, 0, 0, 0, 0, 0, 0, t2180, t2183, t2175, t2147, 0, 0, 0, 0, 0, 0, t2154, t2157, t2149, t2140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2288, t2275, t2272, t2252, 0, 0, 0, 0, 0, 0, t2272, -t2288, -t2275, t2225, 0, 0, 0, 0, 0, 0, t2218, t2223, t2199, t2170, 0, 0, 0, 0, 0, 0, t2179, t2182, t2174, t2146, 0, 0, 0, 0, 0, 0, t2153, t2156, t2148, t2139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2342, -t2340, t2320, t2303, 0, 0, 0, 0, 0, 0, t2320, -t2342, t2340, t2268, 0, 0, 0, 0, 0, 0, t2278, t2280, t2294, t2248, 0, 0, 0, 0, 0, 0, t2233, t2237, t2229, t2166, 0, 0, 0, 0, 0, 0, t2184, t2189, t2168, t2144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2339, t2326, -t2319, t2302, 0, 0, 0, 0, 0, 0, -t2319, -t2339, -t2326, -t2271, 0, 0, 0, 0, 0, 0, -t2261, -t2265, -t2243, -t2195, 0, 0, 0, 0, 0, 0, -t2208, -t2210, -t2205, -t2161, 0, 0, 0, 0, 0, 0, -t2172, -t2176, -t2164, -t2142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2321, t2318, t2343, t2322, 0, 0, 0, 0, 0, 0, t2343, t2321, -t2318, t2269, 0, 0, 0, 0, 0, 0, t2262, t2266, t2244, t2196, 0, 0, 0, 0, 0, 0, t2209, t2211, t2206, t2162, 0, 0, 0, 0, 0, 0, t2173, t2177, t2165, t2143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2343, t2321, -t2318, t2269, 0, 0, 0, 0, 0, 0, t2262, t2266, t2244, t2196, 0, 0, 0, 0, 0, 0, t2209, t2211, t2206, t2162, 0, 0, 0, 0, 0, 0, t2173, t2177, t2165, t2143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2320, t2342, -t2340, -t2268, 0, 0, 0, 0, 0, 0, -t2278, -t2280, -t2294, -t2248, 0, 0, 0, 0, 0, 0, -t2233, -t2237, -t2229, -t2166, 0, 0, 0, 0, 0, 0, -t2184, -t2189, -t2168, -t2144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2319, t2339, t2326, t2271, 0, 0, 0, 0, 0, 0, t2261, t2265, t2243, t2195, 0, 0, 0, 0, 0, 0, t2208, t2210, t2205, t2161, 0, 0, 0, 0, 0, 0, t2172, t2176, t2164, t2142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2301, t2297, t2279, t2228, 0, 0, 0, 0, 0, 0, t2234, t2238, t2230, t2167, 0, 0, 0, 0, 0, 0, t2185, t2190, t2169, t2145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2296, t2308, t2281, t2227, 0, 0, 0, 0, 0, 0, -t2254, -t2256, -t2263, -t2204, 0, 0, 0, 0, 0, 0, -t2212, -t2214, -t2231, -t2194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2278, t2280, t2294, t2248, 0, 0, 0, 0, 0, 0, t2233, t2237, t2229, t2166, 0, 0, 0, 0, 0, 0, t2184, t2189, t2168, t2144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2270, t2259, t2255, t2188, 0, 0, 0, 0, 0, 0, t2202, t2217, t2192, t2151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2258, t2287, t2257, t2187, 0, 0, 0, 0, 0, 0, t2201, t2216, t2191, t2150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2254, t2256, t2263, t2204, 0, 0, 0, 0, 0, 0, t2212, t2214, t2231, t2194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2242, t2236, t2213, t2160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2235, t2260, t2215, t2159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2212, t2214, t2231, t2194;];
f_new_reg  = t1;
