% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:55:48
% EndTime: 2019-03-09 11:56:08
% DurationCPUTime: 11.41s
% Computational Cost: add. (17185->698), mult. (39748->837), div. (0->0), fcn. (29743->14), ass. (0->320)
t269 = sin(pkin(10));
t273 = sin(qJ(2));
t276 = cos(qJ(2));
t423 = cos(pkin(10));
t220 = t269 * t276 + t273 * t423;
t207 = t220 * qJD(1);
t272 = sin(qJ(4));
t275 = cos(qJ(4));
t169 = qJD(2) * t275 - t272 * t207;
t170 = qJD(2) * t272 + t207 * t275;
t271 = sin(qJ(5));
t449 = cos(qJ(5));
t104 = -t449 * t169 + t170 * t271;
t419 = t104 * t207;
t206 = t220 * qJD(2);
t350 = t423 * t276;
t374 = t273 * qJDD(1);
t327 = -qJDD(1) * t350 + t269 * t374;
t156 = qJD(1) * t206 + t327;
t149 = qJDD(4) + t156;
t144 = qJDD(5) + t149;
t242 = qJD(1) * t350;
t380 = qJD(1) * t273;
t204 = t269 * t380 - t242;
t194 = qJD(4) + t204;
t189 = qJD(5) + t194;
t364 = t449 * t275;
t394 = t271 * t272;
t222 = -t364 + t394;
t365 = t449 * t272;
t223 = t271 * t275 + t365;
t456 = qJD(4) + qJD(5);
t162 = t456 * t223;
t470 = t223 * t204 + t162;
t452 = t144 * t222 + t189 * t470;
t486 = -t419 - t452;
t485 = -t452 + t419;
t357 = t449 * qJD(5);
t458 = t449 * qJD(4) + t357;
t384 = t222 * t204 - t275 * t458 + t394 * t456;
t315 = t271 * t169 + t170 * t449;
t378 = qJD(4) * t275;
t376 = qJD(1) * qJD(2);
t356 = t273 * t376;
t294 = qJDD(1) * t220 - t269 * t356;
t282 = qJD(2) * t242 + t294;
t467 = qJD(2) * qJD(4) + t282;
t366 = t207 * t378 + t272 * t467;
t319 = qJDD(2) * t275 - t366;
t379 = qJD(4) * t272;
t99 = -t272 * qJDD(2) + t207 * t379 - t275 * t467;
t43 = qJD(5) * t315 - t271 * t99 - t449 * t319;
t340 = t104 * t384 - t223 * t43;
t377 = qJD(5) * t271;
t42 = -t169 * t357 + t170 * t377 - t271 * t319 + t449 * t99;
t481 = -t42 * t222 + t315 * t470;
t484 = t481 - t340;
t483 = t481 + t340;
t330 = t223 * t144 - t189 * t384;
t415 = t315 * t207;
t482 = t330 + t415;
t476 = -t189 * t315 + t43;
t448 = pkin(2) * t269;
t250 = pkin(8) + t448;
t265 = qJ(2) + pkin(10);
t259 = sin(t265);
t274 = sin(qJ(1));
t277 = cos(qJ(1));
t333 = g(1) * t277 + g(2) * t274;
t260 = cos(t265);
t442 = g(3) * t260;
t303 = t259 * t333 - t442;
t270 = -qJ(3) - pkin(7);
t353 = qJD(2) * t270;
t202 = -qJD(3) * t273 + t276 * t353;
t233 = t270 * t273;
t148 = qJDD(2) * pkin(2) + qJD(1) * t202 + qJDD(1) * t233;
t201 = qJD(3) * t276 + t273 * t353;
t234 = t270 * t276;
t157 = qJD(1) * t201 - qJDD(1) * t234;
t383 = -t423 * t148 + t269 * t157;
t89 = -qJDD(2) * pkin(3) + t383;
t480 = qJD(4) * t250 * t194 - t303 + t89;
t406 = t204 * t272;
t479 = t379 + t406;
t438 = pkin(9) + t250;
t214 = t438 * t272;
t215 = t438 * t275;
t151 = -t271 * t214 + t215 * t449;
t268 = qJ(4) + qJ(5);
t262 = sin(t268);
t478 = -t144 * t151 - t262 * t303;
t225 = qJD(1) * t234;
t210 = t269 * t225;
t224 = qJD(1) * t233;
t431 = qJD(2) * pkin(2);
t213 = t224 + t431;
t154 = t213 * t423 + t210;
t140 = -qJD(2) * pkin(3) - t154;
t102 = -t169 * pkin(4) + t140;
t48 = t104 * pkin(5) - qJ(6) * t315 + t102;
t477 = t104 * t48;
t475 = t102 * t104;
t474 = t104 * t315;
t407 = t194 * t272;
t472 = t170 * t407;
t440 = t275 * pkin(4);
t257 = pkin(3) + t440;
t278 = -pkin(9) - pkin(8);
t469 = t260 * t257 - t259 * t278;
t468 = -g(1) * t274 + g(2) * t277;
t310 = -t269 * t273 + t350;
t209 = t310 * qJD(2);
t313 = t209 * t272 + t220 * t378;
t451 = t315 ^ 2;
t359 = t104 ^ 2 - t451;
t465 = t104 * t189 - t42;
t68 = pkin(5) * t315 + qJ(6) * t104;
t352 = qJD(4) * t438;
t200 = t272 * t352;
t338 = t275 * t352;
t127 = pkin(2) * t380 + pkin(3) * t207 + pkin(8) * t204;
t159 = t224 * t423 + t210;
t86 = t275 * t127 - t159 * t272;
t65 = pkin(9) * t204 * t275 + pkin(4) * t207 + t86;
t87 = t272 * t127 + t275 * t159;
t73 = pkin(9) * t406 + t87;
t433 = -qJD(5) * t151 + (-t338 - t65) * t449 + (t200 + t73) * t271;
t439 = t276 * pkin(2);
t258 = pkin(1) + t439;
t230 = -qJD(1) * t258 + qJD(3);
t116 = pkin(3) * t204 - pkin(8) * t207 + t230;
t351 = t423 * t225;
t155 = t269 * t213 - t351;
t141 = qJD(2) * pkin(8) + t155;
t372 = pkin(2) * t356 + qJDD(3);
t373 = t276 * qJDD(1);
t421 = qJDD(1) * pkin(1);
t78 = -pkin(2) * t373 + t156 * pkin(3) - pkin(8) * t282 + t372 - t421;
t94 = t269 * t148 + t423 * t157;
t90 = qJDD(2) * pkin(8) + t94;
t24 = t116 * t378 - t141 * t379 + t272 * t78 + t275 * t90;
t76 = t275 * t116 - t141 * t272;
t324 = -t194 * t76 + t24;
t158 = t224 * t269 - t351;
t337 = pkin(4) * t479 - t158;
t132 = t144 * qJ(6);
t179 = t189 * qJD(6);
t460 = t132 + t179;
t153 = -pkin(3) * t310 - pkin(8) * t220 - t258;
t168 = t269 * t233 - t234 * t423;
t160 = t275 * t168;
t101 = t272 * t153 + t160;
t457 = t207 * qJD(2);
t134 = t144 * pkin(5);
t455 = t134 - qJDD(6);
t263 = cos(t268);
t396 = t263 * t277;
t397 = t262 * t274;
t175 = t260 * t397 + t396;
t387 = t277 * t262;
t390 = t274 * t263;
t177 = t260 * t387 - t390;
t75 = t275 * t78;
t77 = t116 * t272 + t141 * t275;
t25 = -qJD(4) * t77 - t272 * t90 + t75;
t15 = pkin(4) * t149 + pkin(9) * t99 + t25;
t19 = pkin(9) * t319 + t24;
t66 = -pkin(9) * t170 + t76;
t57 = pkin(4) * t194 + t66;
t67 = pkin(9) * t169 + t77;
t349 = -t449 * t15 + t271 * t19 + t67 * t357 + t57 * t377;
t400 = t259 * t262;
t299 = g(1) * t177 + g(2) * t175 + g(3) * t400 - t349;
t285 = t315 * t48 - t299 - t455;
t453 = -t102 * t315 + t299;
t443 = g(3) * t259;
t304 = t260 * t333 + t443;
t126 = t201 * t423 + t269 * t202;
t371 = t273 * t431;
t128 = pkin(3) * t206 - pkin(8) * t209 + t371;
t347 = -t126 * t272 + t275 * t128;
t403 = t209 * t275;
t39 = -pkin(9) * t403 + pkin(4) * t206 + (-t160 + (pkin(9) * t220 - t153) * t272) * qJD(4) + t347;
t100 = t275 * t153 - t168 * t272;
t401 = t220 * t275;
t72 = -pkin(4) * t310 - pkin(9) * t401 + t100;
t402 = t220 * t272;
t83 = -pkin(9) * t402 + t101;
t437 = t271 * t72 + t449 * t83;
t49 = t275 * t126 + t272 * t128 + t153 * t378 - t168 * t379;
t45 = -pkin(9) * t313 + t49;
t9 = -qJD(5) * t437 - t271 * t45 + t39 * t449;
t450 = t207 ^ 2;
t447 = pkin(2) * t273;
t441 = g(3) * t276;
t35 = t271 * t65 + t449 * t73;
t436 = pkin(5) * t470 + qJ(6) * t384 - qJD(6) * t223 + t337;
t28 = qJ(6) * t207 + t35;
t314 = -t214 * t449 - t271 * t215;
t91 = qJD(5) * t314 - t200 * t449 - t271 * t338;
t435 = t91 - t28;
t434 = t91 - t35;
t432 = t207 * pkin(5) - t433;
t369 = t449 * t67;
t27 = t271 * t57 + t369;
t430 = t189 * t27;
t428 = t194 * t77;
t427 = t271 * t67;
t426 = t99 * t272;
t96 = t272 * t319;
t425 = t169 * t378 + t96;
t32 = t449 * t66 - t427;
t424 = pkin(4) * t357 + qJD(6) - t32;
t422 = pkin(7) * qJDD(1);
t413 = t169 * t204;
t412 = t169 * t207;
t411 = t170 * t169;
t410 = t170 * t207;
t408 = t189 * t207;
t405 = t207 * t204;
t399 = t259 * t263;
t395 = t270 * t277;
t393 = t272 * t149;
t392 = t272 * t274;
t391 = t272 * t277;
t389 = t274 * t275;
t133 = t275 * t149;
t388 = t275 * t277;
t26 = t449 * t57 - t427;
t386 = qJD(6) - t26;
t266 = t273 ^ 2;
t267 = t276 ^ 2;
t382 = t266 - t267;
t381 = t266 + t267;
t368 = t220 * t394;
t280 = qJD(1) ^ 2;
t367 = t273 * t280 * t276;
t363 = t423 * pkin(2);
t362 = t220 * t379;
t3 = t271 * t15 + t449 * t19 + t57 * t357 - t67 * t377;
t178 = t260 * t396 + t397;
t348 = -t177 * pkin(5) + qJ(6) * t178;
t125 = t201 * t269 - t423 * t202;
t167 = -t423 * t233 - t234 * t269;
t237 = t277 * t258;
t346 = -t270 * t274 + t237;
t344 = t194 * t275;
t343 = t276 * t356;
t31 = t271 * t66 + t369;
t342 = pkin(4) * t377 - t31;
t341 = t468 * t259;
t252 = -t363 - pkin(3);
t336 = pkin(3) * t260 + pkin(8) * t259;
t335 = g(1) * t175 - g(2) * t177;
t176 = t260 * t390 - t387;
t334 = g(1) * t176 - g(2) * t178;
t124 = pkin(4) * t402 + t167;
t329 = -t260 * t278 - t447;
t328 = pkin(5) * t263 + qJ(6) * t262;
t135 = t223 * t220;
t59 = t209 * t365 - t271 * t362 - qJD(5) * t368 + (t209 * t271 + t220 * t458) * t275;
t326 = t104 * t59 + t135 * t43;
t325 = -t272 * t77 - t275 * t76;
t88 = pkin(4) * t313 + t125;
t321 = -t194 * t479 + t133;
t320 = t439 + t469;
t46 = -t271 * t83 + t449 * t72;
t316 = -0.2e1 * pkin(1) * t376 - pkin(7) * qJDD(2);
t8 = t271 * t39 + t72 * t357 - t377 * t83 + t449 * t45;
t312 = -t362 + t403;
t311 = t104 * t470 + t222 * t43;
t232 = t252 - t440;
t309 = t140 * t194 - t250 * t149;
t307 = t319 * t275;
t192 = -qJDD(1) * t258 + t372;
t305 = t144 * t314 - t263 * t442 + (g(1) * t396 + g(2) * t390) * t259;
t300 = g(1) * t178 + g(2) * t176 + g(3) * t399 - t3;
t298 = pkin(4) * t392 + t277 * t469 + t346;
t279 = qJD(2) ^ 2;
t297 = -pkin(7) * t279 + 0.2e1 * t421 - t468;
t296 = pkin(1) * t280 + t333 - t422;
t136 = t220 * t364 - t368;
t58 = t162 * t220 + t209 * t222;
t295 = t104 * t58 + t135 * t42 - t136 * t43 - t315 * t59;
t293 = t104 * t206 + t135 * t144 + t189 * t59 - t310 * t43;
t292 = pkin(4) * t391 - t395 + (-t258 - t469) * t274;
t290 = t189 * t26 + t300;
t289 = -g(2) * (-t175 * pkin(5) + qJ(6) * t176) - g(3) * (-pkin(5) * t400 + qJ(6) * t399);
t51 = -pkin(4) * t319 + t89;
t286 = -t91 * t104 - t151 * t43 + t314 * t42 - t304;
t284 = g(2) * t388 + t272 * t304;
t256 = -pkin(4) * t449 - pkin(5);
t251 = pkin(4) * t271 + qJ(6);
t247 = pkin(4) * t389;
t203 = t204 ^ 2;
t198 = t260 * t388 + t392;
t197 = -t260 * t391 + t389;
t196 = -t260 * t389 + t391;
t195 = t260 * t392 + t388;
t137 = t222 * pkin(5) - t223 * qJ(6) + t232;
t80 = -t144 * t310 + t189 * t206;
t60 = pkin(5) * t135 - qJ(6) * t136 + t124;
t53 = pkin(4) * t170 + t68;
t50 = -qJD(4) * t101 + t347;
t41 = pkin(5) * t310 - t46;
t40 = -qJ(6) * t310 + t437;
t33 = t330 - t415;
t23 = t189 * qJ(6) + t27;
t20 = -t189 * pkin(5) + t386;
t16 = pkin(5) * t59 + qJ(6) * t58 - qJD(6) * t136 + t88;
t12 = -t223 * t42 - t315 * t384;
t11 = -t136 * t42 - t315 * t58;
t10 = t136 * t144 - t189 * t58 + t206 * t315 + t310 * t42;
t7 = t43 * pkin(5) + t42 * qJ(6) - qJD(6) * t315 + t51;
t6 = -t206 * pkin(5) - t9;
t5 = qJ(6) * t206 - qJD(6) * t310 + t8;
t2 = t349 - t455;
t1 = t3 + t460;
t4 = [0, 0, 0, 0, 0, qJDD(1), -t468, t333, 0, 0, qJDD(1) * t266 + 0.2e1 * t343, 0.2e1 * t273 * t373 - 0.2e1 * t376 * t382, qJDD(2) * t273 + t276 * t279, qJDD(1) * t267 - 0.2e1 * t343, qJDD(2) * t276 - t273 * t279, 0, t273 * t316 + t276 * t297, -t273 * t297 + t276 * t316, 0.2e1 * t381 * t422 - t333, -g(1) * (-pkin(1) * t274 + pkin(7) * t277) - g(2) * (pkin(1) * t277 + pkin(7) * t274) + (pkin(7) ^ 2 * t381 + pkin(1) ^ 2) * qJDD(1), t207 * t209 + t220 * t282, -t220 * t156 - t209 * t204 - t207 * t206 + t282 * t310, qJD(2) * t209 + qJDD(2) * t220, -t156 * t310 + t204 * t206, -qJD(2) * t206 + qJDD(2) * t310, 0, -qJDD(2) * t167 - t156 * t258 - t192 * t310 + t206 * t230 - t468 * t260 + (t204 * t447 - t125) * qJD(2), -t126 * qJD(2) - t168 * qJDD(2) + t192 * t220 + t207 * t371 + t230 * t209 - t258 * t282 + t341, t125 * t207 - t126 * t204 - t154 * t209 - t155 * t206 - t168 * t156 + t167 * t282 + t220 * t383 + t310 * t94 - t333, t94 * t168 + t155 * t126 + t383 * t167 - t154 * t125 - t192 * t258 + t230 * t371 - g(1) * (-t258 * t274 - t395) - g(2) * t346, t170 * t312 - t401 * t99 (t169 * t275 - t170 * t272) * t209 + (t307 + t426 + (-t169 * t272 - t170 * t275) * qJD(4)) * t220, t133 * t220 + t170 * t206 + t194 * t312 + t310 * t99, -t169 * t313 - t220 * t96, t169 * t206 - t194 * t313 - t220 * t393 - t310 * t319, -t149 * t310 + t194 * t206, -g(1) * t196 - g(2) * t198 + t100 * t149 - t125 * t169 + t140 * t313 - t167 * t319 + t50 * t194 + t76 * t206 - t25 * t310 + t402 * t89, -g(1) * t195 - g(2) * t197 - t101 * t149 + t125 * t170 + t140 * t312 - t167 * t99 - t194 * t49 - t206 * t77 + t24 * t310 + t401 * t89, t49 * t169 + t101 * t319 - t50 * t170 + t100 * t99 + t325 * t209 + (-t24 * t272 - t25 * t275 + (t272 * t76 - t275 * t77) * qJD(4)) * t220 - t341, -g(2) * t237 + t25 * t100 + t24 * t101 + t140 * t125 + t89 * t167 + t77 * t49 + t76 * t50 + (g(1) * t270 - g(2) * t336) * t277 + (-g(1) * (-t258 - t336) + g(2) * t270) * t274, t11, t295, t10, t326, -t293, t80, t102 * t59 + t104 * t88 + t124 * t43 + t135 * t51 + t144 * t46 + t189 * t9 + t206 * t26 + t310 * t349 + t334, -t102 * t58 - t124 * t42 + t136 * t51 - t144 * t437 - t189 * t8 - t206 * t27 + t3 * t310 + t315 * t88 - t335, -t104 * t8 - t135 * t3 + t136 * t349 + t26 * t58 - t27 * t59 - t315 * t9 + t42 * t46 - t43 * t437 - t341, -g(1) * t292 - g(2) * t298 + t102 * t88 + t51 * t124 + t26 * t9 + t27 * t8 + t3 * t437 - t349 * t46, t11, t10, -t295, t80, t293, t326, t104 * t16 + t135 * t7 - t144 * t41 - t189 * t6 + t2 * t310 - t20 * t206 + t43 * t60 + t48 * t59 + t334, -t1 * t135 - t104 * t5 + t136 * t2 - t20 * t58 - t23 * t59 + t315 * t6 - t40 * t43 - t41 * t42 - t341, -t1 * t310 - t136 * t7 + t144 * t40 - t16 * t315 + t189 * t5 + t206 * t23 + t42 * t60 + t48 * t58 + t335, t1 * t40 + t23 * t5 + t7 * t60 + t48 * t16 + t2 * t41 + t20 * t6 - g(1) * (-pkin(5) * t176 - qJ(6) * t175 + t292) - g(2) * (pkin(5) * t178 + qJ(6) * t177 + t298); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, t382 * t280, t374, t367, t373, qJDD(2), t273 * t296 - t441, g(3) * t273 + t276 * t296, 0, 0, t405, -t203 + t450 (t242 + t204) * qJD(2) + t294, -t405, -t327, qJDD(2), t158 * qJD(2) - t230 * t207 + (qJDD(2) * t423 - t204 * t380) * pkin(2) + t303 - t383, qJD(2) * t159 + t204 * t230 + (-qJDD(2) * t269 - t207 * t380) * pkin(2) + t304 - t94, -t156 * t448 - t282 * t363 - (-t155 + t158) * t207 + (t159 - t154) * t204, t154 * t158 - t155 * t159 + (-t423 * t383 - t441 + t269 * t94 + (-qJD(1) * t230 + t333) * t273) * pkin(2), t170 * t344 - t426 (-t99 + t413) * t275 - t472 + t425, t194 * t344 + t393 - t410, -t169 * t407 + t307, t321 - t412, -t194 * t207, t252 * t366 - t86 * t194 - t76 * t207 + t158 * t169 + t309 * t272 + (-t252 * qJDD(2) - t480) * t275, -t158 * t170 + t194 * t87 + t207 * t77 - t252 * t99 + t272 * t480 + t309 * t275, -t87 * t169 + t86 * t170 + ((qJD(4) * t170 + t319) * t250 + t324) * t275 + (-t77 * t204 - t250 * t99 - t25 + (-t169 * t250 - t77) * qJD(4)) * t272 - t304, t89 * t252 - t77 * t87 - t76 * t86 - t140 * t158 - g(3) * (t336 + t439) + (qJD(4) * t325 + t24 * t275 - t25 * t272) * t250 + t333 * (pkin(3) * t259 - pkin(8) * t260 + t447) t12, -t484, t33, t311, t485, -t408, t102 * t470 + t104 * t337 + t189 * t433 - t207 * t26 + t222 * t51 + t232 * t43 + t305, -t102 * t384 - t189 * t434 + t207 * t27 + t223 * t51 - t232 * t42 + t315 * t337 + t478, t104 * t35 - t222 * t3 + t223 * t349 + t26 * t384 - t27 * t470 - t315 * t433 + t286, -g(3) * t320 + t102 * t337 - t349 * t314 + t3 * t151 + t51 * t232 + t26 * t433 + t27 * t434 + t333 * (t257 * t259 - t329) t12, t33, t484, -t408, -t485, t311, t104 * t436 + t137 * t43 - t189 * t432 + t20 * t207 + t222 * t7 + t470 * t48 + t305, -t1 * t222 + t104 * t28 + t2 * t223 - t20 * t384 - t23 * t470 + t315 * t432 + t286, t137 * t42 + t189 * t435 - t207 * t23 - t223 * t7 - t315 * t436 + t384 * t48 - t478, t1 * t151 + t7 * t137 - t2 * t314 - g(3) * (t260 * t328 + t320) + t436 * t48 + t435 * t23 + t432 * t20 + t333 * (-(-t257 - t328) * t259 - t329); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t327 + 0.2e1 * t457 (t242 - t204) * qJD(2) + t294, -t203 - t450, t154 * t207 + t155 * t204 + t192 + t468, 0, 0, 0, 0, 0, 0, t321 + t412, -t194 ^ 2 * t275 - t393 - t410 (t99 + t413) * t275 + t472 + t425, -t140 * t207 + (t25 + t428) * t275 + t324 * t272 + t468, 0, 0, 0, 0, 0, 0, t486, -t482, t483, -t102 * t207 + t222 * t349 + t223 * t3 - t26 * t470 - t27 * t384 + t468, 0, 0, 0, 0, 0, 0, t486, t483, t482, t1 * t223 + t2 * t222 + t20 * t470 - t207 * t48 - t23 * t384 + t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t411, -t169 ^ 2 + t170 ^ 2, -t169 * t194 - t99, t411, t170 * t194 + t319, t149, -t141 * t378 - g(1) * t197 + g(2) * t195 - t140 * t170 + t428 + t75 + (-qJD(4) * t116 + t443 - t90) * t272, g(1) * t198 - g(2) * t196 - t140 * t169 + t275 * t443 - t324, 0, 0, t474, -t359, t465, -t474, -t476, t144, t31 * t189 + (-t104 * t170 + t144 * t449 - t189 * t377) * pkin(4) + t453, t475 + t32 * t189 + (-t144 * t271 - t170 * t315 - t189 * t357) * pkin(4) + t300, t27 * t315 + t32 * t104 - t104 * t26 - t31 * t315 + (t449 * t42 - t271 * t43 + (-t104 * t449 + t271 * t315) * qJD(5)) * pkin(4), -g(1) * t247 + t26 * t31 - t27 * t32 + (-t349 * t449 - t102 * t170 + t3 * t271 + (-t26 * t271 + t27 * t449) * qJD(5) + t284) * pkin(4), t474, t465, t359, t144, t476, -t474, -t104 * t53 - t144 * t256 - t189 * t342 - t285, -t251 * t43 - t256 * t42 + (t23 + t342) * t315 + (-t424 + t20) * t104, t144 * t251 + t189 * t424 + t315 * t53 - t300 + t460 - t477, t1 * t251 + t2 * t256 - t48 * t53 - t20 * t31 - g(1) * (t247 + t348) + t424 * t23 + (t20 * t377 + t284) * pkin(4) + t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, -t359, t465, -t474, -t476, t144, t430 + t453, t290 + t475, 0, 0, t474, t465, t359, t144, t476, -t474, -t104 * t68 + t134 - t285 + t430, pkin(5) * t42 - qJ(6) * t43 + (t23 - t27) * t315 + (t20 - t386) * t104, t315 * t68 + 0.2e1 * t132 + 0.2e1 * t179 - t290 - t477, -t2 * pkin(5) - g(1) * t348 + t1 * qJ(6) - t20 * t27 + t23 * t386 - t48 * t68 + t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(4) - qJDD(5) - t327 + t474 - t457, t465, -t189 ^ 2 - t451, -t189 * t23 + t285;];
tau_reg  = t4;
