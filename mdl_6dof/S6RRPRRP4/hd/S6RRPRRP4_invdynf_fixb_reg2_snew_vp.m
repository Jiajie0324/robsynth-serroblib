% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:43:37
% EndTime: 2019-05-06 17:43:48
% DurationCPUTime: 11.86s
% Computational Cost: add. (44868->320), mult. (102727->401), div. (0->0), fcn. (75128->10), ass. (0->230)
t2558 = cos(qJ(2));
t2596 = qJD(1) * t2558;
t2581 = qJD(2) * t2596;
t2554 = sin(qJ(2));
t2583 = t2554 * qJDD(1);
t2525 = t2581 + t2583;
t2543 = t2558 * qJDD(1);
t2597 = qJD(1) * t2554;
t2582 = qJD(2) * t2597;
t2526 = t2543 - t2582;
t2549 = sin(pkin(10));
t2550 = cos(pkin(10));
t2577 = t2525 * t2549 - t2550 * t2526;
t2576 = qJDD(4) + t2577;
t2571 = qJDD(5) + t2576;
t2518 = t2549 * t2596 + t2550 * t2597;
t2553 = sin(qJ(4));
t2557 = cos(qJ(4));
t2499 = -t2557 * qJD(2) + t2518 * t2553;
t2500 = qJD(2) * t2553 + t2518 * t2557;
t2552 = sin(qJ(5));
t2556 = cos(qJ(5));
t2477 = t2499 * t2556 + t2500 * t2552;
t2479 = -t2499 * t2552 + t2500 * t2556;
t2592 = t2477 * t2479;
t2436 = t2571 + t2592;
t2476 = t2479 ^ 2;
t2516 = t2549 * t2597 - t2550 * t2596;
t2515 = qJD(4) + t2516;
t2510 = qJD(5) + t2515;
t2602 = t2510 ^ 2;
t2609 = -t2476 - t2602;
t2394 = t2436 * t2552 - t2556 * t2609;
t2396 = t2436 * t2556 + t2552 * t2609;
t2387 = t2394 * t2553 - t2396 * t2557;
t2497 = t2550 * t2525 + t2549 * t2526;
t2574 = -t2553 * qJDD(2) - t2557 * t2497;
t2468 = -qJD(4) * t2499 - t2574;
t2575 = t2557 * qJDD(2) - t2553 * t2497;
t2568 = -qJD(4) * t2500 + t2575;
t2564 = -t2477 * qJD(5) + t2556 * t2468 + t2552 * t2568;
t2591 = t2477 * t2510;
t2563 = t2564 - t2591;
t2359 = t2387 * t2549 - t2550 * t2563;
t2361 = t2387 * t2550 + t2549 * t2563;
t2334 = t2359 * t2554 - t2361 * t2558;
t2367 = t2394 * t2557 + t2396 * t2553;
t2555 = sin(qJ(1));
t2559 = cos(qJ(1));
t2633 = t2334 * t2555 - t2367 * t2559;
t2632 = t2334 * t2559 + t2367 * t2555;
t2336 = t2359 * t2558 + t2361 * t2554;
t2406 = t2564 + t2591;
t2579 = t2552 * t2468 - t2556 * t2568;
t2569 = (-qJD(5) + t2510) * t2479 - t2579;
t2606 = t2406 * t2552 + t2556 * t2569;
t2607 = -t2556 * t2406 + t2552 * t2569;
t2612 = t2553 * t2606 + t2557 * t2607;
t2446 = t2477 ^ 2;
t2426 = t2476 + t2446;
t2613 = -t2553 * t2607 + t2557 * t2606;
t2618 = -t2426 * t2549 + t2550 * t2613;
t2619 = t2426 * t2550 + t2549 * t2613;
t2623 = -t2554 * t2619 + t2558 * t2618;
t2629 = t2555 * t2623 - t2559 * t2612;
t2628 = t2555 * t2612 + t2559 * t2623;
t2437 = t2571 - t2592;
t2608 = -t2602 - t2446;
t2614 = -t2437 * t2552 + t2556 * t2608;
t2615 = t2556 * t2437 + t2552 * t2608;
t2617 = -t2553 * t2615 + t2557 * t2614;
t2627 = t2549 * t2617;
t2626 = t2550 * t2617;
t2616 = t2553 * t2614 + t2557 * t2615;
t2625 = t2555 * t2616;
t2624 = t2559 * t2616;
t2622 = t2554 * t2618 + t2558 * t2619;
t2514 = qJD(2) * t2516;
t2488 = t2514 - t2497;
t2547 = t2558 ^ 2;
t2560 = qJD(1) ^ 2;
t2572 = qJD(2) * pkin(2) - qJ(3) * t2597;
t2534 = t2555 * g(1) - t2559 * g(2);
t2573 = qJDD(1) * pkin(1) + t2534;
t2483 = t2526 * pkin(2) + (qJ(3) * t2547 + pkin(7)) * t2560 - t2572 * t2597 - qJDD(3) + t2573;
t2605 = qJD(2) ^ 2;
t2604 = t2499 ^ 2;
t2603 = t2500 ^ 2;
t2601 = t2515 ^ 2;
t2600 = t2516 ^ 2;
t2599 = t2518 ^ 2;
t2598 = -2 * qJD(3);
t2595 = qJD(2) * t2518;
t2590 = t2499 * t2500;
t2589 = t2515 * t2499;
t2588 = t2516 * t2518;
t2587 = t2547 * t2560;
t2586 = t2554 * t2560;
t2585 = qJD(4) - t2515;
t2535 = -g(1) * t2559 - g(2) * t2555;
t2567 = -pkin(1) * t2560 + qJDD(1) * pkin(7) + t2535;
t2506 = -t2554 * g(3) + t2558 * t2567;
t2480 = -pkin(2) * t2587 + t2526 * qJ(3) - qJD(2) * t2572 + t2506;
t2565 = t2554 * t2567;
t2561 = -t2565 - t2525 * qJ(3) + qJDD(2) * pkin(2) + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2586 - g(3)) * t2558;
t2440 = t2550 * t2480 + t2516 * t2598 + t2549 * t2561;
t2493 = pkin(3) * t2516 - pkin(8) * t2518;
t2424 = -pkin(3) * t2605 + qJDD(2) * pkin(8) - t2493 * t2516 + t2440;
t2485 = t2577 + t2595;
t2432 = t2485 * pkin(3) + pkin(8) * t2488 - t2483;
t2391 = t2557 * t2424 + t2553 * t2432;
t2489 = pkin(4) * t2515 - pkin(9) * t2500;
t2384 = -pkin(4) * t2604 + pkin(9) * t2568 - t2515 * t2489 + t2391;
t2390 = -t2553 * t2424 + t2557 * t2432;
t2455 = t2576 - t2590;
t2562 = (-t2468 - t2589) * pkin(9) + t2455 * pkin(4) + t2390;
t2351 = t2556 * t2384 + t2552 * t2562;
t2546 = t2554 ^ 2;
t2584 = t2546 + t2547;
t2350 = -t2384 * t2552 + t2556 * t2562;
t2578 = t2549 * t2480 - t2550 * t2561;
t2570 = -qJD(5) * t2479 - t2579;
t2423 = -qJDD(2) * pkin(3) - t2605 * pkin(8) + ((2 * qJD(3)) + t2493) * t2518 + t2578;
t2389 = -t2568 * pkin(4) - t2604 * pkin(9) + t2500 * t2489 + t2423;
t2541 = t2558 * t2586;
t2540 = -t2587 - t2605;
t2539 = -t2546 * t2560 - t2605;
t2533 = -qJDD(2) + t2541;
t2532 = qJDD(2) + t2541;
t2531 = t2584 * t2560;
t2530 = -qJDD(1) * t2555 - t2559 * t2560;
t2529 = qJDD(1) * t2559 - t2555 * t2560;
t2528 = t2584 * qJDD(1);
t2527 = t2543 - 0.2e1 * t2582;
t2524 = 0.2e1 * t2581 + t2583;
t2522 = t2560 * pkin(7) + t2573;
t2508 = -t2599 - t2605;
t2505 = -t2558 * g(3) - t2565;
t2504 = t2533 * t2558 - t2539 * t2554;
t2503 = -t2532 * t2554 + t2540 * t2558;
t2502 = t2533 * t2554 + t2539 * t2558;
t2501 = t2532 * t2558 + t2540 * t2554;
t2496 = -qJDD(2) - t2588;
t2495 = qJDD(2) - t2588;
t2494 = -t2600 - t2605;
t2487 = -t2514 - t2497;
t2486 = -t2577 + t2595;
t2484 = -t2599 - t2600;
t2482 = -t2505 * t2554 + t2506 * t2558;
t2481 = t2505 * t2558 + t2506 * t2554;
t2471 = -t2601 - t2603;
t2470 = t2496 * t2550 - t2508 * t2549;
t2469 = t2496 * t2549 + t2508 * t2550;
t2466 = -t2601 - t2604;
t2460 = -t2603 - t2604;
t2458 = t2494 * t2550 - t2495 * t2549;
t2457 = t2494 * t2549 + t2495 * t2550;
t2456 = -t2576 - t2590;
t2452 = t2486 * t2550 - t2487 * t2549;
t2451 = t2486 * t2549 + t2487 * t2550;
t2450 = t2499 * t2585 + t2574;
t2449 = t2468 - t2589;
t2448 = -t2500 * t2585 + t2575;
t2447 = (qJD(4) + t2515) * t2500 - t2575;
t2445 = pkin(5) * t2477 - qJ(6) * t2479;
t2444 = -t2469 * t2554 + t2470 * t2558;
t2443 = t2469 * t2558 + t2470 * t2554;
t2439 = t2518 * t2598 - t2578;
t2434 = t2456 * t2557 - t2471 * t2553;
t2433 = t2456 * t2553 + t2471 * t2557;
t2430 = -t2455 * t2553 + t2466 * t2557;
t2429 = t2455 * t2557 + t2466 * t2553;
t2428 = -t2457 * t2554 + t2458 * t2558;
t2427 = t2457 * t2558 + t2458 * t2554;
t2419 = -t2451 * t2554 + t2452 * t2558;
t2418 = t2451 * t2558 + t2452 * t2554;
t2417 = t2448 * t2557 - t2450 * t2553;
t2416 = t2448 * t2553 + t2450 * t2557;
t2411 = t2434 * t2550 + t2449 * t2549;
t2410 = t2434 * t2549 - t2449 * t2550;
t2404 = t2510 * t2479 - t2570;
t2403 = (qJD(5) + t2510) * t2479 + t2579;
t2402 = t2430 * t2550 + t2447 * t2549;
t2401 = t2430 * t2549 - t2447 * t2550;
t2400 = -t2439 * t2549 + t2440 * t2550;
t2399 = t2439 * t2550 + t2440 * t2549;
t2393 = t2417 * t2550 + t2460 * t2549;
t2392 = t2417 * t2549 - t2460 * t2550;
t2382 = -t2410 * t2554 + t2411 * t2558;
t2381 = t2410 * t2558 + t2411 * t2554;
t2374 = -t2401 * t2554 + t2402 * t2558;
t2373 = t2401 * t2558 + t2402 * t2554;
t2372 = -t2399 * t2554 + t2400 * t2558;
t2371 = t2399 * t2558 + t2400 * t2554;
t2366 = -t2392 * t2554 + t2393 * t2558;
t2365 = t2392 * t2558 + t2393 * t2554;
t2364 = -t2390 * t2553 + t2391 * t2557;
t2363 = t2390 * t2557 + t2391 * t2553;
t2362 = t2404 * t2549 + t2626;
t2360 = -t2404 * t2550 + t2627;
t2358 = t2403 * t2549 + t2626;
t2356 = -t2403 * t2550 + t2627;
t2354 = t2364 * t2550 + t2423 * t2549;
t2353 = t2364 * t2549 - t2423 * t2550;
t2352 = -t2570 * pkin(5) + (pkin(5) * t2510 - (2 * qJD(6))) * t2479 + t2389 - t2563 * qJ(6);
t2341 = -pkin(5) * t2571 - qJ(6) * t2602 + t2445 * t2479 + qJDD(6) - t2350;
t2340 = -pkin(5) * t2602 + qJ(6) * t2571 + 0.2e1 * qJD(6) * t2510 - t2477 * t2445 + t2351;
t2339 = -t2360 * t2554 + t2362 * t2558;
t2337 = t2360 * t2558 + t2362 * t2554;
t2335 = -t2356 * t2554 + t2358 * t2558;
t2333 = t2356 * t2558 + t2358 * t2554;
t2331 = -t2353 * t2554 + t2354 * t2558;
t2330 = t2353 * t2558 + t2354 * t2554;
t2329 = -t2350 * t2552 + t2351 * t2556;
t2328 = t2350 * t2556 + t2351 * t2552;
t2323 = t2340 * t2556 + t2341 * t2552;
t2322 = t2340 * t2552 - t2341 * t2556;
t2321 = -t2328 * t2553 + t2329 * t2557;
t2320 = t2328 * t2557 + t2329 * t2553;
t2319 = t2321 * t2550 + t2389 * t2549;
t2318 = t2321 * t2549 - t2389 * t2550;
t2317 = -t2322 * t2553 + t2323 * t2557;
t2316 = t2322 * t2557 + t2323 * t2553;
t2315 = t2317 * t2550 + t2352 * t2549;
t2314 = t2317 * t2549 - t2352 * t2550;
t2313 = -t2318 * t2554 + t2319 * t2558;
t2312 = t2318 * t2558 + t2319 * t2554;
t2311 = -t2314 * t2554 + t2315 * t2558;
t2310 = t2314 * t2558 + t2315 * t2554;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2530, -t2529, 0, -t2534 * t2555 + t2535 * t2559, 0, 0, 0, 0, 0, 0, t2503 * t2559 - t2527 * t2555, t2504 * t2559 + t2524 * t2555, t2528 * t2559 - t2531 * t2555, t2482 * t2559 - t2522 * t2555, 0, 0, 0, 0, 0, 0, t2428 * t2559 + t2485 * t2555, t2444 * t2559 - t2488 * t2555, t2419 * t2559 + t2484 * t2555, t2372 * t2559 - t2483 * t2555, 0, 0, 0, 0, 0, 0, t2374 * t2559 + t2429 * t2555, t2382 * t2559 + t2433 * t2555, t2366 * t2559 + t2416 * t2555, t2331 * t2559 + t2363 * t2555, 0, 0, 0, 0, 0, 0, t2335 * t2559 + t2625, -t2632, t2628, t2313 * t2559 + t2320 * t2555, 0, 0, 0, 0, 0, 0, t2339 * t2559 + t2625, t2628, t2632, t2311 * t2559 + t2316 * t2555; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2529, t2530, 0, t2534 * t2559 + t2535 * t2555, 0, 0, 0, 0, 0, 0, t2503 * t2555 + t2527 * t2559, t2504 * t2555 - t2524 * t2559, t2528 * t2555 + t2531 * t2559, t2482 * t2555 + t2522 * t2559, 0, 0, 0, 0, 0, 0, t2428 * t2555 - t2485 * t2559, t2444 * t2555 + t2488 * t2559, t2419 * t2555 - t2484 * t2559, t2372 * t2555 + t2483 * t2559, 0, 0, 0, 0, 0, 0, t2374 * t2555 - t2429 * t2559, t2382 * t2555 - t2433 * t2559, t2366 * t2555 - t2416 * t2559, t2331 * t2555 - t2363 * t2559, 0, 0, 0, 0, 0, 0, t2335 * t2555 - t2624, -t2633, t2629, t2313 * t2555 - t2320 * t2559, 0, 0, 0, 0, 0, 0, t2339 * t2555 - t2624, t2629, t2633, t2311 * t2555 - t2316 * t2559; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2501, t2502, 0, t2481, 0, 0, 0, 0, 0, 0, t2427, t2443, t2418, t2371, 0, 0, 0, 0, 0, 0, t2373, t2381, t2365, t2330, 0, 0, 0, 0, 0, 0, t2333, t2336, t2622, t2312, 0, 0, 0, 0, 0, 0, t2337, t2622, -t2336, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2560, -qJDD(1), 0, t2535, 0, 0, 0, 0, 0, 0, t2503, t2504, t2528, t2482, 0, 0, 0, 0, 0, 0, t2428, t2444, t2419, t2372, 0, 0, 0, 0, 0, 0, t2374, t2382, t2366, t2331, 0, 0, 0, 0, 0, 0, t2335, -t2334, t2623, t2313, 0, 0, 0, 0, 0, 0, t2339, t2623, t2334, t2311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2560, 0, t2534, 0, 0, 0, 0, 0, 0, t2527, -t2524, t2531, t2522, 0, 0, 0, 0, 0, 0, -t2485, t2488, -t2484, t2483, 0, 0, 0, 0, 0, 0, -t2429, -t2433, -t2416, -t2363, 0, 0, 0, 0, 0, 0, -t2616, t2367, -t2612, -t2320, 0, 0, 0, 0, 0, 0, -t2616, -t2612, -t2367, -t2316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2501, t2502, 0, t2481, 0, 0, 0, 0, 0, 0, t2427, t2443, t2418, t2371, 0, 0, 0, 0, 0, 0, t2373, t2381, t2365, t2330, 0, 0, 0, 0, 0, 0, t2333, t2336, t2622, t2312, 0, 0, 0, 0, 0, 0, t2337, t2622, -t2336, t2310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2540, t2533, t2543, t2506, 0, 0, 0, 0, 0, 0, t2458, t2470, t2452, t2400, 0, 0, 0, 0, 0, 0, t2402, t2411, t2393, t2354, 0, 0, 0, 0, 0, 0, t2358, t2361, t2618, t2319, 0, 0, 0, 0, 0, 0, t2362, t2618, -t2361, t2315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532, t2539, -t2583, t2505, 0, 0, 0, 0, 0, 0, t2457, t2469, t2451, t2399, 0, 0, 0, 0, 0, 0, t2401, t2410, t2392, t2353, 0, 0, 0, 0, 0, 0, t2356, t2359, t2619, t2318, 0, 0, 0, 0, 0, 0, t2360, t2619, -t2359, t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2527, t2524, -t2531, -t2522, 0, 0, 0, 0, 0, 0, t2485, -t2488, t2484, -t2483, 0, 0, 0, 0, 0, 0, t2429, t2433, t2416, t2363, 0, 0, 0, 0, 0, 0, t2616, -t2367, t2612, t2320, 0, 0, 0, 0, 0, 0, t2616, t2612, t2367, t2316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2494, t2496, t2486, t2440, 0, 0, 0, 0, 0, 0, t2430, t2434, t2417, t2364, 0, 0, 0, 0, 0, 0, t2617, t2387, t2613, t2321, 0, 0, 0, 0, 0, 0, t2617, t2613, -t2387, t2317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2495, t2508, t2487, t2439, 0, 0, 0, 0, 0, 0, -t2447, -t2449, -t2460, -t2423, 0, 0, 0, 0, 0, 0, -t2403, -t2563, t2426, -t2389, 0, 0, 0, 0, 0, 0, -t2404, t2426, t2563, -t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2485, -t2488, t2484, -t2483, 0, 0, 0, 0, 0, 0, t2429, t2433, t2416, t2363, 0, 0, 0, 0, 0, 0, t2616, -t2367, t2612, t2320, 0, 0, 0, 0, 0, 0, t2616, t2612, t2367, t2316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2466, t2456, t2448, t2391, 0, 0, 0, 0, 0, 0, t2614, -t2396, t2606, t2329, 0, 0, 0, 0, 0, 0, t2614, t2606, t2396, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2455, t2471, t2450, t2390, 0, 0, 0, 0, 0, 0, t2615, -t2394, t2607, t2328, 0, 0, 0, 0, 0, 0, t2615, t2607, t2394, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2447, t2449, t2460, t2423, 0, 0, 0, 0, 0, 0, t2403, t2563, -t2426, t2389, 0, 0, 0, 0, 0, 0, t2404, -t2426, -t2563, t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2608, -t2436, t2569, t2351, 0, 0, 0, 0, 0, 0, t2608, t2569, t2436, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2437, t2609, -t2406, t2350, 0, 0, 0, 0, 0, 0, t2437, -t2406, -t2609, -t2341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2403, t2563, -t2426, t2389, 0, 0, 0, 0, 0, 0, t2404, -t2426, -t2563, t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2608, t2569, t2436, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2404, -t2426, -t2563, t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2437, t2406, t2609, t2341;];
f_new_reg  = t1;
