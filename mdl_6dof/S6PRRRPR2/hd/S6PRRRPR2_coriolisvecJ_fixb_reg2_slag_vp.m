% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6PRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRRPR2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:08:58
% EndTime: 2019-03-08 23:09:16
% DurationCPUTime: 7.20s
% Computational Cost: add. (11099->489), mult. (27669->672), div. (0->0), fcn. (21445->12), ass. (0->267)
t240 = sin(qJ(2));
t234 = sin(pkin(6));
t314 = qJD(1) * t234;
t298 = t240 * t314;
t239 = sin(qJ(3));
t309 = qJD(3) * t239;
t255 = pkin(3) * t309 - t298;
t238 = sin(qJ(4));
t242 = cos(qJ(3));
t326 = t238 * t242;
t362 = cos(qJ(4));
t199 = t239 * t362 + t326;
t192 = t199 * qJD(2);
t230 = qJD(3) + qJD(4);
t233 = sin(pkin(12));
t235 = cos(pkin(12));
t169 = t192 * t235 + t230 * t233;
t237 = sin(qJ(6));
t241 = cos(qJ(6));
t181 = t233 * t192;
t370 = t230 * t235 - t181;
t263 = t241 * t370;
t105 = -t169 * t237 + t263;
t383 = t105 ^ 2;
t327 = t238 * t239;
t272 = t230 * t327;
t299 = t362 * t242;
t280 = qJD(3) * t299;
t290 = qJD(4) * t362;
t159 = -t242 * t290 + t272 - t280;
t160 = t230 * t199;
t382 = -pkin(4) * t160 - qJ(5) * t159 + qJD(5) * t199 - t255;
t217 = qJD(2) * t299;
t311 = qJD(2) * t239;
t295 = t238 * t311;
t190 = -t217 + t295;
t184 = qJD(6) + t190;
t381 = t105 * t184;
t365 = -pkin(9) - pkin(8);
t300 = qJD(3) * t365;
t201 = t239 * t300;
t259 = t299 - t327;
t243 = cos(qJ(2));
t292 = t243 * t314;
t208 = t365 * t239;
t209 = t365 * t242;
t369 = t208 * t362 + t209 * t238;
t322 = qJD(4) * t369 + t201 * t362 - t259 * t292 + t300 * t326;
t104 = t241 * t169 + t237 * t370;
t380 = t104 ^ 2;
t351 = -t233 * t322 - t235 * t382;
t350 = t233 * t382 - t235 * t322;
t325 = t241 * t235;
t367 = -t233 * t237 + t325;
t345 = t159 * t235;
t379 = pkin(5) * t160 + pkin(10) * t345 + t351;
t346 = t159 * t233;
t378 = -pkin(10) * t346 + t350;
t197 = t233 * t241 + t235 * t237;
t187 = t197 * qJD(6);
t376 = t190 * t197 + t187;
t368 = t367 * qJD(6);
t375 = t190 * t367 + t368;
t316 = t230 * t217;
t148 = qJD(2) * t272 - t316;
t347 = t148 * t233;
t374 = t169 * t190 - t347;
t330 = t235 * t148;
t373 = t190 * t370 - t330;
t203 = qJD(2) * pkin(8) + t298;
t286 = pkin(9) * qJD(2) + t203;
t267 = t286 * t239;
t236 = cos(pkin(6));
t329 = t236 * t242;
t215 = qJD(1) * t329;
t312 = qJD(2) * t234;
t289 = qJD(1) * t312;
t279 = t243 * t289;
t317 = qJD(3) * t215 + t242 * t279;
t122 = -qJD(3) * t267 + t317;
t313 = qJD(1) * t239;
t291 = t236 * t313;
t165 = t242 * t286 + t291;
t123 = -qJD(3) * t165 - t239 * t279;
t164 = t215 - t267;
t156 = qJD(3) * pkin(3) + t164;
t308 = qJD(4) * t238;
t283 = -t122 * t362 - t123 * t238 - t156 * t290 + t165 * t308;
t37 = qJD(5) * t230 - t283;
t149 = t160 * qJD(2);
t307 = qJD(2) * qJD(3);
t288 = t239 * t307;
t185 = pkin(3) * t288 + t240 * t289;
t71 = pkin(4) * t149 + qJ(5) * t148 - qJD(5) * t192 + t185;
t22 = -t233 * t37 + t235 * t71;
t23 = t233 * t71 + t235 * t37;
t270 = -t22 * t233 + t23 * t235;
t155 = t362 * t165;
t98 = t164 * t238 + t155;
t276 = pkin(3) * t308 - t98;
t372 = t148 * t197;
t174 = t208 * t238 - t209 * t362;
t321 = qJD(4) * t174 - t199 * t292 + t238 * t201 - t280 * t365;
t115 = t149 * t259;
t371 = t160 * t190 - t115;
t48 = t237 * (qJD(6) * t169 - t347) - qJD(6) * t263 + t148 * t325;
t18 = pkin(10) * t347 + t23;
t226 = -pkin(3) * t242 - pkin(2);
t182 = qJD(2) * t226 - t292;
t114 = t190 * pkin(4) - t192 * qJ(5) + t182;
t97 = t156 * t238 + t155;
t89 = qJ(5) * t230 + t97;
t52 = t114 * t235 - t233 * t89;
t35 = pkin(5) * t190 - pkin(10) * t169 + t52;
t53 = t114 * t233 + t235 * t89;
t42 = pkin(10) * t370 + t53;
t268 = t237 * t42 - t241 * t35;
t9 = pkin(5) * t149 + pkin(10) * t330 + t22;
t3 = -qJD(6) * t268 + t241 * t18 + t237 * t9;
t366 = t190 ^ 2;
t227 = t235 * pkin(10);
t151 = -pkin(4) * t259 - qJ(5) * t199 + t226;
t94 = t151 * t235 - t174 * t233;
t75 = -pkin(5) * t259 - t199 * t227 + t94;
t338 = t199 * t233;
t95 = t151 * t233 + t174 * t235;
t84 = -pkin(10) * t338 + t95;
t32 = -t237 * t84 + t241 * t75;
t364 = qJD(6) * t32 + t237 * t379 - t241 * t378;
t33 = t237 * t75 + t241 * t84;
t363 = -qJD(6) * t33 + t237 * t378 + t241 * t379;
t361 = t235 * pkin(5);
t222 = pkin(3) * t238 + qJ(5);
t194 = (-pkin(10) - t222) * t233;
t195 = t222 * t235 + t227;
t145 = t194 * t237 + t195 * t241;
t214 = pkin(3) * t290 + qJD(5);
t339 = t190 * t235;
t275 = pkin(5) * t192 + pkin(10) * t339;
t150 = pkin(4) * t192 + qJ(5) * t190;
t305 = pkin(3) * t311;
t132 = t150 + t305;
t154 = t238 * t165;
t99 = t164 * t362 - t154;
t63 = t132 * t235 - t233 * t99;
t47 = t275 + t63;
t340 = t190 * t233;
t306 = pkin(10) * t340;
t64 = t132 * t233 + t235 * t99;
t51 = t306 + t64;
t360 = qJD(6) * t145 + t197 * t214 - t237 * t51 + t241 * t47;
t144 = t194 * t241 - t195 * t237;
t359 = -qJD(6) * t144 - t214 * t367 + t237 * t47 + t241 * t51;
t358 = qJD(2) * pkin(2);
t333 = t234 * t240;
t188 = -t239 * t333 + t329;
t189 = t236 * t239 + t242 * t333;
t260 = t188 * t362 - t189 * t238;
t285 = t238 * t122 - t123 * t362;
t41 = qJD(4) * t97 + t285;
t356 = t41 * t260;
t355 = t41 * t369;
t206 = (-pkin(10) - qJ(5)) * t233;
t207 = qJ(5) * t235 + t227;
t166 = t206 * t241 - t207 * t237;
t96 = t156 * t362 - t154;
t69 = t150 * t235 - t233 * t96;
t50 = t275 + t69;
t70 = t150 * t233 + t235 * t96;
t54 = t306 + t70;
t354 = qJD(5) * t367 + qJD(6) * t166 - t237 * t50 - t241 * t54;
t167 = t206 * t237 + t207 * t241;
t353 = -qJD(5) * t197 - qJD(6) * t167 + t237 * t54 - t241 * t50;
t352 = -pkin(5) * t346 + t321;
t349 = t104 * t105;
t348 = t148 * t199;
t343 = t169 * t233;
t342 = t184 * t192;
t341 = t190 * t192;
t337 = t203 * t239;
t336 = t203 * t242;
t332 = t234 * t243;
t245 = qJD(2) ^ 2;
t331 = t234 * t245;
t244 = qJD(3) ^ 2;
t324 = t244 * t239;
t323 = t244 * t242;
t231 = t239 ^ 2;
t232 = t242 ^ 2;
t315 = t231 - t232;
t310 = qJD(2) * t240;
t302 = t240 * t331;
t301 = t239 * t245 * t242;
t297 = t234 * t310;
t296 = t243 * t312;
t287 = t53 * t192 + t233 * t41;
t282 = t239 * t296;
t281 = t242 * t296;
t225 = -pkin(3) * t362 - pkin(4);
t278 = t242 * t288;
t179 = pkin(5) * t340;
t277 = t179 + t276;
t204 = -t292 - t358;
t274 = -t204 - t292;
t271 = -t52 * t192 - t41 * t235;
t269 = -t233 * t52 + t235 * t53;
t17 = t237 * t35 + t241 * t42;
t266 = t148 * t369 + t41 * t199;
t265 = -t339 * t52 - t340 * t53 + t270;
t264 = t235 * t370;
t135 = t188 * t238 + t189 * t362;
t112 = -t135 * t233 - t235 * t332;
t113 = t135 * t235 - t233 * t332;
t65 = t112 * t241 - t113 * t237;
t66 = t112 * t237 + t113 * t241;
t261 = -t182 * t192 - t285;
t176 = t291 + t336;
t31 = -pkin(5) * t347 + t41;
t88 = -t230 * pkin(4) + qJD(5) - t96;
t74 = -pkin(5) * t370 + t88;
t258 = t192 * t268 - t31 * t367 + t376 * t74;
t257 = t17 * t192 + t31 * t197 + t375 * t74;
t256 = t182 * t190 + t283;
t254 = -t159 * t88 + t266;
t253 = -t148 * t259 - t149 * t199 + t159 * t190;
t4 = -qJD(6) * t17 - t237 * t18 + t241 * t9;
t252 = -t17 * t376 - t4 * t197 + t268 * t375 + t3 * t367;
t251 = t264 - t343;
t250 = qJD(3) * (-t274 - t358);
t249 = pkin(4) * t148 - qJ(5) * t149 + (-qJD(5) + t88) * t190;
t248 = -t225 * t148 - t222 * t149 + (-t214 + t88) * t190;
t142 = -t203 * t309 + t317;
t143 = -qJD(3) * t336 + (-qJD(3) * t236 - t296) * t313;
t175 = t215 - t337;
t246 = t142 * t242 - t143 * t239 + (-t175 * t242 - t176 * t239) * qJD(3);
t49 = qJD(6) * t104 - t372;
t229 = t235 ^ 2;
t228 = t233 ^ 2;
t223 = -pkin(4) - t361;
t205 = t225 - t361;
t163 = -qJD(3) * t189 - t282;
t162 = qJD(3) * t188 + t281;
t139 = t367 * t199;
t138 = t197 * t199;
t128 = pkin(5) * t338 - t369;
t116 = t192 ^ 2 - t366;
t108 = t316 + (t190 - t295) * t230;
t83 = -t179 + t97;
t80 = t373 * t233;
t79 = t374 * t235;
t73 = qJD(4) * t135 + t162 * t238 - t163 * t362;
t72 = qJD(4) * t260 + t162 * t362 + t163 * t238;
t62 = -t159 * t197 + t199 * t368;
t61 = t159 * t367 + t187 * t199;
t60 = t235 * t149 - t192 * t370 - t233 * t366;
t59 = t149 * t233 - t169 * t192 + t235 * t366;
t56 = t233 * t297 + t235 * t72;
t55 = -t233 * t72 + t235 * t297;
t38 = t251 * t190 + (t228 - t229) * t148;
t27 = -t105 * t192 + t149 * t367 - t184 * t376;
t26 = -t104 * t192 + t197 * t149 + t184 * t375;
t15 = -t105 * t376 - t367 * t49;
t14 = t104 * t375 - t48 * t197;
t11 = -qJD(6) * t66 - t237 * t56 + t241 * t55;
t10 = qJD(6) * t65 + t237 * t55 + t241 * t56;
t5 = -t104 * t376 + t105 * t375 - t197 * t49 - t367 * t48;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, -t243 * t331, 0, 0, 0, 0, 0, 0, 0, 0, -t242 * t302 + (t163 - t282) * qJD(3), t239 * t302 + (-t162 - t281) * qJD(3) (t162 * t242 - t163 * t239 + (-t188 * t242 - t189 * t239) * qJD(3)) * qJD(2), t142 * t189 + t143 * t188 + t176 * t162 + t175 * t163 + (t204 - t292) * t297, 0, 0, 0, 0, 0, 0, -t73 * t230 + (-t149 * t243 + t190 * t310) * t234, -t72 * t230 + (t148 * t243 + t192 * t310) * t234, -t135 * t149 + t148 * t260 - t190 * t72 + t192 * t73, -t356 - t283 * t135 + t97 * t72 - t96 * t73 + (t182 * t310 - t185 * t243) * t234, 0, 0, 0, 0, 0, 0, t112 * t149 + t190 * t55 + t260 * t347 - t370 * t73, -t113 * t149 + t169 * t73 - t190 * t56 + t260 * t330, t56 * t370 - t55 * t169 + (t112 * t235 + t113 * t233) * t148, t112 * t22 + t113 * t23 + t52 * t55 + t53 * t56 + t73 * t88 - t356, 0, 0, 0, 0, 0, 0, -t105 * t73 + t11 * t184 + t149 * t65 - t260 * t49, -t10 * t184 + t104 * t73 - t149 * t66 + t260 * t48, t10 * t105 - t104 * t11 + t48 * t65 - t49 * t66, t10 * t17 - t11 * t268 - t260 * t31 + t3 * t66 + t4 * t65 + t73 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t278, -0.2e1 * t315 * t307, t323, -0.2e1 * t278, -t324, 0, -pkin(8) * t323 + t239 * t250, pkin(8) * t324 + t242 * t250 (-t231 - t232) * t279 + t246 ((t175 * t239 - t176 * t242) * t243 + (-t204 - t358) * t240) * t314 + t246 * pkin(8), -t159 * t192 - t348, -t160 * t192 + t253, -t159 * t230, t371, -t160 * t230, 0, t226 * t149 + t182 * t160 - t185 * t259 + t190 * t255 - t230 * t321, -t226 * t148 - t182 * t159 + t185 * t199 + t192 * t255 - t230 * t322, -t174 * t149 + t96 * t159 - t97 * t160 - t190 * t322 + t192 * t321 - t259 * t283 + t266, -t174 * t283 + t182 * t255 + t185 * t226 - t321 * t96 + t322 * t97 - t355, -t169 * t345 - t229 * t348, -t159 * t251 + 0.2e1 * t330 * t338, t169 * t160 - t235 * t253, -t228 * t348 + t346 * t370, t160 * t370 + t233 * t253, t371, t94 * t149 + t52 * t160 + t351 * t190 - t22 * t259 + t254 * t233 - t321 * t370, -t95 * t149 - t53 * t160 + t169 * t321 + t190 * t350 + t23 * t259 + t235 * t254, t350 * t181 - t351 * t169 + (t148 * t94 + t159 * t52 - t199 * t22 - t230 * t350) * t235 + (t148 * t95 + t159 * t53 - t199 * t23) * t233, t22 * t94 + t23 * t95 + t321 * t88 - t350 * t53 + t351 * t52 - t355, -t104 * t61 - t139 * t48, -t104 * t62 - t105 * t61 + t138 * t48 - t139 * t49, t104 * t160 + t139 * t149 - t184 * t61 + t259 * t48, -t105 * t62 + t138 * t49, t105 * t160 - t138 * t149 - t184 * t62 + t259 * t49, t160 * t184 - t115, -t105 * t352 + t128 * t49 + t31 * t138 + t32 * t149 - t160 * t268 + t184 * t363 - t259 * t4 + t74 * t62, t104 * t352 - t128 * t48 + t31 * t139 - t33 * t149 - t17 * t160 - t184 * t364 + t259 * t3 - t74 * t61, -t104 * t363 + t105 * t364 - t3 * t138 - t4 * t139 - t17 * t62 - t268 * t61 + t32 * t48 - t33 * t49, t31 * t128 + t17 * t364 - t268 * t363 + t3 * t33 + t4 * t32 + t352 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t301, t315 * t245, 0, t301, 0, 0, t274 * t311, -t204 * t242 * qJD(2) + (t175 + t337) * qJD(3) - t317, 0, 0, t341, t116, t108, -t341, 0, 0, -t190 * t305 + t98 * t230 + (-t155 + (-pkin(3) * t230 - t156) * t238) * qJD(4) + t261, t99 * t230 + (-t192 * t311 - t230 * t290) * pkin(3) + t256 (t97 - t98) * t192 + (-t96 + t99) * t190 + (t362 * t148 - t149 * t238 + (-t190 * t362 + t192 * t238) * qJD(4)) * pkin(3), t96 * t98 - t97 * t99 + (-t182 * t311 - t362 * t41 - t238 * t283 + (-t238 * t96 + t362 * t97) * qJD(4)) * pkin(3), t79, t38, t59, -t80, t60, -t341, -t63 * t190 + t233 * t248 - t276 * t370 + t271, t169 * t276 + t64 * t190 + t235 * t248 + t287, t214 * t264 - t64 * t370 + (t214 * t233 + t63) * t169 + t265, t214 * t269 + t222 * t270 + t41 * t225 + t276 * t88 - t52 * t63 - t53 * t64, t14, t5, t26, t15, t27, -t342, -t105 * t277 + t144 * t149 - t184 * t360 + t205 * t49 + t258, t104 * t277 - t145 * t149 + t184 * t359 - t205 * t48 + t257, t104 * t360 - t105 * t359 + t144 * t48 - t145 * t49 + t252, t4 * t144 + t3 * t145 - t17 * t359 + t31 * t205 + t268 * t360 + t277 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t341, t116, t108, -t341, 0, 0, t261 + (-qJD(4) + t230) * t97, t230 * t96 + t256, 0, 0, t79, t38, t59, -t80, t60, -t341, -t69 * t190 + t233 * t249 + t370 * t97 + t271, -t97 * t169 + t70 * t190 + t235 * t249 + t287, -t70 * t370 + t69 * t169 + (t264 + t343) * qJD(5) + t265, -t41 * pkin(4) + qJ(5) * t270 + qJD(5) * t269 - t52 * t69 - t53 * t70 - t88 * t97, t14, t5, t26, t15, t27, -t342, t105 * t83 + t166 * t149 + t184 * t353 + t223 * t49 + t258, -t83 * t104 - t167 * t149 - t184 * t354 - t223 * t48 + t257, -t104 * t353 + t105 * t354 + t166 * t48 - t167 * t49 + t252, t4 * t166 + t3 * t167 + t17 * t354 + t31 * t223 - t268 * t353 - t74 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t374, t373, -t169 ^ 2 - t370 ^ 2, t169 * t52 - t370 * t53 + t41, 0, 0, 0, 0, 0, 0, t104 * t184 + t49, -t48 + t381, -t380 - t383, -t104 * t268 - t17 * t105 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t349, t380 - t383, -t48 - t381, t349, t372 + (-qJD(6) + t184) * t104, t149, -t74 * t104 + t17 * t184 + t4, -t105 * t74 - t184 * t268 - t3, 0, 0;];
tauc_reg  = t1;
