% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:09:06
% EndTime: 2019-03-08 23:09:27
% DurationCPUTime: 12.95s
% Computational Cost: add. (13981->693), mult. (32052->922), div. (0->0), fcn. (25386->18), ass. (0->338)
t299 = sin(qJ(2));
t292 = sin(pkin(6));
t402 = qJD(1) * t292;
t378 = t299 * t402;
t298 = sin(qJ(3));
t397 = qJD(3) * t298;
t324 = pkin(3) * t397 - t378;
t297 = sin(qJ(4));
t301 = cos(qJ(3));
t418 = t297 * t301;
t472 = cos(qJ(4));
t239 = t298 * t472 + t418;
t232 = t239 * qJD(2);
t287 = qJD(3) + qJD(4);
t291 = sin(pkin(12));
t293 = cos(pkin(12));
t192 = t232 * t293 + t287 * t291;
t296 = sin(qJ(6));
t300 = cos(qJ(6));
t218 = t291 * t232;
t482 = t287 * t293 - t218;
t337 = t300 * t482;
t119 = -t192 * t296 + t337;
t494 = t119 ^ 2;
t419 = t297 * t298;
t343 = t287 * t419;
t379 = t472 * t301;
t352 = qJD(3) * t379;
t370 = qJD(4) * t472;
t182 = -t301 * t370 + t343 - t352;
t183 = t287 * t239;
t493 = pkin(4) * t183 + qJ(5) * t182 - qJD(5) * t239 + t324;
t268 = qJD(2) * t379;
t399 = qJD(2) * t298;
t374 = t297 * t399;
t230 = -t268 + t374;
t221 = qJD(6) + t230;
t492 = t119 * t221;
t303 = -pkin(9) - pkin(8);
t380 = qJD(3) * t303;
t242 = t298 * t380;
t328 = t379 - t419;
t302 = cos(qJ(2));
t377 = t302 * t402;
t253 = t303 * t298;
t254 = t303 * t301;
t481 = t253 * t472 + t254 * t297;
t413 = qJD(4) * t481 + t242 * t472 - t328 * t377 + t380 * t418;
t118 = t192 * t300 + t296 * t482;
t491 = t118 ^ 2;
t451 = -t291 * t413 + t293 * t493;
t450 = t291 * t493 + t293 * t413;
t283 = t293 * pkin(10);
t490 = pkin(5) * t183 + t182 * t283 + t451;
t439 = t182 * t291;
t489 = -pkin(10) * t439 - t450;
t294 = cos(pkin(6));
t447 = sin(pkin(11));
t359 = t447 * t302;
t448 = cos(pkin(11));
t362 = t448 * t299;
t223 = t294 * t362 + t359;
t290 = qJ(3) + qJ(4);
t281 = sin(t290);
t282 = cos(t290);
t364 = t292 * t448;
t170 = t223 * t281 + t282 * t364;
t360 = t447 * t299;
t361 = t448 * t302;
t225 = -t294 * t360 + t361;
t363 = t292 * t447;
t172 = t225 * t281 - t282 * t363;
t425 = t292 * t299;
t213 = t281 * t425 - t282 * t294;
t326 = g(1) * t172 + g(2) * t170 + g(3) * t213;
t401 = qJD(1) * t294;
t263 = t301 * t401;
t243 = qJD(2) * pkin(8) + t378;
t358 = pkin(9) * qJD(2) + t243;
t187 = -t298 * t358 + t263;
t179 = qJD(3) * pkin(3) + t187;
t371 = t298 * t401;
t188 = t301 * t358 + t371;
t396 = qJD(4) * t297;
t394 = qJD(1) * qJD(2);
t368 = t302 * t394;
t445 = qJDD(2) * pkin(8);
t210 = t445 + (qJDD(1) * t299 + t368) * t292;
t392 = qJDD(1) * t294;
t261 = t301 * t392;
t94 = qJDD(3) * pkin(3) + t261 + (-pkin(9) * qJDD(2) - t210) * t298 - t188 * qJD(3);
t381 = qJD(3) * t263 + t210 * t301 + t298 * t392;
t122 = -t243 * t397 + t381;
t393 = qJD(2) * qJD(3);
t367 = t298 * t393;
t390 = t301 * qJDD(2);
t97 = (-t367 + t390) * pkin(9) + t122;
t37 = -t179 * t396 - t188 * t370 - t297 * t97 + t472 * t94;
t284 = qJDD(3) + qJDD(4);
t477 = -pkin(4) * t284 + qJDD(5);
t34 = -t37 + t477;
t323 = t326 - t34;
t178 = t472 * t188;
t110 = t187 * t297 + t178;
t483 = -pkin(3) * t396 + t110;
t237 = t291 * t300 + t293 * t296;
t227 = t237 * qJD(6);
t487 = t230 * t237 + t227;
t416 = t300 * t293;
t479 = -t291 * t296 + t416;
t395 = qJD(6) * t296;
t480 = qJD(6) * t416 - t291 * t395;
t486 = t230 * t479 + t480;
t228 = t294 * t301 - t298 * t425;
t471 = pkin(3) * t297;
t274 = qJ(5) + t471;
t234 = (-pkin(10) - t274) * t291;
t431 = t274 * t293;
t235 = t283 + t431;
t158 = t234 * t300 - t235 * t296;
t354 = pkin(3) * t370;
t262 = t354 + qJD(5);
t435 = t230 * t293;
t348 = pkin(5) * t232 + pkin(10) * t435;
t177 = t297 * t188;
t111 = t187 * t472 - t177;
t165 = pkin(4) * t232 + qJ(5) * t230;
t386 = pkin(3) * t399;
t143 = t165 + t386;
t67 = -t111 * t291 + t143 * t293;
t53 = t348 + t67;
t436 = t230 * t291;
t389 = pkin(10) * t436;
t68 = t111 * t293 + t143 * t291;
t55 = t389 + t68;
t485 = qJD(6) * t158 + t262 * t479 - t296 * t53 - t300 * t55;
t159 = t234 * t296 + t235 * t300;
t455 = -qJD(6) * t159 - t237 * t262 + t296 * t55 - t300 * t53;
t355 = -t179 * t370 + t188 * t396 - t297 * t94 - t472 * t97;
t32 = qJ(5) * t284 + qJD(5) * t287 - t355;
t365 = qJDD(2) * t472;
t353 = -t268 * t287 - t297 * t390 - t298 * t365;
t131 = qJD(2) * t343 + t353;
t391 = t298 * qJDD(2);
t340 = t297 * t391 - t301 * t365;
t132 = qJD(2) * t183 + t340;
t470 = pkin(3) * t301;
t278 = pkin(2) + t470;
t369 = t299 * t394;
t423 = t292 * t302;
t341 = -qJDD(1) * t423 + t292 * t369;
t169 = pkin(3) * t367 - qJDD(2) * t278 + t341;
t48 = pkin(4) * t132 + qJ(5) * t131 - qJD(5) * t232 + t169;
t13 = t291 * t48 + t293 * t32;
t171 = t223 * t282 - t281 * t364;
t173 = t225 * t282 + t281 * t363;
t214 = t281 * t294 + t282 * t425;
t325 = g(1) * t173 + g(2) * t171 + g(3) * t214;
t484 = t13 * t293 - t325;
t212 = pkin(5) * t436;
t350 = t212 - t483;
t222 = -t294 * t361 + t360;
t224 = t294 * t359 + t362;
t346 = g(1) * t224 + g(2) * t222;
t322 = g(3) * t423 - t346;
t319 = t322 * t281;
t199 = t253 * t297 - t254 * t472;
t412 = qJD(4) * t199 - t239 * t377 + t242 * t297 - t303 * t352;
t219 = -qJD(2) * t278 - t377;
t130 = pkin(4) * t230 - qJ(5) * t232 + t219;
t106 = t179 * t297 + t178;
t95 = qJ(5) * t287 + t106;
t58 = t130 * t293 - t291 * t95;
t59 = t130 * t291 + t293 * t95;
t478 = -t291 * t58 + t293 * t59;
t304 = qJD(3) ^ 2;
t446 = qJDD(2) * pkin(2);
t209 = t341 - t446;
t331 = -t209 + t346;
t476 = -pkin(8) * t304 + t292 * (-g(3) * t302 + t369) + t331 + t446;
t112 = -t131 * t291 - t284 * t293;
t10 = -pkin(10) * t112 + t13;
t44 = pkin(5) * t230 - pkin(10) * t192 + t58;
t45 = pkin(10) * t482 + t59;
t339 = t296 * t45 - t300 * t44;
t113 = -t131 * t293 + t284 * t291;
t12 = -t291 * t32 + t293 * t48;
t9 = pkin(5) * t132 - pkin(10) * t113 + t12;
t3 = -t339 * qJD(6) + t300 * t10 + t296 * t9;
t475 = t230 ^ 2;
t168 = -pkin(4) * t328 - qJ(5) * t239 - t278;
t103 = t168 * t293 - t199 * t291;
t78 = -pkin(5) * t328 - t239 * t283 + t103;
t104 = t168 * t291 + t199 * t293;
t434 = t239 * t291;
t85 = -pkin(10) * t434 + t104;
t41 = -t296 * t85 + t300 * t78;
t474 = qJD(6) * t41 + t296 * t490 - t300 * t489;
t42 = t296 * t78 + t300 * t85;
t473 = -qJD(6) * t42 + t296 * t489 + t300 * t490;
t468 = pkin(5) * t112;
t467 = pkin(5) * t291;
t241 = t278 * t423;
t463 = g(3) * t241;
t462 = g(3) * t292;
t461 = t293 * pkin(5);
t295 = -pkin(10) - qJ(5);
t460 = qJD(2) * pkin(2);
t457 = t58 * t232;
t248 = t295 * t291;
t249 = qJ(5) * t293 + t283;
t189 = t248 * t300 - t249 * t296;
t105 = t179 * t472 - t177;
t73 = -t105 * t291 + t165 * t293;
t54 = t348 + t73;
t74 = t105 * t293 + t165 * t291;
t60 = t389 + t74;
t454 = qJD(5) * t479 + qJD(6) * t189 - t296 * t54 - t300 * t60;
t190 = t248 * t296 + t249 * t300;
t453 = -qJD(5) * t237 - qJD(6) * t190 + t296 * t60 - t300 * t54;
t91 = -t287 * pkin(4) + qJD(5) - t105;
t452 = -t262 + t91;
t449 = -pkin(5) * t439 + t412;
t444 = t106 * t287;
t443 = t112 * t293;
t442 = t113 * t291;
t441 = t118 * t119;
t440 = t132 * t291;
t438 = t221 * t232;
t437 = t230 * t232;
t433 = t243 * t298;
t432 = t274 * t291;
t286 = pkin(12) + qJ(6);
t279 = sin(t286);
t430 = t279 * t282;
t280 = cos(t286);
t429 = t280 * t282;
t428 = t282 * t302;
t424 = t292 * t301;
t422 = t293 * t132;
t417 = t299 * t303;
t415 = -qJD(5) + t91;
t414 = qJDD(1) - g(3);
t275 = pkin(4) + t461;
t409 = -t170 * t275 - t171 * t295;
t408 = -t172 * t275 - t173 * t295;
t407 = -t213 * t275 - t214 * t295;
t406 = -t222 * t278 - t223 * t303;
t405 = -t224 * t278 - t225 * t303;
t288 = t298 ^ 2;
t289 = t301 ^ 2;
t404 = t288 - t289;
t403 = t288 + t289;
t244 = -t377 - t460;
t400 = qJD(2) * t244;
t398 = qJD(2) * t299;
t388 = g(3) * t425;
t387 = t472 * pkin(3);
t305 = qJD(2) ^ 2;
t382 = t298 * t305 * t301;
t376 = t292 * t398;
t375 = qJD(2) * t423;
t366 = t302 * t393;
t357 = t112 * t300 + t296 * t113;
t277 = -t387 - pkin(4);
t351 = t301 * t367;
t349 = -pkin(3) * t225 * t298 + t363 * t470;
t345 = g(1) * t225 + g(2) * t223;
t342 = pkin(4) * t282 + qJ(5) * t281;
t21 = t296 * t44 + t300 * t45;
t338 = t293 * t482;
t229 = t294 * t298 + t299 * t424;
t149 = t228 * t297 + t229 * t472;
t127 = -t149 * t291 - t293 * t423;
t128 = t149 * t293 - t291 * t423;
t69 = t127 * t300 - t128 * t296;
t70 = t127 * t296 + t128 * t300;
t336 = t132 * t239 - t182 * t230;
t335 = -t132 * t328 + t183 * t230;
t334 = t275 * t282 - t281 * t295;
t333 = t228 * pkin(3);
t332 = qJDD(2) * t302 - t299 * t305;
t329 = t228 * t472 - t229 * t297;
t204 = t243 * t301 + t371;
t327 = t232 * t59 - t291 * t323;
t39 = -qJD(6) * t337 + t112 * t296 - t113 * t300 + t192 * t395;
t321 = -t192 * t291 + t338;
t320 = (-t223 * t298 - t301 * t364) * pkin(3);
t318 = t322 * t282;
t317 = -t182 * t91 + t239 * t34 - t345;
t316 = -t435 * t58 - t436 * t59 + t484;
t24 = t34 + t468;
t77 = -pkin(5) * t482 + t91;
t315 = t21 * t232 + t24 * t237 - t279 * t326 + t486 * t77;
t4 = -qJD(6) * t21 - t296 * t10 + t300 * t9;
t313 = t326 + t37;
t312 = -pkin(8) * qJDD(3) + (t244 + t377 - t460) * qJD(3);
t311 = -t219 * t232 + t313;
t310 = t219 * t230 + t325 + t355;
t40 = qJD(6) * t118 + t357;
t309 = -t313 + t477;
t308 = -t21 * t487 - t4 * t237 + t3 * t479 + t339 * t486 - t325;
t307 = t232 * t339 - t24 * t479 + t280 * t326 + t487 * t77;
t123 = -qJD(3) * t204 - t298 * t210 + t261;
t203 = t263 - t433;
t306 = t122 * t301 - t123 * t298 + (-t203 * t301 - t204 * t298) * qJD(3) - t345;
t247 = t277 - t461;
t208 = t213 * pkin(4);
t186 = -qJD(3) * t229 - t298 * t375;
t185 = qJD(3) * t228 + t301 * t375;
t167 = t172 * pkin(4);
t166 = t170 * pkin(4);
t153 = t479 * t239;
t152 = t237 * t239;
t140 = pkin(5) * t434 - t481;
t133 = t232 ^ 2 - t475;
t129 = qJDD(6) + t132;
t98 = -t353 + (t230 - t374) * t287;
t84 = -t212 + t106;
t76 = qJD(4) * t149 + t297 * t185 - t186 * t472;
t75 = qJD(4) * t329 + t185 * t472 + t186 * t297;
t72 = t192 * t435 + t442;
t71 = -t436 * t482 - t443;
t66 = -t182 * t237 + t239 * t480;
t65 = t182 * t479 + t227 * t239;
t62 = t291 * t376 + t293 * t75;
t61 = -t291 * t75 + t293 * t376;
t57 = -t232 * t482 - t291 * t475 + t422;
t56 = -t192 * t232 + t293 * t475 + t440;
t35 = -t112 * t291 + t113 * t293 + t230 * t321;
t30 = -t119 * t232 + t129 * t479 - t221 * t487;
t29 = -t118 * t232 + t129 * t237 + t221 * t486;
t17 = -qJD(6) * t70 - t296 * t62 + t300 * t61;
t16 = qJD(6) * t69 + t296 * t61 + t300 * t62;
t15 = -t119 * t487 - t40 * t479;
t14 = t118 * t486 - t237 * t39;
t5 = -t118 * t487 + t119 * t486 - t237 * t40 - t39 * t479;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t414, 0, 0, 0, 0, 0, 0, t332 * t292 (-qJDD(2) * t299 - t302 * t305) * t292, 0, -g(3) + (t294 ^ 2 + (t299 ^ 2 + t302 ^ 2) * t292 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, qJD(3) * t186 + qJDD(3) * t228 + (-t298 * t366 + t301 * t332) * t292, -qJD(3) * t185 - qJDD(3) * t229 + (-t298 * t332 - t301 * t366) * t292 (-t228 * t298 + t229 * t301) * qJDD(2) + (t185 * t301 - t186 * t298 + (-t228 * t301 - t229 * t298) * qJD(3)) * qJD(2), t122 * t229 + t123 * t228 + t185 * t204 + t186 * t203 - g(3) + (-t209 * t302 + t244 * t398) * t292, 0, 0, 0, 0, 0, 0, t329 * t284 - t287 * t76 + (-t132 * t302 + t230 * t398) * t292, -t149 * t284 - t287 * t75 + (t131 * t302 + t232 * t398) * t292, t131 * t329 - t132 * t149 - t230 * t75 + t232 * t76, -t105 * t76 + t106 * t75 + t329 * t37 - t149 * t355 - g(3) + (-t169 * t302 + t219 * t398) * t292, 0, 0, 0, 0, 0, 0, -t112 * t329 + t127 * t132 + t230 * t61 - t482 * t76, -t113 * t329 - t128 * t132 + t192 * t76 - t230 * t62, -t112 * t128 - t113 * t127 - t192 * t61 + t482 * t62, t12 * t127 + t128 * t13 - t329 * t34 + t58 * t61 + t59 * t62 + t76 * t91 - g(3), 0, 0, 0, 0, 0, 0, -t119 * t76 + t129 * t69 + t17 * t221 - t329 * t40, t118 * t76 - t129 * t70 - t16 * t221 + t329 * t39, -t118 * t17 + t119 * t16 + t39 * t69 - t40 * t70, t16 * t21 - t17 * t339 - t24 * t329 + t3 * t70 + t4 * t69 + t76 * t77 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t414 * t423 + t346, -t414 * t425 + t345, 0, 0, qJDD(2) * t288 + 0.2e1 * t351, 0.2e1 * t298 * t390 - 0.2e1 * t393 * t404, qJDD(3) * t298 + t301 * t304, qJDD(2) * t289 - 0.2e1 * t351, qJDD(3) * t301 - t298 * t304, 0, t298 * t312 + t301 * t476, -t298 * t476 + t301 * t312, t403 * t445 + (-g(3) * t299 - t368 * t403) * t292 + t306, t331 * pkin(2) + t306 * pkin(8) + (-g(3) * (pkin(2) * t302 + pkin(8) * t299) + (-t244 * t299 + (t203 * t298 - t204 * t301) * t302) * qJD(1)) * t292, -t131 * t239 - t182 * t232, -t131 * t328 - t183 * t232 - t336, -t182 * t287 + t239 * t284, t335, -t183 * t287 + t284 * t328, 0, -t132 * t278 - t169 * t328 + t183 * t219 + t230 * t324 + t284 * t481 - t287 * t412 - t318, t131 * t278 + t169 * t239 - t182 * t219 - t199 * t284 + t232 * t324 - t287 * t413 + t319, t105 * t182 - t106 * t183 + t131 * t481 - t132 * t199 - t230 * t413 + t232 * t412 - t239 * t37 - t328 * t355 - t345 - t388, -t355 * t199 + t37 * t481 - t169 * t278 - g(1) * t405 - g(2) * t406 - g(3) * (-t292 * t417 + t241) + t324 * t219 + t413 * t106 - t412 * t105 (t113 * t239 - t182 * t192) * t293 (-t442 - t443) * t239 - t321 * t182, -t113 * t328 + t183 * t192 + t293 * t336 (t112 * t239 + t182 * t482) * t291, t112 * t328 + t183 * t482 - t291 * t336, t335, t103 * t132 - t12 * t328 + t58 * t183 - t481 * t112 - t293 * t318 + (t317 - t388) * t291 + t451 * t230 - t412 * t482, -t104 * t132 - t481 * t113 + t13 * t328 - t59 * t183 - t346 * t291 * t282 + t317 * t293 - (-t291 * t428 + t293 * t299) * t462 - t450 * t230 + t412 * t192, -t104 * t112 - t103 * t113 + (-t12 * t293 - t13 * t291) * t239 - t451 * t192 + (t291 * t59 + t293 * t58) * t182 - t319 + t450 * t482, t13 * t104 + t12 * t103 - t34 * t481 - g(1) * (-t224 * t342 + t405) - g(2) * (-t222 * t342 + t406) - t463 + t412 * t91 + t450 * t59 + t451 * t58 - (t302 * t342 - t417) * t462, -t118 * t65 - t153 * t39, -t118 * t66 - t119 * t65 + t152 * t39 - t153 * t40, t118 * t183 + t129 * t153 - t221 * t65 + t328 * t39, -t119 * t66 + t152 * t40, t119 * t183 - t129 * t152 - t221 * t66 + t328 * t40, -t129 * t328 + t183 * t221, t41 * t129 - t4 * t328 - t339 * t183 + t140 * t40 + t24 * t152 + t77 * t66 - g(1) * (-t224 * t429 + t225 * t279) - g(2) * (-t222 * t429 + t223 * t279) - (t279 * t299 + t280 * t428) * t462 + t473 * t221 - t449 * t119, -t42 * t129 + t3 * t328 - t21 * t183 - t140 * t39 + t24 * t153 - t77 * t65 - g(1) * (t224 * t430 + t225 * t280) - g(2) * (t222 * t430 + t223 * t280) - (-t279 * t428 + t280 * t299) * t462 - t474 * t221 + t449 * t118, -t118 * t473 + t119 * t474 - t152 * t3 - t153 * t4 - t21 * t66 - t339 * t65 + t39 * t41 - t40 * t42 - t319, t3 * t42 + t4 * t41 + t24 * t140 - g(1) * (-t224 * t334 + t225 * t467 + t405) - g(2) * (-t222 * t334 + t223 * t467 + t406) - t463 + t449 * t77 + t474 * t21 - t473 * t339 - (t334 * t302 + (-t303 + t467) * t299) * t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t382, t404 * t305, t391, t382, t390, qJDD(3), -g(3) * t228 + t261 + (-g(1) * t447 + g(2) * t448) * t424 + (-t210 + t345 - t400) * t298, -t301 * t400 - g(1) * (-t225 * t301 - t298 * t363) - g(2) * (-t223 * t301 + t298 * t364) + g(3) * t229 + (t203 + t433) * qJD(3) - t381, 0, 0, t437, t133, t98, -t437, -t340, t284, t110 * t287 + (-t230 * t399 + t284 * t472 - t287 * t396) * pkin(3) + t311, t111 * t287 + (-t232 * t399 - t284 * t297 - t287 * t370) * pkin(3) + t310 (t106 - t110) * t232 + (-t105 + t111) * t230 + (t472 * t131 - t132 * t297 + (-t230 * t472 + t232 * t297) * qJD(4)) * pkin(3), -g(1) * t349 - g(2) * t320 - g(3) * t333 - t219 * t386 - t355 * t471 + t37 * t387 + (-t111 + t354) * t106 + t483 * t105, t72, t35, t56, t71, t57, -t437, -t132 * t432 + t277 * t112 - t457 - t483 * t218 + (t287 * t483 + t323) * t293 + (t291 * t452 - t67) * t230, -t274 * t422 + t113 * t277 - t483 * t192 + (t293 * t452 + t68) * t230 + t327, t262 * t338 - t112 * t431 - t68 * t482 + t67 * t192 + (t113 * t274 + t192 * t262 - t12) * t291 + t316, t13 * t431 - t12 * t432 + t34 * t277 - t59 * t68 - t58 * t67 - g(1) * (qJ(5) * t173 - t167 + t349) - g(2) * (qJ(5) * t171 - t166 + t320) - g(3) * (qJ(5) * t214 - t208 + t333) - t483 * t91 + t478 * t262, t14, t5, t29, t15, t30, -t438, -t119 * t350 + t129 * t158 + t221 * t455 + t247 * t40 + t307, t118 * t350 - t129 * t159 - t221 * t485 - t247 * t39 + t315, -t118 * t455 + t119 * t485 + t158 * t39 - t159 * t40 + t308, t3 * t159 + t4 * t158 + t24 * t247 - g(1) * (t349 + t408) - g(2) * (t320 + t409) - g(3) * (t333 + t407) + t350 * t77 + t485 * t21 - t455 * t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t437, t133, t98, -t437, -t340, t284, t311 + t444, t105 * t287 + t310, 0, 0, t72, t35, t56, t71, t57, -t437, -qJ(5) * t440 - pkin(4) * t112 - t106 * t218 - t457 + (t291 * t415 - t73) * t230 + (t323 + t444) * t293, -qJ(5) * t422 - pkin(4) * t113 - t106 * t192 + (t293 * t415 + t74) * t230 + t327, qJD(5) * t338 - qJ(5) * t443 - t74 * t482 + t73 * t192 + (qJ(5) * t113 + qJD(5) * t192 - t12) * t291 + t316, -t34 * pkin(4) + g(1) * t167 + g(2) * t166 + g(3) * t208 - t91 * t106 - t58 * t73 - t59 * t74 + t478 * qJD(5) + (-t12 * t291 + t484) * qJ(5), t14, t5, t29, t15, t30, -t438, t119 * t84 + t129 * t189 + t221 * t453 - t275 * t40 + t307, -t118 * t84 - t129 * t190 - t221 * t454 + t275 * t39 + t315, -t118 * t453 + t119 * t454 + t189 * t39 - t190 * t40 + t308, -g(1) * t408 - g(2) * t409 - g(3) * t407 + t4 * t189 + t3 * t190 + t21 * t454 - t24 * t275 - t339 * t453 - t77 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192 * t230 + t112, t230 * t482 + t113, -t192 ^ 2 - t482 ^ 2, t192 * t58 - t482 * t59 + t309, 0, 0, 0, 0, 0, 0, t118 * t221 + t40, -t39 + t492, -t491 - t494, -t118 * t339 - t119 * t21 + t309 + t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, t491 - t494, -t39 - t492, t441, -t357 + (-qJD(6) + t221) * t118, t129, t21 * t221 - t77 * t118 - g(1) * (-t173 * t279 + t224 * t280) - g(2) * (-t171 * t279 + t222 * t280) - g(3) * (-t214 * t279 - t280 * t423) + t4, -t339 * t221 - t77 * t119 - g(1) * (-t173 * t280 - t224 * t279) - g(2) * (-t171 * t280 - t222 * t279) - g(3) * (-t214 * t280 + t279 * t423) - t3, 0, 0;];
tau_reg  = t1;
