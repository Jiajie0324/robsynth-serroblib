% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 07:18
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRRPR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:16:35
% EndTime: 2019-05-05 07:16:51
% DurationCPUTime: 7.42s
% Computational Cost: add. (43645->505), mult. (88520->753), div. (0->0), fcn. (66278->14), ass. (0->309)
t291 = sin(pkin(12));
t298 = sin(qJ(3));
t301 = cos(qJ(4));
t297 = sin(qJ(4));
t302 = cos(qJ(3));
t344 = t297 * t302;
t261 = (t298 * t301 + t344) * qJD(2);
t287 = qJD(3) + qJD(4);
t293 = cos(pkin(12));
t243 = t261 * t291 - t293 * t287;
t245 = t261 * t293 + t287 * t291;
t216 = t245 * t243;
t336 = qJD(2) * qJD(3);
t325 = t302 * t336;
t335 = t298 * qJDD(2);
t265 = t325 + t335;
t284 = t302 * qJDD(2);
t326 = t298 * t336;
t314 = t284 - t326;
t317 = t265 * t297 - t301 * t314;
t219 = qJD(4) * t261 + t317;
t380 = -t216 + t219;
t390 = t291 * t380;
t389 = t293 * t380;
t296 = sin(qJ(6));
t300 = cos(qJ(6));
t210 = t300 * t243 + t245 * t296;
t212 = -t243 * t296 + t245 * t300;
t164 = t212 * t210;
t218 = qJDD(6) + t219;
t382 = -t164 + t218;
t388 = t296 * t382;
t338 = qJD(2) * t298;
t259 = -t301 * t302 * qJD(2) + t297 * t338;
t237 = t261 * t259;
t334 = qJDD(3) + qJDD(4);
t378 = -t237 + t334;
t387 = t297 * t378;
t386 = t300 * t382;
t385 = t301 * t378;
t292 = sin(pkin(6));
t294 = cos(pkin(6));
t363 = sin(pkin(11));
t364 = cos(pkin(11));
t312 = g(1) * t363 - g(2) * t364;
t310 = t294 * t312;
t339 = -g(3) + qJDD(1);
t384 = t292 * t339 + t310;
t269 = -g(1) * t364 - g(2) * t363;
t299 = sin(qJ(2));
t303 = cos(qJ(2));
t229 = t303 * t269 + t299 * t384;
t383 = qJDD(2) * pkin(8) + t229;
t374 = qJD(2) ^ 2;
t307 = -pkin(2) * t374 + t383;
t306 = t298 * t307;
t309 = -t292 * t312 + t294 * t339;
t273 = qJD(3) * pkin(3) - pkin(9) * t338;
t289 = t302 ^ 2;
t308 = t298 * t309;
t371 = pkin(9) * qJD(3);
t172 = t302 * t383 + t308 + t284 * pkin(9) - qJD(3) * t273 + (-t298 * t371 + (-pkin(2) * t302 - pkin(3) * t289) * qJD(2)) * qJD(2);
t342 = t301 * t172;
t361 = qJDD(3) * pkin(3);
t372 = t265 * pkin(9);
t132 = t342 + t297 * (-t306 + t361 - t372) + ((pkin(3) * t338 + t371) * qJD(2) + t309) * t344;
t234 = pkin(4) * t259 - qJ(5) * t261;
t375 = t287 ^ 2;
t108 = -pkin(4) * t375 + qJ(5) * t334 - t259 * t234 + t132;
t315 = t269 * t299 - t303 * t384;
t223 = -qJDD(2) * pkin(2) - t374 * pkin(8) + t315;
t286 = t289 * t374;
t193 = -t314 * pkin(3) - pkin(9) * t286 + t273 * t338 + t223;
t220 = -t259 * qJD(4) + t301 * t265 + t297 * t314;
t252 = t287 * t259;
t202 = -t252 + t220;
t130 = -t202 * qJ(5) + (t261 * t287 + t219) * pkin(4) + t193;
t80 = 0.2e1 * qJD(5) * t245 + t108 * t291 - t293 * t130;
t81 = -0.2e1 * qJD(5) * t243 + t293 * t108 + t291 * t130;
t42 = t291 * t80 + t293 * t81;
t213 = t293 * t220 + t291 * t334;
t318 = t220 * t291 - t293 * t334;
t139 = -t210 * qJD(6) + t300 * t213 - t296 * t318;
t254 = qJD(6) + t259;
t191 = t254 * t210;
t381 = -t191 + t139;
t226 = t259 * t243;
t178 = -t226 - t213;
t379 = -t226 + t213;
t320 = t213 * t296 + t300 * t318;
t118 = (qJD(6) - t254) * t212 + t320;
t207 = t210 ^ 2;
t208 = t212 ^ 2;
t377 = t243 ^ 2;
t242 = t245 ^ 2;
t253 = t254 ^ 2;
t376 = t259 ^ 2;
t258 = t261 ^ 2;
t373 = pkin(4) * t297;
t55 = pkin(5) * t380 + t178 * pkin(10) - t80;
t222 = pkin(5) * t259 - pkin(10) * t245;
t60 = -pkin(5) * t377 - pkin(10) * t318 - t259 * t222 + t81;
t28 = t296 * t60 - t300 * t55;
t29 = t296 * t55 + t300 * t60;
t16 = -t28 * t300 + t29 * t296;
t370 = t16 * t291;
t369 = t16 * t293;
t277 = t298 * t374 * t302;
t195 = -t302 * t309 + t306;
t305 = pkin(9) * t325 - t195 - t372;
t131 = t172 * t297 - t301 * (pkin(3) * t277 + t305 + t361);
t107 = -t334 * pkin(4) - t375 * qJ(5) + t234 * t261 + qJDD(5) + t131;
t89 = pkin(5) * t318 - pkin(10) * t377 + t222 * t245 + t107;
t368 = t296 * t89;
t90 = -t131 * t301 + t132 * t297;
t367 = t298 * t90;
t366 = t300 * t89;
t365 = -pkin(4) * t107 + qJ(5) * t42;
t146 = t164 + t218;
t360 = t146 * t296;
t359 = t146 * t300;
t180 = t216 + t219;
t358 = t180 * t291;
t357 = t180 * t293;
t356 = t193 * t297;
t355 = t193 * t301;
t354 = t219 * t297;
t232 = t237 + t334;
t353 = t232 * t297;
t352 = t232 * t301;
t351 = t245 * t259;
t350 = t254 * t296;
t349 = t254 * t300;
t348 = t259 * t291;
t347 = t259 * t293;
t346 = t287 * t297;
t345 = t287 * t301;
t101 = t291 * t107;
t102 = t293 * t107;
t270 = qJDD(3) + t277;
t343 = t298 * t270;
t271 = qJDD(3) - t277;
t341 = t302 * t271;
t333 = t297 * t164;
t332 = t301 * t164;
t331 = t297 * t216;
t330 = t301 * t216;
t214 = -t242 - t376;
t150 = -t214 * t291 - t357;
t329 = -pkin(4) * t379 + qJ(5) * t150 + t101;
t197 = -t376 - t377;
t144 = t197 * t293 - t390;
t173 = t318 + t351;
t328 = -pkin(4) * t173 + qJ(5) * t144 - t102;
t327 = -pkin(4) * t301 - pkin(3);
t17 = t28 * t296 + t300 * t29;
t141 = -t207 - t208;
t121 = t191 + t139;
t76 = -t118 * t300 + t121 * t296;
t11 = -pkin(5) * t141 + pkin(10) * t76 + t17;
t74 = -t118 * t296 - t121 * t300;
t13 = -pkin(10) * t74 - t16;
t38 = -t291 * t74 + t293 * t76;
t323 = -pkin(4) * t141 + qJ(5) * t38 + t293 * t11 + t291 * t13;
t117 = (qJD(6) + t254) * t212 + t320;
t162 = -t253 - t207;
t95 = t162 * t300 - t388;
t44 = -pkin(5) * t117 + pkin(10) * t95 - t366;
t94 = t162 * t296 + t386;
t53 = -pkin(10) * t94 + t368;
t63 = -t291 * t94 + t293 * t95;
t322 = -pkin(4) * t117 + qJ(5) * t63 + t291 * t53 + t293 * t44;
t182 = -t208 - t253;
t110 = -t182 * t296 - t359;
t46 = -pkin(5) * t381 + pkin(10) * t110 + t368;
t109 = t182 * t300 - t360;
t57 = -pkin(10) * t109 + t366;
t69 = -t109 * t291 + t110 * t293;
t321 = -pkin(4) * t381 + qJ(5) * t69 + t291 * t57 + t293 * t46;
t91 = t131 * t297 + t301 * t132;
t196 = t302 * t307 + t308;
t158 = t195 * t298 + t302 * t196;
t174 = t318 - t351;
t136 = -t174 * t293 - t178 * t291;
t186 = -t242 - t377;
t316 = -pkin(4) * t186 + qJ(5) * t136 + t42;
t266 = t284 - 0.2e1 * t326;
t41 = t291 * t81 - t293 * t80;
t30 = -t107 * t301 + t297 * t42;
t31 = t107 * t297 + t301 * t42;
t18 = -t298 * t30 + t302 * t31;
t15 = -pkin(5) * t89 + pkin(10) * t17;
t9 = t17 * t293 - t370;
t313 = -pkin(4) * t89 - pkin(10) * t370 + qJ(5) * t9 + t293 * t15;
t311 = (-qJD(4) + t287) * t261 - t317;
t304 = qJD(3) ^ 2;
t288 = t298 ^ 2;
t285 = t288 * t374;
t275 = -t286 - t304;
t274 = -t285 - t304;
t268 = t285 + t286;
t267 = (t288 + t289) * qJDD(2);
t264 = 0.2e1 * t325 + t335;
t250 = -t258 + t375;
t249 = t376 - t375;
t248 = -t258 - t375;
t247 = -t274 * t298 - t341;
t246 = t275 * t302 - t343;
t235 = t258 - t376;
t230 = -t376 - t375;
t225 = -t242 + t376;
t224 = -t376 + t377;
t221 = -t376 - t258;
t217 = t301 * t219;
t215 = -t242 + t377;
t205 = -t248 * t297 - t352;
t204 = t248 * t301 - t353;
t203 = t252 + t220;
t198 = (qJD(4) + t287) * t261 + t317;
t190 = t230 * t301 - t387;
t189 = t230 * t297 + t385;
t188 = -t208 + t253;
t187 = t207 - t253;
t184 = (-t243 * t293 + t245 * t291) * t259;
t183 = (-t243 * t291 - t245 * t293) * t259;
t168 = t213 * t293 - t245 * t348;
t167 = t213 * t291 + t245 * t347;
t166 = t243 * t347 + t291 * t318;
t165 = t243 * t348 - t293 * t318;
t163 = t208 - t207;
t161 = -t204 * t298 + t205 * t302;
t160 = t203 * t297 + t301 * t311;
t159 = -t203 * t301 + t297 * t311;
t157 = t224 * t293 - t358;
t156 = -t225 * t291 + t389;
t155 = t224 * t291 + t357;
t154 = t225 * t293 + t390;
t153 = (-t210 * t300 + t212 * t296) * t254;
t152 = (-t210 * t296 - t212 * t300) * t254;
t151 = -t189 * t298 + t190 * t302;
t149 = t214 * t293 - t358;
t143 = t197 * t291 + t389;
t138 = -qJD(6) * t212 - t320;
t137 = -t173 * t293 - t291 * t379;
t135 = -t173 * t291 + t293 * t379;
t134 = -t174 * t291 + t178 * t293;
t126 = t187 * t300 - t360;
t125 = -t188 * t296 + t386;
t124 = t187 * t296 + t359;
t123 = t188 * t300 + t388;
t114 = t139 * t300 - t212 * t350;
t113 = t139 * t296 + t212 * t349;
t112 = -t138 * t296 + t210 * t349;
t111 = t138 * t300 + t210 * t350;
t106 = t150 * t301 + t297 * t379;
t105 = t150 * t297 - t301 * t379;
t100 = t144 * t301 + t173 * t297;
t99 = t144 * t297 - t173 * t301;
t98 = -t159 * t298 + t160 * t302;
t97 = t136 * t301 + t186 * t297;
t96 = t136 * t297 - t186 * t301;
t93 = -t152 * t291 + t153 * t293;
t92 = t152 * t293 + t153 * t291;
t87 = -qJ(5) * t149 + t102;
t86 = -qJ(5) * t143 + t101;
t85 = -t124 * t291 + t126 * t293;
t84 = -t123 * t291 + t125 * t293;
t83 = t124 * t293 + t126 * t291;
t82 = t123 * t293 + t125 * t291;
t77 = -t117 * t300 - t296 * t381;
t75 = -t117 * t296 + t300 * t381;
t73 = -t113 * t291 + t114 * t293;
t72 = -t111 * t291 + t112 * t293;
t71 = t113 * t293 + t114 * t291;
t70 = t111 * t293 + t112 * t291;
t68 = t109 * t293 + t110 * t291;
t66 = -t105 * t298 + t106 * t302;
t65 = t100 * t302 - t298 * t99;
t64 = -t298 * t96 + t302 * t97;
t62 = t291 * t95 + t293 * t94;
t59 = -pkin(4) * t149 + t81;
t58 = -pkin(4) * t143 + t80;
t51 = t297 * t381 + t301 * t69;
t50 = t297 * t69 - t301 * t381;
t49 = t302 * t91 - t367;
t48 = t117 * t297 + t301 * t63;
t47 = -t117 * t301 + t297 * t63;
t39 = -t291 * t75 + t293 * t77;
t37 = t291 * t77 + t293 * t75;
t36 = t291 * t76 + t293 * t74;
t34 = t141 * t297 + t301 * t38;
t33 = -t141 * t301 + t297 * t38;
t32 = -qJ(5) * t134 - t41;
t26 = -pkin(4) * t36 - pkin(5) * t74;
t25 = -t298 * t50 + t302 * t51;
t24 = -t298 * t47 + t302 * t48;
t23 = -pkin(4) * t68 - pkin(5) * t109 + t29;
t22 = -qJ(5) * t68 - t291 * t46 + t293 * t57;
t21 = -pkin(4) * t62 - pkin(5) * t94 + t28;
t20 = -qJ(5) * t62 - t291 * t44 + t293 * t53;
t19 = -t298 * t33 + t302 * t34;
t8 = t17 * t291 + t369;
t6 = t297 * t89 + t301 * t9;
t5 = t297 * t9 - t301 * t89;
t4 = -qJ(5) * t36 - t11 * t291 + t13 * t293;
t3 = -pkin(4) * t8 - pkin(5) * t16;
t2 = -pkin(10) * t369 - qJ(5) * t8 - t15 * t291;
t1 = -t298 * t5 + t302 * t6;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t339, 0, 0, 0, 0, 0, 0, (qJDD(2) * t303 - t299 * t374) * t292, (-qJDD(2) * t299 - t303 * t374) * t292, 0, t294 ^ 2 * t339 + (t299 * t229 - t303 * t315 - t310) * t292, 0, 0, 0, 0, 0, 0, t294 * (t270 * t302 + t275 * t298) + (t246 * t299 + t266 * t303) * t292, t294 * (-t271 * t298 + t274 * t302) + (t247 * t299 - t264 * t303) * t292, (t267 * t299 + t268 * t303) * t292, t294 * (-t195 * t302 + t196 * t298) + (t158 * t299 - t223 * t303) * t292, 0, 0, 0, 0, 0, 0, t294 * (t189 * t302 + t190 * t298) + (t151 * t299 - t198 * t303) * t292, t294 * (t204 * t302 + t205 * t298) + (t161 * t299 - t202 * t303) * t292, t294 * (t159 * t302 + t160 * t298) + (-t221 * t303 + t299 * t98) * t292, t294 * (t298 * t91 + t302 * t90) + (-t193 * t303 + t299 * t49) * t292, 0, 0, 0, 0, 0, 0, t294 * (t100 * t298 + t302 * t99) + (-t143 * t303 + t299 * t65) * t292, t294 * (t105 * t302 + t106 * t298) + (-t149 * t303 + t299 * t66) * t292, t294 * (t298 * t97 + t302 * t96) + (-t134 * t303 + t299 * t64) * t292, t294 * (t298 * t31 + t30 * t302) + (t18 * t299 - t303 * t41) * t292, 0, 0, 0, 0, 0, 0, t294 * (t298 * t48 + t302 * t47) + (t24 * t299 - t303 * t62) * t292, t294 * (t298 * t51 + t302 * t50) + (t25 * t299 - t303 * t68) * t292, t294 * (t298 * t34 + t302 * t33) + (t19 * t299 - t303 * t36) * t292, t294 * (t298 * t6 + t302 * t5) + (t1 * t299 - t303 * t8) * t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t315, -t229, 0, 0, (t265 + t325) * t298, t264 * t302 + t266 * t298, t343 + t302 * (-t285 + t304), t266 * t302, t298 * (t286 - t304) + t341, 0, pkin(2) * t266 + pkin(8) * t246 - t223 * t302, -pkin(2) * t264 + pkin(8) * t247 + t223 * t298, pkin(2) * t268 + pkin(8) * t267 + t158, -pkin(2) * t223 + pkin(8) * t158, t298 * (t220 * t301 - t261 * t346) + t302 * (t220 * t297 + t261 * t345), t298 * (-t198 * t301 - t202 * t297) + t302 * (-t198 * t297 + t202 * t301), t298 * (-t250 * t297 + t385) + t302 * (t250 * t301 + t387), t298 * (t259 * t345 + t354) + t302 * (t259 * t346 - t217), t298 * (t249 * t301 - t353) + t302 * (t249 * t297 + t352), (t298 * (-t259 * t301 + t261 * t297) + t302 * (-t259 * t297 - t261 * t301)) * t287, t298 * (-pkin(9) * t189 + t356) + t302 * (-pkin(3) * t198 + pkin(9) * t190 - t355) - pkin(2) * t198 + pkin(8) * t151, t298 * (-pkin(9) * t204 + t355) + t302 * (-pkin(3) * t202 + pkin(9) * t205 + t356) - pkin(2) * t202 + pkin(8) * t161, t298 * (-pkin(9) * t159 - t90) + t302 * (-pkin(3) * t221 + pkin(9) * t160 + t91) - pkin(2) * t221 + pkin(8) * t98, -pkin(9) * t367 + t302 * (-pkin(3) * t193 + pkin(9) * t91) - pkin(2) * t193 + pkin(8) * t49, t298 * (t168 * t301 + t331) + t302 * (t168 * t297 - t330), t298 * (t137 * t301 - t215 * t297) + t302 * (t137 * t297 + t215 * t301), t298 * (t156 * t301 - t178 * t297) + t302 * (t156 * t297 + t178 * t301), t298 * (t166 * t301 - t331) + t302 * (t166 * t297 + t330), t298 * (t157 * t301 - t174 * t297) + t302 * (t157 * t297 + t174 * t301), t298 * (t184 * t301 + t354) + t302 * (t184 * t297 - t217), t298 * (-pkin(9) * t99 - t297 * t58 + t301 * t86) + t302 * (-pkin(3) * t143 + pkin(9) * t100 + t297 * t86 + t301 * t58) - pkin(2) * t143 + pkin(8) * t65, t298 * (-pkin(9) * t105 - t297 * t59 + t301 * t87) + t302 * (-pkin(3) * t149 + pkin(9) * t106 + t297 * t87 + t301 * t59) - pkin(2) * t149 + pkin(8) * t66, t298 * (-pkin(9) * t96 + t301 * t32) + t302 * (pkin(9) * t97 + t297 * t32) + pkin(8) * t64 + (t298 * t373 + t302 * t327 - pkin(2)) * t134, (t298 * (-qJ(5) * t301 + t373) + t302 * (-qJ(5) * t297 + t327) - pkin(2)) * t41 + (pkin(8) + pkin(9)) * t18, t298 * (t301 * t73 + t333) + t302 * (t297 * t73 - t332), t298 * (t163 * t297 + t301 * t39) + t302 * (-t163 * t301 + t297 * t39), t298 * (t121 * t297 + t301 * t84) + t302 * (-t121 * t301 + t297 * t84), t298 * (t301 * t72 - t333) + t302 * (t297 * t72 + t332), t298 * (-t118 * t297 + t301 * t85) + t302 * (t118 * t301 + t297 * t85), t298 * (t218 * t297 + t301 * t93) + t302 * (-t218 * t301 + t297 * t93), t298 * (-pkin(9) * t47 + t20 * t301 - t21 * t297) + t302 * (-pkin(3) * t62 + pkin(9) * t48 + t20 * t297 + t21 * t301) - pkin(2) * t62 + pkin(8) * t24, t298 * (-pkin(9) * t50 + t22 * t301 - t23 * t297) + t302 * (-pkin(3) * t68 + pkin(9) * t51 + t22 * t297 + t23 * t301) - pkin(2) * t68 + pkin(8) * t25, t298 * (-pkin(9) * t33 - t26 * t297 + t301 * t4) + t302 * (-pkin(3) * t36 + pkin(9) * t34 + t26 * t301 + t297 * t4) - pkin(2) * t36 + pkin(8) * t19, t298 * (-pkin(9) * t5 + t2 * t301 - t297 * t3) + t302 * (-pkin(3) * t8 + pkin(9) * t6 + t2 * t297 + t3 * t301) - pkin(2) * t8 + pkin(8) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t277, t285 - t286, t335, t277, t284, qJDD(3), -t195, -t196, 0, 0, t237, t235, t203, -t237, t311, t334, pkin(3) * t189 - t131, -t342 - t297 * t305 + (-t270 * t297 + t204) * pkin(3), pkin(3) * t159, pkin(3) * t90, t167, t135, t154, t165, t155, t183, pkin(3) * t99 + t328, pkin(3) * t105 + t329, pkin(3) * t96 + t316, pkin(3) * t30 + t365, t71, t37, t82, t70, t83, t92, pkin(3) * t47 + t322, pkin(3) * t50 + t321, pkin(3) * t33 + t323, pkin(3) * t5 + t313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t235, t203, -t237, t311, t334, -t131, -t132, 0, 0, t167, t135, t154, t165, t155, t183, t328, t329, t316, t365, t71, t37, t82, t70, t83, t92, t322, t321, t323, t313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, t379, t186, t107, 0, 0, 0, 0, 0, 0, t117, t381, t141, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, t163, t121, -t164, -t118, t218, -t28, -t29, 0, 0;];
tauJ_reg  = t7;
