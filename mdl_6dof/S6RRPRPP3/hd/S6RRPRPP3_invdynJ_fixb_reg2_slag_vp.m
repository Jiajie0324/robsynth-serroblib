% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:57:17
% EndTime: 2019-03-09 09:57:30
% DurationCPUTime: 7.46s
% Computational Cost: add. (8722->640), mult. (19742->750), div. (0->0), fcn. (14180->10), ass. (0->298)
t243 = cos(qJ(2));
t362 = qJD(1) * t243;
t215 = -qJD(4) + t362;
t236 = sin(pkin(9));
t241 = sin(qJ(2));
t363 = qJD(1) * t241;
t339 = t236 * t363;
t237 = cos(pkin(9));
t360 = qJD(2) * t237;
t166 = -t339 + t360;
t343 = t237 * t363;
t361 = qJD(2) * t236;
t167 = t343 + t361;
t240 = sin(qJ(4));
t421 = cos(qJ(4));
t286 = t240 * t166 + t421 * t167;
t434 = t286 * t215;
t354 = qJD(1) * qJD(2);
t332 = t243 * t354;
t352 = t241 * qJDD(1);
t353 = qJDD(2) * t236;
t129 = t353 + (t332 + t352) * t237;
t204 = t236 * t352;
t367 = t236 * t332 + t204;
t302 = qJDD(2) * t237 - t367;
t49 = qJD(4) * t286 + t240 * t129 - t421 * t302;
t253 = t49 - t434;
t28 = t49 + t434;
t346 = t421 * t237;
t318 = t243 * t346;
t344 = t236 * t362;
t337 = qJD(4) * t421;
t357 = qJD(4) * t240;
t429 = -t236 * t357 + t237 * t337;
t369 = qJD(1) * t318 - t240 * t344 - t429;
t104 = -t421 * t166 + t167 * t240;
t101 = t104 ^ 2;
t304 = pkin(2) * t241 - qJ(3) * t243;
t174 = t304 * qJD(1);
t156 = t236 * t174;
t381 = t237 * t241;
t382 = t236 * t243;
t281 = -pkin(7) * t381 - pkin(8) * t382;
t109 = qJD(1) * t281 + t156;
t408 = pkin(8) + qJ(3);
t186 = t408 * t236;
t187 = t408 * t237;
t126 = pkin(7) * t339 + t237 * t174;
t380 = t237 * t243;
t293 = pkin(3) * t241 - pkin(8) * t380;
t91 = t293 * qJD(1) + t126;
t403 = qJD(3) * t346 - t421 * t109 - t186 * t337 + (-qJD(3) * t236 - qJD(4) * t187 - t91) * t240;
t437 = t104 * t215;
t226 = t243 * qJDD(1);
t280 = t241 * t354 - t226;
t170 = qJDD(4) + t280;
t410 = pkin(4) + qJ(6);
t335 = t410 * t170;
t172 = t421 * t236 + t240 * t237;
t155 = t172 * qJD(4);
t274 = t243 * t172;
t370 = qJD(1) * t274 - t155;
t220 = pkin(7) * t352;
t393 = qJDD(2) * pkin(2);
t149 = pkin(7) * t332 + qJDD(3) + t220 - t393;
t232 = g(3) * t243;
t244 = cos(qJ(1));
t242 = sin(qJ(1));
t414 = g(2) * t242;
t310 = g(1) * t244 + t414;
t262 = t310 * t241 - t149 - t232;
t377 = t241 * t244;
t378 = t241 * t242;
t436 = g(1) * t377 + g(2) * t378;
t305 = pkin(2) * t243 + qJ(3) * t241;
t182 = -pkin(1) - t305;
t158 = t182 * qJD(1);
t222 = pkin(7) * t362;
t188 = qJD(2) * qJ(3) + t222;
t112 = t237 * t158 - t188 * t236;
t267 = -pkin(3) * t362 - pkin(8) * t167 + t112;
t70 = t421 * t267;
t113 = t236 * t158 + t237 * t188;
t76 = pkin(8) * t166 + t113;
t37 = t240 * t76 - t70;
t291 = pkin(5) * t286 + t37;
t372 = qJD(5) + t291;
t102 = t286 ^ 2;
t435 = t49 * qJ(6) + t104 * qJD(6);
t402 = qJ(5) * t363 - t403;
t121 = -t240 * t186 + t421 * t187;
t400 = qJD(3) * t172 + qJD(4) * t121 - t240 * t109 + t421 * t91;
t338 = -t102 + t101;
t208 = t215 ^ 2;
t433 = -t102 - t208;
t233 = pkin(9) + qJ(4);
t224 = sin(t233);
t225 = cos(t233);
t376 = t242 * t243;
t141 = t224 * t376 + t225 * t244;
t374 = t244 * t224;
t142 = t225 * t376 - t374;
t432 = -t142 * pkin(4) - qJ(5) * t141;
t159 = t170 * qJ(5);
t196 = qJD(5) * t215;
t431 = t196 - t159;
t160 = pkin(3) * t344 + t222;
t430 = qJ(5) * t369 - qJD(5) * t172 - t160;
t234 = t241 ^ 2;
t235 = t243 ^ 2;
t365 = t234 - t235;
t320 = qJD(1) * t365;
t428 = -pkin(5) * t49 + qJDD(6);
t48 = -t421 * t129 - t166 * t337 + t167 * t357 - t240 * t302;
t427 = t49 * pkin(4) + t48 * qJ(5) - t286 * qJD(5);
t31 = t170 * t172 + t369 * t215 - t286 * t363;
t171 = t236 * t240 - t346;
t30 = -t104 * t363 + t170 * t171 + t370 * t215;
t256 = t369 * t104 + t171 * t48 - t172 * t49 + t286 * t370;
t426 = -0.2e1 * pkin(1);
t425 = 0.2e1 * t159;
t424 = pkin(5) * t48;
t420 = pkin(3) * t236;
t419 = pkin(4) * t170;
t418 = pkin(7) * t166;
t417 = pkin(7) * t167;
t416 = g(1) * t242;
t413 = g(2) * t244;
t412 = g(3) * t241;
t411 = t104 * pkin(5);
t409 = pkin(5) + t408;
t407 = qJD(6) * t171 - t370 * t410 + t430;
t406 = t370 * pkin(5) - t402;
t336 = t241 * t410;
t405 = -t369 * pkin(5) + qJD(1) * t336 + t400;
t404 = -t370 * pkin(4) + t430;
t401 = pkin(4) * t363 + t400;
t399 = qJ(5) * t49;
t260 = t240 * t267;
t38 = t421 * t76 + t260;
t398 = t215 * t38;
t165 = t237 * t182;
t111 = -pkin(8) * t381 + t165 + (-pkin(7) * t236 - pkin(3)) * t243;
t131 = pkin(7) * t380 + t236 * t182;
t383 = t236 * t241;
t118 = -pkin(8) * t383 + t131;
t62 = t240 * t111 + t421 * t118;
t140 = -pkin(7) * t280 + qJDD(2) * qJ(3) + qJD(2) * qJD(3);
t151 = t304 * qJD(2) - qJD(3) * t241;
t99 = t151 * qJD(1) + t182 * qJDD(1);
t64 = t237 * t140 + t236 * t99;
t396 = pkin(7) * qJDD(1);
t395 = qJ(5) * t104;
t391 = t104 * t286;
t390 = t129 * t236;
t388 = t224 * t241;
t387 = t224 * t243;
t386 = t225 * t241;
t385 = t225 * t243;
t246 = qJD(1) ^ 2;
t384 = t235 * t246;
t379 = t408 * t243;
t219 = pkin(3) * t237 + pkin(2);
t191 = t243 * t219;
t375 = t243 * t244;
t373 = -qJD(5) - t37;
t25 = t38 - t411;
t371 = -qJD(6) - t25;
t359 = qJD(2) * t241;
t349 = pkin(7) * t359;
t116 = t237 * t151 + t236 * t349;
t358 = qJD(2) * t243;
t342 = t236 * t358;
t161 = pkin(3) * t342 + pkin(7) * t358;
t175 = pkin(3) * t383 + t241 * pkin(7);
t366 = t244 * pkin(1) + t242 * pkin(7);
t364 = t234 + t235;
t181 = -qJD(2) * pkin(2) + pkin(7) * t363 + qJD(3);
t355 = qJD(3) - t181;
t348 = t408 * t377;
t230 = t244 * pkin(7);
t347 = t244 * t420 - t378 * t408 + t230;
t345 = t167 * t362;
t340 = t215 * t363;
t334 = t409 * t244;
t331 = t236 * t226;
t330 = t237 * t352;
t329 = t237 * t226;
t328 = -pkin(1) - t191;
t63 = -t140 * t236 + t237 * t99;
t41 = pkin(3) * t280 - pkin(8) * t129 + t63;
t50 = t302 * pkin(8) + t64;
t326 = -qJD(4) * t70 - t240 * t41 + t76 * t357 - t421 * t50;
t325 = qJD(4) * t260 + t240 * t50 + t76 * t337 - t421 * t41;
t324 = -t141 * pkin(4) + qJ(5) * t142;
t143 = -t242 * t225 + t243 * t374;
t144 = t224 * t242 + t225 * t375;
t323 = -t143 * pkin(4) + qJ(5) * t144;
t322 = -qJ(5) * t224 - t219;
t120 = t421 * t186 + t187 * t240;
t319 = t219 * t375 + t242 * t420 + t366;
t317 = g(3) * (pkin(4) * t385 + qJ(5) * t387 + t191);
t315 = t241 * t332;
t217 = g(1) * t378;
t314 = -g(2) * t377 + t217;
t57 = qJ(5) * t243 - t62;
t312 = g(1) * t141 - g(2) * t143;
t311 = g(1) * t142 - g(2) * t144;
t309 = -t413 + t416;
t148 = -t240 * t383 + t241 * t346;
t307 = -qJ(5) * t148 + t175;
t61 = t421 * t111 - t240 * t118;
t306 = -qJDD(5) - t325;
t147 = t172 * t241;
t86 = qJD(2) * t274 + t429 * t241;
t17 = t104 * t86 + t147 * t49;
t85 = -qJD(2) * t318 + t241 * t155 + t240 * t342;
t16 = -t148 * t48 - t286 * t85;
t301 = -t102 - t101;
t300 = t166 * t237 - t167 * t236;
t297 = -g(3) * t387 + t436 * t224;
t296 = -g(3) * t385 + t436 * t225;
t295 = qJD(1) * (-t166 + t360);
t4 = t326 + t431;
t292 = -qJ(5) * t172 - t219;
t58 = t243 * pkin(4) - t61;
t288 = t302 * pkin(3);
t287 = -pkin(7) * qJDD(2) + t354 * t426;
t80 = t293 * qJD(2) + t116;
t138 = t236 * t151;
t92 = qJD(2) * t281 + t138;
t285 = t111 * t357 + t118 * t337 + t240 * t92 - t421 * t80;
t21 = t111 * t337 - t118 * t357 + t240 * t80 + t421 * t92;
t282 = t302 * t237;
t14 = -t370 * t104 + t171 * t49;
t13 = -t172 * t48 - t286 * t369;
t279 = pkin(1) * t246 + t310;
t125 = -pkin(3) * t166 + t181;
t245 = qJD(2) ^ 2;
t278 = pkin(7) * t245 + qJDD(1) * t426 + t413;
t277 = qJ(5) * t85 - qJD(5) * t148 + t161;
t275 = t144 * pkin(4) + qJ(5) * t143 + t319;
t273 = -t120 * t170 + t296;
t272 = t121 * t170 + t297;
t271 = t328 * t242 + t347;
t270 = t170 - t391;
t269 = -t310 * t243 - t412;
t268 = g(1) * t143 + g(2) * t141 + g(3) * t388 - t325;
t266 = t48 + t437;
t265 = t48 - t437;
t264 = -qJ(5) * t286 + t125;
t263 = t104 * t85 + t147 * t48 - t148 * t49 - t286 * t86;
t261 = -qJDD(5) + t268;
t11 = t104 * t359 + t147 * t170 - t215 * t86 - t243 * t49;
t12 = t148 * t170 + t215 * t85 + t243 * t48 + t286 * t359;
t259 = g(1) * t144 + g(2) * t142 + g(3) * t386 + t326;
t81 = t149 - t288;
t18 = -qJ(5) * t359 + qJD(5) * t243 - t21;
t43 = pkin(4) * t104 + t264;
t257 = t286 * t43 - t261;
t254 = -t120 * t48 - t121 * t49 + t269;
t26 = t410 * t104 + t264;
t251 = t26 * t286 - t261 - t424;
t250 = -t104 * t26 - t259 + t428;
t33 = t215 * qJ(5) - t38;
t8 = t81 + t427;
t249 = -t288 - t262;
t248 = t249 + t427;
t209 = t241 * t246 * t243;
t189 = qJ(5) * t386;
t163 = qJDD(1) * t235 - 0.2e1 * t315;
t130 = -pkin(7) * t382 + t165;
t127 = -pkin(7) * t343 + t156;
t119 = -t170 * t243 - t215 * t359;
t117 = -t237 * t349 + t138;
t100 = pkin(4) * t171 + t292;
t84 = -t171 * pkin(5) + t121;
t83 = pkin(5) * t172 + t120;
t75 = t410 * t171 + t292;
t71 = pkin(4) * t147 + t307;
t60 = pkin(4) * t286 + t395;
t59 = t410 * t147 + t307;
t44 = -pkin(5) * t147 - t57;
t42 = t148 * pkin(5) + t243 * qJ(6) + t58;
t36 = t286 * t410 + t395;
t32 = pkin(4) * t215 - t373;
t29 = pkin(4) * t86 + t277;
t23 = qJD(6) - t33 - t411;
t20 = t410 * t215 + t372;
t19 = -pkin(4) * t359 + t285;
t15 = qJD(6) * t147 + t410 * t86 + t277;
t10 = -pkin(5) * t86 - t18;
t9 = -t85 * pkin(5) - qJD(2) * t336 + t243 * qJD(6) + t285;
t5 = -t306 - t419;
t3 = t8 + t435;
t2 = -t4 + t428;
t1 = qJD(6) * t215 - t306 - t335 - t424;
t6 = [0, 0, 0, 0, 0, qJDD(1), t309, t310, 0, 0, qJDD(1) * t234 + 0.2e1 * t315, -0.2e1 * qJD(2) * t320 + 0.2e1 * t241 * t226, qJDD(2) * t241 + t243 * t245, t163, qJDD(2) * t243 - t241 * t245, 0, t287 * t241 + (-t278 + t416) * t243, t241 * t278 + t243 * t287 - t217, 0.2e1 * t364 * t396 - t310, -g(1) * (-pkin(1) * t242 + t230) - g(2) * t366 + (t364 * pkin(7) ^ 2 + pkin(1) ^ 2) * qJDD(1) (t129 * t241 + t167 * t358) * t237 (t282 - t390) * t241 + t300 * t358 (-t129 - t330) * t243 + (t167 * t241 + t237 * t320) * qJD(2) (-t166 * t358 - t241 * t302) * t236 (-t302 + t204) * t243 + (t241 * t166 - t236 * t320) * qJD(2), t163, -t310 * t236 + (-pkin(7) * t302 + t149 * t236 + (qJD(1) * t130 + t112) * qJD(2)) * t241 + (-t116 * qJD(1) - t130 * qJDD(1) - t63 + t309 * t237 + (t181 * t236 - t418) * qJD(2)) * t243, -t310 * t237 + (pkin(7) * t129 + t149 * t237 + (-qJD(1) * t131 - t113) * qJD(2)) * t241 + (t117 * qJD(1) + t131 * qJDD(1) + t64 - t309 * t236 + (t181 * t237 + t417) * qJD(2)) * t243, t117 * t166 + t131 * t302 - t116 * t167 - t130 * t129 + t217 + (-t112 * t237 - t113 * t236) * t358 + (-t236 * t64 - t237 * t63 - t413) * t241, t64 * t131 + t113 * t117 + t63 * t130 + t112 * t116 - g(1) * t230 - g(2) * (t244 * t305 + t366) - t182 * t416 + (t149 * t241 + t181 * t358) * pkin(7), t16, t263, t12, t17, -t11, t119, t104 * t161 + t125 * t86 + t147 * t81 + t170 * t61 + t175 * t49 + t215 * t285 + t243 * t325 - t37 * t359 + t311, -t125 * t85 + t148 * t81 + t161 * t286 - t170 * t62 - t175 * t48 + t21 * t215 - t243 * t326 - t38 * t359 - t312, -t104 * t21 + t147 * t326 + t148 * t325 + t285 * t286 - t37 * t85 - t38 * t86 + t48 * t61 - t49 * t62 + t314, -t326 * t62 + t38 * t21 - t325 * t61 + t37 * t285 + t81 * t175 + t125 * t161 - g(1) * t271 - g(2) * (t319 + t348) t119, -t12, t11, t16, t263, t17, t104 * t18 + t147 * t4 + t148 * t5 + t19 * t286 - t32 * t85 + t33 * t86 - t48 * t58 + t49 * t57 + t314, -t104 * t29 - t147 * t8 + t170 * t58 - t19 * t215 - t243 * t5 + t32 * t359 - t43 * t86 - t49 * t71 - t311, -t148 * t8 - t170 * t57 + t18 * t215 + t243 * t4 - t286 * t29 - t33 * t359 + t43 * t85 + t48 * t71 + t312, t8 * t71 + t43 * t29 + t4 * t57 + t33 * t18 + t5 * t58 + t32 * t19 - g(1) * (t271 + t432) - g(2) * (t275 + t348) t119, t11, t12, t17, -t263, t16, t1 * t148 - t10 * t104 - t147 * t2 - t20 * t85 - t23 * t86 + t286 * t9 - t42 * t48 - t44 * t49 + t314, -t10 * t215 - t148 * t3 - t15 * t286 + t170 * t44 - t2 * t243 + t23 * t359 + t26 * t85 + t48 * t59 + t312, t1 * t243 + t104 * t15 + t147 * t3 - t170 * t42 - t20 * t359 + t215 * t9 + t26 * t86 + t49 * t59 + t311, t3 * t59 + t26 * t15 + t1 * t42 + t20 * t9 + t2 * t44 + t23 * t10 - g(1) * (-qJ(6) * t142 + t347 + t432) - g(2) * (qJ(6) * t144 + t241 * t334 + t275) - (-pkin(5) * t241 + t328) * t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t209, t365 * t246, t352, t209, t226, qJDD(2), t241 * t279 - t220 - t232, t412 + (t279 - t396) * t243, 0, 0, -t237 * t345 + t390, t129 * t237 + t236 * t302 - t300 * t362, -t331 + t237 * t384 + (-t167 + t361) * t363, t166 * t344 + t282, -t236 * t384 + t241 * t295 - t329, t209, qJ(3) * t331 - pkin(2) * t367 + (t262 + t393) * t237 + ((-qJ(3) * t361 - t112) * t241 + (t355 * t236 + t126 + t418) * t243) * qJD(1), qJ(3) * t329 - pkin(2) * t129 - t262 * t236 + ((-qJ(3) * t360 + t113) * t241 + (t355 * t237 - t127 - t417) * t243) * qJD(1), t126 * t167 - t127 * t166 + (qJ(3) * t302 + qJD(3) * t166 + t112 * t362 + t64) * t237 + (qJ(3) * t129 + qJD(3) * t167 + t113 * t362 - t63) * t236 + t269, -t181 * t222 - t112 * t126 - t113 * t127 + (-t112 * t236 + t113 * t237) * qJD(3) + t262 * pkin(2) + (-t63 * t236 + t64 * t237 + t269) * qJ(3), t13, t256, t31, t14, -t30, t340, -t104 * t160 - t370 * t125 + t171 * t81 + t400 * t215 - t219 * t49 + t37 * t363 + t273, -t369 * t125 - t160 * t286 + t172 * t81 + t403 * t215 + t219 * t48 + t38 * t363 - t272, -t403 * t104 + t171 * t326 + t172 * t325 + t286 * t400 - t369 * t37 + t370 * t38 + t254, -t326 * t121 + t325 * t120 - t81 * t219 - t125 * t160 - g(3) * (t241 * t408 + t191) + t403 * t38 + t400 * t37 + t310 * (t219 * t241 - t379) t340, -t31, t30, t13, t256, t14, t402 * t104 + t171 * t4 + t172 * t5 + t286 * t401 - t369 * t32 - t370 * t33 + t254, -t100 * t49 - t404 * t104 - t171 * t8 - t401 * t215 - t32 * t363 + t370 * t43 - t273, t100 * t48 - t172 * t8 + t402 * t215 - t286 * t404 + t33 * t363 + t369 * t43 + t272, t8 * t100 - t4 * t121 + t5 * t120 - t317 + t404 * t43 + t402 * t33 + t401 * t32 - t310 * t379 + (-g(3) * t408 + t310 * (pkin(4) * t225 - t322)) * t241, t340, t30, t31, t14, -t256, t13, t1 * t172 - t406 * t104 - t171 * t2 - t369 * t20 + t370 * t23 + t286 * t405 - t48 * t83 - t49 * t84 + t269, t170 * t84 - t172 * t3 - t406 * t215 - t23 * t363 + t369 * t26 - t286 * t407 + t48 * t75 + t297, t407 * t104 - t170 * t83 + t171 * t3 + t20 * t363 + t405 * t215 - t370 * t26 + t49 * t75 + t296, t3 * t75 + t1 * t83 + t2 * t84 - t317 + t407 * t26 + t406 * t23 + t405 * t20 + (-g(3) * qJ(6) * t225 - g(1) * t334 - t409 * t414) * t243 + (-g(3) * t409 + t310 * (t410 * t225 - t322)) * t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302 - t345, t243 * t295 + t330 + t353, -t166 ^ 2 - t167 ^ 2, t112 * t167 - t113 * t166 - t262, 0, 0, 0, 0, 0, 0, t253, -t265, t301, t104 * t38 - t286 * t37 + t249, 0, 0, 0, 0, 0, 0, t301, -t253, t265, -t104 * t33 - t286 * t32 + t248, 0, 0, 0, 0, 0, 0, t301, t265, t253, t104 * t23 - t20 * t286 + t248 + t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t391, -t338, -t266, -t391, -t28, t170, -t125 * t286 + t268 - t398, t104 * t125 + t215 * t37 + t259, 0, 0, t170, t266, t28, t391, -t338, -t391, pkin(4) * t48 - t399 + (-t33 - t38) * t286 + (t32 + t373) * t104, t104 * t60 + t257 + t398 - 0.2e1 * t419, -t104 * t43 + t215 * t373 + t286 * t60 - t196 - t259 + t425, -t4 * qJ(5) - t5 * pkin(4) - t43 * t60 - t32 * t38 - g(1) * t323 - g(2) * t324 - g(3) * (-pkin(4) * t388 + t189) + t373 * t33, t170, t28, -t266, -t391, t338, t391, -t399 + t410 * t48 + (t23 + t371) * t286 + (t20 - t372) * t104, -t215 * t291 + t286 * t36 - 0.2e1 * t196 + t250 + t425, -t104 * t36 + (-0.2e1 * qJD(6) - t25) * t215 + 0.2e1 * t335 - t251, -t1 * t410 + t2 * qJ(5) - t26 * t36 - g(1) * (-qJ(6) * t143 + t323) - g(2) * (-qJ(6) * t141 + t324) - g(3) * (-t224 * t336 + t189) + t372 * t23 + t371 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266, t270, t433, -t215 * t33 + t257 - t419, 0, 0, 0, 0, 0, 0, -t266, t433, -t270 (qJD(6) + t23) * t215 - t335 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, t170 + t391, -t101 - t208, -t20 * t215 + t250 - t431;];
tau_reg  = t6;
