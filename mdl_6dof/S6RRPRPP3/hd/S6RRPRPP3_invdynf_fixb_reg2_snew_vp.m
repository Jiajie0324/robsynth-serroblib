% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:34:02
% EndTime: 2019-05-06 12:34:10
% DurationCPUTime: 8.21s
% Computational Cost: add. (19681->294), mult. (42931->305), div. (0->0), fcn. (30013->8), ass. (0->178)
t2443 = sin(qJ(2));
t2440 = sin(pkin(9));
t2441 = cos(pkin(9));
t2476 = qJD(1) * t2443;
t2412 = -qJD(2) * t2441 + t2440 * t2476;
t2413 = qJD(2) * t2440 + t2441 * t2476;
t2442 = sin(qJ(4));
t2445 = cos(qJ(4));
t2386 = t2445 * t2412 + t2413 * t2442;
t2446 = cos(qJ(2));
t2475 = qJD(1) * t2446;
t2432 = -qJD(4) + t2475;
t2369 = t2386 * t2432;
t2463 = qJD(2) * t2475;
t2465 = t2443 * qJDD(1);
t2456 = t2463 + t2465;
t2399 = t2440 * qJDD(2) + t2441 * t2456;
t2453 = t2441 * qJDD(2) - t2440 * t2456;
t2452 = t2445 * t2399 + t2442 * t2453;
t2451 = -t2386 * qJD(4) + t2452;
t2488 = t2369 + t2451;
t2388 = -t2412 * t2442 + t2413 * t2445;
t2385 = t2388 ^ 2;
t2481 = t2432 ^ 2;
t2351 = t2481 + t2385;
t2434 = qJD(2) * t2476;
t2464 = t2446 * qJDD(1);
t2459 = -t2434 + t2464;
t2458 = -qJDD(4) + t2459;
t2470 = t2386 * t2388;
t2455 = t2458 - t2470;
t2308 = t2351 * t2442 + t2445 * t2455;
t2491 = t2351 * t2445 - t2442 * t2455;
t2286 = t2308 * t2441 + t2440 * t2491;
t2508 = t2286 * t2446;
t2269 = t2443 * t2488 + t2508;
t2444 = sin(qJ(1));
t2283 = t2308 * t2440 - t2441 * t2491;
t2447 = cos(qJ(1));
t2507 = t2283 * t2447;
t2534 = t2269 * t2444 - t2507;
t2509 = t2283 * t2444;
t2533 = t2269 * t2447 + t2509;
t2454 = t2458 + t2470;
t2384 = t2386 ^ 2;
t2486 = -t2384 - t2481;
t2301 = -t2486 * t2442 + t2445 * t2454;
t2500 = t2454 * t2442 + t2486 * t2445;
t2277 = t2301 * t2441 - t2440 * t2500;
t2460 = t2399 * t2442 - t2445 * t2453;
t2457 = qJD(4) * t2388 + t2460;
t2469 = t2388 * t2432;
t2485 = t2457 - t2469;
t2517 = t2301 * t2440 + t2441 * t2500;
t2521 = t2443 * t2485 + t2446 * t2517;
t2531 = t2277 * t2447 + t2444 * t2521;
t2532 = t2277 * t2444 - t2447 * t2521;
t2510 = t2286 * t2443;
t2260 = t2446 * t2488 - t2510;
t2318 = t2469 + t2457;
t2489 = -t2369 + t2451;
t2505 = -t2445 * t2318 + t2489 * t2442;
t2506 = -t2442 * t2318 - t2445 * t2489;
t2513 = t2440 * t2505 + t2441 * t2506;
t2487 = -t2384 - t2385;
t2514 = -t2440 * t2506 + t2441 * t2505;
t2522 = t2443 * t2487 + t2446 * t2514;
t2523 = t2444 * t2522 - t2447 * t2513;
t2520 = t2444 * t2513 + t2447 * t2522;
t2525 = t2443 * t2514 - t2446 * t2487;
t2524 = t2443 * t2517 - t2446 * t2485;
t2403 = t2412 * t2475;
t2378 = t2403 - t2399;
t2484 = qJD(2) ^ 2;
t2483 = t2412 ^ 2;
t2482 = t2413 ^ 2;
t2480 = -2 * qJD(3);
t2479 = -2 * qJD(5);
t2478 = 2 * qJD(6);
t2477 = t2446 * g(3);
t2468 = t2412 * t2413;
t2438 = t2446 ^ 2;
t2448 = qJD(1) ^ 2;
t2467 = t2438 * t2448;
t2437 = t2443 ^ 2;
t2466 = t2437 + t2438;
t2462 = t2413 * t2475;
t2425 = t2444 * g(1) - t2447 * g(2);
t2407 = qJDD(1) * pkin(1) + t2448 * pkin(7) + t2425;
t2415 = 0.2e1 * t2463 + t2465;
t2357 = (-t2459 + t2434) * pkin(2) - t2415 * qJ(3) - t2407;
t2426 = -g(1) * t2447 - g(2) * t2444;
t2408 = -pkin(1) * t2448 + qJDD(1) * pkin(7) + t2426;
t2397 = -g(3) * t2443 + t2446 * t2408;
t2414 = (-pkin(2) * t2446 - qJ(3) * t2443) * qJD(1);
t2365 = -pkin(2) * t2484 + qJDD(2) * qJ(3) + t2414 * t2475 + t2397;
t2329 = t2440 * t2357 + t2441 * t2365 + t2412 * t2480;
t2461 = -pkin(4) * t2432 + t2479;
t2400 = -pkin(3) * t2475 - pkin(8) * t2413;
t2298 = -pkin(3) * t2483 + pkin(8) * t2453 + t2400 * t2475 + t2329;
t2328 = t2441 * t2357 - t2440 * t2365 + t2413 * t2480;
t2380 = -t2459 - t2468;
t2449 = t2380 * pkin(3) + pkin(8) * t2378 + t2328;
t2273 = -t2442 * t2298 + t2445 * t2449;
t2352 = pkin(4) * t2386 - qJ(5) * t2388;
t2253 = t2458 * pkin(4) - t2481 * qJ(5) + t2388 * t2352 + qJDD(5) - t2273;
t2364 = t2477 + qJDD(3) - t2484 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t2414 + t2408) * t2443;
t2330 = -t2453 * pkin(3) - t2483 * pkin(8) + t2413 * t2400 + t2364;
t2450 = t2457 * pkin(4) - qJ(5) * t2488 + t2330;
t2274 = t2445 * t2298 + t2442 * t2449;
t2252 = -t2481 * pkin(4) - qJ(5) * t2458 - t2386 * t2352 + t2432 * t2479 + t2274;
t2431 = t2446 * t2448 * t2443;
t2430 = -t2467 - t2484;
t2429 = -t2437 * t2448 - t2484;
t2422 = -qJDD(2) + t2431;
t2421 = qJDD(2) + t2431;
t2420 = t2466 * t2448;
t2419 = -qJDD(1) * t2444 - t2447 * t2448;
t2418 = qJDD(1) * t2447 - t2444 * t2448;
t2417 = t2466 * qJDD(1);
t2416 = -0.2e1 * t2434 + t2464;
t2401 = -t2467 - t2482;
t2396 = -t2443 * t2408 - t2477;
t2395 = t2422 * t2446 - t2429 * t2443;
t2394 = -t2421 * t2443 + t2430 * t2446;
t2393 = t2422 * t2443 + t2429 * t2446;
t2392 = t2421 * t2446 + t2430 * t2443;
t2390 = -t2467 - t2483;
t2379 = t2459 - t2468;
t2377 = t2403 + t2399;
t2376 = t2453 - t2462;
t2375 = -t2453 - t2462;
t2368 = -t2482 - t2483;
t2366 = pkin(5) * t2388 + qJ(6) * t2432;
t2359 = -t2396 * t2443 + t2397 * t2446;
t2358 = t2396 * t2446 + t2397 * t2443;
t2355 = t2379 * t2441 - t2401 * t2440;
t2354 = t2379 * t2440 + t2401 * t2441;
t2349 = -t2380 * t2440 + t2390 * t2441;
t2348 = t2380 * t2441 + t2390 * t2440;
t2340 = t2376 * t2441 - t2378 * t2440;
t2339 = t2376 * t2440 + t2378 * t2441;
t2332 = t2355 * t2446 + t2377 * t2443;
t2331 = t2355 * t2443 - t2377 * t2446;
t2327 = t2349 * t2446 + t2375 * t2443;
t2326 = t2349 * t2443 - t2375 * t2446;
t2321 = (-qJD(4) + t2432) * t2386 + t2452;
t2312 = t2340 * t2446 + t2368 * t2443;
t2311 = t2340 * t2443 - t2368 * t2446;
t2296 = -t2328 * t2440 + t2329 * t2441;
t2295 = t2328 * t2441 + t2329 * t2440;
t2282 = t2296 * t2446 + t2364 * t2443;
t2281 = t2296 * t2443 - t2364 * t2446;
t2272 = t2388 * t2461 + t2450;
t2270 = -t2321 * t2443 - t2508;
t2267 = t2321 * t2446 - t2510;
t2245 = t2460 * qJ(6) + (qJ(6) * qJD(4) - t2366 + t2461) * t2388 + t2450 - t2384 * pkin(5) + t2386 * t2478;
t2244 = -pkin(5) * t2457 - t2384 * qJ(6) - t2432 * t2366 + qJDD(6) + t2252;
t2243 = t2451 * pkin(5) + (-pkin(5) * t2386 + t2478) * t2432 + t2253 + t2454 * qJ(6);
t2242 = -t2273 * t2442 + t2274 * t2445;
t2241 = t2273 * t2445 + t2274 * t2442;
t2240 = t2252 * t2445 + t2253 * t2442;
t2239 = t2252 * t2442 - t2253 * t2445;
t2238 = t2243 * t2442 + t2244 * t2445;
t2237 = -t2243 * t2445 + t2244 * t2442;
t2236 = -t2241 * t2440 + t2242 * t2441;
t2235 = t2241 * t2441 + t2242 * t2440;
t2234 = t2236 * t2446 + t2330 * t2443;
t2233 = t2236 * t2443 - t2330 * t2446;
t2232 = -t2239 * t2440 + t2240 * t2441;
t2231 = t2239 * t2441 + t2240 * t2440;
t2230 = t2232 * t2446 + t2272 * t2443;
t2229 = t2232 * t2443 - t2272 * t2446;
t2228 = -t2237 * t2440 + t2238 * t2441;
t2227 = t2237 * t2441 + t2238 * t2440;
t2226 = t2228 * t2446 + t2245 * t2443;
t2225 = t2228 * t2443 - t2245 * t2446;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2419, -t2418, 0, -t2425 * t2444 + t2426 * t2447, 0, 0, 0, 0, 0, 0, t2394 * t2447 - t2416 * t2444, t2395 * t2447 + t2415 * t2444, t2417 * t2447 - t2420 * t2444, t2359 * t2447 - t2407 * t2444, 0, 0, 0, 0, 0, 0, t2327 * t2447 + t2348 * t2444, t2332 * t2447 + t2354 * t2444, t2312 * t2447 + t2339 * t2444, t2282 * t2447 + t2295 * t2444, 0, 0, 0, 0, 0, 0, -t2532, t2533, t2520, t2234 * t2447 + t2235 * t2444, 0, 0, 0, 0, 0, 0, t2520, t2532, t2270 * t2447 - t2509, t2230 * t2447 + t2231 * t2444, 0, 0, 0, 0, 0, 0, t2520, -t2533, -t2532, t2226 * t2447 + t2227 * t2444; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2418, t2419, 0, t2425 * t2447 + t2426 * t2444, 0, 0, 0, 0, 0, 0, t2394 * t2444 + t2416 * t2447, t2395 * t2444 - t2415 * t2447, t2417 * t2444 + t2420 * t2447, t2359 * t2444 + t2407 * t2447, 0, 0, 0, 0, 0, 0, t2327 * t2444 - t2348 * t2447, t2332 * t2444 - t2354 * t2447, t2312 * t2444 - t2339 * t2447, t2282 * t2444 - t2295 * t2447, 0, 0, 0, 0, 0, 0, t2531, t2534, t2523, t2234 * t2444 - t2235 * t2447, 0, 0, 0, 0, 0, 0, t2523, -t2531, t2270 * t2444 + t2507, t2230 * t2444 - t2231 * t2447, 0, 0, 0, 0, 0, 0, t2523, -t2534, t2531, t2226 * t2444 - t2227 * t2447; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2392, t2393, 0, t2358, 0, 0, 0, 0, 0, 0, t2326, t2331, t2311, t2281, 0, 0, 0, 0, 0, 0, t2524, -t2260, t2525, t2233, 0, 0, 0, 0, 0, 0, t2525, -t2524, t2267, t2229, 0, 0, 0, 0, 0, 0, t2525, t2260, t2524, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2448, -qJDD(1), 0, t2426, 0, 0, 0, 0, 0, 0, t2394, t2395, t2417, t2359, 0, 0, 0, 0, 0, 0, t2327, t2332, t2312, t2282, 0, 0, 0, 0, 0, 0, t2521, t2269, t2522, t2234, 0, 0, 0, 0, 0, 0, t2522, -t2521, t2270, t2230, 0, 0, 0, 0, 0, 0, t2522, -t2269, t2521, t2226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2448, 0, t2425, 0, 0, 0, 0, 0, 0, t2416, -t2415, t2420, t2407, 0, 0, 0, 0, 0, 0, -t2348, -t2354, -t2339, -t2295, 0, 0, 0, 0, 0, 0, t2277, -t2283, -t2513, -t2235, 0, 0, 0, 0, 0, 0, -t2513, -t2277, t2283, -t2231, 0, 0, 0, 0, 0, 0, -t2513, t2283, t2277, -t2227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2392, t2393, 0, t2358, 0, 0, 0, 0, 0, 0, t2326, t2331, t2311, t2281, 0, 0, 0, 0, 0, 0, t2524, -t2260, t2525, t2233, 0, 0, 0, 0, 0, 0, t2525, -t2524, t2267, t2229, 0, 0, 0, 0, 0, 0, t2525, t2260, t2524, t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2430, t2422, t2464, t2397, 0, 0, 0, 0, 0, 0, t2349, t2355, t2340, t2296, 0, 0, 0, 0, 0, 0, t2517, t2286, t2514, t2236, 0, 0, 0, 0, 0, 0, t2514, -t2517, -t2286, t2232, 0, 0, 0, 0, 0, 0, t2514, -t2286, t2517, t2228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2421, t2429, -t2465, t2396, 0, 0, 0, 0, 0, 0, -t2375, -t2377, -t2368, -t2364, 0, 0, 0, 0, 0, 0, -t2485, -t2488, -t2487, -t2330, 0, 0, 0, 0, 0, 0, -t2487, t2485, t2321, -t2272, 0, 0, 0, 0, 0, 0, -t2487, t2488, -t2485, -t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2416, t2415, -t2420, -t2407, 0, 0, 0, 0, 0, 0, t2348, t2354, t2339, t2295, 0, 0, 0, 0, 0, 0, -t2277, t2283, t2513, t2235, 0, 0, 0, 0, 0, 0, t2513, t2277, -t2283, t2231, 0, 0, 0, 0, 0, 0, t2513, -t2283, -t2277, t2227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2390, t2379, t2376, t2329, 0, 0, 0, 0, 0, 0, t2500, t2308, t2505, t2242, 0, 0, 0, 0, 0, 0, t2505, -t2500, -t2308, t2240, 0, 0, 0, 0, 0, 0, t2505, -t2308, t2500, t2238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2380, t2401, t2378, t2328, 0, 0, 0, 0, 0, 0, -t2301, -t2491, t2506, t2241, 0, 0, 0, 0, 0, 0, t2506, t2301, t2491, t2239, 0, 0, 0, 0, 0, 0, t2506, t2491, -t2301, t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2375, t2377, t2368, t2364, 0, 0, 0, 0, 0, 0, t2485, t2488, t2487, t2330, 0, 0, 0, 0, 0, 0, t2487, -t2485, -t2321, t2272, 0, 0, 0, 0, 0, 0, t2487, -t2488, t2485, t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2486, t2455, -t2318, t2274, 0, 0, 0, 0, 0, 0, -t2318, -t2486, -t2455, t2252, 0, 0, 0, 0, 0, 0, -t2318, -t2455, t2486, t2244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2454, -t2351, -t2489, t2273, 0, 0, 0, 0, 0, 0, -t2489, t2454, t2351, -t2253, 0, 0, 0, 0, 0, 0, -t2489, t2351, -t2454, -t2243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2485, t2488, t2487, t2330, 0, 0, 0, 0, 0, 0, t2487, -t2485, -t2321, t2272, 0, 0, 0, 0, 0, 0, t2487, -t2488, t2485, t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2487, -t2485, -t2321, t2272, 0, 0, 0, 0, 0, 0, t2487, -t2488, t2485, t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2318, t2486, t2455, -t2252, 0, 0, 0, 0, 0, 0, t2318, t2455, -t2486, -t2244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2489, -t2454, -t2351, t2253, 0, 0, 0, 0, 0, 0, t2489, -t2351, t2454, t2243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2487, -t2488, t2485, t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2489, -t2351, t2454, t2243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2318, -t2455, t2486, t2244;];
f_new_reg  = t1;
