% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:32:38
% EndTime: 2019-05-06 12:33:19
% DurationCPUTime: 39.58s
% Computational Cost: add. (70348->698), mult. (153064->933), div. (0->0), fcn. (107743->8), ass. (0->488)
t1025 = sin(qJ(1));
t1028 = cos(qJ(1));
t1021 = sin(pkin(9));
t1022 = cos(pkin(9));
t1023 = sin(qJ(4));
t1026 = cos(qJ(4));
t1024 = sin(qJ(2));
t1083 = qJD(1) * t1024;
t1003 = t1021 * t1083;
t1063 = qJD(2) * t1022 - t1003;
t980 = qJD(2) * t1021 + t1022 * t1083;
t935 = t1023 * t980 - t1026 * t1063;
t937 = t1023 * t1063 + t1026 * t980;
t1125 = t935 * t937;
t1013 = qJD(2) * t1083;
t1027 = cos(qJ(2));
t1072 = t1027 * qJDD(1);
t987 = -t1013 + t1072;
t981 = -qJDD(4) + t987;
t1040 = t981 - t1125;
t1157 = t1026 * t1040;
t1082 = qJD(1) * t1027;
t1010 = -qJD(4) + t1082;
t1008 = t1010 ^ 2;
t1139 = t937 ^ 2;
t885 = -t1139 - t1008;
t1207 = t1023 * t885 - t1157;
t1158 = t1023 * t1040;
t770 = t1026 * t885 + t1158;
t1263 = t1021 * t1207 - t1022 * t770;
t1294 = t1028 * t1263;
t1067 = qJD(2) * t1082;
t1076 = qJDD(1) * t1024;
t1042 = t1067 + t1076;
t1073 = t1022 * qJDD(2);
t1036 = t1021 * t1042 - t1073;
t959 = t1021 * qJDD(2) + t1022 * t1042;
t1034 = -t1023 * t1036 + t1026 * t959;
t1032 = -t935 * qJD(4) + t1034;
t1086 = t935 * t1010;
t1155 = t1032 + t1086;
t1265 = t1021 * t770 + t1022 * t1207;
t1295 = t1027 * t1265;
t661 = t1024 * t1155 - t1295;
t610 = t1025 * t661 + t1294;
t1329 = pkin(6) * t610;
t1297 = t1025 * t1263;
t613 = t1028 * t661 - t1297;
t1328 = pkin(6) * t613;
t1298 = t1024 * t1265;
t650 = t1027 * t1155 + t1298;
t1327 = pkin(7) * t650;
t1299 = qJ(3) * t1265;
t1326 = -pkin(1) * t650 - pkin(2) * t1155 - t1299;
t1304 = pkin(1) * t1263;
t1325 = -pkin(7) * t661 - t1304;
t1140 = t935 ^ 2;
t1156 = -t1008 - t1140;
t1039 = t981 + t1125;
t848 = t1026 * t1039;
t1168 = t1023 * t1156 - t848;
t1109 = t1023 * t1039;
t1213 = t1026 * t1156 + t1109;
t1234 = t1021 * t1213 + t1022 * t1168;
t1085 = t937 * t1010;
t845 = qJD(4) * t937 + t1023 * t959 + t1026 * t1036;
t1162 = t845 - t1085;
t1233 = -t1021 * t1168 + t1022 * t1213;
t1257 = t1024 * t1162 + t1027 * t1233;
t1283 = t1025 * t1234 + t1028 * t1257;
t1314 = pkin(6) * t1283;
t1286 = t1025 * t1257 - t1028 * t1234;
t1313 = pkin(6) * t1286;
t1212 = -t1023 * t1162 + t1026 * t1155;
t1176 = t1026 * t1162;
t733 = t1023 * t1155 + t1176;
t642 = t1021 * t1212 + t1022 * t733;
t865 = -t1140 + t1139;
t626 = -t1024 * t865 + t1027 * t642;
t636 = -t1021 * t733 + t1022 * t1212;
t1324 = t1025 * t626 + t1028 * t636;
t1323 = -t1025 * t636 + t1028 * t626;
t906 = -t1139 + t1008;
t1185 = t1026 * t906 - t1109;
t793 = t1023 * t906 + t848;
t1201 = t1021 * t793 - t1022 * t1185;
t1154 = -t1086 + t1032;
t720 = t1021 * t1185 + t1022 * t793;
t666 = -t1024 * t1154 + t1027 * t720;
t1321 = t1025 * t666 - t1028 * t1201;
t1320 = t1025 * t1201 + t1028 * t666;
t905 = t1140 - t1008;
t790 = t1023 * t905 - t1157;
t796 = t1026 * t905 + t1158;
t1202 = t1021 * t796 + t1022 * t790;
t1203 = t1021 * t790 - t1022 * t796;
t804 = t845 + t1085;
t1228 = t1024 * t804 + t1027 * t1203;
t1259 = t1025 * t1228 + t1028 * t1202;
t1254 = -t1025 * t1202 + t1028 * t1228;
t1262 = t1024 * t1233 - t1027 * t1162;
t1301 = pkin(7) * t1262;
t1300 = qJ(3) * t1263;
t1317 = -pkin(2) * t1234 - pkin(3) * t1168;
t1291 = -pkin(1) * t1262 + pkin(2) * t1162 - qJ(3) * t1233;
t1316 = pkin(2) * t1263 - pkin(3) * t770;
t1289 = -pkin(1) * t1234 + pkin(7) * t1257;
t1315 = t1024 * t642 + t1027 * t865;
t1206 = t1023 * t1154 - t1026 * t804;
t1208 = -t1023 * t804 - t1026 * t1154;
t1225 = t1021 * t1206 + t1022 * t1208;
t1153 = -t1140 - t1139;
t1226 = -t1021 * t1208 + t1022 * t1206;
t1256 = t1024 * t1153 + t1027 * t1226;
t1284 = t1025 * t1225 + t1028 * t1256;
t1303 = pkin(6) * t1284;
t1287 = t1025 * t1256 - t1028 * t1225;
t1302 = pkin(6) * t1287;
t1308 = qJ(5) * t1156 - t1317;
t1307 = t1024 * t720 + t1027 * t1154;
t1231 = t1024 * t1203 - t1027 * t804;
t1261 = t1024 * t1226 - t1027 * t1153;
t1278 = pkin(7) * t1261;
t1277 = qJ(3) * t1234;
t1250 = pkin(8) * t1207;
t1292 = -pkin(3) * t1155 - t1250;
t1269 = -pkin(1) * t1261 + pkin(2) * t1153 - qJ(3) * t1226;
t1081 = qJD(5) * t1010;
t1290 = qJ(5) * t1040 + 0.2e1 * t1081 - t1316;
t1268 = -pkin(1) * t1225 + pkin(7) * t1256;
t1281 = pkin(8) * t770;
t1248 = qJ(3) * t1225;
t607 = -pkin(2) * t1225 - pkin(3) * t1208;
t1222 = pkin(8) * t1208;
t1249 = pkin(8) * t1213;
t1237 = qJ(5) * t804 + t607;
t1236 = -pkin(3) * t1162 + t1249;
t1209 = -pkin(3) * t1153 + pkin(8) * t1206;
t1223 = pkin(8) * t1168;
t1221 = (t1162 - t1085) * pkin(4);
t1220 = qJ(5) * t1155;
t1049 = t1063 * t980;
t1183 = -t987 + t1049;
t1216 = t1021 * t1183;
t1214 = t1022 * t1183;
t1062 = t1063 ^ 2;
t1129 = t1027 * g(3);
t1138 = qJD(2) ^ 2;
t1000 = g(1) * t1028 + g(2) * t1025;
t1029 = qJD(1) ^ 2;
t973 = -pkin(1) * t1029 + qJDD(1) * pkin(7) - t1000;
t1133 = pkin(2) * t1027;
t1050 = -qJ(3) * t1024 - t1133;
t985 = t1050 * qJD(1);
t888 = -qJDD(2) * pkin(2) - t1138 * qJ(3) + (qJD(1) * t985 + t973) * t1024 + qJDD(3) + t1129;
t960 = -pkin(3) * t1082 - pkin(8) * t980;
t818 = t1036 * pkin(3) - t1062 * pkin(8) + t980 * t960 + t888;
t1033 = t845 * pkin(4) - t1220 + t818;
t1031 = 0.2e1 * qJD(5) * t937 - t1033;
t1079 = t1010 * t1026;
t1069 = t935 * t1079;
t1080 = t1010 * t1023;
t900 = t937 * t1080;
t1052 = -t900 + t1069;
t1041 = (t1023 * t935 + t1026 * t937) * t1010;
t1159 = t1022 * t1041;
t1146 = -t1021 * t1052 - t1159;
t1103 = t1024 * t981;
t1160 = t1021 * t1041;
t1145 = t1022 * t1052 - t1160;
t1164 = t1027 * t1145 - t1103;
t1205 = t1025 * t1164 + t1028 * t1146;
t1045 = t1023 * t845 - t1069;
t1054 = -t1026 * t845 - t1080 * t935;
t1143 = -t1021 * t1045 - t1022 * t1054;
t1071 = t1024 * t1125;
t1144 = -t1021 * t1054 + t1022 * t1045;
t1165 = t1027 * t1144 - t1071;
t1149 = t1025 * t1165 + t1028 * t1143;
t1053 = t1023 * t1032 - t1079 * t937;
t1123 = t1026 * t1032 + t900;
t1142 = -t1021 * t1123 - t1022 * t1053;
t1141 = -t1021 * t1053 + t1022 * t1123;
t1166 = t1027 * t1141 + t1071;
t1150 = t1025 * t1166 + t1028 * t1142;
t1204 = -t1025 * t1146 + t1028 * t1164;
t1147 = -t1025 * t1143 + t1028 * t1165;
t1148 = -t1025 * t1142 + t1028 * t1166;
t1190 = qJ(5) * t1153;
t969 = t1027 * t981;
t1167 = t1024 * t1145 + t969;
t1070 = t1027 * t1125;
t1055 = t1024 * t1141 - t1070;
t1056 = t1024 * t1144 + t1070;
t1047 = t1027 * t1063;
t965 = qJD(1) * t1047;
t923 = -t965 - t959;
t1161 = t1140 * pkin(5) - 0.2e1 * qJD(6) * t935;
t966 = t980 * t1082;
t919 = t966 + t1036;
t979 = t980 ^ 2;
t1137 = 2 * qJD(3);
t1136 = 0.2e1 * qJD(6);
t1135 = pkin(4) + qJ(6);
t1134 = pkin(2) * t1024;
t1132 = pkin(4) * t1010;
t1131 = pkin(4) * t1023;
t1130 = pkin(4) * t1026;
t1126 = t845 * qJ(6);
t999 = t1025 * g(1) - t1028 * g(2);
t972 = qJDD(1) * pkin(1) + t1029 * pkin(7) + t999;
t986 = 0.2e1 * t1067 + t1076;
t878 = (-t987 + t1013) * pkin(2) - t986 * qJ(3) - t972;
t955 = -g(3) * t1024 + t1027 * t973;
t889 = -pkin(2) * t1138 + qJDD(2) * qJ(3) + t1082 * t985 + t955;
t815 = t1021 * t889 - t1022 * t878 + t1137 * t980;
t748 = pkin(3) * t1183 + pkin(8) * t923 - t815;
t816 = t1021 * t878 + t1022 * t889 + t1063 * t1137;
t755 = -pkin(3) * t1062 - pkin(8) * t1036 + t1082 * t960 + t816;
t673 = t1023 * t748 + t1026 * t755;
t672 = t1023 * t755 - t1026 * t748;
t605 = t1023 * t673 - t1026 * t672;
t1120 = t1021 * t605;
t1119 = t1021 * t888;
t924 = t1049 + t987;
t1118 = t1021 * t924;
t1117 = t1022 * t605;
t1116 = t1022 * t888;
t1115 = t1022 * t924;
t1111 = t1023 * t818;
t1104 = t1024 * t972;
t1102 = t1024 * t986;
t1101 = t1024 * t987;
t1009 = t1027 * t1029 * t1024;
t994 = -t1009 + qJDD(2);
t1100 = t1024 * t994;
t995 = qJDD(2) + t1009;
t1099 = t1024 * t995;
t1093 = t1026 * t818;
t1088 = t1027 * t972;
t1087 = t1027 * t994;
t1084 = qJD(1) * qJD(2);
t1018 = t1024 ^ 2;
t1078 = t1018 * t1029;
t1019 = t1027 ^ 2;
t1077 = t1018 + t1019;
t1075 = qJDD(1) * t1025;
t1074 = qJDD(1) * t1028;
t1068 = t1021 * t1082;
t1066 = qJ(5) * t1023 + pkin(3);
t1065 = -0.2e1 * qJD(5) - t1132;
t606 = t1023 * t672 + t1026 * t673;
t954 = t1024 * t973 + t1129;
t881 = t1024 * t954 + t1027 * t955;
t946 = -t1028 * t1000 - t1025 * t999;
t1061 = t1025 * t1009;
t1060 = t1028 * t1009;
t991 = -t1025 * t1029 + t1074;
t1059 = -pkin(6) * t991 - g(3) * t1025;
t864 = pkin(4) * t935 - qJ(5) * t937;
t1051 = -t1008 * pkin(4) - t981 * qJ(5) - t935 * t864 + t673;
t739 = t1021 * t816 - t1022 * t815;
t740 = t1021 * t815 + t1022 * t816;
t879 = t1024 * t955 - t1027 * t954;
t1048 = t1000 * t1025 - t1028 * t999;
t998 = -0.2e1 * t1081;
t634 = t998 + t1051;
t1044 = t1024 * t1049;
t1043 = t980 * t1047;
t1038 = t981 * pkin(4) - t1008 * qJ(5) + t937 * t864 + qJDD(5) + t672;
t899 = pkin(5) * t937 + qJ(6) * t1010;
t1037 = t845 * pkin(5) + qJ(6) * t1140 + t1010 * t899 - qJDD(6) - t1051;
t609 = -t1037 + t998;
t1035 = t1032 * pkin(5) + qJ(6) * t1039 + t1038;
t608 = (-pkin(5) * t935 + t1136) * t1010 + t1035;
t1030 = t1031 + t1161;
t1015 = t1019 * t1029;
t1007 = -t1015 - t1138;
t1006 = t1015 - t1138;
t1005 = -t1078 - t1138;
t1004 = -t1078 + t1138;
t993 = t1015 - t1078;
t992 = t1015 + t1078;
t990 = t1028 * t1029 + t1075;
t989 = t1077 * qJDD(1);
t988 = -0.2e1 * t1013 + t1072;
t983 = t1027 * t995;
t982 = t1077 * t1084;
t976 = t1027 * t987;
t967 = -pkin(6) * t990 + g(3) * t1028;
t963 = -t979 - t1015;
t962 = -t979 + t1015;
t961 = t1062 - t1015;
t958 = -t1018 * t1084 + t1027 * t1042;
t957 = -t1019 * t1084 - t1101;
t953 = -t1005 * t1024 - t1087;
t952 = -t1004 * t1024 + t983;
t951 = t1007 * t1027 - t1099;
t950 = t1006 * t1027 - t1100;
t949 = t1005 * t1027 - t1100;
t948 = t1007 * t1024 + t983;
t943 = -t1025 * t992 + t1028 * t989;
t942 = t1025 * t989 + t1028 * t992;
t941 = -t979 + t1062;
t940 = t1027 * t988 - t1102;
t939 = -t1015 - t1062;
t922 = -t965 + t959;
t920 = t966 - t1036;
t912 = t1062 + t979;
t910 = (-t1021 * t980 - t1022 * t1063) * t1082;
t909 = (t1021 * t1063 - t1022 * t980) * t1082;
t904 = t1025 * t986 + t1028 * t953;
t903 = -t1025 * t988 + t1028 * t951;
t902 = t1025 * t953 - t1028 * t986;
t901 = t1025 * t951 + t1028 * t988;
t898 = -pkin(7) * t949 - t1088;
t897 = -pkin(7) * t948 - t1104;
t893 = t1022 * t959 + t1068 * t980;
t892 = -t1021 * t959 + t1022 * t966;
t891 = t1021 * t1036 + t1022 * t965;
t890 = t1003 * t1068 - t1022 * (-t1021 * t1076 + t1073);
t887 = -pkin(1) * t949 + t955;
t886 = -pkin(1) * t948 + t954;
t875 = t1027 * t910 - t1101;
t874 = t1022 * t961 + t1118;
t873 = -t1021 * t962 + t1214;
t872 = -t1021 * t963 + t1115;
t871 = -t1021 * t961 + t1115;
t870 = -t1022 * t962 - t1216;
t869 = t1022 * t963 + t1118;
t863 = -t1025 * t972 + t1028 * t881;
t862 = t1025 * t881 + t1028 * t972;
t859 = t1022 * t939 - t1216;
t858 = t1021 * t939 + t1214;
t857 = t1027 * t893 - t1044;
t856 = t1027 * t891 + t1044;
t844 = -t1021 * t923 - t1022 * t919;
t843 = -t1021 * t922 + t1022 * t920;
t842 = -t1021 * t919 + t1022 * t923;
t841 = -t1021 * t920 - t1022 * t922;
t835 = (-t1023 * t937 + t1026 * t935) * t1010;
t823 = -t1024 * t919 + t1027 * t874;
t822 = -t1024 * t923 + t1027 * t873;
t821 = t1024 * t922 + t1027 * t872;
t820 = t1024 * t872 - t1027 * t922;
t819 = -qJ(3) * t869 + t1116;
t817 = -t1024 * t941 + t1027 * t843;
t814 = -t1024 * t920 + t1027 * t859;
t813 = t1024 * t859 + t1027 * t920;
t807 = (-qJD(4) + t1010) * t935 + t1034;
t778 = -qJ(3) * t858 + t1119;
t777 = -t1024 * t912 + t1027 * t844;
t776 = t1024 * t844 + t1027 * t912;
t762 = t1022 * t835 - t1160;
t759 = -t1021 * t835 - t1159;
t757 = t1025 * t869 + t1028 * t821;
t756 = t1025 * t821 - t1028 * t869;
t753 = -pkin(2) * t869 + t816;
t751 = t1027 * t762 - t1103;
t749 = -pkin(2) * t858 + t815;
t745 = pkin(5) * t1039 - qJ(5) * t1162;
t744 = t1025 * t858 + t1028 * t814;
t743 = t1025 * t814 - t1028 * t858;
t742 = t1025 * t842 + t1028 * t777;
t741 = t1025 * t777 - t1028 * t842;
t726 = t1093 - t1281;
t705 = -pkin(1) * t820 + pkin(2) * t922 - qJ(3) * t872 - t1119;
t692 = t1111 - t1223;
t691 = -pkin(1) * t813 - pkin(2) * t920 - qJ(3) * t859 + t1116;
t690 = t1024 * t888 + t1027 * t740;
t689 = t1024 * t740 - t1027 * t888;
t682 = -pkin(5) * t1040 + t1135 * t1155;
t681 = -qJ(3) * t842 - t739;
t674 = t1111 + t1292;
t664 = t1065 * t937 + t1033;
t662 = -t1024 * t807 + t1295;
t659 = t1027 * t807 + t1298;
t657 = -t1093 + t1236;
t656 = -pkin(7) * t820 - t1024 * t753 + t1027 * t819;
t649 = -pkin(7) * t813 - t1024 * t749 + t1027 * t778;
t648 = -pkin(1) * t776 - pkin(2) * t912 - qJ(3) * t844 - t740;
t633 = -t1031 + t1221;
t632 = pkin(4) * t1085 + qJ(5) * t807 + t1031;
t631 = -pkin(7) * t776 + t1027 * t681 + t1134 * t842;
t630 = t1025 * t739 + t1028 * t690;
t629 = t1025 * t690 - t1028 * t739;
t625 = -pkin(1) * t689 + pkin(2) * t888 - qJ(3) * t740;
t618 = t1038 - t1190;
t617 = -pkin(4) * t1153 + t634;
t616 = t1033 + (t1065 - t899) * t937 + t1126 - t1161;
t614 = t1028 * t662 + t1297;
t611 = t1025 * t662 - t1294;
t604 = t1026 * t632 - t1131 * t807 + t1281;
t597 = t1316 + t673;
t596 = -pkin(7) * t689 + (-qJ(3) * t1027 + t1134) * t739;
t595 = qJ(5) * t1176 - t1023 * t633 + t1223;
t594 = pkin(5) * t885 + (t899 + t1132) * t937 - t1126 + t1220 + t1030;
t593 = t672 + t1317;
t592 = -pkin(3) * t818 + pkin(8) * t606;
t591 = t1250 + t1023 * t632 + (pkin(3) + t1130) * t807;
t590 = -t1021 * t674 + t1022 * t726 + t1300;
t589 = pkin(5) * t1156 - t1221 + (-t1162 - t845) * qJ(6) + t937 * t899 + t1030;
t588 = t1026 * t633 + t1066 * t1162 - t1249;
t587 = -t1190 + t1010 * t1136 + (t1154 - t1086) * pkin(5) + t1035;
t586 = pkin(4) * t1154 + t1237;
t585 = -pkin(5) * t804 - t1135 * t1153 + t609;
t584 = -t1021 * t657 + t1022 * t692 - t1277;
t583 = -t605 - t1222;
t582 = t1023 * t1038 + t1026 * t634;
t581 = t1023 * t634 - t1026 * t1038;
t580 = pkin(4) * t885 - t1051 + t1290;
t573 = t1135 * t1154 + t1237;
t572 = t1209 + t606;
t571 = -pkin(4) * t1039 - t1038 + t1308;
t570 = -t1023 * t589 + t1026 * t745 - t1223;
t569 = -t1023 * t682 + t1026 * t594 + t1281;
t568 = t1039 * t1135 - t1308 + t608;
t567 = pkin(5) * t608 - qJ(5) * t616;
t566 = t1023 * t745 + t1026 * t589 + t1236;
t565 = t1135 * t885 + t1037 + t1290;
t564 = t1023 * t608 + t1026 * t609;
t563 = t1023 * t609 - t1026 * t608;
t562 = -t1021 * t726 - t1022 * t674 - t1326;
t561 = t1023 * t594 + t1026 * t682 - t1292;
t560 = -t1023 * t617 + t1026 * t618 - t1222;
t559 = t1022 * t606 - t1120;
t558 = t1021 * t606 + t1117;
t557 = -t1021 * t692 - t1022 * t657 + t1291;
t556 = t1023 * t618 + t1026 * t617 + t1209;
t555 = t1024 * t818 + t1027 * t559;
t554 = t1024 * t559 - t1027 * t818;
t553 = -pkin(8) * t581 + (-qJ(5) * t1026 + t1131) * t664;
t552 = pkin(5) * t609 - t1135 * t616;
t551 = -t1021 * t591 + t1022 * t604 - t1300;
t550 = -t1021 * t588 + t1022 * t595 + t1277;
t549 = -t1021 * t581 + t1022 * t582;
t548 = t1021 * t582 + t1022 * t581;
t547 = -t1024 * t597 + t1027 * t590 + t1327;
t546 = -t1023 * t585 + t1026 * t587 - t1222;
t545 = pkin(8) * t582 + (-t1066 - t1130) * t664;
t544 = t1023 * t587 + t1026 * t585 + t1209;
t543 = -t1024 * t593 + t1027 * t584 - t1301;
t542 = -pkin(2) * t558 - pkin(3) * t605;
t541 = t1024 * t664 + t1027 * t549;
t540 = t1024 * t549 - t1027 * t664;
t539 = -pkin(1) * t659 - pkin(2) * t807 - t1021 * t604 - t1022 * t591 - t1299;
t538 = -t1021 * t595 - t1022 * t588 - t1291;
t537 = -t1021 * t572 + t1022 * t583 - t1248;
t536 = -t1021 * t563 + t1022 * t564;
t535 = t1021 * t564 + t1022 * t563;
t534 = -t1021 * t566 + t1022 * t570 - t1277;
t533 = -t1021 * t561 + t1022 * t569 - t1300;
t532 = -pkin(8) * t1117 - qJ(3) * t558 - t1021 * t592;
t531 = t1025 * t558 + t1028 * t555;
t530 = t1025 * t555 - t1028 * t558;
t529 = -t1021 * t583 - t1022 * t572 + t1269;
t528 = -pkin(7) * t659 - t1024 * t580 + t1027 * t551;
t527 = -t1021 * t570 - t1022 * t566 + t1291;
t526 = t1024 * t616 + t1027 * t536;
t525 = t1024 * t536 - t1027 * t616;
t524 = -t1021 * t556 + t1022 * t560 - t1248;
t523 = -t1021 * t569 - t1022 * t561 + t1326;
t522 = -t1024 * t571 + t1027 * t550 + t1301;
t521 = -t1024 * t607 + t1027 * t537 - t1278;
t520 = -pkin(2) * t548 - pkin(3) * t581 + pkin(4) * t1038 - qJ(5) * t634;
t519 = -t1021 * t560 - t1022 * t556 + t1269;
t518 = t1025 * t548 + t1028 * t541;
t517 = t1025 * t541 - t1028 * t548;
t516 = -t1024 * t568 + t1027 * t534 - t1301;
t515 = -pkin(8) * t563 - t1023 * t552 + t1026 * t567;
t514 = -t1024 * t565 + t1027 * t533 - t1327;
t513 = -t1021 * t544 + t1022 * t546 - t1248;
t512 = -pkin(1) * t554 + pkin(2) * t818 + pkin(8) * t1120 - qJ(3) * t559 - t1022 * t592;
t511 = -t1024 * t586 + t1027 * t524 - t1278;
t510 = -pkin(3) * t616 + pkin(8) * t564 + t1023 * t567 + t1026 * t552;
t509 = -t1021 * t546 - t1022 * t544 + t1269;
t508 = -qJ(3) * t548 - t1021 * t545 + t1022 * t553;
t507 = t1025 * t535 + t1028 * t526;
t506 = t1025 * t526 - t1028 * t535;
t505 = -pkin(2) * t535 - pkin(3) * t563 - qJ(5) * t609 + t1135 * t608;
t504 = -t1024 * t573 + t1027 * t513 - t1278;
t503 = -pkin(7) * t554 - t1024 * t542 + t1027 * t532;
t502 = -pkin(1) * t540 + pkin(2) * t664 - qJ(3) * t549 - t1021 * t553 - t1022 * t545;
t501 = -pkin(7) * t540 - t1024 * t520 + t1027 * t508;
t500 = -qJ(3) * t535 - t1021 * t510 + t1022 * t515;
t499 = -pkin(1) * t525 + pkin(2) * t616 - qJ(3) * t536 - t1021 * t515 - t1022 * t510;
t498 = -pkin(7) * t525 - t1024 * t505 + t1027 * t500;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t990, -t991, 0, t946, 0, 0, 0, 0, 0, 0, t903, t904, t943, t863, 0, 0, 0, 0, 0, 0, t744, t757, t742, t630, 0, 0, 0, 0, 0, 0, t1283, t613, t1284, t531, 0, 0, 0, 0, 0, 0, t1284, -t1283, t614, t518, 0, 0, 0, 0, 0, 0, t1284, -t613, t1283, t507; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t991, -t990, 0, -t1048, 0, 0, 0, 0, 0, 0, t901, t902, t942, t862, 0, 0, 0, 0, 0, 0, t743, t756, t741, t629, 0, 0, 0, 0, 0, 0, t1286, t610, t1287, t530, 0, 0, 0, 0, 0, 0, t1287, -t1286, t611, t517, 0, 0, 0, 0, 0, 0, t1287, -t610, t1286, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t948, t949, 0, t879, 0, 0, 0, 0, 0, 0, t813, t820, t776, t689, 0, 0, 0, 0, 0, 0, t1262, -t650, t1261, t554, 0, 0, 0, 0, 0, 0, t1261, -t1262, t659, t540, 0, 0, 0, 0, 0, 0, t1261, t650, t1262, t525; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t991, 0, -t990, 0, t1059, -t967, t1048, pkin(6) * t1048, t1028 * t958 - t1061, -t1025 * t993 + t1028 * t940, t1024 * t1075 + t1028 * t952, t1028 * t957 + t1061, t1025 * t1072 + t1028 * t950, qJDD(2) * t1025 + t1028 * t982, -pkin(6) * t901 - t1025 * t886 + t1028 * t897, -pkin(6) * t902 - t1025 * t887 + t1028 * t898, -pkin(6) * t942 - t1028 * t879, -pkin(6) * t862 + (pkin(1) * t1025 - pkin(7) * t1028) * t879, -t1025 * t892 + t1028 * t857, -t1025 * t841 + t1028 * t817, -t1025 * t870 + t1028 * t822, -t1025 * t890 + t1028 * t856, -t1025 * t871 + t1028 * t823, -t1025 * t909 + t1028 * t875, -pkin(6) * t743 - t1025 * t691 + t1028 * t649, -pkin(6) * t756 - t1025 * t705 + t1028 * t656, -pkin(6) * t741 - t1025 * t648 + t1028 * t631, -pkin(6) * t629 - t1025 * t625 + t1028 * t596, t1148, -t1323, -t1320, t1147, -t1254, t1204, -t1025 * t557 + t1028 * t543 - t1313, -t1025 * t562 + t1028 * t547 - t1329, -t1025 * t529 + t1028 * t521 - t1302, -pkin(6) * t530 - t1025 * t512 + t1028 * t503, -t1025 * t759 + t1028 * t751, t1320, t1254, t1148, -t1323, t1147, -t1025 * t519 + t1028 * t511 - t1302, -t1025 * t538 + t1028 * t522 + t1313, -pkin(6) * t611 - t1025 * t539 + t1028 * t528, -pkin(6) * t517 - t1025 * t502 + t1028 * t501, t1204, t1254, -t1320, t1147, t1323, t1148, -t1025 * t509 + t1028 * t504 - t1302, -t1025 * t523 + t1028 * t514 + t1329, -t1025 * t527 + t1028 * t516 - t1313, -pkin(6) * t506 - t1025 * t499 + t1028 * t498; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t990, 0, t991, 0, t967, t1059, t946, pkin(6) * t946, t1025 * t958 + t1060, t1025 * t940 + t1028 * t993, -t1024 * t1074 + t1025 * t952, t1025 * t957 - t1060, t1025 * t950 - t1028 * t1072, -qJDD(2) * t1028 + t1025 * t982, pkin(6) * t903 + t1025 * t897 + t1028 * t886, pkin(6) * t904 + t1025 * t898 + t1028 * t887, pkin(6) * t943 - t1025 * t879, pkin(6) * t863 + (-pkin(1) * t1028 - pkin(7) * t1025) * t879, t1025 * t857 + t1028 * t892, t1025 * t817 + t1028 * t841, t1025 * t822 + t1028 * t870, t1025 * t856 + t1028 * t890, t1025 * t823 + t1028 * t871, t1025 * t875 + t1028 * t909, pkin(6) * t744 + t1025 * t649 + t1028 * t691, pkin(6) * t757 + t1025 * t656 + t1028 * t705, pkin(6) * t742 + t1025 * t631 + t1028 * t648, pkin(6) * t630 + t1025 * t596 + t1028 * t625, t1150, -t1324, -t1321, t1149, -t1259, t1205, t1025 * t543 + t1028 * t557 + t1314, t1025 * t547 + t1028 * t562 + t1328, t1025 * t521 + t1028 * t529 + t1303, pkin(6) * t531 + t1025 * t503 + t1028 * t512, t1025 * t751 + t1028 * t759, t1321, t1259, t1150, -t1324, t1149, t1025 * t511 + t1028 * t519 + t1303, t1025 * t522 + t1028 * t538 - t1314, pkin(6) * t614 + t1025 * t528 + t1028 * t539, pkin(6) * t518 + t1025 * t501 + t1028 * t502, t1205, t1259, -t1321, t1149, t1324, t1150, t1025 * t504 + t1028 * t509 + t1303, t1025 * t514 + t1028 * t523 - t1328, t1025 * t516 + t1028 * t527 + t1314, pkin(6) * t507 + t1025 * t498 + t1028 * t499; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t999, t1000, 0, 0, t1102, t1024 * t988 + t1027 * t986, t1004 * t1027 + t1099, -t1024 * t1067 + t976, t1006 * t1024 + t1087, 0, pkin(1) * t988 + pkin(7) * t951 + t1088, -pkin(1) * t986 + pkin(7) * t953 - t1104, pkin(1) * t992 + pkin(7) * t989 + t881, pkin(1) * t972 + pkin(7) * t881, t1024 * t893 + t1043, t1024 * t843 + t1027 * t941, t1024 * t873 + t1027 * t923, t1024 * t891 - t1043, t1024 * t874 + t1027 * t919, t1024 * t910 + t976, -pkin(1) * t858 + pkin(7) * t814 + t1024 * t778 + t1027 * t749, -pkin(1) * t869 + pkin(7) * t821 + t1024 * t819 + t1027 * t753, pkin(7) * t777 + t1024 * t681 + (-pkin(1) - t1133) * t842, pkin(7) * t690 + (-pkin(1) + t1050) * t739, t1055, -t1315, -t1307, t1056, -t1231, t1167, t1024 * t584 + t1027 * t593 + t1289, t1024 * t590 + t1027 * t597 - t1325, t1024 * t537 + t1027 * t607 + t1268, -pkin(1) * t558 + pkin(7) * t555 + t1024 * t532 + t1027 * t542, t1024 * t762 + t969, t1307, t1231, t1055, -t1315, t1056, t1024 * t524 + t1027 * t586 + t1268, t1024 * t550 + t1027 * t571 - t1289, pkin(7) * t662 + t1024 * t551 + t1027 * t580 - t1304, -pkin(1) * t548 + pkin(7) * t541 + t1024 * t508 + t1027 * t520, t1167, t1231, -t1307, t1056, t1315, t1055, t1024 * t513 + t1027 * t573 + t1268, t1024 * t533 + t1027 * t565 + t1325, t1024 * t534 + t1027 * t568 + t1289, -pkin(1) * t535 + pkin(7) * t526 + t1024 * t500 + t1027 * t505;];
tauB_reg  = t1;
