% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPP3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP3_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:57:09
% EndTime: 2019-03-09 09:57:17
% DurationCPUTime: 2.62s
% Computational Cost: add. (2899->262), mult. (7238->459), div. (0->0), fcn. (6382->6), ass. (0->137)
t163 = pkin(4) + qJ(6);
t101 = sin(qJ(2));
t90 = qJD(2) * t101;
t171 = t163 * t90;
t164 = cos(qJ(4));
t135 = qJD(4) * t164;
t100 = sin(qJ(4));
t150 = qJD(4) * t100;
t97 = sin(pkin(9));
t98 = cos(pkin(9));
t170 = t98 * t135 - t97 * t150;
t133 = t164 * qJD(3);
t144 = t164 * t97;
t162 = pkin(8) + qJ(3);
t69 = t162 * t144;
t76 = t162 * t98;
t30 = (qJD(3) * t97 + qJD(4) * t76) * t100 + qJD(4) * t69 - t98 * t133;
t169 = 0.2e1 * t170;
t159 = t100 * t98;
t71 = t144 + t159;
t64 = t71 * qJD(4);
t168 = 0.2e1 * t64;
t167 = -0.2e1 * qJD(2);
t166 = pkin(7) * t97;
t102 = cos(qJ(2));
t152 = qJD(2) * t102;
t36 = t170 * t101 + t71 * t152;
t165 = t36 * pkin(5);
t157 = t101 * t98;
t154 = t101 * qJ(3);
t73 = -t102 * pkin(2) - pkin(1) - t154;
t68 = t98 * t73;
t46 = -pkin(8) * t157 + t68 + (-pkin(3) - t166) * t102;
t158 = t101 * t97;
t155 = t102 * t98;
t84 = pkin(7) * t155;
t57 = t97 * t73 + t84;
t53 = -pkin(8) * t158 + t57;
t20 = t100 * t46 + t164 * t53;
t141 = t97 * t90;
t62 = -t101 * qJD(3) + (pkin(2) * t101 - qJ(3) * t102) * qJD(2);
t51 = pkin(7) * t141 + t98 * t62;
t140 = t97 * t152;
t88 = pkin(7) * t152;
t65 = pkin(3) * t140 + t88;
t72 = pkin(3) * t158 + t101 * pkin(7);
t160 = t101 ^ 2 - t102 ^ 2;
t156 = t102 * t97;
t153 = (qJ(5) * qJD(5));
t151 = qJD(3) * t102;
t149 = t102 * qJD(5);
t148 = t102 * qJD(6);
t60 = t71 * t101;
t23 = 0.2e1 * t60 * t36;
t138 = t98 * t152;
t35 = t100 * t140 + t101 * t64 - t164 * t138;
t143 = t164 * t98;
t61 = -t100 * t158 + t101 * t143;
t24 = -0.2e1 * t61 * t35;
t70 = t100 * t97 - t143;
t49 = t70 * t168;
t50 = t71 * t169;
t147 = pkin(1) * t167;
t146 = pkin(7) * t156;
t145 = pkin(4) * t90;
t87 = -t98 * pkin(3) - pkin(2);
t139 = t98 * t90;
t137 = qJ(5) * t90;
t136 = t101 * t152;
t134 = t100 * t162;
t54 = t100 * t76 + t69;
t58 = t97 * t62;
t105 = t58 + (-pkin(7) * t157 - pkin(8) * t156) * qJD(2);
t32 = (pkin(3) * t101 - pkin(8) * t155) * qJD(2) + t51;
t132 = t100 * t105 + t53 * t135 + t46 * t150 - t164 * t32;
t131 = 0.2e1 * t136;
t130 = t97 * t138;
t93 = t97 ^ 2;
t94 = t98 ^ 2;
t129 = 0.2e1 * (t93 + t94) * qJD(3);
t128 = t160 * t167;
t126 = -t61 * qJ(5) + t72;
t14 = t102 * qJ(5) - t20;
t19 = -t100 * t53 + t164 * t46;
t31 = t76 * t135 + qJD(3) * t159 + (-qJD(4) * t134 + t133) * t97;
t55 = -t97 * t134 + t164 * t76;
t125 = -t55 * t30 + t54 * t31;
t124 = t35 * t60 - t36 * t61;
t11 = t170 * t61 - t35 * t71;
t12 = t36 * t70 + t60 * t64;
t52 = -pkin(7) * t139 + t58;
t123 = -t51 * t97 + t52 * t98;
t122 = -t170 * t70 - t64 * t71;
t121 = -qJ(5) * t36 - qJD(5) * t60;
t120 = -qJ(5) * t170 - t71 * qJD(5);
t119 = -qJ(5) * t64 - qJD(5) * t70;
t15 = t102 * pkin(4) - t19;
t117 = -t71 * qJ(5) + t87;
t116 = -t35 * pkin(5) + t132;
t115 = -t30 * t102 - t55 * t90;
t114 = t31 * t102 - t54 * t90;
t113 = t102 * t35 + t61 * t90;
t112 = -t102 * t36 + t60 * t90;
t40 = -t102 * t170 + t71 * t90;
t39 = -t102 * t64 + t70 * t90;
t6 = -t100 * t32 - t164 * t105 - t46 * t135 + t53 * t150;
t111 = 0.2e1 * t124;
t110 = 0.2e1 * t122;
t109 = t35 * qJ(5) - t61 * qJD(5) + t65;
t108 = -t6 + 0.2e1 * t137 - 0.2e1 * t149;
t107 = t30 * t60 + t31 * t61 - t54 * t35 - t55 * t36;
t106 = -t170 * t60 + t35 * t70 - t36 * t71 - t64 * t61;
t104 = 0.2e1 * t170 * t54 + 0.2e1 * t30 * t70 + 0.2e1 * t31 * t71 - 0.2e1 * t55 * t64;
t4 = -t137 + t6 + t149;
t103 = 0.2e1 * qJD(5);
t80 = -0.2e1 * t136;
t56 = t68 - t146;
t44 = t70 * pkin(4) + t117;
t34 = -t70 * pkin(5) + t55;
t33 = t71 * pkin(5) + t54;
t27 = t163 * t70 + t117;
t26 = t64 * pkin(4) + t120;
t25 = t60 * pkin(4) + t126;
t22 = pkin(5) * t170 + t31;
t21 = -t64 * pkin(5) - t30;
t18 = 0.2e1 * t113;
t17 = 0.2e1 * t112;
t16 = t163 * t60 + t126;
t13 = t70 * qJD(6) + t163 * t64 + t120;
t10 = -t60 * pkin(5) - t14;
t9 = t61 * pkin(5) + t102 * qJ(6) + t15;
t8 = t36 * pkin(4) + t109;
t5 = t132 - t145;
t3 = t60 * qJD(6) + t163 * t36 + t109;
t2 = -t4 - t165;
t1 = t116 + t148 - t171;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, t128, 0, t80, 0, 0, t101 * t147, t102 * t147, 0, 0, t94 * t131, -0.4e1 * t101 * t130, 0.2e1 * t160 * t98 * qJD(2), t93 * t131, t97 * t128, t80, -0.2e1 * t51 * t102 + 0.2e1 * (t56 + 0.2e1 * t146) * t90, 0.2e1 * t52 * t102 + 0.2e1 * (-t57 + 0.2e1 * t84) * t90, 0.2e1 * (-t51 * t98 - t52 * t97) * t101 + 0.2e1 * (-t56 * t98 - t57 * t97) * t152, 0.2e1 * pkin(7) ^ 2 * t136 + 0.2e1 * t56 * t51 + 0.2e1 * t57 * t52, t24, t111, t18, t23, -0.2e1 * t112, t80, 0.2e1 * t102 * t132 + 0.2e1 * t19 * t90 + 0.2e1 * t72 * t36 + 0.2e1 * t65 * t60, -0.2e1 * t6 * t102 - 0.2e1 * t20 * t90 - 0.2e1 * t72 * t35 + 0.2e1 * t65 * t61, 0.2e1 * t132 * t61 + 0.2e1 * t19 * t35 - 0.2e1 * t20 * t36 + 0.2e1 * t6 * t60, -0.2e1 * t132 * t19 - 0.2e1 * t20 * t6 + 0.2e1 * t72 * t65, t80, -0.2e1 * t113, t17, t24, t111, t23, 0.2e1 * t14 * t36 - 0.2e1 * t15 * t35 + 0.2e1 * t4 * t60 + 0.2e1 * t5 * t61, -0.2e1 * t5 * t102 + 0.2e1 * t15 * t90 - 0.2e1 * t25 * t36 - 0.2e1 * t8 * t60, 0.2e1 * t4 * t102 - 0.2e1 * t14 * t90 + 0.2e1 * t25 * t35 - 0.2e1 * t8 * t61, 0.2e1 * t14 * t4 + 0.2e1 * t15 * t5 + 0.2e1 * t25 * t8, t80, t17, t18, t23, -0.2e1 * t124, t24, 0.2e1 * t1 * t61 - 0.2e1 * t10 * t36 - 0.2e1 * t2 * t60 - 0.2e1 * t9 * t35, 0.2e1 * t10 * t90 - 0.2e1 * t2 * t102 + 0.2e1 * t16 * t35 - 0.2e1 * t3 * t61, 0.2e1 * t1 * t102 + 0.2e1 * t16 * t36 + 0.2e1 * t3 * t60 - 0.2e1 * t9 * t90, 0.2e1 * t9 * t1 + 0.2e1 * t10 * t2 + 0.2e1 * t16 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, 0, -t90, 0, -t88, pkin(7) * t90, 0, 0, t130 (-t93 + t94) * t152, t141, -t130, t139, 0, t97 * t151 + (-t97 * t154 + (-pkin(2) * t97 - pkin(7) * t98) * t102) * qJD(2), t98 * t151 + (-t98 * t154 + (-pkin(2) * t98 + t166) * t102) * qJD(2), t123, -pkin(2) * t88 + (-t56 * t97 + t57 * t98) * qJD(3) + t123 * qJ(3), t11, t106, t40, t12, -t39, 0, t87 * t36 + t72 * t64 + t65 * t70 + t114, t170 * t72 - t87 * t35 + t65 * t71 + t115, t132 * t71 - t170 * t19 - t20 * t64 + t6 * t70 + t107, t132 * t54 - t19 * t31 - t20 * t30 - t6 * t55 + t65 * t87, 0, -t40, t39, t11, t106, t12, t14 * t64 + t15 * t170 + t4 * t70 + t5 * t71 + t107, -t25 * t64 - t26 * t60 - t44 * t36 - t8 * t70 - t114, -t170 * t25 - t26 * t61 + t44 * t35 - t8 * t71 - t115, t14 * t30 + t15 * t31 + t25 * t26 - t4 * t55 + t8 * t44 + t5 * t54, 0, t39, t40, t12, -t106, t11, t1 * t71 - t10 * t64 + t170 * t9 - t2 * t70 - t21 * t60 + t22 * t61 - t33 * t35 - t34 * t36, -t21 * t102 - t13 * t61 - t16 * t170 + t27 * t35 - t3 * t71 + t34 * t90, t22 * t102 + t13 * t60 + t16 * t64 + t27 * t36 + t3 * t70 - t33 * t90, t1 * t33 + t10 * t21 + t16 * t13 + t2 * t34 + t9 * t22 + t3 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, qJ(3) * t129, t50, t110, 0, t49, 0, 0, t87 * t168, t87 * t169, t104, 0.2e1 * t125, 0, 0, 0, t50, t110, t49, t104, -0.2e1 * t26 * t70 - 0.2e1 * t44 * t64, -0.2e1 * t170 * t44 - 0.2e1 * t26 * t71, 0.2e1 * t44 * t26 + 0.2e1 * t125, 0, 0, 0, t49, -0.2e1 * t122, t50, 0.2e1 * t170 * t33 - 0.2e1 * t21 * t70 + 0.2e1 * t22 * t71 - 0.2e1 * t34 * t64, -0.2e1 * t13 * t71 - 0.2e1 * t170 * t27, 0.2e1 * t13 * t70 + 0.2e1 * t27 * t64, 0.2e1 * t27 * t13 + 0.2e1 * t34 * t21 + 0.2e1 * t33 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, t138, 0, t88, 0, 0, 0, 0, 0, 0, t36, -t35, 0, t65, 0, 0, 0, 0, 0, 0, 0, -t36, t35, t8, 0, 0, 0, 0, 0, 0, 0, t35, t36, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t170, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, -t170, t26, 0, 0, 0, 0, 0, 0, 0, -t170, t64, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, -t36, t90, -t132, t6, 0, 0, t90, t35, t36, 0, 0, 0, pkin(4) * t35 + t121, t132 - 0.2e1 * t145, t108, -t5 * pkin(4) - t4 * qJ(5) - t14 * qJD(5), t90, t36, -t35, 0, 0, 0, -qJD(6) * t61 + t163 * t35 + t121, t108 - t165, -t116 - 0.2e1 * t148 + 0.2e1 * t171, t2 * qJ(5) + t10 * qJD(5) - t9 * qJD(6) - t1 * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, 0, -t64, 0, -t31, t30, 0, 0, 0, -t170, t64, 0, 0, 0, -pkin(4) * t170 + t119, t31, -t30, -t31 * pkin(4) - t30 * qJ(5) + t55 * qJD(5), 0, t64, t170, 0, 0, 0, -qJD(6) * t71 - t163 * t170 + t119, t21, -t22, t21 * qJ(5) + t34 * qJD(5) - t33 * qJD(6) - t163 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 2 * t153, 0, 0, 0, 0, 0, 0, 0, t103, 0.2e1 * qJD(6), 0.2e1 * qJD(6) * t163 + (2 * t153); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, t90, 0, t5, 0, 0, 0, 0, 0, 0, -t35, 0, -t90, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, 0, 0, t31, 0, 0, 0, 0, 0, 0, t170, 0, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t90, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, 0, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
