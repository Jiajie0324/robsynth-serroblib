% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:21:59
% EndTime: 2019-05-05 19:22:20
% DurationCPUTime: 20.81s
% Computational Cost: add. (103696->729), mult. (229631->1086), div. (0->0), fcn. (159972->10), ass. (0->485)
t779 = sin(pkin(10));
t780 = cos(pkin(10));
t784 = sin(qJ(3));
t788 = cos(qJ(3));
t741 = (t779 * t788 + t780 * t784) * qJD(1);
t837 = qJD(1) * t788;
t743 = -qJD(1) * t779 * t784 + t780 * t837;
t851 = t743 * t741;
t885 = qJDD(3) - t851;
t887 = t779 * t885;
t886 = t780 * t885;
t829 = qJD(1) * qJD(3);
t813 = t788 * t829;
t827 = qJDD(1) * t784;
t749 = -t813 - t827;
t814 = t784 * t829;
t825 = qJDD(1) * t788;
t750 = -t814 + t825;
t697 = t749 * t779 + t750 * t780;
t836 = qJD(3) * t741;
t672 = t697 - t836;
t782 = sin(qJ(6));
t783 = sin(qJ(5));
t787 = cos(qJ(5));
t709 = -t787 * qJD(3) + t743 * t783;
t711 = qJD(3) * t783 + t743 * t787;
t786 = cos(qJ(6));
t662 = t786 * t709 + t711 * t782;
t665 = -t709 * t782 + t711 * t786;
t606 = t665 * t662;
t809 = -t780 * t749 + t750 * t779;
t694 = qJDD(5) + t809;
t799 = qJDD(6) + t694;
t880 = -t606 + t799;
t884 = t782 * t880;
t668 = t711 * t709;
t878 = -t668 + t694;
t883 = t783 * t878;
t882 = t786 * t880;
t881 = t787 * t878;
t835 = qJD(3) * t743;
t669 = t809 + t835;
t733 = qJD(5) + t741;
t728 = qJD(6) + t733;
t635 = t728 * t662;
t810 = -t787 * qJDD(3) + t783 * t697;
t641 = -qJD(5) * t711 - t810;
t642 = -t709 * qJD(5) + t783 * qJDD(3) + t787 * t697;
t796 = qJD(6) * t662 - t641 * t782 - t642 * t786;
t879 = -t635 - t796;
t685 = t733 * t709;
t611 = -t685 - t642;
t610 = -t685 + t642;
t791 = qJD(1) ^ 2;
t785 = sin(qJ(1));
t789 = cos(qJ(1));
t759 = t785 * g(1) - t789 * g(2);
t803 = qJDD(2) - t759;
t797 = -t791 * qJ(2) + t803;
t874 = pkin(7) + pkin(1);
t794 = -qJDD(1) * t874 + t797;
t700 = -t788 * g(3) + t784 * t794;
t800 = qJD(3) * pkin(3) - qJ(4) * t837;
t776 = t784 ^ 2;
t844 = t776 * t791;
t655 = -pkin(3) * t844 + t749 * qJ(4) - qJD(3) * t800 + t700;
t793 = t788 * t794;
t840 = t788 * t791;
t792 = t793 - t750 * qJ(4) + qJDD(3) * pkin(3) + (-pkin(3) * t840 - qJ(4) * t829 + g(3)) * t784;
t584 = -0.2e1 * qJD(4) * t741 + t780 * t655 + t779 * t792;
t812 = -t786 * t641 + t782 * t642;
t526 = (qJD(6) - t728) * t665 + t812;
t607 = (qJD(5) - t733) * t711 + t810;
t760 = t789 * g(1) + t785 * g(2);
t775 = qJDD(1) * qJ(2);
t801 = t760 - t775;
t877 = -t749 * pkin(3) - (qJ(4) * t776 + t874) * t791 + t800 * t837 + qJDD(4) - t801;
t656 = t662 ^ 2;
t657 = t665 ^ 2;
t876 = t709 ^ 2;
t708 = t711 ^ 2;
t726 = t728 ^ 2;
t732 = t733 ^ 2;
t739 = t741 ^ 2;
t740 = t743 ^ 2;
t875 = 0.2e1 * qJD(4);
t873 = pkin(4) * t779;
t872 = qJDD(1) * pkin(1);
t686 = pkin(4) * t741 - pkin(8) * t743;
t790 = qJD(3) ^ 2;
t555 = -pkin(4) * t790 + qJDD(3) * pkin(8) - t686 * t741 + t584;
t828 = qJD(2) * qJD(1);
t773 = 0.2e1 * t828;
t571 = t669 * pkin(4) - pkin(8) * t672 + t773 + t877;
t497 = t783 * t555 - t787 * t571;
t470 = pkin(5) * t878 + pkin(9) * t611 - t497;
t498 = t787 * t555 + t783 * t571;
t674 = pkin(5) * t733 - pkin(9) * t711;
t483 = -pkin(5) * t876 + pkin(9) * t641 - t674 * t733 + t498;
t423 = -t786 * t470 + t483 * t782;
t424 = t782 * t470 + t786 * t483;
t384 = -t423 * t786 + t424 * t782;
t871 = t384 * t783;
t870 = t384 * t787;
t811 = t779 * t655 - t780 * t792;
t554 = -qJDD(3) * pkin(4) - t790 * pkin(8) + (t875 + t686) * t743 + t811;
t499 = -t641 * pkin(5) - pkin(9) * t876 + t711 * t674 + t554;
t869 = t499 * t782;
t868 = t499 * t786;
t583 = t743 * t875 + t811;
t511 = -t583 * t780 + t584 * t779;
t867 = t511 * t784;
t866 = t511 * t788;
t865 = t554 * t783;
t864 = t554 * t787;
t581 = t606 + t799;
t863 = t581 * t782;
t862 = t581 * t786;
t626 = t668 + t694;
t861 = t626 * t783;
t860 = t626 * t787;
t823 = -0.2e1 * t828;
t658 = t823 - t877;
t859 = t658 * t779;
t858 = t658 * t780;
t689 = qJDD(3) + t851;
t857 = t689 * t779;
t856 = t689 * t780;
t855 = t728 * t782;
t854 = t728 * t786;
t853 = t733 * t783;
t852 = t733 * t787;
t777 = t788 ^ 2;
t838 = t776 + t777;
t752 = t838 * qJDD(1);
t850 = t752 * t785;
t849 = t752 * t789;
t816 = t784 * t840;
t757 = qJDD(3) + t816;
t848 = t757 * t784;
t847 = t757 * t788;
t758 = qJDD(3) - t816;
t846 = t758 * t784;
t845 = t758 * t788;
t843 = t777 * t791;
t720 = t791 * t874 + t801 + t823;
t842 = t784 * t720;
t841 = t788 * t720;
t834 = qJD(3) * t779;
t833 = qJD(3) * t780;
t826 = qJDD(1) * t785;
t824 = qJDD(1) * t789;
t822 = t779 * t606;
t821 = t780 * t606;
t820 = t779 * t668;
t819 = t780 * t668;
t818 = t785 * t851;
t817 = t789 * t851;
t815 = -pkin(4) * t780 - pkin(3);
t385 = t423 * t782 + t786 * t424;
t441 = t497 * t783 + t787 * t498;
t512 = t583 * t779 + t780 * t584;
t727 = -t791 * pkin(1) + t773 - t801;
t734 = -t797 + t872;
t680 = t789 * t727 - t734 * t785;
t707 = -t759 * t785 - t789 * t760;
t808 = t785 * t816;
t807 = t789 * t816;
t753 = -t785 * t791 + t824;
t805 = pkin(6) * t753 + g(3) * t785;
t754 = t789 * t791 + t826;
t804 = -pkin(6) * t754 + g(3) * t789;
t440 = -t497 * t787 + t498 * t783;
t699 = t784 * g(3) + t793;
t645 = t788 * t699 + t784 * t700;
t646 = -t699 * t784 + t700 * t788;
t677 = t727 * t785 + t734 * t789;
t706 = t759 * t789 - t760 * t785;
t798 = -t809 + t835;
t770 = t789 * qJDD(3);
t768 = t785 * qJDD(3);
t765 = -t790 - t843;
t764 = t790 - t843;
t763 = -t790 - t844;
t762 = -t790 + t844;
t756 = (-t776 + t777) * t791;
t755 = t838 * t791;
t751 = -0.2e1 * t814 + t825;
t748 = 0.2e1 * t813 + t827;
t746 = t838 * t829;
t725 = -t740 - t790;
t724 = -t740 + t790;
t723 = t739 - t790;
t722 = -t750 * t784 - t777 * t829;
t721 = -t749 * t788 - t776 * t829;
t717 = -t765 * t784 - t847;
t716 = t763 * t788 - t846;
t715 = t765 * t788 - t848;
t714 = -t764 * t788 - t846;
t713 = t763 * t784 + t845;
t712 = -t762 * t784 - t847;
t703 = -t755 * t789 - t850;
t702 = -t755 * t785 + t849;
t698 = t748 * t784 - t751 * t788;
t693 = t740 - t739;
t687 = -t790 - t739;
t684 = (-t741 * t780 + t743 * t779) * qJD(3);
t683 = (-t741 * t779 - t743 * t780) * qJD(3);
t682 = t715 * t785 + t751 * t789;
t681 = t713 * t785 + t748 * t789;
t679 = -t715 * t789 + t751 * t785;
t678 = -t713 * t789 + t748 * t785;
t676 = -t708 + t732;
t675 = -t732 + t876;
t673 = t697 + t836;
t667 = -t739 - t740;
t666 = -t708 + t876;
t664 = t697 * t780 - t743 * t834;
t661 = t697 * t779 + t743 * t833;
t660 = t741 * t833 + t779 * t809;
t659 = t741 * t834 - t780 * t809;
t654 = -t708 - t732;
t653 = -t725 * t779 - t856;
t652 = -t724 * t779 + t886;
t651 = t723 * t780 - t857;
t650 = t725 * t780 - t857;
t649 = t724 * t780 + t887;
t648 = t723 * t779 + t856;
t639 = -t732 - t876;
t637 = -pkin(2) * t755 - t646;
t634 = t708 + t876;
t633 = -t657 + t726;
t632 = t656 - t726;
t631 = t687 * t780 - t887;
t630 = t687 * t779 + t886;
t629 = pkin(2) * t715 - qJ(2) * t717 - t700;
t628 = pkin(2) * t713 - qJ(2) * t716 + t699;
t624 = pkin(2) * t748 - t716 * t874 - t841;
t623 = pkin(2) * t751 - t717 * t874 + t842;
t622 = (-t709 * t787 + t711 * t783) * t733;
t621 = (-t709 * t783 - t711 * t787) * t733;
t620 = -t683 * t788 - t684 * t784;
t619 = t645 * t785 - t720 * t789;
t618 = -t645 * t789 - t720 * t785;
t617 = -t657 - t726;
t616 = t673 * t779 + t780 * t798;
t615 = -t669 * t780 - t672 * t779;
t614 = -t673 * t780 + t779 * t798;
t613 = -t669 * t779 + t672 * t780;
t608 = (-qJD(5) - t733) * t711 - t810;
t605 = -t657 + t656;
t604 = t642 * t787 - t711 * t853;
t603 = t642 * t783 + t711 * t852;
t602 = -t641 * t783 + t709 * t852;
t601 = t641 * t787 + t709 * t853;
t600 = -t661 * t788 - t664 * t784;
t599 = -t659 * t788 - t660 * t784;
t598 = -qJ(4) * t650 - t858;
t597 = pkin(2) * t645 - qJ(2) * t646;
t596 = -t650 * t784 + t653 * t788;
t595 = t650 * t788 + t653 * t784;
t594 = -t649 * t788 - t652 * t784;
t593 = -t648 * t788 - t651 * t784;
t592 = t622 * t780 + t694 * t779;
t591 = t622 * t779 - t694 * t780;
t590 = -t726 - t656;
t589 = t675 * t787 - t861;
t588 = -t676 * t783 + t881;
t587 = t675 * t783 + t860;
t586 = t676 * t787 + t883;
t585 = -qJ(4) * t630 - t859;
t578 = -t654 * t783 - t860;
t577 = t654 * t787 - t861;
t576 = -pkin(2) * t720 - t646 * t874;
t575 = (-t662 * t786 + t665 * t782) * t728;
t574 = (-t662 * t782 - t665 * t786) * t728;
t573 = t639 * t787 - t883;
t572 = t639 * t783 + t881;
t568 = -t630 * t784 + t631 * t788;
t567 = t630 * t788 + t631 * t784;
t566 = -t656 - t657;
t565 = t604 * t780 + t820;
t564 = t602 * t780 - t820;
t563 = t604 * t779 - t819;
t562 = t602 * t779 + t819;
t561 = -pkin(3) * t672 + qJ(4) * t653 - t859;
t560 = t595 * t785 + t672 * t789;
t559 = -t595 * t789 + t672 * t785;
t558 = -pkin(3) * t669 + qJ(4) * t631 + t858;
t556 = -qJD(6) * t665 - t812;
t552 = t567 * t785 + t669 * t789;
t551 = -t614 * t784 + t616 * t788;
t550 = -t567 * t789 + t669 * t785;
t549 = t614 * t788 + t616 * t784;
t548 = -t613 * t788 - t615 * t784;
t547 = -t607 * t787 - t611 * t783;
t546 = t608 * t787 - t610 * t783;
t545 = -t607 * t783 + t611 * t787;
t544 = t608 * t783 + t610 * t787;
t543 = t632 * t786 - t863;
t542 = -t633 * t782 + t882;
t541 = t632 * t782 + t862;
t540 = t633 * t786 + t884;
t539 = -t617 * t782 - t862;
t538 = t589 * t780 - t607 * t779;
t537 = t588 * t780 - t611 * t779;
t536 = t617 * t786 - t863;
t535 = t589 * t779 + t607 * t780;
t534 = t588 * t779 + t611 * t780;
t533 = t578 * t780 + t610 * t779;
t532 = t578 * t779 - t610 * t780;
t531 = -t591 * t788 - t592 * t784;
t530 = -t635 + t796;
t525 = (qJD(6) + t728) * t665 + t812;
t524 = t573 * t780 - t608 * t779;
t523 = t573 * t779 + t608 * t780;
t522 = t549 * t785 + t667 * t789;
t521 = -t549 * t789 + t667 * t785;
t520 = -t665 * t855 - t786 * t796;
t519 = t665 * t854 - t782 * t796;
t518 = -t556 * t782 + t662 * t854;
t517 = t556 * t786 + t662 * t855;
t516 = t546 * t780 - t666 * t779;
t515 = t546 * t779 + t666 * t780;
t514 = t590 * t786 - t884;
t513 = t590 * t782 + t882;
t510 = t547 * t780 - t634 * t779;
t509 = t547 * t779 + t634 * t780;
t508 = -t574 * t783 + t575 * t787;
t507 = t574 * t787 + t575 * t783;
t506 = -t563 * t788 - t565 * t784;
t505 = -t562 * t788 - t564 * t784;
t504 = pkin(3) * t658 + qJ(4) * t512;
t503 = -pkin(8) * t577 + t864;
t502 = t508 * t780 + t779 * t799;
t501 = t508 * t779 - t780 * t799;
t500 = -pkin(8) * t572 + t865;
t495 = -qJ(4) * t614 - t511;
t494 = -pkin(3) * t667 + qJ(4) * t616 + t512;
t493 = -t541 * t783 + t543 * t787;
t492 = -t540 * t783 + t542 * t787;
t491 = t541 * t787 + t543 * t783;
t490 = t540 * t787 + t542 * t783;
t489 = pkin(2) * t595 + pkin(3) * t650 - qJ(2) * t596 - t584;
t488 = -t536 * t783 + t539 * t787;
t487 = -t535 * t788 - t538 * t784;
t486 = -t534 * t788 - t537 * t784;
t485 = t536 * t787 + t539 * t783;
t484 = -pkin(4) * t577 + t498;
t482 = -pkin(4) * t572 + t497;
t480 = -t532 * t784 + t533 * t788;
t479 = t532 * t788 + t533 * t784;
t478 = pkin(2) * t549 + pkin(3) * t614 - qJ(2) * t551;
t477 = pkin(2) * t567 + pkin(3) * t630 - qJ(2) * t568 - t583;
t476 = -t526 * t786 - t530 * t782;
t475 = -t525 * t786 - t782 * t879;
t474 = -t526 * t782 + t530 * t786;
t473 = -t525 * t782 + t786 * t879;
t472 = -t523 * t784 + t524 * t788;
t471 = t523 * t788 + t524 * t784;
t469 = -t519 * t783 + t520 * t787;
t468 = -t517 * t783 + t518 * t787;
t467 = t519 * t787 + t520 * t783;
t466 = t517 * t787 + t518 * t783;
t463 = -t515 * t788 - t516 * t784;
t462 = -t513 * t783 + t514 * t787;
t461 = t513 * t787 + t514 * t783;
t460 = t512 * t788 - t867;
t459 = t512 * t784 + t866;
t458 = pkin(2) * t672 - t788 * t561 - t596 * t874 - t784 * t598;
t457 = -pkin(9) * t536 + t868;
t456 = -t509 * t784 + t510 * t788;
t455 = t509 * t788 + t510 * t784;
t454 = -pkin(9) * t513 + t869;
t453 = t459 * t785 - t658 * t789;
t452 = -t459 * t789 - t658 * t785;
t451 = t469 * t780 + t822;
t450 = t468 * t780 - t822;
t449 = t469 * t779 - t821;
t448 = t468 * t779 + t821;
t447 = t479 * t785 + t577 * t789;
t446 = -t479 * t789 + t577 * t785;
t445 = pkin(2) * t669 - t788 * t558 - t568 * t874 - t784 * t585;
t444 = t471 * t785 + t572 * t789;
t443 = -t471 * t789 + t572 * t785;
t442 = -t501 * t788 - t502 * t784;
t439 = t493 * t780 - t526 * t779;
t438 = t492 * t780 - t530 * t779;
t437 = t493 * t779 + t526 * t780;
t436 = t492 * t779 + t530 * t780;
t435 = t488 * t780 + t779 * t879;
t434 = t488 * t779 - t780 * t879;
t433 = t455 * t785 + t545 * t789;
t432 = -t455 * t789 + t545 * t785;
t431 = t462 * t780 + t525 * t779;
t430 = t462 * t779 - t525 * t780;
t429 = -pkin(5) * t879 + pkin(9) * t539 + t869;
t428 = -pkin(5) * t525 + pkin(9) * t514 - t868;
t427 = t441 * t780 + t554 * t779;
t426 = t441 * t779 - t554 * t780;
t425 = -pkin(8) * t545 - t440;
t421 = -t474 * t783 + t476 * t787;
t420 = -t473 * t783 + t475 * t787;
t419 = t474 * t787 + t476 * t783;
t418 = t473 * t787 + t475 * t783;
t417 = -qJ(4) * t532 - t484 * t779 + t503 * t780;
t416 = -qJ(4) * t523 - t482 * t779 + t500 * t780;
t415 = t420 * t780 - t605 * t779;
t414 = t420 * t779 + t605 * t780;
t413 = t421 * t780 + t566 * t779;
t412 = t421 * t779 - t566 * t780;
t411 = -pkin(3) * t577 + qJ(4) * t533 + t484 * t780 + t503 * t779;
t410 = -pkin(3) * t572 + qJ(4) * t524 + t482 * t780 + t500 * t779;
t409 = pkin(2) * t667 - t788 * t494 - t784 * t495 - t551 * t874;
t408 = -t449 * t788 - t451 * t784;
t407 = -t448 * t788 - t450 * t784;
t406 = pkin(2) * t459 + pkin(3) * t511 - qJ(2) * t460;
t405 = -t437 * t788 - t439 * t784;
t404 = -t436 * t788 - t438 * t784;
t403 = -qJ(4) * t509 + t425 * t780 + t545 * t873;
t402 = -t434 * t784 + t435 * t788;
t401 = t434 * t788 + t435 * t784;
t400 = -pkin(4) * t419 - pkin(5) * t474;
t399 = -t430 * t784 + t431 * t788;
t398 = t430 * t788 + t431 * t784;
t397 = qJ(4) * t510 + t779 * t425 + t545 * t815;
t396 = pkin(2) * t479 + pkin(3) * t532 - pkin(4) * t610 + pkin(8) * t578 - qJ(2) * t480 + t865;
t395 = -pkin(4) * t485 - pkin(5) * t536 + t424;
t394 = pkin(2) * t471 + pkin(3) * t523 + pkin(4) * t608 + pkin(8) * t573 - qJ(2) * t472 - t864;
t393 = -t426 * t784 + t427 * t788;
t392 = t426 * t788 + t427 * t784;
t391 = -pkin(2) * t658 + qJ(4) * t867 - t460 * t874 - t788 * t504;
t390 = -pkin(4) * t461 - pkin(5) * t513 + t423;
t389 = -pkin(8) * t485 - t429 * t783 + t457 * t787;
t388 = t401 * t785 + t485 * t789;
t387 = -t401 * t789 + t485 * t785;
t386 = -pkin(8) * t461 - t428 * t783 + t454 * t787;
t383 = t398 * t785 + t461 * t789;
t382 = -t398 * t789 + t461 * t785;
t381 = -qJ(4) * t426 + (-pkin(8) * t780 + t873) * t440;
t380 = -t414 * t788 - t415 * t784;
t379 = -pkin(5) * t499 + pkin(9) * t385;
t378 = -t412 * t784 + t413 * t788;
t377 = t412 * t788 + t413 * t784;
t376 = pkin(2) * t455 + pkin(3) * t509 + pkin(4) * t634 + pkin(8) * t547 - qJ(2) * t456 + t441;
t375 = t392 * t785 + t440 * t789;
t374 = -t392 * t789 + t440 * t785;
t373 = -pkin(9) * t474 - t384;
t372 = -pkin(5) * t566 + pkin(9) * t476 + t385;
t371 = qJ(4) * t427 + (-pkin(8) * t779 + t815) * t440;
t370 = pkin(2) * t577 - t788 * t411 - t784 * t417 - t480 * t874;
t369 = t377 * t785 + t419 * t789;
t368 = -t377 * t789 + t419 * t785;
t367 = pkin(2) * t572 - t788 * t410 - t784 * t416 - t472 * t874;
t366 = t385 * t787 - t871;
t365 = t385 * t783 + t870;
t364 = -qJ(4) * t434 + t389 * t780 - t395 * t779;
t363 = pkin(2) * t545 - t788 * t397 - t784 * t403 - t456 * t874;
t362 = t366 * t780 + t499 * t779;
t361 = t366 * t779 - t499 * t780;
t360 = -qJ(4) * t430 + t386 * t780 - t390 * t779;
t359 = -pkin(3) * t485 + qJ(4) * t435 + t389 * t779 + t395 * t780;
t358 = -pkin(3) * t461 + qJ(4) * t431 + t386 * t779 + t390 * t780;
t357 = pkin(2) * t392 + pkin(3) * t426 - pkin(4) * t554 + pkin(8) * t441 - qJ(2) * t393;
t356 = pkin(2) * t401 + pkin(3) * t434 - pkin(4) * t879 + pkin(8) * t488 - qJ(2) * t402 + t429 * t787 + t457 * t783;
t355 = -pkin(4) * t365 - pkin(5) * t384;
t354 = pkin(2) * t398 + pkin(3) * t430 - pkin(4) * t525 + pkin(8) * t462 - qJ(2) * t399 + t428 * t787 + t454 * t783;
t353 = -pkin(8) * t419 - t372 * t783 + t373 * t787;
t352 = -pkin(8) * t365 - pkin(9) * t870 - t379 * t783;
t351 = -t361 * t784 + t362 * t788;
t350 = t361 * t788 + t362 * t784;
t349 = -qJ(4) * t412 + t353 * t780 - t400 * t779;
t348 = pkin(2) * t440 - t788 * t371 - t784 * t381 - t393 * t874;
t347 = -pkin(3) * t419 + qJ(4) * t413 + t353 * t779 + t400 * t780;
t346 = pkin(2) * t377 + pkin(3) * t412 - pkin(4) * t566 + pkin(8) * t421 - qJ(2) * t378 + t372 * t787 + t373 * t783;
t345 = pkin(2) * t485 - t788 * t359 - t784 * t364 - t402 * t874;
t344 = t350 * t785 + t365 * t789;
t343 = -t350 * t789 + t365 * t785;
t342 = pkin(2) * t461 - t788 * t358 - t784 * t360 - t399 * t874;
t341 = -qJ(4) * t361 + t352 * t780 - t355 * t779;
t340 = -pkin(3) * t365 + qJ(4) * t362 + t352 * t779 + t355 * t780;
t339 = pkin(2) * t419 - t788 * t347 - t784 * t349 - t378 * t874;
t338 = pkin(2) * t350 + pkin(3) * t361 - pkin(4) * t499 + pkin(8) * t366 - pkin(9) * t871 - qJ(2) * t351 + t379 * t787;
t337 = pkin(2) * t365 - t788 * t340 - t784 * t341 - t351 * t874;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t754, -t753, 0, t707, 0, 0, 0, 0, 0, 0, 0, t754, t753, t680, 0, 0, 0, 0, 0, 0, t681, t682, t703, t619, 0, 0, 0, 0, 0, 0, t552, t560, t522, t453, 0, 0, 0, 0, 0, 0, t444, t447, t433, t375, 0, 0, 0, 0, 0, 0, t383, t388, t369, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t753, -t754, 0, t706, 0, 0, 0, 0, 0, 0, 0, -t753, t754, t677, 0, 0, 0, 0, 0, 0, t678, t679, t702, t618, 0, 0, 0, 0, 0, 0, t550, t559, t521, t452, 0, 0, 0, 0, 0, 0, t443, t446, t432, t374, 0, 0, 0, 0, 0, 0, t382, t387, t368, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t716, t717, 0, t646, 0, 0, 0, 0, 0, 0, t568, t596, t551, t460, 0, 0, 0, 0, 0, 0, t472, t480, t456, t393, 0, 0, 0, 0, 0, 0, t399, t402, t378, t351; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t753, 0, -t754, 0, -t805, -t804, -t706, -pkin(6) * t706, 0, -t753, t754, 0, 0, 0, -t677, t805, t804, -pkin(6) * t677 + (-pkin(1) * t785 + qJ(2) * t789) * g(3), -t722 * t785 + t807, -t698 * t785 + t756 * t789, -t714 * t785 + t788 * t824, -t721 * t785 - t807, -t712 * t785 - t784 * t824, -t746 * t785 + t770, -pkin(6) * t678 - t624 * t785 + t628 * t789, -pkin(6) * t679 - t623 * t785 + t629 * t789, -pkin(2) * t849 - pkin(6) * t702 - t637 * t785, -pkin(6) * t618 - t576 * t785 + t597 * t789, -t600 * t785 + t817, -t548 * t785 + t693 * t789, -t594 * t785 + t673 * t789, -t599 * t785 - t817, -t593 * t785 + t789 * t798, -t620 * t785 + t770, -pkin(6) * t550 - t445 * t785 + t477 * t789, -pkin(6) * t559 - t458 * t785 + t489 * t789, -pkin(6) * t521 - t409 * t785 + t478 * t789, -pkin(6) * t452 - t391 * t785 + t406 * t789, -t506 * t785 + t603 * t789, -t463 * t785 + t544 * t789, -t486 * t785 + t586 * t789, -t505 * t785 + t601 * t789, -t487 * t785 + t587 * t789, -t531 * t785 + t621 * t789, -pkin(6) * t443 - t367 * t785 + t394 * t789, -pkin(6) * t446 - t370 * t785 + t396 * t789, -pkin(6) * t432 - t363 * t785 + t376 * t789, -pkin(6) * t374 - t348 * t785 + t357 * t789, -t408 * t785 + t467 * t789, -t380 * t785 + t418 * t789, -t404 * t785 + t490 * t789, -t407 * t785 + t466 * t789, -t405 * t785 + t491 * t789, -t442 * t785 + t507 * t789, -pkin(6) * t382 - t342 * t785 + t354 * t789, -pkin(6) * t387 - t345 * t785 + t356 * t789, -pkin(6) * t368 - t339 * t785 + t346 * t789, -pkin(6) * t343 - t337 * t785 + t338 * t789; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t754, 0, t753, 0, t804, -t805, t707, pkin(6) * t707, 0, -t754, -t753, 0, 0, 0, t680, -t804, t805, pkin(6) * t680 + (pkin(1) * t789 + qJ(2) * t785) * g(3), t722 * t789 + t808, t698 * t789 + t756 * t785, t714 * t789 + t785 * t825, t721 * t789 - t808, t712 * t789 - t784 * t826, t746 * t789 + t768, pkin(6) * t681 + t624 * t789 + t628 * t785, pkin(6) * t682 + t623 * t789 + t629 * t785, -pkin(2) * t850 + pkin(6) * t703 + t637 * t789, pkin(6) * t619 + t576 * t789 + t597 * t785, t600 * t789 + t818, t548 * t789 + t693 * t785, t594 * t789 + t673 * t785, t599 * t789 - t818, t593 * t789 + t785 * t798, t620 * t789 + t768, pkin(6) * t552 + t445 * t789 + t477 * t785, pkin(6) * t560 + t458 * t789 + t489 * t785, pkin(6) * t522 + t409 * t789 + t478 * t785, pkin(6) * t453 + t391 * t789 + t406 * t785, t506 * t789 + t603 * t785, t463 * t789 + t544 * t785, t486 * t789 + t586 * t785, t505 * t789 + t601 * t785, t487 * t789 + t587 * t785, t531 * t789 + t621 * t785, pkin(6) * t444 + t367 * t789 + t394 * t785, pkin(6) * t447 + t370 * t789 + t396 * t785, pkin(6) * t433 + t363 * t789 + t376 * t785, pkin(6) * t375 + t348 * t789 + t357 * t785, t408 * t789 + t467 * t785, t380 * t789 + t418 * t785, t404 * t789 + t490 * t785, t407 * t789 + t466 * t785, t405 * t789 + t491 * t785, t442 * t789 + t507 * t785, pkin(6) * t383 + t342 * t789 + t354 * t785, pkin(6) * t388 + t345 * t789 + t356 * t785, pkin(6) * t369 + t339 * t789 + t346 * t785, pkin(6) * t344 + t337 * t789 + t338 * t785; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t759, t760, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t803 - 0.2e1 * t872, -t760 + t773 + 0.2e1 * t775, pkin(1) * t734 + qJ(2) * t727, (t750 - t814) * t788, -t748 * t788 - t751 * t784, -t764 * t784 + t845, (-t749 + t813) * t784, t762 * t788 - t848, 0, qJ(2) * t748 - t713 * t874 - t842, qJ(2) * t751 - t715 * t874 - t841, -qJ(2) * t755 + t752 * t874 - t645, -qJ(2) * t720 - t645 * t874, -t661 * t784 + t664 * t788, -t613 * t784 + t615 * t788, -t649 * t784 + t652 * t788, -t659 * t784 + t660 * t788, -t648 * t784 + t651 * t788, -t683 * t784 + t684 * t788, qJ(2) * t669 - t784 * t558 - t567 * t874 + t788 * t585, qJ(2) * t672 - t784 * t561 - t595 * t874 + t788 * t598, qJ(2) * t667 - t784 * t494 + t788 * t495 - t549 * t874, -qJ(2) * t658 - qJ(4) * t866 - t459 * t874 - t784 * t504, -t563 * t784 + t565 * t788, -t515 * t784 + t516 * t788, -t534 * t784 + t537 * t788, -t562 * t784 + t564 * t788, -t535 * t784 + t538 * t788, -t591 * t784 + t592 * t788, qJ(2) * t572 - t784 * t410 + t788 * t416 - t471 * t874, qJ(2) * t577 - t784 * t411 + t788 * t417 - t479 * t874, qJ(2) * t545 - t784 * t397 + t788 * t403 - t455 * t874, qJ(2) * t440 - t784 * t371 + t788 * t381 - t392 * t874, -t449 * t784 + t451 * t788, -t414 * t784 + t415 * t788, -t436 * t784 + t438 * t788, -t448 * t784 + t450 * t788, -t437 * t784 + t439 * t788, -t501 * t784 + t502 * t788, qJ(2) * t461 - t784 * t358 + t788 * t360 - t398 * t874, qJ(2) * t485 - t784 * t359 + t788 * t364 - t401 * t874, qJ(2) * t419 - t784 * t347 + t788 * t349 - t377 * t874, qJ(2) * t365 - t784 * t340 + t788 * t341 - t350 * t874;];
tauB_reg  = t1;
