% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:59:38
% EndTime: 2019-03-09 03:59:50
% DurationCPUTime: 6.95s
% Computational Cost: add. (12027->607), mult. (24241->755), div. (0->0), fcn. (17102->14), ass. (0->294)
t236 = sin(qJ(5));
t240 = cos(qJ(5));
t244 = -pkin(1) - pkin(7);
t186 = qJD(1) * t244 + qJD(2);
t241 = cos(qJ(3));
t331 = qJD(1) * t241;
t147 = -qJ(4) * t331 + t241 * t186;
t139 = qJD(3) * pkin(3) + t147;
t233 = sin(pkin(10));
t237 = sin(qJ(3));
t291 = -qJ(4) * qJD(1) + t186;
t146 = t291 * t237;
t372 = cos(pkin(10));
t299 = t372 * t146;
t83 = t233 * t139 + t299;
t73 = qJD(3) * pkin(8) + t83;
t261 = -t233 * t241 - t237 * t372;
t156 = t261 * qJD(1);
t298 = t372 * t241;
t332 = qJD(1) * t237;
t308 = t233 * t332;
t159 = qJD(1) * t298 - t308;
t174 = pkin(3) * t332 + qJD(1) * qJ(2) + qJD(4);
t84 = -pkin(4) * t156 - pkin(8) * t159 + t174;
t41 = t236 * t84 + t240 * t73;
t416 = qJD(5) - t156;
t425 = t41 * t416;
t200 = pkin(3) * t233 + pkin(8);
t225 = qJ(3) + pkin(10);
t212 = sin(t225);
t213 = cos(t225);
t242 = cos(qJ(1));
t223 = g(2) * t242;
t238 = sin(qJ(1));
t405 = g(1) * t238 - t223;
t254 = -g(3) * t212 + t213 * t405;
t185 = qJDD(1) * t244 + qJDD(2);
t172 = t241 * t185;
t322 = qJD(1) * qJD(3);
t306 = t237 * t322;
t317 = t241 * qJDD(1);
t321 = qJD(1) * qJD(4);
t330 = qJD(3) * t237;
t79 = -t241 * t321 - t186 * t330 + qJDD(3) * pkin(3) + t172 + (t306 - t317) * qJ(4);
t329 = qJD(3) * t241;
t89 = t291 * t329 + (-qJ(4) * qJDD(1) + t185 - t321) * t237;
t384 = t233 * t89 - t372 * t79;
t38 = -qJDD(3) * pkin(4) + t384;
t424 = qJD(5) * t200 * t416 + t254 + t38;
t40 = -t236 * t73 + t240 * t84;
t327 = qJD(5) * t240;
t328 = qJD(5) * t236;
t43 = t233 * t79 + t372 * t89;
t39 = qJDD(3) * pkin(8) + t43;
t297 = qJD(3) * t372;
t278 = qJD(1) * t297;
t294 = qJDD(1) * t372;
t312 = t233 * t317 + t237 * t294 + t241 * t278;
t114 = t233 * t306 - t312;
t305 = t241 * t322;
t318 = t237 * qJDD(1);
t420 = t305 + t318;
t115 = t233 * t420 + t237 * t278 - t241 * t294;
t227 = qJDD(1) * qJ(2);
t228 = qJD(1) * qJD(2);
t130 = pkin(3) * t420 + qJDD(4) + t227 + t228;
t46 = -pkin(4) * t114 + pkin(8) * t115 + t130;
t8 = t236 * t46 + t240 * t39 + t84 * t327 - t328 * t73;
t277 = -t40 * t416 + t8;
t125 = -t240 * qJD(3) + t159 * t236;
t127 = qJD(3) * t236 + t159 * t240;
t235 = sin(qJ(6));
t239 = cos(qJ(6));
t272 = t125 * t235 - t239 * t127;
t64 = t239 * t125 + t127 * t235;
t388 = t64 * t272;
t345 = t239 * t240;
t352 = t235 * t236;
t170 = -t345 + t352;
t316 = qJD(5) + qJD(6);
t325 = qJD(6) * t239;
t377 = -t170 * t156 - t239 * t327 - t240 * t325 + t316 * t352;
t351 = t235 * t240;
t171 = t236 * t239 + t351;
t118 = t316 * t171;
t376 = -t171 * t156 + t118;
t387 = pkin(9) + t200;
t300 = qJD(5) * t387;
t361 = t156 * t236;
t132 = t233 * t146;
t95 = t147 * t372 - t132;
t97 = pkin(3) * t331 + pkin(4) * t159 - pkin(8) * t156;
t48 = t236 * t97 + t240 * t95;
t423 = -pkin(9) * t361 + t236 * t300 + t48;
t47 = -t236 * t95 + t240 * t97;
t422 = -pkin(5) * t159 - t47 + (pkin(9) * t156 - t300) * t240;
t421 = -qJD(3) * qJD(5) + t115;
t419 = t328 - t361;
t281 = g(1) * t242 + g(2) * t238;
t246 = qJD(1) ^ 2;
t418 = -t246 * qJ(2) - t405;
t292 = t240 * t416;
t110 = -qJDD(5) + t114;
t350 = t236 * t110;
t417 = t292 * t416 - t350;
t415 = t272 ^ 2 - t64 ^ 2;
t143 = qJD(6) + t416;
t313 = t159 * t327 - t236 * t421;
t264 = qJDD(3) * t240 - t313;
t326 = qJD(6) * t235;
t61 = -t236 * qJDD(3) + t159 * t328 + t240 * t421;
t19 = t125 * t325 + t127 * t326 - t235 * t264 + t239 * t61;
t414 = t143 * t64 - t19;
t29 = -pkin(9) * t127 + t40;
t26 = pkin(5) * t416 + t29;
t30 = -pkin(9) * t125 + t41;
t45 = t240 * t46;
t9 = -qJD(5) * t41 - t236 * t39 + t45;
t6 = -t110 * pkin(5) + t61 * pkin(9) + t9;
t7 = pkin(9) * t264 + t8;
t1 = t239 * (qJD(6) * t26 + t7) + t235 * t6 - t30 * t326;
t232 = qJ(5) + qJ(6);
t218 = cos(t232);
t354 = t218 * t238;
t217 = sin(t232);
t355 = t217 * t242;
t136 = t212 * t354 + t355;
t353 = t218 * t242;
t356 = t217 * t238;
t138 = t212 * t353 - t356;
t391 = g(3) * t213;
t82 = t139 * t372 - t132;
t72 = -qJD(3) * pkin(4) - t82;
t54 = t125 * pkin(5) + t72;
t413 = g(1) * t136 - g(2) * t138 + t218 * t391 + t54 * t64 - t1;
t135 = -t212 * t356 + t353;
t137 = t212 * t355 + t354;
t379 = t239 * t30;
t11 = t235 * t26 + t379;
t2 = -qJD(6) * t11 - t235 * t7 + t239 * t6;
t412 = -g(1) * t135 - g(2) * t137 + t217 * t391 + t54 * t272 + t2;
t252 = qJD(6) * t272 + t235 * t61 + t239 * t264;
t411 = -t143 * t272 + t252;
t408 = t170 * t261;
t407 = t171 * t261;
t230 = t237 ^ 2;
t231 = t241 ^ 2;
t335 = t230 + t231;
t295 = t335 * t185;
t169 = -t233 * t237 + t298;
t221 = t237 * pkin(3);
t202 = qJ(2) + t221;
t113 = -pkin(4) * t261 - pkin(8) * t169 + t202;
t342 = qJ(4) - t244;
t175 = t342 * t237;
t296 = t342 * t241;
t120 = -t175 * t372 - t233 * t296;
t116 = t240 * t120;
t60 = t236 * t113 + t116;
t234 = -qJ(4) - pkin(7);
t406 = t242 * t221 + t238 * t234;
t344 = t240 * t242;
t348 = t236 * t238;
t149 = -t212 * t348 + t344;
t346 = t238 * t240;
t347 = t236 * t242;
t151 = t212 * t347 + t346;
t404 = -g(1) * t149 - g(2) * t151;
t315 = 0.2e1 * t228;
t403 = 0.2e1 * t227 + t315 - t281;
t402 = -t170 * t19 - t272 * t376;
t108 = -qJDD(6) + t110;
t401 = -t108 * t171 - t143 * t377;
t400 = t159 ^ 2;
t398 = pkin(3) * t241;
t397 = pkin(5) * t236;
t390 = g(3) * t237;
t389 = t240 * pkin(5);
t166 = t387 * t236;
t167 = t387 * t240;
t111 = -t166 * t239 - t167 * t235;
t386 = qJD(6) * t111 + t235 * t422 - t239 * t423;
t112 = -t166 * t235 + t167 * t239;
t385 = -qJD(6) * t112 + t235 * t423 + t239 * t422;
t383 = t159 * t64;
t382 = t159 * t272;
t380 = t235 * t30;
t378 = t61 * t236;
t158 = t233 * t330 - t241 * t297;
t375 = -t170 * qJD(1) - t171 * t158 + t316 * t408;
t374 = t171 * qJD(1) - t170 * t158 - t316 * t407;
t56 = t236 * t264;
t373 = -t125 * t327 + t56;
t371 = pkin(1) * qJDD(1);
t369 = t125 * t156;
t368 = t125 * t159;
t367 = t125 * t236;
t366 = t125 * t240;
t365 = t127 * t125;
t364 = t127 * t159;
t363 = t127 * t236;
t362 = t127 * t240;
t360 = t159 * t156;
t161 = t261 * qJD(3);
t359 = t161 * t240;
t358 = t169 * t236;
t357 = t169 * t240;
t349 = t236 * t161;
t99 = t240 * t110;
t341 = t161 * qJD(3) + t169 * qJDD(3);
t340 = t281 * t213;
t339 = (t315 + t227) * qJ(2);
t338 = t242 * pkin(1) + t238 * qJ(2);
t336 = t230 - t231;
t245 = qJD(3) ^ 2;
t334 = -t245 - t246;
t333 = qJD(1) * t174;
t324 = t156 * qJD(3);
t190 = pkin(3) * t329 + qJD(2);
t319 = qJDD(3) * t237;
t314 = t241 * t246 * t237;
t311 = t238 * t221 + t338;
t310 = t169 * t328;
t220 = t242 * qJ(2);
t304 = -t238 * pkin(1) + t220;
t144 = -qJD(3) * t296 - t237 * qJD(4);
t255 = -t241 * qJD(4) + t330 * t342;
t88 = t144 * t372 + t233 * t255;
t96 = -pkin(4) * t158 - pkin(8) * t161 + t190;
t301 = -t236 * t88 + t240 * t96;
t59 = t240 * t113 - t120 * t236;
t87 = t233 * t144 - t372 * t255;
t94 = t147 * t233 + t299;
t119 = -t175 * t233 + t372 * t296;
t293 = t236 * t416;
t290 = t335 * qJDD(1);
t289 = qJDD(2) - t371;
t288 = -qJD(5) * t261 + qJD(1);
t287 = t171 * t252 + t377 * t64;
t286 = t170 * t108 - t143 * t376;
t285 = t237 * t305;
t284 = pkin(5) * t419 - t94;
t201 = -pkin(3) * t372 - pkin(4);
t283 = pkin(4) * t213 + pkin(8) * t212;
t282 = pkin(4) * t212 - pkin(8) * t213;
t37 = -pkin(5) * t261 - pkin(9) * t357 + t59;
t49 = -pkin(9) * t358 + t60;
t21 = -t235 * t49 + t239 * t37;
t22 = t235 * t37 + t239 * t49;
t276 = t236 * t41 + t240 * t40;
t275 = t236 * t40 - t240 * t41;
t274 = t114 * t261 + t156 * t158;
t273 = -t115 * t169 + t159 * t161;
t271 = t362 + t367;
t207 = pkin(4) + t389;
t243 = -pkin(9) - pkin(8);
t270 = t207 * t213 - t212 * t243;
t269 = t207 * t212 + t213 * t243;
t268 = t304 + t406;
t267 = qJD(3) * t158 + qJDD(3) * t261;
t266 = -t416 * t419 - t99;
t265 = -t242 * t234 + t311;
t263 = t169 * t327 + t349;
t262 = -t310 + t359;
t24 = t113 * t327 - t120 * t328 + t236 * t96 + t240 * t88;
t260 = t212 * t405 + t391;
t259 = t200 * t110 + t416 * t72;
t258 = 0.2e1 * qJ(2) * t322 + qJDD(3) * t244;
t256 = t264 * t240;
t251 = -qJD(5) * t276 - t9 * t236 + t8 * t240;
t250 = -t158 * t83 + t161 * t82 - t169 * t384 - t261 * t43 - t405;
t249 = -t244 * t245 + t403;
t215 = qJDD(3) * t241;
t197 = t238 * t398;
t178 = t201 - t389;
t155 = t156 ^ 2;
t152 = t212 * t344 - t348;
t150 = t212 * t346 + t347;
t103 = t170 * t169;
t101 = t171 * t169;
t80 = pkin(5) * t358 + t119;
t51 = pkin(5) * t263 + t87;
t34 = t161 * t351 - t235 * t310 - t326 * t358 + (t316 * t357 + t349) * t239;
t32 = t118 * t169 - t161 * t345 + t235 * t349;
t25 = -qJD(5) * t60 + t301;
t23 = -pkin(5) * t264 + t38;
t18 = -pkin(9) * t263 + t24;
t16 = -pkin(9) * t359 - t158 * pkin(5) + (-t116 + (pkin(9) * t169 - t113) * t236) * qJD(5) + t301;
t13 = t239 * t29 - t380;
t12 = -t235 * t29 - t379;
t10 = t239 * t26 - t380;
t4 = -qJD(6) * t22 + t239 * t16 - t235 * t18;
t3 = qJD(6) * t21 + t235 * t16 + t239 * t18;
t5 = [0, 0, 0, 0, 0, qJDD(1), t405, t281, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t405 - 0.2e1 * t371, t403, -pkin(1) * t289 - g(1) * t304 - g(2) * t338 + t339, qJDD(1) * t231 - 0.2e1 * t285, -0.2e1 * t237 * t317 + 0.2e1 * t322 * t336, -t237 * t245 + t215, qJDD(1) * t230 + 0.2e1 * t285, -t241 * t245 - t319, 0, t237 * t249 + t241 * t258, -t237 * t258 + t241 * t249, -t244 * t290 - t295 + t405, -g(1) * (t238 * t244 + t220) - g(2) * (pkin(7) * t242 + t338) + t244 * t295 + t339, t273, t114 * t169 - t115 * t261 + t156 * t161 + t158 * t159, t341, t274, t267, 0, -t87 * qJD(3) - t119 * qJDD(3) - t202 * t114 - t130 * t261 - t190 * t156 - t174 * t158 - t212 * t281, -qJD(3) * t88 - qJDD(3) * t120 - t115 * t202 + t130 * t169 + t159 * t190 + t161 * t174 - t340, t114 * t120 - t115 * t119 + t156 * t88 + t159 * t87 - t250, -g(1) * t268 - g(2) * t265 + t119 * t384 + t43 * t120 + t130 * t202 + t174 * t190 - t82 * t87 + t83 * t88, t127 * t262 - t357 * t61 -(t363 + t366) * t161 + (t256 + t378 + (-t362 + t367) * qJD(5)) * t169, -t127 * t158 - t169 * t99 + t261 * t61 + t262 * t416, t125 * t263 - t169 * t56, t125 * t158 + t169 * t350 - t261 * t264 - t263 * t416, t110 * t261 - t158 * t416, t25 * t416 - t59 * t110 - t9 * t261 - t40 * t158 + t87 * t125 - t119 * t264 + t72 * t349 - g(1) * t152 - g(2) * t150 + (t38 * t236 + t327 * t72) * t169, t72 * t359 + g(1) * t151 - g(2) * t149 + t60 * t110 - t119 * t61 + t87 * t127 - t24 * t416 + t41 * t158 + t8 * t261 + (t38 * t240 - t328 * t72) * t169, -t24 * t125 + t60 * t264 - t25 * t127 + t59 * t61 - t276 * t161 + (qJD(5) * t275 - t8 * t236 - t9 * t240) * t169 + t340, t8 * t60 + t41 * t24 + t9 * t59 + t40 * t25 + t38 * t119 + t72 * t87 - g(1) * (t242 * t282 + t268) - g(2) * (t238 * t282 + t265) t103 * t19 + t272 * t32, t101 * t19 - t103 * t252 + t272 * t34 + t32 * t64, t103 * t108 - t143 * t32 + t158 * t272 + t19 * t261, -t101 * t252 + t34 * t64, t101 * t108 - t143 * t34 + t158 * t64 - t252 * t261, t108 * t261 - t143 * t158, -g(1) * t138 - g(2) * t136 - t10 * t158 + t101 * t23 - t108 * t21 + t143 * t4 - t2 * t261 - t252 * t80 + t34 * t54 + t51 * t64, g(1) * t137 - g(2) * t135 + t1 * t261 - t103 * t23 + t108 * t22 + t11 * t158 - t143 * t3 - t19 * t80 - t272 * t51 - t32 * t54, -t1 * t101 + t10 * t32 + t103 * t2 - t11 * t34 + t19 * t21 + t22 * t252 + t272 * t4 - t3 * t64 + t340, t1 * t22 + t11 * t3 + t2 * t21 + t10 * t4 + t23 * t80 + t54 * t51 - g(1) * (t220 + t406) - g(2) * t311 + (-g(1) * t269 - g(2) * (-t234 + t397)) * t242 + (-g(1) * (-pkin(1) - t397) - g(2) * t269) * t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t246, t418 + t289, 0, 0, 0, 0, 0, 0, t237 * t334 + t215, t241 * t334 - t319, -t290, t295 + t418, 0, 0, 0, 0, 0, 0, qJD(1) * t156 + t341, -qJD(1) * t159 + t267, -t273 - t274, t250 - t333, 0, 0, 0, 0, 0, 0, -t261 * t350 - t161 * t125 + t169 * t264 + (t236 * t158 - t240 * t288) * t416, -t261 * t99 - t161 * t127 + t169 * t61 + (t240 * t158 + t236 * t288) * t416 (-t363 + t366) * t158 + t271 * qJD(1) - (qJD(5) * t271 + t256 - t378) * t261, -qJD(1) * t276 + t158 * t275 - t72 * t161 - t38 * t169 - t251 * t261 - t405, 0, 0, 0, 0, 0, 0, -t108 * t407 - t143 * t375 - t161 * t64 + t169 * t252, t108 * t408 + t143 * t374 + t161 * t272 + t169 * t19, t19 * t407 + t252 * t408 - t272 * t375 + t374 * t64, t1 * t408 - t10 * t375 - t11 * t374 - t54 * t161 - t23 * t169 + t2 * t407 - t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, -t336 * t246, t317, -t314, -t318, qJDD(3), t241 * t418 + t172 + t390, g(3) * t241 + (-t185 - t418) * t237, 0, 0, -t360, -t155 + t400, -t115 - t324, t360 (t159 + t308) * qJD(3) - t312, qJDD(3), t94 * qJD(3) - t174 * t159 + (qJDD(3) * t372 + t156 * t331) * pkin(3) - t254 - t384, t95 * qJD(3) - t174 * t156 + (-qJDD(3) * t233 - t159 * t331) * pkin(3) + t260 - t43 (t83 - t94) * t159 - (-t82 + t95) * t156 + (t114 * t233 + t115 * t372) * pkin(3), t82 * t94 - t83 * t95 + (-t372 * t384 + t390 + t233 * t43 + (-t405 - t333) * t241) * pkin(3), t127 * t292 - t378 (-t61 + t369) * t240 - t416 * t363 + t373, -t364 + t417, t125 * t293 + t256, t266 + t368, -t416 * t159, t201 * t313 - t47 * t416 - t40 * t159 - t94 * t125 + t259 * t236 + (-t201 * qJDD(3) - t424) * t240, -t94 * t127 + t41 * t159 - t201 * t61 + t236 * t424 + t259 * t240 + t48 * t416, t48 * t125 + t47 * t127 + ((qJD(5) * t127 + t264) * t200 + t277) * t240 + (t41 * t156 - t200 * t61 - t9 + (t125 * t200 - t41) * qJD(5)) * t236 - t260, t38 * t201 - t41 * t48 - t40 * t47 - t72 * t94 - g(1) * (t238 * t283 + t197) - g(3) * (-t221 - t282) - (-t283 - t398) * t223 + t251 * t200, -t171 * t19 + t272 * t377, t287 - t402, t382 + t401, -t170 * t252 + t376 * t64, t286 + t383, -t143 * t159, -t10 * t159 - t111 * t108 + t143 * t385 + t23 * t170 - t178 * t252 - t218 * t254 + t284 * t64 + t376 * t54, t112 * t108 + t11 * t159 - t143 * t386 + t23 * t171 - t178 * t19 + t217 * t254 - t272 * t284 - t377 * t54, -t1 * t170 + t10 * t377 - t11 * t376 + t111 * t19 + t112 * t252 - t2 * t171 + t272 * t385 - t386 * t64 - t260, t1 * t112 + t2 * t111 + t23 * t178 - g(1) * (t238 * t270 + t197) - g(3) * (-t221 - t269) + t284 * t54 + t386 * t11 + t385 * t10 - (-t270 - t398) * t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t159 - t308) * qJD(3) + t312, -t115 + t324, -t155 - t400, -t156 * t83 + t159 * t82 + t130 - t281, 0, 0, 0, 0, 0, 0, t266 - t368, -t364 - t417 (t61 + t369) * t240 + t127 * t293 + t373, -t72 * t159 + (t9 + t425) * t240 + t277 * t236 - t281, 0, 0, 0, 0, 0, 0, t286 - t383, t382 - t401, t287 + t402, t1 * t171 - t10 * t376 - t11 * t377 - t54 * t159 - t2 * t170 - t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t365, -t125 ^ 2 + t127 ^ 2, t125 * t416 - t61, -t365, t127 * t416 + t264, -t110, -t73 * t327 - t72 * t127 + t425 + t45 + (-qJD(5) * t84 - t39 + t391) * t236 + t404, g(1) * t150 - g(2) * t152 + t125 * t72 + t240 * t391 - t277, 0, 0, -t388, t415, t414, t388, t411, -t108, -t12 * t143 + (-t108 * t239 - t127 * t64 - t143 * t326) * pkin(5) + t412, t13 * t143 + (t108 * t235 + t127 * t272 - t143 * t325) * pkin(5) + t413, -t10 * t64 - t11 * t272 - t12 * t272 + t13 * t64 + (t19 * t239 + t252 * t235 + (-t235 * t272 - t239 * t64) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t235 + t2 * t239 - t54 * t127 + t236 * t391 + (-t10 * t235 + t11 * t239) * qJD(6) + t404) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t388, t415, t414, t388, t411, -t108, t11 * t143 + t412, t10 * t143 + t413, 0, 0;];
tau_reg  = t5;
