% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 08:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 08:28:29
% EndTime: 2019-05-05 08:29:31
% DurationCPUTime: 54.15s
% Computational Cost: add. (124142->878), mult. (240722->1352), div. (0->0), fcn. (171786->12), ass. (0->646)
t939 = sin(qJ(4));
t940 = sin(qJ(3));
t1055 = qJD(2) * t940;
t943 = cos(qJ(4));
t891 = -t943 * qJD(3) + t1055 * t939;
t893 = t939 * qJD(3) + t1055 * t943;
t1074 = t891 * t893;
t944 = cos(qJ(3));
t1046 = qJDD(2) * t944;
t1050 = qJD(2) * qJD(3);
t921 = t940 * t1050;
t897 = -t921 + t1046;
t888 = -qJDD(4) + t897;
t952 = t888 - t1074;
t1081 = t952 * t939;
t1054 = qJD(2) * t944;
t918 = -qJD(4) + t1054;
t1104 = t918 ^ 2;
t1105 = t891 ^ 2;
t865 = t1105 - t1104;
t760 = t865 * t943 + t1081;
t1037 = t944 * t1050;
t1048 = qJDD(2) * t940;
t896 = t1037 + t1048;
t1031 = -t943 * qJDD(3) + t939 * t896;
t780 = (qJD(4) + t918) * t893 + t1031;
t673 = t760 * t940 + t780 * t944;
t933 = sin(pkin(6));
t935 = cos(pkin(6));
t677 = t760 * t944 - t780 * t940;
t1080 = t952 * t943;
t757 = t865 * t939 - t1080;
t941 = sin(qJ(2));
t945 = cos(qJ(2));
t990 = t677 * t941 - t757 * t945;
t564 = -t933 * t673 + t935 * t990;
t618 = t677 * t945 + t757 * t941;
t932 = sin(pkin(11));
t934 = cos(pkin(11));
t1242 = t564 * t932 - t618 * t934;
t1241 = t564 * t934 + t618 * t932;
t1073 = t891 * t918;
t977 = -t939 * qJDD(3) - t943 * t896;
t950 = qJD(4) * t891 + t977;
t1117 = t1073 - t950;
t1086 = t1117 * t939;
t1052 = qJD(4) - t918;
t779 = t1052 * t893 + t1031;
t691 = -t779 * t943 - t1086;
t887 = t893 ^ 2;
t845 = t887 - t1105;
t654 = t691 * t940 - t845 * t944;
t656 = t691 * t944 + t845 * t940;
t685 = t1117 * t943 - t779 * t939;
t997 = t656 * t941 - t685 * t945;
t529 = -t933 * t654 + t935 * t997;
t589 = t656 * t945 + t685 * t941;
t1240 = t529 * t932 - t589 * t934;
t1239 = t529 * t934 + t589 * t932;
t1234 = t935 * t673 + t933 * t990;
t1233 = t935 * t654 + t933 * t997;
t1116 = t1073 + t950;
t1159 = t1116 * t943 - t780 * t939;
t1115 = t887 + t1105;
t1158 = -t1116 * t939 - t780 * t943;
t1184 = -t1115 * t940 + t1158 * t944;
t1194 = t1159 * t941 + t1184 * t945;
t1185 = t1115 * t944 + t1158 * t940;
t1195 = -t1159 * t945 + t1184 * t941;
t1217 = -t1185 * t933 + t1195 * t935;
t1223 = t1194 * t932 + t1217 * t934;
t1232 = qJ(1) * t1223;
t1224 = t1194 * t934 - t1217 * t932;
t1231 = qJ(1) * t1224;
t1230 = pkin(1) * t1217;
t1218 = t1185 * t935 + t1195 * t933;
t1229 = pkin(1) * t1218;
t1222 = (-t1217 * t935 - t1218 * t933) * pkin(7);
t1221 = pkin(7) * t1194;
t1032 = t888 + t1074;
t1079 = t1032 * t939;
t866 = -t887 + t1104;
t1136 = -t866 * t943 + t1079;
t1078 = t1032 * t943;
t1135 = -t866 * t939 - t1078;
t1152 = -t1116 * t940 + t1135 * t944;
t1182 = -t1136 * t941 + t1152 * t945;
t1153 = t1116 * t944 + t1135 * t940;
t1183 = t1136 * t945 + t1152 * t941;
t1196 = -t1153 * t933 + t1183 * t935;
t1216 = t1182 * t934 - t1196 * t932;
t1215 = t1182 * t932 + t1196 * t934;
t840 = -t887 - t1104;
t740 = t840 * t943 + t1081;
t1214 = pkin(2) * t740;
t1213 = pkin(3) * t740;
t730 = t840 * t939 - t1080;
t1212 = pkin(9) * t730;
t1211 = pkin(9) * t740;
t1210 = pkin(8) * t1184;
t1209 = pkin(8) * t1185;
t1208 = t730 * t940;
t1207 = t730 * t944;
t1206 = t740 * t941;
t1205 = t740 * t945;
t1198 = -pkin(2) * t1185 - pkin(3) * t1115 - pkin(9) * t1158;
t1197 = t1153 * t935 + t1183 * t933;
t1193 = pkin(9) * t1159;
t1066 = t918 * t939;
t1040 = t891 * t1066;
t1065 = t918 * t943;
t861 = t893 * t1065;
t1020 = -t861 - t1040;
t1039 = t891 * t1065;
t860 = t893 * t1066;
t1021 = -t860 + t1039;
t1109 = t1021 * t944 - t888 * t940;
t1131 = -t1020 * t941 + t1109 * t945;
t1112 = t1021 * t940 + t944 * t888;
t1132 = t1020 * t945 + t1109 * t941;
t1154 = -t1112 * t933 + t1132 * t935;
t1181 = t1131 * t934 - t1154 * t932;
t1180 = t1131 * t932 + t1154 * t934;
t1042 = t940 * t1074;
t821 = qJD(4) * t893 + t1031;
t976 = t821 * t939 - t1039;
t1110 = t944 * t976 - t1042;
t975 = t821 * t943 + t1040;
t1129 = t1110 * t945 - t941 * t975;
t1041 = t944 * t1074;
t1111 = t940 * t976 + t1041;
t1130 = t1110 * t941 + t945 * t975;
t1156 = -t1111 * t933 + t1130 * t935;
t1179 = t1129 * t934 - t1156 * t932;
t1178 = t1129 * t932 + t1156 * t934;
t1114 = -t1104 - t1105;
t1134 = t1114 * t939 - t1078;
t1177 = pkin(2) * t1134;
t1176 = pkin(3) * t1134;
t1133 = t1114 * t943 + t1079;
t1175 = pkin(9) * t1133;
t1174 = pkin(9) * t1134;
t1171 = qJ(5) * t1117;
t1166 = t1133 * t940;
t1165 = t1133 * t944;
t1164 = t1134 * t941;
t1163 = t1134 * t945;
t777 = -t943 * t950 + t860;
t1022 = t944 * t777 + t1042;
t776 = t939 * t950 + t861;
t1160 = t1022 * t941 + t776 * t945;
t1157 = t1111 * t935 + t1130 * t933;
t1155 = t1112 * t935 + t1132 * t933;
t1151 = -2 * qJD(5);
t938 = sin(qJ(6));
t942 = cos(qJ(6));
t833 = -t942 * t891 + t893 * t938;
t835 = t891 * t938 + t893 * t942;
t769 = t835 * t833;
t881 = qJDD(6) + t888;
t1122 = -t769 + t881;
t1140 = t1122 * t938;
t1139 = t1122 * t942;
t1103 = qJD(3) ^ 2;
t1058 = g(3) - qJDD(1);
t1034 = t933 * t1058;
t1035 = g(1) * t932 - t934 * g(2);
t1137 = t935 * t1035 - t1034;
t904 = g(1) * t934 + g(2) * t932;
t812 = t1137 * t941 - t945 * t904;
t946 = qJD(2) ^ 2;
t795 = -t946 * pkin(2) + qJDD(2) * pkin(8) + t812;
t883 = t933 * t1035;
t1014 = t1058 * t935 + t883;
t859 = t944 * t1014;
t1100 = pkin(3) * t944;
t1025 = -pkin(9) * t940 - t1100;
t894 = t1025 * qJD(2);
t704 = (qJD(2) * t894 + t795) * t940 - qJDD(3) * pkin(3) - t1103 * pkin(9) + t859;
t1138 = t821 * pkin(4) - t1171 + t704;
t1023 = t940 * t777 - t1041;
t1107 = -t1023 * t933 + t1160 * t935;
t1108 = t1022 * t945 - t776 * t941;
t1128 = t1107 * t934 + t1108 * t932;
t1127 = -t1107 * t932 + t1108 * t934;
t811 = -t1137 * t945 - t941 * t904;
t724 = t811 * t941 + t812 * t945;
t1126 = t724 * t933;
t696 = -qJD(6) * t833 + t821 * t938 - t942 * t950;
t910 = qJD(6) + t918;
t802 = t910 * t833;
t1123 = t696 - t802;
t1119 = t932 * t1058;
t1118 = t934 * t1058;
t971 = t941 * t1014;
t970 = t945 * t1014;
t745 = -t940 * t1014 + t944 * t795;
t705 = -pkin(3) * t1103 + qJDD(3) * pkin(9) + t1054 * t894 + t745;
t1016 = -t897 + t921;
t1017 = t896 + t1037;
t794 = -qJDD(2) * pkin(2) - t946 * pkin(8) + t811;
t722 = pkin(3) * t1016 - pkin(9) * t1017 + t794;
t624 = t943 * t705 + t939 * t722;
t838 = pkin(4) * t891 - qJ(5) * t893;
t1015 = -t888 * qJ(5) + t1151 * t918 - t891 * t838 + t624;
t844 = -t1035 * t932 - t934 * t904;
t843 = t1035 * t934 - t932 * t904;
t1106 = t1023 * t935 + t1160 * t933;
t831 = t833 ^ 2;
t832 = t835 ^ 2;
t909 = t910 ^ 2;
t1102 = pkin(4) + pkin(5);
t1101 = pkin(3) * t940;
t1099 = pkin(4) * t943;
t1098 = pkin(7) * t935;
t1097 = qJ(5) * t943;
t1096 = t704 * t939;
t1095 = t704 * t943;
t726 = t769 + t881;
t1094 = t726 * t938;
t1093 = t726 * t942;
t1083 = t794 * t940;
t1082 = t794 * t944;
t1072 = t893 * t918;
t916 = t940 * t946 * t944;
t905 = -t916 + qJDD(3);
t1071 = t905 * t940;
t1070 = t905 * t944;
t906 = qJDD(3) + t916;
t1069 = t906 * t940;
t1068 = t910 * t938;
t1067 = t910 * t942;
t928 = t940 ^ 2;
t1064 = t928 * t946;
t1024 = pkin(5) * t918 - pkin(10) * t893;
t607 = (-pkin(4) * t918 + t1151) * t893 + t1138;
t579 = t821 * pkin(5) + pkin(10) * t1105 - t1024 * t893 + t607;
t1060 = t938 * t579;
t1059 = t942 * t579;
t623 = t939 * t705 - t943 * t722;
t1057 = t1115 - t1104;
t929 = t944 ^ 2;
t1056 = t928 + t929;
t1049 = qJDD(2) * t933;
t1047 = qJDD(2) * t941;
t1045 = qJDD(2) * t945;
t1044 = t940 * t769;
t1043 = t944 * t769;
t1036 = qJ(5) * t939 + pkin(3);
t1026 = t893 * t838 + qJDD(5) + t623;
t972 = t888 * pkin(4) + t1026;
t948 = -qJ(5) * t1104 + t972;
t561 = t1032 * pkin(5) + pkin(10) * t1116 + t948;
t600 = -pkin(4) * t1104 + t1015;
t566 = -pkin(5) * t1105 + t821 * pkin(10) - t1024 * t918 + t600;
t488 = -t942 * t561 + t938 * t566;
t744 = t940 * t795 + t859;
t652 = t744 * t940 + t944 * t745;
t1033 = -t942 * t821 - t938 * t950;
t1029 = t941 * t916;
t1028 = t945 * t916;
t651 = t744 * t944 - t745 * t940;
t899 = t1056 * qJDD(2);
t926 = t929 * t946;
t902 = t926 + t1064;
t841 = t899 * t945 - t902 * t941;
t1018 = pkin(7) * t841 + t651 * t941;
t489 = t938 * t561 + t942 * t566;
t438 = -t488 * t942 + t489 * t938;
t439 = t938 * t488 + t942 * t489;
t406 = t438 * t939 + t439 * t943;
t403 = t406 * t944 + t579 * t940;
t405 = -t438 * t943 + t439 * t939;
t1013 = t403 * t941 - t405 * t945;
t516 = t600 * t943 + t939 * t948;
t478 = t516 * t944 + t607 * t940;
t515 = t600 * t939 - t943 * t948;
t1012 = t478 * t941 - t515 * t945;
t648 = t696 + t802;
t951 = (-qJD(6) + t910) * t835 - t1033;
t575 = -t648 * t942 + t938 * t951;
t577 = t648 * t938 + t942 * t951;
t497 = t575 * t939 + t577 * t943;
t699 = -t831 - t832;
t480 = t497 * t944 - t699 * t940;
t495 = -t575 * t943 + t577 * t939;
t1011 = t480 * t941 - t495 * t945;
t644 = (qJD(6) + t910) * t835 + t1033;
t576 = -t1123 * t942 + t644 * t938;
t578 = -t1123 * t938 - t644 * t942;
t498 = -t576 * t939 + t578 * t943;
t762 = t832 - t831;
t487 = t498 * t944 - t762 * t940;
t496 = -t576 * t943 - t578 * t939;
t1010 = t487 * t941 + t496 * t945;
t737 = -t909 - t831;
t638 = t737 * t938 + t1139;
t639 = t737 * t942 - t1140;
t570 = t638 * t939 + t639 * t943;
t519 = t570 * t944 - t644 * t940;
t569 = -t638 * t943 + t639 * t939;
t1009 = t519 * t941 - t569 * t945;
t551 = t623 * t939 + t624 * t943;
t521 = t551 * t944 + t704 * t940;
t550 = -t623 * t943 + t624 * t939;
t1008 = t521 * t941 - t550 * t945;
t787 = -t832 - t909;
t661 = t787 * t942 - t1094;
t662 = -t787 * t938 - t1093;
t585 = t661 * t939 + t662 * t943;
t527 = -t1123 * t940 + t585 * t944;
t584 = -t661 * t943 + t662 * t939;
t1007 = t527 * t941 - t584 * t945;
t799 = -t832 + t909;
t667 = -t799 * t942 - t1140;
t669 = -t799 * t938 + t1139;
t593 = -t667 * t939 + t669 * t943;
t532 = t593 * t944 - t648 * t940;
t591 = -t667 * t943 - t669 * t939;
t1006 = t532 * t941 + t591 * t945;
t798 = t831 - t909;
t668 = -t798 * t938 - t1093;
t670 = t798 * t942 - t1094;
t594 = -t668 * t939 + t670 * t943;
t533 = t594 * t944 - t940 * t951;
t592 = -t668 * t943 - t670 * t939;
t1005 = t533 * t941 + t592 * t945;
t695 = -qJD(6) * t835 - t1033;
t640 = -t1068 * t833 - t695 * t942;
t641 = t1067 * t833 - t695 * t938;
t573 = -t640 * t939 + t641 * t943;
t543 = t573 * t944 + t1044;
t571 = -t640 * t943 - t641 * t939;
t1004 = t543 * t941 + t571 * t945;
t642 = -t1067 * t835 - t696 * t938;
t643 = -t1068 * t835 + t696 * t942;
t574 = -t642 * t939 + t643 * t943;
t544 = t574 * t944 - t1044;
t572 = -t642 * t943 - t643 * t939;
t1003 = t544 * t941 + t572 * t945;
t715 = (t833 * t938 + t835 * t942) * t910;
t716 = (-t833 * t942 + t835 * t938) * t910;
t626 = -t715 * t939 + t716 * t943;
t614 = t626 * t944 - t881 * t940;
t625 = -t715 * t943 - t716 * t939;
t1002 = t614 * t941 + t625 * t945;
t999 = t652 * t941 - t794 * t945;
t659 = -t1117 * t940 + t1207;
t996 = t659 * t941 + t1205;
t660 = t779 * t940 + t1165;
t995 = t660 * t941 - t1163;
t785 = t1052 * t891 + t977;
t665 = -t785 * t940 - t1207;
t994 = t665 * t941 - t1205;
t778 = t821 - t1072;
t666 = t778 * t940 + t1165;
t993 = t666 * t941 - t1163;
t723 = t945 * t811 - t941 * t812;
t895 = 0.2e1 * t1037 + t1048;
t898 = -0.2e1 * t921 + t1046;
t837 = -t895 * t940 + t898 * t944;
t903 = t926 - t1064;
t984 = t837 * t941 + t903 * t945;
t914 = -t926 - t1103;
t855 = t914 * t944 - t1069;
t983 = t855 * t941 + t898 * t945;
t912 = -t1064 - t1103;
t857 = -t912 * t940 - t1070;
t982 = t857 * t941 - t895 * t945;
t979 = t945 * t946 + t1047;
t875 = t979 * t935;
t900 = -t941 * t946 + t1045;
t981 = t875 * t934 + t900 * t932;
t825 = t875 * t932 - t900 * t934;
t980 = t899 * t941 + t902 * t945;
t889 = t1056 * t1050;
t978 = -qJDD(3) * t945 + t889 * t941;
t913 = t926 - t1103;
t854 = t913 * t944 - t1071;
t974 = -t1045 * t944 + t854 * t941;
t890 = t944 * t906;
t911 = -t1064 + t1103;
t856 = -t911 * t940 + t890;
t973 = -t1045 * t940 + t856 * t941;
t862 = -t1050 * t929 - t897 * t940;
t969 = t862 * t941 - t1028;
t863 = -t1050 * t928 + t896 * t944;
t968 = t863 * t941 + t1028;
t381 = -pkin(3) * t405 - qJ(5) * t439 + t1102 * t438;
t424 = -pkin(10) * t439 - t1102 * t579;
t432 = -pkin(10) * t438 - qJ(5) * t579;
t383 = -pkin(9) * t405 - t424 * t939 + t432 * t943;
t402 = t406 * t940 - t579 * t944;
t367 = -pkin(8) * t402 - t381 * t940 + t383 * t944;
t374 = -pkin(2) * t402 + pkin(3) * t579 - pkin(9) * t406 - t424 * t943 - t432 * t939;
t385 = t403 * t945 + t405 * t941;
t967 = pkin(7) * t385 + t367 * t941 + t374 * t945;
t426 = -pkin(10) * t577 + t1102 * t699 - t439;
t429 = -pkin(10) * t575 + qJ(5) * t699 - t438;
t388 = -pkin(9) * t495 - t426 * t939 + t429 * t943;
t436 = -pkin(3) * t495 - qJ(5) * t577 + t1102 * t575;
t479 = t497 * t940 + t699 * t944;
t382 = -pkin(8) * t479 + t388 * t944 - t436 * t940;
t386 = -pkin(2) * t479 - pkin(3) * t699 - pkin(9) * t497 - t426 * t943 - t429 * t939;
t441 = t480 * t945 + t495 * t941;
t966 = pkin(7) * t441 + t382 * t941 + t386 * t945;
t471 = -pkin(10) * t639 + t1102 * t644 - t1059;
t494 = -pkin(10) * t638 + qJ(5) * t644 - t1060;
t430 = -pkin(9) * t569 - t471 * t939 + t494 * t943;
t437 = -pkin(3) * t569 - qJ(5) * t639 + t1102 * t638 - t488;
t518 = t570 * t940 + t644 * t944;
t392 = -pkin(8) * t518 + t430 * t944 - t437 * t940;
t409 = -pkin(2) * t518 - pkin(3) * t644 - pkin(9) * t570 - t471 * t943 - t494 * t939;
t469 = t519 * t945 + t569 * t941;
t965 = pkin(7) * t469 + t392 * t941 + t409 * t945;
t472 = -pkin(10) * t662 + t1102 * t1123 + t1060;
t506 = -pkin(10) * t661 + qJ(5) * t1123 - t1059;
t434 = -pkin(9) * t584 - t472 * t939 + t506 * t943;
t440 = -pkin(3) * t584 - qJ(5) * t662 + t1102 * t661 - t489;
t526 = t1123 * t944 + t585 * t940;
t393 = -pkin(8) * t526 + t434 * t944 - t440 * t940;
t413 = -pkin(2) * t526 - pkin(3) * t1123 - pkin(9) * t585 - t472 * t943 - t506 * t939;
t481 = t527 * t945 + t584 * t941;
t964 = pkin(7) * t481 + t393 * t941 + t413 * t945;
t460 = -pkin(3) * t515 + pkin(4) * t948 - qJ(5) * t600;
t463 = -pkin(9) * t515 + (pkin(4) * t939 - t1097) * t607;
t477 = t516 * t940 - t607 * t944;
t407 = -pkin(8) * t477 - t460 * t940 + t463 * t944;
t425 = -pkin(2) * t477 - pkin(9) * t516 + (t1036 + t1099) * t607;
t447 = t478 * t945 + t515 * t941;
t963 = pkin(7) * t447 + t407 * t941 + t425 * t945;
t520 = t551 * t940 - t704 * t944;
t448 = -pkin(8) * t520 + (-pkin(9) * t944 + t1101) * t550;
t465 = -pkin(2) * t520 + pkin(3) * t704 - pkin(9) * t551;
t468 = t521 * t945 + t550 * t941;
t962 = pkin(7) * t468 + t448 * t941 + t465 * t945;
t580 = pkin(4) * t1057 + t1015;
t581 = qJ(5) * t1057 + t972;
t484 = -t580 * t939 + t581 * t943 - t1193;
t603 = -pkin(3) * t1159 - pkin(4) * t1116 + qJ(5) * t780;
t456 = t484 * t944 - t603 * t940 - t1209;
t466 = -t580 * t943 - t581 * t939 + t1198;
t961 = t456 * t941 + t466 * t945 + t1221;
t947 = 0.2e1 * qJD(5) * t893 - t1138;
t586 = pkin(4) * t1072 + t1171 + t947;
t534 = -pkin(4) * t1086 + t586 * t943 + t1211;
t536 = t1213 + qJ(5) * t952 + (t840 + t1104) * pkin(4) - t1015;
t657 = t1117 * t944 + t1208;
t462 = -pkin(8) * t657 + t534 * t944 - t536 * t940;
t499 = -pkin(2) * t657 - t1212 - t939 * t586 + (-pkin(3) - t1099) * t1117;
t605 = t659 * t945 - t1206;
t960 = pkin(7) * t605 + t462 * t941 + t499 * t945;
t587 = (-t778 + t1072) * pkin(4) + t947;
t535 = -t1097 * t778 - t587 * t939 - t1174;
t540 = -t1176 + (-t1114 - t1104) * qJ(5) + (t1032 + t888) * pkin(4) + t1026;
t664 = -t778 * t944 + t1166;
t464 = -pkin(8) * t664 + t535 * t944 - t540 * t940;
t504 = -pkin(2) * t664 + t1036 * t778 - t943 * t587 - t1175;
t609 = t666 * t945 + t1164;
t959 = pkin(7) * t609 + t464 * t941 + t504 * t945;
t517 = -t550 - t1193;
t470 = t1101 * t1159 + t517 * t944 - t1209;
t485 = t1198 - t551;
t958 = t470 * t941 + t485 * t945 + t1221;
t590 = t623 - t1176;
t627 = t1096 - t1174;
t658 = -t779 * t944 + t1166;
t507 = -pkin(8) * t658 - t590 * t940 + t627 * t944;
t552 = -pkin(2) * t658 + pkin(3) * t779 + t1095 - t1175;
t606 = t660 * t945 + t1164;
t957 = pkin(7) * t606 + t507 * t941 + t552 * t945;
t599 = t624 - t1213;
t629 = t1095 - t1211;
t663 = t785 * t944 - t1208;
t512 = -pkin(8) * t663 - t599 * t940 + t629 * t944;
t553 = -pkin(2) * t663 - pkin(3) * t785 - t1096 + t1212;
t608 = t665 * t945 + t1206;
t956 = pkin(7) * t608 + t512 * t941 + t553 * t945;
t851 = t914 * t940 + t890;
t700 = -pkin(2) * t851 + t744;
t738 = -pkin(8) * t851 + t1083;
t796 = t855 * t945 - t898 * t941;
t955 = pkin(7) * t796 + t700 * t945 + t738 * t941;
t853 = t912 * t944 - t1071;
t701 = -pkin(2) * t853 + t745;
t739 = -pkin(8) * t853 + t1082;
t797 = t857 * t945 + t895 * t941;
t954 = pkin(7) * t797 + t701 * t945 + t739 * t941;
t615 = t652 * t945 + t794 * t941;
t949 = pkin(7) * t615 - (-pkin(2) * t945 - pkin(8) * t941) * t651;
t876 = t900 * t935;
t874 = t900 * t933;
t873 = t979 * t933;
t864 = qJDD(3) * t941 + t889 * t945;
t852 = t911 * t944 + t1069;
t850 = t913 * t940 + t1070;
t849 = t1017 * t940;
t848 = t1016 * t944;
t842 = t978 * t935;
t836 = t895 * t944 + t898 * t940;
t830 = t980 * t935;
t829 = t980 * t933;
t826 = -t876 * t932 - t934 * t979;
t824 = t876 * t934 - t932 * t979;
t820 = t863 * t945 - t1029;
t819 = t862 * t945 + t1029;
t818 = t1047 * t940 + t856 * t945;
t817 = t1046 * t941 + t854 * t945;
t789 = t837 * t945 - t903 * t941;
t768 = -t970 + (t873 * t933 + t875 * t935) * pkin(7);
t767 = -t971 + (-t874 * t933 - t876 * t935) * pkin(7);
t751 = -t830 * t932 + t841 * t934;
t750 = t830 * t934 + t841 * t932;
t749 = -t933 * t849 + t935 * t968;
t748 = t933 * t848 + t935 * t969;
t747 = -t933 * t852 + t935 * t973;
t746 = -t933 * t850 + t935 * t974;
t735 = -t933 * t853 + t935 * t982;
t734 = -t933 * t851 + t935 * t983;
t733 = t935 * t853 + t933 * t982;
t732 = t935 * t851 + t933 * t983;
t721 = -t933 * t836 + t935 * t984;
t720 = pkin(2) * t898 + pkin(8) * t855 - t1082;
t719 = -pkin(2) * t895 + pkin(8) * t857 + t1083;
t714 = t724 * t935;
t698 = -pkin(1) * t874 - t1098 * t979 + t933 * t811 + t935 * t970;
t697 = pkin(1) * t873 - t1098 * t900 + t933 * t812 - t935 * t971;
t694 = t933 * t883 + (t1034 - t723) * t935;
t693 = -t1014 * t935 - t723 * t933;
t682 = -t735 * t932 + t797 * t934;
t681 = -t734 * t932 + t796 * t934;
t680 = t735 * t934 + t797 * t932;
t679 = t734 * t934 + t796 * t932;
t628 = pkin(2) * t902 + pkin(8) * t899 + t652;
t620 = -pkin(2) * t794 + pkin(8) * t652;
t613 = t626 * t940 + t881 * t944;
t612 = -pkin(1) * t693 + t1098 * t724;
t611 = -t694 * t932 + t724 * t934;
t610 = t694 * t934 + t724 * t932;
t604 = t945 * t651 + (-t829 * t933 - t830 * t935) * pkin(7);
t602 = (-t693 * t933 - t694 * t935) * pkin(7);
t568 = -t941 * t701 + t945 * t739 + (-t733 * t933 - t735 * t935) * pkin(7);
t567 = -t941 * t700 + t945 * t738 + (-t732 * t933 - t734 * t935) * pkin(7);
t559 = -t933 * t664 + t935 * t993;
t558 = -t933 * t663 + t935 * t994;
t557 = t935 * t664 + t933 * t993;
t556 = t935 * t663 + t933 * t994;
t555 = t651 * t933 + t935 * t999;
t554 = -t651 * t935 + t933 * t999;
t549 = -t933 * t658 + t935 * t995;
t548 = -t933 * t657 + t935 * t996;
t547 = t935 * t658 + t933 * t995;
t546 = t935 * t657 + t933 * t996;
t545 = t614 * t945 - t625 * t941;
t542 = t574 * t940 + t1043;
t541 = t573 * t940 - t1043;
t539 = -pkin(1) * t733 - t933 * t719 + t935 * t954;
t538 = -pkin(1) * t732 - t933 * t720 + t935 * t955;
t537 = -pkin(1) * t829 + t1018 * t935 - t933 * t628;
t531 = t594 * t940 + t944 * t951;
t530 = t593 * t940 + t648 * t944;
t514 = -t555 * t932 + t615 * t934;
t513 = t555 * t934 + t615 * t932;
t511 = -t559 * t932 + t609 * t934;
t510 = -t558 * t932 + t608 * t934;
t509 = t559 * t934 + t609 * t932;
t508 = t558 * t934 + t608 * t932;
t505 = t1002 * t935 - t933 * t613;
t503 = -t549 * t932 + t606 * t934;
t502 = -t548 * t932 + t605 * t934;
t501 = t549 * t934 + t606 * t932;
t500 = t548 * t934 + t605 * t932;
t493 = pkin(8) * t665 + t599 * t944 + t629 * t940 - t1214;
t492 = pkin(8) * t660 + t590 * t944 + t627 * t940 - t1177;
t491 = t533 * t945 - t592 * t941;
t490 = t532 * t945 - t591 * t941;
t486 = t498 * t940 + t762 * t944;
t483 = t544 * t945 - t572 * t941;
t482 = t543 * t945 - t571 * t941;
t467 = t1210 + t940 * t517 + (-pkin(2) - t1100) * t1159;
t461 = pkin(8) * t666 + t535 * t940 + t540 * t944 - t1177;
t459 = -(pkin(2) * t941 - pkin(8) * t945) * t651 + (-t554 * t933 - t555 * t935) * pkin(7);
t458 = pkin(8) * t659 + t534 * t940 + t536 * t944 + t1214;
t457 = -pkin(1) * t554 - t933 * t620 + t935 * t949;
t455 = t1005 * t935 - t933 * t531;
t454 = t1006 * t935 - t933 * t530;
t453 = t1003 * t935 - t933 * t542;
t452 = t1004 * t935 - t933 * t541;
t451 = t1007 * t935 - t933 * t526;
t450 = t1007 * t933 + t935 * t526;
t449 = -pkin(2) * t1159 + t484 * t940 + t603 * t944 + t1210;
t446 = t1009 * t935 - t933 * t518;
t445 = t1009 * t933 + t935 * t518;
t444 = t487 * t945 - t496 * t941;
t443 = t1008 * t935 - t933 * t520;
t442 = t1008 * t933 + t935 * t520;
t435 = pkin(8) * t521 + (-pkin(2) + t1025) * t550;
t433 = t945 * t512 - t941 * t553 + (-t556 * t933 - t558 * t935) * pkin(7);
t431 = t945 * t507 - t941 * t552 + (-t547 * t933 - t549 * t935) * pkin(7);
t428 = -t451 * t932 + t481 * t934;
t427 = t451 * t934 + t481 * t932;
t423 = t1012 * t935 - t933 * t477;
t422 = t1012 * t933 + t935 * t477;
t421 = t1010 * t935 - t933 * t486;
t420 = t1011 * t935 - t933 * t479;
t419 = t1011 * t933 + t935 * t479;
t418 = -t446 * t932 + t469 * t934;
t417 = t446 * t934 + t469 * t932;
t416 = -pkin(1) * t556 - t933 * t493 + t935 * t956;
t415 = -t443 * t932 + t468 * t934;
t414 = t443 * t934 + t468 * t932;
t412 = -pkin(1) * t547 - t933 * t492 + t935 * t957;
t411 = t945 * t464 - t941 * t504 + (-t557 * t933 - t559 * t935) * pkin(7);
t410 = t945 * t462 - t941 * t499 + (-t546 * t933 - t548 * t935) * pkin(7);
t408 = t945 * t470 - t941 * t485 + t1222;
t404 = t945 * t456 - t941 * t466 + t1222;
t401 = -t933 * t467 + t935 * t958 - t1229;
t400 = -pkin(1) * t557 - t933 * t461 + t935 * t959;
t399 = -pkin(2) * t515 + pkin(8) * t478 + t460 * t944 + t463 * t940;
t398 = -pkin(1) * t546 - t933 * t458 + t935 * t960;
t397 = -t423 * t932 + t447 * t934;
t396 = t423 * t934 + t447 * t932;
t395 = -t420 * t932 + t441 * t934;
t394 = t420 * t934 + t441 * t932;
t391 = -pkin(2) * t584 + pkin(8) * t527 + t434 * t940 + t440 * t944;
t390 = -t933 * t449 + t935 * t961 - t1229;
t389 = -pkin(2) * t569 + pkin(8) * t519 + t430 * t940 + t437 * t944;
t387 = t945 * t448 - t941 * t465 + (-t442 * t933 - t443 * t935) * pkin(7);
t384 = -pkin(1) * t442 - t933 * t435 + t935 * t962;
t380 = -pkin(2) * t495 + pkin(8) * t480 + t388 * t940 + t436 * t944;
t379 = t945 * t393 - t941 * t413 + (-t450 * t933 - t451 * t935) * pkin(7);
t378 = t945 * t407 - t941 * t425 + (-t422 * t933 - t423 * t935) * pkin(7);
t377 = t945 * t392 - t941 * t409 + (-t445 * t933 - t446 * t935) * pkin(7);
t376 = t1013 * t935 - t933 * t402;
t375 = t1013 * t933 + t935 * t402;
t373 = -pkin(1) * t422 - t933 * t399 + t935 * t963;
t372 = -pkin(1) * t450 - t933 * t391 + t935 * t964;
t371 = -pkin(1) * t445 - t933 * t389 + t935 * t965;
t370 = -t376 * t932 + t385 * t934;
t369 = t376 * t934 + t385 * t932;
t368 = t945 * t382 - t941 * t386 + (-t419 * t933 - t420 * t935) * pkin(7);
t366 = -pkin(2) * t405 + pkin(8) * t403 + t381 * t944 + t383 * t940;
t365 = -pkin(1) * t419 - t933 * t380 + t935 * t966;
t364 = t945 * t367 - t941 * t374 + (-t375 * t933 - t376 * t935) * pkin(7);
t363 = -pkin(1) * t375 - t933 * t366 + t935 * t967;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, 0, 0, 0, 0, 0, 0, t826, t825, 0, t611, 0, 0, 0, 0, 0, 0, t681, t682, t751, t514, 0, 0, 0, 0, 0, 0, t503, t510, t1224, t415, 0, 0, 0, 0, 0, 0, t511, t1224, t502, t397, 0, 0, 0, 0, 0, 0, t418, t428, t395, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t843, 0, 0, 0, 0, 0, 0, t824, -t981, 0, t610, 0, 0, 0, 0, 0, 0, t679, t680, t750, t513, 0, 0, 0, 0, 0, 0, t501, t508, t1223, t414, 0, 0, 0, 0, 0, 0, t509, t1223, t500, t396, 0, 0, 0, 0, 0, 0, t417, t427, t394, t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1058, 0, 0, 0, 0, 0, 0, t874, -t873, 0, t693, 0, 0, 0, 0, 0, 0, t732, t733, t829, t554, 0, 0, 0, 0, 0, 0, t547, t556, t1218, t442, 0, 0, 0, 0, 0, 0, t557, t1218, t546, t422, 0, 0, 0, 0, 0, 0, t445, t450, t419, t375; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1119, -t1118, -t843, -qJ(1) * t843, 0, 0, -t825, 0, t826, t932 * t1049, -qJ(1) * t824 - t698 * t932 + t767 * t934, qJ(1) * t981 - t697 * t932 + t768 * t934, -t714 * t932 + t723 * t934, -qJ(1) * t610 + t602 * t934 - t612 * t932, -t749 * t932 + t820 * t934, -t721 * t932 + t789 * t934, -t747 * t932 + t818 * t934, -t748 * t932 + t819 * t934, -t746 * t932 + t817 * t934, -t842 * t932 + t864 * t934, -qJ(1) * t679 - t538 * t932 + t567 * t934, -qJ(1) * t680 - t539 * t932 + t568 * t934, -qJ(1) * t750 - t537 * t932 + t604 * t934, -qJ(1) * t513 - t457 * t932 + t459 * t934, t1127, -t1240, t1216, t1179, -t1242, t1181, -qJ(1) * t501 - t412 * t932 + t431 * t934, -qJ(1) * t508 - t416 * t932 + t433 * t934, -t401 * t932 + t408 * t934 - t1232, -qJ(1) * t414 - t384 * t932 + t387 * t934, t1127, t1216, t1240, t1181, t1242, t1179, -qJ(1) * t509 - t400 * t932 + t411 * t934, -t390 * t932 + t404 * t934 - t1232, -qJ(1) * t500 - t398 * t932 + t410 * t934, -qJ(1) * t396 - t373 * t932 + t378 * t934, -t453 * t932 + t483 * t934, -t421 * t932 + t444 * t934, -t454 * t932 + t490 * t934, -t452 * t932 + t482 * t934, -t455 * t932 + t491 * t934, -t505 * t932 + t545 * t934, -qJ(1) * t417 - t371 * t932 + t377 * t934, -qJ(1) * t427 - t372 * t932 + t379 * t934, -qJ(1) * t394 - t365 * t932 + t368 * t934, -qJ(1) * t369 - t363 * t932 + t364 * t934; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1118, -t1119, t844, qJ(1) * t844, 0, 0, t981, 0, t824, -t934 * t1049, qJ(1) * t826 + t698 * t934 + t767 * t932, qJ(1) * t825 + t697 * t934 + t768 * t932, t714 * t934 + t723 * t932, qJ(1) * t611 + t602 * t932 + t612 * t934, t749 * t934 + t820 * t932, t721 * t934 + t789 * t932, t747 * t934 + t818 * t932, t748 * t934 + t819 * t932, t746 * t934 + t817 * t932, t842 * t934 + t864 * t932, qJ(1) * t681 + t538 * t934 + t567 * t932, qJ(1) * t682 + t539 * t934 + t568 * t932, qJ(1) * t751 + t537 * t934 + t604 * t932, qJ(1) * t514 + t457 * t934 + t459 * t932, t1128, t1239, t1215, t1178, t1241, t1180, qJ(1) * t503 + t412 * t934 + t431 * t932, qJ(1) * t510 + t416 * t934 + t433 * t932, t401 * t934 + t408 * t932 + t1231, qJ(1) * t415 + t384 * t934 + t387 * t932, t1128, t1215, -t1239, t1180, -t1241, t1178, qJ(1) * t511 + t400 * t934 + t411 * t932, t390 * t934 + t404 * t932 + t1231, qJ(1) * t502 + t398 * t934 + t410 * t932, qJ(1) * t397 + t373 * t934 + t378 * t932, t453 * t934 + t483 * t932, t421 * t934 + t444 * t932, t454 * t934 + t490 * t932, t452 * t934 + t482 * t932, t455 * t934 + t491 * t932, t505 * t934 + t545 * t932, qJ(1) * t418 + t371 * t934 + t377 * t932, qJ(1) * t428 + t372 * t934 + t379 * t932, qJ(1) * t395 + t365 * t934 + t368 * t932, qJ(1) * t370 + t363 * t934 + t364 * t932; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1035, t904, 0, 0, 0, 0, t873, 0, t874, t935 * qJDD(2), pkin(1) * t876 - t935 * t811 + (-pkin(7) * t979 + t970) * t933, -pkin(1) * t875 - t935 * t812 + (-pkin(7) * t900 - t971) * t933, t1126, pkin(1) * t694 + pkin(7) * t1126, t935 * t849 + t933 * t968, t935 * t836 + t933 * t984, t935 * t852 + t933 * t973, -t935 * t848 + t933 * t969, t935 * t850 + t933 * t974, t978 * t933, pkin(1) * t734 + t935 * t720 + t933 * t955, pkin(1) * t735 + t935 * t719 + t933 * t954, pkin(1) * t830 + t1018 * t933 + t935 * t628, pkin(1) * t555 + t935 * t620 + t933 * t949, t1106, t1233, t1197, t1157, t1234, t1155, pkin(1) * t549 + t935 * t492 + t933 * t957, pkin(1) * t558 + t935 * t493 + t933 * t956, t935 * t467 + t933 * t958 + t1230, pkin(1) * t443 + t935 * t435 + t933 * t962, t1106, t1197, -t1233, t1155, -t1234, t1157, pkin(1) * t559 + t935 * t461 + t933 * t959, t935 * t449 + t933 * t961 + t1230, pkin(1) * t548 + t935 * t458 + t933 * t960, pkin(1) * t423 + t935 * t399 + t933 * t963, t1003 * t933 + t935 * t542, t1010 * t933 + t935 * t486, t1006 * t933 + t935 * t530, t1004 * t933 + t935 * t541, t1005 * t933 + t935 * t531, t1002 * t933 + t935 * t613, pkin(1) * t446 + t935 * t389 + t933 * t965, pkin(1) * t451 + t935 * t391 + t933 * t964, pkin(1) * t420 + t935 * t380 + t933 * t966, pkin(1) * t376 + t935 * t366 + t933 * t967;];
tauB_reg  = t1;
