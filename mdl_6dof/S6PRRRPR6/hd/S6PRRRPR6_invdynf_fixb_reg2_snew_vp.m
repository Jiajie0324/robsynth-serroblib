% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 08:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 08:30:34
% EndTime: 2019-05-05 08:30:43
% DurationCPUTime: 10.26s
% Computational Cost: add. (27108->313), mult. (52600->418), div. (0->0), fcn. (37722->12), ass. (0->238)
t2386 = sin(qJ(3));
t2445 = qJD(2) * t2386;
t2372 = qJD(3) * t2445;
t2390 = cos(qJ(3));
t2432 = t2390 * qJDD(2);
t2427 = t2372 - t2432;
t2423 = -qJDD(4) - t2427;
t2385 = sin(qJ(4));
t2389 = cos(qJ(4));
t2346 = -qJD(3) * t2389 + t2385 * t2445;
t2348 = qJD(3) * t2385 + t2389 * t2445;
t2438 = t2346 * t2348;
t2299 = t2423 - t2438;
t2343 = t2348 ^ 2;
t2444 = qJD(2) * t2390;
t2370 = qJD(4) - t2444;
t2447 = t2370 ^ 2;
t2456 = -t2343 - t2447;
t2278 = t2299 * t2389 - t2385 * t2456;
t2431 = qJD(3) * t2444;
t2433 = t2386 * qJDD(2);
t2351 = t2431 + t2433;
t2404 = -t2385 * qJDD(3) - t2389 * t2351;
t2399 = qJD(4) * t2346 + t2404;
t2437 = t2346 * t2370;
t2463 = t2399 + t2437;
t2248 = t2278 * t2386 + t2390 * t2463;
t2379 = sin(pkin(6));
t2381 = cos(pkin(6));
t2250 = t2278 * t2390 - t2386 * t2463;
t2276 = t2299 * t2385 + t2389 * t2456;
t2387 = sin(qJ(2));
t2391 = cos(qJ(2));
t2411 = t2250 * t2387 - t2276 * t2391;
t2207 = -t2379 * t2248 + t2381 * t2411;
t2225 = t2250 * t2391 + t2276 * t2387;
t2378 = sin(pkin(11));
t2380 = cos(pkin(11));
t2491 = t2207 * t2378 - t2225 * t2380;
t2490 = t2207 * t2380 + t2225 * t2378;
t2205 = t2381 * t2248 + t2379 * t2411;
t2288 = -t2399 + t2437;
t2428 = -t2389 * qJDD(3) + t2385 * t2351;
t2436 = qJD(4) - t2370;
t2400 = -t2348 * t2436 - t2428;
t2454 = -t2288 * t2389 + t2385 * t2400;
t2449 = t2346 ^ 2;
t2298 = t2343 + t2449;
t2453 = t2288 * t2385 + t2389 * t2400;
t2469 = -t2298 * t2386 + t2390 * t2453;
t2474 = t2387 * t2454 + t2391 * t2469;
t2468 = t2298 * t2390 + t2386 * t2453;
t2475 = t2387 * t2469 - t2391 * t2454;
t2480 = -t2379 * t2468 + t2381 * t2475;
t2485 = -t2378 * t2480 + t2380 * t2474;
t2484 = t2378 * t2474 + t2380 * t2480;
t2481 = t2379 * t2475 + t2381 * t2468;
t2300 = t2423 + t2438;
t2455 = -t2447 - t2449;
t2460 = t2300 * t2385 + t2389 * t2455;
t2473 = t2386 * t2460;
t2461 = -t2300 * t2389 + t2385 * t2455;
t2472 = t2387 * t2461;
t2471 = t2390 * t2460;
t2470 = t2391 * t2461;
t2425 = g(1) * t2378 - g(2) * t2380;
t2403 = t2381 * t2425;
t2446 = -g(3) + qJDD(1);
t2429 = t2379 * t2446;
t2462 = t2403 + t2429;
t2364 = qJD(6) - t2370;
t2457 = qJD(6) + t2364;
t2452 = qJD(3) ^ 2;
t2384 = sin(qJ(6));
t2388 = cos(qJ(6));
t2312 = -t2388 * t2346 + t2348 * t2384;
t2451 = t2312 ^ 2;
t2314 = t2346 * t2384 + t2348 * t2388;
t2450 = t2314 ^ 2;
t2448 = t2364 ^ 2;
t2439 = t2312 * t2314;
t2435 = qJD(6) - t2364;
t2357 = -g(1) * t2380 - g(2) * t2378;
t2303 = t2391 * t2357 + t2387 * t2462;
t2392 = qJD(2) ^ 2;
t2292 = -pkin(2) * t2392 + qJDD(2) * pkin(8) + t2303;
t2398 = -t2379 * t2425 + t2381 * t2446;
t2281 = t2390 * t2292 + t2386 * t2398;
t2349 = (-pkin(3) * t2390 - pkin(9) * t2386) * qJD(2);
t2261 = -pkin(3) * t2452 + qJDD(3) * pkin(9) + t2349 * t2444 + t2281;
t2424 = t2387 * t2357 - t2391 * t2462;
t2291 = -qJDD(2) * pkin(2) - t2392 * pkin(8) + t2424;
t2393 = (-t2351 - t2431) * pkin(9) + (t2427 + t2372) * pkin(3) + t2291;
t2229 = t2389 * t2261 + t2385 * t2393;
t2374 = t2386 ^ 2;
t2375 = t2390 ^ 2;
t2434 = t2374 + t2375;
t2430 = pkin(4) * t2370 - (2 * qJD(5));
t2228 = -t2385 * t2261 + t2389 * t2393;
t2426 = -pkin(5) * t2370 - pkin(10) * t2348;
t2315 = pkin(4) * t2346 - qJ(5) * t2348;
t2221 = pkin(4) * t2423 - qJ(5) * t2447 + t2348 * t2315 + qJDD(5) - t2228;
t2209 = (t2346 * t2436 + t2404) * pkin(10) + t2300 * pkin(5) + t2221;
t2220 = -pkin(4) * t2447 - qJ(5) * t2423 + 0.2e1 * qJD(5) * t2370 - t2346 * t2315 + t2229;
t2401 = qJD(4) * t2348 + t2428;
t2210 = -pkin(5) * t2449 + pkin(10) * t2401 + t2370 * t2426 + t2220;
t2181 = t2209 * t2388 - t2210 * t2384;
t2182 = t2209 * t2384 + t2210 * t2388;
t2164 = t2181 * t2388 + t2182 * t2384;
t2165 = -t2181 * t2384 + t2182 * t2388;
t2159 = t2164 * t2385 + t2165 * t2389;
t2325 = t2390 * t2398;
t2260 = -t2325 - qJDD(3) * pkin(3) - t2452 * pkin(9) + (qJD(2) * t2349 + t2292) * t2386;
t2395 = t2401 * pkin(4) + qJ(5) * t2463 + t2260;
t2215 = t2428 * pkin(5) + t2449 * pkin(10) + t2395 + (pkin(5) * qJD(4) - t2426 + t2430) * t2348;
t2157 = t2159 * t2390 + t2215 * t2386;
t2158 = -t2164 * t2389 + t2165 * t2385;
t2422 = t2157 * t2387 - t2158 * t2391;
t2186 = t2220 * t2389 + t2221 * t2385;
t2224 = t2430 * t2348 + t2395;
t2177 = t2186 * t2390 + t2224 * t2386;
t2185 = t2220 * t2385 - t2221 * t2389;
t2421 = t2177 * t2387 - t2185 * t2391;
t2396 = t2384 * t2399 + t2388 * t2401;
t2237 = -t2314 * t2435 + t2396;
t2394 = -t2384 * t2401 + t2388 * t2399;
t2239 = t2312 * t2435 + t2394;
t2213 = t2237 * t2384 + t2239 * t2388;
t2214 = t2237 * t2388 - t2239 * t2384;
t2184 = t2213 * t2385 + t2214 * t2389;
t2258 = -t2450 - t2451;
t2179 = t2184 * t2390 - t2258 * t2386;
t2183 = -t2213 * t2389 + t2214 * t2385;
t2420 = t2179 * t2387 - t2183 * t2391;
t2402 = -qJDD(6) - t2423;
t2265 = -t2402 - t2439;
t2275 = -t2448 - t2451;
t2234 = t2265 * t2388 + t2275 * t2384;
t2235 = -t2265 * t2384 + t2275 * t2388;
t2212 = t2234 * t2385 + t2235 * t2389;
t2236 = t2314 * t2457 - t2396;
t2188 = t2212 * t2390 - t2236 * t2386;
t2211 = -t2234 * t2389 + t2235 * t2385;
t2419 = t2188 * t2387 - t2211 * t2391;
t2202 = -t2228 * t2385 + t2229 * t2389;
t2190 = t2202 * t2390 + t2260 * t2386;
t2201 = t2228 * t2389 + t2229 * t2385;
t2418 = t2190 * t2387 - t2201 * t2391;
t2266 = t2402 - t2439;
t2289 = -t2448 - t2450;
t2246 = t2266 * t2384 + t2289 * t2388;
t2247 = t2266 * t2388 - t2289 * t2384;
t2219 = t2246 * t2385 + t2247 * t2389;
t2238 = -t2312 * t2457 - t2394;
t2196 = t2219 * t2390 - t2238 * t2386;
t2218 = -t2246 * t2389 + t2247 * t2385;
t2417 = t2196 * t2387 - t2218 * t2391;
t2280 = -t2386 * t2292 + t2325;
t2241 = -t2280 * t2386 + t2281 * t2390;
t2414 = t2241 * t2387 - t2291 * t2391;
t2283 = (qJD(4) + t2370) * t2348 + t2428;
t2245 = t2283 * t2386 + t2471;
t2412 = t2245 * t2387 - t2470;
t2282 = t2348 * t2370 + t2401;
t2251 = t2282 * t2386 + t2471;
t2410 = t2251 * t2387 - t2470;
t2409 = t2387 * t2303 - t2391 * t2424;
t2369 = t2386 * t2392 * t2390;
t2358 = qJDD(3) + t2369;
t2366 = -t2375 * t2392 - t2452;
t2322 = -t2358 * t2386 + t2366 * t2390;
t2352 = -0.2e1 * t2372 + t2432;
t2408 = t2322 * t2387 + t2352 * t2391;
t2359 = -qJDD(3) + t2369;
t2365 = -t2374 * t2392 - t2452;
t2323 = t2359 * t2390 - t2365 * t2386;
t2350 = 0.2e1 * t2431 + t2433;
t2407 = t2323 * t2387 - t2350 * t2391;
t2353 = t2434 * qJDD(2);
t2356 = t2434 * t2392;
t2406 = t2353 * t2387 + t2356 * t2391;
t2405 = qJDD(2) * t2391 - t2387 * t2392;
t2355 = -qJDD(2) * t2387 - t2391 * t2392;
t2334 = t2405 * t2381;
t2333 = t2355 * t2381;
t2332 = t2405 * t2379;
t2331 = t2355 * t2379;
t2321 = t2359 * t2386 + t2365 * t2390;
t2320 = t2358 * t2390 + t2366 * t2386;
t2318 = t2353 * t2391 - t2356 * t2387;
t2311 = t2406 * t2381;
t2310 = t2406 * t2379;
t2294 = t2323 * t2391 + t2350 * t2387;
t2293 = t2322 * t2391 - t2352 * t2387;
t2274 = -t2379 * t2321 + t2381 * t2407;
t2273 = -t2379 * t2320 + t2381 * t2408;
t2272 = t2381 * t2321 + t2379 * t2407;
t2271 = t2381 * t2320 + t2379 * t2408;
t2264 = t2303 * t2391 + t2387 * t2424;
t2257 = t2379 ^ 2 * t2425 + (-t2429 + t2409) * t2381;
t2256 = t2381 ^ 2 * t2446 + (t2409 - t2403) * t2379;
t2249 = -t2282 * t2390 + t2473;
t2243 = -t2283 * t2390 + t2473;
t2240 = t2280 * t2390 + t2281 * t2386;
t2227 = t2241 * t2391 + t2291 * t2387;
t2226 = t2251 * t2391 + t2472;
t2223 = t2245 * t2391 + t2472;
t2208 = -t2379 * t2249 + t2381 * t2410;
t2206 = t2381 * t2249 + t2379 * t2410;
t2204 = -t2379 * t2240 + t2381 * t2414;
t2203 = t2381 * t2240 + t2379 * t2414;
t2200 = -t2379 * t2243 + t2381 * t2412;
t2198 = t2381 * t2243 + t2379 * t2412;
t2195 = t2219 * t2386 + t2238 * t2390;
t2189 = t2202 * t2386 - t2260 * t2390;
t2187 = t2212 * t2386 + t2236 * t2390;
t2180 = t2196 * t2391 + t2218 * t2387;
t2178 = t2184 * t2386 + t2258 * t2390;
t2176 = t2186 * t2386 - t2224 * t2390;
t2175 = t2188 * t2391 + t2211 * t2387;
t2174 = t2190 * t2391 + t2201 * t2387;
t2173 = -t2379 * t2195 + t2381 * t2417;
t2172 = t2381 * t2195 + t2379 * t2417;
t2171 = t2177 * t2391 + t2185 * t2387;
t2170 = -t2379 * t2187 + t2381 * t2419;
t2169 = t2381 * t2187 + t2379 * t2419;
t2168 = -t2379 * t2189 + t2381 * t2418;
t2167 = t2381 * t2189 + t2379 * t2418;
t2166 = t2179 * t2391 + t2183 * t2387;
t2163 = -t2379 * t2176 + t2381 * t2421;
t2162 = t2381 * t2176 + t2379 * t2421;
t2161 = -t2379 * t2178 + t2381 * t2420;
t2160 = t2381 * t2178 + t2379 * t2420;
t2156 = t2159 * t2386 - t2215 * t2390;
t2155 = t2157 * t2391 + t2158 * t2387;
t2154 = -t2379 * t2156 + t2381 * t2422;
t2153 = t2381 * t2156 + t2379 * t2422;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2380 * t2357 - t2378 * t2425, 0, 0, 0, 0, 0, 0, -t2334 * t2378 + t2355 * t2380, -t2333 * t2378 - t2380 * t2405, 0, -t2257 * t2378 + t2264 * t2380, 0, 0, 0, 0, 0, 0, -t2273 * t2378 + t2293 * t2380, -t2274 * t2378 + t2294 * t2380, -t2311 * t2378 + t2318 * t2380, -t2204 * t2378 + t2227 * t2380, 0, 0, 0, 0, 0, 0, -t2200 * t2378 + t2223 * t2380, -t2491, t2485, -t2168 * t2378 + t2174 * t2380, 0, 0, 0, 0, 0, 0, -t2208 * t2378 + t2226 * t2380, t2485, t2491, -t2163 * t2378 + t2171 * t2380, 0, 0, 0, 0, 0, 0, -t2170 * t2378 + t2175 * t2380, -t2173 * t2378 + t2180 * t2380, -t2161 * t2378 + t2166 * t2380, -t2154 * t2378 + t2155 * t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2378 * t2357 + t2380 * t2425, 0, 0, 0, 0, 0, 0, t2334 * t2380 + t2355 * t2378, t2333 * t2380 - t2378 * t2405, 0, t2257 * t2380 + t2264 * t2378, 0, 0, 0, 0, 0, 0, t2273 * t2380 + t2293 * t2378, t2274 * t2380 + t2294 * t2378, t2311 * t2380 + t2318 * t2378, t2204 * t2380 + t2227 * t2378, 0, 0, 0, 0, 0, 0, t2200 * t2380 + t2223 * t2378, t2490, t2484, t2168 * t2380 + t2174 * t2378, 0, 0, 0, 0, 0, 0, t2208 * t2380 + t2226 * t2378, t2484, -t2490, t2163 * t2380 + t2171 * t2378, 0, 0, 0, 0, 0, 0, t2170 * t2380 + t2175 * t2378, t2173 * t2380 + t2180 * t2378, t2161 * t2380 + t2166 * t2378, t2154 * t2380 + t2155 * t2378; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2446, 0, 0, 0, 0, 0, 0, t2332, t2331, 0, t2256, 0, 0, 0, 0, 0, 0, t2271, t2272, t2310, t2203, 0, 0, 0, 0, 0, 0, t2198, t2205, t2481, t2167, 0, 0, 0, 0, 0, 0, t2206, t2481, -t2205, t2162, 0, 0, 0, 0, 0, 0, t2169, t2172, t2160, t2153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2357, 0, 0, 0, 0, 0, 0, t2355, -t2405, 0, t2264, 0, 0, 0, 0, 0, 0, t2293, t2294, t2318, t2227, 0, 0, 0, 0, 0, 0, t2223, t2225, t2474, t2174, 0, 0, 0, 0, 0, 0, t2226, t2474, -t2225, t2171, 0, 0, 0, 0, 0, 0, t2175, t2180, t2166, t2155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2425, 0, 0, 0, 0, 0, 0, t2334, t2333, 0, t2257, 0, 0, 0, 0, 0, 0, t2273, t2274, t2311, t2204, 0, 0, 0, 0, 0, 0, t2200, t2207, t2480, t2168, 0, 0, 0, 0, 0, 0, t2208, t2480, -t2207, t2163, 0, 0, 0, 0, 0, 0, t2170, t2173, t2161, t2154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2446, 0, 0, 0, 0, 0, 0, t2332, t2331, 0, t2256, 0, 0, 0, 0, 0, 0, t2271, t2272, t2310, t2203, 0, 0, 0, 0, 0, 0, t2198, t2205, t2481, t2167, 0, 0, 0, 0, 0, 0, t2206, t2481, -t2205, t2162, 0, 0, 0, 0, 0, 0, t2169, t2172, t2160, t2153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2392, -qJDD(2), 0, t2303, 0, 0, 0, 0, 0, 0, t2322, t2323, t2353, t2241, 0, 0, 0, 0, 0, 0, t2245, t2250, t2469, t2190, 0, 0, 0, 0, 0, 0, t2251, t2469, -t2250, t2177, 0, 0, 0, 0, 0, 0, t2188, t2196, t2179, t2157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2392, 0, -t2424, 0, 0, 0, 0, 0, 0, t2352, -t2350, t2356, -t2291, 0, 0, 0, 0, 0, 0, -t2461, -t2276, -t2454, -t2201, 0, 0, 0, 0, 0, 0, -t2461, -t2454, t2276, -t2185, 0, 0, 0, 0, 0, 0, -t2211, -t2218, -t2183, -t2158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2398, 0, 0, 0, 0, 0, 0, t2320, t2321, 0, t2240, 0, 0, 0, 0, 0, 0, t2243, t2248, t2468, t2189, 0, 0, 0, 0, 0, 0, t2249, t2468, -t2248, t2176, 0, 0, 0, 0, 0, 0, t2187, t2195, t2178, t2156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2366, t2359, t2432, t2281, 0, 0, 0, 0, 0, 0, t2460, t2278, t2453, t2202, 0, 0, 0, 0, 0, 0, t2460, t2453, -t2278, t2186, 0, 0, 0, 0, 0, 0, t2212, t2219, t2184, t2159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2358, t2365, -t2433, t2280, 0, 0, 0, 0, 0, 0, -t2283, t2463, t2298, -t2260, 0, 0, 0, 0, 0, 0, -t2282, t2298, -t2463, -t2224, 0, 0, 0, 0, 0, 0, t2236, t2238, t2258, -t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2352, t2350, -t2356, t2291, 0, 0, 0, 0, 0, 0, t2461, t2276, t2454, t2201, 0, 0, 0, 0, 0, 0, t2461, t2454, -t2276, t2185, 0, 0, 0, 0, 0, 0, t2211, t2218, t2183, t2158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2455, t2299, t2400, t2229, 0, 0, 0, 0, 0, 0, t2455, t2400, -t2299, t2220, 0, 0, 0, 0, 0, 0, t2235, t2247, t2214, t2165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2300, t2456, -t2288, t2228, 0, 0, 0, 0, 0, 0, -t2300, -t2288, -t2456, -t2221, 0, 0, 0, 0, 0, 0, -t2234, -t2246, -t2213, -t2164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2283, -t2463, -t2298, t2260, 0, 0, 0, 0, 0, 0, t2282, -t2298, t2463, t2224, 0, 0, 0, 0, 0, 0, -t2236, -t2238, -t2258, t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2455, t2400, -t2299, t2220, 0, 0, 0, 0, 0, 0, t2235, t2247, t2214, t2165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2282, -t2298, t2463, t2224, 0, 0, 0, 0, 0, 0, -t2236, -t2238, -t2258, t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2300, t2288, t2456, t2221, 0, 0, 0, 0, 0, 0, t2234, t2246, t2213, t2164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2275, t2266, t2237, t2182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2265, t2289, t2239, t2181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2236, t2238, t2258, -t2215;];
f_new_reg  = t1;
