% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPPRR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPPRR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPPRR3_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:23:03
% EndTime: 2019-03-08 19:23:08
% DurationCPUTime: 1.66s
% Computational Cost: add. (1260->190), mult. (3102->351), div. (0->0), fcn. (3048->10), ass. (0->122)
t120 = cos(pkin(6));
t47 = sin(pkin(11));
t48 = sin(pkin(6));
t49 = cos(pkin(11));
t52 = sin(qJ(2));
t55 = cos(qJ(2));
t22 = (-t47 * t55 + t49 * t52) * t48;
t51 = sin(qJ(5));
t54 = cos(qJ(5));
t66 = -t120 * t54 - t22 * t51;
t134 = t66 * qJD(5);
t50 = sin(qJ(6));
t43 = t50 ^ 2;
t53 = cos(qJ(6));
t45 = t53 ^ 2;
t85 = qJD(6) * (t43 - t45);
t86 = t120 * t51;
t12 = t22 * t54 - t86;
t115 = qJD(5) * t54;
t21 = (t47 * t52 + t49 * t55) * t48;
t18 = qJD(2) * t21;
t5 = -qJD(5) * t86 + t22 * t115 + t18 * t51;
t128 = t5 * t51;
t6 = t18 * t54 + t134;
t58 = (-t12 * t51 - t54 * t66) * qJD(5) + t6 * t54 + t128;
t133 = 2 * qJD(3);
t132 = -pkin(2) - pkin(3);
t131 = pkin(5) * t51;
t130 = pkin(9) * t54;
t129 = t66 * t5;
t119 = qJD(2) * t48;
t92 = t55 * t119;
t93 = t52 * t119;
t17 = t47 * t92 - t49 * t93;
t127 = t17 * t21;
t126 = t17 * t49;
t125 = t21 * t47;
t124 = t50 * t54;
t123 = t53 * t54;
t32 = t49 * qJ(3) + t47 * t132;
t44 = t51 ^ 2;
t46 = t54 ^ 2;
t121 = t44 - t46;
t118 = qJD(5) * t50;
t117 = qJD(5) * t51;
t116 = qJD(5) * t53;
t114 = qJD(6) * t50;
t113 = qJD(6) * t51;
t112 = qJD(6) * t53;
t111 = qJD(6) * t54;
t110 = t47 * qJD(3);
t109 = t49 * qJD(3);
t108 = t54 * qJD(3);
t107 = -0.2e1 * pkin(5) * qJD(6);
t106 = t47 * t124;
t105 = t47 * t123;
t30 = -pkin(8) + t32;
t104 = t30 * t124;
t103 = t30 * t123;
t102 = 0.2e1 * t109;
t101 = pkin(9) * t112;
t100 = t47 * t109;
t99 = t53 * t109;
t98 = t45 * t115;
t97 = t53 * t115;
t96 = qJD(6) * t44 * t47;
t95 = t50 * t111;
t94 = t53 * t111;
t91 = t50 * t112;
t90 = t51 * t115;
t89 = t47 * t117;
t88 = t47 * t115;
t87 = t49 * t108;
t84 = t121 * qJD(5);
t83 = 0.2e1 * t90;
t82 = t44 * t91;
t81 = t50 * t97;
t80 = t54 * pkin(5) + t51 * pkin(9);
t79 = t130 - t131;
t7 = -t12 * t50 + t21 * t53;
t8 = t12 * t53 + t21 * t50;
t77 = t50 * t8 + t53 * t7;
t76 = -t50 * t7 + t53 * t8;
t31 = -t47 * qJ(3) + t49 * t132;
t29 = pkin(4) - t31;
t60 = t29 + t80;
t10 = t50 * t60 + t103;
t9 = t53 * t60 - t104;
t75 = t10 * t53 - t50 * t9;
t74 = t10 * t50 + t53 * t9;
t72 = t12 * t54 - t51 * t66;
t24 = -t49 * t50 + t105;
t69 = t49 * t53 + t106;
t71 = t24 * t50 - t53 * t69;
t70 = t24 * t53 + t50 * t69;
t68 = -t112 * t66 + t5 * t50;
t67 = -t114 * t66 - t5 * t53;
t65 = t30 * t117 - t87;
t64 = t51 * t109 + t30 * t115;
t25 = t50 * t113 - t97;
t63 = t51 * t116 + t95;
t27 = t51 * t112 + t50 * t115;
t62 = t79 * qJD(5) + t110;
t1 = -t8 * qJD(6) + t17 * t53 - t6 * t50;
t2 = t7 * qJD(6) + t17 * t50 + t6 * t53;
t61 = -t77 * qJD(6) - t1 * t50 + t2 * t53;
t56 = qJD(6) * t60;
t3 = t63 * t30 - t50 * t62 + (-t56 - t87) * t53;
t4 = (-t30 * t111 + t62) * t53 + (-t56 + t65) * t50;
t59 = -t74 * qJD(6) - t3 * t53 - t4 * t50;
t13 = t69 * qJD(6) + t53 * t89;
t14 = -t24 * qJD(6) + t50 * t89;
t57 = -t71 * qJD(6) - t13 * t53 - t14 * t50;
t40 = t43 * t115;
t38 = -0.2e1 * t90;
t37 = t45 * t90;
t36 = t43 * t90;
t33 = t44 * t100;
t28 = -t50 * t117 + t94;
t19 = t44 * t30 * t109;
t16 = t51 * t85 - t81;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t18 * t22 + 0.2e1 * t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t12 * t6 + 0.2e1 * t127 - 0.2e1 * t129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t1 * t7 + 0.2e1 * t2 * t8 - 0.2e1 * t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t92, 0, 0, 0, 0, 0, 0, 0, 0, -t93, 0, t92 (qJD(3) * t52 + (-pkin(2) * t52 + qJ(3) * t55) * qJD(2)) * t48, 0, 0, 0, 0, 0, 0, t17, t18, 0, -t17 * t31 + t18 * t32 + (t22 * t49 + t125) * qJD(3), 0, 0, 0, 0, 0, 0, -t117 * t21 + t17 * t54, -t115 * t21 - t17 * t51, -t58, t17 * t29 + (t49 * t72 + t125) * qJD(3) + t58 * t30, 0, 0, 0, 0, 0, 0 (t118 * t66 + t1) * t54 + (-qJD(5) * t7 - t68) * t51 (t116 * t66 - t2) * t54 + (qJD(5) * t8 + t67) * t51, t77 * t115 + (qJD(6) * t76 + t1 * t53 + t2 * t50) * t51, t1 * t9 + t2 * t10 + t30 * t128 - t8 * t3 + t7 * t4 - t64 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, qJ(3) * t133, 0, 0, 0, 0, 0, 0, 0.2e1 * t110, t102, 0 (-t31 * t47 + t32 * t49) * t133, t83, -0.2e1 * t84, 0, t38, 0, 0, 0.2e1 * t108 * t47 - 0.2e1 * t117 * t29, -0.2e1 * t110 * t51 - 0.2e1 * t115 * t29 (-t44 - t46) * t102, 0.2e1 * t19 + 0.2e1 * (t30 * t46 * t49 + t29 * t47) * qJD(3), 0.2e1 * t37 - 0.2e1 * t82, 0.2e1 * t44 * t85 - 0.4e1 * t51 * t81, 0.2e1 * t116 * t121 + 0.2e1 * t51 * t95, 0.2e1 * t36 + 0.2e1 * t82, -0.2e1 * t50 * t84 + 0.2e1 * t51 * t94, t38, 0.2e1 * t4 * t54 + 0.2e1 * (-t109 * t50 - t112 * t30) * t44 + 0.2e1 * (-t9 - 0.2e1 * t104) * t117, 0.2e1 * t3 * t54 + 0.2e1 * (t114 * t30 - t99) * t44 + 0.2e1 * (t10 - 0.2e1 * t103) * t117, 0.2e1 * t74 * t115 + 0.2e1 * (qJD(6) * t75 - t3 * t50 + t4 * t53) * t51, 0.2e1 * t30 ^ 2 * t90 - 0.2e1 * t10 * t3 + 0.2e1 * t4 * t9 + 0.2e1 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 * t47 - t126, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47 * t58 - t126, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t69 - t8 * t13 + t7 * t14 + t2 * t24 + (-t115 * t66 + t128) * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * t117, t49 * t115, 0, t33 + (t46 - 0.1e1) * t100, 0, 0, 0, 0, 0, 0, -t53 * t96 + t14 * t54 + (t69 - 0.2e1 * t106) * t117, t50 * t96 + t13 * t54 + (t24 - 0.2e1 * t105) * t117, t71 * t115 + (qJD(6) * t70 - t13 * t50 + t14 * t53) * t51, t30 * t47 * t83 - t10 * t13 + t14 * t9 - t24 * t3 - t4 * t69 + t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t47 ^ 2 * t90 - 0.2e1 * t13 * t24 - 0.2e1 * t14 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5) * t72 - t5 * t54 + t6 * t51, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(5) * t76 - t5) * t54 + (t61 - t134) * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t121 * t30 + t54 * t75) * qJD(5) + (t59 - t87) * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t51 + (t121 * t47 + t54 * t70) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t36 + 0.2e1 * t37 - 0.2e1 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5, -t6, 0, 0, 0, 0, 0, 0, 0, 0, t67, t68, t61, -t5 * pkin(5) + pkin(9) * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, 0, t117, 0, -t64, t65, 0, 0, t16, 0.4e1 * t51 * t91 + t40 - t98, t28, -t16, -t63, 0 (-t101 + (pkin(5) * t50 - t30 * t53) * qJD(5)) * t54 + (pkin(9) * t118 - t99 + (pkin(5) * t53 + t30 * t50) * qJD(6)) * t51 (qJD(5) * t80 + t113 * t30) * t53 + (qJD(6) * t79 + t64) * t50, t59, -pkin(5) * t64 + pkin(9) * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, t89, 0, 0, 0, 0, 0, 0, 0, 0, t25 * t47, t27 * t47, t57, -pkin(5) * t88 + pkin(9) * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, -t115, 0, 0, 0, 0, 0, 0, 0, 0, -t63, -t28, t40 + t98 (-t131 + (t43 + t45) * t130) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t91, -0.2e1 * t85, 0, -0.2e1 * t91, 0, 0, t50 * t107, t53 * t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, t27, -t117, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, -t114, 0, -t101, pkin(9) * t114, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
