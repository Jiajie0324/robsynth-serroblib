% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 22:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:01:42
% EndTime: 2019-05-04 22:02:00
% DurationCPUTime: 14.45s
% Computational Cost: add. (60149->666), mult. (107419->1054), div. (0->0), fcn. (70101->12), ass. (0->465)
t603 = sin(qJ(2));
t606 = cos(qJ(2));
t608 = qJD(2) ^ 2;
t556 = qJDD(2) * t603 + t606 * t608;
t595 = sin(pkin(6));
t529 = t556 * t595;
t598 = cos(pkin(6));
t531 = t556 * t598;
t594 = sin(pkin(10));
t597 = cos(pkin(10));
t559 = g(1) * t594 - t597 * g(2);
t679 = g(3) - qJDD(1);
t525 = t559 * t595 + t598 * t679;
t680 = t606 * t525;
t428 = (t529 * t595 + t531 * t598) * pkin(7) - t680;
t682 = t603 * t608;
t555 = qJDD(2) * t606 - t682;
t488 = t531 * t594 - t555 * t597;
t724 = -qJ(1) * t488 - t428 * t594;
t484 = t531 * t597 + t555 * t594;
t723 = -qJ(1) * t484 - t428 * t597;
t601 = sin(qJ(6));
t604 = cos(qJ(6));
t602 = sin(qJ(5));
t676 = qJD(2) * t602;
t545 = qJD(5) * t604 + t601 * t676;
t546 = -t601 * qJD(5) + t604 * t676;
t504 = t545 * t546;
t674 = qJD(2) * qJD(5);
t577 = t602 * t674;
t605 = cos(qJ(5));
t671 = qJDD(2) * t605;
t551 = t577 - t671;
t624 = qJDD(6) - t551;
t707 = -t504 + t624;
t720 = t601 * t707;
t719 = t604 * t707;
t718 = -t559 * t598 + t595 * t679;
t518 = qJDD(4) + t525;
t593 = sin(pkin(11));
t596 = cos(pkin(11));
t553 = qJDD(2) * t596 + t593 * t608;
t460 = qJ(4) * t553 + t518 * t593;
t669 = t593 * qJDD(2);
t552 = t596 * t608 - t669;
t651 = qJ(4) * t552 + t518 * t596;
t717 = t460 * t603 + t606 * t651;
t716 = t606 * t460 - t603 * t651;
t587 = qJDD(2) * qJ(3);
t560 = g(1) * t597 + g(2) * t594;
t467 = -t606 * t560 - t603 * t718;
t658 = 0.2e1 * qJD(3) * qJD(2) + t467;
t652 = t587 + t658;
t704 = pkin(2) + pkin(3);
t445 = -t608 * t704 + t652;
t592 = qJDD(2) * pkin(2);
t466 = -t560 * t603 + t606 * t718;
t623 = -qJDD(3) - t466;
t449 = -t608 * qJ(3) - t592 - t623;
t609 = -qJDD(2) * pkin(3) + t449;
t384 = t593 * t445 - t596 * t609;
t385 = t596 * t445 + t593 * t609;
t317 = t384 * t596 - t385 * t593;
t318 = t384 * t593 + t385 * t596;
t715 = t317 * t606 + t318 * t603;
t645 = t317 * t603 - t318 * t606;
t494 = t552 * t603 - t553 * t606;
t625 = t552 * t606 + t553 * t603;
t708 = t625 * t598;
t714 = t494 * t597 + t594 * t708;
t713 = t494 * t594 - t597 * t708;
t712 = t594 * t679;
t711 = t597 * t679;
t479 = t625 * t595;
t664 = t605 * t674;
t672 = qJDD(2) * t602;
t549 = -t664 - t672;
t478 = t545 * qJD(6) + t601 * qJDD(5) + t604 * t549;
t574 = qJD(2) * t605 + qJD(6);
t526 = t574 * t545;
t439 = t526 + t478;
t661 = -t604 * qJDD(5) + t601 * t549;
t438 = (qJD(6) - t574) * t546 - t661;
t683 = t603 * t525;
t655 = pkin(7) * t555 + t683;
t706 = pkin(1) * t531 + t595 * t655;
t705 = -pkin(1) * t529 + t598 * t655;
t540 = t545 ^ 2;
t541 = t546 ^ 2;
t572 = t574 ^ 2;
t701 = pkin(5) * t602;
t700 = pkin(5) * t605;
t699 = pkin(7) * t595;
t698 = pkin(7) * t598;
t377 = -pkin(4) * t608 - qJDD(2) * pkin(8) + t385;
t350 = t377 * t602 - t605 * t518;
t607 = qJD(5) ^ 2;
t656 = pkin(9) * t602 + t700;
t622 = t608 * t656;
t331 = -qJDD(5) * pkin(5) - t607 * pkin(9) - t602 * t622 + t350;
t697 = t331 * t601;
t696 = t331 * t604;
t376 = qJDD(2) * pkin(4) - t608 * pkin(8) + t384;
t695 = t376 * t602;
t464 = t504 + t624;
t694 = t464 * t601;
t693 = t464 * t604;
t573 = t602 * t608 * t605;
t561 = qJDD(5) + t573;
t691 = t561 * t602;
t690 = t561 * t605;
t562 = qJDD(5) - t573;
t689 = t562 * t602;
t688 = t562 * t605;
t687 = t574 * t601;
t686 = t574 * t604;
t589 = t602 ^ 2;
t685 = t589 * t608;
t684 = t595 * t525;
t681 = t605 * t376;
t351 = t605 * t377 + t602 * t518;
t332 = -t607 * pkin(5) + qJDD(5) * pkin(9) - t605 * t622 + t351;
t653 = -t551 - t577;
t654 = -t549 + t664;
t343 = pkin(5) * t653 + pkin(9) * t654 + t376;
t287 = t604 * t332 + t601 * t343;
t530 = t555 * t595;
t579 = t598 * qJDD(2);
t532 = -t579 * t606 + t598 * t682;
t426 = -t683 + (-t530 * t595 + t532 * t598) * pkin(7);
t489 = t532 * t594 - t556 * t597;
t678 = qJ(1) * t489 + t594 * t426;
t590 = t605 ^ 2;
t677 = -t589 - t590;
t673 = qJDD(2) * t595;
t668 = t602 * t504;
t667 = t605 * t504;
t666 = -pkin(1) * t532 - t556 * t699 + t595 * t680;
t665 = t597 * t673;
t626 = t532 * t597 + t556 * t594;
t662 = qJ(1) * t626 + t597 * t426;
t286 = t332 * t601 - t604 * t343;
t500 = -t559 * t594 - t597 * t560;
t660 = t593 * t573;
t659 = t596 * t573;
t657 = -pkin(1) * t530 - t556 * t698 + t598 * t680;
t250 = t286 * t601 + t287 * t604;
t240 = t250 * t605 + t331 * t602;
t249 = -t286 * t604 + t287 * t601;
t218 = t240 * t593 - t249 * t596;
t219 = t240 * t596 + t249 * t593;
t650 = -t218 * t606 + t219 * t603;
t294 = t350 * t602 + t351 * t605;
t272 = t294 * t593 - t376 * t596;
t273 = t294 * t596 + t376 * t593;
t649 = -t272 * t606 + t273 * t603;
t441 = t526 - t478;
t375 = t438 * t604 - t441 * t601;
t458 = t540 + t541;
t336 = t375 * t605 - t458 * t602;
t373 = t438 * t601 + t441 * t604;
t297 = t336 * t593 - t373 * t596;
t298 = t336 * t596 + t373 * t593;
t648 = -t297 * t606 + t298 * t603;
t437 = (qJD(6) + t574) * t546 - t661;
t374 = t437 * t604 - t439 * t601;
t501 = -t541 + t540;
t345 = t374 * t605 - t501 * t602;
t372 = -t437 * t601 - t439 * t604;
t299 = -t345 * t593 - t372 * t596;
t300 = t345 * t596 - t372 * t593;
t647 = t299 * t606 + t300 * t603;
t490 = -t572 - t540;
t405 = t490 * t604 - t720;
t354 = t405 * t605 - t437 * t602;
t404 = t490 * t601 + t719;
t309 = t354 * t593 - t404 * t596;
t312 = t354 * t596 + t404 * t593;
t646 = -t309 * t606 + t312 * t603;
t498 = -t541 - t572;
t411 = -t498 * t601 - t693;
t358 = t411 * t605 + t439 * t602;
t410 = t498 * t604 - t694;
t319 = t358 * t593 - t410 * t596;
t320 = t358 * t596 + t410 * t593;
t643 = -t319 * t606 + t320 * t603;
t524 = -t541 + t572;
t422 = -t524 * t601 + t719;
t363 = t422 * t605 - t441 * t602;
t420 = -t524 * t604 - t720;
t324 = -t363 * t593 - t420 * t596;
t326 = t363 * t596 - t420 * t593;
t642 = t324 * t606 + t326 * t603;
t523 = t540 - t572;
t423 = t523 * t604 - t694;
t364 = t423 * t605 + t438 * t602;
t421 = -t523 * t601 - t693;
t325 = -t364 * t593 - t421 * t596;
t327 = t364 * t596 - t421 * t593;
t641 = t325 * t606 + t327 * t603;
t477 = qJD(6) * t546 - t661;
t431 = -t477 * t601 - t545 * t686;
t399 = t431 * t605 - t668;
t430 = -t477 * t604 + t545 * t687;
t337 = -t399 * t593 - t430 * t596;
t339 = t399 * t596 - t430 * t593;
t640 = t337 * t606 + t339 * t603;
t433 = t478 * t604 + t546 * t687;
t400 = t433 * t605 + t668;
t432 = -t478 * t601 + t546 * t686;
t338 = -t400 * t593 - t432 * t596;
t340 = t400 * t596 - t432 * t593;
t639 = t338 * t606 + t340 * t603;
t293 = t350 * t605 - t351 * t602;
t451 = (t545 * t604 - t546 * t601) * t574;
t425 = t451 * t605 + t602 * t624;
t450 = (-t545 * t601 - t546 * t604) * t574;
t369 = -t425 * t593 - t450 * t596;
t370 = t425 * t596 - t450 * t593;
t638 = t369 * t606 + t370 * t603;
t446 = -pkin(2) * t608 + t652;
t391 = t446 * t606 + t449 * t603;
t637 = t446 * t603 - t449 * t606;
t548 = 0.2e1 * t664 + t672;
t550 = 0.2e1 * t577 - t671;
t492 = t548 * t602 + t550 * t605;
t584 = t590 * t608;
t558 = t584 - t685;
t447 = -t492 * t593 - t558 * t596;
t448 = t492 * t596 - t558 * t593;
t636 = t447 * t606 + t448 * t603;
t571 = -t584 - t607;
t515 = t571 * t605 - t691;
t453 = t515 * t593 + t550 * t596;
t455 = t515 * t596 - t550 * t593;
t635 = -t453 * t606 + t455 * t603;
t569 = -t607 - t685;
t517 = -t569 * t602 - t688;
t454 = t517 * t593 + t548 * t596;
t456 = t517 * t596 - t548 * t593;
t634 = -t454 * t606 + t456 * t603;
t402 = t466 * t606 - t467 * t603;
t403 = t466 * t603 + t467 * t606;
t570 = t584 - t607;
t514 = t570 * t605 - t689;
t468 = -t514 * t593 - t596 * t671;
t470 = t514 * t596 - t605 * t669;
t633 = t468 * t606 + t470 * t603;
t568 = t607 - t685;
t516 = -t568 * t602 + t690;
t469 = -t516 * t593 - t596 * t672;
t471 = t516 * t596 - t602 * t669;
t632 = t469 * t606 + t471 * t603;
t521 = -t551 * t602 + t590 * t674;
t472 = -t521 * t593 + t659;
t474 = t521 * t596 + t660;
t631 = t472 * t606 + t474 * t603;
t522 = t549 * t605 + t589 * t674;
t473 = -t522 * t593 - t659;
t475 = t522 * t596 - t660;
t630 = t473 * t606 + t475 * t603;
t554 = t677 * qJDD(2);
t557 = t584 + t685;
t496 = t554 * t593 + t557 * t596;
t497 = t554 * t596 - t557 * t593;
t629 = -t496 * t606 + t497 * t603;
t544 = t677 * t674;
t519 = qJDD(5) * t596 - t544 * t593;
t520 = qJDD(5) * t593 + t544 * t596;
t628 = t519 * t606 + t520 * t603;
t499 = t559 * t597 - t560 * t594;
t239 = t250 * t602 - t331 * t605;
t204 = -pkin(8) * t239 + (-pkin(9) * t605 + t701) * t249;
t211 = -pkin(4) * t239 + pkin(5) * t331 - pkin(9) * t250;
t187 = -qJ(4) * t219 - t593 * t204 - t596 * t211 + t239 * t704;
t192 = qJ(3) * t239 - qJ(4) * t218 + t204 * t596 - t211 * t593;
t200 = t218 * t603 + t219 * t606;
t621 = pkin(7) * t200 + t187 * t606 + t192 * t603;
t244 = -pkin(9) * t373 - t249;
t335 = t375 * t602 + t458 * t605;
t232 = -pkin(8) * t335 + t244 * t605 + t373 * t701;
t235 = -pkin(4) * t335 - pkin(5) * t458 - pkin(9) * t375 - t250;
t201 = -qJ(4) * t298 - t593 * t232 - t596 * t235 + t335 * t704;
t202 = qJ(3) * t335 - qJ(4) * t297 + t232 * t596 - t235 * t593;
t255 = t297 * t603 + t298 * t606;
t620 = pkin(7) * t255 + t201 * t606 + t202 * t603;
t276 = -pkin(5) * t404 + t286;
t303 = -pkin(9) * t404 + t697;
t353 = t405 * t602 + t437 * t605;
t242 = -pkin(8) * t353 - t276 * t602 + t303 * t605;
t265 = -pkin(4) * t353 - pkin(5) * t437 - pkin(9) * t405 + t696;
t208 = -qJ(4) * t312 - t593 * t242 - t596 * t265 + t353 * t704;
t212 = qJ(3) * t353 - qJ(4) * t309 + t242 * t596 - t265 * t593;
t261 = t309 * t603 + t312 * t606;
t619 = pkin(7) * t261 + t208 * t606 + t212 * t603;
t278 = -pkin(5) * t410 + t287;
t305 = -pkin(9) * t410 + t696;
t357 = t411 * t602 - t439 * t605;
t243 = -pkin(8) * t357 - t278 * t602 + t305 * t605;
t267 = -pkin(4) * t357 + pkin(5) * t439 - pkin(9) * t411 - t697;
t209 = -qJ(4) * t320 - t593 * t243 - t596 * t267 + t357 * t704;
t214 = qJ(3) * t357 - qJ(4) * t319 + t243 * t596 - t267 * t593;
t266 = t319 * t603 + t320 * t606;
t618 = pkin(7) * t266 + t209 * t606 + t214 * t603;
t213 = -qJ(4) * t273 - (pkin(4) * t596 + pkin(8) * t593 + t704) * t293;
t224 = -qJ(4) * t272 - (pkin(4) * t593 - pkin(8) * t596 + qJ(3)) * t293;
t238 = t272 * t603 + t273 * t606;
t617 = pkin(7) * t238 + t213 * t606 + t224 * t603;
t301 = -qJ(4) * t318 + t518 * t704;
t302 = qJ(3) * t518 + qJ(4) * t317;
t616 = -pkin(7) * t645 + t301 * t606 + t302 * t603;
t511 = t571 * t602 + t690;
t328 = -pkin(4) * t511 + t350;
t348 = -pkin(8) * t511 + t695;
t270 = -qJ(4) * t455 - t596 * t328 - t593 * t348 + t511 * t704;
t280 = qJ(3) * t511 - qJ(4) * t453 - t328 * t593 + t348 * t596;
t395 = t453 * t603 + t455 * t606;
t615 = pkin(7) * t395 + t270 * t606 + t280 * t603;
t513 = t569 * t605 - t689;
t329 = -pkin(4) * t513 + t351;
t349 = -pkin(8) * t513 + t681;
t271 = -qJ(4) * t456 - t596 * t329 - t593 * t349 + t513 * t704;
t281 = qJ(3) * t513 - qJ(4) * t454 - t329 * t593 + t349 * t596;
t396 = t454 * t603 + t456 * t606;
t614 = pkin(7) * t396 + t271 * t606 + t281 * t603;
t284 = -qJ(4) * t497 - t293 * t593;
t285 = -qJ(4) * t496 + t293 * t596;
t429 = t496 * t603 + t497 * t606;
t613 = pkin(7) * t429 + t284 * t606 + t285 * t603;
t612 = -pkin(7) * t494 - t716;
t611 = -pkin(7) * t625 + t717;
t610 = pkin(7) * t391 + (pkin(2) * t606 + qJ(3) * t603) * t525;
t565 = t594 * t673;
t512 = -t568 * t605 - t691;
t510 = -t570 * t602 - t688;
t509 = t654 * t602;
t508 = t653 * t605;
t507 = t598 * t525;
t491 = t548 * t605 - t550 * t602;
t483 = t494 * t598;
t480 = t494 * t595;
t457 = 0.2e1 * t592 + t623;
t452 = 0.2e1 * t587 + t658;
t444 = -t519 * t603 + t520 * t606;
t434 = t628 * t598;
t424 = -t451 * t602 + t605 * t624;
t417 = t629 * t598;
t416 = t629 * t595;
t415 = t483 * t594 - t597 * t625;
t413 = -t483 * t597 - t594 * t625;
t409 = -t473 * t603 + t475 * t606;
t408 = -t472 * t603 + t474 * t606;
t407 = -t469 * t603 + t471 * t606;
t406 = -t468 * t603 + t470 * t606;
t401 = t403 * t598;
t398 = -t433 * t602 + t667;
t397 = -t431 * t602 - t667;
t394 = -pkin(2) * t449 + qJ(3) * t446;
t393 = t466 * t595 + t657;
t392 = t595 * t467 - t705;
t389 = -t447 * t603 + t448 * t606;
t388 = -t457 * t595 + t657;
t387 = t391 * t598;
t386 = -t595 * t452 + t705;
t383 = -t595 * t509 + t598 * t630;
t382 = -t595 * t508 + t598 * t631;
t381 = -t595 * t512 + t598 * t632;
t380 = -t595 * t510 + t598 * t633;
t379 = -t402 * t598 + t684;
t378 = -t402 * t595 - t507;
t368 = t595 * t513 + t598 * t634;
t367 = t595 * t511 + t598 * t635;
t366 = -t598 * t513 + t595 * t634;
t365 = -t598 * t511 + t595 * t635;
t362 = -t423 * t602 + t438 * t605;
t361 = -t422 * t602 - t441 * t605;
t360 = t598 * t637 + t684;
t359 = t595 * t637 - t507;
t356 = -t417 * t594 + t429 * t597;
t355 = t417 * t597 + t429 * t594;
t352 = -t595 * t491 + t598 * t636;
t347 = -qJ(3) * t552 + t553 * t704 + t384;
t346 = qJ(3) * t553 + t552 * t704 + t385;
t344 = -t374 * t602 - t501 * t605;
t334 = (-t479 * t595 - t598 * t708) * pkin(7) + t717;
t333 = (t480 * t595 + t483 * t598) * pkin(7) + t716;
t323 = -pkin(1) * t378 + t403 * t698;
t322 = -t379 * t594 + t403 * t597;
t321 = t379 * t597 + t403 * t594;
t314 = -t368 * t594 + t396 * t597;
t313 = -t367 * t594 + t395 * t597;
t311 = t368 * t597 + t396 * t594;
t310 = t367 * t597 + t395 * t594;
t308 = (-t378 * t595 - t379 * t598) * pkin(7);
t307 = -t360 * t594 + t391 * t597;
t306 = t360 * t597 + t391 * t594;
t304 = -t369 * t603 + t370 * t606;
t296 = -pkin(4) * t548 - pkin(8) * t517 + qJ(3) * t456 - t454 * t704 - t695;
t295 = -pkin(4) * t550 - pkin(8) * t515 + qJ(3) * t455 - t453 * t704 + t681;
t291 = -pkin(1) * t479 - t595 * t346 + t598 * t612;
t290 = pkin(1) * t480 - t595 * t347 + t598 * t611;
t289 = -t595 * t424 + t598 * t638;
t288 = (-pkin(2) * t603 + qJ(3) * t606) * t525 + (-t359 * t595 - t360 * t598) * pkin(7);
t283 = -t338 * t603 + t340 * t606;
t282 = -t337 * t603 + t339 * t606;
t279 = -pkin(1) * t359 - t595 * t394 + t598 * t610;
t277 = -pkin(4) * t557 - pkin(8) * t554 + qJ(3) * t497 - t496 * t704 - t294;
t275 = -t325 * t603 + t327 * t606;
t274 = -t324 * t603 + t326 * t606;
t269 = -t595 * t398 + t598 * t639;
t268 = -t595 * t397 + t598 * t640;
t262 = t645 * t598;
t260 = t595 * t518 + t598 * t715;
t259 = -t598 * t518 + t595 * t715;
t258 = -t595 * t362 + t598 * t641;
t257 = -t595 * t361 + t598 * t642;
t256 = -t299 * t603 + t300 * t606;
t254 = t595 * t357 + t598 * t643;
t253 = -t598 * t357 + t595 * t643;
t252 = t595 * t353 + t598 * t646;
t251 = -t598 * t353 + t595 * t646;
t248 = qJ(3) * t318 + t317 * t704;
t247 = -t595 * t344 + t598 * t647;
t246 = t595 * t335 + t598 * t648;
t245 = -t598 * t335 + t595 * t648;
t241 = -t603 * t284 + t606 * t285 + (-t416 * t595 - t417 * t598) * pkin(7);
t237 = -t260 * t594 - t597 * t645;
t236 = t260 * t597 - t594 * t645;
t234 = -t254 * t594 + t266 * t597;
t233 = t254 * t597 + t266 * t594;
t231 = -t603 * t271 + t606 * t281 + (-t366 * t595 - t368 * t598) * pkin(7);
t230 = -t603 * t270 + t606 * t280 + (-t365 * t595 - t367 * t598) * pkin(7);
t229 = -t252 * t594 + t261 * t597;
t228 = t252 * t597 + t261 * t594;
t227 = -t293 * t595 + t598 * t649;
t226 = t293 * t598 + t595 * t649;
t225 = -pkin(1) * t416 - t595 * t277 + t598 * t613;
t223 = -t246 * t594 + t255 * t597;
t222 = t246 * t597 + t255 * t594;
t221 = -pkin(1) * t366 - t595 * t296 + t598 * t614;
t220 = -pkin(1) * t365 - t595 * t295 + t598 * t615;
t217 = -t603 * t301 + t606 * t302 + (-t259 * t595 - t260 * t598) * pkin(7);
t216 = pkin(4) * t410 - pkin(8) * t358 + qJ(3) * t320 - t278 * t605 - t305 * t602 - t319 * t704;
t215 = pkin(4) * t404 - pkin(8) * t354 + qJ(3) * t312 - t276 * t605 - t303 * t602 - t309 * t704;
t210 = pkin(4) * t376 - pkin(8) * t294 + qJ(3) * t273 - t272 * t704;
t207 = -t227 * t594 + t238 * t597;
t206 = t227 * t597 + t238 * t594;
t205 = -pkin(8) * t336 + qJ(3) * t298 - t244 * t602 + (pkin(4) + t700) * t373 - t704 * t297;
t203 = -pkin(1) * t259 - t595 * t248 + t598 * t616;
t199 = t595 * t239 + t598 * t650;
t198 = -t598 * t239 + t595 * t650;
t197 = -t603 * t209 + t606 * t214 + (-t253 * t595 - t254 * t598) * pkin(7);
t196 = -t603 * t208 + t606 * t212 + (-t251 * t595 - t252 * t598) * pkin(7);
t195 = -t603 * t213 + t606 * t224 + (-t226 * t595 - t227 * t598) * pkin(7);
t194 = -pkin(1) * t253 - t595 * t216 + t598 * t618;
t193 = -pkin(1) * t251 - t595 * t215 + t598 * t619;
t191 = -pkin(1) * t226 - t595 * t210 + t598 * t617;
t190 = -t603 * t201 + t606 * t202 + (-t245 * t595 - t246 * t598) * pkin(7);
t189 = -t199 * t594 + t200 * t597;
t188 = t199 * t597 + t200 * t594;
t186 = -pkin(8) * t240 + qJ(3) * t219 - t704 * t218 + (pkin(4) + t656) * t249;
t185 = -pkin(1) * t245 - t595 * t205 + t598 * t620;
t184 = -t603 * t187 + t606 * t192 + (-t198 * t595 - t199 * t598) * pkin(7);
t183 = -pkin(1) * t198 - t595 * t186 + t598 * t621;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t500, 0, 0, 0, 0, 0, 0, t489, t488, 0, t322, 0, 0, 0, 0, 0, 0, t489, 0, -t488, t307, 0, 0, 0, 0, 0, 0, t415, -t714, 0, t237, 0, 0, 0, 0, 0, 0, t313, t314, t356, t207, 0, 0, 0, 0, 0, 0, t229, t234, t223, t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t499, 0, 0, 0, 0, 0, 0, -t626, -t484, 0, t321, 0, 0, 0, 0, 0, 0, -t626, 0, t484, t306, 0, 0, 0, 0, 0, 0, t413, -t713, 0, t236, 0, 0, 0, 0, 0, 0, t310, t311, t355, t206, 0, 0, 0, 0, 0, 0, t228, t233, t222, t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t679, 0, 0, 0, 0, 0, 0, t530, -t529, 0, t378, 0, 0, 0, 0, 0, 0, t530, 0, t529, t359, 0, 0, 0, 0, 0, 0, -t480, t479, 0, t259, 0, 0, 0, 0, 0, 0, t365, t366, t416, t226, 0, 0, 0, 0, 0, 0, t251, t253, t245, t198; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t712, -t711, -t499, -qJ(1) * t499, 0, 0, -t488, 0, t489, t565, -t393 * t594 + t662, -t392 * t594 - t723, -t401 * t594 + t402 * t597, -qJ(1) * t321 + t308 * t597 - t323 * t594, 0, -t488, 0, t565, -t489, 0, -t388 * t594 + t662, -t387 * t594 - t597 * t637, -t386 * t594 + t723, -qJ(1) * t306 - t279 * t594 + t288 * t597, 0, 0, t714, 0, t415, t565, -qJ(1) * t413 - t290 * t594 + t333 * t597, qJ(1) * t713 - t291 * t594 + t334 * t597, -t262 * t594 + t597 * t715, -qJ(1) * t236 - t203 * t594 + t217 * t597, -t383 * t594 + t409 * t597, -t352 * t594 + t389 * t597, -t381 * t594 + t407 * t597, -t382 * t594 + t408 * t597, -t380 * t594 + t406 * t597, -t434 * t594 + t444 * t597, -qJ(1) * t310 - t220 * t594 + t230 * t597, -qJ(1) * t311 - t221 * t594 + t231 * t597, -qJ(1) * t355 - t225 * t594 + t241 * t597, -qJ(1) * t206 - t191 * t594 + t195 * t597, -t269 * t594 + t283 * t597, -t247 * t594 + t256 * t597, -t257 * t594 + t274 * t597, -t268 * t594 + t282 * t597, -t258 * t594 + t275 * t597, -t289 * t594 + t304 * t597, -qJ(1) * t228 - t193 * t594 + t196 * t597, -qJ(1) * t233 - t194 * t594 + t197 * t597, -qJ(1) * t222 - t185 * t594 + t190 * t597, -qJ(1) * t188 - t183 * t594 + t184 * t597; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t711, -t712, t500, qJ(1) * t500, 0, 0, t484, 0, -t626, -t665, t393 * t597 + t678, t392 * t597 - t724, t401 * t597 + t402 * t594, qJ(1) * t322 + t308 * t594 + t323 * t597, 0, t484, 0, -t665, t626, 0, t388 * t597 + t678, t387 * t597 - t594 * t637, t386 * t597 + t724, qJ(1) * t307 + t279 * t597 + t288 * t594, 0, 0, t713, 0, t413, -t665, qJ(1) * t415 + t290 * t597 + t333 * t594, -qJ(1) * t714 + t291 * t597 + t334 * t594, t262 * t597 + t594 * t715, qJ(1) * t237 + t203 * t597 + t217 * t594, t383 * t597 + t409 * t594, t352 * t597 + t389 * t594, t381 * t597 + t407 * t594, t382 * t597 + t408 * t594, t380 * t597 + t406 * t594, t434 * t597 + t444 * t594, qJ(1) * t313 + t220 * t597 + t230 * t594, qJ(1) * t314 + t221 * t597 + t231 * t594, qJ(1) * t356 + t225 * t597 + t241 * t594, qJ(1) * t207 + t191 * t597 + t195 * t594, t269 * t597 + t283 * t594, t247 * t597 + t256 * t594, t257 * t597 + t274 * t594, t268 * t597 + t282 * t594, t258 * t597 + t275 * t594, t289 * t597 + t304 * t594, qJ(1) * t229 + t193 * t597 + t196 * t594, qJ(1) * t234 + t194 * t597 + t197 * t594, qJ(1) * t223 + t185 * t597 + t190 * t594, qJ(1) * t189 + t183 * t597 + t184 * t594; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t559, t560, 0, 0, 0, 0, t529, 0, t530, t579, -t466 * t598 + t666, -t598 * t467 - t706, t403 * t595, pkin(1) * t379 + t403 * t699, 0, t529, 0, t579, -t530, 0, t457 * t598 + t666, t391 * t595, t598 * t452 + t706, pkin(1) * t360 + t598 * t394 + t595 * t610, 0, 0, -t479, 0, -t480, t579, -pkin(1) * t483 + t598 * t347 + t595 * t611, pkin(1) * t708 + t598 * t346 + t595 * t612, t645 * t595, pkin(1) * t260 + t598 * t248 + t595 * t616, t598 * t509 + t595 * t630, t598 * t491 + t595 * t636, t598 * t512 + t595 * t632, t598 * t508 + t595 * t631, t598 * t510 + t595 * t633, t628 * t595, pkin(1) * t367 + t598 * t295 + t595 * t615, pkin(1) * t368 + t598 * t296 + t595 * t614, pkin(1) * t417 + t598 * t277 + t595 * t613, pkin(1) * t227 + t598 * t210 + t595 * t617, t598 * t398 + t595 * t639, t598 * t344 + t595 * t647, t598 * t361 + t595 * t642, t598 * t397 + t595 * t640, t598 * t362 + t595 * t641, t598 * t424 + t595 * t638, pkin(1) * t252 + t598 * t215 + t595 * t619, pkin(1) * t254 + t598 * t216 + t595 * t618, pkin(1) * t246 + t598 * t205 + t595 * t620, pkin(1) * t199 + t598 * t186 + t595 * t621;];
tauB_reg  = t1;
