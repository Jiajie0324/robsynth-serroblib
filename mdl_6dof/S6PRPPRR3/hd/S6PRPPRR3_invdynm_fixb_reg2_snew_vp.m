% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6PRPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta4]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 22:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6PRPPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:02:00
% EndTime: 2019-05-04 22:02:20
% DurationCPUTime: 21.14s
% Computational Cost: add. (104443->799), mult. (186071->1083), div. (0->0), fcn. (120691->12), ass. (0->510)
t1145 = sin(pkin(10));
t1154 = sin(qJ(2));
t1157 = cos(qJ(2));
t1158 = qJD(2) ^ 2;
t1110 = qJDD(2) * t1154 + t1157 * t1158;
t1149 = cos(pkin(6));
t1089 = t1110 * t1149;
t1253 = t1154 * t1158;
t1109 = qJDD(2) * t1157 - t1253;
t1148 = cos(pkin(10));
t1201 = t1089 * t1145 - t1109 * t1148;
t1146 = sin(pkin(6));
t1087 = t1110 * t1146;
t1242 = g(1) * t1145 - t1148 * g(2);
t1276 = g(3) - qJDD(1);
t1082 = t1146 * t1242 + t1149 * t1276;
t1252 = t1157 * t1082;
t987 = (t1087 * t1146 + t1089 * t1149) * pkin(7) - t1252;
t1315 = -qJ(1) * t1201 - t1145 * t987;
t1045 = t1089 * t1148 + t1109 * t1145;
t1314 = -qJ(1) * t1045 - t1148 * t987;
t1152 = sin(qJ(6));
t1155 = cos(qJ(6));
t1153 = sin(qJ(5));
t1268 = qJD(2) * t1153;
t1099 = qJD(5) * t1155 + t1152 * t1268;
t1100 = -t1152 * qJD(5) + t1155 * t1268;
t1061 = t1099 * t1100;
t1129 = qJD(5) * t1268;
t1156 = cos(qJ(5));
t1248 = t1156 * qJDD(2);
t1105 = t1129 - t1248;
t1097 = qJDD(6) - t1105;
t1295 = -t1061 + t1097;
t1312 = t1152 * t1295;
t1311 = t1155 * t1295;
t1310 = -t1146 * t1276 + t1149 * t1242;
t1284 = pkin(5) * t1156;
t1309 = pkin(9) * t1153 + t1284;
t1144 = sin(pkin(11));
t1147 = cos(pkin(11));
t1113 = g(1) * t1148 + g(2) * t1145;
t1027 = -t1157 * t1113 + t1154 * t1310;
t1160 = 0.2e1 * qJD(3) * qJD(2) + t1027;
t1266 = qJDD(2) * qJ(3);
t1159 = t1160 + t1266;
t1289 = pkin(2) + pkin(3);
t1005 = -t1158 * t1289 + t1159;
t1143 = qJDD(2) * pkin(2);
t1026 = -t1113 * t1154 - t1157 * t1310;
t1191 = -qJDD(3) - t1026;
t1009 = -t1158 * qJ(3) - t1143 - t1191;
t1161 = -qJDD(2) * pkin(3) + t1009;
t939 = t1144 * t1005 - t1147 * t1161;
t940 = t1147 * t1005 + t1144 * t1161;
t1228 = t1144 * t939 + t1147 * t940;
t867 = t1144 * t940 - t1147 * t939;
t813 = t1154 * t867 + t1157 * t1228;
t1308 = t1154 * t1228 - t1157 * t867;
t1075 = qJDD(4) + t1082;
t1106 = -t1144 * qJDD(2) + t1147 * t1158;
t1021 = qJ(4) * t1106 + t1075 * t1147;
t1107 = qJDD(2) * t1147 + t1144 * t1158;
t1214 = qJ(4) * t1107 + t1075 * t1144;
t1307 = -t1021 * t1154 + t1157 * t1214;
t1306 = t1157 * t1021 + t1154 * t1214;
t1053 = t1106 * t1154 - t1107 * t1157;
t1199 = t1106 * t1157 + t1107 * t1154;
t1296 = t1199 * t1149;
t1305 = t1053 * t1148 + t1145 * t1296;
t1304 = t1053 * t1145 - t1148 * t1296;
t1303 = t1145 * t1276;
t1302 = t1148 * t1276;
t1297 = t1199 * t1146;
t1294 = -t1148 * t1113 - t1145 * t1242;
t1254 = t1154 * t1082;
t1229 = pkin(7) * t1109 + t1254;
t1293 = pkin(1) * t1089 + t1146 * t1229;
t1292 = -t1145 * t1113 + t1148 * t1242;
t1291 = -pkin(1) * t1087 + t1149 * t1229;
t1290 = qJD(5) ^ 2;
t1095 = t1099 ^ 2;
t1096 = t1100 ^ 2;
t1267 = qJD(2) * t1156;
t1126 = qJD(6) + t1267;
t1124 = t1126 ^ 2;
t928 = -pkin(4) * t1158 - qJDD(2) * pkin(8) + t940;
t901 = -t1156 * t1075 + t1153 * t928;
t902 = t1153 * t1075 + t1156 * t928;
t849 = t1153 * t902 - t1156 * t901;
t1288 = pkin(4) * t849;
t1285 = pkin(5) * t1153;
t1283 = pkin(7) * t1146;
t1282 = pkin(7) * t1149;
t1281 = pkin(8) * t1147;
t851 = t1153 * t901 + t1156 * t902;
t927 = qJDD(2) * pkin(4) - t1158 * pkin(8) + t939;
t824 = t1144 * t927 + t1147 * t851;
t1279 = qJ(4) * t824;
t1278 = qJ(4) * t867;
t1277 = qJ(4) * t1228;
t1190 = t1158 * t1309;
t880 = -qJDD(5) * pkin(5) - pkin(9) * t1290 - t1153 * t1190 + t901;
t1274 = t1152 * t880;
t1273 = t1153 * t927;
t1272 = t1155 * t880;
t1271 = t1156 * t927;
t1132 = t1149 * qJDD(2);
t1090 = -t1132 * t1157 + t1149 * t1253;
t1048 = t1090 * t1145 - t1110 * t1148;
t1250 = t1146 * qJDD(2);
t1088 = t1146 * t1253 - t1157 * t1250;
t985 = -t1254 + (t1088 * t1146 + t1090 * t1149) * pkin(7);
t1270 = qJ(1) * t1048 + t1145 * t985;
t1269 = qJD(2) * qJD(5);
t1024 = t1061 + t1097;
t1265 = t1024 * t1152;
t1264 = t1024 * t1155;
t1125 = t1153 * t1158 * t1156;
t1114 = qJDD(5) + t1125;
t1263 = t1114 * t1153;
t1262 = t1114 * t1156;
t1115 = qJDD(5) - t1125;
t1261 = t1115 * t1153;
t1260 = t1115 * t1156;
t1259 = t1126 * t1152;
t1258 = t1126 * t1155;
t1140 = t1153 ^ 2;
t1257 = t1140 * t1158;
t1255 = t1146 * t1082;
t1141 = t1156 ^ 2;
t1251 = -t1140 - t1141;
t1249 = t1153 * qJDD(2);
t1247 = t1153 * t1061;
t1246 = t1156 * t1061;
t1245 = qJD(5) * t1267;
t1244 = -pkin(1) * t1090 - t1110 * t1283 + t1146 * t1252;
t1243 = t1148 * t1250;
t823 = t1144 * t851 - t1147 * t927;
t1241 = -qJ(4) * t823 + t1144 * t1288;
t1200 = t1090 * t1148 + t1110 * t1145;
t1239 = qJ(1) * t1200 + t1148 * t985;
t881 = -pkin(5) * t1290 + qJDD(5) * pkin(9) - t1156 * t1190 + t902;
t1231 = t1105 + t1129;
t1103 = -t1245 - t1249;
t1232 = -t1103 + t1245;
t891 = -pkin(5) * t1231 + pkin(9) * t1232 + t927;
t839 = t1152 * t881 - t1155 * t891;
t840 = t1152 * t891 + t1155 * t881;
t796 = t1152 * t839 + t1155 * t840;
t1238 = t1155 * qJDD(5) - t1152 * t1103;
t1237 = t1144 * t1125;
t1236 = t1147 * t1125;
t1235 = pkin(4) * t927 - pkin(8) * t851;
t1234 = -pkin(5) * t880 + pkin(9) * t796;
t1233 = pkin(1) * t1088 - t1110 * t1282 + t1149 * t1252;
t795 = t1152 * t840 - t1155 * t839;
t781 = t1153 * t880 + t1156 * t796;
t763 = t1144 * t781 - t1147 * t795;
t764 = t1144 * t795 + t1147 * t781;
t1227 = t1154 * t764 - t1157 * t763;
t1226 = t1154 * t824 - t1157 * t823;
t1018 = t1095 + t1096;
t1198 = -t1152 * qJDD(5) - t1155 * t1103;
t1038 = qJD(6) * t1099 - t1198;
t1084 = t1126 * t1099;
t1000 = t1038 - t1084;
t998 = (qJD(6) - t1126) * t1100 + t1238;
t926 = t1000 * t1152 + t1155 * t998;
t885 = -t1018 * t1153 + t1156 * t926;
t924 = -t1000 * t1155 + t1152 * t998;
t854 = t1144 * t885 - t1147 * t924;
t855 = t1144 * t924 + t1147 * t885;
t1225 = t1154 * t855 - t1157 * t854;
t1058 = t1096 - t1095;
t1037 = qJD(6) * t1100 + t1238;
t1083 = t1126 * t1100;
t997 = t1037 + t1083;
t999 = t1038 + t1084;
t925 = -t1152 * t999 + t1155 * t997;
t893 = t1058 * t1153 + t1156 * t925;
t923 = t1152 * t997 + t1155 * t999;
t856 = t1144 * t893 - t1147 * t923;
t857 = t1144 * t923 + t1147 * t893;
t1224 = t1154 * t857 - t1157 * t856;
t1049 = -t1124 - t1095;
t966 = t1049 * t1155 - t1312;
t906 = -t1153 * t997 + t1156 * t966;
t965 = t1049 * t1152 + t1311;
t864 = t1144 * t906 - t1147 * t965;
t865 = t1144 * t965 + t1147 * t906;
t1223 = t1154 * t865 - t1157 * t864;
t1001 = (-qJD(6) - t1126) * t1099 + t1198;
t1057 = -t1096 - t1124;
t972 = -t1057 * t1152 - t1264;
t908 = -t1001 * t1153 + t1156 * t972;
t971 = t1057 * t1155 - t1265;
t870 = t1144 * t908 - t1147 * t971;
t871 = t1144 * t971 + t1147 * t908;
t1220 = t1154 * t871 - t1157 * t870;
t1081 = -t1096 + t1124;
t981 = -t1081 * t1152 + t1311;
t913 = t1000 * t1153 + t1156 * t981;
t979 = t1081 * t1155 + t1312;
t874 = t1144 * t913 - t1147 * t979;
t876 = t1144 * t979 + t1147 * t913;
t1219 = t1154 * t876 - t1157 * t874;
t1080 = t1095 - t1124;
t982 = t1080 * t1155 - t1265;
t996 = -t1037 + t1083;
t914 = -t1153 * t996 + t1156 * t982;
t980 = t1080 * t1152 + t1264;
t875 = t1144 * t914 - t1147 * t980;
t877 = t1144 * t980 + t1147 * t914;
t1218 = t1154 * t877 - t1157 * t875;
t990 = -t1037 * t1152 - t1099 * t1258;
t959 = t1156 * t990 - t1247;
t989 = -t1037 * t1155 + t1099 * t1259;
t886 = t1144 * t959 + t1147 * t989;
t888 = -t1144 * t989 + t1147 * t959;
t1217 = t1154 * t888 - t1157 * t886;
t992 = t1038 * t1155 + t1100 * t1259;
t960 = t1156 * t992 + t1247;
t991 = t1038 * t1152 - t1100 * t1258;
t887 = t1144 * t960 - t1147 * t991;
t889 = t1144 * t991 + t1147 * t960;
t1216 = t1154 * t889 - t1157 * t887;
t1010 = (t1099 * t1152 + t1100 * t1155) * t1126;
t1011 = (t1099 * t1155 - t1100 * t1152) * t1126;
t984 = t1011 * t1156 + t1097 * t1153;
t920 = -t1010 * t1147 + t1144 * t984;
t921 = t1010 * t1144 + t1147 * t984;
t1215 = t1154 * t921 - t1157 * t920;
t1213 = -pkin(4) * t1147 - pkin(8) * t1144 - pkin(3);
t1006 = -t1158 * pkin(2) + t1159;
t949 = t1006 * t1157 + t1009 * t1154;
t1212 = t1006 * t1154 - t1009 * t1157;
t1102 = 0.2e1 * t1245 + t1249;
t1104 = 0.2e1 * t1129 - t1248;
t1051 = t1102 * t1153 + t1104 * t1156;
t1136 = t1141 * t1158;
t1112 = -t1136 + t1257;
t1007 = t1051 * t1144 - t1112 * t1147;
t1008 = t1051 * t1147 + t1112 * t1144;
t1211 = -t1007 * t1157 + t1008 * t1154;
t1123 = -t1136 - t1290;
t1072 = t1123 * t1156 - t1263;
t1013 = t1072 * t1144 + t1104 * t1147;
t1015 = t1072 * t1147 - t1104 * t1144;
t1210 = -t1013 * t1157 + t1015 * t1154;
t1121 = -t1257 - t1290;
t1074 = -t1121 * t1153 - t1260;
t1014 = t1074 * t1144 + t1102 * t1147;
t1016 = t1074 * t1147 - t1102 * t1144;
t1209 = -t1014 * t1157 + t1016 * t1154;
t963 = t1026 * t1157 - t1027 * t1154;
t964 = t1026 * t1154 + t1027 * t1157;
t1122 = t1136 - t1290;
t1071 = t1122 * t1156 - t1261;
t1028 = t1071 * t1144 + t1147 * t1248;
t1030 = t1071 * t1147 - t1144 * t1248;
t1208 = -t1028 * t1157 + t1030 * t1154;
t1120 = -t1257 + t1290;
t1073 = -t1120 * t1153 + t1262;
t1029 = t1073 * t1144 + t1147 * t1249;
t1031 = t1073 * t1147 - t1144 * t1249;
t1207 = -t1029 * t1157 + t1031 * t1154;
t1078 = -t1105 * t1153 + t1141 * t1269;
t1032 = t1078 * t1144 - t1236;
t1034 = t1078 * t1147 + t1237;
t1206 = -t1032 * t1157 + t1034 * t1154;
t1079 = t1103 * t1156 + t1140 * t1269;
t1033 = t1079 * t1144 + t1236;
t1035 = t1079 * t1147 - t1237;
t1205 = -t1033 * t1157 + t1035 * t1154;
t1108 = t1251 * qJDD(2);
t1111 = t1136 + t1257;
t1055 = t1108 * t1144 + t1111 * t1147;
t1056 = t1108 * t1147 - t1111 * t1144;
t1204 = -t1055 * t1157 + t1056 * t1154;
t1098 = t1251 * t1269;
t1076 = -t1147 * qJDD(5) + t1098 * t1144;
t1077 = qJDD(5) * t1144 + t1098 * t1147;
t1203 = -t1076 * t1157 + t1077 * t1154;
t780 = t1153 * t796 - t1156 * t880;
t751 = -pkin(8) * t780 + (-pkin(9) * t1156 + t1285) * t795;
t756 = -pkin(4) * t780 - t1234;
t1197 = -qJ(4) * t763 - t1144 * t756 + t1147 * t751;
t787 = -pkin(9) * t924 - t795;
t884 = t1018 * t1156 + t1153 * t926;
t777 = -pkin(8) * t884 + t1156 * t787 + t1285 * t924;
t1166 = pkin(5) * t1018 + pkin(9) * t926 + t796;
t778 = -pkin(4) * t884 - t1166;
t1196 = -qJ(4) * t854 - t1144 * t778 + t1147 * t777;
t827 = -pkin(5) * t965 + t839;
t860 = -pkin(9) * t965 + t1274;
t905 = t1153 * t966 + t1156 * t997;
t784 = -pkin(8) * t905 - t1153 * t827 + t1156 * t860;
t1188 = pkin(5) * t997 + pkin(9) * t966 - t1272;
t814 = -pkin(4) * t905 - t1188;
t1195 = -qJ(4) * t864 - t1144 * t814 + t1147 * t784;
t829 = -pkin(5) * t971 + t840;
t862 = -pkin(9) * t971 + t1272;
t907 = t1001 * t1156 + t1153 * t972;
t786 = -pkin(8) * t907 - t1153 * t829 + t1156 * t862;
t1187 = pkin(5) * t1001 + pkin(9) * t972 + t1274;
t816 = -pkin(4) * t907 - t1187;
t1194 = -qJ(4) * t870 - t1144 * t816 + t1147 * t786;
t1068 = t1123 * t1153 + t1262;
t878 = -pkin(4) * t1068 + t901;
t899 = -pkin(8) * t1068 + t1273;
t1193 = -qJ(4) * t1013 - t1144 * t878 + t1147 * t899;
t1070 = t1121 * t1156 - t1261;
t879 = -pkin(4) * t1070 + t902;
t900 = -pkin(8) * t1070 + t1271;
t1192 = -qJ(4) * t1014 - t1144 * t879 + t1147 * t900;
t1189 = -pkin(8) * t781 + (pkin(4) + t1309) * t795;
t1186 = pkin(4) * t1104 + pkin(8) * t1072 - t1271;
t1185 = pkin(4) * t1102 + pkin(8) * t1074 + t1273;
t1175 = -qJ(4) * t764 - t1144 * t751 - t1147 * t756;
t731 = t1289 * t780 + t1175;
t735 = qJ(3) * t780 + t1197;
t745 = t1154 * t763 + t1157 * t764;
t1184 = pkin(7) * t745 + t1154 * t735 + t1157 * t731;
t1174 = -qJ(4) * t855 - t1144 * t777 - t1147 * t778;
t746 = t1289 * t884 + t1174;
t747 = qJ(3) * t884 + t1196;
t801 = t1154 * t854 + t1157 * t855;
t1183 = pkin(7) * t801 + t1154 * t747 + t1157 * t746;
t1173 = -qJ(4) * t865 - t1144 * t784 - t1147 * t814;
t753 = t1289 * t905 + t1173;
t757 = qJ(3) * t905 + t1195;
t809 = t1154 * t864 + t1157 * t865;
t1182 = pkin(7) * t809 + t1154 * t757 + t1157 * t753;
t1172 = -qJ(4) * t871 - t1144 * t786 - t1147 * t816;
t754 = t1289 * t907 + t1172;
t759 = qJ(3) * t907 + t1194;
t815 = t1154 * t870 + t1157 * t871;
t1181 = pkin(7) * t815 + t1154 * t759 + t1157 * t754;
t758 = -t1279 + (pkin(2) - t1213) * t849;
t769 = (qJ(3) - t1281) * t849 + t1241;
t779 = t1154 * t823 + t1157 * t824;
t1180 = pkin(7) * t779 + t1154 * t769 + t1157 * t758;
t858 = t1075 * t1289 - t1277;
t859 = qJ(3) * t1075 - t1278;
t1179 = pkin(7) * t813 + t1154 * t859 + t1157 * t858;
t1169 = -qJ(4) * t1015 - t1144 * t899 - t1147 * t878;
t821 = t1068 * t1289 + t1169;
t832 = qJ(3) * t1068 + t1193;
t955 = t1013 * t1154 + t1015 * t1157;
t1178 = pkin(7) * t955 + t1154 * t832 + t1157 * t821;
t1168 = -qJ(4) * t1016 - t1144 * t900 - t1147 * t879;
t822 = t1070 * t1289 + t1168;
t833 = qJ(3) * t1070 + t1192;
t956 = t1014 * t1154 + t1016 * t1157;
t1177 = pkin(7) * t956 + t1154 * t833 + t1157 * t822;
t837 = qJ(4) * t1056 - t1144 * t849;
t838 = -qJ(4) * t1055 - t1147 * t849;
t988 = t1055 * t1154 + t1056 * t1157;
t1176 = pkin(7) * t988 + t1154 * t838 - t1157 * t837;
t1171 = -pkin(7) * t1053 - t1307;
t1170 = -pkin(7) * t1199 + t1306;
t1167 = -pkin(8) * t885 - t1153 * t787 + (pkin(4) + t1284) * t924;
t1165 = pkin(4) * t1111 + pkin(8) * t1108 + t851;
t1164 = pkin(7) * t949 + (pkin(2) * t1157 + qJ(3) * t1154) * t1082;
t1163 = pkin(4) * t965 - pkin(8) * t906 - t1153 * t860 - t1156 * t827;
t1162 = pkin(4) * t971 - pkin(8) * t908 - t1153 * t862 - t1156 * t829;
t1117 = t1145 * t1250;
t1069 = t1120 * t1156 + t1263;
t1067 = t1122 * t1153 + t1260;
t1066 = t1232 * t1153;
t1065 = t1231 * t1156;
t1064 = t1149 * t1082;
t1050 = -t1102 * t1156 + t1104 * t1153;
t1044 = t1053 * t1149;
t1041 = t1053 * t1146;
t1017 = 0.2e1 * t1143 + t1191;
t1012 = t1160 + 0.2e1 * t1266;
t1004 = t1076 * t1154 + t1077 * t1157;
t994 = t1203 * t1149;
t993 = t1203 * t1146;
t983 = t1011 * t1153 - t1097 * t1156;
t976 = t1204 * t1149;
t975 = t1204 * t1146;
t974 = t1044 * t1145 - t1148 * t1199;
t973 = -t1044 * t1148 - t1145 * t1199;
t970 = t1033 * t1154 + t1035 * t1157;
t969 = t1032 * t1154 + t1034 * t1157;
t968 = t1029 * t1154 + t1031 * t1157;
t967 = t1028 * t1154 + t1030 * t1157;
t962 = t964 * t1149;
t961 = t964 * t1146;
t958 = t1153 * t992 - t1246;
t957 = t1153 * t990 + t1246;
t954 = -pkin(2) * t1009 + qJ(3) * t1006;
t953 = t1026 * t1146 + t1233;
t952 = t1146 * t1027 - t1291;
t951 = -t1026 * t1149 + t1244;
t950 = -t1149 * t1027 - t1293;
t947 = t1007 * t1154 + t1008 * t1157;
t946 = -t1017 * t1146 + t1233;
t945 = t1017 * t1149 + t1244;
t944 = t949 * t1149;
t943 = t949 * t1146;
t942 = -t1146 * t1012 + t1291;
t941 = t1149 * t1012 + t1293;
t938 = -t1146 * t1066 + t1149 * t1205;
t937 = t1146 * t1065 + t1149 * t1206;
t936 = t1149 * t1066 + t1146 * t1205;
t935 = -t1149 * t1065 + t1146 * t1206;
t934 = t1146 * t1069 + t1149 * t1207;
t933 = t1146 * t1067 + t1149 * t1208;
t932 = -t1149 * t1069 + t1146 * t1207;
t931 = -t1149 * t1067 + t1146 * t1208;
t930 = -t1149 * t963 + t1255;
t929 = -t1146 * t963 - t1064;
t918 = t1146 * t1070 + t1149 * t1209;
t917 = t1146 * t1068 + t1149 * t1210;
t916 = -t1149 * t1070 + t1146 * t1209;
t915 = -t1149 * t1068 + t1146 * t1210;
t912 = t1153 * t982 + t1156 * t996;
t911 = -t1000 * t1156 + t1153 * t981;
t910 = t1149 * t1212 + t1255;
t909 = t1146 * t1212 - t1064;
t904 = t1146 * t1050 + t1149 * t1211;
t903 = -t1149 * t1050 + t1146 * t1211;
t898 = -qJ(3) * t1106 + t1107 * t1289 + t939;
t897 = qJ(3) * t1107 + t1106 * t1289 + t940;
t892 = -t1058 * t1156 + t1153 * t925;
t883 = (-t1146 * t1297 - t1149 * t1296) * pkin(7) + t1306;
t882 = (t1041 * t1146 + t1044 * t1149) * pkin(7) + t1307;
t873 = pkin(1) * t930 + t1283 * t964;
t872 = -pkin(1) * t929 + t1282 * t964;
t863 = (-t1146 * t929 - t1149 * t930) * pkin(7);
t861 = t1154 * t920 + t1157 * t921;
t853 = qJ(3) * t1016 - t1014 * t1289 - t1185;
t852 = qJ(3) * t1015 - t1013 * t1289 - t1186;
t847 = -pkin(1) * t1297 - t1146 * t897 + t1149 * t1171;
t846 = pkin(1) * t1041 - t1146 * t898 + t1149 * t1170;
t845 = pkin(1) * t1296 + t1146 * t1171 + t1149 * t897;
t844 = -pkin(1) * t1044 + t1146 * t1170 + t1149 * t898;
t843 = t1146 * t983 + t1149 * t1215;
t842 = t1146 * t1215 - t1149 * t983;
t841 = (-pkin(2) * t1154 + qJ(3) * t1157) * t1082 + (-t1146 * t909 - t1149 * t910) * pkin(7);
t835 = t1154 * t887 + t1157 * t889;
t834 = t1154 * t886 + t1157 * t888;
t831 = -pkin(1) * t909 - t1146 * t954 + t1149 * t1164;
t830 = pkin(1) * t910 + t1146 * t1164 + t1149 * t954;
t828 = qJ(3) * t1056 - t1055 * t1289 - t1165;
t826 = t1154 * t875 + t1157 * t877;
t825 = t1154 * t874 + t1157 * t876;
t820 = t1146 * t958 + t1149 * t1216;
t819 = t1146 * t957 + t1149 * t1217;
t818 = t1146 * t1216 - t1149 * t958;
t817 = t1146 * t1217 - t1149 * t957;
t811 = t813 * t1149;
t810 = t813 * t1146;
t808 = t1146 * t1075 + t1149 * t1308;
t807 = -t1149 * t1075 + t1146 * t1308;
t806 = t1146 * t912 + t1149 * t1218;
t805 = t1146 * t911 + t1149 * t1219;
t804 = t1146 * t1218 - t1149 * t912;
t803 = t1146 * t1219 - t1149 * t911;
t802 = t1154 * t856 + t1157 * t857;
t800 = t1146 * t907 + t1149 * t1220;
t799 = t1146 * t1220 - t1149 * t907;
t798 = t1146 * t905 + t1149 * t1223;
t797 = t1146 * t1223 - t1149 * t905;
t792 = qJ(3) * t1228 - t1289 * t867;
t791 = t1146 * t892 + t1149 * t1224;
t790 = t1146 * t1224 - t1149 * t892;
t789 = t1146 * t884 + t1149 * t1225;
t788 = t1146 * t1225 - t1149 * t884;
t783 = t1154 * t837 + t1157 * t838 + (-t1146 * t975 - t1149 * t976) * pkin(7);
t775 = -t1154 * t822 + t1157 * t833 + (-t1146 * t916 - t1149 * t918) * pkin(7);
t774 = -t1154 * t821 + t1157 * t832 + (-t1146 * t915 - t1149 * t917) * pkin(7);
t773 = t1146 * t849 + t1149 * t1226;
t772 = t1146 * t1226 - t1149 * t849;
t771 = -pkin(1) * t975 - t1146 * t828 + t1149 * t1176;
t770 = pkin(1) * t976 + t1146 * t1176 + t1149 * t828;
t768 = -pkin(1) * t916 - t1146 * t853 + t1149 * t1177;
t767 = -pkin(1) * t915 - t1146 * t852 + t1149 * t1178;
t766 = pkin(1) * t918 + t1146 * t1177 + t1149 * t853;
t765 = pkin(1) * t917 + t1146 * t1178 + t1149 * t852;
t762 = -t1154 * t858 + t1157 * t859 + (-t1146 * t807 - t1149 * t808) * pkin(7);
t761 = qJ(3) * t871 - t1289 * t870 + t1162;
t760 = qJ(3) * t865 - t1289 * t864 + t1163;
t755 = qJ(3) * t824 - t1289 * t823 + t1235;
t752 = qJ(3) * t855 - t1289 * t854 + t1167;
t749 = -pkin(1) * t807 - t1146 * t792 + t1149 * t1179;
t748 = pkin(1) * t808 + t1146 * t1179 + t1149 * t792;
t744 = t1146 * t780 + t1149 * t1227;
t743 = t1146 * t1227 - t1149 * t780;
t742 = -t1154 * t754 + t1157 * t759 + (-t1146 * t799 - t1149 * t800) * pkin(7);
t741 = -t1154 * t753 + t1157 * t757 + (-t1146 * t797 - t1149 * t798) * pkin(7);
t740 = -t1154 * t758 + t1157 * t769 + (-t1146 * t772 - t1149 * t773) * pkin(7);
t739 = -pkin(1) * t799 - t1146 * t761 + t1149 * t1181;
t738 = pkin(1) * t800 + t1146 * t1181 + t1149 * t761;
t737 = -pkin(1) * t797 - t1146 * t760 + t1149 * t1182;
t736 = pkin(1) * t798 + t1146 * t1182 + t1149 * t760;
t734 = -pkin(1) * t772 - t1146 * t755 + t1149 * t1180;
t733 = pkin(1) * t773 + t1146 * t1180 + t1149 * t755;
t732 = -t1154 * t746 + t1157 * t747 + (-t1146 * t788 - t1149 * t789) * pkin(7);
t730 = qJ(3) * t764 - t1289 * t763 + t1189;
t729 = -pkin(1) * t788 - t1146 * t752 + t1149 * t1183;
t728 = pkin(1) * t789 + t1146 * t1183 + t1149 * t752;
t727 = -t1154 * t731 + t1157 * t735 + (-t1146 * t743 - t1149 * t744) * pkin(7);
t726 = -pkin(1) * t743 - t1146 * t730 + t1149 * t1184;
t725 = pkin(1) * t744 + t1146 * t1184 + t1149 * t730;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1303, -t1302, -t1292, -qJ(1) * t1292, 0, 0, -t1201, 0, t1048, t1117, -t1145 * t953 + t1239, -t1145 * t952 - t1314, -t1145 * t962 + t1148 * t963, t1148 * t863 - t1145 * t872 - qJ(1) * (t1145 * t964 + t1148 * t930), 0, -t1201, 0, t1117, -t1048, 0, -t1145 * t946 + t1239, -t1145 * t944 - t1148 * t1212, -t1145 * t942 + t1314, t1148 * t841 - t1145 * t831 - qJ(1) * (t1145 * t949 + t1148 * t910), 0, 0, t1305, 0, t974, t1117, -qJ(1) * t973 - t1145 * t846 + t1148 * t882, qJ(1) * t1304 - t1145 * t847 + t1148 * t883, t1145 * t811 + t1148 * t1308, t1148 * t762 - t1145 * t749 - qJ(1) * (t1145 * t813 + t1148 * t808), -t1145 * t938 + t1148 * t970, -t1145 * t904 + t1148 * t947, -t1145 * t934 + t1148 * t968, -t1145 * t937 + t1148 * t969, -t1145 * t933 + t1148 * t967, t1004 * t1148 - t1145 * t994, t1148 * t774 - t1145 * t767 - qJ(1) * (t1145 * t955 + t1148 * t917), t1148 * t775 - t1145 * t768 - qJ(1) * (t1145 * t956 + t1148 * t918), t1148 * t783 - t1145 * t771 - qJ(1) * (t1145 * t988 + t1148 * t976), t1148 * t740 - t1145 * t734 - qJ(1) * (t1145 * t779 + t1148 * t773), -t1145 * t820 + t1148 * t835, -t1145 * t791 + t1148 * t802, -t1145 * t805 + t1148 * t825, -t1145 * t819 + t1148 * t834, -t1145 * t806 + t1148 * t826, -t1145 * t843 + t1148 * t861, t1148 * t741 - t1145 * t737 - qJ(1) * (t1145 * t809 + t1148 * t798), t1148 * t742 - t1145 * t739 - qJ(1) * (t1145 * t815 + t1148 * t800), t1148 * t732 - t1145 * t729 - qJ(1) * (t1145 * t801 + t1148 * t789), t1148 * t727 - t1145 * t726 - qJ(1) * (t1145 * t745 + t1148 * t744); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1302, -t1303, t1294, qJ(1) * t1294, 0, 0, t1045, 0, -t1200, -t1243, t1148 * t953 + t1270, t1148 * t952 - t1315, t1145 * t963 + t1148 * t962, t1145 * t863 + t1148 * t872 + qJ(1) * (-t1145 * t930 + t1148 * t964), 0, t1045, 0, -t1243, t1200, 0, t1148 * t946 + t1270, -t1145 * t1212 + t1148 * t944, t1148 * t942 + t1315, t1145 * t841 + t1148 * t831 + qJ(1) * (-t1145 * t910 + t1148 * t949), 0, 0, t1304, 0, t973, -t1243, qJ(1) * t974 + t1145 * t882 + t1148 * t846, -qJ(1) * t1305 + t1145 * t883 + t1148 * t847, t1145 * t1308 - t1148 * t811, t1145 * t762 + t1148 * t749 + qJ(1) * (-t1145 * t808 + t1148 * t813), t1145 * t970 + t1148 * t938, t1145 * t947 + t1148 * t904, t1145 * t968 + t1148 * t934, t1145 * t969 + t1148 * t937, t1145 * t967 + t1148 * t933, t1004 * t1145 + t1148 * t994, t1145 * t774 + t1148 * t767 + qJ(1) * (-t1145 * t917 + t1148 * t955), t1145 * t775 + t1148 * t768 + qJ(1) * (-t1145 * t918 + t1148 * t956), t1145 * t783 + t1148 * t771 + qJ(1) * (-t1145 * t976 + t1148 * t988), t1145 * t740 + t1148 * t734 + qJ(1) * (-t1145 * t773 + t1148 * t779), t1145 * t835 + t1148 * t820, t1145 * t802 + t1148 * t791, t1145 * t825 + t1148 * t805, t1145 * t834 + t1148 * t819, t1145 * t826 + t1148 * t806, t1145 * t861 + t1148 * t843, t1145 * t741 + t1148 * t737 + qJ(1) * (-t1145 * t798 + t1148 * t809), t1145 * t742 + t1148 * t739 + qJ(1) * (-t1145 * t800 + t1148 * t815), t1145 * t732 + t1148 * t729 + qJ(1) * (-t1145 * t789 + t1148 * t801), t1145 * t727 + t1148 * t726 + qJ(1) * (-t1145 * t744 + t1148 * t745); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1242, t1113, 0, 0, 0, 0, t1087, 0, -t1088, t1132, t951, t950, t961, t873, 0, t1087, 0, t1132, t1088, 0, t945, t943, t941, t830, 0, 0, -t1297, 0, -t1041, t1132, t844, t845, -t810, t748, t936, t903, t932, t935, t931, t993, t765, t766, t770, t733, t818, t790, t803, t817, t804, t842, t736, t738, t728, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1276, -t1242, 0, 0, 0, t1109, 0, -t1110, 0, t985, t987, t963, t863, 0, t1109, 0, 0, t1110, 0, t985, -t1212, -t987, t841, 0, 0, t1053, 0, -t1199, 0, t882, t883, t1308, t762, t970, t947, t968, t969, t967, t1004, t774, t775, t783, t740, t835, t802, t825, t834, t826, t861, t741, t742, t732, t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1276, 0, -t1113, 0, 0, 0, t1089, 0, -t1090, -t1250, t953, t952, t962, t872, 0, t1089, 0, -t1250, t1090, 0, t946, t944, t942, t831, 0, 0, -t1296, 0, -t1044, -t1250, t846, t847, -t811, t749, t938, t904, t934, t937, t933, t994, t767, t768, t771, t734, t820, t791, t805, t819, t806, t843, t737, t739, t729, t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1242, t1113, 0, 0, 0, 0, t1087, 0, -t1088, t1132, t951, t950, t961, t873, 0, t1087, 0, t1132, t1088, 0, t945, t943, t941, t830, 0, 0, -t1297, 0, -t1041, t1132, t844, t845, -t810, t748, t936, t903, t932, t935, t931, t993, t765, t766, t770, t733, t818, t790, t803, t817, t804, t842, t736, t738, t728, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1158, 0, 0, -t1082, t1026, 0, 0, qJDD(2), 0, 0, t1158, 0, 0, t1009, t1082, qJ(3) * t1082, 0, 0, -t1107, 0, -t1106, 0, t1214, t1021, -t867, t859, t1035, t1008, t1031, t1034, t1030, t1077, t832, t833, t838, t769, t889, t857, t876, t888, t877, t921, t757, t759, t747, t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, qJDD(2), 0, t1082, 0, t1027, 0, 0, t1158, 0, 0, -qJDD(2), 0, t1082, t1006, 0, pkin(2) * t1082, 0, 0, -t1106, 0, t1107, 0, t1021, -t1214, -t1228, t858, -t1033, -t1007, -t1029, -t1032, -t1028, -t1076, t821, t822, -t837, t758, -t887, -t856, -t874, -t886, -t875, -t920, t753, t754, t746, t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1026, -t1027, 0, 0, 0, 0, 0, qJDD(2), 0, 0, t1017, 0, t1012, t954, 0, 0, 0, 0, 0, qJDD(2), t898, t897, 0, t792, t1066, -t1050, -t1069, -t1065, -t1067, 0, t852, t853, t828, t755, -t958, -t892, -t911, -t957, -t912, -t983, t760, t761, t752, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, t1158, 0, 0, t1009, t1082, 0, 0, 0, -t1107, 0, -t1106, 0, t1214, t1021, -t867, -t1278, t1035, t1008, t1031, t1034, t1030, t1077, t1193, t1192, t838, -t1281 * t849 + t1241, t889, t857, t876, t888, t877, t921, t1195, t1194, t1196, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, -t1009, 0, t1006, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(3) * t1107 + t939, pkin(3) * t1106 + t940, 0, -pkin(3) * t867, t1066, -t1050, -t1069, -t1065, -t1067, 0, -pkin(3) * t1013 - t1186, -pkin(3) * t1014 - t1185, -pkin(3) * t1055 - t1165, -pkin(3) * t823 + t1235, -t958, -t892, -t911, -t957, -t912, -t983, -pkin(3) * t864 + t1163, -pkin(3) * t870 + t1162, -pkin(3) * t854 + t1167, -pkin(3) * t763 + t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, 0, 0, qJDD(2), 0, -t1082, -t1006, 0, 0, 0, 0, t1106, 0, -t1107, 0, -t1021, t1214, t1228, -pkin(3) * t1075 + t1277, t1033, t1007, t1029, t1032, t1028, t1076, -pkin(3) * t1068 - t1169, -pkin(3) * t1070 - t1168, t837, t1213 * t849 + t1279, t887, t856, t874, t886, t875, t920, -pkin(3) * t905 - t1173, -pkin(3) * t907 - t1172, -pkin(3) * t884 - t1174, -pkin(3) * t780 - t1175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), 0, -t1158, 0, 0, t1075, t939, 0, t1079, t1051, t1073, t1078, t1071, t1098, t899, t900, -t849, -pkin(8) * t849, t960, t893, t913, t959, t914, t984, t784, t786, t777, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, -qJDD(2), 0, -t1075, 0, t940, 0, t1125, -t1112, t1249, -t1125, t1248, -qJDD(5), t878, t879, 0, -t1288, -t991, -t923, -t979, t989, -t980, -t1010, t814, t816, t778, t756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), -t939, -t940, 0, 0, -t1066, t1050, t1069, t1065, t1067, 0, t1186, t1185, t1165, -t1235, t958, t892, t911, t957, t912, t983, -t1163, -t1162, -t1167, -t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, t1104, t1114, t1245, t1122, -t1245, 0, t927, t901, 0, t992, t925, t981, t990, t982, t1011, t860, t862, t787, -pkin(9) * t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1129, -t1102, t1120, t1105, t1115, t1129, -t927, 0, t902, 0, -t1061, -t1058, -t1000, t1061, t996, -t1097, t827, t829, -pkin(5) * t924, -pkin(5) * t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1125, t1112, -t1249, t1125, -t1248, qJDD(5), -t901, -t902, 0, 0, t991, t923, t979, -t989, t980, t1010, t1188, t1187, t1166, t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, t997, t1295, -t1084, t1080, t1084, 0, t880, t839, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1083, t999, t1081, t1037, t1024, t1083, -t880, 0, t840, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, t1058, t1000, -t1061, -t996, t1097, -t839, -t840, 0, 0;];
m_new_reg  = t1;
